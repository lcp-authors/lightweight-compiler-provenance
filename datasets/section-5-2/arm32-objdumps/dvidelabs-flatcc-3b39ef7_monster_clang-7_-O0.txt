
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

0001237c <.init>:
   1237c:	push	{r3, lr}
   12380:	bl	12498 <_start@@Base+0x3c>
   12384:	pop	{r3, pc}

Disassembly of section .plt:

00012388 <strcmp@plt-0x14>:
   12388:	push	{lr}		; (str lr, [sp, #-4]!)
   1238c:	ldr	lr, [pc, #4]	; 12398 <strcmp@plt-0x4>
   12390:	add	lr, pc, lr
   12394:	ldr	pc, [lr, #8]!
   12398:	andeq	fp, r1, r8, ror #24

0001239c <strcmp@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #110592	; 0x1b000
   123a4:	ldr	pc, [ip, #3176]!	; 0xc68

000123a8 <printf@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #110592	; 0x1b000
   123b0:	ldr	pc, [ip, #3168]!	; 0xc60

000123b4 <free@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #110592	; 0x1b000
   123bc:	ldr	pc, [ip, #3160]!	; 0xc58

000123c0 <memcpy@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #110592	; 0x1b000
   123c8:	ldr	pc, [ip, #3152]!	; 0xc50

000123cc <memcmp@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #110592	; 0x1b000
   123d4:	ldr	pc, [ip, #3144]!	; 0xc48

000123d8 <realloc@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #110592	; 0x1b000
   123e0:	ldr	pc, [ip, #3136]!	; 0xc40

000123e4 <malloc@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #110592	; 0x1b000
   123ec:	ldr	pc, [ip, #3128]!	; 0xc38

000123f0 <__libc_start_main@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #110592	; 0x1b000
   123f8:	ldr	pc, [ip, #3120]!	; 0xc30

000123fc <__gmon_start__@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #110592	; 0x1b000
   12404:	ldr	pc, [ip, #3112]!	; 0xc28

00012408 <strlen@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #110592	; 0x1b000
   12410:	ldr	pc, [ip, #3104]!	; 0xc20

00012414 <posix_memalign@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #110592	; 0x1b000
   1241c:	ldr	pc, [ip, #3096]!	; 0xc18

00012420 <memset@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #110592	; 0x1b000
   12428:	ldr	pc, [ip, #3088]!	; 0xc10

0001242c <strncpy@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #110592	; 0x1b000
   12434:	ldr	pc, [ip, #3080]!	; 0xc08

00012438 <memchr@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #110592	; 0x1b000
   12440:	ldr	pc, [ip, #3072]!	; 0xc00

00012444 <abort@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #110592	; 0x1b000
   1244c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012450 <__assert_fail@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #110592	; 0x1b000
   12458:	ldr	pc, [ip, #3056]!	; 0xbf0

Disassembly of section .text:

0001245c <_start@@Base>:
   1245c:	mov	fp, #0
   12460:	mov	lr, #0
   12464:	pop	{r1}		; (ldr r1, [sp], #4)
   12468:	mov	r2, sp
   1246c:	push	{r2}		; (str r2, [sp, #-4]!)
   12470:	push	{r0}		; (str r0, [sp, #-4]!)
   12474:	ldr	ip, [pc, #16]	; 1248c <_start@@Base+0x30>
   12478:	push	{ip}		; (str ip, [sp, #-4]!)
   1247c:	ldr	r0, [pc, #12]	; 12490 <_start@@Base+0x34>
   12480:	ldr	r3, [pc, #12]	; 12494 <_start@@Base+0x38>
   12484:	bl	123f0 <__libc_start_main@plt>
   12488:	bl	12444 <abort@plt>
   1248c:	andeq	ip, r1, ip, asr #32
   12490:	andeq	r4, r1, r0, ror #16
   12494:	andeq	fp, r1, ip, ror #31
   12498:	ldr	r3, [pc, #20]	; 124b4 <_start@@Base+0x58>
   1249c:	ldr	r2, [pc, #20]	; 124b8 <_start@@Base+0x5c>
   124a0:	add	r3, pc, r3
   124a4:	ldr	r2, [r3, r2]
   124a8:	cmp	r2, #0
   124ac:	bxeq	lr
   124b0:	b	123fc <__gmon_start__@plt>
   124b4:	andeq	fp, r1, r8, asr fp
   124b8:	andeq	r0, r0, r0, asr r0
   124bc:	ldr	r0, [pc, #24]	; 124dc <_start@@Base+0x80>
   124c0:	ldr	r3, [pc, #24]	; 124e0 <_start@@Base+0x84>
   124c4:	cmp	r3, r0
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0x88>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	lr, r2, r4, rrx
   124e0:	andeq	lr, r2, r4, rrx
   124e4:	andeq	r0, r0, r0
   124e8:	ldr	r0, [pc, #36]	; 12514 <_start@@Base+0xb8>
   124ec:	ldr	r1, [pc, #36]	; 12518 <_start@@Base+0xbc>
   124f0:	sub	r1, r1, r0
   124f4:	asr	r1, r1, #2
   124f8:	add	r1, r1, r1, lsr #31
   124fc:	asrs	r1, r1, #1
   12500:	bxeq	lr
   12504:	ldr	r3, [pc, #16]	; 1251c <_start@@Base+0xc0>
   12508:	cmp	r3, #0
   1250c:	bxeq	lr
   12510:	bx	r3
   12514:	andeq	lr, r2, r4, rrx
   12518:	andeq	lr, r2, r4, rrx
   1251c:	andeq	r0, r0, r0
   12520:	push	{r4, lr}
   12524:	ldr	r4, [pc, #24]	; 12544 <_start@@Base+0xe8>
   12528:	ldrb	r3, [r4]
   1252c:	cmp	r3, #0
   12530:	popne	{r4, pc}
   12534:	bl	124bc <_start@@Base+0x60>
   12538:	mov	r3, #1
   1253c:	strb	r3, [r4]
   12540:	pop	{r4, pc}
   12544:	andeq	lr, r2, r4, rrx
   12548:	b	124e8 <_start@@Base+0x8c>

0001254c <create_monster_bottom_up@@Base>:
   1254c:	push	{r4, r5, r6, sl, fp, lr}
   12550:	add	fp, sp, #16
   12554:	sub	sp, sp, #160	; 0xa0
   12558:	ldr	r2, [pc, #704]	; 12820 <create_monster_bottom_up@@Base+0x2d4>
   1255c:	add	r2, pc, r2
   12560:	str	r0, [fp, #-20]	; 0xffffffec
   12564:	str	r1, [fp, #-24]	; 0xffffffe8
   12568:	ldr	r0, [fp, #-20]	; 0xffffffec
   1256c:	mov	r1, r2
   12570:	bl	12824 <create_monster_bottom_up@@Base+0x2d8>
   12574:	ldr	r1, [pc, #672]	; 1281c <create_monster_bottom_up@@Base+0x2d0>
   12578:	add	r1, pc, r1
   1257c:	str	r0, [fp, #-28]	; 0xffffffe4
   12580:	movw	r0, #3
   12584:	strh	r0, [fp, #-30]	; 0xffffffe2
   12588:	ldr	r0, [fp, #-20]	; 0xffffffec
   1258c:	bl	12824 <create_monster_bottom_up@@Base+0x2d8>
   12590:	str	r0, [fp, #-36]	; 0xffffffdc
   12594:	movw	r0, #5
   12598:	strh	r0, [fp, #-38]	; 0xffffffda
   1259c:	ldr	r0, [fp, #-20]	; 0xffffffec
   125a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   125a4:	ldrsh	r2, [fp, #-30]	; 0xffffffe2
   125a8:	bl	1284c <create_monster_bottom_up@@Base+0x300>
   125ac:	str	r0, [fp, #-44]	; 0xffffffd4
   125b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   125b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   125b8:	ldrsh	r2, [fp, #-38]	; 0xffffffda
   125bc:	bl	1284c <create_monster_bottom_up@@Base+0x300>
   125c0:	ldr	r1, [pc, #592]	; 12818 <create_monster_bottom_up@@Base+0x2cc>
   125c4:	add	r1, pc, r1
   125c8:	str	r0, [fp, #-48]	; 0xffffffd0
   125cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   125d0:	bl	12824 <create_monster_bottom_up@@Base+0x2d8>
   125d4:	sub	r1, fp, #62	; 0x3e
   125d8:	ldr	r2, [pc, #564]	; 12814 <create_monster_bottom_up@@Base+0x2c8>
   125dc:	add	r2, pc, r2
   125e0:	str	r0, [fp, #-52]	; 0xffffffcc
   125e4:	ldrb	r0, [r2]
   125e8:	strb	r0, [fp, #-62]	; 0xffffffc2
   125ec:	ldrb	r0, [r2, #1]
   125f0:	strb	r0, [fp, #-61]	; 0xffffffc3
   125f4:	ldrb	r0, [r2, #2]
   125f8:	strb	r0, [fp, #-60]	; 0xffffffc4
   125fc:	ldrb	r0, [r2, #3]
   12600:	strb	r0, [fp, #-59]	; 0xffffffc5
   12604:	ldrb	r0, [r2, #4]
   12608:	strb	r0, [fp, #-58]	; 0xffffffc6
   1260c:	ldrb	r0, [r2, #5]
   12610:	strb	r0, [fp, #-57]	; 0xffffffc7
   12614:	ldrb	r0, [r2, #6]
   12618:	strb	r0, [fp, #-56]	; 0xffffffc8
   1261c:	ldrb	r0, [r2, #7]
   12620:	strb	r0, [fp, #-55]	; 0xffffffc9
   12624:	ldrb	r0, [r2, #8]
   12628:	strb	r0, [fp, #-54]	; 0xffffffca
   1262c:	ldrb	r0, [r2, #9]
   12630:	strb	r0, [fp, #-53]	; 0xffffffcb
   12634:	ldr	r0, [fp, #-20]	; 0xffffffec
   12638:	movw	r2, #10
   1263c:	bl	128c0 <create_monster_bottom_up@@Base+0x374>
   12640:	str	r0, [fp, #-68]	; 0xffffffbc
   12644:	ldr	r0, [fp, #-20]	; 0xffffffec
   12648:	bl	12908 <create_monster_bottom_up@@Base+0x3bc>
   1264c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12650:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12654:	str	r0, [sp, #76]	; 0x4c
   12658:	mov	r0, r1
   1265c:	mov	r1, r2
   12660:	bl	12928 <create_monster_bottom_up@@Base+0x3dc>
   12664:	ldr	r1, [fp, #-20]	; 0xffffffec
   12668:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1266c:	str	r0, [sp, #72]	; 0x48
   12670:	mov	r0, r1
   12674:	mov	r1, r2
   12678:	bl	12928 <create_monster_bottom_up@@Base+0x3dc>
   1267c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12680:	str	r0, [sp, #68]	; 0x44
   12684:	mov	r0, r1
   12688:	bl	12974 <create_monster_bottom_up@@Base+0x428>
   1268c:	ldr	r1, [pc, #380]	; 12810 <create_monster_bottom_up@@Base+0x2c4>
   12690:	add	r1, pc, r1
   12694:	str	r0, [fp, #-72]	; 0xffffffb8
   12698:	ldr	r0, [r1]
   1269c:	str	r0, [fp, #-84]	; 0xffffffac
   126a0:	ldr	r0, [r1, #4]
   126a4:	str	r0, [fp, #-80]	; 0xffffffb0
   126a8:	ldr	r0, [r1, #8]
   126ac:	str	r0, [fp, #-76]	; 0xffffffb4
   126b0:	movw	r0, #300	; 0x12c
   126b4:	strh	r0, [fp, #-86]	; 0xffffffaa
   126b8:	movw	r0, #150	; 0x96
   126bc:	strh	r0, [sp, #88]	; 0x58
   126c0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   126c4:	add	r0, sp, #80	; 0x50
   126c8:	bl	12994 <create_monster_bottom_up@@Base+0x448>
   126cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   126d0:	cmp	r0, #0
   126d4:	bne	1273c <create_monster_bottom_up@@Base+0x1f0>
   126d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   126dc:	ldrh	r1, [sp, #88]	; 0x58
   126e0:	ldrh	r2, [fp, #-86]	; 0xffffffaa
   126e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   126e8:	ldr	ip, [fp, #-68]	; 0xffffffbc
   126ec:	ldr	lr, [fp, #-72]	; 0xffffffb8
   126f0:	ldr	r4, [sp, #80]	; 0x50
   126f4:	ldr	r5, [sp, #84]	; 0x54
   126f8:	mov	r6, sp
   126fc:	str	r5, [r6, #20]
   12700:	str	r4, [r6, #16]
   12704:	str	lr, [r6, #12]
   12708:	mov	lr, #0
   1270c:	str	lr, [r6, #8]
   12710:	str	ip, [r6, #4]
   12714:	str	r3, [r6]
   12718:	sxth	r1, r1
   1271c:	sxth	r3, r2
   12720:	sub	r2, fp, #84	; 0x54
   12724:	str	r1, [sp, #64]	; 0x40
   12728:	mov	r1, r2
   1272c:	ldr	r2, [sp, #64]	; 0x40
   12730:	bl	129b4 <create_monster_bottom_up@@Base+0x468>
   12734:	str	r0, [sp, #60]	; 0x3c
   12738:	b	12804 <create_monster_bottom_up@@Base+0x2b8>
   1273c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12740:	bl	12aac <create_monster_bottom_up@@Base+0x560>
   12744:	ldr	lr, [fp, #-20]	; 0xffffffec
   12748:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1274c:	vmov.f32	s1, #0	; 0x40000000  2.0
   12750:	vmov.f32	s2, #8	; 0x40400000  3.0
   12754:	str	r0, [sp, #56]	; 0x38
   12758:	mov	r0, lr
   1275c:	bl	12af4 <create_monster_bottom_up@@Base+0x5a8>
   12760:	ldr	lr, [fp, #-20]	; 0xffffffec
   12764:	ldrsh	r1, [fp, #-86]	; 0xffffffaa
   12768:	str	r0, [sp, #52]	; 0x34
   1276c:	mov	r0, lr
   12770:	bl	12b64 <create_monster_bottom_up@@Base+0x618>
   12774:	ldr	r1, [fp, #-20]	; 0xffffffec
   12778:	ldr	lr, [fp, #-52]	; 0xffffffcc
   1277c:	str	r0, [sp, #48]	; 0x30
   12780:	mov	r0, r1
   12784:	mov	r1, lr
   12788:	bl	12bec <create_monster_bottom_up@@Base+0x6a0>
   1278c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12790:	ldr	lr, [fp, #-68]	; 0xffffffbc
   12794:	str	r0, [sp, #44]	; 0x2c
   12798:	mov	r0, r1
   1279c:	mov	r1, lr
   127a0:	bl	12c58 <create_monster_bottom_up@@Base+0x70c>
   127a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   127a8:	mov	lr, #0
   127ac:	str	r0, [sp, #40]	; 0x28
   127b0:	mov	r0, r1
   127b4:	mov	r1, lr
   127b8:	bl	12cc4 <create_monster_bottom_up@@Base+0x778>
   127bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   127c0:	ldr	lr, [fp, #-72]	; 0xffffffb8
   127c4:	str	r0, [sp, #36]	; 0x24
   127c8:	mov	r0, r1
   127cc:	mov	r1, lr
   127d0:	bl	12d48 <create_monster_bottom_up@@Base+0x7fc>
   127d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   127d8:	ldr	lr, [sp, #80]	; 0x50
   127dc:	ldr	r2, [sp, #84]	; 0x54
   127e0:	str	r0, [sp, #32]
   127e4:	mov	r0, r1
   127e8:	mov	r1, lr
   127ec:	bl	12db4 <create_monster_bottom_up@@Base+0x868>
   127f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   127f4:	str	r0, [sp, #28]
   127f8:	mov	r0, r1
   127fc:	bl	12e78 <create_monster_bottom_up@@Base+0x92c>
   12800:	str	r0, [sp, #24]
   12804:	movw	r0, #0
   12808:	sub	sp, fp, #16
   1280c:	pop	{r4, r5, r6, sl, fp, pc}
   12810:	andeq	sl, r0, ip, asr #5
   12814:	andeq	sl, r0, r4, ror r3
   12818:	muleq	r0, sl, sl
   1281c:	andeq	r9, r0, r2, ror #21
   12820:	strdeq	r9, [r0], -r8
   12824:	push	{fp, lr}
   12828:	mov	fp, sp
   1282c:	sub	sp, sp, #8
   12830:	str	r0, [sp, #4]
   12834:	str	r1, [sp]
   12838:	ldr	r0, [sp, #4]
   1283c:	ldr	r1, [sp]
   12840:	bl	1a56c <flatcc_builder_create_string_str@@Base>
   12844:	mov	sp, fp
   12848:	pop	{fp, pc}
   1284c:	push	{fp, lr}
   12850:	mov	fp, sp
   12854:	sub	sp, sp, #16
   12858:	str	r0, [sp, #8]
   1285c:	str	r1, [sp, #4]
   12860:	strh	r2, [sp, #2]
   12864:	ldr	r0, [sp, #8]
   12868:	bl	14a0c <main@@Base+0x1ac>
   1286c:	cmp	r0, #0
   12870:	bne	1289c <create_monster_bottom_up@@Base+0x350>
   12874:	ldr	r0, [sp, #8]
   12878:	ldr	r1, [sp, #4]
   1287c:	bl	14a30 <main@@Base+0x1d0>
   12880:	cmp	r0, #0
   12884:	bne	1289c <create_monster_bottom_up@@Base+0x350>
   12888:	ldr	r0, [sp, #8]
   1288c:	ldrsh	r1, [sp, #2]
   12890:	bl	14a9c <main@@Base+0x23c>
   12894:	cmp	r0, #0
   12898:	beq	128a8 <create_monster_bottom_up@@Base+0x35c>
   1289c:	movw	r0, #0
   128a0:	str	r0, [fp, #-4]
   128a4:	b	128b4 <create_monster_bottom_up@@Base+0x368>
   128a8:	ldr	r0, [sp, #8]
   128ac:	bl	14b20 <main@@Base+0x2c0>
   128b0:	str	r0, [fp, #-4]
   128b4:	ldr	r0, [fp, #-4]
   128b8:	mov	sp, fp
   128bc:	pop	{fp, pc}
   128c0:	push	{fp, lr}
   128c4:	mov	fp, sp
   128c8:	sub	sp, sp, #24
   128cc:	str	r0, [fp, #-4]
   128d0:	str	r1, [fp, #-8]
   128d4:	str	r2, [sp, #12]
   128d8:	ldr	r0, [fp, #-4]
   128dc:	ldr	r1, [fp, #-8]
   128e0:	ldr	r2, [sp, #12]
   128e4:	movw	r3, #1
   128e8:	movw	ip, #1
   128ec:	uxth	ip, ip
   128f0:	str	ip, [sp]
   128f4:	mvn	ip, #0
   128f8:	str	ip, [sp, #4]
   128fc:	bl	18f84 <flatcc_builder_create_vector@@Base>
   12900:	mov	sp, fp
   12904:	pop	{fp, pc}
   12908:	push	{fp, lr}
   1290c:	mov	fp, sp
   12910:	sub	sp, sp, #8
   12914:	str	r0, [sp, #4]
   12918:	ldr	r0, [sp, #4]
   1291c:	bl	17d44 <flatcc_builder_start_offset_vector@@Base>
   12920:	mov	sp, fp
   12924:	pop	{fp, pc}
   12928:	push	{fp, lr}
   1292c:	mov	fp, sp
   12930:	sub	sp, sp, #16
   12934:	str	r0, [fp, #-4]
   12938:	str	r1, [sp, #8]
   1293c:	ldr	r0, [sp, #8]
   12940:	cmp	r0, #0
   12944:	beq	1295c <create_monster_bottom_up@@Base+0x410>
   12948:	ldr	r0, [fp, #-4]
   1294c:	ldr	r1, [sp, #8]
   12950:	bl	17534 <flatcc_builder_offset_vector_push@@Base>
   12954:	str	r0, [sp, #4]
   12958:	b	12968 <create_monster_bottom_up@@Base+0x41c>
   1295c:	movw	r0, #0
   12960:	str	r0, [sp, #4]
   12964:	b	12968 <create_monster_bottom_up@@Base+0x41c>
   12968:	ldr	r0, [sp, #4]
   1296c:	mov	sp, fp
   12970:	pop	{fp, pc}
   12974:	push	{fp, lr}
   12978:	mov	fp, sp
   1297c:	sub	sp, sp, #8
   12980:	str	r0, [sp, #4]
   12984:	ldr	r0, [sp, #4]
   12988:	bl	17e50 <flatcc_builder_end_offset_vector@@Base>
   1298c:	mov	sp, fp
   12990:	pop	{fp, pc}
   12994:	sub	sp, sp, #4
   12998:	str	r1, [sp]
   1299c:	movw	r1, #1
   129a0:	strb	r1, [r0]
   129a4:	ldr	r1, [sp]
   129a8:	str	r1, [r0, #4]
   129ac:	add	sp, sp, #4
   129b0:	bx	lr
   129b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129b8:	add	fp, sp, #24
   129bc:	sub	sp, sp, #72	; 0x48
   129c0:	ldr	ip, [fp, #28]
   129c4:	ldr	lr, [fp, #24]
   129c8:	ldr	r4, [fp, #20]
   129cc:	ldr	r5, [fp, #16]
   129d0:	ldr	r6, [fp, #12]
   129d4:	ldr	r7, [fp, #8]
   129d8:	str	lr, [fp, #-36]	; 0xffffffdc
   129dc:	str	ip, [fp, #-32]	; 0xffffffe0
   129e0:	str	r0, [fp, #-40]	; 0xffffffd8
   129e4:	str	r1, [fp, #-44]	; 0xffffffd4
   129e8:	strh	r2, [fp, #-46]	; 0xffffffd2
   129ec:	strh	r3, [sp, #48]	; 0x30
   129f0:	strb	r5, [sp, #47]	; 0x2f
   129f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   129f8:	movw	r1, #0
   129fc:	str	r7, [sp, #40]	; 0x28
   12a00:	str	r6, [sp, #36]	; 0x24
   12a04:	str	r4, [sp, #32]
   12a08:	bl	14bd4 <main@@Base+0x374>
   12a0c:	cmp	r0, #0
   12a10:	beq	12a20 <create_monster_bottom_up@@Base+0x4d4>
   12a14:	movw	r0, #0
   12a18:	str	r0, [fp, #-28]	; 0xffffffe4
   12a1c:	b	12aa0 <create_monster_bottom_up@@Base+0x554>
   12a20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12a24:	mov	r1, r0
   12a28:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12a2c:	ldrh	r3, [fp, #-46]	; 0xffffffd2
   12a30:	ldrh	ip, [sp, #48]	; 0x30
   12a34:	ldr	lr, [fp, #8]
   12a38:	ldr	r4, [fp, #12]
   12a3c:	ldrb	r5, [sp, #47]	; 0x2f
   12a40:	ldr	r6, [fp, #20]
   12a44:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12a48:	ldr	r8, [fp, #-32]	; 0xffffffe0
   12a4c:	mov	r9, sp
   12a50:	str	r8, [r9, #20]
   12a54:	str	r7, [r9, #16]
   12a58:	str	r6, [r9, #12]
   12a5c:	sxtb	r5, r5
   12a60:	str	r5, [r9, #8]
   12a64:	str	r4, [r9, #4]
   12a68:	str	lr, [r9]
   12a6c:	sxth	r3, r3
   12a70:	sxth	ip, ip
   12a74:	str	r1, [sp, #28]
   12a78:	mov	r1, r2
   12a7c:	mov	r2, r3
   12a80:	mov	r3, ip
   12a84:	bl	14c30 <main@@Base+0x3d0>
   12a88:	ldr	r1, [sp, #28]
   12a8c:	str	r0, [sp, #24]
   12a90:	mov	r0, r1
   12a94:	ldr	r1, [sp, #24]
   12a98:	bl	14c08 <main@@Base+0x3a8>
   12a9c:	str	r0, [fp, #-28]	; 0xffffffe4
   12aa0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12aa4:	sub	sp, fp, #24
   12aa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12aac:	push	{fp, lr}
   12ab0:	mov	fp, sp
   12ab4:	sub	sp, sp, #8
   12ab8:	str	r0, [sp, #4]
   12abc:	ldr	r0, [sp, #4]
   12ac0:	movw	r1, #0
   12ac4:	bl	14bd4 <main@@Base+0x374>
   12ac8:	cmp	r0, #0
   12acc:	beq	12adc <create_monster_bottom_up@@Base+0x590>
   12ad0:	mvn	r0, #0
   12ad4:	str	r0, [sp]
   12ad8:	b	12ae8 <create_monster_bottom_up@@Base+0x59c>
   12adc:	ldr	r0, [sp, #4]
   12ae0:	bl	14d68 <main@@Base+0x508>
   12ae4:	str	r0, [sp]
   12ae8:	ldr	r0, [sp]
   12aec:	mov	sp, fp
   12af0:	pop	{fp, pc}
   12af4:	push	{fp, lr}
   12af8:	mov	fp, sp
   12afc:	sub	sp, sp, #32
   12b00:	str	r0, [fp, #-8]
   12b04:	vstr	s0, [fp, #-12]
   12b08:	vstr	s1, [sp, #16]
   12b0c:	vstr	s2, [sp, #12]
   12b10:	ldr	r0, [fp, #-8]
   12b14:	bl	14ff0 <main@@Base+0x790>
   12b18:	str	r0, [sp, #8]
   12b1c:	ldr	r0, [sp, #8]
   12b20:	movw	lr, #0
   12b24:	cmp	r0, lr
   12b28:	bne	12b38 <create_monster_bottom_up@@Base+0x5ec>
   12b2c:	movw	r0, #0
   12b30:	str	r0, [fp, #-4]
   12b34:	b	12b58 <create_monster_bottom_up@@Base+0x60c>
   12b38:	ldr	r0, [sp, #8]
   12b3c:	vldr	s0, [fp, #-12]
   12b40:	vldr	s1, [sp, #16]
   12b44:	vldr	s2, [sp, #12]
   12b48:	bl	150ec <main@@Base+0x88c>
   12b4c:	movw	lr, #0
   12b50:	str	lr, [fp, #-4]
   12b54:	str	r0, [sp, #4]
   12b58:	ldr	r0, [fp, #-4]
   12b5c:	mov	sp, fp
   12b60:	pop	{fp, pc}
   12b64:	push	{fp, lr}
   12b68:	mov	fp, sp
   12b6c:	sub	sp, sp, #24
   12b70:	str	r0, [fp, #-8]
   12b74:	strh	r1, [fp, #-10]
   12b78:	ldrsh	r0, [fp, #-10]
   12b7c:	cmp	r0, #100	; 0x64
   12b80:	bne	12b90 <create_monster_bottom_up@@Base+0x644>
   12b84:	movw	r0, #0
   12b88:	str	r0, [fp, #-4]
   12b8c:	b	12be0 <create_monster_bottom_up@@Base+0x694>
   12b90:	ldr	r0, [fp, #-8]
   12b94:	movw	r1, #2
   12b98:	str	r1, [sp, #4]
   12b9c:	ldr	r2, [sp, #4]
   12ba0:	movw	r3, #2
   12ba4:	uxth	r3, r3
   12ba8:	bl	19990 <flatcc_builder_table_add@@Base>
   12bac:	str	r0, [sp, #8]
   12bb0:	movw	r1, #0
   12bb4:	cmp	r0, r1
   12bb8:	bne	12bc8 <create_monster_bottom_up@@Base+0x67c>
   12bbc:	mvn	r0, #0
   12bc0:	str	r0, [fp, #-4]
   12bc4:	b	12be0 <create_monster_bottom_up@@Base+0x694>
   12bc8:	ldr	r0, [sp, #8]
   12bcc:	ldrsh	r1, [fp, #-10]
   12bd0:	bl	14b90 <main@@Base+0x330>
   12bd4:	movw	r1, #0
   12bd8:	str	r1, [fp, #-4]
   12bdc:	str	r0, [sp]
   12be0:	ldr	r0, [fp, #-4]
   12be4:	mov	sp, fp
   12be8:	pop	{fp, pc}
   12bec:	push	{fp, lr}
   12bf0:	mov	fp, sp
   12bf4:	sub	sp, sp, #16
   12bf8:	str	r0, [fp, #-4]
   12bfc:	str	r1, [sp, #8]
   12c00:	ldr	r0, [sp, #8]
   12c04:	cmp	r0, #0
   12c08:	beq	12c40 <create_monster_bottom_up@@Base+0x6f4>
   12c0c:	ldr	r0, [fp, #-4]
   12c10:	movw	r1, #3
   12c14:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   12c18:	str	r0, [sp, #4]
   12c1c:	movw	r1, #0
   12c20:	cmp	r0, r1
   12c24:	beq	12c40 <create_monster_bottom_up@@Base+0x6f4>
   12c28:	ldr	r0, [sp, #8]
   12c2c:	ldr	r1, [sp, #4]
   12c30:	str	r0, [r1]
   12c34:	movw	r0, #0
   12c38:	str	r0, [sp]
   12c3c:	b	12c4c <create_monster_bottom_up@@Base+0x700>
   12c40:	mvn	r0, #0
   12c44:	str	r0, [sp]
   12c48:	b	12c4c <create_monster_bottom_up@@Base+0x700>
   12c4c:	ldr	r0, [sp]
   12c50:	mov	sp, fp
   12c54:	pop	{fp, pc}
   12c58:	push	{fp, lr}
   12c5c:	mov	fp, sp
   12c60:	sub	sp, sp, #16
   12c64:	str	r0, [fp, #-4]
   12c68:	str	r1, [sp, #8]
   12c6c:	ldr	r0, [sp, #8]
   12c70:	cmp	r0, #0
   12c74:	beq	12cac <create_monster_bottom_up@@Base+0x760>
   12c78:	ldr	r0, [fp, #-4]
   12c7c:	movw	r1, #5
   12c80:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   12c84:	str	r0, [sp, #4]
   12c88:	movw	r1, #0
   12c8c:	cmp	r0, r1
   12c90:	beq	12cac <create_monster_bottom_up@@Base+0x760>
   12c94:	ldr	r0, [sp, #8]
   12c98:	ldr	r1, [sp, #4]
   12c9c:	str	r0, [r1]
   12ca0:	movw	r0, #0
   12ca4:	str	r0, [sp]
   12ca8:	b	12cb8 <create_monster_bottom_up@@Base+0x76c>
   12cac:	mvn	r0, #0
   12cb0:	str	r0, [sp]
   12cb4:	b	12cb8 <create_monster_bottom_up@@Base+0x76c>
   12cb8:	ldr	r0, [sp]
   12cbc:	mov	sp, fp
   12cc0:	pop	{fp, pc}
   12cc4:	push	{fp, lr}
   12cc8:	mov	fp, sp
   12ccc:	sub	sp, sp, #24
   12cd0:	str	r0, [fp, #-8]
   12cd4:	strb	r1, [fp, #-9]
   12cd8:	ldrsb	r0, [fp, #-9]
   12cdc:	cmp	r0, #2
   12ce0:	bne	12cf0 <create_monster_bottom_up@@Base+0x7a4>
   12ce4:	movw	r0, #0
   12ce8:	str	r0, [fp, #-4]
   12cec:	b	12d3c <create_monster_bottom_up@@Base+0x7f0>
   12cf0:	ldr	r0, [fp, #-8]
   12cf4:	movw	r1, #6
   12cf8:	movw	r2, #1
   12cfc:	movw	r3, #1
   12d00:	uxth	r3, r3
   12d04:	bl	19990 <flatcc_builder_table_add@@Base>
   12d08:	str	r0, [sp, #8]
   12d0c:	movw	r1, #0
   12d10:	cmp	r0, r1
   12d14:	bne	12d24 <create_monster_bottom_up@@Base+0x7d8>
   12d18:	mvn	r0, #0
   12d1c:	str	r0, [fp, #-4]
   12d20:	b	12d3c <create_monster_bottom_up@@Base+0x7f0>
   12d24:	ldr	r0, [sp, #8]
   12d28:	ldrsb	r1, [fp, #-9]
   12d2c:	bl	15188 <main@@Base+0x928>
   12d30:	movw	r1, #0
   12d34:	str	r1, [fp, #-4]
   12d38:	str	r0, [sp, #4]
   12d3c:	ldr	r0, [fp, #-4]
   12d40:	mov	sp, fp
   12d44:	pop	{fp, pc}
   12d48:	push	{fp, lr}
   12d4c:	mov	fp, sp
   12d50:	sub	sp, sp, #16
   12d54:	str	r0, [fp, #-4]
   12d58:	str	r1, [sp, #8]
   12d5c:	ldr	r0, [sp, #8]
   12d60:	cmp	r0, #0
   12d64:	beq	12d9c <create_monster_bottom_up@@Base+0x850>
   12d68:	ldr	r0, [fp, #-4]
   12d6c:	movw	r1, #7
   12d70:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   12d74:	str	r0, [sp, #4]
   12d78:	movw	r1, #0
   12d7c:	cmp	r0, r1
   12d80:	beq	12d9c <create_monster_bottom_up@@Base+0x850>
   12d84:	ldr	r0, [sp, #8]
   12d88:	ldr	r1, [sp, #4]
   12d8c:	str	r0, [r1]
   12d90:	movw	r0, #0
   12d94:	str	r0, [sp]
   12d98:	b	12da8 <create_monster_bottom_up@@Base+0x85c>
   12d9c:	mvn	r0, #0
   12da0:	str	r0, [sp]
   12da4:	b	12da8 <create_monster_bottom_up@@Base+0x85c>
   12da8:	ldr	r0, [sp]
   12dac:	mov	sp, fp
   12db0:	pop	{fp, pc}
   12db4:	push	{fp, lr}
   12db8:	mov	fp, sp
   12dbc:	sub	sp, sp, #24
   12dc0:	str	r1, [sp, #12]
   12dc4:	str	r2, [sp, #16]
   12dc8:	str	r0, [sp, #8]
   12dcc:	ldrb	r0, [sp, #12]
   12dd0:	cmp	r0, #0
   12dd4:	bne	12de4 <create_monster_bottom_up@@Base+0x898>
   12dd8:	movw	r0, #0
   12ddc:	str	r0, [fp, #-4]
   12de0:	b	12e6c <create_monster_bottom_up@@Base+0x920>
   12de4:	ldr	r0, [sp, #16]
   12de8:	cmp	r0, #0
   12dec:	bne	12dfc <create_monster_bottom_up@@Base+0x8b0>
   12df0:	mvn	r0, #0
   12df4:	str	r0, [fp, #-4]
   12df8:	b	12e6c <create_monster_bottom_up@@Base+0x920>
   12dfc:	ldr	r0, [sp, #8]
   12e00:	movw	r1, #8
   12e04:	movw	r2, #1
   12e08:	movw	r3, #1
   12e0c:	uxth	r3, r3
   12e10:	bl	19990 <flatcc_builder_table_add@@Base>
   12e14:	str	r0, [sp]
   12e18:	movw	r1, #0
   12e1c:	cmp	r0, r1
   12e20:	beq	12e40 <create_monster_bottom_up@@Base+0x8f4>
   12e24:	ldr	r0, [sp, #8]
   12e28:	movw	r1, #9
   12e2c:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   12e30:	str	r0, [sp, #4]
   12e34:	movw	r1, #0
   12e38:	cmp	r0, r1
   12e3c:	bne	12e4c <create_monster_bottom_up@@Base+0x900>
   12e40:	mvn	r0, #0
   12e44:	str	r0, [fp, #-4]
   12e48:	b	12e6c <create_monster_bottom_up@@Base+0x920>
   12e4c:	ldrb	r0, [sp, #12]
   12e50:	ldr	r1, [sp]
   12e54:	strb	r0, [r1]
   12e58:	ldr	r0, [sp, #16]
   12e5c:	ldr	r1, [sp, #4]
   12e60:	str	r0, [r1]
   12e64:	movw	r0, #0
   12e68:	str	r0, [fp, #-4]
   12e6c:	ldr	r0, [fp, #-4]
   12e70:	mov	sp, fp
   12e74:	pop	{fp, pc}
   12e78:	push	{fp, lr}
   12e7c:	mov	fp, sp
   12e80:	sub	sp, sp, #16
   12e84:	str	r0, [fp, #-4]
   12e88:	ldr	r0, [fp, #-4]
   12e8c:	ldr	r1, [fp, #-4]
   12e90:	str	r0, [sp, #8]
   12e94:	mov	r0, r1
   12e98:	bl	14f80 <main@@Base+0x720>
   12e9c:	ldr	r1, [sp, #8]
   12ea0:	str	r0, [sp, #4]
   12ea4:	mov	r0, r1
   12ea8:	ldr	r1, [sp, #4]
   12eac:	bl	14c08 <main@@Base+0x3a8>
   12eb0:	mov	sp, fp
   12eb4:	pop	{fp, pc}

00012eb8 <create_monster_top_down@@Base>:
   12eb8:	push	{fp, lr}
   12ebc:	mov	fp, sp
   12ec0:	sub	sp, sp, #88	; 0x58
   12ec4:	ldr	r1, [pc, #448]	; 1308c <create_monster_top_down@@Base+0x1d4>
   12ec8:	add	r1, pc, r1
   12ecc:	str	r0, [fp, #-4]
   12ed0:	ldrb	r0, [r1]
   12ed4:	strb	r0, [fp, #-14]
   12ed8:	ldrb	r0, [r1, #1]
   12edc:	strb	r0, [fp, #-13]
   12ee0:	ldrb	r0, [r1, #2]
   12ee4:	strb	r0, [fp, #-12]
   12ee8:	ldrb	r0, [r1, #3]
   12eec:	strb	r0, [fp, #-11]
   12ef0:	ldrb	r0, [r1, #4]
   12ef4:	strb	r0, [fp, #-10]
   12ef8:	ldrb	r0, [r1, #5]
   12efc:	strb	r0, [fp, #-9]
   12f00:	ldrb	r0, [r1, #6]
   12f04:	strb	r0, [fp, #-8]
   12f08:	ldrb	r0, [r1, #7]
   12f0c:	strb	r0, [fp, #-7]
   12f10:	ldrb	r0, [r1, #8]
   12f14:	strb	r0, [fp, #-6]
   12f18:	ldrb	r0, [r1, #9]
   12f1c:	strb	r0, [fp, #-5]
   12f20:	movw	r0, #10
   12f24:	str	r0, [fp, #-20]	; 0xffffffec
   12f28:	ldr	r0, [fp, #-4]
   12f2c:	bl	12aac <create_monster_bottom_up@@Base+0x560>
   12f30:	ldr	r1, [fp, #-4]
   12f34:	str	r0, [fp, #-28]	; 0xffffffe4
   12f38:	mov	r0, r1
   12f3c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   12f40:	vmov.f32	s1, #0	; 0x40000000  2.0
   12f44:	vmov.f32	s2, #8	; 0x40400000  3.0
   12f48:	bl	12af4 <create_monster_bottom_up@@Base+0x5a8>
   12f4c:	ldr	r1, [fp, #-4]
   12f50:	str	r0, [fp, #-32]	; 0xffffffe0
   12f54:	mov	r0, r1
   12f58:	movw	r1, #300	; 0x12c
   12f5c:	sxth	r1, r1
   12f60:	bl	12b64 <create_monster_bottom_up@@Base+0x618>
   12f64:	ldr	r1, [pc, #284]	; 13088 <create_monster_top_down@@Base+0x1d0>
   12f68:	add	r1, pc, r1
   12f6c:	ldr	lr, [fp, #-4]
   12f70:	str	r0, [fp, #-36]	; 0xffffffdc
   12f74:	mov	r0, lr
   12f78:	bl	13090 <create_monster_top_down@@Base+0x1d8>
   12f7c:	sub	r1, fp, #14
   12f80:	ldr	lr, [fp, #-4]
   12f84:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f88:	str	r0, [fp, #-40]	; 0xffffffd8
   12f8c:	mov	r0, lr
   12f90:	bl	130dc <create_monster_top_down@@Base+0x224>
   12f94:	ldr	r1, [fp, #-4]
   12f98:	str	r0, [sp, #44]	; 0x2c
   12f9c:	mov	r0, r1
   12fa0:	movw	r1, #0
   12fa4:	sxtb	r1, r1
   12fa8:	bl	12cc4 <create_monster_bottom_up@@Base+0x778>
   12fac:	ldr	r1, [fp, #-4]
   12fb0:	str	r0, [sp, #40]	; 0x28
   12fb4:	mov	r0, r1
   12fb8:	bl	13134 <create_monster_top_down@@Base+0x27c>
   12fbc:	ldr	r1, [pc, #192]	; 13084 <create_monster_top_down@@Base+0x1cc>
   12fc0:	add	r1, pc, r1
   12fc4:	ldr	r2, [fp, #-4]
   12fc8:	ldr	lr, [fp, #-4]
   12fcc:	str	r0, [sp, #36]	; 0x24
   12fd0:	mov	r0, lr
   12fd4:	str	r2, [sp, #32]
   12fd8:	bl	12824 <create_monster_bottom_up@@Base+0x2d8>
   12fdc:	ldr	r1, [sp, #32]
   12fe0:	str	r0, [sp, #28]
   12fe4:	mov	r0, r1
   12fe8:	ldr	r1, [sp, #28]
   12fec:	movw	r2, #3
   12ff0:	sxth	r2, r2
   12ff4:	bl	13154 <create_monster_top_down@@Base+0x29c>
   12ff8:	ldr	r1, [pc, #128]	; 13080 <create_monster_top_down@@Base+0x1c8>
   12ffc:	add	r1, pc, r1
   13000:	ldr	r2, [fp, #-4]
   13004:	ldr	lr, [fp, #-4]
   13008:	str	r0, [sp, #24]
   1300c:	mov	r0, lr
   13010:	str	r2, [sp, #20]
   13014:	bl	12824 <create_monster_bottom_up@@Base+0x2d8>
   13018:	ldr	r1, [sp, #20]
   1301c:	str	r0, [sp, #16]
   13020:	mov	r0, r1
   13024:	ldr	r1, [sp, #16]
   13028:	movw	r2, #5
   1302c:	sxth	r2, r2
   13030:	bl	13154 <create_monster_top_down@@Base+0x29c>
   13034:	ldr	r0, [r0]
   13038:	str	r0, [fp, #-24]	; 0xffffffe8
   1303c:	ldr	r0, [fp, #-4]
   13040:	bl	131a8 <create_monster_top_down@@Base+0x2f0>
   13044:	ldr	r1, [fp, #-4]
   13048:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1304c:	str	r0, [sp, #12]
   13050:	mov	r0, r1
   13054:	mov	r1, r2
   13058:	bl	131e8 <create_monster_top_down@@Base+0x330>
   1305c:	ldr	r1, [fp, #-4]
   13060:	str	r0, [sp, #8]
   13064:	mov	r0, r1
   13068:	bl	12e78 <create_monster_bottom_up@@Base+0x92c>
   1306c:	movw	r1, #0
   13070:	str	r0, [sp, #4]
   13074:	mov	r0, r1
   13078:	mov	sp, fp
   1307c:	pop	{fp, pc}
   13080:	andeq	r9, r0, lr, asr r0
   13084:	muleq	r0, r4, r0
   13088:	strdeq	r9, [r0], -r6
   1308c:	andeq	r9, r0, r0, lsr #21
   13090:	push	{fp, lr}
   13094:	mov	fp, sp
   13098:	sub	sp, sp, #16
   1309c:	str	r0, [fp, #-4]
   130a0:	str	r1, [sp, #8]
   130a4:	ldr	r0, [fp, #-4]
   130a8:	ldr	r1, [fp, #-4]
   130ac:	ldr	r2, [sp, #8]
   130b0:	str	r0, [sp, #4]
   130b4:	mov	r0, r1
   130b8:	mov	r1, r2
   130bc:	bl	1a56c <flatcc_builder_create_string_str@@Base>
   130c0:	ldr	r1, [sp, #4]
   130c4:	str	r0, [sp]
   130c8:	mov	r0, r1
   130cc:	ldr	r1, [sp]
   130d0:	bl	12bec <create_monster_bottom_up@@Base+0x6a0>
   130d4:	mov	sp, fp
   130d8:	pop	{fp, pc}
   130dc:	push	{fp, lr}
   130e0:	mov	fp, sp
   130e4:	sub	sp, sp, #24
   130e8:	str	r0, [fp, #-4]
   130ec:	str	r1, [fp, #-8]
   130f0:	str	r2, [sp, #12]
   130f4:	ldr	r0, [fp, #-4]
   130f8:	ldr	r1, [fp, #-4]
   130fc:	ldr	r2, [fp, #-8]
   13100:	ldr	r3, [sp, #12]
   13104:	str	r0, [sp, #8]
   13108:	mov	r0, r1
   1310c:	mov	r1, r2
   13110:	mov	r2, r3
   13114:	bl	128c0 <create_monster_bottom_up@@Base+0x374>
   13118:	ldr	r1, [sp, #8]
   1311c:	str	r0, [sp, #4]
   13120:	mov	r0, r1
   13124:	ldr	r1, [sp, #4]
   13128:	bl	12c58 <create_monster_bottom_up@@Base+0x70c>
   1312c:	mov	sp, fp
   13130:	pop	{fp, pc}
   13134:	push	{fp, lr}
   13138:	mov	fp, sp
   1313c:	sub	sp, sp, #8
   13140:	str	r0, [sp, #4]
   13144:	ldr	r0, [sp, #4]
   13148:	bl	17d44 <flatcc_builder_start_offset_vector@@Base>
   1314c:	mov	sp, fp
   13150:	pop	{fp, pc}
   13154:	push	{fp, lr}
   13158:	mov	fp, sp
   1315c:	sub	sp, sp, #24
   13160:	str	r0, [fp, #-4]
   13164:	str	r1, [fp, #-8]
   13168:	strh	r2, [fp, #-10]
   1316c:	ldr	r0, [fp, #-4]
   13170:	ldr	r1, [fp, #-4]
   13174:	ldr	r2, [fp, #-8]
   13178:	str	r0, [sp, #8]
   1317c:	mov	r0, r1
   13180:	mov	r1, r2
   13184:	ldrsh	r2, [fp, #-10]
   13188:	bl	1284c <create_monster_bottom_up@@Base+0x300>
   1318c:	ldr	r1, [sp, #8]
   13190:	str	r0, [sp, #4]
   13194:	mov	r0, r1
   13198:	ldr	r1, [sp, #4]
   1319c:	bl	151cc <main@@Base+0x96c>
   131a0:	mov	sp, fp
   131a4:	pop	{fp, pc}
   131a8:	push	{fp, lr}
   131ac:	mov	fp, sp
   131b0:	sub	sp, sp, #16
   131b4:	str	r0, [fp, #-4]
   131b8:	ldr	r0, [fp, #-4]
   131bc:	ldr	r1, [fp, #-4]
   131c0:	str	r0, [sp, #8]
   131c4:	mov	r0, r1
   131c8:	bl	17e50 <flatcc_builder_end_offset_vector@@Base>
   131cc:	ldr	r1, [sp, #8]
   131d0:	str	r0, [sp, #4]
   131d4:	mov	r0, r1
   131d8:	ldr	r1, [sp, #4]
   131dc:	bl	12d48 <create_monster_bottom_up@@Base+0x7fc>
   131e0:	mov	sp, fp
   131e4:	pop	{fp, pc}
   131e8:	push	{fp, lr}
   131ec:	mov	fp, sp
   131f0:	sub	sp, sp, #24
   131f4:	str	r0, [fp, #-4]
   131f8:	str	r1, [fp, #-8]
   131fc:	ldr	r0, [fp, #-4]
   13200:	ldr	r1, [fp, #-8]
   13204:	add	r2, sp, #8
   13208:	str	r0, [sp, #4]
   1320c:	mov	r0, r2
   13210:	bl	12994 <create_monster_bottom_up@@Base+0x448>
   13214:	ldr	r1, [sp, #8]
   13218:	ldr	r2, [sp, #12]
   1321c:	ldr	r0, [sp, #4]
   13220:	bl	12db4 <create_monster_bottom_up@@Base+0x868>
   13224:	mov	sp, fp
   13228:	pop	{fp, pc}

0001322c <access_monster_buffer@@Base>:
   1322c:	push	{fp, lr}
   13230:	mov	fp, sp
   13234:	sub	sp, sp, #104	; 0x68
   13238:	str	r0, [fp, #-4]
   1323c:	ldr	r0, [fp, #-4]
   13240:	bl	13958 <access_monster_buffer@@Base+0x72c>
   13244:	str	r0, [fp, #-8]
   13248:	ldr	r0, [fp, #-8]
   1324c:	movw	r1, #0
   13250:	cmp	r0, r1
   13254:	bne	13278 <access_monster_buffer@@Base+0x4c>
   13258:	ldr	r0, [pc, #1508]	; 13844 <access_monster_buffer@@Base+0x618>
   1325c:	add	r0, pc, r0
   13260:	ldr	r1, [pc, #1504]	; 13848 <access_monster_buffer@@Base+0x61c>
   13264:	add	r1, pc, r1
   13268:	ldr	r2, [pc, #1500]	; 1384c <access_monster_buffer@@Base+0x620>
   1326c:	add	r3, pc, r2
   13270:	movw	r2, #211	; 0xd3
   13274:	bl	12450 <__assert_fail@plt>
   13278:	b	1327c <access_monster_buffer@@Base+0x50>
   1327c:	ldr	r0, [fp, #-8]
   13280:	bl	139c8 <access_monster_buffer@@Base+0x79c>
   13284:	strh	r0, [fp, #-10]
   13288:	ldr	r0, [fp, #-8]
   1328c:	bl	13abc <access_monster_buffer@@Base+0x890>
   13290:	strh	r0, [fp, #-12]
   13294:	ldr	r0, [fp, #-8]
   13298:	bl	13bb0 <access_monster_buffer@@Base+0x984>
   1329c:	str	r0, [fp, #-16]
   132a0:	ldr	r0, [fp, #-16]
   132a4:	bl	13cb8 <access_monster_buffer@@Base+0xa8c>
   132a8:	str	r0, [fp, #-20]	; 0xffffffec
   132ac:	ldrh	r0, [fp, #-10]
   132b0:	cmp	r0, #300	; 0x12c
   132b4:	beq	132d8 <access_monster_buffer@@Base+0xac>
   132b8:	ldr	r0, [pc, #1424]	; 13850 <access_monster_buffer@@Base+0x624>
   132bc:	add	r0, pc, r0
   132c0:	ldr	r1, [pc, #1420]	; 13854 <access_monster_buffer@@Base+0x628>
   132c4:	add	r1, pc, r1
   132c8:	ldr	r2, [pc, #1416]	; 13858 <access_monster_buffer@@Base+0x62c>
   132cc:	add	r3, pc, r2
   132d0:	movw	r2, #219	; 0xdb
   132d4:	bl	12450 <__assert_fail@plt>
   132d8:	b	132dc <access_monster_buffer@@Base+0xb0>
   132dc:	b	132e0 <access_monster_buffer@@Base+0xb4>
   132e0:	ldrh	r0, [fp, #-12]
   132e4:	cmp	r0, #150	; 0x96
   132e8:	beq	1330c <access_monster_buffer@@Base+0xe0>
   132ec:	ldr	r0, [pc, #1384]	; 1385c <access_monster_buffer@@Base+0x630>
   132f0:	add	r0, pc, r0
   132f4:	ldr	r1, [pc, #1380]	; 13860 <access_monster_buffer@@Base+0x634>
   132f8:	add	r1, pc, r1
   132fc:	ldr	r2, [pc, #1376]	; 13864 <access_monster_buffer@@Base+0x638>
   13300:	add	r3, pc, r2
   13304:	movw	r2, #221	; 0xdd
   13308:	bl	12450 <__assert_fail@plt>
   1330c:	b	13310 <access_monster_buffer@@Base+0xe4>
   13310:	b	13314 <access_monster_buffer@@Base+0xe8>
   13314:	ldr	r0, [fp, #-16]
   13318:	ldr	r1, [pc, #1580]	; 1394c <access_monster_buffer@@Base+0x720>
   1331c:	add	r1, pc, r1
   13320:	bl	1239c <strcmp@plt>
   13324:	movw	r1, #0
   13328:	cmp	r1, r0
   1332c:	beq	13350 <access_monster_buffer@@Base+0x124>
   13330:	ldr	r0, [pc, #1328]	; 13868 <access_monster_buffer@@Base+0x63c>
   13334:	add	r0, pc, r0
   13338:	ldr	r1, [pc, #1324]	; 1386c <access_monster_buffer@@Base+0x640>
   1333c:	add	r1, pc, r1
   13340:	ldr	r2, [pc, #1320]	; 13870 <access_monster_buffer@@Base+0x644>
   13344:	add	r3, pc, r2
   13348:	movw	r2, #222	; 0xde
   1334c:	bl	12450 <__assert_fail@plt>
   13350:	b	13354 <access_monster_buffer@@Base+0x128>
   13354:	b	13358 <access_monster_buffer@@Base+0x12c>
   13358:	ldr	r0, [fp, #-20]	; 0xffffffec
   1335c:	cmp	r0, #3
   13360:	beq	13384 <access_monster_buffer@@Base+0x158>
   13364:	ldr	r0, [pc, #1288]	; 13874 <access_monster_buffer@@Base+0x648>
   13368:	add	r0, pc, r0
   1336c:	ldr	r1, [pc, #1284]	; 13878 <access_monster_buffer@@Base+0x64c>
   13370:	add	r1, pc, r1
   13374:	ldr	r2, [pc, #1280]	; 1387c <access_monster_buffer@@Base+0x650>
   13378:	add	r3, pc, r2
   1337c:	movw	r2, #223	; 0xdf
   13380:	bl	12450 <__assert_fail@plt>
   13384:	b	13388 <access_monster_buffer@@Base+0x15c>
   13388:	ldr	r0, [fp, #-8]
   1338c:	bl	13d08 <access_monster_buffer@@Base+0xadc>
   13390:	str	r0, [fp, #-24]	; 0xffffffe8
   13394:	ldr	r0, [fp, #-8]
   13398:	bl	13dd4 <access_monster_buffer@@Base+0xba8>
   1339c:	str	r0, [fp, #-28]	; 0xffffffe4
   133a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133a4:	cmp	r0, #0
   133a8:	bne	133cc <access_monster_buffer@@Base+0x1a0>
   133ac:	ldr	r0, [pc, #1228]	; 13880 <access_monster_buffer@@Base+0x654>
   133b0:	add	r0, pc, r0
   133b4:	ldr	r1, [pc, #1224]	; 13884 <access_monster_buffer@@Base+0x658>
   133b8:	add	r1, pc, r1
   133bc:	ldr	r2, [pc, #1220]	; 13888 <access_monster_buffer@@Base+0x65c>
   133c0:	add	r3, pc, r2
   133c4:	movw	r2, #227	; 0xe3
   133c8:	bl	12450 <__assert_fail@plt>
   133cc:	b	133d0 <access_monster_buffer@@Base+0x1a4>
   133d0:	b	133d4 <access_monster_buffer@@Base+0x1a8>
   133d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   133d8:	cmp	r0, #0
   133dc:	beq	13400 <access_monster_buffer@@Base+0x1d4>
   133e0:	ldr	r0, [pc, #1368]	; 13940 <access_monster_buffer@@Base+0x714>
   133e4:	add	r0, pc, r0
   133e8:	ldr	r1, [pc, #1364]	; 13944 <access_monster_buffer@@Base+0x718>
   133ec:	add	r1, pc, r1
   133f0:	ldr	r2, [pc, #1360]	; 13948 <access_monster_buffer@@Base+0x71c>
   133f4:	add	r3, pc, r2
   133f8:	movw	r2, #228	; 0xe4
   133fc:	bl	12450 <__assert_fail@plt>
   13400:	b	13404 <access_monster_buffer@@Base+0x1d8>
   13404:	ldr	r0, [fp, #-8]
   13408:	bl	13ea0 <access_monster_buffer@@Base+0xc74>
   1340c:	str	r0, [fp, #-32]	; 0xffffffe0
   13410:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13414:	movw	r1, #0
   13418:	cmp	r0, r1
   1341c:	bne	13440 <access_monster_buffer@@Base+0x214>
   13420:	ldr	r0, [pc, #1124]	; 1388c <access_monster_buffer@@Base+0x660>
   13424:	add	r0, pc, r0
   13428:	ldr	r1, [pc, #1120]	; 13890 <access_monster_buffer@@Base+0x664>
   1342c:	add	r1, pc, r1
   13430:	ldr	r2, [pc, #1116]	; 13894 <access_monster_buffer@@Base+0x668>
   13434:	add	r3, pc, r2
   13438:	movw	r2, #232	; 0xe8
   1343c:	bl	12450 <__assert_fail@plt>
   13440:	b	13444 <access_monster_buffer@@Base+0x218>
   13444:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13448:	bl	13f84 <access_monster_buffer@@Base+0xd58>
   1344c:	vstr	s0, [fp, #-36]	; 0xffffffdc
   13450:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13454:	bl	13fd0 <access_monster_buffer@@Base+0xda4>
   13458:	vstr	s0, [fp, #-40]	; 0xffffffd8
   1345c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13460:	bl	14020 <access_monster_buffer@@Base+0xdf4>
   13464:	vstr	s0, [fp, #-44]	; 0xffffffd4
   13468:	vldr	s0, [fp, #-36]	; 0xffffffdc
   1346c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   13470:	vcmp.f32	s0, s2
   13474:	vmrs	APSR_nzcv, fpscr
   13478:	beq	1349c <access_monster_buffer@@Base+0x270>
   1347c:	ldr	r0, [pc, #1044]	; 13898 <access_monster_buffer@@Base+0x66c>
   13480:	add	r0, pc, r0
   13484:	ldr	r1, [pc, #1040]	; 1389c <access_monster_buffer@@Base+0x670>
   13488:	add	r1, pc, r1
   1348c:	ldr	r2, [pc, #1036]	; 138a0 <access_monster_buffer@@Base+0x674>
   13490:	add	r3, pc, r2
   13494:	movw	r2, #240	; 0xf0
   13498:	bl	12450 <__assert_fail@plt>
   1349c:	b	134a0 <access_monster_buffer@@Base+0x274>
   134a0:	b	134a4 <access_monster_buffer@@Base+0x278>
   134a4:	vldr	s0, [fp, #-40]	; 0xffffffd8
   134a8:	vmov.f32	s2, #0	; 0x40000000  2.0
   134ac:	vcmp.f32	s0, s2
   134b0:	vmrs	APSR_nzcv, fpscr
   134b4:	beq	134d8 <access_monster_buffer@@Base+0x2ac>
   134b8:	ldr	r0, [pc, #996]	; 138a4 <access_monster_buffer@@Base+0x678>
   134bc:	add	r0, pc, r0
   134c0:	ldr	r1, [pc, #992]	; 138a8 <access_monster_buffer@@Base+0x67c>
   134c4:	add	r1, pc, r1
   134c8:	ldr	r2, [pc, #988]	; 138ac <access_monster_buffer@@Base+0x680>
   134cc:	add	r3, pc, r2
   134d0:	movw	r2, #241	; 0xf1
   134d4:	bl	12450 <__assert_fail@plt>
   134d8:	b	134dc <access_monster_buffer@@Base+0x2b0>
   134dc:	b	134e0 <access_monster_buffer@@Base+0x2b4>
   134e0:	vldr	s0, [fp, #-44]	; 0xffffffd4
   134e4:	vmov.f32	s2, #8	; 0x40400000  3.0
   134e8:	vcmp.f32	s0, s2
   134ec:	vmrs	APSR_nzcv, fpscr
   134f0:	beq	13514 <access_monster_buffer@@Base+0x2e8>
   134f4:	ldr	r0, [pc, #948]	; 138b0 <access_monster_buffer@@Base+0x684>
   134f8:	add	r0, pc, r0
   134fc:	ldr	r1, [pc, #944]	; 138b4 <access_monster_buffer@@Base+0x688>
   13500:	add	r1, pc, r1
   13504:	ldr	r2, [pc, #940]	; 138b8 <access_monster_buffer@@Base+0x68c>
   13508:	add	r3, pc, r2
   1350c:	movw	r2, #242	; 0xf2
   13510:	bl	12450 <__assert_fail@plt>
   13514:	b	13518 <access_monster_buffer@@Base+0x2ec>
   13518:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1351c:	add	r0, sp, #48	; 0x30
   13520:	bl	14070 <access_monster_buffer@@Base+0xe44>
   13524:	str	r0, [sp, #4]
   13528:	vldr	s0, [sp, #48]	; 0x30
   1352c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   13530:	vcmp.f32	s0, s2
   13534:	vmrs	APSR_nzcv, fpscr
   13538:	beq	1355c <access_monster_buffer@@Base+0x330>
   1353c:	ldr	r0, [pc, #888]	; 138bc <access_monster_buffer@@Base+0x690>
   13540:	add	r0, pc, r0
   13544:	ldr	r1, [pc, #884]	; 138c0 <access_monster_buffer@@Base+0x694>
   13548:	add	r1, pc, r1
   1354c:	ldr	r2, [pc, #880]	; 138c4 <access_monster_buffer@@Base+0x698>
   13550:	add	r3, pc, r2
   13554:	movw	r2, #250	; 0xfa
   13558:	bl	12450 <__assert_fail@plt>
   1355c:	b	13560 <access_monster_buffer@@Base+0x334>
   13560:	b	13564 <access_monster_buffer@@Base+0x338>
   13564:	vldr	s0, [sp, #52]	; 0x34
   13568:	vmov.f32	s2, #0	; 0x40000000  2.0
   1356c:	vcmp.f32	s0, s2
   13570:	vmrs	APSR_nzcv, fpscr
   13574:	beq	13598 <access_monster_buffer@@Base+0x36c>
   13578:	ldr	r0, [pc, #840]	; 138c8 <access_monster_buffer@@Base+0x69c>
   1357c:	add	r0, pc, r0
   13580:	ldr	r1, [pc, #836]	; 138cc <access_monster_buffer@@Base+0x6a0>
   13584:	add	r1, pc, r1
   13588:	ldr	r2, [pc, #832]	; 138d0 <access_monster_buffer@@Base+0x6a4>
   1358c:	add	r3, pc, r2
   13590:	movw	r2, #251	; 0xfb
   13594:	bl	12450 <__assert_fail@plt>
   13598:	b	1359c <access_monster_buffer@@Base+0x370>
   1359c:	b	135a0 <access_monster_buffer@@Base+0x374>
   135a0:	vldr	s0, [sp, #56]	; 0x38
   135a4:	vmov.f32	s2, #8	; 0x40400000  3.0
   135a8:	vcmp.f32	s0, s2
   135ac:	vmrs	APSR_nzcv, fpscr
   135b0:	beq	135d4 <access_monster_buffer@@Base+0x3a8>
   135b4:	ldr	r0, [pc, #792]	; 138d4 <access_monster_buffer@@Base+0x6a8>
   135b8:	add	r0, pc, r0
   135bc:	ldr	r1, [pc, #788]	; 138d8 <access_monster_buffer@@Base+0x6ac>
   135c0:	add	r1, pc, r1
   135c4:	ldr	r2, [pc, #784]	; 138dc <access_monster_buffer@@Base+0x6b0>
   135c8:	add	r3, pc, r2
   135cc:	movw	r2, #252	; 0xfc
   135d0:	bl	12450 <__assert_fail@plt>
   135d4:	b	135d8 <access_monster_buffer@@Base+0x3ac>
   135d8:	ldr	r0, [fp, #-8]
   135dc:	bl	140e4 <access_monster_buffer@@Base+0xeb8>
   135e0:	str	r0, [sp, #44]	; 0x2c
   135e4:	ldr	r0, [sp, #44]	; 0x2c
   135e8:	bl	141ec <access_monster_buffer@@Base+0xfc0>
   135ec:	str	r0, [sp, #40]	; 0x28
   135f0:	ldr	r0, [sp, #44]	; 0x2c
   135f4:	movw	r1, #0
   135f8:	cmp	r0, r1
   135fc:	bne	13620 <access_monster_buffer@@Base+0x3f4>
   13600:	ldr	r0, [pc, #728]	; 138e0 <access_monster_buffer@@Base+0x6b4>
   13604:	add	r0, pc, r0
   13608:	ldr	r1, [pc, #724]	; 138e4 <access_monster_buffer@@Base+0x6b8>
   1360c:	add	r1, pc, r1
   13610:	ldr	r2, [pc, #720]	; 138e8 <access_monster_buffer@@Base+0x6bc>
   13614:	add	r3, pc, r2
   13618:	movw	r2, #261	; 0x105
   1361c:	bl	12450 <__assert_fail@plt>
   13620:	b	13624 <access_monster_buffer@@Base+0x3f8>
   13624:	b	13628 <access_monster_buffer@@Base+0x3fc>
   13628:	ldr	r0, [sp, #40]	; 0x28
   1362c:	cmp	r0, #10
   13630:	beq	13654 <access_monster_buffer@@Base+0x428>
   13634:	ldr	r0, [pc, #688]	; 138ec <access_monster_buffer@@Base+0x6c0>
   13638:	add	r0, pc, r0
   1363c:	ldr	r1, [pc, #684]	; 138f0 <access_monster_buffer@@Base+0x6c4>
   13640:	add	r1, pc, r1
   13644:	ldr	r2, [pc, #680]	; 138f4 <access_monster_buffer@@Base+0x6c8>
   13648:	add	r3, pc, r2
   1364c:	movw	r2, #263	; 0x107
   13650:	bl	12450 <__assert_fail@plt>
   13654:	b	13658 <access_monster_buffer@@Base+0x42c>
   13658:	ldr	r0, [sp, #44]	; 0x2c
   1365c:	movw	r1, #2
   13660:	bl	1420c <access_monster_buffer@@Base+0xfe0>
   13664:	strb	r0, [sp, #39]	; 0x27
   13668:	ldrb	r0, [sp, #39]	; 0x27
   1366c:	cmp	r0, #2
   13670:	beq	13694 <access_monster_buffer@@Base+0x468>
   13674:	ldr	r0, [pc, #636]	; 138f8 <access_monster_buffer@@Base+0x6cc>
   13678:	add	r0, pc, r0
   1367c:	ldr	r1, [pc, #632]	; 138fc <access_monster_buffer@@Base+0x6d0>
   13680:	add	r1, pc, r1
   13684:	ldr	r2, [pc, #628]	; 13900 <access_monster_buffer@@Base+0x6d4>
   13688:	add	r3, pc, r2
   1368c:	movw	r2, #267	; 0x10b
   13690:	bl	12450 <__assert_fail@plt>
   13694:	b	13698 <access_monster_buffer@@Base+0x46c>
   13698:	ldr	r0, [fp, #-8]
   1369c:	bl	14284 <access_monster_buffer@@Base+0x1058>
   136a0:	str	r0, [sp, #32]
   136a4:	ldr	r0, [sp, #32]
   136a8:	bl	1438c <access_monster_buffer@@Base+0x1160>
   136ac:	str	r0, [sp, #28]
   136b0:	ldr	r0, [sp, #28]
   136b4:	cmp	r0, #2
   136b8:	beq	136dc <access_monster_buffer@@Base+0x4b0>
   136bc:	ldr	r0, [pc, #576]	; 13904 <access_monster_buffer@@Base+0x6d8>
   136c0:	add	r0, pc, r0
   136c4:	ldr	r1, [pc, #572]	; 13908 <access_monster_buffer@@Base+0x6dc>
   136c8:	add	r1, pc, r1
   136cc:	ldr	r2, [pc, #568]	; 1390c <access_monster_buffer@@Base+0x6e0>
   136d0:	add	r3, pc, r2
   136d4:	movw	r2, #271	; 0x10f
   136d8:	bl	12450 <__assert_fail@plt>
   136dc:	b	136e0 <access_monster_buffer@@Base+0x4b4>
   136e0:	ldr	r0, [sp, #32]
   136e4:	movw	r1, #1
   136e8:	bl	144e4 <access_monster_buffer@@Base+0x12b8>
   136ec:	bl	143dc <access_monster_buffer@@Base+0x11b0>
   136f0:	str	r0, [sp, #24]
   136f4:	ldr	r0, [sp, #32]
   136f8:	movw	r1, #1
   136fc:	bl	144e4 <access_monster_buffer@@Base+0x12b8>
   13700:	bl	14574 <access_monster_buffer@@Base+0x1348>
   13704:	strh	r0, [sp, #22]
   13708:	ldr	r0, [sp, #24]
   1370c:	movw	r1, #0
   13710:	cmp	r0, r1
   13714:	beq	13730 <access_monster_buffer@@Base+0x504>
   13718:	ldr	r0, [sp, #24]
   1371c:	ldr	r1, [pc, #556]	; 13950 <access_monster_buffer@@Base+0x724>
   13720:	add	r1, pc, r1
   13724:	bl	1239c <strcmp@plt>
   13728:	cmp	r0, #0
   1372c:	beq	13750 <access_monster_buffer@@Base+0x524>
   13730:	ldr	r0, [pc, #472]	; 13910 <access_monster_buffer@@Base+0x6e4>
   13734:	add	r0, pc, r0
   13738:	ldr	r1, [pc, #468]	; 13914 <access_monster_buffer@@Base+0x6e8>
   1373c:	add	r1, pc, r1
   13740:	ldr	r2, [pc, #464]	; 13918 <access_monster_buffer@@Base+0x6ec>
   13744:	add	r3, pc, r2
   13748:	movw	r2, #275	; 0x113
   1374c:	bl	12450 <__assert_fail@plt>
   13750:	b	13754 <access_monster_buffer@@Base+0x528>
   13754:	b	13758 <access_monster_buffer@@Base+0x52c>
   13758:	ldrh	r0, [sp, #22]
   1375c:	cmp	r0, #5
   13760:	beq	13784 <access_monster_buffer@@Base+0x558>
   13764:	ldr	r0, [pc, #432]	; 1391c <access_monster_buffer@@Base+0x6f0>
   13768:	add	r0, pc, r0
   1376c:	ldr	r1, [pc, #428]	; 13920 <access_monster_buffer@@Base+0x6f4>
   13770:	add	r1, pc, r1
   13774:	ldr	r2, [pc, #424]	; 13924 <access_monster_buffer@@Base+0x6f8>
   13778:	add	r3, pc, r2
   1377c:	movw	r2, #276	; 0x114
   13780:	bl	12450 <__assert_fail@plt>
   13784:	b	13788 <access_monster_buffer@@Base+0x55c>
   13788:	ldr	r0, [fp, #-8]
   1378c:	bl	14668 <access_monster_buffer@@Base+0x143c>
   13790:	and	r0, r0, #255	; 0xff
   13794:	cmp	r0, #1
   13798:	bne	13838 <access_monster_buffer@@Base+0x60c>
   1379c:	ldr	r0, [fp, #-8]
   137a0:	bl	1475c <access_monster_buffer@@Base+0x1530>
   137a4:	str	r0, [sp, #16]
   137a8:	ldr	r0, [sp, #16]
   137ac:	bl	143dc <access_monster_buffer@@Base+0x11b0>
   137b0:	str	r0, [sp, #12]
   137b4:	ldr	r0, [sp, #16]
   137b8:	bl	14574 <access_monster_buffer@@Base+0x1348>
   137bc:	strh	r0, [sp, #10]
   137c0:	ldr	r0, [sp, #12]
   137c4:	ldr	r1, [pc, #392]	; 13954 <access_monster_buffer@@Base+0x728>
   137c8:	add	r1, pc, r1
   137cc:	bl	1239c <strcmp@plt>
   137d0:	movw	r1, #0
   137d4:	cmp	r1, r0
   137d8:	beq	137fc <access_monster_buffer@@Base+0x5d0>
   137dc:	ldr	r0, [pc, #324]	; 13928 <access_monster_buffer@@Base+0x6fc>
   137e0:	add	r0, pc, r0
   137e4:	ldr	r1, [pc, #320]	; 1392c <access_monster_buffer@@Base+0x700>
   137e8:	add	r1, pc, r1
   137ec:	ldr	r2, [pc, #316]	; 13930 <access_monster_buffer@@Base+0x704>
   137f0:	add	r3, pc, r2
   137f4:	movw	r2, #286	; 0x11e
   137f8:	bl	12450 <__assert_fail@plt>
   137fc:	b	13800 <access_monster_buffer@@Base+0x5d4>
   13800:	b	13804 <access_monster_buffer@@Base+0x5d8>
   13804:	ldrh	r0, [sp, #10]
   13808:	cmp	r0, #5
   1380c:	beq	13830 <access_monster_buffer@@Base+0x604>
   13810:	ldr	r0, [pc, #284]	; 13934 <access_monster_buffer@@Base+0x708>
   13814:	add	r0, pc, r0
   13818:	ldr	r1, [pc, #280]	; 13938 <access_monster_buffer@@Base+0x70c>
   1381c:	add	r1, pc, r1
   13820:	ldr	r2, [pc, #276]	; 1393c <access_monster_buffer@@Base+0x710>
   13824:	add	r3, pc, r2
   13828:	movw	r2, #287	; 0x11f
   1382c:	bl	12450 <__assert_fail@plt>
   13830:	b	13834 <access_monster_buffer@@Base+0x608>
   13834:	b	13838 <access_monster_buffer@@Base+0x60c>
   13838:	movw	r0, #0
   1383c:	mov	sp, fp
   13840:	pop	{fp, pc}
   13844:	andeq	sl, r0, r9, ror #21
   13848:	strdeq	r8, [r0], -lr
   1384c:	andeq	r8, r0, r7, asr lr
   13850:	andeq	sl, r0, r9, lsl #21
   13854:	muleq	r0, lr, sp
   13858:	strdeq	r8, [r0], -r7
   1385c:	andeq	sl, r0, r5, asr sl
   13860:	andeq	r8, r0, sl, ror #26
   13864:	andeq	r8, r0, r3, asr #27
   13868:	andeq	sl, r0, r1, lsl sl
   1386c:	andeq	r8, r0, r6, lsr #26
   13870:	andeq	r8, r0, pc, ror sp
   13874:	ldrdeq	sl, [r0], -sp
   13878:	strdeq	r8, [r0], -r2
   1387c:	andeq	r8, r0, fp, asr #26
   13880:	muleq	r0, r5, r9
   13884:	andeq	r8, r0, sl, lsr #25
   13888:	andeq	r8, r0, r3, lsl #26
   1388c:	andeq	sl, r0, r1, lsr #18
   13890:	andeq	r8, r0, r6, lsr ip
   13894:	andeq	r8, r0, pc, lsl #25
   13898:	andeq	sl, r0, r5, asr #17
   1389c:	ldrdeq	r8, [r0], -sl
   138a0:	andeq	r8, r0, r3, lsr ip
   138a4:	andeq	sl, r0, r9, lsl #17
   138a8:	muleq	r0, lr, fp
   138ac:	strdeq	r8, [r0], -r7
   138b0:	andeq	sl, r0, sp, asr #16
   138b4:	andeq	r8, r0, r2, ror #22
   138b8:			; <UNDEFINED> instruction: 0x00008bbb
   138bc:	andeq	sl, r0, r5, lsl #16
   138c0:	andeq	r8, r0, sl, lsl fp
   138c4:	andeq	r8, r0, r3, ror fp
   138c8:	andeq	sl, r0, r9, asr #15
   138cc:	ldrdeq	r8, [r0], -lr
   138d0:	andeq	r8, r0, r7, lsr fp
   138d4:	andeq	sl, r0, sp, lsl #15
   138d8:	andeq	r8, r0, r2, lsr #21
   138dc:	strdeq	r8, [r0], -fp
   138e0:	andeq	sl, r0, r1, asr #14
   138e4:	andeq	r8, r0, r6, asr sl
   138e8:	andeq	r8, r0, pc, lsr #21
   138ec:	andeq	sl, r0, sp, lsl #14
   138f0:	andeq	r8, r0, r2, lsr #20
   138f4:	andeq	r8, r0, fp, ror sl
   138f8:	andeq	sl, r0, sp, asr #13
   138fc:	andeq	r8, r0, r2, ror #19
   13900:	andeq	r8, r0, fp, lsr sl
   13904:	andeq	sl, r0, r5, lsl #13
   13908:	muleq	r0, sl, r9
   1390c:	strdeq	r8, [r0], -r3
   13910:	andeq	sl, r0, r1, lsl r6
   13914:	andeq	r8, r0, r6, lsr #18
   13918:	andeq	r8, r0, pc, ror r9
   1391c:	ldrdeq	sl, [r0], -sp
   13920:	strdeq	r8, [r0], -r2
   13924:	andeq	r8, r0, fp, asr #18
   13928:	andeq	sl, r0, r5, ror #10
   1392c:	andeq	r8, r0, sl, ror r8
   13930:	ldrdeq	r8, [r0], -r3
   13934:	andeq	sl, r0, r1, lsr r5
   13938:	andeq	r8, r0, r6, asr #16
   1393c:	muleq	r0, pc, r8	; <UNPREDICTABLE>
   13940:	andeq	sl, r0, r1, ror #18
   13944:	andeq	r8, r0, r6, ror ip
   13948:	andeq	r8, r0, pc, asr #25
   1394c:	andeq	r8, r0, r2, asr #26
   13950:	andeq	r8, r0, sl, lsr r9
   13954:	muleq	r0, r2, r8
   13958:	push	{fp, lr}
   1395c:	mov	fp, sp
   13960:	sub	sp, sp, #16
   13964:	str	r0, [fp, #-4]
   13968:	movw	r0, #0
   1396c:	str	r0, [sp, #8]
   13970:	ldr	r1, [fp, #-4]
   13974:	cmp	r1, r0
   13978:	beq	13990 <access_monster_buffer@@Base+0x764>
   1397c:	ldr	r0, [fp, #-4]
   13980:	ldr	r1, [sp, #8]
   13984:	bl	15218 <main@@Base+0x9b8>
   13988:	cmp	r0, #0
   1398c:	bne	1399c <access_monster_buffer@@Base+0x770>
   13990:	movw	r0, #0
   13994:	str	r0, [sp, #4]
   13998:	b	139bc <access_monster_buffer@@Base+0x790>
   1399c:	ldr	r0, [fp, #-4]
   139a0:	ldr	r1, [fp, #-4]
   139a4:	str	r0, [sp]
   139a8:	mov	r0, r1
   139ac:	bl	152c4 <main@@Base+0xa64>
   139b0:	ldr	r1, [sp]
   139b4:	add	r0, r1, r0
   139b8:	str	r0, [sp, #4]
   139bc:	ldr	r0, [sp, #4]
   139c0:	mov	sp, fp
   139c4:	pop	{fp, pc}
   139c8:	push	{fp, lr}
   139cc:	mov	fp, sp
   139d0:	sub	sp, sp, #24
   139d4:	str	r0, [fp, #-4]
   139d8:	movw	r0, #0
   139dc:	strh	r0, [fp, #-6]
   139e0:	ldr	r0, [fp, #-4]
   139e4:	movw	r1, #0
   139e8:	cmp	r0, r1
   139ec:	beq	139f8 <access_monster_buffer@@Base+0x7cc>
   139f0:	b	139f4 <access_monster_buffer@@Base+0x7c8>
   139f4:	b	13a18 <access_monster_buffer@@Base+0x7ec>
   139f8:	ldr	r0, [pc, #176]	; 13ab0 <access_monster_buffer@@Base+0x884>
   139fc:	add	r0, pc, r0
   13a00:	ldr	r1, [pc, #172]	; 13ab4 <access_monster_buffer@@Base+0x888>
   13a04:	add	r1, pc, r1
   13a08:	ldr	r2, [pc, #168]	; 13ab8 <access_monster_buffer@@Base+0x88c>
   13a0c:	add	r3, pc, r2
   13a10:	movw	r2, #131	; 0x83
   13a14:	bl	12450 <__assert_fail@plt>
   13a18:	mov	r0, #2
   13a1c:	strh	r0, [fp, #-8]
   13a20:	ldr	r0, [fp, #-4]
   13a24:	str	r0, [sp, #8]
   13a28:	bl	15348 <main@@Base+0xae8>
   13a2c:	ldr	lr, [sp, #8]
   13a30:	sub	r0, lr, r0
   13a34:	str	r0, [sp, #12]
   13a38:	ldr	r0, [sp, #12]
   13a3c:	bl	1536c <main@@Base+0xb0c>
   13a40:	ldrh	lr, [fp, #-8]
   13a44:	add	lr, lr, #3
   13a48:	lsl	lr, lr, #1
   13a4c:	cmp	r0, lr
   13a50:	bcc	13a6c <access_monster_buffer@@Base+0x840>
   13a54:	ldr	r0, [sp, #12]
   13a58:	ldrh	r1, [fp, #-8]
   13a5c:	add	r0, r0, r1, lsl #1
   13a60:	add	r0, r0, #4
   13a64:	bl	1536c <main@@Base+0xb0c>
   13a68:	strh	r0, [fp, #-6]
   13a6c:	ldrh	r0, [fp, #-6]
   13a70:	cmp	r0, #0
   13a74:	beq	13a94 <access_monster_buffer@@Base+0x868>
   13a78:	ldr	r0, [fp, #-4]
   13a7c:	ldrh	r1, [fp, #-6]
   13a80:	add	r0, r0, r1
   13a84:	bl	15394 <main@@Base+0xb34>
   13a88:	sxth	r0, r0
   13a8c:	str	r0, [sp, #4]
   13a90:	b	13aa0 <access_monster_buffer@@Base+0x874>
   13a94:	movw	r0, #100	; 0x64
   13a98:	str	r0, [sp, #4]
   13a9c:	b	13aa0 <access_monster_buffer@@Base+0x874>
   13aa0:	ldr	r0, [sp, #4]
   13aa4:	sxth	r0, r0
   13aa8:	mov	sp, fp
   13aac:	pop	{fp, pc}
   13ab0:	andeq	r8, r0, r4, lsr #19
   13ab4:	andeq	r8, r0, r2, asr #19
   13ab8:	andeq	r8, r0, ip, lsr #20
   13abc:	push	{fp, lr}
   13ac0:	mov	fp, sp
   13ac4:	sub	sp, sp, #24
   13ac8:	str	r0, [fp, #-4]
   13acc:	movw	r0, #0
   13ad0:	strh	r0, [fp, #-6]
   13ad4:	ldr	r0, [fp, #-4]
   13ad8:	movw	r1, #0
   13adc:	cmp	r0, r1
   13ae0:	beq	13aec <access_monster_buffer@@Base+0x8c0>
   13ae4:	b	13ae8 <access_monster_buffer@@Base+0x8bc>
   13ae8:	b	13b0c <access_monster_buffer@@Base+0x8e0>
   13aec:	ldr	r0, [pc, #176]	; 13ba4 <access_monster_buffer@@Base+0x978>
   13af0:	add	r0, pc, r0
   13af4:	ldr	r1, [pc, #172]	; 13ba8 <access_monster_buffer@@Base+0x97c>
   13af8:	add	r1, pc, r1
   13afc:	ldr	r2, [pc, #168]	; 13bac <access_monster_buffer@@Base+0x980>
   13b00:	add	r3, pc, r2
   13b04:	movw	r2, #130	; 0x82
   13b08:	bl	12450 <__assert_fail@plt>
   13b0c:	mov	r0, #1
   13b10:	strh	r0, [fp, #-8]
   13b14:	ldr	r0, [fp, #-4]
   13b18:	str	r0, [sp, #8]
   13b1c:	bl	15348 <main@@Base+0xae8>
   13b20:	ldr	lr, [sp, #8]
   13b24:	sub	r0, lr, r0
   13b28:	str	r0, [sp, #12]
   13b2c:	ldr	r0, [sp, #12]
   13b30:	bl	1536c <main@@Base+0xb0c>
   13b34:	ldrh	lr, [fp, #-8]
   13b38:	add	lr, lr, #3
   13b3c:	lsl	lr, lr, #1
   13b40:	cmp	r0, lr
   13b44:	bcc	13b60 <access_monster_buffer@@Base+0x934>
   13b48:	ldr	r0, [sp, #12]
   13b4c:	ldrh	r1, [fp, #-8]
   13b50:	add	r0, r0, r1, lsl #1
   13b54:	add	r0, r0, #4
   13b58:	bl	1536c <main@@Base+0xb0c>
   13b5c:	strh	r0, [fp, #-6]
   13b60:	ldrh	r0, [fp, #-6]
   13b64:	cmp	r0, #0
   13b68:	beq	13b88 <access_monster_buffer@@Base+0x95c>
   13b6c:	ldr	r0, [fp, #-4]
   13b70:	ldrh	r1, [fp, #-6]
   13b74:	add	r0, r0, r1
   13b78:	bl	15394 <main@@Base+0xb34>
   13b7c:	sxth	r0, r0
   13b80:	str	r0, [sp, #4]
   13b84:	b	13b94 <access_monster_buffer@@Base+0x968>
   13b88:	movw	r0, #150	; 0x96
   13b8c:	str	r0, [sp, #4]
   13b90:	b	13b94 <access_monster_buffer@@Base+0x968>
   13b94:	ldr	r0, [sp, #4]
   13b98:	sxth	r0, r0
   13b9c:	mov	sp, fp
   13ba0:	pop	{fp, pc}
   13ba4:			; <UNDEFINED> instruction: 0x000088b0
   13ba8:	andeq	r8, r0, lr, asr #17
   13bac:	andeq	r8, r0, r8, ror r9
   13bb0:	push	{fp, lr}
   13bb4:	mov	fp, sp
   13bb8:	sub	sp, sp, #32
   13bbc:	str	r0, [fp, #-8]
   13bc0:	movw	r0, #0
   13bc4:	strh	r0, [fp, #-14]
   13bc8:	ldr	r0, [fp, #-8]
   13bcc:	movw	r1, #0
   13bd0:	cmp	r0, r1
   13bd4:	beq	13be0 <access_monster_buffer@@Base+0x9b4>
   13bd8:	b	13bdc <access_monster_buffer@@Base+0x9b0>
   13bdc:	b	13c00 <access_monster_buffer@@Base+0x9d4>
   13be0:	ldr	r0, [pc, #196]	; 13cac <access_monster_buffer@@Base+0xa80>
   13be4:	add	r0, pc, r0
   13be8:	ldr	r1, [pc, #192]	; 13cb0 <access_monster_buffer@@Base+0xa84>
   13bec:	add	r1, pc, r1
   13bf0:	ldr	r2, [pc, #188]	; 13cb4 <access_monster_buffer@@Base+0xa88>
   13bf4:	add	r3, pc, r2
   13bf8:	movw	r2, #132	; 0x84
   13bfc:	bl	12450 <__assert_fail@plt>
   13c00:	mov	r0, #3
   13c04:	strh	r0, [sp, #16]
   13c08:	ldr	r0, [fp, #-8]
   13c0c:	str	r0, [sp, #8]
   13c10:	bl	15348 <main@@Base+0xae8>
   13c14:	ldr	lr, [sp, #8]
   13c18:	sub	r0, lr, r0
   13c1c:	str	r0, [sp, #12]
   13c20:	ldr	r0, [sp, #12]
   13c24:	bl	1536c <main@@Base+0xb0c>
   13c28:	ldrh	lr, [sp, #16]
   13c2c:	add	lr, lr, #3
   13c30:	lsl	lr, lr, #1
   13c34:	cmp	r0, lr
   13c38:	bcc	13c54 <access_monster_buffer@@Base+0xa28>
   13c3c:	ldr	r0, [sp, #12]
   13c40:	ldrh	r1, [sp, #16]
   13c44:	add	r0, r0, r1, lsl #1
   13c48:	add	r0, r0, #4
   13c4c:	bl	1536c <main@@Base+0xb0c>
   13c50:	strh	r0, [fp, #-14]
   13c54:	ldrsh	r0, [fp, #-14]
   13c58:	cmp	r0, #0
   13c5c:	beq	13c98 <access_monster_buffer@@Base+0xa6c>
   13c60:	ldr	r0, [fp, #-8]
   13c64:	ldrh	r1, [fp, #-14]
   13c68:	add	r0, r0, r1
   13c6c:	str	r0, [fp, #-12]
   13c70:	ldr	r0, [fp, #-12]
   13c74:	add	r0, r0, #4
   13c78:	ldr	r1, [fp, #-12]
   13c7c:	str	r0, [sp, #4]
   13c80:	mov	r0, r1
   13c84:	bl	152c4 <main@@Base+0xa64>
   13c88:	ldr	r1, [sp, #4]
   13c8c:	add	r0, r1, r0
   13c90:	str	r0, [fp, #-4]
   13c94:	b	13ca0 <access_monster_buffer@@Base+0xa74>
   13c98:	movw	r0, #0
   13c9c:	str	r0, [fp, #-4]
   13ca0:	ldr	r0, [fp, #-4]
   13ca4:	mov	sp, fp
   13ca8:	pop	{fp, pc}
   13cac:			; <UNDEFINED> instruction: 0x000087bc
   13cb0:	ldrdeq	r8, [r0], -sl
   13cb4:	andeq	r8, r0, r6, asr #17
   13cb8:	push	{fp, lr}
   13cbc:	mov	fp, sp
   13cc0:	sub	sp, sp, #8
   13cc4:	str	r0, [sp, #4]
   13cc8:	ldr	r0, [sp, #4]
   13ccc:	movw	r1, #0
   13cd0:	cmp	r0, r1
   13cd4:	beq	13cf0 <access_monster_buffer@@Base+0xac4>
   13cd8:	ldr	r0, [sp, #4]
   13cdc:	mvn	r1, #3
   13ce0:	add	r0, r0, r1
   13ce4:	bl	152c4 <main@@Base+0xa64>
   13ce8:	str	r0, [sp]
   13cec:	b	13cfc <access_monster_buffer@@Base+0xad0>
   13cf0:	movw	r0, #0
   13cf4:	str	r0, [sp]
   13cf8:	b	13cfc <access_monster_buffer@@Base+0xad0>
   13cfc:	ldr	r0, [sp]
   13d00:	mov	sp, fp
   13d04:	pop	{fp, pc}
   13d08:	push	{fp, lr}
   13d0c:	mov	fp, sp
   13d10:	sub	sp, sp, #16
   13d14:	str	r0, [fp, #-4]
   13d18:	movw	r0, #0
   13d1c:	strh	r0, [fp, #-6]
   13d20:	ldr	r0, [fp, #-4]
   13d24:	movw	r1, #0
   13d28:	cmp	r0, r1
   13d2c:	beq	13d38 <access_monster_buffer@@Base+0xb0c>
   13d30:	b	13d34 <access_monster_buffer@@Base+0xb08>
   13d34:	b	13d58 <access_monster_buffer@@Base+0xb2c>
   13d38:	ldr	r0, [pc, #136]	; 13dc8 <access_monster_buffer@@Base+0xb9c>
   13d3c:	add	r0, pc, r0
   13d40:	ldr	r1, [pc, #132]	; 13dcc <access_monster_buffer@@Base+0xba0>
   13d44:	add	r1, pc, r1
   13d48:	ldr	r2, [pc, #128]	; 13dd0 <access_monster_buffer@@Base+0xba4>
   13d4c:	add	r3, pc, r2
   13d50:	movw	r2, #131	; 0x83
   13d54:	bl	12450 <__assert_fail@plt>
   13d58:	mov	r0, #2
   13d5c:	strh	r0, [sp, #8]
   13d60:	ldr	r0, [fp, #-4]
   13d64:	str	r0, [sp]
   13d68:	bl	15348 <main@@Base+0xae8>
   13d6c:	ldr	lr, [sp]
   13d70:	sub	r0, lr, r0
   13d74:	str	r0, [sp, #4]
   13d78:	ldr	r0, [sp, #4]
   13d7c:	bl	1536c <main@@Base+0xb0c>
   13d80:	ldrh	lr, [sp, #8]
   13d84:	add	lr, lr, #3
   13d88:	lsl	lr, lr, #1
   13d8c:	cmp	r0, lr
   13d90:	bcc	13dac <access_monster_buffer@@Base+0xb80>
   13d94:	ldr	r0, [sp, #4]
   13d98:	ldrh	r1, [sp, #8]
   13d9c:	add	r0, r0, r1, lsl #1
   13da0:	add	r0, r0, #4
   13da4:	bl	1536c <main@@Base+0xb0c>
   13da8:	strh	r0, [fp, #-6]
   13dac:	ldrh	r0, [fp, #-6]
   13db0:	cmp	r0, #0
   13db4:	movw	r0, #0
   13db8:	movne	r0, #1
   13dbc:	and	r0, r0, #1
   13dc0:	mov	sp, fp
   13dc4:	pop	{fp, pc}
   13dc8:	andeq	r8, r0, r4, ror #12
   13dcc:	andeq	r8, r0, r2, lsl #13
   13dd0:			; <UNDEFINED> instruction: 0x000087bd
   13dd4:	push	{fp, lr}
   13dd8:	mov	fp, sp
   13ddc:	sub	sp, sp, #16
   13de0:	str	r0, [fp, #-4]
   13de4:	movw	r0, #0
   13de8:	strh	r0, [fp, #-6]
   13dec:	ldr	r0, [fp, #-4]
   13df0:	movw	r1, #0
   13df4:	cmp	r0, r1
   13df8:	beq	13e04 <access_monster_buffer@@Base+0xbd8>
   13dfc:	b	13e00 <access_monster_buffer@@Base+0xbd4>
   13e00:	b	13e24 <access_monster_buffer@@Base+0xbf8>
   13e04:	ldr	r0, [pc, #136]	; 13e94 <access_monster_buffer@@Base+0xc68>
   13e08:	add	r0, pc, r0
   13e0c:	ldr	r1, [pc, #132]	; 13e98 <access_monster_buffer@@Base+0xc6c>
   13e10:	add	r1, pc, r1
   13e14:	ldr	r2, [pc, #128]	; 13e9c <access_monster_buffer@@Base+0xc70>
   13e18:	add	r3, pc, r2
   13e1c:	movw	r2, #130	; 0x82
   13e20:	bl	12450 <__assert_fail@plt>
   13e24:	mov	r0, #1
   13e28:	strh	r0, [sp, #8]
   13e2c:	ldr	r0, [fp, #-4]
   13e30:	str	r0, [sp]
   13e34:	bl	15348 <main@@Base+0xae8>
   13e38:	ldr	lr, [sp]
   13e3c:	sub	r0, lr, r0
   13e40:	str	r0, [sp, #4]
   13e44:	ldr	r0, [sp, #4]
   13e48:	bl	1536c <main@@Base+0xb0c>
   13e4c:	ldrh	lr, [sp, #8]
   13e50:	add	lr, lr, #3
   13e54:	lsl	lr, lr, #1
   13e58:	cmp	r0, lr
   13e5c:	bcc	13e78 <access_monster_buffer@@Base+0xc4c>
   13e60:	ldr	r0, [sp, #4]
   13e64:	ldrh	r1, [sp, #8]
   13e68:	add	r0, r0, r1, lsl #1
   13e6c:	add	r0, r0, #4
   13e70:	bl	1536c <main@@Base+0xb0c>
   13e74:	strh	r0, [fp, #-6]
   13e78:	ldrh	r0, [fp, #-6]
   13e7c:	cmp	r0, #0
   13e80:	movw	r0, #0
   13e84:	movne	r0, #1
   13e88:	and	r0, r0, #1
   13e8c:	mov	sp, fp
   13e90:	pop	{fp, pc}
   13e94:	muleq	r0, r8, r5
   13e98:			; <UNDEFINED> instruction: 0x000085b6
   13e9c:	andeq	r8, r0, r8, lsr r7
   13ea0:	push	{fp, lr}
   13ea4:	mov	fp, sp
   13ea8:	sub	sp, sp, #24
   13eac:	str	r0, [fp, #-8]
   13eb0:	movw	r0, #0
   13eb4:	strh	r0, [fp, #-10]
   13eb8:	ldr	r0, [fp, #-8]
   13ebc:	movw	r1, #0
   13ec0:	cmp	r0, r1
   13ec4:	beq	13ed0 <access_monster_buffer@@Base+0xca4>
   13ec8:	b	13ecc <access_monster_buffer@@Base+0xca0>
   13ecc:	b	13ef0 <access_monster_buffer@@Base+0xcc4>
   13ed0:	ldr	r0, [pc, #160]	; 13f78 <access_monster_buffer@@Base+0xd4c>
   13ed4:	add	r0, pc, r0
   13ed8:	ldr	r1, [pc, #156]	; 13f7c <access_monster_buffer@@Base+0xd50>
   13edc:	add	r1, pc, r1
   13ee0:	ldr	r2, [pc, #152]	; 13f80 <access_monster_buffer@@Base+0xd54>
   13ee4:	add	r3, pc, r2
   13ee8:	movw	r2, #129	; 0x81
   13eec:	bl	12450 <__assert_fail@plt>
   13ef0:	mov	r0, #0
   13ef4:	strh	r0, [sp, #12]
   13ef8:	ldr	r0, [fp, #-8]
   13efc:	str	r0, [sp, #4]
   13f00:	bl	15348 <main@@Base+0xae8>
   13f04:	ldr	lr, [sp, #4]
   13f08:	sub	r0, lr, r0
   13f0c:	str	r0, [sp, #8]
   13f10:	ldr	r0, [sp, #8]
   13f14:	bl	1536c <main@@Base+0xb0c>
   13f18:	ldrh	lr, [sp, #12]
   13f1c:	add	lr, lr, #3
   13f20:	lsl	lr, lr, #1
   13f24:	cmp	r0, lr
   13f28:	bcc	13f44 <access_monster_buffer@@Base+0xd18>
   13f2c:	ldr	r0, [sp, #8]
   13f30:	ldrh	r1, [sp, #12]
   13f34:	add	r0, r0, r1, lsl #1
   13f38:	add	r0, r0, #4
   13f3c:	bl	1536c <main@@Base+0xb0c>
   13f40:	strh	r0, [fp, #-10]
   13f44:	ldrsh	r0, [fp, #-10]
   13f48:	cmp	r0, #0
   13f4c:	beq	13f64 <access_monster_buffer@@Base+0xd38>
   13f50:	ldr	r0, [fp, #-8]
   13f54:	ldrh	r1, [fp, #-10]
   13f58:	add	r0, r0, r1
   13f5c:	str	r0, [fp, #-4]
   13f60:	b	13f6c <access_monster_buffer@@Base+0xd40>
   13f64:	movw	r0, #0
   13f68:	str	r0, [fp, #-4]
   13f6c:	ldr	r0, [fp, #-4]
   13f70:	mov	sp, fp
   13f74:	pop	{fp, pc}
   13f78:	andeq	r8, r0, ip, asr #9
   13f7c:	andeq	r8, r0, sl, ror #9
   13f80:			; <UNDEFINED> instruction: 0x000086b5
   13f84:	push	{fp, lr}
   13f88:	mov	fp, sp
   13f8c:	sub	sp, sp, #8
   13f90:	str	r0, [sp, #4]
   13f94:	ldr	r0, [sp, #4]
   13f98:	movw	r1, #0
   13f9c:	cmp	r0, r1
   13fa0:	beq	13fb4 <access_monster_buffer@@Base+0xd88>
   13fa4:	ldr	r0, [sp, #4]
   13fa8:	bl	153f8 <main@@Base+0xb98>
   13fac:	vstr	s0, [sp]
   13fb0:	b	13fc0 <access_monster_buffer@@Base+0xd94>
   13fb4:	vldr	s0, [pc, #16]	; 13fcc <access_monster_buffer@@Base+0xda0>
   13fb8:	vstr	s0, [sp]
   13fbc:	b	13fc0 <access_monster_buffer@@Base+0xd94>
   13fc0:	vldr	s0, [sp]
   13fc4:	mov	sp, fp
   13fc8:	pop	{fp, pc}
   13fcc:	andeq	r0, r0, r0
   13fd0:	push	{fp, lr}
   13fd4:	mov	fp, sp
   13fd8:	sub	sp, sp, #8
   13fdc:	str	r0, [sp, #4]
   13fe0:	ldr	r0, [sp, #4]
   13fe4:	movw	r1, #0
   13fe8:	cmp	r0, r1
   13fec:	beq	14004 <access_monster_buffer@@Base+0xdd8>
   13ff0:	ldr	r0, [sp, #4]
   13ff4:	add	r0, r0, #4
   13ff8:	bl	153f8 <main@@Base+0xb98>
   13ffc:	vstr	s0, [sp]
   14000:	b	14010 <access_monster_buffer@@Base+0xde4>
   14004:	vldr	s0, [pc, #16]	; 1401c <access_monster_buffer@@Base+0xdf0>
   14008:	vstr	s0, [sp]
   1400c:	b	14010 <access_monster_buffer@@Base+0xde4>
   14010:	vldr	s0, [sp]
   14014:	mov	sp, fp
   14018:	pop	{fp, pc}
   1401c:	andeq	r0, r0, r0
   14020:	push	{fp, lr}
   14024:	mov	fp, sp
   14028:	sub	sp, sp, #8
   1402c:	str	r0, [sp, #4]
   14030:	ldr	r0, [sp, #4]
   14034:	movw	r1, #0
   14038:	cmp	r0, r1
   1403c:	beq	14054 <access_monster_buffer@@Base+0xe28>
   14040:	ldr	r0, [sp, #4]
   14044:	add	r0, r0, #8
   14048:	bl	153f8 <main@@Base+0xb98>
   1404c:	vstr	s0, [sp]
   14050:	b	14060 <access_monster_buffer@@Base+0xe34>
   14054:	vldr	s0, [pc, #16]	; 1406c <access_monster_buffer@@Base+0xe40>
   14058:	vstr	s0, [sp]
   1405c:	b	14060 <access_monster_buffer@@Base+0xe34>
   14060:	vldr	s0, [sp]
   14064:	mov	sp, fp
   14068:	pop	{fp, pc}
   1406c:	andeq	r0, r0, r0
   14070:	push	{fp, lr}
   14074:	mov	fp, sp
   14078:	sub	sp, sp, #24
   1407c:	str	r0, [fp, #-4]
   14080:	str	r1, [fp, #-8]
   14084:	ldr	r0, [fp, #-4]
   14088:	ldr	r1, [fp, #-8]
   1408c:	bl	15440 <main@@Base+0xbe0>
   14090:	ldr	r1, [fp, #-4]
   14094:	add	r1, r1, #4
   14098:	ldr	lr, [fp, #-8]
   1409c:	add	lr, lr, #4
   140a0:	str	r0, [sp, #12]
   140a4:	mov	r0, r1
   140a8:	mov	r1, lr
   140ac:	bl	15440 <main@@Base+0xbe0>
   140b0:	ldr	r1, [fp, #-4]
   140b4:	add	r1, r1, #8
   140b8:	ldr	lr, [fp, #-8]
   140bc:	add	lr, lr, #8
   140c0:	str	r0, [sp, #8]
   140c4:	mov	r0, r1
   140c8:	mov	r1, lr
   140cc:	bl	15440 <main@@Base+0xbe0>
   140d0:	ldr	r1, [fp, #-4]
   140d4:	str	r0, [sp, #4]
   140d8:	mov	r0, r1
   140dc:	mov	sp, fp
   140e0:	pop	{fp, pc}
   140e4:	push	{fp, lr}
   140e8:	mov	fp, sp
   140ec:	sub	sp, sp, #32
   140f0:	str	r0, [fp, #-8]
   140f4:	movw	r0, #0
   140f8:	strh	r0, [fp, #-14]
   140fc:	ldr	r0, [fp, #-8]
   14100:	movw	r1, #0
   14104:	cmp	r0, r1
   14108:	beq	14114 <access_monster_buffer@@Base+0xee8>
   1410c:	b	14110 <access_monster_buffer@@Base+0xee4>
   14110:	b	14134 <access_monster_buffer@@Base+0xf08>
   14114:	ldr	r0, [pc, #196]	; 141e0 <access_monster_buffer@@Base+0xfb4>
   14118:	add	r0, pc, r0
   1411c:	ldr	r1, [pc, #192]	; 141e4 <access_monster_buffer@@Base+0xfb8>
   14120:	add	r1, pc, r1
   14124:	ldr	r2, [pc, #188]	; 141e8 <access_monster_buffer@@Base+0xfbc>
   14128:	add	r3, pc, r2
   1412c:	movw	r2, #135	; 0x87
   14130:	bl	12450 <__assert_fail@plt>
   14134:	mov	r0, #5
   14138:	strh	r0, [sp, #16]
   1413c:	ldr	r0, [fp, #-8]
   14140:	str	r0, [sp, #8]
   14144:	bl	15348 <main@@Base+0xae8>
   14148:	ldr	lr, [sp, #8]
   1414c:	sub	r0, lr, r0
   14150:	str	r0, [sp, #12]
   14154:	ldr	r0, [sp, #12]
   14158:	bl	1536c <main@@Base+0xb0c>
   1415c:	ldrh	lr, [sp, #16]
   14160:	add	lr, lr, #3
   14164:	lsl	lr, lr, #1
   14168:	cmp	r0, lr
   1416c:	bcc	14188 <access_monster_buffer@@Base+0xf5c>
   14170:	ldr	r0, [sp, #12]
   14174:	ldrh	r1, [sp, #16]
   14178:	add	r0, r0, r1, lsl #1
   1417c:	add	r0, r0, #4
   14180:	bl	1536c <main@@Base+0xb0c>
   14184:	strh	r0, [fp, #-14]
   14188:	ldrsh	r0, [fp, #-14]
   1418c:	cmp	r0, #0
   14190:	beq	141cc <access_monster_buffer@@Base+0xfa0>
   14194:	ldr	r0, [fp, #-8]
   14198:	ldrh	r1, [fp, #-14]
   1419c:	add	r0, r0, r1
   141a0:	str	r0, [fp, #-12]
   141a4:	ldr	r0, [fp, #-12]
   141a8:	add	r0, r0, #4
   141ac:	ldr	r1, [fp, #-12]
   141b0:	str	r0, [sp, #4]
   141b4:	mov	r0, r1
   141b8:	bl	152c4 <main@@Base+0xa64>
   141bc:	ldr	r1, [sp, #4]
   141c0:	add	r0, r1, r0
   141c4:	str	r0, [fp, #-4]
   141c8:	b	141d4 <access_monster_buffer@@Base+0xfa8>
   141cc:	movw	r0, #0
   141d0:	str	r0, [fp, #-4]
   141d4:	ldr	r0, [fp, #-4]
   141d8:	mov	sp, fp
   141dc:	pop	{fp, pc}
   141e0:	andeq	r8, r0, r8, lsl #5
   141e4:	andeq	r8, r0, r6, lsr #5
   141e8:	andeq	r8, r0, r6, asr #9
   141ec:	push	{fp, lr}
   141f0:	mov	fp, sp
   141f4:	sub	sp, sp, #8
   141f8:	str	r0, [sp, #4]
   141fc:	ldr	r0, [sp, #4]
   14200:	bl	15474 <main@@Base+0xc14>
   14204:	mov	sp, fp
   14208:	pop	{fp, pc}
   1420c:	push	{fp, lr}
   14210:	mov	fp, sp
   14214:	sub	sp, sp, #8
   14218:	str	r0, [sp, #4]
   1421c:	str	r1, [sp]
   14220:	ldr	r0, [sp, #4]
   14224:	bl	15474 <main@@Base+0xc14>
   14228:	ldr	r1, [sp]
   1422c:	cmp	r0, r1
   14230:	bls	1423c <access_monster_buffer@@Base+0x1010>
   14234:	b	14238 <access_monster_buffer@@Base+0x100c>
   14238:	b	1425c <access_monster_buffer@@Base+0x1030>
   1423c:	ldr	r0, [pc, #52]	; 14278 <access_monster_buffer@@Base+0x104c>
   14240:	add	r0, pc, r0
   14244:	ldr	r1, [pc, #48]	; 1427c <access_monster_buffer@@Base+0x1050>
   14248:	add	r1, pc, r1
   1424c:	ldr	r2, [pc, #44]	; 14280 <access_monster_buffer@@Base+0x1054>
   14250:	add	r3, pc, r2
   14254:	movw	r2, #395	; 0x18b
   14258:	bl	12450 <__assert_fail@plt>
   1425c:	ldr	r0, [sp, #4]
   14260:	ldr	r1, [sp]
   14264:	add	r0, r0, r1
   14268:	bl	154c4 <main@@Base+0xc64>
   1426c:	and	r0, r0, #255	; 0xff
   14270:	mov	sp, fp
   14274:	pop	{fp, pc}
   14278:	andeq	r8, r0, r8, lsl r4
   1427c:	andeq	r8, r0, r7, asr #8
   14280:			; <UNDEFINED> instruction: 0x000084bc
   14284:	push	{fp, lr}
   14288:	mov	fp, sp
   1428c:	sub	sp, sp, #32
   14290:	str	r0, [fp, #-8]
   14294:	movw	r0, #0
   14298:	strh	r0, [fp, #-14]
   1429c:	ldr	r0, [fp, #-8]
   142a0:	movw	r1, #0
   142a4:	cmp	r0, r1
   142a8:	beq	142b4 <access_monster_buffer@@Base+0x1088>
   142ac:	b	142b0 <access_monster_buffer@@Base+0x1084>
   142b0:	b	142d4 <access_monster_buffer@@Base+0x10a8>
   142b4:	ldr	r0, [pc, #196]	; 14380 <access_monster_buffer@@Base+0x1154>
   142b8:	add	r0, pc, r0
   142bc:	ldr	r1, [pc, #192]	; 14384 <access_monster_buffer@@Base+0x1158>
   142c0:	add	r1, pc, r1
   142c4:	ldr	r2, [pc, #188]	; 14388 <access_monster_buffer@@Base+0x115c>
   142c8:	add	r3, pc, r2
   142cc:	movw	r2, #137	; 0x89
   142d0:	bl	12450 <__assert_fail@plt>
   142d4:	mov	r0, #7
   142d8:	strh	r0, [sp, #16]
   142dc:	ldr	r0, [fp, #-8]
   142e0:	str	r0, [sp, #8]
   142e4:	bl	15348 <main@@Base+0xae8>
   142e8:	ldr	lr, [sp, #8]
   142ec:	sub	r0, lr, r0
   142f0:	str	r0, [sp, #12]
   142f4:	ldr	r0, [sp, #12]
   142f8:	bl	1536c <main@@Base+0xb0c>
   142fc:	ldrh	lr, [sp, #16]
   14300:	add	lr, lr, #3
   14304:	lsl	lr, lr, #1
   14308:	cmp	r0, lr
   1430c:	bcc	14328 <access_monster_buffer@@Base+0x10fc>
   14310:	ldr	r0, [sp, #12]
   14314:	ldrh	r1, [sp, #16]
   14318:	add	r0, r0, r1, lsl #1
   1431c:	add	r0, r0, #4
   14320:	bl	1536c <main@@Base+0xb0c>
   14324:	strh	r0, [fp, #-14]
   14328:	ldrsh	r0, [fp, #-14]
   1432c:	cmp	r0, #0
   14330:	beq	1436c <access_monster_buffer@@Base+0x1140>
   14334:	ldr	r0, [fp, #-8]
   14338:	ldrh	r1, [fp, #-14]
   1433c:	add	r0, r0, r1
   14340:	str	r0, [fp, #-12]
   14344:	ldr	r0, [fp, #-12]
   14348:	add	r0, r0, #4
   1434c:	ldr	r1, [fp, #-12]
   14350:	str	r0, [sp, #4]
   14354:	mov	r0, r1
   14358:	bl	152c4 <main@@Base+0xa64>
   1435c:	ldr	r1, [sp, #4]
   14360:	add	r0, r1, r0
   14364:	str	r0, [fp, #-4]
   14368:	b	14374 <access_monster_buffer@@Base+0x1148>
   1436c:	movw	r0, #0
   14370:	str	r0, [fp, #-4]
   14374:	ldr	r0, [fp, #-4]
   14378:	mov	sp, fp
   1437c:	pop	{fp, pc}
   14380:	andeq	r8, r0, r8, ror #1
   14384:	andeq	r8, r0, r6, lsl #2
   14388:	andeq	r8, r0, r6, lsl #9
   1438c:	push	{fp, lr}
   14390:	mov	fp, sp
   14394:	sub	sp, sp, #8
   14398:	str	r0, [sp, #4]
   1439c:	ldr	r0, [sp, #4]
   143a0:	movw	r1, #0
   143a4:	cmp	r0, r1
   143a8:	beq	143c4 <access_monster_buffer@@Base+0x1198>
   143ac:	ldr	r0, [sp, #4]
   143b0:	mvn	r1, #3
   143b4:	add	r0, r0, r1
   143b8:	bl	152c4 <main@@Base+0xa64>
   143bc:	str	r0, [sp]
   143c0:	b	143d0 <access_monster_buffer@@Base+0x11a4>
   143c4:	movw	r0, #0
   143c8:	str	r0, [sp]
   143cc:	b	143d0 <access_monster_buffer@@Base+0x11a4>
   143d0:	ldr	r0, [sp]
   143d4:	mov	sp, fp
   143d8:	pop	{fp, pc}
   143dc:	push	{fp, lr}
   143e0:	mov	fp, sp
   143e4:	sub	sp, sp, #32
   143e8:	str	r0, [fp, #-8]
   143ec:	movw	r0, #0
   143f0:	strh	r0, [fp, #-14]
   143f4:	ldr	r0, [fp, #-8]
   143f8:	movw	r1, #0
   143fc:	cmp	r0, r1
   14400:	beq	1440c <access_monster_buffer@@Base+0x11e0>
   14404:	b	14408 <access_monster_buffer@@Base+0x11dc>
   14408:	b	1442c <access_monster_buffer@@Base+0x1200>
   1440c:	ldr	r0, [pc, #196]	; 144d8 <access_monster_buffer@@Base+0x12ac>
   14410:	add	r0, pc, r0
   14414:	ldr	r1, [pc, #192]	; 144dc <access_monster_buffer@@Base+0x12b0>
   14418:	add	r1, pc, r1
   1441c:	ldr	r2, [pc, #188]	; 144e0 <access_monster_buffer@@Base+0x12b4>
   14420:	add	r3, pc, r2
   14424:	movw	r2, #148	; 0x94
   14428:	bl	12450 <__assert_fail@plt>
   1442c:	mov	r0, #0
   14430:	strh	r0, [sp, #16]
   14434:	ldr	r0, [fp, #-8]
   14438:	str	r0, [sp, #8]
   1443c:	bl	15348 <main@@Base+0xae8>
   14440:	ldr	lr, [sp, #8]
   14444:	sub	r0, lr, r0
   14448:	str	r0, [sp, #12]
   1444c:	ldr	r0, [sp, #12]
   14450:	bl	1536c <main@@Base+0xb0c>
   14454:	ldrh	lr, [sp, #16]
   14458:	add	lr, lr, #3
   1445c:	lsl	lr, lr, #1
   14460:	cmp	r0, lr
   14464:	bcc	14480 <access_monster_buffer@@Base+0x1254>
   14468:	ldr	r0, [sp, #12]
   1446c:	ldrh	r1, [sp, #16]
   14470:	add	r0, r0, r1, lsl #1
   14474:	add	r0, r0, #4
   14478:	bl	1536c <main@@Base+0xb0c>
   1447c:	strh	r0, [fp, #-14]
   14480:	ldrsh	r0, [fp, #-14]
   14484:	cmp	r0, #0
   14488:	beq	144c4 <access_monster_buffer@@Base+0x1298>
   1448c:	ldr	r0, [fp, #-8]
   14490:	ldrh	r1, [fp, #-14]
   14494:	add	r0, r0, r1
   14498:	str	r0, [fp, #-12]
   1449c:	ldr	r0, [fp, #-12]
   144a0:	add	r0, r0, #4
   144a4:	ldr	r1, [fp, #-12]
   144a8:	str	r0, [sp, #4]
   144ac:	mov	r0, r1
   144b0:	bl	152c4 <main@@Base+0xa64>
   144b4:	ldr	r1, [sp, #4]
   144b8:	add	r0, r1, r0
   144bc:	str	r0, [fp, #-4]
   144c0:	b	144cc <access_monster_buffer@@Base+0x12a0>
   144c4:	movw	r0, #0
   144c8:	str	r0, [fp, #-4]
   144cc:	ldr	r0, [fp, #-4]
   144d0:	mov	sp, fp
   144d4:	pop	{fp, pc}
   144d8:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   144dc:	andeq	r7, r0, lr, lsr #31
   144e0:	andeq	r8, r0, r6, lsl #7
   144e4:	push	{fp, lr}
   144e8:	mov	fp, sp
   144ec:	sub	sp, sp, #16
   144f0:	str	r0, [fp, #-4]
   144f4:	str	r1, [sp, #8]
   144f8:	ldr	r0, [fp, #-4]
   144fc:	ldr	r1, [sp, #8]
   14500:	add	r0, r0, r1, lsl #2
   14504:	str	r0, [sp, #4]
   14508:	ldr	r0, [fp, #-4]
   1450c:	bl	15474 <main@@Base+0xc14>
   14510:	ldr	r1, [sp, #8]
   14514:	cmp	r0, r1
   14518:	bls	14524 <access_monster_buffer@@Base+0x12f8>
   1451c:	b	14520 <access_monster_buffer@@Base+0x12f4>
   14520:	b	14544 <access_monster_buffer@@Base+0x1318>
   14524:	ldr	r0, [pc, #60]	; 14568 <access_monster_buffer@@Base+0x133c>
   14528:	add	r0, pc, r0
   1452c:	ldr	r1, [pc, #56]	; 1456c <access_monster_buffer@@Base+0x1340>
   14530:	add	r1, pc, r1
   14534:	ldr	r2, [pc, #52]	; 14570 <access_monster_buffer@@Base+0x1344>
   14538:	add	r3, pc, r2
   1453c:	movw	r2, #145	; 0x91
   14540:	bl	12450 <__assert_fail@plt>
   14544:	ldr	r0, [sp, #4]
   14548:	ldr	r1, [sp, #4]
   1454c:	str	r0, [sp]
   14550:	mov	r0, r1
   14554:	bl	152c4 <main@@Base+0xa64>
   14558:	ldr	r1, [sp]
   1455c:	add	r0, r1, r0
   14560:	mov	sp, fp
   14564:	pop	{fp, pc}
   14568:	andeq	r8, r0, r0, lsr r1
   1456c:	muleq	r0, r6, lr
   14570:			; <UNDEFINED> instruction: 0x000082bb
   14574:	push	{fp, lr}
   14578:	mov	fp, sp
   1457c:	sub	sp, sp, #24
   14580:	str	r0, [fp, #-4]
   14584:	movw	r0, #0
   14588:	strh	r0, [fp, #-6]
   1458c:	ldr	r0, [fp, #-4]
   14590:	movw	r1, #0
   14594:	cmp	r0, r1
   14598:	beq	145a4 <access_monster_buffer@@Base+0x1378>
   1459c:	b	145a0 <access_monster_buffer@@Base+0x1374>
   145a0:	b	145c4 <access_monster_buffer@@Base+0x1398>
   145a4:	ldr	r0, [pc, #176]	; 1465c <access_monster_buffer@@Base+0x1430>
   145a8:	add	r0, pc, r0
   145ac:	ldr	r1, [pc, #172]	; 14660 <access_monster_buffer@@Base+0x1434>
   145b0:	add	r1, pc, r1
   145b4:	ldr	r2, [pc, #168]	; 14664 <access_monster_buffer@@Base+0x1438>
   145b8:	add	r3, pc, r2
   145bc:	movw	r2, #149	; 0x95
   145c0:	bl	12450 <__assert_fail@plt>
   145c4:	mov	r0, #1
   145c8:	strh	r0, [fp, #-8]
   145cc:	ldr	r0, [fp, #-4]
   145d0:	str	r0, [sp, #8]
   145d4:	bl	15348 <main@@Base+0xae8>
   145d8:	ldr	lr, [sp, #8]
   145dc:	sub	r0, lr, r0
   145e0:	str	r0, [sp, #12]
   145e4:	ldr	r0, [sp, #12]
   145e8:	bl	1536c <main@@Base+0xb0c>
   145ec:	ldrh	lr, [fp, #-8]
   145f0:	add	lr, lr, #3
   145f4:	lsl	lr, lr, #1
   145f8:	cmp	r0, lr
   145fc:	bcc	14618 <access_monster_buffer@@Base+0x13ec>
   14600:	ldr	r0, [sp, #12]
   14604:	ldrh	r1, [fp, #-8]
   14608:	add	r0, r0, r1, lsl #1
   1460c:	add	r0, r0, #4
   14610:	bl	1536c <main@@Base+0xb0c>
   14614:	strh	r0, [fp, #-6]
   14618:	ldrh	r0, [fp, #-6]
   1461c:	cmp	r0, #0
   14620:	beq	14640 <access_monster_buffer@@Base+0x1414>
   14624:	ldr	r0, [fp, #-4]
   14628:	ldrh	r1, [fp, #-6]
   1462c:	add	r0, r0, r1
   14630:	bl	15394 <main@@Base+0xb34>
   14634:	sxth	r0, r0
   14638:	str	r0, [sp, #4]
   1463c:	b	1464c <access_monster_buffer@@Base+0x1420>
   14640:	movw	r0, #0
   14644:	str	r0, [sp, #4]
   14648:	b	1464c <access_monster_buffer@@Base+0x1420>
   1464c:	ldr	r0, [sp, #4]
   14650:	sxth	r0, r0
   14654:	mov	sp, fp
   14658:	pop	{fp, pc}
   1465c:	strdeq	r7, [r0], -r8
   14660:	andeq	r7, r0, r6, lsl lr
   14664:	muleq	r0, r8, r2
   14668:	push	{fp, lr}
   1466c:	mov	fp, sp
   14670:	sub	sp, sp, #24
   14674:	str	r0, [fp, #-4]
   14678:	movw	r0, #0
   1467c:	strh	r0, [fp, #-6]
   14680:	ldr	r0, [fp, #-4]
   14684:	movw	r1, #0
   14688:	cmp	r0, r1
   1468c:	beq	14698 <access_monster_buffer@@Base+0x146c>
   14690:	b	14694 <access_monster_buffer@@Base+0x1468>
   14694:	b	146b8 <access_monster_buffer@@Base+0x148c>
   14698:	ldr	r0, [pc, #176]	; 14750 <access_monster_buffer@@Base+0x1524>
   1469c:	add	r0, pc, r0
   146a0:	ldr	r1, [pc, #172]	; 14754 <access_monster_buffer@@Base+0x1528>
   146a4:	add	r1, pc, r1
   146a8:	ldr	r2, [pc, #168]	; 14758 <access_monster_buffer@@Base+0x152c>
   146ac:	add	r3, pc, r2
   146b0:	movw	r2, #138	; 0x8a
   146b4:	bl	12450 <__assert_fail@plt>
   146b8:	mov	r0, #8
   146bc:	strh	r0, [fp, #-8]
   146c0:	ldr	r0, [fp, #-4]
   146c4:	str	r0, [sp, #8]
   146c8:	bl	15348 <main@@Base+0xae8>
   146cc:	ldr	lr, [sp, #8]
   146d0:	sub	r0, lr, r0
   146d4:	str	r0, [sp, #12]
   146d8:	ldr	r0, [sp, #12]
   146dc:	bl	1536c <main@@Base+0xb0c>
   146e0:	ldrh	lr, [fp, #-8]
   146e4:	add	lr, lr, #3
   146e8:	lsl	lr, lr, #1
   146ec:	cmp	r0, lr
   146f0:	bcc	1470c <access_monster_buffer@@Base+0x14e0>
   146f4:	ldr	r0, [sp, #12]
   146f8:	ldrh	r1, [fp, #-8]
   146fc:	add	r0, r0, r1, lsl #1
   14700:	add	r0, r0, #4
   14704:	bl	1536c <main@@Base+0xb0c>
   14708:	strh	r0, [fp, #-6]
   1470c:	ldrh	r0, [fp, #-6]
   14710:	cmp	r0, #0
   14714:	beq	14734 <access_monster_buffer@@Base+0x1508>
   14718:	ldr	r0, [fp, #-4]
   1471c:	ldrh	r1, [fp, #-6]
   14720:	add	r0, r0, r1
   14724:	bl	15500 <main@@Base+0xca0>
   14728:	and	r0, r0, #255	; 0xff
   1472c:	str	r0, [sp, #4]
   14730:	b	14740 <access_monster_buffer@@Base+0x1514>
   14734:	movw	r0, #0
   14738:	str	r0, [sp, #4]
   1473c:	b	14740 <access_monster_buffer@@Base+0x1514>
   14740:	ldr	r0, [sp, #4]
   14744:	and	r0, r0, #255	; 0xff
   14748:	mov	sp, fp
   1474c:	pop	{fp, pc}
   14750:	andeq	r7, r0, r4, lsl #26
   14754:	andeq	r7, r0, r2, lsr #26
   14758:	andeq	r8, r0, r6, ror #3
   1475c:	push	{fp, lr}
   14760:	mov	fp, sp
   14764:	sub	sp, sp, #32
   14768:	str	r0, [fp, #-8]
   1476c:	movw	r0, #0
   14770:	strh	r0, [fp, #-14]
   14774:	ldr	r0, [fp, #-8]
   14778:	movw	r1, #0
   1477c:	cmp	r0, r1
   14780:	beq	1478c <access_monster_buffer@@Base+0x1560>
   14784:	b	14788 <access_monster_buffer@@Base+0x155c>
   14788:	b	147ac <access_monster_buffer@@Base+0x1580>
   1478c:	ldr	r0, [pc, #192]	; 14854 <access_monster_buffer@@Base+0x1628>
   14790:	add	r0, pc, r0
   14794:	ldr	r1, [pc, #188]	; 14858 <access_monster_buffer@@Base+0x162c>
   14798:	add	r1, pc, r1
   1479c:	ldr	r2, [pc, #184]	; 1485c <access_monster_buffer@@Base+0x1630>
   147a0:	add	r3, pc, r2
   147a4:	movw	r2, #138	; 0x8a
   147a8:	bl	12450 <__assert_fail@plt>
   147ac:	mov	r0, #9
   147b0:	strh	r0, [sp, #16]
   147b4:	ldr	r0, [fp, #-8]
   147b8:	str	r0, [sp, #8]
   147bc:	bl	15348 <main@@Base+0xae8>
   147c0:	ldr	lr, [sp, #8]
   147c4:	sub	r0, lr, r0
   147c8:	str	r0, [sp, #12]
   147cc:	ldr	r0, [sp, #12]
   147d0:	bl	1536c <main@@Base+0xb0c>
   147d4:	ldrh	lr, [sp, #16]
   147d8:	add	lr, lr, #3
   147dc:	lsl	lr, lr, #1
   147e0:	cmp	r0, lr
   147e4:	bcc	14800 <access_monster_buffer@@Base+0x15d4>
   147e8:	ldr	r0, [sp, #12]
   147ec:	ldrh	r1, [sp, #16]
   147f0:	add	r0, r0, r1, lsl #1
   147f4:	add	r0, r0, #4
   147f8:	bl	1536c <main@@Base+0xb0c>
   147fc:	strh	r0, [fp, #-14]
   14800:	ldrsh	r0, [fp, #-14]
   14804:	cmp	r0, #0
   14808:	beq	14840 <access_monster_buffer@@Base+0x1614>
   1480c:	ldr	r0, [fp, #-8]
   14810:	ldrh	r1, [fp, #-14]
   14814:	add	r0, r0, r1
   14818:	str	r0, [fp, #-12]
   1481c:	ldr	r0, [fp, #-12]
   14820:	ldr	r1, [fp, #-12]
   14824:	str	r0, [sp, #4]
   14828:	mov	r0, r1
   1482c:	bl	152c4 <main@@Base+0xa64>
   14830:	ldr	r1, [sp, #4]
   14834:	add	r0, r1, r0
   14838:	str	r0, [fp, #-4]
   1483c:	b	14848 <access_monster_buffer@@Base+0x161c>
   14840:	movw	r0, #0
   14844:	str	r0, [fp, #-4]
   14848:	ldr	r0, [fp, #-4]
   1484c:	mov	sp, fp
   14850:	pop	{fp, pc}
   14854:	andeq	r7, r0, r0, lsl ip
   14858:	andeq	r7, r0, lr, lsr #24
   1485c:	andeq	r8, r0, sl, asr r1

00014860 <main@@Base>:
   14860:	push	{r4, r5, fp, lr}
   14864:	add	fp, sp, #8
   14868:	sub	sp, sp, #280	; 0x118
   1486c:	movw	r2, #0
   14870:	str	r2, [fp, #-12]
   14874:	str	r0, [fp, #-16]
   14878:	str	r1, [fp, #-20]	; 0xffffffec
   1487c:	add	r0, sp, #36	; 0x24
   14880:	bl	15860 <flatcc_builder_init@@Base>
   14884:	str	r0, [sp, #24]
   14888:	add	r0, sp, #36	; 0x24
   1488c:	movw	r1, #0
   14890:	bl	1254c <create_monster_bottom_up@@Base>
   14894:	movw	r1, #0
   14898:	cmp	r1, r0
   1489c:	beq	148c0 <main@@Base+0x60>
   148a0:	ldr	r0, [pc, #316]	; 149e4 <main@@Base+0x184>
   148a4:	add	r0, pc, r0
   148a8:	ldr	r1, [pc, #312]	; 149e8 <main@@Base+0x188>
   148ac:	add	r1, pc, r1
   148b0:	ldr	r2, [pc, #308]	; 149ec <main@@Base+0x18c>
   148b4:	add	r3, pc, r2
   148b8:	movw	r2, #308	; 0x134
   148bc:	bl	12450 <__assert_fail@plt>
   148c0:	b	148c4 <main@@Base+0x64>
   148c4:	add	r0, sp, #36	; 0x24
   148c8:	add	r1, sp, #28
   148cc:	bl	1af78 <flatcc_builder_finalize_aligned_buffer@@Base>
   148d0:	str	r0, [sp, #32]
   148d4:	ldr	r0, [sp, #32]
   148d8:	bl	1b120 <flatcc_builder_aligned_free@@Base>
   148dc:	add	r0, sp, #36	; 0x24
   148e0:	bl	15ae0 <flatcc_builder_reset@@Base>
   148e4:	str	r0, [sp, #20]
   148e8:	add	r0, sp, #36	; 0x24
   148ec:	movw	r1, #1
   148f0:	bl	1254c <create_monster_bottom_up@@Base>
   148f4:	movw	r1, #0
   148f8:	cmp	r1, r0
   148fc:	beq	14920 <main@@Base+0xc0>
   14900:	ldr	r0, [pc, #232]	; 149f0 <main@@Base+0x190>
   14904:	add	r0, pc, r0
   14908:	ldr	r1, [pc, #228]	; 149f4 <main@@Base+0x194>
   1490c:	add	r1, pc, r1
   14910:	ldr	r2, [pc, #224]	; 149f8 <main@@Base+0x198>
   14914:	add	r3, pc, r2
   14918:	movw	r2, #335	; 0x14f
   1491c:	bl	12450 <__assert_fail@plt>
   14920:	b	14924 <main@@Base+0xc4>
   14924:	add	r0, sp, #36	; 0x24
   14928:	add	r1, sp, #28
   1492c:	bl	1af78 <flatcc_builder_finalize_aligned_buffer@@Base>
   14930:	str	r0, [sp, #32]
   14934:	ldr	r0, [sp, #32]
   14938:	bl	1322c <access_monster_buffer@@Base>
   1493c:	ldr	r1, [sp, #32]
   14940:	str	r0, [sp, #16]
   14944:	mov	r0, r1
   14948:	bl	1b120 <flatcc_builder_aligned_free@@Base>
   1494c:	add	r0, sp, #36	; 0x24
   14950:	bl	15ae0 <flatcc_builder_reset@@Base>
   14954:	add	r1, sp, #36	; 0x24
   14958:	str	r0, [sp, #12]
   1495c:	mov	r0, r1
   14960:	bl	12eb8 <create_monster_top_down@@Base>
   14964:	add	r1, sp, #36	; 0x24
   14968:	str	r0, [sp, #8]
   1496c:	mov	r0, r1
   14970:	add	r1, sp, #28
   14974:	bl	1ae70 <flatcc_builder_finalize_buffer@@Base>
   14978:	str	r0, [sp, #32]
   1497c:	ldr	r0, [sp, #32]
   14980:	bl	1322c <access_monster_buffer@@Base>
   14984:	movw	lr, #0
   14988:	cmp	lr, r0
   1498c:	beq	149b0 <main@@Base+0x150>
   14990:	ldr	r0, [pc, #100]	; 149fc <main@@Base+0x19c>
   14994:	add	r0, pc, r0
   14998:	ldr	r1, [pc, #96]	; 14a00 <main@@Base+0x1a0>
   1499c:	add	r1, pc, r1
   149a0:	ldr	r2, [pc, #92]	; 14a04 <main@@Base+0x1a4>
   149a4:	add	r3, pc, r2
   149a8:	movw	r2, #342	; 0x156
   149ac:	bl	12450 <__assert_fail@plt>
   149b0:	b	149b4 <main@@Base+0x154>
   149b4:	ldr	r0, [sp, #32]
   149b8:	bl	123b4 <free@plt>
   149bc:	add	r0, sp, #36	; 0x24
   149c0:	bl	15b0c <flatcc_builder_clear@@Base>
   149c4:	ldr	r0, [pc, #60]	; 14a08 <main@@Base+0x1a8>
   149c8:	add	r0, pc, r0
   149cc:	bl	123a8 <printf@plt>
   149d0:	movw	lr, #0
   149d4:	str	r0, [sp, #4]
   149d8:	mov	r0, lr
   149dc:	sub	sp, fp, #8
   149e0:	pop	{r4, r5, fp, pc}
   149e4:	andeq	r9, r0, r1, lsr #9
   149e8:			; <UNDEFINED> instruction: 0x000077b6
   149ec:	andeq	r7, r0, sl, lsr r8
   149f0:	andeq	r9, r0, r1, asr #8
   149f4:	andeq	r7, r0, r6, asr r7
   149f8:	ldrdeq	r7, [r0], -sl
   149fc:			; <UNDEFINED> instruction: 0x000093b1
   14a00:	andeq	r7, r0, r6, asr #13
   14a04:	andeq	r7, r0, sl, asr #14
   14a08:	andeq	r7, r0, sp, lsr r7
   14a0c:	push	{fp, lr}
   14a10:	mov	fp, sp
   14a14:	sub	sp, sp, #8
   14a18:	str	r0, [sp, #4]
   14a1c:	ldr	r0, [sp, #4]
   14a20:	movw	r1, #2
   14a24:	bl	180d8 <flatcc_builder_start_table@@Base>
   14a28:	mov	sp, fp
   14a2c:	pop	{fp, pc}
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	sub	sp, sp, #16
   14a3c:	str	r0, [fp, #-4]
   14a40:	str	r1, [sp, #8]
   14a44:	ldr	r0, [sp, #8]
   14a48:	cmp	r0, #0
   14a4c:	beq	14a84 <main@@Base+0x224>
   14a50:	ldr	r0, [fp, #-4]
   14a54:	movw	r1, #0
   14a58:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   14a5c:	str	r0, [sp, #4]
   14a60:	movw	r1, #0
   14a64:	cmp	r0, r1
   14a68:	beq	14a84 <main@@Base+0x224>
   14a6c:	ldr	r0, [sp, #8]
   14a70:	ldr	r1, [sp, #4]
   14a74:	str	r0, [r1]
   14a78:	movw	r0, #0
   14a7c:	str	r0, [sp]
   14a80:	b	14a90 <main@@Base+0x230>
   14a84:	mvn	r0, #0
   14a88:	str	r0, [sp]
   14a8c:	b	14a90 <main@@Base+0x230>
   14a90:	ldr	r0, [sp]
   14a94:	mov	sp, fp
   14a98:	pop	{fp, pc}
   14a9c:	push	{fp, lr}
   14aa0:	mov	fp, sp
   14aa4:	sub	sp, sp, #24
   14aa8:	str	r0, [fp, #-8]
   14aac:	strh	r1, [fp, #-10]
   14ab0:	ldrsh	r0, [fp, #-10]
   14ab4:	cmp	r0, #0
   14ab8:	bne	14ac8 <main@@Base+0x268>
   14abc:	movw	r0, #0
   14ac0:	str	r0, [fp, #-4]
   14ac4:	b	14b14 <main@@Base+0x2b4>
   14ac8:	ldr	r0, [fp, #-8]
   14acc:	movw	r1, #1
   14ad0:	movw	r2, #2
   14ad4:	movw	r3, #2
   14ad8:	uxth	r3, r3
   14adc:	bl	19990 <flatcc_builder_table_add@@Base>
   14ae0:	str	r0, [sp, #8]
   14ae4:	movw	r1, #0
   14ae8:	cmp	r0, r1
   14aec:	bne	14afc <main@@Base+0x29c>
   14af0:	mvn	r0, #0
   14af4:	str	r0, [fp, #-4]
   14af8:	b	14b14 <main@@Base+0x2b4>
   14afc:	ldr	r0, [sp, #8]
   14b00:	ldrsh	r1, [fp, #-10]
   14b04:	bl	14b90 <main@@Base+0x330>
   14b08:	movw	r1, #0
   14b0c:	str	r1, [fp, #-4]
   14b10:	str	r0, [sp, #4]
   14b14:	ldr	r0, [fp, #-4]
   14b18:	mov	sp, fp
   14b1c:	pop	{fp, pc}
   14b20:	push	{fp, lr}
   14b24:	mov	fp, sp
   14b28:	sub	sp, sp, #8
   14b2c:	ldr	r1, [pc, #76]	; 14b80 <main@@Base+0x320>
   14b30:	add	r1, pc, r1
   14b34:	str	r0, [sp, #4]
   14b38:	ldr	r0, [sp, #4]
   14b3c:	movw	r2, #0
   14b40:	bl	18c60 <flatcc_builder_check_required@@Base>
   14b44:	cmp	r0, #0
   14b48:	beq	14b50 <main@@Base+0x2f0>
   14b4c:	b	14b70 <main@@Base+0x310>
   14b50:	ldr	r0, [pc, #44]	; 14b84 <main@@Base+0x324>
   14b54:	add	r0, pc, r0
   14b58:	ldr	r1, [pc, #40]	; 14b88 <main@@Base+0x328>
   14b5c:	add	r1, pc, r1
   14b60:	ldr	r2, [pc, #36]	; 14b8c <main@@Base+0x32c>
   14b64:	add	r3, pc, r2
   14b68:	movw	r2, #52	; 0x34
   14b6c:	bl	12450 <__assert_fail@plt>
   14b70:	ldr	r0, [sp, #4]
   14b74:	bl	18d50 <flatcc_builder_end_table@@Base>
   14b78:	mov	sp, fp
   14b7c:	pop	{fp, pc}
   14b80:	andeq	r7, r0, r2, asr #28
   14b84:	andeq	r7, r0, r8, ror #11
   14b88:	andeq	r7, r0, ip, ror r6
   14b8c:	andeq	r7, r0, r7, ror #13
   14b90:	push	{fp, lr}
   14b94:	mov	fp, sp
   14b98:	sub	sp, sp, #8
   14b9c:	str	r0, [sp, #4]
   14ba0:	strh	r1, [sp, #2]
   14ba4:	ldrsh	r0, [sp, #2]
   14ba8:	bl	14bc0 <main@@Base+0x360>
   14bac:	ldr	r1, [sp, #4]
   14bb0:	strh	r0, [r1]
   14bb4:	ldr	r0, [sp, #4]
   14bb8:	mov	sp, fp
   14bbc:	pop	{fp, pc}
   14bc0:	sub	sp, sp, #4
   14bc4:	strh	r0, [sp, #2]
   14bc8:	ldrsh	r0, [sp, #2]
   14bcc:	add	sp, sp, #4
   14bd0:	bx	lr
   14bd4:	push	{fp, lr}
   14bd8:	mov	fp, sp
   14bdc:	sub	sp, sp, #8
   14be0:	str	r0, [sp, #4]
   14be4:	str	r1, [sp]
   14be8:	ldr	r0, [sp, #4]
   14bec:	ldr	r1, [sp]
   14bf0:	movw	r2, #0
   14bf4:	uxth	r2, r2
   14bf8:	movw	r3, #0
   14bfc:	bl	169a4 <flatcc_builder_start_buffer@@Base>
   14c00:	mov	sp, fp
   14c04:	pop	{fp, pc}
   14c08:	push	{fp, lr}
   14c0c:	mov	fp, sp
   14c10:	sub	sp, sp, #8
   14c14:	str	r0, [sp, #4]
   14c18:	str	r1, [sp]
   14c1c:	ldr	r0, [sp, #4]
   14c20:	ldr	r1, [sp]
   14c24:	bl	16ce8 <flatcc_builder_end_buffer@@Base>
   14c28:	mov	sp, fp
   14c2c:	pop	{fp, pc}
   14c30:	push	{r4, r5, r6, r7, fp, lr}
   14c34:	add	fp, sp, #16
   14c38:	sub	sp, sp, #40	; 0x28
   14c3c:	ldr	ip, [fp, #28]
   14c40:	ldr	lr, [fp, #24]
   14c44:	ldr	r4, [fp, #20]
   14c48:	ldr	r5, [fp, #16]
   14c4c:	ldr	r6, [fp, #12]
   14c50:	ldr	r7, [fp, #8]
   14c54:	str	lr, [sp, #28]
   14c58:	str	ip, [sp, #32]
   14c5c:	str	r0, [sp, #24]
   14c60:	str	r1, [sp, #20]
   14c64:	strh	r2, [sp, #18]
   14c68:	strh	r3, [sp, #16]
   14c6c:	strb	r5, [sp, #15]
   14c70:	ldr	r0, [sp, #24]
   14c74:	str	r7, [sp, #8]
   14c78:	str	r6, [sp, #4]
   14c7c:	str	r4, [sp]
   14c80:	bl	14d68 <main@@Base+0x508>
   14c84:	cmp	r0, #0
   14c88:	bne	14d44 <main@@Base+0x4e4>
   14c8c:	ldr	r0, [sp, #24]
   14c90:	ldr	r1, [sp, #20]
   14c94:	bl	14d8c <main@@Base+0x52c>
   14c98:	cmp	r0, #0
   14c9c:	bne	14d44 <main@@Base+0x4e4>
   14ca0:	ldr	r0, [sp, #24]
   14ca4:	ldr	r1, [fp, #8]
   14ca8:	bl	12bec <create_monster_bottom_up@@Base+0x6a0>
   14cac:	cmp	r0, #0
   14cb0:	bne	14d44 <main@@Base+0x4e4>
   14cb4:	ldr	r0, [sp, #24]
   14cb8:	ldr	r1, [fp, #12]
   14cbc:	bl	12c58 <create_monster_bottom_up@@Base+0x70c>
   14cc0:	cmp	r0, #0
   14cc4:	bne	14d44 <main@@Base+0x4e4>
   14cc8:	ldr	r0, [sp, #24]
   14ccc:	ldr	r1, [fp, #20]
   14cd0:	bl	12d48 <create_monster_bottom_up@@Base+0x7fc>
   14cd4:	cmp	r0, #0
   14cd8:	bne	14d44 <main@@Base+0x4e4>
   14cdc:	ldr	r0, [sp, #24]
   14ce0:	ldr	r1, [sp, #28]
   14ce4:	ldr	r2, [sp, #32]
   14ce8:	bl	14dec <main@@Base+0x58c>
   14cec:	cmp	r0, #0
   14cf0:	bne	14d44 <main@@Base+0x4e4>
   14cf4:	ldr	r0, [sp, #24]
   14cf8:	ldrsh	r1, [sp, #18]
   14cfc:	bl	14e70 <main@@Base+0x610>
   14d00:	cmp	r0, #0
   14d04:	bne	14d44 <main@@Base+0x4e4>
   14d08:	ldr	r0, [sp, #24]
   14d0c:	ldrsh	r1, [sp, #16]
   14d10:	bl	12b64 <create_monster_bottom_up@@Base+0x618>
   14d14:	cmp	r0, #0
   14d18:	bne	14d44 <main@@Base+0x4e4>
   14d1c:	ldr	r0, [sp, #24]
   14d20:	ldrsb	r1, [sp, #15]
   14d24:	bl	12cc4 <create_monster_bottom_up@@Base+0x778>
   14d28:	cmp	r0, #0
   14d2c:	bne	14d44 <main@@Base+0x4e4>
   14d30:	ldr	r0, [sp, #24]
   14d34:	ldrb	r1, [sp, #28]
   14d38:	bl	14ef4 <main@@Base+0x694>
   14d3c:	cmp	r0, #0
   14d40:	beq	14d50 <main@@Base+0x4f0>
   14d44:	movw	r0, #0
   14d48:	str	r0, [fp, #-20]	; 0xffffffec
   14d4c:	b	14d5c <main@@Base+0x4fc>
   14d50:	ldr	r0, [sp, #24]
   14d54:	bl	14f80 <main@@Base+0x720>
   14d58:	str	r0, [fp, #-20]	; 0xffffffec
   14d5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d60:	sub	sp, fp, #16
   14d64:	pop	{r4, r5, r6, r7, fp, pc}
   14d68:	push	{fp, lr}
   14d6c:	mov	fp, sp
   14d70:	sub	sp, sp, #8
   14d74:	str	r0, [sp, #4]
   14d78:	ldr	r0, [sp, #4]
   14d7c:	movw	r1, #10
   14d80:	bl	180d8 <flatcc_builder_start_table@@Base>
   14d84:	mov	sp, fp
   14d88:	pop	{fp, pc}
   14d8c:	push	{fp, lr}
   14d90:	mov	fp, sp
   14d94:	sub	sp, sp, #24
   14d98:	str	r0, [fp, #-8]
   14d9c:	str	r1, [sp, #12]
   14da0:	ldr	r0, [fp, #-8]
   14da4:	bl	14ff0 <main@@Base+0x790>
   14da8:	str	r0, [sp, #8]
   14dac:	ldr	r0, [sp, #8]
   14db0:	movw	r1, #0
   14db4:	cmp	r0, r1
   14db8:	bne	14dc8 <main@@Base+0x568>
   14dbc:	mvn	r0, #0
   14dc0:	str	r0, [fp, #-4]
   14dc4:	b	14de0 <main@@Base+0x580>
   14dc8:	ldr	r0, [sp, #8]
   14dcc:	ldr	r1, [sp, #12]
   14dd0:	bl	15020 <main@@Base+0x7c0>
   14dd4:	movw	r1, #0
   14dd8:	str	r1, [fp, #-4]
   14ddc:	str	r0, [sp, #4]
   14de0:	ldr	r0, [fp, #-4]
   14de4:	mov	sp, fp
   14de8:	pop	{fp, pc}
   14dec:	push	{fp, lr}
   14df0:	mov	fp, sp
   14df4:	sub	sp, sp, #24
   14df8:	str	r1, [sp, #12]
   14dfc:	str	r2, [sp, #16]
   14e00:	str	r0, [sp, #8]
   14e04:	ldrb	r0, [sp, #12]
   14e08:	cmp	r0, #0
   14e0c:	bne	14e1c <main@@Base+0x5bc>
   14e10:	movw	r0, #0
   14e14:	str	r0, [fp, #-4]
   14e18:	b	14e64 <main@@Base+0x604>
   14e1c:	ldr	r0, [sp, #8]
   14e20:	movw	r1, #9
   14e24:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   14e28:	str	r0, [sp, #4]
   14e2c:	movw	r1, #0
   14e30:	cmp	r0, r1
   14e34:	beq	14e50 <main@@Base+0x5f0>
   14e38:	ldr	r0, [sp, #16]
   14e3c:	ldr	r1, [sp, #4]
   14e40:	str	r0, [r1]
   14e44:	movw	r0, #0
   14e48:	str	r0, [sp]
   14e4c:	b	14e5c <main@@Base+0x5fc>
   14e50:	mvn	r0, #0
   14e54:	str	r0, [sp]
   14e58:	b	14e5c <main@@Base+0x5fc>
   14e5c:	ldr	r0, [sp]
   14e60:	str	r0, [fp, #-4]
   14e64:	ldr	r0, [fp, #-4]
   14e68:	mov	sp, fp
   14e6c:	pop	{fp, pc}
   14e70:	push	{fp, lr}
   14e74:	mov	fp, sp
   14e78:	sub	sp, sp, #24
   14e7c:	str	r0, [fp, #-8]
   14e80:	strh	r1, [fp, #-10]
   14e84:	ldrsh	r0, [fp, #-10]
   14e88:	cmp	r0, #150	; 0x96
   14e8c:	bne	14e9c <main@@Base+0x63c>
   14e90:	movw	r0, #0
   14e94:	str	r0, [fp, #-4]
   14e98:	b	14ee8 <main@@Base+0x688>
   14e9c:	ldr	r0, [fp, #-8]
   14ea0:	movw	r1, #1
   14ea4:	movw	r2, #2
   14ea8:	movw	r3, #2
   14eac:	uxth	r3, r3
   14eb0:	bl	19990 <flatcc_builder_table_add@@Base>
   14eb4:	str	r0, [sp, #8]
   14eb8:	movw	r1, #0
   14ebc:	cmp	r0, r1
   14ec0:	bne	14ed0 <main@@Base+0x670>
   14ec4:	mvn	r0, #0
   14ec8:	str	r0, [fp, #-4]
   14ecc:	b	14ee8 <main@@Base+0x688>
   14ed0:	ldr	r0, [sp, #8]
   14ed4:	ldrsh	r1, [fp, #-10]
   14ed8:	bl	14b90 <main@@Base+0x330>
   14edc:	movw	r1, #0
   14ee0:	str	r1, [fp, #-4]
   14ee4:	str	r0, [sp, #4]
   14ee8:	ldr	r0, [fp, #-4]
   14eec:	mov	sp, fp
   14ef0:	pop	{fp, pc}
   14ef4:	push	{fp, lr}
   14ef8:	mov	fp, sp
   14efc:	sub	sp, sp, #24
   14f00:	str	r0, [fp, #-8]
   14f04:	strb	r1, [fp, #-9]
   14f08:	ldrb	r0, [fp, #-9]
   14f0c:	cmp	r0, #0
   14f10:	bne	14f20 <main@@Base+0x6c0>
   14f14:	movw	r0, #0
   14f18:	str	r0, [fp, #-4]
   14f1c:	b	14f74 <main@@Base+0x714>
   14f20:	ldr	r0, [fp, #-8]
   14f24:	movw	r1, #8
   14f28:	movw	r2, #1
   14f2c:	movw	r3, #1
   14f30:	uxth	r3, r3
   14f34:	bl	19990 <flatcc_builder_table_add@@Base>
   14f38:	str	r0, [sp, #8]
   14f3c:	movw	r1, #0
   14f40:	cmp	r0, r1
   14f44:	beq	14f60 <main@@Base+0x700>
   14f48:	ldrb	r0, [fp, #-9]
   14f4c:	ldr	r1, [sp, #8]
   14f50:	strb	r0, [r1]
   14f54:	movw	r0, #0
   14f58:	str	r0, [sp, #4]
   14f5c:	b	14f6c <main@@Base+0x70c>
   14f60:	mvn	r0, #0
   14f64:	str	r0, [sp, #4]
   14f68:	b	14f6c <main@@Base+0x70c>
   14f6c:	ldr	r0, [sp, #4]
   14f70:	str	r0, [fp, #-4]
   14f74:	ldr	r0, [fp, #-4]
   14f78:	mov	sp, fp
   14f7c:	pop	{fp, pc}
   14f80:	push	{fp, lr}
   14f84:	mov	fp, sp
   14f88:	sub	sp, sp, #8
   14f8c:	ldr	r1, [pc, #76]	; 14fe0 <main@@Base+0x780>
   14f90:	add	r1, pc, r1
   14f94:	str	r0, [sp, #4]
   14f98:	ldr	r0, [sp, #4]
   14f9c:	movw	r2, #0
   14fa0:	bl	18c60 <flatcc_builder_check_required@@Base>
   14fa4:	cmp	r0, #0
   14fa8:	beq	14fb0 <main@@Base+0x750>
   14fac:	b	14fd0 <main@@Base+0x770>
   14fb0:	ldr	r0, [pc, #44]	; 14fe4 <main@@Base+0x784>
   14fb4:	add	r0, pc, r0
   14fb8:	ldr	r1, [pc, #40]	; 14fe8 <main@@Base+0x788>
   14fbc:	add	r1, pc, r1
   14fc0:	ldr	r2, [pc, #36]	; 14fec <main@@Base+0x78c>
   14fc4:	add	r3, pc, r2
   14fc8:	movw	r2, #50	; 0x32
   14fcc:	bl	12450 <__assert_fail@plt>
   14fd0:	ldr	r0, [sp, #4]
   14fd4:	bl	18d50 <flatcc_builder_end_table@@Base>
   14fd8:	mov	sp, fp
   14fdc:	pop	{fp, pc}
   14fe0:	andeq	r7, r0, r4, ror #19
   14fe4:	andeq	r7, r0, r4, ror #5
   14fe8:	andeq	r7, r0, ip, lsl r2
   14fec:	andeq	r7, r0, r3, ror r3
   14ff0:	push	{fp, lr}
   14ff4:	mov	fp, sp
   14ff8:	sub	sp, sp, #8
   14ffc:	str	r0, [sp, #4]
   15000:	ldr	r0, [sp, #4]
   15004:	movw	r1, #0
   15008:	movw	r2, #12
   1500c:	movw	r3, #4
   15010:	uxth	r3, r3
   15014:	bl	19990 <flatcc_builder_table_add@@Base>
   15018:	mov	sp, fp
   1501c:	pop	{fp, pc}
   15020:	push	{fp, lr}
   15024:	mov	fp, sp
   15028:	sub	sp, sp, #24
   1502c:	str	r0, [fp, #-4]
   15030:	str	r1, [fp, #-8]
   15034:	ldr	r0, [fp, #-4]
   15038:	ldr	r1, [fp, #-8]
   1503c:	bl	15094 <main@@Base+0x834>
   15040:	ldr	r1, [fp, #-4]
   15044:	add	r1, r1, #4
   15048:	ldr	lr, [fp, #-8]
   1504c:	add	lr, lr, #4
   15050:	str	r0, [sp, #12]
   15054:	mov	r0, r1
   15058:	mov	r1, lr
   1505c:	bl	15094 <main@@Base+0x834>
   15060:	ldr	r1, [fp, #-4]
   15064:	add	r1, r1, #8
   15068:	ldr	lr, [fp, #-8]
   1506c:	add	lr, lr, #8
   15070:	str	r0, [sp, #8]
   15074:	mov	r0, r1
   15078:	mov	r1, lr
   1507c:	bl	15094 <main@@Base+0x834>
   15080:	ldr	r1, [fp, #-4]
   15084:	str	r0, [sp, #4]
   15088:	mov	r0, r1
   1508c:	mov	sp, fp
   15090:	pop	{fp, pc}
   15094:	push	{fp, lr}
   15098:	mov	fp, sp
   1509c:	sub	sp, sp, #8
   150a0:	str	r0, [sp, #4]
   150a4:	str	r1, [sp]
   150a8:	ldr	r0, [sp]
   150ac:	vldr	s0, [r0]
   150b0:	bl	150c8 <main@@Base+0x868>
   150b4:	ldr	r0, [sp, #4]
   150b8:	vstr	s0, [r0]
   150bc:	ldr	r0, [sp, #4]
   150c0:	mov	sp, fp
   150c4:	pop	{fp, pc}
   150c8:	sub	sp, sp, #8
   150cc:	vstr	s0, [sp, #4]
   150d0:	vldr	s0, [sp, #4]
   150d4:	vstr	s0, [sp]
   150d8:	ldr	r0, [sp]
   150dc:	str	r0, [sp]
   150e0:	vldr	s0, [sp]
   150e4:	add	sp, sp, #8
   150e8:	bx	lr
   150ec:	push	{fp, lr}
   150f0:	mov	fp, sp
   150f4:	sub	sp, sp, #32
   150f8:	str	r0, [fp, #-4]
   150fc:	vstr	s0, [fp, #-8]
   15100:	vstr	s1, [fp, #-12]
   15104:	vstr	s2, [sp, #16]
   15108:	ldr	r0, [fp, #-4]
   1510c:	vldr	s0, [fp, #-8]
   15110:	bl	15158 <main@@Base+0x8f8>
   15114:	ldr	lr, [fp, #-4]
   15118:	add	lr, lr, #4
   1511c:	vldr	s0, [fp, #-12]
   15120:	str	r0, [sp, #12]
   15124:	mov	r0, lr
   15128:	bl	15158 <main@@Base+0x8f8>
   1512c:	ldr	lr, [fp, #-4]
   15130:	add	lr, lr, #8
   15134:	vldr	s0, [sp, #16]
   15138:	str	r0, [sp, #8]
   1513c:	mov	r0, lr
   15140:	bl	15158 <main@@Base+0x8f8>
   15144:	ldr	lr, [fp, #-4]
   15148:	str	r0, [sp, #4]
   1514c:	mov	r0, lr
   15150:	mov	sp, fp
   15154:	pop	{fp, pc}
   15158:	push	{fp, lr}
   1515c:	mov	fp, sp
   15160:	sub	sp, sp, #8
   15164:	str	r0, [sp, #4]
   15168:	vstr	s0, [sp]
   1516c:	vldr	s0, [sp]
   15170:	bl	150c8 <main@@Base+0x868>
   15174:	ldr	r0, [sp, #4]
   15178:	vstr	s0, [r0]
   1517c:	ldr	r0, [sp, #4]
   15180:	mov	sp, fp
   15184:	pop	{fp, pc}
   15188:	push	{fp, lr}
   1518c:	mov	fp, sp
   15190:	sub	sp, sp, #8
   15194:	str	r0, [sp, #4]
   15198:	strb	r1, [sp, #3]
   1519c:	ldrsb	r0, [sp, #3]
   151a0:	bl	151b8 <main@@Base+0x958>
   151a4:	ldr	r1, [sp, #4]
   151a8:	strb	r0, [r1]
   151ac:	ldr	r0, [sp, #4]
   151b0:	mov	sp, fp
   151b4:	pop	{fp, pc}
   151b8:	sub	sp, sp, #4
   151bc:	strb	r0, [sp, #3]
   151c0:	ldrsb	r0, [sp, #3]
   151c4:	add	sp, sp, #4
   151c8:	bx	lr
   151cc:	push	{fp, lr}
   151d0:	mov	fp, sp
   151d4:	sub	sp, sp, #16
   151d8:	str	r0, [fp, #-4]
   151dc:	str	r1, [sp, #8]
   151e0:	ldr	r0, [sp, #8]
   151e4:	cmp	r0, #0
   151e8:	beq	15200 <main@@Base+0x9a0>
   151ec:	ldr	r0, [fp, #-4]
   151f0:	ldr	r1, [sp, #8]
   151f4:	bl	17534 <flatcc_builder_offset_vector_push@@Base>
   151f8:	str	r0, [sp, #4]
   151fc:	b	1520c <main@@Base+0x9ac>
   15200:	movw	r0, #0
   15204:	str	r0, [sp, #4]
   15208:	b	1520c <main@@Base+0x9ac>
   1520c:	ldr	r0, [sp, #4]
   15210:	mov	sp, fp
   15214:	pop	{fp, pc}
   15218:	push	{fp, lr}
   1521c:	mov	fp, sp
   15220:	sub	sp, sp, #32
   15224:	str	r0, [fp, #-8]
   15228:	str	r1, [fp, #-12]
   1522c:	movw	r0, #0
   15230:	str	r0, [sp, #12]
   15234:	ldr	r1, [fp, #-12]
   15238:	cmp	r1, r0
   1523c:	bne	1524c <main@@Base+0x9ec>
   15240:	movw	r0, #1
   15244:	str	r0, [fp, #-4]
   15248:	b	152b8 <main@@Base+0xa58>
   1524c:	add	r0, sp, #12
   15250:	ldr	r1, [fp, #-12]
   15254:	movw	r2, #4
   15258:	bl	1242c <strncpy@plt>
   1525c:	ldr	r1, [sp, #12]
   15260:	str	r0, [sp, #8]
   15264:	mov	r0, r1
   15268:	bl	152e8 <main@@Base+0xa88>
   1526c:	str	r0, [sp, #12]
   15270:	ldr	r0, [fp, #-8]
   15274:	add	r0, r0, #4
   15278:	bl	152fc <main@@Base+0xa9c>
   1527c:	str	r0, [sp, #16]
   15280:	ldr	r0, [sp, #12]
   15284:	cmp	r0, #0
   15288:	movw	r0, #1
   1528c:	str	r0, [sp, #4]
   15290:	beq	152ac <main@@Base+0xa4c>
   15294:	ldr	r0, [sp, #16]
   15298:	ldr	r1, [sp, #12]
   1529c:	cmp	r0, r1
   152a0:	movw	r0, #0
   152a4:	moveq	r0, #1
   152a8:	str	r0, [sp, #4]
   152ac:	ldr	r0, [sp, #4]
   152b0:	and	r0, r0, #1
   152b4:	str	r0, [fp, #-4]
   152b8:	ldr	r0, [fp, #-4]
   152bc:	mov	sp, fp
   152c0:	pop	{fp, pc}
   152c4:	push	{fp, lr}
   152c8:	mov	fp, sp
   152cc:	sub	sp, sp, #8
   152d0:	str	r0, [sp, #4]
   152d4:	ldr	r0, [sp, #4]
   152d8:	ldr	r0, [r0]
   152dc:	bl	15334 <main@@Base+0xad4>
   152e0:	mov	sp, fp
   152e4:	pop	{fp, pc}
   152e8:	sub	sp, sp, #4
   152ec:	str	r0, [sp]
   152f0:	ldr	r0, [sp]
   152f4:	add	sp, sp, #4
   152f8:	bx	lr
   152fc:	push	{fp, lr}
   15300:	mov	fp, sp
   15304:	sub	sp, sp, #8
   15308:	str	r0, [sp, #4]
   1530c:	ldr	r0, [sp, #4]
   15310:	ldr	r0, [r0]
   15314:	bl	15320 <main@@Base+0xac0>
   15318:	mov	sp, fp
   1531c:	pop	{fp, pc}
   15320:	sub	sp, sp, #4
   15324:	str	r0, [sp]
   15328:	ldr	r0, [sp]
   1532c:	add	sp, sp, #4
   15330:	bx	lr
   15334:	sub	sp, sp, #4
   15338:	str	r0, [sp]
   1533c:	ldr	r0, [sp]
   15340:	add	sp, sp, #4
   15344:	bx	lr
   15348:	push	{fp, lr}
   1534c:	mov	fp, sp
   15350:	sub	sp, sp, #8
   15354:	str	r0, [sp, #4]
   15358:	ldr	r0, [sp, #4]
   1535c:	ldr	r0, [r0]
   15360:	bl	153bc <main@@Base+0xb5c>
   15364:	mov	sp, fp
   15368:	pop	{fp, pc}
   1536c:	push	{fp, lr}
   15370:	mov	fp, sp
   15374:	sub	sp, sp, #8
   15378:	str	r0, [sp, #4]
   1537c:	ldr	r0, [sp, #4]
   15380:	ldrh	r0, [r0]
   15384:	bl	153d0 <main@@Base+0xb70>
   15388:	uxth	r0, r0
   1538c:	mov	sp, fp
   15390:	pop	{fp, pc}
   15394:	push	{fp, lr}
   15398:	mov	fp, sp
   1539c:	sub	sp, sp, #8
   153a0:	str	r0, [sp, #4]
   153a4:	ldr	r0, [sp, #4]
   153a8:	ldrsh	r0, [r0]
   153ac:	bl	153e4 <main@@Base+0xb84>
   153b0:	sxth	r0, r0
   153b4:	mov	sp, fp
   153b8:	pop	{fp, pc}
   153bc:	sub	sp, sp, #4
   153c0:	str	r0, [sp]
   153c4:	ldr	r0, [sp]
   153c8:	add	sp, sp, #4
   153cc:	bx	lr
   153d0:	sub	sp, sp, #4
   153d4:	strh	r0, [sp, #2]
   153d8:	ldrh	r0, [sp, #2]
   153dc:	add	sp, sp, #4
   153e0:	bx	lr
   153e4:	sub	sp, sp, #4
   153e8:	strh	r0, [sp, #2]
   153ec:	ldrsh	r0, [sp, #2]
   153f0:	add	sp, sp, #4
   153f4:	bx	lr
   153f8:	push	{fp, lr}
   153fc:	mov	fp, sp
   15400:	sub	sp, sp, #8
   15404:	str	r0, [sp, #4]
   15408:	ldr	r0, [sp, #4]
   1540c:	vldr	s0, [r0]
   15410:	bl	1541c <main@@Base+0xbbc>
   15414:	mov	sp, fp
   15418:	pop	{fp, pc}
   1541c:	sub	sp, sp, #8
   15420:	vstr	s0, [sp, #4]
   15424:	vldr	s0, [sp, #4]
   15428:	vstr	s0, [sp]
   1542c:	ldr	r0, [sp]
   15430:	str	r0, [sp]
   15434:	vldr	s0, [sp]
   15438:	add	sp, sp, #8
   1543c:	bx	lr
   15440:	push	{fp, lr}
   15444:	mov	fp, sp
   15448:	sub	sp, sp, #8
   1544c:	str	r0, [sp, #4]
   15450:	str	r1, [sp]
   15454:	ldr	r0, [sp]
   15458:	vldr	s0, [r0]
   1545c:	bl	1541c <main@@Base+0xbbc>
   15460:	ldr	r0, [sp, #4]
   15464:	vstr	s0, [r0]
   15468:	ldr	r0, [sp, #4]
   1546c:	mov	sp, fp
   15470:	pop	{fp, pc}
   15474:	push	{fp, lr}
   15478:	mov	fp, sp
   1547c:	sub	sp, sp, #8
   15480:	str	r0, [sp, #4]
   15484:	ldr	r0, [sp, #4]
   15488:	movw	r1, #0
   1548c:	cmp	r0, r1
   15490:	beq	154ac <main@@Base+0xc4c>
   15494:	ldr	r0, [sp, #4]
   15498:	mvn	r1, #3
   1549c:	add	r0, r0, r1
   154a0:	bl	152c4 <main@@Base+0xa64>
   154a4:	str	r0, [sp]
   154a8:	b	154b8 <main@@Base+0xc58>
   154ac:	movw	r0, #0
   154b0:	str	r0, [sp]
   154b4:	b	154b8 <main@@Base+0xc58>
   154b8:	ldr	r0, [sp]
   154bc:	mov	sp, fp
   154c0:	pop	{fp, pc}
   154c4:	push	{fp, lr}
   154c8:	mov	fp, sp
   154cc:	sub	sp, sp, #8
   154d0:	str	r0, [sp, #4]
   154d4:	ldr	r0, [sp, #4]
   154d8:	ldrb	r0, [r0]
   154dc:	bl	154ec <main@@Base+0xc8c>
   154e0:	and	r0, r0, #255	; 0xff
   154e4:	mov	sp, fp
   154e8:	pop	{fp, pc}
   154ec:	sub	sp, sp, #4
   154f0:	strb	r0, [sp, #3]
   154f4:	ldrb	r0, [sp, #3]
   154f8:	add	sp, sp, #4
   154fc:	bx	lr
   15500:	push	{fp, lr}
   15504:	mov	fp, sp
   15508:	sub	sp, sp, #8
   1550c:	str	r0, [sp, #4]
   15510:	ldr	r0, [sp, #4]
   15514:	ldrb	r0, [r0]
   15518:	bl	15528 <main@@Base+0xcc8>
   1551c:	and	r0, r0, #255	; 0xff
   15520:	mov	sp, fp
   15524:	pop	{fp, pc}
   15528:	sub	sp, sp, #4
   1552c:	strb	r0, [sp, #3]
   15530:	ldrb	r0, [sp, #3]
   15534:	add	sp, sp, #4
   15538:	bx	lr

0001553c <flatcc_builder_default_alloc@@Base>:
   1553c:	push	{fp, lr}
   15540:	mov	fp, sp
   15544:	sub	sp, sp, #40	; 0x28
   15548:	ldr	ip, [fp, #8]
   1554c:	str	r0, [fp, #-8]
   15550:	str	r1, [fp, #-12]
   15554:	str	r2, [fp, #-16]
   15558:	str	r3, [sp, #20]
   1555c:	ldr	r0, [fp, #-16]
   15560:	cmp	r0, #0
   15564:	str	ip, [sp, #8]
   15568:	bne	155ac <flatcc_builder_default_alloc@@Base+0x70>
   1556c:	ldr	r0, [fp, #-12]
   15570:	ldr	r0, [r0]
   15574:	movw	r1, #0
   15578:	cmp	r0, r1
   1557c:	beq	155a0 <flatcc_builder_default_alloc@@Base+0x64>
   15580:	ldr	r0, [fp, #-12]
   15584:	ldr	r0, [r0]
   15588:	bl	123b4 <free@plt>
   1558c:	ldr	r0, [fp, #-12]
   15590:	movw	lr, #0
   15594:	str	lr, [r0]
   15598:	ldr	r0, [fp, #-12]
   1559c:	str	lr, [r0, #4]
   155a0:	movw	r0, #0
   155a4:	str	r0, [fp, #-4]
   155a8:	b	15718 <flatcc_builder_default_alloc@@Base+0x1dc>
   155ac:	ldr	r0, [fp, #8]
   155b0:	sub	r0, r0, #1
   155b4:	cmp	r0, #6
   155b8:	str	r0, [sp, #4]
   155bc:	bhi	1561c <flatcc_builder_default_alloc@@Base+0xe0>
   155c0:	add	r0, pc, #8
   155c4:	ldr	r1, [sp, #4]
   155c8:	ldr	r2, [r0, r1, lsl #2]
   155cc:	add	pc, r0, r2
   155d0:	andeq	r0, r0, ip, lsl r0
   155d4:	andeq	r0, r0, ip, asr #32
   155d8:	andeq	r0, r0, ip, asr #32
   155dc:	andeq	r0, r0, r4, lsr r0
   155e0:	andeq	r0, r0, r8, lsr #32
   155e4:	andeq	r0, r0, ip, asr #32
   155e8:	andeq	r0, r0, r0, asr #32
   155ec:	movw	r0, #256	; 0x100
   155f0:	str	r0, [sp, #12]
   155f4:	b	15624 <flatcc_builder_default_alloc@@Base+0xe8>
   155f8:	ldr	r0, [fp, #-16]
   155fc:	str	r0, [sp, #12]
   15600:	b	15624 <flatcc_builder_default_alloc@@Base+0xe8>
   15604:	movw	r0, #288	; 0x120
   15608:	str	r0, [sp, #12]
   1560c:	b	15624 <flatcc_builder_default_alloc@@Base+0xe8>
   15610:	movw	r0, #64	; 0x40
   15614:	str	r0, [sp, #12]
   15618:	b	15624 <flatcc_builder_default_alloc@@Base+0xe8>
   1561c:	movw	r0, #32
   15620:	str	r0, [sp, #12]
   15624:	b	15628 <flatcc_builder_default_alloc@@Base+0xec>
   15628:	ldr	r0, [sp, #12]
   1562c:	ldr	r1, [fp, #-16]
   15630:	cmp	r0, r1
   15634:	bcs	15648 <flatcc_builder_default_alloc@@Base+0x10c>
   15638:	ldr	r0, [sp, #12]
   1563c:	lsl	r0, r0, #1
   15640:	str	r0, [sp, #12]
   15644:	b	15628 <flatcc_builder_default_alloc@@Base+0xec>
   15648:	ldr	r0, [fp, #-16]
   1564c:	ldr	r1, [fp, #-12]
   15650:	ldr	r1, [r1, #4]
   15654:	cmp	r0, r1
   15658:	bhi	15680 <flatcc_builder_default_alloc@@Base+0x144>
   1565c:	ldr	r0, [fp, #-12]
   15660:	ldr	r0, [r0, #4]
   15664:	lsr	r0, r0, #1
   15668:	ldr	r1, [sp, #12]
   1566c:	cmp	r0, r1
   15670:	bcc	15680 <flatcc_builder_default_alloc@@Base+0x144>
   15674:	movw	r0, #0
   15678:	str	r0, [fp, #-4]
   1567c:	b	15718 <flatcc_builder_default_alloc@@Base+0x1dc>
   15680:	ldr	r0, [fp, #-12]
   15684:	ldr	r0, [r0]
   15688:	ldr	r1, [sp, #12]
   1568c:	bl	123d8 <realloc@plt>
   15690:	str	r0, [sp, #16]
   15694:	movw	r1, #0
   15698:	cmp	r0, r1
   1569c:	bne	156ac <flatcc_builder_default_alloc@@Base+0x170>
   156a0:	mvn	r0, #0
   156a4:	str	r0, [fp, #-4]
   156a8:	b	15718 <flatcc_builder_default_alloc@@Base+0x1dc>
   156ac:	ldr	r0, [sp, #20]
   156b0:	cmp	r0, #0
   156b4:	beq	156f8 <flatcc_builder_default_alloc@@Base+0x1bc>
   156b8:	ldr	r0, [fp, #-12]
   156bc:	ldr	r0, [r0, #4]
   156c0:	ldr	r1, [sp, #12]
   156c4:	cmp	r0, r1
   156c8:	bcs	156f8 <flatcc_builder_default_alloc@@Base+0x1bc>
   156cc:	ldr	r0, [sp, #16]
   156d0:	ldr	r1, [fp, #-12]
   156d4:	ldr	r1, [r1, #4]
   156d8:	add	r0, r0, r1
   156dc:	ldr	r1, [sp, #12]
   156e0:	ldr	r2, [fp, #-12]
   156e4:	ldr	r2, [r2, #4]
   156e8:	sub	r2, r1, r2
   156ec:	movw	r1, #0
   156f0:	and	r1, r1, #255	; 0xff
   156f4:	bl	12420 <memset@plt>
   156f8:	ldr	r0, [sp, #16]
   156fc:	ldr	r1, [fp, #-12]
   15700:	str	r0, [r1]
   15704:	ldr	r0, [sp, #12]
   15708:	ldr	r1, [fp, #-12]
   1570c:	str	r0, [r1, #4]
   15710:	movw	r0, #0
   15714:	str	r0, [fp, #-4]
   15718:	ldr	r0, [fp, #-4]
   1571c:	mov	sp, fp
   15720:	pop	{fp, pc}

00015724 <flatcc_builder_flush_vtable_cache@@Base>:
   15724:	push	{fp, lr}
   15728:	mov	fp, sp
   1572c:	sub	sp, sp, #8
   15730:	str	r0, [sp, #4]
   15734:	ldr	r0, [sp, #4]
   15738:	add	r0, r0, #52	; 0x34
   1573c:	add	r0, r0, #40	; 0x28
   15740:	str	r0, [sp]
   15744:	ldr	r0, [sp, #4]
   15748:	ldr	r0, [r0, #116]	; 0x74
   1574c:	cmp	r0, #0
   15750:	bne	15758 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   15754:	b	1578c <flatcc_builder_flush_vtable_cache@@Base+0x68>
   15758:	ldr	r0, [sp]
   1575c:	ldr	r0, [r0]
   15760:	ldr	r1, [sp]
   15764:	ldr	r2, [r1, #4]
   15768:	movw	r1, #0
   1576c:	and	r1, r1, #255	; 0xff
   15770:	bl	12420 <memset@plt>
   15774:	ldr	r0, [sp, #4]
   15778:	movw	r1, #16
   1577c:	str	r1, [r0, #124]	; 0x7c
   15780:	ldr	r0, [sp, #4]
   15784:	movw	r1, #0
   15788:	str	r1, [r0, #120]	; 0x78
   1578c:	mov	sp, fp
   15790:	pop	{fp, pc}

00015794 <flatcc_builder_custom_init@@Base>:
   15794:	push	{fp, lr}
   15798:	mov	fp, sp
   1579c:	sub	sp, sp, #24
   157a0:	ldr	ip, [fp, #8]
   157a4:	str	r0, [fp, #-4]
   157a8:	str	r1, [fp, #-8]
   157ac:	str	r2, [sp, #12]
   157b0:	str	r3, [sp, #8]
   157b4:	ldr	r0, [fp, #-4]
   157b8:	movw	r1, #0
   157bc:	and	r1, r1, #255	; 0xff
   157c0:	movw	r2, #232	; 0xe8
   157c4:	str	ip, [sp, #4]
   157c8:	bl	12420 <memset@plt>
   157cc:	ldr	r0, [fp, #-8]
   157d0:	movw	r1, #0
   157d4:	cmp	r0, r1
   157d8:	bne	15800 <flatcc_builder_custom_init@@Base+0x6c>
   157dc:	ldr	r0, [pc, #116]	; 15858 <flatcc_builder_custom_init@@Base+0xc4>
   157e0:	ldr	r0, [pc, r0]
   157e4:	ldr	r1, [fp, #-4]
   157e8:	movw	r2, #1
   157ec:	str	r2, [r1, #184]	; 0xb8
   157f0:	str	r0, [fp, #-8]
   157f4:	ldr	r0, [fp, #-4]
   157f8:	add	r0, r0, #188	; 0xbc
   157fc:	str	r0, [sp, #12]
   15800:	ldr	r0, [sp, #8]
   15804:	movw	r1, #0
   15808:	cmp	r0, r1
   1580c:	bne	1581c <flatcc_builder_custom_init@@Base+0x88>
   15810:	ldr	r0, [pc, #68]	; 1585c <flatcc_builder_custom_init@@Base+0xc8>
   15814:	ldr	r0, [pc, r0]
   15818:	str	r0, [sp, #8]
   1581c:	ldr	r0, [fp, #8]
   15820:	ldr	r1, [fp, #-4]
   15824:	str	r0, [r1, #40]	; 0x28
   15828:	ldr	r0, [sp, #8]
   1582c:	ldr	r1, [fp, #-4]
   15830:	str	r0, [r1, #48]	; 0x30
   15834:	ldr	r0, [sp, #12]
   15838:	ldr	r1, [fp, #-4]
   1583c:	str	r0, [r1, #36]	; 0x24
   15840:	ldr	r0, [fp, #-8]
   15844:	ldr	r1, [fp, #-4]
   15848:	str	r0, [r1, #44]	; 0x2c
   1584c:	movw	r0, #0
   15850:	mov	sp, fp
   15854:	pop	{fp, pc}
   15858:	andeq	r8, r1, r0, ror r8
   1585c:	andeq	r8, r1, r8, lsr r8

00015860 <flatcc_builder_init@@Base>:
   15860:	push	{fp, lr}
   15864:	mov	fp, sp
   15868:	sub	sp, sp, #16
   1586c:	str	r0, [fp, #-4]
   15870:	ldr	r0, [fp, #-4]
   15874:	movw	r1, #0
   15878:	str	r1, [sp, #8]
   1587c:	ldr	r2, [sp, #8]
   15880:	ldr	r3, [sp, #8]
   15884:	ldr	ip, [sp, #8]
   15888:	str	ip, [sp]
   1588c:	bl	15794 <flatcc_builder_custom_init@@Base>
   15890:	mov	sp, fp
   15894:	pop	{fp, pc}

00015898 <flatcc_builder_custom_reset@@Base>:
   15898:	push	{r4, sl, fp, lr}
   1589c:	add	fp, sp, #8
   158a0:	sub	sp, sp, #40	; 0x28
   158a4:	str	r0, [fp, #-16]
   158a8:	str	r1, [fp, #-20]	; 0xffffffec
   158ac:	str	r2, [sp, #24]
   158b0:	movw	r0, #0
   158b4:	str	r0, [sp, #16]
   158b8:	ldr	r0, [sp, #16]
   158bc:	cmp	r0, #8
   158c0:	bge	159cc <flatcc_builder_custom_reset@@Base+0x134>
   158c4:	ldr	r0, [fp, #-16]
   158c8:	add	r0, r0, #52	; 0x34
   158cc:	ldr	r1, [sp, #16]
   158d0:	add	r0, r0, r1, lsl #3
   158d4:	str	r0, [sp, #20]
   158d8:	ldr	r0, [sp, #20]
   158dc:	ldr	r0, [r0]
   158e0:	movw	r1, #0
   158e4:	cmp	r0, r1
   158e8:	beq	15980 <flatcc_builder_custom_reset@@Base+0xe8>
   158ec:	ldr	r0, [sp, #16]
   158f0:	cmp	r0, #5
   158f4:	beq	15960 <flatcc_builder_custom_reset@@Base+0xc8>
   158f8:	ldr	r0, [sp, #24]
   158fc:	cmp	r0, #0
   15900:	beq	15960 <flatcc_builder_custom_reset@@Base+0xc8>
   15904:	ldr	r0, [fp, #-16]
   15908:	ldr	r0, [r0, #48]	; 0x30
   1590c:	ldr	r1, [fp, #-16]
   15910:	ldr	r1, [r1, #40]	; 0x28
   15914:	ldr	r2, [sp, #20]
   15918:	ldr	r3, [sp, #16]
   1591c:	str	r0, [sp, #12]
   15920:	mov	r0, r1
   15924:	mov	r1, r2
   15928:	movw	r2, #1
   1592c:	str	r2, [sp, #8]
   15930:	ldr	ip, [sp, #8]
   15934:	str	r3, [sp, #4]
   15938:	mov	r3, ip
   1593c:	ldr	lr, [sp, #4]
   15940:	str	lr, [sp]
   15944:	ldr	r4, [sp, #12]
   15948:	blx	r4
   1594c:	cmp	r0, #0
   15950:	beq	15960 <flatcc_builder_custom_reset@@Base+0xc8>
   15954:	mvn	r0, #0
   15958:	str	r0, [fp, #-12]
   1595c:	b	15ac8 <flatcc_builder_custom_reset@@Base+0x230>
   15960:	ldr	r0, [sp, #20]
   15964:	ldr	r0, [r0]
   15968:	ldr	r1, [sp, #20]
   1596c:	ldr	r2, [r1, #4]
   15970:	movw	r1, #0
   15974:	and	r1, r1, #255	; 0xff
   15978:	bl	12420 <memset@plt>
   1597c:	b	159b8 <flatcc_builder_custom_reset@@Base+0x120>
   15980:	ldr	r0, [sp, #20]
   15984:	ldr	r0, [r0, #4]
   15988:	cmp	r0, #0
   1598c:	bne	15994 <flatcc_builder_custom_reset@@Base+0xfc>
   15990:	b	159b4 <flatcc_builder_custom_reset@@Base+0x11c>
   15994:	ldr	r0, [pc, #312]	; 15ad4 <flatcc_builder_custom_reset@@Base+0x23c>
   15998:	add	r0, pc, r0
   1599c:	ldr	r1, [pc, #308]	; 15ad8 <flatcc_builder_custom_reset@@Base+0x240>
   159a0:	add	r1, pc, r1
   159a4:	ldr	r2, [pc, #304]	; 15adc <flatcc_builder_custom_reset@@Base+0x244>
   159a8:	add	r3, pc, r2
   159ac:	movw	r2, #434	; 0x1b2
   159b0:	bl	12450 <__assert_fail@plt>
   159b4:	b	159b8 <flatcc_builder_custom_reset@@Base+0x120>
   159b8:	b	159bc <flatcc_builder_custom_reset@@Base+0x124>
   159bc:	ldr	r0, [sp, #16]
   159c0:	add	r0, r0, #1
   159c4:	str	r0, [sp, #16]
   159c8:	b	158b8 <flatcc_builder_custom_reset@@Base+0x20>
   159cc:	ldr	r0, [fp, #-16]
   159d0:	movw	r1, #0
   159d4:	str	r1, [r0, #120]	; 0x78
   159d8:	ldr	r0, [fp, #-16]
   159dc:	ldr	r0, [r0, #124]	; 0x7c
   159e0:	cmp	r0, #0
   159e4:	bls	159f4 <flatcc_builder_custom_reset@@Base+0x15c>
   159e8:	ldr	r0, [fp, #-16]
   159ec:	movw	r1, #16
   159f0:	str	r1, [r0, #124]	; 0x7c
   159f4:	ldr	r0, [fp, #-16]
   159f8:	movw	r1, #0
   159fc:	strh	r1, [r0, #128]	; 0x80
   15a00:	ldr	r0, [fp, #-16]
   15a04:	movw	r1, #0
   15a08:	str	r1, [r0, #136]	; 0x88
   15a0c:	ldr	r0, [fp, #-16]
   15a10:	str	r1, [r0, #140]	; 0x8c
   15a14:	ldr	r0, [fp, #-16]
   15a18:	str	r1, [r0, #156]	; 0x9c
   15a1c:	ldr	r0, [fp, #-16]
   15a20:	str	r1, [r0, #160]	; 0xa0
   15a24:	ldr	r0, [fp, #-16]
   15a28:	str	r1, [r0, #20]
   15a2c:	ldr	r0, [fp, #-16]
   15a30:	str	r1, [r0, #24]
   15a34:	ldr	r0, [fp, #-16]
   15a38:	str	r1, [r0, #148]	; 0x94
   15a3c:	ldr	r0, [fp, #-16]
   15a40:	str	r1, [r0, #152]	; 0x98
   15a44:	ldr	r0, [fp, #-16]
   15a48:	ldr	r0, [r0, #60]	; 0x3c
   15a4c:	ldr	r2, [fp, #-16]
   15a50:	str	r0, [r2, #16]
   15a54:	ldr	r0, [fp, #-16]
   15a58:	ldr	r0, [r0, #76]	; 0x4c
   15a5c:	ldr	r2, [fp, #-16]
   15a60:	str	r0, [r2]
   15a64:	ldr	r0, [fp, #-16]
   15a68:	ldr	r0, [r0, #52]	; 0x34
   15a6c:	ldr	r2, [fp, #-16]
   15a70:	str	r0, [r2, #4]
   15a74:	ldr	r0, [fp, #-16]
   15a78:	str	r1, [r0, #32]
   15a7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15a80:	cmp	r0, #0
   15a84:	beq	15aa4 <flatcc_builder_custom_reset@@Base+0x20c>
   15a88:	ldr	r0, [fp, #-16]
   15a8c:	movw	r1, #0
   15a90:	str	r1, [r0, #172]	; 0xac
   15a94:	ldr	r0, [fp, #-16]
   15a98:	str	r1, [r0, #176]	; 0xb0
   15a9c:	ldr	r0, [fp, #-16]
   15aa0:	str	r1, [r0, #180]	; 0xb4
   15aa4:	ldr	r0, [fp, #-16]
   15aa8:	ldr	r0, [r0, #184]	; 0xb8
   15aac:	cmp	r0, #0
   15ab0:	beq	15ac0 <flatcc_builder_custom_reset@@Base+0x228>
   15ab4:	ldr	r0, [fp, #-16]
   15ab8:	add	r0, r0, #188	; 0xbc
   15abc:	bl	1b470 <flatcc_emitter_reset@@Base>
   15ac0:	movw	r0, #0
   15ac4:	str	r0, [fp, #-12]
   15ac8:	ldr	r0, [fp, #-12]
   15acc:	sub	sp, fp, #8
   15ad0:	pop	{r4, sl, fp, pc}
   15ad4:	ldrdeq	r7, [r0], -lr
   15ad8:	andeq	r7, r0, r8, ror #3
   15adc:	andeq	r7, r0, sp, lsr r2

00015ae0 <flatcc_builder_reset@@Base>:
   15ae0:	push	{fp, lr}
   15ae4:	mov	fp, sp
   15ae8:	sub	sp, sp, #8
   15aec:	str	r0, [sp, #4]
   15af0:	ldr	r0, [sp, #4]
   15af4:	movw	r1, #0
   15af8:	str	r1, [sp]
   15afc:	ldr	r2, [sp]
   15b00:	bl	15898 <flatcc_builder_custom_reset@@Base>
   15b04:	mov	sp, fp
   15b08:	pop	{fp, pc}

00015b0c <flatcc_builder_clear@@Base>:
   15b0c:	push	{r4, sl, fp, lr}
   15b10:	add	fp, sp, #8
   15b14:	sub	sp, sp, #32
   15b18:	str	r0, [fp, #-12]
   15b1c:	movw	r0, #0
   15b20:	str	r0, [sp, #20]
   15b24:	ldr	r0, [sp, #20]
   15b28:	cmp	r0, #8
   15b2c:	bge	15ba0 <flatcc_builder_clear@@Base+0x94>
   15b30:	ldr	r0, [fp, #-12]
   15b34:	add	r0, r0, #52	; 0x34
   15b38:	ldr	r1, [sp, #20]
   15b3c:	add	r0, r0, r1, lsl #3
   15b40:	str	r0, [fp, #-16]
   15b44:	ldr	r0, [fp, #-12]
   15b48:	ldr	r0, [r0, #48]	; 0x30
   15b4c:	ldr	r1, [fp, #-12]
   15b50:	ldr	r1, [r1, #40]	; 0x28
   15b54:	ldr	r2, [fp, #-16]
   15b58:	ldr	r3, [sp, #20]
   15b5c:	str	r0, [sp, #16]
   15b60:	mov	r0, r1
   15b64:	mov	r1, r2
   15b68:	movw	r2, #0
   15b6c:	str	r2, [sp, #12]
   15b70:	ldr	ip, [sp, #12]
   15b74:	str	r3, [sp, #8]
   15b78:	mov	r3, ip
   15b7c:	ldr	lr, [sp, #8]
   15b80:	str	lr, [sp]
   15b84:	ldr	r4, [sp, #16]
   15b88:	blx	r4
   15b8c:	str	r0, [sp, #4]
   15b90:	ldr	r0, [sp, #20]
   15b94:	add	r0, r0, #1
   15b98:	str	r0, [sp, #20]
   15b9c:	b	15b24 <flatcc_builder_clear@@Base+0x18>
   15ba0:	ldr	r0, [fp, #-12]
   15ba4:	ldr	r0, [r0, #184]	; 0xb8
   15ba8:	cmp	r0, #0
   15bac:	beq	15bbc <flatcc_builder_clear@@Base+0xb0>
   15bb0:	ldr	r0, [fp, #-12]
   15bb4:	add	r0, r0, #188	; 0xbc
   15bb8:	bl	1b608 <flatcc_emitter_clear@@Base>
   15bbc:	ldr	r0, [fp, #-12]
   15bc0:	movw	r1, #0
   15bc4:	and	r1, r1, #255	; 0xff
   15bc8:	movw	r2, #232	; 0xe8
   15bcc:	bl	12420 <memset@plt>
   15bd0:	sub	sp, fp, #8
   15bd4:	pop	{r4, sl, fp, pc}

00015bd8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   15bd8:	push	{fp, lr}
   15bdc:	mov	fp, sp
   15be0:	sub	sp, sp, #24
   15be4:	str	r0, [fp, #-8]
   15be8:	str	r1, [sp, #12]
   15bec:	ldr	r0, [sp, #12]
   15bf0:	add	r0, r0, #4
   15bf4:	sub	r0, r0, #1
   15bf8:	mvn	r1, #3
   15bfc:	and	r0, r0, r1
   15c00:	add	r0, r0, #4
   15c04:	str	r0, [sp, #12]
   15c08:	ldr	r0, [fp, #-8]
   15c0c:	ldr	r1, [fp, #-8]
   15c10:	ldr	r2, [r1, #228]	; 0xe4
   15c14:	ldr	r3, [sp, #12]
   15c18:	movw	r1, #7
   15c1c:	movw	ip, #0
   15c20:	str	ip, [sp]
   15c24:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15c28:	str	r0, [sp, #8]
   15c2c:	movw	r1, #0
   15c30:	cmp	r0, r1
   15c34:	bne	15c44 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   15c38:	movw	r0, #0
   15c3c:	str	r0, [fp, #-4]
   15c40:	b	15ca0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   15c44:	ldr	r0, [sp, #8]
   15c48:	ldr	r2, [sp, #12]
   15c4c:	movw	r1, #0
   15c50:	and	r1, r1, #255	; 0xff
   15c54:	bl	12420 <memset@plt>
   15c58:	ldr	r0, [fp, #-8]
   15c5c:	ldr	r0, [r0, #224]	; 0xe0
   15c60:	ldr	r1, [sp, #8]
   15c64:	add	r2, r1, #4
   15c68:	str	r2, [sp, #8]
   15c6c:	str	r0, [r1]
   15c70:	ldr	r0, [fp, #-8]
   15c74:	ldr	r0, [r0, #228]	; 0xe4
   15c78:	add	r0, r0, #4
   15c7c:	ldr	r1, [fp, #-8]
   15c80:	str	r0, [r1, #224]	; 0xe0
   15c84:	ldr	r0, [sp, #12]
   15c88:	ldr	r1, [fp, #-8]
   15c8c:	ldr	r2, [r1, #228]	; 0xe4
   15c90:	add	r0, r2, r0
   15c94:	str	r0, [r1, #228]	; 0xe4
   15c98:	ldr	r0, [sp, #8]
   15c9c:	str	r0, [fp, #-4]
   15ca0:	ldr	r0, [fp, #-4]
   15ca4:	mov	sp, fp
   15ca8:	pop	{fp, pc}
   15cac:	push	{fp, lr}
   15cb0:	mov	fp, sp
   15cb4:	sub	sp, sp, #32
   15cb8:	ldr	ip, [fp, #8]
   15cbc:	str	r0, [fp, #-4]
   15cc0:	str	r1, [fp, #-8]
   15cc4:	str	r2, [fp, #-12]
   15cc8:	str	r3, [sp, #16]
   15ccc:	ldr	r0, [fp, #-4]
   15cd0:	add	r0, r0, #52	; 0x34
   15cd4:	ldr	r1, [fp, #-8]
   15cd8:	add	r0, r0, r1, lsl #3
   15cdc:	str	r0, [sp, #12]
   15ce0:	ldr	r0, [fp, #-12]
   15ce4:	ldr	r1, [sp, #16]
   15ce8:	add	r0, r0, r1
   15cec:	ldr	r1, [sp, #12]
   15cf0:	ldr	r1, [r1, #4]
   15cf4:	cmp	r0, r1
   15cf8:	str	ip, [sp, #8]
   15cfc:	bls	15d74 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   15d00:	ldr	r0, [fp, #-4]
   15d04:	ldr	r0, [r0, #48]	; 0x30
   15d08:	ldr	r1, [fp, #-4]
   15d0c:	ldr	r1, [r1, #40]	; 0x28
   15d10:	ldr	r2, [sp, #12]
   15d14:	ldr	r3, [fp, #-12]
   15d18:	ldr	ip, [sp, #16]
   15d1c:	add	r3, r3, ip
   15d20:	ldr	ip, [fp, #8]
   15d24:	ldr	lr, [fp, #-8]
   15d28:	str	r0, [sp, #4]
   15d2c:	mov	r0, r1
   15d30:	mov	r1, r2
   15d34:	mov	r2, r3
   15d38:	mov	r3, ip
   15d3c:	str	lr, [sp]
   15d40:	ldr	ip, [sp, #4]
   15d44:	blx	ip
   15d48:	cmp	r0, #0
   15d4c:	beq	15d70 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   15d50:	ldr	r0, [pc, #52]	; 15d8c <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   15d54:	add	r0, pc, r0
   15d58:	ldr	r1, [pc, #48]	; 15d90 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   15d5c:	add	r1, pc, r1
   15d60:	ldr	r2, [pc, #44]	; 15d94 <flatcc_builder_enter_user_frame_ptr@@Base+0x1bc>
   15d64:	add	r3, pc, r2
   15d68:	movw	r2, #308	; 0x134
   15d6c:	bl	12450 <__assert_fail@plt>
   15d70:	b	15d74 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   15d74:	ldr	r0, [sp, #12]
   15d78:	ldr	r0, [r0]
   15d7c:	ldr	r1, [fp, #-12]
   15d80:	add	r0, r0, r1
   15d84:	mov	sp, fp
   15d88:	pop	{fp, pc}
   15d8c:	strdeq	r7, [r0], -r1
   15d90:	andeq	r6, r0, ip, lsr #28
   15d94:	andeq	r7, r0, fp, lsl lr

00015d98 <flatcc_builder_enter_user_frame@@Base>:
   15d98:	push	{fp, lr}
   15d9c:	mov	fp, sp
   15da0:	sub	sp, sp, #24
   15da4:	str	r0, [fp, #-8]
   15da8:	str	r1, [sp, #12]
   15dac:	ldr	r0, [sp, #12]
   15db0:	add	r0, r0, #4
   15db4:	sub	r0, r0, #1
   15db8:	mvn	r1, #3
   15dbc:	and	r0, r0, r1
   15dc0:	add	r0, r0, #4
   15dc4:	str	r0, [sp, #12]
   15dc8:	ldr	r0, [fp, #-8]
   15dcc:	ldr	r1, [fp, #-8]
   15dd0:	ldr	r2, [r1, #228]	; 0xe4
   15dd4:	ldr	r3, [sp, #12]
   15dd8:	movw	r1, #7
   15ddc:	movw	ip, #0
   15de0:	str	ip, [sp]
   15de4:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15de8:	str	r0, [sp, #8]
   15dec:	movw	r1, #0
   15df0:	cmp	r0, r1
   15df4:	bne	15e04 <flatcc_builder_enter_user_frame@@Base+0x6c>
   15df8:	movw	r0, #0
   15dfc:	str	r0, [fp, #-4]
   15e00:	b	15e64 <flatcc_builder_enter_user_frame@@Base+0xcc>
   15e04:	ldr	r0, [sp, #8]
   15e08:	ldr	r2, [sp, #12]
   15e0c:	movw	r1, #0
   15e10:	and	r1, r1, #255	; 0xff
   15e14:	bl	12420 <memset@plt>
   15e18:	ldr	r0, [fp, #-8]
   15e1c:	ldr	r0, [r0, #224]	; 0xe0
   15e20:	ldr	r1, [sp, #8]
   15e24:	add	r2, r1, #4
   15e28:	str	r2, [sp, #8]
   15e2c:	str	r0, [r1]
   15e30:	ldr	r0, [fp, #-8]
   15e34:	ldr	r0, [r0, #228]	; 0xe4
   15e38:	add	r0, r0, #4
   15e3c:	ldr	r1, [fp, #-8]
   15e40:	str	r0, [r1, #224]	; 0xe0
   15e44:	ldr	r0, [sp, #12]
   15e48:	ldr	r1, [fp, #-8]
   15e4c:	ldr	r2, [r1, #228]	; 0xe4
   15e50:	add	r0, r2, r0
   15e54:	str	r0, [r1, #228]	; 0xe4
   15e58:	ldr	r0, [fp, #-8]
   15e5c:	ldr	r0, [r0, #224]	; 0xe0
   15e60:	str	r0, [fp, #-4]
   15e64:	ldr	r0, [fp, #-4]
   15e68:	mov	sp, fp
   15e6c:	pop	{fp, pc}

00015e70 <flatcc_builder_exit_user_frame@@Base>:
   15e70:	push	{fp, lr}
   15e74:	mov	fp, sp
   15e78:	sub	sp, sp, #8
   15e7c:	str	r0, [sp, #4]
   15e80:	ldr	r0, [sp, #4]
   15e84:	ldr	r0, [r0, #224]	; 0xe0
   15e88:	cmp	r0, #0
   15e8c:	bls	15e94 <flatcc_builder_exit_user_frame@@Base+0x24>
   15e90:	b	15eb4 <flatcc_builder_exit_user_frame@@Base+0x44>
   15e94:	ldr	r0, [pc, #100]	; 15f00 <flatcc_builder_exit_user_frame@@Base+0x90>
   15e98:	add	r0, pc, r0
   15e9c:	ldr	r1, [pc, #96]	; 15f04 <flatcc_builder_exit_user_frame@@Base+0x94>
   15ea0:	add	r1, pc, r1
   15ea4:	ldr	r2, [pc, #92]	; 15f08 <flatcc_builder_exit_user_frame@@Base+0x98>
   15ea8:	add	r3, pc, r2
   15eac:	movw	r2, #542	; 0x21e
   15eb0:	bl	12450 <__assert_fail@plt>
   15eb4:	ldr	r0, [sp, #4]
   15eb8:	ldr	r0, [r0, #108]	; 0x6c
   15ebc:	ldr	r1, [sp, #4]
   15ec0:	ldr	r1, [r1, #224]	; 0xe0
   15ec4:	add	r0, r0, r1
   15ec8:	str	r0, [sp]
   15ecc:	ldr	r0, [sp, #4]
   15ed0:	ldr	r0, [r0, #224]	; 0xe0
   15ed4:	sub	r0, r0, #4
   15ed8:	ldr	r1, [sp, #4]
   15edc:	str	r0, [r1, #228]	; 0xe4
   15ee0:	ldr	r0, [sp]
   15ee4:	mvn	r1, #3
   15ee8:	add	r0, r0, r1
   15eec:	ldr	r0, [r0]
   15ef0:	ldr	r1, [sp, #4]
   15ef4:	str	r0, [r1, #224]	; 0xe0
   15ef8:	mov	sp, fp
   15efc:	pop	{fp, pc}
   15f00:	andeq	r6, r0, fp, lsl #27
   15f04:	andeq	r6, r0, r8, ror #25
   15f08:	muleq	r0, r4, sp

00015f0c <flatcc_builder_exit_user_frame_at@@Base>:
   15f0c:	push	{fp, lr}
   15f10:	mov	fp, sp
   15f14:	sub	sp, sp, #8
   15f18:	str	r0, [sp, #4]
   15f1c:	str	r1, [sp]
   15f20:	ldr	r0, [sp, #4]
   15f24:	ldr	r0, [r0, #224]	; 0xe0
   15f28:	ldr	r1, [sp]
   15f2c:	cmp	r0, r1
   15f30:	bcc	15f38 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   15f34:	b	15f58 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   15f38:	ldr	r0, [pc, #52]	; 15f74 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   15f3c:	add	r0, pc, r0
   15f40:	ldr	r1, [pc, #48]	; 15f78 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   15f44:	add	r1, pc, r1
   15f48:	ldr	r2, [pc, #44]	; 15f7c <flatcc_builder_exit_user_frame_at@@Base+0x70>
   15f4c:	add	r3, pc, r2
   15f50:	movw	r2, #551	; 0x227
   15f54:	bl	12450 <__assert_fail@plt>
   15f58:	ldr	r0, [sp]
   15f5c:	ldr	r1, [sp, #4]
   15f60:	str	r0, [r1, #224]	; 0xe0
   15f64:	ldr	r0, [sp, #4]
   15f68:	bl	15e70 <flatcc_builder_exit_user_frame@@Base>
   15f6c:	mov	sp, fp
   15f70:	pop	{fp, pc}
   15f74:	andeq	r6, r0, sl, lsr sp
   15f78:	andeq	r6, r0, r4, asr #24
   15f7c:	andeq	r6, r0, r9, asr #26

00015f80 <flatcc_builder_get_current_user_frame@@Base>:
   15f80:	sub	sp, sp, #4
   15f84:	str	r0, [sp]
   15f88:	ldr	r0, [sp]
   15f8c:	ldr	r0, [r0, #224]	; 0xe0
   15f90:	add	sp, sp, #4
   15f94:	bx	lr

00015f98 <flatcc_builder_get_user_frame_ptr@@Base>:
   15f98:	sub	sp, sp, #8
   15f9c:	str	r0, [sp, #4]
   15fa0:	str	r1, [sp]
   15fa4:	ldr	r0, [sp, #4]
   15fa8:	ldr	r0, [r0, #108]	; 0x6c
   15fac:	ldr	r1, [sp]
   15fb0:	add	r0, r0, r1
   15fb4:	add	sp, sp, #8
   15fb8:	bx	lr

00015fbc <flatcc_builder_embed_buffer@@Base>:
   15fbc:	push	{fp, lr}
   15fc0:	mov	fp, sp
   15fc4:	sub	sp, sp, #120	; 0x78
   15fc8:	ldr	ip, [fp, #12]
   15fcc:	ldr	lr, [fp, #8]
   15fd0:	str	r0, [fp, #-8]
   15fd4:	strh	r1, [fp, #-10]
   15fd8:	str	r2, [fp, #-16]
   15fdc:	str	r3, [fp, #-20]	; 0xffffffec
   15fe0:	strh	lr, [fp, #-22]	; 0xffffffea
   15fe4:	ldr	r0, [fp, #12]
   15fe8:	and	r0, r0, #2
   15fec:	str	r0, [sp, #12]
   15ff0:	ldr	r0, [fp, #-8]
   15ff4:	ldrh	r1, [fp, #-10]
   15ff8:	ldr	r2, [fp, #-8]
   15ffc:	ldr	r2, [r2, #152]	; 0x98
   16000:	cmp	r2, #0
   16004:	movw	r2, #0
   16008:	moveq	r2, #1
   1600c:	mvn	r3, #0
   16010:	eor	r2, r2, r3
   16014:	and	r3, r2, #1
   16018:	sub	r2, fp, #22
   1601c:	str	r1, [sp, #8]
   16020:	mov	r1, r2
   16024:	ldr	r2, [sp, #8]
   16028:	uxth	r2, r2
   1602c:	str	ip, [sp, #4]
   16030:	bl	161a4 <flatcc_builder_embed_buffer@@Base+0x1e8>
   16034:	cmp	r0, #0
   16038:	beq	16048 <flatcc_builder_embed_buffer@@Base+0x8c>
   1603c:	movw	r0, #0
   16040:	str	r0, [fp, #-4]
   16044:	b	16194 <flatcc_builder_embed_buffer@@Base+0x1d8>
   16048:	ldr	r0, [fp, #-8]
   1604c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16050:	ldr	r2, [sp, #12]
   16054:	cmp	r2, #0
   16058:	movw	r2, #0
   1605c:	movne	r2, #1
   16060:	tst	r2, #1
   16064:	movw	r2, #4
   16068:	moveq	r2, #0
   1606c:	add	r1, r1, r2
   16070:	ldrh	r2, [fp, #-22]	; 0xffffffea
   16074:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   16078:	str	r0, [fp, #-32]	; 0xffffffe0
   1607c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16080:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16084:	add	r0, r0, r1
   16088:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   1608c:	str	r0, [fp, #-28]	; 0xffffffe4
   16090:	movw	r0, #0
   16094:	str	r0, [sp, #16]
   16098:	str	r0, [sp, #20]
   1609c:	ldr	r0, [fp, #-8]
   160a0:	ldr	r0, [r0, #152]	; 0x98
   160a4:	cmp	r0, #0
   160a8:	beq	160e8 <flatcc_builder_embed_buffer@@Base+0x12c>
   160ac:	ldr	r0, [sp, #16]
   160b0:	add	r0, r0, #4
   160b4:	str	r0, [sp, #16]
   160b8:	add	r0, sp, #16
   160bc:	add	r0, r0, #8
   160c0:	ldr	r1, [sp, #20]
   160c4:	sub	r2, fp, #28
   160c8:	str	r2, [r0, r1, lsl #3]
   160cc:	ldr	r1, [sp, #20]
   160d0:	add	r0, r0, r1, lsl #3
   160d4:	movw	r1, #4
   160d8:	str	r1, [r0, #4]
   160dc:	ldr	r0, [sp, #20]
   160e0:	add	r0, r0, #1
   160e4:	str	r0, [sp, #20]
   160e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   160ec:	cmp	r0, #0
   160f0:	bls	16134 <flatcc_builder_embed_buffer@@Base+0x178>
   160f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   160f8:	ldr	r1, [sp, #16]
   160fc:	add	r0, r1, r0
   16100:	str	r0, [sp, #16]
   16104:	ldr	r0, [fp, #-16]
   16108:	add	r1, sp, #16
   1610c:	add	r1, r1, #8
   16110:	ldr	r2, [sp, #20]
   16114:	str	r0, [r1, r2, lsl #3]
   16118:	ldr	r0, [fp, #-20]	; 0xffffffec
   1611c:	ldr	r2, [sp, #20]
   16120:	add	r1, r1, r2, lsl #3
   16124:	str	r0, [r1, #4]
   16128:	ldr	r0, [sp, #20]
   1612c:	add	r0, r0, #1
   16130:	str	r0, [sp, #20]
   16134:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16138:	cmp	r0, #0
   1613c:	bls	16184 <flatcc_builder_embed_buffer@@Base+0x1c8>
   16140:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16144:	ldr	r1, [sp, #16]
   16148:	add	r0, r1, r0
   1614c:	str	r0, [sp, #16]
   16150:	add	r0, sp, #16
   16154:	add	r0, r0, #8
   16158:	ldr	r1, [sp, #20]
   1615c:	ldr	r2, [pc, #60]	; 161a0 <flatcc_builder_embed_buffer@@Base+0x1e4>
   16160:	ldr	r2, [pc, r2]
   16164:	str	r2, [r0, r1, lsl #3]
   16168:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1616c:	ldr	r2, [sp, #20]
   16170:	add	r0, r0, r2, lsl #3
   16174:	str	r1, [r0, #4]
   16178:	ldr	r0, [sp, #20]
   1617c:	add	r0, r0, #1
   16180:	str	r0, [sp, #20]
   16184:	ldr	r0, [fp, #-8]
   16188:	add	r1, sp, #16
   1618c:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   16190:	str	r0, [fp, #-4]
   16194:	ldr	r0, [fp, #-4]
   16198:	mov	sp, fp
   1619c:	pop	{fp, pc}
   161a0:	andeq	r7, r1, r4, ror #29
   161a4:	push	{fp, lr}
   161a8:	mov	fp, sp
   161ac:	sub	sp, sp, #104	; 0x68
   161b0:	str	r0, [fp, #-4]
   161b4:	str	r1, [fp, #-8]
   161b8:	strh	r2, [fp, #-10]
   161bc:	str	r3, [fp, #-16]
   161c0:	ldrh	r0, [fp, #-10]
   161c4:	cmp	r0, #0
   161c8:	beq	161d8 <flatcc_builder_embed_buffer@@Base+0x21c>
   161cc:	ldrh	r0, [fp, #-10]
   161d0:	str	r0, [sp, #8]
   161d4:	b	1620c <flatcc_builder_embed_buffer@@Base+0x250>
   161d8:	ldr	r0, [fp, #-4]
   161dc:	ldrh	r0, [r0, #132]	; 0x84
   161e0:	cmp	r0, #0
   161e4:	beq	161f8 <flatcc_builder_embed_buffer@@Base+0x23c>
   161e8:	ldr	r0, [fp, #-4]
   161ec:	ldrh	r0, [r0, #132]	; 0x84
   161f0:	str	r0, [sp, #4]
   161f4:	b	16204 <flatcc_builder_embed_buffer@@Base+0x248>
   161f8:	movw	r0, #1
   161fc:	str	r0, [sp, #4]
   16200:	b	16204 <flatcc_builder_embed_buffer@@Base+0x248>
   16204:	ldr	r0, [sp, #4]
   16208:	str	r0, [sp, #8]
   1620c:	ldr	r0, [sp, #8]
   16210:	strh	r0, [fp, #-10]
   16214:	ldr	r0, [fp, #-8]
   16218:	movw	r1, #4
   1621c:	uxth	r1, r1
   16220:	bl	17d10 <flatcc_builder_start_vector@@Base+0xac>
   16224:	ldr	r0, [fp, #-8]
   16228:	ldrh	r1, [fp, #-10]
   1622c:	bl	17d10 <flatcc_builder_start_vector@@Base+0xac>
   16230:	ldr	r0, [fp, #-16]
   16234:	cmp	r0, #0
   16238:	bne	162f4 <flatcc_builder_embed_buffer@@Base+0x338>
   1623c:	ldr	r0, [fp, #-4]
   16240:	ldrh	r1, [fp, #-10]
   16244:	bl	1b158 <flatcc_builder_get_emit_context@@Base+0x18>
   16248:	str	r0, [fp, #-20]	; 0xffffffec
   1624c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16250:	cmp	r0, #0
   16254:	beq	162f0 <flatcc_builder_embed_buffer@@Base+0x334>
   16258:	movw	r0, #0
   1625c:	str	r0, [sp, #12]
   16260:	str	r0, [sp, #16]
   16264:	ldr	r0, [fp, #-20]	; 0xffffffec
   16268:	cmp	r0, #0
   1626c:	bls	162b4 <flatcc_builder_embed_buffer@@Base+0x2f8>
   16270:	ldr	r0, [fp, #-20]	; 0xffffffec
   16274:	ldr	r1, [sp, #12]
   16278:	add	r0, r1, r0
   1627c:	str	r0, [sp, #12]
   16280:	add	r0, sp, #12
   16284:	add	r0, r0, #8
   16288:	ldr	r1, [sp, #16]
   1628c:	ldr	r2, [pc, #120]	; 1630c <flatcc_builder_embed_buffer@@Base+0x350>
   16290:	ldr	r2, [pc, r2]
   16294:	str	r2, [r0, r1, lsl #3]
   16298:	ldr	r1, [fp, #-20]	; 0xffffffec
   1629c:	ldr	r2, [sp, #16]
   162a0:	add	r0, r0, r2, lsl #3
   162a4:	str	r1, [r0, #4]
   162a8:	ldr	r0, [sp, #16]
   162ac:	add	r0, r0, #1
   162b0:	str	r0, [sp, #16]
   162b4:	ldr	r0, [fp, #-4]
   162b8:	add	r1, sp, #12
   162bc:	bl	182f4 <flatcc_builder_create_vtable@@Base+0x104>
   162c0:	movw	r1, #0
   162c4:	cmp	r1, r0
   162c8:	bne	162ec <flatcc_builder_embed_buffer@@Base+0x330>
   162cc:	ldr	r0, [pc, #44]	; 16300 <flatcc_builder_embed_buffer@@Base+0x344>
   162d0:	add	r0, pc, r0
   162d4:	ldr	r1, [pc, #40]	; 16304 <flatcc_builder_embed_buffer@@Base+0x348>
   162d8:	add	r1, pc, r1
   162dc:	ldr	r2, [pc, #36]	; 16308 <flatcc_builder_embed_buffer@@Base+0x34c>
   162e0:	add	r3, pc, r2
   162e4:	movw	r2, #702	; 0x2be
   162e8:	bl	12450 <__assert_fail@plt>
   162ec:	b	162f0 <flatcc_builder_embed_buffer@@Base+0x334>
   162f0:	b	162f4 <flatcc_builder_embed_buffer@@Base+0x338>
   162f4:	movw	r0, #0
   162f8:	mov	sp, fp
   162fc:	pop	{fp, pc}
   16300:	andeq	r7, r0, r5, ror sl
   16304:			; <UNDEFINED> instruction: 0x000068b0
   16308:	andeq	r7, r0, r2, ror #17
   1630c:			; <UNDEFINED> instruction: 0x00017db4
   16310:	sub	sp, sp, #12
   16314:	str	r0, [sp, #8]
   16318:	str	r1, [sp, #4]
   1631c:	strh	r2, [sp, #2]
   16320:	ldr	r0, [sp, #8]
   16324:	ldr	r0, [r0, #136]	; 0x88
   16328:	ldr	r1, [sp, #4]
   1632c:	sub	r0, r0, r1
   16330:	ldrh	r1, [sp, #2]
   16334:	sub	r1, r1, #1
   16338:	and	r0, r0, r1
   1633c:	add	sp, sp, #12
   16340:	bx	lr
   16344:	sub	sp, sp, #4
   16348:	str	r0, [sp]
   1634c:	ldr	r0, [sp]
   16350:	add	sp, sp, #4
   16354:	bx	lr
   16358:	push	{fp, lr}
   1635c:	mov	fp, sp
   16360:	sub	sp, sp, #24
   16364:	str	r0, [fp, #-4]
   16368:	str	r1, [fp, #-8]
   1636c:	ldr	r0, [fp, #-4]
   16370:	ldr	r0, [r0, #136]	; 0x88
   16374:	ldr	r1, [fp, #-8]
   16378:	ldr	r1, [r1]
   1637c:	sub	r0, r0, r1
   16380:	str	r0, [sp, #12]
   16384:	ldr	r0, [fp, #-8]
   16388:	ldr	r0, [r0]
   1638c:	cmp	r0, #16
   16390:	bls	163a8 <flatcc_builder_embed_buffer@@Base+0x3ec>
   16394:	ldr	r0, [fp, #-8]
   16398:	ldr	r0, [r0]
   1639c:	sub	r0, r0, #16
   163a0:	cmn	r0, #1
   163a4:	bhi	163bc <flatcc_builder_embed_buffer@@Base+0x400>
   163a8:	ldr	r0, [sp, #12]
   163ac:	ldr	r1, [fp, #-4]
   163b0:	ldr	r1, [r1, #136]	; 0x88
   163b4:	cmp	r0, r1
   163b8:	blt	163dc <flatcc_builder_embed_buffer@@Base+0x420>
   163bc:	ldr	r0, [pc, #172]	; 16470 <flatcc_builder_embed_buffer@@Base+0x4b4>
   163c0:	add	r0, pc, r0
   163c4:	ldr	r1, [pc, #168]	; 16474 <flatcc_builder_embed_buffer@@Base+0x4b8>
   163c8:	add	r1, pc, r1
   163cc:	ldr	r2, [pc, #164]	; 16478 <flatcc_builder_embed_buffer@@Base+0x4bc>
   163d0:	add	r3, pc, r2
   163d4:	movw	r2, #647	; 0x287
   163d8:	bl	12450 <__assert_fail@plt>
   163dc:	ldr	r0, [fp, #-4]
   163e0:	ldr	r0, [r0, #44]	; 0x2c
   163e4:	ldr	r1, [fp, #-4]
   163e8:	ldr	r1, [r1, #36]	; 0x24
   163ec:	ldr	r2, [fp, #-8]
   163f0:	add	r2, r2, #8
   163f4:	ldr	r3, [fp, #-8]
   163f8:	ldr	r3, [r3, #4]
   163fc:	ldr	ip, [sp, #12]
   16400:	ldr	lr, [fp, #-8]
   16404:	ldr	lr, [lr]
   16408:	str	r0, [sp, #8]
   1640c:	mov	r0, r1
   16410:	mov	r1, r2
   16414:	mov	r2, r3
   16418:	mov	r3, ip
   1641c:	str	lr, [sp]
   16420:	ldr	ip, [sp, #8]
   16424:	blx	ip
   16428:	cmp	r0, #0
   1642c:	beq	16450 <flatcc_builder_embed_buffer@@Base+0x494>
   16430:	ldr	r0, [pc, #44]	; 16464 <flatcc_builder_embed_buffer@@Base+0x4a8>
   16434:	add	r0, pc, r0
   16438:	ldr	r1, [pc, #40]	; 16468 <flatcc_builder_embed_buffer@@Base+0x4ac>
   1643c:	add	r1, pc, r1
   16440:	ldr	r2, [pc, #36]	; 1646c <flatcc_builder_embed_buffer@@Base+0x4b0>
   16444:	add	r3, pc, r2
   16448:	movw	r2, #651	; 0x28b
   1644c:	bl	12450 <__assert_fail@plt>
   16450:	ldr	r0, [sp, #12]
   16454:	ldr	r1, [fp, #-4]
   16458:	str	r0, [r1, #136]	; 0x88
   1645c:	mov	sp, fp
   16460:	pop	{fp, pc}
   16464:	andeq	r7, r0, r1, lsl r9
   16468:	andeq	r6, r0, ip, asr #14
   1646c:	andeq	r7, r0, r0, asr #15
   16470:	andeq	r7, r0, r5, lsl #19
   16474:	andeq	r6, r0, r0, asr #15
   16478:	andeq	r7, r0, r4, lsr r8

0001647c <flatcc_builder_create_buffer@@Base>:
   1647c:	push	{fp, lr}
   16480:	mov	fp, sp
   16484:	sub	sp, sp, #152	; 0x98
   16488:	ldr	ip, [fp, #12]
   1648c:	ldr	lr, [fp, #8]
   16490:	str	r0, [fp, #-8]
   16494:	str	r1, [fp, #-12]
   16498:	strh	r2, [fp, #-14]
   1649c:	str	r3, [fp, #-20]	; 0xffffffec
   164a0:	strh	lr, [fp, #-22]	; 0xffffffea
   164a4:	movw	r0, #0
   164a8:	str	r0, [fp, #-36]	; 0xffffffdc
   164ac:	str	r0, [sp, #28]
   164b0:	ldr	r0, [fp, #12]
   164b4:	and	r0, r0, #1
   164b8:	cmp	r0, #0
   164bc:	movw	r0, #0
   164c0:	movne	r0, #1
   164c4:	and	r0, r0, #1
   164c8:	str	r0, [sp, #24]
   164cc:	ldr	r0, [fp, #12]
   164d0:	and	r0, r0, #2
   164d4:	cmp	r0, #0
   164d8:	movw	r0, #0
   164dc:	movne	r0, #1
   164e0:	and	r0, r0, #1
   164e4:	str	r0, [sp, #20]
   164e8:	ldr	r0, [fp, #-8]
   164ec:	ldrh	r1, [fp, #-14]
   164f0:	ldr	r3, [sp, #24]
   164f4:	sub	r2, fp, #22
   164f8:	str	r1, [sp, #16]
   164fc:	mov	r1, r2
   16500:	ldr	r2, [sp, #16]
   16504:	uxth	r2, r2
   16508:	str	ip, [sp, #12]
   1650c:	bl	161a4 <flatcc_builder_embed_buffer@@Base+0x1e8>
   16510:	cmp	r0, #0
   16514:	beq	16524 <flatcc_builder_create_buffer@@Base+0xa8>
   16518:	movw	r0, #0
   1651c:	str	r0, [fp, #-4]
   16520:	b	16808 <flatcc_builder_create_buffer@@Base+0x38c>
   16524:	ldr	r0, [fp, #-8]
   16528:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1652c:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   16530:	ldr	r0, [fp, #-12]
   16534:	movw	r1, #0
   16538:	cmp	r0, r1
   1653c:	beq	1657c <flatcc_builder_create_buffer@@Base+0x100>
   16540:	ldr	r0, [fp, #-12]
   16544:	ldrb	r1, [r0]
   16548:	strb	r1, [sp, #28]
   1654c:	ldrb	r1, [r0, #1]
   16550:	strb	r1, [sp, #29]
   16554:	ldrb	r1, [r0, #2]
   16558:	strb	r1, [sp, #30]
   1655c:	ldrb	r0, [r0, #3]
   16560:	strb	r0, [sp, #31]
   16564:	ldr	r0, [sp, #28]
   16568:	bl	16858 <flatcc_builder_create_buffer@@Base+0x3dc>
   1656c:	str	r0, [sp, #28]
   16570:	ldr	r0, [sp, #28]
   16574:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   16578:	str	r0, [sp, #28]
   1657c:	ldr	r0, [sp, #28]
   16580:	cmp	r0, #0
   16584:	movw	r0, #0
   16588:	movne	r0, #1
   1658c:	tst	r0, #1
   16590:	movw	r0, #4
   16594:	mov	r1, r0
   16598:	moveq	r1, #0
   1659c:	str	r1, [fp, #-36]	; 0xffffffdc
   165a0:	ldr	r1, [fp, #-8]
   165a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   165a8:	add	r2, r2, #4
   165ac:	ldr	r3, [sp, #20]
   165b0:	cmp	r3, #0
   165b4:	movw	r3, #0
   165b8:	movne	r3, #1
   165bc:	tst	r3, #1
   165c0:	moveq	r0, #0
   165c4:	add	r0, r2, r0
   165c8:	str	r0, [sp, #8]
   165cc:	mov	r0, r1
   165d0:	ldr	r1, [sp, #8]
   165d4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   165d8:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   165dc:	str	r0, [fp, #-32]	; 0xffffffe0
   165e0:	movw	r0, #0
   165e4:	str	r0, [sp, #32]
   165e8:	str	r0, [sp, #36]	; 0x24
   165ec:	ldr	r0, [sp, #24]
   165f0:	cmp	r0, #0
   165f4:	bne	16604 <flatcc_builder_create_buffer@@Base+0x188>
   165f8:	ldr	r0, [sp, #20]
   165fc:	cmp	r0, #0
   16600:	beq	16640 <flatcc_builder_create_buffer@@Base+0x1c4>
   16604:	ldr	r0, [sp, #32]
   16608:	add	r0, r0, #4
   1660c:	str	r0, [sp, #32]
   16610:	add	r0, sp, #32
   16614:	add	r0, r0, #8
   16618:	ldr	r1, [sp, #36]	; 0x24
   1661c:	sub	r2, fp, #44	; 0x2c
   16620:	str	r2, [r0, r1, lsl #3]
   16624:	ldr	r1, [sp, #36]	; 0x24
   16628:	add	r0, r0, r1, lsl #3
   1662c:	movw	r1, #4
   16630:	str	r1, [r0, #4]
   16634:	ldr	r0, [sp, #36]	; 0x24
   16638:	add	r0, r0, #1
   1663c:	str	r0, [sp, #36]	; 0x24
   16640:	ldr	r0, [sp, #32]
   16644:	add	r0, r0, #4
   16648:	str	r0, [sp, #32]
   1664c:	add	r0, sp, #32
   16650:	add	r0, r0, #8
   16654:	ldr	r1, [sp, #36]	; 0x24
   16658:	sub	r2, fp, #40	; 0x28
   1665c:	str	r2, [r0, r1, lsl #3]
   16660:	ldr	r1, [sp, #36]	; 0x24
   16664:	add	r0, r0, r1, lsl #3
   16668:	movw	r1, #4
   1666c:	str	r1, [r0, #4]
   16670:	ldr	r0, [sp, #36]	; 0x24
   16674:	add	r0, r0, #1
   16678:	str	r0, [sp, #36]	; 0x24
   1667c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16680:	cmp	r0, #0
   16684:	bls	166c8 <flatcc_builder_create_buffer@@Base+0x24c>
   16688:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1668c:	ldr	r1, [sp, #32]
   16690:	add	r0, r1, r0
   16694:	str	r0, [sp, #32]
   16698:	add	r0, sp, #32
   1669c:	add	r0, r0, #8
   166a0:	ldr	r1, [sp, #36]	; 0x24
   166a4:	add	r2, sp, #28
   166a8:	str	r2, [r0, r1, lsl #3]
   166ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   166b0:	ldr	r2, [sp, #36]	; 0x24
   166b4:	add	r0, r0, r2, lsl #3
   166b8:	str	r1, [r0, #4]
   166bc:	ldr	r0, [sp, #36]	; 0x24
   166c0:	add	r0, r0, #1
   166c4:	str	r0, [sp, #36]	; 0x24
   166c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   166cc:	cmp	r0, #0
   166d0:	bls	16718 <flatcc_builder_create_buffer@@Base+0x29c>
   166d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   166d8:	ldr	r1, [sp, #32]
   166dc:	add	r0, r1, r0
   166e0:	str	r0, [sp, #32]
   166e4:	add	r0, sp, #32
   166e8:	add	r0, r0, #8
   166ec:	ldr	r1, [sp, #36]	; 0x24
   166f0:	ldr	r2, [pc, #296]	; 16820 <flatcc_builder_create_buffer@@Base+0x3a4>
   166f4:	ldr	r2, [pc, r2]
   166f8:	str	r2, [r0, r1, lsl #3]
   166fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16700:	ldr	r2, [sp, #36]	; 0x24
   16704:	add	r0, r0, r2, lsl #3
   16708:	str	r1, [r0, #4]
   1670c:	ldr	r0, [sp, #36]	; 0x24
   16710:	add	r0, r0, #1
   16714:	str	r0, [sp, #36]	; 0x24
   16718:	ldr	r0, [fp, #-8]
   1671c:	ldr	r0, [r0, #136]	; 0x88
   16720:	ldr	r1, [sp, #32]
   16724:	sub	r0, r0, r1
   16728:	ldr	r1, [sp, #24]
   1672c:	cmp	r1, #0
   16730:	movw	r1, #1
   16734:	str	r0, [sp, #4]
   16738:	str	r1, [sp]
   1673c:	bne	16754 <flatcc_builder_create_buffer@@Base+0x2d8>
   16740:	ldr	r0, [sp, #20]
   16744:	cmp	r0, #0
   16748:	movw	r0, #0
   1674c:	movne	r0, #1
   16750:	str	r0, [sp]
   16754:	ldr	r0, [sp]
   16758:	tst	r0, #1
   1675c:	movw	r0, #4
   16760:	moveq	r0, #0
   16764:	ldr	r1, [sp, #4]
   16768:	add	r0, r1, r0
   1676c:	str	r0, [fp, #-48]	; 0xffffffd0
   16770:	ldr	r0, [sp, #24]
   16774:	cmp	r0, #0
   16778:	beq	16798 <flatcc_builder_create_buffer@@Base+0x31c>
   1677c:	ldr	r0, [fp, #-8]
   16780:	ldr	r0, [r0, #144]	; 0x90
   16784:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16788:	sub	r0, r0, r1
   1678c:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   16790:	str	r0, [fp, #-44]	; 0xffffffd4
   16794:	b	167b0 <flatcc_builder_create_buffer@@Base+0x334>
   16798:	ldr	r0, [fp, #-8]
   1679c:	ldr	r0, [r0, #140]	; 0x8c
   167a0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   167a4:	sub	r0, r0, r1
   167a8:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   167ac:	str	r0, [fp, #-44]	; 0xffffffd4
   167b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   167b4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   167b8:	sub	r0, r0, r1
   167bc:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   167c0:	str	r0, [fp, #-40]	; 0xffffffd8
   167c4:	ldr	r0, [fp, #-8]
   167c8:	add	r1, sp, #32
   167cc:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   167d0:	str	r0, [fp, #-28]	; 0xffffffe4
   167d4:	movw	r1, #0
   167d8:	cmp	r1, r0
   167dc:	bne	16800 <flatcc_builder_create_buffer@@Base+0x384>
   167e0:	ldr	r0, [pc, #44]	; 16814 <flatcc_builder_create_buffer@@Base+0x398>
   167e4:	add	r0, pc, r0
   167e8:	ldr	r1, [pc, #40]	; 16818 <flatcc_builder_create_buffer@@Base+0x39c>
   167ec:	add	r1, pc, r1
   167f0:	ldr	r2, [pc, #36]	; 1681c <flatcc_builder_create_buffer@@Base+0x3a0>
   167f4:	add	r3, pc, r2
   167f8:	movw	r2, #772	; 0x304
   167fc:	bl	12450 <__assert_fail@plt>
   16800:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16804:	str	r0, [fp, #-4]
   16808:	ldr	r0, [fp, #-4]
   1680c:	mov	sp, fp
   16810:	pop	{fp, pc}
   16814:	andeq	r7, r0, r1, ror #10
   16818:	muleq	r0, ip, r3
   1681c:	andeq	r6, r0, r6, ror #9
   16820:	andeq	r7, r1, r0, asr r9
   16824:	sub	sp, sp, #8
   16828:	str	r0, [sp, #4]
   1682c:	strh	r1, [sp, #2]
   16830:	ldr	r0, [sp, #4]
   16834:	ldrh	r0, [r0, #128]	; 0x80
   16838:	ldrh	r1, [sp, #2]
   1683c:	cmp	r0, r1
   16840:	bge	16850 <flatcc_builder_create_buffer@@Base+0x3d4>
   16844:	ldrh	r0, [sp, #2]
   16848:	ldr	r1, [sp, #4]
   1684c:	strh	r0, [r1, #128]	; 0x80
   16850:	add	sp, sp, #8
   16854:	bx	lr
   16858:	sub	sp, sp, #4
   1685c:	str	r0, [sp]
   16860:	ldr	r0, [sp]
   16864:	add	sp, sp, #4
   16868:	bx	lr

0001686c <flatcc_builder_create_struct@@Base>:
   1686c:	push	{fp, lr}
   16870:	mov	fp, sp
   16874:	sub	sp, sp, #96	; 0x60
   16878:	str	r0, [fp, #-4]
   1687c:	str	r1, [fp, #-8]
   16880:	str	r2, [fp, #-12]
   16884:	strh	r3, [fp, #-14]
   16888:	ldrh	r0, [fp, #-14]
   1688c:	cmp	r0, #1
   16890:	blt	16898 <flatcc_builder_create_struct@@Base+0x2c>
   16894:	b	168b8 <flatcc_builder_create_struct@@Base+0x4c>
   16898:	ldr	r0, [pc, #244]	; 16994 <flatcc_builder_create_struct@@Base+0x128>
   1689c:	add	r0, pc, r0
   168a0:	ldr	r1, [pc, #240]	; 16998 <flatcc_builder_create_struct@@Base+0x12c>
   168a4:	add	r1, pc, r1
   168a8:	ldr	r2, [pc, #236]	; 1699c <flatcc_builder_create_struct@@Base+0x130>
   168ac:	add	r3, pc, r2
   168b0:	movw	r2, #783	; 0x30f
   168b4:	bl	12450 <__assert_fail@plt>
   168b8:	ldr	r0, [fp, #-4]
   168bc:	ldrh	r1, [fp, #-14]
   168c0:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   168c4:	ldr	r0, [fp, #-4]
   168c8:	ldr	r1, [fp, #-12]
   168cc:	ldrh	r2, [fp, #-14]
   168d0:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   168d4:	str	r0, [fp, #-20]	; 0xffffffec
   168d8:	movw	r0, #0
   168dc:	str	r0, [sp, #4]
   168e0:	str	r0, [sp, #8]
   168e4:	ldr	r0, [fp, #-12]
   168e8:	cmp	r0, #0
   168ec:	bls	16930 <flatcc_builder_create_struct@@Base+0xc4>
   168f0:	ldr	r0, [fp, #-12]
   168f4:	ldr	r1, [sp, #4]
   168f8:	add	r0, r1, r0
   168fc:	str	r0, [sp, #4]
   16900:	ldr	r0, [fp, #-8]
   16904:	add	r1, sp, #4
   16908:	add	r1, r1, #8
   1690c:	ldr	r2, [sp, #8]
   16910:	str	r0, [r1, r2, lsl #3]
   16914:	ldr	r0, [fp, #-12]
   16918:	ldr	r2, [sp, #8]
   1691c:	add	r1, r1, r2, lsl #3
   16920:	str	r0, [r1, #4]
   16924:	ldr	r0, [sp, #8]
   16928:	add	r0, r0, #1
   1692c:	str	r0, [sp, #8]
   16930:	ldr	r0, [fp, #-20]	; 0xffffffec
   16934:	cmp	r0, #0
   16938:	bls	16980 <flatcc_builder_create_struct@@Base+0x114>
   1693c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16940:	ldr	r1, [sp, #4]
   16944:	add	r0, r1, r0
   16948:	str	r0, [sp, #4]
   1694c:	add	r0, sp, #4
   16950:	add	r0, r0, #8
   16954:	ldr	r1, [sp, #8]
   16958:	ldr	r2, [pc, #64]	; 169a0 <flatcc_builder_create_struct@@Base+0x134>
   1695c:	ldr	r2, [pc, r2]
   16960:	str	r2, [r0, r1, lsl #3]
   16964:	ldr	r1, [fp, #-20]	; 0xffffffec
   16968:	ldr	r2, [sp, #8]
   1696c:	add	r0, r0, r2, lsl #3
   16970:	str	r1, [r0, #4]
   16974:	ldr	r0, [sp, #8]
   16978:	add	r0, r0, #1
   1697c:	str	r0, [sp, #8]
   16980:	ldr	r0, [fp, #-4]
   16984:	add	r1, sp, #4
   16988:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   1698c:	mov	sp, fp
   16990:	pop	{fp, pc}
   16994:	andeq	r6, r0, r1, asr #9
   16998:	andeq	r6, r0, r4, ror #5
   1699c:			; <UNDEFINED> instruction: 0x000064bc
   169a0:	andeq	r7, r1, r8, ror #13

000169a4 <flatcc_builder_start_buffer@@Base>:
   169a4:	push	{fp, lr}
   169a8:	mov	fp, sp
   169ac:	sub	sp, sp, #32
   169b0:	str	r0, [fp, #-8]
   169b4:	str	r1, [fp, #-12]
   169b8:	strh	r2, [fp, #-14]
   169bc:	str	r3, [sp, #12]
   169c0:	ldr	r0, [fp, #-8]
   169c4:	ldr	r1, [fp, #-8]
   169c8:	ldrh	r1, [r1, #128]	; 0x80
   169cc:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   169d0:	cmp	r0, #0
   169d4:	beq	169e4 <flatcc_builder_start_buffer@@Base+0x40>
   169d8:	mvn	r0, #0
   169dc:	str	r0, [fp, #-4]
   169e0:	b	16b0c <flatcc_builder_start_buffer@@Base+0x168>
   169e4:	ldr	r0, [fp, #-8]
   169e8:	movw	r1, #1
   169ec:	strh	r1, [r0, #128]	; 0x80
   169f0:	ldr	r0, [fp, #-8]
   169f4:	ldrh	r0, [r0, #132]	; 0x84
   169f8:	ldr	r1, [fp, #-8]
   169fc:	ldr	r1, [r1, #32]
   16a00:	strh	r0, [r1, #34]	; 0x22
   16a04:	ldrh	r0, [fp, #-14]
   16a08:	ldr	r1, [fp, #-8]
   16a0c:	strh	r0, [r1, #132]	; 0x84
   16a10:	ldr	r0, [fp, #-8]
   16a14:	ldrh	r0, [r0, #164]	; 0xa4
   16a18:	ldr	r1, [fp, #-8]
   16a1c:	ldr	r1, [r1, #32]
   16a20:	strh	r0, [r1, #32]
   16a24:	ldr	r0, [sp, #12]
   16a28:	ldr	r1, [fp, #-8]
   16a2c:	strh	r0, [r1, #164]	; 0xa4
   16a30:	ldr	r0, [fp, #-8]
   16a34:	ldr	r0, [r0, #144]	; 0x90
   16a38:	ldr	r1, [fp, #-8]
   16a3c:	ldr	r1, [r1, #32]
   16a40:	str	r0, [r1, #20]
   16a44:	ldr	r0, [fp, #-8]
   16a48:	ldr	r0, [r0, #152]	; 0x98
   16a4c:	ldr	r1, [fp, #-8]
   16a50:	ldr	r1, [r1, #32]
   16a54:	str	r0, [r1, #28]
   16a58:	ldr	r0, [fp, #-8]
   16a5c:	ldr	r0, [r0, #136]	; 0x88
   16a60:	ldr	r1, [fp, #-8]
   16a64:	str	r0, [r1, #144]	; 0x90
   16a68:	ldr	r0, [fp, #-8]
   16a6c:	ldr	r1, [r0, #148]	; 0x94
   16a70:	add	r2, r1, #1
   16a74:	str	r2, [r0, #148]	; 0x94
   16a78:	ldr	r0, [fp, #-8]
   16a7c:	str	r1, [r0, #152]	; 0x98
   16a80:	ldr	r0, [fp, #-8]
   16a84:	ldr	r0, [r0, #168]	; 0xa8
   16a88:	ldr	r1, [fp, #-8]
   16a8c:	ldr	r1, [r1, #32]
   16a90:	str	r0, [r1, #16]
   16a94:	ldr	r0, [fp, #-8]
   16a98:	add	r0, r0, #168	; 0xa8
   16a9c:	ldr	r1, [fp, #-12]
   16aa0:	movw	r2, #0
   16aa4:	cmp	r1, r2
   16aa8:	str	r0, [sp, #8]
   16aac:	beq	16abc <flatcc_builder_start_buffer@@Base+0x118>
   16ab0:	ldr	r0, [fp, #-12]
   16ab4:	str	r0, [sp, #4]
   16ab8:	b	16acc <flatcc_builder_start_buffer@@Base+0x128>
   16abc:	ldr	r0, [pc, #84]	; 16b18 <flatcc_builder_start_buffer@@Base+0x174>
   16ac0:	ldr	r0, [pc, r0]
   16ac4:	str	r0, [sp, #4]
   16ac8:	b	16acc <flatcc_builder_start_buffer@@Base+0x128>
   16acc:	ldr	r0, [sp, #4]
   16ad0:	ldrb	r1, [r0]
   16ad4:	ldr	r2, [sp, #8]
   16ad8:	strb	r1, [r2]
   16adc:	ldrb	r1, [r0, #1]
   16ae0:	strb	r1, [r2, #1]
   16ae4:	ldrb	r1, [r0, #2]
   16ae8:	strb	r1, [r2, #2]
   16aec:	ldrb	r0, [r0, #3]
   16af0:	strb	r0, [r2, #3]
   16af4:	ldr	r0, [fp, #-8]
   16af8:	ldr	r0, [r0, #32]
   16afc:	movw	r1, #1
   16b00:	strh	r1, [r0, #14]
   16b04:	movw	r0, #0
   16b08:	str	r0, [fp, #-4]
   16b0c:	ldr	r0, [fp, #-4]
   16b10:	mov	sp, fp
   16b14:	pop	{fp, pc}
   16b18:	andeq	r7, r1, r4, lsl #11
   16b1c:	push	{fp, lr}
   16b20:	mov	fp, sp
   16b24:	sub	sp, sp, #24
   16b28:	str	r0, [fp, #-8]
   16b2c:	strh	r1, [fp, #-10]
   16b30:	ldr	r0, [fp, #-8]
   16b34:	ldr	r1, [r0, #156]	; 0x9c
   16b38:	add	r1, r1, #1
   16b3c:	str	r1, [r0, #156]	; 0x9c
   16b40:	ldr	r0, [fp, #-8]
   16b44:	ldr	r0, [r0, #160]	; 0xa0
   16b48:	cmp	r1, r0
   16b4c:	ble	16c38 <flatcc_builder_start_buffer@@Base+0x294>
   16b50:	ldr	r0, [fp, #-8]
   16b54:	ldr	r0, [r0, #176]	; 0xb0
   16b58:	cmp	r0, #0
   16b5c:	ble	16b84 <flatcc_builder_start_buffer@@Base+0x1e0>
   16b60:	ldr	r0, [fp, #-8]
   16b64:	ldr	r0, [r0, #156]	; 0x9c
   16b68:	ldr	r1, [fp, #-8]
   16b6c:	ldr	r1, [r1, #176]	; 0xb0
   16b70:	cmp	r0, r1
   16b74:	ble	16b84 <flatcc_builder_start_buffer@@Base+0x1e0>
   16b78:	mvn	r0, #0
   16b7c:	str	r0, [fp, #-4]
   16b80:	b	16cdc <flatcc_builder_start_buffer@@Base+0x338>
   16b84:	ldr	r0, [fp, #-8]
   16b88:	ldr	r1, [fp, #-8]
   16b8c:	ldr	r1, [r1, #156]	; 0x9c
   16b90:	sub	r1, r1, #1
   16b94:	movw	r2, #36	; 0x24
   16b98:	mul	r1, r1, r2
   16b9c:	movw	r3, #4
   16ba0:	str	r1, [sp, #8]
   16ba4:	mov	r1, r3
   16ba8:	ldr	r3, [sp, #8]
   16bac:	str	r2, [sp, #4]
   16bb0:	mov	r2, r3
   16bb4:	ldr	r3, [sp, #4]
   16bb8:	movw	ip, #0
   16bbc:	str	ip, [sp]
   16bc0:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16bc4:	ldr	r1, [fp, #-8]
   16bc8:	str	r0, [r1, #32]
   16bcc:	movw	r1, #0
   16bd0:	cmp	r0, r1
   16bd4:	bne	16be4 <flatcc_builder_start_buffer@@Base+0x240>
   16bd8:	mvn	r0, #0
   16bdc:	str	r0, [fp, #-4]
   16be0:	b	16cdc <flatcc_builder_start_buffer@@Base+0x338>
   16be4:	ldr	r0, [fp, #-8]
   16be8:	ldr	r0, [r0, #88]	; 0x58
   16bec:	movw	r1, #36	; 0x24
   16bf0:	udiv	r0, r0, r1
   16bf4:	ldr	r1, [fp, #-8]
   16bf8:	str	r0, [r1, #160]	; 0xa0
   16bfc:	ldr	r0, [fp, #-8]
   16c00:	ldr	r0, [r0, #176]	; 0xb0
   16c04:	cmp	r0, #0
   16c08:	ble	16c34 <flatcc_builder_start_buffer@@Base+0x290>
   16c0c:	ldr	r0, [fp, #-8]
   16c10:	ldr	r0, [r0, #176]	; 0xb0
   16c14:	ldr	r1, [fp, #-8]
   16c18:	ldr	r1, [r1, #160]	; 0xa0
   16c1c:	cmp	r0, r1
   16c20:	bge	16c34 <flatcc_builder_start_buffer@@Base+0x290>
   16c24:	ldr	r0, [fp, #-8]
   16c28:	ldr	r0, [r0, #176]	; 0xb0
   16c2c:	ldr	r1, [fp, #-8]
   16c30:	str	r0, [r1, #160]	; 0xa0
   16c34:	b	16c48 <flatcc_builder_start_buffer@@Base+0x2a4>
   16c38:	ldr	r0, [fp, #-8]
   16c3c:	ldr	r1, [r0, #32]
   16c40:	add	r1, r1, #36	; 0x24
   16c44:	str	r1, [r0, #32]
   16c48:	ldr	r0, [fp, #-8]
   16c4c:	ldr	r0, [r0, #20]
   16c50:	ldr	r1, [fp, #-8]
   16c54:	ldr	r1, [r1, #32]
   16c58:	str	r0, [r1, #8]
   16c5c:	ldr	r0, [fp, #-8]
   16c60:	ldrh	r0, [r0, #130]	; 0x82
   16c64:	ldr	r1, [fp, #-8]
   16c68:	ldr	r1, [r1, #32]
   16c6c:	strh	r0, [r1, #12]
   16c70:	ldrh	r0, [fp, #-10]
   16c74:	ldr	r1, [fp, #-8]
   16c78:	strh	r0, [r1, #130]	; 0x82
   16c7c:	ldr	r0, [fp, #-8]
   16c80:	ldr	r0, [r0, #28]
   16c84:	ldr	r1, [fp, #-8]
   16c88:	ldr	r1, [r1, #32]
   16c8c:	str	r0, [r1]
   16c90:	ldr	r0, [fp, #-8]
   16c94:	ldr	r0, [r0, #32]
   16c98:	mvn	r1, #3
   16c9c:	str	r1, [r0, #4]
   16ca0:	ldr	r0, [fp, #-8]
   16ca4:	ldr	r0, [r0, #28]
   16ca8:	ldr	r1, [fp, #-8]
   16cac:	ldr	r1, [r1, #20]
   16cb0:	add	r0, r0, r1
   16cb4:	add	r0, r0, #8
   16cb8:	sub	r0, r0, #1
   16cbc:	mvn	r1, #7
   16cc0:	and	r0, r0, r1
   16cc4:	ldr	r1, [fp, #-8]
   16cc8:	str	r0, [r1, #28]
   16ccc:	ldr	r0, [fp, #-8]
   16cd0:	movw	r1, #0
   16cd4:	str	r1, [r0, #20]
   16cd8:	str	r1, [fp, #-4]
   16cdc:	ldr	r0, [fp, #-4]
   16ce0:	mov	sp, fp
   16ce4:	pop	{fp, pc}

00016ce8 <flatcc_builder_end_buffer@@Base>:
   16ce8:	push	{r4, sl, fp, lr}
   16cec:	add	fp, sp, #8
   16cf0:	sub	sp, sp, #32
   16cf4:	str	r0, [fp, #-16]
   16cf8:	str	r1, [sp, #20]
   16cfc:	ldr	r0, [fp, #-16]
   16d00:	ldrh	r0, [r0, #164]	; 0xa4
   16d04:	and	r0, r0, #2
   16d08:	str	r0, [sp, #12]
   16d0c:	ldr	r0, [fp, #-16]
   16d10:	ldr	r0, [r0, #152]	; 0x98
   16d14:	cmp	r0, #0
   16d18:	movw	r0, #0
   16d1c:	moveq	r0, #1
   16d20:	tst	r0, #1
   16d24:	movw	r0, #0
   16d28:	moveq	r0, #1
   16d2c:	ldr	r1, [sp, #12]
   16d30:	orr	r0, r1, r0
   16d34:	str	r0, [sp, #12]
   16d38:	ldr	r0, [fp, #-16]
   16d3c:	ldr	r0, [r0, #32]
   16d40:	ldrh	r0, [r0, #14]
   16d44:	cmp	r0, #1
   16d48:	bne	16d50 <flatcc_builder_end_buffer@@Base+0x68>
   16d4c:	b	16d70 <flatcc_builder_end_buffer@@Base+0x88>
   16d50:	ldr	r0, [pc, #244]	; 16e4c <flatcc_builder_end_buffer@@Base+0x164>
   16d54:	add	r0, pc, r0
   16d58:	ldr	r1, [pc, #240]	; 16e50 <flatcc_builder_end_buffer@@Base+0x168>
   16d5c:	add	r1, pc, r1
   16d60:	ldr	r2, [pc, #236]	; 16e54 <flatcc_builder_end_buffer@@Base+0x16c>
   16d64:	add	r3, pc, r2
   16d68:	movw	r2, #838	; 0x346
   16d6c:	bl	12450 <__assert_fail@plt>
   16d70:	ldr	r0, [fp, #-16]
   16d74:	ldr	r1, [fp, #-16]
   16d78:	ldrh	r1, [r1, #132]	; 0x84
   16d7c:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   16d80:	ldr	r0, [fp, #-16]
   16d84:	ldr	r1, [fp, #-16]
   16d88:	add	r1, r1, #168	; 0xa8
   16d8c:	ldr	lr, [fp, #-16]
   16d90:	ldrh	lr, [lr, #132]	; 0x84
   16d94:	ldr	r3, [sp, #20]
   16d98:	ldr	r2, [fp, #-16]
   16d9c:	ldrh	r2, [r2, #128]	; 0x80
   16da0:	ldr	ip, [sp, #12]
   16da4:	uxth	lr, lr
   16da8:	str	r2, [sp, #8]
   16dac:	mov	r2, lr
   16db0:	ldr	lr, [sp, #8]
   16db4:	uxth	r4, lr
   16db8:	str	r4, [sp]
   16dbc:	str	ip, [sp, #4]
   16dc0:	bl	1647c <flatcc_builder_create_buffer@@Base>
   16dc4:	str	r0, [sp, #16]
   16dc8:	movw	r1, #0
   16dcc:	cmp	r1, r0
   16dd0:	bne	16de0 <flatcc_builder_end_buffer@@Base+0xf8>
   16dd4:	movw	r0, #0
   16dd8:	str	r0, [fp, #-12]
   16ddc:	b	16e40 <flatcc_builder_end_buffer@@Base+0x158>
   16de0:	ldr	r0, [fp, #-16]
   16de4:	ldr	r0, [r0, #32]
   16de8:	ldr	r0, [r0, #20]
   16dec:	ldr	r1, [fp, #-16]
   16df0:	str	r0, [r1, #144]	; 0x90
   16df4:	ldr	r0, [fp, #-16]
   16df8:	ldr	r0, [r0, #32]
   16dfc:	ldr	r0, [r0, #28]
   16e00:	ldr	r1, [fp, #-16]
   16e04:	str	r0, [r1, #152]	; 0x98
   16e08:	ldr	r0, [fp, #-16]
   16e0c:	ldr	r0, [r0, #32]
   16e10:	ldr	r0, [r0, #16]
   16e14:	ldr	r1, [fp, #-16]
   16e18:	str	r0, [r1, #168]	; 0xa8
   16e1c:	ldr	r0, [fp, #-16]
   16e20:	ldr	r0, [r0, #32]
   16e24:	ldrh	r0, [r0, #32]
   16e28:	ldr	r1, [fp, #-16]
   16e2c:	strh	r0, [r1, #164]	; 0xa4
   16e30:	ldr	r0, [fp, #-16]
   16e34:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   16e38:	ldr	r0, [sp, #16]
   16e3c:	str	r0, [fp, #-12]
   16e40:	ldr	r0, [fp, #-12]
   16e44:	sub	sp, fp, #8
   16e48:	pop	{r4, sl, fp, pc}
   16e4c:	andeq	r6, r0, sl, ror r0
   16e50:	andeq	r5, r0, ip, lsr #28
   16e54:	muleq	r0, r6, r0
   16e58:	push	{fp, lr}
   16e5c:	mov	fp, sp
   16e60:	sub	sp, sp, #8
   16e64:	str	r0, [sp, #4]
   16e68:	ldr	r0, [sp, #4]
   16e6c:	ldr	r0, [r0, #16]
   16e70:	ldr	r1, [sp, #4]
   16e74:	ldr	r2, [r1, #20]
   16e78:	movw	r1, #0
   16e7c:	and	r1, r1, #255	; 0xff
   16e80:	bl	12420 <memset@plt>
   16e84:	ldr	r0, [sp, #4]
   16e88:	ldr	r0, [r0, #32]
   16e8c:	ldr	r0, [r0, #8]
   16e90:	ldr	r1, [sp, #4]
   16e94:	str	r0, [r1, #20]
   16e98:	ldr	r0, [sp, #4]
   16e9c:	ldr	r0, [r0, #32]
   16ea0:	ldr	r0, [r0]
   16ea4:	ldr	r1, [sp, #4]
   16ea8:	str	r0, [r1, #28]
   16eac:	ldr	r0, [sp, #4]
   16eb0:	ldr	r1, [sp, #4]
   16eb4:	ldr	r1, [r1, #32]
   16eb8:	ldr	r1, [r1, #4]
   16ebc:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   16ec0:	ldr	r0, [sp, #4]
   16ec4:	ldr	r1, [sp, #4]
   16ec8:	ldrh	r1, [r1, #130]	; 0x82
   16ecc:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   16ed0:	ldr	r0, [sp, #4]
   16ed4:	ldr	r0, [r0, #32]
   16ed8:	ldrh	r0, [r0, #12]
   16edc:	ldr	r1, [sp, #4]
   16ee0:	strh	r0, [r1, #130]	; 0x82
   16ee4:	ldr	r0, [sp, #4]
   16ee8:	ldr	r1, [r0, #32]
   16eec:	mvn	r2, #35	; 0x23
   16ef0:	add	r1, r1, r2
   16ef4:	str	r1, [r0, #32]
   16ef8:	ldr	r0, [sp, #4]
   16efc:	ldr	r1, [r0, #156]	; 0x9c
   16f00:	mvn	r2, #0
   16f04:	add	r1, r1, r2
   16f08:	str	r1, [r0, #156]	; 0x9c
   16f0c:	mov	sp, fp
   16f10:	pop	{fp, pc}

00016f14 <flatcc_builder_start_struct@@Base>:
   16f14:	push	{fp, lr}
   16f18:	mov	fp, sp
   16f1c:	sub	sp, sp, #16
   16f20:	str	r0, [sp, #8]
   16f24:	str	r1, [sp, #4]
   16f28:	strh	r2, [sp, #2]
   16f2c:	ldr	r0, [sp, #8]
   16f30:	ldrh	r1, [sp, #2]
   16f34:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   16f38:	cmp	r0, #0
   16f3c:	beq	16f4c <flatcc_builder_start_struct@@Base+0x38>
   16f40:	movw	r0, #0
   16f44:	str	r0, [fp, #-4]
   16f48:	b	16f78 <flatcc_builder_start_struct@@Base+0x64>
   16f4c:	ldr	r0, [sp, #8]
   16f50:	ldr	r0, [r0, #32]
   16f54:	movw	r1, #2
   16f58:	strh	r1, [r0, #14]
   16f5c:	ldr	r0, [sp, #8]
   16f60:	mvn	r1, #3
   16f64:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   16f68:	ldr	r0, [sp, #8]
   16f6c:	ldr	r1, [sp, #4]
   16f70:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   16f74:	str	r0, [fp, #-4]
   16f78:	ldr	r0, [fp, #-4]
   16f7c:	mov	sp, fp
   16f80:	pop	{fp, pc}
   16f84:	sub	sp, sp, #12
   16f88:	str	r0, [sp, #8]
   16f8c:	str	r1, [sp, #4]
   16f90:	ldr	r0, [sp, #8]
   16f94:	add	r0, r0, #52	; 0x34
   16f98:	add	r0, r0, #8
   16f9c:	str	r0, [sp]
   16fa0:	ldr	r0, [sp, #8]
   16fa4:	ldr	r0, [r0, #60]	; 0x3c
   16fa8:	ldr	r1, [sp, #8]
   16fac:	ldr	r1, [r1, #28]
   16fb0:	add	r0, r0, r1
   16fb4:	ldr	r1, [sp, #8]
   16fb8:	str	r0, [r1, #16]
   16fbc:	ldr	r0, [sp]
   16fc0:	ldr	r0, [r0, #4]
   16fc4:	ldr	r1, [sp, #8]
   16fc8:	ldr	r1, [r1, #28]
   16fcc:	sub	r0, r0, r1
   16fd0:	ldr	r1, [sp, #8]
   16fd4:	str	r0, [r1, #24]
   16fd8:	ldr	r0, [sp, #8]
   16fdc:	ldr	r0, [r0, #24]
   16fe0:	ldr	r1, [sp, #4]
   16fe4:	cmp	r0, r1
   16fe8:	bls	16ff8 <flatcc_builder_start_struct@@Base+0xe4>
   16fec:	ldr	r0, [sp, #4]
   16ff0:	ldr	r1, [sp, #8]
   16ff4:	str	r0, [r1, #24]
   16ff8:	ldr	r0, [sp, #4]
   16ffc:	ldr	r1, [sp, #8]
   17000:	ldr	r1, [r1, #32]
   17004:	str	r0, [r1, #4]
   17008:	add	sp, sp, #12
   1700c:	bx	lr
   17010:	push	{fp, lr}
   17014:	mov	fp, sp
   17018:	sub	sp, sp, #16
   1701c:	str	r0, [sp, #8]
   17020:	str	r1, [sp, #4]
   17024:	ldr	r0, [sp, #8]
   17028:	ldr	r0, [r0, #20]
   1702c:	str	r0, [sp]
   17030:	ldr	r0, [sp, #4]
   17034:	ldr	r1, [sp, #8]
   17038:	ldr	r2, [r1, #20]
   1703c:	add	r0, r2, r0
   17040:	str	r0, [r1, #20]
   17044:	ldr	r1, [sp, #8]
   17048:	ldr	r1, [r1, #24]
   1704c:	cmp	r0, r1
   17050:	bcc	17084 <flatcc_builder_start_struct@@Base+0x170>
   17054:	ldr	r0, [sp, #8]
   17058:	ldr	r1, [sp, #8]
   1705c:	ldr	r1, [r1, #20]
   17060:	add	r1, r1, #1
   17064:	mvn	r2, #3
   17068:	bl	1b180 <flatcc_builder_get_emit_context@@Base+0x40>
   1706c:	cmp	r0, #0
   17070:	beq	17080 <flatcc_builder_start_struct@@Base+0x16c>
   17074:	movw	r0, #0
   17078:	str	r0, [fp, #-4]
   1707c:	b	17098 <flatcc_builder_start_struct@@Base+0x184>
   17080:	b	17084 <flatcc_builder_start_struct@@Base+0x170>
   17084:	ldr	r0, [sp, #8]
   17088:	ldr	r0, [r0, #16]
   1708c:	ldr	r1, [sp]
   17090:	add	r0, r0, r1
   17094:	str	r0, [fp, #-4]
   17098:	ldr	r0, [fp, #-4]
   1709c:	mov	sp, fp
   170a0:	pop	{fp, pc}

000170a4 <flatcc_builder_struct_edit@@Base>:
   170a4:	sub	sp, sp, #4
   170a8:	str	r0, [sp]
   170ac:	ldr	r0, [sp]
   170b0:	ldr	r0, [r0, #16]
   170b4:	add	sp, sp, #4
   170b8:	bx	lr

000170bc <flatcc_builder_end_struct@@Base>:
   170bc:	push	{fp, lr}
   170c0:	mov	fp, sp
   170c4:	sub	sp, sp, #16
   170c8:	str	r0, [sp, #8]
   170cc:	ldr	r0, [sp, #8]
   170d0:	ldr	r0, [r0, #32]
   170d4:	ldrh	r0, [r0, #14]
   170d8:	cmp	r0, #2
   170dc:	bne	170e4 <flatcc_builder_end_struct@@Base+0x28>
   170e0:	b	17104 <flatcc_builder_end_struct@@Base+0x48>
   170e4:	ldr	r0, [pc, #112]	; 1715c <flatcc_builder_end_struct@@Base+0xa0>
   170e8:	add	r0, pc, r0
   170ec:	ldr	r1, [pc, #108]	; 17160 <flatcc_builder_end_struct@@Base+0xa4>
   170f0:	add	r1, pc, r1
   170f4:	ldr	r2, [pc, #104]	; 17164 <flatcc_builder_end_struct@@Base+0xa8>
   170f8:	add	r3, pc, r2
   170fc:	movw	r2, #872	; 0x368
   17100:	bl	12450 <__assert_fail@plt>
   17104:	ldr	r0, [sp, #8]
   17108:	ldr	r1, [sp, #8]
   1710c:	ldr	r1, [r1, #16]
   17110:	ldr	r2, [sp, #8]
   17114:	ldr	r2, [r2, #20]
   17118:	ldr	r3, [sp, #8]
   1711c:	ldrh	r3, [r3, #130]	; 0x82
   17120:	bl	1686c <flatcc_builder_create_struct@@Base>
   17124:	str	r0, [sp, #4]
   17128:	movw	r1, #0
   1712c:	cmp	r1, r0
   17130:	bne	17140 <flatcc_builder_end_struct@@Base+0x84>
   17134:	movw	r0, #0
   17138:	str	r0, [fp, #-4]
   1713c:	b	17150 <flatcc_builder_end_struct@@Base+0x94>
   17140:	ldr	r0, [sp, #8]
   17144:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   17148:	ldr	r0, [sp, #4]
   1714c:	str	r0, [fp, #-4]
   17150:	ldr	r0, [fp, #-4]
   17154:	mov	sp, fp
   17158:	pop	{fp, pc}
   1715c:	andeq	r5, r0, fp, ror #26
   17160:	muleq	r0, r8, sl
   17164:	andeq	r5, r0, r7, lsl #27

00017168 <flatcc_builder_extend_vector@@Base>:
   17168:	push	{fp, lr}
   1716c:	mov	fp, sp
   17170:	sub	sp, sp, #16
   17174:	str	r0, [sp, #8]
   17178:	str	r1, [sp, #4]
   1717c:	ldr	r0, [sp, #8]
   17180:	ldr	r1, [sp, #4]
   17184:	ldr	r2, [sp, #8]
   17188:	ldr	r2, [r2, #32]
   1718c:	ldr	r2, [r2, #24]
   17190:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   17194:	cmp	r0, #0
   17198:	beq	171a8 <flatcc_builder_extend_vector@@Base+0x40>
   1719c:	movw	r0, #0
   171a0:	str	r0, [fp, #-4]
   171a4:	b	171c8 <flatcc_builder_extend_vector@@Base+0x60>
   171a8:	ldr	r0, [sp, #8]
   171ac:	ldr	r1, [sp, #8]
   171b0:	ldr	r1, [r1, #32]
   171b4:	ldr	r1, [r1, #16]
   171b8:	ldr	r2, [sp, #4]
   171bc:	mul	r1, r1, r2
   171c0:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   171c4:	str	r0, [fp, #-4]
   171c8:	ldr	r0, [fp, #-4]
   171cc:	mov	sp, fp
   171d0:	pop	{fp, pc}
   171d4:	push	{fp, lr}
   171d8:	mov	fp, sp
   171dc:	sub	sp, sp, #24
   171e0:	str	r0, [fp, #-8]
   171e4:	str	r1, [sp, #12]
   171e8:	str	r2, [sp, #8]
   171ec:	ldr	r0, [fp, #-8]
   171f0:	ldr	r0, [r0, #32]
   171f4:	ldr	r0, [r0, #20]
   171f8:	str	r0, [sp, #4]
   171fc:	ldr	r0, [sp, #4]
   17200:	ldr	r1, [sp, #12]
   17204:	add	r0, r0, r1
   17208:	str	r0, [sp]
   1720c:	ldr	r0, [sp, #4]
   17210:	ldr	r1, [sp]
   17214:	cmp	r0, r1
   17218:	bhi	1722c <flatcc_builder_extend_vector@@Base+0xc4>
   1721c:	ldr	r0, [sp]
   17220:	ldr	r1, [sp, #8]
   17224:	cmp	r0, r1
   17228:	bls	1727c <flatcc_builder_extend_vector@@Base+0x114>
   1722c:	ldr	r0, [sp, #4]
   17230:	ldr	r1, [sp]
   17234:	cmp	r0, r1
   17238:	bhi	17250 <flatcc_builder_extend_vector@@Base+0xe8>
   1723c:	ldr	r0, [sp]
   17240:	ldr	r1, [sp, #8]
   17244:	cmp	r0, r1
   17248:	bhi	17250 <flatcc_builder_extend_vector@@Base+0xe8>
   1724c:	b	17270 <flatcc_builder_extend_vector@@Base+0x108>
   17250:	ldr	r0, [pc, #72]	; 172a0 <flatcc_builder_extend_vector@@Base+0x138>
   17254:	add	r0, pc, r0
   17258:	ldr	r1, [pc, #68]	; 172a4 <flatcc_builder_extend_vector@@Base+0x13c>
   1725c:	add	r1, pc, r1
   17260:	ldr	r2, [pc, #64]	; 172a8 <flatcc_builder_extend_vector@@Base+0x140>
   17264:	add	r3, pc, r2
   17268:	movw	r2, #892	; 0x37c
   1726c:	bl	12450 <__assert_fail@plt>
   17270:	mvn	r0, #0
   17274:	str	r0, [fp, #-4]
   17278:	b	17294 <flatcc_builder_extend_vector@@Base+0x12c>
   1727c:	ldr	r0, [sp]
   17280:	ldr	r1, [fp, #-8]
   17284:	ldr	r1, [r1, #32]
   17288:	str	r0, [r1, #20]
   1728c:	movw	r0, #0
   17290:	str	r0, [fp, #-4]
   17294:	ldr	r0, [fp, #-4]
   17298:	mov	sp, fp
   1729c:	pop	{fp, pc}
   172a0:	strdeq	r6, [r0], -sl
   172a4:	andeq	r5, r0, ip, lsr #18
   172a8:	andeq	r6, r0, r5, lsl #20

000172ac <flatcc_builder_vector_push@@Base>:
   172ac:	push	{fp, lr}
   172b0:	mov	fp, sp
   172b4:	sub	sp, sp, #16
   172b8:	str	r0, [sp, #8]
   172bc:	str	r1, [sp, #4]
   172c0:	ldr	r0, [sp, #8]
   172c4:	ldr	r0, [r0, #32]
   172c8:	ldrh	r0, [r0, #14]
   172cc:	cmp	r0, #4
   172d0:	bne	172d8 <flatcc_builder_vector_push@@Base+0x2c>
   172d4:	b	172f8 <flatcc_builder_vector_push@@Base+0x4c>
   172d8:	ldr	r0, [pc, #196]	; 173a4 <flatcc_builder_vector_push@@Base+0xf8>
   172dc:	add	r0, pc, r0
   172e0:	ldr	r1, [pc, #192]	; 173a8 <flatcc_builder_vector_push@@Base+0xfc>
   172e4:	add	r1, pc, r1
   172e8:	ldr	r2, [pc, #188]	; 173ac <flatcc_builder_vector_push@@Base+0x100>
   172ec:	add	r3, pc, r2
   172f0:	movw	r2, #907	; 0x38b
   172f4:	bl	12450 <__assert_fail@plt>
   172f8:	ldr	r0, [sp, #8]
   172fc:	ldr	r0, [r0, #32]
   17300:	ldr	r0, [r0, #20]
   17304:	ldr	r1, [sp, #8]
   17308:	ldr	r1, [r1, #32]
   1730c:	ldr	r1, [r1, #24]
   17310:	cmp	r0, r1
   17314:	bls	17368 <flatcc_builder_vector_push@@Base+0xbc>
   17318:	ldr	r0, [sp, #8]
   1731c:	ldr	r0, [r0, #32]
   17320:	ldr	r0, [r0, #20]
   17324:	ldr	r1, [sp, #8]
   17328:	ldr	r1, [r1, #32]
   1732c:	ldr	r1, [r1, #24]
   17330:	cmp	r0, r1
   17334:	bhi	1733c <flatcc_builder_vector_push@@Base+0x90>
   17338:	b	1735c <flatcc_builder_vector_push@@Base+0xb0>
   1733c:	ldr	r0, [pc, #108]	; 173b0 <flatcc_builder_vector_push@@Base+0x104>
   17340:	add	r0, pc, r0
   17344:	ldr	r1, [pc, #104]	; 173b4 <flatcc_builder_vector_push@@Base+0x108>
   17348:	add	r1, pc, r1
   1734c:	ldr	r2, [pc, #100]	; 173b8 <flatcc_builder_vector_push@@Base+0x10c>
   17350:	add	r3, pc, r2
   17354:	movw	r2, #908	; 0x38c
   17358:	bl	12450 <__assert_fail@plt>
   1735c:	movw	r0, #0
   17360:	str	r0, [fp, #-4]
   17364:	b	17398 <flatcc_builder_vector_push@@Base+0xec>
   17368:	ldr	r0, [sp, #8]
   1736c:	ldr	r0, [r0, #32]
   17370:	ldr	r1, [r0, #20]
   17374:	add	r1, r1, #1
   17378:	str	r1, [r0, #20]
   1737c:	ldr	r0, [sp, #8]
   17380:	ldr	r1, [sp, #4]
   17384:	ldr	r2, [sp, #8]
   17388:	ldr	r2, [r2, #32]
   1738c:	ldr	r2, [r2, #16]
   17390:	bl	173bc <flatcc_builder_vector_push@@Base+0x110>
   17394:	str	r0, [fp, #-4]
   17398:	ldr	r0, [fp, #-4]
   1739c:	mov	sp, fp
   173a0:	pop	{fp, pc}
   173a4:	andeq	r5, r0, r6, ror #23
   173a8:	andeq	r5, r0, r4, lsr #17
   173ac:	andeq	r5, r0, r2, lsl #24
   173b0:	strdeq	r5, [r0], -r1
   173b4:	andeq	r5, r0, r0, asr #16
   173b8:	muleq	r0, lr, fp
   173bc:	push	{fp, lr}
   173c0:	mov	fp, sp
   173c4:	sub	sp, sp, #24
   173c8:	str	r0, [fp, #-8]
   173cc:	str	r1, [sp, #12]
   173d0:	str	r2, [sp, #8]
   173d4:	ldr	r0, [fp, #-8]
   173d8:	ldr	r1, [sp, #8]
   173dc:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   173e0:	str	r0, [sp, #4]
   173e4:	movw	r1, #0
   173e8:	cmp	r0, r1
   173ec:	bne	173fc <flatcc_builder_vector_push@@Base+0x150>
   173f0:	movw	r0, #0
   173f4:	str	r0, [fp, #-4]
   173f8:	b	17414 <flatcc_builder_vector_push@@Base+0x168>
   173fc:	ldr	r0, [sp, #4]
   17400:	ldr	r1, [sp, #12]
   17404:	ldr	r2, [sp, #8]
   17408:	bl	123c0 <memcpy@plt>
   1740c:	ldr	r0, [sp, #4]
   17410:	str	r0, [fp, #-4]
   17414:	ldr	r0, [fp, #-4]
   17418:	mov	sp, fp
   1741c:	pop	{fp, pc}

00017420 <flatcc_builder_append_vector@@Base>:
   17420:	push	{fp, lr}
   17424:	mov	fp, sp
   17428:	sub	sp, sp, #16
   1742c:	str	r0, [sp, #8]
   17430:	str	r1, [sp, #4]
   17434:	str	r2, [sp]
   17438:	ldr	r0, [sp, #8]
   1743c:	ldr	r0, [r0, #32]
   17440:	ldrh	r0, [r0, #14]
   17444:	cmp	r0, #4
   17448:	bne	17450 <flatcc_builder_append_vector@@Base+0x30>
   1744c:	b	17470 <flatcc_builder_append_vector@@Base+0x50>
   17450:	ldr	r0, [pc, #116]	; 174cc <flatcc_builder_append_vector@@Base+0xac>
   17454:	add	r0, pc, r0
   17458:	ldr	r1, [pc, #112]	; 174d0 <flatcc_builder_append_vector@@Base+0xb0>
   1745c:	add	r1, pc, r1
   17460:	ldr	r2, [pc, #108]	; 174d4 <flatcc_builder_append_vector@@Base+0xb4>
   17464:	add	r3, pc, r2
   17468:	movw	r2, #915	; 0x393
   1746c:	bl	12450 <__assert_fail@plt>
   17470:	ldr	r0, [sp, #8]
   17474:	ldr	r1, [sp]
   17478:	ldr	r2, [sp, #8]
   1747c:	ldr	r2, [r2, #32]
   17480:	ldr	r2, [r2, #24]
   17484:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   17488:	cmp	r0, #0
   1748c:	beq	1749c <flatcc_builder_append_vector@@Base+0x7c>
   17490:	movw	r0, #0
   17494:	str	r0, [fp, #-4]
   17498:	b	174c0 <flatcc_builder_append_vector@@Base+0xa0>
   1749c:	ldr	r0, [sp, #8]
   174a0:	ldr	r1, [sp, #4]
   174a4:	ldr	r2, [sp, #8]
   174a8:	ldr	r2, [r2, #32]
   174ac:	ldr	r2, [r2, #16]
   174b0:	ldr	r3, [sp]
   174b4:	mul	r2, r2, r3
   174b8:	bl	173bc <flatcc_builder_vector_push@@Base+0x110>
   174bc:	str	r0, [fp, #-4]
   174c0:	ldr	r0, [fp, #-4]
   174c4:	mov	sp, fp
   174c8:	pop	{fp, pc}
   174cc:	andeq	r5, r0, lr, ror #20
   174d0:	andeq	r5, r0, ip, lsr #14
   174d4:	andeq	r5, r0, sl, lsl #22

000174d8 <flatcc_builder_extend_offset_vector@@Base>:
   174d8:	push	{fp, lr}
   174dc:	mov	fp, sp
   174e0:	sub	sp, sp, #16
   174e4:	ldr	r2, [pc, #68]	; 17530 <flatcc_builder_extend_offset_vector@@Base+0x58>
   174e8:	str	r0, [sp, #8]
   174ec:	str	r1, [sp, #4]
   174f0:	ldr	r0, [sp, #8]
   174f4:	ldr	r1, [sp, #4]
   174f8:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   174fc:	cmp	r0, #0
   17500:	beq	17510 <flatcc_builder_extend_offset_vector@@Base+0x38>
   17504:	movw	r0, #0
   17508:	str	r0, [fp, #-4]
   1750c:	b	17524 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   17510:	ldr	r0, [sp, #8]
   17514:	ldr	r1, [sp, #4]
   17518:	lsl	r1, r1, #2
   1751c:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   17520:	str	r0, [fp, #-4]
   17524:	ldr	r0, [fp, #-4]
   17528:	mov	sp, fp
   1752c:	pop	{fp, pc}
   17530:	svccc	0x00ffffff

00017534 <flatcc_builder_offset_vector_push@@Base>:
   17534:	push	{fp, lr}
   17538:	mov	fp, sp
   1753c:	sub	sp, sp, #16
   17540:	str	r0, [sp, #8]
   17544:	str	r1, [sp, #4]
   17548:	ldr	r0, [sp, #8]
   1754c:	ldr	r0, [r0, #32]
   17550:	ldrh	r0, [r0, #14]
   17554:	cmp	r0, #5
   17558:	bne	17560 <flatcc_builder_offset_vector_push@@Base+0x2c>
   1755c:	b	17580 <flatcc_builder_offset_vector_push@@Base+0x4c>
   17560:	ldr	r0, [pc, #152]	; 17600 <flatcc_builder_offset_vector_push@@Base+0xcc>
   17564:	add	r0, pc, r0
   17568:	ldr	r1, [pc, #148]	; 17604 <flatcc_builder_offset_vector_push@@Base+0xd0>
   1756c:	add	r1, pc, r1
   17570:	ldr	r2, [pc, #144]	; 17608 <flatcc_builder_offset_vector_push@@Base+0xd4>
   17574:	add	r3, pc, r2
   17578:	movw	r2, #934	; 0x3a6
   1757c:	bl	12450 <__assert_fail@plt>
   17580:	ldr	r0, [pc, #132]	; 1760c <flatcc_builder_offset_vector_push@@Base+0xd8>
   17584:	ldr	r1, [sp, #8]
   17588:	ldr	r1, [r1, #32]
   1758c:	ldr	r1, [r1, #20]
   17590:	cmp	r1, r0
   17594:	bne	175a4 <flatcc_builder_offset_vector_push@@Base+0x70>
   17598:	movw	r0, #0
   1759c:	str	r0, [fp, #-4]
   175a0:	b	175f4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   175a4:	ldr	r0, [sp, #8]
   175a8:	ldr	r0, [r0, #32]
   175ac:	ldr	r1, [r0, #20]
   175b0:	add	r1, r1, #1
   175b4:	str	r1, [r0, #20]
   175b8:	ldr	r0, [sp, #8]
   175bc:	movw	r1, #4
   175c0:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   175c4:	str	r0, [sp]
   175c8:	movw	r1, #0
   175cc:	cmp	r1, r0
   175d0:	bne	175e0 <flatcc_builder_offset_vector_push@@Base+0xac>
   175d4:	movw	r0, #0
   175d8:	str	r0, [fp, #-4]
   175dc:	b	175f4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   175e0:	ldr	r0, [sp, #4]
   175e4:	ldr	r1, [sp]
   175e8:	str	r0, [r1]
   175ec:	ldr	r0, [sp]
   175f0:	str	r0, [fp, #-4]
   175f4:	ldr	r0, [fp, #-4]
   175f8:	mov	sp, fp
   175fc:	pop	{fp, pc}
   17600:	andeq	r5, r0, r7, asr sl
   17604:	andeq	r5, r0, ip, lsl r6
   17608:	andeq	r5, r0, sl, ror sl
   1760c:	svccc	0x00ffffff

00017610 <flatcc_builder_append_offset_vector@@Base>:
   17610:	push	{fp, lr}
   17614:	mov	fp, sp
   17618:	sub	sp, sp, #16
   1761c:	str	r0, [sp, #8]
   17620:	str	r1, [sp, #4]
   17624:	str	r2, [sp]
   17628:	ldr	r0, [sp, #8]
   1762c:	ldr	r0, [r0, #32]
   17630:	ldrh	r0, [r0, #14]
   17634:	cmp	r0, #5
   17638:	bne	17640 <flatcc_builder_append_offset_vector@@Base+0x30>
   1763c:	b	17660 <flatcc_builder_append_offset_vector@@Base+0x50>
   17640:	ldr	r0, [pc, #96]	; 176a8 <flatcc_builder_append_offset_vector@@Base+0x98>
   17644:	add	r0, pc, r0
   17648:	ldr	r1, [pc, #92]	; 176ac <flatcc_builder_append_offset_vector@@Base+0x9c>
   1764c:	add	r1, pc, r1
   17650:	ldr	r2, [pc, #88]	; 176b0 <flatcc_builder_append_offset_vector@@Base+0xa0>
   17654:	add	r3, pc, r2
   17658:	movw	r2, #948	; 0x3b4
   1765c:	bl	12450 <__assert_fail@plt>
   17660:	ldr	r2, [pc, #76]	; 176b4 <flatcc_builder_append_offset_vector@@Base+0xa4>
   17664:	ldr	r0, [sp, #8]
   17668:	ldr	r1, [sp]
   1766c:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   17670:	cmp	r0, #0
   17674:	beq	17684 <flatcc_builder_append_offset_vector@@Base+0x74>
   17678:	movw	r0, #0
   1767c:	str	r0, [fp, #-4]
   17680:	b	1769c <flatcc_builder_append_offset_vector@@Base+0x8c>
   17684:	ldr	r0, [sp, #8]
   17688:	ldr	r1, [sp, #4]
   1768c:	ldr	r2, [sp]
   17690:	lsl	r2, r2, #2
   17694:	bl	173bc <flatcc_builder_vector_push@@Base+0x110>
   17698:	str	r0, [fp, #-4]
   1769c:	ldr	r0, [fp, #-4]
   176a0:	mov	sp, fp
   176a4:	pop	{fp, pc}
   176a8:	andeq	r5, r0, r7, ror r9
   176ac:	andeq	r5, r0, ip, lsr r5
   176b0:	strdeq	r5, [r0], -ip
   176b4:	svccc	0x00ffffff

000176b8 <flatcc_builder_extend_string@@Base>:
   176b8:	push	{fp, lr}
   176bc:	mov	fp, sp
   176c0:	sub	sp, sp, #16
   176c4:	str	r0, [sp, #8]
   176c8:	str	r1, [sp, #4]
   176cc:	ldr	r0, [sp, #8]
   176d0:	ldr	r0, [r0, #32]
   176d4:	ldrh	r0, [r0, #14]
   176d8:	cmp	r0, #6
   176dc:	bne	176e4 <flatcc_builder_extend_string@@Base+0x2c>
   176e0:	b	17704 <flatcc_builder_extend_string@@Base+0x4c>
   176e4:	ldr	r0, [pc, #88]	; 17744 <flatcc_builder_extend_string@@Base+0x8c>
   176e8:	add	r0, pc, r0
   176ec:	ldr	r1, [pc, #84]	; 17748 <flatcc_builder_extend_string@@Base+0x90>
   176f0:	add	r1, pc, r1
   176f4:	ldr	r2, [pc, #80]	; 1774c <flatcc_builder_extend_string@@Base+0x94>
   176f8:	add	r3, pc, r2
   176fc:	movw	r2, #957	; 0x3bd
   17700:	bl	12450 <__assert_fail@plt>
   17704:	ldr	r0, [sp, #8]
   17708:	ldr	r1, [sp, #4]
   1770c:	mvn	r2, #0
   17710:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   17714:	cmp	r0, #0
   17718:	beq	17728 <flatcc_builder_extend_string@@Base+0x70>
   1771c:	movw	r0, #0
   17720:	str	r0, [fp, #-4]
   17724:	b	17738 <flatcc_builder_extend_string@@Base+0x80>
   17728:	ldr	r0, [sp, #8]
   1772c:	ldr	r1, [sp, #4]
   17730:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   17734:	str	r0, [fp, #-4]
   17738:	ldr	r0, [fp, #-4]
   1773c:	mov	sp, fp
   17740:	pop	{fp, pc}
   17744:	ldrdeq	r5, [r0], -ip
   17748:	muleq	r0, r8, r4
   1774c:	strdeq	r5, [r0], -r8

00017750 <flatcc_builder_append_string@@Base>:
   17750:	push	{fp, lr}
   17754:	mov	fp, sp
   17758:	sub	sp, sp, #16
   1775c:	str	r0, [sp, #8]
   17760:	str	r1, [sp, #4]
   17764:	str	r2, [sp]
   17768:	ldr	r0, [sp, #8]
   1776c:	ldr	r0, [r0, #32]
   17770:	ldrh	r0, [r0, #14]
   17774:	cmp	r0, #6
   17778:	bne	17780 <flatcc_builder_append_string@@Base+0x30>
   1777c:	b	177a0 <flatcc_builder_append_string@@Base+0x50>
   17780:	ldr	r0, [pc, #92]	; 177e4 <flatcc_builder_append_string@@Base+0x94>
   17784:	add	r0, pc, r0
   17788:	ldr	r1, [pc, #88]	; 177e8 <flatcc_builder_append_string@@Base+0x98>
   1778c:	add	r1, pc, r1
   17790:	ldr	r2, [pc, #84]	; 177ec <flatcc_builder_append_string@@Base+0x9c>
   17794:	add	r3, pc, r2
   17798:	movw	r2, #966	; 0x3c6
   1779c:	bl	12450 <__assert_fail@plt>
   177a0:	ldr	r0, [sp, #8]
   177a4:	ldr	r1, [sp]
   177a8:	mvn	r2, #0
   177ac:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   177b0:	cmp	r0, #0
   177b4:	beq	177c4 <flatcc_builder_append_string@@Base+0x74>
   177b8:	movw	r0, #0
   177bc:	str	r0, [fp, #-4]
   177c0:	b	177d8 <flatcc_builder_append_string@@Base+0x88>
   177c4:	ldr	r0, [sp, #8]
   177c8:	ldr	r1, [sp, #4]
   177cc:	ldr	r2, [sp]
   177d0:	bl	173bc <flatcc_builder_vector_push@@Base+0x110>
   177d4:	str	r0, [fp, #-4]
   177d8:	ldr	r0, [fp, #-4]
   177dc:	mov	sp, fp
   177e0:	pop	{fp, pc}
   177e4:	andeq	r5, r0, r0, asr #18
   177e8:	strdeq	r5, [r0], -ip
   177ec:	muleq	r0, fp, r9

000177f0 <flatcc_builder_append_string_str@@Base>:
   177f0:	push	{fp, lr}
   177f4:	mov	fp, sp
   177f8:	sub	sp, sp, #24
   177fc:	str	r0, [fp, #-4]
   17800:	str	r1, [fp, #-8]
   17804:	ldr	r0, [fp, #-4]
   17808:	ldr	r1, [fp, #-8]
   1780c:	ldr	r2, [fp, #-8]
   17810:	str	r0, [sp, #12]
   17814:	mov	r0, r2
   17818:	str	r1, [sp, #8]
   1781c:	bl	12408 <strlen@plt>
   17820:	ldr	r1, [sp, #12]
   17824:	str	r0, [sp, #4]
   17828:	mov	r0, r1
   1782c:	ldr	r1, [sp, #8]
   17830:	ldr	r2, [sp, #4]
   17834:	bl	17750 <flatcc_builder_append_string@@Base>
   17838:	mov	sp, fp
   1783c:	pop	{fp, pc}

00017840 <flatcc_builder_append_string_strn@@Base>:
   17840:	push	{fp, lr}
   17844:	mov	fp, sp
   17848:	sub	sp, sp, #24
   1784c:	str	r0, [fp, #-4]
   17850:	str	r1, [fp, #-8]
   17854:	str	r2, [sp, #12]
   17858:	ldr	r0, [fp, #-4]
   1785c:	ldr	r1, [fp, #-8]
   17860:	ldr	r2, [fp, #-8]
   17864:	ldr	r3, [sp, #12]
   17868:	str	r0, [sp, #8]
   1786c:	mov	r0, r2
   17870:	str	r1, [sp, #4]
   17874:	mov	r1, r3
   17878:	bl	1789c <flatcc_builder_append_string_strn@@Base+0x5c>
   1787c:	ldr	r1, [sp, #8]
   17880:	str	r0, [sp]
   17884:	mov	r0, r1
   17888:	ldr	r1, [sp, #4]
   1788c:	ldr	r2, [sp]
   17890:	bl	17750 <flatcc_builder_append_string@@Base>
   17894:	mov	sp, fp
   17898:	pop	{fp, pc}
   1789c:	push	{fp, lr}
   178a0:	mov	fp, sp
   178a4:	sub	sp, sp, #16
   178a8:	str	r0, [fp, #-4]
   178ac:	str	r1, [sp, #8]
   178b0:	ldr	r0, [fp, #-4]
   178b4:	ldr	r2, [sp, #8]
   178b8:	mov	r1, #0
   178bc:	bl	12438 <memchr@plt>
   178c0:	str	r0, [sp, #4]
   178c4:	ldr	r0, [sp, #4]
   178c8:	movw	r1, #0
   178cc:	cmp	r0, r1
   178d0:	beq	178e8 <flatcc_builder_append_string_strn@@Base+0xa8>
   178d4:	ldr	r0, [sp, #4]
   178d8:	ldr	r1, [fp, #-4]
   178dc:	sub	r0, r0, r1
   178e0:	str	r0, [sp]
   178e4:	b	178f0 <flatcc_builder_append_string_strn@@Base+0xb0>
   178e8:	ldr	r0, [sp, #8]
   178ec:	str	r0, [sp]
   178f0:	ldr	r0, [sp]
   178f4:	mov	sp, fp
   178f8:	pop	{fp, pc}

000178fc <flatcc_builder_truncate_vector@@Base>:
   178fc:	push	{fp, lr}
   17900:	mov	fp, sp
   17904:	sub	sp, sp, #16
   17908:	str	r0, [sp, #8]
   1790c:	str	r1, [sp, #4]
   17910:	ldr	r0, [sp, #8]
   17914:	ldr	r0, [r0, #32]
   17918:	ldrh	r0, [r0, #14]
   1791c:	cmp	r0, #4
   17920:	bne	17928 <flatcc_builder_truncate_vector@@Base+0x2c>
   17924:	b	17948 <flatcc_builder_truncate_vector@@Base+0x4c>
   17928:	ldr	r0, [pc, #192]	; 179f0 <flatcc_builder_truncate_vector@@Base+0xf4>
   1792c:	add	r0, pc, r0
   17930:	ldr	r1, [pc, #188]	; 179f4 <flatcc_builder_truncate_vector@@Base+0xf8>
   17934:	add	r1, pc, r1
   17938:	ldr	r2, [pc, #184]	; 179f8 <flatcc_builder_truncate_vector@@Base+0xfc>
   1793c:	add	r3, pc, r2
   17940:	movw	r2, #985	; 0x3d9
   17944:	bl	12450 <__assert_fail@plt>
   17948:	ldr	r0, [sp, #8]
   1794c:	ldr	r0, [r0, #32]
   17950:	ldr	r0, [r0, #20]
   17954:	ldr	r1, [sp, #4]
   17958:	cmp	r0, r1
   1795c:	bcs	179a8 <flatcc_builder_truncate_vector@@Base+0xac>
   17960:	ldr	r0, [sp, #8]
   17964:	ldr	r0, [r0, #32]
   17968:	ldr	r0, [r0, #20]
   1796c:	ldr	r1, [sp, #4]
   17970:	cmp	r0, r1
   17974:	bcc	1797c <flatcc_builder_truncate_vector@@Base+0x80>
   17978:	b	1799c <flatcc_builder_truncate_vector@@Base+0xa0>
   1797c:	ldr	r0, [pc, #120]	; 179fc <flatcc_builder_truncate_vector@@Base+0x100>
   17980:	add	r0, pc, r0
   17984:	ldr	r1, [pc, #116]	; 17a00 <flatcc_builder_truncate_vector@@Base+0x104>
   17988:	add	r1, pc, r1
   1798c:	ldr	r2, [pc, #112]	; 17a04 <flatcc_builder_truncate_vector@@Base+0x108>
   17990:	add	r3, pc, r2
   17994:	movw	r2, #986	; 0x3da
   17998:	bl	12450 <__assert_fail@plt>
   1799c:	mvn	r0, #0
   179a0:	str	r0, [fp, #-4]
   179a4:	b	179e4 <flatcc_builder_truncate_vector@@Base+0xe8>
   179a8:	ldr	r0, [sp, #4]
   179ac:	ldr	r1, [sp, #8]
   179b0:	ldr	r1, [r1, #32]
   179b4:	ldr	r2, [r1, #20]
   179b8:	sub	r0, r2, r0
   179bc:	str	r0, [r1, #20]
   179c0:	ldr	r0, [sp, #8]
   179c4:	ldr	r1, [sp, #8]
   179c8:	ldr	r1, [r1, #32]
   179cc:	ldr	r1, [r1, #16]
   179d0:	ldr	r2, [sp, #4]
   179d4:	mul	r1, r1, r2
   179d8:	bl	17a08 <flatcc_builder_truncate_vector@@Base+0x10c>
   179dc:	movw	r0, #0
   179e0:	str	r0, [fp, #-4]
   179e4:	ldr	r0, [fp, #-4]
   179e8:	mov	sp, fp
   179ec:	pop	{fp, pc}
   179f0:	muleq	r0, r6, r5
   179f4:	andeq	r5, r0, r4, asr r2
   179f8:	andeq	r5, r0, r0, asr #16
   179fc:	andeq	r5, r0, fp, lsr r8
   17a00:	andeq	r5, r0, r0, lsl #4
   17a04:	andeq	r5, r0, ip, ror #15
   17a08:	push	{fp, lr}
   17a0c:	mov	fp, sp
   17a10:	sub	sp, sp, #8
   17a14:	str	r0, [sp, #4]
   17a18:	str	r1, [sp]
   17a1c:	ldr	r0, [sp]
   17a20:	ldr	r1, [sp, #4]
   17a24:	ldr	r2, [r1, #20]
   17a28:	sub	r0, r2, r0
   17a2c:	str	r0, [r1, #20]
   17a30:	ldr	r0, [sp, #4]
   17a34:	ldr	r0, [r0, #16]
   17a38:	ldr	r1, [sp, #4]
   17a3c:	ldr	r1, [r1, #20]
   17a40:	add	r0, r0, r1
   17a44:	ldr	r2, [sp]
   17a48:	movw	r1, #0
   17a4c:	and	r1, r1, #255	; 0xff
   17a50:	bl	12420 <memset@plt>
   17a54:	mov	sp, fp
   17a58:	pop	{fp, pc}

00017a5c <flatcc_builder_truncate_offset_vector@@Base>:
   17a5c:	push	{fp, lr}
   17a60:	mov	fp, sp
   17a64:	sub	sp, sp, #16
   17a68:	str	r0, [sp, #8]
   17a6c:	str	r1, [sp, #4]
   17a70:	ldr	r0, [sp, #8]
   17a74:	ldr	r0, [r0, #32]
   17a78:	ldrh	r0, [r0, #14]
   17a7c:	cmp	r0, #5
   17a80:	bne	17a88 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   17a84:	b	17aa8 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   17a88:	ldr	r0, [pc, #192]	; 17b50 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   17a8c:	add	r0, pc, r0
   17a90:	ldr	r1, [pc, #188]	; 17b54 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   17a94:	add	r1, pc, r1
   17a98:	ldr	r2, [pc, #184]	; 17b58 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   17a9c:	add	r3, pc, r2
   17aa0:	movw	r2, #994	; 0x3e2
   17aa4:	bl	12450 <__assert_fail@plt>
   17aa8:	ldr	r0, [sp, #8]
   17aac:	ldr	r0, [r0, #32]
   17ab0:	ldr	r0, [r0, #20]
   17ab4:	ldr	r1, [sp, #4]
   17ab8:	cmp	r0, r1
   17abc:	bcs	17b08 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   17ac0:	ldr	r0, [sp, #8]
   17ac4:	ldr	r0, [r0, #32]
   17ac8:	ldr	r0, [r0, #20]
   17acc:	ldr	r1, [sp, #4]
   17ad0:	cmp	r0, r1
   17ad4:	bcc	17adc <flatcc_builder_truncate_offset_vector@@Base+0x80>
   17ad8:	b	17afc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   17adc:	ldr	r0, [pc, #120]	; 17b5c <flatcc_builder_truncate_offset_vector@@Base+0x100>
   17ae0:	add	r0, pc, r0
   17ae4:	ldr	r1, [pc, #116]	; 17b60 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   17ae8:	add	r1, pc, r1
   17aec:	ldr	r2, [pc, #112]	; 17b64 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   17af0:	add	r3, pc, r2
   17af4:	movw	r2, #995	; 0x3e3
   17af8:	bl	12450 <__assert_fail@plt>
   17afc:	mvn	r0, #0
   17b00:	str	r0, [fp, #-4]
   17b04:	b	17b44 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   17b08:	ldr	r0, [sp, #4]
   17b0c:	ldr	r1, [sp, #8]
   17b10:	ldr	r1, [r1, #32]
   17b14:	ldr	r2, [r1, #20]
   17b18:	sub	r0, r2, r0
   17b1c:	str	r0, [r1, #20]
   17b20:	ldr	r0, [sp, #8]
   17b24:	ldr	r1, [sp, #8]
   17b28:	ldr	r1, [r1, #32]
   17b2c:	ldr	r1, [r1, #16]
   17b30:	ldr	r2, [sp, #4]
   17b34:	mul	r1, r1, r2
   17b38:	bl	17a08 <flatcc_builder_truncate_vector@@Base+0x10c>
   17b3c:	movw	r0, #0
   17b40:	str	r0, [fp, #-4]
   17b44:	ldr	r0, [fp, #-4]
   17b48:	mov	sp, fp
   17b4c:	pop	{fp, pc}
   17b50:	andeq	r5, r0, pc, lsr #10
   17b54:	strdeq	r5, [r0], -r4
   17b58:	andeq	r5, r0, r3, asr #14
   17b5c:	andeq	r5, r0, r5, asr #14
   17b60:	andeq	r5, r0, r0, lsr #1
   17b64:	andeq	r5, r0, pc, ror #13

00017b68 <flatcc_builder_truncate_string@@Base>:
   17b68:	push	{fp, lr}
   17b6c:	mov	fp, sp
   17b70:	sub	sp, sp, #16
   17b74:	str	r0, [sp, #8]
   17b78:	str	r1, [sp, #4]
   17b7c:	ldr	r0, [sp, #8]
   17b80:	ldr	r0, [r0, #32]
   17b84:	ldrh	r0, [r0, #14]
   17b88:	cmp	r0, #6
   17b8c:	bne	17b94 <flatcc_builder_truncate_string@@Base+0x2c>
   17b90:	b	17bb4 <flatcc_builder_truncate_string@@Base+0x4c>
   17b94:	ldr	r0, [pc, #176]	; 17c4c <flatcc_builder_truncate_string@@Base+0xe4>
   17b98:	add	r0, pc, r0
   17b9c:	ldr	r1, [pc, #172]	; 17c50 <flatcc_builder_truncate_string@@Base+0xe8>
   17ba0:	add	r1, pc, r1
   17ba4:	ldr	r2, [pc, #168]	; 17c54 <flatcc_builder_truncate_string@@Base+0xec>
   17ba8:	add	r3, pc, r2
   17bac:	movw	r2, #1003	; 0x3eb
   17bb0:	bl	12450 <__assert_fail@plt>
   17bb4:	ldr	r0, [sp, #8]
   17bb8:	ldr	r0, [r0, #32]
   17bbc:	ldr	r0, [r0, #20]
   17bc0:	ldr	r1, [sp, #4]
   17bc4:	cmp	r0, r1
   17bc8:	bcs	17c14 <flatcc_builder_truncate_string@@Base+0xac>
   17bcc:	ldr	r0, [sp, #8]
   17bd0:	ldr	r0, [r0, #32]
   17bd4:	ldr	r0, [r0, #20]
   17bd8:	ldr	r1, [sp, #4]
   17bdc:	cmp	r0, r1
   17be0:	bcc	17be8 <flatcc_builder_truncate_string@@Base+0x80>
   17be4:	b	17c08 <flatcc_builder_truncate_string@@Base+0xa0>
   17be8:	ldr	r0, [pc, #104]	; 17c58 <flatcc_builder_truncate_string@@Base+0xf0>
   17bec:	add	r0, pc, r0
   17bf0:	ldr	r1, [pc, #100]	; 17c5c <flatcc_builder_truncate_string@@Base+0xf4>
   17bf4:	add	r1, pc, r1
   17bf8:	ldr	r2, [pc, #96]	; 17c60 <flatcc_builder_truncate_string@@Base+0xf8>
   17bfc:	add	r3, pc, r2
   17c00:	movw	r2, #1004	; 0x3ec
   17c04:	bl	12450 <__assert_fail@plt>
   17c08:	mvn	r0, #0
   17c0c:	str	r0, [fp, #-4]
   17c10:	b	17c40 <flatcc_builder_truncate_string@@Base+0xd8>
   17c14:	ldr	r0, [sp, #4]
   17c18:	ldr	r1, [sp, #8]
   17c1c:	ldr	r1, [r1, #32]
   17c20:	ldr	r2, [r1, #20]
   17c24:	sub	r0, r2, r0
   17c28:	str	r0, [r1, #20]
   17c2c:	ldr	r0, [sp, #8]
   17c30:	ldr	r1, [sp, #4]
   17c34:	bl	17a08 <flatcc_builder_truncate_vector@@Base+0x10c>
   17c38:	movw	r0, #0
   17c3c:	str	r0, [fp, #-4]
   17c40:	ldr	r0, [fp, #-4]
   17c44:	mov	sp, fp
   17c48:	pop	{fp, pc}
   17c4c:	andeq	r5, r0, ip, lsr #10
   17c50:	andeq	r4, r0, r8, ror #31
   17c54:			; <UNDEFINED> instruction: 0x000056b8
   17c58:			; <UNDEFINED> instruction: 0x000056b3
   17c5c:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   17c60:	andeq	r5, r0, r4, ror #12

00017c64 <flatcc_builder_start_vector@@Base>:
   17c64:	push	{fp, lr}
   17c68:	mov	fp, sp
   17c6c:	sub	sp, sp, #24
   17c70:	str	r0, [fp, #-8]
   17c74:	str	r1, [sp, #12]
   17c78:	strh	r2, [sp, #10]
   17c7c:	str	r3, [sp, #4]
   17c80:	add	r0, sp, #10
   17c84:	movw	r1, #4
   17c88:	uxth	r1, r1
   17c8c:	bl	17d10 <flatcc_builder_start_vector@@Base+0xac>
   17c90:	ldr	r0, [fp, #-8]
   17c94:	ldrh	r1, [sp, #10]
   17c98:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   17c9c:	cmp	r0, #0
   17ca0:	beq	17cb0 <flatcc_builder_start_vector@@Base+0x4c>
   17ca4:	mvn	r0, #0
   17ca8:	str	r0, [fp, #-4]
   17cac:	b	17d04 <flatcc_builder_start_vector@@Base+0xa0>
   17cb0:	ldr	r0, [sp, #12]
   17cb4:	ldr	r1, [fp, #-8]
   17cb8:	ldr	r1, [r1, #32]
   17cbc:	str	r0, [r1, #16]
   17cc0:	ldr	r0, [fp, #-8]
   17cc4:	ldr	r0, [r0, #32]
   17cc8:	movw	r1, #0
   17ccc:	str	r1, [r0, #20]
   17cd0:	ldr	r0, [sp, #4]
   17cd4:	ldr	r1, [fp, #-8]
   17cd8:	ldr	r1, [r1, #32]
   17cdc:	str	r0, [r1, #24]
   17ce0:	ldr	r0, [fp, #-8]
   17ce4:	ldr	r0, [r0, #32]
   17ce8:	movw	r1, #4
   17cec:	strh	r1, [r0, #14]
   17cf0:	ldr	r0, [fp, #-8]
   17cf4:	mvn	r1, #3
   17cf8:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   17cfc:	movw	r0, #0
   17d00:	str	r0, [fp, #-4]
   17d04:	ldr	r0, [fp, #-4]
   17d08:	mov	sp, fp
   17d0c:	pop	{fp, pc}
   17d10:	sub	sp, sp, #8
   17d14:	str	r0, [sp, #4]
   17d18:	strh	r1, [sp, #2]
   17d1c:	ldr	r0, [sp, #4]
   17d20:	ldrh	r0, [r0]
   17d24:	ldrh	r1, [sp, #2]
   17d28:	cmp	r0, r1
   17d2c:	bge	17d3c <flatcc_builder_start_vector@@Base+0xd8>
   17d30:	ldrh	r0, [sp, #2]
   17d34:	ldr	r1, [sp, #4]
   17d38:	strh	r0, [r1]
   17d3c:	add	sp, sp, #8
   17d40:	bx	lr

00017d44 <flatcc_builder_start_offset_vector@@Base>:
   17d44:	push	{fp, lr}
   17d48:	mov	fp, sp
   17d4c:	sub	sp, sp, #8
   17d50:	str	r0, [sp]
   17d54:	ldr	r0, [sp]
   17d58:	movw	r1, #4
   17d5c:	uxth	r1, r1
   17d60:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   17d64:	cmp	r0, #0
   17d68:	beq	17d78 <flatcc_builder_start_offset_vector@@Base+0x34>
   17d6c:	mvn	r0, #0
   17d70:	str	r0, [sp, #4]
   17d74:	b	17dbc <flatcc_builder_start_offset_vector@@Base+0x78>
   17d78:	ldr	r0, [sp]
   17d7c:	ldr	r0, [r0, #32]
   17d80:	movw	r1, #4
   17d84:	str	r1, [r0, #16]
   17d88:	ldr	r0, [sp]
   17d8c:	ldr	r0, [r0, #32]
   17d90:	movw	r1, #0
   17d94:	str	r1, [r0, #20]
   17d98:	ldr	r0, [sp]
   17d9c:	ldr	r0, [r0, #32]
   17da0:	movw	r1, #5
   17da4:	strh	r1, [r0, #14]
   17da8:	ldr	r0, [sp]
   17dac:	mvn	r1, #3
   17db0:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   17db4:	movw	r0, #0
   17db8:	str	r0, [sp, #4]
   17dbc:	ldr	r0, [sp, #4]
   17dc0:	mov	sp, fp
   17dc4:	pop	{fp, pc}

00017dc8 <flatcc_builder_create_offset_vector@@Base>:
   17dc8:	push	{fp, lr}
   17dcc:	mov	fp, sp
   17dd0:	sub	sp, sp, #24
   17dd4:	str	r0, [fp, #-8]
   17dd8:	str	r1, [sp, #12]
   17ddc:	str	r2, [sp, #8]
   17de0:	ldr	r0, [fp, #-8]
   17de4:	bl	17d44 <flatcc_builder_start_offset_vector@@Base>
   17de8:	cmp	r0, #0
   17dec:	beq	17dfc <flatcc_builder_create_offset_vector@@Base+0x34>
   17df0:	movw	r0, #0
   17df4:	str	r0, [fp, #-4]
   17df8:	b	17e44 <flatcc_builder_create_offset_vector@@Base+0x7c>
   17dfc:	ldr	r0, [fp, #-8]
   17e00:	ldr	r1, [sp, #8]
   17e04:	bl	174d8 <flatcc_builder_extend_offset_vector@@Base>
   17e08:	str	r0, [sp, #4]
   17e0c:	movw	r1, #0
   17e10:	cmp	r0, r1
   17e14:	bne	17e24 <flatcc_builder_create_offset_vector@@Base+0x5c>
   17e18:	movw	r0, #0
   17e1c:	str	r0, [fp, #-4]
   17e20:	b	17e44 <flatcc_builder_create_offset_vector@@Base+0x7c>
   17e24:	ldr	r0, [sp, #4]
   17e28:	ldr	r1, [sp, #12]
   17e2c:	ldr	r2, [sp, #8]
   17e30:	lsl	r2, r2, #2
   17e34:	bl	123c0 <memcpy@plt>
   17e38:	ldr	r0, [fp, #-8]
   17e3c:	bl	17e50 <flatcc_builder_end_offset_vector@@Base>
   17e40:	str	r0, [fp, #-4]
   17e44:	ldr	r0, [fp, #-4]
   17e48:	mov	sp, fp
   17e4c:	pop	{fp, pc}

00017e50 <flatcc_builder_end_offset_vector@@Base>:
   17e50:	push	{fp, lr}
   17e54:	mov	fp, sp
   17e58:	sub	sp, sp, #16
   17e5c:	str	r0, [sp, #8]
   17e60:	ldr	r0, [sp, #8]
   17e64:	ldr	r0, [r0, #32]
   17e68:	ldrh	r0, [r0, #14]
   17e6c:	cmp	r0, #5
   17e70:	bne	17e78 <flatcc_builder_end_offset_vector@@Base+0x28>
   17e74:	b	17e98 <flatcc_builder_end_offset_vector@@Base+0x48>
   17e78:	ldr	r0, [pc, #108]	; 17eec <flatcc_builder_end_offset_vector@@Base+0x9c>
   17e7c:	add	r0, pc, r0
   17e80:	ldr	r1, [pc, #104]	; 17ef0 <flatcc_builder_end_offset_vector@@Base+0xa0>
   17e84:	add	r1, pc, r1
   17e88:	ldr	r2, [pc, #100]	; 17ef4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   17e8c:	add	r3, pc, r2
   17e90:	movw	r2, #1480	; 0x5c8
   17e94:	bl	12450 <__assert_fail@plt>
   17e98:	ldr	r0, [sp, #8]
   17e9c:	ldr	r1, [sp, #8]
   17ea0:	ldr	r1, [r1, #16]
   17ea4:	ldr	r2, [sp, #8]
   17ea8:	ldr	r2, [r2, #32]
   17eac:	ldr	r2, [r2, #20]
   17eb0:	bl	19260 <flatcc_builder_create_offset_vector_direct@@Base>
   17eb4:	str	r0, [sp, #4]
   17eb8:	movw	r1, #0
   17ebc:	cmp	r1, r0
   17ec0:	bne	17ed0 <flatcc_builder_end_offset_vector@@Base+0x80>
   17ec4:	movw	r0, #0
   17ec8:	str	r0, [fp, #-4]
   17ecc:	b	17ee0 <flatcc_builder_end_offset_vector@@Base+0x90>
   17ed0:	ldr	r0, [sp, #8]
   17ed4:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   17ed8:	ldr	r0, [sp, #4]
   17edc:	str	r0, [fp, #-4]
   17ee0:	ldr	r0, [fp, #-4]
   17ee4:	mov	sp, fp
   17ee8:	pop	{fp, pc}
   17eec:	andeq	r5, r0, pc, lsr r1
   17ef0:	andeq	r4, r0, r4, lsl #26
   17ef4:	andeq	r5, r0, lr, asr r7

00017ef8 <flatcc_builder_start_string@@Base>:
   17ef8:	push	{fp, lr}
   17efc:	mov	fp, sp
   17f00:	sub	sp, sp, #8
   17f04:	str	r0, [sp]
   17f08:	ldr	r0, [sp]
   17f0c:	movw	r1, #1
   17f10:	uxth	r1, r1
   17f14:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   17f18:	cmp	r0, #0
   17f1c:	beq	17f2c <flatcc_builder_start_string@@Base+0x34>
   17f20:	mvn	r0, #0
   17f24:	str	r0, [sp, #4]
   17f28:	b	17f70 <flatcc_builder_start_string@@Base+0x78>
   17f2c:	ldr	r0, [sp]
   17f30:	ldr	r0, [r0, #32]
   17f34:	movw	r1, #1
   17f38:	str	r1, [r0, #16]
   17f3c:	ldr	r0, [sp]
   17f40:	ldr	r0, [r0, #32]
   17f44:	movw	r1, #0
   17f48:	str	r1, [r0, #20]
   17f4c:	ldr	r0, [sp]
   17f50:	ldr	r0, [r0, #32]
   17f54:	movw	r1, #6
   17f58:	strh	r1, [r0, #14]
   17f5c:	ldr	r0, [sp]
   17f60:	mvn	r1, #3
   17f64:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   17f68:	movw	r0, #0
   17f6c:	str	r0, [sp, #4]
   17f70:	ldr	r0, [sp, #4]
   17f74:	mov	sp, fp
   17f78:	pop	{fp, pc}

00017f7c <flatcc_builder_reserve_table@@Base>:
   17f7c:	push	{fp, lr}
   17f80:	mov	fp, sp
   17f84:	sub	sp, sp, #8
   17f88:	str	r0, [sp, #4]
   17f8c:	str	r1, [sp]
   17f90:	ldr	r0, [sp]
   17f94:	cmp	r0, #0
   17f98:	blt	17fa0 <flatcc_builder_reserve_table@@Base+0x24>
   17f9c:	b	17fc0 <flatcc_builder_reserve_table@@Base+0x44>
   17fa0:	ldr	r0, [pc, #44]	; 17fd4 <flatcc_builder_reserve_table@@Base+0x58>
   17fa4:	add	r0, pc, r0
   17fa8:	ldr	r1, [pc, #40]	; 17fd8 <flatcc_builder_reserve_table@@Base+0x5c>
   17fac:	add	r1, pc, r1
   17fb0:	ldr	r2, [pc, #36]	; 17fdc <flatcc_builder_reserve_table@@Base+0x60>
   17fb4:	add	r3, pc, r2
   17fb8:	movw	r2, #1065	; 0x429
   17fbc:	bl	12450 <__assert_fail@plt>
   17fc0:	ldr	r0, [sp, #4]
   17fc4:	ldr	r1, [sp]
   17fc8:	bl	17fe0 <flatcc_builder_reserve_table@@Base+0x64>
   17fcc:	mov	sp, fp
   17fd0:	pop	{fp, pc}
   17fd4:	andeq	r5, r0, lr, asr r3
   17fd8:	ldrdeq	r4, [r0], -ip
   17fdc:	andeq	r5, r0, sp, lsl #6
   17fe0:	push	{fp, lr}
   17fe4:	mov	fp, sp
   17fe8:	sub	sp, sp, #24
   17fec:	str	r0, [fp, #-8]
   17ff0:	str	r1, [sp, #12]
   17ff4:	ldr	r0, [fp, #-8]
   17ff8:	ldr	r0, [r0, #32]
   17ffc:	ldr	r1, [r0, #16]
   18000:	ldrh	r0, [r0, #28]
   18004:	add	r0, r1, r0, lsl #1
   18008:	str	r0, [sp, #8]
   1800c:	ldr	r0, [sp, #12]
   18010:	add	r0, r0, #2
   18014:	lsl	r0, r0, #1
   18018:	str	r0, [sp, #4]
   1801c:	ldr	r0, [fp, #-8]
   18020:	ldr	r2, [sp, #8]
   18024:	ldr	r3, [sp, #4]
   18028:	movw	r1, #0
   1802c:	movw	ip, #1
   18030:	str	ip, [sp]
   18034:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   18038:	ldr	r1, [fp, #-8]
   1803c:	str	r0, [r1, #4]
   18040:	movw	r1, #0
   18044:	cmp	r0, r1
   18048:	bne	18058 <flatcc_builder_reserve_table@@Base+0xdc>
   1804c:	mvn	r0, #0
   18050:	str	r0, [fp, #-4]
   18054:	b	180cc <flatcc_builder_reserve_table@@Base+0x150>
   18058:	ldr	r0, [fp, #-8]
   1805c:	ldr	r1, [r0, #4]
   18060:	add	r1, r1, #4
   18064:	str	r1, [r0, #4]
   18068:	ldr	r0, [fp, #-8]
   1806c:	ldr	r0, [r0, #32]
   18070:	ldr	r0, [r0, #20]
   18074:	str	r0, [sp, #8]
   18078:	ldr	r0, [sp, #12]
   1807c:	lsl	r0, r0, #1
   18080:	add	r0, r0, #1
   18084:	str	r0, [sp, #4]
   18088:	ldr	r0, [fp, #-8]
   1808c:	ldr	r2, [sp, #8]
   18090:	ldr	r3, [sp, #4]
   18094:	movw	r1, #3
   18098:	movw	ip, #0
   1809c:	str	ip, [sp]
   180a0:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   180a4:	ldr	r1, [fp, #-8]
   180a8:	str	r0, [r1]
   180ac:	movw	r1, #0
   180b0:	cmp	r0, r1
   180b4:	bne	180c4 <flatcc_builder_reserve_table@@Base+0x148>
   180b8:	mvn	r0, #0
   180bc:	str	r0, [fp, #-4]
   180c0:	b	180cc <flatcc_builder_reserve_table@@Base+0x150>
   180c4:	movw	r0, #0
   180c8:	str	r0, [fp, #-4]
   180cc:	ldr	r0, [fp, #-4]
   180d0:	mov	sp, fp
   180d4:	pop	{fp, pc}

000180d8 <flatcc_builder_start_table@@Base>:
   180d8:	push	{fp, lr}
   180dc:	mov	fp, sp
   180e0:	sub	sp, sp, #16
   180e4:	str	r0, [sp, #8]
   180e8:	str	r1, [sp, #4]
   180ec:	ldr	r0, [sp, #8]
   180f0:	movw	r1, #4
   180f4:	uxth	r1, r1
   180f8:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   180fc:	cmp	r0, #0
   18100:	beq	18110 <flatcc_builder_start_table@@Base+0x38>
   18104:	mvn	r0, #0
   18108:	str	r0, [fp, #-4]
   1810c:	b	181e0 <flatcc_builder_start_table@@Base+0x108>
   18110:	ldr	r0, [pc, #212]	; 181ec <flatcc_builder_start_table@@Base+0x114>
   18114:	ldr	r1, [sp, #8]
   18118:	ldr	r1, [r1, #4]
   1811c:	ldr	r2, [sp, #8]
   18120:	ldr	r2, [r2, #52]	; 0x34
   18124:	sub	r1, r1, r2
   18128:	ldr	r2, [sp, #8]
   1812c:	ldr	r2, [r2, #32]
   18130:	str	r1, [r2, #16]
   18134:	ldr	r1, [sp, #8]
   18138:	ldr	r1, [r1]
   1813c:	ldr	r2, [sp, #8]
   18140:	ldr	r2, [r2, #76]	; 0x4c
   18144:	sub	r1, r1, r2
   18148:	ldr	r2, [sp, #8]
   1814c:	ldr	r2, [r2, #32]
   18150:	str	r1, [r2, #20]
   18154:	ldr	r1, [sp, #8]
   18158:	ldr	r1, [r1, #12]
   1815c:	ldr	r2, [sp, #8]
   18160:	ldr	r2, [r2, #32]
   18164:	str	r1, [r2, #24]
   18168:	ldr	r1, [sp, #8]
   1816c:	ldrh	r1, [r1, #8]
   18170:	ldr	r2, [sp, #8]
   18174:	ldr	r2, [r2, #32]
   18178:	strh	r1, [r2, #28]
   1817c:	ldr	r1, [sp, #8]
   18180:	movw	r2, #0
   18184:	str	r2, [r1, #12]
   18188:	ldr	r1, [sp, #8]
   1818c:	str	r0, [r1, #12]
   18190:	ldr	r0, [sp, #8]
   18194:	movw	r1, #0
   18198:	strh	r1, [r0, #8]
   1819c:	ldr	r0, [sp, #8]
   181a0:	ldr	r0, [r0, #32]
   181a4:	movw	r1, #3
   181a8:	strh	r1, [r0, #14]
   181ac:	ldr	r0, [sp, #8]
   181b0:	ldr	r1, [sp, #4]
   181b4:	bl	17fe0 <flatcc_builder_reserve_table@@Base+0x64>
   181b8:	cmp	r0, #0
   181bc:	beq	181cc <flatcc_builder_start_table@@Base+0xf4>
   181c0:	mvn	r0, #0
   181c4:	str	r0, [fp, #-4]
   181c8:	b	181e0 <flatcc_builder_start_table@@Base+0x108>
   181cc:	ldr	r0, [sp, #8]
   181d0:	movw	r1, #65532	; 0xfffc
   181d4:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   181d8:	movw	r0, #0
   181dc:	str	r0, [fp, #-4]
   181e0:	ldr	r0, [fp, #-4]
   181e4:	mov	sp, fp
   181e8:	pop	{fp, pc}
   181ec:	svccs	0x00693b52

000181f0 <flatcc_builder_create_vtable@@Base>:
   181f0:	push	{fp, lr}
   181f4:	mov	fp, sp
   181f8:	sub	sp, sp, #104	; 0x68
   181fc:	str	r0, [fp, #-8]
   18200:	str	r1, [fp, #-12]
   18204:	strh	r2, [fp, #-14]
   18208:	movw	r0, #0
   1820c:	str	r0, [sp, #12]
   18210:	str	r0, [sp, #16]
   18214:	ldrh	r0, [fp, #-14]
   18218:	cmp	r0, #0
   1821c:	ble	18260 <flatcc_builder_create_vtable@@Base+0x70>
   18220:	ldrh	r0, [fp, #-14]
   18224:	ldr	r1, [sp, #12]
   18228:	add	r0, r1, r0
   1822c:	str	r0, [sp, #12]
   18230:	ldr	r0, [fp, #-12]
   18234:	add	r1, sp, #12
   18238:	add	r1, r1, #8
   1823c:	ldr	r2, [sp, #16]
   18240:	str	r0, [r1, r2, lsl #3]
   18244:	ldrh	r0, [fp, #-14]
   18248:	ldr	r2, [sp, #16]
   1824c:	add	r1, r1, r2, lsl #3
   18250:	str	r0, [r1, #4]
   18254:	ldr	r0, [sp, #16]
   18258:	add	r0, r0, #1
   1825c:	str	r0, [sp, #16]
   18260:	ldr	r0, [fp, #-8]
   18264:	ldr	r0, [r0, #152]	; 0x98
   18268:	cmp	r0, #0
   1826c:	bne	182ac <flatcc_builder_create_vtable@@Base+0xbc>
   18270:	ldr	r0, [fp, #-8]
   18274:	ldr	r0, [r0, #180]	; 0xb4
   18278:	cmp	r0, #0
   1827c:	bne	182ac <flatcc_builder_create_vtable@@Base+0xbc>
   18280:	ldr	r0, [fp, #-8]
   18284:	add	r1, sp, #12
   18288:	bl	182f4 <flatcc_builder_create_vtable@@Base+0x104>
   1828c:	str	r0, [fp, #-20]	; 0xffffffec
   18290:	movw	r1, #0
   18294:	cmp	r1, r0
   18298:	bne	182a8 <flatcc_builder_create_vtable@@Base+0xb8>
   1829c:	movw	r0, #0
   182a0:	str	r0, [fp, #-4]
   182a4:	b	182e8 <flatcc_builder_create_vtable@@Base+0xf8>
   182a8:	b	182e0 <flatcc_builder_create_vtable@@Base+0xf0>
   182ac:	ldr	r0, [fp, #-8]
   182b0:	add	r1, sp, #12
   182b4:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   182b8:	str	r0, [fp, #-20]	; 0xffffffec
   182bc:	movw	r1, #0
   182c0:	cmp	r1, r0
   182c4:	bne	182d4 <flatcc_builder_create_vtable@@Base+0xe4>
   182c8:	movw	r0, #0
   182cc:	str	r0, [fp, #-4]
   182d0:	b	182e8 <flatcc_builder_create_vtable@@Base+0xf8>
   182d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   182d8:	add	r0, r0, #1
   182dc:	str	r0, [fp, #-20]	; 0xffffffec
   182e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   182e4:	str	r0, [fp, #-4]
   182e8:	ldr	r0, [fp, #-4]
   182ec:	mov	sp, fp
   182f0:	pop	{fp, pc}
   182f4:	push	{fp, lr}
   182f8:	mov	fp, sp
   182fc:	sub	sp, sp, #24
   18300:	str	r0, [fp, #-4]
   18304:	str	r1, [fp, #-8]
   18308:	ldr	r0, [fp, #-4]
   1830c:	ldr	r0, [r0, #140]	; 0x8c
   18310:	str	r0, [sp, #12]
   18314:	ldr	r0, [sp, #12]
   18318:	ldr	r1, [fp, #-8]
   1831c:	ldr	r1, [r1]
   18320:	add	r0, r0, r1
   18324:	ldr	r1, [fp, #-4]
   18328:	str	r0, [r1, #140]	; 0x8c
   1832c:	ldr	r0, [fp, #-4]
   18330:	ldr	r0, [r0, #140]	; 0x8c
   18334:	ldr	r1, [sp, #12]
   18338:	cmp	r0, r1
   1833c:	bge	18360 <flatcc_builder_create_vtable@@Base+0x170>
   18340:	ldr	r0, [pc, #168]	; 183f0 <flatcc_builder_create_vtable@@Base+0x200>
   18344:	add	r0, pc, r0
   18348:	ldr	r1, [pc, #164]	; 183f4 <flatcc_builder_create_vtable@@Base+0x204>
   1834c:	add	r1, pc, r1
   18350:	ldr	r2, [pc, #160]	; 183f8 <flatcc_builder_create_vtable@@Base+0x208>
   18354:	add	r3, pc, r2
   18358:	movw	r2, #673	; 0x2a1
   1835c:	bl	12450 <__assert_fail@plt>
   18360:	ldr	r0, [fp, #-4]
   18364:	ldr	r0, [r0, #44]	; 0x2c
   18368:	ldr	r1, [fp, #-4]
   1836c:	ldr	r1, [r1, #36]	; 0x24
   18370:	ldr	r2, [fp, #-8]
   18374:	add	r2, r2, #8
   18378:	ldr	r3, [fp, #-8]
   1837c:	ldr	r3, [r3, #4]
   18380:	ldr	ip, [sp, #12]
   18384:	ldr	lr, [fp, #-8]
   18388:	ldr	lr, [lr]
   1838c:	str	r0, [sp, #8]
   18390:	mov	r0, r1
   18394:	mov	r1, r2
   18398:	mov	r2, r3
   1839c:	mov	r3, ip
   183a0:	str	lr, [sp]
   183a4:	ldr	ip, [sp, #8]
   183a8:	blx	ip
   183ac:	cmp	r0, #0
   183b0:	beq	183d4 <flatcc_builder_create_vtable@@Base+0x1e4>
   183b4:	ldr	r0, [pc, #40]	; 183e4 <flatcc_builder_create_vtable@@Base+0x1f4>
   183b8:	add	r0, pc, r0
   183bc:	ldr	r1, [pc, #36]	; 183e8 <flatcc_builder_create_vtable@@Base+0x1f8>
   183c0:	add	r1, pc, r1
   183c4:	ldr	r2, [pc, #32]	; 183ec <flatcc_builder_create_vtable@@Base+0x1fc>
   183c8:	add	r3, pc, r2
   183cc:	movw	r2, #677	; 0x2a5
   183d0:	bl	12450 <__assert_fail@plt>
   183d4:	ldr	r0, [sp, #12]
   183d8:	add	r0, r0, #1
   183dc:	mov	sp, fp
   183e0:	pop	{fp, pc}
   183e4:	andeq	r5, r0, sp, lsl #19
   183e8:	andeq	r4, r0, r8, asr #15
   183ec:	strdeq	r5, [r0], -r8
   183f0:	andeq	r5, r0, r1, lsl #20
   183f4:	andeq	r4, r0, ip, lsr r8
   183f8:	andeq	r5, r0, ip, ror #18

000183fc <flatcc_builder_create_cached_vtable@@Base>:
   183fc:	push	{fp, lr}
   18400:	mov	fp, sp
   18404:	sub	sp, sp, #48	; 0x30
   18408:	str	r0, [fp, #-8]
   1840c:	str	r1, [fp, #-12]
   18410:	strh	r2, [fp, #-14]
   18414:	str	r3, [fp, #-20]	; 0xffffffec
   18418:	ldr	r0, [fp, #-8]
   1841c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18420:	bl	18708 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   18424:	str	r0, [sp, #12]
   18428:	movw	r1, #0
   1842c:	cmp	r0, r1
   18430:	bne	18440 <flatcc_builder_create_cached_vtable@@Base+0x44>
   18434:	movw	r0, #0
   18438:	str	r0, [fp, #-4]
   1843c:	b	186fc <flatcc_builder_create_cached_vtable@@Base+0x300>
   18440:	ldr	r0, [sp, #12]
   18444:	str	r0, [sp, #16]
   18448:	ldr	r0, [sp, #16]
   1844c:	ldr	r0, [r0]
   18450:	str	r0, [sp, #8]
   18454:	movw	r0, #0
   18458:	str	r0, [sp, #20]
   1845c:	ldr	r0, [sp, #8]
   18460:	cmp	r0, #0
   18464:	beq	18568 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   18468:	ldr	r0, [fp, #-8]
   1846c:	ldr	r0, [r0, #100]	; 0x64
   18470:	ldr	r1, [sp, #8]
   18474:	add	r0, r0, r1
   18478:	str	r0, [sp, #24]
   1847c:	ldr	r0, [fp, #-8]
   18480:	ldr	r0, [r0, #68]	; 0x44
   18484:	ldr	r1, [sp, #24]
   18488:	ldr	r1, [r1, #8]
   1848c:	add	r0, r0, r1
   18490:	str	r0, [sp, #4]
   18494:	ldr	r0, [sp, #4]
   18498:	ldrh	r0, [r0]
   1849c:	ldrh	r1, [fp, #-14]
   184a0:	cmp	r0, r1
   184a4:	bne	184c4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   184a8:	ldr	r0, [fp, #-12]
   184ac:	ldr	r1, [sp, #4]
   184b0:	ldrh	r2, [fp, #-14]
   184b4:	bl	123cc <memcmp@plt>
   184b8:	movw	r1, #0
   184bc:	cmp	r1, r0
   184c0:	beq	184e0 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   184c4:	ldr	r0, [sp, #24]
   184c8:	add	r0, r0, #12
   184cc:	str	r0, [sp, #16]
   184d0:	ldr	r0, [sp, #24]
   184d4:	ldr	r0, [r0, #12]
   184d8:	str	r0, [sp, #8]
   184dc:	b	1845c <flatcc_builder_create_cached_vtable@@Base+0x60>
   184e0:	ldr	r0, [sp, #24]
   184e4:	ldr	r0, [r0, #4]
   184e8:	ldr	r1, [fp, #-8]
   184ec:	ldr	r1, [r1, #152]	; 0x98
   184f0:	cmp	r0, r1
   184f4:	beq	1851c <flatcc_builder_create_cached_vtable@@Base+0x120>
   184f8:	ldr	r0, [sp, #24]
   184fc:	str	r0, [sp, #20]
   18500:	ldr	r0, [sp, #24]
   18504:	add	r0, r0, #12
   18508:	str	r0, [sp, #16]
   1850c:	ldr	r0, [sp, #24]
   18510:	ldr	r0, [r0, #12]
   18514:	str	r0, [sp, #8]
   18518:	b	1845c <flatcc_builder_create_cached_vtable@@Base+0x60>
   1851c:	ldr	r0, [sp, #16]
   18520:	ldr	r1, [sp, #12]
   18524:	cmp	r0, r1
   18528:	beq	18558 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   1852c:	ldr	r0, [sp, #24]
   18530:	ldr	r0, [r0, #12]
   18534:	ldr	r1, [sp, #16]
   18538:	str	r0, [r1]
   1853c:	ldr	r0, [sp, #12]
   18540:	ldr	r0, [r0]
   18544:	ldr	r1, [sp, #24]
   18548:	str	r0, [r1, #12]
   1854c:	ldr	r0, [sp, #8]
   18550:	ldr	r1, [sp, #12]
   18554:	str	r0, [r1]
   18558:	ldr	r0, [sp, #24]
   1855c:	ldr	r0, [r0]
   18560:	str	r0, [fp, #-4]
   18564:	b	186fc <flatcc_builder_create_cached_vtable@@Base+0x300>
   18568:	ldr	r0, [fp, #-8]
   1856c:	ldr	r1, [fp, #-8]
   18570:	ldr	r2, [r1, #124]	; 0x7c
   18574:	movw	r1, #6
   18578:	movw	r3, #16
   1857c:	movw	ip, #0
   18580:	str	ip, [sp]
   18584:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   18588:	str	r0, [sp, #24]
   1858c:	movw	r1, #0
   18590:	cmp	r0, r1
   18594:	bne	185a4 <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   18598:	movw	r0, #0
   1859c:	str	r0, [fp, #-4]
   185a0:	b	186fc <flatcc_builder_create_cached_vtable@@Base+0x300>
   185a4:	ldr	r0, [fp, #-8]
   185a8:	ldr	r0, [r0, #124]	; 0x7c
   185ac:	str	r0, [sp, #8]
   185b0:	ldr	r0, [fp, #-8]
   185b4:	ldr	r1, [r0, #124]	; 0x7c
   185b8:	add	r1, r1, #16
   185bc:	str	r1, [r0, #124]	; 0x7c
   185c0:	ldr	r0, [fp, #-8]
   185c4:	ldr	r0, [r0, #152]	; 0x98
   185c8:	ldr	r1, [sp, #24]
   185cc:	str	r0, [r1, #4]
   185d0:	ldr	r0, [sp, #12]
   185d4:	ldr	r0, [r0]
   185d8:	ldr	r1, [sp, #24]
   185dc:	str	r0, [r1, #12]
   185e0:	ldr	r0, [sp, #8]
   185e4:	ldr	r1, [sp, #12]
   185e8:	str	r0, [r1]
   185ec:	ldr	r0, [fp, #-8]
   185f0:	ldr	r1, [fp, #-12]
   185f4:	ldrh	r2, [fp, #-14]
   185f8:	bl	181f0 <flatcc_builder_create_vtable@@Base>
   185fc:	ldr	r1, [sp, #24]
   18600:	str	r0, [r1]
   18604:	movw	r1, #0
   18608:	cmp	r1, r0
   1860c:	bne	1861c <flatcc_builder_create_cached_vtable@@Base+0x220>
   18610:	movw	r0, #0
   18614:	str	r0, [fp, #-4]
   18618:	b	186fc <flatcc_builder_create_cached_vtable@@Base+0x300>
   1861c:	ldr	r0, [sp, #20]
   18620:	movw	r1, #0
   18624:	cmp	r0, r1
   18628:	beq	18640 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1862c:	ldr	r0, [sp, #20]
   18630:	ldr	r0, [r0, #8]
   18634:	ldr	r1, [sp, #24]
   18638:	str	r0, [r1, #8]
   1863c:	b	186f0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   18640:	ldr	r0, [fp, #-8]
   18644:	ldr	r0, [r0, #172]	; 0xac
   18648:	cmp	r0, #0
   1864c:	beq	1867c <flatcc_builder_create_cached_vtable@@Base+0x280>
   18650:	ldr	r0, [fp, #-8]
   18654:	ldr	r0, [r0, #172]	; 0xac
   18658:	ldr	r1, [fp, #-8]
   1865c:	ldr	r1, [r1, #120]	; 0x78
   18660:	ldrh	r2, [fp, #-14]
   18664:	add	r1, r1, r2
   18668:	cmp	r0, r1
   1866c:	bcs	1867c <flatcc_builder_create_cached_vtable@@Base+0x280>
   18670:	ldr	r0, [fp, #-8]
   18674:	bl	15724 <flatcc_builder_flush_vtable_cache@@Base>
   18678:	b	186ec <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   1867c:	ldr	r0, [fp, #-8]
   18680:	ldr	r1, [fp, #-8]
   18684:	ldr	r2, [r1, #120]	; 0x78
   18688:	ldrh	r3, [fp, #-14]
   1868c:	movw	r1, #2
   18690:	movw	ip, #0
   18694:	str	ip, [sp]
   18698:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1869c:	str	r0, [sp, #4]
   186a0:	movw	r1, #0
   186a4:	cmp	r0, r1
   186a8:	bne	186b8 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   186ac:	mvn	r0, #0
   186b0:	str	r0, [fp, #-4]
   186b4:	b	186fc <flatcc_builder_create_cached_vtable@@Base+0x300>
   186b8:	ldr	r0, [fp, #-8]
   186bc:	ldr	r0, [r0, #120]	; 0x78
   186c0:	ldr	r1, [sp, #24]
   186c4:	str	r0, [r1, #8]
   186c8:	ldrh	r0, [fp, #-14]
   186cc:	ldr	r1, [fp, #-8]
   186d0:	ldr	r2, [r1, #120]	; 0x78
   186d4:	add	r0, r2, r0
   186d8:	str	r0, [r1, #120]	; 0x78
   186dc:	ldr	r0, [sp, #4]
   186e0:	ldr	r1, [fp, #-12]
   186e4:	ldrh	r2, [fp, #-14]
   186e8:	bl	123c0 <memcpy@plt>
   186ec:	b	186f0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   186f0:	ldr	r0, [sp, #24]
   186f4:	ldr	r0, [r0]
   186f8:	str	r0, [fp, #-4]
   186fc:	ldr	r0, [fp, #-4]
   18700:	mov	sp, fp
   18704:	pop	{fp, pc}
   18708:	push	{fp, lr}
   1870c:	mov	fp, sp
   18710:	sub	sp, sp, #24
   18714:	str	r0, [fp, #-8]
   18718:	str	r1, [sp, #12]
   1871c:	ldr	r0, [fp, #-8]
   18720:	ldr	r0, [r0, #116]	; 0x74
   18724:	cmp	r0, #0
   18728:	bne	1874c <flatcc_builder_create_cached_vtable@@Base+0x350>
   1872c:	ldr	r0, [fp, #-8]
   18730:	bl	1b228 <flatcc_builder_get_emit_context@@Base+0xe8>
   18734:	cmp	r0, #0
   18738:	beq	18748 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   1873c:	movw	r0, #0
   18740:	str	r0, [fp, #-4]
   18744:	b	18780 <flatcc_builder_create_cached_vtable@@Base+0x384>
   18748:	b	1874c <flatcc_builder_create_cached_vtable@@Base+0x350>
   1874c:	ldr	r0, [fp, #-8]
   18750:	ldr	r0, [r0, #92]	; 0x5c
   18754:	str	r0, [sp, #8]
   18758:	ldr	r0, [sp, #8]
   1875c:	ldr	r1, [sp, #12]
   18760:	ldr	r2, [fp, #-8]
   18764:	ldr	r2, [r2, #116]	; 0x74
   18768:	rsb	r2, r2, #32
   1876c:	lsr	r1, r1, r2
   18770:	mov	r2, r1
   18774:	add	r0, r0, r1, lsl #2
   18778:	str	r0, [fp, #-4]
   1877c:	str	r2, [sp, #4]
   18780:	ldr	r0, [fp, #-4]
   18784:	mov	sp, fp
   18788:	pop	{fp, pc}

0001878c <flatcc_builder_create_table@@Base>:
   1878c:	push	{r4, sl, fp, lr}
   18790:	add	fp, sp, #8
   18794:	sub	sp, sp, #136	; 0x88
   18798:	ldr	ip, [fp, #16]
   1879c:	ldr	lr, [fp, #12]
   187a0:	ldr	r4, [fp, #8]
   187a4:	str	r0, [fp, #-16]
   187a8:	str	r1, [fp, #-20]	; 0xffffffec
   187ac:	str	r2, [fp, #-24]	; 0xffffffe8
   187b0:	strh	r3, [fp, #-26]	; 0xffffffe6
   187b4:	ldr	r0, [fp, #12]
   187b8:	cmp	r0, #0
   187bc:	str	r4, [sp, #8]
   187c0:	str	lr, [sp, #4]
   187c4:	str	ip, [sp]
   187c8:	blt	187d0 <flatcc_builder_create_table@@Base+0x44>
   187cc:	b	187f0 <flatcc_builder_create_table@@Base+0x64>
   187d0:	ldr	r0, [pc, #616]	; 18a40 <flatcc_builder_create_table@@Base+0x2b4>
   187d4:	add	r0, pc, r0
   187d8:	ldr	r1, [pc, #612]	; 18a44 <flatcc_builder_create_table@@Base+0x2b8>
   187dc:	add	r1, pc, r1
   187e0:	ldr	r2, [pc, #608]	; 18a48 <flatcc_builder_create_table@@Base+0x2bc>
   187e4:	add	r3, pc, r2
   187e8:	movw	r2, #1237	; 0x4d5
   187ec:	bl	12450 <__assert_fail@plt>
   187f0:	ldr	r0, [fp, #16]
   187f4:	and	r0, r0, #1
   187f8:	cmp	r0, #0
   187fc:	beq	18804 <flatcc_builder_create_table@@Base+0x78>
   18800:	b	18824 <flatcc_builder_create_table@@Base+0x98>
   18804:	ldr	r0, [pc, #576]	; 18a4c <flatcc_builder_create_table@@Base+0x2c0>
   18808:	add	r0, pc, r0
   1880c:	ldr	r1, [pc, #572]	; 18a50 <flatcc_builder_create_table@@Base+0x2c4>
   18810:	add	r1, pc, r1
   18814:	ldr	r2, [pc, #568]	; 18a54 <flatcc_builder_create_table@@Base+0x2c8>
   18818:	add	r3, pc, r2
   1881c:	movw	r2, #1243	; 0x4db
   18820:	bl	12450 <__assert_fail@plt>
   18824:	sub	r0, fp, #26
   18828:	movw	r1, #4
   1882c:	uxth	r1, r1
   18830:	bl	17d10 <flatcc_builder_start_vector@@Base+0xac>
   18834:	ldr	r0, [fp, #-16]
   18838:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   1883c:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   18840:	ldr	r0, [fp, #-16]
   18844:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18848:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   1884c:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   18850:	str	r0, [fp, #-36]	; 0xffffffdc
   18854:	ldr	r0, [fp, #-16]
   18858:	ldr	r0, [r0, #136]	; 0x88
   1885c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18860:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18864:	add	r1, r1, r2
   18868:	add	r1, r1, #4
   1886c:	sub	r0, r0, r1
   18870:	str	r0, [fp, #-52]	; 0xffffffcc
   18874:	ldr	r0, [fp, #16]
   18878:	sub	r0, r0, #1
   1887c:	str	r0, [fp, #-48]	; 0xffffffd0
   18880:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18884:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18888:	sub	r0, r0, r1
   1888c:	str	r0, [fp, #-40]	; 0xffffffd8
   18890:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18894:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18898:	sub	r0, r0, r1
   1889c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   188a0:	cmp	r0, r1
   188a4:	beq	188b4 <flatcc_builder_create_table@@Base+0x128>
   188a8:	mvn	r0, #0
   188ac:	str	r0, [fp, #-12]
   188b0:	b	18a34 <flatcc_builder_create_table@@Base+0x2a8>
   188b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   188b8:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   188bc:	str	r0, [fp, #-44]	; 0xffffffd4
   188c0:	movw	r0, #0
   188c4:	str	r0, [fp, #-32]	; 0xffffffe0
   188c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   188cc:	ldr	r1, [fp, #12]
   188d0:	cmp	r0, r1
   188d4:	bge	18940 <flatcc_builder_create_table@@Base+0x1b4>
   188d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   188dc:	ldr	r1, [fp, #8]
   188e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188e4:	add	r1, r1, r2, lsl #1
   188e8:	ldrh	r1, [r1]
   188ec:	add	r0, r0, r1
   188f0:	str	r0, [fp, #-60]	; 0xffffffc4
   188f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   188f8:	ldr	r0, [r0]
   188fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18900:	sub	r0, r0, r1
   18904:	ldr	r1, [fp, #8]
   18908:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1890c:	add	r1, r1, r2, lsl #1
   18910:	ldrh	r1, [r1]
   18914:	sub	r0, r0, r1
   18918:	sub	r0, r0, #4
   1891c:	str	r0, [fp, #-56]	; 0xffffffc8
   18920:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18924:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   18928:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1892c:	str	r0, [r1]
   18930:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18934:	add	r0, r0, #1
   18938:	str	r0, [fp, #-32]	; 0xffffffe0
   1893c:	b	188c8 <flatcc_builder_create_table@@Base+0x13c>
   18940:	mov	r0, #0
   18944:	str	r0, [sp, #12]
   18948:	str	r0, [sp, #16]
   1894c:	ldr	r0, [sp, #12]
   18950:	add	r0, r0, #4
   18954:	str	r0, [sp, #12]
   18958:	add	r0, sp, #12
   1895c:	add	r0, r0, #8
   18960:	ldr	r1, [sp, #16]
   18964:	sub	r2, fp, #44	; 0x2c
   18968:	str	r2, [r0, r1, lsl #3]
   1896c:	ldr	r1, [sp, #16]
   18970:	add	r0, r0, r1, lsl #3
   18974:	movw	r1, #4
   18978:	str	r1, [r0, #4]
   1897c:	ldr	r0, [sp, #16]
   18980:	add	r0, r0, #1
   18984:	str	r0, [sp, #16]
   18988:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1898c:	cmp	r0, #0
   18990:	bls	189d4 <flatcc_builder_create_table@@Base+0x248>
   18994:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18998:	ldr	r1, [sp, #12]
   1899c:	add	r0, r1, r0
   189a0:	str	r0, [sp, #12]
   189a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   189a8:	add	r1, sp, #12
   189ac:	add	r1, r1, #8
   189b0:	ldr	r2, [sp, #16]
   189b4:	str	r0, [r1, r2, lsl #3]
   189b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   189bc:	ldr	r2, [sp, #16]
   189c0:	add	r1, r1, r2, lsl #3
   189c4:	str	r0, [r1, #4]
   189c8:	ldr	r0, [sp, #16]
   189cc:	add	r0, r0, #1
   189d0:	str	r0, [sp, #16]
   189d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   189d8:	cmp	r0, #0
   189dc:	bls	18a24 <flatcc_builder_create_table@@Base+0x298>
   189e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   189e4:	ldr	r1, [sp, #12]
   189e8:	add	r0, r1, r0
   189ec:	str	r0, [sp, #12]
   189f0:	add	r0, sp, #12
   189f4:	add	r0, r0, #8
   189f8:	ldr	r1, [sp, #16]
   189fc:	ldr	r2, [pc, #84]	; 18a58 <flatcc_builder_create_table@@Base+0x2cc>
   18a00:	ldr	r2, [pc, r2]
   18a04:	str	r2, [r0, r1, lsl #3]
   18a08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18a0c:	ldr	r2, [sp, #16]
   18a10:	add	r0, r0, r2, lsl #3
   18a14:	str	r1, [r0, #4]
   18a18:	ldr	r0, [sp, #16]
   18a1c:	add	r0, r0, #1
   18a20:	str	r0, [sp, #16]
   18a24:	ldr	r0, [fp, #-16]
   18a28:	add	r1, sp, #12
   18a2c:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   18a30:	str	r0, [fp, #-12]
   18a34:	ldr	r0, [fp, #-12]
   18a38:	sub	sp, fp, #8
   18a3c:	pop	{r4, sl, fp, pc}
   18a40:	andeq	r4, r0, r7, lsr #22
   18a44:	andeq	r4, r0, ip, lsr #7
   18a48:	andeq	r4, r0, r9, lsr #22
   18a4c:	andeq	r4, r0, r1, lsr #23
   18a50:	andeq	r4, r0, r8, ror r3
   18a54:	strdeq	r4, [r0], -r5
   18a58:	andeq	r5, r1, r4, asr #12

00018a5c <flatcc_builder_check_required_field@@Base>:
   18a5c:	push	{fp, lr}
   18a60:	mov	fp, sp
   18a64:	sub	sp, sp, #16
   18a68:	str	r0, [fp, #-4]
   18a6c:	strh	r1, [fp, #-6]
   18a70:	ldr	r0, [fp, #-4]
   18a74:	ldr	r0, [r0, #32]
   18a78:	ldrh	r0, [r0, #14]
   18a7c:	cmp	r0, #3
   18a80:	bne	18a88 <flatcc_builder_check_required_field@@Base+0x2c>
   18a84:	b	18aa8 <flatcc_builder_check_required_field@@Base+0x4c>
   18a88:	ldr	r0, [pc, #104]	; 18af8 <flatcc_builder_check_required_field@@Base+0x9c>
   18a8c:	add	r0, pc, r0
   18a90:	ldr	r1, [pc, #100]	; 18afc <flatcc_builder_check_required_field@@Base+0xa0>
   18a94:	add	r1, pc, r1
   18a98:	ldr	r2, [pc, #96]	; 18b00 <flatcc_builder_check_required_field@@Base+0xa4>
   18a9c:	add	r3, pc, r2
   18aa0:	movw	r2, #1272	; 0x4f8
   18aa4:	bl	12450 <__assert_fail@plt>
   18aa8:	ldrh	r0, [fp, #-6]
   18aac:	ldr	r1, [fp, #-4]
   18ab0:	ldrh	r1, [r1, #8]
   18ab4:	cmp	r0, r1
   18ab8:	movw	r0, #0
   18abc:	str	r0, [sp, #4]
   18ac0:	bge	18ae8 <flatcc_builder_check_required_field@@Base+0x8c>
   18ac4:	ldr	r0, [fp, #-4]
   18ac8:	ldr	r0, [r0, #4]
   18acc:	ldrh	r1, [fp, #-6]
   18ad0:	add	r0, r0, r1, lsl #1
   18ad4:	ldrh	r0, [r0]
   18ad8:	cmp	r0, #0
   18adc:	movw	r0, #0
   18ae0:	movne	r0, #1
   18ae4:	str	r0, [sp, #4]
   18ae8:	ldr	r0, [sp, #4]
   18aec:	and	r0, r0, #1
   18af0:	mov	sp, fp
   18af4:	pop	{fp, pc}
   18af8:	andeq	r4, r0, r8, lsr #18
   18afc:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   18b00:	andeq	r4, r0, r3, asr #18

00018b04 <flatcc_builder_check_union_field@@Base>:
   18b04:	push	{fp, lr}
   18b08:	mov	fp, sp
   18b0c:	sub	sp, sp, #16
   18b10:	str	r0, [sp, #8]
   18b14:	strh	r1, [sp, #6]
   18b18:	ldr	r0, [sp, #8]
   18b1c:	ldr	r0, [r0, #32]
   18b20:	ldrh	r0, [r0, #14]
   18b24:	cmp	r0, #3
   18b28:	bne	18b30 <flatcc_builder_check_union_field@@Base+0x2c>
   18b2c:	b	18b50 <flatcc_builder_check_union_field@@Base+0x4c>
   18b30:	ldr	r0, [pc, #284]	; 18c54 <flatcc_builder_check_union_field@@Base+0x150>
   18b34:	add	r0, pc, r0
   18b38:	ldr	r1, [pc, #280]	; 18c58 <flatcc_builder_check_union_field@@Base+0x154>
   18b3c:	add	r1, pc, r1
   18b40:	ldr	r2, [pc, #276]	; 18c5c <flatcc_builder_check_union_field@@Base+0x158>
   18b44:	add	r3, pc, r2
   18b48:	movw	r2, #1279	; 0x4ff
   18b4c:	bl	12450 <__assert_fail@plt>
   18b50:	ldrh	r0, [sp, #6]
   18b54:	cmp	r0, #0
   18b58:	beq	18b70 <flatcc_builder_check_union_field@@Base+0x6c>
   18b5c:	ldrh	r0, [sp, #6]
   18b60:	ldr	r1, [sp, #8]
   18b64:	ldrh	r1, [r1, #8]
   18b68:	cmp	r0, r1
   18b6c:	blt	18b7c <flatcc_builder_check_union_field@@Base+0x78>
   18b70:	movw	r0, #0
   18b74:	str	r0, [fp, #-4]
   18b78:	b	18c48 <flatcc_builder_check_union_field@@Base+0x144>
   18b7c:	ldr	r0, [sp, #8]
   18b80:	ldr	r0, [r0, #4]
   18b84:	ldrh	r1, [sp, #6]
   18b88:	sub	r1, r1, #1
   18b8c:	add	r0, r0, r1, lsl #1
   18b90:	ldrh	r0, [r0]
   18b94:	cmp	r0, #0
   18b98:	bne	18bc8 <flatcc_builder_check_union_field@@Base+0xc4>
   18b9c:	ldr	r0, [sp, #8]
   18ba0:	ldr	r0, [r0, #4]
   18ba4:	ldrh	r1, [sp, #6]
   18ba8:	add	r0, r0, r1, lsl #1
   18bac:	ldrh	r0, [r0]
   18bb0:	cmp	r0, #0
   18bb4:	movw	r0, #0
   18bb8:	moveq	r0, #1
   18bbc:	and	r0, r0, #1
   18bc0:	str	r0, [fp, #-4]
   18bc4:	b	18c48 <flatcc_builder_check_union_field@@Base+0x144>
   18bc8:	ldr	r0, [sp, #8]
   18bcc:	ldr	r1, [r0, #4]
   18bd0:	ldr	r0, [r0, #16]
   18bd4:	ldrh	r2, [sp, #6]
   18bd8:	sub	r2, r2, #1
   18bdc:	add	r1, r1, r2, lsl #1
   18be0:	ldrh	r1, [r1]
   18be4:	add	r0, r0, r1
   18be8:	ldrsb	r0, [r0]
   18bec:	cmp	r0, #0
   18bf0:	beq	18c20 <flatcc_builder_check_union_field@@Base+0x11c>
   18bf4:	ldr	r0, [sp, #8]
   18bf8:	ldr	r0, [r0, #4]
   18bfc:	ldrh	r1, [sp, #6]
   18c00:	add	r0, r0, r1, lsl #1
   18c04:	ldrh	r0, [r0]
   18c08:	cmp	r0, #0
   18c0c:	movw	r0, #0
   18c10:	movne	r0, #1
   18c14:	and	r0, r0, #1
   18c18:	str	r0, [fp, #-4]
   18c1c:	b	18c48 <flatcc_builder_check_union_field@@Base+0x144>
   18c20:	ldr	r0, [sp, #8]
   18c24:	ldr	r0, [r0, #4]
   18c28:	ldrh	r1, [sp, #6]
   18c2c:	add	r0, r0, r1, lsl #1
   18c30:	ldrh	r0, [r0]
   18c34:	cmp	r0, #0
   18c38:	movw	r0, #0
   18c3c:	moveq	r0, #1
   18c40:	and	r0, r0, #1
   18c44:	str	r0, [fp, #-4]
   18c48:	ldr	r0, [fp, #-4]
   18c4c:	mov	sp, fp
   18c50:	pop	{fp, pc}
   18c54:	andeq	r4, r0, r0, lsl #17
   18c58:	andeq	r4, r0, ip, asr #32
   18c5c:	andeq	r4, r0, lr, ror #17

00018c60 <flatcc_builder_check_required@@Base>:
   18c60:	push	{fp, lr}
   18c64:	mov	fp, sp
   18c68:	sub	sp, sp, #24
   18c6c:	str	r0, [fp, #-8]
   18c70:	str	r1, [sp, #12]
   18c74:	str	r2, [sp, #8]
   18c78:	ldr	r0, [fp, #-8]
   18c7c:	ldr	r0, [r0, #32]
   18c80:	ldrh	r0, [r0, #14]
   18c84:	cmp	r0, #3
   18c88:	bne	18c90 <flatcc_builder_check_required@@Base+0x30>
   18c8c:	b	18cb0 <flatcc_builder_check_required@@Base+0x50>
   18c90:	ldr	r0, [pc, #172]	; 18d44 <flatcc_builder_check_required@@Base+0xe4>
   18c94:	add	r0, pc, r0
   18c98:	ldr	r1, [pc, #168]	; 18d48 <flatcc_builder_check_required@@Base+0xe8>
   18c9c:	add	r1, pc, r1
   18ca0:	ldr	r2, [pc, #164]	; 18d4c <flatcc_builder_check_required@@Base+0xec>
   18ca4:	add	r3, pc, r2
   18ca8:	movw	r2, #1297	; 0x511
   18cac:	bl	12450 <__assert_fail@plt>
   18cb0:	ldr	r0, [fp, #-8]
   18cb4:	ldrh	r0, [r0, #8]
   18cb8:	ldr	r1, [sp, #8]
   18cbc:	cmp	r0, r1
   18cc0:	bge	18cd0 <flatcc_builder_check_required@@Base+0x70>
   18cc4:	movw	r0, #0
   18cc8:	str	r0, [fp, #-4]
   18ccc:	b	18d38 <flatcc_builder_check_required@@Base+0xd8>
   18cd0:	movw	r0, #0
   18cd4:	str	r0, [sp, #4]
   18cd8:	ldr	r0, [sp, #4]
   18cdc:	ldr	r1, [sp, #8]
   18ce0:	cmp	r0, r1
   18ce4:	bge	18d30 <flatcc_builder_check_required@@Base+0xd0>
   18ce8:	ldr	r0, [fp, #-8]
   18cec:	ldr	r0, [r0, #4]
   18cf0:	ldr	r1, [sp, #12]
   18cf4:	ldr	r2, [sp, #4]
   18cf8:	add	r1, r1, r2, lsl #1
   18cfc:	ldrh	r1, [r1]
   18d00:	add	r0, r0, r1, lsl #1
   18d04:	ldrh	r0, [r0]
   18d08:	cmp	r0, #0
   18d0c:	bne	18d1c <flatcc_builder_check_required@@Base+0xbc>
   18d10:	movw	r0, #0
   18d14:	str	r0, [fp, #-4]
   18d18:	b	18d38 <flatcc_builder_check_required@@Base+0xd8>
   18d1c:	b	18d20 <flatcc_builder_check_required@@Base+0xc0>
   18d20:	ldr	r0, [sp, #4]
   18d24:	add	r0, r0, #1
   18d28:	str	r0, [sp, #4]
   18d2c:	b	18cd8 <flatcc_builder_check_required@@Base+0x78>
   18d30:	movw	r0, #1
   18d34:	str	r0, [fp, #-4]
   18d38:	ldr	r0, [fp, #-4]
   18d3c:	mov	sp, fp
   18d40:	pop	{fp, pc}
   18d44:	andeq	r4, r0, r0, lsr #14
   18d48:	andeq	r3, r0, ip, ror #29
   18d4c:	ldrdeq	r4, [r0], -lr

00018d50 <flatcc_builder_end_table@@Base>:
   18d50:	push	{r4, r5, fp, lr}
   18d54:	add	fp, sp, #8
   18d58:	sub	sp, sp, #48	; 0x30
   18d5c:	str	r0, [fp, #-16]
   18d60:	ldr	r0, [fp, #-16]
   18d64:	ldr	r0, [r0, #32]
   18d68:	ldrh	r0, [r0, #14]
   18d6c:	cmp	r0, #3
   18d70:	bne	18d78 <flatcc_builder_end_table@@Base+0x28>
   18d74:	b	18d98 <flatcc_builder_end_table@@Base+0x48>
   18d78:	ldr	r0, [pc, #500]	; 18f74 <flatcc_builder_end_table@@Base+0x224>
   18d7c:	add	r0, pc, r0
   18d80:	ldr	r1, [pc, #496]	; 18f78 <flatcc_builder_end_table@@Base+0x228>
   18d84:	add	r1, pc, r1
   18d88:	ldr	r2, [pc, #492]	; 18f7c <flatcc_builder_end_table@@Base+0x22c>
   18d8c:	add	r3, pc, r2
   18d90:	movw	r2, #1317	; 0x525
   18d94:	bl	12450 <__assert_fail@plt>
   18d98:	ldr	r0, [pc, #480]	; 18f80 <flatcc_builder_end_table@@Base+0x230>
   18d9c:	ldr	r1, [fp, #-16]
   18da0:	ldr	r1, [r1, #4]
   18da4:	sub	r1, r1, #4
   18da8:	str	r1, [fp, #-20]	; 0xffffffec
   18dac:	ldr	r1, [fp, #-16]
   18db0:	ldrh	r1, [r1, #8]
   18db4:	add	r1, r1, #2
   18db8:	lsl	r1, r1, #1
   18dbc:	strh	r1, [fp, #-22]	; 0xffffffea
   18dc0:	ldrh	r1, [fp, #-22]	; 0xffffffea
   18dc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18dc8:	strh	r1, [r2]
   18dcc:	ldr	r1, [fp, #-16]
   18dd0:	ldr	r1, [r1, #20]
   18dd4:	uxth	r1, r1
   18dd8:	add	r1, r1, #4
   18ddc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18de0:	strh	r1, [r2, #2]
   18de4:	ldr	r1, [fp, #-20]	; 0xffffffec
   18de8:	ldrh	r1, [r1]
   18dec:	ldr	r2, [fp, #-16]
   18df0:	ldr	r2, [r2, #12]
   18df4:	eor	r1, r1, r2
   18df8:	mul	r1, r1, r0
   18dfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e00:	ldrh	r2, [r2, #2]
   18e04:	eor	r1, r1, r2
   18e08:	mul	r0, r1, r0
   18e0c:	ldr	r1, [fp, #-16]
   18e10:	str	r0, [r1, #12]
   18e14:	ldr	r0, [fp, #-16]
   18e18:	ldr	r1, [fp, #-20]	; 0xffffffec
   18e1c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   18e20:	ldr	r3, [fp, #-16]
   18e24:	ldr	r3, [r3, #12]
   18e28:	uxth	r2, r2
   18e2c:	bl	183fc <flatcc_builder_create_cached_vtable@@Base>
   18e30:	str	r0, [sp, #24]
   18e34:	cmp	r0, #0
   18e38:	bne	18e48 <flatcc_builder_end_table@@Base+0xf8>
   18e3c:	movw	r0, #0
   18e40:	str	r0, [fp, #-12]
   18e44:	b	18f68 <flatcc_builder_end_table@@Base+0x218>
   18e48:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e4c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   18e50:	mov	r1, #0
   18e54:	bl	12420 <memset@plt>
   18e58:	ldr	r1, [fp, #-16]
   18e5c:	ldr	r2, [r1, #32]
   18e60:	ldr	r1, [r1, #76]	; 0x4c
   18e64:	ldr	r2, [r2, #20]
   18e68:	add	r1, r1, r2
   18e6c:	str	r1, [sp, #16]
   18e70:	ldr	r1, [fp, #-16]
   18e74:	ldr	r1, [r1]
   18e78:	ldr	r2, [sp, #16]
   18e7c:	sub	r1, r1, r2
   18e80:	asr	r1, r1, #1
   18e84:	str	r1, [sp, #20]
   18e88:	ldr	r1, [fp, #-16]
   18e8c:	ldr	r2, [fp, #-16]
   18e90:	ldr	r2, [r2, #16]
   18e94:	ldr	lr, [fp, #-16]
   18e98:	ldr	lr, [lr, #20]
   18e9c:	ldr	r3, [fp, #-16]
   18ea0:	ldrh	r3, [r3, #130]	; 0x82
   18ea4:	ldr	ip, [sp, #16]
   18ea8:	ldr	r4, [sp, #20]
   18eac:	ldr	r5, [sp, #24]
   18eb0:	str	r0, [sp, #12]
   18eb4:	mov	r0, r1
   18eb8:	mov	r1, r2
   18ebc:	mov	r2, lr
   18ec0:	uxth	r3, r3
   18ec4:	str	ip, [sp]
   18ec8:	str	r4, [sp, #4]
   18ecc:	str	r5, [sp, #8]
   18ed0:	bl	1878c <flatcc_builder_create_table@@Base>
   18ed4:	str	r0, [sp, #28]
   18ed8:	movw	r1, #0
   18edc:	cmp	r1, r0
   18ee0:	bne	18ef0 <flatcc_builder_end_table@@Base+0x1a0>
   18ee4:	movw	r0, #0
   18ee8:	str	r0, [fp, #-12]
   18eec:	b	18f68 <flatcc_builder_end_table@@Base+0x218>
   18ef0:	ldr	r0, [fp, #-16]
   18ef4:	ldr	r0, [r0, #32]
   18ef8:	ldr	r0, [r0, #24]
   18efc:	ldr	r1, [fp, #-16]
   18f00:	str	r0, [r1, #12]
   18f04:	ldr	r0, [fp, #-16]
   18f08:	ldr	r0, [r0, #32]
   18f0c:	ldrh	r0, [r0, #28]
   18f10:	ldr	r1, [fp, #-16]
   18f14:	strh	r0, [r1, #8]
   18f18:	ldr	r0, [fp, #-16]
   18f1c:	ldr	r0, [r0, #52]	; 0x34
   18f20:	ldr	r1, [fp, #-16]
   18f24:	ldr	r1, [r1, #32]
   18f28:	ldr	r1, [r1, #16]
   18f2c:	add	r0, r0, r1
   18f30:	ldr	r1, [fp, #-16]
   18f34:	str	r0, [r1, #4]
   18f38:	ldr	r0, [fp, #-16]
   18f3c:	ldr	r0, [r0, #76]	; 0x4c
   18f40:	ldr	r1, [fp, #-16]
   18f44:	ldr	r1, [r1, #32]
   18f48:	ldr	r1, [r1, #20]
   18f4c:	add	r0, r0, r1
   18f50:	ldr	r1, [fp, #-16]
   18f54:	str	r0, [r1]
   18f58:	ldr	r0, [fp, #-16]
   18f5c:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   18f60:	ldr	r0, [sp, #28]
   18f64:	str	r0, [fp, #-12]
   18f68:	ldr	r0, [fp, #-12]
   18f6c:	sub	sp, fp, #8
   18f70:	pop	{r4, r5, fp, pc}
   18f74:	andeq	r4, r0, r8, lsr r6
   18f78:	andeq	r3, r0, r4, lsl #28
   18f7c:	andeq	r4, r0, r0, asr r7
   18f80:			; <UNDEFINED> instruction: 0x9e3779b1

00018f84 <flatcc_builder_create_vector@@Base>:
   18f84:	push	{fp, lr}
   18f88:	mov	fp, sp
   18f8c:	sub	sp, sp, #112	; 0x70
   18f90:	ldr	ip, [fp, #12]
   18f94:	ldr	lr, [fp, #8]
   18f98:	str	r0, [fp, #-8]
   18f9c:	str	r1, [fp, #-12]
   18fa0:	str	r2, [fp, #-16]
   18fa4:	str	r3, [fp, #-20]	; 0xffffffec
   18fa8:	strh	lr, [fp, #-22]	; 0xffffffea
   18fac:	ldr	r0, [fp, #-16]
   18fb0:	ldr	r1, [fp, #12]
   18fb4:	cmp	r0, r1
   18fb8:	str	ip, [sp]
   18fbc:	bls	19000 <flatcc_builder_create_vector@@Base+0x7c>
   18fc0:	ldr	r0, [fp, #-16]
   18fc4:	ldr	r1, [fp, #12]
   18fc8:	cmp	r0, r1
   18fcc:	bhi	18fd4 <flatcc_builder_create_vector@@Base+0x50>
   18fd0:	b	18ff4 <flatcc_builder_create_vector@@Base+0x70>
   18fd4:	ldr	r0, [pc, #364]	; 19148 <flatcc_builder_create_vector@@Base+0x1c4>
   18fd8:	add	r0, pc, r0
   18fdc:	ldr	r1, [pc, #360]	; 1914c <flatcc_builder_create_vector@@Base+0x1c8>
   18fe0:	add	r1, pc, r1
   18fe4:	ldr	r2, [pc, #356]	; 19150 <flatcc_builder_create_vector@@Base+0x1cc>
   18fe8:	add	r3, pc, r2
   18fec:	movw	r2, #1365	; 0x555
   18ff0:	bl	12450 <__assert_fail@plt>
   18ff4:	movw	r0, #0
   18ff8:	str	r0, [fp, #-4]
   18ffc:	b	1913c <flatcc_builder_create_vector@@Base+0x1b8>
   19000:	sub	r0, fp, #22
   19004:	mov	r1, #4
   19008:	bl	17d10 <flatcc_builder_start_vector@@Base+0xac>
   1900c:	ldr	r0, [fp, #-8]
   19010:	ldrh	r1, [fp, #-22]	; 0xffffffea
   19014:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   19018:	ldr	r0, [fp, #-16]
   1901c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19020:	mul	r0, r0, r1
   19024:	str	r0, [fp, #-28]	; 0xffffffe4
   19028:	ldr	r0, [fp, #-16]
   1902c:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   19030:	str	r0, [fp, #-36]	; 0xffffffdc
   19034:	ldr	r0, [fp, #-8]
   19038:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1903c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   19040:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   19044:	str	r0, [fp, #-32]	; 0xffffffe0
   19048:	mov	r0, #0
   1904c:	str	r0, [sp, #4]
   19050:	str	r0, [sp, #8]
   19054:	ldr	r0, [sp, #4]
   19058:	add	r0, r0, #4
   1905c:	str	r0, [sp, #4]
   19060:	add	r0, sp, #4
   19064:	add	r0, r0, #8
   19068:	ldr	r1, [sp, #8]
   1906c:	sub	r2, fp, #36	; 0x24
   19070:	str	r2, [r0, r1, lsl #3]
   19074:	ldr	r1, [sp, #8]
   19078:	add	r0, r0, r1, lsl #3
   1907c:	movw	r1, #4
   19080:	str	r1, [r0, #4]
   19084:	ldr	r0, [sp, #8]
   19088:	add	r0, r0, #1
   1908c:	str	r0, [sp, #8]
   19090:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19094:	cmp	r0, #0
   19098:	bls	190dc <flatcc_builder_create_vector@@Base+0x158>
   1909c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   190a0:	ldr	r1, [sp, #4]
   190a4:	add	r0, r1, r0
   190a8:	str	r0, [sp, #4]
   190ac:	ldr	r0, [fp, #-12]
   190b0:	add	r1, sp, #4
   190b4:	add	r1, r1, #8
   190b8:	ldr	r2, [sp, #8]
   190bc:	str	r0, [r1, r2, lsl #3]
   190c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   190c4:	ldr	r2, [sp, #8]
   190c8:	add	r1, r1, r2, lsl #3
   190cc:	str	r0, [r1, #4]
   190d0:	ldr	r0, [sp, #8]
   190d4:	add	r0, r0, #1
   190d8:	str	r0, [sp, #8]
   190dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   190e0:	cmp	r0, #0
   190e4:	bls	1912c <flatcc_builder_create_vector@@Base+0x1a8>
   190e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   190ec:	ldr	r1, [sp, #4]
   190f0:	add	r0, r1, r0
   190f4:	str	r0, [sp, #4]
   190f8:	add	r0, sp, #4
   190fc:	add	r0, r0, #8
   19100:	ldr	r1, [sp, #8]
   19104:	ldr	r2, [pc, #72]	; 19154 <flatcc_builder_create_vector@@Base+0x1d0>
   19108:	ldr	r2, [pc, r2]
   1910c:	str	r2, [r0, r1, lsl #3]
   19110:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19114:	ldr	r2, [sp, #8]
   19118:	add	r0, r0, r2, lsl #3
   1911c:	str	r1, [r0, #4]
   19120:	ldr	r0, [sp, #8]
   19124:	add	r0, r0, #1
   19128:	str	r0, [sp, #8]
   1912c:	ldr	r0, [fp, #-8]
   19130:	add	r1, sp, #4
   19134:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   19138:	str	r0, [fp, #-4]
   1913c:	ldr	r0, [fp, #-4]
   19140:	mov	sp, fp
   19144:	pop	{fp, pc}
   19148:	andeq	r4, r0, r6, asr #10
   1914c:	andeq	r3, r0, r8, lsr #23
   19150:	andeq	r4, r0, r9, asr #10
   19154:	andeq	r4, r1, ip, lsr pc

00019158 <flatcc_builder_end_vector@@Base>:
   19158:	push	{fp, lr}
   1915c:	mov	fp, sp
   19160:	sub	sp, sp, #24
   19164:	str	r0, [fp, #-8]
   19168:	ldr	r0, [fp, #-8]
   1916c:	ldr	r0, [r0, #32]
   19170:	ldrh	r0, [r0, #14]
   19174:	cmp	r0, #4
   19178:	bne	19180 <flatcc_builder_end_vector@@Base+0x28>
   1917c:	b	191a0 <flatcc_builder_end_vector@@Base+0x48>
   19180:	ldr	r0, [pc, #152]	; 19220 <flatcc_builder_end_vector@@Base+0xc8>
   19184:	add	r0, pc, r0
   19188:	ldr	r1, [pc, #148]	; 19224 <flatcc_builder_end_vector@@Base+0xcc>
   1918c:	add	r1, pc, r1
   19190:	ldr	r2, [pc, #144]	; 19228 <flatcc_builder_end_vector@@Base+0xd0>
   19194:	add	r3, pc, r2
   19198:	movw	r2, #1400	; 0x578
   1919c:	bl	12450 <__assert_fail@plt>
   191a0:	ldr	r0, [fp, #-8]
   191a4:	ldr	r1, [fp, #-8]
   191a8:	ldr	r1, [r1, #16]
   191ac:	ldr	r2, [fp, #-8]
   191b0:	ldr	r2, [r2, #32]
   191b4:	ldr	r2, [r2, #20]
   191b8:	ldr	r3, [fp, #-8]
   191bc:	ldr	r3, [r3, #32]
   191c0:	ldr	r3, [r3, #16]
   191c4:	ldr	ip, [fp, #-8]
   191c8:	ldrh	ip, [ip, #130]	; 0x82
   191cc:	ldr	lr, [fp, #-8]
   191d0:	ldr	lr, [lr, #32]
   191d4:	ldr	lr, [lr, #24]
   191d8:	uxth	ip, ip
   191dc:	str	ip, [sp]
   191e0:	str	lr, [sp, #4]
   191e4:	bl	18f84 <flatcc_builder_create_vector@@Base>
   191e8:	str	r0, [sp, #12]
   191ec:	movw	r1, #0
   191f0:	cmp	r1, r0
   191f4:	bne	19204 <flatcc_builder_end_vector@@Base+0xac>
   191f8:	movw	r0, #0
   191fc:	str	r0, [fp, #-4]
   19200:	b	19214 <flatcc_builder_end_vector@@Base+0xbc>
   19204:	ldr	r0, [fp, #-8]
   19208:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   1920c:	ldr	r0, [sp, #12]
   19210:	str	r0, [fp, #-4]
   19214:	ldr	r0, [fp, #-4]
   19218:	mov	sp, fp
   1921c:	pop	{fp, pc}
   19220:	andeq	r3, r0, lr, lsr sp
   19224:	strdeq	r3, [r0], -ip
   19228:	andeq	r4, r0, r3, lsl r4

0001922c <flatcc_builder_vector_count@@Base>:
   1922c:	sub	sp, sp, #4
   19230:	str	r0, [sp]
   19234:	ldr	r0, [sp]
   19238:	ldr	r0, [r0, #32]
   1923c:	ldr	r0, [r0, #20]
   19240:	add	sp, sp, #4
   19244:	bx	lr

00019248 <flatcc_builder_vector_edit@@Base>:
   19248:	sub	sp, sp, #4
   1924c:	str	r0, [sp]
   19250:	ldr	r0, [sp]
   19254:	ldr	r0, [r0, #16]
   19258:	add	sp, sp, #4
   1925c:	bx	lr

00019260 <flatcc_builder_create_offset_vector_direct@@Base>:
   19260:	push	{fp, lr}
   19264:	mov	fp, sp
   19268:	sub	sp, sp, #16
   1926c:	str	r0, [fp, #-4]
   19270:	str	r1, [sp, #8]
   19274:	str	r2, [sp, #4]
   19278:	ldr	r0, [fp, #-4]
   1927c:	ldr	r1, [sp, #8]
   19280:	ldr	r2, [sp, #4]
   19284:	movw	r3, #0
   19288:	bl	19294 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   1928c:	mov	sp, fp
   19290:	pop	{fp, pc}
   19294:	push	{fp, lr}
   19298:	mov	fp, sp
   1929c:	sub	sp, sp, #120	; 0x78
   192a0:	ldr	ip, [pc, #696]	; 19560 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   192a4:	str	r0, [fp, #-8]
   192a8:	str	r1, [fp, #-12]
   192ac:	str	r2, [fp, #-16]
   192b0:	str	r3, [fp, #-20]	; 0xffffffec
   192b4:	ldr	r0, [fp, #-16]
   192b8:	cmp	r0, ip
   192bc:	bls	192cc <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   192c0:	movw	r0, #0
   192c4:	str	r0, [fp, #-4]
   192c8:	b	19554 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   192cc:	ldr	r0, [fp, #-8]
   192d0:	mov	r1, #4
   192d4:	str	r1, [sp]
   192d8:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   192dc:	ldr	r0, [fp, #-16]
   192e0:	lsl	r0, r0, #2
   192e4:	str	r0, [fp, #-24]	; 0xffffffe8
   192e8:	ldr	r0, [fp, #-16]
   192ec:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   192f0:	str	r0, [fp, #-32]	; 0xffffffe0
   192f4:	ldr	r0, [fp, #-8]
   192f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   192fc:	ldr	r2, [sp]
   19300:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   19304:	str	r0, [fp, #-28]	; 0xffffffe4
   19308:	mov	r0, #0
   1930c:	str	r0, [sp, #4]
   19310:	str	r0, [sp, #8]
   19314:	ldr	r0, [sp, #4]
   19318:	add	r0, r0, #4
   1931c:	str	r0, [sp, #4]
   19320:	add	r0, sp, #4
   19324:	add	r0, r0, #8
   19328:	ldr	r1, [sp, #8]
   1932c:	sub	r2, fp, #32
   19330:	str	r2, [r0, r1, lsl #3]
   19334:	ldr	r1, [sp, #8]
   19338:	add	r0, r0, r1, lsl #3
   1933c:	movw	r1, #4
   19340:	str	r1, [r0, #4]
   19344:	ldr	r0, [sp, #8]
   19348:	add	r0, r0, #1
   1934c:	str	r0, [sp, #8]
   19350:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19354:	cmp	r0, #0
   19358:	bls	1939c <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   1935c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19360:	ldr	r1, [sp, #4]
   19364:	add	r0, r1, r0
   19368:	str	r0, [sp, #4]
   1936c:	ldr	r0, [fp, #-12]
   19370:	add	r1, sp, #4
   19374:	add	r1, r1, #8
   19378:	ldr	r2, [sp, #8]
   1937c:	str	r0, [r1, r2, lsl #3]
   19380:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19384:	ldr	r2, [sp, #8]
   19388:	add	r1, r1, r2, lsl #3
   1938c:	str	r0, [r1, #4]
   19390:	ldr	r0, [sp, #8]
   19394:	add	r0, r0, #1
   19398:	str	r0, [sp, #8]
   1939c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   193a0:	cmp	r0, #0
   193a4:	bls	193ec <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   193a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   193ac:	ldr	r1, [sp, #4]
   193b0:	add	r0, r1, r0
   193b4:	str	r0, [sp, #4]
   193b8:	add	r0, sp, #4
   193bc:	add	r0, r0, #8
   193c0:	ldr	r1, [sp, #8]
   193c4:	ldr	r2, [pc, #444]	; 19588 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   193c8:	ldr	r2, [pc, r2]
   193cc:	str	r2, [r0, r1, lsl #3]
   193d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   193d4:	ldr	r2, [sp, #8]
   193d8:	add	r0, r0, r2, lsl #3
   193dc:	str	r1, [r0, #4]
   193e0:	ldr	r0, [sp, #8]
   193e4:	add	r0, r0, #1
   193e8:	str	r0, [sp, #8]
   193ec:	ldr	r0, [fp, #-8]
   193f0:	ldr	r0, [r0, #136]	; 0x88
   193f4:	ldr	r1, [sp, #4]
   193f8:	sub	r0, r0, r1
   193fc:	str	r0, [fp, #-36]	; 0xffffffdc
   19400:	movw	r0, #0
   19404:	str	r0, [fp, #-44]	; 0xffffffd4
   19408:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1940c:	ldr	r1, [fp, #-16]
   19410:	cmp	r0, r1
   19414:	bcs	19544 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   19418:	ldr	r0, [fp, #-12]
   1941c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19420:	add	r0, r0, r1, lsl #2
   19424:	ldr	r0, [r0]
   19428:	cmp	r0, #0
   1942c:	beq	194bc <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   19430:	ldr	r0, [fp, #-12]
   19434:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19438:	ldr	r0, [r0, r1, lsl #2]
   1943c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19440:	sub	r0, r0, r2
   19444:	sub	r0, r0, r1, lsl #2
   19448:	sub	r0, r0, #4
   1944c:	str	r0, [fp, #-40]	; 0xffffffd8
   19450:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19454:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   19458:	ldr	r1, [fp, #-12]
   1945c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19460:	add	r1, r1, r2, lsl #2
   19464:	str	r0, [r1]
   19468:	ldr	r0, [fp, #-20]	; 0xffffffec
   1946c:	movw	r1, #0
   19470:	cmp	r0, r1
   19474:	beq	194b8 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   19478:	ldr	r0, [fp, #-20]	; 0xffffffec
   1947c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19480:	add	r0, r0, r1
   19484:	ldrb	r0, [r0]
   19488:	cmp	r0, #0
   1948c:	beq	19494 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   19490:	b	194b4 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   19494:	ldr	r0, [pc, #224]	; 1957c <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   19498:	add	r0, pc, r0
   1949c:	ldr	r1, [pc, #220]	; 19580 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   194a0:	add	r1, pc, r1
   194a4:	ldr	r2, [pc, #216]	; 19584 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   194a8:	add	r3, pc, r2
   194ac:	movw	r2, #1457	; 0x5b1
   194b0:	bl	12450 <__assert_fail@plt>
   194b4:	b	194b8 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   194b8:	b	19530 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   194bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   194c0:	movw	r1, #0
   194c4:	cmp	r0, r1
   194c8:	beq	1950c <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   194cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   194d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   194d4:	add	r0, r0, r1
   194d8:	ldrb	r0, [r0]
   194dc:	cmp	r0, #0
   194e0:	bne	194e8 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   194e4:	b	19508 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   194e8:	ldr	r0, [pc, #128]	; 19570 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   194ec:	add	r0, pc, r0
   194f0:	ldr	r1, [pc, #124]	; 19574 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   194f4:	add	r1, pc, r1
   194f8:	ldr	r2, [pc, #120]	; 19578 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   194fc:	add	r3, pc, r2
   19500:	movw	r2, #1461	; 0x5b5
   19504:	bl	12450 <__assert_fail@plt>
   19508:	b	1952c <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   1950c:	ldr	r0, [pc, #80]	; 19564 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   19510:	add	r0, pc, r0
   19514:	ldr	r1, [pc, #76]	; 19568 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   19518:	add	r1, pc, r1
   1951c:	ldr	r2, [pc, #72]	; 1956c <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   19520:	add	r3, pc, r2
   19524:	movw	r2, #1463	; 0x5b7
   19528:	bl	12450 <__assert_fail@plt>
   1952c:	b	19530 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   19530:	b	19534 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   19534:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19538:	add	r0, r0, #1
   1953c:	str	r0, [fp, #-44]	; 0xffffffd4
   19540:	b	19408 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   19544:	ldr	r0, [fp, #-8]
   19548:	add	r1, sp, #4
   1954c:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   19550:	str	r0, [fp, #-4]
   19554:	ldr	r0, [fp, #-4]
   19558:	mov	sp, fp
   1955c:	pop	{fp, pc}
   19560:	svccc	0x00ffffff
   19564:	andeq	r4, r0, r5, lsr r8
   19568:	andeq	r3, r0, r0, ror r6
   1956c:	andeq	r4, r0, r7, lsr #16
   19570:	ldrdeq	r4, [r0], -lr
   19574:	muleq	r0, r4, r6
   19578:	andeq	r4, r0, fp, asr #16
   1957c:	andeq	r4, r0, r1, lsr #17
   19580:	andeq	r3, r0, r8, ror #13
   19584:	muleq	r0, pc, r8	; <UNPREDICTABLE>
   19588:	andeq	r4, r1, ip, ror ip

0001958c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1958c:	push	{fp, lr}
   19590:	mov	fp, sp
   19594:	sub	sp, sp, #16
   19598:	str	r0, [sp, #8]
   1959c:	str	r1, [sp, #4]
   195a0:	ldr	r0, [sp, #8]
   195a4:	ldr	r0, [r0, #32]
   195a8:	ldrh	r0, [r0, #14]
   195ac:	cmp	r0, #5
   195b0:	bne	195b8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   195b4:	b	195d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   195b8:	ldr	r0, [pc, #112]	; 19630 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   195bc:	add	r0, pc, r0
   195c0:	ldr	r1, [pc, #108]	; 19634 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   195c4:	add	r1, pc, r1
   195c8:	ldr	r2, [pc, #104]	; 19638 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   195cc:	add	r3, pc, r2
   195d0:	movw	r2, #1493	; 0x5d5
   195d4:	bl	12450 <__assert_fail@plt>
   195d8:	ldr	r0, [sp, #8]
   195dc:	ldr	r1, [sp, #8]
   195e0:	ldr	r1, [r1, #16]
   195e4:	ldr	r2, [sp, #8]
   195e8:	ldr	r2, [r2, #32]
   195ec:	ldr	r2, [r2, #20]
   195f0:	ldr	r3, [sp, #4]
   195f4:	bl	19294 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   195f8:	str	r0, [sp]
   195fc:	movw	r1, #0
   19600:	cmp	r1, r0
   19604:	bne	19614 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   19608:	movw	r0, #0
   1960c:	str	r0, [fp, #-4]
   19610:	b	19624 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   19614:	ldr	r0, [sp, #8]
   19618:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   1961c:	ldr	r0, [sp]
   19620:	str	r0, [fp, #-4]
   19624:	ldr	r0, [fp, #-4]
   19628:	mov	sp, fp
   1962c:	pop	{fp, pc}
   19630:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   19634:	andeq	r3, r0, r4, asr #11
   19638:	andeq	r4, r0, r8, rrx

0001963c <flatcc_builder_offset_vector_edit@@Base>:
   1963c:	sub	sp, sp, #4
   19640:	str	r0, [sp]
   19644:	ldr	r0, [sp]
   19648:	ldr	r0, [r0, #16]
   1964c:	add	sp, sp, #4
   19650:	bx	lr

00019654 <flatcc_builder_offset_vector_count@@Base>:
   19654:	sub	sp, sp, #4
   19658:	str	r0, [sp]
   1965c:	ldr	r0, [sp]
   19660:	ldr	r0, [r0, #32]
   19664:	ldr	r0, [r0, #20]
   19668:	add	sp, sp, #4
   1966c:	bx	lr

00019670 <flatcc_builder_table_add_union@@Base>:
   19670:	push	{fp, lr}
   19674:	mov	fp, sp
   19678:	sub	sp, sp, #32
   1967c:	str	r2, [fp, #-12]
   19680:	str	r3, [fp, #-8]
   19684:	str	r0, [sp, #16]
   19688:	str	r1, [sp, #12]
   1968c:	ldr	r0, [sp, #16]
   19690:	ldr	r0, [r0, #32]
   19694:	ldrh	r0, [r0, #14]
   19698:	cmp	r0, #3
   1969c:	bne	196a4 <flatcc_builder_table_add_union@@Base+0x34>
   196a0:	b	196c4 <flatcc_builder_table_add_union@@Base+0x54>
   196a4:	ldr	r0, [pc, #388]	; 19830 <flatcc_builder_table_add_union@@Base+0x1c0>
   196a8:	add	r0, pc, r0
   196ac:	ldr	r1, [pc, #384]	; 19834 <flatcc_builder_table_add_union@@Base+0x1c4>
   196b0:	add	r1, pc, r1
   196b4:	ldr	r2, [pc, #380]	; 19838 <flatcc_builder_table_add_union@@Base+0x1c8>
   196b8:	add	r3, pc, r2
   196bc:	movw	r2, #1518	; 0x5ee
   196c0:	bl	12450 <__assert_fail@plt>
   196c4:	ldrb	r0, [fp, #-12]
   196c8:	cmp	r0, #0
   196cc:	bne	19724 <flatcc_builder_table_add_union@@Base+0xb4>
   196d0:	ldr	r0, [fp, #-8]
   196d4:	cmp	r0, #0
   196d8:	beq	19724 <flatcc_builder_table_add_union@@Base+0xb4>
   196dc:	ldrb	r0, [fp, #-12]
   196e0:	cmp	r0, #0
   196e4:	bne	196f4 <flatcc_builder_table_add_union@@Base+0x84>
   196e8:	ldr	r0, [fp, #-8]
   196ec:	cmp	r0, #0
   196f0:	bne	196f8 <flatcc_builder_table_add_union@@Base+0x88>
   196f4:	b	19718 <flatcc_builder_table_add_union@@Base+0xa8>
   196f8:	ldr	r0, [pc, #316]	; 1983c <flatcc_builder_table_add_union@@Base+0x1cc>
   196fc:	add	r0, pc, r0
   19700:	ldr	r1, [pc, #312]	; 19840 <flatcc_builder_table_add_union@@Base+0x1d0>
   19704:	add	r1, pc, r1
   19708:	ldr	r2, [pc, #308]	; 19844 <flatcc_builder_table_add_union@@Base+0x1d4>
   1970c:	add	r3, pc, r2
   19710:	movw	r2, #1519	; 0x5ef
   19714:	bl	12450 <__assert_fail@plt>
   19718:	mvn	r0, #0
   1971c:	str	r0, [fp, #-4]
   19720:	b	19824 <flatcc_builder_table_add_union@@Base+0x1b4>
   19724:	ldr	r0, [fp, #-8]
   19728:	cmp	r0, #0
   1972c:	beq	1979c <flatcc_builder_table_add_union@@Base+0x12c>
   19730:	ldr	r0, [sp, #16]
   19734:	ldr	r1, [sp, #12]
   19738:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   1973c:	str	r0, [sp, #8]
   19740:	ldr	r0, [sp, #8]
   19744:	movw	r1, #0
   19748:	cmp	r0, r1
   1974c:	bne	19790 <flatcc_builder_table_add_union@@Base+0x120>
   19750:	ldr	r0, [sp, #8]
   19754:	movw	r1, #0
   19758:	cmp	r0, r1
   1975c:	beq	19764 <flatcc_builder_table_add_union@@Base+0xf4>
   19760:	b	19784 <flatcc_builder_table_add_union@@Base+0x114>
   19764:	ldr	r0, [pc, #220]	; 19848 <flatcc_builder_table_add_union@@Base+0x1d8>
   19768:	add	r0, pc, r0
   1976c:	ldr	r1, [pc, #216]	; 1984c <flatcc_builder_table_add_union@@Base+0x1dc>
   19770:	add	r1, pc, r1
   19774:	ldr	r2, [pc, #212]	; 19850 <flatcc_builder_table_add_union@@Base+0x1e0>
   19778:	add	r3, pc, r2
   1977c:	movw	r2, #1522	; 0x5f2
   19780:	bl	12450 <__assert_fail@plt>
   19784:	mvn	r0, #0
   19788:	str	r0, [fp, #-4]
   1978c:	b	19824 <flatcc_builder_table_add_union@@Base+0x1b4>
   19790:	ldr	r0, [fp, #-8]
   19794:	ldr	r1, [sp, #8]
   19798:	str	r0, [r1]
   1979c:	ldr	r0, [sp, #16]
   197a0:	ldr	r1, [sp, #12]
   197a4:	sub	r1, r1, #1
   197a8:	movw	r2, #1
   197ac:	movw	r3, #1
   197b0:	uxth	r3, r3
   197b4:	bl	19990 <flatcc_builder_table_add@@Base>
   197b8:	str	r0, [sp, #4]
   197bc:	ldr	r0, [sp, #4]
   197c0:	movw	r1, #0
   197c4:	cmp	r0, r1
   197c8:	bne	1980c <flatcc_builder_table_add_union@@Base+0x19c>
   197cc:	ldr	r0, [sp, #4]
   197d0:	movw	r1, #0
   197d4:	cmp	r0, r1
   197d8:	beq	197e0 <flatcc_builder_table_add_union@@Base+0x170>
   197dc:	b	19800 <flatcc_builder_table_add_union@@Base+0x190>
   197e0:	ldr	r0, [pc, #108]	; 19854 <flatcc_builder_table_add_union@@Base+0x1e4>
   197e4:	add	r0, pc, r0
   197e8:	ldr	r1, [pc, #104]	; 19858 <flatcc_builder_table_add_union@@Base+0x1e8>
   197ec:	add	r1, pc, r1
   197f0:	ldr	r2, [pc, #100]	; 1985c <flatcc_builder_table_add_union@@Base+0x1ec>
   197f4:	add	r3, pc, r2
   197f8:	movw	r2, #1526	; 0x5f6
   197fc:	bl	12450 <__assert_fail@plt>
   19800:	mvn	r0, #0
   19804:	str	r0, [fp, #-4]
   19808:	b	19824 <flatcc_builder_table_add_union@@Base+0x1b4>
   1980c:	ldrb	r0, [fp, #-12]
   19810:	bl	19af8 <flatcc_builder_table_add@@Base+0x168>
   19814:	ldr	lr, [sp, #4]
   19818:	strb	r0, [lr]
   1981c:	movw	r0, #0
   19820:	str	r0, [fp, #-4]
   19824:	ldr	r0, [fp, #-4]
   19828:	mov	sp, fp
   1982c:	pop	{fp, pc}
   19830:	andeq	r3, r0, ip, lsl #26
   19834:	ldrdeq	r3, [r0], -r8
   19838:	andeq	r3, r0, lr, ror #31
   1983c:	andeq	r4, r0, r2
   19840:	andeq	r3, r0, r4, lsl #9
   19844:	muleq	r0, sl, pc	; <UNPREDICTABLE>
   19848:			; <UNDEFINED> instruction: 0x00003fb8
   1984c:	andeq	r3, r0, r8, lsl r4
   19850:	andeq	r3, r0, lr, lsr #30
   19854:	andeq	r3, r0, r6, asr #30
   19858:	muleq	r0, ip, r3
   1985c:			; <UNDEFINED> instruction: 0x00003eb2

00019860 <flatcc_builder_table_add_offset@@Base>:
   19860:	push	{fp, lr}
   19864:	mov	fp, sp
   19868:	sub	sp, sp, #8
   1986c:	str	r0, [sp, #4]
   19870:	str	r1, [sp]
   19874:	ldr	r0, [sp, #4]
   19878:	ldr	r0, [r0, #32]
   1987c:	ldrh	r0, [r0, #14]
   19880:	cmp	r0, #3
   19884:	bne	1988c <flatcc_builder_table_add_offset@@Base+0x2c>
   19888:	b	198ac <flatcc_builder_table_add_offset@@Base+0x4c>
   1988c:	ldr	r0, [pc, #212]	; 19968 <flatcc_builder_table_add_offset@@Base+0x108>
   19890:	add	r0, pc, r0
   19894:	ldr	r1, [pc, #208]	; 1996c <flatcc_builder_table_add_offset@@Base+0x10c>
   19898:	add	r1, pc, r1
   1989c:	ldr	r2, [pc, #204]	; 19970 <flatcc_builder_table_add_offset@@Base+0x110>
   198a0:	add	r3, pc, r2
   198a4:	movw	r2, #1811	; 0x713
   198a8:	bl	12450 <__assert_fail@plt>
   198ac:	ldr	r0, [sp]
   198b0:	cmp	r0, #0
   198b4:	blt	198cc <flatcc_builder_table_add_offset@@Base+0x6c>
   198b8:	ldr	r0, [sp]
   198bc:	movw	r1, #32764	; 0x7ffc
   198c0:	cmp	r0, r1
   198c4:	bgt	198cc <flatcc_builder_table_add_offset@@Base+0x6c>
   198c8:	b	198ec <flatcc_builder_table_add_offset@@Base+0x8c>
   198cc:	ldr	r0, [pc, #160]	; 19974 <flatcc_builder_table_add_offset@@Base+0x114>
   198d0:	add	r0, pc, r0
   198d4:	ldr	r1, [pc, #156]	; 19978 <flatcc_builder_table_add_offset@@Base+0x118>
   198d8:	add	r1, pc, r1
   198dc:	ldr	r2, [pc, #152]	; 1997c <flatcc_builder_table_add_offset@@Base+0x11c>
   198e0:	add	r3, pc, r2
   198e4:	movw	r2, #1812	; 0x714
   198e8:	bl	12450 <__assert_fail@plt>
   198ec:	ldr	r0, [sp, #4]
   198f0:	ldr	r0, [r0, #4]
   198f4:	ldr	r1, [sp]
   198f8:	add	r0, r0, r1, lsl #1
   198fc:	ldrh	r0, [r0]
   19900:	cmp	r0, #0
   19904:	beq	19928 <flatcc_builder_table_add_offset@@Base+0xc8>
   19908:	ldr	r0, [pc, #116]	; 19984 <flatcc_builder_table_add_offset@@Base+0x124>
   1990c:	add	r0, pc, r0
   19910:	ldr	r1, [pc, #112]	; 19988 <flatcc_builder_table_add_offset@@Base+0x128>
   19914:	add	r1, pc, r1
   19918:	ldr	r2, [pc, #108]	; 1998c <flatcc_builder_table_add_offset@@Base+0x12c>
   1991c:	add	r3, pc, r2
   19920:	movw	r2, #1819	; 0x71b
   19924:	bl	12450 <__assert_fail@plt>
   19928:	ldr	r0, [pc, #80]	; 19980 <flatcc_builder_table_add_offset@@Base+0x120>
   1992c:	ldr	r1, [sp]
   19930:	ldr	r2, [sp, #4]
   19934:	ldr	r2, [r2, #12]
   19938:	eor	r1, r1, r2
   1993c:	mul	r1, r1, r0
   19940:	eor	r1, r1, #4
   19944:	mul	r0, r1, r0
   19948:	ldr	r1, [sp, #4]
   1994c:	str	r0, [r1, #12]
   19950:	ldr	r0, [sp, #4]
   19954:	ldr	r1, [sp]
   19958:	uxth	r1, r1
   1995c:	bl	1a920 <flatcc_builder_table_add_copy@@Base+0x64>
   19960:	mov	sp, fp
   19964:	pop	{fp, pc}
   19968:	andeq	r3, r0, r4, lsr #22
   1996c:	strdeq	r3, [r0], -r0
   19970:	andeq	r4, r0, r8, lsl #4
   19974:	andeq	r4, r0, r8, asr r1
   19978:			; <UNDEFINED> instruction: 0x000032b0
   1997c:	andeq	r4, r0, r8, asr #3
   19980:			; <UNDEFINED> instruction: 0x9e3779b1
   19984:	andeq	r4, r0, r9, lsr r4
   19988:	andeq	r3, r0, r4, ror r2
   1998c:	andeq	r4, r0, ip, lsl #3

00019990 <flatcc_builder_table_add@@Base>:
   19990:	push	{fp, lr}
   19994:	mov	fp, sp
   19998:	sub	sp, sp, #16
   1999c:	str	r0, [fp, #-4]
   199a0:	str	r1, [sp, #8]
   199a4:	str	r2, [sp, #4]
   199a8:	strh	r3, [sp, #2]
   199ac:	ldr	r0, [fp, #-4]
   199b0:	ldr	r0, [r0, #32]
   199b4:	ldrh	r0, [r0, #14]
   199b8:	cmp	r0, #3
   199bc:	bne	199c4 <flatcc_builder_table_add@@Base+0x34>
   199c0:	b	199e4 <flatcc_builder_table_add@@Base+0x54>
   199c4:	ldr	r0, [pc, #260]	; 19ad0 <flatcc_builder_table_add@@Base+0x140>
   199c8:	add	r0, pc, r0
   199cc:	ldr	r1, [pc, #256]	; 19ad4 <flatcc_builder_table_add@@Base+0x144>
   199d0:	add	r1, pc, r1
   199d4:	ldr	r2, [pc, #252]	; 19ad8 <flatcc_builder_table_add@@Base+0x148>
   199d8:	add	r3, pc, r2
   199dc:	movw	r2, #1773	; 0x6ed
   199e0:	bl	12450 <__assert_fail@plt>
   199e4:	ldr	r0, [sp, #8]
   199e8:	cmp	r0, #0
   199ec:	blt	19a04 <flatcc_builder_table_add@@Base+0x74>
   199f0:	ldr	r0, [sp, #8]
   199f4:	movw	r1, #32764	; 0x7ffc
   199f8:	cmp	r0, r1
   199fc:	bgt	19a04 <flatcc_builder_table_add@@Base+0x74>
   19a00:	b	19a24 <flatcc_builder_table_add@@Base+0x94>
   19a04:	ldr	r0, [pc, #208]	; 19adc <flatcc_builder_table_add@@Base+0x14c>
   19a08:	add	r0, pc, r0
   19a0c:	ldr	r1, [pc, #204]	; 19ae0 <flatcc_builder_table_add@@Base+0x150>
   19a10:	add	r1, pc, r1
   19a14:	ldr	r2, [pc, #200]	; 19ae4 <flatcc_builder_table_add@@Base+0x154>
   19a18:	add	r3, pc, r2
   19a1c:	movw	r2, #1774	; 0x6ee
   19a20:	bl	12450 <__assert_fail@plt>
   19a24:	ldrh	r0, [sp, #2]
   19a28:	ldr	r1, [fp, #-4]
   19a2c:	ldrh	r1, [r1, #130]	; 0x82
   19a30:	cmp	r0, r1
   19a34:	ble	19a44 <flatcc_builder_table_add@@Base+0xb4>
   19a38:	ldrh	r0, [sp, #2]
   19a3c:	ldr	r1, [fp, #-4]
   19a40:	strh	r0, [r1, #130]	; 0x82
   19a44:	ldr	r0, [fp, #-4]
   19a48:	ldr	r0, [r0, #4]
   19a4c:	ldr	r1, [sp, #8]
   19a50:	add	r0, r0, r1, lsl #1
   19a54:	ldrh	r0, [r0]
   19a58:	cmp	r0, #0
   19a5c:	beq	19a80 <flatcc_builder_table_add@@Base+0xf0>
   19a60:	ldr	r0, [pc, #132]	; 19aec <flatcc_builder_table_add@@Base+0x15c>
   19a64:	add	r0, pc, r0
   19a68:	ldr	r1, [pc, #128]	; 19af0 <flatcc_builder_table_add@@Base+0x160>
   19a6c:	add	r1, pc, r1
   19a70:	ldr	r2, [pc, #124]	; 19af4 <flatcc_builder_table_add@@Base+0x164>
   19a74:	add	r3, pc, r2
   19a78:	movw	r2, #1784	; 0x6f8
   19a7c:	bl	12450 <__assert_fail@plt>
   19a80:	ldr	r0, [pc, #96]	; 19ae8 <flatcc_builder_table_add@@Base+0x158>
   19a84:	ldr	r1, [sp, #8]
   19a88:	ldr	r2, [fp, #-4]
   19a8c:	ldr	r2, [r2, #12]
   19a90:	eor	r1, r1, r2
   19a94:	mul	r1, r1, r0
   19a98:	ldr	r2, [sp, #4]
   19a9c:	eor	r1, r1, r2
   19aa0:	mul	r0, r1, r0
   19aa4:	ldr	r1, [fp, #-4]
   19aa8:	str	r0, [r1, #12]
   19aac:	ldr	r0, [fp, #-4]
   19ab0:	ldr	r1, [sp, #4]
   19ab4:	ldrh	r2, [sp, #2]
   19ab8:	ldr	r3, [sp, #8]
   19abc:	uxth	r2, r2
   19ac0:	uxth	r3, r3
   19ac4:	bl	1a73c <flatcc_builder_string_len@@Base+0x1c>
   19ac8:	mov	sp, fp
   19acc:	pop	{fp, pc}
   19ad0:	andeq	r3, r0, ip, ror #19
   19ad4:			; <UNDEFINED> instruction: 0x000031b8
   19ad8:	andeq	r4, r0, r6
   19adc:	andeq	r4, r0, r0, lsr #32
   19ae0:	andeq	r3, r0, r8, ror r1
   19ae4:	andeq	r3, r0, r6, asr #31
   19ae8:			; <UNDEFINED> instruction: 0x9e3779b1
   19aec:	andeq	r4, r0, r1, ror #5
   19af0:	andeq	r3, r0, ip, lsl r1
   19af4:	andeq	r3, r0, sl, ror #30
   19af8:	sub	sp, sp, #4
   19afc:	strb	r0, [sp, #3]
   19b00:	ldrb	r0, [sp, #3]
   19b04:	add	sp, sp, #4
   19b08:	bx	lr

00019b0c <flatcc_builder_table_add_union_vector@@Base>:
   19b0c:	push	{fp, lr}
   19b10:	mov	fp, sp
   19b14:	sub	sp, sp, #24
   19b18:	str	r2, [sp, #12]
   19b1c:	str	r3, [sp, #16]
   19b20:	str	r0, [sp, #8]
   19b24:	str	r1, [sp, #4]
   19b28:	ldr	r0, [sp, #8]
   19b2c:	ldr	r0, [r0, #32]
   19b30:	ldrh	r0, [r0, #14]
   19b34:	cmp	r0, #3
   19b38:	bne	19b40 <flatcc_builder_table_add_union_vector@@Base+0x34>
   19b3c:	b	19b60 <flatcc_builder_table_add_union_vector@@Base+0x54>
   19b40:	ldr	r0, [pc, #420]	; 19cec <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   19b44:	add	r0, pc, r0
   19b48:	ldr	r1, [pc, #416]	; 19cf0 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   19b4c:	add	r1, pc, r1
   19b50:	ldr	r2, [pc, #412]	; 19cf4 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   19b54:	add	r3, pc, r2
   19b58:	movw	r2, #1536	; 0x600
   19b5c:	bl	12450 <__assert_fail@plt>
   19b60:	ldr	r0, [sp, #12]
   19b64:	cmp	r0, #0
   19b68:	movw	r0, #0
   19b6c:	moveq	r0, #1
   19b70:	and	r0, r0, #1
   19b74:	ldr	r1, [sp, #16]
   19b78:	cmp	r1, #0
   19b7c:	movw	r1, #0
   19b80:	moveq	r1, #1
   19b84:	and	r1, r1, #1
   19b88:	cmp	r0, r1
   19b8c:	beq	19bf0 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   19b90:	ldr	r0, [sp, #12]
   19b94:	cmp	r0, #0
   19b98:	movw	r0, #0
   19b9c:	moveq	r0, #1
   19ba0:	and	r0, r0, #1
   19ba4:	ldr	r1, [sp, #16]
   19ba8:	cmp	r1, #0
   19bac:	movw	r1, #0
   19bb0:	moveq	r1, #1
   19bb4:	and	r1, r1, #1
   19bb8:	cmp	r0, r1
   19bbc:	bne	19bc4 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   19bc0:	b	19be4 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   19bc4:	ldr	r0, [pc, #300]	; 19cf8 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   19bc8:	add	r0, pc, r0
   19bcc:	ldr	r1, [pc, #296]	; 19cfc <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   19bd0:	add	r1, pc, r1
   19bd4:	ldr	r2, [pc, #292]	; 19d00 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   19bd8:	add	r3, pc, r2
   19bdc:	movw	r2, #1537	; 0x601
   19be0:	bl	12450 <__assert_fail@plt>
   19be4:	mvn	r0, #0
   19be8:	str	r0, [fp, #-4]
   19bec:	b	19ce0 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   19bf0:	ldr	r0, [sp, #12]
   19bf4:	cmp	r0, #0
   19bf8:	beq	19cd8 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   19bfc:	ldr	r0, [sp, #8]
   19c00:	ldr	r1, [sp, #4]
   19c04:	sub	r1, r1, #1
   19c08:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   19c0c:	str	r0, [sp]
   19c10:	ldr	r0, [sp]
   19c14:	movw	r1, #0
   19c18:	cmp	r0, r1
   19c1c:	bne	19c60 <flatcc_builder_table_add_union_vector@@Base+0x154>
   19c20:	ldr	r0, [sp]
   19c24:	movw	r1, #0
   19c28:	cmp	r0, r1
   19c2c:	beq	19c34 <flatcc_builder_table_add_union_vector@@Base+0x128>
   19c30:	b	19c54 <flatcc_builder_table_add_union_vector@@Base+0x148>
   19c34:	ldr	r0, [pc, #200]	; 19d04 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   19c38:	add	r0, pc, r0
   19c3c:	ldr	r1, [pc, #196]	; 19d08 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   19c40:	add	r1, pc, r1
   19c44:	ldr	r2, [pc, #192]	; 19d0c <flatcc_builder_table_add_union_vector@@Base+0x200>
   19c48:	add	r3, pc, r2
   19c4c:	movw	r2, #1540	; 0x604
   19c50:	bl	12450 <__assert_fail@plt>
   19c54:	mvn	r0, #0
   19c58:	str	r0, [fp, #-4]
   19c5c:	b	19ce0 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   19c60:	ldr	r0, [sp, #12]
   19c64:	ldr	r1, [sp]
   19c68:	str	r0, [r1]
   19c6c:	ldr	r0, [sp, #8]
   19c70:	ldr	r1, [sp, #4]
   19c74:	bl	19860 <flatcc_builder_table_add_offset@@Base>
   19c78:	str	r0, [sp]
   19c7c:	ldr	r0, [sp]
   19c80:	movw	r1, #0
   19c84:	cmp	r0, r1
   19c88:	bne	19ccc <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   19c8c:	ldr	r0, [sp]
   19c90:	movw	r1, #0
   19c94:	cmp	r0, r1
   19c98:	beq	19ca0 <flatcc_builder_table_add_union_vector@@Base+0x194>
   19c9c:	b	19cc0 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   19ca0:	ldr	r0, [pc, #104]	; 19d10 <flatcc_builder_table_add_union_vector@@Base+0x204>
   19ca4:	add	r0, pc, r0
   19ca8:	ldr	r1, [pc, #100]	; 19d14 <flatcc_builder_table_add_union_vector@@Base+0x208>
   19cac:	add	r1, pc, r1
   19cb0:	ldr	r2, [pc, #96]	; 19d18 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   19cb4:	add	r3, pc, r2
   19cb8:	movw	r2, #1544	; 0x608
   19cbc:	bl	12450 <__assert_fail@plt>
   19cc0:	mvn	r0, #0
   19cc4:	str	r0, [fp, #-4]
   19cc8:	b	19ce0 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   19ccc:	ldr	r0, [sp, #16]
   19cd0:	ldr	r1, [sp]
   19cd4:	str	r0, [r1]
   19cd8:	movw	r0, #0
   19cdc:	str	r0, [fp, #-4]
   19ce0:	ldr	r0, [fp, #-4]
   19ce4:	mov	sp, fp
   19ce8:	pop	{fp, pc}
   19cec:	andeq	r3, r0, r0, ror r8
   19cf0:	andeq	r3, r0, ip, lsr r0
   19cf4:	andeq	r3, r0, r2, ror #23
   19cf8:	ldrdeq	r3, [r0], -r1
   19cfc:			; <UNDEFINED> instruction: 0x00002fb8
   19d00:	andeq	r3, r0, lr, asr fp
   19d04:	andeq	r3, r0, r8, ror #21
   19d08:	andeq	r2, r0, r8, asr #30
   19d0c:	andeq	r3, r0, lr, ror #21
   19d10:	andeq	r3, r0, ip, ror sl
   19d14:	ldrdeq	r2, [r0], -ip
   19d18:	andeq	r3, r0, r2, lsl #21

00019d1c <flatcc_builder_create_union_vector@@Base>:
   19d1c:	push	{fp, lr}
   19d20:	mov	fp, sp
   19d24:	sub	sp, sp, #48	; 0x30
   19d28:	str	r1, [fp, #-4]
   19d2c:	str	r2, [fp, #-8]
   19d30:	str	r3, [fp, #-12]
   19d34:	mov	r1, r0
   19d38:	str	r0, [sp, #12]
   19d3c:	mov	r0, r1
   19d40:	movw	r1, #0
   19d44:	and	r1, r1, #255	; 0xff
   19d48:	movw	r2, #8
   19d4c:	bl	12420 <memset@plt>
   19d50:	ldr	r0, [fp, #-4]
   19d54:	bl	17d44 <flatcc_builder_start_offset_vector@@Base>
   19d58:	cmp	r0, #0
   19d5c:	beq	19d64 <flatcc_builder_create_union_vector@@Base+0x48>
   19d60:	b	19e48 <flatcc_builder_create_union_vector@@Base+0x12c>
   19d64:	ldr	r0, [fp, #-4]
   19d68:	ldr	r1, [fp, #-12]
   19d6c:	bl	174d8 <flatcc_builder_extend_offset_vector@@Base>
   19d70:	movw	r1, #0
   19d74:	cmp	r1, r0
   19d78:	bne	19d80 <flatcc_builder_create_union_vector@@Base+0x64>
   19d7c:	b	19e48 <flatcc_builder_create_union_vector@@Base+0x12c>
   19d80:	ldr	r0, [fp, #-4]
   19d84:	ldr	r1, [fp, #-12]
   19d88:	mov	r2, r1
   19d8c:	str	r2, [sp, #8]
   19d90:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   19d94:	str	r0, [fp, #-16]
   19d98:	movw	r1, #0
   19d9c:	cmp	r1, r0
   19da0:	bne	19da8 <flatcc_builder_create_union_vector@@Base+0x8c>
   19da4:	b	19e48 <flatcc_builder_create_union_vector@@Base+0x12c>
   19da8:	ldr	r0, [fp, #-4]
   19dac:	bl	1963c <flatcc_builder_offset_vector_edit@@Base>
   19db0:	str	r0, [fp, #-20]	; 0xffffffec
   19db4:	movw	r0, #0
   19db8:	str	r0, [sp, #24]
   19dbc:	ldr	r0, [sp, #24]
   19dc0:	ldr	r1, [fp, #-12]
   19dc4:	cmp	r0, r1
   19dc8:	bcs	19e0c <flatcc_builder_create_union_vector@@Base+0xf0>
   19dcc:	ldr	r0, [fp, #-8]
   19dd0:	ldr	r1, [sp, #24]
   19dd4:	ldrb	r0, [r0, r1, lsl #3]
   19dd8:	ldr	r2, [fp, #-16]
   19ddc:	strb	r0, [r2, r1]
   19de0:	ldr	r0, [fp, #-8]
   19de4:	ldr	r1, [sp, #24]
   19de8:	add	r0, r0, r1, lsl #3
   19dec:	ldr	r0, [r0, #4]
   19df0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19df4:	add	r1, r2, r1, lsl #2
   19df8:	str	r0, [r1]
   19dfc:	ldr	r0, [sp, #24]
   19e00:	add	r0, r0, #1
   19e04:	str	r0, [sp, #24]
   19e08:	b	19dbc <flatcc_builder_create_union_vector@@Base+0xa0>
   19e0c:	ldr	r1, [fp, #-4]
   19e10:	ldr	r2, [fp, #-16]
   19e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e18:	ldr	r0, [fp, #-12]
   19e1c:	mov	ip, sp
   19e20:	str	r0, [ip]
   19e24:	add	r0, sp, #16
   19e28:	bl	19e50 <flatcc_builder_create_union_vector_direct@@Base>
   19e2c:	ldr	r0, [sp, #16]
   19e30:	ldr	r1, [sp, #12]
   19e34:	str	r0, [r1]
   19e38:	ldr	r0, [sp, #20]
   19e3c:	str	r0, [r1, #4]
   19e40:	ldr	r0, [fp, #-4]
   19e44:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   19e48:	mov	sp, fp
   19e4c:	pop	{fp, pc}

00019e50 <flatcc_builder_create_union_vector_direct@@Base>:
   19e50:	push	{fp, lr}
   19e54:	mov	fp, sp
   19e58:	sub	sp, sp, #32
   19e5c:	ldr	ip, [fp, #8]
   19e60:	str	r1, [fp, #-4]
   19e64:	str	r2, [fp, #-8]
   19e68:	str	r3, [fp, #-12]
   19e6c:	mov	r1, r0
   19e70:	str	r0, [sp, #16]
   19e74:	mov	r0, r1
   19e78:	movw	r1, #0
   19e7c:	and	r1, r1, #255	; 0xff
   19e80:	movw	r2, #8
   19e84:	str	ip, [sp, #12]
   19e88:	bl	12420 <memset@plt>
   19e8c:	ldr	r0, [fp, #-4]
   19e90:	ldr	r1, [fp, #-12]
   19e94:	ldr	r2, [fp, #8]
   19e98:	ldr	r3, [fp, #-8]
   19e9c:	bl	19294 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   19ea0:	ldr	r1, [sp, #16]
   19ea4:	str	r0, [r1, #4]
   19ea8:	movw	r2, #0
   19eac:	cmp	r2, r0
   19eb0:	bne	19eb8 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   19eb4:	b	19efc <flatcc_builder_create_union_vector_direct@@Base+0xac>
   19eb8:	ldr	r0, [fp, #-4]
   19ebc:	ldr	r1, [fp, #-8]
   19ec0:	ldr	r2, [fp, #8]
   19ec4:	movw	r3, #1
   19ec8:	movw	ip, #1
   19ecc:	uxth	ip, ip
   19ed0:	str	ip, [sp]
   19ed4:	mvn	ip, #0
   19ed8:	str	ip, [sp, #4]
   19edc:	bl	18f84 <flatcc_builder_create_vector@@Base>
   19ee0:	ldr	r1, [sp, #16]
   19ee4:	str	r0, [r1]
   19ee8:	movw	r2, #0
   19eec:	cmp	r2, r0
   19ef0:	bne	19ef8 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   19ef4:	b	19efc <flatcc_builder_create_union_vector_direct@@Base+0xac>
   19ef8:	b	19efc <flatcc_builder_create_union_vector_direct@@Base+0xac>
   19efc:	mov	sp, fp
   19f00:	pop	{fp, pc}

00019f04 <flatcc_builder_start_union_vector@@Base>:
   19f04:	push	{fp, lr}
   19f08:	mov	fp, sp
   19f0c:	sub	sp, sp, #8
   19f10:	str	r0, [sp]
   19f14:	ldr	r0, [sp]
   19f18:	movw	r1, #4
   19f1c:	uxth	r1, r1
   19f20:	bl	16b1c <flatcc_builder_start_buffer@@Base+0x178>
   19f24:	cmp	r0, #0
   19f28:	beq	19f38 <flatcc_builder_start_union_vector@@Base+0x34>
   19f2c:	mvn	r0, #0
   19f30:	str	r0, [sp, #4]
   19f34:	b	19f7c <flatcc_builder_start_union_vector@@Base+0x78>
   19f38:	ldr	r0, [sp]
   19f3c:	ldr	r0, [r0, #32]
   19f40:	movw	r1, #8
   19f44:	str	r1, [r0, #16]
   19f48:	ldr	r0, [sp]
   19f4c:	ldr	r0, [r0, #32]
   19f50:	movw	r1, #0
   19f54:	str	r1, [r0, #20]
   19f58:	ldr	r0, [sp]
   19f5c:	ldr	r0, [r0, #32]
   19f60:	movw	r1, #7
   19f64:	strh	r1, [r0, #14]
   19f68:	ldr	r0, [sp]
   19f6c:	mvn	r1, #3
   19f70:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   19f74:	movw	r0, #0
   19f78:	str	r0, [sp, #4]
   19f7c:	ldr	r0, [sp, #4]
   19f80:	mov	sp, fp
   19f84:	pop	{fp, pc}

00019f88 <flatcc_builder_end_union_vector@@Base>:
   19f88:	push	{fp, lr}
   19f8c:	mov	fp, sp
   19f90:	sub	sp, sp, #40	; 0x28
   19f94:	str	r1, [fp, #-4]
   19f98:	mov	r1, r0
   19f9c:	str	r0, [sp, #4]
   19fa0:	mov	r0, r1
   19fa4:	movw	r1, #0
   19fa8:	and	r1, r1, #255	; 0xff
   19fac:	movw	r2, #8
   19fb0:	bl	12420 <memset@plt>
   19fb4:	ldr	r0, [fp, #-4]
   19fb8:	ldr	r0, [r0, #32]
   19fbc:	ldrh	r0, [r0, #14]
   19fc0:	cmp	r0, #7
   19fc4:	bne	19fcc <flatcc_builder_end_union_vector@@Base+0x44>
   19fc8:	b	19fec <flatcc_builder_end_union_vector@@Base+0x64>
   19fcc:	ldr	r0, [pc, #260]	; 1a0d8 <flatcc_builder_end_union_vector@@Base+0x150>
   19fd0:	add	r0, pc, r0
   19fd4:	ldr	r1, [pc, #256]	; 1a0dc <flatcc_builder_end_union_vector@@Base+0x154>
   19fd8:	add	r1, pc, r1
   19fdc:	ldr	r2, [pc, #252]	; 1a0e0 <flatcc_builder_end_union_vector@@Base+0x158>
   19fe0:	add	r3, pc, r2
   19fe4:	movw	r2, #1617	; 0x651
   19fe8:	bl	12450 <__assert_fail@plt>
   19fec:	ldr	r0, [fp, #-4]
   19ff0:	bl	1a0e4 <flatcc_builder_union_vector_count@@Base>
   19ff4:	str	r0, [sp, #16]
   19ff8:	ldr	r0, [fp, #-4]
   19ffc:	ldr	lr, [sp, #16]
   1a000:	movw	r1, #5
   1a004:	mul	r1, lr, r1
   1a008:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   1a00c:	str	r0, [fp, #-16]
   1a010:	movw	r1, #0
   1a014:	cmp	r1, r0
   1a018:	bne	1a020 <flatcc_builder_end_union_vector@@Base+0x98>
   1a01c:	b	1a0d0 <flatcc_builder_end_union_vector@@Base+0x148>
   1a020:	ldr	r0, [fp, #-16]
   1a024:	ldr	r1, [sp, #16]
   1a028:	add	r0, r0, r1, lsl #2
   1a02c:	str	r0, [fp, #-8]
   1a030:	ldr	r0, [fp, #-4]
   1a034:	bl	1a100 <flatcc_builder_union_vector_edit@@Base>
   1a038:	str	r0, [fp, #-12]
   1a03c:	movw	r0, #0
   1a040:	str	r0, [sp, #20]
   1a044:	ldr	r0, [sp, #20]
   1a048:	ldr	r1, [sp, #16]
   1a04c:	cmp	r0, r1
   1a050:	bcs	1a094 <flatcc_builder_end_union_vector@@Base+0x10c>
   1a054:	ldr	r0, [fp, #-12]
   1a058:	ldr	r1, [sp, #20]
   1a05c:	ldrb	r0, [r0, r1, lsl #3]
   1a060:	ldr	r2, [fp, #-8]
   1a064:	strb	r0, [r2, r1]
   1a068:	ldr	r0, [fp, #-12]
   1a06c:	ldr	r1, [sp, #20]
   1a070:	add	r0, r0, r1, lsl #3
   1a074:	ldr	r0, [r0, #4]
   1a078:	ldr	r2, [fp, #-16]
   1a07c:	add	r1, r2, r1, lsl #2
   1a080:	str	r0, [r1]
   1a084:	ldr	r0, [sp, #20]
   1a088:	add	r0, r0, #1
   1a08c:	str	r0, [sp, #20]
   1a090:	b	1a044 <flatcc_builder_end_union_vector@@Base+0xbc>
   1a094:	ldr	r1, [fp, #-4]
   1a098:	ldr	r2, [fp, #-8]
   1a09c:	ldr	r3, [fp, #-16]
   1a0a0:	ldr	r0, [sp, #16]
   1a0a4:	mov	ip, sp
   1a0a8:	str	r0, [ip]
   1a0ac:	add	r0, sp, #8
   1a0b0:	bl	19e50 <flatcc_builder_create_union_vector_direct@@Base>
   1a0b4:	ldr	r0, [sp, #8]
   1a0b8:	ldr	r1, [sp, #4]
   1a0bc:	str	r0, [r1]
   1a0c0:	ldr	r0, [sp, #12]
   1a0c4:	str	r0, [r1, #4]
   1a0c8:	ldr	r0, [fp, #-4]
   1a0cc:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   1a0d0:	mov	sp, fp
   1a0d4:	pop	{fp, pc}
   1a0d8:	strdeq	r3, [r0], -r1
   1a0dc:			; <UNDEFINED> instruction: 0x00002bb0
   1a0e0:	andeq	r3, r0, r3, lsl r8

0001a0e4 <flatcc_builder_union_vector_count@@Base>:
   1a0e4:	sub	sp, sp, #4
   1a0e8:	str	r0, [sp]
   1a0ec:	ldr	r0, [sp]
   1a0f0:	ldr	r0, [r0, #32]
   1a0f4:	ldr	r0, [r0, #20]
   1a0f8:	add	sp, sp, #4
   1a0fc:	bx	lr

0001a100 <flatcc_builder_union_vector_edit@@Base>:
   1a100:	sub	sp, sp, #4
   1a104:	str	r0, [sp]
   1a108:	ldr	r0, [sp]
   1a10c:	ldr	r0, [r0, #16]
   1a110:	add	sp, sp, #4
   1a114:	bx	lr

0001a118 <flatcc_builder_extend_union_vector@@Base>:
   1a118:	push	{fp, lr}
   1a11c:	mov	fp, sp
   1a120:	sub	sp, sp, #16
   1a124:	ldr	r2, [pc, #68]	; 1a170 <flatcc_builder_extend_union_vector@@Base+0x58>
   1a128:	str	r0, [sp, #8]
   1a12c:	str	r1, [sp, #4]
   1a130:	ldr	r0, [sp, #8]
   1a134:	ldr	r1, [sp, #4]
   1a138:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   1a13c:	cmp	r0, #0
   1a140:	beq	1a150 <flatcc_builder_extend_union_vector@@Base+0x38>
   1a144:	movw	r0, #0
   1a148:	str	r0, [fp, #-4]
   1a14c:	b	1a164 <flatcc_builder_extend_union_vector@@Base+0x4c>
   1a150:	ldr	r0, [sp, #8]
   1a154:	ldr	r1, [sp, #4]
   1a158:	lsl	r1, r1, #3
   1a15c:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   1a160:	str	r0, [fp, #-4]
   1a164:	ldr	r0, [fp, #-4]
   1a168:	mov	sp, fp
   1a16c:	pop	{fp, pc}
   1a170:	svcne	0x00ffffff

0001a174 <flatcc_builder_truncate_union_vector@@Base>:
   1a174:	push	{fp, lr}
   1a178:	mov	fp, sp
   1a17c:	sub	sp, sp, #16
   1a180:	str	r0, [sp, #8]
   1a184:	str	r1, [sp, #4]
   1a188:	ldr	r0, [sp, #8]
   1a18c:	ldr	r0, [r0, #32]
   1a190:	ldrh	r0, [r0, #14]
   1a194:	cmp	r0, #7
   1a198:	bne	1a1a0 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   1a19c:	b	1a1c0 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   1a1a0:	ldr	r0, [pc, #192]	; 1a268 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   1a1a4:	add	r0, pc, r0
   1a1a8:	ldr	r1, [pc, #188]	; 1a26c <flatcc_builder_truncate_union_vector@@Base+0xf8>
   1a1ac:	add	r1, pc, r1
   1a1b0:	ldr	r2, [pc, #184]	; 1a270 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   1a1b4:	add	r3, pc, r2
   1a1b8:	movw	r2, #1665	; 0x681
   1a1bc:	bl	12450 <__assert_fail@plt>
   1a1c0:	ldr	r0, [sp, #8]
   1a1c4:	ldr	r0, [r0, #32]
   1a1c8:	ldr	r0, [r0, #20]
   1a1cc:	ldr	r1, [sp, #4]
   1a1d0:	cmp	r0, r1
   1a1d4:	bcs	1a220 <flatcc_builder_truncate_union_vector@@Base+0xac>
   1a1d8:	ldr	r0, [sp, #8]
   1a1dc:	ldr	r0, [r0, #32]
   1a1e0:	ldr	r0, [r0, #20]
   1a1e4:	ldr	r1, [sp, #4]
   1a1e8:	cmp	r0, r1
   1a1ec:	bcc	1a1f4 <flatcc_builder_truncate_union_vector@@Base+0x80>
   1a1f0:	b	1a214 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1a1f4:	ldr	r0, [pc, #120]	; 1a274 <flatcc_builder_truncate_union_vector@@Base+0x100>
   1a1f8:	add	r0, pc, r0
   1a1fc:	ldr	r1, [pc, #116]	; 1a278 <flatcc_builder_truncate_union_vector@@Base+0x104>
   1a200:	add	r1, pc, r1
   1a204:	ldr	r2, [pc, #112]	; 1a27c <flatcc_builder_truncate_union_vector@@Base+0x108>
   1a208:	add	r3, pc, r2
   1a20c:	movw	r2, #1666	; 0x682
   1a210:	bl	12450 <__assert_fail@plt>
   1a214:	mvn	r0, #0
   1a218:	str	r0, [fp, #-4]
   1a21c:	b	1a25c <flatcc_builder_truncate_union_vector@@Base+0xe8>
   1a220:	ldr	r0, [sp, #4]
   1a224:	ldr	r1, [sp, #8]
   1a228:	ldr	r1, [r1, #32]
   1a22c:	ldr	r2, [r1, #20]
   1a230:	sub	r0, r2, r0
   1a234:	str	r0, [r1, #20]
   1a238:	ldr	r0, [sp, #8]
   1a23c:	ldr	r1, [sp, #8]
   1a240:	ldr	r1, [r1, #32]
   1a244:	ldr	r1, [r1, #16]
   1a248:	ldr	r2, [sp, #4]
   1a24c:	mul	r1, r1, r2
   1a250:	bl	17a08 <flatcc_builder_truncate_vector@@Base+0x10c>
   1a254:	movw	r0, #0
   1a258:	str	r0, [fp, #-4]
   1a25c:	ldr	r0, [fp, #-4]
   1a260:	mov	sp, fp
   1a264:	pop	{fp, pc}
   1a268:	andeq	r3, r0, sp, lsl r6
   1a26c:	ldrdeq	r2, [r0], -ip
   1a270:	muleq	r0, r2, r6
   1a274:	andeq	r3, r0, sp, lsr #32
   1a278:	andeq	r2, r0, r8, lsl #19
   1a27c:	andeq	r3, r0, lr, lsr r6

0001a280 <flatcc_builder_union_vector_push@@Base>:
   1a280:	push	{fp, lr}
   1a284:	mov	fp, sp
   1a288:	sub	sp, sp, #24
   1a28c:	str	r1, [sp, #12]
   1a290:	str	r2, [sp, #16]
   1a294:	str	r0, [sp, #8]
   1a298:	ldr	r0, [sp, #8]
   1a29c:	ldr	r0, [r0, #32]
   1a2a0:	ldrh	r0, [r0, #14]
   1a2a4:	cmp	r0, #7
   1a2a8:	bne	1a2b0 <flatcc_builder_union_vector_push@@Base+0x30>
   1a2ac:	b	1a2d0 <flatcc_builder_union_vector_push@@Base+0x50>
   1a2b0:	ldr	r0, [pc, #160]	; 1a358 <flatcc_builder_union_vector_push@@Base+0xd8>
   1a2b4:	add	r0, pc, r0
   1a2b8:	ldr	r1, [pc, #156]	; 1a35c <flatcc_builder_union_vector_push@@Base+0xdc>
   1a2bc:	add	r1, pc, r1
   1a2c0:	ldr	r2, [pc, #152]	; 1a360 <flatcc_builder_union_vector_push@@Base+0xe0>
   1a2c4:	add	r3, pc, r2
   1a2c8:	movw	r2, #1677	; 0x68d
   1a2cc:	bl	12450 <__assert_fail@plt>
   1a2d0:	ldr	r0, [pc, #140]	; 1a364 <flatcc_builder_union_vector_push@@Base+0xe4>
   1a2d4:	ldr	r1, [sp, #8]
   1a2d8:	ldr	r1, [r1, #32]
   1a2dc:	ldr	r1, [r1, #20]
   1a2e0:	cmp	r1, r0
   1a2e4:	bne	1a2f4 <flatcc_builder_union_vector_push@@Base+0x74>
   1a2e8:	movw	r0, #0
   1a2ec:	str	r0, [fp, #-4]
   1a2f0:	b	1a34c <flatcc_builder_union_vector_push@@Base+0xcc>
   1a2f4:	ldr	r0, [sp, #8]
   1a2f8:	ldr	r0, [r0, #32]
   1a2fc:	ldr	r1, [r0, #20]
   1a300:	add	r1, r1, #1
   1a304:	str	r1, [r0, #20]
   1a308:	ldr	r0, [sp, #8]
   1a30c:	movw	r1, #8
   1a310:	bl	17010 <flatcc_builder_start_struct@@Base+0xfc>
   1a314:	str	r0, [sp, #4]
   1a318:	movw	r1, #0
   1a31c:	cmp	r1, r0
   1a320:	bne	1a330 <flatcc_builder_union_vector_push@@Base+0xb0>
   1a324:	movw	r0, #0
   1a328:	str	r0, [fp, #-4]
   1a32c:	b	1a34c <flatcc_builder_union_vector_push@@Base+0xcc>
   1a330:	ldr	r0, [sp, #4]
   1a334:	ldr	r1, [sp, #12]
   1a338:	str	r1, [r0]
   1a33c:	ldr	r1, [sp, #16]
   1a340:	str	r1, [r0, #4]
   1a344:	ldr	r0, [sp, #4]
   1a348:	str	r0, [fp, #-4]
   1a34c:	ldr	r0, [fp, #-4]
   1a350:	mov	sp, fp
   1a354:	pop	{fp, pc}
   1a358:	andeq	r3, r0, sp, lsl #10
   1a35c:	andeq	r2, r0, ip, asr #17
   1a360:	andeq	r3, r0, r7, asr #11
   1a364:	svcne	0x00ffffff

0001a368 <flatcc_builder_append_union_vector@@Base>:
   1a368:	push	{fp, lr}
   1a36c:	mov	fp, sp
   1a370:	sub	sp, sp, #16
   1a374:	str	r0, [sp, #8]
   1a378:	str	r1, [sp, #4]
   1a37c:	str	r2, [sp]
   1a380:	ldr	r0, [sp, #8]
   1a384:	ldr	r0, [r0, #32]
   1a388:	ldrh	r0, [r0, #14]
   1a38c:	cmp	r0, #7
   1a390:	bne	1a398 <flatcc_builder_append_union_vector@@Base+0x30>
   1a394:	b	1a3b8 <flatcc_builder_append_union_vector@@Base+0x50>
   1a398:	ldr	r0, [pc, #96]	; 1a400 <flatcc_builder_append_union_vector@@Base+0x98>
   1a39c:	add	r0, pc, r0
   1a3a0:	ldr	r1, [pc, #92]	; 1a404 <flatcc_builder_append_union_vector@@Base+0x9c>
   1a3a4:	add	r1, pc, r1
   1a3a8:	ldr	r2, [pc, #88]	; 1a408 <flatcc_builder_append_union_vector@@Base+0xa0>
   1a3ac:	add	r3, pc, r2
   1a3b0:	movw	r2, #1692	; 0x69c
   1a3b4:	bl	12450 <__assert_fail@plt>
   1a3b8:	ldr	r2, [pc, #76]	; 1a40c <flatcc_builder_append_union_vector@@Base+0xa4>
   1a3bc:	ldr	r0, [sp, #8]
   1a3c0:	ldr	r1, [sp]
   1a3c4:	bl	171d4 <flatcc_builder_extend_vector@@Base+0x6c>
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a3dc <flatcc_builder_append_union_vector@@Base+0x74>
   1a3d0:	movw	r0, #0
   1a3d4:	str	r0, [fp, #-4]
   1a3d8:	b	1a3f4 <flatcc_builder_append_union_vector@@Base+0x8c>
   1a3dc:	ldr	r0, [sp, #8]
   1a3e0:	ldr	r1, [sp, #4]
   1a3e4:	ldr	r2, [sp]
   1a3e8:	lsl	r2, r2, #3
   1a3ec:	bl	173bc <flatcc_builder_vector_push@@Base+0x110>
   1a3f0:	str	r0, [fp, #-4]
   1a3f4:	ldr	r0, [fp, #-4]
   1a3f8:	mov	sp, fp
   1a3fc:	pop	{fp, pc}
   1a400:	andeq	r3, r0, r5, lsr #8
   1a404:	andeq	r2, r0, r4, ror #15
   1a408:	andeq	r3, r0, ip, asr #10
   1a40c:	svcne	0x00ffffff

0001a410 <flatcc_builder_create_string@@Base>:
   1a410:	push	{fp, lr}
   1a414:	mov	fp, sp
   1a418:	sub	sp, sp, #96	; 0x60
   1a41c:	str	r0, [fp, #-8]
   1a420:	str	r1, [fp, #-12]
   1a424:	str	r2, [fp, #-16]
   1a428:	ldr	r0, [fp, #-16]
   1a42c:	cmn	r0, #1
   1a430:	bls	1a440 <flatcc_builder_create_string@@Base+0x30>
   1a434:	movw	r0, #0
   1a438:	str	r0, [fp, #-4]
   1a43c:	b	1a55c <flatcc_builder_create_string@@Base+0x14c>
   1a440:	ldr	r0, [fp, #-16]
   1a444:	bl	16344 <flatcc_builder_embed_buffer@@Base+0x388>
   1a448:	str	r0, [fp, #-24]	; 0xffffffe8
   1a44c:	ldr	r0, [fp, #-8]
   1a450:	ldr	lr, [fp, #-16]
   1a454:	add	r1, lr, #1
   1a458:	mov	r2, #4
   1a45c:	bl	16310 <flatcc_builder_embed_buffer@@Base+0x354>
   1a460:	add	r0, r0, #1
   1a464:	str	r0, [fp, #-20]	; 0xffffffec
   1a468:	mov	r0, #0
   1a46c:	str	r0, [sp]
   1a470:	str	r0, [sp, #4]
   1a474:	ldr	r0, [sp]
   1a478:	add	r0, r0, #4
   1a47c:	str	r0, [sp]
   1a480:	mov	r0, sp
   1a484:	add	r0, r0, #8
   1a488:	ldr	r1, [sp, #4]
   1a48c:	sub	r2, fp, #24
   1a490:	str	r2, [r0, r1, lsl #3]
   1a494:	ldr	r1, [sp, #4]
   1a498:	add	r0, r0, r1, lsl #3
   1a49c:	movw	r1, #4
   1a4a0:	str	r1, [r0, #4]
   1a4a4:	ldr	r0, [sp, #4]
   1a4a8:	add	r0, r0, #1
   1a4ac:	str	r0, [sp, #4]
   1a4b0:	ldr	r0, [fp, #-16]
   1a4b4:	cmp	r0, #0
   1a4b8:	bls	1a4fc <flatcc_builder_create_string@@Base+0xec>
   1a4bc:	ldr	r0, [fp, #-16]
   1a4c0:	ldr	r1, [sp]
   1a4c4:	add	r0, r1, r0
   1a4c8:	str	r0, [sp]
   1a4cc:	ldr	r0, [fp, #-12]
   1a4d0:	mov	r1, sp
   1a4d4:	add	r1, r1, #8
   1a4d8:	ldr	r2, [sp, #4]
   1a4dc:	str	r0, [r1, r2, lsl #3]
   1a4e0:	ldr	r0, [fp, #-16]
   1a4e4:	ldr	r2, [sp, #4]
   1a4e8:	add	r1, r1, r2, lsl #3
   1a4ec:	str	r0, [r1, #4]
   1a4f0:	ldr	r0, [sp, #4]
   1a4f4:	add	r0, r0, #1
   1a4f8:	str	r0, [sp, #4]
   1a4fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a500:	cmp	r0, #0
   1a504:	bls	1a54c <flatcc_builder_create_string@@Base+0x13c>
   1a508:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a50c:	ldr	r1, [sp]
   1a510:	add	r0, r1, r0
   1a514:	str	r0, [sp]
   1a518:	mov	r0, sp
   1a51c:	add	r0, r0, #8
   1a520:	ldr	r1, [sp, #4]
   1a524:	ldr	r2, [pc, #60]	; 1a568 <flatcc_builder_create_string@@Base+0x158>
   1a528:	ldr	r2, [pc, r2]
   1a52c:	str	r2, [r0, r1, lsl #3]
   1a530:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a534:	ldr	r2, [sp, #4]
   1a538:	add	r0, r0, r2, lsl #3
   1a53c:	str	r1, [r0, #4]
   1a540:	ldr	r0, [sp, #4]
   1a544:	add	r0, r0, #1
   1a548:	str	r0, [sp, #4]
   1a54c:	ldr	r0, [fp, #-8]
   1a550:	mov	r1, sp
   1a554:	bl	16358 <flatcc_builder_embed_buffer@@Base+0x39c>
   1a558:	str	r0, [fp, #-4]
   1a55c:	ldr	r0, [fp, #-4]
   1a560:	mov	sp, fp
   1a564:	pop	{fp, pc}
   1a568:	andeq	r3, r1, ip, lsl fp

0001a56c <flatcc_builder_create_string_str@@Base>:
   1a56c:	push	{fp, lr}
   1a570:	mov	fp, sp
   1a574:	sub	sp, sp, #24
   1a578:	str	r0, [fp, #-4]
   1a57c:	str	r1, [fp, #-8]
   1a580:	ldr	r0, [fp, #-4]
   1a584:	ldr	r1, [fp, #-8]
   1a588:	ldr	r2, [fp, #-8]
   1a58c:	str	r0, [sp, #12]
   1a590:	mov	r0, r2
   1a594:	str	r1, [sp, #8]
   1a598:	bl	12408 <strlen@plt>
   1a59c:	ldr	r1, [sp, #12]
   1a5a0:	str	r0, [sp, #4]
   1a5a4:	mov	r0, r1
   1a5a8:	ldr	r1, [sp, #8]
   1a5ac:	ldr	r2, [sp, #4]
   1a5b0:	bl	1a410 <flatcc_builder_create_string@@Base>
   1a5b4:	mov	sp, fp
   1a5b8:	pop	{fp, pc}

0001a5bc <flatcc_builder_create_string_strn@@Base>:
   1a5bc:	push	{fp, lr}
   1a5c0:	mov	fp, sp
   1a5c4:	sub	sp, sp, #24
   1a5c8:	str	r0, [fp, #-4]
   1a5cc:	str	r1, [fp, #-8]
   1a5d0:	str	r2, [sp, #12]
   1a5d4:	ldr	r0, [fp, #-4]
   1a5d8:	ldr	r1, [fp, #-8]
   1a5dc:	ldr	r2, [fp, #-8]
   1a5e0:	ldr	r3, [sp, #12]
   1a5e4:	str	r0, [sp, #8]
   1a5e8:	mov	r0, r2
   1a5ec:	str	r1, [sp, #4]
   1a5f0:	mov	r1, r3
   1a5f4:	bl	1789c <flatcc_builder_append_string_strn@@Base+0x5c>
   1a5f8:	ldr	r1, [sp, #8]
   1a5fc:	str	r0, [sp]
   1a600:	mov	r0, r1
   1a604:	ldr	r1, [sp, #4]
   1a608:	ldr	r2, [sp]
   1a60c:	bl	1a410 <flatcc_builder_create_string@@Base>
   1a610:	mov	sp, fp
   1a614:	pop	{fp, pc}

0001a618 <flatcc_builder_end_string@@Base>:
   1a618:	push	{fp, lr}
   1a61c:	mov	fp, sp
   1a620:	sub	sp, sp, #16
   1a624:	str	r0, [sp, #8]
   1a628:	ldr	r0, [sp, #8]
   1a62c:	ldr	r0, [r0, #32]
   1a630:	ldrh	r0, [r0, #14]
   1a634:	cmp	r0, #6
   1a638:	bne	1a640 <flatcc_builder_end_string@@Base+0x28>
   1a63c:	b	1a660 <flatcc_builder_end_string@@Base+0x48>
   1a640:	ldr	r0, [pc, #168]	; 1a6f0 <flatcc_builder_end_string@@Base+0xd8>
   1a644:	add	r0, pc, r0
   1a648:	ldr	r1, [pc, #164]	; 1a6f4 <flatcc_builder_end_string@@Base+0xdc>
   1a64c:	add	r1, pc, r1
   1a650:	ldr	r2, [pc, #160]	; 1a6f8 <flatcc_builder_end_string@@Base+0xe0>
   1a654:	add	r3, pc, r2
   1a658:	movw	r2, #1732	; 0x6c4
   1a65c:	bl	12450 <__assert_fail@plt>
   1a660:	ldr	r0, [sp, #8]
   1a664:	ldr	r0, [r0, #32]
   1a668:	ldr	r0, [r0, #20]
   1a66c:	ldr	r1, [sp, #8]
   1a670:	ldr	r1, [r1, #20]
   1a674:	cmp	r0, r1
   1a678:	bne	1a680 <flatcc_builder_end_string@@Base+0x68>
   1a67c:	b	1a6a0 <flatcc_builder_end_string@@Base+0x88>
   1a680:	ldr	r0, [pc, #116]	; 1a6fc <flatcc_builder_end_string@@Base+0xe4>
   1a684:	add	r0, pc, r0
   1a688:	ldr	r1, [pc, #112]	; 1a700 <flatcc_builder_end_string@@Base+0xe8>
   1a68c:	add	r1, pc, r1
   1a690:	ldr	r2, [pc, #108]	; 1a704 <flatcc_builder_end_string@@Base+0xec>
   1a694:	add	r3, pc, r2
   1a698:	movw	r2, #1733	; 0x6c5
   1a69c:	bl	12450 <__assert_fail@plt>
   1a6a0:	ldr	r0, [sp, #8]
   1a6a4:	ldr	r1, [sp, #8]
   1a6a8:	ldr	r1, [r1, #16]
   1a6ac:	ldr	r2, [sp, #8]
   1a6b0:	ldr	r2, [r2, #20]
   1a6b4:	bl	1a410 <flatcc_builder_create_string@@Base>
   1a6b8:	str	r0, [sp, #4]
   1a6bc:	movw	r1, #0
   1a6c0:	cmp	r1, r0
   1a6c4:	bne	1a6d4 <flatcc_builder_end_string@@Base+0xbc>
   1a6c8:	movw	r0, #0
   1a6cc:	str	r0, [fp, #-4]
   1a6d0:	b	1a6e4 <flatcc_builder_end_string@@Base+0xcc>
   1a6d4:	ldr	r0, [sp, #8]
   1a6d8:	bl	16e58 <flatcc_builder_end_buffer@@Base+0x170>
   1a6dc:	ldr	r0, [sp, #4]
   1a6e0:	str	r0, [fp, #-4]
   1a6e4:	ldr	r0, [fp, #-4]
   1a6e8:	mov	sp, fp
   1a6ec:	pop	{fp, pc}
   1a6f0:	andeq	r2, r0, r0, lsl #21
   1a6f4:	andeq	r2, r0, ip, lsr r5
   1a6f8:	andeq	r3, r0, r3, lsr #6
   1a6fc:	andeq	r3, r0, r6, lsr r3
   1a700:	strdeq	r2, [r0], -ip
   1a704:	andeq	r3, r0, r3, ror #5

0001a708 <flatcc_builder_string_edit@@Base>:
   1a708:	sub	sp, sp, #4
   1a70c:	str	r0, [sp]
   1a710:	ldr	r0, [sp]
   1a714:	ldr	r0, [r0, #16]
   1a718:	add	sp, sp, #4
   1a71c:	bx	lr

0001a720 <flatcc_builder_string_len@@Base>:
   1a720:	sub	sp, sp, #4
   1a724:	str	r0, [sp]
   1a728:	ldr	r0, [sp]
   1a72c:	ldr	r0, [r0, #32]
   1a730:	ldr	r0, [r0, #20]
   1a734:	add	sp, sp, #4
   1a738:	bx	lr
   1a73c:	push	{fp, lr}
   1a740:	mov	fp, sp
   1a744:	sub	sp, sp, #24
   1a748:	str	r0, [fp, #-8]
   1a74c:	str	r1, [sp, #12]
   1a750:	strh	r2, [sp, #10]
   1a754:	strh	r3, [sp, #8]
   1a758:	ldr	r0, [fp, #-8]
   1a75c:	ldr	r0, [r0, #20]
   1a760:	ldrh	r1, [sp, #10]
   1a764:	add	r0, r0, r1
   1a768:	sub	r0, r0, #1
   1a76c:	ldrh	r1, [sp, #10]
   1a770:	sub	r1, r1, #1
   1a774:	mvn	r2, #0
   1a778:	eor	r1, r1, r2
   1a77c:	and	r0, r0, r1
   1a780:	str	r0, [sp, #4]
   1a784:	ldr	r0, [sp, #4]
   1a788:	ldr	r1, [sp, #12]
   1a78c:	add	r0, r0, r1
   1a790:	ldr	r1, [fp, #-8]
   1a794:	str	r0, [r1, #20]
   1a798:	ldr	r1, [fp, #-8]
   1a79c:	ldr	r1, [r1, #24]
   1a7a0:	cmp	r0, r1
   1a7a4:	bcc	1a7d8 <flatcc_builder_string_len@@Base+0xb8>
   1a7a8:	ldr	r0, [fp, #-8]
   1a7ac:	ldr	r1, [fp, #-8]
   1a7b0:	ldr	r1, [r1, #20]
   1a7b4:	add	r1, r1, #1
   1a7b8:	movw	r2, #65532	; 0xfffc
   1a7bc:	bl	1b180 <flatcc_builder_get_emit_context@@Base+0x40>
   1a7c0:	cmp	r0, #0
   1a7c4:	beq	1a7d4 <flatcc_builder_string_len@@Base+0xb4>
   1a7c8:	movw	r0, #0
   1a7cc:	str	r0, [fp, #-4]
   1a7d0:	b	1a82c <flatcc_builder_string_len@@Base+0x10c>
   1a7d4:	b	1a7d8 <flatcc_builder_string_len@@Base+0xb8>
   1a7d8:	ldr	r0, [sp, #4]
   1a7dc:	add	r0, r0, #4
   1a7e0:	ldr	r1, [fp, #-8]
   1a7e4:	ldr	r1, [r1, #4]
   1a7e8:	ldrh	r2, [sp, #8]
   1a7ec:	add	r1, r1, r2, lsl #1
   1a7f0:	strh	r0, [r1]
   1a7f4:	ldrh	r0, [sp, #8]
   1a7f8:	ldr	r1, [fp, #-8]
   1a7fc:	ldrh	r1, [r1, #8]
   1a800:	cmp	r0, r1
   1a804:	blt	1a818 <flatcc_builder_string_len@@Base+0xf8>
   1a808:	ldrh	r0, [sp, #8]
   1a80c:	add	r0, r0, #1
   1a810:	ldr	r1, [fp, #-8]
   1a814:	strh	r0, [r1, #8]
   1a818:	ldr	r0, [fp, #-8]
   1a81c:	ldr	r0, [r0, #16]
   1a820:	ldr	r1, [sp, #4]
   1a824:	add	r0, r0, r1
   1a828:	str	r0, [fp, #-4]
   1a82c:	ldr	r0, [fp, #-4]
   1a830:	mov	sp, fp
   1a834:	pop	{fp, pc}

0001a838 <flatcc_builder_table_edit@@Base>:
   1a838:	push	{fp, lr}
   1a83c:	mov	fp, sp
   1a840:	sub	sp, sp, #8
   1a844:	str	r0, [sp, #4]
   1a848:	str	r1, [sp]
   1a84c:	ldr	r0, [sp, #4]
   1a850:	ldr	r0, [r0, #32]
   1a854:	ldrh	r0, [r0, #14]
   1a858:	cmp	r0, #3
   1a85c:	bne	1a864 <flatcc_builder_table_edit@@Base+0x2c>
   1a860:	b	1a884 <flatcc_builder_table_edit@@Base+0x4c>
   1a864:	ldr	r0, [pc, #68]	; 1a8b0 <flatcc_builder_table_edit@@Base+0x78>
   1a868:	add	r0, pc, r0
   1a86c:	ldr	r1, [pc, #64]	; 1a8b4 <flatcc_builder_table_edit@@Base+0x7c>
   1a870:	add	r1, pc, r1
   1a874:	ldr	r2, [pc, #60]	; 1a8b8 <flatcc_builder_table_edit@@Base+0x80>
   1a878:	add	r3, pc, r2
   1a87c:	movw	r2, #1794	; 0x702
   1a880:	bl	12450 <__assert_fail@plt>
   1a884:	ldr	r0, [sp, #4]
   1a888:	ldr	r0, [r0, #16]
   1a88c:	ldr	r1, [sp, #4]
   1a890:	ldr	r1, [r1, #20]
   1a894:	add	r0, r0, r1
   1a898:	ldr	r1, [sp]
   1a89c:	movw	r2, #0
   1a8a0:	sub	r1, r2, r1
   1a8a4:	add	r0, r0, r1
   1a8a8:	mov	sp, fp
   1a8ac:	pop	{fp, pc}
   1a8b0:	andeq	r2, r0, ip, asr #22
   1a8b4:	andeq	r2, r0, r8, lsl r3
   1a8b8:	strdeq	r3, [r0], -r4

0001a8bc <flatcc_builder_table_add_copy@@Base>:
   1a8bc:	push	{fp, lr}
   1a8c0:	mov	fp, sp
   1a8c4:	sub	sp, sp, #24
   1a8c8:	ldr	ip, [fp, #8]
   1a8cc:	str	r0, [fp, #-4]
   1a8d0:	str	r1, [fp, #-8]
   1a8d4:	str	r2, [sp, #12]
   1a8d8:	str	r3, [sp, #8]
   1a8dc:	strh	ip, [sp, #6]
   1a8e0:	ldr	r0, [fp, #-4]
   1a8e4:	ldr	r1, [fp, #-8]
   1a8e8:	ldr	r2, [sp, #8]
   1a8ec:	ldrh	r3, [sp, #6]
   1a8f0:	bl	19990 <flatcc_builder_table_add@@Base>
   1a8f4:	str	r0, [sp]
   1a8f8:	movw	r1, #0
   1a8fc:	cmp	r0, r1
   1a900:	beq	1a914 <flatcc_builder_table_add_copy@@Base+0x58>
   1a904:	ldr	r0, [sp]
   1a908:	ldr	r1, [sp, #12]
   1a90c:	ldr	r2, [sp, #8]
   1a910:	bl	123c0 <memcpy@plt>
   1a914:	ldr	r0, [sp]
   1a918:	mov	sp, fp
   1a91c:	pop	{fp, pc}
   1a920:	push	{fp, lr}
   1a924:	mov	fp, sp
   1a928:	sub	sp, sp, #16
   1a92c:	str	r0, [sp, #8]
   1a930:	strh	r1, [sp, #6]
   1a934:	ldr	r0, [sp, #8]
   1a938:	ldr	r0, [r0, #20]
   1a93c:	add	r0, r0, #4
   1a940:	sub	r0, r0, #1
   1a944:	mvn	r1, #3
   1a948:	and	r0, r0, r1
   1a94c:	str	r0, [sp]
   1a950:	ldr	r0, [sp]
   1a954:	add	r0, r0, #4
   1a958:	ldr	r1, [sp, #8]
   1a95c:	str	r0, [r1, #20]
   1a960:	ldr	r1, [sp, #8]
   1a964:	ldr	r1, [r1, #24]
   1a968:	cmp	r0, r1
   1a96c:	bls	1a99c <flatcc_builder_table_add_copy@@Base+0xe0>
   1a970:	ldr	r0, [sp, #8]
   1a974:	ldr	r1, [sp, #8]
   1a978:	ldr	r1, [r1, #20]
   1a97c:	movw	r2, #65532	; 0xfffc
   1a980:	bl	1b180 <flatcc_builder_get_emit_context@@Base+0x40>
   1a984:	cmp	r0, #0
   1a988:	beq	1a998 <flatcc_builder_table_add_copy@@Base+0xdc>
   1a98c:	movw	r0, #0
   1a990:	str	r0, [fp, #-4]
   1a994:	b	1aa08 <flatcc_builder_table_add_copy@@Base+0x14c>
   1a998:	b	1a99c <flatcc_builder_table_add_copy@@Base+0xe0>
   1a99c:	ldr	r0, [sp]
   1a9a0:	add	r0, r0, #4
   1a9a4:	ldr	r1, [sp, #8]
   1a9a8:	ldr	r1, [r1, #4]
   1a9ac:	ldrh	r2, [sp, #6]
   1a9b0:	add	r1, r1, r2, lsl #1
   1a9b4:	strh	r0, [r1]
   1a9b8:	ldrh	r0, [sp, #6]
   1a9bc:	ldr	r1, [sp, #8]
   1a9c0:	ldrh	r1, [r1, #8]
   1a9c4:	cmp	r0, r1
   1a9c8:	blt	1a9dc <flatcc_builder_table_add_copy@@Base+0x120>
   1a9cc:	ldrh	r0, [sp, #6]
   1a9d0:	add	r0, r0, #1
   1a9d4:	ldr	r1, [sp, #8]
   1a9d8:	strh	r0, [r1, #8]
   1a9dc:	ldr	r0, [sp]
   1a9e0:	ldr	r1, [sp, #8]
   1a9e4:	ldr	r2, [r1]
   1a9e8:	add	r3, r2, #2
   1a9ec:	str	r3, [r1]
   1a9f0:	strh	r0, [r2]
   1a9f4:	ldr	r0, [sp, #8]
   1a9f8:	ldr	r0, [r0, #16]
   1a9fc:	ldr	r1, [sp]
   1aa00:	add	r0, r0, r1
   1aa04:	str	r0, [fp, #-4]
   1aa08:	ldr	r0, [fp, #-4]
   1aa0c:	mov	sp, fp
   1aa10:	pop	{fp, pc}

0001aa14 <flatcc_builder_push_buffer_alignment@@Base>:
   1aa14:	sub	sp, sp, #8
   1aa18:	str	r0, [sp, #4]
   1aa1c:	ldr	r0, [sp, #4]
   1aa20:	ldrh	r0, [r0, #128]	; 0x80
   1aa24:	strh	r0, [sp, #2]
   1aa28:	ldr	r0, [sp, #4]
   1aa2c:	movw	r1, #4
   1aa30:	strh	r1, [r0, #128]	; 0x80
   1aa34:	ldrh	r0, [sp, #2]
   1aa38:	add	sp, sp, #8
   1aa3c:	bx	lr

0001aa40 <flatcc_builder_pop_buffer_alignment@@Base>:
   1aa40:	push	{fp, lr}
   1aa44:	mov	fp, sp
   1aa48:	sub	sp, sp, #8
   1aa4c:	str	r0, [sp, #4]
   1aa50:	strh	r1, [sp, #2]
   1aa54:	ldr	r0, [sp, #4]
   1aa58:	ldrh	r1, [sp, #2]
   1aa5c:	bl	16824 <flatcc_builder_create_buffer@@Base+0x3a8>
   1aa60:	mov	sp, fp
   1aa64:	pop	{fp, pc}

0001aa68 <flatcc_builder_get_buffer_alignment@@Base>:
   1aa68:	sub	sp, sp, #4
   1aa6c:	str	r0, [sp]
   1aa70:	ldr	r0, [sp]
   1aa74:	ldrh	r0, [r0, #128]	; 0x80
   1aa78:	add	sp, sp, #4
   1aa7c:	bx	lr

0001aa80 <flatcc_builder_set_vtable_clustering@@Base>:
   1aa80:	sub	sp, sp, #8
   1aa84:	str	r0, [sp, #4]
   1aa88:	str	r1, [sp]
   1aa8c:	ldr	r0, [sp]
   1aa90:	cmp	r0, #0
   1aa94:	movw	r0, #0
   1aa98:	movne	r0, #1
   1aa9c:	mvn	r1, #0
   1aaa0:	eor	r0, r0, r1
   1aaa4:	and	r0, r0, #1
   1aaa8:	ldr	r1, [sp, #4]
   1aaac:	str	r0, [r1, #180]	; 0xb4
   1aab0:	add	sp, sp, #8
   1aab4:	bx	lr

0001aab8 <flatcc_builder_set_block_align@@Base>:
   1aab8:	sub	sp, sp, #8
   1aabc:	str	r0, [sp, #4]
   1aac0:	strh	r1, [sp, #2]
   1aac4:	ldrh	r0, [sp, #2]
   1aac8:	ldr	r1, [sp, #4]
   1aacc:	strh	r0, [r1, #132]	; 0x84
   1aad0:	add	sp, sp, #8
   1aad4:	bx	lr

0001aad8 <flatcc_builder_get_level@@Base>:
   1aad8:	sub	sp, sp, #4
   1aadc:	str	r0, [sp]
   1aae0:	ldr	r0, [sp]
   1aae4:	ldr	r0, [r0, #156]	; 0x9c
   1aae8:	add	sp, sp, #4
   1aaec:	bx	lr

0001aaf0 <flatcc_builder_set_max_level@@Base>:
   1aaf0:	sub	sp, sp, #8
   1aaf4:	str	r0, [sp, #4]
   1aaf8:	str	r1, [sp]
   1aafc:	ldr	r0, [sp]
   1ab00:	ldr	r1, [sp, #4]
   1ab04:	str	r0, [r1, #176]	; 0xb0
   1ab08:	ldr	r0, [sp, #4]
   1ab0c:	ldr	r0, [r0, #160]	; 0xa0
   1ab10:	ldr	r1, [sp, #4]
   1ab14:	ldr	r1, [r1, #176]	; 0xb0
   1ab18:	cmp	r0, r1
   1ab1c:	bge	1ab30 <flatcc_builder_set_max_level@@Base+0x40>
   1ab20:	ldr	r0, [sp, #4]
   1ab24:	ldr	r0, [r0, #176]	; 0xb0
   1ab28:	ldr	r1, [sp, #4]
   1ab2c:	str	r0, [r1, #160]	; 0xa0
   1ab30:	add	sp, sp, #8
   1ab34:	bx	lr

0001ab38 <flatcc_builder_get_buffer_size@@Base>:
   1ab38:	sub	sp, sp, #4
   1ab3c:	str	r0, [sp]
   1ab40:	ldr	r0, [sp]
   1ab44:	ldr	r0, [r0, #140]	; 0x8c
   1ab48:	ldr	r1, [sp]
   1ab4c:	ldr	r1, [r1, #136]	; 0x88
   1ab50:	sub	r0, r0, r1
   1ab54:	add	sp, sp, #4
   1ab58:	bx	lr

0001ab5c <flatcc_builder_get_buffer_start@@Base>:
   1ab5c:	sub	sp, sp, #4
   1ab60:	str	r0, [sp]
   1ab64:	ldr	r0, [sp]
   1ab68:	ldr	r0, [r0, #136]	; 0x88
   1ab6c:	add	sp, sp, #4
   1ab70:	bx	lr

0001ab74 <flatcc_builder_get_buffer_end@@Base>:
   1ab74:	sub	sp, sp, #4
   1ab78:	str	r0, [sp]
   1ab7c:	ldr	r0, [sp]
   1ab80:	ldr	r0, [r0, #140]	; 0x8c
   1ab84:	add	sp, sp, #4
   1ab88:	bx	lr

0001ab8c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1ab8c:	sub	sp, sp, #8
   1ab90:	str	r0, [sp, #4]
   1ab94:	str	r1, [sp]
   1ab98:	ldr	r0, [sp]
   1ab9c:	ldr	r1, [sp, #4]
   1aba0:	str	r0, [r1, #172]	; 0xac
   1aba4:	add	sp, sp, #8
   1aba8:	bx	lr

0001abac <flatcc_builder_set_identifier@@Base>:
   1abac:	sub	sp, sp, #16
   1abb0:	str	r0, [sp, #12]
   1abb4:	str	r1, [sp, #8]
   1abb8:	ldr	r0, [sp, #12]
   1abbc:	add	r0, r0, #168	; 0xa8
   1abc0:	ldr	r1, [sp, #8]
   1abc4:	movw	r2, #0
   1abc8:	cmp	r1, r2
   1abcc:	str	r0, [sp, #4]
   1abd0:	beq	1abe0 <flatcc_builder_set_identifier@@Base+0x34>
   1abd4:	ldr	r0, [sp, #8]
   1abd8:	str	r0, [sp]
   1abdc:	b	1abf0 <flatcc_builder_set_identifier@@Base+0x44>
   1abe0:	ldr	r0, [pc, #56]	; 1ac20 <flatcc_builder_set_identifier@@Base+0x74>
   1abe4:	ldr	r0, [pc, r0]
   1abe8:	str	r0, [sp]
   1abec:	b	1abf0 <flatcc_builder_set_identifier@@Base+0x44>
   1abf0:	ldr	r0, [sp]
   1abf4:	ldrb	r1, [r0]
   1abf8:	ldr	r2, [sp, #4]
   1abfc:	strb	r1, [r2]
   1ac00:	ldrb	r1, [r0, #1]
   1ac04:	strb	r1, [r2, #1]
   1ac08:	ldrb	r1, [r0, #2]
   1ac0c:	strb	r1, [r2, #2]
   1ac10:	ldrb	r0, [r0, #3]
   1ac14:	strb	r0, [r2, #3]
   1ac18:	add	sp, sp, #16
   1ac1c:	bx	lr
   1ac20:	andeq	r3, r1, r0, ror #8

0001ac24 <flatcc_builder_get_type@@Base>:
   1ac24:	sub	sp, sp, #8
   1ac28:	str	r0, [sp, #4]
   1ac2c:	ldr	r0, [sp, #4]
   1ac30:	ldr	r0, [r0, #32]
   1ac34:	movw	r1, #0
   1ac38:	cmp	r0, r1
   1ac3c:	beq	1ac54 <flatcc_builder_get_type@@Base+0x30>
   1ac40:	ldr	r0, [sp, #4]
   1ac44:	ldr	r0, [r0, #32]
   1ac48:	ldrh	r0, [r0, #14]
   1ac4c:	str	r0, [sp]
   1ac50:	b	1ac60 <flatcc_builder_get_type@@Base+0x3c>
   1ac54:	movw	r0, #0
   1ac58:	str	r0, [sp]
   1ac5c:	b	1ac60 <flatcc_builder_get_type@@Base+0x3c>
   1ac60:	ldr	r0, [sp]
   1ac64:	add	sp, sp, #8
   1ac68:	bx	lr

0001ac6c <flatcc_builder_get_type_at@@Base>:
   1ac6c:	sub	sp, sp, #12
   1ac70:	str	r0, [sp, #4]
   1ac74:	str	r1, [sp]
   1ac78:	ldr	r0, [sp]
   1ac7c:	cmp	r0, #1
   1ac80:	blt	1ac98 <flatcc_builder_get_type_at@@Base+0x2c>
   1ac84:	ldr	r0, [sp]
   1ac88:	ldr	r1, [sp, #4]
   1ac8c:	ldr	r1, [r1, #156]	; 0x9c
   1ac90:	cmp	r0, r1
   1ac94:	ble	1aca4 <flatcc_builder_get_type_at@@Base+0x38>
   1ac98:	movw	r0, #0
   1ac9c:	str	r0, [sp, #8]
   1aca0:	b	1acd0 <flatcc_builder_get_type_at@@Base+0x64>
   1aca4:	ldr	r0, [sp, #4]
   1aca8:	ldr	r0, [r0, #32]
   1acac:	ldr	r1, [sp]
   1acb0:	ldr	r2, [sp, #4]
   1acb4:	ldr	r2, [r2, #156]	; 0x9c
   1acb8:	sub	r1, r1, r2
   1acbc:	movw	r2, #36	; 0x24
   1acc0:	mul	r1, r1, r2
   1acc4:	add	r0, r0, r1
   1acc8:	ldrh	r0, [r0, #14]
   1accc:	str	r0, [sp, #8]
   1acd0:	ldr	r0, [sp, #8]
   1acd4:	add	sp, sp, #12
   1acd8:	bx	lr

0001acdc <flatcc_builder_get_direct_buffer@@Base>:
   1acdc:	push	{fp, lr}
   1ace0:	mov	fp, sp
   1ace4:	sub	sp, sp, #16
   1ace8:	str	r0, [sp, #8]
   1acec:	str	r1, [sp, #4]
   1acf0:	ldr	r0, [sp, #8]
   1acf4:	ldr	r0, [r0, #184]	; 0xb8
   1acf8:	cmp	r0, #0
   1acfc:	beq	1ad18 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   1ad00:	ldr	r0, [sp, #8]
   1ad04:	add	r0, r0, #188	; 0xbc
   1ad08:	ldr	r1, [sp, #4]
   1ad0c:	bl	1ad4c <flatcc_builder_get_direct_buffer@@Base+0x70>
   1ad10:	str	r0, [fp, #-4]
   1ad14:	b	1ad40 <flatcc_builder_get_direct_buffer@@Base+0x64>
   1ad18:	ldr	r0, [sp, #4]
   1ad1c:	movw	r1, #0
   1ad20:	cmp	r0, r1
   1ad24:	beq	1ad34 <flatcc_builder_get_direct_buffer@@Base+0x58>
   1ad28:	ldr	r0, [sp, #4]
   1ad2c:	movw	r1, #0
   1ad30:	str	r1, [r0]
   1ad34:	b	1ad38 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   1ad38:	movw	r0, #0
   1ad3c:	str	r0, [fp, #-4]
   1ad40:	ldr	r0, [fp, #-4]
   1ad44:	mov	sp, fp
   1ad48:	pop	{fp, pc}
   1ad4c:	sub	sp, sp, #12
   1ad50:	str	r0, [sp, #4]
   1ad54:	str	r1, [sp]
   1ad58:	ldr	r0, [sp, #4]
   1ad5c:	ldr	r0, [r0]
   1ad60:	ldr	r1, [sp, #4]
   1ad64:	ldr	r1, [r1, #4]
   1ad68:	cmp	r0, r1
   1ad6c:	bne	1ada0 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   1ad70:	ldr	r0, [sp]
   1ad74:	movw	r1, #0
   1ad78:	cmp	r0, r1
   1ad7c:	beq	1ad90 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   1ad80:	ldr	r0, [sp, #4]
   1ad84:	ldr	r0, [r0, #24]
   1ad88:	ldr	r1, [sp]
   1ad8c:	str	r0, [r1]
   1ad90:	ldr	r0, [sp, #4]
   1ad94:	ldr	r0, [r0, #8]
   1ad98:	str	r0, [sp, #8]
   1ad9c:	b	1adc4 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   1ada0:	ldr	r0, [sp]
   1ada4:	movw	r1, #0
   1ada8:	cmp	r0, r1
   1adac:	beq	1adbc <flatcc_builder_get_direct_buffer@@Base+0xe0>
   1adb0:	ldr	r0, [sp]
   1adb4:	movw	r1, #0
   1adb8:	str	r1, [r0]
   1adbc:	movw	r0, #0
   1adc0:	str	r0, [sp, #8]
   1adc4:	ldr	r0, [sp, #8]
   1adc8:	add	sp, sp, #12
   1adcc:	bx	lr

0001add0 <flatcc_builder_copy_buffer@@Base>:
   1add0:	push	{fp, lr}
   1add4:	mov	fp, sp
   1add8:	sub	sp, sp, #16
   1addc:	str	r0, [sp, #8]
   1ade0:	str	r1, [sp, #4]
   1ade4:	str	r2, [sp]
   1ade8:	ldr	r0, [sp, #8]
   1adec:	ldr	r0, [r0, #184]	; 0xb8
   1adf0:	cmp	r0, #0
   1adf4:	bne	1ae04 <flatcc_builder_copy_buffer@@Base+0x34>
   1adf8:	movw	r0, #0
   1adfc:	str	r0, [fp, #-4]
   1ae00:	b	1ae58 <flatcc_builder_copy_buffer@@Base+0x88>
   1ae04:	ldr	r0, [sp, #8]
   1ae08:	add	r0, r0, #188	; 0xbc
   1ae0c:	ldr	r1, [sp, #4]
   1ae10:	ldr	r2, [sp]
   1ae14:	bl	1bac4 <flatcc_emitter_copy_buffer@@Base>
   1ae18:	str	r0, [sp, #4]
   1ae1c:	ldr	r0, [sp, #4]
   1ae20:	movw	r1, #0
   1ae24:	cmp	r0, r1
   1ae28:	beq	1ae30 <flatcc_builder_copy_buffer@@Base+0x60>
   1ae2c:	b	1ae50 <flatcc_builder_copy_buffer@@Base+0x80>
   1ae30:	ldr	r0, [pc, #44]	; 1ae64 <flatcc_builder_copy_buffer@@Base+0x94>
   1ae34:	add	r0, pc, r0
   1ae38:	ldr	r1, [pc, #40]	; 1ae68 <flatcc_builder_copy_buffer@@Base+0x98>
   1ae3c:	add	r1, pc, r1
   1ae40:	ldr	r2, [pc, #36]	; 1ae6c <flatcc_builder_copy_buffer@@Base+0x9c>
   1ae44:	add	r3, pc, r2
   1ae48:	movw	r2, #1926	; 0x786
   1ae4c:	bl	12450 <__assert_fail@plt>
   1ae50:	ldr	r0, [sp, #4]
   1ae54:	str	r0, [fp, #-4]
   1ae58:	ldr	r0, [fp, #-4]
   1ae5c:	mov	sp, fp
   1ae60:	pop	{fp, pc}
   1ae64:			; <UNDEFINED> instruction: 0x00001fbf
   1ae68:	andeq	r1, r0, ip, asr #26
   1ae6c:			; <UNDEFINED> instruction: 0x00002cb3

0001ae70 <flatcc_builder_finalize_buffer@@Base>:
   1ae70:	push	{fp, lr}
   1ae74:	mov	fp, sp
   1ae78:	sub	sp, sp, #16
   1ae7c:	str	r0, [fp, #-4]
   1ae80:	str	r1, [sp, #8]
   1ae84:	ldr	r0, [fp, #-4]
   1ae88:	bl	1ab38 <flatcc_builder_get_buffer_size@@Base>
   1ae8c:	str	r0, [sp]
   1ae90:	ldr	r0, [sp, #8]
   1ae94:	movw	r1, #0
   1ae98:	cmp	r0, r1
   1ae9c:	beq	1aeac <flatcc_builder_finalize_buffer@@Base+0x3c>
   1aea0:	ldr	r0, [sp]
   1aea4:	ldr	r1, [sp, #8]
   1aea8:	str	r0, [r1]
   1aeac:	ldr	r0, [sp]
   1aeb0:	bl	123e4 <malloc@plt>
   1aeb4:	str	r0, [sp, #4]
   1aeb8:	ldr	r0, [sp, #4]
   1aebc:	movw	lr, #0
   1aec0:	cmp	r0, lr
   1aec4:	bne	1aee8 <flatcc_builder_finalize_buffer@@Base+0x78>
   1aec8:	ldr	r0, [pc, #144]	; 1af60 <flatcc_builder_finalize_buffer@@Base+0xf0>
   1aecc:	add	r0, pc, r0
   1aed0:	ldr	r1, [pc, #140]	; 1af64 <flatcc_builder_finalize_buffer@@Base+0xf4>
   1aed4:	add	r1, pc, r1
   1aed8:	ldr	r2, [pc, #136]	; 1af68 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1aedc:	add	r3, pc, r2
   1aee0:	movw	r2, #1944	; 0x798
   1aee4:	bl	12450 <__assert_fail@plt>
   1aee8:	ldr	r0, [fp, #-4]
   1aeec:	ldr	r1, [sp, #4]
   1aef0:	ldr	r2, [sp]
   1aef4:	bl	1add0 <flatcc_builder_copy_buffer@@Base>
   1aef8:	movw	r1, #0
   1aefc:	cmp	r0, r1
   1af00:	bne	1af24 <flatcc_builder_finalize_buffer@@Base+0xb4>
   1af04:	ldr	r0, [pc, #96]	; 1af6c <flatcc_builder_finalize_buffer@@Base+0xfc>
   1af08:	add	r0, pc, r0
   1af0c:	ldr	r1, [pc, #92]	; 1af70 <flatcc_builder_finalize_buffer@@Base+0x100>
   1af10:	add	r1, pc, r1
   1af14:	ldr	r2, [pc, #88]	; 1af74 <flatcc_builder_finalize_buffer@@Base+0x104>
   1af18:	add	r3, pc, r2
   1af1c:	movw	r2, #1948	; 0x79c
   1af20:	bl	12450 <__assert_fail@plt>
   1af24:	b	1af28 <flatcc_builder_finalize_buffer@@Base+0xb8>
   1af28:	ldr	r0, [sp, #4]
   1af2c:	movw	r1, #0
   1af30:	cmp	r0, r1
   1af34:	bne	1af54 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1af38:	ldr	r0, [sp, #8]
   1af3c:	movw	r1, #0
   1af40:	cmp	r0, r1
   1af44:	beq	1af54 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1af48:	ldr	r0, [sp, #8]
   1af4c:	movw	r1, #0
   1af50:	str	r1, [r0]
   1af54:	ldr	r0, [sp, #4]
   1af58:	mov	sp, fp
   1af5c:	pop	{fp, pc}
   1af60:	andeq	r2, r0, r9, ror lr
   1af64:			; <UNDEFINED> instruction: 0x00001cb4
   1af68:	andeq	r2, r0, r0, ror #24
   1af6c:	andeq	r2, r0, sp, lsr lr
   1af70:	andeq	r1, r0, r8, ror ip
   1af74:	andeq	r2, r0, r4, lsr #24

0001af78 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1af78:	push	{fp, lr}
   1af7c:	mov	fp, sp
   1af80:	sub	sp, sp, #24
   1af84:	str	r0, [fp, #-4]
   1af88:	str	r1, [fp, #-8]
   1af8c:	ldr	r0, [fp, #-4]
   1af90:	bl	1ab38 <flatcc_builder_get_buffer_size@@Base>
   1af94:	str	r0, [sp, #4]
   1af98:	ldr	r0, [fp, #-8]
   1af9c:	movw	r1, #0
   1afa0:	cmp	r0, r1
   1afa4:	beq	1afb4 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1afa8:	ldr	r0, [sp, #4]
   1afac:	ldr	r1, [fp, #-8]
   1afb0:	str	r0, [r1]
   1afb4:	ldr	r0, [fp, #-4]
   1afb8:	bl	1aa68 <flatcc_builder_get_buffer_alignment@@Base>
   1afbc:	uxth	r0, r0
   1afc0:	str	r0, [sp, #8]
   1afc4:	ldr	r0, [sp, #4]
   1afc8:	ldr	lr, [sp, #8]
   1afcc:	add	r0, r0, lr
   1afd0:	sub	r0, r0, #1
   1afd4:	ldr	lr, [sp, #8]
   1afd8:	sub	lr, lr, #1
   1afdc:	mvn	r1, #0
   1afe0:	eor	r1, lr, r1
   1afe4:	and	r0, r0, r1
   1afe8:	str	r0, [sp, #4]
   1afec:	ldr	r0, [sp, #8]
   1aff0:	ldr	r1, [sp, #4]
   1aff4:	bl	1b07c <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1aff8:	str	r0, [sp, #12]
   1affc:	ldr	r0, [sp, #12]
   1b000:	movw	r1, #0
   1b004:	cmp	r0, r1
   1b008:	bne	1b010 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   1b00c:	b	1b044 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1b010:	ldr	r0, [fp, #-4]
   1b014:	ldr	r1, [sp, #12]
   1b018:	ldr	r2, [sp, #4]
   1b01c:	bl	1add0 <flatcc_builder_copy_buffer@@Base>
   1b020:	movw	r1, #0
   1b024:	cmp	r0, r1
   1b028:	bne	1b040 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   1b02c:	ldr	r0, [sp, #12]
   1b030:	bl	123b4 <free@plt>
   1b034:	movw	r0, #0
   1b038:	str	r0, [sp, #12]
   1b03c:	b	1b044 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1b040:	b	1b044 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1b044:	ldr	r0, [sp, #12]
   1b048:	movw	r1, #0
   1b04c:	cmp	r0, r1
   1b050:	bne	1b070 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1b054:	ldr	r0, [fp, #-8]
   1b058:	movw	r1, #0
   1b05c:	cmp	r0, r1
   1b060:	beq	1b070 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1b064:	ldr	r0, [fp, #-8]
   1b068:	movw	r1, #0
   1b06c:	str	r1, [r0]
   1b070:	ldr	r0, [sp, #12]
   1b074:	mov	sp, fp
   1b078:	pop	{fp, pc}
   1b07c:	push	{fp, lr}
   1b080:	mov	fp, sp
   1b084:	sub	sp, sp, #16
   1b088:	str	r0, [fp, #-4]
   1b08c:	str	r1, [sp, #8]
   1b090:	movw	r0, #0
   1b094:	str	r0, [sp]
   1b098:	ldr	r0, [fp, #-4]
   1b09c:	cmp	r0, #4
   1b0a0:	bcs	1b0ac <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   1b0a4:	movw	r0, #4
   1b0a8:	str	r0, [fp, #-4]
   1b0ac:	ldr	r1, [fp, #-4]
   1b0b0:	ldr	r2, [sp, #8]
   1b0b4:	mov	r0, sp
   1b0b8:	bl	12414 <posix_memalign@plt>
   1b0bc:	str	r0, [sp, #4]
   1b0c0:	ldr	r0, [sp, #4]
   1b0c4:	cmp	r0, #0
   1b0c8:	beq	1b0ec <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   1b0cc:	ldr	r0, [sp]
   1b0d0:	movw	r1, #0
   1b0d4:	cmp	r0, r1
   1b0d8:	beq	1b0ec <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   1b0dc:	ldr	r0, [sp]
   1b0e0:	bl	123b4 <free@plt>
   1b0e4:	movw	r0, #0
   1b0e8:	str	r0, [sp]
   1b0ec:	ldr	r0, [sp]
   1b0f0:	mov	sp, fp
   1b0f4:	pop	{fp, pc}

0001b0f8 <flatcc_builder_aligned_alloc@@Base>:
   1b0f8:	push	{fp, lr}
   1b0fc:	mov	fp, sp
   1b100:	sub	sp, sp, #8
   1b104:	str	r0, [sp, #4]
   1b108:	str	r1, [sp]
   1b10c:	ldr	r0, [sp, #4]
   1b110:	ldr	r1, [sp]
   1b114:	bl	1b07c <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1b118:	mov	sp, fp
   1b11c:	pop	{fp, pc}

0001b120 <flatcc_builder_aligned_free@@Base>:
   1b120:	push	{fp, lr}
   1b124:	mov	fp, sp
   1b128:	sub	sp, sp, #8
   1b12c:	str	r0, [sp, #4]
   1b130:	ldr	r0, [sp, #4]
   1b134:	bl	123b4 <free@plt>
   1b138:	mov	sp, fp
   1b13c:	pop	{fp, pc}

0001b140 <flatcc_builder_get_emit_context@@Base>:
   1b140:	sub	sp, sp, #4
   1b144:	str	r0, [sp]
   1b148:	ldr	r0, [sp]
   1b14c:	ldr	r0, [r0, #36]	; 0x24
   1b150:	add	sp, sp, #4
   1b154:	bx	lr
   1b158:	sub	sp, sp, #8
   1b15c:	str	r0, [sp, #4]
   1b160:	strh	r1, [sp, #2]
   1b164:	ldr	r0, [sp, #4]
   1b168:	ldr	r0, [r0, #140]	; 0x8c
   1b16c:	ldrh	r1, [sp, #2]
   1b170:	sub	r1, r1, #1
   1b174:	and	r0, r0, r1
   1b178:	add	sp, sp, #8
   1b17c:	bx	lr
   1b180:	push	{fp, lr}
   1b184:	mov	fp, sp
   1b188:	sub	sp, sp, #32
   1b18c:	str	r0, [fp, #-8]
   1b190:	str	r1, [fp, #-12]
   1b194:	str	r2, [sp, #16]
   1b198:	ldr	r0, [fp, #-8]
   1b19c:	add	r0, r0, #52	; 0x34
   1b1a0:	add	r0, r0, #8
   1b1a4:	str	r0, [sp, #12]
   1b1a8:	ldr	r0, [fp, #-8]
   1b1ac:	ldr	r0, [r0, #48]	; 0x30
   1b1b0:	ldr	r1, [fp, #-8]
   1b1b4:	ldr	r1, [r1, #40]	; 0x28
   1b1b8:	ldr	r2, [sp, #12]
   1b1bc:	ldr	r3, [fp, #-8]
   1b1c0:	ldr	r3, [r3, #28]
   1b1c4:	ldr	ip, [fp, #-12]
   1b1c8:	add	r3, r3, ip
   1b1cc:	str	r0, [sp, #8]
   1b1d0:	mov	r0, r1
   1b1d4:	mov	r1, r2
   1b1d8:	mov	r2, r3
   1b1dc:	movw	r3, #1
   1b1e0:	str	r3, [sp, #4]
   1b1e4:	ldr	ip, [sp, #4]
   1b1e8:	str	ip, [sp]
   1b1ec:	ldr	lr, [sp, #8]
   1b1f0:	blx	lr
   1b1f4:	cmp	r0, #0
   1b1f8:	beq	1b208 <flatcc_builder_get_emit_context@@Base+0xc8>
   1b1fc:	mvn	r0, #0
   1b200:	str	r0, [fp, #-4]
   1b204:	b	1b21c <flatcc_builder_get_emit_context@@Base+0xdc>
   1b208:	ldr	r0, [fp, #-8]
   1b20c:	ldr	r1, [sp, #16]
   1b210:	bl	16f84 <flatcc_builder_start_struct@@Base+0x70>
   1b214:	movw	r0, #0
   1b218:	str	r0, [fp, #-4]
   1b21c:	ldr	r0, [fp, #-4]
   1b220:	mov	sp, fp
   1b224:	pop	{fp, pc}
   1b228:	push	{fp, lr}
   1b22c:	mov	fp, sp
   1b230:	sub	sp, sp, #32
   1b234:	str	r0, [fp, #-8]
   1b238:	ldr	r0, [fp, #-8]
   1b23c:	add	r0, r0, #52	; 0x34
   1b240:	add	r0, r0, #40	; 0x28
   1b244:	str	r0, [fp, #-12]
   1b248:	ldr	r0, [fp, #-8]
   1b24c:	ldr	r0, [r0, #124]	; 0x7c
   1b250:	cmp	r0, #0
   1b254:	bne	1b25c <flatcc_builder_get_emit_context@@Base+0x11c>
   1b258:	b	1b27c <flatcc_builder_get_emit_context@@Base+0x13c>
   1b25c:	ldr	r0, [pc, #320]	; 1b3a4 <flatcc_builder_get_emit_context@@Base+0x264>
   1b260:	add	r0, pc, r0
   1b264:	ldr	r1, [pc, #316]	; 1b3a8 <flatcc_builder_get_emit_context@@Base+0x268>
   1b268:	add	r1, pc, r1
   1b26c:	ldr	r2, [pc, #312]	; 1b3ac <flatcc_builder_get_emit_context@@Base+0x26c>
   1b270:	add	r3, pc, r2
   1b274:	movw	r2, #342	; 0x156
   1b278:	bl	12450 <__assert_fail@plt>
   1b27c:	ldr	r0, [fp, #-8]
   1b280:	ldr	r1, [fp, #-8]
   1b284:	ldr	r2, [r1, #124]	; 0x7c
   1b288:	movw	r1, #6
   1b28c:	movw	r3, #16
   1b290:	movw	ip, #0
   1b294:	str	ip, [sp]
   1b298:	bl	15cac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1b29c:	movw	r1, #0
   1b2a0:	cmp	r0, r1
   1b2a4:	bne	1b2b4 <flatcc_builder_get_emit_context@@Base+0x174>
   1b2a8:	mvn	r0, #0
   1b2ac:	str	r0, [fp, #-4]
   1b2b0:	b	1b398 <flatcc_builder_get_emit_context@@Base+0x258>
   1b2b4:	ldr	r0, [fp, #-8]
   1b2b8:	movw	r1, #16
   1b2bc:	str	r1, [r0, #124]	; 0x7c
   1b2c0:	movw	r0, #256	; 0x100
   1b2c4:	str	r0, [sp, #16]
   1b2c8:	ldr	r0, [fp, #-8]
   1b2cc:	ldr	r0, [r0, #48]	; 0x30
   1b2d0:	ldr	r1, [fp, #-8]
   1b2d4:	ldr	r1, [r1, #40]	; 0x28
   1b2d8:	ldr	r2, [fp, #-12]
   1b2dc:	ldr	r3, [sp, #16]
   1b2e0:	str	r0, [sp, #8]
   1b2e4:	mov	r0, r1
   1b2e8:	mov	r1, r2
   1b2ec:	mov	r2, r3
   1b2f0:	movw	r3, #1
   1b2f4:	movw	ip, #5
   1b2f8:	str	ip, [sp]
   1b2fc:	ldr	ip, [sp, #8]
   1b300:	blx	ip
   1b304:	cmp	r0, #0
   1b308:	beq	1b318 <flatcc_builder_get_emit_context@@Base+0x1d8>
   1b30c:	mvn	r0, #0
   1b310:	str	r0, [fp, #-4]
   1b314:	b	1b398 <flatcc_builder_get_emit_context@@Base+0x258>
   1b318:	b	1b31c <flatcc_builder_get_emit_context@@Base+0x1dc>
   1b31c:	ldr	r0, [sp, #16]
   1b320:	lsl	r0, r0, #1
   1b324:	ldr	r1, [fp, #-12]
   1b328:	ldr	r1, [r1, #4]
   1b32c:	cmp	r0, r1
   1b330:	bhi	1b344 <flatcc_builder_get_emit_context@@Base+0x204>
   1b334:	ldr	r0, [sp, #16]
   1b338:	lsl	r0, r0, #1
   1b33c:	str	r0, [sp, #16]
   1b340:	b	1b31c <flatcc_builder_get_emit_context@@Base+0x1dc>
   1b344:	ldr	r0, [sp, #16]
   1b348:	lsr	r0, r0, #2
   1b34c:	str	r0, [sp, #16]
   1b350:	movw	r0, #0
   1b354:	str	r0, [sp, #12]
   1b358:	ldr	r0, [sp, #12]
   1b35c:	movw	r1, #1
   1b360:	lsl	r0, r1, r0
   1b364:	ldr	r1, [sp, #16]
   1b368:	cmp	r0, r1
   1b36c:	bcs	1b384 <flatcc_builder_get_emit_context@@Base+0x244>
   1b370:	b	1b374 <flatcc_builder_get_emit_context@@Base+0x234>
   1b374:	ldr	r0, [sp, #12]
   1b378:	add	r0, r0, #1
   1b37c:	str	r0, [sp, #12]
   1b380:	b	1b358 <flatcc_builder_get_emit_context@@Base+0x218>
   1b384:	ldr	r0, [sp, #12]
   1b388:	ldr	r1, [fp, #-8]
   1b38c:	str	r0, [r1, #116]	; 0x74
   1b390:	movw	r0, #0
   1b394:	str	r0, [fp, #-4]
   1b398:	ldr	r0, [fp, #-4]
   1b39c:	mov	sp, fp
   1b3a0:	pop	{fp, pc}
   1b3a4:	andeq	r2, r0, r9, lsr #21
   1b3a8:	andeq	r1, r0, r0, lsr #18
   1b3ac:	andeq	r2, r0, r8, lsr #21

0001b3b0 <flatcc_emitter_recycle_page@@Base>:
   1b3b0:	sub	sp, sp, #12
   1b3b4:	str	r0, [sp, #4]
   1b3b8:	str	r1, [sp]
   1b3bc:	ldr	r0, [sp]
   1b3c0:	ldr	r1, [sp, #4]
   1b3c4:	ldr	r1, [r1]
   1b3c8:	cmp	r0, r1
   1b3cc:	beq	1b3e4 <flatcc_emitter_recycle_page@@Base+0x34>
   1b3d0:	ldr	r0, [sp]
   1b3d4:	ldr	r1, [sp, #4]
   1b3d8:	ldr	r1, [r1, #4]
   1b3dc:	cmp	r0, r1
   1b3e0:	bne	1b3f0 <flatcc_emitter_recycle_page@@Base+0x40>
   1b3e4:	mvn	r0, #0
   1b3e8:	str	r0, [sp, #8]
   1b3ec:	b	1b464 <flatcc_emitter_recycle_page@@Base+0xb4>
   1b3f0:	ldr	r0, [sp]
   1b3f4:	ldr	r0, [r0, #2948]	; 0xb84
   1b3f8:	ldr	r1, [sp]
   1b3fc:	ldr	r1, [r1, #2944]	; 0xb80
   1b400:	str	r0, [r1, #2948]	; 0xb84
   1b404:	ldr	r0, [sp]
   1b408:	ldr	r0, [r0, #2944]	; 0xb80
   1b40c:	ldr	r1, [sp]
   1b410:	ldr	r1, [r1, #2948]	; 0xb84
   1b414:	str	r0, [r1, #2944]	; 0xb80
   1b418:	ldr	r0, [sp, #4]
   1b41c:	ldr	r0, [r0]
   1b420:	ldr	r0, [r0, #2948]	; 0xb84
   1b424:	ldr	r1, [sp]
   1b428:	str	r0, [r1, #2948]	; 0xb84
   1b42c:	ldr	r0, [sp, #4]
   1b430:	ldr	r0, [r0]
   1b434:	ldr	r1, [sp]
   1b438:	str	r0, [r1, #2944]	; 0xb80
   1b43c:	ldr	r0, [sp]
   1b440:	ldr	r1, [sp]
   1b444:	ldr	r1, [r1, #2948]	; 0xb84
   1b448:	str	r0, [r1, #2944]	; 0xb80
   1b44c:	ldr	r0, [sp]
   1b450:	ldr	r1, [sp]
   1b454:	ldr	r1, [r1, #2944]	; 0xb80
   1b458:	str	r0, [r1, #2948]	; 0xb84
   1b45c:	movw	r0, #0
   1b460:	str	r0, [sp, #8]
   1b464:	ldr	r0, [sp, #8]
   1b468:	add	sp, sp, #12
   1b46c:	bx	lr

0001b470 <flatcc_emitter_reset@@Base>:
   1b470:	push	{fp, lr}
   1b474:	mov	fp, sp
   1b478:	sub	sp, sp, #16
   1b47c:	str	r0, [fp, #-4]
   1b480:	ldr	r0, [fp, #-4]
   1b484:	ldr	r0, [r0]
   1b488:	str	r0, [sp, #8]
   1b48c:	ldr	r0, [fp, #-4]
   1b490:	ldr	r0, [r0]
   1b494:	movw	r1, #0
   1b498:	cmp	r0, r1
   1b49c:	bne	1b4a4 <flatcc_emitter_reset@@Base+0x34>
   1b4a0:	b	1b600 <flatcc_emitter_reset@@Base+0x190>
   1b4a4:	ldr	r0, [fp, #-4]
   1b4a8:	ldr	r0, [r0]
   1b4ac:	ldr	r1, [fp, #-4]
   1b4b0:	str	r0, [r1, #4]
   1b4b4:	ldr	r0, [fp, #-4]
   1b4b8:	ldr	r0, [r0]
   1b4bc:	add	r0, r0, #1472	; 0x5c0
   1b4c0:	ldr	r1, [fp, #-4]
   1b4c4:	str	r0, [r1, #8]
   1b4c8:	ldr	r0, [fp, #-4]
   1b4cc:	ldr	r0, [r0, #8]
   1b4d0:	ldr	r1, [fp, #-4]
   1b4d4:	str	r0, [r1, #16]
   1b4d8:	ldr	r0, [fp, #-4]
   1b4dc:	movw	r1, #1472	; 0x5c0
   1b4e0:	str	r1, [r0, #12]
   1b4e4:	ldr	r0, [fp, #-4]
   1b4e8:	str	r1, [r0, #20]
   1b4ec:	ldr	r0, [fp, #-4]
   1b4f0:	ldr	r0, [r0, #12]
   1b4f4:	movw	r1, #0
   1b4f8:	sub	r0, r1, r0
   1b4fc:	ldr	r1, [fp, #-4]
   1b500:	ldr	r1, [r1]
   1b504:	str	r0, [r1, #2952]	; 0xb88
   1b508:	ldr	r0, [fp, #-4]
   1b50c:	ldr	r0, [r0, #32]
   1b510:	cmp	r0, #0
   1b514:	bne	1b528 <flatcc_emitter_reset@@Base+0xb8>
   1b518:	ldr	r0, [fp, #-4]
   1b51c:	ldr	r0, [r0, #24]
   1b520:	ldr	r1, [fp, #-4]
   1b524:	str	r0, [r1, #32]
   1b528:	ldr	r0, [fp, #-4]
   1b52c:	ldr	r1, [r0, #24]
   1b530:	ldr	r0, [r0, #32]
   1b534:	add	r0, r0, r0, lsl #1
   1b538:	lsr	r0, r0, #2
   1b53c:	lsr	r1, r1, #2
   1b540:	add	r0, r0, r1
   1b544:	ldr	r1, [fp, #-4]
   1b548:	str	r0, [r1, #32]
   1b54c:	ldr	r0, [fp, #-4]
   1b550:	movw	r1, #0
   1b554:	str	r1, [r0, #24]
   1b558:	ldr	r0, [fp, #-4]
   1b55c:	ldr	r0, [r0, #32]
   1b560:	lsl	r0, r0, #1
   1b564:	ldr	r1, [fp, #-4]
   1b568:	ldr	r1, [r1, #28]
   1b56c:	cmp	r0, r1
   1b570:	movw	r0, #0
   1b574:	str	r0, [sp, #4]
   1b578:	bcs	1b5a0 <flatcc_emitter_reset@@Base+0x130>
   1b57c:	ldr	r0, [fp, #-4]
   1b580:	ldr	r0, [r0, #4]
   1b584:	ldr	r0, [r0, #2944]	; 0xb80
   1b588:	ldr	r1, [fp, #-4]
   1b58c:	ldr	r1, [r1]
   1b590:	cmp	r0, r1
   1b594:	movw	r0, #0
   1b598:	movne	r0, #1
   1b59c:	str	r0, [sp, #4]
   1b5a0:	ldr	r0, [sp, #4]
   1b5a4:	tst	r0, #1
   1b5a8:	beq	1b600 <flatcc_emitter_reset@@Base+0x190>
   1b5ac:	ldr	r0, [fp, #-4]
   1b5b0:	ldr	r0, [r0, #4]
   1b5b4:	ldr	r0, [r0, #2944]	; 0xb80
   1b5b8:	str	r0, [sp, #8]
   1b5bc:	ldr	r0, [sp, #8]
   1b5c0:	ldr	r0, [r0, #2944]	; 0xb80
   1b5c4:	ldr	r1, [fp, #-4]
   1b5c8:	ldr	r1, [r1, #4]
   1b5cc:	str	r0, [r1, #2944]	; 0xb80
   1b5d0:	ldr	r0, [fp, #-4]
   1b5d4:	ldr	r0, [r0, #4]
   1b5d8:	ldr	r1, [sp, #8]
   1b5dc:	ldr	r1, [r1, #2944]	; 0xb80
   1b5e0:	str	r0, [r1, #2948]	; 0xb84
   1b5e4:	ldr	r0, [sp, #8]
   1b5e8:	bl	123b4 <free@plt>
   1b5ec:	ldr	r0, [fp, #-4]
   1b5f0:	ldr	r1, [r0, #28]
   1b5f4:	sub	r1, r1, #2944	; 0xb80
   1b5f8:	str	r1, [r0, #28]
   1b5fc:	b	1b558 <flatcc_emitter_reset@@Base+0xe8>
   1b600:	mov	sp, fp
   1b604:	pop	{fp, pc}

0001b608 <flatcc_emitter_clear@@Base>:
   1b608:	push	{fp, lr}
   1b60c:	mov	fp, sp
   1b610:	sub	sp, sp, #8
   1b614:	str	r0, [sp, #4]
   1b618:	ldr	r0, [sp, #4]
   1b61c:	ldr	r0, [r0]
   1b620:	str	r0, [sp]
   1b624:	ldr	r0, [sp]
   1b628:	movw	r1, #0
   1b62c:	cmp	r0, r1
   1b630:	bne	1b638 <flatcc_emitter_clear@@Base+0x30>
   1b634:	b	1b694 <flatcc_emitter_clear@@Base+0x8c>
   1b638:	ldr	r0, [sp]
   1b63c:	ldr	r0, [r0, #2948]	; 0xb84
   1b640:	movw	r1, #0
   1b644:	str	r1, [r0, #2944]	; 0xb80
   1b648:	ldr	r0, [sp]
   1b64c:	ldr	r0, [r0, #2944]	; 0xb80
   1b650:	movw	r1, #0
   1b654:	cmp	r0, r1
   1b658:	beq	1b678 <flatcc_emitter_clear@@Base+0x70>
   1b65c:	ldr	r0, [sp]
   1b660:	ldr	r0, [r0, #2944]	; 0xb80
   1b664:	str	r0, [sp]
   1b668:	ldr	r0, [sp]
   1b66c:	ldr	r0, [r0, #2948]	; 0xb84
   1b670:	bl	123b4 <free@plt>
   1b674:	b	1b648 <flatcc_emitter_clear@@Base+0x40>
   1b678:	ldr	r0, [sp]
   1b67c:	bl	123b4 <free@plt>
   1b680:	ldr	r0, [sp, #4]
   1b684:	movw	lr, #0
   1b688:	and	r1, lr, #255	; 0xff
   1b68c:	movw	r2, #36	; 0x24
   1b690:	bl	12420 <memset@plt>
   1b694:	mov	sp, fp
   1b698:	pop	{fp, pc}

0001b69c <flatcc_emitter@@Base>:
   1b69c:	push	{fp, lr}
   1b6a0:	mov	fp, sp
   1b6a4:	sub	sp, sp, #32
   1b6a8:	ldr	ip, [fp, #8]
   1b6ac:	str	r0, [fp, #-8]
   1b6b0:	str	r1, [fp, #-12]
   1b6b4:	str	r2, [sp, #16]
   1b6b8:	str	r3, [sp, #12]
   1b6bc:	ldr	r0, [fp, #-8]
   1b6c0:	str	r0, [sp, #8]
   1b6c4:	ldr	r0, [fp, #8]
   1b6c8:	ldr	r1, [sp, #8]
   1b6cc:	ldr	r2, [r1, #24]
   1b6d0:	add	r0, r2, r0
   1b6d4:	str	r0, [r1, #24]
   1b6d8:	ldr	r0, [sp, #12]
   1b6dc:	cmp	r0, #0
   1b6e0:	str	ip, [sp]
   1b6e4:	bge	1b7a8 <flatcc_emitter@@Base+0x10c>
   1b6e8:	ldr	r0, [fp, #8]
   1b6ec:	ldr	r1, [sp, #8]
   1b6f0:	ldr	r1, [r1, #12]
   1b6f4:	cmp	r0, r1
   1b6f8:	bhi	1b73c <flatcc_emitter@@Base+0xa0>
   1b6fc:	ldr	r0, [fp, #8]
   1b700:	ldr	r1, [sp, #8]
   1b704:	ldr	r2, [r1, #8]
   1b708:	movw	r3, #0
   1b70c:	sub	r0, r3, r0
   1b710:	add	r0, r2, r0
   1b714:	str	r0, [r1, #8]
   1b718:	ldr	r0, [fp, #8]
   1b71c:	ldr	r1, [sp, #8]
   1b720:	ldr	r2, [r1, #12]
   1b724:	sub	r0, r2, r0
   1b728:	str	r0, [r1, #12]
   1b72c:	ldr	r0, [sp, #8]
   1b730:	ldr	r0, [r0, #8]
   1b734:	str	r0, [sp, #4]
   1b738:	b	1b85c <flatcc_emitter@@Base+0x1c0>
   1b73c:	ldr	r0, [sp, #16]
   1b740:	ldr	r1, [fp, #-12]
   1b744:	add	r0, r1, r0, lsl #3
   1b748:	str	r0, [fp, #-12]
   1b74c:	ldr	r0, [sp, #16]
   1b750:	mvn	r1, #0
   1b754:	add	r1, r0, r1
   1b758:	str	r1, [sp, #16]
   1b75c:	cmp	r0, #0
   1b760:	beq	1b7a4 <flatcc_emitter@@Base+0x108>
   1b764:	ldr	r0, [fp, #-12]
   1b768:	mvn	r1, #7
   1b76c:	add	r0, r0, r1
   1b770:	str	r0, [fp, #-12]
   1b774:	ldr	r0, [sp, #8]
   1b778:	ldr	r1, [fp, #-12]
   1b77c:	ldr	r1, [r1]
   1b780:	ldr	r2, [fp, #-12]
   1b784:	ldr	r2, [r2, #4]
   1b788:	bl	1b8c8 <flatcc_emitter@@Base+0x22c>
   1b78c:	cmp	r0, #0
   1b790:	beq	1b7a0 <flatcc_emitter@@Base+0x104>
   1b794:	mvn	r0, #0
   1b798:	str	r0, [fp, #-4]
   1b79c:	b	1b8bc <flatcc_emitter@@Base+0x220>
   1b7a0:	b	1b74c <flatcc_emitter@@Base+0xb0>
   1b7a4:	b	1b850 <flatcc_emitter@@Base+0x1b4>
   1b7a8:	ldr	r0, [fp, #8]
   1b7ac:	ldr	r1, [sp, #8]
   1b7b0:	ldr	r1, [r1, #20]
   1b7b4:	cmp	r0, r1
   1b7b8:	bhi	1b7f4 <flatcc_emitter@@Base+0x158>
   1b7bc:	ldr	r0, [sp, #8]
   1b7c0:	ldr	r0, [r0, #16]
   1b7c4:	str	r0, [sp, #4]
   1b7c8:	ldr	r0, [fp, #8]
   1b7cc:	ldr	r1, [sp, #8]
   1b7d0:	ldr	r2, [r1, #16]
   1b7d4:	add	r0, r2, r0
   1b7d8:	str	r0, [r1, #16]
   1b7dc:	ldr	r0, [fp, #8]
   1b7e0:	ldr	r1, [sp, #8]
   1b7e4:	ldr	r2, [r1, #20]
   1b7e8:	sub	r0, r2, r0
   1b7ec:	str	r0, [r1, #20]
   1b7f0:	b	1b85c <flatcc_emitter@@Base+0x1c0>
   1b7f4:	b	1b7f8 <flatcc_emitter@@Base+0x15c>
   1b7f8:	ldr	r0, [sp, #16]
   1b7fc:	mvn	r1, #0
   1b800:	add	r1, r0, r1
   1b804:	str	r1, [sp, #16]
   1b808:	cmp	r0, #0
   1b80c:	beq	1b84c <flatcc_emitter@@Base+0x1b0>
   1b810:	ldr	r0, [sp, #8]
   1b814:	ldr	r1, [fp, #-12]
   1b818:	ldr	r1, [r1]
   1b81c:	ldr	r2, [fp, #-12]
   1b820:	ldr	r2, [r2, #4]
   1b824:	bl	1b9d4 <flatcc_emitter@@Base+0x338>
   1b828:	cmp	r0, #0
   1b82c:	beq	1b83c <flatcc_emitter@@Base+0x1a0>
   1b830:	mvn	r0, #0
   1b834:	str	r0, [fp, #-4]
   1b838:	b	1b8bc <flatcc_emitter@@Base+0x220>
   1b83c:	ldr	r0, [fp, #-12]
   1b840:	add	r0, r0, #8
   1b844:	str	r0, [fp, #-12]
   1b848:	b	1b7f8 <flatcc_emitter@@Base+0x15c>
   1b84c:	b	1b850 <flatcc_emitter@@Base+0x1b4>
   1b850:	movw	r0, #0
   1b854:	str	r0, [fp, #-4]
   1b858:	b	1b8bc <flatcc_emitter@@Base+0x220>
   1b85c:	b	1b860 <flatcc_emitter@@Base+0x1c4>
   1b860:	ldr	r0, [sp, #16]
   1b864:	mvn	r1, #0
   1b868:	add	r1, r0, r1
   1b86c:	str	r1, [sp, #16]
   1b870:	cmp	r0, #0
   1b874:	beq	1b8b4 <flatcc_emitter@@Base+0x218>
   1b878:	ldr	r0, [sp, #4]
   1b87c:	ldr	r1, [fp, #-12]
   1b880:	ldr	r1, [r1]
   1b884:	ldr	r2, [fp, #-12]
   1b888:	ldr	r2, [r2, #4]
   1b88c:	bl	123c0 <memcpy@plt>
   1b890:	ldr	r0, [fp, #-12]
   1b894:	ldr	r0, [r0, #4]
   1b898:	ldr	r1, [sp, #4]
   1b89c:	add	r0, r1, r0
   1b8a0:	str	r0, [sp, #4]
   1b8a4:	ldr	r0, [fp, #-12]
   1b8a8:	add	r0, r0, #8
   1b8ac:	str	r0, [fp, #-12]
   1b8b0:	b	1b860 <flatcc_emitter@@Base+0x1c4>
   1b8b4:	movw	r0, #0
   1b8b8:	str	r0, [fp, #-4]
   1b8bc:	ldr	r0, [fp, #-4]
   1b8c0:	mov	sp, fp
   1b8c4:	pop	{fp, pc}
   1b8c8:	push	{fp, lr}
   1b8cc:	mov	fp, sp
   1b8d0:	sub	sp, sp, #24
   1b8d4:	str	r0, [fp, #-8]
   1b8d8:	str	r1, [sp, #12]
   1b8dc:	str	r2, [sp, #8]
   1b8e0:	ldr	r0, [sp, #8]
   1b8e4:	ldr	r1, [sp, #12]
   1b8e8:	add	r0, r1, r0
   1b8ec:	str	r0, [sp, #12]
   1b8f0:	ldr	r0, [sp, #8]
   1b8f4:	cmp	r0, #0
   1b8f8:	beq	1b9c0 <flatcc_emitter@@Base+0x324>
   1b8fc:	ldr	r0, [sp, #8]
   1b900:	str	r0, [sp, #4]
   1b904:	ldr	r0, [sp, #4]
   1b908:	ldr	r1, [fp, #-8]
   1b90c:	ldr	r1, [r1, #12]
   1b910:	cmp	r0, r1
   1b914:	bls	1b954 <flatcc_emitter@@Base+0x2b8>
   1b918:	ldr	r0, [fp, #-8]
   1b91c:	ldr	r0, [r0, #12]
   1b920:	str	r0, [sp, #4]
   1b924:	ldr	r0, [sp, #4]
   1b928:	cmp	r0, #0
   1b92c:	bne	1b950 <flatcc_emitter@@Base+0x2b4>
   1b930:	ldr	r0, [fp, #-8]
   1b934:	bl	1bc10 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1b938:	cmp	r0, #0
   1b93c:	beq	1b94c <flatcc_emitter@@Base+0x2b0>
   1b940:	mvn	r0, #0
   1b944:	str	r0, [fp, #-4]
   1b948:	b	1b9c8 <flatcc_emitter@@Base+0x32c>
   1b94c:	b	1b8f0 <flatcc_emitter@@Base+0x254>
   1b950:	b	1b954 <flatcc_emitter@@Base+0x2b8>
   1b954:	ldr	r0, [sp, #4]
   1b958:	ldr	r1, [fp, #-8]
   1b95c:	ldr	r2, [r1, #8]
   1b960:	movw	r3, #0
   1b964:	sub	r0, r3, r0
   1b968:	add	r0, r2, r0
   1b96c:	str	r0, [r1, #8]
   1b970:	ldr	r0, [sp, #4]
   1b974:	ldr	r1, [fp, #-8]
   1b978:	ldr	r2, [r1, #12]
   1b97c:	sub	r0, r2, r0
   1b980:	str	r0, [r1, #12]
   1b984:	ldr	r0, [sp, #4]
   1b988:	ldr	r1, [sp, #12]
   1b98c:	sub	r0, r3, r0
   1b990:	add	r0, r1, r0
   1b994:	str	r0, [sp, #12]
   1b998:	ldr	r0, [sp, #4]
   1b99c:	ldr	r1, [sp, #8]
   1b9a0:	sub	r0, r1, r0
   1b9a4:	str	r0, [sp, #8]
   1b9a8:	ldr	r0, [fp, #-8]
   1b9ac:	ldr	r0, [r0, #8]
   1b9b0:	ldr	r1, [sp, #12]
   1b9b4:	ldr	r2, [sp, #4]
   1b9b8:	bl	123c0 <memcpy@plt>
   1b9bc:	b	1b8f0 <flatcc_emitter@@Base+0x254>
   1b9c0:	movw	r0, #0
   1b9c4:	str	r0, [fp, #-4]
   1b9c8:	ldr	r0, [fp, #-4]
   1b9cc:	mov	sp, fp
   1b9d0:	pop	{fp, pc}
   1b9d4:	push	{fp, lr}
   1b9d8:	mov	fp, sp
   1b9dc:	sub	sp, sp, #24
   1b9e0:	str	r0, [fp, #-8]
   1b9e4:	str	r1, [sp, #12]
   1b9e8:	str	r2, [sp, #8]
   1b9ec:	ldr	r0, [sp, #8]
   1b9f0:	cmp	r0, #0
   1b9f4:	beq	1bab0 <flatcc_emitter@@Base+0x414>
   1b9f8:	ldr	r0, [sp, #8]
   1b9fc:	str	r0, [sp, #4]
   1ba00:	ldr	r0, [sp, #4]
   1ba04:	ldr	r1, [fp, #-8]
   1ba08:	ldr	r1, [r1, #20]
   1ba0c:	cmp	r0, r1
   1ba10:	bls	1ba50 <flatcc_emitter@@Base+0x3b4>
   1ba14:	ldr	r0, [fp, #-8]
   1ba18:	ldr	r0, [r0, #20]
   1ba1c:	str	r0, [sp, #4]
   1ba20:	ldr	r0, [sp, #4]
   1ba24:	cmp	r0, #0
   1ba28:	bne	1ba4c <flatcc_emitter@@Base+0x3b0>
   1ba2c:	ldr	r0, [fp, #-8]
   1ba30:	bl	1be10 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1ba34:	cmp	r0, #0
   1ba38:	beq	1ba48 <flatcc_emitter@@Base+0x3ac>
   1ba3c:	mvn	r0, #0
   1ba40:	str	r0, [fp, #-4]
   1ba44:	b	1bab8 <flatcc_emitter@@Base+0x41c>
   1ba48:	b	1b9ec <flatcc_emitter@@Base+0x350>
   1ba4c:	b	1ba50 <flatcc_emitter@@Base+0x3b4>
   1ba50:	ldr	r0, [fp, #-8]
   1ba54:	ldr	r0, [r0, #16]
   1ba58:	ldr	r1, [sp, #12]
   1ba5c:	ldr	r2, [sp, #4]
   1ba60:	bl	123c0 <memcpy@plt>
   1ba64:	ldr	r0, [sp, #4]
   1ba68:	ldr	r1, [sp, #8]
   1ba6c:	sub	r0, r1, r0
   1ba70:	str	r0, [sp, #8]
   1ba74:	ldr	r0, [sp, #4]
   1ba78:	ldr	r1, [sp, #12]
   1ba7c:	add	r0, r1, r0
   1ba80:	str	r0, [sp, #12]
   1ba84:	ldr	r0, [sp, #4]
   1ba88:	ldr	r1, [fp, #-8]
   1ba8c:	ldr	r2, [r1, #16]
   1ba90:	add	r0, r2, r0
   1ba94:	str	r0, [r1, #16]
   1ba98:	ldr	r0, [sp, #4]
   1ba9c:	ldr	r1, [fp, #-8]
   1baa0:	ldr	r2, [r1, #20]
   1baa4:	sub	r0, r2, r0
   1baa8:	str	r0, [r1, #20]
   1baac:	b	1b9ec <flatcc_emitter@@Base+0x350>
   1bab0:	movw	r0, #0
   1bab4:	str	r0, [fp, #-4]
   1bab8:	ldr	r0, [fp, #-4]
   1babc:	mov	sp, fp
   1bac0:	pop	{fp, pc}

0001bac4 <flatcc_emitter_copy_buffer@@Base>:
   1bac4:	push	{fp, lr}
   1bac8:	mov	fp, sp
   1bacc:	sub	sp, sp, #24
   1bad0:	str	r0, [fp, #-8]
   1bad4:	str	r1, [sp, #12]
   1bad8:	str	r2, [sp, #8]
   1badc:	ldr	r0, [sp, #8]
   1bae0:	ldr	r1, [fp, #-8]
   1bae4:	ldr	r1, [r1, #24]
   1bae8:	cmp	r0, r1
   1baec:	bcs	1bafc <flatcc_emitter_copy_buffer@@Base+0x38>
   1baf0:	movw	r0, #0
   1baf4:	str	r0, [fp, #-4]
   1baf8:	b	1bc04 <flatcc_emitter_copy_buffer@@Base+0x140>
   1bafc:	ldr	r0, [fp, #-8]
   1bb00:	ldr	r0, [r0]
   1bb04:	movw	r1, #0
   1bb08:	cmp	r0, r1
   1bb0c:	bne	1bb1c <flatcc_emitter_copy_buffer@@Base+0x58>
   1bb10:	movw	r0, #0
   1bb14:	str	r0, [fp, #-4]
   1bb18:	b	1bc04 <flatcc_emitter_copy_buffer@@Base+0x140>
   1bb1c:	ldr	r0, [fp, #-8]
   1bb20:	ldr	r0, [r0]
   1bb24:	ldr	r1, [fp, #-8]
   1bb28:	ldr	r1, [r1, #4]
   1bb2c:	cmp	r0, r1
   1bb30:	bne	1bb58 <flatcc_emitter_copy_buffer@@Base+0x94>
   1bb34:	ldr	r0, [sp, #12]
   1bb38:	ldr	r1, [fp, #-8]
   1bb3c:	ldr	r1, [r1, #8]
   1bb40:	ldr	r2, [fp, #-8]
   1bb44:	ldr	r2, [r2, #24]
   1bb48:	bl	123c0 <memcpy@plt>
   1bb4c:	ldr	r0, [sp, #12]
   1bb50:	str	r0, [fp, #-4]
   1bb54:	b	1bc04 <flatcc_emitter_copy_buffer@@Base+0x140>
   1bb58:	ldr	r0, [fp, #-8]
   1bb5c:	ldr	r0, [r0, #12]
   1bb60:	movw	r1, #2944	; 0xb80
   1bb64:	sub	r0, r1, r0
   1bb68:	str	r0, [sp]
   1bb6c:	ldr	r0, [sp, #12]
   1bb70:	ldr	r1, [fp, #-8]
   1bb74:	ldr	r1, [r1, #8]
   1bb78:	ldr	r2, [sp]
   1bb7c:	bl	123c0 <memcpy@plt>
   1bb80:	ldr	r0, [sp, #12]
   1bb84:	ldr	r1, [sp]
   1bb88:	add	r0, r0, r1
   1bb8c:	str	r0, [sp, #12]
   1bb90:	ldr	r0, [fp, #-8]
   1bb94:	ldr	r0, [r0]
   1bb98:	ldr	r0, [r0, #2944]	; 0xb80
   1bb9c:	str	r0, [sp, #4]
   1bba0:	ldr	r0, [sp, #4]
   1bba4:	ldr	r1, [fp, #-8]
   1bba8:	ldr	r1, [r1, #4]
   1bbac:	cmp	r0, r1
   1bbb0:	beq	1bbe0 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1bbb4:	ldr	r0, [sp, #12]
   1bbb8:	ldr	r1, [sp, #4]
   1bbbc:	movw	r2, #2944	; 0xb80
   1bbc0:	bl	123c0 <memcpy@plt>
   1bbc4:	ldr	r0, [sp, #12]
   1bbc8:	add	r0, r0, #2944	; 0xb80
   1bbcc:	str	r0, [sp, #12]
   1bbd0:	ldr	r0, [sp, #4]
   1bbd4:	ldr	r0, [r0, #2944]	; 0xb80
   1bbd8:	str	r0, [sp, #4]
   1bbdc:	b	1bba0 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1bbe0:	ldr	r0, [sp, #12]
   1bbe4:	ldr	r1, [sp, #4]
   1bbe8:	ldr	r2, [fp, #-8]
   1bbec:	ldr	r2, [r2, #20]
   1bbf0:	movw	r3, #2944	; 0xb80
   1bbf4:	sub	r2, r3, r2
   1bbf8:	bl	123c0 <memcpy@plt>
   1bbfc:	ldr	r0, [sp, #12]
   1bc00:	str	r0, [fp, #-4]
   1bc04:	ldr	r0, [fp, #-4]
   1bc08:	mov	sp, fp
   1bc0c:	pop	{fp, pc}
   1bc10:	push	{fp, lr}
   1bc14:	mov	fp, sp
   1bc18:	sub	sp, sp, #16
   1bc1c:	str	r0, [sp, #8]
   1bc20:	movw	r0, #0
   1bc24:	str	r0, [sp, #4]
   1bc28:	ldr	r1, [sp, #8]
   1bc2c:	ldr	r1, [r1]
   1bc30:	cmp	r1, r0
   1bc34:	beq	1bc8c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1bc38:	ldr	r0, [sp, #8]
   1bc3c:	ldr	r0, [r0]
   1bc40:	ldr	r0, [r0, #2948]	; 0xb84
   1bc44:	ldr	r1, [sp, #8]
   1bc48:	ldr	r1, [r1, #4]
   1bc4c:	cmp	r0, r1
   1bc50:	beq	1bc8c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1bc54:	ldr	r0, [sp, #8]
   1bc58:	ldr	r0, [r0]
   1bc5c:	ldr	r0, [r0, #2952]	; 0xb88
   1bc60:	sub	r0, r0, #2944	; 0xb80
   1bc64:	ldr	r1, [sp, #8]
   1bc68:	ldr	r1, [r1]
   1bc6c:	ldr	r1, [r1, #2948]	; 0xb84
   1bc70:	str	r0, [r1, #2952]	; 0xb88
   1bc74:	ldr	r0, [sp, #8]
   1bc78:	ldr	r0, [r0]
   1bc7c:	ldr	r0, [r0, #2948]	; 0xb84
   1bc80:	ldr	r1, [sp, #8]
   1bc84:	str	r0, [r1]
   1bc88:	b	1bdbc <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1bc8c:	movw	r0, #2956	; 0xb8c
   1bc90:	bl	123e4 <malloc@plt>
   1bc94:	str	r0, [sp, #4]
   1bc98:	movw	lr, #0
   1bc9c:	cmp	r0, lr
   1bca0:	bne	1bcb0 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1bca4:	mvn	r0, #0
   1bca8:	str	r0, [fp, #-4]
   1bcac:	b	1be04 <flatcc_emitter_copy_buffer@@Base+0x340>
   1bcb0:	ldr	r0, [sp, #8]
   1bcb4:	ldr	r1, [r0, #28]
   1bcb8:	add	r1, r1, #2944	; 0xb80
   1bcbc:	str	r1, [r0, #28]
   1bcc0:	ldr	r0, [sp, #8]
   1bcc4:	ldr	r0, [r0]
   1bcc8:	movw	r1, #0
   1bccc:	cmp	r0, r1
   1bcd0:	beq	1bd24 <flatcc_emitter_copy_buffer@@Base+0x260>
   1bcd4:	ldr	r0, [sp, #8]
   1bcd8:	ldr	r0, [r0, #4]
   1bcdc:	ldr	r1, [sp, #4]
   1bce0:	str	r0, [r1, #2948]	; 0xb84
   1bce4:	ldr	r0, [sp, #8]
   1bce8:	ldr	r0, [r0]
   1bcec:	ldr	r1, [sp, #4]
   1bcf0:	str	r0, [r1, #2944]	; 0xb80
   1bcf4:	ldr	r0, [sp, #4]
   1bcf8:	ldr	r1, [sp, #8]
   1bcfc:	ldr	r1, [r1]
   1bd00:	str	r0, [r1, #2948]	; 0xb84
   1bd04:	ldr	r0, [sp, #4]
   1bd08:	ldr	r1, [sp, #8]
   1bd0c:	ldr	r1, [r1, #4]
   1bd10:	str	r0, [r1, #2944]	; 0xb80
   1bd14:	ldr	r0, [sp, #4]
   1bd18:	ldr	r1, [sp, #8]
   1bd1c:	str	r0, [r1]
   1bd20:	b	1bdbc <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1bd24:	ldr	r0, [sp, #4]
   1bd28:	ldr	r1, [sp, #8]
   1bd2c:	str	r0, [r1]
   1bd30:	ldr	r0, [sp, #4]
   1bd34:	ldr	r1, [sp, #8]
   1bd38:	str	r0, [r1, #4]
   1bd3c:	ldr	r0, [sp, #4]
   1bd40:	ldr	r1, [sp, #4]
   1bd44:	str	r0, [r1, #2944]	; 0xb80
   1bd48:	ldr	r0, [sp, #4]
   1bd4c:	ldr	r1, [sp, #4]
   1bd50:	str	r0, [r1, #2948]	; 0xb84
   1bd54:	ldr	r0, [sp, #8]
   1bd58:	ldr	r0, [r0]
   1bd5c:	add	r0, r0, #1472	; 0x5c0
   1bd60:	ldr	r1, [sp, #8]
   1bd64:	str	r0, [r1, #8]
   1bd68:	ldr	r0, [sp, #8]
   1bd6c:	ldr	r0, [r0, #8]
   1bd70:	ldr	r1, [sp, #8]
   1bd74:	str	r0, [r1, #16]
   1bd78:	ldr	r0, [sp, #8]
   1bd7c:	movw	r1, #1472	; 0x5c0
   1bd80:	str	r1, [r0, #12]
   1bd84:	ldr	r0, [sp, #8]
   1bd88:	ldr	r0, [r0, #12]
   1bd8c:	movw	r1, #2944	; 0xb80
   1bd90:	sub	r0, r1, r0
   1bd94:	ldr	r1, [sp, #8]
   1bd98:	str	r0, [r1, #20]
   1bd9c:	ldr	r0, [sp, #8]
   1bda0:	ldr	r0, [r0, #12]
   1bda4:	movw	r1, #0
   1bda8:	sub	r0, r1, r0
   1bdac:	ldr	r2, [sp, #4]
   1bdb0:	str	r0, [r2, #2952]	; 0xb88
   1bdb4:	str	r1, [fp, #-4]
   1bdb8:	b	1be04 <flatcc_emitter_copy_buffer@@Base+0x340>
   1bdbc:	ldr	r0, [sp, #8]
   1bdc0:	ldr	r0, [r0]
   1bdc4:	add	r0, r0, #2944	; 0xb80
   1bdc8:	ldr	r1, [sp, #8]
   1bdcc:	str	r0, [r1, #8]
   1bdd0:	ldr	r0, [sp, #8]
   1bdd4:	movw	r1, #2944	; 0xb80
   1bdd8:	str	r1, [r0, #12]
   1bddc:	ldr	r0, [sp, #8]
   1bde0:	ldr	r0, [r0]
   1bde4:	ldr	r0, [r0, #2944]	; 0xb80
   1bde8:	ldr	r0, [r0, #2952]	; 0xb88
   1bdec:	sub	r0, r0, #2944	; 0xb80
   1bdf0:	ldr	r1, [sp, #8]
   1bdf4:	ldr	r1, [r1]
   1bdf8:	str	r0, [r1, #2952]	; 0xb88
   1bdfc:	movw	r0, #0
   1be00:	str	r0, [fp, #-4]
   1be04:	ldr	r0, [fp, #-4]
   1be08:	mov	sp, fp
   1be0c:	pop	{fp, pc}
   1be10:	push	{fp, lr}
   1be14:	mov	fp, sp
   1be18:	sub	sp, sp, #16
   1be1c:	str	r0, [sp, #8]
   1be20:	movw	r0, #0
   1be24:	str	r0, [sp, #4]
   1be28:	ldr	r1, [sp, #8]
   1be2c:	ldr	r1, [r1, #4]
   1be30:	cmp	r1, r0
   1be34:	beq	1be6c <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1be38:	ldr	r0, [sp, #8]
   1be3c:	ldr	r0, [r0, #4]
   1be40:	ldr	r0, [r0, #2944]	; 0xb80
   1be44:	ldr	r1, [sp, #8]
   1be48:	ldr	r1, [r1]
   1be4c:	cmp	r0, r1
   1be50:	beq	1be6c <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1be54:	ldr	r0, [sp, #8]
   1be58:	ldr	r0, [r0, #4]
   1be5c:	ldr	r0, [r0, #2944]	; 0xb80
   1be60:	ldr	r1, [sp, #8]
   1be64:	str	r0, [r1, #4]
   1be68:	b	1bf9c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1be6c:	movw	r0, #2956	; 0xb8c
   1be70:	bl	123e4 <malloc@plt>
   1be74:	str	r0, [sp, #4]
   1be78:	movw	lr, #0
   1be7c:	cmp	r0, lr
   1be80:	bne	1be90 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1be84:	mvn	r0, #0
   1be88:	str	r0, [fp, #-4]
   1be8c:	b	1bfe0 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1be90:	ldr	r0, [sp, #8]
   1be94:	ldr	r1, [r0, #28]
   1be98:	add	r1, r1, #2944	; 0xb80
   1be9c:	str	r1, [r0, #28]
   1bea0:	ldr	r0, [sp, #8]
   1bea4:	ldr	r0, [r0, #4]
   1bea8:	movw	r1, #0
   1beac:	cmp	r0, r1
   1beb0:	beq	1bf04 <flatcc_emitter_copy_buffer@@Base+0x440>
   1beb4:	ldr	r0, [sp, #8]
   1beb8:	ldr	r0, [r0, #4]
   1bebc:	ldr	r1, [sp, #4]
   1bec0:	str	r0, [r1, #2948]	; 0xb84
   1bec4:	ldr	r0, [sp, #8]
   1bec8:	ldr	r0, [r0]
   1becc:	ldr	r1, [sp, #4]
   1bed0:	str	r0, [r1, #2944]	; 0xb80
   1bed4:	ldr	r0, [sp, #4]
   1bed8:	ldr	r1, [sp, #8]
   1bedc:	ldr	r1, [r1]
   1bee0:	str	r0, [r1, #2948]	; 0xb84
   1bee4:	ldr	r0, [sp, #4]
   1bee8:	ldr	r1, [sp, #8]
   1beec:	ldr	r1, [r1, #4]
   1bef0:	str	r0, [r1, #2944]	; 0xb80
   1bef4:	ldr	r0, [sp, #4]
   1bef8:	ldr	r1, [sp, #8]
   1befc:	str	r0, [r1, #4]
   1bf00:	b	1bf9c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1bf04:	ldr	r0, [sp, #4]
   1bf08:	ldr	r1, [sp, #8]
   1bf0c:	str	r0, [r1]
   1bf10:	ldr	r0, [sp, #4]
   1bf14:	ldr	r1, [sp, #8]
   1bf18:	str	r0, [r1, #4]
   1bf1c:	ldr	r0, [sp, #4]
   1bf20:	ldr	r1, [sp, #4]
   1bf24:	str	r0, [r1, #2944]	; 0xb80
   1bf28:	ldr	r0, [sp, #4]
   1bf2c:	ldr	r1, [sp, #4]
   1bf30:	str	r0, [r1, #2948]	; 0xb84
   1bf34:	ldr	r0, [sp, #8]
   1bf38:	ldr	r0, [r0]
   1bf3c:	add	r0, r0, #1472	; 0x5c0
   1bf40:	ldr	r1, [sp, #8]
   1bf44:	str	r0, [r1, #8]
   1bf48:	ldr	r0, [sp, #8]
   1bf4c:	ldr	r0, [r0, #8]
   1bf50:	ldr	r1, [sp, #8]
   1bf54:	str	r0, [r1, #16]
   1bf58:	ldr	r0, [sp, #8]
   1bf5c:	movw	r1, #1472	; 0x5c0
   1bf60:	str	r1, [r0, #12]
   1bf64:	ldr	r0, [sp, #8]
   1bf68:	ldr	r0, [r0, #12]
   1bf6c:	movw	r1, #2944	; 0xb80
   1bf70:	sub	r0, r1, r0
   1bf74:	ldr	r1, [sp, #8]
   1bf78:	str	r0, [r1, #20]
   1bf7c:	ldr	r0, [sp, #8]
   1bf80:	ldr	r0, [r0, #12]
   1bf84:	movw	r1, #0
   1bf88:	sub	r0, r1, r0
   1bf8c:	ldr	r2, [sp, #4]
   1bf90:	str	r0, [r2, #2952]	; 0xb88
   1bf94:	str	r1, [fp, #-4]
   1bf98:	b	1bfe0 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1bf9c:	ldr	r0, [sp, #8]
   1bfa0:	ldr	r0, [r0, #4]
   1bfa4:	ldr	r1, [sp, #8]
   1bfa8:	str	r0, [r1, #16]
   1bfac:	ldr	r0, [sp, #8]
   1bfb0:	movw	r1, #2944	; 0xb80
   1bfb4:	str	r1, [r0, #20]
   1bfb8:	ldr	r0, [sp, #8]
   1bfbc:	ldr	r0, [r0, #4]
   1bfc0:	ldr	r0, [r0, #2948]	; 0xb84
   1bfc4:	ldr	r0, [r0, #2952]	; 0xb88
   1bfc8:	add	r0, r0, #2944	; 0xb80
   1bfcc:	ldr	r1, [sp, #8]
   1bfd0:	ldr	r1, [r1, #4]
   1bfd4:	str	r0, [r1, #2952]	; 0xb88
   1bfd8:	movw	r0, #0
   1bfdc:	str	r0, [fp, #-4]
   1bfe0:	ldr	r0, [fp, #-4]
   1bfe4:	mov	sp, fp
   1bfe8:	pop	{fp, pc}

0001bfec <__libc_csu_init@@Base>:
   1bfec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bff0:	mov	r7, r0
   1bff4:	ldr	r6, [pc, #72]	; 1c044 <__libc_csu_init@@Base+0x58>
   1bff8:	ldr	r5, [pc, #72]	; 1c048 <__libc_csu_init@@Base+0x5c>
   1bffc:	add	r6, pc, r6
   1c000:	add	r5, pc, r5
   1c004:	sub	r6, r6, r5
   1c008:	mov	r8, r1
   1c00c:	mov	r9, r2
   1c010:	bl	1237c <strcmp@plt-0x20>
   1c014:	asrs	r6, r6, #2
   1c018:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c01c:	mov	r4, #0
   1c020:	add	r4, r4, #1
   1c024:	ldr	r3, [r5], #4
   1c028:	mov	r2, r9
   1c02c:	mov	r1, r8
   1c030:	mov	r0, r7
   1c034:	blx	r3
   1c038:	cmp	r6, r4
   1c03c:	bne	1c020 <__libc_csu_init@@Base+0x34>
   1c040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c044:	andeq	r1, r1, r8, lsl #30
   1c048:	andeq	r1, r1, r0, lsl #30

0001c04c <__libc_csu_fini@@Base>:
   1c04c:	bx	lr

Disassembly of section .fini:

0001c050 <.fini>:
   1c050:	push	{r3, lr}
   1c054:	pop	{r3, pc}
