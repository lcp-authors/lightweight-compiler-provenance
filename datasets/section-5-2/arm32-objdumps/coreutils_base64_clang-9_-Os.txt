
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r6, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <fputc_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <dcgettext@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <iswprint@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <lseek64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <__ctype_get_mb_cur_max@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__fpending@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <ferror_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <mbrtowc@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <error@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__gmon_start__@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <bcmp@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <strlen@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strchr@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <__errno_location@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__cxa_atexit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <memset@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <__printf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <fileno@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <__fprintf_chk@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <memchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <strtoimax@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <setlocale@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <strrchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <nl_langinfo@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <fopen64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <fread_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fputs@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fa0 <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:	andeq	r5, r1, r0, asr r6
   1113c:	andeq	r1, r1, r0, lsr #9
   11140:	strdeq	r5, [r1], -r0
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fb8 <__gmon_start__@plt>
   11160:	andeq	r5, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r7, r2, r8, lsr r1
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r7, r2, r8, lsr r1
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r7, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r8, r0
   11208:	cmp	r0, #0
   1120c:	bne	11460 <__assert_fail@plt+0x364>
   11210:	movw	r1, #22179	; 0x56a3
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f1c <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #29032	; 0x7168
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11030 <__printf_chk@plt>
   1123c:	movw	r1, #22209	; 0x56c1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f1c <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	mov	r0, #1
   11258:	mov	r2, #64	; 0x40
   1125c:	bl	11030 <__printf_chk@plt>
   11260:	movw	r1, #22999	; 0x59d7
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f1c <dcgettext@plt>
   11274:	movw	r9, #29012	; 0x7154
   11278:	movt	r9, #2
   1127c:	ldr	r1, [r9]
   11280:	bl	10e8c <fputs_unlocked@plt>
   11284:	movw	r1, #23055	; 0x5a0f
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10f1c <dcgettext@plt>
   11298:	ldr	r1, [r9]
   1129c:	bl	10e8c <fputs_unlocked@plt>
   112a0:	movw	r1, #22279	; 0x5707
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10f1c <dcgettext@plt>
   112b4:	ldr	r1, [r9]
   112b8:	bl	10e8c <fputs_unlocked@plt>
   112bc:	movw	r1, #22521	; 0x57f9
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10f1c <dcgettext@plt>
   112d0:	ldr	r1, [r9]
   112d4:	bl	10e8c <fputs_unlocked@plt>
   112d8:	movw	r1, #22566	; 0x5826
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	movt	r1, #1
   112e8:	bl	10f1c <dcgettext@plt>
   112ec:	ldr	r1, [r9]
   112f0:	bl	10e8c <fputs_unlocked@plt>
   112f4:	movw	r1, #22620	; 0x585c
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10f1c <dcgettext@plt>
   11308:	movw	r5, #22888	; 0x5968
   1130c:	mov	r1, r0
   11310:	mov	r0, #1
   11314:	movt	r5, #1
   11318:	mov	r2, r5
   1131c:	mov	r3, r5
   11320:	bl	11030 <__printf_chk@plt>
   11324:	movw	ip, #23640	; 0x5c58
   11328:	mov	r6, sp
   1132c:	movt	ip, #1
   11330:	mov	r1, r6
   11334:	ldm	ip!, {r2, r3, r4, r7}
   11338:	stmia	r1!, {r2, r3, r4, r7}
   1133c:	ldm	ip!, {r0, r2, r3, r4, r7}
   11340:	stmia	r1!, {r0, r2, r3, r4, r7}
   11344:	ldm	ip, {r0, r2, r3, r4, r7}
   11348:	stm	r1, {r0, r2, r3, r4, r7}
   1134c:	movw	r1, #23130	; 0x5a5a
   11350:	movt	r1, #1
   11354:	mov	r0, r5
   11358:	bl	10ea4 <strcmp@plt>
   1135c:	cmp	r0, #0
   11360:	ldrne	r1, [r6, #8]!
   11364:	cmpne	r1, #0
   11368:	bne	11354 <__assert_fail@plt+0x258>
   1136c:	movw	r1, #23225	; 0x5ab9
   11370:	ldr	r6, [r6, #4]
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	movt	r1, #1
   11380:	bl	10f1c <dcgettext@plt>
   11384:	movw	r2, #22949	; 0x59a5
   11388:	movw	r3, #23248	; 0x5ad0
   1138c:	mov	r1, r0
   11390:	mov	r0, #1
   11394:	movt	r2, #1
   11398:	movt	r3, #1
   1139c:	bl	11030 <__printf_chk@plt>
   113a0:	cmp	r6, #0
   113a4:	mov	r0, #5
   113a8:	mov	r1, #0
   113ac:	moveq	r6, r5
   113b0:	bl	11084 <setlocale@plt>
   113b4:	cmp	r0, #0
   113b8:	beq	113f0 <__assert_fail@plt+0x2f4>
   113bc:	movw	r1, #23288	; 0x5af8
   113c0:	mov	r2, #3
   113c4:	movt	r1, #1
   113c8:	bl	110d8 <strncmp@plt>
   113cc:	cmp	r0, #0
   113d0:	beq	113f0 <__assert_fail@plt+0x2f4>
   113d4:	movw	r1, #23292	; 0x5afc
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	movt	r1, #1
   113e4:	bl	10f1c <dcgettext@plt>
   113e8:	ldr	r1, [r9]
   113ec:	bl	10e8c <fputs_unlocked@plt>
   113f0:	movw	r1, #23363	; 0x5b43
   113f4:	mov	r0, #0
   113f8:	mov	r2, #5
   113fc:	movt	r1, #1
   11400:	bl	10f1c <dcgettext@plt>
   11404:	movw	r2, #23248	; 0x5ad0
   11408:	mov	r1, r0
   1140c:	mov	r0, #1
   11410:	mov	r3, r5
   11414:	movt	r2, #1
   11418:	bl	11030 <__printf_chk@plt>
   1141c:	movw	r1, #23390	; 0x5b5e
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	movt	r1, #1
   1142c:	bl	10f1c <dcgettext@plt>
   11430:	mov	r1, r0
   11434:	movw	r0, #23158	; 0x5a76
   11438:	movw	r3, #23440	; 0x5b90
   1143c:	cmp	r6, r5
   11440:	mov	r2, r6
   11444:	movt	r0, #1
   11448:	movt	r3, #1
   1144c:	moveq	r3, r0
   11450:	mov	r0, #1
   11454:	bl	11030 <__printf_chk@plt>
   11458:	mov	r0, r8
   1145c:	bl	10fdc <exit@plt>
   11460:	movw	r0, #29000	; 0x7148
   11464:	movw	r1, #22140	; 0x567c
   11468:	mov	r2, #5
   1146c:	movt	r0, #2
   11470:	movt	r1, #1
   11474:	ldr	r5, [r0]
   11478:	mov	r0, #0
   1147c:	bl	10f1c <dcgettext@plt>
   11480:	mov	r2, r0
   11484:	movw	r0, #29032	; 0x7168
   11488:	mov	r1, #1
   1148c:	movt	r0, #2
   11490:	ldr	r3, [r0]
   11494:	mov	r0, r5
   11498:	bl	11048 <__fprintf_chk@plt>
   1149c:	b	11458 <__assert_fail@plt+0x35c>
   114a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a4:	add	fp, sp, #28
   114a8:	sub	sp, sp, #28
   114ac:	mov	r5, r0
   114b0:	ldr	r0, [r1]
   114b4:	mov	r4, r1
   114b8:	bl	12600 <__assert_fail@plt+0x1504>
   114bc:	movw	r1, #23440	; 0x5b90
   114c0:	mov	r0, #6
   114c4:	movt	r1, #1
   114c8:	bl	11084 <setlocale@plt>
   114cc:	movw	r6, #22953	; 0x59a9
   114d0:	movw	r1, #22895	; 0x596f
   114d4:	movt	r6, #1
   114d8:	movt	r1, #1
   114dc:	mov	r0, r6
   114e0:	bl	110b4 <bindtextdomain@plt>
   114e4:	mov	r0, r6
   114e8:	bl	10f34 <textdomain@plt>
   114ec:	movw	r0, #8980	; 0x2314
   114f0:	movt	r0, #1
   114f4:	bl	15654 <__assert_fail@plt+0x4558>
   114f8:	movw	r9, #22919	; 0x5987
   114fc:	movw	r7, #23544	; 0x5bf8
   11500:	mov	r6, #76	; 0x4c
   11504:	mov	r8, #0
   11508:	mov	sl, #0
   1150c:	mov	r0, #0
   11510:	movt	r9, #1
   11514:	movt	r7, #1
   11518:	str	r0, [sp, #12]
   1151c:	mov	r0, r5
   11520:	mov	r1, r4
   11524:	mov	r2, r9
   11528:	mov	r3, r7
   1152c:	str	r8, [sp]
   11530:	bl	10fc4 <getopt_long@plt>
   11534:	cmp	r0, #99	; 0x63
   11538:	ble	115c0 <__assert_fail@plt+0x4c4>
   1153c:	cmp	r0, #100	; 0x64
   11540:	beq	115b0 <__assert_fail@plt+0x4b4>
   11544:	cmp	r0, #105	; 0x69
   11548:	beq	115b8 <__assert_fail@plt+0x4bc>
   1154c:	cmp	r0, #119	; 0x77
   11550:	bne	1167c <__assert_fail@plt+0x580>
   11554:	movw	r0, #29016	; 0x7158
   11558:	movw	r1, #23440	; 0x5b90
   1155c:	mov	r2, #10
   11560:	add	r3, sp, #16
   11564:	movt	r0, #2
   11568:	movt	r1, #1
   1156c:	ldr	r0, [r0]
   11570:	str	r1, [sp]
   11574:	mov	r1, #0
   11578:	bl	14a68 <__assert_fail@plt+0x396c>
   1157c:	cmp	r0, #1
   11580:	bhi	11754 <__assert_fail@plt+0x658>
   11584:	ldr	r1, [sp, #20]
   11588:	cmn	r1, #1
   1158c:	ble	11754 <__assert_fail@plt+0x658>
   11590:	ldr	r2, [sp, #16]
   11594:	mvn	r3, #-2147483648	; 0x80000000
   11598:	subs	r3, r3, r2
   1159c:	rscs	r1, r1, #0
   115a0:	movwlt	r2, #0
   115a4:	subs	r6, r0, #1
   115a8:	movne	r6, r2
   115ac:	b	1151c <__assert_fail@plt+0x420>
   115b0:	mov	sl, #1
   115b4:	b	1151c <__assert_fail@plt+0x420>
   115b8:	mov	r0, #1
   115bc:	b	11518 <__assert_fail@plt+0x41c>
   115c0:	cmn	r0, #3
   115c4:	beq	115d8 <__assert_fail@plt+0x4dc>
   115c8:	cmn	r0, #2
   115cc:	bne	11620 <__assert_fail@plt+0x524>
   115d0:	mov	r0, #0
   115d4:	bl	111f8 <__assert_fail@plt+0xfc>
   115d8:	movw	r0, #28912	; 0x70f0
   115dc:	movw	r2, #22963	; 0x59b3
   115e0:	mov	r1, #0
   115e4:	movt	r0, #2
   115e8:	movt	r2, #1
   115ec:	str	r1, [sp, #4]
   115f0:	movw	r1, #22888	; 0x5968
   115f4:	movt	r1, #1
   115f8:	ldr	r3, [r0]
   115fc:	movw	r0, #29012	; 0x7154
   11600:	str	r2, [sp]
   11604:	movw	r2, #22949	; 0x59a5
   11608:	movt	r0, #2
   1160c:	movt	r2, #1
   11610:	ldr	r0, [r0]
   11614:	bl	144f0 <__assert_fail@plt+0x33f4>
   11618:	mov	r0, #0
   1161c:	bl	10fdc <exit@plt>
   11620:	cmn	r0, #1
   11624:	bne	1167c <__assert_fail@plt+0x580>
   11628:	movw	r7, #28992	; 0x7140
   1162c:	movt	r7, #2
   11630:	ldr	r0, [r7]
   11634:	sub	r1, r5, r0
   11638:	cmp	r1, #2
   1163c:	blt	11684 <__assert_fail@plt+0x588>
   11640:	movw	r1, #22979	; 0x59c3
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #1
   11650:	bl	10f1c <dcgettext@plt>
   11654:	mov	r5, r0
   11658:	ldr	r0, [r7]
   1165c:	add	r0, r4, r0, lsl #2
   11660:	ldr	r0, [r0, #4]
   11664:	bl	13fec <__assert_fail@plt+0x2ef0>
   11668:	mov	r3, r0
   1166c:	mov	r0, #0
   11670:	mov	r1, #0
   11674:	mov	r2, r5
   11678:	bl	10f88 <error@plt>
   1167c:	mov	r0, #1
   11680:	bl	111f8 <__assert_fail@plt+0xfc>
   11684:	cmp	r0, r5
   11688:	bge	11694 <__assert_fail@plt+0x598>
   1168c:	ldr	r4, [r4, r0, lsl #2]
   11690:	b	1169c <__assert_fail@plt+0x5a0>
   11694:	movw	r4, #24097	; 0x5e21
   11698:	movt	r4, #1
   1169c:	movw	r1, #24097	; 0x5e21
   116a0:	mov	r0, r4
   116a4:	movt	r1, #1
   116a8:	bl	10ea4 <strcmp@plt>
   116ac:	cmp	r0, #0
   116b0:	bne	116c4 <__assert_fail@plt+0x5c8>
   116b4:	movw	r0, #29008	; 0x7150
   116b8:	movt	r0, #2
   116bc:	ldr	r5, [r0]
   116c0:	b	11710 <__assert_fail@plt+0x614>
   116c4:	movw	r1, #22996	; 0x59d4
   116c8:	mov	r0, r4
   116cc:	movt	r1, #1
   116d0:	bl	110a8 <fopen64@plt>
   116d4:	mov	r5, r0
   116d8:	cmp	r0, #0
   116dc:	bne	11710 <__assert_fail@plt+0x614>
   116e0:	bl	1100c <__errno_location@plt>
   116e4:	ldr	r5, [r0]
   116e8:	mov	r0, #0
   116ec:	mov	r1, #3
   116f0:	mov	r2, r4
   116f4:	bl	13e58 <__assert_fail@plt+0x2d5c>
   116f8:	movw	r2, #22928	; 0x5990
   116fc:	mov	r3, r0
   11700:	mov	r0, #1
   11704:	mov	r1, r5
   11708:	movt	r2, #1
   1170c:	bl	10f88 <error@plt>
   11710:	mov	r0, r5
   11714:	mov	r1, #2
   11718:	bl	12400 <__assert_fail@plt+0x1304>
   1171c:	movw	r0, #29012	; 0x7154
   11720:	tst	sl, #1
   11724:	movt	r0, #2
   11728:	ldr	r2, [r0]
   1172c:	beq	11744 <__assert_fail@plt+0x648>
   11730:	ldr	r0, [sp, #12]
   11734:	mov	r1, r4
   11738:	and	r3, r0, #1
   1173c:	mov	r0, r5
   11740:	bl	11798 <__assert_fail@plt+0x69c>
   11744:	mov	r0, r5
   11748:	mov	r1, r4
   1174c:	mov	r3, r6
   11750:	bl	119a4 <__assert_fail@plt+0x8a8>
   11754:	movw	r1, #22931	; 0x5993
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	10f1c <dcgettext@plt>
   11768:	mov	r4, r0
   1176c:	movw	r0, #29016	; 0x7158
   11770:	movt	r0, #2
   11774:	ldr	r0, [r0]
   11778:	bl	13fec <__assert_fail@plt+0x2ef0>
   1177c:	movw	r2, #22924	; 0x598c
   11780:	str	r0, [sp]
   11784:	mov	r0, #1
   11788:	mov	r1, #0
   1178c:	mov	r3, r4
   11790:	movt	r2, #1
   11794:	bl	10f88 <error@plt>
   11798:	push	{fp, lr}
   1179c:	mov	fp, sp
   117a0:	sub	sp, sp, #32
   117a4:	mov	r8, r0
   117a8:	mov	r0, #4096	; 0x1000
   117ac:	stmib	sp, {r1, r2, r3}
   117b0:	bl	145f8 <__assert_fail@plt+0x34fc>
   117b4:	mov	r4, r0
   117b8:	mov	r0, #3072	; 0xc00
   117bc:	bl	145f8 <__assert_fail@plt+0x34fc>
   117c0:	mov	r9, r0
   117c4:	sub	r0, fp, #8
   117c8:	bl	11eac <__assert_fail@plt+0xdb0>
   117cc:	mov	sl, #0
   117d0:	str	r8, [sp, #16]
   117d4:	add	r5, r4, sl
   117d8:	rsb	r2, sl, #4096	; 0x1000
   117dc:	mov	r1, #1
   117e0:	mov	r3, r8
   117e4:	mov	r0, r5
   117e8:	bl	110c0 <fread_unlocked@plt>
   117ec:	mov	r8, r0
   117f0:	cmp	r0, #1
   117f4:	blt	11854 <__assert_fail@plt+0x758>
   117f8:	ldr	r0, [sp, #12]
   117fc:	cmp	r0, #0
   11800:	beq	11854 <__assert_fail@plt+0x758>
   11804:	mov	r6, #0
   11808:	add	r0, r6, sl
   1180c:	ldrb	r7, [r4, r0]
   11810:	mov	r0, r7
   11814:	bl	11e8c <__assert_fail@plt+0xd90>
   11818:	cmp	r0, #0
   1181c:	bne	11840 <__assert_fail@plt+0x744>
   11820:	cmp	r7, #61	; 0x3d
   11824:	beq	11840 <__assert_fail@plt+0x744>
   11828:	sub	r8, r8, #1
   1182c:	add	r0, r5, r6
   11830:	sub	r2, r8, r6
   11834:	add	r1, r0, #1
   11838:	bl	10ec8 <memmove@plt>
   1183c:	b	11844 <__assert_fail@plt+0x748>
   11840:	add	r6, r6, #1
   11844:	cmp	r8, #1
   11848:	blt	11854 <__assert_fail@plt+0x758>
   1184c:	cmp	r6, r8
   11850:	blt	11808 <__assert_fail@plt+0x70c>
   11854:	ldr	r0, [sp, #16]
   11858:	bl	10f70 <ferror_unlocked@plt>
   1185c:	cmp	r0, #0
   11860:	bne	11990 <__assert_fail@plt+0x894>
   11864:	add	sl, r8, sl
   11868:	ldr	r8, [sp, #16]
   1186c:	cmp	sl, #4096	; 0x1000
   11870:	bge	11884 <__assert_fail@plt+0x788>
   11874:	mov	r0, r8
   11878:	bl	110f0 <feof_unlocked@plt>
   1187c:	cmp	r0, #0
   11880:	beq	117d4 <__assert_fail@plt+0x6d8>
   11884:	mov	r0, r8
   11888:	bl	110f0 <feof_unlocked@plt>
   1188c:	ldr	r5, [sp, #8]
   11890:	mov	r6, #0
   11894:	cmp	r6, #1
   11898:	bne	118a8 <__assert_fail@plt+0x7ac>
   1189c:	ldr	r0, [fp, #-8]
   118a0:	cmp	r0, #0
   118a4:	beq	11920 <__assert_fail@plt+0x824>
   118a8:	mov	r0, #3072	; 0xc00
   118ac:	cmp	r6, #0
   118b0:	mov	r2, #0
   118b4:	mov	r1, r4
   118b8:	mov	r3, r9
   118bc:	str	r0, [fp, #-12]
   118c0:	sub	r0, fp, #12
   118c4:	moveq	r2, sl
   118c8:	str	r0, [sp]
   118cc:	sub	r0, fp, #8
   118d0:	bl	11eb8 <__assert_fail@plt+0xdbc>
   118d4:	ldr	r2, [fp, #-12]
   118d8:	mov	r7, r0
   118dc:	mov	r0, r9
   118e0:	mov	r1, #1
   118e4:	mov	r3, r5
   118e8:	bl	10f04 <fwrite_unlocked@plt>
   118ec:	ldr	r1, [fp, #-12]
   118f0:	cmp	r0, r1
   118f4:	bcc	11940 <__assert_fail@plt+0x844>
   118f8:	cmp	r7, #0
   118fc:	beq	1196c <__assert_fail@plt+0x870>
   11900:	mov	r0, r8
   11904:	bl	110f0 <feof_unlocked@plt>
   11908:	cmp	r0, #0
   1190c:	mov	r0, #2
   11910:	add	r6, r6, #1
   11914:	movweq	r0, #1
   11918:	cmp	r6, r0
   1191c:	bcc	11894 <__assert_fail@plt+0x798>
   11920:	mov	r0, r8
   11924:	bl	110f0 <feof_unlocked@plt>
   11928:	mov	sl, #0
   1192c:	cmp	r0, #0
   11930:	beq	117d4 <__assert_fail@plt+0x6d8>
   11934:	ldr	r1, [sp, #4]
   11938:	mov	r0, r8
   1193c:	bl	11ba8 <__assert_fail@plt+0xaac>
   11940:	bl	1100c <__errno_location@plt>
   11944:	ldr	r4, [r0]
   11948:	movw	r1, #23492	; 0x5bc4
   1194c:	movt	r1, #1
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	bl	10f1c <dcgettext@plt>
   1195c:	mov	r2, r0
   11960:	mov	r0, #1
   11964:	mov	r1, r4
   11968:	bl	10f88 <error@plt>
   1196c:	movw	r1, #23504	; 0x5bd0
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	movt	r1, #1
   1197c:	bl	10f1c <dcgettext@plt>
   11980:	mov	r2, r0
   11984:	mov	r0, #1
   11988:	mov	r1, #0
   1198c:	bl	10f88 <error@plt>
   11990:	bl	1100c <__errno_location@plt>
   11994:	ldr	r4, [r0]
   11998:	movw	r1, #23481	; 0x5bb9
   1199c:	movt	r1, #1
   119a0:	b	11950 <__assert_fail@plt+0x854>
   119a4:	push	{fp, lr}
   119a8:	mov	fp, sp
   119ac:	sub	sp, sp, #16
   119b0:	mov	r5, r0
   119b4:	mov	r0, #30720	; 0x7800
   119b8:	str	r3, [fp, #-4]
   119bc:	stm	sp, {r1, r2}
   119c0:	bl	145f8 <__assert_fail@plt+0x34fc>
   119c4:	mov	r4, r0
   119c8:	mov	r0, #40960	; 0xa000
   119cc:	bl	145f8 <__assert_fail@plt+0x34fc>
   119d0:	mov	r7, r0
   119d4:	mov	sl, #0
   119d8:	str	r0, [sp, #8]
   119dc:	mov	r6, #0
   119e0:	add	r0, r4, r6
   119e4:	rsb	r2, r6, #30720	; 0x7800
   119e8:	mov	r1, #1
   119ec:	mov	r3, r5
   119f0:	bl	110c0 <fread_unlocked@plt>
   119f4:	add	r6, r0, r6
   119f8:	mov	r0, r5
   119fc:	bl	110f0 <feof_unlocked@plt>
   11a00:	cmp	r0, #0
   11a04:	bne	11a20 <__assert_fail@plt+0x924>
   11a08:	mov	r0, r5
   11a0c:	bl	10f70 <ferror_unlocked@plt>
   11a10:	cmp	r6, #30720	; 0x7800
   11a14:	bge	11a20 <__assert_fail@plt+0x924>
   11a18:	cmp	r0, #0
   11a1c:	beq	119e0 <__assert_fail@plt+0x8e4>
   11a20:	cmp	r6, #1
   11a24:	blt	11afc <__assert_fail@plt+0xa00>
   11a28:	movw	r1, #21846	; 0x5556
   11a2c:	add	r0, r6, #2
   11a30:	mov	r2, r7
   11a34:	movt	r1, #21845	; 0x5555
   11a38:	smmul	r0, r0, r1
   11a3c:	mov	r1, r6
   11a40:	add	r0, r0, r0, lsr #31
   11a44:	lsl	r8, r0, #2
   11a48:	mov	r0, r4
   11a4c:	mov	r3, r8
   11a50:	bl	11c38 <__assert_fail@plt+0xb3c>
   11a54:	ldr	r0, [fp, #-4]
   11a58:	cmp	r0, #0
   11a5c:	beq	11ad8 <__assert_fail@plt+0x9dc>
   11a60:	mov	r7, #0
   11a64:	ldr	r0, [fp, #-4]
   11a68:	sub	r9, r8, r7
   11a6c:	sub	r0, r0, sl
   11a70:	cmp	r0, r9
   11a74:	movlt	r9, r0
   11a78:	cmp	r9, #0
   11a7c:	beq	11ab4 <__assert_fail@plt+0x9b8>
   11a80:	movw	r1, #29012	; 0x7154
   11a84:	ldr	r0, [sp, #8]
   11a88:	mov	r2, r9
   11a8c:	movt	r1, #2
   11a90:	ldr	r3, [r1]
   11a94:	mov	r1, #1
   11a98:	add	r0, r0, r7
   11a9c:	bl	10f04 <fwrite_unlocked@plt>
   11aa0:	cmp	r0, r9
   11aa4:	bcc	11b4c <__assert_fail@plt+0xa50>
   11aa8:	add	r7, r9, r7
   11aac:	add	sl, r9, sl
   11ab0:	b	11acc <__assert_fail@plt+0x9d0>
   11ab4:	ldr	r1, [sp, #4]
   11ab8:	mov	r0, #10
   11abc:	bl	10f10 <fputc_unlocked@plt>
   11ac0:	mov	sl, #0
   11ac4:	cmn	r0, #1
   11ac8:	beq	11b4c <__assert_fail@plt+0xa50>
   11acc:	cmp	r7, r8
   11ad0:	blt	11a64 <__assert_fail@plt+0x968>
   11ad4:	b	11afc <__assert_fail@plt+0xa00>
   11ad8:	movw	r0, #29012	; 0x7154
   11adc:	mov	r1, #1
   11ae0:	mov	r2, r8
   11ae4:	movt	r0, #2
   11ae8:	ldr	r3, [r0]
   11aec:	mov	r0, r7
   11af0:	bl	10f04 <fwrite_unlocked@plt>
   11af4:	cmp	r0, r8
   11af8:	bcc	11b4c <__assert_fail@plt+0xa50>
   11afc:	mov	r0, r5
   11b00:	bl	110f0 <feof_unlocked@plt>
   11b04:	ldr	r7, [sp, #8]
   11b08:	cmp	r0, #0
   11b0c:	bne	11b24 <__assert_fail@plt+0xa28>
   11b10:	mov	r0, r5
   11b14:	bl	10f70 <ferror_unlocked@plt>
   11b18:	cmp	r6, #30720	; 0x7800
   11b1c:	cmpeq	r0, #0
   11b20:	beq	119dc <__assert_fail@plt+0x8e0>
   11b24:	ldr	r0, [fp, #-4]
   11b28:	cmp	r0, #0
   11b2c:	beq	11b78 <__assert_fail@plt+0xa7c>
   11b30:	cmp	sl, #1
   11b34:	blt	11b78 <__assert_fail@plt+0xa7c>
   11b38:	ldr	r1, [sp, #4]
   11b3c:	mov	r0, #10
   11b40:	bl	10f10 <fputc_unlocked@plt>
   11b44:	cmn	r0, #1
   11b48:	bne	11b78 <__assert_fail@plt+0xa7c>
   11b4c:	bl	1100c <__errno_location@plt>
   11b50:	ldr	r4, [r0]
   11b54:	movw	r1, #23492	; 0x5bc4
   11b58:	movt	r1, #1
   11b5c:	mov	r0, #0
   11b60:	mov	r2, #5
   11b64:	bl	10f1c <dcgettext@plt>
   11b68:	mov	r2, r0
   11b6c:	mov	r0, #1
   11b70:	mov	r1, r4
   11b74:	bl	10f88 <error@plt>
   11b78:	mov	r0, r5
   11b7c:	bl	10f70 <ferror_unlocked@plt>
   11b80:	cmp	r0, #0
   11b84:	bne	11b94 <__assert_fail@plt+0xa98>
   11b88:	ldr	r1, [sp]
   11b8c:	mov	r0, r5
   11b90:	bl	11ba8 <__assert_fail@plt+0xaac>
   11b94:	bl	1100c <__errno_location@plt>
   11b98:	ldr	r4, [r0]
   11b9c:	movw	r1, #23481	; 0x5bb9
   11ba0:	movt	r1, #1
   11ba4:	b	11b5c <__assert_fail@plt+0xa60>
   11ba8:	push	{fp, lr}
   11bac:	mov	fp, sp
   11bb0:	mov	r5, r1
   11bb4:	bl	1243c <__assert_fail@plt+0x1340>
   11bb8:	cmp	r0, #0
   11bbc:	bne	11bc8 <__assert_fail@plt+0xacc>
   11bc0:	mov	r0, #0
   11bc4:	bl	10fdc <exit@plt>
   11bc8:	movw	r1, #24097	; 0x5e21
   11bcc:	mov	r0, r5
   11bd0:	movt	r1, #1
   11bd4:	bl	10ea4 <strcmp@plt>
   11bd8:	mov	r6, r0
   11bdc:	bl	1100c <__errno_location@plt>
   11be0:	ldr	r4, [r0]
   11be4:	cmp	r6, #0
   11be8:	bne	11c10 <__assert_fail@plt+0xb14>
   11bec:	movw	r1, #23518	; 0x5bde
   11bf0:	mov	r0, #0
   11bf4:	mov	r2, #5
   11bf8:	movt	r1, #1
   11bfc:	bl	10f1c <dcgettext@plt>
   11c00:	mov	r2, r0
   11c04:	mov	r0, #1
   11c08:	mov	r1, r4
   11c0c:	bl	10f88 <error@plt>
   11c10:	mov	r0, #0
   11c14:	mov	r1, #3
   11c18:	mov	r2, r5
   11c1c:	bl	13e58 <__assert_fail@plt+0x2d5c>
   11c20:	movw	r2, #22928	; 0x5990
   11c24:	mov	r3, r0
   11c28:	mov	r0, #1
   11c2c:	mov	r1, r4
   11c30:	movt	r2, #1
   11c34:	bl	10f88 <error@plt>
   11c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c3c:	add	fp, sp, #28
   11c40:	tst	r3, #3
   11c44:	bne	11cbc <__assert_fail@plt+0xbc0>
   11c48:	asr	r7, r3, #2
   11c4c:	add	r7, r7, r7, lsl #1
   11c50:	cmp	r7, r1
   11c54:	bne	11cbc <__assert_fail@plt+0xbc0>
   11c58:	cmp	r1, #0
   11c5c:	beq	11cd8 <__assert_fail@plt+0xbdc>
   11c60:	movw	r3, #23711	; 0x5c9f
   11c64:	movt	r3, #1
   11c68:	ldrb	r7, [r0]
   11c6c:	subs	r1, r1, #3
   11c70:	ldrb	r6, [r3, r7, lsr #2]
   11c74:	strb	r6, [r2]
   11c78:	ldrb	r6, [r0, #1]
   11c7c:	lsr	r5, r6, #4
   11c80:	bfi	r5, r7, #4, #2
   11c84:	ldrb	r7, [r3, r5]
   11c88:	strb	r7, [r2, #1]
   11c8c:	ldrb	r7, [r0, #2]
   11c90:	add	r0, r0, #3
   11c94:	and	r5, r7, #63	; 0x3f
   11c98:	lsr	r7, r7, #6
   11c9c:	bfi	r7, r6, #2, #4
   11ca0:	ldrb	r5, [r3, r5]
   11ca4:	ldrb	r7, [r3, r7]
   11ca8:	strb	r5, [r2, #3]
   11cac:	strb	r7, [r2, #2]
   11cb0:	add	r2, r2, #4
   11cb4:	bne	11c68 <__assert_fail@plt+0xb6c>
   11cb8:	b	11cd8 <__assert_fail@plt+0xbdc>
   11cbc:	cmp	r1, #0
   11cc0:	cmpne	r3, #0
   11cc4:	bne	11cdc <__assert_fail@plt+0xbe0>
   11cc8:	cmp	r3, #0
   11ccc:	beq	11cd8 <__assert_fail@plt+0xbdc>
   11cd0:	mov	r0, #0
   11cd4:	strb	r0, [r2]
   11cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cdc:	movw	r6, #23711	; 0x5c9f
   11ce0:	add	r0, r0, #1
   11ce4:	sub	ip, r3, #3
   11ce8:	sub	lr, r3, #2
   11cec:	sub	sl, r3, #1
   11cf0:	sub	r9, r3, #4
   11cf4:	mov	r8, #0
   11cf8:	mov	r7, #0
   11cfc:	movt	r6, #1
   11d00:	ldrb	r3, [r0, #-1]
   11d04:	mov	r5, r2
   11d08:	cmp	sl, r7
   11d0c:	ldrb	r3, [r6, r3, lsr #2]
   11d10:	strb	r3, [r5, r7]!
   11d14:	beq	11cd8 <__assert_fail@plt+0xbdc>
   11d18:	cmp	r1, #1
   11d1c:	ldrb	r3, [r0, #-1]
   11d20:	mov	r4, #0
   11d24:	ldrbne	r4, [r0]
   11d28:	lsl	r3, r3, #4
   11d2c:	lsrne	r4, r4, #4
   11d30:	cmp	lr, r7
   11d34:	add	r3, r4, r3
   11d38:	and	r3, r3, #63	; 0x3f
   11d3c:	ldrb	r3, [r6, r3]
   11d40:	strb	r3, [r5, #1]
   11d44:	beq	11cd8 <__assert_fail@plt+0xbdc>
   11d48:	cmp	r1, #1
   11d4c:	beq	11d6c <__assert_fail@plt+0xc70>
   11d50:	ldrb	r3, [r0]
   11d54:	subs	r1, r1, #2
   11d58:	lsl	r3, r3, #2
   11d5c:	beq	11d78 <__assert_fail@plt+0xc7c>
   11d60:	ldrb	r4, [r0, #1]
   11d64:	lsr	r4, r4, #6
   11d68:	b	11d7c <__assert_fail@plt+0xc80>
   11d6c:	mov	r3, #61	; 0x3d
   11d70:	mov	r1, #0
   11d74:	b	11d88 <__assert_fail@plt+0xc8c>
   11d78:	mov	r4, #0
   11d7c:	add	r3, r4, r3
   11d80:	and	r3, r3, #63	; 0x3f
   11d84:	ldrb	r3, [r6, r3]
   11d88:	cmp	ip, r7
   11d8c:	strb	r3, [r5, #2]
   11d90:	beq	11cd8 <__assert_fail@plt+0xbdc>
   11d94:	cmp	r1, #0
   11d98:	beq	11dac <__assert_fail@plt+0xcb0>
   11d9c:	ldrb	r3, [r0, #1]
   11da0:	and	r3, r3, #63	; 0x3f
   11da4:	ldrb	r3, [r6, r3]
   11da8:	b	11db0 <__assert_fail@plt+0xcb4>
   11dac:	mov	r3, #61	; 0x3d
   11db0:	cmp	r9, r7
   11db4:	strb	r3, [r5, #3]
   11db8:	beq	11cd8 <__assert_fail@plt+0xbdc>
   11dbc:	subs	r1, r1, #1
   11dc0:	add	r7, r7, #4
   11dc4:	adc	r3, r8, #0
   11dc8:	cmp	r1, #0
   11dcc:	addne	r0, r0, #3
   11dd0:	cmpne	r3, #0
   11dd4:	bne	11d00 <__assert_fail@plt+0xc04>
   11dd8:	add	r2, r2, r7
   11ddc:	b	11cd0 <__assert_fail@plt+0xbd4>
   11de0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11de4:	add	fp, sp, #24
   11de8:	mov	r8, r0
   11dec:	movw	r0, #21846	; 0x5556
   11df0:	mov	r4, r1
   11df4:	mov	r6, r2
   11df8:	movt	r0, #21845	; 0x5555
   11dfc:	smmul	r0, r1, r0
   11e00:	add	r0, r0, r0, lsr #31
   11e04:	add	r1, r0, r0, lsl #1
   11e08:	subs	r1, r4, r1
   11e0c:	addne	r0, r0, #1
   11e10:	cmn	r0, #1
   11e14:	ble	11e24 <__assert_fail@plt+0xd28>
   11e18:	cmn	r0, #-536870911	; 0xe0000001
   11e1c:	ble	11e38 <__assert_fail@plt+0xd3c>
   11e20:	b	11e74 <__assert_fail@plt+0xd78>
   11e24:	beq	11e38 <__assert_fail@plt+0xd3c>
   11e28:	mov	r1, #-2147483648	; 0x80000000
   11e2c:	sdiv	r1, r1, r0
   11e30:	cmp	r1, #4
   11e34:	blt	11e74 <__assert_fail@plt+0xd78>
   11e38:	cmn	r4, #1
   11e3c:	ble	11e74 <__assert_fail@plt+0xd78>
   11e40:	lsl	r7, r0, #2
   11e44:	orr	r5, r7, #1
   11e48:	mov	r0, r5
   11e4c:	bl	1510c <__assert_fail@plt+0x4010>
   11e50:	cmp	r0, #0
   11e54:	str	r0, [r6]
   11e58:	beq	11e84 <__assert_fail@plt+0xd88>
   11e5c:	mov	r2, r0
   11e60:	mov	r0, r8
   11e64:	mov	r1, r4
   11e68:	mov	r3, r5
   11e6c:	bl	11c38 <__assert_fail@plt+0xb3c>
   11e70:	b	11e7c <__assert_fail@plt+0xd80>
   11e74:	mov	r7, #0
   11e78:	str	r7, [r6]
   11e7c:	mov	r0, r7
   11e80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e84:	mov	r7, r5
   11e88:	b	11e7c <__assert_fail@plt+0xd80>
   11e8c:	movw	r1, #23775	; 0x5cdf
   11e90:	movt	r1, #1
   11e94:	add	r0, r1, r0
   11e98:	ldrsb	r1, [r0]
   11e9c:	mov	r0, #0
   11ea0:	cmn	r1, #1
   11ea4:	movwgt	r0, #1
   11ea8:	bx	lr
   11eac:	mov	r1, #0
   11eb0:	str	r1, [r0]
   11eb4:	bx	lr
   11eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ebc:	add	fp, sp, #28
   11ec0:	sub	sp, sp, #28
   11ec4:	mov	r6, r2
   11ec8:	mov	r2, r0
   11ecc:	ldr	r0, [fp, #8]
   11ed0:	str	r3, [sp, #24]
   11ed4:	mov	r5, r1
   11ed8:	mov	r8, #0
   11edc:	cmp	r2, #0
   11ee0:	ldr	r7, [r0]
   11ee4:	mov	r0, #0
   11ee8:	str	r7, [sp, #20]
   11eec:	beq	11f04 <__assert_fail@plt+0xe08>
   11ef0:	clz	r0, r6
   11ef4:	lsr	r8, r0, #5
   11ef8:	ldr	r0, [r2]
   11efc:	cmp	r0, #0
   11f00:	movwne	r0, #1
   11f04:	orr	r0, r0, r8
   11f08:	add	sl, sp, #24
   11f0c:	add	r4, sp, #20
   11f10:	str	r2, [sp, #16]
   11f14:	str	r0, [sp, #8]
   11f18:	add	r0, r2, #4
   11f1c:	str	r0, [sp, #4]
   11f20:	clz	r0, r2
   11f24:	lsr	r0, r0, #5
   11f28:	str	r0, [sp, #12]
   11f2c:	ldr	r0, [sp, #8]
   11f30:	cmp	r0, #0
   11f34:	bne	11f68 <__assert_fail@plt+0xe6c>
   11f38:	mov	r0, r5
   11f3c:	mov	r1, r6
   11f40:	mov	r2, sl
   11f44:	mov	r3, r4
   11f48:	bl	12118 <__assert_fail@plt+0x101c>
   11f4c:	cmp	r0, #0
   11f50:	beq	11f64 <__assert_fail@plt+0xe68>
   11f54:	ldr	r7, [sp, #20]
   11f58:	add	r5, r5, #4
   11f5c:	sub	r6, r6, #4
   11f60:	b	11f38 <__assert_fail@plt+0xe3c>
   11f64:	ldr	r2, [sp, #16]
   11f68:	cmp	r6, #0
   11f6c:	mov	r0, r6
   11f70:	movwne	r0, #1
   11f74:	orr	r0, r8, r0
   11f78:	cmp	r0, #1
   11f7c:	bne	120ec <__assert_fail@plt+0xff0>
   11f80:	cmp	r6, #0
   11f84:	beq	11fa0 <__assert_fail@plt+0xea4>
   11f88:	ldrb	r0, [r5]
   11f8c:	ldr	r1, [sp, #12]
   11f90:	subs	r0, r0, #10
   11f94:	movwne	r0, #1
   11f98:	orrs	r0, r0, r1
   11f9c:	beq	12064 <__assert_fail@plt+0xf68>
   11fa0:	ldr	r0, [sp, #20]
   11fa4:	ldr	r1, [sp, #24]
   11fa8:	add	r9, r5, r6
   11fac:	cmp	r2, #0
   11fb0:	str	r7, [sp, #20]
   11fb4:	sub	r0, r0, r7
   11fb8:	add	r0, r1, r0
   11fbc:	str	r0, [sp, #24]
   11fc0:	beq	12070 <__assert_fail@plt+0xf74>
   11fc4:	ldr	r7, [r2]
   11fc8:	cmp	r7, #0
   11fcc:	beq	11fe0 <__assert_fail@plt+0xee4>
   11fd0:	cmp	r7, #4
   11fd4:	bne	1200c <__assert_fail@plt+0xf10>
   11fd8:	mov	r0, #0
   11fdc:	str	r0, [r2]
   11fe0:	sub	r0, r9, r5
   11fe4:	mov	r7, #0
   11fe8:	cmp	r0, #4
   11fec:	blt	1200c <__assert_fail@plt+0xf10>
   11ff0:	mov	r0, r5
   11ff4:	mov	r1, #10
   11ff8:	mov	r2, #4
   11ffc:	bl	11054 <memchr@plt>
   12000:	ldr	r2, [sp, #16]
   12004:	cmp	r0, #0
   12008:	beq	120d8 <__assert_fail@plt+0xfdc>
   1200c:	cmp	r6, #1
   12010:	blt	12078 <__assert_fail@plt+0xf7c>
   12014:	mov	r6, r7
   12018:	mov	r0, r5
   1201c:	ldrb	r1, [r5], #1
   12020:	cmp	r1, #10
   12024:	bne	12034 <__assert_fail@plt+0xf38>
   12028:	cmp	r5, r9
   1202c:	bcc	12018 <__assert_fail@plt+0xf1c>
   12030:	b	1205c <__assert_fail@plt+0xf60>
   12034:	add	r7, r6, #1
   12038:	mov	r3, r2
   1203c:	add	r5, r0, #1
   12040:	str	r7, [r3], r6
   12044:	cmp	r5, r9
   12048:	strb	r1, [r3, #4]
   1204c:	ldr	r6, [r2]
   12050:	bcs	1205c <__assert_fail@plt+0xf60>
   12054:	cmp	r6, #4
   12058:	bne	12018 <__assert_fail@plt+0xf1c>
   1205c:	add	r5, r0, #1
   12060:	b	1207c <__assert_fail@plt+0xf80>
   12064:	sub	r6, r6, #1
   12068:	add	r5, r5, #1
   1206c:	b	120d0 <__assert_fail@plt+0xfd4>
   12070:	mov	r0, r5
   12074:	b	12080 <__assert_fail@plt+0xf84>
   12078:	mov	r6, r7
   1207c:	ldr	r0, [sp, #4]
   12080:	mov	r1, #0
   12084:	cmp	r6, #0
   12088:	beq	120f0 <__assert_fail@plt+0xff4>
   1208c:	ldr	r3, [sp, #12]
   12090:	cmp	r6, #3
   12094:	mov	r2, #0
   12098:	movwgt	r2, #1
   1209c:	orr	r2, r8, r2
   120a0:	orr	r2, r2, r3
   120a4:	cmp	r2, #1
   120a8:	bne	120f0 <__assert_fail@plt+0xff4>
   120ac:	mov	r1, r6
   120b0:	mov	r2, sl
   120b4:	mov	r3, r4
   120b8:	bl	12118 <__assert_fail@plt+0x101c>
   120bc:	cmp	r0, #0
   120c0:	mov	r1, r6
   120c4:	beq	120f0 <__assert_fail@plt+0xff4>
   120c8:	ldr	r2, [sp, #16]
   120cc:	sub	r6, r9, r5
   120d0:	ldr	r7, [sp, #20]
   120d4:	b	11f2c <__assert_fail@plt+0xe30>
   120d8:	add	r1, r5, #4
   120dc:	mov	r0, r5
   120e0:	mov	r6, #4
   120e4:	mov	r5, r1
   120e8:	b	120ac <__assert_fail@plt+0xfb0>
   120ec:	mov	r1, r6
   120f0:	ldr	r0, [fp, #8]
   120f4:	ldr	r2, [sp, #20]
   120f8:	mov	r3, r0
   120fc:	ldr	r0, [r0]
   12100:	sub	r0, r0, r2
   12104:	str	r0, [r3]
   12108:	clz	r0, r1
   1210c:	lsr	r0, r0, #5
   12110:	sub	sp, fp, #28
   12114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12118:	push	{r4, r5, r6, sl, fp, lr}
   1211c:	add	fp, sp, #16
   12120:	mov	ip, #0
   12124:	cmp	r1, #2
   12128:	blt	121a0 <__assert_fail@plt+0x10a4>
   1212c:	ldrb	r4, [r0]
   12130:	movw	lr, #23775	; 0x5cdf
   12134:	movt	lr, #1
   12138:	add	r4, lr, r4
   1213c:	ldrsb	r5, [r4]
   12140:	cmp	r5, #0
   12144:	bmi	121a0 <__assert_fail@plt+0x10a4>
   12148:	ldrb	r4, [r0, #1]
   1214c:	add	r4, lr, r4
   12150:	ldrsb	r4, [r4]
   12154:	cmp	r4, #0
   12158:	bmi	121a0 <__assert_fail@plt+0x10a4>
   1215c:	ldr	r6, [r3]
   12160:	ldr	ip, [r2]
   12164:	cmp	r6, #0
   12168:	beq	1218c <__assert_fail@plt+0x1090>
   1216c:	uxtb	r6, r4
   12170:	lsr	r6, r6, #4
   12174:	orr	r5, r6, r5, lsl #2
   12178:	strb	r5, [ip], #1
   1217c:	ldr	r5, [r3]
   12180:	sub	r6, r5, #1
   12184:	str	r6, [r3]
   12188:	b	12190 <__assert_fail@plt+0x1094>
   1218c:	mov	r6, #0
   12190:	cmp	r1, #2
   12194:	bne	121a8 <__assert_fail@plt+0x10ac>
   12198:	str	ip, [r2]
   1219c:	mov	ip, #0
   121a0:	mov	r0, ip
   121a4:	pop	{r4, r5, r6, sl, fp, pc}
   121a8:	ldrb	r5, [r0, #2]
   121ac:	cmp	r5, #61	; 0x3d
   121b0:	bne	121cc <__assert_fail@plt+0x10d0>
   121b4:	cmp	r1, #4
   121b8:	bne	12198 <__assert_fail@plt+0x109c>
   121bc:	ldrb	r0, [r0, #3]
   121c0:	cmp	r0, #61	; 0x3d
   121c4:	bne	12198 <__assert_fail@plt+0x109c>
   121c8:	b	12254 <__assert_fail@plt+0x1158>
   121cc:	add	r5, lr, r5
   121d0:	ldrsb	r5, [r5]
   121d4:	cmn	r5, #1
   121d8:	ble	12198 <__assert_fail@plt+0x109c>
   121dc:	cmp	r6, #0
   121e0:	beq	12204 <__assert_fail@plt+0x1108>
   121e4:	uxtb	r6, r5
   121e8:	lsr	r6, r6, #2
   121ec:	orr	r4, r6, r4, lsl #4
   121f0:	strb	r4, [ip], #1
   121f4:	ldr	r4, [r3]
   121f8:	sub	r4, r4, #1
   121fc:	str	r4, [r3]
   12200:	b	12208 <__assert_fail@plt+0x110c>
   12204:	mov	r4, #0
   12208:	cmp	r1, #3
   1220c:	beq	12198 <__assert_fail@plt+0x109c>
   12210:	ldrb	r0, [r0, #3]
   12214:	cmp	r0, #61	; 0x3d
   12218:	bne	12228 <__assert_fail@plt+0x112c>
   1221c:	cmp	r1, #4
   12220:	bne	12198 <__assert_fail@plt+0x109c>
   12224:	b	12254 <__assert_fail@plt+0x1158>
   12228:	add	r0, lr, r0
   1222c:	ldrsb	r0, [r0]
   12230:	cmn	r0, #1
   12234:	ble	12198 <__assert_fail@plt+0x109c>
   12238:	cmp	r4, #0
   1223c:	beq	12254 <__assert_fail@plt+0x1158>
   12240:	orr	r0, r0, r5, lsl #6
   12244:	strb	r0, [ip], #1
   12248:	ldr	r0, [r3]
   1224c:	sub	r0, r0, #1
   12250:	str	r0, [r3]
   12254:	str	ip, [r2]
   12258:	mov	ip, #1
   1225c:	b	121a0 <__assert_fail@plt+0x10a4>
   12260:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12264:	add	fp, sp, #24
   12268:	sub	sp, sp, #8
   1226c:	mov	r7, r0
   12270:	asr	r0, r2, #2
   12274:	mov	r4, r3
   12278:	mov	r6, r2
   1227c:	mov	r8, r1
   12280:	add	r0, r0, r0, lsl #1
   12284:	add	r0, r0, #3
   12288:	str	r0, [sp, #4]
   1228c:	bl	1510c <__assert_fail@plt+0x4010>
   12290:	mov	r5, #1
   12294:	cmp	r0, #0
   12298:	str	r0, [r4]
   1229c:	beq	122e8 <__assert_fail@plt+0x11ec>
   122a0:	mov	r3, r0
   122a4:	add	r0, sp, #4
   122a8:	mov	r1, r8
   122ac:	mov	r2, r6
   122b0:	str	r0, [sp]
   122b4:	mov	r0, r7
   122b8:	bl	11eb8 <__assert_fail@plt+0xdbc>
   122bc:	cmp	r0, #0
   122c0:	beq	122d8 <__assert_fail@plt+0x11dc>
   122c4:	ldr	r0, [fp, #8]
   122c8:	cmp	r0, #0
   122cc:	ldrne	r1, [sp, #4]
   122d0:	strne	r1, [r0]
   122d4:	b	122e8 <__assert_fail@plt+0x11ec>
   122d8:	ldr	r0, [r4]
   122dc:	bl	12534 <__assert_fail@plt+0x1438>
   122e0:	mov	r5, #0
   122e4:	str	r5, [r4]
   122e8:	mov	r0, r5
   122ec:	sub	sp, fp, #24
   122f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   122f4:	movw	r1, #29024	; 0x7160
   122f8:	movt	r1, #2
   122fc:	str	r0, [r1]
   12300:	bx	lr
   12304:	movw	r1, #29028	; 0x7164
   12308:	movt	r1, #2
   1230c:	strb	r0, [r1]
   12310:	bx	lr
   12314:	push	{r4, r5, r6, sl, fp, lr}
   12318:	add	fp, sp, #16
   1231c:	sub	sp, sp, #8
   12320:	movw	r0, #29012	; 0x7154
   12324:	movt	r0, #2
   12328:	ldr	r0, [r0]
   1232c:	bl	1518c <__assert_fail@plt+0x4090>
   12330:	cmp	r0, #0
   12334:	beq	1235c <__assert_fail@plt+0x1260>
   12338:	movw	r0, #29028	; 0x7164
   1233c:	movt	r0, #2
   12340:	ldrb	r0, [r0]
   12344:	cmp	r0, #0
   12348:	beq	1237c <__assert_fail@plt+0x1280>
   1234c:	bl	1100c <__errno_location@plt>
   12350:	ldr	r0, [r0]
   12354:	cmp	r0, #32
   12358:	bne	1237c <__assert_fail@plt+0x1280>
   1235c:	movw	r0, #29000	; 0x7148
   12360:	movt	r0, #2
   12364:	ldr	r0, [r0]
   12368:	bl	1518c <__assert_fail@plt+0x4090>
   1236c:	cmp	r0, #0
   12370:	subeq	sp, fp, #16
   12374:	popeq	{r4, r5, r6, sl, fp, pc}
   12378:	b	123ec <__assert_fail@plt+0x12f0>
   1237c:	movw	r1, #23492	; 0x5bc4
   12380:	mov	r0, #0
   12384:	mov	r2, #5
   12388:	movt	r1, #1
   1238c:	bl	10f1c <dcgettext@plt>
   12390:	mov	r4, r0
   12394:	movw	r0, #29024	; 0x7160
   12398:	movt	r0, #2
   1239c:	ldr	r6, [r0]
   123a0:	bl	1100c <__errno_location@plt>
   123a4:	ldr	r5, [r0]
   123a8:	cmp	r6, #0
   123ac:	bne	123c8 <__assert_fail@plt+0x12cc>
   123b0:	movw	r2, #22928	; 0x5990
   123b4:	mov	r0, #0
   123b8:	mov	r1, r5
   123bc:	mov	r3, r4
   123c0:	movt	r2, #1
   123c4:	b	123e8 <__assert_fail@plt+0x12ec>
   123c8:	mov	r0, r6
   123cc:	bl	13dac <__assert_fail@plt+0x2cb0>
   123d0:	movw	r2, #22924	; 0x598c
   123d4:	mov	r3, r0
   123d8:	str	r4, [sp]
   123dc:	mov	r0, #0
   123e0:	mov	r1, r5
   123e4:	movt	r2, #1
   123e8:	bl	10f88 <error@plt>
   123ec:	movw	r0, #28916	; 0x70f4
   123f0:	movt	r0, #2
   123f4:	ldr	r0, [r0]
   123f8:	bl	10ee0 <_exit@plt>
   123fc:	b	10eb0 <posix_fadvise64@plt>
   12400:	cmp	r0, #0
   12404:	bxeq	lr
   12408:	push	{r4, sl, fp, lr}
   1240c:	add	fp, sp, #8
   12410:	sub	sp, sp, #16
   12414:	mov	r4, r1
   12418:	bl	1103c <fileno@plt>
   1241c:	mov	r1, #0
   12420:	mov	r2, #0
   12424:	mov	r3, #0
   12428:	str	r1, [sp]
   1242c:	stmib	sp, {r1, r4}
   12430:	bl	10eb0 <posix_fadvise64@plt>
   12434:	sub	sp, fp, #8
   12438:	pop	{r4, sl, fp, pc}
   1243c:	push	{r4, r5, r6, sl, fp, lr}
   12440:	add	fp, sp, #16
   12444:	sub	sp, sp, #8
   12448:	mov	r4, r0
   1244c:	bl	1103c <fileno@plt>
   12450:	cmn	r0, #1
   12454:	ble	124c8 <__assert_fail@plt+0x13cc>
   12458:	mov	r0, r4
   1245c:	bl	10fac <__freading@plt>
   12460:	cmp	r0, #0
   12464:	beq	12490 <__assert_fail@plt+0x1394>
   12468:	mov	r0, r4
   1246c:	bl	1103c <fileno@plt>
   12470:	mov	r1, #1
   12474:	mov	r2, #0
   12478:	mov	r3, #0
   1247c:	str	r1, [sp]
   12480:	bl	10f4c <lseek64@plt>
   12484:	and	r0, r0, r1
   12488:	cmn	r0, #1
   1248c:	beq	124c8 <__assert_fail@plt+0x13cc>
   12490:	mov	r0, r4
   12494:	bl	124d8 <__assert_fail@plt+0x13dc>
   12498:	cmp	r0, #0
   1249c:	beq	124c8 <__assert_fail@plt+0x13cc>
   124a0:	bl	1100c <__errno_location@plt>
   124a4:	ldr	r6, [r0]
   124a8:	mov	r5, r0
   124ac:	mov	r0, r4
   124b0:	bl	1106c <fclose@plt>
   124b4:	cmp	r6, #0
   124b8:	strne	r6, [r5]
   124bc:	mvnne	r0, #0
   124c0:	sub	sp, fp, #16
   124c4:	pop	{r4, r5, r6, sl, fp, pc}
   124c8:	mov	r0, r4
   124cc:	sub	sp, fp, #16
   124d0:	pop	{r4, r5, r6, sl, fp, lr}
   124d4:	b	1106c <fclose@plt>
   124d8:	push	{r4, sl, fp, lr}
   124dc:	add	fp, sp, #8
   124e0:	sub	sp, sp, #8
   124e4:	mov	r4, r0
   124e8:	cmp	r0, #0
   124ec:	beq	12524 <__assert_fail@plt+0x1428>
   124f0:	mov	r0, r4
   124f4:	bl	10fac <__freading@plt>
   124f8:	cmp	r0, #0
   124fc:	beq	12524 <__assert_fail@plt+0x1428>
   12500:	ldrb	r0, [r4, #1]
   12504:	tst	r0, #1
   12508:	beq	12524 <__assert_fail@plt+0x1428>
   1250c:	mov	r0, #1
   12510:	mov	r2, #0
   12514:	mov	r3, #0
   12518:	str	r0, [sp]
   1251c:	mov	r0, r4
   12520:	bl	1255c <__assert_fail@plt+0x1460>
   12524:	mov	r0, r4
   12528:	sub	sp, fp, #8
   1252c:	pop	{r4, sl, fp, lr}
   12530:	b	10ebc <fflush@plt>
   12534:	push	{r4, r5, r6, sl, fp, lr}
   12538:	add	fp, sp, #16
   1253c:	mov	r4, r0
   12540:	bl	1100c <__errno_location@plt>
   12544:	ldr	r6, [r0]
   12548:	mov	r5, r0
   1254c:	mov	r0, r4
   12550:	bl	10ed4 <free@plt>
   12554:	str	r6, [r5]
   12558:	pop	{r4, r5, r6, sl, fp, pc}
   1255c:	push	{r4, r5, r6, r7, fp, lr}
   12560:	add	fp, sp, #16
   12564:	sub	sp, sp, #8
   12568:	mov	r4, r0
   1256c:	ldr	r0, [r0, #4]
   12570:	mov	r5, r3
   12574:	mov	r6, r2
   12578:	ldr	r1, [r4, #8]
   1257c:	cmp	r1, r0
   12580:	bne	1259c <__assert_fail@plt+0x14a0>
   12584:	ldrd	r0, [r4, #16]
   12588:	cmp	r1, r0
   1258c:	bne	1259c <__assert_fail@plt+0x14a0>
   12590:	ldr	r0, [r4, #36]	; 0x24
   12594:	cmp	r0, #0
   12598:	beq	125b4 <__assert_fail@plt+0x14b8>
   1259c:	mov	r0, r4
   125a0:	mov	r2, r6
   125a4:	mov	r3, r5
   125a8:	sub	sp, fp, #16
   125ac:	pop	{r4, r5, r6, r7, fp, lr}
   125b0:	b	11078 <fseeko64@plt>
   125b4:	ldr	r7, [fp, #8]
   125b8:	mov	r0, r4
   125bc:	bl	1103c <fileno@plt>
   125c0:	mov	r2, r6
   125c4:	mov	r3, r5
   125c8:	str	r7, [sp]
   125cc:	bl	10f4c <lseek64@plt>
   125d0:	and	r2, r0, r1
   125d4:	cmn	r2, #1
   125d8:	beq	125f4 <__assert_fail@plt+0x14f8>
   125dc:	strd	r0, [r4, #80]	; 0x50
   125e0:	ldr	r0, [r4]
   125e4:	bic	r0, r0, #16
   125e8:	str	r0, [r4]
   125ec:	mov	r0, #0
   125f0:	b	125f8 <__assert_fail@plt+0x14fc>
   125f4:	mvn	r0, #0
   125f8:	sub	sp, fp, #16
   125fc:	pop	{r4, r5, r6, r7, fp, pc}
   12600:	push	{r4, r5, fp, lr}
   12604:	add	fp, sp, #8
   12608:	cmp	r0, #0
   1260c:	beq	126a0 <__assert_fail@plt+0x15a4>
   12610:	mov	r1, #47	; 0x2f
   12614:	mov	r4, r0
   12618:	bl	11090 <strrchr@plt>
   1261c:	cmp	r0, #0
   12620:	mov	r5, r4
   12624:	addne	r5, r0, #1
   12628:	sub	r0, r5, r4
   1262c:	cmp	r0, #7
   12630:	blt	12684 <__assert_fail@plt+0x1588>
   12634:	movw	r1, #24087	; 0x5e17
   12638:	sub	r0, r5, #7
   1263c:	mov	r2, #7
   12640:	movt	r1, #1
   12644:	bl	110d8 <strncmp@plt>
   12648:	cmp	r0, #0
   1264c:	bne	12684 <__assert_fail@plt+0x1588>
   12650:	movw	r1, #24095	; 0x5e1f
   12654:	mov	r0, r5
   12658:	mov	r2, #3
   1265c:	movt	r1, #1
   12660:	bl	110d8 <strncmp@plt>
   12664:	cmp	r0, #0
   12668:	beq	12674 <__assert_fail@plt+0x1578>
   1266c:	mov	r4, r5
   12670:	b	12684 <__assert_fail@plt+0x1588>
   12674:	movw	r0, #28984	; 0x7138
   12678:	add	r4, r5, #3
   1267c:	movt	r0, #2
   12680:	str	r4, [r0]
   12684:	movw	r0, #28988	; 0x713c
   12688:	movt	r0, #2
   1268c:	str	r4, [r0]
   12690:	movw	r0, #29032	; 0x7168
   12694:	movt	r0, #2
   12698:	str	r4, [r0]
   1269c:	pop	{r4, r5, fp, pc}
   126a0:	movw	r0, #29000	; 0x7148
   126a4:	movt	r0, #2
   126a8:	ldr	r1, [r0]
   126ac:	movw	r0, #24031	; 0x5ddf
   126b0:	movt	r0, #1
   126b4:	bl	110cc <fputs@plt>
   126b8:	bl	110e4 <abort@plt>
   126bc:	push	{r4, r5, r6, sl, fp, lr}
   126c0:	add	fp, sp, #16
   126c4:	mov	r4, r0
   126c8:	movw	r0, #29040	; 0x7170
   126cc:	movt	r0, #2
   126d0:	cmp	r4, #0
   126d4:	moveq	r4, r0
   126d8:	bl	1100c <__errno_location@plt>
   126dc:	ldr	r6, [r0]
   126e0:	mov	r5, r0
   126e4:	mov	r0, r4
   126e8:	mov	r1, #48	; 0x30
   126ec:	bl	14948 <__assert_fail@plt+0x384c>
   126f0:	str	r6, [r5]
   126f4:	pop	{r4, r5, r6, sl, fp, pc}
   126f8:	movw	r1, #29040	; 0x7170
   126fc:	cmp	r0, #0
   12700:	movt	r1, #2
   12704:	movne	r1, r0
   12708:	ldr	r0, [r1]
   1270c:	bx	lr
   12710:	movw	r2, #29040	; 0x7170
   12714:	cmp	r0, #0
   12718:	movt	r2, #2
   1271c:	movne	r2, r0
   12720:	str	r1, [r2]
   12724:	bx	lr
   12728:	movw	r3, #29040	; 0x7170
   1272c:	cmp	r0, #0
   12730:	and	r2, r2, #1
   12734:	movt	r3, #2
   12738:	movne	r3, r0
   1273c:	ubfx	r0, r1, #5, #3
   12740:	and	r1, r1, #31
   12744:	add	ip, r3, r0, lsl #2
   12748:	mov	r0, #1
   1274c:	ldr	r3, [ip, #8]
   12750:	and	r0, r0, r3, lsr r1
   12754:	eor	r2, r0, r2
   12758:	eor	r1, r3, r2, lsl r1
   1275c:	str	r1, [ip, #8]
   12760:	bx	lr
   12764:	movw	r2, #29040	; 0x7170
   12768:	cmp	r0, #0
   1276c:	movt	r2, #2
   12770:	movne	r2, r0
   12774:	ldr	r0, [r2, #4]
   12778:	str	r1, [r2, #4]
   1277c:	bx	lr
   12780:	push	{fp, lr}
   12784:	mov	fp, sp
   12788:	movw	r3, #29040	; 0x7170
   1278c:	cmp	r0, #0
   12790:	movt	r3, #2
   12794:	movne	r3, r0
   12798:	cmp	r1, #0
   1279c:	mov	r0, #10
   127a0:	cmpne	r2, #0
   127a4:	str	r0, [r3]
   127a8:	bne	127b0 <__assert_fail@plt+0x16b4>
   127ac:	bl	110e4 <abort@plt>
   127b0:	str	r1, [r3, #40]	; 0x28
   127b4:	str	r2, [r3, #44]	; 0x2c
   127b8:	pop	{fp, pc}
   127bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	add	fp, sp, #28
   127c4:	sub	sp, sp, #20
   127c8:	mov	r7, r0
   127cc:	ldr	r0, [fp, #8]
   127d0:	movw	r5, #29040	; 0x7170
   127d4:	mov	r8, r3
   127d8:	mov	r9, r2
   127dc:	mov	sl, r1
   127e0:	movt	r5, #2
   127e4:	cmp	r0, #0
   127e8:	movne	r5, r0
   127ec:	bl	1100c <__errno_location@plt>
   127f0:	ldr	r2, [r5, #40]	; 0x28
   127f4:	ldr	r3, [r5, #44]	; 0x2c
   127f8:	mov	r4, r0
   127fc:	ldm	r5, {r0, r1}
   12800:	add	r5, r5, #8
   12804:	ldr	r6, [r4]
   12808:	stm	sp, {r0, r1, r5}
   1280c:	mov	r0, r7
   12810:	mov	r1, sl
   12814:	str	r2, [sp, #12]
   12818:	str	r3, [sp, #16]
   1281c:	mov	r2, r9
   12820:	mov	r3, r8
   12824:	bl	12834 <__assert_fail@plt+0x1738>
   12828:	str	r6, [r4]
   1282c:	sub	sp, fp, #28
   12830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12838:	add	fp, sp, #28
   1283c:	sub	sp, sp, #156	; 0x9c
   12840:	mov	r5, r0
   12844:	add	r0, r2, #1
   12848:	mov	r6, r1
   1284c:	mov	sl, r3
   12850:	str	r2, [fp, #-80]	; 0xffffffb0
   12854:	str	r0, [sp, #72]	; 0x48
   12858:	ldr	r0, [fp, #12]
   1285c:	and	r1, r0, #1
   12860:	str	r1, [sp, #32]
   12864:	and	r1, r0, #4
   12868:	str	r1, [sp, #28]
   1286c:	ubfx	r9, r0, #1, #1
   12870:	bl	10f58 <__ctype_get_mb_cur_max@plt>
   12874:	str	r0, [sp, #40]	; 0x28
   12878:	ldr	r0, [fp, #24]
   1287c:	ldr	r7, [fp, #8]
   12880:	mov	r1, #0
   12884:	mov	lr, #0
   12888:	str	r5, [fp, #-84]	; 0xffffffac
   1288c:	str	r1, [sp, #60]	; 0x3c
   12890:	mov	r1, #1
   12894:	str	r1, [fp, #-48]	; 0xffffffd0
   12898:	str	r0, [sp, #80]	; 0x50
   1289c:	ldr	r0, [fp, #20]
   128a0:	str	r0, [sp, #76]	; 0x4c
   128a4:	mov	r0, #0
   128a8:	str	r0, [sp, #56]	; 0x38
   128ac:	mov	r0, #0
   128b0:	str	r0, [fp, #-88]	; 0xffffffa8
   128b4:	mov	r0, #0
   128b8:	str	r0, [fp, #-72]	; 0xffffffb8
   128bc:	mov	r0, #0
   128c0:	cmp	r7, #10
   128c4:	bhi	138a0 <__assert_fail@plt+0x27a4>
   128c8:	add	r1, pc, #24
   128cc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128d0:	mov	ip, r6
   128d4:	mov	r8, #0
   128d8:	mov	r2, #1
   128dc:	mov	r6, #0
   128e0:	mov	r3, sl
   128e4:	ldr	pc, [r1, r7, lsl #2]
   128e8:	ldrdeq	r2, [r1], -r4
   128ec:	andeq	r2, r1, r8, lsr #20
   128f0:	andeq	r2, r1, r8, ror #19
   128f4:	andeq	r2, r1, ip, asr #19
   128f8:	andeq	r2, r1, ip, lsl sl
   128fc:	andeq	r2, r1, r0, asr sl
   12900:	strdeq	r2, [r1], -r8
   12904:	ldrdeq	r2, [r1], -r4
   12908:	andeq	r2, r1, r4, lsl r9
   1290c:	andeq	r2, r1, r4, lsl r9
   12910:	andeq	r2, r1, r4, asr r9
   12914:	movw	r0, #24177	; 0x5e71
   12918:	mov	r1, r7
   1291c:	mov	r6, r5
   12920:	mov	r4, ip
   12924:	mov	r5, lr
   12928:	movt	r0, #1
   1292c:	bl	14004 <__assert_fail@plt+0x2f08>
   12930:	str	r0, [sp, #76]	; 0x4c
   12934:	movw	r0, #24179	; 0x5e73
   12938:	mov	r1, r7
   1293c:	movt	r0, #1
   12940:	bl	14004 <__assert_fail@plt+0x2f08>
   12944:	mov	lr, r5
   12948:	mov	r5, r6
   1294c:	mov	ip, r4
   12950:	str	r0, [sp, #80]	; 0x50
   12954:	mov	r8, #0
   12958:	tst	r9, #1
   1295c:	str	lr, [sp, #44]	; 0x2c
   12960:	bne	12998 <__assert_fail@plt+0x189c>
   12964:	ldr	r0, [sp, #76]	; 0x4c
   12968:	ldrb	r0, [r0]
   1296c:	cmp	r0, #0
   12970:	beq	12998 <__assert_fail@plt+0x189c>
   12974:	ldr	r1, [sp, #76]	; 0x4c
   12978:	mov	r8, #0
   1297c:	add	r1, r1, #1
   12980:	cmp	r8, ip
   12984:	strbcc	r0, [r5, r8]
   12988:	ldrb	r0, [r1, r8]
   1298c:	add	r8, r8, #1
   12990:	cmp	r0, #0
   12994:	bne	12980 <__assert_fail@plt+0x1884>
   12998:	ldr	r6, [sp, #80]	; 0x50
   1299c:	mov	r4, ip
   129a0:	mov	r0, r6
   129a4:	bl	10ff4 <strlen@plt>
   129a8:	mov	ip, r4
   129ac:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129b0:	ldr	lr, [sp, #44]	; 0x2c
   129b4:	str	r6, [fp, #-88]	; 0xffffffa8
   129b8:	str	r0, [fp, #-72]	; 0xffffffb8
   129bc:	mov	r2, #1
   129c0:	mov	r6, r9
   129c4:	mov	r3, sl
   129c8:	b	12ad4 <__assert_fail@plt+0x19d8>
   129cc:	mov	r0, #1
   129d0:	b	12a28 <__assert_fail@plt+0x192c>
   129d4:	mov	r7, #0
   129d8:	mov	r8, #0
   129dc:	mov	r2, r0
   129e0:	mov	r6, #0
   129e4:	b	12ad4 <__assert_fail@plt+0x19d8>
   129e8:	tst	r9, #1
   129ec:	bne	12a28 <__assert_fail@plt+0x192c>
   129f0:	mov	r2, r0
   129f4:	b	12a80 <__assert_fail@plt+0x1984>
   129f8:	mov	r0, #1
   129fc:	mov	r8, #0
   12a00:	mov	r7, #5
   12a04:	mov	r2, #1
   12a08:	str	r0, [fp, #-72]	; 0xffffffb8
   12a0c:	movw	r0, #24175	; 0x5e6f
   12a10:	movt	r0, #1
   12a14:	str	r0, [fp, #-88]	; 0xffffffa8
   12a18:	b	12a48 <__assert_fail@plt+0x194c>
   12a1c:	mov	r2, #1
   12a20:	tst	r9, #1
   12a24:	beq	12a80 <__assert_fail@plt+0x1984>
   12a28:	mov	r1, #1
   12a2c:	mov	r8, #0
   12a30:	mov	r7, #2
   12a34:	mov	r2, r0
   12a38:	str	r1, [fp, #-72]	; 0xffffffb8
   12a3c:	movw	r1, #24179	; 0x5e73
   12a40:	movt	r1, #1
   12a44:	str	r1, [fp, #-88]	; 0xffffffa8
   12a48:	mov	r6, #1
   12a4c:	b	12ad4 <__assert_fail@plt+0x19d8>
   12a50:	tst	r9, #1
   12a54:	beq	12aa4 <__assert_fail@plt+0x19a8>
   12a58:	mov	r0, #1
   12a5c:	mov	r8, #0
   12a60:	mov	r2, #1
   12a64:	mov	r6, #1
   12a68:	mov	r7, #5
   12a6c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a70:	movw	r0, #24175	; 0x5e6f
   12a74:	movt	r0, #1
   12a78:	str	r0, [fp, #-88]	; 0xffffffa8
   12a7c:	b	12ad4 <__assert_fail@plt+0x19d8>
   12a80:	cmp	ip, #0
   12a84:	mov	r8, #1
   12a88:	mov	r6, #0
   12a8c:	mov	r7, #2
   12a90:	movne	r0, #39	; 0x27
   12a94:	strbne	r0, [r5]
   12a98:	movw	r0, #24179	; 0x5e73
   12a9c:	movt	r0, #1
   12aa0:	b	12ac8 <__assert_fail@plt+0x19cc>
   12aa4:	cmp	ip, #0
   12aa8:	mov	r8, #1
   12aac:	mov	r2, #1
   12ab0:	mov	r7, #5
   12ab4:	mov	r6, #0
   12ab8:	movne	r0, #34	; 0x22
   12abc:	strbne	r0, [r5]
   12ac0:	movw	r0, #24175	; 0x5e6f
   12ac4:	movt	r0, #1
   12ac8:	str	r0, [fp, #-88]	; 0xffffffa8
   12acc:	mov	r0, #1
   12ad0:	str	r0, [fp, #-72]	; 0xffffffb8
   12ad4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ad8:	str	r7, [fp, #-68]	; 0xffffffbc
   12adc:	str	r6, [fp, #-76]	; 0xffffffb4
   12ae0:	str	r2, [sp, #84]	; 0x54
   12ae4:	cmp	r0, #0
   12ae8:	movwne	r0, #1
   12aec:	and	r1, r0, r6
   12af0:	and	r1, r2, r1
   12af4:	str	r1, [sp, #48]	; 0x30
   12af8:	sub	r1, r7, #2
   12afc:	clz	r1, r1
   12b00:	lsr	r1, r1, #5
   12b04:	and	r1, r1, r6
   12b08:	str	r1, [sp, #64]	; 0x40
   12b0c:	subs	r1, r7, #2
   12b10:	eor	r7, r6, #1
   12b14:	movwne	r1, #1
   12b18:	str	r7, [sp, #92]	; 0x5c
   12b1c:	orr	r7, r1, r7
   12b20:	and	r1, r1, r2
   12b24:	and	r0, r0, r1
   12b28:	str	r7, [sp, #68]	; 0x44
   12b2c:	mov	r7, #0
   12b30:	str	r0, [fp, #-60]	; 0xffffffc4
   12b34:	orr	r0, r1, r6
   12b38:	ldr	r1, [fp, #16]
   12b3c:	eor	r0, r0, #1
   12b40:	clz	r1, r1
   12b44:	lsr	r1, r1, #5
   12b48:	orr	r0, r1, r0
   12b4c:	str	r0, [fp, #-64]	; 0xffffffc0
   12b50:	eor	r0, r2, #1
   12b54:	str	r0, [sp, #52]	; 0x34
   12b58:	cmn	r3, #1
   12b5c:	beq	12b6c <__assert_fail@plt+0x1a70>
   12b60:	cmp	r7, r3
   12b64:	bne	12b78 <__assert_fail@plt+0x1a7c>
   12b68:	b	136d4 <__assert_fail@plt+0x25d8>
   12b6c:	ldrb	r0, [r4, r7]
   12b70:	cmp	r0, #0
   12b74:	beq	136dc <__assert_fail@plt+0x25e0>
   12b78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b7c:	cmp	r0, #0
   12b80:	beq	12bc8 <__assert_fail@plt+0x1acc>
   12b84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b88:	add	r5, r7, r0
   12b8c:	cmp	r0, #2
   12b90:	bcc	12bdc <__assert_fail@plt+0x1ae0>
   12b94:	mov	r0, #0
   12b98:	cmn	r3, #1
   12b9c:	str	r0, [fp, #-56]	; 0xffffffc8
   12ba0:	bne	12be4 <__assert_fail@plt+0x1ae8>
   12ba4:	mov	r0, r4
   12ba8:	mov	r4, ip
   12bac:	mov	r6, lr
   12bb0:	bl	10ff4 <strlen@plt>
   12bb4:	mov	ip, r4
   12bb8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12bbc:	mov	lr, r6
   12bc0:	mov	r3, r0
   12bc4:	b	12be4 <__assert_fail@plt+0x1ae8>
   12bc8:	mov	r0, #0
   12bcc:	mov	sl, r3
   12bd0:	str	r0, [fp, #-56]	; 0xffffffc8
   12bd4:	mov	r0, #0
   12bd8:	b	12c50 <__assert_fail@plt+0x1b54>
   12bdc:	mov	r0, #0
   12be0:	str	r0, [fp, #-56]	; 0xffffffc8
   12be4:	cmp	r5, r3
   12be8:	bls	12bfc <__assert_fail@plt+0x1b00>
   12bec:	ldr	r5, [fp, #-84]	; 0xffffffac
   12bf0:	mov	r0, #0
   12bf4:	mov	sl, r3
   12bf8:	b	12c50 <__assert_fail@plt+0x1b54>
   12bfc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12c00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12c04:	add	r0, r4, r7
   12c08:	mov	r5, lr
   12c0c:	mov	r6, ip
   12c10:	mov	sl, r3
   12c14:	bl	10fe8 <bcmp@plt>
   12c18:	ldr	r2, [sp, #92]	; 0x5c
   12c1c:	cmp	r0, #0
   12c20:	ldr	r3, [fp, #-84]	; 0xffffffac
   12c24:	mov	r1, r0
   12c28:	movwne	r1, #1
   12c2c:	orr	r1, r1, r2
   12c30:	tst	r1, #1
   12c34:	beq	13760 <__assert_fail@plt+0x2664>
   12c38:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12c3c:	clz	r0, r0
   12c40:	mov	lr, r5
   12c44:	mov	ip, r6
   12c48:	mov	r5, r3
   12c4c:	lsr	r0, r0, #5
   12c50:	str	r0, [fp, #-52]	; 0xffffffcc
   12c54:	ldrb	r6, [r4, r7]
   12c58:	cmp	r6, #126	; 0x7e
   12c5c:	bhi	13184 <__assert_fail@plt+0x2088>
   12c60:	add	r3, pc, #16
   12c64:	mov	r9, #1
   12c68:	mov	r2, #110	; 0x6e
   12c6c:	mov	r0, #97	; 0x61
   12c70:	mov	r1, #0
   12c74:	ldr	pc, [r3, r6, lsl #2]
   12c78:	andeq	r2, r1, r8, ror #31
   12c7c:	andeq	r3, r1, r4, lsl #3
   12c80:	andeq	r3, r1, r4, lsl #3
   12c84:	andeq	r3, r1, r4, lsl #3
   12c88:	andeq	r3, r1, r4, lsl #3
   12c8c:	andeq	r3, r1, r4, lsl #3
   12c90:	andeq	r3, r1, r4, lsl #3
   12c94:	andeq	r3, r1, r4, lsl #4
   12c98:	andeq	r2, r1, r8, asr #31
   12c9c:	andeq	r2, r1, r0, asr #31
   12ca0:	ldrdeq	r2, [r1], -r4
   12ca4:	andeq	r3, r1, ip, ror #1
   12ca8:			; <UNDEFINED> instruction: 0x00012fb8
   12cac:	ldrdeq	r2, [r1], -r0
   12cb0:	andeq	r3, r1, r4, lsl #3
   12cb4:	andeq	r3, r1, r4, lsl #3
   12cb8:	andeq	r3, r1, r4, lsl #3
   12cbc:	andeq	r3, r1, r4, lsl #3
   12cc0:	andeq	r3, r1, r4, lsl #3
   12cc4:	andeq	r3, r1, r4, lsl #3
   12cc8:	andeq	r3, r1, r4, lsl #3
   12ccc:	andeq	r3, r1, r4, lsl #3
   12cd0:	andeq	r3, r1, r4, lsl #3
   12cd4:	andeq	r3, r1, r4, lsl #3
   12cd8:	andeq	r3, r1, r4, lsl #3
   12cdc:	andeq	r3, r1, r4, lsl #3
   12ce0:	andeq	r3, r1, r4, lsl #3
   12ce4:	andeq	r3, r1, r4, lsl #3
   12ce8:	andeq	r3, r1, r4, lsl #3
   12cec:	andeq	r3, r1, r4, lsl #3
   12cf0:	andeq	r3, r1, r4, lsl #3
   12cf4:	andeq	r3, r1, r4, lsl #3
   12cf8:	andeq	r2, r1, r8, ror #30
   12cfc:	andeq	r2, r1, ip, ror #30
   12d00:	andeq	r2, r1, ip, ror #30
   12d04:	andeq	r2, r1, r0, asr pc
   12d08:	andeq	r2, r1, ip, ror #30
   12d0c:	andeq	r2, r1, r4, ror lr
   12d10:	andeq	r2, r1, ip, ror #30
   12d14:	strdeq	r3, [r1], -r4
   12d18:	andeq	r2, r1, ip, ror #30
   12d1c:	andeq	r2, r1, ip, ror #30
   12d20:	andeq	r2, r1, ip, ror #30
   12d24:	andeq	r2, r1, r4, ror lr
   12d28:	andeq	r2, r1, r4, ror lr
   12d2c:	andeq	r2, r1, r4, ror lr
   12d30:	andeq	r2, r1, r4, ror lr
   12d34:	andeq	r2, r1, r4, ror lr
   12d38:	andeq	r2, r1, r4, ror lr
   12d3c:	andeq	r2, r1, r4, ror lr
   12d40:	andeq	r2, r1, r4, ror lr
   12d44:	andeq	r2, r1, r4, ror lr
   12d48:	andeq	r2, r1, r4, ror lr
   12d4c:	andeq	r2, r1, r4, ror lr
   12d50:	andeq	r2, r1, r4, ror lr
   12d54:	andeq	r2, r1, r4, ror lr
   12d58:	andeq	r2, r1, r4, ror lr
   12d5c:	andeq	r2, r1, r4, ror lr
   12d60:	andeq	r2, r1, r4, ror lr
   12d64:	andeq	r2, r1, ip, ror #30
   12d68:	andeq	r2, r1, ip, ror #30
   12d6c:	andeq	r2, r1, ip, ror #30
   12d70:	andeq	r2, r1, ip, ror #30
   12d74:	andeq	r3, r1, r0, asr #1
   12d78:	andeq	r3, r1, r4, lsl #3
   12d7c:	andeq	r2, r1, r4, ror lr
   12d80:	andeq	r2, r1, r4, ror lr
   12d84:	andeq	r2, r1, r4, ror lr
   12d88:	andeq	r2, r1, r4, ror lr
   12d8c:	andeq	r2, r1, r4, ror lr
   12d90:	andeq	r2, r1, r4, ror lr
   12d94:	andeq	r2, r1, r4, ror lr
   12d98:	andeq	r2, r1, r4, ror lr
   12d9c:	andeq	r2, r1, r4, ror lr
   12da0:	andeq	r2, r1, r4, ror lr
   12da4:	andeq	r2, r1, r4, ror lr
   12da8:	andeq	r2, r1, r4, ror lr
   12dac:	andeq	r2, r1, r4, ror lr
   12db0:	andeq	r2, r1, r4, ror lr
   12db4:	andeq	r2, r1, r4, ror lr
   12db8:	andeq	r2, r1, r4, ror lr
   12dbc:	andeq	r2, r1, r4, ror lr
   12dc0:	andeq	r2, r1, r4, ror lr
   12dc4:	andeq	r2, r1, r4, ror lr
   12dc8:	andeq	r2, r1, r4, ror lr
   12dcc:	andeq	r2, r1, r4, ror lr
   12dd0:	andeq	r2, r1, r4, ror lr
   12dd4:	andeq	r2, r1, r4, ror lr
   12dd8:	andeq	r2, r1, r4, ror lr
   12ddc:	andeq	r2, r1, r4, ror lr
   12de0:	andeq	r2, r1, r4, ror lr
   12de4:	andeq	r2, r1, ip, ror #30
   12de8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12dec:	andeq	r2, r1, r4, ror lr
   12df0:	andeq	r2, r1, ip, ror #30
   12df4:	andeq	r2, r1, r4, ror lr
   12df8:	andeq	r2, r1, ip, ror #30
   12dfc:	andeq	r2, r1, r4, ror lr
   12e00:	andeq	r2, r1, r4, ror lr
   12e04:	andeq	r2, r1, r4, ror lr
   12e08:	andeq	r2, r1, r4, ror lr
   12e0c:	andeq	r2, r1, r4, ror lr
   12e10:	andeq	r2, r1, r4, ror lr
   12e14:	andeq	r2, r1, r4, ror lr
   12e18:	andeq	r2, r1, r4, ror lr
   12e1c:	andeq	r2, r1, r4, ror lr
   12e20:	andeq	r2, r1, r4, ror lr
   12e24:	andeq	r2, r1, r4, ror lr
   12e28:	andeq	r2, r1, r4, ror lr
   12e2c:	andeq	r2, r1, r4, ror lr
   12e30:	andeq	r2, r1, r4, ror lr
   12e34:	andeq	r2, r1, r4, ror lr
   12e38:	andeq	r2, r1, r4, ror lr
   12e3c:	andeq	r2, r1, r4, ror lr
   12e40:	andeq	r2, r1, r4, ror lr
   12e44:	andeq	r2, r1, r4, ror lr
   12e48:	andeq	r2, r1, r4, ror lr
   12e4c:	andeq	r2, r1, r4, ror lr
   12e50:	andeq	r2, r1, r4, ror lr
   12e54:	andeq	r2, r1, r4, ror lr
   12e58:	andeq	r2, r1, r4, ror lr
   12e5c:	andeq	r2, r1, r4, ror lr
   12e60:	andeq	r2, r1, r4, ror lr
   12e64:	andeq	r2, r1, r8, lsr #30
   12e68:	andeq	r2, r1, ip, ror #30
   12e6c:	andeq	r2, r1, r8, lsr #30
   12e70:	andeq	r2, r1, r0, asr pc
   12e74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e78:	tst	r0, #1
   12e7c:	bne	12ea8 <__assert_fail@plt+0x1dac>
   12e80:	ldr	r1, [fp, #16]
   12e84:	ubfx	r0, r6, #5, #3
   12e88:	mov	r2, #1
   12e8c:	ldr	r0, [r1, r0, lsl #2]
   12e90:	and	r1, r6, #31
   12e94:	tst	r0, r2, lsl r1
   12e98:	beq	12ea8 <__assert_fail@plt+0x1dac>
   12e9c:	mov	r0, r6
   12ea0:	mov	r1, r9
   12ea4:	b	12ebc <__assert_fail@plt+0x1dc0>
   12ea8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12eac:	mov	r1, r9
   12eb0:	cmp	r0, #0
   12eb4:	mov	r0, r6
   12eb8:	beq	13608 <__assert_fail@plt+0x250c>
   12ebc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ec0:	tst	r2, #1
   12ec4:	bne	137a4 <__assert_fail@plt+0x26a8>
   12ec8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12ecc:	subs	r2, r2, #2
   12ed0:	movwne	r2, #1
   12ed4:	orr	r2, r2, lr
   12ed8:	tst	r2, #1
   12edc:	bne	12f14 <__assert_fail@plt+0x1e18>
   12ee0:	cmp	r8, ip
   12ee4:	mov	lr, #1
   12ee8:	movcc	r2, #39	; 0x27
   12eec:	strbcc	r2, [r5, r8]
   12ef0:	add	r2, r8, #1
   12ef4:	cmp	r2, ip
   12ef8:	movcc	r3, #36	; 0x24
   12efc:	strbcc	r3, [r5, r2]
   12f00:	add	r2, r8, #2
   12f04:	add	r8, r8, #3
   12f08:	cmp	r2, ip
   12f0c:	movcc	r3, #39	; 0x27
   12f10:	strbcc	r3, [r5, r2]
   12f14:	cmp	r8, ip
   12f18:	movcc	r2, #92	; 0x5c
   12f1c:	strbcc	r2, [r5, r8]
   12f20:	add	r8, r8, #1
   12f24:	b	13648 <__assert_fail@plt+0x254c>
   12f28:	cmp	sl, #1
   12f2c:	beq	12f50 <__assert_fail@plt+0x1e54>
   12f30:	mov	r9, #0
   12f34:	cmn	sl, #1
   12f38:	bne	12f5c <__assert_fail@plt+0x1e60>
   12f3c:	ldrb	r0, [r4, #1]
   12f40:	cmp	r0, #0
   12f44:	beq	12f50 <__assert_fail@plt+0x1e54>
   12f48:	mvn	sl, #0
   12f4c:	b	12f5c <__assert_fail@plt+0x1e60>
   12f50:	mov	r9, #0
   12f54:	cmp	r7, #0
   12f58:	beq	12f68 <__assert_fail@plt+0x1e6c>
   12f5c:	mov	r0, #0
   12f60:	str	r0, [fp, #-56]	; 0xffffffc8
   12f64:	b	12e74 <__assert_fail@plt+0x1d78>
   12f68:	mov	r1, #1
   12f6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f70:	cmp	r0, #2
   12f74:	bne	12f8c <__assert_fail@plt+0x1e90>
   12f78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f7c:	mov	r9, r1
   12f80:	tst	r0, #1
   12f84:	beq	12e74 <__assert_fail@plt+0x1d78>
   12f88:	b	137a4 <__assert_fail@plt+0x26a8>
   12f8c:	mov	r9, r1
   12f90:	b	12e74 <__assert_fail@plt+0x1d78>
   12f94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f98:	cmp	r0, #2
   12f9c:	bne	131e0 <__assert_fail@plt+0x20e4>
   12fa0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fa4:	tst	r0, #1
   12fa8:	bne	137a4 <__assert_fail@plt+0x26a8>
   12fac:	mov	r0, #0
   12fb0:	str	r0, [fp, #-56]	; 0xffffffc8
   12fb4:	b	131f8 <__assert_fail@plt+0x20fc>
   12fb8:	mov	r0, #102	; 0x66
   12fbc:	b	13204 <__assert_fail@plt+0x2108>
   12fc0:	mov	r2, #116	; 0x74
   12fc4:	b	12fd4 <__assert_fail@plt+0x1ed8>
   12fc8:	mov	r0, #98	; 0x62
   12fcc:	b	13204 <__assert_fail@plt+0x2108>
   12fd0:	mov	r2, #114	; 0x72
   12fd4:	ldr	r0, [sp, #68]	; 0x44
   12fd8:	tst	r0, #1
   12fdc:	mov	r0, r2
   12fe0:	bne	13204 <__assert_fail@plt+0x2108>
   12fe4:	b	137a4 <__assert_fail@plt+0x26a8>
   12fe8:	ldr	r0, [sp, #84]	; 0x54
   12fec:	tst	r0, #1
   12ff0:	beq	13224 <__assert_fail@plt+0x2128>
   12ff4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ff8:	tst	r0, #1
   12ffc:	bne	13890 <__assert_fail@plt+0x2794>
   13000:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13004:	mov	r2, sl
   13008:	subs	r0, r0, #2
   1300c:	movwne	r0, #1
   13010:	orr	r0, r0, lr
   13014:	tst	r0, #1
   13018:	bne	13050 <__assert_fail@plt+0x1f54>
   1301c:	cmp	r8, ip
   13020:	mov	lr, #1
   13024:	movcc	r0, #39	; 0x27
   13028:	strbcc	r0, [r5, r8]
   1302c:	add	r0, r8, #1
   13030:	cmp	r0, ip
   13034:	movcc	r1, #36	; 0x24
   13038:	strbcc	r1, [r5, r0]
   1303c:	add	r0, r8, #2
   13040:	add	r8, r8, #3
   13044:	cmp	r0, ip
   13048:	movcc	r1, #39	; 0x27
   1304c:	strbcc	r1, [r5, r0]
   13050:	mov	r1, #1
   13054:	cmp	r8, ip
   13058:	mov	r9, #0
   1305c:	mov	r6, #48	; 0x30
   13060:	str	r1, [fp, #-56]	; 0xffffffc8
   13064:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13068:	movcc	r0, #92	; 0x5c
   1306c:	strbcc	r0, [r5, r8]
   13070:	add	r0, r8, #1
   13074:	cmp	r1, #2
   13078:	beq	13380 <__assert_fail@plt+0x2284>
   1307c:	add	r1, r7, #1
   13080:	cmp	r1, r2
   13084:	bcs	13380 <__assert_fail@plt+0x2284>
   13088:	ldrb	r1, [r4, r1]
   1308c:	sub	r1, r1, #48	; 0x30
   13090:	uxtb	r1, r1
   13094:	cmp	r1, #9
   13098:	bhi	13380 <__assert_fail@plt+0x2284>
   1309c:	cmp	r0, ip
   130a0:	movcc	r1, #48	; 0x30
   130a4:	strbcc	r1, [r5, r0]
   130a8:	add	r0, r8, #2
   130ac:	add	r8, r8, #3
   130b0:	cmp	r0, ip
   130b4:	movcc	r1, #48	; 0x30
   130b8:	strbcc	r1, [r5, r0]
   130bc:	b	12e74 <__assert_fail@plt+0x1d78>
   130c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130c4:	mov	r6, #63	; 0x3f
   130c8:	cmp	r0, #5
   130cc:	beq	13388 <__assert_fail@plt+0x228c>
   130d0:	mov	r1, #0
   130d4:	cmp	r0, #2
   130d8:	str	r1, [fp, #-56]	; 0xffffffc8
   130dc:	bne	1343c <__assert_fail@plt+0x2340>
   130e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130e4:	mov	r9, #0
   130e8:	b	12f80 <__assert_fail@plt+0x1e84>
   130ec:	mov	r0, #118	; 0x76
   130f0:	b	13204 <__assert_fail@plt+0x2108>
   130f4:	mov	r0, #1
   130f8:	mov	r6, #39	; 0x27
   130fc:	str	r0, [sp, #60]	; 0x3c
   13100:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13104:	cmp	r0, #2
   13108:	bne	1317c <__assert_fail@plt+0x2080>
   1310c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13110:	tst	r0, #1
   13114:	bne	137a4 <__assert_fail@plt+0x26a8>
   13118:	ldr	r2, [sp, #56]	; 0x38
   1311c:	clz	r1, ip
   13120:	mov	lr, #0
   13124:	lsr	r1, r1, #5
   13128:	cmp	r2, #0
   1312c:	mov	r0, r2
   13130:	movwne	r0, #1
   13134:	orrs	r0, r0, r1
   13138:	moveq	r2, ip
   1313c:	moveq	ip, r0
   13140:	cmp	r8, ip
   13144:	str	r2, [sp, #56]	; 0x38
   13148:	movcc	r0, #39	; 0x27
   1314c:	strbcc	r0, [r5, r8]
   13150:	add	r0, r8, #1
   13154:	cmp	r0, ip
   13158:	movcc	r1, #92	; 0x5c
   1315c:	strbcc	r1, [r5, r0]
   13160:	add	r0, r8, #2
   13164:	add	r8, r8, #3
   13168:	cmp	r0, ip
   1316c:	movcc	r1, #39	; 0x27
   13170:	strbcc	r1, [r5, r0]
   13174:	mov	r0, #0
   13178:	str	r0, [fp, #-56]	; 0xffffffc8
   1317c:	mov	r9, #1
   13180:	b	12e74 <__assert_fail@plt+0x1d78>
   13184:	ldr	r0, [sp, #40]	; 0x28
   13188:	str	lr, [sp, #44]	; 0x2c
   1318c:	str	ip, [sp, #88]	; 0x58
   13190:	cmp	r0, #1
   13194:	bne	13244 <__assert_fail@plt+0x2148>
   13198:	str	sl, [sp, #36]	; 0x24
   1319c:	bl	10fd0 <__ctype_b_loc@plt>
   131a0:	ldr	r0, [r0]
   131a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   131a8:	mov	r1, #1
   131ac:	add	r0, r0, r6, lsl #1
   131b0:	ldrb	r0, [r0, #1]
   131b4:	ubfx	r9, r0, #6, #1
   131b8:	ldr	r0, [sp, #52]	; 0x34
   131bc:	ldr	lr, [sp, #44]	; 0x2c
   131c0:	cmp	r1, #1
   131c4:	orr	r3, r9, r0
   131c8:	bhi	13444 <__assert_fail@plt+0x2348>
   131cc:	tst	r3, #1
   131d0:	beq	13444 <__assert_fail@plt+0x2348>
   131d4:	ldr	sl, [sp, #36]	; 0x24
   131d8:	ldr	ip, [sp, #88]	; 0x58
   131dc:	b	12e74 <__assert_fail@plt+0x1d78>
   131e0:	ldr	r1, [sp, #48]	; 0x30
   131e4:	mov	r0, #0
   131e8:	str	r0, [fp, #-56]	; 0xffffffc8
   131ec:	mov	r0, #92	; 0x5c
   131f0:	cmp	r1, #0
   131f4:	beq	13204 <__assert_fail@plt+0x2108>
   131f8:	mov	r6, #92	; 0x5c
   131fc:	mov	r9, #0
   13200:	b	13608 <__assert_fail@plt+0x250c>
   13204:	mov	r1, #0
   13208:	mov	r9, #0
   1320c:	str	r1, [fp, #-56]	; 0xffffffc8
   13210:	ldr	r1, [sp, #84]	; 0x54
   13214:	tst	r1, #1
   13218:	mov	r1, #0
   1321c:	beq	12e74 <__assert_fail@plt+0x1d78>
   13220:	b	12ebc <__assert_fail@plt+0x1dc0>
   13224:	ldr	r0, [sp, #32]
   13228:	mov	r6, #0
   1322c:	mov	r9, #0
   13230:	cmp	r0, #0
   13234:	mov	r0, #0
   13238:	str	r0, [fp, #-56]	; 0xffffffc8
   1323c:	beq	12e74 <__assert_fail@plt+0x1d78>
   13240:	b	13660 <__assert_fail@plt+0x2564>
   13244:	mov	r0, #0
   13248:	cmn	sl, #1
   1324c:	sub	r3, fp, #40	; 0x28
   13250:	str	r0, [fp, #-36]	; 0xffffffdc
   13254:	str	r0, [fp, #-40]	; 0xffffffd8
   13258:	bne	13270 <__assert_fail@plt+0x2174>
   1325c:	mov	r0, r4
   13260:	bl	10ff4 <strlen@plt>
   13264:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13268:	sub	r3, fp, #40	; 0x28
   1326c:	mov	sl, r0
   13270:	ldr	r0, [sp, #72]	; 0x48
   13274:	mov	r9, #1
   13278:	mov	r1, #0
   1327c:	str	sl, [sp, #36]	; 0x24
   13280:	add	r0, r0, r7
   13284:	str	r0, [sp, #20]
   13288:	add	r0, r1, r7
   1328c:	str	r1, [sp, #24]
   13290:	add	r1, r4, r0
   13294:	mov	r4, r0
   13298:	sub	r2, sl, r0
   1329c:	sub	r0, fp, #44	; 0x2c
   132a0:	bl	15244 <__assert_fail@plt+0x4148>
   132a4:	cmp	r0, #0
   132a8:	beq	136b4 <__assert_fail@plt+0x25b8>
   132ac:	cmn	r0, #1
   132b0:	beq	1366c <__assert_fail@plt+0x2570>
   132b4:	ldr	r2, [sp, #36]	; 0x24
   132b8:	cmn	r0, #2
   132bc:	beq	13674 <__assert_fail@plt+0x2578>
   132c0:	ldr	r2, [sp, #64]	; 0x40
   132c4:	ldr	ip, [sp, #88]	; 0x58
   132c8:	ldr	r4, [sp, #84]	; 0x54
   132cc:	ldr	lr, [fp, #-48]	; 0xffffffd0
   132d0:	cmp	r0, #2
   132d4:	mov	r1, #0
   132d8:	movwcc	r1, #1
   132dc:	eor	r2, r2, #1
   132e0:	orrs	r1, r2, r1
   132e4:	bne	13334 <__assert_fail@plt+0x2238>
   132e8:	ldr	r1, [sp, #24]
   132ec:	ldr	r2, [sp, #20]
   132f0:	add	r1, r2, r1
   132f4:	sub	r2, r0, #1
   132f8:	ldrb	r3, [r1]
   132fc:	sub	r5, r3, #94	; 0x5e
   13300:	cmp	r5, #30
   13304:	bhi	1331c <__assert_fail@plt+0x2220>
   13308:	mov	r4, #1
   1330c:	mov	sl, #1073741829	; 0x40000005
   13310:	tst	sl, r4, lsl r5
   13314:	ldr	r4, [sp, #84]	; 0x54
   13318:	bne	1377c <__assert_fail@plt+0x2680>
   1331c:	sub	r3, r3, #91	; 0x5b
   13320:	cmp	r3, #2
   13324:	bcc	1377c <__assert_fail@plt+0x2680>
   13328:	add	r1, r1, #1
   1332c:	subs	r2, r2, #1
   13330:	bne	132f8 <__assert_fail@plt+0x21fc>
   13334:	ldr	r5, [sp, #24]
   13338:	str	lr, [fp, #-48]	; 0xffffffd0
   1333c:	add	r5, r0, r5
   13340:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13344:	bl	10f40 <iswprint@plt>
   13348:	cmp	r0, #0
   1334c:	sub	r4, fp, #40	; 0x28
   13350:	movwne	r0, #1
   13354:	and	r9, r9, r0
   13358:	mov	r0, r4
   1335c:	bl	10ef8 <mbsinit@plt>
   13360:	mov	r1, r5
   13364:	mov	r3, r4
   13368:	ldr	sl, [sp, #36]	; 0x24
   1336c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13370:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13374:	cmp	r0, #0
   13378:	beq	13288 <__assert_fail@plt+0x218c>
   1337c:	b	131b8 <__assert_fail@plt+0x20bc>
   13380:	mov	r8, r0
   13384:	b	12e74 <__assert_fail@plt+0x1d78>
   13388:	mov	r0, #0
   1338c:	str	r0, [fp, #-56]	; 0xffffffc8
   13390:	ldr	r0, [sp, #28]
   13394:	cmp	r0, #0
   13398:	beq	1343c <__assert_fail@plt+0x2340>
   1339c:	add	r0, r7, #2
   133a0:	mov	r1, sl
   133a4:	cmp	r0, sl
   133a8:	bcs	1343c <__assert_fail@plt+0x2340>
   133ac:	add	r1, r7, r4
   133b0:	ldrb	r1, [r1, #1]
   133b4:	cmp	r1, #63	; 0x3f
   133b8:	bne	1343c <__assert_fail@plt+0x2340>
   133bc:	ldrb	r9, [r4, r0]
   133c0:	sub	r2, r9, #33	; 0x21
   133c4:	cmp	r2, #29
   133c8:	bhi	1343c <__assert_fail@plt+0x2340>
   133cc:	mov	r1, r4
   133d0:	movw	r4, #20929	; 0x51c1
   133d4:	mov	r3, #1
   133d8:	movt	r4, #14336	; 0x3800
   133dc:	tst	r4, r3, lsl r2
   133e0:	beq	136c8 <__assert_fail@plt+0x25cc>
   133e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   133e8:	tst	r2, #1
   133ec:	bne	13898 <__assert_fail@plt+0x279c>
   133f0:	cmp	r8, ip
   133f4:	mov	r4, r1
   133f8:	mov	r7, r0
   133fc:	mov	r6, r9
   13400:	movcc	r2, #63	; 0x3f
   13404:	strbcc	r2, [r5, r8]
   13408:	add	r2, r8, #1
   1340c:	cmp	r2, ip
   13410:	movcc	r3, #34	; 0x22
   13414:	strbcc	r3, [r5, r2]
   13418:	add	r2, r8, #2
   1341c:	cmp	r2, ip
   13420:	movcc	r3, #34	; 0x22
   13424:	strbcc	r3, [r5, r2]
   13428:	add	r2, r8, #3
   1342c:	add	r8, r8, #4
   13430:	cmp	r2, ip
   13434:	movcc	r3, #63	; 0x3f
   13438:	strbcc	r3, [r5, r2]
   1343c:	mov	r9, #0
   13440:	b	12e74 <__assert_fail@plt+0x1d78>
   13444:	ldr	sl, [sp, #36]	; 0x24
   13448:	add	r0, r1, r7
   1344c:	mov	r2, #0
   13450:	str	r3, [sp, #24]
   13454:	str	r0, [fp, #-56]	; 0xffffffc8
   13458:	tst	r3, #1
   1345c:	beq	13488 <__assert_fail@plt+0x238c>
   13460:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13464:	tst	r0, #1
   13468:	beq	13550 <__assert_fail@plt+0x2454>
   1346c:	ldr	r1, [sp, #88]	; 0x58
   13470:	mov	r0, r3
   13474:	cmp	r8, r1
   13478:	movcc	r1, #92	; 0x5c
   1347c:	strbcc	r1, [r5, r8]
   13480:	add	r8, r8, #1
   13484:	b	13554 <__assert_fail@plt+0x2458>
   13488:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1348c:	tst	r1, #1
   13490:	bne	137a0 <__assert_fail@plt+0x26a4>
   13494:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13498:	subs	r2, r1, #2
   1349c:	movwne	r2, #1
   134a0:	orr	r2, r2, lr
   134a4:	tst	r2, #1
   134a8:	bne	134ec <__assert_fail@plt+0x23f0>
   134ac:	ldr	r1, [sp, #88]	; 0x58
   134b0:	add	r2, r8, #1
   134b4:	mov	lr, #1
   134b8:	cmp	r8, r1
   134bc:	movcc	r1, #39	; 0x27
   134c0:	strbcc	r1, [r5, r8]
   134c4:	ldr	r1, [sp, #88]	; 0x58
   134c8:	cmp	r2, r1
   134cc:	movcc	r1, #36	; 0x24
   134d0:	strbcc	r1, [r5, r2]
   134d4:	ldr	r1, [sp, #88]	; 0x58
   134d8:	add	r2, r8, #2
   134dc:	add	r8, r8, #3
   134e0:	cmp	r2, r1
   134e4:	movcc	r1, #39	; 0x27
   134e8:	strbcc	r1, [r5, r2]
   134ec:	ldr	r1, [sp, #88]	; 0x58
   134f0:	add	r2, r8, #1
   134f4:	mov	r0, r3
   134f8:	cmp	r8, r1
   134fc:	movcc	r1, #92	; 0x5c
   13500:	strbcc	r1, [r5, r8]
   13504:	ldr	r1, [sp, #88]	; 0x58
   13508:	cmp	r2, r1
   1350c:	bcs	13520 <__assert_fail@plt+0x2424>
   13510:	uxtb	r3, r6
   13514:	mov	r1, #48	; 0x30
   13518:	orr	r3, r1, r3, lsr #6
   1351c:	strb	r3, [r5, r2]
   13520:	ldr	r1, [sp, #88]	; 0x58
   13524:	add	r2, r8, #2
   13528:	add	r8, r8, #3
   1352c:	cmp	r2, r1
   13530:	lsrcc	r3, r6, #3
   13534:	movcc	r1, #6
   13538:	bficc	r3, r1, #3, #29
   1353c:	mov	r1, #6
   13540:	bfi	r6, r1, #3, #29
   13544:	strbcc	r3, [r5, r2]
   13548:	mov	r2, #1
   1354c:	b	1355c <__assert_fail@plt+0x2460>
   13550:	mov	r0, r3
   13554:	mov	r1, #0
   13558:	str	r1, [fp, #-52]	; 0xffffffcc
   1355c:	mov	ip, r2
   13560:	and	r1, r2, #1
   13564:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13568:	add	r3, r7, #1
   1356c:	cmp	r2, r3
   13570:	bls	135f8 <__assert_fail@plt+0x24fc>
   13574:	cmp	r1, #0
   13578:	mvn	r5, lr
   1357c:	movwne	r1, #1
   13580:	orr	r5, r5, r1
   13584:	tst	r5, #1
   13588:	bne	135cc <__assert_fail@plt+0x24d0>
   1358c:	ldr	r1, [sp, #88]	; 0x58
   13590:	ldr	r5, [fp, #-84]	; 0xffffffac
   13594:	mov	r2, r4
   13598:	ldr	r4, [sp, #88]	; 0x58
   1359c:	ldr	r0, [sp, #24]
   135a0:	mov	lr, #0
   135a4:	cmp	r8, r1
   135a8:	movcc	r1, #39	; 0x27
   135ac:	strbcc	r1, [r5, r8]
   135b0:	add	r1, r8, #1
   135b4:	add	r8, r8, #2
   135b8:	cmp	r1, r4
   135bc:	movcc	r4, #39	; 0x27
   135c0:	strbcc	r4, [r5, r1]
   135c4:	mov	r4, r2
   135c8:	b	135d0 <__assert_fail@plt+0x24d4>
   135cc:	ldr	r5, [fp, #-84]	; 0xffffffac
   135d0:	ldr	r1, [sp, #88]	; 0x58
   135d4:	mov	r2, ip
   135d8:	cmp	r8, r1
   135dc:	ldr	r1, [sp, #72]	; 0x48
   135e0:	strbcc	r6, [r5, r8]
   135e4:	add	r8, r8, #1
   135e8:	ldrb	r6, [r1, r7]
   135ec:	mov	r7, r3
   135f0:	mov	r3, r0
   135f4:	b	13458 <__assert_fail@plt+0x235c>
   135f8:	ldr	ip, [sp, #88]	; 0x58
   135fc:	cmp	r1, #0
   13600:	movwne	r1, #1
   13604:	str	r1, [fp, #-56]	; 0xffffffc8
   13608:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1360c:	cmp	r0, #0
   13610:	bne	13640 <__assert_fail@plt+0x2544>
   13614:	tst	lr, #1
   13618:	beq	13640 <__assert_fail@plt+0x2544>
   1361c:	cmp	r8, ip
   13620:	mov	lr, #0
   13624:	movcc	r0, #39	; 0x27
   13628:	strbcc	r0, [r5, r8]
   1362c:	add	r0, r8, #1
   13630:	add	r8, r8, #2
   13634:	cmp	r0, ip
   13638:	movcc	r1, #39	; 0x27
   1363c:	strbcc	r1, [r5, r0]
   13640:	mov	r1, r9
   13644:	mov	r0, r6
   13648:	cmp	r8, ip
   1364c:	strbcc	r0, [r5, r8]
   13650:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13654:	add	r8, r8, #1
   13658:	and	r0, r0, r1
   1365c:	str	r0, [fp, #-48]	; 0xffffffd0
   13660:	mov	r3, sl
   13664:	add	r7, r7, #1
   13668:	b	12b58 <__assert_fail@plt+0x1a5c>
   1366c:	mov	r9, #0
   13670:	b	136b4 <__assert_fail@plt+0x25b8>
   13674:	mov	r9, #0
   13678:	cmp	r2, r4
   1367c:	bls	136b4 <__assert_fail@plt+0x25b8>
   13680:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13684:	ldr	r1, [sp, #24]
   13688:	add	r0, r4, r7
   1368c:	mov	r3, r1
   13690:	ldrb	r1, [r0, r1]
   13694:	cmp	r1, #0
   13698:	beq	136c0 <__assert_fail@plt+0x25c4>
   1369c:	add	r3, r3, #1
   136a0:	add	r1, r7, r3
   136a4:	cmp	r1, r2
   136a8:	mov	r1, r3
   136ac:	bcc	1368c <__assert_fail@plt+0x2590>
   136b0:	b	131b8 <__assert_fail@plt+0x20bc>
   136b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   136b8:	ldr	r1, [sp, #24]
   136bc:	b	131b8 <__assert_fail@plt+0x20bc>
   136c0:	mov	r1, r3
   136c4:	b	131b8 <__assert_fail@plt+0x20bc>
   136c8:	mov	r9, #0
   136cc:	mov	r4, r1
   136d0:	b	12e74 <__assert_fail@plt+0x1d78>
   136d4:	mov	sl, r7
   136d8:	b	136e0 <__assert_fail@plt+0x25e4>
   136dc:	mvn	sl, #0
   136e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   136e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   136e8:	eor	r0, r1, #2
   136ec:	orr	r0, r0, r8
   136f0:	clz	r0, r0
   136f4:	lsr	r0, r0, #5
   136f8:	tst	r2, r0
   136fc:	bne	137a4 <__assert_fail@plt+0x26a8>
   13700:	subs	r0, r1, #2
   13704:	movwne	r0, #1
   13708:	orr	r0, r2, r0
   1370c:	tst	r0, #1
   13710:	ldreq	r0, [sp, #60]	; 0x3c
   13714:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13718:	eoreq	r0, r0, #1
   1371c:	tsteq	r0, #1
   13720:	bne	13838 <__assert_fail@plt+0x273c>
   13724:	tst	r1, #1
   13728:	bne	13804 <__assert_fail@plt+0x2708>
   1372c:	ldr	r6, [sp, #56]	; 0x38
   13730:	mov	r9, #0
   13734:	cmp	r6, #0
   13738:	beq	13830 <__assert_fail@plt+0x2734>
   1373c:	ldr	r0, [sp, #84]	; 0x54
   13740:	mov	r1, #0
   13744:	mov	r7, #2
   13748:	cmp	ip, #0
   1374c:	str	r1, [fp, #-48]	; 0xffffffd0
   13750:	mov	r1, #0
   13754:	str	r1, [fp, #-76]	; 0xffffffb4
   13758:	beq	128c0 <__assert_fail@plt+0x17c4>
   1375c:	b	13838 <__assert_fail@plt+0x273c>
   13760:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13764:	ldr	r1, [fp, #12]
   13768:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1376c:	mov	r5, r3
   13770:	mov	ip, r6
   13774:	mov	r3, sl
   13778:	b	137c8 <__assert_fail@plt+0x26cc>
   1377c:	tst	r4, #1
   13780:	ldr	r5, [fp, #-84]	; 0xffffffac
   13784:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13788:	ldr	r1, [fp, #12]
   1378c:	ldr	r3, [sp, #36]	; 0x24
   13790:	mov	r0, #2
   13794:	movwne	r0, #4
   13798:	mov	r2, r0
   1379c:	b	137c8 <__assert_fail@plt+0x26cc>
   137a0:	ldr	ip, [sp, #88]	; 0x58
   137a4:	ldr	r1, [sp, #84]	; 0x54
   137a8:	mov	r0, #2
   137ac:	tst	r1, #1
   137b0:	movwne	r0, #4
   137b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   137b8:	ldr	r1, [fp, #12]
   137bc:	mov	r3, sl
   137c0:	cmp	r2, #2
   137c4:	moveq	r2, r0
   137c8:	mov	r0, #0
   137cc:	bic	r1, r1, #2
   137d0:	str	r2, [sp]
   137d4:	mov	r2, r4
   137d8:	str	r0, [sp, #8]
   137dc:	ldr	r0, [sp, #76]	; 0x4c
   137e0:	str	r1, [sp, #4]
   137e4:	mov	r1, ip
   137e8:	str	r0, [sp, #12]
   137ec:	ldr	r0, [sp, #80]	; 0x50
   137f0:	str	r0, [sp, #16]
   137f4:	mov	r0, r5
   137f8:	bl	12834 <__assert_fail@plt+0x1738>
   137fc:	mov	r8, r0
   13800:	b	13884 <__assert_fail@plt+0x2788>
   13804:	mov	r0, #5
   13808:	ldr	r1, [sp, #56]	; 0x38
   1380c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13810:	mov	r3, sl
   13814:	str	r0, [sp]
   13818:	ldr	r0, [fp, #12]
   1381c:	str	r0, [sp, #4]
   13820:	ldr	r0, [fp, #16]
   13824:	str	r0, [sp, #8]
   13828:	ldr	r0, [sp, #76]	; 0x4c
   1382c:	b	137e8 <__assert_fail@plt+0x26ec>
   13830:	mov	r0, #0
   13834:	str	r0, [fp, #-76]	; 0xffffffb4
   13838:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1383c:	cmp	r1, #0
   13840:	beq	13878 <__assert_fail@plt+0x277c>
   13844:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13848:	tst	r0, #1
   1384c:	bne	13878 <__assert_fail@plt+0x277c>
   13850:	ldrb	r0, [r1]
   13854:	cmp	r0, #0
   13858:	beq	13878 <__assert_fail@plt+0x277c>
   1385c:	add	r1, r1, #1
   13860:	cmp	r8, ip
   13864:	strbcc	r0, [r5, r8]
   13868:	add	r8, r8, #1
   1386c:	ldrb	r0, [r1], #1
   13870:	cmp	r0, #0
   13874:	bne	13860 <__assert_fail@plt+0x2764>
   13878:	cmp	r8, ip
   1387c:	movcc	r0, #0
   13880:	strbcc	r0, [r5, r8]
   13884:	mov	r0, r8
   13888:	sub	sp, fp, #28
   1388c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13890:	mov	r0, #4
   13894:	b	137b4 <__assert_fail@plt+0x26b8>
   13898:	mov	r4, r1
   1389c:	b	137a4 <__assert_fail@plt+0x26a8>
   138a0:	bl	110e4 <abort@plt>
   138a4:	mov	r3, r2
   138a8:	mov	r2, #0
   138ac:	b	138b0 <__assert_fail@plt+0x27b4>
   138b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b4:	add	fp, sp, #28
   138b8:	sub	sp, sp, #36	; 0x24
   138bc:	movw	r8, #29040	; 0x7170
   138c0:	cmp	r3, #0
   138c4:	mov	r4, r2
   138c8:	str	r2, [sp, #24]
   138cc:	mov	r5, r1
   138d0:	mov	r6, r0
   138d4:	str	r0, [sp, #20]
   138d8:	movt	r8, #2
   138dc:	movne	r8, r3
   138e0:	bl	1100c <__errno_location@plt>
   138e4:	str	r0, [sp, #28]
   138e8:	ldr	r1, [r8, #40]	; 0x28
   138ec:	ldr	r2, [r8, #44]	; 0x2c
   138f0:	ldr	r7, [r0]
   138f4:	cmp	r4, #0
   138f8:	add	sl, r8, #8
   138fc:	mov	r0, #0
   13900:	ldm	r8, {r3, r9}
   13904:	orreq	r9, r9, #1
   13908:	stm	sp, {r3, r9, sl}
   1390c:	str	r1, [sp, #12]
   13910:	str	r2, [sp, #16]
   13914:	mov	r1, #0
   13918:	mov	r2, r6
   1391c:	mov	r3, r5
   13920:	str	r7, [sp, #32]
   13924:	mov	r7, r5
   13928:	bl	12834 <__assert_fail@plt+0x1738>
   1392c:	add	r4, r0, #1
   13930:	mov	r5, r0
   13934:	mov	r0, r4
   13938:	bl	14628 <__assert_fail@plt+0x352c>
   1393c:	mov	r6, r0
   13940:	ldr	r0, [r8]
   13944:	ldr	r2, [r8, #44]	; 0x2c
   13948:	ldr	r1, [r8, #40]	; 0x28
   1394c:	mov	r3, r7
   13950:	stm	sp, {r0, r9, sl}
   13954:	str	r2, [sp, #16]
   13958:	ldr	r2, [sp, #20]
   1395c:	str	r1, [sp, #12]
   13960:	mov	r0, r6
   13964:	mov	r1, r4
   13968:	bl	12834 <__assert_fail@plt+0x1738>
   1396c:	ldr	r0, [sp, #24]
   13970:	ldr	r1, [sp, #32]
   13974:	ldr	r2, [sp, #28]
   13978:	cmp	r0, #0
   1397c:	str	r1, [r2]
   13980:	strne	r5, [r0]
   13984:	mov	r0, r6
   13988:	sub	sp, fp, #28
   1398c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13990:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13994:	add	fp, sp, #24
   13998:	movw	r5, #28924	; 0x70fc
   1399c:	movw	r8, #28920	; 0x70f8
   139a0:	movt	r5, #2
   139a4:	movt	r8, #2
   139a8:	ldr	r0, [r5]
   139ac:	ldr	r4, [r8]
   139b0:	cmp	r0, #2
   139b4:	blt	139e0 <__assert_fail@plt+0x28e4>
   139b8:	add	r7, r4, #12
   139bc:	mov	r6, #0
   139c0:	ldr	r0, [r7, r6, lsl #3]
   139c4:	bl	12534 <__assert_fail@plt+0x1438>
   139c8:	ldr	r1, [r5]
   139cc:	add	r2, r6, #2
   139d0:	add	r0, r6, #1
   139d4:	mov	r6, r0
   139d8:	cmp	r2, r1
   139dc:	blt	139c0 <__assert_fail@plt+0x28c4>
   139e0:	ldr	r0, [r4, #4]
   139e4:	movw	r9, #29088	; 0x71a0
   139e8:	movw	r7, #28928	; 0x7100
   139ec:	movt	r9, #2
   139f0:	movt	r7, #2
   139f4:	cmp	r0, r9
   139f8:	beq	13a08 <__assert_fail@plt+0x290c>
   139fc:	bl	12534 <__assert_fail@plt+0x1438>
   13a00:	mov	r0, #256	; 0x100
   13a04:	stm	r7, {r0, r9}
   13a08:	cmp	r4, r7
   13a0c:	beq	13a1c <__assert_fail@plt+0x2920>
   13a10:	mov	r0, r4
   13a14:	bl	12534 <__assert_fail@plt+0x1438>
   13a18:	str	r7, [r8]
   13a1c:	mov	r0, #1
   13a20:	str	r0, [r5]
   13a24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a28:	movw	r3, #29040	; 0x7170
   13a2c:	mvn	r2, #0
   13a30:	movt	r3, #2
   13a34:	b	13a38 <__assert_fail@plt+0x293c>
   13a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a3c:	add	fp, sp, #28
   13a40:	sub	sp, sp, #44	; 0x2c
   13a44:	mov	r7, r3
   13a48:	str	r2, [sp, #36]	; 0x24
   13a4c:	str	r1, [sp, #32]
   13a50:	mov	r5, r0
   13a54:	bl	1100c <__errno_location@plt>
   13a58:	cmp	r5, #0
   13a5c:	bmi	13bcc <__assert_fail@plt+0x2ad0>
   13a60:	cmn	r5, #-2147483647	; 0x80000001
   13a64:	beq	13bcc <__assert_fail@plt+0x2ad0>
   13a68:	movw	r8, #28924	; 0x70fc
   13a6c:	movw	r4, #28920	; 0x70f8
   13a70:	str	r0, [sp, #28]
   13a74:	ldr	r0, [r0]
   13a78:	movt	r8, #2
   13a7c:	movt	r4, #2
   13a80:	ldr	r1, [r8]
   13a84:	ldr	r6, [r4]
   13a88:	str	r0, [sp, #24]
   13a8c:	cmp	r1, r5
   13a90:	ble	13a9c <__assert_fail@plt+0x29a0>
   13a94:	mov	sl, r6
   13a98:	b	13b08 <__assert_fail@plt+0x2a0c>
   13a9c:	movw	r9, #28928	; 0x7100
   13aa0:	mov	r0, #8
   13aa4:	str	r1, [fp, #-32]	; 0xffffffe0
   13aa8:	sub	r1, r5, r1
   13aac:	mvn	r3, #-2147483648	; 0x80000000
   13ab0:	movt	r9, #2
   13ab4:	str	r0, [sp]
   13ab8:	add	r2, r1, #1
   13abc:	sub	r1, fp, #32
   13ac0:	subs	r0, r6, r9
   13ac4:	movne	r0, r6
   13ac8:	bl	14758 <__assert_fail@plt+0x365c>
   13acc:	mov	sl, r0
   13ad0:	cmp	r6, r9
   13ad4:	str	r0, [r4]
   13ad8:	bne	13ae4 <__assert_fail@plt+0x29e8>
   13adc:	ldrd	r0, [r9]
   13ae0:	stm	sl, {r0, r1}
   13ae4:	ldr	r1, [r8]
   13ae8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13aec:	add	r0, sl, r1, lsl #3
   13af0:	sub	r1, r2, r1
   13af4:	lsl	r2, r1, #3
   13af8:	mov	r1, #0
   13afc:	bl	11024 <memset@plt>
   13b00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b04:	str	r0, [r8]
   13b08:	mov	r9, sl
   13b0c:	ldm	r7, {r0, r1}
   13b10:	orr	r8, r1, #1
   13b14:	add	r1, r7, #8
   13b18:	ldr	r2, [r7, #40]	; 0x28
   13b1c:	ldr	r3, [r7, #44]	; 0x2c
   13b20:	ldr	r6, [r9, r5, lsl #3]!
   13b24:	str	r1, [sp, #20]
   13b28:	ldr	r4, [r9, #4]!
   13b2c:	stm	sp, {r0, r8}
   13b30:	add	r0, sp, #8
   13b34:	stm	r0, {r1, r2, r3}
   13b38:	ldr	r2, [sp, #32]
   13b3c:	ldr	r3, [sp, #36]	; 0x24
   13b40:	mov	r1, r6
   13b44:	mov	r0, r4
   13b48:	bl	12834 <__assert_fail@plt+0x1738>
   13b4c:	cmp	r6, r0
   13b50:	bhi	13bb4 <__assert_fail@plt+0x2ab8>
   13b54:	add	r6, r0, #1
   13b58:	movw	r0, #29088	; 0x71a0
   13b5c:	movt	r0, #2
   13b60:	str	r6, [sl, r5, lsl #3]
   13b64:	cmp	r4, r0
   13b68:	beq	13b74 <__assert_fail@plt+0x2a78>
   13b6c:	mov	r0, r4
   13b70:	bl	12534 <__assert_fail@plt+0x1438>
   13b74:	mov	r0, r6
   13b78:	bl	14628 <__assert_fail@plt+0x352c>
   13b7c:	str	r0, [r9]
   13b80:	mov	r4, r0
   13b84:	add	r3, sp, #8
   13b88:	ldr	r0, [r7]
   13b8c:	ldr	r1, [r7, #40]	; 0x28
   13b90:	ldr	r2, [r7, #44]	; 0x2c
   13b94:	stm	sp, {r0, r8}
   13b98:	ldr	r0, [sp, #20]
   13b9c:	stm	r3, {r0, r1, r2}
   13ba0:	ldr	r2, [sp, #32]
   13ba4:	ldr	r3, [sp, #36]	; 0x24
   13ba8:	mov	r0, r4
   13bac:	mov	r1, r6
   13bb0:	bl	12834 <__assert_fail@plt+0x1738>
   13bb4:	ldr	r0, [sp, #28]
   13bb8:	ldr	r1, [sp, #24]
   13bbc:	str	r1, [r0]
   13bc0:	mov	r0, r4
   13bc4:	sub	sp, fp, #28
   13bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bcc:	bl	110e4 <abort@plt>
   13bd0:	movw	r3, #29040	; 0x7170
   13bd4:	movt	r3, #2
   13bd8:	b	13a38 <__assert_fail@plt+0x293c>
   13bdc:	movw	r3, #29040	; 0x7170
   13be0:	mov	r1, r0
   13be4:	mov	r0, #0
   13be8:	mvn	r2, #0
   13bec:	movt	r3, #2
   13bf0:	b	13a38 <__assert_fail@plt+0x293c>
   13bf4:	movw	r3, #29040	; 0x7170
   13bf8:	mov	r2, r1
   13bfc:	mov	r1, r0
   13c00:	mov	r0, #0
   13c04:	movt	r3, #2
   13c08:	b	13a38 <__assert_fail@plt+0x293c>
   13c0c:	push	{fp, lr}
   13c10:	mov	fp, sp
   13c14:	sub	sp, sp, #48	; 0x30
   13c18:	vmov.i32	q8, #0	; 0x00000000
   13c1c:	mov	ip, #32
   13c20:	mov	r3, sp
   13c24:	mov	lr, r2
   13c28:	cmp	r1, #10
   13c2c:	add	r2, r3, #16
   13c30:	vst1.64	{d16-d17}, [r3], ip
   13c34:	vst1.64	{d16-d17}, [r2]
   13c38:	vst1.64	{d16-d17}, [r3]
   13c3c:	beq	13c5c <__assert_fail@plt+0x2b60>
   13c40:	str	r1, [sp]
   13c44:	mov	r3, sp
   13c48:	mov	r1, lr
   13c4c:	mvn	r2, #0
   13c50:	bl	13a38 <__assert_fail@plt+0x293c>
   13c54:	mov	sp, fp
   13c58:	pop	{fp, pc}
   13c5c:	bl	110e4 <abort@plt>
   13c60:	push	{r4, sl, fp, lr}
   13c64:	add	fp, sp, #8
   13c68:	sub	sp, sp, #48	; 0x30
   13c6c:	vmov.i32	q8, #0	; 0x00000000
   13c70:	mov	ip, r3
   13c74:	mov	r3, sp
   13c78:	mov	lr, #32
   13c7c:	cmp	r1, #10
   13c80:	add	r4, r3, #16
   13c84:	vst1.64	{d16-d17}, [r3], lr
   13c88:	vst1.64	{d16-d17}, [r4]
   13c8c:	vst1.64	{d16-d17}, [r3]
   13c90:	beq	13cb0 <__assert_fail@plt+0x2bb4>
   13c94:	str	r1, [sp]
   13c98:	mov	r1, r2
   13c9c:	mov	r3, sp
   13ca0:	mov	r2, ip
   13ca4:	bl	13a38 <__assert_fail@plt+0x293c>
   13ca8:	sub	sp, fp, #8
   13cac:	pop	{r4, sl, fp, pc}
   13cb0:	bl	110e4 <abort@plt>
   13cb4:	mov	r2, r1
   13cb8:	mov	r1, r0
   13cbc:	mov	r0, #0
   13cc0:	b	13c0c <__assert_fail@plt+0x2b10>
   13cc4:	mov	r3, r2
   13cc8:	mov	r2, r1
   13ccc:	mov	r1, r0
   13cd0:	mov	r0, #0
   13cd4:	b	13c60 <__assert_fail@plt+0x2b64>
   13cd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13cdc:	add	fp, sp, #24
   13ce0:	sub	sp, sp, #48	; 0x30
   13ce4:	movw	r8, #29040	; 0x7170
   13ce8:	mov	lr, r0
   13cec:	mov	r3, sp
   13cf0:	mov	ip, r1
   13cf4:	movt	r8, #2
   13cf8:	mov	r1, r3
   13cfc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13d00:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13d04:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13d08:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13d0c:	ubfx	r0, r2, #5, #3
   13d10:	and	r2, r2, #31
   13d14:	mov	r4, #1
   13d18:	add	r0, r3, r0, lsl #2
   13d1c:	ldr	r1, [r0, #8]
   13d20:	bic	r4, r4, r1, lsr r2
   13d24:	eor	r1, r1, r4, lsl r2
   13d28:	mov	r2, ip
   13d2c:	str	r1, [r0, #8]
   13d30:	mov	r0, #0
   13d34:	mov	r1, lr
   13d38:	bl	13a38 <__assert_fail@plt+0x293c>
   13d3c:	sub	sp, fp, #24
   13d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d48:	add	fp, sp, #24
   13d4c:	sub	sp, sp, #48	; 0x30
   13d50:	movw	lr, #29040	; 0x7170
   13d54:	mov	ip, r0
   13d58:	mov	r3, sp
   13d5c:	movt	lr, #2
   13d60:	mov	r2, r3
   13d64:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13d68:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13d6c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13d70:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13d74:	ubfx	r0, r1, #5, #3
   13d78:	and	r1, r1, #31
   13d7c:	mov	r7, #1
   13d80:	add	r0, r3, r0, lsl #2
   13d84:	ldr	r2, [r0, #8]
   13d88:	bic	r7, r7, r2, lsr r1
   13d8c:	eor	r1, r2, r7, lsl r1
   13d90:	mvn	r2, #0
   13d94:	str	r1, [r0, #8]
   13d98:	mov	r0, #0
   13d9c:	mov	r1, ip
   13da0:	bl	13a38 <__assert_fail@plt+0x293c>
   13da4:	sub	sp, fp, #24
   13da8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13dac:	push	{r4, r5, r6, r7, fp, lr}
   13db0:	add	fp, sp, #16
   13db4:	sub	sp, sp, #48	; 0x30
   13db8:	movw	lr, #29040	; 0x7170
   13dbc:	mov	ip, r0
   13dc0:	mov	r3, sp
   13dc4:	movt	lr, #2
   13dc8:	mov	r2, r3
   13dcc:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13dd0:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13dd4:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13dd8:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13ddc:	mov	r1, ip
   13de0:	mvn	r2, #0
   13de4:	ldr	r0, [sp, #12]
   13de8:	orr	r0, r0, #67108864	; 0x4000000
   13dec:	str	r0, [sp, #12]
   13df0:	mov	r0, #0
   13df4:	bl	13a38 <__assert_fail@plt+0x293c>
   13df8:	sub	sp, fp, #16
   13dfc:	pop	{r4, r5, r6, r7, fp, pc}
   13e00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e04:	add	fp, sp, #24
   13e08:	sub	sp, sp, #48	; 0x30
   13e0c:	movw	r8, #29040	; 0x7170
   13e10:	mov	ip, r1
   13e14:	mov	lr, r0
   13e18:	mov	r3, sp
   13e1c:	movt	r8, #2
   13e20:	mov	r2, r3
   13e24:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13e28:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13e2c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13e30:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13e34:	mov	r1, lr
   13e38:	mov	r2, ip
   13e3c:	ldr	r0, [sp, #12]
   13e40:	orr	r0, r0, #67108864	; 0x4000000
   13e44:	str	r0, [sp, #12]
   13e48:	mov	r0, #0
   13e4c:	bl	13a38 <__assert_fail@plt+0x293c>
   13e50:	sub	sp, fp, #24
   13e54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e5c:	add	fp, sp, #24
   13e60:	sub	sp, sp, #96	; 0x60
   13e64:	vmov.i32	q8, #0	; 0x00000000
   13e68:	mov	lr, sp
   13e6c:	mov	ip, r2
   13e70:	cmp	r1, #10
   13e74:	add	r3, lr, #16
   13e78:	mov	r2, lr
   13e7c:	vst1.64	{d16-d17}, [r3]
   13e80:	mov	r3, #28
   13e84:	vst1.64	{d16-d17}, [r2], r3
   13e88:	vst1.32	{d16-d17}, [r2]
   13e8c:	beq	13ecc <__assert_fail@plt+0x2dd0>
   13e90:	str	r1, [sp, #48]	; 0x30
   13e94:	add	r3, sp, #48	; 0x30
   13e98:	ldm	lr!, {r2, r4, r5, r6, r7}
   13e9c:	add	r1, r3, #4
   13ea0:	stmia	r1!, {r2, r4, r5, r6, r7}
   13ea4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13ea8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13eac:	mvn	r2, #0
   13eb0:	ldr	r1, [sp, #60]	; 0x3c
   13eb4:	orr	r1, r1, #67108864	; 0x4000000
   13eb8:	str	r1, [sp, #60]	; 0x3c
   13ebc:	mov	r1, ip
   13ec0:	bl	13a38 <__assert_fail@plt+0x293c>
   13ec4:	sub	sp, fp, #24
   13ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ecc:	bl	110e4 <abort@plt>
   13ed0:	push	{fp, lr}
   13ed4:	mov	fp, sp
   13ed8:	sub	sp, sp, #8
   13edc:	mvn	ip, #0
   13ee0:	str	ip, [sp]
   13ee4:	bl	13ef0 <__assert_fail@plt+0x2df4>
   13ee8:	mov	sp, fp
   13eec:	pop	{fp, pc}
   13ef0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ef4:	add	fp, sp, #24
   13ef8:	sub	sp, sp, #48	; 0x30
   13efc:	movw	ip, #29040	; 0x7170
   13f00:	mov	lr, r3
   13f04:	mov	r3, sp
   13f08:	cmp	r1, #0
   13f0c:	movt	ip, #2
   13f10:	cmpne	r2, #0
   13f14:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13f18:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13f1c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13f20:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13f24:	mov	r3, #10
   13f28:	str	r3, [sp]
   13f2c:	bne	13f34 <__assert_fail@plt+0x2e38>
   13f30:	bl	110e4 <abort@plt>
   13f34:	ldr	ip, [fp, #8]
   13f38:	str	r2, [sp, #44]	; 0x2c
   13f3c:	str	r1, [sp, #40]	; 0x28
   13f40:	mov	r3, sp
   13f44:	mov	r1, lr
   13f48:	mov	r2, ip
   13f4c:	bl	13a38 <__assert_fail@plt+0x293c>
   13f50:	sub	sp, fp, #24
   13f54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f58:	push	{fp, lr}
   13f5c:	mov	fp, sp
   13f60:	sub	sp, sp, #8
   13f64:	mov	r3, r2
   13f68:	mov	r2, r1
   13f6c:	mov	r1, r0
   13f70:	mvn	r0, #0
   13f74:	str	r0, [sp]
   13f78:	mov	r0, #0
   13f7c:	bl	13ef0 <__assert_fail@plt+0x2df4>
   13f80:	mov	sp, fp
   13f84:	pop	{fp, pc}
   13f88:	push	{fp, lr}
   13f8c:	mov	fp, sp
   13f90:	sub	sp, sp, #8
   13f94:	mov	ip, r2
   13f98:	mov	r2, r1
   13f9c:	mov	r1, r0
   13fa0:	str	r3, [sp]
   13fa4:	mov	r0, #0
   13fa8:	mov	r3, ip
   13fac:	bl	13ef0 <__assert_fail@plt+0x2df4>
   13fb0:	mov	sp, fp
   13fb4:	pop	{fp, pc}
   13fb8:	movw	r3, #28936	; 0x7108
   13fbc:	movt	r3, #2
   13fc0:	b	13a38 <__assert_fail@plt+0x293c>
   13fc4:	movw	r3, #28936	; 0x7108
   13fc8:	mov	r2, r1
   13fcc:	mov	r1, r0
   13fd0:	mov	r0, #0
   13fd4:	movt	r3, #2
   13fd8:	b	13a38 <__assert_fail@plt+0x293c>
   13fdc:	movw	r3, #28936	; 0x7108
   13fe0:	mvn	r2, #0
   13fe4:	movt	r3, #2
   13fe8:	b	13a38 <__assert_fail@plt+0x293c>
   13fec:	movw	r3, #28936	; 0x7108
   13ff0:	mov	r1, r0
   13ff4:	mov	r0, #0
   13ff8:	mvn	r2, #0
   13ffc:	movt	r3, #2
   14000:	b	13a38 <__assert_fail@plt+0x293c>
   14004:	push	{r4, r5, fp, lr}
   14008:	add	fp, sp, #8
   1400c:	mov	r5, r0
   14010:	mov	r4, r1
   14014:	mov	r0, #0
   14018:	mov	r2, #5
   1401c:	mov	r1, r5
   14020:	bl	10f1c <dcgettext@plt>
   14024:	cmp	r0, r5
   14028:	popne	{r4, r5, fp, pc}
   1402c:	bl	1520c <__assert_fail@plt+0x4110>
   14030:	ldrb	r1, [r0]
   14034:	and	r1, r1, #223	; 0xdf
   14038:	cmp	r1, #71	; 0x47
   1403c:	beq	140a4 <__assert_fail@plt+0x2fa8>
   14040:	cmp	r1, #85	; 0x55
   14044:	bne	140fc <__assert_fail@plt+0x3000>
   14048:	ldrb	r1, [r0, #1]
   1404c:	and	r1, r1, #223	; 0xdf
   14050:	cmp	r1, #84	; 0x54
   14054:	bne	140fc <__assert_fail@plt+0x3000>
   14058:	ldrb	r1, [r0, #2]
   1405c:	and	r1, r1, #223	; 0xdf
   14060:	cmp	r1, #70	; 0x46
   14064:	bne	140fc <__assert_fail@plt+0x3000>
   14068:	ldrb	r1, [r0, #3]
   1406c:	cmp	r1, #45	; 0x2d
   14070:	bne	140fc <__assert_fail@plt+0x3000>
   14074:	ldrb	r1, [r0, #4]
   14078:	cmp	r1, #56	; 0x38
   1407c:	bne	140fc <__assert_fail@plt+0x3000>
   14080:	ldrb	r0, [r0, #5]
   14084:	cmp	r0, #0
   14088:	bne	140fc <__assert_fail@plt+0x3000>
   1408c:	ldrb	r1, [r5]
   14090:	movw	r2, #24181	; 0x5e75
   14094:	movw	r0, #24185	; 0x5e79
   14098:	movt	r2, #1
   1409c:	movt	r0, #1
   140a0:	b	1412c <__assert_fail@plt+0x3030>
   140a4:	ldrb	r1, [r0, #1]
   140a8:	and	r1, r1, #223	; 0xdf
   140ac:	cmp	r1, #66	; 0x42
   140b0:	bne	140fc <__assert_fail@plt+0x3000>
   140b4:	ldrb	r1, [r0, #2]
   140b8:	cmp	r1, #49	; 0x31
   140bc:	bne	140fc <__assert_fail@plt+0x3000>
   140c0:	ldrb	r1, [r0, #3]
   140c4:	cmp	r1, #56	; 0x38
   140c8:	bne	140fc <__assert_fail@plt+0x3000>
   140cc:	ldrb	r1, [r0, #4]
   140d0:	cmp	r1, #48	; 0x30
   140d4:	bne	140fc <__assert_fail@plt+0x3000>
   140d8:	ldrb	r1, [r0, #5]
   140dc:	cmp	r1, #51	; 0x33
   140e0:	bne	140fc <__assert_fail@plt+0x3000>
   140e4:	ldrb	r1, [r0, #6]
   140e8:	cmp	r1, #48	; 0x30
   140ec:	bne	140fc <__assert_fail@plt+0x3000>
   140f0:	ldrb	r0, [r0, #7]
   140f4:	cmp	r0, #0
   140f8:	beq	14118 <__assert_fail@plt+0x301c>
   140fc:	movw	r1, #24175	; 0x5e6f
   14100:	movw	r0, #24179	; 0x5e73
   14104:	cmp	r4, #9
   14108:	movt	r1, #1
   1410c:	movt	r0, #1
   14110:	moveq	r0, r1
   14114:	pop	{r4, r5, fp, pc}
   14118:	ldrb	r1, [r5]
   1411c:	movw	r2, #24189	; 0x5e7d
   14120:	movw	r0, #24193	; 0x5e81
   14124:	movt	r2, #1
   14128:	movt	r0, #1
   1412c:	cmp	r1, #96	; 0x60
   14130:	moveq	r0, r2
   14134:	pop	{r4, r5, fp, pc}
   14138:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1413c:	add	fp, sp, #24
   14140:	sub	sp, sp, #32
   14144:	ldr	r6, [fp, #12]
   14148:	ldr	r7, [fp, #8]
   1414c:	mov	r4, r2
   14150:	mov	r8, r0
   14154:	cmp	r1, #0
   14158:	beq	14180 <__assert_fail@plt+0x3084>
   1415c:	movw	r2, #24280	; 0x5ed8
   14160:	mov	r5, r1
   14164:	str	r3, [sp, #4]
   14168:	str	r4, [sp]
   1416c:	mov	r0, r8
   14170:	mov	r1, #1
   14174:	movt	r2, #1
   14178:	mov	r3, r5
   1417c:	b	14198 <__assert_fail@plt+0x309c>
   14180:	movw	r2, #24292	; 0x5ee4
   14184:	str	r3, [sp]
   14188:	mov	r0, r8
   1418c:	mov	r1, #1
   14190:	mov	r3, r4
   14194:	movt	r2, #1
   14198:	bl	11048 <__fprintf_chk@plt>
   1419c:	movw	r1, #24299	; 0x5eeb
   141a0:	mov	r0, #0
   141a4:	mov	r2, #5
   141a8:	movt	r1, #1
   141ac:	bl	10f1c <dcgettext@plt>
   141b0:	movw	r2, #25017	; 0x61b9
   141b4:	mov	r3, r0
   141b8:	movw	r0, #2022	; 0x7e6
   141bc:	mov	r1, #1
   141c0:	movt	r2, #1
   141c4:	str	r0, [sp]
   141c8:	mov	r0, r8
   141cc:	bl	11048 <__fprintf_chk@plt>
   141d0:	movw	r4, #23439	; 0x5b8f
   141d4:	mov	r1, r8
   141d8:	movt	r4, #1
   141dc:	mov	r0, r4
   141e0:	bl	10e8c <fputs_unlocked@plt>
   141e4:	movw	r1, #24303	; 0x5eef
   141e8:	mov	r0, #0
   141ec:	mov	r2, #5
   141f0:	movt	r1, #1
   141f4:	bl	10f1c <dcgettext@plt>
   141f8:	movw	r3, #24474	; 0x5f9a
   141fc:	mov	r2, r0
   14200:	mov	r0, r8
   14204:	mov	r1, #1
   14208:	movt	r3, #1
   1420c:	bl	11048 <__fprintf_chk@plt>
   14210:	mov	r0, r4
   14214:	mov	r1, r8
   14218:	bl	10e8c <fputs_unlocked@plt>
   1421c:	cmp	r6, #9
   14220:	bhi	14284 <__assert_fail@plt+0x3188>
   14224:	add	r0, pc, #0
   14228:	ldr	pc, [r0, r6, lsl #2]
   1422c:	andeq	r4, r1, ip, asr r4
   14230:	andeq	r4, r1, r4, asr r2
   14234:	muleq	r1, r0, r2
   14238:			; <UNDEFINED> instruction: 0x000142b8
   1423c:	andeq	r4, r1, r0, ror #5
   14240:	andeq	r4, r1, r8, lsl #6
   14244:	andeq	r4, r1, r0, lsr r3
   14248:	andeq	r4, r1, r8, ror #6
   1424c:	andeq	r4, r1, r8, lsl #8
   14250:			; <UNDEFINED> instruction: 0x000143b0
   14254:	movw	r1, #24508	; 0x5fbc
   14258:	mov	r0, #0
   1425c:	mov	r2, #5
   14260:	movt	r1, #1
   14264:	bl	10f1c <dcgettext@plt>
   14268:	ldr	r3, [r7]
   1426c:	mov	r2, r0
   14270:	mov	r0, r8
   14274:	mov	r1, #1
   14278:	sub	sp, fp, #24
   1427c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14280:	b	11048 <__fprintf_chk@plt>
   14284:	movw	r1, #24827	; 0x60fb
   14288:	movt	r1, #1
   1428c:	b	143b8 <__assert_fail@plt+0x32bc>
   14290:	movw	r1, #24524	; 0x5fcc
   14294:	mov	r0, #0
   14298:	mov	r2, #5
   1429c:	movt	r1, #1
   142a0:	bl	10f1c <dcgettext@plt>
   142a4:	mov	r2, r0
   142a8:	ldr	r3, [r7]
   142ac:	ldr	r0, [r7, #4]
   142b0:	str	r0, [sp]
   142b4:	b	143a4 <__assert_fail@plt+0x32a8>
   142b8:	movw	r1, #24547	; 0x5fe3
   142bc:	mov	r0, #0
   142c0:	mov	r2, #5
   142c4:	movt	r1, #1
   142c8:	bl	10f1c <dcgettext@plt>
   142cc:	mov	r2, r0
   142d0:	ldr	r3, [r7]
   142d4:	ldmib	r7, {r0, r1}
   142d8:	stm	sp, {r0, r1}
   142dc:	b	143a4 <__assert_fail@plt+0x32a8>
   142e0:	movw	r1, #24575	; 0x5fff
   142e4:	mov	r0, #0
   142e8:	mov	r2, #5
   142ec:	movt	r1, #1
   142f0:	bl	10f1c <dcgettext@plt>
   142f4:	ldr	r3, [r7]
   142f8:	mov	r2, r0
   142fc:	ldmib	r7, {r0, r1, r7}
   14300:	stm	sp, {r0, r1, r7}
   14304:	b	143a4 <__assert_fail@plt+0x32a8>
   14308:	movw	r1, #24607	; 0x601f
   1430c:	mov	r0, #0
   14310:	mov	r2, #5
   14314:	movt	r1, #1
   14318:	bl	10f1c <dcgettext@plt>
   1431c:	ldr	r3, [r7]
   14320:	mov	r2, r0
   14324:	ldmib	r7, {r0, r1, r6, r7}
   14328:	stm	sp, {r0, r1, r6, r7}
   1432c:	b	143a4 <__assert_fail@plt+0x32a8>
   14330:	movw	r1, #24643	; 0x6043
   14334:	mov	r0, #0
   14338:	mov	r2, #5
   1433c:	movt	r1, #1
   14340:	bl	10f1c <dcgettext@plt>
   14344:	mov	r2, r0
   14348:	ldr	r3, [r7]
   1434c:	ldmib	r7, {r0, r1, r6}
   14350:	ldr	r5, [r7, #16]
   14354:	ldr	r7, [r7, #20]
   14358:	stm	sp, {r0, r1, r6}
   1435c:	str	r5, [sp, #12]
   14360:	str	r7, [sp, #16]
   14364:	b	143a4 <__assert_fail@plt+0x32a8>
   14368:	movw	r1, #24683	; 0x606b
   1436c:	mov	r0, #0
   14370:	mov	r2, #5
   14374:	movt	r1, #1
   14378:	bl	10f1c <dcgettext@plt>
   1437c:	mov	r2, r0
   14380:	ldr	r3, [r7]
   14384:	ldmib	r7, {r0, r1, r6}
   14388:	ldr	r5, [r7, #16]
   1438c:	ldr	r4, [r7, #20]
   14390:	ldr	r7, [r7, #24]
   14394:	stm	sp, {r0, r1, r6}
   14398:	str	r5, [sp, #12]
   1439c:	str	r4, [sp, #16]
   143a0:	str	r7, [sp, #20]
   143a4:	mov	r0, r8
   143a8:	mov	r1, #1
   143ac:	b	14458 <__assert_fail@plt+0x335c>
   143b0:	movw	r1, #24775	; 0x60c7
   143b4:	movt	r1, #1
   143b8:	mov	r0, #0
   143bc:	mov	r2, #5
   143c0:	bl	10f1c <dcgettext@plt>
   143c4:	mov	ip, r0
   143c8:	ldr	r3, [r7]
   143cc:	ldr	r0, [r7, #4]
   143d0:	ldr	r1, [r7, #8]
   143d4:	ldr	r6, [r7, #12]
   143d8:	ldr	r5, [r7, #16]
   143dc:	ldr	r4, [r7, #20]
   143e0:	ldr	r2, [r7, #24]
   143e4:	ldr	lr, [r7, #28]
   143e8:	ldr	r7, [r7, #32]
   143ec:	stm	sp, {r0, r1, r6}
   143f0:	str	r5, [sp, #12]
   143f4:	str	r4, [sp, #16]
   143f8:	str	r2, [sp, #20]
   143fc:	str	lr, [sp, #24]
   14400:	str	r7, [sp, #28]
   14404:	b	1444c <__assert_fail@plt+0x3350>
   14408:	movw	r1, #24727	; 0x6097
   1440c:	mov	r0, #0
   14410:	mov	r2, #5
   14414:	movt	r1, #1
   14418:	bl	10f1c <dcgettext@plt>
   1441c:	mov	ip, r0
   14420:	ldr	r3, [r7]
   14424:	ldmib	r7, {r0, r1, r6}
   14428:	ldr	r5, [r7, #16]
   1442c:	ldr	r4, [r7, #20]
   14430:	ldr	r2, [r7, #24]
   14434:	ldr	r7, [r7, #28]
   14438:	stm	sp, {r0, r1, r6}
   1443c:	str	r5, [sp, #12]
   14440:	str	r4, [sp, #16]
   14444:	str	r2, [sp, #20]
   14448:	str	r7, [sp, #24]
   1444c:	mov	r0, r8
   14450:	mov	r1, #1
   14454:	mov	r2, ip
   14458:	bl	11048 <__fprintf_chk@plt>
   1445c:	sub	sp, fp, #24
   14460:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14464:	push	{r4, sl, fp, lr}
   14468:	add	fp, sp, #8
   1446c:	sub	sp, sp, #8
   14470:	ldr	ip, [fp, #8]
   14474:	mov	lr, #0
   14478:	ldr	r4, [ip, lr, lsl #2]
   1447c:	add	lr, lr, #1
   14480:	cmp	r4, #0
   14484:	bne	14478 <__assert_fail@plt+0x337c>
   14488:	sub	r4, lr, #1
   1448c:	str	ip, [sp]
   14490:	str	r4, [sp, #4]
   14494:	bl	14138 <__assert_fail@plt+0x303c>
   14498:	sub	sp, fp, #8
   1449c:	pop	{r4, sl, fp, pc}
   144a0:	push	{r4, r5, fp, lr}
   144a4:	add	fp, sp, #8
   144a8:	sub	sp, sp, #48	; 0x30
   144ac:	ldr	r4, [fp, #8]
   144b0:	mov	ip, #0
   144b4:	add	lr, sp, #8
   144b8:	ldr	r5, [r4]
   144bc:	cmp	r5, #0
   144c0:	str	r5, [lr, ip, lsl #2]
   144c4:	beq	144dc <__assert_fail@plt+0x33e0>
   144c8:	add	ip, ip, #1
   144cc:	add	r4, r4, #4
   144d0:	cmp	ip, #10
   144d4:	bne	144b8 <__assert_fail@plt+0x33bc>
   144d8:	mov	ip, #10
   144dc:	str	lr, [sp]
   144e0:	str	ip, [sp, #4]
   144e4:	bl	14138 <__assert_fail@plt+0x303c>
   144e8:	sub	sp, fp, #8
   144ec:	pop	{r4, r5, fp, pc}
   144f0:	push	{fp, lr}
   144f4:	mov	fp, sp
   144f8:	sub	sp, sp, #8
   144fc:	add	ip, fp, #8
   14500:	str	ip, [sp, #4]
   14504:	str	ip, [sp]
   14508:	bl	144a0 <__assert_fail@plt+0x33a4>
   1450c:	mov	sp, fp
   14510:	pop	{fp, pc}
   14514:	push	{fp, lr}
   14518:	mov	fp, sp
   1451c:	movw	r0, #29012	; 0x7154
   14520:	movt	r0, #2
   14524:	ldr	r1, [r0]
   14528:	movw	r0, #23439	; 0x5b8f
   1452c:	movt	r0, #1
   14530:	bl	10e8c <fputs_unlocked@plt>
   14534:	movw	r1, #24887	; 0x6137
   14538:	mov	r0, #0
   1453c:	mov	r2, #5
   14540:	movt	r1, #1
   14544:	bl	10f1c <dcgettext@plt>
   14548:	movw	r2, #24907	; 0x614b
   1454c:	mov	r1, r0
   14550:	mov	r0, #1
   14554:	movt	r2, #1
   14558:	bl	11030 <__printf_chk@plt>
   1455c:	movw	r1, #24929	; 0x6161
   14560:	mov	r0, #0
   14564:	mov	r2, #5
   14568:	movt	r1, #1
   1456c:	bl	10f1c <dcgettext@plt>
   14570:	movw	r2, #22949	; 0x59a5
   14574:	movw	r3, #23248	; 0x5ad0
   14578:	mov	r1, r0
   1457c:	mov	r0, #1
   14580:	movt	r2, #1
   14584:	movt	r3, #1
   14588:	bl	11030 <__printf_chk@plt>
   1458c:	movw	r1, #24949	; 0x6175
   14590:	mov	r0, #0
   14594:	mov	r2, #5
   14598:	movt	r1, #1
   1459c:	bl	10f1c <dcgettext@plt>
   145a0:	movw	r2, #24988	; 0x619c
   145a4:	mov	r1, r0
   145a8:	mov	r0, #1
   145ac:	movt	r2, #1
   145b0:	pop	{fp, lr}
   145b4:	b	11030 <__printf_chk@plt>
   145b8:	b	145bc <__assert_fail@plt+0x34c0>
   145bc:	push	{r4, r5, r6, sl, fp, lr}
   145c0:	add	fp, sp, #16
   145c4:	mov	r4, r2
   145c8:	mov	r5, r1
   145cc:	mov	r6, r0
   145d0:	bl	152a8 <__assert_fail@plt+0x41ac>
   145d4:	cmp	r0, #0
   145d8:	popne	{r4, r5, r6, sl, fp, pc}
   145dc:	cmp	r6, #0
   145e0:	beq	145f4 <__assert_fail@plt+0x34f8>
   145e4:	cmp	r5, #0
   145e8:	cmpne	r4, #0
   145ec:	bne	145f4 <__assert_fail@plt+0x34f8>
   145f0:	pop	{r4, r5, r6, sl, fp, pc}
   145f4:	bl	14a24 <__assert_fail@plt+0x3928>
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	bl	1510c <__assert_fail@plt+0x4010>
   14604:	cmp	r0, #0
   14608:	popne	{fp, pc}
   1460c:	bl	14a24 <__assert_fail@plt+0x3928>
   14610:	push	{fp, lr}
   14614:	mov	fp, sp
   14618:	bl	1510c <__assert_fail@plt+0x4010>
   1461c:	cmp	r0, #0
   14620:	popne	{fp, pc}
   14624:	bl	14a24 <__assert_fail@plt+0x3928>
   14628:	push	{fp, lr}
   1462c:	mov	fp, sp
   14630:	bl	1510c <__assert_fail@plt+0x4010>
   14634:	cmp	r0, #0
   14638:	popne	{fp, pc}
   1463c:	bl	14a24 <__assert_fail@plt+0x3928>
   14640:	push	{r4, r5, fp, lr}
   14644:	add	fp, sp, #8
   14648:	mov	r4, r1
   1464c:	mov	r5, r0
   14650:	bl	1513c <__assert_fail@plt+0x4040>
   14654:	cmp	r0, #0
   14658:	popne	{r4, r5, fp, pc}
   1465c:	cmp	r5, #0
   14660:	beq	14670 <__assert_fail@plt+0x3574>
   14664:	cmp	r4, #0
   14668:	bne	14670 <__assert_fail@plt+0x3574>
   1466c:	pop	{r4, r5, fp, pc}
   14670:	bl	14a24 <__assert_fail@plt+0x3928>
   14674:	push	{fp, lr}
   14678:	mov	fp, sp
   1467c:	cmp	r1, #0
   14680:	orreq	r1, r1, #1
   14684:	bl	1513c <__assert_fail@plt+0x4040>
   14688:	cmp	r0, #0
   1468c:	popne	{fp, pc}
   14690:	bl	14a24 <__assert_fail@plt+0x3928>
   14694:	push	{fp, lr}
   14698:	mov	fp, sp
   1469c:	clz	r3, r2
   146a0:	lsr	ip, r3, #5
   146a4:	clz	r3, r1
   146a8:	lsr	r3, r3, #5
   146ac:	orrs	r3, r3, ip
   146b0:	movwne	r1, #1
   146b4:	movwne	r2, #1
   146b8:	bl	152a8 <__assert_fail@plt+0x41ac>
   146bc:	cmp	r0, #0
   146c0:	popne	{fp, pc}
   146c4:	bl	14a24 <__assert_fail@plt+0x3928>
   146c8:	push	{fp, lr}
   146cc:	mov	fp, sp
   146d0:	mov	r2, r1
   146d4:	mov	r1, r0
   146d8:	mov	r0, #0
   146dc:	bl	152a8 <__assert_fail@plt+0x41ac>
   146e0:	cmp	r0, #0
   146e4:	popne	{fp, pc}
   146e8:	bl	14a24 <__assert_fail@plt+0x3928>
   146ec:	mov	r2, r1
   146f0:	mov	r1, r0
   146f4:	mov	r0, #0
   146f8:	b	14694 <__assert_fail@plt+0x3598>
   146fc:	mov	r2, #1
   14700:	b	14704 <__assert_fail@plt+0x3608>
   14704:	push	{r4, r5, fp, lr}
   14708:	add	fp, sp, #8
   1470c:	ldr	r5, [r1]
   14710:	mov	r4, r1
   14714:	cmp	r0, #0
   14718:	beq	14730 <__assert_fail@plt+0x3634>
   1471c:	mov	r1, #1
   14720:	add	r1, r1, r5, lsr #1
   14724:	adds	r5, r5, r1
   14728:	bcc	14748 <__assert_fail@plt+0x364c>
   1472c:	bl	14a24 <__assert_fail@plt+0x3928>
   14730:	cmp	r5, #0
   14734:	bne	14748 <__assert_fail@plt+0x364c>
   14738:	mov	r1, #64	; 0x40
   1473c:	cmp	r2, #64	; 0x40
   14740:	udiv	r5, r1, r2
   14744:	addhi	r5, r5, #1
   14748:	mov	r1, r5
   1474c:	bl	145bc <__assert_fail@plt+0x34c0>
   14750:	str	r5, [r4]
   14754:	pop	{r4, r5, fp, pc}
   14758:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1475c:	add	fp, sp, #24
   14760:	ldr	r6, [r1]
   14764:	mov	r8, r1
   14768:	ldr	r4, [fp, #8]
   1476c:	add	r1, r6, r6, asr #1
   14770:	cmp	r1, r6
   14774:	mvnvs	r1, #-2147483648	; 0x80000000
   14778:	cmp	r1, r3
   1477c:	mov	r5, r1
   14780:	movgt	r5, r3
   14784:	cmn	r3, #1
   14788:	movle	r5, r1
   1478c:	cmn	r4, #1
   14790:	ble	147b0 <__assert_fail@plt+0x36b4>
   14794:	cmp	r4, #0
   14798:	beq	14804 <__assert_fail@plt+0x3708>
   1479c:	cmn	r5, #1
   147a0:	ble	147d8 <__assert_fail@plt+0x36dc>
   147a4:	mvn	r7, #-2147483648	; 0x80000000
   147a8:	udiv	r1, r7, r4
   147ac:	b	147cc <__assert_fail@plt+0x36d0>
   147b0:	cmn	r5, #1
   147b4:	ble	147f4 <__assert_fail@plt+0x36f8>
   147b8:	cmn	r4, #1
   147bc:	beq	14804 <__assert_fail@plt+0x3708>
   147c0:	mov	r1, #-2147483648	; 0x80000000
   147c4:	mvn	r7, #-2147483648	; 0x80000000
   147c8:	sdiv	r1, r1, r4
   147cc:	cmp	r1, r5
   147d0:	bge	14804 <__assert_fail@plt+0x3708>
   147d4:	b	14814 <__assert_fail@plt+0x3718>
   147d8:	beq	14804 <__assert_fail@plt+0x3708>
   147dc:	mov	r1, #-2147483648	; 0x80000000
   147e0:	mvn	r7, #-2147483648	; 0x80000000
   147e4:	sdiv	r1, r1, r5
   147e8:	cmp	r1, r4
   147ec:	bge	14804 <__assert_fail@plt+0x3708>
   147f0:	b	14814 <__assert_fail@plt+0x3718>
   147f4:	mvn	r7, #-2147483648	; 0x80000000
   147f8:	sdiv	r1, r7, r4
   147fc:	cmp	r5, r1
   14800:	blt	14814 <__assert_fail@plt+0x3718>
   14804:	mul	r1, r5, r4
   14808:	mov	r7, #64	; 0x40
   1480c:	cmp	r1, #63	; 0x3f
   14810:	bgt	1481c <__assert_fail@plt+0x3720>
   14814:	sdiv	r5, r7, r4
   14818:	mul	r1, r5, r4
   1481c:	cmp	r0, #0
   14820:	moveq	r7, #0
   14824:	streq	r7, [r8]
   14828:	sub	r7, r5, r6
   1482c:	cmp	r7, r2
   14830:	bge	148d4 <__assert_fail@plt+0x37d8>
   14834:	add	r5, r6, r2
   14838:	mov	r2, #0
   1483c:	mov	r1, #0
   14840:	cmp	r5, r3
   14844:	movwgt	r2, #1
   14848:	cmn	r3, #1
   1484c:	movwgt	r1, #1
   14850:	cmp	r5, r6
   14854:	bvs	148bc <__assert_fail@plt+0x37c0>
   14858:	ands	r1, r1, r2
   1485c:	bne	148bc <__assert_fail@plt+0x37c0>
   14860:	cmn	r4, #1
   14864:	ble	14884 <__assert_fail@plt+0x3788>
   14868:	cmp	r4, #0
   1486c:	beq	148d0 <__assert_fail@plt+0x37d4>
   14870:	cmn	r5, #1
   14874:	ble	148a8 <__assert_fail@plt+0x37ac>
   14878:	mvn	r1, #-2147483648	; 0x80000000
   1487c:	udiv	r1, r1, r4
   14880:	b	1489c <__assert_fail@plt+0x37a0>
   14884:	cmn	r5, #1
   14888:	ble	148c0 <__assert_fail@plt+0x37c4>
   1488c:	cmn	r4, #1
   14890:	beq	148d0 <__assert_fail@plt+0x37d4>
   14894:	mov	r1, #-2147483648	; 0x80000000
   14898:	sdiv	r1, r1, r4
   1489c:	cmp	r1, r5
   148a0:	bge	148d0 <__assert_fail@plt+0x37d4>
   148a4:	b	148bc <__assert_fail@plt+0x37c0>
   148a8:	beq	148d0 <__assert_fail@plt+0x37d4>
   148ac:	mov	r1, #-2147483648	; 0x80000000
   148b0:	sdiv	r1, r1, r5
   148b4:	cmp	r1, r4
   148b8:	bge	148d0 <__assert_fail@plt+0x37d4>
   148bc:	bl	14a24 <__assert_fail@plt+0x3928>
   148c0:	mvn	r1, #-2147483648	; 0x80000000
   148c4:	sdiv	r1, r1, r4
   148c8:	cmp	r5, r1
   148cc:	blt	148bc <__assert_fail@plt+0x37c0>
   148d0:	mul	r1, r5, r4
   148d4:	bl	14640 <__assert_fail@plt+0x3544>
   148d8:	str	r5, [r8]
   148dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148e0:	push	{fp, lr}
   148e4:	mov	fp, sp
   148e8:	mov	r1, #1
   148ec:	bl	150b8 <__assert_fail@plt+0x3fbc>
   148f0:	cmp	r0, #0
   148f4:	popne	{fp, pc}
   148f8:	bl	14a24 <__assert_fail@plt+0x3928>
   148fc:	push	{fp, lr}
   14900:	mov	fp, sp
   14904:	bl	150b8 <__assert_fail@plt+0x3fbc>
   14908:	cmp	r0, #0
   1490c:	popne	{fp, pc}
   14910:	bl	14a24 <__assert_fail@plt+0x3928>
   14914:	push	{fp, lr}
   14918:	mov	fp, sp
   1491c:	mov	r1, #1
   14920:	bl	150b8 <__assert_fail@plt+0x3fbc>
   14924:	cmp	r0, #0
   14928:	popne	{fp, pc}
   1492c:	bl	14a24 <__assert_fail@plt+0x3928>
   14930:	push	{fp, lr}
   14934:	mov	fp, sp
   14938:	bl	150b8 <__assert_fail@plt+0x3fbc>
   1493c:	cmp	r0, #0
   14940:	popne	{fp, pc}
   14944:	bl	14a24 <__assert_fail@plt+0x3928>
   14948:	push	{r4, r5, fp, lr}
   1494c:	add	fp, sp, #8
   14950:	mov	r5, r0
   14954:	mov	r0, r1
   14958:	mov	r4, r1
   1495c:	bl	1510c <__assert_fail@plt+0x4010>
   14960:	cmp	r0, #0
   14964:	beq	14978 <__assert_fail@plt+0x387c>
   14968:	mov	r1, r5
   1496c:	mov	r2, r4
   14970:	pop	{r4, r5, fp, lr}
   14974:	b	10eec <memcpy@plt>
   14978:	bl	14a24 <__assert_fail@plt+0x3928>
   1497c:	push	{r4, r5, fp, lr}
   14980:	add	fp, sp, #8
   14984:	mov	r5, r0
   14988:	mov	r0, r1
   1498c:	mov	r4, r1
   14990:	bl	1510c <__assert_fail@plt+0x4010>
   14994:	cmp	r0, #0
   14998:	beq	149ac <__assert_fail@plt+0x38b0>
   1499c:	mov	r1, r5
   149a0:	mov	r2, r4
   149a4:	pop	{r4, r5, fp, lr}
   149a8:	b	10eec <memcpy@plt>
   149ac:	bl	14a24 <__assert_fail@plt+0x3928>
   149b0:	push	{r4, r5, fp, lr}
   149b4:	add	fp, sp, #8
   149b8:	mov	r5, r0
   149bc:	add	r0, r1, #1
   149c0:	mov	r4, r1
   149c4:	bl	1510c <__assert_fail@plt+0x4010>
   149c8:	cmp	r0, #0
   149cc:	beq	149e8 <__assert_fail@plt+0x38ec>
   149d0:	mov	r1, #0
   149d4:	mov	r2, r4
   149d8:	strb	r1, [r0, r4]
   149dc:	mov	r1, r5
   149e0:	pop	{r4, r5, fp, lr}
   149e4:	b	10eec <memcpy@plt>
   149e8:	bl	14a24 <__assert_fail@plt+0x3928>
   149ec:	push	{r4, r5, fp, lr}
   149f0:	add	fp, sp, #8
   149f4:	mov	r4, r0
   149f8:	bl	10ff4 <strlen@plt>
   149fc:	add	r5, r0, #1
   14a00:	mov	r0, r5
   14a04:	bl	1510c <__assert_fail@plt+0x4010>
   14a08:	cmp	r0, #0
   14a0c:	beq	14a20 <__assert_fail@plt+0x3924>
   14a10:	mov	r1, r4
   14a14:	mov	r2, r5
   14a18:	pop	{r4, r5, fp, lr}
   14a1c:	b	10eec <memcpy@plt>
   14a20:	bl	14a24 <__assert_fail@plt+0x3928>
   14a24:	push	{fp, lr}
   14a28:	mov	fp, sp
   14a2c:	movw	r0, #28916	; 0x70f4
   14a30:	movw	r1, #25064	; 0x61e8
   14a34:	mov	r2, #5
   14a38:	movt	r0, #2
   14a3c:	movt	r1, #1
   14a40:	ldr	r4, [r0]
   14a44:	mov	r0, #0
   14a48:	bl	10f1c <dcgettext@plt>
   14a4c:	movw	r2, #22928	; 0x5990
   14a50:	mov	r3, r0
   14a54:	mov	r0, r4
   14a58:	mov	r1, #0
   14a5c:	movt	r2, #1
   14a60:	bl	10f88 <error@plt>
   14a64:	bl	110e4 <abort@plt>
   14a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a6c:	add	fp, sp, #28
   14a70:	sub	sp, sp, #28
   14a74:	cmp	r2, #37	; 0x25
   14a78:	str	r3, [sp, #12]
   14a7c:	bcs	14f90 <__assert_fail@plt+0x3e94>
   14a80:	ldr	sl, [fp, #8]
   14a84:	mov	r4, r2
   14a88:	mov	r6, r1
   14a8c:	mov	r5, r0
   14a90:	bl	1100c <__errno_location@plt>
   14a94:	cmp	r6, #0
   14a98:	add	r8, sp, #24
   14a9c:	mov	r7, r0
   14aa0:	mov	r0, #0
   14aa4:	mov	r2, r4
   14aa8:	movne	r8, r6
   14aac:	str	r0, [r7]
   14ab0:	mov	r0, r5
   14ab4:	mov	r1, r8
   14ab8:	bl	11060 <strtoimax@plt>
   14abc:	str	r1, [sp, #20]
   14ac0:	str	r0, [sp, #16]
   14ac4:	ldr	r4, [r8]
   14ac8:	cmp	r4, r5
   14acc:	beq	14af8 <__assert_fail@plt+0x39fc>
   14ad0:	mov	r6, r0
   14ad4:	ldr	r0, [r7]
   14ad8:	mov	r9, r1
   14adc:	cmp	r0, #0
   14ae0:	beq	14b38 <__assert_fail@plt+0x3a3c>
   14ae4:	mov	r7, #4
   14ae8:	cmp	r0, #34	; 0x22
   14aec:	bne	14f84 <__assert_fail@plt+0x3e88>
   14af0:	mov	r7, #1
   14af4:	b	14b3c <__assert_fail@plt+0x3a40>
   14af8:	mov	r7, #4
   14afc:	cmp	sl, #0
   14b00:	beq	14f84 <__assert_fail@plt+0x3e88>
   14b04:	ldrb	r1, [r5]
   14b08:	cmp	r1, #0
   14b0c:	beq	14f84 <__assert_fail@plt+0x3e88>
   14b10:	mov	r0, sl
   14b14:	bl	11000 <strchr@plt>
   14b18:	cmp	r0, #0
   14b1c:	beq	14f84 <__assert_fail@plt+0x3e88>
   14b20:	mov	r9, #0
   14b24:	mov	r6, #1
   14b28:	mov	r7, #0
   14b2c:	str	r9, [sp, #20]
   14b30:	str	r6, [sp, #16]
   14b34:	b	14b44 <__assert_fail@plt+0x3a48>
   14b38:	mov	r7, r0
   14b3c:	cmp	sl, #0
   14b40:	beq	14be8 <__assert_fail@plt+0x3aec>
   14b44:	ldrb	r5, [r4]
   14b48:	cmp	r5, #0
   14b4c:	beq	14bf0 <__assert_fail@plt+0x3af4>
   14b50:	mov	r0, sl
   14b54:	mov	r1, r5
   14b58:	bl	11000 <strchr@plt>
   14b5c:	cmp	r0, #0
   14b60:	beq	14bf8 <__assert_fail@plt+0x3afc>
   14b64:	sub	r0, r5, #69	; 0x45
   14b68:	str	r7, [sp, #4]
   14b6c:	mov	r1, #1
   14b70:	mov	r7, #1024	; 0x400
   14b74:	cmp	r0, #21
   14b78:	str	r1, [sp, #8]
   14b7c:	bhi	14b94 <__assert_fail@plt+0x3a98>
   14b80:	movw	r2, #35141	; 0x8945
   14b84:	mov	r1, #1
   14b88:	movt	r2, #48	; 0x30
   14b8c:	tst	r2, r1, lsl r0
   14b90:	bne	14bb0 <__assert_fail@plt+0x3ab4>
   14b94:	sub	r0, r5, #103	; 0x67
   14b98:	cmp	r0, #13
   14b9c:	bhi	14c08 <__assert_fail@plt+0x3b0c>
   14ba0:	mov	r1, #1
   14ba4:	movw	r2, #8273	; 0x2051
   14ba8:	tst	r2, r1, lsl r0
   14bac:	beq	14c08 <__assert_fail@plt+0x3b0c>
   14bb0:	ldr	r0, [fp, #8]
   14bb4:	mov	r1, #48	; 0x30
   14bb8:	bl	11000 <strchr@plt>
   14bbc:	cmp	r0, #0
   14bc0:	beq	14c08 <__assert_fail@plt+0x3b0c>
   14bc4:	ldrb	r0, [r4, #1]
   14bc8:	ldr	sl, [sp, #12]
   14bcc:	cmp	r0, #66	; 0x42
   14bd0:	cmpne	r0, #68	; 0x44
   14bd4:	bne	14cdc <__assert_fail@plt+0x3be0>
   14bd8:	mov	r0, #2
   14bdc:	mov	r7, #1000	; 0x3e8
   14be0:	str	r0, [sp, #8]
   14be4:	b	14c0c <__assert_fail@plt+0x3b10>
   14be8:	ldr	r0, [sp, #12]
   14bec:	b	14c00 <__assert_fail@plt+0x3b04>
   14bf0:	ldr	sl, [sp, #12]
   14bf4:	b	14f80 <__assert_fail@plt+0x3e84>
   14bf8:	ldr	r0, [sp, #12]
   14bfc:	orr	r7, r7, #2
   14c00:	stm	r0, {r6, r9}
   14c04:	b	14f84 <__assert_fail@plt+0x3e88>
   14c08:	ldr	sl, [sp, #12]
   14c0c:	cmp	r5, #89	; 0x59
   14c10:	bgt	14c78 <__assert_fail@plt+0x3b7c>
   14c14:	sub	r0, r5, #66	; 0x42
   14c18:	cmp	r0, #14
   14c1c:	bhi	14cfc <__assert_fail@plt+0x3c00>
   14c20:	add	r1, pc, #0
   14c24:	ldr	pc, [r1, r0, lsl #2]
   14c28:	andeq	r4, r1, r4, ror #24
   14c2c:	andeq	r4, r1, r4, lsl lr
   14c30:	andeq	r4, r1, r4, lsl lr
   14c34:	andeq	r4, r1, r4, lsr #28
   14c38:	andeq	r4, r1, r4, lsl lr
   14c3c:	andeq	r4, r1, r8, asr sp
   14c40:	andeq	r4, r1, r4, lsl lr
   14c44:	andeq	r4, r1, r4, lsl lr
   14c48:	andeq	r4, r1, r4, lsl lr
   14c4c:	andeq	r4, r1, r0, lsl #27
   14c50:	andeq	r4, r1, r4, lsl lr
   14c54:	muleq	r1, r4, sp
   14c58:	andeq	r4, r1, r4, lsl lr
   14c5c:	andeq	r4, r1, r4, lsl lr
   14c60:	andeq	r4, r1, ip, asr #28
   14c64:	cmn	r9, #1
   14c68:	ble	14e74 <__assert_fail@plt+0x3d78>
   14c6c:	cmp	r9, #2097152	; 0x200000
   14c70:	blt	14ea0 <__assert_fail@plt+0x3da4>
   14c74:	b	14f20 <__assert_fail@plt+0x3e24>
   14c78:	cmp	r5, #115	; 0x73
   14c7c:	bgt	14d34 <__assert_fail@plt+0x3c38>
   14c80:	sub	r0, r5, #98	; 0x62
   14c84:	cmp	r0, #11
   14c88:	bhi	14de4 <__assert_fail@plt+0x3ce8>
   14c8c:	add	r1, pc, #4
   14c90:	mov	r4, #0
   14c94:	ldr	pc, [r1, r0, lsl #2]
   14c98:	andeq	r4, r1, r8, asr #25
   14c9c:	andeq	r4, r1, r4, asr pc
   14ca0:	andeq	r4, r1, r4, lsl lr
   14ca4:	andeq	r4, r1, r4, lsl lr
   14ca8:	andeq	r4, r1, r4, lsl lr
   14cac:	andeq	r4, r1, r8, asr sp
   14cb0:	andeq	r4, r1, r4, lsl lr
   14cb4:	andeq	r4, r1, r4, lsl lr
   14cb8:	andeq	r4, r1, r4, lsl lr
   14cbc:	andeq	r4, r1, r0, lsl #27
   14cc0:	andeq	r4, r1, r4, lsl lr
   14cc4:	muleq	r1, r4, sp
   14cc8:	cmn	r9, #1
   14ccc:	ble	14eb4 <__assert_fail@plt+0x3db8>
   14cd0:	cmp	r9, #4194304	; 0x400000
   14cd4:	blt	14ee0 <__assert_fail@plt+0x3de4>
   14cd8:	b	14f20 <__assert_fail@plt+0x3e24>
   14cdc:	cmp	r0, #105	; 0x69
   14ce0:	bne	14c0c <__assert_fail@plt+0x3b10>
   14ce4:	ldrb	r0, [r4, #2]
   14ce8:	mov	r1, #1
   14cec:	cmp	r0, #66	; 0x42
   14cf0:	movweq	r1, #3
   14cf4:	str	r1, [sp, #8]
   14cf8:	b	14c0c <__assert_fail@plt+0x3b10>
   14cfc:	cmp	r5, #84	; 0x54
   14d00:	beq	14dbc <__assert_fail@plt+0x3cc0>
   14d04:	cmp	r5, #89	; 0x59
   14d08:	bne	14e14 <__assert_fail@plt+0x3d18>
   14d0c:	mov	r4, #0
   14d10:	mvn	r6, #7
   14d14:	add	r5, sp, #16
   14d18:	mov	r0, r5
   14d1c:	mov	r1, r7
   14d20:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14d24:	orr	r4, r0, r4
   14d28:	adds	r6, r6, #1
   14d2c:	bcc	14d18 <__assert_fail@plt+0x3c1c>
   14d30:	b	14f54 <__assert_fail@plt+0x3e58>
   14d34:	cmp	r5, #116	; 0x74
   14d38:	beq	14dbc <__assert_fail@plt+0x3cc0>
   14d3c:	cmp	r5, #119	; 0x77
   14d40:	bne	14e14 <__assert_fail@plt+0x3d18>
   14d44:	cmn	r9, #1
   14d48:	ble	14ef4 <__assert_fail@plt+0x3df8>
   14d4c:	cmp	r9, #1073741824	; 0x40000000
   14d50:	bge	14f20 <__assert_fail@plt+0x3e24>
   14d54:	b	14f3c <__assert_fail@plt+0x3e40>
   14d58:	mov	r4, #0
   14d5c:	mvn	r6, #2
   14d60:	add	r5, sp, #16
   14d64:	mov	r0, r5
   14d68:	mov	r1, r7
   14d6c:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14d70:	orr	r4, r0, r4
   14d74:	adds	r6, r6, #1
   14d78:	bcc	14d64 <__assert_fail@plt+0x3c68>
   14d7c:	b	14f54 <__assert_fail@plt+0x3e58>
   14d80:	add	r0, sp, #16
   14d84:	mov	r1, r7
   14d88:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14d8c:	mov	r4, r0
   14d90:	b	14f54 <__assert_fail@plt+0x3e58>
   14d94:	mov	r4, #0
   14d98:	mvn	r6, #1
   14d9c:	add	r5, sp, #16
   14da0:	mov	r0, r5
   14da4:	mov	r1, r7
   14da8:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14dac:	orr	r4, r0, r4
   14db0:	adds	r6, r6, #1
   14db4:	bcc	14da0 <__assert_fail@plt+0x3ca4>
   14db8:	b	14f54 <__assert_fail@plt+0x3e58>
   14dbc:	mov	r4, #0
   14dc0:	mvn	r6, #3
   14dc4:	add	r5, sp, #16
   14dc8:	mov	r0, r5
   14dcc:	mov	r1, r7
   14dd0:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14dd4:	orr	r4, r0, r4
   14dd8:	adds	r6, r6, #1
   14ddc:	bcc	14dc8 <__assert_fail@plt+0x3ccc>
   14de0:	b	14f54 <__assert_fail@plt+0x3e58>
   14de4:	cmp	r5, #90	; 0x5a
   14de8:	bne	14e14 <__assert_fail@plt+0x3d18>
   14dec:	mov	r4, #0
   14df0:	mvn	r6, #6
   14df4:	add	r5, sp, #16
   14df8:	mov	r0, r5
   14dfc:	mov	r1, r7
   14e00:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14e04:	orr	r4, r0, r4
   14e08:	adds	r6, r6, #1
   14e0c:	bcc	14df8 <__assert_fail@plt+0x3cfc>
   14e10:	b	14f54 <__assert_fail@plt+0x3e58>
   14e14:	stm	sl, {r6, r9}
   14e18:	ldr	r7, [sp, #4]
   14e1c:	orr	r7, r7, #2
   14e20:	b	14f84 <__assert_fail@plt+0x3e88>
   14e24:	mov	r4, #0
   14e28:	mvn	r6, #5
   14e2c:	add	r5, sp, #16
   14e30:	mov	r0, r5
   14e34:	mov	r1, r7
   14e38:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14e3c:	orr	r4, r0, r4
   14e40:	adds	r6, r6, #1
   14e44:	bcc	14e30 <__assert_fail@plt+0x3d34>
   14e48:	b	14f54 <__assert_fail@plt+0x3e58>
   14e4c:	mov	r4, #0
   14e50:	mvn	r6, #4
   14e54:	add	r5, sp, #16
   14e58:	mov	r0, r5
   14e5c:	mov	r1, r7
   14e60:	bl	14fb0 <__assert_fail@plt+0x3eb4>
   14e64:	orr	r4, r0, r4
   14e68:	adds	r6, r6, #1
   14e6c:	bcc	14e58 <__assert_fail@plt+0x3d5c>
   14e70:	b	14f54 <__assert_fail@plt+0x3e58>
   14e74:	and	r0, r6, r9
   14e78:	cmn	r0, #1
   14e7c:	beq	14ea0 <__assert_fail@plt+0x3da4>
   14e80:	mov	r0, #0
   14e84:	mov	r1, #-2147483648	; 0x80000000
   14e88:	mov	r2, r6
   14e8c:	mov	r3, r9
   14e90:	bl	153e4 <__assert_fail@plt+0x42e8>
   14e94:	subs	r0, r0, #1024	; 0x400
   14e98:	sbcs	r0, r1, #0
   14e9c:	blt	14f20 <__assert_fail@plt+0x3e24>
   14ea0:	lsl	r0, r9, #10
   14ea4:	lsl	r1, r6, #10
   14ea8:	mov	r4, #0
   14eac:	orr	r0, r0, r6, lsr #22
   14eb0:	b	14f4c <__assert_fail@plt+0x3e50>
   14eb4:	and	r0, r6, r9
   14eb8:	cmn	r0, #1
   14ebc:	beq	14ee0 <__assert_fail@plt+0x3de4>
   14ec0:	mov	r0, #0
   14ec4:	mov	r1, #-2147483648	; 0x80000000
   14ec8:	mov	r2, r6
   14ecc:	mov	r3, r9
   14ed0:	bl	153e4 <__assert_fail@plt+0x42e8>
   14ed4:	subs	r0, r0, #512	; 0x200
   14ed8:	sbcs	r0, r1, #0
   14edc:	blt	14f20 <__assert_fail@plt+0x3e24>
   14ee0:	lsl	r0, r9, #9
   14ee4:	lsl	r1, r6, #9
   14ee8:	mov	r4, #0
   14eec:	orr	r0, r0, r6, lsr #23
   14ef0:	b	14f4c <__assert_fail@plt+0x3e50>
   14ef4:	and	r0, r6, r9
   14ef8:	cmn	r0, #1
   14efc:	beq	14f3c <__assert_fail@plt+0x3e40>
   14f00:	mov	r0, #0
   14f04:	mov	r1, #-2147483648	; 0x80000000
   14f08:	mov	r2, r6
   14f0c:	mov	r3, r9
   14f10:	bl	153e4 <__assert_fail@plt+0x42e8>
   14f14:	subs	r0, r0, #2
   14f18:	sbcs	r0, r1, #0
   14f1c:	bge	14f3c <__assert_fail@plt+0x3e40>
   14f20:	cmp	r9, #0
   14f24:	mvn	r0, #-2147483648	; 0x80000000
   14f28:	mvn	r1, #0
   14f2c:	mov	r4, #1
   14f30:	movmi	r0, #-2147483648	; 0x80000000
   14f34:	movwmi	r1, #0
   14f38:	b	14f4c <__assert_fail@plt+0x3e50>
   14f3c:	lsl	r0, r9, #1
   14f40:	lsl	r1, r6, #1
   14f44:	mov	r4, #0
   14f48:	orr	r0, r0, r6, lsr #31
   14f4c:	str	r1, [sp, #16]
   14f50:	str	r0, [sp, #20]
   14f54:	ldr	r0, [r8]
   14f58:	ldr	r2, [sp, #8]
   14f5c:	ldr	r7, [sp, #4]
   14f60:	add	r1, r0, r2
   14f64:	orr	r7, r4, r7
   14f68:	str	r1, [r8]
   14f6c:	ldrb	r0, [r0, r2]
   14f70:	ldr	r6, [sp, #16]
   14f74:	ldr	r9, [sp, #20]
   14f78:	cmp	r0, #0
   14f7c:	orrne	r7, r7, #2
   14f80:	stm	sl, {r6, r9}
   14f84:	mov	r0, r7
   14f88:	sub	sp, fp, #28
   14f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f90:	movw	r0, #25081	; 0x61f9
   14f94:	movw	r1, #25119	; 0x621f
   14f98:	movw	r3, #25135	; 0x622f
   14f9c:	mov	r2, #85	; 0x55
   14fa0:	movt	r0, #1
   14fa4:	movt	r1, #1
   14fa8:	movt	r3, #1
   14fac:	bl	110fc <__assert_fail@plt>
   14fb0:	push	{r4, r5, r6, r7, fp, lr}
   14fb4:	add	fp, sp, #16
   14fb8:	mov	r5, r1
   14fbc:	mov	r4, r0
   14fc0:	cmn	r1, #1
   14fc4:	ble	14fec <__assert_fail@plt+0x3ef0>
   14fc8:	ldrd	r6, [r4]
   14fcc:	cmp	r5, #0
   14fd0:	beq	15098 <__assert_fail@plt+0x3f9c>
   14fd4:	cmn	r7, #1
   14fd8:	ble	15024 <__assert_fail@plt+0x3f28>
   14fdc:	asr	r3, r5, #31
   14fe0:	mvn	r0, #0
   14fe4:	mvn	r1, #-2147483648	; 0x80000000
   14fe8:	b	1500c <__assert_fail@plt+0x3f10>
   14fec:	ldrd	r6, [r4]
   14ff0:	cmn	r7, #1
   14ff4:	ble	15054 <__assert_fail@plt+0x3f58>
   14ff8:	cmn	r5, #1
   14ffc:	beq	15098 <__assert_fail@plt+0x3f9c>
   15000:	asr	r3, r5, #31
   15004:	mov	r0, #0
   15008:	mov	r1, #-2147483648	; 0x80000000
   1500c:	mov	r2, r5
   15010:	bl	153e4 <__assert_fail@plt+0x42e8>
   15014:	subs	r0, r0, r6
   15018:	sbcs	r0, r1, r7
   1501c:	blt	15074 <__assert_fail@plt+0x3f78>
   15020:	b	15098 <__assert_fail@plt+0x3f9c>
   15024:	and	r0, r6, r7
   15028:	cmn	r0, #1
   1502c:	beq	15090 <__assert_fail@plt+0x3f94>
   15030:	mov	r0, #0
   15034:	mov	r1, #-2147483648	; 0x80000000
   15038:	mov	r2, r6
   1503c:	mov	r3, r7
   15040:	bl	153e4 <__assert_fail@plt+0x42e8>
   15044:	subs	r0, r0, r5
   15048:	sbcs	r0, r1, r5, asr #31
   1504c:	blt	15074 <__assert_fail@plt+0x3f78>
   15050:	b	15098 <__assert_fail@plt+0x3f9c>
   15054:	asr	r3, r5, #31
   15058:	mvn	r0, #0
   1505c:	mvn	r1, #-2147483648	; 0x80000000
   15060:	mov	r2, r5
   15064:	bl	153e4 <__assert_fail@plt+0x42e8>
   15068:	subs	r0, r6, r0
   1506c:	sbcs	r0, r7, r1
   15070:	bge	15098 <__assert_fail@plt+0x3f9c>
   15074:	cmp	r7, #0
   15078:	mvn	r1, #-2147483648	; 0x80000000
   1507c:	mvn	r2, #0
   15080:	mov	r0, #1
   15084:	movmi	r1, #-2147483648	; 0x80000000
   15088:	movwmi	r2, #0
   1508c:	b	150ac <__assert_fail@plt+0x3fb0>
   15090:	mvn	r6, #0
   15094:	mvn	r7, #0
   15098:	umull	r2, r0, r6, r5
   1509c:	asr	r1, r5, #31
   150a0:	mla	r0, r6, r1, r0
   150a4:	mla	r1, r7, r5, r0
   150a8:	mov	r0, #0
   150ac:	str	r2, [r4]
   150b0:	str	r1, [r4, #4]
   150b4:	pop	{r4, r5, r6, r7, fp, pc}
   150b8:	clz	r2, r1
   150bc:	clz	r3, r0
   150c0:	lsr	r2, r2, #5
   150c4:	lsr	r3, r3, #5
   150c8:	orrs	r2, r3, r2
   150cc:	movwne	r1, #1
   150d0:	movwne	r0, #1
   150d4:	cmp	r1, #0
   150d8:	beq	15108 <__assert_fail@plt+0x400c>
   150dc:	mvn	r2, #-2147483648	; 0x80000000
   150e0:	udiv	r2, r2, r1
   150e4:	cmp	r2, r0
   150e8:	bcs	15108 <__assert_fail@plt+0x400c>
   150ec:	push	{fp, lr}
   150f0:	mov	fp, sp
   150f4:	bl	1100c <__errno_location@plt>
   150f8:	mov	r1, #12
   150fc:	str	r1, [r0]
   15100:	mov	r0, #0
   15104:	pop	{fp, pc}
   15108:	b	10e80 <calloc@plt>
   1510c:	cmp	r0, #0
   15110:	movweq	r0, #1
   15114:	cmn	r0, #1
   15118:	ble	15120 <__assert_fail@plt+0x4024>
   1511c:	b	10f94 <malloc@plt>
   15120:	push	{fp, lr}
   15124:	mov	fp, sp
   15128:	bl	1100c <__errno_location@plt>
   1512c:	mov	r1, #12
   15130:	str	r1, [r0]
   15134:	mov	r0, #0
   15138:	pop	{fp, pc}
   1513c:	push	{fp, lr}
   15140:	mov	fp, sp
   15144:	cmp	r0, #0
   15148:	beq	15164 <__assert_fail@plt+0x4068>
   1514c:	cmp	r1, #0
   15150:	beq	15170 <__assert_fail@plt+0x4074>
   15154:	cmn	r1, #1
   15158:	ble	15178 <__assert_fail@plt+0x407c>
   1515c:	pop	{fp, lr}
   15160:	b	10f28 <realloc@plt>
   15164:	mov	r0, r1
   15168:	pop	{fp, lr}
   1516c:	b	1510c <__assert_fail@plt+0x4010>
   15170:	bl	12534 <__assert_fail@plt+0x1438>
   15174:	b	15184 <__assert_fail@plt+0x4088>
   15178:	bl	1100c <__errno_location@plt>
   1517c:	mov	r1, #12
   15180:	str	r1, [r0]
   15184:	mov	r0, #0
   15188:	pop	{fp, pc}
   1518c:	push	{r4, r5, r6, sl, fp, lr}
   15190:	add	fp, sp, #16
   15194:	mov	r4, r0
   15198:	bl	10f64 <__fpending@plt>
   1519c:	mov	r5, r0
   151a0:	mov	r0, r4
   151a4:	bl	10f70 <ferror_unlocked@plt>
   151a8:	mov	r6, r0
   151ac:	mov	r0, r4
   151b0:	bl	1243c <__assert_fail@plt+0x1340>
   151b4:	cmp	r6, #0
   151b8:	beq	151d8 <__assert_fail@plt+0x40dc>
   151bc:	mvn	r4, #0
   151c0:	cmp	r0, #0
   151c4:	bne	15204 <__assert_fail@plt+0x4108>
   151c8:	bl	1100c <__errno_location@plt>
   151cc:	mov	r1, #0
   151d0:	str	r1, [r0]
   151d4:	b	15204 <__assert_fail@plt+0x4108>
   151d8:	cmp	r0, #0
   151dc:	mov	r4, r0
   151e0:	mvnne	r4, #0
   151e4:	cmp	r5, #0
   151e8:	bne	15204 <__assert_fail@plt+0x4108>
   151ec:	cmp	r0, #0
   151f0:	beq	15204 <__assert_fail@plt+0x4108>
   151f4:	bl	1100c <__errno_location@plt>
   151f8:	ldr	r0, [r0]
   151fc:	subs	r4, r0, #9
   15200:	mvnne	r4, #0
   15204:	mov	r0, r4
   15208:	pop	{r4, r5, r6, sl, fp, pc}
   1520c:	push	{fp, lr}
   15210:	mov	fp, sp
   15214:	mov	r0, #14
   15218:	bl	1109c <nl_langinfo@plt>
   1521c:	movw	r1, #23440	; 0x5b90
   15220:	cmp	r0, #0
   15224:	movt	r1, #1
   15228:	movne	r1, r0
   1522c:	movw	r0, #25213	; 0x627d
   15230:	ldrb	r2, [r1]
   15234:	movt	r0, #1
   15238:	cmp	r2, #0
   1523c:	movne	r0, r1
   15240:	pop	{fp, pc}
   15244:	push	{r4, r5, r6, r7, fp, lr}
   15248:	add	fp, sp, #16
   1524c:	sub	sp, sp, #8
   15250:	cmp	r0, #0
   15254:	add	r5, sp, #4
   15258:	mov	r7, r2
   1525c:	mov	r4, r1
   15260:	movne	r5, r0
   15264:	mov	r0, r5
   15268:	bl	10f7c <mbrtowc@plt>
   1526c:	mov	r6, r0
   15270:	cmp	r7, #0
   15274:	beq	1529c <__assert_fail@plt+0x41a0>
   15278:	cmn	r6, #2
   1527c:	bcc	1529c <__assert_fail@plt+0x41a0>
   15280:	mov	r0, #0
   15284:	bl	152e4 <__assert_fail@plt+0x41e8>
   15288:	cmp	r0, #0
   1528c:	bne	1529c <__assert_fail@plt+0x41a0>
   15290:	ldrb	r0, [r4]
   15294:	mov	r6, #1
   15298:	str	r0, [r5]
   1529c:	mov	r0, r6
   152a0:	sub	sp, fp, #16
   152a4:	pop	{r4, r5, r6, r7, fp, pc}
   152a8:	cmp	r2, #0
   152ac:	beq	152dc <__assert_fail@plt+0x41e0>
   152b0:	mvn	r3, #0
   152b4:	udiv	r3, r3, r2
   152b8:	cmp	r3, r1
   152bc:	bcs	152dc <__assert_fail@plt+0x41e0>
   152c0:	push	{fp, lr}
   152c4:	mov	fp, sp
   152c8:	bl	1100c <__errno_location@plt>
   152cc:	mov	r1, #12
   152d0:	str	r1, [r0]
   152d4:	mov	r0, #0
   152d8:	pop	{fp, pc}
   152dc:	mul	r1, r2, r1
   152e0:	b	1513c <__assert_fail@plt+0x4040>
   152e4:	push	{r4, sl, fp, lr}
   152e8:	add	fp, sp, #8
   152ec:	sub	sp, sp, #264	; 0x108
   152f0:	add	r1, sp, #7
   152f4:	movw	r2, #257	; 0x101
   152f8:	bl	15350 <__assert_fail@plt+0x4254>
   152fc:	mov	r4, #0
   15300:	cmp	r0, #0
   15304:	bne	15344 <__assert_fail@plt+0x4248>
   15308:	movw	r1, #25219	; 0x6283
   1530c:	add	r0, sp, #7
   15310:	mov	r2, #2
   15314:	movt	r1, #1
   15318:	bl	10fe8 <bcmp@plt>
   1531c:	cmp	r0, #0
   15320:	beq	15344 <__assert_fail@plt+0x4248>
   15324:	movw	r1, #25221	; 0x6285
   15328:	add	r0, sp, #7
   1532c:	mov	r2, #6
   15330:	movt	r1, #1
   15334:	bl	10fe8 <bcmp@plt>
   15338:	cmp	r0, #0
   1533c:	mov	r4, r0
   15340:	movwne	r4, #1
   15344:	mov	r0, r4
   15348:	sub	sp, fp, #8
   1534c:	pop	{r4, sl, fp, pc}
   15350:	push	{r4, r5, r6, r7, fp, lr}
   15354:	add	fp, sp, #16
   15358:	mov	r4, r1
   1535c:	mov	r1, #0
   15360:	mov	r6, r2
   15364:	bl	11084 <setlocale@plt>
   15368:	cmp	r0, #0
   1536c:	beq	15398 <__assert_fail@plt+0x429c>
   15370:	mov	r7, r0
   15374:	bl	10ff4 <strlen@plt>
   15378:	cmp	r0, r6
   1537c:	bcs	153ac <__assert_fail@plt+0x42b0>
   15380:	add	r2, r0, #1
   15384:	mov	r0, r4
   15388:	mov	r1, r7
   1538c:	bl	10eec <memcpy@plt>
   15390:	mov	r5, #0
   15394:	b	153d4 <__assert_fail@plt+0x42d8>
   15398:	cmp	r6, #0
   1539c:	mov	r5, #22
   153a0:	movne	r0, #0
   153a4:	strbne	r0, [r4]
   153a8:	b	153d4 <__assert_fail@plt+0x42d8>
   153ac:	mov	r5, #34	; 0x22
   153b0:	cmp	r6, #0
   153b4:	beq	153d4 <__assert_fail@plt+0x42d8>
   153b8:	sub	r6, r6, #1
   153bc:	mov	r0, r4
   153c0:	mov	r1, r7
   153c4:	mov	r2, r6
   153c8:	bl	10eec <memcpy@plt>
   153cc:	mov	r0, #0
   153d0:	strb	r0, [r4, r6]
   153d4:	mov	r0, r5
   153d8:	pop	{r4, r5, r6, r7, fp, pc}
   153dc:	mov	r1, #0
   153e0:	b	11084 <setlocale@plt>
   153e4:	cmp	r3, #0
   153e8:	cmpeq	r2, #0
   153ec:	bne	15410 <__assert_fail@plt+0x4314>
   153f0:	cmp	r1, #0
   153f4:	movlt	r1, #-2147483648	; 0x80000000
   153f8:	movlt	r0, #0
   153fc:	blt	1540c <__assert_fail@plt+0x4310>
   15400:	cmpeq	r0, #0
   15404:	mvnne	r1, #-2147483648	; 0x80000000
   15408:	mvnne	r0, #0
   1540c:	b	154b8 <__assert_fail@plt+0x43bc>
   15410:	sub	sp, sp, #8
   15414:	push	{sp, lr}
   15418:	cmp	r1, #0
   1541c:	blt	1543c <__assert_fail@plt+0x4340>
   15420:	cmp	r3, #0
   15424:	blt	15470 <__assert_fail@plt+0x4374>
   15428:	bl	154c8 <__assert_fail@plt+0x43cc>
   1542c:	ldr	lr, [sp, #4]
   15430:	add	sp, sp, #8
   15434:	pop	{r2, r3}
   15438:	bx	lr
   1543c:	rsbs	r0, r0, #0
   15440:	sbc	r1, r1, r1, lsl #1
   15444:	cmp	r3, #0
   15448:	blt	15494 <__assert_fail@plt+0x4398>
   1544c:	bl	154c8 <__assert_fail@plt+0x43cc>
   15450:	ldr	lr, [sp, #4]
   15454:	add	sp, sp, #8
   15458:	pop	{r2, r3}
   1545c:	rsbs	r0, r0, #0
   15460:	sbc	r1, r1, r1, lsl #1
   15464:	rsbs	r2, r2, #0
   15468:	sbc	r3, r3, r3, lsl #1
   1546c:	bx	lr
   15470:	rsbs	r2, r2, #0
   15474:	sbc	r3, r3, r3, lsl #1
   15478:	bl	154c8 <__assert_fail@plt+0x43cc>
   1547c:	ldr	lr, [sp, #4]
   15480:	add	sp, sp, #8
   15484:	pop	{r2, r3}
   15488:	rsbs	r0, r0, #0
   1548c:	sbc	r1, r1, r1, lsl #1
   15490:	bx	lr
   15494:	rsbs	r2, r2, #0
   15498:	sbc	r3, r3, r3, lsl #1
   1549c:	bl	154c8 <__assert_fail@plt+0x43cc>
   154a0:	ldr	lr, [sp, #4]
   154a4:	add	sp, sp, #8
   154a8:	pop	{r2, r3}
   154ac:	rsbs	r2, r2, #0
   154b0:	sbc	r3, r3, r3, lsl #1
   154b4:	bx	lr
   154b8:	push	{r1, lr}
   154bc:	mov	r0, #8
   154c0:	bl	10e98 <raise@plt>
   154c4:	pop	{r1, pc}
   154c8:	cmp	r1, r3
   154cc:	cmpeq	r0, r2
   154d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154d4:	mov	r4, r0
   154d8:	movcc	r0, #0
   154dc:	mov	r5, r1
   154e0:	ldr	lr, [sp, #36]	; 0x24
   154e4:	movcc	r1, r0
   154e8:	bcc	155e4 <__assert_fail@plt+0x44e8>
   154ec:	cmp	r3, #0
   154f0:	clzeq	ip, r2
   154f4:	clzne	ip, r3
   154f8:	addeq	ip, ip, #32
   154fc:	cmp	r5, #0
   15500:	clzeq	r1, r4
   15504:	addeq	r1, r1, #32
   15508:	clzne	r1, r5
   1550c:	sub	ip, ip, r1
   15510:	sub	sl, ip, #32
   15514:	lsl	r9, r3, ip
   15518:	rsb	fp, ip, #32
   1551c:	orr	r9, r9, r2, lsl sl
   15520:	orr	r9, r9, r2, lsr fp
   15524:	lsl	r8, r2, ip
   15528:	cmp	r5, r9
   1552c:	cmpeq	r4, r8
   15530:	movcc	r0, #0
   15534:	movcc	r1, r0
   15538:	bcc	15554 <__assert_fail@plt+0x4458>
   1553c:	mov	r0, #1
   15540:	subs	r4, r4, r8
   15544:	lsl	r1, r0, sl
   15548:	orr	r1, r1, r0, lsr fp
   1554c:	lsl	r0, r0, ip
   15550:	sbc	r5, r5, r9
   15554:	cmp	ip, #0
   15558:	beq	155e4 <__assert_fail@plt+0x44e8>
   1555c:	lsr	r6, r8, #1
   15560:	orr	r6, r6, r9, lsl #31
   15564:	lsr	r7, r9, #1
   15568:	mov	r2, ip
   1556c:	b	15590 <__assert_fail@plt+0x4494>
   15570:	subs	r3, r4, r6
   15574:	sbc	r8, r5, r7
   15578:	adds	r3, r3, r3
   1557c:	adc	r8, r8, r8
   15580:	adds	r4, r3, #1
   15584:	adc	r5, r8, #0
   15588:	subs	r2, r2, #1
   1558c:	beq	155ac <__assert_fail@plt+0x44b0>
   15590:	cmp	r5, r7
   15594:	cmpeq	r4, r6
   15598:	bcs	15570 <__assert_fail@plt+0x4474>
   1559c:	adds	r4, r4, r4
   155a0:	adc	r5, r5, r5
   155a4:	subs	r2, r2, #1
   155a8:	bne	15590 <__assert_fail@plt+0x4494>
   155ac:	lsr	r3, r4, ip
   155b0:	orr	r3, r3, r5, lsl fp
   155b4:	lsr	r2, r5, ip
   155b8:	orr	r3, r3, r5, lsr sl
   155bc:	adds	r0, r0, r4
   155c0:	mov	r4, r3
   155c4:	lsl	r3, r2, ip
   155c8:	orr	r3, r3, r4, lsl sl
   155cc:	lsl	ip, r4, ip
   155d0:	orr	r3, r3, r4, lsr fp
   155d4:	adc	r1, r1, r5
   155d8:	subs	r0, r0, ip
   155dc:	mov	r5, r2
   155e0:	sbc	r1, r1, r3
   155e4:	cmp	lr, #0
   155e8:	strdne	r4, [lr]
   155ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155f4:	mov	r7, r0
   155f8:	ldr	r6, [pc, #72]	; 15648 <__assert_fail@plt+0x454c>
   155fc:	ldr	r5, [pc, #72]	; 1564c <__assert_fail@plt+0x4550>
   15600:	add	r6, pc, r6
   15604:	add	r5, pc, r5
   15608:	sub	r6, r6, r5
   1560c:	mov	r8, r1
   15610:	mov	r9, r2
   15614:	bl	10e60 <calloc@plt-0x20>
   15618:	asrs	r6, r6, #2
   1561c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15620:	mov	r4, #0
   15624:	add	r4, r4, #1
   15628:	ldr	r3, [r5], #4
   1562c:	mov	r2, r9
   15630:	mov	r1, r8
   15634:	mov	r0, r7
   15638:	blx	r3
   1563c:	cmp	r6, r4
   15640:	bne	15624 <__assert_fail@plt+0x4528>
   15644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15648:	andeq	r1, r1, r4, lsl #18
   1564c:	strdeq	r1, [r1], -ip
   15650:	bx	lr
   15654:	ldr	r3, [pc, #12]	; 15668 <__assert_fail@plt+0x456c>
   15658:	mov	r1, #0
   1565c:	add	r3, pc, r3
   15660:	ldr	r2, [r3]
   15664:	b	11018 <__cxa_atexit@plt>
   15668:	andeq	r1, r1, r8, lsl #21

Disassembly of section .fini:

0001566c <.fini>:
   1566c:	push	{r3, lr}
   15670:	pop	{r3, pc}
