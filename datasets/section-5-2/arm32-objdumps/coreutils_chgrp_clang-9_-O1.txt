
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

000111a0 <.init>:
   111a0:	push	{r3, lr}
   111a4:	bl	1153c <__assert_fail@plt+0x4c>
   111a8:	pop	{r3, pc}

Disassembly of section .plt:

000111ac <fstatfs64@plt-0x14>:
   111ac:	push	{lr}		; (str lr, [sp, #-4]!)
   111b0:	ldr	lr, [pc, #4]	; 111bc <fstatfs64@plt-0x4>
   111b4:	add	lr, pc, lr
   111b8:	ldr	pc, [lr, #8]!
   111bc:	andeq	sl, r1, r4, asr #28

000111c0 <fstatfs64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3652]!	; 0xe44

000111cc <calloc@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3644]!	; 0xe3c

000111d8 <endgrent@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3636]!	; 0xe34

000111e4 <fputs_unlocked@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3628]!	; 0xe2c

000111f0 <raise@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3620]!	; 0xe24

000111fc <strcmp@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3612]!	; 0xe1c

00011208 <getpwuid@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3604]!	; 0xe14

00011214 <fflush@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011220 <memmove@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3588]!	; 0xe04

0001122c <free@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3580]!	; 0xdfc

00011238 <_exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3572]!	; 0xdf4

00011244 <memcpy@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3564]!	; 0xdec

00011250 <mbsinit@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3556]!	; 0xde4

0001125c <stpcpy@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3548]!	; 0xddc

00011268 <dcgettext@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3540]!	; 0xdd4

00011274 <realloc@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011280 <textdomain@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3524]!	; 0xdc4

0001128c <__fxstatat64@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3516]!	; 0xdbc

00011298 <iswprint@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112a4 <__fxstat64@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3500]!	; 0xdac

000112b0 <fwrite@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3492]!	; 0xda4

000112bc <lseek64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3484]!	; 0xd9c

000112c8 <__ctype_get_mb_cur_max@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3476]!	; 0xd94

000112d4 <__fpending@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3468]!	; 0xd8c

000112e0 <ferror_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3460]!	; 0xd84

000112ec <mbrtowc@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3452]!	; 0xd7c

000112f8 <error@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3444]!	; 0xd74

00011304 <open64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011310 <malloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3428]!	; 0xd64

0001131c <__libc_start_main@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3420]!	; 0xd5c

00011328 <__freading@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3412]!	; 0xd54

00011334 <__gmon_start__@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011340 <getopt_long@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3396]!	; 0xd44

0001134c <__ctype_b_loc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3388]!	; 0xd3c

00011358 <exit@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3380]!	; 0xd34

00011364 <bcmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011370 <strlen@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3364]!	; 0xd24

0001137c <strchr@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3356]!	; 0xd1c

00011388 <openat64@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3348]!	; 0xd14

00011394 <fchown@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3340]!	; 0xd0c

000113a0 <__errno_location@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3332]!	; 0xd04

000113ac <__cxa_atexit@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3324]!	; 0xcfc

000113b8 <memset@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3316]!	; 0xcf4

000113c4 <__printf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3308]!	; 0xcec

000113d0 <fileno@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3300]!	; 0xce4

000113dc <strtoumax@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3292]!	; 0xcdc

000113e8 <__fprintf_chk@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3284]!	; 0xcd4

000113f4 <fclose@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3276]!	; 0xccc

00011400 <fseeko64@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3268]!	; 0xcc4

0001140c <fcntl64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3260]!	; 0xcbc

00011418 <setlocale@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3252]!	; 0xcb4

00011424 <strrchr@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3244]!	; 0xcac

00011430 <nl_langinfo@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3236]!	; 0xca4

0001143c <readdir64@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3228]!	; 0xc9c

00011448 <fdopendir@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3220]!	; 0xc94

00011454 <dirfd@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011460 <fchdir@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3204]!	; 0xc84

0001146c <qsort@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3196]!	; 0xc7c

00011478 <fchownat@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3188]!	; 0xc74

00011484 <bindtextdomain@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011490 <__xstat64@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3172]!	; 0xc64

0001149c <strncmp@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3164]!	; 0xc5c

000114a8 <abort@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3156]!	; 0xc54

000114b4 <close@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3148]!	; 0xc4c

000114c0 <__lxstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3140]!	; 0xc44

000114cc <closedir@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000114d8 <getgrgid@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3124]!	; 0xc34

000114e4 <getgrnam@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000114f0 <__assert_fail@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00011500 <.text>:
   11500:	mov	fp, #0
   11504:	mov	lr, #0
   11508:	pop	{r1}		; (ldr r1, [sp], #4)
   1150c:	mov	r2, sp
   11510:	push	{r2}		; (str r2, [sp, #-4]!)
   11514:	push	{r0}		; (str r0, [sp, #-4]!)
   11518:	ldr	ip, [pc, #16]	; 11530 <__assert_fail@plt+0x40>
   1151c:	push	{ip}		; (str ip, [sp, #-4]!)
   11520:	ldr	r0, [pc, #12]	; 11534 <__assert_fail@plt+0x44>
   11524:	ldr	r3, [pc, #12]	; 11538 <__assert_fail@plt+0x48>
   11528:	bl	1131c <__libc_start_main@plt>
   1152c:	bl	114a8 <abort@plt>
   11530:	andeq	r9, r1, r0, lsl #22
   11534:	andeq	r1, r1, r4, asr r9
   11538:	andeq	r9, r1, r0, lsr #21
   1153c:	ldr	r3, [pc, #20]	; 11558 <__assert_fail@plt+0x68>
   11540:	ldr	r2, [pc, #20]	; 1155c <__assert_fail@plt+0x6c>
   11544:	add	r3, pc, r3
   11548:	ldr	r2, [r3, r2]
   1154c:	cmp	r2, #0
   11550:	bxeq	lr
   11554:	b	11334 <__gmon_start__@plt>
   11558:			; <UNDEFINED> instruction: 0x0001aab4
   1155c:	andeq	r0, r0, r0, lsr #2
   11560:	ldr	r0, [pc, #24]	; 11580 <__assert_fail@plt+0x90>
   11564:	ldr	r3, [pc, #24]	; 11584 <__assert_fail@plt+0x94>
   11568:	cmp	r3, r0
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0x98>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	ip, r2, r8, ror r1
   11584:	andeq	ip, r2, r8, ror r1
   11588:	andeq	r0, r0, r0
   1158c:	ldr	r0, [pc, #36]	; 115b8 <__assert_fail@plt+0xc8>
   11590:	ldr	r1, [pc, #36]	; 115bc <__assert_fail@plt+0xcc>
   11594:	sub	r1, r1, r0
   11598:	asr	r1, r1, #2
   1159c:	add	r1, r1, r1, lsr #31
   115a0:	asrs	r1, r1, #1
   115a4:	bxeq	lr
   115a8:	ldr	r3, [pc, #16]	; 115c0 <__assert_fail@plt+0xd0>
   115ac:	cmp	r3, #0
   115b0:	bxeq	lr
   115b4:	bx	r3
   115b8:	andeq	ip, r2, r8, ror r1
   115bc:	andeq	ip, r2, r8, ror r1
   115c0:	andeq	r0, r0, r0
   115c4:	push	{r4, lr}
   115c8:	ldr	r4, [pc, #24]	; 115e8 <__assert_fail@plt+0xf8>
   115cc:	ldrb	r3, [r4]
   115d0:	cmp	r3, #0
   115d4:	popne	{r4, pc}
   115d8:	bl	11560 <__assert_fail@plt+0x70>
   115dc:	mov	r3, #1
   115e0:	strb	r3, [r4]
   115e4:	pop	{r4, pc}
   115e8:	muleq	r2, r4, r1
   115ec:	b	1158c <__assert_fail@plt+0x9c>
   115f0:	push	{fp, lr}
   115f4:	mov	fp, sp
   115f8:	mov	r4, r0
   115fc:	cmp	r0, #0
   11600:	bne	11788 <__assert_fail@plt+0x298>
   11604:	movw	r1, #39851	; 0x9bab
   11608:	movt	r1, #1
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	bl	11268 <dcgettext@plt>
   11618:	mov	r1, r0
   1161c:	movw	r5, #49592	; 0xc1b8
   11620:	movt	r5, #2
   11624:	ldr	r2, [r5]
   11628:	mov	r0, #1
   1162c:	mov	r3, r2
   11630:	bl	113c4 <__printf_chk@plt>
   11634:	movw	r1, #39936	; 0x9c00
   11638:	movt	r1, #1
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	bl	11268 <dcgettext@plt>
   11648:	movw	r6, #49548	; 0xc18c
   1164c:	movt	r6, #2
   11650:	ldr	r1, [r6]
   11654:	bl	111e4 <fputs_unlocked@plt>
   11658:	movw	r1, #40044	; 0x9c6c
   1165c:	movt	r1, #1
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	bl	11268 <dcgettext@plt>
   1166c:	ldr	r1, [r6]
   11670:	bl	111e4 <fputs_unlocked@plt>
   11674:	movw	r1, #40245	; 0x9d35
   11678:	movt	r1, #1
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	bl	11268 <dcgettext@plt>
   11688:	ldr	r1, [r6]
   1168c:	bl	111e4 <fputs_unlocked@plt>
   11690:	movw	r1, #40476	; 0x9e1c
   11694:	movt	r1, #1
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	bl	11268 <dcgettext@plt>
   116a4:	ldr	r1, [r6]
   116a8:	bl	111e4 <fputs_unlocked@plt>
   116ac:	movw	r1, #40595	; 0x9e93
   116b0:	movt	r1, #1
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	bl	11268 <dcgettext@plt>
   116c0:	ldr	r1, [r6]
   116c4:	bl	111e4 <fputs_unlocked@plt>
   116c8:	movw	r1, #40723	; 0x9f13
   116cc:	movt	r1, #1
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	bl	11268 <dcgettext@plt>
   116dc:	ldr	r1, [r6]
   116e0:	bl	111e4 <fputs_unlocked@plt>
   116e4:	movw	r1, #40829	; 0x9f7d
   116e8:	movt	r1, #1
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	bl	11268 <dcgettext@plt>
   116f8:	ldr	r1, [r6]
   116fc:	bl	111e4 <fputs_unlocked@plt>
   11700:	movw	r1, #40900	; 0x9fc4
   11704:	movt	r1, #1
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	bl	11268 <dcgettext@plt>
   11714:	ldr	r1, [r6]
   11718:	bl	111e4 <fputs_unlocked@plt>
   1171c:	movw	r1, #41365	; 0xa195
   11720:	movt	r1, #1
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	bl	11268 <dcgettext@plt>
   11730:	ldr	r1, [r6]
   11734:	bl	111e4 <fputs_unlocked@plt>
   11738:	movw	r1, #41410	; 0xa1c2
   1173c:	movt	r1, #1
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	bl	11268 <dcgettext@plt>
   1174c:	ldr	r1, [r6]
   11750:	bl	111e4 <fputs_unlocked@plt>
   11754:	movw	r1, #41464	; 0xa1f8
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	11268 <dcgettext@plt>
   11768:	mov	r1, r0
   1176c:	ldr	r2, [r5]
   11770:	mov	r0, #1
   11774:	mov	r3, r2
   11778:	bl	113c4 <__printf_chk@plt>
   1177c:	bl	117cc <__assert_fail@plt+0x2dc>
   11780:	mov	r0, r4
   11784:	bl	11358 <exit@plt>
   11788:	movw	r0, #49544	; 0xc188
   1178c:	movt	r0, #2
   11790:	ldr	r5, [r0]
   11794:	movw	r1, #39812	; 0x9b84
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	bl	11268 <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r0, #49592	; 0xc1b8
   117b0:	movt	r0, #2
   117b4:	ldr	r3, [r0]
   117b8:	mov	r0, r5
   117bc:	mov	r1, #1
   117c0:	bl	113e8 <__fprintf_chk@plt>
   117c4:	mov	r0, r4
   117c8:	bl	11358 <exit@plt>
   117cc:	push	{r4, r5, r6, sl, fp, lr}
   117d0:	add	fp, sp, #16
   117d4:	sub	sp, sp, #56	; 0x38
   117d8:	movw	r0, #42416	; 0xa5b0
   117dc:	movt	r0, #1
   117e0:	add	r1, r0, #32
   117e4:	mov	r2, #48	; 0x30
   117e8:	vld1.64	{d16-d17}, [r1]
   117ec:	mov	r6, sp
   117f0:	add	r1, r6, #32
   117f4:	add	r3, r0, #16
   117f8:	vld1.64	{d18-d19}, [r0], r2
   117fc:	vld1.64	{d20-d21}, [r3]
   11800:	vldr	d22, [r0]
   11804:	vst1.64	{d16-d17}, [r1]
   11808:	add	r0, r6, #16
   1180c:	vst1.64	{d20-d21}, [r0]
   11810:	mov	r0, r6
   11814:	vst1.64	{d18-d19}, [r0], r2
   11818:	vstr	d22, [r0]
   1181c:	ldr	r1, [sp]
   11820:	cmp	r1, #0
   11824:	movw	r4, #41597	; 0xa27d
   11828:	movt	r4, #1
   1182c:	beq	11854 <__assert_fail@plt+0x364>
   11830:	mov	r6, sp
   11834:	movw	r5, #41597	; 0xa27d
   11838:	movt	r5, #1
   1183c:	mov	r0, r5
   11840:	bl	111fc <strcmp@plt>
   11844:	cmp	r0, #0
   11848:	ldrne	r1, [r6, #8]!
   1184c:	cmpne	r1, #0
   11850:	bne	1183c <__assert_fail@plt+0x34c>
   11854:	ldr	r5, [r6, #4]
   11858:	movw	r1, #41888	; 0xa3a0
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	bl	11268 <dcgettext@plt>
   1186c:	mov	r1, r0
   11870:	movw	r2, #41636	; 0xa2a4
   11874:	movt	r2, #1
   11878:	movw	r3, #41911	; 0xa3b7
   1187c:	movt	r3, #1
   11880:	mov	r0, #1
   11884:	bl	113c4 <__printf_chk@plt>
   11888:	cmp	r5, #0
   1188c:	moveq	r5, r4
   11890:	mov	r0, #5
   11894:	mov	r1, #0
   11898:	bl	11418 <setlocale@plt>
   1189c:	cmp	r0, #0
   118a0:	beq	118e0 <__assert_fail@plt+0x3f0>
   118a4:	movw	r1, #41951	; 0xa3df
   118a8:	movt	r1, #1
   118ac:	mov	r2, #3
   118b0:	bl	1149c <strncmp@plt>
   118b4:	cmp	r0, #0
   118b8:	beq	118e0 <__assert_fail@plt+0x3f0>
   118bc:	movw	r1, #41955	; 0xa3e3
   118c0:	movt	r1, #1
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	bl	11268 <dcgettext@plt>
   118d0:	movw	r1, #49548	; 0xc18c
   118d4:	movt	r1, #2
   118d8:	ldr	r1, [r1]
   118dc:	bl	111e4 <fputs_unlocked@plt>
   118e0:	movw	r1, #42026	; 0xa42a
   118e4:	movt	r1, #1
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	bl	11268 <dcgettext@plt>
   118f4:	mov	r1, r0
   118f8:	movw	r2, #41911	; 0xa3b7
   118fc:	movt	r2, #1
   11900:	mov	r0, #1
   11904:	mov	r3, r4
   11908:	bl	113c4 <__printf_chk@plt>
   1190c:	movw	r0, #41821	; 0xa35d
   11910:	movt	r0, #1
   11914:	movw	r6, #41364	; 0xa194
   11918:	movt	r6, #1
   1191c:	cmp	r5, r4
   11920:	moveq	r6, r0
   11924:	movw	r1, #42053	; 0xa445
   11928:	movt	r1, #1
   1192c:	mov	r0, #0
   11930:	mov	r2, #5
   11934:	bl	11268 <dcgettext@plt>
   11938:	mov	r1, r0
   1193c:	mov	r0, #1
   11940:	mov	r2, r5
   11944:	mov	r3, r6
   11948:	sub	sp, fp, #16
   1194c:	pop	{r4, r5, r6, sl, fp, lr}
   11950:	b	113c4 <__printf_chk@plt>
   11954:	push	{fp, lr}
   11958:	mov	fp, sp
   1195c:	sub	sp, sp, #144	; 0x90
   11960:	mov	r4, r1
   11964:	mov	r6, r0
   11968:	ldr	r0, [r1]
   1196c:	bl	16148 <__assert_fail@plt+0x4c58>
   11970:	movw	r1, #41364	; 0xa194
   11974:	movt	r1, #1
   11978:	mov	r0, #6
   1197c:	bl	11418 <setlocale@plt>
   11980:	movw	r5, #41640	; 0xa2a8
   11984:	movt	r5, #1
   11988:	movw	r1, #41603	; 0xa283
   1198c:	movt	r1, #1
   11990:	mov	r0, r5
   11994:	bl	11484 <bindtextdomain@plt>
   11998:	mov	r0, r5
   1199c:	bl	11280 <textdomain@plt>
   119a0:	movw	r0, #11820	; 0x2e2c
   119a4:	movt	r0, #1
   119a8:	bl	19b04 <__assert_fail@plt+0x8614>
   119ac:	sub	r0, fp, #24
   119b0:	bl	11f04 <__assert_fail@plt+0xa14>
   119b4:	mov	r8, #0
   119b8:	mov	r0, #16
   119bc:	mvn	sl, #0
   119c0:	movw	r9, #41627	; 0xa29b
   119c4:	movt	r9, #1
   119c8:	movw	r5, #42208	; 0xa4e0
   119cc:	movt	r5, #1
   119d0:	mov	r1, #0
   119d4:	str	r1, [sp, #12]
   119d8:	mov	r7, r0
   119dc:	str	r8, [sp]
   119e0:	mov	r0, r6
   119e4:	mov	r1, r4
   119e8:	mov	r2, r9
   119ec:	mov	r3, r5
   119f0:	bl	11340 <getopt_long@plt>
   119f4:	cmp	r0, #71	; 0x47
   119f8:	ble	11b90 <__assert_fail@plt+0x6a0>
   119fc:	sub	r1, r0, #72	; 0x48
   11a00:	cmp	r1, #46	; 0x2e
   11a04:	bhi	11ad8 <__assert_fail@plt+0x5e8>
   11a08:	mov	r0, #17
   11a0c:	add	r2, pc, #0
   11a10:	ldr	pc, [r2, r1, lsl #2]
   11a14:	ldrdeq	r1, [r1], -r8
   11a18:	andeq	r1, r1, r8, asr #28
   11a1c:	andeq	r1, r1, r8, asr #28
   11a20:	andeq	r1, r1, r8, asr #28
   11a24:	ldrdeq	r1, [r1], -r0
   11a28:	andeq	r1, r1, r8, asr #28
   11a2c:	andeq	r1, r1, r8, asr #28
   11a30:	andeq	r1, r1, r8, asr #28
   11a34:	andeq	r1, r1, r8, asr #22
   11a38:	andeq	r1, r1, r8, asr #28
   11a3c:	andeq	r1, r1, r0, asr fp
   11a40:	andeq	r1, r1, r8, asr #28
   11a44:	andeq	r1, r1, r8, asr #28
   11a48:	andeq	r1, r1, r8, asr #28
   11a4c:	andeq	r1, r1, r8, asr #28
   11a50:	andeq	r1, r1, r8, asr #28
   11a54:	andeq	r1, r1, r8, asr #28
   11a58:	andeq	r1, r1, r8, asr #28
   11a5c:	andeq	r1, r1, r8, asr #28
   11a60:	andeq	r1, r1, r8, asr #28
   11a64:	andeq	r1, r1, r8, asr #28
   11a68:	andeq	r1, r1, r8, asr #28
   11a6c:	andeq	r1, r1, r8, asr #28
   11a70:	andeq	r1, r1, r8, asr #28
   11a74:	andeq	r1, r1, r8, asr #28
   11a78:	andeq	r1, r1, r8, asr #28
   11a7c:	andeq	r1, r1, r8, asr #28
   11a80:	andeq	r1, r1, r8, lsl #22
   11a84:	andeq	r1, r1, r8, asr #28
   11a88:	andeq	r1, r1, r8, asr #28
   11a8c:	andeq	r1, r1, r0, ror #22
   11a90:	andeq	r1, r1, r8, asr #28
   11a94:	andeq	r1, r1, r0, ror fp
   11a98:	andeq	r1, r1, r8, asr #28
   11a9c:	andeq	r1, r1, r8, asr #28
   11aa0:	andeq	r1, r1, r8, asr #28
   11aa4:	andeq	r1, r1, r8, asr #28
   11aa8:	andeq	r1, r1, r8, asr #28
   11aac:	andeq	r1, r1, r8, asr #28
   11ab0:	andeq	r1, r1, r8, asr #28
   11ab4:	andeq	r1, r1, r8, asr #28
   11ab8:	andeq	r1, r1, r8, asr #28
   11abc:	andeq	r1, r1, r8, asr #28
   11ac0:	andeq	r1, r1, r8, asr #28
   11ac4:	andeq	r1, r1, r8, asr #28
   11ac8:	andeq	r1, r1, r8, asr #28
   11acc:	andeq	r1, r1, ip, ror fp
   11ad0:	mov	r0, #2
   11ad4:	b	119d8 <__assert_fail@plt+0x4e8>
   11ad8:	sub	r0, r0, #256	; 0x100
   11adc:	cmp	r0, #3
   11ae0:	bhi	11e48 <__assert_fail@plt+0x958>
   11ae4:	add	r1, pc, #0
   11ae8:	ldr	pc, [r1, r0, lsl #2]
   11aec:	strdeq	r1, [r1], -ip
   11af0:	andeq	r1, r1, r8, lsl #23
   11af4:	andeq	r1, r1, r8, lsl fp
   11af8:	andeq	r1, r1, r8, lsr #22
   11afc:	mov	sl, #1
   11b00:	mov	r0, r7
   11b04:	b	119d8 <__assert_fail@plt+0x4e8>
   11b08:	mov	r0, #1
   11b0c:	str	r0, [fp, #-24]	; 0xffffffe8
   11b10:	mov	r0, r7
   11b14:	b	119d8 <__assert_fail@plt+0x4e8>
   11b18:	mov	r0, #1
   11b1c:	str	r0, [sp, #12]
   11b20:	mov	r0, r7
   11b24:	b	119d8 <__assert_fail@plt+0x4e8>
   11b28:	movw	r0, #49552	; 0xc190
   11b2c:	movt	r0, #2
   11b30:	ldr	r0, [r0]
   11b34:	movw	r1, #49560	; 0xc198
   11b38:	movt	r1, #2
   11b3c:	str	r0, [r1]
   11b40:	mov	r0, r7
   11b44:	b	119d8 <__assert_fail@plt+0x4e8>
   11b48:	mov	r0, #16
   11b4c:	b	119d8 <__assert_fail@plt+0x4e8>
   11b50:	mov	r0, #1
   11b54:	strb	r0, [fp, #-20]	; 0xffffffec
   11b58:	mov	r0, r7
   11b5c:	b	119d8 <__assert_fail@plt+0x4e8>
   11b60:	mov	r0, #1
   11b64:	strb	r0, [fp, #-11]
   11b68:	mov	r0, r7
   11b6c:	b	119d8 <__assert_fail@plt+0x4e8>
   11b70:	mov	sl, #0
   11b74:	mov	r0, r7
   11b78:	b	119d8 <__assert_fail@plt+0x4e8>
   11b7c:	str	r8, [fp, #-24]	; 0xffffffe8
   11b80:	mov	r0, r7
   11b84:	b	119d8 <__assert_fail@plt+0x4e8>
   11b88:	mov	r0, r7
   11b8c:	b	119d0 <__assert_fail@plt+0x4e0>
   11b90:	cmn	r0, #3
   11b94:	beq	11ba8 <__assert_fail@plt+0x6b8>
   11b98:	cmn	r0, #2
   11b9c:	bne	11bfc <__assert_fail@plt+0x70c>
   11ba0:	mov	r0, #0
   11ba4:	bl	115f0 <__assert_fail@plt+0x100>
   11ba8:	movw	r0, #49456	; 0xc130
   11bac:	movt	r0, #2
   11bb0:	ldr	r3, [r0]
   11bb4:	movw	r0, #49548	; 0xc18c
   11bb8:	movt	r0, #2
   11bbc:	ldr	r0, [r0]
   11bc0:	mov	r1, #0
   11bc4:	movw	r2, #41666	; 0xa2c2
   11bc8:	movt	r2, #1
   11bcc:	movw	r7, #41650	; 0xa2b2
   11bd0:	movt	r7, #1
   11bd4:	str	r7, [sp]
   11bd8:	str	r2, [sp, #4]
   11bdc:	str	r1, [sp, #8]
   11be0:	movw	r1, #41597	; 0xa27d
   11be4:	movt	r1, #1
   11be8:	movw	r2, #41636	; 0xa2a4
   11bec:	movt	r2, #1
   11bf0:	bl	181b0 <__assert_fail@plt+0x6cc0>
   11bf4:	mov	r0, #0
   11bf8:	bl	11358 <exit@plt>
   11bfc:	cmn	r0, #1
   11c00:	bne	11e48 <__assert_fail@plt+0x958>
   11c04:	mov	r8, #16
   11c08:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11c0c:	cmp	r0, #0
   11c10:	bne	11c1c <__assert_fail@plt+0x72c>
   11c14:	mov	r0, sl
   11c18:	b	11c5c <__assert_fail@plt+0x76c>
   11c1c:	cmp	r7, #16
   11c20:	bne	11c54 <__assert_fail@plt+0x764>
   11c24:	mov	r0, #0
   11c28:	cmp	sl, #1
   11c2c:	bne	11c5c <__assert_fail@plt+0x76c>
   11c30:	movw	r1, #41679	; 0xa2cf
   11c34:	movt	r1, #1
   11c38:	mov	r0, #0
   11c3c:	mov	r2, #5
   11c40:	bl	11268 <dcgettext@plt>
   11c44:	mov	r2, r0
   11c48:	mov	r0, #1
   11c4c:	mov	r1, #0
   11c50:	bl	112f8 <error@plt>
   11c54:	mov	r0, sl
   11c58:	mov	r8, r7
   11c5c:	cmp	r0, #0
   11c60:	movwne	r0, #1
   11c64:	strb	r0, [fp, #-12]
   11c68:	movw	r0, #49560	; 0xc198
   11c6c:	movt	r0, #2
   11c70:	ldr	r0, [r0]
   11c74:	mov	r2, #2
   11c78:	cmp	r0, #0
   11c7c:	movwne	r2, #1
   11c80:	movw	r7, #49536	; 0xc180
   11c84:	movt	r7, #2
   11c88:	ldr	r1, [r7]
   11c8c:	sub	r3, r6, r1
   11c90:	cmp	r3, r2
   11c94:	bge	11ce0 <__assert_fail@plt+0x7f0>
   11c98:	cmp	r1, r6
   11c9c:	bge	11d0c <__assert_fail@plt+0x81c>
   11ca0:	movw	r1, #41737	; 0xa309
   11ca4:	movt	r1, #1
   11ca8:	mov	r0, #0
   11cac:	mov	r2, #5
   11cb0:	bl	11268 <dcgettext@plt>
   11cb4:	mov	r5, r0
   11cb8:	add	r0, r4, r6, lsl #2
   11cbc:	ldr	r0, [r0, #-4]
   11cc0:	bl	1793c <__assert_fail@plt+0x644c>
   11cc4:	mov	r3, r0
   11cc8:	mov	r0, #0
   11ccc:	mov	r1, #0
   11cd0:	mov	r2, r5
   11cd4:	bl	112f8 <error@plt>
   11cd8:	mov	r0, #1
   11cdc:	bl	115f0 <__assert_fail@plt+0x100>
   11ce0:	cmp	r0, #0
   11ce4:	beq	11d38 <__assert_fail@plt+0x848>
   11ce8:	add	r1, sp, #16
   11cec:	bl	19b1c <__assert_fail@plt+0x862c>
   11cf0:	cmp	r0, #0
   11cf4:	bne	11e00 <__assert_fail@plt+0x910>
   11cf8:	ldr	r5, [sp, #44]	; 0x2c
   11cfc:	mov	r0, r5
   11d00:	bl	11f4c <__assert_fail@plt+0xa5c>
   11d04:	str	r0, [fp, #-4]
   11d08:	b	11d6c <__assert_fail@plt+0x87c>
   11d0c:	movw	r1, #41721	; 0xa2f9
   11d10:	movt	r1, #1
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	bl	11268 <dcgettext@plt>
   11d20:	mov	r2, r0
   11d24:	mov	r0, #0
   11d28:	mov	r1, #0
   11d2c:	bl	112f8 <error@plt>
   11d30:	mov	r0, #1
   11d34:	bl	115f0 <__assert_fail@plt+0x100>
   11d38:	add	r0, r1, #1
   11d3c:	str	r0, [r7]
   11d40:	ldr	r5, [r4, r1, lsl #2]
   11d44:	ldrb	r1, [r5]
   11d48:	mov	r0, #0
   11d4c:	cmp	r1, #0
   11d50:	beq	11d5c <__assert_fail@plt+0x86c>
   11d54:	mov	r0, r5
   11d58:	bl	18620 <__assert_fail@plt+0x7130>
   11d5c:	str	r0, [fp, #-4]
   11d60:	mov	r0, r5
   11d64:	bl	11e50 <__assert_fail@plt+0x960>
   11d68:	mov	r5, r0
   11d6c:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11d70:	cmp	r0, #0
   11d74:	beq	11dcc <__assert_fail@plt+0x8dc>
   11d78:	ldr	r0, [sp, #12]
   11d7c:	eor	r0, r0, #1
   11d80:	tst	r0, #1
   11d84:	bne	11dcc <__assert_fail@plt+0x8dc>
   11d88:	movw	r0, #49568	; 0xc1a0
   11d8c:	movt	r0, #2
   11d90:	bl	17d54 <__assert_fail@plt+0x6864>
   11d94:	str	r0, [fp, #-16]
   11d98:	cmp	r0, #0
   11d9c:	bne	11dcc <__assert_fail@plt+0x8dc>
   11da0:	bl	113a0 <__errno_location@plt>
   11da4:	ldr	r4, [r0]
   11da8:	movw	r1, #41762	; 0xa322
   11dac:	movt	r1, #1
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	bl	11268 <dcgettext@plt>
   11dbc:	mov	r5, r0
   11dc0:	movw	r1, #44607	; 0xae3f
   11dc4:	movt	r1, #1
   11dc8:	b	11e2c <__assert_fail@plt+0x93c>
   11dcc:	ldr	r0, [r7]
   11dd0:	mvn	r1, #0
   11dd4:	str	r1, [sp]
   11dd8:	str	r1, [sp, #4]
   11ddc:	sub	r1, fp, #24
   11de0:	str	r1, [sp, #8]
   11de4:	add	r0, r4, r0, lsl #2
   11de8:	orr	r1, r8, #1024	; 0x400
   11dec:	mvn	r2, #0
   11df0:	mov	r3, r5
   11df4:	bl	11fcc <__assert_fail@plt+0xadc>
   11df8:	eor	r0, r0, #1
   11dfc:	bl	11358 <exit@plt>
   11e00:	bl	113a0 <__errno_location@plt>
   11e04:	ldr	r4, [r0]
   11e08:	movw	r1, #41762	; 0xa322
   11e0c:	movt	r1, #1
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	bl	11268 <dcgettext@plt>
   11e1c:	mov	r5, r0
   11e20:	movw	r0, #49560	; 0xc198
   11e24:	movt	r0, #2
   11e28:	ldr	r1, [r0]
   11e2c:	mov	r0, #4
   11e30:	bl	17748 <__assert_fail@plt+0x6258>
   11e34:	mov	r3, r0
   11e38:	mov	r0, #1
   11e3c:	mov	r1, r4
   11e40:	mov	r2, r5
   11e44:	bl	112f8 <error@plt>
   11e48:	mov	r0, #1
   11e4c:	bl	115f0 <__assert_fail@plt+0x100>
   11e50:	push	{r4, r5, fp, lr}
   11e54:	add	fp, sp, #8
   11e58:	sub	sp, sp, #16
   11e5c:	mov	r4, r0
   11e60:	ldrb	r0, [r0]
   11e64:	cmp	r0, #0
   11e68:	beq	11e84 <__assert_fail@plt+0x994>
   11e6c:	mov	r0, r4
   11e70:	bl	114e4 <getgrnam@plt>
   11e74:	cmp	r0, #0
   11e78:	beq	11e8c <__assert_fail@plt+0x99c>
   11e7c:	ldr	r4, [r0, #8]
   11e80:	b	11ef4 <__assert_fail@plt+0xa04>
   11e84:	mvn	r4, #0
   11e88:	b	11ef8 <__assert_fail@plt+0xa08>
   11e8c:	movw	r0, #41364	; 0xa194
   11e90:	movt	r0, #1
   11e94:	str	r0, [sp]
   11e98:	add	r3, sp, #8
   11e9c:	mov	r0, r4
   11ea0:	mov	r1, #0
   11ea4:	mov	r2, #10
   11ea8:	bl	18700 <__assert_fail@plt+0x7210>
   11eac:	cmp	r0, #0
   11eb0:	ldreq	r0, [sp, #12]
   11eb4:	cmpeq	r0, #0
   11eb8:	beq	11ef0 <__assert_fail@plt+0xa00>
   11ebc:	movw	r1, #42188	; 0xa4cc
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	bl	11268 <dcgettext@plt>
   11ed0:	mov	r5, r0
   11ed4:	mov	r0, r4
   11ed8:	bl	1793c <__assert_fail@plt+0x644c>
   11edc:	mov	r3, r0
   11ee0:	mov	r0, #1
   11ee4:	mov	r1, #0
   11ee8:	mov	r2, r5
   11eec:	bl	112f8 <error@plt>
   11ef0:	ldr	r4, [sp, #8]
   11ef4:	bl	111d8 <endgrent@plt>
   11ef8:	mov	r0, r4
   11efc:	sub	sp, fp, #8
   11f00:	pop	{r4, r5, fp, pc}
   11f04:	mov	r1, #0
   11f08:	str	r1, [r0, #8]
   11f0c:	mov	r2, #2
   11f10:	str	r2, [r0]
   11f14:	str	r1, [r0, #16]
   11f18:	str	r1, [r0, #20]
   11f1c:	mov	r2, #1
   11f20:	strh	r2, [r0, #12]
   11f24:	strb	r1, [r0, #4]
   11f28:	bx	lr
   11f2c:	push	{r4, sl, fp, lr}
   11f30:	add	fp, sp, #8
   11f34:	mov	r4, r0
   11f38:	ldr	r0, [r0, #16]
   11f3c:	bl	12f14 <__assert_fail@plt+0x1a24>
   11f40:	ldr	r0, [r4, #20]
   11f44:	pop	{r4, sl, fp, lr}
   11f48:	b	12f14 <__assert_fail@plt+0x1a24>
   11f4c:	push	{r4, sl, fp, lr}
   11f50:	add	fp, sp, #8
   11f54:	sub	sp, sp, #24
   11f58:	mov	r4, r0
   11f5c:	bl	114d8 <getgrgid@plt>
   11f60:	cmp	r0, #0
   11f64:	beq	11f70 <__assert_fail@plt+0xa80>
   11f68:	ldr	r0, [r0]
   11f6c:	b	11f80 <__assert_fail@plt+0xa90>
   11f70:	add	r2, sp, #3
   11f74:	mov	r0, r4
   11f78:	mov	r1, #0
   11f7c:	bl	16054 <__assert_fail@plt+0x4b64>
   11f80:	bl	18620 <__assert_fail@plt+0x7130>
   11f84:	sub	sp, fp, #8
   11f88:	pop	{r4, sl, fp, pc}
   11f8c:	push	{r4, sl, fp, lr}
   11f90:	add	fp, sp, #8
   11f94:	sub	sp, sp, #24
   11f98:	mov	r4, r0
   11f9c:	bl	11208 <getpwuid@plt>
   11fa0:	cmp	r0, #0
   11fa4:	beq	11fb0 <__assert_fail@plt+0xac0>
   11fa8:	ldr	r0, [r0]
   11fac:	b	11fc0 <__assert_fail@plt+0xad0>
   11fb0:	add	r2, sp, #3
   11fb4:	mov	r0, r4
   11fb8:	mov	r1, #0
   11fbc:	bl	16054 <__assert_fail@plt+0x4b64>
   11fc0:	bl	18620 <__assert_fail@plt+0x7130>
   11fc4:	sub	sp, fp, #8
   11fc8:	pop	{r4, sl, fp, pc}
   11fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd0:	add	fp, sp, #28
   11fd4:	sub	sp, sp, #12
   11fd8:	mov	r6, r3
   11fdc:	mov	r7, r2
   11fe0:	ldr	r9, [fp, #8]
   11fe4:	ldr	sl, [fp, #12]
   11fe8:	and	r3, sl, r9
   11fec:	mov	r2, #0
   11ff0:	ldr	r8, [fp, #16]
   11ff4:	cmn	r3, #1
   11ff8:	bne	1201c <__assert_fail@plt+0xb2c>
   11ffc:	ldrb	r3, [r8, #12]
   12000:	cmp	r3, #0
   12004:	bne	1201c <__assert_fail@plt+0xb2c>
   12008:	ldr	r2, [r8]
   1200c:	sub	r2, r2, #2
   12010:	clz	r2, r2
   12014:	lsr	r2, r2, #5
   12018:	lsl	r2, r2, #3
   1201c:	orr	r1, r2, r1
   12020:	mov	r2, #0
   12024:	bl	18684 <__assert_fail@plt+0x7194>
   12028:	mov	r5, r0
   1202c:	bl	1389c <__assert_fail@plt+0x23ac>
   12030:	cmp	r0, #0
   12034:	beq	12074 <__assert_fail@plt+0xb84>
   12038:	mov	r1, r0
   1203c:	mov	r4, #1
   12040:	stm	sp, {r9, sl}
   12044:	str	r8, [sp, #8]
   12048:	mov	r0, r5
   1204c:	mov	r2, r7
   12050:	mov	r3, r6
   12054:	bl	1210c <__assert_fail@plt+0xc1c>
   12058:	and	r4, r4, r0
   1205c:	mov	r0, r5
   12060:	bl	1389c <__assert_fail@plt+0x23ac>
   12064:	mov	r1, r0
   12068:	cmp	r0, #0
   1206c:	bne	12040 <__assert_fail@plt+0xb50>
   12070:	b	12078 <__assert_fail@plt+0xb88>
   12074:	mov	r4, #1
   12078:	bl	113a0 <__errno_location@plt>
   1207c:	ldr	r6, [r0]
   12080:	cmp	r6, #0
   12084:	beq	120c0 <__assert_fail@plt+0xbd0>
   12088:	ldrb	r0, [r8, #13]
   1208c:	mov	r4, #0
   12090:	cmp	r0, #0
   12094:	bne	120c0 <__assert_fail@plt+0xbd0>
   12098:	mov	r4, #0
   1209c:	movw	r1, #42472	; 0xa5e8
   120a0:	movt	r1, #1
   120a4:	mov	r0, #0
   120a8:	mov	r2, #5
   120ac:	bl	11268 <dcgettext@plt>
   120b0:	mov	r2, r0
   120b4:	mov	r0, #0
   120b8:	mov	r1, r6
   120bc:	bl	112f8 <error@plt>
   120c0:	mov	r0, r5
   120c4:	bl	13708 <__assert_fail@plt+0x2218>
   120c8:	cmp	r0, #0
   120cc:	beq	12100 <__assert_fail@plt+0xc10>
   120d0:	bl	113a0 <__errno_location@plt>
   120d4:	ldr	r5, [r0]
   120d8:	mov	r4, #0
   120dc:	movw	r1, #42488	; 0xa5f8
   120e0:	movt	r1, #1
   120e4:	mov	r0, #0
   120e8:	mov	r2, #5
   120ec:	bl	11268 <dcgettext@plt>
   120f0:	mov	r2, r0
   120f4:	mov	r0, #0
   120f8:	mov	r1, r5
   120fc:	bl	112f8 <error@plt>
   12100:	mov	r0, r4
   12104:	sub	sp, fp, #28
   12108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12110:	add	fp, sp, #28
   12114:	sub	sp, sp, #140	; 0x8c
   12118:	mov	lr, r3
   1211c:	str	r2, [sp, #28]
   12120:	mov	sl, r1
   12124:	mov	r9, r0
   12128:	ldr	ip, [r1, #24]
   1212c:	ldr	r4, [r1, #28]
   12130:	add	r2, r1, #64	; 0x40
   12134:	ldrh	r0, [r1, #56]	; 0x38
   12138:	sub	r0, r0, #1
   1213c:	ldr	r5, [fp, #16]
   12140:	cmp	r0, #9
   12144:	bhi	1236c <__assert_fail@plt+0xe7c>
   12148:	add	r1, pc, #0
   1214c:	ldr	pc, [r1, r0, lsl #2]
   12150:	andeq	r2, r1, r8, ror r1
   12154:	strdeq	r2, [r1], -r0
   12158:	andeq	r2, r1, ip, ror #6
   1215c:	andeq	r2, r1, r4, asr #4
   12160:	andeq	r2, r1, ip, ror #6
   12164:	andeq	r2, r1, r0, ror #6
   12168:	muleq	r1, ip, r4
   1216c:	andeq	r2, r1, ip, ror #6
   12170:	andeq	r2, r1, ip, ror #6
   12174:	andeq	r2, r1, r0, ror r2
   12178:	ldrb	r0, [r5, #4]
   1217c:	cmp	r0, #0
   12180:	beq	1236c <__assert_fail@plt+0xe7c>
   12184:	ldr	r0, [r5, #8]
   12188:	mov	r8, #1
   1218c:	cmp	r0, #0
   12190:	beq	126e8 <__assert_fail@plt+0x11f8>
   12194:	mov	r7, r4
   12198:	add	r1, sl, #160	; 0xa0
   1219c:	ldr	r5, [r0]
   121a0:	ldr	r3, [r0, #4]
   121a4:	ldr	r4, [r1]
   121a8:	ldr	r1, [r1, #4]
   121ac:	eor	r1, r1, r3
   121b0:	eor	r3, r4, r5
   121b4:	orrs	r1, r3, r1
   121b8:	bne	126e8 <__assert_fail@plt+0x11f8>
   121bc:	ldrd	r0, [r0, #8]
   121c0:	ldrd	r2, [r2]
   121c4:	eor	r1, r3, r1
   121c8:	eor	r0, r2, r0
   121cc:	orrs	r0, r0, r1
   121d0:	bne	126e8 <__assert_fail@plt+0x11f8>
   121d4:	movw	r1, #44607	; 0xae3f
   121d8:	movt	r1, #1
   121dc:	mov	r0, r7
   121e0:	bl	111fc <strcmp@plt>
   121e4:	cmp	r0, #0
   121e8:	beq	12920 <__assert_fail@plt+0x1430>
   121ec:	movw	r1, #42550	; 0xa636
   121f0:	movt	r1, #1
   121f4:	mov	r0, #0
   121f8:	mov	r2, #5
   121fc:	bl	11268 <dcgettext@plt>
   12200:	mov	r4, r0
   12204:	mov	r0, #0
   12208:	mov	r1, #4
   1220c:	mov	r2, r7
   12210:	bl	17698 <__assert_fail@plt+0x61a8>
   12214:	mov	r6, r0
   12218:	movw	r2, #44607	; 0xae3f
   1221c:	movt	r2, #1
   12220:	mov	r0, #1
   12224:	mov	r1, #4
   12228:	bl	17698 <__assert_fail@plt+0x61a8>
   1222c:	str	r0, [sp]
   12230:	mov	r0, #0
   12234:	mov	r1, #0
   12238:	mov	r2, r4
   1223c:	mov	r3, r6
   12240:	b	12954 <__assert_fail@plt+0x1464>
   12244:	str	r9, [sp, #24]
   12248:	ldrb	r0, [r5, #13]
   1224c:	mov	r2, #0
   12250:	mov	r6, #1
   12254:	cmp	r0, #0
   12258:	str	r4, [sp, #20]
   1225c:	bne	124f0 <__assert_fail@plt+0x1000>
   12260:	ldr	r8, [sl, #32]
   12264:	movw	r1, #42674	; 0xa6b2
   12268:	movt	r1, #1
   1226c:	b	122b0 <__assert_fail@plt+0xdc0>
   12270:	ldr	r0, [sl, #48]	; 0x30
   12274:	cmp	r0, #0
   12278:	bne	12288 <__assert_fail@plt+0xd98>
   1227c:	ldr	r0, [sl, #16]
   12280:	cmp	r0, #0
   12284:	beq	12520 <__assert_fail@plt+0x1030>
   12288:	str	r9, [sp, #24]
   1228c:	ldrb	r0, [r5, #13]
   12290:	mov	r2, #0
   12294:	mov	r6, #1
   12298:	cmp	r0, #0
   1229c:	str	r4, [sp, #20]
   122a0:	bne	124f0 <__assert_fail@plt+0x1000>
   122a4:	ldr	r8, [sl, #32]
   122a8:	movw	r1, #42657	; 0xa6a1
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	mov	r2, #5
   122b8:	mov	r9, lr
   122bc:	bl	11268 <dcgettext@plt>
   122c0:	mov	r7, r0
   122c4:	mov	r0, #4
   122c8:	mov	r1, r4
   122cc:	bl	17748 <__assert_fail@plt+0x6258>
   122d0:	mov	r3, r0
   122d4:	mov	r0, #0
   122d8:	mov	r1, r8
   122dc:	mov	r2, r7
   122e0:	bl	112f8 <error@plt>
   122e4:	mov	r2, #0
   122e8:	mov	lr, r9
   122ec:	b	124f0 <__assert_fail@plt+0x1000>
   122f0:	mov	r0, r9
   122f4:	mov	r1, sl
   122f8:	mov	r7, lr
   122fc:	mov	r8, r2
   12300:	mov	r6, ip
   12304:	bl	186d0 <__assert_fail@plt+0x71e0>
   12308:	mov	ip, r6
   1230c:	mov	r2, r8
   12310:	mov	lr, r7
   12314:	cmp	r0, #0
   12318:	beq	1236c <__assert_fail@plt+0xe7c>
   1231c:	mov	r8, #0
   12320:	movw	r1, #42699	; 0xa6cb
   12324:	movt	r1, #1
   12328:	mov	r0, #0
   1232c:	mov	r2, #5
   12330:	bl	11268 <dcgettext@plt>
   12334:	mov	r2, r4
   12338:	mov	r4, r0
   1233c:	mov	r0, #0
   12340:	mov	r1, #3
   12344:	bl	177fc <__assert_fail@plt+0x630c>
   12348:	mov	r3, r0
   1234c:	mov	r0, #0
   12350:	mov	r1, #0
   12354:	mov	r2, r4
   12358:	bl	112f8 <error@plt>
   1235c:	b	126e8 <__assert_fail@plt+0x11f8>
   12360:	ldrb	r0, [r5, #4]
   12364:	cmp	r0, #0
   12368:	beq	12518 <__assert_fail@plt+0x1028>
   1236c:	str	r4, [sp, #20]
   12370:	ldr	r7, [fp, #12]
   12374:	ldr	r6, [fp, #8]
   12378:	and	r0, r7, r6
   1237c:	cmn	r0, #1
   12380:	str	r9, [sp, #24]
   12384:	bne	123ac <__assert_fail@plt+0xebc>
   12388:	ldr	r0, [r5]
   1238c:	cmp	r0, #2
   12390:	bne	123ac <__assert_fail@plt+0xebc>
   12394:	ldr	r0, [r5, #8]
   12398:	cmp	r0, #0
   1239c:	bne	123ac <__assert_fail@plt+0xebc>
   123a0:	ldrb	r0, [r5, #12]
   123a4:	cmp	r0, #0
   123a8:	beq	12538 <__assert_fail@plt+0x1048>
   123ac:	ldrb	r0, [r5, #12]
   123b0:	cmp	r0, #0
   123b4:	beq	12470 <__assert_fail@plt+0xf80>
   123b8:	ldr	r0, [sl, #80]	; 0x50
   123bc:	and	r0, r0, #61440	; 0xf000
   123c0:	cmp	r0, #40960	; 0xa000
   123c4:	bne	12470 <__assert_fail@plt+0xf80>
   123c8:	ldr	r0, [r9, #32]
   123cc:	add	r5, sp, #32
   123d0:	mov	r8, #0
   123d4:	mov	r1, ip
   123d8:	mov	r2, r5
   123dc:	mov	r3, #0
   123e0:	str	lr, [sp, #16]
   123e4:	mov	r4, ip
   123e8:	bl	19b4c <__assert_fail@plt+0x865c>
   123ec:	mov	ip, r4
   123f0:	mov	r2, r5
   123f4:	ldr	r5, [fp, #16]
   123f8:	ldr	lr, [sp, #16]
   123fc:	cmp	r0, #0
   12400:	beq	12470 <__assert_fail@plt+0xf80>
   12404:	ldrb	r0, [r5, #13]
   12408:	mov	r6, #1
   1240c:	add	r2, sp, #32
   12410:	cmp	r0, #0
   12414:	bne	125ec <__assert_fail@plt+0x10fc>
   12418:	mov	r4, r2
   1241c:	bl	113a0 <__errno_location@plt>
   12420:	ldr	r5, [r0]
   12424:	mov	r8, #0
   12428:	movw	r1, #42885	; 0xa785
   1242c:	movt	r1, #1
   12430:	mov	r0, #0
   12434:	mov	r2, #5
   12438:	bl	11268 <dcgettext@plt>
   1243c:	mov	r7, r0
   12440:	mov	r0, #4
   12444:	ldr	r1, [sp, #20]
   12448:	bl	17748 <__assert_fail@plt+0x6258>
   1244c:	mov	r3, r0
   12450:	mov	r0, #0
   12454:	mov	r1, r5
   12458:	mov	r2, r7
   1245c:	bl	112f8 <error@plt>
   12460:	mov	r2, r4
   12464:	ldr	r5, [fp, #16]
   12468:	ldr	lr, [sp, #16]
   1246c:	b	125ec <__assert_fail@plt+0x10fc>
   12470:	cmn	r6, #1
   12474:	beq	124fc <__assert_fail@plt+0x100c>
   12478:	ldr	r1, [r2, #24]
   1247c:	sub	r0, r1, r6
   12480:	clz	r0, r0
   12484:	lsr	r4, r0, #5
   12488:	cmn	r7, #1
   1248c:	beq	12540 <__assert_fail@plt+0x1050>
   12490:	cmp	r1, r6
   12494:	beq	12504 <__assert_fail@plt+0x1014>
   12498:	b	12540 <__assert_fail@plt+0x1050>
   1249c:	str	r9, [sp, #24]
   124a0:	ldrb	r0, [r5, #13]
   124a4:	mov	r2, #0
   124a8:	mov	r6, #1
   124ac:	cmp	r0, #0
   124b0:	str	r4, [sp, #20]
   124b4:	bne	124f0 <__assert_fail@plt+0x1000>
   124b8:	ldr	r8, [sl, #32]
   124bc:	mov	r0, #0
   124c0:	mov	r1, #3
   124c4:	mov	r2, r4
   124c8:	mov	r7, lr
   124cc:	bl	177fc <__assert_fail@plt+0x630c>
   124d0:	mov	r3, r0
   124d4:	movw	r2, #42203	; 0xa4db
   124d8:	movt	r2, #1
   124dc:	mov	r0, #0
   124e0:	mov	r1, r8
   124e4:	bl	112f8 <error@plt>
   124e8:	mov	r2, #0
   124ec:	mov	lr, r7
   124f0:	mov	r4, #1
   124f4:	mov	r8, #0
   124f8:	b	125f0 <__assert_fail@plt+0x1100>
   124fc:	cmn	r7, #1
   12500:	beq	1253c <__assert_fail@plt+0x104c>
   12504:	ldr	r0, [r2, #28]
   12508:	sub	r0, r0, r7
   1250c:	clz	r0, r0
   12510:	lsr	r4, r0, #5
   12514:	b	12540 <__assert_fail@plt+0x1050>
   12518:	mov	r8, #1
   1251c:	b	126e8 <__assert_fail@plt+0x11f8>
   12520:	mov	r8, #1
   12524:	str	r8, [sl, #16]
   12528:	mov	r0, r9
   1252c:	mov	r1, sl
   12530:	mov	r2, #1
   12534:	b	126e4 <__assert_fail@plt+0x11f4>
   12538:	add	r2, sl, #64	; 0x40
   1253c:	mov	r4, #1
   12540:	ldrh	r1, [sl, #56]	; 0x38
   12544:	cmp	r1, #6
   12548:	bhi	12564 <__assert_fail@plt+0x1074>
   1254c:	mov	r0, #1
   12550:	mov	r3, #86	; 0x56
   12554:	tst	r3, r0, lsl r1
   12558:	ldrne	r6, [r5, #8]
   1255c:	cmpne	r6, #0
   12560:	bne	126f4 <__assert_fail@plt+0x1204>
   12564:	mov	r8, #1
   12568:	cmp	r4, #0
   1256c:	beq	125e8 <__assert_fail@plt+0x10f8>
   12570:	ldr	r0, [sp, #24]
   12574:	ldr	r0, [r0, #32]
   12578:	ldrb	r1, [r5, #12]
   1257c:	cmp	r1, #0
   12580:	str	r2, [sp, #12]
   12584:	beq	127a4 <__assert_fail@plt+0x12b4>
   12588:	str	lr, [sp, #16]
   1258c:	str	lr, [sp]
   12590:	ldr	r1, [fp, #8]
   12594:	stmib	sp, {r1, r7}
   12598:	mov	r9, ip
   1259c:	mov	r1, ip
   125a0:	ldr	r3, [sp, #28]
   125a4:	bl	129a0 <__assert_fail@plt+0x14b0>
   125a8:	sub	r0, r0, #2
   125ac:	cmp	r0, #4
   125b0:	bhi	1299c <__assert_fail@plt+0x14ac>
   125b4:	mov	r4, #0
   125b8:	add	r1, pc, #16
   125bc:	mov	r6, #1
   125c0:	ldr	lr, [sp, #16]
   125c4:	ldr	r5, [fp, #16]
   125c8:	ldr	r2, [sp, #12]
   125cc:	ldr	pc, [r1, r0, lsl #2]
   125d0:	strdeq	r2, [r1], -r0
   125d4:	andeq	r2, r1, r4, ror #11
   125d8:	andeq	r2, r1, r4, ror #11
   125dc:	andeq	r2, r1, r0, lsl #16
   125e0:	andeq	r2, r1, ip, lsr #16
   125e4:	mov	r8, #0
   125e8:	mov	r6, #1
   125ec:	mov	r4, #1
   125f0:	ldr	r0, [r5]
   125f4:	cmp	r0, #2
   125f8:	beq	126cc <__assert_fail@plt+0x11dc>
   125fc:	eor	r1, r8, #1
   12600:	orrs	r1, r4, r1
   12604:	eorseq	r1, r6, #1
   12608:	beq	1263c <__assert_fail@plt+0x114c>
   1260c:	cmp	r0, #0
   12610:	bne	126cc <__assert_fail@plt+0x11dc>
   12614:	mov	r4, #1
   12618:	cmp	r6, #0
   1261c:	movwne	r4, #4
   12620:	cmp	r8, #0
   12624:	moveq	r4, #3
   12628:	cmp	r2, #0
   1262c:	bne	12680 <__assert_fail@plt+0x1190>
   12630:	mov	r6, #0
   12634:	mov	r7, #0
   12638:	b	1269c <__assert_fail@plt+0x11ac>
   1263c:	ldr	r1, [sp, #28]
   12640:	cmn	r1, #1
   12644:	beq	12658 <__assert_fail@plt+0x1168>
   12648:	ldr	r1, [r2, #24]
   1264c:	ldr	r3, [sp, #28]
   12650:	cmp	r1, r3
   12654:	bne	1266c <__assert_fail@plt+0x117c>
   12658:	cmn	lr, #1
   1265c:	beq	1260c <__assert_fail@plt+0x111c>
   12660:	ldr	r1, [r2, #28]
   12664:	cmp	r1, lr
   12668:	beq	1260c <__assert_fail@plt+0x111c>
   1266c:	mov	r4, #1
   12670:	cmp	r6, #0
   12674:	movwne	r4, #2
   12678:	cmp	r8, #0
   1267c:	moveq	r4, #3
   12680:	ldr	r0, [r2, #24]
   12684:	mov	r7, r2
   12688:	bl	11f8c <__assert_fail@plt+0xa9c>
   1268c:	mov	r6, r0
   12690:	ldr	r0, [r7, #28]
   12694:	bl	11f4c <__assert_fail@plt+0xa5c>
   12698:	mov	r7, r0
   1269c:	ldr	r0, [r5, #16]
   126a0:	ldr	r1, [r5, #20]
   126a4:	stm	sp, {r0, r1}
   126a8:	ldr	r0, [sp, #20]
   126ac:	mov	r1, r4
   126b0:	mov	r2, r6
   126b4:	mov	r3, r7
   126b8:	bl	12b50 <__assert_fail@plt+0x1660>
   126bc:	mov	r0, r6
   126c0:	bl	12f14 <__assert_fail@plt+0x1a24>
   126c4:	mov	r0, r7
   126c8:	bl	12f14 <__assert_fail@plt+0x1a24>
   126cc:	ldrb	r0, [r5, #4]
   126d0:	cmp	r0, #0
   126d4:	bne	126e8 <__assert_fail@plt+0x11f8>
   126d8:	ldr	r0, [sp, #24]
   126dc:	mov	r1, sl
   126e0:	mov	r2, #4
   126e4:	bl	14b4c <__assert_fail@plt+0x365c>
   126e8:	mov	r0, r8
   126ec:	sub	sp, fp, #28
   126f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f4:	ldm	r6, {r0, r3}
   126f8:	ldr	r8, [r2, #96]	; 0x60
   126fc:	ldr	r1, [r2, #100]	; 0x64
   12700:	eor	r1, r1, r3
   12704:	eor	r0, r8, r0
   12708:	orrs	r1, r0, r1
   1270c:	bne	12564 <__assert_fail@plt+0x1074>
   12710:	ldr	r0, [r6, #8]
   12714:	ldr	r3, [r6, #12]
   12718:	ldr	r6, [r2]
   1271c:	ldr	r1, [r2, #4]
   12720:	eor	r1, r1, r3
   12724:	eor	r0, r6, r0
   12728:	orrs	r1, r0, r1
   1272c:	bne	12564 <__assert_fail@plt+0x1074>
   12730:	movw	r1, #44607	; 0xae3f
   12734:	movt	r1, #1
   12738:	ldr	r5, [sp, #20]
   1273c:	mov	r0, r5
   12740:	bl	111fc <strcmp@plt>
   12744:	cmp	r0, #0
   12748:	beq	128b4 <__assert_fail@plt+0x13c4>
   1274c:	movw	r1, #42550	; 0xa636
   12750:	movt	r1, #1
   12754:	mov	r0, #0
   12758:	mov	r2, #5
   1275c:	bl	11268 <dcgettext@plt>
   12760:	mov	r4, r0
   12764:	mov	r0, #0
   12768:	mov	r1, #4
   1276c:	mov	r2, r5
   12770:	bl	17698 <__assert_fail@plt+0x61a8>
   12774:	mov	r5, r0
   12778:	movw	r2, #44607	; 0xae3f
   1277c:	movt	r2, #1
   12780:	mov	r0, #1
   12784:	mov	r1, #4
   12788:	bl	17698 <__assert_fail@plt+0x61a8>
   1278c:	str	r0, [sp]
   12790:	mov	r0, #0
   12794:	mov	r1, #0
   12798:	mov	r2, r4
   1279c:	mov	r3, r5
   127a0:	b	128e8 <__assert_fail@plt+0x13f8>
   127a4:	mov	r1, ip
   127a8:	ldr	r2, [sp, #28]
   127ac:	mov	r9, lr
   127b0:	mov	r3, lr
   127b4:	bl	12dec <__assert_fail@plt+0x18fc>
   127b8:	cmp	r0, #0
   127bc:	beq	127e8 <__assert_fail@plt+0x12f8>
   127c0:	bl	113a0 <__errno_location@plt>
   127c4:	ldr	r0, [r0]
   127c8:	mov	r6, #0
   127cc:	cmp	r0, #95	; 0x5f
   127d0:	mov	lr, r9
   127d4:	ldr	r5, [fp, #16]
   127d8:	ldr	r2, [sp, #12]
   127dc:	bne	1282c <__assert_fail@plt+0x133c>
   127e0:	mov	r4, #0
   127e4:	b	125f0 <__assert_fail@plt+0x1100>
   127e8:	mov	r4, #0
   127ec:	mov	r6, #1
   127f0:	mov	lr, r9
   127f4:	ldr	r5, [fp, #16]
   127f8:	ldr	r2, [sp, #12]
   127fc:	b	125f0 <__assert_fail@plt+0x1100>
   12800:	ldr	r0, [sp, #24]
   12804:	ldr	r0, [r0, #32]
   12808:	mov	r1, r9
   1280c:	ldr	r2, [sp, #28]
   12810:	mov	r3, lr
   12814:	bl	12dcc <__assert_fail@plt+0x18dc>
   12818:	ldr	r2, [sp, #12]
   1281c:	ldr	r5, [fp, #16]
   12820:	ldr	lr, [sp, #16]
   12824:	cmp	r0, #0
   12828:	beq	12918 <__assert_fail@plt+0x1428>
   1282c:	ldrb	r0, [r5, #13]
   12830:	mov	r4, #0
   12834:	cmp	r0, #0
   12838:	bne	128ac <__assert_fail@plt+0x13bc>
   1283c:	movw	r0, #42932	; 0xa7b4
   12840:	movt	r0, #1
   12844:	movw	r6, #42907	; 0xa79b
   12848:	movt	r6, #1
   1284c:	ldr	r1, [sp, #28]
   12850:	cmn	r1, #1
   12854:	moveq	r6, r0
   12858:	mov	r8, lr
   1285c:	mov	r5, r2
   12860:	bl	113a0 <__errno_location@plt>
   12864:	ldr	r7, [r0]
   12868:	mov	r4, #0
   1286c:	mov	r0, #0
   12870:	mov	r1, r6
   12874:	mov	r2, #5
   12878:	bl	11268 <dcgettext@plt>
   1287c:	mov	r6, r0
   12880:	mov	r0, #4
   12884:	ldr	r1, [sp, #20]
   12888:	bl	17748 <__assert_fail@plt+0x6258>
   1288c:	mov	r3, r0
   12890:	mov	r0, #0
   12894:	mov	r1, r7
   12898:	mov	r2, r6
   1289c:	bl	112f8 <error@plt>
   128a0:	mov	r2, r5
   128a4:	ldr	r5, [fp, #16]
   128a8:	mov	lr, r8
   128ac:	mov	r6, #1
   128b0:	b	124f4 <__assert_fail@plt+0x1004>
   128b4:	movw	r1, #42505	; 0xa609
   128b8:	movt	r1, #1
   128bc:	mov	r0, #0
   128c0:	mov	r2, #5
   128c4:	bl	11268 <dcgettext@plt>
   128c8:	mov	r4, r0
   128cc:	mov	r0, #4
   128d0:	mov	r1, r5
   128d4:	bl	17748 <__assert_fail@plt+0x6258>
   128d8:	mov	r3, r0
   128dc:	mov	r0, #0
   128e0:	mov	r1, #0
   128e4:	mov	r2, r4
   128e8:	bl	112f8 <error@plt>
   128ec:	mov	r8, #0
   128f0:	movw	r1, #42608	; 0xa670
   128f4:	movt	r1, #1
   128f8:	mov	r0, #0
   128fc:	mov	r2, #5
   12900:	bl	11268 <dcgettext@plt>
   12904:	mov	r2, r0
   12908:	mov	r0, #0
   1290c:	mov	r1, #0
   12910:	bl	112f8 <error@plt>
   12914:	b	126e8 <__assert_fail@plt+0x11f8>
   12918:	mov	r6, #1
   1291c:	b	125f0 <__assert_fail@plt+0x1100>
   12920:	movw	r1, #42505	; 0xa609
   12924:	movt	r1, #1
   12928:	mov	r0, #0
   1292c:	mov	r2, #5
   12930:	bl	11268 <dcgettext@plt>
   12934:	mov	r4, r0
   12938:	mov	r0, #4
   1293c:	mov	r1, r7
   12940:	bl	17748 <__assert_fail@plt+0x6258>
   12944:	mov	r3, r0
   12948:	mov	r0, #0
   1294c:	mov	r1, #0
   12950:	mov	r2, r4
   12954:	bl	112f8 <error@plt>
   12958:	mov	r8, #0
   1295c:	movw	r1, #42608	; 0xa670
   12960:	movt	r1, #1
   12964:	mov	r0, #0
   12968:	mov	r2, #5
   1296c:	bl	11268 <dcgettext@plt>
   12970:	mov	r2, r0
   12974:	mov	r0, #0
   12978:	mov	r1, #0
   1297c:	bl	112f8 <error@plt>
   12980:	mov	r0, r9
   12984:	mov	r1, sl
   12988:	mov	r2, #4
   1298c:	bl	14b4c <__assert_fail@plt+0x365c>
   12990:	mov	r0, r9
   12994:	bl	1389c <__assert_fail@plt+0x23ac>
   12998:	b	126e8 <__assert_fail@plt+0x11f8>
   1299c:	bl	114a8 <abort@plt>
   129a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a4:	add	fp, sp, #28
   129a8:	sub	sp, sp, #116	; 0x74
   129ac:	mov	r5, r0
   129b0:	ldr	r8, [fp, #12]
   129b4:	ldr	r0, [fp, #16]
   129b8:	and	r0, r0, r8
   129bc:	mov	r7, #5
   129c0:	cmn	r0, #1
   129c4:	beq	12b2c <__assert_fail@plt+0x163c>
   129c8:	mov	r6, r2
   129cc:	mov	r4, r1
   129d0:	ldr	r0, [r2, #16]
   129d4:	and	r0, r0, #61440	; 0xf000
   129d8:	cmp	r0, #32768	; 0x8000
   129dc:	beq	129f4 <__assert_fail@plt+0x1504>
   129e0:	cmp	r0, #16384	; 0x4000
   129e4:	bne	12b2c <__assert_fail@plt+0x163c>
   129e8:	str	r3, [sp, #4]
   129ec:	mov	r7, #18688	; 0x4900
   129f0:	b	129fc <__assert_fail@plt+0x150c>
   129f4:	str	r3, [sp, #4]
   129f8:	mov	r7, #2304	; 0x900
   129fc:	mov	r0, r5
   12a00:	mov	r1, r4
   12a04:	mov	r2, r7
   12a08:	bl	11388 <openat64@plt>
   12a0c:	mov	r9, r0
   12a10:	cmn	r0, #1
   12a14:	ble	12adc <__assert_fail@plt+0x15ec>
   12a18:	add	r1, sp, #8
   12a1c:	mov	r0, r9
   12a20:	bl	19b2c <__assert_fail@plt+0x863c>
   12a24:	mov	r7, #6
   12a28:	cmp	r0, #0
   12a2c:	bne	12ac0 <__assert_fail@plt+0x15d0>
   12a30:	ldrd	r0, [r6, #96]	; 0x60
   12a34:	ldr	r2, [sp, #104]	; 0x68
   12a38:	ldr	r3, [sp, #108]	; 0x6c
   12a3c:	eor	r1, r1, r3
   12a40:	eor	r0, r0, r2
   12a44:	orrs	r0, r0, r1
   12a48:	mov	r7, #4
   12a4c:	bne	12ac0 <__assert_fail@plt+0x15d0>
   12a50:	ldrd	r0, [r6]
   12a54:	ldr	r2, [sp, #8]
   12a58:	ldr	r3, [sp, #12]
   12a5c:	eor	r1, r1, r3
   12a60:	eor	r0, r0, r2
   12a64:	orrs	r0, r0, r1
   12a68:	bne	12ac0 <__assert_fail@plt+0x15d0>
   12a6c:	cmn	r8, #1
   12a70:	beq	12a84 <__assert_fail@plt+0x1594>
   12a74:	mov	r7, #2
   12a78:	ldr	r0, [sp, #32]
   12a7c:	cmp	r0, r8
   12a80:	bne	12ac0 <__assert_fail@plt+0x15d0>
   12a84:	ldr	r0, [fp, #16]
   12a88:	cmn	r0, #1
   12a8c:	beq	12aa4 <__assert_fail@plt+0x15b4>
   12a90:	mov	r7, #2
   12a94:	ldr	r0, [sp, #36]	; 0x24
   12a98:	ldr	r1, [fp, #16]
   12a9c:	cmp	r0, r1
   12aa0:	bne	12ac0 <__assert_fail@plt+0x15d0>
   12aa4:	ldr	r2, [fp, #8]
   12aa8:	mov	r0, r9
   12aac:	ldr	r1, [sp, #4]
   12ab0:	bl	11394 <fchown@plt>
   12ab4:	cmp	r0, #0
   12ab8:	mov	r7, #6
   12abc:	beq	12b38 <__assert_fail@plt+0x1648>
   12ac0:	bl	113a0 <__errno_location@plt>
   12ac4:	mov	r4, r0
   12ac8:	ldr	r5, [r0]
   12acc:	mov	r0, r9
   12ad0:	bl	114b4 <close@plt>
   12ad4:	str	r5, [r4]
   12ad8:	b	12b2c <__assert_fail@plt+0x163c>
   12adc:	bl	113a0 <__errno_location@plt>
   12ae0:	mov	sl, r0
   12ae4:	ldr	r0, [r0]
   12ae8:	cmp	r0, #13
   12aec:	bne	12b1c <__assert_fail@plt+0x162c>
   12af0:	ldr	r0, [r6, #16]
   12af4:	and	r0, r0, #61440	; 0xf000
   12af8:	cmp	r0, #32768	; 0x8000
   12afc:	bne	12b1c <__assert_fail@plt+0x162c>
   12b00:	orr	r2, r7, #1
   12b04:	mov	r0, r5
   12b08:	mov	r1, r4
   12b0c:	bl	11388 <openat64@plt>
   12b10:	mov	r9, r0
   12b14:	cmn	r0, #1
   12b18:	bgt	12a18 <__assert_fail@plt+0x1528>
   12b1c:	ldr	r0, [sl]
   12b20:	mov	r7, #6
   12b24:	cmp	r0, #13
   12b28:	movweq	r7, #5
   12b2c:	mov	r0, r7
   12b30:	sub	sp, fp, #28
   12b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b38:	mov	r0, r9
   12b3c:	bl	114b4 <close@plt>
   12b40:	mov	r7, #6
   12b44:	cmp	r0, #0
   12b48:	movweq	r7, #2
   12b4c:	b	12b2c <__assert_fail@plt+0x163c>
   12b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b54:	add	fp, sp, #28
   12b58:	sub	sp, sp, #4
   12b5c:	mov	r9, r0
   12b60:	cmp	r1, #1
   12b64:	bne	12ba4 <__assert_fail@plt+0x16b4>
   12b68:	movw	r1, #42953	; 0xa7c9
   12b6c:	movt	r1, #1
   12b70:	mov	r0, #0
   12b74:	mov	r2, #5
   12b78:	bl	11268 <dcgettext@plt>
   12b7c:	mov	r4, r0
   12b80:	mov	r0, #4
   12b84:	mov	r1, r9
   12b88:	bl	17748 <__assert_fail@plt+0x6258>
   12b8c:	mov	r2, r0
   12b90:	mov	r0, #1
   12b94:	mov	r1, r4
   12b98:	sub	sp, fp, #28
   12b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ba0:	b	113c4 <__printf_chk@plt>
   12ba4:	mov	r6, r3
   12ba8:	mov	r7, r2
   12bac:	mov	r4, r1
   12bb0:	ldr	sl, [fp, #12]
   12bb4:	ldr	r5, [fp, #8]
   12bb8:	mov	r0, r5
   12bbc:	mov	r1, sl
   12bc0:	bl	12d3c <__assert_fail@plt+0x184c>
   12bc4:	mov	r8, r0
   12bc8:	cmp	r5, #0
   12bcc:	moveq	r7, r5
   12bd0:	cmp	sl, #0
   12bd4:	moveq	r6, sl
   12bd8:	mov	r0, r7
   12bdc:	mov	r1, r6
   12be0:	bl	12d3c <__assert_fail@plt+0x184c>
   12be4:	mov	r6, r0
   12be8:	cmp	r4, #4
   12bec:	beq	12c30 <__assert_fail@plt+0x1740>
   12bf0:	cmp	r4, #3
   12bf4:	beq	12c14 <__assert_fail@plt+0x1724>
   12bf8:	cmp	r4, #2
   12bfc:	bne	12d38 <__assert_fail@plt+0x1848>
   12c00:	cmp	r5, #0
   12c04:	beq	12c44 <__assert_fail@plt+0x1754>
   12c08:	movw	r1, #43009	; 0xa801
   12c0c:	movt	r1, #1
   12c10:	b	12cec <__assert_fail@plt+0x17fc>
   12c14:	cmp	r6, #0
   12c18:	beq	12c58 <__assert_fail@plt+0x1768>
   12c1c:	cmp	r5, #0
   12c20:	beq	12cb8 <__assert_fail@plt+0x17c8>
   12c24:	movw	r1, #43113	; 0xa869
   12c28:	movt	r1, #1
   12c2c:	b	12cec <__assert_fail@plt+0x17fc>
   12c30:	cmp	r5, #0
   12c34:	beq	12ca4 <__assert_fail@plt+0x17b4>
   12c38:	movw	r1, #43315	; 0xa933
   12c3c:	movt	r1, #1
   12c40:	b	12cec <__assert_fail@plt+0x17fc>
   12c44:	cmp	sl, #0
   12c48:	beq	12ccc <__assert_fail@plt+0x17dc>
   12c4c:	movw	r1, #43048	; 0xa828
   12c50:	movt	r1, #1
   12c54:	b	12cec <__assert_fail@plt+0x17fc>
   12c58:	movw	r0, #43279	; 0xa90f
   12c5c:	movt	r0, #1
   12c60:	movw	r2, #43205	; 0xa8c5
   12c64:	movt	r2, #1
   12c68:	cmp	sl, #0
   12c6c:	movne	r2, r0
   12c70:	movw	r1, #43239	; 0xa8e7
   12c74:	movt	r1, #1
   12c78:	cmp	r5, #0
   12c7c:	moveq	r1, r2
   12c80:	mov	r0, #0
   12c84:	mov	r2, #5
   12c88:	bl	11268 <dcgettext@plt>
   12c8c:	mov	r7, r0
   12c90:	mov	r0, #0
   12c94:	bl	12f14 <__assert_fail@plt+0x1a24>
   12c98:	mov	r6, r8
   12c9c:	mov	r8, #0
   12ca0:	b	12cfc <__assert_fail@plt+0x180c>
   12ca4:	cmp	sl, #0
   12ca8:	beq	12cd8 <__assert_fail@plt+0x17e8>
   12cac:	movw	r1, #43347	; 0xa953
   12cb0:	movt	r1, #1
   12cb4:	b	12cec <__assert_fail@plt+0x17fc>
   12cb8:	cmp	sl, #0
   12cbc:	beq	12ce4 <__assert_fail@plt+0x17f4>
   12cc0:	movw	r1, #43161	; 0xa899
   12cc4:	movt	r1, #1
   12cc8:	b	12cec <__assert_fail@plt+0x17fc>
   12ccc:	movw	r1, #43083	; 0xa84b
   12cd0:	movt	r1, #1
   12cd4:	b	12cec <__assert_fail@plt+0x17fc>
   12cd8:	movw	r1, #43375	; 0xa96f
   12cdc:	movt	r1, #1
   12ce0:	b	12cec <__assert_fail@plt+0x17fc>
   12ce4:	movw	r1, #43205	; 0xa8c5
   12ce8:	movt	r1, #1
   12cec:	mov	r0, #0
   12cf0:	mov	r2, #5
   12cf4:	bl	11268 <dcgettext@plt>
   12cf8:	mov	r7, r0
   12cfc:	mov	r0, #4
   12d00:	mov	r1, r9
   12d04:	bl	17748 <__assert_fail@plt+0x6258>
   12d08:	mov	r2, r0
   12d0c:	str	r8, [sp]
   12d10:	mov	r0, #1
   12d14:	mov	r1, r7
   12d18:	mov	r3, r6
   12d1c:	bl	113c4 <__printf_chk@plt>
   12d20:	mov	r0, r6
   12d24:	bl	12f14 <__assert_fail@plt+0x1a24>
   12d28:	mov	r0, r8
   12d2c:	sub	sp, fp, #28
   12d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d34:	b	12f14 <__assert_fail@plt+0x1a24>
   12d38:	bl	114a8 <abort@plt>
   12d3c:	push	{r4, r5, r6, sl, fp, lr}
   12d40:	add	fp, sp, #16
   12d44:	mov	r4, r1
   12d48:	cmp	r0, #0
   12d4c:	beq	12da0 <__assert_fail@plt+0x18b0>
   12d50:	mov	r5, r0
   12d54:	cmp	r4, #0
   12d58:	beq	12db4 <__assert_fail@plt+0x18c4>
   12d5c:	mov	r0, r5
   12d60:	bl	11370 <strlen@plt>
   12d64:	mov	r6, r0
   12d68:	mov	r0, r4
   12d6c:	bl	11370 <strlen@plt>
   12d70:	add	r0, r6, r0
   12d74:	add	r0, r0, #2
   12d78:	bl	182b8 <__assert_fail@plt+0x6dc8>
   12d7c:	mov	r6, r0
   12d80:	mov	r1, r5
   12d84:	bl	1125c <stpcpy@plt>
   12d88:	mov	r1, #58	; 0x3a
   12d8c:	strh	r1, [r0], #1
   12d90:	mov	r1, r4
   12d94:	bl	1125c <stpcpy@plt>
   12d98:	mov	r0, r6
   12d9c:	pop	{r4, r5, r6, sl, fp, pc}
   12da0:	cmp	r4, #0
   12da4:	beq	12dc0 <__assert_fail@plt+0x18d0>
   12da8:	mov	r0, r4
   12dac:	pop	{r4, r5, r6, sl, fp, lr}
   12db0:	b	18620 <__assert_fail@plt+0x7130>
   12db4:	mov	r0, r5
   12db8:	pop	{r4, r5, r6, sl, fp, lr}
   12dbc:	b	18620 <__assert_fail@plt+0x7130>
   12dc0:	mov	r6, #0
   12dc4:	mov	r0, r6
   12dc8:	pop	{r4, r5, r6, sl, fp, pc}
   12dcc:	push	{fp, lr}
   12dd0:	mov	fp, sp
   12dd4:	sub	sp, sp, #8
   12dd8:	mov	ip, #0
   12ddc:	str	ip, [sp]
   12de0:	bl	11478 <fchownat@plt>
   12de4:	mov	sp, fp
   12de8:	pop	{fp, pc}
   12dec:	push	{fp, lr}
   12df0:	mov	fp, sp
   12df4:	sub	sp, sp, #8
   12df8:	mov	ip, #256	; 0x100
   12dfc:	str	ip, [sp]
   12e00:	bl	11478 <fchownat@plt>
   12e04:	mov	sp, fp
   12e08:	pop	{fp, pc}
   12e0c:	movw	r1, #49584	; 0xc1b0
   12e10:	movt	r1, #2
   12e14:	str	r0, [r1]
   12e18:	bx	lr
   12e1c:	movw	r1, #49588	; 0xc1b4
   12e20:	movt	r1, #2
   12e24:	strb	r0, [r1]
   12e28:	bx	lr
   12e2c:	push	{r4, r5, r6, sl, fp, lr}
   12e30:	add	fp, sp, #16
   12e34:	sub	sp, sp, #8
   12e38:	movw	r0, #49548	; 0xc18c
   12e3c:	movt	r0, #2
   12e40:	ldr	r0, [r0]
   12e44:	bl	19180 <__assert_fail@plt+0x7c90>
   12e48:	cmp	r0, #0
   12e4c:	beq	12e74 <__assert_fail@plt+0x1984>
   12e50:	movw	r0, #49588	; 0xc1b4
   12e54:	movt	r0, #2
   12e58:	ldrb	r0, [r0]
   12e5c:	cmp	r0, #0
   12e60:	beq	12e94 <__assert_fail@plt+0x19a4>
   12e64:	bl	113a0 <__errno_location@plt>
   12e68:	ldr	r0, [r0]
   12e6c:	cmp	r0, #32
   12e70:	bne	12e94 <__assert_fail@plt+0x19a4>
   12e74:	movw	r0, #49544	; 0xc188
   12e78:	movt	r0, #2
   12e7c:	ldr	r0, [r0]
   12e80:	bl	19180 <__assert_fail@plt+0x7c90>
   12e84:	cmp	r0, #0
   12e88:	subeq	sp, fp, #16
   12e8c:	popeq	{r4, r5, r6, sl, fp, pc}
   12e90:	b	12f04 <__assert_fail@plt+0x1a14>
   12e94:	movw	r1, #43416	; 0xa998
   12e98:	movt	r1, #1
   12e9c:	mov	r0, #0
   12ea0:	mov	r2, #5
   12ea4:	bl	11268 <dcgettext@plt>
   12ea8:	mov	r4, r0
   12eac:	movw	r0, #49584	; 0xc1b0
   12eb0:	movt	r0, #2
   12eb4:	ldr	r6, [r0]
   12eb8:	bl	113a0 <__errno_location@plt>
   12ebc:	ldr	r5, [r0]
   12ec0:	cmp	r6, #0
   12ec4:	bne	12ee0 <__assert_fail@plt+0x19f0>
   12ec8:	movw	r2, #42203	; 0xa4db
   12ecc:	movt	r2, #1
   12ed0:	mov	r0, #0
   12ed4:	mov	r1, r5
   12ed8:	mov	r3, r4
   12edc:	b	12f00 <__assert_fail@plt+0x1a10>
   12ee0:	mov	r0, r6
   12ee4:	bl	177ec <__assert_fail@plt+0x62fc>
   12ee8:	mov	r3, r0
   12eec:	str	r4, [sp]
   12ef0:	movw	r2, #43428	; 0xa9a4
   12ef4:	movt	r2, #1
   12ef8:	mov	r0, #0
   12efc:	mov	r1, r5
   12f00:	bl	112f8 <error@plt>
   12f04:	movw	r0, #49460	; 0xc134
   12f08:	movt	r0, #2
   12f0c:	ldr	r0, [r0]
   12f10:	bl	11238 <_exit@plt>
   12f14:	push	{r4, r5, r6, sl, fp, lr}
   12f18:	add	fp, sp, #16
   12f1c:	mov	r4, r0
   12f20:	bl	113a0 <__errno_location@plt>
   12f24:	mov	r5, r0
   12f28:	ldr	r6, [r0]
   12f2c:	mov	r0, r4
   12f30:	bl	1122c <free@plt>
   12f34:	str	r6, [r5]
   12f38:	pop	{r4, r5, r6, sl, fp, pc}
   12f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f40:	add	fp, sp, #28
   12f44:	sub	sp, sp, #12
   12f48:	cmp	r1, #4096	; 0x1000
   12f4c:	bcs	12f68 <__assert_fail@plt+0x1a78>
   12f50:	mov	r6, r1
   12f54:	mov	r7, r0
   12f58:	and	r0, r1, #516	; 0x204
   12f5c:	cmp	r0, #516	; 0x204
   12f60:	tstne	r6, #18
   12f64:	bne	12f84 <__assert_fail@plt+0x1a94>
   12f68:	bl	113a0 <__errno_location@plt>
   12f6c:	mov	r1, #22
   12f70:	str	r1, [r0]
   12f74:	mov	r4, #0
   12f78:	mov	r0, r4
   12f7c:	sub	sp, fp, #28
   12f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f84:	mov	sl, r2
   12f88:	mov	r0, #1
   12f8c:	mov	r1, #96	; 0x60
   12f90:	bl	18c3c <__assert_fail@plt+0x774c>
   12f94:	cmp	r0, #0
   12f98:	beq	12f74 <__assert_fail@plt+0x1a84>
   12f9c:	mov	r4, r0
   12fa0:	mvn	r0, #99	; 0x63
   12fa4:	str	r0, [r4, #32]
   12fa8:	bic	r0, r6, #516	; 0x204
   12fac:	tst	r6, #2
   12fb0:	mov	r1, r6
   12fb4:	orrne	r1, r0, #4
   12fb8:	str	sl, [r4, #44]	; 0x2c
   12fbc:	str	r1, [r4, #48]	; 0x30
   12fc0:	mov	r0, r7
   12fc4:	bl	13248 <__assert_fail@plt+0x1d58>
   12fc8:	mov	r1, r0
   12fcc:	cmp	r0, #4096	; 0x1000
   12fd0:	movls	r1, #4096	; 0x1000
   12fd4:	mov	r0, r4
   12fd8:	bl	13290 <__assert_fail@plt+0x1da0>
   12fdc:	cmp	r0, #0
   12fe0:	beq	1323c <__assert_fail@plt+0x1d4c>
   12fe4:	ldr	r0, [r7]
   12fe8:	cmp	r0, #0
   12fec:	beq	1302c <__assert_fail@plt+0x1b3c>
   12ff0:	movw	r1, #41364	; 0xa194
   12ff4:	movt	r1, #1
   12ff8:	mov	r0, r4
   12ffc:	mov	r2, #0
   13000:	bl	1330c <__assert_fail@plt+0x1e1c>
   13004:	cmp	r0, #0
   13008:	beq	13234 <__assert_fail@plt+0x1d44>
   1300c:	mov	r8, r0
   13010:	mvn	r0, #0
   13014:	str	r0, [r8, #48]	; 0x30
   13018:	cmp	sl, #0
   1301c:	beq	13038 <__assert_fail@plt+0x1b48>
   13020:	ldrb	r0, [r4, #49]	; 0x31
   13024:	ubfx	r0, r0, #2, #1
   13028:	b	1303c <__assert_fail@plt+0x1b4c>
   1302c:	mov	r8, #0
   13030:	cmp	sl, #0
   13034:	bne	13020 <__assert_fail@plt+0x1b30>
   13038:	mov	r0, #1
   1303c:	ldr	r5, [r7]
   13040:	cmp	r5, #0
   13044:	beq	13170 <__assert_fail@plt+0x1c80>
   13048:	and	r1, r6, #2048	; 0x800
   1304c:	str	r1, [sp, #8]
   13050:	eor	r0, r0, #1
   13054:	str	r0, [sp, #4]
   13058:	mov	r9, #0
   1305c:	mov	r0, #0
   13060:	str	r0, [sp]
   13064:	mov	r6, #0
   13068:	b	130a0 <__assert_fail@plt+0x1bb0>
   1306c:	mov	r0, r4
   13070:	mov	r1, r5
   13074:	mov	r2, #0
   13078:	bl	133c0 <__assert_fail@plt+0x1ed0>
   1307c:	strh	r0, [r5, #56]	; 0x38
   13080:	cmp	sl, #0
   13084:	beq	13148 <__assert_fail@plt+0x1c58>
   13088:	str	r9, [r5, #8]
   1308c:	mov	r9, r5
   13090:	add	r6, r6, #1
   13094:	ldr	r5, [r7, #4]!
   13098:	cmp	r5, #0
   1309c:	beq	13178 <__assert_fail@plt+0x1c88>
   130a0:	mov	r0, r5
   130a4:	bl	11370 <strlen@plt>
   130a8:	mov	r2, r0
   130ac:	ldr	r0, [sp, #8]
   130b0:	cmp	r0, #0
   130b4:	bne	130ec <__assert_fail@plt+0x1bfc>
   130b8:	cmp	r2, #3
   130bc:	bcc	130ec <__assert_fail@plt+0x1bfc>
   130c0:	add	r0, r2, r5
   130c4:	ldrb	r0, [r0, #-1]
   130c8:	cmp	r0, #47	; 0x2f
   130cc:	bne	130ec <__assert_fail@plt+0x1bfc>
   130d0:	sub	r0, r5, #2
   130d4:	ldrb	r1, [r0, r2]
   130d8:	cmp	r1, #47	; 0x2f
   130dc:	bne	130ec <__assert_fail@plt+0x1bfc>
   130e0:	sub	r2, r2, #1
   130e4:	cmp	r2, #1
   130e8:	bhi	130d4 <__assert_fail@plt+0x1be4>
   130ec:	mov	r0, r4
   130f0:	mov	r1, r5
   130f4:	bl	1330c <__assert_fail@plt+0x1e1c>
   130f8:	cmp	r0, #0
   130fc:	beq	13224 <__assert_fail@plt+0x1d34>
   13100:	mov	r5, r0
   13104:	str	r8, [r0, #4]
   13108:	mov	r0, #0
   1310c:	str	r0, [r5, #48]	; 0x30
   13110:	add	r0, r5, #168	; 0xa8
   13114:	str	r0, [r5, #24]
   13118:	clz	r0, r9
   1311c:	lsr	r0, r0, #5
   13120:	ldr	r1, [sp, #4]
   13124:	orrs	r0, r1, r0
   13128:	bne	1306c <__assert_fail@plt+0x1b7c>
   1312c:	mov	r0, #11
   13130:	strh	r0, [r5, #56]	; 0x38
   13134:	mov	r0, r5
   13138:	mov	r1, #1
   1313c:	bl	13390 <__assert_fail@plt+0x1ea0>
   13140:	cmp	sl, #0
   13144:	bne	13088 <__assert_fail@plt+0x1b98>
   13148:	mov	r0, #0
   1314c:	str	r0, [r5, #8]
   13150:	cmp	r9, #0
   13154:	beq	13168 <__assert_fail@plt+0x1c78>
   13158:	ldr	r0, [sp]
   1315c:	str	r5, [r0, #8]
   13160:	str	r5, [sp]
   13164:	b	13090 <__assert_fail@plt+0x1ba0>
   13168:	str	r5, [sp]
   1316c:	b	1308c <__assert_fail@plt+0x1b9c>
   13170:	mov	r9, #0
   13174:	b	1319c <__assert_fail@plt+0x1cac>
   13178:	cmp	sl, #0
   1317c:	beq	1319c <__assert_fail@plt+0x1cac>
   13180:	cmp	r6, #2
   13184:	bcc	1319c <__assert_fail@plt+0x1cac>
   13188:	mov	r0, r4
   1318c:	mov	r1, r9
   13190:	mov	r2, r6
   13194:	bl	13534 <__assert_fail@plt+0x2044>
   13198:	mov	r9, r0
   1319c:	movw	r1, #41364	; 0xa194
   131a0:	movt	r1, #1
   131a4:	mov	r0, r4
   131a8:	mov	r2, #0
   131ac:	bl	1330c <__assert_fail@plt+0x1e1c>
   131b0:	str	r0, [r4]
   131b4:	cmp	r0, #0
   131b8:	beq	13224 <__assert_fail@plt+0x1d34>
   131bc:	mov	r1, #9
   131c0:	strh	r1, [r0, #56]	; 0x38
   131c4:	str	r9, [r0, #8]
   131c8:	mov	r1, #1
   131cc:	str	r1, [r0, #48]	; 0x30
   131d0:	mov	r0, r4
   131d4:	bl	13604 <__assert_fail@plt+0x2114>
   131d8:	cmp	r0, #0
   131dc:	beq	13224 <__assert_fail@plt+0x1d34>
   131e0:	ldrh	r0, [r4, #48]	; 0x30
   131e4:	tst	r0, #516	; 0x204
   131e8:	bne	13214 <__assert_fail@plt+0x1d24>
   131ec:	movw	r1, #43436	; 0xa9ac
   131f0:	movt	r1, #1
   131f4:	mov	r0, r4
   131f8:	bl	13690 <__assert_fail@plt+0x21a0>
   131fc:	str	r0, [r4, #28]
   13200:	cmn	r0, #1
   13204:	bgt	13214 <__assert_fail@plt+0x1d24>
   13208:	ldr	r0, [r4, #48]	; 0x30
   1320c:	orr	r0, r0, #4
   13210:	str	r0, [r4, #48]	; 0x30
   13214:	add	r0, r4, #60	; 0x3c
   13218:	mvn	r1, #0
   1321c:	bl	15f8c <__assert_fail@plt+0x4a9c>
   13220:	b	12f78 <__assert_fail@plt+0x1a88>
   13224:	mov	r0, r9
   13228:	bl	136c0 <__assert_fail@plt+0x21d0>
   1322c:	mov	r0, r8
   13230:	bl	12f14 <__assert_fail@plt+0x1a24>
   13234:	ldr	r0, [r4, #24]
   13238:	bl	12f14 <__assert_fail@plt+0x1a24>
   1323c:	mov	r0, r4
   13240:	bl	12f14 <__assert_fail@plt+0x1a24>
   13244:	b	12f74 <__assert_fail@plt+0x1a84>
   13248:	push	{r4, r5, fp, lr}
   1324c:	add	fp, sp, #8
   13250:	mov	r1, r0
   13254:	ldr	r0, [r0]
   13258:	cmp	r0, #0
   1325c:	beq	13288 <__assert_fail@plt+0x1d98>
   13260:	add	r5, r1, #4
   13264:	mov	r4, #0
   13268:	bl	11370 <strlen@plt>
   1326c:	cmp	r0, r4
   13270:	movhi	r4, r0
   13274:	ldr	r0, [r5], #4
   13278:	cmp	r0, #0
   1327c:	bne	13268 <__assert_fail@plt+0x1d78>
   13280:	add	r0, r4, #1
   13284:	pop	{r4, r5, fp, pc}
   13288:	mov	r0, #1
   1328c:	pop	{r4, r5, fp, pc}
   13290:	push	{r4, r5, fp, lr}
   13294:	add	fp, sp, #8
   13298:	mov	r4, r0
   1329c:	ldr	r0, [r0, #36]	; 0x24
   132a0:	add	r1, r1, #256	; 0x100
   132a4:	adds	r1, r1, r0
   132a8:	bcc	132d0 <__assert_fail@plt+0x1de0>
   132ac:	ldr	r0, [r4, #24]
   132b0:	bl	12f14 <__assert_fail@plt+0x1a24>
   132b4:	mov	r5, #0
   132b8:	str	r5, [r4, #24]
   132bc:	bl	113a0 <__errno_location@plt>
   132c0:	mov	r1, #36	; 0x24
   132c4:	str	r1, [r0]
   132c8:	mov	r0, r5
   132cc:	pop	{r4, r5, fp, pc}
   132d0:	str	r1, [r4, #36]	; 0x24
   132d4:	ldr	r0, [r4, #24]
   132d8:	bl	18cc0 <__assert_fail@plt+0x77d0>
   132dc:	cmp	r0, #0
   132e0:	beq	132f4 <__assert_fail@plt+0x1e04>
   132e4:	str	r0, [r4, #24]
   132e8:	mov	r5, #1
   132ec:	mov	r0, r5
   132f0:	pop	{r4, r5, fp, pc}
   132f4:	ldr	r0, [r4, #24]
   132f8:	bl	12f14 <__assert_fail@plt+0x1a24>
   132fc:	mov	r5, #0
   13300:	str	r5, [r4, #24]
   13304:	mov	r0, r5
   13308:	pop	{r4, r5, fp, pc}
   1330c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13310:	add	fp, sp, #24
   13314:	mov	r6, r2
   13318:	mov	r8, r1
   1331c:	mov	r5, r0
   13320:	add	r0, r2, #176	; 0xb0
   13324:	bic	r0, r0, #7
   13328:	bl	18c90 <__assert_fail@plt+0x77a0>
   1332c:	cmp	r0, #0
   13330:	beq	13384 <__assert_fail@plt+0x1e94>
   13334:	mov	r4, r0
   13338:	add	r7, r0, #168	; 0xa8
   1333c:	mov	r0, r7
   13340:	mov	r1, r8
   13344:	mov	r2, r6
   13348:	bl	11244 <memcpy@plt>
   1334c:	mov	r0, #0
   13350:	strb	r0, [r7, r6]
   13354:	str	r6, [r4, #52]	; 0x34
   13358:	str	r5, [r4, #44]	; 0x2c
   1335c:	ldr	r1, [r5, #24]
   13360:	str	r0, [r4, #12]
   13364:	str	r0, [r4, #16]
   13368:	str	r0, [r4, #20]
   1336c:	mov	r2, #196608	; 0x30000
   13370:	str	r2, [r4, #58]	; 0x3a
   13374:	str	r1, [r4, #28]
   13378:	str	r0, [r4, #32]
   1337c:	mov	r0, r4
   13380:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13384:	mov	r4, #0
   13388:	mov	r0, r4
   1338c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13390:	push	{fp, lr}
   13394:	mov	fp, sp
   13398:	ldrh	r2, [r0, #56]	; 0x38
   1339c:	cmp	r2, #11
   133a0:	bne	133bc <__assert_fail@plt+0x1ecc>
   133a4:	mov	r3, #0
   133a8:	mov	r2, #1
   133ac:	cmp	r1, #0
   133b0:	movwne	r2, #2
   133b4:	strd	r2, [r0, #112]	; 0x70
   133b8:	pop	{fp, pc}
   133bc:	bl	114a8 <abort@plt>
   133c0:	push	{r4, r5, r6, sl, fp, lr}
   133c4:	add	fp, sp, #16
   133c8:	mov	r4, r1
   133cc:	ldr	r1, [r1, #48]	; 0x30
   133d0:	cmp	r1, #0
   133d4:	bne	133e4 <__assert_fail@plt+0x1ef4>
   133d8:	ldrb	r1, [r0, #48]	; 0x30
   133dc:	and	r1, r1, #1
   133e0:	orr	r2, r1, r2
   133e4:	add	r5, r4, #64	; 0x40
   133e8:	cmp	r2, #0
   133ec:	ldreq	r1, [r0, #48]	; 0x30
   133f0:	andseq	r1, r1, #2
   133f4:	beq	13444 <__assert_fail@plt+0x1f54>
   133f8:	ldr	r0, [r4, #24]
   133fc:	mov	r1, r5
   13400:	bl	19b1c <__assert_fail@plt+0x862c>
   13404:	cmp	r0, #0
   13408:	beq	134b8 <__assert_fail@plt+0x1fc8>
   1340c:	bl	113a0 <__errno_location@plt>
   13410:	mov	r6, r0
   13414:	ldr	r0, [r0]
   13418:	cmp	r0, #2
   1341c:	bne	13468 <__assert_fail@plt+0x1f78>
   13420:	ldr	r0, [r4, #24]
   13424:	mov	r1, r5
   13428:	bl	19b3c <__assert_fail@plt+0x864c>
   1342c:	cmp	r0, #0
   13430:	bne	13468 <__assert_fail@plt+0x1f78>
   13434:	mov	r0, #0
   13438:	str	r0, [r6]
   1343c:	mov	r0, #13
   13440:	pop	{r4, r5, r6, sl, fp, pc}
   13444:	ldr	r1, [r4, #24]
   13448:	ldr	r0, [r0, #32]
   1344c:	mov	r2, r5
   13450:	mov	r3, #256	; 0x100
   13454:	bl	19b4c <__assert_fail@plt+0x865c>
   13458:	cmp	r0, #0
   1345c:	beq	134b8 <__assert_fail@plt+0x1fc8>
   13460:	bl	113a0 <__errno_location@plt>
   13464:	mov	r6, r0
   13468:	ldr	r0, [r6]
   1346c:	str	r0, [r4, #32]
   13470:	mov	r0, #0
   13474:	vmov.i32	q8, #0	; 0x00000000
   13478:	str	r0, [r5, #96]	; 0x60
   1347c:	add	r1, r5, #80	; 0x50
   13480:	vst1.64	{d16-d17}, [r1]
   13484:	add	r1, r5, #64	; 0x40
   13488:	vst1.64	{d16-d17}, [r1]
   1348c:	add	r1, r5, #48	; 0x30
   13490:	vst1.64	{d16-d17}, [r1]
   13494:	add	r1, r5, #32
   13498:	vst1.64	{d16-d17}, [r1]
   1349c:	add	r1, r5, #16
   134a0:	vst1.64	{d16-d17}, [r1]
   134a4:	mov	r1, #100	; 0x64
   134a8:	vst1.64	{d16-d17}, [r5], r1
   134ac:	str	r0, [r5]
   134b0:	mov	r0, #10
   134b4:	pop	{r4, r5, r6, sl, fp, pc}
   134b8:	ldr	r0, [r4, #80]	; 0x50
   134bc:	and	r0, r0, #61440	; 0xf000
   134c0:	cmp	r0, #40960	; 0xa000
   134c4:	beq	1351c <__assert_fail@plt+0x202c>
   134c8:	cmp	r0, #32768	; 0x8000
   134cc:	beq	13524 <__assert_fail@plt+0x2034>
   134d0:	cmp	r0, #16384	; 0x4000
   134d4:	bne	1352c <__assert_fail@plt+0x203c>
   134d8:	ldrb	r1, [r4, #168]	; 0xa8
   134dc:	mov	r0, #1
   134e0:	cmp	r1, #46	; 0x2e
   134e4:	bne	13530 <__assert_fail@plt+0x2040>
   134e8:	ldrb	r1, [r4, #169]	; 0xa9
   134ec:	cmp	r1, #0
   134f0:	beq	13508 <__assert_fail@plt+0x2018>
   134f4:	cmp	r1, #46	; 0x2e
   134f8:	bne	13530 <__assert_fail@plt+0x2040>
   134fc:	ldrb	r1, [r4, #170]	; 0xaa
   13500:	cmp	r1, #0
   13504:	popne	{r4, r5, r6, sl, fp, pc}
   13508:	ldr	r1, [r4, #48]	; 0x30
   1350c:	mov	r0, #5
   13510:	cmp	r1, #0
   13514:	movweq	r0, #1
   13518:	pop	{r4, r5, r6, sl, fp, pc}
   1351c:	mov	r0, #12
   13520:	pop	{r4, r5, r6, sl, fp, pc}
   13524:	mov	r0, #8
   13528:	pop	{r4, r5, r6, sl, fp, pc}
   1352c:	mov	r0, #3
   13530:	pop	{r4, r5, r6, sl, fp, pc}
   13534:	push	{r4, r5, r6, r7, fp, lr}
   13538:	add	fp, sp, #16
   1353c:	mov	r6, r2
   13540:	mov	r4, r1
   13544:	mov	r5, r0
   13548:	ldr	r7, [r0, #44]	; 0x2c
   1354c:	ldr	r0, [r0, #40]	; 0x28
   13550:	cmp	r0, r2
   13554:	bcs	13580 <__assert_fail@plt+0x2090>
   13558:	add	r1, r6, #40	; 0x28
   1355c:	str	r1, [r5, #40]	; 0x28
   13560:	cmn	r1, #-1073741823	; 0xc0000001
   13564:	bhi	135e8 <__assert_fail@plt+0x20f8>
   13568:	ldr	r0, [r5, #8]
   1356c:	lsl	r1, r1, #2
   13570:	bl	18cc0 <__assert_fail@plt+0x77d0>
   13574:	cmp	r0, #0
   13578:	beq	135e8 <__assert_fail@plt+0x20f8>
   1357c:	str	r0, [r5, #8]
   13580:	cmp	r4, #0
   13584:	beq	1359c <__assert_fail@plt+0x20ac>
   13588:	ldr	r0, [r5, #8]
   1358c:	str	r4, [r0], #4
   13590:	ldr	r4, [r4, #8]
   13594:	cmp	r4, #0
   13598:	bne	1358c <__assert_fail@plt+0x209c>
   1359c:	ldr	r0, [r5, #8]
   135a0:	mov	r1, r6
   135a4:	mov	r2, #4
   135a8:	mov	r3, r7
   135ac:	bl	1146c <qsort@plt>
   135b0:	subs	r1, r6, #1
   135b4:	ldr	r0, [r5, #8]
   135b8:	ldr	r4, [r0]
   135bc:	beq	135d4 <__assert_fail@plt+0x20e4>
   135c0:	ldr	r2, [r0]
   135c4:	ldr	r3, [r0, #4]!
   135c8:	str	r3, [r2, #8]
   135cc:	subs	r1, r1, #1
   135d0:	bne	135c0 <__assert_fail@plt+0x20d0>
   135d4:	ldr	r0, [r0]
   135d8:	mov	r1, #0
   135dc:	str	r1, [r0, #8]
   135e0:	mov	r0, r4
   135e4:	pop	{r4, r5, r6, r7, fp, pc}
   135e8:	ldr	r0, [r5, #8]
   135ec:	bl	12f14 <__assert_fail@plt+0x1a24>
   135f0:	mov	r0, #0
   135f4:	str	r0, [r5, #40]	; 0x28
   135f8:	str	r0, [r5, #8]
   135fc:	mov	r0, r4
   13600:	pop	{r4, r5, r6, r7, fp, pc}
   13604:	push	{r4, r5, fp, lr}
   13608:	add	fp, sp, #8
   1360c:	sub	sp, sp, #8
   13610:	mov	r4, r0
   13614:	ldrh	r0, [r0, #48]	; 0x30
   13618:	movw	r1, #258	; 0x102
   1361c:	tst	r0, r1
   13620:	beq	13660 <__assert_fail@plt+0x2170>
   13624:	movw	r0, #12052	; 0x2f14
   13628:	movt	r0, #1
   1362c:	str	r0, [sp]
   13630:	mov	r5, #0
   13634:	movw	r2, #19684	; 0x4ce4
   13638:	movt	r2, #1
   1363c:	movw	r3, #19716	; 0x4d04
   13640:	movt	r3, #1
   13644:	mov	r0, #31
   13648:	mov	r1, #0
   1364c:	bl	154e4 <__assert_fail@plt+0x3ff4>
   13650:	str	r0, [r4, #56]	; 0x38
   13654:	cmp	r0, #0
   13658:	movne	r5, #1
   1365c:	b	13684 <__assert_fail@plt+0x2194>
   13660:	mov	r0, #32
   13664:	bl	18c90 <__assert_fail@plt+0x77a0>
   13668:	str	r0, [r4, #56]	; 0x38
   1366c:	cmp	r0, #0
   13670:	beq	13680 <__assert_fail@plt+0x2190>
   13674:	bl	19204 <__assert_fail@plt+0x7d14>
   13678:	mov	r5, #1
   1367c:	b	13684 <__assert_fail@plt+0x2194>
   13680:	mov	r5, #0
   13684:	mov	r0, r5
   13688:	sub	sp, fp, #8
   1368c:	pop	{r4, r5, fp, pc}
   13690:	ldr	r3, [r0, #48]	; 0x30
   13694:	mov	r2, #32768	; 0x8000
   13698:	and	r2, r2, r3, lsl #11
   1369c:	orr	r2, r2, #18688	; 0x4900
   136a0:	orr	r2, r2, #524288	; 0x80000
   136a4:	tst	r3, #512	; 0x200
   136a8:	bne	136b8 <__assert_fail@plt+0x21c8>
   136ac:	mov	r0, r1
   136b0:	mov	r1, r2
   136b4:	b	1959c <__assert_fail@plt+0x80ac>
   136b8:	ldr	r0, [r0, #32]
   136bc:	b	160b0 <__assert_fail@plt+0x4bc0>
   136c0:	push	{r4, r6, r7, sl, fp, lr}
   136c4:	add	fp, sp, #16
   136c8:	cmp	r0, #0
   136cc:	beq	13704 <__assert_fail@plt+0x2214>
   136d0:	mov	r4, r0
   136d4:	b	136ec <__assert_fail@plt+0x21fc>
   136d8:	mov	r0, r4
   136dc:	bl	12f14 <__assert_fail@plt+0x1a24>
   136e0:	cmp	r6, #0
   136e4:	mov	r4, r6
   136e8:	beq	13704 <__assert_fail@plt+0x2214>
   136ec:	ldrd	r6, [r4, #8]
   136f0:	cmp	r7, #0
   136f4:	beq	136d8 <__assert_fail@plt+0x21e8>
   136f8:	mov	r0, r7
   136fc:	bl	114cc <closedir@plt>
   13700:	b	136d8 <__assert_fail@plt+0x21e8>
   13704:	pop	{r4, r6, r7, sl, fp, pc}
   13708:	push	{r4, r5, fp, lr}
   1370c:	add	fp, sp, #8
   13710:	mov	r4, r0
   13714:	ldr	r0, [r0]
   13718:	cmp	r0, #0
   1371c:	beq	1375c <__assert_fail@plt+0x226c>
   13720:	ldr	r1, [r0, #48]	; 0x30
   13724:	cmp	r1, #0
   13728:	bmi	13750 <__assert_fail@plt+0x2260>
   1372c:	ldr	r5, [r0, #8]
   13730:	cmp	r5, #0
   13734:	ldreq	r5, [r0, #4]
   13738:	bl	12f14 <__assert_fail@plt+0x1a24>
   1373c:	ldr	r0, [r5, #48]	; 0x30
   13740:	cmn	r0, #1
   13744:	mov	r0, r5
   13748:	bgt	1372c <__assert_fail@plt+0x223c>
   1374c:	b	13754 <__assert_fail@plt+0x2264>
   13750:	mov	r5, r0
   13754:	mov	r0, r5
   13758:	bl	12f14 <__assert_fail@plt+0x1a24>
   1375c:	ldr	r0, [r4, #4]
   13760:	cmp	r0, #0
   13764:	blne	136c0 <__assert_fail@plt+0x21d0>
   13768:	ldr	r0, [r4, #8]
   1376c:	bl	12f14 <__assert_fail@plt+0x1a24>
   13770:	ldr	r0, [r4, #24]
   13774:	bl	12f14 <__assert_fail@plt+0x1a24>
   13778:	ldr	r0, [r4, #48]	; 0x30
   1377c:	tst	r0, #512	; 0x200
   13780:	bne	137ac <__assert_fail@plt+0x22bc>
   13784:	mov	r5, #0
   13788:	tst	r0, #4
   1378c:	bne	137f0 <__assert_fail@plt+0x2300>
   13790:	ldr	r0, [r4, #28]
   13794:	bl	11460 <fchdir@plt>
   13798:	cmp	r0, #0
   1379c:	beq	137cc <__assert_fail@plt+0x22dc>
   137a0:	bl	113a0 <__errno_location@plt>
   137a4:	ldr	r5, [r0]
   137a8:	b	137d0 <__assert_fail@plt+0x22e0>
   137ac:	ldr	r0, [r4, #32]
   137b0:	mov	r5, #0
   137b4:	cmp	r0, #0
   137b8:	bmi	137f0 <__assert_fail@plt+0x2300>
   137bc:	bl	114b4 <close@plt>
   137c0:	cmp	r0, #0
   137c4:	bne	137e8 <__assert_fail@plt+0x22f8>
   137c8:	b	137f0 <__assert_fail@plt+0x2300>
   137cc:	mov	r5, #0
   137d0:	ldr	r0, [r4, #28]
   137d4:	bl	114b4 <close@plt>
   137d8:	cmp	r5, #0
   137dc:	bne	137f0 <__assert_fail@plt+0x2300>
   137e0:	cmp	r0, #0
   137e4:	beq	137f0 <__assert_fail@plt+0x2300>
   137e8:	bl	113a0 <__errno_location@plt>
   137ec:	ldr	r5, [r0]
   137f0:	add	r0, r4, #60	; 0x3c
   137f4:	bl	13838 <__assert_fail@plt+0x2348>
   137f8:	ldr	r0, [r4, #52]	; 0x34
   137fc:	cmp	r0, #0
   13800:	beq	13808 <__assert_fail@plt+0x2318>
   13804:	bl	157c0 <__assert_fail@plt+0x42d0>
   13808:	mov	r0, r4
   1380c:	bl	13874 <__assert_fail@plt+0x2384>
   13810:	mov	r0, r4
   13814:	bl	12f14 <__assert_fail@plt+0x1a24>
   13818:	cmp	r5, #0
   1381c:	beq	13830 <__assert_fail@plt+0x2340>
   13820:	bl	113a0 <__errno_location@plt>
   13824:	str	r5, [r0]
   13828:	mvn	r0, #0
   1382c:	pop	{r4, r5, fp, pc}
   13830:	mov	r0, #0
   13834:	pop	{r4, r5, fp, pc}
   13838:	push	{r4, sl, fp, lr}
   1383c:	add	fp, sp, #8
   13840:	mov	r4, r0
   13844:	b	1384c <__assert_fail@plt+0x235c>
   13848:	mov	r0, r4
   1384c:	bl	15fb8 <__assert_fail@plt+0x4ac8>
   13850:	cmp	r0, #0
   13854:	bne	13870 <__assert_fail@plt+0x2380>
   13858:	mov	r0, r4
   1385c:	bl	16004 <__assert_fail@plt+0x4b14>
   13860:	cmp	r0, #0
   13864:	bmi	13848 <__assert_fail@plt+0x2358>
   13868:	bl	114b4 <close@plt>
   1386c:	b	13848 <__assert_fail@plt+0x2358>
   13870:	pop	{r4, sl, fp, pc}
   13874:	ldrh	r1, [r0, #48]	; 0x30
   13878:	movw	r2, #258	; 0x102
   1387c:	tst	r1, r2
   13880:	beq	13894 <__assert_fail@plt+0x23a4>
   13884:	ldr	r0, [r0, #56]	; 0x38
   13888:	cmp	r0, #0
   1388c:	bxeq	lr
   13890:	b	157c0 <__assert_fail@plt+0x42d0>
   13894:	ldr	r0, [r0, #56]	; 0x38
   13898:	b	12f14 <__assert_fail@plt+0x1a24>
   1389c:	push	{r4, r5, r6, r7, fp, lr}
   138a0:	add	fp, sp, #16
   138a4:	ldr	r6, [r0]
   138a8:	mov	r5, #0
   138ac:	cmp	r6, #0
   138b0:	beq	13e54 <__assert_fail@plt+0x2964>
   138b4:	mov	r4, r0
   138b8:	ldr	r1, [r0, #48]	; 0x30
   138bc:	tst	r1, #8192	; 0x2000
   138c0:	bne	13e54 <__assert_fail@plt+0x2964>
   138c4:	ldrh	r0, [r6, #60]	; 0x3c
   138c8:	mov	r2, #3
   138cc:	strh	r2, [r6, #60]	; 0x3c
   138d0:	cmp	r0, #2
   138d4:	beq	138fc <__assert_fail@plt+0x240c>
   138d8:	cmp	r0, #1
   138dc:	bne	13964 <__assert_fail@plt+0x2474>
   138e0:	mov	r0, r4
   138e4:	mov	r1, r6
   138e8:	mov	r2, #0
   138ec:	bl	133c0 <__assert_fail@plt+0x1ed0>
   138f0:	strh	r0, [r6, #56]	; 0x38
   138f4:	mov	r0, r6
   138f8:	pop	{r4, r5, r6, r7, fp, pc}
   138fc:	ldrh	r2, [r6, #56]	; 0x38
   13900:	bic	r2, r2, #1
   13904:	cmp	r2, #12
   13908:	bne	13964 <__assert_fail@plt+0x2474>
   1390c:	mov	r0, r4
   13910:	mov	r1, r6
   13914:	mov	r2, #1
   13918:	bl	133c0 <__assert_fail@plt+0x1ed0>
   1391c:	strh	r0, [r6, #56]	; 0x38
   13920:	cmp	r0, #1
   13924:	bne	13a50 <__assert_fail@plt+0x2560>
   13928:	ldrb	r0, [r4, #48]	; 0x30
   1392c:	tst	r0, #4
   13930:	bne	13a50 <__assert_fail@plt+0x2560>
   13934:	movw	r1, #43436	; 0xa9ac
   13938:	movt	r1, #1
   1393c:	mov	r0, r4
   13940:	bl	13690 <__assert_fail@plt+0x21a0>
   13944:	str	r0, [r6, #36]	; 0x24
   13948:	cmn	r0, #1
   1394c:	ble	13c90 <__assert_fail@plt+0x27a0>
   13950:	ldrh	r0, [r6, #58]	; 0x3a
   13954:	orr	r0, r0, #2
   13958:	strh	r0, [r6, #58]	; 0x3a
   1395c:	mov	r5, r6
   13960:	b	13d74 <__assert_fail@plt+0x2884>
   13964:	ldrh	r2, [r6, #56]	; 0x38
   13968:	cmp	r2, #1
   1396c:	bne	139c0 <__assert_fail@plt+0x24d0>
   13970:	cmp	r0, #4
   13974:	bne	13a58 <__assert_fail@plt+0x2568>
   13978:	ldrb	r0, [r6, #58]	; 0x3a
   1397c:	tst	r0, #2
   13980:	beq	1398c <__assert_fail@plt+0x249c>
   13984:	ldr	r0, [r6, #36]	; 0x24
   13988:	bl	114b4 <close@plt>
   1398c:	ldr	r0, [r4, #4]
   13990:	cmp	r0, #0
   13994:	beq	139a4 <__assert_fail@plt+0x24b4>
   13998:	bl	136c0 <__assert_fail@plt+0x21d0>
   1399c:	mov	r0, #0
   139a0:	str	r0, [r4, #4]
   139a4:	mov	r0, #6
   139a8:	strh	r0, [r6, #56]	; 0x38
   139ac:	mov	r0, r4
   139b0:	mov	r1, r6
   139b4:	bl	13e60 <__assert_fail@plt+0x2970>
   139b8:	mov	r0, r6
   139bc:	pop	{r4, r5, r6, r7, fp, pc}
   139c0:	ldr	r5, [r6, #8]
   139c4:	cmp	r5, #0
   139c8:	beq	13af0 <__assert_fail@plt+0x2600>
   139cc:	str	r5, [r4]
   139d0:	mov	r0, r6
   139d4:	bl	12f14 <__assert_fail@plt+0x1a24>
   139d8:	ldr	r0, [r5, #48]	; 0x30
   139dc:	cmp	r0, #0
   139e0:	beq	13b3c <__assert_fail@plt+0x264c>
   139e4:	ldrh	r0, [r5, #60]	; 0x3c
   139e8:	cmp	r0, #4
   139ec:	mov	r6, r5
   139f0:	beq	139c0 <__assert_fail@plt+0x24d0>
   139f4:	cmp	r0, #2
   139f8:	bne	13d38 <__assert_fail@plt+0x2848>
   139fc:	mov	r0, r4
   13a00:	mov	r1, r5
   13a04:	mov	r2, #1
   13a08:	bl	133c0 <__assert_fail@plt+0x1ed0>
   13a0c:	strh	r0, [r5, #56]	; 0x38
   13a10:	cmp	r0, #1
   13a14:	bne	13d30 <__assert_fail@plt+0x2840>
   13a18:	ldrb	r0, [r4, #48]	; 0x30
   13a1c:	tst	r0, #4
   13a20:	bne	13d30 <__assert_fail@plt+0x2840>
   13a24:	movw	r1, #43436	; 0xa9ac
   13a28:	movt	r1, #1
   13a2c:	mov	r0, r4
   13a30:	bl	13690 <__assert_fail@plt+0x21a0>
   13a34:	str	r0, [r5, #36]	; 0x24
   13a38:	cmn	r0, #1
   13a3c:	ble	13d1c <__assert_fail@plt+0x282c>
   13a40:	ldrh	r0, [r5, #58]	; 0x3a
   13a44:	orr	r0, r0, #2
   13a48:	strh	r0, [r5, #58]	; 0x3a
   13a4c:	b	13d30 <__assert_fail@plt+0x2840>
   13a50:	mov	r5, r6
   13a54:	b	13d74 <__assert_fail@plt+0x2884>
   13a58:	tst	r1, #64	; 0x40
   13a5c:	beq	13a80 <__assert_fail@plt+0x2590>
   13a60:	ldr	r0, [r4, #16]
   13a64:	ldr	r3, [r4, #20]
   13a68:	ldr	r2, [r6, #64]	; 0x40
   13a6c:	ldr	r5, [r6, #68]	; 0x44
   13a70:	eor	r3, r5, r3
   13a74:	eor	r0, r2, r0
   13a78:	orrs	r0, r0, r3
   13a7c:	bne	13978 <__assert_fail@plt+0x2488>
   13a80:	ldr	r0, [r4, #4]
   13a84:	cmp	r0, #0
   13a88:	beq	13b90 <__assert_fail@plt+0x26a0>
   13a8c:	tst	r1, #4096	; 0x1000
   13a90:	bne	13b7c <__assert_fail@plt+0x268c>
   13a94:	ldr	r3, [r6, #24]
   13a98:	mov	r0, r4
   13a9c:	mov	r1, r6
   13aa0:	mvn	r2, #0
   13aa4:	bl	13f3c <__assert_fail@plt+0x2a4c>
   13aa8:	cmp	r0, #0
   13aac:	beq	13ba8 <__assert_fail@plt+0x26b8>
   13ab0:	bl	113a0 <__errno_location@plt>
   13ab4:	ldr	r0, [r0]
   13ab8:	str	r0, [r6, #32]
   13abc:	ldrh	r0, [r6, #58]	; 0x3a
   13ac0:	orr	r0, r0, #1
   13ac4:	strh	r0, [r6, #58]	; 0x3a
   13ac8:	ldr	r0, [r4, #4]
   13acc:	cmp	r0, #0
   13ad0:	beq	13ba8 <__assert_fail@plt+0x26b8>
   13ad4:	ldmib	r0, {r1, r2}
   13ad8:	ldr	r1, [r1, #24]
   13adc:	str	r1, [r0, #24]
   13ae0:	cmp	r2, #0
   13ae4:	mov	r0, r2
   13ae8:	bne	13ad4 <__assert_fail@plt+0x25e4>
   13aec:	b	13ba8 <__assert_fail@plt+0x26b8>
   13af0:	ldr	r0, [r6, #4]
   13af4:	ldr	r1, [r0, #12]
   13af8:	cmp	r1, #0
   13afc:	beq	13bf4 <__assert_fail@plt+0x2704>
   13b00:	str	r0, [r4]
   13b04:	ldr	r1, [r4, #24]
   13b08:	ldr	r0, [r0, #40]	; 0x28
   13b0c:	mov	r5, #0
   13b10:	strb	r5, [r1, r0]
   13b14:	mov	r0, r4
   13b18:	mov	r1, #3
   13b1c:	bl	14124 <__assert_fail@plt+0x2c34>
   13b20:	cmp	r0, #0
   13b24:	beq	13be8 <__assert_fail@plt+0x26f8>
   13b28:	mov	r7, r0
   13b2c:	mov	r0, r6
   13b30:	bl	12f14 <__assert_fail@plt+0x1a24>
   13b34:	mov	r5, r7
   13b38:	b	13d38 <__assert_fail@plt+0x2848>
   13b3c:	mov	r0, r4
   13b40:	bl	14940 <__assert_fail@plt+0x3450>
   13b44:	cmp	r0, #0
   13b48:	beq	13b5c <__assert_fail@plt+0x266c>
   13b4c:	ldr	r0, [r4, #48]	; 0x30
   13b50:	orr	r0, r0, #8192	; 0x2000
   13b54:	str	r0, [r4, #48]	; 0x30
   13b58:	b	13df8 <__assert_fail@plt+0x2908>
   13b5c:	mov	r0, r4
   13b60:	bl	13874 <__assert_fail@plt+0x2384>
   13b64:	mov	r0, r4
   13b68:	mov	r1, r5
   13b6c:	bl	1499c <__assert_fail@plt+0x34ac>
   13b70:	mov	r0, r4
   13b74:	bl	13604 <__assert_fail@plt+0x2114>
   13b78:	b	13d74 <__assert_fail@plt+0x2884>
   13b7c:	bic	r1, r1, #4096	; 0x1000
   13b80:	str	r1, [r4, #48]	; 0x30
   13b84:	bl	136c0 <__assert_fail@plt+0x21d0>
   13b88:	mov	r0, #0
   13b8c:	str	r0, [r4, #4]
   13b90:	mov	r0, r4
   13b94:	mov	r1, #3
   13b98:	bl	14124 <__assert_fail@plt+0x2c34>
   13b9c:	str	r0, [r4, #4]
   13ba0:	cmp	r0, #0
   13ba4:	beq	13bb8 <__assert_fail@plt+0x26c8>
   13ba8:	ldr	r5, [r4, #4]
   13bac:	mov	r0, #0
   13bb0:	str	r0, [r4, #4]
   13bb4:	b	13d38 <__assert_fail@plt+0x2848>
   13bb8:	ldrb	r0, [r4, #49]	; 0x31
   13bbc:	tst	r0, #32
   13bc0:	mov	r5, #0
   13bc4:	bne	13e54 <__assert_fail@plt+0x2964>
   13bc8:	ldr	r0, [r6, #32]
   13bcc:	cmp	r0, #0
   13bd0:	beq	139ac <__assert_fail@plt+0x24bc>
   13bd4:	ldrh	r0, [r6, #56]	; 0x38
   13bd8:	cmp	r0, #4
   13bdc:	beq	139ac <__assert_fail@plt+0x24bc>
   13be0:	mov	r0, #7
   13be4:	b	139a8 <__assert_fail@plt+0x24b8>
   13be8:	ldrb	r0, [r4, #49]	; 0x31
   13bec:	tst	r0, #32
   13bf0:	bne	13e54 <__assert_fail@plt+0x2964>
   13bf4:	ldr	r5, [r6, #4]
   13bf8:	str	r5, [r4]
   13bfc:	mov	r0, r6
   13c00:	bl	12f14 <__assert_fail@plt+0x1a24>
   13c04:	ldr	r0, [r5, #48]	; 0x30
   13c08:	cmn	r0, #1
   13c0c:	beq	13c70 <__assert_fail@plt+0x2780>
   13c10:	ldrh	r0, [r5, #56]	; 0x38
   13c14:	cmp	r0, #11
   13c18:	beq	13e5c <__assert_fail@plt+0x296c>
   13c1c:	ldr	r0, [r5, #40]	; 0x28
   13c20:	ldr	r1, [r4, #24]
   13c24:	mov	r2, #0
   13c28:	strb	r2, [r1, r0]
   13c2c:	ldr	r0, [r5, #48]	; 0x30
   13c30:	cmp	r0, #0
   13c34:	beq	13cac <__assert_fail@plt+0x27bc>
   13c38:	ldrh	r0, [r5, #58]	; 0x3a
   13c3c:	tst	r0, #2
   13c40:	bne	13cd8 <__assert_fail@plt+0x27e8>
   13c44:	tst	r0, #1
   13c48:	bne	13e18 <__assert_fail@plt+0x2928>
   13c4c:	ldr	r1, [r5, #4]
   13c50:	movw	r3, #43435	; 0xa9ab
   13c54:	movt	r3, #1
   13c58:	mov	r0, r4
   13c5c:	mvn	r2, #0
   13c60:	bl	13f3c <__assert_fail@plt+0x2a4c>
   13c64:	cmp	r0, #0
   13c68:	bne	13cbc <__assert_fail@plt+0x27cc>
   13c6c:	b	13e18 <__assert_fail@plt+0x2928>
   13c70:	mov	r0, r5
   13c74:	bl	12f14 <__assert_fail@plt+0x1a24>
   13c78:	bl	113a0 <__errno_location@plt>
   13c7c:	mov	r5, #0
   13c80:	str	r5, [r0]
   13c84:	str	r5, [r4]
   13c88:	mov	r0, r5
   13c8c:	pop	{r4, r5, r6, r7, fp, pc}
   13c90:	bl	113a0 <__errno_location@plt>
   13c94:	ldr	r0, [r0]
   13c98:	mov	r1, #7
   13c9c:	strh	r1, [r6, #56]	; 0x38
   13ca0:	str	r0, [r6, #32]
   13ca4:	mov	r5, r6
   13ca8:	b	13d74 <__assert_fail@plt+0x2884>
   13cac:	mov	r0, r4
   13cb0:	bl	14940 <__assert_fail@plt+0x3450>
   13cb4:	cmp	r0, #0
   13cb8:	beq	13e18 <__assert_fail@plt+0x2928>
   13cbc:	bl	113a0 <__errno_location@plt>
   13cc0:	ldr	r0, [r0]
   13cc4:	str	r0, [r5, #32]
   13cc8:	ldr	r0, [r4, #48]	; 0x30
   13ccc:	orr	r0, r0, #8192	; 0x2000
   13cd0:	str	r0, [r4, #48]	; 0x30
   13cd4:	b	13e18 <__assert_fail@plt+0x2928>
   13cd8:	ldr	r0, [r4, #48]	; 0x30
   13cdc:	tst	r0, #4
   13ce0:	bne	13e10 <__assert_fail@plt+0x2920>
   13ce4:	ldr	r1, [r5, #36]	; 0x24
   13ce8:	tst	r0, #512	; 0x200
   13cec:	bne	13e04 <__assert_fail@plt+0x2914>
   13cf0:	mov	r0, r1
   13cf4:	bl	11460 <fchdir@plt>
   13cf8:	cmp	r0, #0
   13cfc:	beq	13e10 <__assert_fail@plt+0x2920>
   13d00:	bl	113a0 <__errno_location@plt>
   13d04:	ldr	r0, [r0]
   13d08:	str	r0, [r5, #32]
   13d0c:	ldr	r0, [r4, #48]	; 0x30
   13d10:	orr	r0, r0, #8192	; 0x2000
   13d14:	str	r0, [r4, #48]	; 0x30
   13d18:	b	13e10 <__assert_fail@plt+0x2920>
   13d1c:	bl	113a0 <__errno_location@plt>
   13d20:	ldr	r0, [r0]
   13d24:	mov	r1, #7
   13d28:	strh	r1, [r5, #56]	; 0x38
   13d2c:	str	r0, [r5, #32]
   13d30:	mov	r0, #3
   13d34:	strh	r0, [r5, #60]	; 0x3c
   13d38:	ldr	r0, [r5, #4]
   13d3c:	ldr	r1, [r0, #28]
   13d40:	ldr	r0, [r0, #40]	; 0x28
   13d44:	sub	r2, r0, #1
   13d48:	ldrb	r1, [r1, r2]
   13d4c:	cmp	r1, #47	; 0x2f
   13d50:	moveq	r0, r2
   13d54:	ldr	r1, [r4, #24]
   13d58:	mov	r2, #47	; 0x2f
   13d5c:	strb	r2, [r1, r0]!
   13d60:	add	r0, r1, #1
   13d64:	add	r1, r5, #168	; 0xa8
   13d68:	ldr	r2, [r5, #52]	; 0x34
   13d6c:	add	r2, r2, #1
   13d70:	bl	11220 <memmove@plt>
   13d74:	str	r5, [r4]
   13d78:	ldrh	r0, [r5, #56]	; 0x38
   13d7c:	cmp	r0, #11
   13d80:	bne	13db8 <__assert_fail@plt+0x28c8>
   13d84:	add	r0, r5, #112	; 0x70
   13d88:	ldrd	r0, [r0]
   13d8c:	eor	r2, r0, #1
   13d90:	orrs	r2, r2, r1
   13d94:	beq	13e54 <__assert_fail@plt+0x2964>
   13d98:	eor	r0, r0, #2
   13d9c:	orrs	r0, r0, r1
   13da0:	bne	13e5c <__assert_fail@plt+0x296c>
   13da4:	mov	r0, r4
   13da8:	mov	r1, r5
   13dac:	mov	r2, #0
   13db0:	bl	133c0 <__assert_fail@plt+0x1ed0>
   13db4:	strh	r0, [r5, #56]	; 0x38
   13db8:	cmp	r0, #1
   13dbc:	bne	13e54 <__assert_fail@plt+0x2964>
   13dc0:	ldr	r0, [r5, #48]	; 0x30
   13dc4:	cmp	r0, #0
   13dc8:	bne	13dd8 <__assert_fail@plt+0x28e8>
   13dcc:	add	r0, r5, #64	; 0x40
   13dd0:	ldrd	r0, [r0]
   13dd4:	strd	r0, [r4, #16]
   13dd8:	mov	r0, r4
   13ddc:	mov	r1, r5
   13de0:	bl	14a24 <__assert_fail@plt+0x3534>
   13de4:	cmp	r0, #0
   13de8:	bne	13e54 <__assert_fail@plt+0x2964>
   13dec:	bl	113a0 <__errno_location@plt>
   13df0:	mov	r1, #12
   13df4:	str	r1, [r0]
   13df8:	mov	r5, #0
   13dfc:	mov	r0, r5
   13e00:	pop	{r4, r5, r6, r7, fp, pc}
   13e04:	mov	r0, r4
   13e08:	mov	r2, #1
   13e0c:	bl	14ae4 <__assert_fail@plt+0x35f4>
   13e10:	ldr	r0, [r5, #36]	; 0x24
   13e14:	bl	114b4 <close@plt>
   13e18:	ldrh	r0, [r5, #56]	; 0x38
   13e1c:	cmp	r0, #2
   13e20:	beq	13e48 <__assert_fail@plt+0x2958>
   13e24:	ldr	r0, [r5, #32]
   13e28:	mov	r1, #7
   13e2c:	cmp	r0, #0
   13e30:	movweq	r1, #6
   13e34:	strh	r1, [r5, #56]	; 0x38
   13e38:	bne	13e48 <__assert_fail@plt+0x2958>
   13e3c:	mov	r0, r4
   13e40:	mov	r1, r5
   13e44:	bl	13e60 <__assert_fail@plt+0x2970>
   13e48:	ldrb	r0, [r4, #49]	; 0x31
   13e4c:	tst	r0, #32
   13e50:	movne	r5, #0
   13e54:	mov	r0, r5
   13e58:	pop	{r4, r5, r6, r7, fp, pc}
   13e5c:	bl	114a8 <abort@plt>
   13e60:	push	{r4, r5, r7, sl, fp, lr}
   13e64:	add	fp, sp, #16
   13e68:	sub	sp, sp, #24
   13e6c:	add	lr, r1, #64	; 0x40
   13e70:	add	r4, r1, #160	; 0xa0
   13e74:	ldrh	r2, [r0, #48]	; 0x30
   13e78:	movw	r3, #258	; 0x102
   13e7c:	tst	r2, r3
   13e80:	beq	13eb8 <__assert_fail@plt+0x29c8>
   13e84:	ldrd	r2, [lr]
   13e88:	stm	sp, {r2, r3}
   13e8c:	ldrd	r2, [r4]
   13e90:	str	r3, [sp, #12]
   13e94:	str	r2, [sp, #8]
   13e98:	ldr	r0, [r0, #56]	; 0x38
   13e9c:	mov	r1, sp
   13ea0:	bl	15dc0 <__assert_fail@plt+0x48d0>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13f38 <__assert_fail@plt+0x2a48>
   13eac:	bl	12f14 <__assert_fail@plt+0x1a24>
   13eb0:	sub	sp, fp, #16
   13eb4:	pop	{r4, r5, r7, sl, fp, pc}
   13eb8:	ldr	r1, [r1, #4]
   13ebc:	cmp	r1, #0
   13ec0:	beq	13f30 <__assert_fail@plt+0x2a40>
   13ec4:	ldr	r2, [r1, #48]	; 0x30
   13ec8:	cmp	r2, #0
   13ecc:	bmi	13f30 <__assert_fail@plt+0x2a40>
   13ed0:	ldr	ip, [r0, #56]	; 0x38
   13ed4:	ldrd	r2, [ip, #16]
   13ed8:	orrs	r2, r2, r3
   13edc:	beq	13f38 <__assert_fail@plt+0x2a48>
   13ee0:	ldrd	r2, [r4]
   13ee4:	ldrd	r4, [ip]
   13ee8:	eor	r3, r5, r3
   13eec:	eor	r2, r4, r2
   13ef0:	orrs	r2, r2, r3
   13ef4:	bne	13f30 <__assert_fail@plt+0x2a40>
   13ef8:	add	r3, ip, #8
   13efc:	ldm	lr, {r2, r5}
   13f00:	ldm	r3, {r4, r7}
   13f04:	eor	r7, r7, r5
   13f08:	eor	r2, r4, r2
   13f0c:	orrs	r2, r2, r7
   13f10:	bne	13f30 <__assert_fail@plt+0x2a40>
   13f14:	add	r2, r1, #64	; 0x40
   13f18:	add	r1, r1, #160	; 0xa0
   13f1c:	ldm	r2, {r2, r5}
   13f20:	stm	r3, {r2, r5}
   13f24:	ldr	r0, [r0, #56]	; 0x38
   13f28:	ldrd	r2, [r1]
   13f2c:	strd	r2, [r0]
   13f30:	sub	sp, fp, #16
   13f34:	pop	{r4, r5, r7, sl, fp, pc}
   13f38:	bl	114a8 <abort@plt>
   13f3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f40:	add	fp, sp, #24
   13f44:	sub	sp, sp, #104	; 0x68
   13f48:	mov	r7, r3
   13f4c:	mov	r4, r2
   13f50:	mov	r8, r1
   13f54:	mov	r5, r0
   13f58:	cmp	r3, #0
   13f5c:	beq	13f80 <__assert_fail@plt+0x2a90>
   13f60:	movw	r1, #43435	; 0xa9ab
   13f64:	movt	r1, #1
   13f68:	mov	r0, r7
   13f6c:	bl	111fc <strcmp@plt>
   13f70:	mov	r6, r0
   13f74:	cmp	r0, #0
   13f78:	movwne	r6, #1
   13f7c:	b	13f84 <__assert_fail@plt+0x2a94>
   13f80:	mov	r6, #1
   13f84:	ldr	r0, [r5, #48]	; 0x30
   13f88:	tst	r0, #4
   13f8c:	bne	13fe4 <__assert_fail@plt+0x2af4>
   13f90:	mov	r9, #0
   13f94:	cmn	r4, #1
   13f98:	mov	r1, #0
   13f9c:	movwgt	r1, #1
   13fa0:	orrs	r1, r1, r6
   13fa4:	bne	14004 <__assert_fail@plt+0x2b14>
   13fa8:	ands	r0, r0, #512	; 0x200
   13fac:	beq	14004 <__assert_fail@plt+0x2b14>
   13fb0:	add	r4, r5, #60	; 0x3c
   13fb4:	mov	r0, r4
   13fb8:	bl	15fb8 <__assert_fail@plt+0x4ac8>
   13fbc:	cmp	r0, #0
   13fc0:	bne	1400c <__assert_fail@plt+0x2b1c>
   13fc4:	mov	r0, r4
   13fc8:	bl	16004 <__assert_fail@plt+0x4b14>
   13fcc:	cmn	r0, #1
   13fd0:	ble	1400c <__assert_fail@plt+0x2b1c>
   13fd4:	mov	r4, r0
   13fd8:	mov	r9, #0
   13fdc:	mov	r7, #0
   13fe0:	b	14028 <__assert_fail@plt+0x2b38>
   13fe4:	mov	r5, #0
   13fe8:	cmp	r4, #0
   13fec:	bmi	14118 <__assert_fail@plt+0x2c28>
   13ff0:	ands	r0, r0, #512	; 0x200
   13ff4:	beq	14118 <__assert_fail@plt+0x2c28>
   13ff8:	mov	r0, r4
   13ffc:	bl	114b4 <close@plt>
   14000:	b	14118 <__assert_fail@plt+0x2c28>
   14004:	cmn	r4, #1
   14008:	bgt	14028 <__assert_fail@plt+0x2b38>
   1400c:	mov	r0, r5
   14010:	mov	r1, r7
   14014:	bl	13690 <__assert_fail@plt+0x21a0>
   14018:	cmp	r0, #0
   1401c:	bmi	140c8 <__assert_fail@plt+0x2bd8>
   14020:	mov	r4, r0
   14024:	mov	r9, #1
   14028:	ldrb	r0, [r5, #48]	; 0x30
   1402c:	tst	r0, #2
   14030:	bne	14054 <__assert_fail@plt+0x2b64>
   14034:	cmp	r7, #0
   14038:	beq	140a4 <__assert_fail@plt+0x2bb4>
   1403c:	movw	r1, #43435	; 0xa9ab
   14040:	movt	r1, #1
   14044:	mov	r0, r7
   14048:	bl	111fc <strcmp@plt>
   1404c:	cmp	r0, #0
   14050:	bne	140a4 <__assert_fail@plt+0x2bb4>
   14054:	mov	r1, sp
   14058:	mov	r0, r4
   1405c:	bl	19b2c <__assert_fail@plt+0x863c>
   14060:	cmp	r0, #0
   14064:	bne	140f4 <__assert_fail@plt+0x2c04>
   14068:	add	r0, r8, #64	; 0x40
   1406c:	ldrd	r0, [r0]
   14070:	ldm	sp, {r2, r3}
   14074:	eor	r1, r1, r3
   14078:	eor	r0, r0, r2
   1407c:	orrs	r0, r0, r1
   14080:	bne	140e8 <__assert_fail@plt+0x2bf8>
   14084:	add	r0, r8, #160	; 0xa0
   14088:	ldrd	r0, [r0]
   1408c:	ldr	r2, [sp, #96]	; 0x60
   14090:	ldr	r3, [sp, #100]	; 0x64
   14094:	eor	r1, r1, r3
   14098:	eor	r0, r0, r2
   1409c:	orrs	r0, r0, r1
   140a0:	bne	140e8 <__assert_fail@plt+0x2bf8>
   140a4:	ldrb	r0, [r5, #49]	; 0x31
   140a8:	tst	r0, #2
   140ac:	bne	140d0 <__assert_fail@plt+0x2be0>
   140b0:	mov	r0, r4
   140b4:	bl	11460 <fchdir@plt>
   140b8:	mov	r5, r0
   140bc:	cmp	r9, #0
   140c0:	bne	14100 <__assert_fail@plt+0x2c10>
   140c4:	b	14118 <__assert_fail@plt+0x2c28>
   140c8:	mvn	r5, #0
   140cc:	b	14118 <__assert_fail@plt+0x2c28>
   140d0:	mov	r0, r5
   140d4:	mov	r1, r4
   140d8:	mov	r2, r6
   140dc:	bl	14ae4 <__assert_fail@plt+0x35f4>
   140e0:	mov	r5, #0
   140e4:	b	14118 <__assert_fail@plt+0x2c28>
   140e8:	bl	113a0 <__errno_location@plt>
   140ec:	mov	r1, #2
   140f0:	str	r1, [r0]
   140f4:	mvn	r5, #0
   140f8:	cmp	r9, #0
   140fc:	beq	14118 <__assert_fail@plt+0x2c28>
   14100:	bl	113a0 <__errno_location@plt>
   14104:	mov	r6, r0
   14108:	ldr	r7, [r0]
   1410c:	mov	r0, r4
   14110:	bl	114b4 <close@plt>
   14114:	str	r7, [r6]
   14118:	mov	r0, r5
   1411c:	sub	sp, fp, #24
   14120:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14128:	add	fp, sp, #28
   1412c:	sub	sp, sp, #68	; 0x44
   14130:	mov	r4, r1
   14134:	mov	r6, r0
   14138:	ldr	sl, [r0]
   1413c:	ldr	r7, [sl, #12]
   14140:	cmp	r7, #0
   14144:	beq	144a0 <__assert_fail@plt+0x2fb0>
   14148:	mov	r0, r7
   1414c:	bl	11454 <dirfd@plt>
   14150:	str	r0, [fp, #-32]	; 0xffffffe0
   14154:	cmn	r0, #1
   14158:	ble	144d4 <__assert_fail@plt+0x2fe4>
   1415c:	mov	r1, r6
   14160:	ldr	r0, [r1, #44]!	; 0x2c
   14164:	str	r1, [fp, #-40]	; 0xffffffd8
   14168:	mvn	r1, #0
   1416c:	cmp	r0, #0
   14170:	movweq	r1, #34464	; 0x86a0
   14174:	movteq	r1, #1
   14178:	str	r1, [sp, #28]
   1417c:	mov	r0, #1
   14180:	str	r0, [sp, #4]
   14184:	str	r4, [sp, #8]
   14188:	ldr	r1, [sl, #28]
   1418c:	ldr	r0, [sl, #40]	; 0x28
   14190:	sub	r2, r0, #1
   14194:	ldrb	r1, [r1, r2]
   14198:	cmp	r1, #47	; 0x2f
   1419c:	moveq	r0, r2
   141a0:	ldrb	r1, [r6, #48]	; 0x30
   141a4:	mov	r9, #0
   141a8:	tst	r1, #4
   141ac:	mov	r1, #0
   141b0:	str	r1, [sp, #44]	; 0x2c
   141b4:	beq	141cc <__assert_fail@plt+0x2cdc>
   141b8:	ldr	r1, [r6, #24]
   141bc:	mov	r2, #47	; 0x2f
   141c0:	strb	r2, [r1, r0]!
   141c4:	add	r1, r1, #1
   141c8:	str	r1, [sp, #44]	; 0x2c
   141cc:	add	r1, r0, #1
   141d0:	ldr	r4, [sl, #12]
   141d4:	cmp	r4, #0
   141d8:	str	r1, [fp, #-36]	; 0xffffffdc
   141dc:	str	r7, [sp, #12]
   141e0:	beq	144f0 <__assert_fail@plt+0x3000>
   141e4:	ldr	r0, [sl, #48]	; 0x30
   141e8:	add	r0, r0, #1
   141ec:	str	r0, [sp, #24]
   141f0:	str	r6, [sp, #36]	; 0x24
   141f4:	ldr	r0, [r6, #36]	; 0x24
   141f8:	sub	r0, r0, r1
   141fc:	str	r0, [sp, #48]	; 0x30
   14200:	mov	r6, #0
   14204:	bl	113a0 <__errno_location@plt>
   14208:	str	r0, [sp, #40]	; 0x28
   1420c:	mov	r9, #0
   14210:	mov	r7, #0
   14214:	mov	r0, #0
   14218:	str	r0, [fp, #-44]	; 0xffffffd4
   1421c:	mov	r0, #0
   14220:	str	r0, [sp, #20]
   14224:	mov	r0, #0
   14228:	str	r0, [sp, #16]
   1422c:	str	sl, [sp, #32]
   14230:	ldr	r0, [sp, #40]	; 0x28
   14234:	str	r6, [r0]
   14238:	mov	r0, r4
   1423c:	bl	1143c <readdir64@plt>
   14240:	cmp	r0, #0
   14244:	beq	14720 <__assert_fail@plt+0x3230>
   14248:	mov	r8, r0
   1424c:	mov	r5, r9
   14250:	ldr	r6, [sp, #36]	; 0x24
   14254:	ldrb	r0, [r6, #48]	; 0x30
   14258:	tst	r0, #32
   1425c:	bne	1428c <__assert_fail@plt+0x2d9c>
   14260:	ldrb	r0, [r8, #19]
   14264:	cmp	r0, #46	; 0x2e
   14268:	bne	1428c <__assert_fail@plt+0x2d9c>
   1426c:	ldrb	r0, [r8, #20]
   14270:	cmp	r0, #0
   14274:	beq	14490 <__assert_fail@plt+0x2fa0>
   14278:	cmp	r0, #46	; 0x2e
   1427c:	bne	1428c <__assert_fail@plt+0x2d9c>
   14280:	ldrb	r0, [r8, #21]
   14284:	cmp	r0, #0
   14288:	beq	14490 <__assert_fail@plt+0x2fa0>
   1428c:	add	r4, r8, #19
   14290:	mov	r0, r4
   14294:	bl	11370 <strlen@plt>
   14298:	mov	sl, r0
   1429c:	mov	r0, r6
   142a0:	mov	r1, r4
   142a4:	mov	r2, sl
   142a8:	bl	1330c <__assert_fail@plt+0x1e1c>
   142ac:	mov	r9, r0
   142b0:	cmp	r0, #0
   142b4:	beq	14504 <__assert_fail@plt+0x3014>
   142b8:	ldr	r0, [sp, #48]	; 0x30
   142bc:	cmp	sl, r0
   142c0:	bcs	142d4 <__assert_fail@plt+0x2de4>
   142c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   142c8:	adds	r0, sl, r2
   142cc:	bcc	1433c <__assert_fail@plt+0x2e4c>
   142d0:	b	1477c <__assert_fail@plt+0x328c>
   142d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   142d8:	add	r0, sl, r0
   142dc:	add	r1, r0, #1
   142e0:	ldr	r4, [r6, #24]
   142e4:	mov	r0, r6
   142e8:	bl	13290 <__assert_fail@plt+0x1da0>
   142ec:	cmp	r0, #0
   142f0:	beq	14504 <__assert_fail@plt+0x3014>
   142f4:	ldr	r0, [r6, #24]
   142f8:	cmp	r4, r0
   142fc:	beq	14324 <__assert_fail@plt+0x2e34>
   14300:	ldrb	r1, [r6, #48]	; 0x30
   14304:	tst	r1, #4
   14308:	ldr	r1, [sp, #44]	; 0x2c
   1430c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14310:	addne	r1, r0, r2
   14314:	str	r1, [sp, #44]	; 0x2c
   14318:	mov	r0, #1
   1431c:	str	r0, [sp, #16]
   14320:	b	14328 <__assert_fail@plt+0x2e38>
   14324:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14328:	ldr	r0, [r6, #36]	; 0x24
   1432c:	sub	r0, r0, r2
   14330:	str	r0, [sp, #48]	; 0x30
   14334:	adds	r0, sl, r2
   14338:	bcs	1477c <__assert_fail@plt+0x328c>
   1433c:	ldr	r1, [sp, #24]
   14340:	str	r1, [r9, #48]	; 0x30
   14344:	ldr	r1, [r6]
   14348:	str	r0, [r9, #40]	; 0x28
   1434c:	str	r1, [r9, #4]
   14350:	ldrd	r0, [r8]
   14354:	strd	r0, [r9, #160]	; 0xa0
   14358:	ldrb	r0, [r6, #48]	; 0x30
   1435c:	tst	r0, #4
   14360:	bne	14370 <__assert_fail@plt+0x2e80>
   14364:	add	r0, r9, #168	; 0xa8
   14368:	str	r0, [r9, #24]
   1436c:	b	1438c <__assert_fail@plt+0x2e9c>
   14370:	ldr	r0, [r9, #28]
   14374:	ldr	r2, [r9, #52]	; 0x34
   14378:	str	r0, [r9, #24]
   1437c:	add	r1, r9, #168	; 0xa8
   14380:	add	r2, r2, #1
   14384:	ldr	r0, [sp, #44]	; 0x2c
   14388:	bl	11220 <memmove@plt>
   1438c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14390:	ldr	r0, [r0]
   14394:	cmp	r0, #0
   14398:	beq	143c4 <__assert_fail@plt+0x2ed4>
   1439c:	ldrb	r0, [r6, #49]	; 0x31
   143a0:	tst	r0, #4
   143a4:	bne	143c4 <__assert_fail@plt+0x2ed4>
   143a8:	mov	r0, r6
   143ac:	mov	r1, r9
   143b0:	mov	r2, #0
   143b4:	bl	133c0 <__assert_fail@plt+0x1ed0>
   143b8:	strh	r0, [r9, #56]	; 0x38
   143bc:	ldr	sl, [sp, #32]
   143c0:	b	14420 <__assert_fail@plt+0x2f30>
   143c4:	add	r0, r9, #64	; 0x40
   143c8:	ldr	r1, [r6, #48]	; 0x30
   143cc:	mov	r4, #0
   143d0:	tst	r1, #8
   143d4:	bne	143e0 <__assert_fail@plt+0x2ef0>
   143d8:	ldr	sl, [sp, #32]
   143dc:	b	14404 <__assert_fail@plt+0x2f14>
   143e0:	ldrb	r2, [r8, #18]
   143e4:	orr	r3, r2, #4
   143e8:	cmp	r3, #4
   143ec:	ldr	sl, [sp, #32]
   143f0:	beq	14404 <__assert_fail@plt+0x2f14>
   143f4:	eor	r2, r2, #10
   143f8:	and	r1, r1, #16
   143fc:	orrs	r4, r1, r2
   14400:	movwne	r4, #1
   14404:	mov	r1, #11
   14408:	strh	r1, [r9, #56]	; 0x38
   1440c:	ldrb	r1, [r8, #18]
   14410:	bl	14db4 <__assert_fail@plt+0x38c4>
   14414:	eor	r1, r4, #1
   14418:	mov	r0, r9
   1441c:	bl	13390 <__assert_fail@plt+0x1ea0>
   14420:	mov	r6, #0
   14424:	str	r6, [r9, #8]
   14428:	cmp	r5, #0
   1442c:	mov	r4, r9
   14430:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   14434:	strne	r9, [r0, #8]
   14438:	movne	r4, r5
   1443c:	movw	r0, #10000	; 0x2710
   14440:	cmp	r7, r0
   14444:	bne	14468 <__assert_fail@plt+0x2f78>
   14448:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1444c:	ldr	r0, [r0]
   14450:	cmp	r0, #0
   14454:	bne	14468 <__assert_fail@plt+0x2f78>
   14458:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1445c:	mov	r0, sl
   14460:	bl	14dd8 <__assert_fail@plt+0x38e8>
   14464:	str	r0, [sp, #20]
   14468:	add	r7, r7, #1
   1446c:	ldr	r0, [sp, #28]
   14470:	cmp	r0, r7
   14474:	bls	147c4 <__assert_fail@plt+0x32d4>
   14478:	str	r9, [fp, #-44]	; 0xffffffd4
   1447c:	mov	r9, r4
   14480:	ldr	r4, [sl, #12]
   14484:	cmp	r4, #0
   14488:	bne	14230 <__assert_fail@plt+0x2d40>
   1448c:	b	14770 <__assert_fail@plt+0x3280>
   14490:	ldr	sl, [sp, #32]
   14494:	mov	r9, r5
   14498:	mov	r6, #0
   1449c:	b	14480 <__assert_fail@plt+0x2f90>
   144a0:	ldr	r3, [r6, #48]	; 0x30
   144a4:	and	r1, r3, #516	; 0x204
   144a8:	mvn	r0, #99	; 0x63
   144ac:	cmp	r1, #512	; 0x200
   144b0:	ldreq	r0, [r6, #32]
   144b4:	ldr	r1, [sl, #24]
   144b8:	mov	r2, #0
   144bc:	tst	r3, #16
   144c0:	beq	14558 <__assert_fail@plt+0x3068>
   144c4:	tst	r3, #1
   144c8:	bne	1454c <__assert_fail@plt+0x305c>
   144cc:	mov	r2, #32768	; 0x8000
   144d0:	b	14558 <__assert_fail@plt+0x3068>
   144d4:	ldr	r0, [sl, #12]
   144d8:	bl	114cc <closedir@plt>
   144dc:	mov	r9, #0
   144e0:	str	r9, [sl, #12]
   144e4:	cmp	r4, #3
   144e8:	beq	1459c <__assert_fail@plt+0x30ac>
   144ec:	b	14934 <__assert_fail@plt+0x3444>
   144f0:	mov	r7, #0
   144f4:	mov	r0, #0
   144f8:	str	r0, [sp, #20]
   144fc:	ldr	r4, [sp, #8]
   14500:	b	147e4 <__assert_fail@plt+0x32f4>
   14504:	ldr	r7, [sp, #40]	; 0x28
   14508:	ldr	r4, [r7]
   1450c:	mov	r0, r9
   14510:	bl	12f14 <__assert_fail@plt+0x1a24>
   14514:	mov	r0, r5
   14518:	bl	136c0 <__assert_fail@plt+0x21d0>
   1451c:	ldr	r5, [sp, #32]
   14520:	ldr	r0, [r5, #12]
   14524:	bl	114cc <closedir@plt>
   14528:	mov	r0, #7
   1452c:	strh	r0, [r5, #56]	; 0x38
   14530:	mov	r9, #0
   14534:	str	r9, [r5, #12]
   14538:	ldr	r0, [r6, #48]	; 0x30
   1453c:	orr	r0, r0, #8192	; 0x2000
   14540:	str	r0, [r6, #48]	; 0x30
   14544:	str	r4, [r7]
   14548:	b	14934 <__assert_fail@plt+0x3444>
   1454c:	ldr	r3, [sl, #48]	; 0x30
   14550:	cmp	r3, #0
   14554:	movne	r2, #32768	; 0x8000
   14558:	sub	r3, fp, #32
   1455c:	bl	160e8 <__assert_fail@plt+0x4bf8>
   14560:	str	r0, [sl, #12]
   14564:	cmp	r0, #0
   14568:	beq	14590 <__assert_fail@plt+0x30a0>
   1456c:	ldrh	r0, [sl, #56]	; 0x38
   14570:	cmp	r0, #11
   14574:	bne	145b4 <__assert_fail@plt+0x30c4>
   14578:	mov	r0, r6
   1457c:	mov	r1, sl
   14580:	mov	r2, #0
   14584:	bl	133c0 <__assert_fail@plt+0x1ed0>
   14588:	strh	r0, [sl, #56]	; 0x38
   1458c:	b	145f4 <__assert_fail@plt+0x3104>
   14590:	mov	r9, #0
   14594:	cmp	r4, #3
   14598:	bne	14934 <__assert_fail@plt+0x3444>
   1459c:	mov	r0, #4
   145a0:	strh	r0, [sl, #56]	; 0x38
   145a4:	bl	113a0 <__errno_location@plt>
   145a8:	ldr	r0, [r0]
   145ac:	str	r0, [sl, #32]
   145b0:	b	14934 <__assert_fail@plt+0x3444>
   145b4:	ldrb	r0, [r6, #49]	; 0x31
   145b8:	tst	r0, #1
   145bc:	beq	145f4 <__assert_fail@plt+0x3104>
   145c0:	mov	r0, r6
   145c4:	mov	r1, sl
   145c8:	bl	13e60 <__assert_fail@plt+0x2970>
   145cc:	mov	r9, #0
   145d0:	mov	r0, r6
   145d4:	mov	r1, sl
   145d8:	mov	r2, #0
   145dc:	bl	133c0 <__assert_fail@plt+0x1ed0>
   145e0:	mov	r0, r6
   145e4:	mov	r1, sl
   145e8:	bl	14a24 <__assert_fail@plt+0x3534>
   145ec:	cmp	r0, #0
   145f0:	beq	148f4 <__assert_fail@plt+0x3404>
   145f4:	mov	r1, r6
   145f8:	ldr	r0, [r1, #44]!	; 0x2c
   145fc:	str	r1, [fp, #-40]	; 0xffffffd8
   14600:	mvn	r1, #0
   14604:	cmp	r0, #0
   14608:	movweq	r1, #34464	; 0x86a0
   1460c:	movteq	r1, #1
   14610:	str	r1, [sp, #28]
   14614:	mov	r5, #0
   14618:	cmp	r4, #2
   1461c:	beq	14658 <__assert_fail@plt+0x3168>
   14620:	ldr	r0, [r6, #48]	; 0x30
   14624:	and	r1, r0, #56	; 0x38
   14628:	mov	r0, #0
   1462c:	cmp	r1, #24
   14630:	bne	14654 <__assert_fail@plt+0x3164>
   14634:	ldr	r1, [sl, #84]	; 0x54
   14638:	cmp	r1, #2
   1463c:	bne	14654 <__assert_fail@plt+0x3164>
   14640:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14644:	mov	r0, sl
   14648:	bl	14d4c <__assert_fail@plt+0x385c>
   1464c:	cmp	r0, #0
   14650:	movwne	r0, #1
   14654:	eor	r5, r0, #1
   14658:	cmp	r4, #3
   1465c:	beq	14670 <__assert_fail@plt+0x3180>
   14660:	cmp	r5, #0
   14664:	bne	14670 <__assert_fail@plt+0x3180>
   14668:	str	r5, [sp, #4]
   1466c:	b	14184 <__assert_fail@plt+0x2c94>
   14670:	ldrb	r0, [r6, #49]	; 0x31
   14674:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14678:	tst	r0, #2
   1467c:	beq	14698 <__assert_fail@plt+0x31a8>
   14680:	mov	r0, r2
   14684:	movw	r1, #1030	; 0x406
   14688:	mov	r2, #3
   1468c:	bl	193b8 <__assert_fail@plt+0x7ec8>
   14690:	mov	r2, r0
   14694:	str	r0, [fp, #-32]	; 0xffffffe0
   14698:	cmp	r2, #0
   1469c:	bmi	146b8 <__assert_fail@plt+0x31c8>
   146a0:	mov	r0, r6
   146a4:	mov	r1, sl
   146a8:	mov	r3, #0
   146ac:	bl	13f3c <__assert_fail@plt+0x2a4c>
   146b0:	cmp	r0, #0
   146b4:	beq	1417c <__assert_fail@plt+0x2c8c>
   146b8:	subs	r0, r4, #3
   146bc:	movwne	r0, #1
   146c0:	eor	r1, r5, #1
   146c4:	orrs	r0, r0, r1
   146c8:	bne	146d8 <__assert_fail@plt+0x31e8>
   146cc:	bl	113a0 <__errno_location@plt>
   146d0:	ldr	r0, [r0]
   146d4:	str	r0, [sl, #32]
   146d8:	ldrh	r0, [sl, #58]	; 0x3a
   146dc:	orr	r0, r0, #1
   146e0:	strh	r0, [sl, #58]	; 0x3a
   146e4:	ldr	r0, [sl, #12]
   146e8:	bl	114cc <closedir@plt>
   146ec:	mov	r5, #0
   146f0:	str	r5, [sl, #12]
   146f4:	ldrb	r0, [r6, #49]	; 0x31
   146f8:	tst	r0, #2
   146fc:	beq	14710 <__assert_fail@plt+0x3220>
   14700:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14704:	cmp	r0, #0
   14708:	bmi	14710 <__assert_fail@plt+0x3220>
   1470c:	bl	114b4 <close@plt>
   14710:	mov	r0, #0
   14714:	str	r0, [sp, #4]
   14718:	str	r5, [sl, #12]
   1471c:	b	14184 <__assert_fail@plt+0x2c94>
   14720:	ldr	r0, [sp, #40]	; 0x28
   14724:	ldr	r0, [r0]
   14728:	cmp	r0, #0
   1472c:	beq	14748 <__assert_fail@plt+0x3258>
   14730:	str	r0, [sl, #32]
   14734:	ldr	r0, [sp, #12]
   14738:	orrs	r0, r0, r7
   1473c:	mov	r0, #4
   14740:	movwne	r0, #7
   14744:	strh	r0, [sl, #56]	; 0x38
   14748:	ldr	r0, [sl, #12]
   1474c:	cmp	r0, #0
   14750:	ldr	r4, [sp, #8]
   14754:	beq	14764 <__assert_fail@plt+0x3274>
   14758:	bl	114cc <closedir@plt>
   1475c:	mov	r0, #0
   14760:	str	r0, [sl, #12]
   14764:	ldr	r0, [sp, #16]
   14768:	tst	r0, #1
   1476c:	b	147d4 <__assert_fail@plt+0x32e4>
   14770:	ldr	r0, [sp, #16]
   14774:	tst	r0, #1
   14778:	b	147d0 <__assert_fail@plt+0x32e0>
   1477c:	mov	r0, r9
   14780:	bl	12f14 <__assert_fail@plt+0x1a24>
   14784:	mov	r0, r5
   14788:	bl	136c0 <__assert_fail@plt+0x21d0>
   1478c:	ldr	r4, [sp, #32]
   14790:	ldr	r0, [r4, #12]
   14794:	bl	114cc <closedir@plt>
   14798:	mov	r0, #7
   1479c:	strh	r0, [r4, #56]	; 0x38
   147a0:	mov	r9, #0
   147a4:	str	r9, [r4, #12]
   147a8:	ldr	r0, [r6, #48]	; 0x30
   147ac:	orr	r0, r0, #8192	; 0x2000
   147b0:	str	r0, [r6, #48]	; 0x30
   147b4:	mov	r0, #36	; 0x24
   147b8:	ldr	r1, [sp, #40]	; 0x28
   147bc:	str	r0, [r1]
   147c0:	b	14934 <__assert_fail@plt+0x3444>
   147c4:	ldr	r0, [sp, #16]
   147c8:	tst	r0, #1
   147cc:	mov	r9, r4
   147d0:	ldr	r4, [sp, #8]
   147d4:	ldr	r6, [sp, #36]	; 0x24
   147d8:	movne	r0, r6
   147dc:	movne	r1, r9
   147e0:	blne	14e1c <__assert_fail@plt+0x392c>
   147e4:	ldrb	r0, [r6, #48]	; 0x30
   147e8:	tst	r0, #4
   147ec:	beq	14818 <__assert_fail@plt+0x3328>
   147f0:	ldr	r0, [r6, #36]	; 0x24
   147f4:	ldr	r2, [sp, #44]	; 0x2c
   147f8:	sub	r1, r2, #1
   147fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14800:	cmp	r3, r0
   14804:	moveq	r2, r1
   14808:	cmp	r7, #0
   1480c:	moveq	r2, r1
   14810:	mov	r0, #0
   14814:	strb	r0, [r2]
   14818:	ldr	r0, [sp, #12]
   1481c:	cmp	r0, #0
   14820:	ldreq	r0, [sp, #4]
   14824:	eorseq	r0, r0, #1
   14828:	beq	14854 <__assert_fail@plt+0x3364>
   1482c:	cmp	r7, #0
   14830:	bne	14890 <__assert_fail@plt+0x33a0>
   14834:	cmp	r4, #3
   14838:	bne	14928 <__assert_fail@plt+0x3438>
   1483c:	ldrh	r0, [sl, #56]	; 0x38
   14840:	cmp	r0, #4
   14844:	cmpne	r0, #7
   14848:	movne	r0, #6
   1484c:	strhne	r0, [sl, #56]	; 0x38
   14850:	b	14928 <__assert_fail@plt+0x3438>
   14854:	cmp	r4, #1
   14858:	cmpne	r7, #0
   1485c:	bne	14890 <__assert_fail@plt+0x33a0>
   14860:	ldr	r0, [sl, #48]	; 0x30
   14864:	cmp	r0, #0
   14868:	beq	14904 <__assert_fail@plt+0x3414>
   1486c:	ldr	r1, [sl, #4]
   14870:	movw	r3, #43435	; 0xa9ab
   14874:	movt	r3, #1
   14878:	mov	r0, r6
   1487c:	mvn	r2, #0
   14880:	bl	13f3c <__assert_fail@plt+0x2a4c>
   14884:	cmp	r0, #0
   14888:	bne	14914 <__assert_fail@plt+0x3424>
   1488c:	b	1482c <__assert_fail@plt+0x333c>
   14890:	ldr	r0, [sp, #20]
   14894:	tst	r0, #1
   14898:	beq	148c4 <__assert_fail@plt+0x33d4>
   1489c:	movw	r0, #20156	; 0x4ebc
   148a0:	movt	r0, #1
   148a4:	str	r0, [r6, #44]	; 0x2c
   148a8:	mov	r0, r6
   148ac:	mov	r1, r9
   148b0:	mov	r2, r7
   148b4:	bl	13534 <__assert_fail@plt+0x2044>
   148b8:	mov	r9, r0
   148bc:	mov	r0, #0
   148c0:	str	r0, [r6, #44]	; 0x2c
   148c4:	cmp	r7, #2
   148c8:	bcc	14934 <__assert_fail@plt+0x3444>
   148cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148d0:	ldr	r0, [r0]
   148d4:	cmp	r0, #0
   148d8:	beq	14934 <__assert_fail@plt+0x3444>
   148dc:	mov	r0, r6
   148e0:	mov	r1, r9
   148e4:	mov	r2, r7
   148e8:	bl	13534 <__assert_fail@plt+0x2044>
   148ec:	mov	r9, r0
   148f0:	b	14934 <__assert_fail@plt+0x3444>
   148f4:	bl	113a0 <__errno_location@plt>
   148f8:	mov	r1, #12
   148fc:	str	r1, [r0]
   14900:	b	14934 <__assert_fail@plt+0x3444>
   14904:	mov	r0, r6
   14908:	bl	14940 <__assert_fail@plt+0x3450>
   1490c:	cmp	r0, #0
   14910:	beq	1482c <__assert_fail@plt+0x333c>
   14914:	mov	r0, #7
   14918:	strh	r0, [sl, #56]	; 0x38
   1491c:	ldr	r0, [r6, #48]	; 0x30
   14920:	orr	r0, r0, #8192	; 0x2000
   14924:	str	r0, [r6, #48]	; 0x30
   14928:	mov	r0, r9
   1492c:	bl	136c0 <__assert_fail@plt+0x21d0>
   14930:	mov	r9, #0
   14934:	mov	r0, r9
   14938:	sub	sp, fp, #28
   1493c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14940:	push	{r4, r5, fp, lr}
   14944:	add	fp, sp, #8
   14948:	mov	r4, r0
   1494c:	ldr	r0, [r0, #48]	; 0x30
   14950:	mov	r5, #0
   14954:	tst	r0, #4
   14958:	bne	1498c <__assert_fail@plt+0x349c>
   1495c:	tst	r0, #512	; 0x200
   14960:	bne	1497c <__assert_fail@plt+0x348c>
   14964:	ldr	r0, [r4, #28]
   14968:	bl	11460 <fchdir@plt>
   1496c:	mov	r5, r0
   14970:	cmp	r0, #0
   14974:	movwne	r5, #1
   14978:	b	1498c <__assert_fail@plt+0x349c>
   1497c:	mov	r0, r4
   14980:	mvn	r1, #99	; 0x63
   14984:	mov	r2, #1
   14988:	bl	14ae4 <__assert_fail@plt+0x35f4>
   1498c:	add	r0, r4, #60	; 0x3c
   14990:	bl	13838 <__assert_fail@plt+0x2348>
   14994:	mov	r0, r5
   14998:	pop	{r4, r5, fp, pc}
   1499c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149a0:	add	fp, sp, #24
   149a4:	mov	r4, r1
   149a8:	mov	r8, r0
   149ac:	ldr	r1, [r1, #52]	; 0x34
   149b0:	str	r1, [r4, #40]	; 0x28
   149b4:	ldr	r0, [r0, #24]
   149b8:	add	r6, r4, #168	; 0xa8
   149bc:	add	r2, r1, #1
   149c0:	mov	r1, r6
   149c4:	bl	11220 <memmove@plt>
   149c8:	mov	r0, r6
   149cc:	mov	r1, #47	; 0x2f
   149d0:	bl	11424 <strrchr@plt>
   149d4:	cmp	r0, #0
   149d8:	beq	14a14 <__assert_fail@plt+0x3524>
   149dc:	cmp	r0, r6
   149e0:	bne	149f0 <__assert_fail@plt+0x3500>
   149e4:	ldrb	r1, [r0, #1]
   149e8:	cmp	r1, #0
   149ec:	beq	14a14 <__assert_fail@plt+0x3524>
   149f0:	add	r7, r0, #1
   149f4:	mov	r0, r7
   149f8:	bl	11370 <strlen@plt>
   149fc:	mov	r5, r0
   14a00:	add	r2, r0, #1
   14a04:	mov	r0, r6
   14a08:	mov	r1, r7
   14a0c:	bl	11220 <memmove@plt>
   14a10:	str	r5, [r4, #52]	; 0x34
   14a14:	ldr	r0, [r8, #24]
   14a18:	str	r0, [r4, #24]
   14a1c:	str	r0, [r4, #28]
   14a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a28:	add	fp, sp, #24
   14a2c:	mov	r4, r1
   14a30:	mov	r6, r0
   14a34:	add	r5, r1, #64	; 0x40
   14a38:	ldrh	r0, [r0, #48]	; 0x30
   14a3c:	movw	r1, #258	; 0x102
   14a40:	tst	r0, r1
   14a44:	beq	14abc <__assert_fail@plt+0x35cc>
   14a48:	mov	r0, #24
   14a4c:	bl	18c90 <__assert_fail@plt+0x77a0>
   14a50:	mov	r8, #0
   14a54:	cmp	r0, #0
   14a58:	beq	14adc <__assert_fail@plt+0x35ec>
   14a5c:	mov	r7, r0
   14a60:	add	r0, r4, #160	; 0xa0
   14a64:	ldrd	r2, [r5]
   14a68:	stm	r7, {r2, r3}
   14a6c:	ldrd	r0, [r0]
   14a70:	add	r2, r7, #8
   14a74:	stm	r2, {r0, r1, r4}
   14a78:	ldr	r0, [r6, #56]	; 0x38
   14a7c:	mov	r1, r7
   14a80:	bl	15d80 <__assert_fail@plt+0x4890>
   14a84:	cmp	r0, r7
   14a88:	beq	14ab0 <__assert_fail@plt+0x35c0>
   14a8c:	mov	r5, r0
   14a90:	mov	r0, r7
   14a94:	bl	12f14 <__assert_fail@plt+0x1a24>
   14a98:	cmp	r5, #0
   14a9c:	beq	14adc <__assert_fail@plt+0x35ec>
   14aa0:	ldr	r0, [r5, #16]
   14aa4:	mov	r1, #2
   14aa8:	strh	r1, [r4, #56]	; 0x38
   14aac:	str	r0, [r4]
   14ab0:	mov	r8, #1
   14ab4:	mov	r0, r8
   14ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14abc:	ldr	r0, [r6, #56]	; 0x38
   14ac0:	mov	r1, r5
   14ac4:	bl	19220 <__assert_fail@plt+0x7d30>
   14ac8:	mov	r8, #1
   14acc:	cmp	r0, #0
   14ad0:	movne	r0, #2
   14ad4:	strhne	r0, [r4, #56]	; 0x38
   14ad8:	strne	r4, [r4]
   14adc:	mov	r0, r8
   14ae0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ae4:	push	{r4, r5, fp, lr}
   14ae8:	add	fp, sp, #8
   14aec:	mov	r4, r1
   14af0:	mov	r5, r0
   14af4:	ldr	r1, [r0, #32]
   14af8:	cmp	r1, r4
   14afc:	bne	14b08 <__assert_fail@plt+0x3618>
   14b00:	cmn	r1, #100	; 0x64
   14b04:	bne	14b48 <__assert_fail@plt+0x3658>
   14b08:	cmp	r2, #0
   14b0c:	beq	14b24 <__assert_fail@plt+0x3634>
   14b10:	add	r0, r5, #60	; 0x3c
   14b14:	bl	15fc0 <__assert_fail@plt+0x4ad0>
   14b18:	cmp	r0, #0
   14b1c:	bpl	14b3c <__assert_fail@plt+0x364c>
   14b20:	b	14b40 <__assert_fail@plt+0x3650>
   14b24:	cmp	r1, #0
   14b28:	bmi	14b40 <__assert_fail@plt+0x3650>
   14b2c:	ldr	r0, [r5, #48]	; 0x30
   14b30:	ands	r0, r0, #4
   14b34:	bne	14b40 <__assert_fail@plt+0x3650>
   14b38:	mov	r0, r1
   14b3c:	bl	114b4 <close@plt>
   14b40:	str	r4, [r5, #32]
   14b44:	pop	{r4, r5, fp, pc}
   14b48:	bl	114a8 <abort@plt>
   14b4c:	push	{fp, lr}
   14b50:	mov	fp, sp
   14b54:	cmp	r2, #5
   14b58:	bcc	14b70 <__assert_fail@plt+0x3680>
   14b5c:	bl	113a0 <__errno_location@plt>
   14b60:	mov	r1, #22
   14b64:	str	r1, [r0]
   14b68:	mov	r0, #1
   14b6c:	pop	{fp, pc}
   14b70:	strh	r2, [r1, #60]	; 0x3c
   14b74:	mov	r0, #0
   14b78:	pop	{fp, pc}
   14b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b80:	add	fp, sp, #28
   14b84:	sub	sp, sp, #4
   14b88:	mov	r5, r0
   14b8c:	mvn	r0, #4096	; 0x1000
   14b90:	tst	r1, r0
   14b94:	beq	14bac <__assert_fail@plt+0x36bc>
   14b98:	bl	113a0 <__errno_location@plt>
   14b9c:	mov	r1, #22
   14ba0:	str	r1, [r0]
   14ba4:	mov	r4, #0
   14ba8:	b	14ca8 <__assert_fail@plt+0x37b8>
   14bac:	mov	r7, r1
   14bb0:	ldr	r6, [r5]
   14bb4:	bl	113a0 <__errno_location@plt>
   14bb8:	mov	sl, r0
   14bbc:	mov	r4, #0
   14bc0:	str	r4, [r0]
   14bc4:	ldrb	r0, [r5, #49]	; 0x31
   14bc8:	tst	r0, #32
   14bcc:	bne	14ca8 <__assert_fail@plt+0x37b8>
   14bd0:	ldrh	r0, [r6, #56]	; 0x38
   14bd4:	cmp	r0, #1
   14bd8:	beq	14be8 <__assert_fail@plt+0x36f8>
   14bdc:	cmp	r0, #9
   14be0:	ldreq	r4, [r6, #8]
   14be4:	b	14ca8 <__assert_fail@plt+0x37b8>
   14be8:	ldr	r0, [r5, #4]
   14bec:	cmp	r0, #0
   14bf0:	blne	136c0 <__assert_fail@plt+0x21d0>
   14bf4:	mov	r9, #1
   14bf8:	cmp	r7, #4096	; 0x1000
   14bfc:	bne	14c10 <__assert_fail@plt+0x3720>
   14c00:	ldr	r0, [r5, #48]	; 0x30
   14c04:	orr	r0, r0, #4096	; 0x1000
   14c08:	str	r0, [r5, #48]	; 0x30
   14c0c:	mov	r9, #2
   14c10:	ldr	r0, [r6, #48]	; 0x30
   14c14:	cmp	r0, #0
   14c18:	bne	14c94 <__assert_fail@plt+0x37a4>
   14c1c:	ldr	r0, [r6, #24]
   14c20:	ldrb	r0, [r0]
   14c24:	cmp	r0, #47	; 0x2f
   14c28:	beq	14c94 <__assert_fail@plt+0x37a4>
   14c2c:	ldrb	r0, [r5, #48]	; 0x30
   14c30:	tst	r0, #4
   14c34:	bne	14c94 <__assert_fail@plt+0x37a4>
   14c38:	movw	r1, #43436	; 0xa9ac
   14c3c:	movt	r1, #1
   14c40:	mov	r0, r5
   14c44:	bl	13690 <__assert_fail@plt+0x21a0>
   14c48:	cmn	r0, #1
   14c4c:	ble	14cb4 <__assert_fail@plt+0x37c4>
   14c50:	mov	r8, r0
   14c54:	mov	r0, r5
   14c58:	mov	r1, r9
   14c5c:	bl	14124 <__assert_fail@plt+0x2c34>
   14c60:	str	r0, [r5, #4]
   14c64:	ldrb	r0, [r5, #49]	; 0x31
   14c68:	tst	r0, #2
   14c6c:	bne	14cc0 <__assert_fail@plt+0x37d0>
   14c70:	mov	r0, r8
   14c74:	bl	11460 <fchdir@plt>
   14c78:	cmp	r0, #0
   14c7c:	beq	14cd4 <__assert_fail@plt+0x37e4>
   14c80:	ldr	r5, [sl]
   14c84:	mov	r0, r8
   14c88:	bl	114b4 <close@plt>
   14c8c:	str	r5, [sl]
   14c90:	b	14ca8 <__assert_fail@plt+0x37b8>
   14c94:	mov	r0, r5
   14c98:	mov	r1, r9
   14c9c:	bl	14124 <__assert_fail@plt+0x2c34>
   14ca0:	mov	r4, r0
   14ca4:	str	r0, [r5, #4]
   14ca8:	mov	r0, r4
   14cac:	sub	sp, fp, #28
   14cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb4:	mov	r4, #0
   14cb8:	str	r4, [r5, #4]
   14cbc:	b	14ca8 <__assert_fail@plt+0x37b8>
   14cc0:	mov	r0, r5
   14cc4:	mov	r1, r8
   14cc8:	mov	r2, #1
   14ccc:	bl	14ae4 <__assert_fail@plt+0x35f4>
   14cd0:	b	14cdc <__assert_fail@plt+0x37ec>
   14cd4:	mov	r0, r8
   14cd8:	bl	114b4 <close@plt>
   14cdc:	ldr	r4, [r5, #4]
   14ce0:	b	14ca8 <__assert_fail@plt+0x37b8>
   14ce4:	push	{fp, lr}
   14ce8:	mov	fp, sp
   14cec:	mov	r2, r1
   14cf0:	ldrd	r0, [r0, #8]
   14cf4:	mov	r3, #0
   14cf8:	bl	1992c <__assert_fail@plt+0x843c>
   14cfc:	mov	r0, r2
   14d00:	pop	{fp, pc}
   14d04:	push	{r4, r5, fp, lr}
   14d08:	add	fp, sp, #8
   14d0c:	ldrd	r2, [r1, #8]
   14d10:	ldrd	r4, [r0, #8]
   14d14:	eor	r3, r5, r3
   14d18:	eor	r2, r4, r2
   14d1c:	orrs	r2, r2, r3
   14d20:	mov	r2, #0
   14d24:	bne	14d44 <__assert_fail@plt+0x3854>
   14d28:	ldrd	r2, [r1]
   14d2c:	ldrd	r0, [r0]
   14d30:	eor	r1, r1, r3
   14d34:	eor	r0, r0, r2
   14d38:	orr	r0, r0, r1
   14d3c:	clz	r0, r0
   14d40:	lsr	r2, r0, #5
   14d44:	mov	r0, r2
   14d48:	pop	{r4, r5, fp, pc}
   14d4c:	push	{fp, lr}
   14d50:	mov	fp, sp
   14d54:	bl	14ef4 <__assert_fail@plt+0x3a04>
   14d58:	mov	r1, r0
   14d5c:	mov	r0, #0
   14d60:	movw	r2, #26984	; 0x6968
   14d64:	cmp	r1, r2
   14d68:	ble	14d98 <__assert_fail@plt+0x38a8>
   14d6c:	movw	r2, #26985	; 0x6969
   14d70:	cmp	r1, r2
   14d74:	movwne	r2, #40864	; 0x9fa0
   14d78:	cmpne	r1, r2
   14d7c:	beq	14db0 <__assert_fail@plt+0x38c0>
   14d80:	movw	r2, #16719	; 0x414f
   14d84:	movt	r2, #21318	; 0x5346
   14d88:	cmp	r1, r2
   14d8c:	popeq	{fp, pc}
   14d90:	mov	r0, #1
   14d94:	pop	{fp, pc}
   14d98:	movw	r2, #19778	; 0x4d42
   14d9c:	movt	r2, #65363	; 0xff53
   14da0:	cmp	r1, r2
   14da4:	beq	14db0 <__assert_fail@plt+0x38c0>
   14da8:	cmp	r1, #0
   14dac:	movne	r0, #1
   14db0:	pop	{fp, pc}
   14db4:	sub	r2, r1, #1
   14db8:	mov	r1, #0
   14dbc:	cmp	r2, #11
   14dc0:	bhi	14dd0 <__assert_fail@plt+0x38e0>
   14dc4:	movw	r1, #43440	; 0xa9b0
   14dc8:	movt	r1, #1
   14dcc:	ldr	r1, [r1, r2, lsl #2]
   14dd0:	str	r1, [r0, #16]
   14dd4:	bx	lr
   14dd8:	push	{fp, lr}
   14ddc:	mov	fp, sp
   14de0:	bl	14ef4 <__assert_fail@plt+0x3a04>
   14de4:	mov	r1, r0
   14de8:	mov	r0, #0
   14dec:	movw	r2, #19778	; 0x4d42
   14df0:	movt	r2, #65363	; 0xff53
   14df4:	cmp	r1, r2
   14df8:	movwne	r2, #26985	; 0x6969
   14dfc:	cmpne	r1, r2
   14e00:	bne	14e08 <__assert_fail@plt+0x3918>
   14e04:	pop	{fp, pc}
   14e08:	movw	r2, #6548	; 0x1994
   14e0c:	movt	r2, #258	; 0x102
   14e10:	cmp	r1, r2
   14e14:	movne	r0, #1
   14e18:	pop	{fp, pc}
   14e1c:	ldr	r2, [r0, #4]
   14e20:	ldr	ip, [r0, #24]
   14e24:	cmp	r2, #0
   14e28:	bne	14e40 <__assert_fail@plt+0x3950>
   14e2c:	b	14e64 <__assert_fail@plt+0x3974>
   14e30:	str	ip, [r2, #28]
   14e34:	ldr	r2, [r2, #8]
   14e38:	cmp	r2, #0
   14e3c:	beq	14e64 <__assert_fail@plt+0x3974>
   14e40:	ldr	r3, [r2, #24]
   14e44:	add	r0, r2, #168	; 0xa8
   14e48:	cmp	r3, r0
   14e4c:	beq	14e30 <__assert_fail@plt+0x3940>
   14e50:	ldr	r0, [r2, #28]
   14e54:	sub	r0, r3, r0
   14e58:	add	r0, ip, r0
   14e5c:	str	r0, [r2, #24]
   14e60:	b	14e30 <__assert_fail@plt+0x3940>
   14e64:	ldr	r2, [r1, #48]	; 0x30
   14e68:	cmp	r2, #0
   14e6c:	bxmi	lr
   14e70:	b	14e94 <__assert_fail@plt+0x39a4>
   14e74:	str	ip, [r1, #28]
   14e78:	ldr	r2, [r1, #8]
   14e7c:	cmp	r2, #0
   14e80:	ldreq	r2, [r1, #4]
   14e84:	ldr	r0, [r2, #48]	; 0x30
   14e88:	cmn	r0, #1
   14e8c:	mov	r1, r2
   14e90:	ble	14eb8 <__assert_fail@plt+0x39c8>
   14e94:	ldr	r2, [r1, #24]
   14e98:	add	r0, r1, #168	; 0xa8
   14e9c:	cmp	r2, r0
   14ea0:	beq	14e74 <__assert_fail@plt+0x3984>
   14ea4:	ldr	r0, [r1, #28]
   14ea8:	sub	r0, r2, r0
   14eac:	add	r0, ip, r0
   14eb0:	str	r0, [r1, #24]
   14eb4:	b	14e74 <__assert_fail@plt+0x3984>
   14eb8:	bx	lr
   14ebc:	push	{r4, r5, fp, lr}
   14ec0:	add	fp, sp, #8
   14ec4:	ldr	r0, [r0]
   14ec8:	ldrd	r2, [r0, #160]	; 0xa0
   14ecc:	ldr	r0, [r1]
   14ed0:	ldrd	r4, [r0, #160]	; 0xa0
   14ed4:	mov	r0, #0
   14ed8:	subs	r1, r4, r2
   14edc:	sbcs	r1, r5, r3
   14ee0:	movwcc	r0, #1
   14ee4:	subs	r1, r2, r4
   14ee8:	sbcs	r1, r3, r5
   14eec:	subcc	r0, r0, #1
   14ef0:	pop	{r4, r5, fp, pc}
   14ef4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ef8:	add	fp, sp, #24
   14efc:	sub	sp, sp, #96	; 0x60
   14f00:	mov	r4, r0
   14f04:	ldr	r7, [r0, #44]	; 0x2c
   14f08:	ldrb	r0, [r7, #49]	; 0x31
   14f0c:	mov	r5, #0
   14f10:	tst	r0, #2
   14f14:	beq	15010 <__assert_fail@plt+0x3b20>
   14f18:	mov	r9, r1
   14f1c:	ldr	r6, [r7, #52]	; 0x34
   14f20:	cmp	r6, #0
   14f24:	bne	14f64 <__assert_fail@plt+0x3a74>
   14f28:	movw	r0, #12052	; 0x2f14
   14f2c:	movt	r0, #1
   14f30:	str	r0, [sp]
   14f34:	mov	r8, #0
   14f38:	movw	r2, #20508	; 0x501c
   14f3c:	movt	r2, #1
   14f40:	movw	r3, #20540	; 0x503c
   14f44:	movt	r3, #1
   14f48:	mov	r0, #13
   14f4c:	mov	r1, #0
   14f50:	bl	154e4 <__assert_fail@plt+0x3ff4>
   14f54:	mov	r6, r0
   14f58:	str	r0, [r7, #52]	; 0x34
   14f5c:	cmp	r0, #0
   14f60:	beq	14f9c <__assert_fail@plt+0x3aac>
   14f64:	ldrd	r0, [r4, #64]	; 0x40
   14f68:	str	r1, [sp, #12]
   14f6c:	str	r0, [sp, #8]
   14f70:	add	r1, sp, #8
   14f74:	mov	r0, r6
   14f78:	bl	15238 <__assert_fail@plt+0x3d48>
   14f7c:	cmp	r0, #0
   14f80:	beq	14f8c <__assert_fail@plt+0x3a9c>
   14f84:	ldr	r5, [r0, #8]
   14f88:	b	15010 <__assert_fail@plt+0x3b20>
   14f8c:	mov	r8, #1
   14f90:	cmp	r9, #0
   14f94:	bpl	14fa8 <__assert_fail@plt+0x3ab8>
   14f98:	b	15010 <__assert_fail@plt+0x3b20>
   14f9c:	mov	r6, #0
   14fa0:	cmp	r9, #0
   14fa4:	bmi	15010 <__assert_fail@plt+0x3b20>
   14fa8:	add	r1, sp, #8
   14fac:	mov	r0, r9
   14fb0:	bl	111c0 <fstatfs64@plt>
   14fb4:	cmp	r0, #0
   14fb8:	bne	15010 <__assert_fail@plt+0x3b20>
   14fbc:	cmp	r8, #0
   14fc0:	beq	1500c <__assert_fail@plt+0x3b1c>
   14fc4:	mov	r0, #16
   14fc8:	bl	18c90 <__assert_fail@plt+0x77a0>
   14fcc:	cmp	r0, #0
   14fd0:	beq	1500c <__assert_fail@plt+0x3b1c>
   14fd4:	mov	r5, r0
   14fd8:	ldrd	r0, [r4, #64]	; 0x40
   14fdc:	ldr	r2, [sp, #8]
   14fe0:	stm	r5, {r0, r1, r2}
   14fe4:	mov	r0, r6
   14fe8:	mov	r1, r5
   14fec:	bl	15d80 <__assert_fail@plt+0x4890>
   14ff0:	cmp	r0, #0
   14ff4:	beq	15004 <__assert_fail@plt+0x3b14>
   14ff8:	cmp	r0, r5
   14ffc:	beq	1500c <__assert_fail@plt+0x3b1c>
   15000:	bl	114a8 <abort@plt>
   15004:	mov	r0, r5
   15008:	bl	12f14 <__assert_fail@plt+0x1a24>
   1500c:	ldr	r5, [sp, #8]
   15010:	mov	r0, r5
   15014:	sub	sp, fp, #24
   15018:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1501c:	push	{fp, lr}
   15020:	mov	fp, sp
   15024:	mov	r2, r1
   15028:	ldrd	r0, [r0]
   1502c:	mov	r3, #0
   15030:	bl	1992c <__assert_fail@plt+0x843c>
   15034:	mov	r0, r2
   15038:	pop	{fp, pc}
   1503c:	ldrd	r2, [r1]
   15040:	ldrd	r0, [r0]
   15044:	eor	r1, r1, r3
   15048:	eor	r0, r0, r2
   1504c:	orr	r0, r0, r1
   15050:	clz	r0, r0
   15054:	lsr	r0, r0, #5
   15058:	bx	lr
   1505c:	andeq	r0, r0, r0
   15060:	ldr	r0, [r0, #8]
   15064:	bx	lr
   15068:	ldr	r0, [r0, #12]
   1506c:	bx	lr
   15070:	ldr	r0, [r0, #16]
   15074:	bx	lr
   15078:	mov	r2, r0
   1507c:	ldm	r0, {r1, r3}
   15080:	mov	r0, #0
   15084:	cmp	r1, r3
   15088:	bxcs	lr
   1508c:	ldr	ip, [r2, #4]
   15090:	mov	r0, #0
   15094:	b	150a4 <__assert_fail@plt+0x3bb4>
   15098:	add	r1, r1, #8
   1509c:	cmp	r1, ip
   150a0:	bcs	150d4 <__assert_fail@plt+0x3be4>
   150a4:	ldr	r2, [r1]
   150a8:	cmp	r2, #0
   150ac:	beq	15098 <__assert_fail@plt+0x3ba8>
   150b0:	mov	r3, #0
   150b4:	mov	r2, r1
   150b8:	add	r3, r3, #1
   150bc:	ldr	r2, [r2, #4]
   150c0:	cmp	r2, #0
   150c4:	bne	150b8 <__assert_fail@plt+0x3bc8>
   150c8:	cmp	r3, r0
   150cc:	movhi	r0, r3
   150d0:	b	15098 <__assert_fail@plt+0x3ba8>
   150d4:	bx	lr
   150d8:	push	{fp, lr}
   150dc:	mov	fp, sp
   150e0:	ldr	r3, [r0]
   150e4:	ldr	r1, [r0, #4]
   150e8:	mov	lr, #0
   150ec:	cmp	r3, r1
   150f0:	mov	r1, #0
   150f4:	bcs	1513c <__assert_fail@plt+0x3c4c>
   150f8:	ldr	ip, [r0, #4]
   150fc:	mov	r1, #0
   15100:	mov	lr, #0
   15104:	b	15114 <__assert_fail@plt+0x3c24>
   15108:	add	r3, r3, #8
   1510c:	cmp	r3, ip
   15110:	bcs	1513c <__assert_fail@plt+0x3c4c>
   15114:	ldr	r2, [r3]
   15118:	cmp	r2, #0
   1511c:	beq	15108 <__assert_fail@plt+0x3c18>
   15120:	mov	r2, r3
   15124:	add	r1, r1, #1
   15128:	ldr	r2, [r2, #4]
   1512c:	cmp	r2, #0
   15130:	bne	15124 <__assert_fail@plt+0x3c34>
   15134:	add	lr, lr, #1
   15138:	b	15108 <__assert_fail@plt+0x3c18>
   1513c:	ldr	r2, [r0, #12]
   15140:	cmp	lr, r2
   15144:	bne	1515c <__assert_fail@plt+0x3c6c>
   15148:	ldr	r2, [r0, #16]
   1514c:	mov	r0, #1
   15150:	cmp	r1, r2
   15154:	movne	r0, #0
   15158:	pop	{fp, pc}
   1515c:	mov	r0, #0
   15160:	pop	{fp, pc}
   15164:	nop	{0}
   15168:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1516c:	add	fp, sp, #24
   15170:	sub	sp, sp, #8
   15174:	mov	r4, r1
   15178:	mov	r5, r0
   1517c:	bl	15070 <__assert_fail@plt+0x3b80>
   15180:	mov	r8, r0
   15184:	mov	r0, r5
   15188:	bl	15060 <__assert_fail@plt+0x3b70>
   1518c:	mov	r7, r0
   15190:	mov	r0, r5
   15194:	bl	15068 <__assert_fail@plt+0x3b78>
   15198:	mov	r6, r0
   1519c:	mov	r0, r5
   151a0:	bl	15078 <__assert_fail@plt+0x3b88>
   151a4:	mov	r5, r0
   151a8:	movw	r2, #43488	; 0xa9e0
   151ac:	movt	r2, #1
   151b0:	mov	r0, r4
   151b4:	mov	r1, #1
   151b8:	mov	r3, r8
   151bc:	bl	113e8 <__fprintf_chk@plt>
   151c0:	movw	r2, #43512	; 0xa9f8
   151c4:	movt	r2, #1
   151c8:	mov	r0, r4
   151cc:	mov	r1, #1
   151d0:	mov	r3, r7
   151d4:	bl	113e8 <__fprintf_chk@plt>
   151d8:	vldr	d16, [pc, #80]	; 15230 <__assert_fail@plt+0x3d40>
   151dc:	vmov	s0, r6
   151e0:	vmov	s2, r7
   151e4:	vcvt.f64.u32	d17, s0
   151e8:	vcvt.f64.u32	d18, s2
   151ec:	vmul.f64	d16, d17, d16
   151f0:	vdiv.f64	d16, d16, d18
   151f4:	vstr	d16, [sp]
   151f8:	movw	r2, #43536	; 0xaa10
   151fc:	movt	r2, #1
   15200:	mov	r0, r4
   15204:	mov	r1, #1
   15208:	mov	r3, r6
   1520c:	bl	113e8 <__fprintf_chk@plt>
   15210:	movw	r2, #43569	; 0xaa31
   15214:	movt	r2, #1
   15218:	mov	r0, r4
   1521c:	mov	r1, #1
   15220:	mov	r3, r5
   15224:	sub	sp, fp, #24
   15228:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1522c:	b	113e8 <__fprintf_chk@plt>
   15230:	andeq	r0, r0, r0
   15234:	subsmi	r0, r9, r0
   15238:	push	{r4, r5, r6, r7, fp, lr}
   1523c:	add	fp, sp, #16
   15240:	mov	r5, r1
   15244:	mov	r6, r0
   15248:	bl	152a8 <__assert_fail@plt+0x3db8>
   1524c:	mov	r7, r0
   15250:	ldr	r0, [r0]
   15254:	mov	r4, #0
   15258:	cmp	r0, #0
   1525c:	beq	15294 <__assert_fail@plt+0x3da4>
   15260:	cmp	r7, #0
   15264:	beq	15294 <__assert_fail@plt+0x3da4>
   15268:	ldr	r1, [r7]
   1526c:	cmp	r1, r5
   15270:	beq	1529c <__assert_fail@plt+0x3dac>
   15274:	ldr	r2, [r6, #28]
   15278:	mov	r0, r5
   1527c:	blx	r2
   15280:	cmp	r0, #0
   15284:	bne	1529c <__assert_fail@plt+0x3dac>
   15288:	ldr	r7, [r7, #4]
   1528c:	cmp	r7, #0
   15290:	bne	15268 <__assert_fail@plt+0x3d78>
   15294:	mov	r0, r4
   15298:	pop	{r4, r5, r6, r7, fp, pc}
   1529c:	ldr	r4, [r7]
   152a0:	mov	r0, r4
   152a4:	pop	{r4, r5, r6, r7, fp, pc}
   152a8:	push	{r4, sl, fp, lr}
   152ac:	add	fp, sp, #8
   152b0:	mov	r2, r1
   152b4:	mov	r4, r0
   152b8:	ldr	r1, [r0, #8]
   152bc:	ldr	r3, [r0, #24]
   152c0:	mov	r0, r2
   152c4:	blx	r3
   152c8:	ldr	r1, [r4, #8]
   152cc:	cmp	r0, r1
   152d0:	ldrcc	r1, [r4]
   152d4:	addcc	r0, r1, r0, lsl #3
   152d8:	popcc	{r4, sl, fp, pc}
   152dc:	bl	114a8 <abort@plt>
   152e0:	push	{fp, lr}
   152e4:	mov	fp, sp
   152e8:	ldr	r1, [r0, #16]
   152ec:	cmp	r1, #0
   152f0:	beq	15318 <__assert_fail@plt+0x3e28>
   152f4:	ldr	r2, [r0]
   152f8:	ldr	r1, [r0, #4]
   152fc:	cmp	r2, r1
   15300:	bcs	15324 <__assert_fail@plt+0x3e34>
   15304:	ldr	r1, [r2], #8
   15308:	cmp	r1, #0
   1530c:	beq	152f8 <__assert_fail@plt+0x3e08>
   15310:	mov	r0, r1
   15314:	pop	{fp, pc}
   15318:	mov	r1, #0
   1531c:	mov	r0, r1
   15320:	pop	{fp, pc}
   15324:	bl	114a8 <abort@plt>
   15328:	push	{r4, r5, fp, lr}
   1532c:	add	fp, sp, #8
   15330:	mov	r5, r1
   15334:	mov	r4, r0
   15338:	bl	152a8 <__assert_fail@plt+0x3db8>
   1533c:	mov	r1, r0
   15340:	b	15350 <__assert_fail@plt+0x3e60>
   15344:	ldr	r1, [r1, #4]
   15348:	cmp	r1, #0
   1534c:	beq	15370 <__assert_fail@plt+0x3e80>
   15350:	ldr	r2, [r1]
   15354:	cmp	r2, r5
   15358:	bne	15344 <__assert_fail@plt+0x3e54>
   1535c:	ldr	r2, [r1, #4]
   15360:	cmp	r2, #0
   15364:	beq	15344 <__assert_fail@plt+0x3e54>
   15368:	ldr	r0, [r2]
   1536c:	pop	{r4, r5, fp, pc}
   15370:	add	r1, r0, #8
   15374:	ldr	r2, [r4, #4]
   15378:	cmp	r1, r2
   1537c:	bcs	15390 <__assert_fail@plt+0x3ea0>
   15380:	ldr	r0, [r1], #8
   15384:	cmp	r0, #0
   15388:	beq	15378 <__assert_fail@plt+0x3e88>
   1538c:	pop	{r4, r5, fp, pc}
   15390:	mov	r0, #0
   15394:	pop	{r4, r5, fp, pc}
   15398:	push	{r4, sl, fp, lr}
   1539c:	add	fp, sp, #8
   153a0:	mov	ip, r0
   153a4:	ldr	lr, [r0]
   153a8:	ldr	r3, [r0, #4]
   153ac:	mov	r0, #0
   153b0:	cmp	lr, r3
   153b4:	popcs	{r4, sl, fp, pc}
   153b8:	mov	r0, #0
   153bc:	b	153d0 <__assert_fail@plt+0x3ee0>
   153c0:	ldr	r3, [ip, #4]
   153c4:	add	lr, lr, #8
   153c8:	cmp	lr, r3
   153cc:	bcs	15408 <__assert_fail@plt+0x3f18>
   153d0:	ldr	r3, [lr]
   153d4:	cmp	r3, #0
   153d8:	cmpne	lr, #0
   153dc:	beq	153c0 <__assert_fail@plt+0x3ed0>
   153e0:	mov	r3, lr
   153e4:	cmp	r0, r2
   153e8:	bcs	15408 <__assert_fail@plt+0x3f18>
   153ec:	ldr	r4, [r3]
   153f0:	str	r4, [r1, r0, lsl #2]
   153f4:	add	r0, r0, #1
   153f8:	ldr	r3, [r3, #4]
   153fc:	cmp	r3, #0
   15400:	bne	153e4 <__assert_fail@plt+0x3ef4>
   15404:	b	153c0 <__assert_fail@plt+0x3ed0>
   15408:	pop	{r4, sl, fp, pc}
   1540c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15410:	add	fp, sp, #24
   15414:	mov	r8, r0
   15418:	ldr	r9, [r0]
   1541c:	ldr	r0, [r0, #4]
   15420:	mov	r6, #0
   15424:	cmp	r9, r0
   15428:	bcs	15488 <__assert_fail@plt+0x3f98>
   1542c:	mov	r4, r2
   15430:	mov	r5, r1
   15434:	mov	r6, #0
   15438:	b	1544c <__assert_fail@plt+0x3f5c>
   1543c:	ldr	r0, [r8, #4]
   15440:	add	r9, r9, #8
   15444:	cmp	r9, r0
   15448:	bcs	15488 <__assert_fail@plt+0x3f98>
   1544c:	ldr	r0, [r9]
   15450:	cmp	r0, #0
   15454:	cmpne	r9, #0
   15458:	beq	1543c <__assert_fail@plt+0x3f4c>
   1545c:	mov	r7, r9
   15460:	ldr	r0, [r7]
   15464:	mov	r1, r4
   15468:	blx	r5
   1546c:	cmp	r0, #0
   15470:	beq	15488 <__assert_fail@plt+0x3f98>
   15474:	add	r6, r6, #1
   15478:	ldr	r7, [r7, #4]
   1547c:	cmp	r7, #0
   15480:	bne	15460 <__assert_fail@plt+0x3f70>
   15484:	b	1543c <__assert_fail@plt+0x3f4c>
   15488:	mov	r0, r6
   1548c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15490:	ldrb	r2, [r0]
   15494:	cmp	r2, #0
   15498:	moveq	r0, #0
   1549c:	bxeq	lr
   154a0:	add	r3, r0, #1
   154a4:	mov	r0, #0
   154a8:	rsb	r0, r0, r0, lsl #5
   154ac:	uxtab	r0, r0, r2
   154b0:	udiv	r2, r0, r1
   154b4:	mls	r0, r2, r1, r0
   154b8:	ldrb	r2, [r3], #1
   154bc:	cmp	r2, #0
   154c0:	bne	154a8 <__assert_fail@plt+0x3fb8>
   154c4:	bx	lr
   154c8:	movw	r1, #43600	; 0xaa50
   154cc:	movt	r1, #1
   154d0:	vld1.32	{d16-d17}, [r1]!
   154d4:	vst1.32	{d16-d17}, [r0]!
   154d8:	ldr	r1, [r1]
   154dc:	str	r1, [r0]
   154e0:	bx	lr
   154e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e8:	add	fp, sp, #28
   154ec:	sub	sp, sp, #4
   154f0:	mov	r7, r1
   154f4:	mov	r8, r0
   154f8:	movw	sl, #21988	; 0x55e4
   154fc:	movt	sl, #1
   15500:	cmp	r3, #0
   15504:	movne	sl, r3
   15508:	movw	r5, #21956	; 0x55c4
   1550c:	movt	r5, #1
   15510:	cmp	r2, #0
   15514:	movne	r5, r2
   15518:	mov	r0, #40	; 0x28
   1551c:	bl	18c90 <__assert_fail@plt+0x77a0>
   15520:	mov	r9, #0
   15524:	cmp	r0, #0
   15528:	beq	155b8 <__assert_fail@plt+0x40c8>
   1552c:	mov	r4, r0
   15530:	movw	r6, #43600	; 0xaa50
   15534:	movt	r6, #1
   15538:	cmp	r7, #0
   1553c:	movne	r6, r7
   15540:	str	r6, [r0, #20]
   15544:	bl	155f4 <__assert_fail@plt+0x4104>
   15548:	cmp	r0, #0
   1554c:	beq	155b0 <__assert_fail@plt+0x40c0>
   15550:	mov	r0, r8
   15554:	mov	r1, r6
   15558:	bl	156a0 <__assert_fail@plt+0x41b0>
   1555c:	str	r0, [r4, #8]
   15560:	cmp	r0, #0
   15564:	beq	155b0 <__assert_fail@plt+0x40c0>
   15568:	mov	r1, #8
   1556c:	bl	18c3c <__assert_fail@plt+0x774c>
   15570:	str	r0, [r4]
   15574:	cmp	r0, #0
   15578:	beq	155b0 <__assert_fail@plt+0x40c0>
   1557c:	ldr	r1, [fp, #8]
   15580:	mov	r2, #0
   15584:	str	r5, [r4, #24]
   15588:	str	sl, [r4, #28]
   1558c:	str	r1, [r4, #32]
   15590:	str	r2, [r4, #36]	; 0x24
   15594:	str	r2, [r4, #12]
   15598:	str	r2, [r4, #16]
   1559c:	ldr	r1, [r4, #8]
   155a0:	add	r0, r0, r1, lsl #3
   155a4:	str	r0, [r4, #4]
   155a8:	mov	r9, r4
   155ac:	b	155b8 <__assert_fail@plt+0x40c8>
   155b0:	mov	r0, r4
   155b4:	bl	12f14 <__assert_fail@plt+0x1a24>
   155b8:	mov	r0, r9
   155bc:	sub	sp, fp, #28
   155c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c4:	push	{r4, sl, fp, lr}
   155c8:	add	fp, sp, #8
   155cc:	mov	r4, r1
   155d0:	mov	r1, #3
   155d4:	bl	18de4 <__assert_fail@plt+0x78f4>
   155d8:	udiv	r1, r0, r4
   155dc:	mls	r0, r1, r4, r0
   155e0:	pop	{r4, sl, fp, pc}
   155e4:	sub	r0, r0, r1
   155e8:	clz	r0, r0
   155ec:	lsr	r0, r0, #5
   155f0:	bx	lr
   155f4:	mov	r1, r0
   155f8:	ldr	r3, [r0, #20]
   155fc:	mov	r0, #1
   15600:	movw	r2, #43600	; 0xaa50
   15604:	movt	r2, #1
   15608:	cmp	r3, r2
   1560c:	beq	15690 <__assert_fail@plt+0x41a0>
   15610:	vldr	s2, [pc, #124]	; 15694 <__assert_fail@plt+0x41a4>
   15614:	vldr	s0, [r3, #8]
   15618:	vcmpe.f32	s0, s2
   1561c:	vmrs	APSR_nzcv, fpscr
   15620:	ble	15688 <__assert_fail@plt+0x4198>
   15624:	vldr	s4, [pc, #108]	; 15698 <__assert_fail@plt+0x41a8>
   15628:	vcmpe.f32	s0, s4
   1562c:	vmrs	APSR_nzcv, fpscr
   15630:	bpl	15688 <__assert_fail@plt+0x4198>
   15634:	vldr	s4, [pc, #96]	; 1569c <__assert_fail@plt+0x41ac>
   15638:	vldr	s6, [r3, #12]
   1563c:	vcmpe.f32	s6, s4
   15640:	vmrs	APSR_nzcv, fpscr
   15644:	ble	15688 <__assert_fail@plt+0x4198>
   15648:	vldr	s4, [r3]
   1564c:	vcmpe.f32	s4, #0.0
   15650:	vmrs	APSR_nzcv, fpscr
   15654:	blt	15688 <__assert_fail@plt+0x4198>
   15658:	vadd.f32	s2, s4, s2
   1565c:	vcmpe.f32	s2, s0
   15660:	vmrs	APSR_nzcv, fpscr
   15664:	bpl	15688 <__assert_fail@plt+0x4198>
   15668:	vldr	s0, [r3, #4]
   1566c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15670:	vcmpe.f32	s0, s4
   15674:	vmrs	APSR_nzcv, fpscr
   15678:	bhi	15688 <__assert_fail@plt+0x4198>
   1567c:	vcmpe.f32	s2, s0
   15680:	vmrs	APSR_nzcv, fpscr
   15684:	bxmi	lr
   15688:	str	r2, [r1, #20]
   1568c:	mov	r0, #0
   15690:	bx	lr
   15694:	stclcc	12, cr12, [ip, #820]	; 0x334
   15698:	svccc	0x00666666
   1569c:	svccc	0x008ccccd
   156a0:	push	{fp, lr}
   156a4:	mov	fp, sp
   156a8:	ldrb	r2, [r1, #16]
   156ac:	cmp	r2, #0
   156b0:	bne	156e0 <__assert_fail@plt+0x41f0>
   156b4:	vldr	s0, [r1, #8]
   156b8:	vmov	s2, r0
   156bc:	vcvt.f32.u32	s2, s2
   156c0:	vdiv.f32	s2, s2, s0
   156c4:	vcvt.u32.f32	s0, s2
   156c8:	vldr	s4, [pc, #32]	; 156f0 <__assert_fail@plt+0x4200>
   156cc:	mov	r0, #0
   156d0:	vcmpe.f32	s2, s4
   156d4:	vmrs	APSR_nzcv, fpscr
   156d8:	popge	{fp, pc}
   156dc:	vmov	r0, s0
   156e0:	bl	15ed4 <__assert_fail@plt+0x49e4>
   156e4:	cmn	r0, #-536870911	; 0xe0000001
   156e8:	movwhi	r0, #0
   156ec:	pop	{fp, pc}
   156f0:	svcmi	0x00800000
   156f4:	push	{r4, r5, r6, r7, fp, lr}
   156f8:	add	fp, sp, #16
   156fc:	mov	r4, r0
   15700:	ldr	r5, [r0]
   15704:	ldr	r0, [r0, #4]
   15708:	cmp	r5, r0
   1570c:	bcs	157b0 <__assert_fail@plt+0x42c0>
   15710:	mov	r6, #0
   15714:	b	15730 <__assert_fail@plt+0x4240>
   15718:	str	r6, [r5]
   1571c:	str	r6, [r5, #4]
   15720:	ldr	r0, [r4, #4]
   15724:	add	r5, r5, #8
   15728:	cmp	r5, r0
   1572c:	bcs	157b0 <__assert_fail@plt+0x42c0>
   15730:	ldr	r0, [r5]
   15734:	cmp	r0, #0
   15738:	beq	15720 <__assert_fail@plt+0x4230>
   1573c:	ldr	r7, [r5, #4]
   15740:	ldr	r1, [r4, #32]
   15744:	cmp	r1, #0
   15748:	mov	r0, r1
   1574c:	movwne	r0, #1
   15750:	cmp	r7, #0
   15754:	bne	1579c <__assert_fail@plt+0x42ac>
   15758:	cmp	r0, #0
   1575c:	beq	15718 <__assert_fail@plt+0x4228>
   15760:	ldr	r0, [r5]
   15764:	blx	r1
   15768:	b	15718 <__assert_fail@plt+0x4228>
   1576c:	str	r6, [r7]
   15770:	ldr	r2, [r7, #4]
   15774:	ldr	r0, [r4, #36]	; 0x24
   15778:	str	r0, [r7, #4]
   1577c:	str	r7, [r4, #36]	; 0x24
   15780:	ldr	r1, [r4, #32]
   15784:	cmp	r1, #0
   15788:	mov	r0, r1
   1578c:	movwne	r0, #1
   15790:	cmp	r2, #0
   15794:	mov	r7, r2
   15798:	beq	15758 <__assert_fail@plt+0x4268>
   1579c:	tst	r0, #1
   157a0:	beq	1576c <__assert_fail@plt+0x427c>
   157a4:	ldr	r0, [r7]
   157a8:	blx	r1
   157ac:	b	1576c <__assert_fail@plt+0x427c>
   157b0:	mov	r0, #0
   157b4:	str	r0, [r4, #12]
   157b8:	str	r0, [r4, #16]
   157bc:	pop	{r4, r5, r6, r7, fp, pc}
   157c0:	push	{r4, r5, r6, sl, fp, lr}
   157c4:	add	fp, sp, #16
   157c8:	mov	r4, r0
   157cc:	ldr	r0, [r0, #32]
   157d0:	cmp	r0, #0
   157d4:	beq	15838 <__assert_fail@plt+0x4348>
   157d8:	ldr	r0, [r4, #16]
   157dc:	cmp	r0, #0
   157e0:	beq	15838 <__assert_fail@plt+0x4348>
   157e4:	ldr	r5, [r4]
   157e8:	ldr	r0, [r4, #4]
   157ec:	cmp	r5, r0
   157f0:	bcc	15808 <__assert_fail@plt+0x4318>
   157f4:	b	15838 <__assert_fail@plt+0x4348>
   157f8:	ldr	r0, [r4, #4]
   157fc:	add	r5, r5, #8
   15800:	cmp	r5, r0
   15804:	bcs	15838 <__assert_fail@plt+0x4348>
   15808:	ldr	r0, [r5]
   1580c:	cmp	r0, #0
   15810:	cmpne	r5, #0
   15814:	beq	157f8 <__assert_fail@plt+0x4308>
   15818:	mov	r6, r5
   1581c:	ldr	r0, [r6]
   15820:	ldr	r1, [r4, #32]
   15824:	blx	r1
   15828:	ldr	r6, [r6, #4]
   1582c:	cmp	r6, #0
   15830:	bne	1581c <__assert_fail@plt+0x432c>
   15834:	b	157f8 <__assert_fail@plt+0x4308>
   15838:	ldr	r5, [r4]
   1583c:	ldr	r0, [r4, #4]
   15840:	cmp	r5, r0
   15844:	bcc	1585c <__assert_fail@plt+0x436c>
   15848:	b	15880 <__assert_fail@plt+0x4390>
   1584c:	ldr	r0, [r4, #4]
   15850:	add	r5, r5, #8
   15854:	cmp	r5, r0
   15858:	bcs	15880 <__assert_fail@plt+0x4390>
   1585c:	ldr	r0, [r5, #4]
   15860:	cmp	r0, #0
   15864:	beq	1584c <__assert_fail@plt+0x435c>
   15868:	ldr	r6, [r0, #4]
   1586c:	bl	12f14 <__assert_fail@plt+0x1a24>
   15870:	cmp	r6, #0
   15874:	mov	r0, r6
   15878:	bne	15868 <__assert_fail@plt+0x4378>
   1587c:	b	1584c <__assert_fail@plt+0x435c>
   15880:	ldr	r0, [r4, #36]	; 0x24
   15884:	cmp	r0, #0
   15888:	beq	158a0 <__assert_fail@plt+0x43b0>
   1588c:	ldr	r5, [r0, #4]
   15890:	bl	12f14 <__assert_fail@plt+0x1a24>
   15894:	cmp	r5, #0
   15898:	mov	r0, r5
   1589c:	bne	1588c <__assert_fail@plt+0x439c>
   158a0:	ldr	r0, [r4]
   158a4:	bl	12f14 <__assert_fail@plt+0x1a24>
   158a8:	mov	r0, r4
   158ac:	pop	{r4, r5, r6, sl, fp, lr}
   158b0:	b	12f14 <__assert_fail@plt+0x1a24>
   158b4:	push	{r4, r5, r6, sl, fp, lr}
   158b8:	add	fp, sp, #16
   158bc:	sub	sp, sp, #40	; 0x28
   158c0:	mov	r2, r1
   158c4:	mov	r4, r0
   158c8:	ldr	r1, [r0, #20]
   158cc:	mov	r0, r2
   158d0:	bl	156a0 <__assert_fail@plt+0x41b0>
   158d4:	mov	r5, #0
   158d8:	cmp	r0, #0
   158dc:	beq	159b8 <__assert_fail@plt+0x44c8>
   158e0:	mov	r6, r0
   158e4:	ldr	r0, [r4, #8]
   158e8:	cmp	r6, r0
   158ec:	bne	158f8 <__assert_fail@plt+0x4408>
   158f0:	mov	r5, #1
   158f4:	b	159b8 <__assert_fail@plt+0x44c8>
   158f8:	mov	r0, r6
   158fc:	mov	r1, #8
   15900:	bl	18c3c <__assert_fail@plt+0x774c>
   15904:	str	r0, [sp]
   15908:	cmp	r0, #0
   1590c:	beq	159b8 <__assert_fail@plt+0x44c8>
   15910:	mov	r0, #0
   15914:	str	r0, [sp, #16]
   15918:	str	r0, [sp, #12]
   1591c:	str	r6, [sp, #8]
   15920:	ldr	r0, [sp]
   15924:	add	r0, r0, r6, lsl #3
   15928:	str	r0, [sp, #4]
   1592c:	add	r6, r4, #20
   15930:	ldm	r6, {r0, r1, r2, r3, r6}
   15934:	add	ip, sp, #20
   15938:	stm	ip, {r0, r1, r2, r3, r6}
   1593c:	mov	r0, sp
   15940:	mov	r1, r4
   15944:	mov	r2, #0
   15948:	bl	159c8 <__assert_fail@plt+0x44d8>
   1594c:	cmp	r0, #0
   15950:	beq	15974 <__assert_fail@plt+0x4484>
   15954:	ldr	r0, [r4]
   15958:	bl	12f14 <__assert_fail@plt+0x1a24>
   1595c:	ldm	sp, {r0, r1, r2, r3}
   15960:	stm	r4, {r0, r1, r2, r3}
   15964:	ldr	r0, [sp, #36]	; 0x24
   15968:	str	r0, [r4, #36]	; 0x24
   1596c:	mov	r5, #1
   15970:	b	159b8 <__assert_fail@plt+0x44c8>
   15974:	ldr	r0, [sp, #36]	; 0x24
   15978:	str	r0, [r4, #36]	; 0x24
   1597c:	mov	r1, sp
   15980:	mov	r0, r4
   15984:	mov	r2, #1
   15988:	bl	159c8 <__assert_fail@plt+0x44d8>
   1598c:	cmp	r0, #0
   15990:	beq	159c4 <__assert_fail@plt+0x44d4>
   15994:	mov	r1, sp
   15998:	mov	r5, #0
   1599c:	mov	r0, r4
   159a0:	mov	r2, #0
   159a4:	bl	159c8 <__assert_fail@plt+0x44d8>
   159a8:	cmp	r0, #0
   159ac:	beq	159c4 <__assert_fail@plt+0x44d4>
   159b0:	ldr	r0, [sp]
   159b4:	bl	12f14 <__assert_fail@plt+0x1a24>
   159b8:	mov	r0, r5
   159bc:	sub	sp, fp, #16
   159c0:	pop	{r4, r5, r6, sl, fp, pc}
   159c4:	bl	114a8 <abort@plt>
   159c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159cc:	add	fp, sp, #28
   159d0:	sub	sp, sp, #4
   159d4:	mov	r7, r0
   159d8:	ldr	r6, [r1]
   159dc:	ldr	r0, [r1, #4]
   159e0:	cmp	r6, r0
   159e4:	bcs	15af0 <__assert_fail@plt+0x4600>
   159e8:	mov	r9, r2
   159ec:	mov	sl, r1
   159f0:	b	15a28 <__assert_fail@plt+0x4538>
   159f4:	str	r4, [r5]
   159f8:	ldr	r0, [r7, #12]
   159fc:	add	r0, r0, #1
   15a00:	str	r0, [r7, #12]
   15a04:	mov	r0, #0
   15a08:	str	r0, [r6]
   15a0c:	ldr	r0, [sl, #12]
   15a10:	sub	r0, r0, #1
   15a14:	str	r0, [sl, #12]
   15a18:	add	r6, r6, #8
   15a1c:	ldr	r0, [sl, #4]
   15a20:	cmp	r6, r0
   15a24:	bcs	15af0 <__assert_fail@plt+0x4600>
   15a28:	ldr	r0, [r6]
   15a2c:	cmp	r0, #0
   15a30:	beq	15a18 <__assert_fail@plt+0x4528>
   15a34:	ldr	r4, [r6, #4]
   15a38:	cmp	r4, #0
   15a3c:	bne	15a6c <__assert_fail@plt+0x457c>
   15a40:	b	15a9c <__assert_fail@plt+0x45ac>
   15a44:	str	r5, [r0]
   15a48:	ldr	r0, [r7, #12]
   15a4c:	add	r0, r0, #1
   15a50:	str	r0, [r7, #12]
   15a54:	mov	r0, r7
   15a58:	mov	r1, r4
   15a5c:	bl	15f74 <__assert_fail@plt+0x4a84>
   15a60:	cmp	r8, #0
   15a64:	mov	r4, r8
   15a68:	beq	15a9c <__assert_fail@plt+0x45ac>
   15a6c:	ldr	r5, [r4]
   15a70:	mov	r0, r7
   15a74:	mov	r1, r5
   15a78:	bl	152a8 <__assert_fail@plt+0x3db8>
   15a7c:	ldr	r1, [r0]
   15a80:	ldr	r8, [r4, #4]
   15a84:	cmp	r1, #0
   15a88:	beq	15a44 <__assert_fail@plt+0x4554>
   15a8c:	ldr	r1, [r0, #4]
   15a90:	str	r1, [r4, #4]
   15a94:	str	r4, [r0, #4]
   15a98:	b	15a60 <__assert_fail@plt+0x4570>
   15a9c:	mov	r0, #0
   15aa0:	str	r0, [r6, #4]
   15aa4:	cmp	r9, #0
   15aa8:	bne	15a18 <__assert_fail@plt+0x4528>
   15aac:	ldr	r4, [r6]
   15ab0:	mov	r0, r7
   15ab4:	mov	r1, r4
   15ab8:	bl	152a8 <__assert_fail@plt+0x3db8>
   15abc:	mov	r5, r0
   15ac0:	ldr	r0, [r0]
   15ac4:	cmp	r0, #0
   15ac8:	beq	159f4 <__assert_fail@plt+0x4504>
   15acc:	mov	r0, r7
   15ad0:	bl	15d60 <__assert_fail@plt+0x4870>
   15ad4:	cmp	r0, #0
   15ad8:	beq	15afc <__assert_fail@plt+0x460c>
   15adc:	str	r4, [r0]
   15ae0:	ldr	r1, [r5, #4]
   15ae4:	str	r1, [r0, #4]
   15ae8:	str	r0, [r5, #4]
   15aec:	b	15a04 <__assert_fail@plt+0x4514>
   15af0:	mov	r0, #1
   15af4:	sub	sp, fp, #28
   15af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15afc:	mov	r0, #0
   15b00:	sub	sp, fp, #28
   15b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b08:	push	{r4, r5, r6, r7, fp, lr}
   15b0c:	add	fp, sp, #16
   15b10:	sub	sp, sp, #8
   15b14:	cmp	r1, #0
   15b18:	beq	15c78 <__assert_fail@plt+0x4788>
   15b1c:	mov	r7, r2
   15b20:	mov	r5, r1
   15b24:	mov	r4, r0
   15b28:	add	r2, sp, #4
   15b2c:	mov	r6, #0
   15b30:	mov	r3, #0
   15b34:	bl	15c80 <__assert_fail@plt+0x4790>
   15b38:	cmp	r0, #0
   15b3c:	beq	15b4c <__assert_fail@plt+0x465c>
   15b40:	cmp	r7, #0
   15b44:	strne	r0, [r7]
   15b48:	b	15c6c <__assert_fail@plt+0x477c>
   15b4c:	vldr	s0, [r4, #8]
   15b50:	vldr	s2, [r4, #12]
   15b54:	ldr	r0, [r4, #20]
   15b58:	vldr	s4, [r0, #8]
   15b5c:	vcvt.f32.u32	s0, s0
   15b60:	vcvt.f32.u32	s2, s2
   15b64:	vmul.f32	s0, s4, s0
   15b68:	vcmpe.f32	s0, s2
   15b6c:	vmrs	APSR_nzcv, fpscr
   15b70:	bpl	15c04 <__assert_fail@plt+0x4714>
   15b74:	mov	r0, r4
   15b78:	bl	155f4 <__assert_fail@plt+0x4104>
   15b7c:	vldr	s0, [r4, #8]
   15b80:	vldr	s4, [r4, #12]
   15b84:	ldr	r0, [r4, #20]
   15b88:	vcvt.f32.u32	s2, s0
   15b8c:	vldr	s0, [r0, #8]
   15b90:	vcvt.f32.u32	s4, s4
   15b94:	vmul.f32	s6, s0, s2
   15b98:	vcmpe.f32	s6, s4
   15b9c:	vmrs	APSR_nzcv, fpscr
   15ba0:	bpl	15c04 <__assert_fail@plt+0x4714>
   15ba4:	vldr	s4, [r0, #12]
   15ba8:	vmul.f32	s2, s4, s2
   15bac:	ldrb	r0, [r0, #16]
   15bb0:	vmul.f32	s0, s0, s2
   15bb4:	mvn	r6, #0
   15bb8:	vldr	s4, [pc, #188]	; 15c7c <__assert_fail@plt+0x478c>
   15bbc:	cmp	r0, #0
   15bc0:	vseleq.f32	s0, s0, s2
   15bc4:	vcmpe.f32	s0, s4
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	bge	15c6c <__assert_fail@plt+0x477c>
   15bd0:	vcvt.u32.f32	s0, s0
   15bd4:	vmov	r1, s0
   15bd8:	mov	r0, r4
   15bdc:	bl	158b4 <__assert_fail@plt+0x43c4>
   15be0:	cmp	r0, #0
   15be4:	beq	15c6c <__assert_fail@plt+0x477c>
   15be8:	add	r2, sp, #4
   15bec:	mov	r0, r4
   15bf0:	mov	r1, r5
   15bf4:	mov	r3, #0
   15bf8:	bl	15c80 <__assert_fail@plt+0x4790>
   15bfc:	cmp	r0, #0
   15c00:	bne	15c78 <__assert_fail@plt+0x4788>
   15c04:	ldr	r6, [sp, #4]
   15c08:	ldr	r0, [r6]
   15c0c:	cmp	r0, #0
   15c10:	beq	15c44 <__assert_fail@plt+0x4754>
   15c14:	mov	r0, r4
   15c18:	bl	15d60 <__assert_fail@plt+0x4870>
   15c1c:	cmp	r0, #0
   15c20:	beq	15c68 <__assert_fail@plt+0x4778>
   15c24:	str	r5, [r0]
   15c28:	ldr	r1, [r6, #4]
   15c2c:	str	r1, [r0, #4]
   15c30:	str	r0, [r6, #4]
   15c34:	ldr	r0, [r4, #16]
   15c38:	add	r0, r0, #1
   15c3c:	str	r0, [r4, #16]
   15c40:	b	15c60 <__assert_fail@plt+0x4770>
   15c44:	str	r5, [r6]
   15c48:	ldr	r0, [r4, #12]
   15c4c:	ldr	r1, [r4, #16]
   15c50:	add	r1, r1, #1
   15c54:	add	r0, r0, #1
   15c58:	str	r0, [r4, #12]
   15c5c:	str	r1, [r4, #16]
   15c60:	mov	r6, #1
   15c64:	b	15c6c <__assert_fail@plt+0x477c>
   15c68:	mvn	r6, #0
   15c6c:	mov	r0, r6
   15c70:	sub	sp, fp, #16
   15c74:	pop	{r4, r5, r6, r7, fp, pc}
   15c78:	bl	114a8 <abort@plt>
   15c7c:	svcmi	0x00800000
   15c80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c84:	add	fp, sp, #24
   15c88:	mov	r8, r3
   15c8c:	mov	r4, r2
   15c90:	mov	r7, r1
   15c94:	mov	r5, r0
   15c98:	bl	152a8 <__assert_fail@plt+0x3db8>
   15c9c:	str	r0, [r4]
   15ca0:	ldr	r1, [r0]
   15ca4:	mov	r4, #0
   15ca8:	cmp	r1, #0
   15cac:	beq	15d58 <__assert_fail@plt+0x4868>
   15cb0:	mov	r6, r0
   15cb4:	cmp	r1, r7
   15cb8:	beq	15cd0 <__assert_fail@plt+0x47e0>
   15cbc:	ldr	r2, [r5, #28]
   15cc0:	mov	r0, r7
   15cc4:	blx	r2
   15cc8:	cmp	r0, #0
   15ccc:	beq	15cf4 <__assert_fail@plt+0x4804>
   15cd0:	ldr	r4, [r6]
   15cd4:	cmp	r8, #0
   15cd8:	beq	15d58 <__assert_fail@plt+0x4868>
   15cdc:	ldr	r1, [r6, #4]
   15ce0:	cmp	r1, #0
   15ce4:	beq	15d50 <__assert_fail@plt+0x4860>
   15ce8:	ldm	r1, {r0, r2}
   15cec:	stm	r6, {r0, r2}
   15cf0:	b	15d40 <__assert_fail@plt+0x4850>
   15cf4:	ldr	r0, [r6, #4]!
   15cf8:	cmp	r0, #0
   15cfc:	beq	15d58 <__assert_fail@plt+0x4868>
   15d00:	ldr	r1, [r0]
   15d04:	cmp	r1, r7
   15d08:	beq	15d28 <__assert_fail@plt+0x4838>
   15d0c:	ldr	r2, [r5, #28]
   15d10:	mov	r0, r7
   15d14:	blx	r2
   15d18:	cmp	r0, #0
   15d1c:	bne	15d28 <__assert_fail@plt+0x4838>
   15d20:	ldr	r6, [r6]
   15d24:	b	15cf4 <__assert_fail@plt+0x4804>
   15d28:	ldr	r1, [r6]
   15d2c:	ldr	r4, [r1]
   15d30:	cmp	r8, #0
   15d34:	beq	15d58 <__assert_fail@plt+0x4868>
   15d38:	ldr	r0, [r1, #4]
   15d3c:	str	r0, [r6]
   15d40:	mov	r0, r5
   15d44:	bl	15f74 <__assert_fail@plt+0x4a84>
   15d48:	mov	r0, r4
   15d4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d50:	mov	r0, #0
   15d54:	str	r0, [r6]
   15d58:	mov	r0, r4
   15d5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d60:	mov	r1, r0
   15d64:	ldr	r0, [r0, #36]	; 0x24
   15d68:	cmp	r0, #0
   15d6c:	ldrne	r2, [r0, #4]
   15d70:	strne	r2, [r1, #36]	; 0x24
   15d74:	bxne	lr
   15d78:	mov	r0, #8
   15d7c:	b	18c90 <__assert_fail@plt+0x77a0>
   15d80:	push	{r4, sl, fp, lr}
   15d84:	add	fp, sp, #8
   15d88:	sub	sp, sp, #8
   15d8c:	mov	r4, r1
   15d90:	add	r2, sp, #4
   15d94:	bl	15b08 <__assert_fail@plt+0x4618>
   15d98:	cmn	r0, #1
   15d9c:	beq	15db0 <__assert_fail@plt+0x48c0>
   15da0:	ldr	r1, [sp, #4]
   15da4:	cmp	r0, #0
   15da8:	moveq	r4, r1
   15dac:	b	15db4 <__assert_fail@plt+0x48c4>
   15db0:	mov	r4, #0
   15db4:	mov	r0, r4
   15db8:	sub	sp, fp, #8
   15dbc:	pop	{r4, sl, fp, pc}
   15dc0:	push	{r4, r5, r6, sl, fp, lr}
   15dc4:	add	fp, sp, #16
   15dc8:	sub	sp, sp, #8
   15dcc:	mov	r4, r0
   15dd0:	add	r2, sp, #4
   15dd4:	mov	r3, #1
   15dd8:	bl	15c80 <__assert_fail@plt+0x4790>
   15ddc:	mov	r5, r0
   15de0:	cmp	r0, #0
   15de4:	beq	15ec4 <__assert_fail@plt+0x49d4>
   15de8:	ldr	r0, [r4, #16]
   15dec:	sub	r0, r0, #1
   15df0:	str	r0, [r4, #16]
   15df4:	ldr	r0, [sp, #4]
   15df8:	ldr	r0, [r0]
   15dfc:	cmp	r0, #0
   15e00:	bne	15ec4 <__assert_fail@plt+0x49d4>
   15e04:	ldr	r0, [r4, #12]
   15e08:	sub	r0, r0, #1
   15e0c:	vldr	s0, [r4, #8]
   15e10:	str	r0, [r4, #12]
   15e14:	ldr	r1, [r4, #20]
   15e18:	vldr	s2, [r1]
   15e1c:	vcvt.f32.u32	s0, s0
   15e20:	vmov	s4, r0
   15e24:	vcvt.f32.u32	s4, s4
   15e28:	vmul.f32	s0, s2, s0
   15e2c:	vcmpe.f32	s0, s4
   15e30:	vmrs	APSR_nzcv, fpscr
   15e34:	ble	15ec4 <__assert_fail@plt+0x49d4>
   15e38:	mov	r0, r4
   15e3c:	bl	155f4 <__assert_fail@plt+0x4104>
   15e40:	vldr	s0, [r4, #8]
   15e44:	vldr	s2, [r4, #12]
   15e48:	ldr	r0, [r4, #20]
   15e4c:	vcvt.f32.u32	s0, s0
   15e50:	vldr	s4, [r0]
   15e54:	vcvt.f32.u32	s2, s2
   15e58:	vmul.f32	s4, s4, s0
   15e5c:	vcmpe.f32	s4, s2
   15e60:	vmrs	APSR_nzcv, fpscr
   15e64:	ble	15ec4 <__assert_fail@plt+0x49d4>
   15e68:	vldr	s2, [r0, #4]
   15e6c:	ldrb	r1, [r0, #16]
   15e70:	vmul.f32	s0, s2, s0
   15e74:	cmp	r1, #0
   15e78:	bne	15e84 <__assert_fail@plt+0x4994>
   15e7c:	vldr	s2, [r0, #8]
   15e80:	vmul.f32	s0, s0, s2
   15e84:	vcvt.u32.f32	s0, s0
   15e88:	vmov	r1, s0
   15e8c:	mov	r0, r4
   15e90:	bl	158b4 <__assert_fail@plt+0x43c4>
   15e94:	cmp	r0, #0
   15e98:	bne	15ec4 <__assert_fail@plt+0x49d4>
   15e9c:	ldr	r0, [r4, #36]	; 0x24
   15ea0:	cmp	r0, #0
   15ea4:	beq	15ebc <__assert_fail@plt+0x49cc>
   15ea8:	ldr	r6, [r0, #4]
   15eac:	bl	12f14 <__assert_fail@plt+0x1a24>
   15eb0:	cmp	r6, #0
   15eb4:	mov	r0, r6
   15eb8:	bne	15ea8 <__assert_fail@plt+0x49b8>
   15ebc:	mov	r0, #0
   15ec0:	str	r0, [r4, #36]	; 0x24
   15ec4:	mov	r0, r5
   15ec8:	sub	sp, fp, #16
   15ecc:	pop	{r4, r5, r6, sl, fp, pc}
   15ed0:	b	15dc0 <__assert_fail@plt+0x48d0>
   15ed4:	push	{r4, r5, fp, lr}
   15ed8:	add	fp, sp, #8
   15edc:	cmp	r0, #10
   15ee0:	movls	r0, #10
   15ee4:	orr	r5, r0, #1
   15ee8:	mvn	r4, #0
   15eec:	cmn	r5, #1
   15ef0:	beq	15f10 <__assert_fail@plt+0x4a20>
   15ef4:	mov	r0, r5
   15ef8:	bl	15f24 <__assert_fail@plt+0x4a34>
   15efc:	cmp	r0, #0
   15f00:	bne	15f18 <__assert_fail@plt+0x4a28>
   15f04:	add	r5, r5, #2
   15f08:	cmn	r5, #1
   15f0c:	bne	15ef4 <__assert_fail@plt+0x4a04>
   15f10:	mov	r0, r4
   15f14:	pop	{r4, r5, fp, pc}
   15f18:	mov	r4, r5
   15f1c:	mov	r0, r4
   15f20:	pop	{r4, r5, fp, pc}
   15f24:	mov	ip, #3
   15f28:	cmp	r0, #10
   15f2c:	bcc	15f60 <__assert_fail@plt+0x4a70>
   15f30:	mov	ip, #3
   15f34:	mov	r2, #9
   15f38:	mov	r3, #16
   15f3c:	udiv	r1, r0, ip
   15f40:	mls	r1, r1, ip, r0
   15f44:	cmp	r1, #0
   15f48:	beq	15f60 <__assert_fail@plt+0x4a70>
   15f4c:	add	r2, r3, r2
   15f50:	add	r3, r3, #8
   15f54:	add	ip, ip, #2
   15f58:	cmp	r2, r0
   15f5c:	bcc	15f3c <__assert_fail@plt+0x4a4c>
   15f60:	udiv	r1, r0, ip
   15f64:	mls	r0, r1, ip, r0
   15f68:	cmp	r0, #0
   15f6c:	movwne	r0, #1
   15f70:	bx	lr
   15f74:	mov	r2, #0
   15f78:	str	r2, [r1]
   15f7c:	ldr	r2, [r0, #36]	; 0x24
   15f80:	str	r2, [r1, #4]
   15f84:	str	r1, [r0, #36]	; 0x24
   15f88:	bx	lr
   15f8c:	mov	r2, #0
   15f90:	str	r2, [r0, #20]
   15f94:	str	r2, [r0, #24]
   15f98:	mov	r3, #1
   15f9c:	strb	r3, [r0, #28]
   15fa0:	str	r1, [r0, r2, lsl #2]
   15fa4:	add	r2, r2, #1
   15fa8:	cmp	r2, #4
   15fac:	bne	15fa0 <__assert_fail@plt+0x4ab0>
   15fb0:	str	r1, [r0, #16]
   15fb4:	bx	lr
   15fb8:	ldrb	r0, [r0, #28]
   15fbc:	bx	lr
   15fc0:	ldr	r2, [r0, #20]
   15fc4:	ldrb	r3, [r0, #28]
   15fc8:	eor	r3, r3, #1
   15fcc:	add	r2, r2, r3
   15fd0:	and	r2, r2, #3
   15fd4:	ldr	ip, [r0, r2, lsl #2]
   15fd8:	str	r1, [r0, r2, lsl #2]
   15fdc:	str	r2, [r0, #20]
   15fe0:	ldr	r1, [r0, #24]
   15fe4:	cmp	r2, r1
   15fe8:	addeq	r1, r1, r3
   15fec:	andeq	r1, r1, #3
   15ff0:	streq	r1, [r0, #24]
   15ff4:	mov	r1, #0
   15ff8:	strb	r1, [r0, #28]
   15ffc:	mov	r0, ip
   16000:	bx	lr
   16004:	push	{r4, sl, fp, lr}
   16008:	add	fp, sp, #8
   1600c:	mov	r4, r0
   16010:	bl	15fb8 <__assert_fail@plt+0x4ac8>
   16014:	cmp	r0, #0
   16018:	bne	16050 <__assert_fail@plt+0x4b60>
   1601c:	ldr	r1, [r4, #16]
   16020:	ldr	r2, [r4, #20]
   16024:	ldr	r0, [r4, r2, lsl #2]
   16028:	str	r1, [r4, r2, lsl #2]
   1602c:	ldr	r1, [r4, #20]
   16030:	ldr	r2, [r4, #24]
   16034:	cmp	r1, r2
   16038:	moveq	r1, #1
   1603c:	strbeq	r1, [r4, #28]
   16040:	subne	r1, r1, #1
   16044:	andne	r1, r1, #3
   16048:	strne	r1, [r4, #20]
   1604c:	pop	{r4, sl, fp, pc}
   16050:	bl	114a8 <abort@plt>
   16054:	push	{r4, r5, r6, sl, fp, lr}
   16058:	add	fp, sp, #16
   1605c:	mov	r4, r1
   16060:	mov	r5, r0
   16064:	mov	r0, #0
   16068:	strb	r0, [r2, #20]
   1606c:	add	r6, r2, #19
   16070:	mov	r0, r5
   16074:	mov	r1, r4
   16078:	mov	r2, #10
   1607c:	mov	r3, #0
   16080:	bl	1992c <__assert_fail@plt+0x843c>
   16084:	add	r2, r0, r0, lsl #2
   16088:	sub	r2, r5, r2, lsl #1
   1608c:	orr	r2, r2, #48	; 0x30
   16090:	strb	r2, [r6], #-1
   16094:	rsbs	r2, r5, #9
   16098:	rscs	r2, r4, #0
   1609c:	mov	r5, r0
   160a0:	mov	r4, r1
   160a4:	bcc	16070 <__assert_fail@plt+0x4b80>
   160a8:	add	r0, r6, #1
   160ac:	pop	{r4, r5, r6, sl, fp, pc}
   160b0:	sub	sp, sp, #4
   160b4:	push	{fp, lr}
   160b8:	mov	fp, sp
   160bc:	sub	sp, sp, #4
   160c0:	str	r3, [fp, #8]
   160c4:	mov	r3, #0
   160c8:	tst	r2, #64	; 0x40
   160cc:	ldrne	r3, [fp, #8]
   160d0:	bl	11388 <openat64@plt>
   160d4:	bl	17da8 <__assert_fail@plt+0x68b8>
   160d8:	mov	sp, fp
   160dc:	pop	{fp, lr}
   160e0:	add	sp, sp, #4
   160e4:	bx	lr
   160e8:	push	{r4, r5, r6, sl, fp, lr}
   160ec:	add	fp, sp, #16
   160f0:	mov	r4, r3
   160f4:	orr	r2, r2, #18688	; 0x4900
   160f8:	orr	r2, r2, #524288	; 0x80000
   160fc:	bl	160b0 <__assert_fail@plt+0x4bc0>
   16100:	mov	r5, r0
   16104:	mov	r0, #0
   16108:	cmp	r5, #0
   1610c:	bmi	16144 <__assert_fail@plt+0x4c54>
   16110:	mov	r0, r5
   16114:	bl	11448 <fdopendir@plt>
   16118:	cmp	r0, #0
   1611c:	beq	16128 <__assert_fail@plt+0x4c38>
   16120:	str	r5, [r4]
   16124:	pop	{r4, r5, r6, sl, fp, pc}
   16128:	bl	113a0 <__errno_location@plt>
   1612c:	mov	r4, r0
   16130:	ldr	r6, [r0]
   16134:	mov	r0, r5
   16138:	bl	114b4 <close@plt>
   1613c:	str	r6, [r4]
   16140:	mov	r0, #0
   16144:	pop	{r4, r5, r6, sl, fp, pc}
   16148:	push	{r4, r5, fp, lr}
   1614c:	add	fp, sp, #8
   16150:	cmp	r0, #0
   16154:	beq	161e8 <__assert_fail@plt+0x4cf8>
   16158:	mov	r4, r0
   1615c:	mov	r1, #47	; 0x2f
   16160:	bl	11424 <strrchr@plt>
   16164:	cmp	r0, #0
   16168:	mov	r5, r4
   1616c:	addne	r5, r0, #1
   16170:	sub	r0, r5, r4
   16174:	cmp	r0, #7
   16178:	blt	161cc <__assert_fail@plt+0x4cdc>
   1617c:	sub	r0, r5, #7
   16180:	movw	r1, #43676	; 0xaa9c
   16184:	movt	r1, #1
   16188:	mov	r2, #7
   1618c:	bl	1149c <strncmp@plt>
   16190:	cmp	r0, #0
   16194:	bne	161cc <__assert_fail@plt+0x4cdc>
   16198:	movw	r1, #43684	; 0xaaa4
   1619c:	movt	r1, #1
   161a0:	mov	r0, r5
   161a4:	mov	r2, #3
   161a8:	bl	1149c <strncmp@plt>
   161ac:	cmp	r0, #0
   161b0:	beq	161bc <__assert_fail@plt+0x4ccc>
   161b4:	mov	r4, r5
   161b8:	b	161cc <__assert_fail@plt+0x4cdc>
   161bc:	add	r4, r5, #3
   161c0:	movw	r0, #49528	; 0xc178
   161c4:	movt	r0, #2
   161c8:	str	r4, [r0]
   161cc:	movw	r0, #49532	; 0xc17c
   161d0:	movt	r0, #2
   161d4:	str	r4, [r0]
   161d8:	movw	r0, #49592	; 0xc1b8
   161dc:	movt	r0, #2
   161e0:	str	r4, [r0]
   161e4:	pop	{r4, r5, fp, pc}
   161e8:	movw	r0, #49544	; 0xc188
   161ec:	movt	r0, #2
   161f0:	ldr	r3, [r0]
   161f4:	movw	r0, #43620	; 0xaa64
   161f8:	movt	r0, #1
   161fc:	mov	r1, #55	; 0x37
   16200:	mov	r2, #1
   16204:	bl	112b0 <fwrite@plt>
   16208:	bl	114a8 <abort@plt>
   1620c:	push	{r4, r5, r6, sl, fp, lr}
   16210:	add	fp, sp, #16
   16214:	mov	r4, r0
   16218:	movw	r0, #49600	; 0xc1c0
   1621c:	movt	r0, #2
   16220:	cmp	r4, #0
   16224:	moveq	r4, r0
   16228:	bl	113a0 <__errno_location@plt>
   1622c:	mov	r5, r0
   16230:	ldr	r6, [r0]
   16234:	mov	r0, r4
   16238:	mov	r1, #48	; 0x30
   1623c:	bl	185a0 <__assert_fail@plt+0x70b0>
   16240:	str	r6, [r5]
   16244:	pop	{r4, r5, r6, sl, fp, pc}
   16248:	movw	r1, #49600	; 0xc1c0
   1624c:	movt	r1, #2
   16250:	cmp	r0, #0
   16254:	movne	r1, r0
   16258:	ldr	r0, [r1]
   1625c:	bx	lr
   16260:	movw	r2, #49600	; 0xc1c0
   16264:	movt	r2, #2
   16268:	cmp	r0, #0
   1626c:	movne	r2, r0
   16270:	str	r1, [r2]
   16274:	bx	lr
   16278:	movw	r3, #49600	; 0xc1c0
   1627c:	movt	r3, #2
   16280:	cmp	r0, #0
   16284:	movne	r3, r0
   16288:	ubfx	r0, r1, #5, #3
   1628c:	add	ip, r3, r0, lsl #2
   16290:	ldr	r3, [ip, #8]
   16294:	and	r1, r1, #31
   16298:	mov	r0, #1
   1629c:	and	r0, r0, r3, lsr r1
   162a0:	and	r2, r2, #1
   162a4:	eor	r2, r0, r2
   162a8:	eor	r1, r3, r2, lsl r1
   162ac:	str	r1, [ip, #8]
   162b0:	bx	lr
   162b4:	movw	r2, #49600	; 0xc1c0
   162b8:	movt	r2, #2
   162bc:	cmp	r0, #0
   162c0:	movne	r2, r0
   162c4:	ldr	r0, [r2, #4]
   162c8:	str	r1, [r2, #4]
   162cc:	bx	lr
   162d0:	push	{fp, lr}
   162d4:	mov	fp, sp
   162d8:	movw	r3, #49600	; 0xc1c0
   162dc:	movt	r3, #2
   162e0:	cmp	r0, #0
   162e4:	movne	r3, r0
   162e8:	mov	r0, #10
   162ec:	str	r0, [r3]
   162f0:	cmp	r1, #0
   162f4:	cmpne	r2, #0
   162f8:	bne	16300 <__assert_fail@plt+0x4e10>
   162fc:	bl	114a8 <abort@plt>
   16300:	str	r1, [r3, #40]	; 0x28
   16304:	str	r2, [r3, #44]	; 0x2c
   16308:	pop	{fp, pc}
   1630c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16310:	add	fp, sp, #28
   16314:	sub	sp, sp, #20
   16318:	mov	r8, r3
   1631c:	mov	r9, r2
   16320:	mov	sl, r1
   16324:	mov	r7, r0
   16328:	ldr	r0, [fp, #8]
   1632c:	movw	r5, #49600	; 0xc1c0
   16330:	movt	r5, #2
   16334:	cmp	r0, #0
   16338:	movne	r5, r0
   1633c:	bl	113a0 <__errno_location@plt>
   16340:	mov	r4, r0
   16344:	ldm	r5, {r0, r1}
   16348:	ldr	r2, [r5, #40]	; 0x28
   1634c:	ldr	r3, [r5, #44]	; 0x2c
   16350:	ldr	r6, [r4]
   16354:	add	r5, r5, #8
   16358:	stm	sp, {r0, r1, r5}
   1635c:	str	r2, [sp, #12]
   16360:	str	r3, [sp, #16]
   16364:	mov	r0, r7
   16368:	mov	r1, sl
   1636c:	mov	r2, r9
   16370:	mov	r3, r8
   16374:	bl	16384 <__assert_fail@plt+0x4e94>
   16378:	str	r6, [r4]
   1637c:	sub	sp, fp, #28
   16380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16388:	add	fp, sp, #28
   1638c:	sub	sp, sp, #156	; 0x9c
   16390:	mov	r9, r3
   16394:	mov	r7, r1
   16398:	mov	r6, r0
   1639c:	str	r2, [fp, #-80]	; 0xffffffb0
   163a0:	add	r0, r2, #1
   163a4:	str	r0, [sp, #76]	; 0x4c
   163a8:	ldr	r0, [fp, #12]
   163ac:	and	r1, r0, #1
   163b0:	str	r1, [sp, #40]	; 0x28
   163b4:	and	r1, r0, #4
   163b8:	str	r1, [sp, #36]	; 0x24
   163bc:	ubfx	r4, r0, #1, #1
   163c0:	bl	112c8 <__ctype_get_mb_cur_max@plt>
   163c4:	str	r0, [sp, #44]	; 0x2c
   163c8:	ldr	r0, [fp, #24]
   163cc:	str	r0, [sp, #88]	; 0x58
   163d0:	ldr	r0, [fp, #20]
   163d4:	str	r0, [sp, #80]	; 0x50
   163d8:	ldr	r1, [fp, #8]
   163dc:	mov	r0, #0
   163e0:	str	r0, [sp, #84]	; 0x54
   163e4:	mov	r0, #0
   163e8:	str	r0, [fp, #-84]	; 0xffffffac
   163ec:	mov	r0, #0
   163f0:	str	r0, [fp, #-72]	; 0xffffffb8
   163f4:	mov	r0, #0
   163f8:	mov	r2, #0
   163fc:	str	r2, [fp, #-56]	; 0xffffffc8
   16400:	mov	r2, #0
   16404:	str	r2, [sp, #64]	; 0x40
   16408:	mov	r2, #1
   1640c:	str	r2, [fp, #-48]	; 0xffffffd0
   16410:	cmp	r1, #10
   16414:	bhi	17340 <__assert_fail@plt+0x5e50>
   16418:	mov	sl, r7
   1641c:	mov	r7, r1
   16420:	add	r1, pc, #24
   16424:	mov	r8, #0
   16428:	mov	r2, #1
   1642c:	mov	r3, #0
   16430:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16434:	mov	lr, r9
   16438:	mov	r5, r6
   1643c:	ldr	pc, [r1, r7, lsl #2]
   16440:	andeq	r6, r1, r4, lsl r5
   16444:	andeq	r6, r1, r4, asr r5
   16448:	andeq	r6, r1, r4, lsr #10
   1644c:	andeq	r6, r1, ip, lsl #10
   16450:	andeq	r6, r1, r8, asr #10
   16454:	andeq	r6, r1, r8, lsr #11
   16458:	andeq	r6, r1, r4, lsr r5
   1645c:	andeq	r6, r1, r4, lsl #12
   16460:	andeq	r6, r1, ip, ror #8
   16464:	andeq	r6, r1, ip, ror #8
   16468:	muleq	r1, r8, r4
   1646c:	movw	r0, #43766	; 0xaaf6
   16470:	movt	r0, #1
   16474:	mov	r1, r7
   16478:	bl	17948 <__assert_fail@plt+0x6458>
   1647c:	str	r0, [sp, #80]	; 0x50
   16480:	movw	r0, #43768	; 0xaaf8
   16484:	movt	r0, #1
   16488:	mov	r1, r7
   1648c:	bl	17948 <__assert_fail@plt+0x6458>
   16490:	mov	r5, r6
   16494:	str	r0, [sp, #88]	; 0x58
   16498:	mov	r8, #0
   1649c:	tst	r4, #1
   164a0:	str	r7, [fp, #-64]	; 0xffffffc0
   164a4:	bne	164dc <__assert_fail@plt+0x4fec>
   164a8:	ldr	r0, [sp, #80]	; 0x50
   164ac:	ldrb	r0, [r0]
   164b0:	cmp	r0, #0
   164b4:	beq	164dc <__assert_fail@plt+0x4fec>
   164b8:	ldr	r1, [sp, #80]	; 0x50
   164bc:	add	r1, r1, #1
   164c0:	mov	r8, #0
   164c4:	cmp	r8, sl
   164c8:	strbcc	r0, [r5, r8]
   164cc:	ldrb	r0, [r1, r8]
   164d0:	add	r8, r8, #1
   164d4:	cmp	r0, #0
   164d8:	bne	164c4 <__assert_fail@plt+0x4fd4>
   164dc:	ldr	r7, [sp, #88]	; 0x58
   164e0:	mov	r0, r7
   164e4:	bl	11370 <strlen@plt>
   164e8:	mov	r5, r6
   164ec:	str	r0, [fp, #-72]	; 0xffffffb8
   164f0:	str	r7, [fp, #-84]	; 0xffffffac
   164f4:	mov	r2, #1
   164f8:	mov	r3, r4
   164fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16500:	mov	lr, r9
   16504:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16508:	b	16604 <__assert_fail@plt+0x5114>
   1650c:	mov	r0, #1
   16510:	b	16554 <__assert_fail@plt+0x5064>
   16514:	mov	r7, #0
   16518:	mov	r8, #0
   1651c:	mov	r2, r0
   16520:	b	16600 <__assert_fail@plt+0x5110>
   16524:	tst	r4, #1
   16528:	bne	16554 <__assert_fail@plt+0x5064>
   1652c:	mov	r2, r0
   16530:	b	1657c <__assert_fail@plt+0x508c>
   16534:	mov	r0, #1
   16538:	str	r0, [fp, #-72]	; 0xffffffb8
   1653c:	mov	r8, #0
   16540:	mov	r7, #5
   16544:	b	165c0 <__assert_fail@plt+0x50d0>
   16548:	mov	r2, #1
   1654c:	tst	r4, #1
   16550:	beq	1657c <__assert_fail@plt+0x508c>
   16554:	mov	r1, #1
   16558:	str	r1, [fp, #-72]	; 0xffffffb8
   1655c:	mov	r8, #0
   16560:	mov	r7, #2
   16564:	movw	r1, #43768	; 0xaaf8
   16568:	movt	r1, #1
   1656c:	str	r1, [fp, #-84]	; 0xffffffac
   16570:	mov	r2, r0
   16574:	mov	r3, #1
   16578:	b	16604 <__assert_fail@plt+0x5114>
   1657c:	mov	r8, #1
   16580:	mov	r7, #2
   16584:	cmp	sl, #0
   16588:	movne	r0, #39	; 0x27
   1658c:	strbne	r0, [r5]
   16590:	movw	r0, #43768	; 0xaaf8
   16594:	movt	r0, #1
   16598:	str	r0, [fp, #-84]	; 0xffffffac
   1659c:	mov	r0, #1
   165a0:	str	r0, [fp, #-72]	; 0xffffffb8
   165a4:	b	16600 <__assert_fail@plt+0x5110>
   165a8:	mov	r7, #5
   165ac:	tst	r4, #1
   165b0:	beq	165d8 <__assert_fail@plt+0x50e8>
   165b4:	mov	r0, #1
   165b8:	str	r0, [fp, #-72]	; 0xffffffb8
   165bc:	mov	r8, #0
   165c0:	movw	r0, #43764	; 0xaaf4
   165c4:	movt	r0, #1
   165c8:	str	r0, [fp, #-84]	; 0xffffffac
   165cc:	mov	r2, #1
   165d0:	mov	r3, #1
   165d4:	b	16604 <__assert_fail@plt+0x5114>
   165d8:	cmp	sl, #0
   165dc:	movne	r0, #34	; 0x22
   165e0:	strbne	r0, [r5]
   165e4:	mov	r8, #1
   165e8:	movw	r0, #43764	; 0xaaf4
   165ec:	movt	r0, #1
   165f0:	str	r0, [fp, #-84]	; 0xffffffac
   165f4:	mov	r0, #1
   165f8:	str	r0, [fp, #-72]	; 0xffffffb8
   165fc:	mov	r2, #1
   16600:	mov	r3, #0
   16604:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16608:	cmp	r0, #0
   1660c:	movwne	r0, #1
   16610:	and	r1, r0, r3
   16614:	and	r1, r2, r1
   16618:	str	r1, [sp, #56]	; 0x38
   1661c:	sub	r1, r7, #2
   16620:	clz	r1, r1
   16624:	lsr	r1, r1, #5
   16628:	and	r1, r1, r3
   1662c:	str	r1, [sp, #68]	; 0x44
   16630:	str	r7, [fp, #-64]	; 0xffffffc0
   16634:	subs	r1, r7, #2
   16638:	movwne	r1, #1
   1663c:	eor	r4, r3, #1
   16640:	str	r4, [fp, #-88]	; 0xffffffa8
   16644:	orr	r4, r1, r4
   16648:	str	r4, [sp, #72]	; 0x48
   1664c:	and	r1, r1, r2
   16650:	and	r0, r0, r1
   16654:	str	r0, [fp, #-60]	; 0xffffffc4
   16658:	str	r3, [fp, #-76]	; 0xffffffb4
   1665c:	orr	r0, r1, r3
   16660:	eor	r0, r0, #1
   16664:	ldr	r1, [fp, #16]
   16668:	clz	r1, r1
   1666c:	lsr	r1, r1, #5
   16670:	orr	r0, r1, r0
   16674:	str	r0, [fp, #-68]	; 0xffffffbc
   16678:	str	r2, [sp, #92]	; 0x5c
   1667c:	eor	r0, r2, #1
   16680:	str	r0, [sp, #60]	; 0x3c
   16684:	mov	r7, #0
   16688:	cmn	lr, #1
   1668c:	beq	1669c <__assert_fail@plt+0x51ac>
   16690:	cmp	r7, lr
   16694:	bne	166a8 <__assert_fail@plt+0x51b8>
   16698:	b	171b4 <__assert_fail@plt+0x5cc4>
   1669c:	ldrb	r0, [ip, r7]
   166a0:	cmp	r0, #0
   166a4:	beq	171b4 <__assert_fail@plt+0x5cc4>
   166a8:	mov	r9, #0
   166ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   166b0:	cmp	r0, #0
   166b4:	beq	166e8 <__assert_fail@plt+0x51f8>
   166b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166bc:	add	r4, r7, r0
   166c0:	cmp	r0, #2
   166c4:	bcc	166e0 <__assert_fail@plt+0x51f0>
   166c8:	cmn	lr, #1
   166cc:	bne	166e0 <__assert_fail@plt+0x51f0>
   166d0:	mov	r0, ip
   166d4:	bl	11370 <strlen@plt>
   166d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   166dc:	mov	lr, r0
   166e0:	cmp	r4, lr
   166e4:	bls	166f4 <__assert_fail@plt+0x5204>
   166e8:	mov	r0, #0
   166ec:	str	r0, [fp, #-52]	; 0xffffffcc
   166f0:	b	16738 <__assert_fail@plt+0x5248>
   166f4:	mov	r4, lr
   166f8:	add	r0, ip, r7
   166fc:	ldr	r1, [fp, #-84]	; 0xffffffac
   16700:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16704:	bl	11364 <bcmp@plt>
   16708:	cmp	r0, #0
   1670c:	mov	r1, r0
   16710:	movwne	r1, #1
   16714:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16718:	orr	r1, r1, r2
   1671c:	tst	r1, #1
   16720:	beq	17288 <__assert_fail@plt+0x5d98>
   16724:	clz	r0, r0
   16728:	lsr	r0, r0, #5
   1672c:	str	r0, [fp, #-52]	; 0xffffffcc
   16730:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16734:	mov	lr, r4
   16738:	ldrb	r4, [ip, r7]
   1673c:	cmp	r4, #126	; 0x7e
   16740:	bhi	16c70 <__assert_fail@plt+0x5780>
   16744:	mov	r6, #1
   16748:	mov	r2, #110	; 0x6e
   1674c:	mov	r0, #97	; 0x61
   16750:	add	r3, pc, #4
   16754:	mov	r1, #0
   16758:	ldr	pc, [r3, r4, lsl #2]
   1675c:	ldrdeq	r6, [r1], -r0
   16760:	andeq	r6, r1, r0, ror ip
   16764:	andeq	r6, r1, r0, ror ip
   16768:	andeq	r6, r1, r0, ror ip
   1676c:	andeq	r6, r1, r0, ror ip
   16770:	andeq	r6, r1, r0, ror ip
   16774:	andeq	r6, r1, r0, ror ip
   16778:	andeq	r6, r1, r4, asr #26
   1677c:			; <UNDEFINED> instruction: 0x00016ab0
   16780:	andeq	r6, r1, r8, lsr #21
   16784:			; <UNDEFINED> instruction: 0x00016abc
   16788:	ldrdeq	r6, [r1], -r8
   1678c:	andeq	r6, r1, r0, lsr #21
   16790:			; <UNDEFINED> instruction: 0x00016ab8
   16794:	andeq	r6, r1, r0, ror ip
   16798:	andeq	r6, r1, r0, ror ip
   1679c:	andeq	r6, r1, r0, ror ip
   167a0:	andeq	r6, r1, r0, ror ip
   167a4:	andeq	r6, r1, r0, ror ip
   167a8:	andeq	r6, r1, r0, ror ip
   167ac:	andeq	r6, r1, r0, ror ip
   167b0:	andeq	r6, r1, r0, ror ip
   167b4:	andeq	r6, r1, r0, ror ip
   167b8:	andeq	r6, r1, r0, ror ip
   167bc:	andeq	r6, r1, r0, ror ip
   167c0:	andeq	r6, r1, r0, ror ip
   167c4:	andeq	r6, r1, r0, ror ip
   167c8:	andeq	r6, r1, r0, ror ip
   167cc:	andeq	r6, r1, r0, ror ip
   167d0:	andeq	r6, r1, r0, ror ip
   167d4:	andeq	r6, r1, r0, ror ip
   167d8:	andeq	r6, r1, r0, ror ip
   167dc:	andeq	r6, r1, r4, asr sl
   167e0:	andeq	r6, r1, r8, asr sl
   167e4:	andeq	r6, r1, r8, asr sl
   167e8:	andeq	r6, r1, r0, asr #20
   167ec:	andeq	r6, r1, r8, asr sl
   167f0:	andeq	r6, r1, r8, asr r9
   167f4:	andeq	r6, r1, r8, asr sl
   167f8:	andeq	r6, r1, r0, ror #23
   167fc:	andeq	r6, r1, r8, asr sl
   16800:	andeq	r6, r1, r8, asr sl
   16804:	andeq	r6, r1, r8, asr sl
   16808:	andeq	r6, r1, r8, asr r9
   1680c:	andeq	r6, r1, r8, asr r9
   16810:	andeq	r6, r1, r8, asr r9
   16814:	andeq	r6, r1, r8, asr r9
   16818:	andeq	r6, r1, r8, asr r9
   1681c:	andeq	r6, r1, r8, asr r9
   16820:	andeq	r6, r1, r8, asr r9
   16824:	andeq	r6, r1, r8, asr r9
   16828:	andeq	r6, r1, r8, asr r9
   1682c:	andeq	r6, r1, r8, asr r9
   16830:	andeq	r6, r1, r8, asr r9
   16834:	andeq	r6, r1, r8, asr r9
   16838:	andeq	r6, r1, r8, asr r9
   1683c:	andeq	r6, r1, r8, asr r9
   16840:	andeq	r6, r1, r8, asr r9
   16844:	andeq	r6, r1, r8, asr r9
   16848:	andeq	r6, r1, r8, asr sl
   1684c:	andeq	r6, r1, r8, asr sl
   16850:	andeq	r6, r1, r8, asr sl
   16854:	andeq	r6, r1, r8, asr sl
   16858:	andeq	r6, r1, r8, lsr #23
   1685c:	andeq	r6, r1, r0, ror ip
   16860:	andeq	r6, r1, r8, asr r9
   16864:	andeq	r6, r1, r8, asr r9
   16868:	andeq	r6, r1, r8, asr r9
   1686c:	andeq	r6, r1, r8, asr r9
   16870:	andeq	r6, r1, r8, asr r9
   16874:	andeq	r6, r1, r8, asr r9
   16878:	andeq	r6, r1, r8, asr r9
   1687c:	andeq	r6, r1, r8, asr r9
   16880:	andeq	r6, r1, r8, asr r9
   16884:	andeq	r6, r1, r8, asr r9
   16888:	andeq	r6, r1, r8, asr r9
   1688c:	andeq	r6, r1, r8, asr r9
   16890:	andeq	r6, r1, r8, asr r9
   16894:	andeq	r6, r1, r8, asr r9
   16898:	andeq	r6, r1, r8, asr r9
   1689c:	andeq	r6, r1, r8, asr r9
   168a0:	andeq	r6, r1, r8, asr r9
   168a4:	andeq	r6, r1, r8, asr r9
   168a8:	andeq	r6, r1, r8, asr r9
   168ac:	andeq	r6, r1, r8, asr r9
   168b0:	andeq	r6, r1, r8, asr r9
   168b4:	andeq	r6, r1, r8, asr r9
   168b8:	andeq	r6, r1, r8, asr r9
   168bc:	andeq	r6, r1, r8, asr r9
   168c0:	andeq	r6, r1, r8, asr r9
   168c4:	andeq	r6, r1, r8, asr r9
   168c8:	andeq	r6, r1, r8, asr sl
   168cc:	andeq	r6, r1, r0, lsl #21
   168d0:	andeq	r6, r1, r8, asr r9
   168d4:	andeq	r6, r1, r8, asr sl
   168d8:	andeq	r6, r1, r8, asr r9
   168dc:	andeq	r6, r1, r8, asr sl
   168e0:	andeq	r6, r1, r8, asr r9
   168e4:	andeq	r6, r1, r8, asr r9
   168e8:	andeq	r6, r1, r8, asr r9
   168ec:	andeq	r6, r1, r8, asr r9
   168f0:	andeq	r6, r1, r8, asr r9
   168f4:	andeq	r6, r1, r8, asr r9
   168f8:	andeq	r6, r1, r8, asr r9
   168fc:	andeq	r6, r1, r8, asr r9
   16900:	andeq	r6, r1, r8, asr r9
   16904:	andeq	r6, r1, r8, asr r9
   16908:	andeq	r6, r1, r8, asr r9
   1690c:	andeq	r6, r1, r8, asr r9
   16910:	andeq	r6, r1, r8, asr r9
   16914:	andeq	r6, r1, r8, asr r9
   16918:	andeq	r6, r1, r8, asr r9
   1691c:	andeq	r6, r1, r8, asr r9
   16920:	andeq	r6, r1, r8, asr r9
   16924:	andeq	r6, r1, r8, asr r9
   16928:	andeq	r6, r1, r8, asr r9
   1692c:	andeq	r6, r1, r8, asr r9
   16930:	andeq	r6, r1, r8, asr r9
   16934:	andeq	r6, r1, r8, asr r9
   16938:	andeq	r6, r1, r8, asr r9
   1693c:	andeq	r6, r1, r8, asr r9
   16940:	andeq	r6, r1, r8, asr r9
   16944:	andeq	r6, r1, r8, asr r9
   16948:	andeq	r6, r1, r4, lsl sl
   1694c:	andeq	r6, r1, r8, asr sl
   16950:	andeq	r6, r1, r4, lsl sl
   16954:	andeq	r6, r1, r0, asr #20
   16958:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1695c:	tst	r0, #1
   16960:	bne	1698c <__assert_fail@plt+0x549c>
   16964:	ubfx	r0, r4, #5, #3
   16968:	ldr	r1, [fp, #16]
   1696c:	ldr	r0, [r1, r0, lsl #2]
   16970:	and	r1, r4, #31
   16974:	mov	r2, #1
   16978:	tst	r0, r2, lsl r1
   1697c:	beq	1698c <__assert_fail@plt+0x549c>
   16980:	mov	r0, r4
   16984:	mov	r1, r6
   16988:	b	169a0 <__assert_fail@plt+0x54b0>
   1698c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16990:	cmp	r0, #0
   16994:	mov	r0, r4
   16998:	mov	r1, r6
   1699c:	beq	16cd8 <__assert_fail@plt+0x57e8>
   169a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   169a4:	tst	r2, #1
   169a8:	bne	1729c <__assert_fail@plt+0x5dac>
   169ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
   169b0:	subs	r2, r2, #2
   169b4:	movwne	r2, #1
   169b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   169bc:	orr	r2, r2, r3
   169c0:	tst	r2, #1
   169c4:	bne	16a00 <__assert_fail@plt+0x5510>
   169c8:	cmp	r8, sl
   169cc:	movcc	r2, #39	; 0x27
   169d0:	strbcc	r2, [r5, r8]
   169d4:	add	r2, r8, #1
   169d8:	cmp	r2, sl
   169dc:	movcc	r3, #36	; 0x24
   169e0:	strbcc	r3, [r5, r2]
   169e4:	add	r2, r8, #2
   169e8:	cmp	r2, sl
   169ec:	movcc	r3, #39	; 0x27
   169f0:	strbcc	r3, [r5, r2]
   169f4:	add	r8, r8, #3
   169f8:	mov	r2, #1
   169fc:	str	r2, [fp, #-56]	; 0xffffffc8
   16a00:	cmp	r8, sl
   16a04:	movcc	r2, #92	; 0x5c
   16a08:	strbcc	r2, [r5, r8]
   16a0c:	add	r8, r8, #1
   16a10:	b	16d1c <__assert_fail@plt+0x582c>
   16a14:	cmp	lr, #1
   16a18:	beq	16a40 <__assert_fail@plt+0x5550>
   16a1c:	mov	r6, #0
   16a20:	cmn	lr, #1
   16a24:	bne	16a4c <__assert_fail@plt+0x555c>
   16a28:	ldrb	r0, [ip, #1]
   16a2c:	cmp	r0, #0
   16a30:	beq	16a40 <__assert_fail@plt+0x5550>
   16a34:	mvn	lr, #0
   16a38:	mov	r9, #0
   16a3c:	b	16958 <__assert_fail@plt+0x5468>
   16a40:	mov	r6, #0
   16a44:	cmp	r7, #0
   16a48:	beq	16a54 <__assert_fail@plt+0x5564>
   16a4c:	mov	r9, #0
   16a50:	b	16958 <__assert_fail@plt+0x5468>
   16a54:	mov	r1, #1
   16a58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16a5c:	cmp	r0, #2
   16a60:	bne	16a78 <__assert_fail@plt+0x5588>
   16a64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a68:	tst	r0, #1
   16a6c:	mov	r6, r1
   16a70:	beq	16958 <__assert_fail@plt+0x5468>
   16a74:	b	1729c <__assert_fail@plt+0x5dac>
   16a78:	mov	r6, r1
   16a7c:	b	16958 <__assert_fail@plt+0x5468>
   16a80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16a84:	cmp	r0, #2
   16a88:	bne	16cbc <__assert_fail@plt+0x57cc>
   16a8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a90:	tst	r0, #1
   16a94:	bne	1729c <__assert_fail@plt+0x5dac>
   16a98:	mov	r9, #0
   16a9c:	b	16cd0 <__assert_fail@plt+0x57e0>
   16aa0:	mov	r0, #102	; 0x66
   16aa4:	b	16d44 <__assert_fail@plt+0x5854>
   16aa8:	mov	r2, #116	; 0x74
   16aac:	b	16abc <__assert_fail@plt+0x55cc>
   16ab0:	mov	r0, #98	; 0x62
   16ab4:	b	16d44 <__assert_fail@plt+0x5854>
   16ab8:	mov	r2, #114	; 0x72
   16abc:	ldr	r0, [sp, #72]	; 0x48
   16ac0:	tst	r0, #1
   16ac4:	mov	r0, r2
   16ac8:	bne	16d44 <__assert_fail@plt+0x5854>
   16acc:	b	1729c <__assert_fail@plt+0x5dac>
   16ad0:	ldr	r0, [sp, #92]	; 0x5c
   16ad4:	tst	r0, #1
   16ad8:	beq	16d60 <__assert_fail@plt+0x5870>
   16adc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ae0:	tst	r0, #1
   16ae4:	bne	1729c <__assert_fail@plt+0x5dac>
   16ae8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16aec:	subs	r0, r0, #2
   16af0:	movwne	r0, #1
   16af4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16af8:	orr	r0, r0, r1
   16afc:	tst	r0, #1
   16b00:	bne	16b3c <__assert_fail@plt+0x564c>
   16b04:	cmp	r8, sl
   16b08:	movcc	r0, #39	; 0x27
   16b0c:	strbcc	r0, [r5, r8]
   16b10:	add	r0, r8, #1
   16b14:	cmp	r0, sl
   16b18:	movcc	r1, #36	; 0x24
   16b1c:	strbcc	r1, [r5, r0]
   16b20:	add	r0, r8, #2
   16b24:	cmp	r0, sl
   16b28:	movcc	r1, #39	; 0x27
   16b2c:	strbcc	r1, [r5, r0]
   16b30:	add	r8, r8, #3
   16b34:	mov	r0, #1
   16b38:	str	r0, [fp, #-56]	; 0xffffffc8
   16b3c:	cmp	r8, sl
   16b40:	movcc	r0, #92	; 0x5c
   16b44:	strbcc	r0, [r5, r8]
   16b48:	add	r0, r8, #1
   16b4c:	mov	r6, #0
   16b50:	mov	r9, #1
   16b54:	mov	r4, #48	; 0x30
   16b58:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16b5c:	cmp	r1, #2
   16b60:	beq	16f24 <__assert_fail@plt+0x5a34>
   16b64:	add	r1, r7, #1
   16b68:	cmp	r1, lr
   16b6c:	bcs	16f24 <__assert_fail@plt+0x5a34>
   16b70:	ldrb	r1, [ip, r1]
   16b74:	sub	r1, r1, #48	; 0x30
   16b78:	uxtb	r1, r1
   16b7c:	cmp	r1, #9
   16b80:	bhi	16f24 <__assert_fail@plt+0x5a34>
   16b84:	cmp	r0, sl
   16b88:	movcc	r1, #48	; 0x30
   16b8c:	strbcc	r1, [r5, r0]
   16b90:	add	r0, r8, #2
   16b94:	cmp	r0, sl
   16b98:	movcc	r1, #48	; 0x30
   16b9c:	strbcc	r1, [r5, r0]
   16ba0:	add	r8, r8, #3
   16ba4:	b	16958 <__assert_fail@plt+0x5468>
   16ba8:	mov	r9, #0
   16bac:	mov	r4, #63	; 0x3f
   16bb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16bb4:	cmp	r0, #5
   16bb8:	beq	16f2c <__assert_fail@plt+0x5a3c>
   16bbc:	cmp	r0, #2
   16bc0:	bne	16fd4 <__assert_fail@plt+0x5ae4>
   16bc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16bc8:	tst	r0, #1
   16bcc:	mov	r6, #0
   16bd0:	beq	16958 <__assert_fail@plt+0x5468>
   16bd4:	b	1729c <__assert_fail@plt+0x5dac>
   16bd8:	mov	r0, #118	; 0x76
   16bdc:	b	16d44 <__assert_fail@plt+0x5854>
   16be0:	mov	r4, #39	; 0x27
   16be4:	mov	r0, #1
   16be8:	str	r0, [sp, #64]	; 0x40
   16bec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16bf0:	cmp	r0, #2
   16bf4:	bne	16d7c <__assert_fail@plt+0x588c>
   16bf8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16bfc:	tst	r0, #1
   16c00:	bne	1729c <__assert_fail@plt+0x5dac>
   16c04:	ldr	r2, [sp, #84]	; 0x54
   16c08:	cmp	r2, #0
   16c0c:	mov	r0, r2
   16c10:	movwne	r0, #1
   16c14:	clz	r1, sl
   16c18:	lsr	r1, r1, #5
   16c1c:	orrs	r0, r0, r1
   16c20:	moveq	r2, sl
   16c24:	str	r2, [sp, #84]	; 0x54
   16c28:	moveq	sl, r0
   16c2c:	cmp	r8, sl
   16c30:	movcc	r0, #39	; 0x27
   16c34:	strbcc	r0, [r5, r8]
   16c38:	add	r0, r8, #1
   16c3c:	cmp	r0, sl
   16c40:	movcc	r1, #92	; 0x5c
   16c44:	strbcc	r1, [r5, r0]
   16c48:	add	r0, r8, #2
   16c4c:	cmp	r0, sl
   16c50:	movcc	r1, #39	; 0x27
   16c54:	strbcc	r1, [r5, r0]
   16c58:	add	r8, r8, #3
   16c5c:	mov	r0, #0
   16c60:	str	r0, [fp, #-56]	; 0xffffffc8
   16c64:	mov	r9, #0
   16c68:	mov	r6, #1
   16c6c:	b	16958 <__assert_fail@plt+0x5468>
   16c70:	ldr	r0, [sp, #44]	; 0x2c
   16c74:	cmp	r0, #1
   16c78:	bne	16d84 <__assert_fail@plt+0x5894>
   16c7c:	str	lr, [sp, #32]
   16c80:	bl	1134c <__ctype_b_loc@plt>
   16c84:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16c88:	ldr	r0, [r0]
   16c8c:	add	r0, r0, r4, lsl #1
   16c90:	ldrb	r0, [r0, #1]
   16c94:	ubfx	r6, r0, #6, #1
   16c98:	mov	r2, #1
   16c9c:	ldr	r0, [sp, #60]	; 0x3c
   16ca0:	orr	r1, r6, r0
   16ca4:	cmp	r2, #1
   16ca8:	bhi	16fdc <__assert_fail@plt+0x5aec>
   16cac:	tst	r1, #1
   16cb0:	beq	16fdc <__assert_fail@plt+0x5aec>
   16cb4:	ldr	lr, [sp, #32]
   16cb8:	b	16958 <__assert_fail@plt+0x5468>
   16cbc:	mov	r9, #0
   16cc0:	mov	r0, #92	; 0x5c
   16cc4:	ldr	r1, [sp, #56]	; 0x38
   16cc8:	cmp	r1, #0
   16ccc:	beq	16d44 <__assert_fail@plt+0x5854>
   16cd0:	mov	r4, #92	; 0x5c
   16cd4:	mov	r6, #0
   16cd8:	cmp	r9, #0
   16cdc:	bne	16d14 <__assert_fail@plt+0x5824>
   16ce0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16ce4:	tst	r0, #1
   16ce8:	beq	16d14 <__assert_fail@plt+0x5824>
   16cec:	cmp	r8, sl
   16cf0:	movcc	r0, #39	; 0x27
   16cf4:	strbcc	r0, [r5, r8]
   16cf8:	add	r0, r8, #1
   16cfc:	cmp	r0, sl
   16d00:	movcc	r1, #39	; 0x27
   16d04:	strbcc	r1, [r5, r0]
   16d08:	add	r8, r8, #2
   16d0c:	mov	r0, #0
   16d10:	str	r0, [fp, #-56]	; 0xffffffc8
   16d14:	mov	r1, r6
   16d18:	mov	r0, r4
   16d1c:	cmp	r8, sl
   16d20:	strbcc	r0, [r5, r8]
   16d24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16d28:	and	r0, r0, r1
   16d2c:	str	r0, [fp, #-48]	; 0xffffffd0
   16d30:	add	r8, r8, #1
   16d34:	add	r7, r7, #1
   16d38:	cmn	lr, #1
   16d3c:	bne	16690 <__assert_fail@plt+0x51a0>
   16d40:	b	1669c <__assert_fail@plt+0x51ac>
   16d44:	mov	r9, #0
   16d48:	ldr	r1, [sp, #92]	; 0x5c
   16d4c:	tst	r1, #1
   16d50:	mov	r6, #0
   16d54:	mov	r1, #0
   16d58:	beq	16958 <__assert_fail@plt+0x5468>
   16d5c:	b	169a0 <__assert_fail@plt+0x54b0>
   16d60:	mov	r4, #0
   16d64:	ldr	r0, [sp, #40]	; 0x28
   16d68:	cmp	r0, #0
   16d6c:	mov	r9, #0
   16d70:	mov	r6, #0
   16d74:	beq	16958 <__assert_fail@plt+0x5468>
   16d78:	b	16d34 <__assert_fail@plt+0x5844>
   16d7c:	mov	r6, #1
   16d80:	b	16958 <__assert_fail@plt+0x5468>
   16d84:	mov	r0, #0
   16d88:	str	r0, [fp, #-36]	; 0xffffffdc
   16d8c:	str	r0, [fp, #-40]	; 0xffffffd8
   16d90:	cmn	lr, #1
   16d94:	bne	16da8 <__assert_fail@plt+0x58b8>
   16d98:	mov	r0, ip
   16d9c:	bl	11370 <strlen@plt>
   16da0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16da4:	mov	lr, r0
   16da8:	ldr	r0, [sp, #76]	; 0x4c
   16dac:	add	r0, r0, r7
   16db0:	str	r0, [sp, #24]
   16db4:	mov	r6, #1
   16db8:	mov	r2, #0
   16dbc:	sub	r0, fp, #40	; 0x28
   16dc0:	mov	r3, r0
   16dc4:	str	r5, [sp, #28]
   16dc8:	str	lr, [sp, #32]
   16dcc:	b	16e10 <__assert_fail@plt+0x5920>
   16dd0:	ldr	r5, [sp, #52]	; 0x34
   16dd4:	add	r5, r0, r5
   16dd8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16ddc:	bl	11298 <iswprint@plt>
   16de0:	cmp	r0, #0
   16de4:	movwne	r0, #1
   16de8:	and	r6, r6, r0
   16dec:	sub	r0, fp, #40	; 0x28
   16df0:	bl	11250 <mbsinit@plt>
   16df4:	sub	r3, fp, #40	; 0x28
   16df8:	mov	r2, r5
   16dfc:	ldr	lr, [sp, #32]
   16e00:	cmp	r0, #0
   16e04:	ldr	r5, [sp, #28]
   16e08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16e0c:	bne	16c9c <__assert_fail@plt+0x57ac>
   16e10:	str	r2, [sp, #52]	; 0x34
   16e14:	add	r0, r2, r7
   16e18:	add	r1, ip, r0
   16e1c:	str	r0, [sp, #48]	; 0x30
   16e20:	sub	r2, lr, r0
   16e24:	sub	r0, fp, #44	; 0x2c
   16e28:	bl	19770 <__assert_fail@plt+0x8280>
   16e2c:	cmp	r0, #0
   16e30:	beq	171a8 <__assert_fail@plt+0x5cb8>
   16e34:	cmn	r0, #1
   16e38:	beq	17164 <__assert_fail@plt+0x5c74>
   16e3c:	cmn	r0, #2
   16e40:	ldr	lr, [sp, #32]
   16e44:	beq	1716c <__assert_fail@plt+0x5c7c>
   16e48:	cmp	r0, #2
   16e4c:	mov	r1, #0
   16e50:	movwcc	r1, #1
   16e54:	ldr	r2, [sp, #68]	; 0x44
   16e58:	eor	r2, r2, #1
   16e5c:	orrs	r1, r2, r1
   16e60:	bne	16dd0 <__assert_fail@plt+0x58e0>
   16e64:	ldr	r1, [sp, #52]	; 0x34
   16e68:	ldr	r2, [sp, #24]
   16e6c:	add	r1, r2, r1
   16e70:	sub	r2, r0, #1
   16e74:	b	16e84 <__assert_fail@plt+0x5994>
   16e78:	add	r1, r1, #1
   16e7c:	subs	r2, r2, #1
   16e80:	beq	16dd0 <__assert_fail@plt+0x58e0>
   16e84:	ldrb	r3, [r1]
   16e88:	sub	r3, r3, #91	; 0x5b
   16e8c:	cmp	r3, #33	; 0x21
   16e90:	bhi	16e78 <__assert_fail@plt+0x5988>
   16e94:	add	r5, pc, #0
   16e98:	ldr	pc, [r5, r3, lsl #2]
   16e9c:	muleq	r1, r4, r2
   16ea0:	muleq	r1, r4, r2
   16ea4:	andeq	r6, r1, r8, ror lr
   16ea8:	muleq	r1, r4, r2
   16eac:	andeq	r6, r1, r8, ror lr
   16eb0:	muleq	r1, r4, r2
   16eb4:	andeq	r6, r1, r8, ror lr
   16eb8:	andeq	r6, r1, r8, ror lr
   16ebc:	andeq	r6, r1, r8, ror lr
   16ec0:	andeq	r6, r1, r8, ror lr
   16ec4:	andeq	r6, r1, r8, ror lr
   16ec8:	andeq	r6, r1, r8, ror lr
   16ecc:	andeq	r6, r1, r8, ror lr
   16ed0:	andeq	r6, r1, r8, ror lr
   16ed4:	andeq	r6, r1, r8, ror lr
   16ed8:	andeq	r6, r1, r8, ror lr
   16edc:	andeq	r6, r1, r8, ror lr
   16ee0:	andeq	r6, r1, r8, ror lr
   16ee4:	andeq	r6, r1, r8, ror lr
   16ee8:	andeq	r6, r1, r8, ror lr
   16eec:	andeq	r6, r1, r8, ror lr
   16ef0:	andeq	r6, r1, r8, ror lr
   16ef4:	andeq	r6, r1, r8, ror lr
   16ef8:	andeq	r6, r1, r8, ror lr
   16efc:	andeq	r6, r1, r8, ror lr
   16f00:	andeq	r6, r1, r8, ror lr
   16f04:	andeq	r6, r1, r8, ror lr
   16f08:	andeq	r6, r1, r8, ror lr
   16f0c:	andeq	r6, r1, r8, ror lr
   16f10:	andeq	r6, r1, r8, ror lr
   16f14:	andeq	r6, r1, r8, ror lr
   16f18:	andeq	r6, r1, r8, ror lr
   16f1c:	andeq	r6, r1, r8, ror lr
   16f20:	muleq	r1, r4, r2
   16f24:	mov	r8, r0
   16f28:	b	16958 <__assert_fail@plt+0x5468>
   16f2c:	ldr	r0, [sp, #36]	; 0x24
   16f30:	cmp	r0, #0
   16f34:	beq	16fd4 <__assert_fail@plt+0x5ae4>
   16f38:	add	r0, r7, #2
   16f3c:	cmp	r0, lr
   16f40:	bcs	16fd4 <__assert_fail@plt+0x5ae4>
   16f44:	add	r1, r7, ip
   16f48:	ldrb	r1, [r1, #1]
   16f4c:	cmp	r1, #63	; 0x3f
   16f50:	bne	16fd4 <__assert_fail@plt+0x5ae4>
   16f54:	ldrb	r1, [ip, r0]
   16f58:	sub	r2, r1, #33	; 0x21
   16f5c:	cmp	r2, #29
   16f60:	bhi	16fd4 <__assert_fail@plt+0x5ae4>
   16f64:	mov	r3, #1
   16f68:	movw	r6, #20929	; 0x51c1
   16f6c:	movt	r6, #14336	; 0x3800
   16f70:	tst	r6, r3, lsl r2
   16f74:	beq	16fd4 <__assert_fail@plt+0x5ae4>
   16f78:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16f7c:	tst	r2, #1
   16f80:	bne	1729c <__assert_fail@plt+0x5dac>
   16f84:	cmp	r8, sl
   16f88:	movcc	r2, #63	; 0x3f
   16f8c:	strbcc	r2, [r5, r8]
   16f90:	add	r2, r8, #1
   16f94:	cmp	r2, sl
   16f98:	movcc	r3, #34	; 0x22
   16f9c:	strbcc	r3, [r5, r2]
   16fa0:	add	r2, r8, #2
   16fa4:	cmp	r2, sl
   16fa8:	movcc	r3, #34	; 0x22
   16fac:	strbcc	r3, [r5, r2]
   16fb0:	add	r2, r8, #3
   16fb4:	cmp	r2, sl
   16fb8:	movcc	r3, #63	; 0x3f
   16fbc:	strbcc	r3, [r5, r2]
   16fc0:	add	r8, r8, #4
   16fc4:	mov	r7, r0
   16fc8:	mov	r4, r1
   16fcc:	mov	r6, #0
   16fd0:	b	16958 <__assert_fail@plt+0x5468>
   16fd4:	mov	r6, #0
   16fd8:	b	16958 <__assert_fail@plt+0x5468>
   16fdc:	add	r0, r2, r7
   16fe0:	str	r0, [sp, #52]	; 0x34
   16fe4:	mov	r2, #0
   16fe8:	ldr	lr, [sp, #32]
   16fec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16ff0:	str	r1, [sp, #48]	; 0x30
   16ff4:	tst	r1, #1
   16ff8:	bne	170d4 <__assert_fail@plt+0x5be4>
   16ffc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17000:	tst	r1, #1
   17004:	bne	1729c <__assert_fail@plt+0x5dac>
   17008:	mov	r3, r0
   1700c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17010:	subs	r1, r0, #2
   17014:	movwne	r1, #1
   17018:	orr	r1, r1, r3
   1701c:	tst	r1, #1
   17020:	bne	17058 <__assert_fail@plt+0x5b68>
   17024:	cmp	r8, sl
   17028:	movcc	r0, #39	; 0x27
   1702c:	strbcc	r0, [r5, r8]
   17030:	add	r2, r8, #1
   17034:	cmp	r2, sl
   17038:	movcc	r0, #36	; 0x24
   1703c:	strbcc	r0, [r5, r2]
   17040:	add	r2, r8, #2
   17044:	cmp	r2, sl
   17048:	movcc	r0, #39	; 0x27
   1704c:	strbcc	r0, [r5, r2]
   17050:	add	r8, r8, #3
   17054:	mov	r3, #1
   17058:	cmp	r8, sl
   1705c:	movcc	r1, #92	; 0x5c
   17060:	strbcc	r1, [r5, r8]
   17064:	add	r2, r8, #1
   17068:	cmp	r2, sl
   1706c:	bcs	17080 <__assert_fail@plt+0x5b90>
   17070:	uxtb	r1, r4
   17074:	mov	r0, #48	; 0x30
   17078:	orr	r1, r0, r1, lsr #6
   1707c:	strb	r1, [r5, r2]
   17080:	add	r2, r8, #2
   17084:	cmp	r2, sl
   17088:	lsrcc	r1, r4, #3
   1708c:	movcc	r0, #6
   17090:	bficc	r1, r0, #3, #29
   17094:	strbcc	r1, [r5, r2]
   17098:	mov	r0, #6
   1709c:	bfi	r4, r0, #3, #29
   170a0:	add	r8, r8, #3
   170a4:	mov	r2, #1
   170a8:	mov	r0, r3
   170ac:	b	170f8 <__assert_fail@plt+0x5c08>
   170b0:	cmp	r8, sl
   170b4:	strbcc	r4, [r5, r8]
   170b8:	ldr	r1, [sp, #76]	; 0x4c
   170bc:	ldrb	r4, [r1, r7]
   170c0:	add	r8, r8, #1
   170c4:	mov	r7, r3
   170c8:	ldr	r1, [sp, #48]	; 0x30
   170cc:	tst	r1, #1
   170d0:	beq	16ffc <__assert_fail@plt+0x5b0c>
   170d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   170d8:	tst	r1, #1
   170dc:	beq	170f0 <__assert_fail@plt+0x5c00>
   170e0:	cmp	r8, sl
   170e4:	movcc	r1, #92	; 0x5c
   170e8:	strbcc	r1, [r5, r8]
   170ec:	add	r8, r8, #1
   170f0:	mov	r1, #0
   170f4:	str	r1, [fp, #-52]	; 0xffffffcc
   170f8:	and	r9, r2, #1
   170fc:	add	r3, r7, #1
   17100:	ldr	r1, [sp, #52]	; 0x34
   17104:	cmp	r1, r3
   17108:	bls	1714c <__assert_fail@plt+0x5c5c>
   1710c:	cmp	r9, #0
   17110:	movwne	r9, #1
   17114:	mvn	r1, r0
   17118:	orr	r1, r1, r9
   1711c:	tst	r1, #1
   17120:	bne	170b0 <__assert_fail@plt+0x5bc0>
   17124:	cmp	r8, sl
   17128:	movcc	r1, #39	; 0x27
   1712c:	strbcc	r1, [r5, r8]
   17130:	add	r1, r8, #1
   17134:	cmp	r1, sl
   17138:	movcc	r0, #39	; 0x27
   1713c:	strbcc	r0, [r5, r1]
   17140:	add	r8, r8, #2
   17144:	mov	r0, #0
   17148:	b	170b0 <__assert_fail@plt+0x5bc0>
   1714c:	str	r0, [fp, #-56]	; 0xffffffc8
   17150:	cmp	r9, #0
   17154:	movwne	r9, #1
   17158:	cmp	r9, #0
   1715c:	beq	16ce0 <__assert_fail@plt+0x57f0>
   17160:	b	16d14 <__assert_fail@plt+0x5824>
   17164:	mov	r6, #0
   17168:	b	171a8 <__assert_fail@plt+0x5cb8>
   1716c:	mov	r6, #0
   17170:	ldr	r0, [sp, #48]	; 0x30
   17174:	cmp	r0, lr
   17178:	bcs	171a8 <__assert_fail@plt+0x5cb8>
   1717c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17180:	add	r0, ip, r7
   17184:	ldr	r2, [sp, #52]	; 0x34
   17188:	ldrb	r1, [r0, r2]
   1718c:	cmp	r1, #0
   17190:	beq	16c9c <__assert_fail@plt+0x57ac>
   17194:	add	r2, r2, #1
   17198:	add	r1, r7, r2
   1719c:	cmp	r1, lr
   171a0:	bcc	17188 <__assert_fail@plt+0x5c98>
   171a4:	b	16c9c <__assert_fail@plt+0x57ac>
   171a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   171ac:	ldr	r2, [sp, #52]	; 0x34
   171b0:	b	16c9c <__assert_fail@plt+0x57ac>
   171b4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   171b8:	eor	r0, r1, #2
   171bc:	orr	r0, r0, r8
   171c0:	clz	r0, r0
   171c4:	lsr	r0, r0, #5
   171c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   171cc:	tst	r3, r0
   171d0:	bne	1729c <__assert_fail@plt+0x5dac>
   171d4:	mov	r6, r5
   171d8:	subs	r0, r1, #2
   171dc:	movwne	r0, #1
   171e0:	orr	r0, r3, r0
   171e4:	tst	r0, #1
   171e8:	ldr	r2, [sp, #92]	; 0x5c
   171ec:	ldreq	r0, [sp, #64]	; 0x40
   171f0:	eoreq	r0, r0, #1
   171f4:	tsteq	r0, #1
   171f8:	bne	17238 <__assert_fail@plt+0x5d48>
   171fc:	mov	r9, lr
   17200:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17204:	tst	r0, #1
   17208:	bne	17304 <__assert_fail@plt+0x5e14>
   1720c:	ldr	r0, [sp, #84]	; 0x54
   17210:	cmp	r0, #0
   17214:	beq	17238 <__assert_fail@plt+0x5d48>
   17218:	mov	r0, #0
   1721c:	str	r0, [fp, #-48]	; 0xffffffd0
   17220:	mov	r1, #2
   17224:	cmp	sl, #0
   17228:	mov	r0, r2
   1722c:	mov	r4, r3
   17230:	ldr	r7, [sp, #84]	; 0x54
   17234:	beq	16410 <__assert_fail@plt+0x4f20>
   17238:	ldr	r1, [fp, #-84]	; 0xffffffac
   1723c:	clz	r0, r1
   17240:	lsr	r0, r0, #5
   17244:	orr	r0, r0, r3
   17248:	tst	r0, #1
   1724c:	bne	17278 <__assert_fail@plt+0x5d88>
   17250:	ldrb	r0, [r1]
   17254:	cmp	r0, #0
   17258:	beq	17278 <__assert_fail@plt+0x5d88>
   1725c:	add	r1, r1, #1
   17260:	cmp	r8, sl
   17264:	strbcc	r0, [r6, r8]
   17268:	add	r8, r8, #1
   1726c:	ldrb	r0, [r1], #1
   17270:	cmp	r0, #0
   17274:	bne	17260 <__assert_fail@plt+0x5d70>
   17278:	cmp	r8, sl
   1727c:	movcc	r0, #0
   17280:	strbcc	r0, [r6, r8]
   17284:	b	172f8 <__assert_fail@plt+0x5e08>
   17288:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1728c:	mov	lr, r4
   17290:	b	1729c <__assert_fail@plt+0x5dac>
   17294:	ldr	r5, [sp, #28]
   17298:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1729c:	mov	r0, #0
   172a0:	ldr	r1, [fp, #12]
   172a4:	bic	r1, r1, #2
   172a8:	mov	r2, #2
   172ac:	ldr	r3, [sp, #92]	; 0x5c
   172b0:	tst	r3, #1
   172b4:	movwne	r2, #4
   172b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   172bc:	cmp	r3, #2
   172c0:	movne	r2, r3
   172c4:	str	r2, [sp]
   172c8:	str	r1, [sp, #4]
   172cc:	str	r0, [sp, #8]
   172d0:	ldr	r0, [sp, #80]	; 0x50
   172d4:	str	r0, [sp, #12]
   172d8:	ldr	r0, [sp, #88]	; 0x58
   172dc:	str	r0, [sp, #16]
   172e0:	mov	r0, r5
   172e4:	mov	r1, sl
   172e8:	mov	r2, ip
   172ec:	mov	r3, lr
   172f0:	bl	16384 <__assert_fail@plt+0x4e94>
   172f4:	mov	r8, r0
   172f8:	mov	r0, r8
   172fc:	sub	sp, fp, #28
   17300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17304:	mov	r0, #5
   17308:	str	r0, [sp]
   1730c:	ldr	r0, [fp, #12]
   17310:	str	r0, [sp, #4]
   17314:	ldr	r0, [fp, #16]
   17318:	str	r0, [sp, #8]
   1731c:	ldr	r0, [sp, #80]	; 0x50
   17320:	str	r0, [sp, #12]
   17324:	ldr	r0, [sp, #88]	; 0x58
   17328:	str	r0, [sp, #16]
   1732c:	mov	r0, r6
   17330:	ldr	r1, [sp, #84]	; 0x54
   17334:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17338:	mov	r3, r9
   1733c:	b	172f0 <__assert_fail@plt+0x5e00>
   17340:	bl	114a8 <abort@plt>
   17344:	mov	r3, r2
   17348:	mov	r2, #0
   1734c:	b	17350 <__assert_fail@plt+0x5e60>
   17350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17354:	add	fp, sp, #28
   17358:	sub	sp, sp, #36	; 0x24
   1735c:	mov	r4, r2
   17360:	str	r2, [sp, #24]
   17364:	mov	r5, r1
   17368:	mov	r6, r0
   1736c:	str	r0, [sp, #20]
   17370:	movw	r8, #49600	; 0xc1c0
   17374:	movt	r8, #2
   17378:	cmp	r3, #0
   1737c:	movne	r8, r3
   17380:	bl	113a0 <__errno_location@plt>
   17384:	str	r0, [sp, #28]
   17388:	ldm	r8, {r3, r9}
   1738c:	ldr	r1, [r8, #40]	; 0x28
   17390:	ldr	r2, [r8, #44]	; 0x2c
   17394:	ldr	r7, [r0]
   17398:	str	r7, [sp, #32]
   1739c:	add	sl, r8, #8
   173a0:	cmp	r4, #0
   173a4:	orreq	r9, r9, #1
   173a8:	stm	sp, {r3, r9, sl}
   173ac:	str	r1, [sp, #12]
   173b0:	str	r2, [sp, #16]
   173b4:	mov	r0, #0
   173b8:	mov	r1, #0
   173bc:	mov	r2, r6
   173c0:	mov	r3, r5
   173c4:	mov	r7, r5
   173c8:	bl	16384 <__assert_fail@plt+0x4e94>
   173cc:	mov	r5, r0
   173d0:	add	r4, r0, #1
   173d4:	mov	r0, r4
   173d8:	bl	182f4 <__assert_fail@plt+0x6e04>
   173dc:	mov	r6, r0
   173e0:	ldr	r0, [r8]
   173e4:	ldr	r1, [r8, #40]	; 0x28
   173e8:	ldr	r2, [r8, #44]	; 0x2c
   173ec:	stm	sp, {r0, r9, sl}
   173f0:	str	r1, [sp, #12]
   173f4:	str	r2, [sp, #16]
   173f8:	mov	r0, r6
   173fc:	mov	r1, r4
   17400:	ldr	r2, [sp, #20]
   17404:	mov	r3, r7
   17408:	bl	16384 <__assert_fail@plt+0x4e94>
   1740c:	ldr	r0, [sp, #24]
   17410:	ldr	r1, [sp, #32]
   17414:	ldr	r2, [sp, #28]
   17418:	str	r1, [r2]
   1741c:	cmp	r0, #0
   17420:	strne	r5, [r0]
   17424:	mov	r0, r6
   17428:	sub	sp, fp, #28
   1742c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17430:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17434:	add	fp, sp, #24
   17438:	movw	r8, #49464	; 0xc138
   1743c:	movt	r8, #2
   17440:	ldr	r4, [r8]
   17444:	movw	r5, #49468	; 0xc13c
   17448:	movt	r5, #2
   1744c:	ldr	r0, [r5]
   17450:	cmp	r0, #2
   17454:	blt	17480 <__assert_fail@plt+0x5f90>
   17458:	add	r7, r4, #12
   1745c:	mov	r6, #0
   17460:	ldr	r0, [r7, r6, lsl #3]
   17464:	bl	12f14 <__assert_fail@plt+0x1a24>
   17468:	add	r0, r6, #1
   1746c:	ldr	r1, [r5]
   17470:	add	r2, r6, #2
   17474:	cmp	r2, r1
   17478:	mov	r6, r0
   1747c:	blt	17460 <__assert_fail@plt+0x5f70>
   17480:	ldr	r0, [r4, #4]
   17484:	movw	r9, #49648	; 0xc1f0
   17488:	movt	r9, #2
   1748c:	cmp	r0, r9
   17490:	movw	r7, #49472	; 0xc140
   17494:	movt	r7, #2
   17498:	beq	174a8 <__assert_fail@plt+0x5fb8>
   1749c:	bl	12f14 <__assert_fail@plt+0x1a24>
   174a0:	mov	r0, #256	; 0x100
   174a4:	stm	r7, {r0, r9}
   174a8:	cmp	r4, r7
   174ac:	beq	174bc <__assert_fail@plt+0x5fcc>
   174b0:	mov	r0, r4
   174b4:	bl	12f14 <__assert_fail@plt+0x1a24>
   174b8:	str	r7, [r8]
   174bc:	mov	r0, #1
   174c0:	str	r0, [r5]
   174c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174c8:	movw	r3, #49600	; 0xc1c0
   174cc:	movt	r3, #2
   174d0:	mvn	r2, #0
   174d4:	b	174d8 <__assert_fail@plt+0x5fe8>
   174d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174dc:	add	fp, sp, #28
   174e0:	sub	sp, sp, #44	; 0x2c
   174e4:	mov	r7, r3
   174e8:	str	r2, [sp, #36]	; 0x24
   174ec:	str	r1, [sp, #32]
   174f0:	mov	r5, r0
   174f4:	bl	113a0 <__errno_location@plt>
   174f8:	cmp	r5, #0
   174fc:	bmi	1766c <__assert_fail@plt+0x617c>
   17500:	cmn	r5, #-2147483647	; 0x80000001
   17504:	beq	1766c <__assert_fail@plt+0x617c>
   17508:	movw	r4, #49464	; 0xc138
   1750c:	movt	r4, #2
   17510:	ldr	r6, [r4]
   17514:	str	r0, [sp, #28]
   17518:	ldr	r0, [r0]
   1751c:	str	r0, [sp, #24]
   17520:	movw	r8, #49468	; 0xc13c
   17524:	movt	r8, #2
   17528:	ldr	r1, [r8]
   1752c:	cmp	r1, r5
   17530:	ble	1753c <__assert_fail@plt+0x604c>
   17534:	mov	sl, r6
   17538:	b	175a8 <__assert_fail@plt+0x60b8>
   1753c:	str	r1, [fp, #-32]	; 0xffffffe0
   17540:	mov	r0, #8
   17544:	str	r0, [sp]
   17548:	movw	r9, #49472	; 0xc140
   1754c:	movt	r9, #2
   17550:	subs	r0, r6, r9
   17554:	movne	r0, r6
   17558:	sub	r1, r5, r1
   1755c:	add	r2, r1, #1
   17560:	sub	r1, fp, #32
   17564:	mvn	r3, #-2147483648	; 0x80000000
   17568:	bl	183d0 <__assert_fail@plt+0x6ee0>
   1756c:	mov	sl, r0
   17570:	str	r0, [r4]
   17574:	cmp	r6, r9
   17578:	bne	17584 <__assert_fail@plt+0x6094>
   1757c:	ldrd	r0, [r9]
   17580:	stm	sl, {r0, r1}
   17584:	ldr	r1, [r8]
   17588:	add	r0, sl, r1, lsl #3
   1758c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17590:	sub	r1, r2, r1
   17594:	lsl	r2, r1, #3
   17598:	mov	r1, #0
   1759c:	bl	113b8 <memset@plt>
   175a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   175a4:	str	r0, [r8]
   175a8:	mov	r9, sl
   175ac:	ldr	r6, [r9, r5, lsl #3]!
   175b0:	ldr	r4, [r9, #4]!
   175b4:	ldm	r7, {r0, r1}
   175b8:	ldr	r2, [r7, #40]	; 0x28
   175bc:	ldr	r3, [r7, #44]	; 0x2c
   175c0:	orr	r8, r1, #1
   175c4:	add	r1, r7, #8
   175c8:	stm	sp, {r0, r8}
   175cc:	str	r1, [sp, #20]
   175d0:	add	r0, sp, #8
   175d4:	stm	r0, {r1, r2, r3}
   175d8:	mov	r0, r4
   175dc:	mov	r1, r6
   175e0:	ldr	r2, [sp, #32]
   175e4:	ldr	r3, [sp, #36]	; 0x24
   175e8:	bl	16384 <__assert_fail@plt+0x4e94>
   175ec:	cmp	r6, r0
   175f0:	bhi	17654 <__assert_fail@plt+0x6164>
   175f4:	add	r6, r0, #1
   175f8:	str	r6, [sl, r5, lsl #3]
   175fc:	movw	r0, #49648	; 0xc1f0
   17600:	movt	r0, #2
   17604:	cmp	r4, r0
   17608:	beq	17614 <__assert_fail@plt+0x6124>
   1760c:	mov	r0, r4
   17610:	bl	12f14 <__assert_fail@plt+0x1a24>
   17614:	mov	r0, r6
   17618:	bl	182f4 <__assert_fail@plt+0x6e04>
   1761c:	mov	r4, r0
   17620:	str	r0, [r9]
   17624:	ldr	r0, [r7]
   17628:	ldr	r1, [r7, #40]	; 0x28
   1762c:	ldr	r2, [r7, #44]	; 0x2c
   17630:	stm	sp, {r0, r8}
   17634:	ldr	r0, [sp, #20]
   17638:	add	r3, sp, #8
   1763c:	stm	r3, {r0, r1, r2}
   17640:	mov	r0, r4
   17644:	mov	r1, r6
   17648:	ldr	r2, [sp, #32]
   1764c:	ldr	r3, [sp, #36]	; 0x24
   17650:	bl	16384 <__assert_fail@plt+0x4e94>
   17654:	ldr	r0, [sp, #28]
   17658:	ldr	r1, [sp, #24]
   1765c:	str	r1, [r0]
   17660:	mov	r0, r4
   17664:	sub	sp, fp, #28
   17668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1766c:	bl	114a8 <abort@plt>
   17670:	movw	r3, #49600	; 0xc1c0
   17674:	movt	r3, #2
   17678:	b	174d8 <__assert_fail@plt+0x5fe8>
   1767c:	mov	r1, r0
   17680:	mov	r0, #0
   17684:	b	174c8 <__assert_fail@plt+0x5fd8>
   17688:	mov	r2, r1
   1768c:	mov	r1, r0
   17690:	mov	r0, #0
   17694:	b	17670 <__assert_fail@plt+0x6180>
   17698:	push	{r4, r5, r6, sl, fp, lr}
   1769c:	add	fp, sp, #16
   176a0:	sub	sp, sp, #48	; 0x30
   176a4:	mov	r4, r2
   176a8:	mov	r5, r0
   176ac:	mov	r6, sp
   176b0:	mov	r0, r6
   176b4:	bl	176d4 <__assert_fail@plt+0x61e4>
   176b8:	mov	r0, r5
   176bc:	mov	r1, r4
   176c0:	mvn	r2, #0
   176c4:	mov	r3, r6
   176c8:	bl	174d8 <__assert_fail@plt+0x5fe8>
   176cc:	sub	sp, fp, #16
   176d0:	pop	{r4, r5, r6, sl, fp, pc}
   176d4:	push	{fp, lr}
   176d8:	mov	fp, sp
   176dc:	vmov.i32	q8, #0	; 0x00000000
   176e0:	mov	r2, #32
   176e4:	mov	r3, r0
   176e8:	vst1.32	{d16-d17}, [r3], r2
   176ec:	vst1.32	{d16-d17}, [r3]
   176f0:	add	r2, r0, #16
   176f4:	vst1.32	{d16-d17}, [r2]
   176f8:	cmp	r1, #10
   176fc:	strne	r1, [r0]
   17700:	popne	{fp, pc}
   17704:	bl	114a8 <abort@plt>
   17708:	push	{r4, r5, r6, r7, fp, lr}
   1770c:	add	fp, sp, #16
   17710:	sub	sp, sp, #48	; 0x30
   17714:	mov	r4, r3
   17718:	mov	r5, r2
   1771c:	mov	r6, r0
   17720:	mov	r7, sp
   17724:	mov	r0, r7
   17728:	bl	176d4 <__assert_fail@plt+0x61e4>
   1772c:	mov	r0, r6
   17730:	mov	r1, r5
   17734:	mov	r2, r4
   17738:	mov	r3, r7
   1773c:	bl	174d8 <__assert_fail@plt+0x5fe8>
   17740:	sub	sp, fp, #16
   17744:	pop	{r4, r5, r6, r7, fp, pc}
   17748:	mov	r2, r1
   1774c:	mov	r1, r0
   17750:	mov	r0, #0
   17754:	b	17698 <__assert_fail@plt+0x61a8>
   17758:	mov	r3, r2
   1775c:	mov	r2, r1
   17760:	mov	r1, r0
   17764:	mov	r0, #0
   17768:	b	17708 <__assert_fail@plt+0x6218>
   1776c:	push	{r4, r5, r6, sl, fp, lr}
   17770:	add	fp, sp, #16
   17774:	sub	sp, sp, #48	; 0x30
   17778:	mov	r4, r1
   1777c:	mov	r5, r0
   17780:	movw	r0, #49600	; 0xc1c0
   17784:	movt	r0, #2
   17788:	add	r1, r0, #16
   1778c:	mov	r3, #32
   17790:	vld1.64	{d16-d17}, [r0], r3
   17794:	vld1.64	{d18-d19}, [r1]
   17798:	mov	r6, sp
   1779c:	add	r1, r6, #16
   177a0:	vld1.64	{d20-d21}, [r0]
   177a4:	vst1.64	{d18-d19}, [r1]
   177a8:	mov	r0, r6
   177ac:	vst1.64	{d16-d17}, [r0], r3
   177b0:	vst1.64	{d20-d21}, [r0]
   177b4:	mov	r0, r6
   177b8:	mov	r1, r2
   177bc:	mov	r2, #1
   177c0:	bl	16278 <__assert_fail@plt+0x4d88>
   177c4:	mov	r0, #0
   177c8:	mov	r1, r5
   177cc:	mov	r2, r4
   177d0:	mov	r3, r6
   177d4:	bl	174d8 <__assert_fail@plt+0x5fe8>
   177d8:	sub	sp, fp, #16
   177dc:	pop	{r4, r5, r6, sl, fp, pc}
   177e0:	mov	r2, r1
   177e4:	mvn	r1, #0
   177e8:	b	1776c <__assert_fail@plt+0x627c>
   177ec:	mov	r1, #58	; 0x3a
   177f0:	b	177e0 <__assert_fail@plt+0x62f0>
   177f4:	mov	r2, #58	; 0x3a
   177f8:	b	1776c <__assert_fail@plt+0x627c>
   177fc:	push	{r4, r5, r6, sl, fp, lr}
   17800:	add	fp, sp, #16
   17804:	sub	sp, sp, #48	; 0x30
   17808:	mov	r4, r2
   1780c:	mov	r5, r0
   17810:	mov	r6, sp
   17814:	mov	r0, r6
   17818:	bl	176d4 <__assert_fail@plt+0x61e4>
   1781c:	mov	r0, r6
   17820:	mov	r1, #58	; 0x3a
   17824:	mov	r2, #1
   17828:	bl	16278 <__assert_fail@plt+0x4d88>
   1782c:	mov	r0, r5
   17830:	mov	r1, r4
   17834:	mvn	r2, #0
   17838:	mov	r3, r6
   1783c:	bl	174d8 <__assert_fail@plt+0x5fe8>
   17840:	sub	sp, fp, #16
   17844:	pop	{r4, r5, r6, sl, fp, pc}
   17848:	push	{fp, lr}
   1784c:	mov	fp, sp
   17850:	sub	sp, sp, #8
   17854:	mvn	ip, #0
   17858:	str	ip, [sp]
   1785c:	bl	17868 <__assert_fail@plt+0x6378>
   17860:	mov	sp, fp
   17864:	pop	{fp, pc}
   17868:	push	{r4, r5, r6, r7, fp, lr}
   1786c:	add	fp, sp, #16
   17870:	sub	sp, sp, #48	; 0x30
   17874:	mov	r7, r3
   17878:	mov	r5, r0
   1787c:	movw	r0, #49600	; 0xc1c0
   17880:	movt	r0, #2
   17884:	add	r3, r0, #16
   17888:	mov	r4, #32
   1788c:	vld1.64	{d16-d17}, [r0], r4
   17890:	vld1.64	{d18-d19}, [r3]
   17894:	mov	r6, sp
   17898:	add	r3, r6, #16
   1789c:	vld1.64	{d20-d21}, [r0]
   178a0:	vst1.64	{d18-d19}, [r3]
   178a4:	mov	r0, r6
   178a8:	vst1.64	{d16-d17}, [r0], r4
   178ac:	vst1.64	{d20-d21}, [r0]
   178b0:	mov	r0, r6
   178b4:	bl	162d0 <__assert_fail@plt+0x4de0>
   178b8:	ldr	r2, [fp, #8]
   178bc:	mov	r0, r5
   178c0:	mov	r1, r7
   178c4:	mov	r3, r6
   178c8:	bl	174d8 <__assert_fail@plt+0x5fe8>
   178cc:	sub	sp, fp, #16
   178d0:	pop	{r4, r5, r6, r7, fp, pc}
   178d4:	mov	r3, r2
   178d8:	mov	r2, r1
   178dc:	mov	r1, r0
   178e0:	mov	r0, #0
   178e4:	b	17848 <__assert_fail@plt+0x6358>
   178e8:	push	{fp, lr}
   178ec:	mov	fp, sp
   178f0:	sub	sp, sp, #8
   178f4:	mov	ip, r2
   178f8:	mov	r2, r1
   178fc:	mov	r1, r0
   17900:	str	r3, [sp]
   17904:	mov	r0, #0
   17908:	mov	r3, ip
   1790c:	bl	17868 <__assert_fail@plt+0x6378>
   17910:	mov	sp, fp
   17914:	pop	{fp, pc}
   17918:	movw	r3, #49480	; 0xc148
   1791c:	movt	r3, #2
   17920:	b	174d8 <__assert_fail@plt+0x5fe8>
   17924:	mov	r2, r1
   17928:	mov	r1, r0
   1792c:	mov	r0, #0
   17930:	b	17918 <__assert_fail@plt+0x6428>
   17934:	mvn	r2, #0
   17938:	b	17918 <__assert_fail@plt+0x6428>
   1793c:	mov	r1, r0
   17940:	mov	r0, #0
   17944:	b	17934 <__assert_fail@plt+0x6444>
   17948:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1794c:	add	fp, sp, #24
   17950:	sub	sp, sp, #16
   17954:	mov	r4, r1
   17958:	mov	r5, r0
   1795c:	mov	r7, #0
   17960:	mov	r0, #0
   17964:	mov	r1, r5
   17968:	mov	r2, #5
   1796c:	bl	11268 <dcgettext@plt>
   17970:	cmp	r0, r5
   17974:	beq	17980 <__assert_fail@plt+0x6490>
   17978:	sub	sp, fp, #24
   1797c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17980:	bl	19738 <__assert_fail@plt+0x8248>
   17984:	mov	r6, r0
   17988:	mov	r8, #56	; 0x38
   1798c:	mov	r0, #45	; 0x2d
   17990:	stm	sp, {r0, r8}
   17994:	str	r7, [sp, #8]
   17998:	str	r7, [sp, #12]
   1799c:	mov	r0, r6
   179a0:	mov	r1, #85	; 0x55
   179a4:	mov	r2, #84	; 0x54
   179a8:	mov	r3, #70	; 0x46
   179ac:	bl	17a44 <__assert_fail@plt+0x6554>
   179b0:	cmp	r0, #0
   179b4:	beq	179d0 <__assert_fail@plt+0x64e0>
   179b8:	ldrb	r1, [r5]
   179bc:	movw	r2, #43770	; 0xaafa
   179c0:	movt	r2, #1
   179c4:	movw	r0, #43774	; 0xaafe
   179c8:	movt	r0, #1
   179cc:	b	17a14 <__assert_fail@plt+0x6524>
   179d0:	mov	r0, #48	; 0x30
   179d4:	mov	r1, #51	; 0x33
   179d8:	str	r8, [sp]
   179dc:	stmib	sp, {r0, r1}
   179e0:	str	r0, [sp, #12]
   179e4:	mov	r0, r6
   179e8:	mov	r1, #71	; 0x47
   179ec:	mov	r2, #66	; 0x42
   179f0:	mov	r3, #49	; 0x31
   179f4:	bl	17a44 <__assert_fail@plt+0x6554>
   179f8:	cmp	r0, #0
   179fc:	beq	17a24 <__assert_fail@plt+0x6534>
   17a00:	ldrb	r1, [r5]
   17a04:	movw	r2, #43778	; 0xab02
   17a08:	movt	r2, #1
   17a0c:	movw	r0, #43782	; 0xab06
   17a10:	movt	r0, #1
   17a14:	cmp	r1, #96	; 0x60
   17a18:	moveq	r0, r2
   17a1c:	sub	sp, fp, #24
   17a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a24:	movw	r1, #43764	; 0xaaf4
   17a28:	movt	r1, #1
   17a2c:	movw	r0, #43768	; 0xaaf8
   17a30:	movt	r0, #1
   17a34:	cmp	r4, #9
   17a38:	moveq	r0, r1
   17a3c:	sub	sp, fp, #24
   17a40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a44:	push	{r4, r5, r6, r7, fp, lr}
   17a48:	add	fp, sp, #16
   17a4c:	sub	sp, sp, #16
   17a50:	mov	r4, r3
   17a54:	mov	r5, r2
   17a58:	mov	r7, r1
   17a5c:	mov	r6, r0
   17a60:	mov	r0, r1
   17a64:	bl	19110 <__assert_fail@plt+0x7c20>
   17a68:	ldrb	r1, [r6]
   17a6c:	cmp	r0, #0
   17a70:	andne	r1, r1, #223	; 0xdf
   17a74:	mov	r0, #0
   17a78:	cmp	r1, r7
   17a7c:	bne	17ab4 <__assert_fail@plt+0x65c4>
   17a80:	cmp	r7, #0
   17a84:	beq	17abc <__assert_fail@plt+0x65cc>
   17a88:	ldr	r0, [fp, #20]
   17a8c:	ldr	r1, [fp, #16]
   17a90:	ldr	r2, [fp, #12]
   17a94:	ldr	r3, [fp, #8]
   17a98:	str	r2, [sp]
   17a9c:	str	r1, [sp, #4]
   17aa0:	str	r0, [sp, #8]
   17aa4:	mov	r0, r6
   17aa8:	mov	r1, r5
   17aac:	mov	r2, r4
   17ab0:	bl	17ac8 <__assert_fail@plt+0x65d8>
   17ab4:	sub	sp, fp, #16
   17ab8:	pop	{r4, r5, r6, r7, fp, pc}
   17abc:	mov	r0, #1
   17ac0:	sub	sp, fp, #16
   17ac4:	pop	{r4, r5, r6, r7, fp, pc}
   17ac8:	push	{r4, r5, r6, r7, fp, lr}
   17acc:	add	fp, sp, #16
   17ad0:	sub	sp, sp, #8
   17ad4:	mov	r4, r3
   17ad8:	mov	r5, r2
   17adc:	mov	r7, r1
   17ae0:	mov	r6, r0
   17ae4:	mov	r0, r1
   17ae8:	bl	19110 <__assert_fail@plt+0x7c20>
   17aec:	ldrb	r1, [r6, #1]
   17af0:	cmp	r0, #0
   17af4:	andne	r1, r1, #223	; 0xdf
   17af8:	mov	r0, #0
   17afc:	cmp	r1, r7
   17b00:	bne	17b30 <__assert_fail@plt+0x6640>
   17b04:	cmp	r7, #0
   17b08:	beq	17b38 <__assert_fail@plt+0x6648>
   17b0c:	ldr	r0, [fp, #16]
   17b10:	ldr	r1, [fp, #12]
   17b14:	ldr	r3, [fp, #8]
   17b18:	str	r1, [sp]
   17b1c:	str	r0, [sp, #4]
   17b20:	mov	r0, r6
   17b24:	mov	r1, r5
   17b28:	mov	r2, r4
   17b2c:	bl	17b44 <__assert_fail@plt+0x6654>
   17b30:	sub	sp, fp, #16
   17b34:	pop	{r4, r5, r6, r7, fp, pc}
   17b38:	mov	r0, #1
   17b3c:	sub	sp, fp, #16
   17b40:	pop	{r4, r5, r6, r7, fp, pc}
   17b44:	push	{r4, r5, r6, r7, fp, lr}
   17b48:	add	fp, sp, #16
   17b4c:	sub	sp, sp, #8
   17b50:	mov	r4, r3
   17b54:	mov	r5, r2
   17b58:	mov	r7, r1
   17b5c:	mov	r6, r0
   17b60:	mov	r0, r1
   17b64:	bl	19110 <__assert_fail@plt+0x7c20>
   17b68:	ldrb	r1, [r6, #2]
   17b6c:	cmp	r0, #0
   17b70:	andne	r1, r1, #223	; 0xdf
   17b74:	mov	r0, #0
   17b78:	cmp	r1, r7
   17b7c:	bne	17ba4 <__assert_fail@plt+0x66b4>
   17b80:	cmp	r7, #0
   17b84:	beq	17bac <__assert_fail@plt+0x66bc>
   17b88:	ldr	r0, [fp, #12]
   17b8c:	ldr	r3, [fp, #8]
   17b90:	str	r0, [sp]
   17b94:	mov	r0, r6
   17b98:	mov	r1, r5
   17b9c:	mov	r2, r4
   17ba0:	bl	17bb8 <__assert_fail@plt+0x66c8>
   17ba4:	sub	sp, fp, #16
   17ba8:	pop	{r4, r5, r6, r7, fp, pc}
   17bac:	mov	r0, #1
   17bb0:	sub	sp, fp, #16
   17bb4:	pop	{r4, r5, r6, r7, fp, pc}
   17bb8:	push	{r4, r5, r6, r7, fp, lr}
   17bbc:	add	fp, sp, #16
   17bc0:	mov	r4, r3
   17bc4:	mov	r5, r2
   17bc8:	mov	r7, r1
   17bcc:	mov	r6, r0
   17bd0:	mov	r0, r1
   17bd4:	bl	19110 <__assert_fail@plt+0x7c20>
   17bd8:	ldrb	r1, [r6, #3]
   17bdc:	ldr	r3, [fp, #8]
   17be0:	cmp	r0, #0
   17be4:	andne	r1, r1, #223	; 0xdf
   17be8:	mov	r0, #0
   17bec:	cmp	r1, r7
   17bf0:	bne	17c14 <__assert_fail@plt+0x6724>
   17bf4:	cmp	r7, #0
   17bf8:	beq	17c10 <__assert_fail@plt+0x6720>
   17bfc:	mov	r0, r6
   17c00:	mov	r1, r5
   17c04:	mov	r2, r4
   17c08:	pop	{r4, r5, r6, r7, fp, lr}
   17c0c:	b	17c18 <__assert_fail@plt+0x6728>
   17c10:	mov	r0, #1
   17c14:	pop	{r4, r5, r6, r7, fp, pc}
   17c18:	push	{r4, r5, r6, r7, fp, lr}
   17c1c:	add	fp, sp, #16
   17c20:	mov	r4, r3
   17c24:	mov	r5, r2
   17c28:	mov	r7, r1
   17c2c:	mov	r6, r0
   17c30:	mov	r0, r1
   17c34:	bl	19110 <__assert_fail@plt+0x7c20>
   17c38:	ldrb	r1, [r6, #4]
   17c3c:	cmp	r0, #0
   17c40:	andne	r1, r1, #223	; 0xdf
   17c44:	mov	r0, #0
   17c48:	cmp	r1, r7
   17c4c:	bne	17c70 <__assert_fail@plt+0x6780>
   17c50:	cmp	r7, #0
   17c54:	beq	17c6c <__assert_fail@plt+0x677c>
   17c58:	mov	r0, r6
   17c5c:	mov	r1, r5
   17c60:	mov	r2, r4
   17c64:	pop	{r4, r5, r6, r7, fp, lr}
   17c68:	b	17c74 <__assert_fail@plt+0x6784>
   17c6c:	mov	r0, #1
   17c70:	pop	{r4, r5, r6, r7, fp, pc}
   17c74:	push	{r4, r5, r6, sl, fp, lr}
   17c78:	add	fp, sp, #16
   17c7c:	mov	r4, r2
   17c80:	mov	r6, r1
   17c84:	mov	r5, r0
   17c88:	mov	r0, r1
   17c8c:	bl	19110 <__assert_fail@plt+0x7c20>
   17c90:	ldrb	r1, [r5, #5]
   17c94:	cmp	r0, #0
   17c98:	andne	r1, r1, #223	; 0xdf
   17c9c:	mov	r0, #0
   17ca0:	cmp	r1, r6
   17ca4:	bne	17cc4 <__assert_fail@plt+0x67d4>
   17ca8:	cmp	r6, #0
   17cac:	beq	17cc0 <__assert_fail@plt+0x67d0>
   17cb0:	mov	r0, r5
   17cb4:	mov	r1, r4
   17cb8:	pop	{r4, r5, r6, sl, fp, lr}
   17cbc:	b	17cc8 <__assert_fail@plt+0x67d8>
   17cc0:	mov	r0, #1
   17cc4:	pop	{r4, r5, r6, sl, fp, pc}
   17cc8:	push	{r4, r5, fp, lr}
   17ccc:	add	fp, sp, #8
   17cd0:	mov	r5, r1
   17cd4:	mov	r4, r0
   17cd8:	mov	r0, r1
   17cdc:	bl	19110 <__assert_fail@plt+0x7c20>
   17ce0:	ldrb	r1, [r4, #6]
   17ce4:	cmp	r0, #0
   17ce8:	andne	r1, r1, #223	; 0xdf
   17cec:	mov	r0, #0
   17cf0:	cmp	r1, r5
   17cf4:	popne	{r4, r5, fp, pc}
   17cf8:	cmp	r5, #0
   17cfc:	beq	17d0c <__assert_fail@plt+0x681c>
   17d00:	mov	r0, r4
   17d04:	pop	{r4, r5, fp, lr}
   17d08:	b	17d14 <__assert_fail@plt+0x6824>
   17d0c:	mov	r0, #1
   17d10:	pop	{r4, r5, fp, pc}
   17d14:	push	{r4, sl, fp, lr}
   17d18:	add	fp, sp, #8
   17d1c:	mov	r4, r0
   17d20:	mov	r0, #0
   17d24:	bl	19110 <__assert_fail@plt+0x7c20>
   17d28:	ldrb	r1, [r4, #7]
   17d2c:	cmp	r0, #0
   17d30:	beq	17d44 <__assert_fail@plt+0x6854>
   17d34:	tst	r1, #223	; 0xdf
   17d38:	bne	17d4c <__assert_fail@plt+0x685c>
   17d3c:	mov	r0, #1
   17d40:	pop	{r4, sl, fp, pc}
   17d44:	cmp	r1, #0
   17d48:	beq	17d3c <__assert_fail@plt+0x684c>
   17d4c:	mov	r0, #0
   17d50:	pop	{r4, sl, fp, pc}
   17d54:	push	{r4, sl, fp, lr}
   17d58:	add	fp, sp, #8
   17d5c:	sub	sp, sp, #104	; 0x68
   17d60:	mov	r4, r0
   17d64:	movw	r0, #44607	; 0xae3f
   17d68:	movt	r0, #1
   17d6c:	mov	r1, sp
   17d70:	bl	19b3c <__assert_fail@plt+0x864c>
   17d74:	mov	r1, r0
   17d78:	mov	r0, #0
   17d7c:	cmp	r1, #0
   17d80:	beq	17d8c <__assert_fail@plt+0x689c>
   17d84:	sub	sp, fp, #8
   17d88:	pop	{r4, sl, fp, pc}
   17d8c:	ldr	r0, [sp, #96]	; 0x60
   17d90:	ldr	r1, [sp, #100]	; 0x64
   17d94:	ldm	sp, {r2, r3}
   17d98:	stm	r4, {r0, r1, r2, r3}
   17d9c:	mov	r0, r4
   17da0:	sub	sp, fp, #8
   17da4:	pop	{r4, sl, fp, pc}
   17da8:	push	{r4, r5, r6, r7, fp, lr}
   17dac:	add	fp, sp, #16
   17db0:	mov	r4, r0
   17db4:	cmp	r0, #2
   17db8:	bhi	17de8 <__assert_fail@plt+0x68f8>
   17dbc:	mov	r0, r4
   17dc0:	bl	19810 <__assert_fail@plt+0x8320>
   17dc4:	mov	r5, r0
   17dc8:	bl	113a0 <__errno_location@plt>
   17dcc:	mov	r6, r0
   17dd0:	ldr	r7, [r0]
   17dd4:	mov	r0, r4
   17dd8:	bl	114b4 <close@plt>
   17ddc:	str	r7, [r6]
   17de0:	mov	r0, r5
   17de4:	pop	{r4, r5, r6, r7, fp, pc}
   17de8:	mov	r0, r4
   17dec:	pop	{r4, r5, r6, r7, fp, pc}
   17df0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17df4:	add	fp, sp, #24
   17df8:	sub	sp, sp, #32
   17dfc:	mov	r4, r2
   17e00:	mov	r8, r0
   17e04:	ldr	r6, [fp, #12]
   17e08:	ldr	r7, [fp, #8]
   17e0c:	cmp	r1, #0
   17e10:	beq	17e38 <__assert_fail@plt+0x6948>
   17e14:	mov	r5, r1
   17e18:	str	r4, [sp]
   17e1c:	str	r3, [sp, #4]
   17e20:	movw	r2, #43872	; 0xab60
   17e24:	movt	r2, #1
   17e28:	mov	r0, r8
   17e2c:	mov	r1, #1
   17e30:	mov	r3, r5
   17e34:	b	17e50 <__assert_fail@plt+0x6960>
   17e38:	str	r3, [sp]
   17e3c:	movw	r2, #43884	; 0xab6c
   17e40:	movt	r2, #1
   17e44:	mov	r0, r8
   17e48:	mov	r1, #1
   17e4c:	mov	r3, r4
   17e50:	bl	113e8 <__fprintf_chk@plt>
   17e54:	movw	r1, #43891	; 0xab73
   17e58:	movt	r1, #1
   17e5c:	mov	r0, #0
   17e60:	mov	r2, #5
   17e64:	bl	11268 <dcgettext@plt>
   17e68:	mov	r3, r0
   17e6c:	movw	r0, #2022	; 0x7e6
   17e70:	str	r0, [sp]
   17e74:	movw	r2, #44609	; 0xae41
   17e78:	movt	r2, #1
   17e7c:	mov	r0, r8
   17e80:	mov	r1, #1
   17e84:	bl	113e8 <__fprintf_chk@plt>
   17e88:	movw	r4, #41363	; 0xa193
   17e8c:	movt	r4, #1
   17e90:	mov	r0, r4
   17e94:	mov	r1, r8
   17e98:	bl	111e4 <fputs_unlocked@plt>
   17e9c:	movw	r1, #43895	; 0xab77
   17ea0:	movt	r1, #1
   17ea4:	mov	r0, #0
   17ea8:	mov	r2, #5
   17eac:	bl	11268 <dcgettext@plt>
   17eb0:	mov	r2, r0
   17eb4:	movw	r3, #44066	; 0xac22
   17eb8:	movt	r3, #1
   17ebc:	mov	r0, r8
   17ec0:	mov	r1, #1
   17ec4:	bl	113e8 <__fprintf_chk@plt>
   17ec8:	mov	r0, r4
   17ecc:	mov	r1, r8
   17ed0:	bl	111e4 <fputs_unlocked@plt>
   17ed4:	cmp	r6, #9
   17ed8:	bhi	17f14 <__assert_fail@plt+0x6a24>
   17edc:	add	r0, pc, #0
   17ee0:	ldr	pc, [r0, r6, lsl #2]
   17ee4:	andeq	r7, r1, ip, lsl #30
   17ee8:	andeq	r7, r1, r0, lsr #30
   17eec:	andeq	r7, r1, r0, asr pc
   17ef0:	andeq	r7, r1, r8, ror pc
   17ef4:	andeq	r7, r1, r0, lsr #31
   17ef8:	andeq	r7, r1, r8, asr #31
   17efc:	strdeq	r7, [r1], -r0
   17f00:	andeq	r8, r1, r8, lsr #32
   17f04:	andeq	r8, r1, r8, asr #1
   17f08:	andeq	r8, r1, r0, ror r0
   17f0c:	sub	sp, fp, #24
   17f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f14:	movw	r1, #44419	; 0xad83
   17f18:	movt	r1, #1
   17f1c:	b	18078 <__assert_fail@plt+0x6b88>
   17f20:	movw	r1, #44100	; 0xac44
   17f24:	movt	r1, #1
   17f28:	mov	r0, #0
   17f2c:	mov	r2, #5
   17f30:	bl	11268 <dcgettext@plt>
   17f34:	mov	r2, r0
   17f38:	ldr	r3, [r7]
   17f3c:	mov	r0, r8
   17f40:	mov	r1, #1
   17f44:	sub	sp, fp, #24
   17f48:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17f4c:	b	113e8 <__fprintf_chk@plt>
   17f50:	movw	r1, #44116	; 0xac54
   17f54:	movt	r1, #1
   17f58:	mov	r0, #0
   17f5c:	mov	r2, #5
   17f60:	bl	11268 <dcgettext@plt>
   17f64:	mov	r2, r0
   17f68:	ldr	r3, [r7]
   17f6c:	ldr	r0, [r7, #4]
   17f70:	str	r0, [sp]
   17f74:	b	18064 <__assert_fail@plt+0x6b74>
   17f78:	movw	r1, #44139	; 0xac6b
   17f7c:	movt	r1, #1
   17f80:	mov	r0, #0
   17f84:	mov	r2, #5
   17f88:	bl	11268 <dcgettext@plt>
   17f8c:	mov	r2, r0
   17f90:	ldr	r3, [r7]
   17f94:	ldmib	r7, {r0, r1}
   17f98:	stm	sp, {r0, r1}
   17f9c:	b	18064 <__assert_fail@plt+0x6b74>
   17fa0:	movw	r1, #44167	; 0xac87
   17fa4:	movt	r1, #1
   17fa8:	mov	r0, #0
   17fac:	mov	r2, #5
   17fb0:	bl	11268 <dcgettext@plt>
   17fb4:	mov	r2, r0
   17fb8:	ldr	r3, [r7]
   17fbc:	ldmib	r7, {r0, r1, r7}
   17fc0:	stm	sp, {r0, r1, r7}
   17fc4:	b	18064 <__assert_fail@plt+0x6b74>
   17fc8:	movw	r1, #44199	; 0xaca7
   17fcc:	movt	r1, #1
   17fd0:	mov	r0, #0
   17fd4:	mov	r2, #5
   17fd8:	bl	11268 <dcgettext@plt>
   17fdc:	mov	r2, r0
   17fe0:	ldr	r3, [r7]
   17fe4:	ldmib	r7, {r0, r1, r6, r7}
   17fe8:	stm	sp, {r0, r1, r6, r7}
   17fec:	b	18064 <__assert_fail@plt+0x6b74>
   17ff0:	movw	r1, #44235	; 0xaccb
   17ff4:	movt	r1, #1
   17ff8:	mov	r0, #0
   17ffc:	mov	r2, #5
   18000:	bl	11268 <dcgettext@plt>
   18004:	mov	r2, r0
   18008:	ldr	r3, [r7]
   1800c:	ldmib	r7, {r0, r1, r6}
   18010:	ldr	r5, [r7, #16]
   18014:	ldr	r7, [r7, #20]
   18018:	stm	sp, {r0, r1, r6}
   1801c:	str	r5, [sp, #12]
   18020:	str	r7, [sp, #16]
   18024:	b	18064 <__assert_fail@plt+0x6b74>
   18028:	movw	r1, #44275	; 0xacf3
   1802c:	movt	r1, #1
   18030:	mov	r0, #0
   18034:	mov	r2, #5
   18038:	bl	11268 <dcgettext@plt>
   1803c:	mov	r2, r0
   18040:	ldr	r3, [r7]
   18044:	ldmib	r7, {r0, r1, r6}
   18048:	ldr	r5, [r7, #16]
   1804c:	ldr	r4, [r7, #20]
   18050:	ldr	r7, [r7, #24]
   18054:	stm	sp, {r0, r1, r6}
   18058:	str	r5, [sp, #12]
   1805c:	str	r4, [sp, #16]
   18060:	str	r7, [sp, #20]
   18064:	mov	r0, r8
   18068:	mov	r1, #1
   1806c:	b	18118 <__assert_fail@plt+0x6c28>
   18070:	movw	r1, #44367	; 0xad4f
   18074:	movt	r1, #1
   18078:	mov	r0, #0
   1807c:	mov	r2, #5
   18080:	bl	11268 <dcgettext@plt>
   18084:	mov	ip, r0
   18088:	ldr	r3, [r7]
   1808c:	ldr	r0, [r7, #4]
   18090:	ldr	r1, [r7, #8]
   18094:	ldr	r6, [r7, #12]
   18098:	ldr	r5, [r7, #16]
   1809c:	ldr	r4, [r7, #20]
   180a0:	ldr	r2, [r7, #24]
   180a4:	ldr	lr, [r7, #28]
   180a8:	ldr	r7, [r7, #32]
   180ac:	stm	sp, {r0, r1, r6}
   180b0:	str	r5, [sp, #12]
   180b4:	str	r4, [sp, #16]
   180b8:	str	r2, [sp, #20]
   180bc:	str	lr, [sp, #24]
   180c0:	str	r7, [sp, #28]
   180c4:	b	1810c <__assert_fail@plt+0x6c1c>
   180c8:	movw	r1, #44319	; 0xad1f
   180cc:	movt	r1, #1
   180d0:	mov	r0, #0
   180d4:	mov	r2, #5
   180d8:	bl	11268 <dcgettext@plt>
   180dc:	mov	ip, r0
   180e0:	ldr	r3, [r7]
   180e4:	ldmib	r7, {r0, r1, r6}
   180e8:	ldr	r5, [r7, #16]
   180ec:	ldr	r4, [r7, #20]
   180f0:	ldr	r2, [r7, #24]
   180f4:	ldr	r7, [r7, #28]
   180f8:	stm	sp, {r0, r1, r6}
   180fc:	str	r5, [sp, #12]
   18100:	str	r4, [sp, #16]
   18104:	str	r2, [sp, #20]
   18108:	str	r7, [sp, #24]
   1810c:	mov	r0, r8
   18110:	mov	r1, #1
   18114:	mov	r2, ip
   18118:	bl	113e8 <__fprintf_chk@plt>
   1811c:	sub	sp, fp, #24
   18120:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18124:	push	{r4, sl, fp, lr}
   18128:	add	fp, sp, #8
   1812c:	sub	sp, sp, #8
   18130:	mov	lr, #0
   18134:	ldr	ip, [fp, #8]
   18138:	ldr	r4, [ip, lr, lsl #2]
   1813c:	add	lr, lr, #1
   18140:	cmp	r4, #0
   18144:	bne	18138 <__assert_fail@plt+0x6c48>
   18148:	sub	r4, lr, #1
   1814c:	str	ip, [sp]
   18150:	str	r4, [sp, #4]
   18154:	bl	17df0 <__assert_fail@plt+0x6900>
   18158:	sub	sp, fp, #8
   1815c:	pop	{r4, sl, fp, pc}
   18160:	push	{r4, r5, fp, lr}
   18164:	add	fp, sp, #8
   18168:	sub	sp, sp, #48	; 0x30
   1816c:	mov	ip, #0
   18170:	ldr	r4, [fp, #8]
   18174:	add	lr, sp, #8
   18178:	ldr	r5, [r4]
   1817c:	str	r5, [lr, ip, lsl #2]
   18180:	cmp	r5, #0
   18184:	beq	1819c <__assert_fail@plt+0x6cac>
   18188:	add	ip, ip, #1
   1818c:	add	r4, r4, #4
   18190:	cmp	ip, #10
   18194:	bne	18178 <__assert_fail@plt+0x6c88>
   18198:	mov	ip, #10
   1819c:	str	lr, [sp]
   181a0:	str	ip, [sp, #4]
   181a4:	bl	17df0 <__assert_fail@plt+0x6900>
   181a8:	sub	sp, fp, #8
   181ac:	pop	{r4, r5, fp, pc}
   181b0:	push	{fp, lr}
   181b4:	mov	fp, sp
   181b8:	sub	sp, sp, #8
   181bc:	add	ip, fp, #8
   181c0:	str	ip, [sp, #4]
   181c4:	str	ip, [sp]
   181c8:	bl	18160 <__assert_fail@plt+0x6c70>
   181cc:	mov	sp, fp
   181d0:	pop	{fp, pc}
   181d4:	push	{fp, lr}
   181d8:	mov	fp, sp
   181dc:	movw	r0, #49548	; 0xc18c
   181e0:	movt	r0, #2
   181e4:	ldr	r1, [r0]
   181e8:	movw	r0, #41363	; 0xa193
   181ec:	movt	r0, #1
   181f0:	bl	111e4 <fputs_unlocked@plt>
   181f4:	movw	r1, #44479	; 0xadbf
   181f8:	movt	r1, #1
   181fc:	mov	r0, #0
   18200:	mov	r2, #5
   18204:	bl	11268 <dcgettext@plt>
   18208:	mov	r1, r0
   1820c:	movw	r2, #44499	; 0xadd3
   18210:	movt	r2, #1
   18214:	mov	r0, #1
   18218:	bl	113c4 <__printf_chk@plt>
   1821c:	movw	r1, #44521	; 0xade9
   18220:	movt	r1, #1
   18224:	mov	r0, #0
   18228:	mov	r2, #5
   1822c:	bl	11268 <dcgettext@plt>
   18230:	mov	r1, r0
   18234:	movw	r2, #41636	; 0xa2a4
   18238:	movt	r2, #1
   1823c:	movw	r3, #41911	; 0xa3b7
   18240:	movt	r3, #1
   18244:	mov	r0, #1
   18248:	bl	113c4 <__printf_chk@plt>
   1824c:	movw	r1, #44541	; 0xadfd
   18250:	movt	r1, #1
   18254:	mov	r0, #0
   18258:	mov	r2, #5
   1825c:	bl	11268 <dcgettext@plt>
   18260:	mov	r1, r0
   18264:	movw	r2, #44580	; 0xae24
   18268:	movt	r2, #1
   1826c:	mov	r0, #1
   18270:	pop	{fp, lr}
   18274:	b	113c4 <__printf_chk@plt>
   18278:	b	1827c <__assert_fail@plt+0x6d8c>
   1827c:	push	{r4, r5, r6, sl, fp, lr}
   18280:	add	fp, sp, #16
   18284:	mov	r4, r2
   18288:	mov	r5, r1
   1828c:	mov	r6, r0
   18290:	bl	197d4 <__assert_fail@plt+0x82e4>
   18294:	cmp	r0, #0
   18298:	popne	{r4, r5, r6, sl, fp, pc}
   1829c:	cmp	r6, #0
   182a0:	beq	182b4 <__assert_fail@plt+0x6dc4>
   182a4:	cmp	r5, #0
   182a8:	cmpne	r4, #0
   182ac:	bne	182b4 <__assert_fail@plt+0x6dc4>
   182b0:	pop	{r4, r5, r6, sl, fp, pc}
   182b4:	bl	18640 <__assert_fail@plt+0x7150>
   182b8:	push	{fp, lr}
   182bc:	mov	fp, sp
   182c0:	bl	18c90 <__assert_fail@plt+0x77a0>
   182c4:	pop	{fp, lr}
   182c8:	b	182cc <__assert_fail@plt+0x6ddc>
   182cc:	cmp	r0, #0
   182d0:	bxne	lr
   182d4:	push	{fp, lr}
   182d8:	mov	fp, sp
   182dc:	bl	18640 <__assert_fail@plt+0x7150>
   182e0:	push	{fp, lr}
   182e4:	mov	fp, sp
   182e8:	bl	19704 <__assert_fail@plt+0x8214>
   182ec:	pop	{fp, lr}
   182f0:	b	182cc <__assert_fail@plt+0x6ddc>
   182f4:	b	182b8 <__assert_fail@plt+0x6dc8>
   182f8:	push	{r4, r5, fp, lr}
   182fc:	add	fp, sp, #8
   18300:	mov	r4, r1
   18304:	mov	r5, r0
   18308:	bl	18cc0 <__assert_fail@plt+0x77d0>
   1830c:	cmp	r0, #0
   18310:	popne	{r4, r5, fp, pc}
   18314:	cmp	r5, #0
   18318:	beq	18328 <__assert_fail@plt+0x6e38>
   1831c:	cmp	r4, #0
   18320:	bne	18328 <__assert_fail@plt+0x6e38>
   18324:	pop	{r4, r5, fp, pc}
   18328:	bl	18640 <__assert_fail@plt+0x7150>
   1832c:	push	{fp, lr}
   18330:	mov	fp, sp
   18334:	bl	19708 <__assert_fail@plt+0x8218>
   18338:	pop	{fp, lr}
   1833c:	b	182cc <__assert_fail@plt+0x6ddc>
   18340:	push	{fp, lr}
   18344:	mov	fp, sp
   18348:	bl	19718 <__assert_fail@plt+0x8228>
   1834c:	pop	{fp, lr}
   18350:	b	182cc <__assert_fail@plt+0x6ddc>
   18354:	mov	r2, r1
   18358:	mov	r1, r0
   1835c:	mov	r0, #0
   18360:	b	1827c <__assert_fail@plt+0x6d8c>
   18364:	mov	r2, r1
   18368:	mov	r1, r0
   1836c:	mov	r0, #0
   18370:	b	18340 <__assert_fail@plt+0x6e50>
   18374:	mov	r2, #1
   18378:	b	1837c <__assert_fail@plt+0x6e8c>
   1837c:	push	{r4, r5, fp, lr}
   18380:	add	fp, sp, #8
   18384:	mov	r4, r1
   18388:	ldr	r5, [r1]
   1838c:	cmp	r0, #0
   18390:	beq	183a8 <__assert_fail@plt+0x6eb8>
   18394:	mov	r1, #1
   18398:	add	r1, r1, r5, lsr #1
   1839c:	adds	r5, r5, r1
   183a0:	bcc	183c0 <__assert_fail@plt+0x6ed0>
   183a4:	bl	18640 <__assert_fail@plt+0x7150>
   183a8:	cmp	r5, #0
   183ac:	bne	183c0 <__assert_fail@plt+0x6ed0>
   183b0:	mov	r1, #64	; 0x40
   183b4:	udiv	r5, r1, r2
   183b8:	cmp	r2, #64	; 0x40
   183bc:	addhi	r5, r5, #1
   183c0:	mov	r1, r5
   183c4:	bl	1827c <__assert_fail@plt+0x6d8c>
   183c8:	str	r5, [r4]
   183cc:	pop	{r4, r5, fp, pc}
   183d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   183d4:	add	fp, sp, #24
   183d8:	mov	r8, r1
   183dc:	ldr	r6, [r1]
   183e0:	add	r1, r6, r6, asr #1
   183e4:	cmp	r1, r6
   183e8:	mvnvs	r1, #-2147483648	; 0x80000000
   183ec:	cmp	r1, r3
   183f0:	mov	r5, r1
   183f4:	movgt	r5, r3
   183f8:	cmn	r3, #1
   183fc:	movle	r5, r1
   18400:	ldr	r4, [fp, #8]
   18404:	cmn	r4, #1
   18408:	ble	18430 <__assert_fail@plt+0x6f40>
   1840c:	cmp	r4, #0
   18410:	beq	18484 <__assert_fail@plt+0x6f94>
   18414:	cmn	r5, #1
   18418:	ble	18458 <__assert_fail@plt+0x6f68>
   1841c:	mvn	r7, #-2147483648	; 0x80000000
   18420:	udiv	r1, r7, r4
   18424:	cmp	r1, r5
   18428:	bge	18484 <__assert_fail@plt+0x6f94>
   1842c:	b	18494 <__assert_fail@plt+0x6fa4>
   18430:	cmn	r5, #1
   18434:	ble	18474 <__assert_fail@plt+0x6f84>
   18438:	cmn	r4, #1
   1843c:	beq	18484 <__assert_fail@plt+0x6f94>
   18440:	mov	r1, #-2147483648	; 0x80000000
   18444:	sdiv	r1, r1, r4
   18448:	mvn	r7, #-2147483648	; 0x80000000
   1844c:	cmp	r1, r5
   18450:	bge	18484 <__assert_fail@plt+0x6f94>
   18454:	b	18494 <__assert_fail@plt+0x6fa4>
   18458:	beq	18484 <__assert_fail@plt+0x6f94>
   1845c:	mov	r1, #-2147483648	; 0x80000000
   18460:	sdiv	r1, r1, r5
   18464:	mvn	r7, #-2147483648	; 0x80000000
   18468:	cmp	r1, r4
   1846c:	bge	18484 <__assert_fail@plt+0x6f94>
   18470:	b	18494 <__assert_fail@plt+0x6fa4>
   18474:	mvn	r7, #-2147483648	; 0x80000000
   18478:	sdiv	r1, r7, r4
   1847c:	cmp	r5, r1
   18480:	blt	18494 <__assert_fail@plt+0x6fa4>
   18484:	mul	r1, r5, r4
   18488:	mov	r7, #64	; 0x40
   1848c:	cmp	r1, #63	; 0x3f
   18490:	bgt	1849c <__assert_fail@plt+0x6fac>
   18494:	sdiv	r5, r7, r4
   18498:	mul	r1, r5, r4
   1849c:	cmp	r0, #0
   184a0:	moveq	r7, #0
   184a4:	streq	r7, [r8]
   184a8:	sub	r7, r5, r6
   184ac:	cmp	r7, r2
   184b0:	bge	1855c <__assert_fail@plt+0x706c>
   184b4:	add	r5, r6, r2
   184b8:	mov	r1, #0
   184bc:	cmp	r5, r3
   184c0:	mov	r2, #0
   184c4:	movwgt	r2, #1
   184c8:	cmn	r3, #1
   184cc:	movwgt	r1, #1
   184d0:	cmp	r5, r6
   184d4:	bvs	18544 <__assert_fail@plt+0x7054>
   184d8:	ands	r1, r1, r2
   184dc:	bne	18544 <__assert_fail@plt+0x7054>
   184e0:	cmn	r4, #1
   184e4:	ble	1850c <__assert_fail@plt+0x701c>
   184e8:	cmp	r4, #0
   184ec:	beq	18558 <__assert_fail@plt+0x7068>
   184f0:	cmn	r5, #1
   184f4:	ble	18530 <__assert_fail@plt+0x7040>
   184f8:	mvn	r1, #-2147483648	; 0x80000000
   184fc:	udiv	r1, r1, r4
   18500:	cmp	r1, r5
   18504:	bge	18558 <__assert_fail@plt+0x7068>
   18508:	b	18544 <__assert_fail@plt+0x7054>
   1850c:	cmn	r5, #1
   18510:	ble	18548 <__assert_fail@plt+0x7058>
   18514:	cmn	r4, #1
   18518:	beq	18558 <__assert_fail@plt+0x7068>
   1851c:	mov	r1, #-2147483648	; 0x80000000
   18520:	sdiv	r1, r1, r4
   18524:	cmp	r1, r5
   18528:	bge	18558 <__assert_fail@plt+0x7068>
   1852c:	b	18544 <__assert_fail@plt+0x7054>
   18530:	beq	18558 <__assert_fail@plt+0x7068>
   18534:	mov	r1, #-2147483648	; 0x80000000
   18538:	sdiv	r1, r1, r5
   1853c:	cmp	r1, r4
   18540:	bge	18558 <__assert_fail@plt+0x7068>
   18544:	bl	18640 <__assert_fail@plt+0x7150>
   18548:	mvn	r1, #-2147483648	; 0x80000000
   1854c:	sdiv	r1, r1, r4
   18550:	cmp	r5, r1
   18554:	blt	18544 <__assert_fail@plt+0x7054>
   18558:	mul	r1, r5, r4
   1855c:	bl	182f8 <__assert_fail@plt+0x6e08>
   18560:	str	r5, [r8]
   18564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18568:	mov	r1, #1
   1856c:	b	18570 <__assert_fail@plt+0x7080>
   18570:	push	{fp, lr}
   18574:	mov	fp, sp
   18578:	bl	18c3c <__assert_fail@plt+0x774c>
   1857c:	pop	{fp, lr}
   18580:	b	182cc <__assert_fail@plt+0x6ddc>
   18584:	mov	r1, #1
   18588:	b	1858c <__assert_fail@plt+0x709c>
   1858c:	push	{fp, lr}
   18590:	mov	fp, sp
   18594:	bl	19714 <__assert_fail@plt+0x8224>
   18598:	pop	{fp, lr}
   1859c:	b	182cc <__assert_fail@plt+0x6ddc>
   185a0:	push	{r4, r5, fp, lr}
   185a4:	add	fp, sp, #8
   185a8:	mov	r4, r1
   185ac:	mov	r5, r0
   185b0:	mov	r0, r1
   185b4:	bl	182b8 <__assert_fail@plt+0x6dc8>
   185b8:	mov	r1, r5
   185bc:	mov	r2, r4
   185c0:	pop	{r4, r5, fp, lr}
   185c4:	b	11244 <memcpy@plt>
   185c8:	push	{r4, r5, fp, lr}
   185cc:	add	fp, sp, #8
   185d0:	mov	r4, r1
   185d4:	mov	r5, r0
   185d8:	mov	r0, r1
   185dc:	bl	182e0 <__assert_fail@plt+0x6df0>
   185e0:	mov	r1, r5
   185e4:	mov	r2, r4
   185e8:	pop	{r4, r5, fp, lr}
   185ec:	b	11244 <memcpy@plt>
   185f0:	push	{r4, r5, fp, lr}
   185f4:	add	fp, sp, #8
   185f8:	mov	r4, r1
   185fc:	mov	r5, r0
   18600:	add	r0, r1, #1
   18604:	bl	182e0 <__assert_fail@plt+0x6df0>
   18608:	mov	r1, #0
   1860c:	strb	r1, [r0, r4]
   18610:	mov	r1, r5
   18614:	mov	r2, r4
   18618:	pop	{r4, r5, fp, lr}
   1861c:	b	11244 <memcpy@plt>
   18620:	push	{r4, sl, fp, lr}
   18624:	add	fp, sp, #8
   18628:	mov	r4, r0
   1862c:	bl	11370 <strlen@plt>
   18630:	add	r1, r0, #1
   18634:	mov	r0, r4
   18638:	pop	{r4, sl, fp, lr}
   1863c:	b	185a0 <__assert_fail@plt+0x70b0>
   18640:	push	{fp, lr}
   18644:	mov	fp, sp
   18648:	movw	r0, #49460	; 0xc134
   1864c:	movt	r0, #2
   18650:	ldr	r4, [r0]
   18654:	movw	r1, #44656	; 0xae70
   18658:	movt	r1, #1
   1865c:	mov	r0, #0
   18660:	mov	r2, #5
   18664:	bl	11268 <dcgettext@plt>
   18668:	mov	r3, r0
   1866c:	movw	r2, #42203	; 0xa4db
   18670:	movt	r2, #1
   18674:	mov	r0, r4
   18678:	mov	r1, #0
   1867c:	bl	112f8 <error@plt>
   18680:	bl	114a8 <abort@plt>
   18684:	push	{fp, lr}
   18688:	mov	fp, sp
   1868c:	orr	r1, r1, #512	; 0x200
   18690:	bl	12f3c <__assert_fail@plt+0x1a4c>
   18694:	cmp	r0, #0
   18698:	popne	{fp, pc}
   1869c:	bl	113a0 <__errno_location@plt>
   186a0:	ldr	r0, [r0]
   186a4:	cmp	r0, #22
   186a8:	bne	186cc <__assert_fail@plt+0x71dc>
   186ac:	movw	r0, #44673	; 0xae81
   186b0:	movt	r0, #1
   186b4:	movw	r1, #44689	; 0xae91
   186b8:	movt	r1, #1
   186bc:	movw	r3, #44700	; 0xae9c
   186c0:	movt	r3, #1
   186c4:	mov	r2, #41	; 0x29
   186c8:	bl	114f0 <__assert_fail@plt>
   186cc:	bl	18640 <__assert_fail@plt+0x7150>
   186d0:	ldr	r0, [r0, #48]	; 0x30
   186d4:	and	r2, r0, #17
   186d8:	mov	r0, #1
   186dc:	cmp	r2, #16
   186e0:	beq	186fc <__assert_fail@plt+0x720c>
   186e4:	mov	r0, #0
   186e8:	cmp	r2, #17
   186ec:	bxne	lr
   186f0:	ldr	r0, [r1, #48]	; 0x30
   186f4:	cmp	r0, #0
   186f8:	movwne	r0, #1
   186fc:	bx	lr
   18700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18704:	add	fp, sp, #28
   18708:	sub	sp, sp, #20
   1870c:	cmp	r2, #37	; 0x25
   18710:	bcs	18b44 <__assert_fail@plt+0x7654>
   18714:	mov	r5, r2
   18718:	mov	r6, r1
   1871c:	mov	r4, r0
   18720:	str	r3, [sp, #4]
   18724:	ldr	sl, [fp, #8]
   18728:	bl	113a0 <__errno_location@plt>
   1872c:	mov	r7, r0
   18730:	mov	r0, #0
   18734:	str	r0, [r7]
   18738:	bl	1134c <__ctype_b_loc@plt>
   1873c:	ldr	r1, [r0]
   18740:	mov	r2, r4
   18744:	ldrb	r0, [r2], #1
   18748:	add	r3, r1, r0, lsl #1
   1874c:	ldrb	r3, [r3, #1]
   18750:	tst	r3, #32
   18754:	bne	18744 <__assert_fail@plt+0x7254>
   18758:	add	r9, sp, #16
   1875c:	cmp	r6, #0
   18760:	movne	r9, r6
   18764:	mov	r8, #4
   18768:	cmp	r0, #45	; 0x2d
   1876c:	beq	18b38 <__assert_fail@plt+0x7648>
   18770:	mov	r0, r4
   18774:	mov	r1, r9
   18778:	mov	r2, r5
   1877c:	bl	113dc <strtoumax@plt>
   18780:	str	r1, [sp, #12]
   18784:	str	r0, [sp, #8]
   18788:	ldr	r6, [r9]
   1878c:	cmp	r6, r4
   18790:	beq	187b8 <__assert_fail@plt+0x72c8>
   18794:	ldr	r0, [r7]
   18798:	cmp	r0, #0
   1879c:	beq	187f0 <__assert_fail@plt+0x7300>
   187a0:	cmp	r0, #34	; 0x22
   187a4:	bne	18b38 <__assert_fail@plt+0x7648>
   187a8:	mov	r8, #1
   187ac:	cmp	sl, #0
   187b0:	bne	187fc <__assert_fail@plt+0x730c>
   187b4:	b	18b28 <__assert_fail@plt+0x7638>
   187b8:	cmp	sl, #0
   187bc:	beq	18b38 <__assert_fail@plt+0x7648>
   187c0:	ldrb	r1, [r6]
   187c4:	cmp	r1, #0
   187c8:	beq	18b38 <__assert_fail@plt+0x7648>
   187cc:	mov	r0, sl
   187d0:	bl	1137c <strchr@plt>
   187d4:	cmp	r0, #0
   187d8:	beq	18b38 <__assert_fail@plt+0x7648>
   187dc:	mov	r8, #0
   187e0:	str	r8, [sp, #12]
   187e4:	mov	r0, #1
   187e8:	str	r0, [sp, #8]
   187ec:	b	187fc <__assert_fail@plt+0x730c>
   187f0:	mov	r8, r0
   187f4:	cmp	sl, #0
   187f8:	beq	18b28 <__assert_fail@plt+0x7638>
   187fc:	ldrb	r4, [r6]
   18800:	cmp	r4, #0
   18804:	beq	18b28 <__assert_fail@plt+0x7638>
   18808:	mov	r0, sl
   1880c:	mov	r1, r4
   18810:	bl	1137c <strchr@plt>
   18814:	cmp	r0, #0
   18818:	beq	18a44 <__assert_fail@plt+0x7554>
   1881c:	sub	r0, r4, #69	; 0x45
   18820:	mov	r7, #1
   18824:	mov	r5, #1024	; 0x400
   18828:	cmp	r0, #47	; 0x2f
   1882c:	bhi	18940 <__assert_fail@plt+0x7450>
   18830:	add	r1, pc, #0
   18834:	ldr	pc, [r1, r0, lsl #2]
   18838:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1883c:	andeq	r8, r1, r0, asr #18
   18840:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18844:	andeq	r8, r1, r0, asr #18
   18848:	andeq	r8, r1, r0, asr #18
   1884c:	andeq	r8, r1, r0, asr #18
   18850:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18854:	andeq	r8, r1, r0, asr #18
   18858:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1885c:	andeq	r8, r1, r0, asr #18
   18860:	andeq	r8, r1, r0, asr #18
   18864:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18868:	andeq	r8, r1, r0, asr #18
   1886c:	andeq	r8, r1, r0, asr #18
   18870:	andeq	r8, r1, r0, asr #18
   18874:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18878:	andeq	r8, r1, r0, asr #18
   1887c:	andeq	r8, r1, r0, asr #18
   18880:	andeq	r8, r1, r0, asr #18
   18884:	andeq	r8, r1, r0, asr #18
   18888:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1888c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18890:	andeq	r8, r1, r0, asr #18
   18894:	andeq	r8, r1, r0, asr #18
   18898:	andeq	r8, r1, r0, asr #18
   1889c:	andeq	r8, r1, r0, asr #18
   188a0:	andeq	r8, r1, r0, asr #18
   188a4:	andeq	r8, r1, r0, asr #18
   188a8:	andeq	r8, r1, r0, asr #18
   188ac:	andeq	r8, r1, r0, asr #18
   188b0:	andeq	r8, r1, r0, asr #18
   188b4:	andeq	r8, r1, r0, asr #18
   188b8:	andeq	r8, r1, r0, asr #18
   188bc:	andeq	r8, r1, r0, asr #18
   188c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188c4:	andeq	r8, r1, r0, asr #18
   188c8:	andeq	r8, r1, r0, asr #18
   188cc:	andeq	r8, r1, r0, asr #18
   188d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188d4:	andeq	r8, r1, r0, asr #18
   188d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188dc:	andeq	r8, r1, r0, asr #18
   188e0:	andeq	r8, r1, r0, asr #18
   188e4:	andeq	r8, r1, r0, asr #18
   188e8:	andeq	r8, r1, r0, asr #18
   188ec:	andeq	r8, r1, r0, asr #18
   188f0:	andeq	r8, r1, r0, asr #18
   188f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188f8:	mov	r0, sl
   188fc:	mov	r1, #48	; 0x30
   18900:	bl	1137c <strchr@plt>
   18904:	cmp	r0, #0
   18908:	beq	18940 <__assert_fail@plt+0x7450>
   1890c:	ldrb	r0, [r6, #1]
   18910:	cmp	r0, #66	; 0x42
   18914:	cmpne	r0, #68	; 0x44
   18918:	bne	18928 <__assert_fail@plt+0x7438>
   1891c:	mov	r7, #2
   18920:	mov	r5, #1000	; 0x3e8
   18924:	b	18940 <__assert_fail@plt+0x7450>
   18928:	cmp	r0, #105	; 0x69
   1892c:	bne	18940 <__assert_fail@plt+0x7450>
   18930:	ldrb	r0, [r6, #2]
   18934:	mov	r7, #1
   18938:	cmp	r0, #66	; 0x42
   1893c:	movweq	r7, #3
   18940:	sub	r1, r4, #66	; 0x42
   18944:	cmp	r1, #53	; 0x35
   18948:	bhi	18a44 <__assert_fail@plt+0x7554>
   1894c:	mov	r0, #0
   18950:	add	r2, pc, #0
   18954:	ldr	pc, [r2, r1, lsl #2]
   18958:	andeq	r8, r1, ip, lsr #21
   1895c:	andeq	r8, r1, r4, asr #20
   18960:	andeq	r8, r1, r4, asr #20
   18964:			; <UNDEFINED> instruction: 0x00018ab8
   18968:	andeq	r8, r1, r4, asr #20
   1896c:	andeq	r8, r1, r0, lsr sl
   18970:	andeq	r8, r1, r4, asr #20
   18974:	andeq	r8, r1, r4, asr #20
   18978:	andeq	r8, r1, r4, asr #20
   1897c:	andeq	r8, r1, ip, asr sl
   18980:	andeq	r8, r1, r4, asr #20
   18984:	andeq	r8, r1, r0, ror sl
   18988:	andeq	r8, r1, r4, asr #20
   1898c:	andeq	r8, r1, r4, asr #20
   18990:	andeq	r8, r1, ip, asr #21
   18994:	andeq	r8, r1, r4, asr #20
   18998:	andeq	r8, r1, r4, asr #20
   1899c:	andeq	r8, r1, r4, asr #20
   189a0:	andeq	r8, r1, r4, lsl #21
   189a4:	andeq	r8, r1, r4, asr #20
   189a8:	andeq	r8, r1, r4, asr #20
   189ac:	andeq	r8, r1, r4, asr #20
   189b0:	andeq	r8, r1, r4, asr #20
   189b4:	andeq	r8, r1, r0, ror #21
   189b8:	muleq	r1, r8, sl
   189bc:	andeq	r8, r1, r4, asr #20
   189c0:	andeq	r8, r1, r4, asr #20
   189c4:	andeq	r8, r1, r4, asr #20
   189c8:	andeq	r8, r1, r4, asr #20
   189cc:	andeq	r8, r1, r4, asr #20
   189d0:	andeq	r8, r1, r4, asr #20
   189d4:	andeq	r8, r1, r4, asr #20
   189d8:	strdeq	r8, [r1], -r4
   189dc:	andeq	r8, r1, ip, lsl #22
   189e0:	andeq	r8, r1, r4, asr #20
   189e4:	andeq	r8, r1, r4, asr #20
   189e8:	andeq	r8, r1, r4, asr #20
   189ec:	andeq	r8, r1, r0, lsr sl
   189f0:	andeq	r8, r1, r4, asr #20
   189f4:	andeq	r8, r1, r4, asr #20
   189f8:	andeq	r8, r1, r4, asr #20
   189fc:	andeq	r8, r1, ip, asr sl
   18a00:	andeq	r8, r1, r4, asr #20
   18a04:	andeq	r8, r1, r0, ror sl
   18a08:	andeq	r8, r1, r4, asr #20
   18a0c:	andeq	r8, r1, r4, asr #20
   18a10:	andeq	r8, r1, r4, asr #20
   18a14:	andeq	r8, r1, r4, asr #20
   18a18:	andeq	r8, r1, r4, asr #20
   18a1c:	andeq	r8, r1, r4, asr #20
   18a20:	andeq	r8, r1, r4, lsl #21
   18a24:	andeq	r8, r1, r4, asr #20
   18a28:	andeq	r8, r1, r4, asr #20
   18a2c:	andeq	r8, r1, r0, lsl #22
   18a30:	add	r0, sp, #8
   18a34:	mov	r1, r5
   18a38:	mov	r2, #3
   18a3c:	bl	18bf0 <__assert_fail@plt+0x7700>
   18a40:	b	18b0c <__assert_fail@plt+0x761c>
   18a44:	ldr	r0, [sp, #8]
   18a48:	ldr	r1, [sp, #12]
   18a4c:	ldr	r2, [sp, #4]
   18a50:	strd	r0, [r2]
   18a54:	orr	r8, r8, #2
   18a58:	b	18b38 <__assert_fail@plt+0x7648>
   18a5c:	add	r0, sp, #8
   18a60:	mov	r1, r5
   18a64:	mov	r2, #1
   18a68:	bl	18bf0 <__assert_fail@plt+0x7700>
   18a6c:	b	18b0c <__assert_fail@plt+0x761c>
   18a70:	add	r0, sp, #8
   18a74:	mov	r1, r5
   18a78:	mov	r2, #2
   18a7c:	bl	18bf0 <__assert_fail@plt+0x7700>
   18a80:	b	18b0c <__assert_fail@plt+0x761c>
   18a84:	add	r0, sp, #8
   18a88:	mov	r1, r5
   18a8c:	mov	r2, #4
   18a90:	bl	18bf0 <__assert_fail@plt+0x7700>
   18a94:	b	18b0c <__assert_fail@plt+0x761c>
   18a98:	add	r0, sp, #8
   18a9c:	mov	r1, r5
   18aa0:	mov	r2, #7
   18aa4:	bl	18bf0 <__assert_fail@plt+0x7700>
   18aa8:	b	18b0c <__assert_fail@plt+0x761c>
   18aac:	add	r0, sp, #8
   18ab0:	mov	r1, #1024	; 0x400
   18ab4:	b	18b08 <__assert_fail@plt+0x7618>
   18ab8:	add	r0, sp, #8
   18abc:	mov	r1, r5
   18ac0:	mov	r2, #6
   18ac4:	bl	18bf0 <__assert_fail@plt+0x7700>
   18ac8:	b	18b0c <__assert_fail@plt+0x761c>
   18acc:	add	r0, sp, #8
   18ad0:	mov	r1, r5
   18ad4:	mov	r2, #5
   18ad8:	bl	18bf0 <__assert_fail@plt+0x7700>
   18adc:	b	18b0c <__assert_fail@plt+0x761c>
   18ae0:	add	r0, sp, #8
   18ae4:	mov	r1, r5
   18ae8:	mov	r2, #8
   18aec:	bl	18bf0 <__assert_fail@plt+0x7700>
   18af0:	b	18b0c <__assert_fail@plt+0x761c>
   18af4:	add	r0, sp, #8
   18af8:	mov	r1, #512	; 0x200
   18afc:	b	18b08 <__assert_fail@plt+0x7618>
   18b00:	add	r0, sp, #8
   18b04:	mov	r1, #2
   18b08:	bl	18b64 <__assert_fail@plt+0x7674>
   18b0c:	ldr	r1, [r9]
   18b10:	add	r2, r1, r7
   18b14:	str	r2, [r9]
   18b18:	ldrb	r1, [r1, r7]
   18b1c:	orr	r8, r0, r8
   18b20:	cmp	r1, #0
   18b24:	orrne	r8, r8, #2
   18b28:	ldr	r0, [sp, #8]
   18b2c:	ldr	r1, [sp, #12]
   18b30:	ldr	r2, [sp, #4]
   18b34:	strd	r0, [r2]
   18b38:	mov	r0, r8
   18b3c:	sub	sp, fp, #28
   18b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b44:	movw	r0, #44778	; 0xaeea
   18b48:	movt	r0, #1
   18b4c:	movw	r1, #44816	; 0xaf10
   18b50:	movt	r1, #1
   18b54:	movw	r3, #44832	; 0xaf20
   18b58:	movt	r3, #1
   18b5c:	mov	r2, #85	; 0x55
   18b60:	bl	114f0 <__assert_fail@plt>
   18b64:	push	{r4, r5, r6, r7, fp, lr}
   18b68:	add	fp, sp, #16
   18b6c:	mov	r5, r1
   18b70:	mov	r4, r0
   18b74:	cmn	r1, #1
   18b78:	ble	18bb0 <__assert_fail@plt+0x76c0>
   18b7c:	cmp	r5, #0
   18b80:	beq	18bd0 <__assert_fail@plt+0x76e0>
   18b84:	asr	r3, r5, #31
   18b88:	mvn	r6, #0
   18b8c:	mvn	r0, #0
   18b90:	mvn	r1, #0
   18b94:	mov	r2, r5
   18b98:	bl	1992c <__assert_fail@plt+0x843c>
   18b9c:	ldrd	r2, [r4]
   18ba0:	subs	r0, r0, r2
   18ba4:	sbcs	r0, r1, r3
   18ba8:	bcc	18bc0 <__assert_fail@plt+0x76d0>
   18bac:	b	18bd0 <__assert_fail@plt+0x76e0>
   18bb0:	ldrd	r0, [r4]
   18bb4:	orrs	r0, r0, r1
   18bb8:	beq	18bd0 <__assert_fail@plt+0x76e0>
   18bbc:	mvn	r6, #0
   18bc0:	mov	r0, #1
   18bc4:	mvn	r7, #0
   18bc8:	strd	r6, [r4]
   18bcc:	pop	{r4, r5, r6, r7, fp, pc}
   18bd0:	ldrd	r0, [r4]
   18bd4:	umull	r6, r2, r0, r5
   18bd8:	asr	r3, r5, #31
   18bdc:	mla	r0, r0, r3, r2
   18be0:	mla	r7, r1, r5, r0
   18be4:	mov	r0, #0
   18be8:	strd	r6, [r4]
   18bec:	pop	{r4, r5, r6, r7, fp, pc}
   18bf0:	push	{r4, r5, r6, r7, fp, lr}
   18bf4:	add	fp, sp, #16
   18bf8:	cmp	r2, #0
   18bfc:	beq	18c30 <__assert_fail@plt+0x7740>
   18c00:	mov	r4, r2
   18c04:	mov	r5, r1
   18c08:	mov	r7, r0
   18c0c:	mov	r6, #0
   18c10:	mov	r0, r7
   18c14:	mov	r1, r5
   18c18:	bl	18b64 <__assert_fail@plt+0x7674>
   18c1c:	orr	r6, r0, r6
   18c20:	subs	r4, r4, #1
   18c24:	bne	18c10 <__assert_fail@plt+0x7720>
   18c28:	mov	r0, r6
   18c2c:	pop	{r4, r5, r6, r7, fp, pc}
   18c30:	mov	r6, #0
   18c34:	mov	r0, r6
   18c38:	pop	{r4, r5, r6, r7, fp, pc}
   18c3c:	clz	r2, r1
   18c40:	lsr	r2, r2, #5
   18c44:	clz	r3, r0
   18c48:	lsr	r3, r3, #5
   18c4c:	orrs	r2, r3, r2
   18c50:	movwne	r1, #1
   18c54:	movwne	r0, #1
   18c58:	cmp	r1, #0
   18c5c:	beq	18c8c <__assert_fail@plt+0x779c>
   18c60:	mvn	r2, #-2147483648	; 0x80000000
   18c64:	udiv	r2, r2, r1
   18c68:	cmp	r2, r0
   18c6c:	bcs	18c8c <__assert_fail@plt+0x779c>
   18c70:	push	{fp, lr}
   18c74:	mov	fp, sp
   18c78:	bl	113a0 <__errno_location@plt>
   18c7c:	mov	r1, #12
   18c80:	str	r1, [r0]
   18c84:	mov	r0, #0
   18c88:	pop	{fp, pc}
   18c8c:	b	111cc <calloc@plt>
   18c90:	cmp	r0, #0
   18c94:	movweq	r0, #1
   18c98:	cmn	r0, #1
   18c9c:	ble	18ca4 <__assert_fail@plt+0x77b4>
   18ca0:	b	11310 <malloc@plt>
   18ca4:	push	{fp, lr}
   18ca8:	mov	fp, sp
   18cac:	bl	113a0 <__errno_location@plt>
   18cb0:	mov	r1, #12
   18cb4:	str	r1, [r0]
   18cb8:	mov	r0, #0
   18cbc:	pop	{fp, pc}
   18cc0:	push	{fp, lr}
   18cc4:	mov	fp, sp
   18cc8:	cmp	r0, #0
   18ccc:	beq	18ce8 <__assert_fail@plt+0x77f8>
   18cd0:	cmp	r1, #0
   18cd4:	beq	18cf4 <__assert_fail@plt+0x7804>
   18cd8:	cmn	r1, #1
   18cdc:	ble	18d00 <__assert_fail@plt+0x7810>
   18ce0:	pop	{fp, lr}
   18ce4:	b	11274 <realloc@plt>
   18ce8:	mov	r0, r1
   18cec:	pop	{fp, lr}
   18cf0:	b	18c90 <__assert_fail@plt+0x77a0>
   18cf4:	bl	12f14 <__assert_fail@plt+0x1a24>
   18cf8:	mov	r0, #0
   18cfc:	pop	{fp, pc}
   18d00:	bl	113a0 <__errno_location@plt>
   18d04:	mov	r1, #12
   18d08:	str	r1, [r0]
   18d0c:	mov	r0, #0
   18d10:	pop	{fp, pc}
   18d14:	push	{r4, r5, r6, sl, fp, lr}
   18d18:	add	fp, sp, #16
   18d1c:	rsb	lr, r2, #64	; 0x40
   18d20:	lsr	ip, r0, lr
   18d24:	rsb	r3, lr, #32
   18d28:	orr	r3, ip, r1, lsl r3
   18d2c:	rsbs	r5, r2, #32
   18d30:	lsrpl	r3, r1, r5
   18d34:	lsl	r4, r0, r2
   18d38:	subs	r6, r2, #32
   18d3c:	movwpl	r4, #0
   18d40:	orr	ip, r3, r4
   18d44:	lsr	r3, r0, r5
   18d48:	orr	r2, r3, r1, lsl r2
   18d4c:	lslpl	r2, r0, r6
   18d50:	lsr	r0, r1, lr
   18d54:	cmp	r5, #0
   18d58:	movwpl	r0, #0
   18d5c:	orr	r1, r0, r2
   18d60:	mov	r0, ip
   18d64:	pop	{r4, r5, r6, sl, fp, pc}
   18d68:	push	{r4, r5, fp, lr}
   18d6c:	add	fp, sp, #8
   18d70:	lsr	ip, r0, r2
   18d74:	rsb	r3, r2, #32
   18d78:	orr	ip, ip, r1, lsl r3
   18d7c:	subs	lr, r2, #32
   18d80:	lsrpl	ip, r1, lr
   18d84:	rsb	r4, r2, #64	; 0x40
   18d88:	lsl	r5, r0, r4
   18d8c:	cmp	r3, #0
   18d90:	movwpl	r5, #0
   18d94:	orr	ip, r5, ip
   18d98:	rsb	r5, r4, #32
   18d9c:	lsr	r5, r0, r5
   18da0:	orr	r4, r5, r1, lsl r4
   18da4:	cmp	r3, #0
   18da8:	lslpl	r4, r0, r3
   18dac:	lsr	r0, r1, r2
   18db0:	cmp	lr, #0
   18db4:	movwpl	r0, #0
   18db8:	orr	r1, r4, r0
   18dbc:	mov	r0, ip
   18dc0:	pop	{r4, r5, fp, pc}
   18dc4:	rsb	r1, r1, #32
   18dc8:	ror	r0, r0, r1
   18dcc:	bx	lr
   18dd0:	ror	r0, r0, r1
   18dd4:	bx	lr
   18dd8:	rsb	r1, r1, #32
   18ddc:	ror	r0, r0, r1
   18de0:	bx	lr
   18de4:	ror	r0, r0, r1
   18de8:	bx	lr
   18dec:	and	r2, r1, #15
   18df0:	lsl	r2, r0, r2
   18df4:	rsb	r1, r1, #0
   18df8:	and	r1, r1, #15
   18dfc:	orr	r0, r2, r0, lsr r1
   18e00:	uxth	r0, r0
   18e04:	bx	lr
   18e08:	rsb	r2, r1, #0
   18e0c:	and	r2, r2, #15
   18e10:	lsl	r2, r0, r2
   18e14:	and	r1, r1, #15
   18e18:	orr	r0, r2, r0, lsr r1
   18e1c:	uxth	r0, r0
   18e20:	bx	lr
   18e24:	and	r2, r1, #7
   18e28:	lsl	r2, r0, r2
   18e2c:	rsb	r1, r1, #0
   18e30:	and	r1, r1, #7
   18e34:	orr	r0, r2, r0, lsr r1
   18e38:	uxtb	r0, r0
   18e3c:	bx	lr
   18e40:	rsb	r2, r1, #0
   18e44:	and	r2, r2, #7
   18e48:	lsl	r2, r0, r2
   18e4c:	and	r1, r1, #7
   18e50:	orr	r0, r2, r0, lsr r1
   18e54:	uxtb	r0, r0
   18e58:	bx	lr
   18e5c:	mov	r1, r0
   18e60:	sub	r2, r0, #65	; 0x41
   18e64:	mov	r0, #1
   18e68:	cmp	r2, #26
   18e6c:	subcs	r2, r1, #97	; 0x61
   18e70:	cmpcs	r2, #26
   18e74:	bcs	18e7c <__assert_fail@plt+0x798c>
   18e78:	bx	lr
   18e7c:	sub	r1, r1, #48	; 0x30
   18e80:	cmp	r1, #10
   18e84:	movcs	r0, #0
   18e88:	bx	lr
   18e8c:	mov	r1, r0
   18e90:	sub	r2, r0, #65	; 0x41
   18e94:	mov	r0, #1
   18e98:	cmp	r2, #26
   18e9c:	subcs	r1, r1, #97	; 0x61
   18ea0:	cmpcs	r1, #26
   18ea4:	movcs	r0, #0
   18ea8:	bx	lr
   18eac:	mov	r1, #0
   18eb0:	cmp	r0, #128	; 0x80
   18eb4:	movwcc	r1, #1
   18eb8:	mov	r0, r1
   18ebc:	bx	lr
   18ec0:	sub	r1, r0, #9
   18ec4:	clz	r1, r1
   18ec8:	lsr	r1, r1, #5
   18ecc:	sub	r0, r0, #32
   18ed0:	clz	r0, r0
   18ed4:	lsr	r0, r0, #5
   18ed8:	orr	r0, r0, r1
   18edc:	bx	lr
   18ee0:	mov	r1, r0
   18ee4:	mov	r0, #1
   18ee8:	cmp	r1, #32
   18eec:	bxcc	lr
   18ef0:	cmp	r1, #127	; 0x7f
   18ef4:	movne	r0, #0
   18ef8:	bx	lr
   18efc:	sub	r1, r0, #48	; 0x30
   18f00:	mov	r0, #0
   18f04:	cmp	r1, #10
   18f08:	movwcc	r0, #1
   18f0c:	bx	lr
   18f10:	sub	r1, r0, #33	; 0x21
   18f14:	mov	r0, #0
   18f18:	cmp	r1, #94	; 0x5e
   18f1c:	movwcc	r0, #1
   18f20:	bx	lr
   18f24:	sub	r1, r0, #97	; 0x61
   18f28:	mov	r0, #0
   18f2c:	cmp	r1, #26
   18f30:	movwcc	r0, #1
   18f34:	bx	lr
   18f38:	sub	r1, r0, #32
   18f3c:	mov	r0, #0
   18f40:	cmp	r1, #95	; 0x5f
   18f44:	movwcc	r0, #1
   18f48:	bx	lr
   18f4c:	sub	r1, r0, #33	; 0x21
   18f50:	cmp	r1, #93	; 0x5d
   18f54:	bhi	190e0 <__assert_fail@plt+0x7bf0>
   18f58:	mov	r0, #1
   18f5c:	add	r2, pc, #0
   18f60:	ldr	pc, [r2, r1, lsl #2]
   18f64:	ldrdeq	r9, [r1], -ip
   18f68:	ldrdeq	r9, [r1], -ip
   18f6c:	ldrdeq	r9, [r1], -ip
   18f70:	ldrdeq	r9, [r1], -ip
   18f74:	ldrdeq	r9, [r1], -ip
   18f78:	ldrdeq	r9, [r1], -ip
   18f7c:	ldrdeq	r9, [r1], -ip
   18f80:	ldrdeq	r9, [r1], -ip
   18f84:	ldrdeq	r9, [r1], -ip
   18f88:	ldrdeq	r9, [r1], -ip
   18f8c:	ldrdeq	r9, [r1], -ip
   18f90:	ldrdeq	r9, [r1], -ip
   18f94:	ldrdeq	r9, [r1], -ip
   18f98:	ldrdeq	r9, [r1], -ip
   18f9c:	ldrdeq	r9, [r1], -ip
   18fa0:	andeq	r9, r1, r0, ror #1
   18fa4:	andeq	r9, r1, r0, ror #1
   18fa8:	andeq	r9, r1, r0, ror #1
   18fac:	andeq	r9, r1, r0, ror #1
   18fb0:	andeq	r9, r1, r0, ror #1
   18fb4:	andeq	r9, r1, r0, ror #1
   18fb8:	andeq	r9, r1, r0, ror #1
   18fbc:	andeq	r9, r1, r0, ror #1
   18fc0:	andeq	r9, r1, r0, ror #1
   18fc4:	andeq	r9, r1, r0, ror #1
   18fc8:	ldrdeq	r9, [r1], -ip
   18fcc:	ldrdeq	r9, [r1], -ip
   18fd0:	ldrdeq	r9, [r1], -ip
   18fd4:	ldrdeq	r9, [r1], -ip
   18fd8:	ldrdeq	r9, [r1], -ip
   18fdc:	ldrdeq	r9, [r1], -ip
   18fe0:	ldrdeq	r9, [r1], -ip
   18fe4:	andeq	r9, r1, r0, ror #1
   18fe8:	andeq	r9, r1, r0, ror #1
   18fec:	andeq	r9, r1, r0, ror #1
   18ff0:	andeq	r9, r1, r0, ror #1
   18ff4:	andeq	r9, r1, r0, ror #1
   18ff8:	andeq	r9, r1, r0, ror #1
   18ffc:	andeq	r9, r1, r0, ror #1
   19000:	andeq	r9, r1, r0, ror #1
   19004:	andeq	r9, r1, r0, ror #1
   19008:	andeq	r9, r1, r0, ror #1
   1900c:	andeq	r9, r1, r0, ror #1
   19010:	andeq	r9, r1, r0, ror #1
   19014:	andeq	r9, r1, r0, ror #1
   19018:	andeq	r9, r1, r0, ror #1
   1901c:	andeq	r9, r1, r0, ror #1
   19020:	andeq	r9, r1, r0, ror #1
   19024:	andeq	r9, r1, r0, ror #1
   19028:	andeq	r9, r1, r0, ror #1
   1902c:	andeq	r9, r1, r0, ror #1
   19030:	andeq	r9, r1, r0, ror #1
   19034:	andeq	r9, r1, r0, ror #1
   19038:	andeq	r9, r1, r0, ror #1
   1903c:	andeq	r9, r1, r0, ror #1
   19040:	andeq	r9, r1, r0, ror #1
   19044:	andeq	r9, r1, r0, ror #1
   19048:	andeq	r9, r1, r0, ror #1
   1904c:	ldrdeq	r9, [r1], -ip
   19050:	ldrdeq	r9, [r1], -ip
   19054:	ldrdeq	r9, [r1], -ip
   19058:	ldrdeq	r9, [r1], -ip
   1905c:	ldrdeq	r9, [r1], -ip
   19060:	ldrdeq	r9, [r1], -ip
   19064:	andeq	r9, r1, r0, ror #1
   19068:	andeq	r9, r1, r0, ror #1
   1906c:	andeq	r9, r1, r0, ror #1
   19070:	andeq	r9, r1, r0, ror #1
   19074:	andeq	r9, r1, r0, ror #1
   19078:	andeq	r9, r1, r0, ror #1
   1907c:	andeq	r9, r1, r0, ror #1
   19080:	andeq	r9, r1, r0, ror #1
   19084:	andeq	r9, r1, r0, ror #1
   19088:	andeq	r9, r1, r0, ror #1
   1908c:	andeq	r9, r1, r0, ror #1
   19090:	andeq	r9, r1, r0, ror #1
   19094:	andeq	r9, r1, r0, ror #1
   19098:	andeq	r9, r1, r0, ror #1
   1909c:	andeq	r9, r1, r0, ror #1
   190a0:	andeq	r9, r1, r0, ror #1
   190a4:	andeq	r9, r1, r0, ror #1
   190a8:	andeq	r9, r1, r0, ror #1
   190ac:	andeq	r9, r1, r0, ror #1
   190b0:	andeq	r9, r1, r0, ror #1
   190b4:	andeq	r9, r1, r0, ror #1
   190b8:	andeq	r9, r1, r0, ror #1
   190bc:	andeq	r9, r1, r0, ror #1
   190c0:	andeq	r9, r1, r0, ror #1
   190c4:	andeq	r9, r1, r0, ror #1
   190c8:	andeq	r9, r1, r0, ror #1
   190cc:	ldrdeq	r9, [r1], -ip
   190d0:	ldrdeq	r9, [r1], -ip
   190d4:	ldrdeq	r9, [r1], -ip
   190d8:	ldrdeq	r9, [r1], -ip
   190dc:	bx	lr
   190e0:	mov	r0, #0
   190e4:	bx	lr
   190e8:	sub	r0, r0, #9
   190ec:	cmp	r0, #23
   190f0:	movhi	r0, #0
   190f4:	bxhi	lr
   190f8:	bic	r0, r0, #-16777216	; 0xff000000
   190fc:	movw	r1, #31
   19100:	movt	r1, #128	; 0x80
   19104:	mov	r2, #1
   19108:	and	r0, r2, r1, lsr r0
   1910c:	bx	lr
   19110:	sub	r1, r0, #65	; 0x41
   19114:	mov	r0, #0
   19118:	cmp	r1, #26
   1911c:	movwcc	r0, #1
   19120:	bx	lr
   19124:	mov	r1, r0
   19128:	sub	r2, r0, #48	; 0x30
   1912c:	mov	r0, #1
   19130:	cmp	r2, #22
   19134:	bhi	1914c <__assert_fail@plt+0x7c5c>
   19138:	mov	ip, #1
   1913c:	movw	r3, #1023	; 0x3ff
   19140:	movt	r3, #126	; 0x7e
   19144:	tst	r3, ip, lsl r2
   19148:	bxne	lr
   1914c:	sub	r1, r1, #97	; 0x61
   19150:	cmp	r1, #6
   19154:	movcs	r0, #0
   19158:	bxcs	lr
   1915c:	bx	lr
   19160:	sub	r1, r0, #65	; 0x41
   19164:	cmp	r1, #26
   19168:	addcc	r0, r0, #32
   1916c:	bx	lr
   19170:	sub	r1, r0, #97	; 0x61
   19174:	cmp	r1, #26
   19178:	subcc	r0, r0, #32
   1917c:	bx	lr
   19180:	push	{r4, r5, r6, sl, fp, lr}
   19184:	add	fp, sp, #16
   19188:	mov	r4, r0
   1918c:	bl	112d4 <__fpending@plt>
   19190:	mov	r5, r0
   19194:	mov	r0, r4
   19198:	bl	112e0 <ferror_unlocked@plt>
   1919c:	mov	r6, r0
   191a0:	mov	r0, r4
   191a4:	bl	19318 <__assert_fail@plt+0x7e28>
   191a8:	cmp	r6, #0
   191ac:	beq	191d0 <__assert_fail@plt+0x7ce0>
   191b0:	mvn	r4, #0
   191b4:	cmp	r0, #0
   191b8:	bne	191fc <__assert_fail@plt+0x7d0c>
   191bc:	bl	113a0 <__errno_location@plt>
   191c0:	mov	r1, #0
   191c4:	str	r1, [r0]
   191c8:	mov	r0, r4
   191cc:	pop	{r4, r5, r6, sl, fp, pc}
   191d0:	cmp	r0, #0
   191d4:	mov	r4, r0
   191d8:	mvnne	r4, #0
   191dc:	cmp	r5, #0
   191e0:	bne	191fc <__assert_fail@plt+0x7d0c>
   191e4:	cmp	r0, #0
   191e8:	beq	191fc <__assert_fail@plt+0x7d0c>
   191ec:	bl	113a0 <__errno_location@plt>
   191f0:	ldr	r0, [r0]
   191f4:	subs	r4, r0, #9
   191f8:	mvnne	r4, #0
   191fc:	mov	r0, r4
   19200:	pop	{r4, r5, r6, sl, fp, pc}
   19204:	mov	r1, #0
   19208:	movw	r2, #62998	; 0xf616
   1920c:	movt	r2, #149	; 0x95
   19210:	str	r1, [r0, #16]
   19214:	str	r1, [r0, #20]
   19218:	str	r2, [r0, #24]
   1921c:	bx	lr
   19220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19224:	add	fp, sp, #24
   19228:	mov	r5, r1
   1922c:	mov	r4, r0
   19230:	ldr	r0, [r0, #24]
   19234:	movw	r1, #62998	; 0xf616
   19238:	movt	r1, #149	; 0x95
   1923c:	cmp	r0, r1
   19240:	bne	192d8 <__assert_fail@plt+0x7de8>
   19244:	add	r6, r4, #8
   19248:	add	r1, r4, #16
   1924c:	ldrd	r2, [r1]
   19250:	orrs	r0, r2, r3
   19254:	beq	1928c <__assert_fail@plt+0x7d9c>
   19258:	ldm	r4, {r0, r7}
   1925c:	ldrd	r8, [r5, #96]	; 0x60
   19260:	eor	r7, r9, r7
   19264:	eor	r0, r8, r0
   19268:	orrs	r0, r0, r7
   1926c:	bne	1928c <__assert_fail@plt+0x7d9c>
   19270:	ldm	r6, {r0, r7}
   19274:	ldrd	r8, [r5]
   19278:	eor	r7, r9, r7
   1927c:	eor	r0, r8, r0
   19280:	orrs	r0, r0, r7
   19284:	mov	r0, #1
   19288:	beq	192cc <__assert_fail@plt+0x7ddc>
   1928c:	adds	r8, r2, #1
   19290:	adc	r9, r3, #0
   19294:	strd	r8, [r1]
   19298:	mov	r0, r8
   1929c:	mov	r1, r9
   192a0:	bl	192f8 <__assert_fail@plt+0x7e08>
   192a4:	mov	r1, r0
   192a8:	mov	r0, #0
   192ac:	cmp	r1, #0
   192b0:	beq	192cc <__assert_fail@plt+0x7ddc>
   192b4:	orrs	r1, r8, r9
   192b8:	beq	192d0 <__assert_fail@plt+0x7de0>
   192bc:	ldrd	r2, [r5]
   192c0:	strd	r2, [r6]
   192c4:	ldrd	r2, [r5, #96]	; 0x60
   192c8:	strd	r2, [r4]
   192cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   192d0:	mov	r0, #1
   192d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   192d8:	movw	r0, #44911	; 0xaf6f
   192dc:	movt	r0, #1
   192e0:	movw	r1, #44935	; 0xaf87
   192e4:	movt	r1, #1
   192e8:	movw	r3, #44953	; 0xaf99
   192ec:	movt	r3, #1
   192f0:	mov	r2, #60	; 0x3c
   192f4:	bl	114f0 <__assert_fail@plt>
   192f8:	subs	r2, r0, #1
   192fc:	and	r0, r0, r2
   19300:	sbc	r2, r1, #0
   19304:	and	r1, r1, r2
   19308:	orr	r0, r0, r1
   1930c:	clz	r0, r0
   19310:	lsr	r0, r0, #5
   19314:	bx	lr
   19318:	push	{r4, r5, fp, lr}
   1931c:	add	fp, sp, #8
   19320:	sub	sp, sp, #8
   19324:	mov	r4, r0
   19328:	bl	113d0 <fileno@plt>
   1932c:	cmn	r0, #1
   19330:	ble	193a8 <__assert_fail@plt+0x7eb8>
   19334:	mov	r0, r4
   19338:	bl	11328 <__freading@plt>
   1933c:	cmp	r0, #0
   19340:	beq	1936c <__assert_fail@plt+0x7e7c>
   19344:	mov	r0, r4
   19348:	bl	113d0 <fileno@plt>
   1934c:	mov	r1, #1
   19350:	str	r1, [sp]
   19354:	mov	r2, #0
   19358:	mov	r3, #0
   1935c:	bl	112bc <lseek64@plt>
   19360:	and	r0, r0, r1
   19364:	cmn	r0, #1
   19368:	beq	193a8 <__assert_fail@plt+0x7eb8>
   1936c:	mov	r0, r4
   19370:	bl	195d8 <__assert_fail@plt+0x80e8>
   19374:	cmp	r0, #0
   19378:	beq	193a8 <__assert_fail@plt+0x7eb8>
   1937c:	bl	113a0 <__errno_location@plt>
   19380:	ldr	r5, [r0]
   19384:	mov	r0, r4
   19388:	bl	113f4 <fclose@plt>
   1938c:	cmp	r5, #0
   19390:	beq	193a0 <__assert_fail@plt+0x7eb0>
   19394:	bl	113a0 <__errno_location@plt>
   19398:	str	r5, [r0]
   1939c:	mvn	r0, #0
   193a0:	sub	sp, fp, #8
   193a4:	pop	{r4, r5, fp, pc}
   193a8:	mov	r0, r4
   193ac:	sub	sp, fp, #8
   193b0:	pop	{r4, r5, fp, lr}
   193b4:	b	113f4 <fclose@plt>
   193b8:	sub	sp, sp, #8
   193bc:	push	{fp, lr}
   193c0:	mov	fp, sp
   193c4:	sub	sp, sp, #8
   193c8:	str	r2, [fp, #8]
   193cc:	str	r3, [fp, #12]
   193d0:	add	r2, fp, #8
   193d4:	str	r2, [sp, #4]
   193d8:	cmp	r1, #11
   193dc:	bhi	1941c <__assert_fail@plt+0x7f2c>
   193e0:	mov	r2, #1
   193e4:	movw	r3, #1300	; 0x514
   193e8:	tst	r3, r2, lsl r1
   193ec:	bne	1946c <__assert_fail@plt+0x7f7c>
   193f0:	movw	r3, #2570	; 0xa0a
   193f4:	tst	r3, r2, lsl r1
   193f8:	bne	19444 <__assert_fail@plt+0x7f54>
   193fc:	cmp	r1, #0
   19400:	bne	1941c <__assert_fail@plt+0x7f2c>
   19404:	ldr	r1, [sp, #4]
   19408:	add	r2, r1, #4
   1940c:	str	r2, [sp, #4]
   19410:	ldr	r1, [r1]
   19414:	bl	19490 <__assert_fail@plt+0x7fa0>
   19418:	b	19480 <__assert_fail@plt+0x7f90>
   1941c:	sub	r2, r1, #1024	; 0x400
   19420:	cmp	r2, #10
   19424:	bhi	1946c <__assert_fail@plt+0x7f7c>
   19428:	mov	ip, #1
   1942c:	movw	r3, #645	; 0x285
   19430:	tst	r3, ip, lsl r2
   19434:	bne	1946c <__assert_fail@plt+0x7f7c>
   19438:	movw	r3, #1282	; 0x502
   1943c:	tst	r3, ip, lsl r2
   19440:	beq	1944c <__assert_fail@plt+0x7f5c>
   19444:	bl	1140c <fcntl64@plt>
   19448:	b	19480 <__assert_fail@plt+0x7f90>
   1944c:	cmp	r2, #6
   19450:	bne	1946c <__assert_fail@plt+0x7f7c>
   19454:	ldr	r1, [sp, #4]
   19458:	add	r2, r1, #4
   1945c:	str	r2, [sp, #4]
   19460:	ldr	r1, [r1]
   19464:	bl	1949c <__assert_fail@plt+0x7fac>
   19468:	b	19480 <__assert_fail@plt+0x7f90>
   1946c:	ldr	r2, [sp, #4]
   19470:	add	r3, r2, #4
   19474:	str	r3, [sp, #4]
   19478:	ldr	r2, [r2]
   1947c:	bl	1140c <fcntl64@plt>
   19480:	mov	sp, fp
   19484:	pop	{fp, lr}
   19488:	add	sp, sp, #8
   1948c:	bx	lr
   19490:	mov	r2, r1
   19494:	mov	r1, #0
   19498:	b	1140c <fcntl64@plt>
   1949c:	push	{r4, r5, r6, r7, fp, lr}
   194a0:	add	fp, sp, #16
   194a4:	mov	r5, r1
   194a8:	mov	r6, r0
   194ac:	movw	r7, #49904	; 0xc2f0
   194b0:	movt	r7, #2
   194b4:	ldr	r0, [r7]
   194b8:	cmp	r0, #0
   194bc:	bmi	19520 <__assert_fail@plt+0x8030>
   194c0:	mov	r0, r6
   194c4:	movw	r1, #1030	; 0x406
   194c8:	mov	r2, r5
   194cc:	bl	1140c <fcntl64@plt>
   194d0:	mov	r4, r0
   194d4:	cmn	r0, #1
   194d8:	bgt	1950c <__assert_fail@plt+0x801c>
   194dc:	bl	113a0 <__errno_location@plt>
   194e0:	ldr	r0, [r0]
   194e4:	cmp	r0, #22
   194e8:	bne	1950c <__assert_fail@plt+0x801c>
   194ec:	mov	r0, r6
   194f0:	mov	r1, r5
   194f4:	bl	19490 <__assert_fail@plt+0x7fa0>
   194f8:	mov	r4, r0
   194fc:	cmp	r0, #0
   19500:	bmi	19570 <__assert_fail@plt+0x8080>
   19504:	mvn	r0, #0
   19508:	b	19510 <__assert_fail@plt+0x8020>
   1950c:	mov	r0, #1
   19510:	str	r0, [r7]
   19514:	cmp	r4, #0
   19518:	bpl	19538 <__assert_fail@plt+0x8048>
   1951c:	b	19570 <__assert_fail@plt+0x8080>
   19520:	mov	r0, r6
   19524:	mov	r1, r5
   19528:	bl	19490 <__assert_fail@plt+0x7fa0>
   1952c:	mov	r4, r0
   19530:	cmp	r4, #0
   19534:	bmi	19570 <__assert_fail@plt+0x8080>
   19538:	ldr	r0, [r7]
   1953c:	cmn	r0, #1
   19540:	bne	19570 <__assert_fail@plt+0x8080>
   19544:	mov	r0, r4
   19548:	mov	r1, #1
   1954c:	bl	1140c <fcntl64@plt>
   19550:	cmp	r0, #0
   19554:	bmi	19578 <__assert_fail@plt+0x8088>
   19558:	orr	r2, r0, #1
   1955c:	mov	r0, r4
   19560:	mov	r1, #2
   19564:	bl	1140c <fcntl64@plt>
   19568:	cmn	r0, #1
   1956c:	beq	19578 <__assert_fail@plt+0x8088>
   19570:	mov	r0, r4
   19574:	pop	{r4, r5, r6, r7, fp, pc}
   19578:	bl	113a0 <__errno_location@plt>
   1957c:	mov	r5, r0
   19580:	ldr	r6, [r0]
   19584:	mov	r0, r4
   19588:	bl	114b4 <close@plt>
   1958c:	str	r6, [r5]
   19590:	mvn	r4, #0
   19594:	mov	r0, r4
   19598:	pop	{r4, r5, r6, r7, fp, pc}
   1959c:	sub	sp, sp, #8
   195a0:	push	{fp, lr}
   195a4:	mov	fp, sp
   195a8:	sub	sp, sp, #8
   195ac:	str	r2, [fp, #8]
   195b0:	str	r3, [fp, #12]
   195b4:	mov	r2, #0
   195b8:	tst	r1, #64	; 0x40
   195bc:	ldrne	r2, [fp, #8]
   195c0:	bl	11304 <open64@plt>
   195c4:	bl	17da8 <__assert_fail@plt+0x68b8>
   195c8:	mov	sp, fp
   195cc:	pop	{fp, lr}
   195d0:	add	sp, sp, #8
   195d4:	bx	lr
   195d8:	push	{r4, sl, fp, lr}
   195dc:	add	fp, sp, #8
   195e0:	mov	r4, r0
   195e4:	cmp	r0, #0
   195e8:	beq	19600 <__assert_fail@plt+0x8110>
   195ec:	mov	r0, r4
   195f0:	bl	11328 <__freading@plt>
   195f4:	cmp	r0, #0
   195f8:	movne	r0, r4
   195fc:	blne	1960c <__assert_fail@plt+0x811c>
   19600:	mov	r0, r4
   19604:	pop	{r4, sl, fp, lr}
   19608:	b	11214 <fflush@plt>
   1960c:	push	{fp, lr}
   19610:	mov	fp, sp
   19614:	sub	sp, sp, #8
   19618:	ldrb	r1, [r0, #1]
   1961c:	tst	r1, #1
   19620:	beq	19638 <__assert_fail@plt+0x8148>
   19624:	mov	r1, #1
   19628:	str	r1, [sp]
   1962c:	mov	r2, #0
   19630:	mov	r3, #0
   19634:	bl	19640 <__assert_fail@plt+0x8150>
   19638:	mov	sp, fp
   1963c:	pop	{fp, pc}
   19640:	push	{r4, r5, r6, r7, fp, lr}
   19644:	add	fp, sp, #16
   19648:	sub	sp, sp, #8
   1964c:	mov	r5, r3
   19650:	mov	r6, r2
   19654:	mov	r4, r0
   19658:	ldr	r0, [r0, #4]
   1965c:	ldr	r1, [r4, #8]
   19660:	cmp	r1, r0
   19664:	bne	19680 <__assert_fail@plt+0x8190>
   19668:	ldrd	r0, [r4, #16]
   1966c:	cmp	r1, r0
   19670:	bne	19680 <__assert_fail@plt+0x8190>
   19674:	ldr	r0, [r4, #36]	; 0x24
   19678:	cmp	r0, #0
   1967c:	beq	19698 <__assert_fail@plt+0x81a8>
   19680:	mov	r0, r4
   19684:	mov	r2, r6
   19688:	mov	r3, r5
   1968c:	sub	sp, fp, #16
   19690:	pop	{r4, r5, r6, r7, fp, lr}
   19694:	b	11400 <fseeko64@plt>
   19698:	ldr	r7, [fp, #8]
   1969c:	mov	r0, r4
   196a0:	bl	113d0 <fileno@plt>
   196a4:	str	r7, [sp]
   196a8:	mov	r2, r6
   196ac:	mov	r3, r5
   196b0:	bl	112bc <lseek64@plt>
   196b4:	and	r2, r0, r1
   196b8:	cmn	r2, #1
   196bc:	beq	196dc <__assert_fail@plt+0x81ec>
   196c0:	strd	r0, [r4, #80]	; 0x50
   196c4:	ldr	r0, [r4]
   196c8:	bic	r0, r0, #16
   196cc:	str	r0, [r4]
   196d0:	mov	r0, #0
   196d4:	sub	sp, fp, #16
   196d8:	pop	{r4, r5, r6, r7, fp, pc}
   196dc:	mvn	r0, #0
   196e0:	sub	sp, fp, #16
   196e4:	pop	{r4, r5, r6, r7, fp, pc}
   196e8:	push	{fp, lr}
   196ec:	mov	fp, sp
   196f0:	bl	113a0 <__errno_location@plt>
   196f4:	mov	r1, #12
   196f8:	str	r1, [r0]
   196fc:	mov	r0, #0
   19700:	pop	{fp, pc}
   19704:	b	18c90 <__assert_fail@plt+0x77a0>
   19708:	cmp	r1, #0
   1970c:	orreq	r1, r1, #1
   19710:	b	18cc0 <__assert_fail@plt+0x77d0>
   19714:	b	18c3c <__assert_fail@plt+0x774c>
   19718:	clz	r3, r2
   1971c:	lsr	ip, r3, #5
   19720:	clz	r3, r1
   19724:	lsr	r3, r3, #5
   19728:	orrs	r3, r3, ip
   1972c:	movwne	r1, #1
   19730:	movwne	r2, #1
   19734:	b	197d4 <__assert_fail@plt+0x82e4>
   19738:	push	{fp, lr}
   1973c:	mov	fp, sp
   19740:	mov	r0, #14
   19744:	bl	11430 <nl_langinfo@plt>
   19748:	movw	r1, #41364	; 0xa194
   1974c:	movt	r1, #1
   19750:	cmp	r0, #0
   19754:	movne	r1, r0
   19758:	ldrb	r2, [r1]
   1975c:	movw	r0, #45020	; 0xafdc
   19760:	movt	r0, #1
   19764:	cmp	r2, #0
   19768:	movne	r0, r1
   1976c:	pop	{fp, pc}
   19770:	push	{r4, r5, r6, r7, fp, lr}
   19774:	add	fp, sp, #16
   19778:	sub	sp, sp, #8
   1977c:	mov	r7, r2
   19780:	mov	r4, r1
   19784:	add	r5, sp, #4
   19788:	cmp	r0, #0
   1978c:	movne	r5, r0
   19790:	mov	r0, r5
   19794:	bl	112ec <mbrtowc@plt>
   19798:	mov	r6, r0
   1979c:	cmp	r7, #0
   197a0:	beq	197c8 <__assert_fail@plt+0x82d8>
   197a4:	cmn	r6, #2
   197a8:	bcc	197c8 <__assert_fail@plt+0x82d8>
   197ac:	mov	r0, #0
   197b0:	bl	1981c <__assert_fail@plt+0x832c>
   197b4:	cmp	r0, #0
   197b8:	bne	197c8 <__assert_fail@plt+0x82d8>
   197bc:	ldrb	r0, [r4]
   197c0:	str	r0, [r5]
   197c4:	mov	r6, #1
   197c8:	mov	r0, r6
   197cc:	sub	sp, fp, #16
   197d0:	pop	{r4, r5, r6, r7, fp, pc}
   197d4:	cmp	r2, #0
   197d8:	beq	19808 <__assert_fail@plt+0x8318>
   197dc:	mvn	r3, #0
   197e0:	udiv	r3, r3, r2
   197e4:	cmp	r3, r1
   197e8:	bcs	19808 <__assert_fail@plt+0x8318>
   197ec:	push	{fp, lr}
   197f0:	mov	fp, sp
   197f4:	bl	113a0 <__errno_location@plt>
   197f8:	mov	r1, #12
   197fc:	str	r1, [r0]
   19800:	mov	r0, #0
   19804:	pop	{fp, pc}
   19808:	mul	r1, r2, r1
   1980c:	b	18cc0 <__assert_fail@plt+0x77d0>
   19810:	mov	r1, #0
   19814:	mov	r2, #3
   19818:	b	193b8 <__assert_fail@plt+0x7ec8>
   1981c:	push	{r4, sl, fp, lr}
   19820:	add	fp, sp, #8
   19824:	sub	sp, sp, #264	; 0x108
   19828:	add	r1, sp, #7
   1982c:	movw	r2, #257	; 0x101
   19830:	bl	19888 <__assert_fail@plt+0x8398>
   19834:	mov	r4, #0
   19838:	cmp	r0, #0
   1983c:	bne	1987c <__assert_fail@plt+0x838c>
   19840:	add	r0, sp, #7
   19844:	movw	r1, #45026	; 0xafe2
   19848:	movt	r1, #1
   1984c:	mov	r2, #2
   19850:	bl	11364 <bcmp@plt>
   19854:	cmp	r0, #0
   19858:	beq	1987c <__assert_fail@plt+0x838c>
   1985c:	add	r0, sp, #7
   19860:	movw	r1, #45028	; 0xafe4
   19864:	movt	r1, #1
   19868:	mov	r2, #6
   1986c:	bl	11364 <bcmp@plt>
   19870:	mov	r4, r0
   19874:	cmp	r0, #0
   19878:	movwne	r4, #1
   1987c:	mov	r0, r4
   19880:	sub	sp, fp, #8
   19884:	pop	{r4, sl, fp, pc}
   19888:	b	1988c <__assert_fail@plt+0x839c>
   1988c:	push	{r4, r5, r6, r7, fp, lr}
   19890:	add	fp, sp, #16
   19894:	mov	r6, r2
   19898:	mov	r4, r1
   1989c:	bl	19924 <__assert_fail@plt+0x8434>
   198a0:	cmp	r0, #0
   198a4:	beq	198d4 <__assert_fail@plt+0x83e4>
   198a8:	mov	r7, r0
   198ac:	bl	11370 <strlen@plt>
   198b0:	cmp	r0, r6
   198b4:	bcs	198f0 <__assert_fail@plt+0x8400>
   198b8:	add	r2, r0, #1
   198bc:	mov	r0, r4
   198c0:	mov	r1, r7
   198c4:	bl	11244 <memcpy@plt>
   198c8:	mov	r5, #0
   198cc:	mov	r0, r5
   198d0:	pop	{r4, r5, r6, r7, fp, pc}
   198d4:	mov	r5, #22
   198d8:	cmp	r6, #0
   198dc:	beq	19918 <__assert_fail@plt+0x8428>
   198e0:	mov	r0, #0
   198e4:	strb	r0, [r4]
   198e8:	mov	r0, r5
   198ec:	pop	{r4, r5, r6, r7, fp, pc}
   198f0:	mov	r5, #34	; 0x22
   198f4:	cmp	r6, #0
   198f8:	beq	19918 <__assert_fail@plt+0x8428>
   198fc:	sub	r6, r6, #1
   19900:	mov	r0, r4
   19904:	mov	r1, r7
   19908:	mov	r2, r6
   1990c:	bl	11244 <memcpy@plt>
   19910:	mov	r0, #0
   19914:	strb	r0, [r4, r6]
   19918:	mov	r0, r5
   1991c:	pop	{r4, r5, r6, r7, fp, pc}
   19920:	b	19924 <__assert_fail@plt+0x8434>
   19924:	mov	r1, #0
   19928:	b	11418 <setlocale@plt>
   1992c:	cmp	r3, #0
   19930:	cmpeq	r2, #0
   19934:	bne	1994c <__assert_fail@plt+0x845c>
   19938:	cmp	r1, #0
   1993c:	cmpeq	r0, #0
   19940:	mvnne	r1, #0
   19944:	mvnne	r0, #0
   19948:	b	19968 <__assert_fail@plt+0x8478>
   1994c:	sub	sp, sp, #8
   19950:	push	{sp, lr}
   19954:	bl	19978 <__assert_fail@plt+0x8488>
   19958:	ldr	lr, [sp, #4]
   1995c:	add	sp, sp, #8
   19960:	pop	{r2, r3}
   19964:	bx	lr
   19968:	push	{r1, lr}
   1996c:	mov	r0, #8
   19970:	bl	111f0 <raise@plt>
   19974:	pop	{r1, pc}
   19978:	cmp	r1, r3
   1997c:	cmpeq	r0, r2
   19980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19984:	mov	r4, r0
   19988:	movcc	r0, #0
   1998c:	mov	r5, r1
   19990:	ldr	lr, [sp, #36]	; 0x24
   19994:	movcc	r1, r0
   19998:	bcc	19a94 <__assert_fail@plt+0x85a4>
   1999c:	cmp	r3, #0
   199a0:	clzeq	ip, r2
   199a4:	clzne	ip, r3
   199a8:	addeq	ip, ip, #32
   199ac:	cmp	r5, #0
   199b0:	clzeq	r1, r4
   199b4:	addeq	r1, r1, #32
   199b8:	clzne	r1, r5
   199bc:	sub	ip, ip, r1
   199c0:	sub	sl, ip, #32
   199c4:	lsl	r9, r3, ip
   199c8:	rsb	fp, ip, #32
   199cc:	orr	r9, r9, r2, lsl sl
   199d0:	orr	r9, r9, r2, lsr fp
   199d4:	lsl	r8, r2, ip
   199d8:	cmp	r5, r9
   199dc:	cmpeq	r4, r8
   199e0:	movcc	r0, #0
   199e4:	movcc	r1, r0
   199e8:	bcc	19a04 <__assert_fail@plt+0x8514>
   199ec:	mov	r0, #1
   199f0:	subs	r4, r4, r8
   199f4:	lsl	r1, r0, sl
   199f8:	orr	r1, r1, r0, lsr fp
   199fc:	lsl	r0, r0, ip
   19a00:	sbc	r5, r5, r9
   19a04:	cmp	ip, #0
   19a08:	beq	19a94 <__assert_fail@plt+0x85a4>
   19a0c:	lsr	r6, r8, #1
   19a10:	orr	r6, r6, r9, lsl #31
   19a14:	lsr	r7, r9, #1
   19a18:	mov	r2, ip
   19a1c:	b	19a40 <__assert_fail@plt+0x8550>
   19a20:	subs	r3, r4, r6
   19a24:	sbc	r8, r5, r7
   19a28:	adds	r3, r3, r3
   19a2c:	adc	r8, r8, r8
   19a30:	adds	r4, r3, #1
   19a34:	adc	r5, r8, #0
   19a38:	subs	r2, r2, #1
   19a3c:	beq	19a5c <__assert_fail@plt+0x856c>
   19a40:	cmp	r5, r7
   19a44:	cmpeq	r4, r6
   19a48:	bcs	19a20 <__assert_fail@plt+0x8530>
   19a4c:	adds	r4, r4, r4
   19a50:	adc	r5, r5, r5
   19a54:	subs	r2, r2, #1
   19a58:	bne	19a40 <__assert_fail@plt+0x8550>
   19a5c:	lsr	r3, r4, ip
   19a60:	orr	r3, r3, r5, lsl fp
   19a64:	lsr	r2, r5, ip
   19a68:	orr	r3, r3, r5, lsr sl
   19a6c:	adds	r0, r0, r4
   19a70:	mov	r4, r3
   19a74:	lsl	r3, r2, ip
   19a78:	orr	r3, r3, r4, lsl sl
   19a7c:	lsl	ip, r4, ip
   19a80:	orr	r3, r3, r4, lsr fp
   19a84:	adc	r1, r1, r5
   19a88:	subs	r0, r0, ip
   19a8c:	mov	r5, r2
   19a90:	sbc	r1, r1, r3
   19a94:	cmp	lr, #0
   19a98:	strdne	r4, [lr]
   19a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19aa4:	mov	r7, r0
   19aa8:	ldr	r6, [pc, #72]	; 19af8 <__assert_fail@plt+0x8608>
   19aac:	ldr	r5, [pc, #72]	; 19afc <__assert_fail@plt+0x860c>
   19ab0:	add	r6, pc, r6
   19ab4:	add	r5, pc, r5
   19ab8:	sub	r6, r6, r5
   19abc:	mov	r8, r1
   19ac0:	mov	r9, r2
   19ac4:	bl	111a0 <fstatfs64@plt-0x20>
   19ac8:	asrs	r6, r6, #2
   19acc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ad0:	mov	r4, #0
   19ad4:	add	r4, r4, #1
   19ad8:	ldr	r3, [r5], #4
   19adc:	mov	r2, r9
   19ae0:	mov	r1, r8
   19ae4:	mov	r0, r7
   19ae8:	blx	r3
   19aec:	cmp	r6, r4
   19af0:	bne	19ad4 <__assert_fail@plt+0x85e4>
   19af4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19af8:	andeq	r2, r1, r4, asr r4
   19afc:	andeq	r2, r1, ip, asr #8
   19b00:	bx	lr
   19b04:	ldr	r3, [pc, #12]	; 19b18 <__assert_fail@plt+0x8628>
   19b08:	mov	r1, #0
   19b0c:	add	r3, pc, r3
   19b10:	ldr	r2, [r3]
   19b14:	b	113ac <__cxa_atexit@plt>
   19b18:	andeq	r2, r1, r8, lsl r6
   19b1c:	mov	r2, r1
   19b20:	mov	r1, r0
   19b24:	mov	r0, #3
   19b28:	b	11490 <__xstat64@plt>
   19b2c:	mov	r2, r1
   19b30:	mov	r1, r0
   19b34:	mov	r0, #3
   19b38:	b	112a4 <__fxstat64@plt>
   19b3c:	mov	r2, r1
   19b40:	mov	r1, r0
   19b44:	mov	r0, #3
   19b48:	b	114c0 <__lxstat64@plt>
   19b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   19b50:	sub	sp, sp, #12
   19b54:	str	r3, [sp]
   19b58:	mov	r3, r2
   19b5c:	mov	r2, r1
   19b60:	mov	r1, r0
   19b64:	mov	r0, #3
   19b68:	bl	1128c <__fxstatat64@plt>
   19b6c:	add	sp, sp, #12
   19b70:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019b74 <.fini>:
   19b74:	push	{r3, lr}
   19b78:	pop	{r3, pc}
