
../repos/prog2/0.10:     file format elf32-littlearm


Disassembly of section .init:

00010630 <.init>:
   10630:	push	{r3, lr}
   10634:	bl	1075c <_start@@Base+0x3c>
   10638:	pop	{r3, pc}

Disassembly of section .plt:

0001063c <printf@plt-0x14>:
   1063c:	push	{lr}		; (str lr, [sp, #-4]!)
   10640:	ldr	lr, [pc, #4]	; 1064c <printf@plt-0x4>
   10644:	add	lr, pc, lr
   10648:	ldr	pc, [lr, #8]!
   1064c:			; <UNDEFINED> instruction: 0x000109b4

00010650 <printf@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2484]!	; 0x9b4

0001065c <memcpy@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2476]!	; 0x9ac

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2468]!	; 0x9a4

00010674 <__gmon_start__@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2460]!	; 0x99c

00010680 <__isoc99_scanf@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2452]!	; 0x994

0001068c <abort@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2444]!	; 0x98c

Disassembly of section .text:

00010698 <main@@Base>:
   10698:	push	{r4, lr}
   1069c:	sub	sp, sp, #6848	; 0x1ac0
   106a0:	sub	sp, sp, #32
   106a4:	add	r3, sp, #80	; 0x50
   106a8:	mov	r0, r3
   106ac:	str	r3, [sp]
   106b0:	bl	10884 <ler_tarefas@@Base>
   106b4:	mov	r4, r0
   106b8:	mov	r1, r0
   106bc:	ldr	r0, [sp]
   106c0:	bl	108e0 <lista_tarefas@@Base>
   106c4:	mov	r1, r4
   106c8:	ldr	r0, [pc, #68]	; 10714 <main@@Base+0x7c>
   106cc:	bl	10650 <printf@plt>
   106d0:	add	r3, sp, #12
   106d4:	mov	r1, r4
   106d8:	ldr	r0, [sp]
   106dc:	mov	r2, r3
   106e0:	str	r3, [sp, #4]
   106e4:	bl	10934 <analisa_tarefas@@Base>
   106e8:	ldr	r0, [pc, #40]	; 10718 <main@@Base+0x80>
   106ec:	vcvt.f64.f32	d7, s0
   106f0:	vmov	r2, r3, d7
   106f4:	bl	10650 <printf@plt>
   106f8:	ldr	r1, [sp, #4]
   106fc:	ldr	r0, [pc, #24]	; 1071c <main@@Base+0x84>
   10700:	bl	10650 <printf@plt>
   10704:	mov	r0, #0
   10708:	add	sp, sp, #6848	; 0x1ac0
   1070c:	add	sp, sp, #32
   10710:	pop	{r4, pc}
   10714:	andeq	r0, r1, r0, asr #20
   10718:	andeq	r0, r1, r0, ror #20
   1071c:	andeq	r0, r1, r4, lsl #21

00010720 <_start@@Base>:
   10720:	mov	fp, #0
   10724:	mov	lr, #0
   10728:	pop	{r1}		; (ldr r1, [sp], #4)
   1072c:	mov	r2, sp
   10730:	push	{r2}		; (str r2, [sp, #-4]!)
   10734:	push	{r0}		; (str r0, [sp, #-4]!)
   10738:	ldr	ip, [pc, #16]	; 10750 <_start@@Base+0x30>
   1073c:	push	{ip}		; (str ip, [sp, #-4]!)
   10740:	ldr	r0, [pc, #12]	; 10754 <_start@@Base+0x34>
   10744:	ldr	r3, [pc, #12]	; 10758 <_start@@Base+0x38>
   10748:	bl	10668 <__libc_start_main@plt>
   1074c:	bl	1068c <abort@plt>
   10750:	andeq	r0, r1, r4, lsl sl
   10754:	muleq	r1, r8, r6
   10758:			; <UNDEFINED> instruction: 0x000109b4
   1075c:	ldr	r3, [pc, #20]	; 10778 <_start@@Base+0x58>
   10760:	ldr	r2, [pc, #20]	; 1077c <_start@@Base+0x5c>
   10764:	add	r3, pc, r3
   10768:	ldr	r2, [r3, r2]
   1076c:	cmp	r2, #0
   10770:	bxeq	lr
   10774:	b	10674 <__gmon_start__@plt>
   10778:	muleq	r1, r4, r8
   1077c:	andeq	r0, r0, r4, lsr #32
   10780:	ldr	r3, [pc, #28]	; 107a4 <_start@@Base+0x84>
   10784:	ldr	r0, [pc, #28]	; 107a8 <_start@@Base+0x88>
   10788:	sub	r3, r3, r0
   1078c:	cmp	r3, #6
   10790:	bxls	lr
   10794:	ldr	r3, [pc, #16]	; 107ac <_start@@Base+0x8c>
   10798:	cmp	r3, #0
   1079c:	bxeq	lr
   107a0:	bx	r3
   107a4:	andeq	r1, r2, r3, lsr r0
   107a8:	andeq	r1, r2, r0, lsr r0
   107ac:	andeq	r0, r0, r0
   107b0:	ldr	r1, [pc, #36]	; 107dc <_start@@Base+0xbc>
   107b4:	ldr	r0, [pc, #36]	; 107e0 <_start@@Base+0xc0>
   107b8:	sub	r1, r1, r0
   107bc:	asr	r1, r1, #2
   107c0:	add	r1, r1, r1, lsr #31
   107c4:	asrs	r1, r1, #1
   107c8:	bxeq	lr
   107cc:	ldr	r3, [pc, #16]	; 107e4 <_start@@Base+0xc4>
   107d0:	cmp	r3, #0
   107d4:	bxeq	lr
   107d8:	bx	r3
   107dc:	andeq	r1, r2, r0, lsr r0
   107e0:	andeq	r1, r2, r0, lsr r0
   107e4:	andeq	r0, r0, r0
   107e8:	push	{r4, lr}
   107ec:	ldr	r4, [pc, #24]	; 1080c <_start@@Base+0xec>
   107f0:	ldrb	r3, [r4]
   107f4:	cmp	r3, #0
   107f8:	popne	{r4, pc}
   107fc:	bl	10780 <_start@@Base+0x60>
   10800:	mov	r3, #1
   10804:	strb	r3, [r4]
   10808:	pop	{r4, pc}
   1080c:	andeq	r1, r2, r0, lsr r0
   10810:	ldr	r0, [pc, #40]	; 10840 <_start@@Base+0x120>
   10814:	ldr	r3, [r0]
   10818:	cmp	r3, #0
   1081c:	bne	10824 <_start@@Base+0x104>
   10820:	b	107b0 <_start@@Base+0x90>
   10824:	ldr	r3, [pc, #24]	; 10844 <_start@@Base+0x124>
   10828:	cmp	r3, #0
   1082c:	beq	10820 <_start@@Base+0x100>
   10830:	push	{r4, lr}
   10834:	blx	r3
   10838:	pop	{r4, lr}
   1083c:	b	107b0 <_start@@Base+0x90>
   10840:	andeq	r0, r2, r4, lsl pc
   10844:	andeq	r0, r0, r0

00010848 <nova_tarefa@@Base>:
   10848:	push	{lr}		; (str lr, [sp, #-4]!)
   1084c:	sub	sp, sp, #12
   10850:	add	r3, r0, #64	; 0x40
   10854:	mov	r1, r0
   10858:	str	r3, [sp]
   1085c:	add	r2, r0, #30
   10860:	add	r3, r0, #60	; 0x3c
   10864:	ldr	r0, [pc, #20]	; 10880 <nova_tarefa@@Base+0x38>
   10868:	bl	10680 <__isoc99_scanf@plt>
   1086c:	sub	r0, r0, #4
   10870:	clz	r0, r0
   10874:	lsr	r0, r0, #5
   10878:	add	sp, sp, #12
   1087c:	pop	{pc}		; (ldr pc, [sp], #4)
   10880:	andeq	r0, r1, r4, lsr #20

00010884 <ler_tarefas@@Base>:
   10884:	push	{r4, r5, r6, lr}
   10888:	mov	r4, r0
   1088c:	ldr	r6, [pc, #72]	; 108dc <ler_tarefas@@Base+0x58>
   10890:	sub	sp, sp, #8
   10894:	mov	r5, #0
   10898:	add	r3, r4, #64	; 0x40
   1089c:	str	r3, [sp]
   108a0:	add	r2, r4, #30
   108a4:	add	r3, r4, #60	; 0x3c
   108a8:	mov	r1, r4
   108ac:	mov	r0, r6
   108b0:	bl	10680 <__isoc99_scanf@plt>
   108b4:	cmp	r0, #4
   108b8:	beq	108c8 <ler_tarefas@@Base+0x44>
   108bc:	mov	r0, r5
   108c0:	add	sp, sp, #8
   108c4:	pop	{r4, r5, r6, pc}
   108c8:	cmp	r5, #100	; 0x64
   108cc:	add	r4, r4, #68	; 0x44
   108d0:	beq	108bc <ler_tarefas@@Base+0x38>
   108d4:	add	r5, r5, #1
   108d8:	b	10898 <ler_tarefas@@Base+0x14>
   108dc:	andeq	r0, r1, r4, lsr #20

000108e0 <lista_tarefas@@Base>:
   108e0:	push	{r4, r5, r6, r7, lr}
   108e4:	subs	r6, r1, #0
   108e8:	sub	sp, sp, #12
   108ec:	ble	10928 <lista_tarefas@@Base+0x48>
   108f0:	ldr	r7, [pc, #56]	; 10930 <lista_tarefas@@Base+0x50>
   108f4:	mov	r4, r0
   108f8:	mov	r5, #0
   108fc:	ldr	r2, [r4, #64]	; 0x40
   10900:	ldr	r3, [r4, #60]	; 0x3c
   10904:	mov	r1, r4
   10908:	str	r2, [sp]
   1090c:	add	r5, r5, #1
   10910:	add	r2, r4, #30
   10914:	mov	r0, r7
   10918:	bl	10650 <printf@plt>
   1091c:	cmp	r6, r5
   10920:	add	r4, r4, #68	; 0x44
   10924:	bne	108fc <lista_tarefas@@Base+0x1c>
   10928:	add	sp, sp, #12
   1092c:	pop	{r4, r5, r6, r7, pc}
   10930:	andeq	r0, r1, r0, lsr sl

00010934 <analisa_tarefas@@Base>:
   10934:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10938:	subs	r9, r1, #0
   1093c:	ble	109a4 <analisa_tarefas@@Base+0x70>
   10940:	add	r8, r9, r9, lsl #4
   10944:	mov	r3, #0
   10948:	mov	r7, r2
   1094c:	mov	r4, r0
   10950:	add	r8, r0, r8, lsl #2
   10954:	mov	r6, r3
   10958:	mov	sl, #68	; 0x44
   1095c:	ldr	r5, [r4, #60]	; 0x3c
   10960:	mov	r1, r4
   10964:	cmp	r5, r3
   10968:	mov	r2, sl
   1096c:	mov	r0, r7
   10970:	add	r4, r4, #68	; 0x44
   10974:	add	r6, r6, r5
   10978:	ble	10984 <analisa_tarefas@@Base+0x50>
   1097c:	bl	1065c <memcpy@plt>
   10980:	mov	r3, r5
   10984:	cmp	r4, r8
   10988:	bne	1095c <analisa_tarefas@@Base+0x28>
   1098c:	vmov	s15, r6
   10990:	vmov	s14, r9
   10994:	vcvt.f32.s32	s15, s15
   10998:	vcvt.f32.s32	s0, s14
   1099c:	vdiv.f32	s0, s15, s0
   109a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109a4:	vldr	s0, [pc, #4]	; 109b0 <analisa_tarefas@@Base+0x7c>
   109a8:	vmov.f32	s15, s0
   109ac:	b	1099c <analisa_tarefas@@Base+0x68>
   109b0:	andeq	r0, r0, r0

000109b4 <__libc_csu_init@@Base>:
   109b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109b8:	mov	r7, r0
   109bc:	ldr	r6, [pc, #72]	; 10a0c <__libc_csu_init@@Base+0x58>
   109c0:	ldr	r5, [pc, #72]	; 10a10 <__libc_csu_init@@Base+0x5c>
   109c4:	add	r6, pc, r6
   109c8:	add	r5, pc, r5
   109cc:	sub	r6, r6, r5
   109d0:	mov	r8, r1
   109d4:	mov	r9, r2
   109d8:	bl	10630 <printf@plt-0x20>
   109dc:	asrs	r6, r6, #2
   109e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e4:	mov	r4, #0
   109e8:	add	r4, r4, #1
   109ec:	ldr	r3, [r5], #4
   109f0:	mov	r2, r9
   109f4:	mov	r1, r8
   109f8:	mov	r0, r7
   109fc:	blx	r3
   10a00:	cmp	r6, r4
   10a04:	bne	109e8 <__libc_csu_init@@Base+0x34>
   10a08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a0c:	andeq	r0, r1, r4, asr #10
   10a10:	andeq	r0, r1, ip, lsr r5

00010a14 <__libc_csu_fini@@Base>:
   10a14:	bx	lr

Disassembly of section .fini:

00010a18 <.fini>:
   10a18:	push	{r3, lr}
   10a1c:	pop	{r3, pc}
