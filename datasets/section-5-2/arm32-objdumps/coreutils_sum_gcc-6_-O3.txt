
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	114d4 <__assert_fail@plt+0x3d0>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <fdopen@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <fdopen@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	sl, r1, r4, asr #3

00010e40 <fdopen@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #106496	; 0x1a000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <calloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #106496	; 0x1a000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <fputs_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #106496	; 0x1a000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <raise@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #106496	; 0x1a000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <strcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #106496	; 0x1a000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <posix_fadvise64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #106496	; 0x1a000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #106496	; 0x1a000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <memmove@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #106496	; 0x1a000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #106496	; 0x1a000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <_exit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #106496	; 0x1a000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <memcpy@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #106496	; 0x1a000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <__strtoull_internal@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #106496	; 0x1a000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #106496	; 0x1a000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #106496	; 0x1a000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <fputc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #106496	; 0x1a000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #106496	; 0x1a000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #106496	; 0x1a000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <__memcpy_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <getenv@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__sprintf_chk@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__cxa_atexit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <setvbuf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <__fprintf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fclose@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <fseeko64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <fcntl64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <localeconv@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <fread_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #4]!

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11114:	mov	r5, r0
   11118:	sub	sp, sp, #44	; 0x2c
   1111c:	ldr	r0, [r1]
   11120:	mov	r4, r1
   11124:	bl	130a8 <__assert_fail@plt+0x1fa4>
   11128:	ldr	r1, [pc, #792]	; 11448 <__assert_fail@plt+0x344>
   1112c:	mov	r0, #6
   11130:	bl	11080 <setlocale@plt>
   11134:	ldr	r1, [pc, #784]	; 1144c <__assert_fail@plt+0x348>
   11138:	ldr	r0, [pc, #784]	; 11450 <__assert_fail@plt+0x34c>
   1113c:	bl	110c8 <bindtextdomain@plt>
   11140:	ldr	r9, [pc, #780]	; 11454 <__assert_fail@plt+0x350>
   11144:	ldr	r0, [pc, #772]	; 11450 <__assert_fail@plt+0x34c>
   11148:	bl	10f0c <textdomain@plt>
   1114c:	ldr	r0, [pc, #772]	; 11458 <__assert_fail@plt+0x354>
   11150:	bl	1a464 <__assert_fail@plt+0x9360>
   11154:	mov	r3, #0
   11158:	ldr	r0, [r9]
   1115c:	mov	r1, r3
   11160:	mov	r2, #1
   11164:	bl	11014 <setvbuf@plt>
   11168:	ldr	r8, [pc, #748]	; 1145c <__assert_fail@plt+0x358>
   1116c:	ldr	r7, [pc, #748]	; 11460 <__assert_fail@plt+0x35c>
   11170:	ldr	sl, [pc, #748]	; 11464 <__assert_fail@plt+0x360>
   11174:	mov	r6, #0
   11178:	mov	fp, #1
   1117c:	str	r6, [sp]
   11180:	mov	r3, r8
   11184:	mov	r2, r7
   11188:	mov	r1, r4
   1118c:	mov	r0, r5
   11190:	bl	10fb4 <getopt_long@plt>
   11194:	cmn	r0, #1
   11198:	beq	11214 <__assert_fail@plt+0x110>
   1119c:	cmn	r0, #2
   111a0:	beq	1120c <__assert_fail@plt+0x108>
   111a4:	ble	111c8 <__assert_fail@plt+0xc4>
   111a8:	cmp	r0, #114	; 0x72
   111ac:	beq	111c0 <__assert_fail@plt+0xbc>
   111b0:	cmp	r0, #115	; 0x73
   111b4:	bne	11204 <__assert_fail@plt+0x100>
   111b8:	str	fp, [sl]
   111bc:	b	1117c <__assert_fail@plt+0x78>
   111c0:	str	r6, [sl]
   111c4:	b	1117c <__assert_fail@plt+0x78>
   111c8:	cmn	r0, #3
   111cc:	bne	11204 <__assert_fail@plt+0x100>
   111d0:	ldr	r3, [pc, #656]	; 11468 <__assert_fail@plt+0x364>
   111d4:	ldr	r1, [pc, #656]	; 1146c <__assert_fail@plt+0x368>
   111d8:	ldr	r2, [pc, #656]	; 11470 <__assert_fail@plt+0x36c>
   111dc:	str	r6, [sp, #8]
   111e0:	ldr	r0, [r9]
   111e4:	ldr	r3, [r3]
   111e8:	str	r1, [sp, #4]
   111ec:	str	r2, [sp]
   111f0:	ldr	r1, [pc, #636]	; 11474 <__assert_fail@plt+0x370>
   111f4:	ldr	r2, [pc, #636]	; 11478 <__assert_fail@plt+0x374>
   111f8:	bl	17954 <__assert_fail@plt+0x6850>
   111fc:	mov	r0, #0
   11200:	bl	10fcc <exit@plt>
   11204:	mov	r0, #1
   11208:	bl	119e0 <__assert_fail@plt+0x8dc>
   1120c:	mov	r0, #0
   11210:	bl	119e0 <__assert_fail@plt+0x8dc>
   11214:	ldr	r3, [pc, #608]	; 1147c <__assert_fail@plt+0x378>
   11218:	add	fp, r4, r5, lsl #2
   1121c:	ldr	r8, [pc, #576]	; 11464 <__assert_fail@plt+0x360>
   11220:	ldr	r3, [r3]
   11224:	ldr	r9, [pc, #596]	; 11480 <__assert_fail@plt+0x37c>
   11228:	cmp	r5, r3
   1122c:	addeq	fp, fp, #4
   11230:	ldreq	r2, [pc, #588]	; 11484 <__assert_fail@plt+0x380>
   11234:	streq	r2, [r4, r5, lsl #2]
   11238:	add	r4, r4, r3, lsl #2
   1123c:	mov	r3, #1
   11240:	str	r3, [sp, #20]
   11244:	cmp	fp, r4
   11248:	bls	113bc <__assert_fail@plt+0x2b8>
   1124c:	ldr	r6, [r4], #4
   11250:	ldr	r1, [pc, #556]	; 11484 <__assert_fail@plt+0x380>
   11254:	mov	r0, r6
   11258:	bl	10e70 <strcmp@plt>
   1125c:	cmp	r0, #0
   11260:	bne	112f4 <__assert_fail@plt+0x1f0>
   11264:	ldr	r3, [pc, #540]	; 11488 <__assert_fail@plt+0x384>
   11268:	mov	r1, #2
   1126c:	ldr	r7, [r3]
   11270:	mov	r3, #1
   11274:	mov	r0, r7
   11278:	strb	r3, [r8, #4]
   1127c:	bl	11e00 <__assert_fail@plt+0xcfc>
   11280:	ldr	r3, [r8]
   11284:	mov	r0, r7
   11288:	add	r2, sp, #32
   1128c:	add	r3, r9, r3, lsl #2
   11290:	add	r1, sp, #24
   11294:	ldr	r3, [r3, #120]	; 0x78
   11298:	blx	r3
   1129c:	cmp	r0, #0
   112a0:	bne	11384 <__assert_fail@plt+0x280>
   112a4:	mov	r0, r7
   112a8:	bl	110b0 <clearerr_unlocked@plt>
   112ac:	ldr	r3, [pc, #456]	; 1147c <__assert_fail@plt+0x378>
   112b0:	ldr	r1, [r8]
   112b4:	mov	r0, #10
   112b8:	ldr	r2, [r3]
   112bc:	str	r0, [sp]
   112c0:	mov	r0, r6
   112c4:	ldrd	r6, [sp, #32]
   112c8:	subs	r2, r2, r5
   112cc:	add	r1, r9, r1, lsl #2
   112d0:	movne	r2, #1
   112d4:	mov	r3, #0
   112d8:	ldr	ip, [r1, #128]	; 0x80
   112dc:	str	r2, [sp, #4]
   112e0:	strd	r6, [sp, #8]
   112e4:	mov	r1, r3
   112e8:	add	r2, sp, #24
   112ec:	blx	ip
   112f0:	b	11244 <__assert_fail@plt+0x140>
   112f4:	ldr	r1, [pc, #400]	; 1148c <__assert_fail@plt+0x388>
   112f8:	mov	r0, r6
   112fc:	bl	11f34 <__assert_fail@plt+0xe30>
   11300:	subs	r7, r0, #0
   11304:	beq	11414 <__assert_fail@plt+0x310>
   11308:	mov	r1, #2
   1130c:	bl	11e00 <__assert_fail@plt+0xcfc>
   11310:	ldr	r3, [r8]
   11314:	add	r2, sp, #32
   11318:	add	r1, sp, #24
   1131c:	add	r3, r9, r3, lsl #2
   11320:	mov	r0, r7
   11324:	ldr	r3, [r3, #120]	; 0x78
   11328:	blx	r3
   1132c:	cmp	r0, #0
   11330:	bne	11398 <__assert_fail@plt+0x294>
   11334:	mov	r0, r7
   11338:	bl	11e34 <__assert_fail@plt+0xd30>
   1133c:	cmp	r0, #0
   11340:	beq	112ac <__assert_fail@plt+0x1a8>
   11344:	bl	10ff0 <__errno_location@plt>
   11348:	ldr	sl, [r0]
   1134c:	cmp	sl, #0
   11350:	beq	112ac <__assert_fail@plt+0x1a8>
   11354:	mov	r2, r6
   11358:	mov	r1, #3
   1135c:	mov	r0, #0
   11360:	bl	16080 <__assert_fail@plt+0x4f7c>
   11364:	mov	r1, sl
   11368:	ldr	r2, [pc, #288]	; 11490 <__assert_fail@plt+0x38c>
   1136c:	mov	r3, r0
   11370:	mov	r0, #0
   11374:	bl	10f6c <error@plt>
   11378:	mov	r3, #0
   1137c:	str	r3, [sp, #20]
   11380:	b	11244 <__assert_fail@plt+0x140>
   11384:	bl	10ff0 <__errno_location@plt>
   11388:	ldr	sl, [r0]
   1138c:	mov	r0, r7
   11390:	bl	110b0 <clearerr_unlocked@plt>
   11394:	b	1134c <__assert_fail@plt+0x248>
   11398:	bl	10ff0 <__errno_location@plt>
   1139c:	ldr	sl, [r0]
   113a0:	mov	r0, r7
   113a4:	bl	11e34 <__assert_fail@plt+0xd30>
   113a8:	cmp	r0, #0
   113ac:	beq	1134c <__assert_fail@plt+0x248>
   113b0:	cmp	sl, #0
   113b4:	bne	11354 <__assert_fail@plt+0x250>
   113b8:	b	11344 <__assert_fail@plt+0x240>
   113bc:	ldrb	r3, [r8, #4]
   113c0:	cmp	r3, #0
   113c4:	bne	113d8 <__assert_fail@plt+0x2d4>
   113c8:	ldr	r3, [sp, #20]
   113cc:	eor	r0, r3, #1
   113d0:	add	sp, sp, #44	; 0x2c
   113d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113d8:	ldr	r3, [pc, #168]	; 11488 <__assert_fail@plt+0x384>
   113dc:	ldr	r0, [r3]
   113e0:	bl	11e34 <__assert_fail@plt+0xd30>
   113e4:	cmn	r0, #1
   113e8:	bne	113c8 <__assert_fail@plt+0x2c4>
   113ec:	bl	10ff0 <__errno_location@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #152]	; 11494 <__assert_fail@plt+0x390>
   113f8:	ldr	r4, [r0]
   113fc:	mov	r0, #0
   11400:	bl	10ef4 <dcgettext@plt>
   11404:	mov	r1, r4
   11408:	mov	r2, r0
   1140c:	mov	r0, #1
   11410:	bl	10f6c <error@plt>
   11414:	bl	10ff0 <__errno_location@plt>
   11418:	mov	r2, r6
   1141c:	mov	r1, #3
   11420:	str	r7, [sp, #20]
   11424:	ldr	r6, [r0]
   11428:	mov	r0, r7
   1142c:	bl	16080 <__assert_fail@plt+0x4f7c>
   11430:	mov	r1, r6
   11434:	ldr	r2, [pc, #84]	; 11490 <__assert_fail@plt+0x38c>
   11438:	mov	r3, r0
   1143c:	mov	r0, r7
   11440:	bl	10f6c <error@plt>
   11444:	b	11244 <__assert_fail@plt+0x140>
   11448:	andeq	sl, r1, r0, ror r5
   1144c:			; <UNDEFINED> instruction: 0x0001a7b8
   11450:	andeq	sl, r1, r0, lsl r7
   11454:	andeq	fp, r2, r4, ror r1
   11458:	andeq	r1, r1, r0, lsl sp
   1145c:	ldrdeq	sl, [r1], -r4
   11460:	strdeq	sl, [r1], -r4
   11464:	andeq	fp, r2, ip, ror r1
   11468:	andeq	fp, r2, r8, lsl #2
   1146c:	ldrdeq	sl, [r1], -r0
   11470:	andeq	sl, r1, r0, ror #15
   11474:	andeq	sl, r1, r4, lsr #10
   11478:	andeq	sl, r1, ip, lsl #14
   1147c:	andeq	fp, r2, r0, ror #2
   11480:	muleq	r1, ip, r4
   11484:	strdeq	sl, [r1], -r8
   11488:	andeq	fp, r2, r0, ror r1
   1148c:	strdeq	sl, [r1], -r0
   11490:			; <UNDEFINED> instruction: 0x0001a8b0
   11494:	strdeq	sl, [r1], -ip
   11498:	mov	fp, #0
   1149c:	mov	lr, #0
   114a0:	pop	{r1}		; (ldr r1, [sp], #4)
   114a4:	mov	r2, sp
   114a8:	push	{r2}		; (str r2, [sp, #-4]!)
   114ac:	push	{r0}		; (str r0, [sp, #-4]!)
   114b0:	ldr	ip, [pc, #16]	; 114c8 <__assert_fail@plt+0x3c4>
   114b4:	push	{ip}		; (str ip, [sp, #-4]!)
   114b8:	ldr	r0, [pc, #12]	; 114cc <__assert_fail@plt+0x3c8>
   114bc:	ldr	r3, [pc, #12]	; 114d0 <__assert_fail@plt+0x3cc>
   114c0:	bl	10f90 <__libc_start_main@plt>
   114c4:	bl	110ec <abort@plt>
   114c8:	andeq	sl, r1, r0, ror #8
   114cc:	andeq	r1, r1, r0, lsl r1
   114d0:	andeq	sl, r1, r0, lsl #8
   114d4:	ldr	r3, [pc, #20]	; 114f0 <__assert_fail@plt+0x3ec>
   114d8:	ldr	r2, [pc, #20]	; 114f4 <__assert_fail@plt+0x3f0>
   114dc:	add	r3, pc, r3
   114e0:	ldr	r2, [r3, r2]
   114e4:	cmp	r2, #0
   114e8:	bxeq	lr
   114ec:	b	10fa8 <__gmon_start__@plt>
   114f0:	andeq	r9, r1, ip, lsl fp
   114f4:	strdeq	r0, [r0], -ip
   114f8:	ldr	r3, [pc, #28]	; 1151c <__assert_fail@plt+0x418>
   114fc:	ldr	r0, [pc, #28]	; 11520 <__assert_fail@plt+0x41c>
   11500:	sub	r3, r3, r0
   11504:	cmp	r3, #6
   11508:	bxls	lr
   1150c:	ldr	r3, [pc, #16]	; 11524 <__assert_fail@plt+0x420>
   11510:	cmp	r3, #0
   11514:	bxeq	lr
   11518:	bx	r3
   1151c:	andeq	fp, r2, r7, asr r1
   11520:	andeq	fp, r2, r4, asr r1
   11524:	andeq	r0, r0, r0
   11528:	ldr	r1, [pc, #36]	; 11554 <__assert_fail@plt+0x450>
   1152c:	ldr	r0, [pc, #36]	; 11558 <__assert_fail@plt+0x454>
   11530:	sub	r1, r1, r0
   11534:	asr	r1, r1, #2
   11538:	add	r1, r1, r1, lsr #31
   1153c:	asrs	r1, r1, #1
   11540:	bxeq	lr
   11544:	ldr	r3, [pc, #16]	; 1155c <__assert_fail@plt+0x458>
   11548:	cmp	r3, #0
   1154c:	bxeq	lr
   11550:	bx	r3
   11554:	andeq	fp, r2, r4, asr r1
   11558:	andeq	fp, r2, r4, asr r1
   1155c:	andeq	r0, r0, r0
   11560:	push	{r4, lr}
   11564:	ldr	r4, [pc, #24]	; 11584 <__assert_fail@plt+0x480>
   11568:	ldrb	r3, [r4]
   1156c:	cmp	r3, #0
   11570:	popne	{r4, pc}
   11574:	bl	114f8 <__assert_fail@plt+0x3f4>
   11578:	mov	r3, #1
   1157c:	strb	r3, [r4]
   11580:	pop	{r4, pc}
   11584:	andeq	fp, r2, r8, ror r1
   11588:	ldr	r0, [pc, #40]	; 115b8 <__assert_fail@plt+0x4b4>
   1158c:	ldr	r3, [r0]
   11590:	cmp	r3, #0
   11594:	bne	1159c <__assert_fail@plt+0x498>
   11598:	b	11528 <__assert_fail@plt+0x424>
   1159c:	ldr	r3, [pc, #24]	; 115bc <__assert_fail@plt+0x4b8>
   115a0:	cmp	r3, #0
   115a4:	beq	11598 <__assert_fail@plt+0x494>
   115a8:	push	{r4, lr}
   115ac:	blx	r3
   115b0:	pop	{r4, lr}
   115b4:	b	11528 <__assert_fail@plt+0x424>
   115b8:	andeq	sl, r2, r4, lsl pc
   115bc:	andeq	r0, r0, r0
   115c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	sub	sp, sp, #20
   115c8:	mov	r6, r0
   115cc:	mov	r0, #32768	; 0x8000
   115d0:	mov	fp, r1
   115d4:	str	r2, [sp, #12]
   115d8:	bl	18fdc <__assert_fail@plt+0x7ed8>
   115dc:	subs	r7, r0, #0
   115e0:	beq	11710 <__assert_fail@plt+0x60c>
   115e4:	add	sl, r7, #32512	; 0x7f00
   115e8:	ldr	r9, [pc, #296]	; 11718 <__assert_fail@plt+0x614>
   115ec:	mov	r2, #0
   115f0:	mov	r3, #0
   115f4:	add	sl, sl, #255	; 0xff
   115f8:	mov	r4, #0
   115fc:	mov	r8, #1
   11600:	strd	r2, [sp]
   11604:	mov	r5, #0
   11608:	b	11620 <__assert_fail@plt+0x51c>
   1160c:	cmp	r0, #0
   11610:	ldr	r3, [r6]
   11614:	beq	11680 <__assert_fail@plt+0x57c>
   11618:	tst	r3, #16
   1161c:	bne	1168c <__assert_fail@plt+0x588>
   11620:	rsb	r2, r5, #32768	; 0x8000
   11624:	add	r0, r7, r5
   11628:	mov	r3, r6
   1162c:	mov	r1, r8
   11630:	bl	110d4 <fread_unlocked@plt>
   11634:	add	r5, r5, r0
   11638:	cmp	r5, #32768	; 0x8000
   1163c:	bne	1160c <__assert_fail@plt+0x508>
   11640:	sub	r1, r7, #1
   11644:	ldrb	r2, [r1, #1]!
   11648:	and	r3, r9, r4, lsl #15
   1164c:	add	r4, r3, r4, lsr #1
   11650:	add	r4, r4, r2
   11654:	cmp	sl, r1
   11658:	and	r4, r4, r9
   1165c:	bne	11644 <__assert_fail@plt+0x540>
   11660:	ldrd	r0, [sp]
   11664:	adds	r2, r0, #32768	; 0x8000
   11668:	adc	r3, r1, #0
   1166c:	cmp	r1, r3
   11670:	cmpeq	r0, r2
   11674:	bhi	116d8 <__assert_fail@plt+0x5d4>
   11678:	strd	r2, [sp]
   1167c:	b	11604 <__assert_fail@plt+0x500>
   11680:	tst	r3, #32
   11684:	mvnne	r4, #0
   11688:	bne	116e8 <__assert_fail@plt+0x5e4>
   1168c:	cmp	r5, #0
   11690:	ldrd	r2, [sp]
   11694:	beq	116fc <__assert_fail@plt+0x5f8>
   11698:	ldr	r0, [pc, #120]	; 11718 <__assert_fail@plt+0x614>
   1169c:	mov	r1, r7
   116a0:	add	ip, r7, r5
   116a4:	ldrb	r2, [r1], #1
   116a8:	and	r3, r0, r4, lsl #15
   116ac:	add	r4, r3, r4, lsr #1
   116b0:	add	r4, r4, r2
   116b4:	cmp	ip, r1
   116b8:	and	r4, r4, r0
   116bc:	bne	116a4 <__assert_fail@plt+0x5a0>
   116c0:	ldrd	r0, [sp]
   116c4:	adds	r2, r0, r5
   116c8:	adc	r3, r1, #0
   116cc:	cmp	r1, r3
   116d0:	cmpeq	r0, r2
   116d4:	bls	116fc <__assert_fail@plt+0x5f8>
   116d8:	bl	10ff0 <__errno_location@plt>
   116dc:	mvn	r4, #0
   116e0:	mov	r3, #75	; 0x4b
   116e4:	str	r3, [r0]
   116e8:	mov	r0, r7
   116ec:	bl	11fcc <__assert_fail@plt+0xec8>
   116f0:	mov	r0, r4
   116f4:	add	sp, sp, #20
   116f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	ldr	r1, [sp, #12]
   11700:	str	r4, [fp]
   11704:	mov	r4, #0
   11708:	strd	r2, [r1]
   1170c:	b	116e8 <__assert_fail@plt+0x5e4>
   11710:	mvn	r4, #0
   11714:	b	116f0 <__assert_fail@plt+0x5ec>
   11718:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1171c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11720:	sub	sp, sp, #12
   11724:	mov	r5, r0
   11728:	mov	r0, #32768	; 0x8000
   1172c:	stm	sp, {r1, r2}
   11730:	bl	18fdc <__assert_fail@plt+0x7ed8>
   11734:	subs	r9, r0, #0
   11738:	beq	1185c <__assert_fail@plt+0x758>
   1173c:	add	fp, r9, #32512	; 0x7f00
   11740:	add	fp, fp, #255	; 0xff
   11744:	mov	r8, #0
   11748:	mov	r6, #0
   1174c:	mov	r7, #0
   11750:	mov	sl, #1
   11754:	mov	r4, #0
   11758:	b	11770 <__assert_fail@plt+0x66c>
   1175c:	cmp	r0, #0
   11760:	ldr	r3, [r5]
   11764:	beq	117c4 <__assert_fail@plt+0x6c0>
   11768:	tst	r3, #16
   1176c:	bne	117d0 <__assert_fail@plt+0x6cc>
   11770:	rsb	r2, r4, #32768	; 0x8000
   11774:	add	r0, r9, r4
   11778:	mov	r3, r5
   1177c:	mov	r1, sl
   11780:	bl	110d4 <fread_unlocked@plt>
   11784:	add	r4, r4, r0
   11788:	cmp	r4, #32768	; 0x8000
   1178c:	bne	1175c <__assert_fail@plt+0x658>
   11790:	sub	r3, r9, #1
   11794:	ldrb	r2, [r3, #1]!
   11798:	cmp	fp, r3
   1179c:	add	r8, r8, r2
   117a0:	bne	11794 <__assert_fail@plt+0x690>
   117a4:	adds	r2, r6, #32768	; 0x8000
   117a8:	adc	r3, r7, #0
   117ac:	cmp	r7, r3
   117b0:	cmpeq	r6, r2
   117b4:	bhi	1180c <__assert_fail@plt+0x708>
   117b8:	mov	r6, r2
   117bc:	mov	r7, r3
   117c0:	b	11754 <__assert_fail@plt+0x650>
   117c4:	tst	r3, #32
   117c8:	mvnne	r4, #0
   117cc:	bne	1181c <__assert_fail@plt+0x718>
   117d0:	cmp	r4, #0
   117d4:	moveq	r2, r6
   117d8:	moveq	r3, r7
   117dc:	beq	11830 <__assert_fail@plt+0x72c>
   117e0:	mov	r3, r9
   117e4:	add	r1, r9, r4
   117e8:	ldrb	r2, [r3], #1
   117ec:	cmp	r1, r3
   117f0:	add	r8, r8, r2
   117f4:	bne	117e8 <__assert_fail@plt+0x6e4>
   117f8:	adds	r2, r6, r4
   117fc:	adc	r3, r7, #0
   11800:	cmp	r7, r3
   11804:	cmpeq	r6, r2
   11808:	bls	11830 <__assert_fail@plt+0x72c>
   1180c:	bl	10ff0 <__errno_location@plt>
   11810:	mvn	r4, #0
   11814:	mov	r3, #75	; 0x4b
   11818:	str	r3, [r0]
   1181c:	mov	r0, r9
   11820:	bl	11fcc <__assert_fail@plt+0xec8>
   11824:	mov	r0, r4
   11828:	add	sp, sp, #12
   1182c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11830:	ldr	r1, [pc, #44]	; 11864 <__assert_fail@plt+0x760>
   11834:	mov	r4, #0
   11838:	and	r0, r8, r1
   1183c:	add	r8, r0, r8, lsr #16
   11840:	ldr	r0, [sp]
   11844:	and	r1, r1, r8
   11848:	add	r1, r1, r8, asr #16
   1184c:	str	r1, [r0]
   11850:	ldr	r1, [sp, #4]
   11854:	strd	r2, [r1]
   11858:	b	1181c <__assert_fail@plt+0x718>
   1185c:	mvn	r4, #0
   11860:	b	11824 <__assert_fail@plt+0x720>
   11864:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1186c:	sub	sp, sp, #676	; 0x2a4
   11870:	mov	sl, #1024	; 0x400
   11874:	mov	fp, #0
   11878:	mov	r8, #1
   1187c:	mov	r9, #0
   11880:	add	r1, sp, #720	; 0x2d0
   11884:	ldr	r6, [r2]
   11888:	mov	r3, #0
   1188c:	strd	sl, [sp, #8]
   11890:	strd	r8, [sp]
   11894:	add	r2, sp, #20
   11898:	mov	r7, r0
   1189c:	ldrd	r0, [r1]
   118a0:	ldrb	r5, [sp, #716]	; 0x2cc
   118a4:	ldrb	r4, [sp, #712]	; 0x2c8
   118a8:	bl	120c8 <__assert_fail@plt+0xfc4>
   118ac:	mov	r2, r6
   118b0:	ldr	r1, [pc, #96]	; 11918 <__assert_fail@plt+0x814>
   118b4:	mov	r3, r0
   118b8:	mov	r0, #1
   118bc:	bl	1102c <__printf_chk@plt>
   118c0:	cmp	r5, #0
   118c4:	bne	118f4 <__assert_fail@plt+0x7f0>
   118c8:	ldr	r3, [pc, #76]	; 1191c <__assert_fail@plt+0x818>
   118cc:	ldr	r0, [r3]
   118d0:	ldr	r3, [r0, #20]
   118d4:	ldr	r2, [r0, #24]
   118d8:	cmp	r3, r2
   118dc:	addcc	r2, r3, #1
   118e0:	strcc	r2, [r0, #20]
   118e4:	strbcc	r4, [r3]
   118e8:	bcs	11908 <__assert_fail@plt+0x804>
   118ec:	add	sp, sp, #676	; 0x2a4
   118f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f4:	mov	r2, r7
   118f8:	ldr	r1, [pc, #32]	; 11920 <__assert_fail@plt+0x81c>
   118fc:	mov	r0, #1
   11900:	bl	1102c <__printf_chk@plt>
   11904:	b	118c8 <__assert_fail@plt+0x7c4>
   11908:	mov	r1, r4
   1190c:	bl	11074 <__overflow@plt>
   11910:	add	sp, sp, #676	; 0x2a4
   11914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11918:	andeq	sl, r1, r8, lsl #9
   1191c:	andeq	fp, r2, r4, ror r1
   11920:	andeq	sl, r1, ip, lsl lr
   11924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11928:	sub	sp, sp, #676	; 0x2a4
   1192c:	mov	sl, #512	; 0x200
   11930:	mov	fp, #0
   11934:	mov	r8, #1
   11938:	mov	r9, #0
   1193c:	add	r1, sp, #720	; 0x2d0
   11940:	ldr	r6, [r2]
   11944:	mov	r3, #0
   11948:	strd	sl, [sp, #8]
   1194c:	strd	r8, [sp]
   11950:	add	r2, sp, #20
   11954:	mov	r7, r0
   11958:	ldrd	r0, [r1]
   1195c:	ldrb	r5, [sp, #716]	; 0x2cc
   11960:	ldrb	r4, [sp, #712]	; 0x2c8
   11964:	bl	120c8 <__assert_fail@plt+0xfc4>
   11968:	mov	r2, r6
   1196c:	ldr	r1, [pc, #96]	; 119d4 <__assert_fail@plt+0x8d0>
   11970:	mov	r3, r0
   11974:	mov	r0, #1
   11978:	bl	1102c <__printf_chk@plt>
   1197c:	cmp	r5, #0
   11980:	bne	119b0 <__assert_fail@plt+0x8ac>
   11984:	ldr	r3, [pc, #76]	; 119d8 <__assert_fail@plt+0x8d4>
   11988:	ldr	r0, [r3]
   1198c:	ldr	r3, [r0, #20]
   11990:	ldr	r2, [r0, #24]
   11994:	cmp	r3, r2
   11998:	addcc	r2, r3, #1
   1199c:	strcc	r2, [r0, #20]
   119a0:	strbcc	r4, [r3]
   119a4:	bcs	119c4 <__assert_fail@plt+0x8c0>
   119a8:	add	sp, sp, #676	; 0x2a4
   119ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b0:	mov	r2, r7
   119b4:	ldr	r1, [pc, #32]	; 119dc <__assert_fail@plt+0x8d8>
   119b8:	mov	r0, #1
   119bc:	bl	1102c <__printf_chk@plt>
   119c0:	b	11984 <__assert_fail@plt+0x880>
   119c4:	mov	r1, r4
   119c8:	bl	11074 <__overflow@plt>
   119cc:	add	sp, sp, #676	; 0x2a4
   119d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d4:	muleq	r1, r4, r4
   119d8:	andeq	fp, r2, r4, ror r1
   119dc:	andeq	sl, r1, ip, lsl lr
   119e0:	subs	r6, r0, #0
   119e4:	push	{r7, lr}
   119e8:	sub	sp, sp, #56	; 0x38
   119ec:	beq	11a28 <__assert_fail@plt+0x924>
   119f0:	ldr	r3, [pc, #672]	; 11c98 <__assert_fail@plt+0xb94>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #668]	; 11c9c <__assert_fail@plt+0xb98>
   119fc:	mov	r0, #0
   11a00:	ldr	r4, [r3]
   11a04:	bl	10ef4 <dcgettext@plt>
   11a08:	ldr	r3, [pc, #656]	; 11ca0 <__assert_fail@plt+0xb9c>
   11a0c:	mov	r1, #1
   11a10:	ldr	r3, [r3]
   11a14:	mov	r2, r0
   11a18:	mov	r0, r4
   11a1c:	bl	11044 <__fprintf_chk@plt>
   11a20:	mov	r0, r6
   11a24:	bl	10fcc <exit@plt>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #624]	; 11ca4 <__assert_fail@plt+0xba0>
   11a30:	bl	10ef4 <dcgettext@plt>
   11a34:	ldr	r3, [pc, #612]	; 11ca0 <__assert_fail@plt+0xb9c>
   11a38:	ldr	r7, [pc, #616]	; 11ca8 <__assert_fail@plt+0xba4>
   11a3c:	ldr	r4, [pc, #616]	; 11cac <__assert_fail@plt+0xba8>
   11a40:	ldr	r2, [r3]
   11a44:	mov	r1, r0
   11a48:	mov	r0, #1
   11a4c:	bl	1102c <__printf_chk@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #596]	; 11cb0 <__assert_fail@plt+0xbac>
   11a58:	mov	r0, r6
   11a5c:	bl	10ef4 <dcgettext@plt>
   11a60:	mov	r3, #16
   11a64:	ldr	r2, [pc, #584]	; 11cb4 <__assert_fail@plt+0xbb0>
   11a68:	mov	r1, r0
   11a6c:	mov	r0, #1
   11a70:	bl	1102c <__printf_chk@plt>
   11a74:	mov	r2, #5
   11a78:	ldr	r1, [pc, #568]	; 11cb8 <__assert_fail@plt+0xbb4>
   11a7c:	mov	r0, r6
   11a80:	bl	10ef4 <dcgettext@plt>
   11a84:	ldr	r1, [r7]
   11a88:	bl	10e58 <fputs_unlocked@plt>
   11a8c:	mov	r2, #5
   11a90:	ldr	r1, [pc, #548]	; 11cbc <__assert_fail@plt+0xbb8>
   11a94:	mov	r0, r6
   11a98:	bl	10ef4 <dcgettext@plt>
   11a9c:	ldr	r1, [r7]
   11aa0:	bl	10e58 <fputs_unlocked@plt>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #528]	; 11cc0 <__assert_fail@plt+0xbbc>
   11aac:	mov	r0, r6
   11ab0:	bl	10ef4 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	10e58 <fputs_unlocked@plt>
   11abc:	mov	r2, #5
   11ac0:	ldr	r1, [pc, #508]	; 11cc4 <__assert_fail@plt+0xbc0>
   11ac4:	mov	r0, r6
   11ac8:	bl	10ef4 <dcgettext@plt>
   11acc:	ldr	r1, [r7]
   11ad0:	bl	10e58 <fputs_unlocked@plt>
   11ad4:	ldm	r4!, {r0, r1, r2, r3}
   11ad8:	mov	lr, sp
   11adc:	stmia	lr!, {r0, r1, r2, r3}
   11ae0:	ldm	r4!, {r0, r1, r2, r3}
   11ae4:	ldr	ip, [sp]
   11ae8:	stmia	lr!, {r0, r1, r2, r3}
   11aec:	cmp	ip, #0
   11af0:	ldm	r4!, {r0, r1, r2, r3}
   11af4:	stmia	lr!, {r0, r1, r2, r3}
   11af8:	ldm	r4, {r0, r1}
   11afc:	moveq	r4, sp
   11b00:	stm	lr, {r0, r1}
   11b04:	beq	11b34 <__assert_fail@plt+0xa30>
   11b08:	ldr	r5, [pc, #440]	; 11cc8 <__assert_fail@plt+0xbc4>
   11b0c:	mov	r4, sp
   11b10:	b	11b20 <__assert_fail@plt+0xa1c>
   11b14:	ldr	ip, [r4, #8]!
   11b18:	cmp	ip, #0
   11b1c:	beq	11b34 <__assert_fail@plt+0xa30>
   11b20:	mov	r1, ip
   11b24:	mov	r0, r5
   11b28:	bl	10e70 <strcmp@plt>
   11b2c:	cmp	r0, #0
   11b30:	bne	11b14 <__assert_fail@plt+0xa10>
   11b34:	ldr	r4, [r4, #4]
   11b38:	mov	r2, #5
   11b3c:	cmp	r4, #0
   11b40:	ldr	r1, [pc, #388]	; 11ccc <__assert_fail@plt+0xbc8>
   11b44:	beq	11bec <__assert_fail@plt+0xae8>
   11b48:	mov	r0, #0
   11b4c:	bl	10ef4 <dcgettext@plt>
   11b50:	ldr	r3, [pc, #376]	; 11cd0 <__assert_fail@plt+0xbcc>
   11b54:	ldr	r2, [pc, #376]	; 11cd4 <__assert_fail@plt+0xbd0>
   11b58:	mov	r1, r0
   11b5c:	mov	r0, #1
   11b60:	bl	1102c <__printf_chk@plt>
   11b64:	mov	r1, #0
   11b68:	mov	r0, #5
   11b6c:	bl	11080 <setlocale@plt>
   11b70:	cmp	r0, #0
   11b74:	ldreq	r5, [pc, #332]	; 11cc8 <__assert_fail@plt+0xbc4>
   11b78:	beq	11b94 <__assert_fail@plt+0xa90>
   11b7c:	mov	r2, #3
   11b80:	ldr	r1, [pc, #336]	; 11cd8 <__assert_fail@plt+0xbd4>
   11b84:	bl	110e0 <strncmp@plt>
   11b88:	ldr	r5, [pc, #312]	; 11cc8 <__assert_fail@plt+0xbc4>
   11b8c:	cmp	r0, #0
   11b90:	bne	11c7c <__assert_fail@plt+0xb78>
   11b94:	mov	r2, #5
   11b98:	ldr	r1, [pc, #316]	; 11cdc <__assert_fail@plt+0xbd8>
   11b9c:	mov	r0, #0
   11ba0:	bl	10ef4 <dcgettext@plt>
   11ba4:	ldr	r3, [pc, #284]	; 11cc8 <__assert_fail@plt+0xbc4>
   11ba8:	ldr	r2, [pc, #288]	; 11cd0 <__assert_fail@plt+0xbcc>
   11bac:	mov	r1, r0
   11bb0:	mov	r0, #1
   11bb4:	bl	1102c <__printf_chk@plt>
   11bb8:	mov	r2, #5
   11bbc:	ldr	r1, [pc, #284]	; 11ce0 <__assert_fail@plt+0xbdc>
   11bc0:	mov	r0, #0
   11bc4:	bl	10ef4 <dcgettext@plt>
   11bc8:	ldr	r2, [pc, #276]	; 11ce4 <__assert_fail@plt+0xbe0>
   11bcc:	cmp	r4, r5
   11bd0:	ldr	r3, [pc, #272]	; 11ce8 <__assert_fail@plt+0xbe4>
   11bd4:	movne	r3, r2
   11bd8:	mov	r1, r0
   11bdc:	mov	r2, r4
   11be0:	mov	r0, #1
   11be4:	bl	1102c <__printf_chk@plt>
   11be8:	b	11a20 <__assert_fail@plt+0x91c>
   11bec:	mov	r0, r4
   11bf0:	bl	10ef4 <dcgettext@plt>
   11bf4:	ldr	r3, [pc, #212]	; 11cd0 <__assert_fail@plt+0xbcc>
   11bf8:	ldr	r2, [pc, #212]	; 11cd4 <__assert_fail@plt+0xbd0>
   11bfc:	mov	r1, r0
   11c00:	mov	r0, #1
   11c04:	bl	1102c <__printf_chk@plt>
   11c08:	mov	r1, r4
   11c0c:	mov	r0, #5
   11c10:	bl	11080 <setlocale@plt>
   11c14:	cmp	r0, #0
   11c18:	beq	11c30 <__assert_fail@plt+0xb2c>
   11c1c:	mov	r2, #3
   11c20:	ldr	r1, [pc, #176]	; 11cd8 <__assert_fail@plt+0xbd4>
   11c24:	bl	110e0 <strncmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	bne	11c74 <__assert_fail@plt+0xb70>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #160]	; 11cdc <__assert_fail@plt+0xbd8>
   11c38:	mov	r0, #0
   11c3c:	bl	10ef4 <dcgettext@plt>
   11c40:	ldr	r3, [pc, #128]	; 11cc8 <__assert_fail@plt+0xbc4>
   11c44:	ldr	r2, [pc, #132]	; 11cd0 <__assert_fail@plt+0xbcc>
   11c48:	mov	r4, r3
   11c4c:	mov	r1, r0
   11c50:	mov	r0, #1
   11c54:	bl	1102c <__printf_chk@plt>
   11c58:	ldr	r1, [pc, #128]	; 11ce0 <__assert_fail@plt+0xbdc>
   11c5c:	mov	r2, #5
   11c60:	mov	r0, #0
   11c64:	bl	10ef4 <dcgettext@plt>
   11c68:	ldr	r3, [pc, #120]	; 11ce8 <__assert_fail@plt+0xbe4>
   11c6c:	mov	r1, r0
   11c70:	b	11bdc <__assert_fail@plt+0xad8>
   11c74:	ldr	r5, [pc, #76]	; 11cc8 <__assert_fail@plt+0xbc4>
   11c78:	mov	r4, r5
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #100]	; 11cec <__assert_fail@plt+0xbe8>
   11c84:	mov	r0, #0
   11c88:	bl	10ef4 <dcgettext@plt>
   11c8c:	ldr	r1, [r7]
   11c90:	bl	10e58 <fputs_unlocked@plt>
   11c94:	b	11b94 <__assert_fail@plt+0xa90>
   11c98:	andeq	fp, r2, r8, ror #2
   11c9c:	andeq	sl, r1, r8, lsr #10
   11ca0:	andeq	fp, r2, ip, lsl #3
   11ca4:	andeq	sl, r1, r0, asr r5
   11ca8:	andeq	fp, r2, r4, ror r1
   11cac:	muleq	r1, ip, r4
   11cb0:	andeq	sl, r1, r4, ror r5
   11cb4:	muleq	r1, ip, r5
   11cb8:	andeq	sl, r1, r0, lsr #11
   11cbc:	ldrdeq	sl, [r1], -r8
   11cc0:	andeq	sl, r1, r4, ror #12
   11cc4:	muleq	r1, r4, r6
   11cc8:	andeq	sl, r1, r4, lsr #10
   11ccc:	andeq	sl, r1, ip, asr #13
   11cd0:	andeq	sl, r1, r4, ror #13
   11cd4:	andeq	sl, r1, ip, lsl #14
   11cd8:	andeq	sl, r1, ip, lsl r7
   11cdc:	andeq	sl, r1, r8, ror #14
   11ce0:	andeq	sl, r1, r4, lsl #15
   11ce4:	andeq	sl, r1, r0, ror r5
   11ce8:	andeq	sl, r1, r4, lsl r8
   11cec:	andeq	sl, r1, r0, lsr #14
   11cf0:	ldr	r3, [pc, #4]	; 11cfc <__assert_fail@plt+0xbf8>
   11cf4:	str	r0, [r3]
   11cf8:	bx	lr
   11cfc:	andeq	fp, r2, r4, lsl #3
   11d00:	ldr	r3, [pc, #4]	; 11d0c <__assert_fail@plt+0xc08>
   11d04:	strb	r0, [r3, #4]
   11d08:	bx	lr
   11d0c:	andeq	fp, r2, r4, lsl #3
   11d10:	ldr	r3, [pc, #192]	; 11dd8 <__assert_fail@plt+0xcd4>
   11d14:	push	{r4, r5, r6, lr}
   11d18:	sub	sp, sp, #8
   11d1c:	ldr	r0, [r3]
   11d20:	bl	19624 <__assert_fail@plt+0x8520>
   11d24:	cmp	r0, #0
   11d28:	beq	11d4c <__assert_fail@plt+0xc48>
   11d2c:	ldr	r4, [pc, #168]	; 11ddc <__assert_fail@plt+0xcd8>
   11d30:	ldrb	r3, [r4, #4]
   11d34:	cmp	r3, #0
   11d38:	beq	11d68 <__assert_fail@plt+0xc64>
   11d3c:	bl	10ff0 <__errno_location@plt>
   11d40:	ldr	r3, [r0]
   11d44:	cmp	r3, #32
   11d48:	bne	11d68 <__assert_fail@plt+0xc64>
   11d4c:	ldr	r3, [pc, #140]	; 11de0 <__assert_fail@plt+0xcdc>
   11d50:	ldr	r0, [r3]
   11d54:	bl	19624 <__assert_fail@plt+0x8520>
   11d58:	cmp	r0, #0
   11d5c:	bne	11db0 <__assert_fail@plt+0xcac>
   11d60:	add	sp, sp, #8
   11d64:	pop	{r4, r5, r6, pc}
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #112]	; 11de4 <__assert_fail@plt+0xce0>
   11d70:	mov	r0, #0
   11d74:	bl	10ef4 <dcgettext@plt>
   11d78:	ldr	r4, [r4]
   11d7c:	cmp	r4, #0
   11d80:	mov	r5, r0
   11d84:	beq	11dbc <__assert_fail@plt+0xcb8>
   11d88:	bl	10ff0 <__errno_location@plt>
   11d8c:	ldr	r6, [r0]
   11d90:	mov	r0, r4
   11d94:	bl	15d14 <__assert_fail@plt+0x4c10>
   11d98:	mov	r1, r6
   11d9c:	str	r5, [sp]
   11da0:	ldr	r2, [pc, #64]	; 11de8 <__assert_fail@plt+0xce4>
   11da4:	mov	r3, r0
   11da8:	mov	r0, #0
   11dac:	bl	10f6c <error@plt>
   11db0:	ldr	r3, [pc, #52]	; 11dec <__assert_fail@plt+0xce8>
   11db4:	ldr	r0, [r3]
   11db8:	bl	10eac <_exit@plt>
   11dbc:	bl	10ff0 <__errno_location@plt>
   11dc0:	mov	r3, r5
   11dc4:	ldr	r2, [pc, #36]	; 11df0 <__assert_fail@plt+0xcec>
   11dc8:	ldr	r1, [r0]
   11dcc:	mov	r0, r4
   11dd0:	bl	10f6c <error@plt>
   11dd4:	b	11db0 <__assert_fail@plt+0xcac>
   11dd8:	andeq	fp, r2, r4, ror r1
   11ddc:	andeq	fp, r2, r4, lsl #3
   11de0:	andeq	fp, r2, r8, ror #2
   11de4:	andeq	sl, r1, r0, lsr #17
   11de8:	andeq	sl, r1, ip, lsr #17
   11dec:	andeq	fp, r2, ip, lsl #2
   11df0:			; <UNDEFINED> instruction: 0x0001a8b0
   11df4:	push	{r4, r5}
   11df8:	pop	{r4, r5}
   11dfc:	b	10e7c <posix_fadvise64@plt>
   11e00:	cmp	r0, #0
   11e04:	bxeq	lr
   11e08:	push	{r4, lr}
   11e0c:	sub	sp, sp, #16
   11e10:	mov	r4, r1
   11e14:	bl	11038 <fileno@plt>
   11e18:	mov	r2, #0
   11e1c:	mov	r3, #0
   11e20:	str	r4, [sp, #8]
   11e24:	strd	r2, [sp]
   11e28:	bl	10e7c <posix_fadvise64@plt>
   11e2c:	add	sp, sp, #16
   11e30:	pop	{r4, pc}
   11e34:	push	{r4, r5, lr}
   11e38:	sub	sp, sp, #12
   11e3c:	mov	r4, r0
   11e40:	bl	11038 <fileno@plt>
   11e44:	cmp	r0, #0
   11e48:	mov	r0, r4
   11e4c:	blt	11ec8 <__assert_fail@plt+0xdc4>
   11e50:	bl	10f9c <__freading@plt>
   11e54:	cmp	r0, #0
   11e58:	bne	11e94 <__assert_fail@plt+0xd90>
   11e5c:	mov	r0, r4
   11e60:	bl	11ed4 <__assert_fail@plt+0xdd0>
   11e64:	cmp	r0, #0
   11e68:	beq	11ec4 <__assert_fail@plt+0xdc0>
   11e6c:	bl	10ff0 <__errno_location@plt>
   11e70:	mov	r5, r0
   11e74:	mov	r0, r4
   11e78:	ldr	r4, [r5]
   11e7c:	bl	11050 <fclose@plt>
   11e80:	cmp	r4, #0
   11e84:	mvnne	r0, #0
   11e88:	strne	r4, [r5]
   11e8c:	add	sp, sp, #12
   11e90:	pop	{r4, r5, pc}
   11e94:	mov	r0, r4
   11e98:	bl	11038 <fileno@plt>
   11e9c:	mov	r3, #1
   11ea0:	str	r3, [sp]
   11ea4:	mov	r2, #0
   11ea8:	mov	r3, #0
   11eac:	bl	10f3c <lseek64@plt>
   11eb0:	mvn	r3, #0
   11eb4:	mvn	r2, #0
   11eb8:	cmp	r1, r3
   11ebc:	cmpeq	r0, r2
   11ec0:	bne	11e5c <__assert_fail@plt+0xd58>
   11ec4:	mov	r0, r4
   11ec8:	add	sp, sp, #12
   11ecc:	pop	{r4, r5, lr}
   11ed0:	b	11050 <fclose@plt>
   11ed4:	push	{r4, lr}
   11ed8:	subs	r4, r0, #0
   11edc:	sub	sp, sp, #8
   11ee0:	beq	11efc <__assert_fail@plt+0xdf8>
   11ee4:	bl	10f9c <__freading@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	11efc <__assert_fail@plt+0xdf8>
   11ef0:	ldr	r3, [r4]
   11ef4:	tst	r3, #256	; 0x100
   11ef8:	bne	11f0c <__assert_fail@plt+0xe08>
   11efc:	mov	r0, r4
   11f00:	add	sp, sp, #8
   11f04:	pop	{r4, lr}
   11f08:	b	10e88 <fflush@plt>
   11f0c:	mov	r3, #1
   11f10:	str	r3, [sp]
   11f14:	mov	r2, #0
   11f18:	mov	r3, #0
   11f1c:	mov	r0, r4
   11f20:	bl	12024 <__assert_fail@plt+0xf20>
   11f24:	mov	r0, r4
   11f28:	add	sp, sp, #8
   11f2c:	pop	{r4, lr}
   11f30:	b	10e88 <fflush@plt>
   11f34:	push	{r4, r5, r6, lr}
   11f38:	mov	r5, r1
   11f3c:	bl	110bc <fopen64@plt>
   11f40:	subs	r4, r0, #0
   11f44:	beq	11f54 <__assert_fail@plt+0xe50>
   11f48:	bl	11038 <fileno@plt>
   11f4c:	cmp	r0, #2
   11f50:	bls	11f5c <__assert_fail@plt+0xe58>
   11f54:	mov	r0, r4
   11f58:	pop	{r4, r5, r6, pc}
   11f5c:	bl	170f4 <__assert_fail@plt+0x5ff0>
   11f60:	subs	r6, r0, #0
   11f64:	blt	11fac <__assert_fail@plt+0xea8>
   11f68:	mov	r0, r4
   11f6c:	bl	11e34 <__assert_fail@plt+0xd30>
   11f70:	cmp	r0, #0
   11f74:	bne	11f8c <__assert_fail@plt+0xe88>
   11f78:	mov	r1, r5
   11f7c:	mov	r0, r6
   11f80:	bl	10e40 <fdopen@plt>
   11f84:	subs	r4, r0, #0
   11f88:	bne	11f54 <__assert_fail@plt+0xe50>
   11f8c:	bl	10ff0 <__errno_location@plt>
   11f90:	mov	r4, #0
   11f94:	mov	r5, r0
   11f98:	mov	r0, r6
   11f9c:	ldr	r6, [r5]
   11fa0:	bl	110f8 <close@plt>
   11fa4:	str	r6, [r5]
   11fa8:	b	11f54 <__assert_fail@plt+0xe50>
   11fac:	bl	10ff0 <__errno_location@plt>
   11fb0:	mov	r5, r0
   11fb4:	mov	r0, r4
   11fb8:	ldr	r6, [r5]
   11fbc:	mov	r4, #0
   11fc0:	bl	11e34 <__assert_fail@plt+0xd30>
   11fc4:	str	r6, [r5]
   11fc8:	b	11f54 <__assert_fail@plt+0xe50>
   11fcc:	push	{r4, r5, lr}
   11fd0:	sub	sp, sp, #12
   11fd4:	mov	r5, r0
   11fd8:	bl	10ff0 <__errno_location@plt>
   11fdc:	mov	r2, #0
   11fe0:	mov	r4, r0
   11fe4:	ldr	r3, [r0]
   11fe8:	str	r2, [r4]
   11fec:	mov	r0, r5
   11ff0:	str	r3, [sp]
   11ff4:	str	r3, [sp, #4]
   11ff8:	bl	10ea0 <free@plt>
   11ffc:	ldr	r3, [r4]
   12000:	add	r2, sp, #8
   12004:	cmp	r3, #0
   12008:	moveq	r3, #4
   1200c:	movne	r3, #0
   12010:	add	r3, r2, r3
   12014:	ldr	r3, [r3, #-8]
   12018:	str	r3, [r4]
   1201c:	add	sp, sp, #12
   12020:	pop	{r4, r5, pc}
   12024:	push	{r4, r5, r6, r7, r8, lr}
   12028:	sub	sp, sp, #8
   1202c:	ldmib	r0, {ip, lr}
   12030:	mov	r4, r0
   12034:	ldr	r5, [sp, #32]
   12038:	cmp	lr, ip
   1203c:	beq	12054 <__assert_fail@plt+0xf50>
   12040:	str	r5, [sp, #32]
   12044:	mov	r0, r4
   12048:	add	sp, sp, #8
   1204c:	pop	{r4, r5, r6, r7, r8, lr}
   12050:	b	1105c <fseeko64@plt>
   12054:	ldr	lr, [r0, #20]
   12058:	ldr	ip, [r0, #16]
   1205c:	cmp	lr, ip
   12060:	bne	12040 <__assert_fail@plt+0xf3c>
   12064:	ldr	r8, [r0, #36]	; 0x24
   12068:	cmp	r8, #0
   1206c:	bne	12040 <__assert_fail@plt+0xf3c>
   12070:	mov	r6, r2
   12074:	mov	r7, r3
   12078:	bl	11038 <fileno@plt>
   1207c:	mov	r2, r6
   12080:	mov	r3, r7
   12084:	str	r5, [sp]
   12088:	bl	10f3c <lseek64@plt>
   1208c:	mvn	r3, #0
   12090:	mvn	r2, #0
   12094:	cmp	r1, r3
   12098:	cmpeq	r0, r2
   1209c:	beq	120bc <__assert_fail@plt+0xfb8>
   120a0:	ldr	r3, [r4]
   120a4:	strd	r0, [r4, #80]	; 0x50
   120a8:	mov	r0, r8
   120ac:	bic	r3, r3, #16
   120b0:	str	r3, [r4]
   120b4:	add	sp, sp, #8
   120b8:	pop	{r4, r5, r6, r7, r8, pc}
   120bc:	mvn	r0, #0
   120c0:	b	120b4 <__assert_fail@plt+0xfb0>
   120c4:	andeq	r0, r0, r0
   120c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120cc:	vpush	{d8-d9}
   120d0:	mov	r4, r3
   120d4:	ands	r3, r3, #32
   120d8:	mov	r9, r1
   120dc:	sub	sp, sp, #108	; 0x6c
   120e0:	mov	r8, r0
   120e4:	str	r3, [sp, #36]	; 0x24
   120e8:	and	r3, r4, #3
   120ec:	str	r3, [sp, #8]
   120f0:	movne	r3, #1024	; 0x400
   120f4:	moveq	r3, #1000	; 0x3e8
   120f8:	str	r2, [sp, #12]
   120fc:	strne	r3, [sp, #40]	; 0x28
   12100:	movne	r2, #1024	; 0x400
   12104:	moveq	r2, #1000	; 0x3e8
   12108:	strne	r3, [sp, #28]
   1210c:	streq	r3, [sp, #40]	; 0x28
   12110:	streq	r3, [sp, #28]
   12114:	mov	r3, #0
   12118:	ldrd	r6, [sp, #160]	; 0xa0
   1211c:	strd	r2, [sp, #16]
   12120:	bl	110a4 <localeconv@plt>
   12124:	ldr	r3, [sp, #12]
   12128:	add	r3, r3, #644	; 0x284
   1212c:	str	r3, [sp, #24]
   12130:	ldr	fp, [r0]
   12134:	mov	r5, r0
   12138:	mov	r0, fp
   1213c:	bl	10fd8 <strlen@plt>
   12140:	ldr	sl, [r5, #4]
   12144:	ldr	r1, [pc, #684]	; 123f8 <__assert_fail@plt+0x12f4>
   12148:	mov	r2, r0
   1214c:	sub	r0, r0, #1
   12150:	cmp	r0, #16
   12154:	movcs	r2, #1
   12158:	str	r2, [sp, #48]	; 0x30
   1215c:	mov	r0, sl
   12160:	movcc	r2, fp
   12164:	movcs	r2, r1
   12168:	str	r2, [sp, #52]	; 0x34
   1216c:	bl	10fd8 <strlen@plt>
   12170:	ldr	r3, [sp, #24]
   12174:	ldr	r2, [pc, #640]	; 123fc <__assert_fail@plt+0x12f8>
   12178:	add	r3, r3, #3
   1217c:	str	r3, [sp, #8]
   12180:	ldr	r5, [r5, #8]
   12184:	cmp	r0, #16
   12188:	movhi	sl, r2
   1218c:	ldrd	r2, [sp, #168]	; 0xa8
   12190:	str	sl, [sp, #32]
   12194:	cmp	r3, r7
   12198:	cmpeq	r2, r6
   1219c:	bhi	12408 <__assert_fail@plt+0x1304>
   121a0:	mov	r0, r6
   121a4:	mov	r1, r7
   121a8:	bl	1a240 <__assert_fail@plt+0x913c>
   121ac:	orrs	r3, r2, r3
   121b0:	bne	121f4 <__assert_fail@plt+0x10f0>
   121b4:	ldrd	r2, [sp, #168]	; 0xa8
   121b8:	mov	r0, r6
   121bc:	mov	r1, r7
   121c0:	bl	1a240 <__assert_fail@plt+0x913c>
   121c4:	mov	r2, r0
   121c8:	mul	r0, r0, r9
   121cc:	umull	sl, fp, r2, r8
   121d0:	mla	r0, r8, r1, r0
   121d4:	mov	r3, r1
   121d8:	add	fp, r0, fp
   121dc:	mov	r1, fp
   121e0:	mov	r0, sl
   121e4:	bl	1a240 <__assert_fail@plt+0x913c>
   121e8:	cmp	r9, r1
   121ec:	cmpeq	r8, r0
   121f0:	beq	12ac0 <__assert_fail@plt+0x19bc>
   121f4:	mov	r0, r6
   121f8:	mov	r1, r7
   121fc:	bl	1a1cc <__assert_fail@plt+0x90c8>
   12200:	vmov	d9, r0, r1
   12204:	ldrd	r0, [sp, #168]	; 0xa8
   12208:	bl	1a1cc <__assert_fail@plt+0x90c8>
   1220c:	vmov	d7, r0, r1
   12210:	mov	r0, r8
   12214:	mov	r1, r9
   12218:	vdiv.f64	d8, d9, d7
   1221c:	bl	1a1cc <__assert_fail@plt+0x90c8>
   12220:	ands	r8, r4, #16
   12224:	vmov	d7, r0, r1
   12228:	vmul.f64	d8, d8, d7
   1222c:	beq	12838 <__assert_fail@plt+0x1734>
   12230:	vldr	s15, [sp, #40]	; 0x28
   12234:	vcvt.f64.s32	d7, s15
   12238:	vmul.f64	d6, d7, d7
   1223c:	vcmpe.f64	d8, d6
   12240:	vmrs	APSR_nzcv, fpscr
   12244:	blt	12d98 <__assert_fail@plt+0x1c94>
   12248:	vmul.f64	d5, d7, d6
   1224c:	vcmpe.f64	d8, d5
   12250:	vmrs	APSR_nzcv, fpscr
   12254:	blt	12da4 <__assert_fail@plt+0x1ca0>
   12258:	vmul.f64	d6, d7, d5
   1225c:	vcmpe.f64	d8, d6
   12260:	vmrs	APSR_nzcv, fpscr
   12264:	blt	12dac <__assert_fail@plt+0x1ca8>
   12268:	vmul.f64	d5, d7, d6
   1226c:	vcmpe.f64	d8, d5
   12270:	vmrs	APSR_nzcv, fpscr
   12274:	blt	12db8 <__assert_fail@plt+0x1cb4>
   12278:	vmul.f64	d6, d7, d5
   1227c:	vcmpe.f64	d8, d6
   12280:	vmrs	APSR_nzcv, fpscr
   12284:	blt	12dc0 <__assert_fail@plt+0x1cbc>
   12288:	vmul.f64	d5, d7, d6
   1228c:	vcmpe.f64	d8, d5
   12290:	vmrs	APSR_nzcv, fpscr
   12294:	blt	12dcc <__assert_fail@plt+0x1cc8>
   12298:	vmul.f64	d6, d7, d5
   1229c:	vcmpe.f64	d8, d6
   122a0:	vmrs	APSR_nzcv, fpscr
   122a4:	blt	12dd4 <__assert_fail@plt+0x1cd0>
   122a8:	mov	r9, #8
   122ac:	and	r8, r4, #3
   122b0:	cmp	r8, #1
   122b4:	vdiv.f64	d9, d8, d6
   122b8:	beq	12964 <__assert_fail@plt+0x1860>
   122bc:	vldr	d7, [pc, #292]	; 123e8 <__assert_fail@plt+0x12e4>
   122c0:	vmov	r0, r1, d9
   122c4:	vcmpe.f64	d9, d7
   122c8:	vmrs	APSR_nzcv, fpscr
   122cc:	bpl	12314 <__assert_fail@plt+0x1210>
   122d0:	bl	1a290 <__assert_fail@plt+0x918c>
   122d4:	cmp	r8, #0
   122d8:	mov	r6, r0
   122dc:	mov	r7, r1
   122e0:	movne	r0, #0
   122e4:	bne	12300 <__assert_fail@plt+0x11fc>
   122e8:	bl	1a1cc <__assert_fail@plt+0x90c8>
   122ec:	vmov	d7, r0, r1
   122f0:	vcmp.f64	d7, d9
   122f4:	vmrs	APSR_nzcv, fpscr
   122f8:	movne	r0, #1
   122fc:	moveq	r0, #0
   12300:	adds	r2, r6, r0
   12304:	adc	r3, r7, #0
   12308:	mov	r0, r2
   1230c:	mov	r1, r3
   12310:	bl	1a1cc <__assert_fail@plt+0x90c8>
   12314:	ldr	r6, [sp, #12]
   12318:	strd	r0, [sp]
   1231c:	ldr	r3, [pc, #220]	; 12400 <__assert_fail@plt+0x12fc>
   12320:	mvn	r2, #0
   12324:	mov	r1, #1
   12328:	mov	r0, r6
   1232c:	bl	10ffc <__sprintf_chk@plt>
   12330:	ldr	r3, [sp, #48]	; 0x30
   12334:	mov	r0, r6
   12338:	add	r6, r3, #1
   1233c:	bl	10fd8 <strlen@plt>
   12340:	ands	r3, r4, #32
   12344:	cmp	r3, #0
   12348:	movne	r3, #1
   1234c:	moveq	r3, #2
   12350:	add	r3, r3, r6
   12354:	cmp	r0, r3
   12358:	mov	r7, r0
   1235c:	bls	129b0 <__assert_fail@plt+0x18ac>
   12360:	vldr	d7, [pc, #136]	; 123f0 <__assert_fail@plt+0x12ec>
   12364:	vmul.f64	d9, d9, d7
   12368:	vldr	d7, [pc, #120]	; 123e8 <__assert_fail@plt+0x12e4>
   1236c:	vcmpe.f64	d9, d7
   12370:	vmrs	APSR_nzcv, fpscr
   12374:	bpl	123b0 <__assert_fail@plt+0x12ac>
   12378:	vmov	r0, r1, d9
   1237c:	bl	1a290 <__assert_fail@plt+0x918c>
   12380:	and	r3, r4, #3
   12384:	cmp	r3, #0
   12388:	mov	r6, r0
   1238c:	mov	r7, r1
   12390:	movne	r0, #0
   12394:	beq	12ce4 <__assert_fail@plt+0x1be0>
   12398:	adds	r2, r6, r0
   1239c:	adc	r3, r7, #0
   123a0:	mov	r0, r2
   123a4:	mov	r1, r3
   123a8:	bl	1a1cc <__assert_fail@plt+0x90c8>
   123ac:	vmov	d9, r0, r1
   123b0:	vldr	d6, [pc, #56]	; 123f0 <__assert_fail@plt+0x12ec>
   123b4:	ldr	r7, [sp, #12]
   123b8:	ldr	r3, [pc, #68]	; 12404 <__assert_fail@plt+0x1300>
   123bc:	mvn	r2, #0
   123c0:	vdiv.f64	d7, d9, d6
   123c4:	mov	r1, #1
   123c8:	mov	r0, r7
   123cc:	mov	r6, #0
   123d0:	vstr	d7, [sp]
   123d4:	bl	10ffc <__sprintf_chk@plt>
   123d8:	mov	r0, r7
   123dc:	bl	10fd8 <strlen@plt>
   123e0:	mov	r7, r0
   123e4:	b	12884 <__assert_fail@plt+0x1780>
   123e8:	andeq	r0, r0, r0
   123ec:	mvnsmi	r0, #0
   123f0:	andeq	r0, r0, r0
   123f4:	eormi	r0, r4, r0
   123f8:	ldrdeq	sl, [r1], -r4
   123fc:	andeq	sl, r1, r0, ror r5
   12400:	andeq	sl, r1, r0, ror #17
   12404:	ldrdeq	sl, [r1], -r8
   12408:	orrs	r3, r6, r7
   1240c:	beq	121f4 <__assert_fail@plt+0x10f0>
   12410:	mov	r2, r6
   12414:	mov	r3, r7
   12418:	ldrd	r0, [sp, #168]	; 0xa8
   1241c:	bl	1a240 <__assert_fail@plt+0x913c>
   12420:	orrs	r3, r2, r3
   12424:	bne	121f4 <__assert_fail@plt+0x10f0>
   12428:	mov	r2, r6
   1242c:	mov	r3, r7
   12430:	ldrd	r0, [sp, #168]	; 0xa8
   12434:	bl	1a240 <__assert_fail@plt+0x913c>
   12438:	mov	sl, r0
   1243c:	mov	fp, r1
   12440:	mov	r2, r0
   12444:	mov	r3, r1
   12448:	mov	r0, r8
   1244c:	mov	r1, r9
   12450:	bl	1a240 <__assert_fail@plt+0x913c>
   12454:	mov	r1, #10
   12458:	umull	r6, r7, r2, r1
   1245c:	mla	r7, r1, r3, r7
   12460:	mov	r2, sl
   12464:	mov	r3, fp
   12468:	mov	r0, r6
   1246c:	mov	r1, r7
   12470:	bl	1a240 <__assert_fail@plt+0x913c>
   12474:	mov	r0, r8
   12478:	mov	r1, r9
   1247c:	strd	sl, [sp, #40]	; 0x28
   12480:	lsls	r8, r2, #1
   12484:	adc	r9, r3, r3
   12488:	mov	r2, sl
   1248c:	mov	r3, fp
   12490:	bl	1a240 <__assert_fail@plt+0x913c>
   12494:	ldrd	r2, [sp, #40]	; 0x28
   12498:	mov	sl, r0
   1249c:	mov	fp, r1
   124a0:	mov	r0, r6
   124a4:	mov	r1, r7
   124a8:	bl	1a240 <__assert_fail@plt+0x913c>
   124ac:	ldrd	r2, [sp, #40]	; 0x28
   124b0:	cmp	r3, r9
   124b4:	cmpeq	r2, r8
   124b8:	mov	r6, r0
   124bc:	bls	12cc8 <__assert_fail@plt+0x1bc4>
   124c0:	orrs	r3, r8, r9
   124c4:	movne	r8, #1
   124c8:	moveq	r8, #0
   124cc:	ands	r3, r4, #16
   124d0:	str	r3, [sp, #40]	; 0x28
   124d4:	beq	12bd4 <__assert_fail@plt+0x1ad0>
   124d8:	ldrd	r2, [sp, #16]
   124dc:	cmp	fp, r3
   124e0:	cmpeq	sl, r2
   124e4:	bcc	12cd4 <__assert_fail@plt+0x1bd0>
   124e8:	mov	r0, sl
   124ec:	mov	r1, fp
   124f0:	bl	1a240 <__assert_fail@plt+0x913c>
   124f4:	ldr	r1, [sp, #28]
   124f8:	add	r2, r2, r2, lsl #2
   124fc:	add	r7, r6, r2, lsl #1
   12500:	mov	r0, r7
   12504:	bl	19c28 <__assert_fail@plt+0x8b24>
   12508:	asr	r6, r8, #1
   1250c:	ldrd	r2, [sp, #16]
   12510:	mov	r0, sl
   12514:	add	r9, r6, r1, lsl #1
   12518:	mov	r1, fp
   1251c:	bl	1a240 <__assert_fail@plt+0x913c>
   12520:	mov	sl, r0
   12524:	mov	fp, r1
   12528:	mov	r0, r7
   1252c:	ldr	r1, [sp, #28]
   12530:	bl	19a3c <__assert_fail@plt+0x8938>
   12534:	ldr	r3, [sp, #28]
   12538:	cmp	r3, r9
   1253c:	mov	r6, r0
   12540:	bls	12d0c <__assert_fail@plt+0x1c08>
   12544:	cmn	r8, r9
   12548:	movne	r8, #1
   1254c:	moveq	r8, #0
   12550:	ldrd	r2, [sp, #16]
   12554:	cmp	r3, fp
   12558:	cmpeq	r2, sl
   1255c:	bhi	12e80 <__assert_fail@plt+0x1d7c>
   12560:	mov	r0, sl
   12564:	mov	r1, fp
   12568:	bl	1a240 <__assert_fail@plt+0x913c>
   1256c:	ldr	r1, [sp, #28]
   12570:	add	r2, r2, r2, lsl #2
   12574:	add	r7, r6, r2, lsl #1
   12578:	mov	r0, r7
   1257c:	bl	19c28 <__assert_fail@plt+0x8b24>
   12580:	asr	r6, r8, #1
   12584:	ldrd	r2, [sp, #16]
   12588:	mov	r0, sl
   1258c:	add	r9, r6, r1, lsl #1
   12590:	mov	r1, fp
   12594:	bl	1a240 <__assert_fail@plt+0x913c>
   12598:	mov	sl, r0
   1259c:	mov	fp, r1
   125a0:	mov	r0, r7
   125a4:	ldr	r1, [sp, #28]
   125a8:	bl	19a3c <__assert_fail@plt+0x8938>
   125ac:	ldr	r3, [sp, #28]
   125b0:	cmp	r3, r9
   125b4:	mov	r6, r0
   125b8:	mov	r7, r0
   125bc:	bls	12d24 <__assert_fail@plt+0x1c20>
   125c0:	cmn	r8, r9
   125c4:	movne	r8, #1
   125c8:	moveq	r8, #0
   125cc:	ldrd	r2, [sp, #16]
   125d0:	cmp	fp, r3
   125d4:	cmpeq	sl, r2
   125d8:	bcc	12e88 <__assert_fail@plt+0x1d84>
   125dc:	mov	r0, sl
   125e0:	mov	r1, fp
   125e4:	bl	1a240 <__assert_fail@plt+0x913c>
   125e8:	ldr	r9, [sp, #28]
   125ec:	mov	r1, r9
   125f0:	add	r2, r2, r2, lsl #2
   125f4:	add	r6, r7, r2, lsl #1
   125f8:	mov	r0, r6
   125fc:	bl	19c28 <__assert_fail@plt+0x8b24>
   12600:	asr	r7, r8, #1
   12604:	ldrd	r2, [sp, #16]
   12608:	mov	r0, sl
   1260c:	add	r7, r7, r1, lsl #1
   12610:	mov	r1, fp
   12614:	bl	1a240 <__assert_fail@plt+0x913c>
   12618:	mov	sl, r0
   1261c:	mov	fp, r1
   12620:	mov	r0, r6
   12624:	mov	r1, r9
   12628:	bl	19a3c <__assert_fail@plt+0x8938>
   1262c:	cmp	r9, r7
   12630:	mov	r6, r0
   12634:	mov	r9, r0
   12638:	bls	12d3c <__assert_fail@plt+0x1c38>
   1263c:	cmn	r8, r7
   12640:	movne	r8, #1
   12644:	moveq	r8, #0
   12648:	ldrd	r2, [sp, #16]
   1264c:	cmp	fp, r3
   12650:	cmpeq	sl, r2
   12654:	bcc	12e90 <__assert_fail@plt+0x1d8c>
   12658:	mov	r0, sl
   1265c:	mov	r1, fp
   12660:	bl	1a240 <__assert_fail@plt+0x913c>
   12664:	ldr	r1, [sp, #28]
   12668:	asr	r7, r8, #1
   1266c:	add	r2, r2, r2, lsl #2
   12670:	add	r6, r9, r2, lsl #1
   12674:	mov	r0, r6
   12678:	bl	19c28 <__assert_fail@plt+0x8b24>
   1267c:	ldrd	r2, [sp, #16]
   12680:	mov	r0, sl
   12684:	add	r7, r7, r1, lsl #1
   12688:	mov	r1, fp
   1268c:	bl	1a240 <__assert_fail@plt+0x913c>
   12690:	ldr	r9, [sp, #28]
   12694:	mov	sl, r0
   12698:	mov	fp, r1
   1269c:	mov	r0, r6
   126a0:	mov	r1, r9
   126a4:	bl	19a3c <__assert_fail@plt+0x8938>
   126a8:	cmp	r9, r7
   126ac:	mov	r6, r0
   126b0:	mov	r9, r0
   126b4:	bls	12d54 <__assert_fail@plt+0x1c50>
   126b8:	cmn	r8, r7
   126bc:	movne	r8, #1
   126c0:	moveq	r8, #0
   126c4:	ldrd	r2, [sp, #16]
   126c8:	cmp	fp, r3
   126cc:	cmpeq	sl, r2
   126d0:	bcc	12ec8 <__assert_fail@plt+0x1dc4>
   126d4:	mov	r0, sl
   126d8:	mov	r1, fp
   126dc:	bl	1a240 <__assert_fail@plt+0x913c>
   126e0:	ldr	r1, [sp, #28]
   126e4:	asr	r7, r8, #1
   126e8:	add	r2, r2, r2, lsl #2
   126ec:	add	r6, r9, r2, lsl #1
   126f0:	mov	r0, r6
   126f4:	bl	19c28 <__assert_fail@plt+0x8b24>
   126f8:	ldrd	r2, [sp, #16]
   126fc:	mov	r0, sl
   12700:	add	r7, r7, r1, lsl #1
   12704:	mov	r1, fp
   12708:	bl	1a240 <__assert_fail@plt+0x913c>
   1270c:	ldr	r9, [sp, #28]
   12710:	mov	sl, r0
   12714:	mov	fp, r1
   12718:	mov	r0, r6
   1271c:	mov	r1, r9
   12720:	bl	19a3c <__assert_fail@plt+0x8938>
   12724:	cmp	r9, r7
   12728:	mov	r6, r0
   1272c:	mov	r9, r0
   12730:	bls	12d6c <__assert_fail@plt+0x1c68>
   12734:	cmn	r8, r7
   12738:	movne	r8, #1
   1273c:	moveq	r8, #0
   12740:	ldrd	r2, [sp, #16]
   12744:	cmp	r3, fp
   12748:	cmpeq	r2, sl
   1274c:	bhi	12ed0 <__assert_fail@plt+0x1dcc>
   12750:	mov	r0, sl
   12754:	mov	r1, fp
   12758:	bl	1a240 <__assert_fail@plt+0x913c>
   1275c:	ldr	r1, [sp, #28]
   12760:	asr	r7, r8, #1
   12764:	add	r2, r2, r2, lsl #2
   12768:	add	r6, r9, r2, lsl #1
   1276c:	mov	r0, r6
   12770:	bl	19c28 <__assert_fail@plt+0x8b24>
   12774:	ldrd	r2, [sp, #16]
   12778:	mov	r0, sl
   1277c:	add	r7, r7, r1, lsl #1
   12780:	mov	r1, fp
   12784:	bl	1a240 <__assert_fail@plt+0x913c>
   12788:	ldr	r9, [sp, #28]
   1278c:	mov	sl, r0
   12790:	mov	fp, r1
   12794:	mov	r0, r6
   12798:	mov	r1, r9
   1279c:	bl	19a3c <__assert_fail@plt+0x8938>
   127a0:	cmp	r9, r7
   127a4:	mov	r6, r0
   127a8:	bls	12d84 <__assert_fail@plt+0x1c80>
   127ac:	cmn	r8, r7
   127b0:	movne	r8, #1
   127b4:	moveq	r8, #0
   127b8:	mov	r9, #6
   127bc:	cmp	fp, #0
   127c0:	cmpeq	sl, #9
   127c4:	bhi	12e74 <__assert_fail@plt+0x1d70>
   127c8:	and	r3, r4, #3
   127cc:	cmp	r3, #1
   127d0:	beq	12e08 <__assert_fail@plt+0x1d04>
   127d4:	cmp	r8, #0
   127d8:	and	r3, r4, #3
   127dc:	clz	r3, r3
   127e0:	lsr	r3, r3, #5
   127e4:	moveq	r3, #0
   127e8:	cmp	r3, #0
   127ec:	beq	12de0 <__assert_fail@plt+0x1cdc>
   127f0:	add	r6, r6, #1
   127f4:	cmp	r6, #10
   127f8:	beq	12e58 <__assert_fail@plt+0x1d54>
   127fc:	add	r7, r6, #48	; 0x30
   12800:	uxtb	r3, r7
   12804:	ldr	r2, [sp, #24]
   12808:	ldr	r0, [sp, #12]
   1280c:	add	r7, r2, #2
   12810:	ldr	r2, [sp, #48]	; 0x30
   12814:	strb	r3, [r0, #646]	; 0x286
   12818:	sub	r1, r7, r2
   1281c:	str	r1, [sp, #24]
   12820:	mov	r0, r1
   12824:	mov	r8, #0
   12828:	ldr	r1, [sp, #52]	; 0x34
   1282c:	bl	10eb8 <memcpy@plt>
   12830:	mov	r6, r8
   12834:	b	12be0 <__assert_fail@plt+0x1adc>
   12838:	and	r9, r4, #3
   1283c:	cmp	r9, #1
   12840:	beq	12854 <__assert_fail@plt+0x1750>
   12844:	vldr	d7, [pc, #876]	; 12bb8 <__assert_fail@plt+0x1ab4>
   12848:	vcmpe.f64	d8, d7
   1284c:	vmrs	APSR_nzcv, fpscr
   12850:	bmi	12a7c <__assert_fail@plt+0x1978>
   12854:	ldr	r6, [sp, #12]
   12858:	ldr	r3, [pc, #872]	; 12bc8 <__assert_fail@plt+0x1ac4>
   1285c:	mvn	r2, #0
   12860:	mov	r1, #1
   12864:	mov	r0, r6
   12868:	vstr	d8, [sp]
   1286c:	bl	10ffc <__sprintf_chk@plt>
   12870:	mov	r0, r6
   12874:	bl	10fd8 <strlen@plt>
   12878:	mov	r6, #0
   1287c:	mvn	r9, #0
   12880:	mov	r7, r0
   12884:	ldr	r3, [sp, #8]
   12888:	mov	r2, r7
   1288c:	sub	r8, r3, r7
   12890:	mov	r0, r8
   12894:	ldr	r1, [sp, #12]
   12898:	bl	10e94 <memmove@plt>
   1289c:	sub	r7, r7, r6
   128a0:	add	r7, r8, r7
   128a4:	tst	r4, #4
   128a8:	bne	129e4 <__assert_fail@plt+0x18e0>
   128ac:	tst	r4, #128	; 0x80
   128b0:	beq	12948 <__assert_fail@plt+0x1844>
   128b4:	cmn	r9, #1
   128b8:	beq	12acc <__assert_fail@plt+0x19c8>
   128bc:	and	r3, r4, #256	; 0x100
   128c0:	orrs	r2, r9, r3
   128c4:	beq	12948 <__assert_fail@plt+0x1844>
   128c8:	tst	r4, #64	; 0x40
   128cc:	ldrne	r1, [sp, #12]
   128d0:	addne	r2, r1, #648	; 0x288
   128d4:	strne	r2, [sp, #8]
   128d8:	movne	r2, #32
   128dc:	strbne	r2, [r1, #647]	; 0x287
   128e0:	cmp	r9, #0
   128e4:	beq	12ed8 <__assert_fail@plt+0x1dd4>
   128e8:	ldr	r2, [sp, #36]	; 0x24
   128ec:	ldr	r0, [sp, #8]
   128f0:	cmp	r2, #0
   128f4:	cmpeq	r9, #1
   128f8:	ldr	r2, [sp, #8]
   128fc:	ldrne	r1, [pc, #712]	; 12bcc <__assert_fail@plt+0x1ac8>
   12900:	moveq	r1, #107	; 0x6b
   12904:	add	r2, r2, #1
   12908:	ldrbne	r1, [r1, r9]
   1290c:	cmp	r3, #0
   12910:	streq	r2, [sp, #8]
   12914:	strb	r1, [r0]
   12918:	beq	12948 <__assert_fail@plt+0x1844>
   1291c:	ldr	r3, [sp, #36]	; 0x24
   12920:	cmp	r9, #0
   12924:	cmpne	r3, #0
   12928:	movne	r2, r0
   1292c:	movne	r3, #105	; 0x69
   12930:	strbne	r3, [r2, #1]
   12934:	addne	r2, r2, #2
   12938:	mov	r3, #66	; 0x42
   1293c:	strb	r3, [r2]
   12940:	add	r3, r2, #1
   12944:	str	r3, [sp, #8]
   12948:	ldr	r2, [sp, #8]
   1294c:	mov	r3, #0
   12950:	mov	r0, r8
   12954:	strb	r3, [r2]
   12958:	add	sp, sp, #108	; 0x6c
   1295c:	vpop	{d8-d9}
   12960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12964:	ldr	r6, [sp, #12]
   12968:	ldr	r3, [pc, #608]	; 12bd0 <__assert_fail@plt+0x1acc>
   1296c:	mvn	r2, #0
   12970:	and	r1, r4, #3
   12974:	mov	r0, r6
   12978:	vstr	d9, [sp]
   1297c:	bl	10ffc <__sprintf_chk@plt>
   12980:	ldr	r3, [sp, #48]	; 0x30
   12984:	mov	r0, r6
   12988:	add	r6, r3, #1
   1298c:	bl	10fd8 <strlen@plt>
   12990:	ands	r3, r4, #32
   12994:	cmp	r3, #0
   12998:	movne	r3, #1
   1299c:	moveq	r3, #2
   129a0:	add	r3, r3, r6
   129a4:	cmp	r3, r0
   129a8:	mov	r7, r0
   129ac:	bcc	12d00 <__assert_fail@plt+0x1bfc>
   129b0:	tst	r4, #8
   129b4:	beq	12884 <__assert_fail@plt+0x1780>
   129b8:	ldr	r3, [sp, #12]
   129bc:	add	r3, r3, r7
   129c0:	ldrb	r3, [r3, #-1]
   129c4:	cmp	r3, #48	; 0x30
   129c8:	bne	12884 <__assert_fail@plt+0x1780>
   129cc:	vldr	d7, [pc, #492]	; 12bc0 <__assert_fail@plt+0x1abc>
   129d0:	and	r3, r4, #3
   129d4:	cmp	r3, #1
   129d8:	vmul.f64	d9, d9, d7
   129dc:	beq	123b0 <__assert_fail@plt+0x12ac>
   129e0:	b	12368 <__assert_fail@plt+0x1264>
   129e4:	ldr	r0, [sp, #32]
   129e8:	bl	10fd8 <strlen@plt>
   129ec:	sub	r6, r7, r8
   129f0:	mov	r1, r8
   129f4:	mov	r2, r6
   129f8:	mov	r3, #41	; 0x29
   129fc:	mvn	sl, #0
   12a00:	mov	fp, r0
   12a04:	add	r0, sp, #60	; 0x3c
   12a08:	bl	10f24 <__memcpy_chk@plt>
   12a0c:	ldr	r8, [sp, #32]
   12a10:	b	12a18 <__assert_fail@plt+0x1914>
   12a14:	bl	10eb8 <memcpy@plt>
   12a18:	ldrb	r3, [r5]
   12a1c:	cmp	r3, #0
   12a20:	beq	12a34 <__assert_fail@plt+0x1930>
   12a24:	cmp	r3, #255	; 0xff
   12a28:	movne	sl, r3
   12a2c:	moveq	sl, r6
   12a30:	add	r5, r5, #1
   12a34:	cmp	sl, r6
   12a38:	movcs	sl, r6
   12a3c:	sub	r3, r7, sl
   12a40:	sub	r6, r6, sl
   12a44:	add	r2, sp, #60	; 0x3c
   12a48:	add	r1, r2, r6
   12a4c:	mov	r0, r3
   12a50:	mov	r2, sl
   12a54:	sub	r7, r3, fp
   12a58:	bl	10eb8 <memcpy@plt>
   12a5c:	cmp	r6, #0
   12a60:	mov	r2, fp
   12a64:	mov	r1, r8
   12a68:	mov	r3, r0
   12a6c:	mov	r0, r7
   12a70:	bne	12a14 <__assert_fail@plt+0x1910>
   12a74:	mov	r8, r3
   12a78:	b	128ac <__assert_fail@plt+0x17a8>
   12a7c:	vmov	r0, r1, d8
   12a80:	bl	1a290 <__assert_fail@plt+0x918c>
   12a84:	cmp	r9, #0
   12a88:	mov	r6, r0
   12a8c:	mov	r7, r1
   12a90:	bne	12aac <__assert_fail@plt+0x19a8>
   12a94:	bl	1a1cc <__assert_fail@plt+0x90c8>
   12a98:	vmov	d7, r0, r1
   12a9c:	vcmp.f64	d7, d8
   12aa0:	vmrs	APSR_nzcv, fpscr
   12aa4:	movne	r8, #1
   12aa8:	moveq	r8, #0
   12aac:	adds	r0, r6, r8
   12ab0:	adc	r1, r7, #0
   12ab4:	bl	1a1cc <__assert_fail@plt+0x90c8>
   12ab8:	vmov	d8, r0, r1
   12abc:	b	12854 <__assert_fail@plt+0x1750>
   12ac0:	mov	r8, #0
   12ac4:	mov	r6, r8
   12ac8:	b	124cc <__assert_fail@plt+0x13c8>
   12acc:	ldrd	r2, [sp, #168]	; 0xa8
   12ad0:	cmp	r3, #0
   12ad4:	cmpeq	r2, #1
   12ad8:	bls	12df8 <__assert_fail@plt+0x1cf4>
   12adc:	ldrd	r6, [sp, #16]
   12ae0:	mov	r1, r3
   12ae4:	mov	r0, r2
   12ae8:	cmp	r1, r7
   12aec:	cmpeq	r0, r6
   12af0:	bls	12e00 <__assert_fail@plt+0x1cfc>
   12af4:	mul	r1, r6, r7
   12af8:	umull	r2, r3, r6, r6
   12afc:	add	r3, r3, r1, lsl #1
   12b00:	ldrd	r0, [sp, #168]	; 0xa8
   12b04:	cmp	r1, r3
   12b08:	cmpeq	r0, r2
   12b0c:	bls	12e20 <__assert_fail@plt+0x1d1c>
   12b10:	mul	r3, r6, r3
   12b14:	umull	r0, r1, r6, r2
   12b18:	mla	r2, r2, r7, r3
   12b1c:	add	r1, r2, r1
   12b20:	ldrd	r2, [sp, #168]	; 0xa8
   12b24:	cmp	r3, r1
   12b28:	cmpeq	r2, r0
   12b2c:	bls	12e28 <__assert_fail@plt+0x1d24>
   12b30:	mul	r1, r6, r1
   12b34:	umull	r2, r3, r6, r0
   12b38:	mla	r0, r0, r7, r1
   12b3c:	add	r3, r0, r3
   12b40:	ldrd	r0, [sp, #168]	; 0xa8
   12b44:	cmp	r1, r3
   12b48:	cmpeq	r0, r2
   12b4c:	bls	12e30 <__assert_fail@plt+0x1d2c>
   12b50:	mul	r3, r6, r3
   12b54:	umull	r0, r1, r6, r2
   12b58:	mla	r2, r2, r7, r3
   12b5c:	add	r1, r2, r1
   12b60:	ldrd	r2, [sp, #168]	; 0xa8
   12b64:	cmp	r3, r1
   12b68:	cmpeq	r2, r0
   12b6c:	bls	12e38 <__assert_fail@plt+0x1d34>
   12b70:	mul	r1, r6, r1
   12b74:	umull	r2, r3, r6, r0
   12b78:	mla	r0, r0, r7, r1
   12b7c:	add	r3, r0, r3
   12b80:	ldrd	r0, [sp, #168]	; 0xa8
   12b84:	cmp	r1, r3
   12b88:	cmpeq	r0, r2
   12b8c:	bls	12e40 <__assert_fail@plt+0x1d3c>
   12b90:	mul	r3, r6, r3
   12b94:	umull	r0, r1, r6, r2
   12b98:	mla	r2, r2, r7, r3
   12b9c:	add	r1, r2, r1
   12ba0:	ldrd	r2, [sp, #168]	; 0xa8
   12ba4:	cmp	r3, r1
   12ba8:	cmpeq	r2, r0
   12bac:	movhi	r9, #8
   12bb0:	movls	r9, #7
   12bb4:	b	128bc <__assert_fail@plt+0x17b8>
   12bb8:	andeq	r0, r0, r0
   12bbc:	mvnsmi	r0, #0
   12bc0:	andeq	r0, r0, r0
   12bc4:	eormi	r0, r4, r0
   12bc8:	ldrdeq	sl, [r1], -r8
   12bcc:			; <UNDEFINED> instruction: 0x0001a8b4
   12bd0:	andeq	sl, r1, r0, ror #17
   12bd4:	ldr	r3, [sp, #8]
   12bd8:	mvn	r9, #0
   12bdc:	str	r3, [sp, #24]
   12be0:	and	r3, r4, #3
   12be4:	cmp	r3, #1
   12be8:	beq	12c4c <__assert_fail@plt+0x1b48>
   12bec:	and	r3, r4, #3
   12bf0:	cmp	r3, #0
   12bf4:	bne	12c74 <__assert_fail@plt+0x1b70>
   12bf8:	add	r7, r6, r8
   12bfc:	cmp	r7, #0
   12c00:	ble	12c74 <__assert_fail@plt+0x1b70>
   12c04:	adds	sl, sl, #1
   12c08:	adc	fp, fp, #0
   12c0c:	ands	r3, r4, #16
   12c10:	cmp	r3, #0
   12c14:	beq	12c74 <__assert_fail@plt+0x1b70>
   12c18:	ldrd	r2, [sp, #16]
   12c1c:	cmp	fp, r3
   12c20:	cmpeq	sl, r2
   12c24:	bne	12c74 <__assert_fail@plt+0x1b70>
   12c28:	tst	r4, #8
   12c2c:	add	r9, r9, #1
   12c30:	beq	12e98 <__assert_fail@plt+0x1d94>
   12c34:	ldr	r2, [sp, #24]
   12c38:	mov	r3, #49	; 0x31
   12c3c:	sub	r8, r2, #1
   12c40:	strb	r3, [r2, #-1]
   12c44:	mov	r7, r2
   12c48:	b	128a4 <__assert_fail@plt+0x17a0>
   12c4c:	and	r2, sl, #1
   12c50:	adds	r2, r2, r8
   12c54:	mov	r3, #0
   12c58:	adc	r3, r3, r8, asr #31
   12c5c:	orr	r7, r2, r3
   12c60:	cmp	r7, #0
   12c64:	moveq	r7, r6
   12c68:	addne	r7, r6, #1
   12c6c:	cmp	r7, #5
   12c70:	bgt	12c04 <__assert_fail@plt+0x1b00>
   12c74:	ldr	r8, [sp, #24]
   12c78:	mov	r6, #10
   12c7c:	mov	r7, #0
   12c80:	mov	r0, sl
   12c84:	mov	r1, fp
   12c88:	mov	r2, r6
   12c8c:	mov	r3, r7
   12c90:	bl	1a240 <__assert_fail@plt+0x913c>
   12c94:	mov	r0, sl
   12c98:	mov	r1, fp
   12c9c:	mov	r3, r7
   12ca0:	add	r2, r2, #48	; 0x30
   12ca4:	strb	r2, [r8, #-1]!
   12ca8:	mov	r2, r6
   12cac:	bl	1a240 <__assert_fail@plt+0x913c>
   12cb0:	mov	sl, r0
   12cb4:	mov	fp, r1
   12cb8:	orrs	r3, sl, fp
   12cbc:	bne	12c80 <__assert_fail@plt+0x1b7c>
   12cc0:	ldr	r7, [sp, #24]
   12cc4:	b	128a4 <__assert_fail@plt+0x17a0>
   12cc8:	movcc	r8, #3
   12ccc:	movcs	r8, #2
   12cd0:	b	124cc <__assert_fail@plt+0x13c8>
   12cd4:	ldr	r3, [sp, #8]
   12cd8:	mov	r9, #0
   12cdc:	str	r3, [sp, #24]
   12ce0:	b	12be0 <__assert_fail@plt+0x1adc>
   12ce4:	bl	1a1cc <__assert_fail@plt+0x90c8>
   12ce8:	vmov	d7, r0, r1
   12cec:	vcmp.f64	d7, d9
   12cf0:	vmrs	APSR_nzcv, fpscr
   12cf4:	movne	r0, #1
   12cf8:	moveq	r0, #0
   12cfc:	b	12398 <__assert_fail@plt+0x1294>
   12d00:	vldr	d7, [pc, #480]	; 12ee8 <__assert_fail@plt+0x1de4>
   12d04:	vmul.f64	d9, d9, d7
   12d08:	b	123b0 <__assert_fail@plt+0x12ac>
   12d0c:	mov	r2, r3
   12d10:	add	r3, r8, r9
   12d14:	cmp	r2, r3
   12d18:	movcs	r8, #2
   12d1c:	movcc	r8, #3
   12d20:	b	12550 <__assert_fail@plt+0x144c>
   12d24:	mov	r2, r3
   12d28:	add	r3, r8, r9
   12d2c:	cmp	r2, r3
   12d30:	movcs	r8, #2
   12d34:	movcc	r8, #3
   12d38:	b	125cc <__assert_fail@plt+0x14c8>
   12d3c:	ldr	r3, [sp, #28]
   12d40:	add	r7, r8, r7
   12d44:	cmp	r3, r7
   12d48:	movcs	r8, #2
   12d4c:	movcc	r8, #3
   12d50:	b	12648 <__assert_fail@plt+0x1544>
   12d54:	ldr	r3, [sp, #28]
   12d58:	add	r7, r8, r7
   12d5c:	cmp	r3, r7
   12d60:	movcs	r8, #2
   12d64:	movcc	r8, #3
   12d68:	b	126c4 <__assert_fail@plt+0x15c0>
   12d6c:	ldr	r3, [sp, #28]
   12d70:	add	r7, r8, r7
   12d74:	cmp	r3, r7
   12d78:	movcs	r8, #2
   12d7c:	movcc	r8, #3
   12d80:	b	12740 <__assert_fail@plt+0x163c>
   12d84:	add	r7, r8, r7
   12d88:	cmp	r9, r7
   12d8c:	movcs	r8, #2
   12d90:	movcc	r8, #3
   12d94:	b	127b8 <__assert_fail@plt+0x16b4>
   12d98:	vmov.f64	d6, d7
   12d9c:	mov	r9, #1
   12da0:	b	122ac <__assert_fail@plt+0x11a8>
   12da4:	mov	r9, #2
   12da8:	b	122ac <__assert_fail@plt+0x11a8>
   12dac:	vmov.f64	d6, d5
   12db0:	mov	r9, #3
   12db4:	b	122ac <__assert_fail@plt+0x11a8>
   12db8:	mov	r9, #4
   12dbc:	b	122ac <__assert_fail@plt+0x11a8>
   12dc0:	vmov.f64	d6, d5
   12dc4:	mov	r9, #5
   12dc8:	b	122ac <__assert_fail@plt+0x11a8>
   12dcc:	mov	r9, #6
   12dd0:	b	122ac <__assert_fail@plt+0x11a8>
   12dd4:	vmov.f64	d6, d5
   12dd8:	mov	r9, #7
   12ddc:	b	122ac <__assert_fail@plt+0x11a8>
   12de0:	cmp	r6, #0
   12de4:	bne	127fc <__assert_fail@plt+0x16f8>
   12de8:	tst	r4, #8
   12dec:	bne	12e48 <__assert_fail@plt+0x1d44>
   12df0:	mov	r3, #48	; 0x30
   12df4:	b	12804 <__assert_fail@plt+0x1700>
   12df8:	mov	r9, #0
   12dfc:	b	128bc <__assert_fail@plt+0x17b8>
   12e00:	mov	r9, #1
   12e04:	b	128bc <__assert_fail@plt+0x17b8>
   12e08:	and	r3, r6, #1
   12e0c:	add	r3, r3, r8
   12e10:	cmp	r3, #2
   12e14:	movle	r3, #0
   12e18:	movgt	r3, #1
   12e1c:	b	127e8 <__assert_fail@plt+0x16e4>
   12e20:	mov	r9, #2
   12e24:	b	128bc <__assert_fail@plt+0x17b8>
   12e28:	mov	r9, #3
   12e2c:	b	128bc <__assert_fail@plt+0x17b8>
   12e30:	mov	r9, #4
   12e34:	b	128bc <__assert_fail@plt+0x17b8>
   12e38:	mov	r9, #5
   12e3c:	b	128bc <__assert_fail@plt+0x17b8>
   12e40:	mov	r9, #6
   12e44:	b	128bc <__assert_fail@plt+0x17b8>
   12e48:	ldr	r3, [sp, #8]
   12e4c:	mov	r6, #0
   12e50:	str	r3, [sp, #24]
   12e54:	b	12be0 <__assert_fail@plt+0x1adc>
   12e58:	adds	sl, sl, #1
   12e5c:	adc	fp, fp, #0
   12e60:	cmp	fp, #0
   12e64:	cmpeq	sl, #10
   12e68:	mov	r8, #0
   12e6c:	moveq	r6, r8
   12e70:	bne	12de8 <__assert_fail@plt+0x1ce4>
   12e74:	ldr	r3, [sp, #8]
   12e78:	str	r3, [sp, #24]
   12e7c:	b	12be0 <__assert_fail@plt+0x1adc>
   12e80:	mov	r9, #1
   12e84:	b	127bc <__assert_fail@plt+0x16b8>
   12e88:	mov	r9, #2
   12e8c:	b	127bc <__assert_fail@plt+0x16b8>
   12e90:	mov	r9, #3
   12e94:	b	127bc <__assert_fail@plt+0x16b8>
   12e98:	ldr	ip, [sp, #48]	; 0x30
   12e9c:	ldr	r1, [sp, #24]
   12ea0:	mvn	r3, ip
   12ea4:	add	r3, r1, r3
   12ea8:	mov	r2, #48	; 0x30
   12eac:	strb	r2, [r1, #-1]
   12eb0:	mov	r0, r3
   12eb4:	ldr	r1, [sp, #52]	; 0x34
   12eb8:	mov	r2, ip
   12ebc:	str	r3, [sp, #24]
   12ec0:	bl	10eb8 <memcpy@plt>
   12ec4:	b	12c34 <__assert_fail@plt+0x1b30>
   12ec8:	mov	r9, #4
   12ecc:	b	127bc <__assert_fail@plt+0x16b8>
   12ed0:	mov	r9, #5
   12ed4:	b	127bc <__assert_fail@plt+0x16b8>
   12ed8:	cmp	r3, #0
   12edc:	ldrne	r2, [sp, #8]
   12ee0:	bne	12938 <__assert_fail@plt+0x1834>
   12ee4:	b	12948 <__assert_fail@plt+0x1844>
   12ee8:	andeq	r0, r0, r0
   12eec:	eormi	r0, r4, r0
   12ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef4:	subs	r4, r0, #0
   12ef8:	sub	sp, sp, #20
   12efc:	mov	r8, r1
   12f00:	mov	r7, r2
   12f04:	beq	13014 <__assert_fail@plt+0x1f10>
   12f08:	ldrb	r3, [r4]
   12f0c:	ldr	r5, [pc, #384]	; 13094 <__assert_fail@plt+0x1f90>
   12f10:	cmp	r3, #39	; 0x27
   12f14:	addeq	r4, r4, #1
   12f18:	mov	r3, #4
   12f1c:	add	r2, r5, #12
   12f20:	add	r1, r5, #20
   12f24:	mov	r0, r4
   12f28:	moveq	r9, #164	; 0xa4
   12f2c:	moveq	fp, #420	; 0x1a4
   12f30:	moveq	sl, #388	; 0x184
   12f34:	moveq	r6, #4
   12f38:	movne	r9, #160	; 0xa0
   12f3c:	movne	fp, #416	; 0x1a0
   12f40:	movne	sl, #384	; 0x180
   12f44:	movne	r6, #0
   12f48:	bl	1906c <__assert_fail@plt+0x7f68>
   12f4c:	cmp	r0, #0
   12f50:	blt	12fb0 <__assert_fail@plt+0x1eac>
   12f54:	add	r5, r5, r0, lsl #2
   12f58:	mov	r1, #0
   12f5c:	ldr	ip, [r5, #12]
   12f60:	mov	r0, #1
   12f64:	mov	r2, r0
   12f68:	orr	r6, r6, ip
   12f6c:	mov	r3, r1
   12f70:	str	r0, [r7]
   12f74:	str	r1, [r7, #4]
   12f78:	mov	r0, #0
   12f7c:	str	r6, [r8]
   12f80:	orrs	r3, r2, r3
   12f84:	bne	12fa8 <__assert_fail@plt+0x1ea4>
   12f88:	ldr	r0, [pc, #264]	; 13098 <__assert_fail@plt+0x1f94>
   12f8c:	bl	10f78 <getenv@plt>
   12f90:	mov	r3, #0
   12f94:	cmp	r0, #0
   12f98:	movne	r2, #512	; 0x200
   12f9c:	moveq	r2, #1024	; 0x400
   12fa0:	mov	r0, #4
   12fa4:	strd	r2, [r7]
   12fa8:	add	sp, sp, #20
   12fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb0:	ldr	r2, [pc, #228]	; 1309c <__assert_fail@plt+0x1f98>
   12fb4:	mov	r3, r7
   12fb8:	str	r2, [sp]
   12fbc:	add	r1, sp, #12
   12fc0:	mov	r2, #0
   12fc4:	mov	r0, r4
   12fc8:	bl	181c8 <__assert_fail@plt+0x70c4>
   12fcc:	cmp	r0, #0
   12fd0:	bne	13058 <__assert_fail@plt+0x1f54>
   12fd4:	ldrb	r3, [r4]
   12fd8:	sub	r3, r3, #48	; 0x30
   12fdc:	cmp	r3, #9
   12fe0:	bls	1300c <__assert_fail@plt+0x1f08>
   12fe4:	ldr	r2, [sp, #12]
   12fe8:	cmp	r4, r2
   12fec:	bne	12ffc <__assert_fail@plt+0x1ef8>
   12ff0:	b	13068 <__assert_fail@plt+0x1f64>
   12ff4:	cmp	r2, r4
   12ff8:	beq	13068 <__assert_fail@plt+0x1f64>
   12ffc:	ldrb	r3, [r4, #1]!
   13000:	sub	r3, r3, #48	; 0x30
   13004:	cmp	r3, #9
   13008:	bhi	12ff4 <__assert_fail@plt+0x1ef0>
   1300c:	ldrd	r2, [r7]
   13010:	b	12f78 <__assert_fail@plt+0x1e74>
   13014:	ldr	r0, [pc, #132]	; 130a0 <__assert_fail@plt+0x1f9c>
   13018:	bl	10f78 <getenv@plt>
   1301c:	subs	r4, r0, #0
   13020:	bne	12f08 <__assert_fail@plt+0x1e04>
   13024:	ldr	r0, [pc, #120]	; 130a4 <__assert_fail@plt+0x1fa0>
   13028:	bl	10f78 <getenv@plt>
   1302c:	subs	r4, r0, #0
   13030:	bne	12f08 <__assert_fail@plt+0x1e04>
   13034:	ldr	r0, [pc, #92]	; 13098 <__assert_fail@plt+0x1f94>
   13038:	bl	10f78 <getenv@plt>
   1303c:	mov	r3, #0
   13040:	mov	r6, #0
   13044:	cmp	r0, #0
   13048:	movne	r2, #512	; 0x200
   1304c:	moveq	r2, #1024	; 0x400
   13050:	strd	r2, [r7]
   13054:	b	12f78 <__assert_fail@plt+0x1e74>
   13058:	mov	r3, #0
   1305c:	str	r3, [r8]
   13060:	ldrd	r2, [r7]
   13064:	b	12f80 <__assert_fail@plt+0x1e7c>
   13068:	ldrb	r3, [r2, #-1]
   1306c:	cmp	r3, #66	; 0x42
   13070:	beq	1307c <__assert_fail@plt+0x1f78>
   13074:	mov	r6, r9
   13078:	b	1300c <__assert_fail@plt+0x1f08>
   1307c:	ldrb	r3, [r2, #-2]
   13080:	cmp	r3, #105	; 0x69
   13084:	movne	r6, sl
   13088:	bne	1300c <__assert_fail@plt+0x1f08>
   1308c:	mov	r9, fp
   13090:	b	13074 <__assert_fail@plt+0x1f70>
   13094:			; <UNDEFINED> instruction: 0x0001a8b4
   13098:	andeq	sl, r1, r0, lsl #18
   1309c:	andeq	sl, r1, r0, lsl r9
   130a0:	andeq	sl, r1, r8, ror #17
   130a4:	strdeq	sl, [r1], -r4
   130a8:	push	{r4, r5, r6, lr}
   130ac:	subs	r4, r0, #0
   130b0:	beq	13124 <__assert_fail@plt+0x2020>
   130b4:	mov	r1, #47	; 0x2f
   130b8:	bl	1108c <strrchr@plt>
   130bc:	subs	r5, r0, #0
   130c0:	beq	13110 <__assert_fail@plt+0x200c>
   130c4:	add	r6, r5, #1
   130c8:	sub	r3, r6, r4
   130cc:	cmp	r3, #6
   130d0:	ble	13110 <__assert_fail@plt+0x200c>
   130d4:	mov	r2, #7
   130d8:	ldr	r1, [pc, #96]	; 13140 <__assert_fail@plt+0x203c>
   130dc:	sub	r0, r5, #6
   130e0:	bl	110e0 <strncmp@plt>
   130e4:	cmp	r0, #0
   130e8:	bne	13110 <__assert_fail@plt+0x200c>
   130ec:	mov	r2, #3
   130f0:	ldr	r1, [pc, #76]	; 13144 <__assert_fail@plt+0x2040>
   130f4:	mov	r0, r6
   130f8:	bl	110e0 <strncmp@plt>
   130fc:	cmp	r0, #0
   13100:	movne	r4, r6
   13104:	ldreq	r3, [pc, #60]	; 13148 <__assert_fail@plt+0x2044>
   13108:	addeq	r4, r5, #4
   1310c:	streq	r4, [r3]
   13110:	ldr	r2, [pc, #52]	; 1314c <__assert_fail@plt+0x2048>
   13114:	ldr	r3, [pc, #52]	; 13150 <__assert_fail@plt+0x204c>
   13118:	str	r4, [r2]
   1311c:	str	r4, [r3]
   13120:	pop	{r4, r5, r6, pc}
   13124:	ldr	r3, [pc, #40]	; 13154 <__assert_fail@plt+0x2050>
   13128:	mov	r2, #55	; 0x37
   1312c:	mov	r1, #1
   13130:	ldr	r3, [r3]
   13134:	ldr	r0, [pc, #28]	; 13158 <__assert_fail@plt+0x2054>
   13138:	bl	10f30 <fwrite@plt>
   1313c:	bl	110ec <abort@plt>
   13140:	andeq	sl, r1, r0, ror r9
   13144:	andeq	sl, r1, r8, ror r9
   13148:	andeq	fp, r2, r8, asr r1
   1314c:	andeq	fp, r2, ip, lsl #3
   13150:	andeq	fp, r2, ip, asr r1
   13154:	andeq	fp, r2, r8, ror #2
   13158:	andeq	sl, r1, r8, lsr r9
   1315c:	push	{r4, r5, r6, lr}
   13160:	mov	r4, r0
   13164:	mov	r5, r1
   13168:	bl	19874 <__assert_fail@plt+0x8770>
   1316c:	ldrb	r3, [r0]
   13170:	bic	r3, r3, #32
   13174:	cmp	r3, #85	; 0x55
   13178:	bne	131d8 <__assert_fail@plt+0x20d4>
   1317c:	ldrb	r3, [r0, #1]
   13180:	bic	r3, r3, #32
   13184:	cmp	r3, #84	; 0x54
   13188:	bne	13214 <__assert_fail@plt+0x2110>
   1318c:	ldrb	r3, [r0, #2]
   13190:	bic	r3, r3, #32
   13194:	cmp	r3, #70	; 0x46
   13198:	bne	13214 <__assert_fail@plt+0x2110>
   1319c:	ldrb	r3, [r0, #3]
   131a0:	cmp	r3, #45	; 0x2d
   131a4:	bne	13214 <__assert_fail@plt+0x2110>
   131a8:	ldrb	r3, [r0, #4]
   131ac:	cmp	r3, #56	; 0x38
   131b0:	bne	13214 <__assert_fail@plt+0x2110>
   131b4:	ldrb	r3, [r0, #5]
   131b8:	cmp	r3, #0
   131bc:	bne	13214 <__assert_fail@plt+0x2110>
   131c0:	ldrb	r2, [r4]
   131c4:	ldr	r3, [pc, #152]	; 13264 <__assert_fail@plt+0x2160>
   131c8:	ldr	r0, [pc, #152]	; 13268 <__assert_fail@plt+0x2164>
   131cc:	cmp	r2, #96	; 0x60
   131d0:	movne	r0, r3
   131d4:	pop	{r4, r5, r6, pc}
   131d8:	cmp	r3, #71	; 0x47
   131dc:	bne	13214 <__assert_fail@plt+0x2110>
   131e0:	ldrb	r3, [r0, #1]
   131e4:	bic	r3, r3, #32
   131e8:	cmp	r3, #66	; 0x42
   131ec:	bne	13214 <__assert_fail@plt+0x2110>
   131f0:	ldrb	r3, [r0, #2]
   131f4:	cmp	r3, #49	; 0x31
   131f8:	bne	13214 <__assert_fail@plt+0x2110>
   131fc:	ldrb	r3, [r0, #3]
   13200:	cmp	r3, #56	; 0x38
   13204:	bne	13214 <__assert_fail@plt+0x2110>
   13208:	ldrb	r3, [r0, #4]
   1320c:	cmp	r3, #48	; 0x30
   13210:	beq	13228 <__assert_fail@plt+0x2124>
   13214:	ldr	r3, [pc, #80]	; 1326c <__assert_fail@plt+0x2168>
   13218:	cmp	r5, #9
   1321c:	ldr	r0, [pc, #76]	; 13270 <__assert_fail@plt+0x216c>
   13220:	movne	r0, r3
   13224:	pop	{r4, r5, r6, pc}
   13228:	ldrb	r3, [r0, #5]
   1322c:	cmp	r3, #51	; 0x33
   13230:	bne	13214 <__assert_fail@plt+0x2110>
   13234:	ldrb	r3, [r0, #6]
   13238:	cmp	r3, #48	; 0x30
   1323c:	bne	13214 <__assert_fail@plt+0x2110>
   13240:	ldrb	r3, [r0, #7]
   13244:	cmp	r3, #0
   13248:	bne	13214 <__assert_fail@plt+0x2110>
   1324c:	ldrb	r2, [r4]
   13250:	ldr	r3, [pc, #28]	; 13274 <__assert_fail@plt+0x2170>
   13254:	ldr	r0, [pc, #28]	; 13278 <__assert_fail@plt+0x2174>
   13258:	cmp	r2, #96	; 0x60
   1325c:	movne	r0, r3
   13260:	pop	{r4, r5, r6, pc}
   13264:	ldrdeq	sl, [r1], -r4
   13268:	ldrdeq	sl, [r1], -r0
   1326c:	andeq	sl, r1, r4, ror #19
   13270:	andeq	sl, r1, r0, ror #19
   13274:	ldrdeq	sl, [r1], -ip
   13278:	ldrdeq	sl, [r1], -r8
   1327c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13280:	sub	sp, sp, #140	; 0x8c
   13284:	mov	r9, r1
   13288:	str	r3, [sp, #24]
   1328c:	mov	r3, #1
   13290:	mov	sl, r0
   13294:	str	r2, [sp, #44]	; 0x2c
   13298:	str	r3, [sp, #28]
   1329c:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   132a0:	ldr	r3, [sp, #180]	; 0xb4
   132a4:	mov	fp, r9
   132a8:	mov	r9, sl
   132ac:	lsr	r3, r3, #1
   132b0:	and	r3, r3, #1
   132b4:	str	r3, [sp, #40]	; 0x28
   132b8:	ldr	r3, [sp, #180]	; 0xb4
   132bc:	mov	r2, #0
   132c0:	and	r3, r3, #4
   132c4:	str	r3, [sp, #100]	; 0x64
   132c8:	ldr	r3, [sp, #180]	; 0xb4
   132cc:	str	r2, [sp, #76]	; 0x4c
   132d0:	and	r3, r3, #1
   132d4:	str	r3, [sp, #96]	; 0x60
   132d8:	str	r2, [sp, #36]	; 0x24
   132dc:	str	r2, [sp, #56]	; 0x38
   132e0:	str	r2, [sp, #68]	; 0x44
   132e4:	str	r2, [sp, #72]	; 0x48
   132e8:	str	r2, [sp, #84]	; 0x54
   132ec:	str	r0, [sp, #80]	; 0x50
   132f0:	ldr	r3, [sp, #176]	; 0xb0
   132f4:	cmp	r3, #10
   132f8:	ldrls	pc, [pc, r3, lsl #2]
   132fc:	b	144d4 <__assert_fail@plt+0x33d0>
   13300:	andeq	r3, r1, ip, lsr #6
   13304:	andeq	r3, r1, ip, asr #12
   13308:	andeq	r3, r1, r4, lsr #15
   1330c:	andeq	r3, r1, r0, lsl #13
   13310:	strdeq	r3, [r1], -r8
   13314:	ldrdeq	r3, [r1], -r8
   13318:	andeq	r3, r1, r0, lsr #13
   1331c:	andeq	r3, r1, r4, asr #13
   13320:	andeq	r3, r1, ip, ror #13
   13324:	andeq	r3, r1, ip, ror #13
   13328:	andeq	r3, r1, ip, ror #13
   1332c:	mov	r3, #0
   13330:	ldr	r1, [sp, #56]	; 0x38
   13334:	ldr	r2, [sp, #176]	; 0xb0
   13338:	ldr	lr, [sp, #176]	; 0xb0
   1333c:	mov	r8, r3
   13340:	mov	ip, r3
   13344:	str	r3, [sp, #40]	; 0x28
   13348:	mov	r3, r1
   1334c:	cmp	r2, #2
   13350:	moveq	r3, #0
   13354:	andne	r3, r3, #1
   13358:	mov	r0, r3
   1335c:	str	r3, [sp, #92]	; 0x5c
   13360:	ldr	r3, [sp, #68]	; 0x44
   13364:	sub	lr, lr, #2
   13368:	adds	r2, r3, #0
   1336c:	movne	r2, #1
   13370:	and	r3, r1, ip
   13374:	and	r3, r2, r3
   13378:	clz	lr, lr
   1337c:	str	r3, [sp, #88]	; 0x58
   13380:	lsr	lr, lr, #5
   13384:	mov	r3, ip
   13388:	and	r3, r3, lr
   1338c:	mov	sl, #0
   13390:	and	r0, r2, r0
   13394:	str	r3, [sp, #64]	; 0x40
   13398:	eor	r3, r1, #1
   1339c:	str	lr, [sp, #52]	; 0x34
   133a0:	str	r0, [sp, #48]	; 0x30
   133a4:	str	r3, [sp, #60]	; 0x3c
   133a8:	ldr	r3, [sp, #24]
   133ac:	cmn	r3, #1
   133b0:	beq	138e0 <__assert_fail@plt+0x27dc>
   133b4:	subs	r7, r3, sl
   133b8:	movne	r7, #1
   133bc:	cmp	r7, #0
   133c0:	beq	138f8 <__assert_fail@plt+0x27f4>
   133c4:	ldr	r3, [sp, #48]	; 0x30
   133c8:	cmp	r3, #0
   133cc:	beq	13c64 <__assert_fail@plt+0x2b60>
   133d0:	ldr	r2, [sp, #68]	; 0x44
   133d4:	ldr	r1, [sp, #24]
   133d8:	cmp	r2, #1
   133dc:	mov	r3, r2
   133e0:	movls	r3, #0
   133e4:	movhi	r3, #1
   133e8:	cmn	r1, #1
   133ec:	movne	r3, #0
   133f0:	cmp	r3, #0
   133f4:	add	r4, sl, r2
   133f8:	beq	13408 <__assert_fail@plt+0x2304>
   133fc:	ldr	r0, [sp, #44]	; 0x2c
   13400:	bl	10fd8 <strlen@plt>
   13404:	str	r0, [sp, #24]
   13408:	ldr	r3, [sp, #24]
   1340c:	cmp	r3, r4
   13410:	ldr	r3, [sp, #44]	; 0x2c
   13414:	add	r5, r3, sl
   13418:	bcc	13c6c <__assert_fail@plt+0x2b68>
   1341c:	mov	r0, r5
   13420:	ldr	r2, [sp, #68]	; 0x44
   13424:	ldr	r1, [sp, #72]	; 0x48
   13428:	bl	10edc <memcmp@plt>
   1342c:	cmp	r0, #0
   13430:	bne	13c6c <__assert_fail@plt+0x2b68>
   13434:	ldr	r3, [sp, #40]	; 0x28
   13438:	cmp	r3, #0
   1343c:	bne	14628 <__assert_fail@plt+0x3524>
   13440:	ldrb	r4, [r5]
   13444:	cmp	r4, #126	; 0x7e
   13448:	ldrls	pc, [pc, r4, lsl #2]
   1344c:	b	14564 <__assert_fail@plt+0x3460>
   13450:	andeq	r3, r1, r4, lsr #22
   13454:	andeq	r4, r1, r4, ror #10
   13458:	andeq	r4, r1, r4, ror #10
   1345c:	andeq	r4, r1, r4, ror #10
   13460:	andeq	r4, r1, r4, ror #10
   13464:	andeq	r4, r1, r4, ror #10
   13468:	andeq	r4, r1, r4, ror #10
   1346c:	andeq	r3, r1, r0, lsl fp
   13470:	strdeq	r3, [r1], -ip
   13474:	ldrdeq	r3, [r1], -r8
   13478:			; <UNDEFINED> instruction: 0x00013ab8
   1347c:	andeq	r3, r1, r8, ror #21
   13480:	andeq	r3, r1, r0, lsr #20
   13484:	andeq	r3, r1, r4, asr ip
   13488:	andeq	r4, r1, r4, ror #10
   1348c:	andeq	r4, r1, r4, ror #10
   13490:	andeq	r4, r1, r4, ror #10
   13494:	andeq	r4, r1, r4, ror #10
   13498:	andeq	r4, r1, r4, ror #10
   1349c:	andeq	r4, r1, r4, ror #10
   134a0:	andeq	r4, r1, r4, ror #10
   134a4:	andeq	r4, r1, r4, ror #10
   134a8:	andeq	r4, r1, r4, ror #10
   134ac:	andeq	r4, r1, r4, ror #10
   134b0:	andeq	r4, r1, r4, ror #10
   134b4:	andeq	r4, r1, r4, ror #10
   134b8:	andeq	r4, r1, r4, ror #10
   134bc:	andeq	r4, r1, r4, ror #10
   134c0:	andeq	r4, r1, r4, ror #10
   134c4:	andeq	r4, r1, r4, ror #10
   134c8:	andeq	r4, r1, r4, ror #10
   134cc:	andeq	r4, r1, r4, ror #10
   134d0:	andeq	r3, r1, r4, asr #24
   134d4:	andeq	r3, r1, r4, lsr #24
   134d8:	andeq	r3, r1, r4, lsr #24
   134dc:	andeq	r3, r1, r4, lsl #24
   134e0:	andeq	r3, r1, r4, lsr #24
   134e4:	andeq	r3, r1, r0, lsl sl
   134e8:	andeq	r3, r1, r4, lsr #24
   134ec:	andeq	r3, r1, ip, ror #19
   134f0:	andeq	r3, r1, r4, lsr #24
   134f4:	andeq	r3, r1, r4, lsr #24
   134f8:	andeq	r3, r1, r4, lsr #24
   134fc:	andeq	r3, r1, r0, lsl sl
   13500:	andeq	r3, r1, r0, lsl sl
   13504:	andeq	r3, r1, r0, lsl sl
   13508:	andeq	r3, r1, r0, lsl sl
   1350c:	andeq	r3, r1, r0, lsl sl
   13510:	andeq	r3, r1, r0, lsl sl
   13514:	andeq	r3, r1, r0, lsl sl
   13518:	andeq	r3, r1, r0, lsl sl
   1351c:	andeq	r3, r1, r0, lsl sl
   13520:	andeq	r3, r1, r0, lsl sl
   13524:	andeq	r3, r1, r0, lsl sl
   13528:	andeq	r3, r1, r0, lsl sl
   1352c:	andeq	r3, r1, r0, lsl sl
   13530:	andeq	r3, r1, r0, lsl sl
   13534:	andeq	r3, r1, r0, lsl sl
   13538:	andeq	r3, r1, r0, lsl sl
   1353c:	andeq	r3, r1, r4, lsr #24
   13540:	andeq	r3, r1, r4, lsr #24
   13544:	andeq	r3, r1, r4, lsr #24
   13548:	andeq	r3, r1, r4, lsr #24
   1354c:	muleq	r1, ip, r9
   13550:	andeq	r4, r1, r4, ror #10
   13554:	andeq	r3, r1, r0, lsl sl
   13558:	andeq	r3, r1, r0, lsl sl
   1355c:	andeq	r3, r1, r0, lsl sl
   13560:	andeq	r3, r1, r0, lsl sl
   13564:	andeq	r3, r1, r0, lsl sl
   13568:	andeq	r3, r1, r0, lsl sl
   1356c:	andeq	r3, r1, r0, lsl sl
   13570:	andeq	r3, r1, r0, lsl sl
   13574:	andeq	r3, r1, r0, lsl sl
   13578:	andeq	r3, r1, r0, lsl sl
   1357c:	andeq	r3, r1, r0, lsl sl
   13580:	andeq	r3, r1, r0, lsl sl
   13584:	andeq	r3, r1, r0, lsl sl
   13588:	andeq	r3, r1, r0, lsl sl
   1358c:	andeq	r3, r1, r0, lsl sl
   13590:	andeq	r3, r1, r0, lsl sl
   13594:	andeq	r3, r1, r0, lsl sl
   13598:	andeq	r3, r1, r0, lsl sl
   1359c:	andeq	r3, r1, r0, lsl sl
   135a0:	andeq	r3, r1, r0, lsl sl
   135a4:	andeq	r3, r1, r0, lsl sl
   135a8:	andeq	r3, r1, r0, lsl sl
   135ac:	andeq	r3, r1, r0, lsl sl
   135b0:	andeq	r3, r1, r0, lsl sl
   135b4:	andeq	r3, r1, r0, lsl sl
   135b8:	andeq	r3, r1, r0, lsl sl
   135bc:	andeq	r3, r1, r4, lsr #24
   135c0:	andeq	r3, r1, r8, ror #18
   135c4:	andeq	r3, r1, r0, lsl sl
   135c8:	andeq	r3, r1, r4, lsr #24
   135cc:	andeq	r3, r1, r0, lsl sl
   135d0:	andeq	r3, r1, r4, lsr #24
   135d4:	andeq	r3, r1, r0, lsl sl
   135d8:	andeq	r3, r1, r0, lsl sl
   135dc:	andeq	r3, r1, r0, lsl sl
   135e0:	andeq	r3, r1, r0, lsl sl
   135e4:	andeq	r3, r1, r0, lsl sl
   135e8:	andeq	r3, r1, r0, lsl sl
   135ec:	andeq	r3, r1, r0, lsl sl
   135f0:	andeq	r3, r1, r0, lsl sl
   135f4:	andeq	r3, r1, r0, lsl sl
   135f8:	andeq	r3, r1, r0, lsl sl
   135fc:	andeq	r3, r1, r0, lsl sl
   13600:	andeq	r3, r1, r0, lsl sl
   13604:	andeq	r3, r1, r0, lsl sl
   13608:	andeq	r3, r1, r0, lsl sl
   1360c:	andeq	r3, r1, r0, lsl sl
   13610:	andeq	r3, r1, r0, lsl sl
   13614:	andeq	r3, r1, r0, lsl sl
   13618:	andeq	r3, r1, r0, lsl sl
   1361c:	andeq	r3, r1, r0, lsl sl
   13620:	andeq	r3, r1, r0, lsl sl
   13624:	andeq	r3, r1, r0, lsl sl
   13628:	andeq	r3, r1, r0, lsl sl
   1362c:	andeq	r3, r1, r0, lsl sl
   13630:	andeq	r3, r1, r0, lsl sl
   13634:	andeq	r3, r1, r0, lsl sl
   13638:	andeq	r3, r1, r0, lsl sl
   1363c:	andeq	r3, r1, r0, lsr #16
   13640:	andeq	r3, r1, r4, lsr #24
   13644:	andeq	r3, r1, r0, lsr #16
   13648:	andeq	r3, r1, r4, lsl #24
   1364c:	mov	r3, #1
   13650:	str	r3, [sp, #40]	; 0x28
   13654:	str	r3, [sp, #68]	; 0x44
   13658:	mov	r8, #0
   1365c:	ldr	r3, [pc, #4056]	; 1463c <__assert_fail@plt+0x3538>
   13660:	str	r3, [sp, #72]	; 0x48
   13664:	mov	r3, #2
   13668:	str	r3, [sp, #176]	; 0xb0
   1366c:	ldr	r1, [sp, #56]	; 0x38
   13670:	mov	r2, r3
   13674:	ldr	ip, [sp, #40]	; 0x28
   13678:	mov	lr, r3
   1367c:	b	13348 <__assert_fail@plt+0x2244>
   13680:	mov	r3, #1
   13684:	str	r3, [sp, #56]	; 0x38
   13688:	str	r3, [sp, #68]	; 0x44
   1368c:	str	r3, [sp, #40]	; 0x28
   13690:	ldr	r3, [pc, #4004]	; 1463c <__assert_fail@plt+0x3538>
   13694:	mov	r8, #0
   13698:	str	r3, [sp, #72]	; 0x48
   1369c:	b	13664 <__assert_fail@plt+0x2560>
   136a0:	mov	r3, #1
   136a4:	str	r3, [sp, #56]	; 0x38
   136a8:	str	r3, [sp, #68]	; 0x44
   136ac:	str	r3, [sp, #40]	; 0x28
   136b0:	ldr	r3, [pc, #3976]	; 14640 <__assert_fail@plt+0x353c>
   136b4:	mov	r8, #0
   136b8:	str	r3, [sp, #72]	; 0x48
   136bc:	mov	r3, #5
   136c0:	b	13668 <__assert_fail@plt+0x2564>
   136c4:	mov	r3, #0
   136c8:	str	r3, [sp, #40]	; 0x28
   136cc:	mov	r3, #1
   136d0:	str	r3, [sp, #56]	; 0x38
   136d4:	mov	r8, #0
   136d8:	mov	r1, r3
   136dc:	ldr	r2, [sp, #176]	; 0xb0
   136e0:	ldr	ip, [sp, #40]	; 0x28
   136e4:	ldr	lr, [sp, #176]	; 0xb0
   136e8:	b	13348 <__assert_fail@plt+0x2244>
   136ec:	ldr	r3, [sp, #176]	; 0xb0
   136f0:	cmp	r3, #10
   136f4:	beq	13738 <__assert_fail@plt+0x2634>
   136f8:	mov	r2, #5
   136fc:	ldr	r1, [pc, #3904]	; 14644 <__assert_fail@plt+0x3540>
   13700:	mov	r0, #0
   13704:	bl	10ef4 <dcgettext@plt>
   13708:	ldr	r2, [pc, #3892]	; 14644 <__assert_fail@plt+0x3540>
   1370c:	cmp	r0, r2
   13710:	str	r0, [sp, #188]	; 0xbc
   13714:	beq	147d0 <__assert_fail@plt+0x36cc>
   13718:	mov	r2, #5
   1371c:	ldr	r1, [pc, #3864]	; 1463c <__assert_fail@plt+0x3538>
   13720:	mov	r0, #0
   13724:	bl	10ef4 <dcgettext@plt>
   13728:	ldr	r2, [pc, #3852]	; 1463c <__assert_fail@plt+0x3538>
   1372c:	cmp	r0, r2
   13730:	str	r0, [sp, #192]	; 0xc0
   13734:	beq	147c0 <__assert_fail@plt+0x36bc>
   13738:	ldr	r8, [sp, #40]	; 0x28
   1373c:	cmp	r8, #0
   13740:	movne	r8, #0
   13744:	bne	13774 <__assert_fail@plt+0x2670>
   13748:	ldr	r3, [sp, #188]	; 0xbc
   1374c:	ldrb	r3, [r3]
   13750:	cmp	r3, #0
   13754:	beq	13774 <__assert_fail@plt+0x2670>
   13758:	ldr	r2, [sp, #188]	; 0xbc
   1375c:	cmp	fp, r8
   13760:	strbhi	r3, [r9, r8]
   13764:	ldrb	r3, [r2, #1]!
   13768:	add	r8, r8, #1
   1376c:	cmp	r3, #0
   13770:	bne	1375c <__assert_fail@plt+0x2658>
   13774:	ldr	r0, [sp, #192]	; 0xc0
   13778:	bl	10fd8 <strlen@plt>
   1377c:	ldr	r3, [sp, #192]	; 0xc0
   13780:	ldr	r2, [sp, #176]	; 0xb0
   13784:	str	r3, [sp, #72]	; 0x48
   13788:	mov	r3, #1
   1378c:	str	r3, [sp, #56]	; 0x38
   13790:	mov	r1, r3
   13794:	ldr	ip, [sp, #40]	; 0x28
   13798:	ldr	lr, [sp, #176]	; 0xb0
   1379c:	str	r0, [sp, #68]	; 0x44
   137a0:	b	13348 <__assert_fail@plt+0x2244>
   137a4:	ldr	r3, [sp, #40]	; 0x28
   137a8:	cmp	r3, #0
   137ac:	beq	14454 <__assert_fail@plt+0x3350>
   137b0:	mov	r3, #1
   137b4:	str	r3, [sp, #68]	; 0x44
   137b8:	ldr	r3, [pc, #3708]	; 1463c <__assert_fail@plt+0x3538>
   137bc:	str	r3, [sp, #72]	; 0x48
   137c0:	mov	r8, #0
   137c4:	ldr	r1, [sp, #56]	; 0x38
   137c8:	ldr	r2, [sp, #176]	; 0xb0
   137cc:	ldr	ip, [sp, #40]	; 0x28
   137d0:	ldr	lr, [sp, #176]	; 0xb0
   137d4:	b	13348 <__assert_fail@plt+0x2244>
   137d8:	ldr	r3, [sp, #40]	; 0x28
   137dc:	cmp	r3, #0
   137e0:	beq	144d8 <__assert_fail@plt+0x33d4>
   137e4:	str	r3, [sp, #56]	; 0x38
   137e8:	mov	r3, #1
   137ec:	str	r3, [sp, #68]	; 0x44
   137f0:	ldr	r3, [pc, #3656]	; 14640 <__assert_fail@plt+0x353c>
   137f4:	b	137bc <__assert_fail@plt+0x26b8>
   137f8:	ldr	r3, [sp, #40]	; 0x28
   137fc:	cmp	r3, #0
   13800:	mov	r3, #1
   13804:	streq	r3, [sp, #56]	; 0x38
   13808:	beq	14454 <__assert_fail@plt+0x3350>
   1380c:	str	r3, [sp, #68]	; 0x44
   13810:	ldr	r3, [pc, #3620]	; 1463c <__assert_fail@plt+0x3538>
   13814:	mov	r8, #0
   13818:	str	r3, [sp, #72]	; 0x48
   1381c:	b	13664 <__assert_fail@plt+0x2560>
   13820:	ldr	r3, [sp, #24]
   13824:	ldr	r6, [sp, #48]	; 0x30
   13828:	cmn	r3, #1
   1382c:	beq	13e88 <__assert_fail@plt+0x2d84>
   13830:	subs	r3, r3, #1
   13834:	movne	r3, #1
   13838:	cmp	r3, #0
   1383c:	beq	13c08 <__assert_fail@plt+0x2b04>
   13840:	ldr	r1, [sp, #52]	; 0x34
   13844:	mov	r7, r3
   13848:	mov	r3, #0
   1384c:	str	r3, [sp, #32]
   13850:	ldr	r3, [sp, #60]	; 0x3c
   13854:	orr	r2, r1, r3
   13858:	ldr	r3, [sp, #40]	; 0x28
   1385c:	eor	r2, r2, #1
   13860:	orr	r2, r3, r2
   13864:	tst	r2, #255	; 0xff
   13868:	bne	1418c <__assert_fail@plt+0x3088>
   1386c:	cmp	r6, #0
   13870:	bne	13a4c <__assert_fail@plt+0x2948>
   13874:	ldr	r3, [sp, #36]	; 0x24
   13878:	add	sl, sl, #1
   1387c:	and	r3, r3, r7
   13880:	uxtb	r6, r3
   13884:	cmp	r6, #0
   13888:	beq	138b4 <__assert_fail@plt+0x27b0>
   1388c:	cmp	fp, r8
   13890:	movhi	r3, #39	; 0x27
   13894:	strbhi	r3, [r9, r8]
   13898:	add	r3, r8, #1
   1389c:	cmp	fp, r3
   138a0:	movhi	r2, #39	; 0x27
   138a4:	add	r8, r8, #2
   138a8:	strbhi	r2, [r9, r3]
   138ac:	mov	r3, #0
   138b0:	str	r3, [sp, #36]	; 0x24
   138b4:	ldr	r2, [sp, #32]
   138b8:	cmp	r8, fp
   138bc:	ldr	r3, [sp, #28]
   138c0:	strbcc	r4, [r9, r8]
   138c4:	cmp	r2, #0
   138c8:	moveq	r3, #0
   138cc:	str	r3, [sp, #28]
   138d0:	ldr	r3, [sp, #24]
   138d4:	add	r8, r8, #1
   138d8:	cmn	r3, #1
   138dc:	bne	133b4 <__assert_fail@plt+0x22b0>
   138e0:	ldr	r3, [sp, #44]	; 0x2c
   138e4:	ldrb	r3, [r3, sl]
   138e8:	adds	r7, r3, #0
   138ec:	movne	r7, #1
   138f0:	cmp	r7, #0
   138f4:	bne	133c4 <__assert_fail@plt+0x22c0>
   138f8:	ldr	r3, [sp, #64]	; 0x40
   138fc:	cmp	r8, #0
   13900:	movne	r3, #0
   13904:	andeq	r3, r3, #1
   13908:	cmp	r3, #0
   1390c:	str	r3, [sp, #64]	; 0x40
   13910:	bne	143b4 <__assert_fail@plt+0x32b0>
   13914:	ldr	r3, [sp, #40]	; 0x28
   13918:	ldr	r2, [sp, #52]	; 0x34
   1391c:	eor	r3, r3, #1
   13920:	ands	r2, r2, r3
   13924:	beq	147e0 <__assert_fail@plt+0x36dc>
   13928:	ldr	r3, [sp, #76]	; 0x4c
   1392c:	cmp	r3, #0
   13930:	beq	147b0 <__assert_fail@plt+0x36ac>
   13934:	ldr	r3, [sp, #28]
   13938:	cmp	r3, #0
   1393c:	bne	1476c <__assert_fail@plt+0x3668>
   13940:	ldr	r2, [sp, #84]	; 0x54
   13944:	clz	r3, fp
   13948:	cmp	r2, #0
   1394c:	lsr	r3, r3, #5
   13950:	moveq	r3, #0
   13954:	cmp	r3, #0
   13958:	beq	1470c <__assert_fail@plt+0x3608>
   1395c:	mov	fp, r2
   13960:	str	r3, [sp, #76]	; 0x4c
   13964:	b	132f0 <__assert_fail@plt+0x21ec>
   13968:	ldr	r3, [sp, #176]	; 0xb0
   1396c:	ldr	r6, [sp, #48]	; 0x30
   13970:	cmp	r3, #2
   13974:	beq	13eac <__assert_fail@plt+0x2da8>
   13978:	ldr	r3, [sp, #88]	; 0x58
   1397c:	cmp	r3, #0
   13980:	beq	14430 <__assert_fail@plt+0x332c>
   13984:	mov	r3, #0
   13988:	add	sl, sl, #1
   1398c:	ldr	r6, [sp, #36]	; 0x24
   13990:	str	r3, [sp, #32]
   13994:	mov	r4, #92	; 0x5c
   13998:	b	13884 <__assert_fail@plt+0x2780>
   1399c:	ldr	r3, [sp, #176]	; 0xb0
   139a0:	ldr	r6, [sp, #48]	; 0x30
   139a4:	cmp	r3, #2
   139a8:	beq	13edc <__assert_fail@plt+0x2dd8>
   139ac:	cmp	r3, #5
   139b0:	bne	14440 <__assert_fail@plt+0x333c>
   139b4:	ldr	r3, [sp, #100]	; 0x64
   139b8:	cmp	r3, #0
   139bc:	beq	144a4 <__assert_fail@plt+0x33a0>
   139c0:	ldr	r2, [sp, #24]
   139c4:	add	r3, sl, #2
   139c8:	cmp	r2, r3
   139cc:	bls	139dc <__assert_fail@plt+0x28d8>
   139d0:	ldrb	r4, [r5, #1]
   139d4:	cmp	r4, #63	; 0x3f
   139d8:	beq	1464c <__assert_fail@plt+0x3548>
   139dc:	mov	r1, #0
   139e0:	str	r1, [sp, #32]
   139e4:	mov	r4, #63	; 0x3f
   139e8:	b	13850 <__assert_fail@plt+0x274c>
   139ec:	ldr	r3, [sp, #176]	; 0xb0
   139f0:	ldr	r6, [sp, #48]	; 0x30
   139f4:	cmp	r3, #2
   139f8:	beq	13f08 <__assert_fail@plt+0x2e04>
   139fc:	str	r7, [sp, #32]
   13a00:	str	r7, [sp, #76]	; 0x4c
   13a04:	mov	r1, #0
   13a08:	mov	r4, #39	; 0x27
   13a0c:	b	13850 <__assert_fail@plt+0x274c>
   13a10:	ldr	r6, [sp, #48]	; 0x30
   13a14:	ldr	r1, [sp, #52]	; 0x34
   13a18:	str	r7, [sp, #32]
   13a1c:	b	13850 <__assert_fail@plt+0x274c>
   13a20:	ldr	r6, [sp, #48]	; 0x30
   13a24:	ldr	r1, [sp, #52]	; 0x34
   13a28:	mov	r4, #12
   13a2c:	mov	r3, #102	; 0x66
   13a30:	ldr	r2, [sp, #56]	; 0x38
   13a34:	cmp	r2, #0
   13a38:	streq	r2, [sp, #32]
   13a3c:	beq	13850 <__assert_fail@plt+0x274c>
   13a40:	mov	r4, r3
   13a44:	mov	r3, #0
   13a48:	str	r3, [sp, #32]
   13a4c:	ldr	r3, [sp, #40]	; 0x28
   13a50:	cmp	r3, #0
   13a54:	bne	141c4 <__assert_fail@plt+0x30c0>
   13a58:	ldr	r3, [sp, #36]	; 0x24
   13a5c:	eor	r3, r3, #1
   13a60:	and	r3, r3, r1
   13a64:	ands	r3, r3, #255	; 0xff
   13a68:	beq	13aa0 <__assert_fail@plt+0x299c>
   13a6c:	cmp	fp, r8
   13a70:	movhi	r2, #39	; 0x27
   13a74:	strbhi	r2, [r9, r8]
   13a78:	add	r2, r8, #1
   13a7c:	cmp	fp, r2
   13a80:	movhi	r1, #36	; 0x24
   13a84:	strbhi	r1, [r9, r2]
   13a88:	add	r2, r8, #2
   13a8c:	cmp	fp, r2
   13a90:	add	r8, r8, #3
   13a94:	movhi	r1, #39	; 0x27
   13a98:	strbhi	r1, [r9, r2]
   13a9c:	str	r3, [sp, #36]	; 0x24
   13aa0:	cmp	fp, r8
   13aa4:	movhi	r3, #92	; 0x5c
   13aa8:	strbhi	r3, [r9, r8]
   13aac:	add	sl, sl, #1
   13ab0:	add	r8, r8, #1
   13ab4:	b	138b4 <__assert_fail@plt+0x27b0>
   13ab8:	ldr	r6, [sp, #48]	; 0x30
   13abc:	mov	r4, #10
   13ac0:	mov	r3, #110	; 0x6e
   13ac4:	ldr	r2, [sp, #64]	; 0x40
   13ac8:	cmp	r2, #0
   13acc:	bne	1454c <__assert_fail@plt+0x3448>
   13ad0:	ldr	r1, [sp, #52]	; 0x34
   13ad4:	b	13a30 <__assert_fail@plt+0x292c>
   13ad8:	ldr	r6, [sp, #48]	; 0x30
   13adc:	ldr	r1, [sp, #52]	; 0x34
   13ae0:	mov	r3, #116	; 0x74
   13ae4:	b	13a30 <__assert_fail@plt+0x292c>
   13ae8:	ldr	r6, [sp, #48]	; 0x30
   13aec:	ldr	r1, [sp, #52]	; 0x34
   13af0:	mov	r4, #11
   13af4:	mov	r3, #118	; 0x76
   13af8:	b	13a30 <__assert_fail@plt+0x292c>
   13afc:	ldr	r6, [sp, #48]	; 0x30
   13b00:	ldr	r1, [sp, #52]	; 0x34
   13b04:	mov	r4, #8
   13b08:	mov	r3, #98	; 0x62
   13b0c:	b	13a30 <__assert_fail@plt+0x292c>
   13b10:	ldr	r6, [sp, #48]	; 0x30
   13b14:	ldr	r1, [sp, #52]	; 0x34
   13b18:	mov	r4, #7
   13b1c:	mov	r3, #97	; 0x61
   13b20:	b	13a30 <__assert_fail@plt+0x292c>
   13b24:	ldr	r3, [sp, #56]	; 0x38
   13b28:	ldr	r6, [sp, #48]	; 0x30
   13b2c:	cmp	r3, #0
   13b30:	beq	13ff4 <__assert_fail@plt+0x2ef0>
   13b34:	ldr	r3, [sp, #40]	; 0x28
   13b38:	cmp	r3, #0
   13b3c:	bne	14628 <__assert_fail@plt+0x3524>
   13b40:	ldr	r3, [sp, #36]	; 0x24
   13b44:	ldr	r2, [sp, #52]	; 0x34
   13b48:	eor	r3, r3, #1
   13b4c:	ands	r3, r2, r3
   13b50:	moveq	r2, r8
   13b54:	beq	13b8c <__assert_fail@plt+0x2a88>
   13b58:	cmp	fp, r8
   13b5c:	movhi	r2, #39	; 0x27
   13b60:	strbhi	r2, [r9, r8]
   13b64:	add	r2, r8, #1
   13b68:	cmp	fp, r2
   13b6c:	movhi	r1, #36	; 0x24
   13b70:	strbhi	r1, [r9, r2]
   13b74:	add	r2, r8, #2
   13b78:	cmp	fp, r2
   13b7c:	movhi	r1, #39	; 0x27
   13b80:	strbhi	r1, [r9, r2]
   13b84:	add	r2, r8, #3
   13b88:	str	r3, [sp, #36]	; 0x24
   13b8c:	cmp	fp, r2
   13b90:	movhi	r3, #92	; 0x5c
   13b94:	strbhi	r3, [r9, r2]
   13b98:	ldr	r3, [sp, #92]	; 0x5c
   13b9c:	add	r8, r2, #1
   13ba0:	cmp	r3, #0
   13ba4:	beq	14528 <__assert_fail@plt+0x3424>
   13ba8:	ldr	r1, [sp, #24]
   13bac:	add	r3, sl, #1
   13bb0:	cmp	r1, r3
   13bb4:	bls	13bec <__assert_fail@plt+0x2ae8>
   13bb8:	ldr	r1, [sp, #44]	; 0x2c
   13bbc:	ldrb	r3, [r1, r3]
   13bc0:	sub	r3, r3, #48	; 0x30
   13bc4:	cmp	r3, #9
   13bc8:	bhi	13bec <__assert_fail@plt+0x2ae8>
   13bcc:	cmp	fp, r8
   13bd0:	movhi	r3, #48	; 0x30
   13bd4:	strbhi	r3, [r9, r8]
   13bd8:	add	r3, r2, #2
   13bdc:	cmp	fp, r3
   13be0:	add	r8, r2, #3
   13be4:	movhi	r1, #48	; 0x30
   13be8:	strbhi	r1, [r9, r3]
   13bec:	ldr	r3, [sp, #40]	; 0x28
   13bf0:	ldr	r1, [sp, #52]	; 0x34
   13bf4:	mov	r7, r3
   13bf8:	str	r3, [sp, #32]
   13bfc:	mov	r4, #48	; 0x30
   13c00:	b	13850 <__assert_fail@plt+0x274c>
   13c04:	ldr	r6, [sp, #48]	; 0x30
   13c08:	cmp	sl, #0
   13c0c:	streq	r7, [sp, #32]
   13c10:	beq	13c30 <__assert_fail@plt+0x2b2c>
   13c14:	mov	r3, #0
   13c18:	ldr	r1, [sp, #52]	; 0x34
   13c1c:	str	r3, [sp, #32]
   13c20:	b	13850 <__assert_fail@plt+0x274c>
   13c24:	ldr	r6, [sp, #48]	; 0x30
   13c28:	mov	r3, #0
   13c2c:	str	r3, [sp, #32]
   13c30:	ldr	r3, [sp, #64]	; 0x40
   13c34:	cmp	r3, #0
   13c38:	bne	143b4 <__assert_fail@plt+0x32b0>
   13c3c:	ldr	r1, [sp, #52]	; 0x34
   13c40:	b	13850 <__assert_fail@plt+0x274c>
   13c44:	ldr	r3, [sp, #48]	; 0x30
   13c48:	mov	r6, r3
   13c4c:	str	r3, [sp, #32]
   13c50:	b	13c30 <__assert_fail@plt+0x2b2c>
   13c54:	ldr	r6, [sp, #48]	; 0x30
   13c58:	mov	r4, #13
   13c5c:	mov	r3, #114	; 0x72
   13c60:	b	13ac4 <__assert_fail@plt+0x29c0>
   13c64:	ldr	r3, [sp, #44]	; 0x2c
   13c68:	add	r5, r3, sl
   13c6c:	ldrb	r4, [r5]
   13c70:	cmp	r4, #126	; 0x7e
   13c74:	ldrls	pc, [pc, r4, lsl #2]
   13c78:	b	14014 <__assert_fail@plt+0x2f10>
   13c7c:	andeq	r3, r1, r4, ror #31
   13c80:	andeq	r4, r1, r4, lsl r0
   13c84:	andeq	r4, r1, r4, lsl r0
   13c88:	andeq	r4, r1, r4, lsl r0
   13c8c:	andeq	r4, r1, r4, lsl r0
   13c90:	andeq	r4, r1, r4, lsl r0
   13c94:	andeq	r4, r1, r4, lsl r0
   13c98:	ldrdeq	r3, [r1], -ip
   13c9c:	ldrdeq	r3, [r1], -r4
   13ca0:	andeq	r3, r1, r8, asr #31
   13ca4:	andeq	r3, r1, r0, asr #31
   13ca8:			; <UNDEFINED> instruction: 0x00013fb8
   13cac:			; <UNDEFINED> instruction: 0x00013fb0
   13cb0:	andeq	r3, r1, r8, lsr #31
   13cb4:	andeq	r4, r1, r4, lsl r0
   13cb8:	andeq	r4, r1, r4, lsl r0
   13cbc:	andeq	r4, r1, r4, lsl r0
   13cc0:	andeq	r4, r1, r4, lsl r0
   13cc4:	andeq	r4, r1, r4, lsl r0
   13cc8:	andeq	r4, r1, r4, lsl r0
   13ccc:	andeq	r4, r1, r4, lsl r0
   13cd0:	andeq	r4, r1, r4, lsl r0
   13cd4:	andeq	r4, r1, r4, lsl r0
   13cd8:	andeq	r4, r1, r4, lsl r0
   13cdc:	andeq	r4, r1, r4, lsl r0
   13ce0:	andeq	r4, r1, r4, lsl r0
   13ce4:	andeq	r4, r1, r4, lsl r0
   13ce8:	andeq	r4, r1, r4, lsl r0
   13cec:	andeq	r4, r1, r4, lsl r0
   13cf0:	andeq	r4, r1, r4, lsl r0
   13cf4:	andeq	r4, r1, r4, lsl r0
   13cf8:	andeq	r4, r1, r4, lsl r0
   13cfc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13d00:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d04:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d08:	andeq	r3, r1, ip, lsl #31
   13d0c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d10:	andeq	r3, r1, r4, lsl #31
   13d14:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d18:	strdeq	r3, [r1], -r8
   13d1c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d20:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d24:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d28:	andeq	r3, r1, r4, lsl #31
   13d2c:	andeq	r3, r1, r4, lsl #31
   13d30:	andeq	r3, r1, r4, lsl #31
   13d34:	andeq	r3, r1, r4, lsl #31
   13d38:	andeq	r3, r1, r4, lsl #31
   13d3c:	andeq	r3, r1, r4, lsl #31
   13d40:	andeq	r3, r1, r4, lsl #31
   13d44:	andeq	r3, r1, r4, lsl #31
   13d48:	andeq	r3, r1, r4, lsl #31
   13d4c:	andeq	r3, r1, r4, lsl #31
   13d50:	andeq	r3, r1, r4, lsl #31
   13d54:	andeq	r3, r1, r4, lsl #31
   13d58:	andeq	r3, r1, r4, lsl #31
   13d5c:	andeq	r3, r1, r4, lsl #31
   13d60:	andeq	r3, r1, r4, lsl #31
   13d64:	andeq	r3, r1, r4, lsl #31
   13d68:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d6c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d70:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d74:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13d78:	andeq	r3, r1, ip, asr #29
   13d7c:	andeq	r4, r1, r4, lsl r0
   13d80:	andeq	r3, r1, r4, lsl #31
   13d84:	andeq	r3, r1, r4, lsl #31
   13d88:	andeq	r3, r1, r4, lsl #31
   13d8c:	andeq	r3, r1, r4, lsl #31
   13d90:	andeq	r3, r1, r4, lsl #31
   13d94:	andeq	r3, r1, r4, lsl #31
   13d98:	andeq	r3, r1, r4, lsl #31
   13d9c:	andeq	r3, r1, r4, lsl #31
   13da0:	andeq	r3, r1, r4, lsl #31
   13da4:	andeq	r3, r1, r4, lsl #31
   13da8:	andeq	r3, r1, r4, lsl #31
   13dac:	andeq	r3, r1, r4, lsl #31
   13db0:	andeq	r3, r1, r4, lsl #31
   13db4:	andeq	r3, r1, r4, lsl #31
   13db8:	andeq	r3, r1, r4, lsl #31
   13dbc:	andeq	r3, r1, r4, lsl #31
   13dc0:	andeq	r3, r1, r4, lsl #31
   13dc4:	andeq	r3, r1, r4, lsl #31
   13dc8:	andeq	r3, r1, r4, lsl #31
   13dcc:	andeq	r3, r1, r4, lsl #31
   13dd0:	andeq	r3, r1, r4, lsl #31
   13dd4:	andeq	r3, r1, r4, lsl #31
   13dd8:	andeq	r3, r1, r4, lsl #31
   13ddc:	andeq	r3, r1, r4, lsl #31
   13de0:	andeq	r3, r1, r4, lsl #31
   13de4:	andeq	r3, r1, r4, lsl #31
   13de8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13dec:	muleq	r1, ip, lr
   13df0:	andeq	r3, r1, r4, lsl #31
   13df4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13df8:	andeq	r3, r1, r4, lsl #31
   13dfc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13e00:	andeq	r3, r1, r4, lsl #31
   13e04:	andeq	r3, r1, r4, lsl #31
   13e08:	andeq	r3, r1, r4, lsl #31
   13e0c:	andeq	r3, r1, r4, lsl #31
   13e10:	andeq	r3, r1, r4, lsl #31
   13e14:	andeq	r3, r1, r4, lsl #31
   13e18:	andeq	r3, r1, r4, lsl #31
   13e1c:	andeq	r3, r1, r4, lsl #31
   13e20:	andeq	r3, r1, r4, lsl #31
   13e24:	andeq	r3, r1, r4, lsl #31
   13e28:	andeq	r3, r1, r4, lsl #31
   13e2c:	andeq	r3, r1, r4, lsl #31
   13e30:	andeq	r3, r1, r4, lsl #31
   13e34:	andeq	r3, r1, r4, lsl #31
   13e38:	andeq	r3, r1, r4, lsl #31
   13e3c:	andeq	r3, r1, r4, lsl #31
   13e40:	andeq	r3, r1, r4, lsl #31
   13e44:	andeq	r3, r1, r4, lsl #31
   13e48:	andeq	r3, r1, r4, lsl #31
   13e4c:	andeq	r3, r1, r4, lsl #31
   13e50:	andeq	r3, r1, r4, lsl #31
   13e54:	andeq	r3, r1, r4, lsl #31
   13e58:	andeq	r3, r1, r4, lsl #31
   13e5c:	andeq	r3, r1, r4, lsl #31
   13e60:	andeq	r3, r1, r4, lsl #31
   13e64:	andeq	r3, r1, r4, lsl #31
   13e68:	andeq	r3, r1, r8, ror lr
   13e6c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13e70:	andeq	r3, r1, r8, ror lr
   13e74:	andeq	r3, r1, ip, lsl #31
   13e78:	ldr	r3, [sp, #24]
   13e7c:	mov	r6, #0
   13e80:	cmn	r3, #1
   13e84:	bne	13830 <__assert_fail@plt+0x272c>
   13e88:	ldr	r3, [sp, #44]	; 0x2c
   13e8c:	ldrb	r3, [r3, #1]
   13e90:	adds	r3, r3, #0
   13e94:	movne	r3, #1
   13e98:	b	13838 <__assert_fail@plt+0x2734>
   13e9c:	ldr	r3, [sp, #176]	; 0xb0
   13ea0:	mov	r6, #0
   13ea4:	cmp	r3, #2
   13ea8:	bne	13978 <__assert_fail@plt+0x2874>
   13eac:	ldr	r3, [sp, #64]	; 0x40
   13eb0:	cmp	r3, #0
   13eb4:	bne	146ec <__assert_fail@plt+0x35e8>
   13eb8:	add	sl, sl, #1
   13ebc:	ldr	r6, [sp, #36]	; 0x24
   13ec0:	str	r3, [sp, #32]
   13ec4:	mov	r4, #92	; 0x5c
   13ec8:	b	13884 <__assert_fail@plt+0x2780>
   13ecc:	ldr	r3, [sp, #176]	; 0xb0
   13ed0:	mov	r6, #0
   13ed4:	cmp	r3, #2
   13ed8:	bne	139ac <__assert_fail@plt+0x28a8>
   13edc:	ldr	r3, [sp, #40]	; 0x28
   13ee0:	cmp	r3, #0
   13ee4:	bne	141c8 <__assert_fail@plt+0x30c4>
   13ee8:	mov	r1, r7
   13eec:	str	r3, [sp, #32]
   13ef0:	mov	r4, #63	; 0x3f
   13ef4:	b	13850 <__assert_fail@plt+0x274c>
   13ef8:	ldr	r3, [sp, #176]	; 0xb0
   13efc:	mov	r6, #0
   13f00:	cmp	r3, #2
   13f04:	bne	139fc <__assert_fail@plt+0x28f8>
   13f08:	ldr	r3, [sp, #64]	; 0x40
   13f0c:	cmp	r3, #0
   13f10:	bne	146ec <__assert_fail@plt+0x35e8>
   13f14:	ldr	r2, [sp, #84]	; 0x54
   13f18:	adds	r3, fp, #0
   13f1c:	movne	r3, #1
   13f20:	cmp	r2, #0
   13f24:	movne	r3, #0
   13f28:	cmp	r3, #0
   13f2c:	strne	fp, [sp, #84]	; 0x54
   13f30:	movne	fp, #0
   13f34:	bne	13f64 <__assert_fail@plt+0x2e60>
   13f38:	cmp	fp, r8
   13f3c:	movhi	r3, #39	; 0x27
   13f40:	strbhi	r3, [r9, r8]
   13f44:	add	r3, r8, #1
   13f48:	cmp	fp, r3
   13f4c:	movhi	r2, #92	; 0x5c
   13f50:	strbhi	r2, [r9, r3]
   13f54:	add	r3, r8, #2
   13f58:	cmp	fp, r3
   13f5c:	movhi	r2, #39	; 0x27
   13f60:	strbhi	r2, [r9, r3]
   13f64:	ldr	r3, [sp, #64]	; 0x40
   13f68:	add	r8, r8, #3
   13f6c:	mov	r1, r7
   13f70:	str	r7, [sp, #32]
   13f74:	str	r7, [sp, #76]	; 0x4c
   13f78:	str	r3, [sp, #36]	; 0x24
   13f7c:	mov	r4, #39	; 0x27
   13f80:	b	13850 <__assert_fail@plt+0x274c>
   13f84:	mov	r6, #0
   13f88:	b	13a14 <__assert_fail@plt+0x2910>
   13f8c:	mov	r6, #0
   13f90:	b	13c08 <__assert_fail@plt+0x2b04>
   13f94:	mov	r6, #0
   13f98:	b	13c28 <__assert_fail@plt+0x2b24>
   13f9c:	str	r7, [sp, #32]
   13fa0:	mov	r6, #0
   13fa4:	b	13c30 <__assert_fail@plt+0x2b2c>
   13fa8:	mov	r6, #0
   13fac:	b	13c58 <__assert_fail@plt+0x2b54>
   13fb0:	mov	r6, #0
   13fb4:	b	13a24 <__assert_fail@plt+0x2920>
   13fb8:	mov	r6, #0
   13fbc:	b	13aec <__assert_fail@plt+0x29e8>
   13fc0:	mov	r6, #0
   13fc4:	b	13abc <__assert_fail@plt+0x29b8>
   13fc8:	mov	r6, #0
   13fcc:	mov	r3, #116	; 0x74
   13fd0:	b	13ac4 <__assert_fail@plt+0x29c0>
   13fd4:	mov	r6, #0
   13fd8:	b	13b00 <__assert_fail@plt+0x29fc>
   13fdc:	mov	r6, #0
   13fe0:	b	13b14 <__assert_fail@plt+0x2a10>
   13fe4:	ldr	r3, [sp, #56]	; 0x38
   13fe8:	mov	r6, #0
   13fec:	cmp	r3, #0
   13ff0:	bne	13b34 <__assert_fail@plt+0x2a30>
   13ff4:	ldr	r3, [sp, #96]	; 0x60
   13ff8:	cmp	r3, #0
   13ffc:	addne	sl, sl, #1
   14000:	bne	133a8 <__assert_fail@plt+0x22a4>
   14004:	ldr	r1, [sp, #52]	; 0x34
   14008:	str	r3, [sp, #32]
   1400c:	mov	r4, r3
   14010:	b	13850 <__assert_fail@plt+0x274c>
   14014:	mov	r6, #0
   14018:	ldr	r3, [sp, #80]	; 0x50
   1401c:	cmp	r3, #1
   14020:	bne	14210 <__assert_fail@plt+0x310c>
   14024:	bl	10fc0 <__ctype_b_loc@plt>
   14028:	ldr	r2, [sp, #80]	; 0x50
   1402c:	sxth	r3, r4
   14030:	mov	r1, r2
   14034:	lsl	r3, r3, #1
   14038:	ldr	r2, [r0]
   1403c:	ldrh	r3, [r2, r3]
   14040:	and	r3, r3, #16384	; 0x4000
   14044:	cmp	r3, #0
   14048:	movne	r3, #1
   1404c:	moveq	r3, #0
   14050:	str	r3, [sp, #32]
   14054:	moveq	r3, #1
   14058:	movne	r3, #0
   1405c:	ldr	r2, [sp, #56]	; 0x38
   14060:	and	r3, r3, r2
   14064:	ands	r3, r3, #255	; 0xff
   14068:	beq	13c3c <__assert_fail@plt+0x2b38>
   1406c:	add	r1, sl, r1
   14070:	mov	r0, #0
   14074:	ldr	r7, [sp, #40]	; 0x28
   14078:	ldr	r2, [sp, #36]	; 0x24
   1407c:	ldr	lr, [sp, #52]	; 0x34
   14080:	b	14130 <__assert_fail@plt+0x302c>
   14084:	cmp	r7, #0
   14088:	bne	14484 <__assert_fail@plt+0x3380>
   1408c:	eor	r0, r2, #1
   14090:	ands	r0, lr, r0
   14094:	beq	140cc <__assert_fail@plt+0x2fc8>
   14098:	cmp	fp, r8
   1409c:	movhi	r2, #39	; 0x27
   140a0:	strbhi	r2, [r9, r8]
   140a4:	add	r2, r8, #1
   140a8:	cmp	fp, r2
   140ac:	movhi	ip, #36	; 0x24
   140b0:	strbhi	ip, [r9, r2]
   140b4:	add	r2, r8, #2
   140b8:	cmp	fp, r2
   140bc:	movhi	ip, #39	; 0x27
   140c0:	strbhi	ip, [r9, r2]
   140c4:	add	r8, r8, #3
   140c8:	mov	r2, r0
   140cc:	cmp	fp, r8
   140d0:	movhi	r0, #92	; 0x5c
   140d4:	strbhi	r0, [r9, r8]
   140d8:	add	r0, r8, #1
   140dc:	cmp	fp, r0
   140e0:	lsrhi	ip, r4, #6
   140e4:	addhi	ip, ip, #48	; 0x30
   140e8:	strbhi	ip, [r9, r0]
   140ec:	add	ip, r8, #2
   140f0:	cmp	fp, ip
   140f4:	lsrhi	r0, r4, #3
   140f8:	andhi	r0, r0, #7
   140fc:	addhi	r0, r0, #48	; 0x30
   14100:	add	sl, sl, #1
   14104:	strbhi	r0, [r9, ip]
   14108:	and	r4, r4, #7
   1410c:	cmp	sl, r1
   14110:	add	r4, r4, #48	; 0x30
   14114:	add	r8, r8, #3
   14118:	bcs	1449c <__assert_fail@plt+0x3398>
   1411c:	mov	r0, r3
   14120:	cmp	fp, r8
   14124:	strbhi	r4, [r9, r8]
   14128:	ldrb	r4, [r5, #1]!
   1412c:	add	r8, r8, #1
   14130:	cmp	r3, #0
   14134:	bne	14084 <__assert_fail@plt+0x2f80>
   14138:	cmp	r6, #0
   1413c:	bne	141e0 <__assert_fail@plt+0x30dc>
   14140:	eor	r6, r0, #1
   14144:	and	r6, r6, r2
   14148:	add	sl, sl, #1
   1414c:	cmp	r1, sl
   14150:	uxtb	r6, r6
   14154:	bls	14208 <__assert_fail@plt+0x3104>
   14158:	cmp	r6, #0
   1415c:	beq	14120 <__assert_fail@plt+0x301c>
   14160:	cmp	fp, r8
   14164:	movhi	r2, #39	; 0x27
   14168:	strbhi	r2, [r9, r8]
   1416c:	add	r2, r8, #1
   14170:	cmp	fp, r2
   14174:	movhi	ip, #39	; 0x27
   14178:	strbhi	ip, [r9, r2]
   1417c:	add	r8, r8, #2
   14180:	mov	r6, r3
   14184:	mov	r2, r3
   14188:	b	14120 <__assert_fail@plt+0x301c>
   1418c:	ldr	r3, [sp, #184]	; 0xb8
   14190:	cmp	r3, #0
   14194:	beq	1386c <__assert_fail@plt+0x2768>
   14198:	lsr	r2, r4, #5
   1419c:	mov	r0, r3
   141a0:	uxtb	r2, r2
   141a4:	and	r3, r4, #31
   141a8:	ldr	r2, [r0, r2, lsl #2]
   141ac:	lsr	r3, r2, r3
   141b0:	tst	r3, #1
   141b4:	beq	1386c <__assert_fail@plt+0x2768>
   141b8:	ldr	r3, [sp, #40]	; 0x28
   141bc:	cmp	r3, #0
   141c0:	beq	13a58 <__assert_fail@plt+0x2954>
   141c4:	mov	r3, r1
   141c8:	str	r3, [sp, #64]	; 0x40
   141cc:	mov	sl, r9
   141d0:	ldr	r3, [sp, #56]	; 0x38
   141d4:	mov	r9, fp
   141d8:	ldr	r2, [sp, #64]	; 0x40
   141dc:	b	143cc <__assert_fail@plt+0x32c8>
   141e0:	cmp	fp, r8
   141e4:	eor	r6, r0, #1
   141e8:	movhi	ip, #92	; 0x5c
   141ec:	and	r6, r6, r2
   141f0:	add	sl, sl, #1
   141f4:	strbhi	ip, [r9, r8]
   141f8:	cmp	r1, sl
   141fc:	add	r8, r8, #1
   14200:	uxtb	r6, r6
   14204:	bhi	14158 <__assert_fail@plt+0x3054>
   14208:	str	r2, [sp, #36]	; 0x24
   1420c:	b	13884 <__assert_fail@plt+0x2780>
   14210:	ldr	r3, [sp, #24]
   14214:	cmn	r3, #1
   14218:	mov	r3, #0
   1421c:	str	r3, [sp, #128]	; 0x80
   14220:	str	r3, [sp, #132]	; 0x84
   14224:	beq	14518 <__assert_fail@plt+0x3414>
   14228:	mov	r2, r7
   1422c:	mov	r3, #0
   14230:	str	r7, [sp, #104]	; 0x68
   14234:	str	r5, [sp, #116]	; 0x74
   14238:	mov	r7, r3
   1423c:	mov	r5, r2
   14240:	str	r4, [sp, #32]
   14244:	str	r6, [sp, #108]	; 0x6c
   14248:	str	r8, [sp, #112]	; 0x70
   1424c:	ldr	r3, [sp, #44]	; 0x2c
   14250:	add	r6, sl, r7
   14254:	add	r4, r3, r6
   14258:	ldr	r3, [sp, #24]
   1425c:	mov	r1, r4
   14260:	sub	r2, r3, r6
   14264:	add	r0, sp, #124	; 0x7c
   14268:	add	r3, sp, #128	; 0x80
   1426c:	bl	198a8 <__assert_fail@plt+0x87a4>
   14270:	subs	r8, r0, #0
   14274:	beq	145fc <__assert_fail@plt+0x34f8>
   14278:	cmn	r8, #1
   1427c:	beq	145d4 <__assert_fail@plt+0x34d0>
   14280:	cmn	r8, #2
   14284:	beq	1456c <__assert_fail@plt+0x3468>
   14288:	ldr	r3, [sp, #64]	; 0x40
   1428c:	cmp	r3, #0
   14290:	beq	14350 <__assert_fail@plt+0x324c>
   14294:	cmp	r8, #1
   14298:	beq	14350 <__assert_fail@plt+0x324c>
   1429c:	sub	r3, r8, #1
   142a0:	add	r6, r3, r6
   142a4:	ldr	r3, [sp, #44]	; 0x2c
   142a8:	add	r6, r3, r6
   142ac:	ldrb	r3, [r4, #1]!
   142b0:	sub	r3, r3, #91	; 0x5b
   142b4:	cmp	r3, #33	; 0x21
   142b8:	ldrls	pc, [pc, r3, lsl #2]
   142bc:	b	14348 <__assert_fail@plt+0x3244>
   142c0:			; <UNDEFINED> instruction: 0x000143b4
   142c4:			; <UNDEFINED> instruction: 0x000143b4
   142c8:	andeq	r4, r1, r8, asr #6
   142cc:			; <UNDEFINED> instruction: 0x000143b4
   142d0:	andeq	r4, r1, r8, asr #6
   142d4:			; <UNDEFINED> instruction: 0x000143b4
   142d8:	andeq	r4, r1, r8, asr #6
   142dc:	andeq	r4, r1, r8, asr #6
   142e0:	andeq	r4, r1, r8, asr #6
   142e4:	andeq	r4, r1, r8, asr #6
   142e8:	andeq	r4, r1, r8, asr #6
   142ec:	andeq	r4, r1, r8, asr #6
   142f0:	andeq	r4, r1, r8, asr #6
   142f4:	andeq	r4, r1, r8, asr #6
   142f8:	andeq	r4, r1, r8, asr #6
   142fc:	andeq	r4, r1, r8, asr #6
   14300:	andeq	r4, r1, r8, asr #6
   14304:	andeq	r4, r1, r8, asr #6
   14308:	andeq	r4, r1, r8, asr #6
   1430c:	andeq	r4, r1, r8, asr #6
   14310:	andeq	r4, r1, r8, asr #6
   14314:	andeq	r4, r1, r8, asr #6
   14318:	andeq	r4, r1, r8, asr #6
   1431c:	andeq	r4, r1, r8, asr #6
   14320:	andeq	r4, r1, r8, asr #6
   14324:	andeq	r4, r1, r8, asr #6
   14328:	andeq	r4, r1, r8, asr #6
   1432c:	andeq	r4, r1, r8, asr #6
   14330:	andeq	r4, r1, r8, asr #6
   14334:	andeq	r4, r1, r8, asr #6
   14338:	andeq	r4, r1, r8, asr #6
   1433c:	andeq	r4, r1, r8, asr #6
   14340:	andeq	r4, r1, r8, asr #6
   14344:			; <UNDEFINED> instruction: 0x000143b4
   14348:	cmp	r6, r4
   1434c:	bne	142ac <__assert_fail@plt+0x31a8>
   14350:	ldr	r0, [sp, #124]	; 0x7c
   14354:	bl	10f18 <iswprint@plt>
   14358:	add	r7, r7, r8
   1435c:	cmp	r0, #0
   14360:	add	r0, sp, #128	; 0x80
   14364:	moveq	r5, #0
   14368:	bl	10ed0 <mbsinit@plt>
   1436c:	cmp	r0, #0
   14370:	beq	1424c <__assert_fail@plt+0x3148>
   14374:	ldr	r4, [sp, #32]
   14378:	str	r5, [sp, #32]
   1437c:	ldr	r3, [sp, #32]
   14380:	mov	r1, r7
   14384:	eor	r3, r3, #1
   14388:	ldr	r7, [sp, #104]	; 0x68
   1438c:	ldr	r6, [sp, #108]	; 0x6c
   14390:	ldr	r8, [sp, #112]	; 0x70
   14394:	ldr	r5, [sp, #116]	; 0x74
   14398:	uxtb	r3, r3
   1439c:	cmp	r1, #1
   143a0:	bls	1405c <__assert_fail@plt+0x2f58>
   143a4:	ldr	r2, [sp, #56]	; 0x38
   143a8:	and	r3, r3, r2
   143ac:	uxtb	r3, r3
   143b0:	b	1406c <__assert_fail@plt+0x2f68>
   143b4:	mov	r3, #2
   143b8:	str	r3, [sp, #176]	; 0xb0
   143bc:	ldr	r2, [sp, #64]	; 0x40
   143c0:	ldr	r3, [sp, #56]	; 0x38
   143c4:	mov	sl, r9
   143c8:	mov	r9, fp
   143cc:	and	r3, r3, r2
   143d0:	tst	r3, #255	; 0xff
   143d4:	ldr	r3, [sp, #176]	; 0xb0
   143d8:	movne	r3, #4
   143dc:	str	r3, [sp, #176]	; 0xb0
   143e0:	ldr	r3, [sp, #180]	; 0xb4
   143e4:	mov	ip, #0
   143e8:	bic	r3, r3, #2
   143ec:	str	r3, [sp, #4]
   143f0:	ldr	r3, [sp, #192]	; 0xc0
   143f4:	ldr	r2, [sp, #44]	; 0x2c
   143f8:	str	r3, [sp, #16]
   143fc:	ldr	r3, [sp, #188]	; 0xbc
   14400:	mov	r1, r9
   14404:	str	r3, [sp, #12]
   14408:	ldr	r3, [sp, #176]	; 0xb0
   1440c:	mov	r0, sl
   14410:	str	r3, [sp]
   14414:	str	ip, [sp, #8]
   14418:	ldr	r3, [sp, #24]
   1441c:	bl	1327c <__assert_fail@plt+0x2178>
   14420:	mov	fp, r0
   14424:	mov	r0, fp
   14428:	add	sp, sp, #140	; 0x8c
   1442c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14430:	mov	r4, #92	; 0x5c
   14434:	mov	r1, #0
   14438:	mov	r3, r4
   1443c:	b	13a30 <__assert_fail@plt+0x292c>
   14440:	mov	r3, #0
   14444:	ldr	r1, [sp, #52]	; 0x34
   14448:	str	r3, [sp, #32]
   1444c:	mov	r4, #63	; 0x3f
   14450:	b	13850 <__assert_fail@plt+0x274c>
   14454:	cmp	fp, #0
   14458:	beq	144b4 <__assert_fail@plt+0x33b0>
   1445c:	mov	r3, #39	; 0x27
   14460:	strb	r3, [r9]
   14464:	mov	r3, #0
   14468:	str	r3, [sp, #40]	; 0x28
   1446c:	mov	r3, #1
   14470:	str	r3, [sp, #68]	; 0x44
   14474:	ldr	r3, [pc, #448]	; 1463c <__assert_fail@plt+0x3538>
   14478:	mov	r8, #1
   1447c:	str	r3, [sp, #72]	; 0x48
   14480:	b	13664 <__assert_fail@plt+0x2560>
   14484:	ldr	r3, [sp, #40]	; 0x28
   14488:	mov	sl, r9
   1448c:	str	r3, [sp, #56]	; 0x38
   14490:	mov	r9, fp
   14494:	ldr	r2, [sp, #64]	; 0x40
   14498:	b	143cc <__assert_fail@plt+0x32c8>
   1449c:	str	r2, [sp, #36]	; 0x24
   144a0:	b	138b4 <__assert_fail@plt+0x27b0>
   144a4:	mov	r1, #0
   144a8:	str	r3, [sp, #32]
   144ac:	mov	r4, #63	; 0x3f
   144b0:	b	13850 <__assert_fail@plt+0x274c>
   144b4:	ldr	r3, [pc, #384]	; 1463c <__assert_fail@plt+0x3538>
   144b8:	str	r3, [sp, #72]	; 0x48
   144bc:	mov	r3, #0
   144c0:	str	r3, [sp, #40]	; 0x28
   144c4:	mov	r3, #1
   144c8:	str	r3, [sp, #68]	; 0x44
   144cc:	mov	r8, r3
   144d0:	b	13664 <__assert_fail@plt+0x2560>
   144d4:	bl	110ec <abort@plt>
   144d8:	cmp	fp, #0
   144dc:	beq	1453c <__assert_fail@plt+0x3438>
   144e0:	mov	r2, #1
   144e4:	mov	r3, #34	; 0x22
   144e8:	strb	r3, [r9]
   144ec:	mov	r8, r2
   144f0:	mov	r3, r2
   144f4:	str	r2, [sp, #68]	; 0x44
   144f8:	str	r3, [sp, #56]	; 0x38
   144fc:	ldr	r3, [pc, #316]	; 14640 <__assert_fail@plt+0x353c>
   14500:	ldr	r1, [sp, #56]	; 0x38
   14504:	str	r3, [sp, #72]	; 0x48
   14508:	ldr	r2, [sp, #176]	; 0xb0
   1450c:	ldr	ip, [sp, #40]	; 0x28
   14510:	ldr	lr, [sp, #176]	; 0xb0
   14514:	b	13348 <__assert_fail@plt+0x2244>
   14518:	ldr	r0, [sp, #44]	; 0x2c
   1451c:	bl	10fd8 <strlen@plt>
   14520:	str	r0, [sp, #24]
   14524:	b	14228 <__assert_fail@plt+0x3124>
   14528:	mov	r7, #0
   1452c:	ldr	r1, [sp, #52]	; 0x34
   14530:	str	r3, [sp, #32]
   14534:	mov	r4, #48	; 0x30
   14538:	b	13850 <__assert_fail@plt+0x274c>
   1453c:	mov	r3, #1
   14540:	str	r3, [sp, #68]	; 0x44
   14544:	mov	r8, r3
   14548:	b	144f8 <__assert_fail@plt+0x33f4>
   1454c:	mov	r3, #2
   14550:	mov	sl, r9
   14554:	str	r3, [sp, #176]	; 0xb0
   14558:	mov	r9, fp
   1455c:	ldr	r3, [sp, #56]	; 0x38
   14560:	b	143cc <__assert_fail@plt+0x32c8>
   14564:	ldr	r6, [sp, #48]	; 0x30
   14568:	b	14018 <__assert_fail@plt+0x2f14>
   1456c:	ldr	r0, [sp, #24]
   14570:	mov	ip, r6
   14574:	cmp	r0, ip
   14578:	mov	r1, r7
   1457c:	mov	r2, r4
   14580:	ldr	r7, [sp, #104]	; 0x68
   14584:	ldr	r4, [sp, #32]
   14588:	ldr	r6, [sp, #108]	; 0x6c
   1458c:	ldr	r8, [sp, #112]	; 0x70
   14590:	ldr	r5, [sp, #116]	; 0x74
   14594:	bls	145c4 <__assert_fail@plt+0x34c0>
   14598:	ldrb	r3, [r2]
   1459c:	cmp	r3, #0
   145a0:	bne	145b4 <__assert_fail@plt+0x34b0>
   145a4:	b	146d4 <__assert_fail@plt+0x35d0>
   145a8:	ldrb	r3, [r2, #1]!
   145ac:	cmp	r3, #0
   145b0:	beq	146d4 <__assert_fail@plt+0x35d0>
   145b4:	add	r1, r1, #1
   145b8:	add	r3, sl, r1
   145bc:	cmp	r0, r3
   145c0:	bhi	145a8 <__assert_fail@plt+0x34a4>
   145c4:	mov	r2, #0
   145c8:	mov	r3, r7
   145cc:	str	r2, [sp, #32]
   145d0:	b	1439c <__assert_fail@plt+0x3298>
   145d4:	mov	r1, r7
   145d8:	ldr	r7, [sp, #104]	; 0x68
   145dc:	mov	r2, #0
   145e0:	ldr	r4, [sp, #32]
   145e4:	ldr	r6, [sp, #108]	; 0x6c
   145e8:	ldr	r8, [sp, #112]	; 0x70
   145ec:	ldr	r5, [sp, #116]	; 0x74
   145f0:	mov	r3, r7
   145f4:	str	r2, [sp, #32]
   145f8:	b	1439c <__assert_fail@plt+0x3298>
   145fc:	mov	r3, r5
   14600:	eor	r3, r3, #1
   14604:	ldr	r4, [sp, #32]
   14608:	mov	r1, r7
   1460c:	str	r5, [sp, #32]
   14610:	ldr	r7, [sp, #104]	; 0x68
   14614:	ldr	r6, [sp, #108]	; 0x6c
   14618:	ldr	r8, [sp, #112]	; 0x70
   1461c:	ldr	r5, [sp, #116]	; 0x74
   14620:	uxtb	r3, r3
   14624:	b	1439c <__assert_fail@plt+0x3298>
   14628:	mov	sl, r9
   1462c:	str	r3, [sp, #56]	; 0x38
   14630:	mov	r9, fp
   14634:	ldr	r2, [sp, #64]	; 0x40
   14638:	b	143cc <__assert_fail@plt+0x32c8>
   1463c:	andeq	sl, r1, r4, ror #19
   14640:	andeq	sl, r1, r0, ror #19
   14644:	andeq	sl, r1, r8, ror #19
   14648:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1464c:	ldr	r2, [sp, #44]	; 0x2c
   14650:	ldrb	r1, [r2, r3]
   14654:	sub	r2, r1, #33	; 0x21
   14658:	uxtb	r2, r2
   1465c:	cmp	r2, #29
   14660:	bhi	146e0 <__assert_fail@plt+0x35dc>
   14664:	ldr	r0, [pc, #-36]	; 14648 <__assert_fail@plt+0x3544>
   14668:	mov	ip, #1
   1466c:	ands	r2, r0, ip, lsl r2
   14670:	beq	14700 <__assert_fail@plt+0x35fc>
   14674:	ldr	r2, [sp, #40]	; 0x28
   14678:	cmp	r2, #0
   1467c:	bne	147f4 <__assert_fail@plt+0x36f0>
   14680:	add	r2, r8, #1
   14684:	cmp	fp, r8
   14688:	strbhi	r4, [r9, r8]
   1468c:	cmp	fp, r2
   14690:	movhi	r0, #34	; 0x22
   14694:	strbhi	r0, [r9, r2]
   14698:	add	r2, r8, #2
   1469c:	cmp	fp, r2
   146a0:	movhi	r0, #34	; 0x22
   146a4:	strbhi	r0, [r9, r2]
   146a8:	add	r2, r8, #3
   146ac:	cmp	fp, r2
   146b0:	mov	sl, r3
   146b4:	ldr	r3, [sp, #40]	; 0x28
   146b8:	movhi	r0, #63	; 0x3f
   146bc:	mov	r4, r1
   146c0:	strbhi	r0, [r9, r2]
   146c4:	add	r8, r8, #4
   146c8:	mov	r1, r3
   146cc:	str	r3, [sp, #32]
   146d0:	b	13850 <__assert_fail@plt+0x274c>
   146d4:	str	r3, [sp, #32]
   146d8:	mov	r3, r7
   146dc:	b	1439c <__assert_fail@plt+0x3298>
   146e0:	mov	r1, #0
   146e4:	str	r1, [sp, #32]
   146e8:	b	13850 <__assert_fail@plt+0x274c>
   146ec:	mov	sl, r9
   146f0:	ldr	r3, [sp, #56]	; 0x38
   146f4:	mov	r9, fp
   146f8:	ldr	r2, [sp, #64]	; 0x40
   146fc:	b	143cc <__assert_fail@plt+0x32c8>
   14700:	str	r2, [sp, #32]
   14704:	mov	r1, #0
   14708:	b	13850 <__assert_fail@plt+0x274c>
   1470c:	ldr	r2, [sp, #76]	; 0x4c
   14710:	mov	sl, r9
   14714:	mov	r9, fp
   14718:	mov	fp, r8
   1471c:	ldr	r1, [sp, #72]	; 0x48
   14720:	cmp	r1, #0
   14724:	moveq	r3, #0
   14728:	andne	r3, r2, #1
   1472c:	cmp	r3, #0
   14730:	beq	1475c <__assert_fail@plt+0x3658>
   14734:	ldrb	r3, [r1]
   14738:	cmp	r3, #0
   1473c:	beq	1475c <__assert_fail@plt+0x3658>
   14740:	mov	r2, r1
   14744:	cmp	r9, fp
   14748:	strbhi	r3, [sl, fp]
   1474c:	ldrb	r3, [r2, #1]!
   14750:	add	fp, fp, #1
   14754:	cmp	r3, #0
   14758:	bne	14744 <__assert_fail@plt+0x3640>
   1475c:	cmp	r9, fp
   14760:	movhi	r3, #0
   14764:	strbhi	r3, [sl, fp]
   14768:	b	14424 <__assert_fail@plt+0x3320>
   1476c:	ldr	r3, [sp, #192]	; 0xc0
   14770:	mov	ip, #5
   14774:	str	r3, [sp, #16]
   14778:	ldr	r3, [sp, #188]	; 0xbc
   1477c:	ldr	r2, [sp, #44]	; 0x2c
   14780:	str	r3, [sp, #12]
   14784:	ldr	r3, [sp, #184]	; 0xb8
   14788:	ldr	r1, [sp, #84]	; 0x54
   1478c:	str	r3, [sp, #8]
   14790:	ldr	r3, [sp, #180]	; 0xb4
   14794:	mov	r0, r9
   14798:	str	r3, [sp, #4]
   1479c:	str	ip, [sp]
   147a0:	ldr	r3, [sp, #24]
   147a4:	bl	1327c <__assert_fail@plt+0x2178>
   147a8:	mov	fp, r0
   147ac:	b	14424 <__assert_fail@plt+0x3320>
   147b0:	mov	sl, r9
   147b4:	mov	r9, fp
   147b8:	mov	fp, r8
   147bc:	b	1471c <__assert_fail@plt+0x3618>
   147c0:	ldr	r1, [sp, #176]	; 0xb0
   147c4:	bl	1315c <__assert_fail@plt+0x2058>
   147c8:	str	r0, [sp, #192]	; 0xc0
   147cc:	b	13738 <__assert_fail@plt+0x2634>
   147d0:	ldr	r1, [sp, #176]	; 0xb0
   147d4:	bl	1315c <__assert_fail@plt+0x2058>
   147d8:	str	r0, [sp, #188]	; 0xbc
   147dc:	b	13718 <__assert_fail@plt+0x2614>
   147e0:	mov	sl, r9
   147e4:	mov	r2, r3
   147e8:	mov	r9, fp
   147ec:	mov	fp, r8
   147f0:	b	1471c <__assert_fail@plt+0x3618>
   147f4:	mov	sl, r9
   147f8:	mov	r9, fp
   147fc:	b	143e0 <__assert_fail@plt+0x32dc>
   14800:	push	{r4, r5, r6, lr}
   14804:	mov	r5, r0
   14808:	bl	10ff0 <__errno_location@plt>
   1480c:	cmp	r5, #0
   14810:	mov	r1, #48	; 0x30
   14814:	mov	r4, r0
   14818:	ldr	r0, [pc, #16]	; 14830 <__assert_fail@plt+0x372c>
   1481c:	ldr	r6, [r4]
   14820:	movne	r0, r5
   14824:	bl	180a8 <__assert_fail@plt+0x6fa4>
   14828:	str	r6, [r4]
   1482c:	pop	{r4, r5, r6, pc}
   14830:	muleq	r2, r0, r1
   14834:	ldr	r3, [pc, #12]	; 14848 <__assert_fail@plt+0x3744>
   14838:	cmp	r0, #0
   1483c:	moveq	r0, r3
   14840:	ldr	r0, [r0]
   14844:	bx	lr
   14848:	muleq	r2, r0, r1
   1484c:	ldr	r3, [pc, #12]	; 14860 <__assert_fail@plt+0x375c>
   14850:	cmp	r0, #0
   14854:	moveq	r0, r3
   14858:	str	r1, [r0]
   1485c:	bx	lr
   14860:	muleq	r2, r0, r1
   14864:	ldr	r3, [pc, #52]	; 148a0 <__assert_fail@plt+0x379c>
   14868:	cmp	r0, #0
   1486c:	moveq	r0, r3
   14870:	add	r3, r0, #8
   14874:	push	{lr}		; (str lr, [sp, #-4]!)
   14878:	lsr	lr, r1, #5
   1487c:	and	r1, r1, #31
   14880:	ldr	ip, [r3, lr, lsl #2]
   14884:	lsr	r0, ip, r1
   14888:	eor	r2, r2, r0
   1488c:	and	r2, r2, #1
   14890:	and	r0, r0, #1
   14894:	eor	r1, ip, r2, lsl r1
   14898:	str	r1, [r3, lr, lsl #2]
   1489c:	pop	{pc}		; (ldr pc, [sp], #4)
   148a0:	muleq	r2, r0, r1
   148a4:	ldr	r3, [pc, #16]	; 148bc <__assert_fail@plt+0x37b8>
   148a8:	cmp	r0, #0
   148ac:	movne	r3, r0
   148b0:	ldr	r0, [r3, #4]
   148b4:	str	r1, [r3, #4]
   148b8:	bx	lr
   148bc:	muleq	r2, r0, r1
   148c0:	ldr	r3, [pc, #44]	; 148f4 <__assert_fail@plt+0x37f0>
   148c4:	cmp	r0, #0
   148c8:	moveq	r0, r3
   148cc:	mov	ip, #10
   148d0:	cmp	r2, #0
   148d4:	cmpne	r1, #0
   148d8:	str	ip, [r0]
   148dc:	beq	148ec <__assert_fail@plt+0x37e8>
   148e0:	str	r1, [r0, #40]	; 0x28
   148e4:	str	r2, [r0, #44]	; 0x2c
   148e8:	bx	lr
   148ec:	push	{r4, lr}
   148f0:	bl	110ec <abort@plt>
   148f4:	muleq	r2, r0, r1
   148f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148fc:	sub	sp, sp, #24
   14900:	ldr	ip, [pc, #108]	; 14974 <__assert_fail@plt+0x3870>
   14904:	ldr	r4, [sp, #56]	; 0x38
   14908:	mov	r9, r2
   1490c:	cmp	r4, #0
   14910:	moveq	r4, ip
   14914:	mov	sl, r3
   14918:	mov	r7, r0
   1491c:	mov	r8, r1
   14920:	bl	10ff0 <__errno_location@plt>
   14924:	ldr	r3, [r4, #44]	; 0x2c
   14928:	mov	r1, r8
   1492c:	ldr	r6, [r0]
   14930:	str	r3, [sp, #16]
   14934:	ldr	r2, [r4, #40]	; 0x28
   14938:	add	r3, r4, #8
   1493c:	str	r3, [sp, #8]
   14940:	str	r2, [sp, #12]
   14944:	ldr	r2, [r4, #4]
   14948:	mov	r5, r0
   1494c:	str	r2, [sp, #4]
   14950:	ldr	ip, [r4]
   14954:	mov	r3, sl
   14958:	mov	r2, r9
   1495c:	mov	r0, r7
   14960:	str	ip, [sp]
   14964:	bl	1327c <__assert_fail@plt+0x2178>
   14968:	str	r6, [r5]
   1496c:	add	sp, sp, #24
   14970:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14974:	muleq	r2, r0, r1
   14978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1497c:	cmp	r2, #0
   14980:	sub	sp, sp, #36	; 0x24
   14984:	ldr	r4, [pc, #164]	; 14a30 <__assert_fail@plt+0x392c>
   14988:	mov	r8, r1
   1498c:	movne	r4, r2
   14990:	mov	r7, r0
   14994:	bl	10ff0 <__errno_location@plt>
   14998:	ldr	r3, [r4, #44]	; 0x2c
   1499c:	ldr	r5, [r4, #4]
   149a0:	add	r9, r4, #8
   149a4:	orr	r5, r5, #1
   149a8:	mov	r1, #0
   149ac:	mov	r2, r7
   149b0:	ldr	fp, [r0]
   149b4:	str	r3, [sp, #16]
   149b8:	ldr	r3, [r4, #40]	; 0x28
   149bc:	stmib	sp, {r5, r9}
   149c0:	str	r3, [sp, #12]
   149c4:	ldr	r3, [r4]
   149c8:	mov	r6, r0
   149cc:	str	r3, [sp]
   149d0:	mov	r0, r1
   149d4:	mov	r3, r8
   149d8:	bl	1327c <__assert_fail@plt+0x2178>
   149dc:	add	r1, r0, #1
   149e0:	mov	r0, r1
   149e4:	str	r1, [sp, #28]
   149e8:	bl	17b64 <__assert_fail@plt+0x6a60>
   149ec:	ldr	r3, [r4, #44]	; 0x2c
   149f0:	ldr	r1, [sp, #28]
   149f4:	str	r3, [sp, #16]
   149f8:	ldr	r3, [r4, #40]	; 0x28
   149fc:	str	r5, [sp, #4]
   14a00:	str	r3, [sp, #12]
   14a04:	str	r9, [sp, #8]
   14a08:	ldr	ip, [r4]
   14a0c:	mov	r3, r8
   14a10:	mov	r2, r7
   14a14:	str	ip, [sp]
   14a18:	mov	sl, r0
   14a1c:	bl	1327c <__assert_fail@plt+0x2178>
   14a20:	mov	r0, sl
   14a24:	str	fp, [r6]
   14a28:	add	sp, sp, #36	; 0x24
   14a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a30:	muleq	r2, r0, r1
   14a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a38:	cmp	r3, #0
   14a3c:	sub	sp, sp, #44	; 0x2c
   14a40:	ldr	r4, [pc, #192]	; 14b08 <__assert_fail@plt+0x3a04>
   14a44:	mov	r6, r2
   14a48:	movne	r4, r3
   14a4c:	mov	r9, r1
   14a50:	mov	r8, r0
   14a54:	bl	10ff0 <__errno_location@plt>
   14a58:	ldr	r3, [r4, #44]	; 0x2c
   14a5c:	ldr	r5, [r4, #4]
   14a60:	add	sl, r4, #8
   14a64:	cmp	r6, #0
   14a68:	orreq	r5, r5, #1
   14a6c:	mov	r1, #0
   14a70:	ldr	r2, [r0]
   14a74:	str	r3, [sp, #16]
   14a78:	ldr	r3, [r4, #40]	; 0x28
   14a7c:	stmib	sp, {r5, sl}
   14a80:	str	r3, [sp, #12]
   14a84:	ldr	r3, [r4]
   14a88:	mov	r7, r0
   14a8c:	str	r2, [sp, #28]
   14a90:	str	r3, [sp]
   14a94:	mov	r2, r8
   14a98:	mov	r3, r9
   14a9c:	mov	r0, r1
   14aa0:	bl	1327c <__assert_fail@plt+0x2178>
   14aa4:	add	r1, r0, #1
   14aa8:	mov	fp, r0
   14aac:	mov	r0, r1
   14ab0:	str	r1, [sp, #36]	; 0x24
   14ab4:	bl	17b64 <__assert_fail@plt+0x6a60>
   14ab8:	ldr	r3, [r4, #44]	; 0x2c
   14abc:	mov	r2, r8
   14ac0:	str	r3, [sp, #16]
   14ac4:	ldr	r3, [r4, #40]	; 0x28
   14ac8:	str	r5, [sp, #4]
   14acc:	str	r3, [sp, #12]
   14ad0:	str	sl, [sp, #8]
   14ad4:	ldr	ip, [r4]
   14ad8:	ldr	r1, [sp, #36]	; 0x24
   14adc:	mov	r3, r9
   14ae0:	str	ip, [sp]
   14ae4:	str	r0, [sp, #32]
   14ae8:	bl	1327c <__assert_fail@plt+0x2178>
   14aec:	ldr	r2, [sp, #28]
   14af0:	cmp	r6, #0
   14af4:	str	r2, [r7]
   14af8:	ldr	r0, [sp, #32]
   14afc:	strne	fp, [r6]
   14b00:	add	sp, sp, #44	; 0x2c
   14b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b08:	muleq	r2, r0, r1
   14b0c:	push	{r4, r5, r6, r7, r8, lr}
   14b10:	ldr	r6, [pc, #116]	; 14b8c <__assert_fail@plt+0x3a88>
   14b14:	ldr	r3, [r6, #4]
   14b18:	ldr	r7, [r6]
   14b1c:	cmp	r3, #1
   14b20:	movgt	r5, r7
   14b24:	movgt	r4, #1
   14b28:	ble	14b48 <__assert_fail@plt+0x3a44>
   14b2c:	ldr	r0, [r5, #12]
   14b30:	bl	11fcc <__assert_fail@plt+0xec8>
   14b34:	ldr	r3, [r6, #4]
   14b38:	add	r4, r4, #1
   14b3c:	cmp	r3, r4
   14b40:	add	r5, r5, #8
   14b44:	bgt	14b2c <__assert_fail@plt+0x3a28>
   14b48:	ldr	r0, [r7, #4]
   14b4c:	ldr	r4, [pc, #60]	; 14b90 <__assert_fail@plt+0x3a8c>
   14b50:	cmp	r0, r4
   14b54:	beq	14b68 <__assert_fail@plt+0x3a64>
   14b58:	bl	11fcc <__assert_fail@plt+0xec8>
   14b5c:	mov	r3, #256	; 0x100
   14b60:	str	r4, [r6, #12]
   14b64:	str	r3, [r6, #8]
   14b68:	ldr	r4, [pc, #36]	; 14b94 <__assert_fail@plt+0x3a90>
   14b6c:	cmp	r7, r4
   14b70:	beq	14b80 <__assert_fail@plt+0x3a7c>
   14b74:	mov	r0, r7
   14b78:	bl	11fcc <__assert_fail@plt+0xec8>
   14b7c:	str	r4, [r6]
   14b80:	mov	r3, #1
   14b84:	str	r3, [r6, #4]
   14b88:	pop	{r4, r5, r6, r7, r8, pc}
   14b8c:	andeq	fp, r2, r0, lsl r1
   14b90:	andeq	fp, r2, r0, asr #3
   14b94:	andeq	fp, r2, r8, lsl r1
   14b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b9c:	sub	sp, sp, #44	; 0x2c
   14ba0:	mov	r5, r0
   14ba4:	mov	sl, r1
   14ba8:	bl	10ff0 <__errno_location@plt>
   14bac:	ldr	r4, [pc, #400]	; 14d44 <__assert_fail@plt+0x3c40>
   14bb0:	cmn	r5, #-2147483647	; 0x80000001
   14bb4:	ldr	r6, [r4]
   14bb8:	mov	r8, r0
   14bbc:	movne	r0, #0
   14bc0:	moveq	r0, #1
   14bc4:	ldr	r3, [r8]
   14bc8:	orrs	r0, r0, r5, lsr #31
   14bcc:	str	r3, [sp, #24]
   14bd0:	bne	14d40 <__assert_fail@plt+0x3c3c>
   14bd4:	ldr	r2, [r4, #4]
   14bd8:	cmp	r5, r2
   14bdc:	blt	14c3c <__assert_fail@plt+0x3b38>
   14be0:	add	r7, r4, #8
   14be4:	cmp	r6, r7
   14be8:	str	r2, [sp, #36]	; 0x24
   14bec:	beq	14d10 <__assert_fail@plt+0x3c0c>
   14bf0:	mov	r3, #8
   14bf4:	sub	r2, r5, r2
   14bf8:	mov	r0, r6
   14bfc:	str	r3, [sp]
   14c00:	add	r2, r2, #1
   14c04:	mvn	r3, #-2147483648	; 0x80000000
   14c08:	add	r1, sp, #36	; 0x24
   14c0c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   14c10:	mov	r6, r0
   14c14:	str	r0, [r4]
   14c18:	ldr	r0, [r4, #4]
   14c1c:	ldr	r2, [sp, #36]	; 0x24
   14c20:	mov	r1, #0
   14c24:	sub	r2, r2, r0
   14c28:	add	r0, r6, r0, lsl #3
   14c2c:	lsl	r2, r2, #3
   14c30:	bl	11020 <memset@plt>
   14c34:	ldr	r3, [sp, #36]	; 0x24
   14c38:	str	r3, [r4, #4]
   14c3c:	ldr	r4, [pc, #260]	; 14d48 <__assert_fail@plt+0x3c44>
   14c40:	add	fp, r6, r5, lsl #3
   14c44:	ldr	r9, [r6, r5, lsl #3]
   14c48:	ldr	r0, [r4, #4]
   14c4c:	ldr	r3, [r4]
   14c50:	ldr	r7, [fp, #4]
   14c54:	ldr	r1, [r4, #44]	; 0x2c
   14c58:	ldr	r2, [r4, #40]	; 0x28
   14c5c:	orr	r0, r0, #1
   14c60:	str	r3, [sp]
   14c64:	add	r3, r4, #8
   14c68:	str	r0, [sp, #28]
   14c6c:	str	r0, [sp, #4]
   14c70:	str	r1, [sp, #16]
   14c74:	str	r2, [sp, #12]
   14c78:	str	r3, [sp, #8]
   14c7c:	mov	r0, r7
   14c80:	mov	r1, r9
   14c84:	mvn	r3, #0
   14c88:	mov	r2, sl
   14c8c:	bl	1327c <__assert_fail@plt+0x2178>
   14c90:	cmp	r9, r0
   14c94:	bhi	14cfc <__assert_fail@plt+0x3bf8>
   14c98:	add	r3, r4, #48	; 0x30
   14c9c:	add	r9, r0, #1
   14ca0:	cmp	r7, r3
   14ca4:	str	r9, [r6, r5, lsl #3]
   14ca8:	beq	14cb4 <__assert_fail@plt+0x3bb0>
   14cac:	mov	r0, r7
   14cb0:	bl	11fcc <__assert_fail@plt+0xec8>
   14cb4:	mov	r0, r9
   14cb8:	bl	17b64 <__assert_fail@plt+0x6a60>
   14cbc:	ldr	ip, [r4, #44]	; 0x2c
   14cc0:	ldr	r3, [r4]
   14cc4:	ldr	lr, [r4, #40]	; 0x28
   14cc8:	ldr	r4, [pc, #124]	; 14d4c <__assert_fail@plt+0x3c48>
   14ccc:	mov	r2, sl
   14cd0:	mov	r1, r9
   14cd4:	str	r0, [fp, #4]
   14cd8:	str	r4, [sp, #8]
   14cdc:	ldr	r4, [sp, #28]
   14ce0:	str	r3, [sp]
   14ce4:	str	r4, [sp, #4]
   14ce8:	str	ip, [sp, #16]
   14cec:	str	lr, [sp, #12]
   14cf0:	mvn	r3, #0
   14cf4:	mov	r7, r0
   14cf8:	bl	1327c <__assert_fail@plt+0x2178>
   14cfc:	ldr	r3, [sp, #24]
   14d00:	mov	r0, r7
   14d04:	str	r3, [r8]
   14d08:	add	sp, sp, #44	; 0x2c
   14d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d10:	mov	r3, #8
   14d14:	sub	r2, r5, r2
   14d18:	str	r3, [sp]
   14d1c:	add	r1, sp, #36	; 0x24
   14d20:	add	r2, r2, #1
   14d24:	mvn	r3, #-2147483648	; 0x80000000
   14d28:	bl	17d80 <__assert_fail@plt+0x6c7c>
   14d2c:	mov	r6, r0
   14d30:	ldm	r7, {r0, r1}
   14d34:	str	r6, [r4]
   14d38:	stm	r6, {r0, r1}
   14d3c:	b	14c18 <__assert_fail@plt+0x3b14>
   14d40:	bl	110ec <abort@plt>
   14d44:	andeq	fp, r2, r0, lsl r1
   14d48:	muleq	r2, r0, r1
   14d4c:	muleq	r2, r8, r1
   14d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d54:	sub	sp, sp, #52	; 0x34
   14d58:	mov	r5, r0
   14d5c:	mov	sl, r1
   14d60:	mov	fp, r2
   14d64:	bl	10ff0 <__errno_location@plt>
   14d68:	ldr	r4, [pc, #408]	; 14f08 <__assert_fail@plt+0x3e04>
   14d6c:	cmn	r5, #-2147483647	; 0x80000001
   14d70:	ldr	r6, [r4]
   14d74:	mov	r8, r0
   14d78:	movne	r0, #0
   14d7c:	moveq	r0, #1
   14d80:	ldr	r3, [r8]
   14d84:	orrs	r0, r0, r5, lsr #31
   14d88:	str	r3, [sp, #28]
   14d8c:	bne	14f04 <__assert_fail@plt+0x3e00>
   14d90:	ldr	r2, [r4, #4]
   14d94:	cmp	r5, r2
   14d98:	blt	14df8 <__assert_fail@plt+0x3cf4>
   14d9c:	add	r7, r4, #8
   14da0:	cmp	r6, r7
   14da4:	str	r2, [sp, #44]	; 0x2c
   14da8:	beq	14ed4 <__assert_fail@plt+0x3dd0>
   14dac:	mov	r3, #8
   14db0:	sub	r2, r5, r2
   14db4:	mov	r0, r6
   14db8:	str	r3, [sp]
   14dbc:	add	r2, r2, #1
   14dc0:	mvn	r3, #-2147483648	; 0x80000000
   14dc4:	add	r1, sp, #44	; 0x2c
   14dc8:	bl	17d80 <__assert_fail@plt+0x6c7c>
   14dcc:	mov	r6, r0
   14dd0:	str	r0, [r4]
   14dd4:	ldr	r0, [r4, #4]
   14dd8:	ldr	r2, [sp, #44]	; 0x2c
   14ddc:	mov	r1, #0
   14de0:	sub	r2, r2, r0
   14de4:	add	r0, r6, r0, lsl #3
   14de8:	lsl	r2, r2, #3
   14dec:	bl	11020 <memset@plt>
   14df0:	ldr	r3, [sp, #44]	; 0x2c
   14df4:	str	r3, [r4, #4]
   14df8:	ldr	r4, [pc, #268]	; 14f0c <__assert_fail@plt+0x3e08>
   14dfc:	add	r3, r6, r5, lsl #3
   14e00:	str	r3, [sp, #32]
   14e04:	ldr	r7, [r3, #4]
   14e08:	ldr	r0, [r4, #4]
   14e0c:	ldr	r3, [r4]
   14e10:	ldr	r9, [r6, r5, lsl #3]
   14e14:	ldr	r1, [r4, #44]	; 0x2c
   14e18:	ldr	r2, [r4, #40]	; 0x28
   14e1c:	orr	r0, r0, #1
   14e20:	str	r3, [sp]
   14e24:	add	r3, r4, #8
   14e28:	str	r0, [sp, #36]	; 0x24
   14e2c:	str	r0, [sp, #4]
   14e30:	str	r1, [sp, #16]
   14e34:	str	r2, [sp, #12]
   14e38:	str	r3, [sp, #8]
   14e3c:	mov	r0, r7
   14e40:	mov	r1, r9
   14e44:	mov	r3, fp
   14e48:	mov	r2, sl
   14e4c:	bl	1327c <__assert_fail@plt+0x2178>
   14e50:	cmp	r9, r0
   14e54:	bhi	14ec0 <__assert_fail@plt+0x3dbc>
   14e58:	add	r3, r4, #48	; 0x30
   14e5c:	add	r9, r0, #1
   14e60:	cmp	r7, r3
   14e64:	str	r9, [r6, r5, lsl #3]
   14e68:	beq	14e74 <__assert_fail@plt+0x3d70>
   14e6c:	mov	r0, r7
   14e70:	bl	11fcc <__assert_fail@plt+0xec8>
   14e74:	mov	r0, r9
   14e78:	bl	17b64 <__assert_fail@plt+0x6a60>
   14e7c:	ldr	ip, [sp, #32]
   14e80:	ldr	lr, [r4, #44]	; 0x2c
   14e84:	ldr	r5, [r4, #40]	; 0x28
   14e88:	mov	r3, fp
   14e8c:	mov	r2, sl
   14e90:	mov	r1, r9
   14e94:	str	r0, [ip, #4]
   14e98:	ldr	ip, [r4]
   14e9c:	ldr	r4, [pc, #108]	; 14f10 <__assert_fail@plt+0x3e0c>
   14ea0:	str	lr, [sp, #16]
   14ea4:	str	r4, [sp, #8]
   14ea8:	ldr	r4, [sp, #36]	; 0x24
   14eac:	str	r5, [sp, #12]
   14eb0:	str	r4, [sp, #4]
   14eb4:	str	ip, [sp]
   14eb8:	mov	r7, r0
   14ebc:	bl	1327c <__assert_fail@plt+0x2178>
   14ec0:	ldr	r3, [sp, #28]
   14ec4:	mov	r0, r7
   14ec8:	str	r3, [r8]
   14ecc:	add	sp, sp, #52	; 0x34
   14ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed4:	mov	r3, #8
   14ed8:	sub	r2, r5, r2
   14edc:	str	r3, [sp]
   14ee0:	add	r1, sp, #44	; 0x2c
   14ee4:	add	r2, r2, #1
   14ee8:	mvn	r3, #-2147483648	; 0x80000000
   14eec:	bl	17d80 <__assert_fail@plt+0x6c7c>
   14ef0:	mov	r6, r0
   14ef4:	ldm	r7, {r0, r1}
   14ef8:	str	r6, [r4]
   14efc:	stm	r6, {r0, r1}
   14f00:	b	14dd4 <__assert_fail@plt+0x3cd0>
   14f04:	bl	110ec <abort@plt>
   14f08:	andeq	fp, r2, r0, lsl r1
   14f0c:	muleq	r2, r0, r1
   14f10:	muleq	r2, r8, r1
   14f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f18:	sub	sp, sp, #44	; 0x2c
   14f1c:	mov	sl, r0
   14f20:	bl	10ff0 <__errno_location@plt>
   14f24:	ldr	r4, [pc, #352]	; 1508c <__assert_fail@plt+0x3f88>
   14f28:	ldr	r2, [r4, #4]
   14f2c:	ldr	r5, [r4]
   14f30:	cmp	r2, #0
   14f34:	ldr	r3, [r0]
   14f38:	mov	r8, r0
   14f3c:	str	r3, [sp, #28]
   14f40:	bgt	14f9c <__assert_fail@plt+0x3e98>
   14f44:	add	r6, r4, #8
   14f48:	cmp	r5, r6
   14f4c:	str	r2, [sp, #36]	; 0x24
   14f50:	beq	1505c <__assert_fail@plt+0x3f58>
   14f54:	mov	r3, #8
   14f58:	mov	r0, r5
   14f5c:	str	r3, [sp]
   14f60:	rsb	r2, r2, #1
   14f64:	mvn	r3, #-2147483648	; 0x80000000
   14f68:	add	r1, sp, #36	; 0x24
   14f6c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   14f70:	mov	r5, r0
   14f74:	str	r0, [r4]
   14f78:	ldr	r0, [r4, #4]
   14f7c:	ldr	r2, [sp, #36]	; 0x24
   14f80:	mov	r1, #0
   14f84:	sub	r2, r2, r0
   14f88:	add	r0, r5, r0, lsl #3
   14f8c:	lsl	r2, r2, #3
   14f90:	bl	11020 <memset@plt>
   14f94:	ldr	r3, [sp, #36]	; 0x24
   14f98:	str	r3, [r4, #4]
   14f9c:	ldr	r4, [pc, #236]	; 15090 <__assert_fail@plt+0x3f8c>
   14fa0:	ldr	r9, [r5]
   14fa4:	ldr	r6, [r5, #4]
   14fa8:	ldr	r7, [r4, #4]
   14fac:	ldr	r1, [r4, #44]	; 0x2c
   14fb0:	ldr	r2, [r4, #40]	; 0x28
   14fb4:	ldr	r3, [r4]
   14fb8:	orr	r7, r7, #1
   14fbc:	add	fp, r4, #8
   14fc0:	str	r1, [sp, #16]
   14fc4:	str	r2, [sp, #12]
   14fc8:	str	r3, [sp]
   14fcc:	str	r7, [sp, #4]
   14fd0:	str	fp, [sp, #8]
   14fd4:	mov	r1, r9
   14fd8:	mov	r0, r6
   14fdc:	mvn	r3, #0
   14fe0:	mov	r2, sl
   14fe4:	bl	1327c <__assert_fail@plt+0x2178>
   14fe8:	cmp	r9, r0
   14fec:	bhi	15048 <__assert_fail@plt+0x3f44>
   14ff0:	add	r3, r4, #48	; 0x30
   14ff4:	add	r9, r0, #1
   14ff8:	cmp	r6, r3
   14ffc:	str	r9, [r5]
   15000:	beq	1500c <__assert_fail@plt+0x3f08>
   15004:	mov	r0, r6
   15008:	bl	11fcc <__assert_fail@plt+0xec8>
   1500c:	mov	r0, r9
   15010:	bl	17b64 <__assert_fail@plt+0x6a60>
   15014:	ldr	ip, [r4, #44]	; 0x2c
   15018:	ldr	r3, [r4]
   1501c:	ldr	lr, [r4, #40]	; 0x28
   15020:	mov	r2, sl
   15024:	mov	r1, r9
   15028:	str	r0, [r5, #4]
   1502c:	str	r3, [sp]
   15030:	stmib	sp, {r7, fp}
   15034:	str	ip, [sp, #16]
   15038:	str	lr, [sp, #12]
   1503c:	mvn	r3, #0
   15040:	mov	r6, r0
   15044:	bl	1327c <__assert_fail@plt+0x2178>
   15048:	ldr	r3, [sp, #28]
   1504c:	mov	r0, r6
   15050:	str	r3, [r8]
   15054:	add	sp, sp, #44	; 0x2c
   15058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1505c:	mov	r3, #8
   15060:	str	r3, [sp]
   15064:	add	r1, sp, #36	; 0x24
   15068:	rsb	r2, r2, #1
   1506c:	mvn	r3, #-2147483648	; 0x80000000
   15070:	mov	r0, #0
   15074:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15078:	mov	r5, r0
   1507c:	ldm	r6, {r0, r1}
   15080:	str	r5, [r4]
   15084:	stm	r5, {r0, r1}
   15088:	b	14f78 <__assert_fail@plt+0x3e74>
   1508c:	andeq	fp, r2, r0, lsl r1
   15090:	muleq	r2, r0, r1
   15094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15098:	sub	sp, sp, #44	; 0x2c
   1509c:	mov	r9, r0
   150a0:	mov	sl, r1
   150a4:	bl	10ff0 <__errno_location@plt>
   150a8:	ldr	r4, [pc, #364]	; 1521c <__assert_fail@plt+0x4118>
   150ac:	ldr	r2, [r4, #4]
   150b0:	ldr	r5, [r4]
   150b4:	cmp	r2, #0
   150b8:	ldr	r3, [r0]
   150bc:	mov	r7, r0
   150c0:	str	r3, [sp, #24]
   150c4:	bgt	15120 <__assert_fail@plt+0x401c>
   150c8:	add	r6, r4, #8
   150cc:	cmp	r5, r6
   150d0:	str	r2, [sp, #36]	; 0x24
   150d4:	beq	151ec <__assert_fail@plt+0x40e8>
   150d8:	mov	r3, #8
   150dc:	mov	r0, r5
   150e0:	str	r3, [sp]
   150e4:	rsb	r2, r2, #1
   150e8:	mvn	r3, #-2147483648	; 0x80000000
   150ec:	add	r1, sp, #36	; 0x24
   150f0:	bl	17d80 <__assert_fail@plt+0x6c7c>
   150f4:	mov	r5, r0
   150f8:	str	r0, [r4]
   150fc:	ldr	r0, [r4, #4]
   15100:	ldr	r2, [sp, #36]	; 0x24
   15104:	mov	r1, #0
   15108:	sub	r2, r2, r0
   1510c:	add	r0, r5, r0, lsl #3
   15110:	lsl	r2, r2, #3
   15114:	bl	11020 <memset@plt>
   15118:	ldr	r3, [sp, #36]	; 0x24
   1511c:	str	r3, [r4, #4]
   15120:	ldr	r4, [pc, #248]	; 15220 <__assert_fail@plt+0x411c>
   15124:	ldr	r8, [r5]
   15128:	ldr	r6, [r5, #4]
   1512c:	ldr	r0, [r4, #4]
   15130:	ldr	r1, [r4, #44]	; 0x2c
   15134:	ldr	r2, [r4, #40]	; 0x28
   15138:	ldr	r3, [r4]
   1513c:	orr	r0, r0, #1
   15140:	add	fp, r4, #8
   15144:	str	r0, [sp, #28]
   15148:	str	r0, [sp, #4]
   1514c:	str	r1, [sp, #16]
   15150:	str	r2, [sp, #12]
   15154:	str	r3, [sp]
   15158:	str	fp, [sp, #8]
   1515c:	mov	r1, r8
   15160:	mov	r0, r6
   15164:	mov	r3, sl
   15168:	mov	r2, r9
   1516c:	bl	1327c <__assert_fail@plt+0x2178>
   15170:	cmp	r8, r0
   15174:	bhi	151d8 <__assert_fail@plt+0x40d4>
   15178:	add	r3, r4, #48	; 0x30
   1517c:	add	r8, r0, #1
   15180:	cmp	r6, r3
   15184:	str	r8, [r5]
   15188:	beq	15194 <__assert_fail@plt+0x4090>
   1518c:	mov	r0, r6
   15190:	bl	11fcc <__assert_fail@plt+0xec8>
   15194:	mov	r0, r8
   15198:	bl	17b64 <__assert_fail@plt+0x6a60>
   1519c:	ldr	lr, [r4, #44]	; 0x2c
   151a0:	ldr	ip, [r4]
   151a4:	mov	r3, sl
   151a8:	mov	r2, r9
   151ac:	mov	r1, r8
   151b0:	str	r0, [r5, #4]
   151b4:	ldr	r5, [r4, #40]	; 0x28
   151b8:	ldr	r4, [sp, #28]
   151bc:	str	fp, [sp, #8]
   151c0:	str	r4, [sp, #4]
   151c4:	str	lr, [sp, #16]
   151c8:	str	r5, [sp, #12]
   151cc:	str	ip, [sp]
   151d0:	mov	r6, r0
   151d4:	bl	1327c <__assert_fail@plt+0x2178>
   151d8:	ldr	r3, [sp, #24]
   151dc:	mov	r0, r6
   151e0:	str	r3, [r7]
   151e4:	add	sp, sp, #44	; 0x2c
   151e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151ec:	mov	r3, #8
   151f0:	str	r3, [sp]
   151f4:	add	r1, sp, #36	; 0x24
   151f8:	rsb	r2, r2, #1
   151fc:	mvn	r3, #-2147483648	; 0x80000000
   15200:	mov	r0, #0
   15204:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15208:	mov	r5, r0
   1520c:	ldm	r6, {r0, r1}
   15210:	str	r5, [r4]
   15214:	stm	r5, {r0, r1}
   15218:	b	150fc <__assert_fail@plt+0x3ff8>
   1521c:	andeq	fp, r2, r0, lsl r1
   15220:	muleq	r2, r0, r1
   15224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15228:	sub	sp, sp, #132	; 0x84
   1522c:	mov	r5, r1
   15230:	mov	r4, r0
   15234:	mov	r9, r2
   15238:	add	r0, sp, #80	; 0x50
   1523c:	mov	r2, #48	; 0x30
   15240:	mov	r1, #0
   15244:	bl	11020 <memset@plt>
   15248:	cmp	r5, #10
   1524c:	beq	15404 <__assert_fail@plt+0x4300>
   15250:	add	lr, sp, #80	; 0x50
   15254:	str	r5, [sp, #80]	; 0x50
   15258:	ldm	lr!, {r0, r1, r2, r3}
   1525c:	add	ip, sp, #32
   15260:	ldr	r6, [pc, #416]	; 15408 <__assert_fail@plt+0x4304>
   15264:	stmia	ip!, {r0, r1, r2, r3}
   15268:	ldm	lr!, {r0, r1, r2, r3}
   1526c:	stmia	ip!, {r0, r1, r2, r3}
   15270:	ldm	lr, {r0, r1, r2, r3}
   15274:	stm	ip, {r0, r1, r2, r3}
   15278:	bl	10ff0 <__errno_location@plt>
   1527c:	cmn	r4, #-2147483647	; 0x80000001
   15280:	ldr	r5, [r6]
   15284:	mov	r7, r0
   15288:	movne	r0, #0
   1528c:	moveq	r0, #1
   15290:	ldr	r3, [r7]
   15294:	orrs	r0, r0, r4, lsr #31
   15298:	str	r3, [sp, #24]
   1529c:	bne	15404 <__assert_fail@plt+0x4300>
   152a0:	ldr	r2, [r6, #4]
   152a4:	cmp	r4, r2
   152a8:	blt	15308 <__assert_fail@plt+0x4204>
   152ac:	add	r8, r6, #8
   152b0:	cmp	r5, r8
   152b4:	str	r2, [sp, #80]	; 0x50
   152b8:	beq	153d4 <__assert_fail@plt+0x42d0>
   152bc:	mov	r3, #8
   152c0:	sub	r2, r4, r2
   152c4:	mov	r0, r5
   152c8:	str	r3, [sp]
   152cc:	add	r2, r2, #1
   152d0:	add	r1, sp, #80	; 0x50
   152d4:	mvn	r3, #-2147483648	; 0x80000000
   152d8:	bl	17d80 <__assert_fail@plt+0x6c7c>
   152dc:	mov	r5, r0
   152e0:	str	r0, [r6]
   152e4:	ldr	r0, [r6, #4]
   152e8:	ldr	r2, [sp, #80]	; 0x50
   152ec:	mov	r1, #0
   152f0:	sub	r2, r2, r0
   152f4:	add	r0, r5, r0, lsl #3
   152f8:	lsl	r2, r2, #3
   152fc:	bl	11020 <memset@plt>
   15300:	ldr	r3, [sp, #80]	; 0x50
   15304:	str	r3, [r6, #4]
   15308:	add	fp, r5, r4, lsl #3
   1530c:	ldr	r1, [sp, #36]	; 0x24
   15310:	ldr	r8, [r5, r4, lsl #3]
   15314:	ldr	r6, [fp, #4]
   15318:	ldr	r2, [sp, #72]	; 0x48
   1531c:	ldr	r3, [sp, #32]
   15320:	ldr	ip, [sp, #76]	; 0x4c
   15324:	orr	r1, r1, #1
   15328:	add	sl, sp, #40	; 0x28
   1532c:	str	r1, [sp, #28]
   15330:	str	r1, [sp, #4]
   15334:	str	r2, [sp, #12]
   15338:	str	r3, [sp]
   1533c:	mov	r0, r6
   15340:	mov	r1, r8
   15344:	str	ip, [sp, #16]
   15348:	str	sl, [sp, #8]
   1534c:	mvn	r3, #0
   15350:	mov	r2, r9
   15354:	bl	1327c <__assert_fail@plt+0x2178>
   15358:	cmp	r8, r0
   1535c:	bhi	153c0 <__assert_fail@plt+0x42bc>
   15360:	ldr	r3, [pc, #164]	; 1540c <__assert_fail@plt+0x4308>
   15364:	add	r8, r0, #1
   15368:	cmp	r6, r3
   1536c:	str	r8, [r5, r4, lsl #3]
   15370:	beq	1537c <__assert_fail@plt+0x4278>
   15374:	mov	r0, r6
   15378:	bl	11fcc <__assert_fail@plt+0xec8>
   1537c:	mov	r0, r8
   15380:	bl	17b64 <__assert_fail@plt+0x6a60>
   15384:	ldr	lr, [sp, #76]	; 0x4c
   15388:	ldr	r3, [sp, #32]
   1538c:	ldr	ip, [sp, #72]	; 0x48
   15390:	ldr	r4, [sp, #28]
   15394:	mov	r2, r9
   15398:	mov	r1, r8
   1539c:	str	r0, [fp, #4]
   153a0:	str	r3, [sp]
   153a4:	str	sl, [sp, #8]
   153a8:	str	r4, [sp, #4]
   153ac:	str	lr, [sp, #16]
   153b0:	str	ip, [sp, #12]
   153b4:	mvn	r3, #0
   153b8:	mov	r6, r0
   153bc:	bl	1327c <__assert_fail@plt+0x2178>
   153c0:	ldr	r3, [sp, #24]
   153c4:	mov	r0, r6
   153c8:	str	r3, [r7]
   153cc:	add	sp, sp, #132	; 0x84
   153d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153d4:	mov	r3, #8
   153d8:	sub	r2, r4, r2
   153dc:	add	r1, sp, #80	; 0x50
   153e0:	str	r3, [sp]
   153e4:	add	r2, r2, #1
   153e8:	mvn	r3, #-2147483648	; 0x80000000
   153ec:	bl	17d80 <__assert_fail@plt+0x6c7c>
   153f0:	mov	r5, r0
   153f4:	ldm	r8, {r0, r1}
   153f8:	str	r5, [r6]
   153fc:	stm	r5, {r0, r1}
   15400:	b	152e4 <__assert_fail@plt+0x41e0>
   15404:	bl	110ec <abort@plt>
   15408:	andeq	fp, r2, r0, lsl r1
   1540c:	andeq	fp, r2, r0, asr #3
   15410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15414:	sub	sp, sp, #132	; 0x84
   15418:	mov	r5, r1
   1541c:	mov	r4, r0
   15420:	mov	r9, r2
   15424:	add	r0, sp, #80	; 0x50
   15428:	mov	r2, #48	; 0x30
   1542c:	mov	r1, #0
   15430:	mov	sl, r3
   15434:	bl	11020 <memset@plt>
   15438:	cmp	r5, #10
   1543c:	beq	155f8 <__assert_fail@plt+0x44f4>
   15440:	add	lr, sp, #80	; 0x50
   15444:	str	r5, [sp, #80]	; 0x50
   15448:	ldm	lr!, {r0, r1, r2, r3}
   1544c:	add	ip, sp, #32
   15450:	ldr	r6, [pc, #420]	; 155fc <__assert_fail@plt+0x44f8>
   15454:	stmia	ip!, {r0, r1, r2, r3}
   15458:	ldm	lr!, {r0, r1, r2, r3}
   1545c:	stmia	ip!, {r0, r1, r2, r3}
   15460:	ldm	lr, {r0, r1, r2, r3}
   15464:	stm	ip, {r0, r1, r2, r3}
   15468:	bl	10ff0 <__errno_location@plt>
   1546c:	cmn	r4, #-2147483647	; 0x80000001
   15470:	ldr	r5, [r6]
   15474:	mov	r7, r0
   15478:	movne	r0, #0
   1547c:	moveq	r0, #1
   15480:	ldr	r3, [r7]
   15484:	orrs	r0, r0, r4, lsr #31
   15488:	str	r3, [sp, #24]
   1548c:	bne	155f8 <__assert_fail@plt+0x44f4>
   15490:	ldr	r2, [r6, #4]
   15494:	cmp	r4, r2
   15498:	blt	154f8 <__assert_fail@plt+0x43f4>
   1549c:	add	r8, r6, #8
   154a0:	cmp	r5, r8
   154a4:	str	r2, [sp, #80]	; 0x50
   154a8:	beq	155c8 <__assert_fail@plt+0x44c4>
   154ac:	mov	r3, #8
   154b0:	sub	r2, r4, r2
   154b4:	mov	r0, r5
   154b8:	str	r3, [sp]
   154bc:	add	r2, r2, #1
   154c0:	add	r1, sp, #80	; 0x50
   154c4:	mvn	r3, #-2147483648	; 0x80000000
   154c8:	bl	17d80 <__assert_fail@plt+0x6c7c>
   154cc:	mov	r5, r0
   154d0:	str	r0, [r6]
   154d4:	ldr	r0, [r6, #4]
   154d8:	ldr	r2, [sp, #80]	; 0x50
   154dc:	mov	r1, #0
   154e0:	sub	r2, r2, r0
   154e4:	add	r0, r5, r0, lsl #3
   154e8:	lsl	r2, r2, #3
   154ec:	bl	11020 <memset@plt>
   154f0:	ldr	r3, [sp, #80]	; 0x50
   154f4:	str	r3, [r6, #4]
   154f8:	add	fp, r5, r4, lsl #3
   154fc:	ldr	r3, [sp, #32]
   15500:	ldr	r1, [sp, #36]	; 0x24
   15504:	ldr	r8, [r5, r4, lsl #3]
   15508:	ldr	r6, [fp, #4]
   1550c:	ldr	r2, [sp, #72]	; 0x48
   15510:	ldr	ip, [sp, #76]	; 0x4c
   15514:	orr	r1, r1, #1
   15518:	str	r3, [sp]
   1551c:	add	r3, sp, #40	; 0x28
   15520:	str	r1, [sp, #28]
   15524:	str	r1, [sp, #4]
   15528:	str	r2, [sp, #12]
   1552c:	str	r3, [sp, #8]
   15530:	mov	r0, r6
   15534:	mov	r1, r8
   15538:	str	ip, [sp, #16]
   1553c:	mov	r3, sl
   15540:	mov	r2, r9
   15544:	bl	1327c <__assert_fail@plt+0x2178>
   15548:	cmp	r8, r0
   1554c:	bhi	155b4 <__assert_fail@plt+0x44b0>
   15550:	ldr	r3, [pc, #168]	; 15600 <__assert_fail@plt+0x44fc>
   15554:	add	r8, r0, #1
   15558:	cmp	r6, r3
   1555c:	str	r8, [r5, r4, lsl #3]
   15560:	beq	1556c <__assert_fail@plt+0x4468>
   15564:	mov	r0, r6
   15568:	bl	11fcc <__assert_fail@plt+0xec8>
   1556c:	mov	r0, r8
   15570:	bl	17b64 <__assert_fail@plt+0x6a60>
   15574:	add	lr, sp, #40	; 0x28
   15578:	ldr	ip, [sp, #76]	; 0x4c
   1557c:	ldr	r4, [sp, #72]	; 0x48
   15580:	ldr	r5, [sp, #28]
   15584:	mov	r3, sl
   15588:	mov	r2, r9
   1558c:	mov	r1, r8
   15590:	str	r0, [fp, #4]
   15594:	str	lr, [sp, #8]
   15598:	ldr	lr, [sp, #32]
   1559c:	str	r5, [sp, #4]
   155a0:	str	ip, [sp, #16]
   155a4:	str	r4, [sp, #12]
   155a8:	str	lr, [sp]
   155ac:	mov	r6, r0
   155b0:	bl	1327c <__assert_fail@plt+0x2178>
   155b4:	ldr	r3, [sp, #24]
   155b8:	mov	r0, r6
   155bc:	str	r3, [r7]
   155c0:	add	sp, sp, #132	; 0x84
   155c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c8:	mov	r3, #8
   155cc:	sub	r2, r4, r2
   155d0:	add	r1, sp, #80	; 0x50
   155d4:	str	r3, [sp]
   155d8:	add	r2, r2, #1
   155dc:	mvn	r3, #-2147483648	; 0x80000000
   155e0:	bl	17d80 <__assert_fail@plt+0x6c7c>
   155e4:	mov	r5, r0
   155e8:	ldm	r8, {r0, r1}
   155ec:	str	r5, [r6]
   155f0:	stm	r5, {r0, r1}
   155f4:	b	154d4 <__assert_fail@plt+0x43d0>
   155f8:	bl	110ec <abort@plt>
   155fc:	andeq	fp, r2, r0, lsl r1
   15600:	andeq	fp, r2, r0, asr #3
   15604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15608:	sub	sp, sp, #124	; 0x7c
   1560c:	mov	r4, r0
   15610:	mov	r9, r1
   15614:	add	r0, sp, #72	; 0x48
   15618:	mov	r2, #48	; 0x30
   1561c:	mov	r1, #0
   15620:	bl	11020 <memset@plt>
   15624:	cmp	r4, #10
   15628:	beq	157b4 <__assert_fail@plt+0x46b0>
   1562c:	add	lr, sp, #72	; 0x48
   15630:	str	r4, [sp, #72]	; 0x48
   15634:	ldm	lr!, {r0, r1, r2, r3}
   15638:	add	ip, sp, #24
   1563c:	ldr	r5, [pc, #372]	; 157b8 <__assert_fail@plt+0x46b4>
   15640:	stmia	ip!, {r0, r1, r2, r3}
   15644:	ldm	lr!, {r0, r1, r2, r3}
   15648:	stmia	ip!, {r0, r1, r2, r3}
   1564c:	ldm	lr, {r0, r1, r2, r3}
   15650:	stm	ip, {r0, r1, r2, r3}
   15654:	bl	10ff0 <__errno_location@plt>
   15658:	ldr	r2, [r5, #4]
   1565c:	ldr	r4, [r5]
   15660:	cmp	r2, #0
   15664:	mov	r7, r0
   15668:	ldr	fp, [r0]
   1566c:	bgt	156c8 <__assert_fail@plt+0x45c4>
   15670:	add	r6, r5, #8
   15674:	cmp	r4, r6
   15678:	str	r2, [sp, #72]	; 0x48
   1567c:	beq	15784 <__assert_fail@plt+0x4680>
   15680:	mov	r3, #8
   15684:	mov	r0, r4
   15688:	str	r3, [sp]
   1568c:	rsb	r2, r2, #1
   15690:	add	r1, sp, #72	; 0x48
   15694:	mvn	r3, #-2147483648	; 0x80000000
   15698:	bl	17d80 <__assert_fail@plt+0x6c7c>
   1569c:	mov	r4, r0
   156a0:	str	r0, [r5]
   156a4:	ldr	r0, [r5, #4]
   156a8:	ldr	r2, [sp, #72]	; 0x48
   156ac:	mov	r1, #0
   156b0:	sub	r2, r2, r0
   156b4:	add	r0, r4, r0, lsl #3
   156b8:	lsl	r2, r2, #3
   156bc:	bl	11020 <memset@plt>
   156c0:	ldr	r3, [sp, #72]	; 0x48
   156c4:	str	r3, [r5, #4]
   156c8:	ldr	r6, [sp, #28]
   156cc:	ldr	r8, [r4]
   156d0:	ldr	r5, [r4, #4]
   156d4:	ldr	r2, [sp, #64]	; 0x40
   156d8:	ldr	r3, [sp, #24]
   156dc:	ldr	ip, [sp, #68]	; 0x44
   156e0:	orr	r6, r6, #1
   156e4:	add	sl, sp, #32
   156e8:	str	r2, [sp, #12]
   156ec:	str	r3, [sp]
   156f0:	str	r6, [sp, #4]
   156f4:	mov	r1, r8
   156f8:	mov	r0, r5
   156fc:	str	ip, [sp, #16]
   15700:	str	sl, [sp, #8]
   15704:	mvn	r3, #0
   15708:	mov	r2, r9
   1570c:	bl	1327c <__assert_fail@plt+0x2178>
   15710:	cmp	r8, r0
   15714:	bhi	15774 <__assert_fail@plt+0x4670>
   15718:	ldr	r3, [pc, #156]	; 157bc <__assert_fail@plt+0x46b8>
   1571c:	add	r8, r0, #1
   15720:	cmp	r5, r3
   15724:	str	r8, [r4]
   15728:	beq	15734 <__assert_fail@plt+0x4630>
   1572c:	mov	r0, r5
   15730:	bl	11fcc <__assert_fail@plt+0xec8>
   15734:	mov	r0, r8
   15738:	bl	17b64 <__assert_fail@plt+0x6a60>
   1573c:	ldr	lr, [sp, #68]	; 0x44
   15740:	ldr	r3, [sp, #24]
   15744:	ldr	ip, [sp, #64]	; 0x40
   15748:	mov	r2, r9
   1574c:	mov	r1, r8
   15750:	str	r0, [r4, #4]
   15754:	str	r3, [sp]
   15758:	str	sl, [sp, #8]
   1575c:	str	r6, [sp, #4]
   15760:	str	lr, [sp, #16]
   15764:	str	ip, [sp, #12]
   15768:	mvn	r3, #0
   1576c:	mov	r5, r0
   15770:	bl	1327c <__assert_fail@plt+0x2178>
   15774:	mov	r0, r5
   15778:	str	fp, [r7]
   1577c:	add	sp, sp, #124	; 0x7c
   15780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15784:	mov	r3, #8
   15788:	add	r1, sp, #72	; 0x48
   1578c:	str	r3, [sp]
   15790:	rsb	r2, r2, #1
   15794:	mvn	r3, #-2147483648	; 0x80000000
   15798:	mov	r0, #0
   1579c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   157a0:	mov	r4, r0
   157a4:	ldm	r6, {r0, r1}
   157a8:	str	r4, [r5]
   157ac:	stm	r4, {r0, r1}
   157b0:	b	156a4 <__assert_fail@plt+0x45a0>
   157b4:	bl	110ec <abort@plt>
   157b8:	andeq	fp, r2, r0, lsl r1
   157bc:	andeq	fp, r2, r0, asr #3
   157c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157c4:	sub	sp, sp, #132	; 0x84
   157c8:	mov	r4, r0
   157cc:	mov	r9, r1
   157d0:	mov	sl, r2
   157d4:	add	r0, sp, #80	; 0x50
   157d8:	mov	r2, #48	; 0x30
   157dc:	mov	r1, #0
   157e0:	bl	11020 <memset@plt>
   157e4:	cmp	r4, #10
   157e8:	beq	1597c <__assert_fail@plt+0x4878>
   157ec:	add	lr, sp, #80	; 0x50
   157f0:	str	r4, [sp, #80]	; 0x50
   157f4:	ldm	lr!, {r0, r1, r2, r3}
   157f8:	add	ip, sp, #32
   157fc:	ldr	r5, [pc, #380]	; 15980 <__assert_fail@plt+0x487c>
   15800:	stmia	ip!, {r0, r1, r2, r3}
   15804:	ldm	lr!, {r0, r1, r2, r3}
   15808:	stmia	ip!, {r0, r1, r2, r3}
   1580c:	ldm	lr, {r0, r1, r2, r3}
   15810:	stm	ip, {r0, r1, r2, r3}
   15814:	bl	10ff0 <__errno_location@plt>
   15818:	ldr	r2, [r5, #4]
   1581c:	ldr	r4, [r5]
   15820:	cmp	r2, #0
   15824:	ldr	r3, [r0]
   15828:	mov	r7, r0
   1582c:	str	r3, [sp, #28]
   15830:	bgt	1588c <__assert_fail@plt+0x4788>
   15834:	add	r6, r5, #8
   15838:	cmp	r4, r6
   1583c:	str	r2, [sp, #80]	; 0x50
   15840:	beq	1594c <__assert_fail@plt+0x4848>
   15844:	mov	r3, #8
   15848:	mov	r0, r4
   1584c:	str	r3, [sp]
   15850:	rsb	r2, r2, #1
   15854:	add	r1, sp, #80	; 0x50
   15858:	mvn	r3, #-2147483648	; 0x80000000
   1585c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15860:	mov	r4, r0
   15864:	str	r0, [r5]
   15868:	ldr	r0, [r5, #4]
   1586c:	ldr	r2, [sp, #80]	; 0x50
   15870:	mov	r1, #0
   15874:	sub	r2, r2, r0
   15878:	add	r0, r4, r0, lsl #3
   1587c:	lsl	r2, r2, #3
   15880:	bl	11020 <memset@plt>
   15884:	ldr	r3, [sp, #80]	; 0x50
   15888:	str	r3, [r5, #4]
   1588c:	ldr	r6, [sp, #36]	; 0x24
   15890:	ldr	r8, [r4]
   15894:	ldr	r5, [r4, #4]
   15898:	ldr	r2, [sp, #72]	; 0x48
   1589c:	ldr	r3, [sp, #32]
   158a0:	ldr	ip, [sp, #76]	; 0x4c
   158a4:	orr	r6, r6, #1
   158a8:	add	fp, sp, #40	; 0x28
   158ac:	str	r2, [sp, #12]
   158b0:	str	r3, [sp]
   158b4:	str	r6, [sp, #4]
   158b8:	mov	r1, r8
   158bc:	mov	r0, r5
   158c0:	str	ip, [sp, #16]
   158c4:	str	fp, [sp, #8]
   158c8:	mov	r3, sl
   158cc:	mov	r2, r9
   158d0:	bl	1327c <__assert_fail@plt+0x2178>
   158d4:	cmp	r8, r0
   158d8:	bhi	15938 <__assert_fail@plt+0x4834>
   158dc:	ldr	r3, [pc, #160]	; 15984 <__assert_fail@plt+0x4880>
   158e0:	add	r8, r0, #1
   158e4:	cmp	r5, r3
   158e8:	str	r8, [r4]
   158ec:	beq	158f8 <__assert_fail@plt+0x47f4>
   158f0:	mov	r0, r5
   158f4:	bl	11fcc <__assert_fail@plt+0xec8>
   158f8:	mov	r0, r8
   158fc:	bl	17b64 <__assert_fail@plt+0x6a60>
   15900:	ldr	ip, [sp, #76]	; 0x4c
   15904:	ldr	lr, [sp, #32]
   15908:	mov	r3, sl
   1590c:	mov	r2, r9
   15910:	mov	r1, r8
   15914:	str	r0, [r4, #4]
   15918:	ldr	r4, [sp, #72]	; 0x48
   1591c:	str	fp, [sp, #8]
   15920:	str	r6, [sp, #4]
   15924:	str	ip, [sp, #16]
   15928:	str	r4, [sp, #12]
   1592c:	str	lr, [sp]
   15930:	mov	r5, r0
   15934:	bl	1327c <__assert_fail@plt+0x2178>
   15938:	ldr	r3, [sp, #28]
   1593c:	mov	r0, r5
   15940:	str	r3, [r7]
   15944:	add	sp, sp, #132	; 0x84
   15948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1594c:	mov	r3, #8
   15950:	add	r1, sp, #80	; 0x50
   15954:	str	r3, [sp]
   15958:	rsb	r2, r2, #1
   1595c:	mvn	r3, #-2147483648	; 0x80000000
   15960:	mov	r0, #0
   15964:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15968:	mov	r4, r0
   1596c:	ldm	r6, {r0, r1}
   15970:	str	r4, [r5]
   15974:	stm	r4, {r0, r1}
   15978:	b	15868 <__assert_fail@plt+0x4764>
   1597c:	bl	110ec <abort@plt>
   15980:	andeq	fp, r2, r0, lsl r1
   15984:	andeq	fp, r2, r0, asr #3
   15988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1598c:	mov	r4, r2
   15990:	ldr	lr, [pc, #432]	; 15b48 <__assert_fail@plt+0x4a44>
   15994:	mov	sl, r0
   15998:	mov	fp, r1
   1599c:	ldm	lr!, {r0, r1, r2, r3}
   159a0:	sub	sp, sp, #92	; 0x5c
   159a4:	add	ip, sp, #40	; 0x28
   159a8:	lsr	r7, r4, #5
   159ac:	stmia	ip!, {r0, r1, r2, r3}
   159b0:	add	r6, sp, #48	; 0x30
   159b4:	ldm	lr!, {r0, r1, r2, r3}
   159b8:	and	r4, r4, #31
   159bc:	ldr	r5, [pc, #392]	; 15b4c <__assert_fail@plt+0x4a48>
   159c0:	stmia	ip!, {r0, r1, r2, r3}
   159c4:	ldm	lr, {r0, r1, r2, r3}
   159c8:	stm	ip, {r0, r1, r2, r3}
   159cc:	ldr	r2, [r6, r7, lsl #2]
   159d0:	lsr	r3, r2, r4
   159d4:	eor	r3, r3, #1
   159d8:	and	r3, r3, #1
   159dc:	eor	r4, r2, r3, lsl r4
   159e0:	str	r4, [r6, r7, lsl #2]
   159e4:	bl	10ff0 <__errno_location@plt>
   159e8:	ldr	r2, [r5, #4]
   159ec:	ldr	r4, [r5]
   159f0:	cmp	r2, #0
   159f4:	ldr	r3, [r0]
   159f8:	mov	r8, r0
   159fc:	str	r3, [sp, #28]
   15a00:	bgt	15a5c <__assert_fail@plt+0x4958>
   15a04:	add	r7, r5, #8
   15a08:	cmp	r4, r7
   15a0c:	str	r2, [sp, #36]	; 0x24
   15a10:	beq	15b18 <__assert_fail@plt+0x4a14>
   15a14:	mov	r3, #8
   15a18:	mov	r0, r4
   15a1c:	str	r3, [sp]
   15a20:	rsb	r2, r2, #1
   15a24:	mvn	r3, #-2147483648	; 0x80000000
   15a28:	add	r1, sp, #36	; 0x24
   15a2c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15a30:	mov	r4, r0
   15a34:	str	r0, [r5]
   15a38:	ldr	r0, [r5, #4]
   15a3c:	ldr	r2, [sp, #36]	; 0x24
   15a40:	mov	r1, #0
   15a44:	sub	r2, r2, r0
   15a48:	add	r0, r4, r0, lsl #3
   15a4c:	lsl	r2, r2, #3
   15a50:	bl	11020 <memset@plt>
   15a54:	ldr	r3, [sp, #36]	; 0x24
   15a58:	str	r3, [r5, #4]
   15a5c:	ldr	r7, [sp, #44]	; 0x2c
   15a60:	ldr	r9, [r4]
   15a64:	ldr	r5, [r4, #4]
   15a68:	ldr	r2, [sp, #80]	; 0x50
   15a6c:	ldr	r3, [sp, #40]	; 0x28
   15a70:	ldr	ip, [sp, #84]	; 0x54
   15a74:	orr	r7, r7, #1
   15a78:	str	r2, [sp, #12]
   15a7c:	str	r3, [sp]
   15a80:	str	r7, [sp, #4]
   15a84:	str	r6, [sp, #8]
   15a88:	mov	r1, r9
   15a8c:	mov	r0, r5
   15a90:	str	ip, [sp, #16]
   15a94:	mov	r3, fp
   15a98:	mov	r2, sl
   15a9c:	bl	1327c <__assert_fail@plt+0x2178>
   15aa0:	cmp	r9, r0
   15aa4:	bhi	15b04 <__assert_fail@plt+0x4a00>
   15aa8:	ldr	r3, [pc, #160]	; 15b50 <__assert_fail@plt+0x4a4c>
   15aac:	add	r9, r0, #1
   15ab0:	cmp	r5, r3
   15ab4:	str	r9, [r4]
   15ab8:	beq	15ac4 <__assert_fail@plt+0x49c0>
   15abc:	mov	r0, r5
   15ac0:	bl	11fcc <__assert_fail@plt+0xec8>
   15ac4:	mov	r0, r9
   15ac8:	bl	17b64 <__assert_fail@plt+0x6a60>
   15acc:	ldr	ip, [sp, #84]	; 0x54
   15ad0:	ldr	lr, [sp, #40]	; 0x28
   15ad4:	mov	r3, fp
   15ad8:	mov	r2, sl
   15adc:	mov	r1, r9
   15ae0:	str	r0, [r4, #4]
   15ae4:	ldr	r4, [sp, #80]	; 0x50
   15ae8:	str	r6, [sp, #8]
   15aec:	str	r7, [sp, #4]
   15af0:	str	ip, [sp, #16]
   15af4:	str	r4, [sp, #12]
   15af8:	str	lr, [sp]
   15afc:	mov	r5, r0
   15b00:	bl	1327c <__assert_fail@plt+0x2178>
   15b04:	ldr	r3, [sp, #28]
   15b08:	mov	r0, r5
   15b0c:	str	r3, [r8]
   15b10:	add	sp, sp, #92	; 0x5c
   15b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b18:	mov	r3, #8
   15b1c:	str	r3, [sp]
   15b20:	add	r1, sp, #36	; 0x24
   15b24:	rsb	r2, r2, #1
   15b28:	mvn	r3, #-2147483648	; 0x80000000
   15b2c:	mov	r0, #0
   15b30:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15b34:	mov	r4, r0
   15b38:	ldm	r7, {r0, r1}
   15b3c:	str	r4, [r5]
   15b40:	stm	r4, {r0, r1}
   15b44:	b	15a38 <__assert_fail@plt+0x4934>
   15b48:	muleq	r2, r0, r1
   15b4c:	andeq	fp, r2, r0, lsl r1
   15b50:	andeq	fp, r2, r0, asr #3
   15b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b58:	mov	r4, r1
   15b5c:	ldr	lr, [pc, #420]	; 15d08 <__assert_fail@plt+0x4c04>
   15b60:	mov	r6, r0
   15b64:	sub	sp, sp, #84	; 0x54
   15b68:	ldm	lr!, {r0, r1, r2, r3}
   15b6c:	add	ip, sp, #32
   15b70:	lsr	r8, r4, #5
   15b74:	add	r5, sp, #40	; 0x28
   15b78:	stmia	ip!, {r0, r1, r2, r3}
   15b7c:	and	r4, r4, #31
   15b80:	ldm	lr!, {r0, r1, r2, r3}
   15b84:	ldr	r7, [pc, #384]	; 15d0c <__assert_fail@plt+0x4c08>
   15b88:	stmia	ip!, {r0, r1, r2, r3}
   15b8c:	ldm	lr, {r0, r1, r2, r3}
   15b90:	stm	ip, {r0, r1, r2, r3}
   15b94:	ldr	r2, [r5, r8, lsl #2]
   15b98:	lsr	r3, r2, r4
   15b9c:	eor	r3, r3, #1
   15ba0:	and	r3, r3, #1
   15ba4:	eor	r4, r2, r3, lsl r4
   15ba8:	str	r4, [r5, r8, lsl #2]
   15bac:	bl	10ff0 <__errno_location@plt>
   15bb0:	ldr	r2, [r7, #4]
   15bb4:	ldr	r4, [r7]
   15bb8:	cmp	r2, #0
   15bbc:	mov	r9, r0
   15bc0:	ldr	sl, [r0]
   15bc4:	bgt	15c20 <__assert_fail@plt+0x4b1c>
   15bc8:	add	r8, r7, #8
   15bcc:	cmp	r4, r8
   15bd0:	str	r2, [sp, #28]
   15bd4:	beq	15cd8 <__assert_fail@plt+0x4bd4>
   15bd8:	mov	r3, #8
   15bdc:	mov	r0, r4
   15be0:	str	r3, [sp]
   15be4:	rsb	r2, r2, #1
   15be8:	mvn	r3, #-2147483648	; 0x80000000
   15bec:	add	r1, sp, #28
   15bf0:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15bf4:	mov	r4, r0
   15bf8:	str	r0, [r7]
   15bfc:	ldr	r0, [r7, #4]
   15c00:	ldr	r2, [sp, #28]
   15c04:	mov	r1, #0
   15c08:	sub	r2, r2, r0
   15c0c:	add	r0, r4, r0, lsl #3
   15c10:	lsl	r2, r2, #3
   15c14:	bl	11020 <memset@plt>
   15c18:	ldr	r3, [sp, #28]
   15c1c:	str	r3, [r7, #4]
   15c20:	ldr	r8, [sp, #36]	; 0x24
   15c24:	ldr	fp, [r4]
   15c28:	ldr	r7, [r4, #4]
   15c2c:	ldr	r2, [sp, #72]	; 0x48
   15c30:	ldr	r3, [sp, #32]
   15c34:	ldr	ip, [sp, #76]	; 0x4c
   15c38:	orr	r8, r8, #1
   15c3c:	str	r2, [sp, #12]
   15c40:	str	r3, [sp]
   15c44:	str	r8, [sp, #4]
   15c48:	str	r5, [sp, #8]
   15c4c:	mov	r1, fp
   15c50:	mov	r0, r7
   15c54:	str	ip, [sp, #16]
   15c58:	mvn	r3, #0
   15c5c:	mov	r2, r6
   15c60:	bl	1327c <__assert_fail@plt+0x2178>
   15c64:	cmp	fp, r0
   15c68:	bhi	15cc8 <__assert_fail@plt+0x4bc4>
   15c6c:	ldr	r3, [pc, #156]	; 15d10 <__assert_fail@plt+0x4c0c>
   15c70:	add	fp, r0, #1
   15c74:	cmp	r7, r3
   15c78:	str	fp, [r4]
   15c7c:	beq	15c88 <__assert_fail@plt+0x4b84>
   15c80:	mov	r0, r7
   15c84:	bl	11fcc <__assert_fail@plt+0xec8>
   15c88:	mov	r0, fp
   15c8c:	bl	17b64 <__assert_fail@plt+0x6a60>
   15c90:	ldr	lr, [sp, #76]	; 0x4c
   15c94:	ldr	r3, [sp, #32]
   15c98:	ldr	ip, [sp, #72]	; 0x48
   15c9c:	mov	r2, r6
   15ca0:	mov	r1, fp
   15ca4:	str	r0, [r4, #4]
   15ca8:	str	r3, [sp]
   15cac:	str	r5, [sp, #8]
   15cb0:	str	r8, [sp, #4]
   15cb4:	str	lr, [sp, #16]
   15cb8:	str	ip, [sp, #12]
   15cbc:	mvn	r3, #0
   15cc0:	mov	r7, r0
   15cc4:	bl	1327c <__assert_fail@plt+0x2178>
   15cc8:	mov	r0, r7
   15ccc:	str	sl, [r9]
   15cd0:	add	sp, sp, #84	; 0x54
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	mov	r3, #8
   15cdc:	str	r3, [sp]
   15ce0:	add	r1, sp, #28
   15ce4:	rsb	r2, r2, #1
   15ce8:	mvn	r3, #-2147483648	; 0x80000000
   15cec:	mov	r0, #0
   15cf0:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15cf4:	mov	r4, r0
   15cf8:	ldm	r8, {r0, r1}
   15cfc:	str	r4, [r7]
   15d00:	stm	r4, {r0, r1}
   15d04:	b	15bfc <__assert_fail@plt+0x4af8>
   15d08:	muleq	r2, r0, r1
   15d0c:	andeq	fp, r2, r0, lsl r1
   15d10:	andeq	fp, r2, r0, asr #3
   15d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d18:	mov	r6, r0
   15d1c:	ldr	lr, [pc, #404]	; 15eb8 <__assert_fail@plt+0x4db4>
   15d20:	sub	sp, sp, #84	; 0x54
   15d24:	add	ip, sp, #32
   15d28:	ldm	lr!, {r0, r1, r2, r3}
   15d2c:	ldr	r5, [pc, #392]	; 15ebc <__assert_fail@plt+0x4db8>
   15d30:	stmia	ip!, {r0, r1, r2, r3}
   15d34:	ldm	lr!, {r0, r1, r2, r3}
   15d38:	ldr	r4, [sp, #44]	; 0x2c
   15d3c:	stmia	ip!, {r0, r1, r2, r3}
   15d40:	ldm	lr, {r0, r1, r2, r3}
   15d44:	mvn	lr, r4
   15d48:	and	lr, lr, #67108864	; 0x4000000
   15d4c:	eor	lr, lr, r4
   15d50:	stm	ip, {r0, r1, r2, r3}
   15d54:	str	lr, [sp, #44]	; 0x2c
   15d58:	bl	10ff0 <__errno_location@plt>
   15d5c:	ldr	r2, [r5, #4]
   15d60:	ldr	r4, [r5]
   15d64:	cmp	r2, #0
   15d68:	mov	r8, r0
   15d6c:	ldr	sl, [r0]
   15d70:	bgt	15dcc <__assert_fail@plt+0x4cc8>
   15d74:	add	r7, r5, #8
   15d78:	cmp	r4, r7
   15d7c:	str	r2, [sp, #28]
   15d80:	beq	15e88 <__assert_fail@plt+0x4d84>
   15d84:	mov	r3, #8
   15d88:	mov	r0, r4
   15d8c:	str	r3, [sp]
   15d90:	rsb	r2, r2, #1
   15d94:	mvn	r3, #-2147483648	; 0x80000000
   15d98:	add	r1, sp, #28
   15d9c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15da0:	mov	r4, r0
   15da4:	str	r0, [r5]
   15da8:	ldr	r0, [r5, #4]
   15dac:	ldr	r2, [sp, #28]
   15db0:	mov	r1, #0
   15db4:	sub	r2, r2, r0
   15db8:	add	r0, r4, r0, lsl #3
   15dbc:	lsl	r2, r2, #3
   15dc0:	bl	11020 <memset@plt>
   15dc4:	ldr	r3, [sp, #28]
   15dc8:	str	r3, [r5, #4]
   15dcc:	ldr	r7, [sp, #36]	; 0x24
   15dd0:	ldr	r9, [r4]
   15dd4:	ldr	r5, [r4, #4]
   15dd8:	ldr	r2, [sp, #72]	; 0x48
   15ddc:	ldr	r3, [sp, #32]
   15de0:	ldr	ip, [sp, #76]	; 0x4c
   15de4:	orr	r7, r7, #1
   15de8:	add	fp, sp, #40	; 0x28
   15dec:	str	r2, [sp, #12]
   15df0:	str	r3, [sp]
   15df4:	str	r7, [sp, #4]
   15df8:	mov	r1, r9
   15dfc:	mov	r0, r5
   15e00:	str	ip, [sp, #16]
   15e04:	str	fp, [sp, #8]
   15e08:	mvn	r3, #0
   15e0c:	mov	r2, r6
   15e10:	bl	1327c <__assert_fail@plt+0x2178>
   15e14:	cmp	r9, r0
   15e18:	bhi	15e78 <__assert_fail@plt+0x4d74>
   15e1c:	ldr	r3, [pc, #156]	; 15ec0 <__assert_fail@plt+0x4dbc>
   15e20:	add	r9, r0, #1
   15e24:	cmp	r5, r3
   15e28:	str	r9, [r4]
   15e2c:	beq	15e38 <__assert_fail@plt+0x4d34>
   15e30:	mov	r0, r5
   15e34:	bl	11fcc <__assert_fail@plt+0xec8>
   15e38:	mov	r0, r9
   15e3c:	bl	17b64 <__assert_fail@plt+0x6a60>
   15e40:	ldr	lr, [sp, #76]	; 0x4c
   15e44:	ldr	r3, [sp, #32]
   15e48:	ldr	ip, [sp, #72]	; 0x48
   15e4c:	mov	r2, r6
   15e50:	mov	r1, r9
   15e54:	str	r0, [r4, #4]
   15e58:	str	r3, [sp]
   15e5c:	str	fp, [sp, #8]
   15e60:	str	r7, [sp, #4]
   15e64:	str	lr, [sp, #16]
   15e68:	str	ip, [sp, #12]
   15e6c:	mvn	r3, #0
   15e70:	mov	r5, r0
   15e74:	bl	1327c <__assert_fail@plt+0x2178>
   15e78:	mov	r0, r5
   15e7c:	str	sl, [r8]
   15e80:	add	sp, sp, #84	; 0x54
   15e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e88:	mov	r3, #8
   15e8c:	str	r3, [sp]
   15e90:	add	r1, sp, #28
   15e94:	rsb	r2, r2, #1
   15e98:	mvn	r3, #-2147483648	; 0x80000000
   15e9c:	mov	r0, #0
   15ea0:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15ea4:	mov	r4, r0
   15ea8:	ldm	r7, {r0, r1}
   15eac:	str	r4, [r5]
   15eb0:	stm	r4, {r0, r1}
   15eb4:	b	15da8 <__assert_fail@plt+0x4ca4>
   15eb8:	muleq	r2, r0, r1
   15ebc:	andeq	fp, r2, r0, lsl r1
   15ec0:	andeq	fp, r2, r0, asr #3
   15ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ec8:	mov	r9, r0
   15ecc:	ldr	lr, [pc, #416]	; 16074 <__assert_fail@plt+0x4f70>
   15ed0:	mov	sl, r1
   15ed4:	sub	sp, sp, #92	; 0x5c
   15ed8:	ldm	lr!, {r0, r1, r2, r3}
   15edc:	add	ip, sp, #40	; 0x28
   15ee0:	ldr	r5, [pc, #400]	; 16078 <__assert_fail@plt+0x4f74>
   15ee4:	stmia	ip!, {r0, r1, r2, r3}
   15ee8:	ldm	lr!, {r0, r1, r2, r3}
   15eec:	ldr	r4, [sp, #52]	; 0x34
   15ef0:	stmia	ip!, {r0, r1, r2, r3}
   15ef4:	ldm	lr, {r0, r1, r2, r3}
   15ef8:	mvn	lr, r4
   15efc:	and	lr, lr, #67108864	; 0x4000000
   15f00:	eor	lr, lr, r4
   15f04:	stm	ip, {r0, r1, r2, r3}
   15f08:	str	lr, [sp, #52]	; 0x34
   15f0c:	bl	10ff0 <__errno_location@plt>
   15f10:	ldr	r2, [r5, #4]
   15f14:	ldr	r4, [r5]
   15f18:	cmp	r2, #0
   15f1c:	ldr	r3, [r0]
   15f20:	mov	r7, r0
   15f24:	str	r3, [sp, #28]
   15f28:	bgt	15f84 <__assert_fail@plt+0x4e80>
   15f2c:	add	r6, r5, #8
   15f30:	cmp	r4, r6
   15f34:	str	r2, [sp, #36]	; 0x24
   15f38:	beq	16044 <__assert_fail@plt+0x4f40>
   15f3c:	mov	r3, #8
   15f40:	mov	r0, r4
   15f44:	str	r3, [sp]
   15f48:	rsb	r2, r2, #1
   15f4c:	mvn	r3, #-2147483648	; 0x80000000
   15f50:	add	r1, sp, #36	; 0x24
   15f54:	bl	17d80 <__assert_fail@plt+0x6c7c>
   15f58:	mov	r4, r0
   15f5c:	str	r0, [r5]
   15f60:	ldr	r0, [r5, #4]
   15f64:	ldr	r2, [sp, #36]	; 0x24
   15f68:	mov	r1, #0
   15f6c:	sub	r2, r2, r0
   15f70:	add	r0, r4, r0, lsl #3
   15f74:	lsl	r2, r2, #3
   15f78:	bl	11020 <memset@plt>
   15f7c:	ldr	r3, [sp, #36]	; 0x24
   15f80:	str	r3, [r5, #4]
   15f84:	ldr	r6, [sp, #44]	; 0x2c
   15f88:	ldr	r8, [r4]
   15f8c:	ldr	r5, [r4, #4]
   15f90:	ldr	r2, [sp, #80]	; 0x50
   15f94:	ldr	r3, [sp, #40]	; 0x28
   15f98:	ldr	ip, [sp, #84]	; 0x54
   15f9c:	orr	r6, r6, #1
   15fa0:	add	fp, sp, #48	; 0x30
   15fa4:	str	r2, [sp, #12]
   15fa8:	str	r3, [sp]
   15fac:	str	r6, [sp, #4]
   15fb0:	mov	r1, r8
   15fb4:	mov	r0, r5
   15fb8:	str	ip, [sp, #16]
   15fbc:	str	fp, [sp, #8]
   15fc0:	mov	r3, sl
   15fc4:	mov	r2, r9
   15fc8:	bl	1327c <__assert_fail@plt+0x2178>
   15fcc:	cmp	r8, r0
   15fd0:	bhi	16030 <__assert_fail@plt+0x4f2c>
   15fd4:	ldr	r3, [pc, #160]	; 1607c <__assert_fail@plt+0x4f78>
   15fd8:	add	r8, r0, #1
   15fdc:	cmp	r5, r3
   15fe0:	str	r8, [r4]
   15fe4:	beq	15ff0 <__assert_fail@plt+0x4eec>
   15fe8:	mov	r0, r5
   15fec:	bl	11fcc <__assert_fail@plt+0xec8>
   15ff0:	mov	r0, r8
   15ff4:	bl	17b64 <__assert_fail@plt+0x6a60>
   15ff8:	ldr	ip, [sp, #84]	; 0x54
   15ffc:	ldr	lr, [sp, #40]	; 0x28
   16000:	mov	r3, sl
   16004:	mov	r2, r9
   16008:	mov	r1, r8
   1600c:	str	r0, [r4, #4]
   16010:	ldr	r4, [sp, #80]	; 0x50
   16014:	str	fp, [sp, #8]
   16018:	str	r6, [sp, #4]
   1601c:	str	ip, [sp, #16]
   16020:	str	r4, [sp, #12]
   16024:	str	lr, [sp]
   16028:	mov	r5, r0
   1602c:	bl	1327c <__assert_fail@plt+0x2178>
   16030:	ldr	r3, [sp, #28]
   16034:	mov	r0, r5
   16038:	str	r3, [r7]
   1603c:	add	sp, sp, #92	; 0x5c
   16040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16044:	mov	r3, #8
   16048:	str	r3, [sp]
   1604c:	add	r1, sp, #36	; 0x24
   16050:	rsb	r2, r2, #1
   16054:	mvn	r3, #-2147483648	; 0x80000000
   16058:	mov	r0, #0
   1605c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16060:	mov	r4, r0
   16064:	ldm	r6, {r0, r1}
   16068:	str	r4, [r5]
   1606c:	stm	r4, {r0, r1}
   16070:	b	15f60 <__assert_fail@plt+0x4e5c>
   16074:	muleq	r2, r0, r1
   16078:	andeq	fp, r2, r0, lsl r1
   1607c:	andeq	fp, r2, r0, asr #3
   16080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16084:	sub	sp, sp, #180	; 0xb4
   16088:	mov	r6, r1
   1608c:	mov	r4, r0
   16090:	mov	r9, r2
   16094:	add	r0, sp, #80	; 0x50
   16098:	mov	r2, #48	; 0x30
   1609c:	mov	r1, #0
   160a0:	bl	11020 <memset@plt>
   160a4:	cmp	r6, #10
   160a8:	beq	16288 <__assert_fail@plt+0x5184>
   160ac:	add	r5, sp, #80	; 0x50
   160b0:	str	r6, [sp, #80]	; 0x50
   160b4:	ldm	r5!, {r0, r1, r2, r3}
   160b8:	add	ip, sp, #128	; 0x80
   160bc:	mov	r7, ip
   160c0:	add	lr, sp, #32
   160c4:	stmia	ip!, {r0, r1, r2, r3}
   160c8:	mov	r8, #67108864	; 0x4000000
   160cc:	ldm	r5!, {r0, r1, r2, r3}
   160d0:	ldr	r6, [pc, #436]	; 1628c <__assert_fail@plt+0x5188>
   160d4:	stmia	ip!, {r0, r1, r2, r3}
   160d8:	ldm	r5, {r0, r1, r2, r3}
   160dc:	stm	ip, {r0, r1, r2, r3}
   160e0:	ldm	r7!, {r0, r1, r2, r3}
   160e4:	stmia	lr!, {r0, r1, r2, r3}
   160e8:	ldm	r7!, {r0, r1, r2, r3}
   160ec:	str	r8, [sp, #44]	; 0x2c
   160f0:	stmia	lr!, {r0, r1, r2, r3}
   160f4:	ldm	ip, {r0, r1, r2, r3}
   160f8:	stm	lr, {r0, r1, r2, r3}
   160fc:	bl	10ff0 <__errno_location@plt>
   16100:	cmn	r4, #-2147483647	; 0x80000001
   16104:	ldr	r5, [r6]
   16108:	mov	r7, r0
   1610c:	movne	r0, #0
   16110:	moveq	r0, #1
   16114:	ldr	r3, [r7]
   16118:	orrs	r0, r0, r4, lsr #31
   1611c:	str	r3, [sp, #24]
   16120:	bne	16288 <__assert_fail@plt+0x5184>
   16124:	ldr	r2, [r6, #4]
   16128:	cmp	r4, r2
   1612c:	blt	1618c <__assert_fail@plt+0x5088>
   16130:	add	r8, r6, #8
   16134:	cmp	r5, r8
   16138:	str	r2, [sp, #80]	; 0x50
   1613c:	beq	16258 <__assert_fail@plt+0x5154>
   16140:	mov	r3, #8
   16144:	sub	r2, r4, r2
   16148:	mov	r0, r5
   1614c:	str	r3, [sp]
   16150:	add	r2, r2, #1
   16154:	add	r1, sp, #80	; 0x50
   16158:	mvn	r3, #-2147483648	; 0x80000000
   1615c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16160:	mov	r5, r0
   16164:	str	r0, [r6]
   16168:	ldr	r0, [r6, #4]
   1616c:	ldr	r2, [sp, #80]	; 0x50
   16170:	mov	r1, #0
   16174:	sub	r2, r2, r0
   16178:	add	r0, r5, r0, lsl #3
   1617c:	lsl	r2, r2, #3
   16180:	bl	11020 <memset@plt>
   16184:	ldr	r3, [sp, #80]	; 0x50
   16188:	str	r3, [r6, #4]
   1618c:	add	fp, r5, r4, lsl #3
   16190:	ldr	r1, [sp, #36]	; 0x24
   16194:	ldr	r8, [r5, r4, lsl #3]
   16198:	ldr	r6, [fp, #4]
   1619c:	ldr	r2, [sp, #72]	; 0x48
   161a0:	ldr	r3, [sp, #32]
   161a4:	ldr	ip, [sp, #76]	; 0x4c
   161a8:	orr	r1, r1, #1
   161ac:	add	sl, sp, #40	; 0x28
   161b0:	str	r1, [sp, #28]
   161b4:	str	r1, [sp, #4]
   161b8:	str	r2, [sp, #12]
   161bc:	str	r3, [sp]
   161c0:	mov	r0, r6
   161c4:	mov	r1, r8
   161c8:	str	ip, [sp, #16]
   161cc:	str	sl, [sp, #8]
   161d0:	mvn	r3, #0
   161d4:	mov	r2, r9
   161d8:	bl	1327c <__assert_fail@plt+0x2178>
   161dc:	cmp	r8, r0
   161e0:	bhi	16244 <__assert_fail@plt+0x5140>
   161e4:	ldr	r3, [pc, #164]	; 16290 <__assert_fail@plt+0x518c>
   161e8:	add	r8, r0, #1
   161ec:	cmp	r6, r3
   161f0:	str	r8, [r5, r4, lsl #3]
   161f4:	beq	16200 <__assert_fail@plt+0x50fc>
   161f8:	mov	r0, r6
   161fc:	bl	11fcc <__assert_fail@plt+0xec8>
   16200:	mov	r0, r8
   16204:	bl	17b64 <__assert_fail@plt+0x6a60>
   16208:	ldr	lr, [sp, #76]	; 0x4c
   1620c:	ldr	r3, [sp, #32]
   16210:	ldr	ip, [sp, #72]	; 0x48
   16214:	ldr	r4, [sp, #28]
   16218:	mov	r2, r9
   1621c:	mov	r1, r8
   16220:	str	r0, [fp, #4]
   16224:	str	r3, [sp]
   16228:	str	sl, [sp, #8]
   1622c:	str	r4, [sp, #4]
   16230:	str	lr, [sp, #16]
   16234:	str	ip, [sp, #12]
   16238:	mvn	r3, #0
   1623c:	mov	r6, r0
   16240:	bl	1327c <__assert_fail@plt+0x2178>
   16244:	ldr	r3, [sp, #24]
   16248:	mov	r0, r6
   1624c:	str	r3, [r7]
   16250:	add	sp, sp, #180	; 0xb4
   16254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16258:	mov	r3, #8
   1625c:	sub	r2, r4, r2
   16260:	add	r1, sp, #80	; 0x50
   16264:	str	r3, [sp]
   16268:	add	r2, r2, #1
   1626c:	mvn	r3, #-2147483648	; 0x80000000
   16270:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16274:	mov	r5, r0
   16278:	ldm	r8, {r0, r1}
   1627c:	str	r5, [r6]
   16280:	stm	r5, {r0, r1}
   16284:	b	16168 <__assert_fail@plt+0x5064>
   16288:	bl	110ec <abort@plt>
   1628c:	andeq	fp, r2, r0, lsl r1
   16290:	andeq	fp, r2, r0, asr #3
   16294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16298:	mov	r7, r1
   1629c:	ldr	lr, [pc, #492]	; 16490 <__assert_fail@plt+0x538c>
   162a0:	mov	r8, r2
   162a4:	mov	r4, r0
   162a8:	mov	fp, r3
   162ac:	ldm	lr!, {r0, r1, r2, r3}
   162b0:	sub	sp, sp, #100	; 0x64
   162b4:	add	ip, sp, #48	; 0x30
   162b8:	mov	sl, #10
   162bc:	stmia	ip!, {r0, r1, r2, r3}
   162c0:	cmp	r8, #0
   162c4:	cmpne	r7, #0
   162c8:	ldm	lr!, {r0, r1, r2, r3}
   162cc:	str	sl, [sp, #48]	; 0x30
   162d0:	stmia	ip!, {r0, r1, r2, r3}
   162d4:	ldm	lr, {r0, r1, r2, r3}
   162d8:	stm	ip, {r0, r1, r2, r3}
   162dc:	beq	1648c <__assert_fail@plt+0x5388>
   162e0:	str	r7, [sp, #88]	; 0x58
   162e4:	str	r8, [sp, #92]	; 0x5c
   162e8:	bl	10ff0 <__errno_location@plt>
   162ec:	ldr	r6, [pc, #416]	; 16494 <__assert_fail@plt+0x5390>
   162f0:	cmn	r4, #-2147483647	; 0x80000001
   162f4:	ldr	r5, [r6]
   162f8:	mov	r9, r0
   162fc:	movne	r0, #0
   16300:	moveq	r0, #1
   16304:	ldr	r3, [r9]
   16308:	orrs	r0, r0, r4, lsr #31
   1630c:	str	r3, [sp, #28]
   16310:	bne	1648c <__assert_fail@plt+0x5388>
   16314:	ldr	r2, [r6, #4]
   16318:	cmp	r4, r2
   1631c:	movlt	r3, sl
   16320:	blt	1638c <__assert_fail@plt+0x5288>
   16324:	add	r7, r6, #8
   16328:	cmp	r5, r7
   1632c:	str	r2, [sp, #44]	; 0x2c
   16330:	beq	1645c <__assert_fail@plt+0x5358>
   16334:	mov	r3, #8
   16338:	sub	r2, r4, r2
   1633c:	mov	r0, r5
   16340:	str	r3, [sp]
   16344:	add	r2, r2, #1
   16348:	mvn	r3, #-2147483648	; 0x80000000
   1634c:	add	r1, sp, #44	; 0x2c
   16350:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16354:	mov	r5, r0
   16358:	str	r0, [r6]
   1635c:	ldr	r0, [r6, #4]
   16360:	ldr	r2, [sp, #44]	; 0x2c
   16364:	mov	r1, #0
   16368:	sub	r2, r2, r0
   1636c:	add	r0, r5, r0, lsl #3
   16370:	lsl	r2, r2, #3
   16374:	bl	11020 <memset@plt>
   16378:	ldr	r3, [sp, #48]	; 0x30
   1637c:	ldr	r7, [sp, #88]	; 0x58
   16380:	ldr	r8, [sp, #92]	; 0x5c
   16384:	ldr	r2, [sp, #44]	; 0x2c
   16388:	str	r2, [r6, #4]
   1638c:	add	r2, r5, r4, lsl #3
   16390:	mov	r1, r2
   16394:	str	r2, [sp, #32]
   16398:	ldr	r2, [sp, #52]	; 0x34
   1639c:	ldr	r6, [r1, #4]
   163a0:	ldr	sl, [r5, r4, lsl #3]
   163a4:	orr	r2, r2, #1
   163a8:	str	r3, [sp]
   163ac:	add	r3, sp, #56	; 0x38
   163b0:	str	r2, [sp, #36]	; 0x24
   163b4:	str	r2, [sp, #4]
   163b8:	str	r3, [sp, #8]
   163bc:	mov	r0, r6
   163c0:	str	r8, [sp, #16]
   163c4:	str	r7, [sp, #12]
   163c8:	mov	r1, sl
   163cc:	mvn	r3, #0
   163d0:	mov	r2, fp
   163d4:	bl	1327c <__assert_fail@plt+0x2178>
   163d8:	cmp	sl, r0
   163dc:	bhi	16448 <__assert_fail@plt+0x5344>
   163e0:	ldr	r3, [pc, #176]	; 16498 <__assert_fail@plt+0x5394>
   163e4:	add	r7, r0, #1
   163e8:	cmp	r6, r3
   163ec:	str	r7, [r5, r4, lsl #3]
   163f0:	beq	163fc <__assert_fail@plt+0x52f8>
   163f4:	mov	r0, r6
   163f8:	bl	11fcc <__assert_fail@plt+0xec8>
   163fc:	mov	r0, r7
   16400:	bl	17b64 <__assert_fail@plt+0x6a60>
   16404:	ldr	r3, [sp, #32]
   16408:	ldr	lr, [sp, #92]	; 0x5c
   1640c:	ldr	ip, [sp, #88]	; 0x58
   16410:	ldr	r4, [sp, #36]	; 0x24
   16414:	mov	r2, fp
   16418:	mov	r1, r7
   1641c:	str	r0, [r3, #4]
   16420:	add	r3, sp, #56	; 0x38
   16424:	str	r3, [sp, #8]
   16428:	ldr	r3, [sp, #48]	; 0x30
   1642c:	str	r4, [sp, #4]
   16430:	str	r3, [sp]
   16434:	str	lr, [sp, #16]
   16438:	str	ip, [sp, #12]
   1643c:	mvn	r3, #0
   16440:	mov	r6, r0
   16444:	bl	1327c <__assert_fail@plt+0x2178>
   16448:	ldr	r3, [sp, #28]
   1644c:	mov	r0, r6
   16450:	str	r3, [r9]
   16454:	add	sp, sp, #100	; 0x64
   16458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1645c:	mov	r3, #8
   16460:	sub	r2, r4, r2
   16464:	str	r3, [sp]
   16468:	add	r1, sp, #44	; 0x2c
   1646c:	add	r2, r2, #1
   16470:	mvn	r3, #-2147483648	; 0x80000000
   16474:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16478:	mov	r5, r0
   1647c:	ldm	r7, {r0, r1}
   16480:	str	r5, [r6]
   16484:	stm	r5, {r0, r1}
   16488:	b	1635c <__assert_fail@plt+0x5258>
   1648c:	bl	110ec <abort@plt>
   16490:	muleq	r2, r0, r1
   16494:	andeq	fp, r2, r0, lsl r1
   16498:	andeq	fp, r2, r0, asr #3
   1649c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164a0:	mov	r7, r1
   164a4:	ldr	lr, [pc, #492]	; 16698 <__assert_fail@plt+0x5594>
   164a8:	mov	r8, r2
   164ac:	mov	r4, r0
   164b0:	mov	fp, r3
   164b4:	ldm	lr!, {r0, r1, r2, r3}
   164b8:	sub	sp, sp, #100	; 0x64
   164bc:	add	ip, sp, #48	; 0x30
   164c0:	mov	sl, #10
   164c4:	stmia	ip!, {r0, r1, r2, r3}
   164c8:	cmp	r8, #0
   164cc:	cmpne	r7, #0
   164d0:	ldm	lr!, {r0, r1, r2, r3}
   164d4:	str	sl, [sp, #48]	; 0x30
   164d8:	stmia	ip!, {r0, r1, r2, r3}
   164dc:	ldm	lr, {r0, r1, r2, r3}
   164e0:	stm	ip, {r0, r1, r2, r3}
   164e4:	beq	16694 <__assert_fail@plt+0x5590>
   164e8:	str	r7, [sp, #88]	; 0x58
   164ec:	str	r8, [sp, #92]	; 0x5c
   164f0:	bl	10ff0 <__errno_location@plt>
   164f4:	ldr	r6, [pc, #416]	; 1669c <__assert_fail@plt+0x5598>
   164f8:	cmn	r4, #-2147483647	; 0x80000001
   164fc:	ldr	r5, [r6]
   16500:	mov	r9, r0
   16504:	movne	r0, #0
   16508:	moveq	r0, #1
   1650c:	ldr	r3, [r9]
   16510:	orrs	r0, r0, r4, lsr #31
   16514:	str	r3, [sp, #28]
   16518:	bne	16694 <__assert_fail@plt+0x5590>
   1651c:	ldr	r2, [r6, #4]
   16520:	cmp	r4, r2
   16524:	movlt	r3, sl
   16528:	blt	16594 <__assert_fail@plt+0x5490>
   1652c:	add	r7, r6, #8
   16530:	cmp	r5, r7
   16534:	str	r2, [sp, #44]	; 0x2c
   16538:	beq	16664 <__assert_fail@plt+0x5560>
   1653c:	mov	r3, #8
   16540:	sub	r2, r4, r2
   16544:	mov	r0, r5
   16548:	str	r3, [sp]
   1654c:	add	r2, r2, #1
   16550:	mvn	r3, #-2147483648	; 0x80000000
   16554:	add	r1, sp, #44	; 0x2c
   16558:	bl	17d80 <__assert_fail@plt+0x6c7c>
   1655c:	mov	r5, r0
   16560:	str	r0, [r6]
   16564:	ldr	r0, [r6, #4]
   16568:	ldr	r2, [sp, #44]	; 0x2c
   1656c:	mov	r1, #0
   16570:	sub	r2, r2, r0
   16574:	add	r0, r5, r0, lsl #3
   16578:	lsl	r2, r2, #3
   1657c:	bl	11020 <memset@plt>
   16580:	ldr	r3, [sp, #48]	; 0x30
   16584:	ldr	r7, [sp, #88]	; 0x58
   16588:	ldr	r8, [sp, #92]	; 0x5c
   1658c:	ldr	r2, [sp, #44]	; 0x2c
   16590:	str	r2, [r6, #4]
   16594:	add	r2, r5, r4, lsl #3
   16598:	mov	r1, r2
   1659c:	str	r2, [sp, #32]
   165a0:	ldr	r2, [sp, #52]	; 0x34
   165a4:	ldr	r6, [r1, #4]
   165a8:	ldr	sl, [r5, r4, lsl #3]
   165ac:	orr	r2, r2, #1
   165b0:	str	r3, [sp]
   165b4:	add	r3, sp, #56	; 0x38
   165b8:	str	r2, [sp, #36]	; 0x24
   165bc:	str	r2, [sp, #4]
   165c0:	str	r3, [sp, #8]
   165c4:	mov	r0, r6
   165c8:	str	r8, [sp, #16]
   165cc:	str	r7, [sp, #12]
   165d0:	mov	r1, sl
   165d4:	ldr	r3, [sp, #136]	; 0x88
   165d8:	mov	r2, fp
   165dc:	bl	1327c <__assert_fail@plt+0x2178>
   165e0:	cmp	sl, r0
   165e4:	bhi	16650 <__assert_fail@plt+0x554c>
   165e8:	ldr	r3, [pc, #176]	; 166a0 <__assert_fail@plt+0x559c>
   165ec:	add	r7, r0, #1
   165f0:	cmp	r6, r3
   165f4:	str	r7, [r5, r4, lsl #3]
   165f8:	beq	16604 <__assert_fail@plt+0x5500>
   165fc:	mov	r0, r6
   16600:	bl	11fcc <__assert_fail@plt+0xec8>
   16604:	mov	r0, r7
   16608:	bl	17b64 <__assert_fail@plt+0x6a60>
   1660c:	ldr	r3, [sp, #32]
   16610:	ldr	lr, [sp, #92]	; 0x5c
   16614:	ldr	ip, [sp, #88]	; 0x58
   16618:	ldr	r4, [sp, #36]	; 0x24
   1661c:	mov	r2, fp
   16620:	mov	r1, r7
   16624:	str	r0, [r3, #4]
   16628:	add	r3, sp, #56	; 0x38
   1662c:	str	r3, [sp, #8]
   16630:	ldr	r3, [sp, #48]	; 0x30
   16634:	str	r4, [sp, #4]
   16638:	str	r3, [sp]
   1663c:	str	lr, [sp, #16]
   16640:	str	ip, [sp, #12]
   16644:	ldr	r3, [sp, #136]	; 0x88
   16648:	mov	r6, r0
   1664c:	bl	1327c <__assert_fail@plt+0x2178>
   16650:	ldr	r3, [sp, #28]
   16654:	mov	r0, r6
   16658:	str	r3, [r9]
   1665c:	add	sp, sp, #100	; 0x64
   16660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16664:	mov	r3, #8
   16668:	sub	r2, r4, r2
   1666c:	str	r3, [sp]
   16670:	add	r1, sp, #44	; 0x2c
   16674:	add	r2, r2, #1
   16678:	mvn	r3, #-2147483648	; 0x80000000
   1667c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16680:	mov	r5, r0
   16684:	ldm	r7, {r0, r1}
   16688:	str	r5, [r6]
   1668c:	stm	r5, {r0, r1}
   16690:	b	16564 <__assert_fail@plt+0x5460>
   16694:	bl	110ec <abort@plt>
   16698:	muleq	r2, r0, r1
   1669c:	andeq	fp, r2, r0, lsl r1
   166a0:	andeq	fp, r2, r0, asr #3
   166a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166a8:	mov	r5, r0
   166ac:	ldr	lr, [pc, #452]	; 16878 <__assert_fail@plt+0x5774>
   166b0:	mov	r6, r1
   166b4:	mov	sl, r2
   166b8:	ldm	lr!, {r0, r1, r2, r3}
   166bc:	sub	sp, sp, #92	; 0x5c
   166c0:	add	ip, sp, #40	; 0x28
   166c4:	cmp	r6, #0
   166c8:	cmpne	r5, #0
   166cc:	stmia	ip!, {r0, r1, r2, r3}
   166d0:	mov	r9, #10
   166d4:	ldm	lr!, {r0, r1, r2, r3}
   166d8:	moveq	fp, #1
   166dc:	movne	fp, #0
   166e0:	str	r9, [sp, #40]	; 0x28
   166e4:	stmia	ip!, {r0, r1, r2, r3}
   166e8:	ldm	lr, {r0, r1, r2, r3}
   166ec:	stm	ip, {r0, r1, r2, r3}
   166f0:	beq	16874 <__assert_fail@plt+0x5770>
   166f4:	str	r5, [sp, #80]	; 0x50
   166f8:	str	r6, [sp, #84]	; 0x54
   166fc:	bl	10ff0 <__errno_location@plt>
   16700:	ldr	r7, [pc, #372]	; 1687c <__assert_fail@plt+0x5778>
   16704:	ldr	r2, [r7, #4]
   16708:	ldr	r4, [r7]
   1670c:	cmp	r2, #0
   16710:	ldr	r3, [r0]
   16714:	mov	r8, r0
   16718:	str	r3, [sp, #24]
   1671c:	movgt	r3, r9
   16720:	bgt	16788 <__assert_fail@plt+0x5684>
   16724:	add	r5, r7, #8
   16728:	cmp	r4, r5
   1672c:	str	r2, [sp, #36]	; 0x24
   16730:	beq	16844 <__assert_fail@plt+0x5740>
   16734:	mov	r3, #8
   16738:	mov	r0, r4
   1673c:	str	r3, [sp]
   16740:	rsb	r2, r2, #1
   16744:	mvn	r3, #-2147483648	; 0x80000000
   16748:	add	r1, sp, #36	; 0x24
   1674c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16750:	mov	r4, r0
   16754:	str	r0, [r7]
   16758:	ldr	r0, [r7, #4]
   1675c:	ldr	r2, [sp, #36]	; 0x24
   16760:	mov	r1, #0
   16764:	sub	r2, r2, r0
   16768:	add	r0, r4, r0, lsl #3
   1676c:	lsl	r2, r2, #3
   16770:	bl	11020 <memset@plt>
   16774:	ldr	r3, [sp, #40]	; 0x28
   16778:	ldr	r5, [sp, #80]	; 0x50
   1677c:	ldr	r6, [sp, #84]	; 0x54
   16780:	ldr	r2, [sp, #36]	; 0x24
   16784:	str	r2, [r7, #4]
   16788:	ldr	r2, [sp, #44]	; 0x2c
   1678c:	ldr	r9, [r4]
   16790:	ldr	r7, [r4, #4]
   16794:	orr	r2, r2, #1
   16798:	add	fp, sp, #48	; 0x30
   1679c:	str	r2, [sp, #28]
   167a0:	str	r2, [sp, #4]
   167a4:	str	r3, [sp]
   167a8:	str	r6, [sp, #16]
   167ac:	str	r5, [sp, #12]
   167b0:	mov	r1, r9
   167b4:	mov	r0, r7
   167b8:	str	fp, [sp, #8]
   167bc:	mvn	r3, #0
   167c0:	mov	r2, sl
   167c4:	bl	1327c <__assert_fail@plt+0x2178>
   167c8:	cmp	r9, r0
   167cc:	bhi	16830 <__assert_fail@plt+0x572c>
   167d0:	ldr	r3, [pc, #168]	; 16880 <__assert_fail@plt+0x577c>
   167d4:	add	r5, r0, #1
   167d8:	cmp	r7, r3
   167dc:	str	r5, [r4]
   167e0:	beq	167ec <__assert_fail@plt+0x56e8>
   167e4:	mov	r0, r7
   167e8:	bl	11fcc <__assert_fail@plt+0xec8>
   167ec:	mov	r0, r5
   167f0:	bl	17b64 <__assert_fail@plt+0x6a60>
   167f4:	ldr	lr, [sp, #84]	; 0x54
   167f8:	ldr	r3, [sp, #40]	; 0x28
   167fc:	ldr	ip, [sp, #80]	; 0x50
   16800:	mov	r2, sl
   16804:	mov	r1, r5
   16808:	str	r0, [r4, #4]
   1680c:	ldr	r4, [sp, #28]
   16810:	str	r3, [sp]
   16814:	str	fp, [sp, #8]
   16818:	str	r4, [sp, #4]
   1681c:	str	lr, [sp, #16]
   16820:	str	ip, [sp, #12]
   16824:	mvn	r3, #0
   16828:	mov	r7, r0
   1682c:	bl	1327c <__assert_fail@plt+0x2178>
   16830:	ldr	r3, [sp, #24]
   16834:	mov	r0, r7
   16838:	str	r3, [r8]
   1683c:	add	sp, sp, #92	; 0x5c
   16840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16844:	mov	r3, #8
   16848:	str	r3, [sp]
   1684c:	add	r1, sp, #36	; 0x24
   16850:	rsb	r2, r2, #1
   16854:	mov	r0, fp
   16858:	mvn	r3, #-2147483648	; 0x80000000
   1685c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16860:	mov	r4, r0
   16864:	ldm	r5, {r0, r1}
   16868:	str	r4, [r7]
   1686c:	stm	r4, {r0, r1}
   16870:	b	16758 <__assert_fail@plt+0x5654>
   16874:	bl	110ec <abort@plt>
   16878:	muleq	r2, r0, r1
   1687c:	andeq	fp, r2, r0, lsl r1
   16880:	andeq	fp, r2, r0, asr #3
   16884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16888:	mov	r5, r0
   1688c:	ldr	lr, [pc, #464]	; 16a64 <__assert_fail@plt+0x5960>
   16890:	mov	r6, r1
   16894:	mov	sl, r2
   16898:	mov	fp, r3
   1689c:	ldm	lr!, {r0, r1, r2, r3}
   168a0:	sub	sp, sp, #92	; 0x5c
   168a4:	add	ip, sp, #40	; 0x28
   168a8:	cmp	r6, #0
   168ac:	cmpne	r5, #0
   168b0:	stmia	ip!, {r0, r1, r2, r3}
   168b4:	moveq	r4, #1
   168b8:	ldm	lr!, {r0, r1, r2, r3}
   168bc:	movne	r4, #0
   168c0:	mov	r9, #10
   168c4:	str	r4, [sp, #28]
   168c8:	stmia	ip!, {r0, r1, r2, r3}
   168cc:	ldm	lr, {r0, r1, r2, r3}
   168d0:	str	r9, [sp, #40]	; 0x28
   168d4:	stm	ip, {r0, r1, r2, r3}
   168d8:	beq	16a60 <__assert_fail@plt+0x595c>
   168dc:	str	r5, [sp, #80]	; 0x50
   168e0:	str	r6, [sp, #84]	; 0x54
   168e4:	bl	10ff0 <__errno_location@plt>
   168e8:	ldr	r7, [pc, #376]	; 16a68 <__assert_fail@plt+0x5964>
   168ec:	ldr	r2, [r7, #4]
   168f0:	ldr	r4, [r7]
   168f4:	cmp	r2, #0
   168f8:	ldr	r3, [r0]
   168fc:	mov	r8, r0
   16900:	str	r3, [sp, #24]
   16904:	movgt	r3, r9
   16908:	bgt	16970 <__assert_fail@plt+0x586c>
   1690c:	add	r5, r7, #8
   16910:	cmp	r4, r5
   16914:	str	r2, [sp, #36]	; 0x24
   16918:	beq	16a30 <__assert_fail@plt+0x592c>
   1691c:	mov	r3, #8
   16920:	mov	r0, r4
   16924:	str	r3, [sp]
   16928:	rsb	r2, r2, #1
   1692c:	mvn	r3, #-2147483648	; 0x80000000
   16930:	add	r1, sp, #36	; 0x24
   16934:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16938:	mov	r4, r0
   1693c:	str	r0, [r7]
   16940:	ldr	r0, [r7, #4]
   16944:	ldr	r2, [sp, #36]	; 0x24
   16948:	mov	r1, #0
   1694c:	sub	r2, r2, r0
   16950:	add	r0, r4, r0, lsl #3
   16954:	lsl	r2, r2, #3
   16958:	bl	11020 <memset@plt>
   1695c:	ldr	r3, [sp, #40]	; 0x28
   16960:	ldr	r5, [sp, #80]	; 0x50
   16964:	ldr	r6, [sp, #84]	; 0x54
   16968:	ldr	r2, [sp, #36]	; 0x24
   1696c:	str	r2, [r7, #4]
   16970:	ldr	r2, [sp, #44]	; 0x2c
   16974:	ldr	r9, [r4]
   16978:	ldr	r7, [r4, #4]
   1697c:	orr	r2, r2, #1
   16980:	str	r3, [sp]
   16984:	add	r3, sp, #48	; 0x30
   16988:	str	r2, [sp, #28]
   1698c:	str	r2, [sp, #4]
   16990:	str	r3, [sp, #8]
   16994:	str	r6, [sp, #16]
   16998:	str	r5, [sp, #12]
   1699c:	mov	r1, r9
   169a0:	mov	r0, r7
   169a4:	mov	r3, fp
   169a8:	mov	r2, sl
   169ac:	bl	1327c <__assert_fail@plt+0x2178>
   169b0:	cmp	r9, r0
   169b4:	bhi	16a1c <__assert_fail@plt+0x5918>
   169b8:	ldr	r3, [pc, #172]	; 16a6c <__assert_fail@plt+0x5968>
   169bc:	add	r5, r0, #1
   169c0:	cmp	r7, r3
   169c4:	str	r5, [r4]
   169c8:	beq	169d4 <__assert_fail@plt+0x58d0>
   169cc:	mov	r0, r7
   169d0:	bl	11fcc <__assert_fail@plt+0xec8>
   169d4:	mov	r0, r5
   169d8:	bl	17b64 <__assert_fail@plt+0x6a60>
   169dc:	add	lr, sp, #48	; 0x30
   169e0:	ldr	ip, [sp, #84]	; 0x54
   169e4:	mov	r1, r5
   169e8:	ldr	r5, [sp, #28]
   169ec:	mov	r3, fp
   169f0:	mov	r2, sl
   169f4:	str	r0, [r4, #4]
   169f8:	ldr	r4, [sp, #80]	; 0x50
   169fc:	str	lr, [sp, #8]
   16a00:	ldr	lr, [sp, #40]	; 0x28
   16a04:	str	r5, [sp, #4]
   16a08:	str	ip, [sp, #16]
   16a0c:	str	r4, [sp, #12]
   16a10:	str	lr, [sp]
   16a14:	mov	r7, r0
   16a18:	bl	1327c <__assert_fail@plt+0x2178>
   16a1c:	ldr	r3, [sp, #24]
   16a20:	mov	r0, r7
   16a24:	str	r3, [r8]
   16a28:	add	sp, sp, #92	; 0x5c
   16a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a30:	mov	r3, #8
   16a34:	str	r3, [sp]
   16a38:	add	r1, sp, #36	; 0x24
   16a3c:	rsb	r2, r2, #1
   16a40:	ldr	r0, [sp, #28]
   16a44:	mvn	r3, #-2147483648	; 0x80000000
   16a48:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16a4c:	mov	r4, r0
   16a50:	ldm	r5, {r0, r1}
   16a54:	str	r4, [r7]
   16a58:	stm	r4, {r0, r1}
   16a5c:	b	16940 <__assert_fail@plt+0x583c>
   16a60:	bl	110ec <abort@plt>
   16a64:	muleq	r2, r0, r1
   16a68:	andeq	fp, r2, r0, lsl r1
   16a6c:	andeq	fp, r2, r0, asr #3
   16a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a74:	sub	sp, sp, #52	; 0x34
   16a78:	mov	r5, r0
   16a7c:	mov	sl, r1
   16a80:	mov	fp, r2
   16a84:	bl	10ff0 <__errno_location@plt>
   16a88:	ldr	r4, [pc, #404]	; 16c24 <__assert_fail@plt+0x5b20>
   16a8c:	cmn	r5, #-2147483647	; 0x80000001
   16a90:	ldr	r6, [r4]
   16a94:	mov	r8, r0
   16a98:	movne	r0, #0
   16a9c:	moveq	r0, #1
   16aa0:	ldr	r3, [r8]
   16aa4:	orrs	r0, r0, r5, lsr #31
   16aa8:	str	r3, [sp, #28]
   16aac:	bne	16c20 <__assert_fail@plt+0x5b1c>
   16ab0:	ldr	r2, [r4, #4]
   16ab4:	cmp	r5, r2
   16ab8:	blt	16b18 <__assert_fail@plt+0x5a14>
   16abc:	add	r7, r4, #8
   16ac0:	cmp	r6, r7
   16ac4:	str	r2, [sp, #44]	; 0x2c
   16ac8:	beq	16bf0 <__assert_fail@plt+0x5aec>
   16acc:	mov	r3, #8
   16ad0:	sub	r2, r5, r2
   16ad4:	mov	r0, r6
   16ad8:	str	r3, [sp]
   16adc:	add	r2, r2, #1
   16ae0:	mvn	r3, #-2147483648	; 0x80000000
   16ae4:	add	r1, sp, #44	; 0x2c
   16ae8:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16aec:	mov	r6, r0
   16af0:	str	r0, [r4]
   16af4:	ldr	r0, [r4, #4]
   16af8:	ldr	r2, [sp, #44]	; 0x2c
   16afc:	mov	r1, #0
   16b00:	sub	r2, r2, r0
   16b04:	add	r0, r6, r0, lsl #3
   16b08:	lsl	r2, r2, #3
   16b0c:	bl	11020 <memset@plt>
   16b10:	ldr	r3, [sp, #44]	; 0x2c
   16b14:	str	r3, [r4, #4]
   16b18:	ldr	r2, [r4, #56]	; 0x38
   16b1c:	add	r3, r6, r5, lsl #3
   16b20:	ldr	r1, [r4, #20]
   16b24:	ldr	r7, [r3, #4]
   16b28:	ldr	r9, [r6, r5, lsl #3]
   16b2c:	ldr	ip, [r4, #60]	; 0x3c
   16b30:	str	r3, [sp, #32]
   16b34:	ldr	r3, [r4, #16]
   16b38:	str	r2, [sp, #12]
   16b3c:	ldr	r2, [pc, #228]	; 16c28 <__assert_fail@plt+0x5b24>
   16b40:	orr	r1, r1, #1
   16b44:	str	r1, [sp, #36]	; 0x24
   16b48:	str	r1, [sp, #4]
   16b4c:	str	r2, [sp, #8]
   16b50:	str	r3, [sp]
   16b54:	mov	r0, r7
   16b58:	mov	r1, r9
   16b5c:	str	ip, [sp, #16]
   16b60:	mov	r3, fp
   16b64:	mov	r2, sl
   16b68:	bl	1327c <__assert_fail@plt+0x2178>
   16b6c:	cmp	r9, r0
   16b70:	bhi	16bdc <__assert_fail@plt+0x5ad8>
   16b74:	ldr	r3, [pc, #176]	; 16c2c <__assert_fail@plt+0x5b28>
   16b78:	add	r9, r0, #1
   16b7c:	cmp	r7, r3
   16b80:	str	r9, [r6, r5, lsl #3]
   16b84:	beq	16b90 <__assert_fail@plt+0x5a8c>
   16b88:	mov	r0, r7
   16b8c:	bl	11fcc <__assert_fail@plt+0xec8>
   16b90:	mov	r0, r9
   16b94:	bl	17b64 <__assert_fail@plt+0x6a60>
   16b98:	ldr	ip, [sp, #32]
   16b9c:	ldr	lr, [r4, #60]	; 0x3c
   16ba0:	ldr	r5, [r4, #56]	; 0x38
   16ba4:	mov	r3, fp
   16ba8:	mov	r2, sl
   16bac:	mov	r1, r9
   16bb0:	str	r0, [ip, #4]
   16bb4:	ldr	ip, [r4, #16]
   16bb8:	ldr	r4, [pc, #104]	; 16c28 <__assert_fail@plt+0x5b24>
   16bbc:	str	lr, [sp, #16]
   16bc0:	str	r4, [sp, #8]
   16bc4:	ldr	r4, [sp, #36]	; 0x24
   16bc8:	str	r5, [sp, #12]
   16bcc:	str	r4, [sp, #4]
   16bd0:	str	ip, [sp]
   16bd4:	mov	r7, r0
   16bd8:	bl	1327c <__assert_fail@plt+0x2178>
   16bdc:	ldr	r3, [sp, #28]
   16be0:	mov	r0, r7
   16be4:	str	r3, [r8]
   16be8:	add	sp, sp, #52	; 0x34
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf0:	mov	r3, #8
   16bf4:	sub	r2, r5, r2
   16bf8:	str	r3, [sp]
   16bfc:	add	r1, sp, #44	; 0x2c
   16c00:	add	r2, r2, #1
   16c04:	mvn	r3, #-2147483648	; 0x80000000
   16c08:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16c0c:	mov	r6, r0
   16c10:	ldm	r7, {r0, r1}
   16c14:	str	r6, [r4]
   16c18:	stm	r6, {r0, r1}
   16c1c:	b	16af4 <__assert_fail@plt+0x59f0>
   16c20:	bl	110ec <abort@plt>
   16c24:	andeq	fp, r2, r0, lsl r1
   16c28:	andeq	fp, r2, r8, lsr #2
   16c2c:	andeq	fp, r2, r0, asr #3
   16c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c34:	sub	sp, sp, #44	; 0x2c
   16c38:	mov	r9, r0
   16c3c:	mov	sl, r1
   16c40:	bl	10ff0 <__errno_location@plt>
   16c44:	ldr	r4, [pc, #360]	; 16db4 <__assert_fail@plt+0x5cb0>
   16c48:	ldr	r2, [r4, #4]
   16c4c:	ldr	r5, [r4]
   16c50:	cmp	r2, #0
   16c54:	ldr	r3, [r0]
   16c58:	mov	r7, r0
   16c5c:	str	r3, [sp, #24]
   16c60:	bgt	16cbc <__assert_fail@plt+0x5bb8>
   16c64:	add	r6, r4, #8
   16c68:	cmp	r5, r6
   16c6c:	str	r2, [sp, #36]	; 0x24
   16c70:	beq	16d84 <__assert_fail@plt+0x5c80>
   16c74:	mov	r3, #8
   16c78:	mov	r0, r5
   16c7c:	str	r3, [sp]
   16c80:	rsb	r2, r2, #1
   16c84:	mvn	r3, #-2147483648	; 0x80000000
   16c88:	add	r1, sp, #36	; 0x24
   16c8c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16c90:	mov	r5, r0
   16c94:	str	r0, [r4]
   16c98:	ldr	r0, [r4, #4]
   16c9c:	ldr	r2, [sp, #36]	; 0x24
   16ca0:	mov	r1, #0
   16ca4:	sub	r2, r2, r0
   16ca8:	add	r0, r5, r0, lsl #3
   16cac:	lsl	r2, r2, #3
   16cb0:	bl	11020 <memset@plt>
   16cb4:	ldr	r3, [sp, #36]	; 0x24
   16cb8:	str	r3, [r4, #4]
   16cbc:	ldr	r1, [r4, #20]
   16cc0:	ldr	r8, [r5]
   16cc4:	ldr	r6, [r5, #4]
   16cc8:	ldr	r2, [r4, #56]	; 0x38
   16ccc:	ldr	r3, [r4, #16]
   16cd0:	ldr	ip, [r4, #60]	; 0x3c
   16cd4:	ldr	fp, [pc, #220]	; 16db8 <__assert_fail@plt+0x5cb4>
   16cd8:	orr	r1, r1, #1
   16cdc:	str	r1, [sp, #28]
   16ce0:	str	r1, [sp, #4]
   16ce4:	str	r2, [sp, #12]
   16ce8:	str	r3, [sp]
   16cec:	mov	r1, r8
   16cf0:	mov	r0, r6
   16cf4:	str	ip, [sp, #16]
   16cf8:	str	fp, [sp, #8]
   16cfc:	mov	r3, sl
   16d00:	mov	r2, r9
   16d04:	bl	1327c <__assert_fail@plt+0x2178>
   16d08:	cmp	r8, r0
   16d0c:	bhi	16d70 <__assert_fail@plt+0x5c6c>
   16d10:	ldr	r3, [pc, #164]	; 16dbc <__assert_fail@plt+0x5cb8>
   16d14:	add	r8, r0, #1
   16d18:	cmp	r6, r3
   16d1c:	str	r8, [r5]
   16d20:	beq	16d2c <__assert_fail@plt+0x5c28>
   16d24:	mov	r0, r6
   16d28:	bl	11fcc <__assert_fail@plt+0xec8>
   16d2c:	mov	r0, r8
   16d30:	bl	17b64 <__assert_fail@plt+0x6a60>
   16d34:	ldr	lr, [r4, #60]	; 0x3c
   16d38:	ldr	ip, [r4, #16]
   16d3c:	mov	r3, sl
   16d40:	mov	r2, r9
   16d44:	mov	r1, r8
   16d48:	str	r0, [r5, #4]
   16d4c:	ldr	r5, [r4, #56]	; 0x38
   16d50:	ldr	r4, [sp, #28]
   16d54:	str	fp, [sp, #8]
   16d58:	str	r4, [sp, #4]
   16d5c:	str	lr, [sp, #16]
   16d60:	str	r5, [sp, #12]
   16d64:	str	ip, [sp]
   16d68:	mov	r6, r0
   16d6c:	bl	1327c <__assert_fail@plt+0x2178>
   16d70:	ldr	r3, [sp, #24]
   16d74:	mov	r0, r6
   16d78:	str	r3, [r7]
   16d7c:	add	sp, sp, #44	; 0x2c
   16d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d84:	mov	r3, #8
   16d88:	str	r3, [sp]
   16d8c:	add	r1, sp, #36	; 0x24
   16d90:	rsb	r2, r2, #1
   16d94:	mvn	r3, #-2147483648	; 0x80000000
   16d98:	mov	r0, #0
   16d9c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16da0:	mov	r5, r0
   16da4:	ldm	r6, {r0, r1}
   16da8:	str	r5, [r4]
   16dac:	stm	r5, {r0, r1}
   16db0:	b	16c98 <__assert_fail@plt+0x5b94>
   16db4:	andeq	fp, r2, r0, lsl r1
   16db8:	andeq	fp, r2, r8, lsr #2
   16dbc:	andeq	fp, r2, r0, asr #3
   16dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dc4:	sub	sp, sp, #44	; 0x2c
   16dc8:	mov	r5, r0
   16dcc:	mov	sl, r1
   16dd0:	bl	10ff0 <__errno_location@plt>
   16dd4:	ldr	r4, [pc, #396]	; 16f68 <__assert_fail@plt+0x5e64>
   16dd8:	cmn	r5, #-2147483647	; 0x80000001
   16ddc:	ldr	r6, [r4]
   16de0:	mov	r8, r0
   16de4:	movne	r0, #0
   16de8:	moveq	r0, #1
   16dec:	ldr	r3, [r8]
   16df0:	orrs	r0, r0, r5, lsr #31
   16df4:	str	r3, [sp, #24]
   16df8:	bne	16f64 <__assert_fail@plt+0x5e60>
   16dfc:	ldr	r2, [r4, #4]
   16e00:	cmp	r5, r2
   16e04:	blt	16e64 <__assert_fail@plt+0x5d60>
   16e08:	add	r7, r4, #8
   16e0c:	cmp	r6, r7
   16e10:	str	r2, [sp, #36]	; 0x24
   16e14:	beq	16f34 <__assert_fail@plt+0x5e30>
   16e18:	mov	r3, #8
   16e1c:	sub	r2, r5, r2
   16e20:	mov	r0, r6
   16e24:	str	r3, [sp]
   16e28:	add	r2, r2, #1
   16e2c:	mvn	r3, #-2147483648	; 0x80000000
   16e30:	add	r1, sp, #36	; 0x24
   16e34:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16e38:	mov	r6, r0
   16e3c:	str	r0, [r4]
   16e40:	ldr	r0, [r4, #4]
   16e44:	ldr	r2, [sp, #36]	; 0x24
   16e48:	mov	r1, #0
   16e4c:	sub	r2, r2, r0
   16e50:	add	r0, r6, r0, lsl #3
   16e54:	lsl	r2, r2, #3
   16e58:	bl	11020 <memset@plt>
   16e5c:	ldr	r3, [sp, #36]	; 0x24
   16e60:	str	r3, [r4, #4]
   16e64:	ldr	r2, [r4, #56]	; 0x38
   16e68:	add	fp, r6, r5, lsl #3
   16e6c:	ldr	r1, [r4, #20]
   16e70:	ldr	r9, [r6, r5, lsl #3]
   16e74:	ldr	r7, [fp, #4]
   16e78:	ldr	r3, [r4, #16]
   16e7c:	ldr	ip, [r4, #60]	; 0x3c
   16e80:	str	r2, [sp, #12]
   16e84:	ldr	r2, [pc, #224]	; 16f6c <__assert_fail@plt+0x5e68>
   16e88:	orr	r1, r1, #1
   16e8c:	str	r1, [sp, #28]
   16e90:	str	r1, [sp, #4]
   16e94:	str	r2, [sp, #8]
   16e98:	str	r3, [sp]
   16e9c:	mov	r0, r7
   16ea0:	mov	r1, r9
   16ea4:	str	ip, [sp, #16]
   16ea8:	mvn	r3, #0
   16eac:	mov	r2, sl
   16eb0:	bl	1327c <__assert_fail@plt+0x2178>
   16eb4:	cmp	r9, r0
   16eb8:	bhi	16f20 <__assert_fail@plt+0x5e1c>
   16ebc:	ldr	r3, [pc, #172]	; 16f70 <__assert_fail@plt+0x5e6c>
   16ec0:	add	r9, r0, #1
   16ec4:	cmp	r7, r3
   16ec8:	str	r9, [r6, r5, lsl #3]
   16ecc:	beq	16ed8 <__assert_fail@plt+0x5dd4>
   16ed0:	mov	r0, r7
   16ed4:	bl	11fcc <__assert_fail@plt+0xec8>
   16ed8:	mov	r0, r9
   16edc:	bl	17b64 <__assert_fail@plt+0x6a60>
   16ee0:	ldr	ip, [r4, #60]	; 0x3c
   16ee4:	ldr	r3, [r4, #16]
   16ee8:	ldr	lr, [r4, #56]	; 0x38
   16eec:	ldr	r4, [pc, #120]	; 16f6c <__assert_fail@plt+0x5e68>
   16ef0:	mov	r2, sl
   16ef4:	mov	r1, r9
   16ef8:	str	r0, [fp, #4]
   16efc:	str	r4, [sp, #8]
   16f00:	ldr	r4, [sp, #28]
   16f04:	str	r3, [sp]
   16f08:	str	r4, [sp, #4]
   16f0c:	str	ip, [sp, #16]
   16f10:	str	lr, [sp, #12]
   16f14:	mvn	r3, #0
   16f18:	mov	r7, r0
   16f1c:	bl	1327c <__assert_fail@plt+0x2178>
   16f20:	ldr	r3, [sp, #24]
   16f24:	mov	r0, r7
   16f28:	str	r3, [r8]
   16f2c:	add	sp, sp, #44	; 0x2c
   16f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f34:	mov	r3, #8
   16f38:	sub	r2, r5, r2
   16f3c:	str	r3, [sp]
   16f40:	add	r1, sp, #36	; 0x24
   16f44:	add	r2, r2, #1
   16f48:	mvn	r3, #-2147483648	; 0x80000000
   16f4c:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16f50:	mov	r6, r0
   16f54:	ldm	r7, {r0, r1}
   16f58:	str	r6, [r4]
   16f5c:	stm	r6, {r0, r1}
   16f60:	b	16e40 <__assert_fail@plt+0x5d3c>
   16f64:	bl	110ec <abort@plt>
   16f68:	andeq	fp, r2, r0, lsl r1
   16f6c:	andeq	fp, r2, r8, lsr #2
   16f70:	andeq	fp, r2, r0, asr #3
   16f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f78:	sub	sp, sp, #44	; 0x2c
   16f7c:	mov	sl, r0
   16f80:	bl	10ff0 <__errno_location@plt>
   16f84:	ldr	r4, [pc, #348]	; 170e8 <__assert_fail@plt+0x5fe4>
   16f88:	ldr	r2, [r4, #4]
   16f8c:	ldr	r5, [r4]
   16f90:	cmp	r2, #0
   16f94:	ldr	r3, [r0]
   16f98:	mov	r8, r0
   16f9c:	str	r3, [sp, #28]
   16fa0:	bgt	16ffc <__assert_fail@plt+0x5ef8>
   16fa4:	add	r6, r4, #8
   16fa8:	cmp	r5, r6
   16fac:	str	r2, [sp, #36]	; 0x24
   16fb0:	beq	170b8 <__assert_fail@plt+0x5fb4>
   16fb4:	mov	r3, #8
   16fb8:	mov	r0, r5
   16fbc:	str	r3, [sp]
   16fc0:	rsb	r2, r2, #1
   16fc4:	mvn	r3, #-2147483648	; 0x80000000
   16fc8:	add	r1, sp, #36	; 0x24
   16fcc:	bl	17d80 <__assert_fail@plt+0x6c7c>
   16fd0:	mov	r5, r0
   16fd4:	str	r0, [r4]
   16fd8:	ldr	r0, [r4, #4]
   16fdc:	ldr	r2, [sp, #36]	; 0x24
   16fe0:	mov	r1, #0
   16fe4:	sub	r2, r2, r0
   16fe8:	add	r0, r5, r0, lsl #3
   16fec:	lsl	r2, r2, #3
   16ff0:	bl	11020 <memset@plt>
   16ff4:	ldr	r3, [sp, #36]	; 0x24
   16ff8:	str	r3, [r4, #4]
   16ffc:	ldr	r7, [r4, #20]
   17000:	ldr	r9, [r5]
   17004:	ldr	r6, [r5, #4]
   17008:	ldr	r2, [r4, #56]	; 0x38
   1700c:	ldr	r3, [r4, #16]
   17010:	ldr	ip, [r4, #60]	; 0x3c
   17014:	ldr	fp, [pc, #208]	; 170ec <__assert_fail@plt+0x5fe8>
   17018:	orr	r7, r7, #1
   1701c:	str	r2, [sp, #12]
   17020:	str	r3, [sp]
   17024:	str	r7, [sp, #4]
   17028:	mov	r1, r9
   1702c:	mov	r0, r6
   17030:	str	ip, [sp, #16]
   17034:	str	fp, [sp, #8]
   17038:	mvn	r3, #0
   1703c:	mov	r2, sl
   17040:	bl	1327c <__assert_fail@plt+0x2178>
   17044:	cmp	r9, r0
   17048:	bhi	170a4 <__assert_fail@plt+0x5fa0>
   1704c:	ldr	r3, [pc, #156]	; 170f0 <__assert_fail@plt+0x5fec>
   17050:	add	r9, r0, #1
   17054:	cmp	r6, r3
   17058:	str	r9, [r5]
   1705c:	beq	17068 <__assert_fail@plt+0x5f64>
   17060:	mov	r0, r6
   17064:	bl	11fcc <__assert_fail@plt+0xec8>
   17068:	mov	r0, r9
   1706c:	bl	17b64 <__assert_fail@plt+0x6a60>
   17070:	ldr	ip, [r4, #60]	; 0x3c
   17074:	ldr	r3, [r4, #16]
   17078:	ldr	lr, [r4, #56]	; 0x38
   1707c:	mov	r2, sl
   17080:	mov	r1, r9
   17084:	str	r0, [r5, #4]
   17088:	str	r3, [sp]
   1708c:	stmib	sp, {r7, fp}
   17090:	str	ip, [sp, #16]
   17094:	str	lr, [sp, #12]
   17098:	mvn	r3, #0
   1709c:	mov	r6, r0
   170a0:	bl	1327c <__assert_fail@plt+0x2178>
   170a4:	ldr	r3, [sp, #28]
   170a8:	mov	r0, r6
   170ac:	str	r3, [r8]
   170b0:	add	sp, sp, #44	; 0x2c
   170b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170b8:	mov	r3, #8
   170bc:	str	r3, [sp]
   170c0:	add	r1, sp, #36	; 0x24
   170c4:	rsb	r2, r2, #1
   170c8:	mvn	r3, #-2147483648	; 0x80000000
   170cc:	mov	r0, #0
   170d0:	bl	17d80 <__assert_fail@plt+0x6c7c>
   170d4:	mov	r5, r0
   170d8:	ldm	r6, {r0, r1}
   170dc:	str	r5, [r4]
   170e0:	stm	r5, {r0, r1}
   170e4:	b	16fd8 <__assert_fail@plt+0x5ed4>
   170e8:	andeq	fp, r2, r0, lsl r1
   170ec:	andeq	fp, r2, r8, lsr #2
   170f0:	andeq	fp, r2, r0, asr #3
   170f4:	mov	r2, #3
   170f8:	mov	r1, #0
   170fc:	b	196a0 <__assert_fail@plt+0x859c>
   17100:	push	{r4, r5, r6, lr}
   17104:	sub	sp, sp, #32
   17108:	cmp	r1, #0
   1710c:	mov	r4, r0
   17110:	ldr	r5, [sp, #48]	; 0x30
   17114:	ldr	r6, [sp, #52]	; 0x34
   17118:	beq	17430 <__assert_fail@plt+0x632c>
   1711c:	stm	sp, {r2, r3}
   17120:	mov	r3, r1
   17124:	ldr	r2, [pc, #808]	; 17454 <__assert_fail@plt+0x6350>
   17128:	mov	r1, #1
   1712c:	bl	11044 <__fprintf_chk@plt>
   17130:	mov	r2, #5
   17134:	ldr	r1, [pc, #796]	; 17458 <__assert_fail@plt+0x6354>
   17138:	mov	r0, #0
   1713c:	bl	10ef4 <dcgettext@plt>
   17140:	ldr	r3, [pc, #788]	; 1745c <__assert_fail@plt+0x6358>
   17144:	ldr	r2, [pc, #788]	; 17460 <__assert_fail@plt+0x635c>
   17148:	str	r3, [sp]
   1714c:	mov	r1, #1
   17150:	mov	r3, r0
   17154:	mov	r0, r4
   17158:	bl	11044 <__fprintf_chk@plt>
   1715c:	mov	r1, r4
   17160:	mov	r0, #10
   17164:	bl	10ee8 <fputc_unlocked@plt>
   17168:	mov	r2, #5
   1716c:	ldr	r1, [pc, #752]	; 17464 <__assert_fail@plt+0x6360>
   17170:	mov	r0, #0
   17174:	bl	10ef4 <dcgettext@plt>
   17178:	mov	r1, #1
   1717c:	ldr	r3, [pc, #740]	; 17468 <__assert_fail@plt+0x6364>
   17180:	mov	r2, r0
   17184:	mov	r0, r4
   17188:	bl	11044 <__fprintf_chk@plt>
   1718c:	mov	r1, r4
   17190:	mov	r0, #10
   17194:	bl	10ee8 <fputc_unlocked@plt>
   17198:	cmp	r6, #9
   1719c:	ldrls	pc, [pc, r6, lsl #2]
   171a0:	b	17448 <__assert_fail@plt+0x6344>
   171a4:	andeq	r7, r1, r8, lsr #4
   171a8:	andeq	r7, r1, r0, lsr r2
   171ac:	andeq	r7, r1, ip, asr r2
   171b0:	muleq	r1, r0, r2
   171b4:	andeq	r7, r1, ip, asr #5
   171b8:	andeq	r7, r1, r8, lsl #6
   171bc:	andeq	r7, r1, r4, asr #6
   171c0:	andeq	r7, r1, r8, lsl #7
   171c4:	ldrdeq	r7, [r1], -r8
   171c8:	andeq	r7, r1, ip, asr #3
   171cc:	ldr	r1, [pc, #664]	; 1746c <__assert_fail@plt+0x6368>
   171d0:	mov	r2, #5
   171d4:	mov	r0, #0
   171d8:	bl	10ef4 <dcgettext@plt>
   171dc:	ldr	ip, [r5, #32]
   171e0:	ldr	r1, [r5, #28]
   171e4:	ldr	r2, [r5, #24]
   171e8:	ldr	r3, [r5]
   171ec:	ldr	r6, [r5, #20]
   171f0:	str	ip, [sp, #28]
   171f4:	ldr	lr, [r5, #16]
   171f8:	str	r1, [sp, #24]
   171fc:	ldr	ip, [r5, #12]
   17200:	str	r2, [sp, #20]
   17204:	ldr	r1, [r5, #8]
   17208:	ldr	r2, [r5, #4]
   1720c:	str	r6, [sp, #16]
   17210:	stmib	sp, {r1, ip, lr}
   17214:	mov	r1, #1
   17218:	str	r2, [sp]
   1721c:	mov	r2, r0
   17220:	mov	r0, r4
   17224:	bl	11044 <__fprintf_chk@plt>
   17228:	add	sp, sp, #32
   1722c:	pop	{r4, r5, r6, pc}
   17230:	mov	r2, #5
   17234:	ldr	r1, [pc, #564]	; 17470 <__assert_fail@plt+0x636c>
   17238:	mov	r0, #0
   1723c:	bl	10ef4 <dcgettext@plt>
   17240:	ldr	r3, [r5]
   17244:	mov	r1, #1
   17248:	mov	r2, r0
   1724c:	mov	r0, r4
   17250:	add	sp, sp, #32
   17254:	pop	{r4, r5, r6, lr}
   17258:	b	11044 <__fprintf_chk@plt>
   1725c:	mov	r2, #5
   17260:	ldr	r1, [pc, #524]	; 17474 <__assert_fail@plt+0x6370>
   17264:	mov	r0, #0
   17268:	bl	10ef4 <dcgettext@plt>
   1726c:	ldr	r2, [r5, #4]
   17270:	ldr	r3, [r5]
   17274:	mov	r1, #1
   17278:	str	r2, [sp, #48]	; 0x30
   1727c:	mov	r2, r0
   17280:	mov	r0, r4
   17284:	add	sp, sp, #32
   17288:	pop	{r4, r5, r6, lr}
   1728c:	b	11044 <__fprintf_chk@plt>
   17290:	mov	r2, #5
   17294:	ldr	r1, [pc, #476]	; 17478 <__assert_fail@plt+0x6374>
   17298:	mov	r0, #0
   1729c:	bl	10ef4 <dcgettext@plt>
   172a0:	ldr	r1, [r5, #8]
   172a4:	ldr	r2, [r5, #4]
   172a8:	ldr	r3, [r5]
   172ac:	str	r1, [sp, #52]	; 0x34
   172b0:	str	r2, [sp, #48]	; 0x30
   172b4:	mov	r1, #1
   172b8:	mov	r2, r0
   172bc:	mov	r0, r4
   172c0:	add	sp, sp, #32
   172c4:	pop	{r4, r5, r6, lr}
   172c8:	b	11044 <__fprintf_chk@plt>
   172cc:	mov	r2, #5
   172d0:	ldr	r1, [pc, #420]	; 1747c <__assert_fail@plt+0x6378>
   172d4:	mov	r0, #0
   172d8:	bl	10ef4 <dcgettext@plt>
   172dc:	ldr	r1, [r5, #8]
   172e0:	ldr	ip, [r5, #12]
   172e4:	ldr	r2, [r5, #4]
   172e8:	ldr	r3, [r5]
   172ec:	stmib	sp, {r1, ip}
   172f0:	str	r2, [sp]
   172f4:	mov	r1, #1
   172f8:	mov	r2, r0
   172fc:	mov	r0, r4
   17300:	bl	11044 <__fprintf_chk@plt>
   17304:	b	17228 <__assert_fail@plt+0x6124>
   17308:	mov	r2, #5
   1730c:	ldr	r1, [pc, #364]	; 17480 <__assert_fail@plt+0x637c>
   17310:	mov	r0, #0
   17314:	bl	10ef4 <dcgettext@plt>
   17318:	add	r1, r5, #8
   1731c:	ldr	r2, [r5, #4]
   17320:	ldm	r1, {r1, ip, lr}
   17324:	ldr	r3, [r5]
   17328:	str	r2, [sp]
   1732c:	stmib	sp, {r1, ip, lr}
   17330:	mov	r1, #1
   17334:	mov	r2, r0
   17338:	mov	r0, r4
   1733c:	bl	11044 <__fprintf_chk@plt>
   17340:	b	17228 <__assert_fail@plt+0x6124>
   17344:	mov	r2, #5
   17348:	ldr	r1, [pc, #308]	; 17484 <__assert_fail@plt+0x6380>
   1734c:	mov	r0, #0
   17350:	bl	10ef4 <dcgettext@plt>
   17354:	add	r1, r5, #8
   17358:	ldr	r2, [r5, #4]
   1735c:	ldm	r1, {r1, ip, lr}
   17360:	ldr	r6, [r5, #20]
   17364:	ldr	r3, [r5]
   17368:	stmib	sp, {r1, ip, lr}
   1736c:	mov	r1, #1
   17370:	str	r2, [sp]
   17374:	str	r6, [sp, #16]
   17378:	mov	r2, r0
   1737c:	mov	r0, r4
   17380:	bl	11044 <__fprintf_chk@plt>
   17384:	b	17228 <__assert_fail@plt+0x6124>
   17388:	mov	r2, #5
   1738c:	ldr	r1, [pc, #244]	; 17488 <__assert_fail@plt+0x6384>
   17390:	mov	r0, #0
   17394:	bl	10ef4 <dcgettext@plt>
   17398:	ldr	r2, [r5, #24]
   1739c:	ldr	r3, [r5]
   173a0:	ldr	r6, [r5, #20]
   173a4:	ldr	lr, [r5, #16]
   173a8:	ldr	ip, [r5, #12]
   173ac:	str	r2, [sp, #20]
   173b0:	ldr	r1, [r5, #8]
   173b4:	ldr	r2, [r5, #4]
   173b8:	str	r6, [sp, #16]
   173bc:	stmib	sp, {r1, ip, lr}
   173c0:	mov	r1, #1
   173c4:	str	r2, [sp]
   173c8:	mov	r2, r0
   173cc:	mov	r0, r4
   173d0:	bl	11044 <__fprintf_chk@plt>
   173d4:	b	17228 <__assert_fail@plt+0x6124>
   173d8:	mov	r2, #5
   173dc:	ldr	r1, [pc, #168]	; 1748c <__assert_fail@plt+0x6388>
   173e0:	mov	r0, #0
   173e4:	bl	10ef4 <dcgettext@plt>
   173e8:	ldr	r1, [r5, #28]
   173ec:	ldr	r2, [r5, #24]
   173f0:	ldr	r3, [r5]
   173f4:	ldr	r6, [r5, #20]
   173f8:	ldr	lr, [r5, #16]
   173fc:	str	r1, [sp, #24]
   17400:	ldr	ip, [r5, #12]
   17404:	str	r2, [sp, #20]
   17408:	ldr	r1, [r5, #8]
   1740c:	ldr	r2, [r5, #4]
   17410:	str	r6, [sp, #16]
   17414:	stmib	sp, {r1, ip, lr}
   17418:	mov	r1, #1
   1741c:	str	r2, [sp]
   17420:	mov	r2, r0
   17424:	mov	r0, r4
   17428:	bl	11044 <__fprintf_chk@plt>
   1742c:	b	17228 <__assert_fail@plt+0x6124>
   17430:	str	r3, [sp]
   17434:	mov	r1, #1
   17438:	mov	r3, r2
   1743c:	ldr	r2, [pc, #76]	; 17490 <__assert_fail@plt+0x638c>
   17440:	bl	11044 <__fprintf_chk@plt>
   17444:	b	17130 <__assert_fail@plt+0x602c>
   17448:	mov	r2, #5
   1744c:	ldr	r1, [pc, #64]	; 17494 <__assert_fail@plt+0x6390>
   17450:	b	171d4 <__assert_fail@plt+0x60d0>
   17454:	andeq	sl, r1, r0, asr sl
   17458:	andeq	sl, r1, r4, ror #20
   1745c:	andeq	r0, r0, r6, ror #15
   17460:	andeq	sl, r1, ip, lsr sp
   17464:	andeq	sl, r1, r8, ror #20
   17468:	andeq	sl, r1, r4, lsl fp
   1746c:	andeq	sl, r1, r4, asr #24
   17470:	andeq	sl, r1, r8, lsr fp
   17474:	andeq	sl, r1, r8, asr #22
   17478:	andeq	sl, r1, r0, ror #22
   1747c:	andeq	sl, r1, ip, ror fp
   17480:	muleq	r1, ip, fp
   17484:	andeq	sl, r1, r0, asr #23
   17488:	andeq	sl, r1, r8, ror #23
   1748c:	andeq	sl, r1, r4, lsl ip
   17490:	andeq	sl, r1, ip, asr sl
   17494:	andeq	sl, r1, r8, ror ip
   17498:	push	{r4, r5, lr}
   1749c:	sub	sp, sp, #12
   174a0:	ldr	r5, [sp, #24]
   174a4:	ldr	ip, [r5]
   174a8:	cmp	ip, #0
   174ac:	beq	174c8 <__assert_fail@plt+0x63c4>
   174b0:	mov	lr, r5
   174b4:	mov	ip, #0
   174b8:	ldr	r4, [lr, #4]!
   174bc:	add	ip, ip, #1
   174c0:	cmp	r4, #0
   174c4:	bne	174b8 <__assert_fail@plt+0x63b4>
   174c8:	stm	sp, {r5, ip}
   174cc:	bl	17100 <__assert_fail@plt+0x5ffc>
   174d0:	add	sp, sp, #12
   174d4:	pop	{r4, r5, pc}
   174d8:	push	{r4, r5, lr}
   174dc:	sub	sp, sp, #76	; 0x4c
   174e0:	mov	r5, r0
   174e4:	ldr	ip, [sp, #88]	; 0x58
   174e8:	ldr	r0, [ip]
   174ec:	cmp	r0, #0
   174f0:	str	r0, [sp, #32]
   174f4:	beq	178c8 <__assert_fail@plt+0x67c4>
   174f8:	ldr	r0, [ip, #4]
   174fc:	cmp	r0, #0
   17500:	str	r0, [sp, #36]	; 0x24
   17504:	beq	178d0 <__assert_fail@plt+0x67cc>
   17508:	ldr	r0, [ip, #8]
   1750c:	cmp	r0, #0
   17510:	str	r0, [sp, #40]	; 0x28
   17514:	beq	178d8 <__assert_fail@plt+0x67d4>
   17518:	ldr	r0, [ip, #12]
   1751c:	cmp	r0, #0
   17520:	str	r0, [sp, #44]	; 0x2c
   17524:	beq	178e0 <__assert_fail@plt+0x67dc>
   17528:	ldr	r0, [ip, #16]
   1752c:	cmp	r0, #0
   17530:	str	r0, [sp, #48]	; 0x30
   17534:	beq	178e8 <__assert_fail@plt+0x67e4>
   17538:	ldr	r0, [ip, #20]
   1753c:	cmp	r0, #0
   17540:	str	r0, [sp, #52]	; 0x34
   17544:	beq	178f0 <__assert_fail@plt+0x67ec>
   17548:	ldr	r0, [ip, #24]
   1754c:	cmp	r0, #0
   17550:	str	r0, [sp, #56]	; 0x38
   17554:	beq	178f8 <__assert_fail@plt+0x67f4>
   17558:	ldr	r0, [ip, #28]
   1755c:	cmp	r0, #0
   17560:	str	r0, [sp, #60]	; 0x3c
   17564:	beq	17900 <__assert_fail@plt+0x67fc>
   17568:	ldr	r0, [ip, #32]
   1756c:	cmp	r0, #0
   17570:	str	r0, [sp, #64]	; 0x40
   17574:	beq	17908 <__assert_fail@plt+0x6804>
   17578:	ldr	r0, [ip, #36]	; 0x24
   1757c:	cmp	r0, #0
   17580:	movne	r4, #10
   17584:	moveq	r4, #9
   17588:	cmp	r1, #0
   1758c:	beq	178a0 <__assert_fail@plt+0x679c>
   17590:	stm	sp, {r2, r3}
   17594:	mov	r0, r5
   17598:	mov	r3, r1
   1759c:	ldr	r2, [pc, #876]	; 17910 <__assert_fail@plt+0x680c>
   175a0:	mov	r1, #1
   175a4:	bl	11044 <__fprintf_chk@plt>
   175a8:	mov	r2, #5
   175ac:	ldr	r1, [pc, #864]	; 17914 <__assert_fail@plt+0x6810>
   175b0:	mov	r0, #0
   175b4:	bl	10ef4 <dcgettext@plt>
   175b8:	ldr	r3, [pc, #856]	; 17918 <__assert_fail@plt+0x6814>
   175bc:	ldr	r2, [pc, #856]	; 1791c <__assert_fail@plt+0x6818>
   175c0:	str	r3, [sp]
   175c4:	mov	r1, #1
   175c8:	mov	r3, r0
   175cc:	mov	r0, r5
   175d0:	bl	11044 <__fprintf_chk@plt>
   175d4:	mov	r1, r5
   175d8:	mov	r0, #10
   175dc:	bl	10ee8 <fputc_unlocked@plt>
   175e0:	mov	r2, #5
   175e4:	ldr	r1, [pc, #820]	; 17920 <__assert_fail@plt+0x681c>
   175e8:	mov	r0, #0
   175ec:	bl	10ef4 <dcgettext@plt>
   175f0:	mov	r1, #1
   175f4:	ldr	r3, [pc, #808]	; 17924 <__assert_fail@plt+0x6820>
   175f8:	mov	r2, r0
   175fc:	mov	r0, r5
   17600:	bl	11044 <__fprintf_chk@plt>
   17604:	mov	r1, r5
   17608:	mov	r0, #10
   1760c:	bl	10ee8 <fputc_unlocked@plt>
   17610:	cmp	r4, #9
   17614:	ldrls	pc, [pc, r4, lsl #2]
   17618:	b	178bc <__assert_fail@plt+0x67b8>
   1761c:	andeq	r7, r1, r0, lsr #13
   17620:	andeq	r7, r1, r8, lsr #13
   17624:	ldrdeq	r7, [r1], -r4
   17628:	andeq	r7, r1, r8, lsl #14
   1762c:	andeq	r7, r1, r0, asr #14
   17630:	andeq	r7, r1, ip, ror r7
   17634:			; <UNDEFINED> instruction: 0x000177b8
   17638:	strdeq	r7, [r1], -ip
   1763c:	andeq	r7, r1, r8, asr #16
   17640:	andeq	r7, r1, r4, asr #12
   17644:	ldr	r1, [pc, #732]	; 17928 <__assert_fail@plt+0x6824>
   17648:	mov	r2, #5
   1764c:	mov	r0, #0
   17650:	bl	10ef4 <dcgettext@plt>
   17654:	ldr	ip, [sp, #64]	; 0x40
   17658:	ldr	r1, [sp, #60]	; 0x3c
   1765c:	ldr	r2, [sp, #56]	; 0x38
   17660:	ldr	lr, [sp, #48]	; 0x30
   17664:	str	ip, [sp, #28]
   17668:	str	r1, [sp, #24]
   1766c:	ldr	ip, [sp, #44]	; 0x2c
   17670:	ldr	r1, [sp, #40]	; 0x28
   17674:	ldr	r4, [sp, #52]	; 0x34
   17678:	str	r2, [sp, #20]
   1767c:	ldr	r2, [sp, #36]	; 0x24
   17680:	stmib	sp, {r1, ip, lr}
   17684:	mov	r1, #1
   17688:	str	r2, [sp]
   1768c:	ldr	r3, [sp, #32]
   17690:	str	r4, [sp, #16]
   17694:	mov	r2, r0
   17698:	mov	r0, r5
   1769c:	bl	11044 <__fprintf_chk@plt>
   176a0:	add	sp, sp, #76	; 0x4c
   176a4:	pop	{r4, r5, pc}
   176a8:	mov	r2, #5
   176ac:	ldr	r1, [pc, #632]	; 1792c <__assert_fail@plt+0x6828>
   176b0:	mov	r0, #0
   176b4:	bl	10ef4 <dcgettext@plt>
   176b8:	ldr	r3, [sp, #32]
   176bc:	mov	r1, #1
   176c0:	mov	r2, r0
   176c4:	mov	r0, r5
   176c8:	add	sp, sp, #76	; 0x4c
   176cc:	pop	{r4, r5, lr}
   176d0:	b	11044 <__fprintf_chk@plt>
   176d4:	mov	r2, #5
   176d8:	ldr	r1, [pc, #592]	; 17930 <__assert_fail@plt+0x682c>
   176dc:	mov	r0, #0
   176e0:	bl	10ef4 <dcgettext@plt>
   176e4:	ldr	r2, [sp, #36]	; 0x24
   176e8:	ldr	r3, [sp, #32]
   176ec:	str	r2, [sp, #88]	; 0x58
   176f0:	mov	r1, #1
   176f4:	mov	r2, r0
   176f8:	mov	r0, r5
   176fc:	add	sp, sp, #76	; 0x4c
   17700:	pop	{r4, r5, lr}
   17704:	b	11044 <__fprintf_chk@plt>
   17708:	mov	r2, #5
   1770c:	ldr	r1, [pc, #544]	; 17934 <__assert_fail@plt+0x6830>
   17710:	mov	r0, #0
   17714:	bl	10ef4 <dcgettext@plt>
   17718:	ldr	r1, [sp, #40]	; 0x28
   1771c:	ldr	r2, [sp, #36]	; 0x24
   17720:	str	r1, [sp, #4]
   17724:	str	r2, [sp]
   17728:	ldr	r3, [sp, #32]
   1772c:	mov	r1, #1
   17730:	mov	r2, r0
   17734:	mov	r0, r5
   17738:	bl	11044 <__fprintf_chk@plt>
   1773c:	b	176a0 <__assert_fail@plt+0x659c>
   17740:	mov	r2, #5
   17744:	ldr	r1, [pc, #492]	; 17938 <__assert_fail@plt+0x6834>
   17748:	mov	r0, #0
   1774c:	bl	10ef4 <dcgettext@plt>
   17750:	ldr	r1, [sp, #40]	; 0x28
   17754:	ldr	ip, [sp, #44]	; 0x2c
   17758:	ldr	r2, [sp, #36]	; 0x24
   1775c:	ldr	r3, [sp, #32]
   17760:	stmib	sp, {r1, ip}
   17764:	str	r2, [sp]
   17768:	mov	r1, #1
   1776c:	mov	r2, r0
   17770:	mov	r0, r5
   17774:	bl	11044 <__fprintf_chk@plt>
   17778:	b	176a0 <__assert_fail@plt+0x659c>
   1777c:	mov	r2, #5
   17780:	ldr	r1, [pc, #436]	; 1793c <__assert_fail@plt+0x6838>
   17784:	mov	r0, #0
   17788:	bl	10ef4 <dcgettext@plt>
   1778c:	add	r1, sp, #40	; 0x28
   17790:	ldr	r2, [sp, #36]	; 0x24
   17794:	ldm	r1, {r1, ip, lr}
   17798:	ldr	r3, [sp, #32]
   1779c:	str	r2, [sp]
   177a0:	stmib	sp, {r1, ip, lr}
   177a4:	mov	r1, #1
   177a8:	mov	r2, r0
   177ac:	mov	r0, r5
   177b0:	bl	11044 <__fprintf_chk@plt>
   177b4:	b	176a0 <__assert_fail@plt+0x659c>
   177b8:	mov	r2, #5
   177bc:	ldr	r1, [pc, #380]	; 17940 <__assert_fail@plt+0x683c>
   177c0:	mov	r0, #0
   177c4:	bl	10ef4 <dcgettext@plt>
   177c8:	add	r1, sp, #40	; 0x28
   177cc:	ldr	r2, [sp, #36]	; 0x24
   177d0:	ldm	r1, {r1, ip, lr}
   177d4:	ldr	r4, [sp, #52]	; 0x34
   177d8:	str	r2, [sp]
   177dc:	stmib	sp, {r1, ip, lr}
   177e0:	mov	r1, #1
   177e4:	ldr	r3, [sp, #32]
   177e8:	str	r4, [sp, #16]
   177ec:	mov	r2, r0
   177f0:	mov	r0, r5
   177f4:	bl	11044 <__fprintf_chk@plt>
   177f8:	b	176a0 <__assert_fail@plt+0x659c>
   177fc:	mov	r2, #5
   17800:	ldr	r1, [pc, #316]	; 17944 <__assert_fail@plt+0x6840>
   17804:	mov	r0, #0
   17808:	bl	10ef4 <dcgettext@plt>
   1780c:	add	r1, sp, #40	; 0x28
   17810:	ldr	r2, [sp, #56]	; 0x38
   17814:	ldm	r1, {r1, ip, lr}
   17818:	ldr	r4, [sp, #52]	; 0x34
   1781c:	str	r2, [sp, #20]
   17820:	ldr	r2, [sp, #36]	; 0x24
   17824:	stmib	sp, {r1, ip, lr}
   17828:	mov	r1, #1
   1782c:	str	r2, [sp]
   17830:	ldr	r3, [sp, #32]
   17834:	str	r4, [sp, #16]
   17838:	mov	r2, r0
   1783c:	mov	r0, r5
   17840:	bl	11044 <__fprintf_chk@plt>
   17844:	b	176a0 <__assert_fail@plt+0x659c>
   17848:	mov	r2, #5
   1784c:	ldr	r1, [pc, #244]	; 17948 <__assert_fail@plt+0x6844>
   17850:	mov	r0, #0
   17854:	bl	10ef4 <dcgettext@plt>
   17858:	ldr	r1, [sp, #60]	; 0x3c
   1785c:	ldr	r2, [sp, #56]	; 0x38
   17860:	ldr	lr, [sp, #48]	; 0x30
   17864:	ldr	ip, [sp, #44]	; 0x2c
   17868:	str	r1, [sp, #24]
   1786c:	ldr	r1, [sp, #40]	; 0x28
   17870:	ldr	r4, [sp, #52]	; 0x34
   17874:	str	r2, [sp, #20]
   17878:	ldr	r2, [sp, #36]	; 0x24
   1787c:	stmib	sp, {r1, ip, lr}
   17880:	mov	r1, #1
   17884:	str	r2, [sp]
   17888:	ldr	r3, [sp, #32]
   1788c:	str	r4, [sp, #16]
   17890:	mov	r2, r0
   17894:	mov	r0, r5
   17898:	bl	11044 <__fprintf_chk@plt>
   1789c:	b	176a0 <__assert_fail@plt+0x659c>
   178a0:	str	r3, [sp]
   178a4:	mov	r1, #1
   178a8:	mov	r3, r2
   178ac:	mov	r0, r5
   178b0:	ldr	r2, [pc, #148]	; 1794c <__assert_fail@plt+0x6848>
   178b4:	bl	11044 <__fprintf_chk@plt>
   178b8:	b	175a8 <__assert_fail@plt+0x64a4>
   178bc:	mov	r2, #5
   178c0:	ldr	r1, [pc, #136]	; 17950 <__assert_fail@plt+0x684c>
   178c4:	b	1764c <__assert_fail@plt+0x6548>
   178c8:	mov	r4, r0
   178cc:	b	17588 <__assert_fail@plt+0x6484>
   178d0:	mov	r4, #1
   178d4:	b	17588 <__assert_fail@plt+0x6484>
   178d8:	mov	r4, #2
   178dc:	b	17588 <__assert_fail@plt+0x6484>
   178e0:	mov	r4, #3
   178e4:	b	17588 <__assert_fail@plt+0x6484>
   178e8:	mov	r4, #4
   178ec:	b	17588 <__assert_fail@plt+0x6484>
   178f0:	mov	r4, #5
   178f4:	b	17588 <__assert_fail@plt+0x6484>
   178f8:	mov	r4, #6
   178fc:	b	17588 <__assert_fail@plt+0x6484>
   17900:	mov	r4, #7
   17904:	b	17588 <__assert_fail@plt+0x6484>
   17908:	mov	r4, #8
   1790c:	b	17588 <__assert_fail@plt+0x6484>
   17910:	andeq	sl, r1, r0, asr sl
   17914:	andeq	sl, r1, r4, ror #20
   17918:	andeq	r0, r0, r6, ror #15
   1791c:	andeq	sl, r1, ip, lsr sp
   17920:	andeq	sl, r1, r8, ror #20
   17924:	andeq	sl, r1, r4, lsl fp
   17928:	andeq	sl, r1, r4, asr #24
   1792c:	andeq	sl, r1, r8, lsr fp
   17930:	andeq	sl, r1, r8, asr #22
   17934:	andeq	sl, r1, r0, ror #22
   17938:	andeq	sl, r1, ip, ror fp
   1793c:	muleq	r1, ip, fp
   17940:	andeq	sl, r1, r0, asr #23
   17944:	andeq	sl, r1, r8, ror #23
   17948:	andeq	sl, r1, r4, lsl ip
   1794c:	andeq	sl, r1, ip, asr sl
   17950:	andeq	sl, r1, r8, ror ip
   17954:	push	{r3}		; (str r3, [sp, #-4]!)
   17958:	push	{lr}		; (str lr, [sp, #-4]!)
   1795c:	sub	sp, sp, #56	; 0x38
   17960:	add	r3, sp, #64	; 0x40
   17964:	ldr	ip, [sp, #64]	; 0x40
   17968:	str	r3, [sp, #12]
   1796c:	cmp	ip, #0
   17970:	str	ip, [sp, #16]
   17974:	beq	17a0c <__assert_fail@plt+0x6908>
   17978:	ldr	ip, [sp, #68]	; 0x44
   1797c:	cmp	ip, #0
   17980:	str	ip, [sp, #20]
   17984:	beq	17a2c <__assert_fail@plt+0x6928>
   17988:	ldr	ip, [sp, #72]	; 0x48
   1798c:	cmp	ip, #0
   17990:	str	ip, [sp, #24]
   17994:	beq	17a34 <__assert_fail@plt+0x6930>
   17998:	ldr	ip, [sp, #76]	; 0x4c
   1799c:	cmp	ip, #0
   179a0:	str	ip, [sp, #28]
   179a4:	beq	17a3c <__assert_fail@plt+0x6938>
   179a8:	ldr	ip, [sp, #80]	; 0x50
   179ac:	cmp	ip, #0
   179b0:	str	ip, [sp, #32]
   179b4:	beq	17a44 <__assert_fail@plt+0x6940>
   179b8:	ldr	ip, [sp, #84]	; 0x54
   179bc:	cmp	ip, #0
   179c0:	str	ip, [sp, #36]	; 0x24
   179c4:	beq	17a4c <__assert_fail@plt+0x6948>
   179c8:	ldr	ip, [sp, #88]	; 0x58
   179cc:	cmp	ip, #0
   179d0:	str	ip, [sp, #40]	; 0x28
   179d4:	beq	17a54 <__assert_fail@plt+0x6950>
   179d8:	ldr	ip, [sp, #92]	; 0x5c
   179dc:	cmp	ip, #0
   179e0:	str	ip, [sp, #44]	; 0x2c
   179e4:	beq	17a5c <__assert_fail@plt+0x6958>
   179e8:	ldr	ip, [sp, #96]	; 0x60
   179ec:	cmp	ip, #0
   179f0:	str	ip, [sp, #48]	; 0x30
   179f4:	beq	17a64 <__assert_fail@plt+0x6960>
   179f8:	ldr	ip, [sp, #100]	; 0x64
   179fc:	cmp	ip, #0
   17a00:	str	ip, [sp, #52]	; 0x34
   17a04:	movne	ip, #10
   17a08:	moveq	ip, #9
   17a0c:	add	r3, sp, #16
   17a10:	stm	sp, {r3, ip}
   17a14:	ldr	r3, [sp, #60]	; 0x3c
   17a18:	bl	17100 <__assert_fail@plt+0x5ffc>
   17a1c:	add	sp, sp, #56	; 0x38
   17a20:	pop	{lr}		; (ldr lr, [sp], #4)
   17a24:	add	sp, sp, #4
   17a28:	bx	lr
   17a2c:	mov	ip, #1
   17a30:	b	17a0c <__assert_fail@plt+0x6908>
   17a34:	mov	ip, #2
   17a38:	b	17a0c <__assert_fail@plt+0x6908>
   17a3c:	mov	ip, #3
   17a40:	b	17a0c <__assert_fail@plt+0x6908>
   17a44:	mov	ip, #4
   17a48:	b	17a0c <__assert_fail@plt+0x6908>
   17a4c:	mov	ip, #5
   17a50:	b	17a0c <__assert_fail@plt+0x6908>
   17a54:	mov	ip, #6
   17a58:	b	17a0c <__assert_fail@plt+0x6908>
   17a5c:	mov	ip, #7
   17a60:	b	17a0c <__assert_fail@plt+0x6908>
   17a64:	mov	ip, #8
   17a68:	b	17a0c <__assert_fail@plt+0x6908>
   17a6c:	ldr	r3, [pc, #116]	; 17ae8 <__assert_fail@plt+0x69e4>
   17a70:	push	{r4, lr}
   17a74:	mov	r0, #10
   17a78:	ldr	r1, [r3]
   17a7c:	bl	10ee8 <fputc_unlocked@plt>
   17a80:	mov	r2, #5
   17a84:	ldr	r1, [pc, #96]	; 17aec <__assert_fail@plt+0x69e8>
   17a88:	mov	r0, #0
   17a8c:	bl	10ef4 <dcgettext@plt>
   17a90:	ldr	r2, [pc, #88]	; 17af0 <__assert_fail@plt+0x69ec>
   17a94:	mov	r1, r0
   17a98:	mov	r0, #1
   17a9c:	bl	1102c <__printf_chk@plt>
   17aa0:	mov	r2, #5
   17aa4:	ldr	r1, [pc, #72]	; 17af4 <__assert_fail@plt+0x69f0>
   17aa8:	mov	r0, #0
   17aac:	bl	10ef4 <dcgettext@plt>
   17ab0:	ldr	r3, [pc, #64]	; 17af8 <__assert_fail@plt+0x69f4>
   17ab4:	ldr	r2, [pc, #64]	; 17afc <__assert_fail@plt+0x69f8>
   17ab8:	mov	r1, r0
   17abc:	mov	r0, #1
   17ac0:	bl	1102c <__printf_chk@plt>
   17ac4:	mov	r2, #5
   17ac8:	ldr	r1, [pc, #48]	; 17b00 <__assert_fail@plt+0x69fc>
   17acc:	mov	r0, #0
   17ad0:	bl	10ef4 <dcgettext@plt>
   17ad4:	ldr	r2, [pc, #40]	; 17b04 <__assert_fail@plt+0x6a00>
   17ad8:	pop	{r4, lr}
   17adc:	mov	r1, r0
   17ae0:	mov	r0, #1
   17ae4:	b	1102c <__printf_chk@plt>
   17ae8:	andeq	fp, r2, r4, ror r1
   17aec:			; <UNDEFINED> instruction: 0x0001acb4
   17af0:	andeq	sl, r1, r8, asr #25
   17af4:	andeq	sl, r1, r0, ror #25
   17af8:	andeq	sl, r1, r4, ror #13
   17afc:	andeq	sl, r1, ip, lsl #14
   17b00:	strdeq	sl, [r1], -r4
   17b04:	andeq	sl, r1, ip, lsl sp
   17b08:	push	{r4, r5, r6, lr}
   17b0c:	mov	r6, r0
   17b10:	mov	r5, r1
   17b14:	mov	r4, r2
   17b18:	bl	198fc <__assert_fail@plt+0x87f8>
   17b1c:	cmp	r0, #0
   17b20:	popne	{r4, r5, r6, pc}
   17b24:	cmp	r6, #0
   17b28:	beq	17b38 <__assert_fail@plt+0x6a34>
   17b2c:	cmp	r5, #0
   17b30:	cmpne	r4, #0
   17b34:	popeq	{r4, r5, r6, pc}
   17b38:	bl	18184 <__assert_fail@plt+0x7080>
   17b3c:	push	{r4, lr}
   17b40:	bl	18fdc <__assert_fail@plt+0x7ed8>
   17b44:	cmp	r0, #0
   17b48:	popne	{r4, pc}
   17b4c:	bl	18184 <__assert_fail@plt+0x7080>
   17b50:	push	{r4, lr}
   17b54:	bl	18fdc <__assert_fail@plt+0x7ed8>
   17b58:	cmp	r0, #0
   17b5c:	popne	{r4, pc}
   17b60:	bl	18184 <__assert_fail@plt+0x7080>
   17b64:	push	{r4, lr}
   17b68:	bl	18fdc <__assert_fail@plt+0x7ed8>
   17b6c:	cmp	r0, #0
   17b70:	popne	{r4, pc}
   17b74:	bl	18184 <__assert_fail@plt+0x7080>
   17b78:	push	{r4, r5, r6, lr}
   17b7c:	mov	r5, r0
   17b80:	mov	r4, r1
   17b84:	bl	19008 <__assert_fail@plt+0x7f04>
   17b88:	cmp	r0, #0
   17b8c:	popne	{r4, r5, r6, pc}
   17b90:	adds	r4, r4, #0
   17b94:	movne	r4, #1
   17b98:	cmp	r5, #0
   17b9c:	orreq	r4, r4, #1
   17ba0:	cmp	r4, #0
   17ba4:	popeq	{r4, r5, r6, pc}
   17ba8:	bl	18184 <__assert_fail@plt+0x7080>
   17bac:	push	{r4, lr}
   17bb0:	cmp	r1, #0
   17bb4:	orreq	r1, r1, #1
   17bb8:	bl	19008 <__assert_fail@plt+0x7f04>
   17bbc:	cmp	r0, #0
   17bc0:	popne	{r4, pc}
   17bc4:	bl	18184 <__assert_fail@plt+0x7080>
   17bc8:	push	{r4, r5, r6, lr}
   17bcc:	mov	r6, r0
   17bd0:	mov	r5, r1
   17bd4:	mov	r4, r2
   17bd8:	bl	198fc <__assert_fail@plt+0x87f8>
   17bdc:	cmp	r0, #0
   17be0:	popne	{r4, r5, r6, pc}
   17be4:	cmp	r6, #0
   17be8:	beq	17bf8 <__assert_fail@plt+0x6af4>
   17bec:	cmp	r5, #0
   17bf0:	cmpne	r4, #0
   17bf4:	popeq	{r4, r5, r6, pc}
   17bf8:	bl	18184 <__assert_fail@plt+0x7080>
   17bfc:	cmp	r2, #0
   17c00:	cmpne	r1, #0
   17c04:	moveq	r2, #1
   17c08:	moveq	r1, r2
   17c0c:	push	{r4, lr}
   17c10:	bl	198fc <__assert_fail@plt+0x87f8>
   17c14:	cmp	r0, #0
   17c18:	popne	{r4, pc}
   17c1c:	bl	18184 <__assert_fail@plt+0x7080>
   17c20:	push	{r4, lr}
   17c24:	mov	r2, r1
   17c28:	mov	r1, r0
   17c2c:	mov	r0, #0
   17c30:	bl	198fc <__assert_fail@plt+0x87f8>
   17c34:	cmp	r0, #0
   17c38:	popne	{r4, pc}
   17c3c:	bl	18184 <__assert_fail@plt+0x7080>
   17c40:	cmp	r1, #0
   17c44:	cmpne	r0, #0
   17c48:	moveq	r2, #1
   17c4c:	movne	r2, r1
   17c50:	moveq	r1, r2
   17c54:	movne	r1, r0
   17c58:	push	{r4, lr}
   17c5c:	mov	r0, #0
   17c60:	bl	198fc <__assert_fail@plt+0x87f8>
   17c64:	cmp	r0, #0
   17c68:	popne	{r4, pc}
   17c6c:	bl	18184 <__assert_fail@plt+0x7080>
   17c70:	cmp	r0, #0
   17c74:	push	{r4, r5, r6, lr}
   17c78:	mov	r5, r1
   17c7c:	ldr	r4, [r1]
   17c80:	beq	17cbc <__assert_fail@plt+0x6bb8>
   17c84:	lsr	r2, r4, #1
   17c88:	add	r3, r2, #1
   17c8c:	mvn	r3, r3
   17c90:	cmp	r4, r3
   17c94:	bhi	17cd8 <__assert_fail@plt+0x6bd4>
   17c98:	add	r4, r4, #1
   17c9c:	add	r4, r4, r2
   17ca0:	mov	r1, r4
   17ca4:	mov	r2, #1
   17ca8:	bl	198fc <__assert_fail@plt+0x87f8>
   17cac:	cmp	r0, #0
   17cb0:	beq	17cdc <__assert_fail@plt+0x6bd8>
   17cb4:	str	r4, [r5]
   17cb8:	pop	{r4, r5, r6, pc}
   17cbc:	cmp	r4, #0
   17cc0:	moveq	r4, #64	; 0x40
   17cc4:	mov	r1, r4
   17cc8:	mov	r2, #1
   17ccc:	bl	198fc <__assert_fail@plt+0x87f8>
   17cd0:	cmp	r0, #0
   17cd4:	bne	17cb4 <__assert_fail@plt+0x6bb0>
   17cd8:	bl	18184 <__assert_fail@plt+0x7080>
   17cdc:	cmp	r4, #0
   17ce0:	bne	17cd8 <__assert_fail@plt+0x6bd4>
   17ce4:	str	r4, [r5]
   17ce8:	pop	{r4, r5, r6, pc}
   17cec:	cmp	r0, #0
   17cf0:	push	{r4, r5, r6, lr}
   17cf4:	mov	r5, r1
   17cf8:	ldr	r4, [r1]
   17cfc:	mov	r6, r2
   17d00:	beq	17d44 <__assert_fail@plt+0x6c40>
   17d04:	lsr	r1, r4, #1
   17d08:	add	r3, r1, #1
   17d0c:	mvn	r3, r3
   17d10:	cmp	r4, r3
   17d14:	bhi	17d7c <__assert_fail@plt+0x6c78>
   17d18:	add	r4, r4, #1
   17d1c:	add	r4, r4, r1
   17d20:	mov	r1, r4
   17d24:	bl	198fc <__assert_fail@plt+0x87f8>
   17d28:	cmp	r0, #0
   17d2c:	bne	17d3c <__assert_fail@plt+0x6c38>
   17d30:	cmp	r4, #0
   17d34:	cmpne	r6, #0
   17d38:	bne	17d7c <__assert_fail@plt+0x6c78>
   17d3c:	str	r4, [r5]
   17d40:	pop	{r4, r5, r6, pc}
   17d44:	cmp	r4, #0
   17d48:	bne	17d64 <__assert_fail@plt+0x6c60>
   17d4c:	mov	r1, r2
   17d50:	mov	r0, #64	; 0x40
   17d54:	bl	19a3c <__assert_fail@plt+0x8938>
   17d58:	cmp	r0, #0
   17d5c:	movne	r4, r0
   17d60:	addeq	r4, r0, #1
   17d64:	mov	r2, r6
   17d68:	mov	r1, r4
   17d6c:	mov	r0, #0
   17d70:	bl	198fc <__assert_fail@plt+0x87f8>
   17d74:	cmp	r0, #0
   17d78:	bne	17d3c <__assert_fail@plt+0x6c38>
   17d7c:	bl	18184 <__assert_fail@plt+0x7080>
   17d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d84:	sub	sp, sp, #12
   17d88:	ldr	r6, [r1]
   17d8c:	mov	r8, r1
   17d90:	mov	r9, r0
   17d94:	asrs	r4, r6, #1
   17d98:	mov	sl, r2
   17d9c:	mov	fp, r3
   17da0:	ldr	r7, [sp, #48]	; 0x30
   17da4:	bmi	17f20 <__assert_fail@plt+0x6e1c>
   17da8:	mvn	r1, #-2147483648	; 0x80000000
   17dac:	sub	r1, r1, r4
   17db0:	cmp	r6, r1
   17db4:	movle	r1, #0
   17db8:	movgt	r1, #1
   17dbc:	mvn	r3, fp
   17dc0:	cmp	r1, #0
   17dc4:	addeq	r4, r4, r6
   17dc8:	mvnne	r4, #-2147483648	; 0x80000000
   17dcc:	lsr	r3, r3, #31
   17dd0:	cmp	fp, r4
   17dd4:	movge	r2, #0
   17dd8:	andlt	r2, r3, #1
   17ddc:	cmp	r2, #0
   17de0:	beq	17ed0 <__assert_fail@plt+0x6dcc>
   17de4:	cmp	r7, #0
   17de8:	blt	17fb8 <__assert_fail@plt+0x6eb4>
   17dec:	bne	17fb0 <__assert_fail@plt+0x6eac>
   17df0:	mov	r5, #64	; 0x40
   17df4:	mov	r1, r7
   17df8:	mov	r0, r5
   17dfc:	str	r3, [sp, #4]
   17e00:	bl	19c48 <__assert_fail@plt+0x8b44>
   17e04:	mov	r1, r7
   17e08:	mov	r4, r0
   17e0c:	mov	r0, r5
   17e10:	bl	19e68 <__assert_fail@plt+0x8d64>
   17e14:	ldr	r3, [sp, #4]
   17e18:	sub	r5, r5, r1
   17e1c:	cmp	r9, #0
   17e20:	sub	r2, r4, r6
   17e24:	streq	r9, [r8]
   17e28:	cmp	r2, sl
   17e2c:	bge	17eb0 <__assert_fail@plt+0x6dac>
   17e30:	cmp	sl, #0
   17e34:	blt	17f50 <__assert_fail@plt+0x6e4c>
   17e38:	cmp	r6, #0
   17e3c:	blt	17e5c <__assert_fail@plt+0x6d58>
   17e40:	mvn	r2, #-2147483648	; 0x80000000
   17e44:	sub	r2, r2, sl
   17e48:	cmp	r6, r2
   17e4c:	movle	r2, #0
   17e50:	movgt	r2, #1
   17e54:	cmp	r2, #0
   17e58:	bne	17f4c <__assert_fail@plt+0x6e48>
   17e5c:	add	r6, r6, sl
   17e60:	cmp	fp, r6
   17e64:	movge	r3, #0
   17e68:	andlt	r3, r3, #1
   17e6c:	cmp	r3, #0
   17e70:	mov	r4, r6
   17e74:	bne	17f4c <__assert_fail@plt+0x6e48>
   17e78:	cmp	r7, #0
   17e7c:	blt	17f64 <__assert_fail@plt+0x6e60>
   17e80:	beq	17eac <__assert_fail@plt+0x6da8>
   17e84:	cmp	r6, #0
   17e88:	blt	18008 <__assert_fail@plt+0x6f04>
   17e8c:	mov	r1, r7
   17e90:	mvn	r0, #-2147483648	; 0x80000000
   17e94:	bl	19c48 <__assert_fail@plt+0x8b44>
   17e98:	cmp	r6, r0
   17e9c:	movle	r0, #0
   17ea0:	movgt	r0, #1
   17ea4:	cmp	r0, #0
   17ea8:	bne	17f4c <__assert_fail@plt+0x6e48>
   17eac:	mul	r5, r6, r7
   17eb0:	mov	r1, r5
   17eb4:	mov	r0, r9
   17eb8:	bl	19008 <__assert_fail@plt+0x7f04>
   17ebc:	cmp	r0, #0
   17ec0:	beq	17f34 <__assert_fail@plt+0x6e30>
   17ec4:	str	r4, [r8]
   17ec8:	add	sp, sp, #12
   17ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ed0:	cmp	r7, #0
   17ed4:	blt	17f90 <__assert_fail@plt+0x6e8c>
   17ed8:	beq	17df0 <__assert_fail@plt+0x6cec>
   17edc:	cmp	r4, #0
   17ee0:	blt	17fc0 <__assert_fail@plt+0x6ebc>
   17ee4:	mov	r1, r7
   17ee8:	mvn	r0, #-2147483648	; 0x80000000
   17eec:	str	r3, [sp, #4]
   17ef0:	bl	19c48 <__assert_fail@plt+0x8b44>
   17ef4:	ldr	r3, [sp, #4]
   17ef8:	cmp	r0, r4
   17efc:	movge	r0, #0
   17f00:	movlt	r0, #1
   17f04:	cmp	r0, #0
   17f08:	mvnne	r5, #-2147483648	; 0x80000000
   17f0c:	bne	17df4 <__assert_fail@plt+0x6cf0>
   17f10:	mul	r5, r7, r4
   17f14:	cmp	r5, #63	; 0x3f
   17f18:	bgt	17e1c <__assert_fail@plt+0x6d18>
   17f1c:	b	17df0 <__assert_fail@plt+0x6cec>
   17f20:	rsb	r1, r4, #-2147483648	; 0x80000000
   17f24:	cmp	r6, r1
   17f28:	movge	r1, #0
   17f2c:	movlt	r1, #1
   17f30:	b	17dbc <__assert_fail@plt+0x6cb8>
   17f34:	adds	r5, r5, #0
   17f38:	movne	r5, #1
   17f3c:	cmp	r9, #0
   17f40:	orreq	r5, r5, #1
   17f44:	cmp	r5, #0
   17f48:	beq	17ec4 <__assert_fail@plt+0x6dc0>
   17f4c:	bl	18184 <__assert_fail@plt+0x7080>
   17f50:	rsb	r2, sl, #-2147483648	; 0x80000000
   17f54:	cmp	r6, r2
   17f58:	movge	r2, #0
   17f5c:	movlt	r2, #1
   17f60:	b	17e54 <__assert_fail@plt+0x6d50>
   17f64:	cmp	r6, #0
   17f68:	blt	17fec <__assert_fail@plt+0x6ee8>
   17f6c:	cmn	r7, #1
   17f70:	beq	17eac <__assert_fail@plt+0x6da8>
   17f74:	mov	r1, r7
   17f78:	mov	r0, #-2147483648	; 0x80000000
   17f7c:	bl	19c48 <__assert_fail@plt+0x8b44>
   17f80:	cmp	r6, r0
   17f84:	movle	r0, #0
   17f88:	movgt	r0, #1
   17f8c:	b	17ea4 <__assert_fail@plt+0x6da0>
   17f90:	cmp	r4, #0
   17f94:	blt	1802c <__assert_fail@plt+0x6f28>
   17f98:	cmn	r7, #1
   17f9c:	beq	17f10 <__assert_fail@plt+0x6e0c>
   17fa0:	str	r3, [sp, #4]
   17fa4:	mov	r1, r7
   17fa8:	mov	r0, #-2147483648	; 0x80000000
   17fac:	b	17ef0 <__assert_fail@plt+0x6dec>
   17fb0:	mov	r4, fp
   17fb4:	b	17ee4 <__assert_fail@plt+0x6de0>
   17fb8:	mov	r4, fp
   17fbc:	b	17f98 <__assert_fail@plt+0x6e94>
   17fc0:	cmn	r4, #1
   17fc4:	beq	17f10 <__assert_fail@plt+0x6e0c>
   17fc8:	mov	r1, r4
   17fcc:	mov	r0, #-2147483648	; 0x80000000
   17fd0:	str	r3, [sp, #4]
   17fd4:	bl	19c48 <__assert_fail@plt+0x8b44>
   17fd8:	ldr	r3, [sp, #4]
   17fdc:	cmp	r7, r0
   17fe0:	movle	r0, #0
   17fe4:	movgt	r0, #1
   17fe8:	b	17f04 <__assert_fail@plt+0x6e00>
   17fec:	mov	r1, r7
   17ff0:	mvn	r0, #-2147483648	; 0x80000000
   17ff4:	bl	19c48 <__assert_fail@plt+0x8b44>
   17ff8:	cmp	r6, r0
   17ffc:	movge	r0, #0
   18000:	movlt	r0, #1
   18004:	b	17ea4 <__assert_fail@plt+0x6da0>
   18008:	cmn	r6, #1
   1800c:	beq	17eac <__assert_fail@plt+0x6da8>
   18010:	mov	r1, r6
   18014:	mov	r0, #-2147483648	; 0x80000000
   18018:	bl	19c48 <__assert_fail@plt+0x8b44>
   1801c:	cmp	r7, r0
   18020:	movle	r0, #0
   18024:	movgt	r0, #1
   18028:	b	17ea4 <__assert_fail@plt+0x6da0>
   1802c:	mov	r1, r7
   18030:	mvn	r0, #-2147483648	; 0x80000000
   18034:	str	r3, [sp, #4]
   18038:	bl	19c48 <__assert_fail@plt+0x8b44>
   1803c:	ldr	r3, [sp, #4]
   18040:	cmp	r0, r4
   18044:	movle	r0, #0
   18048:	movgt	r0, #1
   1804c:	b	17f04 <__assert_fail@plt+0x6e00>
   18050:	push	{r4, lr}
   18054:	mov	r1, #1
   18058:	bl	18f94 <__assert_fail@plt+0x7e90>
   1805c:	cmp	r0, #0
   18060:	popne	{r4, pc}
   18064:	bl	18184 <__assert_fail@plt+0x7080>
   18068:	push	{r4, lr}
   1806c:	mov	r1, #1
   18070:	bl	18f94 <__assert_fail@plt+0x7e90>
   18074:	cmp	r0, #0
   18078:	popne	{r4, pc}
   1807c:	bl	18184 <__assert_fail@plt+0x7080>
   18080:	push	{r4, lr}
   18084:	bl	18f94 <__assert_fail@plt+0x7e90>
   18088:	cmp	r0, #0
   1808c:	popne	{r4, pc}
   18090:	bl	18184 <__assert_fail@plt+0x7080>
   18094:	push	{r4, lr}
   18098:	bl	18f94 <__assert_fail@plt+0x7e90>
   1809c:	cmp	r0, #0
   180a0:	popne	{r4, pc}
   180a4:	bl	18184 <__assert_fail@plt+0x7080>
   180a8:	push	{r4, r5, r6, lr}
   180ac:	mov	r6, r0
   180b0:	mov	r0, r1
   180b4:	mov	r4, r1
   180b8:	bl	18fdc <__assert_fail@plt+0x7ed8>
   180bc:	subs	r5, r0, #0
   180c0:	beq	180d8 <__assert_fail@plt+0x6fd4>
   180c4:	mov	r2, r4
   180c8:	mov	r1, r6
   180cc:	bl	10eb8 <memcpy@plt>
   180d0:	mov	r0, r5
   180d4:	pop	{r4, r5, r6, pc}
   180d8:	bl	18184 <__assert_fail@plt+0x7080>
   180dc:	push	{r4, r5, r6, lr}
   180e0:	mov	r6, r0
   180e4:	mov	r0, r1
   180e8:	mov	r4, r1
   180ec:	bl	18fdc <__assert_fail@plt+0x7ed8>
   180f0:	subs	r5, r0, #0
   180f4:	beq	1810c <__assert_fail@plt+0x7008>
   180f8:	mov	r2, r4
   180fc:	mov	r1, r6
   18100:	bl	10eb8 <memcpy@plt>
   18104:	mov	r0, r5
   18108:	pop	{r4, r5, r6, pc}
   1810c:	bl	18184 <__assert_fail@plt+0x7080>
   18110:	push	{r4, r5, r6, lr}
   18114:	mov	r6, r0
   18118:	add	r0, r1, #1
   1811c:	mov	r4, r1
   18120:	bl	18fdc <__assert_fail@plt+0x7ed8>
   18124:	subs	r5, r0, #0
   18128:	beq	18148 <__assert_fail@plt+0x7044>
   1812c:	mov	r3, #0
   18130:	mov	r1, r6
   18134:	strb	r3, [r5, r4]
   18138:	mov	r2, r4
   1813c:	bl	10eb8 <memcpy@plt>
   18140:	mov	r0, r5
   18144:	pop	{r4, r5, r6, pc}
   18148:	bl	18184 <__assert_fail@plt+0x7080>
   1814c:	push	{r4, r5, r6, lr}
   18150:	mov	r6, r0
   18154:	bl	10fd8 <strlen@plt>
   18158:	add	r4, r0, #1
   1815c:	mov	r0, r4
   18160:	bl	18fdc <__assert_fail@plt+0x7ed8>
   18164:	subs	r5, r0, #0
   18168:	beq	18180 <__assert_fail@plt+0x707c>
   1816c:	mov	r2, r4
   18170:	mov	r1, r6
   18174:	bl	10eb8 <memcpy@plt>
   18178:	mov	r0, r5
   1817c:	pop	{r4, r5, r6, pc}
   18180:	bl	18184 <__assert_fail@plt+0x7080>
   18184:	ldr	r3, [pc, #44]	; 181b8 <__assert_fail@plt+0x70b4>
   18188:	push	{r4, lr}
   1818c:	mov	r2, #5
   18190:	ldr	r1, [pc, #36]	; 181bc <__assert_fail@plt+0x70b8>
   18194:	mov	r0, #0
   18198:	ldr	r4, [r3]
   1819c:	bl	10ef4 <dcgettext@plt>
   181a0:	ldr	r2, [pc, #24]	; 181c0 <__assert_fail@plt+0x70bc>
   181a4:	mov	r1, #0
   181a8:	mov	r3, r0
   181ac:	mov	r0, r4
   181b0:	bl	10f6c <error@plt>
   181b4:	bl	110ec <abort@plt>
   181b8:	andeq	fp, r2, ip, lsl #2
   181bc:	andeq	sl, r1, ip, ror #26
   181c0:			; <UNDEFINED> instruction: 0x0001a8b0
   181c4:	andeq	r0, r0, r0
   181c8:	cmp	r2, #36	; 0x24
   181cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d0:	sub	sp, sp, #52	; 0x34
   181d4:	bhi	18f64 <__assert_fail@plt+0x7e60>
   181d8:	cmp	r1, #0
   181dc:	mov	r6, r2
   181e0:	mov	sl, r0
   181e4:	mov	r5, r1
   181e8:	mov	r8, r3
   181ec:	addeq	r5, sp, #44	; 0x2c
   181f0:	bl	10ff0 <__errno_location@plt>
   181f4:	mov	r3, #0
   181f8:	str	r3, [r0]
   181fc:	mov	fp, r0
   18200:	bl	10fc0 <__ctype_b_loc@plt>
   18204:	ldrb	r3, [sl]
   18208:	mov	r2, sl
   1820c:	ldr	r0, [r0]
   18210:	b	18218 <__assert_fail@plt+0x7114>
   18214:	ldrb	r3, [r2, #1]!
   18218:	lsl	r1, r3, #1
   1821c:	ldrh	r4, [r0, r1]
   18220:	ands	r4, r4, #8192	; 0x2000
   18224:	bne	18214 <__assert_fail@plt+0x7110>
   18228:	cmp	r3, #45	; 0x2d
   1822c:	bne	18240 <__assert_fail@plt+0x713c>
   18230:	mov	r4, #4
   18234:	mov	r0, r4
   18238:	add	sp, sp, #52	; 0x34
   1823c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18240:	mov	r2, r6
   18244:	mov	r3, r4
   18248:	mov	r1, r5
   1824c:	mov	r0, sl
   18250:	bl	10ec4 <__strtoull_internal@plt>
   18254:	ldr	r9, [r5]
   18258:	cmp	sl, r9
   1825c:	mov	r6, r0
   18260:	mov	r7, r1
   18264:	beq	182ac <__assert_fail@plt+0x71a8>
   18268:	ldr	r4, [fp]
   1826c:	cmp	r4, #0
   18270:	bne	1829c <__assert_fail@plt+0x7198>
   18274:	ldr	r3, [sp, #88]	; 0x58
   18278:	cmp	r3, #0
   1827c:	beq	1828c <__assert_fail@plt+0x7188>
   18280:	ldrb	sl, [r9]
   18284:	cmp	sl, #0
   18288:	bne	182e0 <__assert_fail@plt+0x71dc>
   1828c:	mov	r0, r4
   18290:	strd	r6, [r8]
   18294:	add	sp, sp, #52	; 0x34
   18298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1829c:	cmp	r4, #34	; 0x22
   182a0:	bne	18230 <__assert_fail@plt+0x712c>
   182a4:	mov	r4, #1
   182a8:	b	18274 <__assert_fail@plt+0x7170>
   182ac:	ldr	r3, [sp, #88]	; 0x58
   182b0:	cmp	r3, #0
   182b4:	beq	18230 <__assert_fail@plt+0x712c>
   182b8:	ldrb	sl, [r9]
   182bc:	cmp	sl, #0
   182c0:	beq	18230 <__assert_fail@plt+0x712c>
   182c4:	mov	r1, sl
   182c8:	mov	r0, r3
   182cc:	bl	10fe4 <strchr@plt>
   182d0:	cmp	r0, #0
   182d4:	movne	r6, #1
   182d8:	movne	r7, #0
   182dc:	beq	18230 <__assert_fail@plt+0x712c>
   182e0:	mov	r1, sl
   182e4:	ldr	r0, [sp, #88]	; 0x58
   182e8:	bl	10fe4 <strchr@plt>
   182ec:	cmp	r0, #0
   182f0:	beq	18e50 <__assert_fail@plt+0x7d4c>
   182f4:	sub	r3, sl, #69	; 0x45
   182f8:	cmp	r3, #47	; 0x2f
   182fc:	ldrls	pc, [pc, r3, lsl #2]
   18300:	b	183f4 <__assert_fail@plt+0x72f0>
   18304:	andeq	r8, r1, r4, asr #7
   18308:	strdeq	r8, [r1], -r4
   1830c:	andeq	r8, r1, r4, asr #7
   18310:	strdeq	r8, [r1], -r4
   18314:	strdeq	r8, [r1], -r4
   18318:	strdeq	r8, [r1], -r4
   1831c:	andeq	r8, r1, r4, asr #7
   18320:	strdeq	r8, [r1], -r4
   18324:	andeq	r8, r1, r4, asr #7
   18328:	strdeq	r8, [r1], -r4
   1832c:	strdeq	r8, [r1], -r4
   18330:	andeq	r8, r1, r4, asr #7
   18334:	strdeq	r8, [r1], -r4
   18338:	strdeq	r8, [r1], -r4
   1833c:	strdeq	r8, [r1], -r4
   18340:	andeq	r8, r1, r4, asr #7
   18344:	strdeq	r8, [r1], -r4
   18348:	strdeq	r8, [r1], -r4
   1834c:	strdeq	r8, [r1], -r4
   18350:	strdeq	r8, [r1], -r4
   18354:	andeq	r8, r1, r4, asr #7
   18358:	andeq	r8, r1, r4, asr #7
   1835c:	strdeq	r8, [r1], -r4
   18360:	strdeq	r8, [r1], -r4
   18364:	strdeq	r8, [r1], -r4
   18368:	strdeq	r8, [r1], -r4
   1836c:	strdeq	r8, [r1], -r4
   18370:	strdeq	r8, [r1], -r4
   18374:	strdeq	r8, [r1], -r4
   18378:	strdeq	r8, [r1], -r4
   1837c:	strdeq	r8, [r1], -r4
   18380:	strdeq	r8, [r1], -r4
   18384:	strdeq	r8, [r1], -r4
   18388:	strdeq	r8, [r1], -r4
   1838c:	andeq	r8, r1, r4, asr #7
   18390:	strdeq	r8, [r1], -r4
   18394:	strdeq	r8, [r1], -r4
   18398:	strdeq	r8, [r1], -r4
   1839c:	andeq	r8, r1, r4, asr #7
   183a0:	strdeq	r8, [r1], -r4
   183a4:	andeq	r8, r1, r4, asr #7
   183a8:	strdeq	r8, [r1], -r4
   183ac:	strdeq	r8, [r1], -r4
   183b0:	strdeq	r8, [r1], -r4
   183b4:	strdeq	r8, [r1], -r4
   183b8:	strdeq	r8, [r1], -r4
   183bc:	strdeq	r8, [r1], -r4
   183c0:	andeq	r8, r1, r4, asr #7
   183c4:	mov	r1, #48	; 0x30
   183c8:	ldr	r0, [sp, #88]	; 0x58
   183cc:	bl	10fe4 <strchr@plt>
   183d0:	cmp	r0, #0
   183d4:	beq	18ee4 <__assert_fail@plt+0x7de0>
   183d8:	ldrb	r3, [r9, #1]
   183dc:	cmp	r3, #68	; 0x44
   183e0:	beq	18ec4 <__assert_fail@plt+0x7dc0>
   183e4:	cmp	r3, #105	; 0x69
   183e8:	beq	18e94 <__assert_fail@plt+0x7d90>
   183ec:	cmp	r3, #66	; 0x42
   183f0:	beq	18ec4 <__assert_fail@plt+0x7dc0>
   183f4:	ldr	r3, [pc, #2948]	; 18f80 <__assert_fail@plt+0x7e7c>
   183f8:	mvn	r2, #0
   183fc:	mov	r1, #1024	; 0x400
   18400:	mov	lr, #0
   18404:	strd	r2, [sp]
   18408:	mov	r3, #1
   1840c:	str	r3, [sp, #12]
   18410:	sub	sl, sl, #66	; 0x42
   18414:	cmp	sl, #53	; 0x35
   18418:	ldrls	pc, [pc, sl, lsl #2]
   1841c:	b	18e50 <__assert_fail@plt+0x7d4c>
   18420:	andeq	r8, r1, r0, lsr #28
   18424:	andeq	r8, r1, r0, asr lr
   18428:	andeq	r8, r1, r0, asr lr
   1842c:	muleq	r1, ip, ip
   18430:	andeq	r8, r1, r0, asr lr
   18434:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18438:	andeq	r8, r1, r0, asr lr
   1843c:	andeq	r8, r1, r0, asr lr
   18440:	andeq	r8, r1, r0, asr lr
   18444:	andeq	r8, r1, ip, asr lr
   18448:	andeq	r8, r1, r0, asr lr
   1844c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18450:	andeq	r8, r1, r0, asr lr
   18454:	andeq	r8, r1, r0, asr lr
   18458:	andeq	r8, r1, r4, lsl #11
   1845c:	andeq	r8, r1, r0, asr lr
   18460:	andeq	r8, r1, r0, asr lr
   18464:	andeq	r8, r1, r0, asr lr
   18468:	andeq	r8, r1, r4, lsl #18
   1846c:	andeq	r8, r1, r0, asr lr
   18470:	andeq	r8, r1, r0, asr lr
   18474:	andeq	r8, r1, r0, asr lr
   18478:	andeq	r8, r1, r0, asr lr
   1847c:	ldrdeq	r8, [r1], -ip
   18480:	andeq	r8, r1, r8, lsr sl
   18484:	andeq	r8, r1, r0, asr lr
   18488:	andeq	r8, r1, r0, asr lr
   1848c:	andeq	r8, r1, r0, asr lr
   18490:	andeq	r8, r1, r0, asr lr
   18494:	andeq	r8, r1, r0, asr lr
   18498:	andeq	r8, r1, r0, asr lr
   1849c:	andeq	r8, r1, r0, asr lr
   184a0:	andeq	r8, r1, r8, lsl #20
   184a4:	andeq	r8, r1, r0, lsl #20
   184a8:	andeq	r8, r1, r0, asr lr
   184ac:	andeq	r8, r1, r0, asr lr
   184b0:	andeq	r8, r1, r0, asr lr
   184b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184b8:	andeq	r8, r1, r0, asr lr
   184bc:	andeq	r8, r1, r0, asr lr
   184c0:	andeq	r8, r1, r0, asr lr
   184c4:	andeq	r8, r1, ip, asr lr
   184c8:	andeq	r8, r1, r0, asr lr
   184cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184d0:	andeq	r8, r1, r0, asr lr
   184d4:	andeq	r8, r1, r0, asr lr
   184d8:	andeq	r8, r1, r0, asr lr
   184dc:	andeq	r8, r1, r0, asr lr
   184e0:	andeq	r8, r1, r0, asr lr
   184e4:	andeq	r8, r1, r0, asr lr
   184e8:	andeq	r8, r1, r4, lsl #18
   184ec:	andeq	r8, r1, r0, asr lr
   184f0:	andeq	r8, r1, r0, asr lr
   184f4:	andeq	r8, r1, r4, ror #19
   184f8:	mul	r0, r6, lr
   184fc:	ldrd	sl, [sp]
   18500:	umull	r2, r3, r6, r1
   18504:	mla	r0, r1, r7, r0
   18508:	cmp	r7, fp
   1850c:	cmpeq	r6, sl
   18510:	add	r3, r0, r3
   18514:	mvnhi	r3, #0
   18518:	mvnhi	r2, #0
   1851c:	mul	r6, r1, r3
   18520:	umull	r0, r1, r1, r2
   18524:	mla	lr, lr, r2, r6
   18528:	ldrd	r6, [sp]
   1852c:	movhi	ip, #1
   18530:	movls	ip, #0
   18534:	cmp	r7, r3
   18538:	cmpeq	r6, r2
   1853c:	mvncc	r0, #0
   18540:	add	r1, lr, r1
   18544:	mov	sl, r6
   18548:	movcc	r1, r0
   1854c:	mov	fp, r7
   18550:	cmp	fp, r3
   18554:	cmpeq	sl, r2
   18558:	mov	r6, r0
   1855c:	mov	r7, r1
   18560:	orrcc	ip, ip, #1
   18564:	ldr	r2, [sp, #12]
   18568:	orr	r4, r4, ip
   1856c:	add	r3, r9, r2
   18570:	str	r3, [r5]
   18574:	ldrb	r3, [r9, r2]
   18578:	cmp	r3, #0
   1857c:	orrne	r4, r4, #2
   18580:	b	1828c <__assert_fail@plt+0x7188>
   18584:	ldrd	sl, [sp]
   18588:	umull	r2, r3, r6, r1
   1858c:	mul	r0, r6, lr
   18590:	cmp	r7, fp
   18594:	cmpeq	r6, sl
   18598:	mvnhi	r2, #0
   1859c:	mla	r0, r1, r7, r0
   185a0:	umull	sl, fp, r2, r1
   185a4:	add	r3, r0, r3
   185a8:	mul	r0, lr, r2
   185ac:	mvnhi	r3, #0
   185b0:	strd	sl, [sp, #16]
   185b4:	ldrd	sl, [sp]
   185b8:	mla	r0, r1, r3, r0
   185bc:	ldr	ip, [sp, #20]
   185c0:	cmp	r3, fp
   185c4:	add	r0, r0, ip
   185c8:	cmpeq	r2, sl
   185cc:	str	r0, [sp, #20]
   185d0:	bls	185e8 <__assert_fail@plt+0x74e4>
   185d4:	mvn	sl, #0
   185d8:	mvn	fp, #0
   185dc:	strd	sl, [sp, #16]
   185e0:	ldr	r0, [sp, #20]
   185e4:	ldrd	sl, [sp]
   185e8:	cmp	r7, fp
   185ec:	cmpeq	r6, sl
   185f0:	mul	r0, r1, r0
   185f4:	ldrd	r6, [sp, #16]
   185f8:	mla	ip, lr, r6, r0
   185fc:	mov	r0, r6
   18600:	movhi	r0, #1
   18604:	movls	r0, #0
   18608:	cmp	r3, fp
   1860c:	cmpeq	r2, sl
   18610:	ldrd	r2, [sp, #16]
   18614:	umull	r6, r7, r1, r6
   18618:	orrhi	r0, r0, #1
   1861c:	cmp	fp, r3
   18620:	cmpeq	sl, r2
   18624:	add	r7, ip, r7
   18628:	bcc	18f34 <__assert_fail@plt+0x7e30>
   1862c:	mov	sl, r6
   18630:	mov	fp, r7
   18634:	strd	r6, [sp, #24]
   18638:	mul	r3, r1, fp
   1863c:	umull	r6, r7, r1, sl
   18640:	mla	ip, lr, sl, r3
   18644:	ldrd	sl, [sp]
   18648:	ldrd	r2, [sp, #16]
   1864c:	add	r7, ip, r7
   18650:	cmp	fp, r3
   18654:	cmpeq	sl, r2
   18658:	mov	r3, fp
   1865c:	mov	r2, sl
   18660:	ldrd	sl, [sp, #24]
   18664:	orrcc	r0, r0, #1
   18668:	str	r0, [sp, #16]
   1866c:	cmp	r3, fp
   18670:	cmpeq	r2, sl
   18674:	bcs	18bcc <__assert_fail@plt+0x7ac8>
   18678:	mvn	r2, #0
   1867c:	mvn	r3, #0
   18680:	mul	ip, lr, r2
   18684:	ldrd	sl, [sp]
   18688:	mla	ip, r1, r3, ip
   1868c:	umull	r6, r7, r2, r1
   18690:	ldrd	r0, [sp, #24]
   18694:	add	r7, ip, r7
   18698:	cmp	fp, r1
   1869c:	ldr	r1, [sp, #16]
   186a0:	cmpeq	sl, r0
   186a4:	orrcc	r1, r1, #1
   186a8:	cmp	r3, fp
   186ac:	cmpeq	r2, sl
   186b0:	mvnhi	r0, #0
   186b4:	movls	ip, r7
   186b8:	movhi	ip, r0
   186bc:	movls	r0, r6
   186c0:	cmp	r3, fp
   186c4:	cmpeq	r2, sl
   186c8:	mov	r7, ip
   186cc:	mov	r6, r0
   186d0:	movls	ip, r1
   186d4:	orrhi	ip, r1, #1
   186d8:	b	18564 <__assert_fail@plt+0x7460>
   186dc:	ldrd	sl, [sp]
   186e0:	umull	r2, r3, r6, r1
   186e4:	mul	r0, r6, lr
   186e8:	cmp	r7, fp
   186ec:	cmpeq	r6, sl
   186f0:	mvnhi	r2, #0
   186f4:	mla	r0, r1, r7, r0
   186f8:	umull	sl, fp, r2, r1
   186fc:	add	r3, r0, r3
   18700:	mul	r0, lr, r2
   18704:	mvnhi	r3, #0
   18708:	strd	sl, [sp, #16]
   1870c:	ldrd	sl, [sp]
   18710:	mla	r0, r1, r3, r0
   18714:	ldr	ip, [sp, #20]
   18718:	cmp	r3, fp
   1871c:	add	r0, r0, ip
   18720:	cmpeq	r2, sl
   18724:	str	r0, [sp, #20]
   18728:	mvnhi	sl, #0
   1872c:	mvnhi	fp, #0
   18730:	strdhi	sl, [sp, #16]
   18734:	ldrdhi	sl, [sp]
   18738:	ldr	r0, [sp, #16]
   1873c:	cmp	r3, fp
   18740:	ldr	r3, [sp, #20]
   18744:	mul	r0, lr, r0
   18748:	cmpeq	r2, sl
   1874c:	mla	r0, r1, r3, r0
   18750:	ldr	r3, [sp, #16]
   18754:	umull	r2, r3, r3, r1
   18758:	strd	r2, [sp, #24]
   1875c:	movhi	r3, #1
   18760:	movls	r3, #0
   18764:	cmp	r7, fp
   18768:	cmpeq	r6, sl
   1876c:	ldrd	r6, [sp, #16]
   18770:	ldr	r2, [sp, #28]
   18774:	movls	ip, r3
   18778:	orrhi	ip, r3, #1
   1877c:	cmp	r7, fp
   18780:	add	r2, r0, r2
   18784:	cmpeq	r6, sl
   18788:	str	r2, [sp, #28]
   1878c:	mvnhi	r2, #0
   18790:	mvnhi	r3, #0
   18794:	strdhi	r2, [sp, #24]
   18798:	ldrd	r6, [sp, #24]
   1879c:	mul	r2, r1, r7
   187a0:	umull	sl, fp, r1, r6
   187a4:	mla	r3, lr, r6, r2
   187a8:	ldrd	r6, [sp]
   187ac:	str	r3, [sp, #32]
   187b0:	ldrd	r2, [sp, #16]
   187b4:	cmp	r3, r7
   187b8:	cmpeq	r2, r6
   187bc:	ldrd	r2, [sp, #24]
   187c0:	orrhi	ip, ip, #1
   187c4:	cmp	r3, r7
   187c8:	ldr	r3, [sp, #32]
   187cc:	cmpeq	r2, r6
   187d0:	add	r2, r3, fp
   187d4:	mov	fp, r2
   187d8:	bhi	18f1c <__assert_fail@plt+0x7e18>
   187dc:	strd	sl, [sp, #16]
   187e0:	mul	r2, r1, fp
   187e4:	umull	r6, r7, r1, sl
   187e8:	mla	r3, lr, sl, r2
   187ec:	ldrd	sl, [sp]
   187f0:	str	r3, [sp, #32]
   187f4:	ldrd	r2, [sp, #24]
   187f8:	cmp	r3, fp
   187fc:	cmpeq	r2, sl
   18800:	ldrd	r2, [sp, #16]
   18804:	orrhi	ip, ip, #1
   18808:	cmp	fp, r3
   1880c:	ldr	r3, [sp, #32]
   18810:	cmpeq	sl, r2
   18814:	add	r2, r3, r7
   18818:	mov	r7, r2
   1881c:	mvncc	r7, #0
   18820:	mvncc	r6, #0
   18824:	mul	r2, r1, r7
   18828:	mov	sl, r6
   1882c:	strd	r6, [sp, #24]
   18830:	mla	r0, lr, sl, r2
   18834:	ldrd	r2, [sp, #16]
   18838:	ldrd	sl, [sp]
   1883c:	umull	r6, r7, r1, r6
   18840:	cmp	fp, r3
   18844:	cmpeq	sl, r2
   18848:	mov	r3, fp
   1884c:	mov	r2, sl
   18850:	ldrd	sl, [sp, #24]
   18854:	orrcc	ip, ip, #1
   18858:	add	r7, r0, r7
   1885c:	cmp	r3, fp
   18860:	cmpeq	r2, sl
   18864:	mvncc	r6, #0
   18868:	mvncc	r7, #0
   1886c:	umull	sl, fp, r1, r6
   18870:	mul	r3, r1, r7
   18874:	strd	sl, [sp, #16]
   18878:	mla	r0, lr, r6, r3
   1887c:	ldrd	sl, [sp, #24]
   18880:	ldrd	r2, [sp]
   18884:	cmp	r3, fp
   18888:	cmpeq	r2, sl
   1888c:	orrcc	ip, ip, #1
   18890:	cmp	r3, r7
   18894:	ldr	r3, [sp, #20]
   18898:	cmpeq	r2, r6
   1889c:	add	r3, r0, r3
   188a0:	str	r3, [sp, #20]
   188a4:	mvncc	r2, #0
   188a8:	mvncc	r3, #0
   188ac:	ldrdcs	r2, [sp, #16]
   188b0:	ldrd	sl, [sp]
   188b4:	mul	r0, r1, r3
   188b8:	cmp	fp, r7
   188bc:	str	r0, [sp, #16]
   188c0:	cmpeq	sl, r6
   188c4:	ldr	r6, [sp, #16]
   188c8:	umull	r0, r1, r1, r2
   188cc:	mla	lr, lr, r2, r6
   188d0:	orrcc	ip, ip, #1
   188d4:	cmp	r3, fp
   188d8:	cmpeq	r2, sl
   188dc:	add	r1, lr, r1
   188e0:	bls	188ec <__assert_fail@plt+0x77e8>
   188e4:	mvn	r0, #0
   188e8:	mov	r1, r0
   188ec:	cmp	r3, fp
   188f0:	cmpeq	r2, sl
   188f4:	mov	r6, r0
   188f8:	mov	r7, r1
   188fc:	orrhi	ip, ip, #1
   18900:	b	18564 <__assert_fail@plt+0x7460>
   18904:	ldrd	sl, [sp]
   18908:	umull	r2, r3, r6, r1
   1890c:	mul	r0, r6, lr
   18910:	cmp	r7, fp
   18914:	cmpeq	r6, sl
   18918:	mvnhi	r2, #0
   1891c:	mla	r0, r1, r7, r0
   18920:	umull	sl, fp, r1, r2
   18924:	add	r3, r0, r3
   18928:	mvnhi	r3, #0
   1892c:	strd	sl, [sp, #16]
   18930:	mul	r0, r1, r3
   18934:	ldrd	sl, [sp]
   18938:	mla	r0, lr, r2, r0
   1893c:	ldr	ip, [sp, #20]
   18940:	cmp	fp, r3
   18944:	add	r0, r0, ip
   18948:	cmpeq	sl, r2
   1894c:	str	r0, [sp, #20]
   18950:	mvncc	sl, #0
   18954:	mvncc	fp, #0
   18958:	strdcc	sl, [sp, #16]
   1895c:	ldrdcc	sl, [sp]
   18960:	ldr	r0, [sp, #16]
   18964:	cmp	fp, r3
   18968:	cmpeq	sl, r2
   1896c:	mul	r0, lr, r0
   18970:	ldr	r2, [sp, #20]
   18974:	ldr	r3, [sp, #16]
   18978:	movcc	ip, #1
   1897c:	movcs	ip, #0
   18980:	cmp	r7, fp
   18984:	cmpeq	r6, sl
   18988:	ldrd	r6, [sp, #16]
   1898c:	mla	r0, r1, r2, r0
   18990:	umull	r2, r3, r3, r1
   18994:	orrhi	ip, ip, #1
   18998:	cmp	r7, fp
   1899c:	cmpeq	r6, sl
   189a0:	add	r3, r0, r3
   189a4:	mvnhi	r3, #0
   189a8:	mvnhi	r2, #0
   189ac:	mul	r0, r1, r3
   189b0:	cmp	r7, fp
   189b4:	str	r0, [sp, #24]
   189b8:	cmpeq	r6, sl
   189bc:	ldr	r6, [sp, #24]
   189c0:	umull	r0, r1, r1, r2
   189c4:	mla	lr, lr, r2, r6
   189c8:	orrhi	ip, ip, #1
   189cc:	cmp	fp, r3
   189d0:	cmpeq	sl, r2
   189d4:	mvncc	r0, #0
   189d8:	add	r1, lr, r1
   189dc:	movcc	r1, r0
   189e0:	b	18550 <__assert_fail@plt+0x744c>
   189e4:	cmp	r6, #0
   189e8:	sbcs	r3, r7, #0
   189ec:	blt	18e84 <__assert_fail@plt+0x7d80>
   189f0:	adds	r6, r6, r6
   189f4:	adc	r7, r7, r7
   189f8:	mov	ip, #0
   189fc:	b	18564 <__assert_fail@plt+0x7460>
   18a00:	mov	ip, #0
   18a04:	b	18564 <__assert_fail@plt+0x7460>
   18a08:	ldr	r3, [pc, #1396]	; 18f84 <__assert_fail@plt+0x7e80>
   18a0c:	mvn	r2, #0
   18a10:	cmp	r7, r3
   18a14:	cmpeq	r6, r2
   18a18:	bhi	18e84 <__assert_fail@plt+0x7d80>
   18a1c:	lsl	r3, r7, #9
   18a20:	orr	r3, r3, r6, lsr #23
   18a24:	lsl	r2, r6, #9
   18a28:	mov	r6, r2
   18a2c:	mov	r7, r3
   18a30:	mov	ip, #0
   18a34:	b	18564 <__assert_fail@plt+0x7460>
   18a38:	ldrd	sl, [sp]
   18a3c:	umull	r2, r3, r6, r1
   18a40:	mul	r0, r6, lr
   18a44:	cmp	r7, fp
   18a48:	cmpeq	r6, sl
   18a4c:	mvnhi	r2, #0
   18a50:	mla	r0, r1, r7, r0
   18a54:	umull	sl, fp, r2, r1
   18a58:	add	r3, r0, r3
   18a5c:	mul	r0, lr, r2
   18a60:	mvnhi	r3, #0
   18a64:	strd	sl, [sp, #16]
   18a68:	ldrd	sl, [sp]
   18a6c:	mla	r0, r1, r3, r0
   18a70:	ldr	ip, [sp, #20]
   18a74:	cmp	r3, fp
   18a78:	add	r0, r0, ip
   18a7c:	cmpeq	r2, sl
   18a80:	str	r0, [sp, #20]
   18a84:	mvnhi	sl, #0
   18a88:	mvnhi	fp, #0
   18a8c:	strdhi	sl, [sp, #16]
   18a90:	ldrdhi	sl, [sp]
   18a94:	ldr	r0, [sp, #16]
   18a98:	cmp	r3, fp
   18a9c:	ldr	r3, [sp, #20]
   18aa0:	mul	r0, lr, r0
   18aa4:	cmpeq	r2, sl
   18aa8:	mla	r0, r1, r3, r0
   18aac:	ldr	r3, [sp, #16]
   18ab0:	umull	r2, r3, r3, r1
   18ab4:	strd	r2, [sp, #24]
   18ab8:	movhi	r3, #1
   18abc:	movls	r3, #0
   18ac0:	cmp	r7, fp
   18ac4:	cmpeq	r6, sl
   18ac8:	ldrd	r6, [sp, #16]
   18acc:	ldr	r2, [sp, #28]
   18ad0:	movls	ip, r3
   18ad4:	orrhi	ip, r3, #1
   18ad8:	cmp	r7, fp
   18adc:	add	r2, r0, r2
   18ae0:	cmpeq	r6, sl
   18ae4:	str	r2, [sp, #28]
   18ae8:	mvnhi	r2, #0
   18aec:	mvnhi	r3, #0
   18af0:	strdhi	r2, [sp, #24]
   18af4:	ldrd	r6, [sp, #24]
   18af8:	mul	r2, lr, r6
   18afc:	umull	sl, fp, r6, r1
   18b00:	mla	r3, r1, r7, r2
   18b04:	ldrd	r6, [sp]
   18b08:	str	r3, [sp, #32]
   18b0c:	ldrd	r2, [sp, #16]
   18b10:	cmp	r3, r7
   18b14:	cmpeq	r2, r6
   18b18:	ldrd	r2, [sp, #24]
   18b1c:	orrhi	ip, ip, #1
   18b20:	cmp	r3, r7
   18b24:	ldr	r3, [sp, #32]
   18b28:	cmpeq	r2, r6
   18b2c:	add	r2, r3, fp
   18b30:	mov	fp, r2
   18b34:	bhi	18f4c <__assert_fail@plt+0x7e48>
   18b38:	strd	sl, [sp, #16]
   18b3c:	mul	r2, lr, sl
   18b40:	umull	r6, r7, sl, r1
   18b44:	mla	r3, r1, fp, r2
   18b48:	ldrd	sl, [sp]
   18b4c:	str	r3, [sp, #32]
   18b50:	ldrd	r2, [sp, #24]
   18b54:	cmp	r3, fp
   18b58:	cmpeq	r2, sl
   18b5c:	ldrd	r2, [sp, #16]
   18b60:	orrhi	ip, ip, #1
   18b64:	cmp	r3, fp
   18b68:	ldr	r3, [sp, #32]
   18b6c:	cmpeq	r2, sl
   18b70:	add	r2, r3, r7
   18b74:	mov	r7, r2
   18b78:	mvnhi	r7, #0
   18b7c:	mvnhi	r6, #0
   18b80:	mul	r2, r1, r7
   18b84:	mov	sl, r6
   18b88:	strd	r6, [sp, #24]
   18b8c:	mla	r0, lr, sl, r2
   18b90:	ldrd	sl, [sp]
   18b94:	ldrd	r2, [sp, #16]
   18b98:	umull	r6, r7, r1, r6
   18b9c:	cmp	r3, fp
   18ba0:	cmpeq	r2, sl
   18ba4:	mov	r3, ip
   18ba8:	orrhi	r3, r3, #1
   18bac:	mov	r2, sl
   18bb0:	str	r3, [sp, #16]
   18bb4:	mov	r3, fp
   18bb8:	ldrd	sl, [sp, #24]
   18bbc:	add	r7, r0, r7
   18bc0:	cmp	r3, fp
   18bc4:	cmpeq	r2, sl
   18bc8:	bcc	18678 <__assert_fail@plt+0x7574>
   18bcc:	mov	r2, r6
   18bd0:	mov	r3, r7
   18bd4:	b	18680 <__assert_fail@plt+0x757c>
   18bd8:	ldrd	sl, [sp]
   18bdc:	umull	r2, r3, r6, r1
   18be0:	mul	r0, r6, lr
   18be4:	cmp	r7, fp
   18be8:	cmpeq	r6, sl
   18bec:	mvnhi	r2, #0
   18bf0:	mla	r0, r1, r7, r0
   18bf4:	umull	sl, fp, r2, r1
   18bf8:	add	r3, r0, r3
   18bfc:	mul	r0, lr, r2
   18c00:	mvnhi	r3, #0
   18c04:	strd	sl, [sp, #16]
   18c08:	ldrd	sl, [sp]
   18c0c:	mla	r0, r1, r3, r0
   18c10:	ldr	ip, [sp, #20]
   18c14:	cmp	r3, fp
   18c18:	add	r0, r0, ip
   18c1c:	cmpeq	r2, sl
   18c20:	str	r0, [sp, #20]
   18c24:	mvnhi	sl, #0
   18c28:	mvnhi	fp, #0
   18c2c:	strdhi	sl, [sp, #16]
   18c30:	ldrdhi	sl, [sp]
   18c34:	ldr	r0, [sp, #16]
   18c38:	cmp	r3, fp
   18c3c:	ldr	ip, [sp, #20]
   18c40:	mul	r0, lr, r0
   18c44:	ldr	r3, [sp, #16]
   18c48:	cmpeq	r2, sl
   18c4c:	mla	r0, r1, ip, r0
   18c50:	umull	r2, r3, r3, r1
   18c54:	movhi	r1, #1
   18c58:	movls	r1, #0
   18c5c:	cmp	r7, fp
   18c60:	cmpeq	r6, sl
   18c64:	ldrd	r6, [sp, #16]
   18c68:	movls	ip, r1
   18c6c:	orrhi	ip, r1, #1
   18c70:	cmp	r7, fp
   18c74:	cmpeq	r6, sl
   18c78:	mvnhi	r2, #0
   18c7c:	add	r3, r0, r3
   18c80:	movhi	r3, r2
   18c84:	cmp	r7, fp
   18c88:	cmpeq	r6, sl
   18c8c:	mov	r7, r3
   18c90:	mov	r6, r2
   18c94:	orrhi	ip, ip, #1
   18c98:	b	18564 <__assert_fail@plt+0x7460>
   18c9c:	ldrd	sl, [sp]
   18ca0:	umull	r2, r3, r6, r1
   18ca4:	mul	r0, r6, lr
   18ca8:	cmp	r7, fp
   18cac:	cmpeq	r6, sl
   18cb0:	mvnhi	r2, #0
   18cb4:	mla	r0, r1, r7, r0
   18cb8:	umull	sl, fp, r1, r2
   18cbc:	add	r3, r0, r3
   18cc0:	mvnhi	r3, #0
   18cc4:	strd	sl, [sp, #16]
   18cc8:	mul	r0, r1, r3
   18ccc:	ldrd	sl, [sp]
   18cd0:	mla	r0, lr, r2, r0
   18cd4:	ldr	ip, [sp, #20]
   18cd8:	cmp	fp, r3
   18cdc:	add	r0, r0, ip
   18ce0:	cmpeq	sl, r2
   18ce4:	str	r0, [sp, #20]
   18ce8:	mvncc	sl, #0
   18cec:	mvncc	fp, #0
   18cf0:	strdcc	sl, [sp, #16]
   18cf4:	ldrdcc	sl, [sp]
   18cf8:	ldr	r0, [sp, #16]
   18cfc:	cmp	fp, r3
   18d00:	ldr	r3, [sp, #20]
   18d04:	mul	r0, lr, r0
   18d08:	cmpeq	sl, r2
   18d0c:	mla	r0, r1, r3, r0
   18d10:	ldr	r3, [sp, #16]
   18d14:	umull	r2, r3, r3, r1
   18d18:	strd	r2, [sp, #24]
   18d1c:	movcc	r3, #1
   18d20:	movcs	r3, #0
   18d24:	cmp	r7, fp
   18d28:	cmpeq	r6, sl
   18d2c:	movls	ip, r3
   18d30:	orrhi	ip, r3, #1
   18d34:	ldrd	r2, [sp, #16]
   18d38:	cmp	r3, fp
   18d3c:	ldr	r3, [sp, #28]
   18d40:	cmpeq	r2, sl
   18d44:	add	r3, r0, r3
   18d48:	str	r3, [sp, #28]
   18d4c:	bhi	18f04 <__assert_fail@plt+0x7e00>
   18d50:	ldrd	r2, [sp, #24]
   18d54:	mov	sl, r2
   18d58:	mov	fp, r3
   18d5c:	mul	r2, lr, sl
   18d60:	umull	r6, r7, sl, r1
   18d64:	mla	r0, r1, fp, r2
   18d68:	ldrd	r2, [sp]
   18d6c:	add	r7, r0, r7
   18d70:	mov	sl, r2
   18d74:	mov	fp, r3
   18d78:	strd	r2, [sp, #32]
   18d7c:	ldrd	r2, [sp, #16]
   18d80:	cmp	r3, fp
   18d84:	cmpeq	r2, sl
   18d88:	ldrd	r2, [sp, #32]
   18d8c:	ldrd	sl, [sp, #24]
   18d90:	orrhi	ip, ip, #1
   18d94:	cmp	fp, r3
   18d98:	cmpeq	sl, r2
   18d9c:	mvnhi	r6, #0
   18da0:	mvnhi	r7, #0
   18da4:	umull	sl, fp, r6, r1
   18da8:	mul	r3, lr, r6
   18dac:	strd	sl, [sp, #16]
   18db0:	mla	r0, r1, r7, r3
   18db4:	ldrd	sl, [sp, #24]
   18db8:	ldrd	r2, [sp]
   18dbc:	cmp	fp, r3
   18dc0:	cmpeq	sl, r2
   18dc4:	orrhi	ip, ip, #1
   18dc8:	cmp	r7, r3
   18dcc:	ldr	r3, [sp, #20]
   18dd0:	cmpeq	r6, r2
   18dd4:	add	r3, r0, r3
   18dd8:	str	r3, [sp, #20]
   18ddc:	mvnhi	r2, #0
   18de0:	mvnhi	r3, #0
   18de4:	ldrdls	r2, [sp, #16]
   18de8:	ldrd	sl, [sp]
   18dec:	mul	r0, r1, r3
   18df0:	cmp	r7, fp
   18df4:	str	r0, [sp, #16]
   18df8:	cmpeq	r6, sl
   18dfc:	ldr	r6, [sp, #16]
   18e00:	umull	r0, r1, r1, r2
   18e04:	mla	lr, lr, r2, r6
   18e08:	orrhi	ip, ip, #1
   18e0c:	cmp	r3, fp
   18e10:	cmpeq	r2, sl
   18e14:	add	r1, lr, r1
   18e18:	bls	188ec <__assert_fail@plt+0x77e8>
   18e1c:	b	188e4 <__assert_fail@plt+0x77e0>
   18e20:	ldr	r3, [pc, #344]	; 18f80 <__assert_fail@plt+0x7e7c>
   18e24:	mvn	r2, #0
   18e28:	cmp	r7, r3
   18e2c:	cmpeq	r6, r2
   18e30:	bhi	18e84 <__assert_fail@plt+0x7d80>
   18e34:	lsl	r3, r7, #10
   18e38:	orr	r3, r3, r6, lsr #22
   18e3c:	lsl	r2, r6, #10
   18e40:	mov	r6, r2
   18e44:	mov	r7, r3
   18e48:	mov	ip, #0
   18e4c:	b	18564 <__assert_fail@plt+0x7460>
   18e50:	strd	r6, [r8]
   18e54:	orr	r4, r4, #2
   18e58:	b	18234 <__assert_fail@plt+0x7130>
   18e5c:	ldrd	r2, [sp]
   18e60:	cmp	r7, r3
   18e64:	cmpeq	r6, r2
   18e68:	bhi	18e84 <__assert_fail@plt+0x7d80>
   18e6c:	mul	r3, r6, lr
   18e70:	mov	ip, #0
   18e74:	mla	r3, r1, r7, r3
   18e78:	umull	r6, r7, r6, r1
   18e7c:	add	r7, r3, r7
   18e80:	b	18564 <__assert_fail@plt+0x7460>
   18e84:	mvn	r6, #0
   18e88:	mvn	r7, #0
   18e8c:	mov	ip, #1
   18e90:	b	18564 <__assert_fail@plt+0x7460>
   18e94:	ldrb	r3, [r9, #2]
   18e98:	mvn	r2, #0
   18e9c:	mov	r1, #1024	; 0x400
   18ea0:	cmp	r3, #66	; 0x42
   18ea4:	ldr	r3, [pc, #212]	; 18f80 <__assert_fail@plt+0x7e7c>
   18ea8:	mov	lr, #0
   18eac:	strd	r2, [sp]
   18eb0:	moveq	r3, #3
   18eb4:	streq	r3, [sp, #12]
   18eb8:	movne	r3, #1
   18ebc:	strne	r3, [sp, #12]
   18ec0:	b	18410 <__assert_fail@plt+0x730c>
   18ec4:	add	r3, pc, #172	; 0xac
   18ec8:	ldrd	r2, [r3]
   18ecc:	mov	r1, #1000	; 0x3e8
   18ed0:	mov	lr, #0
   18ed4:	strd	r2, [sp]
   18ed8:	mov	r3, #2
   18edc:	str	r3, [sp, #12]
   18ee0:	b	18410 <__assert_fail@plt+0x730c>
   18ee4:	ldr	r3, [pc, #148]	; 18f80 <__assert_fail@plt+0x7e7c>
   18ee8:	mvn	r2, #0
   18eec:	mov	lr, r0
   18ef0:	strd	r2, [sp]
   18ef4:	mov	r3, #1
   18ef8:	mov	r1, #1024	; 0x400
   18efc:	str	r3, [sp, #12]
   18f00:	b	18410 <__assert_fail@plt+0x730c>
   18f04:	mvn	r2, #0
   18f08:	mvn	r3, #0
   18f0c:	mov	sl, r2
   18f10:	strd	r2, [sp, #24]
   18f14:	mov	fp, r3
   18f18:	b	18d5c <__assert_fail@plt+0x7c58>
   18f1c:	mvn	r2, #0
   18f20:	mvn	r3, #0
   18f24:	mov	sl, r2
   18f28:	strd	r2, [sp, #16]
   18f2c:	mov	fp, r3
   18f30:	b	187e0 <__assert_fail@plt+0x76dc>
   18f34:	mvn	r2, #0
   18f38:	mvn	r3, #0
   18f3c:	mov	sl, r2
   18f40:	strd	r2, [sp, #24]
   18f44:	mov	fp, r3
   18f48:	b	18638 <__assert_fail@plt+0x7534>
   18f4c:	mvn	r2, #0
   18f50:	mvn	r3, #0
   18f54:	mov	sl, r2
   18f58:	strd	r2, [sp, #16]
   18f5c:	mov	fp, r3
   18f60:	b	18b3c <__assert_fail@plt+0x7a38>
   18f64:	ldr	r3, [pc, #28]	; 18f88 <__assert_fail@plt+0x7e84>
   18f68:	mov	r2, #85	; 0x55
   18f6c:	ldr	r1, [pc, #24]	; 18f8c <__assert_fail@plt+0x7e88>
   18f70:	ldr	r0, [pc, #24]	; 18f90 <__assert_fail@plt+0x7e8c>
   18f74:	bl	11104 <__assert_fail@plt>
   18f78:	blmi	ff1c2f3c <stdout@@GLIBC_2.4+0xff197dc8>
   18f7c:	subeq	r8, r1, r7, lsr r9
   18f80:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18f84:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18f88:	andeq	sl, r1, r0, lsl #27
   18f8c:	andeq	sl, r1, ip, lsl #27
   18f90:	muleq	r1, ip, sp
   18f94:	cmp	r1, #0
   18f98:	cmpne	r0, #0
   18f9c:	moveq	r1, #1
   18fa0:	moveq	r0, r1
   18fa4:	umull	r2, r3, r0, r1
   18fa8:	adds	r3, r3, #0
   18fac:	movne	r3, #1
   18fb0:	cmp	r2, #0
   18fb4:	blt	18fc4 <__assert_fail@plt+0x7ec0>
   18fb8:	cmp	r3, #0
   18fbc:	bne	18fc4 <__assert_fail@plt+0x7ec0>
   18fc0:	b	10e4c <calloc@plt>
   18fc4:	push	{r4, lr}
   18fc8:	bl	10ff0 <__errno_location@plt>
   18fcc:	mov	r3, #12
   18fd0:	str	r3, [r0]
   18fd4:	mov	r0, #0
   18fd8:	pop	{r4, pc}
   18fdc:	cmp	r0, #0
   18fe0:	moveq	r0, #1
   18fe4:	cmp	r0, #0
   18fe8:	blt	18ff0 <__assert_fail@plt+0x7eec>
   18fec:	b	10f84 <malloc@plt>
   18ff0:	push	{r4, lr}
   18ff4:	bl	10ff0 <__errno_location@plt>
   18ff8:	mov	r3, #12
   18ffc:	str	r3, [r0]
   19000:	mov	r0, #0
   19004:	pop	{r4, pc}
   19008:	cmp	r0, #0
   1900c:	beq	19030 <__assert_fail@plt+0x7f2c>
   19010:	cmp	r1, #0
   19014:	push	{lr}		; (str lr, [sp, #-4]!)
   19018:	sub	sp, sp, #12
   1901c:	beq	19038 <__assert_fail@plt+0x7f34>
   19020:	blt	19050 <__assert_fail@plt+0x7f4c>
   19024:	add	sp, sp, #12
   19028:	pop	{lr}		; (ldr lr, [sp], #4)
   1902c:	b	10f00 <realloc@plt>
   19030:	mov	r0, r1
   19034:	b	18fdc <__assert_fail@plt+0x7ed8>
   19038:	str	r1, [sp, #4]
   1903c:	bl	11fcc <__assert_fail@plt+0xec8>
   19040:	ldr	r3, [sp, #4]
   19044:	mov	r0, r3
   19048:	add	sp, sp, #12
   1904c:	pop	{pc}		; (ldr pc, [sp], #4)
   19050:	bl	10ff0 <__errno_location@plt>
   19054:	mov	r2, #12
   19058:	mov	r3, #0
   1905c:	str	r2, [r0]
   19060:	b	19044 <__assert_fail@plt+0x7f40>
   19064:	mov	r0, #1
   19068:	b	119e0 <__assert_fail@plt+0x8dc>
   1906c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19070:	mov	r4, r1
   19074:	sub	sp, sp, #12
   19078:	mov	r5, r2
   1907c:	str	r2, [sp, #4]
   19080:	mov	r7, r3
   19084:	mov	sl, r0
   19088:	bl	10fd8 <strlen@plt>
   1908c:	ldr	fp, [r4]
   19090:	cmp	fp, #0
   19094:	beq	191a8 <__assert_fail@plt+0x80a4>
   19098:	cmp	r5, #0
   1909c:	mov	r8, r0
   190a0:	mov	r3, r5
   190a4:	beq	19150 <__assert_fail@plt+0x804c>
   190a8:	mov	r2, #0
   190ac:	mov	r5, r2
   190b0:	mov	r6, r3
   190b4:	mvn	r9, #0
   190b8:	str	r2, [sp]
   190bc:	mov	r2, r8
   190c0:	mov	r1, sl
   190c4:	mov	r0, fp
   190c8:	bl	110e0 <strncmp@plt>
   190cc:	cmp	r0, #0
   190d0:	mov	r0, fp
   190d4:	bne	19114 <__assert_fail@plt+0x8010>
   190d8:	bl	10fd8 <strlen@plt>
   190dc:	ldr	r3, [sp, #4]
   190e0:	mov	r2, r7
   190e4:	mov	r1, r6
   190e8:	cmp	r8, r0
   190ec:	mla	r0, r7, r9, r3
   190f0:	beq	19140 <__assert_fail@plt+0x803c>
   190f4:	cmn	r9, #1
   190f8:	moveq	r9, r5
   190fc:	beq	19114 <__assert_fail@plt+0x8010>
   19100:	bl	10edc <memcmp@plt>
   19104:	ldr	r3, [sp]
   19108:	cmp	r0, #0
   1910c:	movne	r3, #1
   19110:	str	r3, [sp]
   19114:	ldr	fp, [r4, #4]!
   19118:	add	r5, r5, #1
   1911c:	cmp	fp, #0
   19120:	add	r6, r6, r7
   19124:	bne	190bc <__assert_fail@plt+0x7fb8>
   19128:	ldr	r3, [sp]
   1912c:	cmp	r3, #0
   19130:	mvnne	r9, #1
   19134:	mov	r0, r9
   19138:	add	sp, sp, #12
   1913c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19140:	mov	r9, r5
   19144:	mov	r0, r9
   19148:	add	sp, sp, #12
   1914c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19150:	mov	r6, r5
   19154:	mvn	r9, #0
   19158:	mov	r2, r8
   1915c:	mov	r1, sl
   19160:	mov	r0, fp
   19164:	bl	110e0 <strncmp@plt>
   19168:	cmp	r0, #0
   1916c:	mov	r0, fp
   19170:	bne	1918c <__assert_fail@plt+0x8088>
   19174:	bl	10fd8 <strlen@plt>
   19178:	cmp	r8, r0
   1917c:	beq	19140 <__assert_fail@plt+0x803c>
   19180:	cmn	r9, #1
   19184:	moveq	r9, r5
   19188:	movne	r6, #1
   1918c:	ldr	fp, [r4, #4]!
   19190:	add	r5, r5, #1
   19194:	cmp	fp, #0
   19198:	bne	19158 <__assert_fail@plt+0x8054>
   1919c:	str	r6, [sp]
   191a0:	mov	r3, r6
   191a4:	b	1912c <__assert_fail@plt+0x8028>
   191a8:	mvn	r9, #0
   191ac:	b	19134 <__assert_fail@plt+0x8030>
   191b0:	push	{r4, r5, r6, lr}
   191b4:	mov	r6, r0
   191b8:	ldr	r0, [r1]
   191bc:	cmp	r0, #0
   191c0:	beq	191f8 <__assert_fail@plt+0x80f4>
   191c4:	mov	r4, r1
   191c8:	mov	r5, #0
   191cc:	b	191e0 <__assert_fail@plt+0x80dc>
   191d0:	ldr	r0, [r4, #4]!
   191d4:	add	r5, r5, #1
   191d8:	cmp	r0, #0
   191dc:	beq	191f8 <__assert_fail@plt+0x80f4>
   191e0:	mov	r1, r6
   191e4:	bl	10e70 <strcmp@plt>
   191e8:	cmp	r0, #0
   191ec:	bne	191d0 <__assert_fail@plt+0x80cc>
   191f0:	mov	r0, r5
   191f4:	pop	{r4, r5, r6, pc}
   191f8:	mvn	r0, #0
   191fc:	pop	{r4, r5, r6, pc}
   19200:	cmn	r2, #1
   19204:	push	{r4, r5, r6, lr}
   19208:	mov	r2, #5
   1920c:	sub	sp, sp, #8
   19210:	mov	r4, r1
   19214:	mov	r5, r0
   19218:	ldreq	r1, [pc, #76]	; 1926c <__assert_fail@plt+0x8168>
   1921c:	ldrne	r1, [pc, #76]	; 19270 <__assert_fail@plt+0x816c>
   19220:	mov	r0, #0
   19224:	bl	10ef4 <dcgettext@plt>
   19228:	mov	r2, r4
   1922c:	mov	r1, #8
   19230:	mov	r6, r0
   19234:	mov	r0, #0
   19238:	bl	15224 <__assert_fail@plt+0x4120>
   1923c:	mov	r1, r5
   19240:	mov	r4, r0
   19244:	mov	r0, #1
   19248:	bl	16dc0 <__assert_fail@plt+0x5cbc>
   1924c:	mov	r1, #0
   19250:	mov	r3, r4
   19254:	mov	r2, r6
   19258:	str	r0, [sp]
   1925c:	mov	r0, r1
   19260:	bl	10f6c <error@plt>
   19264:	add	sp, sp, #8
   19268:	pop	{r4, r5, r6, pc}
   1926c:	andeq	sl, r1, r4, asr #27
   19270:	andeq	sl, r1, r0, ror #27
   19274:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19278:	mov	r6, r0
   1927c:	ldr	r9, [pc, #232]	; 1936c <__assert_fail@plt+0x8268>
   19280:	mov	r4, r1
   19284:	mov	r7, r2
   19288:	ldr	r1, [pc, #224]	; 19370 <__assert_fail@plt+0x826c>
   1928c:	mov	r2, #5
   19290:	mov	r0, #0
   19294:	bl	10ef4 <dcgettext@plt>
   19298:	ldr	r1, [r9]
   1929c:	bl	10e58 <fputs_unlocked@plt>
   192a0:	ldr	fp, [r6]
   192a4:	cmp	fp, #0
   192a8:	movne	r8, #0
   192ac:	movne	r5, r8
   192b0:	movne	sl, #1
   192b4:	bne	192f4 <__assert_fail@plt+0x81f0>
   192b8:	b	19338 <__assert_fail@plt+0x8234>
   192bc:	mov	r0, fp
   192c0:	ldr	r8, [r9]
   192c4:	bl	16f74 <__assert_fail@plt+0x5e70>
   192c8:	ldr	r2, [pc, #164]	; 19374 <__assert_fail@plt+0x8270>
   192cc:	mov	r1, sl
   192d0:	mov	r3, r0
   192d4:	mov	r0, r8
   192d8:	bl	11044 <__fprintf_chk@plt>
   192dc:	mov	r8, r4
   192e0:	ldr	fp, [r6, #4]!
   192e4:	add	r5, r5, #1
   192e8:	cmp	fp, #0
   192ec:	add	r4, r4, r7
   192f0:	beq	19338 <__assert_fail@plt+0x8234>
   192f4:	cmp	r5, #0
   192f8:	mov	r1, r4
   192fc:	mov	r2, r7
   19300:	mov	r0, r8
   19304:	beq	192bc <__assert_fail@plt+0x81b8>
   19308:	bl	10edc <memcmp@plt>
   1930c:	cmp	r0, #0
   19310:	bne	192bc <__assert_fail@plt+0x81b8>
   19314:	mov	r0, fp
   19318:	ldr	fp, [r9]
   1931c:	bl	16f74 <__assert_fail@plt+0x5e70>
   19320:	ldr	r2, [pc, #80]	; 19378 <__assert_fail@plt+0x8274>
   19324:	mov	r1, sl
   19328:	mov	r3, r0
   1932c:	mov	r0, fp
   19330:	bl	11044 <__fprintf_chk@plt>
   19334:	b	192e0 <__assert_fail@plt+0x81dc>
   19338:	ldr	r0, [r9]
   1933c:	ldr	r3, [r0, #20]
   19340:	ldr	r2, [r0, #24]
   19344:	cmp	r3, r2
   19348:	bcs	19360 <__assert_fail@plt+0x825c>
   1934c:	add	r1, r3, #1
   19350:	mov	r2, #10
   19354:	str	r1, [r0, #20]
   19358:	strb	r2, [r3]
   1935c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19360:	mov	r1, #10
   19364:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19368:	b	11074 <__overflow@plt>
   1936c:	andeq	fp, r2, r8, ror #2
   19370:	andeq	sl, r1, r0, lsl #28
   19374:	andeq	sl, r1, r8, lsl lr
   19378:	andeq	sl, r1, r0, lsr #28
   1937c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19380:	sub	sp, sp, #36	; 0x24
   19384:	mov	r6, r1
   19388:	ldrb	ip, [sp, #80]	; 0x50
   1938c:	str	r0, [sp, #28]
   19390:	str	r2, [sp, #24]
   19394:	cmp	ip, #0
   19398:	str	ip, [sp, #20]
   1939c:	str	r3, [sp, #12]
   193a0:	ldr	r7, [sp, #72]	; 0x48
   193a4:	bne	1945c <__assert_fail@plt+0x8358>
   193a8:	ldr	r0, [r2]
   193ac:	cmp	r0, #0
   193b0:	movne	sl, ip
   193b4:	movne	r4, r2
   193b8:	bne	19440 <__assert_fail@plt+0x833c>
   193bc:	mov	r2, #5
   193c0:	ldr	r1, [pc, #512]	; 195c8 <__assert_fail@plt+0x84c4>
   193c4:	mov	r0, #0
   193c8:	bl	10ef4 <dcgettext@plt>
   193cc:	mov	r4, r0
   193d0:	mov	r2, r6
   193d4:	mov	r1, #8
   193d8:	mov	r0, #0
   193dc:	bl	15224 <__assert_fail@plt+0x4120>
   193e0:	ldr	r1, [sp, #28]
   193e4:	mvn	sl, #0
   193e8:	mov	r5, r0
   193ec:	mov	r0, #1
   193f0:	bl	16dc0 <__assert_fail@plt+0x5cbc>
   193f4:	mov	r1, #0
   193f8:	mov	r3, r5
   193fc:	mov	r2, r4
   19400:	str	r0, [sp]
   19404:	mov	r0, r1
   19408:	bl	10f6c <error@plt>
   1940c:	ldr	r0, [sp, #24]
   19410:	mov	r2, r7
   19414:	ldr	r1, [sp, #12]
   19418:	bl	19274 <__assert_fail@plt+0x8170>
   1941c:	ldr	r3, [sp, #76]	; 0x4c
   19420:	blx	r3
   19424:	mov	r0, sl
   19428:	add	sp, sp, #36	; 0x24
   1942c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19430:	ldr	r0, [r4, #4]!
   19434:	add	sl, sl, #1
   19438:	cmp	r0, #0
   1943c:	beq	193bc <__assert_fail@plt+0x82b8>
   19440:	mov	r1, r6
   19444:	bl	10e70 <strcmp@plt>
   19448:	cmp	r0, #0
   1944c:	bne	19430 <__assert_fail@plt+0x832c>
   19450:	mov	r0, sl
   19454:	add	sp, sp, #36	; 0x24
   19458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1945c:	mov	r0, r1
   19460:	bl	10fd8 <strlen@plt>
   19464:	ldr	r3, [sp, #24]
   19468:	ldr	fp, [r3]
   1946c:	cmp	fp, #0
   19470:	mov	r9, r0
   19474:	beq	193bc <__assert_fail@plt+0x82b8>
   19478:	ldr	r2, [sp, #12]
   1947c:	cmp	r2, #0
   19480:	beq	1953c <__assert_fail@plt+0x8438>
   19484:	mov	r1, #0
   19488:	mov	r4, r1
   1948c:	mov	r8, r3
   19490:	mov	r5, r2
   19494:	mvn	sl, #0
   19498:	str	r1, [sp, #16]
   1949c:	mov	r2, r9
   194a0:	mov	r1, r6
   194a4:	mov	r0, fp
   194a8:	bl	110e0 <strncmp@plt>
   194ac:	cmp	r0, #0
   194b0:	mov	r0, fp
   194b4:	bne	194f8 <__assert_fail@plt+0x83f4>
   194b8:	bl	10fd8 <strlen@plt>
   194bc:	ldr	r3, [sp, #12]
   194c0:	mov	r2, r7
   194c4:	mov	r1, r5
   194c8:	cmp	r9, r0
   194cc:	mla	r0, r7, sl, r3
   194d0:	beq	1952c <__assert_fail@plt+0x8428>
   194d4:	cmn	sl, #1
   194d8:	moveq	sl, r4
   194dc:	beq	194f8 <__assert_fail@plt+0x83f4>
   194e0:	bl	10edc <memcmp@plt>
   194e4:	ldr	r2, [sp, #20]
   194e8:	ldr	r3, [sp, #16]
   194ec:	cmp	r0, #0
   194f0:	movne	r3, r2
   194f4:	str	r3, [sp, #16]
   194f8:	ldr	fp, [r8, #4]!
   194fc:	add	r4, r4, #1
   19500:	cmp	fp, #0
   19504:	add	r5, r5, r7
   19508:	bne	1949c <__assert_fail@plt+0x8398>
   1950c:	ldr	r3, [sp, #16]
   19510:	cmp	r3, #0
   19514:	bne	195b0 <__assert_fail@plt+0x84ac>
   19518:	cmn	sl, #1
   1951c:	beq	193bc <__assert_fail@plt+0x82b8>
   19520:	mov	r0, sl
   19524:	add	sp, sp, #36	; 0x24
   19528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1952c:	mov	sl, r4
   19530:	mov	r0, sl
   19534:	add	sp, sp, #36	; 0x24
   19538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1953c:	mov	r5, r3
   19540:	ldr	r3, [sp, #12]
   19544:	str	r7, [sp, #72]	; 0x48
   19548:	mov	r7, fp
   1954c:	ldr	fp, [sp, #20]
   19550:	mov	r8, r3
   19554:	mvn	sl, #0
   19558:	mov	r4, r3
   1955c:	mov	r2, r9
   19560:	mov	r1, r6
   19564:	mov	r0, r7
   19568:	bl	110e0 <strncmp@plt>
   1956c:	cmp	r0, #0
   19570:	mov	r0, r7
   19574:	bne	19590 <__assert_fail@plt+0x848c>
   19578:	bl	10fd8 <strlen@plt>
   1957c:	cmp	r9, r0
   19580:	beq	1952c <__assert_fail@plt+0x8428>
   19584:	cmn	sl, #1
   19588:	moveq	sl, r4
   1958c:	movne	r8, fp
   19590:	ldr	r7, [r5, #4]!
   19594:	add	r4, r4, #1
   19598:	cmp	r7, #0
   1959c:	bne	1955c <__assert_fail@plt+0x8458>
   195a0:	str	r8, [sp, #16]
   195a4:	ldr	r7, [sp, #72]	; 0x48
   195a8:	mov	r3, r8
   195ac:	b	19510 <__assert_fail@plt+0x840c>
   195b0:	mov	r2, #5
   195b4:	ldr	r1, [pc, #16]	; 195cc <__assert_fail@plt+0x84c8>
   195b8:	mov	r0, #0
   195bc:	bl	10ef4 <dcgettext@plt>
   195c0:	mov	r4, r0
   195c4:	b	193d0 <__assert_fail@plt+0x82cc>
   195c8:	andeq	sl, r1, r4, asr #27
   195cc:	andeq	sl, r1, r0, ror #27
   195d0:	push	{r4, r5, r6, r7, r8, lr}
   195d4:	ldr	r7, [r1]
   195d8:	cmp	r7, #0
   195dc:	beq	1961c <__assert_fail@plt+0x8518>
   195e0:	mov	r6, r3
   195e4:	mov	r8, r0
   195e8:	mov	r4, r2
   195ec:	mov	r5, r1
   195f0:	b	19600 <__assert_fail@plt+0x84fc>
   195f4:	ldr	r7, [r5, #4]!
   195f8:	cmp	r7, #0
   195fc:	beq	1961c <__assert_fail@plt+0x8518>
   19600:	mov	r1, r4
   19604:	mov	r2, r6
   19608:	mov	r0, r8
   1960c:	bl	10edc <memcmp@plt>
   19610:	add	r4, r4, r6
   19614:	cmp	r0, #0
   19618:	bne	195f4 <__assert_fail@plt+0x84f0>
   1961c:	mov	r0, r7
   19620:	pop	{r4, r5, r6, r7, r8, pc}
   19624:	push	{r4, r5, r6, lr}
   19628:	mov	r4, r0
   1962c:	bl	10f54 <__fpending@plt>
   19630:	ldr	r5, [r4]
   19634:	and	r5, r5, #32
   19638:	mov	r6, r0
   1963c:	mov	r0, r4
   19640:	bl	11e34 <__assert_fail@plt+0xd30>
   19644:	cmp	r5, #0
   19648:	mov	r4, r0
   1964c:	bne	1966c <__assert_fail@plt+0x8568>
   19650:	cmp	r0, #0
   19654:	beq	19664 <__assert_fail@plt+0x8560>
   19658:	cmp	r6, #0
   1965c:	beq	19688 <__assert_fail@plt+0x8584>
   19660:	mvn	r4, #0
   19664:	mov	r0, r4
   19668:	pop	{r4, r5, r6, pc}
   1966c:	cmp	r0, #0
   19670:	bne	19660 <__assert_fail@plt+0x855c>
   19674:	bl	10ff0 <__errno_location@plt>
   19678:	str	r4, [r0]
   1967c:	mvn	r4, #0
   19680:	mov	r0, r4
   19684:	pop	{r4, r5, r6, pc}
   19688:	bl	10ff0 <__errno_location@plt>
   1968c:	ldr	r4, [r0]
   19690:	subs	r4, r4, #9
   19694:	mvnne	r4, #0
   19698:	mov	r0, r4
   1969c:	pop	{r4, r5, r6, pc}
   196a0:	push	{r1, r2, r3}
   196a4:	push	{r4, r5, r6, r7, lr}
   196a8:	sub	sp, sp, #8
   196ac:	add	r3, sp, #32
   196b0:	ldr	r1, [sp, #28]
   196b4:	str	r3, [sp, #4]
   196b8:	cmp	r1, #0
   196bc:	beq	19754 <__assert_fail@plt+0x8650>
   196c0:	ldr	r2, [pc, #412]	; 19864 <__assert_fail@plt+0x8760>
   196c4:	mov	r5, r0
   196c8:	cmp	r1, r2
   196cc:	bne	19718 <__assert_fail@plt+0x8614>
   196d0:	ldr	r6, [pc, #400]	; 19868 <__assert_fail@plt+0x8764>
   196d4:	ldr	r7, [r3]
   196d8:	add	r2, sp, #36	; 0x24
   196dc:	ldr	r3, [r6]
   196e0:	str	r2, [sp, #4]
   196e4:	cmp	r3, #0
   196e8:	mov	r2, r7
   196ec:	blt	19818 <__assert_fail@plt+0x8714>
   196f0:	bl	11068 <fcntl64@plt>
   196f4:	subs	r4, r0, #0
   196f8:	blt	1979c <__assert_fail@plt+0x8698>
   196fc:	mov	r3, #1
   19700:	str	r3, [r6]
   19704:	mov	r0, r4
   19708:	add	sp, sp, #8
   1970c:	pop	{r4, r5, r6, r7, lr}
   19710:	add	sp, sp, #12
   19714:	bx	lr
   19718:	cmp	r1, #11
   1971c:	beq	19744 <__assert_fail@plt+0x8640>
   19720:	bgt	19764 <__assert_fail@plt+0x8660>
   19724:	cmp	r1, #3
   19728:	beq	19744 <__assert_fail@plt+0x8640>
   1972c:	ble	19858 <__assert_fail@plt+0x8754>
   19730:	cmp	r1, #8
   19734:	beq	19784 <__assert_fail@plt+0x8680>
   19738:	ble	19784 <__assert_fail@plt+0x8680>
   1973c:	cmp	r1, #9
   19740:	bne	19784 <__assert_fail@plt+0x8680>
   19744:	mov	r0, r5
   19748:	bl	11068 <fcntl64@plt>
   1974c:	mov	r4, r0
   19750:	b	19704 <__assert_fail@plt+0x8600>
   19754:	ldr	r2, [sp, #32]
   19758:	bl	11068 <fcntl64@plt>
   1975c:	mov	r4, r0
   19760:	b	19704 <__assert_fail@plt+0x8600>
   19764:	ldr	r3, [pc, #256]	; 1986c <__assert_fail@plt+0x8768>
   19768:	cmp	r1, r3
   1976c:	bgt	19838 <__assert_fail@plt+0x8734>
   19770:	cmp	r1, r2
   19774:	bge	19784 <__assert_fail@plt+0x8680>
   19778:	sub	r3, r3, #6
   1977c:	cmp	r1, r3
   19780:	beq	19744 <__assert_fail@plt+0x8640>
   19784:	ldr	r3, [sp, #4]
   19788:	mov	r0, r5
   1978c:	ldr	r2, [r3]
   19790:	bl	11068 <fcntl64@plt>
   19794:	mov	r4, r0
   19798:	b	19704 <__assert_fail@plt+0x8600>
   1979c:	bl	10ff0 <__errno_location@plt>
   197a0:	ldr	r3, [r0]
   197a4:	cmp	r3, #22
   197a8:	bne	196fc <__assert_fail@plt+0x85f8>
   197ac:	mov	r2, r7
   197b0:	mov	r0, r5
   197b4:	mov	r1, #0
   197b8:	bl	11068 <fcntl64@plt>
   197bc:	subs	r4, r0, #0
   197c0:	blt	19704 <__assert_fail@plt+0x8600>
   197c4:	mvn	r3, #0
   197c8:	str	r3, [r6]
   197cc:	mov	r1, #1
   197d0:	mov	r0, r4
   197d4:	bl	11068 <fcntl64@plt>
   197d8:	subs	r2, r0, #0
   197dc:	blt	197f8 <__assert_fail@plt+0x86f4>
   197e0:	orr	r2, r2, #1
   197e4:	mov	r1, #2
   197e8:	mov	r0, r4
   197ec:	bl	11068 <fcntl64@plt>
   197f0:	cmn	r0, #1
   197f4:	bne	19704 <__assert_fail@plt+0x8600>
   197f8:	bl	10ff0 <__errno_location@plt>
   197fc:	mov	r5, r0
   19800:	mov	r0, r4
   19804:	ldr	r6, [r5]
   19808:	mvn	r4, #0
   1980c:	bl	110f8 <close@plt>
   19810:	str	r6, [r5]
   19814:	b	19704 <__assert_fail@plt+0x8600>
   19818:	mov	r1, #0
   1981c:	bl	11068 <fcntl64@plt>
   19820:	subs	r4, r0, #0
   19824:	blt	19704 <__assert_fail@plt+0x8600>
   19828:	ldr	r3, [r6]
   1982c:	cmn	r3, #1
   19830:	beq	197cc <__assert_fail@plt+0x86c8>
   19834:	b	19704 <__assert_fail@plt+0x8600>
   19838:	ldr	r3, [pc, #48]	; 19870 <__assert_fail@plt+0x876c>
   1983c:	cmp	r1, r3
   19840:	beq	19784 <__assert_fail@plt+0x8680>
   19844:	blt	19744 <__assert_fail@plt+0x8640>
   19848:	add	r3, r3, #1
   1984c:	cmp	r1, r3
   19850:	bne	19784 <__assert_fail@plt+0x8680>
   19854:	b	19744 <__assert_fail@plt+0x8640>
   19858:	cmp	r1, #1
   1985c:	bne	19784 <__assert_fail@plt+0x8680>
   19860:	b	19744 <__assert_fail@plt+0x8640>
   19864:	andeq	r0, r0, r6, lsl #8
   19868:	andeq	fp, r2, r0, asr #5
   1986c:	andeq	r0, r0, r7, lsl #8
   19870:	andeq	r0, r0, r9, lsl #8
   19874:	push	{r4, lr}
   19878:	mov	r0, #14
   1987c:	bl	11098 <nl_langinfo@plt>
   19880:	cmp	r0, #0
   19884:	beq	1989c <__assert_fail@plt+0x8798>
   19888:	ldrb	r2, [r0]
   1988c:	ldr	r3, [pc, #16]	; 198a4 <__assert_fail@plt+0x87a0>
   19890:	cmp	r2, #0
   19894:	moveq	r0, r3
   19898:	pop	{r4, pc}
   1989c:	ldr	r0, [pc]	; 198a4 <__assert_fail@plt+0x87a0>
   198a0:	pop	{r4, pc}
   198a4:	andeq	sl, r1, r8, lsr #28
   198a8:	push	{r4, r5, r6, r7, lr}
   198ac:	subs	r6, r0, #0
   198b0:	sub	sp, sp, #12
   198b4:	addeq	r6, sp, #4
   198b8:	mov	r0, r6
   198bc:	mov	r5, r2
   198c0:	mov	r7, r1
   198c4:	bl	10f60 <mbrtowc@plt>
   198c8:	cmp	r5, #0
   198cc:	cmnne	r0, #3
   198d0:	mov	r4, r0
   198d4:	bls	198f0 <__assert_fail@plt+0x87ec>
   198d8:	mov	r0, #0
   198dc:	bl	19948 <__assert_fail@plt+0x8844>
   198e0:	cmp	r0, #0
   198e4:	moveq	r4, #1
   198e8:	ldrbeq	r3, [r7]
   198ec:	streq	r3, [r6]
   198f0:	mov	r0, r4
   198f4:	add	sp, sp, #12
   198f8:	pop	{r4, r5, r6, r7, pc}
   198fc:	push	{r4, r5, r6, lr}
   19900:	subs	r4, r2, #0
   19904:	mov	r6, r0
   19908:	mov	r5, r1
   1990c:	beq	19938 <__assert_fail@plt+0x8834>
   19910:	mov	r1, r4
   19914:	mvn	r0, #0
   19918:	bl	19a3c <__assert_fail@plt+0x8938>
   1991c:	cmp	r0, r5
   19920:	bcs	19938 <__assert_fail@plt+0x8834>
   19924:	bl	10ff0 <__errno_location@plt>
   19928:	mov	r3, #12
   1992c:	str	r3, [r0]
   19930:	mov	r0, #0
   19934:	pop	{r4, r5, r6, pc}
   19938:	mul	r1, r5, r4
   1993c:	mov	r0, r6
   19940:	pop	{r4, r5, r6, lr}
   19944:	b	19008 <__assert_fail@plt+0x7f04>
   19948:	push	{lr}		; (str lr, [sp, #-4]!)
   1994c:	sub	sp, sp, #268	; 0x10c
   19950:	add	r1, sp, #4
   19954:	ldr	r2, [pc, #60]	; 19998 <__assert_fail@plt+0x8894>
   19958:	bl	199a4 <__assert_fail@plt+0x88a0>
   1995c:	cmp	r0, #0
   19960:	movne	r0, #0
   19964:	bne	19990 <__assert_fail@plt+0x888c>
   19968:	ldr	r1, [pc, #44]	; 1999c <__assert_fail@plt+0x8898>
   1996c:	add	r0, sp, #4
   19970:	bl	10e70 <strcmp@plt>
   19974:	cmp	r0, #0
   19978:	beq	19990 <__assert_fail@plt+0x888c>
   1997c:	add	r0, sp, #4
   19980:	ldr	r1, [pc, #24]	; 199a0 <__assert_fail@plt+0x889c>
   19984:	bl	10e70 <strcmp@plt>
   19988:	adds	r0, r0, #0
   1998c:	movne	r0, #1
   19990:	add	sp, sp, #268	; 0x10c
   19994:	pop	{pc}		; (ldr pc, [sp], #4)
   19998:	andeq	r0, r0, r1, lsl #2
   1999c:	andeq	sl, r1, r0, lsr lr
   199a0:	andeq	sl, r1, r4, lsr lr
   199a4:	push	{r4, r5, r6, lr}
   199a8:	mov	r5, r1
   199ac:	mov	r1, #0
   199b0:	mov	r4, r2
   199b4:	bl	11080 <setlocale@plt>
   199b8:	subs	r6, r0, #0
   199bc:	beq	19a18 <__assert_fail@plt+0x8914>
   199c0:	bl	10fd8 <strlen@plt>
   199c4:	cmp	r4, r0
   199c8:	bhi	19a00 <__assert_fail@plt+0x88fc>
   199cc:	cmp	r4, #0
   199d0:	bne	199dc <__assert_fail@plt+0x88d8>
   199d4:	mov	r0, #34	; 0x22
   199d8:	pop	{r4, r5, r6, pc}
   199dc:	sub	r4, r4, #1
   199e0:	mov	r1, r6
   199e4:	mov	r2, r4
   199e8:	mov	r0, r5
   199ec:	bl	10eb8 <memcpy@plt>
   199f0:	mov	r3, #0
   199f4:	strb	r3, [r5, r4]
   199f8:	mov	r0, #34	; 0x22
   199fc:	pop	{r4, r5, r6, pc}
   19a00:	add	r2, r0, #1
   19a04:	mov	r1, r6
   19a08:	mov	r0, r5
   19a0c:	bl	10eb8 <memcpy@plt>
   19a10:	mov	r0, #0
   19a14:	pop	{r4, r5, r6, pc}
   19a18:	cmp	r4, #0
   19a1c:	beq	19a2c <__assert_fail@plt+0x8928>
   19a20:	strb	r6, [r5]
   19a24:	mov	r0, #22
   19a28:	pop	{r4, r5, r6, pc}
   19a2c:	mov	r0, #22
   19a30:	pop	{r4, r5, r6, pc}
   19a34:	mov	r1, #0
   19a38:	b	11080 <setlocale@plt>
   19a3c:	subs	r2, r1, #1
   19a40:	bxeq	lr
   19a44:	bcc	19c1c <__assert_fail@plt+0x8b18>
   19a48:	cmp	r0, r1
   19a4c:	bls	19c00 <__assert_fail@plt+0x8afc>
   19a50:	tst	r1, r2
   19a54:	beq	19c0c <__assert_fail@plt+0x8b08>
   19a58:	clz	r3, r0
   19a5c:	clz	r2, r1
   19a60:	sub	r3, r2, r3
   19a64:	rsbs	r3, r3, #31
   19a68:	addne	r3, r3, r3, lsl #1
   19a6c:	mov	r2, #0
   19a70:	addne	pc, pc, r3, lsl #2
   19a74:	nop			; (mov r0, r0)
   19a78:	cmp	r0, r1, lsl #31
   19a7c:	adc	r2, r2, r2
   19a80:	subcs	r0, r0, r1, lsl #31
   19a84:	cmp	r0, r1, lsl #30
   19a88:	adc	r2, r2, r2
   19a8c:	subcs	r0, r0, r1, lsl #30
   19a90:	cmp	r0, r1, lsl #29
   19a94:	adc	r2, r2, r2
   19a98:	subcs	r0, r0, r1, lsl #29
   19a9c:	cmp	r0, r1, lsl #28
   19aa0:	adc	r2, r2, r2
   19aa4:	subcs	r0, r0, r1, lsl #28
   19aa8:	cmp	r0, r1, lsl #27
   19aac:	adc	r2, r2, r2
   19ab0:	subcs	r0, r0, r1, lsl #27
   19ab4:	cmp	r0, r1, lsl #26
   19ab8:	adc	r2, r2, r2
   19abc:	subcs	r0, r0, r1, lsl #26
   19ac0:	cmp	r0, r1, lsl #25
   19ac4:	adc	r2, r2, r2
   19ac8:	subcs	r0, r0, r1, lsl #25
   19acc:	cmp	r0, r1, lsl #24
   19ad0:	adc	r2, r2, r2
   19ad4:	subcs	r0, r0, r1, lsl #24
   19ad8:	cmp	r0, r1, lsl #23
   19adc:	adc	r2, r2, r2
   19ae0:	subcs	r0, r0, r1, lsl #23
   19ae4:	cmp	r0, r1, lsl #22
   19ae8:	adc	r2, r2, r2
   19aec:	subcs	r0, r0, r1, lsl #22
   19af0:	cmp	r0, r1, lsl #21
   19af4:	adc	r2, r2, r2
   19af8:	subcs	r0, r0, r1, lsl #21
   19afc:	cmp	r0, r1, lsl #20
   19b00:	adc	r2, r2, r2
   19b04:	subcs	r0, r0, r1, lsl #20
   19b08:	cmp	r0, r1, lsl #19
   19b0c:	adc	r2, r2, r2
   19b10:	subcs	r0, r0, r1, lsl #19
   19b14:	cmp	r0, r1, lsl #18
   19b18:	adc	r2, r2, r2
   19b1c:	subcs	r0, r0, r1, lsl #18
   19b20:	cmp	r0, r1, lsl #17
   19b24:	adc	r2, r2, r2
   19b28:	subcs	r0, r0, r1, lsl #17
   19b2c:	cmp	r0, r1, lsl #16
   19b30:	adc	r2, r2, r2
   19b34:	subcs	r0, r0, r1, lsl #16
   19b38:	cmp	r0, r1, lsl #15
   19b3c:	adc	r2, r2, r2
   19b40:	subcs	r0, r0, r1, lsl #15
   19b44:	cmp	r0, r1, lsl #14
   19b48:	adc	r2, r2, r2
   19b4c:	subcs	r0, r0, r1, lsl #14
   19b50:	cmp	r0, r1, lsl #13
   19b54:	adc	r2, r2, r2
   19b58:	subcs	r0, r0, r1, lsl #13
   19b5c:	cmp	r0, r1, lsl #12
   19b60:	adc	r2, r2, r2
   19b64:	subcs	r0, r0, r1, lsl #12
   19b68:	cmp	r0, r1, lsl #11
   19b6c:	adc	r2, r2, r2
   19b70:	subcs	r0, r0, r1, lsl #11
   19b74:	cmp	r0, r1, lsl #10
   19b78:	adc	r2, r2, r2
   19b7c:	subcs	r0, r0, r1, lsl #10
   19b80:	cmp	r0, r1, lsl #9
   19b84:	adc	r2, r2, r2
   19b88:	subcs	r0, r0, r1, lsl #9
   19b8c:	cmp	r0, r1, lsl #8
   19b90:	adc	r2, r2, r2
   19b94:	subcs	r0, r0, r1, lsl #8
   19b98:	cmp	r0, r1, lsl #7
   19b9c:	adc	r2, r2, r2
   19ba0:	subcs	r0, r0, r1, lsl #7
   19ba4:	cmp	r0, r1, lsl #6
   19ba8:	adc	r2, r2, r2
   19bac:	subcs	r0, r0, r1, lsl #6
   19bb0:	cmp	r0, r1, lsl #5
   19bb4:	adc	r2, r2, r2
   19bb8:	subcs	r0, r0, r1, lsl #5
   19bbc:	cmp	r0, r1, lsl #4
   19bc0:	adc	r2, r2, r2
   19bc4:	subcs	r0, r0, r1, lsl #4
   19bc8:	cmp	r0, r1, lsl #3
   19bcc:	adc	r2, r2, r2
   19bd0:	subcs	r0, r0, r1, lsl #3
   19bd4:	cmp	r0, r1, lsl #2
   19bd8:	adc	r2, r2, r2
   19bdc:	subcs	r0, r0, r1, lsl #2
   19be0:	cmp	r0, r1, lsl #1
   19be4:	adc	r2, r2, r2
   19be8:	subcs	r0, r0, r1, lsl #1
   19bec:	cmp	r0, r1
   19bf0:	adc	r2, r2, r2
   19bf4:	subcs	r0, r0, r1
   19bf8:	mov	r0, r2
   19bfc:	bx	lr
   19c00:	moveq	r0, #1
   19c04:	movne	r0, #0
   19c08:	bx	lr
   19c0c:	clz	r2, r1
   19c10:	rsb	r2, r2, #31
   19c14:	lsr	r0, r0, r2
   19c18:	bx	lr
   19c1c:	cmp	r0, #0
   19c20:	mvnne	r0, #0
   19c24:	b	1a27c <__assert_fail@plt+0x9178>
   19c28:	cmp	r1, #0
   19c2c:	beq	19c1c <__assert_fail@plt+0x8b18>
   19c30:	push	{r0, r1, lr}
   19c34:	bl	19a3c <__assert_fail@plt+0x8938>
   19c38:	pop	{r1, r2, lr}
   19c3c:	mul	r3, r2, r0
   19c40:	sub	r1, r1, r3
   19c44:	bx	lr
   19c48:	cmp	r1, #0
   19c4c:	beq	19e58 <__assert_fail@plt+0x8d54>
   19c50:	eor	ip, r0, r1
   19c54:	rsbmi	r1, r1, #0
   19c58:	subs	r2, r1, #1
   19c5c:	beq	19e24 <__assert_fail@plt+0x8d20>
   19c60:	movs	r3, r0
   19c64:	rsbmi	r3, r0, #0
   19c68:	cmp	r3, r1
   19c6c:	bls	19e30 <__assert_fail@plt+0x8d2c>
   19c70:	tst	r1, r2
   19c74:	beq	19e40 <__assert_fail@plt+0x8d3c>
   19c78:	clz	r2, r3
   19c7c:	clz	r0, r1
   19c80:	sub	r2, r0, r2
   19c84:	rsbs	r2, r2, #31
   19c88:	addne	r2, r2, r2, lsl #1
   19c8c:	mov	r0, #0
   19c90:	addne	pc, pc, r2, lsl #2
   19c94:	nop			; (mov r0, r0)
   19c98:	cmp	r3, r1, lsl #31
   19c9c:	adc	r0, r0, r0
   19ca0:	subcs	r3, r3, r1, lsl #31
   19ca4:	cmp	r3, r1, lsl #30
   19ca8:	adc	r0, r0, r0
   19cac:	subcs	r3, r3, r1, lsl #30
   19cb0:	cmp	r3, r1, lsl #29
   19cb4:	adc	r0, r0, r0
   19cb8:	subcs	r3, r3, r1, lsl #29
   19cbc:	cmp	r3, r1, lsl #28
   19cc0:	adc	r0, r0, r0
   19cc4:	subcs	r3, r3, r1, lsl #28
   19cc8:	cmp	r3, r1, lsl #27
   19ccc:	adc	r0, r0, r0
   19cd0:	subcs	r3, r3, r1, lsl #27
   19cd4:	cmp	r3, r1, lsl #26
   19cd8:	adc	r0, r0, r0
   19cdc:	subcs	r3, r3, r1, lsl #26
   19ce0:	cmp	r3, r1, lsl #25
   19ce4:	adc	r0, r0, r0
   19ce8:	subcs	r3, r3, r1, lsl #25
   19cec:	cmp	r3, r1, lsl #24
   19cf0:	adc	r0, r0, r0
   19cf4:	subcs	r3, r3, r1, lsl #24
   19cf8:	cmp	r3, r1, lsl #23
   19cfc:	adc	r0, r0, r0
   19d00:	subcs	r3, r3, r1, lsl #23
   19d04:	cmp	r3, r1, lsl #22
   19d08:	adc	r0, r0, r0
   19d0c:	subcs	r3, r3, r1, lsl #22
   19d10:	cmp	r3, r1, lsl #21
   19d14:	adc	r0, r0, r0
   19d18:	subcs	r3, r3, r1, lsl #21
   19d1c:	cmp	r3, r1, lsl #20
   19d20:	adc	r0, r0, r0
   19d24:	subcs	r3, r3, r1, lsl #20
   19d28:	cmp	r3, r1, lsl #19
   19d2c:	adc	r0, r0, r0
   19d30:	subcs	r3, r3, r1, lsl #19
   19d34:	cmp	r3, r1, lsl #18
   19d38:	adc	r0, r0, r0
   19d3c:	subcs	r3, r3, r1, lsl #18
   19d40:	cmp	r3, r1, lsl #17
   19d44:	adc	r0, r0, r0
   19d48:	subcs	r3, r3, r1, lsl #17
   19d4c:	cmp	r3, r1, lsl #16
   19d50:	adc	r0, r0, r0
   19d54:	subcs	r3, r3, r1, lsl #16
   19d58:	cmp	r3, r1, lsl #15
   19d5c:	adc	r0, r0, r0
   19d60:	subcs	r3, r3, r1, lsl #15
   19d64:	cmp	r3, r1, lsl #14
   19d68:	adc	r0, r0, r0
   19d6c:	subcs	r3, r3, r1, lsl #14
   19d70:	cmp	r3, r1, lsl #13
   19d74:	adc	r0, r0, r0
   19d78:	subcs	r3, r3, r1, lsl #13
   19d7c:	cmp	r3, r1, lsl #12
   19d80:	adc	r0, r0, r0
   19d84:	subcs	r3, r3, r1, lsl #12
   19d88:	cmp	r3, r1, lsl #11
   19d8c:	adc	r0, r0, r0
   19d90:	subcs	r3, r3, r1, lsl #11
   19d94:	cmp	r3, r1, lsl #10
   19d98:	adc	r0, r0, r0
   19d9c:	subcs	r3, r3, r1, lsl #10
   19da0:	cmp	r3, r1, lsl #9
   19da4:	adc	r0, r0, r0
   19da8:	subcs	r3, r3, r1, lsl #9
   19dac:	cmp	r3, r1, lsl #8
   19db0:	adc	r0, r0, r0
   19db4:	subcs	r3, r3, r1, lsl #8
   19db8:	cmp	r3, r1, lsl #7
   19dbc:	adc	r0, r0, r0
   19dc0:	subcs	r3, r3, r1, lsl #7
   19dc4:	cmp	r3, r1, lsl #6
   19dc8:	adc	r0, r0, r0
   19dcc:	subcs	r3, r3, r1, lsl #6
   19dd0:	cmp	r3, r1, lsl #5
   19dd4:	adc	r0, r0, r0
   19dd8:	subcs	r3, r3, r1, lsl #5
   19ddc:	cmp	r3, r1, lsl #4
   19de0:	adc	r0, r0, r0
   19de4:	subcs	r3, r3, r1, lsl #4
   19de8:	cmp	r3, r1, lsl #3
   19dec:	adc	r0, r0, r0
   19df0:	subcs	r3, r3, r1, lsl #3
   19df4:	cmp	r3, r1, lsl #2
   19df8:	adc	r0, r0, r0
   19dfc:	subcs	r3, r3, r1, lsl #2
   19e00:	cmp	r3, r1, lsl #1
   19e04:	adc	r0, r0, r0
   19e08:	subcs	r3, r3, r1, lsl #1
   19e0c:	cmp	r3, r1
   19e10:	adc	r0, r0, r0
   19e14:	subcs	r3, r3, r1
   19e18:	cmp	ip, #0
   19e1c:	rsbmi	r0, r0, #0
   19e20:	bx	lr
   19e24:	teq	ip, r0
   19e28:	rsbmi	r0, r0, #0
   19e2c:	bx	lr
   19e30:	movcc	r0, #0
   19e34:	asreq	r0, ip, #31
   19e38:	orreq	r0, r0, #1
   19e3c:	bx	lr
   19e40:	clz	r2, r1
   19e44:	rsb	r2, r2, #31
   19e48:	cmp	ip, #0
   19e4c:	lsr	r0, r3, r2
   19e50:	rsbmi	r0, r0, #0
   19e54:	bx	lr
   19e58:	cmp	r0, #0
   19e5c:	mvngt	r0, #-2147483648	; 0x80000000
   19e60:	movlt	r0, #-2147483648	; 0x80000000
   19e64:	b	1a27c <__assert_fail@plt+0x9178>
   19e68:	cmp	r1, #0
   19e6c:	beq	19e58 <__assert_fail@plt+0x8d54>
   19e70:	push	{r0, r1, lr}
   19e74:	bl	19c50 <__assert_fail@plt+0x8b4c>
   19e78:	pop	{r1, r2, lr}
   19e7c:	mul	r3, r2, r0
   19e80:	sub	r1, r1, r3
   19e84:	bx	lr
   19e88:	eor	r1, r1, #-2147483648	; 0x80000000
   19e8c:	b	19e94 <__assert_fail@plt+0x8d90>
   19e90:	eor	r3, r3, #-2147483648	; 0x80000000
   19e94:	push	{r4, r5, lr}
   19e98:	lsl	r4, r1, #1
   19e9c:	lsl	r5, r3, #1
   19ea0:	teq	r4, r5
   19ea4:	teqeq	r0, r2
   19ea8:	orrsne	ip, r4, r0
   19eac:	orrsne	ip, r5, r2
   19eb0:	mvnsne	ip, r4, asr #21
   19eb4:	mvnsne	ip, r5, asr #21
   19eb8:	beq	1a0a4 <__assert_fail@plt+0x8fa0>
   19ebc:	lsr	r4, r4, #21
   19ec0:	rsbs	r5, r4, r5, lsr #21
   19ec4:	rsblt	r5, r5, #0
   19ec8:	ble	19ee8 <__assert_fail@plt+0x8de4>
   19ecc:	add	r4, r4, r5
   19ed0:	eor	r2, r0, r2
   19ed4:	eor	r3, r1, r3
   19ed8:	eor	r0, r2, r0
   19edc:	eor	r1, r3, r1
   19ee0:	eor	r2, r0, r2
   19ee4:	eor	r3, r1, r3
   19ee8:	cmp	r5, #54	; 0x36
   19eec:	pophi	{r4, r5, pc}
   19ef0:	tst	r1, #-2147483648	; 0x80000000
   19ef4:	lsl	r1, r1, #12
   19ef8:	mov	ip, #1048576	; 0x100000
   19efc:	orr	r1, ip, r1, lsr #12
   19f00:	beq	19f0c <__assert_fail@plt+0x8e08>
   19f04:	rsbs	r0, r0, #0
   19f08:	rsc	r1, r1, #0
   19f0c:	tst	r3, #-2147483648	; 0x80000000
   19f10:	lsl	r3, r3, #12
   19f14:	orr	r3, ip, r3, lsr #12
   19f18:	beq	19f24 <__assert_fail@plt+0x8e20>
   19f1c:	rsbs	r2, r2, #0
   19f20:	rsc	r3, r3, #0
   19f24:	teq	r4, r5
   19f28:	beq	1a08c <__assert_fail@plt+0x8f88>
   19f2c:	sub	r4, r4, #1
   19f30:	rsbs	lr, r5, #32
   19f34:	blt	19f50 <__assert_fail@plt+0x8e4c>
   19f38:	lsl	ip, r2, lr
   19f3c:	adds	r0, r0, r2, lsr r5
   19f40:	adc	r1, r1, #0
   19f44:	adds	r0, r0, r3, lsl lr
   19f48:	adcs	r1, r1, r3, asr r5
   19f4c:	b	19f6c <__assert_fail@plt+0x8e68>
   19f50:	sub	r5, r5, #32
   19f54:	add	lr, lr, #32
   19f58:	cmp	r2, #1
   19f5c:	lsl	ip, r3, lr
   19f60:	orrcs	ip, ip, #2
   19f64:	adds	r0, r0, r3, asr r5
   19f68:	adcs	r1, r1, r3, asr #31
   19f6c:	and	r5, r1, #-2147483648	; 0x80000000
   19f70:	bpl	19f80 <__assert_fail@plt+0x8e7c>
   19f74:	rsbs	ip, ip, #0
   19f78:	rscs	r0, r0, #0
   19f7c:	rsc	r1, r1, #0
   19f80:	cmp	r1, #1048576	; 0x100000
   19f84:	bcc	19fc4 <__assert_fail@plt+0x8ec0>
   19f88:	cmp	r1, #2097152	; 0x200000
   19f8c:	bcc	19fac <__assert_fail@plt+0x8ea8>
   19f90:	lsrs	r1, r1, #1
   19f94:	rrxs	r0, r0
   19f98:	rrx	ip, ip
   19f9c:	add	r4, r4, #1
   19fa0:	lsl	r2, r4, #21
   19fa4:	cmn	r2, #4194304	; 0x400000
   19fa8:	bcs	1a104 <__assert_fail@plt+0x9000>
   19fac:	cmp	ip, #-2147483648	; 0x80000000
   19fb0:	lsrseq	ip, r0, #1
   19fb4:	adcs	r0, r0, #0
   19fb8:	adc	r1, r1, r4, lsl #20
   19fbc:	orr	r1, r1, r5
   19fc0:	pop	{r4, r5, pc}
   19fc4:	lsls	ip, ip, #1
   19fc8:	adcs	r0, r0, r0
   19fcc:	adc	r1, r1, r1
   19fd0:	tst	r1, #1048576	; 0x100000
   19fd4:	sub	r4, r4, #1
   19fd8:	bne	19fac <__assert_fail@plt+0x8ea8>
   19fdc:	teq	r1, #0
   19fe0:	moveq	r1, r0
   19fe4:	moveq	r0, #0
   19fe8:	clz	r3, r1
   19fec:	addeq	r3, r3, #32
   19ff0:	sub	r3, r3, #11
   19ff4:	subs	r2, r3, #32
   19ff8:	bge	1a01c <__assert_fail@plt+0x8f18>
   19ffc:	adds	r2, r2, #12
   1a000:	ble	1a018 <__assert_fail@plt+0x8f14>
   1a004:	add	ip, r2, #20
   1a008:	rsb	r2, r2, #12
   1a00c:	lsl	r0, r1, ip
   1a010:	lsr	r1, r1, r2
   1a014:	b	1a02c <__assert_fail@plt+0x8f28>
   1a018:	add	r2, r2, #20
   1a01c:	rsble	ip, r2, #32
   1a020:	lsl	r1, r1, r2
   1a024:	orrle	r1, r1, r0, lsr ip
   1a028:	lslle	r0, r0, r2
   1a02c:	subs	r4, r4, r3
   1a030:	addge	r1, r1, r4, lsl #20
   1a034:	orrge	r1, r1, r5
   1a038:	popge	{r4, r5, pc}
   1a03c:	mvn	r4, r4
   1a040:	subs	r4, r4, #31
   1a044:	bge	1a080 <__assert_fail@plt+0x8f7c>
   1a048:	adds	r4, r4, #12
   1a04c:	bgt	1a068 <__assert_fail@plt+0x8f64>
   1a050:	add	r4, r4, #20
   1a054:	rsb	r2, r4, #32
   1a058:	lsr	r0, r0, r4
   1a05c:	orr	r0, r0, r1, lsl r2
   1a060:	orr	r1, r5, r1, lsr r4
   1a064:	pop	{r4, r5, pc}
   1a068:	rsb	r4, r4, #12
   1a06c:	rsb	r2, r4, #32
   1a070:	lsr	r0, r0, r2
   1a074:	orr	r0, r0, r1, lsl r4
   1a078:	mov	r1, r5
   1a07c:	pop	{r4, r5, pc}
   1a080:	lsr	r0, r1, r4
   1a084:	mov	r1, r5
   1a088:	pop	{r4, r5, pc}
   1a08c:	teq	r4, #0
   1a090:	eor	r3, r3, #1048576	; 0x100000
   1a094:	eoreq	r1, r1, #1048576	; 0x100000
   1a098:	addeq	r4, r4, #1
   1a09c:	subne	r5, r5, #1
   1a0a0:	b	19f2c <__assert_fail@plt+0x8e28>
   1a0a4:	mvns	ip, r4, asr #21
   1a0a8:	mvnsne	ip, r5, asr #21
   1a0ac:	beq	1a114 <__assert_fail@plt+0x9010>
   1a0b0:	teq	r4, r5
   1a0b4:	teqeq	r0, r2
   1a0b8:	beq	1a0cc <__assert_fail@plt+0x8fc8>
   1a0bc:	orrs	ip, r4, r0
   1a0c0:	moveq	r1, r3
   1a0c4:	moveq	r0, r2
   1a0c8:	pop	{r4, r5, pc}
   1a0cc:	teq	r1, r3
   1a0d0:	movne	r1, #0
   1a0d4:	movne	r0, #0
   1a0d8:	popne	{r4, r5, pc}
   1a0dc:	lsrs	ip, r4, #21
   1a0e0:	bne	1a0f4 <__assert_fail@plt+0x8ff0>
   1a0e4:	lsls	r0, r0, #1
   1a0e8:	adcs	r1, r1, r1
   1a0ec:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1a0f0:	pop	{r4, r5, pc}
   1a0f4:	adds	r4, r4, #4194304	; 0x400000
   1a0f8:	addcc	r1, r1, #1048576	; 0x100000
   1a0fc:	popcc	{r4, r5, pc}
   1a100:	and	r5, r1, #-2147483648	; 0x80000000
   1a104:	orr	r1, r5, #2130706432	; 0x7f000000
   1a108:	orr	r1, r1, #15728640	; 0xf00000
   1a10c:	mov	r0, #0
   1a110:	pop	{r4, r5, pc}
   1a114:	mvns	ip, r4, asr #21
   1a118:	movne	r1, r3
   1a11c:	movne	r0, r2
   1a120:	mvnseq	ip, r5, asr #21
   1a124:	movne	r3, r1
   1a128:	movne	r2, r0
   1a12c:	orrs	r4, r0, r1, lsl #12
   1a130:	orrseq	r5, r2, r3, lsl #12
   1a134:	teqeq	r1, r3
   1a138:	orrne	r1, r1, #524288	; 0x80000
   1a13c:	pop	{r4, r5, pc}
   1a140:	teq	r0, #0
   1a144:	moveq	r1, #0
   1a148:	bxeq	lr
   1a14c:	push	{r4, r5, lr}
   1a150:	mov	r4, #1024	; 0x400
   1a154:	add	r4, r4, #50	; 0x32
   1a158:	mov	r5, #0
   1a15c:	mov	r1, #0
   1a160:	b	19fdc <__assert_fail@plt+0x8ed8>
   1a164:	teq	r0, #0
   1a168:	moveq	r1, #0
   1a16c:	bxeq	lr
   1a170:	push	{r4, r5, lr}
   1a174:	mov	r4, #1024	; 0x400
   1a178:	add	r4, r4, #50	; 0x32
   1a17c:	ands	r5, r0, #-2147483648	; 0x80000000
   1a180:	rsbmi	r0, r0, #0
   1a184:	mov	r1, #0
   1a188:	b	19fdc <__assert_fail@plt+0x8ed8>
   1a18c:	lsls	r2, r0, #1
   1a190:	asr	r1, r2, #3
   1a194:	rrx	r1, r1
   1a198:	lsl	r0, r2, #28
   1a19c:	andsne	r3, r2, #-16777216	; 0xff000000
   1a1a0:	teqne	r3, #-16777216	; 0xff000000
   1a1a4:	eorne	r1, r1, #939524096	; 0x38000000
   1a1a8:	bxne	lr
   1a1ac:	teq	r2, #0
   1a1b0:	teqne	r3, #-16777216	; 0xff000000
   1a1b4:	bxeq	lr
   1a1b8:	push	{r4, r5, lr}
   1a1bc:	mov	r4, #896	; 0x380
   1a1c0:	and	r5, r1, #-2147483648	; 0x80000000
   1a1c4:	bic	r1, r1, #-2147483648	; 0x80000000
   1a1c8:	b	19fdc <__assert_fail@plt+0x8ed8>
   1a1cc:	orrs	r2, r0, r1
   1a1d0:	bxeq	lr
   1a1d4:	push	{r4, r5, lr}
   1a1d8:	mov	r5, #0
   1a1dc:	b	1a1fc <__assert_fail@plt+0x90f8>
   1a1e0:	orrs	r2, r0, r1
   1a1e4:	bxeq	lr
   1a1e8:	push	{r4, r5, lr}
   1a1ec:	ands	r5, r1, #-2147483648	; 0x80000000
   1a1f0:	bpl	1a1fc <__assert_fail@plt+0x90f8>
   1a1f4:	rsbs	r0, r0, #0
   1a1f8:	rsc	r1, r1, #0
   1a1fc:	mov	r4, #1024	; 0x400
   1a200:	add	r4, r4, #50	; 0x32
   1a204:	lsrs	ip, r1, #22
   1a208:	beq	19f80 <__assert_fail@plt+0x8e7c>
   1a20c:	mov	r2, #3
   1a210:	lsrs	ip, ip, #3
   1a214:	addne	r2, r2, #3
   1a218:	lsrs	ip, ip, #3
   1a21c:	addne	r2, r2, #3
   1a220:	add	r2, r2, ip, lsr #3
   1a224:	rsb	r3, r2, #32
   1a228:	lsl	ip, r0, r3
   1a22c:	lsr	r0, r0, r2
   1a230:	orr	r0, r0, r1, lsl r3
   1a234:	lsr	r1, r1, r2
   1a238:	add	r4, r4, r2
   1a23c:	b	19f80 <__assert_fail@plt+0x8e7c>
   1a240:	cmp	r3, #0
   1a244:	cmpeq	r2, #0
   1a248:	bne	1a260 <__assert_fail@plt+0x915c>
   1a24c:	cmp	r1, #0
   1a250:	cmpeq	r0, #0
   1a254:	mvnne	r1, #0
   1a258:	mvnne	r0, #0
   1a25c:	b	1a27c <__assert_fail@plt+0x9178>
   1a260:	sub	sp, sp, #8
   1a264:	push	{sp, lr}
   1a268:	bl	1a2d8 <__assert_fail@plt+0x91d4>
   1a26c:	ldr	lr, [sp, #4]
   1a270:	add	sp, sp, #8
   1a274:	pop	{r2, r3}
   1a278:	bx	lr
   1a27c:	push	{r1, lr}
   1a280:	mov	r0, #8
   1a284:	bl	10e64 <raise@plt>
   1a288:	pop	{r1, pc}
   1a28c:	andeq	r0, r0, r0
   1a290:	vmov	d7, r0, r1
   1a294:	vldr	d6, [pc, #44]	; 1a2c8 <__assert_fail@plt+0x91c4>
   1a298:	vldr	d5, [pc, #48]	; 1a2d0 <__assert_fail@plt+0x91cc>
   1a29c:	mov	r0, #0
   1a2a0:	vmul.f64	d6, d7, d6
   1a2a4:	vcvt.u32.f64	s12, d6
   1a2a8:	vcvt.f64.u32	d4, s12
   1a2ac:	vmov	r1, s12
   1a2b0:	vmls.f64	d7, d4, d5
   1a2b4:	vcvt.u32.f64	s14, d7
   1a2b8:	vmov	r3, s14
   1a2bc:	orr	r0, r0, r3
   1a2c0:	bx	lr
   1a2c4:	nop			; (mov r0, r0)
   1a2c8:	andeq	r0, r0, r0
   1a2cc:	ldclcc	0, cr0, [r0]
   1a2d0:	andeq	r0, r0, r0
   1a2d4:	mvnsmi	r0, r0
   1a2d8:	cmp	r1, r3
   1a2dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a2e0:	cmpeq	r0, r2
   1a2e4:	mov	r4, r0
   1a2e8:	mov	r5, r1
   1a2ec:	ldr	r9, [sp, #28]
   1a2f0:	movcc	r0, #0
   1a2f4:	movcc	r1, #0
   1a2f8:	bcc	1a3f0 <__assert_fail@plt+0x92ec>
   1a2fc:	cmp	r3, #0
   1a300:	clzeq	ip, r2
   1a304:	clzne	ip, r3
   1a308:	addeq	ip, ip, #32
   1a30c:	cmp	r5, #0
   1a310:	clzeq	r1, r4
   1a314:	addeq	r1, r1, #32
   1a318:	clzne	r1, r5
   1a31c:	sub	ip, ip, r1
   1a320:	sub	lr, ip, #32
   1a324:	lsl	r7, r3, ip
   1a328:	rsb	r8, ip, #32
   1a32c:	orr	r7, r7, r2, lsl lr
   1a330:	orr	r7, r7, r2, lsr r8
   1a334:	lsl	r6, r2, ip
   1a338:	cmp	r5, r7
   1a33c:	cmpeq	r4, r6
   1a340:	movcc	r0, #0
   1a344:	movcc	r1, #0
   1a348:	bcc	1a364 <__assert_fail@plt+0x9260>
   1a34c:	mov	r3, #1
   1a350:	subs	r4, r4, r6
   1a354:	lsl	r1, r3, lr
   1a358:	lsl	r0, r3, ip
   1a35c:	orr	r1, r1, r3, lsr r8
   1a360:	sbc	r5, r5, r7
   1a364:	cmp	ip, #0
   1a368:	beq	1a3f0 <__assert_fail@plt+0x92ec>
   1a36c:	lsrs	r3, r7, #1
   1a370:	rrx	r2, r6
   1a374:	mov	r6, ip
   1a378:	b	1a39c <__assert_fail@plt+0x9298>
   1a37c:	subs	r4, r4, r2
   1a380:	sbc	r5, r5, r3
   1a384:	adds	r4, r4, r4
   1a388:	adc	r5, r5, r5
   1a38c:	adds	r4, r4, #1
   1a390:	adc	r5, r5, #0
   1a394:	subs	r6, r6, #1
   1a398:	beq	1a3b8 <__assert_fail@plt+0x92b4>
   1a39c:	cmp	r5, r3
   1a3a0:	cmpeq	r4, r2
   1a3a4:	bcs	1a37c <__assert_fail@plt+0x9278>
   1a3a8:	adds	r4, r4, r4
   1a3ac:	adc	r5, r5, r5
   1a3b0:	subs	r6, r6, #1
   1a3b4:	bne	1a39c <__assert_fail@plt+0x9298>
   1a3b8:	lsr	r6, r4, ip
   1a3bc:	lsr	r7, r5, ip
   1a3c0:	orr	r6, r6, r5, lsl r8
   1a3c4:	adds	r2, r0, r4
   1a3c8:	orr	r6, r6, r5, lsr lr
   1a3cc:	adc	r3, r1, r5
   1a3d0:	lsl	r1, r7, ip
   1a3d4:	orr	r1, r1, r6, lsl lr
   1a3d8:	lsl	r0, r6, ip
   1a3dc:	orr	r1, r1, r6, lsr r8
   1a3e0:	subs	r0, r2, r0
   1a3e4:	mov	r4, r6
   1a3e8:	mov	r5, r7
   1a3ec:	sbc	r1, r3, r1
   1a3f0:	cmp	r9, #0
   1a3f4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a3f8:	strd	r4, [r9]
   1a3fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a400:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a404:	mov	r7, r0
   1a408:	ldr	r6, [pc, #72]	; 1a458 <__assert_fail@plt+0x9354>
   1a40c:	ldr	r5, [pc, #72]	; 1a45c <__assert_fail@plt+0x9358>
   1a410:	add	r6, pc, r6
   1a414:	add	r5, pc, r5
   1a418:	sub	r6, r6, r5
   1a41c:	mov	r8, r1
   1a420:	mov	r9, r2
   1a424:	bl	10e20 <fdopen@plt-0x20>
   1a428:	asrs	r6, r6, #2
   1a42c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a430:	mov	r4, #0
   1a434:	add	r4, r4, #1
   1a438:	ldr	r3, [r5], #4
   1a43c:	mov	r2, r9
   1a440:	mov	r1, r8
   1a444:	mov	r0, r7
   1a448:	blx	r3
   1a44c:	cmp	r6, r4
   1a450:	bne	1a434 <__assert_fail@plt+0x9330>
   1a454:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a458:	strdeq	r0, [r1], -r8
   1a45c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1a460:	bx	lr
   1a464:	ldr	r3, [pc, #12]	; 1a478 <__assert_fail@plt+0x9374>
   1a468:	mov	r1, #0
   1a46c:	add	r3, pc, r3
   1a470:	ldr	r2, [r3]
   1a474:	b	11008 <__cxa_atexit@plt>
   1a478:	muleq	r1, r0, ip

Disassembly of section .fini:

0001a47c <.fini>:
   1a47c:	push	{r3, lr}
   1a480:	pop	{r3, pc}
