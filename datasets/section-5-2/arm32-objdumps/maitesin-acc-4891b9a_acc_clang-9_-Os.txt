
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011f04 <.init>:
   11f04:	push	{r3, lr}
   11f08:	bl	12164 <_start@@Base+0x3c>
   11f0c:	pop	{r3, pc}

Disassembly of section .plt:

00011f10 <fdopen@plt-0x14>:
   11f10:	push	{lr}		; (str lr, [sp, #-4]!)
   11f14:	ldr	lr, [pc, #4]	; 11f20 <fdopen@plt-0x4>
   11f18:	add	lr, pc, lr
   11f1c:	ldr	pc, [lr, #8]!
   11f20:	andeq	sl, r1, r0, ror #1

00011f24 <fdopen@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #106496	; 0x1a000
   11f2c:	ldr	pc, [ip, #224]!	; 0xe0

00011f30 <strtol@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #106496	; 0x1a000
   11f38:	ldr	pc, [ip, #216]!	; 0xd8

00011f3c <fopen@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #106496	; 0x1a000
   11f44:	ldr	pc, [ip, #208]!	; 0xd0

00011f48 <fflush@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #106496	; 0x1a000
   11f50:	ldr	pc, [ip, #200]!	; 0xc8

00011f54 <free@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #106496	; 0x1a000
   11f5c:	ldr	pc, [ip, #192]!	; 0xc0

00011f60 <memcpy@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #106496	; 0x1a000
   11f68:	ldr	pc, [ip, #184]!	; 0xb8

00011f6c <mmap64@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #106496	; 0x1a000
   11f74:	ldr	pc, [ip, #176]!	; 0xb0

00011f78 <ftell@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #106496	; 0x1a000
   11f80:	ldr	pc, [ip, #168]!	; 0xa8

00011f84 <uname@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #106496	; 0x1a000
   11f8c:	ldr	pc, [ip, #160]!	; 0xa0

00011f90 <strdup@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #106496	; 0x1a000
   11f98:	ldr	pc, [ip, #152]!	; 0x98

00011f9c <realloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #106496	; 0x1a000
   11fa4:	ldr	pc, [ip, #144]!	; 0x90

00011fa8 <fwrite@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #106496	; 0x1a000
   11fb0:	ldr	pc, [ip, #136]!	; 0x88

00011fb4 <open64@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #128]!	; 0x80

00011fc0 <getenv@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #120]!	; 0x78

00011fcc <malloc@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #112]!	; 0x70

00011fd8 <__libc_start_main@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #104]!	; 0x68

00011fe4 <strerror@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #96]!	; 0x60

00011ff0 <__gmon_start__@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #88]!	; 0x58

00011ffc <getpid@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #106496	; 0x1a000
   12004:	ldr	pc, [ip, #80]!	; 0x50

00012008 <exit@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #106496	; 0x1a000
   12010:	ldr	pc, [ip, #72]!	; 0x48

00012014 <strlen@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #106496	; 0x1a000
   1201c:	ldr	pc, [ip, #64]!	; 0x40

00012020 <strchr@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #106496	; 0x1a000
   12028:	ldr	pc, [ip, #56]!	; 0x38

0001202c <getopt@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #106496	; 0x1a000
   12034:	ldr	pc, [ip, #48]!	; 0x30

00012038 <fprintf@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #106496	; 0x1a000
   12040:	ldr	pc, [ip, #40]!	; 0x28

00012044 <__errno_location@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #106496	; 0x1a000
   1204c:	ldr	pc, [ip, #32]!

00012050 <__cxa_atexit@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #106496	; 0x1a000
   12058:	ldr	pc, [ip, #24]!

0001205c <mkdir@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #106496	; 0x1a000
   12064:	ldr	pc, [ip, #16]!

00012068 <memset@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #106496	; 0x1a000
   12070:	ldr	pc, [ip, #8]!

00012074 <strncpy@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #106496	; 0x1a000
   1207c:	ldr	pc, [ip, #0]!

00012080 <prctl@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #102400	; 0x19000
   12088:	ldr	pc, [ip, #4088]!	; 0xff8

0001208c <fileno@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #102400	; 0x19000
   12094:	ldr	pc, [ip, #4080]!	; 0xff0

00012098 <fclose@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #102400	; 0x19000
   120a0:	ldr	pc, [ip, #4072]!	; 0xfe8

000120a4 <strnlen@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #102400	; 0x19000
   120ac:	ldr	pc, [ip, #4064]!	; 0xfe0

000120b0 <munmap@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #102400	; 0x19000
   120b8:	ldr	pc, [ip, #4056]!	; 0xfd8

000120bc <fcntl64@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #102400	; 0x19000
   120c4:	ldr	pc, [ip, #4048]!	; 0xfd0

000120c8 <strrchr@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #102400	; 0x19000
   120d0:	ldr	pc, [ip, #4040]!	; 0xfc8

000120d4 <fputc@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #102400	; 0x19000
   120dc:	ldr	pc, [ip, #4032]!	; 0xfc0

000120e0 <msync@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #102400	; 0x19000
   120e8:	ldr	pc, [ip, #4024]!	; 0xfb8

000120ec <atoi@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #102400	; 0x19000
   120f4:	ldr	pc, [ip, #4016]!	; 0xfb0

000120f8 <fread_unlocked@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #102400	; 0x19000
   12100:	ldr	pc, [ip, #4008]!	; 0xfa8

00012104 <fseek@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #102400	; 0x19000
   1210c:	ldr	pc, [ip, #4000]!	; 0xfa0

00012110 <strncmp@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #102400	; 0x19000
   12118:	ldr	pc, [ip, #3992]!	; 0xf98

0001211c <abort@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #102400	; 0x19000
   12124:	ldr	pc, [ip, #3984]!	; 0xf90

Disassembly of section .text:

00012128 <_start@@Base>:
   12128:	mov	fp, #0
   1212c:	mov	lr, #0
   12130:	pop	{r1}		; (ldr r1, [sp], #4)
   12134:	mov	r2, sp
   12138:	push	{r2}		; (str r2, [sp, #-4]!)
   1213c:	push	{r0}		; (str r0, [sp, #-4]!)
   12140:	ldr	ip, [pc, #16]	; 12158 <_start@@Base+0x30>
   12144:	push	{ip}		; (str ip, [sp, #-4]!)
   12148:	ldr	r0, [pc, #12]	; 1215c <_start@@Base+0x34>
   1214c:	ldr	r3, [pc, #12]	; 12160 <_start@@Base+0x38>
   12150:	bl	11fd8 <__libc_start_main@plt>
   12154:	bl	1211c <abort@plt>
   12158:	andeq	sl, r1, r0, lsl r0
   1215c:	andeq	r2, r1, r0, asr #9
   12160:			; <UNDEFINED> instruction: 0x00019fb0
   12164:	ldr	r3, [pc, #20]	; 12180 <_start@@Base+0x58>
   12168:	ldr	r2, [pc, #20]	; 12184 <_start@@Base+0x5c>
   1216c:	add	r3, pc, r3
   12170:	ldr	r2, [r3, r2]
   12174:	cmp	r2, #0
   12178:	bxeq	lr
   1217c:	b	11ff0 <__gmon_start__@plt>
   12180:	andeq	r9, r1, ip, lsl #29
   12184:	andeq	r0, r0, r8, asr #1
   12188:	ldr	r0, [pc, #24]	; 121a8 <_start@@Base+0x80>
   1218c:	ldr	r3, [pc, #24]	; 121ac <_start@@Base+0x84>
   12190:	cmp	r3, r0
   12194:	bxeq	lr
   12198:	ldr	r3, [pc, #16]	; 121b0 <_start@@Base+0x88>
   1219c:	cmp	r3, #0
   121a0:	bxeq	lr
   121a4:	bx	r3
   121a8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121ac:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121b0:	andeq	r0, r0, r0
   121b4:	ldr	r0, [pc, #36]	; 121e0 <_start@@Base+0xb8>
   121b8:	ldr	r1, [pc, #36]	; 121e4 <_start@@Base+0xbc>
   121bc:	sub	r1, r1, r0
   121c0:	asr	r1, r1, #2
   121c4:	add	r1, r1, r1, lsr #31
   121c8:	asrs	r1, r1, #1
   121cc:	bxeq	lr
   121d0:	ldr	r3, [pc, #16]	; 121e8 <_start@@Base+0xc0>
   121d4:	cmp	r3, #0
   121d8:	bxeq	lr
   121dc:	bx	r3
   121e0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121e4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121e8:	andeq	r0, r0, r0
   121ec:	push	{r4, lr}
   121f0:	ldr	r4, [pc, #24]	; 12210 <_start@@Base+0xe8>
   121f4:	ldrb	r3, [r4]
   121f8:	cmp	r3, #0
   121fc:	popne	{r4, pc}
   12200:	bl	12188 <_start@@Base+0x60>
   12204:	mov	r3, #1
   12208:	strb	r3, [r4]
   1220c:	pop	{r4, pc}
   12210:	strdeq	ip, [r2], -r4
   12214:	b	121b4 <_start@@Base+0x8c>

00012218 <load_file@@Base>:
   12218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1221c:	add	fp, sp, #24
   12220:	movw	r7, #49408	; 0xc100
   12224:	mov	r5, r0
   12228:	movt	r7, #2
   1222c:	ldrd	r0, [r7]
   12230:	adds	r0, r0, #1
   12234:	adc	r1, r1, #0
   12238:	strd	r0, [r7]
   1223c:	movw	r1, #42838	; 0xa756
   12240:	mov	r0, r5
   12244:	movt	r1, #1
   12248:	bl	11f3c <fopen@plt>
   1224c:	cmp	r0, #0
   12250:	beq	1228c <load_file@@Base+0x74>
   12254:	mov	r4, r0
   12258:	ldrd	r0, [r7, #8]
   1225c:	mov	r2, #2
   12260:	mov	r6, #0
   12264:	adds	r0, r0, #1
   12268:	adc	r1, r1, #0
   1226c:	strd	r0, [r7, #8]
   12270:	mov	r0, r4
   12274:	mov	r1, #0
   12278:	bl	12104 <fseek@plt>
   1227c:	cmp	r0, #0
   12280:	beq	12298 <load_file@@Base+0x80>
   12284:	add	r0, r7, #32
   12288:	b	12338 <load_file@@Base+0x120>
   1228c:	add	r0, r7, #16
   12290:	mov	r6, #0
   12294:	b	12354 <load_file@@Base+0x13c>
   12298:	ldrd	r0, [r7, #24]
   1229c:	adds	r0, r0, #1
   122a0:	adc	r1, r1, #0
   122a4:	strd	r0, [r7, #24]
   122a8:	mov	r0, r4
   122ac:	bl	11f78 <ftell@plt>
   122b0:	cmn	r0, #1
   122b4:	beq	1237c <load_file@@Base+0x164>
   122b8:	mov	r8, r0
   122bc:	ldrd	r0, [r7, #48]	; 0x30
   122c0:	adds	r0, r0, #1
   122c4:	adc	r1, r1, #0
   122c8:	strd	r0, [r7, #48]	; 0x30
   122cc:	add	r0, r8, #1
   122d0:	bl	11fcc <malloc@plt>
   122d4:	mov	r6, r0
   122d8:	mov	r0, r4
   122dc:	mov	r1, #0
   122e0:	mov	r2, #0
   122e4:	bl	12104 <fseek@plt>
   122e8:	cmp	r0, #0
   122ec:	bne	123a8 <load_file@@Base+0x190>
   122f0:	ldrd	r0, [r7, #64]	; 0x40
   122f4:	mov	r2, r8
   122f8:	mov	r3, r4
   122fc:	adds	r0, r0, #1
   12300:	adc	r1, r1, #0
   12304:	strd	r0, [r7, #64]	; 0x40
   12308:	mov	r0, r6
   1230c:	mov	r1, #1
   12310:	bl	120f8 <fread_unlocked@plt>
   12314:	cmp	r0, #0
   12318:	beq	123dc <load_file@@Base+0x1c4>
   1231c:	ldrd	r2, [r7, #80]	; 0x50
   12320:	mov	r1, #0
   12324:	strb	r1, [r6, r0]
   12328:	add	r0, r7, #88	; 0x58
   1232c:	adds	r2, r2, #1
   12330:	adc	r3, r3, #0
   12334:	strd	r2, [r7, #80]	; 0x50
   12338:	ldrd	r2, [r0]
   1233c:	adds	r2, r2, #1
   12340:	adc	r3, r3, #0
   12344:	strd	r2, [r0]
   12348:	mov	r0, r4
   1234c:	bl	12098 <fclose@plt>
   12350:	add	r0, r7, #96	; 0x60
   12354:	ldrd	r2, [r0]
   12358:	adds	r2, r2, #1
   1235c:	adc	r3, r3, #0
   12360:	strd	r2, [r0]
   12364:	ldrd	r0, [r7, #104]	; 0x68
   12368:	adds	r0, r0, #1
   1236c:	adc	r1, r1, #0
   12370:	strd	r0, [r7, #104]	; 0x68
   12374:	mov	r0, r6
   12378:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1237c:	ldrd	r0, [r7, #40]	; 0x28
   12380:	adds	r0, r0, #1
   12384:	adc	r1, r1, #0
   12388:	strd	r0, [r7, #40]	; 0x28
   1238c:	movw	r0, #49384	; 0xc0e8
   12390:	mov	r1, #51	; 0x33
   12394:	movt	r0, #2
   12398:	ldr	r3, [r0]
   1239c:	movw	r0, #41028	; 0xa044
   123a0:	movt	r0, #1
   123a4:	b	123d0 <load_file@@Base+0x1b8>
   123a8:	ldrd	r0, [r7, #56]	; 0x38
   123ac:	adds	r0, r0, #1
   123b0:	adc	r1, r1, #0
   123b4:	strd	r0, [r7, #56]	; 0x38
   123b8:	movw	r0, #49384	; 0xc0e8
   123bc:	mov	r1, #49	; 0x31
   123c0:	movt	r0, #2
   123c4:	ldr	r3, [r0]
   123c8:	movw	r0, #41080	; 0xa078
   123cc:	movt	r0, #1
   123d0:	mov	r2, #1
   123d4:	bl	11fa8 <fwrite@plt>
   123d8:	b	12408 <load_file@@Base+0x1f0>
   123dc:	ldrd	r0, [r7, #72]	; 0x48
   123e0:	mov	r2, r5
   123e4:	adds	r0, r0, #1
   123e8:	adc	r1, r1, #0
   123ec:	strd	r0, [r7, #72]	; 0x48
   123f0:	movw	r0, #49384	; 0xc0e8
   123f4:	movw	r1, #41130	; 0xa0aa
   123f8:	movt	r0, #2
   123fc:	movt	r1, #1
   12400:	ldr	r0, [r0]
   12404:	bl	12038 <fprintf@plt>
   12408:	mov	r0, #1
   1240c:	bl	12008 <exit@plt>

00012410 <my_main@@Base>:
   12410:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12414:	add	fp, sp, #24
   12418:	sub	sp, sp, #32
   1241c:	mov	r5, r1
   12420:	movw	r1, #49520	; 0xc170
   12424:	add	r2, pc, #132	; 0x84
   12428:	movt	r1, #2
   1242c:	vld1.64	{d16-d17}, [r2]
   12430:	vld1.64	{d18-d19}, [r1 :128]
   12434:	vadd.i64	q8, q9, q8
   12438:	vst1.64	{d16-d17}, [r1 :128]
   1243c:	bl	12218 <load_file@@Base>
   12440:	mov	r4, r0
   12444:	add	r8, sp, #20
   12448:	mov	r0, r8
   1244c:	mov	r1, r4
   12450:	bl	12f58 <init_lexer@@Base>
   12454:	add	r7, sp, #16
   12458:	mov	r1, r8
   1245c:	mov	r0, r7
   12460:	bl	15508 <init_grammar@@Base>
   12464:	mov	r6, sp
   12468:	mov	r1, r7
   1246c:	mov	r2, r5
   12470:	mov	r0, r6
   12474:	bl	16430 <init_generator@@Base>
   12478:	mov	r0, r6
   1247c:	bl	164c8 <generate_code@@Base>
   12480:	mov	r0, r6
   12484:	bl	16490 <destroy_generator@@Base>
   12488:	mov	r0, r7
   1248c:	bl	15540 <destroy_grammar@@Base>
   12490:	mov	r0, r8
   12494:	bl	12f98 <destroy_lexer@@Base>
   12498:	mov	r0, r4
   1249c:	bl	11f54 <free@plt>
   124a0:	mov	r0, #0
   124a4:	sub	sp, fp, #24
   124a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   124ac:	nop	{0}
   124b0:	andeq	r0, r0, r1
   124b4:	andeq	r0, r0, r0
   124b8:	andeq	r0, r0, r1
   124bc:	andeq	r0, r0, r0

000124c0 <main@@Base>:
   124c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c4:	add	fp, sp, #28
   124c8:	sub	sp, sp, #4
   124cc:	movw	r7, #49536	; 0xc180
   124d0:	mov	r5, r0
   124d4:	add	r0, pc, #348	; 0x15c
   124d8:	movw	r2, #41154	; 0xa0c2
   124dc:	mov	r4, r1
   124e0:	movt	r7, #2
   124e4:	vld1.64	{d16-d17}, [r0]
   124e8:	movt	r2, #1
   124ec:	mov	r0, r5
   124f0:	vld1.64	{d18-d19}, [r7 :128]
   124f4:	vadd.i64	q8, q9, q8
   124f8:	vst1.64	{d16-d17}, [r7 :128]
   124fc:	bl	1202c <getopt@plt>
   12500:	mov	r8, #0
   12504:	cmn	r0, #1
   12508:	beq	12590 <main@@Base+0xd0>
   1250c:	movw	r9, #41154	; 0xa0c2
   12510:	add	r6, r7, #40	; 0x28
   12514:	add	sl, r7, #48	; 0x30
   12518:	movt	r9, #1
   1251c:	ldrd	r2, [r7, #16]
   12520:	adds	r2, r2, #1
   12524:	adc	r3, r3, #0
   12528:	cmp	r0, #111	; 0x6f
   1252c:	mov	r0, r6
   12530:	strd	r2, [r7, #16]
   12534:	bne	12558 <main@@Base+0x98>
   12538:	ldrd	r0, [r7, #32]
   1253c:	adds	r0, r0, #1
   12540:	adc	r1, r1, #0
   12544:	strd	r0, [r7, #32]
   12548:	movw	r0, #49392	; 0xc0f0
   1254c:	movt	r0, #2
   12550:	ldr	r8, [r0]
   12554:	mov	r0, sl
   12558:	ldrd	r2, [r0]
   1255c:	adds	r2, r2, #1
   12560:	adc	r3, r3, #0
   12564:	strd	r2, [r0]
   12568:	mov	r2, r9
   1256c:	ldrd	r0, [r7, #56]	; 0x38
   12570:	adds	r0, r0, #1
   12574:	adc	r1, r1, #0
   12578:	strd	r0, [r7, #56]	; 0x38
   1257c:	mov	r0, r5
   12580:	mov	r1, r4
   12584:	bl	1202c <getopt@plt>
   12588:	cmn	r0, #1
   1258c:	bne	1251c <main@@Base+0x5c>
   12590:	ldrd	r0, [r7, #24]
   12594:	adds	r0, r0, #1
   12598:	adc	r1, r1, #0
   1259c:	strd	r0, [r7, #24]
   125a0:	movw	r0, #49376	; 0xc0e0
   125a4:	movt	r0, #2
   125a8:	ldr	r0, [r0]
   125ac:	cmp	r0, r5
   125b0:	bge	12600 <main@@Base+0x140>
   125b4:	ldrd	r2, [r7, #64]	; 0x40
   125b8:	ldr	r6, [r7, #80]	; 0x50
   125bc:	ldr	r1, [r7, #84]	; 0x54
   125c0:	adds	r2, r2, #1
   125c4:	adc	r3, r3, #0
   125c8:	adds	r6, r6, #1
   125cc:	adc	r1, r1, #0
   125d0:	str	r6, [r7, #80]	; 0x50
   125d4:	strd	r2, [r7, #64]	; 0x40
   125d8:	cmp	r8, #0
   125dc:	str	r1, [r7, #84]	; 0x54
   125e0:	movw	r1, #41157	; 0xa0c5
   125e4:	ldr	r0, [r4, r0, lsl #2]
   125e8:	movt	r1, #1
   125ec:	movne	r1, r8
   125f0:	bl	12410 <my_main@@Base>
   125f4:	mov	r0, #0
   125f8:	sub	sp, fp, #28
   125fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12600:	ldrd	r0, [r7, #72]	; 0x48
   12604:	mov	r2, #1
   12608:	adds	r0, r0, #1
   1260c:	adc	r1, r1, #0
   12610:	strd	r0, [r7, #72]	; 0x48
   12614:	movw	r0, #49384	; 0xc0e8
   12618:	mov	r1, #45	; 0x2d
   1261c:	movt	r0, #2
   12620:	ldr	r3, [r0]
   12624:	movw	r0, #41161	; 0xa0c9
   12628:	movt	r0, #1
   1262c:	bl	11fa8 <fwrite@plt>
   12630:	mov	r0, #1
   12634:	bl	12008 <exit@plt>
   12638:	andeq	r0, r0, r1
   1263c:	andeq	r0, r0, r0
   12640:	andeq	r0, r0, r1
   12644:	andeq	r0, r0, r0
   12648:	push	{r4, lr}
   1264c:	sub	sp, sp, #8
   12650:	movw	r4, #61536	; 0xf060
   12654:	movw	r0, #41207	; 0xa0f7
   12658:	movw	r1, #41285	; 0xa145
   1265c:	movt	r4, #32426	; 0x7eaa
   12660:	movt	r0, #1
   12664:	movt	r1, #1
   12668:	mov	r2, r4
   1266c:	bl	16ff8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   12670:	movw	r1, #41290	; 0xa14a
   12674:	movw	r2, #54228	; 0xd3d4
   12678:	mov	r0, #0
   1267c:	mov	r3, #0
   12680:	str	r4, [sp]
   12684:	movt	r1, #1
   12688:	movt	r2, #56367	; 0xdc2f
   1268c:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   12690:	movw	r1, #49408	; 0xc100
   12694:	mov	r0, #14
   12698:	movt	r1, #2
   1269c:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   126a0:	movw	r1, #41300	; 0xa154
   126a4:	movw	r2, #56469	; 0xdc95
   126a8:	mov	r0, #1
   126ac:	mov	r3, #0
   126b0:	str	r4, [sp]
   126b4:	movt	r1, #1
   126b8:	movt	r2, #34894	; 0x884e
   126bc:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   126c0:	movw	r1, #49520	; 0xc170
   126c4:	mov	r0, #2
   126c8:	movt	r1, #2
   126cc:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   126d0:	movw	r1, #45251	; 0xb0c3
   126d4:	movw	r2, #34236	; 0x85bc
   126d8:	mov	r0, #2
   126dc:	mov	r3, #0
   126e0:	str	r4, [sp]
   126e4:	movt	r1, #1
   126e8:	movt	r2, #57659	; 0xe13b
   126ec:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   126f0:	movw	r1, #49536	; 0xc180
   126f4:	mov	r0, #11
   126f8:	movt	r1, #2
   126fc:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   12700:	bl	18754 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   12704:	add	sp, sp, #8
   12708:	pop	{r4, lr}
   1270c:	b	194c0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   12710:	push	{fp, lr}
   12714:	bl	12648 <main@@Base+0x188>
   12718:	movw	r0, #49408	; 0xc100
   1271c:	vmov.i32	q8, #0	; 0x00000000
   12720:	mov	r3, #96	; 0x60
   12724:	movt	r0, #2
   12728:	add	r1, r0, #80	; 0x50
   1272c:	vst1.64	{d16-d17}, [r1 :128]
   12730:	add	r1, r0, #64	; 0x40
   12734:	vst1.64	{d16-d17}, [r1 :128]
   12738:	add	r1, r0, #48	; 0x30
   1273c:	vst1.64	{d16-d17}, [r1 :128]
   12740:	add	r1, r0, #32
   12744:	vst1.64	{d16-d17}, [r1 :128]
   12748:	add	r1, r0, #16
   1274c:	vst1.64	{d16-d17}, [r0 :128], r3
   12750:	vst1.64	{d16-d17}, [r1 :128]
   12754:	movw	r1, #49520	; 0xc170
   12758:	vst1.64	{d16-d17}, [r0 :128]
   1275c:	mov	r0, #84	; 0x54
   12760:	movt	r1, #2
   12764:	vst1.64	{d16-d17}, [r1 :128]
   12768:	movw	r1, #49536	; 0xc180
   1276c:	movt	r1, #2
   12770:	add	r2, r1, #16
   12774:	vst1.64	{d16-d17}, [r2 :128]
   12778:	add	r2, r1, #32
   1277c:	vst1.64	{d16-d17}, [r2 :128]
   12780:	add	r2, r1, #48	; 0x30
   12784:	vst1.64	{d16-d17}, [r2 :128]
   12788:	add	r2, r1, #64	; 0x40
   1278c:	vst1.64	{d16-d17}, [r2 :128]
   12790:	mov	r2, #0
   12794:	str	r2, [r1, #80]	; 0x50
   12798:	vst1.64	{d16-d17}, [r1 :128], r0
   1279c:	str	r2, [r1]
   127a0:	pop	{fp, pc}
   127a4:	movw	r0, #9800	; 0x2648
   127a8:	movw	r1, #10000	; 0x2710
   127ac:	movt	r0, #1
   127b0:	movt	r1, #1
   127b4:	b	19974 <__gcov_flush@@Base+0xb8>

000127b8 <init_token_int_type@@Base>:
   127b8:	movw	r1, #49632	; 0xc1e0
   127bc:	add	r2, pc, #28
   127c0:	movt	r1, #2
   127c4:	vld1.64	{d16-d17}, [r2]
   127c8:	vld1.64	{d18-d19}, [r1 :128]
   127cc:	vadd.i64	q8, q9, q8
   127d0:	vst1.64	{d16-d17}, [r1 :128]
   127d4:	mov	r1, #0
   127d8:	str	r1, [r0]
   127dc:	bx	lr
   127e0:	andeq	r0, r0, r1
   127e4:	andeq	r0, r0, r0
   127e8:	andeq	r0, r0, r1
   127ec:	andeq	r0, r0, r0

000127f0 <init_token_int_value@@Base>:
   127f0:	movw	r2, #49648	; 0xc1f0
   127f4:	add	r3, pc, #36	; 0x24
   127f8:	movt	r2, #2
   127fc:	vld1.64	{d16-d17}, [r3]
   12800:	vld1.64	{d18-d19}, [r2 :128]
   12804:	vadd.i64	q8, q9, q8
   12808:	vst1.64	{d16-d17}, [r2 :128]
   1280c:	mov	r2, #1
   12810:	str	r2, [r0]
   12814:	str	r1, [r0, #4]
   12818:	bx	lr
   1281c:	nop	{0}
   12820:	andeq	r0, r0, r1
   12824:	andeq	r0, r0, r0
   12828:	andeq	r0, r0, r1
   1282c:	andeq	r0, r0, r0

00012830 <init_token_function@@Base>:
   12830:	movw	r2, #49664	; 0xc200
   12834:	add	r3, pc, #36	; 0x24
   12838:	movt	r2, #2
   1283c:	vld1.64	{d16-d17}, [r3]
   12840:	vld1.64	{d18-d19}, [r2 :128]
   12844:	vadd.i64	q8, q9, q8
   12848:	vst1.64	{d16-d17}, [r2 :128]
   1284c:	mov	r2, #2
   12850:	str	r2, [r0]
   12854:	str	r1, [r0, #4]
   12858:	bx	lr
   1285c:	nop	{0}
   12860:	andeq	r0, r0, r1
   12864:	andeq	r0, r0, r0
   12868:	andeq	r0, r0, r1
   1286c:	andeq	r0, r0, r0

00012870 <init_token_opar@@Base>:
   12870:	movw	r1, #49680	; 0xc210
   12874:	add	r2, pc, #28
   12878:	movt	r1, #2
   1287c:	vld1.64	{d16-d17}, [r2]
   12880:	vld1.64	{d18-d19}, [r1 :128]
   12884:	vadd.i64	q8, q9, q8
   12888:	vst1.64	{d16-d17}, [r1 :128]
   1288c:	mov	r1, #3
   12890:	str	r1, [r0]
   12894:	bx	lr
   12898:	andeq	r0, r0, r1
   1289c:	andeq	r0, r0, r0
   128a0:	andeq	r0, r0, r1
   128a4:	andeq	r0, r0, r0

000128a8 <init_token_cpar@@Base>:
   128a8:	movw	r1, #49696	; 0xc220
   128ac:	add	r2, pc, #28
   128b0:	movt	r1, #2
   128b4:	vld1.64	{d16-d17}, [r2]
   128b8:	vld1.64	{d18-d19}, [r1 :128]
   128bc:	vadd.i64	q8, q9, q8
   128c0:	vst1.64	{d16-d17}, [r1 :128]
   128c4:	mov	r1, #4
   128c8:	str	r1, [r0]
   128cc:	bx	lr
   128d0:	andeq	r0, r0, r1
   128d4:	andeq	r0, r0, r0
   128d8:	andeq	r0, r0, r1
   128dc:	andeq	r0, r0, r0

000128e0 <init_token_obra@@Base>:
   128e0:	movw	r1, #49712	; 0xc230
   128e4:	add	r2, pc, #28
   128e8:	movt	r1, #2
   128ec:	vld1.64	{d16-d17}, [r2]
   128f0:	vld1.64	{d18-d19}, [r1 :128]
   128f4:	vadd.i64	q8, q9, q8
   128f8:	vst1.64	{d16-d17}, [r1 :128]
   128fc:	mov	r1, #5
   12900:	str	r1, [r0]
   12904:	bx	lr
   12908:	andeq	r0, r0, r1
   1290c:	andeq	r0, r0, r0
   12910:	andeq	r0, r0, r1
   12914:	andeq	r0, r0, r0

00012918 <init_token_cbra@@Base>:
   12918:	movw	r1, #49728	; 0xc240
   1291c:	add	r2, pc, #28
   12920:	movt	r1, #2
   12924:	vld1.64	{d16-d17}, [r2]
   12928:	vld1.64	{d18-d19}, [r1 :128]
   1292c:	vadd.i64	q8, q9, q8
   12930:	vst1.64	{d16-d17}, [r1 :128]
   12934:	mov	r1, #6
   12938:	str	r1, [r0]
   1293c:	bx	lr
   12940:	andeq	r0, r0, r1
   12944:	andeq	r0, r0, r0
   12948:	andeq	r0, r0, r1
   1294c:	andeq	r0, r0, r0

00012950 <init_token_return@@Base>:
   12950:	movw	r1, #49744	; 0xc250
   12954:	add	r2, pc, #28
   12958:	movt	r1, #2
   1295c:	vld1.64	{d16-d17}, [r2]
   12960:	vld1.64	{d18-d19}, [r1 :128]
   12964:	vadd.i64	q8, q9, q8
   12968:	vst1.64	{d16-d17}, [r1 :128]
   1296c:	mov	r1, #7
   12970:	str	r1, [r0]
   12974:	bx	lr
   12978:	andeq	r0, r0, r1
   1297c:	andeq	r0, r0, r0
   12980:	andeq	r0, r0, r1
   12984:	andeq	r0, r0, r0

00012988 <init_token_semicolon@@Base>:
   12988:	movw	r1, #49760	; 0xc260
   1298c:	add	r2, pc, #28
   12990:	movt	r1, #2
   12994:	vld1.64	{d16-d17}, [r2]
   12998:	vld1.64	{d18-d19}, [r1 :128]
   1299c:	vadd.i64	q8, q9, q8
   129a0:	vst1.64	{d16-d17}, [r1 :128]
   129a4:	mov	r1, #8
   129a8:	str	r1, [r0]
   129ac:	bx	lr
   129b0:	andeq	r0, r0, r1
   129b4:	andeq	r0, r0, r0
   129b8:	andeq	r0, r0, r1
   129bc:	andeq	r0, r0, r0

000129c0 <init_token_eof@@Base>:
   129c0:	movw	r1, #49776	; 0xc270
   129c4:	add	r2, pc, #28
   129c8:	movt	r1, #2
   129cc:	vld1.64	{d16-d17}, [r2]
   129d0:	vld1.64	{d18-d19}, [r1 :128]
   129d4:	vadd.i64	q8, q9, q8
   129d8:	vst1.64	{d16-d17}, [r1 :128]
   129dc:	mov	r1, #9
   129e0:	str	r1, [r0]
   129e4:	bx	lr
   129e8:	andeq	r0, r0, r1
   129ec:	andeq	r0, r0, r0
   129f0:	andeq	r0, r0, r1
   129f4:	andeq	r0, r0, r0

000129f8 <init_token_if@@Base>:
   129f8:	movw	r1, #49792	; 0xc280
   129fc:	add	r2, pc, #28
   12a00:	movt	r1, #2
   12a04:	vld1.64	{d16-d17}, [r2]
   12a08:	vld1.64	{d18-d19}, [r1 :128]
   12a0c:	vadd.i64	q8, q9, q8
   12a10:	vst1.64	{d16-d17}, [r1 :128]
   12a14:	mov	r1, #10
   12a18:	str	r1, [r0]
   12a1c:	bx	lr
   12a20:	andeq	r0, r0, r1
   12a24:	andeq	r0, r0, r0
   12a28:	andeq	r0, r0, r1
   12a2c:	andeq	r0, r0, r0

00012a30 <init_token_else@@Base>:
   12a30:	movw	r1, #49808	; 0xc290
   12a34:	add	r2, pc, #28
   12a38:	movt	r1, #2
   12a3c:	vld1.64	{d16-d17}, [r2]
   12a40:	vld1.64	{d18-d19}, [r1 :128]
   12a44:	vadd.i64	q8, q9, q8
   12a48:	vst1.64	{d16-d17}, [r1 :128]
   12a4c:	mov	r1, #11
   12a50:	str	r1, [r0]
   12a54:	bx	lr
   12a58:	andeq	r0, r0, r1
   12a5c:	andeq	r0, r0, r0
   12a60:	andeq	r0, r0, r1
   12a64:	andeq	r0, r0, r0

00012a68 <init_token_boolean_op@@Base>:
   12a68:	movw	r2, #49824	; 0xc2a0
   12a6c:	add	r3, pc, #36	; 0x24
   12a70:	movt	r2, #2
   12a74:	vld1.64	{d16-d17}, [r3]
   12a78:	vld1.64	{d18-d19}, [r2 :128]
   12a7c:	vadd.i64	q8, q9, q8
   12a80:	vst1.64	{d16-d17}, [r2 :128]
   12a84:	mov	r2, #12
   12a88:	str	r2, [r0]
   12a8c:	str	r1, [r0, #4]
   12a90:	bx	lr
   12a94:	nop	{0}
   12a98:	andeq	r0, r0, r1
   12a9c:	andeq	r0, r0, r0
   12aa0:	andeq	r0, r0, r1
   12aa4:	andeq	r0, r0, r0

00012aa8 <free_token_int_type@@Base>:
   12aa8:	movw	r1, #49840	; 0xc2b0
   12aac:	add	r2, pc, #20
   12ab0:	movt	r1, #2
   12ab4:	vld1.64	{d16-d17}, [r2]
   12ab8:	vld1.64	{d18-d19}, [r1 :128]
   12abc:	vadd.i64	q8, q9, q8
   12ac0:	vst1.64	{d16-d17}, [r1 :128]
   12ac4:	b	11f54 <free@plt>
   12ac8:	andeq	r0, r0, r1
   12acc:	andeq	r0, r0, r0
   12ad0:	andeq	r0, r0, r1
   12ad4:	andeq	r0, r0, r0

00012ad8 <free_token_int_value@@Base>:
   12ad8:	movw	r1, #49856	; 0xc2c0
   12adc:	add	r2, pc, #20
   12ae0:	movt	r1, #2
   12ae4:	vld1.64	{d16-d17}, [r2]
   12ae8:	vld1.64	{d18-d19}, [r1 :128]
   12aec:	vadd.i64	q8, q9, q8
   12af0:	vst1.64	{d16-d17}, [r1 :128]
   12af4:	b	11f54 <free@plt>
   12af8:	andeq	r0, r0, r1
   12afc:	andeq	r0, r0, r0
   12b00:	andeq	r0, r0, r1
   12b04:	andeq	r0, r0, r0

00012b08 <free_token_function@@Base>:
   12b08:	movw	r1, #49872	; 0xc2d0
   12b0c:	add	r2, pc, #20
   12b10:	movt	r1, #2
   12b14:	vld1.64	{d16-d17}, [r2]
   12b18:	vld1.64	{d18-d19}, [r1 :128]
   12b1c:	vadd.i64	q8, q9, q8
   12b20:	vst1.64	{d16-d17}, [r1 :128]
   12b24:	b	11f54 <free@plt>
   12b28:	andeq	r0, r0, r1
   12b2c:	andeq	r0, r0, r0
   12b30:	andeq	r0, r0, r1
   12b34:	andeq	r0, r0, r0

00012b38 <free_token_opar@@Base>:
   12b38:	movw	r1, #49888	; 0xc2e0
   12b3c:	add	r2, pc, #20
   12b40:	movt	r1, #2
   12b44:	vld1.64	{d16-d17}, [r2]
   12b48:	vld1.64	{d18-d19}, [r1 :128]
   12b4c:	vadd.i64	q8, q9, q8
   12b50:	vst1.64	{d16-d17}, [r1 :128]
   12b54:	b	11f54 <free@plt>
   12b58:	andeq	r0, r0, r1
   12b5c:	andeq	r0, r0, r0
   12b60:	andeq	r0, r0, r1
   12b64:	andeq	r0, r0, r0

00012b68 <free_token_cpar@@Base>:
   12b68:	movw	r1, #49904	; 0xc2f0
   12b6c:	add	r2, pc, #20
   12b70:	movt	r1, #2
   12b74:	vld1.64	{d16-d17}, [r2]
   12b78:	vld1.64	{d18-d19}, [r1 :128]
   12b7c:	vadd.i64	q8, q9, q8
   12b80:	vst1.64	{d16-d17}, [r1 :128]
   12b84:	b	11f54 <free@plt>
   12b88:	andeq	r0, r0, r1
   12b8c:	andeq	r0, r0, r0
   12b90:	andeq	r0, r0, r1
   12b94:	andeq	r0, r0, r0

00012b98 <free_token_obra@@Base>:
   12b98:	movw	r1, #49920	; 0xc300
   12b9c:	add	r2, pc, #20
   12ba0:	movt	r1, #2
   12ba4:	vld1.64	{d16-d17}, [r2]
   12ba8:	vld1.64	{d18-d19}, [r1 :128]
   12bac:	vadd.i64	q8, q9, q8
   12bb0:	vst1.64	{d16-d17}, [r1 :128]
   12bb4:	b	11f54 <free@plt>
   12bb8:	andeq	r0, r0, r1
   12bbc:	andeq	r0, r0, r0
   12bc0:	andeq	r0, r0, r1
   12bc4:	andeq	r0, r0, r0

00012bc8 <free_token_cbra@@Base>:
   12bc8:	movw	r1, #49936	; 0xc310
   12bcc:	add	r2, pc, #20
   12bd0:	movt	r1, #2
   12bd4:	vld1.64	{d16-d17}, [r2]
   12bd8:	vld1.64	{d18-d19}, [r1 :128]
   12bdc:	vadd.i64	q8, q9, q8
   12be0:	vst1.64	{d16-d17}, [r1 :128]
   12be4:	b	11f54 <free@plt>
   12be8:	andeq	r0, r0, r1
   12bec:	andeq	r0, r0, r0
   12bf0:	andeq	r0, r0, r1
   12bf4:	andeq	r0, r0, r0

00012bf8 <free_token_return@@Base>:
   12bf8:	movw	r1, #49952	; 0xc320
   12bfc:	add	r2, pc, #20
   12c00:	movt	r1, #2
   12c04:	vld1.64	{d16-d17}, [r2]
   12c08:	vld1.64	{d18-d19}, [r1 :128]
   12c0c:	vadd.i64	q8, q9, q8
   12c10:	vst1.64	{d16-d17}, [r1 :128]
   12c14:	b	11f54 <free@plt>
   12c18:	andeq	r0, r0, r1
   12c1c:	andeq	r0, r0, r0
   12c20:	andeq	r0, r0, r1
   12c24:	andeq	r0, r0, r0

00012c28 <free_token_semicolon@@Base>:
   12c28:	movw	r1, #49968	; 0xc330
   12c2c:	add	r2, pc, #20
   12c30:	movt	r1, #2
   12c34:	vld1.64	{d16-d17}, [r2]
   12c38:	vld1.64	{d18-d19}, [r1 :128]
   12c3c:	vadd.i64	q8, q9, q8
   12c40:	vst1.64	{d16-d17}, [r1 :128]
   12c44:	b	11f54 <free@plt>
   12c48:	andeq	r0, r0, r1
   12c4c:	andeq	r0, r0, r0
   12c50:	andeq	r0, r0, r1
   12c54:	andeq	r0, r0, r0

00012c58 <free_token_eof@@Base>:
   12c58:	movw	r1, #49984	; 0xc340
   12c5c:	add	r2, pc, #20
   12c60:	movt	r1, #2
   12c64:	vld1.64	{d16-d17}, [r2]
   12c68:	vld1.64	{d18-d19}, [r1 :128]
   12c6c:	vadd.i64	q8, q9, q8
   12c70:	vst1.64	{d16-d17}, [r1 :128]
   12c74:	b	11f54 <free@plt>
   12c78:	andeq	r0, r0, r1
   12c7c:	andeq	r0, r0, r0
   12c80:	andeq	r0, r0, r1
   12c84:	andeq	r0, r0, r0

00012c88 <free_token_if@@Base>:
   12c88:	movw	r1, #50000	; 0xc350
   12c8c:	add	r2, pc, #20
   12c90:	movt	r1, #2
   12c94:	vld1.64	{d16-d17}, [r2]
   12c98:	vld1.64	{d18-d19}, [r1 :128]
   12c9c:	vadd.i64	q8, q9, q8
   12ca0:	vst1.64	{d16-d17}, [r1 :128]
   12ca4:	b	11f54 <free@plt>
   12ca8:	andeq	r0, r0, r1
   12cac:	andeq	r0, r0, r0
   12cb0:	andeq	r0, r0, r1
   12cb4:	andeq	r0, r0, r0

00012cb8 <free_token_else@@Base>:
   12cb8:	movw	r1, #50016	; 0xc360
   12cbc:	add	r2, pc, #20
   12cc0:	movt	r1, #2
   12cc4:	vld1.64	{d16-d17}, [r2]
   12cc8:	vld1.64	{d18-d19}, [r1 :128]
   12ccc:	vadd.i64	q8, q9, q8
   12cd0:	vst1.64	{d16-d17}, [r1 :128]
   12cd4:	b	11f54 <free@plt>
   12cd8:	andeq	r0, r0, r1
   12cdc:	andeq	r0, r0, r0
   12ce0:	andeq	r0, r0, r1
   12ce4:	andeq	r0, r0, r0

00012ce8 <free_token_boolean_op@@Base>:
   12ce8:	push	{r4, r5, fp, lr}
   12cec:	add	fp, sp, #8
   12cf0:	movw	r5, #50032	; 0xc370
   12cf4:	mov	r4, r0
   12cf8:	movt	r5, #2
   12cfc:	ldrd	r0, [r5]
   12d00:	adds	r0, r0, #1
   12d04:	adc	r1, r1, #0
   12d08:	strd	r0, [r5]
   12d0c:	ldr	r0, [r4, #4]
   12d10:	cmp	r0, #0
   12d14:	beq	12d34 <free_token_boolean_op@@Base+0x4c>
   12d18:	ldrd	r2, [r5, #8]
   12d1c:	adds	r2, r2, #1
   12d20:	adc	r3, r3, #0
   12d24:	strd	r2, [r5, #8]
   12d28:	bl	11f54 <free@plt>
   12d2c:	add	r0, r5, #24
   12d30:	b	12d38 <free_token_boolean_op@@Base+0x50>
   12d34:	add	r0, r5, #16
   12d38:	ldrd	r2, [r0]
   12d3c:	adds	r2, r2, #1
   12d40:	adc	r3, r3, #0
   12d44:	strd	r2, [r0]
   12d48:	ldrd	r0, [r5, #32]
   12d4c:	adds	r0, r0, #1
   12d50:	adc	r1, r1, #0
   12d54:	strd	r0, [r5, #32]
   12d58:	mov	r0, r4
   12d5c:	pop	{r4, r5, fp, lr}
   12d60:	b	11f54 <free@plt>
   12d64:	push	{r4, r5, r6, lr}
   12d68:	sub	sp, sp, #8
   12d6c:	movw	r0, #41308	; 0xa15c
   12d70:	movw	r1, #41285	; 0xa145
   12d74:	movw	r2, #23366	; 0x5b46
   12d78:	movt	r0, #1
   12d7c:	movt	r1, #1
   12d80:	movt	r2, #47030	; 0xb7b6
   12d84:	bl	16ff8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   12d88:	movw	r0, #42384	; 0xa590
   12d8c:	movw	r6, #41856	; 0xa380
   12d90:	mov	r5, #0
   12d94:	movt	r0, #1
   12d98:	movt	r6, #1
   12d9c:	add	r4, r0, #4
   12da0:	mov	r3, r6
   12da4:	ldr	r0, [r3, r5]!
   12da8:	ldr	r1, [r3, #16]
   12dac:	str	r1, [sp]
   12db0:	ldmib	r3, {r1, r2}
   12db4:	ldrb	r3, [r3, #12]
   12db8:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   12dbc:	ldrd	r0, [r4, #-4]
   12dc0:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   12dc4:	add	r5, r5, #20
   12dc8:	add	r4, r4, #8
   12dcc:	cmp	r5, #520	; 0x208
   12dd0:	bne	12da0 <free_token_boolean_op@@Base+0xb8>
   12dd4:	bl	18754 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   12dd8:	add	sp, sp, #8
   12ddc:	pop	{r4, r5, r6, lr}
   12de0:	b	194c0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   12de4:	push	{fp, lr}
   12de8:	bl	12d64 <free_token_boolean_op@@Base+0x7c>
   12dec:	movw	r0, #49648	; 0xc1f0
   12df0:	vmov.i32	q8, #0	; 0x00000000
   12df4:	mov	r1, #0
   12df8:	movt	r0, #2
   12dfc:	vst1.64	{d16-d17}, [r0 :128]
   12e00:	movw	r0, #49632	; 0xc1e0
   12e04:	movt	r0, #2
   12e08:	vst1.64	{d16-d17}, [r0 :128]
   12e0c:	movw	r0, #49664	; 0xc200
   12e10:	movt	r0, #2
   12e14:	vst1.64	{d16-d17}, [r0 :128]
   12e18:	movw	r0, #49680	; 0xc210
   12e1c:	movt	r0, #2
   12e20:	vst1.64	{d16-d17}, [r0 :128]
   12e24:	movw	r0, #49696	; 0xc220
   12e28:	movt	r0, #2
   12e2c:	vst1.64	{d16-d17}, [r0 :128]
   12e30:	movw	r0, #49712	; 0xc230
   12e34:	movt	r0, #2
   12e38:	vst1.64	{d16-d17}, [r0 :128]
   12e3c:	movw	r0, #49728	; 0xc240
   12e40:	movt	r0, #2
   12e44:	vst1.64	{d16-d17}, [r0 :128]
   12e48:	movw	r0, #49744	; 0xc250
   12e4c:	movt	r0, #2
   12e50:	vst1.64	{d16-d17}, [r0 :128]
   12e54:	movw	r0, #49760	; 0xc260
   12e58:	movt	r0, #2
   12e5c:	vst1.64	{d16-d17}, [r0 :128]
   12e60:	movw	r0, #49776	; 0xc270
   12e64:	movt	r0, #2
   12e68:	vst1.64	{d16-d17}, [r0 :128]
   12e6c:	movw	r0, #49792	; 0xc280
   12e70:	movt	r0, #2
   12e74:	vst1.64	{d16-d17}, [r0 :128]
   12e78:	movw	r0, #49808	; 0xc290
   12e7c:	movt	r0, #2
   12e80:	vst1.64	{d16-d17}, [r0 :128]
   12e84:	movw	r0, #49824	; 0xc2a0
   12e88:	movt	r0, #2
   12e8c:	vst1.64	{d16-d17}, [r0 :128]
   12e90:	movw	r0, #49840	; 0xc2b0
   12e94:	movt	r0, #2
   12e98:	vst1.64	{d16-d17}, [r0 :128]
   12e9c:	movw	r0, #49856	; 0xc2c0
   12ea0:	movt	r0, #2
   12ea4:	vst1.64	{d16-d17}, [r0 :128]
   12ea8:	movw	r0, #49872	; 0xc2d0
   12eac:	movt	r0, #2
   12eb0:	vst1.64	{d16-d17}, [r0 :128]
   12eb4:	movw	r0, #49888	; 0xc2e0
   12eb8:	movt	r0, #2
   12ebc:	vst1.64	{d16-d17}, [r0 :128]
   12ec0:	movw	r0, #49904	; 0xc2f0
   12ec4:	movt	r0, #2
   12ec8:	vst1.64	{d16-d17}, [r0 :128]
   12ecc:	movw	r0, #49920	; 0xc300
   12ed0:	movt	r0, #2
   12ed4:	vst1.64	{d16-d17}, [r0 :128]
   12ed8:	movw	r0, #49936	; 0xc310
   12edc:	movt	r0, #2
   12ee0:	vst1.64	{d16-d17}, [r0 :128]
   12ee4:	movw	r0, #49952	; 0xc320
   12ee8:	movt	r0, #2
   12eec:	vst1.64	{d16-d17}, [r0 :128]
   12ef0:	movw	r0, #49968	; 0xc330
   12ef4:	movt	r0, #2
   12ef8:	vst1.64	{d16-d17}, [r0 :128]
   12efc:	movw	r0, #49984	; 0xc340
   12f00:	movt	r0, #2
   12f04:	vst1.64	{d16-d17}, [r0 :128]
   12f08:	movw	r0, #50000	; 0xc350
   12f0c:	movt	r0, #2
   12f10:	vst1.64	{d16-d17}, [r0 :128]
   12f14:	movw	r0, #50016	; 0xc360
   12f18:	movt	r0, #2
   12f1c:	vst1.64	{d16-d17}, [r0 :128]
   12f20:	movw	r0, #50032	; 0xc370
   12f24:	movt	r0, #2
   12f28:	add	r2, r0, #16
   12f2c:	str	r1, [r0, #32]
   12f30:	vst1.64	{d16-d17}, [r2 :128]
   12f34:	mov	r2, #36	; 0x24
   12f38:	vst1.64	{d16-d17}, [r0 :128], r2
   12f3c:	str	r1, [r0]
   12f40:	pop	{fp, pc}
   12f44:	movw	r0, #11620	; 0x2d64
   12f48:	movw	r1, #11748	; 0x2de4
   12f4c:	movt	r0, #1
   12f50:	movt	r1, #1
   12f54:	b	19974 <__gcov_flush@@Base+0xb8>

00012f58 <init_lexer@@Base>:
   12f58:	movw	r2, #50080	; 0xc3a0
   12f5c:	add	r3, pc, #36	; 0x24
   12f60:	movt	r2, #2
   12f64:	vld1.64	{d16-d17}, [r3]
   12f68:	vld1.64	{d18-d19}, [r2 :128]
   12f6c:	vadd.i64	q8, q9, q8
   12f70:	vst1.64	{d16-d17}, [r2 :128]
   12f74:	mov	r2, #0
   12f78:	stm	r0, {r1, r2}
   12f7c:	str	r2, [r0, #8]
   12f80:	bx	lr
   12f84:	nop	{0}
   12f88:	andeq	r0, r0, r1
   12f8c:	andeq	r0, r0, r0
   12f90:	andeq	r0, r0, r1
   12f94:	andeq	r0, r0, r0

00012f98 <destroy_lexer@@Base>:
   12f98:	push	{r4, sl, fp, lr}
   12f9c:	add	fp, sp, #8
   12fa0:	movw	r4, #50096	; 0xc3b0
   12fa4:	movt	r4, #2
   12fa8:	ldrd	r2, [r4]
   12fac:	adds	r2, r2, #1
   12fb0:	adc	r3, r3, #0
   12fb4:	strd	r2, [r4]
   12fb8:	ldr	r0, [r0, #4]
   12fbc:	cmp	r0, #0
   12fc0:	beq	12ffc <destroy_lexer@@Base+0x64>
   12fc4:	movw	r1, #50144	; 0xc3e0
   12fc8:	add	r2, pc, #88	; 0x58
   12fcc:	movt	r1, #2
   12fd0:	vld1.64	{d16-d17}, [r2]
   12fd4:	ldrd	r2, [r4, #8]
   12fd8:	vld1.64	{d18-d19}, [r1 :128]
   12fdc:	adds	r2, r2, #1
   12fe0:	adc	r3, r3, #0
   12fe4:	strd	r2, [r4, #8]
   12fe8:	vadd.i64	q8, q9, q8
   12fec:	vst1.64	{d16-d17}, [r1 :128]
   12ff0:	bl	11f54 <free@plt>
   12ff4:	add	r0, r4, #24
   12ff8:	b	13000 <destroy_lexer@@Base+0x68>
   12ffc:	add	r0, r4, #16
   13000:	ldrd	r2, [r0]
   13004:	adds	r2, r2, #1
   13008:	adc	r3, r3, #0
   1300c:	strd	r2, [r0]
   13010:	ldrd	r0, [r4, #32]
   13014:	adds	r0, r0, #1
   13018:	adc	r1, r1, #0
   1301c:	strd	r0, [r4, #32]
   13020:	pop	{r4, sl, fp, pc}
   13024:	nop	{0}
   13028:	andeq	r0, r0, r1
   1302c:	andeq	r0, r0, r0
   13030:	andeq	r0, r0, r1
   13034:	andeq	r0, r0, r0

00013038 <free_stack_base@@Base>:
   13038:	movw	r1, #50144	; 0xc3e0
   1303c:	add	r2, pc, #20
   13040:	movt	r1, #2
   13044:	vld1.64	{d16-d17}, [r2]
   13048:	vld1.64	{d18-d19}, [r1 :128]
   1304c:	vadd.i64	q8, q9, q8
   13050:	vst1.64	{d16-d17}, [r1 :128]
   13054:	b	11f54 <free@plt>
   13058:	andeq	r0, r0, r1
   1305c:	andeq	r0, r0, r0
   13060:	andeq	r0, r0, r1
   13064:	andeq	r0, r0, r0

00013068 <push_back@@Base>:
   13068:	push	{r4, r5, fp, lr}
   1306c:	add	fp, sp, #8
   13070:	mov	r5, r0
   13074:	movw	r0, #50160	; 0xc3f0
   13078:	mov	r4, r1
   1307c:	add	r1, pc, #44	; 0x2c
   13080:	movt	r0, #2
   13084:	vld1.64	{d16-d17}, [r1]
   13088:	vld1.64	{d18-d19}, [r0 :128]
   1308c:	vadd.i64	q8, q9, q8
   13090:	vst1.64	{d16-d17}, [r0 :128]
   13094:	mov	r0, #8
   13098:	bl	11fcc <malloc@plt>
   1309c:	ldr	r1, [r5, #4]
   130a0:	stm	r0, {r1, r4}
   130a4:	str	r0, [r5, #4]
   130a8:	pop	{r4, r5, fp, pc}
   130ac:	nop	{0}
   130b0:	andeq	r0, r0, r1
   130b4:	andeq	r0, r0, r0
   130b8:	andeq	r0, r0, r1
   130bc:	andeq	r0, r0, r0

000130c0 <get_char@@Base>:
   130c0:	movw	r1, #50176	; 0xc400
   130c4:	add	r2, pc, #44	; 0x2c
   130c8:	movt	r1, #2
   130cc:	vld1.64	{d16-d17}, [r2]
   130d0:	vld1.64	{d18-d19}, [r1 :128]
   130d4:	vadd.i64	q8, q9, q8
   130d8:	vst1.64	{d16-d17}, [r1 :128]
   130dc:	ldr	r2, [r0, #8]
   130e0:	ldr	r1, [r0]
   130e4:	add	r3, r2, #1
   130e8:	str	r3, [r0, #8]
   130ec:	ldrb	r0, [r1, r2]
   130f0:	bx	lr
   130f4:	nop	{0}
   130f8:	andeq	r0, r0, r1
   130fc:	andeq	r0, r0, r0
   13100:	andeq	r0, r0, r1
   13104:	andeq	r0, r0, r0

00013108 <push_back_chars@@Base>:
   13108:	push	{r4, r5, r6, r7, fp, lr}
   1310c:	add	fp, sp, #16
   13110:	movw	r2, #50192	; 0xc410
   13114:	movt	r2, #2
   13118:	ldrd	r4, [r2]
   1311c:	adds	r4, r4, #1
   13120:	adc	r5, r5, #0
   13124:	strd	r4, [r2]
   13128:	ldr	r3, [r0, #8]
   1312c:	cmp	r3, r1
   13130:	bcc	13164 <push_back_chars@@Base+0x5c>
   13134:	ldrd	r4, [r2, #8]
   13138:	ldrd	r6, [r2, #24]
   1313c:	sub	r1, r3, r1
   13140:	adds	r4, r4, #1
   13144:	adc	r5, r5, #0
   13148:	adds	r6, r6, #1
   1314c:	adc	r7, r7, #0
   13150:	str	r6, [r2, #24]
   13154:	strd	r4, [r2, #8]
   13158:	str	r7, [r2, #28]
   1315c:	str	r1, [r0, #8]
   13160:	pop	{r4, r5, r6, r7, fp, pc}
   13164:	ldrd	r0, [r2, #16]
   13168:	adds	r0, r0, #1
   1316c:	adc	r1, r1, #0
   13170:	strd	r0, [r2, #16]
   13174:	movw	r0, #49384	; 0xc0e8
   13178:	mov	r1, #32
   1317c:	mov	r2, #1
   13180:	movt	r0, #2
   13184:	ldr	r3, [r0]
   13188:	movw	r0, #42592	; 0xa660
   1318c:	movt	r0, #1
   13190:	bl	11fa8 <fwrite@plt>
   13194:	mov	r0, #1
   13198:	bl	12008 <exit@plt>
   1319c:	nop	{0}

000131a0 <push_back_one_char@@Base>:
   131a0:	movw	r1, #50224	; 0xc430
   131a4:	add	r2, pc, #28
   131a8:	movt	r1, #2
   131ac:	vld1.64	{d16-d17}, [r2]
   131b0:	vld1.64	{d18-d19}, [r1 :128]
   131b4:	vadd.i64	q8, q9, q8
   131b8:	vst1.64	{d16-d17}, [r1 :128]
   131bc:	mov	r1, #1
   131c0:	b	13108 <push_back_chars@@Base>
   131c4:	nop	{0}
   131c8:	andeq	r0, r0, r1
   131cc:	andeq	r0, r0, r0
   131d0:	andeq	r0, r0, r1
   131d4:	andeq	r0, r0, r0

000131d8 <next@@Base>:
   131d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131dc:	add	fp, sp, #28
   131e0:	sub	sp, sp, #524	; 0x20c
   131e4:	movw	r7, #50240	; 0xc440
   131e8:	mov	r4, r0
   131ec:	movt	r7, #2
   131f0:	ldrd	r0, [r7]
   131f4:	adds	r0, r0, #1
   131f8:	adc	r1, r1, #0
   131fc:	strd	r0, [r7]
   13200:	ldr	r0, [r4, #4]
   13204:	cmp	r0, #0
   13208:	beq	13258 <next@@Base+0x80>
   1320c:	ldrd	r2, [r7, #8]
   13210:	adds	r2, r2, #1
   13214:	adc	r3, r3, #0
   13218:	strd	r2, [r7, #8]
   1321c:	ldr	r1, [r0]
   13220:	str	r1, [r4, #4]
   13224:	mov	r1, #0
   13228:	ldr	r6, [r0, #4]
   1322c:	str	r1, [r0, #4]
   13230:	movw	r1, #50144	; 0xc3e0
   13234:	add	r2, pc, #996	; 0x3e4
   13238:	movt	r1, #2
   1323c:	vld1.64	{d16-d17}, [r2]
   13240:	vld1.64	{d18-d19}, [r1 :128]
   13244:	vadd.i64	q8, q9, q8
   13248:	vst1.64	{d16-d17}, [r1 :128]
   1324c:	bl	11f54 <free@plt>
   13250:	add	r0, r7, #24
   13254:	b	1373c <next@@Base+0x564>
   13258:	movw	lr, #50176	; 0xc400
   1325c:	add	r1, pc, #956	; 0x3bc
   13260:	ldrd	r2, [r7, #16]
   13264:	movt	lr, #2
   13268:	vld1.64	{d16-d17}, [r1]
   1326c:	vld1.64	{d18-d19}, [lr :128]
   13270:	adds	r2, r2, #1
   13274:	adc	r3, r3, #0
   13278:	strd	r2, [r7, #16]
   1327c:	vadd.i64	q8, q9, q8
   13280:	vst1.64	{d16-d17}, [lr :128]
   13284:	ldr	r2, [r4, #8]
   13288:	ldr	r1, [r4]
   1328c:	add	r3, r2, #1
   13290:	str	r3, [r4, #8]
   13294:	ldrb	r5, [r1, r2]
   13298:	ldrd	r2, [r7, #32]
   1329c:	adds	r2, r2, #1
   132a0:	adc	r3, r3, #0
   132a4:	cmp	r5, #0
   132a8:	strd	r2, [r7, #32]
   132ac:	beq	13718 <next@@Base+0x540>
   132b0:	mov	r2, #0
   132b4:	add	r8, r7, #56	; 0x38
   132b8:	add	r9, r7, #112	; 0x70
   132bc:	add	ip, sp, #8
   132c0:	mov	sl, #0
   132c4:	ldr	r1, [r7, #40]	; 0x28
   132c8:	ldr	r3, [r7, #44]	; 0x2c
   132cc:	adds	r1, r1, #1
   132d0:	adc	r3, r3, #0
   132d4:	cmp	r2, #5
   132d8:	str	r1, [r7, #40]	; 0x28
   132dc:	str	r3, [r7, #44]	; 0x2c
   132e0:	bhi	1334c <next@@Base+0x174>
   132e4:	add	r1, pc, #0
   132e8:	ldr	pc, [r1, r2, lsl #2]
   132ec:	andeq	r3, r1, r4, lsl #6
   132f0:	andeq	r3, r1, r0, ror r7
   132f4:	andeq	r3, r1, ip, lsr #22
   132f8:	andeq	r3, r1, r0, lsr #16
   132fc:	andeq	r3, r1, ip, asr r9
   13300:	ldrdeq	r3, [r1], -r0
   13304:	ldrd	r2, [r7, #64]	; 0x40
   13308:	mov	r1, r9
   1330c:	adds	r2, r2, #1
   13310:	adc	r3, r3, #0
   13314:	strd	r2, [r7, #64]	; 0x40
   13318:	uxtb	r2, r5
   1331c:	cmp	r2, #9
   13320:	beq	13378 <next@@Base+0x1a0>
   13324:	ldr	r1, [r7, #120]	; 0x78
   13328:	ldr	r3, [r7, #124]	; 0x7c
   1332c:	adds	r1, r1, #1
   13330:	adc	r3, r3, #0
   13334:	cmp	r2, #32
   13338:	str	r1, [r7, #120]	; 0x78
   1333c:	str	r3, [r7, #124]	; 0x7c
   13340:	bne	13354 <next@@Base+0x17c>
   13344:	add	r1, r7, #128	; 0x80
   13348:	b	13378 <next@@Base+0x1a0>
   1334c:	mov	r1, r8
   13350:	b	133bc <next@@Base+0x1e4>
   13354:	ldr	r1, [r7, #136]	; 0x88
   13358:	ldr	r3, [r7, #140]	; 0x8c
   1335c:	adds	r1, r1, #1
   13360:	adc	r3, r3, #0
   13364:	cmp	r2, #10
   13368:	str	r1, [r7, #136]	; 0x88
   1336c:	str	r3, [r7, #140]	; 0x8c
   13370:	bne	133f0 <next@@Base+0x218>
   13374:	add	r1, r7, #144	; 0x90
   13378:	ldrd	r2, [r1]
   1337c:	adds	r2, r2, #1
   13380:	adc	r3, r3, #0
   13384:	strd	r2, [r1]
   13388:	add	r1, pc, #656	; 0x290
   1338c:	vld1.64	{d18-d19}, [lr :128]
   13390:	vld1.64	{d16-d17}, [r1]
   13394:	vadd.i64	q8, q9, q8
   13398:	vst1.64	{d16-d17}, [lr :128]
   1339c:	ldr	r3, [r4, #8]
   133a0:	ldr	r2, [r4]
   133a4:	add	r1, r3, #1
   133a8:	add	r5, r2, r3
   133ac:	mov	r2, #0
   133b0:	str	r1, [r4, #8]
   133b4:	add	r1, r7, #160	; 0xa0
   133b8:	ldrb	r5, [r5]
   133bc:	ldm	r1, {r0, r3}
   133c0:	adds	r0, r0, #1
   133c4:	adc	r3, r3, #0
   133c8:	stm	r1, {r0, r3}
   133cc:	ldr	r0, [r7, #984]	; 0x3d8
   133d0:	ldr	r1, [r7, #988]	; 0x3dc
   133d4:	adds	r0, r0, #1
   133d8:	adc	r1, r1, #0
   133dc:	tst	r5, #255	; 0xff
   133e0:	str	r0, [r7, #984]	; 0x3d8
   133e4:	str	r1, [r7, #988]	; 0x3dc
   133e8:	bne	132c4 <next@@Base+0xec>
   133ec:	b	13718 <next@@Base+0x540>
   133f0:	ldr	r1, [r7, #152]	; 0x98
   133f4:	ldr	r3, [r7, #156]	; 0x9c
   133f8:	adds	r1, r1, #1
   133fc:	adc	r3, r3, #0
   13400:	cmp	r2, #48	; 0x30
   13404:	str	r1, [r7, #152]	; 0x98
   13408:	str	r3, [r7, #156]	; 0x9c
   1340c:	beq	13d88 <next@@Base+0xbb0>
   13410:	ldr	r1, [r7, #176]	; 0xb0
   13414:	ldr	r3, [r7, #180]	; 0xb4
   13418:	adds	r1, r1, #1
   1341c:	adc	r3, r3, #0
   13420:	cmp	r2, #49	; 0x31
   13424:	str	r1, [r7, #176]	; 0xb0
   13428:	str	r3, [r7, #180]	; 0xb4
   1342c:	bcc	13db4 <next@@Base+0xbdc>
   13430:	ldr	r1, [r7, #192]	; 0xc0
   13434:	ldr	r3, [r7, #196]	; 0xc4
   13438:	adds	r1, r1, #1
   1343c:	adc	r3, r3, #0
   13440:	cmp	r2, #57	; 0x39
   13444:	str	r1, [r7, #192]	; 0xc0
   13448:	str	r3, [r7, #196]	; 0xc4
   1344c:	bhi	1349c <next@@Base+0x2c4>
   13450:	add	r1, pc, #456	; 0x1c8
   13454:	vld1.64	{d18-d19}, [lr :128]
   13458:	ldrd	r2, [r7, #208]	; 0xd0
   1345c:	strb	r5, [ip, sl]
   13460:	add	sl, sl, #1
   13464:	vld1.64	{d16-d17}, [r1]
   13468:	adds	r2, r2, #1
   1346c:	adc	r3, r3, #0
   13470:	vadd.i64	q8, q9, q8
   13474:	strd	r2, [r7, #208]	; 0xd0
   13478:	vst1.64	{d16-d17}, [lr :128]
   1347c:	ldr	r3, [r4, #8]
   13480:	ldr	r2, [r4]
   13484:	add	r1, r3, #1
   13488:	add	r5, r2, r3
   1348c:	mov	r2, #1
   13490:	str	r1, [r4, #8]
   13494:	add	r1, r7, #224	; 0xe0
   13498:	b	133b8 <next@@Base+0x1e0>
   1349c:	ldrd	r0, [r7, #240]	; 0xf0
   134a0:	ldr	r6, [r7, #216]	; 0xd8
   134a4:	ldr	r3, [r7, #220]	; 0xdc
   134a8:	adds	r0, r0, #1
   134ac:	str	r0, [r7, #240]	; 0xf0
   134b0:	adc	r1, r1, #0
   134b4:	adds	r6, r6, #1
   134b8:	ldr	r0, [r7, #264]	; 0x108
   134bc:	adc	r3, r3, #0
   134c0:	adds	r0, r0, #1
   134c4:	str	r0, [r7, #264]	; 0x108
   134c8:	str	r6, [r7, #216]	; 0xd8
   134cc:	str	r3, [r7, #220]	; 0xdc
   134d0:	str	r1, [r7, #244]	; 0xf4
   134d4:	ldr	r0, [r7, #268]	; 0x10c
   134d8:	adc	r0, r0, #0
   134dc:	cmp	r2, #123	; 0x7b
   134e0:	str	r0, [r7, #268]	; 0x10c
   134e4:	beq	13e3c <next@@Base+0xc64>
   134e8:	ldr	r0, [r7, #288]	; 0x120
   134ec:	ldr	r1, [r7, #292]	; 0x124
   134f0:	adds	r0, r0, #1
   134f4:	adc	r1, r1, #0
   134f8:	cmp	r2, #125	; 0x7d
   134fc:	str	r0, [r7, #288]	; 0x120
   13500:	str	r1, [r7, #292]	; 0x124
   13504:	beq	13e6c <next@@Base+0xc94>
   13508:	ldr	r0, [r7, #312]	; 0x138
   1350c:	ldr	r1, [r7, #316]	; 0x13c
   13510:	adds	r0, r0, #1
   13514:	adc	r1, r1, #0
   13518:	cmp	r2, #59	; 0x3b
   1351c:	str	r0, [r7, #312]	; 0x138
   13520:	str	r1, [r7, #316]	; 0x13c
   13524:	beq	13e9c <next@@Base+0xcc4>
   13528:	ldr	r0, [r7, #336]	; 0x150
   1352c:	ldr	r1, [r7, #340]	; 0x154
   13530:	adds	r0, r0, #1
   13534:	adc	r1, r1, #0
   13538:	cmp	r2, #101	; 0x65
   1353c:	str	r0, [r7, #336]	; 0x150
   13540:	str	r1, [r7, #340]	; 0x154
   13544:	bne	135a0 <next@@Base+0x3c8>
   13548:	add	r0, pc, #208	; 0xd0
   1354c:	vld1.64	{d18-d19}, [lr :128]
   13550:	ldr	r1, [r7, #356]	; 0x164
   13554:	vld1.64	{d16-d17}, [r0]
   13558:	mov	r0, #101	; 0x65
   1355c:	strb	r0, [ip, sl]
   13560:	ldr	r0, [r7, #352]	; 0x160
   13564:	add	sl, sl, #1
   13568:	vadd.i64	q8, q9, q8
   1356c:	adds	r0, r0, #1
   13570:	adc	r1, r1, #0
   13574:	str	r0, [r7, #352]	; 0x160
   13578:	str	r1, [r7, #356]	; 0x164
   1357c:	vst1.64	{d16-d17}, [lr :128]
   13580:	ldr	r2, [r4, #8]
   13584:	ldr	r0, [r4]
   13588:	add	r1, r2, #1
   1358c:	add	r5, r0, r2
   13590:	mov	r2, #5
   13594:	str	r1, [r4, #8]
   13598:	add	r1, r7, #368	; 0x170
   1359c:	b	133b8 <next@@Base+0x1e0>
   135a0:	ldr	r0, [r7, #360]	; 0x168
   135a4:	ldr	r1, [r7, #364]	; 0x16c
   135a8:	mov	r3, #109	; 0x6d
   135ac:	mov	r6, #114	; 0x72
   135b0:	adds	r0, r0, #1
   135b4:	adc	r1, r1, #0
   135b8:	cmp	r2, #105	; 0x69
   135bc:	str	r0, [r7, #360]	; 0x168
   135c0:	str	r1, [r7, #364]	; 0x16c
   135c4:	mov	r1, #105	; 0x69
   135c8:	bne	13630 <next@@Base+0x458>
   135cc:	add	r0, pc, #76	; 0x4c
   135d0:	vld1.64	{d18-d19}, [lr :128]
   135d4:	strb	r1, [ip, sl]
   135d8:	ldr	r1, [r7, #380]	; 0x17c
   135dc:	add	sl, sl, #1
   135e0:	vld1.64	{d16-d17}, [r0]
   135e4:	ldr	r0, [r7, #376]	; 0x178
   135e8:	adds	r0, r0, #1
   135ec:	vadd.i64	q8, q9, q8
   135f0:	adc	r1, r1, #0
   135f4:	str	r0, [r7, #376]	; 0x178
   135f8:	str	r1, [r7, #380]	; 0x17c
   135fc:	vst1.64	{d16-d17}, [lr :128]
   13600:	ldr	r2, [r4, #8]
   13604:	ldr	r0, [r4]
   13608:	add	r1, r2, #1
   1360c:	add	r5, r0, r2
   13610:	mov	r2, #2
   13614:	str	r1, [r4, #8]
   13618:	add	r1, r7, #392	; 0x188
   1361c:	b	133b8 <next@@Base+0x1e0>
   13620:	andeq	r0, r0, r1
   13624:	andeq	r0, r0, r0
   13628:	andeq	r0, r0, r1
   1362c:	andeq	r0, r0, r0
   13630:	ldr	r0, [r7, #384]	; 0x180
   13634:	ldr	r1, [r7, #388]	; 0x184
   13638:	adds	r0, r0, #1
   1363c:	adc	r1, r1, #0
   13640:	cmp	r2, #109	; 0x6d
   13644:	str	r0, [r7, #384]	; 0x180
   13648:	str	r1, [r7, #388]	; 0x184
   1364c:	bne	136a4 <next@@Base+0x4cc>
   13650:	sub	r0, pc, #56	; 0x38
   13654:	vld1.64	{d18-d19}, [lr :128]
   13658:	ldr	r1, [r7, #404]	; 0x194
   1365c:	strb	r3, [ip, sl]
   13660:	add	sl, sl, #1
   13664:	vld1.64	{d16-d17}, [r0]
   13668:	ldr	r0, [r7, #400]	; 0x190
   1366c:	adds	r0, r0, #1
   13670:	vadd.i64	q8, q9, q8
   13674:	adc	r1, r1, #0
   13678:	str	r0, [r7, #400]	; 0x190
   1367c:	str	r1, [r7, #404]	; 0x194
   13680:	vst1.64	{d16-d17}, [lr :128]
   13684:	ldr	r2, [r4, #8]
   13688:	ldr	r0, [r4]
   1368c:	add	r1, r2, #1
   13690:	add	r5, r0, r2
   13694:	mov	r2, #3
   13698:	str	r1, [r4, #8]
   1369c:	add	r1, r7, #416	; 0x1a0
   136a0:	b	133b8 <next@@Base+0x1e0>
   136a4:	ldr	r0, [r7, #408]	; 0x198
   136a8:	ldr	r1, [r7, #412]	; 0x19c
   136ac:	adds	r0, r0, #1
   136b0:	adc	r1, r1, #0
   136b4:	cmp	r2, #114	; 0x72
   136b8:	str	r0, [r7, #408]	; 0x198
   136bc:	str	r1, [r7, #412]	; 0x19c
   136c0:	bne	141f4 <next@@Base+0x101c>
   136c4:	sub	r0, pc, #172	; 0xac
   136c8:	vld1.64	{d18-d19}, [lr :128]
   136cc:	ldr	r1, [r7, #428]	; 0x1ac
   136d0:	strb	r6, [ip, sl]
   136d4:	add	sl, sl, #1
   136d8:	vld1.64	{d16-d17}, [r0]
   136dc:	ldr	r0, [r7, #424]	; 0x1a8
   136e0:	adds	r0, r0, #1
   136e4:	vadd.i64	q8, q9, q8
   136e8:	adc	r1, r1, #0
   136ec:	str	r0, [r7, #424]	; 0x1a8
   136f0:	str	r1, [r7, #428]	; 0x1ac
   136f4:	vst1.64	{d16-d17}, [lr :128]
   136f8:	ldr	r2, [r4, #8]
   136fc:	ldr	r0, [r4]
   13700:	add	r1, r2, #1
   13704:	add	r5, r0, r2
   13708:	mov	r2, #4
   1370c:	str	r1, [r4, #8]
   13710:	add	r1, r7, #440	; 0x1b8
   13714:	b	133b8 <next@@Base+0x1e0>
   13718:	ldrd	r0, [r7, #48]	; 0x30
   1371c:	adds	r0, r0, #1
   13720:	adc	r1, r1, #0
   13724:	strd	r0, [r7, #48]	; 0x30
   13728:	mov	r0, #4
   1372c:	bl	11fcc <malloc@plt>
   13730:	mov	r6, r0
   13734:	bl	129c0 <init_token_eof@@Base>
   13738:	add	r0, r7, #992	; 0x3e0
   1373c:	ldrd	r2, [r0]
   13740:	adds	r2, r2, #1
   13744:	adc	r3, r3, #0
   13748:	strd	r2, [r0]
   1374c:	ldr	r0, [r7, #1000]	; 0x3e8
   13750:	ldr	r1, [r7, #1004]	; 0x3ec
   13754:	adds	r0, r0, #1
   13758:	adc	r1, r1, #0
   1375c:	str	r0, [r7, #1000]	; 0x3e8
   13760:	mov	r0, r6
   13764:	str	r1, [r7, #1004]	; 0x3ec
   13768:	sub	sp, fp, #28
   1376c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13770:	ldrd	r2, [r7, #72]	; 0x48
   13774:	sub	r1, r5, #48	; 0x30
   13778:	uxtb	r1, r1
   1377c:	adds	r2, r2, #1
   13780:	adc	r3, r3, #0
   13784:	cmp	r1, #9
   13788:	strd	r2, [r7, #72]	; 0x48
   1378c:	bhi	13cd8 <next@@Base+0xb00>
   13790:	ldrd	r2, [lr]
   13794:	mov	r8, ip
   13798:	ldr	r0, [r7, #696]	; 0x2b8
   1379c:	adds	r2, r2, #1
   137a0:	ldr	r1, [r7, #700]	; 0x2bc
   137a4:	strb	r5, [r8, sl]
   137a8:	add	sl, sl, #1
   137ac:	adc	r3, r3, #0
   137b0:	str	r2, [lr]
   137b4:	str	r3, [lr, #4]
   137b8:	ldr	r6, [lr, #8]
   137bc:	adds	r0, r0, #1
   137c0:	str	r0, [r7, #696]	; 0x2b8
   137c4:	adc	r0, r1, #0
   137c8:	ldr	r1, [lr, #12]
   137cc:	str	r0, [r7, #700]	; 0x2bc
   137d0:	adds	r6, r6, #1
   137d4:	str	r6, [lr, #8]
   137d8:	adc	r0, r1, #0
   137dc:	str	r0, [lr, #12]
   137e0:	ldr	r1, [r4, #8]
   137e4:	ldr	r0, [r4]
   137e8:	add	r6, r1, #1
   137ec:	str	r6, [r4, #8]
   137f0:	ldrb	r5, [r0, r1]
   137f4:	ldr	r0, [r7, #712]	; 0x2c8
   137f8:	ldr	r1, [r7, #716]	; 0x2cc
   137fc:	adds	r0, r0, #1
   13800:	str	r0, [r7, #712]	; 0x2c8
   13804:	sub	r0, r5, #48	; 0x30
   13808:	adc	r1, r1, #0
   1380c:	uxtb	r0, r0
   13810:	str	r1, [r7, #716]	; 0x2cc
   13814:	cmp	r0, #10
   13818:	bcc	13798 <next@@Base+0x5c0>
   1381c:	b	13cdc <next@@Base+0xb04>
   13820:	ldrd	r0, [r7, #88]	; 0x58
   13824:	adds	r0, r0, #1
   13828:	adc	r1, r1, #0
   1382c:	strd	r0, [r7, #88]	; 0x58
   13830:	uxtb	r0, r5
   13834:	cmp	r0, #97	; 0x61
   13838:	bne	144e4 <next@@Base+0x130c>
   1383c:	sub	r0, pc, #548	; 0x224
   13840:	vld1.64	{d16-d17}, [lr :128]
   13844:	ldr	r1, [r7, #796]	; 0x31c
   13848:	vld1.64	{d18-d19}, [r0]
   1384c:	mov	r0, #97	; 0x61
   13850:	strb	r0, [ip, sl]
   13854:	ldr	r0, [r7, #792]	; 0x318
   13858:	vadd.i64	q9, q8, q9
   1385c:	adds	r0, r0, #1
   13860:	adc	r1, r1, #0
   13864:	str	r0, [r7, #792]	; 0x318
   13868:	str	r1, [r7, #796]	; 0x31c
   1386c:	vst1.64	{d18-d19}, [lr :128]
   13870:	ldr	r1, [r4, #8]
   13874:	ldr	r0, [r4]
   13878:	add	r2, r1, #1
   1387c:	str	r2, [r4, #8]
   13880:	ldrb	r0, [r0, r1]
   13884:	cmp	r0, #105	; 0x69
   13888:	bne	14504 <next@@Base+0x132c>
   1388c:	add	r1, sl, ip
   13890:	mov	r0, #105	; 0x69
   13894:	ldr	r2, [r7, #812]	; 0x32c
   13898:	mov	r5, ip
   1389c:	strb	r0, [r1, #1]
   138a0:	vmov.32	r0, d16[0]
   138a4:	adds	r0, r0, #2
   138a8:	str	r0, [lr]
   138ac:	vmov.32	r0, d16[1]
   138b0:	adc	r0, r0, #0
   138b4:	str	r0, [lr, #4]
   138b8:	ldr	r0, [r7, #808]	; 0x328
   138bc:	adds	r0, r0, #1
   138c0:	str	r0, [r7, #808]	; 0x328
   138c4:	adc	r0, r2, #0
   138c8:	ldrd	r2, [lr, #8]
   138cc:	str	r0, [r7, #812]	; 0x32c
   138d0:	adds	r2, r2, #1
   138d4:	adc	r0, r3, #0
   138d8:	str	r2, [lr, #8]
   138dc:	str	r0, [lr, #12]
   138e0:	ldr	r2, [r4, #8]
   138e4:	ldr	r0, [r4]
   138e8:	add	r3, r2, #1
   138ec:	str	r3, [r4, #8]
   138f0:	ldrb	r0, [r0, r2]
   138f4:	cmp	r0, #110	; 0x6e
   138f8:	bne	14524 <next@@Base+0x134c>
   138fc:	mov	r0, #110	; 0x6e
   13900:	strh	r0, [r1, #2]
   13904:	ldr	r0, [r7, #824]	; 0x338
   13908:	ldr	r1, [r7, #828]	; 0x33c
   1390c:	adds	r0, r0, #1
   13910:	adc	r1, r1, #0
   13914:	str	r0, [r7, #824]	; 0x338
   13918:	add	r0, sl, #4
   1391c:	str	r1, [r7, #828]	; 0x33c
   13920:	bl	11fcc <malloc@plt>
   13924:	add	r6, sl, #3
   13928:	mov	r1, r5
   1392c:	mov	r4, r0
   13930:	mov	r2, r6
   13934:	bl	12074 <strncpy@plt>
   13938:	mov	r0, #0
   1393c:	strb	r0, [r4, r6]
   13940:	mov	r0, #8
   13944:	bl	11fcc <malloc@plt>
   13948:	mov	r1, r4
   1394c:	mov	r6, r0
   13950:	bl	12830 <init_token_function@@Base>
   13954:	add	r0, r7, #832	; 0x340
   13958:	b	1373c <next@@Base+0x564>
   1395c:	ldrd	r0, [r7, #96]	; 0x60
   13960:	adds	r0, r0, #1
   13964:	adc	r1, r1, #0
   13968:	strd	r0, [r7, #96]	; 0x60
   1396c:	uxtb	r0, r5
   13970:	cmp	r0, #101	; 0x65
   13974:	bne	14544 <next@@Base+0x136c>
   13978:	sub	r0, pc, #864	; 0x360
   1397c:	vld1.64	{d16-d17}, [lr :128]
   13980:	ldr	r1, [r7, #852]	; 0x354
   13984:	vld1.64	{d18-d19}, [r0]
   13988:	mov	r0, #101	; 0x65
   1398c:	strb	r0, [ip, sl]
   13990:	ldr	r0, [r7, #848]	; 0x350
   13994:	vadd.i64	q9, q8, q9
   13998:	adds	r0, r0, #1
   1399c:	adc	r1, r1, #0
   139a0:	str	r0, [r7, #848]	; 0x350
   139a4:	str	r1, [r7, #852]	; 0x354
   139a8:	vst1.64	{d18-d19}, [lr :128]
   139ac:	ldr	r1, [r4, #8]
   139b0:	ldr	r0, [r4]
   139b4:	add	r2, r1, #1
   139b8:	str	r2, [r4, #8]
   139bc:	ldrb	r0, [r0, r1]
   139c0:	cmp	r0, #116	; 0x74
   139c4:	bne	14564 <next@@Base+0x138c>
   139c8:	vmov.32	r3, d16[0]
   139cc:	vmov.32	r2, d16[1]
   139d0:	add	r1, sl, ip
   139d4:	mov	r0, #116	; 0x74
   139d8:	ldr	r6, [r7, #868]	; 0x364
   139dc:	strb	r0, [r1, #1]
   139e0:	adds	r0, r3, #2
   139e4:	str	r0, [lr]
   139e8:	adc	r0, r2, #0
   139ec:	str	r0, [lr, #4]
   139f0:	ldr	r0, [r7, #864]	; 0x360
   139f4:	ldr	r5, [lr, #12]
   139f8:	adds	r0, r0, #1
   139fc:	str	r0, [r7, #864]	; 0x360
   13a00:	adc	r0, r6, #0
   13a04:	ldr	r6, [lr, #8]
   13a08:	str	r0, [r7, #868]	; 0x364
   13a0c:	adds	r6, r6, #1
   13a10:	adc	r0, r5, #0
   13a14:	str	r6, [lr, #8]
   13a18:	str	r0, [lr, #12]
   13a1c:	ldr	r6, [r4, #8]
   13a20:	ldr	r0, [r4]
   13a24:	add	r5, r6, #1
   13a28:	str	r5, [r4, #8]
   13a2c:	ldrb	r0, [r0, r6]
   13a30:	cmp	r0, #117	; 0x75
   13a34:	bne	14584 <next@@Base+0x13ac>
   13a38:	adds	r0, r3, #3
   13a3c:	ldr	r6, [r7, #884]	; 0x374
   13a40:	str	r0, [lr]
   13a44:	mov	r0, #117	; 0x75
   13a48:	strb	r0, [r1, #2]
   13a4c:	adc	r0, r2, #0
   13a50:	str	r0, [lr, #4]
   13a54:	ldr	r0, [r7, #880]	; 0x370
   13a58:	ldr	r5, [lr, #12]
   13a5c:	adds	r0, r0, #1
   13a60:	str	r0, [r7, #880]	; 0x370
   13a64:	adc	r0, r6, #0
   13a68:	ldr	r6, [lr, #8]
   13a6c:	str	r0, [r7, #884]	; 0x374
   13a70:	adds	r6, r6, #1
   13a74:	adc	r0, r5, #0
   13a78:	str	r6, [lr, #8]
   13a7c:	str	r0, [lr, #12]
   13a80:	ldr	r6, [r4, #8]
   13a84:	ldr	r0, [r4]
   13a88:	add	r5, r6, #1
   13a8c:	str	r5, [r4, #8]
   13a90:	ldrb	r0, [r0, r6]
   13a94:	cmp	r0, #114	; 0x72
   13a98:	bne	145a4 <next@@Base+0x13cc>
   13a9c:	adds	r0, r3, #4
   13aa0:	str	r0, [lr]
   13aa4:	mov	r0, #114	; 0x72
   13aa8:	strb	r0, [r1, #3]
   13aac:	adc	r0, r2, #0
   13ab0:	ldr	r1, [r7, #900]	; 0x384
   13ab4:	str	r0, [lr, #4]
   13ab8:	ldr	r0, [r7, #896]	; 0x380
   13abc:	ldrd	r2, [lr, #8]
   13ac0:	adds	r0, r0, #1
   13ac4:	str	r0, [r7, #896]	; 0x380
   13ac8:	adc	r0, r1, #0
   13acc:	adds	r1, r2, #1
   13ad0:	str	r0, [r7, #900]	; 0x384
   13ad4:	adc	r0, r3, #0
   13ad8:	str	r1, [lr, #8]
   13adc:	str	r0, [lr, #12]
   13ae0:	ldr	r1, [r4, #8]
   13ae4:	ldr	r0, [r4]
   13ae8:	add	r2, r1, #1
   13aec:	str	r2, [r4, #8]
   13af0:	ldrb	r0, [r0, r1]
   13af4:	cmp	r0, #110	; 0x6e
   13af8:	bne	145c4 <next@@Base+0x13ec>
   13afc:	ldr	r0, [r7, #912]	; 0x390
   13b00:	ldr	r1, [r7, #916]	; 0x394
   13b04:	adds	r0, r0, #1
   13b08:	adc	r1, r1, #0
   13b0c:	str	r0, [r7, #912]	; 0x390
   13b10:	mov	r0, #4
   13b14:	str	r1, [r7, #916]	; 0x394
   13b18:	bl	11fcc <malloc@plt>
   13b1c:	mov	r6, r0
   13b20:	bl	12950 <init_token_return@@Base>
   13b24:	add	r0, r7, #920	; 0x398
   13b28:	b	1373c <next@@Base+0x564>
   13b2c:	ldrd	r0, [r7, #80]	; 0x50
   13b30:	adds	r0, r0, #1
   13b34:	adc	r1, r1, #0
   13b38:	strd	r0, [r7, #80]	; 0x50
   13b3c:	uxtb	r1, r5
   13b40:	cmp	r1, #102	; 0x66
   13b44:	beq	13d4c <next@@Base+0xb74>
   13b48:	cmp	r1, #110	; 0x6e
   13b4c:	bne	145e4 <next@@Base+0x140c>
   13b50:	add	r0, pc, #888	; 0x378
   13b54:	vld1.64	{d18-d19}, [lr :128]
   13b58:	ldr	r1, [r7, #740]	; 0x2e4
   13b5c:	vld1.64	{d16-d17}, [r0]
   13b60:	mov	r0, #110	; 0x6e
   13b64:	strb	r0, [ip, sl]
   13b68:	ldr	r0, [r7, #736]	; 0x2e0
   13b6c:	vadd.i64	q8, q9, q8
   13b70:	adds	r0, r0, #1
   13b74:	adc	r1, r1, #0
   13b78:	str	r0, [r7, #736]	; 0x2e0
   13b7c:	str	r1, [r7, #740]	; 0x2e4
   13b80:	vst1.64	{d16-d17}, [lr :128]
   13b84:	ldr	r1, [r4, #8]
   13b88:	ldr	r0, [r4]
   13b8c:	add	r2, r1, #1
   13b90:	str	r2, [r4, #8]
   13b94:	ldrb	r0, [r0, r1]
   13b98:	cmp	r0, #116	; 0x74
   13b9c:	bne	14664 <next@@Base+0x148c>
   13ba0:	ldr	r0, [r7, #760]	; 0x2f8
   13ba4:	ldr	r1, [r7, #764]	; 0x2fc
   13ba8:	adds	r0, r0, #1
   13bac:	adc	r1, r1, #0
   13bb0:	str	r0, [r7, #760]	; 0x2f8
   13bb4:	mov	r0, #4
   13bb8:	str	r1, [r7, #764]	; 0x2fc
   13bbc:	bl	11fcc <malloc@plt>
   13bc0:	mov	r6, r0
   13bc4:	bl	127b8 <init_token_int_type@@Base>
   13bc8:	add	r0, r7, #768	; 0x300
   13bcc:	b	1373c <next@@Base+0x564>
   13bd0:	ldrd	r0, [r7, #104]	; 0x68
   13bd4:	adds	r0, r0, #1
   13bd8:	adc	r1, r1, #0
   13bdc:	strd	r0, [r7, #104]	; 0x68
   13be0:	uxtb	r0, r5
   13be4:	cmp	r0, #108	; 0x6c
   13be8:	bne	14604 <next@@Base+0x142c>
   13bec:	add	r0, pc, #732	; 0x2dc
   13bf0:	vld1.64	{d16-d17}, [lr :128]
   13bf4:	ldr	r1, [r7, #940]	; 0x3ac
   13bf8:	vld1.64	{d18-d19}, [r0]
   13bfc:	mov	r0, #108	; 0x6c
   13c00:	strb	r0, [ip, sl]
   13c04:	ldr	r0, [r7, #936]	; 0x3a8
   13c08:	vadd.i64	q9, q8, q9
   13c0c:	adds	r0, r0, #1
   13c10:	adc	r1, r1, #0
   13c14:	str	r0, [r7, #936]	; 0x3a8
   13c18:	str	r1, [r7, #940]	; 0x3ac
   13c1c:	vst1.64	{d18-d19}, [lr :128]
   13c20:	ldr	r1, [r4, #8]
   13c24:	ldr	r0, [r4]
   13c28:	add	r2, r1, #1
   13c2c:	str	r2, [r4, #8]
   13c30:	ldrb	r0, [r0, r1]
   13c34:	cmp	r0, #115	; 0x73
   13c38:	bne	14624 <next@@Base+0x144c>
   13c3c:	add	r0, sl, ip
   13c40:	mov	r1, #115	; 0x73
   13c44:	strb	r1, [r0, #1]
   13c48:	vmov.32	r0, d16[0]
   13c4c:	ldr	r1, [r7, #956]	; 0x3bc
   13c50:	adds	r0, r0, #2
   13c54:	str	r0, [lr]
   13c58:	vmov.32	r0, d16[1]
   13c5c:	adc	r0, r0, #0
   13c60:	str	r0, [lr, #4]
   13c64:	ldr	r0, [r7, #952]	; 0x3b8
   13c68:	ldrd	r2, [lr, #8]
   13c6c:	adds	r0, r0, #1
   13c70:	str	r0, [r7, #952]	; 0x3b8
   13c74:	adc	r0, r1, #0
   13c78:	adds	r1, r2, #1
   13c7c:	str	r0, [r7, #956]	; 0x3bc
   13c80:	adc	r0, r3, #0
   13c84:	str	r1, [lr, #8]
   13c88:	str	r0, [lr, #12]
   13c8c:	ldr	r1, [r4, #8]
   13c90:	ldr	r0, [r4]
   13c94:	add	r2, r1, #1
   13c98:	str	r2, [r4, #8]
   13c9c:	ldrb	r0, [r0, r1]
   13ca0:	cmp	r0, #101	; 0x65
   13ca4:	bne	14644 <next@@Base+0x146c>
   13ca8:	ldr	r0, [r7, #968]	; 0x3c8
   13cac:	ldr	r1, [r7, #972]	; 0x3cc
   13cb0:	adds	r0, r0, #1
   13cb4:	adc	r1, r1, #0
   13cb8:	str	r0, [r7, #968]	; 0x3c8
   13cbc:	mov	r0, #4
   13cc0:	str	r1, [r7, #972]	; 0x3cc
   13cc4:	bl	11fcc <malloc@plt>
   13cc8:	mov	r6, r0
   13ccc:	bl	12a30 <init_token_else@@Base>
   13cd0:	add	r0, r7, #976	; 0x3d0
   13cd4:	b	1373c <next@@Base+0x564>
   13cd8:	mov	r8, ip
   13cdc:	movw	r0, #50224	; 0xc430
   13ce0:	add	r1, pc, #488	; 0x1e8
   13ce4:	ldr	r2, [r7, #708]	; 0x2c4
   13ce8:	movt	r0, #2
   13cec:	vld1.64	{d16-d17}, [r1]
   13cf0:	ldr	r1, [r7, #704]	; 0x2c0
   13cf4:	vld1.64	{d18-d19}, [r0 :128]
   13cf8:	adds	r1, r1, #1
   13cfc:	str	r1, [r7, #704]	; 0x2c0
   13d00:	mov	r1, #1
   13d04:	vadd.i64	q8, q9, q8
   13d08:	vst1.64	{d16-d17}, [r0 :128]
   13d0c:	adc	r0, r2, #0
   13d10:	str	r0, [r7, #708]	; 0x2c4
   13d14:	mov	r0, r4
   13d18:	bl	13108 <push_back_chars@@Base>
   13d1c:	mov	r0, #0
   13d20:	strb	r0, [r8, sl]
   13d24:	mov	r0, #8
   13d28:	bl	11fcc <malloc@plt>
   13d2c:	mov	r6, r0
   13d30:	mov	r0, r8
   13d34:	bl	120ec <atoi@plt>
   13d38:	mov	r1, r0
   13d3c:	mov	r0, r6
   13d40:	bl	127f0 <init_token_int_value@@Base>
   13d44:	add	r0, r7, #720	; 0x2d0
   13d48:	b	1373c <next@@Base+0x564>
   13d4c:	add	r0, ip, sl
   13d50:	mov	r1, #102	; 0x66
   13d54:	strh	r1, [r0]
   13d58:	ldr	r0, [r7, #744]	; 0x2e8
   13d5c:	ldr	r1, [r7, #748]	; 0x2ec
   13d60:	adds	r0, r0, #1
   13d64:	adc	r1, r1, #0
   13d68:	str	r0, [r7, #744]	; 0x2e8
   13d6c:	mov	r0, #4
   13d70:	str	r1, [r7, #748]	; 0x2ec
   13d74:	bl	11fcc <malloc@plt>
   13d78:	mov	r6, r0
   13d7c:	bl	129f8 <init_token_if@@Base>
   13d80:	add	r0, r7, #776	; 0x308
   13d84:	b	1373c <next@@Base+0x564>
   13d88:	ldrd	r0, [r7, #168]	; 0xa8
   13d8c:	adds	r0, r0, #1
   13d90:	adc	r1, r1, #0
   13d94:	strd	r0, [r7, #168]	; 0xa8
   13d98:	mov	r0, #8
   13d9c:	bl	11fcc <malloc@plt>
   13da0:	mov	r1, #0
   13da4:	mov	r6, r0
   13da8:	bl	127f0 <init_token_int_value@@Base>
   13dac:	add	r0, r7, #184	; 0xb8
   13db0:	b	1373c <next@@Base+0x564>
   13db4:	ldrd	r8, [r7, #200]	; 0xc8
   13db8:	adds	r8, r8, #1
   13dbc:	adc	r9, r9, #0
   13dc0:	cmp	r2, #40	; 0x28
   13dc4:	strd	r8, [r7, #200]	; 0xc8
   13dc8:	bne	13df4 <next@@Base+0xc1c>
   13dcc:	ldrd	r0, [r7, #232]	; 0xe8
   13dd0:	adds	r0, r0, #1
   13dd4:	adc	r1, r1, #0
   13dd8:	strd	r0, [r7, #232]	; 0xe8
   13ddc:	mov	r0, #4
   13de0:	bl	11fcc <malloc@plt>
   13de4:	mov	r6, r0
   13de8:	bl	12870 <init_token_opar@@Base>
   13dec:	add	r0, r7, #248	; 0xf8
   13df0:	b	1373c <next@@Base+0x564>
   13df4:	ldrd	r8, [r7, #240]	; 0xf0
   13df8:	adds	r8, r8, #1
   13dfc:	adc	r9, r9, #0
   13e00:	cmp	r2, #41	; 0x29
   13e04:	strd	r8, [r7, #240]	; 0xf0
   13e08:	bne	13ee0 <next@@Base+0xd08>
   13e0c:	ldr	r0, [r7, #256]	; 0x100
   13e10:	ldr	r1, [r7, #260]	; 0x104
   13e14:	adds	r0, r0, #1
   13e18:	adc	r1, r1, #0
   13e1c:	str	r0, [r7, #256]	; 0x100
   13e20:	mov	r0, #4
   13e24:	str	r1, [r7, #260]	; 0x104
   13e28:	bl	11fcc <malloc@plt>
   13e2c:	mov	r6, r0
   13e30:	bl	128a8 <init_token_cpar@@Base>
   13e34:	add	r0, r7, #272	; 0x110
   13e38:	b	1373c <next@@Base+0x564>
   13e3c:	ldr	r0, [r7, #280]	; 0x118
   13e40:	ldr	r1, [r7, #284]	; 0x11c
   13e44:	adds	r0, r0, #1
   13e48:	adc	r1, r1, #0
   13e4c:	str	r0, [r7, #280]	; 0x118
   13e50:	mov	r0, #4
   13e54:	str	r1, [r7, #284]	; 0x11c
   13e58:	bl	11fcc <malloc@plt>
   13e5c:	mov	r6, r0
   13e60:	bl	128e0 <init_token_obra@@Base>
   13e64:	add	r0, r7, #296	; 0x128
   13e68:	b	1373c <next@@Base+0x564>
   13e6c:	ldr	r0, [r7, #304]	; 0x130
   13e70:	ldr	r1, [r7, #308]	; 0x134
   13e74:	adds	r0, r0, #1
   13e78:	adc	r1, r1, #0
   13e7c:	str	r0, [r7, #304]	; 0x130
   13e80:	mov	r0, #4
   13e84:	str	r1, [r7, #308]	; 0x134
   13e88:	bl	11fcc <malloc@plt>
   13e8c:	mov	r6, r0
   13e90:	bl	12918 <init_token_cbra@@Base>
   13e94:	add	r0, r7, #320	; 0x140
   13e98:	b	1373c <next@@Base+0x564>
   13e9c:	ldr	r0, [r7, #328]	; 0x148
   13ea0:	ldr	r1, [r7, #332]	; 0x14c
   13ea4:	adds	r0, r0, #1
   13ea8:	adc	r1, r1, #0
   13eac:	str	r0, [r7, #328]	; 0x148
   13eb0:	mov	r0, #4
   13eb4:	str	r1, [r7, #332]	; 0x14c
   13eb8:	bl	11fcc <malloc@plt>
   13ebc:	mov	r6, r0
   13ec0:	bl	12988 <init_token_semicolon@@Base>
   13ec4:	add	r0, r7, #344	; 0x158
   13ec8:	b	1373c <next@@Base+0x564>
   13ecc:	nop	{0}
   13ed0:	andeq	r0, r0, r1
   13ed4:	andeq	r0, r0, r0
   13ed8:	andeq	r0, r0, r1
   13edc:	andeq	r0, r0, r0
   13ee0:	ldr	r0, [r7, #408]	; 0x198
   13ee4:	ldr	r1, [r7, #412]	; 0x19c
   13ee8:	ldr	r3, [r7, #384]	; 0x180
   13eec:	ldr	r6, [r7, #388]	; 0x184
   13ef0:	adds	r0, r0, #1
   13ef4:	adc	r1, r1, #0
   13ef8:	adds	r5, r3, #1
   13efc:	adc	r8, r6, #0
   13f00:	ldr	r6, [r7, #360]	; 0x168
   13f04:	str	r1, [sp, #4]
   13f08:	adds	r6, r6, #1
   13f0c:	str	r6, [r7, #360]	; 0x168
   13f10:	str	r5, [r7, #384]	; 0x180
   13f14:	str	r0, [r7, #408]	; 0x198
   13f18:	ldr	r0, [r7, #364]	; 0x16c
   13f1c:	ldr	r6, [r7, #264]	; 0x108
   13f20:	ldr	r5, [r7, #268]	; 0x10c
   13f24:	ldr	r1, [r7, #288]	; 0x120
   13f28:	ldr	r3, [r7, #292]	; 0x124
   13f2c:	adc	r9, r0, #0
   13f30:	ldr	r0, [r7, #336]	; 0x150
   13f34:	adds	r6, r6, #1
   13f38:	adc	r5, r5, #0
   13f3c:	adds	r0, r0, #1
   13f40:	str	r0, [r7, #336]	; 0x150
   13f44:	str	r6, [r7, #264]	; 0x108
   13f48:	str	r5, [r7, #268]	; 0x10c
   13f4c:	ldr	r0, [r7, #340]	; 0x154
   13f50:	ldr	r5, [r7, #312]	; 0x138
   13f54:	adc	r0, r0, #0
   13f58:	adds	r5, r5, #1
   13f5c:	str	r5, [r7, #312]	; 0x138
   13f60:	ldr	r5, [r7, #316]	; 0x13c
   13f64:	ldr	r6, [r7, #432]	; 0x1b0
   13f68:	adc	r5, r5, #0
   13f6c:	adds	r1, r1, #1
   13f70:	adc	r3, r3, #0
   13f74:	adds	r6, r6, #1
   13f78:	str	r6, [r7, #432]	; 0x1b0
   13f7c:	str	r1, [r7, #288]	; 0x120
   13f80:	str	r3, [r7, #292]	; 0x124
   13f84:	str	r5, [r7, #316]	; 0x13c
   13f88:	str	r0, [r7, #340]	; 0x154
   13f8c:	ldr	r0, [sp, #4]
   13f90:	str	r9, [r7, #364]	; 0x16c
   13f94:	str	r8, [r7, #388]	; 0x184
   13f98:	str	r0, [r7, #412]	; 0x19c
   13f9c:	ldr	r0, [r7, #436]	; 0x1b4
   13fa0:	adc	r0, r0, #0
   13fa4:	cmp	r2, #33	; 0x21
   13fa8:	str	r0, [r7, #436]	; 0x1b4
   13fac:	bne	1404c <next@@Base+0xe74>
   13fb0:	sub	r0, pc, #232	; 0xe8
   13fb4:	vld1.64	{d18-d19}, [lr :128]
   13fb8:	ldr	r1, [r7, #452]	; 0x1c4
   13fbc:	vld1.64	{d16-d17}, [r0]
   13fc0:	mov	r0, #33	; 0x21
   13fc4:	strb	r0, [ip, sl]
   13fc8:	ldr	r0, [r7, #448]	; 0x1c0
   13fcc:	vadd.i64	q8, q9, q8
   13fd0:	adds	r0, r0, #1
   13fd4:	adc	r1, r1, #0
   13fd8:	str	r0, [r7, #448]	; 0x1c0
   13fdc:	str	r1, [r7, #452]	; 0x1c4
   13fe0:	vst1.64	{d16-d17}, [lr :128]
   13fe4:	ldr	r1, [r4, #8]
   13fe8:	ldr	r0, [r4]
   13fec:	add	r2, r1, #1
   13ff0:	str	r2, [r4, #8]
   13ff4:	ldrb	r5, [r0, r1]
   13ff8:	mov	r0, #8
   13ffc:	bl	11fcc <malloc@plt>
   14000:	mov	r6, r0
   14004:	cmp	r5, #61	; 0x3d
   14008:	bne	14170 <next@@Base+0xf98>
   1400c:	ldr	r0, [r7, #472]	; 0x1d8
   14010:	ldr	r1, [r7, #476]	; 0x1dc
   14014:	adds	r0, r0, #1
   14018:	adc	r1, r1, #0
   1401c:	str	r0, [r7, #472]	; 0x1d8
   14020:	mov	r0, #3
   14024:	str	r1, [r7, #476]	; 0x1dc
   14028:	bl	11fcc <malloc@plt>
   1402c:	mov	r1, r0
   14030:	ldrb	r0, [sp, #8]
   14034:	mov	r2, #61	; 0x3d
   14038:	strb	r2, [r1, #1]
   1403c:	add	r2, r1, #2
   14040:	strb	r0, [r1]
   14044:	add	r0, r7, #488	; 0x1e8
   14048:	b	141cc <next@@Base+0xff4>
   1404c:	ldr	r0, [r7, #584]	; 0x248
   14050:	ldr	r1, [r7, #588]	; 0x24c
   14054:	ldr	r3, [r7, #528]	; 0x210
   14058:	ldr	r6, [r7, #532]	; 0x214
   1405c:	ldr	r5, [r7, #456]	; 0x1c8
   14060:	adds	r0, r0, #1
   14064:	adc	r8, r1, #0
   14068:	ldr	r1, [r7, #512]	; 0x200
   1406c:	adds	r9, r3, #1
   14070:	ldr	r3, [r7, #516]	; 0x204
   14074:	str	r0, [sp, #4]
   14078:	ldr	r0, [r7, #460]	; 0x1cc
   1407c:	adc	r6, r6, #0
   14080:	adds	r1, r1, #1
   14084:	str	r1, [r7, #512]	; 0x200
   14088:	adc	r1, r3, #0
   1408c:	adds	r3, r5, #1
   14090:	ldr	r5, [r7, #624]	; 0x270
   14094:	adc	r0, r0, #0
   14098:	adds	r5, r5, #1
   1409c:	str	r5, [r7, #624]	; 0x270
   140a0:	str	r0, [r7, #460]	; 0x1cc
   140a4:	ldr	r0, [sp, #4]
   140a8:	str	r3, [r7, #456]	; 0x1c8
   140ac:	str	r1, [r7, #516]	; 0x204
   140b0:	str	r9, [r7, #528]	; 0x210
   140b4:	str	r6, [r7, #532]	; 0x214
   140b8:	str	r8, [r7, #588]	; 0x24c
   140bc:	str	r0, [r7, #584]	; 0x248
   140c0:	ldr	r0, [r7, #628]	; 0x274
   140c4:	adc	r0, r0, #0
   140c8:	cmp	r2, #38	; 0x26
   140cc:	str	r0, [r7, #628]	; 0x274
   140d0:	bne	146f0 <next@@Base+0x1518>
   140d4:	sub	r0, pc, #524	; 0x20c
   140d8:	vld1.64	{d18-d19}, [lr :128]
   140dc:	ldr	r1, [r7, #660]	; 0x294
   140e0:	mov	r5, #38	; 0x26
   140e4:	vld1.64	{d16-d17}, [r0]
   140e8:	ldr	r0, [r7, #656]	; 0x290
   140ec:	strb	r5, [ip, sl]
   140f0:	adds	r0, r0, #1
   140f4:	vadd.i64	q8, q9, q8
   140f8:	adc	r1, r1, #0
   140fc:	str	r0, [r7, #656]	; 0x290
   14100:	str	r1, [r7, #660]	; 0x294
   14104:	vst1.64	{d16-d17}, [lr :128]
   14108:	ldr	r1, [r4, #8]
   1410c:	ldr	r0, [r4]
   14110:	add	r2, r1, #1
   14114:	str	r2, [r4, #8]
   14118:	ldrb	r4, [r0, r1]
   1411c:	mov	r0, #8
   14120:	bl	11fcc <malloc@plt>
   14124:	cmp	r4, #38	; 0x26
   14128:	bne	14684 <next@@Base+0x14ac>
   1412c:	mov	r6, r0
   14130:	ldr	r0, [r7, #680]	; 0x2a8
   14134:	ldr	r1, [r7, #684]	; 0x2ac
   14138:	adds	r0, r0, #1
   1413c:	adc	r1, r1, #0
   14140:	str	r0, [r7, #680]	; 0x2a8
   14144:	mov	r0, #3
   14148:	str	r1, [r7, #684]	; 0x2ac
   1414c:	bl	11fcc <malloc@plt>
   14150:	mov	r1, r0
   14154:	ldrb	r0, [sp, #8]
   14158:	strh	r5, [r1, #1]
   1415c:	strb	r0, [r1]
   14160:	mov	r0, r6
   14164:	bl	12a68 <init_token_boolean_op@@Base>
   14168:	add	r0, r7, #688	; 0x2b0
   1416c:	b	1373c <next@@Base+0x564>
   14170:	movw	r0, #50224	; 0xc430
   14174:	sub	r1, pc, #684	; 0x2ac
   14178:	ldr	r2, [r7, #468]	; 0x1d4
   1417c:	movt	r0, #2
   14180:	vld1.64	{d16-d17}, [r1]
   14184:	ldr	r1, [r7, #464]	; 0x1d0
   14188:	vld1.64	{d18-d19}, [r0 :128]
   1418c:	adds	r1, r1, #1
   14190:	str	r1, [r7, #464]	; 0x1d0
   14194:	mov	r1, #1
   14198:	vadd.i64	q8, q9, q8
   1419c:	vst1.64	{d16-d17}, [r0 :128]
   141a0:	adc	r0, r2, #0
   141a4:	str	r0, [r7, #468]	; 0x1d4
   141a8:	mov	r0, r4
   141ac:	bl	13108 <push_back_chars@@Base>
   141b0:	mov	r0, #2
   141b4:	bl	11fcc <malloc@plt>
   141b8:	mov	r1, r0
   141bc:	ldrb	r0, [sp, #8]
   141c0:	mov	r2, r1
   141c4:	strb	r0, [r2], #1
   141c8:	add	r0, r7, #480	; 0x1e0
   141cc:	mov	r3, #0
   141d0:	strb	r3, [r2]
   141d4:	ldrd	r2, [r0]
   141d8:	adds	r2, r2, #1
   141dc:	adc	r3, r3, #0
   141e0:	strd	r2, [r0]
   141e4:	mov	r0, r6
   141e8:	bl	12a68 <init_token_boolean_op@@Base>
   141ec:	add	r0, r7, #496	; 0x1f0
   141f0:	b	1373c <next@@Base+0x564>
   141f4:	ldr	r0, [r7, #432]	; 0x1b0
   141f8:	ldr	r1, [r7, #436]	; 0x1b4
   141fc:	ldr	r3, [r7, #456]	; 0x1c8
   14200:	ldr	r6, [r7, #460]	; 0x1cc
   14204:	adds	r0, r0, #1
   14208:	adc	r1, r1, #0
   1420c:	adds	r3, r3, #1
   14210:	str	r0, [r7, #432]	; 0x1b0
   14214:	adc	r0, r6, #0
   14218:	cmp	r2, #60	; 0x3c
   1421c:	str	r1, [r7, #436]	; 0x1b4
   14220:	str	r3, [r7, #456]	; 0x1c8
   14224:	str	r0, [r7, #460]	; 0x1cc
   14228:	bne	14234 <next@@Base+0x105c>
   1422c:	add	r1, r7, #504	; 0x1f8
   14230:	b	14258 <next@@Base+0x1080>
   14234:	ldr	r0, [r7, #512]	; 0x200
   14238:	ldr	r1, [r7, #516]	; 0x204
   1423c:	adds	r0, r0, #1
   14240:	adc	r1, r1, #0
   14244:	cmp	r2, #62	; 0x3e
   14248:	str	r0, [r7, #512]	; 0x200
   1424c:	str	r1, [r7, #516]	; 0x204
   14250:	bne	1436c <next@@Base+0x1194>
   14254:	add	r1, r7, #520	; 0x208
   14258:	ldm	r1, {r0, r3}
   1425c:	adds	r0, r0, #1
   14260:	adc	r3, r3, #0
   14264:	stm	r1, {r0, r3}
   14268:	sub	r0, pc, #928	; 0x3a0
   1426c:	vld1.64	{d18-d19}, [lr :128]
   14270:	strb	r5, [ip, sl]
   14274:	vld1.64	{d16-d17}, [r0]
   14278:	vadd.i64	q8, q9, q8
   1427c:	vst1.64	{d16-d17}, [lr :128]
   14280:	ldr	r1, [r4, #8]
   14284:	ldr	r0, [r4]
   14288:	add	r2, r1, #1
   1428c:	str	r2, [r4, #8]
   14290:	ldrb	r5, [r0, r1]
   14294:	mov	r0, #8
   14298:	bl	11fcc <malloc@plt>
   1429c:	mov	r6, r0
   142a0:	cmp	r5, #61	; 0x3d
   142a4:	bne	142e8 <next@@Base+0x1110>
   142a8:	ldr	r0, [r7, #544]	; 0x220
   142ac:	ldr	r1, [r7, #548]	; 0x224
   142b0:	adds	r0, r0, #1
   142b4:	adc	r1, r1, #0
   142b8:	str	r0, [r7, #544]	; 0x220
   142bc:	mov	r0, #3
   142c0:	str	r1, [r7, #548]	; 0x224
   142c4:	bl	11fcc <malloc@plt>
   142c8:	mov	r1, r0
   142cc:	ldrb	r0, [sp, #8]
   142d0:	mov	r2, #61	; 0x3d
   142d4:	strb	r2, [r1, #1]
   142d8:	add	r2, r1, #2
   142dc:	strb	r0, [r1]
   142e0:	add	r0, r7, #560	; 0x230
   142e4:	b	14344 <next@@Base+0x116c>
   142e8:	movw	r0, #50224	; 0xc430
   142ec:	add	r1, pc, #980	; 0x3d4
   142f0:	ldr	r2, [r7, #540]	; 0x21c
   142f4:	movt	r0, #2
   142f8:	vld1.64	{d16-d17}, [r1]
   142fc:	ldr	r1, [r7, #536]	; 0x218
   14300:	vld1.64	{d18-d19}, [r0 :128]
   14304:	adds	r1, r1, #1
   14308:	str	r1, [r7, #536]	; 0x218
   1430c:	mov	r1, #1
   14310:	vadd.i64	q8, q9, q8
   14314:	vst1.64	{d16-d17}, [r0 :128]
   14318:	adc	r0, r2, #0
   1431c:	str	r0, [r7, #540]	; 0x21c
   14320:	mov	r0, r4
   14324:	bl	13108 <push_back_chars@@Base>
   14328:	mov	r0, #2
   1432c:	bl	11fcc <malloc@plt>
   14330:	mov	r1, r0
   14334:	ldrb	r0, [sp, #8]
   14338:	mov	r2, r1
   1433c:	strb	r0, [r2], #1
   14340:	add	r0, r7, #552	; 0x228
   14344:	mov	r3, #0
   14348:	strb	r3, [r2]
   1434c:	ldrd	r2, [r0]
   14350:	adds	r2, r2, #1
   14354:	adc	r3, r3, #0
   14358:	strd	r2, [r0]
   1435c:	mov	r0, r6
   14360:	bl	12a68 <init_token_boolean_op@@Base>
   14364:	add	r0, r7, #568	; 0x238
   14368:	b	1373c <next@@Base+0x564>
   1436c:	ldr	r0, [r7, #528]	; 0x210
   14370:	ldr	r1, [r7, #532]	; 0x214
   14374:	adds	r0, r0, #1
   14378:	adc	r1, r1, #0
   1437c:	cmp	r2, #61	; 0x3d
   14380:	str	r0, [r7, #528]	; 0x210
   14384:	str	r1, [r7, #532]	; 0x214
   14388:	bne	14428 <next@@Base+0x1250>
   1438c:	add	r0, pc, #948	; 0x3b4
   14390:	vld1.64	{d18-d19}, [lr :128]
   14394:	ldr	r1, [r7, #580]	; 0x244
   14398:	mov	r5, #61	; 0x3d
   1439c:	vld1.64	{d16-d17}, [r0]
   143a0:	ldr	r0, [r7, #576]	; 0x240
   143a4:	strb	r5, [ip, sl]
   143a8:	adds	r0, r0, #1
   143ac:	vadd.i64	q8, q9, q8
   143b0:	adc	r1, r1, #0
   143b4:	str	r0, [r7, #576]	; 0x240
   143b8:	str	r1, [r7, #580]	; 0x244
   143bc:	vst1.64	{d16-d17}, [lr :128]
   143c0:	ldr	r1, [r4, #8]
   143c4:	ldr	r0, [r4]
   143c8:	add	r2, r1, #1
   143cc:	str	r2, [r4, #8]
   143d0:	ldrb	r4, [r0, r1]
   143d4:	mov	r0, #8
   143d8:	bl	11fcc <malloc@plt>
   143dc:	cmp	r4, #61	; 0x3d
   143e0:	bne	146a4 <next@@Base+0x14cc>
   143e4:	mov	r6, r0
   143e8:	ldr	r0, [r7, #600]	; 0x258
   143ec:	ldr	r1, [r7, #604]	; 0x25c
   143f0:	adds	r0, r0, #1
   143f4:	adc	r1, r1, #0
   143f8:	str	r0, [r7, #600]	; 0x258
   143fc:	mov	r0, #3
   14400:	str	r1, [r7, #604]	; 0x25c
   14404:	bl	11fcc <malloc@plt>
   14408:	mov	r1, r0
   1440c:	ldrb	r0, [sp, #8]
   14410:	strh	r5, [r1, #1]
   14414:	strb	r0, [r1]
   14418:	mov	r0, r6
   1441c:	bl	12a68 <init_token_boolean_op@@Base>
   14420:	add	r0, r7, #608	; 0x260
   14424:	b	1373c <next@@Base+0x564>
   14428:	ldr	r0, [r7, #584]	; 0x248
   1442c:	ldr	r1, [r7, #588]	; 0x24c
   14430:	adds	r0, r0, #1
   14434:	adc	r1, r1, #0
   14438:	cmp	r2, #124	; 0x7c
   1443c:	str	r0, [r7, #584]	; 0x248
   14440:	str	r1, [r7, #588]	; 0x24c
   14444:	bne	146d8 <next@@Base+0x1500>
   14448:	add	r0, pc, #760	; 0x2f8
   1444c:	vld1.64	{d18-d19}, [lr :128]
   14450:	ldr	r1, [r7, #620]	; 0x26c
   14454:	mov	r5, #124	; 0x7c
   14458:	vld1.64	{d16-d17}, [r0]
   1445c:	ldr	r0, [r7, #616]	; 0x268
   14460:	strb	r5, [ip, sl]
   14464:	adds	r0, r0, #1
   14468:	vadd.i64	q8, q9, q8
   1446c:	adc	r1, r1, #0
   14470:	str	r0, [r7, #616]	; 0x268
   14474:	str	r1, [r7, #620]	; 0x26c
   14478:	vst1.64	{d16-d17}, [lr :128]
   1447c:	ldr	r1, [r4, #8]
   14480:	ldr	r0, [r4]
   14484:	add	r2, r1, #1
   14488:	str	r2, [r4, #8]
   1448c:	ldrb	r4, [r0, r1]
   14490:	mov	r0, #8
   14494:	bl	11fcc <malloc@plt>
   14498:	cmp	r4, #124	; 0x7c
   1449c:	bne	14728 <next@@Base+0x1550>
   144a0:	mov	r6, r0
   144a4:	ldr	r0, [r7, #640]	; 0x280
   144a8:	ldr	r1, [r7, #644]	; 0x284
   144ac:	adds	r0, r0, #1
   144b0:	adc	r1, r1, #0
   144b4:	str	r0, [r7, #640]	; 0x280
   144b8:	mov	r0, #3
   144bc:	str	r1, [r7, #644]	; 0x284
   144c0:	bl	11fcc <malloc@plt>
   144c4:	mov	r1, r0
   144c8:	ldrb	r0, [sp, #8]
   144cc:	strh	r5, [r1, #1]
   144d0:	strb	r0, [r1]
   144d4:	mov	r0, r6
   144d8:	bl	12a68 <init_token_boolean_op@@Base>
   144dc:	add	r0, r7, #648	; 0x288
   144e0:	b	1373c <next@@Base+0x564>
   144e4:	ldr	r0, [r7, #784]	; 0x310
   144e8:	ldr	r1, [r7, #788]	; 0x314
   144ec:	adds	r0, r0, #1
   144f0:	adc	r1, r1, #0
   144f4:	str	r0, [r7, #784]	; 0x310
   144f8:	mov	r0, #1
   144fc:	str	r1, [r7, #788]	; 0x314
   14500:	bl	12008 <exit@plt>
   14504:	ldr	r0, [r7, #800]	; 0x320
   14508:	ldr	r1, [r7, #804]	; 0x324
   1450c:	adds	r0, r0, #1
   14510:	adc	r1, r1, #0
   14514:	str	r0, [r7, #800]	; 0x320
   14518:	mov	r0, #1
   1451c:	str	r1, [r7, #804]	; 0x324
   14520:	bl	12008 <exit@plt>
   14524:	ldr	r0, [r7, #816]	; 0x330
   14528:	ldr	r1, [r7, #820]	; 0x334
   1452c:	adds	r0, r0, #1
   14530:	adc	r1, r1, #0
   14534:	str	r0, [r7, #816]	; 0x330
   14538:	mov	r0, #1
   1453c:	str	r1, [r7, #820]	; 0x334
   14540:	bl	12008 <exit@plt>
   14544:	ldr	r0, [r7, #840]	; 0x348
   14548:	ldr	r1, [r7, #844]	; 0x34c
   1454c:	adds	r0, r0, #1
   14550:	adc	r1, r1, #0
   14554:	str	r0, [r7, #840]	; 0x348
   14558:	mov	r0, #1
   1455c:	str	r1, [r7, #844]	; 0x34c
   14560:	bl	12008 <exit@plt>
   14564:	ldr	r0, [r7, #856]	; 0x358
   14568:	ldr	r1, [r7, #860]	; 0x35c
   1456c:	adds	r0, r0, #1
   14570:	adc	r1, r1, #0
   14574:	str	r0, [r7, #856]	; 0x358
   14578:	mov	r0, #1
   1457c:	str	r1, [r7, #860]	; 0x35c
   14580:	bl	12008 <exit@plt>
   14584:	ldr	r0, [r7, #872]	; 0x368
   14588:	ldr	r1, [r7, #876]	; 0x36c
   1458c:	adds	r0, r0, #1
   14590:	adc	r1, r1, #0
   14594:	str	r0, [r7, #872]	; 0x368
   14598:	mov	r0, #1
   1459c:	str	r1, [r7, #876]	; 0x36c
   145a0:	bl	12008 <exit@plt>
   145a4:	ldr	r0, [r7, #888]	; 0x378
   145a8:	ldr	r1, [r7, #892]	; 0x37c
   145ac:	adds	r0, r0, #1
   145b0:	adc	r1, r1, #0
   145b4:	str	r0, [r7, #888]	; 0x378
   145b8:	mov	r0, #1
   145bc:	str	r1, [r7, #892]	; 0x37c
   145c0:	bl	12008 <exit@plt>
   145c4:	ldr	r0, [r7, #904]	; 0x388
   145c8:	ldr	r1, [r7, #908]	; 0x38c
   145cc:	adds	r0, r0, #1
   145d0:	adc	r1, r1, #0
   145d4:	str	r0, [r7, #904]	; 0x388
   145d8:	mov	r0, #1
   145dc:	str	r1, [r7, #908]	; 0x38c
   145e0:	bl	12008 <exit@plt>
   145e4:	ldr	r0, [r7, #728]	; 0x2d8
   145e8:	ldr	r1, [r7, #732]	; 0x2dc
   145ec:	adds	r0, r0, #1
   145f0:	adc	r1, r1, #0
   145f4:	str	r0, [r7, #728]	; 0x2d8
   145f8:	mov	r0, #1
   145fc:	str	r1, [r7, #732]	; 0x2dc
   14600:	bl	12008 <exit@plt>
   14604:	ldr	r0, [r7, #928]	; 0x3a0
   14608:	ldr	r1, [r7, #932]	; 0x3a4
   1460c:	adds	r0, r0, #1
   14610:	adc	r1, r1, #0
   14614:	str	r0, [r7, #928]	; 0x3a0
   14618:	mov	r0, #1
   1461c:	str	r1, [r7, #932]	; 0x3a4
   14620:	bl	12008 <exit@plt>
   14624:	ldr	r0, [r7, #944]	; 0x3b0
   14628:	ldr	r1, [r7, #948]	; 0x3b4
   1462c:	adds	r0, r0, #1
   14630:	adc	r1, r1, #0
   14634:	str	r0, [r7, #944]	; 0x3b0
   14638:	mov	r0, #1
   1463c:	str	r1, [r7, #948]	; 0x3b4
   14640:	bl	12008 <exit@plt>
   14644:	ldr	r0, [r7, #960]	; 0x3c0
   14648:	ldr	r1, [r7, #964]	; 0x3c4
   1464c:	adds	r0, r0, #1
   14650:	adc	r1, r1, #0
   14654:	str	r0, [r7, #960]	; 0x3c0
   14658:	mov	r0, #1
   1465c:	str	r1, [r7, #964]	; 0x3c4
   14660:	bl	12008 <exit@plt>
   14664:	ldr	r0, [r7, #752]	; 0x2f0
   14668:	ldr	r1, [r7, #756]	; 0x2f4
   1466c:	adds	r0, r0, #1
   14670:	adc	r1, r1, #0
   14674:	str	r0, [r7, #752]	; 0x2f0
   14678:	mov	r0, #1
   1467c:	str	r1, [r7, #756]	; 0x2f4
   14680:	bl	12008 <exit@plt>
   14684:	ldr	r0, [r7, #672]	; 0x2a0
   14688:	ldr	r1, [r7, #676]	; 0x2a4
   1468c:	adds	r0, r0, #1
   14690:	adc	r1, r1, #0
   14694:	str	r0, [r7, #672]	; 0x2a0
   14698:	mov	r0, #1
   1469c:	str	r1, [r7, #676]	; 0x2a4
   146a0:	bl	12008 <exit@plt>
   146a4:	ldr	r0, [r7, #592]	; 0x250
   146a8:	ldr	r1, [r7, #596]	; 0x254
   146ac:	adds	r0, r0, #1
   146b0:	adc	r1, r1, #0
   146b4:	str	r0, [r7, #592]	; 0x250
   146b8:	mov	r0, #1
   146bc:	str	r1, [r7, #596]	; 0x254
   146c0:	bl	12008 <exit@plt>
   146c4:	nop	{0}
   146c8:	andeq	r0, r0, r1
   146cc:	andeq	r0, r0, r0
   146d0:	andeq	r0, r0, r1
   146d4:	andeq	r0, r0, r0
   146d8:	ldr	r0, [r7, #624]	; 0x270
   146dc:	ldr	r1, [r7, #628]	; 0x274
   146e0:	adds	r0, r0, #1
   146e4:	adc	r1, r1, #0
   146e8:	str	r0, [r7, #624]	; 0x270
   146ec:	str	r1, [r7, #628]	; 0x274
   146f0:	ldr	r0, [r7, #664]	; 0x298
   146f4:	ldr	r1, [r7, #668]	; 0x29c
   146f8:	adds	r0, r0, #1
   146fc:	str	r0, [r7, #664]	; 0x298
   14700:	movw	r0, #49384	; 0xc0e8
   14704:	adc	r1, r1, #0
   14708:	movt	r0, #2
   1470c:	str	r1, [r7, #668]	; 0x29c
   14710:	movw	r1, #42625	; 0xa681
   14714:	movt	r1, #1
   14718:	ldr	r0, [r0]
   1471c:	bl	12038 <fprintf@plt>
   14720:	mov	r0, #1
   14724:	bl	12008 <exit@plt>
   14728:	ldr	r0, [r7, #632]	; 0x278
   1472c:	ldr	r1, [r7, #636]	; 0x27c
   14730:	adds	r0, r0, #1
   14734:	adc	r1, r1, #0
   14738:	str	r0, [r7, #632]	; 0x278
   1473c:	mov	r0, #1
   14740:	str	r1, [r7, #636]	; 0x27c
   14744:	bl	12008 <exit@plt>
   14748:	andeq	r0, r0, r1
   1474c:	andeq	r0, r0, r0
   14750:	andeq	r0, r0, r1
   14754:	andeq	r0, r0, r0
   14758:	push	{r4, r5, r6, lr}
   1475c:	sub	sp, sp, #8
   14760:	movw	r0, #42665	; 0xa6a9
   14764:	movw	r1, #41285	; 0xa145
   14768:	movw	r2, #38886	; 0x97e6
   1476c:	movt	r0, #1
   14770:	movt	r1, #1
   14774:	movt	r2, #30243	; 0x7623
   14778:	bl	16ff8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   1477c:	movw	r0, #43008	; 0xa800
   14780:	movw	r6, #42848	; 0xa760
   14784:	mov	r5, #0
   14788:	movt	r0, #1
   1478c:	movt	r6, #1
   14790:	add	r4, r0, #4
   14794:	mov	r3, r6
   14798:	ldr	r0, [r3, r5]!
   1479c:	ldr	r1, [r3, #16]
   147a0:	str	r1, [sp]
   147a4:	ldmib	r3, {r1, r2}
   147a8:	ldrb	r3, [r3, #12]
   147ac:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   147b0:	ldrd	r0, [r4, #-4]
   147b4:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   147b8:	add	r5, r5, #20
   147bc:	add	r4, r4, #8
   147c0:	cmp	r5, #160	; 0xa0
   147c4:	bne	14794 <next@@Base+0x15bc>
   147c8:	bl	18754 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   147cc:	add	sp, sp, #8
   147d0:	pop	{r4, r5, r6, lr}
   147d4:	b	194c0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   147d8:	push	{fp, lr}
   147dc:	bl	14758 <next@@Base+0x1580>
   147e0:	movw	r2, #50144	; 0xc3e0
   147e4:	vmov.i32	q8, #0	; 0x00000000
   147e8:	movw	r0, #50080	; 0xc3a0
   147ec:	movt	r2, #2
   147f0:	movt	r0, #2
   147f4:	vst1.64	{d16-d17}, [r2 :128]
   147f8:	movw	r2, #50160	; 0xc3f0
   147fc:	vst1.64	{d16-d17}, [r0 :128]
   14800:	movw	r0, #50096	; 0xc3b0
   14804:	movt	r2, #2
   14808:	movt	r0, #2
   1480c:	vst1.64	{d16-d17}, [r2 :128]
   14810:	movw	r2, #50176	; 0xc400
   14814:	add	r1, r0, #16
   14818:	movt	r2, #2
   1481c:	vst1.64	{d16-d17}, [r1 :128]
   14820:	mov	r1, #0
   14824:	str	r1, [r0, #32]
   14828:	vst1.64	{d16-d17}, [r2 :128]
   1482c:	movw	r2, #50224	; 0xc430
   14830:	movt	r2, #2
   14834:	vst1.64	{d16-d17}, [r2 :128]
   14838:	mov	r2, #36	; 0x24
   1483c:	vst1.64	{d16-d17}, [r0 :128], r2
   14840:	mov	r2, #1008	; 0x3f0
   14844:	str	r1, [r0]
   14848:	movw	r0, #50192	; 0xc410
   1484c:	mov	r1, #0
   14850:	movt	r0, #2
   14854:	vst1.64	{d16-d17}, [r0 :128]!
   14858:	vst1.64	{d16-d17}, [r0 :128]
   1485c:	movw	r0, #50240	; 0xc440
   14860:	movt	r0, #2
   14864:	bl	12068 <memset@plt>
   14868:	pop	{fp, pc}
   1486c:	movw	r0, #18264	; 0x4758
   14870:	movw	r1, #18392	; 0x47d8
   14874:	movt	r0, #1
   14878:	movt	r1, #1
   1487c:	b	19974 <__gcov_flush@@Base+0xb8>

00014880 <init_ast_base@@Base>:
   14880:	movw	ip, #51248	; 0xc830
   14884:	add	r3, pc, #28
   14888:	movt	ip, #2
   1488c:	vld1.64	{d16-d17}, [r3]
   14890:	vld1.64	{d18-d19}, [ip :128]
   14894:	vadd.i64	q8, q9, q8
   14898:	vst1.64	{d16-d17}, [ip :128]
   1489c:	stm	r0, {r1, r2}
   148a0:	bx	lr
   148a4:	nop	{0}
   148a8:	andeq	r0, r0, r1
   148ac:	andeq	r0, r0, r0
   148b0:	andeq	r0, r0, r1
   148b4:	andeq	r0, r0, r0

000148b8 <init_ast_base_single@@Base>:
   148b8:	movw	ip, #51248	; 0xc830
   148bc:	movw	r3, #51264	; 0xc840
   148c0:	add	r2, pc, #48	; 0x30
   148c4:	movt	ip, #2
   148c8:	movt	r3, #2
   148cc:	vld1.64	{d16-d17}, [r2]
   148d0:	mov	r2, #0
   148d4:	vld1.64	{d18-d19}, [r3 :128]
   148d8:	vld1.64	{d20-d21}, [ip :128]
   148dc:	vadd.i64	q9, q9, q8
   148e0:	vadd.i64	q8, q10, q8
   148e4:	vst1.64	{d18-d19}, [r3 :128]
   148e8:	vst1.64	{d16-d17}, [ip :128]
   148ec:	stm	r0, {r1, r2}
   148f0:	bx	lr
   148f4:	nop	{0}
   148f8:	andeq	r0, r0, r1
   148fc:	andeq	r0, r0, r0
   14900:	andeq	r0, r0, r1
   14904:	andeq	r0, r0, r0

00014908 <init_node_id@@Base>:
   14908:	movw	r2, #51264	; 0xc840
   1490c:	add	r3, pc, #76	; 0x4c
   14910:	movw	ip, #51280	; 0xc850
   14914:	vld1.64	{d16-d17}, [r3]
   14918:	movw	r3, #51248	; 0xc830
   1491c:	movt	r2, #2
   14920:	movt	ip, #2
   14924:	movt	r3, #2
   14928:	vld1.64	{d20-d21}, [r2 :128]
   1492c:	vld1.64	{d18-d19}, [ip :128]
   14930:	vld1.64	{d22-d23}, [r3 :128]
   14934:	vadd.i64	q10, q10, q8
   14938:	vadd.i64	q9, q9, q8
   1493c:	vadd.i64	q8, q11, q8
   14940:	vst1.64	{d20-d21}, [r2 :128]
   14944:	mov	r2, #0
   14948:	vst1.64	{d18-d19}, [ip :128]
   1494c:	vst1.64	{d16-d17}, [r3 :128]
   14950:	str	r2, [r0]
   14954:	str	r2, [r0, #4]
   14958:	str	r1, [r0, #8]
   1495c:	bx	lr
   14960:	andeq	r0, r0, r1
   14964:	andeq	r0, r0, r0
   14968:	andeq	r0, r0, r1
   1496c:	andeq	r0, r0, r0

00014970 <init_node_int@@Base>:
   14970:	add	r3, pc, #88	; 0x58
   14974:	movw	ip, #51296	; 0xc860
   14978:	movw	r2, #51264	; 0xc840
   1497c:	vld1.64	{d16-d17}, [r3]
   14980:	movw	r3, #51248	; 0xc830
   14984:	movt	ip, #2
   14988:	movt	r2, #2
   1498c:	movt	r3, #2
   14990:	vld1.64	{d18-d19}, [ip :128]
   14994:	vld1.64	{d20-d21}, [r2 :128]
   14998:	vld1.64	{d22-d23}, [r3 :128]
   1499c:	vadd.i64	q9, q9, q8
   149a0:	vadd.i64	q10, q10, q8
   149a4:	vadd.i64	q8, q11, q8
   149a8:	vst1.64	{d20-d21}, [r2 :128]
   149ac:	mov	r2, #0
   149b0:	vst1.64	{d18-d19}, [ip :128]
   149b4:	vst1.64	{d16-d17}, [r3 :128]
   149b8:	mov	r3, #1
   149bc:	str	r3, [r0]
   149c0:	str	r2, [r0, #4]
   149c4:	str	r1, [r0, #8]
   149c8:	bx	lr
   149cc:	nop	{0}
   149d0:	andeq	r0, r0, r1
   149d4:	andeq	r0, r0, r0
   149d8:	andeq	r0, r0, r1
   149dc:	andeq	r0, r0, r0

000149e0 <init_node_function@@Base>:
   149e0:	push	{fp, lr}
   149e4:	mov	fp, sp
   149e8:	add	r3, pc, #88	; 0x58
   149ec:	movw	ip, #51312	; 0xc870
   149f0:	movw	lr, #51248	; 0xc830
   149f4:	vld1.64	{d16-d17}, [r3]
   149f8:	movw	r3, #51264	; 0xc840
   149fc:	movt	ip, #2
   14a00:	movt	lr, #2
   14a04:	movt	r3, #2
   14a08:	vld1.64	{d18-d19}, [ip :128]
   14a0c:	vld1.64	{d22-d23}, [lr :128]
   14a10:	vld1.64	{d20-d21}, [r3 :128]
   14a14:	vadd.i64	q9, q9, q8
   14a18:	vadd.i64	q10, q10, q8
   14a1c:	vadd.i64	q8, q11, q8
   14a20:	vst1.64	{d18-d19}, [ip :128]
   14a24:	mov	ip, #0
   14a28:	vst1.64	{d20-d21}, [r3 :128]
   14a2c:	mov	r3, #2
   14a30:	vst1.64	{d16-d17}, [lr :128]
   14a34:	stm	r0, {r3, ip}
   14a38:	str	r1, [r0, #8]
   14a3c:	str	r2, [r0, #12]
   14a40:	pop	{fp, pc}
   14a44:	nop	{0}
   14a48:	andeq	r0, r0, r1
   14a4c:	andeq	r0, r0, r0
   14a50:	andeq	r0, r0, r1
   14a54:	andeq	r0, r0, r0

00014a58 <init_node_return@@Base>:
   14a58:	add	r3, pc, #88	; 0x58
   14a5c:	movw	ip, #51328	; 0xc880
   14a60:	movw	r2, #51264	; 0xc840
   14a64:	vld1.64	{d16-d17}, [r3]
   14a68:	movw	r3, #51248	; 0xc830
   14a6c:	movt	ip, #2
   14a70:	movt	r2, #2
   14a74:	movt	r3, #2
   14a78:	vld1.64	{d18-d19}, [ip :128]
   14a7c:	vld1.64	{d20-d21}, [r2 :128]
   14a80:	vld1.64	{d22-d23}, [r3 :128]
   14a84:	vadd.i64	q9, q9, q8
   14a88:	vadd.i64	q10, q10, q8
   14a8c:	vadd.i64	q8, q11, q8
   14a90:	vst1.64	{d20-d21}, [r2 :128]
   14a94:	mov	r2, #0
   14a98:	vst1.64	{d18-d19}, [ip :128]
   14a9c:	vst1.64	{d16-d17}, [r3 :128]
   14aa0:	mov	r3, #3
   14aa4:	str	r3, [r0]
   14aa8:	str	r2, [r0, #4]
   14aac:	str	r1, [r0, #8]
   14ab0:	bx	lr
   14ab4:	nop	{0}
   14ab8:	andeq	r0, r0, r1
   14abc:	andeq	r0, r0, r0
   14ac0:	andeq	r0, r0, r1
   14ac4:	andeq	r0, r0, r0

00014ac8 <init_node_if@@Base>:
   14ac8:	push	{r4, sl, fp, lr}
   14acc:	add	fp, sp, #8
   14ad0:	movw	r4, #51264	; 0xc840
   14ad4:	add	lr, pc, #76	; 0x4c
   14ad8:	movw	ip, #51344	; 0xc890
   14adc:	vld1.64	{d16-d17}, [lr]
   14ae0:	movw	lr, #51248	; 0xc830
   14ae4:	movt	r4, #2
   14ae8:	movt	ip, #2
   14aec:	movt	lr, #2
   14af0:	vld1.64	{d20-d21}, [r4 :128]
   14af4:	vld1.64	{d18-d19}, [ip :128]
   14af8:	vld1.64	{d22-d23}, [lr :128]
   14afc:	vadd.i64	q10, q10, q8
   14b00:	vadd.i64	q9, q9, q8
   14b04:	vadd.i64	q8, q11, q8
   14b08:	vst1.64	{d20-d21}, [r4 :128]
   14b0c:	mov	r4, #4
   14b10:	vst1.64	{d18-d19}, [ip :128]
   14b14:	mov	ip, #0
   14b18:	vst1.64	{d16-d17}, [lr :128]
   14b1c:	stmia	r0!, {r4, ip}
   14b20:	stm	r0, {r1, r2, r3}
   14b24:	pop	{r4, sl, fp, pc}
   14b28:	andeq	r0, r0, r1
   14b2c:	andeq	r0, r0, r0
   14b30:	andeq	r0, r0, r1
   14b34:	andeq	r0, r0, r0

00014b38 <init_node_boolean_operator@@Base>:
   14b38:	push	{r4, sl, fp, lr}
   14b3c:	add	fp, sp, #8
   14b40:	movw	r4, #51264	; 0xc840
   14b44:	add	lr, pc, #84	; 0x54
   14b48:	movw	ip, #51360	; 0xc8a0
   14b4c:	vld1.64	{d16-d17}, [lr]
   14b50:	movw	lr, #51248	; 0xc830
   14b54:	movt	r4, #2
   14b58:	movt	ip, #2
   14b5c:	movt	lr, #2
   14b60:	vld1.64	{d20-d21}, [r4 :128]
   14b64:	vld1.64	{d18-d19}, [ip :128]
   14b68:	vld1.64	{d22-d23}, [lr :128]
   14b6c:	vadd.i64	q10, q10, q8
   14b70:	vadd.i64	q9, q9, q8
   14b74:	vadd.i64	q8, q11, q8
   14b78:	vst1.64	{d20-d21}, [r4 :128]
   14b7c:	mov	r4, #5
   14b80:	vst1.64	{d18-d19}, [ip :128]
   14b84:	mov	ip, #0
   14b88:	vst1.64	{d16-d17}, [lr :128]
   14b8c:	stm	r0, {r4, ip}
   14b90:	str	r2, [r0, #8]
   14b94:	str	r3, [r0, #12]
   14b98:	str	r1, [r0, #16]
   14b9c:	pop	{r4, sl, fp, pc}
   14ba0:	andeq	r0, r0, r1
   14ba4:	andeq	r0, r0, r0
   14ba8:	andeq	r0, r0, r1
   14bac:	andeq	r0, r0, r0

00014bb0 <free_node@@Base>:
   14bb0:	push	{r4, sl, fp, lr}
   14bb4:	add	fp, sp, #8
   14bb8:	movw	r4, #51376	; 0xc8b0
   14bbc:	movt	r4, #2
   14bc0:	ldrd	r2, [r4]
   14bc4:	adds	r2, r2, #1
   14bc8:	adc	r3, r3, #0
   14bcc:	strd	r2, [r4]
   14bd0:	ldr	r1, [r0]
   14bd4:	cmp	r1, #5
   14bd8:	bhi	14cc4 <free_node@@Base+0x114>
   14bdc:	add	r2, pc, #0
   14be0:	ldr	pc, [r2, r1, lsl #2]
   14be4:	strdeq	r4, [r1], -ip
   14be8:	andeq	r4, r1, r0, asr ip
   14bec:	andeq	r4, r1, r4, lsr ip
   14bf0:	andeq	r4, r1, ip, ror #24
   14bf4:	andeq	r4, r1, r8, lsl ip
   14bf8:	andeq	r4, r1, r8, lsl #25
   14bfc:	ldrd	r2, [r4, #16]
   14c00:	adds	r2, r2, #1
   14c04:	adc	r3, r3, #0
   14c08:	strd	r2, [r4, #16]
   14c0c:	bl	14cfc <free_node_id@@Base>
   14c10:	add	r0, r4, #64	; 0x40
   14c14:	b	14ca0 <free_node@@Base+0xf0>
   14c18:	ldrd	r2, [r4, #48]	; 0x30
   14c1c:	adds	r2, r2, #1
   14c20:	adc	r3, r3, #0
   14c24:	strd	r2, [r4, #48]	; 0x30
   14c28:	bl	14ef4 <free_node_if@@Base>
   14c2c:	add	r0, r4, #96	; 0x60
   14c30:	b	14ca0 <free_node@@Base+0xf0>
   14c34:	ldrd	r2, [r4, #32]
   14c38:	adds	r2, r2, #1
   14c3c:	adc	r3, r3, #0
   14c40:	strd	r2, [r4, #32]
   14c44:	bl	14df4 <free_node_function@@Base>
   14c48:	add	r0, r4, #80	; 0x50
   14c4c:	b	14ca0 <free_node@@Base+0xf0>
   14c50:	ldrd	r2, [r4, #24]
   14c54:	adds	r2, r2, #1
   14c58:	adc	r3, r3, #0
   14c5c:	strd	r2, [r4, #24]
   14c60:	bl	14d78 <free_node_int@@Base>
   14c64:	add	r0, r4, #72	; 0x48
   14c68:	b	14ca0 <free_node@@Base+0xf0>
   14c6c:	ldrd	r2, [r4, #40]	; 0x28
   14c70:	adds	r2, r2, #1
   14c74:	adc	r3, r3, #0
   14c78:	strd	r2, [r4, #40]	; 0x28
   14c7c:	bl	14e78 <free_node_return@@Base>
   14c80:	add	r0, r4, #88	; 0x58
   14c84:	b	14ca0 <free_node@@Base+0xf0>
   14c88:	ldrd	r2, [r4, #56]	; 0x38
   14c8c:	adds	r2, r2, #1
   14c90:	adc	r3, r3, #0
   14c94:	strd	r2, [r4, #56]	; 0x38
   14c98:	bl	14f88 <free_node_boolean_operator@@Base>
   14c9c:	add	r0, r4, #104	; 0x68
   14ca0:	ldrd	r2, [r0]
   14ca4:	adds	r2, r2, #1
   14ca8:	adc	r3, r3, #0
   14cac:	strd	r2, [r0]
   14cb0:	ldrd	r0, [r4, #112]	; 0x70
   14cb4:	adds	r0, r0, #1
   14cb8:	adc	r1, r1, #0
   14cbc:	strd	r0, [r4, #112]	; 0x70
   14cc0:	pop	{r4, sl, fp, pc}
   14cc4:	ldrd	r0, [r4, #8]
   14cc8:	mov	r2, #1
   14ccc:	adds	r0, r0, #1
   14cd0:	adc	r1, r1, #0
   14cd4:	strd	r0, [r4, #8]
   14cd8:	movw	r0, #49384	; 0xc0e8
   14cdc:	mov	r1, #31
   14ce0:	movt	r0, #2
   14ce4:	ldr	r3, [r0]
   14ce8:	movw	r0, #43072	; 0xa840
   14cec:	movt	r0, #1
   14cf0:	bl	11fa8 <fwrite@plt>
   14cf4:	mov	r0, #1
   14cf8:	bl	12008 <exit@plt>

00014cfc <free_node_id@@Base>:
   14cfc:	push	{r4, r5, fp, lr}
   14d00:	add	fp, sp, #8
   14d04:	movw	r5, #51504	; 0xc930
   14d08:	mov	r4, r0
   14d0c:	movt	r5, #2
   14d10:	ldrd	r0, [r5]
   14d14:	adds	r0, r0, #1
   14d18:	adc	r1, r1, #0
   14d1c:	strd	r0, [r5]
   14d20:	ldr	r0, [r4, #4]
   14d24:	cmp	r0, #0
   14d28:	beq	14d48 <free_node_id@@Base+0x4c>
   14d2c:	ldrd	r2, [r5, #8]
   14d30:	adds	r2, r2, #1
   14d34:	adc	r3, r3, #0
   14d38:	strd	r2, [r5, #8]
   14d3c:	bl	14bb0 <free_node@@Base>
   14d40:	add	r0, r5, #24
   14d44:	b	14d4c <free_node_id@@Base+0x50>
   14d48:	add	r0, r5, #16
   14d4c:	ldrd	r2, [r0]
   14d50:	adds	r2, r2, #1
   14d54:	adc	r3, r3, #0
   14d58:	strd	r2, [r0]
   14d5c:	ldrd	r0, [r5, #32]
   14d60:	adds	r0, r0, #1
   14d64:	adc	r1, r1, #0
   14d68:	strd	r0, [r5, #32]
   14d6c:	mov	r0, r4
   14d70:	pop	{r4, r5, fp, lr}
   14d74:	b	11f54 <free@plt>

00014d78 <free_node_int@@Base>:
   14d78:	push	{r4, r5, fp, lr}
   14d7c:	add	fp, sp, #8
   14d80:	movw	r5, #51552	; 0xc960
   14d84:	mov	r4, r0
   14d88:	movt	r5, #2
   14d8c:	ldrd	r0, [r5]
   14d90:	adds	r0, r0, #1
   14d94:	adc	r1, r1, #0
   14d98:	strd	r0, [r5]
   14d9c:	ldr	r0, [r4, #4]
   14da0:	cmp	r0, #0
   14da4:	beq	14dc4 <free_node_int@@Base+0x4c>
   14da8:	ldrd	r2, [r5, #8]
   14dac:	adds	r2, r2, #1
   14db0:	adc	r3, r3, #0
   14db4:	strd	r2, [r5, #8]
   14db8:	bl	14bb0 <free_node@@Base>
   14dbc:	add	r0, r5, #24
   14dc0:	b	14dc8 <free_node_int@@Base+0x50>
   14dc4:	add	r0, r5, #16
   14dc8:	ldrd	r2, [r0]
   14dcc:	adds	r2, r2, #1
   14dd0:	adc	r3, r3, #0
   14dd4:	strd	r2, [r0]
   14dd8:	ldrd	r0, [r5, #32]
   14ddc:	adds	r0, r0, #1
   14de0:	adc	r1, r1, #0
   14de4:	strd	r0, [r5, #32]
   14de8:	mov	r0, r4
   14dec:	pop	{r4, r5, fp, lr}
   14df0:	b	11f54 <free@plt>

00014df4 <free_node_function@@Base>:
   14df4:	push	{r4, r5, fp, lr}
   14df8:	add	fp, sp, #8
   14dfc:	movw	r5, #51600	; 0xc990
   14e00:	mov	r4, r0
   14e04:	movt	r5, #2
   14e08:	ldrd	r0, [r5]
   14e0c:	adds	r0, r0, #1
   14e10:	adc	r1, r1, #0
   14e14:	strd	r0, [r5]
   14e18:	ldr	r0, [r4, #4]
   14e1c:	cmp	r0, #0
   14e20:	beq	14e40 <free_node_function@@Base+0x4c>
   14e24:	ldrd	r2, [r5, #8]
   14e28:	adds	r2, r2, #1
   14e2c:	adc	r3, r3, #0
   14e30:	strd	r2, [r5, #8]
   14e34:	bl	14bb0 <free_node@@Base>
   14e38:	add	r0, r5, #24
   14e3c:	b	14e44 <free_node_function@@Base+0x50>
   14e40:	add	r0, r5, #16
   14e44:	ldrd	r2, [r0]
   14e48:	adds	r2, r2, #1
   14e4c:	adc	r3, r3, #0
   14e50:	strd	r2, [r0]
   14e54:	ldrd	r0, [r5, #32]
   14e58:	adds	r0, r0, #1
   14e5c:	adc	r1, r1, #0
   14e60:	strd	r0, [r5, #32]
   14e64:	ldr	r0, [r4, #8]
   14e68:	bl	11f54 <free@plt>
   14e6c:	mov	r0, r4
   14e70:	pop	{r4, r5, fp, lr}
   14e74:	b	11f54 <free@plt>

00014e78 <free_node_return@@Base>:
   14e78:	push	{r4, r5, fp, lr}
   14e7c:	add	fp, sp, #8
   14e80:	movw	r5, #51648	; 0xc9c0
   14e84:	mov	r4, r0
   14e88:	movt	r5, #2
   14e8c:	ldrd	r0, [r5]
   14e90:	adds	r0, r0, #1
   14e94:	adc	r1, r1, #0
   14e98:	strd	r0, [r5]
   14e9c:	ldr	r0, [r4, #4]
   14ea0:	cmp	r0, #0
   14ea4:	beq	14ec4 <free_node_return@@Base+0x4c>
   14ea8:	ldrd	r2, [r5, #8]
   14eac:	adds	r2, r2, #1
   14eb0:	adc	r3, r3, #0
   14eb4:	strd	r2, [r5, #8]
   14eb8:	bl	14bb0 <free_node@@Base>
   14ebc:	add	r0, r5, #24
   14ec0:	b	14ec8 <free_node_return@@Base+0x50>
   14ec4:	add	r0, r5, #16
   14ec8:	ldrd	r2, [r0]
   14ecc:	adds	r2, r2, #1
   14ed0:	adc	r3, r3, #0
   14ed4:	strd	r2, [r0]
   14ed8:	ldrd	r0, [r5, #32]
   14edc:	adds	r0, r0, #1
   14ee0:	adc	r1, r1, #0
   14ee4:	strd	r0, [r5, #32]
   14ee8:	mov	r0, r4
   14eec:	pop	{r4, r5, fp, lr}
   14ef0:	b	11f54 <free@plt>

00014ef4 <free_node_if@@Base>:
   14ef4:	push	{r4, r5, fp, lr}
   14ef8:	add	fp, sp, #8
   14efc:	movw	r5, #51696	; 0xc9f0
   14f00:	mov	r4, r0
   14f04:	movt	r5, #2
   14f08:	ldrd	r0, [r5]
   14f0c:	adds	r0, r0, #1
   14f10:	adc	r1, r1, #0
   14f14:	strd	r0, [r5]
   14f18:	ldr	r0, [r4, #4]
   14f1c:	cmp	r0, #0
   14f20:	beq	14f40 <free_node_if@@Base+0x4c>
   14f24:	ldrd	r2, [r5, #8]
   14f28:	adds	r2, r2, #1
   14f2c:	adc	r3, r3, #0
   14f30:	strd	r2, [r5, #8]
   14f34:	bl	14bb0 <free_node@@Base>
   14f38:	add	r0, r5, #24
   14f3c:	b	14f44 <free_node_if@@Base+0x50>
   14f40:	add	r0, r5, #16
   14f44:	ldrd	r2, [r0]
   14f48:	adds	r2, r2, #1
   14f4c:	adc	r3, r3, #0
   14f50:	strd	r2, [r0]
   14f54:	ldrd	r0, [r5, #32]
   14f58:	adds	r0, r0, #1
   14f5c:	adc	r1, r1, #0
   14f60:	strd	r0, [r5, #32]
   14f64:	ldr	r0, [r4, #8]
   14f68:	bl	14bb0 <free_node@@Base>
   14f6c:	ldr	r0, [r4, #12]
   14f70:	bl	14bb0 <free_node@@Base>
   14f74:	ldr	r0, [r4, #16]
   14f78:	bl	14bb0 <free_node@@Base>
   14f7c:	mov	r0, r4
   14f80:	pop	{r4, r5, fp, lr}
   14f84:	b	11f54 <free@plt>

00014f88 <free_node_boolean_operator@@Base>:
   14f88:	push	{r4, r5, fp, lr}
   14f8c:	add	fp, sp, #8
   14f90:	movw	r5, #51744	; 0xca20
   14f94:	mov	r4, r0
   14f98:	movt	r5, #2
   14f9c:	ldrd	r0, [r5]
   14fa0:	adds	r0, r0, #1
   14fa4:	adc	r1, r1, #0
   14fa8:	strd	r0, [r5]
   14fac:	ldr	r0, [r4, #4]
   14fb0:	cmp	r0, #0
   14fb4:	beq	14fd4 <free_node_boolean_operator@@Base+0x4c>
   14fb8:	ldrd	r2, [r5, #8]
   14fbc:	adds	r2, r2, #1
   14fc0:	adc	r3, r3, #0
   14fc4:	strd	r2, [r5, #8]
   14fc8:	bl	14bb0 <free_node@@Base>
   14fcc:	add	r0, r5, #24
   14fd0:	b	14fd8 <free_node_boolean_operator@@Base+0x50>
   14fd4:	add	r0, r5, #16
   14fd8:	ldrd	r2, [r0]
   14fdc:	adds	r2, r2, #1
   14fe0:	adc	r3, r3, #0
   14fe4:	strd	r2, [r0]
   14fe8:	ldrd	r0, [r5, #32]
   14fec:	adds	r0, r0, #1
   14ff0:	adc	r1, r1, #0
   14ff4:	strd	r0, [r5, #32]
   14ff8:	ldr	r0, [r4, #8]
   14ffc:	bl	14bb0 <free_node@@Base>
   15000:	ldr	r0, [r4, #12]
   15004:	bl	14bb0 <free_node@@Base>
   15008:	mov	r0, r4
   1500c:	pop	{r4, r5, fp, lr}
   15010:	b	11f54 <free@plt>

00015014 <get_boolean_op_value@@Base>:
   15014:	push	{r4, r5, r6, sl, fp, lr}
   15018:	add	fp, sp, #16
   1501c:	movw	r6, #51792	; 0xca50
   15020:	mov	r1, #2
   15024:	movt	r6, #2
   15028:	ldrd	r2, [r6]
   1502c:	adds	r2, r2, #1
   15030:	adc	r3, r3, #0
   15034:	strd	r2, [r6]
   15038:	ldr	r4, [r0, #4]
   1503c:	mov	r0, r4
   15040:	bl	120a4 <strnlen@plt>
   15044:	cmp	r0, #2
   15048:	bne	15174 <get_boolean_op_value@@Base+0x160>
   1504c:	ldrd	r0, [r6, #8]
   15050:	mov	r2, #2
   15054:	adds	r0, r0, #1
   15058:	adc	r1, r1, #0
   1505c:	strd	r0, [r6, #8]
   15060:	movw	r1, #43104	; 0xa860
   15064:	mov	r0, r4
   15068:	movt	r1, #1
   1506c:	bl	12110 <strncmp@plt>
   15070:	cmp	r0, #0
   15074:	beq	151bc <get_boolean_op_value@@Base+0x1a8>
   15078:	ldrd	r0, [r6, #32]
   1507c:	mov	r2, #2
   15080:	adds	r0, r0, #1
   15084:	adc	r1, r1, #0
   15088:	strd	r0, [r6, #32]
   1508c:	movw	r1, #43107	; 0xa863
   15090:	mov	r0, r4
   15094:	movt	r1, #1
   15098:	bl	12110 <strncmp@plt>
   1509c:	cmp	r0, #0
   150a0:	beq	15210 <get_boolean_op_value@@Base+0x1fc>
   150a4:	ldrd	r0, [r6, #56]	; 0x38
   150a8:	mov	r2, #2
   150ac:	mov	r5, #2
   150b0:	adds	r0, r0, #1
   150b4:	adc	r1, r1, #0
   150b8:	strd	r0, [r6, #56]	; 0x38
   150bc:	movw	r1, #43110	; 0xa866
   150c0:	mov	r0, r4
   150c4:	movt	r1, #1
   150c8:	bl	12110 <strncmp@plt>
   150cc:	cmp	r0, #0
   150d0:	beq	1522c <get_boolean_op_value@@Base+0x218>
   150d4:	ldrd	r0, [r6, #80]	; 0x50
   150d8:	mov	r2, #2
   150dc:	adds	r0, r0, #1
   150e0:	adc	r1, r1, #0
   150e4:	strd	r0, [r6, #80]	; 0x50
   150e8:	movw	r1, #43113	; 0xa869
   150ec:	mov	r0, r4
   150f0:	movt	r1, #1
   150f4:	bl	12110 <strncmp@plt>
   150f8:	cmp	r0, #0
   150fc:	beq	15244 <get_boolean_op_value@@Base+0x230>
   15100:	ldrd	r0, [r6, #104]	; 0x68
   15104:	mov	r2, #2
   15108:	adds	r0, r0, #1
   1510c:	adc	r1, r1, #0
   15110:	strd	r0, [r6, #104]	; 0x68
   15114:	movw	r1, #43116	; 0xa86c
   15118:	mov	r0, r4
   1511c:	movt	r1, #1
   15120:	bl	12110 <strncmp@plt>
   15124:	cmp	r0, #0
   15128:	beq	15260 <get_boolean_op_value@@Base+0x24c>
   1512c:	ldrd	r0, [r6, #128]	; 0x80
   15130:	mov	r2, #2
   15134:	adds	r0, r0, #1
   15138:	adc	r1, r1, #0
   1513c:	strd	r0, [r6, #128]	; 0x80
   15140:	movw	r1, #43119	; 0xa86f
   15144:	mov	r0, r4
   15148:	movt	r1, #1
   1514c:	bl	12110 <strncmp@plt>
   15150:	cmp	r0, #0
   15154:	bne	152d4 <get_boolean_op_value@@Base+0x2c0>
   15158:	ldrd	r0, [r6, #144]	; 0x90
   1515c:	mov	r5, #5
   15160:	adds	r0, r0, #1
   15164:	adc	r1, r1, #0
   15168:	strd	r0, [r6, #144]	; 0x90
   1516c:	add	r0, r6, #160	; 0xa0
   15170:	b	15278 <get_boolean_op_value@@Base+0x264>
   15174:	ldrd	r0, [r6, #16]
   15178:	adds	r0, r0, #1
   1517c:	adc	r1, r1, #0
   15180:	strd	r0, [r6, #16]
   15184:	ldrb	r0, [r4]
   15188:	cmp	r0, #62	; 0x3e
   1518c:	beq	151f4 <get_boolean_op_value@@Base+0x1e0>
   15190:	cmp	r0, #60	; 0x3c
   15194:	beq	151d8 <get_boolean_op_value@@Base+0x1c4>
   15198:	cmp	r0, #33	; 0x21
   1519c:	bne	152a0 <get_boolean_op_value@@Base+0x28c>
   151a0:	ldrd	r0, [r6, #176]	; 0xb0
   151a4:	mov	r5, #8
   151a8:	adds	r0, r0, #1
   151ac:	adc	r1, r1, #0
   151b0:	strd	r0, [r6, #176]	; 0xb0
   151b4:	add	r0, r6, #200	; 0xc8
   151b8:	b	15278 <get_boolean_op_value@@Base+0x264>
   151bc:	ldrd	r0, [r6, #24]
   151c0:	mov	r5, #0
   151c4:	adds	r0, r0, #1
   151c8:	adc	r1, r1, #0
   151cc:	strd	r0, [r6, #24]
   151d0:	add	r0, r6, #40	; 0x28
   151d4:	b	15278 <get_boolean_op_value@@Base+0x264>
   151d8:	ldrd	r0, [r6, #184]	; 0xb8
   151dc:	mov	r5, #6
   151e0:	adds	r0, r0, #1
   151e4:	adc	r1, r1, #0
   151e8:	strd	r0, [r6, #184]	; 0xb8
   151ec:	add	r0, r6, #208	; 0xd0
   151f0:	b	15278 <get_boolean_op_value@@Base+0x264>
   151f4:	ldrd	r0, [r6, #192]	; 0xc0
   151f8:	mov	r5, #7
   151fc:	adds	r0, r0, #1
   15200:	adc	r1, r1, #0
   15204:	strd	r0, [r6, #192]	; 0xc0
   15208:	add	r0, r6, #216	; 0xd8
   1520c:	b	15278 <get_boolean_op_value@@Base+0x264>
   15210:	ldrd	r0, [r6, #48]	; 0x30
   15214:	mov	r5, #1
   15218:	adds	r0, r0, #1
   1521c:	adc	r1, r1, #0
   15220:	strd	r0, [r6, #48]	; 0x30
   15224:	add	r0, r6, #64	; 0x40
   15228:	b	15278 <get_boolean_op_value@@Base+0x264>
   1522c:	ldrd	r0, [r6, #72]	; 0x48
   15230:	adds	r0, r0, #1
   15234:	adc	r1, r1, #0
   15238:	strd	r0, [r6, #72]	; 0x48
   1523c:	add	r0, r6, #88	; 0x58
   15240:	b	15278 <get_boolean_op_value@@Base+0x264>
   15244:	ldrd	r0, [r6, #96]	; 0x60
   15248:	mov	r5, #3
   1524c:	adds	r0, r0, #1
   15250:	adc	r1, r1, #0
   15254:	strd	r0, [r6, #96]	; 0x60
   15258:	add	r0, r6, #112	; 0x70
   1525c:	b	15278 <get_boolean_op_value@@Base+0x264>
   15260:	ldrd	r0, [r6, #120]	; 0x78
   15264:	mov	r5, #4
   15268:	adds	r0, r0, #1
   1526c:	adc	r1, r1, #0
   15270:	strd	r0, [r6, #120]	; 0x78
   15274:	add	r0, r6, #136	; 0x88
   15278:	ldrd	r2, [r0]
   1527c:	adds	r2, r2, #1
   15280:	adc	r3, r3, #0
   15284:	strd	r2, [r0]
   15288:	ldrd	r0, [r6, #224]	; 0xe0
   1528c:	adds	r0, r0, #1
   15290:	adc	r1, r1, #0
   15294:	strd	r0, [r6, #224]	; 0xe0
   15298:	mov	r0, r5
   1529c:	pop	{r4, r5, r6, sl, fp, pc}
   152a0:	ldrd	r0, [r6, #168]	; 0xa8
   152a4:	adds	r0, r0, #1
   152a8:	adc	r1, r1, #0
   152ac:	strd	r0, [r6, #168]	; 0xa8
   152b0:	movw	r0, #49384	; 0xc0e8
   152b4:	movw	r1, #43122	; 0xa872
   152b8:	mov	r2, r4
   152bc:	movt	r0, #2
   152c0:	movt	r1, #1
   152c4:	ldr	r0, [r0]
   152c8:	bl	12038 <fprintf@plt>
   152cc:	mov	r0, #1
   152d0:	bl	12008 <exit@plt>
   152d4:	ldrd	r0, [r6, #152]	; 0x98
   152d8:	adds	r0, r0, #1
   152dc:	adc	r1, r1, #0
   152e0:	strd	r0, [r6, #152]	; 0x98
   152e4:	b	152b0 <get_boolean_op_value@@Base+0x29c>
   152e8:	push	{r4, r5, r6, lr}
   152ec:	sub	sp, sp, #8
   152f0:	movw	r0, #43176	; 0xa8a8
   152f4:	movw	r1, #41285	; 0xa145
   152f8:	movw	r2, #31856	; 0x7c70
   152fc:	movt	r0, #1
   15300:	movt	r1, #1
   15304:	movt	r2, #15338	; 0x3bea
   15308:	bl	16ff8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   1530c:	movw	r0, #43856	; 0xab50
   15310:	movw	r6, #43536	; 0xaa10
   15314:	mov	r5, #0
   15318:	movt	r0, #1
   1531c:	movt	r6, #1
   15320:	add	r4, r0, #4
   15324:	mov	r3, r6
   15328:	ldr	r0, [r3, r5]!
   1532c:	ldr	r1, [r3, #16]
   15330:	str	r1, [sp]
   15334:	ldmib	r3, {r1, r2}
   15338:	ldrb	r3, [r3, #12]
   1533c:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   15340:	ldrd	r0, [r4, #-4]
   15344:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   15348:	add	r5, r5, #20
   1534c:	add	r4, r4, #8
   15350:	cmp	r5, #320	; 0x140
   15354:	bne	15324 <get_boolean_op_value@@Base+0x310>
   15358:	bl	18754 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   1535c:	add	sp, sp, #8
   15360:	pop	{r4, r5, r6, lr}
   15364:	b	194c0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   15368:	push	{fp, lr}
   1536c:	bl	152e8 <get_boolean_op_value@@Base+0x2d4>
   15370:	movw	ip, #51504	; 0xc930
   15374:	vmov.i32	q8, #0	; 0x00000000
   15378:	mov	r0, #36	; 0x24
   1537c:	mov	r1, #0
   15380:	movt	ip, #2
   15384:	mov	r3, ip
   15388:	str	r1, [ip, #32]
   1538c:	vst1.64	{d16-d17}, [r3 :128], r0
   15390:	str	r1, [r3]
   15394:	movw	r3, #51264	; 0xc840
   15398:	movt	r3, #2
   1539c:	vst1.64	{d16-d17}, [r3 :128]
   153a0:	movw	r3, #51248	; 0xc830
   153a4:	movt	r3, #2
   153a8:	vst1.64	{d16-d17}, [r3 :128]
   153ac:	movw	r3, #51280	; 0xc850
   153b0:	movt	r3, #2
   153b4:	vst1.64	{d16-d17}, [r3 :128]
   153b8:	movw	r3, #51296	; 0xc860
   153bc:	movt	r3, #2
   153c0:	vst1.64	{d16-d17}, [r3 :128]
   153c4:	movw	r3, #51312	; 0xc870
   153c8:	movt	r3, #2
   153cc:	vst1.64	{d16-d17}, [r3 :128]
   153d0:	movw	r3, #51328	; 0xc880
   153d4:	movt	r3, #2
   153d8:	vst1.64	{d16-d17}, [r3 :128]
   153dc:	movw	r3, #51344	; 0xc890
   153e0:	movt	r3, #2
   153e4:	vst1.64	{d16-d17}, [r3 :128]
   153e8:	movw	r3, #51360	; 0xc8a0
   153ec:	movt	r3, #2
   153f0:	vst1.64	{d16-d17}, [r3 :128]
   153f4:	movw	r3, #51376	; 0xc8b0
   153f8:	movt	r3, #2
   153fc:	add	r2, r3, #16
   15400:	str	r1, [r3, #112]	; 0x70
   15404:	vst1.64	{d16-d17}, [r2 :128]
   15408:	add	r2, r3, #32
   1540c:	vst1.64	{d16-d17}, [r2 :128]
   15410:	add	r2, r3, #48	; 0x30
   15414:	vst1.64	{d16-d17}, [r2 :128]
   15418:	add	r2, r3, #64	; 0x40
   1541c:	vst1.64	{d16-d17}, [r2 :128]
   15420:	add	r2, r3, #80	; 0x50
   15424:	vst1.64	{d16-d17}, [r2 :128]
   15428:	add	r2, r3, #96	; 0x60
   1542c:	vst1.64	{d16-d17}, [r2 :128]
   15430:	add	r2, ip, #16
   15434:	vst1.64	{d16-d17}, [r2 :128]
   15438:	mov	r2, #116	; 0x74
   1543c:	vst1.64	{d16-d17}, [r3 :128], r2
   15440:	movw	r2, #51552	; 0xc960
   15444:	movt	r2, #2
   15448:	str	r1, [r3]
   1544c:	add	r3, r2, #16
   15450:	str	r1, [r2, #32]
   15454:	vst1.64	{d16-d17}, [r2 :128], r0
   15458:	str	r1, [r2]
   1545c:	movw	r2, #51600	; 0xc990
   15460:	vst1.64	{d16-d17}, [r3 :128]
   15464:	movt	r2, #2
   15468:	mov	r3, r2
   1546c:	str	r1, [r2, #32]
   15470:	vst1.64	{d16-d17}, [r3 :128], r0
   15474:	str	r1, [r3]
   15478:	add	r3, r2, #16
   1547c:	movw	r2, #51648	; 0xc9c0
   15480:	movt	r2, #2
   15484:	vst1.64	{d16-d17}, [r3 :128]
   15488:	add	r3, r2, #16
   1548c:	str	r1, [r2, #32]
   15490:	vst1.64	{d16-d17}, [r2 :128], r0
   15494:	str	r1, [r2]
   15498:	movw	r2, #51696	; 0xc9f0
   1549c:	vst1.64	{d16-d17}, [r3 :128]
   154a0:	movt	r2, #2
   154a4:	mov	r3, r2
   154a8:	str	r1, [r2, #32]
   154ac:	add	r2, r2, #16
   154b0:	vst1.64	{d16-d17}, [r2 :128]
   154b4:	movw	r2, #51744	; 0xca20
   154b8:	vst1.64	{d16-d17}, [r3 :128], r0
   154bc:	movt	r2, #2
   154c0:	str	r1, [r3]
   154c4:	add	r3, r2, #16
   154c8:	str	r1, [r2, #32]
   154cc:	vst1.64	{d16-d17}, [r2 :128], r0
   154d0:	movw	r0, #51792	; 0xca50
   154d4:	movt	r0, #2
   154d8:	str	r1, [r2]
   154dc:	mov	r1, #0
   154e0:	mov	r2, #232	; 0xe8
   154e4:	vst1.64	{d16-d17}, [r3 :128]
   154e8:	bl	12068 <memset@plt>
   154ec:	pop	{fp, pc}
   154f0:	movw	r0, #21224	; 0x52e8
   154f4:	movw	r1, #21352	; 0x5368
   154f8:	movt	r0, #1
   154fc:	movt	r1, #1
   15500:	b	19974 <__gcov_flush@@Base+0xb8>
   15504:	andeq	r0, r0, r0

00015508 <init_grammar@@Base>:
   15508:	movw	r2, #52032	; 0xcb40
   1550c:	add	r3, pc, #28
   15510:	movt	r2, #2
   15514:	vld1.64	{d16-d17}, [r3]
   15518:	vld1.64	{d18-d19}, [r2 :128]
   1551c:	vadd.i64	q8, q9, q8
   15520:	vst1.64	{d16-d17}, [r2 :128]
   15524:	str	r1, [r0]
   15528:	bx	lr
   1552c:	nop	{0}
   15530:	andeq	r0, r0, r1
   15534:	andeq	r0, r0, r0
   15538:	andeq	r0, r0, r1
   1553c:	andeq	r0, r0, r0

00015540 <destroy_grammar@@Base>:
   15540:	movw	r0, #52048	; 0xcb50
   15544:	add	r1, pc, #20
   15548:	movt	r0, #2
   1554c:	vld1.64	{d16-d17}, [r1]
   15550:	vld1.64	{d18-d19}, [r0 :128]
   15554:	vadd.i64	q8, q9, q8
   15558:	vst1.64	{d16-d17}, [r0 :128]
   1555c:	bx	lr
   15560:	andeq	r0, r0, r1
   15564:	andeq	r0, r0, r0
   15568:	andeq	r0, r0, r1
   1556c:	andeq	r0, r0, r0

00015570 <build_ast@@Base>:
   15570:	movw	r1, #52064	; 0xcb60
   15574:	add	r2, pc, #20
   15578:	movt	r1, #2
   1557c:	vld1.64	{d16-d17}, [r2]
   15580:	vld1.64	{d18-d19}, [r1 :128]
   15584:	vadd.i64	q8, q9, q8
   15588:	vst1.64	{d16-d17}, [r1 :128]
   1558c:	b	155a0 <read_function_ast_node@@Base>
   15590:	andeq	r0, r0, r1
   15594:	andeq	r0, r0, r0
   15598:	andeq	r0, r0, r1
   1559c:	andeq	r0, r0, r0

000155a0 <read_function_ast_node@@Base>:
   155a0:	push	{r4, r5, r6, r7, fp, lr}
   155a4:	add	fp, sp, #16
   155a8:	movw	r7, #52080	; 0xcb70
   155ac:	mov	r4, r0
   155b0:	movt	r7, #2
   155b4:	ldrd	r0, [r7]
   155b8:	adds	r0, r0, #1
   155bc:	adc	r1, r1, #0
   155c0:	strd	r0, [r7]
   155c4:	ldr	r0, [r4]
   155c8:	bl	131d8 <next@@Base>
   155cc:	ldr	r1, [r0]
   155d0:	cmp	r1, #0
   155d4:	beq	155f4 <read_function_ast_node@@Base+0x54>
   155d8:	ldrd	r0, [r7, #8]
   155dc:	mov	r4, #0
   155e0:	adds	r0, r0, #1
   155e4:	adc	r1, r1, #0
   155e8:	strd	r0, [r7, #8]
   155ec:	add	r0, r7, #24
   155f0:	b	15704 <read_function_ast_node@@Base+0x164>
   155f4:	ldrd	r2, [r7, #16]
   155f8:	adds	r2, r2, #1
   155fc:	adc	r3, r3, #0
   15600:	strd	r2, [r7, #16]
   15604:	bl	12aa8 <free_token_int_type@@Base>
   15608:	ldr	r0, [r4]
   1560c:	bl	131d8 <next@@Base>
   15610:	mov	r5, r0
   15614:	ldr	r0, [r0]
   15618:	cmp	r0, #2
   1561c:	bne	156b4 <read_function_ast_node@@Base+0x114>
   15620:	ldrd	r0, [r7, #40]	; 0x28
   15624:	adds	r0, r0, #1
   15628:	adc	r1, r1, #0
   1562c:	strd	r0, [r7, #40]	; 0x28
   15630:	ldr	r0, [r4]
   15634:	bl	131d8 <next@@Base>
   15638:	ldr	r1, [r0]
   1563c:	cmp	r1, #3
   15640:	bne	156d0 <read_function_ast_node@@Base+0x130>
   15644:	ldrd	r2, [r7, #64]	; 0x40
   15648:	adds	r2, r2, #1
   1564c:	adc	r3, r3, #0
   15650:	strd	r2, [r7, #64]	; 0x40
   15654:	bl	12b38 <free_token_opar@@Base>
   15658:	ldr	r0, [r4]
   1565c:	bl	131d8 <next@@Base>
   15660:	ldr	r1, [r0]
   15664:	cmp	r1, #4
   15668:	bne	156ec <read_function_ast_node@@Base+0x14c>
   1566c:	ldrd	r2, [r7, #88]	; 0x58
   15670:	adds	r2, r2, #1
   15674:	adc	r3, r3, #0
   15678:	strd	r2, [r7, #88]	; 0x58
   1567c:	bl	12b68 <free_token_cpar@@Base>
   15680:	mov	r0, r4
   15684:	bl	1572c <read_body@@Base>
   15688:	mov	r6, r0
   1568c:	mov	r0, #16
   15690:	bl	11fcc <malloc@plt>
   15694:	ldr	r1, [r5, #4]
   15698:	mov	r2, r6
   1569c:	mov	r4, r0
   156a0:	bl	149e0 <init_node_function@@Base>
   156a4:	mov	r0, r5
   156a8:	bl	12b08 <free_token_function@@Base>
   156ac:	add	r0, r7, #104	; 0x68
   156b0:	b	15704 <read_function_ast_node@@Base+0x164>
   156b4:	ldrd	r0, [r7, #32]
   156b8:	mov	r4, #0
   156bc:	adds	r0, r0, #1
   156c0:	adc	r1, r1, #0
   156c4:	strd	r0, [r7, #32]
   156c8:	add	r0, r7, #48	; 0x30
   156cc:	b	15704 <read_function_ast_node@@Base+0x164>
   156d0:	ldrd	r0, [r7, #56]	; 0x38
   156d4:	mov	r4, #0
   156d8:	adds	r0, r0, #1
   156dc:	adc	r1, r1, #0
   156e0:	strd	r0, [r7, #56]	; 0x38
   156e4:	add	r0, r7, #72	; 0x48
   156e8:	b	15704 <read_function_ast_node@@Base+0x164>
   156ec:	ldrd	r0, [r7, #80]	; 0x50
   156f0:	mov	r4, #0
   156f4:	adds	r0, r0, #1
   156f8:	adc	r1, r1, #0
   156fc:	strd	r0, [r7, #80]	; 0x50
   15700:	add	r0, r7, #96	; 0x60
   15704:	ldrd	r2, [r0]
   15708:	adds	r2, r2, #1
   1570c:	adc	r3, r3, #0
   15710:	strd	r2, [r0]
   15714:	ldrd	r0, [r7, #112]	; 0x70
   15718:	adds	r0, r0, #1
   1571c:	adc	r1, r1, #0
   15720:	strd	r0, [r7, #112]	; 0x70
   15724:	mov	r0, r4
   15728:	pop	{r4, r5, r6, r7, fp, pc}

0001572c <read_body@@Base>:
   1572c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15730:	add	fp, sp, #28
   15734:	sub	sp, sp, #4
   15738:	movw	r7, #52208	; 0xcbf0
   1573c:	mov	r4, r0
   15740:	movt	r7, #2
   15744:	ldrd	r0, [r7]
   15748:	adds	r0, r0, #1
   1574c:	adc	r1, r1, #0
   15750:	strd	r0, [r7]
   15754:	ldr	r0, [r4]
   15758:	bl	131d8 <next@@Base>
   1575c:	ldr	r1, [r0]
   15760:	cmp	r1, #5
   15764:	bne	15900 <read_body@@Base+0x1d4>
   15768:	ldrd	r2, [r7, #16]
   1576c:	adds	r2, r2, #1
   15770:	adc	r3, r3, #0
   15774:	strd	r2, [r7, #16]
   15778:	bl	12b98 <free_token_obra@@Base>
   1577c:	ldr	r0, [r4]
   15780:	bl	131d8 <next@@Base>
   15784:	mov	r1, r0
   15788:	ldr	r0, [r7, #32]
   1578c:	ldr	r3, [r7, #36]	; 0x24
   15790:	mov	sl, #0
   15794:	adds	r0, r0, #1
   15798:	adc	r3, r3, #0
   1579c:	str	r0, [r7, #32]
   157a0:	str	r3, [r7, #36]	; 0x24
   157a4:	ldr	r0, [r1]
   157a8:	cmp	r0, #6
   157ac:	beq	158d8 <read_body@@Base+0x1ac>
   157b0:	add	r2, r7, #128	; 0x80
   157b4:	mov	r5, #0
   157b8:	add	r9, r7, #88	; 0x58
   157bc:	mov	sl, #0
   157c0:	str	r2, [sp]
   157c4:	ldrd	r2, [r7, #40]	; 0x28
   157c8:	adds	r2, r2, #1
   157cc:	adc	r3, r3, #0
   157d0:	cmp	r0, #10
   157d4:	strd	r2, [r7, #40]	; 0x28
   157d8:	beq	15818 <read_body@@Base+0xec>
   157dc:	cmp	r0, #7
   157e0:	bne	1591c <read_body@@Base+0x1f0>
   157e4:	ldr	r0, [r7, #64]	; 0x40
   157e8:	ldr	r3, [r7, #68]	; 0x44
   157ec:	adds	r0, r0, #1
   157f0:	str	r0, [r7, #64]	; 0x40
   157f4:	adc	r3, r3, #0
   157f8:	mov	r0, r1
   157fc:	str	r3, [r7, #68]	; 0x44
   15800:	bl	12bf8 <free_token_return@@Base>
   15804:	mov	r0, r4
   15808:	add	r8, r7, #80	; 0x50
   1580c:	bl	1596c <read_return_expression@@Base>
   15810:	mov	r6, r0
   15814:	b	15848 <read_body@@Base+0x11c>
   15818:	ldr	r0, [r7, #72]	; 0x48
   1581c:	ldr	r3, [r7, #76]	; 0x4c
   15820:	adds	r0, r0, #1
   15824:	str	r0, [r7, #72]	; 0x48
   15828:	adc	r3, r3, #0
   1582c:	mov	r0, r1
   15830:	str	r3, [r7, #76]	; 0x4c
   15834:	bl	12c88 <free_token_if@@Base>
   15838:	mov	r0, r4
   1583c:	bl	15a74 <read_if_statement@@Base>
   15840:	mov	r6, r0
   15844:	mov	r8, r9
   15848:	ldrd	r0, [r8]
   1584c:	adds	r0, r0, #1
   15850:	adc	r1, r1, #0
   15854:	cmp	sl, #0
   15858:	strd	r0, [r8]
   1585c:	beq	1587c <read_body@@Base+0x150>
   15860:	ldrd	r0, [r7, #104]	; 0x68
   15864:	adds	r0, r0, #1
   15868:	adc	r1, r1, #0
   1586c:	strd	r0, [r7, #104]	; 0x68
   15870:	str	r6, [r5, #4]
   15874:	add	r0, r7, #120	; 0x78
   15878:	b	15894 <read_body@@Base+0x168>
   1587c:	ldrd	r0, [r7, #112]	; 0x70
   15880:	mov	sl, r6
   15884:	adds	r0, r0, #1
   15888:	adc	r1, r1, #0
   1588c:	strd	r0, [r7, #112]	; 0x70
   15890:	ldr	r0, [sp]
   15894:	ldrd	r2, [r0]
   15898:	adds	r2, r2, #1
   1589c:	adc	r3, r3, #0
   158a0:	strd	r2, [r0]
   158a4:	ldr	r0, [r4]
   158a8:	bl	131d8 <next@@Base>
   158ac:	mov	r1, r0
   158b0:	ldr	r0, [r7, #136]	; 0x88
   158b4:	ldr	r3, [r7, #140]	; 0x8c
   158b8:	mov	r5, r6
   158bc:	adds	r0, r0, #1
   158c0:	adc	r3, r3, #0
   158c4:	str	r0, [r7, #136]	; 0x88
   158c8:	str	r3, [r7, #140]	; 0x8c
   158cc:	ldr	r0, [r1]
   158d0:	cmp	r0, #6
   158d4:	bne	157c4 <read_body@@Base+0x98>
   158d8:	ldr	r0, [r7, #48]	; 0x30
   158dc:	ldr	r3, [r7, #52]	; 0x34
   158e0:	adds	r0, r0, #1
   158e4:	str	r0, [r7, #48]	; 0x30
   158e8:	adc	r3, r3, #0
   158ec:	mov	r0, r1
   158f0:	str	r3, [r7, #52]	; 0x34
   158f4:	bl	12bc8 <free_token_cbra@@Base>
   158f8:	add	r0, r7, #144	; 0x90
   158fc:	b	15940 <read_body@@Base+0x214>
   15900:	ldrd	r0, [r7, #8]
   15904:	mov	sl, #0
   15908:	adds	r0, r0, #1
   1590c:	adc	r1, r1, #0
   15910:	strd	r0, [r7, #8]
   15914:	add	r0, r7, #24
   15918:	b	15940 <read_body@@Base+0x214>
   1591c:	ldr	r0, [r7, #56]	; 0x38
   15920:	ldr	r3, [r7, #60]	; 0x3c
   15924:	adds	r0, r0, #1
   15928:	adc	r3, r3, #0
   1592c:	str	r0, [r7, #56]	; 0x38
   15930:	str	r3, [r7, #60]	; 0x3c
   15934:	ldr	r0, [r4]
   15938:	bl	13068 <push_back@@Base>
   1593c:	add	r0, r7, #96	; 0x60
   15940:	ldrd	r2, [r0]
   15944:	adds	r2, r2, #1
   15948:	adc	r3, r3, #0
   1594c:	strd	r2, [r0]
   15950:	ldrd	r0, [r7, #152]	; 0x98
   15954:	adds	r0, r0, #1
   15958:	adc	r1, r1, #0
   1595c:	strd	r0, [r7, #152]	; 0x98
   15960:	mov	r0, sl
   15964:	sub	sp, fp, #28
   15968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001596c <read_return_expression@@Base>:
   1596c:	push	{r4, r5, r6, r7, fp, lr}
   15970:	add	fp, sp, #16
   15974:	movw	r7, #52368	; 0xcc90
   15978:	mov	r5, r0
   1597c:	movt	r7, #2
   15980:	ldrd	r0, [r7]
   15984:	adds	r0, r0, #1
   15988:	adc	r1, r1, #0
   1598c:	strd	r0, [r7]
   15990:	ldr	r0, [r5]
   15994:	bl	131d8 <next@@Base>
   15998:	mov	r4, r0
   1599c:	ldr	r0, [r0]
   159a0:	cmp	r0, #1
   159a4:	bne	15a18 <read_return_expression@@Base+0xac>
   159a8:	ldrd	r0, [r7, #16]
   159ac:	adds	r0, r0, #1
   159b0:	adc	r1, r1, #0
   159b4:	strd	r0, [r7, #16]
   159b8:	mov	r0, #12
   159bc:	bl	11fcc <malloc@plt>
   159c0:	ldr	r1, [r4, #4]
   159c4:	mov	r6, r0
   159c8:	bl	14970 <init_node_int@@Base>
   159cc:	mov	r0, r4
   159d0:	bl	12ad8 <free_token_int_value@@Base>
   159d4:	mov	r0, #12
   159d8:	bl	11fcc <malloc@plt>
   159dc:	mov	r1, r6
   159e0:	mov	r4, r0
   159e4:	bl	14a58 <init_node_return@@Base>
   159e8:	ldr	r0, [r5]
   159ec:	bl	131d8 <next@@Base>
   159f0:	ldr	r1, [r0]
   159f4:	cmp	r1, #8
   159f8:	bne	15a34 <read_return_expression@@Base+0xc8>
   159fc:	ldrd	r2, [r7, #40]	; 0x28
   15a00:	adds	r2, r2, #1
   15a04:	adc	r3, r3, #0
   15a08:	strd	r2, [r7, #40]	; 0x28
   15a0c:	bl	12c28 <free_token_semicolon@@Base>
   15a10:	add	r0, r7, #56	; 0x38
   15a14:	b	15a4c <read_return_expression@@Base+0xe0>
   15a18:	ldrd	r0, [r7, #8]
   15a1c:	mov	r4, #0
   15a20:	adds	r0, r0, #1
   15a24:	adc	r1, r1, #0
   15a28:	strd	r0, [r7, #8]
   15a2c:	add	r0, r7, #24
   15a30:	b	15a4c <read_return_expression@@Base+0xe0>
   15a34:	ldrd	r0, [r7, #32]
   15a38:	mov	r4, #0
   15a3c:	adds	r0, r0, #1
   15a40:	adc	r1, r1, #0
   15a44:	strd	r0, [r7, #32]
   15a48:	add	r0, r7, #48	; 0x30
   15a4c:	ldrd	r2, [r0]
   15a50:	adds	r2, r2, #1
   15a54:	adc	r3, r3, #0
   15a58:	strd	r2, [r0]
   15a5c:	ldrd	r0, [r7, #64]	; 0x40
   15a60:	adds	r0, r0, #1
   15a64:	adc	r1, r1, #0
   15a68:	strd	r0, [r7, #64]	; 0x40
   15a6c:	mov	r0, r4
   15a70:	pop	{r4, r5, r6, r7, fp, pc}

00015a74 <read_if_statement@@Base>:
   15a74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a78:	add	fp, sp, #24
   15a7c:	movw	r4, #52448	; 0xcce0
   15a80:	mov	r5, r0
   15a84:	movt	r4, #2
   15a88:	ldrd	r0, [r4]
   15a8c:	adds	r0, r0, #1
   15a90:	adc	r1, r1, #0
   15a94:	strd	r0, [r4]
   15a98:	ldr	r0, [r5]
   15a9c:	bl	131d8 <next@@Base>
   15aa0:	ldr	r1, [r0]
   15aa4:	cmp	r1, #3
   15aa8:	bne	15b24 <read_if_statement@@Base+0xb0>
   15aac:	ldrd	r2, [r4, #16]
   15ab0:	adds	r2, r2, #1
   15ab4:	adc	r3, r3, #0
   15ab8:	strd	r2, [r4, #16]
   15abc:	bl	12b38 <free_token_opar@@Base>
   15ac0:	mov	r0, r5
   15ac4:	bl	15bc0 <read_boolean_expression@@Base>
   15ac8:	mov	r8, r0
   15acc:	mov	r0, r5
   15ad0:	bl	1572c <read_body@@Base>
   15ad4:	mov	r9, r0
   15ad8:	ldr	r0, [r5]
   15adc:	bl	131d8 <next@@Base>
   15ae0:	mov	r1, r0
   15ae4:	ldr	r0, [r0]
   15ae8:	cmp	r0, #11
   15aec:	bne	15b40 <read_if_statement@@Base+0xcc>
   15af0:	ldr	r0, [r4, #32]
   15af4:	ldr	r3, [r4, #36]	; 0x24
   15af8:	adds	r0, r0, #1
   15afc:	str	r0, [r4, #32]
   15b00:	adc	r3, r3, #0
   15b04:	mov	r0, r1
   15b08:	str	r3, [r4, #36]	; 0x24
   15b0c:	bl	12cb8 <free_token_else@@Base>
   15b10:	mov	r0, r5
   15b14:	add	r6, r4, #48	; 0x30
   15b18:	bl	1572c <read_body@@Base>
   15b1c:	mov	r7, r0
   15b20:	b	15b68 <read_if_statement@@Base+0xf4>
   15b24:	ldrd	r0, [r4, #8]
   15b28:	mov	r5, #0
   15b2c:	adds	r0, r0, #1
   15b30:	adc	r1, r1, #0
   15b34:	strd	r0, [r4, #8]
   15b38:	add	r0, r4, #24
   15b3c:	b	15b98 <read_if_statement@@Base+0x124>
   15b40:	ldr	r0, [r4, #40]	; 0x28
   15b44:	ldr	r3, [r4, #44]	; 0x2c
   15b48:	adds	r0, r0, #1
   15b4c:	adc	r3, r3, #0
   15b50:	str	r0, [r4, #40]	; 0x28
   15b54:	str	r3, [r4, #44]	; 0x2c
   15b58:	ldr	r0, [r5]
   15b5c:	bl	13068 <push_back@@Base>
   15b60:	add	r6, r4, #56	; 0x38
   15b64:	mov	r7, #0
   15b68:	ldrd	r0, [r6]
   15b6c:	adds	r0, r0, #1
   15b70:	adc	r1, r1, #0
   15b74:	strd	r0, [r6]
   15b78:	mov	r0, #20
   15b7c:	bl	11fcc <malloc@plt>
   15b80:	mov	r1, r8
   15b84:	mov	r2, r9
   15b88:	mov	r3, r7
   15b8c:	mov	r5, r0
   15b90:	bl	14ac8 <init_node_if@@Base>
   15b94:	add	r0, r4, #64	; 0x40
   15b98:	ldrd	r2, [r0]
   15b9c:	adds	r2, r2, #1
   15ba0:	adc	r3, r3, #0
   15ba4:	strd	r2, [r0]
   15ba8:	ldrd	r0, [r4, #72]	; 0x48
   15bac:	adds	r0, r0, #1
   15bb0:	adc	r1, r1, #0
   15bb4:	strd	r0, [r4, #72]	; 0x48
   15bb8:	mov	r0, r5
   15bbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00015bc0 <read_boolean_expression@@Base>:
   15bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc4:	add	fp, sp, #28
   15bc8:	sub	sp, sp, #4
   15bcc:	movw	r6, #52528	; 0xcd30
   15bd0:	mov	r5, r0
   15bd4:	mov	r4, #0
   15bd8:	movt	r6, #2
   15bdc:	str	r4, [sp]
   15be0:	ldrd	r0, [r6]
   15be4:	adds	r0, r0, #1
   15be8:	adc	r1, r1, #0
   15bec:	strd	r0, [r6]
   15bf0:	ldr	r0, [r5]
   15bf4:	bl	131d8 <next@@Base>
   15bf8:	mov	r1, r0
   15bfc:	ldr	r0, [r6, #8]
   15c00:	ldr	r3, [r6, #12]
   15c04:	adds	r0, r0, #1
   15c08:	adc	r3, r3, #0
   15c0c:	str	r0, [r6, #8]
   15c10:	str	r3, [r6, #12]
   15c14:	ldr	r0, [r1]
   15c18:	cmp	r0, #4
   15c1c:	beq	15d34 <read_boolean_expression@@Base+0x174>
   15c20:	mov	r4, #0
   15c24:	mov	r9, #1
   15c28:	add	sl, r6, #72	; 0x48
   15c2c:	mov	r8, sp
   15c30:	ldrd	r2, [r6, #16]
   15c34:	adds	r2, r2, #1
   15c38:	adc	r3, r3, #0
   15c3c:	cmp	r0, #12
   15c40:	strd	r2, [r6, #16]
   15c44:	beq	15cc8 <read_boolean_expression@@Base+0x108>
   15c48:	cmp	r0, #3
   15c4c:	beq	15c98 <read_boolean_expression@@Base+0xd8>
   15c50:	cmp	r0, #1
   15c54:	bne	15d78 <read_boolean_expression@@Base+0x1b8>
   15c58:	ldr	r0, [r6, #40]	; 0x28
   15c5c:	ldr	r3, [r6, #44]	; 0x2c
   15c60:	adds	r0, r0, #1
   15c64:	adc	r3, r3, #0
   15c68:	str	r0, [r6, #40]	; 0x28
   15c6c:	str	r3, [r6, #44]	; 0x2c
   15c70:	ldr	r0, [r5]
   15c74:	bl	13068 <push_back@@Base>
   15c78:	mov	r0, r5
   15c7c:	mov	r1, r4
   15c80:	mov	r2, r8
   15c84:	mov	r3, r7
   15c88:	bl	15db0 <read_single_boolean_expression@@Base>
   15c8c:	mov	r4, r0
   15c90:	add	r0, r6, #64	; 0x40
   15c94:	b	15cf4 <read_boolean_expression@@Base+0x134>
   15c98:	ldrd	r0, [r6, #56]	; 0x38
   15c9c:	mov	r2, r8
   15ca0:	mov	r3, r7
   15ca4:	adds	r0, r0, #1
   15ca8:	adc	r1, r1, #0
   15cac:	strd	r0, [r6, #56]	; 0x38
   15cb0:	mov	r0, r5
   15cb4:	mov	r1, r4
   15cb8:	bl	15db0 <read_single_boolean_expression@@Base>
   15cbc:	mov	r4, r0
   15cc0:	add	r0, r6, #80	; 0x50
   15cc4:	b	15cf4 <read_boolean_expression@@Base+0x134>
   15cc8:	ldr	r0, [r6, #48]	; 0x30
   15ccc:	ldr	r3, [r6, #52]	; 0x34
   15cd0:	adds	r0, r0, #1
   15cd4:	str	r0, [r6, #48]	; 0x30
   15cd8:	adc	r3, r3, #0
   15cdc:	mov	r0, r1
   15ce0:	str	r3, [r6, #52]	; 0x34
   15ce4:	bl	15014 <get_boolean_op_value@@Base>
   15ce8:	mov	r7, r0
   15cec:	mov	r0, sl
   15cf0:	str	r9, [sp]
   15cf4:	ldrd	r2, [r0]
   15cf8:	adds	r2, r2, #1
   15cfc:	adc	r3, r3, #0
   15d00:	strd	r2, [r0]
   15d04:	ldr	r0, [r5]
   15d08:	bl	131d8 <next@@Base>
   15d0c:	mov	r1, r0
   15d10:	ldr	r0, [r6, #88]	; 0x58
   15d14:	ldr	r3, [r6, #92]	; 0x5c
   15d18:	adds	r0, r0, #1
   15d1c:	adc	r3, r3, #0
   15d20:	str	r0, [r6, #88]	; 0x58
   15d24:	str	r3, [r6, #92]	; 0x5c
   15d28:	ldr	r0, [r1]
   15d2c:	cmp	r0, #4
   15d30:	bne	15c30 <read_boolean_expression@@Base+0x70>
   15d34:	ldr	r0, [r6, #24]
   15d38:	ldr	r3, [r6, #28]
   15d3c:	ldr	r2, [r6, #96]	; 0x60
   15d40:	ldr	r5, [r6, #100]	; 0x64
   15d44:	adds	r0, r0, #1
   15d48:	adc	r3, r3, #0
   15d4c:	adds	r2, r2, #1
   15d50:	str	r2, [r6, #96]	; 0x60
   15d54:	str	r0, [r6, #24]
   15d58:	adc	r0, r5, #0
   15d5c:	str	r3, [r6, #28]
   15d60:	str	r0, [r6, #100]	; 0x64
   15d64:	mov	r0, r1
   15d68:	bl	12b68 <free_token_cpar@@Base>
   15d6c:	mov	r0, r4
   15d70:	sub	sp, fp, #28
   15d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d78:	ldrd	r0, [r6, #32]
   15d7c:	mov	r2, #1
   15d80:	adds	r0, r0, #1
   15d84:	adc	r1, r1, #0
   15d88:	strd	r0, [r6, #32]
   15d8c:	movw	r0, #49384	; 0xc0e8
   15d90:	mov	r1, #33	; 0x21
   15d94:	movt	r0, #2
   15d98:	ldr	r3, [r0]
   15d9c:	movw	r0, #43984	; 0xabd0
   15da0:	movt	r0, #1
   15da4:	bl	11fa8 <fwrite@plt>
   15da8:	mov	r0, #1
   15dac:	bl	12008 <exit@plt>

00015db0 <read_single_boolean_expression@@Base>:
   15db0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15db4:	add	fp, sp, #24
   15db8:	movw	r5, #52640	; 0xcda0
   15dbc:	mov	r8, r3
   15dc0:	mov	r4, r2
   15dc4:	movt	r5, #2
   15dc8:	ldrd	r2, [r5]
   15dcc:	adds	r2, r2, #1
   15dd0:	adc	r3, r3, #0
   15dd4:	cmp	r1, #0
   15dd8:	strd	r2, [r5]
   15ddc:	beq	15e40 <read_single_boolean_expression@@Base+0x90>
   15de0:	ldrd	r2, [r5, #16]
   15de4:	adds	r2, r2, #1
   15de8:	adc	r3, r3, #0
   15dec:	strd	r2, [r5, #16]
   15df0:	ldr	r1, [r4]
   15df4:	cmp	r1, #0
   15df8:	beq	15e84 <read_single_boolean_expression@@Base+0xd4>
   15dfc:	ldrd	r2, [r5, #32]
   15e00:	adds	r2, r2, #1
   15e04:	adc	r3, r3, #0
   15e08:	strd	r2, [r5, #32]
   15e0c:	bl	15ebc <read_boolean_binary_expression@@Base>
   15e10:	mov	r7, r0
   15e14:	mov	r0, #20
   15e18:	bl	11fcc <malloc@plt>
   15e1c:	mov	r1, r8
   15e20:	mov	r2, #0
   15e24:	mov	r3, r7
   15e28:	mov	r6, r0
   15e2c:	mov	r9, #0
   15e30:	bl	14b38 <init_node_boolean_operator@@Base>
   15e34:	str	r9, [r4]
   15e38:	add	r4, r5, #48	; 0x30
   15e3c:	b	15e5c <read_single_boolean_expression@@Base+0xac>
   15e40:	ldrd	r2, [r5, #8]
   15e44:	add	r4, r5, #24
   15e48:	adds	r2, r2, #1
   15e4c:	adc	r3, r3, #0
   15e50:	strd	r2, [r5, #8]
   15e54:	bl	15ebc <read_boolean_binary_expression@@Base>
   15e58:	mov	r6, r0
   15e5c:	ldrd	r0, [r4]
   15e60:	adds	r0, r0, #1
   15e64:	adc	r1, r1, #0
   15e68:	strd	r0, [r4]
   15e6c:	ldrd	r0, [r5, #56]	; 0x38
   15e70:	adds	r0, r0, #1
   15e74:	adc	r1, r1, #0
   15e78:	strd	r0, [r5, #56]	; 0x38
   15e7c:	mov	r0, r6
   15e80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e84:	ldrd	r0, [r5, #40]	; 0x28
   15e88:	adds	r0, r0, #1
   15e8c:	adc	r1, r1, #0
   15e90:	strd	r0, [r5, #40]	; 0x28
   15e94:	movw	r0, #49384	; 0xc0e8
   15e98:	mov	r1, #4
   15e9c:	movt	r0, #2
   15ea0:	ldr	r2, [r1]
   15ea4:	movw	r1, #44018	; 0xabf2
   15ea8:	movt	r1, #1
   15eac:	ldr	r0, [r0]
   15eb0:	bl	12038 <fprintf@plt>
   15eb4:	mov	r0, #1
   15eb8:	bl	12008 <exit@plt>

00015ebc <read_boolean_binary_expression@@Base>:
   15ebc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ec0:	add	fp, sp, #24
   15ec4:	movw	r4, #52704	; 0xcde0
   15ec8:	mov	r5, r0
   15ecc:	movt	r4, #2
   15ed0:	ldrd	r0, [r4]
   15ed4:	adds	r0, r0, #1
   15ed8:	adc	r1, r1, #0
   15edc:	strd	r0, [r4]
   15ee0:	ldr	r0, [r5]
   15ee4:	bl	131d8 <next@@Base>
   15ee8:	mov	r6, r0
   15eec:	ldr	r0, [r0]
   15ef0:	cmp	r0, #1
   15ef4:	bne	15fc8 <read_boolean_binary_expression@@Base+0x10c>
   15ef8:	ldrd	r0, [r4, #16]
   15efc:	adds	r0, r0, #1
   15f00:	adc	r1, r1, #0
   15f04:	strd	r0, [r4, #16]
   15f08:	mov	r0, #12
   15f0c:	bl	11fcc <malloc@plt>
   15f10:	ldr	r1, [r6, #4]
   15f14:	mov	r8, r0
   15f18:	bl	14970 <init_node_int@@Base>
   15f1c:	mov	r0, r6
   15f20:	bl	12ad8 <free_token_int_value@@Base>
   15f24:	ldr	r0, [r5]
   15f28:	bl	131d8 <next@@Base>
   15f2c:	mov	r7, r0
   15f30:	ldr	r0, [r0]
   15f34:	cmp	r0, #12
   15f38:	bne	16010 <read_boolean_binary_expression@@Base+0x154>
   15f3c:	ldrd	r0, [r4, #64]	; 0x40
   15f40:	adds	r0, r0, #1
   15f44:	adc	r1, r1, #0
   15f48:	strd	r0, [r4, #64]	; 0x40
   15f4c:	mov	r0, r7
   15f50:	bl	15014 <get_boolean_op_value@@Base>
   15f54:	mov	r6, r0
   15f58:	mov	r0, r7
   15f5c:	bl	12ce8 <free_token_boolean_op@@Base>
   15f60:	ldr	r0, [r5]
   15f64:	bl	131d8 <next@@Base>
   15f68:	mov	r5, r0
   15f6c:	ldr	r0, [r0]
   15f70:	cmp	r0, #1
   15f74:	bne	1604c <read_boolean_binary_expression@@Base+0x190>
   15f78:	ldrd	r0, [r4, #88]	; 0x58
   15f7c:	adds	r0, r0, #1
   15f80:	adc	r1, r1, #0
   15f84:	strd	r0, [r4, #88]	; 0x58
   15f88:	mov	r0, #12
   15f8c:	bl	11fcc <malloc@plt>
   15f90:	ldr	r1, [r5, #4]
   15f94:	mov	r7, r0
   15f98:	bl	14970 <init_node_int@@Base>
   15f9c:	mov	r0, r5
   15fa0:	bl	12ad8 <free_token_int_value@@Base>
   15fa4:	mov	r0, #20
   15fa8:	bl	11fcc <malloc@plt>
   15fac:	mov	r1, r6
   15fb0:	mov	r2, r8
   15fb4:	mov	r3, r7
   15fb8:	mov	r5, r0
   15fbc:	bl	14b38 <init_node_boolean_operator@@Base>
   15fc0:	add	r6, r4, #104	; 0x68
   15fc4:	b	1606c <read_boolean_binary_expression@@Base+0x1b0>
   15fc8:	ldrd	r2, [r4, #8]
   15fcc:	adds	r2, r2, #1
   15fd0:	adc	r3, r3, #0
   15fd4:	cmp	r0, #12
   15fd8:	strd	r2, [r4, #8]
   15fdc:	bne	16030 <read_boolean_binary_expression@@Base+0x174>
   15fe0:	ldrd	r0, [r4, #24]
   15fe4:	adds	r0, r0, #1
   15fe8:	adc	r1, r1, #0
   15fec:	strd	r0, [r4, #24]
   15ff0:	mov	r1, r6
   15ff4:	ldr	r0, [r5]
   15ff8:	bl	13068 <push_back@@Base>
   15ffc:	mov	r0, r5
   16000:	add	r6, r4, #40	; 0x28
   16004:	bl	16094 <read_boolean_unary_expression@@Base>
   16008:	mov	r5, r0
   1600c:	b	1606c <read_boolean_binary_expression@@Base+0x1b0>
   16010:	ldrd	r0, [r4, #56]	; 0x38
   16014:	adds	r0, r0, #1
   16018:	adc	r1, r1, #0
   1601c:	strd	r0, [r4, #56]	; 0x38
   16020:	mov	r0, r8
   16024:	bl	14bb0 <free_node@@Base>
   16028:	add	r6, r4, #72	; 0x48
   1602c:	b	16068 <read_boolean_binary_expression@@Base+0x1ac>
   16030:	ldrd	r0, [r4, #32]
   16034:	add	r6, r4, #48	; 0x30
   16038:	mov	r5, #0
   1603c:	adds	r0, r0, #1
   16040:	adc	r1, r1, #0
   16044:	strd	r0, [r4, #32]
   16048:	b	1606c <read_boolean_binary_expression@@Base+0x1b0>
   1604c:	ldrd	r0, [r4, #80]	; 0x50
   16050:	adds	r0, r0, #1
   16054:	adc	r1, r1, #0
   16058:	strd	r0, [r4, #80]	; 0x50
   1605c:	mov	r0, r8
   16060:	bl	14bb0 <free_node@@Base>
   16064:	add	r6, r4, #96	; 0x60
   16068:	mov	r5, #0
   1606c:	ldrd	r0, [r6]
   16070:	adds	r0, r0, #1
   16074:	adc	r1, r1, #0
   16078:	strd	r0, [r6]
   1607c:	ldrd	r0, [r4, #112]	; 0x70
   16080:	adds	r0, r0, #1
   16084:	adc	r1, r1, #0
   16088:	strd	r0, [r4, #112]	; 0x70
   1608c:	mov	r0, r5
   16090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016094 <read_boolean_unary_expression@@Base>:
   16094:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16098:	add	fp, sp, #24
   1609c:	movw	r5, #52832	; 0xce60
   160a0:	mov	r6, r0
   160a4:	movt	r5, #2
   160a8:	ldrd	r0, [r5]
   160ac:	adds	r0, r0, #1
   160b0:	adc	r1, r1, #0
   160b4:	strd	r0, [r5]
   160b8:	mov	r0, #20
   160bc:	bl	11fcc <malloc@plt>
   160c0:	mov	r4, r0
   160c4:	ldr	r0, [r6]
   160c8:	bl	131d8 <next@@Base>
   160cc:	mov	r7, r0
   160d0:	ldr	r0, [r0]
   160d4:	cmp	r0, #12
   160d8:	bne	16160 <read_boolean_unary_expression@@Base+0xcc>
   160dc:	ldrd	r0, [r5, #16]
   160e0:	adds	r0, r0, #1
   160e4:	adc	r1, r1, #0
   160e8:	strd	r0, [r5, #16]
   160ec:	mov	r0, r7
   160f0:	bl	15014 <get_boolean_op_value@@Base>
   160f4:	mov	r8, r0
   160f8:	mov	r0, r7
   160fc:	bl	12ce8 <free_token_boolean_op@@Base>
   16100:	ldr	r0, [r6]
   16104:	bl	131d8 <next@@Base>
   16108:	mov	r6, r0
   1610c:	ldr	r0, [r0]
   16110:	cmp	r0, #1
   16114:	bne	16180 <read_boolean_unary_expression@@Base+0xec>
   16118:	ldrd	r0, [r5, #40]	; 0x28
   1611c:	adds	r0, r0, #1
   16120:	adc	r1, r1, #0
   16124:	strd	r0, [r5, #40]	; 0x28
   16128:	mov	r0, #12
   1612c:	bl	11fcc <malloc@plt>
   16130:	ldr	r1, [r6, #4]
   16134:	mov	r7, r0
   16138:	bl	14970 <init_node_int@@Base>
   1613c:	mov	r0, r6
   16140:	bl	12ad8 <free_token_int_value@@Base>
   16144:	mov	r0, r4
   16148:	mov	r1, r8
   1614c:	mov	r2, r7
   16150:	mov	r3, #0
   16154:	bl	14b38 <init_node_boolean_operator@@Base>
   16158:	add	r0, r5, #56	; 0x38
   1615c:	b	161a0 <read_boolean_unary_expression@@Base+0x10c>
   16160:	ldrd	r0, [r5, #8]
   16164:	adds	r0, r0, #1
   16168:	adc	r1, r1, #0
   1616c:	strd	r0, [r5, #8]
   16170:	mov	r0, r4
   16174:	bl	14f88 <free_node_boolean_operator@@Base>
   16178:	add	r0, r5, #24
   1617c:	b	1619c <read_boolean_unary_expression@@Base+0x108>
   16180:	ldrd	r0, [r5, #32]
   16184:	adds	r0, r0, #1
   16188:	adc	r1, r1, #0
   1618c:	strd	r0, [r5, #32]
   16190:	mov	r0, r4
   16194:	bl	14f88 <free_node_boolean_operator@@Base>
   16198:	add	r0, r5, #48	; 0x30
   1619c:	mov	r4, #0
   161a0:	ldrd	r2, [r0]
   161a4:	adds	r2, r2, #1
   161a8:	adc	r3, r3, #0
   161ac:	strd	r2, [r0]
   161b0:	ldrd	r0, [r5, #64]	; 0x40
   161b4:	adds	r0, r0, #1
   161b8:	adc	r1, r1, #0
   161bc:	strd	r0, [r5, #64]	; 0x40
   161c0:	mov	r0, r4
   161c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161c8:	push	{r4, r5, r6, lr}
   161cc:	sub	sp, sp, #8
   161d0:	movw	r0, #44074	; 0xac2a
   161d4:	movw	r1, #41285	; 0xa145
   161d8:	movw	r2, #51015	; 0xc747
   161dc:	movt	r0, #1
   161e0:	movt	r1, #1
   161e4:	movt	r2, #42604	; 0xa66c
   161e8:	bl	16ff8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   161ec:	movw	r0, #44624	; 0xae50
   161f0:	movw	r6, #44400	; 0xad70
   161f4:	mov	r5, #0
   161f8:	movt	r0, #1
   161fc:	movt	r6, #1
   16200:	add	r4, r0, #4
   16204:	mov	r3, r6
   16208:	ldr	r0, [r3, r5]!
   1620c:	ldr	r1, [r3, #16]
   16210:	str	r1, [sp]
   16214:	ldmib	r3, {r1, r2}
   16218:	ldrb	r3, [r3, #12]
   1621c:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16220:	ldrd	r0, [r4, #-4]
   16224:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16228:	add	r5, r5, #20
   1622c:	add	r4, r4, #8
   16230:	cmp	r5, #220	; 0xdc
   16234:	bne	16204 <read_boolean_unary_expression@@Base+0x170>
   16238:	bl	18754 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   1623c:	add	sp, sp, #8
   16240:	pop	{r4, r5, r6, lr}
   16244:	b	194c0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   16248:	push	{r4, r5, fp, lr}
   1624c:	vpush	{d8-d9}
   16250:	bl	161c8 <read_boolean_unary_expression@@Base+0x134>
   16254:	movw	r0, #52048	; 0xcb50
   16258:	vmov.i32	q4, #0	; 0x00000000
   1625c:	mov	r4, #0
   16260:	mov	r5, #116	; 0x74
   16264:	mov	r2, #160	; 0xa0
   16268:	movt	r0, #2
   1626c:	vst1.64	{d8-d9}, [r0 :128]
   16270:	movw	r0, #52032	; 0xcb40
   16274:	movt	r0, #2
   16278:	vst1.64	{d8-d9}, [r0 :128]
   1627c:	movw	r0, #52064	; 0xcb60
   16280:	movt	r0, #2
   16284:	vst1.64	{d8-d9}, [r0 :128]
   16288:	movw	r0, #52080	; 0xcb70
   1628c:	movt	r0, #2
   16290:	add	r1, r0, #16
   16294:	str	r4, [r0, #112]	; 0x70
   16298:	vst1.64	{d8-d9}, [r1 :128]
   1629c:	add	r1, r0, #32
   162a0:	vst1.64	{d8-d9}, [r1 :128]
   162a4:	add	r1, r0, #48	; 0x30
   162a8:	vst1.64	{d8-d9}, [r1 :128]
   162ac:	add	r1, r0, #64	; 0x40
   162b0:	vst1.64	{d8-d9}, [r1 :128]
   162b4:	add	r1, r0, #80	; 0x50
   162b8:	vst1.64	{d8-d9}, [r1 :128]
   162bc:	add	r1, r0, #96	; 0x60
   162c0:	vst1.64	{d8-d9}, [r0 :128], r5
   162c4:	str	r4, [r0]
   162c8:	movw	r0, #52208	; 0xcbf0
   162cc:	vst1.64	{d8-d9}, [r1 :128]
   162d0:	mov	r1, #0
   162d4:	movt	r0, #2
   162d8:	bl	12068 <memset@plt>
   162dc:	movw	r1, #52528	; 0xcd30
   162e0:	mov	r0, #100	; 0x64
   162e4:	movw	r3, #52448	; 0xcce0
   162e8:	movt	r1, #2
   162ec:	movt	r3, #2
   162f0:	mov	r2, r1
   162f4:	str	r4, [r1, #96]	; 0x60
   162f8:	vst1.64	{d8-d9}, [r2 :128], r0
   162fc:	str	r4, [r2]
   16300:	movw	r2, #52368	; 0xcc90
   16304:	movt	r2, #2
   16308:	add	r0, r2, #16
   1630c:	str	r4, [r2, #64]	; 0x40
   16310:	vst1.64	{d8-d9}, [r0 :128]
   16314:	add	r0, r2, #32
   16318:	vst1.64	{d8-d9}, [r0 :128]
   1631c:	add	r0, r2, #48	; 0x30
   16320:	vst1.64	{d8-d9}, [r0 :128]
   16324:	add	r0, r3, #16
   16328:	vst1.64	{d8-d9}, [r0 :128]
   1632c:	add	r0, r3, #32
   16330:	vst1.64	{d8-d9}, [r0 :128]
   16334:	add	r0, r3, #48	; 0x30
   16338:	vst1.64	{d8-d9}, [r0 :128]
   1633c:	add	r0, r1, #16
   16340:	vst1.64	{d8-d9}, [r0 :128]
   16344:	add	r0, r1, #32
   16348:	vst1.64	{d8-d9}, [r0 :128]
   1634c:	add	r0, r1, #48	; 0x30
   16350:	vst1.64	{d8-d9}, [r0 :128]
   16354:	add	r0, r1, #64	; 0x40
   16358:	vst1.64	{d8-d9}, [r0 :128]
   1635c:	add	r0, r1, #80	; 0x50
   16360:	mov	r1, #64	; 0x40
   16364:	vst1.64	{d8-d9}, [r3 :128], r1
   16368:	movw	r1, #52640	; 0xcda0
   1636c:	vst1.64	{d8-d9}, [r0 :128]
   16370:	mov	r0, #68	; 0x44
   16374:	movt	r1, #2
   16378:	vst1.64	{d8-d9}, [r2 :128], r0
   1637c:	vst1.64	{d8-d9}, [r3 :128]
   16380:	str	r4, [r2]
   16384:	add	r2, r1, #16
   16388:	vst1.64	{d8-d9}, [r2 :128]
   1638c:	add	r2, r1, #32
   16390:	vst1.64	{d8-d9}, [r2 :128]
   16394:	mov	r2, #48	; 0x30
   16398:	vst1.64	{d8-d9}, [r1 :128], r2
   1639c:	vst1.64	{d8-d9}, [r1 :128]
   163a0:	movw	r1, #52704	; 0xcde0
   163a4:	movt	r1, #2
   163a8:	mov	r2, r1
   163ac:	str	r4, [r1, #112]	; 0x70
   163b0:	vst1.64	{d8-d9}, [r2 :128], r5
   163b4:	str	r4, [r2]
   163b8:	add	r2, r1, #96	; 0x60
   163bc:	vst1.64	{d8-d9}, [r2 :128]
   163c0:	add	r2, r1, #80	; 0x50
   163c4:	vst1.64	{d8-d9}, [r2 :128]
   163c8:	add	r2, r1, #64	; 0x40
   163cc:	vst1.64	{d8-d9}, [r2 :128]
   163d0:	add	r2, r1, #48	; 0x30
   163d4:	vst1.64	{d8-d9}, [r2 :128]
   163d8:	add	r2, r1, #32
   163dc:	add	r1, r1, #16
   163e0:	vst1.64	{d8-d9}, [r1 :128]
   163e4:	movw	r1, #52832	; 0xce60
   163e8:	vst1.64	{d8-d9}, [r2 :128]
   163ec:	movt	r1, #2
   163f0:	add	r2, r1, #48	; 0x30
   163f4:	str	r4, [r1, #64]	; 0x40
   163f8:	vst1.64	{d8-d9}, [r2 :128]
   163fc:	add	r2, r1, #32
   16400:	vst1.64	{d8-d9}, [r2 :128]
   16404:	add	r2, r1, #16
   16408:	vst1.64	{d8-d9}, [r1 :128], r0
   1640c:	vst1.64	{d8-d9}, [r2 :128]
   16410:	str	r4, [r1]
   16414:	vpop	{d8-d9}
   16418:	pop	{r4, r5, fp, pc}
   1641c:	movw	r0, #25032	; 0x61c8
   16420:	movw	r1, #25160	; 0x6248
   16424:	movt	r0, #1
   16428:	movt	r1, #1
   1642c:	b	19974 <__gcov_flush@@Base+0xb8>

00016430 <init_generator@@Base>:
   16430:	push	{r4, sl, fp, lr}
   16434:	add	fp, sp, #8
   16438:	mov	r4, r0
   1643c:	movw	r0, #52912	; 0xceb0
   16440:	add	r3, pc, #56	; 0x38
   16444:	movt	r0, #2
   16448:	vld1.64	{d16-d17}, [r3]
   1644c:	vld1.64	{d18-d19}, [r0 :128]
   16450:	vadd.i64	q8, q9, q8
   16454:	vst1.64	{d16-d17}, [r0 :128]
   16458:	str	r1, [r4]
   1645c:	movw	r1, #44712	; 0xaea8
   16460:	mov	r0, r2
   16464:	movt	r1, #1
   16468:	bl	11f3c <fopen@plt>
   1646c:	mov	r1, #0
   16470:	stmib	r4, {r0, r1}
   16474:	str	r1, [r4, #12]
   16478:	pop	{r4, sl, fp, pc}
   1647c:	nop	{0}
   16480:	andeq	r0, r0, r1
   16484:	andeq	r0, r0, r0
   16488:	andeq	r0, r0, r1
   1648c:	andeq	r0, r0, r0

00016490 <destroy_generator@@Base>:
   16490:	movw	r1, #52928	; 0xcec0
   16494:	add	r2, pc, #28
   16498:	movt	r1, #2
   1649c:	vld1.64	{d16-d17}, [r2]
   164a0:	vld1.64	{d18-d19}, [r1 :128]
   164a4:	vadd.i64	q8, q9, q8
   164a8:	vst1.64	{d16-d17}, [r1 :128]
   164ac:	ldr	r0, [r0, #4]
   164b0:	b	12098 <fclose@plt>
   164b4:	nop	{0}
   164b8:	andeq	r0, r0, r1
   164bc:	andeq	r0, r0, r0
   164c0:	andeq	r0, r0, r1
   164c4:	andeq	r0, r0, r0

000164c8 <generate_code@@Base>:
   164c8:	push	{r4, r5, fp, lr}
   164cc:	add	fp, sp, #8
   164d0:	mov	r4, r0
   164d4:	movw	r0, #52944	; 0xced0
   164d8:	add	r1, pc, #56	; 0x38
   164dc:	movt	r0, #2
   164e0:	vld1.64	{d16-d17}, [r1]
   164e4:	vld1.64	{d18-d19}, [r0 :128]
   164e8:	vadd.i64	q8, q9, q8
   164ec:	vst1.64	{d16-d17}, [r0 :128]
   164f0:	ldr	r0, [r4]
   164f4:	bl	15570 <build_ast@@Base>
   164f8:	mov	r5, r0
   164fc:	mov	r0, r4
   16500:	mov	r1, r5
   16504:	bl	16528 <__generate_code@@Base>
   16508:	mov	r0, r5
   1650c:	pop	{r4, r5, fp, lr}
   16510:	b	14bb0 <free_node@@Base>
   16514:	nop	{0}
   16518:	andeq	r0, r0, r1
   1651c:	andeq	r0, r0, r0
   16520:	andeq	r0, r0, r1
   16524:	andeq	r0, r0, r0

00016528 <__generate_code@@Base>:
   16528:	push	{r4, r5, fp, lr}
   1652c:	add	fp, sp, #8
   16530:	mov	r5, r0
   16534:	movw	r0, #52960	; 0xcee0
   16538:	mov	r4, r1
   1653c:	add	r1, pc, #60	; 0x3c
   16540:	mov	r2, #1
   16544:	movt	r0, #2
   16548:	vld1.64	{d16-d17}, [r1]
   1654c:	mov	r1, #21
   16550:	vld1.64	{d18-d19}, [r0 :128]
   16554:	vadd.i64	q8, q9, q8
   16558:	vst1.64	{d16-d17}, [r0 :128]
   1655c:	movw	r0, #44714	; 0xaeaa
   16560:	ldr	r3, [r5, #4]
   16564:	movt	r0, #1
   16568:	bl	11fa8 <fwrite@plt>
   1656c:	mov	r0, r5
   16570:	mov	r1, r4
   16574:	pop	{r4, r5, fp, lr}
   16578:	b	16590 <__generate_code_for_main@@Base>
   1657c:	nop	{0}
   16580:	andeq	r0, r0, r1
   16584:	andeq	r0, r0, r0
   16588:	andeq	r0, r0, r1
   1658c:	andeq	r0, r0, r0

00016590 <__generate_code_for_main@@Base>:
   16590:	push	{r4, r5, r6, r7, fp, lr}
   16594:	add	fp, sp, #16
   16598:	movw	r2, #52976	; 0xcef0
   1659c:	movt	r2, #2
   165a0:	ldrd	r4, [r2]
   165a4:	adds	r4, r4, #1
   165a8:	adc	r5, r5, #0
   165ac:	strd	r4, [r2]
   165b0:	ldr	r3, [r1]
   165b4:	cmp	r3, #2
   165b8:	bne	165e8 <__generate_code_for_main@@Base+0x58>
   165bc:	ldrd	r4, [r2, #8]
   165c0:	ldrd	r6, [r2, #24]
   165c4:	adds	r4, r4, #1
   165c8:	adc	r5, r5, #0
   165cc:	adds	r3, r6, #1
   165d0:	str	r3, [r2, #24]
   165d4:	adc	r3, r7, #0
   165d8:	strd	r4, [r2, #8]
   165dc:	str	r3, [r2, #28]
   165e0:	pop	{r4, r5, r6, r7, fp, lr}
   165e4:	b	16620 <__generate_code_for_function@@Base>
   165e8:	ldrd	r0, [r2, #16]
   165ec:	adds	r0, r0, #1
   165f0:	adc	r1, r1, #0
   165f4:	strd	r0, [r2, #16]
   165f8:	movw	r0, #49384	; 0xc0e8
   165fc:	mov	r1, #46	; 0x2e
   16600:	mov	r2, #1
   16604:	movt	r0, #2
   16608:	ldr	r3, [r0]
   1660c:	movw	r0, #44736	; 0xaec0
   16610:	movt	r0, #1
   16614:	bl	11fa8 <fwrite@plt>
   16618:	mov	r0, #1
   1661c:	bl	12008 <exit@plt>

00016620 <__generate_code_for_function@@Base>:
   16620:	push	{r4, r5, fp, lr}
   16624:	add	fp, sp, #8
   16628:	mov	r5, r0
   1662c:	movw	r0, #53008	; 0xcf10
   16630:	mov	r4, r1
   16634:	add	r1, pc, #52	; 0x34
   16638:	movt	r0, #2
   1663c:	vld1.64	{d16-d17}, [r1]
   16640:	movw	r1, #44783	; 0xaeef
   16644:	movt	r1, #1
   16648:	vld1.64	{d18-d19}, [r0 :128]
   1664c:	vadd.i64	q8, q9, q8
   16650:	vst1.64	{d16-d17}, [r0 :128]
   16654:	ldr	r2, [r4, #8]
   16658:	ldr	r0, [r5, #4]
   1665c:	bl	12038 <fprintf@plt>
   16660:	ldr	r1, [r4, #12]
   16664:	mov	r0, r5
   16668:	pop	{r4, r5, fp, lr}
   1666c:	b	16680 <__generate_code_for_body@@Base>
   16670:	andeq	r0, r0, r1
   16674:	andeq	r0, r0, r0
   16678:	andeq	r0, r0, r1
   1667c:	andeq	r0, r0, r0

00016680 <__generate_code_for_body@@Base>:
   16680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16684:	add	fp, sp, #24
   16688:	movw	r5, #53024	; 0xcf20
   1668c:	mov	r4, r0
   16690:	add	r0, pc, #296	; 0x128
   16694:	cmp	r1, #0
   16698:	movt	r5, #2
   1669c:	vld1.64	{d16-d17}, [r0]
   166a0:	vld1.64	{d18-d19}, [r5 :128]
   166a4:	vadd.i64	q8, q9, q8
   166a8:	vst1.64	{d16-d17}, [r5 :128]
   166ac:	beq	1675c <__generate_code_for_body@@Base+0xdc>
   166b0:	add	r8, r5, #64	; 0x40
   166b4:	add	r7, r5, #56	; 0x38
   166b8:	ldr	r0, [r5, #16]
   166bc:	ldr	r3, [r5, #20]
   166c0:	adds	r0, r0, #1
   166c4:	adc	r3, r3, #0
   166c8:	str	r0, [r5, #16]
   166cc:	str	r3, [r5, #20]
   166d0:	ldm	r1, {r0, r6}
   166d4:	cmp	r0, #4
   166d8:	beq	1670c <__generate_code_for_body@@Base+0x8c>
   166dc:	cmp	r0, #3
   166e0:	bne	16784 <__generate_code_for_body@@Base+0x104>
   166e4:	ldr	r0, [r5, #40]	; 0x28
   166e8:	ldr	r3, [r5, #44]	; 0x2c
   166ec:	adds	r0, r0, #1
   166f0:	str	r0, [r5, #40]	; 0x28
   166f4:	adc	r3, r3, #0
   166f8:	mov	r0, r4
   166fc:	str	r3, [r5, #44]	; 0x2c
   16700:	bl	16920 <__generate_code_for_return@@Base>
   16704:	mov	r0, r7
   16708:	b	16730 <__generate_code_for_body@@Base+0xb0>
   1670c:	ldr	r0, [r5, #48]	; 0x30
   16710:	ldr	r3, [r5, #52]	; 0x34
   16714:	adds	r0, r0, #1
   16718:	str	r0, [r5, #48]	; 0x30
   1671c:	adc	r3, r3, #0
   16720:	mov	r0, r4
   16724:	str	r3, [r5, #52]	; 0x34
   16728:	bl	167d0 <__generate_code_for_if@@Base>
   1672c:	mov	r0, r8
   16730:	ldrd	r2, [r0]
   16734:	adds	r2, r2, #1
   16738:	adc	r3, r3, #0
   1673c:	strd	r2, [r0]
   16740:	ldrd	r0, [r5, #72]	; 0x48
   16744:	adds	r0, r0, #1
   16748:	adc	r1, r1, #0
   1674c:	cmp	r6, #0
   16750:	strd	r0, [r5, #72]	; 0x48
   16754:	mov	r1, r6
   16758:	bne	166b8 <__generate_code_for_body@@Base+0x38>
   1675c:	ldrd	r0, [r5, #24]
   16760:	ldrd	r2, [r5, #80]	; 0x50
   16764:	adds	r0, r0, #1
   16768:	adc	r1, r1, #0
   1676c:	adds	r2, r2, #1
   16770:	str	r2, [r5, #80]	; 0x50
   16774:	strd	r0, [r5, #24]
   16778:	adc	r0, r3, #0
   1677c:	str	r0, [r5, #84]	; 0x54
   16780:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16784:	ldrd	r0, [r5, #32]
   16788:	mov	r2, #1
   1678c:	adds	r0, r0, #1
   16790:	adc	r1, r1, #0
   16794:	strd	r0, [r5, #32]
   16798:	movw	r0, #49384	; 0xc0e8
   1679c:	mov	r1, #52	; 0x34
   167a0:	movt	r0, #2
   167a4:	ldr	r3, [r0]
   167a8:	movw	r0, #45045	; 0xaff5
   167ac:	movt	r0, #1
   167b0:	bl	11fa8 <fwrite@plt>
   167b4:	mov	r0, #1
   167b8:	bl	12008 <exit@plt>
   167bc:	nop	{0}
   167c0:	andeq	r0, r0, r1
   167c4:	andeq	r0, r0, r0
   167c8:	andeq	r0, r0, r1
   167cc:	andeq	r0, r0, r0

000167d0 <__generate_code_for_if@@Base>:
   167d0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   167d4:	add	fp, sp, #24
   167d8:	movw	r6, #53120	; 0xcf80
   167dc:	mov	r5, r1
   167e0:	mov	r4, r0
   167e4:	movt	r6, #2
   167e8:	ldrd	r0, [r6]
   167ec:	adds	r0, r0, #1
   167f0:	adc	r1, r1, #0
   167f4:	strd	r0, [r6]
   167f8:	ldrd	r8, [r4, #8]
   167fc:	adds	r0, r8, #1
   16800:	mov	r2, r8
   16804:	mov	r3, r9
   16808:	adc	r1, r9, #0
   1680c:	strd	r0, [r4, #8]
   16810:	mov	r0, r4
   16814:	ldr	r1, [r5, #8]
   16818:	bl	1689c <__generate_code_for_if_expression@@Base>
   1681c:	ldr	r1, [r5, #12]
   16820:	mov	r0, r4
   16824:	bl	16680 <__generate_code_for_body@@Base>
   16828:	ldr	r0, [r4, #4]
   1682c:	movw	r1, #44788	; 0xaef4
   16830:	mov	r2, r8
   16834:	mov	r3, r9
   16838:	movt	r1, #1
   1683c:	bl	12038 <fprintf@plt>
   16840:	ldr	r1, [r5, #16]
   16844:	cmp	r1, #0
   16848:	beq	16874 <__generate_code_for_if@@Base+0xa4>
   1684c:	ldr	r0, [r6, #8]
   16850:	ldr	r3, [r6, #12]
   16854:	adds	r0, r0, #1
   16858:	str	r0, [r6, #8]
   1685c:	adc	r3, r3, #0
   16860:	mov	r0, r4
   16864:	str	r3, [r6, #12]
   16868:	bl	16680 <__generate_code_for_body@@Base>
   1686c:	add	r0, r6, #24
   16870:	b	16878 <__generate_code_for_if@@Base+0xa8>
   16874:	add	r0, r6, #16
   16878:	ldrd	r2, [r0]
   1687c:	adds	r2, r2, #1
   16880:	adc	r3, r3, #0
   16884:	strd	r2, [r0]
   16888:	ldrd	r0, [r6, #32]
   1688c:	adds	r0, r0, #1
   16890:	adc	r1, r1, #0
   16894:	strd	r0, [r6, #32]
   16898:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}

0001689c <__generate_code_for_if_expression@@Base>:
   1689c:	push	{r4, r6, r7, sl, fp, lr}
   168a0:	add	fp, sp, #16
   168a4:	movw	r4, #53168	; 0xcfb0
   168a8:	movt	r4, #2
   168ac:	ldrd	r6, [r4]
   168b0:	adds	r6, r6, #1
   168b4:	adc	r7, r7, #0
   168b8:	strd	r6, [r4]
   168bc:	ldr	r7, [r1, #16]
   168c0:	cmp	r7, #8
   168c4:	bne	168e4 <__generate_code_for_if_expression@@Base+0x48>
   168c8:	ldrd	r6, [r4, #8]
   168cc:	adds	r6, r6, #1
   168d0:	adc	r7, r7, #0
   168d4:	strd	r6, [r4, #8]
   168d8:	bl	16a68 <__generate_code_for_unary_boolean_expression@@Base>
   168dc:	add	r0, r4, #24
   168e0:	b	168fc <__generate_code_for_if_expression@@Base+0x60>
   168e4:	ldrd	r6, [r4, #16]
   168e8:	adds	r6, r6, #1
   168ec:	adc	r7, r7, #0
   168f0:	strd	r6, [r4, #16]
   168f4:	bl	16b90 <__generate_code_for_binary_boolean_expression@@Base>
   168f8:	add	r0, r4, #32
   168fc:	ldrd	r2, [r0]
   16900:	adds	r2, r2, #1
   16904:	adc	r3, r3, #0
   16908:	strd	r2, [r0]
   1690c:	ldrd	r0, [r4, #40]	; 0x28
   16910:	adds	r0, r0, #1
   16914:	adc	r1, r1, #0
   16918:	strd	r0, [r4, #40]	; 0x28
   1691c:	pop	{r4, r6, r7, sl, fp, pc}

00016920 <__generate_code_for_return@@Base>:
   16920:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   16924:	add	fp, sp, #24
   16928:	movw	r5, #53216	; 0xcfe0
   1692c:	mov	r4, r0
   16930:	mov	r2, #1
   16934:	movt	r5, #2
   16938:	ldm	r5, {r0, r3}
   1693c:	adds	r0, r0, #1
   16940:	adc	r3, r3, #0
   16944:	stm	r5, {r0, r3}
   16948:	movw	r0, #44803	; 0xaf03
   1694c:	ldr	r3, [r4, #4]
   16950:	ldr	r6, [r1, #8]
   16954:	movt	r0, #1
   16958:	mov	r1, #9
   1695c:	bl	11fa8 <fwrite@plt>
   16960:	ldr	r0, [r6]
   16964:	cmp	r0, #1
   16968:	bne	169dc <__generate_code_for_return@@Base+0xbc>
   1696c:	movw	r0, #53248	; 0xd000
   16970:	add	r1, pc, #160	; 0xa0
   16974:	ldrd	r2, [r5, #8]
   16978:	ldrd	r8, [r5, #24]
   1697c:	movt	r0, #2
   16980:	vld1.64	{d16-d17}, [r1]
   16984:	vld1.64	{d18-d19}, [r0 :128]
   16988:	adds	r2, r2, #1
   1698c:	adc	r3, r3, #0
   16990:	adds	r1, r8, #1
   16994:	str	r1, [r5, #24]
   16998:	strd	r2, [r5, #8]
   1699c:	movw	r1, #44860	; 0xaf3c
   169a0:	movt	r1, #1
   169a4:	vadd.i64	q8, q9, q8
   169a8:	vst1.64	{d16-d17}, [r0 :128]
   169ac:	adc	r0, r9, #0
   169b0:	str	r0, [r5, #28]
   169b4:	ldr	r2, [r6, #8]
   169b8:	ldr	r0, [r4, #4]
   169bc:	bl	12038 <fprintf@plt>
   169c0:	ldr	r3, [r4, #4]
   169c4:	movw	r0, #44851	; 0xaf33
   169c8:	mov	r1, #8
   169cc:	mov	r2, #1
   169d0:	movt	r0, #1
   169d4:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   169d8:	b	11fa8 <fwrite@plt>
   169dc:	ldrd	r0, [r5, #16]
   169e0:	mov	r2, #1
   169e4:	adds	r0, r0, #1
   169e8:	adc	r1, r1, #0
   169ec:	strd	r0, [r5, #16]
   169f0:	movw	r0, #49384	; 0xc0e8
   169f4:	mov	r1, #37	; 0x25
   169f8:	movt	r0, #2
   169fc:	ldr	r3, [r0]
   16a00:	movw	r0, #44813	; 0xaf0d
   16a04:	movt	r0, #1
   16a08:	bl	11fa8 <fwrite@plt>
   16a0c:	mov	r0, #1
   16a10:	bl	12008 <exit@plt>
   16a14:	nop	{0}
   16a18:	andeq	r0, r0, r1
   16a1c:	andeq	r0, r0, r0
   16a20:	andeq	r0, r0, r1
   16a24:	andeq	r0, r0, r0

00016a28 <__generate_code_for_int@@Base>:
   16a28:	movw	r2, #53248	; 0xd000
   16a2c:	add	r3, pc, #36	; 0x24
   16a30:	movt	r2, #2
   16a34:	vld1.64	{d16-d17}, [r3]
   16a38:	vld1.64	{d18-d19}, [r2 :128]
   16a3c:	vadd.i64	q8, q9, q8
   16a40:	vst1.64	{d16-d17}, [r2 :128]
   16a44:	ldr	r2, [r1, #8]
   16a48:	ldr	r0, [r0, #4]
   16a4c:	movw	r1, #44860	; 0xaf3c
   16a50:	movt	r1, #1
   16a54:	b	12038 <fprintf@plt>
   16a58:	andeq	r0, r0, r1
   16a5c:	andeq	r0, r0, r0
   16a60:	andeq	r0, r0, r1
   16a64:	andeq	r0, r0, r0

00016a68 <__generate_code_for_unary_boolean_expression@@Base>:
   16a68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a6c:	add	fp, sp, #24
   16a70:	movw	r4, #53264	; 0xd010
   16a74:	mov	r7, r1
   16a78:	mov	r6, r0
   16a7c:	mov	r8, r3
   16a80:	mov	r9, r2
   16a84:	mov	r2, #1
   16a88:	movt	r4, #2
   16a8c:	ldrd	r0, [r4]
   16a90:	adds	r0, r0, #1
   16a94:	adc	r1, r1, #0
   16a98:	strd	r0, [r4]
   16a9c:	movw	r0, #45033	; 0xafe9
   16aa0:	mov	r1, #11
   16aa4:	ldr	r3, [r6, #4]
   16aa8:	ldr	r5, [r7, #8]
   16aac:	movt	r0, #1
   16ab0:	bl	11fa8 <fwrite@plt>
   16ab4:	ldr	r3, [r6, #4]
   16ab8:	movw	r0, #44864	; 0xaf40
   16abc:	mov	r1, #9
   16ac0:	mov	r2, #1
   16ac4:	movt	r0, #1
   16ac8:	bl	11fa8 <fwrite@plt>
   16acc:	movw	r0, #53248	; 0xd000
   16ad0:	add	r1, pc, #168	; 0xa8
   16ad4:	movt	r0, #2
   16ad8:	vld1.64	{d16-d17}, [r1]
   16adc:	movw	r1, #44860	; 0xaf3c
   16ae0:	movt	r1, #1
   16ae4:	vld1.64	{d18-d19}, [r0 :128]
   16ae8:	vadd.i64	q8, q9, q8
   16aec:	vst1.64	{d16-d17}, [r0 :128]
   16af0:	ldr	r2, [r5, #8]
   16af4:	ldr	r0, [r6, #4]
   16af8:	bl	12038 <fprintf@plt>
   16afc:	ldr	r0, [r7, #16]
   16b00:	cmp	r0, #8
   16b04:	bne	16b48 <__generate_code_for_unary_boolean_expression@@Base+0xe0>
   16b08:	ldrd	r0, [r4, #8]
   16b0c:	ldrd	r2, [r4, #24]
   16b10:	adds	r0, r0, #1
   16b14:	adc	r1, r1, #0
   16b18:	adds	r2, r2, #1
   16b1c:	str	r2, [r4, #24]
   16b20:	strd	r0, [r4, #8]
   16b24:	adc	r0, r3, #0
   16b28:	movw	r1, #44906	; 0xaf6a
   16b2c:	mov	r2, r9
   16b30:	mov	r3, r8
   16b34:	str	r0, [r4, #28]
   16b38:	movt	r1, #1
   16b3c:	ldr	r0, [r6, #4]
   16b40:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   16b44:	b	12038 <fprintf@plt>
   16b48:	ldrd	r0, [r4, #16]
   16b4c:	mov	r2, #1
   16b50:	adds	r0, r0, #1
   16b54:	adc	r1, r1, #0
   16b58:	strd	r0, [r4, #16]
   16b5c:	movw	r0, #49384	; 0xc0e8
   16b60:	mov	r1, #31
   16b64:	movt	r0, #2
   16b68:	ldr	r3, [r0]
   16b6c:	movw	r0, #45001	; 0xafc9
   16b70:	movt	r0, #1
   16b74:	bl	11fa8 <fwrite@plt>
   16b78:	mov	r0, #1
   16b7c:	bl	12008 <exit@plt>
   16b80:	andeq	r0, r0, r1
   16b84:	andeq	r0, r0, r0
   16b88:	andeq	r0, r0, r1
   16b8c:	andeq	r0, r0, r0

00016b90 <__generate_code_for_binary_boolean_expression@@Base>:
   16b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b94:	add	fp, sp, #28
   16b98:	sub	sp, sp, #4
   16b9c:	vpush	{d8-d9}
   16ba0:	sub	sp, sp, #8
   16ba4:	movw	sl, #53296	; 0xd030
   16ba8:	mov	r7, r1
   16bac:	mov	r6, r0
   16bb0:	str	r3, [sp, #4]
   16bb4:	mov	r9, r2
   16bb8:	mov	r2, #1
   16bbc:	movt	sl, #2
   16bc0:	ldrd	r0, [sl]
   16bc4:	adds	r0, r0, #1
   16bc8:	adc	r1, r1, #0
   16bcc:	strd	r0, [sl]
   16bd0:	movw	r0, #44803	; 0xaf03
   16bd4:	mov	r1, #9
   16bd8:	ldr	r3, [r6, #4]
   16bdc:	ldr	r4, [r7, #8]
   16be0:	ldr	r5, [r7, #12]
   16be4:	movt	r0, #1
   16be8:	bl	11fa8 <fwrite@plt>
   16bec:	movw	r8, #53248	; 0xd000
   16bf0:	add	r0, pc, #584	; 0x248
   16bf4:	movt	r8, #2
   16bf8:	vld1.64	{d8-d9}, [r0]
   16bfc:	vld1.64	{d16-d17}, [r8 :128]
   16c00:	vadd.i64	q8, q8, q4
   16c04:	vst1.64	{d16-d17}, [r8 :128]
   16c08:	ldr	r2, [r4, #8]
   16c0c:	movw	r4, #44860	; 0xaf3c
   16c10:	ldr	r0, [r6, #4]
   16c14:	movt	r4, #1
   16c18:	mov	r1, r4
   16c1c:	bl	12038 <fprintf@plt>
   16c20:	ldr	r1, [r6, #4]
   16c24:	mov	r0, #10
   16c28:	bl	120d4 <fputc@plt>
   16c2c:	ldr	r3, [r6, #4]
   16c30:	movw	r0, #44864	; 0xaf40
   16c34:	mov	r1, #9
   16c38:	mov	r2, #1
   16c3c:	movt	r0, #1
   16c40:	bl	11fa8 <fwrite@plt>
   16c44:	vld1.64	{d16-d17}, [r8 :128]
   16c48:	mov	r1, r4
   16c4c:	vadd.i64	q8, q8, q4
   16c50:	vst1.64	{d16-d17}, [r8 :128]
   16c54:	ldr	r2, [r5, #8]
   16c58:	ldr	r0, [r6, #4]
   16c5c:	bl	12038 <fprintf@plt>
   16c60:	ldr	r1, [r6, #4]
   16c64:	mov	r0, #10
   16c68:	bl	120d4 <fputc@plt>
   16c6c:	ldr	r3, [r6, #4]
   16c70:	movw	r0, #44874	; 0xaf4a
   16c74:	mov	r1, #12
   16c78:	mov	r2, #1
   16c7c:	movt	r0, #1
   16c80:	bl	11fa8 <fwrite@plt>
   16c84:	ldr	r1, [r7, #16]
   16c88:	cmp	r1, #7
   16c8c:	bhi	16e08 <__generate_code_for_binary_boolean_expression@@Base+0x278>
   16c90:	add	r2, pc, #4
   16c94:	add	r0, sl, #56	; 0x38
   16c98:	ldr	pc, [r2, r1, lsl #2]
   16c9c:			; <UNDEFINED> instruction: 0x00016cbc
   16ca0:	andeq	r6, r1, ip, lsl sp
   16ca4:	andeq	r6, r1, ip, ror #25
   16ca8:	andeq	r6, r1, ip, ror sp
   16cac:	ldrdeq	r6, [r1], -r8
   16cb0:	ldrdeq	r6, [r1], -r8
   16cb4:	andeq	r6, r1, ip, lsr #27
   16cb8:	andeq	r6, r1, ip, asr #26
   16cbc:	ldrd	r0, [sl, #16]
   16cc0:	ldr	r3, [sp, #4]
   16cc4:	mov	r2, r9
   16cc8:	adds	r0, r0, #1
   16ccc:	adc	r1, r1, #0
   16cd0:	strd	r0, [sl, #16]
   16cd4:	movw	r1, #44887	; 0xaf57
   16cd8:	ldr	r0, [r6, #4]
   16cdc:	movt	r1, #1
   16ce0:	bl	12038 <fprintf@plt>
   16ce4:	add	r0, sl, #80	; 0x50
   16ce8:	b	16dd8 <__generate_code_for_binary_boolean_expression@@Base+0x248>
   16cec:	ldrd	r0, [sl, #32]
   16cf0:	ldr	r3, [sp, #4]
   16cf4:	mov	r2, r9
   16cf8:	adds	r0, r0, #1
   16cfc:	adc	r1, r1, #0
   16d00:	strd	r0, [sl, #32]
   16d04:	movw	r1, #44925	; 0xaf7d
   16d08:	ldr	r0, [r6, #4]
   16d0c:	movt	r1, #1
   16d10:	bl	12038 <fprintf@plt>
   16d14:	add	r0, sl, #96	; 0x60
   16d18:	b	16dd8 <__generate_code_for_binary_boolean_expression@@Base+0x248>
   16d1c:	ldrd	r0, [sl, #24]
   16d20:	ldr	r3, [sp, #4]
   16d24:	mov	r2, r9
   16d28:	adds	r0, r0, #1
   16d2c:	adc	r1, r1, #0
   16d30:	strd	r0, [sl, #24]
   16d34:	movw	r1, #44906	; 0xaf6a
   16d38:	ldr	r0, [r6, #4]
   16d3c:	movt	r1, #1
   16d40:	bl	12038 <fprintf@plt>
   16d44:	add	r0, sl, #88	; 0x58
   16d48:	b	16dd8 <__generate_code_for_binary_boolean_expression@@Base+0x248>
   16d4c:	ldrd	r0, [sl, #72]	; 0x48
   16d50:	ldr	r3, [sp, #4]
   16d54:	mov	r2, r9
   16d58:	adds	r0, r0, #1
   16d5c:	adc	r1, r1, #0
   16d60:	strd	r0, [sl, #72]	; 0x48
   16d64:	movw	r1, #44982	; 0xafb6
   16d68:	ldr	r0, [r6, #4]
   16d6c:	movt	r1, #1
   16d70:	bl	12038 <fprintf@plt>
   16d74:	add	r0, sl, #120	; 0x78
   16d78:	b	16dd8 <__generate_code_for_binary_boolean_expression@@Base+0x248>
   16d7c:	ldrd	r0, [sl, #40]	; 0x28
   16d80:	ldr	r3, [sp, #4]
   16d84:	mov	r2, r9
   16d88:	adds	r0, r0, #1
   16d8c:	adc	r1, r1, #0
   16d90:	strd	r0, [sl, #40]	; 0x28
   16d94:	movw	r1, #44944	; 0xaf90
   16d98:	ldr	r0, [r6, #4]
   16d9c:	movt	r1, #1
   16da0:	bl	12038 <fprintf@plt>
   16da4:	add	r0, sl, #104	; 0x68
   16da8:	b	16dd8 <__generate_code_for_binary_boolean_expression@@Base+0x248>
   16dac:	ldrd	r0, [sl, #64]	; 0x40
   16db0:	ldr	r3, [sp, #4]
   16db4:	mov	r2, r9
   16db8:	adds	r0, r0, #1
   16dbc:	adc	r1, r1, #0
   16dc0:	strd	r0, [sl, #64]	; 0x40
   16dc4:	movw	r1, #44963	; 0xafa3
   16dc8:	ldr	r0, [r6, #4]
   16dcc:	movt	r1, #1
   16dd0:	bl	12038 <fprintf@plt>
   16dd4:	add	r0, sl, #112	; 0x70
   16dd8:	ldrd	r2, [r0]
   16ddc:	adds	r2, r2, #1
   16de0:	adc	r3, r3, #0
   16de4:	strd	r2, [r0]
   16de8:	ldrd	r0, [sl, #128]	; 0x80
   16dec:	adds	r0, r0, #1
   16df0:	adc	r1, r1, #0
   16df4:	strd	r0, [sl, #128]	; 0x80
   16df8:	sub	sp, fp, #48	; 0x30
   16dfc:	vpop	{d8-d9}
   16e00:	add	sp, sp, #4
   16e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e08:	ldrd	r0, [sl, #8]
   16e0c:	mov	r2, #1
   16e10:	adds	r0, r0, #1
   16e14:	adc	r1, r1, #0
   16e18:	strd	r0, [sl, #8]
   16e1c:	movw	r0, #49384	; 0xc0e8
   16e20:	mov	r1, #31
   16e24:	movt	r0, #2
   16e28:	ldr	r3, [r0]
   16e2c:	movw	r0, #45001	; 0xafc9
   16e30:	movt	r0, #1
   16e34:	bl	11fa8 <fwrite@plt>
   16e38:	mov	r0, #1
   16e3c:	bl	12008 <exit@plt>
   16e40:	andeq	r0, r0, r1
   16e44:	andeq	r0, r0, r0
   16e48:	andeq	r0, r0, r1
   16e4c:	andeq	r0, r0, r0
   16e50:	push	{r4, r5, r6, lr}
   16e54:	sub	sp, sp, #8
   16e58:	movw	r0, #45098	; 0xb02a
   16e5c:	movw	r1, #41285	; 0xa145
   16e60:	movw	r2, #35541	; 0x8ad5
   16e64:	movt	r0, #1
   16e68:	movt	r1, #1
   16e6c:	movt	r2, #2116	; 0x844
   16e70:	bl	16ff8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   16e74:	movw	r0, #45792	; 0xb2e0
   16e78:	movw	r6, #45520	; 0xb1d0
   16e7c:	mov	r5, #0
   16e80:	movt	r0, #1
   16e84:	movt	r6, #1
   16e88:	add	r4, r0, #4
   16e8c:	mov	r3, r6
   16e90:	ldr	r0, [r3, r5]!
   16e94:	ldr	r1, [r3, #16]
   16e98:	str	r1, [sp]
   16e9c:	ldmib	r3, {r1, r2}
   16ea0:	ldrb	r3, [r3, #12]
   16ea4:	bl	17718 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16ea8:	ldrd	r0, [r4, #-4]
   16eac:	bl	17fcc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16eb0:	add	r5, r5, #20
   16eb4:	add	r4, r4, #8
   16eb8:	cmp	r5, #260	; 0x104
   16ebc:	bne	16e8c <__generate_code_for_binary_boolean_expression@@Base+0x2fc>
   16ec0:	bl	18754 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   16ec4:	add	sp, sp, #8
   16ec8:	pop	{r4, r5, r6, lr}
   16ecc:	b	194c0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   16ed0:	push	{fp, lr}
   16ed4:	bl	16e50 <__generate_code_for_binary_boolean_expression@@Base+0x2c0>
   16ed8:	movw	r0, #52928	; 0xcec0
   16edc:	vmov.i32	q8, #0	; 0x00000000
   16ee0:	movw	r2, #53120	; 0xcf80
   16ee4:	mov	ip, #0
   16ee8:	movt	r0, #2
   16eec:	movt	r2, #2
   16ef0:	vst1.64	{d16-d17}, [r0 :128]
   16ef4:	movw	r0, #52912	; 0xceb0
   16ef8:	add	r3, r2, #16
   16efc:	str	ip, [r2, #32]
   16f00:	movt	r0, #2
   16f04:	vst1.64	{d16-d17}, [r3 :128]
   16f08:	movw	r3, #53168	; 0xcfb0
   16f0c:	movt	r3, #2
   16f10:	vst1.64	{d16-d17}, [r0 :128]
   16f14:	movw	r0, #52944	; 0xced0
   16f18:	movt	r0, #2
   16f1c:	vst1.64	{d16-d17}, [r0 :128]
   16f20:	movw	r0, #52960	; 0xcee0
   16f24:	movt	r0, #2
   16f28:	vst1.64	{d16-d17}, [r0 :128]
   16f2c:	movw	r0, #53008	; 0xcf10
   16f30:	movt	r0, #2
   16f34:	vst1.64	{d16-d17}, [r0 :128]
   16f38:	movw	r0, #53024	; 0xcf20
   16f3c:	movt	r0, #2
   16f40:	add	r1, r0, #16
   16f44:	str	ip, [r0, #80]	; 0x50
   16f48:	vst1.64	{d16-d17}, [r1 :128]
   16f4c:	add	r1, r0, #32
   16f50:	vst1.64	{d16-d17}, [r1 :128]
   16f54:	add	r1, r0, #48	; 0x30
   16f58:	vst1.64	{d16-d17}, [r1 :128]
   16f5c:	add	r1, r0, #64	; 0x40
   16f60:	vst1.64	{d16-d17}, [r1 :128]
   16f64:	add	r1, r3, #16
   16f68:	vst1.64	{d16-d17}, [r1 :128]
   16f6c:	movw	r1, #52976	; 0xcef0
   16f70:	movt	r1, #2
   16f74:	vst1.64	{d16-d17}, [r1 :128]!
   16f78:	vst1.64	{d16-d17}, [r1 :128]
   16f7c:	mov	r1, #84	; 0x54
   16f80:	vst1.64	{d16-d17}, [r0 :128], r1
   16f84:	mov	r1, #0
   16f88:	str	ip, [r0]
   16f8c:	mov	r0, #36	; 0x24
   16f90:	vst1.64	{d16-d17}, [r2 :128], r0
   16f94:	mov	r0, #32
   16f98:	vst1.64	{d16-d17}, [r3 :128], r0
   16f9c:	movw	r0, #53216	; 0xcfe0
   16fa0:	str	ip, [r2]
   16fa4:	mov	r2, #136	; 0x88
   16fa8:	movt	r0, #2
   16fac:	vst1.64	{d16-d17}, [r3 :128]
   16fb0:	vst1.64	{d16-d17}, [r0 :128]!
   16fb4:	vst1.64	{d16-d17}, [r0 :128]
   16fb8:	movw	r0, #53248	; 0xd000
   16fbc:	movt	r0, #2
   16fc0:	vst1.64	{d16-d17}, [r0 :128]
   16fc4:	movw	r0, #53264	; 0xd010
   16fc8:	movt	r0, #2
   16fcc:	vst1.64	{d16-d17}, [r0 :128]!
   16fd0:	vst1.64	{d16-d17}, [r0 :128]
   16fd4:	movw	r0, #53296	; 0xd030
   16fd8:	movt	r0, #2
   16fdc:	bl	12068 <memset@plt>
   16fe0:	pop	{fp, pc}
   16fe4:	movw	r0, #28240	; 0x6e50
   16fe8:	movw	r1, #28368	; 0x6ed0
   16fec:	movt	r0, #1
   16ff0:	movt	r1, #1
   16ff4:	b	19974 <__gcov_flush@@Base+0xb8>
   16ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ffc:	add	fp, sp, #28
   17000:	sub	sp, sp, #36	; 0x24
   17004:	mov	r9, r1
   17008:	mov	r6, r0
   1700c:	add	r0, sp, #28
   17010:	add	r1, sp, #32
   17014:	mov	r8, r2
   17018:	bl	19e0c <__gcov_flush@@Base+0x550>
   1701c:	cmp	r0, #0
   17020:	beq	17064 <__generate_code_for_binary_boolean_expression@@Base+0x4d4>
   17024:	mov	r4, r0
   17028:	mov	r0, r6
   1702c:	ldr	r5, [sp, #32]
   17030:	bl	12014 <strlen@plt>
   17034:	add	r0, r5, r0
   17038:	add	r0, r0, #2
   1703c:	bl	11fcc <malloc@plt>
   17040:	mov	r7, r0
   17044:	ldr	r0, [sp, #28]
   17048:	mov	r1, r6
   1704c:	mov	r2, r4
   17050:	str	r0, [sp]
   17054:	mov	r0, r7
   17058:	mov	r3, r5
   1705c:	bl	19ea0 <__gcov_flush@@Base+0x5e4>
   17060:	b	17070 <__generate_code_for_binary_boolean_expression@@Base+0x4e0>
   17064:	mov	r0, r6
   17068:	bl	11f90 <strdup@plt>
   1706c:	mov	r7, r0
   17070:	ldr	r0, [pc, #1492]	; 1764c <__generate_code_for_binary_boolean_expression@@Base+0xabc>
   17074:	ldr	r6, [pc, #1492]	; 17650 <__generate_code_for_binary_boolean_expression@@Base+0xac0>
   17078:	mov	r1, #2
   1707c:	add	r0, pc, r0
   17080:	add	r6, pc, r6
   17084:	str	r7, [r0]
   17088:	mov	r0, r7
   1708c:	mov	r5, #0
   17090:	strb	r5, [r6]
   17094:	bl	11fb4 <open64@plt>
   17098:	ldr	r4, [pc, #1460]	; 17654 <__generate_code_for_binary_boolean_expression@@Base+0xac4>
   1709c:	cmn	r0, #1
   170a0:	add	r4, pc, r4
   170a4:	str	r0, [r4]
   170a8:	beq	170b8 <__generate_code_for_binary_boolean_expression@@Base+0x528>
   170ac:	ldr	r6, [pc, #1444]	; 17658 <__generate_code_for_binary_boolean_expression@@Base+0xac8>
   170b0:	add	r6, pc, r6
   170b4:	b	17114 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   170b8:	mov	r0, #1
   170bc:	strb	r0, [r6]
   170c0:	ldr	r0, [pc, #1488]	; 17698 <__generate_code_for_binary_boolean_expression@@Base+0xb08>
   170c4:	mov	r1, #66	; 0x42
   170c8:	mov	r2, #420	; 0x1a4
   170cc:	ldr	r0, [pc, r0]
   170d0:	bl	11fb4 <open64@plt>
   170d4:	ldr	r6, [pc, #1472]	; 1769c <__generate_code_for_binary_boolean_expression@@Base+0xb0c>
   170d8:	cmn	r0, #1
   170dc:	str	r0, [r4]
   170e0:	add	r6, pc, r6
   170e4:	bne	17114 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   170e8:	ldr	r0, [pc, #1456]	; 176a0 <__generate_code_for_binary_boolean_expression@@Base+0xb10>
   170ec:	ldr	r0, [pc, r0]
   170f0:	bl	19a84 <__gcov_flush@@Base+0x1c8>
   170f4:	ldr	r0, [pc, #1448]	; 176a4 <__generate_code_for_binary_boolean_expression@@Base+0xb14>
   170f8:	mov	r1, #66	; 0x42
   170fc:	mov	r2, #420	; 0x1a4
   17100:	ldr	r0, [pc, r0]
   17104:	bl	11fb4 <open64@plt>
   17108:	cmn	r0, #1
   1710c:	str	r0, [r4]
   17110:	beq	17604 <__generate_code_for_binary_boolean_expression@@Base+0xa74>
   17114:	str	r9, [sp, #20]
   17118:	str	r8, [sp, #24]
   1711c:	bl	19b48 <__gcov_flush@@Base+0x28c>
   17120:	ldr	r0, [pc, #1332]	; 1765c <__generate_code_for_binary_boolean_expression@@Base+0xacc>
   17124:	mov	r1, r6
   17128:	ldr	r0, [pc, r0]
   1712c:	bl	11f24 <fdopen@plt>
   17130:	ldr	r7, [pc, #1320]	; 17660 <__generate_code_for_binary_boolean_expression@@Base+0xad0>
   17134:	ldr	r9, [pc, #1320]	; 17664 <__generate_code_for_binary_boolean_expression@@Base+0xad4>
   17138:	ldr	r1, [pc, #1320]	; 17668 <__generate_code_for_binary_boolean_expression@@Base+0xad8>
   1713c:	ldr	sl, [pc, #1320]	; 1766c <__generate_code_for_binary_boolean_expression@@Base+0xadc>
   17140:	add	r7, pc, r7
   17144:	add	r9, pc, r9
   17148:	add	r1, pc, r1
   1714c:	add	sl, pc, sl
   17150:	str	r5, [r7]
   17154:	str	r5, [r7, #4]
   17158:	str	r5, [r9]
   1715c:	str	r5, [r9, #4]
   17160:	str	r0, [r1]
   17164:	str	r5, [sl]
   17168:	ldr	r6, [pc, #1280]	; 17670 <__generate_code_for_binary_boolean_expression@@Base+0xae0>
   1716c:	mov	r4, #131072	; 0x20000
   17170:	add	r6, pc, r6
   17174:	ldrb	r1, [r6]
   17178:	cmp	r1, #0
   1717c:	beq	17270 <__generate_code_for_binary_boolean_expression@@Base+0x6e0>
   17180:	mov	r0, r4
   17184:	bl	11fcc <malloc@plt>
   17188:	mov	r8, r0
   1718c:	strd	r4, [r7]
   17190:	str	r0, [sl]
   17194:	mov	r0, r8
   17198:	mov	r1, #0
   1719c:	mov	r2, #131072	; 0x20000
   171a0:	bl	12068 <memset@plt>
   171a4:	ldr	r0, [r9, #4]
   171a8:	ldr	r1, [pc, #1284]	; 176b4 <__generate_code_for_binary_boolean_expression@@Base+0xb24>
   171ac:	mov	r7, #7
   171b0:	orr	r7, r7, #131072	; 0x20000
   171b4:	ldr	r1, [pc, r1]
   171b8:	ldr	sl, [pc, #1272]	; 176b8 <__generate_code_for_binary_boolean_expression@@Base+0xb28>
   171bc:	adds	r2, r1, #4
   171c0:	add	sl, pc, sl
   171c4:	adc	r3, r0, #0
   171c8:	ldr	r5, [sl, #4]
   171cc:	ldr	r4, [pc, #1256]	; 176bc <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   171d0:	ldr	r4, [pc, r4]
   171d4:	subs	r2, r4, r2
   171d8:	sbcs	r2, r5, r3
   171dc:	bcs	172f0 <__generate_code_for_binary_boolean_expression@@Base+0x760>
   171e0:	adds	r1, r7, r1
   171e4:	adc	r0, r0, #0
   171e8:	subs	r1, r1, #4
   171ec:	sbc	r0, r0, #0
   171f0:	mvn	r2, #0
   171f4:	and	r5, r0, r2
   171f8:	mov	r0, #16646144	; 0xfe0000
   171fc:	orr	r0, r0, #-16777216	; 0xff000000
   17200:	and	r4, r1, r0
   17204:	mov	r0, r8
   17208:	mov	r1, r4
   1720c:	bl	11f9c <realloc@plt>
   17210:	ldr	r1, [pc, #1068]	; 17644 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   17214:	strd	r4, [sl]
   17218:	mov	r3, r0
   1721c:	mov	r7, r1
   17220:	lsr	r2, r1, #24
   17224:	ldr	r1, [pc, #1176]	; 176c4 <__generate_code_for_binary_boolean_expression@@Base+0xb34>
   17228:	ldrb	r6, [r6]
   1722c:	lsr	r4, r7, #16
   17230:	add	r1, pc, r1
   17234:	str	r0, [r1]
   17238:	ldr	r1, [r9, #4]
   1723c:	ldr	r5, [pc, #1156]	; 176c8 <__generate_code_for_binary_boolean_expression@@Base+0xb38>
   17240:	ldr	r5, [pc, r5]
   17244:	strb	r7, [r3, r5]!
   17248:	strb	r2, [r3, #3]
   1724c:	lsr	r2, r7, #8
   17250:	strb	r2, [r3, #1]
   17254:	adds	r2, r5, #4
   17258:	adc	ip, r1, #0
   1725c:	cmp	r6, #1
   17260:	strb	r4, [r3, #2]
   17264:	stm	r9, {r2, ip}
   17268:	beq	17334 <__generate_code_for_binary_boolean_expression@@Base+0x7a4>
   1726c:	b	174ec <__generate_code_for_binary_boolean_expression@@Base+0x95c>
   17270:	mov	r1, #0
   17274:	mov	r2, #2
   17278:	mov	r8, #0
   1727c:	bl	12104 <fseek@plt>
   17280:	ldr	r0, [pc, #1004]	; 17674 <__generate_code_for_binary_boolean_expression@@Base+0xae4>
   17284:	ldr	r0, [pc, r0]
   17288:	bl	11f78 <ftell@plt>
   1728c:	mov	r2, r0
   17290:	ldr	r0, [pc, #992]	; 17678 <__generate_code_for_binary_boolean_expression@@Base+0xae8>
   17294:	asr	r3, r2, #31
   17298:	add	r0, pc, r0
   1729c:	cmp	r2, #0
   172a0:	strd	r2, [r0]
   172a4:	beq	17594 <__generate_code_for_binary_boolean_expression@@Base+0xa04>
   172a8:	ldr	r0, [pc, #972]	; 1767c <__generate_code_for_binary_boolean_expression@@Base+0xaec>
   172ac:	mov	r1, r2
   172b0:	mov	r2, #3
   172b4:	mov	r3, #1
   172b8:	ldr	r0, [pc, r0]
   172bc:	str	r8, [sp, #8]
   172c0:	str	r8, [sp, #12]
   172c4:	str	r0, [sp]
   172c8:	mov	r0, #0
   172cc:	bl	11f6c <mmap64@plt>
   172d0:	cmn	r0, #1
   172d4:	str	r0, [sl]
   172d8:	beq	1755c <__generate_code_for_binary_boolean_expression@@Base+0x9cc>
   172dc:	ldrb	r1, [r6]
   172e0:	cmp	r1, #0
   172e4:	beq	174ac <__generate_code_for_binary_boolean_expression@@Base+0x91c>
   172e8:	mov	r8, r0
   172ec:	b	171a4 <__generate_code_for_binary_boolean_expression@@Base+0x614>
   172f0:	ldr	r1, [r9, #4]
   172f4:	ldr	r5, [pc, #964]	; 176c0 <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   172f8:	ldr	r0, [pc, #836]	; 17644 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   172fc:	mov	r6, r8
   17300:	ldr	r5, [pc, r5]
   17304:	mov	r7, r0
   17308:	lsr	r2, r7, #16
   1730c:	strb	r7, [r6, r5]!
   17310:	lsr	r0, r0, #24
   17314:	lsr	r3, r7, #8
   17318:	strb	r2, [r6, #2]
   1731c:	adds	r2, r5, #4
   17320:	strb	r0, [r6, #3]
   17324:	strb	r3, [r6, #1]
   17328:	adc	ip, r1, #0
   1732c:	stm	r9, {r2, ip}
   17330:	mov	r0, r8
   17334:	ldr	r7, [sl, #4]
   17338:	ldr	r3, [pc, #908]	; 176cc <__generate_code_for_binary_boolean_expression@@Base+0xb3c>
   1733c:	adds	r6, r5, #8
   17340:	adc	r4, r1, #0
   17344:	ldr	r3, [pc, r3]
   17348:	subs	r3, r3, r6
   1734c:	sbcs	r3, r7, r4
   17350:	bcs	173f4 <__generate_code_for_binary_boolean_expression@@Base+0x864>
   17354:	mov	r2, #7
   17358:	orr	r2, r2, #131072	; 0x20000
   1735c:	adds	r2, r5, r2
   17360:	adc	r1, r1, #0
   17364:	mvn	r3, #0
   17368:	and	r5, r1, r3
   1736c:	mov	r1, #16646144	; 0xfe0000
   17370:	orr	r1, r1, #-16777216	; 0xff000000
   17374:	and	r4, r2, r1
   17378:	mov	r1, r4
   1737c:	bl	11f9c <realloc@plt>
   17380:	strd	r4, [sl]
   17384:	ldr	r1, [pc, #840]	; 176d4 <__generate_code_for_binary_boolean_expression@@Base+0xb44>
   17388:	mov	r4, r0
   1738c:	mov	lr, r9
   17390:	add	r1, pc, r1
   17394:	str	r0, [r1]
   17398:	ldr	r1, [pc, #824]	; 176d8 <__generate_code_for_binary_boolean_expression@@Base+0xb48>
   1739c:	ldr	r2, [sp, #20]
   173a0:	ldr	ip, [r9, #4]
   173a4:	add	r1, pc, r1
   173a8:	ldrb	r3, [r1]
   173ac:	ldrb	r1, [r2]
   173b0:	ldrb	r7, [r2, #1]
   173b4:	ldrb	r6, [r2, #2]
   173b8:	ldrb	r5, [r2, #3]
   173bc:	ldr	r2, [pc, #792]	; 176dc <__generate_code_for_binary_boolean_expression@@Base+0xb4c>
   173c0:	ldr	r2, [pc, r2]
   173c4:	strb	r1, [r4, r2]!
   173c8:	strb	r5, [r4, #3]
   173cc:	ldr	r5, [sp, #24]
   173d0:	strb	r6, [r4, #2]
   173d4:	adds	r6, r2, #4
   173d8:	adc	r1, ip, #0
   173dc:	cmp	r3, #1
   173e0:	str	r6, [lr]
   173e4:	strb	r7, [r4, #1]
   173e8:	str	r1, [lr, #4]
   173ec:	beq	17434 <__generate_code_for_binary_boolean_expression@@Base+0x8a4>
   173f0:	b	1752c <__generate_code_for_binary_boolean_expression@@Base+0x99c>
   173f4:	ldr	r6, [sp, #20]
   173f8:	mov	r5, r0
   173fc:	ldrb	r1, [r6]
   17400:	ldrb	r3, [r6, #1]
   17404:	ldrb	r7, [r6, #2]
   17408:	ldrb	r6, [r6, #3]
   1740c:	strb	r1, [r5, r2]!
   17410:	strb	r6, [r5, #3]
   17414:	strb	r3, [r5, #1]
   17418:	adds	r6, r2, #4
   1741c:	mov	r3, r9
   17420:	adc	r1, ip, #0
   17424:	strb	r7, [r5, #2]
   17428:	str	r6, [r3]
   1742c:	str	r1, [r3, #4]
   17430:	ldr	r5, [sp, #24]
   17434:	ldr	r7, [sl, #4]
   17438:	ldr	r4, [pc, #672]	; 176e0 <__generate_code_for_binary_boolean_expression@@Base+0xb50>
   1743c:	adds	r3, r2, #8
   17440:	adc	lr, ip, #0
   17444:	ldr	r4, [pc, r4]
   17448:	subs	r3, r4, r3
   1744c:	sbcs	r3, r7, lr
   17450:	bcs	174a4 <__generate_code_for_binary_boolean_expression@@Base+0x914>
   17454:	mov	r1, #7
   17458:	orr	r1, r1, #131072	; 0x20000
   1745c:	adds	r1, r2, r1
   17460:	adc	r2, ip, #0
   17464:	mvn	r3, #0
   17468:	and	r7, r2, r3
   1746c:	mov	r2, #16646144	; 0xfe0000
   17470:	orr	r2, r2, #-16777216	; 0xff000000
   17474:	and	r4, r1, r2
   17478:	mov	r1, r4
   1747c:	bl	11f9c <realloc@plt>
   17480:	stm	sl, {r4, r7}
   17484:	ldr	r1, [r9, #4]
   17488:	ldr	r2, [pc, #596]	; 176e4 <__generate_code_for_binary_boolean_expression@@Base+0xb54>
   1748c:	mov	lr, r9
   17490:	add	r2, pc, r2
   17494:	str	r0, [r2]
   17498:	ldr	r6, [pc, #584]	; 176e8 <__generate_code_for_binary_boolean_expression@@Base+0xb58>
   1749c:	ldr	r6, [pc, r6]
   174a0:	b	1752c <__generate_code_for_binary_boolean_expression@@Base+0x99c>
   174a4:	mov	lr, r9
   174a8:	b	1752c <__generate_code_for_binary_boolean_expression@@Base+0x99c>
   174ac:	ldr	r6, [r9, #4]
   174b0:	ldr	r5, [pc, #536]	; 176d0 <__generate_code_for_binary_boolean_expression@@Base+0xb40>
   174b4:	ldr	r1, [pc, #392]	; 17644 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   174b8:	mov	r4, r0
   174bc:	ldr	r5, [pc, r5]
   174c0:	mov	r7, r1
   174c4:	lsr	r2, r7, #16
   174c8:	strb	r7, [r4, r5]!
   174cc:	lsr	r1, r1, #24
   174d0:	strb	r2, [r4, #2]
   174d4:	adds	r2, r5, #4
   174d8:	lsr	r3, r7, #8
   174dc:	adc	ip, r6, #0
   174e0:	strb	r1, [r4, #3]
   174e4:	strb	r3, [r4, #1]
   174e8:	stm	r9, {r2, ip}
   174ec:	ldr	r4, [sp, #20]
   174f0:	mov	r5, r0
   174f4:	mov	lr, r9
   174f8:	ldrb	r1, [r4]
   174fc:	ldrb	r6, [r4, #3]
   17500:	ldrb	r3, [r4, #1]
   17504:	ldrb	r7, [r4, #2]
   17508:	strb	r1, [r5, r2]!
   1750c:	strb	r6, [r5, #3]
   17510:	adds	r6, r2, #4
   17514:	adc	r1, ip, #0
   17518:	strb	r7, [r5, #2]
   1751c:	strb	r3, [r5, #1]
   17520:	str	r6, [lr]
   17524:	str	r1, [lr, #4]
   17528:	ldr	r5, [sp, #24]
   1752c:	lsr	r2, r5, #24
   17530:	strb	r5, [r0, r6]!
   17534:	lsr	r3, r5, #16
   17538:	lsr	r7, r5, #8
   1753c:	strb	r2, [r0, #3]
   17540:	strb	r3, [r0, #2]
   17544:	strb	r7, [r0, #1]
   17548:	adds	r0, r6, #4
   1754c:	adc	r1, r1, #0
   17550:	strd	r0, [lr]
   17554:	sub	sp, fp, #28
   17558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1755c:	bl	12044 <__errno_location@plt>
   17560:	ldr	r1, [pc, #280]	; 17680 <__generate_code_for_binary_boolean_expression@@Base+0xaf0>
   17564:	ldr	r1, [pc, r1]
   17568:	ldr	r0, [r0]
   1756c:	ldr	r4, [r1]
   17570:	ldr	r5, [pc, #268]	; 17684 <__generate_code_for_binary_boolean_expression@@Base+0xaf4>
   17574:	ldr	r5, [pc, r5]
   17578:	bl	11fe4 <strerror@plt>
   1757c:	ldr	r1, [pc, #260]	; 17688 <__generate_code_for_binary_boolean_expression@@Base+0xaf8>
   17580:	mov	r3, r0
   17584:	mov	r0, r4
   17588:	add	r1, pc, r1
   1758c:	mov	r2, r5
   17590:	bl	12038 <fprintf@plt>
   17594:	ldr	r0, [pc, #240]	; 1768c <__generate_code_for_binary_boolean_expression@@Base+0xafc>
   17598:	str	r8, [sl]
   1759c:	mov	r2, #16646144	; 0xfe0000
   175a0:	add	r0, pc, r0
   175a4:	orr	r2, r2, #-16777216	; 0xff000000
   175a8:	str	r8, [r0]
   175ac:	str	r8, [r0, #4]
   175b0:	mov	r0, #1
   175b4:	strb	r0, [r6]
   175b8:	ldr	r0, [r9, #4]
   175bc:	ldr	r1, [pc, #204]	; 17690 <__generate_code_for_binary_boolean_expression@@Base+0xb00>
   175c0:	mvn	r3, #0
   175c4:	eor	r3, r0, r3
   175c8:	ldr	r1, [pc, r1]
   175cc:	eor	r2, r1, r2
   175d0:	orrs	r2, r2, r3
   175d4:	beq	17194 <__generate_code_for_binary_boolean_expression@@Base+0x604>
   175d8:	ldr	r2, [pc, #104]	; 17648 <__generate_code_for_binary_boolean_expression@@Base+0xab8>
   175dc:	ldr	r7, [pc, #176]	; 17694 <__generate_code_for_binary_boolean_expression@@Base+0xb04>
   175e0:	adds	r1, r1, r2
   175e4:	mov	r2, #16646144	; 0xfe0000
   175e8:	orr	r2, r2, #-16777216	; 0xff000000
   175ec:	and	r4, r1, r2
   175f0:	adc	r0, r0, #0
   175f4:	mvn	r1, #0
   175f8:	and	r5, r0, r1
   175fc:	add	r7, pc, r7
   17600:	b	17180 <__generate_code_for_binary_boolean_expression@@Base+0x5f0>
   17604:	bl	12044 <__errno_location@plt>
   17608:	ldr	r1, [pc, #152]	; 176a8 <__generate_code_for_binary_boolean_expression@@Base+0xb18>
   1760c:	ldr	r1, [pc, r1]
   17610:	ldr	r0, [r0]
   17614:	ldr	r4, [r1]
   17618:	ldr	r5, [pc, #140]	; 176ac <__generate_code_for_binary_boolean_expression@@Base+0xb1c>
   1761c:	ldr	r5, [pc, r5]
   17620:	bl	11fe4 <strerror@plt>
   17624:	ldr	r1, [pc, #132]	; 176b0 <__generate_code_for_binary_boolean_expression@@Base+0xb20>
   17628:	mov	r3, r0
   1762c:	mov	r0, r4
   17630:	add	r1, pc, r1
   17634:	mov	r2, r5
   17638:	bl	12038 <fprintf@plt>
   1763c:	sub	sp, fp, #28
   17640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17644:	strbvs	r6, [r3, -r1, ror #8]!
   17648:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1764c:	andeq	r6, r1, r4, lsr r0
   17650:	andeq	r6, r1, r4, lsr r0
   17654:	andeq	r5, r1, ip, lsr #32
   17658:	muleq	r0, r0, r2
   1765c:	andeq	r4, r1, r4, lsr #31
   17660:	andeq	r5, r1, r0, lsl #31
   17664:	andeq	r5, r1, r4, lsl #31
   17668:	andeq	r5, r1, r0, ror pc
   1766c:	andeq	r5, r1, r0, ror pc
   17670:	andeq	r5, r1, r4, asr #30
   17674:	andeq	r5, r1, r4, lsr lr
   17678:	andeq	r5, r1, r8, asr #28
   1767c:	andeq	r4, r1, r4, lsl lr
   17680:	andeq	r4, r1, r8, asr fp
   17684:	andeq	r5, r1, ip, lsr fp
   17688:	andeq	r3, r0, sl, lsl pc
   1768c:	andeq	r5, r1, r0, lsr #22
   17690:	andeq	r5, r1, r0, lsl #22
   17694:	andeq	r5, r1, r4, asr #21
   17698:	andeq	r5, r1, r4, ror #31
   1769c:	andeq	r4, r0, r4, ror #4
   176a0:	andeq	r5, r1, r4, asr #31
   176a4:			; <UNDEFINED> instruction: 0x00015fb0
   176a8:			; <UNDEFINED> instruction: 0x00014ab0
   176ac:	muleq	r1, r4, sl
   176b0:	andeq	r3, r0, r8, lsl sp
   176b4:	andeq	r5, r1, r4, lsl pc
   176b8:	andeq	r5, r1, r0, lsl #30
   176bc:	strdeq	r5, [r1], -r0
   176c0:	andeq	r5, r1, r8, asr #27
   176c4:	andeq	r5, r1, ip, lsl #29
   176c8:	andeq	r5, r1, r8, lsl #29
   176cc:	andeq	r5, r1, ip, ror sp
   176d0:	andeq	r5, r1, ip, lsl #24
   176d4:	andeq	r5, r1, ip, lsr #26
   176d8:	andeq	r5, r1, r0, lsl sp
   176dc:	andeq	r5, r1, r8, lsl #26
   176e0:	andeq	r5, r1, ip, ror ip
   176e4:	andeq	r5, r1, ip, lsr #24
   176e8:	andeq	r5, r1, ip, lsr #24
   176ec:	ldr	r0, [r0]
   176f0:	cmn	r0, #1
   176f4:	beq	17714 <__generate_code_for_binary_boolean_expression@@Base+0xb84>
   176f8:	ldr	r0, [r1, r0, lsl #2]
   176fc:	cmp	r0, #0
   17700:	bxeq	lr
   17704:	ldrd	r2, [r0]
   17708:	adds	r2, r2, #1
   1770c:	adc	r3, r3, #0
   17710:	strd	r2, [r0]
   17714:	bx	lr
   17718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1771c:	add	fp, sp, #28
   17720:	sub	sp, sp, #12
   17724:	ldr	r7, [pc, #2008]	; 17f04 <__generate_code_for_binary_boolean_expression@@Base+0x1374>
   17728:	mov	sl, #2
   1772c:	cmp	r3, #0
   17730:	movne	sl, #3
   17734:	ldr	r7, [pc, r7]
   17738:	cmp	r7, #0
   1773c:	beq	17efc <__generate_code_for_binary_boolean_expression@@Base+0x136c>
   17740:	stm	sp, {r0, r2, r3}
   17744:	ldr	r0, [pc, #1980]	; 17f08 <__generate_code_for_binary_boolean_expression@@Base+0x1378>
   17748:	mov	r5, r1
   1774c:	add	r0, pc, r0
   17750:	ldrb	r0, [r0]
   17754:	ldr	r8, [pc, #1968]	; 17f0c <__generate_code_for_binary_boolean_expression@@Base+0x137c>
   17758:	cmp	r0, #1
   1775c:	add	r8, pc, r8
   17760:	bne	177e4 <__generate_code_for_binary_boolean_expression@@Base+0xc54>
   17764:	ldr	r4, [pc, #1956]	; 17f10 <__generate_code_for_binary_boolean_expression@@Base+0x1380>
   17768:	ldr	r0, [r8, #4]
   1776c:	ldr	r1, [pc, #1952]	; 17f14 <__generate_code_for_binary_boolean_expression@@Base+0x1384>
   17770:	add	r4, pc, r4
   17774:	ldr	r1, [pc, r1]
   17778:	ldr	r7, [r4, #4]
   1777c:	ldr	r6, [pc, #1940]	; 17f18 <__generate_code_for_binary_boolean_expression@@Base+0x1388>
   17780:	adds	r2, r1, #4
   17784:	adc	r3, r0, #0
   17788:	ldr	r6, [pc, r6]
   1778c:	subs	r2, r6, r2
   17790:	sbcs	r2, r7, r3
   17794:	bcs	177e4 <__generate_code_for_binary_boolean_expression@@Base+0xc54>
   17798:	mov	r2, #7
   1779c:	orr	r2, r2, #131072	; 0x20000
   177a0:	adds	r1, r2, r1
   177a4:	adc	r0, r0, #0
   177a8:	subs	r1, r1, #4
   177ac:	sbc	r0, r0, #0
   177b0:	mvn	r2, #0
   177b4:	and	r7, r0, r2
   177b8:	mov	r0, #16646144	; 0xfe0000
   177bc:	orr	r0, r0, #-16777216	; 0xff000000
   177c0:	ldr	r9, [pc, #1876]	; 17f1c <__generate_code_for_binary_boolean_expression@@Base+0x138c>
   177c4:	and	r6, r1, r0
   177c8:	ldr	r0, [pc, #1872]	; 17f20 <__generate_code_for_binary_boolean_expression@@Base+0x1390>
   177cc:	mov	r1, r6
   177d0:	add	r9, pc, r9
   177d4:	ldr	r0, [pc, r0]
   177d8:	bl	11f9c <realloc@plt>
   177dc:	strd	r6, [r4]
   177e0:	str	r0, [r9]
   177e4:	ldr	r7, [pc, #1848]	; 17f24 <__generate_code_for_binary_boolean_expression@@Base+0x1394>
   177e8:	mov	r0, #0
   177ec:	mov	r2, #1
   177f0:	ldr	r7, [pc, r7]
   177f4:	ldr	ip, [pc, #1836]	; 17f28 <__generate_code_for_binary_boolean_expression@@Base+0x1398>
   177f8:	adds	r4, r7, #4
   177fc:	ldr	ip, [pc, ip]
   17800:	ldr	r6, [r8, #4]
   17804:	mov	r1, ip
   17808:	adc	r9, r6, #0
   1780c:	strb	r0, [r1, r7]!
   17810:	cmp	r5, #0
   17814:	strb	r2, [r1, #3]
   17818:	strb	r0, [r1, #2]
   1781c:	strb	r0, [r1, #1]
   17820:	stm	r8, {r4, r9}
   17824:	mov	r8, r5
   17828:	beq	17844 <__generate_code_for_binary_boolean_expression@@Base+0xcb4>
   1782c:	mov	r0, r8
   17830:	mov	r5, ip
   17834:	bl	12014 <strlen@plt>
   17838:	add	r0, sl, r0, lsr #2
   1783c:	mov	ip, r5
   17840:	add	sl, r0, #2
   17844:	ldr	r0, [pc, #1760]	; 17f2c <__generate_code_for_binary_boolean_expression@@Base+0x139c>
   17848:	add	r0, pc, r0
   1784c:	ldrb	r0, [r0]
   17850:	cmp	r0, #0
   17854:	beq	17930 <__generate_code_for_binary_boolean_expression@@Base+0xda0>
   17858:	ldr	lr, [pc, #1748]	; 17f34 <__generate_code_for_binary_boolean_expression@@Base+0x13a4>
   1785c:	adds	r0, r7, #8
   17860:	adc	r1, r6, #0
   17864:	add	lr, pc, lr
   17868:	ldr	r2, [lr, #4]
   1786c:	ldr	r3, [pc, #1732]	; 17f38 <__generate_code_for_binary_boolean_expression@@Base+0x13a8>
   17870:	ldr	r3, [pc, r3]
   17874:	subs	r0, r3, r0
   17878:	sbcs	r0, r2, r1
   1787c:	bcs	1799c <__generate_code_for_binary_boolean_expression@@Base+0xe0c>
   17880:	mov	r0, #7
   17884:	orr	r0, r0, #131072	; 0x20000
   17888:	adds	r0, r7, r0
   1788c:	adc	r1, r6, #0
   17890:	mvn	r2, #0
   17894:	and	r5, r1, r2
   17898:	mov	r1, #16646144	; 0xfe0000
   1789c:	orr	r1, r1, #-16777216	; 0xff000000
   178a0:	and	r6, r0, r1
   178a4:	ldr	r4, [pc, #1684]	; 17f40 <__generate_code_for_binary_boolean_expression@@Base+0x13b0>
   178a8:	mov	r0, ip
   178ac:	mov	r1, r6
   178b0:	add	r4, pc, r4
   178b4:	mov	r7, lr
   178b8:	bl	11f9c <realloc@plt>
   178bc:	mov	lr, r7
   178c0:	mov	ip, r0
   178c4:	str	r6, [lr]
   178c8:	str	r5, [lr, #4]
   178cc:	str	ip, [r4]
   178d0:	ldr	r1, [pc, #1644]	; 17f44 <__generate_code_for_binary_boolean_expression@@Base+0x13b4>
   178d4:	lsr	r0, sl, #24
   178d8:	add	r1, pc, r1
   178dc:	lsr	r3, sl, #16
   178e0:	ldrb	r2, [r1]
   178e4:	ldr	r1, [pc, #1628]	; 17f48 <__generate_code_for_binary_boolean_expression@@Base+0x13b8>
   178e8:	add	r1, pc, r1
   178ec:	mov	r7, r1
   178f0:	ldr	r9, [r1, #4]
   178f4:	ldr	r4, [pc, #1616]	; 17f4c <__generate_code_for_binary_boolean_expression@@Base+0x13bc>
   178f8:	mov	r1, ip
   178fc:	ldr	r4, [pc, r4]
   17900:	strb	sl, [r1, r4]!
   17904:	strb	r0, [r1, #3]
   17908:	lsr	r0, sl, #8
   1790c:	strb	r0, [r1, #1]
   17910:	adds	r0, r4, #4
   17914:	strb	r3, [r1, #2]
   17918:	adc	r1, r9, #0
   1791c:	mov	sl, r7
   17920:	cmp	r2, #1
   17924:	strd	r0, [sl]
   17928:	bne	17964 <__generate_code_for_binary_boolean_expression@@Base+0xdd4>
   1792c:	b	179d0 <__generate_code_for_binary_boolean_expression@@Base+0xe40>
   17930:	mov	r3, ip
   17934:	lsr	r0, sl, #24
   17938:	strb	sl, [r3, r4]!
   1793c:	lsr	r1, sl, #16
   17940:	lsr	r2, sl, #8
   17944:	strb	r0, [r3, #3]
   17948:	strb	r1, [r3, #2]
   1794c:	strb	r2, [r3, #1]
   17950:	ldr	sl, [pc, #1496]	; 17f30 <__generate_code_for_binary_boolean_expression@@Base+0x13a0>
   17954:	adds	r0, r7, #8
   17958:	adc	r1, r6, #0
   1795c:	add	sl, pc, sl
   17960:	strd	r0, [sl]
   17964:	ldr	r5, [sp]
   17968:	mov	r6, ip
   1796c:	lsr	r2, r5, #24
   17970:	strb	r5, [r6, r0]!
   17974:	lsr	r3, r5, #16
   17978:	lsr	r7, r5, #8
   1797c:	strb	r2, [r6, #3]
   17980:	strb	r3, [r6, #2]
   17984:	strb	r7, [r6, #1]
   17988:	adds	r2, r0, #4
   1798c:	adc	r3, r1, #0
   17990:	ldmib	sp, {r5, r9}
   17994:	strd	r2, [sl]
   17998:	b	17b44 <__generate_code_for_binary_boolean_expression@@Base+0xfb4>
   1799c:	mov	r3, ip
   179a0:	lsr	r0, sl, #24
   179a4:	strb	sl, [r3, r4]!
   179a8:	lsr	r1, sl, #16
   179ac:	lsr	r2, sl, #8
   179b0:	strb	r0, [r3, #3]
   179b4:	strb	r1, [r3, #2]
   179b8:	strb	r2, [r3, #1]
   179bc:	ldr	sl, [pc, #1400]	; 17f3c <__generate_code_for_binary_boolean_expression@@Base+0x13ac>
   179c0:	adds	r0, r7, #8
   179c4:	adc	r1, r6, #0
   179c8:	add	sl, pc, sl
   179cc:	strd	r0, [sl]
   179d0:	ldr	r7, [lr, #4]
   179d4:	ldr	r6, [pc, #1396]	; 17f50 <__generate_code_for_binary_boolean_expression@@Base+0x13c0>
   179d8:	adds	r2, r4, #8
   179dc:	adc	r3, r9, #0
   179e0:	ldr	r6, [pc, r6]
   179e4:	subs	r2, r6, r2
   179e8:	sbcs	r2, r7, r3
   179ec:	bcs	17a94 <__generate_code_for_binary_boolean_expression@@Base+0xf04>
   179f0:	mov	r0, #7
   179f4:	orr	r0, r0, #131072	; 0x20000
   179f8:	adds	r0, r4, r0
   179fc:	adc	r1, r9, #0
   17a00:	mvn	r2, #0
   17a04:	and	r5, r1, r2
   17a08:	mov	r1, #16646144	; 0xfe0000
   17a0c:	orr	r1, r1, #-16777216	; 0xff000000
   17a10:	and	r4, r0, r1
   17a14:	ldr	r7, [pc, #1336]	; 17f54 <__generate_code_for_binary_boolean_expression@@Base+0x13c4>
   17a18:	mov	r0, ip
   17a1c:	mov	r1, r4
   17a20:	add	r7, pc, r7
   17a24:	mov	r6, lr
   17a28:	bl	11f9c <realloc@plt>
   17a2c:	mov	lr, r6
   17a30:	str	r0, [r7]
   17a34:	strd	r4, [lr]
   17a38:	mov	ip, r0
   17a3c:	ldr	r6, [sp]
   17a40:	ldr	r0, [pc, #1296]	; 17f58 <__generate_code_for_binary_boolean_expression@@Base+0x13c8>
   17a44:	ldr	r1, [sl, #4]
   17a48:	mov	r3, ip
   17a4c:	add	r0, pc, r0
   17a50:	lsr	r2, r6, #24
   17a54:	ldrb	r7, [r0]
   17a58:	ldr	r0, [pc, #1276]	; 17f5c <__generate_code_for_binary_boolean_expression@@Base+0x13cc>
   17a5c:	ldr	r0, [pc, r0]
   17a60:	strb	r6, [r3, r0]!
   17a64:	ldmib	sp, {r5, r9}
   17a68:	strb	r2, [r3, #3]
   17a6c:	lsr	r2, r6, #8
   17a70:	lsr	r6, r6, #16
   17a74:	strb	r2, [r3, #1]
   17a78:	adds	r2, r0, #4
   17a7c:	strb	r6, [r3, #2]
   17a80:	adc	r3, r1, #0
   17a84:	cmp	r7, #1
   17a88:	strd	r2, [sl]
   17a8c:	beq	17ac8 <__generate_code_for_binary_boolean_expression@@Base+0xf38>
   17a90:	b	17b44 <__generate_code_for_binary_boolean_expression@@Base+0xfb4>
   17a94:	ldr	r5, [sp]
   17a98:	mov	r6, ip
   17a9c:	lsr	r2, r5, #24
   17aa0:	strb	r5, [r6, r0]!
   17aa4:	lsr	r3, r5, #16
   17aa8:	lsr	r7, r5, #8
   17aac:	strb	r2, [r6, #3]
   17ab0:	strb	r3, [r6, #2]
   17ab4:	strb	r7, [r6, #1]
   17ab8:	adds	r2, r0, #4
   17abc:	adc	r3, r1, #0
   17ac0:	ldmib	sp, {r5, r9}
   17ac4:	strd	r2, [sl]
   17ac8:	str	r8, [sp, #8]
   17acc:	mov	r8, lr
   17ad0:	adds	r7, r0, #8
   17ad4:	ldr	r6, [r8, #4]
   17ad8:	ldr	r4, [pc, #1152]	; 17f60 <__generate_code_for_binary_boolean_expression@@Base+0x13d0>
   17adc:	adc	lr, r1, #0
   17ae0:	ldr	r4, [pc, r4]
   17ae4:	subs	r7, r4, r7
   17ae8:	sbcs	r7, r6, lr
   17aec:	bcs	17b40 <__generate_code_for_binary_boolean_expression@@Base+0xfb0>
   17af0:	mov	r2, #7
   17af4:	orr	r2, r2, #131072	; 0x20000
   17af8:	adds	r0, r0, r2
   17afc:	adc	r1, r1, #0
   17b00:	mvn	r2, #0
   17b04:	and	r7, r1, r2
   17b08:	mov	r1, #16646144	; 0xfe0000
   17b0c:	orr	r1, r1, #-16777216	; 0xff000000
   17b10:	and	r6, r0, r1
   17b14:	ldr	r4, [pc, #1096]	; 17f64 <__generate_code_for_binary_boolean_expression@@Base+0x13d4>
   17b18:	mov	r0, ip
   17b1c:	mov	r1, r6
   17b20:	add	r4, pc, r4
   17b24:	bl	11f9c <realloc@plt>
   17b28:	strd	r6, [r8]
   17b2c:	str	r0, [r4]
   17b30:	ldr	r3, [sl, #4]
   17b34:	ldr	r2, [pc, #1068]	; 17f68 <__generate_code_for_binary_boolean_expression@@Base+0x13d8>
   17b38:	mov	ip, r0
   17b3c:	ldr	r2, [pc, r2]
   17b40:	ldr	r8, [sp, #8]
   17b44:	mov	r6, ip
   17b48:	lsr	r7, r5, #8
   17b4c:	strb	r5, [r6, r2]!
   17b50:	adds	r4, r2, #4
   17b54:	lsr	r0, r5, #24
   17b58:	lsr	r1, r5, #16
   17b5c:	strb	r7, [r6, #1]
   17b60:	adc	r7, r3, #0
   17b64:	cmp	r9, #0
   17b68:	strb	r0, [r6, #3]
   17b6c:	strb	r1, [r6, #2]
   17b70:	stm	sl, {r4, r7}
   17b74:	beq	17c48 <__generate_code_for_binary_boolean_expression@@Base+0x10b8>
   17b78:	ldr	r0, [pc, #1004]	; 17f6c <__generate_code_for_binary_boolean_expression@@Base+0x13dc>
   17b7c:	ldr	sl, [fp, #8]
   17b80:	add	r0, pc, r0
   17b84:	ldrb	r0, [r0]
   17b88:	cmp	r0, #1
   17b8c:	bne	17c14 <__generate_code_for_binary_boolean_expression@@Base+0x1084>
   17b90:	ldr	r9, [pc, #984]	; 17f70 <__generate_code_for_binary_boolean_expression@@Base+0x13e0>
   17b94:	adds	r0, r2, #8
   17b98:	adc	r1, r3, #0
   17b9c:	add	r9, pc, r9
   17ba0:	ldr	r6, [r9, #4]
   17ba4:	ldr	r5, [pc, #968]	; 17f74 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   17ba8:	ldr	r5, [pc, r5]
   17bac:	subs	r0, r5, r0
   17bb0:	sbcs	r0, r6, r1
   17bb4:	bcs	17c14 <__generate_code_for_binary_boolean_expression@@Base+0x1084>
   17bb8:	mov	r0, #7
   17bbc:	orr	r0, r0, #131072	; 0x20000
   17bc0:	adds	r0, r2, r0
   17bc4:	adc	r1, r3, #0
   17bc8:	mvn	r2, #0
   17bcc:	and	r5, r1, r2
   17bd0:	mov	r1, #16646144	; 0xfe0000
   17bd4:	orr	r1, r1, #-16777216	; 0xff000000
   17bd8:	and	r6, r0, r1
   17bdc:	ldr	r4, [pc, #916]	; 17f78 <__generate_code_for_binary_boolean_expression@@Base+0x13e8>
   17be0:	mov	r0, ip
   17be4:	mov	r1, r6
   17be8:	add	r4, pc, r4
   17bec:	bl	11f9c <realloc@plt>
   17bf0:	str	r6, [r9]
   17bf4:	str	r5, [r9, #4]
   17bf8:	mov	ip, r0
   17bfc:	ldr	r0, [pc, #888]	; 17f7c <__generate_code_for_binary_boolean_expression@@Base+0x13ec>
   17c00:	str	ip, [r4]
   17c04:	add	r0, pc, r0
   17c08:	ldr	r7, [r0, #4]
   17c0c:	ldr	r4, [pc, #876]	; 17f80 <__generate_code_for_binary_boolean_expression@@Base+0x13f0>
   17c10:	ldr	r4, [pc, r4]
   17c14:	mov	r3, ip
   17c18:	lsr	r0, sl, #24
   17c1c:	strb	sl, [r3, r4]!
   17c20:	lsr	r1, sl, #16
   17c24:	lsr	r2, sl, #8
   17c28:	strb	r0, [r3, #3]
   17c2c:	strb	r1, [r3, #2]
   17c30:	strb	r2, [r3, #1]
   17c34:	ldr	sl, [pc, #840]	; 17f84 <__generate_code_for_binary_boolean_expression@@Base+0x13f4>
   17c38:	adds	r4, r4, #4
   17c3c:	adc	r7, r7, #0
   17c40:	add	sl, pc, sl
   17c44:	stm	sl, {r4, r7}
   17c48:	cmp	r8, #0
   17c4c:	beq	17efc <__generate_code_for_binary_boolean_expression@@Base+0x136c>
   17c50:	mov	r0, r8
   17c54:	mov	r9, ip
   17c58:	bl	12014 <strlen@plt>
   17c5c:	mov	r6, #1
   17c60:	add	r5, r6, r0, lsr #2
   17c64:	ldr	r0, [pc, #796]	; 17f88 <__generate_code_for_binary_boolean_expression@@Base+0x13f8>
   17c68:	add	r0, pc, r0
   17c6c:	ldrb	r0, [r0]
   17c70:	cmp	r0, #1
   17c74:	bne	17d18 <__generate_code_for_binary_boolean_expression@@Base+0x1188>
   17c78:	ldr	sl, [pc, #780]	; 17f8c <__generate_code_for_binary_boolean_expression@@Base+0x13fc>
   17c7c:	adds	r0, r4, #4
   17c80:	adc	r1, r7, #0
   17c84:	add	sl, pc, sl
   17c88:	ldr	r2, [sl, #4]
   17c8c:	ldr	r3, [pc, #764]	; 17f90 <__generate_code_for_binary_boolean_expression@@Base+0x1400>
   17c90:	ldr	r3, [pc, r3]
   17c94:	subs	r0, r3, r0
   17c98:	sbcs	r0, r2, r1
   17c9c:	bcs	17d2c <__generate_code_for_binary_boolean_expression@@Base+0x119c>
   17ca0:	mov	r0, #0
   17ca4:	str	r0, [sp, #8]
   17ca8:	mov	r0, #7
   17cac:	orr	r0, r0, #131072	; 0x20000
   17cb0:	adds	r0, r0, r4
   17cb4:	adc	r1, r7, #0
   17cb8:	subs	r0, r0, #4
   17cbc:	sbc	r1, r1, #0
   17cc0:	mvn	r2, #0
   17cc4:	and	r7, r1, r2
   17cc8:	mov	r1, #16646144	; 0xfe0000
   17ccc:	orr	r1, r1, #-16777216	; 0xff000000
   17cd0:	and	r4, r0, r1
   17cd4:	ldr	r6, [pc, #700]	; 17f98 <__generate_code_for_binary_boolean_expression@@Base+0x1408>
   17cd8:	mov	r0, r9
   17cdc:	mov	r1, r4
   17ce0:	add	r6, pc, r6
   17ce4:	bl	11f9c <realloc@plt>
   17ce8:	stm	sl, {r4, r7}
   17cec:	str	r0, [r6]
   17cf0:	ldr	sl, [pc, #676]	; 17f9c <__generate_code_for_binary_boolean_expression@@Base+0x140c>
   17cf4:	mov	r3, r0
   17cf8:	add	sl, pc, sl
   17cfc:	ldr	r7, [sl, #4]
   17d00:	ldr	r0, [pc, #664]	; 17fa0 <__generate_code_for_binary_boolean_expression@@Base+0x1410>
   17d04:	add	r0, pc, r0
   17d08:	ldrb	r6, [r0]
   17d0c:	ldr	r4, [pc, #656]	; 17fa4 <__generate_code_for_binary_boolean_expression@@Base+0x1414>
   17d10:	ldr	r4, [pc, r4]
   17d14:	b	17d40 <__generate_code_for_binary_boolean_expression@@Base+0x11b0>
   17d18:	mov	r0, #0
   17d1c:	str	r0, [sp, #8]
   17d20:	mov	r6, #0
   17d24:	mov	r3, r9
   17d28:	b	17d40 <__generate_code_for_binary_boolean_expression@@Base+0x11b0>
   17d2c:	mov	r0, #0
   17d30:	str	r0, [sp, #8]
   17d34:	ldr	sl, [pc, #600]	; 17f94 <__generate_code_for_binary_boolean_expression@@Base+0x1404>
   17d38:	mov	r3, r9
   17d3c:	add	sl, pc, sl
   17d40:	mov	r9, r3
   17d44:	strb	r5, [r3, r4]!
   17d48:	lsr	r0, r5, #24
   17d4c:	adds	r4, r4, #4
   17d50:	lsr	r1, r5, #16
   17d54:	lsr	r2, r5, #8
   17d58:	strb	r0, [r3, #3]
   17d5c:	mov	r0, r8
   17d60:	adc	r5, r7, #0
   17d64:	strb	r1, [r3, #2]
   17d68:	strb	r2, [r3, #1]
   17d6c:	strd	r4, [sl]
   17d70:	bl	12014 <strlen@plt>
   17d74:	mov	r7, r0
   17d78:	cmp	r6, #0
   17d7c:	beq	17e18 <__generate_code_for_binary_boolean_expression@@Base+0x1288>
   17d80:	ldr	r6, [pc, #544]	; 17fa8 <__generate_code_for_binary_boolean_expression@@Base+0x1418>
   17d84:	adds	r0, r4, r7
   17d88:	adc	r1, r5, #0
   17d8c:	add	r6, pc, r6
   17d90:	ldr	r2, [r6, #4]
   17d94:	ldr	r3, [pc, #528]	; 17fac <__generate_code_for_binary_boolean_expression@@Base+0x141c>
   17d98:	ldr	r3, [pc, r3]
   17d9c:	subs	r3, r3, r0
   17da0:	sbcs	r2, r2, r1
   17da4:	bcs	17e10 <__generate_code_for_binary_boolean_expression@@Base+0x1280>
   17da8:	mov	r2, #7
   17dac:	orr	r2, r2, #131072	; 0x20000
   17db0:	adds	r0, r2, r0
   17db4:	adc	r1, r1, #0
   17db8:	subs	r0, r0, #8
   17dbc:	sbc	r1, r1, #0
   17dc0:	mvn	r2, #0
   17dc4:	and	r5, r1, r2
   17dc8:	mov	r1, #16646144	; 0xfe0000
   17dcc:	orr	r1, r1, #-16777216	; 0xff000000
   17dd0:	and	r4, r0, r1
   17dd4:	mov	r0, r9
   17dd8:	mov	r1, r4
   17ddc:	bl	11f9c <realloc@plt>
   17de0:	strd	r4, [r6]
   17de4:	ldr	r1, [pc, #452]	; 17fb0 <__generate_code_for_binary_boolean_expression@@Base+0x1420>
   17de8:	ldr	r5, [sl, #4]
   17dec:	add	r1, pc, r1
   17df0:	str	r0, [r1]
   17df4:	ldr	r1, [pc, #440]	; 17fb4 <__generate_code_for_binary_boolean_expression@@Base+0x1424>
   17df8:	add	r1, pc, r1
   17dfc:	ldrb	r1, [r1]
   17e00:	str	r1, [sp, #8]
   17e04:	ldr	r4, [pc, #428]	; 17fb8 <__generate_code_for_binary_boolean_expression@@Base+0x1428>
   17e08:	ldr	r4, [pc, r4]
   17e0c:	b	17e1c <__generate_code_for_binary_boolean_expression@@Base+0x128c>
   17e10:	mov	r0, #1
   17e14:	str	r0, [sp, #8]
   17e18:	mov	r0, r9
   17e1c:	mov	r9, r0
   17e20:	add	r0, r0, r4
   17e24:	mov	r1, r8
   17e28:	mov	r2, r7
   17e2c:	bl	11f60 <memcpy@plt>
   17e30:	adds	r6, r4, r7
   17e34:	mov	r0, r8
   17e38:	adc	r5, r5, #0
   17e3c:	str	r6, [sl]
   17e40:	str	r5, [sl, #4]
   17e44:	bl	12014 <strlen@plt>
   17e48:	and	r0, r0, #3
   17e4c:	rsb	r4, r0, #4
   17e50:	ldr	r0, [sp, #8]
   17e54:	cmp	r0, #0
   17e58:	beq	17ee0 <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   17e5c:	ldr	r7, [pc, #344]	; 17fbc <__generate_code_for_binary_boolean_expression@@Base+0x142c>
   17e60:	adds	r0, r6, r4
   17e64:	adc	r1, r5, #0
   17e68:	add	r7, pc, r7
   17e6c:	ldr	r2, [r7, #4]
   17e70:	ldr	r3, [pc, #328]	; 17fc0 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   17e74:	ldr	r3, [pc, r3]
   17e78:	subs	r3, r3, r0
   17e7c:	sbcs	r2, r2, r1
   17e80:	bcs	17ee0 <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   17e84:	mov	r2, #7
   17e88:	orr	r2, r2, #131072	; 0x20000
   17e8c:	adds	r0, r2, r0
   17e90:	adc	r1, r1, #0
   17e94:	subs	r0, r0, #8
   17e98:	sbc	r1, r1, #0
   17e9c:	mvn	r2, #0
   17ea0:	and	r5, r1, r2
   17ea4:	mov	r1, #16646144	; 0xfe0000
   17ea8:	orr	r1, r1, #-16777216	; 0xff000000
   17eac:	and	r6, r0, r1
   17eb0:	ldr	r8, [pc, #268]	; 17fc4 <__generate_code_for_binary_boolean_expression@@Base+0x1434>
   17eb4:	mov	r0, r9
   17eb8:	mov	r1, r6
   17ebc:	add	r8, pc, r8
   17ec0:	bl	11f9c <realloc@plt>
   17ec4:	str	r6, [r7]
   17ec8:	str	r5, [r7, #4]
   17ecc:	str	r0, [r8]
   17ed0:	ldr	r5, [sl, #4]
   17ed4:	ldr	r6, [pc, #236]	; 17fc8 <__generate_code_for_binary_boolean_expression@@Base+0x1438>
   17ed8:	mov	r9, r0
   17edc:	ldr	r6, [pc, r6]
   17ee0:	add	r0, r9, r6
   17ee4:	mov	r1, #0
   17ee8:	mov	r2, r4
   17eec:	bl	12068 <memset@plt>
   17ef0:	adds	r0, r6, r4
   17ef4:	adc	r1, r5, #0
   17ef8:	strd	r0, [sl]
   17efc:	sub	sp, fp, #28
   17f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f04:	andeq	r5, r1, r4, lsl #19
   17f08:	andeq	r5, r1, r8, ror #18
   17f0c:	andeq	r5, r1, ip, ror #18
   17f10:	andeq	r5, r1, r0, asr r9
   17f14:	andeq	r5, r1, r4, asr r9
   17f18:	andeq	r5, r1, r8, lsr r9
   17f1c:	andeq	r5, r1, ip, ror #17
   17f20:	andeq	r5, r1, r8, ror #17
   17f24:	ldrdeq	r5, [r1], -r8
   17f28:	andeq	r5, r1, r0, asr #17
   17f2c:	andeq	r5, r1, ip, ror #16
   17f30:	andeq	r5, r1, ip, ror #14
   17f34:	andeq	r5, r1, ip, asr r8
   17f38:	andeq	r5, r1, r0, asr r8
   17f3c:	andeq	r5, r1, r0, lsl #14
   17f40:	andeq	r5, r1, ip, lsl #16
   17f44:	ldrdeq	r5, [r1], -ip
   17f48:	andeq	r5, r1, r0, ror #15
   17f4c:	andeq	r5, r1, ip, asr #15
   17f50:	andeq	r5, r1, r0, ror #13
   17f54:	muleq	r1, ip, r6
   17f58:	andeq	r5, r1, r8, ror #12
   17f5c:	andeq	r5, r1, ip, ror #12
   17f60:	andeq	r5, r1, r0, ror #11
   17f64:	muleq	r1, ip, r5
   17f68:	andeq	r5, r1, ip, lsl #11
   17f6c:	andeq	r5, r1, r4, lsr r5
   17f70:	andeq	r5, r1, r4, lsr #10
   17f74:	andeq	r5, r1, r8, lsl r5
   17f78:	ldrdeq	r5, [r1], -r4
   17f7c:	andeq	r5, r1, r4, asr #9
   17f80:			; <UNDEFINED> instruction: 0x000154b8
   17f84:	andeq	r5, r1, r8, lsl #9
   17f88:	andeq	r5, r1, ip, asr #8
   17f8c:	andeq	r5, r1, ip, lsr r4
   17f90:	andeq	r5, r1, r0, lsr r4
   17f94:	andeq	r5, r1, ip, lsl #7
   17f98:	ldrdeq	r5, [r1], -ip
   17f9c:	ldrdeq	r5, [r1], -r0
   17fa0:			; <UNDEFINED> instruction: 0x000153b0
   17fa4:			; <UNDEFINED> instruction: 0x000153b8
   17fa8:	andeq	r5, r1, r4, lsr r3
   17fac:	andeq	r5, r1, r8, lsr #6
   17fb0:	ldrdeq	r5, [r1], -r0
   17fb4:			; <UNDEFINED> instruction: 0x000152bc
   17fb8:	andeq	r5, r1, r0, asr #5
   17fbc:	andeq	r5, r1, r8, asr r2
   17fc0:	andeq	r5, r1, ip, asr #4
   17fc4:	andeq	r5, r1, r0, lsl #4
   17fc8:	andeq	r5, r1, ip, ror #3
   17fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fd0:	add	fp, sp, #28
   17fd4:	sub	sp, sp, #28
   17fd8:	mov	ip, r0
   17fdc:	ldr	r0, [pc, #1740]	; 186b0 <__generate_code_for_binary_boolean_expression@@Base+0x1b20>
   17fe0:	ldr	r0, [pc, r0]
   17fe4:	cmp	r0, #0
   17fe8:	beq	18104 <__generate_code_for_binary_boolean_expression@@Base+0x1574>
   17fec:	ldr	r5, [pc, #1728]	; 186b4 <__generate_code_for_binary_boolean_expression@@Base+0x1b24>
   17ff0:	mov	sl, r1
   17ff4:	add	r5, pc, r5
   17ff8:	ldr	r3, [r5, #4]
   17ffc:	ldr	r4, [pc, #1716]	; 186b8 <__generate_code_for_binary_boolean_expression@@Base+0x1b28>
   18000:	ldr	r4, [pc, r4]
   18004:	ldr	r6, [pc, #1712]	; 186bc <__generate_code_for_binary_boolean_expression@@Base+0x1b2c>
   18008:	add	r6, pc, r6
   1800c:	ldrb	r0, [r6]
   18010:	cmp	r0, #0
   18014:	beq	1810c <__generate_code_for_binary_boolean_expression@@Base+0x157c>
   18018:	ldr	r8, [pc, #1732]	; 186e4 <__generate_code_for_binary_boolean_expression@@Base+0x1b54>
   1801c:	mov	r5, #10551296	; 0xa10000
   18020:	adds	r9, r4, #4
   18024:	add	r8, pc, r8
   18028:	adc	r2, r3, #0
   1802c:	ldr	r0, [r8, #4]
   18030:	ldr	r1, [pc, #1712]	; 186e8 <__generate_code_for_binary_boolean_expression@@Base+0x1b58>
   18034:	orr	r5, r5, #16777216	; 0x1000000
   18038:	ldr	r1, [pc, r1]
   1803c:	subs	r1, r1, r9
   18040:	sbcs	r0, r0, r2
   18044:	bcs	18210 <__generate_code_for_binary_boolean_expression@@Base+0x1680>
   18048:	mov	r0, #3
   1804c:	orr	r0, r0, #131072	; 0x20000
   18050:	adds	r0, r4, r0
   18054:	adc	r1, r3, #0
   18058:	mvn	r2, #0
   1805c:	and	r9, r1, r2
   18060:	mov	r1, #16646144	; 0xfe0000
   18064:	orr	r1, r1, #-16777216	; 0xff000000
   18068:	and	r4, r0, r1
   1806c:	ldr	r0, [pc, #1664]	; 186f4 <__generate_code_for_binary_boolean_expression@@Base+0x1b64>
   18070:	mov	r1, r4
   18074:	mov	r7, ip
   18078:	ldr	r0, [pc, r0]
   1807c:	bl	11f9c <realloc@plt>
   18080:	ldr	ip, [pc, #1648]	; 186f8 <__generate_code_for_binary_boolean_expression@@Base+0x1b68>
   18084:	ldr	lr, [pc, #1648]	; 186fc <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   18088:	stm	r8, {r4, r9}
   1808c:	ldr	r1, [pc, #1644]	; 18700 <__generate_code_for_binary_boolean_expression@@Base+0x1b70>
   18090:	add	ip, pc, ip
   18094:	add	lr, pc, lr
   18098:	add	r1, pc, r1
   1809c:	mov	r2, r0
   180a0:	str	r2, [r1]
   180a4:	mov	r6, ip
   180a8:	ldrb	ip, [ip]
   180ac:	ldr	r3, [lr, #4]
   180b0:	ldr	r4, [pc, #1612]	; 18704 <__generate_code_for_binary_boolean_expression@@Base+0x1b74>
   180b4:	lsr	r0, r5, #24
   180b8:	mov	r1, r8
   180bc:	ldr	r4, [pc, r4]
   180c0:	str	r2, [sp, #20]
   180c4:	lsl	r8, r7, #1
   180c8:	strb	r5, [r2, r4]!
   180cc:	adds	r9, r4, #4
   180d0:	strb	r0, [r2, #3]
   180d4:	lsr	r0, r5, #16
   180d8:	strb	r0, [r2, #2]
   180dc:	lsr	r0, r5, #8
   180e0:	strb	r0, [r2, #1]
   180e4:	adc	r5, r3, #0
   180e8:	mov	r0, #0
   180ec:	cmp	ip, #1
   180f0:	str	r3, [sp, #16]
   180f4:	str	r9, [lr]
   180f8:	str	r5, [lr, #4]
   180fc:	beq	18264 <__generate_code_for_binary_boolean_expression@@Base+0x16d4>
   18100:	b	183c8 <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   18104:	sub	sp, fp, #28
   18108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1810c:	ldr	r0, [pc, #1452]	; 186c0 <__generate_code_for_binary_boolean_expression@@Base+0x1b30>
   18110:	mov	r7, r3
   18114:	mov	r9, #0
   18118:	ldr	r0, [pc, r0]
   1811c:	str	r0, [sp, #20]
   18120:	ldrb	r1, [r0, r4]!
   18124:	str	r7, [sp, #16]
   18128:	ldrb	r2, [r0, #1]
   1812c:	ldrb	r3, [r0, #2]
   18130:	ldrb	r0, [r0, #3]
   18134:	orr	r1, r1, r2, lsl #8
   18138:	orr	r1, r1, r3, lsl #16
   1813c:	adds	r2, r4, #4
   18140:	orr	r3, r1, r0, lsl #24
   18144:	adc	r7, r7, #0
   18148:	mov	r1, r5
   1814c:	stm	r5, {r2, r7}
   18150:	mov	r5, #10551296	; 0xa10000
   18154:	orr	r5, r5, #16777216	; 0x1000000
   18158:	cmn	r3, #1
   1815c:	beq	18310 <__generate_code_for_binary_boolean_expression@@Base+0x1780>
   18160:	cmp	r3, r5
   18164:	bne	18320 <__generate_code_for_binary_boolean_expression@@Base+0x1790>
   18168:	str	r7, [sp, #8]
   1816c:	ldr	r0, [sp, #20]
   18170:	str	r4, [sp, #4]
   18174:	mov	r8, r5
   18178:	ldr	r3, [r0, r2]
   1817c:	ldr	r0, [sp, #16]
   18180:	adds	r5, r4, #8
   18184:	adc	r9, r0, #0
   18188:	cmn	r3, #1
   1818c:	stm	r1, {r5, r9}
   18190:	beq	1832c <__generate_code_for_binary_boolean_expression@@Base+0x179c>
   18194:	lsr	r0, r3, #1
   18198:	mov	r7, ip
   1819c:	cmp	r0, ip
   181a0:	bne	1832c <__generate_code_for_binary_boolean_expression@@Base+0x179c>
   181a4:	lsl	r0, r7, #3
   181a8:	mov	r4, r2
   181ac:	bl	11fcc <malloc@plt>
   181b0:	cmp	r7, #0
   181b4:	beq	18354 <__generate_code_for_binary_boolean_expression@@Base+0x17c4>
   181b8:	str	r0, [sp, #12]
   181bc:	str	r7, [sp, #24]
   181c0:	ldr	r2, [sp, #20]
   181c4:	ldr	r3, [r2, r5]!
   181c8:	adds	r5, r5, #8
   181cc:	ldr	r2, [r2, #4]
   181d0:	str	r3, [r0]
   181d4:	adc	r9, r9, #0
   181d8:	str	r2, [r0, #4]
   181dc:	add	r0, r0, #8
   181e0:	subs	r7, r7, #1
   181e4:	bne	181c0 <__generate_code_for_binary_boolean_expression@@Base+0x1630>
   181e8:	ldr	lr, [pc, #1260]	; 186dc <__generate_code_for_binary_boolean_expression@@Base+0x1b4c>
   181ec:	add	lr, pc, lr
   181f0:	stm	lr, {r5, r9}
   181f4:	ldr	ip, [pc, #1252]	; 186e0 <__generate_code_for_binary_boolean_expression@@Base+0x1b50>
   181f8:	mov	r1, lr
   181fc:	ldr	r0, [sp, #12]
   18200:	add	ip, pc, ip
   18204:	mov	r6, ip
   18208:	ldr	ip, [sp, #24]
   1820c:	b	18370 <__generate_code_for_binary_boolean_expression@@Base+0x17e0>
   18210:	str	r3, [sp, #16]
   18214:	ldr	r3, [pc, #1232]	; 186ec <__generate_code_for_binary_boolean_expression@@Base+0x1b5c>
   18218:	mov	lr, r5
   1821c:	mov	r7, ip
   18220:	lsr	ip, r5, #16
   18224:	ldr	r3, [pc, r3]
   18228:	lsr	r1, r5, #8
   1822c:	str	r3, [sp, #20]
   18230:	strb	lr, [r3, r4]!
   18234:	lsr	r0, lr, #24
   18238:	strb	r1, [r3, #1]
   1823c:	strb	r0, [r3, #3]
   18240:	strb	ip, [r3, #2]
   18244:	ldr	lr, [pc, #1188]	; 186f0 <__generate_code_for_binary_boolean_expression@@Base+0x1b60>
   18248:	lsl	r5, r7, #1
   1824c:	add	lr, pc, lr
   18250:	mov	r1, r8
   18254:	mov	r8, r5
   18258:	str	r9, [lr]
   1825c:	str	r2, [lr, #4]
   18260:	mov	r5, r2
   18264:	str	r8, [sp, #24]
   18268:	mov	r8, r1
   1826c:	ldr	r0, [sp, #16]
   18270:	ldr	r2, [r8, #4]
   18274:	ldr	r3, [pc, #1164]	; 18708 <__generate_code_for_binary_boolean_expression@@Base+0x1b78>
   18278:	adds	ip, r4, #8
   1827c:	adc	r1, r0, #0
   18280:	mov	r0, #0
   18284:	ldr	r3, [pc, r3]
   18288:	subs	r3, r3, ip
   1828c:	sbcs	r1, r2, r1
   18290:	bcs	18308 <__generate_code_for_binary_boolean_expression@@Base+0x1778>
   18294:	ldr	r5, [pc, #1136]	; 1870c <__generate_code_for_binary_boolean_expression@@Base+0x1b7c>
   18298:	mov	r0, #3
   1829c:	ldr	r1, [sp, #16]
   182a0:	orr	r0, r0, #131072	; 0x20000
   182a4:	adds	r0, r0, r4
   182a8:	adc	r1, r1, #0
   182ac:	adds	r0, r0, #4
   182b0:	adc	r1, r1, #0
   182b4:	mvn	r2, #0
   182b8:	and	r9, r1, r2
   182bc:	mov	r1, #16646144	; 0xfe0000
   182c0:	orr	r1, r1, #-16777216	; 0xff000000
   182c4:	and	r4, r0, r1
   182c8:	ldr	r0, [sp, #20]
   182cc:	mov	r1, r4
   182d0:	add	r5, pc, r5
   182d4:	bl	11f9c <realloc@plt>
   182d8:	ldr	ip, [pc, #1072]	; 18710 <__generate_code_for_binary_boolean_expression@@Base+0x1b80>
   182dc:	ldr	lr, [pc, #1072]	; 18714 <__generate_code_for_binary_boolean_expression@@Base+0x1b84>
   182e0:	stm	r8, {r4, r9}
   182e4:	add	lr, pc, lr
   182e8:	str	r0, [r5]
   182ec:	str	r0, [sp, #20]
   182f0:	ldr	r5, [lr, #4]
   182f4:	ldr	r9, [pc, #1052]	; 18718 <__generate_code_for_binary_boolean_expression@@Base+0x1b88>
   182f8:	add	ip, pc, ip
   182fc:	mov	r6, ip
   18300:	mov	r0, #0
   18304:	ldr	r9, [pc, r9]
   18308:	ldr	r8, [sp, #24]
   1830c:	b	183c8 <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   18310:	mov	r3, r2
   18314:	ldr	r2, [sp, #16]
   18318:	mov	r0, #0
   1831c:	b	18388 <__generate_code_for_binary_boolean_expression@@Base+0x17f8>
   18320:	ldr	r1, [pc, #924]	; 186c4 <__generate_code_for_binary_boolean_expression@@Base+0x1b34>
   18324:	add	r1, pc, r1
   18328:	b	18334 <__generate_code_for_binary_boolean_expression@@Base+0x17a4>
   1832c:	ldr	r1, [pc, #924]	; 186d0 <__generate_code_for_binary_boolean_expression@@Base+0x1b40>
   18330:	add	r1, pc, r1
   18334:	ldr	r0, [pc, #908]	; 186c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b38>
   18338:	ldr	r0, [pc, r0]
   1833c:	ldr	r0, [r0]
   18340:	ldr	r2, [pc, #900]	; 186cc <__generate_code_for_binary_boolean_expression@@Base+0x1b3c>
   18344:	ldr	r2, [pc, r2]
   18348:	sub	sp, fp, #28
   1834c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18350:	b	12038 <fprintf@plt>
   18354:	ldr	lr, [pc, #888]	; 186d4 <__generate_code_for_binary_boolean_expression@@Base+0x1b44>
   18358:	ldr	ip, [pc, #888]	; 186d8 <__generate_code_for_binary_boolean_expression@@Base+0x1b48>
   1835c:	add	lr, pc, lr
   18360:	add	ip, pc, ip
   18364:	mov	r6, ip
   18368:	mov	r1, lr
   1836c:	mov	ip, r7
   18370:	mov	r3, r4
   18374:	ldr	r7, [sp, #8]
   18378:	ldr	r4, [sp, #4]
   1837c:	ldr	r2, [sp, #16]
   18380:	mov	r9, #0
   18384:	mov	r5, r8
   18388:	mov	lr, r1
   1838c:	mov	r1, #1
   18390:	str	r4, [lr]
   18394:	str	r2, [lr, #4]
   18398:	ldr	r2, [sp, #20]
   1839c:	lsl	r8, ip, #1
   183a0:	strb	r5, [r2, r4]!
   183a4:	mov	r5, r7
   183a8:	strb	r1, [r2, #3]
   183ac:	mov	r1, #161	; 0xa1
   183b0:	strb	r9, [r2, #1]
   183b4:	mov	r9, r3
   183b8:	strb	r1, [r2, #2]
   183bc:	str	r9, [lr]
   183c0:	str	r7, [lr, #4]
   183c4:	mov	r7, ip
   183c8:	ldr	r3, [sp, #20]
   183cc:	lsr	r1, r8, #16
   183d0:	mov	ip, r3
   183d4:	strb	r8, [r3, r9]!
   183d8:	lsr	r4, r8, #24
   183dc:	lsr	r2, r8, #8
   183e0:	adds	r8, r9, #4
   183e4:	strb	r1, [r3, #2]
   183e8:	adc	r1, r5, #0
   183ec:	cmp	r7, #0
   183f0:	strb	r4, [r3, #3]
   183f4:	strb	r2, [r3, #1]
   183f8:	str	r8, [lr]
   183fc:	str	r1, [lr, #4]
   18400:	str	r7, [sp, #24]
   18404:	beq	186a4 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   18408:	ldr	r7, [pc, #780]	; 1871c <__generate_code_for_binary_boolean_expression@@Base+0x1b8c>
   1840c:	mov	r4, lr
   18410:	mov	r2, r0
   18414:	add	r7, pc, r7
   18418:	str	r0, [sp, #12]
   1841c:	b	184b8 <__generate_code_for_binary_boolean_expression@@Base+0x1928>
   18420:	mov	r7, ip
   18424:	lsr	r2, r4, #24
   18428:	strb	r4, [r7, r8]!
   1842c:	mov	lr, r6
   18430:	lsr	r9, r4, #16
   18434:	lsr	r6, r4, #8
   18438:	strb	r2, [r7, #3]
   1843c:	adds	r2, r8, #4
   18440:	mov	r4, r0
   18444:	strb	r9, [r7, #2]
   18448:	mov	r3, ip
   1844c:	strb	r6, [r7, #1]
   18450:	adc	r9, r1, #0
   18454:	stm	r4, {r2, r9}
   18458:	mov	ip, r3
   1845c:	lsr	r1, r5, #16
   18460:	strb	r5, [r3, r2]!
   18464:	lsr	r0, r5, #24
   18468:	lsr	r7, r5, #8
   1846c:	adds	r8, r2, #4
   18470:	strb	r1, [r3, #2]
   18474:	adc	r1, r9, #0
   18478:	strb	r0, [r3, #3]
   1847c:	strb	r7, [r3, #1]
   18480:	str	r8, [r4]
   18484:	str	r1, [r4, #4]
   18488:	ldr	r0, [sp, #24]
   1848c:	ldr	r2, [sp, #16]
   18490:	mov	r6, lr
   18494:	subs	r0, r0, #1
   18498:	str	r0, [sp, #24]
   1849c:	ldr	sl, [sp, #20]
   184a0:	ldr	r0, [sp, #12]
   184a4:	ldr	r7, [pc, #676]	; 18750 <__generate_code_for_binary_boolean_expression@@Base+0x1bc0>
   184a8:	add	r2, r2, #8
   184ac:	add	sl, sl, #8
   184b0:	add	r7, pc, r7
   184b4:	beq	186a4 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   184b8:	cmp	r0, #0
   184bc:	mov	r0, r4
   184c0:	str	r2, [sp, #16]
   184c4:	beq	184d0 <__generate_code_for_binary_boolean_expression@@Base+0x1940>
   184c8:	ldrd	r2, [r2]
   184cc:	b	184d8 <__generate_code_for_binary_boolean_expression@@Base+0x1948>
   184d0:	mov	r2, #0
   184d4:	mov	r3, #0
   184d8:	ldrd	r4, [sl]
   184dc:	adds	r4, r4, r2
   184e0:	adc	r5, r5, r3
   184e4:	strd	r4, [sl]
   184e8:	ldrb	r2, [r6]
   184ec:	str	sl, [sp, #20]
   184f0:	cmp	r2, #0
   184f4:	beq	18420 <__generate_code_for_binary_boolean_expression@@Base+0x1890>
   184f8:	ldr	r3, [r7, #4]
   184fc:	ldr	r6, [pc, #540]	; 18720 <__generate_code_for_binary_boolean_expression@@Base+0x1b90>
   18500:	adds	r2, r8, #4
   18504:	adc	r9, r1, #0
   18508:	ldr	r6, [pc, r6]
   1850c:	subs	r2, r6, r2
   18510:	sbcs	r2, r3, r9
   18514:	bcs	185c0 <__generate_code_for_binary_boolean_expression@@Base+0x1a30>
   18518:	mov	r2, #3
   1851c:	orr	r2, r2, #131072	; 0x20000
   18520:	adds	r0, r8, r2
   18524:	adc	r1, r1, #0
   18528:	mvn	r2, #0
   1852c:	and	r8, r1, r2
   18530:	mov	r1, #16646144	; 0xfe0000
   18534:	orr	r1, r1, #-16777216	; 0xff000000
   18538:	and	r6, r0, r1
   1853c:	mov	r0, ip
   18540:	mov	r1, r6
   18544:	bl	11f9c <realloc@plt>
   18548:	ldr	ip, [pc, #468]	; 18724 <__generate_code_for_binary_boolean_expression@@Base+0x1b94>
   1854c:	ldr	lr, [pc, #468]	; 18728 <__generate_code_for_binary_boolean_expression@@Base+0x1b98>
   18550:	stm	r7, {r6, r8}
   18554:	mov	r3, r0
   18558:	ldr	r0, [pc, #460]	; 1872c <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   1855c:	add	lr, pc, lr
   18560:	mov	r9, lr
   18564:	add	r0, pc, r0
   18568:	add	ip, pc, ip
   1856c:	str	r3, [r0]
   18570:	mov	lr, ip
   18574:	ldrb	ip, [ip]
   18578:	ldr	r1, [r9, #4]
   1857c:	ldr	r8, [pc, #428]	; 18730 <__generate_code_for_binary_boolean_expression@@Base+0x1ba0>
   18580:	mov	r7, r3
   18584:	lsr	r2, r4, #24
   18588:	ldr	r8, [pc, r8]
   1858c:	lsr	r6, r4, #16
   18590:	strb	r4, [r7, r8]!
   18594:	strb	r2, [r7, #3]
   18598:	lsr	r2, r4, #8
   1859c:	strb	r2, [r7, #1]
   185a0:	adds	r2, r8, #4
   185a4:	mov	r4, r9
   185a8:	adc	r9, r1, #0
   185ac:	cmp	ip, #1
   185b0:	strb	r6, [r7, #2]
   185b4:	stm	r4, {r2, r9}
   185b8:	bne	18458 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   185bc:	b	185f4 <__generate_code_for_binary_boolean_expression@@Base+0x1a64>
   185c0:	mov	r6, ip
   185c4:	lsr	r2, r4, #24
   185c8:	strb	r4, [r6, r8]!
   185cc:	lsr	r9, r4, #16
   185d0:	lsr	r7, r4, #8
   185d4:	strb	r2, [r6, #3]
   185d8:	adds	r2, r8, #4
   185dc:	mov	r4, r0
   185e0:	strb	r9, [r6, #2]
   185e4:	mov	r3, ip
   185e8:	strb	r7, [r6, #1]
   185ec:	adc	r9, r1, #0
   185f0:	stm	r4, {r2, r9}
   185f4:	ldr	lr, [pc, #312]	; 18734 <__generate_code_for_binary_boolean_expression@@Base+0x1ba4>
   185f8:	mov	r0, r4
   185fc:	adds	r7, r8, #8
   18600:	add	lr, pc, lr
   18604:	adc	ip, r1, #0
   18608:	ldr	r4, [lr, #4]
   1860c:	ldr	r6, [pc, #292]	; 18738 <__generate_code_for_binary_boolean_expression@@Base+0x1ba8>
   18610:	ldr	r6, [pc, r6]
   18614:	subs	r7, r6, r7
   18618:	sbcs	r7, r4, ip
   1861c:	bcs	18694 <__generate_code_for_binary_boolean_expression@@Base+0x1b04>
   18620:	mov	r2, #3
   18624:	orr	r2, r2, #131072	; 0x20000
   18628:	adds	r0, r2, r8
   1862c:	adc	r1, r1, #0
   18630:	adds	r0, r0, #4
   18634:	adc	r1, r1, #0
   18638:	mvn	r2, #0
   1863c:	and	r7, r1, r2
   18640:	mov	r1, #16646144	; 0xfe0000
   18644:	orr	r1, r1, #-16777216	; 0xff000000
   18648:	and	r6, r0, r1
   1864c:	mov	r0, r3
   18650:	mov	r1, r6
   18654:	mov	r8, lr
   18658:	bl	11f9c <realloc@plt>
   1865c:	ldr	lr, [pc, #220]	; 18740 <__generate_code_for_binary_boolean_expression@@Base+0x1bb0>
   18660:	strd	r6, [r8]
   18664:	mov	r3, r0
   18668:	add	lr, pc, lr
   1866c:	mov	r4, lr
   18670:	ldr	r9, [lr, #4]
   18674:	ldr	r0, [pc, #200]	; 18744 <__generate_code_for_binary_boolean_expression@@Base+0x1bb4>
   18678:	add	r0, pc, r0
   1867c:	str	r3, [r0]
   18680:	ldr	r2, [pc, #192]	; 18748 <__generate_code_for_binary_boolean_expression@@Base+0x1bb8>
   18684:	ldr	r2, [pc, r2]
   18688:	ldr	lr, [pc, #188]	; 1874c <__generate_code_for_binary_boolean_expression@@Base+0x1bbc>
   1868c:	add	lr, pc, lr
   18690:	b	18458 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   18694:	ldr	lr, [pc, #160]	; 1873c <__generate_code_for_binary_boolean_expression@@Base+0x1bac>
   18698:	mov	r4, r0
   1869c:	add	lr, pc, lr
   186a0:	b	18458 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   186a4:	sub	sp, fp, #28
   186a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186ac:	b	11f54 <free@plt>
   186b0:	ldrdeq	r5, [r1], -r8
   186b4:	ldrdeq	r5, [r1], -r4
   186b8:	andeq	r5, r1, r8, asr #1
   186bc:	andeq	r5, r1, ip, lsr #1
   186c0:	andeq	r4, r1, r4, lsr #31
   186c4:	andeq	r3, r0, r4, asr #32
   186c8:	andeq	r3, r1, r4, lsl #27
   186cc:	andeq	r4, r1, ip, ror #26
   186d0:	andeq	r3, r0, r2, lsl #1
   186d4:	andeq	r4, r1, ip, ror #26
   186d8:	andeq	r4, r1, r4, asr sp
   186dc:	ldrdeq	r4, [r1], -ip
   186e0:			; <UNDEFINED> instruction: 0x00014eb4
   186e4:	muleq	r1, ip, r0
   186e8:	andeq	r5, r1, r8, lsl #1
   186ec:	muleq	r1, r8, lr
   186f0:	andeq	r4, r1, ip, ror lr
   186f4:	andeq	r5, r1, r4, asr #32
   186f8:	andeq	r5, r1, r4, lsr #32
   186fc:	andeq	r5, r1, r4, lsr r0
   18700:	andeq	r5, r1, r4, lsr #32
   18704:	andeq	r5, r1, ip
   18708:	andeq	r4, r1, ip, lsr lr
   1870c:	andeq	r4, r1, ip, ror #27
   18710:			; <UNDEFINED> instruction: 0x00014dbc
   18714:	andeq	r4, r1, r4, ror #27
   18718:	andeq	r4, r1, r4, asr #27
   1871c:	andeq	r4, r1, ip, lsr #25
   18720:			; <UNDEFINED> instruction: 0x00014bb8
   18724:	andeq	r4, r1, ip, asr #22
   18728:	andeq	r4, r1, ip, ror #22
   1872c:	andeq	r4, r1, r8, asr fp
   18730:	andeq	r4, r1, r0, asr #22
   18734:	andeq	r4, r1, r0, asr #21
   18738:			; <UNDEFINED> instruction: 0x00014ab0
   1873c:	andeq	r4, r1, r8, lsl sl
   18740:	andeq	r4, r1, r0, ror #20
   18744:	andeq	r4, r1, r4, asr #20
   18748:	andeq	r4, r1, r4, asr #20
   1874c:	andeq	r4, r1, r8, lsr #20
   18750:	andeq	r4, r1, r0, lsl ip
   18754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18758:	add	fp, sp, #28
   1875c:	sub	sp, sp, #4
   18760:	ldr	r0, [pc, #3180]	; 193d4 <__generate_code_for_binary_boolean_expression@@Base+0x2844>
   18764:	ldr	r0, [pc, r0]
   18768:	cmp	r0, #0
   1876c:	beq	18dc8 <__generate_code_for_binary_boolean_expression@@Base+0x2238>
   18770:	ldr	sl, [pc, #3168]	; 193d8 <__generate_code_for_binary_boolean_expression@@Base+0x2848>
   18774:	add	sl, pc, sl
   18778:	ldr	r6, [sl, #4]
   1877c:	ldr	r5, [pc, #3160]	; 193dc <__generate_code_for_binary_boolean_expression@@Base+0x284c>
   18780:	ldr	r5, [pc, r5]
   18784:	ldr	r8, [pc, #3156]	; 193e0 <__generate_code_for_binary_boolean_expression@@Base+0x2850>
   18788:	add	r8, pc, r8
   1878c:	ldrb	r0, [r8]
   18790:	cmp	r0, #0
   18794:	beq	18858 <__generate_code_for_binary_boolean_expression@@Base+0x1cc8>
   18798:	ldr	r9, [pc, #3164]	; 193fc <__generate_code_for_binary_boolean_expression@@Base+0x286c>
   1879c:	adds	r2, r5, #4
   187a0:	adc	ip, r6, #0
   187a4:	add	r9, pc, r9
   187a8:	ldr	r0, [r9, #4]
   187ac:	ldr	r3, [pc, #3148]	; 19400 <__generate_code_for_binary_boolean_expression@@Base+0x2870>
   187b0:	ldr	r3, [pc, r3]
   187b4:	subs	r3, r3, r2
   187b8:	sbcs	r0, r0, ip
   187bc:	bcs	188ac <__generate_code_for_binary_boolean_expression@@Base+0x1d1c>
   187c0:	mov	r0, #7
   187c4:	orr	r0, r0, #131072	; 0x20000
   187c8:	adds	r0, r0, r5
   187cc:	adc	r1, r6, #0
   187d0:	subs	r0, r0, #4
   187d4:	sbc	r1, r1, #0
   187d8:	mvn	r2, #0
   187dc:	and	r5, r1, r2
   187e0:	mov	r1, #16646144	; 0xfe0000
   187e4:	orr	r1, r1, #-16777216	; 0xff000000
   187e8:	ldr	r4, [pc, #3096]	; 19408 <__generate_code_for_binary_boolean_expression@@Base+0x2878>
   187ec:	and	r6, r0, r1
   187f0:	ldr	r0, [pc, #3092]	; 1940c <__generate_code_for_binary_boolean_expression@@Base+0x287c>
   187f4:	mov	r1, r6
   187f8:	add	r4, pc, r4
   187fc:	ldr	r0, [pc, r0]
   18800:	bl	11f9c <realloc@plt>
   18804:	str	r6, [r9]
   18808:	str	r5, [r9, #4]
   1880c:	str	r0, [r4]
   18810:	ldrb	r3, [r8]
   18814:	ldr	r6, [sl, #4]
   18818:	ldr	r5, [pc, #3056]	; 19410 <__generate_code_for_binary_boolean_expression@@Base+0x2880>
   1881c:	mov	r2, r0
   18820:	mov	r1, #0
   18824:	mov	r7, #161	; 0xa1
   18828:	ldr	r5, [pc, r5]
   1882c:	strb	r1, [r2, r5]!
   18830:	strb	r7, [r2, #3]
   18834:	strb	r1, [r2, #2]
   18838:	strb	r1, [r2, #1]
   1883c:	adds	r2, r5, #4
   18840:	adc	ip, r6, #0
   18844:	mov	r7, #1
   18848:	cmp	r3, #1
   1884c:	stm	sl, {r2, ip}
   18850:	beq	188d4 <__generate_code_for_binary_boolean_expression@@Base+0x1d44>
   18854:	b	18aac <__generate_code_for_binary_boolean_expression@@Base+0x1f1c>
   18858:	ldr	r0, [pc, #2948]	; 193e4 <__generate_code_for_binary_boolean_expression@@Base+0x2854>
   1885c:	ldr	r0, [pc, r0]
   18860:	mov	r1, r0
   18864:	ldrb	r2, [r1, r5]!
   18868:	ldrb	r3, [r1, #1]
   1886c:	ldrb	r7, [r1, #2]
   18870:	ldrb	r1, [r1, #3]
   18874:	orr	r2, r2, r3, lsl #8
   18878:	orr	r2, r2, r7, lsl #16
   1887c:	orr	r3, r2, r1, lsl #24
   18880:	adds	r2, r5, #4
   18884:	adc	ip, r6, #0
   18888:	cmp	r3, #-1593835520	; 0xa1000000
   1888c:	stm	sl, {r2, ip}
   18890:	beq	18a4c <__generate_code_for_binary_boolean_expression@@Base+0x1ebc>
   18894:	mov	r7, #1
   18898:	cmn	r3, #1
   1889c:	beq	18a8c <__generate_code_for_binary_boolean_expression@@Base+0x1efc>
   188a0:	ldr	r1, [pc, #2880]	; 193e8 <__generate_code_for_binary_boolean_expression@@Base+0x2858>
   188a4:	add	r1, pc, r1
   188a8:	b	1918c <__generate_code_for_binary_boolean_expression@@Base+0x25fc>
   188ac:	ldr	r0, [pc, #2896]	; 19404 <__generate_code_for_binary_boolean_expression@@Base+0x2874>
   188b0:	mov	r3, #0
   188b4:	mov	r4, #161	; 0xa1
   188b8:	ldr	r0, [pc, r0]
   188bc:	mov	r7, r0
   188c0:	strb	r3, [r7, r5]!
   188c4:	strb	r4, [r7, #3]
   188c8:	strb	r3, [r7, #2]
   188cc:	strb	r3, [r7, #1]
   188d0:	stm	sl, {r2, ip}
   188d4:	ldr	r4, [r9, #4]
   188d8:	ldr	r1, [pc, #2868]	; 19414 <__generate_code_for_binary_boolean_expression@@Base+0x2884>
   188dc:	adds	r3, r5, #8
   188e0:	adc	r7, r6, #0
   188e4:	ldr	r1, [pc, r1]
   188e8:	subs	r1, r1, r3
   188ec:	sbcs	r1, r4, r7
   188f0:	bcs	1897c <__generate_code_for_binary_boolean_expression@@Base+0x1dec>
   188f4:	mov	r1, #7
   188f8:	orr	r1, r1, #131072	; 0x20000
   188fc:	adds	r1, r5, r1
   18900:	adc	r2, r6, #0
   18904:	mvn	r3, #0
   18908:	and	r5, r2, r3
   1890c:	mov	r2, #16646144	; 0xfe0000
   18910:	orr	r2, r2, #-16777216	; 0xff000000
   18914:	ldr	r4, [pc, #2812]	; 19418 <__generate_code_for_binary_boolean_expression@@Base+0x2888>
   18918:	and	r6, r1, r2
   1891c:	mov	r1, r6
   18920:	add	r4, pc, r4
   18924:	bl	11f9c <realloc@plt>
   18928:	str	r6, [r9]
   1892c:	str	r5, [r9, #4]
   18930:	str	r0, [r4]
   18934:	ldrb	r1, [r8]
   18938:	ldr	ip, [sl, #4]
   1893c:	ldr	r2, [pc, #2776]	; 1941c <__generate_code_for_binary_boolean_expression@@Base+0x288c>
   18940:	mov	r7, r0
   18944:	mov	r3, #9
   18948:	ldr	r2, [pc, r2]
   1894c:	strb	r3, [r7, r2]!
   18950:	mov	r3, #0
   18954:	strb	r3, [r7, #3]
   18958:	strb	r3, [r7, #2]
   1895c:	strb	r3, [r7, #1]
   18960:	adds	r3, r2, #4
   18964:	adc	r5, ip, #0
   18968:	mov	r7, #1
   1896c:	cmp	r1, #1
   18970:	stm	sl, {r3, r5}
   18974:	beq	189a4 <__generate_code_for_binary_boolean_expression@@Base+0x1e14>
   18978:	b	18ad4 <__generate_code_for_binary_boolean_expression@@Base+0x1f44>
   1897c:	mov	r3, r0
   18980:	mov	r1, #9
   18984:	strb	r1, [r3, r2]!
   18988:	mov	r1, #0
   1898c:	strb	r1, [r3, #3]
   18990:	strb	r1, [r3, #2]
   18994:	strb	r1, [r3, #1]
   18998:	adds	r3, r2, #4
   1899c:	adc	r5, ip, #0
   189a0:	stm	sl, {r3, r5}
   189a4:	ldr	r6, [r9, #4]
   189a8:	ldr	r4, [pc, #2672]	; 19420 <__generate_code_for_binary_boolean_expression@@Base+0x2890>
   189ac:	adds	r1, r2, #8
   189b0:	adc	r7, ip, #0
   189b4:	ldr	r4, [pc, r4]
   189b8:	subs	r1, r4, r1
   189bc:	sbcs	r1, r6, r7
   189c0:	bcs	18e98 <__generate_code_for_binary_boolean_expression@@Base+0x2308>
   189c4:	mov	r1, #7
   189c8:	orr	r1, r1, #131072	; 0x20000
   189cc:	adds	r1, r2, r1
   189d0:	adc	r2, ip, #0
   189d4:	mvn	r3, #0
   189d8:	and	r5, r2, r3
   189dc:	mov	r2, #16646144	; 0xfe0000
   189e0:	orr	r2, r2, #-16777216	; 0xff000000
   189e4:	ldr	r4, [pc, #2616]	; 19424 <__generate_code_for_binary_boolean_expression@@Base+0x2894>
   189e8:	and	r6, r1, r2
   189ec:	mov	r1, r6
   189f0:	add	r4, pc, r4
   189f4:	bl	11f9c <realloc@plt>
   189f8:	str	r6, [r9]
   189fc:	str	r5, [r9, #4]
   18a00:	str	r0, [r4]
   18a04:	ldrb	r2, [r8]
   18a08:	ldr	r5, [sl, #4]
   18a0c:	ldr	r3, [pc, #2580]	; 19428 <__generate_code_for_binary_boolean_expression@@Base+0x2898>
   18a10:	mov	r7, r0
   18a14:	mov	r1, #0
   18a18:	ldr	r3, [pc, r3]
   18a1c:	adds	r6, r3, #4
   18a20:	strb	r1, [r7, r3]!
   18a24:	str	r6, [sl]
   18a28:	strb	r1, [r7, #3]
   18a2c:	strb	r1, [r7, #2]
   18a30:	strb	r1, [r7, #1]
   18a34:	adc	r1, r5, #0
   18a38:	mov	r7, #1
   18a3c:	cmp	r2, #1
   18a40:	str	r1, [sl, #4]
   18a44:	bne	18afc <__generate_code_for_binary_boolean_expression@@Base+0x1f6c>
   18a48:	b	18ec0 <__generate_code_for_binary_boolean_expression@@Base+0x2330>
   18a4c:	ldr	r3, [r0, r2]
   18a50:	adds	r4, r5, #8
   18a54:	adc	r7, r6, #0
   18a58:	cmp	r3, #9
   18a5c:	stm	sl, {r4, r7}
   18a60:	bne	19184 <__generate_code_for_binary_boolean_expression@@Base+0x25f4>
   18a64:	ldr	r3, [pc, #2444]	; 193f8 <__generate_code_for_binary_boolean_expression@@Base+0x2868>
   18a68:	adds	r4, r5, #20
   18a6c:	adc	r7, r6, #0
   18a70:	add	r3, pc, r3
   18a74:	add	r6, r5, r0
   18a78:	ldrb	r3, [r3]
   18a7c:	ldr	r6, [r6, #16]
   18a80:	stm	sl, {r4, r7}
   18a84:	eor	r3, r3, #1
   18a88:	add	r7, r6, r3
   18a8c:	mov	r6, r0
   18a90:	mov	r3, #0
   18a94:	strb	r3, [r6, r5]!
   18a98:	mov	r5, #161	; 0xa1
   18a9c:	strb	r5, [r6, #3]
   18aa0:	strb	r3, [r6, #2]
   18aa4:	strb	r3, [r6, #1]
   18aa8:	stm	sl, {r2, ip}
   18aac:	mov	r3, r0
   18ab0:	mov	r1, #9
   18ab4:	strb	r1, [r3, r2]!
   18ab8:	mov	r1, #0
   18abc:	strb	r1, [r3, #3]
   18ac0:	strb	r1, [r3, #2]
   18ac4:	strb	r1, [r3, #1]
   18ac8:	adds	r3, r2, #4
   18acc:	adc	r5, ip, #0
   18ad0:	stm	sl, {r3, r5}
   18ad4:	mov	r2, r0
   18ad8:	mov	r1, #0
   18adc:	strb	r1, [r2, r3]!
   18ae0:	adds	r6, r3, #4
   18ae4:	strb	r1, [r2, #3]
   18ae8:	strb	r1, [r2, #2]
   18aec:	strb	r1, [r2, #1]
   18af0:	adc	r1, r5, #0
   18af4:	str	r6, [sl]
   18af8:	str	r1, [sl, #4]
   18afc:	mov	r3, r0
   18b00:	mov	r2, #0
   18b04:	strb	r2, [r3, r6]!
   18b08:	strb	r2, [r3, #3]
   18b0c:	strb	r2, [r3, #2]
   18b10:	strb	r2, [r3, #1]
   18b14:	adds	r2, r6, #4
   18b18:	adc	r3, r1, #0
   18b1c:	strd	r2, [sl]
   18b20:	lsr	r1, r7, #24
   18b24:	strb	r7, [r0, r2]!
   18b28:	lsr	r6, r7, #16
   18b2c:	lsr	r5, r7, #8
   18b30:	strb	r1, [r0, #3]
   18b34:	strb	r6, [r0, #2]
   18b38:	strb	r5, [r0, #1]
   18b3c:	ldrb	r0, [r8]
   18b40:	adds	r4, r2, #4
   18b44:	adc	r5, r3, #0
   18b48:	cmp	r0, #0
   18b4c:	strd	r4, [sl]
   18b50:	beq	18c04 <__generate_code_for_binary_boolean_expression@@Base+0x2074>
   18b54:	ldr	r9, [pc, #2284]	; 19448 <__generate_code_for_binary_boolean_expression@@Base+0x28b8>
   18b58:	adds	r0, r2, #8
   18b5c:	adc	r1, r3, #0
   18b60:	add	r9, pc, r9
   18b64:	ldr	r7, [r9, #4]
   18b68:	ldr	r6, [pc, #2268]	; 1944c <__generate_code_for_binary_boolean_expression@@Base+0x28bc>
   18b6c:	ldr	r6, [pc, r6]
   18b70:	subs	r0, r6, r0
   18b74:	sbcs	r0, r7, r1
   18b78:	bcs	18dd0 <__generate_code_for_binary_boolean_expression@@Base+0x2240>
   18b7c:	mov	r0, #7
   18b80:	orr	r0, r0, #131072	; 0x20000
   18b84:	adds	r0, r2, r0
   18b88:	adc	r1, r3, #0
   18b8c:	mvn	r2, #0
   18b90:	and	r5, r1, r2
   18b94:	mov	r1, #16646144	; 0xfe0000
   18b98:	orr	r1, r1, #-16777216	; 0xff000000
   18b9c:	ldr	r4, [pc, #2268]	; 19480 <__generate_code_for_binary_boolean_expression@@Base+0x28f0>
   18ba0:	and	r6, r0, r1
   18ba4:	ldr	r0, [pc, #2264]	; 19484 <__generate_code_for_binary_boolean_expression@@Base+0x28f4>
   18ba8:	mov	r1, r6
   18bac:	add	r4, pc, r4
   18bb0:	ldr	r0, [pc, r0]
   18bb4:	bl	11f9c <realloc@plt>
   18bb8:	str	r6, [r9]
   18bbc:	str	r5, [r9, #4]
   18bc0:	str	r0, [r4]
   18bc4:	ldrb	r1, [r8]
   18bc8:	ldr	r5, [sl, #4]
   18bcc:	ldr	r4, [pc, #2228]	; 19488 <__generate_code_for_binary_boolean_expression@@Base+0x28f8>
   18bd0:	mov	r3, r0
   18bd4:	mov	r2, #0
   18bd8:	ldr	r4, [pc, r4]
   18bdc:	strb	r2, [r3, r4]!
   18be0:	strb	r2, [r3, #3]
   18be4:	strb	r2, [r3, #2]
   18be8:	strb	r2, [r3, #1]
   18bec:	adds	r2, r4, #4
   18bf0:	adc	r3, r5, #0
   18bf4:	cmp	r1, #0
   18bf8:	strd	r2, [sl]
   18bfc:	beq	18c30 <__generate_code_for_binary_boolean_expression@@Base+0x20a0>
   18c00:	b	18dfc <__generate_code_for_binary_boolean_expression@@Base+0x226c>
   18c04:	ldr	r0, [pc, #2104]	; 19444 <__generate_code_for_binary_boolean_expression@@Base+0x28b4>
   18c08:	adds	r2, r2, #8
   18c0c:	mov	r1, #0
   18c10:	adc	r3, r3, #0
   18c14:	ldr	r0, [pc, r0]
   18c18:	mov	r7, r0
   18c1c:	strb	r1, [r7, r4]!
   18c20:	strb	r1, [r7, #3]
   18c24:	strb	r1, [r7, #2]
   18c28:	strb	r1, [r7, #1]
   18c2c:	strd	r2, [sl]
   18c30:	mov	r7, r0
   18c34:	mov	r1, #0
   18c38:	strb	r1, [r7, r2]!
   18c3c:	strb	r1, [r7, #3]
   18c40:	strb	r1, [r7, #2]
   18c44:	strb	r1, [r7, #1]
   18c48:	adds	r1, r2, #4
   18c4c:	adc	r5, r3, #0
   18c50:	stm	sl, {r1, r5}
   18c54:	mov	r3, r0
   18c58:	mov	r2, #0
   18c5c:	strb	r2, [r3, r1]!
   18c60:	strb	r2, [r3, #3]
   18c64:	strb	r2, [r3, #2]
   18c68:	strb	r2, [r3, #1]
   18c6c:	adds	r2, r1, #4
   18c70:	adc	r3, r5, #0
   18c74:	strd	r2, [sl]
   18c78:	mov	r7, r0
   18c7c:	mov	r1, #0
   18c80:	strb	r1, [r7, r2]!
   18c84:	strb	r1, [r7, #3]
   18c88:	strb	r1, [r7, #2]
   18c8c:	strb	r1, [r7, #1]
   18c90:	adds	r1, r2, #4
   18c94:	adc	r5, r3, #0
   18c98:	stm	sl, {r1, r5}
   18c9c:	mov	r3, r0
   18ca0:	mov	r2, #0
   18ca4:	strb	r2, [r3, r1]!
   18ca8:	adds	r4, r1, #4
   18cac:	strb	r2, [r3, #3]
   18cb0:	strb	r2, [r3, #2]
   18cb4:	strb	r2, [r3, #1]
   18cb8:	adc	r3, r5, #0
   18cbc:	str	r4, [sl]
   18cc0:	str	r3, [sl, #4]
   18cc4:	mov	r2, r0
   18cc8:	mov	r1, #0
   18ccc:	strb	r1, [r2, r4]!
   18cd0:	strb	r1, [r2, #3]
   18cd4:	strb	r1, [r2, #2]
   18cd8:	strb	r1, [r2, #1]
   18cdc:	adds	r2, r4, #4
   18ce0:	adc	r1, r3, #0
   18ce4:	str	r2, [sl]
   18ce8:	str	r1, [sl, #4]
   18cec:	mov	r3, r0
   18cf0:	mov	r4, #0
   18cf4:	strb	r4, [r3, r2]!
   18cf8:	mov	r7, #163	; 0xa3
   18cfc:	strb	r7, [r3, #3]
   18d00:	strb	r4, [r3, #2]
   18d04:	strb	r4, [r3, #1]
   18d08:	ldrb	r7, [r8]
   18d0c:	adds	r6, r2, #4
   18d10:	adc	r3, r1, #0
   18d14:	cmp	r7, #1
   18d18:	str	r6, [sl]
   18d1c:	str	r3, [sl, #4]
   18d20:	bne	18d94 <__generate_code_for_binary_boolean_expression@@Base+0x2204>
   18d24:	ldr	r8, [pc, #1852]	; 19468 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   18d28:	adds	lr, r2, #8
   18d2c:	adc	ip, r1, #0
   18d30:	add	r8, pc, r8
   18d34:	ldr	r5, [r8, #4]
   18d38:	ldr	r7, [pc, #1836]	; 1946c <__generate_code_for_binary_boolean_expression@@Base+0x28dc>
   18d3c:	ldr	r7, [pc, r7]
   18d40:	subs	r7, r7, lr
   18d44:	sbcs	r7, r5, ip
   18d48:	bcs	18d94 <__generate_code_for_binary_boolean_expression@@Base+0x2204>
   18d4c:	mov	r3, #7
   18d50:	orr	r3, r3, #131072	; 0x20000
   18d54:	adds	r2, r2, r3
   18d58:	adc	r1, r1, #0
   18d5c:	mvn	r3, #0
   18d60:	and	r7, r1, r3
   18d64:	mov	r1, #16646144	; 0xfe0000
   18d68:	orr	r1, r1, #-16777216	; 0xff000000
   18d6c:	ldr	r5, [pc, #1788]	; 19470 <__generate_code_for_binary_boolean_expression@@Base+0x28e0>
   18d70:	and	r6, r2, r1
   18d74:	mov	r1, r6
   18d78:	add	r5, pc, r5
   18d7c:	bl	11f9c <realloc@plt>
   18d80:	strd	r6, [r8]
   18d84:	str	r0, [r5]
   18d88:	ldr	r3, [sl, #4]
   18d8c:	ldr	r6, [pc, #1760]	; 19474 <__generate_code_for_binary_boolean_expression@@Base+0x28e4>
   18d90:	ldr	r6, [pc, r6]
   18d94:	ldr	r0, [pc, #1756]	; 19478 <__generate_code_for_binary_boolean_expression@@Base+0x28e8>
   18d98:	ldr	r1, [pc, #1756]	; 1947c <__generate_code_for_binary_boolean_expression@@Base+0x28ec>
   18d9c:	adds	r2, r6, #4
   18da0:	add	r0, pc, r0
   18da4:	adc	r3, r3, #0
   18da8:	ldr	r1, [pc, r1]
   18dac:	strb	r4, [r1, r6]!
   18db0:	strb	r4, [r1, #3]
   18db4:	strb	r4, [r1, #2]
   18db8:	strb	r4, [r1, #1]
   18dbc:	mov	r1, #1
   18dc0:	strd	r2, [sl]
   18dc4:	strb	r1, [r0]
   18dc8:	sub	sp, fp, #28
   18dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd0:	ldr	r0, [pc, #1656]	; 19450 <__generate_code_for_binary_boolean_expression@@Base+0x28c0>
   18dd4:	adds	r2, r2, #8
   18dd8:	mov	r1, #0
   18ddc:	adc	r3, r3, #0
   18de0:	ldr	r0, [pc, r0]
   18de4:	mov	r7, r0
   18de8:	strb	r1, [r7, r4]!
   18dec:	strb	r1, [r7, #3]
   18df0:	strb	r1, [r7, #2]
   18df4:	strb	r1, [r7, #1]
   18df8:	strd	r2, [sl]
   18dfc:	ldr	r6, [r9, #4]
   18e00:	ldr	r1, [pc, #1668]	; 1948c <__generate_code_for_binary_boolean_expression@@Base+0x28fc>
   18e04:	adds	ip, r4, #8
   18e08:	adc	r7, r5, #0
   18e0c:	ldr	r1, [pc, r1]
   18e10:	subs	r1, r1, ip
   18e14:	sbcs	r1, r6, r7
   18e18:	bcs	18f64 <__generate_code_for_binary_boolean_expression@@Base+0x23d4>
   18e1c:	mov	r1, #7
   18e20:	orr	r1, r1, #131072	; 0x20000
   18e24:	adds	r1, r4, r1
   18e28:	adc	r2, r5, #0
   18e2c:	mvn	r3, #0
   18e30:	and	r5, r2, r3
   18e34:	mov	r2, #16646144	; 0xfe0000
   18e38:	orr	r2, r2, #-16777216	; 0xff000000
   18e3c:	ldr	r6, [pc, #1612]	; 19490 <__generate_code_for_binary_boolean_expression@@Base+0x2900>
   18e40:	and	r4, r1, r2
   18e44:	mov	r1, r4
   18e48:	add	r6, pc, r6
   18e4c:	bl	11f9c <realloc@plt>
   18e50:	str	r0, [r6]
   18e54:	strd	r4, [r9]
   18e58:	ldrb	r7, [r8]
   18e5c:	ldr	r3, [sl, #4]
   18e60:	ldr	r2, [pc, #1580]	; 19494 <__generate_code_for_binary_boolean_expression@@Base+0x2904>
   18e64:	mov	r6, r0
   18e68:	mov	r1, #0
   18e6c:	ldr	r2, [pc, r2]
   18e70:	strb	r1, [r6, r2]!
   18e74:	strb	r1, [r6, #3]
   18e78:	strb	r1, [r6, #2]
   18e7c:	strb	r1, [r6, #1]
   18e80:	adds	r1, r2, #4
   18e84:	adc	r5, r3, #0
   18e88:	cmp	r7, #1
   18e8c:	stm	sl, {r1, r5}
   18e90:	bne	18c54 <__generate_code_for_binary_boolean_expression@@Base+0x20c4>
   18e94:	b	18f88 <__generate_code_for_binary_boolean_expression@@Base+0x23f8>
   18e98:	mov	r2, r0
   18e9c:	mov	r1, #0
   18ea0:	strb	r1, [r2, r3]!
   18ea4:	adds	r6, r3, #4
   18ea8:	strb	r1, [r2, #3]
   18eac:	strb	r1, [r2, #2]
   18eb0:	strb	r1, [r2, #1]
   18eb4:	adc	r1, r5, #0
   18eb8:	str	r6, [sl]
   18ebc:	str	r1, [sl, #4]
   18ec0:	ldr	r4, [r9, #4]
   18ec4:	ldr	r2, [pc, #1376]	; 1942c <__generate_code_for_binary_boolean_expression@@Base+0x289c>
   18ec8:	adds	ip, r3, #8
   18ecc:	adc	r7, r5, #0
   18ed0:	ldr	r2, [pc, r2]
   18ed4:	subs	r2, r2, ip
   18ed8:	sbcs	r2, r4, r7
   18edc:	bcs	19028 <__generate_code_for_binary_boolean_expression@@Base+0x2498>
   18ee0:	mov	r1, #7
   18ee4:	orr	r1, r1, #131072	; 0x20000
   18ee8:	adds	r1, r3, r1
   18eec:	adc	r2, r5, #0
   18ef0:	mvn	r3, #0
   18ef4:	and	r5, r2, r3
   18ef8:	mov	r2, #16646144	; 0xfe0000
   18efc:	orr	r2, r2, #-16777216	; 0xff000000
   18f00:	ldr	r4, [pc, #1320]	; 19430 <__generate_code_for_binary_boolean_expression@@Base+0x28a0>
   18f04:	and	r6, r1, r2
   18f08:	mov	r1, r6
   18f0c:	add	r4, pc, r4
   18f10:	bl	11f9c <realloc@plt>
   18f14:	str	r6, [r9]
   18f18:	str	r5, [r9, #4]
   18f1c:	str	r0, [r4]
   18f20:	ldrb	r5, [r8]
   18f24:	ldr	r1, [sl, #4]
   18f28:	ldr	r6, [pc, #1284]	; 19434 <__generate_code_for_binary_boolean_expression@@Base+0x28a4>
   18f2c:	mov	r3, r0
   18f30:	mov	r2, #0
   18f34:	mov	r7, #1
   18f38:	ldr	r6, [pc, r6]
   18f3c:	strb	r2, [r3, r6]!
   18f40:	strb	r2, [r3, #3]
   18f44:	strb	r2, [r3, #2]
   18f48:	strb	r2, [r3, #1]
   18f4c:	adds	r2, r6, #4
   18f50:	adc	r3, r1, #0
   18f54:	cmp	r5, #1
   18f58:	strd	r2, [sl]
   18f5c:	bne	18b20 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   18f60:	b	1904c <__generate_code_for_binary_boolean_expression@@Base+0x24bc>
   18f64:	mov	r7, r0
   18f68:	mov	r1, #0
   18f6c:	strb	r1, [r7, r2]!
   18f70:	strb	r1, [r7, #3]
   18f74:	strb	r1, [r7, #2]
   18f78:	strb	r1, [r7, #1]
   18f7c:	adds	r1, r2, #4
   18f80:	adc	r5, r3, #0
   18f84:	stm	sl, {r1, r5}
   18f88:	ldr	r4, [r9, #4]
   18f8c:	ldr	r6, [pc, #1284]	; 19498 <__generate_code_for_binary_boolean_expression@@Base+0x2908>
   18f90:	adds	r7, r2, #8
   18f94:	adc	ip, r3, #0
   18f98:	ldr	r6, [pc, r6]
   18f9c:	subs	r7, r6, r7
   18fa0:	sbcs	r7, r4, ip
   18fa4:	bcs	190c0 <__generate_code_for_binary_boolean_expression@@Base+0x2530>
   18fa8:	mov	r1, #7
   18fac:	orr	r1, r1, #131072	; 0x20000
   18fb0:	adds	r1, r2, r1
   18fb4:	adc	r2, r3, #0
   18fb8:	mvn	r3, #0
   18fbc:	and	r5, r2, r3
   18fc0:	mov	r2, #16646144	; 0xfe0000
   18fc4:	orr	r2, r2, #-16777216	; 0xff000000
   18fc8:	ldr	r4, [pc, #1228]	; 1949c <__generate_code_for_binary_boolean_expression@@Base+0x290c>
   18fcc:	and	r6, r1, r2
   18fd0:	mov	r1, r6
   18fd4:	add	r4, pc, r4
   18fd8:	bl	11f9c <realloc@plt>
   18fdc:	str	r6, [r9]
   18fe0:	str	r5, [r9, #4]
   18fe4:	str	r0, [r4]
   18fe8:	ldrb	r7, [r8]
   18fec:	ldr	r5, [sl, #4]
   18ff0:	ldr	r1, [pc, #1192]	; 194a0 <__generate_code_for_binary_boolean_expression@@Base+0x2910>
   18ff4:	mov	r3, r0
   18ff8:	mov	r2, #0
   18ffc:	ldr	r1, [pc, r1]
   19000:	strb	r2, [r3, r1]!
   19004:	strb	r2, [r3, #3]
   19008:	strb	r2, [r3, #2]
   1900c:	strb	r2, [r3, #1]
   19010:	adds	r2, r1, #4
   19014:	adc	r3, r5, #0
   19018:	cmp	r7, #1
   1901c:	strd	r2, [sl]
   19020:	bne	18c78 <__generate_code_for_binary_boolean_expression@@Base+0x20e8>
   19024:	b	190e4 <__generate_code_for_binary_boolean_expression@@Base+0x2554>
   19028:	mov	r3, r0
   1902c:	mov	r2, #0
   19030:	strb	r2, [r3, r6]!
   19034:	strb	r2, [r3, #3]
   19038:	strb	r2, [r3, #2]
   1903c:	strb	r2, [r3, #1]
   19040:	adds	r2, r6, #4
   19044:	adc	r3, r1, #0
   19048:	strd	r2, [sl]
   1904c:	ldr	r4, [r9, #4]
   19050:	ldr	r5, [pc, #992]	; 19438 <__generate_code_for_binary_boolean_expression@@Base+0x28a8>
   19054:	adds	lr, r6, #8
   19058:	adc	ip, r1, #0
   1905c:	mov	r7, #1
   19060:	ldr	r5, [pc, r5]
   19064:	subs	r5, r5, lr
   19068:	sbcs	r5, r4, ip
   1906c:	bcs	18b20 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   19070:	mov	r2, #7
   19074:	orr	r2, r2, #131072	; 0x20000
   19078:	adds	r2, r6, r2
   1907c:	adc	r1, r1, #0
   19080:	mvn	r3, #0
   19084:	and	r5, r1, r3
   19088:	mov	r1, #16646144	; 0xfe0000
   1908c:	orr	r1, r1, #-16777216	; 0xff000000
   19090:	ldr	r4, [pc, #932]	; 1943c <__generate_code_for_binary_boolean_expression@@Base+0x28ac>
   19094:	and	r6, r2, r1
   19098:	mov	r1, r6
   1909c:	add	r4, pc, r4
   190a0:	bl	11f9c <realloc@plt>
   190a4:	str	r6, [r9]
   190a8:	str	r5, [r9, #4]
   190ac:	str	r0, [r4]
   190b0:	ldr	r3, [sl, #4]
   190b4:	ldr	r2, [pc, #900]	; 19440 <__generate_code_for_binary_boolean_expression@@Base+0x28b0>
   190b8:	ldr	r2, [pc, r2]
   190bc:	b	18b20 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   190c0:	mov	r3, r0
   190c4:	mov	r2, #0
   190c8:	strb	r2, [r3, r1]!
   190cc:	strb	r2, [r3, #3]
   190d0:	strb	r2, [r3, #2]
   190d4:	strb	r2, [r3, #1]
   190d8:	adds	r2, r1, #4
   190dc:	adc	r3, r5, #0
   190e0:	strd	r2, [sl]
   190e4:	ldr	r4, [r9, #4]
   190e8:	ldr	r6, [pc, #948]	; 194a4 <__generate_code_for_binary_boolean_expression@@Base+0x2914>
   190ec:	adds	r7, r1, #8
   190f0:	adc	ip, r5, #0
   190f4:	ldr	r6, [pc, r6]
   190f8:	subs	r7, r6, r7
   190fc:	sbcs	r7, r4, ip
   19100:	bcs	191ac <__generate_code_for_binary_boolean_expression@@Base+0x261c>
   19104:	mov	r2, #7
   19108:	orr	r2, r2, #131072	; 0x20000
   1910c:	adds	r1, r1, r2
   19110:	adc	r2, r5, #0
   19114:	mvn	r3, #0
   19118:	and	r5, r2, r3
   1911c:	mov	r2, #16646144	; 0xfe0000
   19120:	orr	r2, r2, #-16777216	; 0xff000000
   19124:	ldr	r4, [pc, #892]	; 194a8 <__generate_code_for_binary_boolean_expression@@Base+0x2918>
   19128:	and	r6, r1, r2
   1912c:	mov	r1, r6
   19130:	add	r4, pc, r4
   19134:	bl	11f9c <realloc@plt>
   19138:	str	r6, [r9]
   1913c:	str	r5, [r9, #4]
   19140:	str	r0, [r4]
   19144:	ldrb	r7, [r8]
   19148:	ldr	r3, [sl, #4]
   1914c:	ldr	r2, [pc, #856]	; 194ac <__generate_code_for_binary_boolean_expression@@Base+0x291c>
   19150:	mov	r6, r0
   19154:	mov	r1, #0
   19158:	ldr	r2, [pc, r2]
   1915c:	strb	r1, [r6, r2]!
   19160:	strb	r1, [r6, #3]
   19164:	strb	r1, [r6, #2]
   19168:	strb	r1, [r6, #1]
   1916c:	adds	r1, r2, #4
   19170:	adc	r5, r3, #0
   19174:	cmp	r7, #1
   19178:	stm	sl, {r1, r5}
   1917c:	bne	18c9c <__generate_code_for_binary_boolean_expression@@Base+0x210c>
   19180:	b	191d0 <__generate_code_for_binary_boolean_expression@@Base+0x2640>
   19184:	ldr	r1, [pc, #616]	; 193f4 <__generate_code_for_binary_boolean_expression@@Base+0x2864>
   19188:	add	r1, pc, r1
   1918c:	ldr	r0, [pc, #600]	; 193ec <__generate_code_for_binary_boolean_expression@@Base+0x285c>
   19190:	ldr	r0, [pc, r0]
   19194:	ldr	r0, [r0]
   19198:	ldr	r2, [pc, #592]	; 193f0 <__generate_code_for_binary_boolean_expression@@Base+0x2860>
   1919c:	ldr	r2, [pc, r2]
   191a0:	sub	sp, fp, #28
   191a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191a8:	b	12038 <fprintf@plt>
   191ac:	mov	r7, r0
   191b0:	mov	r1, #0
   191b4:	strb	r1, [r7, r2]!
   191b8:	strb	r1, [r7, #3]
   191bc:	strb	r1, [r7, #2]
   191c0:	strb	r1, [r7, #1]
   191c4:	adds	r1, r2, #4
   191c8:	adc	r5, r3, #0
   191cc:	stm	sl, {r1, r5}
   191d0:	ldr	r4, [r9, #4]
   191d4:	ldr	r6, [pc, #724]	; 194b0 <__generate_code_for_binary_boolean_expression@@Base+0x2920>
   191d8:	adds	r7, r2, #8
   191dc:	adc	ip, r3, #0
   191e0:	ldr	r6, [pc, r6]
   191e4:	subs	r7, r6, r7
   191e8:	sbcs	r7, r4, ip
   191ec:	bcs	19274 <__generate_code_for_binary_boolean_expression@@Base+0x26e4>
   191f0:	mov	r1, #7
   191f4:	orr	r1, r1, #131072	; 0x20000
   191f8:	adds	r1, r2, r1
   191fc:	adc	r2, r3, #0
   19200:	mvn	r3, #0
   19204:	and	r5, r2, r3
   19208:	mov	r2, #16646144	; 0xfe0000
   1920c:	orr	r2, r2, #-16777216	; 0xff000000
   19210:	ldr	r4, [pc, #668]	; 194b4 <__generate_code_for_binary_boolean_expression@@Base+0x2924>
   19214:	and	r6, r1, r2
   19218:	mov	r1, r6
   1921c:	add	r4, pc, r4
   19220:	bl	11f9c <realloc@plt>
   19224:	str	r6, [r9]
   19228:	str	r5, [r9, #4]
   1922c:	str	r0, [r4]
   19230:	ldrb	r2, [r8]
   19234:	ldr	r5, [sl, #4]
   19238:	ldr	r1, [pc, #632]	; 194b8 <__generate_code_for_binary_boolean_expression@@Base+0x2928>
   1923c:	mov	r7, r0
   19240:	mov	r3, #0
   19244:	ldr	r1, [pc, r1]
   19248:	adds	r4, r1, #4
   1924c:	strb	r3, [r7, r1]!
   19250:	str	r4, [sl]
   19254:	strb	r3, [r7, #3]
   19258:	strb	r3, [r7, #2]
   1925c:	strb	r3, [r7, #1]
   19260:	adc	r3, r5, #0
   19264:	cmp	r2, #1
   19268:	str	r3, [sl, #4]
   1926c:	bne	18cc4 <__generate_code_for_binary_boolean_expression@@Base+0x2134>
   19270:	b	1929c <__generate_code_for_binary_boolean_expression@@Base+0x270c>
   19274:	mov	r3, r0
   19278:	mov	r2, #0
   1927c:	strb	r2, [r3, r1]!
   19280:	adds	r4, r1, #4
   19284:	strb	r2, [r3, #3]
   19288:	strb	r2, [r3, #2]
   1928c:	strb	r2, [r3, #1]
   19290:	adc	r3, r5, #0
   19294:	str	r4, [sl]
   19298:	str	r3, [sl, #4]
   1929c:	ldr	r6, [r9, #4]
   192a0:	ldr	r2, [pc, #532]	; 194bc <__generate_code_for_binary_boolean_expression@@Base+0x292c>
   192a4:	adds	ip, r1, #8
   192a8:	adc	r7, r5, #0
   192ac:	ldr	r2, [pc, r2]
   192b0:	subs	r2, r2, ip
   192b4:	sbcs	r2, r6, r7
   192b8:	bcs	19340 <__generate_code_for_binary_boolean_expression@@Base+0x27b0>
   192bc:	mov	r2, #7
   192c0:	orr	r2, r2, #131072	; 0x20000
   192c4:	adds	r1, r1, r2
   192c8:	adc	r2, r5, #0
   192cc:	mvn	r3, #0
   192d0:	and	r5, r2, r3
   192d4:	mov	r2, #16646144	; 0xfe0000
   192d8:	orr	r2, r2, #-16777216	; 0xff000000
   192dc:	ldr	r4, [pc, #368]	; 19454 <__generate_code_for_binary_boolean_expression@@Base+0x28c4>
   192e0:	and	r6, r1, r2
   192e4:	mov	r1, r6
   192e8:	add	r4, pc, r4
   192ec:	bl	11f9c <realloc@plt>
   192f0:	str	r6, [r9]
   192f4:	str	r5, [r9, #4]
   192f8:	str	r0, [r4]
   192fc:	ldrb	r7, [r8]
   19300:	ldr	r3, [sl, #4]
   19304:	ldr	r4, [pc, #332]	; 19458 <__generate_code_for_binary_boolean_expression@@Base+0x28c8>
   19308:	mov	r2, r0
   1930c:	mov	r1, #0
   19310:	ldr	r4, [pc, r4]
   19314:	strb	r1, [r2, r4]!
   19318:	strb	r1, [r2, #3]
   1931c:	strb	r1, [r2, #2]
   19320:	strb	r1, [r2, #1]
   19324:	adds	r2, r4, #4
   19328:	adc	r1, r3, #0
   1932c:	cmp	r7, #0
   19330:	str	r2, [sl]
   19334:	str	r1, [sl, #4]
   19338:	beq	18cec <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   1933c:	b	19368 <__generate_code_for_binary_boolean_expression@@Base+0x27d8>
   19340:	mov	r2, r0
   19344:	mov	r1, #0
   19348:	strb	r1, [r2, r4]!
   1934c:	strb	r1, [r2, #3]
   19350:	strb	r1, [r2, #2]
   19354:	strb	r1, [r2, #1]
   19358:	adds	r2, r4, #4
   1935c:	adc	r1, r3, #0
   19360:	str	r2, [sl]
   19364:	str	r1, [sl, #4]
   19368:	ldr	r5, [r9, #4]
   1936c:	ldr	r6, [pc, #232]	; 1945c <__generate_code_for_binary_boolean_expression@@Base+0x28cc>
   19370:	adds	r7, r4, #8
   19374:	adc	ip, r3, #0
   19378:	ldr	r6, [pc, r6]
   1937c:	subs	r7, r6, r7
   19380:	sbcs	r7, r5, ip
   19384:	bcs	18cec <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19388:	mov	r1, #7
   1938c:	orr	r1, r1, #131072	; 0x20000
   19390:	adds	r1, r4, r1
   19394:	adc	r2, r3, #0
   19398:	mvn	r3, #0
   1939c:	and	r7, r2, r3
   193a0:	mov	r2, #16646144	; 0xfe0000
   193a4:	orr	r2, r2, #-16777216	; 0xff000000
   193a8:	ldr	r5, [pc, #176]	; 19460 <__generate_code_for_binary_boolean_expression@@Base+0x28d0>
   193ac:	and	r6, r1, r2
   193b0:	mov	r1, r6
   193b4:	add	r5, pc, r5
   193b8:	bl	11f9c <realloc@plt>
   193bc:	strd	r6, [r9]
   193c0:	str	r0, [r5]
   193c4:	ldr	r1, [sl, #4]
   193c8:	ldr	r2, [pc, #148]	; 19464 <__generate_code_for_binary_boolean_expression@@Base+0x28d4>
   193cc:	ldr	r2, [pc, r2]
   193d0:	b	18cec <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   193d4:	andeq	r4, r1, r4, asr r9
   193d8:	andeq	r4, r1, r4, asr r9
   193dc:	andeq	r4, r1, r8, asr #18
   193e0:	andeq	r4, r1, ip, lsr #18
   193e4:	andeq	r4, r1, r0, ror #16
   193e8:	andeq	r2, r0, r2, ror #22
   193ec:	andeq	r2, r1, ip, lsr #30
   193f0:	andeq	r3, r1, r4, lsl pc
   193f4:	andeq	r2, r0, fp, asr #5
   193f8:	andeq	r4, r1, r0, ror #12
   193fc:	andeq	r4, r1, ip, lsl r9
   19400:	andeq	r4, r1, r0, lsl r9
   19404:	andeq	r4, r1, r4, lsl #16
   19408:	andeq	r4, r1, r4, asr #17
   1940c:	andeq	r4, r1, r0, asr #17
   19410:	andeq	r4, r1, r0, lsr #17
   19414:	ldrdeq	r4, [r1], -ip
   19418:	muleq	r1, ip, r7
   1941c:	andeq	r4, r1, r0, lsl #15
   19420:	andeq	r4, r1, ip, lsl #14
   19424:	andeq	r4, r1, ip, asr #13
   19428:			; <UNDEFINED> instruction: 0x000146b0
   1942c:	strdeq	r4, [r1], -r0
   19430:			; <UNDEFINED> instruction: 0x000141b0
   19434:	muleq	r1, r0, r1
   19438:	andeq	r4, r1, r0, rrx
   1943c:	andeq	r4, r1, r0, lsr #32
   19440:	andeq	r4, r1, r0, lsl r0
   19444:	andeq	r4, r1, r8, lsr #9
   19448:	andeq	r4, r1, r0, ror #10
   1944c:	andeq	r4, r1, r4, asr r5
   19450:	ldrdeq	r4, [r1], -ip
   19454:	ldrdeq	r3, [r1], -r4
   19458:			; <UNDEFINED> instruction: 0x00013db8
   1945c:	andeq	r3, r1, r8, asr #26
   19460:	andeq	r3, r1, r8, lsl #26
   19464:	strdeq	r3, [r1], -ip
   19468:	muleq	r1, r0, r3
   1946c:	andeq	r4, r1, r4, lsl #7
   19470:	andeq	r4, r1, r4, asr #6
   19474:	andeq	r4, r1, r8, lsr r3
   19478:	andeq	r4, r1, r0, lsr r3
   1947c:	andeq	r4, r1, r4, lsl r3
   19480:	andeq	r4, r1, r0, lsl r5
   19484:	andeq	r4, r1, ip, lsl #10
   19488:	strdeq	r4, [r1], -r0
   1948c:			; <UNDEFINED> instruction: 0x000142b4
   19490:	andeq	r4, r1, r4, ror r2
   19494:	andeq	r4, r1, ip, asr r2
   19498:	andeq	r4, r1, r8, lsr #2
   1949c:	andeq	r4, r1, r8, ror #1
   194a0:	andeq	r4, r1, ip, asr #1
   194a4:	andeq	r3, r1, ip, asr #31
   194a8:	andeq	r3, r1, ip, lsl #31
   194ac:	andeq	r3, r1, r0, ror pc
   194b0:	andeq	r3, r1, r0, ror #29
   194b4:	andeq	r3, r1, r0, lsr #29
   194b8:	andeq	r3, r1, r4, lsl #29
   194bc:	andeq	r3, r1, r4, lsl lr
   194c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194c4:	add	fp, sp, #28
   194c8:	sub	sp, sp, #4
   194cc:	ldr	r0, [pc, #496]	; 196c4 <__generate_code_for_binary_boolean_expression@@Base+0x2b34>
   194d0:	ldr	r0, [pc, r0]
   194d4:	cmp	r0, #0
   194d8:	beq	1966c <__generate_code_for_binary_boolean_expression@@Base+0x2adc>
   194dc:	ldr	sl, [pc, #484]	; 196c8 <__generate_code_for_binary_boolean_expression@@Base+0x2b38>
   194e0:	mov	r5, #0
   194e4:	mov	r1, #0
   194e8:	add	sl, pc, sl
   194ec:	ldrb	r0, [sl]
   194f0:	ldr	r8, [pc, #468]	; 196cc <__generate_code_for_binary_boolean_expression@@Base+0x2b3c>
   194f4:	ldr	r4, [pc, #468]	; 196d0 <__generate_code_for_binary_boolean_expression@@Base+0x2b40>
   194f8:	cmp	r0, #1
   194fc:	add	r8, pc, r8
   19500:	add	r4, pc, r4
   19504:	bne	19580 <__generate_code_for_binary_boolean_expression@@Base+0x29f0>
   19508:	ldr	r9, [pc, #452]	; 196d4 <__generate_code_for_binary_boolean_expression@@Base+0x2b44>
   1950c:	ldr	r0, [r8, #4]
   19510:	ldr	r2, [pc, #448]	; 196d8 <__generate_code_for_binary_boolean_expression@@Base+0x2b48>
   19514:	add	r9, pc, r9
   19518:	mov	ip, r4
   1951c:	mov	r1, #1
   19520:	ldr	r2, [pc, r2]
   19524:	ldr	r7, [r9, #4]
   19528:	ldr	r4, [pc, #428]	; 196dc <__generate_code_for_binary_boolean_expression@@Base+0x2b4c>
   1952c:	adds	r3, r2, #8
   19530:	adc	r6, r0, #0
   19534:	ldr	r4, [pc, r4]
   19538:	subs	r3, r4, r3
   1953c:	mov	r4, ip
   19540:	sbcs	r3, r7, r6
   19544:	bcs	19580 <__generate_code_for_binary_boolean_expression@@Base+0x29f0>
   19548:	mov	r1, #7
   1954c:	orr	r1, r1, #131072	; 0x20000
   19550:	adds	r1, r2, r1
   19554:	adc	r7, r0, #0
   19558:	mov	r0, #16646144	; 0xfe0000
   1955c:	orr	r0, r0, #-16777216	; 0xff000000
   19560:	and	r6, r1, r0
   19564:	ldr	r0, [pc, #372]	; 196e0 <__generate_code_for_binary_boolean_expression@@Base+0x2b50>
   19568:	mov	r1, r6
   1956c:	ldr	r0, [pc, r0]
   19570:	bl	11f9c <realloc@plt>
   19574:	ldrb	r1, [sl]
   19578:	strd	r6, [r9]
   1957c:	str	r0, [r4]
   19580:	ldr	r2, [pc, #348]	; 196e4 <__generate_code_for_binary_boolean_expression@@Base+0x2b54>
   19584:	ldr	r2, [pc, r2]
   19588:	ldr	r0, [pc, #344]	; 196e8 <__generate_code_for_binary_boolean_expression@@Base+0x2b58>
   1958c:	ldr	r0, [pc, r0]
   19590:	ldr	r3, [r8, #4]
   19594:	mov	r7, r0
   19598:	strb	r5, [r7, r2]!
   1959c:	adds	r2, r2, #8
   195a0:	adc	r3, r3, #0
   195a4:	strb	r5, [r7, #5]
   195a8:	strb	r5, [r7, #3]
   195ac:	strb	r5, [r7, #2]
   195b0:	strb	r5, [r7, #1]
   195b4:	strb	r5, [r7, #4]!
   195b8:	cmp	r1, #0
   195bc:	strb	r5, [r7, #3]
   195c0:	strb	r5, [r7, #2]
   195c4:	strd	r2, [r8]
   195c8:	beq	195f0 <__generate_code_for_binary_boolean_expression@@Base+0x2a60>
   195cc:	ldr	r3, [pc, #280]	; 196ec <__generate_code_for_binary_boolean_expression@@Base+0x2b5c>
   195d0:	mov	r1, r2
   195d4:	mov	r2, #1
   195d8:	ldr	r3, [pc, r3]
   195dc:	bl	11fa8 <fwrite@plt>
   195e0:	ldr	r0, [pc, #264]	; 196f0 <__generate_code_for_binary_boolean_expression@@Base+0x2b60>
   195e4:	ldr	r0, [pc, r0]
   195e8:	bl	11f54 <free@plt>
   195ec:	b	19634 <__generate_code_for_binary_boolean_expression@@Base+0x2aa4>
   195f0:	ldr	r1, [pc, #252]	; 196f4 <__generate_code_for_binary_boolean_expression@@Base+0x2b64>
   195f4:	mov	r2, #4
   195f8:	ldr	r1, [pc, r1]
   195fc:	bl	120e0 <msync@plt>
   19600:	cmn	r0, #1
   19604:	beq	19680 <__generate_code_for_binary_boolean_expression@@Base+0x2af0>
   19608:	ldr	r1, [pc, #244]	; 19704 <__generate_code_for_binary_boolean_expression@@Base+0x2b74>
   1960c:	ldr	r1, [pc, r1]
   19610:	ldr	r0, [pc, #240]	; 19708 <__generate_code_for_binary_boolean_expression@@Base+0x2b78>
   19614:	ldr	r0, [pc, r0]
   19618:	bl	120b0 <munmap@plt>
   1961c:	ldr	r0, [pc, #232]	; 1970c <__generate_code_for_binary_boolean_expression@@Base+0x2b7c>
   19620:	mov	r1, #0
   19624:	str	r1, [r4]
   19628:	add	r0, pc, r0
   1962c:	str	r1, [r0]
   19630:	str	r1, [r0, #4]
   19634:	ldr	r0, [pc, #212]	; 19710 <__generate_code_for_binary_boolean_expression@@Base+0x2b80>
   19638:	ldr	r0, [pc, r0]
   1963c:	bl	11f48 <fflush@plt>
   19640:	ldr	r0, [pc, #204]	; 19714 <__generate_code_for_binary_boolean_expression@@Base+0x2b84>
   19644:	ldr	r0, [pc, r0]
   19648:	bl	19bc0 <__gcov_flush@@Base+0x304>
   1964c:	ldr	r0, [pc, #196]	; 19718 <__generate_code_for_binary_boolean_expression@@Base+0x2b88>
   19650:	ldr	r0, [pc, r0]
   19654:	bl	12098 <fclose@plt>
   19658:	ldr	r0, [pc, #188]	; 1971c <__generate_code_for_binary_boolean_expression@@Base+0x2b8c>
   1965c:	mov	r1, #0
   19660:	str	r1, [r4]
   19664:	add	r0, pc, r0
   19668:	str	r1, [r0]
   1966c:	ldr	r0, [pc, #172]	; 19720 <__generate_code_for_binary_boolean_expression@@Base+0x2b90>
   19670:	ldr	r0, [pc, r0]
   19674:	sub	sp, fp, #28
   19678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1967c:	b	11f54 <free@plt>
   19680:	bl	12044 <__errno_location@plt>
   19684:	ldr	r1, [pc, #108]	; 196f8 <__generate_code_for_binary_boolean_expression@@Base+0x2b68>
   19688:	mov	r6, r4
   1968c:	ldr	r1, [pc, r1]
   19690:	ldr	r0, [r0]
   19694:	ldr	r4, [r1]
   19698:	ldr	r5, [pc, #92]	; 196fc <__generate_code_for_binary_boolean_expression@@Base+0x2b6c>
   1969c:	ldr	r5, [pc, r5]
   196a0:	bl	11fe4 <strerror@plt>
   196a4:	ldr	r1, [pc, #84]	; 19700 <__generate_code_for_binary_boolean_expression@@Base+0x2b70>
   196a8:	mov	r3, r0
   196ac:	mov	r0, r4
   196b0:	add	r1, pc, r1
   196b4:	mov	r2, r5
   196b8:	mov	r4, r6
   196bc:	bl	12038 <fprintf@plt>
   196c0:	b	19608 <__generate_code_for_binary_boolean_expression@@Base+0x2a78>
   196c4:	andeq	r3, r1, r8, ror #23
   196c8:	andeq	r3, r1, ip, asr #23
   196cc:	andeq	r3, r1, ip, asr #23
   196d0:			; <UNDEFINED> instruction: 0x00013bbc
   196d4:	andeq	r3, r1, ip, lsr #23
   196d8:	andeq	r3, r1, r8, lsr #23
   196dc:	andeq	r3, r1, ip, lsl #23
   196e0:	andeq	r3, r1, r0, asr fp
   196e4:	andeq	r3, r1, r4, asr #22
   196e8:	andeq	r3, r1, r0, lsr fp
   196ec:	andeq	r3, r1, r0, ror #21
   196f0:	ldrdeq	r3, [r1], -r8
   196f4:	andeq	r3, r1, r8, ror #21
   196f8:	andeq	r2, r1, r0, lsr sl
   196fc:	andeq	r3, r1, r4, lsl sl
   19700:	andeq	r1, r0, r1, lsl lr
   19704:	ldrdeq	r3, [r1], -r4
   19708:	andeq	r3, r1, r8, lsr #21
   1970c:			; <UNDEFINED> instruction: 0x00013ab8
   19710:	andeq	r3, r1, r0, lsl #21
   19714:	andeq	r2, r1, r8, lsl #21
   19718:	andeq	r3, r1, r8, ror #20
   1971c:	andeq	r3, r1, r4, asr sl
   19720:	andeq	r3, r1, r0, asr #20
   19724:	push	{r4, sl, fp, lr}
   19728:	add	fp, sp, #8
   1972c:	mov	r4, r0
   19730:	mov	r0, #12
   19734:	bl	11fcc <malloc@plt>
   19738:	ldr	r1, [pc, #60]	; 1977c <__generate_code_for_binary_boolean_expression@@Base+0x2bec>
   1973c:	mov	r2, #0
   19740:	add	r1, pc, r1
   19744:	stm	r0, {r1, r4}
   19748:	str	r2, [r0, #8]
   1974c:	ldr	r1, [pc, #44]	; 19780 <__generate_code_for_binary_boolean_expression@@Base+0x2bf0>
   19750:	ldr	r1, [pc, r1]
   19754:	mov	r2, r1
   19758:	ldr	r3, [r2], #4
   1975c:	ldr	r4, [r2]
   19760:	cmp	r3, #0
   19764:	mov	r3, r2
   19768:	addne	r3, r4, #8
   1976c:	moveq	r2, r1
   19770:	str	r0, [r3]
   19774:	str	r0, [r2]
   19778:	pop	{r4, sl, fp, pc}
   1977c:	muleq	r1, r4, r9
   19780:	andeq	r2, r1, r8, ror #18
   19784:	push	{r4, r5, fp, lr}
   19788:	add	fp, sp, #8
   1978c:	ldr	r0, [pc, #64]	; 197d4 <__generate_code_for_binary_boolean_expression@@Base+0x2c44>
   19790:	ldr	r0, [pc, r0]
   19794:	ldr	r4, [r0]
   19798:	cmp	r4, #0
   1979c:	beq	197d0 <__generate_code_for_binary_boolean_expression@@Base+0x2c40>
   197a0:	ldr	r5, [pc, #48]	; 197d8 <__generate_code_for_binary_boolean_expression@@Base+0x2c48>
   197a4:	add	r5, pc, r5
   197a8:	b	197b8 <__generate_code_for_binary_boolean_expression@@Base+0x2c28>
   197ac:	ldr	r4, [r4, #8]
   197b0:	cmp	r4, #0
   197b4:	beq	197d0 <__generate_code_for_binary_boolean_expression@@Base+0x2c40>
   197b8:	ldr	r0, [r4]
   197bc:	cmp	r0, r5
   197c0:	bne	197ac <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   197c4:	ldr	r0, [r4, #4]
   197c8:	blx	r0
   197cc:	b	197ac <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   197d0:	pop	{r4, r5, fp, pc}
   197d4:	andeq	r2, r1, r8, lsr #18
   197d8:	andeq	r3, r1, r0, lsr r9
   197dc:	push	{r4, r5, r6, r7, fp, lr}
   197e0:	add	fp, sp, #16
   197e4:	ldr	r4, [pc, #104]	; 19854 <__generate_code_for_binary_boolean_expression@@Base+0x2cc4>
   197e8:	ldr	r4, [pc, r4]
   197ec:	ldr	r0, [r4]
   197f0:	cmp	r0, #0
   197f4:	beq	19850 <__generate_code_for_binary_boolean_expression@@Base+0x2cc0>
   197f8:	ldr	r5, [pc, #88]	; 19858 <__generate_code_for_binary_boolean_expression@@Base+0x2cc8>
   197fc:	mov	r6, #0
   19800:	add	r5, pc, r5
   19804:	b	19838 <__generate_code_for_binary_boolean_expression@@Base+0x2ca8>
   19808:	ldr	r1, [r4]
   1980c:	cmp	r0, r1
   19810:	streq	r7, [r4]
   19814:	ldr	r1, [r4, #4]
   19818:	cmp	r0, r1
   1981c:	streq	r6, [r4, #4]
   19820:	cmp	r6, #0
   19824:	strne	r7, [r6, #8]
   19828:	bl	11f54 <free@plt>
   1982c:	mov	r0, r7
   19830:	cmp	r7, #0
   19834:	beq	19850 <__generate_code_for_binary_boolean_expression@@Base+0x2cc0>
   19838:	ldr	r1, [r0]
   1983c:	ldr	r7, [r0, #8]
   19840:	cmp	r1, r5
   19844:	beq	19808 <__generate_code_for_binary_boolean_expression@@Base+0x2c78>
   19848:	mov	r6, r0
   1984c:	b	1982c <__generate_code_for_binary_boolean_expression@@Base+0x2c9c>
   19850:	pop	{r4, r5, r6, r7, fp, pc}
   19854:	ldrdeq	r2, [r1], -r0
   19858:	ldrdeq	r3, [r1], -r4
   1985c:	push	{r4, sl, fp, lr}
   19860:	add	fp, sp, #8
   19864:	mov	r4, r0
   19868:	mov	r0, #12
   1986c:	bl	11fcc <malloc@plt>
   19870:	ldr	r1, [pc, #60]	; 198b4 <__generate_code_for_binary_boolean_expression@@Base+0x2d24>
   19874:	mov	r2, #0
   19878:	add	r1, pc, r1
   1987c:	stm	r0, {r1, r4}
   19880:	str	r2, [r0, #8]
   19884:	ldr	r1, [pc, #44]	; 198b8 <__generate_code_for_binary_boolean_expression@@Base+0x2d28>
   19888:	ldr	r1, [pc, r1]
   1988c:	mov	r2, r1
   19890:	ldr	r3, [r2], #4
   19894:	ldr	r4, [r2]
   19898:	cmp	r3, #0
   1989c:	mov	r3, r2
   198a0:	addne	r3, r4, #8
   198a4:	moveq	r2, r1
   198a8:	str	r0, [r3]
   198ac:	str	r0, [r2]
   198b0:	pop	{r4, sl, fp, pc}
   198b4:	andeq	r3, r1, ip, asr r8
   198b8:	andeq	r2, r1, ip, lsr #16

000198bc <__gcov_flush@@Base>:
   198bc:	push	{r4, sl, fp, lr}
   198c0:	add	fp, sp, #8
   198c4:	ldr	r0, [pc, #36]	; 198f0 <__gcov_flush@@Base+0x34>
   198c8:	ldr	r0, [pc, r0]
   198cc:	ldr	r4, [r0]
   198d0:	cmp	r4, #0
   198d4:	beq	198ec <__gcov_flush@@Base+0x30>
   198d8:	ldr	r0, [r4, #4]
   198dc:	blx	r0
   198e0:	ldr	r4, [r4, #8]
   198e4:	cmp	r4, #0
   198e8:	bne	198d8 <__gcov_flush@@Base+0x1c>
   198ec:	pop	{r4, sl, fp, pc}
   198f0:	andeq	r2, r1, ip, ror #15
   198f4:	push	{r4, r5, r6, r7, fp, lr}
   198f8:	add	fp, sp, #16
   198fc:	ldr	r4, [pc, #104]	; 1996c <__gcov_flush@@Base+0xb0>
   19900:	ldr	r4, [pc, r4]
   19904:	ldr	r0, [r4]
   19908:	cmp	r0, #0
   1990c:	beq	19968 <__gcov_flush@@Base+0xac>
   19910:	ldr	r5, [pc, #88]	; 19970 <__gcov_flush@@Base+0xb4>
   19914:	mov	r6, #0
   19918:	add	r5, pc, r5
   1991c:	b	19950 <__gcov_flush@@Base+0x94>
   19920:	ldr	r1, [r4]
   19924:	cmp	r0, r1
   19928:	streq	r7, [r4]
   1992c:	ldr	r1, [r4, #4]
   19930:	cmp	r0, r1
   19934:	streq	r6, [r4, #4]
   19938:	cmp	r6, #0
   1993c:	strne	r7, [r6, #8]
   19940:	bl	11f54 <free@plt>
   19944:	mov	r0, r7
   19948:	cmp	r7, #0
   1994c:	beq	19968 <__gcov_flush@@Base+0xac>
   19950:	ldr	r1, [r0]
   19954:	ldr	r7, [r0, #8]
   19958:	cmp	r1, r5
   1995c:	beq	19920 <__gcov_flush@@Base+0x64>
   19960:	mov	r6, r0
   19964:	b	19944 <__gcov_flush@@Base+0x88>
   19968:	pop	{r4, r5, r6, r7, fp, pc}
   1996c:			; <UNDEFINED> instruction: 0x000127b4
   19970:			; <UNDEFINED> instruction: 0x000137bc
   19974:	push	{r4, r5, r6, sl, fp, lr}
   19978:	add	fp, sp, #16
   1997c:	ldr	r6, [pc, #228]	; 19a68 <__gcov_flush@@Base+0x1ac>
   19980:	mov	r4, r1
   19984:	cmp	r0, #0
   19988:	add	r6, pc, r6
   1998c:	beq	199d8 <__gcov_flush@@Base+0x11c>
   19990:	mov	r5, r0
   19994:	mov	r0, #12
   19998:	bl	11fcc <malloc@plt>
   1999c:	mov	r1, #0
   199a0:	str	r6, [r0]
   199a4:	str	r5, [r0, #4]
   199a8:	str	r1, [r0, #8]
   199ac:	ldr	r1, [pc, #184]	; 19a6c <__gcov_flush@@Base+0x1b0>
   199b0:	ldr	r1, [pc, r1]
   199b4:	mov	r2, r1
   199b8:	ldr	r3, [r2], #4
   199bc:	ldr	r5, [r2]
   199c0:	cmp	r3, #0
   199c4:	mov	r3, r2
   199c8:	addne	r3, r5, #8
   199cc:	moveq	r2, r1
   199d0:	str	r0, [r3]
   199d4:	str	r0, [r2]
   199d8:	cmp	r4, #0
   199dc:	beq	19a24 <__gcov_flush@@Base+0x168>
   199e0:	mov	r0, #12
   199e4:	bl	11fcc <malloc@plt>
   199e8:	mov	r1, #0
   199ec:	str	r6, [r0]
   199f0:	str	r4, [r0, #4]
   199f4:	str	r1, [r0, #8]
   199f8:	ldr	r1, [pc, #112]	; 19a70 <__gcov_flush@@Base+0x1b4>
   199fc:	ldr	r1, [pc, r1]
   19a00:	mov	r2, r1
   19a04:	ldr	r3, [r2], #4
   19a08:	ldr	r6, [r2]
   19a0c:	cmp	r3, #0
   19a10:	mov	r3, r2
   19a14:	addne	r3, r6, #8
   19a18:	moveq	r2, r1
   19a1c:	str	r0, [r3]
   19a20:	str	r0, [r2]
   19a24:	ldr	r1, [pc, #72]	; 19a74 <__gcov_flush@@Base+0x1b8>
   19a28:	add	r1, pc, r1
   19a2c:	ldrb	r0, [r1]
   19a30:	cmp	r0, #0
   19a34:	popne	{r4, r5, r6, sl, fp, pc}
   19a38:	ldr	r0, [pc, #56]	; 19a78 <__gcov_flush@@Base+0x1bc>
   19a3c:	mov	r2, #1
   19a40:	strb	r2, [r1]
   19a44:	add	r0, pc, r0
   19a48:	bl	1a014 <__libc_csu_fini@@Base+0x4>
   19a4c:	ldr	r0, [pc, #40]	; 19a7c <__gcov_flush@@Base+0x1c0>
   19a50:	add	r0, pc, r0
   19a54:	bl	1a014 <__libc_csu_fini@@Base+0x4>
   19a58:	ldr	r0, [pc, #32]	; 19a80 <__gcov_flush@@Base+0x1c4>
   19a5c:	add	r0, pc, r0
   19a60:	pop	{r4, r5, r6, sl, fp, lr}
   19a64:	b	1a014 <__libc_csu_fini@@Base+0x4>
   19a68:	andeq	r3, r1, ip, asr #14
   19a6c:	andeq	r2, r1, r8, lsl #14
   19a70:			; <UNDEFINED> instruction: 0x000126b8
   19a74:			; <UNDEFINED> instruction: 0x000136b0
   19a78:			; <UNDEFINED> instruction: 0xfffffea8
   19a7c:			; <UNDEFINED> instruction: 0xfffffd84
   19a80:			; <UNDEFINED> instruction: 0xfffffd20
   19a84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a88:	add	fp, sp, #24
   19a8c:	ldr	r7, [pc, #68]	; 19ad8 <__gcov_flush@@Base+0x21c>
   19a90:	mov	r4, r0
   19a94:	mov	r5, #1
   19a98:	mov	r8, #0
   19a9c:	ldr	r7, [pc, r7]
   19aa0:	mov	r6, #47	; 0x2f
   19aa4:	b	19ac0 <__gcov_flush@@Base+0x204>
   19aa8:	strb	r8, [r4, r5]
   19aac:	ldr	r1, [r7]
   19ab0:	mov	r0, r4
   19ab4:	bl	1205c <mkdir@plt>
   19ab8:	strb	r6, [r4, r5]
   19abc:	add	r5, r5, #1
   19ac0:	ldrb	r0, [r4, r5]
   19ac4:	cmp	r0, #47	; 0x2f
   19ac8:	beq	19aa8 <__gcov_flush@@Base+0x1ec>
   19acc:	cmp	r0, #0
   19ad0:	bne	19abc <__gcov_flush@@Base+0x200>
   19ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19ad8:	andeq	r2, r1, r4, lsl r6
   19adc:	ldr	r0, [pc, #8]	; 19aec <__gcov_flush@@Base+0x230>
   19ae0:	ldr	r0, [pc, r0]
   19ae4:	ldr	r0, [r0]
   19ae8:	bx	lr
   19aec:	ldrdeq	r2, [r1], -r0
   19af0:	ldr	r1, [pc, #8]	; 19b00 <__gcov_flush@@Base+0x244>
   19af4:	ldr	r1, [pc, r1]
   19af8:	str	r0, [r1]
   19afc:	bx	lr
   19b00:			; <UNDEFINED> instruction: 0x000125bc
   19b04:	push	{r4, r5, r6, sl, fp, lr}
   19b08:	add	fp, sp, #16
   19b0c:	sub	sp, sp, #392	; 0x188
   19b10:	mov	r6, sp
   19b14:	mov	r5, r0
   19b18:	mov	r0, r6
   19b1c:	mov	r4, r1
   19b20:	bl	11f84 <uname@plt>
   19b24:	cmp	r0, #0
   19b28:	bmi	19b40 <__gcov_flush@@Base+0x284>
   19b2c:	add	r1, r6, #65	; 0x41
   19b30:	mov	r0, r5
   19b34:	mov	r2, r4
   19b38:	bl	12074 <strncpy@plt>
   19b3c:	mov	r0, #0
   19b40:	sub	sp, fp, #16
   19b44:	pop	{r4, r5, r6, sl, fp, pc}
   19b48:	push	{r4, r5, r6, sl, fp, lr}
   19b4c:	add	fp, sp, #16
   19b50:	sub	sp, sp, #32
   19b54:	mov	r4, #0
   19b58:	str	r4, [sp, #8]
   19b5c:	strh	r4, [sp, #2]
   19b60:	mov	r5, r0
   19b64:	str	r4, [sp, #12]
   19b68:	str	r4, [sp, #16]
   19b6c:	str	r4, [sp, #20]
   19b70:	bl	11ffc <getpid@plt>
   19b74:	mov	r6, sp
   19b78:	str	r0, [sp, #24]
   19b7c:	mov	r0, #1
   19b80:	strh	r0, [sp]
   19b84:	mov	r0, r5
   19b88:	mov	r1, #14
   19b8c:	mov	r2, r6
   19b90:	bl	120bc <fcntl64@plt>
   19b94:	cmn	r0, #1
   19b98:	bne	19bb4 <__gcov_flush@@Base+0x2f8>
   19b9c:	bl	12044 <__errno_location@plt>
   19ba0:	ldr	r0, [r0]
   19ba4:	cmp	r0, #4
   19ba8:	beq	19b84 <__gcov_flush@@Base+0x2c8>
   19bac:	cmp	r0, #37	; 0x25
   19bb0:	mvneq	r4, #0
   19bb4:	mov	r0, r4
   19bb8:	sub	sp, fp, #16
   19bbc:	pop	{r4, r5, r6, sl, fp, pc}
   19bc0:	push	{r4, r5, r6, sl, fp, lr}
   19bc4:	add	fp, sp, #16
   19bc8:	sub	sp, sp, #32
   19bcc:	mov	r4, #0
   19bd0:	str	r4, [sp, #8]
   19bd4:	strh	r4, [sp, #2]
   19bd8:	mov	r5, r0
   19bdc:	str	r4, [sp, #12]
   19be0:	str	r4, [sp, #16]
   19be4:	str	r4, [sp, #20]
   19be8:	bl	11ffc <getpid@plt>
   19bec:	mov	r6, sp
   19bf0:	str	r0, [sp, #24]
   19bf4:	mov	r0, #2
   19bf8:	strh	r0, [sp]
   19bfc:	mov	r0, r5
   19c00:	mov	r1, #14
   19c04:	mov	r2, r6
   19c08:	bl	120bc <fcntl64@plt>
   19c0c:	cmn	r0, #1
   19c10:	bne	19c2c <__gcov_flush@@Base+0x370>
   19c14:	bl	12044 <__errno_location@plt>
   19c18:	ldr	r0, [r0]
   19c1c:	cmp	r0, #4
   19c20:	beq	19bfc <__gcov_flush@@Base+0x340>
   19c24:	cmp	r0, #37	; 0x25
   19c28:	mvneq	r4, #0
   19c2c:	mov	r0, r4
   19c30:	sub	sp, fp, #16
   19c34:	pop	{r4, r5, r6, sl, fp, pc}
   19c38:	push	{r4, r5, r6, sl, fp, lr}
   19c3c:	add	fp, sp, #16
   19c40:	sub	sp, sp, #32
   19c44:	bl	1208c <fileno@plt>
   19c48:	mov	r4, #0
   19c4c:	str	r4, [sp, #8]
   19c50:	strh	r4, [sp, #2]
   19c54:	mov	r5, r0
   19c58:	str	r4, [sp, #12]
   19c5c:	str	r4, [sp, #16]
   19c60:	str	r4, [sp, #20]
   19c64:	bl	11ffc <getpid@plt>
   19c68:	mov	r6, sp
   19c6c:	str	r0, [sp, #24]
   19c70:	mov	r0, #1
   19c74:	strh	r0, [sp]
   19c78:	mov	r0, r5
   19c7c:	mov	r1, #14
   19c80:	mov	r2, r6
   19c84:	bl	120bc <fcntl64@plt>
   19c88:	cmn	r0, #1
   19c8c:	bne	19ca8 <__gcov_flush@@Base+0x3ec>
   19c90:	bl	12044 <__errno_location@plt>
   19c94:	ldr	r0, [r0]
   19c98:	cmp	r0, #4
   19c9c:	beq	19c78 <__gcov_flush@@Base+0x3bc>
   19ca0:	cmp	r0, #37	; 0x25
   19ca4:	mvneq	r4, #0
   19ca8:	mov	r0, r4
   19cac:	sub	sp, fp, #16
   19cb0:	pop	{r4, r5, r6, sl, fp, pc}
   19cb4:	push	{r4, r5, r6, sl, fp, lr}
   19cb8:	add	fp, sp, #16
   19cbc:	sub	sp, sp, #32
   19cc0:	bl	1208c <fileno@plt>
   19cc4:	mov	r4, #0
   19cc8:	str	r4, [sp, #8]
   19ccc:	strh	r4, [sp, #2]
   19cd0:	mov	r5, r0
   19cd4:	str	r4, [sp, #12]
   19cd8:	str	r4, [sp, #16]
   19cdc:	str	r4, [sp, #20]
   19ce0:	bl	11ffc <getpid@plt>
   19ce4:	mov	r6, sp
   19ce8:	str	r0, [sp, #24]
   19cec:	mov	r0, #2
   19cf0:	strh	r0, [sp]
   19cf4:	mov	r0, r5
   19cf8:	mov	r1, #14
   19cfc:	mov	r2, r6
   19d00:	bl	120bc <fcntl64@plt>
   19d04:	cmn	r0, #1
   19d08:	bne	19d24 <__gcov_flush@@Base+0x468>
   19d0c:	bl	12044 <__errno_location@plt>
   19d10:	ldr	r0, [r0]
   19d14:	cmp	r0, #4
   19d18:	beq	19cf4 <__gcov_flush@@Base+0x438>
   19d1c:	cmp	r0, #37	; 0x25
   19d20:	mvneq	r4, #0
   19d24:	mov	r0, r4
   19d28:	sub	sp, fp, #16
   19d2c:	pop	{r4, r5, r6, sl, fp, pc}
   19d30:	push	{r4, r5, fp, lr}
   19d34:	add	fp, sp, #8
   19d38:	sub	sp, sp, #32
   19d3c:	mov	r2, #182	; 0xb6
   19d40:	orr	r2, r2, #256	; 0x100
   19d44:	mov	r1, #66	; 0x42
   19d48:	bl	11fb4 <open64@plt>
   19d4c:	cmp	r0, #0
   19d50:	bmi	19dcc <__gcov_flush@@Base+0x510>
   19d54:	mov	r4, r0
   19d58:	mov	r0, #0
   19d5c:	str	r0, [sp, #8]
   19d60:	strh	r0, [sp, #2]
   19d64:	str	r0, [sp, #12]
   19d68:	str	r0, [sp, #16]
   19d6c:	str	r0, [sp, #20]
   19d70:	bl	11ffc <getpid@plt>
   19d74:	mov	r5, sp
   19d78:	str	r0, [sp, #24]
   19d7c:	mov	r0, #1
   19d80:	strh	r0, [sp]
   19d84:	mov	r0, r4
   19d88:	mov	r1, #14
   19d8c:	mov	r2, r5
   19d90:	bl	120bc <fcntl64@plt>
   19d94:	cmn	r0, #1
   19d98:	bne	19db4 <__gcov_flush@@Base+0x4f8>
   19d9c:	bl	12044 <__errno_location@plt>
   19da0:	ldr	r0, [r0]
   19da4:	cmp	r0, #4
   19da8:	beq	19d84 <__gcov_flush@@Base+0x4c8>
   19dac:	cmp	r0, #37	; 0x25
   19db0:	beq	19dd8 <__gcov_flush@@Base+0x51c>
   19db4:	ldr	r1, [pc, #76]	; 19e08 <__gcov_flush@@Base+0x54c>
   19db8:	mov	r0, r4
   19dbc:	add	r1, pc, r1
   19dc0:	bl	11f24 <fdopen@plt>
   19dc4:	sub	sp, fp, #8
   19dc8:	pop	{r4, r5, fp, pc}
   19dcc:	mov	r0, #0
   19dd0:	sub	sp, fp, #8
   19dd4:	pop	{r4, r5, fp, pc}
   19dd8:	ldr	r1, [pc, #28]	; 19dfc <__gcov_flush@@Base+0x540>
   19ddc:	ldr	r2, [pc, #28]	; 19e00 <__gcov_flush@@Base+0x544>
   19de0:	ldr	r0, [pc, #28]	; 19e04 <__gcov_flush@@Base+0x548>
   19de4:	add	r1, pc, r1
   19de8:	add	r2, pc, r2
   19dec:	ldr	r0, [pc, r0]
   19df0:	ldr	r0, [r0]
   19df4:	bl	12038 <fprintf@plt>
   19df8:	b	19db4 <__gcov_flush@@Base+0x4f8>
   19dfc:	strdeq	r1, [r0], -lr
   19e00:	andeq	r1, r0, r3, asr #14
   19e04:	ldrdeq	r2, [r1], -r0
   19e08:	andeq	r1, r0, r4, lsl #11
   19e0c:	push	{r4, r5, r6, sl, fp, lr}
   19e10:	add	fp, sp, #16
   19e14:	mov	r6, r0
   19e18:	ldr	r0, [pc, #120]	; 19e98 <__gcov_flush@@Base+0x5dc>
   19e1c:	mov	r4, r1
   19e20:	add	r0, pc, r0
   19e24:	bl	11fc0 <getenv@plt>
   19e28:	mov	r5, r0
   19e2c:	ldr	r0, [pc, #104]	; 19e9c <__gcov_flush@@Base+0x5e0>
   19e30:	add	r0, pc, r0
   19e34:	bl	11fc0 <getenv@plt>
   19e38:	mov	r1, #0
   19e3c:	str	r1, [r4]
   19e40:	str	r1, [r6]
   19e44:	cmp	r5, #0
   19e48:	ldrbne	r2, [r5]
   19e4c:	cmpne	r2, #0
   19e50:	bne	19e5c <__gcov_flush@@Base+0x5a0>
   19e54:	mov	r0, r1
   19e58:	pop	{r4, r5, r6, sl, fp, pc}
   19e5c:	cmp	r0, #0
   19e60:	beq	19e78 <__gcov_flush@@Base+0x5bc>
   19e64:	mov	r1, #0
   19e68:	mov	r2, #10
   19e6c:	bl	11f30 <strtol@plt>
   19e70:	bic	r0, r0, r0, asr #31
   19e74:	b	19e7c <__gcov_flush@@Base+0x5c0>
   19e78:	mov	r0, #0
   19e7c:	str	r0, [r6]
   19e80:	mov	r0, r5
   19e84:	bl	12014 <strlen@plt>
   19e88:	mov	r1, r5
   19e8c:	str	r0, [r4]
   19e90:	mov	r0, r1
   19e94:	pop	{r4, r5, r6, sl, fp, pc}
   19e98:	andeq	r1, r0, r9, lsr r7
   19e9c:	andeq	r1, r0, r5, lsr r7
   19ea0:	push	{r4, r5, r6, r7, fp, lr}
   19ea4:	add	fp, sp, #16
   19ea8:	mov	r6, r0
   19eac:	ldr	r0, [fp, #8]
   19eb0:	mov	r5, r3
   19eb4:	mov	r7, r2
   19eb8:	mov	r4, r1
   19ebc:	cmp	r0, #1
   19ec0:	blt	19ef8 <__gcov_flush@@Base+0x63c>
   19ec4:	add	r1, r4, #1
   19ec8:	mov	r2, #0
   19ecc:	b	19ee4 <__gcov_flush@@Base+0x628>
   19ed0:	add	r2, r2, #1
   19ed4:	mov	r4, r1
   19ed8:	add	r1, r1, #1
   19edc:	cmp	r2, r0
   19ee0:	bge	19ef8 <__gcov_flush@@Base+0x63c>
   19ee4:	ldrb	r3, [r1]
   19ee8:	cmp	r3, #47	; 0x2f
   19eec:	beq	19ed0 <__gcov_flush@@Base+0x614>
   19ef0:	cmp	r3, #0
   19ef4:	bne	19ed8 <__gcov_flush@@Base+0x61c>
   19ef8:	mov	r0, r6
   19efc:	mov	r1, r7
   19f00:	mov	r2, r5
   19f04:	bl	11f60 <memcpy@plt>
   19f08:	add	r0, r5, r7
   19f0c:	ldrb	r0, [r0, #-1]
   19f10:	cmp	r0, #47	; 0x2f
   19f14:	movne	r0, #47	; 0x2f
   19f18:	strbne	r0, [r6, r5]
   19f1c:	mov	r0, r4
   19f20:	addne	r5, r5, #1
   19f24:	add	r5, r6, r5
   19f28:	bl	12014 <strlen@plt>
   19f2c:	add	r2, r0, #1
   19f30:	mov	r0, r5
   19f34:	mov	r1, r4
   19f38:	pop	{r4, r5, r6, r7, fp, lr}
   19f3c:	b	11f60 <memcpy@plt>
   19f40:	mov	r1, #47	; 0x2f
   19f44:	b	12020 <strchr@plt>
   19f48:	mov	r1, #47	; 0x2f
   19f4c:	b	120c8 <strrchr@plt>
   19f50:	push	{fp, lr}
   19f54:	mov	fp, sp
   19f58:	sub	sp, sp, #8
   19f5c:	mov	r0, #0
   19f60:	str	r0, [sp, #4]
   19f64:	add	r1, sp, #4
   19f68:	mov	r0, #2
   19f6c:	bl	12080 <prctl@plt>
   19f70:	ldr	r1, [sp, #4]
   19f74:	cmp	r0, #0
   19f78:	cmpeq	r1, #9
   19f7c:	bne	19f90 <__gcov_flush@@Base+0x6d4>
   19f80:	mov	r0, #1
   19f84:	mov	r1, #0
   19f88:	bl	12080 <prctl@plt>
   19f8c:	ldr	r1, [sp, #4]
   19f90:	sub	r0, r1, #9
   19f94:	clz	r0, r0
   19f98:	lsr	r0, r0, #5
   19f9c:	mov	sp, fp
   19fa0:	pop	{fp, pc}
   19fa4:	mov	r0, #1
   19fa8:	mov	r1, #9
   19fac:	b	12080 <prctl@plt>

00019fb0 <__libc_csu_init@@Base>:
   19fb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fb4:	mov	r7, r0
   19fb8:	ldr	r6, [pc, #72]	; 1a008 <__libc_csu_init@@Base+0x58>
   19fbc:	ldr	r5, [pc, #72]	; 1a00c <__libc_csu_init@@Base+0x5c>
   19fc0:	add	r6, pc, r6
   19fc4:	add	r5, pc, r5
   19fc8:	sub	r6, r6, r5
   19fcc:	mov	r8, r1
   19fd0:	mov	r9, r2
   19fd4:	bl	11f04 <fdopen@plt-0x20>
   19fd8:	asrs	r6, r6, #2
   19fdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fe0:	mov	r4, #0
   19fe4:	add	r4, r4, #1
   19fe8:	ldr	r3, [r5], #4
   19fec:	mov	r2, r9
   19ff0:	mov	r1, r8
   19ff4:	mov	r0, r7
   19ff8:	blx	r3
   19ffc:	cmp	r6, r4
   1a000:	bne	19fe4 <__libc_csu_init@@Base+0x34>
   1a004:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a008:	andeq	r1, r1, ip, lsr pc
   1a00c:	andeq	r1, r1, ip, lsl pc

0001a010 <__libc_csu_fini@@Base>:
   1a010:	bx	lr
   1a014:	ldr	r3, [pc, #12]	; 1a028 <__libc_csu_fini@@Base+0x18>
   1a018:	mov	r1, #0
   1a01c:	add	r3, pc, r3
   1a020:	ldr	r2, [r3]
   1a024:	b	12050 <__cxa_atexit@plt>
   1a028:	andeq	r2, r1, ip, lsr #1

Disassembly of section .fini:

0001a02c <.fini>:
   1a02c:	push	{r3, lr}
   1a030:	pop	{r3, pc}
