
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

00012290 <.init>:
   12290:	push	{r3, lr}
   12294:	bl	12394 <_start@@Base+0x3c>
   12298:	pop	{r3, pc}

Disassembly of section .plt:

0001229c <free@plt-0x14>:
   1229c:	push	{lr}		; (str lr, [sp, #-4]!)
   122a0:	ldr	lr, [pc, #4]	; 122ac <free@plt-0x4>
   122a4:	add	lr, pc, lr
   122a8:	ldr	pc, [lr, #8]!
   122ac:	andeq	ip, r1, r4, asr sp

000122b0 <free@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #28, 20	; 0x1c000
   122b8:	ldr	pc, [ip, #3412]!	; 0xd54

000122bc <memcpy@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #28, 20	; 0x1c000
   122c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000122c8 <memcmp@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #28, 20	; 0x1c000
   122d0:	ldr	pc, [ip, #3396]!	; 0xd44

000122d4 <realloc@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #28, 20	; 0x1c000
   122dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000122e0 <malloc@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #28, 20	; 0x1c000
   122e8:	ldr	pc, [ip, #3380]!	; 0xd34

000122ec <__libc_start_main@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #28, 20	; 0x1c000
   122f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000122f8 <__gmon_start__@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #28, 20	; 0x1c000
   12300:	ldr	pc, [ip, #3364]!	; 0xd24

00012304 <strlen@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #28, 20	; 0x1c000
   1230c:	ldr	pc, [ip, #3356]!	; 0xd1c

00012310 <posix_memalign@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #28, 20	; 0x1c000
   12318:	ldr	pc, [ip, #3348]!	; 0xd14

0001231c <memset@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #28, 20	; 0x1c000
   12324:	ldr	pc, [ip, #3340]!	; 0xd0c

00012328 <strncpy@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #28, 20	; 0x1c000
   12330:	ldr	pc, [ip, #3332]!	; 0xd04

00012334 <memchr@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #28, 20	; 0x1c000
   1233c:	ldr	pc, [ip, #3324]!	; 0xcfc

00012340 <abort@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #28, 20	; 0x1c000
   12348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001234c <__assert_fail@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #28, 20	; 0x1c000
   12354:	ldr	pc, [ip, #3308]!	; 0xcec

Disassembly of section .text:

00012358 <_start@@Base>:
   12358:	mov	fp, #0
   1235c:	mov	lr, #0
   12360:	pop	{r1}		; (ldr r1, [sp], #4)
   12364:	mov	r2, sp
   12368:	push	{r2}		; (str r2, [sp, #-4]!)
   1236c:	push	{r0}		; (str r0, [sp, #-4]!)
   12370:	ldr	ip, [pc, #16]	; 12388 <_start@@Base+0x30>
   12374:	push	{ip}		; (str ip, [sp, #-4]!)
   12378:	ldr	r0, [pc, #12]	; 1238c <_start@@Base+0x34>
   1237c:	ldr	r3, [pc, #12]	; 12390 <_start@@Base+0x38>
   12380:	bl	122ec <__libc_start_main@plt>
   12384:	bl	12340 <abort@plt>
   12388:	andeq	ip, r1, ip, lsr pc
   1238c:			; <UNDEFINED> instruction: 0x00013bb4
   12390:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12394:	ldr	r3, [pc, #20]	; 123b0 <_start@@Base+0x58>
   12398:	ldr	r2, [pc, #20]	; 123b4 <_start@@Base+0x5c>
   1239c:	add	r3, pc, r3
   123a0:	ldr	r2, [r3, r2]
   123a4:	cmp	r2, #0
   123a8:	bxeq	lr
   123ac:	b	122f8 <__gmon_start__@plt>
   123b0:	andeq	ip, r1, ip, asr ip
   123b4:	andeq	r0, r0, r8, asr #32
   123b8:	ldr	r3, [pc, #28]	; 123dc <_start@@Base+0x84>
   123bc:	ldr	r0, [pc, #28]	; 123e0 <_start@@Base+0x88>
   123c0:	sub	r3, r3, r0
   123c4:	cmp	r3, #6
   123c8:	bxls	lr
   123cc:	ldr	r3, [pc, #16]	; 123e4 <_start@@Base+0x8c>
   123d0:	cmp	r3, #0
   123d4:	bxeq	lr
   123d8:	bx	r3
   123dc:	andeq	pc, r2, r7, rrx
   123e0:	andeq	pc, r2, r4, rrx
   123e4:	andeq	r0, r0, r0
   123e8:	ldr	r1, [pc, #36]	; 12414 <_start@@Base+0xbc>
   123ec:	ldr	r0, [pc, #36]	; 12418 <_start@@Base+0xc0>
   123f0:	sub	r1, r1, r0
   123f4:	asr	r1, r1, #2
   123f8:	add	r1, r1, r1, lsr #31
   123fc:	asrs	r1, r1, #1
   12400:	bxeq	lr
   12404:	ldr	r3, [pc, #16]	; 1241c <_start@@Base+0xc4>
   12408:	cmp	r3, #0
   1240c:	bxeq	lr
   12410:	bx	r3
   12414:	andeq	pc, r2, r4, rrx
   12418:	andeq	pc, r2, r4, rrx
   1241c:	andeq	r0, r0, r0
   12420:	push	{r4, lr}
   12424:	ldr	r4, [pc, #24]	; 12444 <_start@@Base+0xec>
   12428:	ldrb	r3, [r4]
   1242c:	cmp	r3, #0
   12430:	popne	{r4, pc}
   12434:	bl	123b8 <_start@@Base+0x60>
   12438:	mov	r3, #1
   1243c:	strb	r3, [r4]
   12440:	pop	{r4, pc}
   12444:	andeq	pc, r2, r4, rrx
   12448:	ldr	r0, [pc, #40]	; 12478 <_start@@Base+0x120>
   1244c:	ldr	r3, [r0]
   12450:	cmp	r3, #0
   12454:	bne	1245c <_start@@Base+0x104>
   12458:	b	123e8 <_start@@Base+0x90>
   1245c:	ldr	r3, [pc, #24]	; 1247c <_start@@Base+0x124>
   12460:	cmp	r3, #0
   12464:	beq	12458 <_start@@Base+0x100>
   12468:	push	{r4, lr}
   1246c:	blx	r3
   12470:	pop	{r4, lr}
   12474:	b	123e8 <_start@@Base+0x90>
   12478:	andeq	lr, r2, r4, lsl pc
   1247c:	andeq	r0, r0, r0
   12480:	push	{fp, lr}
   12484:	add	fp, sp, #4
   12488:	sub	sp, sp, #8
   1248c:	str	r0, [fp, #-8]
   12490:	str	r1, [fp, #-12]
   12494:	mov	r3, #0
   12498:	mov	r2, #0
   1249c:	ldr	r1, [fp, #-12]
   124a0:	ldr	r0, [fp, #-8]
   124a4:	bl	15e8c <flatcc_builder_start_buffer@@Base>
   124a8:	mov	r3, r0
   124ac:	mov	r0, r3
   124b0:	sub	sp, fp, #4
   124b4:	pop	{fp, pc}
   124b8:	push	{fp, lr}
   124bc:	add	fp, sp, #4
   124c0:	sub	sp, sp, #8
   124c4:	str	r0, [fp, #-8]
   124c8:	str	r1, [fp, #-12]
   124cc:	ldr	r1, [fp, #-12]
   124d0:	ldr	r0, [fp, #-8]
   124d4:	bl	15fe4 <flatcc_builder_end_buffer@@Base>
   124d8:	mov	r3, r0
   124dc:	mov	r0, r3
   124e0:	sub	sp, fp, #4
   124e4:	pop	{fp, pc}
   124e8:	push	{fp, lr}
   124ec:	add	fp, sp, #4
   124f0:	sub	sp, sp, #8
   124f4:	str	r0, [fp, #-8]
   124f8:	mov	r1, #36	; 0x24
   124fc:	ldr	r0, [fp, #-8]
   12500:	bl	16ed0 <flatcc_builder_start_table@@Base>
   12504:	mov	r3, r0
   12508:	mov	r0, r3
   1250c:	sub	sp, fp, #4
   12510:	pop	{fp, pc}
   12514:	push	{fp, lr}
   12518:	add	fp, sp, #4
   1251c:	sub	sp, sp, #8
   12520:	str	r0, [fp, #-8]
   12524:	mov	r2, #1
   12528:	ldr	r3, [pc, #80]	; 12580 <_start@@Base+0x228>
   1252c:	add	r3, pc, r3
   12530:	mov	r1, r3
   12534:	ldr	r0, [fp, #-8]
   12538:	bl	17948 <flatcc_builder_check_required@@Base>
   1253c:	mov	r3, r0
   12540:	cmp	r3, #0
   12544:	bne	12568 <_start@@Base+0x210>
   12548:	ldr	r3, [pc, #52]	; 12584 <_start@@Base+0x22c>
   1254c:	add	r3, pc, r3
   12550:	ldr	r2, [pc, #48]	; 12588 <_start@@Base+0x230>
   12554:	ldr	r1, [pc, #48]	; 1258c <_start@@Base+0x234>
   12558:	add	r1, pc, r1
   1255c:	ldr	r0, [pc, #44]	; 12590 <_start@@Base+0x238>
   12560:	add	r0, pc, r0
   12564:	bl	1234c <__assert_fail@plt>
   12568:	ldr	r0, [fp, #-8]
   1256c:	bl	17a34 <flatcc_builder_end_table@@Base>
   12570:	mov	r3, r0
   12574:	mov	r0, r3
   12578:	sub	sp, fp, #4
   1257c:	pop	{fp, pc}
   12580:	andeq	sl, r0, r0, asr sl
   12584:	andeq	sl, r0, r4, lsl #23
   12588:	andeq	r0, r0, lr, asr r9
   1258c:	andeq	sl, r0, r8, lsr #20
   12590:	andeq	sl, r0, r0, lsr #21
   12594:	push	{fp, lr}
   12598:	add	fp, sp, #4
   1259c:	sub	sp, sp, #16
   125a0:	str	r0, [fp, #-16]
   125a4:	str	r1, [fp, #-20]	; 0xffffffec
   125a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125ac:	cmp	r3, #0
   125b0:	beq	125e4 <_start@@Base+0x28c>
   125b4:	mov	r1, #3
   125b8:	ldr	r0, [fp, #-16]
   125bc:	bl	19620 <flatcc_builder_table_add_offset@@Base>
   125c0:	str	r0, [fp, #-8]
   125c4:	ldr	r3, [fp, #-8]
   125c8:	cmp	r3, #0
   125cc:	beq	125e4 <_start@@Base+0x28c>
   125d0:	ldr	r3, [fp, #-8]
   125d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   125d8:	str	r2, [r3]
   125dc:	mov	r3, #0
   125e0:	b	125e8 <_start@@Base+0x290>
   125e4:	mvn	r3, #0
   125e8:	mov	r0, r3
   125ec:	sub	sp, fp, #4
   125f0:	pop	{fp, pc}
   125f4:	push	{fp, lr}
   125f8:	add	fp, sp, #4
   125fc:	sub	sp, sp, #8
   12600:	str	r0, [fp, #-8]
   12604:	str	r1, [fp, #-12]
   12608:	ldr	r1, [fp, #-12]
   1260c:	ldr	r0, [fp, #-8]
   12610:	bl	191fc <flatcc_builder_create_string_str@@Base>
   12614:	mov	r3, r0
   12618:	mov	r1, r3
   1261c:	ldr	r0, [fp, #-8]
   12620:	bl	12594 <_start@@Base+0x23c>
   12624:	mov	r3, r0
   12628:	mov	r0, r3
   1262c:	sub	sp, fp, #4
   12630:	pop	{fp, pc}
   12634:	push	{fp, lr}
   12638:	add	fp, sp, #4
   1263c:	sub	sp, sp, #8
   12640:	str	r0, [fp, #-8]
   12644:	ldr	r3, [pc, #56]	; 12684 <_start@@Base+0x32c>
   12648:	add	r3, pc, r3
   1264c:	mov	r1, r3
   12650:	ldr	r0, [fp, #-8]
   12654:	bl	12480 <_start@@Base+0x128>
   12658:	mov	r3, r0
   1265c:	cmp	r3, #0
   12660:	bne	12674 <_start@@Base+0x31c>
   12664:	ldr	r0, [fp, #-8]
   12668:	bl	124e8 <_start@@Base+0x190>
   1266c:	mov	r3, r0
   12670:	b	12678 <_start@@Base+0x320>
   12674:	mvn	r3, #0
   12678:	mov	r0, r3
   1267c:	sub	sp, fp, #4
   12680:	pop	{fp, pc}
   12684:	andeq	sl, r0, r4, ror sl
   12688:	push	{fp, lr}
   1268c:	add	fp, sp, #4
   12690:	sub	sp, sp, #8
   12694:	str	r0, [fp, #-8]
   12698:	ldr	r0, [fp, #-8]
   1269c:	bl	12514 <_start@@Base+0x1bc>
   126a0:	mov	r3, r0
   126a4:	mov	r1, r3
   126a8:	ldr	r0, [fp, #-8]
   126ac:	bl	124b8 <_start@@Base+0x160>
   126b0:	mov	r3, r0
   126b4:	mov	r0, r3
   126b8:	sub	sp, fp, #4
   126bc:	pop	{fp, pc}
   126c0:	push	{fp, lr}
   126c4:	add	fp, sp, #4
   126c8:	sub	sp, sp, #8
   126cc:	str	r0, [fp, #-8]
   126d0:	ldr	r3, [fp, #-8]
   126d4:	ldrb	r3, [r3, #12]
   126d8:	cmp	r3, #1
   126dc:	bne	126fc <_start@@Base+0x3a4>
   126e0:	ldr	r3, [pc, #36]	; 1270c <_start@@Base+0x3b4>
   126e4:	add	r3, pc, r3
   126e8:	mov	r1, r3
   126ec:	ldr	r0, [fp, #-8]
   126f0:	bl	1c294 <flatcc_verify_union_table@@Base>
   126f4:	mov	r3, r0
   126f8:	b	12700 <_start@@Base+0x3a8>
   126fc:	mov	r3, #0
   12700:	mov	r0, r3
   12704:	sub	sp, fp, #4
   12708:	pop	{fp, pc}
   1270c:	ldrdeq	r0, [r0], -ip
   12710:	push	{fp, lr}
   12714:	add	fp, sp, #4
   12718:	sub	sp, sp, #8
   1271c:	str	r0, [fp, #-8]
   12720:	ldr	r3, [fp, #-8]
   12724:	ldrb	r3, [r3, #12]
   12728:	sub	r3, r3, #1
   1272c:	cmp	r3, #3
   12730:	addls	pc, pc, r3, lsl #2
   12734:	b	127b8 <_start@@Base+0x460>
   12738:	b	12748 <_start@@Base+0x3f0>
   1273c:	b	12764 <_start@@Base+0x40c>
   12740:	b	12780 <_start@@Base+0x428>
   12744:	b	1279c <_start@@Base+0x444>
   12748:	ldr	r3, [pc, #120]	; 127c8 <_start@@Base+0x470>
   1274c:	add	r3, pc, r3
   12750:	mov	r1, r3
   12754:	ldr	r0, [fp, #-8]
   12758:	bl	1c294 <flatcc_verify_union_table@@Base>
   1275c:	mov	r3, r0
   12760:	b	127bc <_start@@Base+0x464>
   12764:	ldr	r3, [pc, #96]	; 127cc <_start@@Base+0x474>
   12768:	add	r3, pc, r3
   1276c:	mov	r1, r3
   12770:	ldr	r0, [fp, #-8]
   12774:	bl	1c294 <flatcc_verify_union_table@@Base>
   12778:	mov	r3, r0
   1277c:	b	127bc <_start@@Base+0x464>
   12780:	ldr	r3, [pc, #72]	; 127d0 <_start@@Base+0x478>
   12784:	add	r3, pc, r3
   12788:	mov	r1, r3
   1278c:	ldr	r0, [fp, #-8]
   12790:	bl	1c294 <flatcc_verify_union_table@@Base>
   12794:	mov	r3, r0
   12798:	b	127bc <_start@@Base+0x464>
   1279c:	ldr	r3, [pc, #48]	; 127d4 <_start@@Base+0x47c>
   127a0:	add	r3, pc, r3
   127a4:	mov	r1, r3
   127a8:	ldr	r0, [fp, #-8]
   127ac:	bl	1c294 <flatcc_verify_union_table@@Base>
   127b0:	mov	r3, r0
   127b4:	b	127bc <_start@@Base+0x464>
   127b8:	mov	r3, #0
   127bc:	mov	r0, r3
   127c0:	sub	sp, fp, #4
   127c4:	pop	{fp, pc}
   127c8:	andeq	r0, r0, r8, lsr #19
   127cc:	andeq	r0, r0, r0, lsl r2
   127d0:	andeq	r0, r0, r0, ror #2
   127d4:	andeq	r0, r0, r0, ror r4
   127d8:	push	{fp, lr}
   127dc:	add	fp, sp, #4
   127e0:	sub	sp, sp, #8
   127e4:	str	r0, [fp, #-8]
   127e8:	ldr	r3, [fp, #-8]
   127ec:	ldrb	r3, [r3, #12]
   127f0:	cmp	r3, #9
   127f4:	beq	12864 <_start@@Base+0x50c>
   127f8:	cmp	r3, #9
   127fc:	bgt	12814 <_start@@Base+0x4bc>
   12800:	cmp	r3, #2
   12804:	beq	12830 <_start@@Base+0x4d8>
   12808:	cmp	r3, #8
   1280c:	beq	1284c <_start@@Base+0x4f4>
   12810:	b	128b4 <_start@@Base+0x55c>
   12814:	cmp	r3, #11
   12818:	beq	12894 <_start@@Base+0x53c>
   1281c:	cmp	r3, #11
   12820:	blt	1287c <_start@@Base+0x524>
   12824:	cmp	r3, #255	; 0xff
   12828:	beq	128a4 <_start@@Base+0x54c>
   1282c:	b	128b4 <_start@@Base+0x55c>
   12830:	ldr	r3, [pc, #140]	; 128c4 <_start@@Base+0x56c>
   12834:	add	r3, pc, r3
   12838:	mov	r1, r3
   1283c:	ldr	r0, [fp, #-8]
   12840:	bl	1c294 <flatcc_verify_union_table@@Base>
   12844:	mov	r3, r0
   12848:	b	128b8 <_start@@Base+0x560>
   1284c:	mov	r2, #2
   12850:	mov	r1, #2
   12854:	ldr	r0, [fp, #-8]
   12858:	bl	1c2f8 <flatcc_verify_union_struct@@Base>
   1285c:	mov	r3, r0
   12860:	b	128b8 <_start@@Base+0x560>
   12864:	mov	r2, #4
   12868:	mov	r1, #4
   1286c:	ldr	r0, [fp, #-8]
   12870:	bl	1c2f8 <flatcc_verify_union_struct@@Base>
   12874:	mov	r3, r0
   12878:	b	128b8 <_start@@Base+0x560>
   1287c:	mov	r2, #4
   12880:	mov	r1, #4
   12884:	ldr	r0, [fp, #-8]
   12888:	bl	1c2f8 <flatcc_verify_union_struct@@Base>
   1288c:	mov	r3, r0
   12890:	b	128b8 <_start@@Base+0x560>
   12894:	ldr	r0, [fp, #-8]
   12898:	bl	1c34c <flatcc_verify_union_string@@Base>
   1289c:	mov	r3, r0
   128a0:	b	128b8 <_start@@Base+0x560>
   128a4:	ldr	r0, [fp, #-8]
   128a8:	bl	1c34c <flatcc_verify_union_string@@Base>
   128ac:	mov	r3, r0
   128b0:	b	128b8 <_start@@Base+0x560>
   128b4:	mov	r3, #0
   128b8:	mov	r0, r3
   128bc:	sub	sp, fp, #4
   128c0:	pop	{fp, pc}
   128c4:	andeq	r1, r0, r8, lsl #4
   128c8:	push	{fp}		; (str fp, [sp, #-4]!)
   128cc:	add	fp, sp, #0
   128d0:	sub	sp, sp, #12
   128d4:	str	r0, [fp, #-8]
   128d8:	mov	r3, #0
   128dc:	mov	r0, r3
   128e0:	add	sp, fp, #0
   128e4:	pop	{fp}		; (ldr fp, [sp], #4)
   128e8:	bx	lr
   128ec:	push	{fp}		; (str fp, [sp, #-4]!)
   128f0:	add	fp, sp, #0
   128f4:	sub	sp, sp, #12
   128f8:	str	r0, [fp, #-8]
   128fc:	mov	r3, #0
   12900:	mov	r0, r3
   12904:	add	sp, fp, #0
   12908:	pop	{fp}		; (ldr fp, [sp], #4)
   1290c:	bx	lr
   12910:	push	{fp}		; (str fp, [sp, #-4]!)
   12914:	add	fp, sp, #0
   12918:	sub	sp, sp, #12
   1291c:	str	r0, [fp, #-8]
   12920:	mov	r3, #0
   12924:	mov	r0, r3
   12928:	add	sp, fp, #0
   1292c:	pop	{fp}		; (ldr fp, [sp], #4)
   12930:	bx	lr
   12934:	push	{fp, lr}
   12938:	add	fp, sp, #4
   1293c:	sub	sp, sp, #16
   12940:	str	r0, [fp, #-16]
   12944:	mov	r3, #1
   12948:	mov	r2, #0
   1294c:	mov	r1, #0
   12950:	ldr	r0, [fp, #-16]
   12954:	bl	1be9c <flatcc_verify_field@@Base>
   12958:	str	r0, [fp, #-8]
   1295c:	ldr	r3, [fp, #-8]
   12960:	cmp	r3, #0
   12964:	beq	12970 <_start@@Base+0x618>
   12968:	ldr	r3, [fp, #-8]
   1296c:	b	12974 <_start@@Base+0x61c>
   12970:	mov	r3, #0
   12974:	mov	r0, r3
   12978:	sub	sp, fp, #4
   1297c:	pop	{fp, pc}
   12980:	push	{fp, lr}
   12984:	add	fp, sp, #4
   12988:	sub	sp, sp, #16
   1298c:	str	r0, [fp, #-16]
   12990:	mov	r3, #1
   12994:	mov	r2, #1
   12998:	mov	r1, #0
   1299c:	ldr	r0, [fp, #-16]
   129a0:	bl	1be9c <flatcc_verify_field@@Base>
   129a4:	str	r0, [fp, #-8]
   129a8:	ldr	r3, [fp, #-8]
   129ac:	cmp	r3, #0
   129b0:	beq	129bc <_start@@Base+0x664>
   129b4:	ldr	r3, [fp, #-8]
   129b8:	b	12a44 <_start@@Base+0x6ec>
   129bc:	mov	r3, #1
   129c0:	mov	r2, #1
   129c4:	mov	r1, #1
   129c8:	ldr	r0, [fp, #-16]
   129cc:	bl	1be9c <flatcc_verify_field@@Base>
   129d0:	str	r0, [fp, #-8]
   129d4:	ldr	r3, [fp, #-8]
   129d8:	cmp	r3, #0
   129dc:	beq	129e8 <_start@@Base+0x690>
   129e0:	ldr	r3, [fp, #-8]
   129e4:	b	12a44 <_start@@Base+0x6ec>
   129e8:	mov	r3, #1
   129ec:	mov	r2, #1
   129f0:	mov	r1, #2
   129f4:	ldr	r0, [fp, #-16]
   129f8:	bl	1be9c <flatcc_verify_field@@Base>
   129fc:	str	r0, [fp, #-8]
   12a00:	ldr	r3, [fp, #-8]
   12a04:	cmp	r3, #0
   12a08:	beq	12a14 <_start@@Base+0x6bc>
   12a0c:	ldr	r3, [fp, #-8]
   12a10:	b	12a44 <_start@@Base+0x6ec>
   12a14:	mov	r3, #1
   12a18:	mov	r2, #1
   12a1c:	mov	r1, #3
   12a20:	ldr	r0, [fp, #-16]
   12a24:	bl	1be9c <flatcc_verify_field@@Base>
   12a28:	str	r0, [fp, #-8]
   12a2c:	ldr	r3, [fp, #-8]
   12a30:	cmp	r3, #0
   12a34:	beq	12a40 <_start@@Base+0x6e8>
   12a38:	ldr	r3, [fp, #-8]
   12a3c:	b	12a44 <_start@@Base+0x6ec>
   12a40:	mov	r3, #0
   12a44:	mov	r0, r3
   12a48:	sub	sp, fp, #4
   12a4c:	pop	{fp, pc}
   12a50:	push	{fp, lr}
   12a54:	add	fp, sp, #4
   12a58:	sub	sp, sp, #16
   12a5c:	str	r0, [fp, #-16]
   12a60:	mov	r3, #1
   12a64:	mov	r2, #0
   12a68:	mov	r1, #0
   12a6c:	ldr	r0, [fp, #-16]
   12a70:	bl	1be9c <flatcc_verify_field@@Base>
   12a74:	str	r0, [fp, #-8]
   12a78:	ldr	r3, [fp, #-8]
   12a7c:	cmp	r3, #0
   12a80:	beq	12a8c <_start@@Base+0x734>
   12a84:	ldr	r3, [fp, #-8]
   12a88:	b	12b6c <_start@@Base+0x814>
   12a8c:	mov	r3, #8
   12a90:	mov	r2, #8
   12a94:	mov	r1, #1
   12a98:	ldr	r0, [fp, #-16]
   12a9c:	bl	1be9c <flatcc_verify_field@@Base>
   12aa0:	str	r0, [fp, #-8]
   12aa4:	ldr	r3, [fp, #-8]
   12aa8:	cmp	r3, #0
   12aac:	beq	12ab8 <_start@@Base+0x760>
   12ab0:	ldr	r3, [fp, #-8]
   12ab4:	b	12b6c <_start@@Base+0x814>
   12ab8:	mov	r3, #8
   12abc:	mov	r2, #8
   12ac0:	mov	r1, #2
   12ac4:	ldr	r0, [fp, #-16]
   12ac8:	bl	1be9c <flatcc_verify_field@@Base>
   12acc:	str	r0, [fp, #-8]
   12ad0:	ldr	r3, [fp, #-8]
   12ad4:	cmp	r3, #0
   12ad8:	beq	12ae4 <_start@@Base+0x78c>
   12adc:	ldr	r3, [fp, #-8]
   12ae0:	b	12b6c <_start@@Base+0x814>
   12ae4:	mov	r3, #4
   12ae8:	mov	r2, #4
   12aec:	mov	r1, #3
   12af0:	ldr	r0, [fp, #-16]
   12af4:	bl	1be9c <flatcc_verify_field@@Base>
   12af8:	str	r0, [fp, #-8]
   12afc:	ldr	r3, [fp, #-8]
   12b00:	cmp	r3, #0
   12b04:	beq	12b10 <_start@@Base+0x7b8>
   12b08:	ldr	r3, [fp, #-8]
   12b0c:	b	12b6c <_start@@Base+0x814>
   12b10:	mov	r3, #8
   12b14:	mov	r2, #8
   12b18:	mov	r1, #4
   12b1c:	ldr	r0, [fp, #-16]
   12b20:	bl	1be9c <flatcc_verify_field@@Base>
   12b24:	str	r0, [fp, #-8]
   12b28:	ldr	r3, [fp, #-8]
   12b2c:	cmp	r3, #0
   12b30:	beq	12b3c <_start@@Base+0x7e4>
   12b34:	ldr	r3, [fp, #-8]
   12b38:	b	12b6c <_start@@Base+0x814>
   12b3c:	mov	r3, #8
   12b40:	mov	r2, #8
   12b44:	mov	r1, #5
   12b48:	ldr	r0, [fp, #-16]
   12b4c:	bl	1be9c <flatcc_verify_field@@Base>
   12b50:	str	r0, [fp, #-8]
   12b54:	ldr	r3, [fp, #-8]
   12b58:	cmp	r3, #0
   12b5c:	beq	12b68 <_start@@Base+0x810>
   12b60:	ldr	r3, [fp, #-8]
   12b64:	b	12b6c <_start@@Base+0x814>
   12b68:	mov	r3, #0
   12b6c:	mov	r0, r3
   12b70:	sub	sp, fp, #4
   12b74:	pop	{fp, pc}
   12b78:	push	{fp, lr}
   12b7c:	add	fp, sp, #4
   12b80:	sub	sp, sp, #16
   12b84:	str	r0, [fp, #-16]
   12b88:	mov	r2, #0
   12b8c:	mov	r1, #0
   12b90:	ldr	r0, [fp, #-16]
   12b94:	bl	1bf14 <flatcc_verify_string_field@@Base>
   12b98:	str	r0, [fp, #-8]
   12b9c:	ldr	r3, [fp, #-8]
   12ba0:	cmp	r3, #0
   12ba4:	beq	12bb0 <_start@@Base+0x858>
   12ba8:	ldr	r3, [fp, #-8]
   12bac:	b	12c0c <_start@@Base+0x8b4>
   12bb0:	mov	r3, #8
   12bb4:	mov	r2, #8
   12bb8:	mov	r1, #1
   12bbc:	ldr	r0, [fp, #-16]
   12bc0:	bl	1be9c <flatcc_verify_field@@Base>
   12bc4:	str	r0, [fp, #-8]
   12bc8:	ldr	r3, [fp, #-8]
   12bcc:	cmp	r3, #0
   12bd0:	beq	12bdc <_start@@Base+0x884>
   12bd4:	ldr	r3, [fp, #-8]
   12bd8:	b	12c0c <_start@@Base+0x8b4>
   12bdc:	mov	r3, #2
   12be0:	mov	r2, #2
   12be4:	mov	r1, #2
   12be8:	ldr	r0, [fp, #-16]
   12bec:	bl	1be9c <flatcc_verify_field@@Base>
   12bf0:	str	r0, [fp, #-8]
   12bf4:	ldr	r3, [fp, #-8]
   12bf8:	cmp	r3, #0
   12bfc:	beq	12c08 <_start@@Base+0x8b0>
   12c00:	ldr	r3, [fp, #-8]
   12c04:	b	12c0c <_start@@Base+0x8b4>
   12c08:	mov	r3, #0
   12c0c:	mov	r0, r3
   12c10:	sub	sp, fp, #4
   12c14:	pop	{fp, pc}
   12c18:	push	{fp, lr}
   12c1c:	add	fp, sp, #4
   12c20:	sub	sp, sp, #16
   12c24:	str	r0, [fp, #-16]
   12c28:	ldr	r3, [pc, #152]	; 12cc8 <_start@@Base+0x970>
   12c2c:	add	r3, pc, r3
   12c30:	mov	r2, #0
   12c34:	mov	r1, #0
   12c38:	ldr	r0, [fp, #-16]
   12c3c:	bl	1c11c <flatcc_verify_table_field@@Base>
   12c40:	str	r0, [fp, #-8]
   12c44:	ldr	r3, [fp, #-8]
   12c48:	cmp	r3, #0
   12c4c:	beq	12c58 <_start@@Base+0x900>
   12c50:	ldr	r3, [fp, #-8]
   12c54:	b	12cbc <_start@@Base+0x964>
   12c58:	ldr	r3, [pc, #108]	; 12ccc <_start@@Base+0x974>
   12c5c:	add	r3, pc, r3
   12c60:	mov	r2, #0
   12c64:	mov	r1, #1
   12c68:	ldr	r0, [fp, #-16]
   12c6c:	bl	1c11c <flatcc_verify_table_field@@Base>
   12c70:	str	r0, [fp, #-8]
   12c74:	ldr	r3, [fp, #-8]
   12c78:	cmp	r3, #0
   12c7c:	beq	12c88 <_start@@Base+0x930>
   12c80:	ldr	r3, [fp, #-8]
   12c84:	b	12cbc <_start@@Base+0x964>
   12c88:	ldr	r3, [pc, #64]	; 12cd0 <_start@@Base+0x978>
   12c8c:	add	r3, pc, r3
   12c90:	mov	r2, #0
   12c94:	mov	r1, #3
   12c98:	ldr	r0, [fp, #-16]
   12c9c:	bl	1ccb8 <flatcc_verify_union_vector_field@@Base>
   12ca0:	str	r0, [fp, #-8]
   12ca4:	ldr	r3, [fp, #-8]
   12ca8:	cmp	r3, #0
   12cac:	beq	12cb8 <_start@@Base+0x960>
   12cb0:	ldr	r3, [fp, #-8]
   12cb4:	b	12cbc <_start@@Base+0x964>
   12cb8:	mov	r3, #0
   12cbc:	mov	r0, r3
   12cc0:	sub	sp, fp, #4
   12cc4:	pop	{fp, pc}
   12cc8:	andeq	r0, r0, r0, lsr #1
   12ccc:	andeq	r0, r0, ip, lsr #28
   12cd0:			; <UNDEFINED> instruction: 0xfffffa7c
   12cd4:	push	{fp, lr}
   12cd8:	add	fp, sp, #4
   12cdc:	sub	sp, sp, #16
   12ce0:	str	r0, [fp, #-16]
   12ce4:	ldr	r3, [pc, #152]	; 12d84 <_start@@Base+0xa2c>
   12ce8:	add	r3, pc, r3
   12cec:	mov	r2, #0
   12cf0:	mov	r1, #0
   12cf4:	ldr	r0, [fp, #-16]
   12cf8:	bl	1c11c <flatcc_verify_table_field@@Base>
   12cfc:	str	r0, [fp, #-8]
   12d00:	ldr	r3, [fp, #-8]
   12d04:	cmp	r3, #0
   12d08:	beq	12d14 <_start@@Base+0x9bc>
   12d0c:	ldr	r3, [fp, #-8]
   12d10:	b	12d78 <_start@@Base+0xa20>
   12d14:	ldr	r3, [pc, #108]	; 12d88 <_start@@Base+0xa30>
   12d18:	add	r3, pc, r3
   12d1c:	mov	r2, #0
   12d20:	mov	r1, #1
   12d24:	ldr	r0, [fp, #-16]
   12d28:	bl	1c11c <flatcc_verify_table_field@@Base>
   12d2c:	str	r0, [fp, #-8]
   12d30:	ldr	r3, [fp, #-8]
   12d34:	cmp	r3, #0
   12d38:	beq	12d44 <_start@@Base+0x9ec>
   12d3c:	ldr	r3, [fp, #-8]
   12d40:	b	12d78 <_start@@Base+0xa20>
   12d44:	ldr	r3, [pc, #64]	; 12d8c <_start@@Base+0xa34>
   12d48:	add	r3, pc, r3
   12d4c:	mov	r2, #0
   12d50:	mov	r1, #2
   12d54:	ldr	r0, [fp, #-16]
   12d58:	bl	1c11c <flatcc_verify_table_field@@Base>
   12d5c:	str	r0, [fp, #-8]
   12d60:	ldr	r3, [fp, #-8]
   12d64:	cmp	r3, #0
   12d68:	beq	12d74 <_start@@Base+0xa1c>
   12d6c:	ldr	r3, [fp, #-8]
   12d70:	b	12d78 <_start@@Base+0xa20>
   12d74:	mov	r3, #0
   12d78:	mov	r0, r3
   12d7c:	sub	sp, fp, #4
   12d80:	pop	{fp, pc}
   12d84:	andeq	r0, r0, r0, lsr #1
   12d88:	andeq	r0, r0, r0, lsl r2
   12d8c:	andeq	r0, r0, r8, asr r2
   12d90:	push	{fp, lr}
   12d94:	add	fp, sp, #4
   12d98:	sub	sp, sp, #16
   12d9c:	str	r0, [fp, #-16]
   12da0:	mov	r2, #0
   12da4:	mov	r1, #0
   12da8:	ldr	r0, [fp, #-16]
   12dac:	bl	1bf14 <flatcc_verify_string_field@@Base>
   12db0:	str	r0, [fp, #-8]
   12db4:	ldr	r3, [fp, #-8]
   12db8:	cmp	r3, #0
   12dbc:	beq	12dc8 <_start@@Base+0xa70>
   12dc0:	ldr	r3, [fp, #-8]
   12dc4:	b	12f24 <_start@@Base+0xbcc>
   12dc8:	mov	r3, #4
   12dcc:	mov	r2, #4
   12dd0:	mov	r1, #1
   12dd4:	ldr	r0, [fp, #-16]
   12dd8:	bl	1be9c <flatcc_verify_field@@Base>
   12ddc:	str	r0, [fp, #-8]
   12de0:	ldr	r3, [fp, #-8]
   12de4:	cmp	r3, #0
   12de8:	beq	12df4 <_start@@Base+0xa9c>
   12dec:	ldr	r3, [fp, #-8]
   12df0:	b	12f24 <_start@@Base+0xbcc>
   12df4:	mov	r2, #0
   12df8:	mov	r1, #2
   12dfc:	ldr	r0, [fp, #-16]
   12e00:	bl	1bf14 <flatcc_verify_string_field@@Base>
   12e04:	str	r0, [fp, #-8]
   12e08:	ldr	r3, [fp, #-8]
   12e0c:	cmp	r3, #0
   12e10:	beq	12e1c <_start@@Base+0xac4>
   12e14:	ldr	r3, [fp, #-8]
   12e18:	b	12f24 <_start@@Base+0xbcc>
   12e1c:	mov	r3, #8
   12e20:	mov	r2, #8
   12e24:	mov	r1, #3
   12e28:	ldr	r0, [fp, #-16]
   12e2c:	bl	1be9c <flatcc_verify_field@@Base>
   12e30:	str	r0, [fp, #-8]
   12e34:	ldr	r3, [fp, #-8]
   12e38:	cmp	r3, #0
   12e3c:	beq	12e48 <_start@@Base+0xaf0>
   12e40:	ldr	r3, [fp, #-8]
   12e44:	b	12f24 <_start@@Base+0xbcc>
   12e48:	mov	r2, #0
   12e4c:	mov	r1, #4
   12e50:	ldr	r0, [fp, #-16]
   12e54:	bl	1bf14 <flatcc_verify_string_field@@Base>
   12e58:	str	r0, [fp, #-8]
   12e5c:	ldr	r3, [fp, #-8]
   12e60:	cmp	r3, #0
   12e64:	beq	12e70 <_start@@Base+0xb18>
   12e68:	ldr	r3, [fp, #-8]
   12e6c:	b	12f24 <_start@@Base+0xbcc>
   12e70:	mov	r3, #8
   12e74:	mov	r2, #8
   12e78:	mov	r1, #5
   12e7c:	ldr	r0, [fp, #-16]
   12e80:	bl	1be9c <flatcc_verify_field@@Base>
   12e84:	str	r0, [fp, #-8]
   12e88:	ldr	r3, [fp, #-8]
   12e8c:	cmp	r3, #0
   12e90:	beq	12e9c <_start@@Base+0xb44>
   12e94:	ldr	r3, [fp, #-8]
   12e98:	b	12f24 <_start@@Base+0xbcc>
   12e9c:	mov	r3, #4
   12ea0:	mov	r2, #4
   12ea4:	mov	r1, #6
   12ea8:	ldr	r0, [fp, #-16]
   12eac:	bl	1be9c <flatcc_verify_field@@Base>
   12eb0:	str	r0, [fp, #-8]
   12eb4:	ldr	r3, [fp, #-8]
   12eb8:	cmp	r3, #0
   12ebc:	beq	12ec8 <_start@@Base+0xb70>
   12ec0:	ldr	r3, [fp, #-8]
   12ec4:	b	12f24 <_start@@Base+0xbcc>
   12ec8:	mov	r3, #8
   12ecc:	mov	r2, #8
   12ed0:	mov	r1, #7
   12ed4:	ldr	r0, [fp, #-16]
   12ed8:	bl	1be9c <flatcc_verify_field@@Base>
   12edc:	str	r0, [fp, #-8]
   12ee0:	ldr	r3, [fp, #-8]
   12ee4:	cmp	r3, #0
   12ee8:	beq	12ef4 <_start@@Base+0xb9c>
   12eec:	ldr	r3, [fp, #-8]
   12ef0:	b	12f24 <_start@@Base+0xbcc>
   12ef4:	mov	r3, #4
   12ef8:	mov	r2, #4
   12efc:	mov	r1, #8
   12f00:	ldr	r0, [fp, #-16]
   12f04:	bl	1be9c <flatcc_verify_field@@Base>
   12f08:	str	r0, [fp, #-8]
   12f0c:	ldr	r3, [fp, #-8]
   12f10:	cmp	r3, #0
   12f14:	beq	12f20 <_start@@Base+0xbc8>
   12f18:	ldr	r3, [fp, #-8]
   12f1c:	b	12f24 <_start@@Base+0xbcc>
   12f20:	mov	r3, #0
   12f24:	mov	r0, r3
   12f28:	sub	sp, fp, #4
   12f2c:	pop	{fp, pc}
   12f30:	push	{fp, lr}
   12f34:	add	fp, sp, #4
   12f38:	sub	sp, sp, #16
   12f3c:	str	r0, [fp, #-16]
   12f40:	mov	r3, #8
   12f44:	mov	r2, #8
   12f48:	mov	r1, #0
   12f4c:	ldr	r0, [fp, #-16]
   12f50:	bl	1be9c <flatcc_verify_field@@Base>
   12f54:	str	r0, [fp, #-8]
   12f58:	ldr	r3, [fp, #-8]
   12f5c:	cmp	r3, #0
   12f60:	beq	12f6c <_start@@Base+0xc14>
   12f64:	ldr	r3, [fp, #-8]
   12f68:	b	12f9c <_start@@Base+0xc44>
   12f6c:	mov	r3, #4
   12f70:	mov	r2, #4
   12f74:	mov	r1, #1
   12f78:	ldr	r0, [fp, #-16]
   12f7c:	bl	1be9c <flatcc_verify_field@@Base>
   12f80:	str	r0, [fp, #-8]
   12f84:	ldr	r3, [fp, #-8]
   12f88:	cmp	r3, #0
   12f8c:	beq	12f98 <_start@@Base+0xc40>
   12f90:	ldr	r3, [fp, #-8]
   12f94:	b	12f9c <_start@@Base+0xc44>
   12f98:	mov	r3, #0
   12f9c:	mov	r0, r3
   12fa0:	sub	sp, fp, #4
   12fa4:	pop	{fp, pc}
   12fa8:	push	{fp, lr}
   12fac:	add	fp, sp, #4
   12fb0:	sub	sp, sp, #16
   12fb4:	str	r0, [fp, #-16]
   12fb8:	mov	r3, #8
   12fbc:	mov	r2, #8
   12fc0:	mov	r1, #0
   12fc4:	ldr	r0, [fp, #-16]
   12fc8:	bl	1be9c <flatcc_verify_field@@Base>
   12fcc:	str	r0, [fp, #-8]
   12fd0:	ldr	r3, [fp, #-8]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12fe4 <_start@@Base+0xc8c>
   12fdc:	ldr	r3, [fp, #-8]
   12fe0:	b	13014 <_start@@Base+0xcbc>
   12fe4:	mov	r3, #4
   12fe8:	mov	r2, #4
   12fec:	mov	r1, #1
   12ff0:	ldr	r0, [fp, #-16]
   12ff4:	bl	1be9c <flatcc_verify_field@@Base>
   12ff8:	str	r0, [fp, #-8]
   12ffc:	ldr	r3, [fp, #-8]
   13000:	cmp	r3, #0
   13004:	beq	13010 <_start@@Base+0xcb8>
   13008:	ldr	r3, [fp, #-8]
   1300c:	b	13014 <_start@@Base+0xcbc>
   13010:	mov	r3, #0
   13014:	mov	r0, r3
   13018:	sub	sp, fp, #4
   1301c:	pop	{fp, pc}
   13020:	push	{fp, lr}
   13024:	add	fp, sp, #4
   13028:	sub	sp, sp, #24
   1302c:	str	r0, [fp, #-16]
   13030:	mvn	r3, #0
   13034:	str	r3, [sp, #4]
   13038:	mov	r3, #1
   1303c:	str	r3, [sp]
   13040:	mov	r3, #1
   13044:	mov	r2, #0
   13048:	mov	r1, #0
   1304c:	ldr	r0, [fp, #-16]
   13050:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   13054:	str	r0, [fp, #-8]
   13058:	ldr	r3, [fp, #-8]
   1305c:	cmp	r3, #0
   13060:	beq	1306c <_start@@Base+0xd14>
   13064:	ldr	r3, [fp, #-8]
   13068:	b	130ec <_start@@Base+0xd94>
   1306c:	mvn	r3, #0
   13070:	str	r3, [sp, #4]
   13074:	mov	r3, #1
   13078:	str	r3, [sp]
   1307c:	mov	r3, #1
   13080:	mov	r2, #0
   13084:	mov	r1, #1
   13088:	ldr	r0, [fp, #-16]
   1308c:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   13090:	str	r0, [fp, #-8]
   13094:	ldr	r3, [fp, #-8]
   13098:	cmp	r3, #0
   1309c:	beq	130a8 <_start@@Base+0xd50>
   130a0:	ldr	r3, [fp, #-8]
   130a4:	b	130ec <_start@@Base+0xd94>
   130a8:	ldr	r3, [pc, #72]	; 130f8 <_start@@Base+0xda0>
   130ac:	add	r3, pc, r3
   130b0:	str	r3, [sp, #4]
   130b4:	mov	r3, #1
   130b8:	str	r3, [sp]
   130bc:	mov	r3, #0
   130c0:	mov	r2, #0
   130c4:	mov	r1, #2
   130c8:	ldr	r0, [fp, #-16]
   130cc:	bl	1c900 <flatcc_verify_table_as_nested_root@@Base>
   130d0:	str	r0, [fp, #-8]
   130d4:	ldr	r3, [fp, #-8]
   130d8:	cmp	r3, #0
   130dc:	beq	130e8 <_start@@Base+0xd90>
   130e0:	ldr	r3, [fp, #-8]
   130e4:	b	130ec <_start@@Base+0xd94>
   130e8:	mov	r3, #0
   130ec:	mov	r0, r3
   130f0:	sub	sp, fp, #4
   130f4:	pop	{fp, pc}
   130f8:	andeq	r0, r0, r8, asr #32
   130fc:	push	{fp, lr}
   13100:	add	fp, sp, #4
   13104:	sub	sp, sp, #24
   13108:	str	r0, [fp, #-16]
   1310c:	mov	r3, #16
   13110:	mov	r2, #32
   13114:	mov	r1, #0
   13118:	ldr	r0, [fp, #-16]
   1311c:	bl	1be9c <flatcc_verify_field@@Base>
   13120:	str	r0, [fp, #-8]
   13124:	ldr	r3, [fp, #-8]
   13128:	cmp	r3, #0
   1312c:	beq	13138 <_start@@Base+0xde0>
   13130:	ldr	r3, [fp, #-8]
   13134:	b	13788 <_start@@Base+0x1430>
   13138:	mov	r3, #2
   1313c:	mov	r2, #2
   13140:	mov	r1, #2
   13144:	ldr	r0, [fp, #-16]
   13148:	bl	1be9c <flatcc_verify_field@@Base>
   1314c:	str	r0, [fp, #-8]
   13150:	ldr	r3, [fp, #-8]
   13154:	cmp	r3, #0
   13158:	beq	13164 <_start@@Base+0xe0c>
   1315c:	ldr	r3, [fp, #-8]
   13160:	b	13788 <_start@@Base+0x1430>
   13164:	mov	r3, #2
   13168:	mov	r2, #2
   1316c:	mov	r1, #1
   13170:	ldr	r0, [fp, #-16]
   13174:	bl	1be9c <flatcc_verify_field@@Base>
   13178:	str	r0, [fp, #-8]
   1317c:	ldr	r3, [fp, #-8]
   13180:	cmp	r3, #0
   13184:	beq	13190 <_start@@Base+0xe38>
   13188:	ldr	r3, [fp, #-8]
   1318c:	b	13788 <_start@@Base+0x1430>
   13190:	mov	r2, #1
   13194:	mov	r1, #3
   13198:	ldr	r0, [fp, #-16]
   1319c:	bl	1bf14 <flatcc_verify_string_field@@Base>
   131a0:	str	r0, [fp, #-8]
   131a4:	ldr	r3, [fp, #-8]
   131a8:	cmp	r3, #0
   131ac:	beq	131b8 <_start@@Base+0xe60>
   131b0:	ldr	r3, [fp, #-8]
   131b4:	b	13788 <_start@@Base+0x1430>
   131b8:	mov	r3, #1
   131bc:	mov	r2, #1
   131c0:	mov	r1, #6
   131c4:	ldr	r0, [fp, #-16]
   131c8:	bl	1be9c <flatcc_verify_field@@Base>
   131cc:	str	r0, [fp, #-8]
   131d0:	ldr	r3, [fp, #-8]
   131d4:	cmp	r3, #0
   131d8:	beq	131e4 <_start@@Base+0xe8c>
   131dc:	ldr	r3, [fp, #-8]
   131e0:	b	13788 <_start@@Base+0x1430>
   131e4:	mvn	r3, #0
   131e8:	str	r3, [sp, #4]
   131ec:	mov	r3, #1
   131f0:	str	r3, [sp]
   131f4:	mov	r3, #1
   131f8:	mov	r2, #0
   131fc:	mov	r1, #5
   13200:	ldr	r0, [fp, #-16]
   13204:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   13208:	str	r0, [fp, #-8]
   1320c:	ldr	r3, [fp, #-8]
   13210:	cmp	r3, #0
   13214:	beq	13220 <_start@@Base+0xec8>
   13218:	ldr	r3, [fp, #-8]
   1321c:	b	13788 <_start@@Base+0x1430>
   13220:	ldr	r3, [pc, #1388]	; 13794 <_start@@Base+0x143c>
   13224:	add	r3, pc, r3
   13228:	mov	r2, #0
   1322c:	mov	r1, #11
   13230:	ldr	r0, [fp, #-16]
   13234:	bl	1c1d8 <flatcc_verify_table_vector_field@@Base>
   13238:	str	r0, [fp, #-8]
   1323c:	ldr	r3, [fp, #-8]
   13240:	cmp	r3, #0
   13244:	beq	13250 <_start@@Base+0xef8>
   13248:	ldr	r3, [fp, #-8]
   1324c:	b	13788 <_start@@Base+0x1430>
   13250:	mov	r2, #0
   13254:	mov	r1, #10
   13258:	ldr	r0, [fp, #-16]
   1325c:	bl	1c078 <flatcc_verify_string_vector_field@@Base>
   13260:	str	r0, [fp, #-8]
   13264:	ldr	r3, [fp, #-8]
   13268:	cmp	r3, #0
   1326c:	beq	13278 <_start@@Base+0xf20>
   13270:	ldr	r3, [fp, #-8]
   13274:	b	13788 <_start@@Base+0x1430>
   13278:	mov	r2, #0
   1327c:	mov	r1, #28
   13280:	ldr	r0, [fp, #-16]
   13284:	bl	1c078 <flatcc_verify_string_vector_field@@Base>
   13288:	str	r0, [fp, #-8]
   1328c:	ldr	r3, [fp, #-8]
   13290:	cmp	r3, #0
   13294:	beq	132a0 <_start@@Base+0xf48>
   13298:	ldr	r3, [fp, #-8]
   1329c:	b	13788 <_start@@Base+0x1430>
   132a0:	mvn	r3, #0
   132a4:	str	r3, [sp, #4]
   132a8:	mov	r3, #1
   132ac:	str	r3, [sp]
   132b0:	mov	r3, #1
   132b4:	mov	r2, #0
   132b8:	mov	r1, #24
   132bc:	ldr	r0, [fp, #-16]
   132c0:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   132c4:	str	r0, [fp, #-8]
   132c8:	ldr	r3, [fp, #-8]
   132cc:	cmp	r3, #0
   132d0:	beq	132dc <_start@@Base+0xf84>
   132d4:	ldr	r3, [fp, #-8]
   132d8:	b	13788 <_start@@Base+0x1430>
   132dc:	mvn	r3, #-536870912	; 0xe0000000
   132e0:	str	r3, [sp, #4]
   132e4:	mov	r3, #4
   132e8:	str	r3, [sp]
   132ec:	mov	r3, #8
   132f0:	mov	r2, #0
   132f4:	mov	r1, #29
   132f8:	ldr	r0, [fp, #-16]
   132fc:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   13300:	str	r0, [fp, #-8]
   13304:	ldr	r3, [fp, #-8]
   13308:	cmp	r3, #0
   1330c:	beq	13318 <_start@@Base+0xfc0>
   13310:	ldr	r3, [fp, #-8]
   13314:	b	13788 <_start@@Base+0x1430>
   13318:	ldr	r3, [pc, #1144]	; 13798 <_start@@Base+0x1440>
   1331c:	add	r3, pc, r3
   13320:	mov	r2, #0
   13324:	mov	r1, #12
   13328:	ldr	r0, [fp, #-16]
   1332c:	bl	1c11c <flatcc_verify_table_field@@Base>
   13330:	str	r0, [fp, #-8]
   13334:	ldr	r3, [fp, #-8]
   13338:	cmp	r3, #0
   1333c:	beq	13348 <_start@@Base+0xff0>
   13340:	ldr	r3, [fp, #-8]
   13344:	b	13788 <_start@@Base+0x1430>
   13348:	ldr	r3, [pc, #1100]	; 1379c <_start@@Base+0x1444>
   1334c:	add	r3, pc, r3
   13350:	mov	r2, #0
   13354:	mov	r1, #8
   13358:	ldr	r0, [fp, #-16]
   1335c:	bl	1ca5c <flatcc_verify_union_field@@Base>
   13360:	str	r0, [fp, #-8]
   13364:	ldr	r3, [fp, #-8]
   13368:	cmp	r3, #0
   1336c:	beq	13378 <_start@@Base+0x1020>
   13370:	ldr	r3, [fp, #-8]
   13374:	b	13788 <_start@@Base+0x1430>
   13378:	mvn	r3, #-1073741824	; 0xc0000000
   1337c:	str	r3, [sp, #4]
   13380:	mov	r3, #2
   13384:	str	r3, [sp]
   13388:	mov	r3, #4
   1338c:	mov	r2, #0
   13390:	mov	r1, #9
   13394:	ldr	r0, [fp, #-16]
   13398:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1339c:	str	r0, [fp, #-8]
   133a0:	ldr	r3, [fp, #-8]
   133a4:	cmp	r3, #0
   133a8:	beq	133b4 <_start@@Base+0x105c>
   133ac:	ldr	r3, [fp, #-8]
   133b0:	b	13788 <_start@@Base+0x1430>
   133b4:	mvn	r3, #-1073741824	; 0xc0000000
   133b8:	str	r3, [sp, #4]
   133bc:	mov	r3, #2
   133c0:	str	r3, [sp]
   133c4:	mov	r3, #4
   133c8:	mov	r2, #0
   133cc:	mov	r1, #31
   133d0:	ldr	r0, [fp, #-16]
   133d4:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   133d8:	str	r0, [fp, #-8]
   133dc:	ldr	r3, [fp, #-8]
   133e0:	cmp	r3, #0
   133e4:	beq	133f0 <_start@@Base+0x1098>
   133e8:	ldr	r3, [fp, #-8]
   133ec:	b	13788 <_start@@Base+0x1430>
   133f0:	ldr	r3, [pc, #936]	; 137a0 <_start@@Base+0x1448>
   133f4:	add	r3, pc, r3
   133f8:	str	r3, [sp, #4]
   133fc:	mov	r3, #1
   13400:	str	r3, [sp]
   13404:	mov	r3, #0
   13408:	mov	r2, #0
   1340c:	mov	r1, #13
   13410:	ldr	r0, [fp, #-16]
   13414:	bl	1c900 <flatcc_verify_table_as_nested_root@@Base>
   13418:	str	r0, [fp, #-8]
   1341c:	ldr	r3, [fp, #-8]
   13420:	cmp	r3, #0
   13424:	beq	13430 <_start@@Base+0x10d8>
   13428:	ldr	r3, [fp, #-8]
   1342c:	b	13788 <_start@@Base+0x1430>
   13430:	ldr	r3, [pc, #876]	; 137a4 <_start@@Base+0x144c>
   13434:	add	r3, pc, r3
   13438:	mov	r2, #0
   1343c:	mov	r1, #14
   13440:	ldr	r0, [fp, #-16]
   13444:	bl	1c11c <flatcc_verify_table_field@@Base>
   13448:	str	r0, [fp, #-8]
   1344c:	ldr	r3, [fp, #-8]
   13450:	cmp	r3, #0
   13454:	beq	13460 <_start@@Base+0x1108>
   13458:	ldr	r3, [fp, #-8]
   1345c:	b	13788 <_start@@Base+0x1430>
   13460:	mov	r3, #1
   13464:	mov	r2, #1
   13468:	mov	r1, #15
   1346c:	ldr	r0, [fp, #-16]
   13470:	bl	1be9c <flatcc_verify_field@@Base>
   13474:	str	r0, [fp, #-8]
   13478:	ldr	r3, [fp, #-8]
   1347c:	cmp	r3, #0
   13480:	beq	1348c <_start@@Base+0x1134>
   13484:	ldr	r3, [fp, #-8]
   13488:	b	13788 <_start@@Base+0x1430>
   1348c:	mov	r3, #4
   13490:	mov	r2, #4
   13494:	mov	r1, #16
   13498:	ldr	r0, [fp, #-16]
   1349c:	bl	1be9c <flatcc_verify_field@@Base>
   134a0:	str	r0, [fp, #-8]
   134a4:	ldr	r3, [fp, #-8]
   134a8:	cmp	r3, #0
   134ac:	beq	134b8 <_start@@Base+0x1160>
   134b0:	ldr	r3, [fp, #-8]
   134b4:	b	13788 <_start@@Base+0x1430>
   134b8:	mov	r3, #4
   134bc:	mov	r2, #4
   134c0:	mov	r1, #17
   134c4:	ldr	r0, [fp, #-16]
   134c8:	bl	1be9c <flatcc_verify_field@@Base>
   134cc:	str	r0, [fp, #-8]
   134d0:	ldr	r3, [fp, #-8]
   134d4:	cmp	r3, #0
   134d8:	beq	134e4 <_start@@Base+0x118c>
   134dc:	ldr	r3, [fp, #-8]
   134e0:	b	13788 <_start@@Base+0x1430>
   134e4:	mov	r3, #8
   134e8:	mov	r2, #8
   134ec:	mov	r1, #18
   134f0:	ldr	r0, [fp, #-16]
   134f4:	bl	1be9c <flatcc_verify_field@@Base>
   134f8:	str	r0, [fp, #-8]
   134fc:	ldr	r3, [fp, #-8]
   13500:	cmp	r3, #0
   13504:	beq	13510 <_start@@Base+0x11b8>
   13508:	ldr	r3, [fp, #-8]
   1350c:	b	13788 <_start@@Base+0x1430>
   13510:	mov	r3, #8
   13514:	mov	r2, #8
   13518:	mov	r1, #19
   1351c:	ldr	r0, [fp, #-16]
   13520:	bl	1be9c <flatcc_verify_field@@Base>
   13524:	str	r0, [fp, #-8]
   13528:	ldr	r3, [fp, #-8]
   1352c:	cmp	r3, #0
   13530:	beq	1353c <_start@@Base+0x11e4>
   13534:	ldr	r3, [fp, #-8]
   13538:	b	13788 <_start@@Base+0x1430>
   1353c:	mov	r3, #4
   13540:	mov	r2, #4
   13544:	mov	r1, #20
   13548:	ldr	r0, [fp, #-16]
   1354c:	bl	1be9c <flatcc_verify_field@@Base>
   13550:	str	r0, [fp, #-8]
   13554:	ldr	r3, [fp, #-8]
   13558:	cmp	r3, #0
   1355c:	beq	13568 <_start@@Base+0x1210>
   13560:	ldr	r3, [fp, #-8]
   13564:	b	13788 <_start@@Base+0x1430>
   13568:	mov	r3, #4
   1356c:	mov	r2, #4
   13570:	mov	r1, #21
   13574:	ldr	r0, [fp, #-16]
   13578:	bl	1be9c <flatcc_verify_field@@Base>
   1357c:	str	r0, [fp, #-8]
   13580:	ldr	r3, [fp, #-8]
   13584:	cmp	r3, #0
   13588:	beq	13594 <_start@@Base+0x123c>
   1358c:	ldr	r3, [fp, #-8]
   13590:	b	13788 <_start@@Base+0x1430>
   13594:	mov	r3, #8
   13598:	mov	r2, #8
   1359c:	mov	r1, #22
   135a0:	ldr	r0, [fp, #-16]
   135a4:	bl	1be9c <flatcc_verify_field@@Base>
   135a8:	str	r0, [fp, #-8]
   135ac:	ldr	r3, [fp, #-8]
   135b0:	cmp	r3, #0
   135b4:	beq	135c0 <_start@@Base+0x1268>
   135b8:	ldr	r3, [fp, #-8]
   135bc:	b	13788 <_start@@Base+0x1430>
   135c0:	mov	r3, #8
   135c4:	mov	r2, #8
   135c8:	mov	r1, #23
   135cc:	ldr	r0, [fp, #-16]
   135d0:	bl	1be9c <flatcc_verify_field@@Base>
   135d4:	str	r0, [fp, #-8]
   135d8:	ldr	r3, [fp, #-8]
   135dc:	cmp	r3, #0
   135e0:	beq	135ec <_start@@Base+0x1294>
   135e4:	ldr	r3, [fp, #-8]
   135e8:	b	13788 <_start@@Base+0x1430>
   135ec:	mov	r3, #4
   135f0:	mov	r2, #4
   135f4:	mov	r1, #25
   135f8:	ldr	r0, [fp, #-16]
   135fc:	bl	1be9c <flatcc_verify_field@@Base>
   13600:	str	r0, [fp, #-8]
   13604:	ldr	r3, [fp, #-8]
   13608:	cmp	r3, #0
   1360c:	beq	13618 <_start@@Base+0x12c0>
   13610:	ldr	r3, [fp, #-8]
   13614:	b	13788 <_start@@Base+0x1430>
   13618:	mov	r3, #4
   1361c:	mov	r2, #4
   13620:	mov	r1, #26
   13624:	ldr	r0, [fp, #-16]
   13628:	bl	1be9c <flatcc_verify_field@@Base>
   1362c:	str	r0, [fp, #-8]
   13630:	ldr	r3, [fp, #-8]
   13634:	cmp	r3, #0
   13638:	beq	13644 <_start@@Base+0x12ec>
   1363c:	ldr	r3, [fp, #-8]
   13640:	b	13788 <_start@@Base+0x1430>
   13644:	mov	r3, #4
   13648:	mov	r2, #4
   1364c:	mov	r1, #27
   13650:	ldr	r0, [fp, #-16]
   13654:	bl	1be9c <flatcc_verify_field@@Base>
   13658:	str	r0, [fp, #-8]
   1365c:	ldr	r3, [fp, #-8]
   13660:	cmp	r3, #0
   13664:	beq	13670 <_start@@Base+0x1318>
   13668:	ldr	r3, [fp, #-8]
   1366c:	b	13788 <_start@@Base+0x1430>
   13670:	mvn	r3, #0
   13674:	str	r3, [sp, #4]
   13678:	mov	r3, #1
   1367c:	str	r3, [sp]
   13680:	mov	r3, #1
   13684:	mov	r2, #0
   13688:	mov	r1, #30
   1368c:	ldr	r0, [fp, #-16]
   13690:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   13694:	str	r0, [fp, #-8]
   13698:	ldr	r3, [fp, #-8]
   1369c:	cmp	r3, #0
   136a0:	beq	136ac <_start@@Base+0x1354>
   136a4:	ldr	r3, [fp, #-8]
   136a8:	b	13788 <_start@@Base+0x1430>
   136ac:	mvn	r3, #-536870912	; 0xe0000000
   136b0:	str	r3, [sp, #4]
   136b4:	mov	r3, #8
   136b8:	str	r3, [sp]
   136bc:	mov	r3, #8
   136c0:	mov	r2, #0
   136c4:	mov	r1, #32
   136c8:	ldr	r0, [fp, #-16]
   136cc:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   136d0:	str	r0, [fp, #-8]
   136d4:	ldr	r3, [fp, #-8]
   136d8:	cmp	r3, #0
   136dc:	beq	136e8 <_start@@Base+0x1390>
   136e0:	ldr	r3, [fp, #-8]
   136e4:	b	13788 <_start@@Base+0x1430>
   136e8:	mvn	r3, #-536870912	; 0xe0000000
   136ec:	str	r3, [sp, #4]
   136f0:	mov	r3, #8
   136f4:	str	r3, [sp]
   136f8:	mov	r3, #8
   136fc:	mov	r2, #0
   13700:	mov	r1, #33	; 0x21
   13704:	ldr	r0, [fp, #-16]
   13708:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1370c:	str	r0, [fp, #-8]
   13710:	ldr	r3, [fp, #-8]
   13714:	cmp	r3, #0
   13718:	beq	13724 <_start@@Base+0x13cc>
   1371c:	ldr	r3, [fp, #-8]
   13720:	b	13788 <_start@@Base+0x1430>
   13724:	ldr	r3, [pc, #124]	; 137a8 <_start@@Base+0x1450>
   13728:	add	r3, pc, r3
   1372c:	mov	r2, #0
   13730:	mov	r1, #34	; 0x22
   13734:	ldr	r0, [fp, #-16]
   13738:	bl	1c11c <flatcc_verify_table_field@@Base>
   1373c:	str	r0, [fp, #-8]
   13740:	ldr	r3, [fp, #-8]
   13744:	cmp	r3, #0
   13748:	beq	13754 <_start@@Base+0x13fc>
   1374c:	ldr	r3, [fp, #-8]
   13750:	b	13788 <_start@@Base+0x1430>
   13754:	ldr	r3, [pc, #80]	; 137ac <_start@@Base+0x1454>
   13758:	add	r3, pc, r3
   1375c:	mov	r2, #0
   13760:	mov	r1, #35	; 0x23
   13764:	ldr	r0, [fp, #-16]
   13768:	bl	1c11c <flatcc_verify_table_field@@Base>
   1376c:	str	r0, [fp, #-8]
   13770:	ldr	r3, [fp, #-8]
   13774:	cmp	r3, #0
   13778:	beq	13784 <_start@@Base+0x142c>
   1377c:	ldr	r3, [fp, #-8]
   13780:	b	13788 <_start@@Base+0x1430>
   13784:	mov	r3, #0
   13788:	mov	r0, r3
   1378c:	sub	sp, fp, #4
   13790:	pop	{fp, pc}
   13794:			; <UNDEFINED> instruction: 0xfffffed0
   13798:			; <UNDEFINED> instruction: 0xfffffdd8
   1379c:			; <UNDEFINED> instruction: 0xfffff3bc
   137a0:			; <UNDEFINED> instruction: 0xfffffd00
   137a4:			; <UNDEFINED> instruction: 0xfffff73c
   137a8:			; <UNDEFINED> instruction: 0xfffff198
   137ac:			; <UNDEFINED> instruction: 0xfffff8c0
   137b0:	push	{fp, lr}
   137b4:	add	fp, sp, #4
   137b8:	sub	sp, sp, #16
   137bc:	str	r0, [fp, #-8]
   137c0:	str	r1, [fp, #-12]
   137c4:	str	r2, [fp, #-16]
   137c8:	ldr	r3, [pc, #32]	; 137f0 <_start@@Base+0x1498>
   137cc:	add	r3, pc, r3
   137d0:	ldr	r2, [fp, #-16]
   137d4:	ldr	r1, [fp, #-12]
   137d8:	ldr	r0, [fp, #-8]
   137dc:	bl	1c6cc <flatcc_verify_table_as_root@@Base>
   137e0:	mov	r3, r0
   137e4:	mov	r0, r3
   137e8:	sub	sp, fp, #4
   137ec:	pop	{fp, pc}
   137f0:			; <UNDEFINED> instruction: 0xfffff928
   137f4:	push	{fp, lr}
   137f8:	add	fp, sp, #4
   137fc:	sub	sp, sp, #24
   13800:	str	r0, [fp, #-16]
   13804:	mov	r3, #1
   13808:	mov	r2, #1
   1380c:	mov	r1, #0
   13810:	ldr	r0, [fp, #-16]
   13814:	bl	1be9c <flatcc_verify_field@@Base>
   13818:	str	r0, [fp, #-8]
   1381c:	ldr	r3, [fp, #-8]
   13820:	cmp	r3, #0
   13824:	beq	13830 <_start@@Base+0x14d8>
   13828:	ldr	r3, [fp, #-8]
   1382c:	b	13a38 <_start@@Base+0x16e0>
   13830:	mov	r3, #1
   13834:	mov	r2, #1
   13838:	mov	r1, #1
   1383c:	ldr	r0, [fp, #-16]
   13840:	bl	1be9c <flatcc_verify_field@@Base>
   13844:	str	r0, [fp, #-8]
   13848:	ldr	r3, [fp, #-8]
   1384c:	cmp	r3, #0
   13850:	beq	1385c <_start@@Base+0x1504>
   13854:	ldr	r3, [fp, #-8]
   13858:	b	13a38 <_start@@Base+0x16e0>
   1385c:	mov	r3, #2
   13860:	mov	r2, #2
   13864:	mov	r1, #2
   13868:	ldr	r0, [fp, #-16]
   1386c:	bl	1be9c <flatcc_verify_field@@Base>
   13870:	str	r0, [fp, #-8]
   13874:	ldr	r3, [fp, #-8]
   13878:	cmp	r3, #0
   1387c:	beq	13888 <_start@@Base+0x1530>
   13880:	ldr	r3, [fp, #-8]
   13884:	b	13a38 <_start@@Base+0x16e0>
   13888:	mov	r3, #2
   1388c:	mov	r2, #2
   13890:	mov	r1, #3
   13894:	ldr	r0, [fp, #-16]
   13898:	bl	1be9c <flatcc_verify_field@@Base>
   1389c:	str	r0, [fp, #-8]
   138a0:	ldr	r3, [fp, #-8]
   138a4:	cmp	r3, #0
   138a8:	beq	138b4 <_start@@Base+0x155c>
   138ac:	ldr	r3, [fp, #-8]
   138b0:	b	13a38 <_start@@Base+0x16e0>
   138b4:	mov	r3, #4
   138b8:	mov	r2, #4
   138bc:	mov	r1, #4
   138c0:	ldr	r0, [fp, #-16]
   138c4:	bl	1be9c <flatcc_verify_field@@Base>
   138c8:	str	r0, [fp, #-8]
   138cc:	ldr	r3, [fp, #-8]
   138d0:	cmp	r3, #0
   138d4:	beq	138e0 <_start@@Base+0x1588>
   138d8:	ldr	r3, [fp, #-8]
   138dc:	b	13a38 <_start@@Base+0x16e0>
   138e0:	mov	r3, #4
   138e4:	mov	r2, #4
   138e8:	mov	r1, #5
   138ec:	ldr	r0, [fp, #-16]
   138f0:	bl	1be9c <flatcc_verify_field@@Base>
   138f4:	str	r0, [fp, #-8]
   138f8:	ldr	r3, [fp, #-8]
   138fc:	cmp	r3, #0
   13900:	beq	1390c <_start@@Base+0x15b4>
   13904:	ldr	r3, [fp, #-8]
   13908:	b	13a38 <_start@@Base+0x16e0>
   1390c:	mov	r3, #8
   13910:	mov	r2, #8
   13914:	mov	r1, #6
   13918:	ldr	r0, [fp, #-16]
   1391c:	bl	1be9c <flatcc_verify_field@@Base>
   13920:	str	r0, [fp, #-8]
   13924:	ldr	r3, [fp, #-8]
   13928:	cmp	r3, #0
   1392c:	beq	13938 <_start@@Base+0x15e0>
   13930:	ldr	r3, [fp, #-8]
   13934:	b	13a38 <_start@@Base+0x16e0>
   13938:	mov	r3, #8
   1393c:	mov	r2, #8
   13940:	mov	r1, #7
   13944:	ldr	r0, [fp, #-16]
   13948:	bl	1be9c <flatcc_verify_field@@Base>
   1394c:	str	r0, [fp, #-8]
   13950:	ldr	r3, [fp, #-8]
   13954:	cmp	r3, #0
   13958:	beq	13964 <_start@@Base+0x160c>
   1395c:	ldr	r3, [fp, #-8]
   13960:	b	13a38 <_start@@Base+0x16e0>
   13964:	mov	r3, #4
   13968:	mov	r2, #4
   1396c:	mov	r1, #8
   13970:	ldr	r0, [fp, #-16]
   13974:	bl	1be9c <flatcc_verify_field@@Base>
   13978:	str	r0, [fp, #-8]
   1397c:	ldr	r3, [fp, #-8]
   13980:	cmp	r3, #0
   13984:	beq	13990 <_start@@Base+0x1638>
   13988:	ldr	r3, [fp, #-8]
   1398c:	b	13a38 <_start@@Base+0x16e0>
   13990:	mov	r3, #8
   13994:	mov	r2, #8
   13998:	mov	r1, #9
   1399c:	ldr	r0, [fp, #-16]
   139a0:	bl	1be9c <flatcc_verify_field@@Base>
   139a4:	str	r0, [fp, #-8]
   139a8:	ldr	r3, [fp, #-8]
   139ac:	cmp	r3, #0
   139b0:	beq	139bc <_start@@Base+0x1664>
   139b4:	ldr	r3, [fp, #-8]
   139b8:	b	13a38 <_start@@Base+0x16e0>
   139bc:	mvn	r3, #0
   139c0:	str	r3, [sp, #4]
   139c4:	mov	r3, #1
   139c8:	str	r3, [sp]
   139cc:	mov	r3, #1
   139d0:	mov	r2, #0
   139d4:	mov	r1, #10
   139d8:	ldr	r0, [fp, #-16]
   139dc:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   139e0:	str	r0, [fp, #-8]
   139e4:	ldr	r3, [fp, #-8]
   139e8:	cmp	r3, #0
   139ec:	beq	139f8 <_start@@Base+0x16a0>
   139f0:	ldr	r3, [fp, #-8]
   139f4:	b	13a38 <_start@@Base+0x16e0>
   139f8:	mvn	r3, #-536870912	; 0xe0000000
   139fc:	str	r3, [sp, #4]
   13a00:	mov	r3, #8
   13a04:	str	r3, [sp]
   13a08:	mov	r3, #8
   13a0c:	mov	r2, #0
   13a10:	mov	r1, #11
   13a14:	ldr	r0, [fp, #-16]
   13a18:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   13a1c:	str	r0, [fp, #-8]
   13a20:	ldr	r3, [fp, #-8]
   13a24:	cmp	r3, #0
   13a28:	beq	13a34 <_start@@Base+0x16dc>
   13a2c:	ldr	r3, [fp, #-8]
   13a30:	b	13a38 <_start@@Base+0x16e0>
   13a34:	mov	r3, #0
   13a38:	mov	r0, r3
   13a3c:	sub	sp, fp, #4
   13a40:	pop	{fp, pc}
   13a44:	push	{fp, lr}
   13a48:	add	fp, sp, #4
   13a4c:	sub	sp, sp, #16
   13a50:	str	r0, [fp, #-16]
   13a54:	mov	r3, #4
   13a58:	mov	r2, #4
   13a5c:	mov	r1, #0
   13a60:	ldr	r0, [fp, #-16]
   13a64:	bl	1be9c <flatcc_verify_field@@Base>
   13a68:	str	r0, [fp, #-8]
   13a6c:	ldr	r3, [fp, #-8]
   13a70:	cmp	r3, #0
   13a74:	beq	13a80 <_start@@Base+0x1728>
   13a78:	ldr	r3, [fp, #-8]
   13a7c:	b	13a84 <_start@@Base+0x172c>
   13a80:	mov	r3, #0
   13a84:	mov	r0, r3
   13a88:	sub	sp, fp, #4
   13a8c:	pop	{fp, pc}
   13a90:	push	{fp, lr}
   13a94:	add	fp, sp, #4
   13a98:	sub	sp, sp, #16
   13a9c:	str	r0, [fp, #-16]
   13aa0:	ldr	r3, [pc, #248]	; 13ba0 <_start@@Base+0x1848>
   13aa4:	add	r3, pc, r3
   13aa8:	mov	r2, #0
   13aac:	mov	r1, #1
   13ab0:	ldr	r0, [fp, #-16]
   13ab4:	bl	1ca5c <flatcc_verify_union_field@@Base>
   13ab8:	str	r0, [fp, #-8]
   13abc:	ldr	r3, [fp, #-8]
   13ac0:	cmp	r3, #0
   13ac4:	beq	13ad0 <_start@@Base+0x1778>
   13ac8:	ldr	r3, [fp, #-8]
   13acc:	b	13b94 <_start@@Base+0x183c>
   13ad0:	ldr	r3, [pc, #204]	; 13ba4 <_start@@Base+0x184c>
   13ad4:	add	r3, pc, r3
   13ad8:	mov	r2, #0
   13adc:	mov	r1, #3
   13ae0:	ldr	r0, [fp, #-16]
   13ae4:	bl	1ca5c <flatcc_verify_union_field@@Base>
   13ae8:	str	r0, [fp, #-8]
   13aec:	ldr	r3, [fp, #-8]
   13af0:	cmp	r3, #0
   13af4:	beq	13b00 <_start@@Base+0x17a8>
   13af8:	ldr	r3, [fp, #-8]
   13afc:	b	13b94 <_start@@Base+0x183c>
   13b00:	ldr	r3, [pc, #160]	; 13ba8 <_start@@Base+0x1850>
   13b04:	add	r3, pc, r3
   13b08:	mov	r2, #0
   13b0c:	mov	r1, #5
   13b10:	ldr	r0, [fp, #-16]
   13b14:	bl	1ca5c <flatcc_verify_union_field@@Base>
   13b18:	str	r0, [fp, #-8]
   13b1c:	ldr	r3, [fp, #-8]
   13b20:	cmp	r3, #0
   13b24:	beq	13b30 <_start@@Base+0x17d8>
   13b28:	ldr	r3, [fp, #-8]
   13b2c:	b	13b94 <_start@@Base+0x183c>
   13b30:	ldr	r3, [pc, #116]	; 13bac <_start@@Base+0x1854>
   13b34:	add	r3, pc, r3
   13b38:	mov	r2, #0
   13b3c:	mov	r1, #7
   13b40:	ldr	r0, [fp, #-16]
   13b44:	bl	1ca5c <flatcc_verify_union_field@@Base>
   13b48:	str	r0, [fp, #-8]
   13b4c:	ldr	r3, [fp, #-8]
   13b50:	cmp	r3, #0
   13b54:	beq	13b60 <_start@@Base+0x1808>
   13b58:	ldr	r3, [fp, #-8]
   13b5c:	b	13b94 <_start@@Base+0x183c>
   13b60:	ldr	r3, [pc, #72]	; 13bb0 <_start@@Base+0x1858>
   13b64:	add	r3, pc, r3
   13b68:	mov	r2, #0
   13b6c:	mov	r1, #9
   13b70:	ldr	r0, [fp, #-16]
   13b74:	bl	1ccb8 <flatcc_verify_union_vector_field@@Base>
   13b78:	str	r0, [fp, #-8]
   13b7c:	ldr	r3, [fp, #-8]
   13b80:	cmp	r3, #0
   13b84:	beq	13b90 <_start@@Base+0x1838>
   13b88:	ldr	r3, [fp, #-8]
   13b8c:	b	13b94 <_start@@Base+0x183c>
   13b90:	mov	r3, #0
   13b94:	mov	r0, r3
   13b98:	sub	sp, fp, #4
   13b9c:	pop	{fp, pc}
   13ba0:			; <UNDEFINED> instruction: 0xffffed2c
   13ba4:			; <UNDEFINED> instruction: 0xffffecfc
   13ba8:			; <UNDEFINED> instruction: 0xffffeccc
   13bac:			; <UNDEFINED> instruction: 0xffffec9c
   13bb0:			; <UNDEFINED> instruction: 0xffffec6c

00013bb4 <main@@Base>:
   13bb4:	push	{fp, lr}
   13bb8:	add	fp, sp, #4
   13bbc:	sub	sp, sp, #256	; 0x100
   13bc0:	str	r0, [fp, #-256]	; 0xffffff00
   13bc4:	str	r1, [fp, #-260]	; 0xfffffefc
   13bc8:	sub	r3, fp, #252	; 0xfc
   13bcc:	str	r3, [fp, #-8]
   13bd0:	ldr	r0, [fp, #-8]
   13bd4:	bl	1496c <flatcc_builder_init@@Base>
   13bd8:	ldr	r0, [fp, #-8]
   13bdc:	bl	12634 <_start@@Base+0x2dc>
   13be0:	ldr	r3, [pc, #92]	; 13c44 <main@@Base+0x90>
   13be4:	add	r3, pc, r3
   13be8:	mov	r1, r3
   13bec:	ldr	r0, [fp, #-8]
   13bf0:	bl	125f4 <_start@@Base+0x29c>
   13bf4:	ldr	r0, [fp, #-8]
   13bf8:	bl	12688 <_start@@Base+0x330>
   13bfc:	sub	r3, fp, #20
   13c00:	mov	r1, r3
   13c04:	ldr	r0, [fp, #-8]
   13c08:	bl	19ad4 <flatcc_builder_get_direct_buffer@@Base>
   13c0c:	str	r0, [fp, #-12]
   13c10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c14:	ldr	r2, [pc, #44]	; 13c48 <main@@Base+0x94>
   13c18:	add	r2, pc, r2
   13c1c:	mov	r1, r3
   13c20:	ldr	r0, [fp, #-12]
   13c24:	bl	137b0 <_start@@Base+0x1458>
   13c28:	str	r0, [fp, #-16]
   13c2c:	ldr	r0, [fp, #-8]
   13c30:	bl	14c20 <flatcc_builder_clear@@Base>
   13c34:	ldr	r3, [fp, #-16]
   13c38:	mov	r0, r3
   13c3c:	sub	sp, fp, #4
   13c40:	pop	{fp, pc}
   13c44:	andeq	r9, r0, r0, ror #9
   13c48:	andeq	r9, r0, r4, lsr #9
   13c4c:	push	{fp, lr}
   13c50:	add	fp, sp, #4
   13c54:	sub	sp, sp, #16
   13c58:	str	r0, [fp, #-16]
   13c5c:	str	r1, [fp, #-20]	; 0xffffffec
   13c60:	mov	r3, #0
   13c64:	str	r3, [fp, #-12]
   13c68:	ldr	r3, [fp, #-16]
   13c6c:	cmp	r3, #3
   13c70:	bhi	13c7c <main@@Base+0xc8>
   13c74:	mov	r3, #4
   13c78:	str	r3, [fp, #-16]
   13c7c:	sub	r3, fp, #12
   13c80:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c84:	ldr	r1, [fp, #-16]
   13c88:	mov	r0, r3
   13c8c:	bl	12310 <posix_memalign@plt>
   13c90:	str	r0, [fp, #-8]
   13c94:	ldr	r3, [fp, #-8]
   13c98:	cmp	r3, #0
   13c9c:	beq	13cc0 <main@@Base+0x10c>
   13ca0:	ldr	r3, [fp, #-12]
   13ca4:	cmp	r3, #0
   13ca8:	beq	13cc0 <main@@Base+0x10c>
   13cac:	ldr	r3, [fp, #-12]
   13cb0:	mov	r0, r3
   13cb4:	bl	122b0 <free@plt>
   13cb8:	mov	r3, #0
   13cbc:	str	r3, [fp, #-12]
   13cc0:	ldr	r3, [fp, #-12]
   13cc4:	mov	r0, r3
   13cc8:	sub	sp, fp, #4
   13ccc:	pop	{fp, pc}
   13cd0:	push	{fp}		; (str fp, [sp, #-4]!)
   13cd4:	add	fp, sp, #0
   13cd8:	sub	sp, sp, #12
   13cdc:	str	r0, [fp, #-8]
   13ce0:	ldr	r3, [fp, #-8]
   13ce4:	mov	r0, r3
   13ce8:	add	sp, fp, #0
   13cec:	pop	{fp}		; (ldr fp, [sp], #4)
   13cf0:	bx	lr
   13cf4:	push	{fp}		; (str fp, [sp, #-4]!)
   13cf8:	add	fp, sp, #0
   13cfc:	sub	sp, sp, #12
   13d00:	mov	r3, r0
   13d04:	strb	r3, [fp, #-5]
   13d08:	ldrb	r3, [fp, #-5]
   13d0c:	mov	r0, r3
   13d10:	add	sp, fp, #0
   13d14:	pop	{fp}		; (ldr fp, [sp], #4)
   13d18:	bx	lr
   13d1c:	push	{fp}		; (str fp, [sp, #-4]!)
   13d20:	add	fp, sp, #0
   13d24:	sub	sp, sp, #12
   13d28:	str	r0, [fp, #-8]
   13d2c:	ldr	r3, [fp, #-8]
   13d30:	mov	r0, r3
   13d34:	add	sp, fp, #0
   13d38:	pop	{fp}		; (ldr fp, [sp], #4)
   13d3c:	bx	lr
   13d40:	push	{fp}		; (str fp, [sp, #-4]!)
   13d44:	add	fp, sp, #0
   13d48:	sub	sp, sp, #12
   13d4c:	str	r0, [fp, #-8]
   13d50:	str	r1, [fp, #-12]
   13d54:	ldr	r3, [fp, #-8]
   13d58:	ldr	r2, [r3]
   13d5c:	ldr	r3, [fp, #-8]
   13d60:	ldr	r3, [r3, #4]
   13d64:	cmp	r2, r3
   13d68:	bne	13d94 <main@@Base+0x1e0>
   13d6c:	ldr	r3, [fp, #-12]
   13d70:	cmp	r3, #0
   13d74:	beq	13d88 <main@@Base+0x1d4>
   13d78:	ldr	r3, [fp, #-8]
   13d7c:	ldr	r2, [r3, #24]
   13d80:	ldr	r3, [fp, #-12]
   13d84:	str	r2, [r3]
   13d88:	ldr	r3, [fp, #-8]
   13d8c:	ldr	r3, [r3, #8]
   13d90:	b	13db0 <main@@Base+0x1fc>
   13d94:	ldr	r3, [fp, #-12]
   13d98:	cmp	r3, #0
   13d9c:	beq	13dac <main@@Base+0x1f8>
   13da0:	ldr	r3, [fp, #-12]
   13da4:	mov	r2, #0
   13da8:	str	r2, [r3]
   13dac:	mov	r3, #0
   13db0:	mov	r0, r3
   13db4:	add	sp, fp, #0
   13db8:	pop	{fp}		; (ldr fp, [sp], #4)
   13dbc:	bx	lr
   13dc0:	push	{fp, lr}
   13dc4:	add	fp, sp, #4
   13dc8:	sub	sp, sp, #16
   13dcc:	str	r0, [fp, #-16]
   13dd0:	str	r1, [fp, #-20]	; 0xffffffec
   13dd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dd8:	mov	r1, #0
   13ddc:	ldr	r0, [fp, #-16]
   13de0:	bl	12334 <memchr@plt>
   13de4:	str	r0, [fp, #-8]
   13de8:	ldr	r3, [fp, #-8]
   13dec:	cmp	r3, #0
   13df0:	beq	13e04 <main@@Base+0x250>
   13df4:	ldr	r2, [fp, #-8]
   13df8:	ldr	r3, [fp, #-16]
   13dfc:	sub	r3, r2, r3
   13e00:	b	13e08 <main@@Base+0x254>
   13e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e08:	mov	r0, r3
   13e0c:	sub	sp, fp, #4
   13e10:	pop	{fp, pc}

00013e14 <flatcc_builder_default_alloc@@Base>:
   13e14:	push	{fp, lr}
   13e18:	add	fp, sp, #4
   13e1c:	sub	sp, sp, #24
   13e20:	str	r0, [fp, #-16]
   13e24:	str	r1, [fp, #-20]	; 0xffffffec
   13e28:	str	r2, [fp, #-24]	; 0xffffffe8
   13e2c:	str	r3, [fp, #-28]	; 0xffffffe4
   13e30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e34:	cmp	r3, #0
   13e38:	bne	13e7c <flatcc_builder_default_alloc@@Base+0x68>
   13e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e40:	ldr	r3, [r3]
   13e44:	cmp	r3, #0
   13e48:	beq	13e74 <flatcc_builder_default_alloc@@Base+0x60>
   13e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e50:	ldr	r3, [r3]
   13e54:	mov	r0, r3
   13e58:	bl	122b0 <free@plt>
   13e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e60:	mov	r2, #0
   13e64:	str	r2, [r3]
   13e68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e6c:	mov	r2, #0
   13e70:	str	r2, [r3, #4]
   13e74:	mov	r3, #0
   13e78:	b	13fd0 <flatcc_builder_default_alloc@@Base+0x1bc>
   13e7c:	ldr	r3, [fp, #4]
   13e80:	sub	r3, r3, #1
   13e84:	cmp	r3, #6
   13e88:	addls	pc, pc, r3, lsl #2
   13e8c:	b	13edc <flatcc_builder_default_alloc@@Base+0xc8>
   13e90:	b	13eac <flatcc_builder_default_alloc@@Base+0x98>
   13e94:	b	13edc <flatcc_builder_default_alloc@@Base+0xc8>
   13e98:	b	13edc <flatcc_builder_default_alloc@@Base+0xc8>
   13e9c:	b	13ec4 <flatcc_builder_default_alloc@@Base+0xb0>
   13ea0:	b	13eb8 <flatcc_builder_default_alloc@@Base+0xa4>
   13ea4:	b	13edc <flatcc_builder_default_alloc@@Base+0xc8>
   13ea8:	b	13ed0 <flatcc_builder_default_alloc@@Base+0xbc>
   13eac:	mov	r3, #256	; 0x100
   13eb0:	str	r3, [fp, #-8]
   13eb4:	b	13ee8 <flatcc_builder_default_alloc@@Base+0xd4>
   13eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ebc:	str	r3, [fp, #-8]
   13ec0:	b	13ee8 <flatcc_builder_default_alloc@@Base+0xd4>
   13ec4:	mov	r3, #288	; 0x120
   13ec8:	str	r3, [fp, #-8]
   13ecc:	b	13ee8 <flatcc_builder_default_alloc@@Base+0xd4>
   13ed0:	mov	r3, #64	; 0x40
   13ed4:	str	r3, [fp, #-8]
   13ed8:	b	13ee8 <flatcc_builder_default_alloc@@Base+0xd4>
   13edc:	mov	r3, #32
   13ee0:	str	r3, [fp, #-8]
   13ee4:	nop			; (mov r0, r0)
   13ee8:	b	13ef8 <flatcc_builder_default_alloc@@Base+0xe4>
   13eec:	ldr	r3, [fp, #-8]
   13ef0:	lsl	r3, r3, #1
   13ef4:	str	r3, [fp, #-8]
   13ef8:	ldr	r2, [fp, #-8]
   13efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f00:	cmp	r2, r3
   13f04:	bcc	13eec <flatcc_builder_default_alloc@@Base+0xd8>
   13f08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f0c:	ldr	r2, [r3, #4]
   13f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f14:	cmp	r2, r3
   13f18:	bcc	13f3c <flatcc_builder_default_alloc@@Base+0x128>
   13f1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f20:	ldr	r3, [r3, #4]
   13f24:	lsr	r2, r3, #1
   13f28:	ldr	r3, [fp, #-8]
   13f2c:	cmp	r2, r3
   13f30:	bcc	13f3c <flatcc_builder_default_alloc@@Base+0x128>
   13f34:	mov	r3, #0
   13f38:	b	13fd0 <flatcc_builder_default_alloc@@Base+0x1bc>
   13f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f40:	ldr	r3, [r3]
   13f44:	ldr	r1, [fp, #-8]
   13f48:	mov	r0, r3
   13f4c:	bl	122d4 <realloc@plt>
   13f50:	str	r0, [fp, #-12]
   13f54:	ldr	r3, [fp, #-12]
   13f58:	cmp	r3, #0
   13f5c:	bne	13f68 <flatcc_builder_default_alloc@@Base+0x154>
   13f60:	mvn	r3, #0
   13f64:	b	13fd0 <flatcc_builder_default_alloc@@Base+0x1bc>
   13f68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f6c:	cmp	r3, #0
   13f70:	beq	13fb4 <flatcc_builder_default_alloc@@Base+0x1a0>
   13f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f78:	ldr	r2, [r3, #4]
   13f7c:	ldr	r3, [fp, #-8]
   13f80:	cmp	r2, r3
   13f84:	bcs	13fb4 <flatcc_builder_default_alloc@@Base+0x1a0>
   13f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f8c:	ldr	r3, [r3, #4]
   13f90:	ldr	r2, [fp, #-12]
   13f94:	add	r0, r2, r3
   13f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f9c:	ldr	r3, [r3, #4]
   13fa0:	ldr	r2, [fp, #-8]
   13fa4:	sub	r3, r2, r3
   13fa8:	mov	r2, r3
   13fac:	mov	r1, #0
   13fb0:	bl	1231c <memset@plt>
   13fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fb8:	ldr	r2, [fp, #-12]
   13fbc:	str	r2, [r3]
   13fc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc4:	ldr	r2, [fp, #-8]
   13fc8:	str	r2, [r3, #4]
   13fcc:	mov	r3, #0
   13fd0:	mov	r0, r3
   13fd4:	sub	sp, fp, #4
   13fd8:	pop	{fp, pc}
   13fdc:	push	{fp}		; (str fp, [sp, #-4]!)
   13fe0:	add	fp, sp, #0
   13fe4:	sub	sp, sp, #20
   13fe8:	str	r0, [fp, #-16]
   13fec:	str	r1, [fp, #-20]	; 0xffffffec
   13ff0:	ldr	r3, [fp, #-16]
   13ff4:	add	r3, r3, #52	; 0x34
   13ff8:	add	r3, r3, #8
   13ffc:	str	r3, [fp, #-8]
   14000:	ldr	r3, [fp, #-16]
   14004:	ldr	r2, [r3, #60]	; 0x3c
   14008:	ldr	r3, [fp, #-16]
   1400c:	ldr	r3, [r3, #28]
   14010:	add	r2, r2, r3
   14014:	ldr	r3, [fp, #-16]
   14018:	str	r2, [r3, #16]
   1401c:	ldr	r3, [fp, #-8]
   14020:	ldr	r2, [r3, #4]
   14024:	ldr	r3, [fp, #-16]
   14028:	ldr	r3, [r3, #28]
   1402c:	sub	r2, r2, r3
   14030:	ldr	r3, [fp, #-16]
   14034:	str	r2, [r3, #24]
   14038:	ldr	r3, [fp, #-16]
   1403c:	ldr	r2, [r3, #24]
   14040:	ldr	r3, [fp, #-20]	; 0xffffffec
   14044:	cmp	r2, r3
   14048:	bls	14058 <flatcc_builder_default_alloc@@Base+0x244>
   1404c:	ldr	r3, [fp, #-16]
   14050:	ldr	r2, [fp, #-20]	; 0xffffffec
   14054:	str	r2, [r3, #24]
   14058:	ldr	r3, [fp, #-16]
   1405c:	ldr	r3, [r3, #32]
   14060:	ldr	r2, [fp, #-20]	; 0xffffffec
   14064:	str	r2, [r3, #4]
   14068:	nop			; (mov r0, r0)
   1406c:	add	sp, fp, #0
   14070:	pop	{fp}		; (ldr fp, [sp], #4)
   14074:	bx	lr
   14078:	push	{r4, fp, lr}
   1407c:	add	fp, sp, #8
   14080:	sub	sp, sp, #36	; 0x24
   14084:	str	r0, [fp, #-24]	; 0xffffffe8
   14088:	str	r1, [fp, #-28]	; 0xffffffe4
   1408c:	str	r2, [fp, #-32]	; 0xffffffe0
   14090:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14094:	add	r3, r3, #52	; 0x34
   14098:	add	r3, r3, #8
   1409c:	str	r3, [fp, #-16]
   140a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140a4:	ldr	r4, [r3, #48]	; 0x30
   140a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140ac:	ldr	r0, [r3, #40]	; 0x28
   140b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140b4:	ldr	r2, [r3, #28]
   140b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140bc:	add	r2, r2, r3
   140c0:	mov	r3, #1
   140c4:	str	r3, [sp]
   140c8:	mov	r3, #1
   140cc:	ldr	r1, [fp, #-16]
   140d0:	blx	r4
   140d4:	mov	r3, r0
   140d8:	cmp	r3, #0
   140dc:	beq	140e8 <flatcc_builder_default_alloc@@Base+0x2d4>
   140e0:	mvn	r3, #0
   140e4:	b	140f8 <flatcc_builder_default_alloc@@Base+0x2e4>
   140e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   140ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140f0:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   140f4:	mov	r3, #0
   140f8:	mov	r0, r3
   140fc:	sub	sp, fp, #8
   14100:	pop	{r4, fp, pc}
   14104:	push	{fp, lr}
   14108:	add	fp, sp, #4
   1410c:	sub	sp, sp, #16
   14110:	str	r0, [fp, #-16]
   14114:	str	r1, [fp, #-20]	; 0xffffffec
   14118:	ldr	r3, [fp, #-16]
   1411c:	ldr	r3, [r3, #20]
   14120:	str	r3, [fp, #-8]
   14124:	ldr	r3, [fp, #-16]
   14128:	ldr	r2, [r3, #20]
   1412c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14130:	add	r2, r2, r3
   14134:	ldr	r3, [fp, #-16]
   14138:	str	r2, [r3, #20]
   1413c:	ldr	r3, [fp, #-16]
   14140:	ldr	r2, [r3, #20]
   14144:	ldr	r3, [fp, #-16]
   14148:	ldr	r3, [r3, #24]
   1414c:	cmp	r2, r3
   14150:	bcc	14184 <flatcc_builder_default_alloc@@Base+0x370>
   14154:	ldr	r3, [fp, #-16]
   14158:	ldr	r3, [r3, #20]
   1415c:	add	r3, r3, #1
   14160:	mvn	r2, #3
   14164:	mov	r1, r3
   14168:	ldr	r0, [fp, #-16]
   1416c:	bl	14078 <flatcc_builder_default_alloc@@Base+0x264>
   14170:	mov	r3, r0
   14174:	cmp	r3, #0
   14178:	beq	14184 <flatcc_builder_default_alloc@@Base+0x370>
   1417c:	mov	r3, #0
   14180:	b	14194 <flatcc_builder_default_alloc@@Base+0x380>
   14184:	ldr	r3, [fp, #-16]
   14188:	ldr	r2, [r3, #16]
   1418c:	ldr	r3, [fp, #-8]
   14190:	add	r3, r2, r3
   14194:	mov	r0, r3
   14198:	sub	sp, fp, #4
   1419c:	pop	{fp, pc}
   141a0:	push	{fp, lr}
   141a4:	add	fp, sp, #4
   141a8:	sub	sp, sp, #8
   141ac:	str	r0, [fp, #-8]
   141b0:	str	r1, [fp, #-12]
   141b4:	ldr	r3, [fp, #-8]
   141b8:	ldr	r2, [r3, #20]
   141bc:	ldr	r3, [fp, #-12]
   141c0:	sub	r2, r2, r3
   141c4:	ldr	r3, [fp, #-8]
   141c8:	str	r2, [r3, #20]
   141cc:	ldr	r3, [fp, #-8]
   141d0:	ldr	r2, [r3, #16]
   141d4:	ldr	r3, [fp, #-8]
   141d8:	ldr	r3, [r3, #20]
   141dc:	add	r3, r2, r3
   141e0:	ldr	r2, [fp, #-12]
   141e4:	mov	r1, #0
   141e8:	mov	r0, r3
   141ec:	bl	1231c <memset@plt>
   141f0:	nop			; (mov r0, r0)
   141f4:	sub	sp, fp, #4
   141f8:	pop	{fp, pc}
   141fc:	push	{fp, lr}
   14200:	add	fp, sp, #4
   14204:	sub	sp, sp, #24
   14208:	str	r0, [fp, #-16]
   1420c:	str	r1, [fp, #-20]	; 0xffffffec
   14210:	str	r2, [fp, #-24]	; 0xffffffe8
   14214:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14218:	ldr	r0, [fp, #-16]
   1421c:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   14220:	str	r0, [fp, #-8]
   14224:	ldr	r3, [fp, #-8]
   14228:	cmp	r3, #0
   1422c:	bne	14238 <flatcc_builder_default_alloc@@Base+0x424>
   14230:	mov	r3, #0
   14234:	b	1424c <flatcc_builder_default_alloc@@Base+0x438>
   14238:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1423c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14240:	ldr	r0, [fp, #-8]
   14244:	bl	122bc <memcpy@plt>
   14248:	ldr	r3, [fp, #-8]
   1424c:	mov	r0, r3
   14250:	sub	sp, fp, #4
   14254:	pop	{fp, pc}
   14258:	push	{fp, lr}
   1425c:	add	fp, sp, #4
   14260:	sub	sp, sp, #24
   14264:	str	r0, [fp, #-16]
   14268:	str	r1, [fp, #-20]	; 0xffffffec
   1426c:	strh	r2, [fp, #-22]	; 0xffffffea
   14270:	strh	r3, [fp, #-24]	; 0xffffffe8
   14274:	ldr	r3, [fp, #-16]
   14278:	ldr	r2, [r3, #20]
   1427c:	ldrh	r3, [fp, #-22]	; 0xffffffea
   14280:	add	r3, r2, r3
   14284:	sub	r3, r3, #1
   14288:	ldrh	r2, [fp, #-22]	; 0xffffffea
   1428c:	rsb	r2, r2, #0
   14290:	and	r3, r3, r2
   14294:	str	r3, [fp, #-8]
   14298:	ldr	r2, [fp, #-8]
   1429c:	ldr	r3, [fp, #-20]	; 0xffffffec
   142a0:	add	r2, r2, r3
   142a4:	ldr	r3, [fp, #-16]
   142a8:	str	r2, [r3, #20]
   142ac:	ldr	r3, [fp, #-16]
   142b0:	ldr	r2, [r3, #20]
   142b4:	ldr	r3, [fp, #-16]
   142b8:	ldr	r3, [r3, #24]
   142bc:	cmp	r2, r3
   142c0:	bcc	142f4 <flatcc_builder_default_alloc@@Base+0x4e0>
   142c4:	ldr	r3, [fp, #-16]
   142c8:	ldr	r3, [r3, #20]
   142cc:	add	r3, r3, #1
   142d0:	ldr	r2, [pc, #136]	; 14360 <flatcc_builder_default_alloc@@Base+0x54c>
   142d4:	mov	r1, r3
   142d8:	ldr	r0, [fp, #-16]
   142dc:	bl	14078 <flatcc_builder_default_alloc@@Base+0x264>
   142e0:	mov	r3, r0
   142e4:	cmp	r3, #0
   142e8:	beq	142f4 <flatcc_builder_default_alloc@@Base+0x4e0>
   142ec:	mov	r3, #0
   142f0:	b	14354 <flatcc_builder_default_alloc@@Base+0x540>
   142f4:	ldr	r3, [fp, #-16]
   142f8:	ldr	r2, [r3, #4]
   142fc:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   14300:	lsl	r3, r3, #1
   14304:	add	r3, r2, r3
   14308:	ldr	r2, [fp, #-8]
   1430c:	uxth	r2, r2
   14310:	add	r2, r2, #4
   14314:	uxth	r2, r2
   14318:	strh	r2, [r3]
   1431c:	ldr	r3, [fp, #-16]
   14320:	ldrh	r3, [r3, #8]
   14324:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   14328:	cmp	r2, r3
   1432c:	bcc	14344 <flatcc_builder_default_alloc@@Base+0x530>
   14330:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   14334:	add	r3, r3, #1
   14338:	uxth	r2, r3
   1433c:	ldr	r3, [fp, #-16]
   14340:	strh	r2, [r3, #8]
   14344:	ldr	r3, [fp, #-16]
   14348:	ldr	r2, [r3, #16]
   1434c:	ldr	r3, [fp, #-8]
   14350:	add	r3, r2, r3
   14354:	mov	r0, r3
   14358:	sub	sp, fp, #4
   1435c:	pop	{fp, pc}
   14360:	strdeq	pc, [r0], -ip
   14364:	push	{fp, lr}
   14368:	add	fp, sp, #4
   1436c:	sub	sp, sp, #16
   14370:	str	r0, [fp, #-16]
   14374:	mov	r3, r1
   14378:	strh	r3, [fp, #-18]	; 0xffffffee
   1437c:	ldr	r3, [fp, #-16]
   14380:	ldr	r3, [r3, #20]
   14384:	add	r3, r3, #3
   14388:	bic	r3, r3, #3
   1438c:	str	r3, [fp, #-8]
   14390:	ldr	r3, [fp, #-8]
   14394:	add	r2, r3, #4
   14398:	ldr	r3, [fp, #-16]
   1439c:	str	r2, [r3, #20]
   143a0:	ldr	r3, [fp, #-16]
   143a4:	ldr	r2, [r3, #20]
   143a8:	ldr	r3, [fp, #-16]
   143ac:	ldr	r3, [r3, #24]
   143b0:	cmp	r2, r3
   143b4:	bls	143e4 <flatcc_builder_default_alloc@@Base+0x5d0>
   143b8:	ldr	r3, [fp, #-16]
   143bc:	ldr	r3, [r3, #20]
   143c0:	ldr	r2, [pc, #168]	; 14470 <flatcc_builder_default_alloc@@Base+0x65c>
   143c4:	mov	r1, r3
   143c8:	ldr	r0, [fp, #-16]
   143cc:	bl	14078 <flatcc_builder_default_alloc@@Base+0x264>
   143d0:	mov	r3, r0
   143d4:	cmp	r3, #0
   143d8:	beq	143e4 <flatcc_builder_default_alloc@@Base+0x5d0>
   143dc:	mov	r3, #0
   143e0:	b	14464 <flatcc_builder_default_alloc@@Base+0x650>
   143e4:	ldr	r3, [fp, #-16]
   143e8:	ldr	r2, [r3, #4]
   143ec:	ldrh	r3, [fp, #-18]	; 0xffffffee
   143f0:	lsl	r3, r3, #1
   143f4:	add	r3, r2, r3
   143f8:	ldr	r2, [fp, #-8]
   143fc:	uxth	r2, r2
   14400:	add	r2, r2, #4
   14404:	uxth	r2, r2
   14408:	strh	r2, [r3]
   1440c:	ldr	r3, [fp, #-16]
   14410:	ldrh	r3, [r3, #8]
   14414:	ldrh	r2, [fp, #-18]	; 0xffffffee
   14418:	cmp	r2, r3
   1441c:	bcc	14434 <flatcc_builder_default_alloc@@Base+0x620>
   14420:	ldrh	r3, [fp, #-18]	; 0xffffffee
   14424:	add	r3, r3, #1
   14428:	uxth	r2, r3
   1442c:	ldr	r3, [fp, #-16]
   14430:	strh	r2, [r3, #8]
   14434:	ldr	r3, [fp, #-16]
   14438:	ldr	r3, [r3]
   1443c:	add	r1, r3, #2
   14440:	ldr	r2, [fp, #-16]
   14444:	str	r1, [r2]
   14448:	ldr	r2, [fp, #-8]
   1444c:	uxth	r2, r2
   14450:	strh	r2, [r3]
   14454:	ldr	r3, [fp, #-16]
   14458:	ldr	r2, [r3, #16]
   1445c:	ldr	r3, [fp, #-8]
   14460:	add	r3, r2, r3
   14464:	mov	r0, r3
   14468:	sub	sp, fp, #4
   1446c:	pop	{fp, pc}
   14470:	strdeq	pc, [r0], -ip
   14474:	push	{r4, fp, lr}
   14478:	add	fp, sp, #8
   1447c:	sub	sp, sp, #36	; 0x24
   14480:	str	r0, [fp, #-24]	; 0xffffffe8
   14484:	str	r1, [fp, #-28]	; 0xffffffe4
   14488:	str	r2, [fp, #-32]	; 0xffffffe0
   1448c:	str	r3, [fp, #-36]	; 0xffffffdc
   14490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14494:	add	r2, r3, #52	; 0x34
   14498:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1449c:	lsl	r3, r3, #3
   144a0:	add	r3, r2, r3
   144a4:	str	r3, [fp, #-16]
   144a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   144b0:	add	r2, r2, r3
   144b4:	ldr	r3, [fp, #-16]
   144b8:	ldr	r3, [r3, #4]
   144bc:	cmp	r2, r3
   144c0:	bls	14520 <flatcc_builder_default_alloc@@Base+0x70c>
   144c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144c8:	ldr	r4, [r3, #48]	; 0x30
   144cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144d0:	ldr	r0, [r3, #40]	; 0x28
   144d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   144dc:	add	r2, r2, r3
   144e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   144e4:	str	r3, [sp]
   144e8:	ldr	r3, [fp, #4]
   144ec:	ldr	r1, [fp, #-16]
   144f0:	blx	r4
   144f4:	mov	r3, r0
   144f8:	cmp	r3, #0
   144fc:	beq	14520 <flatcc_builder_default_alloc@@Base+0x70c>
   14500:	ldr	r3, [pc, #56]	; 14540 <flatcc_builder_default_alloc@@Base+0x72c>
   14504:	add	r3, pc, r3
   14508:	mov	r2, #308	; 0x134
   1450c:	ldr	r1, [pc, #48]	; 14544 <flatcc_builder_default_alloc@@Base+0x730>
   14510:	add	r1, pc, r1
   14514:	ldr	r0, [pc, #44]	; 14548 <flatcc_builder_default_alloc@@Base+0x734>
   14518:	add	r0, pc, r0
   1451c:	bl	1234c <__assert_fail@plt>
   14520:	ldr	r3, [fp, #-16]
   14524:	ldr	r3, [r3]
   14528:	mov	r2, r3
   1452c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14530:	add	r3, r2, r3
   14534:	mov	r0, r3
   14538:	sub	sp, fp, #8
   1453c:	pop	{r4, fp, pc}
   14540:	andeq	r9, r0, r4, lsr #4
   14544:	andeq	r8, r0, r4, ror #27
   14548:	andeq	r8, r0, ip, lsr lr
   1454c:	push	{fp, lr}
   14550:	add	fp, sp, #4
   14554:	sub	sp, sp, #24
   14558:	str	r0, [fp, #-16]
   1455c:	str	r1, [fp, #-20]	; 0xffffffec
   14560:	ldr	r3, [fp, #-16]
   14564:	ldr	r3, [r3, #32]
   14568:	ldr	r2, [r3, #16]
   1456c:	ldr	r3, [fp, #-16]
   14570:	ldr	r3, [r3, #32]
   14574:	ldrh	r3, [r3, #28]
   14578:	lsl	r3, r3, #1
   1457c:	add	r3, r2, r3
   14580:	str	r3, [fp, #-8]
   14584:	ldr	r3, [fp, #-20]	; 0xffffffec
   14588:	add	r3, r3, #2
   1458c:	lsl	r3, r3, #1
   14590:	str	r3, [fp, #-12]
   14594:	mov	r3, #1
   14598:	str	r3, [sp]
   1459c:	ldr	r3, [fp, #-12]
   145a0:	ldr	r2, [fp, #-8]
   145a4:	mov	r1, #0
   145a8:	ldr	r0, [fp, #-16]
   145ac:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   145b0:	mov	r2, r0
   145b4:	ldr	r3, [fp, #-16]
   145b8:	str	r2, [r3, #4]
   145bc:	ldr	r3, [fp, #-16]
   145c0:	ldr	r3, [r3, #4]
   145c4:	cmp	r3, #0
   145c8:	bne	145d4 <flatcc_builder_default_alloc@@Base+0x7c0>
   145cc:	mvn	r3, #0
   145d0:	b	1464c <flatcc_builder_default_alloc@@Base+0x838>
   145d4:	ldr	r3, [fp, #-16]
   145d8:	ldr	r3, [r3, #4]
   145dc:	add	r2, r3, #4
   145e0:	ldr	r3, [fp, #-16]
   145e4:	str	r2, [r3, #4]
   145e8:	ldr	r3, [fp, #-16]
   145ec:	ldr	r3, [r3, #32]
   145f0:	ldr	r3, [r3, #20]
   145f4:	str	r3, [fp, #-8]
   145f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145fc:	lsl	r3, r3, #1
   14600:	add	r3, r3, #1
   14604:	str	r3, [fp, #-12]
   14608:	mov	r3, #0
   1460c:	str	r3, [sp]
   14610:	ldr	r3, [fp, #-12]
   14614:	ldr	r2, [fp, #-8]
   14618:	mov	r1, #3
   1461c:	ldr	r0, [fp, #-16]
   14620:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   14624:	mov	r2, r0
   14628:	ldr	r3, [fp, #-16]
   1462c:	str	r2, [r3]
   14630:	ldr	r3, [fp, #-16]
   14634:	ldr	r3, [r3]
   14638:	cmp	r3, #0
   1463c:	bne	14648 <flatcc_builder_default_alloc@@Base+0x834>
   14640:	mvn	r3, #0
   14644:	b	1464c <flatcc_builder_default_alloc@@Base+0x838>
   14648:	mov	r3, #0
   1464c:	mov	r0, r3
   14650:	sub	sp, fp, #4
   14654:	pop	{fp, pc}
   14658:	push	{r4, fp, lr}
   1465c:	add	fp, sp, #8
   14660:	sub	sp, sp, #36	; 0x24
   14664:	str	r0, [fp, #-32]	; 0xffffffe0
   14668:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1466c:	add	r3, r3, #52	; 0x34
   14670:	add	r3, r3, #40	; 0x28
   14674:	str	r3, [fp, #-24]	; 0xffffffe8
   14678:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1467c:	ldr	r3, [r3, #124]	; 0x7c
   14680:	cmp	r3, #0
   14684:	beq	146a8 <flatcc_builder_default_alloc@@Base+0x894>
   14688:	ldr	r3, [pc, #280]	; 147a8 <flatcc_builder_default_alloc@@Base+0x994>
   1468c:	add	r3, pc, r3
   14690:	ldr	r2, [pc, #276]	; 147ac <flatcc_builder_default_alloc@@Base+0x998>
   14694:	ldr	r1, [pc, #276]	; 147b0 <flatcc_builder_default_alloc@@Base+0x99c>
   14698:	add	r1, pc, r1
   1469c:	ldr	r0, [pc, #272]	; 147b4 <flatcc_builder_default_alloc@@Base+0x9a0>
   146a0:	add	r0, pc, r0
   146a4:	bl	1234c <__assert_fail@plt>
   146a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146ac:	ldr	r2, [r3, #124]	; 0x7c
   146b0:	mov	r3, #0
   146b4:	str	r3, [sp]
   146b8:	mov	r3, #16
   146bc:	mov	r1, #6
   146c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146c4:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   146c8:	mov	r3, r0
   146cc:	cmp	r3, #0
   146d0:	bne	146dc <flatcc_builder_default_alloc@@Base+0x8c8>
   146d4:	mvn	r3, #0
   146d8:	b	1479c <flatcc_builder_default_alloc@@Base+0x988>
   146dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146e0:	mov	r2, #16
   146e4:	str	r2, [r3, #124]	; 0x7c
   146e8:	mov	r3, #256	; 0x100
   146ec:	str	r3, [fp, #-16]
   146f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146f4:	ldr	r4, [r3, #48]	; 0x30
   146f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146fc:	ldr	r0, [r3, #40]	; 0x28
   14700:	mov	r3, #5
   14704:	str	r3, [sp]
   14708:	mov	r3, #1
   1470c:	ldr	r2, [fp, #-16]
   14710:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14714:	blx	r4
   14718:	mov	r3, r0
   1471c:	cmp	r3, #0
   14720:	beq	14738 <flatcc_builder_default_alloc@@Base+0x924>
   14724:	mvn	r3, #0
   14728:	b	1479c <flatcc_builder_default_alloc@@Base+0x988>
   1472c:	ldr	r3, [fp, #-16]
   14730:	lsl	r3, r3, #1
   14734:	str	r3, [fp, #-16]
   14738:	ldr	r3, [fp, #-16]
   1473c:	lsl	r2, r3, #1
   14740:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14744:	ldr	r3, [r3, #4]
   14748:	cmp	r2, r3
   1474c:	bls	1472c <flatcc_builder_default_alloc@@Base+0x918>
   14750:	ldr	r3, [fp, #-16]
   14754:	lsr	r3, r3, #2
   14758:	str	r3, [fp, #-16]
   1475c:	mov	r3, #0
   14760:	str	r3, [fp, #-20]	; 0xffffffec
   14764:	b	14774 <flatcc_builder_default_alloc@@Base+0x960>
   14768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1476c:	add	r3, r3, #1
   14770:	str	r3, [fp, #-20]	; 0xffffffec
   14774:	mov	r2, #1
   14778:	ldr	r3, [fp, #-20]	; 0xffffffec
   1477c:	lsl	r2, r2, r3
   14780:	ldr	r3, [fp, #-16]
   14784:	cmp	r2, r3
   14788:	bcc	14768 <flatcc_builder_default_alloc@@Base+0x954>
   1478c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14790:	ldr	r2, [fp, #-20]	; 0xffffffec
   14794:	str	r2, [r3, #116]	; 0x74
   14798:	mov	r3, #0
   1479c:	mov	r0, r3
   147a0:	sub	sp, fp, #8
   147a4:	pop	{r4, fp, pc}
   147a8:	muleq	r0, r0, r0
   147ac:	andeq	r0, r0, r6, asr r1
   147b0:	andeq	r8, r0, ip, asr ip
   147b4:			; <UNDEFINED> instruction: 0x00008cb8
   147b8:	push	{fp, lr}
   147bc:	add	fp, sp, #4
   147c0:	sub	sp, sp, #16
   147c4:	str	r0, [fp, #-16]
   147c8:	str	r1, [fp, #-20]	; 0xffffffec
   147cc:	ldr	r3, [fp, #-16]
   147d0:	ldr	r3, [r3, #116]	; 0x74
   147d4:	cmp	r3, #0
   147d8:	bne	147f8 <flatcc_builder_default_alloc@@Base+0x9e4>
   147dc:	ldr	r0, [fp, #-16]
   147e0:	bl	14658 <flatcc_builder_default_alloc@@Base+0x844>
   147e4:	mov	r3, r0
   147e8:	cmp	r3, #0
   147ec:	beq	147f8 <flatcc_builder_default_alloc@@Base+0x9e4>
   147f0:	mov	r3, #0
   147f4:	b	14824 <flatcc_builder_default_alloc@@Base+0xa10>
   147f8:	ldr	r3, [fp, #-16]
   147fc:	ldr	r3, [r3, #92]	; 0x5c
   14800:	str	r3, [fp, #-8]
   14804:	ldr	r3, [fp, #-16]
   14808:	ldr	r3, [r3, #116]	; 0x74
   1480c:	rsb	r3, r3, #32
   14810:	ldr	r2, [fp, #-20]	; 0xffffffec
   14814:	lsr	r3, r2, r3
   14818:	lsl	r3, r3, #2
   1481c:	ldr	r2, [fp, #-8]
   14820:	add	r3, r2, r3
   14824:	mov	r0, r3
   14828:	sub	sp, fp, #4
   1482c:	pop	{fp, pc}

00014830 <flatcc_builder_flush_vtable_cache@@Base>:
   14830:	push	{fp, lr}
   14834:	add	fp, sp, #4
   14838:	sub	sp, sp, #16
   1483c:	str	r0, [fp, #-16]
   14840:	ldr	r3, [fp, #-16]
   14844:	add	r3, r3, #52	; 0x34
   14848:	add	r3, r3, #40	; 0x28
   1484c:	str	r3, [fp, #-8]
   14850:	ldr	r3, [fp, #-16]
   14854:	ldr	r3, [r3, #116]	; 0x74
   14858:	cmp	r3, #0
   1485c:	beq	14898 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   14860:	ldr	r3, [fp, #-8]
   14864:	ldr	r0, [r3]
   14868:	ldr	r3, [fp, #-8]
   1486c:	ldr	r3, [r3, #4]
   14870:	mov	r2, r3
   14874:	mov	r1, #0
   14878:	bl	1231c <memset@plt>
   1487c:	ldr	r3, [fp, #-16]
   14880:	mov	r2, #16
   14884:	str	r2, [r3, #124]	; 0x7c
   14888:	ldr	r3, [fp, #-16]
   1488c:	mov	r2, #0
   14890:	str	r2, [r3, #120]	; 0x78
   14894:	b	1489c <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   14898:	nop			; (mov r0, r0)
   1489c:	sub	sp, fp, #4
   148a0:	pop	{fp, pc}

000148a4 <flatcc_builder_custom_init@@Base>:
   148a4:	push	{r4, fp, lr}
   148a8:	add	fp, sp, #8
   148ac:	sub	sp, sp, #20
   148b0:	str	r0, [fp, #-16]
   148b4:	str	r1, [fp, #-20]	; 0xffffffec
   148b8:	str	r2, [fp, #-24]	; 0xffffffe8
   148bc:	str	r3, [fp, #-28]	; 0xffffffe4
   148c0:	ldr	r4, [pc, #152]	; 14960 <flatcc_builder_custom_init@@Base+0xbc>
   148c4:	add	r4, pc, r4
   148c8:	mov	r2, #232	; 0xe8
   148cc:	mov	r1, #0
   148d0:	ldr	r0, [fp, #-16]
   148d4:	bl	1231c <memset@plt>
   148d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148dc:	cmp	r3, #0
   148e0:	bne	14908 <flatcc_builder_custom_init@@Base+0x64>
   148e4:	ldr	r3, [fp, #-16]
   148e8:	mov	r2, #1
   148ec:	str	r2, [r3, #184]	; 0xb8
   148f0:	ldr	r3, [pc, #108]	; 14964 <flatcc_builder_custom_init@@Base+0xc0>
   148f4:	ldr	r3, [r4, r3]
   148f8:	str	r3, [fp, #-20]	; 0xffffffec
   148fc:	ldr	r3, [fp, #-16]
   14900:	add	r3, r3, #188	; 0xbc
   14904:	str	r3, [fp, #-24]	; 0xffffffe8
   14908:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1490c:	cmp	r3, #0
   14910:	bne	14920 <flatcc_builder_custom_init@@Base+0x7c>
   14914:	ldr	r3, [pc, #76]	; 14968 <flatcc_builder_custom_init@@Base+0xc4>
   14918:	ldr	r3, [r4, r3]
   1491c:	str	r3, [fp, #-28]	; 0xffffffe4
   14920:	ldr	r3, [fp, #-16]
   14924:	ldr	r2, [fp, #4]
   14928:	str	r2, [r3, #40]	; 0x28
   1492c:	ldr	r3, [fp, #-16]
   14930:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14934:	str	r2, [r3, #48]	; 0x30
   14938:	ldr	r3, [fp, #-16]
   1493c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14940:	str	r2, [r3, #36]	; 0x24
   14944:	ldr	r3, [fp, #-16]
   14948:	ldr	r2, [fp, #-20]	; 0xffffffec
   1494c:	str	r2, [r3, #44]	; 0x2c
   14950:	mov	r3, #0
   14954:	mov	r0, r3
   14958:	sub	sp, fp, #8
   1495c:	pop	{r4, fp, pc}
   14960:	andeq	sl, r1, r4, lsr r7
   14964:	andeq	r0, r0, r0, asr r0
   14968:	andeq	r0, r0, ip, asr #32

0001496c <flatcc_builder_init@@Base>:
   1496c:	push	{fp, lr}
   14970:	add	fp, sp, #4
   14974:	sub	sp, sp, #16
   14978:	str	r0, [fp, #-8]
   1497c:	mov	r3, #0
   14980:	str	r3, [sp]
   14984:	mov	r3, #0
   14988:	mov	r2, #0
   1498c:	mov	r1, #0
   14990:	ldr	r0, [fp, #-8]
   14994:	bl	148a4 <flatcc_builder_custom_init@@Base>
   14998:	mov	r3, r0
   1499c:	mov	r0, r3
   149a0:	sub	sp, fp, #4
   149a4:	pop	{fp, pc}

000149a8 <flatcc_builder_custom_reset@@Base>:
   149a8:	push	{r4, fp, lr}
   149ac:	add	fp, sp, #8
   149b0:	sub	sp, sp, #36	; 0x24
   149b4:	str	r0, [fp, #-24]	; 0xffffffe8
   149b8:	str	r1, [fp, #-28]	; 0xffffffe4
   149bc:	str	r2, [fp, #-32]	; 0xffffffe0
   149c0:	mov	r3, #0
   149c4:	str	r3, [fp, #-16]
   149c8:	b	14aa4 <flatcc_builder_custom_reset@@Base+0xfc>
   149cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149d0:	add	r2, r3, #52	; 0x34
   149d4:	ldr	r3, [fp, #-16]
   149d8:	lsl	r3, r3, #3
   149dc:	add	r3, r2, r3
   149e0:	str	r3, [fp, #-20]	; 0xffffffec
   149e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   149e8:	ldr	r3, [r3]
   149ec:	cmp	r3, #0
   149f0:	beq	14a68 <flatcc_builder_custom_reset@@Base+0xc0>
   149f4:	ldr	r3, [fp, #-16]
   149f8:	cmp	r3, #5
   149fc:	beq	14a48 <flatcc_builder_custom_reset@@Base+0xa0>
   14a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a04:	cmp	r3, #0
   14a08:	beq	14a48 <flatcc_builder_custom_reset@@Base+0xa0>
   14a0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a10:	ldr	r4, [r3, #48]	; 0x30
   14a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a18:	ldr	r0, [r3, #40]	; 0x28
   14a1c:	ldr	r3, [fp, #-16]
   14a20:	str	r3, [sp]
   14a24:	mov	r3, #1
   14a28:	mov	r2, #1
   14a2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a30:	blx	r4
   14a34:	mov	r3, r0
   14a38:	cmp	r3, #0
   14a3c:	beq	14a48 <flatcc_builder_custom_reset@@Base+0xa0>
   14a40:	mvn	r3, #0
   14a44:	b	14bd4 <flatcc_builder_custom_reset@@Base+0x22c>
   14a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a4c:	ldr	r0, [r3]
   14a50:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a54:	ldr	r3, [r3, #4]
   14a58:	mov	r2, r3
   14a5c:	mov	r1, #0
   14a60:	bl	1231c <memset@plt>
   14a64:	b	14a98 <flatcc_builder_custom_reset@@Base+0xf0>
   14a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a6c:	ldr	r3, [r3, #4]
   14a70:	cmp	r3, #0
   14a74:	beq	14a98 <flatcc_builder_custom_reset@@Base+0xf0>
   14a78:	ldr	r3, [pc, #352]	; 14be0 <flatcc_builder_custom_reset@@Base+0x238>
   14a7c:	add	r3, pc, r3
   14a80:	ldr	r2, [pc, #348]	; 14be4 <flatcc_builder_custom_reset@@Base+0x23c>
   14a84:	ldr	r1, [pc, #348]	; 14be8 <flatcc_builder_custom_reset@@Base+0x240>
   14a88:	add	r1, pc, r1
   14a8c:	ldr	r0, [pc, #344]	; 14bec <flatcc_builder_custom_reset@@Base+0x244>
   14a90:	add	r0, pc, r0
   14a94:	bl	1234c <__assert_fail@plt>
   14a98:	ldr	r3, [fp, #-16]
   14a9c:	add	r3, r3, #1
   14aa0:	str	r3, [fp, #-16]
   14aa4:	ldr	r3, [fp, #-16]
   14aa8:	cmp	r3, #7
   14aac:	ble	149cc <flatcc_builder_custom_reset@@Base+0x24>
   14ab0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ab4:	mov	r2, #0
   14ab8:	str	r2, [r3, #120]	; 0x78
   14abc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ac0:	ldr	r3, [r3, #124]	; 0x7c
   14ac4:	cmp	r3, #0
   14ac8:	beq	14ad8 <flatcc_builder_custom_reset@@Base+0x130>
   14acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ad0:	mov	r2, #16
   14ad4:	str	r2, [r3, #124]	; 0x7c
   14ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14adc:	mov	r2, #0
   14ae0:	strh	r2, [r3, #128]	; 0x80
   14ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ae8:	mov	r2, #0
   14aec:	str	r2, [r3, #136]	; 0x88
   14af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14af4:	mov	r2, #0
   14af8:	str	r2, [r3, #140]	; 0x8c
   14afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b00:	mov	r2, #0
   14b04:	str	r2, [r3, #156]	; 0x9c
   14b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b0c:	mov	r2, #0
   14b10:	str	r2, [r3, #160]	; 0xa0
   14b14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b18:	mov	r2, #0
   14b1c:	str	r2, [r3, #20]
   14b20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b24:	mov	r2, #0
   14b28:	str	r2, [r3, #24]
   14b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b30:	mov	r2, #0
   14b34:	str	r2, [r3, #148]	; 0x94
   14b38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b3c:	mov	r2, #0
   14b40:	str	r2, [r3, #152]	; 0x98
   14b44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b48:	ldr	r2, [r3, #60]	; 0x3c
   14b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b50:	str	r2, [r3, #16]
   14b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b58:	ldr	r2, [r3, #76]	; 0x4c
   14b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b60:	str	r2, [r3]
   14b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b68:	ldr	r2, [r3, #52]	; 0x34
   14b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b70:	str	r2, [r3, #4]
   14b74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b78:	mov	r2, #0
   14b7c:	str	r2, [r3, #32]
   14b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b84:	cmp	r3, #0
   14b88:	beq	14bb0 <flatcc_builder_custom_reset@@Base+0x208>
   14b8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b90:	mov	r2, #0
   14b94:	str	r2, [r3, #172]	; 0xac
   14b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b9c:	mov	r2, #0
   14ba0:	str	r2, [r3, #176]	; 0xb0
   14ba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ba8:	mov	r2, #0
   14bac:	str	r2, [r3, #180]	; 0xb4
   14bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bb4:	ldr	r3, [r3, #184]	; 0xb8
   14bb8:	cmp	r3, #0
   14bbc:	beq	14bd0 <flatcc_builder_custom_reset@@Base+0x228>
   14bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bc4:	add	r3, r3, #188	; 0xbc
   14bc8:	mov	r0, r3
   14bcc:	bl	1a4cc <flatcc_emitter_reset@@Base>
   14bd0:	mov	r3, #0
   14bd4:	mov	r0, r3
   14bd8:	sub	sp, fp, #8
   14bdc:	pop	{r4, fp, pc}
   14be0:			; <UNDEFINED> instruction: 0x00008cbc
   14be4:			; <UNDEFINED> instruction: 0x000001b2
   14be8:	andeq	r8, r0, ip, ror #16
   14bec:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>

00014bf0 <flatcc_builder_reset@@Base>:
   14bf0:	push	{fp, lr}
   14bf4:	add	fp, sp, #4
   14bf8:	sub	sp, sp, #8
   14bfc:	str	r0, [fp, #-8]
   14c00:	mov	r2, #0
   14c04:	mov	r1, #0
   14c08:	ldr	r0, [fp, #-8]
   14c0c:	bl	149a8 <flatcc_builder_custom_reset@@Base>
   14c10:	mov	r3, r0
   14c14:	mov	r0, r3
   14c18:	sub	sp, fp, #4
   14c1c:	pop	{fp, pc}

00014c20 <flatcc_builder_clear@@Base>:
   14c20:	push	{r4, fp, lr}
   14c24:	add	fp, sp, #8
   14c28:	sub	sp, sp, #28
   14c2c:	str	r0, [fp, #-24]	; 0xffffffe8
   14c30:	mov	r3, #0
   14c34:	str	r3, [fp, #-16]
   14c38:	b	14c88 <flatcc_builder_clear@@Base+0x68>
   14c3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c40:	add	r2, r3, #52	; 0x34
   14c44:	ldr	r3, [fp, #-16]
   14c48:	lsl	r3, r3, #3
   14c4c:	add	r3, r2, r3
   14c50:	str	r3, [fp, #-20]	; 0xffffffec
   14c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c58:	ldr	r4, [r3, #48]	; 0x30
   14c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c60:	ldr	r0, [r3, #40]	; 0x28
   14c64:	ldr	r3, [fp, #-16]
   14c68:	str	r3, [sp]
   14c6c:	mov	r3, #0
   14c70:	mov	r2, #0
   14c74:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c78:	blx	r4
   14c7c:	ldr	r3, [fp, #-16]
   14c80:	add	r3, r3, #1
   14c84:	str	r3, [fp, #-16]
   14c88:	ldr	r3, [fp, #-16]
   14c8c:	cmp	r3, #7
   14c90:	ble	14c3c <flatcc_builder_clear@@Base+0x1c>
   14c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c98:	ldr	r3, [r3, #184]	; 0xb8
   14c9c:	cmp	r3, #0
   14ca0:	beq	14cb4 <flatcc_builder_clear@@Base+0x94>
   14ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ca8:	add	r3, r3, #188	; 0xbc
   14cac:	mov	r0, r3
   14cb0:	bl	1a658 <flatcc_emitter_clear@@Base>
   14cb4:	mov	r2, #232	; 0xe8
   14cb8:	mov	r1, #0
   14cbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14cc0:	bl	1231c <memset@plt>
   14cc4:	nop			; (mov r0, r0)
   14cc8:	sub	sp, fp, #8
   14ccc:	pop	{r4, fp, pc}
   14cd0:	push	{fp}		; (str fp, [sp, #-4]!)
   14cd4:	add	fp, sp, #0
   14cd8:	sub	sp, sp, #12
   14cdc:	str	r0, [fp, #-8]
   14ce0:	mov	r3, r1
   14ce4:	strh	r3, [fp, #-10]
   14ce8:	ldr	r3, [fp, #-8]
   14cec:	ldrh	r3, [r3, #128]	; 0x80
   14cf0:	ldrh	r2, [fp, #-10]
   14cf4:	cmp	r2, r3
   14cf8:	bls	14d08 <flatcc_builder_clear@@Base+0xe8>
   14cfc:	ldr	r3, [fp, #-8]
   14d00:	ldrh	r2, [fp, #-10]
   14d04:	strh	r2, [r3, #128]	; 0x80
   14d08:	nop			; (mov r0, r0)
   14d0c:	add	sp, fp, #0
   14d10:	pop	{fp}		; (ldr fp, [sp], #4)
   14d14:	bx	lr
   14d18:	push	{fp}		; (str fp, [sp, #-4]!)
   14d1c:	add	fp, sp, #0
   14d20:	sub	sp, sp, #12
   14d24:	str	r0, [fp, #-8]
   14d28:	mov	r3, r1
   14d2c:	strh	r3, [fp, #-10]
   14d30:	ldr	r3, [fp, #-8]
   14d34:	ldrh	r3, [r3]
   14d38:	ldrh	r2, [fp, #-10]
   14d3c:	cmp	r2, r3
   14d40:	bls	14d50 <flatcc_builder_clear@@Base+0x130>
   14d44:	ldr	r3, [fp, #-8]
   14d48:	ldrh	r2, [fp, #-10]
   14d4c:	strh	r2, [r3]
   14d50:	nop			; (mov r0, r0)
   14d54:	add	sp, fp, #0
   14d58:	pop	{fp}		; (ldr fp, [sp], #4)
   14d5c:	bx	lr

00014d60 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14d60:	push	{fp, lr}
   14d64:	add	fp, sp, #4
   14d68:	sub	sp, sp, #24
   14d6c:	str	r0, [fp, #-16]
   14d70:	str	r1, [fp, #-20]	; 0xffffffec
   14d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d78:	add	r3, r3, #3
   14d7c:	bic	r3, r3, #3
   14d80:	add	r3, r3, #4
   14d84:	str	r3, [fp, #-20]	; 0xffffffec
   14d88:	ldr	r3, [fp, #-16]
   14d8c:	ldr	r2, [r3, #228]	; 0xe4
   14d90:	mov	r3, #0
   14d94:	str	r3, [sp]
   14d98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d9c:	mov	r1, #7
   14da0:	ldr	r0, [fp, #-16]
   14da4:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   14da8:	str	r0, [fp, #-8]
   14dac:	ldr	r3, [fp, #-8]
   14db0:	cmp	r3, #0
   14db4:	bne	14dc0 <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   14db8:	mov	r3, #0
   14dbc:	b	14e18 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   14dc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14dc4:	mov	r1, #0
   14dc8:	ldr	r0, [fp, #-8]
   14dcc:	bl	1231c <memset@plt>
   14dd0:	ldr	r3, [fp, #-8]
   14dd4:	add	r2, r3, #4
   14dd8:	str	r2, [fp, #-8]
   14ddc:	ldr	r2, [fp, #-16]
   14de0:	ldr	r2, [r2, #224]	; 0xe0
   14de4:	str	r2, [r3]
   14de8:	ldr	r3, [fp, #-16]
   14dec:	ldr	r3, [r3, #228]	; 0xe4
   14df0:	add	r2, r3, #4
   14df4:	ldr	r3, [fp, #-16]
   14df8:	str	r2, [r3, #224]	; 0xe0
   14dfc:	ldr	r3, [fp, #-16]
   14e00:	ldr	r2, [r3, #228]	; 0xe4
   14e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e08:	add	r2, r2, r3
   14e0c:	ldr	r3, [fp, #-16]
   14e10:	str	r2, [r3, #228]	; 0xe4
   14e14:	ldr	r3, [fp, #-8]
   14e18:	mov	r0, r3
   14e1c:	sub	sp, fp, #4
   14e20:	pop	{fp, pc}

00014e24 <flatcc_builder_enter_user_frame@@Base>:
   14e24:	push	{fp, lr}
   14e28:	add	fp, sp, #4
   14e2c:	sub	sp, sp, #24
   14e30:	str	r0, [fp, #-16]
   14e34:	str	r1, [fp, #-20]	; 0xffffffec
   14e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e3c:	add	r3, r3, #3
   14e40:	bic	r3, r3, #3
   14e44:	add	r3, r3, #4
   14e48:	str	r3, [fp, #-20]	; 0xffffffec
   14e4c:	ldr	r3, [fp, #-16]
   14e50:	ldr	r2, [r3, #228]	; 0xe4
   14e54:	mov	r3, #0
   14e58:	str	r3, [sp]
   14e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e60:	mov	r1, #7
   14e64:	ldr	r0, [fp, #-16]
   14e68:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   14e6c:	str	r0, [fp, #-8]
   14e70:	ldr	r3, [fp, #-8]
   14e74:	cmp	r3, #0
   14e78:	bne	14e84 <flatcc_builder_enter_user_frame@@Base+0x60>
   14e7c:	mov	r3, #0
   14e80:	b	14ee0 <flatcc_builder_enter_user_frame@@Base+0xbc>
   14e84:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e88:	mov	r1, #0
   14e8c:	ldr	r0, [fp, #-8]
   14e90:	bl	1231c <memset@plt>
   14e94:	ldr	r3, [fp, #-8]
   14e98:	add	r2, r3, #4
   14e9c:	str	r2, [fp, #-8]
   14ea0:	ldr	r2, [fp, #-16]
   14ea4:	ldr	r2, [r2, #224]	; 0xe0
   14ea8:	str	r2, [r3]
   14eac:	ldr	r3, [fp, #-16]
   14eb0:	ldr	r3, [r3, #228]	; 0xe4
   14eb4:	add	r2, r3, #4
   14eb8:	ldr	r3, [fp, #-16]
   14ebc:	str	r2, [r3, #224]	; 0xe0
   14ec0:	ldr	r3, [fp, #-16]
   14ec4:	ldr	r2, [r3, #228]	; 0xe4
   14ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ecc:	add	r2, r2, r3
   14ed0:	ldr	r3, [fp, #-16]
   14ed4:	str	r2, [r3, #228]	; 0xe4
   14ed8:	ldr	r3, [fp, #-16]
   14edc:	ldr	r3, [r3, #224]	; 0xe0
   14ee0:	mov	r0, r3
   14ee4:	sub	sp, fp, #4
   14ee8:	pop	{fp, pc}

00014eec <flatcc_builder_exit_user_frame@@Base>:
   14eec:	push	{fp, lr}
   14ef0:	add	fp, sp, #4
   14ef4:	sub	sp, sp, #16
   14ef8:	str	r0, [fp, #-16]
   14efc:	ldr	r3, [fp, #-16]
   14f00:	ldr	r3, [r3, #224]	; 0xe0
   14f04:	cmp	r3, #0
   14f08:	bne	14f2c <flatcc_builder_exit_user_frame@@Base+0x40>
   14f0c:	ldr	r3, [pc, #104]	; 14f7c <flatcc_builder_exit_user_frame@@Base+0x90>
   14f10:	add	r3, pc, r3
   14f14:	ldr	r2, [pc, #100]	; 14f80 <flatcc_builder_exit_user_frame@@Base+0x94>
   14f18:	ldr	r1, [pc, #100]	; 14f84 <flatcc_builder_exit_user_frame@@Base+0x98>
   14f1c:	add	r1, pc, r1
   14f20:	ldr	r0, [pc, #96]	; 14f88 <flatcc_builder_exit_user_frame@@Base+0x9c>
   14f24:	add	r0, pc, r0
   14f28:	bl	1234c <__assert_fail@plt>
   14f2c:	ldr	r3, [fp, #-16]
   14f30:	ldr	r2, [r3, #108]	; 0x6c
   14f34:	ldr	r3, [fp, #-16]
   14f38:	ldr	r3, [r3, #224]	; 0xe0
   14f3c:	add	r3, r2, r3
   14f40:	str	r3, [fp, #-8]
   14f44:	ldr	r3, [fp, #-16]
   14f48:	ldr	r3, [r3, #224]	; 0xe0
   14f4c:	sub	r2, r3, #4
   14f50:	ldr	r3, [fp, #-16]
   14f54:	str	r2, [r3, #228]	; 0xe4
   14f58:	ldr	r3, [fp, #-8]
   14f5c:	ldr	r2, [r3, #-4]
   14f60:	ldr	r3, [fp, #-16]
   14f64:	str	r2, [r3, #224]	; 0xe0
   14f68:	ldr	r3, [fp, #-16]
   14f6c:	ldr	r3, [r3, #224]	; 0xe0
   14f70:	mov	r0, r3
   14f74:	sub	sp, fp, #4
   14f78:	pop	{fp, pc}
   14f7c:	andeq	r8, r0, r4, asr #16
   14f80:	andeq	r0, r0, lr, lsl r2
   14f84:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   14f88:	andeq	r8, r0, r8, asr r4

00014f8c <flatcc_builder_exit_user_frame_at@@Base>:
   14f8c:	push	{fp, lr}
   14f90:	add	fp, sp, #4
   14f94:	sub	sp, sp, #8
   14f98:	str	r0, [fp, #-8]
   14f9c:	str	r1, [fp, #-12]
   14fa0:	ldr	r3, [fp, #-8]
   14fa4:	ldr	r2, [r3, #224]	; 0xe0
   14fa8:	ldr	r3, [fp, #-12]
   14fac:	cmp	r2, r3
   14fb0:	bcs	14fd4 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14fb4:	ldr	r3, [pc, #60]	; 14ff8 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   14fb8:	add	r3, pc, r3
   14fbc:	ldr	r2, [pc, #56]	; 14ffc <flatcc_builder_exit_user_frame_at@@Base+0x70>
   14fc0:	ldr	r1, [pc, #56]	; 15000 <flatcc_builder_exit_user_frame_at@@Base+0x74>
   14fc4:	add	r1, pc, r1
   14fc8:	ldr	r0, [pc, #52]	; 15004 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   14fcc:	add	r0, pc, r0
   14fd0:	bl	1234c <__assert_fail@plt>
   14fd4:	ldr	r3, [fp, #-8]
   14fd8:	ldr	r2, [fp, #-12]
   14fdc:	str	r2, [r3, #224]	; 0xe0
   14fe0:	ldr	r0, [fp, #-8]
   14fe4:	bl	14eec <flatcc_builder_exit_user_frame@@Base>
   14fe8:	mov	r3, r0
   14fec:	mov	r0, r3
   14ff0:	sub	sp, fp, #4
   14ff4:	pop	{fp, pc}
   14ff8:			; <UNDEFINED> instruction: 0x000087bc
   14ffc:	andeq	r0, r0, r7, lsr #4
   15000:	andeq	r8, r0, r0, lsr r3
   15004:	andeq	r8, r0, ip, asr #7

00015008 <flatcc_builder_get_current_user_frame@@Base>:
   15008:	push	{fp}		; (str fp, [sp, #-4]!)
   1500c:	add	fp, sp, #0
   15010:	sub	sp, sp, #12
   15014:	str	r0, [fp, #-8]
   15018:	ldr	r3, [fp, #-8]
   1501c:	ldr	r3, [r3, #224]	; 0xe0
   15020:	mov	r0, r3
   15024:	add	sp, fp, #0
   15028:	pop	{fp}		; (ldr fp, [sp], #4)
   1502c:	bx	lr

00015030 <flatcc_builder_get_user_frame_ptr@@Base>:
   15030:	push	{fp}		; (str fp, [sp, #-4]!)
   15034:	add	fp, sp, #0
   15038:	sub	sp, sp, #12
   1503c:	str	r0, [fp, #-8]
   15040:	str	r1, [fp, #-12]
   15044:	ldr	r3, [fp, #-8]
   15048:	ldr	r2, [r3, #108]	; 0x6c
   1504c:	ldr	r3, [fp, #-12]
   15050:	add	r3, r2, r3
   15054:	mov	r0, r3
   15058:	add	sp, fp, #0
   1505c:	pop	{fp}		; (ldr fp, [sp], #4)
   15060:	bx	lr
   15064:	push	{fp, lr}
   15068:	add	fp, sp, #4
   1506c:	sub	sp, sp, #16
   15070:	str	r0, [fp, #-8]
   15074:	mov	r3, r1
   15078:	strh	r3, [fp, #-10]
   1507c:	ldr	r3, [fp, #-8]
   15080:	ldr	r3, [r3, #156]	; 0x9c
   15084:	add	r2, r3, #1
   15088:	ldr	r3, [fp, #-8]
   1508c:	str	r2, [r3, #156]	; 0x9c
   15090:	ldr	r3, [fp, #-8]
   15094:	ldr	r2, [r3, #156]	; 0x9c
   15098:	ldr	r3, [fp, #-8]
   1509c:	ldr	r3, [r3, #160]	; 0xa0
   150a0:	cmp	r2, r3
   150a4:	ble	15194 <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   150a8:	ldr	r3, [fp, #-8]
   150ac:	ldr	r3, [r3, #176]	; 0xb0
   150b0:	cmp	r3, #0
   150b4:	ble	150d8 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   150b8:	ldr	r3, [fp, #-8]
   150bc:	ldr	r2, [r3, #156]	; 0x9c
   150c0:	ldr	r3, [fp, #-8]
   150c4:	ldr	r3, [r3, #176]	; 0xb0
   150c8:	cmp	r2, r3
   150cc:	ble	150d8 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   150d0:	mvn	r3, #0
   150d4:	b	15234 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   150d8:	ldr	r3, [fp, #-8]
   150dc:	ldr	r3, [r3, #156]	; 0x9c
   150e0:	sub	r3, r3, #1
   150e4:	mov	r2, r3
   150e8:	mov	r3, r2
   150ec:	lsl	r3, r3, #3
   150f0:	add	r3, r3, r2
   150f4:	lsl	r3, r3, #2
   150f8:	mov	r2, r3
   150fc:	mov	r3, #0
   15100:	str	r3, [sp]
   15104:	mov	r3, #36	; 0x24
   15108:	mov	r1, #4
   1510c:	ldr	r0, [fp, #-8]
   15110:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   15114:	mov	r2, r0
   15118:	ldr	r3, [fp, #-8]
   1511c:	str	r2, [r3, #32]
   15120:	ldr	r3, [fp, #-8]
   15124:	ldr	r3, [r3, #32]
   15128:	cmp	r3, #0
   1512c:	bne	15138 <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   15130:	mvn	r3, #0
   15134:	b	15234 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   15138:	ldr	r3, [fp, #-8]
   1513c:	ldr	r3, [r3, #88]	; 0x58
   15140:	ldr	r2, [pc, #248]	; 15240 <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   15144:	umull	r2, r3, r2, r3
   15148:	lsr	r3, r3, #3
   1514c:	mov	r2, r3
   15150:	ldr	r3, [fp, #-8]
   15154:	str	r2, [r3, #160]	; 0xa0
   15158:	ldr	r3, [fp, #-8]
   1515c:	ldr	r3, [r3, #176]	; 0xb0
   15160:	cmp	r3, #0
   15164:	ble	151a8 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   15168:	ldr	r3, [fp, #-8]
   1516c:	ldr	r2, [r3, #176]	; 0xb0
   15170:	ldr	r3, [fp, #-8]
   15174:	ldr	r3, [r3, #160]	; 0xa0
   15178:	cmp	r2, r3
   1517c:	bge	151a8 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   15180:	ldr	r3, [fp, #-8]
   15184:	ldr	r2, [r3, #176]	; 0xb0
   15188:	ldr	r3, [fp, #-8]
   1518c:	str	r2, [r3, #160]	; 0xa0
   15190:	b	151a8 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   15194:	ldr	r3, [fp, #-8]
   15198:	ldr	r3, [r3, #32]
   1519c:	add	r2, r3, #36	; 0x24
   151a0:	ldr	r3, [fp, #-8]
   151a4:	str	r2, [r3, #32]
   151a8:	ldr	r3, [fp, #-8]
   151ac:	ldr	r3, [r3, #32]
   151b0:	ldr	r2, [fp, #-8]
   151b4:	ldr	r2, [r2, #20]
   151b8:	str	r2, [r3, #8]
   151bc:	ldr	r3, [fp, #-8]
   151c0:	ldr	r3, [r3, #32]
   151c4:	ldr	r2, [fp, #-8]
   151c8:	ldrh	r2, [r2, #130]	; 0x82
   151cc:	strh	r2, [r3, #12]
   151d0:	ldr	r3, [fp, #-8]
   151d4:	ldrh	r2, [fp, #-10]
   151d8:	strh	r2, [r3, #130]	; 0x82
   151dc:	ldr	r3, [fp, #-8]
   151e0:	ldr	r3, [r3, #32]
   151e4:	ldr	r2, [fp, #-8]
   151e8:	ldr	r2, [r2, #28]
   151ec:	str	r2, [r3]
   151f0:	ldr	r3, [fp, #-8]
   151f4:	ldr	r3, [r3, #32]
   151f8:	mvn	r2, #3
   151fc:	str	r2, [r3, #4]
   15200:	ldr	r3, [fp, #-8]
   15204:	ldr	r2, [r3, #28]
   15208:	ldr	r3, [fp, #-8]
   1520c:	ldr	r3, [r3, #20]
   15210:	add	r3, r2, r3
   15214:	add	r3, r3, #7
   15218:	bic	r2, r3, #7
   1521c:	ldr	r3, [fp, #-8]
   15220:	str	r2, [r3, #28]
   15224:	ldr	r3, [fp, #-8]
   15228:	mov	r2, #0
   1522c:	str	r2, [r3, #20]
   15230:	mov	r3, #0
   15234:	mov	r0, r3
   15238:	sub	sp, fp, #4
   1523c:	pop	{fp, pc}
   15240:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15244:	push	{fp, lr}
   15248:	add	fp, sp, #4
   1524c:	sub	sp, sp, #8
   15250:	str	r0, [fp, #-8]
   15254:	ldr	r3, [fp, #-8]
   15258:	ldr	r0, [r3, #16]
   1525c:	ldr	r3, [fp, #-8]
   15260:	ldr	r3, [r3, #20]
   15264:	mov	r2, r3
   15268:	mov	r1, #0
   1526c:	bl	1231c <memset@plt>
   15270:	ldr	r3, [fp, #-8]
   15274:	ldr	r3, [r3, #32]
   15278:	ldr	r2, [r3, #8]
   1527c:	ldr	r3, [fp, #-8]
   15280:	str	r2, [r3, #20]
   15284:	ldr	r3, [fp, #-8]
   15288:	ldr	r3, [r3, #32]
   1528c:	ldr	r2, [r3]
   15290:	ldr	r3, [fp, #-8]
   15294:	str	r2, [r3, #28]
   15298:	ldr	r3, [fp, #-8]
   1529c:	ldr	r3, [r3, #32]
   152a0:	ldr	r3, [r3, #4]
   152a4:	mov	r1, r3
   152a8:	ldr	r0, [fp, #-8]
   152ac:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   152b0:	ldr	r3, [fp, #-8]
   152b4:	ldrh	r3, [r3, #130]	; 0x82
   152b8:	mov	r1, r3
   152bc:	ldr	r0, [fp, #-8]
   152c0:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   152c4:	ldr	r3, [fp, #-8]
   152c8:	ldr	r3, [r3, #32]
   152cc:	ldrh	r2, [r3, #12]
   152d0:	ldr	r3, [fp, #-8]
   152d4:	strh	r2, [r3, #130]	; 0x82
   152d8:	ldr	r3, [fp, #-8]
   152dc:	ldr	r3, [r3, #32]
   152e0:	sub	r2, r3, #36	; 0x24
   152e4:	ldr	r3, [fp, #-8]
   152e8:	str	r2, [r3, #32]
   152ec:	ldr	r3, [fp, #-8]
   152f0:	ldr	r3, [r3, #156]	; 0x9c
   152f4:	sub	r2, r3, #1
   152f8:	ldr	r3, [fp, #-8]
   152fc:	str	r2, [r3, #156]	; 0x9c
   15300:	nop			; (mov r0, r0)
   15304:	sub	sp, fp, #4
   15308:	pop	{fp, pc}
   1530c:	push	{fp}		; (str fp, [sp, #-4]!)
   15310:	add	fp, sp, #0
   15314:	sub	sp, sp, #20
   15318:	str	r0, [fp, #-8]
   1531c:	str	r1, [fp, #-12]
   15320:	mov	r3, r2
   15324:	strh	r3, [fp, #-14]
   15328:	ldr	r3, [fp, #-8]
   1532c:	ldr	r3, [r3, #136]	; 0x88
   15330:	mov	r2, r3
   15334:	ldr	r3, [fp, #-12]
   15338:	sub	r3, r2, r3
   1533c:	ldrh	r2, [fp, #-14]
   15340:	sub	r2, r2, #1
   15344:	and	r3, r3, r2
   15348:	mov	r0, r3
   1534c:	add	sp, fp, #0
   15350:	pop	{fp}		; (ldr fp, [sp], #4)
   15354:	bx	lr
   15358:	push	{fp}		; (str fp, [sp, #-4]!)
   1535c:	add	fp, sp, #0
   15360:	sub	sp, sp, #12
   15364:	str	r0, [fp, #-8]
   15368:	mov	r3, r1
   1536c:	strh	r3, [fp, #-10]
   15370:	ldr	r3, [fp, #-8]
   15374:	ldr	r2, [r3, #140]	; 0x8c
   15378:	ldrh	r3, [fp, #-10]
   1537c:	sub	r3, r3, #1
   15380:	and	r3, r3, r2
   15384:	mov	r0, r3
   15388:	add	sp, fp, #0
   1538c:	pop	{fp}		; (ldr fp, [sp], #4)
   15390:	bx	lr
   15394:	push	{r4, fp, lr}
   15398:	add	fp, sp, #8
   1539c:	sub	sp, sp, #28
   153a0:	str	r0, [fp, #-24]	; 0xffffffe8
   153a4:	str	r1, [fp, #-28]	; 0xffffffe4
   153a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153ac:	ldr	r3, [r3, #136]	; 0x88
   153b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   153b4:	ldr	r2, [r2]
   153b8:	sub	r3, r3, r2
   153bc:	str	r3, [fp, #-16]
   153c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153c4:	ldr	r2, [r3, #136]	; 0x88
   153c8:	ldr	r3, [fp, #-16]
   153cc:	cmp	r2, r3
   153d0:	bgt	153f4 <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   153d4:	ldr	r3, [pc, #152]	; 15474 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   153d8:	add	r3, pc, r3
   153dc:	ldr	r2, [pc, #148]	; 15478 <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   153e0:	ldr	r1, [pc, #148]	; 1547c <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   153e4:	add	r1, pc, r1
   153e8:	ldr	r0, [pc, #144]	; 15480 <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   153ec:	add	r0, pc, r0
   153f0:	bl	1234c <__assert_fail@plt>
   153f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153f8:	ldr	r4, [r3, #44]	; 0x2c
   153fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15400:	ldr	r0, [r3, #36]	; 0x24
   15404:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15408:	add	r1, r3, #8
   1540c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15410:	ldr	r2, [r3, #4]
   15414:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15418:	ldr	r3, [r3]
   1541c:	str	r3, [sp]
   15420:	ldr	r3, [fp, #-16]
   15424:	blx	r4
   15428:	mov	r3, r0
   1542c:	cmp	r3, #0
   15430:	beq	15454 <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   15434:	ldr	r3, [pc, #72]	; 15484 <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   15438:	add	r3, pc, r3
   1543c:	ldr	r2, [pc, #68]	; 15488 <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   15440:	ldr	r1, [pc, #68]	; 1548c <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   15444:	add	r1, pc, r1
   15448:	ldr	r0, [pc, #64]	; 15490 <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   1544c:	add	r0, pc, r0
   15450:	bl	1234c <__assert_fail@plt>
   15454:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15458:	ldr	r2, [fp, #-16]
   1545c:	str	r2, [r3, #136]	; 0x88
   15460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15464:	ldr	r3, [r3, #136]	; 0x88
   15468:	mov	r0, r3
   1546c:	sub	sp, fp, #8
   15470:	pop	{r4, fp, pc}
   15474:	ldrdeq	r8, [r0], -ip
   15478:	andeq	r0, r0, r7, lsl #5
   1547c:	andeq	r7, r0, r0, lsl pc
   15480:	andeq	r7, r0, r8, ror #30
   15484:	andeq	r8, r0, ip, ror r3
   15488:	andeq	r0, r0, fp, lsl #5
   1548c:			; <UNDEFINED> instruction: 0x00007eb0
   15490:	andeq	r7, r0, r8, lsl #30
   15494:	push	{r4, fp, lr}
   15498:	add	fp, sp, #8
   1549c:	sub	sp, sp, #28
   154a0:	str	r0, [fp, #-24]	; 0xffffffe8
   154a4:	str	r1, [fp, #-28]	; 0xffffffe4
   154a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154ac:	ldr	r3, [r3, #140]	; 0x8c
   154b0:	str	r3, [fp, #-16]
   154b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154b8:	ldr	r3, [r3]
   154bc:	mov	r2, r3
   154c0:	ldr	r3, [fp, #-16]
   154c4:	add	r2, r2, r3
   154c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154cc:	str	r2, [r3, #140]	; 0x8c
   154d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154d4:	ldr	r2, [r3, #140]	; 0x8c
   154d8:	ldr	r3, [fp, #-16]
   154dc:	cmp	r2, r3
   154e0:	bge	15504 <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   154e4:	ldr	r3, [pc, #140]	; 15578 <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   154e8:	add	r3, pc, r3
   154ec:	ldr	r2, [pc, #136]	; 1557c <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   154f0:	ldr	r1, [pc, #136]	; 15580 <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   154f4:	add	r1, pc, r1
   154f8:	ldr	r0, [pc, #132]	; 15584 <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   154fc:	add	r0, pc, r0
   15500:	bl	1234c <__assert_fail@plt>
   15504:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15508:	ldr	r4, [r3, #44]	; 0x2c
   1550c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15510:	ldr	r0, [r3, #36]	; 0x24
   15514:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15518:	add	r1, r3, #8
   1551c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15520:	ldr	r2, [r3, #4]
   15524:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15528:	ldr	r3, [r3]
   1552c:	str	r3, [sp]
   15530:	ldr	r3, [fp, #-16]
   15534:	blx	r4
   15538:	mov	r3, r0
   1553c:	cmp	r3, #0
   15540:	beq	15564 <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   15544:	ldr	r3, [pc, #60]	; 15588 <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   15548:	add	r3, pc, r3
   1554c:	ldr	r2, [pc, #56]	; 1558c <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   15550:	ldr	r1, [pc, #56]	; 15590 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   15554:	add	r1, pc, r1
   15558:	ldr	r0, [pc, #52]	; 15594 <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   1555c:	add	r0, pc, r0
   15560:	bl	1234c <__assert_fail@plt>
   15564:	ldr	r3, [fp, #-16]
   15568:	add	r3, r3, #1
   1556c:	mov	r0, r3
   15570:	sub	sp, fp, #8
   15574:	pop	{r4, fp, pc}
   15578:	andeq	r8, r0, r0, asr #5
   1557c:	andeq	r0, r0, r1, lsr #5
   15580:	andeq	r7, r0, r0, lsl #28
   15584:	andeq	r7, r0, r8, asr lr
   15588:	andeq	r8, r0, r0, ror #4
   1558c:	andeq	r0, r0, r5, lsr #5
   15590:	andeq	r7, r0, r0, lsr #27
   15594:	strdeq	r7, [r0], -r8
   15598:	push	{r4, fp, lr}
   1559c:	add	fp, sp, #8
   155a0:	sub	sp, sp, #100	; 0x64
   155a4:	str	r0, [fp, #-96]	; 0xffffffa0
   155a8:	str	r1, [fp, #-100]	; 0xffffff9c
   155ac:	str	r3, [fp, #-108]	; 0xffffff94
   155b0:	strh	r2, [fp, #-102]	; 0xffffff9a
   155b4:	ldr	r4, [pc, #320]	; 156fc <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   155b8:	add	r4, pc, r4
   155bc:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155c0:	cmp	r3, #0
   155c4:	bne	155ec <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   155c8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   155cc:	ldrh	r3, [r3, #132]	; 0x84
   155d0:	cmp	r3, #0
   155d4:	beq	155e4 <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   155d8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   155dc:	ldrh	r3, [r3, #132]	; 0x84
   155e0:	b	155f0 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   155e4:	mov	r3, #1
   155e8:	b	155f0 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   155ec:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155f0:	strh	r3, [fp, #-102]	; 0xffffff9a
   155f4:	mov	r1, #4
   155f8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   155fc:	bl	14d18 <flatcc_builder_clear@@Base+0xf8>
   15600:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15604:	mov	r1, r3
   15608:	ldr	r0, [fp, #-100]	; 0xffffff9c
   1560c:	bl	14d18 <flatcc_builder_clear@@Base+0xf8>
   15610:	ldr	r3, [fp, #-108]	; 0xffffff94
   15614:	cmp	r3, #0
   15618:	bne	156ec <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   1561c:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15620:	mov	r1, r3
   15624:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15628:	bl	15358 <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   1562c:	str	r0, [fp, #-16]
   15630:	ldr	r3, [fp, #-16]
   15634:	cmp	r3, #0
   15638:	beq	156ec <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   1563c:	mov	r3, #0
   15640:	str	r3, [fp, #-88]	; 0xffffffa8
   15644:	mov	r3, #0
   15648:	str	r3, [fp, #-84]	; 0xffffffac
   1564c:	ldr	r3, [fp, #-16]
   15650:	cmp	r3, #0
   15654:	beq	156b0 <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   15658:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1565c:	ldr	r3, [fp, #-16]
   15660:	add	r3, r2, r3
   15664:	str	r3, [fp, #-88]	; 0xffffffa8
   15668:	ldr	r3, [fp, #-84]	; 0xffffffac
   1566c:	add	r3, r3, #1
   15670:	lsl	r3, r3, #3
   15674:	sub	r2, fp, #12
   15678:	add	r3, r2, r3
   1567c:	ldr	r2, [pc, #124]	; 15700 <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   15680:	ldr	r2, [r4, r2]
   15684:	str	r2, [r3, #-76]	; 0xffffffb4
   15688:	ldr	r3, [fp, #-84]	; 0xffffffac
   1568c:	add	r3, r3, #1
   15690:	lsl	r3, r3, #3
   15694:	sub	r2, fp, #12
   15698:	add	r3, r2, r3
   1569c:	ldr	r2, [fp, #-16]
   156a0:	str	r2, [r3, #-72]	; 0xffffffb8
   156a4:	ldr	r3, [fp, #-84]	; 0xffffffac
   156a8:	add	r3, r3, #1
   156ac:	str	r3, [fp, #-84]	; 0xffffffac
   156b0:	sub	r3, fp, #88	; 0x58
   156b4:	mov	r1, r3
   156b8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   156bc:	bl	15494 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   156c0:	mov	r3, r0
   156c4:	cmp	r3, #0
   156c8:	bne	156ec <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   156cc:	ldr	r3, [pc, #48]	; 15704 <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   156d0:	add	r3, pc, r3
   156d4:	ldr	r2, [pc, #44]	; 15708 <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   156d8:	ldr	r1, [pc, #44]	; 1570c <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   156dc:	add	r1, pc, r1
   156e0:	ldr	r0, [pc, #40]	; 15710 <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   156e4:	add	r0, pc, r0
   156e8:	bl	1234c <__assert_fail@plt>
   156ec:	mov	r3, #0
   156f0:	mov	r0, r3
   156f4:	sub	sp, fp, #8
   156f8:	pop	{r4, fp, pc}
   156fc:	andeq	r9, r1, r0, asr #20
   15700:	andeq	r0, r0, r4, asr #32
   15704:	andeq	r8, r0, r8, asr #1
   15708:			; <UNDEFINED> instruction: 0x000002be
   1570c:	andeq	r7, r0, r8, lsl ip
   15710:	andeq	r7, r0, r0, ror ip

00015714 <flatcc_builder_embed_buffer@@Base>:
   15714:	push	{r4, fp, lr}
   15718:	add	fp, sp, #8
   1571c:	sub	sp, sp, #108	; 0x6c
   15720:	str	r0, [fp, #-104]	; 0xffffff98
   15724:	str	r2, [fp, #-112]	; 0xffffff90
   15728:	str	r3, [fp, #-116]	; 0xffffff8c
   1572c:	strh	r1, [fp, #-106]	; 0xffffff96
   15730:	ldr	r4, [pc, #492]	; 15924 <flatcc_builder_embed_buffer@@Base+0x210>
   15734:	add	r4, pc, r4
   15738:	ldr	r3, [fp, #8]
   1573c:	and	r3, r3, #2
   15740:	str	r3, [fp, #-16]
   15744:	ldr	r3, [fp, #-104]	; 0xffffff98
   15748:	ldr	r3, [r3, #152]	; 0x98
   1574c:	cmp	r3, #0
   15750:	movne	r3, #1
   15754:	moveq	r3, #0
   15758:	uxtb	r3, r3
   1575c:	ldrh	r2, [fp, #-106]	; 0xffffff96
   15760:	add	r1, fp, #4
   15764:	ldr	r0, [fp, #-104]	; 0xffffff98
   15768:	bl	15598 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   1576c:	mov	r3, r0
   15770:	cmp	r3, #0
   15774:	beq	15780 <flatcc_builder_embed_buffer@@Base+0x6c>
   15778:	mov	r3, #0
   1577c:	b	15918 <flatcc_builder_embed_buffer@@Base+0x204>
   15780:	ldr	r3, [fp, #-16]
   15784:	cmp	r3, #0
   15788:	beq	15794 <flatcc_builder_embed_buffer@@Base+0x80>
   1578c:	mov	r2, #4
   15790:	b	15798 <flatcc_builder_embed_buffer@@Base+0x84>
   15794:	mov	r2, #0
   15798:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1579c:	add	r3, r2, r3
   157a0:	ldrh	r2, [fp, #4]
   157a4:	mov	r1, r3
   157a8:	ldr	r0, [fp, #-104]	; 0xffffff98
   157ac:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   157b0:	str	r0, [fp, #-20]	; 0xffffffec
   157b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   157b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   157bc:	add	r3, r2, r3
   157c0:	mov	r0, r3
   157c4:	bl	13cd0 <main@@Base+0x11c>
   157c8:	mov	r3, r0
   157cc:	str	r3, [fp, #-24]	; 0xffffffe8
   157d0:	mov	r3, #0
   157d4:	str	r3, [fp, #-96]	; 0xffffffa0
   157d8:	mov	r3, #0
   157dc:	str	r3, [fp, #-92]	; 0xffffffa4
   157e0:	ldr	r3, [fp, #-104]	; 0xffffff98
   157e4:	ldr	r3, [r3, #152]	; 0x98
   157e8:	cmp	r3, #0
   157ec:	beq	15840 <flatcc_builder_embed_buffer@@Base+0x12c>
   157f0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   157f4:	add	r3, r3, #4
   157f8:	str	r3, [fp, #-96]	; 0xffffffa0
   157fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15800:	add	r3, r3, #1
   15804:	lsl	r3, r3, #3
   15808:	sub	r2, fp, #12
   1580c:	add	r3, r2, r3
   15810:	sub	r2, fp, #24
   15814:	str	r2, [r3, #-84]	; 0xffffffac
   15818:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1581c:	add	r3, r3, #1
   15820:	lsl	r3, r3, #3
   15824:	sub	r2, fp, #12
   15828:	add	r3, r2, r3
   1582c:	mov	r2, #4
   15830:	str	r2, [r3, #-80]	; 0xffffffb0
   15834:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15838:	add	r3, r3, #1
   1583c:	str	r3, [fp, #-92]	; 0xffffffa4
   15840:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15844:	cmp	r3, #0
   15848:	beq	158a0 <flatcc_builder_embed_buffer@@Base+0x18c>
   1584c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15850:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15854:	add	r3, r2, r3
   15858:	str	r3, [fp, #-96]	; 0xffffffa0
   1585c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15860:	add	r3, r3, #1
   15864:	lsl	r3, r3, #3
   15868:	sub	r2, fp, #12
   1586c:	add	r3, r2, r3
   15870:	ldr	r2, [fp, #-112]	; 0xffffff90
   15874:	str	r2, [r3, #-84]	; 0xffffffac
   15878:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1587c:	add	r3, r3, #1
   15880:	lsl	r3, r3, #3
   15884:	sub	r2, fp, #12
   15888:	add	r3, r2, r3
   1588c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15890:	str	r2, [r3, #-80]	; 0xffffffb0
   15894:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15898:	add	r3, r3, #1
   1589c:	str	r3, [fp, #-92]	; 0xffffffa4
   158a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   158a4:	cmp	r3, #0
   158a8:	beq	15904 <flatcc_builder_embed_buffer@@Base+0x1f0>
   158ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   158b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   158b4:	add	r3, r2, r3
   158b8:	str	r3, [fp, #-96]	; 0xffffffa0
   158bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158c0:	add	r3, r3, #1
   158c4:	lsl	r3, r3, #3
   158c8:	sub	r2, fp, #12
   158cc:	add	r3, r2, r3
   158d0:	ldr	r2, [pc, #80]	; 15928 <flatcc_builder_embed_buffer@@Base+0x214>
   158d4:	ldr	r2, [r4, r2]
   158d8:	str	r2, [r3, #-84]	; 0xffffffac
   158dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158e0:	add	r3, r3, #1
   158e4:	lsl	r3, r3, #3
   158e8:	sub	r2, fp, #12
   158ec:	add	r3, r2, r3
   158f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   158f4:	str	r2, [r3, #-80]	; 0xffffffb0
   158f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158fc:	add	r3, r3, #1
   15900:	str	r3, [fp, #-92]	; 0xffffffa4
   15904:	sub	r3, fp, #96	; 0x60
   15908:	mov	r1, r3
   1590c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15910:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15914:	mov	r3, r0
   15918:	mov	r0, r3
   1591c:	sub	sp, fp, #8
   15920:	pop	{r4, fp, pc}
   15924:	andeq	r9, r1, r4, asr #17
   15928:	andeq	r0, r0, r4, asr #32

0001592c <flatcc_builder_create_buffer@@Base>:
   1592c:	push	{r4, fp, lr}
   15930:	add	fp, sp, #8
   15934:	sub	sp, sp, #132	; 0x84
   15938:	str	r0, [fp, #-128]	; 0xffffff80
   1593c:	str	r1, [fp, #-132]	; 0xffffff7c
   15940:	str	r3, [fp, #-140]	; 0xffffff74
   15944:	strh	r2, [fp, #-134]	; 0xffffff7a
   15948:	ldr	r4, [pc, #932]	; 15cf4 <flatcc_builder_create_buffer@@Base+0x3c8>
   1594c:	add	r4, pc, r4
   15950:	mov	r3, #0
   15954:	str	r3, [fp, #-16]
   15958:	mov	r3, #0
   1595c:	str	r3, [fp, #-120]	; 0xffffff88
   15960:	ldr	r3, [fp, #8]
   15964:	and	r3, r3, #1
   15968:	cmp	r3, #0
   1596c:	movne	r3, #1
   15970:	moveq	r3, #0
   15974:	uxtb	r3, r3
   15978:	str	r3, [fp, #-20]	; 0xffffffec
   1597c:	ldr	r3, [fp, #8]
   15980:	and	r3, r3, #2
   15984:	cmp	r3, #0
   15988:	movne	r3, #1
   1598c:	moveq	r3, #0
   15990:	uxtb	r3, r3
   15994:	str	r3, [fp, #-24]	; 0xffffffe8
   15998:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   1599c:	ldr	r3, [fp, #-20]	; 0xffffffec
   159a0:	add	r1, fp, #4
   159a4:	ldr	r0, [fp, #-128]	; 0xffffff80
   159a8:	bl	15598 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   159ac:	mov	r3, r0
   159b0:	cmp	r3, #0
   159b4:	beq	159c0 <flatcc_builder_create_buffer@@Base+0x94>
   159b8:	mov	r3, #0
   159bc:	b	15ce8 <flatcc_builder_create_buffer@@Base+0x3bc>
   159c0:	ldrh	r3, [fp, #4]
   159c4:	mov	r1, r3
   159c8:	ldr	r0, [fp, #-128]	; 0xffffff80
   159cc:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   159d0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   159d4:	cmp	r3, #0
   159d8:	beq	15a10 <flatcc_builder_create_buffer@@Base+0xe4>
   159dc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   159e0:	ldr	r3, [r3]
   159e4:	str	r3, [fp, #-120]	; 0xffffff88
   159e8:	ldr	r3, [fp, #-120]	; 0xffffff88
   159ec:	mov	r0, r3
   159f0:	bl	13d1c <main@@Base+0x168>
   159f4:	mov	r3, r0
   159f8:	str	r3, [fp, #-120]	; 0xffffff88
   159fc:	ldr	r3, [fp, #-120]	; 0xffffff88
   15a00:	mov	r0, r3
   15a04:	bl	13cd0 <main@@Base+0x11c>
   15a08:	mov	r3, r0
   15a0c:	str	r3, [fp, #-120]	; 0xffffff88
   15a10:	ldr	r3, [fp, #-120]	; 0xffffff88
   15a14:	cmp	r3, #0
   15a18:	beq	15a24 <flatcc_builder_create_buffer@@Base+0xf8>
   15a1c:	mov	r3, #4
   15a20:	b	15a28 <flatcc_builder_create_buffer@@Base+0xfc>
   15a24:	mov	r3, #0
   15a28:	str	r3, [fp, #-16]
   15a2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a30:	cmp	r3, #0
   15a34:	beq	15a40 <flatcc_builder_create_buffer@@Base+0x114>
   15a38:	mov	r2, #4
   15a3c:	b	15a44 <flatcc_builder_create_buffer@@Base+0x118>
   15a40:	mov	r2, #0
   15a44:	ldr	r3, [fp, #-16]
   15a48:	add	r3, r2, r3
   15a4c:	add	r3, r3, #4
   15a50:	ldrh	r2, [fp, #4]
   15a54:	mov	r1, r3
   15a58:	ldr	r0, [fp, #-128]	; 0xffffff80
   15a5c:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15a60:	str	r0, [fp, #-28]	; 0xffffffe4
   15a64:	mov	r3, #0
   15a68:	str	r3, [fp, #-116]	; 0xffffff8c
   15a6c:	mov	r3, #0
   15a70:	str	r3, [fp, #-112]	; 0xffffff90
   15a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a78:	cmp	r3, #0
   15a7c:	bne	15a8c <flatcc_builder_create_buffer@@Base+0x160>
   15a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a84:	cmp	r3, #0
   15a88:	beq	15adc <flatcc_builder_create_buffer@@Base+0x1b0>
   15a8c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15a90:	add	r3, r3, #4
   15a94:	str	r3, [fp, #-116]	; 0xffffff8c
   15a98:	ldr	r3, [fp, #-112]	; 0xffffff90
   15a9c:	add	r3, r3, #1
   15aa0:	lsl	r3, r3, #3
   15aa4:	sub	r2, fp, #12
   15aa8:	add	r3, r2, r3
   15aac:	sub	r2, fp, #44	; 0x2c
   15ab0:	str	r2, [r3, #-104]	; 0xffffff98
   15ab4:	ldr	r3, [fp, #-112]	; 0xffffff90
   15ab8:	add	r3, r3, #1
   15abc:	lsl	r3, r3, #3
   15ac0:	sub	r2, fp, #12
   15ac4:	add	r3, r2, r3
   15ac8:	mov	r2, #4
   15acc:	str	r2, [r3, #-100]	; 0xffffff9c
   15ad0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15ad4:	add	r3, r3, #1
   15ad8:	str	r3, [fp, #-112]	; 0xffffff90
   15adc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15ae0:	add	r3, r3, #4
   15ae4:	str	r3, [fp, #-116]	; 0xffffff8c
   15ae8:	ldr	r3, [fp, #-112]	; 0xffffff90
   15aec:	add	r3, r3, #1
   15af0:	lsl	r3, r3, #3
   15af4:	sub	r2, fp, #12
   15af8:	add	r3, r2, r3
   15afc:	sub	r2, fp, #40	; 0x28
   15b00:	str	r2, [r3, #-104]	; 0xffffff98
   15b04:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b08:	add	r3, r3, #1
   15b0c:	lsl	r3, r3, #3
   15b10:	sub	r2, fp, #12
   15b14:	add	r3, r2, r3
   15b18:	mov	r2, #4
   15b1c:	str	r2, [r3, #-100]	; 0xffffff9c
   15b20:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b24:	add	r3, r3, #1
   15b28:	str	r3, [fp, #-112]	; 0xffffff90
   15b2c:	ldr	r3, [fp, #-16]
   15b30:	cmp	r3, #0
   15b34:	beq	15b8c <flatcc_builder_create_buffer@@Base+0x260>
   15b38:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15b3c:	ldr	r3, [fp, #-16]
   15b40:	add	r3, r2, r3
   15b44:	str	r3, [fp, #-116]	; 0xffffff8c
   15b48:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b4c:	add	r3, r3, #1
   15b50:	lsl	r3, r3, #3
   15b54:	sub	r2, fp, #12
   15b58:	add	r3, r2, r3
   15b5c:	sub	r2, fp, #120	; 0x78
   15b60:	str	r2, [r3, #-104]	; 0xffffff98
   15b64:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b68:	add	r3, r3, #1
   15b6c:	lsl	r3, r3, #3
   15b70:	sub	r2, fp, #12
   15b74:	add	r3, r2, r3
   15b78:	ldr	r2, [fp, #-16]
   15b7c:	str	r2, [r3, #-100]	; 0xffffff9c
   15b80:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b84:	add	r3, r3, #1
   15b88:	str	r3, [fp, #-112]	; 0xffffff90
   15b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b90:	cmp	r3, #0
   15b94:	beq	15bf0 <flatcc_builder_create_buffer@@Base+0x2c4>
   15b98:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15b9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ba0:	add	r3, r2, r3
   15ba4:	str	r3, [fp, #-116]	; 0xffffff8c
   15ba8:	ldr	r3, [fp, #-112]	; 0xffffff90
   15bac:	add	r3, r3, #1
   15bb0:	lsl	r3, r3, #3
   15bb4:	sub	r2, fp, #12
   15bb8:	add	r3, r2, r3
   15bbc:	ldr	r2, [pc, #308]	; 15cf8 <flatcc_builder_create_buffer@@Base+0x3cc>
   15bc0:	ldr	r2, [r4, r2]
   15bc4:	str	r2, [r3, #-104]	; 0xffffff98
   15bc8:	ldr	r3, [fp, #-112]	; 0xffffff90
   15bcc:	add	r3, r3, #1
   15bd0:	lsl	r3, r3, #3
   15bd4:	sub	r2, fp, #12
   15bd8:	add	r3, r2, r3
   15bdc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15be0:	str	r2, [r3, #-100]	; 0xffffff9c
   15be4:	ldr	r3, [fp, #-112]	; 0xffffff90
   15be8:	add	r3, r3, #1
   15bec:	str	r3, [fp, #-112]	; 0xffffff90
   15bf0:	ldr	r3, [fp, #-128]	; 0xffffff80
   15bf4:	ldr	r3, [r3, #136]	; 0x88
   15bf8:	mov	r2, r3
   15bfc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15c00:	sub	r2, r2, r3
   15c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c08:	cmp	r3, #0
   15c0c:	bne	15c1c <flatcc_builder_create_buffer@@Base+0x2f0>
   15c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c14:	cmp	r3, #0
   15c18:	beq	15c24 <flatcc_builder_create_buffer@@Base+0x2f8>
   15c1c:	mov	r3, #4
   15c20:	b	15c28 <flatcc_builder_create_buffer@@Base+0x2fc>
   15c24:	mov	r3, #0
   15c28:	add	r3, r2, r3
   15c2c:	str	r3, [fp, #-32]	; 0xffffffe0
   15c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c34:	cmp	r3, #0
   15c38:	beq	15c64 <flatcc_builder_create_buffer@@Base+0x338>
   15c3c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15c40:	ldr	r3, [r3, #144]	; 0x90
   15c44:	mov	r2, r3
   15c48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c4c:	sub	r3, r2, r3
   15c50:	mov	r0, r3
   15c54:	bl	13cd0 <main@@Base+0x11c>
   15c58:	mov	r3, r0
   15c5c:	str	r3, [fp, #-44]	; 0xffffffd4
   15c60:	b	15c88 <flatcc_builder_create_buffer@@Base+0x35c>
   15c64:	ldr	r3, [fp, #-128]	; 0xffffff80
   15c68:	ldr	r3, [r3, #140]	; 0x8c
   15c6c:	mov	r2, r3
   15c70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c74:	sub	r3, r2, r3
   15c78:	mov	r0, r3
   15c7c:	bl	13cd0 <main@@Base+0x11c>
   15c80:	mov	r3, r0
   15c84:	str	r3, [fp, #-44]	; 0xffffffd4
   15c88:	ldr	r2, [fp, #-140]	; 0xffffff74
   15c8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c90:	sub	r3, r2, r3
   15c94:	mov	r0, r3
   15c98:	bl	13cd0 <main@@Base+0x11c>
   15c9c:	mov	r3, r0
   15ca0:	str	r3, [fp, #-40]	; 0xffffffd8
   15ca4:	sub	r3, fp, #116	; 0x74
   15ca8:	mov	r1, r3
   15cac:	ldr	r0, [fp, #-128]	; 0xffffff80
   15cb0:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15cb4:	str	r0, [fp, #-36]	; 0xffffffdc
   15cb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cbc:	cmp	r3, #0
   15cc0:	bne	15ce4 <flatcc_builder_create_buffer@@Base+0x3b8>
   15cc4:	ldr	r3, [pc, #48]	; 15cfc <flatcc_builder_create_buffer@@Base+0x3d0>
   15cc8:	add	r3, pc, r3
   15ccc:	mov	r2, #772	; 0x304
   15cd0:	ldr	r1, [pc, #40]	; 15d00 <flatcc_builder_create_buffer@@Base+0x3d4>
   15cd4:	add	r1, pc, r1
   15cd8:	ldr	r0, [pc, #36]	; 15d04 <flatcc_builder_create_buffer@@Base+0x3d8>
   15cdc:	add	r0, pc, r0
   15ce0:	bl	1234c <__assert_fail@plt>
   15ce4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ce8:	mov	r0, r3
   15cec:	sub	sp, fp, #8
   15cf0:	pop	{r4, fp, pc}
   15cf4:	andeq	r9, r1, ip, lsr #13
   15cf8:	andeq	r0, r0, r4, asr #32
   15cfc:	strdeq	r7, [r0], -r8
   15d00:	andeq	r7, r0, r0, lsr #12
   15d04:	andeq	r7, r0, r8, ror r6

00015d08 <flatcc_builder_create_struct@@Base>:
   15d08:	push	{r4, fp, lr}
   15d0c:	add	fp, sp, #8
   15d10:	sub	sp, sp, #100	; 0x64
   15d14:	str	r0, [fp, #-96]	; 0xffffffa0
   15d18:	str	r1, [fp, #-100]	; 0xffffff9c
   15d1c:	str	r2, [fp, #-104]	; 0xffffff98
   15d20:	strh	r3, [fp, #-106]	; 0xffffff96
   15d24:	ldr	r4, [pc, #328]	; 15e74 <flatcc_builder_create_struct@@Base+0x16c>
   15d28:	add	r4, pc, r4
   15d2c:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d30:	cmp	r3, #0
   15d34:	bne	15d58 <flatcc_builder_create_struct@@Base+0x50>
   15d38:	ldr	r3, [pc, #312]	; 15e78 <flatcc_builder_create_struct@@Base+0x170>
   15d3c:	add	r3, pc, r3
   15d40:	ldr	r2, [pc, #308]	; 15e7c <flatcc_builder_create_struct@@Base+0x174>
   15d44:	ldr	r1, [pc, #308]	; 15e80 <flatcc_builder_create_struct@@Base+0x178>
   15d48:	add	r1, pc, r1
   15d4c:	ldr	r0, [pc, #304]	; 15e84 <flatcc_builder_create_struct@@Base+0x17c>
   15d50:	add	r0, pc, r0
   15d54:	bl	1234c <__assert_fail@plt>
   15d58:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d5c:	mov	r1, r3
   15d60:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15d64:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   15d68:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d6c:	mov	r2, r3
   15d70:	ldr	r1, [fp, #-104]	; 0xffffff98
   15d74:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15d78:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15d7c:	str	r0, [fp, #-16]
   15d80:	mov	r3, #0
   15d84:	str	r3, [fp, #-88]	; 0xffffffa8
   15d88:	mov	r3, #0
   15d8c:	str	r3, [fp, #-84]	; 0xffffffac
   15d90:	ldr	r3, [fp, #-104]	; 0xffffff98
   15d94:	cmp	r3, #0
   15d98:	beq	15df0 <flatcc_builder_create_struct@@Base+0xe8>
   15d9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15da0:	ldr	r3, [fp, #-104]	; 0xffffff98
   15da4:	add	r3, r2, r3
   15da8:	str	r3, [fp, #-88]	; 0xffffffa8
   15dac:	ldr	r3, [fp, #-84]	; 0xffffffac
   15db0:	add	r3, r3, #1
   15db4:	lsl	r3, r3, #3
   15db8:	sub	r2, fp, #12
   15dbc:	add	r3, r2, r3
   15dc0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15dc4:	str	r2, [r3, #-76]	; 0xffffffb4
   15dc8:	ldr	r3, [fp, #-84]	; 0xffffffac
   15dcc:	add	r3, r3, #1
   15dd0:	lsl	r3, r3, #3
   15dd4:	sub	r2, fp, #12
   15dd8:	add	r3, r2, r3
   15ddc:	ldr	r2, [fp, #-104]	; 0xffffff98
   15de0:	str	r2, [r3, #-72]	; 0xffffffb8
   15de4:	ldr	r3, [fp, #-84]	; 0xffffffac
   15de8:	add	r3, r3, #1
   15dec:	str	r3, [fp, #-84]	; 0xffffffac
   15df0:	ldr	r3, [fp, #-16]
   15df4:	cmp	r3, #0
   15df8:	beq	15e54 <flatcc_builder_create_struct@@Base+0x14c>
   15dfc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e00:	ldr	r3, [fp, #-16]
   15e04:	add	r3, r2, r3
   15e08:	str	r3, [fp, #-88]	; 0xffffffa8
   15e0c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e10:	add	r3, r3, #1
   15e14:	lsl	r3, r3, #3
   15e18:	sub	r2, fp, #12
   15e1c:	add	r3, r2, r3
   15e20:	ldr	r2, [pc, #96]	; 15e88 <flatcc_builder_create_struct@@Base+0x180>
   15e24:	ldr	r2, [r4, r2]
   15e28:	str	r2, [r3, #-76]	; 0xffffffb4
   15e2c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e30:	add	r3, r3, #1
   15e34:	lsl	r3, r3, #3
   15e38:	sub	r2, fp, #12
   15e3c:	add	r3, r2, r3
   15e40:	ldr	r2, [fp, #-16]
   15e44:	str	r2, [r3, #-72]	; 0xffffffb8
   15e48:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e4c:	add	r3, r3, #1
   15e50:	str	r3, [fp, #-84]	; 0xffffffac
   15e54:	sub	r3, fp, #88	; 0x58
   15e58:	mov	r1, r3
   15e5c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15e60:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15e64:	mov	r3, r0
   15e68:	mov	r0, r3
   15e6c:	sub	sp, fp, #8
   15e70:	pop	{r4, fp, pc}
   15e74:	ldrdeq	r9, [r1], -r0
   15e78:	andeq	r7, r0, r4, lsr #21
   15e7c:	andeq	r0, r0, pc, lsl #6
   15e80:	andeq	r7, r0, ip, lsr #11
   15e84:	andeq	r7, r0, r8, ror #12
   15e88:	andeq	r0, r0, r4, asr #32

00015e8c <flatcc_builder_start_buffer@@Base>:
   15e8c:	push	{r4, fp, lr}
   15e90:	add	fp, sp, #8
   15e94:	sub	sp, sp, #20
   15e98:	str	r0, [fp, #-16]
   15e9c:	str	r1, [fp, #-20]	; 0xffffffec
   15ea0:	str	r3, [fp, #-28]	; 0xffffffe4
   15ea4:	strh	r2, [fp, #-22]	; 0xffffffea
   15ea8:	ldr	r4, [pc, #300]	; 15fdc <flatcc_builder_start_buffer@@Base+0x150>
   15eac:	add	r4, pc, r4
   15eb0:	ldr	r3, [fp, #-16]
   15eb4:	ldrh	r3, [r3, #128]	; 0x80
   15eb8:	mov	r1, r3
   15ebc:	ldr	r0, [fp, #-16]
   15ec0:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15ec4:	mov	r3, r0
   15ec8:	cmp	r3, #0
   15ecc:	beq	15ed8 <flatcc_builder_start_buffer@@Base+0x4c>
   15ed0:	mvn	r3, #0
   15ed4:	b	15fd0 <flatcc_builder_start_buffer@@Base+0x144>
   15ed8:	ldr	r3, [fp, #-16]
   15edc:	mov	r2, #1
   15ee0:	strh	r2, [r3, #128]	; 0x80
   15ee4:	ldr	r3, [fp, #-16]
   15ee8:	ldr	r3, [r3, #32]
   15eec:	ldr	r2, [fp, #-16]
   15ef0:	ldrh	r2, [r2, #132]	; 0x84
   15ef4:	strh	r2, [r3, #34]	; 0x22
   15ef8:	ldr	r3, [fp, #-16]
   15efc:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15f00:	strh	r2, [r3, #132]	; 0x84
   15f04:	ldr	r3, [fp, #-16]
   15f08:	ldr	r3, [r3, #32]
   15f0c:	ldr	r2, [fp, #-16]
   15f10:	ldrh	r2, [r2, #164]	; 0xa4
   15f14:	strh	r2, [r3, #32]
   15f18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f1c:	uxth	r2, r3
   15f20:	ldr	r3, [fp, #-16]
   15f24:	strh	r2, [r3, #164]	; 0xa4
   15f28:	ldr	r3, [fp, #-16]
   15f2c:	ldr	r3, [r3, #32]
   15f30:	ldr	r2, [fp, #-16]
   15f34:	ldr	r2, [r2, #144]	; 0x90
   15f38:	str	r2, [r3, #20]
   15f3c:	ldr	r3, [fp, #-16]
   15f40:	ldr	r3, [r3, #32]
   15f44:	ldr	r2, [fp, #-16]
   15f48:	ldr	r2, [r2, #152]	; 0x98
   15f4c:	str	r2, [r3, #28]
   15f50:	ldr	r3, [fp, #-16]
   15f54:	ldr	r2, [r3, #136]	; 0x88
   15f58:	ldr	r3, [fp, #-16]
   15f5c:	str	r2, [r3, #144]	; 0x90
   15f60:	ldr	r3, [fp, #-16]
   15f64:	ldr	r3, [r3, #148]	; 0x94
   15f68:	add	r1, r3, #1
   15f6c:	ldr	r2, [fp, #-16]
   15f70:	str	r1, [r2, #148]	; 0x94
   15f74:	ldr	r2, [fp, #-16]
   15f78:	str	r3, [r2, #152]	; 0x98
   15f7c:	ldr	r3, [fp, #-16]
   15f80:	ldr	r3, [r3, #32]
   15f84:	ldr	r2, [fp, #-16]
   15f88:	ldr	r2, [r2, #168]	; 0xa8
   15f8c:	str	r2, [r3, #16]
   15f90:	ldr	r3, [fp, #-16]
   15f94:	add	r2, r3, #168	; 0xa8
   15f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f9c:	cmp	r3, #0
   15fa0:	beq	15fac <flatcc_builder_start_buffer@@Base+0x120>
   15fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fa8:	b	15fb4 <flatcc_builder_start_buffer@@Base+0x128>
   15fac:	ldr	r3, [pc, #44]	; 15fe0 <flatcc_builder_start_buffer@@Base+0x154>
   15fb0:	ldr	r3, [r4, r3]
   15fb4:	ldr	r3, [r3]
   15fb8:	str	r3, [r2]
   15fbc:	ldr	r3, [fp, #-16]
   15fc0:	ldr	r3, [r3, #32]
   15fc4:	mov	r2, #1
   15fc8:	strh	r2, [r3, #14]
   15fcc:	mov	r3, #0
   15fd0:	mov	r0, r3
   15fd4:	sub	sp, fp, #8
   15fd8:	pop	{r4, fp, pc}
   15fdc:	andeq	r9, r1, ip, asr #2
   15fe0:	andeq	r0, r0, r4, asr #32

00015fe4 <flatcc_builder_end_buffer@@Base>:
   15fe4:	push	{fp, lr}
   15fe8:	add	fp, sp, #4
   15fec:	sub	sp, sp, #24
   15ff0:	str	r0, [fp, #-16]
   15ff4:	str	r1, [fp, #-20]	; 0xffffffec
   15ff8:	ldr	r3, [fp, #-16]
   15ffc:	ldrh	r3, [r3, #164]	; 0xa4
   16000:	and	r3, r3, #2
   16004:	str	r3, [fp, #-8]
   16008:	ldr	r3, [fp, #-16]
   1600c:	ldr	r3, [r3, #152]	; 0x98
   16010:	cmp	r3, #0
   16014:	movne	r3, #1
   16018:	moveq	r3, #0
   1601c:	uxtb	r3, r3
   16020:	mov	r2, r3
   16024:	ldr	r3, [fp, #-8]
   16028:	orr	r3, r3, r2
   1602c:	str	r3, [fp, #-8]
   16030:	ldr	r3, [fp, #-16]
   16034:	ldr	r3, [r3, #32]
   16038:	ldrh	r3, [r3, #14]
   1603c:	cmp	r3, #1
   16040:	beq	16064 <flatcc_builder_end_buffer@@Base+0x80>
   16044:	ldr	r3, [pc, #224]	; 1612c <flatcc_builder_end_buffer@@Base+0x148>
   16048:	add	r3, pc, r3
   1604c:	ldr	r2, [pc, #220]	; 16130 <flatcc_builder_end_buffer@@Base+0x14c>
   16050:	ldr	r1, [pc, #220]	; 16134 <flatcc_builder_end_buffer@@Base+0x150>
   16054:	add	r1, pc, r1
   16058:	ldr	r0, [pc, #216]	; 16138 <flatcc_builder_end_buffer@@Base+0x154>
   1605c:	add	r0, pc, r0
   16060:	bl	1234c <__assert_fail@plt>
   16064:	ldr	r3, [fp, #-16]
   16068:	ldrh	r3, [r3, #132]	; 0x84
   1606c:	mov	r1, r3
   16070:	ldr	r0, [fp, #-16]
   16074:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   16078:	ldr	r3, [fp, #-16]
   1607c:	add	r1, r3, #168	; 0xa8
   16080:	ldr	r3, [fp, #-16]
   16084:	ldrh	r0, [r3, #132]	; 0x84
   16088:	ldr	r3, [fp, #-16]
   1608c:	ldrh	r3, [r3, #128]	; 0x80
   16090:	ldr	r2, [fp, #-8]
   16094:	str	r2, [sp, #4]
   16098:	str	r3, [sp]
   1609c:	ldr	r3, [fp, #-20]	; 0xffffffec
   160a0:	mov	r2, r0
   160a4:	ldr	r0, [fp, #-16]
   160a8:	bl	1592c <flatcc_builder_create_buffer@@Base>
   160ac:	str	r0, [fp, #-12]
   160b0:	ldr	r3, [fp, #-12]
   160b4:	cmp	r3, #0
   160b8:	bne	160c4 <flatcc_builder_end_buffer@@Base+0xe0>
   160bc:	mov	r3, #0
   160c0:	b	16120 <flatcc_builder_end_buffer@@Base+0x13c>
   160c4:	ldr	r3, [fp, #-16]
   160c8:	ldr	r3, [r3, #32]
   160cc:	ldr	r2, [r3, #20]
   160d0:	ldr	r3, [fp, #-16]
   160d4:	str	r2, [r3, #144]	; 0x90
   160d8:	ldr	r3, [fp, #-16]
   160dc:	ldr	r3, [r3, #32]
   160e0:	ldr	r2, [r3, #28]
   160e4:	ldr	r3, [fp, #-16]
   160e8:	str	r2, [r3, #152]	; 0x98
   160ec:	ldr	r3, [fp, #-16]
   160f0:	ldr	r3, [r3, #32]
   160f4:	ldr	r2, [r3, #16]
   160f8:	ldr	r3, [fp, #-16]
   160fc:	str	r2, [r3, #168]	; 0xa8
   16100:	ldr	r3, [fp, #-16]
   16104:	ldr	r3, [r3, #32]
   16108:	ldrh	r2, [r3, #32]
   1610c:	ldr	r3, [fp, #-16]
   16110:	strh	r2, [r3, #164]	; 0xa4
   16114:	ldr	r0, [fp, #-16]
   16118:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1611c:	ldr	r3, [fp, #-12]
   16120:	mov	r0, r3
   16124:	sub	sp, fp, #4
   16128:	pop	{fp, pc}
   1612c:			; <UNDEFINED> instruction: 0x000077b8
   16130:	andeq	r0, r0, r6, asr #6
   16134:	andeq	r7, r0, r0, lsr #5
   16138:	andeq	r7, r0, r8, ror #6

0001613c <flatcc_builder_start_struct@@Base>:
   1613c:	push	{fp, lr}
   16140:	add	fp, sp, #4
   16144:	sub	sp, sp, #16
   16148:	str	r0, [fp, #-8]
   1614c:	str	r1, [fp, #-12]
   16150:	mov	r3, r2
   16154:	strh	r3, [fp, #-14]
   16158:	ldrh	r3, [fp, #-14]
   1615c:	mov	r1, r3
   16160:	ldr	r0, [fp, #-8]
   16164:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16168:	mov	r3, r0
   1616c:	cmp	r3, #0
   16170:	beq	1617c <flatcc_builder_start_struct@@Base+0x40>
   16174:	mov	r3, #0
   16178:	b	161a8 <flatcc_builder_start_struct@@Base+0x6c>
   1617c:	ldr	r3, [fp, #-8]
   16180:	ldr	r3, [r3, #32]
   16184:	mov	r2, #2
   16188:	strh	r2, [r3, #14]
   1618c:	mvn	r1, #3
   16190:	ldr	r0, [fp, #-8]
   16194:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   16198:	ldr	r1, [fp, #-12]
   1619c:	ldr	r0, [fp, #-8]
   161a0:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   161a4:	mov	r3, r0
   161a8:	mov	r0, r3
   161ac:	sub	sp, fp, #4
   161b0:	pop	{fp, pc}

000161b4 <flatcc_builder_struct_edit@@Base>:
   161b4:	push	{fp}		; (str fp, [sp, #-4]!)
   161b8:	add	fp, sp, #0
   161bc:	sub	sp, sp, #12
   161c0:	str	r0, [fp, #-8]
   161c4:	ldr	r3, [fp, #-8]
   161c8:	ldr	r3, [r3, #16]
   161cc:	mov	r0, r3
   161d0:	add	sp, fp, #0
   161d4:	pop	{fp}		; (ldr fp, [sp], #4)
   161d8:	bx	lr

000161dc <flatcc_builder_end_struct@@Base>:
   161dc:	push	{fp, lr}
   161e0:	add	fp, sp, #4
   161e4:	sub	sp, sp, #16
   161e8:	str	r0, [fp, #-16]
   161ec:	ldr	r3, [fp, #-16]
   161f0:	ldr	r3, [r3, #32]
   161f4:	ldrh	r3, [r3, #14]
   161f8:	cmp	r3, #2
   161fc:	beq	16220 <flatcc_builder_end_struct@@Base+0x44>
   16200:	ldr	r3, [pc, #104]	; 16270 <flatcc_builder_end_struct@@Base+0x94>
   16204:	add	r3, pc, r3
   16208:	mov	r2, #872	; 0x368
   1620c:	ldr	r1, [pc, #96]	; 16274 <flatcc_builder_end_struct@@Base+0x98>
   16210:	add	r1, pc, r1
   16214:	ldr	r0, [pc, #92]	; 16278 <flatcc_builder_end_struct@@Base+0x9c>
   16218:	add	r0, pc, r0
   1621c:	bl	1234c <__assert_fail@plt>
   16220:	ldr	r3, [fp, #-16]
   16224:	ldr	r1, [r3, #16]
   16228:	ldr	r3, [fp, #-16]
   1622c:	ldr	r2, [r3, #20]
   16230:	ldr	r3, [fp, #-16]
   16234:	ldrh	r3, [r3, #130]	; 0x82
   16238:	ldr	r0, [fp, #-16]
   1623c:	bl	15d08 <flatcc_builder_create_struct@@Base>
   16240:	str	r0, [fp, #-8]
   16244:	ldr	r3, [fp, #-8]
   16248:	cmp	r3, #0
   1624c:	bne	16258 <flatcc_builder_end_struct@@Base+0x7c>
   16250:	mov	r3, #0
   16254:	b	16264 <flatcc_builder_end_struct@@Base+0x88>
   16258:	ldr	r0, [fp, #-16]
   1625c:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   16260:	ldr	r3, [fp, #-8]
   16264:	mov	r0, r3
   16268:	sub	sp, fp, #4
   1626c:	pop	{fp, pc}
   16270:	andeq	r7, r0, r8, lsl r6
   16274:	andeq	r7, r0, r4, ror #1
   16278:	ldrdeq	r7, [r0], -r8
   1627c:	push	{fp, lr}
   16280:	add	fp, sp, #4
   16284:	sub	sp, sp, #24
   16288:	str	r0, [fp, #-16]
   1628c:	str	r1, [fp, #-20]	; 0xffffffec
   16290:	str	r2, [fp, #-24]	; 0xffffffe8
   16294:	ldr	r3, [fp, #-16]
   16298:	ldr	r3, [r3, #32]
   1629c:	ldr	r3, [r3, #20]
   162a0:	str	r3, [fp, #-8]
   162a4:	ldr	r2, [fp, #-8]
   162a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   162ac:	add	r3, r2, r3
   162b0:	str	r3, [fp, #-12]
   162b4:	ldr	r2, [fp, #-8]
   162b8:	ldr	r3, [fp, #-12]
   162bc:	cmp	r2, r3
   162c0:	bhi	162d4 <flatcc_builder_end_struct@@Base+0xf8>
   162c4:	ldr	r2, [fp, #-12]
   162c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162cc:	cmp	r2, r3
   162d0:	bls	1631c <flatcc_builder_end_struct@@Base+0x140>
   162d4:	ldr	r2, [fp, #-8]
   162d8:	ldr	r3, [fp, #-12]
   162dc:	cmp	r2, r3
   162e0:	bhi	162f4 <flatcc_builder_end_struct@@Base+0x118>
   162e4:	ldr	r2, [fp, #-12]
   162e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162ec:	cmp	r2, r3
   162f0:	bls	16314 <flatcc_builder_end_struct@@Base+0x138>
   162f4:	ldr	r3, [pc, #64]	; 1633c <flatcc_builder_end_struct@@Base+0x160>
   162f8:	add	r3, pc, r3
   162fc:	mov	r2, #892	; 0x37c
   16300:	ldr	r1, [pc, #56]	; 16340 <flatcc_builder_end_struct@@Base+0x164>
   16304:	add	r1, pc, r1
   16308:	ldr	r0, [pc, #52]	; 16344 <flatcc_builder_end_struct@@Base+0x168>
   1630c:	add	r0, pc, r0
   16310:	bl	1234c <__assert_fail@plt>
   16314:	mvn	r3, #0
   16318:	b	16330 <flatcc_builder_end_struct@@Base+0x154>
   1631c:	ldr	r3, [fp, #-16]
   16320:	ldr	r3, [r3, #32]
   16324:	ldr	r2, [fp, #-12]
   16328:	str	r2, [r3, #20]
   1632c:	mov	r3, #0
   16330:	mov	r0, r3
   16334:	sub	sp, fp, #4
   16338:	pop	{fp, pc}
   1633c:	andeq	r7, r0, r0, asr #10
   16340:	strdeq	r6, [r0], -r0
   16344:	andeq	r7, r0, r0, lsl r1

00016348 <flatcc_builder_extend_vector@@Base>:
   16348:	push	{fp, lr}
   1634c:	add	fp, sp, #4
   16350:	sub	sp, sp, #8
   16354:	str	r0, [fp, #-8]
   16358:	str	r1, [fp, #-12]
   1635c:	ldr	r3, [fp, #-8]
   16360:	ldr	r3, [r3, #32]
   16364:	ldr	r3, [r3, #24]
   16368:	mov	r2, r3
   1636c:	ldr	r1, [fp, #-12]
   16370:	ldr	r0, [fp, #-8]
   16374:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   16378:	mov	r3, r0
   1637c:	cmp	r3, #0
   16380:	beq	1638c <flatcc_builder_extend_vector@@Base+0x44>
   16384:	mov	r3, #0
   16388:	b	163b0 <flatcc_builder_extend_vector@@Base+0x68>
   1638c:	ldr	r3, [fp, #-8]
   16390:	ldr	r3, [r3, #32]
   16394:	ldr	r3, [r3, #16]
   16398:	ldr	r2, [fp, #-12]
   1639c:	mul	r3, r2, r3
   163a0:	mov	r1, r3
   163a4:	ldr	r0, [fp, #-8]
   163a8:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   163ac:	mov	r3, r0
   163b0:	mov	r0, r3
   163b4:	sub	sp, fp, #4
   163b8:	pop	{fp, pc}

000163bc <flatcc_builder_vector_push@@Base>:
   163bc:	push	{fp, lr}
   163c0:	add	fp, sp, #4
   163c4:	sub	sp, sp, #8
   163c8:	str	r0, [fp, #-8]
   163cc:	str	r1, [fp, #-12]
   163d0:	ldr	r3, [fp, #-8]
   163d4:	ldr	r3, [r3, #32]
   163d8:	ldrh	r3, [r3, #14]
   163dc:	cmp	r3, #4
   163e0:	beq	16404 <flatcc_builder_vector_push@@Base+0x48>
   163e4:	ldr	r3, [pc, #200]	; 164b4 <flatcc_builder_vector_push@@Base+0xf8>
   163e8:	add	r3, pc, r3
   163ec:	ldr	r2, [pc, #196]	; 164b8 <flatcc_builder_vector_push@@Base+0xfc>
   163f0:	ldr	r1, [pc, #196]	; 164bc <flatcc_builder_vector_push@@Base+0x100>
   163f4:	add	r1, pc, r1
   163f8:	ldr	r0, [pc, #192]	; 164c0 <flatcc_builder_vector_push@@Base+0x104>
   163fc:	add	r0, pc, r0
   16400:	bl	1234c <__assert_fail@plt>
   16404:	ldr	r3, [fp, #-8]
   16408:	ldr	r3, [r3, #32]
   1640c:	ldr	r2, [r3, #20]
   16410:	ldr	r3, [fp, #-8]
   16414:	ldr	r3, [r3, #32]
   16418:	ldr	r3, [r3, #24]
   1641c:	cmp	r2, r3
   16420:	bls	1646c <flatcc_builder_vector_push@@Base+0xb0>
   16424:	ldr	r3, [fp, #-8]
   16428:	ldr	r3, [r3, #32]
   1642c:	ldr	r2, [r3, #20]
   16430:	ldr	r3, [fp, #-8]
   16434:	ldr	r3, [r3, #32]
   16438:	ldr	r3, [r3, #24]
   1643c:	cmp	r2, r3
   16440:	bls	16464 <flatcc_builder_vector_push@@Base+0xa8>
   16444:	ldr	r3, [pc, #120]	; 164c4 <flatcc_builder_vector_push@@Base+0x108>
   16448:	add	r3, pc, r3
   1644c:	mov	r2, #908	; 0x38c
   16450:	ldr	r1, [pc, #112]	; 164c8 <flatcc_builder_vector_push@@Base+0x10c>
   16454:	add	r1, pc, r1
   16458:	ldr	r0, [pc, #108]	; 164cc <flatcc_builder_vector_push@@Base+0x110>
   1645c:	add	r0, pc, r0
   16460:	bl	1234c <__assert_fail@plt>
   16464:	mov	r3, #0
   16468:	b	164a8 <flatcc_builder_vector_push@@Base+0xec>
   1646c:	ldr	r3, [fp, #-8]
   16470:	ldr	r3, [r3, #32]
   16474:	ldr	r2, [fp, #-8]
   16478:	ldr	r2, [r2, #32]
   1647c:	ldr	r2, [r2, #20]
   16480:	add	r2, r2, #1
   16484:	str	r2, [r3, #20]
   16488:	ldr	r3, [fp, #-8]
   1648c:	ldr	r3, [r3, #32]
   16490:	ldr	r3, [r3, #16]
   16494:	mov	r2, r3
   16498:	ldr	r1, [fp, #-12]
   1649c:	ldr	r0, [fp, #-8]
   164a0:	bl	141fc <flatcc_builder_default_alloc@@Base+0x3e8>
   164a4:	mov	r3, r0
   164a8:	mov	r0, r3
   164ac:	sub	sp, fp, #4
   164b0:	pop	{fp, pc}
   164b4:	andeq	r7, r0, r4, ror #8
   164b8:	andeq	r0, r0, fp, lsl #7
   164bc:	andeq	r6, r0, r0, lsl #30
   164c0:	andeq	r7, r0, ip, lsr r0
   164c4:	andeq	r7, r0, r4, lsl #8
   164c8:	andeq	r6, r0, r0, lsr #29
   164cc:	andeq	r7, r0, r8

000164d0 <flatcc_builder_append_vector@@Base>:
   164d0:	push	{fp, lr}
   164d4:	add	fp, sp, #4
   164d8:	sub	sp, sp, #16
   164dc:	str	r0, [fp, #-8]
   164e0:	str	r1, [fp, #-12]
   164e4:	str	r2, [fp, #-16]
   164e8:	ldr	r3, [fp, #-8]
   164ec:	ldr	r3, [r3, #32]
   164f0:	ldrh	r3, [r3, #14]
   164f4:	cmp	r3, #4
   164f8:	beq	1651c <flatcc_builder_append_vector@@Base+0x4c>
   164fc:	ldr	r3, [pc, #124]	; 16580 <flatcc_builder_append_vector@@Base+0xb0>
   16500:	add	r3, pc, r3
   16504:	ldr	r2, [pc, #120]	; 16584 <flatcc_builder_append_vector@@Base+0xb4>
   16508:	ldr	r1, [pc, #120]	; 16588 <flatcc_builder_append_vector@@Base+0xb8>
   1650c:	add	r1, pc, r1
   16510:	ldr	r0, [pc, #116]	; 1658c <flatcc_builder_append_vector@@Base+0xbc>
   16514:	add	r0, pc, r0
   16518:	bl	1234c <__assert_fail@plt>
   1651c:	ldr	r3, [fp, #-8]
   16520:	ldr	r3, [r3, #32]
   16524:	ldr	r3, [r3, #24]
   16528:	mov	r2, r3
   1652c:	ldr	r1, [fp, #-16]
   16530:	ldr	r0, [fp, #-8]
   16534:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   16538:	mov	r3, r0
   1653c:	cmp	r3, #0
   16540:	beq	1654c <flatcc_builder_append_vector@@Base+0x7c>
   16544:	mov	r3, #0
   16548:	b	16574 <flatcc_builder_append_vector@@Base+0xa4>
   1654c:	ldr	r3, [fp, #-8]
   16550:	ldr	r3, [r3, #32]
   16554:	ldr	r3, [r3, #16]
   16558:	ldr	r2, [fp, #-16]
   1655c:	mul	r3, r2, r3
   16560:	mov	r2, r3
   16564:	ldr	r1, [fp, #-12]
   16568:	ldr	r0, [fp, #-8]
   1656c:	bl	141fc <flatcc_builder_default_alloc@@Base+0x3e8>
   16570:	mov	r3, r0
   16574:	mov	r0, r3
   16578:	sub	sp, fp, #4
   1657c:	pop	{fp, pc}
   16580:	andeq	r7, r0, r8, ror #6
   16584:	muleq	r0, r3, r3
   16588:	andeq	r6, r0, r8, ror #27
   1658c:	andeq	r6, r0, r4, lsr #30

00016590 <flatcc_builder_extend_offset_vector@@Base>:
   16590:	push	{fp, lr}
   16594:	add	fp, sp, #4
   16598:	sub	sp, sp, #8
   1659c:	str	r0, [fp, #-8]
   165a0:	str	r1, [fp, #-12]
   165a4:	mvn	r2, #-1073741824	; 0xc0000000
   165a8:	ldr	r1, [fp, #-12]
   165ac:	ldr	r0, [fp, #-8]
   165b0:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   165b4:	mov	r3, r0
   165b8:	cmp	r3, #0
   165bc:	beq	165c8 <flatcc_builder_extend_offset_vector@@Base+0x38>
   165c0:	mov	r3, #0
   165c4:	b	165e0 <flatcc_builder_extend_offset_vector@@Base+0x50>
   165c8:	ldr	r3, [fp, #-12]
   165cc:	lsl	r3, r3, #2
   165d0:	mov	r1, r3
   165d4:	ldr	r0, [fp, #-8]
   165d8:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   165dc:	mov	r3, r0
   165e0:	mov	r0, r3
   165e4:	sub	sp, fp, #4
   165e8:	pop	{fp, pc}

000165ec <flatcc_builder_offset_vector_push@@Base>:
   165ec:	push	{fp, lr}
   165f0:	add	fp, sp, #4
   165f4:	sub	sp, sp, #16
   165f8:	str	r0, [fp, #-16]
   165fc:	str	r1, [fp, #-20]	; 0xffffffec
   16600:	ldr	r3, [fp, #-16]
   16604:	ldr	r3, [r3, #32]
   16608:	ldrh	r3, [r3, #14]
   1660c:	cmp	r3, #5
   16610:	beq	16634 <flatcc_builder_offset_vector_push@@Base+0x48>
   16614:	ldr	r3, [pc, #144]	; 166ac <flatcc_builder_offset_vector_push@@Base+0xc0>
   16618:	add	r3, pc, r3
   1661c:	ldr	r2, [pc, #140]	; 166b0 <flatcc_builder_offset_vector_push@@Base+0xc4>
   16620:	ldr	r1, [pc, #140]	; 166b4 <flatcc_builder_offset_vector_push@@Base+0xc8>
   16624:	add	r1, pc, r1
   16628:	ldr	r0, [pc, #136]	; 166b8 <flatcc_builder_offset_vector_push@@Base+0xcc>
   1662c:	add	r0, pc, r0
   16630:	bl	1234c <__assert_fail@plt>
   16634:	ldr	r3, [fp, #-16]
   16638:	ldr	r3, [r3, #32]
   1663c:	ldr	r3, [r3, #20]
   16640:	cmn	r3, #-1073741823	; 0xc0000001
   16644:	bne	16650 <flatcc_builder_offset_vector_push@@Base+0x64>
   16648:	mov	r3, #0
   1664c:	b	166a0 <flatcc_builder_offset_vector_push@@Base+0xb4>
   16650:	ldr	r3, [fp, #-16]
   16654:	ldr	r3, [r3, #32]
   16658:	ldr	r2, [fp, #-16]
   1665c:	ldr	r2, [r2, #32]
   16660:	ldr	r2, [r2, #20]
   16664:	add	r2, r2, #1
   16668:	str	r2, [r3, #20]
   1666c:	mov	r1, #4
   16670:	ldr	r0, [fp, #-16]
   16674:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   16678:	str	r0, [fp, #-8]
   1667c:	ldr	r3, [fp, #-8]
   16680:	cmp	r3, #0
   16684:	bne	16690 <flatcc_builder_offset_vector_push@@Base+0xa4>
   16688:	mov	r3, #0
   1668c:	b	166a0 <flatcc_builder_offset_vector_push@@Base+0xb4>
   16690:	ldr	r3, [fp, #-8]
   16694:	ldr	r2, [fp, #-20]	; 0xffffffec
   16698:	str	r2, [r3]
   1669c:	ldr	r3, [fp, #-8]
   166a0:	mov	r0, r3
   166a4:	sub	sp, fp, #4
   166a8:	pop	{fp, pc}
   166ac:	andeq	r7, r0, r0, ror r2
   166b0:	andeq	r0, r0, r6, lsr #7
   166b4:	ldrdeq	r6, [r0], -r0
   166b8:	andeq	r6, r0, r8, ror lr

000166bc <flatcc_builder_append_offset_vector@@Base>:
   166bc:	push	{fp, lr}
   166c0:	add	fp, sp, #4
   166c4:	sub	sp, sp, #16
   166c8:	str	r0, [fp, #-8]
   166cc:	str	r1, [fp, #-12]
   166d0:	str	r2, [fp, #-16]
   166d4:	ldr	r3, [fp, #-8]
   166d8:	ldr	r3, [r3, #32]
   166dc:	ldrh	r3, [r3, #14]
   166e0:	cmp	r3, #5
   166e4:	beq	16708 <flatcc_builder_append_offset_vector@@Base+0x4c>
   166e8:	ldr	r3, [pc, #100]	; 16754 <flatcc_builder_append_offset_vector@@Base+0x98>
   166ec:	add	r3, pc, r3
   166f0:	mov	r2, #948	; 0x3b4
   166f4:	ldr	r1, [pc, #92]	; 16758 <flatcc_builder_append_offset_vector@@Base+0x9c>
   166f8:	add	r1, pc, r1
   166fc:	ldr	r0, [pc, #88]	; 1675c <flatcc_builder_append_offset_vector@@Base+0xa0>
   16700:	add	r0, pc, r0
   16704:	bl	1234c <__assert_fail@plt>
   16708:	mvn	r2, #-1073741824	; 0xc0000000
   1670c:	ldr	r1, [fp, #-16]
   16710:	ldr	r0, [fp, #-8]
   16714:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   16718:	mov	r3, r0
   1671c:	cmp	r3, #0
   16720:	beq	1672c <flatcc_builder_append_offset_vector@@Base+0x70>
   16724:	mov	r3, #0
   16728:	b	16748 <flatcc_builder_append_offset_vector@@Base+0x8c>
   1672c:	ldr	r3, [fp, #-16]
   16730:	lsl	r3, r3, #2
   16734:	mov	r2, r3
   16738:	ldr	r1, [fp, #-12]
   1673c:	ldr	r0, [fp, #-8]
   16740:	bl	141fc <flatcc_builder_default_alloc@@Base+0x3e8>
   16744:	mov	r3, r0
   16748:	mov	r0, r3
   1674c:	sub	sp, fp, #4
   16750:	pop	{fp, pc}
   16754:	andeq	r7, r0, r0, asr #3
   16758:	strdeq	r6, [r0], -ip
   1675c:	andeq	r6, r0, r4, lsr #27

00016760 <flatcc_builder_extend_string@@Base>:
   16760:	push	{fp, lr}
   16764:	add	fp, sp, #4
   16768:	sub	sp, sp, #8
   1676c:	str	r0, [fp, #-8]
   16770:	str	r1, [fp, #-12]
   16774:	ldr	r3, [fp, #-8]
   16778:	ldr	r3, [r3, #32]
   1677c:	ldrh	r3, [r3, #14]
   16780:	cmp	r3, #6
   16784:	beq	167a8 <flatcc_builder_extend_string@@Base+0x48>
   16788:	ldr	r3, [pc, #88]	; 167e8 <flatcc_builder_extend_string@@Base+0x88>
   1678c:	add	r3, pc, r3
   16790:	ldr	r2, [pc, #84]	; 167ec <flatcc_builder_extend_string@@Base+0x8c>
   16794:	ldr	r1, [pc, #84]	; 167f0 <flatcc_builder_extend_string@@Base+0x90>
   16798:	add	r1, pc, r1
   1679c:	ldr	r0, [pc, #80]	; 167f4 <flatcc_builder_extend_string@@Base+0x94>
   167a0:	add	r0, pc, r0
   167a4:	bl	1234c <__assert_fail@plt>
   167a8:	mvn	r2, #0
   167ac:	ldr	r1, [fp, #-12]
   167b0:	ldr	r0, [fp, #-8]
   167b4:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   167b8:	mov	r3, r0
   167bc:	cmp	r3, #0
   167c0:	beq	167cc <flatcc_builder_extend_string@@Base+0x6c>
   167c4:	mov	r3, #0
   167c8:	b	167dc <flatcc_builder_extend_string@@Base+0x7c>
   167cc:	ldr	r1, [fp, #-12]
   167d0:	ldr	r0, [fp, #-8]
   167d4:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   167d8:	mov	r3, r0
   167dc:	mov	r0, r3
   167e0:	sub	sp, fp, #4
   167e4:	pop	{fp, pc}
   167e8:	andeq	r7, r0, r4, asr #2
   167ec:			; <UNDEFINED> instruction: 0x000003bd
   167f0:	andeq	r6, r0, ip, asr fp
   167f4:	andeq	r6, r0, r8, lsr sp

000167f8 <flatcc_builder_append_string@@Base>:
   167f8:	push	{fp, lr}
   167fc:	add	fp, sp, #4
   16800:	sub	sp, sp, #16
   16804:	str	r0, [fp, #-8]
   16808:	str	r1, [fp, #-12]
   1680c:	str	r2, [fp, #-16]
   16810:	ldr	r3, [fp, #-8]
   16814:	ldr	r3, [r3, #32]
   16818:	ldrh	r3, [r3, #14]
   1681c:	cmp	r3, #6
   16820:	beq	16844 <flatcc_builder_append_string@@Base+0x4c>
   16824:	ldr	r3, [pc, #92]	; 16888 <flatcc_builder_append_string@@Base+0x90>
   16828:	add	r3, pc, r3
   1682c:	ldr	r2, [pc, #88]	; 1688c <flatcc_builder_append_string@@Base+0x94>
   16830:	ldr	r1, [pc, #88]	; 16890 <flatcc_builder_append_string@@Base+0x98>
   16834:	add	r1, pc, r1
   16838:	ldr	r0, [pc, #84]	; 16894 <flatcc_builder_append_string@@Base+0x9c>
   1683c:	add	r0, pc, r0
   16840:	bl	1234c <__assert_fail@plt>
   16844:	mvn	r2, #0
   16848:	ldr	r1, [fp, #-16]
   1684c:	ldr	r0, [fp, #-8]
   16850:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   16854:	mov	r3, r0
   16858:	cmp	r3, #0
   1685c:	beq	16868 <flatcc_builder_append_string@@Base+0x70>
   16860:	mov	r3, #0
   16864:	b	1687c <flatcc_builder_append_string@@Base+0x84>
   16868:	ldr	r2, [fp, #-16]
   1686c:	ldr	r1, [fp, #-12]
   16870:	ldr	r0, [fp, #-8]
   16874:	bl	141fc <flatcc_builder_default_alloc@@Base+0x3e8>
   16878:	mov	r3, r0
   1687c:	mov	r0, r3
   16880:	sub	sp, fp, #4
   16884:	pop	{fp, pc}
   16888:	andeq	r7, r0, r8, asr #1
   1688c:	andeq	r0, r0, r6, asr #7
   16890:	andeq	r6, r0, r0, asr #21
   16894:	muleq	r0, ip, ip

00016898 <flatcc_builder_append_string_str@@Base>:
   16898:	push	{fp, lr}
   1689c:	add	fp, sp, #4
   168a0:	sub	sp, sp, #8
   168a4:	str	r0, [fp, #-8]
   168a8:	str	r1, [fp, #-12]
   168ac:	ldr	r0, [fp, #-12]
   168b0:	bl	12304 <strlen@plt>
   168b4:	mov	r3, r0
   168b8:	mov	r2, r3
   168bc:	ldr	r1, [fp, #-12]
   168c0:	ldr	r0, [fp, #-8]
   168c4:	bl	167f8 <flatcc_builder_append_string@@Base>
   168c8:	mov	r3, r0
   168cc:	mov	r0, r3
   168d0:	sub	sp, fp, #4
   168d4:	pop	{fp, pc}

000168d8 <flatcc_builder_append_string_strn@@Base>:
   168d8:	push	{fp, lr}
   168dc:	add	fp, sp, #4
   168e0:	sub	sp, sp, #16
   168e4:	str	r0, [fp, #-8]
   168e8:	str	r1, [fp, #-12]
   168ec:	str	r2, [fp, #-16]
   168f0:	ldr	r1, [fp, #-16]
   168f4:	ldr	r0, [fp, #-12]
   168f8:	bl	13dc0 <main@@Base+0x20c>
   168fc:	mov	r3, r0
   16900:	mov	r2, r3
   16904:	ldr	r1, [fp, #-12]
   16908:	ldr	r0, [fp, #-8]
   1690c:	bl	167f8 <flatcc_builder_append_string@@Base>
   16910:	mov	r3, r0
   16914:	mov	r0, r3
   16918:	sub	sp, fp, #4
   1691c:	pop	{fp, pc}

00016920 <flatcc_builder_truncate_vector@@Base>:
   16920:	push	{fp, lr}
   16924:	add	fp, sp, #4
   16928:	sub	sp, sp, #8
   1692c:	str	r0, [fp, #-8]
   16930:	str	r1, [fp, #-12]
   16934:	ldr	r3, [fp, #-8]
   16938:	ldr	r3, [r3, #32]
   1693c:	ldrh	r3, [r3, #14]
   16940:	cmp	r3, #4
   16944:	beq	16968 <flatcc_builder_truncate_vector@@Base+0x48>
   16948:	ldr	r3, [pc, #192]	; 16a10 <flatcc_builder_truncate_vector@@Base+0xf0>
   1694c:	add	r3, pc, r3
   16950:	ldr	r2, [pc, #188]	; 16a14 <flatcc_builder_truncate_vector@@Base+0xf4>
   16954:	ldr	r1, [pc, #188]	; 16a18 <flatcc_builder_truncate_vector@@Base+0xf8>
   16958:	add	r1, pc, r1
   1695c:	ldr	r0, [pc, #184]	; 16a1c <flatcc_builder_truncate_vector@@Base+0xfc>
   16960:	add	r0, pc, r0
   16964:	bl	1234c <__assert_fail@plt>
   16968:	ldr	r3, [fp, #-8]
   1696c:	ldr	r3, [r3, #32]
   16970:	ldr	r2, [r3, #20]
   16974:	ldr	r3, [fp, #-12]
   16978:	cmp	r2, r3
   1697c:	bcs	169c0 <flatcc_builder_truncate_vector@@Base+0xa0>
   16980:	ldr	r3, [fp, #-8]
   16984:	ldr	r3, [r3, #32]
   16988:	ldr	r2, [r3, #20]
   1698c:	ldr	r3, [fp, #-12]
   16990:	cmp	r2, r3
   16994:	bcs	169b8 <flatcc_builder_truncate_vector@@Base+0x98>
   16998:	ldr	r3, [pc, #128]	; 16a20 <flatcc_builder_truncate_vector@@Base+0x100>
   1699c:	add	r3, pc, r3
   169a0:	ldr	r2, [pc, #124]	; 16a24 <flatcc_builder_truncate_vector@@Base+0x104>
   169a4:	ldr	r1, [pc, #124]	; 16a28 <flatcc_builder_truncate_vector@@Base+0x108>
   169a8:	add	r1, pc, r1
   169ac:	ldr	r0, [pc, #120]	; 16a2c <flatcc_builder_truncate_vector@@Base+0x10c>
   169b0:	add	r0, pc, r0
   169b4:	bl	1234c <__assert_fail@plt>
   169b8:	mvn	r3, #0
   169bc:	b	16a04 <flatcc_builder_truncate_vector@@Base+0xe4>
   169c0:	ldr	r3, [fp, #-8]
   169c4:	ldr	r3, [r3, #32]
   169c8:	ldr	r2, [fp, #-8]
   169cc:	ldr	r2, [r2, #32]
   169d0:	ldr	r1, [r2, #20]
   169d4:	ldr	r2, [fp, #-12]
   169d8:	sub	r2, r1, r2
   169dc:	str	r2, [r3, #20]
   169e0:	ldr	r3, [fp, #-8]
   169e4:	ldr	r3, [r3, #32]
   169e8:	ldr	r3, [r3, #16]
   169ec:	ldr	r2, [fp, #-12]
   169f0:	mul	r3, r2, r3
   169f4:	mov	r1, r3
   169f8:	ldr	r0, [fp, #-8]
   169fc:	bl	141a0 <flatcc_builder_default_alloc@@Base+0x38c>
   16a00:	mov	r3, #0
   16a04:	mov	r0, r3
   16a08:	sub	sp, fp, #4
   16a0c:	pop	{fp, pc}
   16a10:	andeq	r6, r0, r4, asr #31
   16a14:	ldrdeq	r0, [r0], -r9
   16a18:	muleq	r0, ip, r9
   16a1c:	ldrdeq	r6, [r0], -r8
   16a20:	andeq	r6, r0, r4, ror pc
   16a24:	ldrdeq	r0, [r0], -sl
   16a28:	andeq	r6, r0, ip, asr #18
   16a2c:	andeq	r6, r0, r4, asr fp

00016a30 <flatcc_builder_truncate_offset_vector@@Base>:
   16a30:	push	{fp, lr}
   16a34:	add	fp, sp, #4
   16a38:	sub	sp, sp, #8
   16a3c:	str	r0, [fp, #-8]
   16a40:	str	r1, [fp, #-12]
   16a44:	ldr	r3, [fp, #-8]
   16a48:	ldr	r3, [r3, #32]
   16a4c:	ldrh	r3, [r3, #14]
   16a50:	cmp	r3, #5
   16a54:	beq	16a78 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   16a58:	ldr	r3, [pc, #192]	; 16b20 <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   16a5c:	add	r3, pc, r3
   16a60:	ldr	r2, [pc, #188]	; 16b24 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16a64:	ldr	r1, [pc, #188]	; 16b28 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   16a68:	add	r1, pc, r1
   16a6c:	ldr	r0, [pc, #184]	; 16b2c <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16a70:	add	r0, pc, r0
   16a74:	bl	1234c <__assert_fail@plt>
   16a78:	ldr	r3, [fp, #-8]
   16a7c:	ldr	r3, [r3, #32]
   16a80:	ldr	r2, [r3, #20]
   16a84:	ldr	r3, [fp, #-12]
   16a88:	cmp	r2, r3
   16a8c:	bcs	16ad0 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16a90:	ldr	r3, [fp, #-8]
   16a94:	ldr	r3, [r3, #32]
   16a98:	ldr	r2, [r3, #20]
   16a9c:	ldr	r3, [fp, #-12]
   16aa0:	cmp	r2, r3
   16aa4:	bcs	16ac8 <flatcc_builder_truncate_offset_vector@@Base+0x98>
   16aa8:	ldr	r3, [pc, #128]	; 16b30 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16aac:	add	r3, pc, r3
   16ab0:	ldr	r2, [pc, #124]	; 16b34 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16ab4:	ldr	r1, [pc, #124]	; 16b38 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16ab8:	add	r1, pc, r1
   16abc:	ldr	r0, [pc, #120]	; 16b3c <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   16ac0:	add	r0, pc, r0
   16ac4:	bl	1234c <__assert_fail@plt>
   16ac8:	mvn	r3, #0
   16acc:	b	16b14 <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   16ad0:	ldr	r3, [fp, #-8]
   16ad4:	ldr	r3, [r3, #32]
   16ad8:	ldr	r2, [fp, #-8]
   16adc:	ldr	r2, [r2, #32]
   16ae0:	ldr	r1, [r2, #20]
   16ae4:	ldr	r2, [fp, #-12]
   16ae8:	sub	r2, r1, r2
   16aec:	str	r2, [r3, #20]
   16af0:	ldr	r3, [fp, #-8]
   16af4:	ldr	r3, [r3, #32]
   16af8:	ldr	r3, [r3, #16]
   16afc:	ldr	r2, [fp, #-12]
   16b00:	mul	r3, r2, r3
   16b04:	mov	r1, r3
   16b08:	ldr	r0, [fp, #-8]
   16b0c:	bl	141a0 <flatcc_builder_default_alloc@@Base+0x38c>
   16b10:	mov	r3, #0
   16b14:	mov	r0, r3
   16b18:	sub	sp, fp, #4
   16b1c:	pop	{fp, pc}
   16b20:	ldrdeq	r6, [r0], -r4
   16b24:	andeq	r0, r0, r2, ror #7
   16b28:	andeq	r6, r0, ip, lsl #17
   16b2c:	andeq	r6, r0, r4, lsr sl
   16b30:	andeq	r6, r0, r4, lsl #29
   16b34:	andeq	r0, r0, r3, ror #7
   16b38:	andeq	r6, r0, ip, lsr r8
   16b3c:	andeq	r6, r0, r8, ror #20

00016b40 <flatcc_builder_truncate_string@@Base>:
   16b40:	push	{fp, lr}
   16b44:	add	fp, sp, #4
   16b48:	sub	sp, sp, #8
   16b4c:	str	r0, [fp, #-8]
   16b50:	str	r1, [fp, #-12]
   16b54:	ldr	r3, [fp, #-8]
   16b58:	ldr	r3, [r3, #32]
   16b5c:	ldrh	r3, [r3, #14]
   16b60:	cmp	r3, #6
   16b64:	beq	16b88 <flatcc_builder_truncate_string@@Base+0x48>
   16b68:	ldr	r3, [pc, #172]	; 16c1c <flatcc_builder_truncate_string@@Base+0xdc>
   16b6c:	add	r3, pc, r3
   16b70:	ldr	r2, [pc, #168]	; 16c20 <flatcc_builder_truncate_string@@Base+0xe0>
   16b74:	ldr	r1, [pc, #168]	; 16c24 <flatcc_builder_truncate_string@@Base+0xe4>
   16b78:	add	r1, pc, r1
   16b7c:	ldr	r0, [pc, #164]	; 16c28 <flatcc_builder_truncate_string@@Base+0xe8>
   16b80:	add	r0, pc, r0
   16b84:	bl	1234c <__assert_fail@plt>
   16b88:	ldr	r3, [fp, #-8]
   16b8c:	ldr	r3, [r3, #32]
   16b90:	ldr	r2, [r3, #20]
   16b94:	ldr	r3, [fp, #-12]
   16b98:	cmp	r2, r3
   16b9c:	bcs	16be0 <flatcc_builder_truncate_string@@Base+0xa0>
   16ba0:	ldr	r3, [fp, #-8]
   16ba4:	ldr	r3, [r3, #32]
   16ba8:	ldr	r2, [r3, #20]
   16bac:	ldr	r3, [fp, #-12]
   16bb0:	cmp	r2, r3
   16bb4:	bcs	16bd8 <flatcc_builder_truncate_string@@Base+0x98>
   16bb8:	ldr	r3, [pc, #108]	; 16c2c <flatcc_builder_truncate_string@@Base+0xec>
   16bbc:	add	r3, pc, r3
   16bc0:	mov	r2, #1004	; 0x3ec
   16bc4:	ldr	r1, [pc, #100]	; 16c30 <flatcc_builder_truncate_string@@Base+0xf0>
   16bc8:	add	r1, pc, r1
   16bcc:	ldr	r0, [pc, #96]	; 16c34 <flatcc_builder_truncate_string@@Base+0xf4>
   16bd0:	add	r0, pc, r0
   16bd4:	bl	1234c <__assert_fail@plt>
   16bd8:	mvn	r3, #0
   16bdc:	b	16c10 <flatcc_builder_truncate_string@@Base+0xd0>
   16be0:	ldr	r3, [fp, #-8]
   16be4:	ldr	r3, [r3, #32]
   16be8:	ldr	r2, [fp, #-8]
   16bec:	ldr	r2, [r2, #32]
   16bf0:	ldr	r1, [r2, #20]
   16bf4:	ldr	r2, [fp, #-12]
   16bf8:	sub	r2, r1, r2
   16bfc:	str	r2, [r3, #20]
   16c00:	ldr	r1, [fp, #-12]
   16c04:	ldr	r0, [fp, #-8]
   16c08:	bl	141a0 <flatcc_builder_default_alloc@@Base+0x38c>
   16c0c:	mov	r3, #0
   16c10:	mov	r0, r3
   16c14:	sub	sp, fp, #4
   16c18:	pop	{fp, pc}
   16c1c:	andeq	r6, r0, ip, ror #27
   16c20:	andeq	r0, r0, fp, ror #7
   16c24:	andeq	r6, r0, ip, ror r7
   16c28:	andeq	r6, r0, r8, asr r9
   16c2c:	muleq	r0, ip, sp
   16c30:	andeq	r6, r0, ip, lsr #14
   16c34:	muleq	r0, r4, r9

00016c38 <flatcc_builder_start_vector@@Base>:
   16c38:	push	{fp, lr}
   16c3c:	add	fp, sp, #4
   16c40:	sub	sp, sp, #16
   16c44:	str	r0, [fp, #-8]
   16c48:	str	r1, [fp, #-12]
   16c4c:	str	r3, [fp, #-20]	; 0xffffffec
   16c50:	strh	r2, [fp, #-14]
   16c54:	sub	r3, fp, #14
   16c58:	mov	r1, #4
   16c5c:	mov	r0, r3
   16c60:	bl	14d18 <flatcc_builder_clear@@Base+0xf8>
   16c64:	ldrh	r3, [fp, #-14]
   16c68:	mov	r1, r3
   16c6c:	ldr	r0, [fp, #-8]
   16c70:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16c74:	mov	r3, r0
   16c78:	cmp	r3, #0
   16c7c:	beq	16c88 <flatcc_builder_start_vector@@Base+0x50>
   16c80:	mvn	r3, #0
   16c84:	b	16cd8 <flatcc_builder_start_vector@@Base+0xa0>
   16c88:	ldr	r3, [fp, #-8]
   16c8c:	ldr	r3, [r3, #32]
   16c90:	ldr	r2, [fp, #-12]
   16c94:	str	r2, [r3, #16]
   16c98:	ldr	r3, [fp, #-8]
   16c9c:	ldr	r3, [r3, #32]
   16ca0:	mov	r2, #0
   16ca4:	str	r2, [r3, #20]
   16ca8:	ldr	r3, [fp, #-8]
   16cac:	ldr	r3, [r3, #32]
   16cb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   16cb4:	str	r2, [r3, #24]
   16cb8:	ldr	r3, [fp, #-8]
   16cbc:	ldr	r3, [r3, #32]
   16cc0:	mov	r2, #4
   16cc4:	strh	r2, [r3, #14]
   16cc8:	mvn	r1, #3
   16ccc:	ldr	r0, [fp, #-8]
   16cd0:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   16cd4:	mov	r3, #0
   16cd8:	mov	r0, r3
   16cdc:	sub	sp, fp, #4
   16ce0:	pop	{fp, pc}

00016ce4 <flatcc_builder_start_offset_vector@@Base>:
   16ce4:	push	{fp, lr}
   16ce8:	add	fp, sp, #4
   16cec:	sub	sp, sp, #8
   16cf0:	str	r0, [fp, #-8]
   16cf4:	mov	r1, #4
   16cf8:	ldr	r0, [fp, #-8]
   16cfc:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16d00:	mov	r3, r0
   16d04:	cmp	r3, #0
   16d08:	beq	16d14 <flatcc_builder_start_offset_vector@@Base+0x30>
   16d0c:	mvn	r3, #0
   16d10:	b	16d54 <flatcc_builder_start_offset_vector@@Base+0x70>
   16d14:	ldr	r3, [fp, #-8]
   16d18:	ldr	r3, [r3, #32]
   16d1c:	mov	r2, #4
   16d20:	str	r2, [r3, #16]
   16d24:	ldr	r3, [fp, #-8]
   16d28:	ldr	r3, [r3, #32]
   16d2c:	mov	r2, #0
   16d30:	str	r2, [r3, #20]
   16d34:	ldr	r3, [fp, #-8]
   16d38:	ldr	r3, [r3, #32]
   16d3c:	mov	r2, #5
   16d40:	strh	r2, [r3, #14]
   16d44:	mvn	r1, #3
   16d48:	ldr	r0, [fp, #-8]
   16d4c:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   16d50:	mov	r3, #0
   16d54:	mov	r0, r3
   16d58:	sub	sp, fp, #4
   16d5c:	pop	{fp, pc}

00016d60 <flatcc_builder_create_offset_vector@@Base>:
   16d60:	push	{fp, lr}
   16d64:	add	fp, sp, #4
   16d68:	sub	sp, sp, #24
   16d6c:	str	r0, [fp, #-16]
   16d70:	str	r1, [fp, #-20]	; 0xffffffec
   16d74:	str	r2, [fp, #-24]	; 0xffffffe8
   16d78:	ldr	r0, [fp, #-16]
   16d7c:	bl	16ce4 <flatcc_builder_start_offset_vector@@Base>
   16d80:	mov	r3, r0
   16d84:	cmp	r3, #0
   16d88:	beq	16d94 <flatcc_builder_create_offset_vector@@Base+0x34>
   16d8c:	mov	r3, #0
   16d90:	b	16ddc <flatcc_builder_create_offset_vector@@Base+0x7c>
   16d94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16d98:	ldr	r0, [fp, #-16]
   16d9c:	bl	16590 <flatcc_builder_extend_offset_vector@@Base>
   16da0:	str	r0, [fp, #-8]
   16da4:	ldr	r3, [fp, #-8]
   16da8:	cmp	r3, #0
   16dac:	bne	16db8 <flatcc_builder_create_offset_vector@@Base+0x58>
   16db0:	mov	r3, #0
   16db4:	b	16ddc <flatcc_builder_create_offset_vector@@Base+0x7c>
   16db8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dbc:	lsl	r3, r3, #2
   16dc0:	mov	r2, r3
   16dc4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dc8:	ldr	r0, [fp, #-8]
   16dcc:	bl	122bc <memcpy@plt>
   16dd0:	ldr	r0, [fp, #-16]
   16dd4:	bl	18338 <flatcc_builder_end_offset_vector@@Base>
   16dd8:	mov	r3, r0
   16ddc:	mov	r0, r3
   16de0:	sub	sp, fp, #4
   16de4:	pop	{fp, pc}

00016de8 <flatcc_builder_start_string@@Base>:
   16de8:	push	{fp, lr}
   16dec:	add	fp, sp, #4
   16df0:	sub	sp, sp, #8
   16df4:	str	r0, [fp, #-8]
   16df8:	mov	r1, #1
   16dfc:	ldr	r0, [fp, #-8]
   16e00:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16e04:	mov	r3, r0
   16e08:	cmp	r3, #0
   16e0c:	beq	16e18 <flatcc_builder_start_string@@Base+0x30>
   16e10:	mvn	r3, #0
   16e14:	b	16e58 <flatcc_builder_start_string@@Base+0x70>
   16e18:	ldr	r3, [fp, #-8]
   16e1c:	ldr	r3, [r3, #32]
   16e20:	mov	r2, #1
   16e24:	str	r2, [r3, #16]
   16e28:	ldr	r3, [fp, #-8]
   16e2c:	ldr	r3, [r3, #32]
   16e30:	mov	r2, #0
   16e34:	str	r2, [r3, #20]
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	ldr	r3, [r3, #32]
   16e40:	mov	r2, #6
   16e44:	strh	r2, [r3, #14]
   16e48:	mvn	r1, #3
   16e4c:	ldr	r0, [fp, #-8]
   16e50:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   16e54:	mov	r3, #0
   16e58:	mov	r0, r3
   16e5c:	sub	sp, fp, #4
   16e60:	pop	{fp, pc}

00016e64 <flatcc_builder_reserve_table@@Base>:
   16e64:	push	{fp, lr}
   16e68:	add	fp, sp, #4
   16e6c:	sub	sp, sp, #8
   16e70:	str	r0, [fp, #-8]
   16e74:	str	r1, [fp, #-12]
   16e78:	ldr	r3, [fp, #-12]
   16e7c:	cmp	r3, #0
   16e80:	bge	16ea4 <flatcc_builder_reserve_table@@Base+0x40>
   16e84:	ldr	r3, [pc, #52]	; 16ec0 <flatcc_builder_reserve_table@@Base+0x5c>
   16e88:	add	r3, pc, r3
   16e8c:	ldr	r2, [pc, #48]	; 16ec4 <flatcc_builder_reserve_table@@Base+0x60>
   16e90:	ldr	r1, [pc, #48]	; 16ec8 <flatcc_builder_reserve_table@@Base+0x64>
   16e94:	add	r1, pc, r1
   16e98:	ldr	r0, [pc, #44]	; 16ecc <flatcc_builder_reserve_table@@Base+0x68>
   16e9c:	add	r0, pc, r0
   16ea0:	bl	1234c <__assert_fail@plt>
   16ea4:	ldr	r1, [fp, #-12]
   16ea8:	ldr	r0, [fp, #-8]
   16eac:	bl	1454c <flatcc_builder_default_alloc@@Base+0x738>
   16eb0:	mov	r3, r0
   16eb4:	mov	r0, r3
   16eb8:	sub	sp, fp, #4
   16ebc:	pop	{fp, pc}
   16ec0:	strdeq	r6, [r0], -r0
   16ec4:	andeq	r0, r0, r9, lsr #8
   16ec8:	andeq	r6, r0, r0, ror #8
   16ecc:	andeq	r6, r0, ip, ror #13

00016ed0 <flatcc_builder_start_table@@Base>:
   16ed0:	push	{fp, lr}
   16ed4:	add	fp, sp, #4
   16ed8:	sub	sp, sp, #8
   16edc:	str	r0, [fp, #-8]
   16ee0:	str	r1, [fp, #-12]
   16ee4:	mov	r1, #4
   16ee8:	ldr	r0, [fp, #-8]
   16eec:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16ef0:	mov	r3, r0
   16ef4:	cmp	r3, #0
   16ef8:	beq	16f04 <flatcc_builder_start_table@@Base+0x34>
   16efc:	mvn	r3, #0
   16f00:	b	16fd8 <flatcc_builder_start_table@@Base+0x108>
   16f04:	ldr	r3, [fp, #-8]
   16f08:	ldr	r3, [r3, #32]
   16f0c:	ldr	r2, [fp, #-8]
   16f10:	ldr	r2, [r2, #4]
   16f14:	mov	r1, r2
   16f18:	ldr	r2, [fp, #-8]
   16f1c:	ldr	r2, [r2, #52]	; 0x34
   16f20:	sub	r2, r1, r2
   16f24:	str	r2, [r3, #16]
   16f28:	ldr	r3, [fp, #-8]
   16f2c:	ldr	r3, [r3, #32]
   16f30:	ldr	r2, [fp, #-8]
   16f34:	ldr	r2, [r2]
   16f38:	mov	r1, r2
   16f3c:	ldr	r2, [fp, #-8]
   16f40:	ldr	r2, [r2, #76]	; 0x4c
   16f44:	sub	r2, r1, r2
   16f48:	str	r2, [r3, #20]
   16f4c:	ldr	r3, [fp, #-8]
   16f50:	ldr	r3, [r3, #32]
   16f54:	ldr	r2, [fp, #-8]
   16f58:	ldr	r2, [r2, #12]
   16f5c:	str	r2, [r3, #24]
   16f60:	ldr	r3, [fp, #-8]
   16f64:	ldr	r3, [r3, #32]
   16f68:	ldr	r2, [fp, #-8]
   16f6c:	ldrh	r2, [r2, #8]
   16f70:	strh	r2, [r3, #28]
   16f74:	ldr	r3, [fp, #-8]
   16f78:	mov	r2, #0
   16f7c:	str	r2, [r3, #12]
   16f80:	ldr	r3, [fp, #-8]
   16f84:	ldr	r2, [pc, #88]	; 16fe4 <flatcc_builder_start_table@@Base+0x114>
   16f88:	str	r2, [r3, #12]
   16f8c:	ldr	r3, [fp, #-8]
   16f90:	mov	r2, #0
   16f94:	strh	r2, [r3, #8]
   16f98:	ldr	r3, [fp, #-8]
   16f9c:	ldr	r3, [r3, #32]
   16fa0:	mov	r2, #3
   16fa4:	strh	r2, [r3, #14]
   16fa8:	ldr	r1, [fp, #-12]
   16fac:	ldr	r0, [fp, #-8]
   16fb0:	bl	1454c <flatcc_builder_default_alloc@@Base+0x738>
   16fb4:	mov	r3, r0
   16fb8:	cmp	r3, #0
   16fbc:	beq	16fc8 <flatcc_builder_start_table@@Base+0xf8>
   16fc0:	mvn	r3, #0
   16fc4:	b	16fd8 <flatcc_builder_start_table@@Base+0x108>
   16fc8:	ldr	r1, [pc, #24]	; 16fe8 <flatcc_builder_start_table@@Base+0x118>
   16fcc:	ldr	r0, [fp, #-8]
   16fd0:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   16fd4:	mov	r3, #0
   16fd8:	mov	r0, r3
   16fdc:	sub	sp, fp, #4
   16fe0:	pop	{fp, pc}
   16fe4:	svccs	0x00693b52
   16fe8:	strdeq	pc, [r0], -ip

00016fec <flatcc_builder_create_vtable@@Base>:
   16fec:	push	{fp, lr}
   16ff0:	add	fp, sp, #4
   16ff4:	sub	sp, sp, #96	; 0x60
   16ff8:	str	r0, [fp, #-88]	; 0xffffffa8
   16ffc:	str	r1, [fp, #-92]	; 0xffffffa4
   17000:	mov	r3, r2
   17004:	strh	r3, [fp, #-94]	; 0xffffffa2
   17008:	mov	r3, #0
   1700c:	str	r3, [fp, #-80]	; 0xffffffb0
   17010:	mov	r3, #0
   17014:	str	r3, [fp, #-76]	; 0xffffffb4
   17018:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   1701c:	cmp	r3, #0
   17020:	beq	17078 <flatcc_builder_create_vtable@@Base+0x8c>
   17024:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17028:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   1702c:	add	r3, r2, r3
   17030:	str	r3, [fp, #-80]	; 0xffffffb0
   17034:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17038:	add	r3, r3, #1
   1703c:	lsl	r3, r3, #3
   17040:	sub	r2, fp, #4
   17044:	add	r3, r2, r3
   17048:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1704c:	str	r2, [r3, #-76]	; 0xffffffb4
   17050:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17054:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   17058:	add	r3, r3, #1
   1705c:	lsl	r3, r3, #3
   17060:	sub	r1, fp, #4
   17064:	add	r3, r1, r3
   17068:	str	r2, [r3, #-72]	; 0xffffffb8
   1706c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17070:	add	r3, r3, #1
   17074:	str	r3, [fp, #-76]	; 0xffffffb4
   17078:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1707c:	ldr	r3, [r3, #152]	; 0x98
   17080:	cmp	r3, #0
   17084:	bne	170c0 <flatcc_builder_create_vtable@@Base+0xd4>
   17088:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1708c:	ldr	r3, [r3, #180]	; 0xb4
   17090:	cmp	r3, #0
   17094:	bne	170c0 <flatcc_builder_create_vtable@@Base+0xd4>
   17098:	sub	r3, fp, #80	; 0x50
   1709c:	mov	r1, r3
   170a0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   170a4:	bl	15494 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   170a8:	str	r0, [fp, #-8]
   170ac:	ldr	r3, [fp, #-8]
   170b0:	cmp	r3, #0
   170b4:	bne	170f4 <flatcc_builder_create_vtable@@Base+0x108>
   170b8:	mov	r3, #0
   170bc:	b	170f8 <flatcc_builder_create_vtable@@Base+0x10c>
   170c0:	sub	r3, fp, #80	; 0x50
   170c4:	mov	r1, r3
   170c8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   170cc:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   170d0:	str	r0, [fp, #-8]
   170d4:	ldr	r3, [fp, #-8]
   170d8:	cmp	r3, #0
   170dc:	bne	170e8 <flatcc_builder_create_vtable@@Base+0xfc>
   170e0:	mov	r3, #0
   170e4:	b	170f8 <flatcc_builder_create_vtable@@Base+0x10c>
   170e8:	ldr	r3, [fp, #-8]
   170ec:	add	r3, r3, #1
   170f0:	str	r3, [fp, #-8]
   170f4:	ldr	r3, [fp, #-8]
   170f8:	mov	r0, r3
   170fc:	sub	sp, fp, #4
   17100:	pop	{fp, pc}

00017104 <flatcc_builder_create_cached_vtable@@Base>:
   17104:	push	{fp, lr}
   17108:	add	fp, sp, #4
   1710c:	sub	sp, sp, #48	; 0x30
   17110:	str	r0, [fp, #-32]	; 0xffffffe0
   17114:	str	r1, [fp, #-36]	; 0xffffffdc
   17118:	str	r3, [fp, #-44]	; 0xffffffd4
   1711c:	strh	r2, [fp, #-38]	; 0xffffffda
   17120:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17124:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17128:	bl	147b8 <flatcc_builder_default_alloc@@Base+0x9a4>
   1712c:	str	r0, [fp, #-20]	; 0xffffffec
   17130:	ldr	r3, [fp, #-20]	; 0xffffffec
   17134:	cmp	r3, #0
   17138:	bne	17144 <flatcc_builder_create_cached_vtable@@Base+0x40>
   1713c:	mov	r3, #0
   17140:	b	17408 <flatcc_builder_create_cached_vtable@@Base+0x304>
   17144:	ldr	r3, [fp, #-20]	; 0xffffffec
   17148:	str	r3, [fp, #-12]
   1714c:	ldr	r3, [fp, #-12]
   17150:	ldr	r3, [r3]
   17154:	str	r3, [fp, #-16]
   17158:	mov	r3, #0
   1715c:	str	r3, [fp, #-8]
   17160:	b	17264 <flatcc_builder_create_cached_vtable@@Base+0x160>
   17164:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17168:	ldr	r2, [r3, #100]	; 0x64
   1716c:	ldr	r3, [fp, #-16]
   17170:	add	r3, r2, r3
   17174:	str	r3, [fp, #-24]	; 0xffffffe8
   17178:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1717c:	ldr	r2, [r3, #68]	; 0x44
   17180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17184:	ldr	r3, [r3, #8]
   17188:	add	r3, r2, r3
   1718c:	str	r3, [fp, #-28]	; 0xffffffe4
   17190:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17194:	ldrh	r3, [r3]
   17198:	ldrh	r2, [fp, #-38]	; 0xffffffda
   1719c:	cmp	r2, r3
   171a0:	bne	171c4 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   171a4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   171a8:	mov	r2, r3
   171ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   171b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   171b4:	bl	122c8 <memcmp@plt>
   171b8:	mov	r3, r0
   171bc:	cmp	r3, #0
   171c0:	beq	171e0 <flatcc_builder_create_cached_vtable@@Base+0xdc>
   171c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171c8:	add	r3, r3, #12
   171cc:	str	r3, [fp, #-12]
   171d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171d4:	ldr	r3, [r3, #12]
   171d8:	str	r3, [fp, #-16]
   171dc:	b	17264 <flatcc_builder_create_cached_vtable@@Base+0x160>
   171e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171e4:	ldr	r2, [r3, #4]
   171e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171ec:	ldr	r3, [r3, #152]	; 0x98
   171f0:	cmp	r2, r3
   171f4:	beq	1721c <flatcc_builder_create_cached_vtable@@Base+0x118>
   171f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171fc:	str	r3, [fp, #-8]
   17200:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17204:	add	r3, r3, #12
   17208:	str	r3, [fp, #-12]
   1720c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17210:	ldr	r3, [r3, #12]
   17214:	str	r3, [fp, #-16]
   17218:	b	17264 <flatcc_builder_create_cached_vtable@@Base+0x160>
   1721c:	ldr	r2, [fp, #-12]
   17220:	ldr	r3, [fp, #-20]	; 0xffffffec
   17224:	cmp	r2, r3
   17228:	beq	17258 <flatcc_builder_create_cached_vtable@@Base+0x154>
   1722c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17230:	ldr	r2, [r3, #12]
   17234:	ldr	r3, [fp, #-12]
   17238:	str	r2, [r3]
   1723c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17240:	ldr	r2, [r3]
   17244:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17248:	str	r2, [r3, #12]
   1724c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17250:	ldr	r2, [fp, #-16]
   17254:	str	r2, [r3]
   17258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1725c:	ldr	r3, [r3]
   17260:	b	17408 <flatcc_builder_create_cached_vtable@@Base+0x304>
   17264:	ldr	r3, [fp, #-16]
   17268:	cmp	r3, #0
   1726c:	bne	17164 <flatcc_builder_create_cached_vtable@@Base+0x60>
   17270:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17274:	ldr	r2, [r3, #124]	; 0x7c
   17278:	mov	r3, #0
   1727c:	str	r3, [sp]
   17280:	mov	r3, #16
   17284:	mov	r1, #6
   17288:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1728c:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   17290:	str	r0, [fp, #-24]	; 0xffffffe8
   17294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17298:	cmp	r3, #0
   1729c:	bne	172a8 <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   172a0:	mov	r3, #0
   172a4:	b	17408 <flatcc_builder_create_cached_vtable@@Base+0x304>
   172a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172ac:	ldr	r3, [r3, #124]	; 0x7c
   172b0:	str	r3, [fp, #-16]
   172b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172b8:	ldr	r3, [r3, #124]	; 0x7c
   172bc:	add	r2, r3, #16
   172c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172c4:	str	r2, [r3, #124]	; 0x7c
   172c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172cc:	ldr	r2, [r3, #152]	; 0x98
   172d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172d4:	str	r2, [r3, #4]
   172d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   172dc:	ldr	r2, [r3]
   172e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172e4:	str	r2, [r3, #12]
   172e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   172ec:	ldr	r2, [fp, #-16]
   172f0:	str	r2, [r3]
   172f4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   172f8:	mov	r2, r3
   172fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17300:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17304:	bl	16fec <flatcc_builder_create_vtable@@Base>
   17308:	mov	r2, r0
   1730c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17310:	str	r2, [r3]
   17314:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17318:	ldr	r3, [r3]
   1731c:	cmp	r3, #0
   17320:	bne	1732c <flatcc_builder_create_cached_vtable@@Base+0x228>
   17324:	mov	r3, #0
   17328:	b	17408 <flatcc_builder_create_cached_vtable@@Base+0x304>
   1732c:	ldr	r3, [fp, #-8]
   17330:	cmp	r3, #0
   17334:	beq	1734c <flatcc_builder_create_cached_vtable@@Base+0x248>
   17338:	ldr	r3, [fp, #-8]
   1733c:	ldr	r2, [r3, #8]
   17340:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17344:	str	r2, [r3, #8]
   17348:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   1734c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17350:	ldr	r3, [r3, #172]	; 0xac
   17354:	cmp	r3, #0
   17358:	beq	17388 <flatcc_builder_create_cached_vtable@@Base+0x284>
   1735c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17360:	ldr	r2, [r3, #172]	; 0xac
   17364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17368:	ldr	r1, [r3, #120]	; 0x78
   1736c:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17370:	add	r3, r1, r3
   17374:	cmp	r2, r3
   17378:	bcs	17388 <flatcc_builder_create_cached_vtable@@Base+0x284>
   1737c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17380:	bl	14830 <flatcc_builder_flush_vtable_cache@@Base>
   17384:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   17388:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1738c:	ldr	r2, [r3, #120]	; 0x78
   17390:	ldrh	r1, [fp, #-38]	; 0xffffffda
   17394:	mov	r3, #0
   17398:	str	r3, [sp]
   1739c:	mov	r3, r1
   173a0:	mov	r1, #2
   173a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173a8:	bl	14474 <flatcc_builder_default_alloc@@Base+0x660>
   173ac:	str	r0, [fp, #-28]	; 0xffffffe4
   173b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   173b4:	cmp	r3, #0
   173b8:	bne	173c4 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   173bc:	mvn	r3, #0
   173c0:	b	17408 <flatcc_builder_create_cached_vtable@@Base+0x304>
   173c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173c8:	ldr	r2, [r3, #120]	; 0x78
   173cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173d0:	str	r2, [r3, #8]
   173d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173d8:	ldr	r2, [r3, #120]	; 0x78
   173dc:	ldrh	r3, [fp, #-38]	; 0xffffffda
   173e0:	add	r2, r2, r3
   173e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173e8:	str	r2, [r3, #120]	; 0x78
   173ec:	ldrh	r3, [fp, #-38]	; 0xffffffda
   173f0:	mov	r2, r3
   173f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   173f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   173fc:	bl	122bc <memcpy@plt>
   17400:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17404:	ldr	r3, [r3]
   17408:	mov	r0, r3
   1740c:	sub	sp, fp, #4
   17410:	pop	{fp, pc}

00017414 <flatcc_builder_create_table@@Base>:
   17414:	push	{r4, fp, lr}
   17418:	add	fp, sp, #8
   1741c:	sub	sp, sp, #124	; 0x7c
   17420:	str	r0, [fp, #-120]	; 0xffffff88
   17424:	str	r1, [fp, #-124]	; 0xffffff84
   17428:	str	r2, [fp, #-128]	; 0xffffff80
   1742c:	strh	r3, [fp, #-130]	; 0xffffff7e
   17430:	ldr	r4, [pc, #728]	; 17710 <flatcc_builder_create_table@@Base+0x2fc>
   17434:	add	r4, pc, r4
   17438:	ldr	r3, [fp, #8]
   1743c:	cmp	r3, #0
   17440:	bge	17464 <flatcc_builder_create_table@@Base+0x50>
   17444:	ldr	r3, [pc, #712]	; 17714 <flatcc_builder_create_table@@Base+0x300>
   17448:	add	r3, pc, r3
   1744c:	ldr	r2, [pc, #708]	; 17718 <flatcc_builder_create_table@@Base+0x304>
   17450:	ldr	r1, [pc, #708]	; 1771c <flatcc_builder_create_table@@Base+0x308>
   17454:	add	r1, pc, r1
   17458:	ldr	r0, [pc, #704]	; 17720 <flatcc_builder_create_table@@Base+0x30c>
   1745c:	add	r0, pc, r0
   17460:	bl	1234c <__assert_fail@plt>
   17464:	ldr	r3, [fp, #12]
   17468:	and	r3, r3, #1
   1746c:	cmp	r3, #0
   17470:	bne	17494 <flatcc_builder_create_table@@Base+0x80>
   17474:	ldr	r3, [pc, #680]	; 17724 <flatcc_builder_create_table@@Base+0x310>
   17478:	add	r3, pc, r3
   1747c:	ldr	r2, [pc, #676]	; 17728 <flatcc_builder_create_table@@Base+0x314>
   17480:	ldr	r1, [pc, #676]	; 1772c <flatcc_builder_create_table@@Base+0x318>
   17484:	add	r1, pc, r1
   17488:	ldr	r0, [pc, #672]	; 17730 <flatcc_builder_create_table@@Base+0x31c>
   1748c:	add	r0, pc, r0
   17490:	bl	1234c <__assert_fail@plt>
   17494:	sub	r3, fp, #130	; 0x82
   17498:	mov	r1, #4
   1749c:	mov	r0, r3
   174a0:	bl	14d18 <flatcc_builder_clear@@Base+0xf8>
   174a4:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   174a8:	mov	r1, r3
   174ac:	ldr	r0, [fp, #-120]	; 0xffffff88
   174b0:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   174b4:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   174b8:	mov	r2, r3
   174bc:	ldr	r1, [fp, #-128]	; 0xffffff80
   174c0:	ldr	r0, [fp, #-120]	; 0xffffff88
   174c4:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   174c8:	str	r0, [fp, #-20]	; 0xffffffec
   174cc:	ldr	r3, [fp, #-120]	; 0xffffff88
   174d0:	ldr	r3, [r3, #136]	; 0x88
   174d4:	mov	r1, r3
   174d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   174dc:	ldr	r3, [fp, #-128]	; 0xffffff80
   174e0:	add	r3, r2, r3
   174e4:	sub	r3, r1, r3
   174e8:	sub	r3, r3, #4
   174ec:	str	r3, [fp, #-24]	; 0xffffffe8
   174f0:	ldr	r3, [fp, #12]
   174f4:	sub	r3, r3, #1
   174f8:	str	r3, [fp, #-28]	; 0xffffffe4
   174fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17500:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17504:	sub	r3, r2, r3
   17508:	str	r3, [fp, #-32]	; 0xffffffe0
   1750c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17510:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17514:	sub	r2, r2, r3
   17518:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1751c:	cmp	r2, r3
   17520:	beq	1752c <flatcc_builder_create_table@@Base+0x118>
   17524:	mvn	r3, #0
   17528:	b	17704 <flatcc_builder_create_table@@Base+0x2f0>
   1752c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17530:	bl	13cd0 <main@@Base+0x11c>
   17534:	mov	r3, r0
   17538:	str	r3, [fp, #-44]	; 0xffffffd4
   1753c:	mov	r3, #0
   17540:	str	r3, [fp, #-16]
   17544:	b	175bc <flatcc_builder_create_table@@Base+0x1a8>
   17548:	ldr	r3, [fp, #-16]
   1754c:	lsl	r3, r3, #1
   17550:	ldr	r2, [fp, #4]
   17554:	add	r3, r2, r3
   17558:	ldrh	r3, [r3]
   1755c:	mov	r2, r3
   17560:	ldr	r3, [fp, #-124]	; 0xffffff84
   17564:	add	r3, r2, r3
   17568:	str	r3, [fp, #-36]	; 0xffffffdc
   1756c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17570:	ldr	r2, [r3]
   17574:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17578:	sub	r3, r2, r3
   1757c:	ldr	r2, [fp, #-16]
   17580:	lsl	r2, r2, #1
   17584:	ldr	r1, [fp, #4]
   17588:	add	r2, r1, r2
   1758c:	ldrh	r2, [r2]
   17590:	sub	r3, r3, r2
   17594:	sub	r3, r3, #4
   17598:	str	r3, [fp, #-40]	; 0xffffffd8
   1759c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   175a0:	bl	13cd0 <main@@Base+0x11c>
   175a4:	mov	r2, r0
   175a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   175ac:	str	r2, [r3]
   175b0:	ldr	r3, [fp, #-16]
   175b4:	add	r3, r3, #1
   175b8:	str	r3, [fp, #-16]
   175bc:	ldr	r2, [fp, #-16]
   175c0:	ldr	r3, [fp, #8]
   175c4:	cmp	r2, r3
   175c8:	blt	17548 <flatcc_builder_create_table@@Base+0x134>
   175cc:	mov	r3, #0
   175d0:	str	r3, [fp, #-116]	; 0xffffff8c
   175d4:	mov	r3, #0
   175d8:	str	r3, [fp, #-112]	; 0xffffff90
   175dc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   175e0:	add	r3, r3, #4
   175e4:	str	r3, [fp, #-116]	; 0xffffff8c
   175e8:	ldr	r3, [fp, #-112]	; 0xffffff90
   175ec:	add	r3, r3, #1
   175f0:	lsl	r3, r3, #3
   175f4:	sub	r2, fp, #12
   175f8:	add	r3, r2, r3
   175fc:	sub	r2, fp, #44	; 0x2c
   17600:	str	r2, [r3, #-104]	; 0xffffff98
   17604:	ldr	r3, [fp, #-112]	; 0xffffff90
   17608:	add	r3, r3, #1
   1760c:	lsl	r3, r3, #3
   17610:	sub	r2, fp, #12
   17614:	add	r3, r2, r3
   17618:	mov	r2, #4
   1761c:	str	r2, [r3, #-100]	; 0xffffff9c
   17620:	ldr	r3, [fp, #-112]	; 0xffffff90
   17624:	add	r3, r3, #1
   17628:	str	r3, [fp, #-112]	; 0xffffff90
   1762c:	ldr	r3, [fp, #-128]	; 0xffffff80
   17630:	cmp	r3, #0
   17634:	beq	1768c <flatcc_builder_create_table@@Base+0x278>
   17638:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1763c:	ldr	r3, [fp, #-128]	; 0xffffff80
   17640:	add	r3, r2, r3
   17644:	str	r3, [fp, #-116]	; 0xffffff8c
   17648:	ldr	r3, [fp, #-112]	; 0xffffff90
   1764c:	add	r3, r3, #1
   17650:	lsl	r3, r3, #3
   17654:	sub	r2, fp, #12
   17658:	add	r3, r2, r3
   1765c:	ldr	r2, [fp, #-124]	; 0xffffff84
   17660:	str	r2, [r3, #-104]	; 0xffffff98
   17664:	ldr	r3, [fp, #-112]	; 0xffffff90
   17668:	add	r3, r3, #1
   1766c:	lsl	r3, r3, #3
   17670:	sub	r2, fp, #12
   17674:	add	r3, r2, r3
   17678:	ldr	r2, [fp, #-128]	; 0xffffff80
   1767c:	str	r2, [r3, #-100]	; 0xffffff9c
   17680:	ldr	r3, [fp, #-112]	; 0xffffff90
   17684:	add	r3, r3, #1
   17688:	str	r3, [fp, #-112]	; 0xffffff90
   1768c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17690:	cmp	r3, #0
   17694:	beq	176f0 <flatcc_builder_create_table@@Base+0x2dc>
   17698:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1769c:	ldr	r3, [fp, #-20]	; 0xffffffec
   176a0:	add	r3, r2, r3
   176a4:	str	r3, [fp, #-116]	; 0xffffff8c
   176a8:	ldr	r3, [fp, #-112]	; 0xffffff90
   176ac:	add	r3, r3, #1
   176b0:	lsl	r3, r3, #3
   176b4:	sub	r2, fp, #12
   176b8:	add	r3, r2, r3
   176bc:	ldr	r2, [pc, #112]	; 17734 <flatcc_builder_create_table@@Base+0x320>
   176c0:	ldr	r2, [r4, r2]
   176c4:	str	r2, [r3, #-104]	; 0xffffff98
   176c8:	ldr	r3, [fp, #-112]	; 0xffffff90
   176cc:	add	r3, r3, #1
   176d0:	lsl	r3, r3, #3
   176d4:	sub	r2, fp, #12
   176d8:	add	r3, r2, r3
   176dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   176e0:	str	r2, [r3, #-100]	; 0xffffff9c
   176e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   176e8:	add	r3, r3, #1
   176ec:	str	r3, [fp, #-112]	; 0xffffff90
   176f0:	sub	r3, fp, #116	; 0x74
   176f4:	mov	r1, r3
   176f8:	ldr	r0, [fp, #-120]	; 0xffffff88
   176fc:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17700:	mov	r3, r0
   17704:	mov	r0, r3
   17708:	sub	sp, fp, #8
   1770c:	pop	{r4, fp, pc}
   17710:	andeq	r7, r1, r4, asr #23
   17714:	andeq	r6, r0, r0, asr r5
   17718:	ldrdeq	r0, [r0], -r5
   1771c:	andeq	r5, r0, r0, lsr #29
   17720:	andeq	r6, r0, r8, lsr r1
   17724:	andeq	r6, r0, r0, lsr #10
   17728:	ldrdeq	r0, [r0], -fp
   1772c:	andeq	r5, r0, r0, ror lr
   17730:	andeq	r6, r0, ip, lsl r1
   17734:	andeq	r0, r0, r4, asr #32

00017738 <flatcc_builder_check_required_field@@Base>:
   17738:	push	{fp, lr}
   1773c:	add	fp, sp, #4
   17740:	sub	sp, sp, #8
   17744:	str	r0, [fp, #-8]
   17748:	mov	r3, r1
   1774c:	strh	r3, [fp, #-10]
   17750:	ldr	r3, [fp, #-8]
   17754:	ldr	r3, [r3, #32]
   17758:	ldrh	r3, [r3, #14]
   1775c:	cmp	r3, #3
   17760:	beq	17784 <flatcc_builder_check_required_field@@Base+0x4c>
   17764:	ldr	r3, [pc, #100]	; 177d0 <flatcc_builder_check_required_field@@Base+0x98>
   17768:	add	r3, pc, r3
   1776c:	ldr	r2, [pc, #96]	; 177d4 <flatcc_builder_check_required_field@@Base+0x9c>
   17770:	ldr	r1, [pc, #96]	; 177d8 <flatcc_builder_check_required_field@@Base+0xa0>
   17774:	add	r1, pc, r1
   17778:	ldr	r0, [pc, #92]	; 177dc <flatcc_builder_check_required_field@@Base+0xa4>
   1777c:	add	r0, pc, r0
   17780:	bl	1234c <__assert_fail@plt>
   17784:	ldr	r3, [fp, #-8]
   17788:	ldrh	r3, [r3, #8]
   1778c:	ldrh	r2, [fp, #-10]
   17790:	cmp	r2, r3
   17794:	bcs	177c0 <flatcc_builder_check_required_field@@Base+0x88>
   17798:	ldr	r3, [fp, #-8]
   1779c:	ldr	r2, [r3, #4]
   177a0:	ldrh	r3, [fp, #-10]
   177a4:	lsl	r3, r3, #1
   177a8:	add	r3, r2, r3
   177ac:	ldrh	r3, [r3]
   177b0:	cmp	r3, #0
   177b4:	beq	177c0 <flatcc_builder_check_required_field@@Base+0x88>
   177b8:	mov	r3, #1
   177bc:	b	177c4 <flatcc_builder_check_required_field@@Base+0x8c>
   177c0:	mov	r3, #0
   177c4:	mov	r0, r3
   177c8:	sub	sp, fp, #4
   177cc:	pop	{fp, pc}
   177d0:	andeq	r6, r0, ip, asr #4
   177d4:	strdeq	r0, [r0], -r8
   177d8:	andeq	r5, r0, r0, lsl #23
   177dc:	andeq	r5, r0, r8, lsr lr

000177e0 <flatcc_builder_check_union_field@@Base>:
   177e0:	push	{fp, lr}
   177e4:	add	fp, sp, #4
   177e8:	sub	sp, sp, #8
   177ec:	str	r0, [fp, #-8]
   177f0:	mov	r3, r1
   177f4:	strh	r3, [fp, #-10]
   177f8:	ldr	r3, [fp, #-8]
   177fc:	ldr	r3, [r3, #32]
   17800:	ldrh	r3, [r3, #14]
   17804:	cmp	r3, #3
   17808:	beq	1782c <flatcc_builder_check_union_field@@Base+0x4c>
   1780c:	ldr	r3, [pc, #292]	; 17938 <flatcc_builder_check_union_field@@Base+0x158>
   17810:	add	r3, pc, r3
   17814:	ldr	r2, [pc, #288]	; 1793c <flatcc_builder_check_union_field@@Base+0x15c>
   17818:	ldr	r1, [pc, #288]	; 17940 <flatcc_builder_check_union_field@@Base+0x160>
   1781c:	add	r1, pc, r1
   17820:	ldr	r0, [pc, #284]	; 17944 <flatcc_builder_check_union_field@@Base+0x164>
   17824:	add	r0, pc, r0
   17828:	bl	1234c <__assert_fail@plt>
   1782c:	ldrh	r3, [fp, #-10]
   17830:	cmp	r3, #0
   17834:	beq	1784c <flatcc_builder_check_union_field@@Base+0x6c>
   17838:	ldr	r3, [fp, #-8]
   1783c:	ldrh	r3, [r3, #8]
   17840:	ldrh	r2, [fp, #-10]
   17844:	cmp	r2, r3
   17848:	bcc	17854 <flatcc_builder_check_union_field@@Base+0x74>
   1784c:	mov	r3, #0
   17850:	b	1792c <flatcc_builder_check_union_field@@Base+0x14c>
   17854:	ldr	r3, [fp, #-8]
   17858:	ldr	r2, [r3, #4]
   1785c:	ldrh	r3, [fp, #-10]
   17860:	sub	r3, r3, #-2147483647	; 0x80000001
   17864:	lsl	r3, r3, #1
   17868:	add	r3, r2, r3
   1786c:	ldrh	r3, [r3]
   17870:	cmp	r3, #0
   17874:	bne	178a4 <flatcc_builder_check_union_field@@Base+0xc4>
   17878:	ldr	r3, [fp, #-8]
   1787c:	ldr	r2, [r3, #4]
   17880:	ldrh	r3, [fp, #-10]
   17884:	lsl	r3, r3, #1
   17888:	add	r3, r2, r3
   1788c:	ldrh	r3, [r3]
   17890:	cmp	r3, #0
   17894:	moveq	r3, #1
   17898:	movne	r3, #0
   1789c:	uxtb	r3, r3
   178a0:	b	1792c <flatcc_builder_check_union_field@@Base+0x14c>
   178a4:	ldr	r3, [fp, #-8]
   178a8:	ldr	r3, [r3, #16]
   178ac:	ldr	r2, [fp, #-8]
   178b0:	ldr	r1, [r2, #4]
   178b4:	ldrh	r2, [fp, #-10]
   178b8:	sub	r2, r2, #-2147483647	; 0x80000001
   178bc:	lsl	r2, r2, #1
   178c0:	add	r2, r1, r2
   178c4:	ldrh	r2, [r2]
   178c8:	add	r3, r3, r2
   178cc:	ldrb	r3, [r3]
   178d0:	cmp	r3, #0
   178d4:	beq	17904 <flatcc_builder_check_union_field@@Base+0x124>
   178d8:	ldr	r3, [fp, #-8]
   178dc:	ldr	r2, [r3, #4]
   178e0:	ldrh	r3, [fp, #-10]
   178e4:	lsl	r3, r3, #1
   178e8:	add	r3, r2, r3
   178ec:	ldrh	r3, [r3]
   178f0:	cmp	r3, #0
   178f4:	movne	r3, #1
   178f8:	moveq	r3, #0
   178fc:	uxtb	r3, r3
   17900:	b	1792c <flatcc_builder_check_union_field@@Base+0x14c>
   17904:	ldr	r3, [fp, #-8]
   17908:	ldr	r2, [r3, #4]
   1790c:	ldrh	r3, [fp, #-10]
   17910:	lsl	r3, r3, #1
   17914:	add	r3, r2, r3
   17918:	ldrh	r3, [r3]
   1791c:	cmp	r3, #0
   17920:	moveq	r3, #1
   17924:	movne	r3, #0
   17928:	uxtb	r3, r3
   1792c:	mov	r0, r3
   17930:	sub	sp, fp, #4
   17934:	pop	{fp, pc}
   17938:	andeq	r6, r0, r8, asr #3
   1793c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17940:	ldrdeq	r5, [r0], -r8
   17944:	muleq	r0, r0, sp

00017948 <flatcc_builder_check_required@@Base>:
   17948:	push	{fp, lr}
   1794c:	add	fp, sp, #4
   17950:	sub	sp, sp, #24
   17954:	str	r0, [fp, #-16]
   17958:	str	r1, [fp, #-20]	; 0xffffffec
   1795c:	str	r2, [fp, #-24]	; 0xffffffe8
   17960:	ldr	r3, [fp, #-16]
   17964:	ldr	r3, [r3, #32]
   17968:	ldrh	r3, [r3, #14]
   1796c:	cmp	r3, #3
   17970:	beq	17994 <flatcc_builder_check_required@@Base+0x4c>
   17974:	ldr	r3, [pc, #168]	; 17a24 <flatcc_builder_check_required@@Base+0xdc>
   17978:	add	r3, pc, r3
   1797c:	ldr	r2, [pc, #164]	; 17a28 <flatcc_builder_check_required@@Base+0xe0>
   17980:	ldr	r1, [pc, #164]	; 17a2c <flatcc_builder_check_required@@Base+0xe4>
   17984:	add	r1, pc, r1
   17988:	ldr	r0, [pc, #160]	; 17a30 <flatcc_builder_check_required@@Base+0xe8>
   1798c:	add	r0, pc, r0
   17990:	bl	1234c <__assert_fail@plt>
   17994:	ldr	r3, [fp, #-16]
   17998:	ldrh	r3, [r3, #8]
   1799c:	mov	r2, r3
   179a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179a4:	cmp	r2, r3
   179a8:	bge	179b4 <flatcc_builder_check_required@@Base+0x6c>
   179ac:	mov	r3, #0
   179b0:	b	17a18 <flatcc_builder_check_required@@Base+0xd0>
   179b4:	mov	r3, #0
   179b8:	str	r3, [fp, #-8]
   179bc:	b	17a04 <flatcc_builder_check_required@@Base+0xbc>
   179c0:	ldr	r3, [fp, #-16]
   179c4:	ldr	r2, [r3, #4]
   179c8:	ldr	r3, [fp, #-8]
   179cc:	lsl	r3, r3, #1
   179d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   179d4:	add	r3, r1, r3
   179d8:	ldrh	r3, [r3]
   179dc:	lsl	r3, r3, #1
   179e0:	add	r3, r2, r3
   179e4:	ldrh	r3, [r3]
   179e8:	cmp	r3, #0
   179ec:	bne	179f8 <flatcc_builder_check_required@@Base+0xb0>
   179f0:	mov	r3, #0
   179f4:	b	17a18 <flatcc_builder_check_required@@Base+0xd0>
   179f8:	ldr	r3, [fp, #-8]
   179fc:	add	r3, r3, #1
   17a00:	str	r3, [fp, #-8]
   17a04:	ldr	r2, [fp, #-8]
   17a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a0c:	cmp	r2, r3
   17a10:	blt	179c0 <flatcc_builder_check_required@@Base+0x78>
   17a14:	mov	r3, #1
   17a18:	mov	r0, r3
   17a1c:	sub	sp, fp, #4
   17a20:	pop	{fp, pc}
   17a24:	andeq	r6, r0, r4, lsl #1
   17a28:	andeq	r0, r0, r1, lsl r5
   17a2c:	andeq	r5, r0, r0, ror r9
   17a30:	andeq	r5, r0, r8, lsr #24

00017a34 <flatcc_builder_end_table@@Base>:
   17a34:	push	{fp, lr}
   17a38:	add	fp, sp, #4
   17a3c:	sub	sp, sp, #48	; 0x30
   17a40:	str	r0, [fp, #-32]	; 0xffffffe0
   17a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a48:	ldr	r3, [r3, #32]
   17a4c:	ldrh	r3, [r3, #14]
   17a50:	cmp	r3, #3
   17a54:	beq	17a78 <flatcc_builder_end_table@@Base+0x44>
   17a58:	ldr	r3, [pc, #508]	; 17c5c <flatcc_builder_end_table@@Base+0x228>
   17a5c:	add	r3, pc, r3
   17a60:	ldr	r2, [pc, #504]	; 17c60 <flatcc_builder_end_table@@Base+0x22c>
   17a64:	ldr	r1, [pc, #504]	; 17c64 <flatcc_builder_end_table@@Base+0x230>
   17a68:	add	r1, pc, r1
   17a6c:	ldr	r0, [pc, #500]	; 17c68 <flatcc_builder_end_table@@Base+0x234>
   17a70:	add	r0, pc, r0
   17a74:	bl	1234c <__assert_fail@plt>
   17a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a7c:	ldr	r3, [r3, #4]
   17a80:	sub	r3, r3, #4
   17a84:	str	r3, [fp, #-8]
   17a88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a8c:	ldrh	r3, [r3, #8]
   17a90:	add	r3, r3, #2
   17a94:	uxth	r3, r3
   17a98:	lsl	r3, r3, #1
   17a9c:	strh	r3, [fp, #-10]
   17aa0:	ldr	r3, [fp, #-8]
   17aa4:	ldrh	r2, [fp, #-10]
   17aa8:	strh	r2, [r3]
   17aac:	ldr	r3, [fp, #-8]
   17ab0:	add	r3, r3, #2
   17ab4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17ab8:	ldr	r2, [r2, #20]
   17abc:	uxth	r2, r2
   17ac0:	add	r2, r2, #4
   17ac4:	uxth	r2, r2
   17ac8:	strh	r2, [r3]
   17acc:	ldr	r3, [fp, #-8]
   17ad0:	ldrh	r3, [r3]
   17ad4:	mov	r2, r3
   17ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17adc:	ldr	r3, [r3, #12]
   17ae0:	eor	r3, r3, r2
   17ae4:	ldr	r2, [pc, #384]	; 17c6c <flatcc_builder_end_table@@Base+0x238>
   17ae8:	mul	r3, r2, r3
   17aec:	ldr	r2, [fp, #-8]
   17af0:	add	r2, r2, #2
   17af4:	ldrh	r2, [r2]
   17af8:	eor	r3, r3, r2
   17afc:	ldr	r2, [pc, #360]	; 17c6c <flatcc_builder_end_table@@Base+0x238>
   17b00:	mul	r2, r2, r3
   17b04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b08:	str	r2, [r3, #12]
   17b0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b10:	ldr	r3, [r3, #12]
   17b14:	ldrh	r2, [fp, #-10]
   17b18:	ldr	r1, [fp, #-8]
   17b1c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b20:	bl	17104 <flatcc_builder_create_cached_vtable@@Base>
   17b24:	str	r0, [fp, #-16]
   17b28:	ldr	r3, [fp, #-16]
   17b2c:	cmp	r3, #0
   17b30:	bne	17b3c <flatcc_builder_end_table@@Base+0x108>
   17b34:	mov	r3, #0
   17b38:	b	17c50 <flatcc_builder_end_table@@Base+0x21c>
   17b3c:	ldrh	r3, [fp, #-10]
   17b40:	mov	r2, r3
   17b44:	mov	r1, #0
   17b48:	ldr	r0, [fp, #-8]
   17b4c:	bl	1231c <memset@plt>
   17b50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b54:	ldr	r2, [r3, #76]	; 0x4c
   17b58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b5c:	ldr	r3, [r3, #32]
   17b60:	ldr	r3, [r3, #20]
   17b64:	add	r3, r2, r3
   17b68:	str	r3, [fp, #-20]	; 0xffffffec
   17b6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b70:	ldr	r3, [r3]
   17b74:	mov	r2, r3
   17b78:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b7c:	sub	r3, r2, r3
   17b80:	asr	r3, r3, #1
   17b84:	str	r3, [fp, #-24]	; 0xffffffe8
   17b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b8c:	ldr	r1, [r3, #16]
   17b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b94:	ldr	r2, [r3, #20]
   17b98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b9c:	ldrh	r0, [r3, #130]	; 0x82
   17ba0:	ldr	r3, [fp, #-16]
   17ba4:	str	r3, [sp, #8]
   17ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bac:	str	r3, [sp, #4]
   17bb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bb4:	str	r3, [sp]
   17bb8:	mov	r3, r0
   17bbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17bc0:	bl	17414 <flatcc_builder_create_table@@Base>
   17bc4:	str	r0, [fp, #-28]	; 0xffffffe4
   17bc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17bcc:	cmp	r3, #0
   17bd0:	bne	17bdc <flatcc_builder_end_table@@Base+0x1a8>
   17bd4:	mov	r3, #0
   17bd8:	b	17c50 <flatcc_builder_end_table@@Base+0x21c>
   17bdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17be0:	ldr	r3, [r3, #32]
   17be4:	ldr	r2, [r3, #24]
   17be8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bec:	str	r2, [r3, #12]
   17bf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bf4:	ldr	r3, [r3, #32]
   17bf8:	ldrh	r2, [r3, #28]
   17bfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c00:	strh	r2, [r3, #8]
   17c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c08:	ldr	r2, [r3, #52]	; 0x34
   17c0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c10:	ldr	r3, [r3, #32]
   17c14:	ldr	r3, [r3, #16]
   17c18:	add	r2, r2, r3
   17c1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c20:	str	r2, [r3, #4]
   17c24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c28:	ldr	r2, [r3, #76]	; 0x4c
   17c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c30:	ldr	r3, [r3, #32]
   17c34:	ldr	r3, [r3, #20]
   17c38:	add	r2, r2, r3
   17c3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c40:	str	r2, [r3]
   17c44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c48:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17c4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17c50:	mov	r0, r3
   17c54:	sub	sp, fp, #4
   17c58:	pop	{fp, pc}
   17c5c:	andeq	r5, r0, r0, asr #31
   17c60:	andeq	r0, r0, r5, lsr #10
   17c64:	andeq	r5, r0, ip, lsl #17
   17c68:	andeq	r5, r0, r4, asr #22
   17c6c:			; <UNDEFINED> instruction: 0x9e3779b1

00017c70 <flatcc_builder_create_vector@@Base>:
   17c70:	push	{r4, fp, lr}
   17c74:	add	fp, sp, #8
   17c78:	sub	sp, sp, #108	; 0x6c
   17c7c:	str	r0, [fp, #-104]	; 0xffffff98
   17c80:	str	r1, [fp, #-108]	; 0xffffff94
   17c84:	str	r2, [fp, #-112]	; 0xffffff90
   17c88:	str	r3, [fp, #-116]	; 0xffffff8c
   17c8c:	ldr	r4, [pc, #484]	; 17e78 <flatcc_builder_create_vector@@Base+0x208>
   17c90:	add	r4, pc, r4
   17c94:	ldr	r2, [fp, #-112]	; 0xffffff90
   17c98:	ldr	r3, [fp, #8]
   17c9c:	cmp	r2, r3
   17ca0:	bls	17cdc <flatcc_builder_create_vector@@Base+0x6c>
   17ca4:	ldr	r2, [fp, #-112]	; 0xffffff90
   17ca8:	ldr	r3, [fp, #8]
   17cac:	cmp	r2, r3
   17cb0:	bls	17cd4 <flatcc_builder_create_vector@@Base+0x64>
   17cb4:	ldr	r3, [pc, #448]	; 17e7c <flatcc_builder_create_vector@@Base+0x20c>
   17cb8:	add	r3, pc, r3
   17cbc:	ldr	r2, [pc, #444]	; 17e80 <flatcc_builder_create_vector@@Base+0x210>
   17cc0:	ldr	r1, [pc, #444]	; 17e84 <flatcc_builder_create_vector@@Base+0x214>
   17cc4:	add	r1, pc, r1
   17cc8:	ldr	r0, [pc, #440]	; 17e88 <flatcc_builder_create_vector@@Base+0x218>
   17ccc:	add	r0, pc, r0
   17cd0:	bl	1234c <__assert_fail@plt>
   17cd4:	mov	r3, #0
   17cd8:	b	17e6c <flatcc_builder_create_vector@@Base+0x1fc>
   17cdc:	mov	r1, #4
   17ce0:	add	r3, fp, #4
   17ce4:	mov	r0, r3
   17ce8:	bl	14d18 <flatcc_builder_clear@@Base+0xf8>
   17cec:	ldrh	r3, [fp, #4]
   17cf0:	mov	r1, r3
   17cf4:	ldr	r0, [fp, #-104]	; 0xffffff98
   17cf8:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   17cfc:	ldr	r3, [fp, #-112]	; 0xffffff90
   17d00:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17d04:	mul	r3, r2, r3
   17d08:	str	r3, [fp, #-16]
   17d0c:	ldr	r0, [fp, #-112]	; 0xffffff90
   17d10:	bl	13cd0 <main@@Base+0x11c>
   17d14:	mov	r3, r0
   17d18:	str	r3, [fp, #-24]	; 0xffffffe8
   17d1c:	ldrh	r3, [fp, #4]
   17d20:	mov	r2, r3
   17d24:	ldr	r1, [fp, #-16]
   17d28:	ldr	r0, [fp, #-104]	; 0xffffff98
   17d2c:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   17d30:	str	r0, [fp, #-20]	; 0xffffffec
   17d34:	mov	r3, #0
   17d38:	str	r3, [fp, #-96]	; 0xffffffa0
   17d3c:	mov	r3, #0
   17d40:	str	r3, [fp, #-92]	; 0xffffffa4
   17d44:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17d48:	add	r3, r3, #4
   17d4c:	str	r3, [fp, #-96]	; 0xffffffa0
   17d50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d54:	add	r3, r3, #1
   17d58:	lsl	r3, r3, #3
   17d5c:	sub	r2, fp, #12
   17d60:	add	r3, r2, r3
   17d64:	sub	r2, fp, #24
   17d68:	str	r2, [r3, #-84]	; 0xffffffac
   17d6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d70:	add	r3, r3, #1
   17d74:	lsl	r3, r3, #3
   17d78:	sub	r2, fp, #12
   17d7c:	add	r3, r2, r3
   17d80:	mov	r2, #4
   17d84:	str	r2, [r3, #-80]	; 0xffffffb0
   17d88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d8c:	add	r3, r3, #1
   17d90:	str	r3, [fp, #-92]	; 0xffffffa4
   17d94:	ldr	r3, [fp, #-16]
   17d98:	cmp	r3, #0
   17d9c:	beq	17df4 <flatcc_builder_create_vector@@Base+0x184>
   17da0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17da4:	ldr	r3, [fp, #-16]
   17da8:	add	r3, r2, r3
   17dac:	str	r3, [fp, #-96]	; 0xffffffa0
   17db0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17db4:	add	r3, r3, #1
   17db8:	lsl	r3, r3, #3
   17dbc:	sub	r2, fp, #12
   17dc0:	add	r3, r2, r3
   17dc4:	ldr	r2, [fp, #-108]	; 0xffffff94
   17dc8:	str	r2, [r3, #-84]	; 0xffffffac
   17dcc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17dd0:	add	r3, r3, #1
   17dd4:	lsl	r3, r3, #3
   17dd8:	sub	r2, fp, #12
   17ddc:	add	r3, r2, r3
   17de0:	ldr	r2, [fp, #-16]
   17de4:	str	r2, [r3, #-80]	; 0xffffffb0
   17de8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17dec:	add	r3, r3, #1
   17df0:	str	r3, [fp, #-92]	; 0xffffffa4
   17df4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17df8:	cmp	r3, #0
   17dfc:	beq	17e58 <flatcc_builder_create_vector@@Base+0x1e8>
   17e00:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e08:	add	r3, r2, r3
   17e0c:	str	r3, [fp, #-96]	; 0xffffffa0
   17e10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e14:	add	r3, r3, #1
   17e18:	lsl	r3, r3, #3
   17e1c:	sub	r2, fp, #12
   17e20:	add	r3, r2, r3
   17e24:	ldr	r2, [pc, #96]	; 17e8c <flatcc_builder_create_vector@@Base+0x21c>
   17e28:	ldr	r2, [r4, r2]
   17e2c:	str	r2, [r3, #-84]	; 0xffffffac
   17e30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e34:	add	r3, r3, #1
   17e38:	lsl	r3, r3, #3
   17e3c:	sub	r2, fp, #12
   17e40:	add	r3, r2, r3
   17e44:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e48:	str	r2, [r3, #-80]	; 0xffffffb0
   17e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e50:	add	r3, r3, #1
   17e54:	str	r3, [fp, #-92]	; 0xffffffa4
   17e58:	sub	r3, fp, #96	; 0x60
   17e5c:	mov	r1, r3
   17e60:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e64:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17e68:	mov	r3, r0
   17e6c:	mov	r0, r3
   17e70:	sub	sp, fp, #8
   17e74:	pop	{r4, fp, pc}
   17e78:	andeq	r7, r1, r8, ror #6
   17e7c:	andeq	r5, r0, r0, lsl #27
   17e80:	andeq	r0, r0, r5, asr r5
   17e84:	andeq	r5, r0, r0, lsr r6
   17e88:	andeq	r5, r0, r4, lsl r9
   17e8c:	andeq	r0, r0, r4, asr #32

00017e90 <flatcc_builder_end_vector@@Base>:
   17e90:	push	{fp, lr}
   17e94:	add	fp, sp, #4
   17e98:	sub	sp, sp, #24
   17e9c:	str	r0, [fp, #-16]
   17ea0:	ldr	r3, [fp, #-16]
   17ea4:	ldr	r3, [r3, #32]
   17ea8:	ldrh	r3, [r3, #14]
   17eac:	cmp	r3, #4
   17eb0:	beq	17ed4 <flatcc_builder_end_vector@@Base+0x44>
   17eb4:	ldr	r3, [pc, #148]	; 17f50 <flatcc_builder_end_vector@@Base+0xc0>
   17eb8:	add	r3, pc, r3
   17ebc:	ldr	r2, [pc, #144]	; 17f54 <flatcc_builder_end_vector@@Base+0xc4>
   17ec0:	ldr	r1, [pc, #144]	; 17f58 <flatcc_builder_end_vector@@Base+0xc8>
   17ec4:	add	r1, pc, r1
   17ec8:	ldr	r0, [pc, #140]	; 17f5c <flatcc_builder_end_vector@@Base+0xcc>
   17ecc:	add	r0, pc, r0
   17ed0:	bl	1234c <__assert_fail@plt>
   17ed4:	ldr	r3, [fp, #-16]
   17ed8:	ldr	r1, [r3, #16]
   17edc:	ldr	r3, [fp, #-16]
   17ee0:	ldr	r3, [r3, #32]
   17ee4:	ldr	r0, [r3, #20]
   17ee8:	ldr	r3, [fp, #-16]
   17eec:	ldr	r3, [r3, #32]
   17ef0:	ldr	ip, [r3, #16]
   17ef4:	ldr	r3, [fp, #-16]
   17ef8:	ldrh	r3, [r3, #130]	; 0x82
   17efc:	ldr	r2, [fp, #-16]
   17f00:	ldr	r2, [r2, #32]
   17f04:	ldr	r2, [r2, #24]
   17f08:	str	r2, [sp, #4]
   17f0c:	str	r3, [sp]
   17f10:	mov	r3, ip
   17f14:	mov	r2, r0
   17f18:	ldr	r0, [fp, #-16]
   17f1c:	bl	17c70 <flatcc_builder_create_vector@@Base>
   17f20:	str	r0, [fp, #-8]
   17f24:	ldr	r3, [fp, #-8]
   17f28:	cmp	r3, #0
   17f2c:	bne	17f38 <flatcc_builder_end_vector@@Base+0xa8>
   17f30:	mov	r3, #0
   17f34:	b	17f44 <flatcc_builder_end_vector@@Base+0xb4>
   17f38:	ldr	r0, [fp, #-16]
   17f3c:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17f40:	ldr	r3, [fp, #-8]
   17f44:	mov	r0, r3
   17f48:	sub	sp, fp, #4
   17f4c:	pop	{fp, pc}
   17f50:	andeq	r5, r0, r0, lsr #23
   17f54:	andeq	r0, r0, r8, ror r5
   17f58:	andeq	r5, r0, r0, lsr r4
   17f5c:	andeq	r5, r0, ip, ror #10

00017f60 <flatcc_builder_vector_count@@Base>:
   17f60:	push	{fp}		; (str fp, [sp, #-4]!)
   17f64:	add	fp, sp, #0
   17f68:	sub	sp, sp, #12
   17f6c:	str	r0, [fp, #-8]
   17f70:	ldr	r3, [fp, #-8]
   17f74:	ldr	r3, [r3, #32]
   17f78:	ldr	r3, [r3, #20]
   17f7c:	mov	r0, r3
   17f80:	add	sp, fp, #0
   17f84:	pop	{fp}		; (ldr fp, [sp], #4)
   17f88:	bx	lr

00017f8c <flatcc_builder_vector_edit@@Base>:
   17f8c:	push	{fp}		; (str fp, [sp, #-4]!)
   17f90:	add	fp, sp, #0
   17f94:	sub	sp, sp, #12
   17f98:	str	r0, [fp, #-8]
   17f9c:	ldr	r3, [fp, #-8]
   17fa0:	ldr	r3, [r3, #16]
   17fa4:	mov	r0, r3
   17fa8:	add	sp, fp, #0
   17fac:	pop	{fp}		; (ldr fp, [sp], #4)
   17fb0:	bx	lr
   17fb4:	push	{r4, fp, lr}
   17fb8:	add	fp, sp, #8
   17fbc:	sub	sp, sp, #116	; 0x74
   17fc0:	str	r0, [fp, #-112]	; 0xffffff90
   17fc4:	str	r1, [fp, #-116]	; 0xffffff8c
   17fc8:	str	r2, [fp, #-120]	; 0xffffff88
   17fcc:	str	r3, [fp, #-124]	; 0xffffff84
   17fd0:	ldr	r4, [pc, #748]	; 182c4 <flatcc_builder_vector_edit@@Base+0x338>
   17fd4:	add	r4, pc, r4
   17fd8:	ldr	r3, [fp, #-120]	; 0xffffff88
   17fdc:	cmn	r3, #-1073741823	; 0xc0000001
   17fe0:	bls	17fec <flatcc_builder_vector_edit@@Base+0x60>
   17fe4:	mov	r3, #0
   17fe8:	b	182b8 <flatcc_builder_vector_edit@@Base+0x32c>
   17fec:	mov	r1, #4
   17ff0:	ldr	r0, [fp, #-112]	; 0xffffff90
   17ff4:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   17ff8:	ldr	r3, [fp, #-120]	; 0xffffff88
   17ffc:	lsl	r3, r3, #2
   18000:	str	r3, [fp, #-20]	; 0xffffffec
   18004:	ldr	r0, [fp, #-120]	; 0xffffff88
   18008:	bl	13cd0 <main@@Base+0x11c>
   1800c:	mov	r3, r0
   18010:	str	r3, [fp, #-36]	; 0xffffffdc
   18014:	mov	r2, #4
   18018:	ldr	r1, [fp, #-20]	; 0xffffffec
   1801c:	ldr	r0, [fp, #-112]	; 0xffffff90
   18020:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   18024:	str	r0, [fp, #-24]	; 0xffffffe8
   18028:	mov	r3, #0
   1802c:	str	r3, [fp, #-108]	; 0xffffff94
   18030:	mov	r3, #0
   18034:	str	r3, [fp, #-104]	; 0xffffff98
   18038:	ldr	r3, [fp, #-108]	; 0xffffff94
   1803c:	add	r3, r3, #4
   18040:	str	r3, [fp, #-108]	; 0xffffff94
   18044:	ldr	r3, [fp, #-104]	; 0xffffff98
   18048:	add	r3, r3, #1
   1804c:	lsl	r3, r3, #3
   18050:	sub	r2, fp, #12
   18054:	add	r3, r2, r3
   18058:	sub	r2, fp, #36	; 0x24
   1805c:	str	r2, [r3, #-96]	; 0xffffffa0
   18060:	ldr	r3, [fp, #-104]	; 0xffffff98
   18064:	add	r3, r3, #1
   18068:	lsl	r3, r3, #3
   1806c:	sub	r2, fp, #12
   18070:	add	r3, r2, r3
   18074:	mov	r2, #4
   18078:	str	r2, [r3, #-92]	; 0xffffffa4
   1807c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18080:	add	r3, r3, #1
   18084:	str	r3, [fp, #-104]	; 0xffffff98
   18088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1808c:	cmp	r3, #0
   18090:	beq	180e8 <flatcc_builder_vector_edit@@Base+0x15c>
   18094:	ldr	r2, [fp, #-108]	; 0xffffff94
   18098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1809c:	add	r3, r2, r3
   180a0:	str	r3, [fp, #-108]	; 0xffffff94
   180a4:	ldr	r3, [fp, #-104]	; 0xffffff98
   180a8:	add	r3, r3, #1
   180ac:	lsl	r3, r3, #3
   180b0:	sub	r2, fp, #12
   180b4:	add	r3, r2, r3
   180b8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   180bc:	str	r2, [r3, #-96]	; 0xffffffa0
   180c0:	ldr	r3, [fp, #-104]	; 0xffffff98
   180c4:	add	r3, r3, #1
   180c8:	lsl	r3, r3, #3
   180cc:	sub	r2, fp, #12
   180d0:	add	r3, r2, r3
   180d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   180d8:	str	r2, [r3, #-92]	; 0xffffffa4
   180dc:	ldr	r3, [fp, #-104]	; 0xffffff98
   180e0:	add	r3, r3, #1
   180e4:	str	r3, [fp, #-104]	; 0xffffff98
   180e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180ec:	cmp	r3, #0
   180f0:	beq	1814c <flatcc_builder_vector_edit@@Base+0x1c0>
   180f4:	ldr	r2, [fp, #-108]	; 0xffffff94
   180f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180fc:	add	r3, r2, r3
   18100:	str	r3, [fp, #-108]	; 0xffffff94
   18104:	ldr	r3, [fp, #-104]	; 0xffffff98
   18108:	add	r3, r3, #1
   1810c:	lsl	r3, r3, #3
   18110:	sub	r2, fp, #12
   18114:	add	r3, r2, r3
   18118:	ldr	r2, [pc, #424]	; 182c8 <flatcc_builder_vector_edit@@Base+0x33c>
   1811c:	ldr	r2, [r4, r2]
   18120:	str	r2, [r3, #-96]	; 0xffffffa0
   18124:	ldr	r3, [fp, #-104]	; 0xffffff98
   18128:	add	r3, r3, #1
   1812c:	lsl	r3, r3, #3
   18130:	sub	r2, fp, #12
   18134:	add	r3, r2, r3
   18138:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1813c:	str	r2, [r3, #-92]	; 0xffffffa4
   18140:	ldr	r3, [fp, #-104]	; 0xffffff98
   18144:	add	r3, r3, #1
   18148:	str	r3, [fp, #-104]	; 0xffffff98
   1814c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18150:	ldr	r3, [r3, #136]	; 0x88
   18154:	mov	r2, r3
   18158:	ldr	r3, [fp, #-108]	; 0xffffff94
   1815c:	sub	r3, r2, r3
   18160:	str	r3, [fp, #-28]	; 0xffffffe4
   18164:	mov	r3, #0
   18168:	str	r3, [fp, #-16]
   1816c:	b	18294 <flatcc_builder_vector_edit@@Base+0x308>
   18170:	ldr	r3, [fp, #-16]
   18174:	lsl	r3, r3, #2
   18178:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1817c:	add	r3, r2, r3
   18180:	ldr	r3, [r3]
   18184:	cmp	r3, #0
   18188:	beq	18224 <flatcc_builder_vector_edit@@Base+0x298>
   1818c:	ldr	r3, [fp, #-16]
   18190:	lsl	r3, r3, #2
   18194:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18198:	add	r3, r2, r3
   1819c:	ldr	r3, [r3]
   181a0:	mov	r2, r3
   181a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   181a8:	sub	r2, r2, r3
   181ac:	ldr	r3, [fp, #-16]
   181b0:	lsl	r3, r3, #2
   181b4:	sub	r3, r2, r3
   181b8:	sub	r3, r3, #4
   181bc:	str	r3, [fp, #-32]	; 0xffffffe0
   181c0:	ldr	r3, [fp, #-16]
   181c4:	lsl	r3, r3, #2
   181c8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   181cc:	add	r4, r2, r3
   181d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   181d4:	bl	13cd0 <main@@Base+0x11c>
   181d8:	mov	r3, r0
   181dc:	str	r3, [r4]
   181e0:	ldr	r3, [fp, #-124]	; 0xffffff84
   181e4:	cmp	r3, #0
   181e8:	beq	18288 <flatcc_builder_vector_edit@@Base+0x2fc>
   181ec:	ldr	r2, [fp, #-124]	; 0xffffff84
   181f0:	ldr	r3, [fp, #-16]
   181f4:	add	r3, r2, r3
   181f8:	ldrb	r3, [r3]
   181fc:	cmp	r3, #0
   18200:	bne	18288 <flatcc_builder_vector_edit@@Base+0x2fc>
   18204:	ldr	r3, [pc, #192]	; 182cc <flatcc_builder_vector_edit@@Base+0x340>
   18208:	add	r3, pc, r3
   1820c:	ldr	r2, [pc, #188]	; 182d0 <flatcc_builder_vector_edit@@Base+0x344>
   18210:	ldr	r1, [pc, #188]	; 182d4 <flatcc_builder_vector_edit@@Base+0x348>
   18214:	add	r1, pc, r1
   18218:	ldr	r0, [pc, #184]	; 182d8 <flatcc_builder_vector_edit@@Base+0x34c>
   1821c:	add	r0, pc, r0
   18220:	bl	1234c <__assert_fail@plt>
   18224:	ldr	r3, [fp, #-124]	; 0xffffff84
   18228:	cmp	r3, #0
   1822c:	beq	18268 <flatcc_builder_vector_edit@@Base+0x2dc>
   18230:	ldr	r2, [fp, #-124]	; 0xffffff84
   18234:	ldr	r3, [fp, #-16]
   18238:	add	r3, r2, r3
   1823c:	ldrb	r3, [r3]
   18240:	cmp	r3, #0
   18244:	beq	18288 <flatcc_builder_vector_edit@@Base+0x2fc>
   18248:	ldr	r3, [pc, #140]	; 182dc <flatcc_builder_vector_edit@@Base+0x350>
   1824c:	add	r3, pc, r3
   18250:	ldr	r2, [pc, #136]	; 182e0 <flatcc_builder_vector_edit@@Base+0x354>
   18254:	ldr	r1, [pc, #136]	; 182e4 <flatcc_builder_vector_edit@@Base+0x358>
   18258:	add	r1, pc, r1
   1825c:	ldr	r0, [pc, #132]	; 182e8 <flatcc_builder_vector_edit@@Base+0x35c>
   18260:	add	r0, pc, r0
   18264:	bl	1234c <__assert_fail@plt>
   18268:	ldr	r3, [pc, #124]	; 182ec <flatcc_builder_vector_edit@@Base+0x360>
   1826c:	add	r3, pc, r3
   18270:	ldr	r2, [pc, #120]	; 182f0 <flatcc_builder_vector_edit@@Base+0x364>
   18274:	ldr	r1, [pc, #120]	; 182f4 <flatcc_builder_vector_edit@@Base+0x368>
   18278:	add	r1, pc, r1
   1827c:	ldr	r0, [pc, #116]	; 182f8 <flatcc_builder_vector_edit@@Base+0x36c>
   18280:	add	r0, pc, r0
   18284:	bl	1234c <__assert_fail@plt>
   18288:	ldr	r3, [fp, #-16]
   1828c:	add	r3, r3, #1
   18290:	str	r3, [fp, #-16]
   18294:	ldr	r2, [fp, #-16]
   18298:	ldr	r3, [fp, #-120]	; 0xffffff88
   1829c:	cmp	r2, r3
   182a0:	bcc	18170 <flatcc_builder_vector_edit@@Base+0x1e4>
   182a4:	sub	r3, fp, #108	; 0x6c
   182a8:	mov	r1, r3
   182ac:	ldr	r0, [fp, #-112]	; 0xffffff90
   182b0:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   182b4:	mov	r3, r0
   182b8:	mov	r0, r3
   182bc:	sub	sp, fp, #8
   182c0:	pop	{r4, fp, pc}
   182c4:	andeq	r7, r1, r4, lsr #32
   182c8:	andeq	r0, r0, r4, asr #32
   182cc:	andeq	r5, r0, ip, ror #16
   182d0:			; <UNDEFINED> instruction: 0x000005b1
   182d4:	andeq	r5, r0, r0, ror #1
   182d8:	ldrdeq	r5, [r0], -r8
   182dc:	andeq	r5, r0, r8, lsr #16
   182e0:			; <UNDEFINED> instruction: 0x000005b5
   182e4:	muleq	r0, ip, r0
   182e8:	andeq	r5, r0, r4, lsr #7
   182ec:	andeq	r5, r0, r8, lsl #16
   182f0:			; <UNDEFINED> instruction: 0x000005b7
   182f4:	andeq	r5, r0, ip, ror r0
   182f8:	ldrdeq	r5, [r0], -r4

000182fc <flatcc_builder_create_offset_vector_direct@@Base>:
   182fc:	push	{fp, lr}
   18300:	add	fp, sp, #4
   18304:	sub	sp, sp, #16
   18308:	str	r0, [fp, #-8]
   1830c:	str	r1, [fp, #-12]
   18310:	str	r2, [fp, #-16]
   18314:	mov	r3, #0
   18318:	ldr	r2, [fp, #-16]
   1831c:	ldr	r1, [fp, #-12]
   18320:	ldr	r0, [fp, #-8]
   18324:	bl	17fb4 <flatcc_builder_vector_edit@@Base+0x28>
   18328:	mov	r3, r0
   1832c:	mov	r0, r3
   18330:	sub	sp, fp, #4
   18334:	pop	{fp, pc}

00018338 <flatcc_builder_end_offset_vector@@Base>:
   18338:	push	{fp, lr}
   1833c:	add	fp, sp, #4
   18340:	sub	sp, sp, #16
   18344:	str	r0, [fp, #-16]
   18348:	ldr	r3, [fp, #-16]
   1834c:	ldr	r3, [r3, #32]
   18350:	ldrh	r3, [r3, #14]
   18354:	cmp	r3, #5
   18358:	beq	1837c <flatcc_builder_end_offset_vector@@Base+0x44>
   1835c:	ldr	r3, [pc, #104]	; 183cc <flatcc_builder_end_offset_vector@@Base+0x94>
   18360:	add	r3, pc, r3
   18364:	ldr	r2, [pc, #100]	; 183d0 <flatcc_builder_end_offset_vector@@Base+0x98>
   18368:	ldr	r1, [pc, #100]	; 183d4 <flatcc_builder_end_offset_vector@@Base+0x9c>
   1836c:	add	r1, pc, r1
   18370:	ldr	r0, [pc, #96]	; 183d8 <flatcc_builder_end_offset_vector@@Base+0xa0>
   18374:	add	r0, pc, r0
   18378:	bl	1234c <__assert_fail@plt>
   1837c:	ldr	r3, [fp, #-16]
   18380:	ldr	r1, [r3, #16]
   18384:	ldr	r3, [fp, #-16]
   18388:	ldr	r3, [r3, #32]
   1838c:	ldr	r3, [r3, #20]
   18390:	mov	r2, r3
   18394:	ldr	r0, [fp, #-16]
   18398:	bl	182fc <flatcc_builder_create_offset_vector_direct@@Base>
   1839c:	str	r0, [fp, #-8]
   183a0:	ldr	r3, [fp, #-8]
   183a4:	cmp	r3, #0
   183a8:	bne	183b4 <flatcc_builder_end_offset_vector@@Base+0x7c>
   183ac:	mov	r3, #0
   183b0:	b	183c0 <flatcc_builder_end_offset_vector@@Base+0x88>
   183b4:	ldr	r0, [fp, #-16]
   183b8:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   183bc:	ldr	r3, [fp, #-8]
   183c0:	mov	r0, r3
   183c4:	sub	sp, fp, #4
   183c8:	pop	{fp, pc}
   183cc:	andeq	r5, r0, r4, lsr r7
   183d0:	andeq	r0, r0, r8, asr #11
   183d4:	andeq	r4, r0, r8, lsl #31
   183d8:	andeq	r5, r0, r0, lsr r1

000183dc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   183dc:	push	{fp, lr}
   183e0:	add	fp, sp, #4
   183e4:	sub	sp, sp, #16
   183e8:	str	r0, [fp, #-16]
   183ec:	str	r1, [fp, #-20]	; 0xffffffec
   183f0:	ldr	r3, [fp, #-16]
   183f4:	ldr	r3, [r3, #32]
   183f8:	ldrh	r3, [r3, #14]
   183fc:	cmp	r3, #5
   18400:	beq	18424 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   18404:	ldr	r3, [pc, #104]	; 18474 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   18408:	add	r3, pc, r3
   1840c:	ldr	r2, [pc, #100]	; 18478 <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   18410:	ldr	r1, [pc, #100]	; 1847c <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   18414:	add	r1, pc, r1
   18418:	ldr	r0, [pc, #96]	; 18480 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   1841c:	add	r0, pc, r0
   18420:	bl	1234c <__assert_fail@plt>
   18424:	ldr	r3, [fp, #-16]
   18428:	ldr	r1, [r3, #16]
   1842c:	ldr	r3, [fp, #-16]
   18430:	ldr	r3, [r3, #32]
   18434:	ldr	r2, [r3, #20]
   18438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1843c:	ldr	r0, [fp, #-16]
   18440:	bl	17fb4 <flatcc_builder_vector_edit@@Base+0x28>
   18444:	str	r0, [fp, #-8]
   18448:	ldr	r3, [fp, #-8]
   1844c:	cmp	r3, #0
   18450:	bne	1845c <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   18454:	mov	r3, #0
   18458:	b	18468 <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   1845c:	ldr	r0, [fp, #-16]
   18460:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18464:	ldr	r3, [fp, #-8]
   18468:	mov	r0, r3
   1846c:	sub	sp, fp, #4
   18470:	pop	{fp, pc}
   18474:			; <UNDEFINED> instruction: 0x000056b0
   18478:	ldrdeq	r0, [r0], -r5
   1847c:	andeq	r4, r0, r0, ror #29
   18480:	andeq	r5, r0, r8, lsl #1

00018484 <flatcc_builder_offset_vector_edit@@Base>:
   18484:	push	{fp}		; (str fp, [sp, #-4]!)
   18488:	add	fp, sp, #0
   1848c:	sub	sp, sp, #12
   18490:	str	r0, [fp, #-8]
   18494:	ldr	r3, [fp, #-8]
   18498:	ldr	r3, [r3, #16]
   1849c:	mov	r0, r3
   184a0:	add	sp, fp, #0
   184a4:	pop	{fp}		; (ldr fp, [sp], #4)
   184a8:	bx	lr

000184ac <flatcc_builder_offset_vector_count@@Base>:
   184ac:	push	{fp}		; (str fp, [sp, #-4]!)
   184b0:	add	fp, sp, #0
   184b4:	sub	sp, sp, #12
   184b8:	str	r0, [fp, #-8]
   184bc:	ldr	r3, [fp, #-8]
   184c0:	ldr	r3, [r3, #32]
   184c4:	ldr	r3, [r3, #20]
   184c8:	mov	r0, r3
   184cc:	add	sp, fp, #0
   184d0:	pop	{fp}		; (ldr fp, [sp], #4)
   184d4:	bx	lr

000184d8 <flatcc_builder_table_add_union@@Base>:
   184d8:	push	{fp, lr}
   184dc:	add	fp, sp, #4
   184e0:	sub	sp, sp, #24
   184e4:	str	r0, [fp, #-16]
   184e8:	str	r1, [fp, #-20]	; 0xffffffec
   184ec:	sub	r1, fp, #28
   184f0:	stm	r1, {r2, r3}
   184f4:	ldr	r3, [fp, #-16]
   184f8:	ldr	r3, [r3, #32]
   184fc:	ldrh	r3, [r3, #14]
   18500:	cmp	r3, #3
   18504:	beq	18528 <flatcc_builder_table_add_union@@Base+0x50>
   18508:	ldr	r3, [pc, #352]	; 18670 <flatcc_builder_table_add_union@@Base+0x198>
   1850c:	add	r3, pc, r3
   18510:	ldr	r2, [pc, #348]	; 18674 <flatcc_builder_table_add_union@@Base+0x19c>
   18514:	ldr	r1, [pc, #348]	; 18678 <flatcc_builder_table_add_union@@Base+0x1a0>
   18518:	add	r1, pc, r1
   1851c:	ldr	r0, [pc, #344]	; 1867c <flatcc_builder_table_add_union@@Base+0x1a4>
   18520:	add	r0, pc, r0
   18524:	bl	1234c <__assert_fail@plt>
   18528:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1852c:	cmp	r3, #0
   18530:	bne	18580 <flatcc_builder_table_add_union@@Base+0xa8>
   18534:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18538:	cmp	r3, #0
   1853c:	beq	18580 <flatcc_builder_table_add_union@@Base+0xa8>
   18540:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18544:	cmp	r3, #0
   18548:	bne	18578 <flatcc_builder_table_add_union@@Base+0xa0>
   1854c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18550:	cmp	r3, #0
   18554:	beq	18578 <flatcc_builder_table_add_union@@Base+0xa0>
   18558:	ldr	r3, [pc, #288]	; 18680 <flatcc_builder_table_add_union@@Base+0x1a8>
   1855c:	add	r3, pc, r3
   18560:	ldr	r2, [pc, #284]	; 18684 <flatcc_builder_table_add_union@@Base+0x1ac>
   18564:	ldr	r1, [pc, #284]	; 18688 <flatcc_builder_table_add_union@@Base+0x1b0>
   18568:	add	r1, pc, r1
   1856c:	ldr	r0, [pc, #280]	; 1868c <flatcc_builder_table_add_union@@Base+0x1b4>
   18570:	add	r0, pc, r0
   18574:	bl	1234c <__assert_fail@plt>
   18578:	mvn	r3, #0
   1857c:	b	18664 <flatcc_builder_table_add_union@@Base+0x18c>
   18580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18584:	cmp	r3, #0
   18588:	beq	185e8 <flatcc_builder_table_add_union@@Base+0x110>
   1858c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18590:	ldr	r0, [fp, #-16]
   18594:	bl	19620 <flatcc_builder_table_add_offset@@Base>
   18598:	str	r0, [fp, #-8]
   1859c:	ldr	r3, [fp, #-8]
   185a0:	cmp	r3, #0
   185a4:	bne	185dc <flatcc_builder_table_add_union@@Base+0x104>
   185a8:	ldr	r3, [fp, #-8]
   185ac:	cmp	r3, #0
   185b0:	bne	185d4 <flatcc_builder_table_add_union@@Base+0xfc>
   185b4:	ldr	r3, [pc, #212]	; 18690 <flatcc_builder_table_add_union@@Base+0x1b8>
   185b8:	add	r3, pc, r3
   185bc:	ldr	r2, [pc, #208]	; 18694 <flatcc_builder_table_add_union@@Base+0x1bc>
   185c0:	ldr	r1, [pc, #208]	; 18698 <flatcc_builder_table_add_union@@Base+0x1c0>
   185c4:	add	r1, pc, r1
   185c8:	ldr	r0, [pc, #204]	; 1869c <flatcc_builder_table_add_union@@Base+0x1c4>
   185cc:	add	r0, pc, r0
   185d0:	bl	1234c <__assert_fail@plt>
   185d4:	mvn	r3, #0
   185d8:	b	18664 <flatcc_builder_table_add_union@@Base+0x18c>
   185dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   185e0:	ldr	r3, [fp, #-8]
   185e4:	str	r2, [r3]
   185e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   185ec:	sub	r1, r3, #1
   185f0:	mov	r3, #1
   185f4:	mov	r2, #1
   185f8:	ldr	r0, [fp, #-16]
   185fc:	bl	193c4 <flatcc_builder_table_add@@Base>
   18600:	str	r0, [fp, #-12]
   18604:	ldr	r3, [fp, #-12]
   18608:	cmp	r3, #0
   1860c:	bne	18644 <flatcc_builder_table_add_union@@Base+0x16c>
   18610:	ldr	r3, [fp, #-12]
   18614:	cmp	r3, #0
   18618:	bne	1863c <flatcc_builder_table_add_union@@Base+0x164>
   1861c:	ldr	r3, [pc, #124]	; 186a0 <flatcc_builder_table_add_union@@Base+0x1c8>
   18620:	add	r3, pc, r3
   18624:	ldr	r2, [pc, #120]	; 186a4 <flatcc_builder_table_add_union@@Base+0x1cc>
   18628:	ldr	r1, [pc, #120]	; 186a8 <flatcc_builder_table_add_union@@Base+0x1d0>
   1862c:	add	r1, pc, r1
   18630:	ldr	r0, [pc, #116]	; 186ac <flatcc_builder_table_add_union@@Base+0x1d4>
   18634:	add	r0, pc, r0
   18638:	bl	1234c <__assert_fail@plt>
   1863c:	mvn	r3, #0
   18640:	b	18664 <flatcc_builder_table_add_union@@Base+0x18c>
   18644:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18648:	mov	r0, r3
   1864c:	bl	13cf4 <main@@Base+0x140>
   18650:	mov	r3, r0
   18654:	mov	r2, r3
   18658:	ldr	r3, [fp, #-12]
   1865c:	strb	r2, [r3]
   18660:	mov	r3, #0
   18664:	mov	r0, r3
   18668:	sub	sp, fp, #4
   1866c:	pop	{fp, pc}
   18670:	ldrdeq	r5, [r0], -r8
   18674:	andeq	r0, r0, lr, ror #11
   18678:	ldrdeq	r4, [r0], -ip
   1867c:	muleq	r0, r4, r0
   18680:	andeq	r5, r0, r8, lsl #11
   18684:	andeq	r0, r0, pc, ror #11
   18688:	andeq	r4, r0, ip, lsl #27
   1868c:	andeq	r5, r0, r4, lsr #1
   18690:	andeq	r5, r0, ip, lsr #10
   18694:	strdeq	r0, [r0], -r2
   18698:	andeq	r4, r0, r0, lsr sp
   1869c:	andeq	r5, r0, ip, rrx
   186a0:	andeq	r5, r0, r4, asr #9
   186a4:	strdeq	r0, [r0], -r6
   186a8:	andeq	r4, r0, r8, asr #25
   186ac:	andeq	r5, r0, r0, lsl r0

000186b0 <flatcc_builder_table_add_union_vector@@Base>:
   186b0:	push	{fp, lr}
   186b4:	add	fp, sp, #4
   186b8:	sub	sp, sp, #24
   186bc:	str	r0, [fp, #-16]
   186c0:	str	r1, [fp, #-20]	; 0xffffffec
   186c4:	sub	r1, fp, #28
   186c8:	stm	r1, {r2, r3}
   186cc:	ldr	r3, [fp, #-16]
   186d0:	ldr	r3, [r3, #32]
   186d4:	ldrh	r3, [r3, #14]
   186d8:	cmp	r3, #3
   186dc:	beq	18700 <flatcc_builder_table_add_union_vector@@Base+0x50>
   186e0:	ldr	r3, [pc, #396]	; 18874 <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   186e4:	add	r3, pc, r3
   186e8:	mov	r2, #1536	; 0x600
   186ec:	ldr	r1, [pc, #388]	; 18878 <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   186f0:	add	r1, pc, r1
   186f4:	ldr	r0, [pc, #384]	; 1887c <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   186f8:	add	r0, pc, r0
   186fc:	bl	1234c <__assert_fail@plt>
   18700:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18704:	cmp	r3, #0
   18708:	moveq	r3, #1
   1870c:	movne	r3, #0
   18710:	uxtb	r2, r3
   18714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18718:	cmp	r3, #0
   1871c:	moveq	r3, #1
   18720:	movne	r3, #0
   18724:	uxtb	r3, r3
   18728:	eor	r3, r3, r2
   1872c:	uxtb	r3, r3
   18730:	cmp	r3, #0
   18734:	beq	18798 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   18738:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1873c:	cmp	r3, #0
   18740:	movne	r3, #1
   18744:	moveq	r3, #0
   18748:	uxtb	r2, r3
   1874c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18750:	cmp	r3, #0
   18754:	moveq	r3, #1
   18758:	movne	r3, #0
   1875c:	uxtb	r3, r3
   18760:	eor	r3, r3, r2
   18764:	uxtb	r3, r3
   18768:	cmp	r3, #0
   1876c:	bne	18790 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   18770:	ldr	r3, [pc, #264]	; 18880 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   18774:	add	r3, pc, r3
   18778:	ldr	r2, [pc, #260]	; 18884 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1877c:	ldr	r1, [pc, #260]	; 18888 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   18780:	add	r1, pc, r1
   18784:	ldr	r0, [pc, #256]	; 1888c <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   18788:	add	r0, pc, r0
   1878c:	bl	1234c <__assert_fail@plt>
   18790:	mvn	r3, #0
   18794:	b	18868 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18798:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1879c:	cmp	r3, #0
   187a0:	beq	18864 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   187a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   187a8:	sub	r3, r3, #1
   187ac:	mov	r1, r3
   187b0:	ldr	r0, [fp, #-16]
   187b4:	bl	19620 <flatcc_builder_table_add_offset@@Base>
   187b8:	str	r0, [fp, #-8]
   187bc:	ldr	r3, [fp, #-8]
   187c0:	cmp	r3, #0
   187c4:	bne	187fc <flatcc_builder_table_add_union_vector@@Base+0x14c>
   187c8:	ldr	r3, [fp, #-8]
   187cc:	cmp	r3, #0
   187d0:	bne	187f4 <flatcc_builder_table_add_union_vector@@Base+0x144>
   187d4:	ldr	r3, [pc, #180]	; 18890 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   187d8:	add	r3, pc, r3
   187dc:	ldr	r2, [pc, #176]	; 18894 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   187e0:	ldr	r1, [pc, #176]	; 18898 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   187e4:	add	r1, pc, r1
   187e8:	ldr	r0, [pc, #172]	; 1889c <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   187ec:	add	r0, pc, r0
   187f0:	bl	1234c <__assert_fail@plt>
   187f4:	mvn	r3, #0
   187f8:	b	18868 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   187fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18800:	ldr	r3, [fp, #-8]
   18804:	str	r2, [r3]
   18808:	ldr	r1, [fp, #-20]	; 0xffffffec
   1880c:	ldr	r0, [fp, #-16]
   18810:	bl	19620 <flatcc_builder_table_add_offset@@Base>
   18814:	str	r0, [fp, #-8]
   18818:	ldr	r3, [fp, #-8]
   1881c:	cmp	r3, #0
   18820:	bne	18858 <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   18824:	ldr	r3, [fp, #-8]
   18828:	cmp	r3, #0
   1882c:	bne	18850 <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   18830:	ldr	r3, [pc, #104]	; 188a0 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18834:	add	r3, pc, r3
   18838:	ldr	r2, [pc, #100]	; 188a4 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   1883c:	ldr	r1, [pc, #100]	; 188a8 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18840:	add	r1, pc, r1
   18844:	ldr	r0, [pc, #96]	; 188ac <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   18848:	add	r0, pc, r0
   1884c:	bl	1234c <__assert_fail@plt>
   18850:	mvn	r3, #0
   18854:	b	18868 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18858:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1885c:	ldr	r3, [fp, #-8]
   18860:	str	r2, [r3]
   18864:	mov	r3, #0
   18868:	mov	r0, r3
   1886c:	sub	sp, fp, #4
   18870:	pop	{fp, pc}
   18874:	andeq	r5, r0, r0, lsr #8
   18878:	andeq	r4, r0, r4, lsl #24
   1887c:			; <UNDEFINED> instruction: 0x00004ebc
   18880:	muleq	r0, r0, r3
   18884:	andeq	r0, r0, r1, lsl #12
   18888:	andeq	r4, r0, r4, ror fp
   1888c:	andeq	r4, r0, r8, asr #29
   18890:	andeq	r5, r0, ip, lsr #6
   18894:	andeq	r0, r0, r4, lsl #12
   18898:	andeq	r4, r0, r0, lsl fp
   1889c:	andeq	r4, r0, ip, asr #28
   188a0:	ldrdeq	r5, [r0], -r0
   188a4:	andeq	r0, r0, r8, lsl #12
   188a8:			; <UNDEFINED> instruction: 0x00004ab4
   188ac:	strdeq	r4, [r0], -r0

000188b0 <flatcc_builder_create_union_vector@@Base>:
   188b0:	push	{fp, lr}
   188b4:	add	fp, sp, #4
   188b8:	sub	sp, sp, #48	; 0x30
   188bc:	str	r0, [fp, #-32]	; 0xffffffe0
   188c0:	str	r1, [fp, #-36]	; 0xffffffdc
   188c4:	str	r2, [fp, #-40]	; 0xffffffd8
   188c8:	str	r3, [fp, #-44]	; 0xffffffd4
   188cc:	mov	r3, #0
   188d0:	str	r3, [fp, #-24]	; 0xffffffe8
   188d4:	mov	r3, #0
   188d8:	str	r3, [fp, #-20]	; 0xffffffec
   188dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   188e0:	bl	16ce4 <flatcc_builder_start_offset_vector@@Base>
   188e4:	mov	r3, r0
   188e8:	cmp	r3, #0
   188ec:	beq	18908 <flatcc_builder_create_union_vector@@Base+0x58>
   188f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188f4:	mov	r2, r3
   188f8:	sub	r3, fp, #24
   188fc:	ldm	r3, {r0, r1}
   18900:	stm	r2, {r0, r1}
   18904:	b	18a24 <flatcc_builder_create_union_vector@@Base+0x174>
   18908:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1890c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18910:	bl	16590 <flatcc_builder_extend_offset_vector@@Base>
   18914:	mov	r3, r0
   18918:	cmp	r3, #0
   1891c:	bne	18938 <flatcc_builder_create_union_vector@@Base+0x88>
   18920:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18924:	mov	r2, r3
   18928:	sub	r3, fp, #24
   1892c:	ldm	r3, {r0, r1}
   18930:	stm	r2, {r0, r1}
   18934:	b	18a24 <flatcc_builder_create_union_vector@@Base+0x174>
   18938:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1893c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18940:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   18944:	str	r0, [fp, #-12]
   18948:	ldr	r3, [fp, #-12]
   1894c:	cmp	r3, #0
   18950:	bne	1896c <flatcc_builder_create_union_vector@@Base+0xbc>
   18954:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18958:	mov	r2, r3
   1895c:	sub	r3, fp, #24
   18960:	ldm	r3, {r0, r1}
   18964:	stm	r2, {r0, r1}
   18968:	b	18a24 <flatcc_builder_create_union_vector@@Base+0x174>
   1896c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18970:	bl	18484 <flatcc_builder_offset_vector_edit@@Base>
   18974:	str	r0, [fp, #-16]
   18978:	mov	r3, #0
   1897c:	str	r3, [fp, #-8]
   18980:	b	189dc <flatcc_builder_create_union_vector@@Base+0x12c>
   18984:	ldr	r2, [fp, #-12]
   18988:	ldr	r3, [fp, #-8]
   1898c:	add	r3, r2, r3
   18990:	ldr	r2, [fp, #-8]
   18994:	lsl	r2, r2, #3
   18998:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1899c:	add	r2, r1, r2
   189a0:	ldrb	r2, [r2]
   189a4:	strb	r2, [r3]
   189a8:	ldr	r3, [fp, #-8]
   189ac:	lsl	r3, r3, #2
   189b0:	ldr	r2, [fp, #-16]
   189b4:	add	r3, r2, r3
   189b8:	ldr	r2, [fp, #-8]
   189bc:	lsl	r2, r2, #3
   189c0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   189c4:	add	r2, r1, r2
   189c8:	ldr	r2, [r2, #4]
   189cc:	str	r2, [r3]
   189d0:	ldr	r3, [fp, #-8]
   189d4:	add	r3, r3, #1
   189d8:	str	r3, [fp, #-8]
   189dc:	ldr	r2, [fp, #-8]
   189e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   189e4:	cmp	r2, r3
   189e8:	bcc	18984 <flatcc_builder_create_union_vector@@Base+0xd4>
   189ec:	sub	r0, fp, #24
   189f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   189f4:	str	r3, [sp]
   189f8:	ldr	r3, [fp, #-16]
   189fc:	ldr	r2, [fp, #-12]
   18a00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18a04:	bl	18a30 <flatcc_builder_create_union_vector_direct@@Base>
   18a08:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18a0c:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18a14:	mov	r2, r3
   18a18:	sub	r3, fp, #24
   18a1c:	ldm	r3, {r0, r1}
   18a20:	stm	r2, {r0, r1}
   18a24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18a28:	sub	sp, fp, #4
   18a2c:	pop	{fp, pc}

00018a30 <flatcc_builder_create_union_vector_direct@@Base>:
   18a30:	push	{fp, lr}
   18a34:	add	fp, sp, #4
   18a38:	sub	sp, sp, #32
   18a3c:	str	r0, [fp, #-16]
   18a40:	str	r1, [fp, #-20]	; 0xffffffec
   18a44:	str	r2, [fp, #-24]	; 0xffffffe8
   18a48:	str	r3, [fp, #-28]	; 0xffffffe4
   18a4c:	mov	r3, #0
   18a50:	str	r3, [fp, #-12]
   18a54:	mov	r3, #0
   18a58:	str	r3, [fp, #-8]
   18a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a60:	ldr	r2, [fp, #4]
   18a64:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18a68:	ldr	r0, [fp, #-20]	; 0xffffffec
   18a6c:	bl	17fb4 <flatcc_builder_vector_edit@@Base+0x28>
   18a70:	mov	r3, r0
   18a74:	str	r3, [fp, #-8]
   18a78:	ldr	r3, [fp, #-8]
   18a7c:	cmp	r3, #0
   18a80:	bne	18a9c <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   18a84:	ldr	r3, [fp, #-16]
   18a88:	mov	r2, r3
   18a8c:	sub	r3, fp, #12
   18a90:	ldm	r3, {r0, r1}
   18a94:	stm	r2, {r0, r1}
   18a98:	b	18b00 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18a9c:	mvn	r3, #0
   18aa0:	str	r3, [sp, #4]
   18aa4:	mov	r3, #1
   18aa8:	str	r3, [sp]
   18aac:	mov	r3, #1
   18ab0:	ldr	r2, [fp, #4]
   18ab4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18ab8:	ldr	r0, [fp, #-20]	; 0xffffffec
   18abc:	bl	17c70 <flatcc_builder_create_vector@@Base>
   18ac0:	mov	r3, r0
   18ac4:	str	r3, [fp, #-12]
   18ac8:	ldr	r3, [fp, #-12]
   18acc:	cmp	r3, #0
   18ad0:	bne	18aec <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   18ad4:	ldr	r3, [fp, #-16]
   18ad8:	mov	r2, r3
   18adc:	sub	r3, fp, #12
   18ae0:	ldm	r3, {r0, r1}
   18ae4:	stm	r2, {r0, r1}
   18ae8:	b	18b00 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18aec:	ldr	r3, [fp, #-16]
   18af0:	mov	r2, r3
   18af4:	sub	r3, fp, #12
   18af8:	ldm	r3, {r0, r1}
   18afc:	stm	r2, {r0, r1}
   18b00:	ldr	r0, [fp, #-16]
   18b04:	sub	sp, fp, #4
   18b08:	pop	{fp, pc}

00018b0c <flatcc_builder_start_union_vector@@Base>:
   18b0c:	push	{fp, lr}
   18b10:	add	fp, sp, #4
   18b14:	sub	sp, sp, #8
   18b18:	str	r0, [fp, #-8]
   18b1c:	mov	r1, #4
   18b20:	ldr	r0, [fp, #-8]
   18b24:	bl	15064 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18b28:	mov	r3, r0
   18b2c:	cmp	r3, #0
   18b30:	beq	18b3c <flatcc_builder_start_union_vector@@Base+0x30>
   18b34:	mvn	r3, #0
   18b38:	b	18b7c <flatcc_builder_start_union_vector@@Base+0x70>
   18b3c:	ldr	r3, [fp, #-8]
   18b40:	ldr	r3, [r3, #32]
   18b44:	mov	r2, #8
   18b48:	str	r2, [r3, #16]
   18b4c:	ldr	r3, [fp, #-8]
   18b50:	ldr	r3, [r3, #32]
   18b54:	mov	r2, #0
   18b58:	str	r2, [r3, #20]
   18b5c:	ldr	r3, [fp, #-8]
   18b60:	ldr	r3, [r3, #32]
   18b64:	mov	r2, #7
   18b68:	strh	r2, [r3, #14]
   18b6c:	mvn	r1, #3
   18b70:	ldr	r0, [fp, #-8]
   18b74:	bl	13fdc <flatcc_builder_default_alloc@@Base+0x1c8>
   18b78:	mov	r3, #0
   18b7c:	mov	r0, r3
   18b80:	sub	sp, fp, #4
   18b84:	pop	{fp, pc}

00018b88 <flatcc_builder_end_union_vector@@Base>:
   18b88:	push	{fp, lr}
   18b8c:	add	fp, sp, #4
   18b90:	sub	sp, sp, #48	; 0x30
   18b94:	str	r0, [fp, #-40]	; 0xffffffd8
   18b98:	str	r1, [fp, #-44]	; 0xffffffd4
   18b9c:	mov	r3, #0
   18ba0:	str	r3, [fp, #-32]	; 0xffffffe0
   18ba4:	mov	r3, #0
   18ba8:	str	r3, [fp, #-28]	; 0xffffffe4
   18bac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18bb0:	ldr	r3, [r3, #32]
   18bb4:	ldrh	r3, [r3, #14]
   18bb8:	cmp	r3, #7
   18bbc:	beq	18be0 <flatcc_builder_end_union_vector@@Base+0x58>
   18bc0:	ldr	r3, [pc, #320]	; 18d08 <flatcc_builder_end_union_vector@@Base+0x180>
   18bc4:	add	r3, pc, r3
   18bc8:	ldr	r2, [pc, #316]	; 18d0c <flatcc_builder_end_union_vector@@Base+0x184>
   18bcc:	ldr	r1, [pc, #316]	; 18d10 <flatcc_builder_end_union_vector@@Base+0x188>
   18bd0:	add	r1, pc, r1
   18bd4:	ldr	r0, [pc, #312]	; 18d14 <flatcc_builder_end_union_vector@@Base+0x18c>
   18bd8:	add	r0, pc, r0
   18bdc:	bl	1234c <__assert_fail@plt>
   18be0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18be4:	bl	18d40 <flatcc_builder_union_vector_count@@Base>
   18be8:	str	r0, [fp, #-12]
   18bec:	ldr	r2, [fp, #-12]
   18bf0:	mov	r3, r2
   18bf4:	lsl	r3, r3, #2
   18bf8:	add	r3, r3, r2
   18bfc:	mov	r1, r3
   18c00:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18c04:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   18c08:	str	r0, [fp, #-16]
   18c0c:	ldr	r3, [fp, #-16]
   18c10:	cmp	r3, #0
   18c14:	bne	18c30 <flatcc_builder_end_union_vector@@Base+0xa8>
   18c18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18c1c:	mov	r2, r3
   18c20:	sub	r3, fp, #32
   18c24:	ldm	r3, {r0, r1}
   18c28:	stm	r2, {r0, r1}
   18c2c:	b	18cfc <flatcc_builder_end_union_vector@@Base+0x174>
   18c30:	ldr	r3, [fp, #-12]
   18c34:	lsl	r3, r3, #2
   18c38:	ldr	r2, [fp, #-16]
   18c3c:	add	r3, r2, r3
   18c40:	str	r3, [fp, #-20]	; 0xffffffec
   18c44:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18c48:	bl	18d18 <flatcc_builder_union_vector_edit@@Base>
   18c4c:	str	r0, [fp, #-24]	; 0xffffffe8
   18c50:	mov	r3, #0
   18c54:	str	r3, [fp, #-8]
   18c58:	b	18cb4 <flatcc_builder_end_union_vector@@Base+0x12c>
   18c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c60:	ldr	r3, [fp, #-8]
   18c64:	add	r3, r2, r3
   18c68:	ldr	r2, [fp, #-8]
   18c6c:	lsl	r2, r2, #3
   18c70:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18c74:	add	r2, r1, r2
   18c78:	ldrb	r2, [r2]
   18c7c:	strb	r2, [r3]
   18c80:	ldr	r3, [fp, #-8]
   18c84:	lsl	r3, r3, #2
   18c88:	ldr	r2, [fp, #-16]
   18c8c:	add	r3, r2, r3
   18c90:	ldr	r2, [fp, #-8]
   18c94:	lsl	r2, r2, #3
   18c98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18c9c:	add	r2, r1, r2
   18ca0:	ldr	r2, [r2, #4]
   18ca4:	str	r2, [r3]
   18ca8:	ldr	r3, [fp, #-8]
   18cac:	add	r3, r3, #1
   18cb0:	str	r3, [fp, #-8]
   18cb4:	ldr	r2, [fp, #-8]
   18cb8:	ldr	r3, [fp, #-12]
   18cbc:	cmp	r2, r3
   18cc0:	bcc	18c5c <flatcc_builder_end_union_vector@@Base+0xd4>
   18cc4:	sub	r0, fp, #32
   18cc8:	ldr	r3, [fp, #-12]
   18ccc:	str	r3, [sp]
   18cd0:	ldr	r3, [fp, #-16]
   18cd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18cd8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18cdc:	bl	18a30 <flatcc_builder_create_union_vector_direct@@Base>
   18ce0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18ce4:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18ce8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18cec:	mov	r2, r3
   18cf0:	sub	r3, fp, #32
   18cf4:	ldm	r3, {r0, r1}
   18cf8:	stm	r2, {r0, r1}
   18cfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18d00:	sub	sp, fp, #4
   18d04:	pop	{fp, pc}
   18d08:	andeq	r4, r0, r8, ror #30
   18d0c:	andeq	r0, r0, r1, asr r6
   18d10:	andeq	r4, r0, r4, lsr #14
   18d14:	andeq	r4, r0, r0, lsr #21

00018d18 <flatcc_builder_union_vector_edit@@Base>:
   18d18:	push	{fp}		; (str fp, [sp, #-4]!)
   18d1c:	add	fp, sp, #0
   18d20:	sub	sp, sp, #12
   18d24:	str	r0, [fp, #-8]
   18d28:	ldr	r3, [fp, #-8]
   18d2c:	ldr	r3, [r3, #16]
   18d30:	mov	r0, r3
   18d34:	add	sp, fp, #0
   18d38:	pop	{fp}		; (ldr fp, [sp], #4)
   18d3c:	bx	lr

00018d40 <flatcc_builder_union_vector_count@@Base>:
   18d40:	push	{fp}		; (str fp, [sp, #-4]!)
   18d44:	add	fp, sp, #0
   18d48:	sub	sp, sp, #12
   18d4c:	str	r0, [fp, #-8]
   18d50:	ldr	r3, [fp, #-8]
   18d54:	ldr	r3, [r3, #32]
   18d58:	ldr	r3, [r3, #20]
   18d5c:	mov	r0, r3
   18d60:	add	sp, fp, #0
   18d64:	pop	{fp}		; (ldr fp, [sp], #4)
   18d68:	bx	lr

00018d6c <flatcc_builder_extend_union_vector@@Base>:
   18d6c:	push	{fp, lr}
   18d70:	add	fp, sp, #4
   18d74:	sub	sp, sp, #8
   18d78:	str	r0, [fp, #-8]
   18d7c:	str	r1, [fp, #-12]
   18d80:	mvn	r2, #-536870912	; 0xe0000000
   18d84:	ldr	r1, [fp, #-12]
   18d88:	ldr	r0, [fp, #-8]
   18d8c:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   18d90:	mov	r3, r0
   18d94:	cmp	r3, #0
   18d98:	beq	18da4 <flatcc_builder_extend_union_vector@@Base+0x38>
   18d9c:	mov	r3, #0
   18da0:	b	18dbc <flatcc_builder_extend_union_vector@@Base+0x50>
   18da4:	ldr	r3, [fp, #-12]
   18da8:	lsl	r3, r3, #3
   18dac:	mov	r1, r3
   18db0:	ldr	r0, [fp, #-8]
   18db4:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   18db8:	mov	r3, r0
   18dbc:	mov	r0, r3
   18dc0:	sub	sp, fp, #4
   18dc4:	pop	{fp, pc}

00018dc8 <flatcc_builder_truncate_union_vector@@Base>:
   18dc8:	push	{fp, lr}
   18dcc:	add	fp, sp, #4
   18dd0:	sub	sp, sp, #8
   18dd4:	str	r0, [fp, #-8]
   18dd8:	str	r1, [fp, #-12]
   18ddc:	ldr	r3, [fp, #-8]
   18de0:	ldr	r3, [r3, #32]
   18de4:	ldrh	r3, [r3, #14]
   18de8:	cmp	r3, #7
   18dec:	beq	18e10 <flatcc_builder_truncate_union_vector@@Base+0x48>
   18df0:	ldr	r3, [pc, #192]	; 18eb8 <flatcc_builder_truncate_union_vector@@Base+0xf0>
   18df4:	add	r3, pc, r3
   18df8:	ldr	r2, [pc, #188]	; 18ebc <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18dfc:	ldr	r1, [pc, #188]	; 18ec0 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18e00:	add	r1, pc, r1
   18e04:	ldr	r0, [pc, #184]	; 18ec4 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18e08:	add	r0, pc, r0
   18e0c:	bl	1234c <__assert_fail@plt>
   18e10:	ldr	r3, [fp, #-8]
   18e14:	ldr	r3, [r3, #32]
   18e18:	ldr	r2, [r3, #20]
   18e1c:	ldr	r3, [fp, #-12]
   18e20:	cmp	r2, r3
   18e24:	bcs	18e68 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18e28:	ldr	r3, [fp, #-8]
   18e2c:	ldr	r3, [r3, #32]
   18e30:	ldr	r2, [r3, #20]
   18e34:	ldr	r3, [fp, #-12]
   18e38:	cmp	r2, r3
   18e3c:	bcs	18e60 <flatcc_builder_truncate_union_vector@@Base+0x98>
   18e40:	ldr	r3, [pc, #128]	; 18ec8 <flatcc_builder_truncate_union_vector@@Base+0x100>
   18e44:	add	r3, pc, r3
   18e48:	ldr	r2, [pc, #124]	; 18ecc <flatcc_builder_truncate_union_vector@@Base+0x104>
   18e4c:	ldr	r1, [pc, #124]	; 18ed0 <flatcc_builder_truncate_union_vector@@Base+0x108>
   18e50:	add	r1, pc, r1
   18e54:	ldr	r0, [pc, #120]	; 18ed4 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   18e58:	add	r0, pc, r0
   18e5c:	bl	1234c <__assert_fail@plt>
   18e60:	mvn	r3, #0
   18e64:	b	18eac <flatcc_builder_truncate_union_vector@@Base+0xe4>
   18e68:	ldr	r3, [fp, #-8]
   18e6c:	ldr	r3, [r3, #32]
   18e70:	ldr	r2, [fp, #-8]
   18e74:	ldr	r2, [r2, #32]
   18e78:	ldr	r1, [r2, #20]
   18e7c:	ldr	r2, [fp, #-12]
   18e80:	sub	r2, r1, r2
   18e84:	str	r2, [r3, #20]
   18e88:	ldr	r3, [fp, #-8]
   18e8c:	ldr	r3, [r3, #32]
   18e90:	ldr	r3, [r3, #16]
   18e94:	ldr	r2, [fp, #-12]
   18e98:	mul	r3, r2, r3
   18e9c:	mov	r1, r3
   18ea0:	ldr	r0, [fp, #-8]
   18ea4:	bl	141a0 <flatcc_builder_default_alloc@@Base+0x38c>
   18ea8:	mov	r3, #0
   18eac:	mov	r0, r3
   18eb0:	sub	sp, fp, #4
   18eb4:	pop	{fp, pc}
   18eb8:	andeq	r4, r0, r8, asr sp
   18ebc:	andeq	r0, r0, r1, lsl #13
   18ec0:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   18ec4:	andeq	r4, r0, r0, ror r8
   18ec8:	andeq	r4, r0, r8, lsl #26
   18ecc:	andeq	r0, r0, r2, lsl #13
   18ed0:	andeq	r4, r0, r4, lsr #9
   18ed4:	ldrdeq	r4, [r0], -r0

00018ed8 <flatcc_builder_union_vector_push@@Base>:
   18ed8:	push	{fp, lr}
   18edc:	add	fp, sp, #4
   18ee0:	sub	sp, sp, #24
   18ee4:	str	r0, [fp, #-16]
   18ee8:	sub	r3, fp, #24
   18eec:	stm	r3, {r1, r2}
   18ef0:	ldr	r3, [fp, #-16]
   18ef4:	ldr	r3, [r3, #32]
   18ef8:	ldrh	r3, [r3, #14]
   18efc:	cmp	r3, #7
   18f00:	beq	18f24 <flatcc_builder_union_vector_push@@Base+0x4c>
   18f04:	ldr	r3, [pc, #152]	; 18fa4 <flatcc_builder_union_vector_push@@Base+0xcc>
   18f08:	add	r3, pc, r3
   18f0c:	ldr	r2, [pc, #148]	; 18fa8 <flatcc_builder_union_vector_push@@Base+0xd0>
   18f10:	ldr	r1, [pc, #148]	; 18fac <flatcc_builder_union_vector_push@@Base+0xd4>
   18f14:	add	r1, pc, r1
   18f18:	ldr	r0, [pc, #144]	; 18fb0 <flatcc_builder_union_vector_push@@Base+0xd8>
   18f1c:	add	r0, pc, r0
   18f20:	bl	1234c <__assert_fail@plt>
   18f24:	ldr	r3, [fp, #-16]
   18f28:	ldr	r3, [r3, #32]
   18f2c:	ldr	r3, [r3, #20]
   18f30:	cmn	r3, #-536870911	; 0xe0000001
   18f34:	bne	18f40 <flatcc_builder_union_vector_push@@Base+0x68>
   18f38:	mov	r3, #0
   18f3c:	b	18f98 <flatcc_builder_union_vector_push@@Base+0xc0>
   18f40:	ldr	r3, [fp, #-16]
   18f44:	ldr	r3, [r3, #32]
   18f48:	ldr	r2, [fp, #-16]
   18f4c:	ldr	r2, [r2, #32]
   18f50:	ldr	r2, [r2, #20]
   18f54:	add	r2, r2, #1
   18f58:	str	r2, [r3, #20]
   18f5c:	mov	r1, #8
   18f60:	ldr	r0, [fp, #-16]
   18f64:	bl	14104 <flatcc_builder_default_alloc@@Base+0x2f0>
   18f68:	str	r0, [fp, #-8]
   18f6c:	ldr	r3, [fp, #-8]
   18f70:	cmp	r3, #0
   18f74:	bne	18f80 <flatcc_builder_union_vector_push@@Base+0xa8>
   18f78:	mov	r3, #0
   18f7c:	b	18f98 <flatcc_builder_union_vector_push@@Base+0xc0>
   18f80:	ldr	r3, [fp, #-8]
   18f84:	mov	r2, r3
   18f88:	sub	r3, fp, #24
   18f8c:	ldm	r3, {r0, r1}
   18f90:	stm	r2, {r0, r1}
   18f94:	ldr	r3, [fp, #-8]
   18f98:	mov	r0, r3
   18f9c:	sub	sp, fp, #4
   18fa0:	pop	{fp, pc}
   18fa4:	andeq	r4, r0, ip, ror #24
   18fa8:	andeq	r0, r0, sp, lsl #13
   18fac:	andeq	r4, r0, r0, ror #7
   18fb0:	andeq	r4, r0, ip, asr r7

00018fb4 <flatcc_builder_append_union_vector@@Base>:
   18fb4:	push	{fp, lr}
   18fb8:	add	fp, sp, #4
   18fbc:	sub	sp, sp, #16
   18fc0:	str	r0, [fp, #-8]
   18fc4:	str	r1, [fp, #-12]
   18fc8:	str	r2, [fp, #-16]
   18fcc:	ldr	r3, [fp, #-8]
   18fd0:	ldr	r3, [r3, #32]
   18fd4:	ldrh	r3, [r3, #14]
   18fd8:	cmp	r3, #7
   18fdc:	beq	19000 <flatcc_builder_append_union_vector@@Base+0x4c>
   18fe0:	ldr	r3, [pc, #100]	; 1904c <flatcc_builder_append_union_vector@@Base+0x98>
   18fe4:	add	r3, pc, r3
   18fe8:	ldr	r2, [pc, #96]	; 19050 <flatcc_builder_append_union_vector@@Base+0x9c>
   18fec:	ldr	r1, [pc, #96]	; 19054 <flatcc_builder_append_union_vector@@Base+0xa0>
   18ff0:	add	r1, pc, r1
   18ff4:	ldr	r0, [pc, #92]	; 19058 <flatcc_builder_append_union_vector@@Base+0xa4>
   18ff8:	add	r0, pc, r0
   18ffc:	bl	1234c <__assert_fail@plt>
   19000:	mvn	r2, #-536870912	; 0xe0000000
   19004:	ldr	r1, [fp, #-16]
   19008:	ldr	r0, [fp, #-8]
   1900c:	bl	1627c <flatcc_builder_end_struct@@Base+0xa0>
   19010:	mov	r3, r0
   19014:	cmp	r3, #0
   19018:	beq	19024 <flatcc_builder_append_union_vector@@Base+0x70>
   1901c:	mov	r3, #0
   19020:	b	19040 <flatcc_builder_append_union_vector@@Base+0x8c>
   19024:	ldr	r3, [fp, #-16]
   19028:	lsl	r3, r3, #3
   1902c:	mov	r2, r3
   19030:	ldr	r1, [fp, #-12]
   19034:	ldr	r0, [fp, #-8]
   19038:	bl	141fc <flatcc_builder_default_alloc@@Base+0x3e8>
   1903c:	mov	r3, r0
   19040:	mov	r0, r3
   19044:	sub	sp, fp, #4
   19048:	pop	{fp, pc}
   1904c:			; <UNDEFINED> instruction: 0x00004bb4
   19050:	muleq	r0, ip, r6
   19054:	andeq	r4, r0, r4, lsl #6
   19058:	andeq	r4, r0, r0, lsl #13

0001905c <flatcc_builder_create_string@@Base>:
   1905c:	push	{r4, fp, lr}
   19060:	add	fp, sp, #8
   19064:	sub	sp, sp, #100	; 0x64
   19068:	str	r0, [fp, #-96]	; 0xffffffa0
   1906c:	str	r1, [fp, #-100]	; 0xffffff9c
   19070:	str	r2, [fp, #-104]	; 0xffffff98
   19074:	ldr	r4, [pc, #376]	; 191f4 <flatcc_builder_create_string@@Base+0x198>
   19078:	add	r4, pc, r4
   1907c:	ldr	r0, [fp, #-104]	; 0xffffff98
   19080:	bl	13cd0 <main@@Base+0x11c>
   19084:	mov	r3, r0
   19088:	str	r3, [fp, #-20]	; 0xffffffec
   1908c:	ldr	r3, [fp, #-104]	; 0xffffff98
   19090:	add	r3, r3, #1
   19094:	mov	r2, #4
   19098:	mov	r1, r3
   1909c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   190a0:	bl	1530c <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   190a4:	mov	r3, r0
   190a8:	add	r3, r3, #1
   190ac:	str	r3, [fp, #-16]
   190b0:	mov	r3, #0
   190b4:	str	r3, [fp, #-92]	; 0xffffffa4
   190b8:	mov	r3, #0
   190bc:	str	r3, [fp, #-88]	; 0xffffffa8
   190c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190c4:	add	r3, r3, #4
   190c8:	str	r3, [fp, #-92]	; 0xffffffa4
   190cc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190d0:	add	r3, r3, #1
   190d4:	lsl	r3, r3, #3
   190d8:	sub	r2, fp, #12
   190dc:	add	r3, r2, r3
   190e0:	sub	r2, fp, #20
   190e4:	str	r2, [r3, #-80]	; 0xffffffb0
   190e8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190ec:	add	r3, r3, #1
   190f0:	lsl	r3, r3, #3
   190f4:	sub	r2, fp, #12
   190f8:	add	r3, r2, r3
   190fc:	mov	r2, #4
   19100:	str	r2, [r3, #-76]	; 0xffffffb4
   19104:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19108:	add	r3, r3, #1
   1910c:	str	r3, [fp, #-88]	; 0xffffffa8
   19110:	ldr	r3, [fp, #-104]	; 0xffffff98
   19114:	cmp	r3, #0
   19118:	beq	19170 <flatcc_builder_create_string@@Base+0x114>
   1911c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19120:	ldr	r3, [fp, #-104]	; 0xffffff98
   19124:	add	r3, r2, r3
   19128:	str	r3, [fp, #-92]	; 0xffffffa4
   1912c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19130:	add	r3, r3, #1
   19134:	lsl	r3, r3, #3
   19138:	sub	r2, fp, #12
   1913c:	add	r3, r2, r3
   19140:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19144:	str	r2, [r3, #-80]	; 0xffffffb0
   19148:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1914c:	add	r3, r3, #1
   19150:	lsl	r3, r3, #3
   19154:	sub	r2, fp, #12
   19158:	add	r3, r2, r3
   1915c:	ldr	r2, [fp, #-104]	; 0xffffff98
   19160:	str	r2, [r3, #-76]	; 0xffffffb4
   19164:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19168:	add	r3, r3, #1
   1916c:	str	r3, [fp, #-88]	; 0xffffffa8
   19170:	ldr	r3, [fp, #-16]
   19174:	cmp	r3, #0
   19178:	beq	191d4 <flatcc_builder_create_string@@Base+0x178>
   1917c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19180:	ldr	r3, [fp, #-16]
   19184:	add	r3, r2, r3
   19188:	str	r3, [fp, #-92]	; 0xffffffa4
   1918c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19190:	add	r3, r3, #1
   19194:	lsl	r3, r3, #3
   19198:	sub	r2, fp, #12
   1919c:	add	r3, r2, r3
   191a0:	ldr	r2, [pc, #80]	; 191f8 <flatcc_builder_create_string@@Base+0x19c>
   191a4:	ldr	r2, [r4, r2]
   191a8:	str	r2, [r3, #-80]	; 0xffffffb0
   191ac:	ldr	r3, [fp, #-88]	; 0xffffffa8
   191b0:	add	r3, r3, #1
   191b4:	lsl	r3, r3, #3
   191b8:	sub	r2, fp, #12
   191bc:	add	r3, r2, r3
   191c0:	ldr	r2, [fp, #-16]
   191c4:	str	r2, [r3, #-76]	; 0xffffffb4
   191c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   191cc:	add	r3, r3, #1
   191d0:	str	r3, [fp, #-88]	; 0xffffffa8
   191d4:	sub	r3, fp, #92	; 0x5c
   191d8:	mov	r1, r3
   191dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   191e0:	bl	15394 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   191e4:	mov	r3, r0
   191e8:	mov	r0, r3
   191ec:	sub	sp, fp, #8
   191f0:	pop	{r4, fp, pc}
   191f4:	andeq	r5, r1, r0, lsl #31
   191f8:	andeq	r0, r0, r4, asr #32

000191fc <flatcc_builder_create_string_str@@Base>:
   191fc:	push	{fp, lr}
   19200:	add	fp, sp, #4
   19204:	sub	sp, sp, #8
   19208:	str	r0, [fp, #-8]
   1920c:	str	r1, [fp, #-12]
   19210:	ldr	r0, [fp, #-12]
   19214:	bl	12304 <strlen@plt>
   19218:	mov	r3, r0
   1921c:	mov	r2, r3
   19220:	ldr	r1, [fp, #-12]
   19224:	ldr	r0, [fp, #-8]
   19228:	bl	1905c <flatcc_builder_create_string@@Base>
   1922c:	mov	r3, r0
   19230:	mov	r0, r3
   19234:	sub	sp, fp, #4
   19238:	pop	{fp, pc}

0001923c <flatcc_builder_create_string_strn@@Base>:
   1923c:	push	{fp, lr}
   19240:	add	fp, sp, #4
   19244:	sub	sp, sp, #16
   19248:	str	r0, [fp, #-8]
   1924c:	str	r1, [fp, #-12]
   19250:	str	r2, [fp, #-16]
   19254:	ldr	r1, [fp, #-16]
   19258:	ldr	r0, [fp, #-12]
   1925c:	bl	13dc0 <main@@Base+0x20c>
   19260:	mov	r3, r0
   19264:	mov	r2, r3
   19268:	ldr	r1, [fp, #-12]
   1926c:	ldr	r0, [fp, #-8]
   19270:	bl	1905c <flatcc_builder_create_string@@Base>
   19274:	mov	r3, r0
   19278:	mov	r0, r3
   1927c:	sub	sp, fp, #4
   19280:	pop	{fp, pc}

00019284 <flatcc_builder_end_string@@Base>:
   19284:	push	{fp, lr}
   19288:	add	fp, sp, #4
   1928c:	sub	sp, sp, #16
   19290:	str	r0, [fp, #-16]
   19294:	ldr	r3, [fp, #-16]
   19298:	ldr	r3, [r3, #32]
   1929c:	ldrh	r3, [r3, #14]
   192a0:	cmp	r3, #6
   192a4:	beq	192c8 <flatcc_builder_end_string@@Base+0x44>
   192a8:	ldr	r3, [pc, #160]	; 19350 <flatcc_builder_end_string@@Base+0xcc>
   192ac:	add	r3, pc, r3
   192b0:	ldr	r2, [pc, #156]	; 19354 <flatcc_builder_end_string@@Base+0xd0>
   192b4:	ldr	r1, [pc, #156]	; 19358 <flatcc_builder_end_string@@Base+0xd4>
   192b8:	add	r1, pc, r1
   192bc:	ldr	r0, [pc, #152]	; 1935c <flatcc_builder_end_string@@Base+0xd8>
   192c0:	add	r0, pc, r0
   192c4:	bl	1234c <__assert_fail@plt>
   192c8:	ldr	r3, [fp, #-16]
   192cc:	ldr	r3, [r3, #32]
   192d0:	ldr	r2, [r3, #20]
   192d4:	ldr	r3, [fp, #-16]
   192d8:	ldr	r3, [r3, #20]
   192dc:	cmp	r2, r3
   192e0:	beq	19304 <flatcc_builder_end_string@@Base+0x80>
   192e4:	ldr	r3, [pc, #116]	; 19360 <flatcc_builder_end_string@@Base+0xdc>
   192e8:	add	r3, pc, r3
   192ec:	ldr	r2, [pc, #112]	; 19364 <flatcc_builder_end_string@@Base+0xe0>
   192f0:	ldr	r1, [pc, #112]	; 19368 <flatcc_builder_end_string@@Base+0xe4>
   192f4:	add	r1, pc, r1
   192f8:	ldr	r0, [pc, #108]	; 1936c <flatcc_builder_end_string@@Base+0xe8>
   192fc:	add	r0, pc, r0
   19300:	bl	1234c <__assert_fail@plt>
   19304:	ldr	r3, [fp, #-16]
   19308:	ldr	r1, [r3, #16]
   1930c:	ldr	r3, [fp, #-16]
   19310:	ldr	r3, [r3, #20]
   19314:	mov	r2, r3
   19318:	ldr	r0, [fp, #-16]
   1931c:	bl	1905c <flatcc_builder_create_string@@Base>
   19320:	str	r0, [fp, #-8]
   19324:	ldr	r3, [fp, #-8]
   19328:	cmp	r3, #0
   1932c:	bne	19338 <flatcc_builder_end_string@@Base+0xb4>
   19330:	mov	r3, #0
   19334:	b	19344 <flatcc_builder_end_string@@Base+0xc0>
   19338:	ldr	r0, [fp, #-16]
   1933c:	bl	15244 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   19340:	ldr	r3, [fp, #-8]
   19344:	mov	r0, r3
   19348:	sub	sp, fp, #4
   1934c:	pop	{fp, pc}
   19350:	andeq	r4, r0, r0, lsl r9
   19354:	andeq	r0, r0, r4, asr #13
   19358:	andeq	r4, r0, ip, lsr r0
   1935c:	andeq	r4, r0, r8, lsl r2
   19360:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   19364:	andeq	r0, r0, r5, asr #13
   19368:	andeq	r4, r0, r0
   1936c:			; <UNDEFINED> instruction: 0x000043b0

00019370 <flatcc_builder_string_edit@@Base>:
   19370:	push	{fp}		; (str fp, [sp, #-4]!)
   19374:	add	fp, sp, #0
   19378:	sub	sp, sp, #12
   1937c:	str	r0, [fp, #-8]
   19380:	ldr	r3, [fp, #-8]
   19384:	ldr	r3, [r3, #16]
   19388:	mov	r0, r3
   1938c:	add	sp, fp, #0
   19390:	pop	{fp}		; (ldr fp, [sp], #4)
   19394:	bx	lr

00019398 <flatcc_builder_string_len@@Base>:
   19398:	push	{fp}		; (str fp, [sp, #-4]!)
   1939c:	add	fp, sp, #0
   193a0:	sub	sp, sp, #12
   193a4:	str	r0, [fp, #-8]
   193a8:	ldr	r3, [fp, #-8]
   193ac:	ldr	r3, [r3, #32]
   193b0:	ldr	r3, [r3, #20]
   193b4:	mov	r0, r3
   193b8:	add	sp, fp, #0
   193bc:	pop	{fp}		; (ldr fp, [sp], #4)
   193c0:	bx	lr

000193c4 <flatcc_builder_table_add@@Base>:
   193c4:	push	{fp, lr}
   193c8:	add	fp, sp, #4
   193cc:	sub	sp, sp, #16
   193d0:	str	r0, [fp, #-8]
   193d4:	str	r1, [fp, #-12]
   193d8:	str	r2, [fp, #-16]
   193dc:	strh	r3, [fp, #-18]	; 0xffffffee
   193e0:	ldr	r3, [fp, #-8]
   193e4:	ldr	r3, [r3, #32]
   193e8:	ldrh	r3, [r3, #14]
   193ec:	cmp	r3, #3
   193f0:	beq	19414 <flatcc_builder_table_add@@Base+0x50>
   193f4:	ldr	r3, [pc, #268]	; 19508 <flatcc_builder_table_add@@Base+0x144>
   193f8:	add	r3, pc, r3
   193fc:	ldr	r2, [pc, #264]	; 1950c <flatcc_builder_table_add@@Base+0x148>
   19400:	ldr	r1, [pc, #264]	; 19510 <flatcc_builder_table_add@@Base+0x14c>
   19404:	add	r1, pc, r1
   19408:	ldr	r0, [pc, #260]	; 19514 <flatcc_builder_table_add@@Base+0x150>
   1940c:	add	r0, pc, r0
   19410:	bl	1234c <__assert_fail@plt>
   19414:	ldr	r3, [fp, #-12]
   19418:	cmp	r3, #0
   1941c:	blt	19430 <flatcc_builder_table_add@@Base+0x6c>
   19420:	ldr	r3, [fp, #-12]
   19424:	ldr	r2, [pc, #236]	; 19518 <flatcc_builder_table_add@@Base+0x154>
   19428:	cmp	r3, r2
   1942c:	ble	19450 <flatcc_builder_table_add@@Base+0x8c>
   19430:	ldr	r3, [pc, #228]	; 1951c <flatcc_builder_table_add@@Base+0x158>
   19434:	add	r3, pc, r3
   19438:	ldr	r2, [pc, #224]	; 19520 <flatcc_builder_table_add@@Base+0x15c>
   1943c:	ldr	r1, [pc, #224]	; 19524 <flatcc_builder_table_add@@Base+0x160>
   19440:	add	r1, pc, r1
   19444:	ldr	r0, [pc, #220]	; 19528 <flatcc_builder_table_add@@Base+0x164>
   19448:	add	r0, pc, r0
   1944c:	bl	1234c <__assert_fail@plt>
   19450:	ldr	r3, [fp, #-8]
   19454:	ldrh	r3, [r3, #130]	; 0x82
   19458:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1945c:	cmp	r2, r3
   19460:	bls	19470 <flatcc_builder_table_add@@Base+0xac>
   19464:	ldr	r3, [fp, #-8]
   19468:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1946c:	strh	r2, [r3, #130]	; 0x82
   19470:	ldr	r3, [fp, #-8]
   19474:	ldr	r2, [r3, #4]
   19478:	ldr	r3, [fp, #-12]
   1947c:	lsl	r3, r3, #1
   19480:	add	r3, r2, r3
   19484:	ldrh	r3, [r3]
   19488:	cmp	r3, #0
   1948c:	beq	194b0 <flatcc_builder_table_add@@Base+0xec>
   19490:	ldr	r3, [pc, #148]	; 1952c <flatcc_builder_table_add@@Base+0x168>
   19494:	add	r3, pc, r3
   19498:	ldr	r2, [pc, #144]	; 19530 <flatcc_builder_table_add@@Base+0x16c>
   1949c:	ldr	r1, [pc, #144]	; 19534 <flatcc_builder_table_add@@Base+0x170>
   194a0:	add	r1, pc, r1
   194a4:	ldr	r0, [pc, #140]	; 19538 <flatcc_builder_table_add@@Base+0x174>
   194a8:	add	r0, pc, r0
   194ac:	bl	1234c <__assert_fail@plt>
   194b0:	ldr	r3, [fp, #-8]
   194b4:	ldr	r2, [r3, #12]
   194b8:	ldr	r3, [fp, #-12]
   194bc:	eor	r3, r3, r2
   194c0:	ldr	r2, [pc, #116]	; 1953c <flatcc_builder_table_add@@Base+0x178>
   194c4:	mul	r2, r2, r3
   194c8:	ldr	r3, [fp, #-16]
   194cc:	eor	r3, r3, r2
   194d0:	ldr	r2, [pc, #100]	; 1953c <flatcc_builder_table_add@@Base+0x178>
   194d4:	mul	r2, r2, r3
   194d8:	ldr	r3, [fp, #-8]
   194dc:	str	r2, [r3, #12]
   194e0:	ldr	r3, [fp, #-12]
   194e4:	uxth	r3, r3
   194e8:	ldrh	r2, [fp, #-18]	; 0xffffffee
   194ec:	ldr	r1, [fp, #-16]
   194f0:	ldr	r0, [fp, #-8]
   194f4:	bl	14258 <flatcc_builder_default_alloc@@Base+0x444>
   194f8:	mov	r3, r0
   194fc:	mov	r0, r3
   19500:	sub	sp, fp, #4
   19504:	pop	{fp, pc}
   19508:	andeq	r4, r0, r0, ror #15
   1950c:	andeq	r0, r0, sp, ror #13
   19510:	strdeq	r3, [r0], -r0
   19514:	andeq	r4, r0, r8, lsr #3
   19518:	strdeq	r7, [r0], -ip
   1951c:	andeq	r4, r0, r4, lsr #15
   19520:	andeq	r0, r0, lr, ror #13
   19524:			; <UNDEFINED> instruction: 0x00003eb4
   19528:	andeq	r4, r0, r8, lsl #5
   1952c:	andeq	r4, r0, r4, asr #14
   19530:	strdeq	r0, [r0], -r8
   19534:	andeq	r3, r0, r4, asr lr
   19538:	andeq	r3, r0, ip, lsr #29
   1953c:			; <UNDEFINED> instruction: 0x9e3779b1

00019540 <flatcc_builder_table_edit@@Base>:
   19540:	push	{fp, lr}
   19544:	add	fp, sp, #4
   19548:	sub	sp, sp, #8
   1954c:	str	r0, [fp, #-8]
   19550:	str	r1, [fp, #-12]
   19554:	ldr	r3, [fp, #-8]
   19558:	ldr	r3, [r3, #32]
   1955c:	ldrh	r3, [r3, #14]
   19560:	cmp	r3, #3
   19564:	beq	19588 <flatcc_builder_table_edit@@Base+0x48>
   19568:	ldr	r3, [pc, #64]	; 195b0 <flatcc_builder_table_edit@@Base+0x70>
   1956c:	add	r3, pc, r3
   19570:	ldr	r2, [pc, #60]	; 195b4 <flatcc_builder_table_edit@@Base+0x74>
   19574:	ldr	r1, [pc, #60]	; 195b8 <flatcc_builder_table_edit@@Base+0x78>
   19578:	add	r1, pc, r1
   1957c:	ldr	r0, [pc, #56]	; 195bc <flatcc_builder_table_edit@@Base+0x7c>
   19580:	add	r0, pc, r0
   19584:	bl	1234c <__assert_fail@plt>
   19588:	ldr	r3, [fp, #-8]
   1958c:	ldr	r2, [r3, #16]
   19590:	ldr	r3, [fp, #-8]
   19594:	ldr	r1, [r3, #20]
   19598:	ldr	r3, [fp, #-12]
   1959c:	sub	r3, r1, r3
   195a0:	add	r3, r2, r3
   195a4:	mov	r0, r3
   195a8:	sub	sp, fp, #4
   195ac:	pop	{fp, pc}
   195b0:	andeq	r4, r0, r8, lsl #13
   195b4:	andeq	r0, r0, r2, lsl #14
   195b8:	andeq	r3, r0, ip, ror sp
   195bc:	andeq	r4, r0, r4, lsr r0

000195c0 <flatcc_builder_table_add_copy@@Base>:
   195c0:	push	{fp, lr}
   195c4:	add	fp, sp, #4
   195c8:	sub	sp, sp, #24
   195cc:	str	r0, [fp, #-16]
   195d0:	str	r1, [fp, #-20]	; 0xffffffec
   195d4:	str	r2, [fp, #-24]	; 0xffffffe8
   195d8:	str	r3, [fp, #-28]	; 0xffffffe4
   195dc:	ldrh	r3, [fp, #4]
   195e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   195e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   195e8:	ldr	r0, [fp, #-16]
   195ec:	bl	193c4 <flatcc_builder_table_add@@Base>
   195f0:	str	r0, [fp, #-8]
   195f4:	ldr	r3, [fp, #-8]
   195f8:	cmp	r3, #0
   195fc:	beq	19610 <flatcc_builder_table_add_copy@@Base+0x50>
   19600:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19604:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19608:	ldr	r0, [fp, #-8]
   1960c:	bl	122bc <memcpy@plt>
   19610:	ldr	r3, [fp, #-8]
   19614:	mov	r0, r3
   19618:	sub	sp, fp, #4
   1961c:	pop	{fp, pc}

00019620 <flatcc_builder_table_add_offset@@Base>:
   19620:	push	{fp, lr}
   19624:	add	fp, sp, #4
   19628:	sub	sp, sp, #8
   1962c:	str	r0, [fp, #-8]
   19630:	str	r1, [fp, #-12]
   19634:	ldr	r3, [fp, #-8]
   19638:	ldr	r3, [r3, #32]
   1963c:	ldrh	r3, [r3, #14]
   19640:	cmp	r3, #3
   19644:	beq	19668 <flatcc_builder_table_add_offset@@Base+0x48>
   19648:	ldr	r3, [pc, #228]	; 19734 <flatcc_builder_table_add_offset@@Base+0x114>
   1964c:	add	r3, pc, r3
   19650:	ldr	r2, [pc, #224]	; 19738 <flatcc_builder_table_add_offset@@Base+0x118>
   19654:	ldr	r1, [pc, #224]	; 1973c <flatcc_builder_table_add_offset@@Base+0x11c>
   19658:	add	r1, pc, r1
   1965c:	ldr	r0, [pc, #220]	; 19740 <flatcc_builder_table_add_offset@@Base+0x120>
   19660:	add	r0, pc, r0
   19664:	bl	1234c <__assert_fail@plt>
   19668:	ldr	r3, [fp, #-12]
   1966c:	cmp	r3, #0
   19670:	blt	19684 <flatcc_builder_table_add_offset@@Base+0x64>
   19674:	ldr	r3, [fp, #-12]
   19678:	ldr	r2, [pc, #196]	; 19744 <flatcc_builder_table_add_offset@@Base+0x124>
   1967c:	cmp	r3, r2
   19680:	ble	196a4 <flatcc_builder_table_add_offset@@Base+0x84>
   19684:	ldr	r3, [pc, #188]	; 19748 <flatcc_builder_table_add_offset@@Base+0x128>
   19688:	add	r3, pc, r3
   1968c:	ldr	r2, [pc, #184]	; 1974c <flatcc_builder_table_add_offset@@Base+0x12c>
   19690:	ldr	r1, [pc, #184]	; 19750 <flatcc_builder_table_add_offset@@Base+0x130>
   19694:	add	r1, pc, r1
   19698:	ldr	r0, [pc, #180]	; 19754 <flatcc_builder_table_add_offset@@Base+0x134>
   1969c:	add	r0, pc, r0
   196a0:	bl	1234c <__assert_fail@plt>
   196a4:	ldr	r3, [fp, #-8]
   196a8:	ldr	r2, [r3, #4]
   196ac:	ldr	r3, [fp, #-12]
   196b0:	lsl	r3, r3, #1
   196b4:	add	r3, r2, r3
   196b8:	ldrh	r3, [r3]
   196bc:	cmp	r3, #0
   196c0:	beq	196e4 <flatcc_builder_table_add_offset@@Base+0xc4>
   196c4:	ldr	r3, [pc, #140]	; 19758 <flatcc_builder_table_add_offset@@Base+0x138>
   196c8:	add	r3, pc, r3
   196cc:	ldr	r2, [pc, #136]	; 1975c <flatcc_builder_table_add_offset@@Base+0x13c>
   196d0:	ldr	r1, [pc, #136]	; 19760 <flatcc_builder_table_add_offset@@Base+0x140>
   196d4:	add	r1, pc, r1
   196d8:	ldr	r0, [pc, #132]	; 19764 <flatcc_builder_table_add_offset@@Base+0x144>
   196dc:	add	r0, pc, r0
   196e0:	bl	1234c <__assert_fail@plt>
   196e4:	ldr	r3, [fp, #-8]
   196e8:	ldr	r2, [r3, #12]
   196ec:	ldr	r3, [fp, #-12]
   196f0:	eor	r3, r3, r2
   196f4:	ldr	r2, [pc, #108]	; 19768 <flatcc_builder_table_add_offset@@Base+0x148>
   196f8:	mul	r3, r2, r3
   196fc:	eor	r3, r3, #4
   19700:	ldr	r2, [pc, #96]	; 19768 <flatcc_builder_table_add_offset@@Base+0x148>
   19704:	mul	r2, r2, r3
   19708:	ldr	r3, [fp, #-8]
   1970c:	str	r2, [r3, #12]
   19710:	ldr	r3, [fp, #-12]
   19714:	uxth	r3, r3
   19718:	mov	r1, r3
   1971c:	ldr	r0, [fp, #-8]
   19720:	bl	14364 <flatcc_builder_default_alloc@@Base+0x550>
   19724:	mov	r3, r0
   19728:	mov	r0, r3
   1972c:	sub	sp, fp, #4
   19730:	pop	{fp, pc}
   19734:	andeq	r4, r0, r4, asr #11
   19738:	andeq	r0, r0, r3, lsl r7
   1973c:	muleq	r0, ip, ip
   19740:	andeq	r3, r0, r4, asr pc
   19744:	strdeq	r7, [r0], -ip
   19748:	andeq	r4, r0, r8, lsl #11
   1974c:	andeq	r0, r0, r4, lsl r7
   19750:	andeq	r3, r0, r0, ror #24
   19754:	andeq	r4, r0, r4, lsr r0
   19758:	andeq	r4, r0, r8, asr #10
   1975c:	andeq	r0, r0, fp, lsl r7
   19760:	andeq	r3, r0, r0, lsr #24
   19764:	andeq	r3, r0, r8, ror ip
   19768:			; <UNDEFINED> instruction: 0x9e3779b1

0001976c <flatcc_builder_push_buffer_alignment@@Base>:
   1976c:	push	{fp}		; (str fp, [sp, #-4]!)
   19770:	add	fp, sp, #0
   19774:	sub	sp, sp, #20
   19778:	str	r0, [fp, #-16]
   1977c:	ldr	r3, [fp, #-16]
   19780:	ldrh	r3, [r3, #128]	; 0x80
   19784:	strh	r3, [fp, #-6]
   19788:	ldr	r3, [fp, #-16]
   1978c:	mov	r2, #4
   19790:	strh	r2, [r3, #128]	; 0x80
   19794:	ldrh	r3, [fp, #-6]
   19798:	mov	r0, r3
   1979c:	add	sp, fp, #0
   197a0:	pop	{fp}		; (ldr fp, [sp], #4)
   197a4:	bx	lr

000197a8 <flatcc_builder_pop_buffer_alignment@@Base>:
   197a8:	push	{fp, lr}
   197ac:	add	fp, sp, #4
   197b0:	sub	sp, sp, #8
   197b4:	str	r0, [fp, #-8]
   197b8:	mov	r3, r1
   197bc:	strh	r3, [fp, #-10]
   197c0:	ldrh	r3, [fp, #-10]
   197c4:	mov	r1, r3
   197c8:	ldr	r0, [fp, #-8]
   197cc:	bl	14cd0 <flatcc_builder_clear@@Base+0xb0>
   197d0:	nop			; (mov r0, r0)
   197d4:	sub	sp, fp, #4
   197d8:	pop	{fp, pc}

000197dc <flatcc_builder_get_buffer_alignment@@Base>:
   197dc:	push	{fp}		; (str fp, [sp, #-4]!)
   197e0:	add	fp, sp, #0
   197e4:	sub	sp, sp, #12
   197e8:	str	r0, [fp, #-8]
   197ec:	ldr	r3, [fp, #-8]
   197f0:	ldrh	r3, [r3, #128]	; 0x80
   197f4:	mov	r0, r3
   197f8:	add	sp, fp, #0
   197fc:	pop	{fp}		; (ldr fp, [sp], #4)
   19800:	bx	lr

00019804 <flatcc_builder_set_vtable_clustering@@Base>:
   19804:	push	{fp}		; (str fp, [sp, #-4]!)
   19808:	add	fp, sp, #0
   1980c:	sub	sp, sp, #12
   19810:	str	r0, [fp, #-8]
   19814:	str	r1, [fp, #-12]
   19818:	ldr	r3, [fp, #-12]
   1981c:	cmp	r3, #0
   19820:	moveq	r3, #1
   19824:	movne	r3, #0
   19828:	uxtb	r3, r3
   1982c:	mov	r2, r3
   19830:	ldr	r3, [fp, #-8]
   19834:	str	r2, [r3, #180]	; 0xb4
   19838:	nop			; (mov r0, r0)
   1983c:	add	sp, fp, #0
   19840:	pop	{fp}		; (ldr fp, [sp], #4)
   19844:	bx	lr

00019848 <flatcc_builder_set_block_align@@Base>:
   19848:	push	{fp}		; (str fp, [sp, #-4]!)
   1984c:	add	fp, sp, #0
   19850:	sub	sp, sp, #12
   19854:	str	r0, [fp, #-8]
   19858:	mov	r3, r1
   1985c:	strh	r3, [fp, #-10]
   19860:	ldr	r3, [fp, #-8]
   19864:	ldrh	r2, [fp, #-10]
   19868:	strh	r2, [r3, #132]	; 0x84
   1986c:	nop			; (mov r0, r0)
   19870:	add	sp, fp, #0
   19874:	pop	{fp}		; (ldr fp, [sp], #4)
   19878:	bx	lr

0001987c <flatcc_builder_get_level@@Base>:
   1987c:	push	{fp}		; (str fp, [sp, #-4]!)
   19880:	add	fp, sp, #0
   19884:	sub	sp, sp, #12
   19888:	str	r0, [fp, #-8]
   1988c:	ldr	r3, [fp, #-8]
   19890:	ldr	r3, [r3, #156]	; 0x9c
   19894:	mov	r0, r3
   19898:	add	sp, fp, #0
   1989c:	pop	{fp}		; (ldr fp, [sp], #4)
   198a0:	bx	lr

000198a4 <flatcc_builder_set_max_level@@Base>:
   198a4:	push	{fp}		; (str fp, [sp, #-4]!)
   198a8:	add	fp, sp, #0
   198ac:	sub	sp, sp, #12
   198b0:	str	r0, [fp, #-8]
   198b4:	str	r1, [fp, #-12]
   198b8:	ldr	r3, [fp, #-8]
   198bc:	ldr	r2, [fp, #-12]
   198c0:	str	r2, [r3, #176]	; 0xb0
   198c4:	ldr	r3, [fp, #-8]
   198c8:	ldr	r2, [r3, #160]	; 0xa0
   198cc:	ldr	r3, [fp, #-8]
   198d0:	ldr	r3, [r3, #176]	; 0xb0
   198d4:	cmp	r2, r3
   198d8:	bge	198ec <flatcc_builder_set_max_level@@Base+0x48>
   198dc:	ldr	r3, [fp, #-8]
   198e0:	ldr	r2, [r3, #176]	; 0xb0
   198e4:	ldr	r3, [fp, #-8]
   198e8:	str	r2, [r3, #160]	; 0xa0
   198ec:	nop			; (mov r0, r0)
   198f0:	add	sp, fp, #0
   198f4:	pop	{fp}		; (ldr fp, [sp], #4)
   198f8:	bx	lr

000198fc <flatcc_builder_get_buffer_size@@Base>:
   198fc:	push	{fp}		; (str fp, [sp, #-4]!)
   19900:	add	fp, sp, #0
   19904:	sub	sp, sp, #12
   19908:	str	r0, [fp, #-8]
   1990c:	ldr	r3, [fp, #-8]
   19910:	ldr	r2, [r3, #140]	; 0x8c
   19914:	ldr	r3, [fp, #-8]
   19918:	ldr	r3, [r3, #136]	; 0x88
   1991c:	sub	r3, r2, r3
   19920:	mov	r0, r3
   19924:	add	sp, fp, #0
   19928:	pop	{fp}		; (ldr fp, [sp], #4)
   1992c:	bx	lr

00019930 <flatcc_builder_get_buffer_start@@Base>:
   19930:	push	{fp}		; (str fp, [sp, #-4]!)
   19934:	add	fp, sp, #0
   19938:	sub	sp, sp, #12
   1993c:	str	r0, [fp, #-8]
   19940:	ldr	r3, [fp, #-8]
   19944:	ldr	r3, [r3, #136]	; 0x88
   19948:	mov	r0, r3
   1994c:	add	sp, fp, #0
   19950:	pop	{fp}		; (ldr fp, [sp], #4)
   19954:	bx	lr

00019958 <flatcc_builder_get_buffer_end@@Base>:
   19958:	push	{fp}		; (str fp, [sp, #-4]!)
   1995c:	add	fp, sp, #0
   19960:	sub	sp, sp, #12
   19964:	str	r0, [fp, #-8]
   19968:	ldr	r3, [fp, #-8]
   1996c:	ldr	r3, [r3, #140]	; 0x8c
   19970:	mov	r0, r3
   19974:	add	sp, fp, #0
   19978:	pop	{fp}		; (ldr fp, [sp], #4)
   1997c:	bx	lr

00019980 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19980:	push	{fp}		; (str fp, [sp, #-4]!)
   19984:	add	fp, sp, #0
   19988:	sub	sp, sp, #12
   1998c:	str	r0, [fp, #-8]
   19990:	str	r1, [fp, #-12]
   19994:	ldr	r3, [fp, #-8]
   19998:	ldr	r2, [fp, #-12]
   1999c:	str	r2, [r3, #172]	; 0xac
   199a0:	nop			; (mov r0, r0)
   199a4:	add	sp, fp, #0
   199a8:	pop	{fp}		; (ldr fp, [sp], #4)
   199ac:	bx	lr

000199b0 <flatcc_builder_set_identifier@@Base>:
   199b0:	push	{fp}		; (str fp, [sp, #-4]!)
   199b4:	add	fp, sp, #0
   199b8:	sub	sp, sp, #12
   199bc:	str	r0, [fp, #-8]
   199c0:	str	r1, [fp, #-12]
   199c4:	ldr	r1, [pc, #60]	; 19a08 <flatcc_builder_set_identifier@@Base+0x58>
   199c8:	add	r1, pc, r1
   199cc:	ldr	r3, [fp, #-8]
   199d0:	add	r2, r3, #168	; 0xa8
   199d4:	ldr	r3, [fp, #-12]
   199d8:	cmp	r3, #0
   199dc:	beq	199e8 <flatcc_builder_set_identifier@@Base+0x38>
   199e0:	ldr	r3, [fp, #-12]
   199e4:	b	199f0 <flatcc_builder_set_identifier@@Base+0x40>
   199e8:	ldr	r3, [pc, #28]	; 19a0c <flatcc_builder_set_identifier@@Base+0x5c>
   199ec:	ldr	r3, [r1, r3]
   199f0:	ldr	r3, [r3]
   199f4:	str	r3, [r2]
   199f8:	nop			; (mov r0, r0)
   199fc:	add	sp, fp, #0
   19a00:	pop	{fp}		; (ldr fp, [sp], #4)
   19a04:	bx	lr
   19a08:	andeq	r5, r1, r0, lsr r6
   19a0c:	andeq	r0, r0, r4, asr #32

00019a10 <flatcc_builder_get_type@@Base>:
   19a10:	push	{fp}		; (str fp, [sp, #-4]!)
   19a14:	add	fp, sp, #0
   19a18:	sub	sp, sp, #12
   19a1c:	str	r0, [fp, #-8]
   19a20:	ldr	r3, [fp, #-8]
   19a24:	ldr	r3, [r3, #32]
   19a28:	cmp	r3, #0
   19a2c:	beq	19a40 <flatcc_builder_get_type@@Base+0x30>
   19a30:	ldr	r3, [fp, #-8]
   19a34:	ldr	r3, [r3, #32]
   19a38:	ldrh	r3, [r3, #14]
   19a3c:	b	19a44 <flatcc_builder_get_type@@Base+0x34>
   19a40:	mov	r3, #0
   19a44:	mov	r0, r3
   19a48:	add	sp, fp, #0
   19a4c:	pop	{fp}		; (ldr fp, [sp], #4)
   19a50:	bx	lr

00019a54 <flatcc_builder_get_type_at@@Base>:
   19a54:	push	{fp}		; (str fp, [sp, #-4]!)
   19a58:	add	fp, sp, #0
   19a5c:	sub	sp, sp, #12
   19a60:	str	r0, [fp, #-8]
   19a64:	str	r1, [fp, #-12]
   19a68:	ldr	r3, [fp, #-12]
   19a6c:	cmp	r3, #0
   19a70:	ble	19a88 <flatcc_builder_get_type_at@@Base+0x34>
   19a74:	ldr	r3, [fp, #-8]
   19a78:	ldr	r2, [r3, #156]	; 0x9c
   19a7c:	ldr	r3, [fp, #-12]
   19a80:	cmp	r2, r3
   19a84:	bge	19a90 <flatcc_builder_get_type_at@@Base+0x3c>
   19a88:	mov	r3, #0
   19a8c:	b	19ac4 <flatcc_builder_get_type_at@@Base+0x70>
   19a90:	ldr	r3, [fp, #-8]
   19a94:	ldr	r2, [r3, #32]
   19a98:	ldr	r3, [fp, #-8]
   19a9c:	ldr	r3, [r3, #156]	; 0x9c
   19aa0:	ldr	r1, [fp, #-12]
   19aa4:	sub	r3, r1, r3
   19aa8:	mov	r1, r3
   19aac:	mov	r3, r1
   19ab0:	lsl	r3, r3, #3
   19ab4:	add	r3, r3, r1
   19ab8:	lsl	r3, r3, #2
   19abc:	add	r3, r2, r3
   19ac0:	ldrh	r3, [r3, #14]
   19ac4:	mov	r0, r3
   19ac8:	add	sp, fp, #0
   19acc:	pop	{fp}		; (ldr fp, [sp], #4)
   19ad0:	bx	lr

00019ad4 <flatcc_builder_get_direct_buffer@@Base>:
   19ad4:	push	{fp, lr}
   19ad8:	add	fp, sp, #4
   19adc:	sub	sp, sp, #8
   19ae0:	str	r0, [fp, #-8]
   19ae4:	str	r1, [fp, #-12]
   19ae8:	ldr	r3, [fp, #-8]
   19aec:	ldr	r3, [r3, #184]	; 0xb8
   19af0:	cmp	r3, #0
   19af4:	beq	19b14 <flatcc_builder_get_direct_buffer@@Base+0x40>
   19af8:	ldr	r3, [fp, #-8]
   19afc:	add	r3, r3, #188	; 0xbc
   19b00:	ldr	r1, [fp, #-12]
   19b04:	mov	r0, r3
   19b08:	bl	13d40 <main@@Base+0x18c>
   19b0c:	mov	r3, r0
   19b10:	b	19b30 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19b14:	ldr	r3, [fp, #-12]
   19b18:	cmp	r3, #0
   19b1c:	beq	19b2c <flatcc_builder_get_direct_buffer@@Base+0x58>
   19b20:	ldr	r3, [fp, #-12]
   19b24:	mov	r2, #0
   19b28:	str	r2, [r3]
   19b2c:	mov	r3, #0
   19b30:	mov	r0, r3
   19b34:	sub	sp, fp, #4
   19b38:	pop	{fp, pc}

00019b3c <flatcc_builder_copy_buffer@@Base>:
   19b3c:	push	{fp, lr}
   19b40:	add	fp, sp, #4
   19b44:	sub	sp, sp, #16
   19b48:	str	r0, [fp, #-8]
   19b4c:	str	r1, [fp, #-12]
   19b50:	str	r2, [fp, #-16]
   19b54:	ldr	r3, [fp, #-8]
   19b58:	ldr	r3, [r3, #184]	; 0xb8
   19b5c:	cmp	r3, #0
   19b60:	bne	19b6c <flatcc_builder_copy_buffer@@Base+0x30>
   19b64:	mov	r3, #0
   19b68:	b	19bb8 <flatcc_builder_copy_buffer@@Base+0x7c>
   19b6c:	ldr	r3, [fp, #-8]
   19b70:	add	r3, r3, #188	; 0xbc
   19b74:	ldr	r2, [fp, #-16]
   19b78:	ldr	r1, [fp, #-12]
   19b7c:	mov	r0, r3
   19b80:	bl	1a904 <flatcc_emitter_copy_buffer@@Base>
   19b84:	str	r0, [fp, #-12]
   19b88:	ldr	r3, [fp, #-12]
   19b8c:	cmp	r3, #0
   19b90:	bne	19bb4 <flatcc_builder_copy_buffer@@Base+0x78>
   19b94:	ldr	r3, [pc, #40]	; 19bc4 <flatcc_builder_copy_buffer@@Base+0x88>
   19b98:	add	r3, pc, r3
   19b9c:	ldr	r2, [pc, #36]	; 19bc8 <flatcc_builder_copy_buffer@@Base+0x8c>
   19ba0:	ldr	r1, [pc, #36]	; 19bcc <flatcc_builder_copy_buffer@@Base+0x90>
   19ba4:	add	r1, pc, r1
   19ba8:	ldr	r0, [pc, #32]	; 19bd0 <flatcc_builder_copy_buffer@@Base+0x94>
   19bac:	add	r0, pc, r0
   19bb0:	bl	1234c <__assert_fail@plt>
   19bb4:	ldr	r3, [fp, #-12]
   19bb8:	mov	r0, r3
   19bbc:	sub	sp, fp, #4
   19bc0:	pop	{fp, pc}
   19bc4:	muleq	r0, r8, r0
   19bc8:	andeq	r0, r0, r6, lsl #15
   19bcc:	andeq	r3, r0, r0, asr r7
   19bd0:	andeq	r3, r0, r8, ror #22

00019bd4 <flatcc_builder_finalize_buffer@@Base>:
   19bd4:	push	{fp, lr}
   19bd8:	add	fp, sp, #4
   19bdc:	sub	sp, sp, #16
   19be0:	str	r0, [fp, #-16]
   19be4:	str	r1, [fp, #-20]	; 0xffffffec
   19be8:	ldr	r0, [fp, #-16]
   19bec:	bl	198fc <flatcc_builder_get_buffer_size@@Base>
   19bf0:	str	r0, [fp, #-8]
   19bf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bf8:	cmp	r3, #0
   19bfc:	beq	19c0c <flatcc_builder_finalize_buffer@@Base+0x38>
   19c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c04:	ldr	r2, [fp, #-8]
   19c08:	str	r2, [r3]
   19c0c:	ldr	r0, [fp, #-8]
   19c10:	bl	122e0 <malloc@plt>
   19c14:	mov	r3, r0
   19c18:	str	r3, [fp, #-12]
   19c1c:	ldr	r3, [fp, #-12]
   19c20:	cmp	r3, #0
   19c24:	bne	19c48 <flatcc_builder_finalize_buffer@@Base+0x74>
   19c28:	ldr	r3, [pc, #136]	; 19cb8 <flatcc_builder_finalize_buffer@@Base+0xe4>
   19c2c:	add	r3, pc, r3
   19c30:	ldr	r2, [pc, #132]	; 19cbc <flatcc_builder_finalize_buffer@@Base+0xe8>
   19c34:	ldr	r1, [pc, #132]	; 19cc0 <flatcc_builder_finalize_buffer@@Base+0xec>
   19c38:	add	r1, pc, r1
   19c3c:	ldr	r0, [pc, #128]	; 19cc4 <flatcc_builder_finalize_buffer@@Base+0xf0>
   19c40:	add	r0, pc, r0
   19c44:	bl	1234c <__assert_fail@plt>
   19c48:	ldr	r2, [fp, #-8]
   19c4c:	ldr	r1, [fp, #-12]
   19c50:	ldr	r0, [fp, #-16]
   19c54:	bl	19b3c <flatcc_builder_copy_buffer@@Base>
   19c58:	mov	r3, r0
   19c5c:	cmp	r3, #0
   19c60:	bne	19c84 <flatcc_builder_finalize_buffer@@Base+0xb0>
   19c64:	ldr	r3, [pc, #92]	; 19cc8 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19c68:	add	r3, pc, r3
   19c6c:	ldr	r2, [pc, #88]	; 19ccc <flatcc_builder_finalize_buffer@@Base+0xf8>
   19c70:	ldr	r1, [pc, #88]	; 19cd0 <flatcc_builder_finalize_buffer@@Base+0xfc>
   19c74:	add	r1, pc, r1
   19c78:	ldr	r0, [pc, #84]	; 19cd4 <flatcc_builder_finalize_buffer@@Base+0x100>
   19c7c:	add	r0, pc, r0
   19c80:	bl	1234c <__assert_fail@plt>
   19c84:	ldr	r3, [fp, #-12]
   19c88:	cmp	r3, #0
   19c8c:	bne	19ca8 <flatcc_builder_finalize_buffer@@Base+0xd4>
   19c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c94:	cmp	r3, #0
   19c98:	beq	19ca8 <flatcc_builder_finalize_buffer@@Base+0xd4>
   19c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ca0:	mov	r2, #0
   19ca4:	str	r2, [r3]
   19ca8:	ldr	r3, [fp, #-12]
   19cac:	mov	r0, r3
   19cb0:	sub	sp, fp, #4
   19cb4:	pop	{fp, pc}
   19cb8:	andeq	r4, r0, r0, lsr #32
   19cbc:	muleq	r0, r8, r7
   19cc0:			; <UNDEFINED> instruction: 0x000036bc
   19cc4:	andeq	r3, r0, r4, lsl r7
   19cc8:	andeq	r3, r0, r4, ror #31
   19ccc:	muleq	r0, ip, r7
   19cd0:	andeq	r3, r0, r0, lsl #13
   19cd4:	ldrdeq	r3, [r0], -r8

00019cd8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19cd8:	push	{fp, lr}
   19cdc:	add	fp, sp, #4
   19ce0:	sub	sp, sp, #24
   19ce4:	str	r0, [fp, #-24]	; 0xffffffe8
   19ce8:	str	r1, [fp, #-28]	; 0xffffffe4
   19cec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19cf0:	bl	198fc <flatcc_builder_get_buffer_size@@Base>
   19cf4:	str	r0, [fp, #-12]
   19cf8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19cfc:	cmp	r3, #0
   19d00:	beq	19d10 <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   19d04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d08:	ldr	r2, [fp, #-12]
   19d0c:	str	r2, [r3]
   19d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19d14:	bl	197dc <flatcc_builder_get_buffer_alignment@@Base>
   19d18:	mov	r3, r0
   19d1c:	str	r3, [fp, #-16]
   19d20:	ldr	r2, [fp, #-12]
   19d24:	ldr	r3, [fp, #-16]
   19d28:	add	r3, r2, r3
   19d2c:	sub	r2, r3, #1
   19d30:	ldr	r3, [fp, #-16]
   19d34:	rsb	r3, r3, #0
   19d38:	and	r3, r3, r2
   19d3c:	str	r3, [fp, #-12]
   19d40:	ldr	r1, [fp, #-12]
   19d44:	ldr	r0, [fp, #-16]
   19d48:	bl	13c4c <main@@Base+0x98>
   19d4c:	str	r0, [fp, #-8]
   19d50:	ldr	r3, [fp, #-8]
   19d54:	cmp	r3, #0
   19d58:	beq	19d8c <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   19d5c:	ldr	r2, [fp, #-12]
   19d60:	ldr	r1, [fp, #-8]
   19d64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19d68:	bl	19b3c <flatcc_builder_copy_buffer@@Base>
   19d6c:	mov	r3, r0
   19d70:	cmp	r3, #0
   19d74:	bne	19d90 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19d78:	ldr	r0, [fp, #-8]
   19d7c:	bl	122b0 <free@plt>
   19d80:	mov	r3, #0
   19d84:	str	r3, [fp, #-8]
   19d88:	b	19d90 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19d8c:	nop			; (mov r0, r0)
   19d90:	ldr	r3, [fp, #-8]
   19d94:	cmp	r3, #0
   19d98:	bne	19db4 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19da0:	cmp	r3, #0
   19da4:	beq	19db4 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19da8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19dac:	mov	r2, #0
   19db0:	str	r2, [r3]
   19db4:	ldr	r3, [fp, #-8]
   19db8:	mov	r0, r3
   19dbc:	sub	sp, fp, #4
   19dc0:	pop	{fp, pc}

00019dc4 <flatcc_builder_aligned_alloc@@Base>:
   19dc4:	push	{fp, lr}
   19dc8:	add	fp, sp, #4
   19dcc:	sub	sp, sp, #8
   19dd0:	str	r0, [fp, #-8]
   19dd4:	str	r1, [fp, #-12]
   19dd8:	ldr	r1, [fp, #-12]
   19ddc:	ldr	r0, [fp, #-8]
   19de0:	bl	13c4c <main@@Base+0x98>
   19de4:	mov	r3, r0
   19de8:	mov	r0, r3
   19dec:	sub	sp, fp, #4
   19df0:	pop	{fp, pc}

00019df4 <flatcc_builder_aligned_free@@Base>:
   19df4:	push	{fp, lr}
   19df8:	add	fp, sp, #4
   19dfc:	sub	sp, sp, #8
   19e00:	str	r0, [fp, #-8]
   19e04:	ldr	r0, [fp, #-8]
   19e08:	bl	122b0 <free@plt>
   19e0c:	nop			; (mov r0, r0)
   19e10:	sub	sp, fp, #4
   19e14:	pop	{fp, pc}

00019e18 <flatcc_builder_get_emit_context@@Base>:
   19e18:	push	{fp}		; (str fp, [sp, #-4]!)
   19e1c:	add	fp, sp, #0
   19e20:	sub	sp, sp, #12
   19e24:	str	r0, [fp, #-8]
   19e28:	ldr	r3, [fp, #-8]
   19e2c:	ldr	r3, [r3, #36]	; 0x24
   19e30:	mov	r0, r3
   19e34:	add	sp, fp, #0
   19e38:	pop	{fp}		; (ldr fp, [sp], #4)
   19e3c:	bx	lr
   19e40:	push	{fp, lr}
   19e44:	add	fp, sp, #4
   19e48:	sub	sp, sp, #16
   19e4c:	str	r0, [fp, #-16]
   19e50:	mov	r3, #0
   19e54:	str	r3, [fp, #-8]
   19e58:	ldr	r3, [fp, #-16]
   19e5c:	ldr	r3, [r3]
   19e60:	cmp	r3, #0
   19e64:	beq	19ebc <flatcc_builder_get_emit_context@@Base+0xa4>
   19e68:	ldr	r3, [fp, #-16]
   19e6c:	ldr	r3, [r3]
   19e70:	ldr	r2, [r3, #2948]	; 0xb84
   19e74:	ldr	r3, [fp, #-16]
   19e78:	ldr	r3, [r3, #4]
   19e7c:	cmp	r2, r3
   19e80:	beq	19ebc <flatcc_builder_get_emit_context@@Base+0xa4>
   19e84:	ldr	r3, [fp, #-16]
   19e88:	ldr	r3, [r3]
   19e8c:	ldr	r3, [r3, #2948]	; 0xb84
   19e90:	ldr	r2, [fp, #-16]
   19e94:	ldr	r2, [r2]
   19e98:	ldr	r2, [r2, #2952]	; 0xb88
   19e9c:	sub	r2, r2, #2944	; 0xb80
   19ea0:	str	r2, [r3, #2952]	; 0xb88
   19ea4:	ldr	r3, [fp, #-16]
   19ea8:	ldr	r3, [r3]
   19eac:	ldr	r2, [r3, #2948]	; 0xb84
   19eb0:	ldr	r3, [fp, #-16]
   19eb4:	str	r2, [r3]
   19eb8:	b	19fe4 <flatcc_builder_get_emit_context@@Base+0x1cc>
   19ebc:	ldr	r0, [pc, #368]	; 1a034 <flatcc_builder_get_emit_context@@Base+0x21c>
   19ec0:	bl	122e0 <malloc@plt>
   19ec4:	mov	r3, r0
   19ec8:	str	r3, [fp, #-8]
   19ecc:	ldr	r3, [fp, #-8]
   19ed0:	cmp	r3, #0
   19ed4:	bne	19ee0 <flatcc_builder_get_emit_context@@Base+0xc8>
   19ed8:	mvn	r3, #0
   19edc:	b	1a028 <flatcc_builder_get_emit_context@@Base+0x210>
   19ee0:	ldr	r3, [fp, #-16]
   19ee4:	ldr	r3, [r3, #28]
   19ee8:	add	r2, r3, #2944	; 0xb80
   19eec:	ldr	r3, [fp, #-16]
   19ef0:	str	r2, [r3, #28]
   19ef4:	ldr	r3, [fp, #-16]
   19ef8:	ldr	r3, [r3]
   19efc:	cmp	r3, #0
   19f00:	beq	19f54 <flatcc_builder_get_emit_context@@Base+0x13c>
   19f04:	ldr	r3, [fp, #-16]
   19f08:	ldr	r2, [r3, #4]
   19f0c:	ldr	r3, [fp, #-8]
   19f10:	str	r2, [r3, #2948]	; 0xb84
   19f14:	ldr	r3, [fp, #-16]
   19f18:	ldr	r2, [r3]
   19f1c:	ldr	r3, [fp, #-8]
   19f20:	str	r2, [r3, #2944]	; 0xb80
   19f24:	ldr	r3, [fp, #-16]
   19f28:	ldr	r3, [r3]
   19f2c:	ldr	r2, [fp, #-8]
   19f30:	str	r2, [r3, #2948]	; 0xb84
   19f34:	ldr	r3, [fp, #-16]
   19f38:	ldr	r3, [r3, #4]
   19f3c:	ldr	r2, [fp, #-8]
   19f40:	str	r2, [r3, #2944]	; 0xb80
   19f44:	ldr	r3, [fp, #-16]
   19f48:	ldr	r2, [fp, #-8]
   19f4c:	str	r2, [r3]
   19f50:	b	19fe4 <flatcc_builder_get_emit_context@@Base+0x1cc>
   19f54:	ldr	r3, [fp, #-16]
   19f58:	ldr	r2, [fp, #-8]
   19f5c:	str	r2, [r3]
   19f60:	ldr	r3, [fp, #-16]
   19f64:	ldr	r2, [fp, #-8]
   19f68:	str	r2, [r3, #4]
   19f6c:	ldr	r3, [fp, #-8]
   19f70:	ldr	r2, [fp, #-8]
   19f74:	str	r2, [r3, #2944]	; 0xb80
   19f78:	ldr	r3, [fp, #-8]
   19f7c:	ldr	r2, [fp, #-8]
   19f80:	str	r2, [r3, #2948]	; 0xb84
   19f84:	ldr	r3, [fp, #-16]
   19f88:	ldr	r3, [r3]
   19f8c:	add	r2, r3, #1472	; 0x5c0
   19f90:	ldr	r3, [fp, #-16]
   19f94:	str	r2, [r3, #8]
   19f98:	ldr	r3, [fp, #-16]
   19f9c:	ldr	r2, [r3, #8]
   19fa0:	ldr	r3, [fp, #-16]
   19fa4:	str	r2, [r3, #16]
   19fa8:	ldr	r3, [fp, #-16]
   19fac:	mov	r2, #1472	; 0x5c0
   19fb0:	str	r2, [r3, #12]
   19fb4:	ldr	r3, [fp, #-16]
   19fb8:	ldr	r3, [r3, #12]
   19fbc:	rsb	r2, r3, #2944	; 0xb80
   19fc0:	ldr	r3, [fp, #-16]
   19fc4:	str	r2, [r3, #20]
   19fc8:	ldr	r3, [fp, #-16]
   19fcc:	ldr	r3, [r3, #12]
   19fd0:	rsb	r2, r3, #0
   19fd4:	ldr	r3, [fp, #-8]
   19fd8:	str	r2, [r3, #2952]	; 0xb88
   19fdc:	mov	r3, #0
   19fe0:	b	1a028 <flatcc_builder_get_emit_context@@Base+0x210>
   19fe4:	ldr	r3, [fp, #-16]
   19fe8:	ldr	r3, [r3]
   19fec:	add	r2, r3, #2944	; 0xb80
   19ff0:	ldr	r3, [fp, #-16]
   19ff4:	str	r2, [r3, #8]
   19ff8:	ldr	r3, [fp, #-16]
   19ffc:	mov	r2, #2944	; 0xb80
   1a000:	str	r2, [r3, #12]
   1a004:	ldr	r3, [fp, #-16]
   1a008:	ldr	r3, [r3]
   1a00c:	ldr	r2, [fp, #-16]
   1a010:	ldr	r2, [r2]
   1a014:	ldr	r2, [r2, #2944]	; 0xb80
   1a018:	ldr	r2, [r2, #2952]	; 0xb88
   1a01c:	sub	r2, r2, #2944	; 0xb80
   1a020:	str	r2, [r3, #2952]	; 0xb88
   1a024:	mov	r3, #0
   1a028:	mov	r0, r3
   1a02c:	sub	sp, fp, #4
   1a030:	pop	{fp, pc}
   1a034:	andeq	r0, r0, ip, lsl #23
   1a038:	push	{fp, lr}
   1a03c:	add	fp, sp, #4
   1a040:	sub	sp, sp, #16
   1a044:	str	r0, [fp, #-16]
   1a048:	mov	r3, #0
   1a04c:	str	r3, [fp, #-8]
   1a050:	ldr	r3, [fp, #-16]
   1a054:	ldr	r3, [r3, #4]
   1a058:	cmp	r3, #0
   1a05c:	beq	1a094 <flatcc_builder_get_emit_context@@Base+0x27c>
   1a060:	ldr	r3, [fp, #-16]
   1a064:	ldr	r3, [r3, #4]
   1a068:	ldr	r2, [r3, #2944]	; 0xb80
   1a06c:	ldr	r3, [fp, #-16]
   1a070:	ldr	r3, [r3]
   1a074:	cmp	r2, r3
   1a078:	beq	1a094 <flatcc_builder_get_emit_context@@Base+0x27c>
   1a07c:	ldr	r3, [fp, #-16]
   1a080:	ldr	r3, [r3, #4]
   1a084:	ldr	r2, [r3, #2944]	; 0xb80
   1a088:	ldr	r3, [fp, #-16]
   1a08c:	str	r2, [r3, #4]
   1a090:	b	1a1bc <flatcc_builder_get_emit_context@@Base+0x3a4>
   1a094:	ldr	r0, [pc, #368]	; 1a20c <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a098:	bl	122e0 <malloc@plt>
   1a09c:	mov	r3, r0
   1a0a0:	str	r3, [fp, #-8]
   1a0a4:	ldr	r3, [fp, #-8]
   1a0a8:	cmp	r3, #0
   1a0ac:	bne	1a0b8 <flatcc_builder_get_emit_context@@Base+0x2a0>
   1a0b0:	mvn	r3, #0
   1a0b4:	b	1a200 <flatcc_builder_get_emit_context@@Base+0x3e8>
   1a0b8:	ldr	r3, [fp, #-16]
   1a0bc:	ldr	r3, [r3, #28]
   1a0c0:	add	r2, r3, #2944	; 0xb80
   1a0c4:	ldr	r3, [fp, #-16]
   1a0c8:	str	r2, [r3, #28]
   1a0cc:	ldr	r3, [fp, #-16]
   1a0d0:	ldr	r3, [r3, #4]
   1a0d4:	cmp	r3, #0
   1a0d8:	beq	1a12c <flatcc_builder_get_emit_context@@Base+0x314>
   1a0dc:	ldr	r3, [fp, #-16]
   1a0e0:	ldr	r2, [r3, #4]
   1a0e4:	ldr	r3, [fp, #-8]
   1a0e8:	str	r2, [r3, #2948]	; 0xb84
   1a0ec:	ldr	r3, [fp, #-16]
   1a0f0:	ldr	r2, [r3]
   1a0f4:	ldr	r3, [fp, #-8]
   1a0f8:	str	r2, [r3, #2944]	; 0xb80
   1a0fc:	ldr	r3, [fp, #-16]
   1a100:	ldr	r3, [r3]
   1a104:	ldr	r2, [fp, #-8]
   1a108:	str	r2, [r3, #2948]	; 0xb84
   1a10c:	ldr	r3, [fp, #-16]
   1a110:	ldr	r3, [r3, #4]
   1a114:	ldr	r2, [fp, #-8]
   1a118:	str	r2, [r3, #2944]	; 0xb80
   1a11c:	ldr	r3, [fp, #-16]
   1a120:	ldr	r2, [fp, #-8]
   1a124:	str	r2, [r3, #4]
   1a128:	b	1a1bc <flatcc_builder_get_emit_context@@Base+0x3a4>
   1a12c:	ldr	r3, [fp, #-16]
   1a130:	ldr	r2, [fp, #-8]
   1a134:	str	r2, [r3]
   1a138:	ldr	r3, [fp, #-16]
   1a13c:	ldr	r2, [fp, #-8]
   1a140:	str	r2, [r3, #4]
   1a144:	ldr	r3, [fp, #-8]
   1a148:	ldr	r2, [fp, #-8]
   1a14c:	str	r2, [r3, #2944]	; 0xb80
   1a150:	ldr	r3, [fp, #-8]
   1a154:	ldr	r2, [fp, #-8]
   1a158:	str	r2, [r3, #2948]	; 0xb84
   1a15c:	ldr	r3, [fp, #-16]
   1a160:	ldr	r3, [r3]
   1a164:	add	r2, r3, #1472	; 0x5c0
   1a168:	ldr	r3, [fp, #-16]
   1a16c:	str	r2, [r3, #8]
   1a170:	ldr	r3, [fp, #-16]
   1a174:	ldr	r2, [r3, #8]
   1a178:	ldr	r3, [fp, #-16]
   1a17c:	str	r2, [r3, #16]
   1a180:	ldr	r3, [fp, #-16]
   1a184:	mov	r2, #1472	; 0x5c0
   1a188:	str	r2, [r3, #12]
   1a18c:	ldr	r3, [fp, #-16]
   1a190:	ldr	r3, [r3, #12]
   1a194:	rsb	r2, r3, #2944	; 0xb80
   1a198:	ldr	r3, [fp, #-16]
   1a19c:	str	r2, [r3, #20]
   1a1a0:	ldr	r3, [fp, #-16]
   1a1a4:	ldr	r3, [r3, #12]
   1a1a8:	rsb	r2, r3, #0
   1a1ac:	ldr	r3, [fp, #-8]
   1a1b0:	str	r2, [r3, #2952]	; 0xb88
   1a1b4:	mov	r3, #0
   1a1b8:	b	1a200 <flatcc_builder_get_emit_context@@Base+0x3e8>
   1a1bc:	ldr	r3, [fp, #-16]
   1a1c0:	ldr	r3, [r3, #4]
   1a1c4:	mov	r2, r3
   1a1c8:	ldr	r3, [fp, #-16]
   1a1cc:	str	r2, [r3, #16]
   1a1d0:	ldr	r3, [fp, #-16]
   1a1d4:	mov	r2, #2944	; 0xb80
   1a1d8:	str	r2, [r3, #20]
   1a1dc:	ldr	r3, [fp, #-16]
   1a1e0:	ldr	r3, [r3, #4]
   1a1e4:	ldr	r2, [fp, #-16]
   1a1e8:	ldr	r2, [r2, #4]
   1a1ec:	ldr	r2, [r2, #2948]	; 0xb84
   1a1f0:	ldr	r2, [r2, #2952]	; 0xb88
   1a1f4:	add	r2, r2, #2944	; 0xb80
   1a1f8:	str	r2, [r3, #2952]	; 0xb88
   1a1fc:	mov	r3, #0
   1a200:	mov	r0, r3
   1a204:	sub	sp, fp, #4
   1a208:	pop	{fp, pc}
   1a20c:	andeq	r0, r0, ip, lsl #23
   1a210:	push	{fp, lr}
   1a214:	add	fp, sp, #4
   1a218:	sub	sp, sp, #24
   1a21c:	str	r0, [fp, #-16]
   1a220:	str	r1, [fp, #-20]	; 0xffffffec
   1a224:	str	r2, [fp, #-24]	; 0xffffffe8
   1a228:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a22c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a230:	add	r3, r2, r3
   1a234:	str	r3, [fp, #-20]	; 0xffffffec
   1a238:	b	1a2fc <flatcc_builder_get_emit_context@@Base+0x4e4>
   1a23c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a240:	str	r3, [fp, #-8]
   1a244:	ldr	r3, [fp, #-16]
   1a248:	ldr	r2, [r3, #12]
   1a24c:	ldr	r3, [fp, #-8]
   1a250:	cmp	r2, r3
   1a254:	bcs	1a28c <flatcc_builder_get_emit_context@@Base+0x474>
   1a258:	ldr	r3, [fp, #-16]
   1a25c:	ldr	r3, [r3, #12]
   1a260:	str	r3, [fp, #-8]
   1a264:	ldr	r3, [fp, #-8]
   1a268:	cmp	r3, #0
   1a26c:	bne	1a28c <flatcc_builder_get_emit_context@@Base+0x474>
   1a270:	ldr	r0, [fp, #-16]
   1a274:	bl	19e40 <flatcc_builder_get_emit_context@@Base+0x28>
   1a278:	mov	r3, r0
   1a27c:	cmp	r3, #0
   1a280:	beq	1a2fc <flatcc_builder_get_emit_context@@Base+0x4e4>
   1a284:	mvn	r3, #0
   1a288:	b	1a30c <flatcc_builder_get_emit_context@@Base+0x4f4>
   1a28c:	ldr	r3, [fp, #-16]
   1a290:	ldr	r2, [r3, #8]
   1a294:	ldr	r3, [fp, #-8]
   1a298:	rsb	r3, r3, #0
   1a29c:	add	r2, r2, r3
   1a2a0:	ldr	r3, [fp, #-16]
   1a2a4:	str	r2, [r3, #8]
   1a2a8:	ldr	r3, [fp, #-16]
   1a2ac:	ldr	r2, [r3, #12]
   1a2b0:	ldr	r3, [fp, #-8]
   1a2b4:	sub	r2, r2, r3
   1a2b8:	ldr	r3, [fp, #-16]
   1a2bc:	str	r2, [r3, #12]
   1a2c0:	ldr	r3, [fp, #-8]
   1a2c4:	rsb	r3, r3, #0
   1a2c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2cc:	add	r3, r2, r3
   1a2d0:	str	r3, [fp, #-20]	; 0xffffffec
   1a2d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a2d8:	ldr	r3, [fp, #-8]
   1a2dc:	sub	r3, r2, r3
   1a2e0:	str	r3, [fp, #-24]	; 0xffffffe8
   1a2e4:	ldr	r3, [fp, #-16]
   1a2e8:	ldr	r3, [r3, #8]
   1a2ec:	ldr	r2, [fp, #-8]
   1a2f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a2f4:	mov	r0, r3
   1a2f8:	bl	122bc <memcpy@plt>
   1a2fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a300:	cmp	r3, #0
   1a304:	bne	1a23c <flatcc_builder_get_emit_context@@Base+0x424>
   1a308:	mov	r3, #0
   1a30c:	mov	r0, r3
   1a310:	sub	sp, fp, #4
   1a314:	pop	{fp, pc}
   1a318:	push	{fp, lr}
   1a31c:	add	fp, sp, #4
   1a320:	sub	sp, sp, #24
   1a324:	str	r0, [fp, #-16]
   1a328:	str	r1, [fp, #-20]	; 0xffffffec
   1a32c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a330:	b	1a3ec <flatcc_builder_get_emit_context@@Base+0x5d4>
   1a334:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a338:	str	r3, [fp, #-8]
   1a33c:	ldr	r3, [fp, #-16]
   1a340:	ldr	r2, [r3, #20]
   1a344:	ldr	r3, [fp, #-8]
   1a348:	cmp	r2, r3
   1a34c:	bcs	1a384 <flatcc_builder_get_emit_context@@Base+0x56c>
   1a350:	ldr	r3, [fp, #-16]
   1a354:	ldr	r3, [r3, #20]
   1a358:	str	r3, [fp, #-8]
   1a35c:	ldr	r3, [fp, #-8]
   1a360:	cmp	r3, #0
   1a364:	bne	1a384 <flatcc_builder_get_emit_context@@Base+0x56c>
   1a368:	ldr	r0, [fp, #-16]
   1a36c:	bl	1a038 <flatcc_builder_get_emit_context@@Base+0x220>
   1a370:	mov	r3, r0
   1a374:	cmp	r3, #0
   1a378:	beq	1a3ec <flatcc_builder_get_emit_context@@Base+0x5d4>
   1a37c:	mvn	r3, #0
   1a380:	b	1a3fc <flatcc_builder_get_emit_context@@Base+0x5e4>
   1a384:	ldr	r3, [fp, #-16]
   1a388:	ldr	r3, [r3, #16]
   1a38c:	ldr	r2, [fp, #-8]
   1a390:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a394:	mov	r0, r3
   1a398:	bl	122bc <memcpy@plt>
   1a39c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a3a0:	ldr	r3, [fp, #-8]
   1a3a4:	sub	r3, r2, r3
   1a3a8:	str	r3, [fp, #-24]	; 0xffffffe8
   1a3ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3b0:	ldr	r3, [fp, #-8]
   1a3b4:	add	r3, r2, r3
   1a3b8:	str	r3, [fp, #-20]	; 0xffffffec
   1a3bc:	ldr	r3, [fp, #-16]
   1a3c0:	ldr	r2, [r3, #16]
   1a3c4:	ldr	r3, [fp, #-8]
   1a3c8:	add	r2, r2, r3
   1a3cc:	ldr	r3, [fp, #-16]
   1a3d0:	str	r2, [r3, #16]
   1a3d4:	ldr	r3, [fp, #-16]
   1a3d8:	ldr	r2, [r3, #20]
   1a3dc:	ldr	r3, [fp, #-8]
   1a3e0:	sub	r2, r2, r3
   1a3e4:	ldr	r3, [fp, #-16]
   1a3e8:	str	r2, [r3, #20]
   1a3ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a3f0:	cmp	r3, #0
   1a3f4:	bne	1a334 <flatcc_builder_get_emit_context@@Base+0x51c>
   1a3f8:	mov	r3, #0
   1a3fc:	mov	r0, r3
   1a400:	sub	sp, fp, #4
   1a404:	pop	{fp, pc}

0001a408 <flatcc_emitter_recycle_page@@Base>:
   1a408:	push	{fp}		; (str fp, [sp, #-4]!)
   1a40c:	add	fp, sp, #0
   1a410:	sub	sp, sp, #12
   1a414:	str	r0, [fp, #-8]
   1a418:	str	r1, [fp, #-12]
   1a41c:	ldr	r3, [fp, #-8]
   1a420:	ldr	r2, [r3]
   1a424:	ldr	r3, [fp, #-12]
   1a428:	cmp	r2, r3
   1a42c:	beq	1a444 <flatcc_emitter_recycle_page@@Base+0x3c>
   1a430:	ldr	r3, [fp, #-8]
   1a434:	ldr	r2, [r3, #4]
   1a438:	ldr	r3, [fp, #-12]
   1a43c:	cmp	r2, r3
   1a440:	bne	1a44c <flatcc_emitter_recycle_page@@Base+0x44>
   1a444:	mvn	r3, #0
   1a448:	b	1a4bc <flatcc_emitter_recycle_page@@Base+0xb4>
   1a44c:	ldr	r3, [fp, #-12]
   1a450:	ldr	r3, [r3, #2944]	; 0xb80
   1a454:	ldr	r2, [fp, #-12]
   1a458:	ldr	r2, [r2, #2948]	; 0xb84
   1a45c:	str	r2, [r3, #2948]	; 0xb84
   1a460:	ldr	r3, [fp, #-12]
   1a464:	ldr	r3, [r3, #2948]	; 0xb84
   1a468:	ldr	r2, [fp, #-12]
   1a46c:	ldr	r2, [r2, #2944]	; 0xb80
   1a470:	str	r2, [r3, #2944]	; 0xb80
   1a474:	ldr	r3, [fp, #-8]
   1a478:	ldr	r3, [r3]
   1a47c:	ldr	r2, [r3, #2948]	; 0xb84
   1a480:	ldr	r3, [fp, #-12]
   1a484:	str	r2, [r3, #2948]	; 0xb84
   1a488:	ldr	r3, [fp, #-8]
   1a48c:	ldr	r2, [r3]
   1a490:	ldr	r3, [fp, #-12]
   1a494:	str	r2, [r3, #2944]	; 0xb80
   1a498:	ldr	r3, [fp, #-12]
   1a49c:	ldr	r3, [r3, #2948]	; 0xb84
   1a4a0:	ldr	r2, [fp, #-12]
   1a4a4:	str	r2, [r3, #2944]	; 0xb80
   1a4a8:	ldr	r3, [fp, #-12]
   1a4ac:	ldr	r3, [r3, #2944]	; 0xb80
   1a4b0:	ldr	r2, [fp, #-12]
   1a4b4:	str	r2, [r3, #2948]	; 0xb84
   1a4b8:	mov	r3, #0
   1a4bc:	mov	r0, r3
   1a4c0:	add	sp, fp, #0
   1a4c4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4c8:	bx	lr

0001a4cc <flatcc_emitter_reset@@Base>:
   1a4cc:	push	{fp, lr}
   1a4d0:	add	fp, sp, #4
   1a4d4:	sub	sp, sp, #16
   1a4d8:	str	r0, [fp, #-16]
   1a4dc:	ldr	r3, [fp, #-16]
   1a4e0:	ldr	r3, [r3]
   1a4e4:	str	r3, [fp, #-8]
   1a4e8:	ldr	r3, [fp, #-16]
   1a4ec:	ldr	r3, [r3]
   1a4f0:	cmp	r3, #0
   1a4f4:	beq	1a64c <flatcc_emitter_reset@@Base+0x180>
   1a4f8:	ldr	r3, [fp, #-16]
   1a4fc:	ldr	r2, [r3]
   1a500:	ldr	r3, [fp, #-16]
   1a504:	str	r2, [r3, #4]
   1a508:	ldr	r3, [fp, #-16]
   1a50c:	ldr	r3, [r3]
   1a510:	add	r2, r3, #1472	; 0x5c0
   1a514:	ldr	r3, [fp, #-16]
   1a518:	str	r2, [r3, #8]
   1a51c:	ldr	r3, [fp, #-16]
   1a520:	ldr	r2, [r3, #8]
   1a524:	ldr	r3, [fp, #-16]
   1a528:	str	r2, [r3, #16]
   1a52c:	ldr	r3, [fp, #-16]
   1a530:	mov	r2, #1472	; 0x5c0
   1a534:	str	r2, [r3, #12]
   1a538:	ldr	r3, [fp, #-16]
   1a53c:	mov	r2, #1472	; 0x5c0
   1a540:	str	r2, [r3, #20]
   1a544:	ldr	r3, [fp, #-16]
   1a548:	ldr	r3, [r3]
   1a54c:	ldr	r2, [fp, #-16]
   1a550:	ldr	r2, [r2, #12]
   1a554:	rsb	r2, r2, #0
   1a558:	str	r2, [r3, #2952]	; 0xb88
   1a55c:	ldr	r3, [fp, #-16]
   1a560:	ldr	r3, [r3, #32]
   1a564:	cmp	r3, #0
   1a568:	bne	1a57c <flatcc_emitter_reset@@Base+0xb0>
   1a56c:	ldr	r3, [fp, #-16]
   1a570:	ldr	r2, [r3, #24]
   1a574:	ldr	r3, [fp, #-16]
   1a578:	str	r2, [r3, #32]
   1a57c:	ldr	r3, [fp, #-16]
   1a580:	ldr	r2, [r3, #32]
   1a584:	mov	r3, r2
   1a588:	lsl	r3, r3, #1
   1a58c:	add	r3, r3, r2
   1a590:	lsr	r2, r3, #2
   1a594:	ldr	r3, [fp, #-16]
   1a598:	ldr	r3, [r3, #24]
   1a59c:	lsr	r3, r3, #2
   1a5a0:	add	r2, r2, r3
   1a5a4:	ldr	r3, [fp, #-16]
   1a5a8:	str	r2, [r3, #32]
   1a5ac:	ldr	r3, [fp, #-16]
   1a5b0:	mov	r2, #0
   1a5b4:	str	r2, [r3, #24]
   1a5b8:	b	1a610 <flatcc_emitter_reset@@Base+0x144>
   1a5bc:	ldr	r3, [fp, #-16]
   1a5c0:	ldr	r3, [r3, #4]
   1a5c4:	ldr	r3, [r3, #2944]	; 0xb80
   1a5c8:	str	r3, [fp, #-8]
   1a5cc:	ldr	r3, [fp, #-16]
   1a5d0:	ldr	r3, [r3, #4]
   1a5d4:	ldr	r2, [fp, #-8]
   1a5d8:	ldr	r2, [r2, #2944]	; 0xb80
   1a5dc:	str	r2, [r3, #2944]	; 0xb80
   1a5e0:	ldr	r3, [fp, #-8]
   1a5e4:	ldr	r3, [r3, #2944]	; 0xb80
   1a5e8:	ldr	r2, [fp, #-16]
   1a5ec:	ldr	r2, [r2, #4]
   1a5f0:	str	r2, [r3, #2948]	; 0xb84
   1a5f4:	ldr	r0, [fp, #-8]
   1a5f8:	bl	122b0 <free@plt>
   1a5fc:	ldr	r3, [fp, #-16]
   1a600:	ldr	r3, [r3, #28]
   1a604:	sub	r2, r3, #2944	; 0xb80
   1a608:	ldr	r3, [fp, #-16]
   1a60c:	str	r2, [r3, #28]
   1a610:	ldr	r3, [fp, #-16]
   1a614:	ldr	r3, [r3, #32]
   1a618:	lsl	r2, r3, #1
   1a61c:	ldr	r3, [fp, #-16]
   1a620:	ldr	r3, [r3, #28]
   1a624:	cmp	r2, r3
   1a628:	bcs	1a650 <flatcc_emitter_reset@@Base+0x184>
   1a62c:	ldr	r3, [fp, #-16]
   1a630:	ldr	r3, [r3, #4]
   1a634:	ldr	r2, [r3, #2944]	; 0xb80
   1a638:	ldr	r3, [fp, #-16]
   1a63c:	ldr	r3, [r3]
   1a640:	cmp	r2, r3
   1a644:	bne	1a5bc <flatcc_emitter_reset@@Base+0xf0>
   1a648:	b	1a650 <flatcc_emitter_reset@@Base+0x184>
   1a64c:	nop			; (mov r0, r0)
   1a650:	sub	sp, fp, #4
   1a654:	pop	{fp, pc}

0001a658 <flatcc_emitter_clear@@Base>:
   1a658:	push	{fp, lr}
   1a65c:	add	fp, sp, #4
   1a660:	sub	sp, sp, #16
   1a664:	str	r0, [fp, #-16]
   1a668:	ldr	r3, [fp, #-16]
   1a66c:	ldr	r3, [r3]
   1a670:	str	r3, [fp, #-8]
   1a674:	ldr	r3, [fp, #-8]
   1a678:	cmp	r3, #0
   1a67c:	beq	1a6dc <flatcc_emitter_clear@@Base+0x84>
   1a680:	ldr	r3, [fp, #-8]
   1a684:	ldr	r3, [r3, #2948]	; 0xb84
   1a688:	mov	r2, #0
   1a68c:	str	r2, [r3, #2944]	; 0xb80
   1a690:	b	1a6b0 <flatcc_emitter_clear@@Base+0x58>
   1a694:	ldr	r3, [fp, #-8]
   1a698:	ldr	r3, [r3, #2944]	; 0xb80
   1a69c:	str	r3, [fp, #-8]
   1a6a0:	ldr	r3, [fp, #-8]
   1a6a4:	ldr	r3, [r3, #2948]	; 0xb84
   1a6a8:	mov	r0, r3
   1a6ac:	bl	122b0 <free@plt>
   1a6b0:	ldr	r3, [fp, #-8]
   1a6b4:	ldr	r3, [r3, #2944]	; 0xb80
   1a6b8:	cmp	r3, #0
   1a6bc:	bne	1a694 <flatcc_emitter_clear@@Base+0x3c>
   1a6c0:	ldr	r0, [fp, #-8]
   1a6c4:	bl	122b0 <free@plt>
   1a6c8:	mov	r2, #36	; 0x24
   1a6cc:	mov	r1, #0
   1a6d0:	ldr	r0, [fp, #-16]
   1a6d4:	bl	1231c <memset@plt>
   1a6d8:	b	1a6e0 <flatcc_emitter_clear@@Base+0x88>
   1a6dc:	nop			; (mov r0, r0)
   1a6e0:	sub	sp, fp, #4
   1a6e4:	pop	{fp, pc}

0001a6e8 <flatcc_emitter@@Base>:
   1a6e8:	push	{fp, lr}
   1a6ec:	add	fp, sp, #4
   1a6f0:	sub	sp, sp, #24
   1a6f4:	str	r0, [fp, #-16]
   1a6f8:	str	r1, [fp, #-20]	; 0xffffffec
   1a6fc:	str	r2, [fp, #-24]	; 0xffffffe8
   1a700:	str	r3, [fp, #-28]	; 0xffffffe4
   1a704:	ldr	r3, [fp, #-16]
   1a708:	str	r3, [fp, #-12]
   1a70c:	ldr	r3, [fp, #-12]
   1a710:	ldr	r2, [r3, #24]
   1a714:	ldr	r3, [fp, #4]
   1a718:	add	r2, r2, r3
   1a71c:	ldr	r3, [fp, #-12]
   1a720:	str	r2, [r3, #24]
   1a724:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a728:	cmp	r3, #0
   1a72c:	bge	1a7f4 <flatcc_emitter@@Base+0x10c>
   1a730:	ldr	r3, [fp, #-12]
   1a734:	ldr	r2, [r3, #12]
   1a738:	ldr	r3, [fp, #4]
   1a73c:	cmp	r2, r3
   1a740:	bcc	1a788 <flatcc_emitter@@Base+0xa0>
   1a744:	ldr	r3, [fp, #-12]
   1a748:	ldr	r2, [r3, #8]
   1a74c:	ldr	r3, [fp, #4]
   1a750:	rsb	r3, r3, #0
   1a754:	add	r2, r2, r3
   1a758:	ldr	r3, [fp, #-12]
   1a75c:	str	r2, [r3, #8]
   1a760:	ldr	r3, [fp, #-12]
   1a764:	ldr	r2, [r3, #12]
   1a768:	ldr	r3, [fp, #4]
   1a76c:	sub	r2, r2, r3
   1a770:	ldr	r3, [fp, #-12]
   1a774:	str	r2, [r3, #12]
   1a778:	ldr	r3, [fp, #-12]
   1a77c:	ldr	r3, [r3, #8]
   1a780:	str	r3, [fp, #-8]
   1a784:	b	1a8a0 <flatcc_emitter@@Base+0x1b8>
   1a788:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a78c:	lsl	r3, r3, #3
   1a790:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a794:	add	r3, r2, r3
   1a798:	str	r3, [fp, #-20]	; 0xffffffec
   1a79c:	b	1a7dc <flatcc_emitter@@Base+0xf4>
   1a7a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7a4:	sub	r3, r3, #8
   1a7a8:	str	r3, [fp, #-20]	; 0xffffffec
   1a7ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7b0:	ldr	r1, [r3]
   1a7b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7b8:	ldr	r3, [r3, #4]
   1a7bc:	mov	r2, r3
   1a7c0:	ldr	r0, [fp, #-12]
   1a7c4:	bl	1a210 <flatcc_builder_get_emit_context@@Base+0x3f8>
   1a7c8:	mov	r3, r0
   1a7cc:	cmp	r3, #0
   1a7d0:	beq	1a7dc <flatcc_emitter@@Base+0xf4>
   1a7d4:	mvn	r3, #0
   1a7d8:	b	1a8f8 <flatcc_emitter@@Base+0x210>
   1a7dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a7e0:	sub	r2, r3, #1
   1a7e4:	str	r2, [fp, #-24]	; 0xffffffe8
   1a7e8:	cmp	r3, #0
   1a7ec:	bne	1a7a0 <flatcc_emitter@@Base+0xb8>
   1a7f0:	b	1a898 <flatcc_emitter@@Base+0x1b0>
   1a7f4:	ldr	r3, [fp, #-12]
   1a7f8:	ldr	r2, [r3, #20]
   1a7fc:	ldr	r3, [fp, #4]
   1a800:	cmp	r2, r3
   1a804:	bcc	1a884 <flatcc_emitter@@Base+0x19c>
   1a808:	ldr	r3, [fp, #-12]
   1a80c:	ldr	r3, [r3, #16]
   1a810:	str	r3, [fp, #-8]
   1a814:	ldr	r3, [fp, #-12]
   1a818:	ldr	r2, [r3, #16]
   1a81c:	ldr	r3, [fp, #4]
   1a820:	add	r2, r2, r3
   1a824:	ldr	r3, [fp, #-12]
   1a828:	str	r2, [r3, #16]
   1a82c:	ldr	r3, [fp, #-12]
   1a830:	ldr	r2, [r3, #20]
   1a834:	ldr	r3, [fp, #4]
   1a838:	sub	r2, r2, r3
   1a83c:	ldr	r3, [fp, #-12]
   1a840:	str	r2, [r3, #20]
   1a844:	b	1a8a0 <flatcc_emitter@@Base+0x1b8>
   1a848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a84c:	ldr	r1, [r3]
   1a850:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a854:	ldr	r3, [r3, #4]
   1a858:	mov	r2, r3
   1a85c:	ldr	r0, [fp, #-12]
   1a860:	bl	1a318 <flatcc_builder_get_emit_context@@Base+0x500>
   1a864:	mov	r3, r0
   1a868:	cmp	r3, #0
   1a86c:	beq	1a878 <flatcc_emitter@@Base+0x190>
   1a870:	mvn	r3, #0
   1a874:	b	1a8f8 <flatcc_emitter@@Base+0x210>
   1a878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a87c:	add	r3, r3, #8
   1a880:	str	r3, [fp, #-20]	; 0xffffffec
   1a884:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a888:	sub	r2, r3, #1
   1a88c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a890:	cmp	r3, #0
   1a894:	bne	1a848 <flatcc_emitter@@Base+0x160>
   1a898:	mov	r3, #0
   1a89c:	b	1a8f8 <flatcc_emitter@@Base+0x210>
   1a8a0:	b	1a8e0 <flatcc_emitter@@Base+0x1f8>
   1a8a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8a8:	ldr	r1, [r3]
   1a8ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8b0:	ldr	r3, [r3, #4]
   1a8b4:	mov	r2, r3
   1a8b8:	ldr	r0, [fp, #-8]
   1a8bc:	bl	122bc <memcpy@plt>
   1a8c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8c4:	ldr	r3, [r3, #4]
   1a8c8:	ldr	r2, [fp, #-8]
   1a8cc:	add	r3, r2, r3
   1a8d0:	str	r3, [fp, #-8]
   1a8d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8d8:	add	r3, r3, #8
   1a8dc:	str	r3, [fp, #-20]	; 0xffffffec
   1a8e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a8e4:	sub	r2, r3, #1
   1a8e8:	str	r2, [fp, #-24]	; 0xffffffe8
   1a8ec:	cmp	r3, #0
   1a8f0:	bne	1a8a4 <flatcc_emitter@@Base+0x1bc>
   1a8f4:	mov	r3, #0
   1a8f8:	mov	r0, r3
   1a8fc:	sub	sp, fp, #4
   1a900:	pop	{fp, pc}

0001a904 <flatcc_emitter_copy_buffer@@Base>:
   1a904:	push	{fp, lr}
   1a908:	add	fp, sp, #4
   1a90c:	sub	sp, sp, #24
   1a910:	str	r0, [fp, #-16]
   1a914:	str	r1, [fp, #-20]	; 0xffffffec
   1a918:	str	r2, [fp, #-24]	; 0xffffffe8
   1a91c:	ldr	r3, [fp, #-16]
   1a920:	ldr	r2, [r3, #24]
   1a924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a928:	cmp	r2, r3
   1a92c:	bls	1a938 <flatcc_emitter_copy_buffer@@Base+0x34>
   1a930:	mov	r3, #0
   1a934:	b	1aa38 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a938:	ldr	r3, [fp, #-16]
   1a93c:	ldr	r3, [r3]
   1a940:	cmp	r3, #0
   1a944:	bne	1a950 <flatcc_emitter_copy_buffer@@Base+0x4c>
   1a948:	mov	r3, #0
   1a94c:	b	1aa38 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a950:	ldr	r3, [fp, #-16]
   1a954:	ldr	r2, [r3]
   1a958:	ldr	r3, [fp, #-16]
   1a95c:	ldr	r3, [r3, #4]
   1a960:	cmp	r2, r3
   1a964:	bne	1a98c <flatcc_emitter_copy_buffer@@Base+0x88>
   1a968:	ldr	r3, [fp, #-16]
   1a96c:	ldr	r1, [r3, #8]
   1a970:	ldr	r3, [fp, #-16]
   1a974:	ldr	r3, [r3, #24]
   1a978:	mov	r2, r3
   1a97c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a980:	bl	122bc <memcpy@plt>
   1a984:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a988:	b	1aa38 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a98c:	ldr	r3, [fp, #-16]
   1a990:	ldr	r3, [r3, #12]
   1a994:	rsb	r3, r3, #2944	; 0xb80
   1a998:	str	r3, [fp, #-12]
   1a99c:	ldr	r3, [fp, #-16]
   1a9a0:	ldr	r3, [r3, #8]
   1a9a4:	ldr	r2, [fp, #-12]
   1a9a8:	mov	r1, r3
   1a9ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a9b0:	bl	122bc <memcpy@plt>
   1a9b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a9b8:	ldr	r3, [fp, #-12]
   1a9bc:	add	r3, r2, r3
   1a9c0:	str	r3, [fp, #-20]	; 0xffffffec
   1a9c4:	ldr	r3, [fp, #-16]
   1a9c8:	ldr	r3, [r3]
   1a9cc:	ldr	r3, [r3, #2944]	; 0xb80
   1a9d0:	str	r3, [fp, #-8]
   1a9d4:	b	1aa04 <flatcc_emitter_copy_buffer@@Base+0x100>
   1a9d8:	ldr	r3, [fp, #-8]
   1a9dc:	mov	r2, #2944	; 0xb80
   1a9e0:	mov	r1, r3
   1a9e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a9e8:	bl	122bc <memcpy@plt>
   1a9ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a9f0:	add	r3, r3, #2944	; 0xb80
   1a9f4:	str	r3, [fp, #-20]	; 0xffffffec
   1a9f8:	ldr	r3, [fp, #-8]
   1a9fc:	ldr	r3, [r3, #2944]	; 0xb80
   1aa00:	str	r3, [fp, #-8]
   1aa04:	ldr	r3, [fp, #-16]
   1aa08:	ldr	r2, [r3, #4]
   1aa0c:	ldr	r3, [fp, #-8]
   1aa10:	cmp	r2, r3
   1aa14:	bne	1a9d8 <flatcc_emitter_copy_buffer@@Base+0xd4>
   1aa18:	ldr	r1, [fp, #-8]
   1aa1c:	ldr	r3, [fp, #-16]
   1aa20:	ldr	r3, [r3, #20]
   1aa24:	rsb	r3, r3, #2944	; 0xb80
   1aa28:	mov	r2, r3
   1aa2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa30:	bl	122bc <memcpy@plt>
   1aa34:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa38:	mov	r0, r3
   1aa3c:	sub	sp, fp, #4
   1aa40:	pop	{fp, pc}
   1aa44:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa48:	add	fp, sp, #0
   1aa4c:	sub	sp, sp, #12
   1aa50:	str	r0, [fp, #-8]
   1aa54:	ldr	r3, [fp, #-8]
   1aa58:	mov	r0, r3
   1aa5c:	add	sp, fp, #0
   1aa60:	pop	{fp}		; (ldr fp, [sp], #4)
   1aa64:	bx	lr
   1aa68:	push	{fp, lr}
   1aa6c:	add	fp, sp, #4
   1aa70:	sub	sp, sp, #8
   1aa74:	str	r0, [fp, #-8]
   1aa78:	ldr	r3, [fp, #-8]
   1aa7c:	ldr	r3, [r3]
   1aa80:	mov	r0, r3
   1aa84:	bl	1aa44 <flatcc_emitter_copy_buffer@@Base+0x140>
   1aa88:	mov	r3, r0
   1aa8c:	mov	r0, r3
   1aa90:	sub	sp, fp, #4
   1aa94:	pop	{fp, pc}
   1aa98:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa9c:	add	fp, sp, #0
   1aaa0:	sub	sp, sp, #12
   1aaa4:	mov	r3, r0
   1aaa8:	strh	r3, [fp, #-6]
   1aaac:	ldrh	r3, [fp, #-6]
   1aab0:	mov	r0, r3
   1aab4:	add	sp, fp, #0
   1aab8:	pop	{fp}		; (ldr fp, [sp], #4)
   1aabc:	bx	lr
   1aac0:	push	{fp, lr}
   1aac4:	add	fp, sp, #4
   1aac8:	sub	sp, sp, #8
   1aacc:	str	r0, [fp, #-8]
   1aad0:	ldr	r3, [fp, #-8]
   1aad4:	ldrh	r3, [r3]
   1aad8:	mov	r0, r3
   1aadc:	bl	1aa98 <flatcc_emitter_copy_buffer@@Base+0x194>
   1aae0:	mov	r3, r0
   1aae4:	mov	r0, r3
   1aae8:	sub	sp, fp, #4
   1aaec:	pop	{fp, pc}
   1aaf0:	push	{fp}		; (str fp, [sp, #-4]!)
   1aaf4:	add	fp, sp, #0
   1aaf8:	sub	sp, sp, #12
   1aafc:	str	r0, [fp, #-8]
   1ab00:	ldr	r3, [fp, #-8]
   1ab04:	mov	r0, r3
   1ab08:	add	sp, fp, #0
   1ab0c:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab10:	bx	lr
   1ab14:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab18:	add	fp, sp, #0
   1ab1c:	sub	sp, sp, #12
   1ab20:	str	r0, [fp, #-8]
   1ab24:	ldr	r3, [fp, #-8]
   1ab28:	mov	r0, r3
   1ab2c:	add	sp, fp, #0
   1ab30:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab34:	bx	lr
   1ab38:	push	{fp, lr}
   1ab3c:	add	fp, sp, #4
   1ab40:	sub	sp, sp, #8
   1ab44:	str	r0, [fp, #-8]
   1ab48:	ldr	r3, [fp, #-8]
   1ab4c:	ldr	r3, [r3]
   1ab50:	mov	r0, r3
   1ab54:	bl	1aaf0 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1ab58:	mov	r3, r0
   1ab5c:	mov	r0, r3
   1ab60:	sub	sp, fp, #4
   1ab64:	pop	{fp, pc}

0001ab68 <flatcc_verify_error_string@@Base>:
   1ab68:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab6c:	add	fp, sp, #0
   1ab70:	sub	sp, sp, #12
   1ab74:	str	r0, [fp, #-8]
   1ab78:	ldr	r3, [fp, #-8]
   1ab7c:	cmp	r3, #36	; 0x24
   1ab80:	addls	pc, pc, r3, lsl #2
   1ab84:	b	1add8 <flatcc_verify_error_string@@Base+0x270>
   1ab88:	b	1ac1c <flatcc_verify_error_string@@Base+0xb4>
   1ab8c:	b	1ac28 <flatcc_verify_error_string@@Base+0xc0>
   1ab90:	b	1ac34 <flatcc_verify_error_string@@Base+0xcc>
   1ab94:	b	1ac40 <flatcc_verify_error_string@@Base+0xd8>
   1ab98:	b	1ac4c <flatcc_verify_error_string@@Base+0xe4>
   1ab9c:	b	1ac58 <flatcc_verify_error_string@@Base+0xf0>
   1aba0:	b	1ac64 <flatcc_verify_error_string@@Base+0xfc>
   1aba4:	b	1ac70 <flatcc_verify_error_string@@Base+0x108>
   1aba8:	b	1ac7c <flatcc_verify_error_string@@Base+0x114>
   1abac:	b	1ac88 <flatcc_verify_error_string@@Base+0x120>
   1abb0:	b	1ac94 <flatcc_verify_error_string@@Base+0x12c>
   1abb4:	b	1aca0 <flatcc_verify_error_string@@Base+0x138>
   1abb8:	b	1acac <flatcc_verify_error_string@@Base+0x144>
   1abbc:	b	1acb8 <flatcc_verify_error_string@@Base+0x150>
   1abc0:	b	1acc4 <flatcc_verify_error_string@@Base+0x15c>
   1abc4:	b	1acd0 <flatcc_verify_error_string@@Base+0x168>
   1abc8:	b	1acdc <flatcc_verify_error_string@@Base+0x174>
   1abcc:	b	1ace8 <flatcc_verify_error_string@@Base+0x180>
   1abd0:	b	1acf4 <flatcc_verify_error_string@@Base+0x18c>
   1abd4:	b	1ad00 <flatcc_verify_error_string@@Base+0x198>
   1abd8:	b	1ad0c <flatcc_verify_error_string@@Base+0x1a4>
   1abdc:	b	1ad18 <flatcc_verify_error_string@@Base+0x1b0>
   1abe0:	b	1ad24 <flatcc_verify_error_string@@Base+0x1bc>
   1abe4:	b	1ad30 <flatcc_verify_error_string@@Base+0x1c8>
   1abe8:	b	1ad3c <flatcc_verify_error_string@@Base+0x1d4>
   1abec:	b	1ad48 <flatcc_verify_error_string@@Base+0x1e0>
   1abf0:	b	1ad54 <flatcc_verify_error_string@@Base+0x1ec>
   1abf4:	b	1ad60 <flatcc_verify_error_string@@Base+0x1f8>
   1abf8:	b	1ad6c <flatcc_verify_error_string@@Base+0x204>
   1abfc:	b	1ad78 <flatcc_verify_error_string@@Base+0x210>
   1ac00:	b	1ad84 <flatcc_verify_error_string@@Base+0x21c>
   1ac04:	b	1ad90 <flatcc_verify_error_string@@Base+0x228>
   1ac08:	b	1ad9c <flatcc_verify_error_string@@Base+0x234>
   1ac0c:	b	1ada8 <flatcc_verify_error_string@@Base+0x240>
   1ac10:	b	1adb4 <flatcc_verify_error_string@@Base+0x24c>
   1ac14:	b	1adc0 <flatcc_verify_error_string@@Base+0x258>
   1ac18:	b	1adcc <flatcc_verify_error_string@@Base+0x264>
   1ac1c:	ldr	r3, [pc, #460]	; 1adf0 <flatcc_verify_error_string@@Base+0x288>
   1ac20:	add	r3, pc, r3
   1ac24:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac28:	ldr	r3, [pc, #452]	; 1adf4 <flatcc_verify_error_string@@Base+0x28c>
   1ac2c:	add	r3, pc, r3
   1ac30:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac34:	ldr	r3, [pc, #444]	; 1adf8 <flatcc_verify_error_string@@Base+0x290>
   1ac38:	add	r3, pc, r3
   1ac3c:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac40:	ldr	r3, [pc, #436]	; 1adfc <flatcc_verify_error_string@@Base+0x294>
   1ac44:	add	r3, pc, r3
   1ac48:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac4c:	ldr	r3, [pc, #428]	; 1ae00 <flatcc_verify_error_string@@Base+0x298>
   1ac50:	add	r3, pc, r3
   1ac54:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac58:	ldr	r3, [pc, #420]	; 1ae04 <flatcc_verify_error_string@@Base+0x29c>
   1ac5c:	add	r3, pc, r3
   1ac60:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac64:	ldr	r3, [pc, #412]	; 1ae08 <flatcc_verify_error_string@@Base+0x2a0>
   1ac68:	add	r3, pc, r3
   1ac6c:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac70:	ldr	r3, [pc, #404]	; 1ae0c <flatcc_verify_error_string@@Base+0x2a4>
   1ac74:	add	r3, pc, r3
   1ac78:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac7c:	ldr	r3, [pc, #396]	; 1ae10 <flatcc_verify_error_string@@Base+0x2a8>
   1ac80:	add	r3, pc, r3
   1ac84:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac88:	ldr	r3, [pc, #388]	; 1ae14 <flatcc_verify_error_string@@Base+0x2ac>
   1ac8c:	add	r3, pc, r3
   1ac90:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ac94:	ldr	r3, [pc, #380]	; 1ae18 <flatcc_verify_error_string@@Base+0x2b0>
   1ac98:	add	r3, pc, r3
   1ac9c:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1aca0:	ldr	r3, [pc, #372]	; 1ae1c <flatcc_verify_error_string@@Base+0x2b4>
   1aca4:	add	r3, pc, r3
   1aca8:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1acac:	ldr	r3, [pc, #364]	; 1ae20 <flatcc_verify_error_string@@Base+0x2b8>
   1acb0:	add	r3, pc, r3
   1acb4:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1acb8:	ldr	r3, [pc, #356]	; 1ae24 <flatcc_verify_error_string@@Base+0x2bc>
   1acbc:	add	r3, pc, r3
   1acc0:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1acc4:	ldr	r3, [pc, #348]	; 1ae28 <flatcc_verify_error_string@@Base+0x2c0>
   1acc8:	add	r3, pc, r3
   1accc:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1acd0:	ldr	r3, [pc, #340]	; 1ae2c <flatcc_verify_error_string@@Base+0x2c4>
   1acd4:	add	r3, pc, r3
   1acd8:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1acdc:	ldr	r3, [pc, #332]	; 1ae30 <flatcc_verify_error_string@@Base+0x2c8>
   1ace0:	add	r3, pc, r3
   1ace4:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ace8:	ldr	r3, [pc, #324]	; 1ae34 <flatcc_verify_error_string@@Base+0x2cc>
   1acec:	add	r3, pc, r3
   1acf0:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1acf4:	ldr	r3, [pc, #316]	; 1ae38 <flatcc_verify_error_string@@Base+0x2d0>
   1acf8:	add	r3, pc, r3
   1acfc:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad00:	ldr	r3, [pc, #308]	; 1ae3c <flatcc_verify_error_string@@Base+0x2d4>
   1ad04:	add	r3, pc, r3
   1ad08:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad0c:	ldr	r3, [pc, #300]	; 1ae40 <flatcc_verify_error_string@@Base+0x2d8>
   1ad10:	add	r3, pc, r3
   1ad14:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad18:	ldr	r3, [pc, #292]	; 1ae44 <flatcc_verify_error_string@@Base+0x2dc>
   1ad1c:	add	r3, pc, r3
   1ad20:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad24:	ldr	r3, [pc, #284]	; 1ae48 <flatcc_verify_error_string@@Base+0x2e0>
   1ad28:	add	r3, pc, r3
   1ad2c:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad30:	ldr	r3, [pc, #276]	; 1ae4c <flatcc_verify_error_string@@Base+0x2e4>
   1ad34:	add	r3, pc, r3
   1ad38:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad3c:	ldr	r3, [pc, #268]	; 1ae50 <flatcc_verify_error_string@@Base+0x2e8>
   1ad40:	add	r3, pc, r3
   1ad44:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad48:	ldr	r3, [pc, #260]	; 1ae54 <flatcc_verify_error_string@@Base+0x2ec>
   1ad4c:	add	r3, pc, r3
   1ad50:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad54:	ldr	r3, [pc, #252]	; 1ae58 <flatcc_verify_error_string@@Base+0x2f0>
   1ad58:	add	r3, pc, r3
   1ad5c:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad60:	ldr	r3, [pc, #244]	; 1ae5c <flatcc_verify_error_string@@Base+0x2f4>
   1ad64:	add	r3, pc, r3
   1ad68:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad6c:	ldr	r3, [pc, #236]	; 1ae60 <flatcc_verify_error_string@@Base+0x2f8>
   1ad70:	add	r3, pc, r3
   1ad74:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad78:	ldr	r3, [pc, #228]	; 1ae64 <flatcc_verify_error_string@@Base+0x2fc>
   1ad7c:	add	r3, pc, r3
   1ad80:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad84:	ldr	r3, [pc, #220]	; 1ae68 <flatcc_verify_error_string@@Base+0x300>
   1ad88:	add	r3, pc, r3
   1ad8c:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad90:	ldr	r3, [pc, #212]	; 1ae6c <flatcc_verify_error_string@@Base+0x304>
   1ad94:	add	r3, pc, r3
   1ad98:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ad9c:	ldr	r3, [pc, #204]	; 1ae70 <flatcc_verify_error_string@@Base+0x308>
   1ada0:	add	r3, pc, r3
   1ada4:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1ada8:	ldr	r3, [pc, #196]	; 1ae74 <flatcc_verify_error_string@@Base+0x30c>
   1adac:	add	r3, pc, r3
   1adb0:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1adb4:	ldr	r3, [pc, #188]	; 1ae78 <flatcc_verify_error_string@@Base+0x310>
   1adb8:	add	r3, pc, r3
   1adbc:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1adc0:	ldr	r3, [pc, #180]	; 1ae7c <flatcc_verify_error_string@@Base+0x314>
   1adc4:	add	r3, pc, r3
   1adc8:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1adcc:	ldr	r3, [pc, #172]	; 1ae80 <flatcc_verify_error_string@@Base+0x318>
   1add0:	add	r3, pc, r3
   1add4:	b	1ade0 <flatcc_verify_error_string@@Base+0x278>
   1add8:	ldr	r3, [pc, #164]	; 1ae84 <flatcc_verify_error_string@@Base+0x31c>
   1addc:	add	r3, pc, r3
   1ade0:	mov	r0, r3
   1ade4:	add	sp, fp, #0
   1ade8:	pop	{fp}		; (ldr fp, [sp], #4)
   1adec:	bx	lr
   1adf0:	andeq	r3, r0, r4, asr r0
   1adf4:	andeq	r3, r0, ip, asr #32
   1adf8:	andeq	r3, r0, r8, asr r0
   1adfc:	andeq	r3, r0, r0, rrx
   1ae00:	andeq	r3, r0, r0, ror r0
   1ae04:	andeq	r3, r0, ip, ror r0
   1ae08:	muleq	r0, r4, r0
   1ae0c:	andeq	r3, r0, r8, lsr #1
   1ae10:	strheq	r3, [r0], -r8
   1ae14:	andeq	r3, r0, r0, asr #1
   1ae18:	andeq	r3, r0, r8, asr #1
   1ae1c:	ldrdeq	r3, [r0], -r4
   1ae20:	ldrdeq	r3, [r0], -ip
   1ae24:	andeq	r3, r0, r8, ror #1
   1ae28:	strdeq	r3, [r0], -r8
   1ae2c:	andeq	r3, r0, r8, lsl #2
   1ae30:	andeq	r3, r0, r4, lsr #2
   1ae34:	andeq	r3, r0, r0, asr #2
   1ae38:	andeq	r3, r0, ip, asr r1
   1ae3c:	andeq	r3, r0, r4, ror #2
   1ae40:	andeq	r3, r0, r0, lsl #3
   1ae44:	andeq	r3, r0, ip, lsl #3
   1ae48:	andeq	r3, r0, ip, lsr #3
   1ae4c:	ldrdeq	r3, [r0], -r4
   1ae50:	strdeq	r3, [r0], -r4
   1ae54:	andeq	r3, r0, r4, lsl r2
   1ae58:	andeq	r3, r0, r8, lsr r2
   1ae5c:	andeq	r3, r0, r0, asr #4
   1ae60:	andeq	r3, r0, r0, asr r2
   1ae64:	andeq	r3, r0, ip, asr r2
   1ae68:	andeq	r3, r0, r8, ror r2
   1ae6c:	muleq	r0, r4, r2
   1ae70:	andeq	r3, r0, r0, lsr #5
   1ae74:			; <UNDEFINED> instruction: 0x000032bc
   1ae78:	ldrdeq	r3, [r0], -r8
   1ae7c:	andeq	r3, r0, r0, lsl #6
   1ae80:	andeq	r3, r0, ip, lsl r3
   1ae84:	andeq	r3, r0, r0, lsr #6
   1ae88:	push	{fp, lr}
   1ae8c:	add	fp, sp, #4
   1ae90:	sub	sp, sp, #8
   1ae94:	str	r0, [fp, #-8]
   1ae98:	str	r1, [fp, #-12]
   1ae9c:	ldr	r2, [fp, #-8]
   1aea0:	ldr	r3, [fp, #-12]
   1aea4:	add	r3, r2, r3
   1aea8:	mov	r0, r3
   1aeac:	bl	1aa68 <flatcc_emitter_copy_buffer@@Base+0x164>
   1aeb0:	mov	r3, r0
   1aeb4:	mov	r0, r3
   1aeb8:	sub	sp, fp, #4
   1aebc:	pop	{fp, pc}
   1aec0:	push	{fp, lr}
   1aec4:	add	fp, sp, #4
   1aec8:	sub	sp, sp, #16
   1aecc:	str	r0, [fp, #-16]
   1aed0:	mov	r3, #0
   1aed4:	str	r3, [fp, #-8]
   1aed8:	sub	r3, fp, #8
   1aedc:	mov	r2, #4
   1aee0:	ldr	r1, [fp, #-16]
   1aee4:	mov	r0, r3
   1aee8:	bl	12328 <strncpy@plt>
   1aeec:	ldr	r3, [fp, #-8]
   1aef0:	mov	r0, r3
   1aef4:	bl	1ab14 <flatcc_emitter_copy_buffer@@Base+0x210>
   1aef8:	mov	r3, r0
   1aefc:	mov	r0, r3
   1af00:	sub	sp, fp, #4
   1af04:	pop	{fp, pc}
   1af08:	push	{fp, lr}
   1af0c:	add	fp, sp, #4
   1af10:	sub	sp, sp, #8
   1af14:	str	r0, [fp, #-8]
   1af18:	str	r1, [fp, #-12]
   1af1c:	ldr	r2, [fp, #-8]
   1af20:	ldr	r3, [fp, #-12]
   1af24:	add	r3, r2, r3
   1af28:	mov	r0, r3
   1af2c:	bl	1ab38 <flatcc_emitter_copy_buffer@@Base+0x234>
   1af30:	mov	r3, r0
   1af34:	mov	r0, r3
   1af38:	sub	sp, fp, #4
   1af3c:	pop	{fp, pc}
   1af40:	push	{fp, lr}
   1af44:	add	fp, sp, #4
   1af48:	sub	sp, sp, #8
   1af4c:	str	r0, [fp, #-8]
   1af50:	str	r1, [fp, #-12]
   1af54:	ldr	r2, [fp, #-8]
   1af58:	ldr	r3, [fp, #-12]
   1af5c:	add	r3, r2, r3
   1af60:	mov	r0, r3
   1af64:	bl	1aac0 <flatcc_emitter_copy_buffer@@Base+0x1bc>
   1af68:	mov	r3, r0
   1af6c:	mov	r0, r3
   1af70:	sub	sp, fp, #4
   1af74:	pop	{fp, pc}
   1af78:	push	{fp}		; (str fp, [sp, #-4]!)
   1af7c:	add	fp, sp, #0
   1af80:	sub	sp, sp, #28
   1af84:	str	r0, [fp, #-16]
   1af88:	str	r1, [fp, #-20]	; 0xffffffec
   1af8c:	str	r2, [fp, #-24]	; 0xffffffe8
   1af90:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af98:	add	r3, r2, r3
   1af9c:	str	r3, [fp, #-8]
   1afa0:	ldr	r2, [fp, #-8]
   1afa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afa8:	cmp	r2, r3
   1afac:	bls	1afdc <flatcc_verify_error_string@@Base+0x474>
   1afb0:	ldr	r3, [fp, #-8]
   1afb4:	add	r2, r3, #4
   1afb8:	ldr	r3, [fp, #-16]
   1afbc:	cmp	r2, r3
   1afc0:	bhi	1afdc <flatcc_verify_error_string@@Base+0x474>
   1afc4:	ldr	r3, [fp, #-8]
   1afc8:	and	r3, r3, #3
   1afcc:	cmp	r3, #0
   1afd0:	bne	1afdc <flatcc_verify_error_string@@Base+0x474>
   1afd4:	mov	r3, #1
   1afd8:	b	1afe0 <flatcc_verify_error_string@@Base+0x478>
   1afdc:	mov	r3, #0
   1afe0:	mov	r0, r3
   1afe4:	add	sp, fp, #0
   1afe8:	pop	{fp}		; (ldr fp, [sp], #4)
   1afec:	bx	lr
   1aff0:	push	{fp}		; (str fp, [sp, #-4]!)
   1aff4:	add	fp, sp, #0
   1aff8:	sub	sp, sp, #28
   1affc:	str	r0, [fp, #-16]
   1b000:	str	r1, [fp, #-20]	; 0xffffffec
   1b004:	str	r2, [fp, #-24]	; 0xffffffe8
   1b008:	strh	r3, [fp, #-26]	; 0xffffffe6
   1b00c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b010:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b014:	add	r3, r2, r3
   1b018:	str	r3, [fp, #-8]
   1b01c:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1b020:	cmp	r3, #4
   1b024:	movcs	r3, r3
   1b028:	movcc	r3, #4
   1b02c:	strh	r3, [fp, #-26]	; 0xffffffe6
   1b030:	ldr	r2, [fp, #-8]
   1b034:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b038:	cmp	r2, r3
   1b03c:	bls	1b07c <flatcc_verify_error_string@@Base+0x514>
   1b040:	ldr	r3, [fp, #-8]
   1b044:	add	r2, r3, #4
   1b048:	ldr	r3, [fp, #-16]
   1b04c:	cmp	r2, r3
   1b050:	bhi	1b07c <flatcc_verify_error_string@@Base+0x514>
   1b054:	ldr	r3, [fp, #-8]
   1b058:	add	r2, r3, #4
   1b05c:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1b060:	sub	r3, r3, #1
   1b064:	orr	r3, r3, #3
   1b068:	and	r3, r3, r2
   1b06c:	cmp	r3, #0
   1b070:	bne	1b07c <flatcc_verify_error_string@@Base+0x514>
   1b074:	mov	r3, #1
   1b078:	b	1b080 <flatcc_verify_error_string@@Base+0x518>
   1b07c:	mov	r3, #0
   1b080:	mov	r0, r3
   1b084:	add	sp, fp, #0
   1b088:	pop	{fp}		; (ldr fp, [sp], #4)
   1b08c:	bx	lr
   1b090:	push	{fp}		; (str fp, [sp, #-4]!)
   1b094:	add	fp, sp, #0
   1b098:	sub	sp, sp, #36	; 0x24
   1b09c:	str	r0, [fp, #-24]	; 0xffffffe8
   1b0a0:	str	r1, [fp, #-28]	; 0xffffffe4
   1b0a4:	str	r2, [fp, #-32]	; 0xffffffe0
   1b0a8:	str	r3, [fp, #-36]	; 0xffffffdc
   1b0ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0b0:	cmp	r3, #0
   1b0b4:	beq	1b0d0 <flatcc_verify_error_string@@Base+0x568>
   1b0b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b0bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0c0:	add	r2, r2, r3
   1b0c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b0c8:	cmp	r2, r3
   1b0cc:	bls	1b0d8 <flatcc_verify_error_string@@Base+0x570>
   1b0d0:	mov	r3, #18
   1b0d4:	b	1b198 <flatcc_verify_error_string@@Base+0x630>
   1b0d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b0dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0e0:	add	r3, r2, r3
   1b0e4:	str	r3, [fp, #-28]	; 0xffffffe4
   1b0e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b0ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b0f0:	add	r2, r2, r3
   1b0f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b0f8:	cmp	r2, r3
   1b0fc:	movcs	r3, #1
   1b100:	movcc	r3, #0
   1b104:	uxtb	r3, r3
   1b108:	str	r3, [fp, #-8]
   1b10c:	ldr	r3, [fp, #-8]
   1b110:	cmp	r3, #0
   1b114:	bne	1b120 <flatcc_verify_error_string@@Base+0x5b8>
   1b118:	mov	r3, #10
   1b11c:	b	1b198 <flatcc_verify_error_string@@Base+0x630>
   1b120:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b124:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b128:	add	r2, r2, r3
   1b12c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b130:	cmp	r2, r3
   1b134:	movls	r3, #1
   1b138:	movhi	r3, #0
   1b13c:	uxtb	r3, r3
   1b140:	str	r3, [fp, #-12]
   1b144:	ldr	r3, [fp, #-12]
   1b148:	cmp	r3, #0
   1b14c:	bne	1b158 <flatcc_verify_error_string@@Base+0x5f0>
   1b150:	mov	r3, #9
   1b154:	b	1b198 <flatcc_verify_error_string@@Base+0x630>
   1b158:	ldrh	r3, [fp, #4]
   1b15c:	sub	r3, r3, #1
   1b160:	mov	r2, r3
   1b164:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b168:	and	r3, r3, r2
   1b16c:	cmp	r3, #0
   1b170:	moveq	r3, #1
   1b174:	movne	r3, #0
   1b178:	uxtb	r3, r3
   1b17c:	str	r3, [fp, #-16]
   1b180:	ldr	r3, [fp, #-16]
   1b184:	cmp	r3, #0
   1b188:	bne	1b194 <flatcc_verify_error_string@@Base+0x62c>
   1b18c:	mov	r3, #11
   1b190:	b	1b198 <flatcc_verify_error_string@@Base+0x630>
   1b194:	mov	r3, #0
   1b198:	mov	r0, r3
   1b19c:	add	sp, fp, #0
   1b1a0:	pop	{fp}		; (ldr fp, [sp], #4)
   1b1a4:	bx	lr
   1b1a8:	push	{fp, lr}
   1b1ac:	add	fp, sp, #4
   1b1b0:	sub	sp, sp, #16
   1b1b4:	str	r0, [fp, #-16]
   1b1b8:	mov	r3, r1
   1b1bc:	strh	r3, [fp, #-18]	; 0xffffffee
   1b1c0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b1c4:	add	r3, r3, #2
   1b1c8:	uxth	r3, r3
   1b1cc:	lsl	r3, r3, #1
   1b1d0:	strh	r3, [fp, #-6]
   1b1d4:	ldr	r3, [fp, #-16]
   1b1d8:	ldrh	r3, [r3, #22]
   1b1dc:	ldrh	r2, [fp, #-6]
   1b1e0:	cmp	r2, r3
   1b1e4:	bcc	1b1f0 <flatcc_verify_error_string@@Base+0x688>
   1b1e8:	mov	r3, #0
   1b1ec:	b	1b20c <flatcc_verify_error_string@@Base+0x6a4>
   1b1f0:	ldr	r3, [fp, #-16]
   1b1f4:	ldr	r3, [r3, #12]
   1b1f8:	ldrh	r2, [fp, #-6]
   1b1fc:	mov	r1, r2
   1b200:	mov	r0, r3
   1b204:	bl	1af40 <flatcc_verify_error_string@@Base+0x3d8>
   1b208:	mov	r3, r0
   1b20c:	mov	r0, r3
   1b210:	sub	sp, fp, #4
   1b214:	pop	{fp, pc}
   1b218:	push	{fp, lr}
   1b21c:	add	fp, sp, #4
   1b220:	sub	sp, sp, #16
   1b224:	str	r0, [fp, #-16]
   1b228:	mov	r3, r1
   1b22c:	strh	r3, [fp, #-18]	; 0xffffffee
   1b230:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b234:	mov	r1, r3
   1b238:	ldr	r0, [fp, #-16]
   1b23c:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1b240:	mov	r3, r0
   1b244:	strh	r3, [fp, #-6]
   1b248:	ldrh	r3, [fp, #-6]
   1b24c:	cmp	r3, #0
   1b250:	beq	1b274 <flatcc_verify_error_string@@Base+0x70c>
   1b254:	ldr	r3, [fp, #-16]
   1b258:	ldr	r2, [r3]
   1b25c:	ldr	r3, [fp, #-16]
   1b260:	ldr	r1, [r3, #16]
   1b264:	ldrh	r3, [fp, #-6]
   1b268:	add	r3, r1, r3
   1b26c:	add	r3, r2, r3
   1b270:	b	1b278 <flatcc_verify_error_string@@Base+0x710>
   1b274:	mov	r3, #0
   1b278:	mov	r0, r3
   1b27c:	sub	sp, fp, #4
   1b280:	pop	{fp, pc}
   1b284:	push	{fp, lr}
   1b288:	add	fp, sp, #4
   1b28c:	sub	sp, sp, #48	; 0x30
   1b290:	str	r0, [fp, #-40]	; 0xffffffd8
   1b294:	str	r2, [fp, #-48]	; 0xffffffd0
   1b298:	str	r3, [fp, #-52]	; 0xffffffcc
   1b29c:	strh	r1, [fp, #-42]	; 0xffffffd6
   1b2a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b2a4:	ldr	r3, [r3]
   1b2a8:	str	r3, [fp, #-8]
   1b2ac:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   1b2b0:	mov	r1, r3
   1b2b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b2b8:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1b2bc:	mov	r3, r0
   1b2c0:	strh	r3, [fp, #-10]
   1b2c4:	ldrh	r3, [fp, #-10]
   1b2c8:	cmp	r3, #0
   1b2cc:	bne	1b304 <flatcc_verify_error_string@@Base+0x79c>
   1b2d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b2d4:	cmp	r3, #0
   1b2d8:	moveq	r3, #1
   1b2dc:	movne	r3, #0
   1b2e0:	uxtb	r3, r3
   1b2e4:	str	r3, [fp, #-16]
   1b2e8:	ldr	r3, [fp, #-16]
   1b2ec:	cmp	r3, #0
   1b2f0:	bne	1b2fc <flatcc_verify_error_string@@Base+0x794>
   1b2f4:	mov	r3, #4
   1b2f8:	b	1b3cc <flatcc_verify_error_string@@Base+0x864>
   1b2fc:	mov	r3, #0
   1b300:	b	1b3cc <flatcc_verify_error_string@@Base+0x864>
   1b304:	ldrh	r3, [fp, #-10]
   1b308:	str	r3, [fp, #-20]	; 0xffffffec
   1b30c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b310:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b314:	add	r3, r2, r3
   1b318:	str	r3, [fp, #-24]	; 0xffffffe8
   1b31c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b320:	ldrh	r3, [r3, #20]
   1b324:	mov	r2, r3
   1b328:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b32c:	cmp	r2, r3
   1b330:	movcs	r3, #1
   1b334:	movcc	r3, #0
   1b338:	uxtb	r3, r3
   1b33c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b340:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b344:	cmp	r3, #0
   1b348:	bne	1b354 <flatcc_verify_error_string@@Base+0x7ec>
   1b34c:	mov	r3, #13
   1b350:	b	1b3cc <flatcc_verify_error_string@@Base+0x864>
   1b354:	mov	r3, #1
   1b358:	str	r3, [fp, #-32]	; 0xffffffe0
   1b35c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b360:	cmp	r3, #0
   1b364:	bne	1b370 <flatcc_verify_error_string@@Base+0x808>
   1b368:	mov	r3, #14
   1b36c:	b	1b3cc <flatcc_verify_error_string@@Base+0x864>
   1b370:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b374:	ldr	r2, [r3, #16]
   1b378:	ldr	r3, [fp, #-8]
   1b37c:	add	r3, r2, r3
   1b380:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b384:	add	r3, r2, r3
   1b388:	str	r3, [fp, #-20]	; 0xffffffec
   1b38c:	ldrh	r3, [fp, #4]
   1b390:	sub	r3, r3, #1
   1b394:	mov	r2, r3
   1b398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b39c:	and	r3, r3, r2
   1b3a0:	cmp	r3, #0
   1b3a4:	moveq	r3, #1
   1b3a8:	movne	r3, #0
   1b3ac:	uxtb	r3, r3
   1b3b0:	str	r3, [fp, #-36]	; 0xffffffdc
   1b3b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3b8:	cmp	r3, #0
   1b3bc:	bne	1b3c8 <flatcc_verify_error_string@@Base+0x860>
   1b3c0:	mov	r3, #12
   1b3c4:	b	1b3cc <flatcc_verify_error_string@@Base+0x864>
   1b3c8:	mov	r3, #0
   1b3cc:	mov	r0, r3
   1b3d0:	sub	sp, fp, #4
   1b3d4:	pop	{fp, pc}
   1b3d8:	push	{fp, lr}
   1b3dc:	add	fp, sp, #4
   1b3e0:	sub	sp, sp, #40	; 0x28
   1b3e4:	str	r0, [fp, #-32]	; 0xffffffe0
   1b3e8:	str	r2, [fp, #-40]	; 0xffffffd8
   1b3ec:	str	r3, [fp, #-44]	; 0xffffffd4
   1b3f0:	strh	r1, [fp, #-34]	; 0xffffffde
   1b3f4:	ldrh	r3, [fp, #-34]	; 0xffffffde
   1b3f8:	mov	r1, r3
   1b3fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b400:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1b404:	mov	r3, r0
   1b408:	strh	r3, [fp, #-6]
   1b40c:	ldrh	r3, [fp, #-6]
   1b410:	cmp	r3, #0
   1b414:	bne	1b440 <flatcc_verify_error_string@@Base+0x8d8>
   1b418:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b41c:	mov	r2, #0
   1b420:	str	r2, [r3]
   1b424:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b428:	cmp	r3, #0
   1b42c:	beq	1b438 <flatcc_verify_error_string@@Base+0x8d0>
   1b430:	mov	r3, #4
   1b434:	b	1b4fc <flatcc_verify_error_string@@Base+0x994>
   1b438:	mov	r3, #0
   1b43c:	b	1b4fc <flatcc_verify_error_string@@Base+0x994>
   1b440:	ldrh	r3, [fp, #-6]
   1b444:	str	r3, [fp, #-12]
   1b448:	ldr	r3, [fp, #-12]
   1b44c:	add	r3, r3, #4
   1b450:	str	r3, [fp, #-16]
   1b454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b458:	ldrh	r3, [r3, #20]
   1b45c:	mov	r2, r3
   1b460:	ldr	r3, [fp, #-16]
   1b464:	cmp	r2, r3
   1b468:	movcs	r3, #1
   1b46c:	movcc	r3, #0
   1b470:	uxtb	r3, r3
   1b474:	str	r3, [fp, #-20]	; 0xffffffec
   1b478:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b47c:	cmp	r3, #0
   1b480:	bne	1b48c <flatcc_verify_error_string@@Base+0x924>
   1b484:	mov	r3, #13
   1b488:	b	1b4fc <flatcc_verify_error_string@@Base+0x994>
   1b48c:	mov	r3, #1
   1b490:	str	r3, [fp, #-24]	; 0xffffffe8
   1b494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b498:	cmp	r3, #0
   1b49c:	bne	1b4a8 <flatcc_verify_error_string@@Base+0x940>
   1b4a0:	mov	r3, #14
   1b4a4:	b	1b4fc <flatcc_verify_error_string@@Base+0x994>
   1b4a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b4ac:	ldr	r3, [r3, #16]
   1b4b0:	ldr	r2, [fp, #-12]
   1b4b4:	add	r3, r2, r3
   1b4b8:	str	r3, [fp, #-12]
   1b4bc:	ldr	r3, [fp, #-12]
   1b4c0:	and	r3, r3, #3
   1b4c4:	cmp	r3, #0
   1b4c8:	moveq	r3, #1
   1b4cc:	movne	r3, #0
   1b4d0:	uxtb	r3, r3
   1b4d4:	str	r3, [fp, #-28]	; 0xffffffe4
   1b4d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b4dc:	cmp	r3, #0
   1b4e0:	bne	1b4ec <flatcc_verify_error_string@@Base+0x984>
   1b4e4:	mov	r3, #12
   1b4e8:	b	1b4fc <flatcc_verify_error_string@@Base+0x994>
   1b4ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b4f0:	ldr	r2, [fp, #-12]
   1b4f4:	str	r2, [r3]
   1b4f8:	mov	r3, #0
   1b4fc:	mov	r0, r3
   1b500:	sub	sp, fp, #4
   1b504:	pop	{fp, pc}
   1b508:	push	{fp, lr}
   1b50c:	add	fp, sp, #4
   1b510:	sub	sp, sp, #32
   1b514:	str	r0, [fp, #-24]	; 0xffffffe8
   1b518:	str	r1, [fp, #-28]	; 0xffffffe4
   1b51c:	str	r2, [fp, #-32]	; 0xffffffe0
   1b520:	str	r3, [fp, #-36]	; 0xffffffdc
   1b524:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b528:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b52c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b530:	bl	1af78 <flatcc_verify_error_string@@Base+0x410>
   1b534:	str	r0, [fp, #-8]
   1b538:	ldr	r3, [fp, #-8]
   1b53c:	cmp	r3, #0
   1b540:	bne	1b54c <flatcc_verify_error_string@@Base+0x9e4>
   1b544:	mov	r3, #17
   1b548:	b	1b5f8 <flatcc_verify_error_string@@Base+0xa90>
   1b54c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b550:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b554:	add	r3, r2, r3
   1b558:	str	r3, [fp, #-32]	; 0xffffffe0
   1b55c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b560:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b564:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1b568:	str	r0, [fp, #-12]
   1b56c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b570:	add	r3, r3, #4
   1b574:	str	r3, [fp, #-32]	; 0xffffffe0
   1b578:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b57c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b580:	sub	r2, r2, r3
   1b584:	ldr	r3, [fp, #-12]
   1b588:	add	r3, r3, #1
   1b58c:	cmp	r2, r3
   1b590:	movcs	r3, #1
   1b594:	movcc	r3, #0
   1b598:	uxtb	r3, r3
   1b59c:	str	r3, [fp, #-16]
   1b5a0:	ldr	r3, [fp, #-16]
   1b5a4:	cmp	r3, #0
   1b5a8:	bne	1b5b4 <flatcc_verify_error_string@@Base+0xa4c>
   1b5ac:	mov	r3, #8
   1b5b0:	b	1b5f8 <flatcc_verify_error_string@@Base+0xa90>
   1b5b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b5b8:	ldr	r3, [fp, #-12]
   1b5bc:	add	r3, r2, r3
   1b5c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b5c4:	add	r3, r2, r3
   1b5c8:	ldrb	r3, [r3]
   1b5cc:	cmp	r3, #0
   1b5d0:	moveq	r3, #1
   1b5d4:	movne	r3, #0
   1b5d8:	uxtb	r3, r3
   1b5dc:	str	r3, [fp, #-20]	; 0xffffffec
   1b5e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b5e4:	cmp	r3, #0
   1b5e8:	bne	1b5f4 <flatcc_verify_error_string@@Base+0xa8c>
   1b5ec:	mov	r3, #7
   1b5f0:	b	1b5f8 <flatcc_verify_error_string@@Base+0xa90>
   1b5f4:	mov	r3, #0
   1b5f8:	mov	r0, r3
   1b5fc:	sub	sp, fp, #4
   1b600:	pop	{fp, pc}
   1b604:	push	{fp, lr}
   1b608:	add	fp, sp, #4
   1b60c:	sub	sp, sp, #32
   1b610:	str	r0, [fp, #-24]	; 0xffffffe8
   1b614:	str	r1, [fp, #-28]	; 0xffffffe4
   1b618:	str	r2, [fp, #-32]	; 0xffffffe0
   1b61c:	str	r3, [fp, #-36]	; 0xffffffdc
   1b620:	ldrh	r3, [fp, #8]
   1b624:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b628:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b62c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b630:	bl	1aff0 <flatcc_verify_error_string@@Base+0x488>
   1b634:	str	r0, [fp, #-8]
   1b638:	ldr	r3, [fp, #-8]
   1b63c:	cmp	r3, #0
   1b640:	bne	1b64c <flatcc_verify_error_string@@Base+0xae4>
   1b644:	mov	r3, #16
   1b648:	b	1b6ec <flatcc_verify_error_string@@Base+0xb84>
   1b64c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b650:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b654:	add	r3, r2, r3
   1b658:	str	r3, [fp, #-32]	; 0xffffffe0
   1b65c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b664:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1b668:	str	r0, [fp, #-12]
   1b66c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b670:	add	r3, r3, #4
   1b674:	str	r3, [fp, #-32]	; 0xffffffe0
   1b678:	ldr	r2, [fp, #-12]
   1b67c:	ldr	r3, [fp, #12]
   1b680:	cmp	r2, r3
   1b684:	movls	r3, #1
   1b688:	movhi	r3, #0
   1b68c:	uxtb	r3, r3
   1b690:	str	r3, [fp, #-16]
   1b694:	ldr	r3, [fp, #-16]
   1b698:	cmp	r3, #0
   1b69c:	bne	1b6a8 <flatcc_verify_error_string@@Base+0xb40>
   1b6a0:	mov	r3, #25
   1b6a4:	b	1b6ec <flatcc_verify_error_string@@Base+0xb84>
   1b6a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b6ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b6b0:	sub	r2, r2, r3
   1b6b4:	ldr	r3, [fp, #-12]
   1b6b8:	ldr	r1, [fp, #4]
   1b6bc:	mul	r3, r1, r3
   1b6c0:	cmp	r2, r3
   1b6c4:	movcs	r3, #1
   1b6c8:	movcc	r3, #0
   1b6cc:	uxtb	r3, r3
   1b6d0:	str	r3, [fp, #-20]	; 0xffffffec
   1b6d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b6d8:	cmp	r3, #0
   1b6dc:	bne	1b6e8 <flatcc_verify_error_string@@Base+0xb80>
   1b6e0:	mov	r3, #26
   1b6e4:	b	1b6ec <flatcc_verify_error_string@@Base+0xb84>
   1b6e8:	mov	r3, #0
   1b6ec:	mov	r0, r3
   1b6f0:	sub	sp, fp, #4
   1b6f4:	pop	{fp, pc}
   1b6f8:	push	{fp, lr}
   1b6fc:	add	fp, sp, #4
   1b700:	sub	sp, sp, #40	; 0x28
   1b704:	str	r0, [fp, #-16]
   1b708:	str	r1, [fp, #-20]	; 0xffffffec
   1b70c:	str	r2, [fp, #-24]	; 0xffffffe8
   1b710:	str	r3, [fp, #-28]	; 0xffffffe4
   1b714:	mvn	r3, #-1073741824	; 0xc0000000
   1b718:	str	r3, [sp, #8]
   1b71c:	mov	r3, #4
   1b720:	str	r3, [sp, #4]
   1b724:	mov	r3, #4
   1b728:	str	r3, [sp]
   1b72c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b730:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b734:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b738:	ldr	r0, [fp, #-16]
   1b73c:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1b740:	mov	r3, r0
   1b744:	cmp	r3, #0
   1b748:	beq	1b780 <flatcc_verify_error_string@@Base+0xc18>
   1b74c:	mvn	r3, #-1073741824	; 0xc0000000
   1b750:	str	r3, [sp, #8]
   1b754:	mov	r3, #4
   1b758:	str	r3, [sp, #4]
   1b75c:	mov	r3, #4
   1b760:	str	r3, [sp]
   1b764:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b768:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b76c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b770:	ldr	r0, [fp, #-16]
   1b774:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1b778:	mov	r3, r0
   1b77c:	b	1b838 <flatcc_verify_error_string@@Base+0xcd0>
   1b780:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b784:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b788:	add	r3, r2, r3
   1b78c:	str	r3, [fp, #-24]	; 0xffffffe8
   1b790:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b794:	ldr	r0, [fp, #-16]
   1b798:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1b79c:	str	r0, [fp, #-12]
   1b7a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b7a4:	add	r3, r3, #4
   1b7a8:	str	r3, [fp, #-24]	; 0xffffffe8
   1b7ac:	mov	r3, #0
   1b7b0:	str	r3, [fp, #-8]
   1b7b4:	b	1b824 <flatcc_verify_error_string@@Base+0xcbc>
   1b7b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b7bc:	ldr	r0, [fp, #-16]
   1b7c0:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1b7c4:	mov	r3, r0
   1b7c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b7cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b7d0:	ldr	r0, [fp, #-16]
   1b7d4:	bl	1b508 <flatcc_verify_error_string@@Base+0x9a0>
   1b7d8:	mov	r3, r0
   1b7dc:	cmp	r3, #0
   1b7e0:	beq	1b80c <flatcc_verify_error_string@@Base+0xca4>
   1b7e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b7e8:	ldr	r0, [fp, #-16]
   1b7ec:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1b7f0:	mov	r3, r0
   1b7f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b7f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b7fc:	ldr	r0, [fp, #-16]
   1b800:	bl	1b508 <flatcc_verify_error_string@@Base+0x9a0>
   1b804:	mov	r3, r0
   1b808:	b	1b838 <flatcc_verify_error_string@@Base+0xcd0>
   1b80c:	ldr	r3, [fp, #-8]
   1b810:	add	r3, r3, #1
   1b814:	str	r3, [fp, #-8]
   1b818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b81c:	add	r3, r3, #4
   1b820:	str	r3, [fp, #-24]	; 0xffffffe8
   1b824:	ldr	r2, [fp, #-8]
   1b828:	ldr	r3, [fp, #-12]
   1b82c:	cmp	r2, r3
   1b830:	bcc	1b7b8 <flatcc_verify_error_string@@Base+0xc50>
   1b834:	mov	r3, #0
   1b838:	mov	r0, r3
   1b83c:	sub	sp, fp, #4
   1b840:	pop	{fp, pc}
   1b844:	push	{r4, fp, lr}
   1b848:	add	fp, sp, #8
   1b84c:	sub	sp, sp, #84	; 0x54
   1b850:	str	r0, [fp, #-80]	; 0xffffffb0
   1b854:	str	r1, [fp, #-84]	; 0xffffffac
   1b858:	str	r2, [fp, #-88]	; 0xffffffa8
   1b85c:	str	r3, [fp, #-92]	; 0xffffffa4
   1b860:	ldr	r3, [fp, #4]
   1b864:	sub	r3, r3, #1
   1b868:	str	r3, [fp, #-68]	; 0xffffffbc
   1b86c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1b870:	str	r3, [fp, #-16]
   1b874:	ldr	r3, [fp, #-16]
   1b878:	cmp	r3, #0
   1b87c:	bne	1b888 <flatcc_verify_error_string@@Base+0xd20>
   1b880:	mov	r3, #3
   1b884:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1b888:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1b88c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b890:	ldr	r0, [fp, #-84]	; 0xffffffac
   1b894:	bl	1af78 <flatcc_verify_error_string@@Base+0x410>
   1b898:	str	r0, [fp, #-20]	; 0xffffffec
   1b89c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b8a0:	cmp	r3, #0
   1b8a4:	bne	1b8b0 <flatcc_verify_error_string@@Base+0xd48>
   1b8a8:	mov	r3, #15
   1b8ac:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1b8b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b8b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b8b8:	add	r3, r2, r3
   1b8bc:	str	r3, [fp, #-60]	; 0xffffffc4
   1b8c0:	ldr	r4, [fp, #-60]	; 0xffffffc4
   1b8c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1b8c8:	mov	r1, r3
   1b8cc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b8d0:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1b8d4:	mov	r3, r0
   1b8d8:	sub	r3, r4, r3
   1b8dc:	str	r3, [fp, #-24]	; 0xffffffe8
   1b8e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b8e4:	cmp	r3, #0
   1b8e8:	blt	1b904 <flatcc_verify_error_string@@Base+0xd9c>
   1b8ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b8f0:	and	r3, r3, #1
   1b8f4:	cmp	r3, #0
   1b8f8:	bne	1b904 <flatcc_verify_error_string@@Base+0xd9c>
   1b8fc:	mov	r3, #1
   1b900:	b	1b908 <flatcc_verify_error_string@@Base+0xda0>
   1b904:	mov	r3, #0
   1b908:	str	r3, [fp, #-28]	; 0xffffffe4
   1b90c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b910:	cmp	r3, #0
   1b914:	bne	1b920 <flatcc_verify_error_string@@Base+0xdb8>
   1b918:	mov	r3, #29
   1b91c:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1b920:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b924:	add	r2, r3, #2
   1b928:	ldr	r3, [fp, #-84]	; 0xffffffac
   1b92c:	cmp	r2, r3
   1b930:	movls	r3, #1
   1b934:	movhi	r3, #0
   1b938:	uxtb	r3, r3
   1b93c:	str	r3, [fp, #-32]	; 0xffffffe0
   1b940:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b944:	cmp	r3, #0
   1b948:	bne	1b954 <flatcc_verify_error_string@@Base+0xdec>
   1b94c:	mov	r3, #27
   1b950:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1b954:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b958:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b95c:	bl	1af40 <flatcc_verify_error_string@@Base+0x3d8>
   1b960:	mov	r3, r0
   1b964:	strh	r3, [fp, #-54]	; 0xffffffca
   1b968:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1b96c:	mov	r2, r3
   1b970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b974:	add	r3, r2, r3
   1b978:	str	r3, [fp, #-36]	; 0xffffffdc
   1b97c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b980:	ldr	r3, [fp, #-84]	; 0xffffffac
   1b984:	cmp	r2, r3
   1b988:	bhi	1b9a4 <flatcc_verify_error_string@@Base+0xe3c>
   1b98c:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1b990:	and	r3, r3, #1
   1b994:	cmp	r3, #0
   1b998:	bne	1b9a4 <flatcc_verify_error_string@@Base+0xe3c>
   1b99c:	mov	r3, #1
   1b9a0:	b	1b9a8 <flatcc_verify_error_string@@Base+0xe40>
   1b9a4:	mov	r3, #0
   1b9a8:	str	r3, [fp, #-40]	; 0xffffffd8
   1b9ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b9b0:	cmp	r3, #0
   1b9b4:	bne	1b9c0 <flatcc_verify_error_string@@Base+0xe58>
   1b9b8:	mov	r3, #30
   1b9bc:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1b9c0:	mov	r3, #1
   1b9c4:	str	r3, [fp, #-44]	; 0xffffffd4
   1b9c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b9cc:	cmp	r3, #0
   1b9d0:	bne	1b9dc <flatcc_verify_error_string@@Base+0xe74>
   1b9d4:	mov	r3, #31
   1b9d8:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1b9dc:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1b9e0:	cmp	r3, #3
   1b9e4:	movhi	r3, #1
   1b9e8:	movls	r3, #0
   1b9ec:	uxtb	r3, r3
   1b9f0:	str	r3, [fp, #-48]	; 0xffffffd0
   1b9f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b9f8:	cmp	r3, #0
   1b9fc:	bne	1ba08 <flatcc_verify_error_string@@Base+0xea0>
   1ba00:	mov	r3, #28
   1ba04:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1ba08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba0c:	add	r3, r3, #2
   1ba10:	mov	r1, r3
   1ba14:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1ba18:	bl	1af40 <flatcc_verify_error_string@@Base+0x3d8>
   1ba1c:	mov	r3, r0
   1ba20:	strh	r3, [fp, #-56]	; 0xffffffc8
   1ba24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ba28:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ba2c:	sub	r3, r2, r3
   1ba30:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   1ba34:	cmp	r3, r2
   1ba38:	movcs	r3, #1
   1ba3c:	movcc	r3, #0
   1ba40:	uxtb	r3, r3
   1ba44:	str	r3, [fp, #-52]	; 0xffffffcc
   1ba48:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ba4c:	cmp	r3, #0
   1ba50:	bne	1ba5c <flatcc_verify_error_string@@Base+0xef4>
   1ba54:	mov	r3, #20
   1ba58:	b	1ba90 <flatcc_verify_error_string@@Base+0xf28>
   1ba5c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1ba60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba64:	add	r3, r2, r3
   1ba68:	str	r3, [fp, #-64]	; 0xffffffc0
   1ba6c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1ba70:	str	r3, [fp, #-76]	; 0xffffffb4
   1ba74:	ldr	r3, [fp, #-84]	; 0xffffffac
   1ba78:	str	r3, [fp, #-72]	; 0xffffffb8
   1ba7c:	sub	r2, fp, #76	; 0x4c
   1ba80:	ldr	r3, [fp, #8]
   1ba84:	mov	r0, r2
   1ba88:	blx	r3
   1ba8c:	mov	r3, r0
   1ba90:	mov	r0, r3
   1ba94:	sub	sp, fp, #8
   1ba98:	pop	{r4, fp, pc}
   1ba9c:	push	{fp, lr}
   1baa0:	add	fp, sp, #4
   1baa4:	sub	sp, sp, #48	; 0x30
   1baa8:	str	r0, [fp, #-24]	; 0xffffffe8
   1baac:	str	r1, [fp, #-28]	; 0xffffffe4
   1bab0:	str	r2, [fp, #-32]	; 0xffffffe0
   1bab4:	str	r3, [fp, #-36]	; 0xffffffdc
   1bab8:	ldr	r3, [fp, #4]
   1babc:	sub	r2, r3, #1
   1bac0:	str	r2, [fp, #4]
   1bac4:	cmp	r3, #0
   1bac8:	movgt	r3, #1
   1bacc:	movle	r3, #0
   1bad0:	uxtb	r3, r3
   1bad4:	str	r3, [fp, #-12]
   1bad8:	ldr	r3, [fp, #-12]
   1badc:	cmp	r3, #0
   1bae0:	bne	1baec <flatcc_verify_error_string@@Base+0xf84>
   1bae4:	mov	r3, #3
   1bae8:	b	1bc38 <flatcc_verify_error_string@@Base+0x10d0>
   1baec:	mvn	r3, #-1073741824	; 0xc0000000
   1baf0:	str	r3, [sp, #8]
   1baf4:	mov	r3, #4
   1baf8:	str	r3, [sp, #4]
   1bafc:	mov	r3, #4
   1bb00:	str	r3, [sp]
   1bb04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bb10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb14:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1bb18:	mov	r3, r0
   1bb1c:	cmp	r3, #0
   1bb20:	beq	1bb58 <flatcc_verify_error_string@@Base+0xff0>
   1bb24:	mvn	r3, #-1073741824	; 0xc0000000
   1bb28:	str	r3, [sp, #8]
   1bb2c:	mov	r3, #4
   1bb30:	str	r3, [sp, #4]
   1bb34:	mov	r3, #4
   1bb38:	str	r3, [sp]
   1bb3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb44:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bb48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb4c:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1bb50:	mov	r3, r0
   1bb54:	b	1bc38 <flatcc_verify_error_string@@Base+0x10d0>
   1bb58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb60:	add	r3, r2, r3
   1bb64:	str	r3, [fp, #-32]	; 0xffffffe0
   1bb68:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb70:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1bb74:	str	r0, [fp, #-16]
   1bb78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bb7c:	add	r3, r3, #4
   1bb80:	str	r3, [fp, #-32]	; 0xffffffe0
   1bb84:	mov	r3, #0
   1bb88:	str	r3, [fp, #-8]
   1bb8c:	b	1bc24 <flatcc_verify_error_string@@Base+0x10bc>
   1bb90:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb98:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1bb9c:	mov	r2, r0
   1bba0:	ldr	r3, [fp, #8]
   1bba4:	str	r3, [sp, #4]
   1bba8:	ldr	r3, [fp, #4]
   1bbac:	str	r3, [sp]
   1bbb0:	mov	r3, r2
   1bbb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bbb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bbbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbc0:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1bbc4:	mov	r3, r0
   1bbc8:	cmp	r3, #0
   1bbcc:	beq	1bc0c <flatcc_verify_error_string@@Base+0x10a4>
   1bbd0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bbd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbd8:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1bbdc:	mov	r2, r0
   1bbe0:	ldr	r3, [fp, #8]
   1bbe4:	str	r3, [sp, #4]
   1bbe8:	ldr	r3, [fp, #4]
   1bbec:	str	r3, [sp]
   1bbf0:	mov	r3, r2
   1bbf4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bbf8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bbfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bc00:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1bc04:	mov	r3, r0
   1bc08:	b	1bc38 <flatcc_verify_error_string@@Base+0x10d0>
   1bc0c:	ldr	r3, [fp, #-8]
   1bc10:	add	r3, r3, #1
   1bc14:	str	r3, [fp, #-8]
   1bc18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc1c:	add	r3, r3, #4
   1bc20:	str	r3, [fp, #-32]	; 0xffffffe0
   1bc24:	ldr	r2, [fp, #-8]
   1bc28:	ldr	r3, [fp, #-16]
   1bc2c:	cmp	r2, r3
   1bc30:	bcc	1bb90 <flatcc_verify_error_string@@Base+0x1028>
   1bc34:	mov	r3, #0
   1bc38:	mov	r0, r3
   1bc3c:	sub	sp, fp, #4
   1bc40:	pop	{fp, pc}
   1bc44:	push	{fp, lr}
   1bc48:	add	fp, sp, #4
   1bc4c:	sub	sp, sp, #88	; 0x58
   1bc50:	str	r0, [fp, #-64]	; 0xffffffc0
   1bc54:	str	r1, [fp, #-68]	; 0xffffffbc
   1bc58:	str	r2, [fp, #-72]	; 0xffffffb8
   1bc5c:	str	r3, [fp, #-76]	; 0xffffffb4
   1bc60:	ldr	r3, [fp, #12]
   1bc64:	sub	r2, r3, #1
   1bc68:	str	r2, [fp, #12]
   1bc6c:	cmp	r3, #0
   1bc70:	movgt	r3, #1
   1bc74:	movle	r3, #0
   1bc78:	uxtb	r3, r3
   1bc7c:	str	r3, [fp, #-12]
   1bc80:	ldr	r3, [fp, #-12]
   1bc84:	cmp	r3, #0
   1bc88:	bne	1bc94 <flatcc_verify_error_string@@Base+0x112c>
   1bc8c:	mov	r3, #3
   1bc90:	b	1be90 <flatcc_verify_error_string@@Base+0x1328>
   1bc94:	mvn	r3, #-1073741824	; 0xc0000000
   1bc98:	str	r3, [sp, #8]
   1bc9c:	mov	r3, #4
   1bca0:	str	r3, [sp, #4]
   1bca4:	mov	r3, #4
   1bca8:	str	r3, [sp]
   1bcac:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bcb0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bcb4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1bcb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bcbc:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1bcc0:	mov	r3, r0
   1bcc4:	cmp	r3, #0
   1bcc8:	beq	1bd00 <flatcc_verify_error_string@@Base+0x1198>
   1bccc:	mvn	r3, #-1073741824	; 0xc0000000
   1bcd0:	str	r3, [sp, #8]
   1bcd4:	mov	r3, #4
   1bcd8:	str	r3, [sp, #4]
   1bcdc:	mov	r3, #4
   1bce0:	str	r3, [sp]
   1bce4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bce8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bcec:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1bcf0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bcf4:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1bcf8:	mov	r3, r0
   1bcfc:	b	1be90 <flatcc_verify_error_string@@Base+0x1328>
   1bd00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bd04:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bd08:	add	r3, r2, r3
   1bd0c:	str	r3, [fp, #-72]	; 0xffffffb8
   1bd10:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1bd14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bd18:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1bd1c:	str	r0, [fp, #-16]
   1bd20:	ldr	r2, [fp, #-16]
   1bd24:	ldr	r3, [fp, #4]
   1bd28:	cmp	r2, r3
   1bd2c:	moveq	r3, #1
   1bd30:	movne	r3, #0
   1bd34:	uxtb	r3, r3
   1bd38:	str	r3, [fp, #-20]	; 0xffffffec
   1bd3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd40:	cmp	r3, #0
   1bd44:	bne	1bd50 <flatcc_verify_error_string@@Base+0x11e8>
   1bd48:	mov	r3, #34	; 0x22
   1bd4c:	b	1be90 <flatcc_verify_error_string@@Base+0x1328>
   1bd50:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1bd54:	add	r3, r3, #4
   1bd58:	str	r3, [fp, #-72]	; 0xffffffb8
   1bd5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1bd60:	str	r3, [fp, #-56]	; 0xffffffc8
   1bd64:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1bd68:	str	r3, [fp, #-52]	; 0xffffffcc
   1bd6c:	ldr	r3, [fp, #12]
   1bd70:	str	r3, [fp, #-48]	; 0xffffffd0
   1bd74:	mov	r3, #0
   1bd78:	str	r3, [fp, #-8]
   1bd7c:	b	1be7c <flatcc_verify_error_string@@Base+0x1314>
   1bd80:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1bd84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bd88:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1bd8c:	str	r0, [fp, #-24]	; 0xffffffe8
   1bd90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bd94:	cmp	r3, #0
   1bd98:	bne	1bdd4 <flatcc_verify_error_string@@Base+0x126c>
   1bd9c:	ldr	r2, [fp, #8]
   1bda0:	ldr	r3, [fp, #-8]
   1bda4:	add	r3, r2, r3
   1bda8:	ldrb	r3, [r3]
   1bdac:	cmp	r3, #0
   1bdb0:	moveq	r3, #1
   1bdb4:	movne	r3, #0
   1bdb8:	uxtb	r3, r3
   1bdbc:	str	r3, [fp, #-32]	; 0xffffffe0
   1bdc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bdc4:	cmp	r3, #0
   1bdc8:	bne	1be64 <flatcc_verify_error_string@@Base+0x12fc>
   1bdcc:	mov	r3, #32
   1bdd0:	b	1be90 <flatcc_verify_error_string@@Base+0x1328>
   1bdd4:	ldr	r2, [fp, #8]
   1bdd8:	ldr	r3, [fp, #-8]
   1bddc:	add	r3, r2, r3
   1bde0:	ldrb	r3, [r3]
   1bde4:	cmp	r3, #0
   1bde8:	movne	r3, #1
   1bdec:	moveq	r3, #0
   1bdf0:	uxtb	r3, r3
   1bdf4:	str	r3, [fp, #-28]	; 0xffffffe4
   1bdf8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bdfc:	cmp	r3, #0
   1be00:	bne	1be0c <flatcc_verify_error_string@@Base+0x12a4>
   1be04:	mov	r3, #33	; 0x21
   1be08:	b	1be90 <flatcc_verify_error_string@@Base+0x1328>
   1be0c:	ldr	r2, [fp, #8]
   1be10:	ldr	r3, [fp, #-8]
   1be14:	add	r3, r2, r3
   1be18:	ldrb	r3, [r3]
   1be1c:	strb	r3, [fp, #-44]	; 0xffffffd4
   1be20:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1be24:	str	r3, [fp, #-40]	; 0xffffffd8
   1be28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1be2c:	str	r3, [fp, #-36]	; 0xffffffdc
   1be30:	sub	r2, fp, #56	; 0x38
   1be34:	ldr	r3, [fp, #16]
   1be38:	mov	r0, r2
   1be3c:	blx	r3
   1be40:	mov	r3, r0
   1be44:	cmp	r3, #0
   1be48:	beq	1be64 <flatcc_verify_error_string@@Base+0x12fc>
   1be4c:	sub	r2, fp, #56	; 0x38
   1be50:	ldr	r3, [fp, #16]
   1be54:	mov	r0, r2
   1be58:	blx	r3
   1be5c:	mov	r3, r0
   1be60:	b	1be90 <flatcc_verify_error_string@@Base+0x1328>
   1be64:	ldr	r3, [fp, #-8]
   1be68:	add	r3, r3, #1
   1be6c:	str	r3, [fp, #-8]
   1be70:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1be74:	add	r3, r3, #4
   1be78:	str	r3, [fp, #-72]	; 0xffffffb8
   1be7c:	ldr	r2, [fp, #-8]
   1be80:	ldr	r3, [fp, #-16]
   1be84:	cmp	r2, r3
   1be88:	bcc	1bd80 <flatcc_verify_error_string@@Base+0x1218>
   1be8c:	mov	r3, #0
   1be90:	mov	r0, r3
   1be94:	sub	sp, fp, #4
   1be98:	pop	{fp, pc}

0001be9c <flatcc_verify_field@@Base>:
   1be9c:	push	{fp, lr}
   1bea0:	add	fp, sp, #4
   1bea4:	sub	sp, sp, #24
   1bea8:	str	r0, [fp, #-8]
   1beac:	str	r2, [fp, #-16]
   1beb0:	strh	r1, [fp, #-10]
   1beb4:	strh	r3, [fp, #-12]
   1beb8:	ldrh	r1, [fp, #-10]
   1bebc:	ldrh	r3, [fp, #-12]
   1bec0:	str	r3, [sp]
   1bec4:	ldr	r3, [fp, #-16]
   1bec8:	mov	r2, #0
   1becc:	ldr	r0, [fp, #-8]
   1bed0:	bl	1b284 <flatcc_verify_error_string@@Base+0x71c>
   1bed4:	mov	r3, r0
   1bed8:	cmp	r3, #0
   1bedc:	beq	1bf04 <flatcc_verify_field@@Base+0x68>
   1bee0:	ldrh	r1, [fp, #-10]
   1bee4:	ldrh	r3, [fp, #-12]
   1bee8:	str	r3, [sp]
   1beec:	ldr	r3, [fp, #-16]
   1bef0:	mov	r2, #0
   1bef4:	ldr	r0, [fp, #-8]
   1bef8:	bl	1b284 <flatcc_verify_error_string@@Base+0x71c>
   1befc:	mov	r3, r0
   1bf00:	b	1bf08 <flatcc_verify_field@@Base+0x6c>
   1bf04:	mov	r3, #0
   1bf08:	mov	r0, r3
   1bf0c:	sub	sp, fp, #4
   1bf10:	pop	{fp, pc}

0001bf14 <flatcc_verify_string_field@@Base>:
   1bf14:	push	{r4, r5, r6, fp, lr}
   1bf18:	add	fp, sp, #16
   1bf1c:	sub	sp, sp, #28
   1bf20:	str	r0, [fp, #-32]	; 0xffffffe0
   1bf24:	mov	r3, r1
   1bf28:	str	r2, [fp, #-40]	; 0xffffffd8
   1bf2c:	strh	r3, [fp, #-34]	; 0xffffffde
   1bf30:	sub	r3, fp, #28
   1bf34:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1bf38:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1bf3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bf40:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1bf44:	str	r0, [fp, #-24]	; 0xffffffe8
   1bf48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf4c:	cmp	r3, #0
   1bf50:	bne	1bf60 <flatcc_verify_string_field@@Base+0x4c>
   1bf54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf58:	cmp	r3, #0
   1bf5c:	bne	1bf68 <flatcc_verify_string_field@@Base+0x54>
   1bf60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf64:	b	1bfac <flatcc_verify_string_field@@Base+0x98>
   1bf68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf6c:	ldr	r4, [r3]
   1bf70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf74:	ldr	r5, [r3, #4]
   1bf78:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1bf7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf80:	ldr	r3, [r3]
   1bf84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bf88:	mov	r1, r2
   1bf8c:	mov	r0, r3
   1bf90:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1bf94:	mov	r3, r0
   1bf98:	mov	r2, r6
   1bf9c:	mov	r1, r5
   1bfa0:	mov	r0, r4
   1bfa4:	bl	1b508 <flatcc_verify_error_string@@Base+0x9a0>
   1bfa8:	mov	r3, r0
   1bfac:	mov	r0, r3
   1bfb0:	sub	sp, fp, #16
   1bfb4:	pop	{r4, r5, r6, fp, pc}

0001bfb8 <flatcc_verify_vector_field@@Base>:
   1bfb8:	push	{r4, r5, r6, fp, lr}
   1bfbc:	add	fp, sp, #16
   1bfc0:	sub	sp, sp, #44	; 0x2c
   1bfc4:	str	r0, [fp, #-32]	; 0xffffffe0
   1bfc8:	str	r2, [fp, #-40]	; 0xffffffd8
   1bfcc:	str	r3, [fp, #-44]	; 0xffffffd4
   1bfd0:	strh	r1, [fp, #-34]	; 0xffffffde
   1bfd4:	sub	r3, fp, #28
   1bfd8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1bfdc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1bfe0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bfe4:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1bfe8:	str	r0, [fp, #-24]	; 0xffffffe8
   1bfec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bff0:	cmp	r3, #0
   1bff4:	bne	1c004 <flatcc_verify_vector_field@@Base+0x4c>
   1bff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bffc:	cmp	r3, #0
   1c000:	bne	1c00c <flatcc_verify_vector_field@@Base+0x54>
   1c004:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c008:	b	1c06c <flatcc_verify_vector_field@@Base+0xb4>
   1c00c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c010:	ldr	r4, [r3]
   1c014:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c018:	ldr	r5, [r3, #4]
   1c01c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c020:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c024:	ldr	r3, [r3]
   1c028:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c02c:	mov	r1, r2
   1c030:	mov	r0, r3
   1c034:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c038:	mov	r2, r0
   1c03c:	ldr	r3, [fp, #8]
   1c040:	str	r3, [sp, #8]
   1c044:	ldrh	r3, [fp, #4]
   1c048:	str	r3, [sp, #4]
   1c04c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c050:	str	r3, [sp]
   1c054:	mov	r3, r2
   1c058:	mov	r2, r6
   1c05c:	mov	r1, r5
   1c060:	mov	r0, r4
   1c064:	bl	1b604 <flatcc_verify_error_string@@Base+0xa9c>
   1c068:	mov	r3, r0
   1c06c:	mov	r0, r3
   1c070:	sub	sp, fp, #16
   1c074:	pop	{r4, r5, r6, fp, pc}

0001c078 <flatcc_verify_string_vector_field@@Base>:
   1c078:	push	{r4, r5, r6, fp, lr}
   1c07c:	add	fp, sp, #16
   1c080:	sub	sp, sp, #28
   1c084:	str	r0, [fp, #-32]	; 0xffffffe0
   1c088:	mov	r3, r1
   1c08c:	str	r2, [fp, #-40]	; 0xffffffd8
   1c090:	strh	r3, [fp, #-34]	; 0xffffffde
   1c094:	sub	r3, fp, #28
   1c098:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c09c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c0a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c0a4:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1c0a8:	str	r0, [fp, #-24]	; 0xffffffe8
   1c0ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c0b0:	cmp	r3, #0
   1c0b4:	bne	1c0c4 <flatcc_verify_string_vector_field@@Base+0x4c>
   1c0b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c0bc:	cmp	r3, #0
   1c0c0:	bne	1c0cc <flatcc_verify_string_vector_field@@Base+0x54>
   1c0c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c0c8:	b	1c110 <flatcc_verify_string_vector_field@@Base+0x98>
   1c0cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c0d0:	ldr	r4, [r3]
   1c0d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c0d8:	ldr	r5, [r3, #4]
   1c0dc:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c0e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c0e4:	ldr	r3, [r3]
   1c0e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c0ec:	mov	r1, r2
   1c0f0:	mov	r0, r3
   1c0f4:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c0f8:	mov	r3, r0
   1c0fc:	mov	r2, r6
   1c100:	mov	r1, r5
   1c104:	mov	r0, r4
   1c108:	bl	1b6f8 <flatcc_verify_error_string@@Base+0xb90>
   1c10c:	mov	r3, r0
   1c110:	mov	r0, r3
   1c114:	sub	sp, fp, #16
   1c118:	pop	{r4, r5, r6, fp, pc}

0001c11c <flatcc_verify_table_field@@Base>:
   1c11c:	push	{r4, r5, r6, fp, lr}
   1c120:	add	fp, sp, #16
   1c124:	sub	sp, sp, #36	; 0x24
   1c128:	str	r0, [fp, #-32]	; 0xffffffe0
   1c12c:	str	r2, [fp, #-40]	; 0xffffffd8
   1c130:	str	r3, [fp, #-44]	; 0xffffffd4
   1c134:	strh	r1, [fp, #-34]	; 0xffffffde
   1c138:	sub	r3, fp, #28
   1c13c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c140:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c144:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c148:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1c14c:	str	r0, [fp, #-24]	; 0xffffffe8
   1c150:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c154:	cmp	r3, #0
   1c158:	bne	1c168 <flatcc_verify_table_field@@Base+0x4c>
   1c15c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c160:	cmp	r3, #0
   1c164:	bne	1c170 <flatcc_verify_table_field@@Base+0x54>
   1c168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c16c:	b	1c1cc <flatcc_verify_table_field@@Base+0xb0>
   1c170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c174:	ldr	r4, [r3]
   1c178:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c17c:	ldr	r5, [r3, #4]
   1c180:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c184:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c188:	ldr	r3, [r3]
   1c18c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c190:	mov	r1, r2
   1c194:	mov	r0, r3
   1c198:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c19c:	mov	r1, r0
   1c1a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c1a4:	ldr	r3, [r3, #8]
   1c1a8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c1ac:	str	r2, [sp, #4]
   1c1b0:	str	r3, [sp]
   1c1b4:	mov	r3, r1
   1c1b8:	mov	r2, r6
   1c1bc:	mov	r1, r5
   1c1c0:	mov	r0, r4
   1c1c4:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1c1c8:	mov	r3, r0
   1c1cc:	mov	r0, r3
   1c1d0:	sub	sp, fp, #16
   1c1d4:	pop	{r4, r5, r6, fp, pc}

0001c1d8 <flatcc_verify_table_vector_field@@Base>:
   1c1d8:	push	{r4, r5, r6, fp, lr}
   1c1dc:	add	fp, sp, #16
   1c1e0:	sub	sp, sp, #36	; 0x24
   1c1e4:	str	r0, [fp, #-32]	; 0xffffffe0
   1c1e8:	str	r2, [fp, #-40]	; 0xffffffd8
   1c1ec:	str	r3, [fp, #-44]	; 0xffffffd4
   1c1f0:	strh	r1, [fp, #-34]	; 0xffffffde
   1c1f4:	sub	r3, fp, #28
   1c1f8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c1fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c200:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c204:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1c208:	str	r0, [fp, #-24]	; 0xffffffe8
   1c20c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c210:	cmp	r3, #0
   1c214:	bne	1c224 <flatcc_verify_table_vector_field@@Base+0x4c>
   1c218:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c21c:	cmp	r3, #0
   1c220:	bne	1c22c <flatcc_verify_table_vector_field@@Base+0x54>
   1c224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c228:	b	1c288 <flatcc_verify_table_vector_field@@Base+0xb0>
   1c22c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c230:	ldr	r4, [r3]
   1c234:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c238:	ldr	r5, [r3, #4]
   1c23c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c240:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c244:	ldr	r3, [r3]
   1c248:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c24c:	mov	r1, r2
   1c250:	mov	r0, r3
   1c254:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c258:	mov	r1, r0
   1c25c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c260:	ldr	r3, [r3, #8]
   1c264:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c268:	str	r2, [sp, #4]
   1c26c:	str	r3, [sp]
   1c270:	mov	r3, r1
   1c274:	mov	r2, r6
   1c278:	mov	r1, r5
   1c27c:	mov	r0, r4
   1c280:	bl	1ba9c <flatcc_verify_error_string@@Base+0xf34>
   1c284:	mov	r3, r0
   1c288:	mov	r0, r3
   1c28c:	sub	sp, fp, #16
   1c290:	pop	{r4, r5, r6, fp, pc}

0001c294 <flatcc_verify_union_table@@Base>:
   1c294:	push	{fp, lr}
   1c298:	add	fp, sp, #4
   1c29c:	sub	sp, sp, #16
   1c2a0:	str	r0, [fp, #-8]
   1c2a4:	str	r1, [fp, #-12]
   1c2a8:	ldr	r3, [fp, #-8]
   1c2ac:	ldr	r0, [r3]
   1c2b0:	ldr	r3, [fp, #-8]
   1c2b4:	ldr	r1, [r3, #4]
   1c2b8:	ldr	r3, [fp, #-8]
   1c2bc:	ldr	ip, [r3, #16]
   1c2c0:	ldr	r3, [fp, #-8]
   1c2c4:	ldr	lr, [r3, #20]
   1c2c8:	ldr	r3, [fp, #-8]
   1c2cc:	ldr	r3, [r3, #8]
   1c2d0:	ldr	r2, [fp, #-12]
   1c2d4:	str	r2, [sp, #4]
   1c2d8:	str	r3, [sp]
   1c2dc:	mov	r3, lr
   1c2e0:	mov	r2, ip
   1c2e4:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1c2e8:	mov	r3, r0
   1c2ec:	mov	r0, r3
   1c2f0:	sub	sp, fp, #4
   1c2f4:	pop	{fp, pc}

0001c2f8 <flatcc_verify_union_struct@@Base>:
   1c2f8:	push	{fp, lr}
   1c2fc:	add	fp, sp, #4
   1c300:	sub	sp, sp, #24
   1c304:	str	r0, [fp, #-8]
   1c308:	str	r1, [fp, #-12]
   1c30c:	mov	r3, r2
   1c310:	strh	r3, [fp, #-14]
   1c314:	ldr	r3, [fp, #-8]
   1c318:	ldr	r0, [r3, #4]
   1c31c:	ldr	r3, [fp, #-8]
   1c320:	ldr	r1, [r3, #16]
   1c324:	ldr	r3, [fp, #-8]
   1c328:	ldr	r2, [r3, #20]
   1c32c:	ldrh	r3, [fp, #-14]
   1c330:	str	r3, [sp]
   1c334:	ldr	r3, [fp, #-12]
   1c338:	bl	1b090 <flatcc_verify_error_string@@Base+0x528>
   1c33c:	mov	r3, r0
   1c340:	mov	r0, r3
   1c344:	sub	sp, fp, #4
   1c348:	pop	{fp, pc}

0001c34c <flatcc_verify_union_string@@Base>:
   1c34c:	push	{fp, lr}
   1c350:	add	fp, sp, #4
   1c354:	sub	sp, sp, #8
   1c358:	str	r0, [fp, #-8]
   1c35c:	ldr	r3, [fp, #-8]
   1c360:	ldr	r0, [r3]
   1c364:	ldr	r3, [fp, #-8]
   1c368:	ldr	r1, [r3, #4]
   1c36c:	ldr	r3, [fp, #-8]
   1c370:	ldr	r2, [r3, #16]
   1c374:	ldr	r3, [fp, #-8]
   1c378:	ldr	r3, [r3, #20]
   1c37c:	bl	1b508 <flatcc_verify_error_string@@Base+0x9a0>
   1c380:	mov	r3, r0
   1c384:	mov	r0, r3
   1c388:	sub	sp, fp, #4
   1c38c:	pop	{fp, pc}

0001c390 <flatcc_verify_buffer_header@@Base>:
   1c390:	push	{fp, lr}
   1c394:	add	fp, sp, #4
   1c398:	sub	sp, sp, #40	; 0x28
   1c39c:	str	r0, [fp, #-32]	; 0xffffffe0
   1c3a0:	str	r1, [fp, #-36]	; 0xffffffdc
   1c3a4:	str	r2, [fp, #-40]	; 0xffffffd8
   1c3a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c3ac:	and	r3, r3, #3
   1c3b0:	cmp	r3, #0
   1c3b4:	moveq	r3, #1
   1c3b8:	movne	r3, #0
   1c3bc:	uxtb	r3, r3
   1c3c0:	str	r3, [fp, #-8]
   1c3c4:	ldr	r3, [fp, #-8]
   1c3c8:	cmp	r3, #0
   1c3cc:	bne	1c3d8 <flatcc_verify_buffer_header@@Base+0x48>
   1c3d0:	mov	r3, #5
   1c3d4:	b	1c49c <flatcc_verify_buffer_header@@Base+0x10c>
   1c3d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c3dc:	cmn	r3, #9
   1c3e0:	movls	r3, #1
   1c3e4:	movhi	r3, #0
   1c3e8:	uxtb	r3, r3
   1c3ec:	str	r3, [fp, #-12]
   1c3f0:	ldr	r3, [fp, #-12]
   1c3f4:	cmp	r3, #0
   1c3f8:	bne	1c404 <flatcc_verify_buffer_header@@Base+0x74>
   1c3fc:	mov	r3, #6
   1c400:	b	1c49c <flatcc_verify_buffer_header@@Base+0x10c>
   1c404:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c408:	cmp	r3, #7
   1c40c:	movhi	r3, #1
   1c410:	movls	r3, #0
   1c414:	uxtb	r3, r3
   1c418:	str	r3, [fp, #-16]
   1c41c:	ldr	r3, [fp, #-16]
   1c420:	cmp	r3, #0
   1c424:	bne	1c430 <flatcc_verify_buffer_header@@Base+0xa0>
   1c428:	mov	r3, #1
   1c42c:	b	1c49c <flatcc_verify_buffer_header@@Base+0x10c>
   1c430:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c434:	cmp	r3, #0
   1c438:	beq	1c498 <flatcc_verify_buffer_header@@Base+0x108>
   1c43c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c440:	bl	1aec0 <flatcc_verify_error_string@@Base+0x358>
   1c444:	str	r0, [fp, #-20]	; 0xffffffec
   1c448:	mov	r1, #4
   1c44c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c450:	bl	1af08 <flatcc_verify_error_string@@Base+0x3a0>
   1c454:	str	r0, [fp, #-24]	; 0xffffffe8
   1c458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c45c:	cmp	r3, #0
   1c460:	beq	1c474 <flatcc_verify_buffer_header@@Base+0xe4>
   1c464:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c46c:	cmp	r2, r3
   1c470:	bne	1c47c <flatcc_verify_buffer_header@@Base+0xec>
   1c474:	mov	r3, #1
   1c478:	b	1c480 <flatcc_verify_buffer_header@@Base+0xf0>
   1c47c:	mov	r3, #0
   1c480:	str	r3, [fp, #-28]	; 0xffffffe4
   1c484:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c488:	cmp	r3, #0
   1c48c:	bne	1c498 <flatcc_verify_buffer_header@@Base+0x108>
   1c490:	mov	r3, #2
   1c494:	b	1c49c <flatcc_verify_buffer_header@@Base+0x10c>
   1c498:	mov	r3, #0
   1c49c:	mov	r0, r3
   1c4a0:	sub	sp, fp, #4
   1c4a4:	pop	{fp, pc}

0001c4a8 <flatcc_verify_typed_buffer_header@@Base>:
   1c4a8:	push	{fp, lr}
   1c4ac:	add	fp, sp, #4
   1c4b0:	sub	sp, sp, #40	; 0x28
   1c4b4:	str	r0, [fp, #-32]	; 0xffffffe0
   1c4b8:	str	r1, [fp, #-36]	; 0xffffffdc
   1c4bc:	str	r2, [fp, #-40]	; 0xffffffd8
   1c4c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c4c4:	and	r3, r3, #3
   1c4c8:	cmp	r3, #0
   1c4cc:	moveq	r3, #1
   1c4d0:	movne	r3, #0
   1c4d4:	uxtb	r3, r3
   1c4d8:	str	r3, [fp, #-8]
   1c4dc:	ldr	r3, [fp, #-8]
   1c4e0:	cmp	r3, #0
   1c4e4:	bne	1c4f0 <flatcc_verify_typed_buffer_header@@Base+0x48>
   1c4e8:	mov	r3, #5
   1c4ec:	b	1c5b0 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c4f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c4f4:	cmn	r3, #9
   1c4f8:	movls	r3, #1
   1c4fc:	movhi	r3, #0
   1c500:	uxtb	r3, r3
   1c504:	str	r3, [fp, #-12]
   1c508:	ldr	r3, [fp, #-12]
   1c50c:	cmp	r3, #0
   1c510:	bne	1c51c <flatcc_verify_typed_buffer_header@@Base+0x74>
   1c514:	mov	r3, #6
   1c518:	b	1c5b0 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c51c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c520:	cmp	r3, #7
   1c524:	movhi	r3, #1
   1c528:	movls	r3, #0
   1c52c:	uxtb	r3, r3
   1c530:	str	r3, [fp, #-16]
   1c534:	ldr	r3, [fp, #-16]
   1c538:	cmp	r3, #0
   1c53c:	bne	1c548 <flatcc_verify_typed_buffer_header@@Base+0xa0>
   1c540:	mov	r3, #1
   1c544:	b	1c5b0 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c548:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c54c:	cmp	r3, #0
   1c550:	beq	1c5ac <flatcc_verify_typed_buffer_header@@Base+0x104>
   1c554:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c558:	str	r3, [fp, #-20]	; 0xffffffec
   1c55c:	mov	r1, #4
   1c560:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c564:	bl	1af08 <flatcc_verify_error_string@@Base+0x3a0>
   1c568:	str	r0, [fp, #-24]	; 0xffffffe8
   1c56c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c570:	cmp	r3, #0
   1c574:	beq	1c588 <flatcc_verify_typed_buffer_header@@Base+0xe0>
   1c578:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c57c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c580:	cmp	r2, r3
   1c584:	bne	1c590 <flatcc_verify_typed_buffer_header@@Base+0xe8>
   1c588:	mov	r3, #1
   1c58c:	b	1c594 <flatcc_verify_typed_buffer_header@@Base+0xec>
   1c590:	mov	r3, #0
   1c594:	str	r3, [fp, #-28]	; 0xffffffe4
   1c598:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c59c:	cmp	r3, #0
   1c5a0:	bne	1c5ac <flatcc_verify_typed_buffer_header@@Base+0x104>
   1c5a4:	mov	r3, #2
   1c5a8:	b	1c5b0 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c5ac:	mov	r3, #0
   1c5b0:	mov	r0, r3
   1c5b4:	sub	sp, fp, #4
   1c5b8:	pop	{fp, pc}

0001c5bc <flatcc_verify_struct_as_root@@Base>:
   1c5bc:	push	{fp, lr}
   1c5c0:	add	fp, sp, #4
   1c5c4:	sub	sp, sp, #24
   1c5c8:	str	r0, [fp, #-8]
   1c5cc:	str	r1, [fp, #-12]
   1c5d0:	str	r2, [fp, #-16]
   1c5d4:	str	r3, [fp, #-20]	; 0xffffffec
   1c5d8:	ldr	r2, [fp, #-16]
   1c5dc:	ldr	r1, [fp, #-12]
   1c5e0:	ldr	r0, [fp, #-8]
   1c5e4:	bl	1c390 <flatcc_verify_buffer_header@@Base>
   1c5e8:	mov	r3, r0
   1c5ec:	cmp	r3, #0
   1c5f0:	beq	1c60c <flatcc_verify_struct_as_root@@Base+0x50>
   1c5f4:	ldr	r2, [fp, #-16]
   1c5f8:	ldr	r1, [fp, #-12]
   1c5fc:	ldr	r0, [fp, #-8]
   1c600:	bl	1c390 <flatcc_verify_buffer_header@@Base>
   1c604:	mov	r3, r0
   1c608:	b	1c638 <flatcc_verify_struct_as_root@@Base+0x7c>
   1c60c:	mov	r1, #0
   1c610:	ldr	r0, [fp, #-8]
   1c614:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c618:	mov	r2, r0
   1c61c:	ldrh	r3, [fp, #4]
   1c620:	str	r3, [sp]
   1c624:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c628:	mov	r1, #0
   1c62c:	ldr	r0, [fp, #-12]
   1c630:	bl	1b090 <flatcc_verify_error_string@@Base+0x528>
   1c634:	mov	r3, r0
   1c638:	mov	r0, r3
   1c63c:	sub	sp, fp, #4
   1c640:	pop	{fp, pc}

0001c644 <flatcc_verify_struct_as_typed_root@@Base>:
   1c644:	push	{fp, lr}
   1c648:	add	fp, sp, #4
   1c64c:	sub	sp, sp, #24
   1c650:	str	r0, [fp, #-8]
   1c654:	str	r1, [fp, #-12]
   1c658:	str	r2, [fp, #-16]
   1c65c:	str	r3, [fp, #-20]	; 0xffffffec
   1c660:	ldr	r2, [fp, #-16]
   1c664:	ldr	r1, [fp, #-12]
   1c668:	ldr	r0, [fp, #-8]
   1c66c:	bl	1c4a8 <flatcc_verify_typed_buffer_header@@Base>
   1c670:	mov	r3, r0
   1c674:	cmp	r3, #0
   1c678:	beq	1c694 <flatcc_verify_struct_as_typed_root@@Base+0x50>
   1c67c:	ldr	r2, [fp, #-16]
   1c680:	ldr	r1, [fp, #-12]
   1c684:	ldr	r0, [fp, #-8]
   1c688:	bl	1c4a8 <flatcc_verify_typed_buffer_header@@Base>
   1c68c:	mov	r3, r0
   1c690:	b	1c6c0 <flatcc_verify_struct_as_typed_root@@Base+0x7c>
   1c694:	mov	r1, #0
   1c698:	ldr	r0, [fp, #-8]
   1c69c:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c6a0:	mov	r2, r0
   1c6a4:	ldrh	r3, [fp, #4]
   1c6a8:	str	r3, [sp]
   1c6ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c6b0:	mov	r1, #0
   1c6b4:	ldr	r0, [fp, #-12]
   1c6b8:	bl	1b090 <flatcc_verify_error_string@@Base+0x528>
   1c6bc:	mov	r3, r0
   1c6c0:	mov	r0, r3
   1c6c4:	sub	sp, fp, #4
   1c6c8:	pop	{fp, pc}

0001c6cc <flatcc_verify_table_as_root@@Base>:
   1c6cc:	push	{fp, lr}
   1c6d0:	add	fp, sp, #4
   1c6d4:	sub	sp, sp, #24
   1c6d8:	str	r0, [fp, #-8]
   1c6dc:	str	r1, [fp, #-12]
   1c6e0:	str	r2, [fp, #-16]
   1c6e4:	str	r3, [fp, #-20]	; 0xffffffec
   1c6e8:	ldr	r2, [fp, #-16]
   1c6ec:	ldr	r1, [fp, #-12]
   1c6f0:	ldr	r0, [fp, #-8]
   1c6f4:	bl	1c390 <flatcc_verify_buffer_header@@Base>
   1c6f8:	mov	r3, r0
   1c6fc:	cmp	r3, #0
   1c700:	beq	1c71c <flatcc_verify_table_as_root@@Base+0x50>
   1c704:	ldr	r2, [fp, #-16]
   1c708:	ldr	r1, [fp, #-12]
   1c70c:	ldr	r0, [fp, #-8]
   1c710:	bl	1c390 <flatcc_verify_buffer_header@@Base>
   1c714:	mov	r3, r0
   1c718:	b	1c754 <flatcc_verify_table_as_root@@Base+0x88>
   1c71c:	mov	r1, #0
   1c720:	ldr	r0, [fp, #-8]
   1c724:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c728:	mov	r2, r0
   1c72c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c730:	str	r3, [sp, #4]
   1c734:	mov	r3, #100	; 0x64
   1c738:	str	r3, [sp]
   1c73c:	mov	r3, r2
   1c740:	mov	r2, #0
   1c744:	ldr	r1, [fp, #-12]
   1c748:	ldr	r0, [fp, #-8]
   1c74c:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1c750:	mov	r3, r0
   1c754:	mov	r0, r3
   1c758:	sub	sp, fp, #4
   1c75c:	pop	{fp, pc}

0001c760 <flatcc_verify_table_as_typed_root@@Base>:
   1c760:	push	{fp, lr}
   1c764:	add	fp, sp, #4
   1c768:	sub	sp, sp, #24
   1c76c:	str	r0, [fp, #-8]
   1c770:	str	r1, [fp, #-12]
   1c774:	str	r2, [fp, #-16]
   1c778:	str	r3, [fp, #-20]	; 0xffffffec
   1c77c:	ldr	r2, [fp, #-16]
   1c780:	ldr	r1, [fp, #-12]
   1c784:	ldr	r0, [fp, #-8]
   1c788:	bl	1c4a8 <flatcc_verify_typed_buffer_header@@Base>
   1c78c:	mov	r3, r0
   1c790:	cmp	r3, #0
   1c794:	beq	1c7b0 <flatcc_verify_table_as_typed_root@@Base+0x50>
   1c798:	ldr	r2, [fp, #-16]
   1c79c:	ldr	r1, [fp, #-12]
   1c7a0:	ldr	r0, [fp, #-8]
   1c7a4:	bl	1c4a8 <flatcc_verify_typed_buffer_header@@Base>
   1c7a8:	mov	r3, r0
   1c7ac:	b	1c7e8 <flatcc_verify_table_as_typed_root@@Base+0x88>
   1c7b0:	mov	r1, #0
   1c7b4:	ldr	r0, [fp, #-8]
   1c7b8:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c7bc:	mov	r2, r0
   1c7c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c7c4:	str	r3, [sp, #4]
   1c7c8:	mov	r3, #100	; 0x64
   1c7cc:	str	r3, [sp]
   1c7d0:	mov	r3, r2
   1c7d4:	mov	r2, #0
   1c7d8:	ldr	r1, [fp, #-12]
   1c7dc:	ldr	r0, [fp, #-8]
   1c7e0:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1c7e4:	mov	r3, r0
   1c7e8:	mov	r0, r3
   1c7ec:	sub	sp, fp, #4
   1c7f0:	pop	{fp, pc}

0001c7f4 <flatcc_verify_struct_as_nested_root@@Base>:
   1c7f4:	push	{fp, lr}
   1c7f8:	add	fp, sp, #4
   1c7fc:	sub	sp, sp, #32
   1c800:	str	r0, [fp, #-16]
   1c804:	str	r2, [fp, #-24]	; 0xffffffe8
   1c808:	str	r3, [fp, #-28]	; 0xffffffe4
   1c80c:	strh	r1, [fp, #-18]	; 0xffffffee
   1c810:	ldrh	r2, [fp, #8]
   1c814:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c818:	mvn	r3, #0
   1c81c:	str	r3, [sp, #4]
   1c820:	mov	r3, #1
   1c824:	str	r3, [sp]
   1c828:	mov	r3, r2
   1c82c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c830:	ldr	r0, [fp, #-16]
   1c834:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1c838:	mov	r3, r0
   1c83c:	cmp	r3, #0
   1c840:	beq	1c874 <flatcc_verify_struct_as_nested_root@@Base+0x80>
   1c844:	ldrh	r2, [fp, #8]
   1c848:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c84c:	mvn	r3, #0
   1c850:	str	r3, [sp, #4]
   1c854:	mov	r3, #1
   1c858:	str	r3, [sp]
   1c85c:	mov	r3, r2
   1c860:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c864:	ldr	r0, [fp, #-16]
   1c868:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1c86c:	mov	r3, r0
   1c870:	b	1c8f4 <flatcc_verify_struct_as_nested_root@@Base+0x100>
   1c874:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1c878:	mov	r1, r3
   1c87c:	ldr	r0, [fp, #-16]
   1c880:	bl	1b218 <flatcc_verify_error_string@@Base+0x6b0>
   1c884:	str	r0, [fp, #-8]
   1c888:	ldr	r3, [fp, #-8]
   1c88c:	cmp	r3, #0
   1c890:	bne	1c89c <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   1c894:	mov	r3, #0
   1c898:	b	1c8f4 <flatcc_verify_struct_as_nested_root@@Base+0x100>
   1c89c:	mov	r1, #0
   1c8a0:	ldr	r0, [fp, #-8]
   1c8a4:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c8a8:	mov	r2, r0
   1c8ac:	ldr	r3, [fp, #-8]
   1c8b0:	add	r3, r2, r3
   1c8b4:	str	r3, [fp, #-8]
   1c8b8:	mov	r1, #0
   1c8bc:	ldr	r0, [fp, #-8]
   1c8c0:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c8c4:	str	r0, [fp, #-12]
   1c8c8:	ldr	r3, [fp, #-8]
   1c8cc:	add	r3, r3, #4
   1c8d0:	str	r3, [fp, #-8]
   1c8d4:	ldrh	r3, [fp, #8]
   1c8d8:	str	r3, [sp]
   1c8dc:	ldr	r3, [fp, #4]
   1c8e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c8e4:	ldr	r1, [fp, #-12]
   1c8e8:	ldr	r0, [fp, #-8]
   1c8ec:	bl	1c5bc <flatcc_verify_struct_as_root@@Base>
   1c8f0:	mov	r3, r0
   1c8f4:	mov	r0, r3
   1c8f8:	sub	sp, fp, #4
   1c8fc:	pop	{fp, pc}

0001c900 <flatcc_verify_table_as_nested_root@@Base>:
   1c900:	push	{fp, lr}
   1c904:	add	fp, sp, #4
   1c908:	sub	sp, sp, #32
   1c90c:	str	r0, [fp, #-16]
   1c910:	str	r2, [fp, #-24]	; 0xffffffe8
   1c914:	str	r3, [fp, #-28]	; 0xffffffe4
   1c918:	strh	r1, [fp, #-18]	; 0xffffffee
   1c91c:	ldrh	r2, [fp, #4]
   1c920:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c924:	mvn	r3, #0
   1c928:	str	r3, [sp, #4]
   1c92c:	mov	r3, #1
   1c930:	str	r3, [sp]
   1c934:	mov	r3, r2
   1c938:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c93c:	ldr	r0, [fp, #-16]
   1c940:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1c944:	mov	r3, r0
   1c948:	cmp	r3, #0
   1c94c:	beq	1c980 <flatcc_verify_table_as_nested_root@@Base+0x80>
   1c950:	ldrh	r2, [fp, #4]
   1c954:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c958:	mvn	r3, #0
   1c95c:	str	r3, [sp, #4]
   1c960:	mov	r3, #1
   1c964:	str	r3, [sp]
   1c968:	mov	r3, r2
   1c96c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c970:	ldr	r0, [fp, #-16]
   1c974:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1c978:	mov	r3, r0
   1c97c:	b	1ca50 <flatcc_verify_table_as_nested_root@@Base+0x150>
   1c980:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1c984:	mov	r1, r3
   1c988:	ldr	r0, [fp, #-16]
   1c98c:	bl	1b218 <flatcc_verify_error_string@@Base+0x6b0>
   1c990:	str	r0, [fp, #-8]
   1c994:	ldr	r3, [fp, #-8]
   1c998:	cmp	r3, #0
   1c99c:	bne	1c9a8 <flatcc_verify_table_as_nested_root@@Base+0xa8>
   1c9a0:	mov	r3, #0
   1c9a4:	b	1ca50 <flatcc_verify_table_as_nested_root@@Base+0x150>
   1c9a8:	mov	r1, #0
   1c9ac:	ldr	r0, [fp, #-8]
   1c9b0:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c9b4:	mov	r2, r0
   1c9b8:	ldr	r3, [fp, #-8]
   1c9bc:	add	r3, r2, r3
   1c9c0:	str	r3, [fp, #-8]
   1c9c4:	mov	r1, #0
   1c9c8:	ldr	r0, [fp, #-8]
   1c9cc:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1c9d0:	str	r0, [fp, #-12]
   1c9d4:	ldr	r3, [fp, #-8]
   1c9d8:	add	r3, r3, #4
   1c9dc:	str	r3, [fp, #-8]
   1c9e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c9e4:	ldr	r1, [fp, #-12]
   1c9e8:	ldr	r0, [fp, #-8]
   1c9ec:	bl	1c390 <flatcc_verify_buffer_header@@Base>
   1c9f0:	mov	r3, r0
   1c9f4:	cmp	r3, #0
   1c9f8:	beq	1ca14 <flatcc_verify_table_as_nested_root@@Base+0x114>
   1c9fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ca00:	ldr	r1, [fp, #-12]
   1ca04:	ldr	r0, [fp, #-8]
   1ca08:	bl	1c390 <flatcc_verify_buffer_header@@Base>
   1ca0c:	mov	r3, r0
   1ca10:	b	1ca50 <flatcc_verify_table_as_nested_root@@Base+0x150>
   1ca14:	mov	r1, #0
   1ca18:	ldr	r0, [fp, #-8]
   1ca1c:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1ca20:	mov	r1, r0
   1ca24:	ldr	r3, [fp, #-16]
   1ca28:	ldr	r3, [r3, #8]
   1ca2c:	ldr	r2, [fp, #8]
   1ca30:	str	r2, [sp, #4]
   1ca34:	str	r3, [sp]
   1ca38:	mov	r3, r1
   1ca3c:	mov	r2, #0
   1ca40:	ldr	r1, [fp, #-12]
   1ca44:	ldr	r0, [fp, #-8]
   1ca48:	bl	1b844 <flatcc_verify_error_string@@Base+0xcdc>
   1ca4c:	mov	r3, r0
   1ca50:	mov	r0, r3
   1ca54:	sub	sp, fp, #4
   1ca58:	pop	{fp, pc}

0001ca5c <flatcc_verify_union_field@@Base>:
   1ca5c:	push	{fp, lr}
   1ca60:	add	fp, sp, #4
   1ca64:	sub	sp, sp, #80	; 0x50
   1ca68:	str	r0, [fp, #-64]	; 0xffffffc0
   1ca6c:	str	r2, [fp, #-72]	; 0xffffffb8
   1ca70:	str	r3, [fp, #-76]	; 0xffffffb4
   1ca74:	strh	r1, [fp, #-66]	; 0xffffffbe
   1ca78:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1ca7c:	sub	r3, r3, #1
   1ca80:	uxth	r3, r3
   1ca84:	mov	r1, r3
   1ca88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ca8c:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1ca90:	mov	r3, r0
   1ca94:	strh	r3, [fp, #-6]
   1ca98:	ldrh	r3, [fp, #-6]
   1ca9c:	cmp	r3, #0
   1caa0:	bne	1cb1c <flatcc_verify_union_field@@Base+0xc0>
   1caa4:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1caa8:	mov	r1, r3
   1caac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cab0:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1cab4:	mov	r3, r0
   1cab8:	strh	r3, [fp, #-8]
   1cabc:	ldrh	r3, [fp, #-8]
   1cac0:	cmp	r3, #0
   1cac4:	moveq	r3, #1
   1cac8:	movne	r3, #0
   1cacc:	uxtb	r3, r3
   1cad0:	str	r3, [fp, #-12]
   1cad4:	ldr	r3, [fp, #-12]
   1cad8:	cmp	r3, #0
   1cadc:	bne	1cae8 <flatcc_verify_union_field@@Base+0x8c>
   1cae0:	mov	r3, #23
   1cae4:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cae8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1caec:	cmp	r3, #0
   1caf0:	moveq	r3, #1
   1caf4:	movne	r3, #0
   1caf8:	uxtb	r3, r3
   1cafc:	str	r3, [fp, #-16]
   1cb00:	ldr	r3, [fp, #-16]
   1cb04:	cmp	r3, #0
   1cb08:	bne	1cb14 <flatcc_verify_union_field@@Base+0xb8>
   1cb0c:	mov	r3, #21
   1cb10:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cb14:	mov	r3, #0
   1cb18:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cb1c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1cb20:	sub	r3, r3, #1
   1cb24:	uxth	r1, r3
   1cb28:	mov	r3, #1
   1cb2c:	str	r3, [sp]
   1cb30:	mov	r3, #1
   1cb34:	mov	r2, #0
   1cb38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb3c:	bl	1b284 <flatcc_verify_error_string@@Base+0x71c>
   1cb40:	mov	r3, r0
   1cb44:	cmp	r3, #0
   1cb48:	beq	1cb78 <flatcc_verify_union_field@@Base+0x11c>
   1cb4c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1cb50:	sub	r3, r3, #1
   1cb54:	uxth	r1, r3
   1cb58:	mov	r3, #1
   1cb5c:	str	r3, [sp]
   1cb60:	mov	r3, #1
   1cb64:	mov	r2, #0
   1cb68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb6c:	bl	1b284 <flatcc_verify_error_string@@Base+0x71c>
   1cb70:	mov	r3, r0
   1cb74:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cb78:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1cb7c:	mov	r1, r3
   1cb80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb84:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1cb88:	mov	r3, r0
   1cb8c:	strh	r3, [fp, #-8]
   1cb90:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cb94:	ldr	r2, [r3]
   1cb98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cb9c:	ldr	r1, [r3, #16]
   1cba0:	ldrh	r3, [fp, #-6]
   1cba4:	add	r3, r1, r3
   1cba8:	add	r3, r2, r3
   1cbac:	str	r3, [fp, #-20]	; 0xffffffec
   1cbb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cbb4:	ldrb	r3, [r3]
   1cbb8:	cmp	r3, #0
   1cbbc:	bne	1cbcc <flatcc_verify_union_field@@Base+0x170>
   1cbc0:	ldrh	r3, [fp, #-8]
   1cbc4:	cmp	r3, #0
   1cbc8:	bne	1cbd4 <flatcc_verify_union_field@@Base+0x178>
   1cbcc:	mov	r3, #1
   1cbd0:	b	1cbd8 <flatcc_verify_union_field@@Base+0x17c>
   1cbd4:	mov	r3, #0
   1cbd8:	str	r3, [fp, #-24]	; 0xffffffe8
   1cbdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cbe0:	cmp	r3, #0
   1cbe4:	bne	1cbf0 <flatcc_verify_union_field@@Base+0x194>
   1cbe8:	mov	r3, #24
   1cbec:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cbf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cbf4:	ldrb	r3, [r3]
   1cbf8:	cmp	r3, #0
   1cbfc:	bne	1cc08 <flatcc_verify_union_field@@Base+0x1ac>
   1cc00:	mov	r3, #0
   1cc04:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cc08:	sub	r3, fp, #32
   1cc0c:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   1cc10:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1cc14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cc18:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1cc1c:	str	r0, [fp, #-28]	; 0xffffffe4
   1cc20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cc24:	cmp	r3, #0
   1cc28:	bne	1cc38 <flatcc_verify_union_field@@Base+0x1dc>
   1cc2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc30:	cmp	r3, #0
   1cc34:	bne	1cc40 <flatcc_verify_union_field@@Base+0x1e4>
   1cc38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cc3c:	b	1ccac <flatcc_verify_union_field@@Base+0x250>
   1cc40:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc44:	ldr	r3, [r3]
   1cc48:	str	r3, [fp, #-56]	; 0xffffffc8
   1cc4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc50:	ldr	r3, [r3, #4]
   1cc54:	str	r3, [fp, #-52]	; 0xffffffcc
   1cc58:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc5c:	ldr	r3, [r3, #8]
   1cc60:	str	r3, [fp, #-48]	; 0xffffffd0
   1cc64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc68:	str	r3, [fp, #-40]	; 0xffffffd8
   1cc6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc70:	ldr	r3, [r3]
   1cc74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1cc78:	mov	r1, r2
   1cc7c:	mov	r0, r3
   1cc80:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1cc84:	mov	r3, r0
   1cc88:	str	r3, [fp, #-36]	; 0xffffffdc
   1cc8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cc90:	ldrb	r3, [r3]
   1cc94:	strb	r3, [fp, #-44]	; 0xffffffd4
   1cc98:	sub	r2, fp, #56	; 0x38
   1cc9c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1cca0:	mov	r0, r2
   1cca4:	blx	r3
   1cca8:	mov	r3, r0
   1ccac:	mov	r0, r3
   1ccb0:	sub	sp, fp, #4
   1ccb4:	pop	{fp, pc}

0001ccb8 <flatcc_verify_union_vector_field@@Base>:
   1ccb8:	push	{r4, r5, r6, fp, lr}
   1ccbc:	add	fp, sp, #16
   1ccc0:	sub	sp, sp, #68	; 0x44
   1ccc4:	str	r0, [fp, #-56]	; 0xffffffc8
   1ccc8:	str	r2, [fp, #-64]	; 0xffffffc0
   1cccc:	str	r3, [fp, #-68]	; 0xffffffbc
   1ccd0:	strh	r1, [fp, #-58]	; 0xffffffc6
   1ccd4:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1ccd8:	sub	r3, r3, #1
   1ccdc:	uxth	r3, r3
   1cce0:	mov	r1, r3
   1cce4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cce8:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1ccec:	mov	r3, r0
   1ccf0:	strh	r3, [fp, #-22]	; 0xffffffea
   1ccf4:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1ccf8:	cmp	r3, #0
   1ccfc:	bne	1cd50 <flatcc_verify_union_vector_field@@Base+0x98>
   1cd00:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cd04:	mov	r1, r3
   1cd08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cd0c:	bl	1b1a8 <flatcc_verify_error_string@@Base+0x640>
   1cd10:	mov	r3, r0
   1cd14:	strh	r3, [fp, #-24]	; 0xffffffe8
   1cd18:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   1cd1c:	cmp	r3, #0
   1cd20:	bne	1cd50 <flatcc_verify_union_vector_field@@Base+0x98>
   1cd24:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cd28:	cmp	r3, #0
   1cd2c:	moveq	r3, #1
   1cd30:	movne	r3, #0
   1cd34:	uxtb	r3, r3
   1cd38:	str	r3, [fp, #-28]	; 0xffffffe4
   1cd3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cd40:	cmp	r3, #0
   1cd44:	bne	1cd50 <flatcc_verify_union_vector_field@@Base+0x98>
   1cd48:	mov	r3, #22
   1cd4c:	b	1ced0 <flatcc_verify_union_vector_field@@Base+0x218>
   1cd50:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cd54:	sub	r3, r3, #1
   1cd58:	uxth	r1, r3
   1cd5c:	mvn	r3, #0
   1cd60:	str	r3, [sp, #4]
   1cd64:	mov	r3, #1
   1cd68:	str	r3, [sp]
   1cd6c:	mov	r3, #1
   1cd70:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1cd74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cd78:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1cd7c:	mov	r3, r0
   1cd80:	cmp	r3, #0
   1cd84:	beq	1cdbc <flatcc_verify_union_vector_field@@Base+0x104>
   1cd88:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cd8c:	sub	r3, r3, #1
   1cd90:	uxth	r1, r3
   1cd94:	mvn	r3, #0
   1cd98:	str	r3, [sp, #4]
   1cd9c:	mov	r3, #1
   1cda0:	str	r3, [sp]
   1cda4:	mov	r3, #1
   1cda8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1cdac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cdb0:	bl	1bfb8 <flatcc_verify_vector_field@@Base>
   1cdb4:	mov	r3, r0
   1cdb8:	b	1ced0 <flatcc_verify_union_vector_field@@Base+0x218>
   1cdbc:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cdc0:	sub	r3, r3, #1
   1cdc4:	uxth	r3, r3
   1cdc8:	mov	r1, r3
   1cdcc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cdd0:	bl	1b218 <flatcc_verify_error_string@@Base+0x6b0>
   1cdd4:	str	r0, [fp, #-32]	; 0xffffffe0
   1cdd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cddc:	cmp	r3, #0
   1cde0:	bne	1cdec <flatcc_verify_union_vector_field@@Base+0x134>
   1cde4:	mov	r3, #0
   1cde8:	b	1ced0 <flatcc_verify_union_vector_field@@Base+0x218>
   1cdec:	mov	r1, #0
   1cdf0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cdf4:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1cdf8:	mov	r2, r0
   1cdfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce00:	add	r3, r2, r3
   1ce04:	str	r3, [fp, #-32]	; 0xffffffe0
   1ce08:	mov	r1, #0
   1ce0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce10:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1ce14:	str	r0, [fp, #-36]	; 0xffffffdc
   1ce18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce1c:	add	r3, r3, #4
   1ce20:	str	r3, [fp, #-32]	; 0xffffffe0
   1ce24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce28:	str	r3, [fp, #-40]	; 0xffffffd8
   1ce2c:	sub	r3, fp, #48	; 0x30
   1ce30:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   1ce34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ce38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ce3c:	bl	1b3d8 <flatcc_verify_error_string@@Base+0x870>
   1ce40:	str	r0, [fp, #-44]	; 0xffffffd4
   1ce44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ce48:	cmp	r3, #0
   1ce4c:	bne	1ce5c <flatcc_verify_union_vector_field@@Base+0x1a4>
   1ce50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ce54:	cmp	r3, #0
   1ce58:	bne	1ce64 <flatcc_verify_union_vector_field@@Base+0x1ac>
   1ce5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ce60:	b	1ced0 <flatcc_verify_union_vector_field@@Base+0x218>
   1ce64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce68:	ldr	r4, [r3]
   1ce6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce70:	ldr	r5, [r3, #4]
   1ce74:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1ce78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce7c:	ldr	r3, [r3]
   1ce80:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ce84:	mov	r1, r2
   1ce88:	mov	r0, r3
   1ce8c:	bl	1ae88 <flatcc_verify_error_string@@Base+0x320>
   1ce90:	mov	r1, r0
   1ce94:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce98:	ldr	r3, [r3, #8]
   1ce9c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1cea0:	str	r2, [sp, #12]
   1cea4:	str	r3, [sp, #8]
   1cea8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1ceac:	str	r3, [sp, #4]
   1ceb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ceb4:	str	r3, [sp]
   1ceb8:	mov	r3, r1
   1cebc:	mov	r2, r6
   1cec0:	mov	r1, r5
   1cec4:	mov	r0, r4
   1cec8:	bl	1bc44 <flatcc_verify_error_string@@Base+0x10dc>
   1cecc:	mov	r3, r0
   1ced0:	mov	r0, r3
   1ced4:	sub	sp, fp, #16
   1ced8:	pop	{r4, r5, r6, fp, pc}

0001cedc <__libc_csu_init@@Base>:
   1cedc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cee0:	mov	r7, r0
   1cee4:	ldr	r6, [pc, #72]	; 1cf34 <__libc_csu_init@@Base+0x58>
   1cee8:	ldr	r5, [pc, #72]	; 1cf38 <__libc_csu_init@@Base+0x5c>
   1ceec:	add	r6, pc, r6
   1cef0:	add	r5, pc, r5
   1cef4:	sub	r6, r6, r5
   1cef8:	mov	r8, r1
   1cefc:	mov	r9, r2
   1cf00:	bl	12290 <free@plt-0x20>
   1cf04:	asrs	r6, r6, #2
   1cf08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf0c:	mov	r4, #0
   1cf10:	add	r4, r4, #1
   1cf14:	ldr	r3, [r5], #4
   1cf18:	mov	r2, r9
   1cf1c:	mov	r1, r8
   1cf20:	mov	r0, r7
   1cf24:	blx	r3
   1cf28:	cmp	r6, r4
   1cf2c:	bne	1cf10 <__libc_csu_init@@Base+0x34>
   1cf30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf34:	andeq	r2, r1, ip, lsl r0
   1cf38:	andeq	r2, r1, r4, lsl r0

0001cf3c <__libc_csu_fini@@Base>:
   1cf3c:	bx	lr

Disassembly of section .fini:

0001cf40 <.fini>:
   1cf40:	push	{r3, lr}
   1cf44:	pop	{r3, pc}
