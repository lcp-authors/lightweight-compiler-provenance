
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	1299c <__assert_fail@plt+0x1798>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	fp, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <fputs_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <raise@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <strcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <fflush@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <ferror@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <_exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <memcpy@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <__strtoull_internal@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <mbsinit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <strtold@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <fwrite_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <memcmp@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <fputc_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <iswprint@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <__fxstat64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__fpending@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <mbrtowc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <error@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <strtof@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <puts@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #28]!

00011060 <malloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #20]!

0001106c <__libc_start_main@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #12]!

00011078 <__vfprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #4]!

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <strchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <__sprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <__cxa_atexit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <setvbuf@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <memset@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <fgetc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__printf_chk@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <strtod@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <__overflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <__fread_unlocked_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <localeconv@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <clearerr_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <fopen64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <bindtextdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <fread_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <strncmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <abort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <__snprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <__assert_fail@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

Disassembly of section .text:

00011210 <.text>:
   11210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11214:	mov	r5, r1
   11218:	strd	r6, [sp, #8]
   1121c:	mov	r6, r0
   11220:	strd	r8, [sp, #16]
   11224:	strd	sl, [sp, #24]
   11228:	str	lr, [sp, #32]
   1122c:	sub	sp, sp, #84	; 0x54
   11230:	ldr	r0, [r1]
   11234:	bl	15c68 <__assert_fail@plt+0x4a64>
   11238:	movw	r1, #43936	; 0xaba0
   1123c:	movt	r1, #1
   11240:	mov	r0, #6
   11244:	bl	11174 <setlocale@plt>
   11248:	movw	r1, #44748	; 0xaecc
   1124c:	movt	r1, #1
   11250:	movw	r0, #44580	; 0xae24
   11254:	movt	r0, #1
   11258:	bl	111c8 <bindtextdomain@plt>
   1125c:	movw	r0, #44580	; 0xae24
   11260:	movt	r0, #1
   11264:	bl	10fdc <textdomain@plt>
   11268:	movw	r0, #21868	; 0x556c
   1126c:	movt	r0, #1
   11270:	bl	19af8 <__assert_fail@plt+0x88f4>
   11274:	ldr	r3, [pc, #4000]	; 1221c <__assert_fail@plt+0x1018>
   11278:	mov	r1, #0
   1127c:	add	r2, r3, #36	; 0x24
   11280:	str	r1, [r3, #4]!
   11284:	cmp	r2, r3
   11288:	bne	11280 <__assert_fail@plt+0x7c>
   1128c:	mov	r1, #1
   11290:	mov	r2, #2
   11294:	movw	r4, #49552	; 0xc190
   11298:	movt	r4, #2
   1129c:	mov	ip, #4
   112a0:	mov	r3, r4
   112a4:	mov	r0, #5
   112a8:	str	r1, [r4, #64]	; 0x40
   112ac:	add	r1, r4, #128	; 0x80
   112b0:	str	r2, [r4, #68]	; 0x44
   112b4:	mov	r2, #0
   112b8:	str	ip, [r4, #76]	; 0x4c
   112bc:	str	r0, [r3, #92]!	; 0x5c
   112c0:	str	r2, [r3, #4]!
   112c4:	cmp	r1, r3
   112c8:	bne	112c0 <__assert_fail@plt+0xbc>
   112cc:	ldr	sl, [pc, #3944]	; 1223c <__assert_fail@plt+0x1038>
   112d0:	movw	r3, #10836	; 0x2a54
   112d4:	movt	r3, #1
   112d8:	mov	ip, r3
   112dc:	mov	r3, #7
   112e0:	mov	r9, #0
   112e4:	mov	r1, #6
   112e8:	mov	r0, #8
   112ec:	str	r3, [r4]
   112f0:	mov	r7, r9
   112f4:	mov	fp, #1
   112f8:	add	r8, sp, #64	; 0x40
   112fc:	str	r9, [sp, #20]
   11300:	str	r3, [r4, #128]	; 0x80
   11304:	mov	r3, r4
   11308:	str	r0, [r4, #4]
   1130c:	strb	r2, [r4, #26]
   11310:	str	r9, [sp, #32]
   11314:	mov	r9, r3
   11318:	str	r2, [r4, #36]	; 0x24
   1131c:	str	ip, [sp, #36]	; 0x24
   11320:	str	r2, [r4, #40]	; 0x28
   11324:	str	ip, [r4, #44]	; 0x2c
   11328:	add	ip, sl, #244	; 0xf4
   1132c:	str	r2, [r4, #56]	; 0x38
   11330:	str	r1, [r4, #112]	; 0x70
   11334:	mov	r4, r6
   11338:	str	ip, [sp, #24]
   1133c:	mvn	ip, #0
   11340:	mov	r3, sl
   11344:	ldr	r2, [pc, #3796]	; 12220 <__assert_fail@plt+0x101c>
   11348:	mov	r1, r5
   1134c:	mov	r0, r4
   11350:	str	r8, [sp]
   11354:	str	ip, [sp, #64]	; 0x40
   11358:	bl	1109c <getopt_long@plt>
   1135c:	cmn	r0, #1
   11360:	beq	11bac <__assert_fail@plt+0x9a8>
   11364:	add	r0, r0, #3
   11368:	cmp	r0, #260	; 0x104
   1136c:	ldrls	pc, [pc, r0, lsl #2]
   11370:	b	11c9c <__assert_fail@plt+0xa98>
   11374:	andeq	r1, r1, r4, asr fp
   11378:	andeq	r2, r1, r8, asr r4
   1137c:	muleq	r1, ip, ip
   11380:	muleq	r1, ip, ip
   11384:	muleq	r1, ip, ip
   11388:	muleq	r1, ip, ip
   1138c:	muleq	r1, ip, ip
   11390:	muleq	r1, ip, ip
   11394:	muleq	r1, ip, ip
   11398:	muleq	r1, ip, ip
   1139c:	muleq	r1, ip, ip
   113a0:	muleq	r1, ip, ip
   113a4:	muleq	r1, ip, ip
   113a8:	muleq	r1, ip, ip
   113ac:	muleq	r1, ip, ip
   113b0:	muleq	r1, ip, ip
   113b4:	muleq	r1, ip, ip
   113b8:	muleq	r1, ip, ip
   113bc:	muleq	r1, ip, ip
   113c0:	muleq	r1, ip, ip
   113c4:	muleq	r1, ip, ip
   113c8:	muleq	r1, ip, ip
   113cc:	muleq	r1, ip, ip
   113d0:	muleq	r1, ip, ip
   113d4:	muleq	r1, ip, ip
   113d8:	muleq	r1, ip, ip
   113dc:	muleq	r1, ip, ip
   113e0:	muleq	r1, ip, ip
   113e4:	muleq	r1, ip, ip
   113e8:	muleq	r1, ip, ip
   113ec:	muleq	r1, ip, ip
   113f0:	muleq	r1, ip, ip
   113f4:	muleq	r1, ip, ip
   113f8:	muleq	r1, ip, ip
   113fc:	muleq	r1, ip, ip
   11400:	muleq	r1, ip, ip
   11404:	muleq	r1, ip, ip
   11408:	muleq	r1, ip, ip
   1140c:	muleq	r1, ip, ip
   11410:	muleq	r1, ip, ip
   11414:	muleq	r1, ip, ip
   11418:	muleq	r1, ip, ip
   1141c:	muleq	r1, ip, ip
   11420:	muleq	r1, ip, ip
   11424:	muleq	r1, ip, ip
   11428:	muleq	r1, ip, ip
   1142c:	muleq	r1, ip, ip
   11430:	muleq	r1, ip, ip
   11434:	muleq	r1, ip, ip
   11438:	muleq	r1, ip, ip
   1143c:	muleq	r1, ip, ip
   11440:	muleq	r1, ip, ip
   11444:	muleq	r1, ip, ip
   11448:	muleq	r1, ip, ip
   1144c:	muleq	r1, ip, ip
   11450:	muleq	r1, ip, ip
   11454:	muleq	r1, ip, ip
   11458:	muleq	r1, ip, ip
   1145c:	muleq	r1, ip, ip
   11460:	muleq	r1, ip, ip
   11464:	muleq	r1, ip, ip
   11468:	muleq	r1, ip, ip
   1146c:	muleq	r1, ip, ip
   11470:	muleq	r1, ip, ip
   11474:	muleq	r1, ip, ip
   11478:	muleq	r1, ip, ip
   1147c:	muleq	r1, ip, ip
   11480:	muleq	r1, ip, ip
   11484:	andeq	r1, r1, r0, ror #21
   11488:	andeq	r1, r1, r8, asr #21
   1148c:	muleq	r1, ip, ip
   11490:			; <UNDEFINED> instruction: 0x00011ab0
   11494:	muleq	r1, ip, ip
   11498:	muleq	r1, r8, sl
   1149c:	muleq	r1, ip, ip
   114a0:	andeq	r1, r1, r0, lsl #21
   114a4:	andeq	r1, r1, r8, ror #20
   114a8:	muleq	r1, ip, ip
   114ac:	muleq	r1, ip, ip
   114b0:	andeq	r1, r1, r8, ror #20
   114b4:	muleq	r1, ip, ip
   114b8:	andeq	r1, r1, r8, lsl sl
   114bc:	andeq	r1, r1, r0, lsl #20
   114c0:	muleq	r1, ip, ip
   114c4:	muleq	r1, ip, ip
   114c8:	muleq	r1, ip, ip
   114cc:	muleq	r1, r4, r9
   114d0:	muleq	r1, ip, ip
   114d4:	muleq	r1, ip, ip
   114d8:	muleq	r1, ip, ip
   114dc:	muleq	r1, ip, ip
   114e0:	andeq	r1, r1, r0, lsl #21
   114e4:	muleq	r1, ip, ip
   114e8:	muleq	r1, ip, ip
   114ec:	muleq	r1, ip, ip
   114f0:	muleq	r1, ip, ip
   114f4:	muleq	r1, ip, ip
   114f8:	muleq	r1, ip, ip
   114fc:	muleq	r1, ip, ip
   11500:	muleq	r1, ip, ip
   11504:	andeq	r1, r1, ip, ror r9
   11508:	andeq	r1, r1, r4, ror #18
   1150c:	andeq	r1, r1, ip, asr #18
   11510:	andeq	r1, r1, r4, lsr r9
   11514:	muleq	r1, r8, sl
   11518:	andeq	r1, r1, ip, lsl r9
   1151c:	muleq	r1, ip, ip
   11520:	andeq	r1, r1, r4, lsl #18
   11524:	andeq	r1, r1, ip, ror #17
   11528:			; <UNDEFINED> instruction: 0x000118b8
   1152c:	muleq	r1, ip, ip
   11530:	andeq	r1, r1, r8, ror #20
   11534:	muleq	r1, ip, ip
   11538:	muleq	r1, ip, ip
   1153c:	andeq	r1, r1, r8, asr #21
   11540:	muleq	r1, ip, ip
   11544:	muleq	r1, ip, ip
   11548:	muleq	r1, ip, ip
   1154c:	andeq	r1, r1, r0, lsr #17
   11550:	andeq	r1, r1, r8, ror r8
   11554:	muleq	r1, ip, ip
   11558:	andeq	r1, r1, r0, ror #16
   1155c:	strdeq	r1, [r1], -ip
   11560:	andeq	r1, r1, r4, lsl #18
   11564:	muleq	r1, ip, ip
   11568:	muleq	r1, ip, ip
   1156c:	muleq	r1, ip, ip
   11570:	muleq	r1, ip, ip
   11574:	muleq	r1, ip, ip
   11578:	muleq	r1, ip, ip
   1157c:	muleq	r1, ip, ip
   11580:	muleq	r1, ip, ip
   11584:	muleq	r1, ip, ip
   11588:	muleq	r1, ip, ip
   1158c:	muleq	r1, ip, ip
   11590:	muleq	r1, ip, ip
   11594:	muleq	r1, ip, ip
   11598:	muleq	r1, ip, ip
   1159c:	muleq	r1, ip, ip
   115a0:	muleq	r1, ip, ip
   115a4:	muleq	r1, ip, ip
   115a8:	muleq	r1, ip, ip
   115ac:	muleq	r1, ip, ip
   115b0:	muleq	r1, ip, ip
   115b4:	muleq	r1, ip, ip
   115b8:	muleq	r1, ip, ip
   115bc:	muleq	r1, ip, ip
   115c0:	muleq	r1, ip, ip
   115c4:	muleq	r1, ip, ip
   115c8:	muleq	r1, ip, ip
   115cc:	muleq	r1, ip, ip
   115d0:	muleq	r1, ip, ip
   115d4:	muleq	r1, ip, ip
   115d8:	muleq	r1, ip, ip
   115dc:	muleq	r1, ip, ip
   115e0:	muleq	r1, ip, ip
   115e4:	muleq	r1, ip, ip
   115e8:	muleq	r1, ip, ip
   115ec:	muleq	r1, ip, ip
   115f0:	muleq	r1, ip, ip
   115f4:	muleq	r1, ip, ip
   115f8:	muleq	r1, ip, ip
   115fc:	muleq	r1, ip, ip
   11600:	muleq	r1, ip, ip
   11604:	muleq	r1, ip, ip
   11608:	muleq	r1, ip, ip
   1160c:	muleq	r1, ip, ip
   11610:	muleq	r1, ip, ip
   11614:	muleq	r1, ip, ip
   11618:	muleq	r1, ip, ip
   1161c:	muleq	r1, ip, ip
   11620:	muleq	r1, ip, ip
   11624:	muleq	r1, ip, ip
   11628:	muleq	r1, ip, ip
   1162c:	muleq	r1, ip, ip
   11630:	muleq	r1, ip, ip
   11634:	muleq	r1, ip, ip
   11638:	muleq	r1, ip, ip
   1163c:	muleq	r1, ip, ip
   11640:	muleq	r1, ip, ip
   11644:	muleq	r1, ip, ip
   11648:	muleq	r1, ip, ip
   1164c:	muleq	r1, ip, ip
   11650:	muleq	r1, ip, ip
   11654:	muleq	r1, ip, ip
   11658:	muleq	r1, ip, ip
   1165c:	muleq	r1, ip, ip
   11660:	muleq	r1, ip, ip
   11664:	muleq	r1, ip, ip
   11668:	muleq	r1, ip, ip
   1166c:	muleq	r1, ip, ip
   11670:	muleq	r1, ip, ip
   11674:	muleq	r1, ip, ip
   11678:	muleq	r1, ip, ip
   1167c:	muleq	r1, ip, ip
   11680:	muleq	r1, ip, ip
   11684:	muleq	r1, ip, ip
   11688:	muleq	r1, ip, ip
   1168c:	muleq	r1, ip, ip
   11690:	muleq	r1, ip, ip
   11694:	muleq	r1, ip, ip
   11698:	muleq	r1, ip, ip
   1169c:	muleq	r1, ip, ip
   116a0:	muleq	r1, ip, ip
   116a4:	muleq	r1, ip, ip
   116a8:	muleq	r1, ip, ip
   116ac:	muleq	r1, ip, ip
   116b0:	muleq	r1, ip, ip
   116b4:	muleq	r1, ip, ip
   116b8:	muleq	r1, ip, ip
   116bc:	muleq	r1, ip, ip
   116c0:	muleq	r1, ip, ip
   116c4:	muleq	r1, ip, ip
   116c8:	muleq	r1, ip, ip
   116cc:	muleq	r1, ip, ip
   116d0:	muleq	r1, ip, ip
   116d4:	muleq	r1, ip, ip
   116d8:	muleq	r1, ip, ip
   116dc:	muleq	r1, ip, ip
   116e0:	muleq	r1, ip, ip
   116e4:	muleq	r1, ip, ip
   116e8:	muleq	r1, ip, ip
   116ec:	muleq	r1, ip, ip
   116f0:	muleq	r1, ip, ip
   116f4:	muleq	r1, ip, ip
   116f8:	muleq	r1, ip, ip
   116fc:	muleq	r1, ip, ip
   11700:	muleq	r1, ip, ip
   11704:	muleq	r1, ip, ip
   11708:	muleq	r1, ip, ip
   1170c:	muleq	r1, ip, ip
   11710:	muleq	r1, ip, ip
   11714:	muleq	r1, ip, ip
   11718:	muleq	r1, ip, ip
   1171c:	muleq	r1, ip, ip
   11720:	muleq	r1, ip, ip
   11724:	muleq	r1, ip, ip
   11728:	muleq	r1, ip, ip
   1172c:	muleq	r1, ip, ip
   11730:	muleq	r1, ip, ip
   11734:	muleq	r1, ip, ip
   11738:	muleq	r1, ip, ip
   1173c:	muleq	r1, ip, ip
   11740:	muleq	r1, ip, ip
   11744:	muleq	r1, ip, ip
   11748:	muleq	r1, ip, ip
   1174c:	muleq	r1, ip, ip
   11750:	muleq	r1, ip, ip
   11754:	muleq	r1, ip, ip
   11758:	muleq	r1, ip, ip
   1175c:	muleq	r1, ip, ip
   11760:	muleq	r1, ip, ip
   11764:	muleq	r1, ip, ip
   11768:	muleq	r1, ip, ip
   1176c:	muleq	r1, ip, ip
   11770:	muleq	r1, ip, ip
   11774:	muleq	r1, ip, ip
   11778:	muleq	r1, ip, ip
   1177c:	muleq	r1, ip, ip
   11780:	strdeq	r1, [r1], -r0
   11784:	andeq	r1, r1, r8, lsl #15
   11788:	movw	r3, #49440	; 0xc120
   1178c:	movt	r3, #2
   11790:	ldr	r2, [pc, #2700]	; 12224 <__assert_fail@plt+0x1020>
   11794:	mov	lr, #1
   11798:	mov	r0, #4
   1179c:	ldr	ip, [r3]
   117a0:	movw	r1, #49544	; 0xc188
   117a4:	movt	r1, #2
   117a8:	str	r0, [sp]
   117ac:	movw	r0, #44872	; 0xaf48
   117b0:	movt	r0, #1
   117b4:	str	lr, [sp, #8]
   117b8:	ldr	r1, [r1]
   117bc:	str	ip, [sp, #4]
   117c0:	ldr	r3, [sp, #24]
   117c4:	bl	15440 <__assert_fail@plt+0x423c>
   117c8:	movw	r3, #39708	; 0x9b1c
   117cc:	movt	r3, #1
   117d0:	add	r0, r3, r0, lsl #2
   117d4:	ldr	r3, [r0, #804]	; 0x324
   117d8:	cmp	r3, #0
   117dc:	beq	117e8 <__assert_fail@plt+0x5e4>
   117e0:	cmp	r3, #1
   117e4:	bne	1133c <__assert_fail@plt+0x138>
   117e8:	strb	r3, [r9, #8]
   117ec:	b	1133c <__assert_fail@plt+0x138>
   117f0:	mov	r3, #1
   117f4:	strb	r3, [r9, #156]	; 0x9c
   117f8:	b	1133c <__assert_fail@plt+0x138>
   117fc:	movw	r3, #49544	; 0xc188
   11800:	movt	r3, #2
   11804:	ldr	r0, [r3]
   11808:	str	r3, [sp, #20]
   1180c:	cmp	r0, #0
   11810:	beq	11b98 <__assert_fail@plt+0x994>
   11814:	movw	r1, #43936	; 0xaba0
   11818:	movt	r1, #1
   1181c:	add	r3, sp, #72	; 0x48
   11820:	mov	r2, #10
   11824:	str	r1, [sp]
   11828:	mov	r1, #0
   1182c:	bl	18bd8 <__assert_fail@plt+0x79d4>
   11830:	subs	r1, r0, #0
   11834:	bne	128d4 <__assert_fail@plt+0x16d0>
   11838:	ldrd	r2, [sp, #72]	; 0x48
   1183c:	mov	r7, #0
   11840:	mvn	r6, #0
   11844:	cmp	r3, r7
   11848:	cmpeq	r2, r6
   1184c:	bhi	127bc <__assert_fail@plt+0x15b8>
   11850:	mov	r7, #1
   11854:	str	r7, [sp, #20]
   11858:	str	r2, [sp, #32]
   1185c:	b	1133c <__assert_fail@plt+0x138>
   11860:	movw	r3, #49432	; 0xc118
   11864:	movt	r3, #2
   11868:	mov	r2, #0
   1186c:	mov	r7, #1
   11870:	strb	r2, [r3]
   11874:	b	1133c <__assert_fail@plt+0x138>
   11878:	movw	r3, #49544	; 0xc188
   1187c:	movt	r3, #2
   11880:	ldr	r0, [r3]
   11884:	cmp	r0, #0
   11888:	beq	12850 <__assert_fail@plt+0x164c>
   1188c:	bl	14348 <__assert_fail@plt+0x3144>
   11890:	and	fp, fp, r0
   11894:	mov	r7, #1
   11898:	uxtb	fp, fp
   1189c:	b	1133c <__assert_fail@plt+0x138>
   118a0:	movw	r0, #44928	; 0xaf80
   118a4:	movt	r0, #1
   118a8:	bl	14348 <__assert_fail@plt+0x3144>
   118ac:	and	fp, fp, r0
   118b0:	uxtb	fp, fp
   118b4:	b	1133c <__assert_fail@plt+0x138>
   118b8:	ldr	ip, [pc, #2432]	; 12240 <__assert_fail@plt+0x103c>
   118bc:	mov	r2, #0
   118c0:	movw	r7, #49544	; 0xc188
   118c4:	movt	r7, #2
   118c8:	mov	r1, r2
   118cc:	ldr	r3, [pc, #2388]	; 12228 <__assert_fail@plt+0x1024>
   118d0:	ldr	r0, [r7]
   118d4:	str	ip, [sp]
   118d8:	bl	18bd8 <__assert_fail@plt+0x79d4>
   118dc:	cmp	r0, #0
   118e0:	bne	128f0 <__assert_fail@plt+0x16ec>
   118e4:	mov	r7, #1
   118e8:	b	1133c <__assert_fail@plt+0x138>
   118ec:	movw	r0, #44912	; 0xaf70
   118f0:	movt	r0, #1
   118f4:	bl	14348 <__assert_fail@plt+0x3144>
   118f8:	and	fp, fp, r0
   118fc:	uxtb	fp, fp
   11900:	b	1133c <__assert_fail@plt+0x138>
   11904:	movw	r0, #44932	; 0xaf84
   11908:	movt	r0, #1
   1190c:	bl	14348 <__assert_fail@plt+0x3144>
   11910:	and	fp, fp, r0
   11914:	uxtb	fp, fp
   11918:	b	1133c <__assert_fail@plt+0x138>
   1191c:	movw	r0, #44904	; 0xaf68
   11920:	movt	r0, #1
   11924:	bl	14348 <__assert_fail@plt+0x3144>
   11928:	and	fp, fp, r0
   1192c:	uxtb	fp, fp
   11930:	b	1133c <__assert_fail@plt+0x138>
   11934:	movw	r0, #44896	; 0xaf60
   11938:	movt	r0, #1
   1193c:	bl	14348 <__assert_fail@plt+0x3144>
   11940:	and	fp, fp, r0
   11944:	uxtb	fp, fp
   11948:	b	1133c <__assert_fail@plt+0x138>
   1194c:	movw	r0, #46828	; 0xb6ec
   11950:	movt	r0, #1
   11954:	bl	14348 <__assert_fail@plt+0x3144>
   11958:	and	fp, fp, r0
   1195c:	uxtb	fp, fp
   11960:	b	1133c <__assert_fail@plt+0x138>
   11964:	movw	r0, #44888	; 0xaf58
   11968:	movt	r0, #1
   1196c:	bl	14348 <__assert_fail@plt+0x3144>
   11970:	and	fp, fp, r0
   11974:	uxtb	fp, fp
   11978:	b	1133c <__assert_fail@plt+0x138>
   1197c:	movw	r0, #44884	; 0xaf54
   11980:	movt	r0, #1
   11984:	bl	14348 <__assert_fail@plt+0x3144>
   11988:	and	fp, fp, r0
   1198c:	uxtb	fp, fp
   11990:	b	1133c <__assert_fail@plt+0x138>
   11994:	movw	r3, #49544	; 0xc188
   11998:	movt	r3, #2
   1199c:	ldr	r0, [r3]
   119a0:	str	r3, [sp, #48]	; 0x30
   119a4:	cmp	r0, #0
   119a8:	moveq	r3, #3
   119ac:	streq	r3, [r9, #152]	; 0x98
   119b0:	beq	119f0 <__assert_fail@plt+0x7ec>
   119b4:	ldr	ip, [pc, #2180]	; 12240 <__assert_fail@plt+0x103c>
   119b8:	mov	r2, #0
   119bc:	add	r3, sp, #72	; 0x48
   119c0:	mov	r1, r2
   119c4:	str	ip, [sp]
   119c8:	bl	18bd8 <__assert_fail@plt+0x79d4>
   119cc:	subs	r1, r0, #0
   119d0:	bne	1287c <__assert_fail@plt+0x1678>
   119d4:	ldrd	r2, [sp, #72]	; 0x48
   119d8:	mov	r7, #0
   119dc:	mvn	r6, #0
   119e0:	cmp	r3, r7
   119e4:	cmpeq	r2, r6
   119e8:	bhi	1289c <__assert_fail@plt+0x1698>
   119ec:	str	r2, [r9, #152]	; 0x98
   119f0:	mov	r3, #1
   119f4:	mov	r7, r3
   119f8:	strb	r3, [r9, #26]
   119fc:	b	1133c <__assert_fail@plt+0x138>
   11a00:	movw	r0, #44920	; 0xaf78
   11a04:	movt	r0, #1
   11a08:	bl	14348 <__assert_fail@plt+0x3144>
   11a0c:	and	fp, fp, r0
   11a10:	uxtb	fp, fp
   11a14:	b	1133c <__assert_fail@plt+0x138>
   11a18:	ldr	ip, [pc, #2080]	; 12240 <__assert_fail@plt+0x103c>
   11a1c:	mov	r0, #1
   11a20:	mov	r2, #0
   11a24:	movw	r7, #49544	; 0xc188
   11a28:	movt	r7, #2
   11a2c:	mov	r1, r2
   11a30:	ldr	r3, [pc, #2036]	; 1222c <__assert_fail@plt+0x1028>
   11a34:	strb	r0, [r9, #25]
   11a38:	ldr	r0, [r7]
   11a3c:	str	ip, [sp]
   11a40:	bl	18bd8 <__assert_fail@plt+0x79d4>
   11a44:	cmp	r0, #0
   11a48:	beq	118e4 <__assert_fail@plt+0x6e0>
   11a4c:	ldr	r3, [pc, #2028]	; 12240 <__assert_fail@plt+0x103c>
   11a50:	mov	r2, #78	; 0x4e
   11a54:	ldr	ip, [r7]
   11a58:	ldr	r1, [sp, #64]	; 0x40
   11a5c:	sub	r3, r3, #228	; 0xe4
   11a60:	str	ip, [sp]
   11a64:	bl	18b48 <__assert_fail@plt+0x7944>
   11a68:	movw	r0, #44916	; 0xaf74
   11a6c:	movt	r0, #1
   11a70:	bl	14348 <__assert_fail@plt+0x3144>
   11a74:	and	fp, fp, r0
   11a78:	uxtb	fp, fp
   11a7c:	b	1133c <__assert_fail@plt+0x138>
   11a80:	movw	r0, #44908	; 0xaf6c
   11a84:	movt	r0, #1
   11a88:	bl	14348 <__assert_fail@plt+0x3144>
   11a8c:	and	fp, fp, r0
   11a90:	uxtb	fp, fp
   11a94:	b	1133c <__assert_fail@plt+0x138>
   11a98:	movw	r0, #44900	; 0xaf64
   11a9c:	movt	r0, #1
   11aa0:	bl	14348 <__assert_fail@plt+0x3144>
   11aa4:	and	fp, fp, r0
   11aa8:	uxtb	fp, fp
   11aac:	b	1133c <__assert_fail@plt+0x138>
   11ab0:	movw	r0, #44892	; 0xaf5c
   11ab4:	movt	r0, #1
   11ab8:	bl	14348 <__assert_fail@plt+0x3144>
   11abc:	and	fp, fp, r0
   11ac0:	uxtb	fp, fp
   11ac4:	b	1133c <__assert_fail@plt+0x138>
   11ac8:	movw	r0, #44924	; 0xaf7c
   11acc:	movt	r0, #1
   11ad0:	bl	14348 <__assert_fail@plt+0x3144>
   11ad4:	and	fp, fp, r0
   11ad8:	uxtb	fp, fp
   11adc:	b	1133c <__assert_fail@plt+0x138>
   11ae0:	movw	r7, #49544	; 0xc188
   11ae4:	movt	r7, #2
   11ae8:	ldr	r3, [r7]
   11aec:	ldrb	r3, [r3]
   11af0:	sub	r3, r3, #100	; 0x64
   11af4:	cmp	r3, #20
   11af8:	ldrls	pc, [pc, r3, lsl #2]
   11afc:	b	1290c <__assert_fail@plt+0x1708>
   11b00:	andeq	r1, r1, r0, asr #25
   11b04:	andeq	r2, r1, ip, lsl #18
   11b08:	andeq	r2, r1, ip, lsl #18
   11b0c:	andeq	r2, r1, ip, lsl #18
   11b10:	andeq	r2, r1, ip, lsl #18
   11b14:	andeq	r2, r1, ip, lsl #18
   11b18:	andeq	r2, r1, ip, lsl #18
   11b1c:	andeq	r2, r1, ip, lsl #18
   11b20:	andeq	r2, r1, ip, lsl #18
   11b24:	andeq	r2, r1, ip, lsl #18
   11b28:	andeq	r1, r1, ip, asr #25
   11b2c:	andeq	r1, r1, r8, ror #25
   11b30:	andeq	r2, r1, ip, lsl #18
   11b34:	andeq	r2, r1, ip, lsl #18
   11b38:	andeq	r2, r1, ip, lsl #18
   11b3c:	andeq	r2, r1, ip, lsl #18
   11b40:	andeq	r2, r1, ip, lsl #18
   11b44:	andeq	r2, r1, ip, lsl #18
   11b48:	andeq	r2, r1, ip, lsl #18
   11b4c:	andeq	r2, r1, ip, lsl #18
   11b50:	andeq	r1, r1, r4, lsr #25
   11b54:	mov	r4, #0
   11b58:	movw	r1, #44936	; 0xaf88
   11b5c:	movt	r1, #1
   11b60:	movw	r3, #49436	; 0xc11c
   11b64:	movt	r3, #2
   11b68:	movw	r0, #49540	; 0xc184
   11b6c:	movt	r0, #2
   11b70:	movw	r2, #44576	; 0xae20
   11b74:	movt	r2, #1
   11b78:	stm	sp, {r1, r4}
   11b7c:	movw	r1, #41068	; 0xa06c
   11b80:	movt	r1, #1
   11b84:	ldr	r0, [r0]
   11b88:	ldr	r3, [r3]
   11b8c:	bl	183f4 <__assert_fail@plt+0x71f0>
   11b90:	mov	r0, r4
   11b94:	bl	110b4 <exit@plt>
   11b98:	mov	r7, #1
   11b9c:	mov	r3, #32
   11ba0:	str	r7, [sp, #20]
   11ba4:	str	r3, [sp, #32]
   11ba8:	b	1133c <__assert_fail@plt+0x138>
   11bac:	cmp	fp, #0
   11bb0:	mov	r3, r9
   11bb4:	mov	r6, r4
   11bb8:	mov	r4, r9
   11bbc:	ldr	r9, [sp, #20]
   11bc0:	beq	120e8 <__assert_fail@plt+0xee4>
   11bc4:	ldrb	r3, [r3, #26]
   11bc8:	cmp	r3, #0
   11bcc:	beq	11be4 <__assert_fail@plt+0x9e0>
   11bd0:	ldr	r3, [r4, #36]	; 0x24
   11bd4:	cmp	r3, #0
   11bd8:	movwne	r1, #44952	; 0xaf98
   11bdc:	movtne	r1, #1
   11be0:	bne	12834 <__assert_fail@plt+0x1630>
   11be4:	movw	sl, #49520	; 0xc170
   11be8:	movt	sl, #2
   11bec:	ldrb	r2, [r4, #156]	; 0x9c
   11bf0:	cmp	r7, #0
   11bf4:	ldr	r3, [sl]
   11bf8:	sub	r1, r6, r3
   11bfc:	str	r1, [sp, #20]
   11c00:	bne	11cf0 <__assert_fail@plt+0xaec>
   11c04:	ldr	r1, [sp, #20]
   11c08:	cmp	r1, #2
   11c0c:	beq	11d44 <__assert_fail@plt+0xb40>
   11c10:	cmp	r1, #3
   11c14:	beq	12418 <__assert_fail@plt+0x1214>
   11c18:	cmp	r1, #1
   11c1c:	beq	11d14 <__assert_fail@plt+0xb10>
   11c20:	cmp	r2, #0
   11c24:	beq	11d74 <__assert_fail@plt+0xb70>
   11c28:	ldr	r3, [sp, #20]
   11c2c:	cmp	r3, #1
   11c30:	ble	11d74 <__assert_fail@plt+0xb70>
   11c34:	mov	r2, #5
   11c38:	movw	r1, #45000	; 0xafc8
   11c3c:	movt	r1, #1
   11c40:	mov	r0, #0
   11c44:	bl	10fc4 <dcgettext@plt>
   11c48:	ldr	r3, [sl]
   11c4c:	mov	r4, r0
   11c50:	add	r3, r3, #1
   11c54:	ldr	r0, [r5, r3, lsl #2]
   11c58:	bl	17f58 <__assert_fail@plt+0x6d54>
   11c5c:	mov	r1, #0
   11c60:	mov	r3, r0
   11c64:	mov	r2, r4
   11c68:	mov	r0, r1
   11c6c:	bl	1103c <error@plt>
   11c70:	mov	r2, #5
   11c74:	movw	r1, #45020	; 0xafdc
   11c78:	movt	r1, #1
   11c7c:	mov	r0, #0
   11c80:	bl	10fc4 <dcgettext@plt>
   11c84:	mov	r1, #0
   11c88:	mov	r3, r0
   11c8c:	movw	r2, #45552	; 0xb1f0
   11c90:	movt	r2, #1
   11c94:	mov	r0, r1
   11c98:	bl	1103c <error@plt>
   11c9c:	mov	r0, #1
   11ca0:	bl	14c68 <__assert_fail@plt+0x3a64>
   11ca4:	mov	r3, #16
   11ca8:	mov	r2, #6
   11cac:	ldr	r1, [sp, #36]	; 0x24
   11cb0:	mov	r7, #1
   11cb4:	strd	r2, [r9]
   11cb8:	str	r1, [r9, #44]	; 0x2c
   11cbc:	b	1133c <__assert_fail@plt+0x138>
   11cc0:	mov	r3, #10
   11cc4:	mov	r2, #7
   11cc8:	b	11cac <__assert_fail@plt+0xaa8>
   11ccc:	movw	r3, #10832	; 0x2a50
   11cd0:	movt	r3, #1
   11cd4:	mov	r2, #0
   11cd8:	mov	r7, #1
   11cdc:	str	r2, [r9]
   11ce0:	str	r3, [r9, #44]	; 0x2c
   11ce4:	b	1133c <__assert_fail@plt+0x138>
   11ce8:	mov	r3, #8
   11cec:	b	11cc4 <__assert_fail@plt+0xac0>
   11cf0:	cmp	r2, #0
   11cf4:	beq	11d74 <__assert_fail@plt+0xb70>
   11cf8:	ldr	r1, [sp, #20]
   11cfc:	cmp	r1, #2
   11d00:	beq	11d44 <__assert_fail@plt+0xb40>
   11d04:	cmp	r1, #3
   11d08:	beq	12418 <__assert_fail@plt+0x1214>
   11d0c:	cmp	r1, #1
   11d10:	bne	11c28 <__assert_fail@plt+0xa24>
   11d14:	cmp	r2, #0
   11d18:	ldr	r0, [r5, r3, lsl #2]
   11d1c:	bne	1253c <__assert_fail@plt+0x1338>
   11d20:	ldrb	r3, [r0]
   11d24:	cmp	r3, #43	; 0x2b
   11d28:	beq	1253c <__assert_fail@plt+0x1338>
   11d2c:	mov	r3, #0
   11d30:	str	r3, [sp, #24]
   11d34:	str	r3, [sp, #36]	; 0x24
   11d38:	mov	r3, #1
   11d3c:	str	r3, [sp, #20]
   11d40:	b	11d80 <__assert_fail@plt+0xb7c>
   11d44:	add	r3, r3, #1
   11d48:	cmp	r2, #0
   11d4c:	ldr	r0, [r5, r3, lsl #2]
   11d50:	bne	1247c <__assert_fail@plt+0x1278>
   11d54:	ldrb	r3, [r0]
   11d58:	cmp	r3, #43	; 0x2b
   11d5c:	beq	1247c <__assert_fail@plt+0x1278>
   11d60:	sub	r3, r3, #48	; 0x30
   11d64:	cmp	r3, #9
   11d68:	bls	1247c <__assert_fail@plt+0x1278>
   11d6c:	mov	r3, #2
   11d70:	str	r3, [sp, #20]
   11d74:	mov	r3, #0
   11d78:	str	r3, [sp, #24]
   11d7c:	str	r3, [sp, #36]	; 0x24
   11d80:	ldrb	r3, [r4, #157]	; 0x9d
   11d84:	cmp	r3, #0
   11d88:	beq	11dac <__assert_fail@plt+0xba8>
   11d8c:	ldr	r2, [r4, #44]	; 0x2c
   11d90:	movw	r3, #10832	; 0x2a50
   11d94:	movt	r3, #1
   11d98:	cmp	r2, r3
   11d9c:	beq	12460 <__assert_fail@plt+0x125c>
   11da0:	movw	r3, #17148	; 0x42fc
   11da4:	movt	r3, #1
   11da8:	str	r3, [r4, #44]	; 0x2c
   11dac:	ldrb	r3, [r4, #25]
   11db0:	cmp	r3, #0
   11db4:	beq	11de8 <__assert_fail@plt+0xbe4>
   11db8:	ldrd	r0, [r4, #136]	; 0x88
   11dbc:	mov	r2, #0
   11dc0:	mov	r3, #0
   11dc4:	ldrd	r6, [r4, #144]	; 0x90
   11dc8:	strd	r2, [sp, #48]	; 0x30
   11dcc:	adds	r2, r0, r6
   11dd0:	adcs	r3, r1, r7
   11dd4:	bcs	1286c <__assert_fail@plt+0x1668>
   11dd8:	ldrd	r0, [sp, #48]	; 0x30
   11ddc:	strd	r2, [r4, #160]	; 0xa0
   11de0:	orrs	r1, r0, r1
   11de4:	bne	1282c <__assert_fail@plt+0x1628>
   11de8:	ldr	r3, [r4, #36]	; 0x24
   11dec:	cmp	r3, #0
   11df0:	beq	120f0 <__assert_fail@plt+0xeec>
   11df4:	ldr	r3, [sp, #20]
   11df8:	cmp	r3, #0
   11dfc:	ldrgt	r3, [sl]
   11e00:	ldrle	r5, [pc, #1064]	; 12230 <__assert_fail@plt+0x102c>
   11e04:	addgt	r5, r5, r3, lsl #2
   11e08:	str	r5, [r4, #12]
   11e0c:	bl	13a94 <__assert_fail@plt+0x2890>
   11e10:	ldr	r3, [r4, #20]
   11e14:	mov	r6, r0
   11e18:	mov	r5, r0
   11e1c:	cmp	r3, #0
   11e20:	beq	120b8 <__assert_fail@plt+0xeb4>
   11e24:	ldrd	r0, [r4, #136]	; 0x88
   11e28:	bl	13ce8 <__assert_fail@plt+0x2ae4>
   11e2c:	ldr	r3, [r4, #20]
   11e30:	and	r0, r0, r6
   11e34:	uxtb	r2, r0
   11e38:	mov	r5, r2
   11e3c:	str	r2, [sp, #20]
   11e40:	cmp	r3, #0
   11e44:	beq	120b8 <__assert_fail@plt+0xeb4>
   11e48:	ldrb	r3, [r4, #157]	; 0x9d
   11e4c:	cmp	r3, #0
   11e50:	moveq	r7, #0
   11e54:	moveq	r3, r7
   11e58:	beq	11e74 <__assert_fail@plt+0xc70>
   11e5c:	ldr	r1, [sp, #24]
   11e60:	ldr	r3, [r4, #136]	; 0x88
   11e64:	ldr	r2, [r4, #140]	; 0x8c
   11e68:	subs	r7, r1, r3
   11e6c:	ldr	r3, [sp, #36]	; 0x24
   11e70:	sbc	r3, r3, r2
   11e74:	ldr	lr, [r4, #36]	; 0x24
   11e78:	str	r7, [r4, #48]	; 0x30
   11e7c:	str	r3, [r4, #52]	; 0x34
   11e80:	cmp	lr, #0
   11e84:	beq	126b4 <__assert_fail@plt+0x14b0>
   11e88:	ldr	r0, [r4, #40]	; 0x28
   11e8c:	movw	ip, #39708	; 0x9b1c
   11e90:	movt	ip, #1
   11e94:	mov	r5, #1
   11e98:	add	lr, r0, lr, lsl #5
   11e9c:	ldr	r3, [r0, #4]
   11ea0:	mov	r1, r5
   11ea4:	add	r3, ip, r3, lsl #2
   11ea8:	ldr	r6, [r3, #132]	; 0x84
   11eac:	mov	r2, r6
   11eb0:	b	11eb8 <__assert_fail@plt+0xcb4>
   11eb4:	mov	r2, r3
   11eb8:	udiv	r3, r1, r2
   11ebc:	mls	r3, r2, r3, r1
   11ec0:	mov	r1, r2
   11ec4:	cmp	r3, #0
   11ec8:	bne	11eb4 <__assert_fail@plt+0xcb0>
   11ecc:	udiv	r2, r6, r2
   11ed0:	add	r0, r0, #32
   11ed4:	cmp	lr, r0
   11ed8:	mul	r5, r5, r2
   11edc:	mov	r6, r5
   11ee0:	bne	11e9c <__assert_fail@plt+0xc98>
   11ee4:	cmp	r9, #0
   11ee8:	beq	12144 <__assert_fail@plt+0xf40>
   11eec:	ldr	r2, [sp, #32]
   11ef0:	cmp	r2, #0
   11ef4:	beq	11f08 <__assert_fail@plt+0xd04>
   11ef8:	udiv	r3, r2, r5
   11efc:	mls	r3, r5, r3, r2
   11f00:	cmp	r3, #0
   11f04:	beq	126d4 <__assert_fail@plt+0x14d0>
   11f08:	mov	r2, #5
   11f0c:	movw	r1, #45112	; 0xb038
   11f10:	movt	r1, #1
   11f14:	mov	r0, #0
   11f18:	bl	10fc4 <dcgettext@plt>
   11f1c:	mov	r1, #0
   11f20:	mov	r2, r0
   11f24:	str	r5, [sp]
   11f28:	mov	r0, r1
   11f2c:	ldr	r3, [sp, #32]
   11f30:	bl	1103c <error@plt>
   11f34:	str	r6, [r4, #28]
   11f38:	ldr	lr, [r4, #36]	; 0x24
   11f3c:	cmp	lr, #0
   11f40:	beq	11fb4 <__assert_fail@plt+0xdb0>
   11f44:	movw	ip, #39708	; 0x9b1c
   11f48:	movt	ip, #1
   11f4c:	ldr	r5, [r4, #28]
   11f50:	mov	r0, #0
   11f54:	ldr	r2, [r4, #40]	; 0x28
   11f58:	add	lr, r2, lr, lsl #5
   11f5c:	mov	r1, r2
   11f60:	ldr	r6, [r1, #4]
   11f64:	add	r1, r1, #32
   11f68:	ldr	r7, [r1, #-8]
   11f6c:	add	r6, ip, r6, lsl #2
   11f70:	ldr	r3, [r6, #132]	; 0x84
   11f74:	udiv	r3, r5, r3
   11f78:	mla	r3, r7, r3, r3
   11f7c:	cmp	r0, r3
   11f80:	movcc	r0, r3
   11f84:	cmp	lr, r1
   11f88:	bne	11f60 <__assert_fail@plt+0xd5c>
   11f8c:	ldr	r1, [r2, #4]
   11f90:	add	r2, r2, #32
   11f94:	ldr	r6, [r2, #-8]
   11f98:	add	r1, ip, r1, lsl #2
   11f9c:	ldr	r3, [r1, #132]	; 0x84
   11fa0:	udiv	r3, r5, r3
   11fa4:	mls	r3, r6, r3, r0
   11fa8:	str	r3, [r2, #-4]
   11fac:	cmp	lr, r2
   11fb0:	bne	11f8c <__assert_fail@plt+0xd88>
   11fb4:	ldrb	r5, [r4, #26]
   11fb8:	cmp	r5, #0
   11fbc:	beq	121e8 <__assert_fail@plt+0xfe4>
   11fc0:	ldr	r3, [r4, #152]	; 0x98
   11fc4:	movw	r2, #49540	; 0xc184
   11fc8:	movt	r2, #2
   11fcc:	str	r2, [sp, #32]
   11fd0:	movw	r2, #40608	; 0x9ea0
   11fd4:	movt	r2, #1
   11fd8:	str	r2, [sp, #24]
   11fdc:	movw	r2, #40604	; 0x9e9c
   11fe0:	movt	r2, #1
   11fe4:	cmp	r3, #100	; 0x64
   11fe8:	movcc	r3, #100	; 0x64
   11fec:	str	r2, [sp, #36]	; 0x24
   11ff0:	mov	r0, r3
   11ff4:	str	r3, [sp, #64]	; 0x40
   11ff8:	bl	18504 <__assert_fail@plt+0x7300>
   11ffc:	ldrd	r6, [r4, #136]	; 0x88
   12000:	mov	fp, r0
   12004:	ldrb	r3, [r4, #25]
   12008:	ldr	r9, [r4, #152]	; 0x98
   1200c:	cmp	r3, #0
   12010:	beq	12048 <__assert_fail@plt+0xe44>
   12014:	ldrd	r0, [r4, #160]	; 0xa0
   12018:	mov	r3, #0
   1201c:	cmp	r3, r1
   12020:	cmpeq	r9, r0
   12024:	bhi	127a4 <__assert_fail@plt+0x15a0>
   12028:	subs	ip, r0, r9
   1202c:	sbc	r3, r1, r3
   12030:	str	ip, [sp, #56]	; 0x38
   12034:	str	r3, [sp, #60]	; 0x3c
   12038:	ldrd	r2, [sp, #56]	; 0x38
   1203c:	cmp	r3, r7
   12040:	cmpeq	r2, r6
   12044:	bls	127a4 <__assert_fail@plt+0x15a0>
   12048:	cmp	r9, #0
   1204c:	movne	r9, #0
   12050:	bne	12084 <__assert_fail@plt+0xe80>
   12054:	b	121bc <__assert_fail@plt+0xfb8>
   12058:	bl	110a8 <__ctype_b_loc@plt>
   1205c:	ldr	r2, [r0]
   12060:	lsl	r3, sl, #1
   12064:	ldr	r1, [r4, #152]	; 0x98
   12068:	ldrh	r3, [r2, r3]
   1206c:	tst	r3, #16384	; 0x4000
   12070:	beq	12004 <__assert_fail@plt+0xe00>
   12074:	strb	sl, [fp, r9]
   12078:	add	r9, r9, #1
   1207c:	cmp	r9, r1
   12080:	bcs	121bc <__assert_fail@plt+0xfb8>
   12084:	add	r0, sp, #72	; 0x48
   12088:	bl	13ef4 <__assert_fail@plt+0x2cf0>
   1208c:	ldr	sl, [sp, #72]	; 0x48
   12090:	adds	r6, r6, #1
   12094:	and	r5, r5, r0
   12098:	adc	r7, r7, #0
   1209c:	cmp	sl, #0
   120a0:	bge	12058 <__assert_fail@plt+0xe54>
   120a4:	mov	r0, fp
   120a8:	bl	158ac <__assert_fail@plt+0x46a8>
   120ac:	ldr	r3, [sp, #20]
   120b0:	and	r3, r3, r5
   120b4:	and	r5, r3, #1
   120b8:	ldrb	r3, [r4, #24]
   120bc:	cmp	r3, #0
   120c0:	bne	12100 <__assert_fail@plt+0xefc>
   120c4:	eor	r0, r5, #1
   120c8:	uxtb	r0, r0
   120cc:	add	sp, sp, #84	; 0x54
   120d0:	ldrd	r4, [sp]
   120d4:	ldrd	r6, [sp, #8]
   120d8:	ldrd	r8, [sp, #16]
   120dc:	ldrd	sl, [sp, #24]
   120e0:	add	sp, sp, #32
   120e4:	pop	{pc}		; (ldr pc, [sp], #4)
   120e8:	mov	r0, #1
   120ec:	b	120cc <__assert_fail@plt+0xec8>
   120f0:	movw	r0, #45108	; 0xb034
   120f4:	movt	r0, #1
   120f8:	bl	14348 <__assert_fail@plt+0x3144>
   120fc:	b	11df4 <__assert_fail@plt+0xbf0>
   12100:	movw	r3, #49536	; 0xc180
   12104:	movt	r3, #2
   12108:	ldr	r0, [r3]
   1210c:	bl	15798 <__assert_fail@plt+0x4594>
   12110:	cmn	r0, #1
   12114:	bne	120c4 <__assert_fail@plt+0xec0>
   12118:	bl	110d8 <__errno_location@plt>
   1211c:	ldr	r4, [r0]
   12120:	mov	r2, #5
   12124:	movw	r1, #40620	; 0x9eac
   12128:	movt	r1, #1
   1212c:	mov	r0, #0
   12130:	bl	10fc4 <dcgettext@plt>
   12134:	mov	r2, r0
   12138:	mov	r0, #1
   1213c:	mov	r1, r4
   12140:	bl	1103c <error@plt>
   12144:	cmp	r5, #15
   12148:	ldrgt	lr, [r4, #36]	; 0x24
   1214c:	strgt	r5, [r4, #28]
   12150:	bgt	11f4c <__assert_fail@plt+0xd48>
   12154:	mov	r3, #16
   12158:	sdiv	r3, r3, r5
   1215c:	mul	r5, r5, r3
   12160:	str	r5, [r4, #28]
   12164:	b	11f38 <__assert_fail@plt+0xd34>
   12168:	mov	r0, fp
   1216c:	mov	r1, r8
   12170:	bl	186f4 <__assert_fail@plt+0x74f0>
   12174:	mov	fp, r0
   12178:	add	r0, sp, #72	; 0x48
   1217c:	bl	13ef4 <__assert_fail@plt+0x2cf0>
   12180:	ldr	sl, [sp, #72]	; 0x48
   12184:	adds	r6, r6, #1
   12188:	and	r5, r5, r0
   1218c:	adc	r7, r7, #0
   12190:	cmp	sl, #0
   12194:	blt	120a4 <__assert_fail@plt+0xea0>
   12198:	beq	1256c <__assert_fail@plt+0x1368>
   1219c:	bl	110a8 <__ctype_b_loc@plt>
   121a0:	ldr	r2, [r0]
   121a4:	lsl	r3, sl, #1
   121a8:	ldrh	r3, [r2, r3]
   121ac:	tst	r3, #16384	; 0x4000
   121b0:	beq	12004 <__assert_fail@plt+0xe00>
   121b4:	strb	sl, [fp, r9]
   121b8:	add	r9, r9, #1
   121bc:	ldrb	r3, [r4, #25]
   121c0:	cmp	r3, #0
   121c4:	beq	121d8 <__assert_fail@plt+0xfd4>
   121c8:	ldrd	r2, [r4, #160]	; 0xa0
   121cc:	cmp	r7, r3
   121d0:	cmpeq	r6, r2
   121d4:	bcs	1256c <__assert_fail@plt+0x1368>
   121d8:	ldr	r3, [sp, #64]	; 0x40
   121dc:	cmp	r3, r9
   121e0:	bne	12178 <__assert_fail@plt+0xf74>
   121e4:	b	12168 <__assert_fail@plt+0xf64>
   121e8:	mov	r0, #2
   121ec:	ldr	r1, [r4, #28]
   121f0:	bl	1866c <__assert_fail@plt+0x7468>
   121f4:	ldr	r3, [r4, #28]
   121f8:	str	r0, [sp, #72]	; 0x48
   121fc:	ldrb	r2, [r4, #25]
   12200:	ldrd	r6, [r4, #136]	; 0x88
   12204:	add	r0, r0, r3
   12208:	cmp	r2, #0
   1220c:	str	r0, [sp, #76]	; 0x4c
   12210:	beq	12328 <__assert_fail@plt+0x1124>
   12214:	mov	fp, r2
   12218:	b	122cc <__assert_fail@plt+0x10c8>
   1221c:	andeq	ip, r2, r8, asr #3
   12220:	andeq	r9, r1, ip, lsl #28
   12224:	andeq	r9, r1, r8, asr #28
   12228:	andeq	ip, r2, r8, lsl r2
   1222c:	andeq	ip, r2, r0, lsr #4
   12230:	andeq	r9, r1, r4, asr #26
   12234:	andeq	r9, r1, r4, asr lr
   12238:	andeq	r9, r1, r8, ror #25
   1223c:	andeq	r9, r1, ip, asr #26
   12240:	andeq	r9, r1, r0, lsr lr
   12244:	subs	ip, r2, r6
   12248:	lsl	sl, r5, #2
   1224c:	ldr	r0, [r4, #28]
   12250:	sbc	r3, r3, r7
   12254:	mov	r1, #0
   12258:	str	ip, [sp, #40]	; 0x28
   1225c:	str	r3, [sp, #44]	; 0x2c
   12260:	add	r3, sp, #80	; 0x50
   12264:	add	r3, r3, sl
   12268:	ldr	r9, [r3, #-8]
   1226c:	ldrd	r2, [sp, #40]	; 0x28
   12270:	cmp	r1, r3
   12274:	mov	r1, r9
   12278:	cmpeq	r0, r2
   1227c:	movhi	r0, r2
   12280:	mov	r2, r8
   12284:	bl	14b7c <__assert_fail@plt+0x3978>
   12288:	ldr	r3, [r4, #28]
   1228c:	and	fp, fp, r0
   12290:	ldr	r2, [sp, #64]	; 0x40
   12294:	cmp	r2, r3
   12298:	bcc	12398 <__assert_fail@plt+0x1194>
   1229c:	bne	12810 <__assert_fail@plt+0x160c>
   122a0:	eor	r5, r5, #1
   122a4:	add	r3, sp, #80	; 0x50
   122a8:	str	r9, [sp]
   122ac:	add	r3, r3, r5, lsl #2
   122b0:	mov	r0, r6
   122b4:	mov	r1, r7
   122b8:	ldr	r3, [r3, #-8]
   122bc:	bl	13f88 <__assert_fail@plt+0x2d84>
   122c0:	ldr	r3, [sp, #64]	; 0x40
   122c4:	adds	r6, r6, r3
   122c8:	adc	r7, r7, #0
   122cc:	ldrd	r2, [r4, #160]	; 0xa0
   122d0:	cmp	r3, r7
   122d4:	cmpeq	r2, r6
   122d8:	bhi	12244 <__assert_fail@plt+0x1040>
   122dc:	mov	r3, #0
   122e0:	str	fp, [sp, #32]
   122e4:	str	r3, [sp, #64]	; 0x40
   122e8:	mov	r2, #10
   122ec:	mov	r0, r6
   122f0:	ldr	r3, [r4, #44]	; 0x2c
   122f4:	mov	r1, r7
   122f8:	blx	r3
   122fc:	ldrb	r3, [r4, #25]
   12300:	cmp	r3, #0
   12304:	beq	12318 <__assert_fail@plt+0x1114>
   12308:	ldrd	r2, [r4, #160]	; 0xa0
   1230c:	cmp	r7, r3
   12310:	cmpeq	r6, r2
   12314:	bcs	126ec <__assert_fail@plt+0x14e8>
   12318:	ldr	r0, [sp, #72]	; 0x48
   1231c:	bl	158ac <__assert_fail@plt+0x46a8>
   12320:	ldr	r5, [sp, #32]
   12324:	b	120ac <__assert_fail@plt+0xea8>
   12328:	mov	sl, r5
   1232c:	b	12364 <__assert_fail@plt+0x1160>
   12330:	bne	127f4 <__assert_fail@plt+0x15f0>
   12334:	eor	r5, r5, #1
   12338:	add	r3, sp, #80	; 0x50
   1233c:	str	r9, [sp]
   12340:	lsl	sl, r5, #2
   12344:	mov	r0, r6
   12348:	mov	r1, r7
   1234c:	add	r3, r3, sl
   12350:	ldr	r3, [r3, #-8]
   12354:	bl	13f88 <__assert_fail@plt+0x2d84>
   12358:	ldr	r3, [sp, #64]	; 0x40
   1235c:	adds	r6, r6, r3
   12360:	adc	r7, r7, #0
   12364:	add	r3, sp, #80	; 0x50
   12368:	mov	r2, r8
   1236c:	ldr	r0, [r4, #28]
   12370:	add	r3, r3, sl
   12374:	ldr	r9, [r3, #-8]
   12378:	mov	r1, r9
   1237c:	bl	14b7c <__assert_fail@plt+0x3978>
   12380:	ldr	r3, [r4, #28]
   12384:	and	fp, fp, r0
   12388:	uxtb	fp, fp
   1238c:	ldr	r2, [sp, #64]	; 0x40
   12390:	cmp	r2, r3
   12394:	bcs	12330 <__assert_fail@plt+0x112c>
   12398:	cmp	r2, #0
   1239c:	str	fp, [sp, #32]
   123a0:	beq	122e8 <__assert_fail@plt+0x10e4>
   123a4:	ldr	r3, [r4, #36]	; 0x24
   123a8:	movw	r8, #39708	; 0x9b1c
   123ac:	movt	r8, #1
   123b0:	mov	r9, r4
   123b4:	mov	lr, #0
   123b8:	strd	r6, [sp, #24]
   123bc:	ldr	fp, [r4, #40]	; 0x28
   123c0:	mov	ip, #1
   123c4:	mov	r7, r2
   123c8:	mov	r4, r3
   123cc:	add	fp, fp, #4
   123d0:	cmp	lr, r4
   123d4:	beq	124d0 <__assert_fail@plt+0x12cc>
   123d8:	ldr	r3, [fp, lr, lsl #5]
   123dc:	mov	r1, ip
   123e0:	add	r3, r8, r3, lsl #2
   123e4:	ldr	r0, [r3, #132]	; 0x84
   123e8:	mov	r2, r0
   123ec:	b	123f4 <__assert_fail@plt+0x11f0>
   123f0:	mov	r2, r3
   123f4:	udiv	r3, r1, r2
   123f8:	mls	r3, r2, r3, r1
   123fc:	mov	r1, r2
   12400:	cmp	r3, #0
   12404:	bne	123f0 <__assert_fail@plt+0x11ec>
   12408:	udiv	r2, r0, r2
   1240c:	add	lr, lr, #1
   12410:	mul	ip, ip, r2
   12414:	b	123d0 <__assert_fail@plt+0x11cc>
   12418:	cmp	r2, #0
   1241c:	moveq	r3, #3
   12420:	streq	r3, [sp, #20]
   12424:	beq	11d74 <__assert_fail@plt+0xb70>
   12428:	add	r3, r3, #1
   1242c:	mov	r1, r8
   12430:	ldr	r0, [r5, r3, lsl #2]
   12434:	bl	12b9c <__assert_fail@plt+0x1998>
   12438:	cmp	r0, #0
   1243c:	bne	1274c <__assert_fail@plt+0x1548>
   12440:	mov	r3, #3
   12444:	str	r3, [sp, #20]
   12448:	ldrb	r3, [r4, #156]	; 0x9c
   1244c:	cmp	r3, #0
   12450:	beq	11d78 <__assert_fail@plt+0xb74>
   12454:	b	11c34 <__assert_fail@plt+0xa30>
   12458:	mov	r0, #0
   1245c:	bl	14c68 <__assert_fail@plt+0x3a64>
   12460:	movw	r3, #16956	; 0x423c
   12464:	movt	r3, #1
   12468:	mov	r2, #8
   1246c:	mov	r1, #7
   12470:	stm	r4, {r1, r2}
   12474:	str	r3, [r4, #44]	; 0x2c
   12478:	b	11dac <__assert_fail@plt+0xba8>
   1247c:	add	r1, sp, #72	; 0x48
   12480:	bl	12b9c <__assert_fail@plt+0x1998>
   12484:	cmp	r0, #0
   12488:	beq	126e0 <__assert_fail@plt+0x14dc>
   1248c:	ldrb	r3, [r4, #156]	; 0x9c
   12490:	cmp	r3, #0
   12494:	bne	12704 <__assert_fail@plt+0x1500>
   12498:	ldr	r1, [sl]
   1249c:	mov	r0, #0
   124a0:	mov	r3, #0
   124a4:	str	r3, [sp, #24]
   124a8:	str	r0, [sp, #36]	; 0x24
   124ac:	mov	r0, #1
   124b0:	ldrd	r2, [sp, #72]	; 0x48
   124b4:	str	r0, [sp, #20]
   124b8:	ldr	r0, [r5, r1, lsl #2]
   124bc:	add	r1, r5, r1, lsl #2
   124c0:	add	r5, r5, #4
   124c4:	strd	r2, [r4, #136]	; 0x88
   124c8:	str	r0, [r1, #4]
   124cc:	b	11d80 <__assert_fail@plt+0xb7c>
   124d0:	sub	r2, r7, #1
   124d4:	add	r3, sp, #80	; 0x50
   124d8:	add	r2, r2, ip
   124dc:	add	sl, r3, sl
   124e0:	ldr	sl, [sl, #-8]
   124e4:	mov	r4, r9
   124e8:	mov	r9, r7
   124ec:	udiv	r2, r2, ip
   124f0:	mov	r1, #0
   124f4:	add	r0, sl, r9
   124f8:	mul	r2, ip, r2
   124fc:	sub	r2, r2, r7
   12500:	ldrd	r6, [sp, #24]
   12504:	bl	11108 <memset@plt>
   12508:	add	r1, sp, #80	; 0x50
   1250c:	eor	r3, r5, #1
   12510:	str	sl, [sp]
   12514:	add	r3, r1, r3, lsl #2
   12518:	mov	r2, r9
   1251c:	mov	r0, r6
   12520:	mov	r1, r7
   12524:	ldr	r3, [r3, #-8]
   12528:	bl	13f88 <__assert_fail@plt+0x2d84>
   1252c:	ldr	r3, [sp, #64]	; 0x40
   12530:	adds	r6, r6, r3
   12534:	adc	r7, r7, #0
   12538:	b	122e8 <__assert_fail@plt+0x10e4>
   1253c:	mov	r1, r8
   12540:	bl	12b9c <__assert_fail@plt+0x1998>
   12544:	cmp	r0, #0
   12548:	beq	11d2c <__assert_fail@plt+0xb28>
   1254c:	ldrd	r2, [sp, #64]	; 0x40
   12550:	mov	r1, #0
   12554:	add	r5, r5, #4
   12558:	str	r1, [sp, #20]
   1255c:	str	r1, [sp, #24]
   12560:	str	r1, [sp, #36]	; 0x24
   12564:	strd	r2, [r4, #136]	; 0x88
   12568:	b	11d80 <__assert_fail@plt+0xb7c>
   1256c:	mvn	r0, r9
   12570:	mov	r2, #0
   12574:	ldr	r3, [r4, #44]	; 0x2c
   12578:	adds	r0, r0, r6
   1257c:	mvn	r1, #0
   12580:	adc	r1, r1, r7
   12584:	strb	r2, [fp, r9]
   12588:	mov	r2, #32
   1258c:	blx	r3
   12590:	strd	r6, [sp, #40]	; 0x28
   12594:	movw	sl, #40600	; 0x9e98
   12598:	movt	sl, #1
   1259c:	ldr	r7, [sp, #32]
   125a0:	sub	r9, fp, #1
   125a4:	ldrb	r1, [r9, #1]!
   125a8:	ldr	r3, [r7]
   125ac:	cmp	r1, #0
   125b0:	str	r1, [sp, #72]	; 0x48
   125b4:	beq	12680 <__assert_fail@plt+0x147c>
   125b8:	sub	r2, r1, #7
   125bc:	cmp	r2, #6
   125c0:	ldrls	pc, [pc, r2, lsl #2]
   125c4:	b	12938 <__assert_fail@plt+0x1734>
   125c8:	andeq	r2, r1, r8, ror #12
   125cc:	andeq	r2, r1, r0, asr r6
   125d0:	andeq	r2, r1, ip, lsr r6
   125d4:	andeq	r2, r1, r4, lsr #12
   125d8:	andeq	r2, r1, r0, lsl r6
   125dc:	strdeq	r2, [r1], -r8
   125e0:	andeq	r2, r1, r4, ror #11
   125e4:	mov	r2, #2
   125e8:	mov	r1, #1
   125ec:	mov	r0, sl
   125f0:	bl	10fa0 <fwrite_unlocked@plt>
   125f4:	b	125a4 <__assert_fail@plt+0x13a0>
   125f8:	movw	r0, #40592	; 0x9e90
   125fc:	movt	r0, #1
   12600:	mov	r2, #2
   12604:	mov	r1, #1
   12608:	bl	10fa0 <fwrite_unlocked@plt>
   1260c:	b	125a4 <__assert_fail@plt+0x13a0>
   12610:	mov	r2, #2
   12614:	mov	r1, #1
   12618:	ldr	r0, [sp, #24]
   1261c:	bl	10fa0 <fwrite_unlocked@plt>
   12620:	b	125a4 <__assert_fail@plt+0x13a0>
   12624:	movw	r0, #40596	; 0x9e94
   12628:	movt	r0, #1
   1262c:	mov	r2, #2
   12630:	mov	r1, #1
   12634:	bl	10fa0 <fwrite_unlocked@plt>
   12638:	b	125a4 <__assert_fail@plt+0x13a0>
   1263c:	mov	r2, #2
   12640:	mov	r1, #1
   12644:	ldr	r0, [sp, #36]	; 0x24
   12648:	bl	10fa0 <fwrite_unlocked@plt>
   1264c:	b	125a4 <__assert_fail@plt+0x13a0>
   12650:	movw	r0, #40588	; 0x9e8c
   12654:	movt	r0, #1
   12658:	mov	r2, #2
   1265c:	mov	r1, #1
   12660:	bl	10fa0 <fwrite_unlocked@plt>
   12664:	b	125a4 <__assert_fail@plt+0x13a0>
   12668:	movw	r0, #40612	; 0x9ea4
   1266c:	movt	r0, #1
   12670:	mov	r2, #2
   12674:	mov	r1, #1
   12678:	bl	10fa0 <fwrite_unlocked@plt>
   1267c:	b	125a4 <__assert_fail@plt+0x13a0>
   12680:	ldr	r2, [r3, #20]
   12684:	ldr	r1, [r3, #24]
   12688:	ldrd	r6, [sp, #40]	; 0x28
   1268c:	cmp	r2, r1
   12690:	addcc	r0, r2, #1
   12694:	movcc	r1, #10
   12698:	strcc	r0, [r3, #20]
   1269c:	strbcc	r1, [r2]
   126a0:	bcc	12004 <__assert_fail@plt+0xe00>
   126a4:	mov	r0, r3
   126a8:	mov	r1, #10
   126ac:	bl	11168 <__overflow@plt>
   126b0:	b	12004 <__assert_fail@plt+0xe00>
   126b4:	cmp	r9, #0
   126b8:	moveq	r5, #1
   126bc:	beq	12154 <__assert_fail@plt+0xf50>
   126c0:	ldr	r3, [sp, #32]
   126c4:	cmp	r3, #0
   126c8:	moveq	r6, #1
   126cc:	moveq	r5, r6
   126d0:	beq	11f08 <__assert_fail@plt+0xd04>
   126d4:	ldr	r3, [sp, #32]
   126d8:	str	r3, [r4, #28]
   126dc:	b	11f38 <__assert_fail@plt+0xd34>
   126e0:	mov	r3, #2
   126e4:	str	r3, [sp, #20]
   126e8:	b	12448 <__assert_fail@plt+0x1244>
   126ec:	mov	r0, #0
   126f0:	bl	13bcc <__assert_fail@plt+0x29c8>
   126f4:	ldr	r3, [sp, #32]
   126f8:	and	r3, r3, r0
   126fc:	str	r3, [sp, #32]
   12700:	b	12318 <__assert_fail@plt+0x1114>
   12704:	ldr	r3, [sl]
   12708:	mov	r1, r8
   1270c:	ldr	r0, [r5, r3, lsl #2]
   12710:	bl	12b9c <__assert_fail@plt+0x1998>
   12714:	cmp	r0, #0
   12718:	beq	12498 <__assert_fail@plt+0x1294>
   1271c:	ldrd	r2, [sp, #64]	; 0x40
   12720:	mov	r1, #1
   12724:	mov	r0, #0
   12728:	add	r5, r5, #8
   1272c:	str	r0, [sp, #20]
   12730:	strd	r2, [r4, #136]	; 0x88
   12734:	strb	r1, [r4, #157]	; 0x9d
   12738:	ldr	r1, [sp, #72]	; 0x48
   1273c:	ldr	r3, [sp, #76]	; 0x4c
   12740:	str	r1, [sp, #24]
   12744:	str	r3, [sp, #36]	; 0x24
   12748:	b	11d80 <__assert_fail@plt+0xb7c>
   1274c:	ldr	r3, [sl]
   12750:	add	r1, sp, #72	; 0x48
   12754:	add	r3, r3, #2
   12758:	ldr	r0, [r5, r3, lsl #2]
   1275c:	bl	12b9c <__assert_fail@plt+0x1998>
   12760:	cmp	r0, #0
   12764:	beq	12440 <__assert_fail@plt+0x123c>
   12768:	ldr	r1, [sl]
   1276c:	mov	r6, #1
   12770:	ldrd	r2, [sp, #64]	; 0x40
   12774:	str	r6, [sp, #20]
   12778:	strb	r6, [r4, #157]	; 0x9d
   1277c:	ldr	r0, [r5, r1, lsl #2]
   12780:	add	r1, r5, r1, lsl #2
   12784:	add	r5, r5, #8
   12788:	strd	r2, [r4, #136]	; 0x88
   1278c:	ldr	r3, [sp, #72]	; 0x48
   12790:	str	r0, [r1, #8]
   12794:	str	r3, [sp, #24]
   12798:	ldr	r3, [sp, #76]	; 0x4c
   1279c:	str	r3, [sp, #36]	; 0x24
   127a0:	b	11d80 <__assert_fail@plt+0xb7c>
   127a4:	mov	r0, fp
   127a8:	bl	158ac <__assert_fail@plt+0x46a8>
   127ac:	mov	r0, #0
   127b0:	bl	13bcc <__assert_fail@plt+0x29c8>
   127b4:	and	r5, r5, r0
   127b8:	b	120ac <__assert_fail@plt+0xea8>
   127bc:	ldr	r7, [sp, #20]
   127c0:	mov	r2, #5
   127c4:	mov	r9, r1
   127c8:	movw	r1, #44844	; 0xaf2c
   127cc:	movt	r1, #1
   127d0:	bl	10fc4 <dcgettext@plt>
   127d4:	mov	r4, r0
   127d8:	ldr	r0, [r7]
   127dc:	bl	17f58 <__assert_fail@plt+0x6d54>
   127e0:	mov	r3, r0
   127e4:	mov	r2, r4
   127e8:	mov	r1, r9
   127ec:	mov	r0, #1
   127f0:	bl	1103c <error@plt>
   127f4:	movw	r1, #40724	; 0x9f14
   127f8:	movt	r1, #1
   127fc:	ldr	r3, [pc, #-1488]	; 12234 <__assert_fail@plt+0x1030>
   12800:	movw	r0, #45160	; 0xb068
   12804:	movt	r0, #1
   12808:	movw	r2, #1418	; 0x58a
   1280c:	bl	11204 <__assert_fail@plt>
   12810:	movw	r1, #40724	; 0x9f14
   12814:	movt	r1, #1
   12818:	ldr	r3, [pc, #-1516]	; 12234 <__assert_fail@plt+0x1030>
   1281c:	movw	r0, #45160	; 0xb068
   12820:	movt	r0, #1
   12824:	movw	r2, #1404	; 0x57c
   12828:	bl	11204 <__assert_fail@plt>
   1282c:	movw	r1, #45068	; 0xb00c
   12830:	movt	r1, #1
   12834:	mov	r2, #5
   12838:	mov	r0, #0
   1283c:	bl	10fc4 <dcgettext@plt>
   12840:	mov	r2, r0
   12844:	mov	r1, #0
   12848:	mov	r0, #1
   1284c:	bl	1103c <error@plt>
   12850:	movw	r1, #40724	; 0x9f14
   12854:	movt	r1, #1
   12858:	ldr	r3, [pc, #-1576]	; 12238 <__assert_fail@plt+0x1034>
   1285c:	movw	r0, #44860	; 0xaf3c
   12860:	movt	r0, #1
   12864:	movw	r2, #985	; 0x3d9
   12868:	bl	11204 <__assert_fail@plt>
   1286c:	mov	r0, #1
   12870:	mov	r1, #0
   12874:	strd	r0, [sp, #48]	; 0x30
   12878:	b	11dd8 <__assert_fail@plt+0xbd4>
   1287c:	ldr	r7, [sp, #48]	; 0x30
   12880:	mov	r2, #83	; 0x53
   12884:	ldr	r3, [pc, #-1612]	; 12240 <__assert_fail@plt+0x103c>
   12888:	ldr	r1, [sp, #64]	; 0x40
   1288c:	ldr	ip, [r7]
   12890:	sub	r3, r3, #228	; 0xe4
   12894:	str	ip, [sp]
   12898:	bl	18b48 <__assert_fail@plt+0x7944>
   1289c:	ldr	r7, [sp, #48]	; 0x30
   128a0:	mov	r2, #5
   128a4:	mov	r5, r1
   128a8:	movw	r1, #44844	; 0xaf2c
   128ac:	movt	r1, #1
   128b0:	bl	10fc4 <dcgettext@plt>
   128b4:	mov	r4, r0
   128b8:	ldr	r0, [r7]
   128bc:	bl	17f58 <__assert_fail@plt+0x6d54>
   128c0:	mov	r3, r0
   128c4:	mov	r2, r4
   128c8:	mov	r1, r5
   128cc:	mov	r0, #1
   128d0:	bl	1103c <error@plt>
   128d4:	ldr	r7, [sp, #20]
   128d8:	mov	r2, #119	; 0x77
   128dc:	ldr	r3, [pc, #-1704]	; 1223c <__assert_fail@plt+0x1038>
   128e0:	ldr	r1, [sp, #64]	; 0x40
   128e4:	ldr	ip, [r7]
   128e8:	str	ip, [sp]
   128ec:	bl	18b48 <__assert_fail@plt+0x7944>
   128f0:	ldr	r3, [pc, #-1720]	; 12240 <__assert_fail@plt+0x103c>
   128f4:	mov	r2, #106	; 0x6a
   128f8:	ldr	ip, [r7]
   128fc:	ldr	r1, [sp, #64]	; 0x40
   12900:	sub	r3, r3, #228	; 0xe4
   12904:	str	ip, [sp]
   12908:	bl	18b48 <__assert_fail@plt+0x7944>
   1290c:	mov	r2, #5
   12910:	movw	r1, #44772	; 0xaee4
   12914:	movt	r1, #1
   12918:	mov	r0, #0
   1291c:	bl	10fc4 <dcgettext@plt>
   12920:	ldr	r3, [r7]
   12924:	mov	r2, r0
   12928:	mov	r1, #0
   1292c:	mov	r0, #1
   12930:	ldrb	r3, [r3]
   12934:	bl	1103c <error@plt>
   12938:	ldr	r2, [r3, #20]
   1293c:	ldr	r0, [r3, #24]
   12940:	cmp	r2, r0
   12944:	addcc	r0, r2, #1
   12948:	strcc	r0, [r3, #20]
   1294c:	strbcc	r1, [r2]
   12950:	bcc	125a4 <__assert_fail@plt+0x13a0>
   12954:	mov	r0, r3
   12958:	bl	11168 <__overflow@plt>
   1295c:	b	125a4 <__assert_fail@plt+0x13a0>
   12960:	mov	fp, #0
   12964:	mov	lr, #0
   12968:	pop	{r1}		; (ldr r1, [sp], #4)
   1296c:	mov	r2, sp
   12970:	push	{r2}		; (str r2, [sp, #-4]!)
   12974:	push	{r0}		; (str r0, [sp, #-4]!)
   12978:	ldr	ip, [pc, #16]	; 12990 <__assert_fail@plt+0x178c>
   1297c:	push	{ip}		; (str ip, [sp, #-4]!)
   12980:	ldr	r0, [pc, #12]	; 12994 <__assert_fail@plt+0x1790>
   12984:	ldr	r3, [pc, #12]	; 12998 <__assert_fail@plt+0x1794>
   12988:	bl	1106c <__libc_start_main@plt>
   1298c:	bl	111ec <abort@plt>
   12990:	strdeq	r9, [r1], -r4
   12994:	andeq	r1, r1, r0, lsl r2
   12998:	muleq	r1, r4, sl
   1299c:	ldr	r3, [pc, #20]	; 129b8 <__assert_fail@plt+0x17b4>
   129a0:	ldr	r2, [pc, #20]	; 129bc <__assert_fail@plt+0x17b8>
   129a4:	add	r3, pc, r3
   129a8:	ldr	r2, [r3, r2]
   129ac:	cmp	r2, #0
   129b0:	bxeq	lr
   129b4:	b	11090 <__gmon_start__@plt>
   129b8:	andeq	r9, r1, r4, asr r6
   129bc:	andeq	r0, r0, ip, lsl #2
   129c0:	ldr	r0, [pc, #24]	; 129e0 <__assert_fail@plt+0x17dc>
   129c4:	ldr	r3, [pc, #24]	; 129e4 <__assert_fail@plt+0x17e0>
   129c8:	cmp	r3, r0
   129cc:	bxeq	lr
   129d0:	ldr	r3, [pc, #16]	; 129e8 <__assert_fail@plt+0x17e4>
   129d4:	cmp	r3, #0
   129d8:	bxeq	lr
   129dc:	bx	r3
   129e0:	andeq	ip, r2, r8, ror #2
   129e4:	andeq	ip, r2, r8, ror #2
   129e8:	andeq	r0, r0, r0
   129ec:	ldr	r0, [pc, #36]	; 12a18 <__assert_fail@plt+0x1814>
   129f0:	ldr	r1, [pc, #36]	; 12a1c <__assert_fail@plt+0x1818>
   129f4:	sub	r1, r1, r0
   129f8:	asr	r1, r1, #2
   129fc:	add	r1, r1, r1, lsr #31
   12a00:	asrs	r1, r1, #1
   12a04:	bxeq	lr
   12a08:	ldr	r3, [pc, #16]	; 12a20 <__assert_fail@plt+0x181c>
   12a0c:	cmp	r3, #0
   12a10:	bxeq	lr
   12a14:	bx	r3
   12a18:	andeq	ip, r2, r8, ror #2
   12a1c:	andeq	ip, r2, r8, ror #2
   12a20:	andeq	r0, r0, r0
   12a24:	push	{r4, lr}
   12a28:	ldr	r4, [pc, #24]	; 12a48 <__assert_fail@plt+0x1844>
   12a2c:	ldrb	r3, [r4]
   12a30:	cmp	r3, #0
   12a34:	popne	{r4, pc}
   12a38:	bl	129c0 <__assert_fail@plt+0x17bc>
   12a3c:	mov	r3, #1
   12a40:	strb	r3, [r4]
   12a44:	pop	{r4, pc}
   12a48:	andeq	ip, r2, ip, lsl #3
   12a4c:	b	129ec <__assert_fail@plt+0x17e8>
   12a50:	bx	lr
   12a54:	strd	r4, [sp, #-20]!	; 0xffffffec
   12a58:	movw	r3, #49552	; 0xc190
   12a5c:	movt	r3, #2
   12a60:	strd	r6, [sp, #8]
   12a64:	mov	ip, #0
   12a68:	mov	r4, r0
   12a6c:	str	lr, [sp, #16]
   12a70:	sub	sp, sp, #36	; 0x24
   12a74:	mov	r5, r1
   12a78:	ldr	r7, [r3]
   12a7c:	add	r6, sp, #27
   12a80:	strb	r2, [sp, #27]
   12a84:	ldr	r2, [r3, #4]
   12a88:	strb	ip, [sp, #28]
   12a8c:	sub	r7, r6, r7
   12a90:	cmp	r2, #10
   12a94:	beq	12ae8 <__assert_fail@plt+0x18e4>
   12a98:	cmp	r2, #16
   12a9c:	beq	12b5c <__assert_fail@plt+0x1958>
   12aa0:	cmp	r2, #8
   12aa4:	beq	12b30 <__assert_fail@plt+0x192c>
   12aa8:	cmp	r7, r6
   12aac:	bcs	12b94 <__assert_fail@plt+0x1990>
   12ab0:	mov	r3, #48	; 0x30
   12ab4:	strb	r3, [r6, #-1]!
   12ab8:	cmp	r7, r6
   12abc:	bne	12ab4 <__assert_fail@plt+0x18b0>
   12ac0:	movw	r3, #49540	; 0xc184
   12ac4:	movt	r3, #2
   12ac8:	ldr	r1, [r3]
   12acc:	mov	r0, r7
   12ad0:	bl	10f1c <fputs_unlocked@plt>
   12ad4:	add	sp, sp, #36	; 0x24
   12ad8:	ldrd	r4, [sp]
   12adc:	ldrd	r6, [sp, #8]
   12ae0:	add	sp, sp, #16
   12ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae8:	mov	r0, r4
   12aec:	mov	r1, r5
   12af0:	mov	r2, #10
   12af4:	mov	r3, #0
   12af8:	bl	19920 <__assert_fail@plt+0x871c>
   12afc:	add	ip, r2, #48	; 0x30
   12b00:	mov	r0, r4
   12b04:	mov	r1, r5
   12b08:	mov	r2, #10
   12b0c:	mov	r3, #0
   12b10:	strb	ip, [r6, #-1]!
   12b14:	bl	19920 <__assert_fail@plt+0x871c>
   12b18:	cmp	r5, #0
   12b1c:	mov	r5, r1
   12b20:	cmpeq	r4, #9
   12b24:	mov	r4, r0
   12b28:	bhi	12ae8 <__assert_fail@plt+0x18e4>
   12b2c:	b	12aa8 <__assert_fail@plt+0x18a4>
   12b30:	lsr	r2, r4, #3
   12b34:	and	r3, r4, #7
   12b38:	lsr	r1, r5, #3
   12b3c:	add	r3, r3, #48	; 0x30
   12b40:	orr	r2, r2, r5, lsl #29
   12b44:	mov	r5, r1
   12b48:	strb	r3, [r6, #-1]!
   12b4c:	mov	r4, r2
   12b50:	orrs	r3, r4, r5
   12b54:	bne	12b30 <__assert_fail@plt+0x192c>
   12b58:	b	12aa8 <__assert_fail@plt+0x18a4>
   12b5c:	movw	r0, #40540	; 0x9e5c
   12b60:	movt	r0, #1
   12b64:	and	r2, r4, #15
   12b68:	lsr	r3, r4, #4
   12b6c:	ldrb	r2, [r0, r2]
   12b70:	lsr	r1, r5, #4
   12b74:	orr	r3, r3, r5, lsl #28
   12b78:	mov	r5, r1
   12b7c:	mov	r4, r3
   12b80:	orrs	r3, r4, r5
   12b84:	strb	r2, [r6, #-1]!
   12b88:	bne	12b64 <__assert_fail@plt+0x1960>
   12b8c:	cmp	r7, r6
   12b90:	bcc	12ab0 <__assert_fail@plt+0x18ac>
   12b94:	mov	r7, r6
   12b98:	b	12ac0 <__assert_fail@plt+0x18bc>
   12b9c:	strd	r4, [sp, #-12]!
   12ba0:	mov	r4, r0
   12ba4:	str	lr, [sp, #8]
   12ba8:	sub	sp, sp, #12
   12bac:	ldrb	r0, [r0]
   12bb0:	cmp	r0, #0
   12bb4:	beq	12c00 <__assert_fail@plt+0x19fc>
   12bb8:	cmp	r0, #43	; 0x2b
   12bbc:	mov	r5, r1
   12bc0:	addeq	r4, r4, #1
   12bc4:	mov	r1, #46	; 0x2e
   12bc8:	mov	r0, r4
   12bcc:	bl	110cc <strchr@plt>
   12bd0:	cmp	r0, #0
   12bd4:	movne	r2, #10
   12bd8:	beq	12c10 <__assert_fail@plt+0x1a0c>
   12bdc:	movw	ip, #40560	; 0x9e70
   12be0:	movt	ip, #1
   12be4:	mov	r3, r5
   12be8:	mov	r0, r4
   12bec:	mov	r1, #0
   12bf0:	str	ip, [sp]
   12bf4:	bl	18bd8 <__assert_fail@plt+0x79d4>
   12bf8:	clz	r0, r0
   12bfc:	lsr	r0, r0, #5
   12c00:	add	sp, sp, #12
   12c04:	ldrd	r4, [sp]
   12c08:	add	sp, sp, #8
   12c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c10:	ldrb	r3, [r4]
   12c14:	cmp	r3, #48	; 0x30
   12c18:	movne	r2, #8
   12c1c:	bne	12bdc <__assert_fail@plt+0x19d8>
   12c20:	ldrb	r3, [r4, #1]
   12c24:	and	r3, r3, #223	; 0xdf
   12c28:	cmp	r3, #88	; 0x58
   12c2c:	movne	r2, #8
   12c30:	moveq	r2, #16
   12c34:	b	12bdc <__assert_fail@plt+0x19d8>
   12c38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c3c:	mov	r5, #0
   12c40:	mov	r4, r0
   12c44:	strd	r6, [sp, #8]
   12c48:	mov	r7, #0
   12c4c:	mov	r0, r1
   12c50:	cmp	r5, r7
   12c54:	mov	r1, r7
   12c58:	strd	r8, [sp, #16]
   12c5c:	strd	sl, [sp, #24]
   12c60:	cmpeq	r4, r0
   12c64:	str	lr, [sp, #32]
   12c68:	sub	sp, sp, #44	; 0x2c
   12c6c:	ldr	r8, [sp, #84]	; 0x54
   12c70:	strd	r4, [sp]
   12c74:	strd	r0, [sp, #8]
   12c78:	bls	12d54 <__assert_fail@plt+0x1b50>
   12c7c:	asr	r1, r8, #31
   12c80:	subs	r6, r4, #1
   12c84:	mov	r9, r2
   12c88:	movw	r2, #40564	; 0x9e74
   12c8c:	movt	r2, #1
   12c90:	sbc	r3, r5, #0
   12c94:	mov	r0, r8
   12c98:	movw	sl, #40568	; 0x9e78
   12c9c:	movt	sl, #1
   12ca0:	str	r2, [sp, #28]
   12ca4:	mul	r2, r6, r1
   12ca8:	mov	fp, sl
   12cac:	umull	r6, r7, r6, r8
   12cb0:	strd	r0, [sp, #16]
   12cb4:	movw	r1, #39708	; 0x9b1c
   12cb8:	movt	r1, #1
   12cbc:	mla	r3, r8, r3, r2
   12cc0:	str	r1, [sp, #24]
   12cc4:	add	r7, r3, r7
   12cc8:	b	12d20 <__assert_fail@plt+0x1b1c>
   12ccc:	ldr	r3, [sp, #24]
   12cd0:	cmp	r1, #32
   12cd4:	mov	r0, #0
   12cd8:	add	r2, r3, r1, lsl #2
   12cdc:	bls	12cec <__assert_fail@plt+0x1ae8>
   12ce0:	add	r2, sp, #36	; 0x24
   12ce4:	strb	r1, [sp, #36]	; 0x24
   12ce8:	strb	r0, [sp, #37]	; 0x25
   12cec:	ldr	r3, [sp, #80]	; 0x50
   12cf0:	sub	r1, r8, sl
   12cf4:	mov	r0, fp
   12cf8:	mov	r8, sl
   12cfc:	add	r1, r1, r3
   12d00:	bl	18a58 <__assert_fail@plt+0x7854>
   12d04:	ldrd	r2, [sp, #16]
   12d08:	subs	r6, r6, r2
   12d0c:	sbc	r7, r7, r3
   12d10:	ldrd	r2, [sp, #8]
   12d14:	cmp	r5, r3
   12d18:	cmpeq	r4, r2
   12d1c:	beq	12d54 <__assert_fail@plt+0x1b50>
   12d20:	subs	r4, r4, #1
   12d24:	mov	r0, r6
   12d28:	ldrd	r2, [sp]
   12d2c:	mov	r1, r7
   12d30:	sbc	r5, r5, #0
   12d34:	bl	19920 <__assert_fail@plt+0x871c>
   12d38:	ldrb	r1, [r9], #1
   12d3c:	mov	sl, r0
   12d40:	and	r1, r1, #127	; 0x7f
   12d44:	cmp	r1, #127	; 0x7f
   12d48:	bne	12ccc <__assert_fail@plt+0x1ac8>
   12d4c:	ldr	r2, [sp, #28]
   12d50:	b	12cec <__assert_fail@plt+0x1ae8>
   12d54:	add	sp, sp, #44	; 0x2c
   12d58:	ldrd	r4, [sp]
   12d5c:	ldrd	r6, [sp, #8]
   12d60:	ldrd	r8, [sp, #16]
   12d64:	ldrd	sl, [sp, #24]
   12d68:	add	sp, sp, #32
   12d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d74:	mov	r5, #0
   12d78:	mov	r4, r0
   12d7c:	strd	r6, [sp, #8]
   12d80:	mov	r7, #0
   12d84:	mov	r0, r1
   12d88:	cmp	r5, r7
   12d8c:	mov	r1, r7
   12d90:	strd	r8, [sp, #16]
   12d94:	strd	sl, [sp, #24]
   12d98:	cmpeq	r4, r0
   12d9c:	str	lr, [sp, #32]
   12da0:	sub	sp, sp, #44	; 0x2c
   12da4:	ldr	r8, [sp, #84]	; 0x54
   12da8:	strd	r4, [sp]
   12dac:	strd	r0, [sp, #8]
   12db0:	str	r3, [sp, #20]
   12db4:	bls	12e78 <__assert_fail@plt+0x1c74>
   12db8:	asr	r1, r8, #31
   12dbc:	subs	r6, r4, #1
   12dc0:	mov	r9, r2
   12dc4:	sbc	r3, r5, #0
   12dc8:	mov	r0, r8
   12dcc:	movw	fp, #49552	; 0xc190
   12dd0:	movt	fp, #2
   12dd4:	mul	r2, r6, r1
   12dd8:	strd	r0, [sp, #24]
   12ddc:	umull	r6, r7, r6, r8
   12de0:	mla	r3, r8, r3, r2
   12de4:	add	r7, r3, r7
   12de8:	b	12e20 <__assert_fail@plt+0x1c1c>
   12dec:	mov	ip, r9
   12df0:	ldrd	r2, [ip], #8
   12df4:	mov	r9, ip
   12df8:	mov	r8, sl
   12dfc:	ldr	r0, [sp, #20]
   12e00:	bl	18a58 <__assert_fail@plt+0x7854>
   12e04:	ldrd	r2, [sp, #24]
   12e08:	subs	r6, r6, r2
   12e0c:	sbc	r7, r7, r3
   12e10:	ldrd	r2, [sp, #8]
   12e14:	cmp	r5, r3
   12e18:	cmpeq	r4, r2
   12e1c:	beq	12e78 <__assert_fail@plt+0x1c74>
   12e20:	subs	r4, r4, #1
   12e24:	mov	r0, r6
   12e28:	ldrd	r2, [sp]
   12e2c:	mov	r1, r7
   12e30:	sbc	r5, r5, #0
   12e34:	bl	19920 <__assert_fail@plt+0x871c>
   12e38:	ldrb	r3, [fp, #8]
   12e3c:	sub	r1, r8, r0
   12e40:	mov	sl, r0
   12e44:	ldr	r2, [sp, #80]	; 0x50
   12e48:	cmp	r3, #0
   12e4c:	add	r1, r1, r2
   12e50:	beq	12dec <__assert_fail@plt+0x1be8>
   12e54:	add	ip, r9, #8
   12e58:	add	r2, sp, #31
   12e5c:	mov	r3, ip
   12e60:	ldrb	r0, [r3, #-1]!
   12e64:	cmp	r3, r9
   12e68:	strb	r0, [r2, #1]!
   12e6c:	bne	12e60 <__assert_fail@plt+0x1c5c>
   12e70:	ldrd	r2, [sp, #32]
   12e74:	b	12df4 <__assert_fail@plt+0x1bf0>
   12e78:	add	sp, sp, #44	; 0x2c
   12e7c:	ldrd	r4, [sp]
   12e80:	ldrd	r6, [sp, #8]
   12e84:	ldrd	r8, [sp, #16]
   12e88:	ldrd	sl, [sp, #24]
   12e8c:	add	sp, sp, #32
   12e90:	pop	{pc}		; (ldr pc, [sp], #4)
   12e94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12e98:	mov	r5, #0
   12e9c:	mov	r4, r1
   12ea0:	strd	r6, [sp, #8]
   12ea4:	strd	sl, [sp, #24]
   12ea8:	mov	fp, #0
   12eac:	mov	sl, r0
   12eb0:	cmp	fp, r5
   12eb4:	mov	r0, r1
   12eb8:	strd	r8, [sp, #16]
   12ebc:	mov	r1, r5
   12ec0:	str	lr, [sp, #32]
   12ec4:	sub	sp, sp, #36	; 0x24
   12ec8:	cmpeq	sl, r4
   12ecc:	ldr	r6, [sp, #76]	; 0x4c
   12ed0:	strd	sl, [sp]
   12ed4:	strd	r0, [sp, #8]
   12ed8:	str	r3, [sp, #20]
   12edc:	bls	12fa0 <__assert_fail@plt+0x1d9c>
   12ee0:	asr	r1, r6, #31
   12ee4:	subs	r4, sl, #1
   12ee8:	mov	r7, r2
   12eec:	sbc	r3, fp, #0
   12ef0:	mov	r0, r6
   12ef4:	movw	r9, #49552	; 0xc190
   12ef8:	movt	r9, #2
   12efc:	mul	r2, r4, r1
   12f00:	strd	r0, [sp, #24]
   12f04:	umull	r4, r5, r4, r6
   12f08:	mla	r3, r6, r3, r2
   12f0c:	add	r5, r3, r5
   12f10:	b	12f44 <__assert_fail@plt+0x1d40>
   12f14:	ldr	r2, [r7]
   12f18:	mov	r6, r3
   12f1c:	add	r7, r7, #4
   12f20:	ldr	r0, [sp, #20]
   12f24:	bl	18a58 <__assert_fail@plt+0x7854>
   12f28:	ldrd	r2, [sp, #24]
   12f2c:	subs	r4, r4, r2
   12f30:	sbc	r5, r5, r3
   12f34:	ldrd	r2, [sp, #8]
   12f38:	cmp	fp, r3
   12f3c:	cmpeq	sl, r2
   12f40:	beq	12fa0 <__assert_fail@plt+0x1d9c>
   12f44:	subs	sl, sl, #1
   12f48:	mov	r0, r4
   12f4c:	ldrd	r2, [sp]
   12f50:	mov	r1, r5
   12f54:	sbc	fp, fp, #0
   12f58:	bl	19920 <__assert_fail@plt+0x871c>
   12f5c:	ldrb	r2, [r9, #8]
   12f60:	sub	r1, r6, r0
   12f64:	mov	r3, r0
   12f68:	ldr	r0, [sp, #72]	; 0x48
   12f6c:	cmp	r2, #0
   12f70:	add	r1, r1, r0
   12f74:	beq	12f14 <__assert_fail@plt+0x1d10>
   12f78:	ldrb	r2, [r7, #3]
   12f7c:	ldrb	ip, [r7, #2]
   12f80:	ldrb	r0, [r7, #1]
   12f84:	bfi	r8, r2, #0, #8
   12f88:	ldrb	r2, [r7]
   12f8c:	bfi	r8, ip, #8, #8
   12f90:	bfi	r8, r0, #16, #8
   12f94:	bfi	r8, r2, #24, #8
   12f98:	mov	r2, r8
   12f9c:	b	12f18 <__assert_fail@plt+0x1d14>
   12fa0:	add	sp, sp, #36	; 0x24
   12fa4:	ldrd	r4, [sp]
   12fa8:	ldrd	r6, [sp, #8]
   12fac:	ldrd	r8, [sp, #16]
   12fb0:	ldrd	sl, [sp, #24]
   12fb4:	add	sp, sp, #32
   12fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12fc0:	mov	r5, #0
   12fc4:	mov	r4, r1
   12fc8:	strd	r6, [sp, #8]
   12fcc:	strd	sl, [sp, #24]
   12fd0:	mov	fp, #0
   12fd4:	mov	sl, r0
   12fd8:	cmp	fp, r5
   12fdc:	mov	r0, r1
   12fe0:	strd	r8, [sp, #16]
   12fe4:	mov	r1, r5
   12fe8:	str	lr, [sp, #32]
   12fec:	sub	sp, sp, #36	; 0x24
   12ff0:	cmpeq	sl, r4
   12ff4:	ldr	r6, [sp, #76]	; 0x4c
   12ff8:	strd	sl, [sp]
   12ffc:	strd	r0, [sp, #8]
   13000:	str	r3, [sp, #20]
   13004:	bls	130c8 <__assert_fail@plt+0x1ec4>
   13008:	asr	r1, r6, #31
   1300c:	subs	r4, sl, #1
   13010:	mov	r7, r2
   13014:	sbc	r3, fp, #0
   13018:	mov	r0, r6
   1301c:	movw	r9, #49552	; 0xc190
   13020:	movt	r9, #2
   13024:	mul	r2, r4, r1
   13028:	strd	r0, [sp, #24]
   1302c:	umull	r4, r5, r4, r6
   13030:	mla	r3, r6, r3, r2
   13034:	add	r5, r3, r5
   13038:	b	1306c <__assert_fail@plt+0x1e68>
   1303c:	ldr	r2, [r7]
   13040:	mov	r6, r3
   13044:	add	r7, r7, #4
   13048:	ldr	r0, [sp, #20]
   1304c:	bl	18a58 <__assert_fail@plt+0x7854>
   13050:	ldrd	r2, [sp, #24]
   13054:	subs	r4, r4, r2
   13058:	sbc	r5, r5, r3
   1305c:	ldrd	r2, [sp, #8]
   13060:	cmp	fp, r3
   13064:	cmpeq	sl, r2
   13068:	beq	130c8 <__assert_fail@plt+0x1ec4>
   1306c:	subs	sl, sl, #1
   13070:	mov	r0, r4
   13074:	ldrd	r2, [sp]
   13078:	mov	r1, r5
   1307c:	sbc	fp, fp, #0
   13080:	bl	19920 <__assert_fail@plt+0x871c>
   13084:	ldrb	r2, [r9, #8]
   13088:	sub	r1, r6, r0
   1308c:	mov	r3, r0
   13090:	ldr	r0, [sp, #72]	; 0x48
   13094:	cmp	r2, #0
   13098:	add	r1, r1, r0
   1309c:	beq	1303c <__assert_fail@plt+0x1e38>
   130a0:	ldrb	r2, [r7, #3]
   130a4:	ldrb	ip, [r7, #2]
   130a8:	ldrb	r0, [r7, #1]
   130ac:	bfi	r8, r2, #0, #8
   130b0:	ldrb	r2, [r7]
   130b4:	bfi	r8, ip, #8, #8
   130b8:	bfi	r8, r0, #16, #8
   130bc:	bfi	r8, r2, #24, #8
   130c0:	mov	r2, r8
   130c4:	b	13040 <__assert_fail@plt+0x1e3c>
   130c8:	add	sp, sp, #36	; 0x24
   130cc:	ldrd	r4, [sp]
   130d0:	ldrd	r6, [sp, #8]
   130d4:	ldrd	r8, [sp, #16]
   130d8:	ldrd	sl, [sp, #24]
   130dc:	add	sp, sp, #32
   130e0:	pop	{pc}		; (ldr pc, [sp], #4)
   130e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130e8:	mov	r5, #0
   130ec:	mov	r4, r1
   130f0:	strd	r6, [sp, #8]
   130f4:	strd	r8, [sp, #16]
   130f8:	mov	r9, #0
   130fc:	mov	r8, r0
   13100:	cmp	r9, r5
   13104:	mov	r0, r1
   13108:	strd	sl, [sp, #24]
   1310c:	mov	r1, r5
   13110:	str	lr, [sp, #32]
   13114:	sub	sp, sp, #36	; 0x24
   13118:	cmpeq	r8, r4
   1311c:	ldr	r6, [sp, #76]	; 0x4c
   13120:	strd	r8, [sp]
   13124:	strd	r0, [sp, #8]
   13128:	str	r3, [sp, #20]
   1312c:	bls	131e0 <__assert_fail@plt+0x1fdc>
   13130:	asr	r1, r6, #31
   13134:	subs	r4, r8, #1
   13138:	mov	r7, r2
   1313c:	sbc	r3, r9, #0
   13140:	mov	r0, r6
   13144:	movw	fp, #49552	; 0xc190
   13148:	movt	fp, #2
   1314c:	mul	r2, r4, r1
   13150:	strd	r0, [sp, #24]
   13154:	umull	r4, r5, r4, r6
   13158:	mla	r3, r6, r3, r2
   1315c:	add	r5, r3, r5
   13160:	b	13194 <__assert_fail@plt+0x1f90>
   13164:	ldrh	r2, [r7]
   13168:	mov	r6, r3
   1316c:	add	r7, r7, #2
   13170:	ldr	r0, [sp, #20]
   13174:	bl	18a58 <__assert_fail@plt+0x7854>
   13178:	ldrd	r2, [sp, #24]
   1317c:	subs	r4, r4, r2
   13180:	sbc	r5, r5, r3
   13184:	ldrd	r2, [sp, #8]
   13188:	cmp	r9, r3
   1318c:	cmpeq	r8, r2
   13190:	beq	131e0 <__assert_fail@plt+0x1fdc>
   13194:	subs	r8, r8, #1
   13198:	mov	r0, r4
   1319c:	ldrd	r2, [sp]
   131a0:	mov	r1, r5
   131a4:	sbc	r9, r9, #0
   131a8:	bl	19920 <__assert_fail@plt+0x871c>
   131ac:	ldrb	r2, [fp, #8]
   131b0:	sub	r1, r6, r0
   131b4:	mov	r3, r0
   131b8:	ldr	r0, [sp, #72]	; 0x48
   131bc:	cmp	r2, #0
   131c0:	add	r1, r1, r0
   131c4:	beq	13164 <__assert_fail@plt+0x1f60>
   131c8:	ldrb	r0, [r7, #1]
   131cc:	ldrb	r2, [r7]
   131d0:	bfi	sl, r0, #0, #8
   131d4:	bfi	sl, r2, #8, #8
   131d8:	uxth	r2, sl
   131dc:	b	13168 <__assert_fail@plt+0x1f64>
   131e0:	add	sp, sp, #36	; 0x24
   131e4:	ldrd	r4, [sp]
   131e8:	ldrd	r6, [sp, #8]
   131ec:	ldrd	r8, [sp, #16]
   131f0:	ldrd	sl, [sp, #24]
   131f4:	add	sp, sp, #32
   131f8:	pop	{pc}		; (ldr pc, [sp], #4)
   131fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13200:	mov	r5, #0
   13204:	mov	r4, r1
   13208:	strd	r6, [sp, #8]
   1320c:	strd	r8, [sp, #16]
   13210:	mov	r9, #0
   13214:	mov	r8, r0
   13218:	cmp	r9, r5
   1321c:	mov	r0, r1
   13220:	strd	sl, [sp, #24]
   13224:	mov	r1, r5
   13228:	str	lr, [sp, #32]
   1322c:	sub	sp, sp, #36	; 0x24
   13230:	cmpeq	r8, r4
   13234:	ldr	r6, [sp, #76]	; 0x4c
   13238:	strd	r8, [sp]
   1323c:	strd	r0, [sp, #8]
   13240:	str	r3, [sp, #20]
   13244:	bls	132f8 <__assert_fail@plt+0x20f4>
   13248:	asr	r1, r6, #31
   1324c:	subs	r4, r8, #1
   13250:	mov	r7, r2
   13254:	sbc	r3, r9, #0
   13258:	mov	r0, r6
   1325c:	movw	fp, #49552	; 0xc190
   13260:	movt	fp, #2
   13264:	mul	r2, r4, r1
   13268:	strd	r0, [sp, #24]
   1326c:	umull	r4, r5, r4, r6
   13270:	mla	r3, r6, r3, r2
   13274:	add	r5, r3, r5
   13278:	b	132ac <__assert_fail@plt+0x20a8>
   1327c:	ldrsh	r2, [r7]
   13280:	mov	r6, r3
   13284:	add	r7, r7, #2
   13288:	ldr	r0, [sp, #20]
   1328c:	bl	18a58 <__assert_fail@plt+0x7854>
   13290:	ldrd	r2, [sp, #24]
   13294:	subs	r4, r4, r2
   13298:	sbc	r5, r5, r3
   1329c:	ldrd	r2, [sp, #8]
   132a0:	cmp	r9, r3
   132a4:	cmpeq	r8, r2
   132a8:	beq	132f8 <__assert_fail@plt+0x20f4>
   132ac:	subs	r8, r8, #1
   132b0:	mov	r0, r4
   132b4:	ldrd	r2, [sp]
   132b8:	mov	r1, r5
   132bc:	sbc	r9, r9, #0
   132c0:	bl	19920 <__assert_fail@plt+0x871c>
   132c4:	ldrb	r2, [fp, #8]
   132c8:	sub	r1, r6, r0
   132cc:	mov	r3, r0
   132d0:	ldr	r0, [sp, #72]	; 0x48
   132d4:	cmp	r2, #0
   132d8:	add	r1, r1, r0
   132dc:	beq	1327c <__assert_fail@plt+0x2078>
   132e0:	ldrb	r0, [r7, #1]
   132e4:	ldrb	r2, [r7]
   132e8:	bfi	sl, r0, #0, #8
   132ec:	bfi	sl, r2, #8, #8
   132f0:	sxth	r2, sl
   132f4:	b	13280 <__assert_fail@plt+0x207c>
   132f8:	add	sp, sp, #36	; 0x24
   132fc:	ldrd	r4, [sp]
   13300:	ldrd	r6, [sp, #8]
   13304:	ldrd	r8, [sp, #16]
   13308:	ldrd	sl, [sp, #24]
   1330c:	add	sp, sp, #32
   13310:	pop	{pc}		; (ldr pc, [sp], #4)
   13314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13318:	mov	r5, #0
   1331c:	mov	r4, r0
   13320:	strd	r6, [sp, #8]
   13324:	mov	r7, #0
   13328:	mov	r6, r1
   1332c:	cmp	r5, r7
   13330:	strd	r8, [sp, #16]
   13334:	strd	sl, [sp, #24]
   13338:	cmpeq	r0, r1
   1333c:	str	lr, [sp, #32]
   13340:	sub	sp, sp, #28
   13344:	ldr	r8, [sp, #68]	; 0x44
   13348:	strd	r4, [sp]
   1334c:	strd	r6, [sp, #8]
   13350:	str	r3, [sp, #20]
   13354:	bls	133cc <__assert_fail@plt+0x21c8>
   13358:	asr	fp, r8, #31
   1335c:	subs	r6, r0, #1
   13360:	mov	r9, r2
   13364:	sbc	r3, r5, #0
   13368:	mov	sl, r8
   1336c:	mul	r2, r6, fp
   13370:	umull	r6, r7, r6, r8
   13374:	mla	r3, r8, r3, r2
   13378:	add	r7, r3, r7
   1337c:	subs	r4, r4, #1
   13380:	mov	r0, r6
   13384:	ldrd	r2, [sp]
   13388:	mov	r1, r7
   1338c:	sbc	r5, r5, #0
   13390:	bl	19920 <__assert_fail@plt+0x871c>
   13394:	mov	r3, r0
   13398:	sub	r1, r8, r0
   1339c:	ldrb	r2, [r9], #1
   133a0:	mov	r8, r3
   133a4:	ldr	r0, [sp, #20]
   133a8:	ldr	r3, [sp, #64]	; 0x40
   133ac:	add	r1, r1, r3
   133b0:	bl	18a58 <__assert_fail@plt+0x7854>
   133b4:	ldrd	r2, [sp, #8]
   133b8:	subs	r6, r6, sl
   133bc:	sbc	r7, r7, fp
   133c0:	cmp	r5, r3
   133c4:	cmpeq	r4, r2
   133c8:	bne	1337c <__assert_fail@plt+0x2178>
   133cc:	add	sp, sp, #28
   133d0:	ldrd	r4, [sp]
   133d4:	ldrd	r6, [sp, #8]
   133d8:	ldrd	r8, [sp, #16]
   133dc:	ldrd	sl, [sp, #24]
   133e0:	add	sp, sp, #32
   133e4:	pop	{pc}		; (ldr pc, [sp], #4)
   133e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   133ec:	mov	r5, #0
   133f0:	mov	r4, r0
   133f4:	strd	r6, [sp, #8]
   133f8:	mov	r7, #0
   133fc:	mov	r6, r1
   13400:	cmp	r5, r7
   13404:	strd	r8, [sp, #16]
   13408:	strd	sl, [sp, #24]
   1340c:	cmpeq	r0, r1
   13410:	str	lr, [sp, #32]
   13414:	sub	sp, sp, #28
   13418:	ldr	r8, [sp, #68]	; 0x44
   1341c:	strd	r4, [sp]
   13420:	strd	r6, [sp, #8]
   13424:	str	r3, [sp, #20]
   13428:	bls	134a0 <__assert_fail@plt+0x229c>
   1342c:	asr	fp, r8, #31
   13430:	subs	r6, r0, #1
   13434:	mov	r9, r2
   13438:	sbc	r3, r5, #0
   1343c:	mov	sl, r8
   13440:	mul	r2, r6, fp
   13444:	umull	r6, r7, r6, r8
   13448:	mla	r3, r8, r3, r2
   1344c:	add	r7, r3, r7
   13450:	subs	r4, r4, #1
   13454:	mov	r0, r6
   13458:	ldrd	r2, [sp]
   1345c:	mov	r1, r7
   13460:	sbc	r5, r5, #0
   13464:	bl	19920 <__assert_fail@plt+0x871c>
   13468:	mov	r3, r0
   1346c:	sub	r1, r8, r0
   13470:	ldrsb	r2, [r9], #1
   13474:	mov	r8, r3
   13478:	ldr	r0, [sp, #20]
   1347c:	ldr	r3, [sp, #64]	; 0x40
   13480:	add	r1, r1, r3
   13484:	bl	18a58 <__assert_fail@plt+0x7854>
   13488:	ldrd	r2, [sp, #8]
   1348c:	subs	r6, r6, sl
   13490:	sbc	r7, r7, fp
   13494:	cmp	r5, r3
   13498:	cmpeq	r4, r2
   1349c:	bne	13450 <__assert_fail@plt+0x224c>
   134a0:	add	sp, sp, #28
   134a4:	ldrd	r4, [sp]
   134a8:	ldrd	r6, [sp, #8]
   134ac:	ldrd	r8, [sp, #16]
   134b0:	ldrd	sl, [sp, #24]
   134b4:	add	sp, sp, #32
   134b8:	pop	{pc}		; (ldr pc, [sp], #4)
   134bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134c0:	mov	r5, #0
   134c4:	mov	r4, r1
   134c8:	strd	r6, [sp, #8]
   134cc:	strd	sl, [sp, #24]
   134d0:	mov	fp, #0
   134d4:	mov	sl, r0
   134d8:	cmp	fp, r5
   134dc:	mov	r0, r1
   134e0:	strd	r8, [sp, #16]
   134e4:	mov	r1, r5
   134e8:	str	lr, [sp, #32]
   134ec:	sub	sp, sp, #76	; 0x4c
   134f0:	cmpeq	sl, r4
   134f4:	ldr	r6, [sp, #116]	; 0x74
   134f8:	strd	sl, [sp]
   134fc:	strd	r0, [sp, #8]
   13500:	bls	135f0 <__assert_fail@plt+0x23ec>
   13504:	asr	r1, r6, #31
   13508:	subs	r4, sl, #1
   1350c:	mov	r8, r2
   13510:	movw	r2, #49552	; 0xc190
   13514:	movt	r2, #2
   13518:	sbc	r3, fp, #0
   1351c:	mov	r0, r6
   13520:	movw	r9, #40568	; 0x9e78
   13524:	movt	r9, #1
   13528:	str	r2, [sp, #28]
   1352c:	mul	r2, r4, r1
   13530:	umull	r4, r5, r4, r6
   13534:	strd	r0, [sp, #16]
   13538:	mla	r3, r6, r3, r2
   1353c:	add	r5, r3, r5
   13540:	b	13594 <__assert_fail@plt+0x2390>
   13544:	mov	ip, r8
   13548:	vldmia	ip!, {d0}
   1354c:	mov	r3, #0
   13550:	mov	r1, #40	; 0x28
   13554:	mov	r2, r3
   13558:	add	r0, sp, #32
   1355c:	mov	r8, ip
   13560:	mov	r6, lr
   13564:	bl	15b20 <__assert_fail@plt+0x491c>
   13568:	add	r2, sp, #32
   1356c:	mov	r1, r7
   13570:	mov	r0, r9
   13574:	bl	18a58 <__assert_fail@plt+0x7854>
   13578:	ldrd	r2, [sp, #16]
   1357c:	subs	r4, r4, r2
   13580:	sbc	r5, r5, r3
   13584:	ldrd	r2, [sp, #8]
   13588:	cmp	fp, r3
   1358c:	cmpeq	sl, r2
   13590:	beq	135f0 <__assert_fail@plt+0x23ec>
   13594:	subs	sl, sl, #1
   13598:	mov	r0, r4
   1359c:	ldrd	r2, [sp]
   135a0:	mov	r1, r5
   135a4:	sbc	fp, fp, #0
   135a8:	bl	19920 <__assert_fail@plt+0x871c>
   135ac:	ldr	r3, [sp, #28]
   135b0:	sub	r7, r6, r0
   135b4:	mov	lr, r0
   135b8:	ldr	r2, [sp, #112]	; 0x70
   135bc:	ldrb	r3, [r3, #8]
   135c0:	add	r7, r7, r2
   135c4:	cmp	r3, #0
   135c8:	beq	13544 <__assert_fail@plt+0x2340>
   135cc:	add	ip, r8, #8
   135d0:	add	r2, sp, #31
   135d4:	mov	r3, ip
   135d8:	ldrb	r1, [r3, #-1]!
   135dc:	cmp	r3, r8
   135e0:	strb	r1, [r2, #1]!
   135e4:	bne	135d8 <__assert_fail@plt+0x23d4>
   135e8:	vldr	d0, [sp, #32]
   135ec:	b	1354c <__assert_fail@plt+0x2348>
   135f0:	add	sp, sp, #76	; 0x4c
   135f4:	ldrd	r4, [sp]
   135f8:	ldrd	r6, [sp, #8]
   135fc:	ldrd	r8, [sp, #16]
   13600:	ldrd	sl, [sp, #24]
   13604:	add	sp, sp, #32
   13608:	pop	{pc}		; (ldr pc, [sp], #4)
   1360c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13610:	mov	r5, #0
   13614:	mov	r4, r1
   13618:	strd	r6, [sp, #8]
   1361c:	strd	sl, [sp, #24]
   13620:	mov	fp, #0
   13624:	mov	sl, r0
   13628:	cmp	fp, r5
   1362c:	mov	r0, r1
   13630:	strd	r8, [sp, #16]
   13634:	mov	r1, r5
   13638:	str	lr, [sp, #32]
   1363c:	sub	sp, sp, #76	; 0x4c
   13640:	cmpeq	sl, r4
   13644:	ldr	r6, [sp, #116]	; 0x74
   13648:	strd	sl, [sp]
   1364c:	strd	r0, [sp, #8]
   13650:	bls	13740 <__assert_fail@plt+0x253c>
   13654:	asr	r1, r6, #31
   13658:	subs	r4, sl, #1
   1365c:	mov	r8, r2
   13660:	movw	r2, #49552	; 0xc190
   13664:	movt	r2, #2
   13668:	sbc	r3, fp, #0
   1366c:	mov	r0, r6
   13670:	movw	r9, #40568	; 0x9e78
   13674:	movt	r9, #1
   13678:	str	r2, [sp, #28]
   1367c:	mul	r2, r4, r1
   13680:	umull	r4, r5, r4, r6
   13684:	strd	r0, [sp, #16]
   13688:	mla	r3, r6, r3, r2
   1368c:	add	r5, r3, r5
   13690:	b	136e4 <__assert_fail@plt+0x24e0>
   13694:	mov	ip, r8
   13698:	vldmia	ip!, {d0}
   1369c:	mov	r3, #0
   136a0:	mov	r1, #40	; 0x28
   136a4:	mov	r2, r3
   136a8:	add	r0, sp, #32
   136ac:	mov	r8, ip
   136b0:	mov	r6, lr
   136b4:	bl	15658 <__assert_fail@plt+0x4454>
   136b8:	add	r2, sp, #32
   136bc:	mov	r1, r7
   136c0:	mov	r0, r9
   136c4:	bl	18a58 <__assert_fail@plt+0x7854>
   136c8:	ldrd	r2, [sp, #16]
   136cc:	subs	r4, r4, r2
   136d0:	sbc	r5, r5, r3
   136d4:	ldrd	r2, [sp, #8]
   136d8:	cmp	fp, r3
   136dc:	cmpeq	sl, r2
   136e0:	beq	13740 <__assert_fail@plt+0x253c>
   136e4:	subs	sl, sl, #1
   136e8:	mov	r0, r4
   136ec:	ldrd	r2, [sp]
   136f0:	mov	r1, r5
   136f4:	sbc	fp, fp, #0
   136f8:	bl	19920 <__assert_fail@plt+0x871c>
   136fc:	ldr	r3, [sp, #28]
   13700:	sub	r7, r6, r0
   13704:	mov	lr, r0
   13708:	ldr	r2, [sp, #112]	; 0x70
   1370c:	ldrb	r3, [r3, #8]
   13710:	add	r7, r7, r2
   13714:	cmp	r3, #0
   13718:	beq	13694 <__assert_fail@plt+0x2490>
   1371c:	add	ip, r8, #8
   13720:	add	r2, sp, #31
   13724:	mov	r3, ip
   13728:	ldrb	r1, [r3, #-1]!
   1372c:	cmp	r3, r8
   13730:	strb	r1, [r2, #1]!
   13734:	bne	13728 <__assert_fail@plt+0x2524>
   13738:	vldr	d0, [sp, #32]
   1373c:	b	1369c <__assert_fail@plt+0x2498>
   13740:	add	sp, sp, #76	; 0x4c
   13744:	ldrd	r4, [sp]
   13748:	ldrd	r6, [sp, #8]
   1374c:	ldrd	r8, [sp, #16]
   13750:	ldrd	sl, [sp, #24]
   13754:	add	sp, sp, #32
   13758:	pop	{pc}		; (ldr pc, [sp], #4)
   1375c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13760:	mov	r5, #0
   13764:	mov	r4, r1
   13768:	strd	r6, [sp, #8]
   1376c:	strd	sl, [sp, #24]
   13770:	mov	fp, #0
   13774:	mov	sl, r0
   13778:	cmp	fp, r5
   1377c:	mov	r0, r1
   13780:	strd	r8, [sp, #16]
   13784:	mov	r1, r5
   13788:	str	lr, [sp, #32]
   1378c:	sub	sp, sp, #68	; 0x44
   13790:	cmpeq	sl, r4
   13794:	ldr	r6, [sp, #108]	; 0x6c
   13798:	strd	sl, [sp]
   1379c:	strd	r0, [sp, #8]
   137a0:	bls	13894 <__assert_fail@plt+0x2690>
   137a4:	asr	r1, r6, #31
   137a8:	subs	r4, sl, #1
   137ac:	mov	r8, r2
   137b0:	movw	r2, #49552	; 0xc190
   137b4:	movt	r2, #2
   137b8:	sbc	r3, fp, #0
   137bc:	mov	r0, r6
   137c0:	str	r2, [sp, #24]
   137c4:	mul	r2, r4, r1
   137c8:	umull	r4, r5, r4, r6
   137cc:	strd	r0, [sp, #16]
   137d0:	movw	r1, #40568	; 0x9e78
   137d4:	movt	r1, #1
   137d8:	mla	r3, r6, r3, r2
   137dc:	str	r1, [sp, #28]
   137e0:	add	r5, r3, r5
   137e4:	b	13834 <__assert_fail@plt+0x2630>
   137e8:	vldr	s0, [r8]
   137ec:	mov	r3, #0
   137f0:	mov	r1, #31
   137f4:	mov	r2, r3
   137f8:	add	r0, sp, #32
   137fc:	mov	r6, ip
   13800:	add	r8, r8, #4
   13804:	bl	159dc <__assert_fail@plt+0x47d8>
   13808:	add	r2, sp, #32
   1380c:	mov	r1, r7
   13810:	ldr	r0, [sp, #28]
   13814:	bl	18a58 <__assert_fail@plt+0x7854>
   13818:	ldrd	r2, [sp, #16]
   1381c:	subs	r4, r4, r2
   13820:	sbc	r5, r5, r3
   13824:	ldrd	r2, [sp, #8]
   13828:	cmp	fp, r3
   1382c:	cmpeq	sl, r2
   13830:	beq	13894 <__assert_fail@plt+0x2690>
   13834:	subs	sl, sl, #1
   13838:	mov	r0, r4
   1383c:	ldrd	r2, [sp]
   13840:	mov	r1, r5
   13844:	sbc	fp, fp, #0
   13848:	bl	19920 <__assert_fail@plt+0x871c>
   1384c:	ldr	r3, [sp, #24]
   13850:	sub	r7, r6, r0
   13854:	mov	ip, r0
   13858:	ldr	r2, [sp, #104]	; 0x68
   1385c:	ldrb	r3, [r3, #8]
   13860:	add	r7, r7, r2
   13864:	cmp	r3, #0
   13868:	beq	137e8 <__assert_fail@plt+0x25e4>
   1386c:	ldrb	r3, [r8, #3]
   13870:	ldrb	r1, [r8, #2]
   13874:	ldrb	r2, [r8, #1]
   13878:	bfi	r9, r3, #0, #8
   1387c:	ldrb	r3, [r8]
   13880:	bfi	r9, r1, #8, #8
   13884:	bfi	r9, r2, #16, #8
   13888:	bfi	r9, r3, #24, #8
   1388c:	vmov	s0, r9
   13890:	b	137ec <__assert_fail@plt+0x25e8>
   13894:	add	sp, sp, #68	; 0x44
   13898:	ldrd	r4, [sp]
   1389c:	ldrd	r6, [sp, #8]
   138a0:	ldrd	r8, [sp, #16]
   138a4:	ldrd	sl, [sp, #24]
   138a8:	add	sp, sp, #32
   138ac:	pop	{pc}		; (ldr pc, [sp], #4)
   138b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138b4:	mov	r5, #0
   138b8:	mov	r4, r0
   138bc:	strd	r6, [sp, #8]
   138c0:	mov	r7, #0
   138c4:	mov	r0, r1
   138c8:	cmp	r5, r7
   138cc:	mov	r1, r7
   138d0:	strd	r8, [sp, #16]
   138d4:	strd	sl, [sp, #24]
   138d8:	cmpeq	r4, r0
   138dc:	str	lr, [sp, #32]
   138e0:	sub	sp, sp, #60	; 0x3c
   138e4:	ldr	fp, [sp, #96]	; 0x60
   138e8:	strd	r4, [sp, #8]
   138ec:	strd	r0, [sp, #16]
   138f0:	ldr	r8, [sp, #100]	; 0x64
   138f4:	bls	139e0 <__assert_fail@plt+0x27dc>
   138f8:	asr	r1, r8, #31
   138fc:	subs	r6, r4, #1
   13900:	mov	sl, r2
   13904:	movw	r2, #40584	; 0x9e88
   13908:	movt	r2, #1
   1390c:	sbc	r3, r5, #0
   13910:	mov	r0, r8
   13914:	str	r2, [sp, #32]
   13918:	mul	r2, r6, r1
   1391c:	umull	r6, r7, r6, r8
   13920:	strd	r0, [sp, #24]
   13924:	movw	r1, #40572	; 0x9e7c
   13928:	movt	r1, #1
   1392c:	mla	r3, r8, r3, r2
   13930:	str	r1, [sp, #36]	; 0x24
   13934:	movw	r1, #40576	; 0x9e80
   13938:	movt	r1, #1
   1393c:	add	r7, r3, r7
   13940:	str	r1, [sp, #40]	; 0x28
   13944:	subs	r4, r4, #1
   13948:	mov	r0, r6
   1394c:	ldrd	r2, [sp, #8]
   13950:	mov	r1, r7
   13954:	sbc	r5, r5, #0
   13958:	bl	19920 <__assert_fail@plt+0x871c>
   1395c:	ldrb	r3, [sl], #1
   13960:	mov	r9, r0
   13964:	cmp	r3, #13
   13968:	ldrls	pc, [pc, r3, lsl #2]
   1396c:	b	13a50 <__assert_fail@plt+0x284c>
   13970:	andeq	r3, r1, r8, lsr #19
   13974:	andeq	r3, r1, r0, asr sl
   13978:	andeq	r3, r1, r0, asr sl
   1397c:	andeq	r3, r1, r0, asr sl
   13980:	andeq	r3, r1, r0, asr sl
   13984:	andeq	r3, r1, r0, asr sl
   13988:	andeq	r3, r1, r0, asr sl
   1398c:	andeq	r3, r1, r4, asr #20
   13990:	andeq	r3, r1, r8, lsr sl
   13994:	andeq	r3, r1, ip, lsr #20
   13998:	andeq	r3, r1, r0, lsr #20
   1399c:	andeq	r3, r1, r4, lsl sl
   139a0:	andeq	r3, r1, r8, lsl #20
   139a4:	strdeq	r3, [r1], -ip
   139a8:	ldr	r2, [sp, #32]
   139ac:	sub	r1, r8, r9
   139b0:	movw	r0, #40568	; 0x9e78
   139b4:	movt	r0, #1
   139b8:	add	r1, r1, fp
   139bc:	bl	18a58 <__assert_fail@plt+0x7854>
   139c0:	ldrd	r2, [sp, #24]
   139c4:	mov	r8, r9
   139c8:	subs	r6, r6, r2
   139cc:	sbc	r7, r7, r3
   139d0:	ldrd	r2, [sp, #16]
   139d4:	cmp	r5, r3
   139d8:	cmpeq	r4, r2
   139dc:	bne	13944 <__assert_fail@plt+0x2740>
   139e0:	add	sp, sp, #60	; 0x3c
   139e4:	ldrd	r4, [sp]
   139e8:	ldrd	r6, [sp, #8]
   139ec:	ldrd	r8, [sp, #16]
   139f0:	ldrd	sl, [sp, #24]
   139f4:	add	sp, sp, #32
   139f8:	pop	{pc}		; (ldr pc, [sp], #4)
   139fc:	movw	r2, #40600	; 0x9e98
   13a00:	movt	r2, #1
   13a04:	b	139ac <__assert_fail@plt+0x27a8>
   13a08:	movw	r2, #40592	; 0x9e90
   13a0c:	movt	r2, #1
   13a10:	b	139ac <__assert_fail@plt+0x27a8>
   13a14:	movw	r2, #40608	; 0x9ea0
   13a18:	movt	r2, #1
   13a1c:	b	139ac <__assert_fail@plt+0x27a8>
   13a20:	movw	r2, #40596	; 0x9e94
   13a24:	movt	r2, #1
   13a28:	b	139ac <__assert_fail@plt+0x27a8>
   13a2c:	movw	r2, #40604	; 0x9e9c
   13a30:	movt	r2, #1
   13a34:	b	139ac <__assert_fail@plt+0x27a8>
   13a38:	movw	r2, #40588	; 0x9e8c
   13a3c:	movt	r2, #1
   13a40:	b	139ac <__assert_fail@plt+0x27a8>
   13a44:	movw	r2, #40612	; 0x9ea4
   13a48:	movt	r2, #1
   13a4c:	b	139ac <__assert_fail@plt+0x27a8>
   13a50:	str	r3, [sp, #44]	; 0x2c
   13a54:	bl	110a8 <__ctype_b_loc@plt>
   13a58:	ldr	r3, [sp, #44]	; 0x2c
   13a5c:	mov	r2, #4
   13a60:	mov	r1, #1
   13a64:	ldr	lr, [r0]
   13a68:	add	r0, sp, #52	; 0x34
   13a6c:	lsl	ip, r3, #1
   13a70:	ldrh	ip, [lr, ip]
   13a74:	str	r3, [sp]
   13a78:	ldr	r3, [sp, #36]	; 0x24
   13a7c:	tst	ip, #16384	; 0x4000
   13a80:	ldr	ip, [sp, #40]	; 0x28
   13a84:	moveq	r3, ip
   13a88:	bl	110e4 <__sprintf_chk@plt>
   13a8c:	add	r2, sp, #52	; 0x34
   13a90:	b	139ac <__assert_fail@plt+0x27a8>
   13a94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13a98:	movw	r4, #49552	; 0xc190
   13a9c:	movt	r4, #2
   13aa0:	strd	r6, [sp, #8]
   13aa4:	movw	r6, #40616	; 0x9ea8
   13aa8:	movt	r6, #1
   13aac:	movw	r7, #40636	; 0x9ebc
   13ab0:	movt	r7, #1
   13ab4:	strd	r8, [sp, #16]
   13ab8:	movw	r8, #45552	; 0xb1f0
   13abc:	movt	r8, #1
   13ac0:	str	sl, [sp, #24]
   13ac4:	mov	r9, #1
   13ac8:	str	lr, [sp, #28]
   13acc:	b	13af8 <__assert_fail@plt+0x28f4>
   13ad0:	bl	10fc4 <dcgettext@plt>
   13ad4:	movw	r3, #49536	; 0xc180
   13ad8:	movt	r3, #2
   13adc:	str	r0, [r4, #16]
   13ae0:	ldr	r5, [r3]
   13ae4:	mov	r3, #1
   13ae8:	str	r5, [r4, #20]
   13aec:	strb	r3, [r4, #24]
   13af0:	cmp	r5, #0
   13af4:	bne	13b4c <__assert_fail@plt+0x2948>
   13af8:	ldr	r3, [r4, #12]
   13afc:	mov	r1, r6
   13b00:	ldr	r5, [r3]
   13b04:	add	r3, r3, #4
   13b08:	subs	r0, r5, #0
   13b0c:	str	r5, [r4, #16]
   13b10:	beq	13b64 <__assert_fail@plt+0x2960>
   13b14:	str	r3, [r4, #12]
   13b18:	bl	10f34 <strcmp@plt>
   13b1c:	cmp	r0, #0
   13b20:	movw	r1, #40620	; 0x9eac
   13b24:	movt	r1, #1
   13b28:	mov	r2, #5
   13b2c:	beq	13ad0 <__assert_fail@plt+0x28cc>
   13b30:	mov	r0, r5
   13b34:	mov	r1, r7
   13b38:	bl	111bc <fopen64@plt>
   13b3c:	cmp	r0, #0
   13b40:	mov	r5, r0
   13b44:	str	r0, [r4, #20]
   13b48:	beq	13b80 <__assert_fail@plt+0x297c>
   13b4c:	ldrb	r3, [r4, #25]
   13b50:	cmp	r3, #0
   13b54:	beq	13b64 <__assert_fail@plt+0x2960>
   13b58:	ldrb	r3, [r4, #26]
   13b5c:	cmp	r3, #0
   13b60:	beq	13bb8 <__assert_fail@plt+0x29b4>
   13b64:	mov	r0, r9
   13b68:	ldrd	r4, [sp]
   13b6c:	ldrd	r6, [sp, #8]
   13b70:	ldrd	r8, [sp, #16]
   13b74:	ldr	sl, [sp, #24]
   13b78:	add	sp, sp, #28
   13b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b80:	bl	110d8 <__errno_location@plt>
   13b84:	ldr	sl, [r0]
   13b88:	mov	r1, #3
   13b8c:	mov	r0, r5
   13b90:	mov	r9, #0
   13b94:	ldr	r2, [r4, #16]
   13b98:	bl	17d80 <__assert_fail@plt+0x6b7c>
   13b9c:	mov	r3, r0
   13ba0:	mov	r2, r8
   13ba4:	mov	r0, r5
   13ba8:	mov	r1, sl
   13bac:	bl	1103c <error@plt>
   13bb0:	ldr	r5, [r4, #20]
   13bb4:	b	13af0 <__assert_fail@plt+0x28ec>
   13bb8:	mov	r0, r5
   13bbc:	mov	r1, r3
   13bc0:	mov	r2, #2
   13bc4:	bl	110fc <setvbuf@plt>
   13bc8:	b	13b64 <__assert_fail@plt+0x2960>
   13bcc:	strd	r4, [sp, #-16]!
   13bd0:	movw	r4, #49552	; 0xc190
   13bd4:	movt	r4, #2
   13bd8:	str	r6, [sp, #8]
   13bdc:	ldr	r6, [r4, #20]
   13be0:	str	lr, [sp, #12]
   13be4:	cmp	r6, #0
   13be8:	moveq	r0, #1
   13bec:	beq	13c38 <__assert_fail@plt+0x2a34>
   13bf0:	ldr	r2, [r6]
   13bf4:	mov	r5, r0
   13bf8:	movw	r1, #40616	; 0x9ea8
   13bfc:	movt	r1, #1
   13c00:	ldr	r3, [r4, #12]
   13c04:	tst	r2, #32
   13c08:	moveq	r5, #0
   13c0c:	ldr	r0, [r3, #-4]
   13c10:	bl	10f34 <strcmp@plt>
   13c14:	cmp	r0, #0
   13c18:	mov	r0, r6
   13c1c:	bne	13c60 <__assert_fail@plt+0x2a5c>
   13c20:	bl	111b0 <clearerr_unlocked@plt>
   13c24:	cmp	r5, #0
   13c28:	moveq	r0, #1
   13c2c:	bne	13cb8 <__assert_fail@plt+0x2ab4>
   13c30:	mov	r3, #0
   13c34:	str	r3, [r4, #20]
   13c38:	movw	r3, #49540	; 0xc184
   13c3c:	movt	r3, #2
   13c40:	ldr	r3, [r3]
   13c44:	ldr	r3, [r3]
   13c48:	tst	r3, #32
   13c4c:	bne	13c80 <__assert_fail@plt+0x2a7c>
   13c50:	ldrd	r4, [sp]
   13c54:	ldr	r6, [sp, #8]
   13c58:	add	sp, sp, #12
   13c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c60:	bl	15798 <__assert_fail@plt+0x4594>
   13c64:	cmp	r0, #0
   13c68:	beq	13c24 <__assert_fail@plt+0x2a20>
   13c6c:	cmp	r5, #0
   13c70:	bne	13cb8 <__assert_fail@plt+0x2ab4>
   13c74:	bl	110d8 <__errno_location@plt>
   13c78:	ldr	r5, [r0]
   13c7c:	b	13c24 <__assert_fail@plt+0x2a20>
   13c80:	mov	r2, #5
   13c84:	movw	r1, #40640	; 0x9ec0
   13c88:	movt	r1, #1
   13c8c:	mov	r0, #0
   13c90:	bl	10fc4 <dcgettext@plt>
   13c94:	mov	r1, #0
   13c98:	mov	r2, r0
   13c9c:	mov	r0, r1
   13ca0:	bl	1103c <error@plt>
   13ca4:	ldrd	r4, [sp]
   13ca8:	mov	r0, #0
   13cac:	ldr	r6, [sp, #8]
   13cb0:	add	sp, sp, #12
   13cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cb8:	mov	r1, #3
   13cbc:	mov	r0, #0
   13cc0:	ldr	r2, [r4, #16]
   13cc4:	bl	17d80 <__assert_fail@plt+0x6b7c>
   13cc8:	mov	r3, r0
   13ccc:	mov	r1, r5
   13cd0:	mov	r0, #0
   13cd4:	movw	r2, #45552	; 0xb1f0
   13cd8:	movt	r2, #1
   13cdc:	bl	1103c <error@plt>
   13ce0:	mov	r0, #0
   13ce4:	b	13c30 <__assert_fail@plt+0x2a2c>
   13ce8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13cec:	mov	r4, r0
   13cf0:	mov	r5, r1
   13cf4:	orrs	r3, r4, r5
   13cf8:	strd	r6, [sp, #8]
   13cfc:	strd	r8, [sp, #16]
   13d00:	str	lr, [sp, #24]
   13d04:	sub	sp, sp, #8256	; 0x2040
   13d08:	sub	sp, sp, #52	; 0x34
   13d0c:	beq	13eec <__assert_fail@plt+0x2ce8>
   13d10:	movw	r7, #49552	; 0xc190
   13d14:	movt	r7, #2
   13d18:	ldr	r6, [r7, #20]
   13d1c:	cmp	r6, #0
   13d20:	movwne	r9, #45552	; 0xb1f0
   13d24:	movne	r8, #1
   13d28:	movtne	r9, #1
   13d2c:	beq	13e5c <__assert_fail@plt+0x2c58>
   13d30:	mov	r0, r6
   13d34:	bl	11138 <fileno@plt>
   13d38:	mov	r1, r0
   13d3c:	add	r2, sp, #8
   13d40:	mov	r0, #3
   13d44:	bl	10ff4 <__fxstat64@plt>
   13d48:	cmp	r0, #0
   13d4c:	bne	13e80 <__assert_fail@plt+0x2c7c>
   13d50:	ldr	r3, [sp, #24]
   13d54:	and	r3, r3, #53248	; 0xd000
   13d58:	cmp	r3, #32768	; 0x8000
   13d5c:	beq	13e00 <__assert_fail@plt+0x2bfc>
   13d60:	mov	r1, #1
   13d64:	mov	r0, r6
   13d68:	mov	r2, r4
   13d6c:	mov	r3, r5
   13d70:	str	r1, [sp]
   13d74:	bl	1590c <__assert_fail@plt+0x4708>
   13d78:	cmp	r0, #0
   13d7c:	beq	13de0 <__assert_fail@plt+0x2bdc>
   13d80:	mov	r6, #8192	; 0x2000
   13d84:	ldr	ip, [r7, #20]
   13d88:	mov	r1, #0
   13d8c:	mov	r2, #1
   13d90:	cmp	r1, r5
   13d94:	add	r0, sp, #112	; 0x70
   13d98:	cmpeq	r6, r4
   13d9c:	mov	r1, #8192	; 0x2000
   13da0:	movhi	r6, r4
   13da4:	mov	r3, r6
   13da8:	str	ip, [sp]
   13dac:	bl	11198 <__fread_unlocked_chk@plt>
   13db0:	subs	r4, r4, r0
   13db4:	sbc	r5, r5, #0
   13db8:	cmp	r6, r0
   13dbc:	beq	13dd8 <__assert_fail@plt+0x2bd4>
   13dc0:	ldr	r3, [r7, #20]
   13dc4:	ldr	r3, [r3]
   13dc8:	tst	r3, #32
   13dcc:	bne	13ec0 <__assert_fail@plt+0x2cbc>
   13dd0:	tst	r3, #16
   13dd4:	bne	13eb4 <__assert_fail@plt+0x2cb0>
   13dd8:	orrs	r3, r4, r5
   13ddc:	bne	13d84 <__assert_fail@plt+0x2b80>
   13de0:	mov	r0, r8
   13de4:	add	sp, sp, #8256	; 0x2040
   13de8:	add	sp, sp, #52	; 0x34
   13dec:	ldrd	r4, [sp]
   13df0:	ldrd	r6, [sp, #8]
   13df4:	ldrd	r8, [sp, #16]
   13df8:	add	sp, sp, #24
   13dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13e00:	ldrd	r0, [sp, #56]	; 0x38
   13e04:	ldr	r2, [sp, #64]	; 0x40
   13e08:	sub	r3, r2, #1
   13e0c:	cmp	r3, #536870912	; 0x20000000
   13e10:	movcs	r2, #512	; 0x200
   13e14:	asr	r3, r2, #31
   13e18:	cmp	r2, r0
   13e1c:	sbcs	r3, r3, r1
   13e20:	bge	13d80 <__assert_fail@plt+0x2b7c>
   13e24:	cmp	r1, r5
   13e28:	cmpeq	r0, r4
   13e2c:	bcs	13ec8 <__assert_fail@plt+0x2cc4>
   13e30:	subs	r4, r4, r0
   13e34:	sbc	r5, r5, r1
   13e38:	mov	r0, #0
   13e3c:	bl	13bcc <__assert_fail@plt+0x29c8>
   13e40:	and	r8, r8, r0
   13e44:	bl	13a94 <__assert_fail@plt+0x2890>
   13e48:	ldr	r6, [r7, #20]
   13e4c:	uxtb	r8, r8
   13e50:	and	r8, r8, r0
   13e54:	cmp	r6, #0
   13e58:	bne	13d30 <__assert_fail@plt+0x2b2c>
   13e5c:	mov	r2, #5
   13e60:	movw	r1, #40652	; 0x9ecc
   13e64:	movt	r1, #1
   13e68:	mov	r0, #0
   13e6c:	bl	10fc4 <dcgettext@plt>
   13e70:	mov	r2, r0
   13e74:	mov	r1, #0
   13e78:	mov	r0, #1
   13e7c:	bl	1103c <error@plt>
   13e80:	bl	110d8 <__errno_location@plt>
   13e84:	ldr	r6, [r0]
   13e88:	mov	r1, #3
   13e8c:	mov	r0, #0
   13e90:	mov	r8, r0
   13e94:	ldr	r2, [r7, #16]
   13e98:	bl	17d80 <__assert_fail@plt+0x6b7c>
   13e9c:	mov	r3, r0
   13ea0:	mov	r2, r9
   13ea4:	mov	r1, r6
   13ea8:	mov	r0, r8
   13eac:	bl	1103c <error@plt>
   13eb0:	b	13e38 <__assert_fail@plt+0x2c34>
   13eb4:	orrs	r3, r4, r5
   13eb8:	bne	13e38 <__assert_fail@plt+0x2c34>
   13ebc:	b	13de0 <__assert_fail@plt+0x2bdc>
   13ec0:	mov	r8, #0
   13ec4:	b	13de0 <__assert_fail@plt+0x2bdc>
   13ec8:	mov	r1, #1
   13ecc:	mov	r2, r4
   13ed0:	mov	r3, r5
   13ed4:	mov	r0, r6
   13ed8:	str	r1, [sp]
   13edc:	bl	1590c <__assert_fail@plt+0x4708>
   13ee0:	cmp	r0, #0
   13ee4:	movne	r8, #0
   13ee8:	b	13de0 <__assert_fail@plt+0x2bdc>
   13eec:	mov	r8, #1
   13ef0:	b	13de0 <__assert_fail@plt+0x2bdc>
   13ef4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ef8:	mvn	r2, #0
   13efc:	strd	r6, [sp, #8]
   13f00:	movw	r7, #49552	; 0xc190
   13f04:	movt	r7, #2
   13f08:	ldr	r3, [r7, #20]
   13f0c:	str	r8, [sp, #16]
   13f10:	str	lr, [sp, #20]
   13f14:	str	r2, [r0]
   13f18:	cmp	r3, #0
   13f1c:	beq	13f80 <__assert_fail@plt+0x2d7c>
   13f20:	mov	r6, r0
   13f24:	mov	r5, #1
   13f28:	b	13f54 <__assert_fail@plt+0x2d50>
   13f2c:	bl	110d8 <__errno_location@plt>
   13f30:	ldr	r0, [r0]
   13f34:	bl	13bcc <__assert_fail@plt+0x29c8>
   13f38:	mov	r4, r0
   13f3c:	bl	13a94 <__assert_fail@plt+0x2890>
   13f40:	ldr	r3, [r7, #20]
   13f44:	and	r0, r0, r4
   13f48:	and	r5, r5, r0
   13f4c:	cmp	r3, #0
   13f50:	beq	13f68 <__assert_fail@plt+0x2d64>
   13f54:	mov	r0, r3
   13f58:	bl	11114 <fgetc@plt>
   13f5c:	cmn	r0, #1
   13f60:	str	r0, [r6]
   13f64:	beq	13f2c <__assert_fail@plt+0x2d28>
   13f68:	mov	r0, r5
   13f6c:	ldrd	r4, [sp]
   13f70:	ldrd	r6, [sp, #8]
   13f74:	ldr	r8, [sp, #16]
   13f78:	add	sp, sp, #20
   13f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f80:	mov	r5, #1
   13f84:	b	13f68 <__assert_fail@plt+0x2d64>
   13f88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f8c:	movw	ip, #49432	; 0xc118
   13f90:	movt	ip, #2
   13f94:	strd	r6, [sp, #8]
   13f98:	strd	r8, [sp, #16]
   13f9c:	strd	sl, [sp, #24]
   13fa0:	mov	fp, r2
   13fa4:	str	lr, [sp, #32]
   13fa8:	sub	sp, sp, #28
   13fac:	strd	r0, [sp, #8]
   13fb0:	ldrb	r1, [ip]
   13fb4:	str	ip, [sp, #20]
   13fb8:	cmp	r1, #0
   13fbc:	movweq	r4, #49552	; 0xc190
   13fc0:	movteq	r4, #2
   13fc4:	beq	13fe0 <__assert_fail@plt+0x2ddc>
   13fc8:	ldr	r1, [sp, #20]
   13fcc:	movw	r4, #49552	; 0xc190
   13fd0:	movt	r4, #2
   13fd4:	ldrb	r1, [r1, #1]
   13fd8:	cmp	r1, #0
   13fdc:	beq	141c8 <__assert_fail@plt+0x2fc4>
   13fe0:	ldr	r3, [r4, #36]	; 0x24
   13fe4:	mov	r5, #0
   13fe8:	strb	r5, [r4, #32]
   13fec:	cmp	r3, r5
   13ff0:	beq	14208 <__assert_fail@plt+0x3004>
   13ff4:	movw	r3, #39708	; 0x9b1c
   13ff8:	movt	r3, #1
   13ffc:	movw	r9, #49540	; 0xc184
   14000:	movt	r9, #2
   14004:	str	r3, [sp, #16]
   14008:	b	14094 <__assert_fail@plt+0x2e90>
   1400c:	mov	r2, r5
   14010:	ldrd	r0, [sp, #8]
   14014:	ldr	r3, [r4, #44]	; 0x2c
   14018:	blx	r3
   1401c:	ldr	ip, [r4, #40]	; 0x28
   14020:	mov	r1, r7
   14024:	mov	r0, r6
   14028:	ldr	r2, [sp, #64]	; 0x40
   1402c:	add	ip, ip, r8
   14030:	ldr	lr, [ip, #28]
   14034:	add	r3, ip, #12
   14038:	str	lr, [sp, #4]
   1403c:	ldr	lr, [ip, #24]
   14040:	str	lr, [sp]
   14044:	ldr	sl, [ip, #8]
   14048:	blx	sl
   1404c:	ldr	r3, [r4, #40]	; 0x28
   14050:	add	r8, r3, r8
   14054:	ldrb	r3, [r8, #21]
   14058:	cmp	r3, #0
   1405c:	bne	140e8 <__assert_fail@plt+0x2ee4>
   14060:	ldr	r0, [r9]
   14064:	ldr	r3, [r0, #20]
   14068:	ldr	r2, [r0, #24]
   1406c:	cmp	r3, r2
   14070:	addcc	r1, r3, #1
   14074:	movcc	r2, #10
   14078:	strcc	r1, [r0, #20]
   1407c:	strbcc	r2, [r3]
   14080:	bcs	14230 <__assert_fail@plt+0x302c>
   14084:	ldr	r3, [r4, #36]	; 0x24
   14088:	add	r5, r5, #1
   1408c:	cmp	r3, r5
   14090:	bls	14208 <__assert_fail@plt+0x3004>
   14094:	lsl	r8, r5, #5
   14098:	ldr	r2, [sp, #16]
   1409c:	cmp	r5, #0
   140a0:	ldr	r3, [r4, #40]	; 0x28
   140a4:	ldr	r6, [r4, #28]
   140a8:	add	r3, r3, r8
   140ac:	ldr	r3, [r3, #4]
   140b0:	sub	r7, r6, fp
   140b4:	add	r3, r2, r3, lsl #2
   140b8:	ldr	r3, [r3, #132]	; 0x84
   140bc:	udiv	r6, r6, r3
   140c0:	udiv	r7, r7, r3
   140c4:	beq	1400c <__assert_fail@plt+0x2e08>
   140c8:	movw	r3, #43936	; 0xaba0
   140cc:	movt	r3, #1
   140d0:	ldr	r2, [r4]
   140d4:	movw	r1, #40568	; 0x9e78
   140d8:	movt	r1, #1
   140dc:	mov	r0, #1
   140e0:	bl	11120 <__printf_chk@plt>
   140e4:	b	1401c <__assert_fail@plt+0x2e18>
   140e8:	ldr	r2, [r8, #24]
   140ec:	movw	r3, #43936	; 0xaba0
   140f0:	movt	r3, #1
   140f4:	movw	r1, #40568	; 0x9e78
   140f8:	movt	r1, #1
   140fc:	ldr	ip, [r8, #28]
   14100:	mov	r0, #1
   14104:	mul	ip, ip, r7
   14108:	sdiv	r6, ip, r6
   1410c:	mla	r2, r2, r7, r6
   14110:	bl	11120 <__printf_chk@plt>
   14114:	movw	r0, #40696	; 0x9ef8
   14118:	movt	r0, #1
   1411c:	ldr	r3, [r9]
   14120:	mov	r2, #3
   14124:	mov	r1, #1
   14128:	bl	10fa0 <fwrite_unlocked@plt>
   1412c:	cmp	fp, #0
   14130:	beq	14190 <__assert_fail@plt+0x2f8c>
   14134:	bl	110a8 <__ctype_b_loc@plt>
   14138:	ldr	r3, [sp, #64]	; 0x40
   1413c:	mov	r8, r0
   14140:	add	r7, r3, fp
   14144:	mov	r6, r3
   14148:	ldrb	r3, [r6], #1
   1414c:	mov	r1, #46	; 0x2e
   14150:	ldr	r0, [r8]
   14154:	lsl	r2, r3, #1
   14158:	ldrh	r2, [r0, r2]
   1415c:	ldr	r0, [r9]
   14160:	tst	r2, #16384	; 0x4000
   14164:	moveq	r3, r1
   14168:	movne	r1, r3
   1416c:	ldr	r2, [r0, #20]
   14170:	ldr	lr, [r0, #24]
   14174:	add	ip, r2, #1
   14178:	cmp	r2, lr
   1417c:	strcc	ip, [r0, #20]
   14180:	strbcc	r3, [r2]
   14184:	bcs	141c0 <__assert_fail@plt+0x2fbc>
   14188:	cmp	r6, r7
   1418c:	bne	14148 <__assert_fail@plt+0x2f44>
   14190:	ldr	r0, [r9]
   14194:	ldr	r3, [r0, #20]
   14198:	ldr	r2, [r0, #24]
   1419c:	cmp	r3, r2
   141a0:	addcc	r1, r3, #1
   141a4:	movcc	r2, #60	; 0x3c
   141a8:	strcc	r1, [r0, #20]
   141ac:	strbcc	r2, [r3]
   141b0:	bcc	14060 <__assert_fail@plt+0x2e5c>
   141b4:	mov	r1, #60	; 0x3c
   141b8:	bl	11168 <__overflow@plt>
   141bc:	b	14060 <__assert_fail@plt+0x2e5c>
   141c0:	bl	11168 <__overflow@plt>
   141c4:	b	14188 <__assert_fail@plt+0x2f84>
   141c8:	ldr	r1, [r4, #28]
   141cc:	cmp	r1, r2
   141d0:	bne	13fe0 <__assert_fail@plt+0x2ddc>
   141d4:	mov	r0, r3
   141d8:	ldr	r1, [sp, #64]	; 0x40
   141dc:	bl	10fac <memcmp@plt>
   141e0:	cmp	r0, #0
   141e4:	bne	13fe0 <__assert_fail@plt+0x2ddc>
   141e8:	ldrb	r3, [r4, #32]
   141ec:	cmp	r3, #0
   141f0:	bne	14208 <__assert_fail@plt+0x3004>
   141f4:	movw	r0, #40692	; 0x9ef4
   141f8:	movt	r0, #1
   141fc:	bl	11054 <puts@plt>
   14200:	mov	r3, #1
   14204:	strb	r3, [r4, #32]
   14208:	ldr	r2, [sp, #20]
   1420c:	mov	r3, #0
   14210:	strb	r3, [r2, #1]
   14214:	add	sp, sp, #28
   14218:	ldrd	r4, [sp]
   1421c:	ldrd	r6, [sp, #8]
   14220:	ldrd	r8, [sp, #16]
   14224:	ldrd	sl, [sp, #24]
   14228:	add	sp, sp, #32
   1422c:	pop	{pc}		; (ldr pc, [sp], #4)
   14230:	mov	r1, #10
   14234:	bl	11168 <__overflow@plt>
   14238:	b	14084 <__assert_fail@plt+0x2e80>
   1423c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14240:	movw	r4, #49540	; 0xc184
   14244:	movt	r4, #2
   14248:	ldr	r3, [r4]
   1424c:	mov	r5, r2
   14250:	ldr	r2, [r3, #20]
   14254:	strd	r6, [sp, #8]
   14258:	mov	r7, r1
   1425c:	mov	r6, r0
   14260:	ldr	r1, [r3, #24]
   14264:	str	r8, [sp, #16]
   14268:	str	lr, [sp, #20]
   1426c:	cmp	r2, r1
   14270:	addcc	r0, r2, #1
   14274:	movcc	r1, #40	; 0x28
   14278:	strcc	r0, [r3, #20]
   1427c:	strbcc	r1, [r2]
   14280:	bcs	142ec <__assert_fail@plt+0x30e8>
   14284:	mov	r0, r6
   14288:	mov	r1, r7
   1428c:	mov	r2, #41	; 0x29
   14290:	bl	12a54 <__assert_fail@plt+0x1850>
   14294:	cmp	r5, #0
   14298:	beq	142bc <__assert_fail@plt+0x30b8>
   1429c:	ldr	r0, [r4]
   142a0:	ldr	r3, [r0, #20]
   142a4:	ldr	r2, [r0, #24]
   142a8:	cmp	r3, r2
   142ac:	addcc	r2, r3, #1
   142b0:	strcc	r2, [r0, #20]
   142b4:	strbcc	r5, [r3]
   142b8:	bcs	142d0 <__assert_fail@plt+0x30cc>
   142bc:	ldrd	r4, [sp]
   142c0:	ldrd	r6, [sp, #8]
   142c4:	ldr	r8, [sp, #16]
   142c8:	add	sp, sp, #20
   142cc:	pop	{pc}		; (ldr pc, [sp], #4)
   142d0:	mov	r1, r5
   142d4:	ldrd	r4, [sp]
   142d8:	ldrd	r6, [sp, #8]
   142dc:	ldr	r8, [sp, #16]
   142e0:	ldr	lr, [sp, #20]
   142e4:	add	sp, sp, #24
   142e8:	b	11168 <__overflow@plt>
   142ec:	mov	r0, r3
   142f0:	mov	r1, #40	; 0x28
   142f4:	bl	11168 <__overflow@plt>
   142f8:	b	14284 <__assert_fail@plt+0x3080>
   142fc:	strd	r4, [sp, #-16]!
   14300:	mov	r4, r0
   14304:	mov	r5, r1
   14308:	str	r6, [sp, #8]
   1430c:	mov	r6, r2
   14310:	mov	r2, #32
   14314:	str	lr, [sp, #12]
   14318:	bl	12a54 <__assert_fail@plt+0x1850>
   1431c:	movw	r3, #49552	; 0xc190
   14320:	movt	r3, #2
   14324:	ldr	lr, [sp, #12]
   14328:	mov	r2, r6
   1432c:	ldrd	r0, [r3, #48]	; 0x30
   14330:	ldr	r6, [sp, #8]
   14334:	adds	r0, r4, r0
   14338:	adc	r1, r5, r1
   1433c:	ldrd	r4, [sp]
   14340:	add	sp, sp, #16
   14344:	b	1423c <__assert_fail@plt+0x3038>
   14348:	ldrb	r3, [r0]
   1434c:	cmp	r3, #0
   14350:	beq	14b34 <__assert_fail@plt+0x3930>
   14354:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14358:	strd	r6, [sp, #8]
   1435c:	movw	r7, #49552	; 0xc190
   14360:	movt	r7, #2
   14364:	ldr	r3, [r7, #36]	; 0x24
   14368:	mov	r6, r0
   1436c:	strd	r8, [sp, #16]
   14370:	strd	sl, [sp, #24]
   14374:	movw	sl, #52429	; 0xcccd
   14378:	movt	sl, #52428	; 0xcccc
   1437c:	add	fp, r7, #56	; 0x38
   14380:	str	lr, [sp, #32]
   14384:	sub	sp, sp, #20
   14388:	str	r0, [sp, #12]
   1438c:	ldr	r0, [r7, #40]	; 0x28
   14390:	ldr	r2, [r7, #56]	; 0x38
   14394:	cmp	r2, r3
   14398:	bls	148b8 <__assert_fail@plt+0x36b4>
   1439c:	adds	r4, r0, r3, lsl #5
   143a0:	beq	14b58 <__assert_fail@plt+0x3954>
   143a4:	ldrb	r1, [r6]
   143a8:	sub	r3, r1, #97	; 0x61
   143ac:	cmp	r3, #23
   143b0:	ldrls	pc, [pc, r3, lsl #2]
   143b4:	b	145bc <__assert_fail@plt+0x33b8>
   143b8:	andeq	r4, r1, r0, lsr #11
   143bc:			; <UNDEFINED> instruction: 0x000145bc
   143c0:	andeq	r4, r1, r8, lsr r5
   143c4:	andeq	r4, r1, r0, ror #9
   143c8:			; <UNDEFINED> instruction: 0x000145bc
   143cc:	andeq	r4, r1, r8, lsl r4
   143d0:			; <UNDEFINED> instruction: 0x000145bc
   143d4:			; <UNDEFINED> instruction: 0x000145bc
   143d8:			; <UNDEFINED> instruction: 0x000145bc
   143dc:			; <UNDEFINED> instruction: 0x000145bc
   143e0:			; <UNDEFINED> instruction: 0x000145bc
   143e4:			; <UNDEFINED> instruction: 0x000145bc
   143e8:			; <UNDEFINED> instruction: 0x000145bc
   143ec:			; <UNDEFINED> instruction: 0x000145bc
   143f0:	andeq	r4, r1, r0, ror #9
   143f4:			; <UNDEFINED> instruction: 0x000145bc
   143f8:			; <UNDEFINED> instruction: 0x000145bc
   143fc:			; <UNDEFINED> instruction: 0x000145bc
   14400:			; <UNDEFINED> instruction: 0x000145bc
   14404:			; <UNDEFINED> instruction: 0x000145bc
   14408:	andeq	r4, r1, r0, ror #9
   1440c:			; <UNDEFINED> instruction: 0x000145bc
   14410:			; <UNDEFINED> instruction: 0x000145bc
   14414:	andeq	r4, r1, r0, ror #9
   14418:	ldrb	r3, [r6, #1]
   1441c:	cmp	r3, #70	; 0x46
   14420:	beq	1494c <__assert_fail@plt+0x3748>
   14424:	cmp	r3, #76	; 0x4c
   14428:	beq	148d0 <__assert_fail@plt+0x36cc>
   1442c:	cmp	r3, #68	; 0x44
   14430:	beq	148d0 <__assert_fail@plt+0x36cc>
   14434:	sub	r3, r3, #48	; 0x30
   14438:	add	r1, r6, #1
   1443c:	cmp	r3, #9
   14440:	bhi	14b28 <__assert_fail@plt+0x3924>
   14444:	add	r0, r6, #2
   14448:	mov	r8, #0
   1444c:	b	14460 <__assert_fail@plt+0x325c>
   14450:	mvn	r2, r3
   14454:	umull	ip, r2, sl, r2
   14458:	cmp	r8, r2, lsr #3
   1445c:	bhi	149dc <__assert_fail@plt+0x37d8>
   14460:	ldrb	r2, [r0]
   14464:	add	r8, r8, r8, lsl #2
   14468:	mov	r5, r0
   1446c:	add	r0, r0, #1
   14470:	add	r8, r3, r8, lsl #1
   14474:	sub	r3, r2, #48	; 0x30
   14478:	cmp	r3, #9
   1447c:	bls	14450 <__assert_fail@plt+0x324c>
   14480:	cmp	r5, r1
   14484:	beq	14a8c <__assert_fail@plt+0x3888>
   14488:	cmp	r8, #8
   1448c:	bhi	144a0 <__assert_fail@plt+0x329c>
   14490:	add	r3, r7, r8, lsl #2
   14494:	ldr	r9, [r3, #96]	; 0x60
   14498:	cmp	r9, #0
   1449c:	bne	148d8 <__assert_fail@plt+0x36d4>
   144a0:	movw	r1, #40856	; 0x9f98
   144a4:	movt	r1, #1
   144a8:	mov	r2, #5
   144ac:	mov	r0, #0
   144b0:	bl	10fc4 <dcgettext@plt>
   144b4:	mov	r4, r0
   144b8:	ldr	r0, [sp, #12]
   144bc:	bl	17f58 <__assert_fail@plt+0x6d54>
   144c0:	mov	r1, #0
   144c4:	mov	r3, r0
   144c8:	str	r8, [sp]
   144cc:	mov	r0, r1
   144d0:	mov	r2, r4
   144d4:	bl	1103c <error@plt>
   144d8:	mov	r0, #0
   144dc:	b	145fc <__assert_fail@plt+0x33f8>
   144e0:	ldrb	r3, [r6, #1]
   144e4:	sub	r2, r3, #67	; 0x43
   144e8:	cmp	r2, #16
   144ec:	ldrls	pc, [pc, r2, lsl #2]
   144f0:	b	14840 <__assert_fail@plt+0x363c>
   144f4:	andeq	r4, r1, r0, lsr r8
   144f8:	andeq	r4, r1, r0, asr #16
   144fc:	andeq	r4, r1, r0, asr #16
   14500:	andeq	r4, r1, r0, asr #16
   14504:	andeq	r4, r1, r0, asr #16
   14508:	andeq	r4, r1, r0, asr #16
   1450c:	andeq	r4, r1, r8, lsl r6
   14510:	andeq	r4, r1, r0, asr #16
   14514:	andeq	r4, r1, r0, asr #16
   14518:	andeq	r4, r1, r8, lsl r6
   1451c:	andeq	r4, r1, r0, asr #16
   14520:	andeq	r4, r1, r0, asr #16
   14524:	andeq	r4, r1, r0, asr #16
   14528:	andeq	r4, r1, r0, asr #16
   1452c:	andeq	r4, r1, r0, asr #16
   14530:	andeq	r4, r1, r0, asr #16
   14534:	andeq	r4, r1, r0, lsr #16
   14538:	movw	r3, #14512	; 0x38b0
   1453c:	movt	r3, #1
   14540:	add	r5, r6, #1
   14544:	mov	r8, #3
   14548:	mov	r2, #6
   1454c:	mov	r9, #1
   14550:	stm	r4, {r2, r9}
   14554:	str	r3, [r4, #8]
   14558:	str	r8, [r4, #24]
   1455c:	ldrb	r3, [r5]
   14560:	cmp	r3, #122	; 0x7a
   14564:	moveq	r3, #1
   14568:	movne	r3, #0
   1456c:	addeq	r5, r5, #1
   14570:	cmp	r5, r6
   14574:	strb	r3, [r4, #21]
   14578:	beq	14b3c <__assert_fail@plt+0x3938>
   1457c:	ldr	r3, [r7, #36]	; 0x24
   14580:	mov	r6, r5
   14584:	ldrb	r2, [r5]
   14588:	add	r3, r3, #1
   1458c:	cmp	r2, #0
   14590:	str	r3, [r7, #36]	; 0x24
   14594:	bne	1438c <__assert_fail@plt+0x3188>
   14598:	mov	r0, #1
   1459c:	b	145fc <__assert_fail@plt+0x33f8>
   145a0:	movw	r3, #11320	; 0x2c38
   145a4:	movt	r3, #1
   145a8:	add	r5, r6, #1
   145ac:	mov	r8, #3
   145b0:	mov	r2, #5
   145b4:	mov	r9, #1
   145b8:	b	14550 <__assert_fail@plt+0x334c>
   145bc:	mov	r2, #5
   145c0:	movw	r1, #40940	; 0x9fec
   145c4:	movt	r1, #1
   145c8:	mov	r0, #0
   145cc:	bl	10fc4 <dcgettext@plt>
   145d0:	ldrb	r4, [r6]
   145d4:	mov	r5, r0
   145d8:	ldr	r0, [sp, #12]
   145dc:	bl	17f58 <__assert_fail@plt+0x6d54>
   145e0:	mov	r1, #0
   145e4:	mov	r2, r5
   145e8:	str	r0, [sp]
   145ec:	mov	r3, r4
   145f0:	mov	r0, r1
   145f4:	bl	1103c <error@plt>
   145f8:	mov	r0, #0
   145fc:	add	sp, sp, #20
   14600:	ldrd	r4, [sp]
   14604:	ldrd	r6, [sp, #8]
   14608:	ldrd	r8, [sp, #16]
   1460c:	ldrd	sl, [sp, #24]
   14610:	add	sp, sp, #32
   14614:	pop	{pc}		; (ldr pc, [sp], #4)
   14618:	ldr	r9, [r7, #76]	; 0x4c
   1461c:	add	r5, r6, #2
   14620:	mov	r8, #4
   14624:	sub	r1, r1, #100	; 0x64
   14628:	cmp	r1, #20
   1462c:	ldrls	pc, [pc, r1, lsl #2]
   14630:	b	14920 <__assert_fail@plt+0x371c>
   14634:	andeq	r4, r1, r4, asr #15
   14638:	andeq	r4, r1, r0, lsr #18
   1463c:	andeq	r4, r1, r0, lsr #18
   14640:	andeq	r4, r1, r0, lsr #18
   14644:	andeq	r4, r1, r0, lsr #18
   14648:	andeq	r4, r1, r0, lsr #18
   1464c:	andeq	r4, r1, r0, lsr #18
   14650:	andeq	r4, r1, r0, lsr #18
   14654:	andeq	r4, r1, r0, lsr #18
   14658:	andeq	r4, r1, r0, lsr #18
   1465c:	andeq	r4, r1, r0, lsr #18
   14660:	andeq	r4, r1, ip, asr #14
   14664:	andeq	r4, r1, r0, lsr #18
   14668:	andeq	r4, r1, r0, lsr #18
   1466c:	andeq	r4, r1, r0, lsr #18
   14670:	andeq	r4, r1, r0, lsr #18
   14674:	andeq	r4, r1, r0, lsr #18
   14678:	strdeq	r4, [r1], -r8
   1467c:	andeq	r4, r1, r0, lsr #18
   14680:	andeq	r4, r1, r0, lsr #18
   14684:	andeq	r4, r1, r8, lsl #13
   14688:	movw	r3, #39708	; 0x9b1c
   1468c:	movt	r3, #1
   14690:	add	r8, r3, r8, lsl #2
   14694:	cmp	r9, #5
   14698:	add	r0, r4, #12
   1469c:	ldr	r8, [r8, #392]	; 0x188
   146a0:	beq	14a18 <__assert_fail@plt+0x3814>
   146a4:	cmp	r9, #4
   146a8:	beq	14ab4 <__assert_fail@plt+0x38b0>
   146ac:	movw	r1, #45324	; 0xb10c
   146b0:	movt	r1, #1
   146b4:	str	r8, [sp]
   146b8:	movw	r3, #40844	; 0x9f8c
   146bc:	movt	r3, #1
   146c0:	mov	r2, #9
   146c4:	str	r1, [sp, #4]
   146c8:	mov	r1, #1
   146cc:	bl	110e4 <__sprintf_chk@plt>
   146d0:	cmp	r9, #2
   146d4:	beq	14aa4 <__assert_fail@plt+0x38a0>
   146d8:	cmp	r9, #3
   146dc:	beq	14a7c <__assert_fail@plt+0x3878>
   146e0:	cmp	r9, #1
   146e4:	bne	14920 <__assert_fail@plt+0x371c>
   146e8:	movw	r3, #13076	; 0x3314
   146ec:	movt	r3, #1
   146f0:	mov	r2, #3
   146f4:	b	14550 <__assert_fail@plt+0x334c>
   146f8:	movw	r3, #39708	; 0x9b1c
   146fc:	movt	r3, #1
   14700:	add	r8, r3, r8, lsl #2
   14704:	cmp	r9, #5
   14708:	add	r0, r4, #12
   1470c:	ldr	r8, [r8, #324]	; 0x144
   14710:	beq	14994 <__assert_fail@plt+0x3790>
   14714:	movw	r3, #40720	; 0x9f10
   14718:	movt	r3, #1
   1471c:	cmp	r9, #4
   14720:	movw	r1, #40716	; 0x9f0c
   14724:	movt	r1, #1
   14728:	movne	r1, r3
   1472c:	mov	r2, #9
   14730:	movw	r3, #40832	; 0x9f80
   14734:	movt	r3, #1
   14738:	str	r1, [sp]
   1473c:	mov	r1, #1
   14740:	bl	110e4 <__sprintf_chk@plt>
   14744:	mov	r2, #1
   14748:	b	147a0 <__assert_fail@plt+0x359c>
   1474c:	movw	r3, #39708	; 0x9b1c
   14750:	movt	r3, #1
   14754:	add	r8, r3, r8, lsl #2
   14758:	cmp	r9, #5
   1475c:	add	r0, r4, #12
   14760:	ldr	r8, [r8, #256]	; 0x100
   14764:	beq	149a0 <__assert_fail@plt+0x379c>
   14768:	movw	r3, #40708	; 0x9f04
   1476c:	movt	r3, #1
   14770:	cmp	r9, #4
   14774:	movw	r1, #40704	; 0x9f00
   14778:	movt	r1, #1
   1477c:	movne	r1, r3
   14780:	mov	r2, #9
   14784:	movw	r3, #40844	; 0x9f8c
   14788:	movt	r3, #1
   1478c:	str	r8, [sp]
   14790:	str	r1, [sp, #4]
   14794:	mov	r1, #1
   14798:	bl	110e4 <__sprintf_chk@plt>
   1479c:	mov	r2, #2
   147a0:	sub	r3, r9, #1
   147a4:	cmp	r3, #4
   147a8:	ldrls	pc, [pc, r3, lsl #2]
   147ac:	b	14920 <__assert_fail@plt+0x371c>
   147b0:	andeq	r4, r1, r8, lsl #19
   147b4:	andeq	r4, r1, ip, ror r9
   147b8:	andeq	r4, r1, r0, ror r9
   147bc:	andeq	r4, r1, r4, ror #18
   147c0:	andeq	r4, r1, r8, asr r9
   147c4:	movw	r3, #39708	; 0x9b1c
   147c8:	movt	r3, #1
   147cc:	add	r8, r3, r8, lsl #2
   147d0:	cmp	r9, #5
   147d4:	add	r0, r4, #12
   147d8:	ldr	r8, [r8, #188]	; 0xbc
   147dc:	beq	14a4c <__assert_fail@plt+0x3848>
   147e0:	cmp	r9, #4
   147e4:	beq	14ae8 <__assert_fail@plt+0x38e4>
   147e8:	movw	r1, #40840	; 0x9f88
   147ec:	movt	r1, #1
   147f0:	movw	r3, #40832	; 0x9f80
   147f4:	movt	r3, #1
   147f8:	mov	r2, #9
   147fc:	str	r1, [sp]
   14800:	mov	r1, #1
   14804:	bl	110e4 <__sprintf_chk@plt>
   14808:	cmp	r9, #2
   1480c:	bne	149ac <__assert_fail@plt+0x37a8>
   14810:	movw	r3, #12796	; 0x31fc
   14814:	movt	r3, #1
   14818:	mov	r2, #0
   1481c:	b	14550 <__assert_fail@plt+0x334c>
   14820:	add	r5, r6, #2
   14824:	mov	r8, #2
   14828:	ldr	r9, [r7, #68]	; 0x44
   1482c:	b	14624 <__assert_fail@plt+0x3420>
   14830:	add	r5, r6, #2
   14834:	mov	r8, #1
   14838:	ldr	r9, [r7, #64]	; 0x40
   1483c:	b	14624 <__assert_fail@plt+0x3420>
   14840:	sub	r3, r3, #48	; 0x30
   14844:	add	r0, r6, #1
   14848:	cmp	r3, #9
   1484c:	bhi	14b18 <__assert_fail@plt+0x3914>
   14850:	add	ip, r6, #2
   14854:	mov	r8, #0
   14858:	b	1486c <__assert_fail@plt+0x3668>
   1485c:	mvn	r2, r3
   14860:	umull	lr, r2, sl, r2
   14864:	cmp	r8, r2, lsr #3
   14868:	bhi	149dc <__assert_fail@plt+0x37d8>
   1486c:	ldrb	r2, [ip]
   14870:	add	r8, r8, r8, lsl #2
   14874:	mov	r5, ip
   14878:	add	ip, ip, #1
   1487c:	add	r8, r3, r8, lsl #1
   14880:	sub	r3, r2, #48	; 0x30
   14884:	cmp	r3, #9
   14888:	bls	1485c <__assert_fail@plt+0x3658>
   1488c:	cmp	r0, r5
   14890:	beq	14a98 <__assert_fail@plt+0x3894>
   14894:	cmp	r8, #8
   14898:	bhi	148ac <__assert_fail@plt+0x36a8>
   1489c:	add	r3, r7, r8, lsl #2
   148a0:	ldr	r9, [r3, #60]	; 0x3c
   148a4:	cmp	r9, #0
   148a8:	bne	14624 <__assert_fail@plt+0x3420>
   148ac:	movw	r1, #40752	; 0x9f30
   148b0:	movt	r1, #1
   148b4:	b	144a8 <__assert_fail@plt+0x32a4>
   148b8:	mov	r2, #32
   148bc:	mov	r1, fp
   148c0:	bl	1868c <__assert_fail@plt+0x7488>
   148c4:	str	r0, [r7, #40]	; 0x28
   148c8:	ldr	r3, [r7, #36]	; 0x24
   148cc:	b	1439c <__assert_fail@plt+0x3198>
   148d0:	ldr	r9, [r7, #128]	; 0x80
   148d4:	add	r5, r6, #2
   148d8:	bl	111a4 <localeconv@plt>
   148dc:	ldr	r0, [r0]
   148e0:	ldrb	r3, [r0]
   148e4:	cmp	r3, #0
   148e8:	moveq	r0, #1
   148ec:	beq	148f4 <__assert_fail@plt+0x36f0>
   148f0:	bl	110c0 <strlen@plt>
   148f4:	cmp	r9, #7
   148f8:	beq	14924 <__assert_fail@plt+0x3720>
   148fc:	cmp	r9, #8
   14900:	bne	14918 <__assert_fail@plt+0x3714>
   14904:	movw	r3, #13500	; 0x34bc
   14908:	movt	r3, #1
   1490c:	add	r8, r0, #23
   14910:	mov	r2, #4
   14914:	b	14550 <__assert_fail@plt+0x334c>
   14918:	cmp	r9, #6
   1491c:	beq	14938 <__assert_fail@plt+0x3734>
   14920:	bl	111ec <abort@plt>
   14924:	movw	r3, #13836	; 0x360c
   14928:	movt	r3, #1
   1492c:	add	r8, r0, #23
   14930:	mov	r2, #4
   14934:	b	14550 <__assert_fail@plt+0x334c>
   14938:	movw	r3, #14172	; 0x375c
   1493c:	movt	r3, #1
   14940:	add	r8, r0, #14
   14944:	mov	r2, #4
   14948:	b	14550 <__assert_fail@plt+0x334c>
   1494c:	add	r5, r6, #2
   14950:	ldr	r9, [r7, #112]	; 0x70
   14954:	b	148d8 <__assert_fail@plt+0x36d4>
   14958:	movw	r3, #11632	; 0x2d70
   1495c:	movt	r3, #1
   14960:	b	14550 <__assert_fail@plt+0x334c>
   14964:	movw	r3, #11924	; 0x2e94
   14968:	movt	r3, #1
   1496c:	b	14550 <__assert_fail@plt+0x334c>
   14970:	movw	r3, #12220	; 0x2fbc
   14974:	movt	r3, #1
   14978:	b	14550 <__assert_fail@plt+0x334c>
   1497c:	movw	r3, #12516	; 0x30e4
   14980:	movt	r3, #1
   14984:	b	14550 <__assert_fail@plt+0x334c>
   14988:	movw	r3, #13076	; 0x3314
   1498c:	movt	r3, #1
   14990:	b	14550 <__assert_fail@plt+0x334c>
   14994:	movw	r1, #40712	; 0x9f08
   14998:	movt	r1, #1
   1499c:	b	1472c <__assert_fail@plt+0x3528>
   149a0:	movw	r1, #40700	; 0x9efc
   149a4:	movt	r1, #1
   149a8:	b	14780 <__assert_fail@plt+0x357c>
   149ac:	cmp	r9, #3
   149b0:	bne	149c4 <__assert_fail@plt+0x37c0>
   149b4:	movw	r3, #12220	; 0x2fbc
   149b8:	movt	r3, #1
   149bc:	mov	r2, #0
   149c0:	b	14550 <__assert_fail@plt+0x334c>
   149c4:	cmp	r9, #1
   149c8:	bne	14920 <__assert_fail@plt+0x371c>
   149cc:	movw	r3, #13288	; 0x33e8
   149d0:	movt	r3, #1
   149d4:	mov	r2, #0
   149d8:	b	14550 <__assert_fail@plt+0x334c>
   149dc:	mov	r2, #5
   149e0:	movw	r1, #40996	; 0xa024
   149e4:	movt	r1, #1
   149e8:	mov	r0, #0
   149ec:	bl	10fc4 <dcgettext@plt>
   149f0:	mov	r4, r0
   149f4:	ldr	r0, [sp, #12]
   149f8:	bl	17f58 <__assert_fail@plt+0x6d54>
   149fc:	mov	r1, #0
   14a00:	mov	r3, r0
   14a04:	mov	r2, r4
   14a08:	mov	r0, r1
   14a0c:	bl	1103c <error@plt>
   14a10:	mov	r0, #0
   14a14:	b	145fc <__assert_fail@plt+0x33f8>
   14a18:	movw	r1, #41028	; 0xa044
   14a1c:	movt	r1, #1
   14a20:	str	r8, [sp]
   14a24:	mov	r2, #9
   14a28:	movw	r3, #40844	; 0x9f8c
   14a2c:	movt	r3, #1
   14a30:	str	r1, [sp, #4]
   14a34:	mov	r1, #1
   14a38:	bl	110e4 <__sprintf_chk@plt>
   14a3c:	movw	r3, #11632	; 0x2d70
   14a40:	movt	r3, #1
   14a44:	mov	r2, #3
   14a48:	b	14550 <__assert_fail@plt+0x334c>
   14a4c:	movw	r1, #41024	; 0xa040
   14a50:	movt	r1, #1
   14a54:	mov	r2, #9
   14a58:	movw	r3, #40832	; 0x9f80
   14a5c:	movt	r3, #1
   14a60:	str	r1, [sp]
   14a64:	mov	r1, #1
   14a68:	bl	110e4 <__sprintf_chk@plt>
   14a6c:	movw	r3, #11632	; 0x2d70
   14a70:	movt	r3, #1
   14a74:	mov	r2, #0
   14a78:	b	14550 <__assert_fail@plt+0x334c>
   14a7c:	movw	r3, #12220	; 0x2fbc
   14a80:	movt	r3, #1
   14a84:	mov	r2, r9
   14a88:	b	14550 <__assert_fail@plt+0x334c>
   14a8c:	mov	r5, r1
   14a90:	ldr	r9, [r7, #128]	; 0x80
   14a94:	b	148d8 <__assert_fail@plt+0x36d4>
   14a98:	mov	r8, #4
   14a9c:	ldr	r9, [r7, #76]	; 0x4c
   14aa0:	b	14624 <__assert_fail@plt+0x3420>
   14aa4:	movw	r3, #12516	; 0x30e4
   14aa8:	movt	r3, #1
   14aac:	mov	r2, #3
   14ab0:	b	14550 <__assert_fail@plt+0x334c>
   14ab4:	movw	r1, #41032	; 0xa048
   14ab8:	movt	r1, #1
   14abc:	str	r8, [sp]
   14ac0:	mov	r2, #9
   14ac4:	movw	r3, #40844	; 0x9f8c
   14ac8:	movt	r3, #1
   14acc:	str	r1, [sp, #4]
   14ad0:	mov	r1, #1
   14ad4:	bl	110e4 <__sprintf_chk@plt>
   14ad8:	movw	r3, #11924	; 0x2e94
   14adc:	movt	r3, #1
   14ae0:	mov	r2, #3
   14ae4:	b	14550 <__assert_fail@plt+0x334c>
   14ae8:	movw	r1, #41020	; 0xa03c
   14aec:	movt	r1, #1
   14af0:	mov	r2, #9
   14af4:	movw	r3, #40832	; 0x9f80
   14af8:	movt	r3, #1
   14afc:	str	r1, [sp]
   14b00:	mov	r1, #1
   14b04:	bl	110e4 <__sprintf_chk@plt>
   14b08:	movw	r3, #11924	; 0x2e94
   14b0c:	movt	r3, #1
   14b10:	mov	r2, #0
   14b14:	b	14550 <__assert_fail@plt+0x334c>
   14b18:	mov	r5, r0
   14b1c:	mov	r8, #4
   14b20:	ldr	r9, [r7, #76]	; 0x4c
   14b24:	b	14624 <__assert_fail@plt+0x3420>
   14b28:	mov	r5, r1
   14b2c:	ldr	r9, [r7, #128]	; 0x80
   14b30:	b	148d8 <__assert_fail@plt+0x36d4>
   14b34:	mov	r0, #1
   14b38:	bx	lr
   14b3c:	movw	r1, #40724	; 0x9f14
   14b40:	movt	r1, #1
   14b44:	ldr	r3, [pc, #40]	; 14b74 <__assert_fail@plt+0x3970>
   14b48:	movw	r0, #40984	; 0xa018
   14b4c:	movt	r0, #1
   14b50:	movw	r2, #997	; 0x3e5
   14b54:	bl	11204 <__assert_fail@plt>
   14b58:	movw	r1, #40724	; 0x9f14
   14b5c:	movt	r1, #1
   14b60:	ldr	r3, [pc, #16]	; 14b78 <__assert_fail@plt+0x3974>
   14b64:	movw	r0, #40736	; 0x9f20
   14b68:	movt	r0, #1
   14b6c:	mov	r2, #648	; 0x288
   14b70:	bl	11204 <__assert_fail@plt>
   14b74:	andeq	r9, r1, r8, ror #25
   14b78:	andeq	r9, r1, r4, asr #23
   14b7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14b80:	strd	r6, [sp, #8]
   14b84:	strd	r8, [sp, #16]
   14b88:	subs	r8, r0, #0
   14b8c:	str	sl, [sp, #24]
   14b90:	str	lr, [sp, #28]
   14b94:	beq	14c48 <__assert_fail@plt+0x3a44>
   14b98:	movw	r7, #49552	; 0xc190
   14b9c:	movt	r7, #2
   14ba0:	ldr	r3, [r7, #28]
   14ba4:	cmp	r3, r8
   14ba8:	bcc	14c48 <__assert_fail@plt+0x3a44>
   14bac:	ldr	r3, [r7, #20]
   14bb0:	mov	r0, #0
   14bb4:	mov	r5, r2
   14bb8:	str	r0, [r2]
   14bbc:	cmp	r3, r0
   14bc0:	beq	14c40 <__assert_fail@plt+0x3a3c>
   14bc4:	mov	r9, r1
   14bc8:	mov	r6, #1
   14bcc:	b	14bfc <__assert_fail@plt+0x39f8>
   14bd0:	bl	110d8 <__errno_location@plt>
   14bd4:	ldr	r0, [r0]
   14bd8:	bl	13bcc <__assert_fail@plt+0x29c8>
   14bdc:	mov	r4, r0
   14be0:	bl	13a94 <__assert_fail@plt+0x2890>
   14be4:	ldr	r3, [r7, #20]
   14be8:	and	r0, r0, r4
   14bec:	and	r6, r6, r0
   14bf0:	cmp	r3, #0
   14bf4:	beq	14c24 <__assert_fail@plt+0x3a20>
   14bf8:	ldr	r0, [r5]
   14bfc:	sub	r4, r8, r0
   14c00:	mov	r1, #1
   14c04:	add	r0, r9, r0
   14c08:	mov	r2, r4
   14c0c:	bl	111d4 <fread_unlocked@plt>
   14c10:	ldr	r3, [r5]
   14c14:	cmp	r4, r0
   14c18:	add	r3, r3, r0
   14c1c:	str	r3, [r5]
   14c20:	bne	14bd0 <__assert_fail@plt+0x39cc>
   14c24:	mov	r0, r6
   14c28:	ldrd	r4, [sp]
   14c2c:	ldrd	r6, [sp, #8]
   14c30:	ldrd	r8, [sp, #16]
   14c34:	ldr	sl, [sp, #24]
   14c38:	add	sp, sp, #28
   14c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c40:	mov	r6, #1
   14c44:	b	14c24 <__assert_fail@plt+0x3a20>
   14c48:	movw	r1, #40724	; 0x9f14
   14c4c:	movt	r1, #1
   14c50:	ldr	r3, [pc, #12]	; 14c64 <__assert_fail@plt+0x3a60>
   14c54:	movw	r0, #41036	; 0xa04c
   14c58:	movt	r0, #1
   14c5c:	movw	r2, #1293	; 0x50d
   14c60:	bl	11204 <__assert_fail@plt>
   14c64:	andeq	r9, r1, r0, lsl #26
   14c68:	subs	r6, r0, #0
   14c6c:	str	r7, [sp, #-8]!
   14c70:	str	lr, [sp, #4]
   14c74:	sub	sp, sp, #64	; 0x40
   14c78:	beq	14cc0 <__assert_fail@plt+0x3abc>
   14c7c:	movw	r3, #49528	; 0xc178
   14c80:	movt	r3, #2
   14c84:	ldr	r4, [r3]
   14c88:	mov	r2, #5
   14c8c:	movw	r1, #41072	; 0xa070
   14c90:	movt	r1, #1
   14c94:	mov	r0, #0
   14c98:	bl	10fc4 <dcgettext@plt>
   14c9c:	movw	r3, #49728	; 0xc240
   14ca0:	movt	r3, #2
   14ca4:	mov	r2, r0
   14ca8:	mov	r1, #1
   14cac:	ldr	r3, [r3]
   14cb0:	mov	r0, r4
   14cb4:	bl	11144 <__fprintf_chk@plt>
   14cb8:	mov	r0, r6
   14cbc:	bl	110b4 <exit@plt>
   14cc0:	mov	r2, #5
   14cc4:	movw	r1, #41112	; 0xa098
   14cc8:	movt	r1, #1
   14ccc:	movw	r7, #49540	; 0xc184
   14cd0:	movt	r7, #2
   14cd4:	bl	10fc4 <dcgettext@plt>
   14cd8:	movw	r3, #49728	; 0xc240
   14cdc:	movt	r3, #2
   14ce0:	ldr	ip, [r3]
   14ce4:	mov	r1, r0
   14ce8:	mov	r0, #1
   14cec:	mov	r3, ip
   14cf0:	mov	r2, ip
   14cf4:	str	ip, [sp]
   14cf8:	bl	11120 <__printf_chk@plt>
   14cfc:	mov	r2, #5
   14d00:	movw	r1, #41276	; 0xa13c
   14d04:	movt	r1, #1
   14d08:	mov	r0, r6
   14d0c:	bl	10fc4 <dcgettext@plt>
   14d10:	ldr	r1, [r7]
   14d14:	bl	10f1c <fputs_unlocked@plt>
   14d18:	mov	r2, #5
   14d1c:	movw	r1, #41460	; 0xa1f4
   14d20:	movt	r1, #1
   14d24:	mov	r0, r6
   14d28:	bl	10fc4 <dcgettext@plt>
   14d2c:	ldr	r1, [r7]
   14d30:	bl	10f1c <fputs_unlocked@plt>
   14d34:	mov	r2, #5
   14d38:	movw	r1, #41516	; 0xa22c
   14d3c:	movt	r1, #1
   14d40:	mov	r0, r6
   14d44:	bl	10fc4 <dcgettext@plt>
   14d48:	ldr	r1, [r7]
   14d4c:	bl	10f1c <fputs_unlocked@plt>
   14d50:	mov	r2, #5
   14d54:	movw	r1, #41908	; 0xa3b4
   14d58:	movt	r1, #1
   14d5c:	mov	r0, r6
   14d60:	bl	10fc4 <dcgettext@plt>
   14d64:	ldr	r1, [r7]
   14d68:	bl	10f1c <fputs_unlocked@plt>
   14d6c:	mov	r2, #5
   14d70:	movw	r1, #41984	; 0xa400
   14d74:	movt	r1, #1
   14d78:	mov	r0, r6
   14d7c:	bl	10fc4 <dcgettext@plt>
   14d80:	ldr	r1, [r7]
   14d84:	bl	10f1c <fputs_unlocked@plt>
   14d88:	mov	r2, #5
   14d8c:	movw	r1, #42272	; 0xa520
   14d90:	movt	r1, #1
   14d94:	mov	r0, r6
   14d98:	bl	10fc4 <dcgettext@plt>
   14d9c:	ldr	r1, [r7]
   14da0:	bl	10f1c <fputs_unlocked@plt>
   14da4:	mov	r2, #5
   14da8:	movw	r1, #42824	; 0xa748
   14dac:	movt	r1, #1
   14db0:	mov	r0, r6
   14db4:	bl	10fc4 <dcgettext@plt>
   14db8:	ldr	r1, [r7]
   14dbc:	bl	10f1c <fputs_unlocked@plt>
   14dc0:	mov	r2, #5
   14dc4:	movw	r1, #42872	; 0xa778
   14dc8:	movt	r1, #1
   14dcc:	mov	r0, r6
   14dd0:	bl	10fc4 <dcgettext@plt>
   14dd4:	ldr	r1, [r7]
   14dd8:	bl	10f1c <fputs_unlocked@plt>
   14ddc:	mov	r2, #5
   14de0:	movw	r1, #42928	; 0xa7b0
   14de4:	movt	r1, #1
   14de8:	mov	r0, r6
   14dec:	bl	10fc4 <dcgettext@plt>
   14df0:	ldr	r1, [r7]
   14df4:	bl	10f1c <fputs_unlocked@plt>
   14df8:	mov	r2, #5
   14dfc:	movw	r1, #43244	; 0xa8ec
   14e00:	movt	r1, #1
   14e04:	mov	r0, r6
   14e08:	bl	10fc4 <dcgettext@plt>
   14e0c:	ldr	r1, [r7]
   14e10:	bl	10f1c <fputs_unlocked@plt>
   14e14:	mov	r2, #5
   14e18:	movw	r1, #43520	; 0xaa00
   14e1c:	movt	r1, #1
   14e20:	mov	r0, r6
   14e24:	bl	10fc4 <dcgettext@plt>
   14e28:	ldr	r1, [r7]
   14e2c:	bl	10f1c <fputs_unlocked@plt>
   14e30:	mov	r2, #5
   14e34:	movw	r1, #43688	; 0xaaa8
   14e38:	movt	r1, #1
   14e3c:	mov	r0, r6
   14e40:	bl	10fc4 <dcgettext@plt>
   14e44:	ldr	r1, [r7]
   14e48:	bl	10f1c <fputs_unlocked@plt>
   14e4c:	mov	r2, #5
   14e50:	movw	r1, #43940	; 0xaba4
   14e54:	movt	r1, #1
   14e58:	mov	r0, r6
   14e5c:	bl	10fc4 <dcgettext@plt>
   14e60:	ldr	r1, [r7]
   14e64:	bl	10f1c <fputs_unlocked@plt>
   14e68:	mov	r2, #5
   14e6c:	movw	r1, #44184	; 0xac98
   14e70:	movt	r1, #1
   14e74:	mov	r0, r6
   14e78:	bl	10fc4 <dcgettext@plt>
   14e7c:	ldr	r1, [r7]
   14e80:	bl	10f1c <fputs_unlocked@plt>
   14e84:	mov	r2, #5
   14e88:	movw	r1, #44280	; 0xacf8
   14e8c:	movt	r1, #1
   14e90:	mov	r0, r6
   14e94:	bl	10fc4 <dcgettext@plt>
   14e98:	ldr	r1, [r7]
   14e9c:	bl	10f1c <fputs_unlocked@plt>
   14ea0:	ldr	lr, [pc, #560]	; 150d8 <__assert_fail@plt+0x3ed4>
   14ea4:	ldr	ip, [lr]
   14ea8:	ldr	r4, [lr, #4]
   14eac:	ldrd	r8, [lr, #8]
   14eb0:	subs	r1, ip, #0
   14eb4:	str	ip, [sp, #8]
   14eb8:	ldrd	r2, [lr, #16]
   14ebc:	str	r4, [sp, #12]
   14ec0:	ldrd	r4, [lr, #24]
   14ec4:	strd	r8, [sp, #16]
   14ec8:	ldrd	r8, [lr, #32]
   14ecc:	strd	r2, [sp, #24]
   14ed0:	ldrd	r2, [lr, #40]	; 0x28
   14ed4:	strd	r4, [sp, #32]
   14ed8:	ldrd	r4, [lr, #48]	; 0x30
   14edc:	strd	r8, [sp, #40]	; 0x28
   14ee0:	strd	r2, [sp, #48]	; 0x30
   14ee4:	strd	r4, [sp, #56]	; 0x38
   14ee8:	movwne	r5, #41068	; 0xa06c
   14eec:	add	r4, sp, #8
   14ef0:	movtne	r5, #1
   14ef4:	bne	14fec <__assert_fail@plt+0x3de8>
   14ef8:	ldr	r4, [r4, #4]
   14efc:	movw	r1, #44512	; 0xade0
   14f00:	movt	r1, #1
   14f04:	mov	r2, #5
   14f08:	cmp	r4, #0
   14f0c:	beq	15000 <__assert_fail@plt+0x3dfc>
   14f10:	mov	r0, #0
   14f14:	bl	10fc4 <dcgettext@plt>
   14f18:	mov	r1, r0
   14f1c:	movw	r3, #44536	; 0xadf8
   14f20:	movt	r3, #1
   14f24:	movw	r2, #44576	; 0xae20
   14f28:	movt	r2, #1
   14f2c:	mov	r0, #1
   14f30:	bl	11120 <__printf_chk@plt>
   14f34:	mov	r1, #0
   14f38:	mov	r0, #5
   14f3c:	bl	11174 <setlocale@plt>
   14f40:	cmp	r0, #0
   14f44:	movweq	r5, #41068	; 0xa06c
   14f48:	movteq	r5, #1
   14f4c:	beq	14f70 <__assert_fail@plt+0x3d6c>
   14f50:	movw	r1, #44592	; 0xae30
   14f54:	movt	r1, #1
   14f58:	mov	r2, #3
   14f5c:	movw	r5, #41068	; 0xa06c
   14f60:	movt	r5, #1
   14f64:	bl	111e0 <strncmp@plt>
   14f68:	cmp	r0, #0
   14f6c:	bne	150b8 <__assert_fail@plt+0x3eb4>
   14f70:	mov	r2, #5
   14f74:	movw	r1, #44668	; 0xae7c
   14f78:	movt	r1, #1
   14f7c:	mov	r0, #0
   14f80:	bl	10fc4 <dcgettext@plt>
   14f84:	mov	r1, r0
   14f88:	movw	r3, #41068	; 0xa06c
   14f8c:	movt	r3, #1
   14f90:	movw	r2, #44536	; 0xadf8
   14f94:	movt	r2, #1
   14f98:	mov	r0, #1
   14f9c:	bl	11120 <__printf_chk@plt>
   14fa0:	mov	r2, #5
   14fa4:	movw	r1, #44696	; 0xae98
   14fa8:	movt	r1, #1
   14fac:	mov	r0, #0
   14fb0:	bl	10fc4 <dcgettext@plt>
   14fb4:	movw	r2, #45200	; 0xb090
   14fb8:	movt	r2, #1
   14fbc:	cmp	r4, r5
   14fc0:	movw	r3, #43936	; 0xaba0
   14fc4:	movt	r3, #1
   14fc8:	mov	r1, r0
   14fcc:	moveq	r3, r2
   14fd0:	mov	r2, r4
   14fd4:	mov	r0, #1
   14fd8:	bl	11120 <__printf_chk@plt>
   14fdc:	b	14cb8 <__assert_fail@plt+0x3ab4>
   14fe0:	ldr	r1, [r4, #8]!
   14fe4:	cmp	r1, #0
   14fe8:	beq	14ef8 <__assert_fail@plt+0x3cf4>
   14fec:	mov	r0, r5
   14ff0:	bl	10f34 <strcmp@plt>
   14ff4:	cmp	r0, #0
   14ff8:	bne	14fe0 <__assert_fail@plt+0x3ddc>
   14ffc:	b	14ef8 <__assert_fail@plt+0x3cf4>
   15000:	mov	r0, r4
   15004:	bl	10fc4 <dcgettext@plt>
   15008:	mov	r1, r0
   1500c:	movw	r3, #44536	; 0xadf8
   15010:	movt	r3, #1
   15014:	movw	r2, #44576	; 0xae20
   15018:	movt	r2, #1
   1501c:	mov	r0, #1
   15020:	bl	11120 <__printf_chk@plt>
   15024:	mov	r1, r4
   15028:	mov	r0, #5
   1502c:	bl	11174 <setlocale@plt>
   15030:	cmp	r0, #0
   15034:	beq	15050 <__assert_fail@plt+0x3e4c>
   15038:	movw	r1, #44592	; 0xae30
   1503c:	movt	r1, #1
   15040:	mov	r2, #3
   15044:	bl	111e0 <strncmp@plt>
   15048:	cmp	r0, #0
   1504c:	bne	150ac <__assert_fail@plt+0x3ea8>
   15050:	mov	r2, #5
   15054:	movw	r1, #44668	; 0xae7c
   15058:	movt	r1, #1
   1505c:	mov	r0, #0
   15060:	bl	10fc4 <dcgettext@plt>
   15064:	mov	r1, r0
   15068:	movw	r3, #41068	; 0xa06c
   1506c:	movt	r3, #1
   15070:	movw	r2, #44536	; 0xadf8
   15074:	movt	r2, #1
   15078:	mov	r0, #1
   1507c:	bl	11120 <__printf_chk@plt>
   15080:	movw	r1, #44696	; 0xae98
   15084:	movt	r1, #1
   15088:	mov	r2, #5
   1508c:	mov	r0, #0
   15090:	bl	10fc4 <dcgettext@plt>
   15094:	movw	r4, #41068	; 0xa06c
   15098:	movt	r4, #1
   1509c:	movw	r3, #45200	; 0xb090
   150a0:	movt	r3, #1
   150a4:	mov	r1, r0
   150a8:	b	14fd0 <__assert_fail@plt+0x3dcc>
   150ac:	movw	r5, #41068	; 0xa06c
   150b0:	movt	r5, #1
   150b4:	mov	r4, r5
   150b8:	mov	r2, #5
   150bc:	movw	r1, #44596	; 0xae34
   150c0:	movt	r1, #1
   150c4:	mov	r0, #0
   150c8:	bl	10fc4 <dcgettext@plt>
   150cc:	ldr	r1, [r7]
   150d0:	bl	10f1c <fputs_unlocked@plt>
   150d4:	b	14f70 <__assert_fail@plt+0x3d6c>
   150d8:	andeq	r9, r1, ip, lsl #26
   150dc:	mov	r0, #1
   150e0:	b	14c68 <__assert_fail@plt+0x3a64>
   150e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150e8:	mov	r5, r1
   150ec:	mov	r4, r2
   150f0:	strd	r6, [sp, #8]
   150f4:	mov	r7, r3
   150f8:	strd	r8, [sp, #16]
   150fc:	strd	sl, [sp, #24]
   15100:	mov	sl, r0
   15104:	str	lr, [sp, #32]
   15108:	sub	sp, sp, #12
   1510c:	str	r2, [sp]
   15110:	bl	110c0 <strlen@plt>
   15114:	ldr	fp, [r5]
   15118:	cmp	fp, #0
   1511c:	beq	151ec <__assert_fail@plt+0x3fe8>
   15120:	mov	r6, #0
   15124:	mov	r8, r0
   15128:	mvn	r9, #0
   1512c:	str	r6, [sp, #4]
   15130:	b	1515c <__assert_fail@plt+0x3f58>
   15134:	bl	10fac <memcmp@plt>
   15138:	ldr	r3, [sp, #4]
   1513c:	cmp	r0, #0
   15140:	movne	r3, #1
   15144:	str	r3, [sp, #4]
   15148:	ldr	fp, [r5, #4]!
   1514c:	add	r6, r6, #1
   15150:	add	r4, r4, r7
   15154:	cmp	fp, #0
   15158:	beq	151b8 <__assert_fail@plt+0x3fb4>
   1515c:	mov	r2, r8
   15160:	mov	r1, sl
   15164:	mov	r0, fp
   15168:	bl	111e0 <strncmp@plt>
   1516c:	cmp	r0, #0
   15170:	mov	r0, fp
   15174:	bne	15148 <__assert_fail@plt+0x3f44>
   15178:	bl	110c0 <strlen@plt>
   1517c:	ldr	r3, [sp]
   15180:	cmp	r0, r8
   15184:	mov	r2, r7
   15188:	mov	r1, r4
   1518c:	mla	r0, r7, r9, r3
   15190:	beq	151e4 <__assert_fail@plt+0x3fe0>
   15194:	cmn	r9, #1
   15198:	moveq	r9, r6
   1519c:	beq	15148 <__assert_fail@plt+0x3f44>
   151a0:	ldr	r3, [sp]
   151a4:	cmp	r3, #0
   151a8:	bne	15134 <__assert_fail@plt+0x3f30>
   151ac:	mov	r3, #1
   151b0:	str	r3, [sp, #4]
   151b4:	b	15148 <__assert_fail@plt+0x3f44>
   151b8:	ldr	r3, [sp, #4]
   151bc:	cmp	r3, #0
   151c0:	mvnne	r9, #1
   151c4:	mov	r0, r9
   151c8:	add	sp, sp, #12
   151cc:	ldrd	r4, [sp]
   151d0:	ldrd	r6, [sp, #8]
   151d4:	ldrd	r8, [sp, #16]
   151d8:	ldrd	sl, [sp, #24]
   151dc:	add	sp, sp, #32
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	mov	r9, r6
   151e8:	b	151c4 <__assert_fail@plt+0x3fc0>
   151ec:	mvn	r9, #0
   151f0:	b	151c4 <__assert_fail@plt+0x3fc0>
   151f4:	strd	r4, [sp, #-16]!
   151f8:	str	r6, [sp, #8]
   151fc:	mov	r6, r0
   15200:	ldr	r0, [r1]
   15204:	str	lr, [sp, #12]
   15208:	cmp	r0, #0
   1520c:	beq	15250 <__assert_fail@plt+0x404c>
   15210:	mov	r4, r1
   15214:	mov	r5, #0
   15218:	b	1522c <__assert_fail@plt+0x4028>
   1521c:	ldr	r0, [r4, #4]!
   15220:	add	r5, r5, #1
   15224:	cmp	r0, #0
   15228:	beq	15250 <__assert_fail@plt+0x404c>
   1522c:	mov	r1, r6
   15230:	bl	10f34 <strcmp@plt>
   15234:	cmp	r0, #0
   15238:	bne	1521c <__assert_fail@plt+0x4018>
   1523c:	mov	r0, r5
   15240:	ldrd	r4, [sp]
   15244:	ldr	r6, [sp, #8]
   15248:	add	sp, sp, #12
   1524c:	pop	{pc}		; (ldr pc, [sp], #4)
   15250:	ldrd	r4, [sp]
   15254:	mvn	r0, #0
   15258:	ldr	r6, [sp, #8]
   1525c:	add	sp, sp, #12
   15260:	pop	{pc}		; (ldr pc, [sp], #4)
   15264:	cmn	r2, #1
   15268:	strd	r4, [sp, #-16]!
   1526c:	mov	r5, r1
   15270:	movweq	r1, #45448	; 0xb188
   15274:	movwne	r1, #45476	; 0xb1a4
   15278:	str	r6, [sp, #8]
   1527c:	movteq	r1, #1
   15280:	movtne	r1, #1
   15284:	str	lr, [sp, #12]
   15288:	mov	r6, r0
   1528c:	sub	sp, sp, #8
   15290:	mov	r2, #5
   15294:	mov	r0, #0
   15298:	bl	10fc4 <dcgettext@plt>
   1529c:	mov	r4, r0
   152a0:	mov	r2, r5
   152a4:	mov	r1, #8
   152a8:	mov	r0, #0
   152ac:	bl	17c18 <__assert_fail@plt+0x6a14>
   152b0:	mov	r5, r0
   152b4:	mov	r1, r6
   152b8:	mov	r0, #1
   152bc:	bl	17f48 <__assert_fail@plt+0x6d44>
   152c0:	mov	r1, #0
   152c4:	mov	r3, r5
   152c8:	str	r0, [sp]
   152cc:	mov	r2, r4
   152d0:	mov	r0, r1
   152d4:	bl	1103c <error@plt>
   152d8:	add	sp, sp, #8
   152dc:	ldrd	r4, [sp]
   152e0:	ldr	r6, [sp, #8]
   152e4:	add	sp, sp, #12
   152e8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152f0:	mov	r4, r1
   152f4:	movw	r1, #45508	; 0xb1c4
   152f8:	movt	r1, #1
   152fc:	strd	r6, [sp, #8]
   15300:	mov	r6, r0
   15304:	mov	r7, r2
   15308:	mov	r0, #0
   1530c:	strd	r8, [sp, #16]
   15310:	mov	r2, #5
   15314:	strd	sl, [sp, #24]
   15318:	movw	sl, #49528	; 0xc178
   1531c:	movt	sl, #2
   15320:	str	lr, [sp, #32]
   15324:	sub	sp, sp, #12
   15328:	bl	10fc4 <dcgettext@plt>
   1532c:	ldr	r1, [sl]
   15330:	bl	10f1c <fputs_unlocked@plt>
   15334:	ldr	fp, [r6]
   15338:	cmp	fp, #0
   1533c:	beq	153dc <__assert_fail@plt+0x41d8>
   15340:	movw	r3, #45532	; 0xb1dc
   15344:	movt	r3, #1
   15348:	mov	r9, #0
   1534c:	str	r3, [sp]
   15350:	movw	r3, #45540	; 0xb1e4
   15354:	movt	r3, #1
   15358:	mov	r5, r9
   1535c:	str	r3, [sp, #4]
   15360:	b	15398 <__assert_fail@plt+0x4194>
   15364:	mov	r0, fp
   15368:	mov	r9, r4
   1536c:	bl	17f58 <__assert_fail@plt+0x6d54>
   15370:	mov	r3, r0
   15374:	mov	r1, #1
   15378:	ldr	r2, [sp]
   1537c:	mov	r0, r8
   15380:	bl	11144 <__fprintf_chk@plt>
   15384:	ldr	fp, [r6, #4]!
   15388:	add	r5, r5, #1
   1538c:	add	r4, r4, r7
   15390:	cmp	fp, #0
   15394:	beq	153dc <__assert_fail@plt+0x41d8>
   15398:	cmp	r5, #0
   1539c:	mov	r1, r4
   153a0:	ldr	r8, [sl]
   153a4:	mov	r2, r7
   153a8:	mov	r0, r9
   153ac:	beq	15364 <__assert_fail@plt+0x4160>
   153b0:	bl	10fac <memcmp@plt>
   153b4:	cmp	r0, #0
   153b8:	bne	15364 <__assert_fail@plt+0x4160>
   153bc:	mov	r0, fp
   153c0:	bl	17f58 <__assert_fail@plt+0x6d54>
   153c4:	mov	r3, r0
   153c8:	mov	r1, #1
   153cc:	ldr	r2, [sp, #4]
   153d0:	mov	r0, r8
   153d4:	bl	11144 <__fprintf_chk@plt>
   153d8:	b	15384 <__assert_fail@plt+0x4180>
   153dc:	ldr	r0, [sl]
   153e0:	ldr	r3, [r0, #20]
   153e4:	ldr	r2, [r0, #24]
   153e8:	cmp	r3, r2
   153ec:	bcs	1541c <__assert_fail@plt+0x4218>
   153f0:	add	r1, r3, #1
   153f4:	mov	r2, #10
   153f8:	str	r1, [r0, #20]
   153fc:	strb	r2, [r3]
   15400:	add	sp, sp, #12
   15404:	ldrd	r4, [sp]
   15408:	ldrd	r6, [sp, #8]
   1540c:	ldrd	r8, [sp, #16]
   15410:	ldrd	sl, [sp, #24]
   15414:	add	sp, sp, #32
   15418:	pop	{pc}		; (ldr pc, [sp], #4)
   1541c:	mov	r1, #10
   15420:	add	sp, sp, #12
   15424:	ldrd	r4, [sp]
   15428:	ldrd	r6, [sp, #8]
   1542c:	ldrd	r8, [sp, #16]
   15430:	ldrd	sl, [sp, #24]
   15434:	ldr	lr, [sp, #32]
   15438:	add	sp, sp, #36	; 0x24
   1543c:	b	11168 <__overflow@plt>
   15440:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15444:	mov	r5, r1
   15448:	mov	r4, r2
   1544c:	ldrb	ip, [sp, #32]
   15450:	strd	r6, [sp, #8]
   15454:	mov	r7, r0
   15458:	mov	r6, r3
   1545c:	str	r8, [sp, #16]
   15460:	str	lr, [sp, #20]
   15464:	cmp	ip, #0
   15468:	beq	1549c <__assert_fail@plt+0x4298>
   1546c:	mov	r2, r3
   15470:	mov	r1, r4
   15474:	ldr	r3, [sp, #24]
   15478:	mov	r0, r5
   1547c:	bl	150e4 <__assert_fail@plt+0x3ee0>
   15480:	cmp	r0, #0
   15484:	blt	154ac <__assert_fail@plt+0x42a8>
   15488:	ldrd	r4, [sp]
   1548c:	ldrd	r6, [sp, #8]
   15490:	ldr	r8, [sp, #16]
   15494:	add	sp, sp, #20
   15498:	pop	{pc}		; (ldr pc, [sp], #4)
   1549c:	mov	r1, r2
   154a0:	mov	r0, r5
   154a4:	bl	151f4 <__assert_fail@plt+0x3ff0>
   154a8:	b	15480 <__assert_fail@plt+0x427c>
   154ac:	mov	r2, r0
   154b0:	mov	r1, r5
   154b4:	mov	r0, r7
   154b8:	bl	15264 <__assert_fail@plt+0x4060>
   154bc:	mov	r0, r4
   154c0:	mov	r1, r6
   154c4:	ldr	r2, [sp, #24]
   154c8:	bl	152ec <__assert_fail@plt+0x40e8>
   154cc:	ldr	r3, [sp, #28]
   154d0:	blx	r3
   154d4:	mvn	r0, #0
   154d8:	b	15488 <__assert_fail@plt+0x4284>
   154dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154e0:	strd	r6, [sp, #8]
   154e4:	ldr	r7, [r1]
   154e8:	str	r8, [sp, #16]
   154ec:	str	lr, [sp, #20]
   154f0:	cmp	r7, #0
   154f4:	beq	15534 <__assert_fail@plt+0x4330>
   154f8:	mov	r6, r3
   154fc:	mov	r8, r0
   15500:	mov	r4, r2
   15504:	mov	r5, r1
   15508:	b	15518 <__assert_fail@plt+0x4314>
   1550c:	ldr	r7, [r5, #4]!
   15510:	cmp	r7, #0
   15514:	beq	15534 <__assert_fail@plt+0x4330>
   15518:	mov	r1, r4
   1551c:	mov	r2, r6
   15520:	mov	r0, r8
   15524:	add	r4, r4, r6
   15528:	bl	10fac <memcmp@plt>
   1552c:	cmp	r0, #0
   15530:	bne	1550c <__assert_fail@plt+0x4308>
   15534:	mov	r0, r7
   15538:	ldrd	r4, [sp]
   1553c:	ldrd	r6, [sp, #8]
   15540:	ldr	r8, [sp, #16]
   15544:	add	sp, sp, #20
   15548:	pop	{pc}		; (ldr pc, [sp], #4)
   1554c:	movw	r3, #49720	; 0xc238
   15550:	movt	r3, #2
   15554:	str	r0, [r3]
   15558:	bx	lr
   1555c:	movw	r3, #49720	; 0xc238
   15560:	movt	r3, #2
   15564:	strb	r0, [r3, #4]
   15568:	bx	lr
   1556c:	movw	r3, #49540	; 0xc184
   15570:	movt	r3, #2
   15574:	strd	r4, [sp, #-16]!
   15578:	ldr	r0, [r3]
   1557c:	str	r6, [sp, #8]
   15580:	str	lr, [sp, #12]
   15584:	sub	sp, sp, #8
   15588:	bl	19688 <__assert_fail@plt+0x8484>
   1558c:	cmp	r0, #0
   15590:	beq	155bc <__assert_fail@plt+0x43b8>
   15594:	movw	r4, #49720	; 0xc238
   15598:	movt	r4, #2
   1559c:	ldrb	r6, [r4, #4]
   155a0:	bl	110d8 <__errno_location@plt>
   155a4:	mov	r5, r0
   155a8:	cmp	r6, #0
   155ac:	beq	155e8 <__assert_fail@plt+0x43e4>
   155b0:	ldr	r3, [r0]
   155b4:	cmp	r3, #32
   155b8:	bne	155e8 <__assert_fail@plt+0x43e4>
   155bc:	movw	r3, #49528	; 0xc178
   155c0:	movt	r3, #2
   155c4:	ldr	r0, [r3]
   155c8:	bl	19688 <__assert_fail@plt+0x8484>
   155cc:	cmp	r0, #0
   155d0:	bne	15630 <__assert_fail@plt+0x442c>
   155d4:	add	sp, sp, #8
   155d8:	ldrd	r4, [sp]
   155dc:	ldr	r6, [sp, #8]
   155e0:	add	sp, sp, #12
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	movw	r1, #40640	; 0x9ec0
   155ec:	movt	r1, #1
   155f0:	mov	r2, #5
   155f4:	mov	r0, #0
   155f8:	bl	10fc4 <dcgettext@plt>
   155fc:	mov	r6, r0
   15600:	ldr	r0, [r4]
   15604:	cmp	r0, #0
   15608:	beq	15640 <__assert_fail@plt+0x443c>
   1560c:	ldr	r4, [r5]
   15610:	bl	17d6c <__assert_fail@plt+0x6b68>
   15614:	mov	r3, r0
   15618:	movw	r2, #45548	; 0xb1ec
   1561c:	movt	r2, #1
   15620:	mov	r0, #0
   15624:	str	r6, [sp]
   15628:	mov	r1, r4
   1562c:	bl	1103c <error@plt>
   15630:	movw	r3, #49444	; 0xc124
   15634:	movt	r3, #2
   15638:	ldr	r0, [r3]
   1563c:	bl	10f64 <_exit@plt>
   15640:	mov	r3, r6
   15644:	movw	r2, #45552	; 0xb1f0
   15648:	movt	r2, #1
   1564c:	ldr	r1, [r5]
   15650:	bl	1103c <error@plt>
   15654:	b	15630 <__assert_fail@plt+0x442c>
   15658:	vcmpe.f64	d0, #0.0
   1565c:	vldr	d7, [pc, #300]	; 15790 <__assert_fail@plt+0x458c>
   15660:	movw	ip, #11557	; 0x2d25
   15664:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15668:	mov	r4, #32
   1566c:	strd	r6, [sp, #8]
   15670:	mov	r6, r1
   15674:	and	r1, r2, #1
   15678:	strd	r8, [sp, #16]
   1567c:	mov	r9, r3
   15680:	mov	r7, r0
   15684:	str	lr, [sp, #24]
   15688:	ubfx	r0, r2, #1, #1
   1568c:	vpush	{d8}
   15690:	sub	sp, sp, #44	; 0x2c
   15694:	vmov.f64	d8, d0
   15698:	add	r3, sp, #29
   1569c:	add	r8, sp, #28
   156a0:	vmrs	APSR_nzcv, fpscr
   156a4:	strh	ip, [sp, #28]
   156a8:	mov	ip, #43	; 0x2b
   156ac:	strb	ip, [r3, r1]
   156b0:	add	r3, r3, r1
   156b4:	ubfx	r1, r2, #2, #1
   156b8:	add	ip, r3, r0
   156bc:	vnegmi.f64	d6, d0
   156c0:	vmovpl.f64	d6, d0
   156c4:	tst	r2, #16
   156c8:	movne	lr, #71	; 0x47
   156cc:	moveq	lr, #103	; 0x67
   156d0:	strb	r4, [r3, r0]
   156d4:	mov	r3, #48	; 0x30
   156d8:	ubfx	r2, r2, #3, #1
   156dc:	add	r0, ip, r1
   156e0:	vcmpe.f64	d6, d7
   156e4:	strb	r3, [ip, r1]
   156e8:	mov	r1, #42	; 0x2a
   156ec:	add	r3, r0, r2
   156f0:	strb	r1, [r0, r2]
   156f4:	mov	r0, #46	; 0x2e
   156f8:	mov	r2, #0
   156fc:	strb	r0, [r3, #1]
   15700:	strb	r1, [r3, #2]
   15704:	strb	lr, [r3, #3]
   15708:	vmrs	APSR_nzcv, fpscr
   1570c:	strb	r2, [r3, #4]
   15710:	movmi	r4, #1
   15714:	movpl	r4, #15
   15718:	mov	r1, r6
   1571c:	mvn	r3, #0
   15720:	strd	r8, [sp]
   15724:	mov	r2, #1
   15728:	mov	r0, r7
   1572c:	str	r4, [sp, #8]
   15730:	vstr	d8, [sp, #16]
   15734:	bl	111f8 <__snprintf_chk@plt>
   15738:	cmp	r4, #16
   1573c:	mov	r5, r0
   15740:	movle	r1, #0
   15744:	movgt	r1, #1
   15748:	orrs	r1, r1, r0, lsr #31
   1574c:	add	r4, r4, #1
   15750:	bne	15770 <__assert_fail@plt+0x456c>
   15754:	cmp	r0, r6
   15758:	bcs	15718 <__assert_fail@plt+0x4514>
   1575c:	mov	r0, r7
   15760:	bl	1112c <strtod@plt>
   15764:	vcmp.f64	d0, d8
   15768:	vmrs	APSR_nzcv, fpscr
   1576c:	bne	15718 <__assert_fail@plt+0x4514>
   15770:	mov	r0, r5
   15774:	add	sp, sp, #44	; 0x2c
   15778:	vpop	{d8}
   1577c:	ldrd	r4, [sp]
   15780:	ldrd	r6, [sp, #8]
   15784:	ldrd	r8, [sp, #16]
   15788:	add	sp, sp, #24
   1578c:	pop	{pc}		; (ldr pc, [sp], #4)
   15790:	andeq	r0, r0, r0
   15794:	andseq	r0, r0, r0
   15798:	strd	r4, [sp, #-12]!
   1579c:	mov	r4, r0
   157a0:	str	lr, [sp, #8]
   157a4:	sub	sp, sp, #12
   157a8:	bl	11138 <fileno@plt>
   157ac:	cmp	r0, #0
   157b0:	mov	r0, r4
   157b4:	blt	15838 <__assert_fail@plt+0x4634>
   157b8:	bl	11084 <__freading@plt>
   157bc:	cmp	r0, #0
   157c0:	bne	15804 <__assert_fail@plt+0x4600>
   157c4:	mov	r0, r4
   157c8:	bl	1584c <__assert_fail@plt+0x4648>
   157cc:	cmp	r0, #0
   157d0:	beq	15834 <__assert_fail@plt+0x4630>
   157d4:	bl	110d8 <__errno_location@plt>
   157d8:	mov	r5, r0
   157dc:	mov	r0, r4
   157e0:	ldr	r4, [r5]
   157e4:	bl	11150 <fclose@plt>
   157e8:	cmp	r4, #0
   157ec:	mvnne	r0, #0
   157f0:	strne	r4, [r5]
   157f4:	add	sp, sp, #12
   157f8:	ldrd	r4, [sp]
   157fc:	add	sp, sp, #8
   15800:	pop	{pc}		; (ldr pc, [sp], #4)
   15804:	mov	r0, r4
   15808:	bl	11138 <fileno@plt>
   1580c:	mov	r1, #1
   15810:	mov	r2, #0
   15814:	mov	r3, #0
   15818:	str	r1, [sp]
   1581c:	bl	1100c <lseek64@plt>
   15820:	mvn	r3, #0
   15824:	mvn	r2, #0
   15828:	cmp	r1, r3
   1582c:	cmpeq	r0, r2
   15830:	bne	157c4 <__assert_fail@plt+0x45c0>
   15834:	mov	r0, r4
   15838:	add	sp, sp, #12
   1583c:	ldrd	r4, [sp]
   15840:	ldr	lr, [sp, #8]
   15844:	add	sp, sp, #12
   15848:	b	11150 <fclose@plt>
   1584c:	str	r4, [sp, #-8]!
   15850:	subs	r4, r0, #0
   15854:	str	lr, [sp, #4]
   15858:	sub	sp, sp, #8
   1585c:	beq	15878 <__assert_fail@plt+0x4674>
   15860:	bl	11084 <__freading@plt>
   15864:	cmp	r0, #0
   15868:	beq	15878 <__assert_fail@plt+0x4674>
   1586c:	ldr	r3, [r4]
   15870:	tst	r3, #256	; 0x100
   15874:	bne	15890 <__assert_fail@plt+0x468c>
   15878:	mov	r0, r4
   1587c:	add	sp, sp, #8
   15880:	ldr	r4, [sp]
   15884:	ldr	lr, [sp, #4]
   15888:	add	sp, sp, #8
   1588c:	b	10f40 <fflush@plt>
   15890:	mov	r1, #1
   15894:	mov	r2, #0
   15898:	mov	r3, #0
   1589c:	mov	r0, r4
   158a0:	str	r1, [sp]
   158a4:	bl	1590c <__assert_fail@plt+0x4708>
   158a8:	b	15878 <__assert_fail@plt+0x4674>
   158ac:	strd	r4, [sp, #-12]!
   158b0:	mov	r5, r0
   158b4:	str	lr, [sp, #8]
   158b8:	sub	sp, sp, #12
   158bc:	bl	110d8 <__errno_location@plt>
   158c0:	mov	r4, r0
   158c4:	mov	r2, #0
   158c8:	ldr	r3, [r4]
   158cc:	mov	r0, r5
   158d0:	str	r2, [r4]
   158d4:	str	r3, [sp]
   158d8:	str	r3, [sp, #4]
   158dc:	bl	10f4c <free@plt>
   158e0:	ldr	r3, [r4]
   158e4:	add	r2, sp, #8
   158e8:	clz	r3, r3
   158ec:	lsr	r3, r3, #5
   158f0:	add	r3, r2, r3, lsl #2
   158f4:	ldr	r3, [r3, #-8]
   158f8:	str	r3, [r4]
   158fc:	add	sp, sp, #12
   15900:	ldrd	r4, [sp]
   15904:	add	sp, sp, #8
   15908:	pop	{pc}		; (ldr pc, [sp], #4)
   1590c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15910:	mov	r4, r0
   15914:	ldr	ip, [r0, #4]
   15918:	strd	r6, [sp, #8]
   1591c:	str	lr, [sp, #20]
   15920:	ldr	lr, [r0, #8]
   15924:	str	r8, [sp, #16]
   15928:	sub	sp, sp, #8
   1592c:	ldr	r5, [sp, #32]
   15930:	cmp	lr, ip
   15934:	beq	1595c <__assert_fail@plt+0x4758>
   15938:	mov	r0, r4
   1593c:	str	r5, [sp, #32]
   15940:	add	sp, sp, #8
   15944:	ldrd	r4, [sp]
   15948:	ldrd	r6, [sp, #8]
   1594c:	ldr	r8, [sp, #16]
   15950:	ldr	lr, [sp, #20]
   15954:	add	sp, sp, #24
   15958:	b	1115c <fseeko64@plt>
   1595c:	ldr	ip, [r0, #16]
   15960:	ldr	lr, [r0, #20]
   15964:	cmp	lr, ip
   15968:	bne	15938 <__assert_fail@plt+0x4734>
   1596c:	ldr	r8, [r0, #36]	; 0x24
   15970:	cmp	r8, #0
   15974:	bne	15938 <__assert_fail@plt+0x4734>
   15978:	mov	r6, r2
   1597c:	mov	r7, r3
   15980:	bl	11138 <fileno@plt>
   15984:	mov	r2, r6
   15988:	mov	r3, r7
   1598c:	str	r5, [sp]
   15990:	bl	1100c <lseek64@plt>
   15994:	mvn	r3, #0
   15998:	mvn	r2, #0
   1599c:	cmp	r1, r3
   159a0:	cmpeq	r0, r2
   159a4:	beq	159d4 <__assert_fail@plt+0x47d0>
   159a8:	ldr	r3, [r4]
   159ac:	strd	r0, [r4, #80]	; 0x50
   159b0:	bic	r3, r3, #16
   159b4:	str	r3, [r4]
   159b8:	mov	r0, r8
   159bc:	add	sp, sp, #8
   159c0:	ldrd	r4, [sp]
   159c4:	ldrd	r6, [sp, #8]
   159c8:	ldr	r8, [sp, #16]
   159cc:	add	sp, sp, #20
   159d0:	pop	{pc}		; (ldr pc, [sp], #4)
   159d4:	mvn	r8, #0
   159d8:	b	159b8 <__assert_fail@plt+0x47b4>
   159dc:	vcmpe.f32	s0, #0.0
   159e0:	vldr	s15, [pc, #304]	; 15b18 <__assert_fail@plt+0x4914>
   159e4:	movw	ip, #11557	; 0x2d25
   159e8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   159ec:	mov	r4, #32
   159f0:	strd	r6, [sp, #8]
   159f4:	mov	r6, r1
   159f8:	and	r1, r2, #1
   159fc:	strd	r8, [sp, #16]
   15a00:	mov	r9, r3
   15a04:	mov	r7, r0
   15a08:	str	lr, [sp, #24]
   15a0c:	ubfx	r0, r2, #1, #1
   15a10:	vpush	{d8-d9}
   15a14:	sub	sp, sp, #44	; 0x2c
   15a18:	vcvt.f64.f32	d8, s0
   15a1c:	add	r3, sp, #29
   15a20:	vmov.f32	s18, s0
   15a24:	add	r8, sp, #28
   15a28:	vmrs	APSR_nzcv, fpscr
   15a2c:	strh	ip, [sp, #28]
   15a30:	mov	ip, #43	; 0x2b
   15a34:	strb	ip, [r3, r1]
   15a38:	add	r3, r3, r1
   15a3c:	ubfx	r1, r2, #2, #1
   15a40:	add	ip, r3, r0
   15a44:	vnegmi.f32	s14, s0
   15a48:	vmovpl.f32	s14, s0
   15a4c:	tst	r2, #16
   15a50:	movne	lr, #71	; 0x47
   15a54:	moveq	lr, #103	; 0x67
   15a58:	strb	r4, [r3, r0]
   15a5c:	mov	r3, #48	; 0x30
   15a60:	ubfx	r2, r2, #3, #1
   15a64:	add	r0, ip, r1
   15a68:	vcmpe.f32	s14, s15
   15a6c:	strb	r3, [ip, r1]
   15a70:	mov	r1, #42	; 0x2a
   15a74:	add	r3, r0, r2
   15a78:	strb	r1, [r0, r2]
   15a7c:	mov	r0, #46	; 0x2e
   15a80:	mov	r2, #0
   15a84:	strb	r0, [r3, #1]
   15a88:	strb	r1, [r3, #2]
   15a8c:	strb	lr, [r3, #3]
   15a90:	vmrs	APSR_nzcv, fpscr
   15a94:	strb	r2, [r3, #4]
   15a98:	movmi	r4, #1
   15a9c:	movpl	r4, #6
   15aa0:	mov	r1, r6
   15aa4:	mvn	r3, #0
   15aa8:	strd	r8, [sp]
   15aac:	mov	r2, #1
   15ab0:	mov	r0, r7
   15ab4:	str	r4, [sp, #8]
   15ab8:	vstr	d8, [sp, #16]
   15abc:	bl	111f8 <__snprintf_chk@plt>
   15ac0:	cmp	r4, #8
   15ac4:	mov	r5, r0
   15ac8:	movle	r1, #0
   15acc:	movgt	r1, #1
   15ad0:	orrs	r1, r1, r0, lsr #31
   15ad4:	add	r4, r4, #1
   15ad8:	bne	15af8 <__assert_fail@plt+0x48f4>
   15adc:	cmp	r0, r6
   15ae0:	bcs	15aa0 <__assert_fail@plt+0x489c>
   15ae4:	mov	r0, r7
   15ae8:	bl	11048 <strtof@plt>
   15aec:	vcmp.f32	s0, s18
   15af0:	vmrs	APSR_nzcv, fpscr
   15af4:	bne	15aa0 <__assert_fail@plt+0x489c>
   15af8:	mov	r0, r5
   15afc:	add	sp, sp, #44	; 0x2c
   15b00:	vpop	{d8-d9}
   15b04:	ldrd	r4, [sp]
   15b08:	ldrd	r6, [sp, #8]
   15b0c:	ldrd	r8, [sp, #16]
   15b10:	add	sp, sp, #24
   15b14:	pop	{pc}		; (ldr pc, [sp], #4)
   15b18:	addeq	r0, r0, r0
   15b1c:	andeq	r0, r0, r0
   15b20:	vcmpe.f64	d0, #0.0
   15b24:	vldr	d7, [pc, #308]	; 15c60 <__assert_fail@plt+0x4a5c>
   15b28:	movw	ip, #11557	; 0x2d25
   15b2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15b30:	mov	r4, #32
   15b34:	strd	r6, [sp, #8]
   15b38:	mov	r6, r1
   15b3c:	and	r1, r2, #1
   15b40:	strd	r8, [sp, #16]
   15b44:	mov	r9, r3
   15b48:	mov	r7, r0
   15b4c:	str	lr, [sp, #24]
   15b50:	ubfx	r0, r2, #1, #1
   15b54:	vpush	{d8}
   15b58:	sub	sp, sp, #44	; 0x2c
   15b5c:	vmov.f64	d8, d0
   15b60:	add	r3, sp, #29
   15b64:	add	r8, sp, #28
   15b68:	vmrs	APSR_nzcv, fpscr
   15b6c:	strh	ip, [sp, #28]
   15b70:	mov	ip, #43	; 0x2b
   15b74:	strb	ip, [r3, r1]
   15b78:	add	r3, r3, r1
   15b7c:	ubfx	r1, r2, #2, #1
   15b80:	add	ip, r3, r0
   15b84:	vnegmi.f64	d6, d0
   15b88:	vmovpl.f64	d6, d0
   15b8c:	tst	r2, #16
   15b90:	movne	lr, #71	; 0x47
   15b94:	moveq	lr, #103	; 0x67
   15b98:	strb	r4, [r3, r0]
   15b9c:	mov	r3, #48	; 0x30
   15ba0:	ubfx	r2, r2, #3, #1
   15ba4:	add	r0, ip, r1
   15ba8:	vcmpe.f64	d6, d7
   15bac:	strb	r3, [ip, r1]
   15bb0:	mov	r1, #42	; 0x2a
   15bb4:	add	r3, r0, r2
   15bb8:	mov	ip, #46	; 0x2e
   15bbc:	strb	r1, [r0, r2]
   15bc0:	mov	r0, #76	; 0x4c
   15bc4:	mov	r2, #0
   15bc8:	strb	ip, [r3, #1]
   15bcc:	strb	r1, [r3, #2]
   15bd0:	strb	r0, [r3, #3]
   15bd4:	strb	lr, [r3, #4]
   15bd8:	vmrs	APSR_nzcv, fpscr
   15bdc:	strb	r2, [r3, #5]
   15be0:	movmi	r4, #1
   15be4:	movpl	r4, #15
   15be8:	mov	r1, r6
   15bec:	mvn	r3, #0
   15bf0:	strd	r8, [sp]
   15bf4:	mov	r2, #1
   15bf8:	mov	r0, r7
   15bfc:	str	r4, [sp, #8]
   15c00:	vstr	d8, [sp, #16]
   15c04:	bl	111f8 <__snprintf_chk@plt>
   15c08:	cmp	r4, #16
   15c0c:	mov	r5, r0
   15c10:	movle	r1, #0
   15c14:	movgt	r1, #1
   15c18:	orrs	r1, r1, r0, lsr #31
   15c1c:	add	r4, r4, #1
   15c20:	bne	15c40 <__assert_fail@plt+0x4a3c>
   15c24:	cmp	r0, r6
   15c28:	bcs	15be8 <__assert_fail@plt+0x49e4>
   15c2c:	mov	r0, r7
   15c30:	bl	10f94 <strtold@plt>
   15c34:	vcmp.f64	d0, d8
   15c38:	vmrs	APSR_nzcv, fpscr
   15c3c:	bne	15be8 <__assert_fail@plt+0x49e4>
   15c40:	mov	r0, r5
   15c44:	add	sp, sp, #44	; 0x2c
   15c48:	vpop	{d8}
   15c4c:	ldrd	r4, [sp]
   15c50:	ldrd	r6, [sp, #8]
   15c54:	ldrd	r8, [sp, #16]
   15c58:	add	sp, sp, #24
   15c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c60:	andeq	r0, r0, r0
   15c64:	andseq	r0, r0, r0
   15c68:	strd	r4, [sp, #-16]!
   15c6c:	subs	r4, r0, #0
   15c70:	str	r6, [sp, #8]
   15c74:	str	lr, [sp, #12]
   15c78:	beq	15d10 <__assert_fail@plt+0x4b0c>
   15c7c:	mov	r1, #47	; 0x2f
   15c80:	bl	11180 <strrchr@plt>
   15c84:	subs	r5, r0, #0
   15c88:	beq	15ce8 <__assert_fail@plt+0x4ae4>
   15c8c:	add	r6, r5, #1
   15c90:	sub	r3, r6, r4
   15c94:	cmp	r3, #6
   15c98:	ble	15ce8 <__assert_fail@plt+0x4ae4>
   15c9c:	movw	r1, #45612	; 0xb22c
   15ca0:	movt	r1, #1
   15ca4:	mov	r2, #7
   15ca8:	sub	r0, r5, #6
   15cac:	bl	111e0 <strncmp@plt>
   15cb0:	cmp	r0, #0
   15cb4:	bne	15ce8 <__assert_fail@plt+0x4ae4>
   15cb8:	movw	r1, #45620	; 0xb234
   15cbc:	movt	r1, #1
   15cc0:	mov	r2, #3
   15cc4:	mov	r0, r6
   15cc8:	bl	111e0 <strncmp@plt>
   15ccc:	cmp	r0, #0
   15cd0:	movne	r4, r6
   15cd4:	bne	15ce8 <__assert_fail@plt+0x4ae4>
   15cd8:	add	r4, r5, #4
   15cdc:	movw	r3, #49512	; 0xc168
   15ce0:	movt	r3, #2
   15ce4:	str	r4, [r3]
   15ce8:	movw	r2, #49728	; 0xc240
   15cec:	movt	r2, #2
   15cf0:	ldr	r6, [sp, #8]
   15cf4:	movw	r3, #49516	; 0xc16c
   15cf8:	movt	r3, #2
   15cfc:	str	r4, [r2]
   15d00:	str	r4, [r3]
   15d04:	ldrd	r4, [sp]
   15d08:	add	sp, sp, #12
   15d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d10:	movw	r3, #49528	; 0xc178
   15d14:	movt	r3, #2
   15d18:	movw	r0, #45556	; 0xb1f4
   15d1c:	movt	r0, #1
   15d20:	ldr	r3, [r3]
   15d24:	mov	r2, #55	; 0x37
   15d28:	mov	r1, #1
   15d2c:	bl	11000 <fwrite@plt>
   15d30:	bl	111ec <abort@plt>
   15d34:	strd	r4, [sp, #-16]!
   15d38:	mov	r4, #0
   15d3c:	mov	r5, #0
   15d40:	cmp	r1, #10
   15d44:	str	r6, [sp, #8]
   15d48:	strd	r4, [r0]
   15d4c:	strd	r4, [r0, #8]
   15d50:	str	lr, [sp, #12]
   15d54:	strd	r4, [r0, #16]
   15d58:	strd	r4, [r0, #24]
   15d5c:	strd	r4, [r0, #32]
   15d60:	strd	r4, [r0, #40]	; 0x28
   15d64:	beq	15d7c <__assert_fail@plt+0x4b78>
   15d68:	ldrd	r4, [sp]
   15d6c:	str	r1, [r0]
   15d70:	ldr	r6, [sp, #8]
   15d74:	add	sp, sp, #12
   15d78:	pop	{pc}		; (ldr pc, [sp], #4)
   15d7c:	bl	111ec <abort@plt>
   15d80:	mov	r2, #5
   15d84:	strd	r4, [sp, #-16]!
   15d88:	mov	r5, r0
   15d8c:	str	r6, [sp, #8]
   15d90:	mov	r6, r1
   15d94:	mov	r1, r0
   15d98:	mov	r0, #0
   15d9c:	str	lr, [sp, #12]
   15da0:	bl	10fc4 <dcgettext@plt>
   15da4:	cmp	r5, r0
   15da8:	mov	r4, r0
   15dac:	beq	15dc4 <__assert_fail@plt+0x4bc0>
   15db0:	mov	r0, r4
   15db4:	ldrd	r4, [sp]
   15db8:	ldr	r6, [sp, #8]
   15dbc:	add	sp, sp, #12
   15dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc4:	bl	19710 <__assert_fail@plt+0x850c>
   15dc8:	ldrb	r3, [r0]
   15dcc:	bic	r3, r3, #32
   15dd0:	cmp	r3, #85	; 0x55
   15dd4:	bne	15e3c <__assert_fail@plt+0x4c38>
   15dd8:	ldrb	r3, [r0, #1]
   15ddc:	bic	r3, r3, #32
   15de0:	cmp	r3, #84	; 0x54
   15de4:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15de8:	ldrb	r3, [r0, #2]
   15dec:	bic	r3, r3, #32
   15df0:	cmp	r3, #70	; 0x46
   15df4:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15df8:	ldrb	r3, [r0, #3]
   15dfc:	cmp	r3, #45	; 0x2d
   15e00:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e04:	ldrb	r3, [r0, #4]
   15e08:	cmp	r3, #56	; 0x38
   15e0c:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e10:	ldrb	r3, [r0, #5]
   15e14:	cmp	r3, #0
   15e18:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e1c:	ldrb	r2, [r4]
   15e20:	movw	r3, #45712	; 0xb290
   15e24:	movt	r3, #1
   15e28:	movw	r4, #45724	; 0xb29c
   15e2c:	movt	r4, #1
   15e30:	cmp	r2, #96	; 0x60
   15e34:	movne	r4, r3
   15e38:	b	15db0 <__assert_fail@plt+0x4bac>
   15e3c:	cmp	r3, #71	; 0x47
   15e40:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e44:	ldrb	r3, [r0, #1]
   15e48:	bic	r3, r3, #32
   15e4c:	cmp	r3, #66	; 0x42
   15e50:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e54:	ldrb	r3, [r0, #2]
   15e58:	cmp	r3, #49	; 0x31
   15e5c:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e60:	ldrb	r3, [r0, #3]
   15e64:	cmp	r3, #56	; 0x38
   15e68:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e6c:	ldrb	r3, [r0, #4]
   15e70:	cmp	r3, #48	; 0x30
   15e74:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e78:	ldrb	r3, [r0, #5]
   15e7c:	cmp	r3, #51	; 0x33
   15e80:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e84:	ldrb	r3, [r0, #6]
   15e88:	cmp	r3, #48	; 0x30
   15e8c:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e90:	ldrb	r3, [r0, #7]
   15e94:	cmp	r3, #0
   15e98:	bne	15ebc <__assert_fail@plt+0x4cb8>
   15e9c:	ldrb	r2, [r4]
   15ea0:	movw	r3, #45716	; 0xb294
   15ea4:	movt	r3, #1
   15ea8:	movw	r4, #45720	; 0xb298
   15eac:	movt	r4, #1
   15eb0:	cmp	r2, #96	; 0x60
   15eb4:	movne	r4, r3
   15eb8:	b	15db0 <__assert_fail@plt+0x4bac>
   15ebc:	movw	r3, #45728	; 0xb2a0
   15ec0:	movt	r3, #1
   15ec4:	cmp	r6, #9
   15ec8:	movw	r4, #45708	; 0xb28c
   15ecc:	movt	r4, #1
   15ed0:	movne	r4, r3
   15ed4:	b	15db0 <__assert_fail@plt+0x4bac>
   15ed8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15edc:	strd	r6, [sp, #8]
   15ee0:	strd	r8, [sp, #16]
   15ee4:	strd	sl, [sp, #24]
   15ee8:	mov	fp, r0
   15eec:	mov	sl, r1
   15ef0:	str	lr, [sp, #32]
   15ef4:	sub	sp, sp, #116	; 0x74
   15ef8:	ldr	r8, [sp, #152]	; 0x98
   15efc:	str	r3, [sp, #28]
   15f00:	ldr	r3, [sp, #156]	; 0x9c
   15f04:	str	r2, [sp, #32]
   15f08:	and	r4, r3, #2
   15f0c:	ubfx	r3, r3, #1, #1
   15f10:	str	r3, [sp, #44]	; 0x2c
   15f14:	bl	11018 <__ctype_get_mb_cur_max@plt>
   15f18:	str	r0, [sp, #64]	; 0x40
   15f1c:	cmp	r8, #10
   15f20:	ldrls	pc, [pc, r8, lsl #2]
   15f24:	b	17694 <__assert_fail@plt+0x6490>
   15f28:	andeq	r6, r1, ip, lsr #6
   15f2c:	andeq	r6, r1, r8, asr #7
   15f30:	andeq	r6, r1, r4, lsr #19
   15f34:	andeq	r6, r1, r8, ror #7
   15f38:	muleq	r1, r0, r2
   15f3c:	ldrdeq	r6, [r1], -ip
   15f40:	andeq	r6, r1, ip, asr r3
   15f44:	muleq	r1, r8, r3
   15f48:	andeq	r5, r1, r4, asr pc
   15f4c:	andeq	r5, r1, r4, asr pc
   15f50:	andeq	r5, r1, r4, asr pc
   15f54:	cmp	r8, #10
   15f58:	beq	15f84 <__assert_fail@plt+0x4d80>
   15f5c:	mov	r1, r8
   15f60:	movw	r0, #45732	; 0xb2a4
   15f64:	movt	r0, #1
   15f68:	bl	15d80 <__assert_fail@plt+0x4b7c>
   15f6c:	mov	r1, r8
   15f70:	str	r0, [sp, #164]	; 0xa4
   15f74:	movw	r0, #45728	; 0xb2a0
   15f78:	movt	r0, #1
   15f7c:	bl	15d80 <__assert_fail@plt+0x4b7c>
   15f80:	str	r0, [sp, #168]	; 0xa8
   15f84:	cmp	r4, #0
   15f88:	movne	r4, #0
   15f8c:	beq	17370 <__assert_fail@plt+0x616c>
   15f90:	mov	r3, #1
   15f94:	mov	r5, #0
   15f98:	ldr	r0, [sp, #168]	; 0xa8
   15f9c:	str	r3, [sp, #36]	; 0x24
   15fa0:	str	r3, [sp, #40]	; 0x28
   15fa4:	str	r5, [sp, #68]	; 0x44
   15fa8:	bl	110c0 <strlen@plt>
   15fac:	ldr	r3, [sp, #168]	; 0xa8
   15fb0:	str	r5, [sp, #48]	; 0x30
   15fb4:	str	r0, [sp, #56]	; 0x38
   15fb8:	str	r3, [sp, #60]	; 0x3c
   15fbc:	str	r5, [sp, #72]	; 0x48
   15fc0:	str	r8, [sp, #152]	; 0x98
   15fc4:	mov	r8, fp
   15fc8:	mov	r9, #0
   15fcc:	ldr	fp, [sp, #152]	; 0x98
   15fd0:	ldr	r3, [sp, #28]
   15fd4:	cmn	r3, #1
   15fd8:	beq	16538 <__assert_fail@plt+0x5334>
   15fdc:	ldr	r3, [sp, #28]
   15fe0:	subs	r6, r3, r9
   15fe4:	movne	r6, #1
   15fe8:	cmp	r6, #0
   15fec:	beq	16550 <__assert_fail@plt+0x534c>
   15ff0:	ldr	r0, [sp, #32]
   15ff4:	ldr	r7, [sp, #40]	; 0x28
   15ff8:	add	r3, r0, r9
   15ffc:	cmp	fp, #2
   16000:	moveq	r7, #0
   16004:	andne	r7, r7, #1
   16008:	str	r3, [sp, #52]	; 0x34
   1600c:	cmp	r7, #0
   16010:	beq	169ec <__assert_fail@plt+0x57e8>
   16014:	ldr	r2, [sp, #56]	; 0x38
   16018:	cmp	r2, #0
   1601c:	beq	16c88 <__assert_fail@plt+0x5a84>
   16020:	ldr	r1, [sp, #28]
   16024:	cmp	r2, #1
   16028:	mov	r3, r2
   1602c:	movls	r3, #0
   16030:	movhi	r3, #1
   16034:	add	r5, r9, r2
   16038:	cmn	r1, #1
   1603c:	movne	r3, #0
   16040:	cmp	r3, #0
   16044:	beq	16050 <__assert_fail@plt+0x4e4c>
   16048:	bl	110c0 <strlen@plt>
   1604c:	str	r0, [sp, #28]
   16050:	ldr	r3, [sp, #28]
   16054:	cmp	r5, r3
   16058:	bhi	16c88 <__assert_fail@plt+0x5a84>
   1605c:	ldr	r0, [sp, #52]	; 0x34
   16060:	ldr	r2, [sp, #56]	; 0x38
   16064:	ldr	r1, [sp, #60]	; 0x3c
   16068:	bl	10fac <memcmp@plt>
   1606c:	cmp	r0, #0
   16070:	bne	16c88 <__assert_fail@plt+0x5a84>
   16074:	ldr	r3, [sp, #44]	; 0x2c
   16078:	cmp	r3, #0
   1607c:	bne	175b8 <__assert_fail@plt+0x63b4>
   16080:	ldr	r3, [sp, #52]	; 0x34
   16084:	ldrb	r5, [r3]
   16088:	cmp	r5, #126	; 0x7e
   1608c:	ldrls	pc, [pc, r5, lsl #2]
   16090:	b	16948 <__assert_fail@plt+0x5744>
   16094:	andeq	r6, r1, ip, asr #16
   16098:	andeq	r6, r1, r8, asr #18
   1609c:	andeq	r6, r1, r8, asr #18
   160a0:	andeq	r6, r1, r8, asr #18
   160a4:	andeq	r6, r1, r8, asr #18
   160a8:	andeq	r6, r1, r8, asr #18
   160ac:	andeq	r6, r1, r8, asr #18
   160b0:	andeq	r6, r1, r0, lsr #16
   160b4:	andeq	r6, r1, r8, lsl r8
   160b8:	andeq	r6, r1, r0, ror #14
   160bc:	andeq	r6, r1, ip, lsl #16
   160c0:	andeq	r6, r1, r8, asr r7
   160c4:	andeq	r6, r1, r8, ror #15
   160c8:	andeq	r6, r1, r4, lsr r8
   160cc:	andeq	r6, r1, r8, asr #18
   160d0:	andeq	r6, r1, r8, asr #18
   160d4:	andeq	r6, r1, r8, asr #18
   160d8:	andeq	r6, r1, r8, asr #18
   160dc:	andeq	r6, r1, r8, asr #18
   160e0:	andeq	r6, r1, r8, asr #18
   160e4:	andeq	r6, r1, r8, asr #18
   160e8:	andeq	r6, r1, r8, asr #18
   160ec:	andeq	r6, r1, r8, asr #18
   160f0:	andeq	r6, r1, r8, asr #18
   160f4:	andeq	r6, r1, r8, asr #18
   160f8:	andeq	r6, r1, r8, asr #18
   160fc:	andeq	r6, r1, r8, asr #18
   16100:	andeq	r6, r1, r8, asr #18
   16104:	andeq	r6, r1, r8, asr #18
   16108:	andeq	r6, r1, r8, asr #18
   1610c:	andeq	r6, r1, r8, asr #18
   16110:	andeq	r6, r1, r8, asr #18
   16114:	andeq	r6, r1, r4, lsr #18
   16118:	andeq	r6, r1, ip, lsr #16
   1611c:	andeq	r6, r1, ip, lsr #16
   16120:	andeq	r6, r1, r8, lsl #18
   16124:	andeq	r6, r1, ip, lsr #16
   16128:	andeq	r6, r1, ip, lsr r9
   1612c:	andeq	r6, r1, ip, lsr #16
   16130:	andeq	r6, r1, r8, lsl #13
   16134:	andeq	r6, r1, ip, lsr #16
   16138:	andeq	r6, r1, ip, lsr #16
   1613c:	andeq	r6, r1, ip, lsr #16
   16140:	andeq	r6, r1, ip, lsr r9
   16144:	andeq	r6, r1, ip, lsr r9
   16148:	andeq	r6, r1, ip, lsr r9
   1614c:	andeq	r6, r1, ip, lsr r9
   16150:	andeq	r6, r1, ip, lsr r9
   16154:	andeq	r6, r1, ip, lsr r9
   16158:	andeq	r6, r1, ip, lsr r9
   1615c:	andeq	r6, r1, ip, lsr r9
   16160:	andeq	r6, r1, ip, lsr r9
   16164:	andeq	r6, r1, ip, lsr r9
   16168:	andeq	r6, r1, ip, lsr r9
   1616c:	andeq	r6, r1, ip, lsr r9
   16170:	andeq	r6, r1, ip, lsr r9
   16174:	andeq	r6, r1, ip, lsr r9
   16178:	andeq	r6, r1, ip, lsr r9
   1617c:	andeq	r6, r1, ip, lsr r9
   16180:	andeq	r6, r1, ip, lsr #16
   16184:	andeq	r6, r1, ip, lsr #16
   16188:	andeq	r6, r1, ip, lsr #16
   1618c:	andeq	r6, r1, ip, lsr #16
   16190:	andeq	r6, r1, ip, asr r6
   16194:	andeq	r6, r1, r8, asr #18
   16198:	andeq	r6, r1, ip, lsr r9
   1619c:	andeq	r6, r1, ip, lsr r9
   161a0:	andeq	r6, r1, ip, lsr r9
   161a4:	andeq	r6, r1, ip, lsr r9
   161a8:	andeq	r6, r1, ip, lsr r9
   161ac:	andeq	r6, r1, ip, lsr r9
   161b0:	andeq	r6, r1, ip, lsr r9
   161b4:	andeq	r6, r1, ip, lsr r9
   161b8:	andeq	r6, r1, ip, lsr r9
   161bc:	andeq	r6, r1, ip, lsr r9
   161c0:	andeq	r6, r1, ip, lsr r9
   161c4:	andeq	r6, r1, ip, lsr r9
   161c8:	andeq	r6, r1, ip, lsr r9
   161cc:	andeq	r6, r1, ip, lsr r9
   161d0:	andeq	r6, r1, ip, lsr r9
   161d4:	andeq	r6, r1, ip, lsr r9
   161d8:	andeq	r6, r1, ip, lsr r9
   161dc:	andeq	r6, r1, ip, lsr r9
   161e0:	andeq	r6, r1, ip, lsr r9
   161e4:	andeq	r6, r1, ip, lsr r9
   161e8:	andeq	r6, r1, ip, lsr r9
   161ec:	andeq	r6, r1, ip, lsr r9
   161f0:	andeq	r6, r1, ip, lsr r9
   161f4:	andeq	r6, r1, ip, lsr r9
   161f8:	andeq	r6, r1, ip, lsr r9
   161fc:	andeq	r6, r1, ip, lsr r9
   16200:	andeq	r6, r1, ip, lsr #16
   16204:	andeq	r6, r1, r4, lsl #12
   16208:	andeq	r6, r1, ip, lsr r9
   1620c:	andeq	r6, r1, ip, lsr #16
   16210:	andeq	r6, r1, ip, lsr r9
   16214:	andeq	r6, r1, ip, lsr #16
   16218:	andeq	r6, r1, ip, lsr r9
   1621c:	andeq	r6, r1, ip, lsr r9
   16220:	andeq	r6, r1, ip, lsr r9
   16224:	andeq	r6, r1, ip, lsr r9
   16228:	andeq	r6, r1, ip, lsr r9
   1622c:	andeq	r6, r1, ip, lsr r9
   16230:	andeq	r6, r1, ip, lsr r9
   16234:	andeq	r6, r1, ip, lsr r9
   16238:	andeq	r6, r1, ip, lsr r9
   1623c:	andeq	r6, r1, ip, lsr r9
   16240:	andeq	r6, r1, ip, lsr r9
   16244:	andeq	r6, r1, ip, lsr r9
   16248:	andeq	r6, r1, ip, lsr r9
   1624c:	andeq	r6, r1, ip, lsr r9
   16250:	andeq	r6, r1, ip, lsr r9
   16254:	andeq	r6, r1, ip, lsr r9
   16258:	andeq	r6, r1, ip, lsr r9
   1625c:	andeq	r6, r1, ip, lsr r9
   16260:	andeq	r6, r1, ip, lsr r9
   16264:	andeq	r6, r1, ip, lsr r9
   16268:	andeq	r6, r1, ip, lsr r9
   1626c:	andeq	r6, r1, ip, lsr r9
   16270:	andeq	r6, r1, ip, lsr r9
   16274:	andeq	r6, r1, ip, lsr r9
   16278:	andeq	r6, r1, ip, lsr r9
   1627c:	andeq	r6, r1, ip, lsr r9
   16280:	andeq	r6, r1, r8, lsr #8
   16284:	andeq	r6, r1, ip, lsr #16
   16288:	andeq	r6, r1, r8, lsr #8
   1628c:	andeq	r6, r1, r8, lsl #18
   16290:	cmp	r4, #0
   16294:	moveq	r3, #1
   16298:	streq	r3, [sp, #40]	; 0x28
   1629c:	beq	169b0 <__assert_fail@plt+0x57ac>
   162a0:	mov	r3, #0
   162a4:	mov	r2, #1
   162a8:	mov	r4, r3
   162ac:	str	r2, [sp, #36]	; 0x24
   162b0:	str	r2, [sp, #44]	; 0x2c
   162b4:	str	r2, [sp, #56]	; 0x38
   162b8:	str	r3, [sp, #68]	; 0x44
   162bc:	movw	r3, #45728	; 0xb2a0
   162c0:	movt	r3, #1
   162c4:	str	r4, [sp, #40]	; 0x28
   162c8:	mov	r8, #2
   162cc:	str	r4, [sp, #48]	; 0x30
   162d0:	str	r3, [sp, #60]	; 0x3c
   162d4:	str	r4, [sp, #72]	; 0x48
   162d8:	b	15fc0 <__assert_fail@plt+0x4dbc>
   162dc:	cmp	r4, #0
   162e0:	bne	1752c <__assert_fail@plt+0x6328>
   162e4:	cmp	sl, #0
   162e8:	beq	172ec <__assert_fail@plt+0x60e8>
   162ec:	mov	r3, #34	; 0x22
   162f0:	mov	r1, r4
   162f4:	mov	r2, #1
   162f8:	strb	r3, [fp]
   162fc:	movw	r3, #45708	; 0xb28c
   16300:	movt	r3, #1
   16304:	mov	r4, r2
   16308:	str	r2, [sp, #36]	; 0x24
   1630c:	str	r2, [sp, #40]	; 0x28
   16310:	str	r1, [sp, #44]	; 0x2c
   16314:	str	r1, [sp, #48]	; 0x30
   16318:	str	r2, [sp, #56]	; 0x38
   1631c:	str	r3, [sp, #60]	; 0x3c
   16320:	str	r1, [sp, #68]	; 0x44
   16324:	str	r1, [sp, #72]	; 0x48
   16328:	b	15fc0 <__assert_fail@plt+0x4dbc>
   1632c:	mov	r3, #0
   16330:	mov	r4, r8
   16334:	str	r3, [sp, #40]	; 0x28
   16338:	str	r3, [sp, #44]	; 0x2c
   1633c:	str	r3, [sp, #48]	; 0x30
   16340:	str	r8, [sp, #56]	; 0x38
   16344:	str	r3, [sp, #60]	; 0x3c
   16348:	str	r3, [sp, #68]	; 0x44
   1634c:	mov	r3, #1
   16350:	str	r3, [sp, #36]	; 0x24
   16354:	str	r8, [sp, #72]	; 0x48
   16358:	b	15fc0 <__assert_fail@plt+0x4dbc>
   1635c:	mov	r3, #1
   16360:	mov	r2, #0
   16364:	mov	r4, r2
   16368:	mov	r8, #5
   1636c:	str	r3, [sp, #36]	; 0x24
   16370:	str	r3, [sp, #40]	; 0x28
   16374:	str	r3, [sp, #44]	; 0x2c
   16378:	str	r2, [sp, #48]	; 0x30
   1637c:	str	r3, [sp, #56]	; 0x38
   16380:	movw	r3, #45708	; 0xb28c
   16384:	movt	r3, #1
   16388:	str	r3, [sp, #60]	; 0x3c
   1638c:	str	r2, [sp, #68]	; 0x44
   16390:	str	r2, [sp, #72]	; 0x48
   16394:	b	15fc0 <__assert_fail@plt+0x4dbc>
   16398:	mov	r3, #0
   1639c:	mov	r2, #1
   163a0:	mov	r4, r3
   163a4:	str	r2, [sp, #36]	; 0x24
   163a8:	str	r2, [sp, #40]	; 0x28
   163ac:	str	r3, [sp, #44]	; 0x2c
   163b0:	str	r3, [sp, #48]	; 0x30
   163b4:	str	r3, [sp, #56]	; 0x38
   163b8:	str	r3, [sp, #60]	; 0x3c
   163bc:	str	r3, [sp, #68]	; 0x44
   163c0:	str	r3, [sp, #72]	; 0x48
   163c4:	b	15fc0 <__assert_fail@plt+0x4dbc>
   163c8:	mov	r2, #1
   163cc:	mov	r3, #0
   163d0:	mov	r4, r3
   163d4:	str	r2, [sp, #36]	; 0x24
   163d8:	str	r2, [sp, #44]	; 0x2c
   163dc:	str	r8, [sp, #56]	; 0x38
   163e0:	str	r3, [sp, #68]	; 0x44
   163e4:	b	162bc <__assert_fail@plt+0x50b8>
   163e8:	mov	r3, #1
   163ec:	mov	r2, #0
   163f0:	mov	r4, r2
   163f4:	mov	r8, #2
   163f8:	str	r3, [sp, #36]	; 0x24
   163fc:	str	r3, [sp, #40]	; 0x28
   16400:	str	r3, [sp, #44]	; 0x2c
   16404:	str	r2, [sp, #48]	; 0x30
   16408:	str	r3, [sp, #56]	; 0x38
   1640c:	movw	r3, #45728	; 0xb2a0
   16410:	movt	r3, #1
   16414:	str	r3, [sp, #60]	; 0x3c
   16418:	str	r2, [sp, #68]	; 0x44
   1641c:	str	r2, [sp, #72]	; 0x48
   16420:	b	15fc0 <__assert_fail@plt+0x4dbc>
   16424:	mov	r7, #0
   16428:	ldr	r3, [sp, #28]
   1642c:	cmn	r3, #1
   16430:	beq	16f08 <__assert_fail@plt+0x5d04>
   16434:	ldr	r3, [sp, #28]
   16438:	subs	r2, r3, #1
   1643c:	movne	r2, #1
   16440:	sub	r3, fp, #2
   16444:	cmp	r2, #0
   16448:	clz	r3, r3
   1644c:	lsr	r3, r3, #5
   16450:	bne	1645c <__assert_fail@plt+0x5258>
   16454:	cmp	r9, #0
   16458:	beq	16c68 <__assert_fail@plt+0x5a64>
   1645c:	mov	r6, #0
   16460:	ldr	r2, [sp, #40]	; 0x28
   16464:	eor	r2, r2, #1
   16468:	orrs	r3, r3, r2
   1646c:	bne	16644 <__assert_fail@plt+0x5440>
   16470:	ldr	r2, [sp, #160]	; 0xa0
   16474:	cmp	r2, #0
   16478:	beq	16498 <__assert_fail@plt+0x5294>
   1647c:	ldr	r0, [sp, #160]	; 0xa0
   16480:	ubfx	r1, r5, #5, #8
   16484:	and	r2, r5, #31
   16488:	ldr	r1, [r0, r1, lsl #2]
   1648c:	lsr	r2, r1, r2
   16490:	tst	r2, #1
   16494:	bne	164a0 <__assert_fail@plt+0x529c>
   16498:	cmp	r7, #0
   1649c:	beq	16710 <__assert_fail@plt+0x550c>
   164a0:	ldr	r2, [sp, #44]	; 0x2c
   164a4:	sub	r3, fp, #2
   164a8:	clz	r3, r3
   164ac:	lsr	r3, r3, #5
   164b0:	cmp	r2, #0
   164b4:	bne	1725c <__assert_fail@plt+0x6058>
   164b8:	ldr	r2, [sp, #48]	; 0x30
   164bc:	eor	r2, r2, #1
   164c0:	ands	r3, r3, r2
   164c4:	beq	164fc <__assert_fail@plt+0x52f8>
   164c8:	cmp	sl, r4
   164cc:	str	r3, [sp, #48]	; 0x30
   164d0:	movhi	r2, #39	; 0x27
   164d4:	strbhi	r2, [r8, r4]
   164d8:	add	r2, r4, #1
   164dc:	cmp	sl, r2
   164e0:	movhi	r1, #36	; 0x24
   164e4:	strbhi	r1, [r8, r2]
   164e8:	add	r2, r4, #2
   164ec:	add	r4, r4, #3
   164f0:	cmp	sl, r2
   164f4:	movhi	r1, #39	; 0x27
   164f8:	strbhi	r1, [r8, r2]
   164fc:	cmp	r4, sl
   16500:	add	r9, r9, #1
   16504:	movcc	r3, #92	; 0x5c
   16508:	strbcc	r3, [r8, r4]
   1650c:	add	r4, r4, #1
   16510:	cmp	r4, sl
   16514:	ldr	r3, [sp, #36]	; 0x24
   16518:	strbcc	r5, [r8, r4]
   1651c:	cmp	r6, #0
   16520:	add	r4, r4, #1
   16524:	moveq	r3, #0
   16528:	str	r3, [sp, #36]	; 0x24
   1652c:	ldr	r3, [sp, #28]
   16530:	cmn	r3, #1
   16534:	bne	15fdc <__assert_fail@plt+0x4dd8>
   16538:	ldr	r3, [sp, #32]
   1653c:	ldrb	r6, [r3, r9]
   16540:	adds	r6, r6, #0
   16544:	movne	r6, #1
   16548:	cmp	r6, #0
   1654c:	bne	15ff0 <__assert_fail@plt+0x4dec>
   16550:	str	fp, [sp, #152]	; 0x98
   16554:	mov	fp, r8
   16558:	cmp	r4, #0
   1655c:	ldr	r1, [sp, #44]	; 0x2c
   16560:	movne	r3, #0
   16564:	ldr	r8, [sp, #152]	; 0x98
   16568:	sub	r2, r8, #2
   1656c:	clz	r2, r2
   16570:	lsr	r2, r2, #5
   16574:	andeq	r3, r2, r1
   16578:	cmp	r3, #0
   1657c:	bne	17638 <__assert_fail@plt+0x6434>
   16580:	eor	r3, r1, #1
   16584:	ands	r2, r2, r3
   16588:	beq	17564 <__assert_fail@plt+0x6360>
   1658c:	ldr	r3, [sp, #68]	; 0x44
   16590:	cmp	r3, #0
   16594:	beq	17568 <__assert_fail@plt+0x6364>
   16598:	ldr	r3, [sp, #36]	; 0x24
   1659c:	cmp	r3, #0
   165a0:	bne	175f4 <__assert_fail@plt+0x63f0>
   165a4:	ldr	r3, [sp, #72]	; 0x48
   165a8:	adds	r3, r3, #0
   165ac:	movne	r3, #1
   165b0:	cmp	sl, #0
   165b4:	movne	r3, #0
   165b8:	cmp	r3, #0
   165bc:	ldreq	r2, [sp, #68]	; 0x44
   165c0:	beq	17568 <__assert_fail@plt+0x6364>
   165c4:	ldr	r2, [sp, #72]	; 0x48
   165c8:	str	r3, [sp, #68]	; 0x44
   165cc:	movw	r3, #45728	; 0xb2a0
   165d0:	movt	r3, #1
   165d4:	mov	r1, #39	; 0x27
   165d8:	mov	r4, #1
   165dc:	ldr	sl, [sp, #72]	; 0x48
   165e0:	mov	r8, #2
   165e4:	str	r3, [sp, #60]	; 0x3c
   165e8:	mov	r3, #0
   165ec:	strb	r1, [fp]
   165f0:	str	r3, [sp, #44]	; 0x2c
   165f4:	str	r4, [sp, #56]	; 0x38
   165f8:	str	r2, [sp, #72]	; 0x48
   165fc:	b	15fc0 <__assert_fail@plt+0x4dbc>
   16600:	mov	r7, #0
   16604:	cmp	fp, #2
   16608:	beq	16ee8 <__assert_fail@plt+0x5ce4>
   1660c:	ldr	r2, [sp, #40]	; 0x28
   16610:	ldr	r3, [sp, #56]	; 0x38
   16614:	ldr	r1, [sp, #44]	; 0x2c
   16618:	cmp	r3, #0
   1661c:	moveq	r3, #0
   16620:	andne	r3, r2, r1
   16624:	cmp	r3, #0
   16628:	moveq	r5, #92	; 0x5c
   1662c:	moveq	r3, r5
   16630:	bne	16ef4 <__assert_fail@plt+0x5cf0>
   16634:	ldr	r2, [sp, #40]	; 0x28
   16638:	cmp	r2, #0
   1663c:	bne	17330 <__assert_fail@plt+0x612c>
   16640:	mov	r6, #0
   16644:	ldr	r3, [sp, #44]	; 0x2c
   16648:	cmp	r3, #0
   1664c:	beq	16ee0 <__assert_fail@plt+0x5cdc>
   16650:	mov	r3, #0
   16654:	b	16470 <__assert_fail@plt+0x526c>
   16658:	mov	r7, #0
   1665c:	cmp	fp, #2
   16660:	beq	16f58 <__assert_fail@plt+0x5d54>
   16664:	cmp	fp, #5
   16668:	beq	16f1c <__assert_fail@plt+0x5d18>
   1666c:	sub	r3, fp, #2
   16670:	mov	r6, #0
   16674:	clz	r3, r3
   16678:	mov	r5, #63	; 0x3f
   1667c:	lsr	r3, r3, #5
   16680:	b	16460 <__assert_fail@plt+0x525c>
   16684:	mov	r7, #0
   16688:	cmp	fp, #2
   1668c:	movne	r3, #0
   16690:	movne	r5, #39	; 0x27
   16694:	strne	r6, [sp, #68]	; 0x44
   16698:	bne	16460 <__assert_fail@plt+0x525c>
   1669c:	ldr	r3, [sp, #44]	; 0x2c
   166a0:	cmp	r3, #0
   166a4:	bne	17360 <__assert_fail@plt+0x615c>
   166a8:	ldr	r3, [sp, #72]	; 0x48
   166ac:	cmp	sl, #0
   166b0:	clz	r3, r3
   166b4:	lsr	r3, r3, #5
   166b8:	moveq	r3, #0
   166bc:	cmp	r3, #0
   166c0:	bne	1728c <__assert_fail@plt+0x6088>
   166c4:	cmp	sl, r4
   166c8:	movhi	r3, #39	; 0x27
   166cc:	strbhi	r3, [r8, r4]
   166d0:	add	r3, r4, #1
   166d4:	cmp	sl, r3
   166d8:	movhi	r2, #92	; 0x5c
   166dc:	strbhi	r2, [r8, r3]
   166e0:	add	r3, r4, #2
   166e4:	cmp	sl, r3
   166e8:	bls	166f4 <__assert_fail@plt+0x54f0>
   166ec:	mov	r2, #39	; 0x27
   166f0:	strb	r2, [r8, r3]
   166f4:	mov	r3, #0
   166f8:	cmp	r7, #0
   166fc:	add	r4, r4, #3
   16700:	mov	r5, #39	; 0x27
   16704:	str	r3, [sp, #48]	; 0x30
   16708:	str	r6, [sp, #68]	; 0x44
   1670c:	bne	164a0 <__assert_fail@plt+0x529c>
   16710:	ldr	r2, [sp, #48]	; 0x30
   16714:	eor	r3, r3, #1
   16718:	add	r9, r9, #1
   1671c:	and	r3, r3, r2
   16720:	uxtb	r3, r3
   16724:	cmp	r3, #0
   16728:	beq	16510 <__assert_fail@plt+0x530c>
   1672c:	cmp	sl, r4
   16730:	movhi	r3, #39	; 0x27
   16734:	strbhi	r3, [r8, r4]
   16738:	add	r3, r4, #1
   1673c:	add	r4, r4, #2
   16740:	cmp	sl, r3
   16744:	movhi	r2, #39	; 0x27
   16748:	strbhi	r2, [r8, r3]
   1674c:	mov	r3, #0
   16750:	str	r3, [sp, #48]	; 0x30
   16754:	b	16510 <__assert_fail@plt+0x530c>
   16758:	mov	r3, #118	; 0x76
   1675c:	b	16634 <__assert_fail@plt+0x5430>
   16760:	mov	r3, #116	; 0x74
   16764:	ldr	r2, [sp, #44]	; 0x2c
   16768:	cmp	fp, #2
   1676c:	movne	r2, #0
   16770:	andeq	r2, r2, #1
   16774:	cmp	r2, #0
   16778:	beq	16634 <__assert_fail@plt+0x5430>
   1677c:	mov	fp, r8
   16780:	mov	r8, #2
   16784:	ldr	r3, [sp, #40]	; 0x28
   16788:	cmp	r3, #0
   1678c:	movne	r8, #4
   16790:	mov	lr, #0
   16794:	mov	r0, fp
   16798:	ldr	r2, [sp, #32]
   1679c:	ldr	r3, [sp, #156]	; 0x9c
   167a0:	ldr	r1, [sp, #164]	; 0xa4
   167a4:	bic	ip, r3, #2
   167a8:	ldr	r3, [sp, #28]
   167ac:	stm	sp, {r8, ip, lr}
   167b0:	ldr	ip, [sp, #168]	; 0xa8
   167b4:	str	r1, [sp, #12]
   167b8:	mov	r1, sl
   167bc:	str	ip, [sp, #16]
   167c0:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   167c4:	mov	r4, r0
   167c8:	mov	r0, r4
   167cc:	add	sp, sp, #116	; 0x74
   167d0:	ldrd	r4, [sp]
   167d4:	ldrd	r6, [sp, #8]
   167d8:	ldrd	r8, [sp, #16]
   167dc:	ldrd	sl, [sp, #24]
   167e0:	add	sp, sp, #32
   167e4:	pop	{pc}		; (ldr pc, [sp], #4)
   167e8:	mov	r5, #102	; 0x66
   167ec:	ldr	r2, [sp, #44]	; 0x2c
   167f0:	sub	r3, fp, #2
   167f4:	clz	r3, r3
   167f8:	lsr	r3, r3, #5
   167fc:	cmp	r2, #0
   16800:	bne	1725c <__assert_fail@plt+0x6058>
   16804:	mov	r6, r2
   16808:	b	164fc <__assert_fail@plt+0x52f8>
   1680c:	mov	r5, #110	; 0x6e
   16810:	mov	r6, #0
   16814:	b	164a0 <__assert_fail@plt+0x529c>
   16818:	mov	r5, #98	; 0x62
   1681c:	b	167ec <__assert_fail@plt+0x55e8>
   16820:	mov	r5, #97	; 0x61
   16824:	b	167ec <__assert_fail@plt+0x55e8>
   16828:	mov	r7, #0
   1682c:	mov	r6, #0
   16830:	b	16650 <__assert_fail@plt+0x544c>
   16834:	mov	r5, #114	; 0x72
   16838:	b	16810 <__assert_fail@plt+0x560c>
   1683c:	ldr	r3, [sp, #44]	; 0x2c
   16840:	cmp	r3, #0
   16844:	bne	175d4 <__assert_fail@plt+0x63d0>
   16848:	mov	r7, r3
   1684c:	ldr	r3, [sp, #48]	; 0x30
   16850:	sub	r2, fp, #2
   16854:	clz	r2, r2
   16858:	lsr	r2, r2, #5
   1685c:	eor	r3, r3, #1
   16860:	ands	r3, r2, r3
   16864:	beq	17278 <__assert_fail@plt+0x6074>
   16868:	cmp	sl, r4
   1686c:	movhi	r1, #39	; 0x27
   16870:	strbhi	r1, [r8, r4]
   16874:	add	r1, r4, #1
   16878:	cmp	sl, r1
   1687c:	movhi	r0, #36	; 0x24
   16880:	strbhi	r0, [r8, r1]
   16884:	add	r1, r4, #2
   16888:	cmp	sl, r1
   1688c:	movhi	r0, #39	; 0x27
   16890:	strbhi	r0, [r8, r1]
   16894:	add	r1, r4, #3
   16898:	cmp	sl, r1
   1689c:	bls	172d0 <__assert_fail@plt+0x60cc>
   168a0:	mov	r4, r1
   168a4:	mov	r1, #92	; 0x5c
   168a8:	mov	r0, r4
   168ac:	str	r3, [sp, #48]	; 0x30
   168b0:	strb	r1, [r8, r4]
   168b4:	cmp	fp, #2
   168b8:	add	r4, r4, #1
   168bc:	beq	17320 <__assert_fail@plt+0x611c>
   168c0:	ldr	r1, [sp, #28]
   168c4:	add	r3, r9, #1
   168c8:	cmp	r3, r1
   168cc:	bcs	168e4 <__assert_fail@plt+0x56e0>
   168d0:	ldr	r1, [sp, #32]
   168d4:	ldrb	r3, [r1, r3]
   168d8:	sub	r3, r3, #48	; 0x30
   168dc:	cmp	r3, #9
   168e0:	bls	17338 <__assert_fail@plt+0x6134>
   168e4:	mov	r5, #48	; 0x30
   168e8:	ldr	r3, [sp, #40]	; 0x28
   168ec:	eor	r3, r3, #1
   168f0:	orrs	r2, r2, r3
   168f4:	mov	r3, r6
   168f8:	moveq	r6, r2
   168fc:	beq	16470 <__assert_fail@plt+0x526c>
   16900:	mov	r6, #0
   16904:	b	16498 <__assert_fail@plt+0x5294>
   16908:	cmp	r9, #0
   1690c:	mov	r2, r7
   16910:	bne	16eb0 <__assert_fail@plt+0x5cac>
   16914:	mov	r6, r7
   16918:	mov	r3, r9
   1691c:	mov	r7, r2
   16920:	b	16460 <__assert_fail@plt+0x525c>
   16924:	mov	r2, r7
   16928:	mov	r6, r7
   1692c:	mov	r3, #0
   16930:	mov	r7, r2
   16934:	mov	r5, #32
   16938:	b	16460 <__assert_fail@plt+0x525c>
   1693c:	mov	r6, r7
   16940:	b	16650 <__assert_fail@plt+0x544c>
   16944:	mov	r7, #0
   16948:	ldr	r3, [sp, #64]	; 0x40
   1694c:	cmp	r3, #1
   16950:	bne	16f70 <__assert_fail@plt+0x5d6c>
   16954:	bl	110a8 <__ctype_b_loc@plt>
   16958:	ldr	r2, [r0]
   1695c:	sxth	r3, r5
   16960:	lsl	r3, r3, #1
   16964:	ldr	r1, [sp, #64]	; 0x40
   16968:	ldrh	r3, [r2, r3]
   1696c:	mov	ip, r1
   16970:	and	r3, r3, #16384	; 0x4000
   16974:	cmp	r3, #0
   16978:	ldr	r3, [sp, #40]	; 0x28
   1697c:	movne	r6, #1
   16980:	moveq	r6, #0
   16984:	movne	r2, #0
   16988:	andeq	r2, r3, #1
   1698c:	cmp	r2, #0
   16990:	bne	172b8 <__assert_fail@plt+0x60b4>
   16994:	sub	r3, fp, #2
   16998:	clz	r3, r3
   1699c:	lsr	r3, r3, #5
   169a0:	b	16460 <__assert_fail@plt+0x525c>
   169a4:	cmp	r4, #0
   169a8:	bne	17648 <__assert_fail@plt+0x6444>
   169ac:	str	r4, [sp, #40]	; 0x28
   169b0:	cmp	sl, #0
   169b4:	bne	17678 <__assert_fail@plt+0x6474>
   169b8:	mov	r3, #1
   169bc:	movw	r2, #45728	; 0xb2a0
   169c0:	movt	r2, #1
   169c4:	mov	r4, r3
   169c8:	mov	r8, #2
   169cc:	str	r3, [sp, #36]	; 0x24
   169d0:	str	sl, [sp, #44]	; 0x2c
   169d4:	str	sl, [sp, #48]	; 0x30
   169d8:	str	r3, [sp, #56]	; 0x38
   169dc:	str	r2, [sp, #60]	; 0x3c
   169e0:	str	sl, [sp, #68]	; 0x44
   169e4:	str	sl, [sp, #72]	; 0x48
   169e8:	b	15fc0 <__assert_fail@plt+0x4dbc>
   169ec:	ldr	r3, [sp, #32]
   169f0:	ldrb	r5, [r3, r9]
   169f4:	cmp	r5, #126	; 0x7e
   169f8:	ldrls	pc, [pc, r5, lsl #2]
   169fc:	b	16948 <__assert_fail@plt+0x5744>
   16a00:	andeq	r6, r1, r4, lsr #24
   16a04:	andeq	r6, r1, r8, asr #18
   16a08:	andeq	r6, r1, r8, asr #18
   16a0c:	andeq	r6, r1, r8, asr #18
   16a10:	andeq	r6, r1, r8, asr #18
   16a14:	andeq	r6, r1, r8, asr #18
   16a18:	andeq	r6, r1, r8, asr #18
   16a1c:	andeq	r6, r1, ip, lsl ip
   16a20:	andeq	r6, r1, r4, lsl ip
   16a24:	andeq	r6, r1, r0, ror #14
   16a28:	andeq	r6, r1, ip, lsl #24
   16a2c:	andeq	r6, r1, r8, asr r7
   16a30:	andeq	r6, r1, r4, lsl #24
   16a34:	strdeq	r6, [r1], -ip
   16a38:	andeq	r6, r1, r8, asr #18
   16a3c:	andeq	r6, r1, r8, asr #18
   16a40:	andeq	r6, r1, r8, asr #18
   16a44:	andeq	r6, r1, r8, asr #18
   16a48:	andeq	r6, r1, r8, asr #18
   16a4c:	andeq	r6, r1, r8, asr #18
   16a50:	andeq	r6, r1, r8, asr #18
   16a54:	andeq	r6, r1, r8, asr #18
   16a58:	andeq	r6, r1, r8, asr #18
   16a5c:	andeq	r6, r1, r8, asr #18
   16a60:	andeq	r6, r1, r8, asr #18
   16a64:	andeq	r6, r1, r8, asr #18
   16a68:	andeq	r6, r1, r8, asr #18
   16a6c:	andeq	r6, r1, r8, asr #18
   16a70:	andeq	r6, r1, r8, asr #18
   16a74:	andeq	r6, r1, r8, asr #18
   16a78:	andeq	r6, r1, r8, asr #18
   16a7c:	andeq	r6, r1, r8, asr #18
   16a80:	andeq	r6, r1, r8, ror ip
   16a84:	andeq	r6, r1, r8, asr ip
   16a88:	andeq	r6, r1, r8, asr ip
   16a8c:	andeq	r6, r1, r8, asr #24
   16a90:	andeq	r6, r1, r8, asr ip
   16a94:	muleq	r1, r4, r9
   16a98:	andeq	r6, r1, r8, asr ip
   16a9c:	andeq	r6, r1, r8, lsl #13
   16aa0:	andeq	r6, r1, r8, asr ip
   16aa4:	andeq	r6, r1, r8, asr ip
   16aa8:	andeq	r6, r1, r8, asr ip
   16aac:	muleq	r1, r4, r9
   16ab0:	muleq	r1, r4, r9
   16ab4:	muleq	r1, r4, r9
   16ab8:	muleq	r1, r4, r9
   16abc:	muleq	r1, r4, r9
   16ac0:	muleq	r1, r4, r9
   16ac4:	muleq	r1, r4, r9
   16ac8:	muleq	r1, r4, r9
   16acc:	muleq	r1, r4, r9
   16ad0:	muleq	r1, r4, r9
   16ad4:	muleq	r1, r4, r9
   16ad8:	muleq	r1, r4, r9
   16adc:	muleq	r1, r4, r9
   16ae0:	muleq	r1, r4, r9
   16ae4:	muleq	r1, r4, r9
   16ae8:	muleq	r1, r4, r9
   16aec:	andeq	r6, r1, r8, asr ip
   16af0:	andeq	r6, r1, r8, asr ip
   16af4:	andeq	r6, r1, r8, asr ip
   16af8:	andeq	r6, r1, r8, asr ip
   16afc:	andeq	r6, r1, ip, asr r6
   16b00:	andeq	r6, r1, r8, asr #18
   16b04:	muleq	r1, r4, r9
   16b08:	muleq	r1, r4, r9
   16b0c:	muleq	r1, r4, r9
   16b10:	muleq	r1, r4, r9
   16b14:	muleq	r1, r4, r9
   16b18:	muleq	r1, r4, r9
   16b1c:	muleq	r1, r4, r9
   16b20:	muleq	r1, r4, r9
   16b24:	muleq	r1, r4, r9
   16b28:	muleq	r1, r4, r9
   16b2c:	muleq	r1, r4, r9
   16b30:	muleq	r1, r4, r9
   16b34:	muleq	r1, r4, r9
   16b38:	muleq	r1, r4, r9
   16b3c:	muleq	r1, r4, r9
   16b40:	muleq	r1, r4, r9
   16b44:	muleq	r1, r4, r9
   16b48:	muleq	r1, r4, r9
   16b4c:	muleq	r1, r4, r9
   16b50:	muleq	r1, r4, r9
   16b54:	muleq	r1, r4, r9
   16b58:	muleq	r1, r4, r9
   16b5c:	muleq	r1, r4, r9
   16b60:	muleq	r1, r4, r9
   16b64:	muleq	r1, r4, r9
   16b68:	muleq	r1, r4, r9
   16b6c:	andeq	r6, r1, r8, asr ip
   16b70:	andeq	r6, r1, r4, lsl #12
   16b74:	muleq	r1, r4, r9
   16b78:	andeq	r6, r1, r8, asr ip
   16b7c:	muleq	r1, r4, r9
   16b80:	andeq	r6, r1, r8, asr ip
   16b84:	muleq	r1, r4, r9
   16b88:	muleq	r1, r4, r9
   16b8c:	muleq	r1, r4, r9
   16b90:	muleq	r1, r4, r9
   16b94:	muleq	r1, r4, r9
   16b98:	muleq	r1, r4, r9
   16b9c:	muleq	r1, r4, r9
   16ba0:	muleq	r1, r4, r9
   16ba4:	muleq	r1, r4, r9
   16ba8:	muleq	r1, r4, r9
   16bac:	muleq	r1, r4, r9
   16bb0:	muleq	r1, r4, r9
   16bb4:	muleq	r1, r4, r9
   16bb8:	muleq	r1, r4, r9
   16bbc:	muleq	r1, r4, r9
   16bc0:	muleq	r1, r4, r9
   16bc4:	muleq	r1, r4, r9
   16bc8:	muleq	r1, r4, r9
   16bcc:	muleq	r1, r4, r9
   16bd0:	muleq	r1, r4, r9
   16bd4:	muleq	r1, r4, r9
   16bd8:	muleq	r1, r4, r9
   16bdc:	muleq	r1, r4, r9
   16be0:	muleq	r1, r4, r9
   16be4:	muleq	r1, r4, r9
   16be8:	muleq	r1, r4, r9
   16bec:	andeq	r6, r1, r8, lsr #8
   16bf0:	andeq	r6, r1, r8, asr ip
   16bf4:	andeq	r6, r1, r8, lsr #8
   16bf8:	andeq	r6, r1, r8, asr #24
   16bfc:	mov	r3, #114	; 0x72
   16c00:	b	16764 <__assert_fail@plt+0x5560>
   16c04:	mov	r3, #102	; 0x66
   16c08:	b	16634 <__assert_fail@plt+0x5430>
   16c0c:	mov	r3, #110	; 0x6e
   16c10:	b	16764 <__assert_fail@plt+0x5560>
   16c14:	mov	r3, #98	; 0x62
   16c18:	b	16634 <__assert_fail@plt+0x5430>
   16c1c:	mov	r3, #97	; 0x61
   16c20:	b	16634 <__assert_fail@plt+0x5430>
   16c24:	ldr	r3, [sp, #40]	; 0x28
   16c28:	cmp	r3, #0
   16c2c:	bne	1683c <__assert_fail@plt+0x5638>
   16c30:	ldr	r3, [sp, #156]	; 0x9c
   16c34:	tst	r3, #1
   16c38:	addne	r9, r9, #1
   16c3c:	bne	15fd0 <__assert_fail@plt+0x4dcc>
   16c40:	ldr	r7, [sp, #40]	; 0x28
   16c44:	b	16640 <__assert_fail@plt+0x543c>
   16c48:	sub	r3, fp, #2
   16c4c:	clz	r3, r3
   16c50:	lsr	r3, r3, #5
   16c54:	b	16454 <__assert_fail@plt+0x5250>
   16c58:	sub	r3, fp, #2
   16c5c:	mov	r6, #0
   16c60:	clz	r3, r3
   16c64:	lsr	r3, r3, #5
   16c68:	ldr	r2, [sp, #44]	; 0x2c
   16c6c:	tst	r2, r3
   16c70:	beq	16460 <__assert_fail@plt+0x525c>
   16c74:	b	1677c <__assert_fail@plt+0x5578>
   16c78:	sub	r3, fp, #2
   16c7c:	clz	r3, r3
   16c80:	lsr	r3, r3, #5
   16c84:	b	16c68 <__assert_fail@plt+0x5a64>
   16c88:	ldr	r3, [sp, #52]	; 0x34
   16c8c:	ldrb	r5, [r3]
   16c90:	cmp	r5, #126	; 0x7e
   16c94:	ldrls	pc, [pc, r5, lsl #2]
   16c98:	b	16944 <__assert_fail@plt+0x5740>
   16c9c:	andeq	r6, r1, ip, lsr r8
   16ca0:	andeq	r6, r1, r4, asr #18
   16ca4:	andeq	r6, r1, r4, asr #18
   16ca8:	andeq	r6, r1, r4, asr #18
   16cac:	andeq	r6, r1, r4, asr #18
   16cb0:	andeq	r6, r1, r4, asr #18
   16cb4:	andeq	r6, r1, r4, asr #18
   16cb8:	andeq	r6, r1, r0, lsr #16
   16cbc:	andeq	r6, r1, r8, lsl r8
   16cc0:	ldrdeq	r6, [r1], -r4
   16cc4:	andeq	r6, r1, ip, lsl #16
   16cc8:	andeq	r6, r1, r8, asr #29
   16ccc:	andeq	r6, r1, r8, ror #15
   16cd0:	andeq	r6, r1, r4, lsr r8
   16cd4:	andeq	r6, r1, r4, asr #18
   16cd8:	andeq	r6, r1, r4, asr #18
   16cdc:	andeq	r6, r1, r4, asr #18
   16ce0:	andeq	r6, r1, r4, asr #18
   16ce4:	andeq	r6, r1, r4, asr #18
   16ce8:	andeq	r6, r1, r4, asr #18
   16cec:	andeq	r6, r1, r4, asr #18
   16cf0:	andeq	r6, r1, r4, asr #18
   16cf4:	andeq	r6, r1, r4, asr #18
   16cf8:	andeq	r6, r1, r4, asr #18
   16cfc:	andeq	r6, r1, r4, asr #18
   16d00:	andeq	r6, r1, r4, asr #18
   16d04:	andeq	r6, r1, r4, asr #18
   16d08:	andeq	r6, r1, r4, asr #18
   16d0c:	andeq	r6, r1, r4, asr #18
   16d10:	andeq	r6, r1, r4, asr #18
   16d14:	andeq	r6, r1, r4, asr #18
   16d18:	andeq	r6, r1, r4, asr #18
   16d1c:	andeq	r6, r1, r0, asr #29
   16d20:	andeq	r6, r1, r8, lsr #16
   16d24:	andeq	r6, r1, r8, lsr #16
   16d28:	andeq	r6, r1, r4, lsr #29
   16d2c:	andeq	r6, r1, r8, lsr #16
   16d30:	muleq	r1, r8, lr
   16d34:	andeq	r6, r1, r8, lsr #16
   16d38:	andeq	r6, r1, r4, lsl #13
   16d3c:	andeq	r6, r1, r8, lsr #16
   16d40:	andeq	r6, r1, r8, lsr #16
   16d44:	andeq	r6, r1, r8, lsr #16
   16d48:	muleq	r1, r8, lr
   16d4c:	muleq	r1, r8, lr
   16d50:	muleq	r1, r8, lr
   16d54:	muleq	r1, r8, lr
   16d58:	muleq	r1, r8, lr
   16d5c:	muleq	r1, r8, lr
   16d60:	muleq	r1, r8, lr
   16d64:	muleq	r1, r8, lr
   16d68:	muleq	r1, r8, lr
   16d6c:	muleq	r1, r8, lr
   16d70:	muleq	r1, r8, lr
   16d74:	muleq	r1, r8, lr
   16d78:	muleq	r1, r8, lr
   16d7c:	muleq	r1, r8, lr
   16d80:	muleq	r1, r8, lr
   16d84:	muleq	r1, r8, lr
   16d88:	andeq	r6, r1, r8, lsr #16
   16d8c:	andeq	r6, r1, r8, lsr #16
   16d90:	andeq	r6, r1, r8, lsr #16
   16d94:	andeq	r6, r1, r8, lsr #16
   16d98:	andeq	r6, r1, r8, asr r6
   16d9c:	andeq	r6, r1, r4, asr #18
   16da0:	muleq	r1, r8, lr
   16da4:	muleq	r1, r8, lr
   16da8:	muleq	r1, r8, lr
   16dac:	muleq	r1, r8, lr
   16db0:	muleq	r1, r8, lr
   16db4:	muleq	r1, r8, lr
   16db8:	muleq	r1, r8, lr
   16dbc:	muleq	r1, r8, lr
   16dc0:	muleq	r1, r8, lr
   16dc4:	muleq	r1, r8, lr
   16dc8:	muleq	r1, r8, lr
   16dcc:	muleq	r1, r8, lr
   16dd0:	muleq	r1, r8, lr
   16dd4:	muleq	r1, r8, lr
   16dd8:	muleq	r1, r8, lr
   16ddc:	muleq	r1, r8, lr
   16de0:	muleq	r1, r8, lr
   16de4:	muleq	r1, r8, lr
   16de8:	muleq	r1, r8, lr
   16dec:	muleq	r1, r8, lr
   16df0:	muleq	r1, r8, lr
   16df4:	muleq	r1, r8, lr
   16df8:	muleq	r1, r8, lr
   16dfc:	muleq	r1, r8, lr
   16e00:	muleq	r1, r8, lr
   16e04:	muleq	r1, r8, lr
   16e08:	andeq	r6, r1, r8, lsr #16
   16e0c:	andeq	r6, r1, r0, lsl #12
   16e10:	muleq	r1, r8, lr
   16e14:	andeq	r6, r1, r8, lsr #16
   16e18:	muleq	r1, r8, lr
   16e1c:	andeq	r6, r1, r8, lsr #16
   16e20:	muleq	r1, r8, lr
   16e24:	muleq	r1, r8, lr
   16e28:	muleq	r1, r8, lr
   16e2c:	muleq	r1, r8, lr
   16e30:	muleq	r1, r8, lr
   16e34:	muleq	r1, r8, lr
   16e38:	muleq	r1, r8, lr
   16e3c:	muleq	r1, r8, lr
   16e40:	muleq	r1, r8, lr
   16e44:	muleq	r1, r8, lr
   16e48:	muleq	r1, r8, lr
   16e4c:	muleq	r1, r8, lr
   16e50:	muleq	r1, r8, lr
   16e54:	muleq	r1, r8, lr
   16e58:	muleq	r1, r8, lr
   16e5c:	muleq	r1, r8, lr
   16e60:	muleq	r1, r8, lr
   16e64:	muleq	r1, r8, lr
   16e68:	muleq	r1, r8, lr
   16e6c:	muleq	r1, r8, lr
   16e70:	muleq	r1, r8, lr
   16e74:	muleq	r1, r8, lr
   16e78:	muleq	r1, r8, lr
   16e7c:	muleq	r1, r8, lr
   16e80:	muleq	r1, r8, lr
   16e84:	muleq	r1, r8, lr
   16e88:	andeq	r6, r1, r4, lsr #8
   16e8c:	andeq	r6, r1, r8, lsr #16
   16e90:	andeq	r6, r1, r4, lsr #8
   16e94:	andeq	r6, r1, r4, lsr #29
   16e98:	mov	r6, r7
   16e9c:	mov	r7, #0
   16ea0:	b	16650 <__assert_fail@plt+0x544c>
   16ea4:	cmp	r9, #0
   16ea8:	mov	r2, #0
   16eac:	beq	16914 <__assert_fail@plt+0x5710>
   16eb0:	mov	r6, #0
   16eb4:	mov	r7, r2
   16eb8:	mov	r3, r6
   16ebc:	b	16470 <__assert_fail@plt+0x526c>
   16ec0:	mov	r2, #0
   16ec4:	b	16928 <__assert_fail@plt+0x5724>
   16ec8:	mov	r7, #0
   16ecc:	mov	r3, #118	; 0x76
   16ed0:	b	16634 <__assert_fail@plt+0x5430>
   16ed4:	mov	r7, #0
   16ed8:	mov	r3, #116	; 0x74
   16edc:	b	16764 <__assert_fail@plt+0x5560>
   16ee0:	ldr	r3, [sp, #44]	; 0x2c
   16ee4:	b	16498 <__assert_fail@plt+0x5294>
   16ee8:	ldr	r3, [sp, #44]	; 0x2c
   16eec:	cmp	r3, #0
   16ef0:	bne	17360 <__assert_fail@plt+0x615c>
   16ef4:	add	r9, r9, #1
   16ef8:	mov	r6, #0
   16efc:	ldr	r3, [sp, #48]	; 0x30
   16f00:	mov	r5, #92	; 0x5c
   16f04:	b	16724 <__assert_fail@plt+0x5520>
   16f08:	ldr	r3, [sp, #32]
   16f0c:	ldrb	r2, [r3, #1]
   16f10:	adds	r2, r2, #0
   16f14:	movne	r2, #1
   16f18:	b	16440 <__assert_fail@plt+0x523c>
   16f1c:	ldr	r3, [sp, #156]	; 0x9c
   16f20:	ands	r3, r3, #4
   16f24:	beq	16f4c <__assert_fail@plt+0x5d48>
   16f28:	ldr	r2, [sp, #28]
   16f2c:	add	r3, r9, #2
   16f30:	cmp	r3, r2
   16f34:	bcs	16f48 <__assert_fail@plt+0x5d44>
   16f38:	ldr	r2, [sp, #52]	; 0x34
   16f3c:	ldrb	r5, [r2, #1]
   16f40:	cmp	r5, #63	; 0x3f
   16f44:	beq	173c4 <__assert_fail@plt+0x61c0>
   16f48:	mov	r3, #0
   16f4c:	mov	r5, #63	; 0x3f
   16f50:	mov	r6, r3
   16f54:	b	16460 <__assert_fail@plt+0x525c>
   16f58:	ldr	r3, [sp, #44]	; 0x2c
   16f5c:	cmp	r3, #0
   16f60:	bne	17360 <__assert_fail@plt+0x615c>
   16f64:	mov	r6, r3
   16f68:	mov	r5, #63	; 0x3f
   16f6c:	b	16498 <__assert_fail@plt+0x5294>
   16f70:	ldr	r1, [sp, #28]
   16f74:	mov	r2, #0
   16f78:	mov	r3, #0
   16f7c:	strd	r2, [sp, #104]	; 0x68
   16f80:	cmn	r1, #1
   16f84:	bne	16f94 <__assert_fail@plt+0x5d90>
   16f88:	ldr	r0, [sp, #32]
   16f8c:	bl	110c0 <strlen@plt>
   16f90:	str	r0, [sp, #28]
   16f94:	str	r8, [sp, #76]	; 0x4c
   16f98:	mov	r3, #0
   16f9c:	str	sl, [sp, #80]	; 0x50
   16fa0:	ldr	sl, [sp, #32]
   16fa4:	str	r5, [sp, #84]	; 0x54
   16fa8:	mov	r5, r3
   16fac:	ldr	r8, [sp, #44]	; 0x2c
   16fb0:	str	r7, [sp, #88]	; 0x58
   16fb4:	str	r4, [sp, #92]	; 0x5c
   16fb8:	ldr	r2, [sp, #28]
   16fbc:	add	r4, r9, r5
   16fc0:	add	r3, sp, #104	; 0x68
   16fc4:	add	r7, sl, r4
   16fc8:	add	r0, sp, #100	; 0x64
   16fcc:	mov	r1, r7
   16fd0:	sub	r2, r2, r4
   16fd4:	bl	1975c <__assert_fail@plt+0x8558>
   16fd8:	subs	r1, r0, #0
   16fdc:	beq	17028 <__assert_fail@plt+0x5e24>
   16fe0:	cmn	r1, #1
   16fe4:	beq	173a0 <__assert_fail@plt+0x619c>
   16fe8:	cmn	r1, #2
   16fec:	beq	174c0 <__assert_fail@plt+0x62bc>
   16ff0:	cmp	fp, #2
   16ff4:	movne	r3, #0
   16ff8:	andeq	r3, r8, #1
   16ffc:	cmp	r3, #0
   17000:	bne	1718c <__assert_fail@plt+0x5f88>
   17004:	ldr	r0, [sp, #100]	; 0x64
   17008:	add	r5, r5, r1
   1700c:	bl	10fe8 <iswprint@plt>
   17010:	cmp	r0, #0
   17014:	add	r0, sp, #104	; 0x68
   17018:	moveq	r6, #0
   1701c:	bl	10f88 <mbsinit@plt>
   17020:	cmp	r0, #0
   17024:	beq	16fb8 <__assert_fail@plt+0x5db4>
   17028:	ldr	r3, [sp, #40]	; 0x28
   1702c:	mov	ip, r5
   17030:	eor	r2, r6, #1
   17034:	ldr	r8, [sp, #76]	; 0x4c
   17038:	ldr	sl, [sp, #80]	; 0x50
   1703c:	and	r2, r2, r3
   17040:	ldr	r5, [sp, #84]	; 0x54
   17044:	ldr	r7, [sp, #88]	; 0x58
   17048:	ldr	r4, [sp, #92]	; 0x5c
   1704c:	cmp	ip, #1
   17050:	bls	1698c <__assert_fail@plt+0x5788>
   17054:	add	r1, ip, r9
   17058:	mov	r0, #39	; 0x27
   1705c:	ldr	lr, [sp, #52]	; 0x34
   17060:	mov	ip, #0
   17064:	str	r6, [sp, #52]	; 0x34
   17068:	ldr	r6, [sp, #48]	; 0x30
   1706c:	b	17128 <__assert_fail@plt+0x5f24>
   17070:	ldr	ip, [sp, #44]	; 0x2c
   17074:	sub	r3, fp, #2
   17078:	clz	r3, r3
   1707c:	lsr	r3, r3, #5
   17080:	cmp	ip, #0
   17084:	bne	17298 <__assert_fail@plt+0x6094>
   17088:	eor	ip, r6, #1
   1708c:	ands	r3, r3, ip
   17090:	beq	170c0 <__assert_fail@plt+0x5ebc>
   17094:	cmp	sl, r4
   17098:	add	ip, r4, #1
   1709c:	strbhi	r0, [r8, r4]
   170a0:	cmp	sl, ip
   170a4:	movhi	r6, #36	; 0x24
   170a8:	strbhi	r6, [r8, ip]
   170ac:	add	ip, r4, #2
   170b0:	mov	r6, r3
   170b4:	cmp	sl, ip
   170b8:	add	r4, r4, #3
   170bc:	strbhi	r0, [r8, ip]
   170c0:	cmp	sl, r4
   170c4:	movhi	r3, #92	; 0x5c
   170c8:	strbhi	r3, [r8, r4]
   170cc:	add	r3, r4, #1
   170d0:	cmp	sl, r3
   170d4:	bls	170e4 <__assert_fail@plt+0x5ee0>
   170d8:	lsr	ip, r5, #6
   170dc:	add	ip, ip, #48	; 0x30
   170e0:	strb	ip, [r8, r3]
   170e4:	add	r3, r4, #2
   170e8:	cmp	sl, r3
   170ec:	bls	170fc <__assert_fail@plt+0x5ef8>
   170f0:	ubfx	ip, r5, #3, #3
   170f4:	add	ip, ip, #48	; 0x30
   170f8:	strb	ip, [r8, r3]
   170fc:	add	r9, r9, #1
   17100:	and	r5, r5, #7
   17104:	cmp	r9, r1
   17108:	add	r5, r5, #48	; 0x30
   1710c:	add	r4, r4, #3
   17110:	bcs	172c4 <__assert_fail@plt+0x60c0>
   17114:	mov	ip, r2
   17118:	cmp	sl, r4
   1711c:	strbhi	r5, [r8, r4]
   17120:	add	r4, r4, #1
   17124:	ldrb	r5, [lr, #1]!
   17128:	cmp	r2, #0
   1712c:	bne	17070 <__assert_fail@plt+0x5e6c>
   17130:	eor	r3, ip, #1
   17134:	cmp	r7, #0
   17138:	and	r3, r3, r6
   1713c:	uxtb	r3, r3
   17140:	beq	17154 <__assert_fail@plt+0x5f50>
   17144:	cmp	sl, r4
   17148:	movhi	r7, #92	; 0x5c
   1714c:	strbhi	r7, [r8, r4]
   17150:	add	r4, r4, #1
   17154:	add	r9, r9, #1
   17158:	cmp	r9, r1
   1715c:	bcs	172ac <__assert_fail@plt+0x60a8>
   17160:	cmp	r3, #0
   17164:	beq	172e4 <__assert_fail@plt+0x60e0>
   17168:	cmp	sl, r4
   1716c:	add	r3, r4, #1
   17170:	mov	r7, #0
   17174:	strbhi	r0, [r8, r4]
   17178:	cmp	sl, r3
   1717c:	add	r4, r4, #2
   17180:	mov	r6, r7
   17184:	strbhi	r0, [r8, r3]
   17188:	b	17118 <__assert_fail@plt+0x5f14>
   1718c:	cmp	r1, #1
   17190:	beq	17004 <__assert_fail@plt+0x5e00>
   17194:	add	r2, r4, #1
   17198:	add	r3, sl, r1
   1719c:	add	r2, sl, r2
   171a0:	add	r4, r3, r4
   171a4:	ldrb	r3, [r2], #1
   171a8:	sub	r3, r3, #91	; 0x5b
   171ac:	cmp	r3, #33	; 0x21
   171b0:	ldrls	pc, [pc, r3, lsl #2]
   171b4:	b	17240 <__assert_fail@plt+0x603c>
   171b8:	andeq	r7, r1, ip, asr #4
   171bc:	andeq	r7, r1, ip, asr #4
   171c0:	andeq	r7, r1, r0, asr #4
   171c4:	andeq	r7, r1, ip, asr #4
   171c8:	andeq	r7, r1, r0, asr #4
   171cc:	andeq	r7, r1, ip, asr #4
   171d0:	andeq	r7, r1, r0, asr #4
   171d4:	andeq	r7, r1, r0, asr #4
   171d8:	andeq	r7, r1, r0, asr #4
   171dc:	andeq	r7, r1, r0, asr #4
   171e0:	andeq	r7, r1, r0, asr #4
   171e4:	andeq	r7, r1, r0, asr #4
   171e8:	andeq	r7, r1, r0, asr #4
   171ec:	andeq	r7, r1, r0, asr #4
   171f0:	andeq	r7, r1, r0, asr #4
   171f4:	andeq	r7, r1, r0, asr #4
   171f8:	andeq	r7, r1, r0, asr #4
   171fc:	andeq	r7, r1, r0, asr #4
   17200:	andeq	r7, r1, r0, asr #4
   17204:	andeq	r7, r1, r0, asr #4
   17208:	andeq	r7, r1, r0, asr #4
   1720c:	andeq	r7, r1, r0, asr #4
   17210:	andeq	r7, r1, r0, asr #4
   17214:	andeq	r7, r1, r0, asr #4
   17218:	andeq	r7, r1, r0, asr #4
   1721c:	andeq	r7, r1, r0, asr #4
   17220:	andeq	r7, r1, r0, asr #4
   17224:	andeq	r7, r1, r0, asr #4
   17228:	andeq	r7, r1, r0, asr #4
   1722c:	andeq	r7, r1, r0, asr #4
   17230:	andeq	r7, r1, r0, asr #4
   17234:	andeq	r7, r1, r0, asr #4
   17238:	andeq	r7, r1, r0, asr #4
   1723c:	andeq	r7, r1, ip, asr #4
   17240:	cmp	r4, r2
   17244:	bne	171a4 <__assert_fail@plt+0x5fa0>
   17248:	b	17004 <__assert_fail@plt+0x5e00>
   1724c:	mov	r8, #2
   17250:	ldr	fp, [sp, #76]	; 0x4c
   17254:	ldr	sl, [sp, #80]	; 0x50
   17258:	b	16784 <__assert_fail@plt+0x5580>
   1725c:	ldr	r2, [sp, #40]	; 0x28
   17260:	str	fp, [sp, #152]	; 0x98
   17264:	mov	fp, r8
   17268:	ldr	r8, [sp, #152]	; 0x98
   1726c:	and	r2, r2, r3
   17270:	str	r2, [sp, #40]	; 0x28
   17274:	b	16784 <__assert_fail@plt+0x5580>
   17278:	cmp	sl, r4
   1727c:	movls	r0, r4
   17280:	bls	168b4 <__assert_fail@plt+0x56b0>
   17284:	ldr	r3, [sp, #48]	; 0x30
   17288:	b	168a4 <__assert_fail@plt+0x56a0>
   1728c:	str	sl, [sp, #72]	; 0x48
   17290:	ldr	sl, [sp, #44]	; 0x2c
   17294:	b	166f4 <__assert_fail@plt+0x54f0>
   17298:	str	r3, [sp, #40]	; 0x28
   1729c:	str	fp, [sp, #152]	; 0x98
   172a0:	mov	fp, r8
   172a4:	ldr	r8, [sp, #152]	; 0x98
   172a8:	b	16784 <__assert_fail@plt+0x5580>
   172ac:	str	r6, [sp, #48]	; 0x30
   172b0:	ldr	r6, [sp, #52]	; 0x34
   172b4:	b	16724 <__assert_fail@plt+0x5520>
   172b8:	mov	r6, #0
   172bc:	ldr	r2, [sp, #40]	; 0x28
   172c0:	b	17054 <__assert_fail@plt+0x5e50>
   172c4:	str	r6, [sp, #48]	; 0x30
   172c8:	ldr	r6, [sp, #52]	; 0x34
   172cc:	b	16510 <__assert_fail@plt+0x530c>
   172d0:	add	r4, r4, #4
   172d4:	mov	r6, #0
   172d8:	str	r3, [sp, #48]	; 0x30
   172dc:	mov	r5, #48	; 0x30
   172e0:	b	16498 <__assert_fail@plt+0x5294>
   172e4:	mov	r7, r3
   172e8:	b	17118 <__assert_fail@plt+0x5f14>
   172ec:	mov	r3, #1
   172f0:	movw	r2, #45708	; 0xb28c
   172f4:	movt	r2, #1
   172f8:	mov	r4, r3
   172fc:	str	r3, [sp, #36]	; 0x24
   17300:	str	r3, [sp, #40]	; 0x28
   17304:	str	sl, [sp, #44]	; 0x2c
   17308:	str	sl, [sp, #48]	; 0x30
   1730c:	str	r3, [sp, #56]	; 0x38
   17310:	str	r2, [sp, #60]	; 0x3c
   17314:	str	sl, [sp, #68]	; 0x44
   17318:	str	sl, [sp, #72]	; 0x48
   1731c:	b	15fc0 <__assert_fail@plt+0x4dbc>
   17320:	mov	r3, r6
   17324:	mov	r5, #48	; 0x30
   17328:	mov	r6, #0
   1732c:	b	16498 <__assert_fail@plt+0x5294>
   17330:	mov	r5, r3
   17334:	b	16810 <__assert_fail@plt+0x560c>
   17338:	cmp	sl, r4
   1733c:	mov	r5, #48	; 0x30
   17340:	movhi	r3, #48	; 0x30
   17344:	strbhi	r3, [r8, r4]
   17348:	add	r3, r0, #2
   1734c:	add	r4, r0, #3
   17350:	cmp	sl, r3
   17354:	movhi	r1, #48	; 0x30
   17358:	strbhi	r1, [r8, r3]
   1735c:	b	168e8 <__assert_fail@plt+0x56e4>
   17360:	str	fp, [sp, #152]	; 0x98
   17364:	mov	fp, r8
   17368:	ldr	r8, [sp, #152]	; 0x98
   1736c:	b	16784 <__assert_fail@plt+0x5580>
   17370:	ldr	r3, [sp, #164]	; 0xa4
   17374:	ldrb	r3, [r3]
   17378:	cmp	r3, #0
   1737c:	beq	15f90 <__assert_fail@plt+0x4d8c>
   17380:	ldr	r2, [sp, #164]	; 0xa4
   17384:	cmp	sl, r4
   17388:	strbhi	r3, [fp, r4]
   1738c:	add	r4, r4, #1
   17390:	ldrb	r3, [r2, #1]!
   17394:	cmp	r3, #0
   17398:	bne	17384 <__assert_fail@plt+0x6180>
   1739c:	b	15f90 <__assert_fail@plt+0x4d8c>
   173a0:	mov	ip, r5
   173a4:	mov	r6, #0
   173a8:	ldr	r2, [sp, #40]	; 0x28
   173ac:	ldr	r8, [sp, #76]	; 0x4c
   173b0:	ldr	sl, [sp, #80]	; 0x50
   173b4:	ldr	r5, [sp, #84]	; 0x54
   173b8:	ldr	r7, [sp, #88]	; 0x58
   173bc:	ldr	r4, [sp, #92]	; 0x5c
   173c0:	b	1704c <__assert_fail@plt+0x5e48>
   173c4:	ldr	r2, [sp, #32]
   173c8:	ldrb	r1, [r2, r3]
   173cc:	sub	r2, r1, #33	; 0x21
   173d0:	cmp	r2, #29
   173d4:	ldrls	pc, [pc, r2, lsl #2]
   173d8:	b	174b4 <__assert_fail@plt+0x62b0>
   173dc:	andeq	r7, r1, r4, asr r4
   173e0:			; <UNDEFINED> instruction: 0x000174b4
   173e4:			; <UNDEFINED> instruction: 0x000174b4
   173e8:			; <UNDEFINED> instruction: 0x000174b4
   173ec:			; <UNDEFINED> instruction: 0x000174b4
   173f0:			; <UNDEFINED> instruction: 0x000174b4
   173f4:	andeq	r7, r1, r4, asr r4
   173f8:	andeq	r7, r1, r4, asr r4
   173fc:	andeq	r7, r1, r4, asr r4
   17400:			; <UNDEFINED> instruction: 0x000174b4
   17404:			; <UNDEFINED> instruction: 0x000174b4
   17408:			; <UNDEFINED> instruction: 0x000174b4
   1740c:	andeq	r7, r1, r4, asr r4
   17410:			; <UNDEFINED> instruction: 0x000174b4
   17414:	andeq	r7, r1, r4, asr r4
   17418:			; <UNDEFINED> instruction: 0x000174b4
   1741c:			; <UNDEFINED> instruction: 0x000174b4
   17420:			; <UNDEFINED> instruction: 0x000174b4
   17424:			; <UNDEFINED> instruction: 0x000174b4
   17428:			; <UNDEFINED> instruction: 0x000174b4
   1742c:			; <UNDEFINED> instruction: 0x000174b4
   17430:			; <UNDEFINED> instruction: 0x000174b4
   17434:			; <UNDEFINED> instruction: 0x000174b4
   17438:			; <UNDEFINED> instruction: 0x000174b4
   1743c:			; <UNDEFINED> instruction: 0x000174b4
   17440:			; <UNDEFINED> instruction: 0x000174b4
   17444:			; <UNDEFINED> instruction: 0x000174b4
   17448:	andeq	r7, r1, r4, asr r4
   1744c:	andeq	r7, r1, r4, asr r4
   17450:	andeq	r7, r1, r4, asr r4
   17454:	ldr	r2, [sp, #44]	; 0x2c
   17458:	cmp	r2, #0
   1745c:	bne	175b8 <__assert_fail@plt+0x63b4>
   17460:	cmp	sl, r4
   17464:	mov	r5, r1
   17468:	movhi	r2, #63	; 0x3f
   1746c:	mov	r9, r3
   17470:	strbhi	r2, [r8, r4]
   17474:	add	r2, r4, #1
   17478:	cmp	sl, r2
   1747c:	movhi	r0, #34	; 0x22
   17480:	strbhi	r0, [r8, r2]
   17484:	add	r2, r4, #2
   17488:	cmp	sl, r2
   1748c:	movhi	r0, #34	; 0x22
   17490:	strbhi	r0, [r8, r2]
   17494:	add	r2, r4, #3
   17498:	add	r4, r4, #4
   1749c:	cmp	sl, r2
   174a0:	movhi	r0, #63	; 0x3f
   174a4:	strbhi	r0, [r8, r2]
   174a8:	mov	r2, #0
   174ac:	mov	r6, r2
   174b0:	b	168e8 <__assert_fail@plt+0x56e4>
   174b4:	mov	r3, #0
   174b8:	mov	r6, r3
   174bc:	b	16460 <__assert_fail@plt+0x525c>
   174c0:	ldr	r0, [sp, #28]
   174c4:	mov	r1, r4
   174c8:	mov	r2, r7
   174cc:	mov	r3, r5
   174d0:	mov	ip, r5
   174d4:	ldr	r8, [sp, #76]	; 0x4c
   174d8:	ldr	sl, [sp, #80]	; 0x50
   174dc:	cmp	r1, r0
   174e0:	ldr	r5, [sp, #84]	; 0x54
   174e4:	ldr	r7, [sp, #88]	; 0x58
   174e8:	ldr	r4, [sp, #92]	; 0x5c
   174ec:	bcs	17520 <__assert_fail@plt+0x631c>
   174f0:	ldrb	r6, [r2]
   174f4:	cmp	r6, #0
   174f8:	bne	1750c <__assert_fail@plt+0x6308>
   174fc:	b	17640 <__assert_fail@plt+0x643c>
   17500:	ldrb	r6, [r2, #1]!
   17504:	cmp	r6, #0
   17508:	beq	175c8 <__assert_fail@plt+0x63c4>
   1750c:	add	r3, r3, #1
   17510:	add	r1, r9, r3
   17514:	cmp	r1, r0
   17518:	bcc	17500 <__assert_fail@plt+0x62fc>
   1751c:	mov	ip, r3
   17520:	mov	r6, #0
   17524:	ldr	r2, [sp, #40]	; 0x28
   17528:	b	1704c <__assert_fail@plt+0x5e48>
   1752c:	mov	r3, #1
   17530:	mov	r2, #0
   17534:	mov	r4, r2
   17538:	str	r3, [sp, #36]	; 0x24
   1753c:	str	r3, [sp, #40]	; 0x28
   17540:	str	r3, [sp, #44]	; 0x2c
   17544:	str	r2, [sp, #48]	; 0x30
   17548:	str	r3, [sp, #56]	; 0x38
   1754c:	movw	r3, #45708	; 0xb28c
   17550:	movt	r3, #1
   17554:	str	r3, [sp, #60]	; 0x3c
   17558:	str	r2, [sp, #68]	; 0x44
   1755c:	str	r2, [sp, #72]	; 0x48
   17560:	b	15fc0 <__assert_fail@plt+0x4dbc>
   17564:	mov	r2, r3
   17568:	ldr	r3, [sp, #60]	; 0x3c
   1756c:	cmp	r3, #0
   17570:	moveq	r2, #0
   17574:	andne	r2, r2, #1
   17578:	cmp	r2, #0
   1757c:	beq	175a8 <__assert_fail@plt+0x63a4>
   17580:	mov	r2, r3
   17584:	ldrb	r3, [r3]
   17588:	cmp	r3, #0
   1758c:	beq	175a8 <__assert_fail@plt+0x63a4>
   17590:	cmp	sl, r4
   17594:	strbhi	r3, [fp, r4]
   17598:	add	r4, r4, #1
   1759c:	ldrb	r3, [r2, #1]!
   175a0:	cmp	r3, #0
   175a4:	bne	17590 <__assert_fail@plt+0x638c>
   175a8:	cmp	sl, r4
   175ac:	movhi	r3, #0
   175b0:	strbhi	r3, [fp, r4]
   175b4:	b	167c8 <__assert_fail@plt+0x55c4>
   175b8:	str	fp, [sp, #152]	; 0x98
   175bc:	mov	fp, r8
   175c0:	ldr	r8, [sp, #152]	; 0x98
   175c4:	b	16790 <__assert_fail@plt+0x558c>
   175c8:	mov	ip, r3
   175cc:	ldr	r2, [sp, #40]	; 0x28
   175d0:	b	1704c <__assert_fail@plt+0x5e48>
   175d4:	str	fp, [sp, #152]	; 0x98
   175d8:	mov	fp, r8
   175dc:	ldr	r8, [sp, #152]	; 0x98
   175e0:	sub	r3, r8, #2
   175e4:	clz	r3, r3
   175e8:	lsr	r3, r3, #5
   175ec:	str	r3, [sp, #40]	; 0x28
   175f0:	b	16784 <__assert_fail@plt+0x5580>
   175f4:	mov	ip, #5
   175f8:	ldr	r3, [sp, #28]
   175fc:	str	ip, [sp]
   17600:	ldr	r2, [sp, #156]	; 0x9c
   17604:	ldr	ip, [sp, #164]	; 0xa4
   17608:	ldr	r0, [sp, #160]	; 0xa0
   1760c:	str	r2, [sp, #4]
   17610:	ldr	r2, [sp, #32]
   17614:	ldr	r1, [sp, #72]	; 0x48
   17618:	str	ip, [sp, #12]
   1761c:	ldr	ip, [sp, #168]	; 0xa8
   17620:	str	r0, [sp, #8]
   17624:	mov	r0, fp
   17628:	str	ip, [sp, #16]
   1762c:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   17630:	mov	r4, r0
   17634:	b	167c8 <__assert_fail@plt+0x55c4>
   17638:	mov	r8, #2
   1763c:	b	16784 <__assert_fail@plt+0x5580>
   17640:	ldr	r2, [sp, #40]	; 0x28
   17644:	b	1704c <__assert_fail@plt+0x5e48>
   17648:	mov	r3, #0
   1764c:	mov	r2, #1
   17650:	mov	r4, r3
   17654:	strd	r2, [sp, #36]	; 0x24
   17658:	strd	r2, [sp, #44]	; 0x2c
   1765c:	str	r2, [sp, #56]	; 0x38
   17660:	str	r3, [sp, #68]	; 0x44
   17664:	str	r3, [sp, #72]	; 0x48
   17668:	movw	r3, #45728	; 0xb2a0
   1766c:	movt	r3, #1
   17670:	str	r3, [sp, #60]	; 0x3c
   17674:	b	15fc0 <__assert_fail@plt+0x4dbc>
   17678:	mov	r3, #0
   1767c:	mov	r1, #1
   17680:	mov	r2, r3
   17684:	str	r1, [sp, #36]	; 0x24
   17688:	str	r3, [sp, #48]	; 0x30
   1768c:	str	sl, [sp, #72]	; 0x48
   17690:	b	165c8 <__assert_fail@plt+0x53c4>
   17694:	bl	111ec <abort@plt>
   17698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1769c:	mov	r4, r0
   176a0:	mov	r5, r3
   176a4:	strd	r6, [sp, #8]
   176a8:	movw	r7, #49448	; 0xc128
   176ac:	movt	r7, #2
   176b0:	strd	r8, [sp, #16]
   176b4:	strd	sl, [sp, #24]
   176b8:	mov	sl, r1
   176bc:	mov	fp, r2
   176c0:	str	lr, [sp, #32]
   176c4:	sub	sp, sp, #60	; 0x3c
   176c8:	bl	110d8 <__errno_location@plt>
   176cc:	mov	r8, r0
   176d0:	cmn	r4, #-2147483647	; 0x80000001
   176d4:	ldr	r6, [r7]
   176d8:	movne	r0, #0
   176dc:	moveq	r0, #1
   176e0:	ldr	r3, [r8]
   176e4:	orrs	r0, r0, r4, lsr #31
   176e8:	str	r3, [sp, #28]
   176ec:	bne	1787c <__assert_fail@plt+0x6678>
   176f0:	ldr	r3, [r7, #4]
   176f4:	cmp	r3, r4
   176f8:	bgt	17758 <__assert_fail@plt+0x6554>
   176fc:	add	r1, r7, #8
   17700:	sub	r2, r4, r3
   17704:	str	r3, [sp, #52]	; 0x34
   17708:	cmp	r6, r1
   1770c:	add	r2, r2, #1
   17710:	beq	17854 <__assert_fail@plt+0x6650>
   17714:	mov	r1, #8
   17718:	mov	r0, r6
   1771c:	mvn	r3, #-2147483648	; 0x80000000
   17720:	str	r1, [sp]
   17724:	add	r1, sp, #52	; 0x34
   17728:	bl	186fc <__assert_fail@plt+0x74f8>
   1772c:	mov	r6, r0
   17730:	str	r0, [r7]
   17734:	ldr	r0, [r7, #4]
   17738:	mov	r1, #0
   1773c:	ldr	r2, [sp, #52]	; 0x34
   17740:	sub	r2, r2, r0
   17744:	add	r0, r6, r0, lsl #3
   17748:	lsl	r2, r2, #3
   1774c:	bl	11108 <memset@plt>
   17750:	ldr	r3, [sp, #52]	; 0x34
   17754:	str	r3, [r7, #4]
   17758:	ldr	r1, [r5, #4]
   1775c:	add	r0, r6, r4, lsl #3
   17760:	add	ip, r5, #8
   17764:	mov	r3, fp
   17768:	mov	r2, sl
   1776c:	ldr	r7, [r0, #4]
   17770:	str	r0, [sp, #36]	; 0x24
   17774:	str	ip, [sp, #40]	; 0x28
   17778:	orr	r0, r1, #1
   1777c:	ldr	r9, [r6, r4, lsl #3]
   17780:	str	ip, [sp, #8]
   17784:	ldr	lr, [r5, #44]	; 0x2c
   17788:	str	r0, [sp, #4]
   1778c:	ldr	ip, [r5]
   17790:	mov	r1, r9
   17794:	str	ip, [sp, #32]
   17798:	ldr	ip, [r5, #40]	; 0x28
   1779c:	str	ip, [sp, #12]
   177a0:	ldr	ip, [sp, #32]
   177a4:	str	lr, [sp, #16]
   177a8:	str	r0, [sp, #44]	; 0x2c
   177ac:	mov	r0, r7
   177b0:	str	ip, [sp]
   177b4:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   177b8:	cmp	r9, r0
   177bc:	bhi	1782c <__assert_fail@plt+0x6628>
   177c0:	add	r9, r0, #1
   177c4:	movw	r3, #49732	; 0xc244
   177c8:	movt	r3, #2
   177cc:	cmp	r7, r3
   177d0:	str	r9, [r6, r4, lsl #3]
   177d4:	beq	177e0 <__assert_fail@plt+0x65dc>
   177d8:	mov	r0, r7
   177dc:	bl	158ac <__assert_fail@plt+0x46a8>
   177e0:	mov	r0, r9
   177e4:	bl	1854c <__assert_fail@plt+0x7348>
   177e8:	ldr	ip, [r5]
   177ec:	mov	r3, fp
   177f0:	mov	r2, sl
   177f4:	mov	r1, r9
   177f8:	mov	r7, r0
   177fc:	ldr	lr, [sp, #36]	; 0x24
   17800:	ldr	r4, [r5, #40]	; 0x28
   17804:	str	r0, [lr, #4]
   17808:	ldr	lr, [r5, #44]	; 0x2c
   1780c:	str	ip, [sp]
   17810:	ldr	ip, [sp, #44]	; 0x2c
   17814:	str	ip, [sp, #4]
   17818:	ldr	ip, [sp, #40]	; 0x28
   1781c:	str	r4, [sp, #12]
   17820:	str	lr, [sp, #16]
   17824:	str	ip, [sp, #8]
   17828:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   1782c:	ldr	r3, [sp, #28]
   17830:	mov	r0, r7
   17834:	str	r3, [r8]
   17838:	add	sp, sp, #60	; 0x3c
   1783c:	ldrd	r4, [sp]
   17840:	ldrd	r6, [sp, #8]
   17844:	ldrd	r8, [sp, #16]
   17848:	ldrd	sl, [sp, #24]
   1784c:	add	sp, sp, #32
   17850:	pop	{pc}		; (ldr pc, [sp], #4)
   17854:	mov	r1, #8
   17858:	mvn	r3, #-2147483648	; 0x80000000
   1785c:	str	r1, [sp]
   17860:	add	r1, sp, #52	; 0x34
   17864:	bl	186fc <__assert_fail@plt+0x74f8>
   17868:	ldrd	r2, [r7, #8]
   1786c:	mov	r6, r0
   17870:	str	r0, [r7]
   17874:	strd	r2, [r0]
   17878:	b	17734 <__assert_fail@plt+0x6530>
   1787c:	bl	111ec <abort@plt>
   17880:	strd	r4, [sp, #-16]!
   17884:	mov	r5, r0
   17888:	str	r6, [sp, #8]
   1788c:	str	lr, [sp, #12]
   17890:	bl	110d8 <__errno_location@plt>
   17894:	mov	r4, r0
   17898:	cmp	r5, #0
   1789c:	ldr	r0, [pc, #32]	; 178c4 <__assert_fail@plt+0x66c0>
   178a0:	mov	r1, #48	; 0x30
   178a4:	movne	r0, r5
   178a8:	ldr	r6, [r4]
   178ac:	bl	18874 <__assert_fail@plt+0x7670>
   178b0:	str	r6, [r4]
   178b4:	ldrd	r4, [sp]
   178b8:	ldr	r6, [sp, #8]
   178bc:	add	sp, sp, #12
   178c0:	pop	{pc}		; (ldr pc, [sp], #4)
   178c4:	andeq	ip, r2, r4, asr #6
   178c8:	ldr	r3, [pc, #12]	; 178dc <__assert_fail@plt+0x66d8>
   178cc:	cmp	r0, #0
   178d0:	moveq	r0, r3
   178d4:	ldr	r0, [r0]
   178d8:	bx	lr
   178dc:	andeq	ip, r2, r4, asr #6
   178e0:	ldr	r3, [pc, #12]	; 178f4 <__assert_fail@plt+0x66f0>
   178e4:	cmp	r0, #0
   178e8:	moveq	r0, r3
   178ec:	str	r1, [r0]
   178f0:	bx	lr
   178f4:	andeq	ip, r2, r4, asr #6
   178f8:	ldr	r3, [pc, #52]	; 17934 <__assert_fail@plt+0x6730>
   178fc:	cmp	r0, #0
   17900:	push	{lr}		; (str lr, [sp, #-4]!)
   17904:	lsr	lr, r1, #5
   17908:	and	r1, r1, #31
   1790c:	moveq	r0, r3
   17910:	add	r3, r0, #8
   17914:	ldr	ip, [r3, lr, lsl #2]
   17918:	lsr	r0, ip, r1
   1791c:	eor	r2, r2, r0
   17920:	and	r0, r0, #1
   17924:	and	r2, r2, #1
   17928:	eor	r1, ip, r2, lsl r1
   1792c:	str	r1, [r3, lr, lsl #2]
   17930:	pop	{pc}		; (ldr pc, [sp], #4)
   17934:	andeq	ip, r2, r4, asr #6
   17938:	ldr	r3, [pc, #16]	; 17950 <__assert_fail@plt+0x674c>
   1793c:	cmp	r0, #0
   17940:	movne	r3, r0
   17944:	ldr	r0, [r3, #4]
   17948:	str	r1, [r3, #4]
   1794c:	bx	lr
   17950:	andeq	ip, r2, r4, asr #6
   17954:	ldr	r3, [pc, #48]	; 1798c <__assert_fail@plt+0x6788>
   17958:	cmp	r0, #0
   1795c:	mov	ip, #10
   17960:	moveq	r0, r3
   17964:	cmp	r2, #0
   17968:	cmpne	r1, #0
   1796c:	str	ip, [r0]
   17970:	beq	17980 <__assert_fail@plt+0x677c>
   17974:	str	r1, [r0, #40]	; 0x28
   17978:	str	r2, [r0, #44]	; 0x2c
   1797c:	bx	lr
   17980:	str	r4, [sp, #-8]!
   17984:	str	lr, [sp, #4]
   17988:	bl	111ec <abort@plt>
   1798c:	andeq	ip, r2, r4, asr #6
   17990:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17994:	strd	r6, [sp, #8]
   17998:	mov	r7, r0
   1799c:	mov	r6, r1
   179a0:	strd	r8, [sp, #16]
   179a4:	mov	r8, r2
   179a8:	mov	r9, r3
   179ac:	str	lr, [sp, #24]
   179b0:	sub	sp, sp, #28
   179b4:	ldr	r4, [sp, #56]	; 0x38
   179b8:	ldr	ip, [pc, #104]	; 17a28 <__assert_fail@plt+0x6824>
   179bc:	cmp	r4, #0
   179c0:	moveq	r4, ip
   179c4:	bl	110d8 <__errno_location@plt>
   179c8:	ldr	ip, [r4, #44]	; 0x2c
   179cc:	mov	r5, r0
   179d0:	mov	r1, r6
   179d4:	add	lr, r4, #8
   179d8:	mov	r3, r9
   179dc:	ldr	r6, [r5]
   179e0:	mov	r2, r8
   179e4:	mov	r0, r7
   179e8:	str	ip, [sp, #16]
   179ec:	ldr	ip, [r4, #40]	; 0x28
   179f0:	str	lr, [sp, #8]
   179f4:	str	ip, [sp, #12]
   179f8:	ldr	ip, [r4, #4]
   179fc:	str	ip, [sp, #4]
   17a00:	ldr	ip, [r4]
   17a04:	str	ip, [sp]
   17a08:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   17a0c:	str	r6, [r5]
   17a10:	add	sp, sp, #28
   17a14:	ldrd	r4, [sp]
   17a18:	ldrd	r6, [sp, #8]
   17a1c:	ldrd	r8, [sp, #16]
   17a20:	add	sp, sp, #24
   17a24:	pop	{pc}		; (ldr pc, [sp], #4)
   17a28:	andeq	ip, r2, r4, asr #6
   17a2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a30:	cmp	r3, #0
   17a34:	ldr	r4, [pc, #220]	; 17b18 <__assert_fail@plt+0x6914>
   17a38:	movne	r4, r3
   17a3c:	strd	r6, [sp, #8]
   17a40:	mov	r6, r2
   17a44:	strd	r8, [sp, #16]
   17a48:	mov	r9, r0
   17a4c:	strd	sl, [sp, #24]
   17a50:	mov	sl, r1
   17a54:	str	lr, [sp, #32]
   17a58:	sub	sp, sp, #44	; 0x2c
   17a5c:	bl	110d8 <__errno_location@plt>
   17a60:	ldr	r5, [r4, #4]
   17a64:	mov	r7, r0
   17a68:	mov	r1, #0
   17a6c:	add	r8, r4, #8
   17a70:	mov	r3, sl
   17a74:	ldr	ip, [r4, #44]	; 0x2c
   17a78:	mov	r2, r9
   17a7c:	mov	r0, r1
   17a80:	ldr	lr, [r7]
   17a84:	cmp	r6, r1
   17a88:	orreq	r5, r5, #1
   17a8c:	str	ip, [sp, #16]
   17a90:	ldr	ip, [r4, #40]	; 0x28
   17a94:	stmib	sp, {r5, r8, ip}
   17a98:	ldr	ip, [r4]
   17a9c:	str	lr, [sp, #28]
   17aa0:	str	ip, [sp]
   17aa4:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   17aa8:	add	r1, r0, #1
   17aac:	mov	fp, r0
   17ab0:	mov	r0, r1
   17ab4:	str	r1, [sp, #36]	; 0x24
   17ab8:	bl	1854c <__assert_fail@plt+0x7348>
   17abc:	ldr	ip, [r4, #44]	; 0x2c
   17ac0:	mov	r3, sl
   17ac4:	mov	r2, r9
   17ac8:	ldr	r1, [sp, #36]	; 0x24
   17acc:	str	ip, [sp, #16]
   17ad0:	ldr	ip, [r4, #40]	; 0x28
   17ad4:	str	r0, [sp, #32]
   17ad8:	stmib	sp, {r5, r8, ip}
   17adc:	ldr	ip, [r4]
   17ae0:	str	ip, [sp]
   17ae4:	bl	15ed8 <__assert_fail@plt+0x4cd4>
   17ae8:	ldr	lr, [sp, #28]
   17aec:	cmp	r6, #0
   17af0:	ldr	r0, [sp, #32]
   17af4:	str	lr, [r7]
   17af8:	strne	fp, [r6]
   17afc:	add	sp, sp, #44	; 0x2c
   17b00:	ldrd	r4, [sp]
   17b04:	ldrd	r6, [sp, #8]
   17b08:	ldrd	r8, [sp, #16]
   17b0c:	ldrd	sl, [sp, #24]
   17b10:	add	sp, sp, #32
   17b14:	pop	{pc}		; (ldr pc, [sp], #4)
   17b18:	andeq	ip, r2, r4, asr #6
   17b1c:	mov	r3, r2
   17b20:	mov	r2, #0
   17b24:	b	17a2c <__assert_fail@plt+0x6828>
   17b28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17b2c:	movw	r5, #49448	; 0xc128
   17b30:	movt	r5, #2
   17b34:	ldr	r3, [r5, #4]
   17b38:	strd	r6, [sp, #8]
   17b3c:	str	r8, [sp, #16]
   17b40:	str	lr, [sp, #20]
   17b44:	ldr	r7, [r5]
   17b48:	cmp	r3, #1
   17b4c:	ble	17b70 <__assert_fail@plt+0x696c>
   17b50:	mov	r4, #1
   17b54:	add	r6, r7, #4
   17b58:	ldr	r0, [r6, r4, lsl #3]
   17b5c:	add	r4, r4, #1
   17b60:	bl	158ac <__assert_fail@plt+0x46a8>
   17b64:	ldr	r3, [r5, #4]
   17b68:	cmp	r3, r4
   17b6c:	bgt	17b58 <__assert_fail@plt+0x6954>
   17b70:	ldr	r0, [r7, #4]
   17b74:	movw	r4, #49732	; 0xc244
   17b78:	movt	r4, #2
   17b7c:	cmp	r0, r4
   17b80:	beq	17b94 <__assert_fail@plt+0x6990>
   17b84:	bl	158ac <__assert_fail@plt+0x46a8>
   17b88:	mov	r3, #256	; 0x100
   17b8c:	str	r3, [r5, #8]
   17b90:	str	r4, [r5, #12]
   17b94:	ldr	r4, [pc, #44]	; 17bc8 <__assert_fail@plt+0x69c4>
   17b98:	cmp	r7, r4
   17b9c:	beq	17bac <__assert_fail@plt+0x69a8>
   17ba0:	mov	r0, r7
   17ba4:	bl	158ac <__assert_fail@plt+0x46a8>
   17ba8:	str	r4, [r5]
   17bac:	mov	r3, #1
   17bb0:	ldrd	r6, [sp, #8]
   17bb4:	str	r3, [r5, #4]
   17bb8:	ldrd	r4, [sp]
   17bbc:	ldr	r8, [sp, #16]
   17bc0:	add	sp, sp, #20
   17bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   17bc8:	andeq	ip, r2, r0, lsr r1
   17bcc:	ldr	r3, [pc, #4]	; 17bd8 <__assert_fail@plt+0x69d4>
   17bd0:	mvn	r2, #0
   17bd4:	b	17698 <__assert_fail@plt+0x6494>
   17bd8:	andeq	ip, r2, r4, asr #6
   17bdc:	ldr	r3, [pc]	; 17be4 <__assert_fail@plt+0x69e0>
   17be0:	b	17698 <__assert_fail@plt+0x6494>
   17be4:	andeq	ip, r2, r4, asr #6
   17be8:	mov	r1, r0
   17bec:	ldr	r3, [pc, #8]	; 17bfc <__assert_fail@plt+0x69f8>
   17bf0:	mvn	r2, #0
   17bf4:	mov	r0, #0
   17bf8:	b	17698 <__assert_fail@plt+0x6494>
   17bfc:	andeq	ip, r2, r4, asr #6
   17c00:	mov	r2, r1
   17c04:	ldr	r3, [pc, #8]	; 17c14 <__assert_fail@plt+0x6a10>
   17c08:	mov	r1, r0
   17c0c:	mov	r0, #0
   17c10:	b	17698 <__assert_fail@plt+0x6494>
   17c14:	andeq	ip, r2, r4, asr #6
   17c18:	strd	r4, [sp, #-12]!
   17c1c:	mov	r5, r2
   17c20:	mov	r4, r0
   17c24:	str	lr, [sp, #8]
   17c28:	sub	sp, sp, #52	; 0x34
   17c2c:	mov	r0, sp
   17c30:	bl	15d34 <__assert_fail@plt+0x4b30>
   17c34:	mov	r3, sp
   17c38:	mov	r1, r5
   17c3c:	mov	r0, r4
   17c40:	mvn	r2, #0
   17c44:	bl	17698 <__assert_fail@plt+0x6494>
   17c48:	add	sp, sp, #52	; 0x34
   17c4c:	ldrd	r4, [sp]
   17c50:	add	sp, sp, #8
   17c54:	pop	{pc}		; (ldr pc, [sp], #4)
   17c58:	strd	r4, [sp, #-16]!
   17c5c:	mov	r5, r2
   17c60:	mov	r4, r0
   17c64:	str	r6, [sp, #8]
   17c68:	mov	r6, r3
   17c6c:	str	lr, [sp, #12]
   17c70:	sub	sp, sp, #48	; 0x30
   17c74:	mov	r0, sp
   17c78:	bl	15d34 <__assert_fail@plt+0x4b30>
   17c7c:	mov	r3, sp
   17c80:	mov	r2, r6
   17c84:	mov	r1, r5
   17c88:	mov	r0, r4
   17c8c:	bl	17698 <__assert_fail@plt+0x6494>
   17c90:	add	sp, sp, #48	; 0x30
   17c94:	ldrd	r4, [sp]
   17c98:	ldr	r6, [sp, #8]
   17c9c:	add	sp, sp, #12
   17ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ca4:	mov	r2, r1
   17ca8:	mov	r1, r0
   17cac:	mov	r0, #0
   17cb0:	b	17c18 <__assert_fail@plt+0x6a14>
   17cb4:	mov	r3, r2
   17cb8:	mov	r2, r1
   17cbc:	mov	r1, r0
   17cc0:	mov	r0, #0
   17cc4:	b	17c58 <__assert_fail@plt+0x6a54>
   17cc8:	ldr	ip, [pc, #140]	; 17d5c <__assert_fail@plt+0x6b58>
   17ccc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17cd0:	ldrd	r4, [ip]
   17cd4:	strd	r6, [sp, #8]
   17cd8:	ldrd	r6, [ip, #8]
   17cdc:	strd	r8, [sp, #16]
   17ce0:	lsr	r9, r2, #5
   17ce4:	str	lr, [sp, #24]
   17ce8:	sub	sp, sp, #52	; 0x34
   17cec:	and	lr, r2, #31
   17cf0:	add	r8, sp, #8
   17cf4:	mov	r2, r1
   17cf8:	strd	r4, [sp]
   17cfc:	mov	r1, r0
   17d00:	mov	r3, sp
   17d04:	strd	r6, [sp, #8]
   17d08:	mov	r0, #0
   17d0c:	ldrd	r4, [ip, #16]
   17d10:	ldrd	r6, [ip, #24]
   17d14:	strd	r4, [sp, #16]
   17d18:	ldrd	r4, [ip, #32]
   17d1c:	strd	r6, [sp, #24]
   17d20:	ldrd	r6, [ip, #40]	; 0x28
   17d24:	strd	r4, [sp, #32]
   17d28:	strd	r6, [sp, #40]	; 0x28
   17d2c:	ldr	ip, [r8, r9, lsl #2]
   17d30:	mvn	r4, ip, lsr lr
   17d34:	and	r4, r4, #1
   17d38:	eor	lr, ip, r4, lsl lr
   17d3c:	str	lr, [r8, r9, lsl #2]
   17d40:	bl	17698 <__assert_fail@plt+0x6494>
   17d44:	add	sp, sp, #52	; 0x34
   17d48:	ldrd	r4, [sp]
   17d4c:	ldrd	r6, [sp, #8]
   17d50:	ldrd	r8, [sp, #16]
   17d54:	add	sp, sp, #24
   17d58:	pop	{pc}		; (ldr pc, [sp], #4)
   17d5c:	andeq	ip, r2, r4, asr #6
   17d60:	mov	r2, r1
   17d64:	mvn	r1, #0
   17d68:	b	17cc8 <__assert_fail@plt+0x6ac4>
   17d6c:	mov	r2, #58	; 0x3a
   17d70:	mvn	r1, #0
   17d74:	b	17cc8 <__assert_fail@plt+0x6ac4>
   17d78:	mov	r2, #58	; 0x3a
   17d7c:	b	17cc8 <__assert_fail@plt+0x6ac4>
   17d80:	strd	r4, [sp, #-20]!	; 0xffffffec
   17d84:	strd	r6, [sp, #8]
   17d88:	mov	r6, r0
   17d8c:	mov	r7, r2
   17d90:	str	lr, [sp, #16]
   17d94:	sub	sp, sp, #100	; 0x64
   17d98:	mov	r0, sp
   17d9c:	bl	15d34 <__assert_fail@plt+0x4b30>
   17da0:	ldrd	r4, [sp, #8]
   17da4:	mov	r1, r7
   17da8:	mov	r0, r6
   17dac:	add	r3, sp, #48	; 0x30
   17db0:	mvn	r2, #0
   17db4:	ldrd	r6, [sp]
   17db8:	strd	r4, [sp, #56]	; 0x38
   17dbc:	ldrd	r4, [sp, #16]
   17dc0:	strd	r6, [sp, #48]	; 0x30
   17dc4:	ldrd	r6, [sp, #32]
   17dc8:	ldr	lr, [sp, #60]	; 0x3c
   17dcc:	strd	r4, [sp, #64]	; 0x40
   17dd0:	ldrd	r4, [sp, #24]
   17dd4:	mvn	ip, lr
   17dd8:	and	ip, ip, #67108864	; 0x4000000
   17ddc:	strd	r4, [sp, #72]	; 0x48
   17de0:	eor	ip, ip, lr
   17de4:	ldrd	r4, [sp, #40]	; 0x28
   17de8:	str	ip, [sp, #60]	; 0x3c
   17dec:	strd	r6, [sp, #80]	; 0x50
   17df0:	strd	r4, [sp, #88]	; 0x58
   17df4:	bl	17698 <__assert_fail@plt+0x6494>
   17df8:	add	sp, sp, #100	; 0x64
   17dfc:	ldrd	r4, [sp]
   17e00:	ldrd	r6, [sp, #8]
   17e04:	add	sp, sp, #16
   17e08:	pop	{pc}		; (ldr pc, [sp], #4)
   17e0c:	ldr	ip, [pc, #156]	; 17eb0 <__assert_fail@plt+0x6cac>
   17e10:	cmp	r2, #0
   17e14:	cmpne	r1, #0
   17e18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17e1c:	strd	r6, [sp, #8]
   17e20:	mov	r6, r2
   17e24:	str	r8, [sp, #16]
   17e28:	mov	r8, r3
   17e2c:	strd	sl, [sp, #20]
   17e30:	ldrd	r4, [ip]
   17e34:	str	lr, [sp, #28]
   17e38:	sub	sp, sp, #48	; 0x30
   17e3c:	mov	lr, #10
   17e40:	ldrd	r2, [ip, #8]
   17e44:	ldrd	sl, [ip, #16]
   17e48:	strd	r4, [sp]
   17e4c:	ldrd	r4, [ip, #32]
   17e50:	str	lr, [sp]
   17e54:	strd	r2, [sp, #8]
   17e58:	strd	sl, [sp, #16]
   17e5c:	ldrd	r2, [ip, #24]
   17e60:	ldrd	sl, [ip, #40]	; 0x28
   17e64:	strd	r2, [sp, #24]
   17e68:	strd	r4, [sp, #32]
   17e6c:	strd	sl, [sp, #40]	; 0x28
   17e70:	beq	17eac <__assert_fail@plt+0x6ca8>
   17e74:	ldr	r2, [sp, #80]	; 0x50
   17e78:	mov	r7, r1
   17e7c:	mov	r3, sp
   17e80:	mov	r1, r8
   17e84:	str	r7, [sp, #40]	; 0x28
   17e88:	str	r6, [sp, #44]	; 0x2c
   17e8c:	bl	17698 <__assert_fail@plt+0x6494>
   17e90:	add	sp, sp, #48	; 0x30
   17e94:	ldrd	r4, [sp]
   17e98:	ldrd	r6, [sp, #8]
   17e9c:	ldr	r8, [sp, #16]
   17ea0:	ldrd	sl, [sp, #20]
   17ea4:	add	sp, sp, #28
   17ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   17eac:	bl	111ec <abort@plt>
   17eb0:	andeq	ip, r2, r4, asr #6
   17eb4:	mvn	ip, #0
   17eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   17ebc:	sub	sp, sp, #12
   17ec0:	str	ip, [sp]
   17ec4:	bl	17e0c <__assert_fail@plt+0x6c08>
   17ec8:	add	sp, sp, #12
   17ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed0:	mvn	ip, #0
   17ed4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ed8:	sub	sp, sp, #12
   17edc:	mov	r3, r2
   17ee0:	mov	r2, r1
   17ee4:	mov	r1, r0
   17ee8:	mov	r0, #0
   17eec:	str	ip, [sp]
   17ef0:	bl	17e0c <__assert_fail@plt+0x6c08>
   17ef4:	add	sp, sp, #12
   17ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   17efc:	push	{lr}		; (str lr, [sp, #-4]!)
   17f00:	sub	sp, sp, #12
   17f04:	str	r3, [sp]
   17f08:	mov	r3, r2
   17f0c:	mov	r2, r1
   17f10:	mov	r1, r0
   17f14:	mov	r0, #0
   17f18:	bl	17e0c <__assert_fail@plt+0x6c08>
   17f1c:	add	sp, sp, #12
   17f20:	pop	{pc}		; (ldr pc, [sp], #4)
   17f24:	ldr	r3, [pc]	; 17f2c <__assert_fail@plt+0x6d28>
   17f28:	b	17698 <__assert_fail@plt+0x6494>
   17f2c:	andeq	ip, r2, r8, lsr r1
   17f30:	mov	r2, r1
   17f34:	ldr	r3, [pc, #8]	; 17f44 <__assert_fail@plt+0x6d40>
   17f38:	mov	r1, r0
   17f3c:	mov	r0, #0
   17f40:	b	17698 <__assert_fail@plt+0x6494>
   17f44:	andeq	ip, r2, r8, lsr r1
   17f48:	ldr	r3, [pc, #4]	; 17f54 <__assert_fail@plt+0x6d50>
   17f4c:	mvn	r2, #0
   17f50:	b	17698 <__assert_fail@plt+0x6494>
   17f54:	andeq	ip, r2, r8, lsr r1
   17f58:	mov	r1, r0
   17f5c:	ldr	r3, [pc, #8]	; 17f6c <__assert_fail@plt+0x6d68>
   17f60:	mvn	r2, #0
   17f64:	mov	r0, #0
   17f68:	b	17698 <__assert_fail@plt+0x6494>
   17f6c:	andeq	ip, r2, r8, lsr r1
   17f70:	cmp	r1, #0
   17f74:	strd	r4, [sp, #-16]!
   17f78:	mov	ip, r3
   17f7c:	str	r6, [sp, #8]
   17f80:	mov	r4, r0
   17f84:	str	lr, [sp, #12]
   17f88:	sub	sp, sp, #32
   17f8c:	ldr	r5, [sp, #48]	; 0x30
   17f90:	ldr	r6, [sp, #52]	; 0x34
   17f94:	beq	180d8 <__assert_fail@plt+0x6ed4>
   17f98:	mov	r3, r1
   17f9c:	mov	r1, #1
   17fa0:	stm	sp, {r2, ip}
   17fa4:	movw	r2, #45836	; 0xb30c
   17fa8:	movt	r2, #1
   17fac:	bl	11144 <__fprintf_chk@plt>
   17fb0:	mov	r2, #5
   17fb4:	movw	r1, #45856	; 0xb320
   17fb8:	movt	r1, #1
   17fbc:	mov	r0, #0
   17fc0:	bl	10fc4 <dcgettext@plt>
   17fc4:	movw	ip, #2022	; 0x7e6
   17fc8:	mov	r3, r0
   17fcc:	mov	r1, #1
   17fd0:	movw	r2, #46584	; 0xb5f8
   17fd4:	movt	r2, #1
   17fd8:	mov	r0, r4
   17fdc:	str	ip, [sp]
   17fe0:	bl	11144 <__fprintf_chk@plt>
   17fe4:	mov	r1, r4
   17fe8:	mov	r0, #10
   17fec:	bl	10fb8 <fputc_unlocked@plt>
   17ff0:	mov	r2, #5
   17ff4:	movw	r1, #45860	; 0xb324
   17ff8:	movt	r1, #1
   17ffc:	mov	r0, #0
   18000:	bl	10fc4 <dcgettext@plt>
   18004:	mov	r2, r0
   18008:	mov	r1, #1
   1800c:	movw	r3, #46032	; 0xb3d0
   18010:	movt	r3, #1
   18014:	mov	r0, r4
   18018:	bl	11144 <__fprintf_chk@plt>
   1801c:	mov	r1, r4
   18020:	mov	r0, #10
   18024:	bl	10fb8 <fputc_unlocked@plt>
   18028:	cmp	r6, #9
   1802c:	ldrls	pc, [pc, r6, lsl #2]
   18030:	b	18344 <__assert_fail@plt+0x7140>
   18034:	andeq	r8, r1, r4, asr #1
   18038:	strdeq	r8, [r1], -r4
   1803c:	andeq	r8, r1, r0, lsr r1
   18040:	andeq	r8, r1, r0, ror r1
   18044:			; <UNDEFINED> instruction: 0x000181b8
   18048:	strdeq	r8, [r1], -r0
   1804c:	andeq	r8, r1, r8, lsr r2
   18050:	andeq	r8, r1, ip, lsl #5
   18054:	andeq	r8, r1, r4, ror #5
   18058:	andeq	r8, r1, ip, asr r0
   1805c:	movw	r1, #46336	; 0xb500
   18060:	movt	r1, #1
   18064:	mov	r2, #5
   18068:	mov	r0, #0
   1806c:	bl	10fc4 <dcgettext@plt>
   18070:	ldr	lr, [r5, #4]
   18074:	mov	r2, r0
   18078:	mov	r1, #1
   1807c:	mov	r0, r4
   18080:	ldr	r3, [r5, #8]
   18084:	ldr	ip, [r5, #32]
   18088:	str	lr, [sp]
   1808c:	ldr	lr, [r5, #12]
   18090:	str	ip, [sp, #28]
   18094:	ldr	ip, [r5, #28]
   18098:	str	r3, [sp, #4]
   1809c:	ldr	r3, [r5, #16]
   180a0:	str	lr, [sp, #8]
   180a4:	ldr	lr, [r5, #20]
   180a8:	str	ip, [sp, #24]
   180ac:	ldr	ip, [r5, #24]
   180b0:	str	r3, [sp, #12]
   180b4:	ldr	r3, [r5]
   180b8:	str	lr, [sp, #16]
   180bc:	str	ip, [sp, #20]
   180c0:	bl	11144 <__fprintf_chk@plt>
   180c4:	add	sp, sp, #32
   180c8:	ldrd	r4, [sp]
   180cc:	ldr	r6, [sp, #8]
   180d0:	add	sp, sp, #12
   180d4:	pop	{pc}		; (ldr pc, [sp], #4)
   180d8:	mov	r3, r2
   180dc:	mov	r1, #1
   180e0:	str	ip, [sp]
   180e4:	movw	r2, #45848	; 0xb318
   180e8:	movt	r2, #1
   180ec:	bl	11144 <__fprintf_chk@plt>
   180f0:	b	17fb0 <__assert_fail@plt+0x6dac>
   180f4:	mov	r2, #5
   180f8:	movw	r1, #46068	; 0xb3f4
   180fc:	movt	r1, #1
   18100:	mov	r0, #0
   18104:	bl	10fc4 <dcgettext@plt>
   18108:	ldr	r3, [r5]
   1810c:	mov	r2, r0
   18110:	mov	r1, #1
   18114:	mov	r0, r4
   18118:	add	sp, sp, #32
   1811c:	ldrd	r4, [sp]
   18120:	ldr	r6, [sp, #8]
   18124:	ldr	lr, [sp, #12]
   18128:	add	sp, sp, #16
   1812c:	b	11144 <__fprintf_chk@plt>
   18130:	mov	r2, #5
   18134:	movw	r1, #46084	; 0xb404
   18138:	movt	r1, #1
   1813c:	mov	r0, #0
   18140:	bl	10fc4 <dcgettext@plt>
   18144:	ldm	r5, {r3, ip}
   18148:	mov	r2, r0
   1814c:	mov	r1, #1
   18150:	mov	r0, r4
   18154:	str	ip, [sp, #48]	; 0x30
   18158:	add	sp, sp, #32
   1815c:	ldrd	r4, [sp]
   18160:	ldr	r6, [sp, #8]
   18164:	ldr	lr, [sp, #12]
   18168:	add	sp, sp, #16
   1816c:	b	11144 <__fprintf_chk@plt>
   18170:	mov	r2, #5
   18174:	movw	r1, #46108	; 0xb41c
   18178:	movt	r1, #1
   1817c:	mov	r0, #0
   18180:	bl	10fc4 <dcgettext@plt>
   18184:	ldm	r5, {r3, lr}
   18188:	mov	r2, r0
   1818c:	mov	r1, #1
   18190:	mov	r0, r4
   18194:	ldr	ip, [r5, #8]
   18198:	str	lr, [sp, #48]	; 0x30
   1819c:	str	ip, [sp, #52]	; 0x34
   181a0:	add	sp, sp, #32
   181a4:	ldrd	r4, [sp]
   181a8:	ldr	r6, [sp, #8]
   181ac:	ldr	lr, [sp, #12]
   181b0:	add	sp, sp, #16
   181b4:	b	11144 <__fprintf_chk@plt>
   181b8:	mov	r2, #5
   181bc:	movw	r1, #46136	; 0xb438
   181c0:	movt	r1, #1
   181c4:	mov	r0, #0
   181c8:	bl	10fc4 <dcgettext@plt>
   181cc:	ldmib	r5, {r3, ip, lr}
   181d0:	mov	r2, r0
   181d4:	mov	r1, #1
   181d8:	mov	r0, r4
   181dc:	str	r3, [sp]
   181e0:	ldr	r3, [r5]
   181e4:	stmib	sp, {ip, lr}
   181e8:	bl	11144 <__fprintf_chk@plt>
   181ec:	b	180c4 <__assert_fail@plt+0x6ec0>
   181f0:	mov	r2, #5
   181f4:	movw	r1, #46168	; 0xb458
   181f8:	movt	r1, #1
   181fc:	mov	r0, #0
   18200:	bl	10fc4 <dcgettext@plt>
   18204:	ldmib	r5, {ip, lr}
   18208:	mov	r2, r0
   1820c:	mov	r1, #1
   18210:	mov	r0, r4
   18214:	ldr	r3, [r5, #16]
   18218:	str	ip, [sp]
   1821c:	ldr	ip, [r5, #12]
   18220:	str	r3, [sp, #12]
   18224:	ldr	r3, [r5]
   18228:	str	lr, [sp, #4]
   1822c:	str	ip, [sp, #8]
   18230:	bl	11144 <__fprintf_chk@plt>
   18234:	b	180c4 <__assert_fail@plt+0x6ec0>
   18238:	mov	r2, #5
   1823c:	movw	r1, #46204	; 0xb47c
   18240:	movt	r1, #1
   18244:	mov	r0, #0
   18248:	bl	10fc4 <dcgettext@plt>
   1824c:	ldr	lr, [r5, #4]
   18250:	mov	r2, r0
   18254:	mov	r1, #1
   18258:	mov	r0, r4
   1825c:	ldr	r3, [r5, #8]
   18260:	ldr	ip, [r5, #20]
   18264:	str	lr, [sp]
   18268:	ldr	lr, [r5, #12]
   1826c:	str	ip, [sp, #16]
   18270:	ldr	ip, [r5, #16]
   18274:	str	r3, [sp, #4]
   18278:	ldr	r3, [r5]
   1827c:	str	lr, [sp, #8]
   18280:	str	ip, [sp, #12]
   18284:	bl	11144 <__fprintf_chk@plt>
   18288:	b	180c4 <__assert_fail@plt+0x6ec0>
   1828c:	mov	r2, #5
   18290:	movw	r1, #46244	; 0xb4a4
   18294:	movt	r1, #1
   18298:	mov	r0, #0
   1829c:	bl	10fc4 <dcgettext@plt>
   182a0:	ldmib	r5, {r3, ip}
   182a4:	mov	r2, r0
   182a8:	mov	r1, #1
   182ac:	mov	r0, r4
   182b0:	ldr	lr, [r5, #24]
   182b4:	str	r3, [sp]
   182b8:	ldr	r3, [r5, #12]
   182bc:	str	lr, [sp, #20]
   182c0:	ldr	lr, [r5, #20]
   182c4:	str	ip, [sp, #4]
   182c8:	ldr	ip, [r5, #16]
   182cc:	str	r3, [sp, #8]
   182d0:	ldr	r3, [r5]
   182d4:	str	ip, [sp, #12]
   182d8:	str	lr, [sp, #16]
   182dc:	bl	11144 <__fprintf_chk@plt>
   182e0:	b	180c4 <__assert_fail@plt+0x6ec0>
   182e4:	mov	r2, #5
   182e8:	movw	r1, #46288	; 0xb4d0
   182ec:	movt	r1, #1
   182f0:	mov	r0, #0
   182f4:	bl	10fc4 <dcgettext@plt>
   182f8:	ldmib	r5, {ip, lr}
   182fc:	mov	r2, r0
   18300:	mov	r1, #1
   18304:	mov	r0, r4
   18308:	ldr	r3, [r5, #28]
   1830c:	str	ip, [sp]
   18310:	ldr	ip, [r5, #12]
   18314:	str	r3, [sp, #24]
   18318:	ldr	r3, [r5, #24]
   1831c:	str	lr, [sp, #4]
   18320:	ldr	lr, [r5, #16]
   18324:	str	ip, [sp, #8]
   18328:	ldr	ip, [r5, #20]
   1832c:	str	r3, [sp, #20]
   18330:	ldr	r3, [r5]
   18334:	str	lr, [sp, #12]
   18338:	str	ip, [sp, #16]
   1833c:	bl	11144 <__fprintf_chk@plt>
   18340:	b	180c4 <__assert_fail@plt+0x6ec0>
   18344:	movw	r1, #46388	; 0xb534
   18348:	movt	r1, #1
   1834c:	b	18064 <__assert_fail@plt+0x6e60>
   18350:	strd	r4, [sp, #-12]!
   18354:	str	lr, [sp, #8]
   18358:	sub	sp, sp, #12
   1835c:	ldr	r5, [sp, #24]
   18360:	ldr	ip, [r5]
   18364:	cmp	ip, #0
   18368:	beq	18384 <__assert_fail@plt+0x7180>
   1836c:	mov	lr, r5
   18370:	mov	ip, #0
   18374:	ldr	r4, [lr, #4]!
   18378:	add	ip, ip, #1
   1837c:	cmp	r4, #0
   18380:	bne	18374 <__assert_fail@plt+0x7170>
   18384:	stm	sp, {r5, ip}
   18388:	bl	17f70 <__assert_fail@plt+0x6d6c>
   1838c:	add	sp, sp, #12
   18390:	ldrd	r4, [sp]
   18394:	add	sp, sp, #8
   18398:	pop	{pc}		; (ldr pc, [sp], #4)
   1839c:	strd	r4, [sp, #-16]!
   183a0:	mov	ip, #0
   183a4:	str	r6, [sp, #8]
   183a8:	str	lr, [sp, #12]
   183ac:	sub	sp, sp, #48	; 0x30
   183b0:	ldr	r5, [sp, #64]	; 0x40
   183b4:	add	r6, sp, #8
   183b8:	mov	r4, r6
   183bc:	ldr	lr, [r5], #4
   183c0:	cmp	lr, #0
   183c4:	str	lr, [r4], #4
   183c8:	beq	183d8 <__assert_fail@plt+0x71d4>
   183cc:	add	ip, ip, #1
   183d0:	cmp	ip, #10
   183d4:	bne	183bc <__assert_fail@plt+0x71b8>
   183d8:	stm	sp, {r6, ip}
   183dc:	bl	17f70 <__assert_fail@plt+0x6d6c>
   183e0:	add	sp, sp, #48	; 0x30
   183e4:	ldrd	r4, [sp]
   183e8:	ldr	r6, [sp, #8]
   183ec:	add	sp, sp, #12
   183f0:	pop	{pc}		; (ldr pc, [sp], #4)
   183f4:	push	{r3}		; (str r3, [sp, #-4]!)
   183f8:	mov	ip, #0
   183fc:	strd	r4, [sp, #-12]!
   18400:	str	lr, [sp, #8]
   18404:	sub	sp, sp, #56	; 0x38
   18408:	add	r3, sp, #72	; 0x48
   1840c:	add	r5, sp, #16
   18410:	mov	r4, r3
   18414:	mov	lr, r5
   18418:	str	r3, [sp, #12]
   1841c:	ldr	r3, [r4], #4
   18420:	cmp	r3, #0
   18424:	str	r3, [lr], #4
   18428:	beq	18438 <__assert_fail@plt+0x7234>
   1842c:	add	ip, ip, #1
   18430:	cmp	ip, #10
   18434:	bne	1841c <__assert_fail@plt+0x7218>
   18438:	ldr	r3, [sp, #68]	; 0x44
   1843c:	stm	sp, {r5, ip}
   18440:	bl	17f70 <__assert_fail@plt+0x6d6c>
   18444:	add	sp, sp, #56	; 0x38
   18448:	ldrd	r4, [sp]
   1844c:	ldr	lr, [sp, #8]
   18450:	add	sp, sp, #12
   18454:	add	sp, sp, #4
   18458:	bx	lr
   1845c:	movw	r3, #49540	; 0xc184
   18460:	movt	r3, #2
   18464:	str	r4, [sp, #-8]!
   18468:	mov	r0, #10
   1846c:	ldr	r1, [r3]
   18470:	str	lr, [sp, #4]
   18474:	bl	10fb8 <fputc_unlocked@plt>
   18478:	mov	r2, #5
   1847c:	movw	r1, #46448	; 0xb570
   18480:	movt	r1, #1
   18484:	mov	r0, #0
   18488:	bl	10fc4 <dcgettext@plt>
   1848c:	mov	r1, r0
   18490:	movw	r2, #46468	; 0xb584
   18494:	movt	r2, #1
   18498:	mov	r0, #1
   1849c:	bl	11120 <__printf_chk@plt>
   184a0:	mov	r2, #5
   184a4:	movw	r1, #46492	; 0xb59c
   184a8:	movt	r1, #1
   184ac:	mov	r0, #0
   184b0:	bl	10fc4 <dcgettext@plt>
   184b4:	mov	r1, r0
   184b8:	movw	r3, #44536	; 0xadf8
   184bc:	movt	r3, #1
   184c0:	movw	r2, #44576	; 0xae20
   184c4:	movt	r2, #1
   184c8:	mov	r0, #1
   184cc:	bl	11120 <__printf_chk@plt>
   184d0:	mov	r2, #5
   184d4:	movw	r1, #46512	; 0xb5b0
   184d8:	movt	r1, #1
   184dc:	mov	r0, #0
   184e0:	bl	10fc4 <dcgettext@plt>
   184e4:	mov	r1, r0
   184e8:	movw	r2, #46552	; 0xb5d8
   184ec:	movt	r2, #1
   184f0:	mov	r0, #1
   184f4:	ldr	r4, [sp]
   184f8:	ldr	lr, [sp, #4]
   184fc:	add	sp, sp, #8
   18500:	b	11120 <__printf_chk@plt>
   18504:	str	r4, [sp, #-8]!
   18508:	str	lr, [sp, #4]
   1850c:	bl	195f4 <__assert_fail@plt+0x83f0>
   18510:	cmp	r0, #0
   18514:	beq	18524 <__assert_fail@plt+0x7320>
   18518:	ldr	r4, [sp]
   1851c:	add	sp, sp, #4
   18520:	pop	{pc}		; (ldr pc, [sp], #4)
   18524:	bl	1897c <__assert_fail@plt+0x7778>
   18528:	str	r4, [sp, #-8]!
   1852c:	str	lr, [sp, #4]
   18530:	bl	195f4 <__assert_fail@plt+0x83f0>
   18534:	cmp	r0, #0
   18538:	beq	18548 <__assert_fail@plt+0x7344>
   1853c:	ldr	r4, [sp]
   18540:	add	sp, sp, #4
   18544:	pop	{pc}		; (ldr pc, [sp], #4)
   18548:	bl	1897c <__assert_fail@plt+0x7778>
   1854c:	str	r4, [sp, #-8]!
   18550:	str	lr, [sp, #4]
   18554:	bl	195f4 <__assert_fail@plt+0x83f0>
   18558:	cmp	r0, #0
   1855c:	beq	1856c <__assert_fail@plt+0x7368>
   18560:	ldr	r4, [sp]
   18564:	add	sp, sp, #4
   18568:	pop	{pc}		; (ldr pc, [sp], #4)
   1856c:	bl	1897c <__assert_fail@plt+0x7778>
   18570:	strd	r4, [sp, #-16]!
   18574:	mov	r5, r0
   18578:	mov	r4, r1
   1857c:	str	r6, [sp, #8]
   18580:	str	lr, [sp, #12]
   18584:	bl	19630 <__assert_fail@plt+0x842c>
   18588:	cmp	r0, #0
   1858c:	beq	185a0 <__assert_fail@plt+0x739c>
   18590:	ldrd	r4, [sp]
   18594:	ldr	r6, [sp, #8]
   18598:	add	sp, sp, #12
   1859c:	pop	{pc}		; (ldr pc, [sp], #4)
   185a0:	adds	r4, r4, #0
   185a4:	movne	r4, #1
   185a8:	cmp	r5, #0
   185ac:	moveq	r4, #1
   185b0:	cmp	r4, #0
   185b4:	beq	18590 <__assert_fail@plt+0x738c>
   185b8:	bl	1897c <__assert_fail@plt+0x7778>
   185bc:	cmp	r1, #0
   185c0:	orreq	r1, r1, #1
   185c4:	str	r4, [sp, #-8]!
   185c8:	str	lr, [sp, #4]
   185cc:	bl	19630 <__assert_fail@plt+0x842c>
   185d0:	cmp	r0, #0
   185d4:	beq	185e4 <__assert_fail@plt+0x73e0>
   185d8:	ldr	r4, [sp]
   185dc:	add	sp, sp, #4
   185e0:	pop	{pc}		; (ldr pc, [sp], #4)
   185e4:	bl	1897c <__assert_fail@plt+0x7778>
   185e8:	strd	r4, [sp, #-16]!
   185ec:	mov	r4, r0
   185f0:	mov	r5, r2
   185f4:	str	r6, [sp, #8]
   185f8:	mov	r6, r1
   185fc:	str	lr, [sp, #12]
   18600:	bl	197cc <__assert_fail@plt+0x85c8>
   18604:	cmp	r0, #0
   18608:	beq	1861c <__assert_fail@plt+0x7418>
   1860c:	ldrd	r4, [sp]
   18610:	ldr	r6, [sp, #8]
   18614:	add	sp, sp, #12
   18618:	pop	{pc}		; (ldr pc, [sp], #4)
   1861c:	cmp	r4, #0
   18620:	beq	18630 <__assert_fail@plt+0x742c>
   18624:	cmp	r6, #0
   18628:	cmpne	r5, #0
   1862c:	beq	1860c <__assert_fail@plt+0x7408>
   18630:	bl	1897c <__assert_fail@plt+0x7778>
   18634:	b	185e8 <__assert_fail@plt+0x73e4>
   18638:	cmp	r2, #0
   1863c:	cmpne	r1, #0
   18640:	str	r4, [sp, #-8]!
   18644:	moveq	r2, #1
   18648:	str	lr, [sp, #4]
   1864c:	moveq	r1, r2
   18650:	bl	197cc <__assert_fail@plt+0x85c8>
   18654:	cmp	r0, #0
   18658:	beq	18668 <__assert_fail@plt+0x7464>
   1865c:	ldr	r4, [sp]
   18660:	add	sp, sp, #4
   18664:	pop	{pc}		; (ldr pc, [sp], #4)
   18668:	bl	1897c <__assert_fail@plt+0x7778>
   1866c:	mov	r2, r1
   18670:	mov	r1, r0
   18674:	mov	r0, #0
   18678:	b	185e8 <__assert_fail@plt+0x73e4>
   1867c:	mov	r2, r1
   18680:	mov	r1, r0
   18684:	mov	r0, #0
   18688:	b	18638 <__assert_fail@plt+0x7434>
   1868c:	cmp	r0, #0
   18690:	strd	r4, [sp, #-16]!
   18694:	mov	r5, r1
   18698:	ldr	r4, [r1]
   1869c:	str	r6, [sp, #8]
   186a0:	str	lr, [sp, #12]
   186a4:	beq	186d4 <__assert_fail@plt+0x74d0>
   186a8:	lsr	r3, r4, #1
   186ac:	add	r3, r3, #1
   186b0:	adds	r4, r4, r3
   186b4:	bcs	186f0 <__assert_fail@plt+0x74ec>
   186b8:	mov	r1, r4
   186bc:	bl	185e8 <__assert_fail@plt+0x73e4>
   186c0:	ldr	r6, [sp, #8]
   186c4:	str	r4, [r5]
   186c8:	ldrd	r4, [sp]
   186cc:	add	sp, sp, #12
   186d0:	pop	{pc}		; (ldr pc, [sp], #4)
   186d4:	cmp	r4, #0
   186d8:	bne	186b8 <__assert_fail@plt+0x74b4>
   186dc:	mov	r4, #64	; 0x40
   186e0:	udiv	r4, r4, r2
   186e4:	cmp	r2, #64	; 0x40
   186e8:	addhi	r4, r4, #1
   186ec:	b	186b8 <__assert_fail@plt+0x74b4>
   186f0:	bl	1897c <__assert_fail@plt+0x7778>
   186f4:	mov	r2, #1
   186f8:	b	1868c <__assert_fail@plt+0x7488>
   186fc:	ldr	ip, [r1]
   18700:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18704:	mov	r5, r1
   18708:	strd	r6, [sp, #8]
   1870c:	str	lr, [sp, #28]
   18710:	strd	r8, [sp, #16]
   18714:	asr	lr, ip, #1
   18718:	ldr	r8, [sp, #32]
   1871c:	str	sl, [sp, #24]
   18720:	adds	r4, ip, lr
   18724:	mvn	lr, r3
   18728:	lsr	lr, lr, #31
   1872c:	mvnvs	r4, #-2147483648	; 0x80000000
   18730:	cmp	r3, r4
   18734:	movge	r1, #0
   18738:	andlt	r1, lr, #1
   1873c:	cmp	r1, #0
   18740:	movne	r4, r3
   18744:	smull	r6, r7, r4, r8
   18748:	cmp	r7, r6, asr #31
   1874c:	bne	187d4 <__assert_fail@plt+0x75d0>
   18750:	cmp	r6, #63	; 0x3f
   18754:	mov	r1, r6
   18758:	ble	187bc <__assert_fail@plt+0x75b8>
   1875c:	cmp	r0, #0
   18760:	sub	r6, r4, ip
   18764:	streq	r0, [r5]
   18768:	cmp	r6, r2
   1876c:	bge	1879c <__assert_fail@plt+0x7598>
   18770:	adds	r4, ip, r2
   18774:	bvs	187d0 <__assert_fail@plt+0x75cc>
   18778:	cmp	r4, r3
   1877c:	movle	r3, #0
   18780:	andgt	r3, lr, #1
   18784:	cmp	r3, #0
   18788:	bne	187d0 <__assert_fail@plt+0x75cc>
   1878c:	smull	r8, r9, r4, r8
   18790:	cmp	r9, r8, asr #31
   18794:	mov	r1, r8
   18798:	bne	187d0 <__assert_fail@plt+0x75cc>
   1879c:	bl	18570 <__assert_fail@plt+0x736c>
   187a0:	ldrd	r6, [sp, #8]
   187a4:	ldrd	r8, [sp, #16]
   187a8:	ldr	sl, [sp, #24]
   187ac:	str	r4, [r5]
   187b0:	ldrd	r4, [sp]
   187b4:	add	sp, sp, #28
   187b8:	pop	{pc}		; (ldr pc, [sp], #4)
   187bc:	mov	r6, #64	; 0x40
   187c0:	sdiv	r4, r6, r8
   187c4:	mls	r1, r8, r4, r6
   187c8:	sub	r1, r6, r1
   187cc:	b	1875c <__assert_fail@plt+0x7558>
   187d0:	bl	1897c <__assert_fail@plt+0x7778>
   187d4:	mvn	r6, #-2147483648	; 0x80000000
   187d8:	b	187c0 <__assert_fail@plt+0x75bc>
   187dc:	mov	r1, #1
   187e0:	str	r4, [sp, #-8]!
   187e4:	str	lr, [sp, #4]
   187e8:	bl	19580 <__assert_fail@plt+0x837c>
   187ec:	cmp	r0, #0
   187f0:	beq	18800 <__assert_fail@plt+0x75fc>
   187f4:	ldr	r4, [sp]
   187f8:	add	sp, sp, #4
   187fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18800:	bl	1897c <__assert_fail@plt+0x7778>
   18804:	mov	r1, #1
   18808:	str	r4, [sp, #-8]!
   1880c:	str	lr, [sp, #4]
   18810:	bl	19580 <__assert_fail@plt+0x837c>
   18814:	cmp	r0, #0
   18818:	beq	18828 <__assert_fail@plt+0x7624>
   1881c:	ldr	r4, [sp]
   18820:	add	sp, sp, #4
   18824:	pop	{pc}		; (ldr pc, [sp], #4)
   18828:	bl	1897c <__assert_fail@plt+0x7778>
   1882c:	str	r4, [sp, #-8]!
   18830:	str	lr, [sp, #4]
   18834:	bl	19580 <__assert_fail@plt+0x837c>
   18838:	cmp	r0, #0
   1883c:	beq	1884c <__assert_fail@plt+0x7648>
   18840:	ldr	r4, [sp]
   18844:	add	sp, sp, #4
   18848:	pop	{pc}		; (ldr pc, [sp], #4)
   1884c:	bl	1897c <__assert_fail@plt+0x7778>
   18850:	str	r4, [sp, #-8]!
   18854:	str	lr, [sp, #4]
   18858:	bl	19580 <__assert_fail@plt+0x837c>
   1885c:	cmp	r0, #0
   18860:	beq	18870 <__assert_fail@plt+0x766c>
   18864:	ldr	r4, [sp]
   18868:	add	sp, sp, #4
   1886c:	pop	{pc}		; (ldr pc, [sp], #4)
   18870:	bl	1897c <__assert_fail@plt+0x7778>
   18874:	strd	r4, [sp, #-16]!
   18878:	mov	r4, r1
   1887c:	str	r6, [sp, #8]
   18880:	mov	r6, r0
   18884:	mov	r0, r1
   18888:	str	lr, [sp, #12]
   1888c:	bl	195f4 <__assert_fail@plt+0x83f0>
   18890:	subs	r5, r0, #0
   18894:	beq	188b8 <__assert_fail@plt+0x76b4>
   18898:	mov	r2, r4
   1889c:	mov	r1, r6
   188a0:	bl	10f70 <memcpy@plt>
   188a4:	mov	r0, r5
   188a8:	ldrd	r4, [sp]
   188ac:	ldr	r6, [sp, #8]
   188b0:	add	sp, sp, #12
   188b4:	pop	{pc}		; (ldr pc, [sp], #4)
   188b8:	bl	1897c <__assert_fail@plt+0x7778>
   188bc:	strd	r4, [sp, #-16]!
   188c0:	mov	r4, r1
   188c4:	str	r6, [sp, #8]
   188c8:	mov	r6, r0
   188cc:	mov	r0, r1
   188d0:	str	lr, [sp, #12]
   188d4:	bl	195f4 <__assert_fail@plt+0x83f0>
   188d8:	subs	r5, r0, #0
   188dc:	beq	18900 <__assert_fail@plt+0x76fc>
   188e0:	mov	r2, r4
   188e4:	mov	r1, r6
   188e8:	bl	10f70 <memcpy@plt>
   188ec:	mov	r0, r5
   188f0:	ldrd	r4, [sp]
   188f4:	ldr	r6, [sp, #8]
   188f8:	add	sp, sp, #12
   188fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18900:	bl	1897c <__assert_fail@plt+0x7778>
   18904:	strd	r4, [sp, #-16]!
   18908:	mov	r4, r1
   1890c:	str	r6, [sp, #8]
   18910:	mov	r6, r0
   18914:	add	r0, r1, #1
   18918:	str	lr, [sp, #12]
   1891c:	bl	195f4 <__assert_fail@plt+0x83f0>
   18920:	subs	r5, r0, #0
   18924:	beq	18950 <__assert_fail@plt+0x774c>
   18928:	mov	r3, #0
   1892c:	mov	r1, r6
   18930:	mov	r2, r4
   18934:	strb	r3, [r5, r4]
   18938:	bl	10f70 <memcpy@plt>
   1893c:	mov	r0, r5
   18940:	ldrd	r4, [sp]
   18944:	ldr	r6, [sp, #8]
   18948:	add	sp, sp, #12
   1894c:	pop	{pc}		; (ldr pc, [sp], #4)
   18950:	bl	1897c <__assert_fail@plt+0x7778>
   18954:	str	r4, [sp, #-8]!
   18958:	mov	r4, r0
   1895c:	str	lr, [sp, #4]
   18960:	bl	110c0 <strlen@plt>
   18964:	add	r1, r0, #1
   18968:	mov	r0, r4
   1896c:	ldr	r4, [sp]
   18970:	ldr	lr, [sp, #4]
   18974:	add	sp, sp, #8
   18978:	b	18874 <__assert_fail@plt+0x7670>
   1897c:	movw	r3, #49444	; 0xc124
   18980:	movt	r3, #2
   18984:	str	r4, [sp, #-8]!
   18988:	ldr	r4, [r3]
   1898c:	mov	r2, #5
   18990:	movw	r1, #46632	; 0xb628
   18994:	movt	r1, #1
   18998:	mov	r0, #0
   1899c:	str	lr, [sp, #4]
   189a0:	bl	10fc4 <dcgettext@plt>
   189a4:	mov	r3, r0
   189a8:	movw	r2, #45552	; 0xb1f0
   189ac:	movt	r2, #1
   189b0:	mov	r1, #0
   189b4:	mov	r0, r4
   189b8:	bl	1103c <error@plt>
   189bc:	bl	111ec <abort@plt>
   189c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   189c4:	movw	r4, #49540	; 0xc184
   189c8:	movt	r4, #2
   189cc:	mov	r3, r1
   189d0:	mov	r2, r0
   189d4:	ldr	r0, [r4]
   189d8:	mov	r1, #1
   189dc:	strd	r6, [sp, #8]
   189e0:	str	r8, [sp, #16]
   189e4:	str	lr, [sp, #20]
   189e8:	bl	11078 <__vfprintf_chk@plt>
   189ec:	subs	r5, r0, #0
   189f0:	blt	18a0c <__assert_fail@plt+0x7808>
   189f4:	mov	r0, r5
   189f8:	ldrd	r4, [sp]
   189fc:	ldrd	r6, [sp, #8]
   18a00:	ldr	r8, [sp, #16]
   18a04:	add	sp, sp, #20
   18a08:	pop	{pc}		; (ldr pc, [sp], #4)
   18a0c:	ldr	r0, [r4]
   18a10:	bl	10f58 <ferror@plt>
   18a14:	subs	r4, r0, #0
   18a18:	bne	189f4 <__assert_fail@plt+0x77f0>
   18a1c:	movw	r3, #49444	; 0xc124
   18a20:	movt	r3, #2
   18a24:	ldr	r6, [r3]
   18a28:	bl	110d8 <__errno_location@plt>
   18a2c:	ldr	r7, [r0]
   18a30:	mov	r2, #5
   18a34:	mov	r0, r4
   18a38:	movw	r1, #46652	; 0xb63c
   18a3c:	movt	r1, #1
   18a40:	bl	10fc4 <dcgettext@plt>
   18a44:	mov	r2, r0
   18a48:	mov	r0, r6
   18a4c:	mov	r1, r7
   18a50:	bl	1103c <error@plt>
   18a54:	b	189f4 <__assert_fail@plt+0x77f0>
   18a58:	push	{r0, r1, r2, r3}
   18a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   18a60:	sub	sp, sp, #12
   18a64:	add	r3, sp, #20
   18a68:	ldr	r0, [sp, #16]
   18a6c:	mov	r1, r3
   18a70:	str	r3, [sp, #4]
   18a74:	bl	189c0 <__assert_fail@plt+0x77bc>
   18a78:	add	sp, sp, #12
   18a7c:	pop	{lr}		; (ldr lr, [sp], #4)
   18a80:	add	sp, sp, #16
   18a84:	bx	lr
   18a88:	mov	r3, r2
   18a8c:	mov	r2, r1
   18a90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18a94:	mov	r1, #1
   18a98:	mov	r5, r0
   18a9c:	strd	r6, [sp, #8]
   18aa0:	str	r8, [sp, #16]
   18aa4:	str	lr, [sp, #20]
   18aa8:	bl	11078 <__vfprintf_chk@plt>
   18aac:	subs	r4, r0, #0
   18ab0:	blt	18acc <__assert_fail@plt+0x78c8>
   18ab4:	mov	r0, r4
   18ab8:	ldrd	r4, [sp]
   18abc:	ldrd	r6, [sp, #8]
   18ac0:	ldr	r8, [sp, #16]
   18ac4:	add	sp, sp, #20
   18ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   18acc:	mov	r0, r5
   18ad0:	bl	10f58 <ferror@plt>
   18ad4:	subs	r5, r0, #0
   18ad8:	bne	18ab4 <__assert_fail@plt+0x78b0>
   18adc:	movw	r3, #49444	; 0xc124
   18ae0:	movt	r3, #2
   18ae4:	ldr	r6, [r3]
   18ae8:	bl	110d8 <__errno_location@plt>
   18aec:	ldr	r7, [r0]
   18af0:	mov	r2, #5
   18af4:	mov	r0, r5
   18af8:	movw	r1, #46652	; 0xb63c
   18afc:	movt	r1, #1
   18b00:	bl	10fc4 <dcgettext@plt>
   18b04:	mov	r2, r0
   18b08:	mov	r0, r6
   18b0c:	mov	r1, r7
   18b10:	bl	1103c <error@plt>
   18b14:	b	18ab4 <__assert_fail@plt+0x78b0>
   18b18:	push	{r1, r2, r3}
   18b1c:	push	{lr}		; (str lr, [sp, #-4]!)
   18b20:	sub	sp, sp, #8
   18b24:	ldr	r1, [sp, #12]
   18b28:	add	r3, sp, #16
   18b2c:	mov	r2, r3
   18b30:	str	r3, [sp, #4]
   18b34:	bl	18a88 <__assert_fail@plt+0x7884>
   18b38:	add	sp, sp, #8
   18b3c:	pop	{lr}		; (ldr lr, [sp], #4)
   18b40:	add	sp, sp, #12
   18b44:	bx	lr
   18b48:	sub	r0, r0, #1
   18b4c:	movw	ip, #49444	; 0xc124
   18b50:	movt	ip, #2
   18b54:	cmp	r0, #3
   18b58:	push	{lr}		; (str lr, [sp, #-4]!)
   18b5c:	sub	sp, sp, #20
   18b60:	ldr	r5, [ip]
   18b64:	bhi	18bb4 <__assert_fail@plt+0x79b0>
   18b68:	movw	ip, #46684	; 0xb65c
   18b6c:	movt	ip, #1
   18b70:	cmp	r1, #0
   18b74:	ldr	r0, [ip, r0, lsl #2]
   18b78:	blt	18bb8 <__assert_fail@plt+0x79b4>
   18b7c:	ldr	r6, [r3, r1, lsl #4]
   18b80:	movw	r4, #46700	; 0xb66c
   18b84:	movt	r4, #1
   18b88:	mov	r1, r0
   18b8c:	mov	r2, #5
   18b90:	mov	r0, #0
   18b94:	bl	10fc4 <dcgettext@plt>
   18b98:	ldr	ip, [sp, #24]
   18b9c:	mov	r2, r0
   18ba0:	mov	r3, r4
   18ba4:	mov	r0, r5
   18ba8:	mov	r1, #0
   18bac:	stm	sp, {r6, ip}
   18bb0:	bl	1103c <error@plt>
   18bb4:	bl	111ec <abort@plt>
   18bb8:	mov	r3, #0
   18bbc:	movw	r4, #46700	; 0xb66c
   18bc0:	movt	r4, #1
   18bc4:	add	r6, sp, #12
   18bc8:	strb	r2, [sp, #12]
   18bcc:	sub	r4, r4, r1
   18bd0:	strb	r3, [sp, #13]
   18bd4:	b	18b88 <__assert_fail@plt+0x7984>
   18bd8:	cmp	r2, #36	; 0x24
   18bdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18be0:	strd	r6, [sp, #8]
   18be4:	strd	r8, [sp, #16]
   18be8:	strd	sl, [sp, #24]
   18bec:	str	lr, [sp, #32]
   18bf0:	sub	sp, sp, #36	; 0x24
   18bf4:	bhi	19484 <__assert_fail@plt+0x8280>
   18bf8:	cmp	r1, #0
   18bfc:	mov	r8, r2
   18c00:	mov	r6, r0
   18c04:	mov	r5, r1
   18c08:	mov	sl, r3
   18c0c:	addeq	r5, sp, #28
   18c10:	bl	110d8 <__errno_location@plt>
   18c14:	mov	r3, #0
   18c18:	mov	r7, r0
   18c1c:	str	r3, [r0]
   18c20:	bl	110a8 <__ctype_b_loc@plt>
   18c24:	ldrb	r3, [r6]
   18c28:	mov	r2, r6
   18c2c:	ldr	r0, [r0]
   18c30:	b	18c38 <__assert_fail@plt+0x7a34>
   18c34:	ldrb	r3, [r2, #1]!
   18c38:	lsl	r1, r3, #1
   18c3c:	ldrh	r4, [r0, r1]
   18c40:	ands	r4, r4, #8192	; 0x2000
   18c44:	bne	18c34 <__assert_fail@plt+0x7a30>
   18c48:	cmp	r3, #45	; 0x2d
   18c4c:	beq	18cec <__assert_fail@plt+0x7ae8>
   18c50:	mov	r2, r8
   18c54:	mov	r3, r4
   18c58:	mov	r1, r5
   18c5c:	mov	r0, r6
   18c60:	bl	10f7c <__strtoull_internal@plt>
   18c64:	ldr	fp, [r5]
   18c68:	mov	r9, r0
   18c6c:	mov	r8, r1
   18c70:	cmp	fp, r6
   18c74:	beq	18cd4 <__assert_fail@plt+0x7ad0>
   18c78:	ldr	r4, [r7]
   18c7c:	cmp	r4, #0
   18c80:	bne	18cc4 <__assert_fail@plt+0x7ac0>
   18c84:	ldr	r3, [sp, #72]	; 0x48
   18c88:	cmp	r3, #0
   18c8c:	beq	18c9c <__assert_fail@plt+0x7a98>
   18c90:	ldrb	r6, [fp]
   18c94:	cmp	r6, #0
   18c98:	bne	18fdc <__assert_fail@plt+0x7dd8>
   18c9c:	str	r9, [sl]
   18ca0:	str	r8, [sl, #4]
   18ca4:	mov	r0, r4
   18ca8:	add	sp, sp, #36	; 0x24
   18cac:	ldrd	r4, [sp]
   18cb0:	ldrd	r6, [sp, #8]
   18cb4:	ldrd	r8, [sp, #16]
   18cb8:	ldrd	sl, [sp, #24]
   18cbc:	add	sp, sp, #32
   18cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   18cc4:	cmp	r4, #34	; 0x22
   18cc8:	bne	18cec <__assert_fail@plt+0x7ae8>
   18ccc:	mov	r4, #1
   18cd0:	b	18c84 <__assert_fail@plt+0x7a80>
   18cd4:	ldr	r3, [sp, #72]	; 0x48
   18cd8:	cmp	r3, #0
   18cdc:	beq	18cec <__assert_fail@plt+0x7ae8>
   18ce0:	ldrb	r6, [r6]
   18ce4:	cmp	r6, #0
   18ce8:	bne	18cf4 <__assert_fail@plt+0x7af0>
   18cec:	mov	r4, #4
   18cf0:	b	18ca4 <__assert_fail@plt+0x7aa0>
   18cf4:	mov	r1, r6
   18cf8:	mov	r0, r3
   18cfc:	bl	110cc <strchr@plt>
   18d00:	cmp	r0, #0
   18d04:	movne	r9, #1
   18d08:	movne	r8, #0
   18d0c:	beq	18cec <__assert_fail@plt+0x7ae8>
   18d10:	sub	r3, r6, #69	; 0x45
   18d14:	cmp	r3, #47	; 0x2f
   18d18:	ldrls	pc, [pc, r3, lsl #2]
   18d1c:	b	18e24 <__assert_fail@plt+0x7c20>
   18d20:	andeq	r8, r1, r0, ror #27
   18d24:	andeq	r8, r1, r4, lsr #28
   18d28:	andeq	r8, r1, r0, ror #27
   18d2c:	andeq	r8, r1, r4, lsr #28
   18d30:	andeq	r8, r1, r4, lsr #28
   18d34:	andeq	r8, r1, r4, lsr #28
   18d38:	andeq	r8, r1, r0, ror #27
   18d3c:	andeq	r8, r1, r4, lsr #28
   18d40:	andeq	r8, r1, r0, ror #27
   18d44:	andeq	r8, r1, r4, lsr #28
   18d48:	andeq	r8, r1, r4, lsr #28
   18d4c:	andeq	r8, r1, r0, ror #27
   18d50:	andeq	r8, r1, r4, lsr #28
   18d54:	andeq	r8, r1, r4, lsr #28
   18d58:	andeq	r8, r1, r4, lsr #28
   18d5c:	andeq	r8, r1, r0, ror #27
   18d60:	andeq	r8, r1, r4, lsr #28
   18d64:	andeq	r8, r1, r4, lsr #28
   18d68:	andeq	r8, r1, r4, lsr #28
   18d6c:	andeq	r8, r1, r4, lsr #28
   18d70:	andeq	r8, r1, r0, ror #27
   18d74:	andeq	r8, r1, r0, ror #27
   18d78:	andeq	r8, r1, r4, lsr #28
   18d7c:	andeq	r8, r1, r4, lsr #28
   18d80:	andeq	r8, r1, r4, lsr #28
   18d84:	andeq	r8, r1, r4, lsr #28
   18d88:	andeq	r8, r1, r4, lsr #28
   18d8c:	andeq	r8, r1, r4, lsr #28
   18d90:	andeq	r8, r1, r4, lsr #28
   18d94:	andeq	r8, r1, r4, lsr #28
   18d98:	andeq	r8, r1, r4, lsr #28
   18d9c:	andeq	r8, r1, r4, lsr #28
   18da0:	andeq	r8, r1, r4, lsr #28
   18da4:	andeq	r8, r1, r4, lsr #28
   18da8:	andeq	r8, r1, r0, ror #27
   18dac:	andeq	r8, r1, r4, lsr #28
   18db0:	andeq	r8, r1, r4, lsr #28
   18db4:	andeq	r8, r1, r4, lsr #28
   18db8:	andeq	r8, r1, r0, ror #27
   18dbc:	andeq	r8, r1, r4, lsr #28
   18dc0:	andeq	r8, r1, r0, ror #27
   18dc4:	andeq	r8, r1, r4, lsr #28
   18dc8:	andeq	r8, r1, r4, lsr #28
   18dcc:	andeq	r8, r1, r4, lsr #28
   18dd0:	andeq	r8, r1, r4, lsr #28
   18dd4:	andeq	r8, r1, r4, lsr #28
   18dd8:	andeq	r8, r1, r4, lsr #28
   18ddc:	andeq	r8, r1, r0, ror #27
   18de0:	mov	r1, #48	; 0x30
   18de4:	ldr	r0, [sp, #72]	; 0x48
   18de8:	bl	110cc <strchr@plt>
   18dec:	cmp	r0, #0
   18df0:	beq	18e24 <__assert_fail@plt+0x7c20>
   18df4:	ldrb	r3, [fp, #1]
   18df8:	cmp	r3, #68	; 0x44
   18dfc:	beq	19350 <__assert_fail@plt+0x814c>
   18e00:	cmp	r3, #105	; 0x69
   18e04:	beq	18ff4 <__assert_fail@plt+0x7df0>
   18e08:	cmp	r3, #66	; 0x42
   18e0c:	moveq	r3, #2
   18e10:	movne	r3, #1
   18e14:	moveq	r7, #1000	; 0x3e8
   18e18:	movne	r7, #1024	; 0x400
   18e1c:	str	r3, [sp, #4]
   18e20:	b	18e30 <__assert_fail@plt+0x7c2c>
   18e24:	mov	r3, #1
   18e28:	mov	r7, #1024	; 0x400
   18e2c:	str	r3, [sp, #4]
   18e30:	sub	r6, r6, #66	; 0x42
   18e34:	cmp	r6, #53	; 0x35
   18e38:	ldrls	pc, [pc, r6, lsl #2]
   18e3c:	b	18fa0 <__assert_fail@plt+0x7d9c>
   18e40:	strdeq	r9, [r1], -r8
   18e44:	andeq	r8, r1, r0, lsr #31
   18e48:	andeq	r8, r1, r0, lsr #31
   18e4c:	andeq	r9, r1, r4, lsl #2
   18e50:	andeq	r8, r1, r0, lsr #31
   18e54:	andeq	r8, r1, r8, lsl pc
   18e58:	andeq	r8, r1, r0, lsr #31
   18e5c:	andeq	r8, r1, r0, lsr #31
   18e60:	andeq	r8, r1, r0, lsr #31
   18e64:	andeq	r8, r1, r8, lsr #31
   18e68:	andeq	r8, r1, r0, lsr #31
   18e6c:	andeq	r9, r1, r4, lsr #5
   18e70:	andeq	r8, r1, r0, lsr #31
   18e74:	andeq	r8, r1, r0, lsr #31
   18e78:	strdeq	r9, [r1], -r4
   18e7c:	andeq	r8, r1, r0, lsr #31
   18e80:	andeq	r8, r1, r0, lsr #31
   18e84:	andeq	r8, r1, r0, lsr #31
   18e88:	andeq	r9, r1, ip, ror r1
   18e8c:	andeq	r8, r1, r0, lsr #31
   18e90:	andeq	r8, r1, r0, lsr #31
   18e94:	andeq	r8, r1, r0, lsr #31
   18e98:	andeq	r8, r1, r0, lsr #31
   18e9c:	andeq	r9, r1, ip, lsl #1
   18ea0:	andeq	r9, r1, r0, lsl r0
   18ea4:	andeq	r8, r1, r0, lsr #31
   18ea8:	andeq	r8, r1, r0, lsr #31
   18eac:	andeq	r8, r1, r0, lsr #31
   18eb0:	andeq	r8, r1, r0, lsr #31
   18eb4:	andeq	r8, r1, r0, lsr #31
   18eb8:	andeq	r8, r1, r0, lsr #31
   18ebc:	andeq	r8, r1, r0, lsr #31
   18ec0:	andeq	r9, r1, r4, lsl #5
   18ec4:	andeq	r8, r1, r8, lsl #31
   18ec8:	andeq	r8, r1, r0, lsr #31
   18ecc:	andeq	r8, r1, r0, lsr #31
   18ed0:	andeq	r8, r1, r0, lsr #31
   18ed4:	andeq	r8, r1, r8, lsl pc
   18ed8:	andeq	r8, r1, r0, lsr #31
   18edc:	andeq	r8, r1, r0, lsr #31
   18ee0:	andeq	r8, r1, r0, lsr #31
   18ee4:	andeq	r8, r1, r8, lsr #31
   18ee8:	andeq	r8, r1, r0, lsr #31
   18eec:	andeq	r9, r1, r4, lsr #5
   18ef0:	andeq	r8, r1, r0, lsr #31
   18ef4:	andeq	r8, r1, r0, lsr #31
   18ef8:	andeq	r8, r1, r0, lsr #31
   18efc:	andeq	r8, r1, r0, lsr #31
   18f00:	andeq	r8, r1, r0, lsr #31
   18f04:	andeq	r8, r1, r0, lsr #31
   18f08:	andeq	r9, r1, ip, ror r1
   18f0c:	andeq	r8, r1, r0, lsr #31
   18f10:	andeq	r8, r1, r0, lsr #31
   18f14:	andeq	r9, r1, ip, ror #4
   18f18:	asr	r3, r7, #31
   18f1c:	mov	r2, r7
   18f20:	cmp	r8, #0
   18f24:	umull	r0, r1, r9, r7
   18f28:	mov	ip, #0
   18f2c:	strd	r2, [sp, #8]
   18f30:	bne	19384 <__assert_fail@plt+0x8180>
   18f34:	mov	r2, r0
   18f38:	mov	r3, r1
   18f3c:	cmp	ip, #0
   18f40:	bne	18fcc <__assert_fail@plt+0x7dc8>
   18f44:	cmp	r3, #0
   18f48:	mov	lr, ip
   18f4c:	bne	193e8 <__assert_fail@plt+0x81e4>
   18f50:	umull	r2, r3, r2, r7
   18f54:	mov	ip, r2
   18f58:	mov	r1, r3
   18f5c:	subs	r0, lr, #0
   18f60:	bne	18fcc <__assert_fail@plt+0x7dc8>
   18f64:	cmp	r1, #0
   18f68:	bne	193c8 <__assert_fail@plt+0x81c4>
   18f6c:	umull	r2, r3, ip, r7
   18f70:	mov	r6, r2
   18f74:	mov	r2, r3
   18f78:	cmp	r0, #0
   18f7c:	mov	r9, r6
   18f80:	mov	r8, r2
   18f84:	bne	18fcc <__assert_fail@plt+0x7dc8>
   18f88:	ldr	r2, [sp, #4]
   18f8c:	add	r3, fp, r2
   18f90:	str	r3, [r5]
   18f94:	ldrb	r3, [fp, r2]
   18f98:	cmp	r3, #0
   18f9c:	beq	18c9c <__assert_fail@plt+0x7a98>
   18fa0:	orr	r4, r4, #2
   18fa4:	b	18c9c <__assert_fail@plt+0x7a98>
   18fa8:	cmp	r8, #0
   18fac:	umull	r2, r3, r9, r7
   18fb0:	mov	ip, #0
   18fb4:	asr	r1, r7, #31
   18fb8:	bne	19320 <__assert_fail@plt+0x811c>
   18fbc:	mov	r9, r2
   18fc0:	mov	r8, r3
   18fc4:	cmp	ip, #0
   18fc8:	beq	18f88 <__assert_fail@plt+0x7d84>
   18fcc:	mvn	r9, #0
   18fd0:	mov	r4, #1
   18fd4:	mov	r8, r9
   18fd8:	b	18f88 <__assert_fail@plt+0x7d84>
   18fdc:	mov	r1, r6
   18fe0:	ldr	r0, [sp, #72]	; 0x48
   18fe4:	bl	110cc <strchr@plt>
   18fe8:	cmp	r0, #0
   18fec:	bne	18d10 <__assert_fail@plt+0x7b0c>
   18ff0:	b	18fa0 <__assert_fail@plt+0x7d9c>
   18ff4:	ldrb	r3, [fp, #2]
   18ff8:	mov	r7, #1024	; 0x400
   18ffc:	cmp	r3, #66	; 0x42
   19000:	movne	r3, #1
   19004:	moveq	r3, #3
   19008:	str	r3, [sp, #4]
   1900c:	b	18e30 <__assert_fail@plt+0x7c2c>
   19010:	asr	r3, r7, #31
   19014:	mov	r2, r7
   19018:	mov	ip, #0
   1901c:	mov	r0, #7
   19020:	mov	lr, ip
   19024:	mov	r6, r4
   19028:	strd	r2, [sp, #8]
   1902c:	str	r5, [sp, #16]
   19030:	b	1905c <__assert_fail@plt+0x7e58>
   19034:	umull	r2, r3, r9, r7
   19038:	mov	r9, r2
   1903c:	mov	r8, r3
   19040:	cmp	r1, #0
   19044:	beq	19054 <__assert_fail@plt+0x7e50>
   19048:	mvn	r9, #0
   1904c:	mov	ip, #1
   19050:	mov	r8, r9
   19054:	subs	r0, r0, #1
   19058:	beq	19344 <__assert_fail@plt+0x8140>
   1905c:	cmp	r8, #0
   19060:	mov	r1, #0
   19064:	beq	19034 <__assert_fail@plt+0x7e30>
   19068:	umull	r4, r5, r9, r7
   1906c:	mov	r3, lr
   19070:	mov	r2, r5
   19074:	umlal	r2, r3, r8, r7
   19078:	cmp	r3, #0
   1907c:	bne	194a4 <__assert_fail@plt+0x82a0>
   19080:	mov	r9, r4
   19084:	mov	r8, r2
   19088:	b	19040 <__assert_fail@plt+0x7e3c>
   1908c:	asr	r3, r7, #31
   19090:	mov	r2, r7
   19094:	mov	r6, #0
   19098:	mov	lr, #8
   1909c:	mov	r0, r4
   190a0:	mov	ip, r5
   190a4:	strd	r2, [sp, #8]
   190a8:	b	190d4 <__assert_fail@plt+0x7ed0>
   190ac:	umull	r2, r3, r9, r7
   190b0:	mov	r9, r2
   190b4:	mov	r8, r3
   190b8:	cmp	r1, #0
   190bc:	beq	190cc <__assert_fail@plt+0x7ec8>
   190c0:	mvn	r9, #0
   190c4:	mov	r6, #1
   190c8:	mov	r8, r9
   190cc:	subs	lr, lr, #1
   190d0:	beq	19314 <__assert_fail@plt+0x8110>
   190d4:	cmp	r8, #0
   190d8:	mov	r1, #0
   190dc:	beq	190ac <__assert_fail@plt+0x7ea8>
   190e0:	umull	r4, r5, r9, r7
   190e4:	mov	r3, #0
   190e8:	mov	r2, r5
   190ec:	umlal	r2, r3, r8, r7
   190f0:	cmp	r3, #0
   190f4:	bne	194fc <__assert_fail@plt+0x82f8>
   190f8:	mov	r9, r4
   190fc:	mov	r8, r2
   19100:	b	190b8 <__assert_fail@plt+0x7eb4>
   19104:	asr	r3, r7, #31
   19108:	mov	r2, r7
   1910c:	mov	r6, #0
   19110:	mov	lr, #6
   19114:	mov	r0, r4
   19118:	mov	ip, r5
   1911c:	strd	r2, [sp, #8]
   19120:	b	1914c <__assert_fail@plt+0x7f48>
   19124:	umull	r2, r3, r9, r7
   19128:	mov	r9, r2
   1912c:	mov	r8, r3
   19130:	cmp	r1, #0
   19134:	beq	19144 <__assert_fail@plt+0x7f40>
   19138:	mvn	r9, #0
   1913c:	mov	r6, #1
   19140:	mov	r8, r9
   19144:	subs	lr, lr, #1
   19148:	beq	19314 <__assert_fail@plt+0x8110>
   1914c:	cmp	r8, #0
   19150:	mov	r1, #0
   19154:	beq	19124 <__assert_fail@plt+0x7f20>
   19158:	umull	r4, r5, r9, r7
   1915c:	mov	r3, #0
   19160:	mov	r2, r5
   19164:	umlal	r2, r3, r8, r7
   19168:	cmp	r3, #0
   1916c:	bne	194c4 <__assert_fail@plt+0x82c0>
   19170:	mov	r9, r4
   19174:	mov	r8, r2
   19178:	b	19130 <__assert_fail@plt+0x7f2c>
   1917c:	asr	r3, r7, #31
   19180:	mov	r2, r7
   19184:	mov	r6, #0
   19188:	mov	lr, #4
   1918c:	mov	r0, r4
   19190:	mov	ip, r5
   19194:	strd	r2, [sp, #8]
   19198:	b	191c4 <__assert_fail@plt+0x7fc0>
   1919c:	umull	r2, r3, r9, r7
   191a0:	mov	r9, r2
   191a4:	mov	r8, r3
   191a8:	cmp	r1, #0
   191ac:	beq	191bc <__assert_fail@plt+0x7fb8>
   191b0:	mvn	r9, #0
   191b4:	mov	r6, #1
   191b8:	mov	r8, r9
   191bc:	subs	lr, lr, #1
   191c0:	beq	19314 <__assert_fail@plt+0x8110>
   191c4:	cmp	r8, #0
   191c8:	mov	r1, #0
   191cc:	beq	1919c <__assert_fail@plt+0x7f98>
   191d0:	umull	r4, r5, r9, r7
   191d4:	mov	r3, #0
   191d8:	mov	r2, r5
   191dc:	umlal	r2, r3, r8, r7
   191e0:	cmp	r3, #0
   191e4:	bne	194e0 <__assert_fail@plt+0x82dc>
   191e8:	mov	r9, r4
   191ec:	mov	r8, r2
   191f0:	b	191a8 <__assert_fail@plt+0x7fa4>
   191f4:	asr	r3, r7, #31
   191f8:	mov	r2, r7
   191fc:	mov	r6, #0
   19200:	mov	lr, #5
   19204:	mov	r0, r4
   19208:	mov	ip, r5
   1920c:	strd	r2, [sp, #8]
   19210:	b	1923c <__assert_fail@plt+0x8038>
   19214:	umull	r2, r3, r9, r7
   19218:	mov	r9, r2
   1921c:	mov	r8, r3
   19220:	cmp	r1, #0
   19224:	beq	19234 <__assert_fail@plt+0x8030>
   19228:	mvn	r9, #0
   1922c:	mov	r6, #1
   19230:	mov	r8, r9
   19234:	subs	lr, lr, #1
   19238:	beq	19314 <__assert_fail@plt+0x8110>
   1923c:	cmp	r8, #0
   19240:	mov	r1, #0
   19244:	beq	19214 <__assert_fail@plt+0x8010>
   19248:	umull	r4, r5, r9, r7
   1924c:	mov	r3, #0
   19250:	mov	r2, r5
   19254:	umlal	r2, r3, r8, r7
   19258:	cmp	r3, #0
   1925c:	bne	1944c <__assert_fail@plt+0x8248>
   19260:	mov	r9, r4
   19264:	mov	r8, r2
   19268:	b	19220 <__assert_fail@plt+0x801c>
   1926c:	lsr	r3, r8, #31
   19270:	adds	r9, r9, r9
   19274:	adc	r8, r8, r8
   19278:	cmp	r3, #0
   1927c:	beq	18f88 <__assert_fail@plt+0x7d84>
   19280:	b	18fcc <__assert_fail@plt+0x7dc8>
   19284:	lsr	r3, r8, #23
   19288:	lsl	r8, r8, #9
   1928c:	cmp	r3, #0
   19290:	lsl	r3, r9, #9
   19294:	orr	r8, r8, r9, lsr #23
   19298:	bne	18fcc <__assert_fail@plt+0x7dc8>
   1929c:	mov	r9, r3
   192a0:	b	18f88 <__assert_fail@plt+0x7d84>
   192a4:	asr	r3, r7, #31
   192a8:	mov	r2, r7
   192ac:	cmp	r8, #0
   192b0:	mov	r1, #0
   192b4:	strd	r2, [sp, #8]
   192b8:	umull	r2, r3, r9, r7
   192bc:	bne	19360 <__assert_fail@plt+0x815c>
   192c0:	mov	r0, r2
   192c4:	mov	ip, r3
   192c8:	cmp	r1, #0
   192cc:	bne	18fcc <__assert_fail@plt+0x7dc8>
   192d0:	cmp	ip, #0
   192d4:	bne	193a8 <__assert_fail@plt+0x81a4>
   192d8:	umull	r2, r3, r0, r7
   192dc:	mov	r6, r2
   192e0:	mov	r2, r3
   192e4:	cmp	r1, #0
   192e8:	mov	r9, r6
   192ec:	mov	r8, r2
   192f0:	beq	18f88 <__assert_fail@plt+0x7d84>
   192f4:	b	18fcc <__assert_fail@plt+0x7dc8>
   192f8:	lsr	r3, r8, #22
   192fc:	lsl	r8, r8, #10
   19300:	cmp	r3, #0
   19304:	lsl	r3, r9, #10
   19308:	orr	r8, r8, r9, lsr #22
   1930c:	beq	1929c <__assert_fail@plt+0x8098>
   19310:	b	18fcc <__assert_fail@plt+0x7dc8>
   19314:	mov	r5, ip
   19318:	orr	r4, r0, r6
   1931c:	b	18f88 <__assert_fail@plt+0x7d84>
   19320:	strd	r2, [sp, #8]
   19324:	mov	r3, ip
   19328:	ldr	r2, [sp, #12]
   1932c:	umlal	r2, r3, r8, r7
   19330:	cmp	r3, #0
   19334:	bne	19468 <__assert_fail@plt+0x8264>
   19338:	mov	r8, r2
   1933c:	ldr	r9, [sp, #8]
   19340:	b	18fc4 <__assert_fail@plt+0x7dc0>
   19344:	orr	r4, r6, ip
   19348:	ldr	r5, [sp, #16]
   1934c:	b	18f88 <__assert_fail@plt+0x7d84>
   19350:	mov	r3, #2
   19354:	mov	r7, #1000	; 0x3e8
   19358:	str	r3, [sp, #4]
   1935c:	b	18e30 <__assert_fail@plt+0x7c2c>
   19360:	strd	r2, [sp, #16]
   19364:	mov	r3, r1
   19368:	ldr	r2, [sp, #20]
   1936c:	umlal	r2, r3, r8, r7
   19370:	cmp	r3, #0
   19374:	bne	19538 <__assert_fail@plt+0x8334>
   19378:	mov	ip, r2
   1937c:	ldr	r0, [sp, #16]
   19380:	b	192c8 <__assert_fail@plt+0x80c4>
   19384:	mov	r2, r1
   19388:	mov	r3, ip
   1938c:	umlal	r2, r3, r8, r7
   19390:	cmp	r3, #0
   19394:	strd	r2, [sp, #16]
   19398:	bne	1940c <__assert_fail@plt+0x8208>
   1939c:	mov	r2, r0
   193a0:	ldr	r3, [sp, #16]
   193a4:	b	18f3c <__assert_fail@plt+0x7d38>
   193a8:	umull	r8, r9, r0, r7
   193ac:	mov	r3, r1
   193b0:	mov	r2, r9
   193b4:	umlal	r2, r3, ip, r7
   193b8:	cmp	r3, #0
   193bc:	bne	19518 <__assert_fail@plt+0x8314>
   193c0:	mov	r6, r8
   193c4:	b	192e4 <__assert_fail@plt+0x80e0>
   193c8:	umull	r8, r9, ip, r7
   193cc:	mov	r3, r0
   193d0:	mov	r2, r9
   193d4:	umlal	r2, r3, r1, r7
   193d8:	cmp	r3, #0
   193dc:	bne	19560 <__assert_fail@plt+0x835c>
   193e0:	mov	r6, r8
   193e4:	b	18f78 <__assert_fail@plt+0x7d74>
   193e8:	umull	r8, r9, r2, r7
   193ec:	mov	r1, ip
   193f0:	mov	r0, r9
   193f4:	umlal	r0, r1, r3, r7
   193f8:	cmp	r1, #0
   193fc:	bne	1942c <__assert_fail@plt+0x8228>
   19400:	mov	ip, r8
   19404:	mov	r1, r0
   19408:	b	18f5c <__assert_fail@plt+0x7d58>
   1940c:	ldr	lr, [sp, #8]
   19410:	mov	r2, r0
   19414:	mov	ip, #1
   19418:	ldr	r3, [sp, #12]
   1941c:	mul	r3, r9, r3
   19420:	mla	r3, lr, r8, r3
   19424:	add	r3, r3, r1
   19428:	b	18f3c <__assert_fail@plt+0x7d38>
   1942c:	ldr	r1, [sp, #12]
   19430:	mov	lr, #1
   19434:	mov	ip, r8
   19438:	mul	r1, r2, r1
   1943c:	ldr	r2, [sp, #8]
   19440:	mla	r1, r3, r2, r1
   19444:	add	r1, r1, r9
   19448:	b	18f5c <__assert_fail@plt+0x7d58>
   1944c:	ldrd	r2, [sp, #8]
   19450:	mov	r1, #1
   19454:	mul	r3, r9, r3
   19458:	mov	r9, r4
   1945c:	mla	r8, r2, r8, r3
   19460:	add	r8, r8, r5
   19464:	b	19220 <__assert_fail@plt+0x801c>
   19468:	mul	r3, r9, r1
   1946c:	mov	ip, #1
   19470:	mla	r8, r7, r8, r3
   19474:	ldrd	r6, [sp, #8]
   19478:	mov	r9, r6
   1947c:	add	r8, r8, r7
   19480:	b	18fc4 <__assert_fail@plt+0x7dc0>
   19484:	movw	r3, #46804	; 0xb6d4
   19488:	movt	r3, #1
   1948c:	movw	r1, #46816	; 0xb6e0
   19490:	movt	r1, #1
   19494:	movw	r0, #46832	; 0xb6f0
   19498:	movt	r0, #1
   1949c:	mov	r2, #85	; 0x55
   194a0:	bl	11204 <__assert_fail@plt>
   194a4:	ldr	r3, [sp, #12]
   194a8:	mov	r1, #1
   194ac:	mul	r2, r9, r3
   194b0:	ldr	r3, [sp, #8]
   194b4:	mov	r9, r4
   194b8:	mla	r8, r3, r8, r2
   194bc:	add	r8, r8, r5
   194c0:	b	19040 <__assert_fail@plt+0x7e3c>
   194c4:	ldrd	r2, [sp, #8]
   194c8:	mov	r1, #1
   194cc:	mul	r3, r9, r3
   194d0:	mov	r9, r4
   194d4:	mla	r8, r2, r8, r3
   194d8:	add	r8, r8, r5
   194dc:	b	19130 <__assert_fail@plt+0x7f2c>
   194e0:	ldrd	r2, [sp, #8]
   194e4:	mov	r1, #1
   194e8:	mul	r3, r9, r3
   194ec:	mov	r9, r4
   194f0:	mla	r8, r2, r8, r3
   194f4:	add	r8, r8, r5
   194f8:	b	191a8 <__assert_fail@plt+0x7fa4>
   194fc:	ldrd	r2, [sp, #8]
   19500:	mov	r1, #1
   19504:	mul	r3, r9, r3
   19508:	mov	r9, r4
   1950c:	mla	r8, r2, r8, r3
   19510:	add	r8, r8, r5
   19514:	b	190b8 <__assert_fail@plt+0x7eb4>
   19518:	ldr	r3, [sp, #12]
   1951c:	mov	r6, r8
   19520:	mov	r1, #1
   19524:	mul	r2, r0, r3
   19528:	ldr	r3, [sp, #8]
   1952c:	mla	r2, ip, r3, r2
   19530:	add	r2, r2, r9
   19534:	b	192e4 <__assert_fail@plt+0x80e0>
   19538:	ldr	r3, [sp, #12]
   1953c:	mov	r1, #1
   19540:	ldr	r2, [sp, #16]
   19544:	mul	ip, r9, r3
   19548:	ldr	r3, [sp, #8]
   1954c:	mov	r0, r2
   19550:	mla	ip, r3, r8, ip
   19554:	ldr	r3, [sp, #20]
   19558:	add	ip, ip, r3
   1955c:	b	192c8 <__assert_fail@plt+0x80c4>
   19560:	ldr	r3, [sp, #12]
   19564:	mov	r6, r8
   19568:	mov	r0, #1
   1956c:	mul	r2, ip, r3
   19570:	ldr	r3, [sp, #8]
   19574:	mla	r2, r1, r3, r2
   19578:	add	r2, r2, r9
   1957c:	b	18f78 <__assert_fail@plt+0x7d74>
   19580:	cmp	r1, #0
   19584:	cmpne	r0, #0
   19588:	beq	195d4 <__assert_fail@plt+0x83d0>
   1958c:	strd	r4, [sp, #-16]!
   19590:	umull	r4, r5, r0, r1
   19594:	str	r6, [sp, #8]
   19598:	str	lr, [sp, #12]
   1959c:	adds	r3, r5, #0
   195a0:	movne	r3, #1
   195a4:	cmp	r4, #0
   195a8:	blt	195b4 <__assert_fail@plt+0x83b0>
   195ac:	cmp	r3, #0
   195b0:	beq	195e0 <__assert_fail@plt+0x83dc>
   195b4:	bl	110d8 <__errno_location@plt>
   195b8:	mov	r3, #12
   195bc:	ldrd	r4, [sp]
   195c0:	ldr	r6, [sp, #8]
   195c4:	add	sp, sp, #12
   195c8:	str	r3, [r0]
   195cc:	mov	r0, #0
   195d0:	pop	{pc}		; (ldr pc, [sp], #4)
   195d4:	mov	r1, #1
   195d8:	mov	r0, r1
   195dc:	b	10f10 <calloc@plt>
   195e0:	ldrd	r4, [sp]
   195e4:	ldr	r6, [sp, #8]
   195e8:	ldr	lr, [sp, #12]
   195ec:	add	sp, sp, #16
   195f0:	b	10f10 <calloc@plt>
   195f4:	cmp	r0, #0
   195f8:	beq	19604 <__assert_fail@plt+0x8400>
   195fc:	blt	1960c <__assert_fail@plt+0x8408>
   19600:	b	11060 <malloc@plt>
   19604:	mov	r0, #1
   19608:	b	11060 <malloc@plt>
   1960c:	str	r4, [sp, #-8]!
   19610:	str	lr, [sp, #4]
   19614:	bl	110d8 <__errno_location@plt>
   19618:	mov	r3, #12
   1961c:	ldr	r4, [sp]
   19620:	add	sp, sp, #4
   19624:	str	r3, [r0]
   19628:	mov	r0, #0
   1962c:	pop	{pc}		; (ldr pc, [sp], #4)
   19630:	cmp	r0, #0
   19634:	beq	1965c <__assert_fail@plt+0x8458>
   19638:	cmp	r1, #0
   1963c:	str	r4, [sp, #-8]!
   19640:	str	lr, [sp, #4]
   19644:	beq	19664 <__assert_fail@plt+0x8460>
   19648:	blt	19678 <__assert_fail@plt+0x8474>
   1964c:	ldr	r4, [sp]
   19650:	ldr	lr, [sp, #4]
   19654:	add	sp, sp, #8
   19658:	b	10fd0 <realloc@plt>
   1965c:	mov	r0, r1
   19660:	b	195f4 <__assert_fail@plt+0x83f0>
   19664:	bl	158ac <__assert_fail@plt+0x46a8>
   19668:	ldr	r4, [sp]
   1966c:	add	sp, sp, #4
   19670:	mov	r0, #0
   19674:	pop	{pc}		; (ldr pc, [sp], #4)
   19678:	bl	110d8 <__errno_location@plt>
   1967c:	mov	r3, #12
   19680:	str	r3, [r0]
   19684:	b	19668 <__assert_fail@plt+0x8464>
   19688:	strd	r4, [sp, #-16]!
   1968c:	mov	r4, r0
   19690:	str	r6, [sp, #8]
   19694:	str	lr, [sp, #12]
   19698:	bl	11024 <__fpending@plt>
   1969c:	ldr	r5, [r4]
   196a0:	mov	r6, r0
   196a4:	mov	r0, r4
   196a8:	bl	15798 <__assert_fail@plt+0x4594>
   196ac:	mov	r4, r0
   196b0:	and	r5, r5, #32
   196b4:	cmp	r5, #0
   196b8:	bne	196f0 <__assert_fail@plt+0x84ec>
   196bc:	cmp	r0, #0
   196c0:	beq	196dc <__assert_fail@plt+0x84d8>
   196c4:	cmp	r6, #0
   196c8:	bne	19708 <__assert_fail@plt+0x8504>
   196cc:	bl	110d8 <__errno_location@plt>
   196d0:	ldr	r4, [r0]
   196d4:	subs	r4, r4, #9
   196d8:	mvnne	r4, #0
   196dc:	mov	r0, r4
   196e0:	ldrd	r4, [sp]
   196e4:	ldr	r6, [sp, #8]
   196e8:	add	sp, sp, #12
   196ec:	pop	{pc}		; (ldr pc, [sp], #4)
   196f0:	cmp	r0, #0
   196f4:	bne	19708 <__assert_fail@plt+0x8504>
   196f8:	bl	110d8 <__errno_location@plt>
   196fc:	str	r4, [r0]
   19700:	mvn	r4, #0
   19704:	b	196dc <__assert_fail@plt+0x84d8>
   19708:	mvn	r4, #0
   1970c:	b	196dc <__assert_fail@plt+0x84d8>
   19710:	mov	r0, #14
   19714:	str	r4, [sp, #-8]!
   19718:	str	lr, [sp, #4]
   1971c:	bl	1118c <nl_langinfo@plt>
   19720:	cmp	r0, #0
   19724:	beq	19748 <__assert_fail@plt+0x8544>
   19728:	ldrb	r2, [r0]
   1972c:	movw	r3, #46872	; 0xb718
   19730:	movt	r3, #1
   19734:	ldr	r4, [sp]
   19738:	add	sp, sp, #4
   1973c:	cmp	r2, #0
   19740:	moveq	r0, r3
   19744:	pop	{pc}		; (ldr pc, [sp], #4)
   19748:	ldr	r4, [sp]
   1974c:	add	sp, sp, #4
   19750:	movw	r0, #46872	; 0xb718
   19754:	movt	r0, #1
   19758:	pop	{pc}		; (ldr pc, [sp], #4)
   1975c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19760:	mov	r5, r2
   19764:	strd	r6, [sp, #8]
   19768:	subs	r6, r0, #0
   1976c:	mov	r7, r1
   19770:	str	lr, [sp, #16]
   19774:	sub	sp, sp, #12
   19778:	addeq	r6, sp, #4
   1977c:	mov	r0, r6
   19780:	bl	11030 <mbrtowc@plt>
   19784:	cmp	r5, #0
   19788:	cmnne	r0, #3
   1978c:	mov	r4, r0
   19790:	bhi	197ac <__assert_fail@plt+0x85a8>
   19794:	mov	r0, r4
   19798:	add	sp, sp, #12
   1979c:	ldrd	r4, [sp]
   197a0:	ldrd	r6, [sp, #8]
   197a4:	add	sp, sp, #16
   197a8:	pop	{pc}		; (ldr pc, [sp], #4)
   197ac:	mov	r0, #0
   197b0:	bl	19804 <__assert_fail@plt+0x8600>
   197b4:	cmp	r0, #0
   197b8:	bne	19794 <__assert_fail@plt+0x8590>
   197bc:	ldrb	r3, [r7]
   197c0:	mov	r4, #1
   197c4:	str	r3, [r6]
   197c8:	b	19794 <__assert_fail@plt+0x8590>
   197cc:	umull	r2, r3, r1, r2
   197d0:	cmp	r3, #0
   197d4:	bne	197e0 <__assert_fail@plt+0x85dc>
   197d8:	mov	r1, r2
   197dc:	b	19630 <__assert_fail@plt+0x842c>
   197e0:	str	r4, [sp, #-8]!
   197e4:	str	lr, [sp, #4]
   197e8:	bl	110d8 <__errno_location@plt>
   197ec:	mov	r3, #12
   197f0:	ldr	r4, [sp]
   197f4:	add	sp, sp, #4
   197f8:	str	r3, [r0]
   197fc:	mov	r0, #0
   19800:	pop	{pc}		; (ldr pc, [sp], #4)
   19804:	push	{lr}		; (str lr, [sp, #-4]!)
   19808:	sub	sp, sp, #268	; 0x10c
   1980c:	movw	r2, #257	; 0x101
   19810:	add	r1, sp, #4
   19814:	bl	1985c <__assert_fail@plt+0x8658>
   19818:	cmp	r0, #0
   1981c:	movne	r0, #0
   19820:	bne	19854 <__assert_fail@plt+0x8650>
   19824:	movw	r1, #46880	; 0xb720
   19828:	movt	r1, #1
   1982c:	add	r0, sp, #4
   19830:	bl	10f34 <strcmp@plt>
   19834:	cmp	r0, #0
   19838:	beq	19854 <__assert_fail@plt+0x8650>
   1983c:	add	r0, sp, #4
   19840:	movw	r1, #46884	; 0xb724
   19844:	movt	r1, #1
   19848:	bl	10f34 <strcmp@plt>
   1984c:	adds	r0, r0, #0
   19850:	movne	r0, #1
   19854:	add	sp, sp, #268	; 0x10c
   19858:	pop	{pc}		; (ldr pc, [sp], #4)
   1985c:	strd	r4, [sp, #-16]!
   19860:	mov	r5, r1
   19864:	mov	r1, #0
   19868:	mov	r4, r2
   1986c:	str	r6, [sp, #8]
   19870:	str	lr, [sp, #12]
   19874:	bl	11174 <setlocale@plt>
   19878:	subs	r6, r0, #0
   1987c:	beq	198fc <__assert_fail@plt+0x86f8>
   19880:	bl	110c0 <strlen@plt>
   19884:	cmp	r4, r0
   19888:	bhi	198a8 <__assert_fail@plt+0x86a4>
   1988c:	cmp	r4, #0
   19890:	moveq	r0, #34	; 0x22
   19894:	bne	198cc <__assert_fail@plt+0x86c8>
   19898:	ldrd	r4, [sp]
   1989c:	ldr	r6, [sp, #8]
   198a0:	add	sp, sp, #12
   198a4:	pop	{pc}		; (ldr pc, [sp], #4)
   198a8:	add	r2, r0, #1
   198ac:	mov	r1, r6
   198b0:	mov	r0, r5
   198b4:	bl	10f70 <memcpy@plt>
   198b8:	ldrd	r4, [sp]
   198bc:	mov	r0, #0
   198c0:	ldr	r6, [sp, #8]
   198c4:	add	sp, sp, #12
   198c8:	pop	{pc}		; (ldr pc, [sp], #4)
   198cc:	sub	r4, r4, #1
   198d0:	mov	r1, r6
   198d4:	mov	r2, r4
   198d8:	mov	r0, r5
   198dc:	bl	10f70 <memcpy@plt>
   198e0:	mov	r3, #0
   198e4:	mov	r0, #34	; 0x22
   198e8:	strb	r3, [r5, r4]
   198ec:	ldrd	r4, [sp]
   198f0:	ldr	r6, [sp, #8]
   198f4:	add	sp, sp, #12
   198f8:	pop	{pc}		; (ldr pc, [sp], #4)
   198fc:	cmp	r4, #0
   19900:	mov	r0, #22
   19904:	strbne	r6, [r5]
   19908:	ldrd	r4, [sp]
   1990c:	ldr	r6, [sp, #8]
   19910:	add	sp, sp, #12
   19914:	pop	{pc}		; (ldr pc, [sp], #4)
   19918:	mov	r1, #0
   1991c:	b	11174 <setlocale@plt>
   19920:	cmp	r3, #0
   19924:	cmpeq	r2, #0
   19928:	bne	19940 <__assert_fail@plt+0x873c>
   1992c:	cmp	r1, #0
   19930:	cmpeq	r0, #0
   19934:	mvnne	r1, #0
   19938:	mvnne	r0, #0
   1993c:	b	1995c <__assert_fail@plt+0x8758>
   19940:	sub	sp, sp, #8
   19944:	push	{sp, lr}
   19948:	bl	1996c <__assert_fail@plt+0x8768>
   1994c:	ldr	lr, [sp, #4]
   19950:	add	sp, sp, #8
   19954:	pop	{r2, r3}
   19958:	bx	lr
   1995c:	push	{r1, lr}
   19960:	mov	r0, #8
   19964:	bl	10f28 <raise@plt>
   19968:	pop	{r1, pc}
   1996c:	cmp	r1, r3
   19970:	cmpeq	r0, r2
   19974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19978:	mov	r4, r0
   1997c:	movcc	r0, #0
   19980:	mov	r5, r1
   19984:	ldr	lr, [sp, #36]	; 0x24
   19988:	movcc	r1, r0
   1998c:	bcc	19a88 <__assert_fail@plt+0x8884>
   19990:	cmp	r3, #0
   19994:	clzeq	ip, r2
   19998:	clzne	ip, r3
   1999c:	addeq	ip, ip, #32
   199a0:	cmp	r5, #0
   199a4:	clzeq	r1, r4
   199a8:	addeq	r1, r1, #32
   199ac:	clzne	r1, r5
   199b0:	sub	ip, ip, r1
   199b4:	sub	sl, ip, #32
   199b8:	lsl	r9, r3, ip
   199bc:	rsb	fp, ip, #32
   199c0:	orr	r9, r9, r2, lsl sl
   199c4:	orr	r9, r9, r2, lsr fp
   199c8:	lsl	r8, r2, ip
   199cc:	cmp	r5, r9
   199d0:	cmpeq	r4, r8
   199d4:	movcc	r0, #0
   199d8:	movcc	r1, r0
   199dc:	bcc	199f8 <__assert_fail@plt+0x87f4>
   199e0:	mov	r0, #1
   199e4:	subs	r4, r4, r8
   199e8:	lsl	r1, r0, sl
   199ec:	orr	r1, r1, r0, lsr fp
   199f0:	lsl	r0, r0, ip
   199f4:	sbc	r5, r5, r9
   199f8:	cmp	ip, #0
   199fc:	beq	19a88 <__assert_fail@plt+0x8884>
   19a00:	lsr	r6, r8, #1
   19a04:	orr	r6, r6, r9, lsl #31
   19a08:	lsr	r7, r9, #1
   19a0c:	mov	r2, ip
   19a10:	b	19a34 <__assert_fail@plt+0x8830>
   19a14:	subs	r3, r4, r6
   19a18:	sbc	r8, r5, r7
   19a1c:	adds	r3, r3, r3
   19a20:	adc	r8, r8, r8
   19a24:	adds	r4, r3, #1
   19a28:	adc	r5, r8, #0
   19a2c:	subs	r2, r2, #1
   19a30:	beq	19a50 <__assert_fail@plt+0x884c>
   19a34:	cmp	r5, r7
   19a38:	cmpeq	r4, r6
   19a3c:	bcs	19a14 <__assert_fail@plt+0x8810>
   19a40:	adds	r4, r4, r4
   19a44:	adc	r5, r5, r5
   19a48:	subs	r2, r2, #1
   19a4c:	bne	19a34 <__assert_fail@plt+0x8830>
   19a50:	lsr	r3, r4, ip
   19a54:	orr	r3, r3, r5, lsl fp
   19a58:	lsr	r2, r5, ip
   19a5c:	orr	r3, r3, r5, lsr sl
   19a60:	adds	r0, r0, r4
   19a64:	mov	r4, r3
   19a68:	lsl	r3, r2, ip
   19a6c:	orr	r3, r3, r4, lsl sl
   19a70:	lsl	ip, r4, ip
   19a74:	orr	r3, r3, r4, lsr fp
   19a78:	adc	r1, r1, r5
   19a7c:	subs	r0, r0, ip
   19a80:	mov	r5, r2
   19a84:	sbc	r1, r1, r3
   19a88:	cmp	lr, #0
   19a8c:	strdne	r4, [lr]
   19a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a98:	mov	r7, r0
   19a9c:	ldr	r6, [pc, #72]	; 19aec <__assert_fail@plt+0x88e8>
   19aa0:	ldr	r5, [pc, #72]	; 19af0 <__assert_fail@plt+0x88ec>
   19aa4:	add	r6, pc, r6
   19aa8:	add	r5, pc, r5
   19aac:	sub	r6, r6, r5
   19ab0:	mov	r8, r1
   19ab4:	mov	r9, r2
   19ab8:	bl	10ef0 <calloc@plt-0x20>
   19abc:	asrs	r6, r6, #2
   19ac0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ac4:	mov	r4, #0
   19ac8:	add	r4, r4, #1
   19acc:	ldr	r3, [r5], #4
   19ad0:	mov	r2, r9
   19ad4:	mov	r1, r8
   19ad8:	mov	r0, r7
   19adc:	blx	r3
   19ae0:	cmp	r6, r4
   19ae4:	bne	19ac8 <__assert_fail@plt+0x88c4>
   19ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19aec:	andeq	r2, r1, r8, ror #8
   19af0:	andeq	r2, r1, r0, ror #8
   19af4:	bx	lr
   19af8:	ldr	r3, [pc, #12]	; 19b0c <__assert_fail@plt+0x8908>
   19afc:	mov	r1, #0
   19b00:	add	r3, pc, r3
   19b04:	ldr	r2, [r3]
   19b08:	b	110f0 <__cxa_atexit@plt>
   19b0c:	andeq	r2, r1, ip, lsl #12

Disassembly of section .fini:

00019b10 <.fini>:
   19b10:	push	{r3, lr}
   19b14:	pop	{r3, pc}
