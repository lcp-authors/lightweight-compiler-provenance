
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114e0 <.init>:
   114e0:	push	{r3, lr}
   114e4:	bl	124f0 <__assert_fail@plt+0xb34>
   114e8:	pop	{r3, pc}

Disassembly of section .plt:

000114ec <pthread_mutex_unlock@plt-0x14>:
   114ec:	push	{lr}		; (str lr, [sp, #-4]!)
   114f0:	ldr	lr, [pc, #4]	; 114fc <pthread_mutex_unlock@plt-0x4>
   114f4:	add	lr, pc, lr
   114f8:	ldr	pc, [lr, #8]!
   114fc:	andeq	r5, r2, r4, lsl #22

00011500 <pthread_mutex_unlock@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #151552	; 0x25000
   11508:	ldr	pc, [ip, #2820]!	; 0xb04

0001150c <fdopen@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #151552	; 0x25000
   11514:	ldr	pc, [ip, #2812]!	; 0xafc

00011518 <calloc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #151552	; 0x25000
   11520:	ldr	pc, [ip, #2804]!	; 0xaf4

00011524 <wctype@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #151552	; 0x25000
   1152c:	ldr	pc, [ip, #2796]!	; 0xaec

00011530 <raise@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #151552	; 0x25000
   11538:	ldr	pc, [ip, #2788]!	; 0xae4

0001153c <wcrtomb@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #151552	; 0x25000
   11544:	ldr	pc, [ip, #2780]!	; 0xadc

00011548 <iswctype@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #151552	; 0x25000
   11550:	ldr	pc, [ip, #2772]!	; 0xad4

00011554 <strcmp@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #151552	; 0x25000
   1155c:	ldr	pc, [ip, #2764]!	; 0xacc

00011560 <printf@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #151552	; 0x25000
   11568:	ldr	pc, [ip, #2756]!	; 0xac4

0001156c <pthread_mutex_destroy@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #151552	; 0x25000
   11574:	ldr	pc, [ip, #2748]!	; 0xabc

00011578 <fflush@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #151552	; 0x25000
   11580:	ldr	pc, [ip, #2740]!	; 0xab4

00011584 <wcwidth@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #151552	; 0x25000
   1158c:	ldr	pc, [ip, #2732]!	; 0xaac

00011590 <getuid@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #151552	; 0x25000
   11598:	ldr	pc, [ip, #2724]!	; 0xaa4

0001159c <memmove@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #151552	; 0x25000
   115a4:	ldr	pc, [ip, #2716]!	; 0xa9c

000115a8 <free@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #151552	; 0x25000
   115b0:	ldr	pc, [ip, #2708]!	; 0xa94

000115b4 <pthread_mutex_lock@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #151552	; 0x25000
   115bc:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c0 <ferror@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #151552	; 0x25000
   115c8:	ldr	pc, [ip, #2692]!	; 0xa84

000115cc <strndup@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #151552	; 0x25000
   115d4:	ldr	pc, [ip, #2684]!	; 0xa7c

000115d8 <_exit@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #151552	; 0x25000
   115e0:	ldr	pc, [ip, #2676]!	; 0xa74

000115e4 <memcpy@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #151552	; 0x25000
   115ec:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f0 <tolower@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #151552	; 0x25000
   115f8:	ldr	pc, [ip, #2660]!	; 0xa64

000115fc <pthread_mutex_init@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #151552	; 0x25000
   11604:	ldr	pc, [ip, #2652]!	; 0xa5c

00011608 <towlower@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #151552	; 0x25000
   11610:	ldr	pc, [ip, #2644]!	; 0xa54

00011614 <mbsinit@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #151552	; 0x25000
   1161c:	ldr	pc, [ip, #2636]!	; 0xa4c

00011620 <time@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #151552	; 0x25000
   11628:	ldr	pc, [ip, #2628]!	; 0xa44

0001162c <memcmp@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #151552	; 0x25000
   11634:	ldr	pc, [ip, #2620]!	; 0xa3c

00011638 <dcgettext@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #151552	; 0x25000
   11640:	ldr	pc, [ip, #2612]!	; 0xa34

00011644 <realloc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #151552	; 0x25000
   1164c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011650 <textdomain@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #151552	; 0x25000
   11658:	ldr	pc, [ip, #2596]!	; 0xa24

0001165c <iswcntrl@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #151552	; 0x25000
   11664:	ldr	pc, [ip, #2588]!	; 0xa1c

00011668 <geteuid@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #151552	; 0x25000
   11670:	ldr	pc, [ip, #2580]!	; 0xa14

00011674 <iswprint@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #151552	; 0x25000
   1167c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011680 <setgroups@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #151552	; 0x25000
   11688:	ldr	pc, [ip, #2564]!	; 0xa04

0001168c <__fxstat64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #151552	; 0x25000
   11694:	ldr	pc, [ip, #2556]!	; 0x9fc

00011698 <lseek64@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #151552	; 0x25000
   116a0:	ldr	pc, [ip, #2548]!	; 0x9f4

000116a4 <__ctype_get_mb_cur_max@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #151552	; 0x25000
   116ac:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b0 <strcpy@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #151552	; 0x25000
   116b8:	ldr	pc, [ip, #2532]!	; 0x9e4

000116bc <fread@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #151552	; 0x25000
   116c4:	ldr	pc, [ip, #2524]!	; 0x9dc

000116c8 <__fpending@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #151552	; 0x25000
   116d0:	ldr	pc, [ip, #2516]!	; 0x9d4

000116d4 <mbrtowc@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #151552	; 0x25000
   116dc:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e0 <error@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #151552	; 0x25000
   116e8:	ldr	pc, [ip, #2500]!	; 0x9c4

000116ec <fnmatch@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #151552	; 0x25000
   116f4:	ldr	pc, [ip, #2492]!	; 0x9bc

000116f8 <open64@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #151552	; 0x25000
   11700:	ldr	pc, [ip, #2484]!	; 0x9b4

00011704 <getenv@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #151552	; 0x25000
   1170c:	ldr	pc, [ip, #2476]!	; 0x9ac

00011710 <setgid@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #151552	; 0x25000
   11718:	ldr	pc, [ip, #2468]!	; 0x9a4

0001171c <malloc@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #151552	; 0x25000
   11724:	ldr	pc, [ip, #2460]!	; 0x99c

00011728 <__libc_start_main@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #151552	; 0x25000
   11730:	ldr	pc, [ip, #2452]!	; 0x994

00011734 <strftime@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #151552	; 0x25000
   1173c:	ldr	pc, [ip, #2444]!	; 0x98c

00011740 <__freading@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #151552	; 0x25000
   11748:	ldr	pc, [ip, #2436]!	; 0x984

0001174c <localtime@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #151552	; 0x25000
   11754:	ldr	pc, [ip, #2428]!	; 0x97c

00011758 <__ctype_tolower_loc@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #151552	; 0x25000
   11760:	ldr	pc, [ip, #2420]!	; 0x974

00011764 <__gmon_start__@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #151552	; 0x25000
   1176c:	ldr	pc, [ip, #2412]!	; 0x96c

00011770 <getopt_long@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #151552	; 0x25000
   11778:	ldr	pc, [ip, #2404]!	; 0x964

0001177c <__ctype_b_loc@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #151552	; 0x25000
   11784:	ldr	pc, [ip, #2396]!	; 0x95c

00011788 <exit@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #151552	; 0x25000
   11790:	ldr	pc, [ip, #2388]!	; 0x954

00011794 <feof@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #151552	; 0x25000
   1179c:	ldr	pc, [ip, #2380]!	; 0x94c

000117a0 <strtoul@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #151552	; 0x25000
   117a8:	ldr	pc, [ip, #2372]!	; 0x944

000117ac <strlen@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #151552	; 0x25000
   117b4:	ldr	pc, [ip, #2364]!	; 0x93c

000117b8 <strchr@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #151552	; 0x25000
   117c0:	ldr	pc, [ip, #2356]!	; 0x934

000117c4 <fprintf@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #151552	; 0x25000
   117cc:	ldr	pc, [ip, #2348]!	; 0x92c

000117d0 <ungetc@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #151552	; 0x25000
   117d8:	ldr	pc, [ip, #2340]!	; 0x924

000117dc <__errno_location@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #151552	; 0x25000
   117e4:	ldr	pc, [ip, #2332]!	; 0x91c

000117e8 <iswalnum@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #151552	; 0x25000
   117f0:	ldr	pc, [ip, #2324]!	; 0x914

000117f4 <strncasecmp@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #151552	; 0x25000
   117fc:	ldr	pc, [ip, #2316]!	; 0x90c

00011800 <__cxa_atexit@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #151552	; 0x25000
   11808:	ldr	pc, [ip, #2308]!	; 0x904

0001180c <getgid@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #151552	; 0x25000
   11814:	ldr	pc, [ip, #2300]!	; 0x8fc

00011818 <memset@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #151552	; 0x25000
   11820:	ldr	pc, [ip, #2292]!	; 0x8f4

00011824 <putchar@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #151552	; 0x25000
   1182c:	ldr	pc, [ip, #2284]!	; 0x8ec

00011830 <btowc@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #151552	; 0x25000
   11838:	ldr	pc, [ip, #2276]!	; 0x8e4

0001183c <fgetc@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #151552	; 0x25000
   11844:	ldr	pc, [ip, #2268]!	; 0x8dc

00011848 <fileno@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #151552	; 0x25000
   11850:	ldr	pc, [ip, #2260]!	; 0x8d4

00011854 <difftime@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #151552	; 0x25000
   1185c:	ldr	pc, [ip, #2252]!	; 0x8cc

00011860 <strtoumax@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #151552	; 0x25000
   11868:	ldr	pc, [ip, #2244]!	; 0x8c4

0001186c <memchr@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #151552	; 0x25000
   11874:	ldr	pc, [ip, #2236]!	; 0x8bc

00011878 <fclose@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #151552	; 0x25000
   11880:	ldr	pc, [ip, #2228]!	; 0x8b4

00011884 <strnlen@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #151552	; 0x25000
   1188c:	ldr	pc, [ip, #2220]!	; 0x8ac

00011890 <fseeko64@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #151552	; 0x25000
   11898:	ldr	pc, [ip, #2212]!	; 0x8a4

0001189c <fcntl64@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #151552	; 0x25000
   118a4:	ldr	pc, [ip, #2204]!	; 0x89c

000118a8 <setlocale@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #151552	; 0x25000
   118b0:	ldr	pc, [ip, #2196]!	; 0x894

000118b4 <toupper@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #151552	; 0x25000
   118bc:	ldr	pc, [ip, #2188]!	; 0x88c

000118c0 <strrchr@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #151552	; 0x25000
   118c8:	ldr	pc, [ip, #2180]!	; 0x884

000118cc <nl_langinfo@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #151552	; 0x25000
   118d4:	ldr	pc, [ip, #2172]!	; 0x87c

000118d8 <fputc@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #151552	; 0x25000
   118e0:	ldr	pc, [ip, #2164]!	; 0x874

000118e4 <setuid@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #151552	; 0x25000
   118ec:	ldr	pc, [ip, #2156]!	; 0x86c

000118f0 <localeconv@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #151552	; 0x25000
   118f8:	ldr	pc, [ip, #2148]!	; 0x864

000118fc <clearerr@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #151552	; 0x25000
   11904:	ldr	pc, [ip, #2140]!	; 0x85c

00011908 <sprintf@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #151552	; 0x25000
   11910:	ldr	pc, [ip, #2132]!	; 0x854

00011914 <putc@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #151552	; 0x25000
   1191c:	ldr	pc, [ip, #2124]!	; 0x84c

00011920 <strpbrk@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #151552	; 0x25000
   11928:	ldr	pc, [ip, #2116]!	; 0x844

0001192c <bindtextdomain@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #151552	; 0x25000
   11934:	ldr	pc, [ip, #2108]!	; 0x83c

00011938 <getdelim@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #151552	; 0x25000
   11940:	ldr	pc, [ip, #2100]!	; 0x834

00011944 <__xstat64@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #151552	; 0x25000
   1194c:	ldr	pc, [ip, #2092]!	; 0x82c

00011950 <isatty@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #151552	; 0x25000
   11958:	ldr	pc, [ip, #2084]!	; 0x824

0001195c <towupper@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #151552	; 0x25000
   11964:	ldr	pc, [ip, #2076]!	; 0x81c

00011968 <fputs@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #151552	; 0x25000
   11970:	ldr	pc, [ip, #2068]!	; 0x814

00011974 <strncmp@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #151552	; 0x25000
   1197c:	ldr	pc, [ip, #2060]!	; 0x80c

00011980 <abort@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #151552	; 0x25000
   11988:	ldr	pc, [ip, #2052]!	; 0x804

0001198c <getc@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #151552	; 0x25000
   11994:	ldr	pc, [ip, #2044]!	; 0x7fc

00011998 <close@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #151552	; 0x25000
   119a0:	ldr	pc, [ip, #2036]!	; 0x7f4

000119a4 <__lxstat64@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #151552	; 0x25000
   119ac:	ldr	pc, [ip, #2028]!	; 0x7ec

000119b0 <dcngettext@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #151552	; 0x25000
   119b8:	ldr	pc, [ip, #2020]!	; 0x7e4

000119bc <__assert_fail@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #151552	; 0x25000
   119c4:	ldr	pc, [ip, #2012]!	; 0x7dc

Disassembly of section .text:

000119c8 <.text>:
   119c8:	push	{r4, lr}
   119cc:	bl	117dc <__errno_location@plt>
   119d0:	mov	r3, #12
   119d4:	str	r3, [r0]
   119d8:	mov	r0, #0
   119dc:	pop	{r4, pc}
   119e0:	ldr	r3, [pc, #2552]	; 123e0 <__assert_fail@plt+0xa24>
   119e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119e8:	vpush	{d8-d9}
   119ec:	sub	sp, sp, #260	; 0x104
   119f0:	add	r5, sp, #152	; 0x98
   119f4:	str	r0, [sp, #64]	; 0x40
   119f8:	mov	r6, r5
   119fc:	str	r1, [sp, #84]	; 0x54
   11a00:	ldm	r3, {r0, r1, r2}
   11a04:	stm	r5, {r0, r1, r2}
   11a08:	ldr	r4, [r6], #4
   11a0c:	cmp	r4, #0
   11a10:	mvneq	r3, #0
   11a14:	streq	r3, [sp, #52]	; 0x34
   11a18:	beq	11a38 <__assert_fail@plt+0x7c>
   11a1c:	mov	r0, r4
   11a20:	bl	12650 <__assert_fail@plt+0xc94>
   11a24:	subs	r3, r0, #0
   11a28:	str	r3, [sp, #52]	; 0x34
   11a2c:	blt	11a08 <__assert_fail@plt+0x4c>
   11a30:	ldr	r3, [pc, #2476]	; 123e4 <__assert_fail@plt+0xa28>
   11a34:	str	r4, [r3, #108]	; 0x6c
   11a38:	bl	11668 <geteuid@plt>
   11a3c:	mov	r7, r0
   11a40:	bl	11590 <getuid@plt>
   11a44:	mov	r4, r0
   11a48:	bl	1180c <getgid@plt>
   11a4c:	cmp	r7, #0
   11a50:	mov	r6, r0
   11a54:	bne	11ab0 <__assert_fail@plt+0xf4>
   11a58:	mov	r1, r5
   11a5c:	mov	r0, #1
   11a60:	str	r6, [sp, #152]	; 0x98
   11a64:	bl	11680 <setgroups@plt>
   11a68:	cmp	r0, #0
   11a6c:	beq	11ab0 <__assert_fail@plt+0xf4>
   11a70:	ldr	r1, [pc, #2416]	; 123e8 <__assert_fail@plt+0xa2c>
   11a74:	mov	r2, #5
   11a78:	mov	r0, r7
   11a7c:	bl	11638 <dcgettext@plt>
   11a80:	mov	r4, r0
   11a84:	bl	117dc <__errno_location@plt>
   11a88:	mov	r2, r4
   11a8c:	mov	r1, #8
   11a90:	ldr	r5, [r0]
   11a94:	mov	r0, #0
   11a98:	bl	1762c <__assert_fail@plt+0x5c70>
   11a9c:	ldr	r2, [pc, #2376]	; 123ec <__assert_fail@plt+0xa30>
   11aa0:	mov	r3, r0
   11aa4:	mov	r1, r5
   11aa8:	mov	r0, #1
   11aac:	bl	116e0 <error@plt>
   11ab0:	cmp	r4, #0
   11ab4:	cmpne	r7, r4
   11ab8:	moveq	r4, #1
   11abc:	movne	r4, #0
   11ac0:	bl	117dc <__errno_location@plt>
   11ac4:	cmp	r4, #0
   11ac8:	mov	r9, r0
   11acc:	bne	11b18 <__assert_fail@plt+0x15c>
   11ad0:	str	r4, [r0]
   11ad4:	bl	11590 <getuid@plt>
   11ad8:	bl	118e4 <setuid@plt>
   11adc:	cmp	r0, #0
   11ae0:	beq	11af4 <__assert_fail@plt+0x138>
   11ae4:	ldr	r1, [pc, #2308]	; 123f0 <__assert_fail@plt+0xa34>
   11ae8:	mov	r2, #5
   11aec:	mov	r0, r4
   11af0:	b	11a7c <__assert_fail@plt+0xc0>
   11af4:	bl	118e4 <setuid@plt>
   11af8:	subs	r5, r0, #0
   11afc:	bne	11b18 <__assert_fail@plt+0x15c>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #2280]	; 123f4 <__assert_fail@plt+0xa38>
   11b08:	bl	11638 <dcgettext@plt>
   11b0c:	mov	r4, r0
   11b10:	str	r5, [r9]
   11b14:	b	11a84 <__assert_fail@plt+0xc8>
   11b18:	mov	r4, #0
   11b1c:	mov	r0, r6
   11b20:	str	r4, [r9]
   11b24:	bl	11710 <setgid@plt>
   11b28:	cmp	r0, r4
   11b2c:	movne	r2, #5
   11b30:	ldrne	r1, [pc, #2240]	; 123f8 <__assert_fail@plt+0xa3c>
   11b34:	bne	11aec <__assert_fail@plt+0x130>
   11b38:	ldr	r3, [sp, #84]	; 0x54
   11b3c:	ldr	r0, [r3]
   11b40:	cmp	r0, #0
   11b44:	ldreq	r0, [pc, #2224]	; 123fc <__assert_fail@plt+0xa40>
   11b48:	bl	1627c <__assert_fail@plt+0x48c0>
   11b4c:	ldr	r5, [pc, #2192]	; 123e4 <__assert_fail@plt+0xa28>
   11b50:	mov	r0, #6
   11b54:	ldr	r1, [pc, #2212]	; 12400 <__assert_fail@plt+0xa44>
   11b58:	bl	118a8 <setlocale@plt>
   11b5c:	ldr	r1, [pc, #2208]	; 12404 <__assert_fail@plt+0xa48>
   11b60:	ldr	r0, [pc, #2208]	; 12408 <__assert_fail@plt+0xa4c>
   11b64:	bl	1192c <bindtextdomain@plt>
   11b68:	ldr	r0, [pc, #2200]	; 12408 <__assert_fail@plt+0xa4c>
   11b6c:	bl	11650 <textdomain@plt>
   11b70:	mov	r0, #0
   11b74:	bl	1731c <__assert_fail@plt+0x5960>
   11b78:	str	r0, [r5, #4]
   11b7c:	ldr	r0, [pc, #2184]	; 1240c <__assert_fail@plt+0xa50>
   11b80:	bl	254fc <__assert_fail@plt+0x13b40>
   11b84:	cmp	r0, #0
   11b88:	beq	11bb0 <__assert_fail@plt+0x1f4>
   11b8c:	ldr	r4, [r9]
   11b90:	mov	r2, #5
   11b94:	mov	r0, #0
   11b98:	ldr	r1, [pc, #2160]	; 12410 <__assert_fail@plt+0xa54>
   11b9c:	bl	11638 <dcgettext@plt>
   11ba0:	mov	r2, r0
   11ba4:	mov	r1, r4
   11ba8:	mov	r0, #1
   11bac:	bl	116e0 <error@plt>
   11bb0:	ldr	r0, [pc, #2140]	; 12414 <__assert_fail@plt+0xa58>
   11bb4:	bl	254fc <__assert_fail@plt+0x13b40>
   11bb8:	subs	sl, r0, #0
   11bbc:	bne	11b8c <__assert_fail@plt+0x1d0>
   11bc0:	mov	r2, #0
   11bc4:	mov	r3, #0
   11bc8:	ldr	r8, [pc, #2120]	; 12418 <__assert_fail@plt+0xa5c>
   11bcc:	ldr	r7, [pc, #2120]	; 1241c <__assert_fail@plt+0xa60>
   11bd0:	strd	r2, [r5, #88]	; 0x58
   11bd4:	strd	r2, [r5, #96]	; 0x60
   11bd8:	mov	r3, #1
   11bdc:	ldr	r0, [pc, #2108]	; 12420 <__assert_fail@plt+0xa64>
   11be0:	strb	r3, [r5, #80]	; 0x50
   11be4:	bl	11704 <getenv@plt>
   11be8:	mov	fp, r0
   11bec:	str	sl, [r5, #20]
   11bf0:	str	sl, [sp, #56]	; 0x38
   11bf4:	str	sl, [sp, #60]	; 0x3c
   11bf8:	str	sl, [sp, #72]	; 0x48
   11bfc:	str	sl, [sp, #76]	; 0x4c
   11c00:	str	sl, [sp, #80]	; 0x50
   11c04:	str	sl, [sp, #96]	; 0x60
   11c08:	str	sl, [sp, #100]	; 0x64
   11c0c:	str	sl, [sp, #104]	; 0x68
   11c10:	str	sl, [sp, #108]	; 0x6c
   11c14:	mvn	r3, #0
   11c18:	mov	r2, r7
   11c1c:	ldr	r0, [sp, #64]	; 0x40
   11c20:	str	r3, [sp, #144]	; 0x90
   11c24:	add	r3, sp, #144	; 0x90
   11c28:	ldr	r1, [sp, #84]	; 0x54
   11c2c:	str	r3, [sp]
   11c30:	mov	r3, r8
   11c34:	bl	11770 <getopt_long@plt>
   11c38:	cmn	r0, #1
   11c3c:	mov	r4, r0
   11c40:	beq	11f50 <__assert_fail@plt+0x594>
   11c44:	cmp	r0, #101	; 0x65
   11c48:	beq	11dd0 <__assert_fail@plt+0x414>
   11c4c:	bgt	11cf4 <__assert_fail@plt+0x338>
   11c50:	cmp	r0, #76	; 0x4c
   11c54:	beq	11eb8 <__assert_fail@plt+0x4fc>
   11c58:	bgt	11c98 <__assert_fail@plt+0x2dc>
   11c5c:	cmp	r0, #65	; 0x41
   11c60:	beq	11f18 <__assert_fail@plt+0x55c>
   11c64:	bgt	11c78 <__assert_fail@plt+0x2bc>
   11c68:	cmp	r0, #48	; 0x30
   11c6c:	beq	11dbc <__assert_fail@plt+0x400>
   11c70:	mov	r0, #1
   11c74:	b	11de0 <__assert_fail@plt+0x424>
   11c78:	cmp	r0, #69	; 0x45
   11c7c:	moveq	r3, #2
   11c80:	beq	11dd4 <__assert_fail@plt+0x418>
   11c84:	cmp	r0, #72	; 0x48
   11c88:	bne	11c70 <__assert_fail@plt+0x2b4>
   11c8c:	ldr	r3, [pc, #1936]	; 12424 <__assert_fail@plt+0xa68>
   11c90:	mov	r2, #0
   11c94:	b	11ec0 <__assert_fail@plt+0x504>
   11c98:	cmp	r0, #98	; 0x62
   11c9c:	beq	11f24 <__assert_fail@plt+0x568>
   11ca0:	bgt	11cc0 <__assert_fail@plt+0x304>
   11ca4:	cmp	r0, #80	; 0x50
   11ca8:	beq	11c8c <__assert_fail@plt+0x2d0>
   11cac:	cmp	r0, #83	; 0x53
   11cb0:	bne	11c70 <__assert_fail@plt+0x2b4>
   11cb4:	mov	r3, #1
   11cb8:	str	r3, [sp, #60]	; 0x3c
   11cbc:	b	11c14 <__assert_fail@plt+0x258>
   11cc0:	cmp	r0, #99	; 0x63
   11cc4:	beq	11f30 <__assert_fail@plt+0x574>
   11cc8:	cmp	r0, #100	; 0x64
   11ccc:	bne	11c70 <__assert_fail@plt+0x2b4>
   11cd0:	ldr	r3, [pc, #1872]	; 12428 <__assert_fail@plt+0xa6c>
   11cd4:	ldr	fp, [r3]
   11cd8:	cmp	fp, #0
   11cdc:	bne	11c14 <__assert_fail@plt+0x258>
   11ce0:	ldr	r3, [pc, #1860]	; 1242c <__assert_fail@plt+0xa70>
   11ce4:	movw	r2, #1613	; 0x64d
   11ce8:	ldr	r1, [pc, #1856]	; 12430 <__assert_fail@plt+0xa74>
   11cec:	ldr	r0, [pc, #1856]	; 12434 <__assert_fail@plt+0xa78>
   11cf0:	bl	119bc <__assert_fail@plt>
   11cf4:	cmp	r0, #114	; 0x72
   11cf8:	beq	11f3c <__assert_fail@plt+0x580>
   11cfc:	bgt	11d44 <__assert_fail@plt+0x388>
   11d00:	cmp	r0, #108	; 0x6c
   11d04:	beq	11ec8 <__assert_fail@plt+0x50c>
   11d08:	bgt	11d28 <__assert_fail@plt+0x36c>
   11d0c:	cmp	r0, #104	; 0x68
   11d10:	beq	11ddc <__assert_fail@plt+0x420>
   11d14:	cmp	r0, #105	; 0x69
   11d18:	bne	11c70 <__assert_fail@plt+0x2b4>
   11d1c:	mov	r3, #1
   11d20:	str	r3, [sp, #96]	; 0x60
   11d24:	b	11c14 <__assert_fail@plt+0x258>
   11d28:	cmp	r0, #109	; 0x6d
   11d2c:	beq	11c14 <__assert_fail@plt+0x258>
   11d30:	cmp	r0, #112	; 0x70
   11d34:	bne	11c70 <__assert_fail@plt+0x2b4>
   11d38:	mov	r3, #1
   11d3c:	str	r3, [sp, #72]	; 0x48
   11d40:	b	11c14 <__assert_fail@plt+0x258>
   11d44:	cmp	r0, #119	; 0x77
   11d48:	beq	11f48 <__assert_fail@plt+0x58c>
   11d4c:	bgt	11d78 <__assert_fail@plt+0x3bc>
   11d50:	cmp	r0, #115	; 0x73
   11d54:	beq	11c14 <__assert_fail@plt+0x258>
   11d58:	cmp	r0, #118	; 0x76
   11d5c:	bne	11c70 <__assert_fail@plt+0x2b4>
   11d60:	ldr	r0, [pc, #1684]	; 123fc <__assert_fail@plt+0xa40>
   11d64:	bl	13b8c <__assert_fail@plt+0x21d0>
   11d68:	mov	r0, sl
   11d6c:	add	sp, sp, #260	; 0x104
   11d70:	vpop	{d8-d9}
   11d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d78:	cmp	r0, #256	; 0x100
   11d7c:	ldr	r3, [pc, #1700]	; 12428 <__assert_fail@plt+0xa6c>
   11d80:	beq	11ea8 <__assert_fail@plt+0x4ec>
   11d84:	movw	r2, #257	; 0x101
   11d88:	cmp	r0, r2
   11d8c:	bne	11c70 <__assert_fail@plt+0x2b4>
   11d90:	ldr	r4, [r3]
   11d94:	ldrb	r3, [r4]
   11d98:	cmp	r3, #0
   11d9c:	bne	11de4 <__assert_fail@plt+0x428>
   11da0:	mov	r2, #5
   11da4:	ldr	r1, [pc, #1676]	; 12438 <__assert_fail@plt+0xa7c>
   11da8:	mov	r0, #0
   11dac:	bl	11638 <dcgettext@plt>
   11db0:	mov	r2, r0
   11db4:	mov	r1, #0
   11db8:	b	11ba8 <__assert_fail@plt+0x1ec>
   11dbc:	ldr	r2, [pc, #1632]	; 12424 <__assert_fail@plt+0xa68>
   11dc0:	mov	r3, #0
   11dc4:	strb	r3, [r5, #80]	; 0x50
   11dc8:	str	r3, [r2]
   11dcc:	b	11c14 <__assert_fail@plt+0x258>
   11dd0:	mov	r3, #1
   11dd4:	str	r3, [r5, #20]
   11dd8:	b	11c14 <__assert_fail@plt+0x258>
   11ddc:	mov	r0, #0
   11de0:	bl	1269c <__assert_fail@plt+0xce0>
   11de4:	mov	r3, #0
   11de8:	mov	r2, #10
   11dec:	add	r1, sp, #152	; 0x98
   11df0:	mov	r0, r4
   11df4:	str	r3, [r9]
   11df8:	bl	117a0 <strtoul@plt>
   11dfc:	cmn	r0, #1
   11e00:	bne	11e44 <__assert_fail@plt+0x488>
   11e04:	ldr	r3, [r9]
   11e08:	cmp	r3, #34	; 0x22
   11e0c:	bne	11e58 <__assert_fail@plt+0x49c>
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #1568]	; 1243c <__assert_fail@plt+0xa80>
   11e18:	mov	r0, #0
   11e1c:	ldr	r5, [r9]
   11e20:	bl	11638 <dcgettext@plt>
   11e24:	mov	r6, r0
   11e28:	mov	r2, r4
   11e2c:	mov	r1, #8
   11e30:	mov	r0, #0
   11e34:	bl	1762c <__assert_fail@plt+0x5c70>
   11e38:	mov	r3, r0
   11e3c:	mov	r2, r6
   11e40:	b	11aa4 <__assert_fail@plt+0xe8>
   11e44:	cmp	r0, #0
   11e48:	bne	11e58 <__assert_fail@plt+0x49c>
   11e4c:	ldr	r3, [r9]
   11e50:	cmp	r3, #22
   11e54:	b	11e0c <__assert_fail@plt+0x450>
   11e58:	ldr	r3, [sp, #152]	; 0x98
   11e5c:	ldrb	r3, [r3]
   11e60:	cmp	r3, #0
   11e64:	beq	11e9c <__assert_fail@plt+0x4e0>
   11e68:	mov	r2, #5
   11e6c:	ldr	r1, [pc, #1480]	; 1243c <__assert_fail@plt+0xa80>
   11e70:	mov	r0, #0
   11e74:	bl	11638 <dcgettext@plt>
   11e78:	mov	r5, r0
   11e7c:	mov	r2, r4
   11e80:	mov	r1, #8
   11e84:	mov	r0, #0
   11e88:	bl	1762c <__assert_fail@plt+0x5c70>
   11e8c:	mov	r3, r0
   11e90:	mov	r2, r5
   11e94:	mov	r1, #0
   11e98:	b	11aa8 <__assert_fail@plt+0xec>
   11e9c:	ldr	r3, [pc, #1408]	; 12424 <__assert_fail@plt+0xa68>
   11ea0:	str	r0, [r3, #8]
   11ea4:	b	11c14 <__assert_fail@plt+0x258>
   11ea8:	ldr	r0, [r3]
   11eac:	bl	13e7c <__assert_fail@plt+0x24c0>
   11eb0:	str	r0, [sp, #104]	; 0x68
   11eb4:	b	11c14 <__assert_fail@plt+0x258>
   11eb8:	ldr	r3, [pc, #1380]	; 12424 <__assert_fail@plt+0xa68>
   11ebc:	mov	r2, #1
   11ec0:	str	r2, [r3, #4]
   11ec4:	b	11c14 <__assert_fail@plt+0x258>
   11ec8:	ldr	r6, [pc, #1368]	; 12428 <__assert_fail@plt+0xa6c>
   11ecc:	mov	r3, #0
   11ed0:	mov	r2, #10
   11ed4:	add	r1, sp, #152	; 0x98
   11ed8:	ldr	r0, [r6]
   11edc:	str	r3, [sp]
   11ee0:	ldr	r3, [pc, #1368]	; 12440 <__assert_fail@plt+0xa84>
   11ee4:	str	r0, [sp, #152]	; 0x98
   11ee8:	bl	18164 <__assert_fail@plt+0x67a8>
   11eec:	cmp	r0, #0
   11ef0:	beq	11f0c <__assert_fail@plt+0x550>
   11ef4:	ldr	r3, [r6]
   11ef8:	mov	r2, r4
   11efc:	ldr	r1, [sp, #144]	; 0x90
   11f00:	str	r3, [sp]
   11f04:	ldr	r3, [pc, #1292]	; 12418 <__assert_fail@plt+0xa5c>
   11f08:	bl	18064 <__assert_fail@plt+0x66a8>
   11f0c:	mov	r3, #1
   11f10:	str	r3, [sp, #56]	; 0x38
   11f14:	b	11c14 <__assert_fail@plt+0x258>
   11f18:	mov	r3, #1
   11f1c:	str	r3, [sp, #108]	; 0x6c
   11f20:	b	11c14 <__assert_fail@plt+0x258>
   11f24:	mov	r3, #1
   11f28:	str	r3, [sp, #80]	; 0x50
   11f2c:	b	11c14 <__assert_fail@plt+0x258>
   11f30:	mov	r3, #1
   11f34:	str	r3, [sp, #76]	; 0x4c
   11f38:	b	11c14 <__assert_fail@plt+0x258>
   11f3c:	mov	r3, #1
   11f40:	str	r3, [sp, #100]	; 0x64
   11f44:	b	11c14 <__assert_fail@plt+0x258>
   11f48:	mov	r3, #0
   11f4c:	b	11f28 <__assert_fail@plt+0x56c>
   11f50:	cmp	fp, #0
   11f54:	beq	11f70 <__assert_fail@plt+0x5b4>
   11f58:	ldr	r3, [sp, #52]	; 0x34
   11f5c:	cmn	r3, #1
   11f60:	beq	11f70 <__assert_fail@plt+0x5b4>
   11f64:	mov	r0, r3
   11f68:	bl	11998 <close@plt>
   11f6c:	str	r4, [sp, #52]	; 0x34
   11f70:	ldr	r2, [sp, #60]	; 0x3c
   11f74:	ldr	r3, [sp, #76]	; 0x4c
   11f78:	orrs	r4, r3, r2
   11f7c:	beq	12474 <__assert_fail@plt+0xab8>
   11f80:	cmp	r2, #0
   11f84:	beq	11fa4 <__assert_fail@plt+0x5e8>
   11f88:	ldr	r3, [pc, #1244]	; 1246c <__assert_fail@plt+0xab0>
   11f8c:	ldr	r2, [sp, #56]	; 0x38
   11f90:	ldr	r1, [sp, #64]	; 0x40
   11f94:	ldr	r3, [r3]
   11f98:	cmp	r1, r3
   11f9c:	moveq	r2, #0
   11fa0:	str	r2, [sp, #56]	; 0x38
   11fa4:	mov	r0, #1
   11fa8:	bl	11950 <isatty@plt>
   11fac:	sub	r0, r0, #1
   11fb0:	ldr	r3, [pc, #1068]	; 123e4 <__assert_fail@plt+0xa28>
   11fb4:	cmp	fp, #0
   11fb8:	clz	r0, r0
   11fbc:	lsr	r0, r0, #5
   11fc0:	strb	r0, [r3, #12]
   11fc4:	beq	11fe4 <__assert_fail@plt+0x628>
   11fc8:	add	r3, sp, #136	; 0x88
   11fcc:	mov	r2, #1
   11fd0:	ldr	r1, [pc, #1132]	; 12444 <__assert_fail@plt+0xa88>
   11fd4:	mov	r0, fp
   11fd8:	str	r3, [sp]
   11fdc:	add	r3, sp, #132	; 0x84
   11fe0:	bl	14054 <__assert_fail@plt+0x2698>
   11fe4:	vldr	d9, [pc, #1004]	; 123d8 <__assert_fail@plt+0xa1c>
   11fe8:	mov	r3, #0
   11fec:	mov	r7, r3
   11ff0:	ldr	r6, [pc, #1004]	; 123e4 <__assert_fail@plt+0xa28>
   11ff4:	str	r3, [sp, #68]	; 0x44
   11ff8:	ldr	r3, [sp, #56]	; 0x38
   11ffc:	cmp	r3, #0
   12000:	beq	12018 <__assert_fail@plt+0x65c>
   12004:	ldrd	r0, [r6, #88]	; 0x58
   12008:	ldrd	r2, [r6, #96]	; 0x60
   1200c:	cmp	r1, r3
   12010:	cmpeq	r0, r2
   12014:	bls	12378 <__assert_fail@plt+0x9bc>
   12018:	mov	r2, #0
   1201c:	mov	r3, #0
   12020:	cmp	fp, #0
   12024:	strd	r2, [r6, #32]
   12028:	strd	r2, [r6, #40]	; 0x28
   1202c:	strd	r2, [r6, #48]	; 0x30
   12030:	strd	r2, [r6, #56]	; 0x38
   12034:	strd	r2, [r6, #64]	; 0x40
   12038:	strd	r2, [r6, #72]	; 0x48
   1203c:	beq	120d4 <__assert_fail@plt+0x718>
   12040:	ldr	r1, [sp, #136]	; 0x88
   12044:	cmp	r1, #1
   12048:	bne	123c0 <__assert_fail@plt+0xa04>
   1204c:	ldr	r3, [sp, #132]	; 0x84
   12050:	ldrb	r3, [fp, r3]
   12054:	cmp	r3, #45	; 0x2d
   12058:	bne	1208c <__assert_fail@plt+0x6d0>
   1205c:	ldr	r3, [sp, #68]	; 0x44
   12060:	cmp	r3, #0
   12064:	beq	1217c <__assert_fail@plt+0x7c0>
   12068:	mov	r2, #5
   1206c:	ldr	r1, [pc, #980]	; 12448 <__assert_fail@plt+0xa8c>
   12070:	mov	r0, #0
   12074:	bl	11638 <dcgettext@plt>
   12078:	mov	r1, #0
   1207c:	mov	r2, r0
   12080:	mov	r0, r1
   12084:	bl	116e0 <error@plt>
   12088:	b	11d68 <__assert_fail@plt+0x3ac>
   1208c:	cmp	r3, #46	; 0x2e
   12090:	ldreq	r5, [pc, #948]	; 1244c <__assert_fail@plt+0xa90>
   12094:	moveq	r4, #0
   12098:	beq	120b0 <__assert_fail@plt+0x6f4>
   1209c:	ldr	r0, [sp, #132]	; 0x84
   120a0:	add	r0, fp, r0
   120a4:	bl	115cc <strndup@plt>
   120a8:	mov	r4, r0
   120ac:	mov	r5, r0
   120b0:	mov	r0, r5
   120b4:	bl	12650 <__assert_fail@plt+0xc94>
   120b8:	subs	r8, r0, #0
   120bc:	bge	120f4 <__assert_fail@plt+0x738>
   120c0:	mov	r2, r5
   120c4:	mov	r1, #8
   120c8:	ldr	r4, [r9]
   120cc:	mov	r0, #0
   120d0:	b	12160 <__assert_fail@plt+0x7a4>
   120d4:	ldr	r3, [sp, #52]	; 0x34
   120d8:	cmn	r3, #1
   120dc:	beq	12378 <__assert_fail@plt+0x9bc>
   120e0:	ldr	r5, [r6, #108]	; 0x6c
   120e4:	mov	r8, r3
   120e8:	mov	r4, fp
   120ec:	mvn	r3, #0
   120f0:	str	r3, [sp, #52]	; 0x34
   120f4:	add	r1, sp, #152	; 0x98
   120f8:	mov	r0, r8
   120fc:	bl	25524 <__assert_fail@plt+0x13b68>
   12100:	subs	r7, r0, #0
   12104:	beq	12190 <__assert_fail@plt+0x7d4>
   12108:	ldr	r7, [r9]
   1210c:	mov	r2, r5
   12110:	mov	r1, #8
   12114:	mov	r0, #0
   12118:	bl	1762c <__assert_fail@plt+0x5c70>
   1211c:	mov	r3, r0
   12120:	ldr	r2, [pc, #708]	; 123ec <__assert_fail@plt+0xa30>
   12124:	mov	r0, #0
   12128:	mov	r1, r7
   1212c:	mov	r7, #0
   12130:	bl	116e0 <error@plt>
   12134:	mov	r2, #0
   12138:	mov	r3, #0
   1213c:	strd	r2, [sp, #88]	; 0x58
   12140:	mov	r0, r8
   12144:	ldr	r1, [pc, #772]	; 12450 <__assert_fail@plt+0xa94>
   12148:	bl	1150c <fdopen@plt>
   1214c:	subs	r8, r0, #0
   12150:	bne	122b0 <__assert_fail@plt+0x8f4>
   12154:	ldr	r4, [r9]
   12158:	mov	r2, r5
   1215c:	mov	r1, #8
   12160:	bl	1762c <__assert_fail@plt+0x5c70>
   12164:	mov	r3, r0
   12168:	ldr	r2, [pc, #636]	; 123ec <__assert_fail@plt+0xa30>
   1216c:	mov	r1, r4
   12170:	mov	r0, #0
   12174:	bl	116e0 <error@plt>
   12178:	b	11d68 <__assert_fail@plt+0x3ac>
   1217c:	ldr	r8, [sp, #68]	; 0x44
   12180:	str	r1, [sp, #68]	; 0x44
   12184:	ldr	r5, [pc, #712]	; 12454 <__assert_fail@plt+0xa98>
   12188:	mov	r4, r8
   1218c:	b	120f4 <__assert_fail@plt+0x738>
   12190:	ldrd	r2, [sp, #200]	; 0xc8
   12194:	add	r0, sp, #140	; 0x8c
   12198:	strd	r2, [sp, #88]	; 0x58
   1219c:	ldr	r3, [sp, #232]	; 0xe8
   121a0:	str	r3, [sp, #144]	; 0x90
   121a4:	ldr	r3, [sp, #236]	; 0xec
   121a8:	str	r3, [sp, #148]	; 0x94
   121ac:	bl	11620 <time@plt>
   121b0:	cmn	r0, #1
   121b4:	bne	121ec <__assert_fail@plt+0x830>
   121b8:	ldr	r3, [r9]
   121bc:	mov	r2, #5
   121c0:	mov	r0, r7
   121c4:	ldr	r1, [pc, #652]	; 12458 <__assert_fail@plt+0xa9c>
   121c8:	str	r3, [sp, #112]	; 0x70
   121cc:	bl	11638 <dcgettext@plt>
   121d0:	ldr	r3, [sp, #112]	; 0x70
   121d4:	mov	r2, r0
   121d8:	mov	r0, r7
   121dc:	mov	r1, r3
   121e0:	bl	116e0 <error@plt>
   121e4:	mov	r7, #1
   121e8:	b	12140 <__assert_fail@plt+0x784>
   121ec:	ldr	r0, [sp, #140]	; 0x8c
   121f0:	ldr	r1, [sp, #232]	; 0xe8
   121f4:	bl	11854 <difftime@plt>
   121f8:	ldr	r3, [pc, #548]	; 12424 <__assert_fail@plt+0xa68>
   121fc:	vmov.f64	d8, d0
   12200:	ldr	r2, [r3, #8]
   12204:	ldr	r3, [pc, #592]	; 1245c <__assert_fail@plt+0xaa0>
   12208:	mul	r3, r3, r2
   1220c:	vmov	s15, r3
   12210:	vcvt.f64.u32	d7, s15
   12214:	vcmpe.f64	d0, d7
   12218:	vmrs	APSR_nzcv, fpscr
   1221c:	ble	121e4 <__assert_fail@plt+0x828>
   12220:	mov	r2, #5
   12224:	ldr	r1, [pc, #564]	; 12460 <__assert_fail@plt+0xaa4>
   12228:	mov	r0, r7
   1222c:	bl	11638 <dcgettext@plt>
   12230:	mov	r2, r5
   12234:	mov	r1, #8
   12238:	str	r0, [sp, #112]	; 0x70
   1223c:	mov	r0, r7
   12240:	bl	1762c <__assert_fail@plt+0x5c70>
   12244:	mov	r3, r0
   12248:	mov	r2, #5
   1224c:	ldr	r1, [pc, #528]	; 12464 <__assert_fail@plt+0xaa8>
   12250:	mov	r0, r7
   12254:	str	r3, [sp, #124]	; 0x7c
   12258:	ldr	r3, [pc, #452]	; 12424 <__assert_fail@plt+0xa68>
   1225c:	ldr	r3, [r3, #8]
   12260:	str	r3, [sp, #116]	; 0x74
   12264:	bl	11638 <dcgettext@plt>
   12268:	mov	r2, #5
   1226c:	ldr	r1, [pc, #496]	; 12464 <__assert_fail@plt+0xaa8>
   12270:	str	r0, [sp, #120]	; 0x78
   12274:	mov	r0, r7
   12278:	bl	11638 <dcgettext@plt>
   1227c:	vdiv.f64	d7, d8, d9
   12280:	mov	r1, r7
   12284:	ldr	r2, [sp, #112]	; 0x70
   12288:	ldr	r3, [sp, #120]	; 0x78
   1228c:	str	r3, [sp, #4]
   12290:	ldr	r3, [sp, #116]	; 0x74
   12294:	str	r3, [sp]
   12298:	ldr	r3, [sp, #124]	; 0x7c
   1229c:	vstr	d7, [sp, #8]
   122a0:	str	r0, [sp, #16]
   122a4:	mov	r0, r7
   122a8:	bl	116e0 <error@plt>
   122ac:	b	121e4 <__assert_fail@plt+0x828>
   122b0:	ldr	r3, [pc, #436]	; 1246c <__assert_fail@plt+0xab0>
   122b4:	cmp	r7, #0
   122b8:	addne	r7, sp, #144	; 0x90
   122bc:	ldr	r1, [r3]
   122c0:	str	r7, [sp, #8]
   122c4:	ldr	r3, [sp, #64]	; 0x40
   122c8:	sub	r0, r3, r1
   122cc:	ldr	r3, [sp, #84]	; 0x54
   122d0:	add	r1, r3, r1, lsl #2
   122d4:	ldr	r3, [sp, #104]	; 0x68
   122d8:	str	r3, [sp, #40]	; 0x28
   122dc:	ldr	r3, [sp, #100]	; 0x64
   122e0:	str	r3, [sp, #36]	; 0x24
   122e4:	ldr	r3, [sp, #108]	; 0x6c
   122e8:	str	r3, [sp, #32]
   122ec:	ldr	r3, [sp, #60]	; 0x3c
   122f0:	str	r3, [sp, #28]
   122f4:	ldr	r3, [sp, #56]	; 0x38
   122f8:	str	r3, [sp, #24]
   122fc:	ldr	r3, [sp, #80]	; 0x50
   12300:	str	r3, [sp, #20]
   12304:	ldr	r3, [sp, #72]	; 0x48
   12308:	str	r3, [sp, #16]
   1230c:	ldr	r3, [sp, #96]	; 0x60
   12310:	str	r3, [sp, #12]
   12314:	ldrd	r2, [sp, #88]	; 0x58
   12318:	strd	r2, [sp]
   1231c:	mov	r3, r8
   12320:	mov	r2, r5
   12324:	bl	12d64 <__assert_fail@plt+0x13a8>
   12328:	mov	r7, r0
   1232c:	mov	r0, r8
   12330:	bl	11878 <fclose@plt>
   12334:	cmn	r0, #1
   12338:	beq	120c0 <__assert_fail@plt+0x704>
   1233c:	cmp	r4, #0
   12340:	beq	1234c <__assert_fail@plt+0x990>
   12344:	mov	r0, r4
   12348:	bl	18758 <__assert_fail@plt+0x6d9c>
   1234c:	cmp	fp, #0
   12350:	beq	12378 <__assert_fail@plt+0x9bc>
   12354:	add	r3, sp, #136	; 0x88
   12358:	mov	r2, #0
   1235c:	ldr	r1, [pc, #224]	; 12444 <__assert_fail@plt+0xa88>
   12360:	mov	r0, fp
   12364:	str	r3, [sp]
   12368:	add	r3, sp, #132	; 0x84
   1236c:	bl	14054 <__assert_fail@plt+0x2698>
   12370:	cmp	r0, #0
   12374:	bne	11ff8 <__assert_fail@plt+0x63c>
   12378:	ldr	r3, [sp, #76]	; 0x4c
   1237c:	cmp	r3, #0
   12380:	beq	12390 <__assert_fail@plt+0x9d4>
   12384:	mov	r1, r7
   12388:	ldr	r0, [pc, #216]	; 12468 <__assert_fail@plt+0xaac>
   1238c:	bl	11560 <printf@plt>
   12390:	cmp	r7, #0
   12394:	bne	11d68 <__assert_fail@plt+0x3ac>
   12398:	ldr	r3, [sp, #56]	; 0x38
   1239c:	cmp	r3, #0
   123a0:	beq	123b4 <__assert_fail@plt+0x9f8>
   123a4:	ldr	r3, [pc, #56]	; 123e4 <__assert_fail@plt+0xa28>
   123a8:	ldrd	r2, [r3, #88]	; 0x58
   123ac:	orrs	r3, r2, r3
   123b0:	beq	11d68 <__assert_fail@plt+0x3ac>
   123b4:	ldr	r3, [sp, #60]	; 0x3c
   123b8:	eor	sl, r3, #1
   123bc:	b	11d68 <__assert_fail@plt+0x3ac>
   123c0:	cmp	r1, #0
   123c4:	ldreq	r5, [pc, #128]	; 1244c <__assert_fail@plt+0xa90>
   123c8:	moveq	r4, r1
   123cc:	beq	120b0 <__assert_fail@plt+0x6f4>
   123d0:	b	1209c <__assert_fail@plt+0x6e0>
   123d4:	nop	{0}
   123d8:	andeq	r0, r0, r0
   123dc:	rscsmi	r1, r5, r0, lsl #16
   123e0:	andeq	r5, r2, r8, lsl #12
   123e4:	andeq	r7, r3, r8, lsr #4
   123e8:	muleq	r2, r2, pc	; <UNPREDICTABLE>
   123ec:	andeq	r6, r2, r8, lsr #27
   123f0:			; <UNDEFINED> instruction: 0x00025fb2
   123f4:	ldrdeq	r5, [r2], -r3
   123f8:	strdeq	r5, [r2], -r3
   123fc:	ldrdeq	r5, [r2], -ip
   12400:	strdeq	r5, [r2], -r7
   12404:	andeq	r6, r2, r4, lsl r0
   12408:	strdeq	r6, [r2], -sp
   1240c:	andeq	r4, r1, r0, ror #3
   12410:	andeq	r6, r2, ip, lsr #32
   12414:	andeq	r2, r1, ip, lsl #13
   12418:	andeq	r5, r2, r4, lsl r6
   1241c:	andeq	r6, r2, fp, asr r0
   12420:	andeq	r6, r2, pc, asr #32
   12424:			; <UNDEFINED> instruction: 0x000371b0
   12428:	andeq	r7, r3, r0, lsr #4
   1242c:	andeq	r5, r2, r4, lsl #15
   12430:	muleq	r2, lr, r9
   12434:	andeq	r6, r2, r0, ror r0
   12438:	andeq	r6, r2, pc, ror r0
   1243c:	strheq	r6, [r2], -ip
   12440:	andeq	r7, r3, r0, lsl #5
   12444:	muleq	r2, ip, sp
   12448:	andeq	r6, r2, r8, lsl #2
   1244c:	andeq	r5, r2, r2, ror pc
   12450:	andeq	r6, r2, ip, asr #5
   12454:	andeq	r5, r2, sl, lsl #31
   12458:	andeq	r6, r2, r7, asr #2
   1245c:	andeq	r5, r1, r0, lsl #3
   12460:	andeq	r6, r2, pc, asr r1
   12464:	andeq	r5, r2, sp, lsl #15
   12468:	andeq	r6, r2, r3, lsr #3
   1246c:	andeq	r7, r3, r0, lsl r2
   12470:	andeq	r6, r2, lr, ror #1
   12474:	ldr	r3, [pc, #-16]	; 1246c <__assert_fail@plt+0xab0>
   12478:	ldr	r2, [sp, #64]	; 0x40
   1247c:	ldr	r3, [r3]
   12480:	cmp	r2, r3
   12484:	movne	r3, #1
   12488:	strne	r3, [sp, #72]	; 0x48
   1248c:	bne	11fa4 <__assert_fail@plt+0x5e8>
   12490:	mov	r2, #5
   12494:	ldr	r1, [pc, #-44]	; 12470 <__assert_fail@plt+0xab4>
   12498:	mov	r0, r4
   1249c:	bl	11638 <dcgettext@plt>
   124a0:	mov	r2, r0
   124a4:	mov	r1, r4
   124a8:	mov	r0, r4
   124ac:	bl	116e0 <error@plt>
   124b0:	b	11c70 <__assert_fail@plt+0x2b4>
   124b4:	mov	fp, #0
   124b8:	mov	lr, #0
   124bc:	pop	{r1}		; (ldr r1, [sp], #4)
   124c0:	mov	r2, sp
   124c4:	push	{r2}		; (str r2, [sp, #-4]!)
   124c8:	push	{r0}		; (str r0, [sp, #-4]!)
   124cc:	ldr	ip, [pc, #16]	; 124e4 <__assert_fail@plt+0xb28>
   124d0:	push	{ip}		; (str ip, [sp, #-4]!)
   124d4:	ldr	r0, [pc, #12]	; 124e8 <__assert_fail@plt+0xb2c>
   124d8:	ldr	r3, [pc, #12]	; 124ec <__assert_fail@plt+0xb30>
   124dc:	bl	11728 <__libc_start_main@plt>
   124e0:	bl	11980 <abort@plt>
   124e4:	strdeq	r5, [r2], -r8
   124e8:	andeq	r1, r1, r0, ror #19
   124ec:	muleq	r2, r8, r4
   124f0:	ldr	r3, [pc, #20]	; 1250c <__assert_fail@plt+0xb50>
   124f4:	ldr	r2, [pc, #20]	; 12510 <__assert_fail@plt+0xb54>
   124f8:	add	r3, pc, r3
   124fc:	ldr	r2, [r3, r2]
   12500:	cmp	r2, #0
   12504:	bxeq	lr
   12508:	b	11764 <__gmon_start__@plt>
   1250c:	andeq	r4, r2, r0, lsl #22
   12510:	andeq	r0, r0, r4, lsr #3
   12514:	ldr	r0, [pc, #24]	; 12534 <__assert_fail@plt+0xb78>
   12518:	ldr	r3, [pc, #24]	; 12538 <__assert_fail@plt+0xb7c>
   1251c:	cmp	r3, r0
   12520:	bxeq	lr
   12524:	ldr	r3, [pc, #16]	; 1253c <__assert_fail@plt+0xb80>
   12528:	cmp	r3, #0
   1252c:	bxeq	lr
   12530:	bx	r3
   12534:	andeq	r7, r3, r8, lsl #4
   12538:	andeq	r7, r3, r8, lsl #4
   1253c:	andeq	r0, r0, r0
   12540:	ldr	r0, [pc, #36]	; 1256c <__assert_fail@plt+0xbb0>
   12544:	ldr	r1, [pc, #36]	; 12570 <__assert_fail@plt+0xbb4>
   12548:	sub	r1, r1, r0
   1254c:	asr	r1, r1, #2
   12550:	add	r1, r1, r1, lsr #31
   12554:	asrs	r1, r1, #1
   12558:	bxeq	lr
   1255c:	ldr	r3, [pc, #16]	; 12574 <__assert_fail@plt+0xbb8>
   12560:	cmp	r3, #0
   12564:	bxeq	lr
   12568:	bx	r3
   1256c:	andeq	r7, r3, r8, lsl #4
   12570:	andeq	r7, r3, r8, lsl #4
   12574:	andeq	r0, r0, r0
   12578:	push	{r4, lr}
   1257c:	ldr	r4, [pc, #24]	; 1259c <__assert_fail@plt+0xbe0>
   12580:	ldrb	r3, [r4]
   12584:	cmp	r3, #0
   12588:	popne	{r4, pc}
   1258c:	bl	12514 <__assert_fail@plt+0xb58>
   12590:	mov	r3, #1
   12594:	strb	r3, [r4]
   12598:	pop	{r4, pc}
   1259c:	andeq	r7, r3, r4, lsr #4
   125a0:	b	12540 <__assert_fail@plt+0xb84>
   125a4:	andeq	r0, r0, r0
   125a8:	push	{r4, r5, r6, r7, r8, lr}
   125ac:	mov	r4, r0
   125b0:	mov	r5, r1
   125b4:	mov	r7, r2
   125b8:	mov	r6, r3
   125bc:	mov	r0, r1
   125c0:	and	r1, r0, r5
   125c4:	cmp	r4, r6
   125c8:	cmpne	r1, #0
   125cc:	popeq	{r4, r5, r6, r7, r8, pc}
   125d0:	mov	r0, r7
   125d4:	ldr	r3, [r4]
   125d8:	ldr	r1, [r4, #4]
   125dc:	blx	r3
   125e0:	ldr	r4, [r4, #8]
   125e4:	b	125c0 <__assert_fail@plt+0xc04>
   125e8:	mov	r2, r0
   125ec:	ldr	r0, [pc, #12]	; 12600 <__assert_fail@plt+0xc44>
   125f0:	mov	r3, #0
   125f4:	mov	r1, #3
   125f8:	ldr	r0, [r0]
   125fc:	b	125a8 <__assert_fail@plt+0xbec>
   12600:	andeq	r7, r3, r8, lsr #4
   12604:	ldr	r0, [r1, #8]
   12608:	ldr	ip, [r1, #12]
   1260c:	adds	r2, r0, #1
   12610:	adc	r3, ip, #0
   12614:	strd	r2, [r1, #8]
   12618:	ldrd	r0, [r1]
   1261c:	cmp	r3, r1
   12620:	cmpeq	r2, r0
   12624:	movcs	r0, #8
   12628:	movcc	r0, #1
   1262c:	bx	lr
   12630:	ldr	r3, [r1, #8]
   12634:	mov	r0, #1
   12638:	ldr	r2, [r1, #12]
   1263c:	adds	r3, r3, #1
   12640:	adc	r2, r2, #0
   12644:	str	r3, [r1, #8]
   12648:	str	r2, [r1, #12]
   1264c:	bx	lr
   12650:	push	{r4, lr}
   12654:	mov	r1, #131072	; 0x20000
   12658:	bl	142b4 <__assert_fail@plt+0x28f8>
   1265c:	subs	r4, r0, #0
   12660:	blt	12684 <__assert_fail@plt+0xcc8>
   12664:	mov	r2, #1
   12668:	mov	r1, #2
   1266c:	bl	18558 <__assert_fail@plt+0x6b9c>
   12670:	cmp	r0, #0
   12674:	beq	12684 <__assert_fail@plt+0xcc8>
   12678:	mov	r0, r4
   1267c:	mvn	r4, #0
   12680:	bl	11998 <close@plt>
   12684:	mov	r0, r4
   12688:	pop	{r4, pc}
   1268c:	ldr	r3, [pc, #4]	; 12698 <__assert_fail@plt+0xcdc>
   12690:	ldr	r0, [r3, #4]
   12694:	b	18758 <__assert_fail@plt+0x6d9c>
   12698:	andeq	r7, r3, r8, lsr #4
   1269c:	subs	r6, r0, #0
   126a0:	push	{r7, lr}
   126a4:	ldr	r4, [pc, #104]	; 12714 <__assert_fail@plt+0xd58>
   126a8:	beq	126dc <__assert_fail@plt+0xd20>
   126ac:	mov	r2, #5
   126b0:	mov	r0, #0
   126b4:	ldr	r3, [pc, #92]	; 12718 <__assert_fail@plt+0xd5c>
   126b8:	ldr	r1, [pc, #92]	; 1271c <__assert_fail@plt+0xd60>
   126bc:	ldr	r5, [r3]
   126c0:	bl	11638 <dcgettext@plt>
   126c4:	mov	r1, r0
   126c8:	ldr	r2, [r4]
   126cc:	mov	r0, r5
   126d0:	bl	117c4 <fprintf@plt>
   126d4:	mov	r0, #1
   126d8:	bl	11788 <exit@plt>
   126dc:	ldr	r5, [pc, #60]	; 12720 <__assert_fail@plt+0xd64>
   126e0:	mov	r2, #5
   126e4:	ldr	r1, [pc, #56]	; 12724 <__assert_fail@plt+0xd68>
   126e8:	ldr	r7, [r5]
   126ec:	bl	11638 <dcgettext@plt>
   126f0:	mov	r1, r0
   126f4:	ldr	r2, [r4]
   126f8:	mov	r0, r7
   126fc:	bl	117c4 <fprintf@plt>
   12700:	ldr	r1, [r4]
   12704:	ldr	r0, [r5]
   12708:	bl	140d4 <__assert_fail@plt+0x2718>
   1270c:	mov	r0, r6
   12710:	b	126d8 <__assert_fail@plt+0xd1c>
   12714:	andeq	r7, r3, r0, lsr #5
   12718:	andeq	r7, r3, r8, lsl r2
   1271c:	muleq	r2, r2, r7
   12720:	andeq	r7, r3, ip, lsl r2
   12724:			; <UNDEFINED> instruction: 0x000257b9
   12728:	push	{r4, r5, r6, lr}
   1272c:	mov	r5, r0
   12730:	mov	r0, #12
   12734:	mov	r4, r1
   12738:	bl	17d6c <__assert_fail@plt+0x63b0>
   1273c:	mov	r3, #0
   12740:	str	r5, [r0]
   12744:	str	r4, [r0, #4]
   12748:	str	r3, [r0, #8]
   1274c:	ldr	r3, [pc, #20]	; 12768 <__assert_fail@plt+0xdac>
   12750:	ldr	r2, [r3, #8]
   12754:	str	r0, [r3, #8]
   12758:	cmp	r2, #0
   1275c:	streq	r0, [r3]
   12760:	strne	r0, [r2, #8]
   12764:	pop	{r4, r5, r6, pc}
   12768:	andeq	r7, r3, r8, lsr #4
   1276c:	ldr	r3, [pc, #32]	; 12794 <__assert_fail@plt+0xdd8>
   12770:	push	{r4, lr}
   12774:	ldr	r0, [r0, #12]
   12778:	ldr	r1, [r3]
   1277c:	bl	11968 <fputs@plt>
   12780:	ldr	r3, [pc, #16]	; 12798 <__assert_fail@plt+0xddc>
   12784:	ldr	r0, [r3]
   12788:	bl	11824 <putchar@plt>
   1278c:	mov	r0, #1
   12790:	pop	{r4, pc}
   12794:	andeq	r7, r3, ip, lsl r2
   12798:			; <UNDEFINED> instruction: 0x000371b0
   1279c:	push	{r0, r1, r2, lr}
   127a0:	ldr	r1, [pc, #52]	; 127dc <__assert_fail@plt+0xe20>
   127a4:	ldr	r3, [r0, #12]
   127a8:	ldr	r0, [pc, #48]	; 127e0 <__assert_fail@plt+0xe24>
   127ac:	str	r3, [sp]
   127b0:	ldr	r3, [pc, #44]	; 127e4 <__assert_fail@plt+0xe28>
   127b4:	ldrb	r2, [r1, #12]
   127b8:	ldr	r0, [r0]
   127bc:	ldr	r1, [r1, #4]
   127c0:	bl	13c30 <__assert_fail@plt+0x2274>
   127c4:	ldr	r3, [pc, #28]	; 127e8 <__assert_fail@plt+0xe2c>
   127c8:	ldr	r0, [r3]
   127cc:	bl	11824 <putchar@plt>
   127d0:	mov	r0, #1
   127d4:	add	sp, sp, #12
   127d8:	pop	{pc}		; (ldr pc, [sp], #4)
   127dc:	andeq	r7, r3, r8, lsr #4
   127e0:	andeq	r7, r3, ip, lsl r2
   127e4:	andeq	r6, r2, r8, lsr #27
   127e8:			; <UNDEFINED> instruction: 0x000371b0
   127ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127f0:	mov	r4, r1
   127f4:	mov	r6, #0
   127f8:	ldr	r7, [r0, #12]
   127fc:	mov	r0, r7
   12800:	sub	r7, r7, #1
   12804:	bl	117ac <strlen@plt>
   12808:	ldr	r3, [r4, #8]
   1280c:	ldr	r2, [r4, #12]
   12810:	adds	r3, r3, #1
   12814:	adc	r2, r2, #0
   12818:	str	r3, [r4, #8]
   1281c:	str	r2, [r4, #12]
   12820:	ldrd	r2, [r4, #16]
   12824:	adds	r8, r2, r0
   12828:	adc	r9, r3, #0
   1282c:	mov	r0, r8
   12830:	mov	r1, r9
   12834:	mov	r8, r6
   12838:	mov	r9, r6
   1283c:	strd	r0, [r4, #16]
   12840:	ldrb	r5, [r7, #1]!
   12844:	cmp	r5, #0
   12848:	bne	128b4 <__assert_fail@plt+0xef8>
   1284c:	cmp	r9, #0
   12850:	beq	1286c <__assert_fail@plt+0xeb0>
   12854:	ldr	r3, [r4, #40]	; 0x28
   12858:	ldr	r2, [r4, #44]	; 0x2c
   1285c:	adds	r3, r3, #1
   12860:	adc	r2, r2, #0
   12864:	str	r3, [r4, #40]	; 0x28
   12868:	str	r2, [r4, #44]	; 0x2c
   1286c:	cmp	r8, #0
   12870:	beq	1288c <__assert_fail@plt+0xed0>
   12874:	ldr	r3, [r4, #24]
   12878:	ldr	r2, [r4, #28]
   1287c:	adds	r3, r3, #1
   12880:	adc	r2, r2, #0
   12884:	str	r3, [r4, #24]
   12888:	str	r2, [r4, #28]
   1288c:	cmp	r6, #0
   12890:	beq	128ac <__assert_fail@plt+0xef0>
   12894:	ldr	r3, [r4, #32]
   12898:	ldr	r2, [r4, #36]	; 0x24
   1289c:	adds	r3, r3, #1
   128a0:	adc	r2, r2, #0
   128a4:	str	r3, [r4, #32]
   128a8:	str	r2, [r4, #36]	; 0x24
   128ac:	mov	r0, #1
   128b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128b4:	tst	r5, #128	; 0x80
   128b8:	bne	128e8 <__assert_fail@plt+0xf2c>
   128bc:	cmp	r5, #10
   128c0:	moveq	r6, #1
   128c4:	moveq	r8, r6
   128c8:	beq	12840 <__assert_fail@plt+0xe84>
   128cc:	bl	1177c <__ctype_b_loc@plt>
   128d0:	ldr	r3, [r0]
   128d4:	lsl	r5, r5, #1
   128d8:	ldrh	r3, [r3, r5]
   128dc:	tst	r3, #8192	; 0x2000
   128e0:	movne	r8, #1
   128e4:	b	12840 <__assert_fail@plt+0xe84>
   128e8:	mov	r9, #1
   128ec:	b	128cc <__assert_fail@plt+0xf10>
   128f0:	push	{lr}		; (str lr, [sp, #-4]!)
   128f4:	sub	sp, sp, #108	; 0x6c
   128f8:	mov	r1, sp
   128fc:	ldr	r0, [r0, #12]
   12900:	bl	25534 <__assert_fail@plt+0x13b78>
   12904:	cmp	r0, #0
   12908:	moveq	r0, #4
   1290c:	movne	r0, #1
   12910:	add	sp, sp, #108	; 0x6c
   12914:	pop	{pc}		; (ldr pc, [sp], #4)
   12918:	push	{lr}		; (str lr, [sp, #-4]!)
   1291c:	sub	sp, sp, #108	; 0x6c
   12920:	mov	r1, sp
   12924:	ldr	r0, [r0, #12]
   12928:	bl	25534 <__assert_fail@plt+0x13b78>
   1292c:	cmp	r0, #0
   12930:	movne	r0, #4
   12934:	moveq	r0, #1
   12938:	add	sp, sp, #108	; 0x6c
   1293c:	pop	{pc}		; (ldr pc, [sp], #4)
   12940:	push	{lr}		; (str lr, [sp, #-4]!)
   12944:	sub	sp, sp, #108	; 0x6c
   12948:	mov	r1, sp
   1294c:	ldr	r0, [r0, #12]
   12950:	bl	25514 <__assert_fail@plt+0x13b58>
   12954:	cmp	r0, #0
   12958:	moveq	r0, #4
   1295c:	movne	r0, #1
   12960:	add	sp, sp, #108	; 0x6c
   12964:	pop	{pc}		; (ldr pc, [sp], #4)
   12968:	push	{lr}		; (str lr, [sp, #-4]!)
   1296c:	sub	sp, sp, #108	; 0x6c
   12970:	mov	r1, sp
   12974:	ldr	r0, [r0, #12]
   12978:	bl	25514 <__assert_fail@plt+0x13b58>
   1297c:	cmp	r0, #0
   12980:	movne	r0, #4
   12984:	moveq	r0, #1
   12988:	add	sp, sp, #108	; 0x6c
   1298c:	pop	{pc}		; (ldr pc, [sp], #4)
   12990:	push	{r4, lr}
   12994:	ldr	r0, [r0, #20]
   12998:	bl	15c60 <__assert_fail@plt+0x42a4>
   1299c:	cmp	r0, #0
   129a0:	movne	r0, #2
   129a4:	moveq	r0, #4
   129a8:	pop	{r4, pc}
   129ac:	push	{r4, lr}
   129b0:	ldr	r0, [r0, #20]
   129b4:	bl	151b8 <__assert_fail@plt+0x37fc>
   129b8:	cmp	r0, #0
   129bc:	movne	r0, #2
   129c0:	moveq	r0, #4
   129c4:	pop	{r4, pc}
   129c8:	mov	r3, r1
   129cc:	push	{r4, lr}
   129d0:	mov	r2, #0
   129d4:	ldr	r1, [r0, #20]
   129d8:	mov	r0, r3
   129dc:	bl	116ec <fnmatch@plt>
   129e0:	cmp	r0, #0
   129e4:	movne	r0, #4
   129e8:	moveq	r0, #2
   129ec:	pop	{r4, pc}
   129f0:	mov	r3, r1
   129f4:	push	{r4, lr}
   129f8:	mov	r2, #16
   129fc:	ldr	r1, [r0, #20]
   12a00:	mov	r0, r3
   12a04:	bl	116ec <fnmatch@plt>
   12a08:	cmp	r0, #0
   12a0c:	movne	r0, #4
   12a10:	moveq	r0, #2
   12a14:	pop	{r4, pc}
   12a18:	push	{r0, r1, r2, r4, r5, lr}
   12a1c:	mov	r5, r1
   12a20:	ldr	r4, [r0, #20]
   12a24:	mov	r0, r4
   12a28:	bl	117ac <strlen@plt>
   12a2c:	mov	r2, r0
   12a30:	mov	r3, #0
   12a34:	mov	r1, r4
   12a38:	mov	r0, r5
   12a3c:	strd	r2, [sp]
   12a40:	bl	23650 <__assert_fail@plt+0x11c94>
   12a44:	cmp	r0, #0
   12a48:	movlt	r0, #4
   12a4c:	movge	r0, #2
   12a50:	add	sp, sp, #12
   12a54:	pop	{r4, r5, pc}
   12a58:	push	{r4, lr}
   12a5c:	mov	r4, r0
   12a60:	ldr	r0, [r0, #12]
   12a64:	bl	1413c <__assert_fail@plt+0x2780>
   12a68:	str	r0, [r4, #20]
   12a6c:	mov	r0, #1
   12a70:	pop	{r4, pc}
   12a74:	push	{r4, r5, r6, lr}
   12a78:	mov	r2, r0
   12a7c:	mov	r5, r0
   12a80:	mov	r1, #3
   12a84:	ldr	r4, [pc, #60]	; 12ac8 <__assert_fail@plt+0x110c>
   12a88:	ldr	r0, [r4]
   12a8c:	ldr	r3, [r4, #16]
   12a90:	bl	125a8 <__assert_fail@plt+0xbec>
   12a94:	cmp	r0, #1
   12a98:	beq	12ac0 <__assert_fail@plt+0x1104>
   12a9c:	ands	r3, r0, #12
   12aa0:	popne	{r4, r5, r6, pc}
   12aa4:	mov	r2, r5
   12aa8:	mov	r1, #1
   12aac:	ldr	r0, [r4, #16]
   12ab0:	bl	125a8 <__assert_fail@plt+0xbec>
   12ab4:	cmp	r0, #1
   12ab8:	moveq	r0, #2
   12abc:	pop	{r4, r5, r6, pc}
   12ac0:	mov	r0, #4
   12ac4:	pop	{r4, r5, r6, pc}
   12ac8:	andeq	r7, r3, r8, lsr #4
   12acc:	mvn	r3, r1
   12ad0:	push	{r4, lr}
   12ad4:	mov	r4, r0
   12ad8:	cmp	r3, r2
   12adc:	bcs	12b04 <__assert_fail@plt+0x1148>
   12ae0:	mov	r2, #5
   12ae4:	ldr	r1, [pc, #68]	; 12b30 <__assert_fail@plt+0x1174>
   12ae8:	mov	r0, #0
   12aec:	bl	11638 <dcgettext@plt>
   12af0:	mov	r2, r0
   12af4:	mov	r1, #0
   12af8:	ldr	r3, [r4, #28]
   12afc:	mov	r0, #1
   12b00:	bl	116e0 <error@plt>
   12b04:	ldr	r3, [r0, #16]
   12b08:	add	r2, r1, r2
   12b0c:	cmp	r3, r2
   12b10:	popcs	{r4, pc}
   12b14:	mov	r1, r0
   12b18:	ldr	r0, [r0, #12]
   12b1c:	str	r2, [r1, #16]!
   12b20:	mov	r2, #1
   12b24:	bl	17e4c <__assert_fail@plt+0x6490>
   12b28:	str	r0, [r4, #12]
   12b2c:	pop	{r4, pc}
   12b30:	andeq	r5, r2, r9, asr r9
   12b34:	ldr	r3, [r0]
   12b38:	cmn	r3, #1
   12b3c:	beq	12ca4 <__assert_fail@plt+0x12e8>
   12b40:	cmp	r3, #30
   12b44:	push	{r4, r5, r6, lr}
   12b48:	mov	r4, r0
   12b4c:	ldr	r2, [r0, #4]
   12b50:	bne	12bbc <__assert_fail@plt+0x1200>
   12b54:	sub	r3, r2, #14
   12b58:	rsb	r5, r2, #14
   12b5c:	ldr	r2, [r0, #8]
   12b60:	cmp	r3, #0
   12b64:	str	r3, [r0, #4]
   12b68:	subge	r2, r2, r3
   12b6c:	add	r3, r0, #32
   12b70:	ldrd	r0, [r0, #24]
   12b74:	bl	13a50 <__assert_fail@plt+0x2094>
   12b78:	cmp	r5, r0
   12b7c:	ble	12b94 <__assert_fail@plt+0x11d8>
   12b80:	ldr	r3, [pc, #292]	; 12cac <__assert_fail@plt+0x12f0>
   12b84:	movw	r2, #478	; 0x1de
   12b88:	ldr	r1, [pc, #288]	; 12cb0 <__assert_fail@plt+0x12f4>
   12b8c:	ldr	r0, [pc, #288]	; 12cb4 <__assert_fail@plt+0x12f8>
   12b90:	bl	119bc <__assert_fail@plt>
   12b94:	ldr	r3, [r4, #4]
   12b98:	add	r0, r0, r3
   12b9c:	cmp	r0, #0
   12ba0:	str	r0, [r4, #4]
   12ba4:	bge	12be4 <__assert_fail@plt+0x1228>
   12ba8:	ldr	r3, [pc, #252]	; 12cac <__assert_fail@plt+0x12f0>
   12bac:	mov	r2, #480	; 0x1e0
   12bb0:	ldr	r1, [pc, #248]	; 12cb0 <__assert_fail@plt+0x12f4>
   12bb4:	ldr	r0, [pc, #252]	; 12cb8 <__assert_fail@plt+0x12fc>
   12bb8:	bl	119bc <__assert_fail@plt>
   12bbc:	sub	r3, r3, #14
   12bc0:	add	r3, r3, r2
   12bc4:	cmp	r3, #0
   12bc8:	str	r3, [r0, #4]
   12bcc:	bge	12be4 <__assert_fail@plt+0x1228>
   12bd0:	ldr	r3, [pc, #212]	; 12cac <__assert_fail@plt+0x12f0>
   12bd4:	movw	r2, #485	; 0x1e5
   12bd8:	ldr	r1, [pc, #208]	; 12cb0 <__assert_fail@plt+0x12f4>
   12bdc:	ldr	r0, [pc, #212]	; 12cb8 <__assert_fail@plt+0x12fc>
   12be0:	bl	119bc <__assert_fail@plt>
   12be4:	ldr	r5, [r4, #4]
   12be8:	ldr	r0, [r4, #24]
   12bec:	bl	1198c <getc@plt>
   12bf0:	cmp	r0, #30
   12bf4:	str	r0, [r4]
   12bf8:	bgt	12c2c <__assert_fail@plt+0x1270>
   12bfc:	mov	r0, r4
   12c00:	mov	r2, #1
   12c04:	mov	r1, r5
   12c08:	bl	12acc <__assert_fail@plt+0x1110>
   12c0c:	ldr	r3, [r4, #12]
   12c10:	mov	r2, #0
   12c14:	mov	r0, #1
   12c18:	strb	r2, [r3, r5]
   12c1c:	ldr	r3, [r4, #12]
   12c20:	str	r5, [r4, #8]
   12c24:	str	r3, [r4, #20]
   12c28:	pop	{r4, r5, r6, pc}
   12c2c:	cmp	r0, #127	; 0x7f
   12c30:	add	r6, r5, #1
   12c34:	bgt	12c5c <__assert_fail@plt+0x12a0>
   12c38:	mov	r2, #1
   12c3c:	mov	r1, r5
   12c40:	mov	r0, r4
   12c44:	bl	12acc <__assert_fail@plt+0x1110>
   12c48:	ldr	r2, [r4]
   12c4c:	ldr	r3, [r4, #12]
   12c50:	strb	r2, [r3, r5]
   12c54:	mov	r5, r6
   12c58:	b	12be8 <__assert_fail@plt+0x122c>
   12c5c:	mov	r2, #2
   12c60:	mov	r1, r5
   12c64:	mov	r0, r4
   12c68:	bl	12acc <__assert_fail@plt+0x1110>
   12c6c:	ldr	r2, [r4]
   12c70:	mov	r3, r4
   12c74:	and	r2, r2, #127	; 0x7f
   12c78:	str	r2, [r3], r2
   12c7c:	ldrb	r2, [r3, #36]	; 0x24
   12c80:	ldr	r3, [r4, #12]
   12c84:	strb	r2, [r3, r5]
   12c88:	ldr	r3, [r4]
   12c8c:	add	r3, r4, r3
   12c90:	ldrb	r2, [r3, #164]	; 0xa4
   12c94:	ldr	r3, [r4, #12]
   12c98:	strb	r2, [r3, r6]
   12c9c:	add	r6, r5, #2
   12ca0:	b	12c54 <__assert_fail@plt+0x1298>
   12ca4:	mov	r0, #8
   12ca8:	bx	lr
   12cac:	andeq	r5, r2, r0, asr r5
   12cb0:	muleq	r2, lr, r9
   12cb4:	andeq	r5, r2, r7, lsr #19
   12cb8:			; <UNDEFINED> instruction: 0x000259b6
   12cbc:	push	{r4, r5, r6, lr}
   12cc0:	mov	r4, r0
   12cc4:	mov	r5, r1
   12cc8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   12ccc:	cmp	r0, #1
   12cd0:	beq	12ce8 <__assert_fail@plt+0x132c>
   12cd4:	ldr	r3, [pc, #40]	; 12d04 <__assert_fail@plt+0x1348>
   12cd8:	movw	r2, #690	; 0x2b2
   12cdc:	ldr	r1, [pc, #36]	; 12d08 <__assert_fail@plt+0x134c>
   12ce0:	ldr	r0, [pc, #36]	; 12d0c <__assert_fail@plt+0x1350>
   12ce4:	bl	119bc <__assert_fail@plt>
   12ce8:	mov	r1, r5
   12cec:	ldr	r0, [r4, #20]
   12cf0:	bl	2464c <__assert_fail@plt+0x12c90>
   12cf4:	cmp	r0, #0
   12cf8:	movne	r0, #2
   12cfc:	moveq	r0, #4
   12d00:	pop	{r4, r5, r6, pc}
   12d04:	andeq	r5, r2, r1, ror #10
   12d08:	muleq	r2, lr, r9
   12d0c:	andeq	r5, r2, fp, asr #19
   12d10:	push	{r4, r5, r6, lr}
   12d14:	mov	r4, r0
   12d18:	mov	r5, r1
   12d1c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   12d20:	cmp	r0, #1
   12d24:	beq	12d3c <__assert_fail@plt+0x1380>
   12d28:	ldr	r3, [pc, #40]	; 12d58 <__assert_fail@plt+0x139c>
   12d2c:	movw	r2, #714	; 0x2ca
   12d30:	ldr	r1, [pc, #36]	; 12d5c <__assert_fail@plt+0x13a0>
   12d34:	ldr	r0, [pc, #36]	; 12d60 <__assert_fail@plt+0x13a4>
   12d38:	bl	119bc <__assert_fail@plt>
   12d3c:	mov	r1, r5
   12d40:	ldr	r0, [r4, #20]
   12d44:	bl	23e08 <__assert_fail@plt+0x1244c>
   12d48:	cmp	r0, #0
   12d4c:	movne	r0, #2
   12d50:	moveq	r0, #4
   12d54:	pop	{r4, r5, r6, pc}
   12d58:	andeq	r5, r2, r9, lsl #11
   12d5c:	muleq	r2, lr, r9
   12d60:	andeq	r5, r2, fp, asr #19
   12d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d68:	sub	sp, sp, #2928	; 0xb70
   12d6c:	mov	r8, r2
   12d70:	sub	sp, sp, #12
   12d74:	mov	sl, r0
   12d78:	mov	r0, #128	; 0x80
   12d7c:	ldr	r2, [sp, #2976]	; 0xba0
   12d80:	ldr	r7, [pc, #2360]	; 136c0 <__assert_fail@plt+0x1d04>
   12d84:	str	r2, [sp, #16]
   12d88:	ldr	r2, [sp, #2980]	; 0xba4
   12d8c:	str	r1, [sp, #24]
   12d90:	str	r0, [sp, #52]	; 0x34
   12d94:	str	r3, [sp, #60]	; 0x3c
   12d98:	str	r8, [sp, #64]	; 0x40
   12d9c:	str	r2, [sp, #28]
   12da0:	ldr	r2, [sp, #2988]	; 0xbac
   12da4:	ldr	r5, [r7, #20]
   12da8:	cmp	r2, #0
   12dac:	ldrne	r2, [sp, #3016]	; 0xbc8
   12db0:	orrne	r2, r2, #4194304	; 0x400000
   12db4:	strne	r2, [sp, #3016]	; 0xbc8
   12db8:	mov	r2, #0
   12dbc:	str	r2, [r7]
   12dc0:	str	r2, [r7, #8]
   12dc4:	str	r2, [r7, #16]
   12dc8:	strb	r2, [r7, #24]
   12dcc:	str	r2, [sp, #40]	; 0x28
   12dd0:	str	r2, [sp, #44]	; 0x2c
   12dd4:	str	r2, [sp, #68]	; 0x44
   12dd8:	bl	17d6c <__assert_fail@plt+0x63b0>
   12ddc:	mov	r2, #2
   12de0:	mov	r1, #1
   12de4:	ldr	r3, [sp, #60]	; 0x3c
   12de8:	str	r0, [sp, #48]	; 0x30
   12dec:	bl	116bc <fread@plt>
   12df0:	cmp	r0, #2
   12df4:	mov	r6, r0
   12df8:	bls	12e10 <__assert_fail@plt+0x1454>
   12dfc:	ldr	r3, [pc, #2240]	; 136c4 <__assert_fail@plt+0x1d08>
   12e00:	movw	r2, #935	; 0x3a7
   12e04:	ldr	r1, [pc, #2236]	; 136c8 <__assert_fail@plt+0x1d0c>
   12e08:	ldr	r0, [pc, #2236]	; 136cc <__assert_fail@plt+0x1d10>
   12e0c:	bl	119bc <__assert_fail@plt>
   12e10:	bne	13184 <__assert_fail@plt+0x17c8>
   12e14:	ldr	r9, [sp, #48]	; 0x30
   12e18:	ldrb	r4, [r9, #1]
   12e1c:	cmp	r4, #0
   12e20:	bne	13184 <__assert_fail@plt+0x17c8>
   12e24:	bl	1177c <__ctype_b_loc@plt>
   12e28:	ldrb	r3, [r9]
   12e2c:	ldr	r1, [r0]
   12e30:	lsl	r2, r3, #1
   12e34:	ldrh	r2, [r1, r2]
   12e38:	tst	r2, #2048	; 0x800
   12e3c:	beq	13184 <__assert_fail@plt+0x17c8>
   12e40:	sub	r6, r3, #48	; 0x30
   12e44:	cmp	r6, #1
   12e48:	ble	12edc <__assert_fail@plt+0x1520>
   12e4c:	ldr	r7, [sp, #64]	; 0x40
   12e50:	mov	r2, #5
   12e54:	mov	r0, r4
   12e58:	ldr	r1, [pc, #2160]	; 136d0 <__assert_fail@plt+0x1d14>
   12e5c:	bl	11638 <dcgettext@plt>
   12e60:	mov	r5, r0
   12e64:	mov	r1, #8
   12e68:	mov	r2, r7
   12e6c:	mov	r0, r4
   12e70:	bl	1762c <__assert_fail@plt+0x5c70>
   12e74:	ldrb	r3, [r9, #1]
   12e78:	mov	r2, r5
   12e7c:	mov	r1, r4
   12e80:	str	r3, [sp]
   12e84:	mov	r3, r0
   12e88:	mov	r0, r4
   12e8c:	bl	116e0 <error@plt>
   12e90:	mov	r2, #5
   12e94:	ldr	r1, [pc, #2104]	; 136d4 <__assert_fail@plt+0x1d18>
   12e98:	mov	r0, r4
   12e9c:	bl	11638 <dcgettext@plt>
   12ea0:	mov	r5, r0
   12ea4:	mov	r1, #8
   12ea8:	ldr	r2, [sp, #64]	; 0x40
   12eac:	mov	r0, r4
   12eb0:	bl	1762c <__assert_fail@plt+0x5c70>
   12eb4:	mov	r3, r0
   12eb8:	mov	r2, r5
   12ebc:	str	r6, [sp]
   12ec0:	mov	r1, r4
   12ec4:	mov	r0, r4
   12ec8:	bl	116e0 <error@plt>
   12ecc:	mov	r0, #0
   12ed0:	add	sp, sp, #2928	; 0xb70
   12ed4:	add	sp, sp, #12
   12ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12edc:	bne	12f64 <__assert_fail@plt+0x15a8>
   12ee0:	ldr	r3, [r7, #20]
   12ee4:	cmp	r3, #2
   12ee8:	bne	12f10 <__assert_fail@plt+0x1554>
   12eec:	mov	r2, #5
   12ef0:	ldr	r1, [pc, #2016]	; 136d8 <__assert_fail@plt+0x1d1c>
   12ef4:	mov	r0, r4
   12ef8:	bl	11638 <dcgettext@plt>
   12efc:	mov	r2, r0
   12f00:	mov	r1, r4
   12f04:	mov	r0, r4
   12f08:	bl	116e0 <error@plt>
   12f0c:	b	12ecc <__assert_fail@plt+0x1510>
   12f10:	cmp	r5, #1
   12f14:	beq	12f64 <__assert_fail@plt+0x15a8>
   12f18:	ldr	r3, [sp, #2992]	; 0xbb0
   12f1c:	ldr	r2, [sp, #3004]	; 0xbbc
   12f20:	orrs	r3, r3, r2
   12f24:	beq	12f60 <__assert_fail@plt+0x15a4>
   12f28:	mov	r2, #5
   12f2c:	ldr	r1, [pc, #1960]	; 136dc <__assert_fail@plt+0x1d20>
   12f30:	mov	r0, r4
   12f34:	bl	11638 <dcgettext@plt>
   12f38:	mov	r5, r0
   12f3c:	mov	r1, #8
   12f40:	ldr	r2, [sp, #64]	; 0x40
   12f44:	mov	r0, r4
   12f48:	bl	1762c <__assert_fail@plt+0x5c70>
   12f4c:	mov	r3, r0
   12f50:	mov	r2, r5
   12f54:	mov	r1, r4
   12f58:	mov	r0, r4
   12f5c:	bl	116e0 <error@plt>
   12f60:	mov	r5, r6
   12f64:	ldr	fp, [pc, #1908]	; 136e0 <__assert_fail@plt+0x1d24>
   12f68:	mov	r1, #0
   12f6c:	mov	r7, #0
   12f70:	ldr	r0, [pc, #1900]	; 136e4 <__assert_fail@plt+0x1d28>
   12f74:	bl	12728 <__assert_fail@plt+0xd6c>
   12f78:	mov	r3, #1
   12f7c:	str	r3, [sp, #20]
   12f80:	ldr	r3, [sp, #2996]	; 0xbb4
   12f84:	cmp	r3, #0
   12f88:	beq	12f98 <__assert_fail@plt+0x15dc>
   12f8c:	mov	r1, #0
   12f90:	ldr	r0, [pc, #1872]	; 136e8 <__assert_fail@plt+0x1d2c>
   12f94:	bl	12728 <__assert_fail@plt+0xd6c>
   12f98:	ldr	r4, [pc, #1824]	; 136c0 <__assert_fail@plt+0x1d04>
   12f9c:	mov	r8, #0
   12fa0:	cmp	r8, sl
   12fa4:	blt	132a8 <__assert_fail@plt+0x18ec>
   12fa8:	cmp	r5, #1
   12fac:	ldr	r6, [r4, #8]
   12fb0:	beq	133ac <__assert_fail@plt+0x19f0>
   12fb4:	cmp	r5, #2
   12fb8:	beq	133d0 <__assert_fail@plt+0x1a14>
   12fbc:	ldr	r3, [sp, #3004]	; 0xbbc
   12fc0:	cmp	r3, #0
   12fc4:	beq	12fd4 <__assert_fail@plt+0x1618>
   12fc8:	ldr	r1, [pc, #1820]	; 136ec <__assert_fail@plt+0x1d30>
   12fcc:	ldr	r0, [pc, #1820]	; 136f0 <__assert_fail@plt+0x1d34>
   12fd0:	bl	12728 <__assert_fail@plt+0xd6c>
   12fd4:	ldr	r3, [sp, #2992]	; 0xbb0
   12fd8:	ldr	r5, [pc, #1760]	; 136c0 <__assert_fail@plt+0x1d04>
   12fdc:	cmp	r3, #0
   12fe0:	beq	12ffc <__assert_fail@plt+0x1640>
   12fe4:	ldrb	r1, [r5, #80]	; 0x50
   12fe8:	cmp	r1, #0
   12fec:	movne	r1, #0
   12ff0:	ldrne	r0, [pc, #1788]	; 136f4 <__assert_fail@plt+0x1d38>
   12ff4:	ldreq	r0, [pc, #1788]	; 136f8 <__assert_fail@plt+0x1d3c>
   12ff8:	bl	12728 <__assert_fail@plt+0xd6c>
   12ffc:	ldr	r3, [sp, #3000]	; 0xbb8
   13000:	ldr	r1, [pc, #1780]	; 136fc <__assert_fail@plt+0x1d40>
   13004:	cmp	r3, #0
   13008:	ldrne	r0, [pc, #1776]	; 13700 <__assert_fail@plt+0x1d44>
   1300c:	ldreq	r0, [pc, #1776]	; 13704 <__assert_fail@plt+0x1d48>
   13010:	bl	12728 <__assert_fail@plt+0xd6c>
   13014:	cmp	sl, #1
   13018:	ldrle	r3, [pc, #1768]	; 13708 <__assert_fail@plt+0x1d4c>
   1301c:	ble	13038 <__assert_fail@plt+0x167c>
   13020:	ldr	r3, [r6, #8]
   13024:	str	r3, [r5, #16]
   13028:	ldr	r3, [sp, #3008]	; 0xbc0
   1302c:	cmp	r3, #0
   13030:	ldrne	r3, [pc, #1748]	; 1370c <__assert_fail@plt+0x1d50>
   13034:	ldreq	r3, [pc, #1748]	; 13710 <__assert_fail@plt+0x1d54>
   13038:	str	r3, [r5, #104]	; 0x68
   1303c:	ldr	r3, [sp, #3004]	; 0xbbc
   13040:	cmp	r3, #0
   13044:	beq	13064 <__assert_fail@plt+0x16a8>
   13048:	mov	r2, #5
   1304c:	ldr	r1, [pc, #1728]	; 13714 <__assert_fail@plt+0x1d58>
   13050:	mov	r0, #0
   13054:	bl	11638 <dcgettext@plt>
   13058:	mov	r2, fp
   1305c:	ldr	r1, [sp, #64]	; 0x40
   13060:	bl	11560 <printf@plt>
   13064:	ldr	r0, [sp, #60]	; 0x3c
   13068:	bl	1198c <getc@plt>
   1306c:	ldr	r2, [sp, #20]
   13070:	adds	r3, r0, #1
   13074:	movne	r3, #1
   13078:	str	r0, [sp, #36]	; 0x24
   1307c:	tst	r3, r2
   13080:	beq	13094 <__assert_fail@plt+0x16d8>
   13084:	ldr	r1, [sp, #60]	; 0x3c
   13088:	bl	117d0 <ungetc@plt>
   1308c:	mov	r3, #0
   13090:	str	r3, [sp, #36]	; 0x24
   13094:	ldr	r3, [sp, #36]	; 0x24
   13098:	cmn	r3, #1
   1309c:	beq	130b4 <__assert_fail@plt+0x16f8>
   130a0:	add	r0, sp, #36	; 0x24
   130a4:	ldr	r3, [r5, #104]	; 0x68
   130a8:	blx	r3
   130ac:	cmp	r0, #8
   130b0:	bne	13094 <__assert_fail@plt+0x16d8>
   130b4:	ldr	r3, [sp, #3004]	; 0xbbc
   130b8:	cmp	r3, #0
   130bc:	beq	1365c <__assert_fail@plt+0x1ca0>
   130c0:	cmp	r7, #0
   130c4:	beq	13110 <__assert_fail@plt+0x1754>
   130c8:	mov	r2, #5
   130cc:	ldr	r1, [pc, #1604]	; 13718 <__assert_fail@plt+0x1d5c>
   130d0:	mov	r0, #0
   130d4:	bl	11638 <dcgettext@plt>
   130d8:	mov	r6, r0
   130dc:	ldr	r1, [pc, #1592]	; 1371c <__assert_fail@plt+0x1d60>
   130e0:	mov	r2, #5
   130e4:	mov	r0, #0
   130e8:	bl	11638 <dcgettext@plt>
   130ec:	ldr	r3, [sp, #68]	; 0x44
   130f0:	mov	r1, r0
   130f4:	cmp	r3, #1
   130f8:	moveq	r1, r6
   130fc:	beq	13108 <__assert_fail@plt+0x174c>
   13100:	cmp	r3, #2
   13104:	bne	133f4 <__assert_fail@plt+0x1a38>
   13108:	ldr	r0, [pc, #1552]	; 13720 <__assert_fail@plt+0x1d64>
   1310c:	bl	11560 <printf@plt>
   13110:	ldr	r3, [sp, #16]
   13114:	ldr	r2, [sp, #28]
   13118:	orrs	r3, r3, r2
   1311c:	ldr	r2, [sp, #2984]	; 0xba8
   13120:	movne	r3, #1
   13124:	moveq	r3, #0
   13128:	cmp	r2, #0
   1312c:	movne	r3, #1
   13130:	cmp	r3, #0
   13134:	beq	1365c <__assert_fail@plt+0x1ca0>
   13138:	cmp	r2, #0
   1313c:	beq	134b0 <__assert_fail@plt+0x1af4>
   13140:	mov	r0, r2
   13144:	bl	1174c <localtime@plt>
   13148:	subs	r6, r0, #0
   1314c:	beq	134b0 <__assert_fail@plt+0x1af4>
   13150:	add	r0, sp, #2272	; 0x8e0
   13154:	mov	r3, r6
   13158:	ldr	r2, [pc, #1476]	; 13724 <__assert_fail@plt+0x1d68>
   1315c:	mov	r1, #20
   13160:	add	r0, r0, #12
   13164:	bl	11734 <strftime@plt>
   13168:	cmp	r0, #19
   1316c:	beq	1340c <__assert_fail@plt+0x1a50>
   13170:	ldr	r3, [pc, #1456]	; 13728 <__assert_fail@plt+0x1d6c>
   13174:	movw	r2, #845	; 0x34d
   13178:	ldr	r1, [pc, #1352]	; 136c8 <__assert_fail@plt+0x1d0c>
   1317c:	ldr	r0, [pc, #1448]	; 1372c <__assert_fail@plt+0x1d70>
   13180:	b	12e0c <__assert_fail@plt+0x1450>
   13184:	mov	r2, #0
   13188:	mov	r1, #10
   1318c:	add	r0, sp, #36	; 0x24
   13190:	bl	12acc <__assert_fail@plt+0x1110>
   13194:	ldr	r0, [sp, #48]	; 0x30
   13198:	rsb	r2, r6, #10
   1319c:	mov	r1, #1
   131a0:	ldr	r3, [sp, #60]	; 0x3c
   131a4:	add	r0, r0, r6
   131a8:	bl	116bc <fread@plt>
   131ac:	add	r6, r6, r0
   131b0:	cmp	r6, #9
   131b4:	bls	131e8 <__assert_fail@plt+0x182c>
   131b8:	mov	r2, #10
   131bc:	ldr	r1, [pc, #1388]	; 13730 <__assert_fail@plt+0x1d74>
   131c0:	ldr	r0, [sp, #48]	; 0x30
   131c4:	bl	1162c <memcmp@plt>
   131c8:	subs	r7, r0, #0
   131cc:	bne	131e8 <__assert_fail@plt+0x182c>
   131d0:	mov	r1, r7
   131d4:	ldr	r0, [pc, #1288]	; 136e4 <__assert_fail@plt+0x1d28>
   131d8:	bl	12728 <__assert_fail@plt+0xd6c>
   131dc:	ldr	fp, [pc, #1360]	; 13734 <__assert_fail@plt+0x1d78>
   131e0:	str	r7, [sp, #20]
   131e4:	b	12f80 <__assert_fail@plt+0x15c4>
   131e8:	mov	r2, #0
   131ec:	mov	r1, #256	; 0x100
   131f0:	add	r0, sp, #36	; 0x24
   131f4:	bl	12acc <__assert_fail@plt+0x1110>
   131f8:	cmp	r6, #255	; 0xff
   131fc:	bgt	1325c <__assert_fail@plt+0x18a0>
   13200:	ldr	r0, [sp, #48]	; 0x30
   13204:	rsb	r2, r6, #256	; 0x100
   13208:	mov	r1, #1
   1320c:	ldr	r3, [sp, #60]	; 0x3c
   13210:	add	r0, r0, r6
   13214:	bl	116bc <fread@plt>
   13218:	add	r6, r0, r6
   1321c:	cmp	r6, #256	; 0x100
   13220:	beq	1325c <__assert_fail@plt+0x18a0>
   13224:	mov	r2, #5
   13228:	ldr	r1, [pc, #1288]	; 13738 <__assert_fail@plt+0x1d7c>
   1322c:	mov	r0, #0
   13230:	bl	11638 <dcgettext@plt>
   13234:	mov	r4, r0
   13238:	mov	r2, r8
   1323c:	mov	r1, #8
   13240:	mov	r0, #0
   13244:	bl	1762c <__assert_fail@plt+0x5c70>
   13248:	mov	r3, r0
   1324c:	mov	r2, r4
   13250:	mov	r1, #0
   13254:	mov	r0, #1
   13258:	bl	116e0 <error@plt>
   1325c:	ldr	r1, [sp, #48]	; 0x30
   13260:	add	r2, sp, #72	; 0x48
   13264:	mov	r3, #0
   13268:	add	ip, r1, #1
   1326c:	ldrb	r0, [r1, r3, lsl #1]
   13270:	strb	r0, [r2], #1
   13274:	ldrb	r0, [ip, r3, lsl #1]
   13278:	add	r3, r3, #1
   1327c:	cmp	r3, #128	; 0x80
   13280:	strb	r0, [r2, #127]	; 0x7f
   13284:	bne	1326c <__assert_fail@plt+0x18b0>
   13288:	mov	r1, #0
   1328c:	ldr	r0, [pc, #1192]	; 1373c <__assert_fail@plt+0x1d80>
   13290:	mov	r7, #1
   13294:	bl	12728 <__assert_fail@plt+0xd6c>
   13298:	mov	r3, #0
   1329c:	ldr	fp, [pc, #1180]	; 13740 <__assert_fail@plt+0x1d84>
   132a0:	str	r3, [sp, #20]
   132a4:	b	12f80 <__assert_fail@plt+0x15c4>
   132a8:	mov	r3, #1
   132ac:	strb	r3, [r4, #24]
   132b0:	ldr	r3, [sp, #24]
   132b4:	ldr	r6, [r3, r8, lsl #2]
   132b8:	ldr	r3, [sp, #3012]	; 0xbc4
   132bc:	cmp	r3, #0
   132c0:	beq	1333c <__assert_fail@plt+0x1980>
   132c4:	mov	r0, #32
   132c8:	bl	17d6c <__assert_fail@plt+0x63b0>
   132cc:	mov	r1, #0
   132d0:	mov	r2, #32
   132d4:	mov	r9, r0
   132d8:	bl	11818 <memset@plt>
   132dc:	ldr	r0, [sp, #3016]	; 0xbc8
   132e0:	bl	22ec0 <__assert_fail@plt+0x11504>
   132e4:	mov	r0, #100	; 0x64
   132e8:	str	r0, [r9, #4]
   132ec:	bl	17d6c <__assert_fail@plt+0x63b0>
   132f0:	ldr	r2, [sp, #3016]	; 0xbc8
   132f4:	mov	r3, #0
   132f8:	str	r0, [r9]
   132fc:	mov	r0, r6
   13300:	strd	r2, [r9, #12]
   13304:	str	r3, [r9, #20]
   13308:	bl	117ac <strlen@plt>
   1330c:	mov	r1, r0
   13310:	mov	r2, r9
   13314:	mov	r0, r6
   13318:	bl	22e54 <__assert_fail@plt+0x11498>
   1331c:	subs	r3, r0, #0
   13320:	ldrne	r2, [pc, #1016]	; 13720 <__assert_fail@plt+0x1d64>
   13324:	bne	13250 <__assert_fail@plt+0x1894>
   13328:	ldr	r0, [pc, #1044]	; 13744 <__assert_fail@plt+0x1d88>
   1332c:	mov	r1, r9
   13330:	bl	12728 <__assert_fail@plt+0xd6c>
   13334:	add	r8, r8, #1
   13338:	b	12fa0 <__assert_fail@plt+0x15e4>
   1333c:	ldr	r1, [pc, #1028]	; 13748 <__assert_fail@plt+0x1d8c>
   13340:	mov	r0, r6
   13344:	bl	11920 <strpbrk@plt>
   13348:	cmp	r0, #0
   1334c:	beq	1336c <__assert_fail@plt+0x19b0>
   13350:	ldr	r3, [sp, #2988]	; 0xbac
   13354:	cmp	r3, #0
   13358:	movne	r1, r6
   1335c:	ldrne	r0, [pc, #1000]	; 1374c <__assert_fail@plt+0x1d90>
   13360:	moveq	r1, r6
   13364:	ldreq	r0, [pc, #996]	; 13750 <__assert_fail@plt+0x1d94>
   13368:	b	13330 <__assert_fail@plt+0x1974>
   1336c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   13370:	cmp	r0, #1
   13374:	bne	13394 <__assert_fail@plt+0x19d8>
   13378:	ldr	r2, [sp, #2988]	; 0xbac
   1337c:	ldr	r3, [pc, #976]	; 13754 <__assert_fail@plt+0x1d98>
   13380:	ldr	r0, [pc, #976]	; 13758 <__assert_fail@plt+0x1d9c>
   13384:	cmp	r2, #0
   13388:	moveq	r0, r3
   1338c:	mov	r1, r6
   13390:	b	13330 <__assert_fail@plt+0x1974>
   13394:	ldr	r2, [sp, #2988]	; 0xbac
   13398:	ldr	r3, [pc, #956]	; 1375c <__assert_fail@plt+0x1da0>
   1339c:	ldr	r0, [pc, #956]	; 13760 <__assert_fail@plt+0x1da4>
   133a0:	cmp	r2, #0
   133a4:	movne	r0, r3
   133a8:	b	1338c <__assert_fail@plt+0x19d0>
   133ac:	ldr	r3, [pc, #944]	; 13764 <__assert_fail@plt+0x1da8>
   133b0:	strb	r5, [r4, #24]
   133b4:	ldr	r1, [r3, #4]
   133b8:	cmp	r1, #0
   133bc:	ldrne	r0, [pc, #932]	; 13768 <__assert_fail@plt+0x1dac>
   133c0:	movne	r1, #0
   133c4:	ldreq	r0, [pc, #928]	; 1376c <__assert_fail@plt+0x1db0>
   133c8:	bl	12728 <__assert_fail@plt+0xd6c>
   133cc:	b	12fbc <__assert_fail@plt+0x1600>
   133d0:	mov	r3, #1
   133d4:	strb	r3, [r4, #24]
   133d8:	ldr	r3, [pc, #900]	; 13764 <__assert_fail@plt+0x1da8>
   133dc:	ldr	r1, [r3, #4]
   133e0:	cmp	r1, #0
   133e4:	movne	r1, #0
   133e8:	ldrne	r0, [pc, #896]	; 13770 <__assert_fail@plt+0x1db4>
   133ec:	ldreq	r0, [pc, #896]	; 13774 <__assert_fail@plt+0x1db8>
   133f0:	b	133c8 <__assert_fail@plt+0x1a0c>
   133f4:	mov	r2, #5
   133f8:	ldr	r1, [pc, #888]	; 13778 <__assert_fail@plt+0x1dbc>
   133fc:	mov	r0, #0
   13400:	bl	11638 <dcgettext@plt>
   13404:	bl	11560 <printf@plt>
   13408:	b	13110 <__assert_fail@plt+0x1754>
   1340c:	ldrb	r0, [sp, #2303]	; 0x8ff
   13410:	cmp	r0, #0
   13414:	beq	1342c <__assert_fail@plt+0x1a70>
   13418:	ldr	r3, [pc, #776]	; 13728 <__assert_fail@plt+0x1d6c>
   1341c:	movw	r2, #846	; 0x34e
   13420:	ldr	r1, [pc, #672]	; 136c8 <__assert_fail@plt+0x1d0c>
   13424:	ldr	r0, [pc, #848]	; 1377c <__assert_fail@plt+0x1dc0>
   13428:	b	12e0c <__assert_fail@plt+0x1450>
   1342c:	ldrb	r3, [sp, #2302]	; 0x8fe
   13430:	cmp	r3, #0
   13434:	bne	1344c <__assert_fail@plt+0x1a90>
   13438:	ldr	r3, [pc, #744]	; 13728 <__assert_fail@plt+0x1d6c>
   1343c:	movw	r2, #847	; 0x34f
   13440:	ldr	r1, [pc, #640]	; 136c8 <__assert_fail@plt+0x1d0c>
   13444:	ldr	r0, [pc, #820]	; 13780 <__assert_fail@plt+0x1dc4>
   13448:	b	12e0c <__assert_fail@plt+0x1450>
   1344c:	mov	r2, #5
   13450:	ldr	r1, [pc, #812]	; 13784 <__assert_fail@plt+0x1dc8>
   13454:	bl	11638 <dcgettext@plt>
   13458:	ldr	r3, [sp, #2984]	; 0xba8
   1345c:	add	r1, sp, #2272	; 0x8e0
   13460:	add	r1, r1, #12
   13464:	ldr	r2, [r3, #4]
   13468:	bl	11560 <printf@plt>
   1346c:	add	r0, sp, #2272	; 0x8e0
   13470:	mov	r3, r6
   13474:	ldr	r2, [pc, #780]	; 13788 <__assert_fail@plt+0x1dcc>
   13478:	mov	r1, #20
   1347c:	add	r0, r0, #12
   13480:	bl	11734 <strftime@plt>
   13484:	cmp	r0, #5
   13488:	beq	134a0 <__assert_fail@plt+0x1ae4>
   1348c:	ldr	r3, [pc, #660]	; 13728 <__assert_fail@plt+0x1d6c>
   13490:	movw	r2, #851	; 0x353
   13494:	ldr	r1, [pc, #556]	; 136c8 <__assert_fail@plt+0x1d0c>
   13498:	ldr	r0, [pc, #748]	; 1378c <__assert_fail@plt+0x1dd0>
   1349c:	b	12e0c <__assert_fail@plt+0x1450>
   134a0:	add	r1, sp, #2272	; 0x8e0
   134a4:	ldr	r0, [pc, #740]	; 13790 <__assert_fail@plt+0x1dd4>
   134a8:	add	r1, r1, #12
   134ac:	bl	11560 <printf@plt>
   134b0:	mov	r6, #5
   134b4:	ldr	r2, [pc, #728]	; 13794 <__assert_fail@plt+0x1dd8>
   134b8:	mov	r0, #0
   134bc:	ldr	r1, [pc, #724]	; 13798 <__assert_fail@plt+0x1ddc>
   134c0:	str	r6, [sp]
   134c4:	ldr	r3, [sp, #16]
   134c8:	bl	119b0 <dcngettext@plt>
   134cc:	mov	r2, #1
   134d0:	mov	r3, #0
   134d4:	mov	r7, r0
   134d8:	ldr	r0, [sp, #16]
   134dc:	strd	r2, [sp]
   134e0:	strd	r2, [sp, #8]
   134e4:	mov	r3, #0
   134e8:	add	r2, sp, #328	; 0x148
   134ec:	mov	r1, r3
   134f0:	bl	14370 <__assert_fail@plt+0x29b4>
   134f4:	mov	r1, r0
   134f8:	mov	r0, r7
   134fc:	bl	11560 <printf@plt>
   13500:	ldrb	r0, [r5, #24]
   13504:	mov	r7, #0
   13508:	mov	r2, r6
   1350c:	mov	r6, #1
   13510:	cmp	r0, #0
   13514:	ldrne	r1, [pc, #640]	; 1379c <__assert_fail@plt+0x1de0>
   13518:	movne	r0, #0
   1351c:	ldreq	r1, [pc, #636]	; 137a0 <__assert_fail@plt+0x1de4>
   13520:	bl	11638 <dcgettext@plt>
   13524:	mov	r8, r0
   13528:	mov	r3, #0
   1352c:	strd	r6, [sp]
   13530:	add	r2, sp, #328	; 0x148
   13534:	strd	r6, [sp, #8]
   13538:	ldrd	r0, [r4, #40]	; 0x28
   1353c:	bl	14370 <__assert_fail@plt+0x29b4>
   13540:	mov	r1, r0
   13544:	mov	r0, r8
   13548:	bl	11560 <printf@plt>
   1354c:	mov	r2, #5
   13550:	ldr	r1, [pc, #588]	; 137a4 <__assert_fail@plt+0x1de8>
   13554:	mov	r0, #0
   13558:	bl	11638 <dcgettext@plt>
   1355c:	mov	r8, r0
   13560:	mov	r3, #0
   13564:	strd	r6, [sp]
   13568:	add	r2, sp, #328	; 0x148
   1356c:	strd	r6, [sp, #8]
   13570:	ldrd	r0, [r4, #48]	; 0x30
   13574:	bl	14370 <__assert_fail@plt+0x29b4>
   13578:	mov	r9, r0
   1357c:	mov	r3, #0
   13580:	strd	r6, [sp]
   13584:	add	r2, sp, #980	; 0x3d4
   13588:	strd	r6, [sp, #8]
   1358c:	ldrd	r0, [r4, #56]	; 0x38
   13590:	bl	14370 <__assert_fail@plt+0x29b4>
   13594:	mov	r3, #0
   13598:	add	r2, sp, #1632	; 0x660
   1359c:	strd	r6, [sp]
   135a0:	strd	r6, [sp, #8]
   135a4:	str	r0, [sp, #20]
   135a8:	ldrd	r0, [r4, #64]	; 0x40
   135ac:	bl	14370 <__assert_fail@plt+0x29b4>
   135b0:	add	r2, sp, #2272	; 0x8e0
   135b4:	mov	fp, r0
   135b8:	strd	r6, [sp]
   135bc:	mov	r3, #0
   135c0:	add	r2, r2, #12
   135c4:	strd	r6, [sp, #8]
   135c8:	ldrd	r0, [r4, #72]	; 0x48
   135cc:	bl	14370 <__assert_fail@plt+0x29b4>
   135d0:	mov	r3, fp
   135d4:	mov	r1, r9
   135d8:	str	r0, [sp]
   135dc:	mov	r0, r8
   135e0:	ldr	r2, [sp, #20]
   135e4:	bl	11560 <printf@plt>
   135e8:	cmp	sl, #0
   135ec:	bne	13654 <__assert_fail@plt+0x1c98>
   135f0:	ldrb	r3, [r4, #24]
   135f4:	cmp	r3, #0
   135f8:	movne	r2, #5
   135fc:	ldrne	r1, [pc, #420]	; 137a8 <__assert_fail@plt+0x1dec>
   13600:	bne	136a4 <__assert_fail@plt+0x1ce8>
   13604:	ldrd	r2, [r4, #48]	; 0x30
   13608:	orrs	r3, r2, r3
   1360c:	mov	r2, #5
   13610:	beq	136a0 <__assert_fail@plt+0x1ce4>
   13614:	ldr	r1, [pc, #400]	; 137ac <__assert_fail@plt+0x1df0>
   13618:	mov	r0, sl
   1361c:	bl	11638 <dcgettext@plt>
   13620:	mov	r6, r0
   13624:	ldrd	r0, [r4, #48]	; 0x30
   13628:	bl	2526c <__assert_fail@plt+0x138b0>
   1362c:	vldr	s15, [sp, #16]
   13630:	vmov	d6, r0, r1
   13634:	mov	r0, r6
   13638:	vldr	d5, [pc, #120]	; 136b8 <__assert_fail@plt+0x1cfc>
   1363c:	vcvt.f64.u32	d7, s15
   13640:	vsub.f64	d7, d6, d7
   13644:	vmul.f64	d7, d7, d5
   13648:	vdiv.f64	d7, d7, d6
   1364c:	vmov	r2, r3, d7
   13650:	bl	11560 <printf@plt>
   13654:	mov	r0, #10
   13658:	bl	11824 <putchar@plt>
   1365c:	ldr	r0, [sp, #60]	; 0x3c
   13660:	bl	115c0 <ferror@plt>
   13664:	cmp	r0, #0
   13668:	ldreq	r0, [r5, #96]	; 0x60
   1366c:	beq	12ed0 <__assert_fail@plt+0x1514>
   13670:	bl	117dc <__errno_location@plt>
   13674:	ldr	r4, [r0]
   13678:	mov	r1, #8
   1367c:	mov	r0, #0
   13680:	ldr	r2, [sp, #64]	; 0x40
   13684:	bl	1762c <__assert_fail@plt+0x5c70>
   13688:	mov	r3, r0
   1368c:	ldr	r2, [pc, #140]	; 13720 <__assert_fail@plt+0x1d64>
   13690:	mov	r0, #0
   13694:	mov	r1, r4
   13698:	bl	116e0 <error@plt>
   1369c:	b	12ecc <__assert_fail@plt+0x1510>
   136a0:	ldr	r1, [pc, #264]	; 137b0 <__assert_fail@plt+0x1df4>
   136a4:	mov	r0, sl
   136a8:	bl	11638 <dcgettext@plt>
   136ac:	bl	11560 <printf@plt>
   136b0:	b	13654 <__assert_fail@plt+0x1c98>
   136b4:	nop	{0}
   136b8:	andeq	r0, r0, r0
   136bc:	subsmi	r0, r9, r0
   136c0:	andeq	r7, r3, r8, lsr #4
   136c4:	andeq	r5, r2, pc, lsr #11
   136c8:	muleq	r2, lr, r9
   136cc:	strdeq	r5, [r2], -r4
   136d0:	strdeq	r5, [r2], -sp
   136d4:	andeq	r5, r2, r6, lsl #21
   136d8:	andeq	r5, r2, pc, asr #21
   136dc:	andeq	r5, r2, fp, ror fp
   136e0:	ldrdeq	r5, [r2], -fp
   136e4:			; <UNDEFINED> instruction: 0x000137b4
   136e8:	andeq	r2, r1, r8, asr sl
   136ec:	andeq	r7, r3, r8, asr #4
   136f0:	andeq	r2, r1, ip, ror #15
   136f4:	muleq	r1, ip, r7
   136f8:	andeq	r2, r1, ip, ror #14
   136fc:	andeq	r7, r3, r0, lsl #5
   13700:	andeq	r2, r1, r4, lsl #12
   13704:	andeq	r2, r1, r0, lsr r6
   13708:	andeq	r2, r1, r8, ror #11
   1370c:	andeq	r2, r1, r4, ror sl
   13710:	strdeq	r3, [r1], -r8
   13714:	strdeq	r5, [r2], -r0
   13718:	andeq	r5, r2, r2, lsl ip
   1371c:	andeq	r5, r2, r9, asr #24
   13720:	andeq	r6, r2, r8, lsr #27
   13724:			; <UNDEFINED> instruction: 0x00025cb7
   13728:	ldrdeq	r5, [r2], -r5	; <UNPREDICTABLE>
   1372c:	andeq	r5, r2, r9, asr #25
   13730:	andeq	r5, r2, fp, asr #11
   13734:	andeq	r5, r2, r3, ror #19
   13738:			; <UNDEFINED> instruction: 0x00025bb3
   1373c:	andeq	r2, r1, r4, lsr fp
   13740:	strdeq	r5, [r2], -r0
   13744:	andeq	r2, r1, r8, lsl sl
   13748:	andeq	r5, r2, sl, ror #23
   1374c:	strdeq	r2, [r1], -r0
   13750:	andeq	r2, r1, r8, asr #19
   13754:			; <UNDEFINED> instruction: 0x00012cbc
   13758:	andeq	r2, r1, r0, lsl sp
   1375c:	andeq	r2, r1, ip, lsr #19
   13760:	muleq	r1, r0, r9
   13764:			; <UNDEFINED> instruction: 0x000371b0
   13768:	andeq	r2, r1, r8, ror #18
   1376c:	andeq	r2, r1, r8, lsl r9
   13770:	andeq	r2, r1, r0, asr #18
   13774:	strdeq	r2, [r1], -r0
   13778:	andeq	r5, r2, sp, ror ip
   1377c:	andeq	r5, r2, r3, ror #25
   13780:	andeq	r5, r2, r0, lsl #26
   13784:	andeq	r5, r2, sp, lsl sp
   13788:	andeq	r5, r2, r4, asr #26
   1378c:	andeq	r5, r2, r7, asr #26
   13790:	andeq	r6, r2, sl, ror r7
   13794:	andeq	r5, r2, r4, asr sp
   13798:	andeq	r5, r2, r4, ror sp
   1379c:	muleq	r2, r3, sp
   137a0:	andeq	r5, r2, fp, lsr #27
   137a4:			; <UNDEFINED> instruction: 0x00025dbe
   137a8:	andeq	r5, r2, r2, ror lr
   137ac:	andeq	r5, r2, sl, asr #29
   137b0:	strdeq	r5, [r2], -r8
   137b4:	ldr	r3, [r0]
   137b8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   137bc:	mov	r4, r0
   137c0:	cmp	r3, #128	; 0x80
   137c4:	bne	1384c <__assert_fail@plt+0x1e90>
   137c8:	ldr	r6, [r0, #24]
   137cc:	mov	r0, r6
   137d0:	bl	1183c <fgetc@plt>
   137d4:	sxtb	r0, r0
   137d8:	lsl	r5, r0, #8
   137dc:	mov	r0, r6
   137e0:	bl	1183c <fgetc@plt>
   137e4:	uxtb	r0, r0
   137e8:	orr	r5, r5, r0
   137ec:	ldr	r0, [r4, #4]
   137f0:	add	r5, r0, r5
   137f4:	str	r5, [r4, #4]
   137f8:	ldr	r7, [r4, #4]
   137fc:	ldr	r3, [r4, #8]
   13800:	lsr	r2, r7, #31
   13804:	cmp	r7, r3
   13808:	orrgt	r2, r2, #1
   1380c:	cmp	r2, #0
   13810:	beq	13864 <__assert_fail@plt+0x1ea8>
   13814:	mov	r2, #5
   13818:	ldr	r1, [pc, #440]	; 139d8 <__assert_fail@plt+0x201c>
   1381c:	mov	r0, #0
   13820:	bl	11638 <dcgettext@plt>
   13824:	mov	r5, r0
   13828:	mov	r1, #8
   1382c:	ldr	r2, [r4, #28]
   13830:	mov	r0, #0
   13834:	bl	1762c <__assert_fail@plt+0x5c70>
   13838:	mov	r3, r0
   1383c:	mov	r2, r5
   13840:	mov	r1, #0
   13844:	mov	r0, #1
   13848:	bl	116e0 <error@plt>
   1384c:	ldr	r2, [r0, #4]
   13850:	cmp	r3, #127	; 0x7f
   13854:	subgt	r3, r3, #256	; 0x100
   13858:	add	r3, r3, r2
   1385c:	str	r3, [r0, #4]
   13860:	b	137f8 <__assert_fail@plt+0x1e3c>
   13864:	add	r1, sp, #4
   13868:	mov	r0, sp
   1386c:	ldr	r3, [r4, #24]
   13870:	str	r2, [sp]
   13874:	str	r2, [sp, #4]
   13878:	bl	11938 <getdelim@plt>
   1387c:	subs	r5, r0, #0
   13880:	blt	138d4 <__assert_fail@plt+0x1f18>
   13884:	ldr	r3, [sp]
   13888:	cmp	r3, #0
   1388c:	bne	138a4 <__assert_fail@plt+0x1ee8>
   13890:	ldr	r3, [pc, #324]	; 139dc <__assert_fail@plt+0x2020>
   13894:	mov	r2, #245	; 0xf5
   13898:	ldr	r1, [pc, #320]	; 139e0 <__assert_fail@plt+0x2024>
   1389c:	ldr	r0, [pc, #320]	; 139e4 <__assert_fail@plt+0x2028>
   138a0:	bl	119bc <__assert_fail@plt>
   138a4:	ldr	r3, [r4, #16]
   138a8:	add	r6, r7, r5
   138ac:	add	r6, r6, #1
   138b0:	cmp	r6, r3
   138b4:	bls	138e0 <__assert_fail@plt+0x1f24>
   138b8:	mov	r1, r6
   138bc:	ldr	r0, [r4, #12]
   138c0:	bl	188bc <__assert_fail@plt+0x6f00>
   138c4:	cmp	r0, #0
   138c8:	strne	r0, [r4, #12]
   138cc:	strne	r6, [r4, #16]
   138d0:	bne	138e0 <__assert_fail@plt+0x1f24>
   138d4:	mov	r0, #8
   138d8:	add	sp, sp, #12
   138dc:	pop	{r4, r5, r6, r7, pc}
   138e0:	ldr	r0, [r4, #12]
   138e4:	add	r2, r5, #1
   138e8:	ldr	r1, [sp]
   138ec:	add	r0, r0, r7
   138f0:	bl	115e4 <memcpy@plt>
   138f4:	ldr	r0, [sp]
   138f8:	bl	18758 <__assert_fail@plt+0x6d9c>
   138fc:	cmp	r5, #0
   13900:	beq	138d4 <__assert_fail@plt+0x1f18>
   13904:	ldr	r0, [r4, #24]
   13908:	bl	1198c <getc@plt>
   1390c:	ldr	r3, [r4, #4]
   13910:	str	r0, [r4]
   13914:	add	r5, r5, r3
   13918:	sub	r5, r5, #1
   1391c:	cmp	r5, #0
   13920:	str	r5, [r4, #8]
   13924:	bgt	13960 <__assert_fail@plt+0x1fa4>
   13928:	mov	r2, #5
   1392c:	ldr	r1, [pc, #164]	; 139d8 <__assert_fail@plt+0x201c>
   13930:	mov	r0, #0
   13934:	bl	11638 <dcgettext@plt>
   13938:	mov	r5, r0
   1393c:	mov	r1, #8
   13940:	ldr	r2, [r4, #28]
   13944:	mov	r0, #0
   13948:	bl	1762c <__assert_fail@plt+0x5c70>
   1394c:	mov	r3, r0
   13950:	mov	r2, r5
   13954:	mov	r1, #0
   13958:	mov	r0, #1
   1395c:	bl	116e0 <error@plt>
   13960:	ldr	r3, [r4, #8]
   13964:	ldr	r2, [r4, #12]
   13968:	sub	r3, r3, #1
   1396c:	add	r1, r2, r3
   13970:	ldrb	r3, [r2, r3]
   13974:	cmp	r3, #0
   13978:	bne	13990 <__assert_fail@plt+0x1fd4>
   1397c:	ldr	r3, [pc, #100]	; 139e8 <__assert_fail@plt+0x202c>
   13980:	mov	r2, #568	; 0x238
   13984:	ldr	r1, [pc, #84]	; 139e0 <__assert_fail@plt+0x2024>
   13988:	ldr	r0, [pc, #92]	; 139ec <__assert_fail@plt+0x2030>
   1398c:	b	138a0 <__assert_fail@plt+0x1ee4>
   13990:	ldrb	r3, [r1, #1]
   13994:	cmp	r3, #0
   13998:	beq	139b0 <__assert_fail@plt+0x1ff4>
   1399c:	ldr	r3, [pc, #68]	; 139e8 <__assert_fail@plt+0x202c>
   139a0:	movw	r2, #569	; 0x239
   139a4:	ldr	r1, [pc, #52]	; 139e0 <__assert_fail@plt+0x2024>
   139a8:	ldr	r0, [pc, #64]	; 139f0 <__assert_fail@plt+0x2034>
   139ac:	b	138a0 <__assert_fail@plt+0x1ee4>
   139b0:	ldrb	r3, [r1, #2]
   139b4:	cmp	r3, #0
   139b8:	moveq	r0, #1
   139bc:	streq	r2, [r4, #20]
   139c0:	beq	138d8 <__assert_fail@plt+0x1f1c>
   139c4:	ldr	r3, [pc, #28]	; 139e8 <__assert_fail@plt+0x202c>
   139c8:	movw	r2, #570	; 0x23a
   139cc:	ldr	r1, [pc, #12]	; 139e0 <__assert_fail@plt+0x2024>
   139d0:	ldr	r0, [pc, #28]	; 139f4 <__assert_fail@plt+0x2038>
   139d4:	b	138a0 <__assert_fail@plt+0x1ee4>
   139d8:	andeq	r5, r2, r8, lsl pc
   139dc:	andeq	r5, r2, r1, ror #11
   139e0:	muleq	r2, lr, r9
   139e4:	andeq	r5, r2, r1, asr #30
   139e8:	strdeq	r5, [r2], -r1
   139ec:	andeq	r5, r2, fp, asr #30
   139f0:	andeq	r5, r2, r8, asr pc
   139f4:	andeq	r5, r2, r5, ror #30
   139f8:	push	{r4, r5, r6, lr}
   139fc:	mov	r2, r0
   13a00:	mov	r5, r0
   13a04:	mov	r1, #5
   13a08:	ldr	r4, [pc, #60]	; 13a4c <__assert_fail@plt+0x2090>
   13a0c:	ldr	r0, [r4]
   13a10:	ldr	r3, [r4, #16]
   13a14:	bl	125a8 <__assert_fail@plt+0xbec>
   13a18:	cmp	r0, #1
   13a1c:	beq	13a44 <__assert_fail@plt+0x2088>
   13a20:	ands	r3, r0, #12
   13a24:	popne	{r4, r5, r6, pc}
   13a28:	mov	r2, r5
   13a2c:	mov	r1, #1
   13a30:	ldr	r0, [r4, #16]
   13a34:	bl	125a8 <__assert_fail@plt+0xbec>
   13a38:	cmp	r0, #1
   13a3c:	moveq	r0, #2
   13a40:	pop	{r4, r5, r6, pc}
   13a44:	mov	r0, #4
   13a48:	pop	{r4, r5, r6, pc}
   13a4c:	andeq	r7, r3, r8, lsr #4
   13a50:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13a54:	mov	r5, r0
   13a58:	mov	r8, r1
   13a5c:	mov	r7, r2
   13a60:	mov	r6, r3
   13a64:	bl	118fc <clearerr@plt>
   13a68:	mov	r1, #4
   13a6c:	mov	r3, r5
   13a70:	mov	r2, #1
   13a74:	add	r0, sp, r1
   13a78:	bl	116bc <fread@plt>
   13a7c:	cmp	r0, #1
   13a80:	beq	13af4 <__assert_fail@plt+0x2138>
   13a84:	mov	r2, r8
   13a88:	mov	r1, #8
   13a8c:	mov	r0, #0
   13a90:	bl	1762c <__assert_fail@plt+0x5c70>
   13a94:	mov	r4, r0
   13a98:	mov	r0, r5
   13a9c:	bl	11794 <feof@plt>
   13aa0:	subs	r6, r0, #0
   13aa4:	beq	13acc <__assert_fail@plt+0x2110>
   13aa8:	mov	r2, #5
   13aac:	ldr	r1, [pc, #204]	; 13b80 <__assert_fail@plt+0x21c4>
   13ab0:	mov	r0, #0
   13ab4:	bl	11638 <dcgettext@plt>
   13ab8:	mov	r2, r0
   13abc:	mov	r3, r4
   13ac0:	mov	r1, #0
   13ac4:	mov	r0, #1
   13ac8:	bl	116e0 <error@plt>
   13acc:	bl	117dc <__errno_location@plt>
   13ad0:	ldr	r5, [r0]
   13ad4:	mov	r2, #5
   13ad8:	mov	r0, r6
   13adc:	ldr	r1, [pc, #160]	; 13b84 <__assert_fail@plt+0x21c8>
   13ae0:	bl	11638 <dcgettext@plt>
   13ae4:	mov	r2, r0
   13ae8:	mov	r3, r4
   13aec:	mov	r1, r5
   13af0:	b	13ac4 <__assert_fail@plt+0x2108>
   13af4:	ldr	r4, [r6]
   13af8:	ldr	r3, [sp, #4]
   13afc:	cmp	r4, #0
   13b00:	rev	r5, r3
   13b04:	bne	13b74 <__assert_fail@plt+0x21b8>
   13b08:	cmp	r7, r3
   13b0c:	blt	13b24 <__assert_fail@plt+0x2168>
   13b10:	cmp	r7, r5
   13b14:	strlt	r0, [r6]
   13b18:	mov	r0, r3
   13b1c:	add	sp, sp, #8
   13b20:	pop	{r4, r5, r6, r7, r8, pc}
   13b24:	cmp	r7, r5
   13b28:	blt	13b18 <__assert_fail@plt+0x215c>
   13b2c:	mov	r2, #5
   13b30:	ldr	r1, [pc, #80]	; 13b88 <__assert_fail@plt+0x21cc>
   13b34:	mov	r0, r4
   13b38:	bl	11638 <dcgettext@plt>
   13b3c:	mov	r7, r0
   13b40:	mov	r2, r8
   13b44:	mov	r1, #8
   13b48:	mov	r0, r4
   13b4c:	bl	1762c <__assert_fail@plt+0x5c70>
   13b50:	mov	r3, r0
   13b54:	mov	r2, r7
   13b58:	mov	r1, r4
   13b5c:	mov	r0, r4
   13b60:	bl	116e0 <error@plt>
   13b64:	mov	r3, #2
   13b68:	str	r3, [r6]
   13b6c:	mov	r3, r5
   13b70:	b	13b18 <__assert_fail@plt+0x215c>
   13b74:	cmp	r4, #2
   13b78:	moveq	r3, r5
   13b7c:	b	13b18 <__assert_fail@plt+0x215c>
   13b80:	andeq	r6, r2, sl, asr r2
   13b84:	andeq	r6, r2, pc, ror #4
   13b88:	andeq	r6, r2, ip, lsl #5
   13b8c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13b90:	mov	r5, r0
   13b94:	ldr	r3, [pc, #120]	; 13c14 <__assert_fail@plt+0x2258>
   13b98:	ldr	r0, [r3]
   13b9c:	bl	18708 <__assert_fail@plt+0x6d4c>
   13ba0:	ldr	r3, [pc, #112]	; 13c18 <__assert_fail@plt+0x225c>
   13ba4:	mov	r2, #5
   13ba8:	mov	r0, #0
   13bac:	ldr	r1, [pc, #104]	; 13c1c <__assert_fail@plt+0x2260>
   13bb0:	ldr	r4, [r3]
   13bb4:	ldr	r3, [pc, #100]	; 13c20 <__assert_fail@plt+0x2264>
   13bb8:	ldr	r6, [r3]
   13bbc:	bl	11638 <dcgettext@plt>
   13bc0:	mov	r7, r0
   13bc4:	mov	r2, #5
   13bc8:	ldr	r1, [pc, #84]	; 13c24 <__assert_fail@plt+0x2268>
   13bcc:	mov	r0, #0
   13bd0:	bl	11638 <dcgettext@plt>
   13bd4:	mov	r8, r0
   13bd8:	mov	r2, #5
   13bdc:	ldr	r1, [pc, #68]	; 13c28 <__assert_fail@plt+0x226c>
   13be0:	mov	r0, #0
   13be4:	bl	11638 <dcgettext@plt>
   13be8:	ldr	r2, [pc, #60]	; 13c2c <__assert_fail@plt+0x2270>
   13bec:	mov	r3, #0
   13bf0:	mov	r1, r5
   13bf4:	stm	sp, {r7, r8}
   13bf8:	str	r0, [sp, #8]
   13bfc:	mov	r0, r4
   13c00:	str	r3, [sp, #12]
   13c04:	mov	r3, r6
   13c08:	bl	17cbc <__assert_fail@plt+0x6300>
   13c0c:	add	sp, sp, #16
   13c10:	pop	{r4, r5, r6, r7, r8, pc}
   13c14:	andeq	r7, r3, r8, lsl r2
   13c18:	andeq	r7, r3, ip, lsl r2
   13c1c:	andeq	r6, r2, lr, asr #5
   13c20:			; <UNDEFINED> instruction: 0x000371bc
   13c24:	ldrdeq	r6, [r2], -sp
   13c28:	andeq	r6, r2, ip, ror #5
   13c2c:	strdeq	r6, [r2], -r9
   13c30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c34:	cmp	r2, #0
   13c38:	sub	sp, sp, #8192	; 0x2000
   13c3c:	sub	sp, sp, #8
   13c40:	mov	r7, r3
   13c44:	beq	13cf8 <__assert_fail@plt+0x233c>
   13c48:	mov	r9, r1
   13c4c:	add	r2, sp, #8192	; 0x2000
   13c50:	add	r5, sp, #8
   13c54:	add	r2, r2, #40	; 0x28
   13c58:	mov	sl, r0
   13c5c:	mvn	r3, #0
   13c60:	str	r9, [sp]
   13c64:	mov	r1, #8192	; 0x2000
   13c68:	mov	r0, r5
   13c6c:	ldr	r2, [r2]
   13c70:	bl	17414 <__assert_fail@plt+0x5a58>
   13c74:	cmp	r0, #8192	; 0x2000
   13c78:	mov	r6, r0
   13c7c:	movcc	r4, r5
   13c80:	bcc	13cb0 <__assert_fail@plt+0x22f4>
   13c84:	add	r8, r0, #1
   13c88:	mov	r0, r8
   13c8c:	bl	17d6c <__assert_fail@plt+0x63b0>
   13c90:	add	r2, sp, #8192	; 0x2000
   13c94:	mvn	r3, #0
   13c98:	str	r9, [sp]
   13c9c:	add	r2, r2, #40	; 0x28
   13ca0:	mov	r1, r8
   13ca4:	ldr	r2, [r2]
   13ca8:	mov	r4, r0
   13cac:	bl	17414 <__assert_fail@plt+0x5a58>
   13cb0:	mov	r1, r6
   13cb4:	mov	r0, r4
   13cb8:	bl	13d14 <__assert_fail@plt+0x2358>
   13cbc:	mov	r3, #0
   13cc0:	mov	r2, r4
   13cc4:	mov	r1, r7
   13cc8:	strb	r3, [r4, r0]
   13ccc:	mov	r0, sl
   13cd0:	bl	117c4 <fprintf@plt>
   13cd4:	cmp	r4, r5
   13cd8:	mov	r6, r0
   13cdc:	beq	13ce8 <__assert_fail@plt+0x232c>
   13ce0:	mov	r0, r4
   13ce4:	bl	18758 <__assert_fail@plt+0x6d9c>
   13ce8:	mov	r0, r6
   13cec:	add	sp, sp, #8192	; 0x2000
   13cf0:	add	sp, sp, #8
   13cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cf8:	add	r3, sp, #8192	; 0x2000
   13cfc:	mov	r1, r7
   13d00:	add	r3, r3, #40	; 0x28
   13d04:	ldr	r2, [r3]
   13d08:	bl	117c4 <fprintf@plt>
   13d0c:	mov	r6, r0
   13d10:	b	13ce8 <__assert_fail@plt+0x232c>
   13d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	sub	sp, sp, #20
   13d1c:	mov	r6, r0
   13d20:	mov	r4, r1
   13d24:	add	sl, r6, r4
   13d28:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   13d2c:	cmp	r0, #1
   13d30:	movls	r5, #63	; 0x3f
   13d34:	bls	13d78 <__assert_fail@plt+0x23bc>
   13d38:	mov	r4, r6
   13d3c:	mov	r5, r6
   13d40:	mov	r8, #0
   13d44:	mov	r9, #0
   13d48:	cmp	r5, sl
   13d4c:	bcc	13d8c <__assert_fail@plt+0x23d0>
   13d50:	sub	r4, r4, r6
   13d54:	b	13d80 <__assert_fail@plt+0x23c4>
   13d58:	bl	1177c <__ctype_b_loc@plt>
   13d5c:	ldrb	r3, [r6]
   13d60:	add	r6, r6, #1
   13d64:	ldr	r2, [r0]
   13d68:	lsl	r3, r3, #1
   13d6c:	ldrh	r3, [r2, r3]
   13d70:	tst	r3, #16384	; 0x4000
   13d74:	strbeq	r5, [r6, #-1]
   13d78:	cmp	sl, r6
   13d7c:	bhi	13d58 <__assert_fail@plt+0x239c>
   13d80:	mov	r0, r4
   13d84:	add	sp, sp, #20
   13d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d8c:	ldrb	r3, [r5]
   13d90:	add	r2, r4, #1
   13d94:	cmp	r3, #63	; 0x3f
   13d98:	bhi	13dc0 <__assert_fail@plt+0x2404>
   13d9c:	cmp	r3, #37	; 0x25
   13da0:	bcs	13db0 <__assert_fail@plt+0x23f4>
   13da4:	sub	r1, r3, #32
   13da8:	cmp	r1, #3
   13dac:	bhi	13ddc <__assert_fail@plt+0x2420>
   13db0:	add	r5, r5, #1
   13db4:	strb	r3, [r4]
   13db8:	mov	r4, r2
   13dbc:	b	13d48 <__assert_fail@plt+0x238c>
   13dc0:	cmp	r3, #65	; 0x41
   13dc4:	bcc	13ddc <__assert_fail@plt+0x2420>
   13dc8:	cmp	r3, #95	; 0x5f
   13dcc:	bls	13db0 <__assert_fail@plt+0x23f4>
   13dd0:	sub	r1, r3, #97	; 0x61
   13dd4:	cmp	r1, #29
   13dd8:	b	13dac <__assert_fail@plt+0x23f0>
   13ddc:	mov	fp, #63	; 0x3f
   13de0:	strd	r8, [sp, #8]
   13de4:	add	r3, sp, #8
   13de8:	sub	r2, sl, r5
   13dec:	mov	r1, r5
   13df0:	add	r0, sp, #4
   13df4:	bl	1886c <__assert_fail@plt+0x6eb0>
   13df8:	cmn	r0, #1
   13dfc:	mov	r7, r0
   13e00:	bne	13e14 <__assert_fail@plt+0x2458>
   13e04:	mov	r3, #63	; 0x3f
   13e08:	add	r5, r5, #1
   13e0c:	strb	r3, [r4], #1
   13e10:	b	13d48 <__assert_fail@plt+0x238c>
   13e14:	cmn	r0, #2
   13e18:	bne	13e2c <__assert_fail@plt+0x2470>
   13e1c:	mov	r3, #63	; 0x3f
   13e20:	mov	r5, sl
   13e24:	strb	r3, [r4], #1
   13e28:	b	13d48 <__assert_fail@plt+0x238c>
   13e2c:	cmp	r0, #0
   13e30:	ldr	r0, [sp, #4]
   13e34:	moveq	r7, #1
   13e38:	bl	11584 <wcwidth@plt>
   13e3c:	cmp	r0, #0
   13e40:	add	r3, r5, r7
   13e44:	movlt	r5, r3
   13e48:	strblt	fp, [r4], #1
   13e4c:	blt	13e68 <__assert_fail@plt+0x24ac>
   13e50:	sub	r2, r4, #1
   13e54:	ldrb	r1, [r5], #1
   13e58:	cmp	r5, r3
   13e5c:	strb	r1, [r2, #1]!
   13e60:	bne	13e54 <__assert_fail@plt+0x2498>
   13e64:	add	r4, r4, r7
   13e68:	add	r0, sp, #8
   13e6c:	bl	11614 <mbsinit@plt>
   13e70:	cmp	r0, #0
   13e74:	beq	13de4 <__assert_fail@plt+0x2428>
   13e78:	b	13d48 <__assert_fail@plt+0x238c>
   13e7c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	mov	r5, #0
   13e84:	mov	r6, r0
   13e88:	mov	r7, r5
   13e8c:	mov	fp, #12
   13e90:	ldr	r4, [pc, #224]	; 13f78 <__assert_fail@plt+0x25bc>
   13e94:	mov	r8, r4
   13e98:	mul	sl, fp, r7
   13e9c:	mov	r1, r6
   13ea0:	ldr	r9, [sl, r4]
   13ea4:	mov	r0, r9
   13ea8:	bl	11554 <strcmp@plt>
   13eac:	cmp	r0, #0
   13eb0:	beq	13f68 <__assert_fail@plt+0x25ac>
   13eb4:	mov	r0, r9
   13eb8:	add	r7, r7, #1
   13ebc:	bl	1787c <__assert_fail@plt+0x5ec0>
   13ec0:	bl	117ac <strlen@plt>
   13ec4:	add	r0, r0, #2
   13ec8:	cmp	r7, #13
   13ecc:	add	r5, r5, r0
   13ed0:	bne	13e98 <__assert_fail@plt+0x24dc>
   13ed4:	ldr	r7, [pc, #160]	; 13f7c <__assert_fail@plt+0x25c0>
   13ed8:	add	r0, r5, #1
   13edc:	mov	fp, #0
   13ee0:	bl	17d6c <__assert_fail@plt+0x63b0>
   13ee4:	ldr	sl, [pc, #148]	; 13f80 <__assert_fail@plt+0x25c4>
   13ee8:	mov	r5, r0
   13eec:	mov	r4, r0
   13ef0:	mov	r9, #12
   13ef4:	mul	r3, r9, fp
   13ef8:	add	fp, fp, #1
   13efc:	ldr	r0, [r8, r3]
   13f00:	bl	1787c <__assert_fail@plt+0x5ec0>
   13f04:	mov	r2, r0
   13f08:	mov	r1, r7
   13f0c:	mov	r0, r4
   13f10:	bl	11908 <sprintf@plt>
   13f14:	cmp	fp, #13
   13f18:	add	r4, r4, r0
   13f1c:	bne	13f54 <__assert_fail@plt+0x2598>
   13f20:	mov	r2, #5
   13f24:	ldr	r1, [pc, #88]	; 13f84 <__assert_fail@plt+0x25c8>
   13f28:	mov	r0, #0
   13f2c:	bl	11638 <dcgettext@plt>
   13f30:	mov	r4, r0
   13f34:	mov	r0, r6
   13f38:	bl	1787c <__assert_fail@plt+0x5ec0>
   13f3c:	mov	r3, r0
   13f40:	mov	r2, r4
   13f44:	str	r5, [sp]
   13f48:	mov	r1, #0
   13f4c:	mov	r0, #1
   13f50:	bl	116e0 <error@plt>
   13f54:	mov	r0, r4
   13f58:	mov	r1, sl
   13f5c:	bl	116b0 <strcpy@plt>
   13f60:	add	r4, r4, #2
   13f64:	b	13ef4 <__assert_fail@plt+0x2538>
   13f68:	add	r4, r4, sl
   13f6c:	ldr	r0, [r4, #8]
   13f70:	add	sp, sp, #12
   13f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f78:	andeq	r6, r2, r8, lsl r3
   13f7c:	andeq	r6, r2, r8, lsr #27
   13f80:			; <UNDEFINED> instruction: 0x000263b4
   13f84:			; <UNDEFINED> instruction: 0x000263b7
   13f88:	cmp	r0, #12
   13f8c:	movls	r3, #12
   13f90:	ldrls	r2, [pc, #12]	; 13fa4 <__assert_fail@plt+0x25e8>
   13f94:	mulls	r3, r3, r0
   13f98:	ldrls	r0, [r2, r3]
   13f9c:	movhi	r0, #0
   13fa0:	bx	lr
   13fa4:	andeq	r6, r2, r8, lsl r3
   13fa8:	cmp	r0, #12
   13fac:	ldrls	r3, [pc, #16]	; 13fc4 <__assert_fail@plt+0x2608>
   13fb0:	movls	r2, #12
   13fb4:	mlals	r0, r2, r0, r3
   13fb8:	ldrls	r0, [r0, #8]
   13fbc:	mvnhi	r0, #0
   13fc0:	bx	lr
   13fc4:	andeq	r6, r2, r8, lsl r3
   13fc8:	cmp	r0, #12
   13fcc:	ldrls	r3, [pc, #16]	; 13fe4 <__assert_fail@plt+0x2628>
   13fd0:	movls	r2, #12
   13fd4:	mlals	r0, r2, r0, r3
   13fd8:	ldrls	r0, [r0, #4]
   13fdc:	movhi	r0, #0
   13fe0:	bx	lr
   13fe4:	andeq	r6, r2, r8, lsl r3
   13fe8:	cmp	r0, #12
   13fec:	bhi	1400c <__assert_fail@plt+0x2650>
   13ff0:	ldr	r2, [pc, #88]	; 14050 <__assert_fail@plt+0x2694>
   13ff4:	mov	r3, #12
   13ff8:	mla	r3, r3, r0, r2
   13ffc:	ldr	ip, [r3, #8]
   14000:	mov	r3, #0
   14004:	cmp	r3, r0
   14008:	bne	1402c <__assert_fail@plt+0x2670>
   1400c:	mvn	r0, #0
   14010:	bx	lr
   14014:	add	r3, r3, #1
   14018:	add	r2, r2, #12
   1401c:	cmp	r3, r0
   14020:	bne	14030 <__assert_fail@plt+0x2674>
   14024:	mvn	r0, #0
   14028:	pop	{pc}		; (ldr pc, [sp], #4)
   1402c:	push	{lr}		; (str lr, [sp, #-4]!)
   14030:	ldr	lr, [r2, #4]
   14034:	tst	r1, lr
   14038:	beq	14014 <__assert_fail@plt+0x2658>
   1403c:	ldr	lr, [r2, #8]
   14040:	cmp	lr, ip
   14044:	bne	14014 <__assert_fail@plt+0x2658>
   14048:	mov	r0, r3
   1404c:	pop	{pc}		; (ldr pc, [sp], #4)
   14050:	andeq	r6, r2, r8, lsl r3
   14054:	push	{r4, r5, r6, lr}
   14058:	mov	r4, r0
   1405c:	subs	r0, r2, #0
   14060:	movne	r2, #0
   14064:	ldr	r5, [sp, #16]
   14068:	strne	r2, [r3]
   1406c:	strne	r2, [r5]
   14070:	bne	14098 <__assert_fail@plt+0x26dc>
   14074:	ldr	r2, [r5]
   14078:	ldr	ip, [r3]
   1407c:	add	ip, ip, r2
   14080:	str	ip, [r3]
   14084:	ldrb	r2, [r4, ip]
   14088:	cmp	r2, #0
   1408c:	popeq	{r4, r5, r6, pc}
   14090:	add	ip, ip, #1
   14094:	str	ip, [r3]
   14098:	ldr	r0, [r3]
   1409c:	ldrb	r3, [r1]
   140a0:	add	r4, r4, r0
   140a4:	cmp	r3, #0
   140a8:	beq	140c0 <__assert_fail@plt+0x2704>
   140ac:	mov	r0, r4
   140b0:	bl	11920 <strpbrk@plt>
   140b4:	cmp	r0, #0
   140b8:	subne	r0, r0, r4
   140bc:	bne	140c8 <__assert_fail@plt+0x270c>
   140c0:	mov	r0, r4
   140c4:	bl	117ac <strlen@plt>
   140c8:	str	r0, [r5]
   140cc:	mov	r0, #1
   140d0:	pop	{r4, r5, r6, pc}
   140d4:	push	{r4, r5, lr}
   140d8:	mov	r2, #5
   140dc:	sub	sp, sp, #20
   140e0:	mov	r4, r0
   140e4:	mov	r5, r1
   140e8:	mov	r0, #0
   140ec:	ldr	r1, [pc, #52]	; 14128 <__assert_fail@plt+0x276c>
   140f0:	bl	11638 <dcgettext@plt>
   140f4:	ldr	r3, [pc, #48]	; 1412c <__assert_fail@plt+0x2770>
   140f8:	mov	r1, r0
   140fc:	mov	r0, r4
   14100:	ldr	r2, [pc, #40]	; 14130 <__assert_fail@plt+0x2774>
   14104:	str	r3, [sp, #8]
   14108:	ldr	r3, [pc, #36]	; 14134 <__assert_fail@plt+0x2778>
   1410c:	str	r3, [sp, #4]
   14110:	ldr	r3, [pc, #32]	; 14138 <__assert_fail@plt+0x277c>
   14114:	str	r3, [sp]
   14118:	mov	r3, r5
   1411c:	bl	117c4 <fprintf@plt>
   14120:	add	sp, sp, #20
   14124:	pop	{r4, r5, pc}
   14128:	andeq	r6, r2, r8, asr r4
   1412c:	andeq	r6, r2, sp, asr #10
   14130:	andeq	r6, r2, r6, lsr #10
   14134:	andeq	r6, r2, r3, ror #10
   14138:	strdeq	r6, [r2], -r9
   1413c:	mov	r3, r0
   14140:	mov	r2, r3
   14144:	mov	r0, r3
   14148:	ldrb	r1, [r2], #1
   1414c:	cmp	r1, #47	; 0x2f
   14150:	beq	1415c <__assert_fail@plt+0x27a0>
   14154:	mov	r2, #0
   14158:	b	14178 <__assert_fail@plt+0x27bc>
   1415c:	mov	r3, r2
   14160:	b	14140 <__assert_fail@plt+0x2784>
   14164:	cmp	r1, #47	; 0x2f
   14168:	moveq	r2, #1
   1416c:	beq	14178 <__assert_fail@plt+0x27bc>
   14170:	cmp	r2, #0
   14174:	bne	1418c <__assert_fail@plt+0x27d0>
   14178:	mov	ip, r3
   1417c:	ldrb	r1, [r3], #1
   14180:	cmp	r1, #0
   14184:	bne	14164 <__assert_fail@plt+0x27a8>
   14188:	bx	lr
   1418c:	mov	r0, ip
   14190:	b	14154 <__assert_fail@plt+0x2798>
   14194:	push	{r4, lr}
   14198:	mov	r4, r0
   1419c:	bl	117ac <strlen@plt>
   141a0:	cmp	r0, #1
   141a4:	popls	{r4, pc}
   141a8:	sub	r3, r0, #1
   141ac:	ldrb	r2, [r4, r3]
   141b0:	cmp	r2, #47	; 0x2f
   141b4:	popne	{r4, pc}
   141b8:	mov	r0, r3
   141bc:	b	141a0 <__assert_fail@plt+0x27e4>
   141c0:	ldr	r3, [pc, #4]	; 141cc <__assert_fail@plt+0x2810>
   141c4:	str	r0, [r3]
   141c8:	bx	lr
   141cc:	muleq	r3, r8, r2
   141d0:	ldr	r3, [pc, #4]	; 141dc <__assert_fail@plt+0x2820>
   141d4:	strb	r0, [r3, #4]
   141d8:	bx	lr
   141dc:	muleq	r3, r8, r2
   141e0:	ldr	r3, [pc, #176]	; 14298 <__assert_fail@plt+0x28dc>
   141e4:	push	{r0, r1, r4, r5, r6, lr}
   141e8:	ldr	r0, [r3]
   141ec:	bl	24bc0 <__assert_fail@plt+0x13204>
   141f0:	cmp	r0, #0
   141f4:	beq	1427c <__assert_fail@plt+0x28c0>
   141f8:	ldr	r4, [pc, #156]	; 1429c <__assert_fail@plt+0x28e0>
   141fc:	bl	117dc <__errno_location@plt>
   14200:	mov	r5, r0
   14204:	ldrb	r6, [r4, #4]
   14208:	cmp	r6, #0
   1420c:	beq	1421c <__assert_fail@plt+0x2860>
   14210:	ldr	r3, [r0]
   14214:	cmp	r3, #32
   14218:	beq	1427c <__assert_fail@plt+0x28c0>
   1421c:	mov	r2, #5
   14220:	ldr	r1, [pc, #120]	; 142a0 <__assert_fail@plt+0x28e4>
   14224:	mov	r0, #0
   14228:	bl	11638 <dcgettext@plt>
   1422c:	mov	r6, r0
   14230:	ldr	r0, [r4]
   14234:	cmp	r0, #0
   14238:	beq	14268 <__assert_fail@plt+0x28ac>
   1423c:	ldr	r4, [r5]
   14240:	bl	1772c <__assert_fail@plt+0x5d70>
   14244:	mov	r3, r0
   14248:	ldr	r2, [pc, #84]	; 142a4 <__assert_fail@plt+0x28e8>
   1424c:	mov	r0, #0
   14250:	str	r6, [sp]
   14254:	mov	r1, r4
   14258:	bl	116e0 <error@plt>
   1425c:	ldr	r3, [pc, #68]	; 142a8 <__assert_fail@plt+0x28ec>
   14260:	ldr	r0, [r3]
   14264:	bl	115d8 <_exit@plt>
   14268:	mov	r3, r6
   1426c:	ldr	r2, [pc, #56]	; 142ac <__assert_fail@plt+0x28f0>
   14270:	ldr	r1, [r5]
   14274:	bl	116e0 <error@plt>
   14278:	b	1425c <__assert_fail@plt+0x28a0>
   1427c:	ldr	r3, [pc, #44]	; 142b0 <__assert_fail@plt+0x28f4>
   14280:	ldr	r0, [r3]
   14284:	bl	24bc0 <__assert_fail@plt+0x13204>
   14288:	cmp	r0, #0
   1428c:	bne	1425c <__assert_fail@plt+0x28a0>
   14290:	add	sp, sp, #8
   14294:	pop	{r4, r5, r6, pc}
   14298:	andeq	r7, r3, ip, lsl r2
   1429c:	muleq	r3, r8, r2
   142a0:	muleq	r2, r2, r5
   142a4:	muleq	r2, lr, r5
   142a8:	andeq	r7, r3, r0, asr #3
   142ac:	andeq	r6, r2, r8, lsr #27
   142b0:	andeq	r7, r3, r8, lsl r2
   142b4:	push	{r1, r2, r3}
   142b8:	push	{r0, r1, lr}
   142bc:	ldr	r1, [sp, #12]
   142c0:	ands	r2, r1, #64	; 0x40
   142c4:	ldrne	r2, [sp, #16]
   142c8:	addne	r3, sp, #16
   142cc:	strne	r3, [sp, #4]
   142d0:	bl	116f8 <open64@plt>
   142d4:	bl	178b4 <__assert_fail@plt+0x5ef8>
   142d8:	add	sp, sp, #8
   142dc:	pop	{lr}		; (ldr lr, [sp], #4)
   142e0:	add	sp, sp, #12
   142e4:	bx	lr
   142e8:	cmp	r0, #1
   142ec:	push	{r4, r6, r7, lr}
   142f0:	vpush	{d8}
   142f4:	vmov.f64	d8, d0
   142f8:	beq	1435c <__assert_fail@plt+0x29a0>
   142fc:	vldr	d7, [pc, #100]	; 14368 <__assert_fail@plt+0x29ac>
   14300:	vcmpe.f64	d0, d7
   14304:	vmrs	APSR_nzcv, fpscr
   14308:	bpl	1435c <__assert_fail@plt+0x29a0>
   1430c:	mov	r4, r0
   14310:	vmov	r0, r1, d0
   14314:	bl	25330 <__assert_fail@plt+0x13974>
   14318:	cmp	r4, #0
   1431c:	mov	r6, r0
   14320:	mov	r7, r1
   14324:	movne	r0, #0
   14328:	bne	14344 <__assert_fail@plt+0x2988>
   1432c:	bl	2526c <__assert_fail@plt+0x138b0>
   14330:	vmov	d7, r0, r1
   14334:	vcmp.f64	d7, d8
   14338:	vmrs	APSR_nzcv, fpscr
   1433c:	movne	r0, #1
   14340:	moveq	r0, #0
   14344:	adds	r2, r6, r0
   14348:	adc	r3, r7, r0, asr #31
   1434c:	mov	r0, r2
   14350:	mov	r1, r3
   14354:	bl	2526c <__assert_fail@plt+0x138b0>
   14358:	vmov	d8, r0, r1
   1435c:	vmov.f64	d0, d8
   14360:	vpop	{d8}
   14364:	pop	{r4, r6, r7, pc}
   14368:	andeq	r0, r0, r0
   1436c:	mvnsmi	r0, #0
   14370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14374:	mov	r7, r1
   14378:	add	r5, r2, #644	; 0x284
   1437c:	mov	fp, r2
   14380:	mov	r6, r0
   14384:	add	r5, r5, #3
   14388:	vpush	{d8-d9}
   1438c:	sub	sp, sp, #100	; 0x64
   14390:	str	r3, [sp]
   14394:	and	r3, r3, #3
   14398:	str	r3, [sp, #12]
   1439c:	ldr	r3, [sp]
   143a0:	ands	r3, r3, #32
   143a4:	str	r3, [sp, #32]
   143a8:	movne	r3, #1024	; 0x400
   143ac:	moveq	r3, #1000	; 0x3e8
   143b0:	str	r3, [sp, #4]
   143b4:	bl	118f0 <localeconv@plt>
   143b8:	ldr	r3, [r0]
   143bc:	mov	r4, r0
   143c0:	mov	r0, r3
   143c4:	str	r3, [sp, #16]
   143c8:	bl	117ac <strlen@plt>
   143cc:	sub	r3, r0, #1
   143d0:	ldr	r2, [sp, #16]
   143d4:	cmp	r3, #16
   143d8:	mov	r3, r0
   143dc:	movcc	r3, r0
   143e0:	movcs	r3, #1
   143e4:	str	r3, [sp, #8]
   143e8:	ldr	r3, [pc, #1728]	; 14ab0 <__assert_fail@plt+0x30f4>
   143ec:	movcc	r3, r2
   143f0:	str	r3, [sp, #16]
   143f4:	ldr	r3, [r4, #8]
   143f8:	str	r3, [sp, #36]	; 0x24
   143fc:	ldr	r3, [r4, #4]
   14400:	mov	r0, r3
   14404:	str	r3, [sp, #20]
   14408:	bl	117ac <strlen@plt>
   1440c:	ldr	r3, [pc, #1696]	; 14ab4 <__assert_fail@plt+0x30f8>
   14410:	cmp	r0, #16
   14414:	ldr	r2, [sp, #20]
   14418:	ldrd	r0, [sp, #152]	; 0x98
   1441c:	movhi	r2, r3
   14420:	str	r2, [sp, #20]
   14424:	ldrd	r2, [sp, #160]	; 0xa0
   14428:	cmp	r3, r1
   1442c:	cmpeq	r2, r0
   14430:	bhi	1447c <__assert_fail@plt+0x2ac0>
   14434:	bl	252e0 <__assert_fail@plt+0x13924>
   14438:	orrs	r3, r2, r3
   1443c:	bne	145cc <__assert_fail@plt+0x2c10>
   14440:	mul	r3, r0, r7
   14444:	mov	r2, r0
   14448:	umull	r8, r9, r0, r6
   1444c:	mla	r3, r6, r1, r3
   14450:	mov	r0, r8
   14454:	add	r9, r3, r9
   14458:	mov	r3, r1
   1445c:	mov	r1, r9
   14460:	bl	252e0 <__assert_fail@plt+0x13924>
   14464:	cmp	r1, r7
   14468:	cmpeq	r0, r6
   1446c:	bne	145cc <__assert_fail@plt+0x2c10>
   14470:	mov	sl, #0
   14474:	mov	r7, sl
   14478:	b	14510 <__assert_fail@plt+0x2b54>
   1447c:	ldrd	r2, [sp, #152]	; 0x98
   14480:	orrs	r3, r2, r3
   14484:	beq	145cc <__assert_fail@plt+0x2c10>
   14488:	ldrd	r2, [sp, #152]	; 0x98
   1448c:	ldrd	r0, [sp, #160]	; 0xa0
   14490:	bl	252e0 <__assert_fail@plt+0x13924>
   14494:	orrs	r3, r2, r3
   14498:	strd	r0, [sp, #40]	; 0x28
   1449c:	bne	145cc <__assert_fail@plt+0x2c10>
   144a0:	mov	r2, r0
   144a4:	mov	r3, r1
   144a8:	mov	r0, r6
   144ac:	mov	r1, r7
   144b0:	bl	252e0 <__assert_fail@plt+0x13924>
   144b4:	mov	ip, #10
   144b8:	mov	r6, r0
   144bc:	mov	r4, r1
   144c0:	mov	r8, r6
   144c4:	umull	r0, r1, r2, ip
   144c8:	mov	r9, r4
   144cc:	mla	r1, ip, r3, r1
   144d0:	ldrd	r2, [sp, #40]	; 0x28
   144d4:	bl	252e0 <__assert_fail@plt+0x13924>
   144d8:	adds	r2, r2, r2
   144dc:	mov	r7, r0
   144e0:	adc	r3, r3, r3
   144e4:	strd	r2, [sp, #24]
   144e8:	ldrd	r0, [sp, #24]
   144ec:	ldrd	r2, [sp, #40]	; 0x28
   144f0:	cmp	r3, r1
   144f4:	cmpeq	r2, r0
   144f8:	bls	145c0 <__assert_fail@plt+0x2c04>
   144fc:	ldr	r3, [sp, #24]
   14500:	ldr	r2, [sp, #28]
   14504:	orrs	r3, r3, r2
   14508:	movne	sl, #1
   1450c:	moveq	sl, #0
   14510:	ldr	r3, [sp]
   14514:	ands	r3, r3, #16
   14518:	moveq	r4, r5
   1451c:	mvneq	r6, #0
   14520:	str	r3, [sp, #40]	; 0x28
   14524:	beq	1486c <__assert_fail@plt+0x2eb0>
   14528:	ldr	r2, [sp, #4]
   1452c:	mov	r3, #0
   14530:	cmp	r3, r9
   14534:	cmpeq	r2, r8
   14538:	strd	r2, [sp, #24]
   1453c:	movhi	r4, r5
   14540:	movhi	r6, #0
   14544:	bhi	1486c <__assert_fail@plt+0x2eb0>
   14548:	mov	r6, #0
   1454c:	mov	r4, #10
   14550:	mov	r0, r8
   14554:	mov	r1, r9
   14558:	ldrd	r2, [sp, #24]
   1455c:	bl	252e0 <__assert_fail@plt+0x13924>
   14560:	ldr	r3, [sp, #4]
   14564:	mla	r2, r4, r2, r7
   14568:	mov	r8, r0
   1456c:	mov	r9, r1
   14570:	udiv	ip, r2, r3
   14574:	mls	r2, r3, ip, r2
   14578:	mov	r7, ip
   1457c:	asr	r3, sl, #1
   14580:	add	r3, r3, r2, lsl #1
   14584:	ldr	r2, [sp, #4]
   14588:	add	sl, sl, r3
   1458c:	cmp	r2, r3
   14590:	bls	147bc <__assert_fail@plt+0x2e00>
   14594:	adds	sl, sl, #0
   14598:	movne	sl, #1
   1459c:	ldrd	r2, [sp, #24]
   145a0:	add	r6, r6, #1
   145a4:	cmp	r3, r1
   145a8:	cmpeq	r2, r0
   145ac:	bhi	147d0 <__assert_fail@plt+0x2e14>
   145b0:	cmp	r6, #8
   145b4:	bne	14550 <__assert_fail@plt+0x2b94>
   145b8:	mov	r4, r5
   145bc:	b	1486c <__assert_fail@plt+0x2eb0>
   145c0:	movcs	sl, #2
   145c4:	movcc	sl, #3
   145c8:	b	14510 <__assert_fail@plt+0x2b54>
   145cc:	ldrd	r0, [sp, #152]	; 0x98
   145d0:	bl	2526c <__assert_fail@plt+0x138b0>
   145d4:	vmov	d9, r0, r1
   145d8:	ldrd	r0, [sp, #160]	; 0xa0
   145dc:	bl	2526c <__assert_fail@plt+0x138b0>
   145e0:	vmov	d7, r0, r1
   145e4:	mov	r0, r6
   145e8:	mov	r1, r7
   145ec:	vdiv.f64	d8, d9, d7
   145f0:	bl	2526c <__assert_fail@plt+0x138b0>
   145f4:	vmov	d7, r0, r1
   145f8:	ldr	r3, [sp]
   145fc:	ands	r4, r3, #16
   14600:	vmul.f64	d0, d8, d7
   14604:	bne	146e8 <__assert_fail@plt+0x2d2c>
   14608:	ldr	r0, [sp, #12]
   1460c:	mvn	r6, #0
   14610:	bl	142e8 <__assert_fail@plt+0x292c>
   14614:	vmov	r2, r3, d0
   14618:	mov	r0, fp
   1461c:	ldr	r1, [pc, #1172]	; 14ab8 <__assert_fail@plt+0x30fc>
   14620:	bl	11908 <sprintf@plt>
   14624:	mov	r0, fp
   14628:	bl	117ac <strlen@plt>
   1462c:	mov	sl, r0
   14630:	sub	r7, r5, sl
   14634:	sub	r4, sl, r4
   14638:	mov	r2, sl
   1463c:	mov	r1, fp
   14640:	mov	r0, r7
   14644:	add	r4, r7, r4
   14648:	bl	1159c <memmove@plt>
   1464c:	ldr	r3, [sp]
   14650:	tst	r3, #4
   14654:	beq	149a0 <__assert_fail@plt+0x2fe4>
   14658:	ldr	r0, [sp, #20]
   1465c:	sub	r9, r4, r7
   14660:	add	sl, sp, #52	; 0x34
   14664:	bl	117ac <strlen@plt>
   14668:	mov	r2, r9
   1466c:	mov	r1, r7
   14670:	str	r0, [sp, #8]
   14674:	mov	r0, sl
   14678:	mvn	r8, #0
   1467c:	bl	115e4 <memcpy@plt>
   14680:	ldr	r3, [sp, #36]	; 0x24
   14684:	ldrb	r2, [r3]
   14688:	cmp	r2, #0
   1468c:	beq	146a4 <__assert_fail@plt+0x2ce8>
   14690:	cmp	r2, #255	; 0xff
   14694:	add	r3, r3, #1
   14698:	movne	r8, r2
   1469c:	moveq	r8, r9
   146a0:	str	r3, [sp, #36]	; 0x24
   146a4:	cmp	r8, r9
   146a8:	movcs	r8, r9
   146ac:	sub	r9, r9, r8
   146b0:	sub	r7, r4, r8
   146b4:	mov	r2, r8
   146b8:	add	r1, sl, r9
   146bc:	mov	r0, r7
   146c0:	bl	115e4 <memcpy@plt>
   146c4:	cmp	r9, #0
   146c8:	beq	149a0 <__assert_fail@plt+0x2fe4>
   146cc:	ldr	r3, [sp, #8]
   146d0:	ldr	r1, [sp, #20]
   146d4:	sub	r4, r7, r3
   146d8:	mov	r2, r3
   146dc:	mov	r0, r4
   146e0:	bl	115e4 <memcpy@plt>
   146e4:	b	14680 <__assert_fail@plt+0x2cc4>
   146e8:	vldr	s13, [sp, #4]
   146ec:	mov	r6, #0
   146f0:	vldr	d7, [pc, #936]	; 14aa0 <__assert_fail@plt+0x30e4>
   146f4:	vcvt.f64.s32	d6, s13
   146f8:	vmul.f64	d7, d7, d6
   146fc:	add	r6, r6, #1
   14700:	vmul.f64	d5, d6, d7
   14704:	vcmpe.f64	d5, d0
   14708:	vmrs	APSR_nzcv, fpscr
   1470c:	bhi	14718 <__assert_fail@plt+0x2d5c>
   14710:	cmp	r6, #8
   14714:	bne	146f8 <__assert_fail@plt+0x2d3c>
   14718:	vdiv.f64	d9, d0, d7
   1471c:	ldr	r0, [sp, #12]
   14720:	vmov.f64	d0, d9
   14724:	bl	142e8 <__assert_fail@plt+0x292c>
   14728:	vmov	r2, r3, d0
   1472c:	mov	r0, fp
   14730:	ldr	r1, [pc, #900]	; 14abc <__assert_fail@plt+0x3100>
   14734:	bl	11908 <sprintf@plt>
   14738:	mov	r0, fp
   1473c:	bl	117ac <strlen@plt>
   14740:	ldr	r3, [sp, #8]
   14744:	mov	sl, r0
   14748:	add	r4, r3, #1
   1474c:	ldr	r3, [sp, #32]
   14750:	clz	r3, r3
   14754:	lsr	r3, r3, #5
   14758:	add	r3, r3, #1
   1475c:	add	r3, r3, r4
   14760:	cmp	r3, r0
   14764:	bcc	14784 <__assert_fail@plt+0x2dc8>
   14768:	ldr	r3, [sp]
   1476c:	tst	r3, #8
   14770:	beq	14630 <__assert_fail@plt+0x2c74>
   14774:	add	r3, fp, r0
   14778:	ldrb	r3, [r3, #-1]
   1477c:	cmp	r3, #48	; 0x30
   14780:	bne	14630 <__assert_fail@plt+0x2c74>
   14784:	vldr	d8, [pc, #796]	; 14aa8 <__assert_fail@plt+0x30ec>
   14788:	mov	r4, #0
   1478c:	ldr	r0, [sp, #12]
   14790:	vmul.f64	d0, d9, d8
   14794:	bl	142e8 <__assert_fail@plt+0x292c>
   14798:	vdiv.f64	d7, d0, d8
   1479c:	ldr	r1, [pc, #788]	; 14ab8 <__assert_fail@plt+0x30fc>
   147a0:	mov	r0, fp
   147a4:	vmov	r2, r3, d7
   147a8:	bl	11908 <sprintf@plt>
   147ac:	mov	r0, fp
   147b0:	bl	117ac <strlen@plt>
   147b4:	mov	sl, r0
   147b8:	b	14630 <__assert_fail@plt+0x2c74>
   147bc:	ldr	r3, [sp, #4]
   147c0:	cmp	r3, sl
   147c4:	movcc	sl, #3
   147c8:	movcs	sl, #2
   147cc:	b	1459c <__assert_fail@plt+0x2be0>
   147d0:	cmp	r1, #0
   147d4:	cmpeq	r0, #9
   147d8:	bhi	145b8 <__assert_fail@plt+0x2bfc>
   147dc:	ldr	r3, [sp, #12]
   147e0:	cmp	r3, #1
   147e4:	bne	14960 <__assert_fail@plt+0x2fa4>
   147e8:	and	r3, ip, #1
   147ec:	add	r3, r3, sl
   147f0:	cmp	r3, #2
   147f4:	movle	r3, #0
   147f8:	movgt	r3, #1
   147fc:	cmp	r3, #0
   14800:	beq	14a80 <__assert_fail@plt+0x30c4>
   14804:	add	r7, ip, #1
   14808:	cmp	r7, #10
   1480c:	bne	1483c <__assert_fail@plt+0x2e80>
   14810:	adds	r8, r0, #1
   14814:	adc	r9, r1, #0
   14818:	cmp	r9, #0
   1481c:	cmpeq	r8, #10
   14820:	moveq	r4, r5
   14824:	moveq	sl, #0
   14828:	beq	1497c <__assert_fail@plt+0x2fc0>
   1482c:	mov	sl, #0
   14830:	ldr	r3, [sp]
   14834:	ands	r7, r3, #8
   14838:	bne	14978 <__assert_fail@plt+0x2fbc>
   1483c:	ldr	r3, [sp, #8]
   14840:	add	r7, r7, #48	; 0x30
   14844:	add	r4, fp, #644	; 0x284
   14848:	add	r4, r4, #2
   1484c:	strb	r7, [fp, #646]	; 0x286
   14850:	mov	r7, #0
   14854:	mov	sl, r7
   14858:	ldr	r1, [sp, #16]
   1485c:	sub	r4, r4, r3
   14860:	mov	r2, r3
   14864:	mov	r0, r4
   14868:	bl	115e4 <memcpy@plt>
   1486c:	ldr	r3, [sp, #12]
   14870:	cmp	r3, #1
   14874:	bne	14984 <__assert_fail@plt+0x2fc8>
   14878:	and	r0, r8, #1
   1487c:	mov	r1, #0
   14880:	adds	r2, r0, sl
   14884:	adc	r3, r1, sl, asr #31
   14888:	orr	r2, r2, r3
   1488c:	cmp	r2, r1
   14890:	addne	r7, r7, #1
   14894:	cmp	r7, #5
   14898:	movle	r7, #0
   1489c:	movgt	r7, #1
   148a0:	cmp	r7, #0
   148a4:	beq	14914 <__assert_fail@plt+0x2f58>
   148a8:	ldr	r3, [sp, #40]	; 0x28
   148ac:	adds	r8, r8, #1
   148b0:	adc	r9, r9, #0
   148b4:	cmp	r3, #0
   148b8:	beq	14914 <__assert_fail@plt+0x2f58>
   148bc:	ldr	r2, [sp, #4]
   148c0:	mov	r3, #0
   148c4:	cmp	r3, r9
   148c8:	cmpeq	r2, r8
   148cc:	bne	14914 <__assert_fail@plt+0x2f58>
   148d0:	cmp	r6, #8
   148d4:	beq	14914 <__assert_fail@plt+0x2f58>
   148d8:	ldr	r3, [sp]
   148dc:	add	r6, r6, #1
   148e0:	tst	r3, #8
   148e4:	bne	1490c <__assert_fail@plt+0x2f50>
   148e8:	mov	r3, #48	; 0x30
   148ec:	ldr	r2, [sp, #8]
   148f0:	strb	r3, [r4, #-1]
   148f4:	ldr	r3, [sp, #8]
   148f8:	ldr	r1, [sp, #16]
   148fc:	mvn	r3, r3
   14900:	add	r4, r4, r3
   14904:	mov	r0, r4
   14908:	bl	115e4 <memcpy@plt>
   1490c:	mov	r8, #1
   14910:	mov	r9, #0
   14914:	mov	r7, r4
   14918:	mov	r2, #10
   1491c:	mov	r3, #0
   14920:	mov	r0, r8
   14924:	mov	r1, r9
   14928:	bl	252e0 <__assert_fail@plt+0x13924>
   1492c:	add	r2, r2, #48	; 0x30
   14930:	mov	r3, #0
   14934:	mov	r0, r8
   14938:	mov	r1, r9
   1493c:	strb	r2, [r7, #-1]!
   14940:	mov	r2, #10
   14944:	bl	252e0 <__assert_fail@plt+0x13924>
   14948:	cmp	r9, #0
   1494c:	cmpeq	r8, #9
   14950:	bls	1464c <__assert_fail@plt+0x2c90>
   14954:	mov	r8, r0
   14958:	mov	r9, r1
   1495c:	b	14918 <__assert_fail@plt+0x2f5c>
   14960:	ldr	r2, [sp, #12]
   14964:	adds	r3, sl, #0
   14968:	movne	r3, #1
   1496c:	cmp	r2, #0
   14970:	movne	r3, #0
   14974:	b	147fc <__assert_fail@plt+0x2e40>
   14978:	mov	r4, r5
   1497c:	mov	r7, #0
   14980:	b	1486c <__assert_fail@plt+0x2eb0>
   14984:	ldr	r3, [sp, #12]
   14988:	cmp	r3, #0
   1498c:	movne	r7, #0
   14990:	bne	148a0 <__assert_fail@plt+0x2ee4>
   14994:	add	r7, r7, sl
   14998:	cmp	r7, #0
   1499c:	b	14898 <__assert_fail@plt+0x2edc>
   149a0:	ldr	r3, [sp]
   149a4:	tst	r3, #128	; 0x80
   149a8:	beq	14a68 <__assert_fail@plt+0x30ac>
   149ac:	cmn	r6, #1
   149b0:	bne	149f4 <__assert_fail@plt+0x3038>
   149b4:	mov	r2, #1
   149b8:	mov	r3, #0
   149bc:	mov	r6, #0
   149c0:	b	149e4 <__assert_fail@plt+0x3028>
   149c4:	add	r6, r6, #1
   149c8:	cmp	r6, #8
   149cc:	beq	149f4 <__assert_fail@plt+0x3038>
   149d0:	ldr	r1, [sp, #4]
   149d4:	ldr	r0, [sp, #4]
   149d8:	mul	r1, r1, r3
   149dc:	umull	r2, r3, r2, r0
   149e0:	add	r3, r1, r3
   149e4:	ldrd	r0, [sp, #160]	; 0xa0
   149e8:	cmp	r3, r1
   149ec:	cmpeq	r2, r0
   149f0:	bcc	149c4 <__assert_fail@plt+0x3008>
   149f4:	ldr	r3, [sp]
   149f8:	and	r2, r3, #256	; 0x100
   149fc:	orrs	r3, r2, r6
   14a00:	beq	14a68 <__assert_fail@plt+0x30ac>
   14a04:	ldr	r3, [sp]
   14a08:	tst	r3, #64	; 0x40
   14a0c:	movne	r1, #32
   14a10:	addne	r3, fp, #648	; 0x288
   14a14:	moveq	r3, r5
   14a18:	strbne	r1, [fp, #647]	; 0x287
   14a1c:	cmp	r6, #0
   14a20:	beq	14a8c <__assert_fail@plt+0x30d0>
   14a24:	ldr	r1, [sp, #32]
   14a28:	mov	r5, r3
   14a2c:	cmp	r6, #1
   14a30:	cmpeq	r1, #0
   14a34:	ldrne	r1, [pc, #132]	; 14ac0 <__assert_fail@plt+0x3104>
   14a38:	moveq	r1, #107	; 0x6b
   14a3c:	ldrbne	r1, [r1, r6]
   14a40:	cmp	r2, #0
   14a44:	strb	r1, [r5], #1
   14a48:	beq	14a68 <__assert_fail@plt+0x30ac>
   14a4c:	ldr	r2, [sp, #32]
   14a50:	cmp	r2, #0
   14a54:	movne	r2, #105	; 0x69
   14a58:	addne	r5, r3, #2
   14a5c:	strbne	r2, [r3, #1]
   14a60:	mov	r3, #66	; 0x42
   14a64:	strb	r3, [r5], #1
   14a68:	mov	r3, #0
   14a6c:	mov	r0, r7
   14a70:	strb	r3, [r5]
   14a74:	add	sp, sp, #100	; 0x64
   14a78:	vpop	{d8-d9}
   14a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a80:	cmp	ip, #0
   14a84:	beq	14830 <__assert_fail@plt+0x2e74>
   14a88:	b	1483c <__assert_fail@plt+0x2e80>
   14a8c:	cmp	r2, #0
   14a90:	mov	r5, r3
   14a94:	bne	14a60 <__assert_fail@plt+0x30a4>
   14a98:	b	14a68 <__assert_fail@plt+0x30ac>
   14a9c:	nop	{0}
   14aa0:	andeq	r0, r0, r0
   14aa4:	svccc	0x00f00000	; IMB
   14aa8:	andeq	r0, r0, r0
   14aac:	eormi	r0, r4, r0
   14ab0:	andeq	r6, r2, r5, asr #2
   14ab4:	strdeq	r5, [r2], -r7
   14ab8:	andeq	r6, r2, r8, asr #11
   14abc:	andeq	r6, r2, lr, asr #11
   14ac0:	andeq	r6, r2, r8, lsr #11
   14ac4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14ac8:	subs	r5, r0, #0
   14acc:	mov	r8, r1
   14ad0:	mov	r6, r2
   14ad4:	bne	14b54 <__assert_fail@plt+0x3198>
   14ad8:	ldr	r0, [pc, #316]	; 14c1c <__assert_fail@plt+0x3260>
   14adc:	bl	11704 <getenv@plt>
   14ae0:	subs	r5, r0, #0
   14ae4:	bne	14b54 <__assert_fail@plt+0x3198>
   14ae8:	ldr	r0, [pc, #304]	; 14c20 <__assert_fail@plt+0x3264>
   14aec:	bl	11704 <getenv@plt>
   14af0:	subs	r5, r0, #0
   14af4:	bne	14b54 <__assert_fail@plt+0x3198>
   14af8:	ldr	r0, [pc, #292]	; 14c24 <__assert_fail@plt+0x3268>
   14afc:	mov	r4, #0
   14b00:	bl	11704 <getenv@plt>
   14b04:	cmp	r0, #0
   14b08:	mov	r3, #0
   14b0c:	moveq	r2, #1024	; 0x400
   14b10:	movne	r2, #512	; 0x200
   14b14:	strd	r2, [r6]
   14b18:	mov	r0, #0
   14b1c:	str	r4, [r8]
   14b20:	ldrd	r2, [r6]
   14b24:	orrs	r3, r2, r3
   14b28:	bne	14b4c <__assert_fail@plt+0x3190>
   14b2c:	ldr	r0, [pc, #240]	; 14c24 <__assert_fail@plt+0x3268>
   14b30:	bl	11704 <getenv@plt>
   14b34:	cmp	r0, #0
   14b38:	mov	r3, #0
   14b3c:	moveq	r2, #1024	; 0x400
   14b40:	movne	r2, #512	; 0x200
   14b44:	mov	r0, #4
   14b48:	strd	r2, [r6]
   14b4c:	add	sp, sp, #16
   14b50:	pop	{r4, r5, r6, r7, r8, pc}
   14b54:	ldrb	r3, [r5]
   14b58:	ldr	r7, [pc, #200]	; 14c28 <__assert_fail@plt+0x326c>
   14b5c:	cmp	r3, #39	; 0x27
   14b60:	mov	r3, #4
   14b64:	addeq	r5, r5, #1
   14b68:	moveq	r4, #4
   14b6c:	add	r2, r7, #12
   14b70:	add	r1, r7, #20
   14b74:	mov	r0, r5
   14b78:	movne	r4, #0
   14b7c:	bl	24904 <__assert_fail@plt+0x12f48>
   14b80:	cmp	r0, #0
   14b84:	blt	14ba4 <__assert_fail@plt+0x31e8>
   14b88:	add	r7, r7, r0, lsl #2
   14b8c:	mov	r2, #1
   14b90:	ldr	r3, [r7, #12]
   14b94:	orr	r4, r4, r3
   14b98:	mov	r3, #0
   14b9c:	strd	r2, [r6]
   14ba0:	b	14b18 <__assert_fail@plt+0x315c>
   14ba4:	ldr	r3, [pc, #128]	; 14c2c <__assert_fail@plt+0x3270>
   14ba8:	mov	r2, #0
   14bac:	add	r1, sp, #12
   14bb0:	mov	r0, r5
   14bb4:	str	r3, [sp]
   14bb8:	mov	r3, r6
   14bbc:	bl	18164 <__assert_fail@plt+0x67a8>
   14bc0:	cmp	r0, #0
   14bc4:	movne	r3, #0
   14bc8:	ldreq	r2, [sp, #12]
   14bcc:	strne	r3, [r8]
   14bd0:	bne	14b20 <__assert_fail@plt+0x3164>
   14bd4:	ldrb	r3, [r5]
   14bd8:	sub	r3, r3, #48	; 0x30
   14bdc:	cmp	r3, #9
   14be0:	bls	14b18 <__assert_fail@plt+0x315c>
   14be4:	cmp	r2, r5
   14be8:	bne	14c14 <__assert_fail@plt+0x3258>
   14bec:	ldrb	r3, [r2, #-1]
   14bf0:	cmp	r3, #66	; 0x42
   14bf4:	orrne	r4, r4, #128	; 0x80
   14bf8:	bne	14c0c <__assert_fail@plt+0x3250>
   14bfc:	ldrb	r3, [r2, #-2]
   14c00:	orr	r4, r4, #384	; 0x180
   14c04:	cmp	r3, #105	; 0x69
   14c08:	bne	14b18 <__assert_fail@plt+0x315c>
   14c0c:	orr	r4, r4, #32
   14c10:	b	14b18 <__assert_fail@plt+0x315c>
   14c14:	add	r5, r5, #1
   14c18:	b	14bd4 <__assert_fail@plt+0x3218>
   14c1c:	ldrdeq	r6, [r2], -r4
   14c20:	ldrdeq	r6, [r2], -pc	; <UNPREDICTABLE>
   14c24:	andeq	r6, r2, r9, ror #11
   14c28:	andeq	r6, r2, r8, lsr #11
   14c2c:	strdeq	r6, [r2], -r9
   14c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c34:	add	fp, sp, #32
   14c38:	sub	sp, sp, #20
   14c3c:	mov	r6, r0
   14c40:	str	r3, [fp, #-44]	; 0xffffffd4
   14c44:	lsrs	r3, r2, #30
   14c48:	movne	r3, #1
   14c4c:	moveq	r3, #0
   14c50:	lsls	r0, r2, #2
   14c54:	bmi	14c60 <__assert_fail@plt+0x32a4>
   14c58:	cmp	r3, #0
   14c5c:	beq	14c6c <__assert_fail@plt+0x32b0>
   14c60:	mov	r0, #0
   14c64:	sub	sp, fp, #32
   14c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c6c:	cmp	r0, #4016	; 0xfb0
   14c70:	mov	r8, r1
   14c74:	mov	r7, r2
   14c78:	bhi	14d6c <__assert_fail@plt+0x33b0>
   14c7c:	add	r0, r0, #22
   14c80:	bic	r0, r0, #7
   14c84:	sub	sp, sp, r0
   14c88:	add	r5, sp, #15
   14c8c:	bic	r5, r5, #15
   14c90:	cmp	r5, #0
   14c94:	beq	14c60 <__assert_fail@plt+0x32a4>
   14c98:	mov	r3, #1
   14c9c:	mov	r4, #0
   14ca0:	str	r8, [fp, #-40]	; 0xffffffd8
   14ca4:	mov	r9, #2
   14ca8:	str	r3, [r5, #4]
   14cac:	cmp	r7, r9
   14cb0:	bhi	14d78 <__assert_fail@plt+0x33bc>
   14cb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cb8:	mov	r4, #0
   14cbc:	mov	sl, r6
   14cc0:	str	r4, [r3]
   14cc4:	ldrb	r9, [sl]
   14cc8:	cmp	r9, #0
   14ccc:	beq	14d5c <__assert_fail@plt+0x33a0>
   14cd0:	bl	1177c <__ctype_b_loc@plt>
   14cd4:	ldrb	r3, [r8, r4]
   14cd8:	ldr	r1, [r0]
   14cdc:	sxth	r2, r3
   14ce0:	lsl	r0, r2, #1
   14ce4:	str	r2, [fp, #-48]	; 0xffffffd0
   14ce8:	ldrh	r0, [r1, r0]
   14cec:	tst	r0, #256	; 0x100
   14cf0:	beq	14d0c <__assert_fail@plt+0x3350>
   14cf4:	str	r1, [fp, #-40]	; 0xffffffd8
   14cf8:	bl	11758 <__ctype_tolower_loc@plt>
   14cfc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d00:	ldr	r3, [r0]
   14d04:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14d08:	ldr	r3, [r3, r2, lsl #2]
   14d0c:	sxth	r2, r9
   14d10:	lsl	r0, r2, #1
   14d14:	str	r2, [fp, #-48]	; 0xffffffd0
   14d18:	ldrh	r1, [r1, r0]
   14d1c:	tst	r1, #256	; 0x100
   14d20:	beq	14d3c <__assert_fail@plt+0x3380>
   14d24:	str	r3, [fp, #-40]	; 0xffffffd8
   14d28:	bl	11758 <__ctype_tolower_loc@plt>
   14d2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d30:	ldr	r1, [r0]
   14d34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d38:	ldr	r9, [r1, r2, lsl #2]
   14d3c:	cmp	r9, r3
   14d40:	bne	14e20 <__assert_fail@plt+0x3464>
   14d44:	add	r4, r4, #1
   14d48:	add	sl, sl, #1
   14d4c:	cmp	r7, r4
   14d50:	bne	14cc4 <__assert_fail@plt+0x3308>
   14d54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d58:	str	r6, [r3]
   14d5c:	mov	r0, r5
   14d60:	bl	24dd0 <__assert_fail@plt+0x13414>
   14d64:	mov	r0, #1
   14d68:	b	14c64 <__assert_fail@plt+0x32a8>
   14d6c:	bl	24d88 <__assert_fail@plt+0x133cc>
   14d70:	mov	r5, r0
   14d74:	b	14c90 <__assert_fail@plt+0x32d4>
   14d78:	bl	1177c <__ctype_b_loc@plt>
   14d7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d80:	ldr	sl, [r0]
   14d84:	ldrb	r2, [r3, #1]!
   14d88:	sxth	r1, r2
   14d8c:	lsl	r0, r1, #1
   14d90:	str	r1, [fp, #-48]	; 0xffffffd0
   14d94:	ldrh	r0, [sl, r0]
   14d98:	str	r3, [fp, #-40]	; 0xffffffd8
   14d9c:	tst	r0, #256	; 0x100
   14da0:	beq	14db4 <__assert_fail@plt+0x33f8>
   14da4:	bl	11758 <__ctype_tolower_loc@plt>
   14da8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14dac:	ldr	r2, [r0]
   14db0:	ldrb	r2, [r2, r1, lsl #2]
   14db4:	ldrb	r0, [r8, r4]
   14db8:	sxth	r1, r0
   14dbc:	lsl	ip, r1, #1
   14dc0:	str	r1, [fp, #-52]	; 0xffffffcc
   14dc4:	ldrh	ip, [sl, ip]
   14dc8:	tst	ip, #256	; 0x100
   14dcc:	moveq	r1, r0
   14dd0:	beq	14dec <__assert_fail@plt+0x3430>
   14dd4:	str	r2, [fp, #-48]	; 0xffffffd0
   14dd8:	bl	11758 <__ctype_tolower_loc@plt>
   14ddc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14de0:	ldr	r0, [r0]
   14de4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14de8:	ldr	r1, [r0, r1, lsl #2]
   14dec:	cmp	r2, r1
   14df0:	bne	14e08 <__assert_fail@plt+0x344c>
   14df4:	add	r4, r4, #1
   14df8:	sub	r2, r9, r4
   14dfc:	str	r2, [r5, r9, lsl #2]
   14e00:	add	r9, r9, #1
   14e04:	b	14cac <__assert_fail@plt+0x32f0>
   14e08:	cmp	r4, #0
   14e0c:	streq	r9, [r5, r9, lsl #2]
   14e10:	beq	14e00 <__assert_fail@plt+0x3444>
   14e14:	ldr	r1, [r5, r4, lsl #2]
   14e18:	sub	r4, r4, r1
   14e1c:	b	14db4 <__assert_fail@plt+0x33f8>
   14e20:	cmp	r4, #0
   14e24:	ldrne	r3, [r5, r4, lsl #2]
   14e28:	addeq	r6, r6, #1
   14e2c:	addeq	sl, sl, #1
   14e30:	addne	r6, r6, r3
   14e34:	subne	r4, r4, r3
   14e38:	b	14cc4 <__assert_fail@plt+0x3308>
   14e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e40:	add	fp, sp, #32
   14e44:	sub	sp, sp, #172	; 0xac
   14e48:	mov	r5, r1
   14e4c:	str	r2, [fp, #-200]	; 0xffffff38
   14e50:	str	r0, [fp, #-196]	; 0xffffff3c
   14e54:	mov	r0, r1
   14e58:	bl	15768 <__assert_fail@plt+0x3dac>
   14e5c:	mov	r9, r0
   14e60:	mov	r0, #44	; 0x2c
   14e64:	umull	r6, r7, r9, r0
   14e68:	adds	r3, r7, #0
   14e6c:	movne	r3, #1
   14e70:	cmp	r6, #0
   14e74:	blt	14e80 <__assert_fail@plt+0x34c4>
   14e78:	cmp	r3, #0
   14e7c:	beq	14e94 <__assert_fail@plt+0x34d8>
   14e80:	mov	r3, #0
   14e84:	str	r3, [fp, #-192]	; 0xffffff40
   14e88:	ldr	r0, [fp, #-192]	; 0xffffff40
   14e8c:	sub	sp, fp, #32
   14e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e94:	mul	r0, r0, r9
   14e98:	cmp	r0, #4016	; 0xfb0
   14e9c:	bhi	14f64 <__assert_fail@plt+0x35a8>
   14ea0:	add	r0, r0, #22
   14ea4:	bic	r0, r0, #7
   14ea8:	sub	sp, sp, r0
   14eac:	add	r4, sp, #15
   14eb0:	bic	r4, r4, #15
   14eb4:	cmp	r4, #0
   14eb8:	beq	14e80 <__assert_fail@plt+0x34c4>
   14ebc:	mov	r7, #40	; 0x28
   14ec0:	mov	r6, #0
   14ec4:	mov	r2, #0
   14ec8:	mov	r3, #0
   14ecc:	mla	r7, r7, r9, r4
   14ed0:	mov	sl, r4
   14ed4:	mov	r8, r4
   14ed8:	strb	r6, [fp, #-92]	; 0xffffffa4
   14edc:	strd	r2, [fp, #-88]	; 0xffffffa8
   14ee0:	strb	r6, [fp, #-80]	; 0xffffffb0
   14ee4:	str	r5, [fp, #-76]	; 0xffffffb4
   14ee8:	sub	r0, fp, #92	; 0x5c
   14eec:	bl	160cc <__assert_fail@plt+0x4710>
   14ef0:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   14ef4:	cmp	r3, #0
   14ef8:	str	r3, [fp, #-192]	; 0xffffff40
   14efc:	beq	14f70 <__assert_fail@plt+0x35b4>
   14f00:	ldr	r5, [fp, #-64]	; 0xffffffc0
   14f04:	cmp	r5, #0
   14f08:	bne	14f70 <__assert_fail@plt+0x35b4>
   14f0c:	mov	r2, #1
   14f10:	mov	r6, r5
   14f14:	mov	r8, #2
   14f18:	str	r2, [r7, #4]
   14f1c:	cmp	r8, r9
   14f20:	bcc	14fb0 <__assert_fail@plt+0x35f4>
   14f24:	ldr	r3, [fp, #-200]	; 0xffffff38
   14f28:	mov	r6, #0
   14f2c:	mov	r2, #0
   14f30:	ldr	r1, [fp, #-196]	; 0xffffff3c
   14f34:	strb	r6, [fp, #-148]	; 0xffffff6c
   14f38:	strb	r6, [fp, #-136]	; 0xffffff78
   14f3c:	str	r6, [r3]
   14f40:	ldr	r3, [fp, #-196]	; 0xffffff3c
   14f44:	str	r3, [fp, #-132]	; 0xffffff7c
   14f48:	mov	r3, #0
   14f4c:	strb	r6, [fp, #-92]	; 0xffffffa4
   14f50:	strd	r2, [fp, #-144]	; 0xffffff70
   14f54:	strd	r2, [fp, #-88]	; 0xffffffa8
   14f58:	str	r1, [fp, #-76]	; 0xffffffb4
   14f5c:	strb	r6, [fp, #-80]	; 0xffffffb0
   14f60:	b	15090 <__assert_fail@plt+0x36d4>
   14f64:	bl	24d88 <__assert_fail@plt+0x133cc>
   14f68:	mov	r4, r0
   14f6c:	b	14eb4 <__assert_fail@plt+0x34f8>
   14f70:	sub	r1, fp, #76	; 0x4c
   14f74:	mov	r0, r8
   14f78:	bl	24e1c <__assert_fail@plt+0x13460>
   14f7c:	ldrb	r2, [r8, #8]
   14f80:	cmp	r2, #0
   14f84:	beq	14f94 <__assert_fail@plt+0x35d8>
   14f88:	ldr	r0, [r8, #12]
   14f8c:	bl	11608 <towlower@plt>
   14f90:	str	r0, [r8, #12]
   14f94:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14f98:	add	r8, r8, #40	; 0x28
   14f9c:	strb	r6, [fp, #-80]	; 0xffffffb0
   14fa0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14fa4:	add	r2, r2, r1
   14fa8:	str	r2, [fp, #-76]	; 0xffffffb4
   14fac:	b	14ee8 <__assert_fail@plt+0x352c>
   14fb0:	ldrb	r3, [sl, #48]	; 0x30
   14fb4:	str	r3, [fp, #-204]	; 0xffffff34
   14fb8:	mov	r3, #40	; 0x28
   14fbc:	mla	r1, r3, r6, r4
   14fc0:	ldr	r3, [fp, #-204]	; 0xffffff34
   14fc4:	cmp	r3, #0
   14fc8:	beq	1500c <__assert_fail@plt+0x3650>
   14fcc:	ldrb	r2, [r1, #8]
   14fd0:	cmp	r2, #0
   14fd4:	beq	1500c <__assert_fail@plt+0x3650>
   14fd8:	ldr	r2, [r1, #12]
   14fdc:	ldr	r0, [sl, #52]	; 0x34
   14fe0:	sub	r0, r0, r2
   14fe4:	clz	r0, r0
   14fe8:	lsr	r0, r0, #5
   14fec:	cmp	r0, #0
   14ff0:	beq	15038 <__assert_fail@plt+0x367c>
   14ff4:	add	r6, r6, #1
   14ff8:	sub	r2, r8, r6
   14ffc:	str	r2, [r7, r8, lsl #2]
   15000:	add	r8, r8, #1
   15004:	add	sl, sl, #40	; 0x28
   15008:	b	14f1c <__assert_fail@plt+0x3560>
   1500c:	ldr	r0, [r1, #4]
   15010:	ldr	r2, [sl, #44]	; 0x2c
   15014:	cmp	r2, r0
   15018:	movne	r0, #0
   1501c:	bne	14fec <__assert_fail@plt+0x3630>
   15020:	ldr	r1, [r1]
   15024:	ldr	r0, [sl, #40]	; 0x28
   15028:	bl	1162c <memcmp@plt>
   1502c:	clz	r0, r0
   15030:	lsr	r0, r0, #5
   15034:	b	14fec <__assert_fail@plt+0x3630>
   15038:	cmp	r6, #0
   1503c:	streq	r8, [r7, r8, lsl #2]
   15040:	beq	15000 <__assert_fail@plt+0x3644>
   15044:	ldr	r2, [r7, r6, lsl #2]
   15048:	sub	r6, r6, r2
   1504c:	b	14fb8 <__assert_fail@plt+0x35fc>
   15050:	ldr	r1, [fp, #-184]	; 0xffffff48
   15054:	ldr	r2, [r3, #4]
   15058:	cmp	r2, r1
   1505c:	bne	150fc <__assert_fail@plt+0x3740>
   15060:	ldr	r1, [fp, #-188]	; 0xffffff44
   15064:	ldr	r0, [r3]
   15068:	bl	1162c <memcmp@plt>
   1506c:	clz	r0, r0
   15070:	lsr	r0, r0, #5
   15074:	b	150fc <__assert_fail@plt+0x3740>
   15078:	cmp	r5, #0
   1507c:	beq	15174 <__assert_fail@plt+0x37b8>
   15080:	ldr	r8, [r7, r5, lsl #2]
   15084:	sub	r5, r5, r8
   15088:	cmp	r8, #0
   1508c:	bne	15138 <__assert_fail@plt+0x377c>
   15090:	sub	r0, fp, #92	; 0x5c
   15094:	bl	160cc <__assert_fail@plt+0x4710>
   15098:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1509c:	cmp	r3, #0
   150a0:	beq	150b0 <__assert_fail@plt+0x36f4>
   150a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   150a8:	cmp	r3, #0
   150ac:	beq	1512c <__assert_fail@plt+0x3770>
   150b0:	sub	r1, fp, #76	; 0x4c
   150b4:	sub	r0, fp, #188	; 0xbc
   150b8:	bl	24e1c <__assert_fail@plt+0x13460>
   150bc:	ldrb	r8, [fp, #-180]	; 0xffffff4c
   150c0:	cmp	r8, #0
   150c4:	beq	150d4 <__assert_fail@plt+0x3718>
   150c8:	ldr	r0, [fp, #-176]	; 0xffffff50
   150cc:	bl	11608 <towlower@plt>
   150d0:	str	r0, [fp, #-176]	; 0xffffff50
   150d4:	mov	r3, #40	; 0x28
   150d8:	mla	r3, r3, r5, r4
   150dc:	ldrb	r0, [r3, #8]
   150e0:	ands	r0, r8, r0
   150e4:	beq	15050 <__assert_fail@plt+0x3694>
   150e8:	ldr	r0, [r3, #12]
   150ec:	ldr	r3, [fp, #-176]	; 0xffffff50
   150f0:	sub	r0, r0, r3
   150f4:	clz	r0, r0
   150f8:	lsr	r0, r0, #5
   150fc:	cmp	r0, #0
   15100:	beq	15078 <__assert_fail@plt+0x36bc>
   15104:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   15108:	add	r5, r5, #1
   1510c:	cmp	r9, r5
   15110:	strb	r6, [fp, #-80]	; 0xffffffb0
   15114:	add	r3, r3, r2
   15118:	str	r3, [fp, #-76]	; 0xffffffb4
   1511c:	bne	15090 <__assert_fail@plt+0x36d4>
   15120:	ldr	r2, [fp, #-200]	; 0xffffff38
   15124:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15128:	str	r3, [r2]
   1512c:	mov	r0, r4
   15130:	bl	24dd0 <__assert_fail@plt+0x13414>
   15134:	b	14e88 <__assert_fail@plt+0x34cc>
   15138:	sub	r0, fp, #148	; 0x94
   1513c:	bl	160cc <__assert_fail@plt+0x4710>
   15140:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15144:	cmp	r3, #0
   15148:	beq	1515c <__assert_fail@plt+0x37a0>
   1514c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15150:	cmp	r3, #0
   15154:	bne	1515c <__assert_fail@plt+0x37a0>
   15158:	bl	11980 <abort@plt>
   1515c:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   15160:	sub	r8, r8, #1
   15164:	strb	r6, [fp, #-136]	; 0xffffff78
   15168:	add	r3, r3, r2
   1516c:	str	r3, [fp, #-132]	; 0xffffff7c
   15170:	b	15088 <__assert_fail@plt+0x36cc>
   15174:	sub	r0, fp, #148	; 0x94
   15178:	bl	160cc <__assert_fail@plt+0x4710>
   1517c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15180:	cmp	r3, #0
   15184:	beq	15194 <__assert_fail@plt+0x37d8>
   15188:	ldr	r3, [fp, #-120]	; 0xffffff88
   1518c:	cmp	r3, #0
   15190:	beq	15158 <__assert_fail@plt+0x379c>
   15194:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   15198:	strb	r6, [fp, #-136]	; 0xffffff78
   1519c:	add	r3, r3, r2
   151a0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   151a4:	str	r3, [fp, #-132]	; 0xffffff7c
   151a8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   151ac:	add	r3, r3, r2
   151b0:	str	r3, [fp, #-76]	; 0xffffffb4
   151b4:	b	14f5c <__assert_fail@plt+0x35a0>
   151b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151bc:	sub	sp, sp, #404	; 0x194
   151c0:	mov	r5, r0
   151c4:	str	r1, [sp]
   151c8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   151cc:	cmp	r0, #1
   151d0:	ldr	r3, [sp]
   151d4:	bls	15570 <__assert_fail@plt+0x3bb4>
   151d8:	mov	r0, #0
   151dc:	mov	r1, #0
   151e0:	str	r3, [sp, #136]	; 0x88
   151e4:	mov	r3, #0
   151e8:	strd	r0, [sp, #124]	; 0x7c
   151ec:	add	r0, sp, #120	; 0x78
   151f0:	strb	r3, [sp, #120]	; 0x78
   151f4:	strb	r3, [sp, #132]	; 0x84
   151f8:	bl	160cc <__assert_fail@plt+0x4710>
   151fc:	ldrb	r3, [sp, #144]	; 0x90
   15200:	cmp	r3, #0
   15204:	beq	15214 <__assert_fail@plt+0x3858>
   15208:	ldr	r3, [sp, #148]	; 0x94
   1520c:	cmp	r3, #0
   15210:	beq	15490 <__assert_fail@plt+0x3ad4>
   15214:	ldr	r3, [sp]
   15218:	mov	r0, #0
   1521c:	mov	r1, #0
   15220:	strd	r0, [sp, #180]	; 0xb4
   15224:	add	r1, sp, #136	; 0x88
   15228:	add	r0, sp, #40	; 0x28
   1522c:	str	r3, [sp, #192]	; 0xc0
   15230:	mov	r3, #0
   15234:	strb	r3, [sp, #176]	; 0xb0
   15238:	strb	r3, [sp, #188]	; 0xbc
   1523c:	bl	24e1c <__assert_fail@plt+0x13460>
   15240:	ldrb	r3, [sp, #48]	; 0x30
   15244:	cmp	r3, #0
   15248:	beq	15258 <__assert_fail@plt+0x389c>
   1524c:	ldr	r0, [sp, #52]	; 0x34
   15250:	bl	11608 <towlower@plt>
   15254:	str	r0, [sp, #52]	; 0x34
   15258:	mov	r4, #0
   1525c:	mov	r2, #1
   15260:	mov	sl, r4
   15264:	mov	fp, r4
   15268:	mov	r6, r4
   1526c:	mov	r9, r4
   15270:	strb	r4, [sp, #232]	; 0xe8
   15274:	mov	r7, r4
   15278:	strd	sl, [sp, #236]	; 0xec
   1527c:	strb	r4, [sp, #244]	; 0xf4
   15280:	str	r5, [sp, #248]	; 0xf8
   15284:	add	r0, sp, #232	; 0xe8
   15288:	str	r2, [sp, #4]
   1528c:	bl	160cc <__assert_fail@plt+0x4710>
   15290:	ldrb	r3, [sp, #256]	; 0x100
   15294:	ldr	r2, [sp, #4]
   15298:	cmp	r3, #0
   1529c:	beq	152ac <__assert_fail@plt+0x38f0>
   152a0:	ldr	r3, [sp, #260]	; 0x104
   152a4:	cmp	r3, #0
   152a8:	beq	155ec <__assert_fail@plt+0x3c30>
   152ac:	cmp	r9, #9
   152b0:	movls	r8, #0
   152b4:	andhi	r8, r2, #1
   152b8:	cmp	r8, #0
   152bc:	beq	15424 <__assert_fail@plt+0x3a68>
   152c0:	add	r3, r9, r9, lsl #2
   152c4:	cmp	r6, r3
   152c8:	subcs	r4, r6, r4
   152cc:	bcs	153cc <__assert_fail@plt+0x3a10>
   152d0:	add	r1, sp, #248	; 0xf8
   152d4:	add	r0, sp, #80	; 0x50
   152d8:	bl	24e1c <__assert_fail@plt+0x13460>
   152dc:	ldrb	r3, [sp, #88]	; 0x58
   152e0:	add	r9, r9, #1
   152e4:	add	r6, r6, #1
   152e8:	cmp	r3, #0
   152ec:	beq	1542c <__assert_fail@plt+0x3a70>
   152f0:	ldr	r0, [sp, #92]	; 0x5c
   152f4:	bl	11608 <towlower@plt>
   152f8:	ldrb	r3, [sp, #48]	; 0x30
   152fc:	str	r0, [sp, #92]	; 0x5c
   15300:	cmp	r3, #0
   15304:	beq	1542c <__assert_fail@plt+0x3a70>
   15308:	ldr	r3, [sp, #52]	; 0x34
   1530c:	sub	r0, r3, r0
   15310:	clz	r0, r0
   15314:	lsr	r0, r0, #5
   15318:	cmp	r0, #0
   1531c:	beq	15558 <__assert_fail@plt+0x3b9c>
   15320:	add	ip, sp, #232	; 0xe8
   15324:	add	lr, sp, #288	; 0x120
   15328:	ldm	ip!, {r0, r1, r2, r3}
   1532c:	stmia	lr!, {r0, r1, r2, r3}
   15330:	ldm	ip!, {r0, r1, r2, r3}
   15334:	strb	r7, [sp, #300]	; 0x12c
   15338:	stmia	lr!, {r0, r1, r2, r3}
   1533c:	ldm	ip!, {r0, r1, r2, r3}
   15340:	stmia	lr!, {r0, r1, r2, r3}
   15344:	ldr	r3, [sp, #304]	; 0x130
   15348:	ldr	r2, [sp, #308]	; 0x134
   1534c:	ldm	ip, {r0, r1}
   15350:	add	r3, r3, r2
   15354:	stm	lr, {r0, r1}
   15358:	add	r0, sp, #344	; 0x158
   1535c:	str	r3, [sp, #304]	; 0x130
   15360:	ldr	r3, [sp]
   15364:	strb	r7, [sp, #344]	; 0x158
   15368:	str	sl, [sp, #348]	; 0x15c
   1536c:	str	fp, [sp, #352]	; 0x160
   15370:	strb	r7, [sp, #356]	; 0x164
   15374:	str	r3, [sp, #360]	; 0x168
   15378:	bl	160cc <__assert_fail@plt+0x4710>
   1537c:	ldrb	r3, [sp, #368]	; 0x170
   15380:	cmp	r3, #0
   15384:	beq	15458 <__assert_fail@plt+0x3a9c>
   15388:	ldr	r3, [sp, #372]	; 0x174
   1538c:	cmp	r3, #0
   15390:	bne	15458 <__assert_fail@plt+0x3a9c>
   15394:	bl	11980 <abort@plt>
   15398:	add	r0, sp, #176	; 0xb0
   1539c:	bl	160cc <__assert_fail@plt+0x4710>
   153a0:	ldrb	r3, [sp, #200]	; 0xc8
   153a4:	cmp	r3, #0
   153a8:	beq	153b8 <__assert_fail@plt+0x39fc>
   153ac:	ldr	r3, [sp, #204]	; 0xcc
   153b0:	cmp	r3, #0
   153b4:	beq	153d4 <__assert_fail@plt+0x3a18>
   153b8:	ldrd	r2, [sp, #192]	; 0xc0
   153bc:	sub	r4, r4, #1
   153c0:	strb	r7, [sp, #188]	; 0xbc
   153c4:	add	r3, r3, r2
   153c8:	str	r3, [sp, #192]	; 0xc0
   153cc:	cmp	r4, #0
   153d0:	bne	15398 <__assert_fail@plt+0x39dc>
   153d4:	add	r0, sp, #176	; 0xb0
   153d8:	bl	160cc <__assert_fail@plt+0x4710>
   153dc:	ldrb	r3, [sp, #200]	; 0xc8
   153e0:	cmp	r3, #0
   153e4:	bne	153f0 <__assert_fail@plt+0x3a34>
   153e8:	mov	r4, r6
   153ec:	b	152d0 <__assert_fail@plt+0x3914>
   153f0:	ldr	r2, [sp, #204]	; 0xcc
   153f4:	cmp	r2, #0
   153f8:	movne	r4, r6
   153fc:	movne	r8, r3
   15400:	bne	152d0 <__assert_fail@plt+0x3914>
   15404:	add	r2, sp, #344	; 0x158
   15408:	mov	r0, r5
   1540c:	ldr	r1, [sp]
   15410:	bl	14e3c <__assert_fail@plt+0x3480>
   15414:	subs	r8, r0, #0
   15418:	beq	153e8 <__assert_fail@plt+0x3a2c>
   1541c:	ldr	r5, [sp, #344]	; 0x158
   15420:	b	15490 <__assert_fail@plt+0x3ad4>
   15424:	mov	r8, r2
   15428:	b	152d0 <__assert_fail@plt+0x3914>
   1542c:	ldr	r3, [sp, #44]	; 0x2c
   15430:	ldr	r2, [sp, #84]	; 0x54
   15434:	cmp	r2, r3
   15438:	movne	r0, #0
   1543c:	bne	15318 <__assert_fail@plt+0x395c>
   15440:	ldr	r1, [sp, #40]	; 0x28
   15444:	ldr	r0, [sp, #80]	; 0x50
   15448:	bl	1162c <memcmp@plt>
   1544c:	clz	r0, r0
   15450:	lsr	r0, r0, #5
   15454:	b	15318 <__assert_fail@plt+0x395c>
   15458:	ldr	r3, [sp, #360]	; 0x168
   1545c:	strb	r7, [sp, #356]	; 0x164
   15460:	ldr	r2, [sp, #364]	; 0x16c
   15464:	add	r3, r3, r2
   15468:	str	r3, [sp, #360]	; 0x168
   1546c:	add	r0, sp, #344	; 0x158
   15470:	bl	160cc <__assert_fail@plt+0x4710>
   15474:	ldrb	r3, [sp, #368]	; 0x170
   15478:	cmp	r3, #0
   1547c:	beq	1549c <__assert_fail@plt+0x3ae0>
   15480:	ldr	r3, [sp, #372]	; 0x174
   15484:	cmp	r3, #0
   15488:	bne	1549c <__assert_fail@plt+0x3ae0>
   1548c:	ldr	r5, [sp, #248]	; 0xf8
   15490:	mov	r0, r5
   15494:	add	sp, sp, #404	; 0x194
   15498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1549c:	add	r0, sp, #288	; 0x120
   154a0:	bl	160cc <__assert_fail@plt+0x4710>
   154a4:	ldrb	r2, [sp, #312]	; 0x138
   154a8:	cmp	r2, #0
   154ac:	beq	154bc <__assert_fail@plt+0x3b00>
   154b0:	ldr	r3, [sp, #316]	; 0x13c
   154b4:	cmp	r3, #0
   154b8:	beq	155ec <__assert_fail@plt+0x3c30>
   154bc:	cmp	r2, #0
   154c0:	add	r6, r6, #1
   154c4:	beq	1552c <__assert_fail@plt+0x3b70>
   154c8:	ldrb	r3, [sp, #368]	; 0x170
   154cc:	cmp	r3, #0
   154d0:	beq	1552c <__assert_fail@plt+0x3b70>
   154d4:	ldr	r0, [sp, #316]	; 0x13c
   154d8:	bl	11608 <towlower@plt>
   154dc:	mov	r3, r0
   154e0:	ldr	r0, [sp, #372]	; 0x174
   154e4:	str	r3, [sp, #4]
   154e8:	bl	11608 <towlower@plt>
   154ec:	ldr	r3, [sp, #4]
   154f0:	subs	r0, r3, r0
   154f4:	movne	r0, #1
   154f8:	cmp	r0, #0
   154fc:	bne	15558 <__assert_fail@plt+0x3b9c>
   15500:	ldr	r3, [sp, #304]	; 0x130
   15504:	strb	r0, [sp, #300]	; 0x12c
   15508:	ldr	r2, [sp, #308]	; 0x134
   1550c:	strb	r0, [sp, #356]	; 0x164
   15510:	add	r3, r3, r2
   15514:	ldr	r2, [sp, #364]	; 0x16c
   15518:	str	r3, [sp, #304]	; 0x130
   1551c:	ldr	r3, [sp, #360]	; 0x168
   15520:	add	r3, r3, r2
   15524:	str	r3, [sp, #360]	; 0x168
   15528:	b	1546c <__assert_fail@plt+0x3ab0>
   1552c:	ldr	r2, [sp, #308]	; 0x134
   15530:	ldr	r3, [sp, #364]	; 0x16c
   15534:	cmp	r2, r3
   15538:	movne	r0, #1
   1553c:	bne	154f8 <__assert_fail@plt+0x3b3c>
   15540:	ldr	r0, [sp, #304]	; 0x130
   15544:	ldr	r1, [sp, #360]	; 0x168
   15548:	bl	1162c <memcmp@plt>
   1554c:	adds	r0, r0, #0
   15550:	movne	r0, #1
   15554:	b	154f8 <__assert_fail@plt+0x3b3c>
   15558:	ldrd	r2, [sp, #248]	; 0xf8
   1555c:	strb	r7, [sp, #244]	; 0xf4
   15560:	add	r3, r3, r2
   15564:	mov	r2, r8
   15568:	str	r3, [sp, #248]	; 0xf8
   1556c:	b	15284 <__assert_fail@plt+0x38c8>
   15570:	ldrb	r3, [r3]
   15574:	cmp	r3, #0
   15578:	str	r3, [sp, #4]
   1557c:	beq	15490 <__assert_fail@plt+0x3ad4>
   15580:	bl	1177c <__ctype_b_loc@plt>
   15584:	ldrsh	r4, [sp, #4]
   15588:	str	r0, [sp, #12]
   1558c:	ldr	r2, [r0]
   15590:	lsl	r3, r4, #1
   15594:	ldrh	r3, [r2, r3]
   15598:	tst	r3, #256	; 0x100
   1559c:	beq	155b0 <__assert_fail@plt+0x3bf4>
   155a0:	bl	11758 <__ctype_tolower_loc@plt>
   155a4:	ldr	r3, [r0]
   155a8:	ldrb	r3, [r3, r4, lsl #2]
   155ac:	str	r3, [sp, #4]
   155b0:	ldr	r3, [sp]
   155b4:	mov	r8, #0
   155b8:	mov	r6, r5
   155bc:	mov	r4, r8
   155c0:	mov	sl, r8
   155c4:	ldr	r9, [sp]
   155c8:	add	r3, r3, #1
   155cc:	str	r3, [sp, #24]
   155d0:	mov	r3, #1
   155d4:	mov	r1, r6
   155d8:	mov	r5, r6
   155dc:	ldrb	r2, [r1], #1
   155e0:	cmp	r2, #0
   155e4:	str	r1, [sp, #16]
   155e8:	bne	155f4 <__assert_fail@plt+0x3c38>
   155ec:	mov	r5, #0
   155f0:	b	15490 <__assert_fail@plt+0x3ad4>
   155f4:	cmp	sl, #9
   155f8:	movls	r7, #0
   155fc:	andhi	r7, r3, #1
   15600:	cmp	r7, #0
   15604:	beq	15760 <__assert_fail@plt+0x3da4>
   15608:	add	r3, sl, sl, lsl #2
   1560c:	cmp	r4, r3
   15610:	bcc	15660 <__assert_fail@plt+0x3ca4>
   15614:	cmp	r9, #0
   15618:	beq	15638 <__assert_fail@plt+0x3c7c>
   1561c:	sub	r1, r4, r8
   15620:	mov	r0, r9
   15624:	bl	11884 <strnlen@plt>
   15628:	ldrb	r3, [r9, r0]!
   1562c:	mov	r8, r4
   15630:	cmp	r3, #0
   15634:	bne	15660 <__assert_fail@plt+0x3ca4>
   15638:	ldr	r0, [sp]
   1563c:	bl	117ac <strlen@plt>
   15640:	mov	r2, r0
   15644:	add	r3, sp, #344	; 0x158
   15648:	ldr	r1, [sp]
   1564c:	mov	r0, r6
   15650:	bl	14c30 <__assert_fail@plt+0x3274>
   15654:	subs	r7, r0, #0
   15658:	bne	1541c <__assert_fail@plt+0x3a60>
   1565c:	mov	r9, r7
   15660:	add	r3, r4, #1
   15664:	add	sl, sl, #1
   15668:	str	r3, [sp, #20]
   1566c:	ldr	r3, [sp, #12]
   15670:	ldr	r3, [r3]
   15674:	str	r3, [sp, #8]
   15678:	ldr	r1, [sp, #8]
   1567c:	ldr	r3, [sp, #16]
   15680:	ldrb	r3, [r3, #-1]
   15684:	sxth	fp, r3
   15688:	lsl	r2, fp, #1
   1568c:	ldrh	r2, [r1, r2]
   15690:	tst	r2, #256	; 0x100
   15694:	beq	156a4 <__assert_fail@plt+0x3ce8>
   15698:	bl	11758 <__ctype_tolower_loc@plt>
   1569c:	ldr	r3, [r0]
   156a0:	ldr	r3, [r3, fp, lsl #2]
   156a4:	ldr	r2, [sp, #4]
   156a8:	cmp	r3, r2
   156ac:	bne	15750 <__assert_fail@plt+0x3d94>
   156b0:	ldr	r2, [sp]
   156b4:	ldr	r3, [sp, #24]
   156b8:	sub	r2, r4, r2
   156bc:	str	r2, [sp, #28]
   156c0:	ldrb	r4, [r3], #1
   156c4:	cmp	r4, #0
   156c8:	beq	15490 <__assert_fail@plt+0x3ad4>
   156cc:	ldrb	r2, [r6, #1]!
   156d0:	cmp	r2, #0
   156d4:	beq	155ec <__assert_fail@plt+0x3c30>
   156d8:	ldr	r0, [sp, #8]
   156dc:	sxth	fp, r2
   156e0:	ldr	r1, [sp, #28]
   156e4:	add	r1, r1, r3
   156e8:	str	r1, [sp, #20]
   156ec:	lsl	r1, fp, #1
   156f0:	ldrh	r1, [r0, r1]
   156f4:	tst	r1, #256	; 0x100
   156f8:	moveq	fp, r2
   156fc:	beq	15714 <__assert_fail@plt+0x3d58>
   15700:	str	r3, [sp, #32]
   15704:	bl	11758 <__ctype_tolower_loc@plt>
   15708:	ldr	r2, [r0]
   1570c:	ldr	r3, [sp, #32]
   15710:	ldr	fp, [r2, fp, lsl #2]
   15714:	sxth	r2, r4
   15718:	lsl	r1, r2, #1
   1571c:	str	r2, [sp, #36]	; 0x24
   15720:	ldr	r2, [sp, #8]
   15724:	ldrh	r1, [r2, r1]
   15728:	tst	r1, #256	; 0x100
   1572c:	beq	15748 <__assert_fail@plt+0x3d8c>
   15730:	str	r3, [sp, #32]
   15734:	bl	11758 <__ctype_tolower_loc@plt>
   15738:	ldr	r1, [r0]
   1573c:	ldr	r3, [sp, #32]
   15740:	ldr	r2, [sp, #36]	; 0x24
   15744:	ldr	r4, [r1, r2, lsl #2]
   15748:	cmp	fp, r4
   1574c:	beq	156c0 <__assert_fail@plt+0x3d04>
   15750:	mov	r3, r7
   15754:	ldr	r6, [sp, #16]
   15758:	ldr	r4, [sp, #20]
   1575c:	b	155d4 <__assert_fail@plt+0x3c18>
   15760:	mov	r7, r3
   15764:	b	15660 <__assert_fail@plt+0x3ca4>
   15768:	push	{r4, r5, lr}
   1576c:	sub	sp, sp, #60	; 0x3c
   15770:	mov	r4, r0
   15774:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15778:	cmp	r0, #1
   1577c:	bls	157e4 <__assert_fail@plt+0x3e28>
   15780:	str	r4, [sp, #16]
   15784:	mov	r4, #0
   15788:	mov	r2, #0
   1578c:	mov	r3, #0
   15790:	mov	r5, r4
   15794:	strb	r4, [sp]
   15798:	strd	r2, [sp, #4]
   1579c:	strb	r4, [sp, #12]
   157a0:	mov	r0, sp
   157a4:	bl	160cc <__assert_fail@plt+0x4710>
   157a8:	ldrb	r3, [sp, #24]
   157ac:	cmp	r3, #0
   157b0:	beq	157cc <__assert_fail@plt+0x3e10>
   157b4:	ldr	r3, [sp, #28]
   157b8:	cmp	r3, #0
   157bc:	bne	157cc <__assert_fail@plt+0x3e10>
   157c0:	mov	r0, r4
   157c4:	add	sp, sp, #60	; 0x3c
   157c8:	pop	{r4, r5, pc}
   157cc:	ldrd	r2, [sp, #16]
   157d0:	add	r4, r4, #1
   157d4:	strb	r5, [sp, #12]
   157d8:	add	r3, r3, r2
   157dc:	str	r3, [sp, #16]
   157e0:	b	157a0 <__assert_fail@plt+0x3de4>
   157e4:	mov	r0, r4
   157e8:	bl	117ac <strlen@plt>
   157ec:	mov	r4, r0
   157f0:	b	157c0 <__assert_fail@plt+0x3e04>
   157f4:	push	{r4, r5, r6, r7, fp, lr}
   157f8:	mov	r7, r3
   157fc:	lsrs	r3, r2, #30
   15800:	mov	r4, r0
   15804:	movne	r3, #1
   15808:	moveq	r3, #0
   1580c:	lsls	r0, r2, #2
   15810:	add	fp, sp, #20
   15814:	bmi	15820 <__assert_fail@plt+0x3e64>
   15818:	cmp	r3, #0
   1581c:	beq	1582c <__assert_fail@plt+0x3e70>
   15820:	mov	r0, #0
   15824:	sub	sp, fp, #20
   15828:	pop	{r4, r5, r6, r7, fp, pc}
   1582c:	cmp	r0, #4016	; 0xfb0
   15830:	mov	r5, r1
   15834:	mov	r6, r2
   15838:	bhi	158b8 <__assert_fail@plt+0x3efc>
   1583c:	add	r0, r0, #22
   15840:	bic	r0, r0, #7
   15844:	sub	sp, sp, r0
   15848:	add	r0, sp, #15
   1584c:	bic	r0, r0, #15
   15850:	cmp	r0, #0
   15854:	beq	15820 <__assert_fail@plt+0x3e64>
   15858:	mov	r3, #1
   1585c:	mov	ip, #0
   15860:	mov	lr, #2
   15864:	str	r3, [r0, #4]
   15868:	mov	r3, r5
   1586c:	cmp	lr, r6
   15870:	bcc	158c0 <__assert_fail@plt+0x3f04>
   15874:	mov	ip, #0
   15878:	mov	r3, r4
   1587c:	str	ip, [r7]
   15880:	ldrb	r2, [r3]
   15884:	cmp	r2, #0
   15888:	beq	158ac <__assert_fail@plt+0x3ef0>
   1588c:	ldrb	r1, [r5, ip]
   15890:	cmp	r1, r2
   15894:	bne	158fc <__assert_fail@plt+0x3f40>
   15898:	add	ip, ip, #1
   1589c:	add	r3, r3, #1
   158a0:	cmp	r6, ip
   158a4:	bne	15880 <__assert_fail@plt+0x3ec4>
   158a8:	str	r4, [r7]
   158ac:	bl	24dd0 <__assert_fail@plt+0x13414>
   158b0:	mov	r0, #1
   158b4:	b	15824 <__assert_fail@plt+0x3e68>
   158b8:	bl	24d88 <__assert_fail@plt+0x133cc>
   158bc:	b	15850 <__assert_fail@plt+0x3e94>
   158c0:	ldrb	r1, [r3, #1]!
   158c4:	ldrb	r2, [r5, ip]
   158c8:	cmp	r2, r1
   158cc:	bne	158e4 <__assert_fail@plt+0x3f28>
   158d0:	add	ip, ip, #1
   158d4:	sub	r2, lr, ip
   158d8:	str	r2, [r0, lr, lsl #2]
   158dc:	add	lr, lr, #1
   158e0:	b	1586c <__assert_fail@plt+0x3eb0>
   158e4:	cmp	ip, #0
   158e8:	streq	lr, [r0, lr, lsl #2]
   158ec:	beq	158dc <__assert_fail@plt+0x3f20>
   158f0:	ldr	r2, [r0, ip, lsl #2]
   158f4:	sub	ip, ip, r2
   158f8:	b	158c4 <__assert_fail@plt+0x3f08>
   158fc:	cmp	ip, #0
   15900:	ldrne	r2, [r0, ip, lsl #2]
   15904:	addeq	r4, r4, #1
   15908:	addeq	r3, r3, #1
   1590c:	addne	r4, r4, r2
   15910:	subne	ip, ip, r2
   15914:	b	15880 <__assert_fail@plt+0x3ec4>
   15918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1591c:	add	fp, sp, #32
   15920:	sub	sp, sp, #132	; 0x84
   15924:	mov	r5, r1
   15928:	str	r2, [fp, #-160]	; 0xffffff60
   1592c:	str	r0, [fp, #-156]	; 0xffffff64
   15930:	mov	r0, r1
   15934:	bl	15768 <__assert_fail@plt+0x3dac>
   15938:	mov	r9, r0
   1593c:	mov	r0, #44	; 0x2c
   15940:	umull	r6, r7, r9, r0
   15944:	adds	r3, r7, #0
   15948:	movne	r3, #1
   1594c:	cmp	r6, #0
   15950:	blt	1595c <__assert_fail@plt+0x3fa0>
   15954:	cmp	r3, #0
   15958:	beq	15970 <__assert_fail@plt+0x3fb4>
   1595c:	mov	r3, #0
   15960:	str	r3, [fp, #-152]	; 0xffffff68
   15964:	ldr	r0, [fp, #-152]	; 0xffffff68
   15968:	sub	sp, fp, #32
   1596c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15970:	mul	r0, r0, r9
   15974:	cmp	r0, #4016	; 0xfb0
   15978:	bhi	15ac0 <__assert_fail@plt+0x4104>
   1597c:	add	r0, r0, #22
   15980:	bic	r0, r0, #7
   15984:	sub	sp, sp, r0
   15988:	add	r4, sp, #15
   1598c:	bic	r4, r4, #15
   15990:	cmp	r4, #0
   15994:	beq	1595c <__assert_fail@plt+0x3fa0>
   15998:	mov	r7, #40	; 0x28
   1599c:	mov	r6, #0
   159a0:	mov	r2, #0
   159a4:	mov	r3, #0
   159a8:	mla	r7, r7, r9, r4
   159ac:	mov	sl, r4
   159b0:	mov	r8, r4
   159b4:	strb	r6, [fp, #-92]	; 0xffffffa4
   159b8:	strd	r2, [fp, #-88]	; 0xffffffa8
   159bc:	strb	r6, [fp, #-80]	; 0xffffffb0
   159c0:	str	r5, [fp, #-76]	; 0xffffffb4
   159c4:	sub	r0, fp, #92	; 0x5c
   159c8:	bl	160cc <__assert_fail@plt+0x4710>
   159cc:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   159d0:	cmp	r3, #0
   159d4:	str	r3, [fp, #-152]	; 0xffffff68
   159d8:	beq	15acc <__assert_fail@plt+0x4110>
   159dc:	ldr	r5, [fp, #-64]	; 0xffffffc0
   159e0:	cmp	r5, #0
   159e4:	bne	15acc <__assert_fail@plt+0x4110>
   159e8:	mov	r2, #1
   159ec:	mov	r6, r5
   159f0:	mov	r8, #2
   159f4:	str	r2, [r7, #4]
   159f8:	cmp	r8, r9
   159fc:	bcc	15af4 <__assert_fail@plt+0x4138>
   15a00:	ldr	r3, [fp, #-160]	; 0xffffff60
   15a04:	mov	r6, #0
   15a08:	mov	r2, #0
   15a0c:	mov	r8, #40	; 0x28
   15a10:	ldr	r1, [fp, #-156]	; 0xffffff64
   15a14:	strb	r6, [fp, #-148]	; 0xffffff6c
   15a18:	strb	r6, [fp, #-136]	; 0xffffff78
   15a1c:	str	r6, [r3]
   15a20:	ldr	r3, [fp, #-156]	; 0xffffff64
   15a24:	str	r3, [fp, #-132]	; 0xffffff7c
   15a28:	mov	r3, #0
   15a2c:	strb	r6, [fp, #-92]	; 0xffffffa4
   15a30:	strd	r2, [fp, #-144]	; 0xffffff70
   15a34:	strd	r2, [fp, #-88]	; 0xffffffa8
   15a38:	strb	r6, [fp, #-80]	; 0xffffffb0
   15a3c:	str	r1, [fp, #-76]	; 0xffffffb4
   15a40:	sub	r0, fp, #92	; 0x5c
   15a44:	bl	160cc <__assert_fail@plt+0x4710>
   15a48:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   15a4c:	cmp	r0, #0
   15a50:	beq	15a60 <__assert_fail@plt+0x40a4>
   15a54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15a58:	cmp	r3, #0
   15a5c:	beq	15ab4 <__assert_fail@plt+0x40f8>
   15a60:	mla	r3, r8, r5, r4
   15a64:	ldrb	r2, [r3, #8]
   15a68:	ands	r0, r0, r2
   15a6c:	beq	15b94 <__assert_fail@plt+0x41d8>
   15a70:	ldr	r0, [r3, #12]
   15a74:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15a78:	sub	r0, r0, r3
   15a7c:	clz	r0, r0
   15a80:	lsr	r0, r0, #5
   15a84:	cmp	r0, #0
   15a88:	beq	15bbc <__assert_fail@plt+0x4200>
   15a8c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   15a90:	add	r5, r5, #1
   15a94:	cmp	r9, r5
   15a98:	strb	r6, [fp, #-80]	; 0xffffffb0
   15a9c:	add	r3, r3, r2
   15aa0:	str	r3, [fp, #-76]	; 0xffffffb4
   15aa4:	bne	15a40 <__assert_fail@plt+0x4084>
   15aa8:	ldr	r2, [fp, #-160]	; 0xffffff60
   15aac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15ab0:	str	r3, [r2]
   15ab4:	mov	r0, r4
   15ab8:	bl	24dd0 <__assert_fail@plt+0x13414>
   15abc:	b	15964 <__assert_fail@plt+0x3fa8>
   15ac0:	bl	24d88 <__assert_fail@plt+0x133cc>
   15ac4:	mov	r4, r0
   15ac8:	b	15990 <__assert_fail@plt+0x3fd4>
   15acc:	sub	r1, fp, #76	; 0x4c
   15ad0:	mov	r0, r8
   15ad4:	bl	24e1c <__assert_fail@plt+0x13460>
   15ad8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15adc:	add	r8, r8, #40	; 0x28
   15ae0:	strb	r6, [fp, #-80]	; 0xffffffb0
   15ae4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15ae8:	add	r2, r2, r1
   15aec:	str	r2, [fp, #-76]	; 0xffffffb4
   15af0:	b	159c4 <__assert_fail@plt+0x4008>
   15af4:	ldrb	r3, [sl, #48]	; 0x30
   15af8:	str	r3, [fp, #-164]	; 0xffffff5c
   15afc:	mov	r3, #40	; 0x28
   15b00:	mla	r1, r3, r6, r4
   15b04:	ldr	r3, [fp, #-164]	; 0xffffff5c
   15b08:	cmp	r3, #0
   15b0c:	beq	15b50 <__assert_fail@plt+0x4194>
   15b10:	ldrb	r2, [r1, #8]
   15b14:	cmp	r2, #0
   15b18:	beq	15b50 <__assert_fail@plt+0x4194>
   15b1c:	ldr	r2, [r1, #12]
   15b20:	ldr	r0, [sl, #52]	; 0x34
   15b24:	sub	r0, r0, r2
   15b28:	clz	r0, r0
   15b2c:	lsr	r0, r0, #5
   15b30:	cmp	r0, #0
   15b34:	beq	15b7c <__assert_fail@plt+0x41c0>
   15b38:	add	r6, r6, #1
   15b3c:	sub	r2, r8, r6
   15b40:	str	r2, [r7, r8, lsl #2]
   15b44:	add	r8, r8, #1
   15b48:	add	sl, sl, #40	; 0x28
   15b4c:	b	159f8 <__assert_fail@plt+0x403c>
   15b50:	ldr	r0, [r1, #4]
   15b54:	ldr	r2, [sl, #44]	; 0x2c
   15b58:	cmp	r2, r0
   15b5c:	movne	r0, #0
   15b60:	bne	15b30 <__assert_fail@plt+0x4174>
   15b64:	ldr	r1, [r1]
   15b68:	ldr	r0, [sl, #40]	; 0x28
   15b6c:	bl	1162c <memcmp@plt>
   15b70:	clz	r0, r0
   15b74:	lsr	r0, r0, #5
   15b78:	b	15b30 <__assert_fail@plt+0x4174>
   15b7c:	cmp	r6, #0
   15b80:	streq	r8, [r7, r8, lsl #2]
   15b84:	beq	15b44 <__assert_fail@plt+0x4188>
   15b88:	ldr	r2, [r7, r6, lsl #2]
   15b8c:	sub	r6, r6, r2
   15b90:	b	15afc <__assert_fail@plt+0x4140>
   15b94:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15b98:	ldr	r2, [r3, #4]
   15b9c:	cmp	r2, r1
   15ba0:	bne	15a84 <__assert_fail@plt+0x40c8>
   15ba4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15ba8:	ldr	r0, [r3]
   15bac:	bl	1162c <memcmp@plt>
   15bb0:	clz	r0, r0
   15bb4:	lsr	r0, r0, #5
   15bb8:	b	15a84 <__assert_fail@plt+0x40c8>
   15bbc:	cmp	r5, #0
   15bc0:	ldrne	r3, [r7, r5, lsl #2]
   15bc4:	subne	r5, r5, r3
   15bc8:	bne	15c2c <__assert_fail@plt+0x4270>
   15bcc:	sub	r0, fp, #148	; 0x94
   15bd0:	bl	160cc <__assert_fail@plt+0x4710>
   15bd4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15bd8:	cmp	r3, #0
   15bdc:	beq	15bec <__assert_fail@plt+0x4230>
   15be0:	ldr	r3, [fp, #-120]	; 0xffffff88
   15be4:	cmp	r3, #0
   15be8:	beq	15c5c <__assert_fail@plt+0x42a0>
   15bec:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   15bf0:	strb	r6, [fp, #-136]	; 0xffffff78
   15bf4:	strb	r6, [fp, #-80]	; 0xffffffb0
   15bf8:	add	r3, r3, r2
   15bfc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15c00:	str	r3, [fp, #-132]	; 0xffffff7c
   15c04:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15c08:	add	r3, r3, r2
   15c0c:	str	r3, [fp, #-76]	; 0xffffffb4
   15c10:	b	15a40 <__assert_fail@plt+0x4084>
   15c14:	ldr	r2, [fp, #-132]	; 0xffffff7c
   15c18:	sub	r3, r3, #1
   15c1c:	strb	r6, [fp, #-136]	; 0xffffff78
   15c20:	ldr	r1, [fp, #-128]	; 0xffffff80
   15c24:	add	r2, r2, r1
   15c28:	str	r2, [fp, #-132]	; 0xffffff7c
   15c2c:	cmp	r3, #0
   15c30:	beq	15a40 <__assert_fail@plt+0x4084>
   15c34:	sub	r0, fp, #148	; 0x94
   15c38:	str	r3, [fp, #-156]	; 0xffffff64
   15c3c:	bl	160cc <__assert_fail@plt+0x4710>
   15c40:	ldrb	r2, [fp, #-124]	; 0xffffff84
   15c44:	ldr	r3, [fp, #-156]	; 0xffffff64
   15c48:	cmp	r2, #0
   15c4c:	beq	15c14 <__assert_fail@plt+0x4258>
   15c50:	ldr	r2, [fp, #-120]	; 0xffffff88
   15c54:	cmp	r2, #0
   15c58:	bne	15c14 <__assert_fail@plt+0x4258>
   15c5c:	bl	11980 <abort@plt>
   15c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c64:	sub	sp, sp, #300	; 0x12c
   15c68:	mov	r4, r0
   15c6c:	mov	r5, r1
   15c70:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15c74:	cmp	r0, #1
   15c78:	bls	15fb4 <__assert_fail@plt+0x45f8>
   15c7c:	mov	r0, #0
   15c80:	mov	r1, #0
   15c84:	mov	r3, #0
   15c88:	str	r5, [sp, #32]
   15c8c:	strd	r0, [sp, #20]
   15c90:	add	r0, sp, #16
   15c94:	strb	r3, [sp, #16]
   15c98:	strb	r3, [sp, #28]
   15c9c:	bl	160cc <__assert_fail@plt+0x4710>
   15ca0:	ldrb	r3, [sp, #40]	; 0x28
   15ca4:	cmp	r3, #0
   15ca8:	beq	15cb8 <__assert_fail@plt+0x42fc>
   15cac:	ldr	r3, [sp, #44]	; 0x2c
   15cb0:	cmp	r3, #0
   15cb4:	beq	15eec <__assert_fail@plt+0x4530>
   15cb8:	mov	r6, #0
   15cbc:	mov	r3, #1
   15cc0:	mov	fp, r6
   15cc4:	mov	r7, r6
   15cc8:	mov	sl, r6
   15ccc:	mov	r8, r6
   15cd0:	str	r6, [sp, #4]
   15cd4:	strb	r6, [sp, #72]	; 0x48
   15cd8:	str	r6, [sp, #76]	; 0x4c
   15cdc:	str	r6, [sp, #80]	; 0x50
   15ce0:	strb	r6, [sp, #84]	; 0x54
   15ce4:	str	r5, [sp, #88]	; 0x58
   15ce8:	strb	r6, [sp, #128]	; 0x80
   15cec:	str	r6, [sp, #132]	; 0x84
   15cf0:	str	r6, [sp, #136]	; 0x88
   15cf4:	strb	r6, [sp, #140]	; 0x8c
   15cf8:	str	r4, [sp, #144]	; 0x90
   15cfc:	add	r0, sp, #128	; 0x80
   15d00:	str	r3, [sp, #8]
   15d04:	bl	160cc <__assert_fail@plt+0x4710>
   15d08:	ldrb	r2, [sp, #152]	; 0x98
   15d0c:	ldr	r3, [sp, #8]
   15d10:	cmp	r2, #0
   15d14:	beq	15d24 <__assert_fail@plt+0x4368>
   15d18:	ldr	r2, [sp, #156]	; 0x9c
   15d1c:	cmp	r2, #0
   15d20:	beq	15ff4 <__assert_fail@plt+0x4638>
   15d24:	cmp	sl, #9
   15d28:	movls	r9, #0
   15d2c:	andhi	r9, r3, #1
   15d30:	cmp	r9, #0
   15d34:	beq	15e80 <__assert_fail@plt+0x44c4>
   15d38:	add	r3, sl, sl, lsl #2
   15d3c:	cmp	r7, r3
   15d40:	subcs	r6, r7, r6
   15d44:	bcs	15e2c <__assert_fail@plt+0x4470>
   15d48:	ldrb	r3, [sp, #152]	; 0x98
   15d4c:	add	sl, sl, #1
   15d50:	add	r7, r7, #1
   15d54:	cmp	r3, #0
   15d58:	beq	15e88 <__assert_fail@plt+0x44cc>
   15d5c:	ldrb	r3, [sp, #40]	; 0x28
   15d60:	cmp	r3, #0
   15d64:	beq	15e88 <__assert_fail@plt+0x44cc>
   15d68:	ldr	r3, [sp, #44]	; 0x2c
   15d6c:	ldr	r0, [sp, #156]	; 0x9c
   15d70:	sub	r0, r0, r3
   15d74:	clz	r0, r0
   15d78:	lsr	r0, r0, #5
   15d7c:	cmp	r0, #0
   15d80:	beq	15f9c <__assert_fail@plt+0x45e0>
   15d84:	add	ip, sp, #128	; 0x80
   15d88:	add	lr, sp, #184	; 0xb8
   15d8c:	str	r5, [sp, #256]	; 0x100
   15d90:	ldm	ip!, {r0, r1, r2, r3}
   15d94:	stmia	lr!, {r0, r1, r2, r3}
   15d98:	ldm	ip!, {r0, r1, r2, r3}
   15d9c:	strb	r8, [sp, #196]	; 0xc4
   15da0:	stmia	lr!, {r0, r1, r2, r3}
   15da4:	ldm	ip!, {r0, r1, r2, r3}
   15da8:	stmia	lr!, {r0, r1, r2, r3}
   15dac:	ldrd	r2, [sp, #200]	; 0xc8
   15db0:	ldm	ip, {r0, r1}
   15db4:	add	r3, r3, r2
   15db8:	stm	lr, {r0, r1}
   15dbc:	add	r0, sp, #240	; 0xf0
   15dc0:	str	r3, [sp, #200]	; 0xc8
   15dc4:	strb	r8, [sp, #252]	; 0xfc
   15dc8:	ldr	r3, [sp, #4]
   15dcc:	strb	r8, [sp, #240]	; 0xf0
   15dd0:	str	r3, [sp, #244]	; 0xf4
   15dd4:	str	fp, [sp, #248]	; 0xf8
   15dd8:	bl	160cc <__assert_fail@plt+0x4710>
   15ddc:	ldrb	r3, [sp, #264]	; 0x108
   15de0:	cmp	r3, #0
   15de4:	beq	15eb4 <__assert_fail@plt+0x44f8>
   15de8:	ldr	r3, [sp, #268]	; 0x10c
   15dec:	cmp	r3, #0
   15df0:	bne	15eb4 <__assert_fail@plt+0x44f8>
   15df4:	bl	11980 <abort@plt>
   15df8:	add	r0, sp, #72	; 0x48
   15dfc:	bl	160cc <__assert_fail@plt+0x4710>
   15e00:	ldrb	r3, [sp, #96]	; 0x60
   15e04:	cmp	r3, #0
   15e08:	beq	15e18 <__assert_fail@plt+0x445c>
   15e0c:	ldr	r3, [sp, #100]	; 0x64
   15e10:	cmp	r3, #0
   15e14:	beq	15e34 <__assert_fail@plt+0x4478>
   15e18:	ldrd	r2, [sp, #88]	; 0x58
   15e1c:	sub	r6, r6, #1
   15e20:	strb	r8, [sp, #84]	; 0x54
   15e24:	add	r3, r3, r2
   15e28:	str	r3, [sp, #88]	; 0x58
   15e2c:	cmp	r6, #0
   15e30:	bne	15df8 <__assert_fail@plt+0x443c>
   15e34:	add	r0, sp, #72	; 0x48
   15e38:	bl	160cc <__assert_fail@plt+0x4710>
   15e3c:	ldrb	r3, [sp, #96]	; 0x60
   15e40:	cmp	r3, #0
   15e44:	bne	15e50 <__assert_fail@plt+0x4494>
   15e48:	mov	r6, r7
   15e4c:	b	15d48 <__assert_fail@plt+0x438c>
   15e50:	ldr	r2, [sp, #100]	; 0x64
   15e54:	cmp	r2, #0
   15e58:	movne	r6, r7
   15e5c:	bne	15e80 <__assert_fail@plt+0x44c4>
   15e60:	add	r2, sp, #240	; 0xf0
   15e64:	mov	r1, r5
   15e68:	mov	r0, r4
   15e6c:	bl	15918 <__assert_fail@plt+0x3f5c>
   15e70:	subs	r9, r0, #0
   15e74:	beq	15e48 <__assert_fail@plt+0x448c>
   15e78:	ldr	r4, [sp, #240]	; 0xf0
   15e7c:	b	15eec <__assert_fail@plt+0x4530>
   15e80:	mov	r9, r3
   15e84:	b	15d48 <__assert_fail@plt+0x438c>
   15e88:	ldr	r3, [sp, #36]	; 0x24
   15e8c:	ldr	r2, [sp, #148]	; 0x94
   15e90:	cmp	r2, r3
   15e94:	movne	r0, #0
   15e98:	bne	15d7c <__assert_fail@plt+0x43c0>
   15e9c:	ldr	r1, [sp, #32]
   15ea0:	ldr	r0, [sp, #144]	; 0x90
   15ea4:	bl	1162c <memcmp@plt>
   15ea8:	clz	r0, r0
   15eac:	lsr	r0, r0, #5
   15eb0:	b	15d7c <__assert_fail@plt+0x43c0>
   15eb4:	ldr	r3, [sp, #256]	; 0x100
   15eb8:	strb	r8, [sp, #252]	; 0xfc
   15ebc:	ldr	r2, [sp, #260]	; 0x104
   15ec0:	add	r3, r3, r2
   15ec4:	str	r3, [sp, #256]	; 0x100
   15ec8:	add	r0, sp, #240	; 0xf0
   15ecc:	bl	160cc <__assert_fail@plt+0x4710>
   15ed0:	ldrb	r3, [sp, #264]	; 0x108
   15ed4:	cmp	r3, #0
   15ed8:	beq	15ef8 <__assert_fail@plt+0x453c>
   15edc:	ldr	r3, [sp, #268]	; 0x10c
   15ee0:	cmp	r3, #0
   15ee4:	bne	15ef8 <__assert_fail@plt+0x453c>
   15ee8:	ldr	r4, [sp, #144]	; 0x90
   15eec:	mov	r0, r4
   15ef0:	add	sp, sp, #300	; 0x12c
   15ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ef8:	add	r0, sp, #184	; 0xb8
   15efc:	bl	160cc <__assert_fail@plt+0x4710>
   15f00:	ldrb	r2, [sp, #208]	; 0xd0
   15f04:	cmp	r2, #0
   15f08:	beq	15f18 <__assert_fail@plt+0x455c>
   15f0c:	ldr	r3, [sp, #212]	; 0xd4
   15f10:	cmp	r3, #0
   15f14:	beq	15ff4 <__assert_fail@plt+0x4638>
   15f18:	cmp	r2, #0
   15f1c:	add	r7, r7, #1
   15f20:	beq	15f70 <__assert_fail@plt+0x45b4>
   15f24:	ldrb	r3, [sp, #264]	; 0x108
   15f28:	cmp	r3, #0
   15f2c:	beq	15f70 <__assert_fail@plt+0x45b4>
   15f30:	ldr	r3, [sp, #212]	; 0xd4
   15f34:	ldr	r0, [sp, #268]	; 0x10c
   15f38:	subs	r0, r3, r0
   15f3c:	movne	r0, #1
   15f40:	cmp	r0, #0
   15f44:	bne	15f9c <__assert_fail@plt+0x45e0>
   15f48:	ldrd	r2, [sp, #200]	; 0xc8
   15f4c:	strb	r0, [sp, #196]	; 0xc4
   15f50:	strb	r0, [sp, #252]	; 0xfc
   15f54:	add	r3, r3, r2
   15f58:	ldr	r2, [sp, #260]	; 0x104
   15f5c:	str	r3, [sp, #200]	; 0xc8
   15f60:	ldr	r3, [sp, #256]	; 0x100
   15f64:	add	r3, r3, r2
   15f68:	str	r3, [sp, #256]	; 0x100
   15f6c:	b	15ec8 <__assert_fail@plt+0x450c>
   15f70:	ldr	r2, [sp, #204]	; 0xcc
   15f74:	ldr	r3, [sp, #260]	; 0x104
   15f78:	cmp	r2, r3
   15f7c:	movne	r0, #1
   15f80:	bne	15f40 <__assert_fail@plt+0x4584>
   15f84:	ldr	r0, [sp, #200]	; 0xc8
   15f88:	ldr	r1, [sp, #256]	; 0x100
   15f8c:	bl	1162c <memcmp@plt>
   15f90:	adds	r0, r0, #0
   15f94:	movne	r0, #1
   15f98:	b	15f40 <__assert_fail@plt+0x4584>
   15f9c:	ldrd	r2, [sp, #144]	; 0x90
   15fa0:	strb	r8, [sp, #140]	; 0x8c
   15fa4:	add	r3, r3, r2
   15fa8:	str	r3, [sp, #144]	; 0x90
   15fac:	mov	r3, r9
   15fb0:	b	15cfc <__assert_fail@plt+0x4340>
   15fb4:	ldrb	fp, [r5]
   15fb8:	cmp	fp, #0
   15fbc:	beq	15eec <__assert_fail@plt+0x4530>
   15fc0:	mov	r9, #0
   15fc4:	add	r3, r5, #1
   15fc8:	mov	r7, r4
   15fcc:	mov	r2, r5
   15fd0:	mov	r6, r9
   15fd4:	mov	r8, r9
   15fd8:	str	r3, [sp, #4]
   15fdc:	mov	r1, #1
   15fe0:	mov	sl, r7
   15fe4:	mov	r4, r7
   15fe8:	ldrb	r3, [sl], #1
   15fec:	cmp	r3, #0
   15ff0:	bne	15ffc <__assert_fail@plt+0x4640>
   15ff4:	mov	r4, #0
   15ff8:	b	15eec <__assert_fail@plt+0x4530>
   15ffc:	cmp	r8, #9
   16000:	movls	r3, #0
   16004:	andhi	r3, r1, #1
   16008:	cmp	r3, #0
   1600c:	beq	160c4 <__assert_fail@plt+0x4708>
   16010:	add	r1, r8, r8, lsl #2
   16014:	cmp	r6, r1
   16018:	bcc	16074 <__assert_fail@plt+0x46b8>
   1601c:	cmp	r2, #0
   16020:	str	r3, [sp, #12]
   16024:	beq	1604c <__assert_fail@plt+0x4690>
   16028:	sub	r1, r6, r9
   1602c:	mov	r0, r2
   16030:	str	r2, [sp, #8]
   16034:	bl	11884 <strnlen@plt>
   16038:	ldrd	r2, [sp, #8]
   1603c:	mov	r9, r6
   16040:	ldrb	r1, [r2, r0]!
   16044:	cmp	r1, #0
   16048:	bne	16074 <__assert_fail@plt+0x46b8>
   1604c:	mov	r0, r5
   16050:	bl	117ac <strlen@plt>
   16054:	mov	r2, r0
   16058:	add	r3, sp, #240	; 0xf0
   1605c:	mov	r1, r5
   16060:	mov	r0, r7
   16064:	bl	157f4 <__assert_fail@plt+0x3e38>
   16068:	subs	r3, r0, #0
   1606c:	bne	15e78 <__assert_fail@plt+0x44bc>
   16070:	mov	r2, r3
   16074:	ldrb	r1, [sl, #-1]
   16078:	add	r8, r8, #1
   1607c:	add	r0, r6, #1
   16080:	cmp	r1, fp
   16084:	bne	160b4 <__assert_fail@plt+0x46f8>
   16088:	ldr	r1, [sp, #4]
   1608c:	sub	r6, r6, r5
   16090:	ldrb	lr, [r1], #1
   16094:	cmp	lr, #0
   16098:	beq	15eec <__assert_fail@plt+0x4530>
   1609c:	ldrb	ip, [r7, #1]!
   160a0:	cmp	ip, #0
   160a4:	beq	15ff4 <__assert_fail@plt+0x4638>
   160a8:	cmp	lr, ip
   160ac:	add	r0, r6, r1
   160b0:	beq	16090 <__assert_fail@plt+0x46d4>
   160b4:	mov	r7, sl
   160b8:	mov	r6, r0
   160bc:	mov	r1, r3
   160c0:	b	15fe0 <__assert_fail@plt+0x4624>
   160c4:	mov	r3, r1
   160c8:	b	16074 <__assert_fail@plt+0x46b8>
   160cc:	ldrb	r3, [r0, #12]
   160d0:	cmp	r3, #0
   160d4:	bxne	lr
   160d8:	push	{r4, r5, r6, lr}
   160dc:	mov	r4, r0
   160e0:	ldrb	r3, [r0]
   160e4:	ldr	r5, [r0, #16]
   160e8:	cmp	r3, #0
   160ec:	bne	1614c <__assert_fail@plt+0x4790>
   160f0:	ldrb	r0, [r5]
   160f4:	bl	24e70 <__assert_fail@plt+0x134b4>
   160f8:	cmp	r0, #0
   160fc:	beq	16120 <__assert_fail@plt+0x4764>
   16100:	mov	r3, #1
   16104:	str	r3, [r4, #20]
   16108:	ldrb	r2, [r5]
   1610c:	str	r2, [r4, #28]
   16110:	strb	r3, [r4, #24]
   16114:	mov	r3, #1
   16118:	strb	r3, [r4, #12]
   1611c:	pop	{r4, r5, r6, pc}
   16120:	add	r0, r4, #4
   16124:	bl	11614 <mbsinit@plt>
   16128:	cmp	r0, #0
   1612c:	movne	r3, #1
   16130:	strbne	r3, [r4]
   16134:	bne	1614c <__assert_fail@plt+0x4790>
   16138:	ldr	r3, [pc, #220]	; 1621c <__assert_fail@plt+0x4860>
   1613c:	mov	r2, #143	; 0x8f
   16140:	ldr	r1, [pc, #216]	; 16220 <__assert_fail@plt+0x4864>
   16144:	ldr	r0, [pc, #216]	; 16224 <__assert_fail@plt+0x4868>
   16148:	bl	119bc <__assert_fail@plt>
   1614c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   16150:	mov	r1, r0
   16154:	mov	r0, r5
   16158:	bl	17888 <__assert_fail@plt+0x5ecc>
   1615c:	add	r6, r4, #4
   16160:	mov	r2, r0
   16164:	mov	r3, r6
   16168:	mov	r1, r5
   1616c:	add	r0, r4, #28
   16170:	bl	1886c <__assert_fail@plt+0x6eb0>
   16174:	cmn	r0, #1
   16178:	str	r0, [r4, #20]
   1617c:	bne	16190 <__assert_fail@plt+0x47d4>
   16180:	mov	r3, #1
   16184:	str	r3, [r4, #20]
   16188:	mov	r3, #0
   1618c:	b	16110 <__assert_fail@plt+0x4754>
   16190:	cmn	r0, #2
   16194:	bne	161a8 <__assert_fail@plt+0x47ec>
   16198:	ldr	r0, [r4, #16]
   1619c:	bl	117ac <strlen@plt>
   161a0:	str	r0, [r4, #20]
   161a4:	b	16188 <__assert_fail@plt+0x47cc>
   161a8:	cmp	r0, #0
   161ac:	bne	161fc <__assert_fail@plt+0x4840>
   161b0:	mov	r3, #1
   161b4:	str	r3, [r4, #20]
   161b8:	ldr	r3, [r4, #16]
   161bc:	ldrb	r3, [r3]
   161c0:	cmp	r3, #0
   161c4:	beq	161dc <__assert_fail@plt+0x4820>
   161c8:	ldr	r3, [pc, #76]	; 1621c <__assert_fail@plt+0x4860>
   161cc:	mov	r2, #171	; 0xab
   161d0:	ldr	r1, [pc, #72]	; 16220 <__assert_fail@plt+0x4864>
   161d4:	ldr	r0, [pc, #76]	; 16228 <__assert_fail@plt+0x486c>
   161d8:	bl	119bc <__assert_fail@plt>
   161dc:	ldr	r3, [r4, #28]
   161e0:	cmp	r3, #0
   161e4:	beq	161fc <__assert_fail@plt+0x4840>
   161e8:	ldr	r3, [pc, #44]	; 1621c <__assert_fail@plt+0x4860>
   161ec:	mov	r2, #172	; 0xac
   161f0:	ldr	r1, [pc, #40]	; 16220 <__assert_fail@plt+0x4864>
   161f4:	ldr	r0, [pc, #48]	; 1622c <__assert_fail@plt+0x4870>
   161f8:	bl	119bc <__assert_fail@plt>
   161fc:	mov	r3, #1
   16200:	mov	r0, r6
   16204:	strb	r3, [r4, #24]
   16208:	bl	11614 <mbsinit@plt>
   1620c:	cmp	r0, #0
   16210:	movne	r3, #0
   16214:	strbne	r3, [r4]
   16218:	b	16114 <__assert_fail@plt+0x4758>
   1621c:	andeq	r6, r2, sp, lsl r6
   16220:	andeq	r6, r2, r0, lsr r6
   16224:	andeq	r6, r2, sl, lsr r6
   16228:	andeq	r6, r2, r1, asr r6
   1622c:	andeq	r6, r2, r8, ror #12
   16230:	ldr	r3, [r0, #16]
   16234:	add	r1, r3, r1
   16238:	str	r1, [r0, #16]
   1623c:	bx	lr
   16240:	ldrb	r2, [r1]
   16244:	mov	r3, r0
   16248:	add	r0, r0, #16
   1624c:	cmp	r2, #0
   16250:	strb	r2, [r3], #4
   16254:	movne	ip, r1
   16258:	add	r1, r1, #16
   1625c:	ldrne	r2, [ip, #4]!
   16260:	streq	r2, [r0, #-12]
   16264:	strne	r2, [r0, #-12]
   16268:	ldrne	r2, [ip, #4]
   1626c:	str	r2, [r3, #4]
   16270:	ldrb	r3, [r1, #-4]
   16274:	strb	r3, [r0, #-4]
   16278:	b	24e1c <__assert_fail@plt+0x13460>
   1627c:	push	{r4, r5, r6, lr}
   16280:	subs	r4, r0, #0
   16284:	bne	1629c <__assert_fail@plt+0x48e0>
   16288:	ldr	r3, [pc, #124]	; 1630c <__assert_fail@plt+0x4950>
   1628c:	ldr	r0, [pc, #124]	; 16310 <__assert_fail@plt+0x4954>
   16290:	ldr	r1, [r3]
   16294:	bl	11968 <fputs@plt>
   16298:	bl	11980 <abort@plt>
   1629c:	mov	r1, #47	; 0x2f
   162a0:	bl	118c0 <strrchr@plt>
   162a4:	subs	r6, r0, #0
   162a8:	beq	162f8 <__assert_fail@plt+0x493c>
   162ac:	add	r5, r6, #1
   162b0:	sub	r3, r5, r4
   162b4:	cmp	r3, #6
   162b8:	ble	162f8 <__assert_fail@plt+0x493c>
   162bc:	mov	r2, #7
   162c0:	ldr	r1, [pc, #76]	; 16314 <__assert_fail@plt+0x4958>
   162c4:	sub	r0, r6, #6
   162c8:	bl	11974 <strncmp@plt>
   162cc:	cmp	r0, #0
   162d0:	bne	162f8 <__assert_fail@plt+0x493c>
   162d4:	mov	r2, #3
   162d8:	ldr	r1, [pc, #56]	; 16318 <__assert_fail@plt+0x495c>
   162dc:	mov	r0, r5
   162e0:	bl	11974 <strncmp@plt>
   162e4:	cmp	r0, #0
   162e8:	ldreq	r3, [pc, #44]	; 1631c <__assert_fail@plt+0x4960>
   162ec:	addeq	r4, r6, #4
   162f0:	movne	r4, r5
   162f4:	streq	r4, [r3]
   162f8:	ldr	r3, [pc, #32]	; 16320 <__assert_fail@plt+0x4964>
   162fc:	str	r4, [r3]
   16300:	ldr	r3, [pc, #28]	; 16324 <__assert_fail@plt+0x4968>
   16304:	str	r4, [r3]
   16308:	pop	{r4, r5, r6, pc}
   1630c:	andeq	r7, r3, r8, lsl r2
   16310:	andeq	r6, r2, sl, ror r6
   16314:			; <UNDEFINED> instruction: 0x000266b2
   16318:			; <UNDEFINED> instruction: 0x000266ba
   1631c:	andeq	r7, r3, r8, lsl #4
   16320:	andeq	r7, r3, r0, lsr #5
   16324:	andeq	r7, r3, ip, lsl #4
   16328:	push	{r4, lr}
   1632c:	mov	r2, #48	; 0x30
   16330:	mov	r4, r1
   16334:	mov	r1, #0
   16338:	bl	11818 <memset@plt>
   1633c:	cmp	r4, #10
   16340:	bne	16348 <__assert_fail@plt+0x498c>
   16344:	bl	11980 <abort@plt>
   16348:	str	r4, [r0]
   1634c:	pop	{r4, pc}
   16350:	push	{r4, r5, r6, lr}
   16354:	mov	r2, #5
   16358:	mov	r6, r0
   1635c:	mov	r5, r1
   16360:	mov	r1, r0
   16364:	mov	r0, #0
   16368:	bl	11638 <dcgettext@plt>
   1636c:	cmp	r6, r0
   16370:	mov	r4, r0
   16374:	bne	163e4 <__assert_fail@plt+0x4a28>
   16378:	bl	24d54 <__assert_fail@plt+0x13398>
   1637c:	ldrb	r3, [r0]
   16380:	bic	r3, r3, #32
   16384:	cmp	r3, #85	; 0x55
   16388:	bne	163ec <__assert_fail@plt+0x4a30>
   1638c:	ldrb	r3, [r0, #1]
   16390:	bic	r3, r3, #32
   16394:	cmp	r3, #84	; 0x54
   16398:	bne	1645c <__assert_fail@plt+0x4aa0>
   1639c:	ldrb	r3, [r0, #2]
   163a0:	bic	r3, r3, #32
   163a4:	cmp	r3, #70	; 0x46
   163a8:	bne	1645c <__assert_fail@plt+0x4aa0>
   163ac:	ldrb	r3, [r0, #3]
   163b0:	cmp	r3, #45	; 0x2d
   163b4:	bne	1645c <__assert_fail@plt+0x4aa0>
   163b8:	ldrb	r3, [r0, #4]
   163bc:	cmp	r3, #56	; 0x38
   163c0:	bne	1645c <__assert_fail@plt+0x4aa0>
   163c4:	ldrb	r3, [r0, #5]
   163c8:	cmp	r3, #0
   163cc:	bne	1645c <__assert_fail@plt+0x4aa0>
   163d0:	ldrb	r2, [r4]
   163d4:	ldr	r3, [pc, #144]	; 1646c <__assert_fail@plt+0x4ab0>
   163d8:	ldr	r4, [pc, #144]	; 16470 <__assert_fail@plt+0x4ab4>
   163dc:	cmp	r2, #96	; 0x60
   163e0:	movne	r4, r3
   163e4:	mov	r0, r4
   163e8:	pop	{r4, r5, r6, pc}
   163ec:	cmp	r3, #71	; 0x47
   163f0:	bne	1645c <__assert_fail@plt+0x4aa0>
   163f4:	ldrb	r3, [r0, #1]
   163f8:	bic	r3, r3, #32
   163fc:	cmp	r3, #66	; 0x42
   16400:	bne	1645c <__assert_fail@plt+0x4aa0>
   16404:	ldrb	r3, [r0, #2]
   16408:	cmp	r3, #49	; 0x31
   1640c:	bne	1645c <__assert_fail@plt+0x4aa0>
   16410:	ldrb	r3, [r0, #3]
   16414:	cmp	r3, #56	; 0x38
   16418:	bne	1645c <__assert_fail@plt+0x4aa0>
   1641c:	ldrb	r3, [r0, #4]
   16420:	cmp	r3, #48	; 0x30
   16424:	bne	1645c <__assert_fail@plt+0x4aa0>
   16428:	ldrb	r3, [r0, #5]
   1642c:	cmp	r3, #51	; 0x33
   16430:	bne	1645c <__assert_fail@plt+0x4aa0>
   16434:	ldrb	r3, [r0, #6]
   16438:	cmp	r3, #48	; 0x30
   1643c:	bne	1645c <__assert_fail@plt+0x4aa0>
   16440:	ldrb	r3, [r0, #7]
   16444:	cmp	r3, #0
   16448:	bne	1645c <__assert_fail@plt+0x4aa0>
   1644c:	ldrb	r2, [r4]
   16450:	ldr	r3, [pc, #28]	; 16474 <__assert_fail@plt+0x4ab8>
   16454:	ldr	r4, [pc, #28]	; 16478 <__assert_fail@plt+0x4abc>
   16458:	b	163dc <__assert_fail@plt+0x4a20>
   1645c:	ldr	r4, [pc, #24]	; 1647c <__assert_fail@plt+0x4ac0>
   16460:	cmp	r5, #9
   16464:	ldr	r3, [pc, #20]	; 16480 <__assert_fail@plt+0x4ac4>
   16468:	b	163e0 <__assert_fail@plt+0x4a24>
   1646c:	andeq	r6, r2, r6, lsl r7
   16470:	andeq	r6, r2, r1, lsr #14
   16474:	andeq	r6, r2, sl, lsl r7
   16478:	andeq	r6, r2, sp, lsl r7
   1647c:	andeq	r6, r2, r4, lsl r7
   16480:	andeq	r5, r2, r6, asr pc
   16484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16488:	sub	sp, sp, #108	; 0x6c
   1648c:	mov	r8, r0
   16490:	mov	r5, r1
   16494:	mov	r6, #0
   16498:	str	r3, [sp, #40]	; 0x28
   1649c:	str	r2, [sp, #48]	; 0x30
   164a0:	ldr	sl, [sp, #144]	; 0x90
   164a4:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   164a8:	ldr	r3, [sp, #148]	; 0x94
   164ac:	str	r6, [sp, #24]
   164b0:	str	r6, [sp, #32]
   164b4:	str	r6, [sp, #44]	; 0x2c
   164b8:	str	r6, [sp, #52]	; 0x34
   164bc:	ubfx	r7, r3, #1, #1
   164c0:	mov	r3, #1
   164c4:	str	r6, [sp, #60]	; 0x3c
   164c8:	str	r3, [sp, #72]	; 0x48
   164cc:	str	r0, [sp, #76]	; 0x4c
   164d0:	cmp	sl, #10
   164d4:	ldrls	pc, [pc, sl, lsl #2]
   164d8:	b	1671c <__assert_fail@plt+0x4d60>
   164dc:	andeq	r6, r1, r8, lsl #10
   164e0:	andeq	r6, r1, r4, lsr r7
   164e4:			; <UNDEFINED> instruction: 0x000166b8
   164e8:	ldrdeq	r6, [r1], -r0
   164ec:	andeq	r6, r1, r0, lsr #13
   164f0:	strdeq	r6, [r1], -r8
   164f4:	ldrdeq	r6, [r1], -r8
   164f8:	andeq	r6, r1, r0, lsr #14
   164fc:	andeq	r6, r1, r8, lsr #12
   16500:	andeq	r6, r1, r8, lsr #12
   16504:	andeq	r6, r1, r8, lsr #12
   16508:	mov	r4, sl
   1650c:	mov	r7, #0
   16510:	mov	r9, r5
   16514:	mov	r3, #0
   16518:	str	r6, [sp, #68]	; 0x44
   1651c:	str	r3, [sp, #28]
   16520:	ldr	r3, [sp, #40]	; 0x28
   16524:	cmn	r3, #1
   16528:	bne	170c8 <__assert_fail@plt+0x570c>
   1652c:	ldr	r2, [sp, #28]
   16530:	ldr	r3, [sp, #48]	; 0x30
   16534:	ldrb	r3, [r3, r2]
   16538:	adds	r3, r3, #0
   1653c:	movne	r3, #1
   16540:	str	r3, [sp, #36]	; 0x24
   16544:	ldr	r3, [sp, #36]	; 0x24
   16548:	cmp	r3, #0
   1654c:	bne	16758 <__assert_fail@plt+0x4d9c>
   16550:	sub	r3, sl, #2
   16554:	cmp	r4, #0
   16558:	clz	r3, r3
   1655c:	movne	r2, #0
   16560:	lsr	r3, r3, #5
   16564:	andeq	r2, r3, r7
   16568:	cmp	r2, #0
   1656c:	bne	1691c <__assert_fail@plt+0x4f60>
   16570:	eor	r7, r7, #1
   16574:	ands	r3, r3, r7
   16578:	beq	17140 <__assert_fail@plt+0x5784>
   1657c:	ldr	r2, [sp, #68]	; 0x44
   16580:	cmp	r2, #0
   16584:	beq	17108 <__assert_fail@plt+0x574c>
   16588:	ldr	r3, [sp, #72]	; 0x48
   1658c:	cmp	r3, #0
   16590:	beq	170dc <__assert_fail@plt+0x5720>
   16594:	ldr	r2, [sp, #48]	; 0x30
   16598:	ldr	r3, [sp, #160]	; 0xa0
   1659c:	ldr	r1, [sp, #60]	; 0x3c
   165a0:	str	r3, [sp, #16]
   165a4:	ldr	r3, [sp, #156]	; 0x9c
   165a8:	str	r3, [sp, #12]
   165ac:	ldr	r3, [sp, #152]	; 0x98
   165b0:	str	r3, [sp, #8]
   165b4:	ldr	r3, [sp, #148]	; 0x94
   165b8:	str	r3, [sp, #4]
   165bc:	mov	r3, #5
   165c0:	str	r3, [sp]
   165c4:	ldr	r3, [sp, #40]	; 0x28
   165c8:	mov	r0, r8
   165cc:	bl	16484 <__assert_fail@plt+0x4ac8>
   165d0:	mov	r4, r0
   165d4:	b	17134 <__assert_fail@plt+0x5778>
   165d8:	ldr	r3, [pc, #2948]	; 17164 <__assert_fail@plt+0x57a8>
   165dc:	mov	r7, #1
   165e0:	mov	r4, #0
   165e4:	mov	sl, #5
   165e8:	str	r7, [sp, #24]
   165ec:	str	r7, [sp, #32]
   165f0:	str	r3, [sp, #44]	; 0x2c
   165f4:	b	16510 <__assert_fail@plt+0x4b54>
   165f8:	cmp	r7, #0
   165fc:	bne	16740 <__assert_fail@plt+0x4d84>
   16600:	cmp	r5, #0
   16604:	mov	r4, #1
   16608:	movne	r3, #34	; 0x22
   1660c:	strbne	r3, [r8]
   16610:	mov	r3, #1
   16614:	str	r3, [sp, #24]
   16618:	str	r3, [sp, #32]
   1661c:	ldr	r3, [pc, #2880]	; 17164 <__assert_fail@plt+0x57a8>
   16620:	str	r3, [sp, #44]	; 0x2c
   16624:	b	16510 <__assert_fail@plt+0x4b54>
   16628:	cmp	sl, #10
   1662c:	beq	16650 <__assert_fail@plt+0x4c94>
   16630:	mov	r1, sl
   16634:	ldr	r0, [pc, #2860]	; 17168 <__assert_fail@plt+0x57ac>
   16638:	bl	16350 <__assert_fail@plt+0x4994>
   1663c:	mov	r1, sl
   16640:	str	r0, [sp, #156]	; 0x9c
   16644:	ldr	r0, [pc, #2848]	; 1716c <__assert_fail@plt+0x57b0>
   16648:	bl	16350 <__assert_fail@plt+0x4994>
   1664c:	str	r0, [sp, #160]	; 0xa0
   16650:	cmp	r7, #0
   16654:	moveq	r4, r7
   16658:	beq	16670 <__assert_fail@plt+0x4cb4>
   1665c:	mov	r4, #0
   16660:	b	16680 <__assert_fail@plt+0x4cc4>
   16664:	cmp	r5, r4
   16668:	strbhi	r3, [r8, r4]
   1666c:	add	r4, r4, #1
   16670:	ldr	r3, [sp, #156]	; 0x9c
   16674:	ldrb	r3, [r3, r4]
   16678:	cmp	r3, #0
   1667c:	bne	16664 <__assert_fail@plt+0x4ca8>
   16680:	ldr	r0, [sp, #160]	; 0xa0
   16684:	bl	117ac <strlen@plt>
   16688:	ldr	r3, [sp, #160]	; 0xa0
   1668c:	str	r0, [sp, #32]
   16690:	str	r3, [sp, #44]	; 0x2c
   16694:	mov	r3, #1
   16698:	str	r3, [sp, #24]
   1669c:	b	16510 <__assert_fail@plt+0x4b54>
   166a0:	mov	r3, #1
   166a4:	cmp	r7, #0
   166a8:	streq	r3, [sp, #24]
   166ac:	beq	166f0 <__assert_fail@plt+0x4d34>
   166b0:	str	r3, [sp, #32]
   166b4:	b	166dc <__assert_fail@plt+0x4d20>
   166b8:	cmp	r7, #0
   166bc:	beq	166f0 <__assert_fail@plt+0x4d34>
   166c0:	mov	r3, #1
   166c4:	str	r3, [sp, #32]
   166c8:	ldr	r3, [pc, #2716]	; 1716c <__assert_fail@plt+0x57b0>
   166cc:	b	16750 <__assert_fail@plt+0x4d94>
   166d0:	mov	r7, #1
   166d4:	str	r7, [sp, #24]
   166d8:	str	r7, [sp, #32]
   166dc:	ldr	r3, [pc, #2696]	; 1716c <__assert_fail@plt+0x57b0>
   166e0:	mov	r4, #0
   166e4:	str	r3, [sp, #44]	; 0x2c
   166e8:	mov	sl, #2
   166ec:	b	16510 <__assert_fail@plt+0x4b54>
   166f0:	cmp	r5, #0
   166f4:	movne	r3, #39	; 0x27
   166f8:	movne	r7, #0
   166fc:	strbne	r3, [r8]
   16700:	moveq	r7, r5
   16704:	mov	r3, #1
   16708:	mov	r4, #1
   1670c:	str	r3, [sp, #32]
   16710:	ldr	r3, [pc, #2644]	; 1716c <__assert_fail@plt+0x57b0>
   16714:	str	r3, [sp, #44]	; 0x2c
   16718:	b	166e8 <__assert_fail@plt+0x4d2c>
   1671c:	bl	11980 <abort@plt>
   16720:	mov	r3, #1
   16724:	mov	r7, #0
   16728:	str	r3, [sp, #24]
   1672c:	mov	r4, #0
   16730:	b	16510 <__assert_fail@plt+0x4b54>
   16734:	mov	r7, #1
   16738:	str	sl, [sp, #32]
   1673c:	b	166dc <__assert_fail@plt+0x4d20>
   16740:	mov	r3, #1
   16744:	str	r7, [sp, #24]
   16748:	str	r3, [sp, #32]
   1674c:	ldr	r3, [pc, #2576]	; 17164 <__assert_fail@plt+0x57a8>
   16750:	str	r3, [sp, #44]	; 0x2c
   16754:	b	1672c <__assert_fail@plt+0x4d70>
   16758:	ldr	fp, [sp, #24]
   1675c:	ldr	r3, [sp, #32]
   16760:	cmp	sl, #2
   16764:	moveq	fp, #0
   16768:	andne	fp, fp, #1
   1676c:	adds	r5, r3, #0
   16770:	movne	r5, #1
   16774:	ands	r3, fp, r5
   16778:	str	r3, [sp, #64]	; 0x40
   1677c:	beq	1684c <__assert_fail@plt+0x4e90>
   16780:	ldr	r3, [sp, #28]
   16784:	ldr	r2, [sp, #32]
   16788:	cmp	r2, #1
   1678c:	add	r6, r3, r2
   16790:	mov	r3, r2
   16794:	ldr	r2, [sp, #40]	; 0x28
   16798:	movls	r3, #0
   1679c:	movhi	r3, #1
   167a0:	cmn	r2, #1
   167a4:	movne	r3, #0
   167a8:	cmp	r3, #0
   167ac:	beq	167bc <__assert_fail@plt+0x4e00>
   167b0:	ldr	r0, [sp, #48]	; 0x30
   167b4:	bl	117ac <strlen@plt>
   167b8:	str	r0, [sp, #40]	; 0x28
   167bc:	ldr	r3, [sp, #40]	; 0x28
   167c0:	cmp	r6, r3
   167c4:	bhi	16844 <__assert_fail@plt+0x4e88>
   167c8:	ldr	r0, [sp, #28]
   167cc:	ldr	r2, [sp, #32]
   167d0:	ldr	r3, [sp, #48]	; 0x30
   167d4:	ldr	r1, [sp, #44]	; 0x2c
   167d8:	add	r0, r3, r0
   167dc:	bl	1162c <memcmp@plt>
   167e0:	cmp	r0, #0
   167e4:	bne	16844 <__assert_fail@plt+0x4e88>
   167e8:	cmp	r7, #0
   167ec:	beq	1684c <__assert_fail@plt+0x4e90>
   167f0:	str	r7, [sp, #24]
   167f4:	ldr	r3, [sp, #24]
   167f8:	mov	r1, r9
   167fc:	ldr	r2, [sp, #48]	; 0x30
   16800:	cmp	sl, #2
   16804:	movne	r3, #0
   16808:	andeq	r3, r3, #1
   1680c:	cmp	r3, #0
   16810:	ldr	r3, [sp, #160]	; 0xa0
   16814:	movne	sl, #4
   16818:	str	sl, [sp]
   1681c:	str	r3, [sp, #16]
   16820:	ldr	r3, [sp, #156]	; 0x9c
   16824:	str	r3, [sp, #12]
   16828:	mov	r3, #0
   1682c:	str	r3, [sp, #8]
   16830:	ldr	r3, [sp, #148]	; 0x94
   16834:	bic	r3, r3, #2
   16838:	str	r3, [sp, #4]
   1683c:	ldr	r3, [sp, #40]	; 0x28
   16840:	b	165c8 <__assert_fail@plt+0x4c0c>
   16844:	mov	r3, #0
   16848:	str	r3, [sp, #64]	; 0x40
   1684c:	ldr	r2, [sp, #28]
   16850:	ldr	r3, [sp, #48]	; 0x30
   16854:	add	r3, r3, r2
   16858:	str	r3, [sp, #80]	; 0x50
   1685c:	ldr	r3, [sp, #48]	; 0x30
   16860:	ldrb	r6, [r3, r2]
   16864:	cmp	r6, #58	; 0x3a
   16868:	bhi	169cc <__assert_fail@plt+0x5010>
   1686c:	cmp	r6, #43	; 0x2b
   16870:	bcs	16b8c <__assert_fail@plt+0x51d0>
   16874:	cmp	r6, #32
   16878:	beq	16be0 <__assert_fail@plt+0x5224>
   1687c:	bhi	16924 <__assert_fail@plt+0x4f68>
   16880:	cmp	r6, #9
   16884:	beq	16d88 <__assert_fail@plt+0x53cc>
   16888:	bhi	168e8 <__assert_fail@plt+0x4f2c>
   1688c:	cmp	r6, #7
   16890:	beq	16d98 <__assert_fail@plt+0x53dc>
   16894:	bhi	16db4 <__assert_fail@plt+0x53f8>
   16898:	cmp	r6, #0
   1689c:	beq	16bfc <__assert_fail@plt+0x5240>
   168a0:	ldr	r3, [sp, #76]	; 0x4c
   168a4:	cmp	r3, #1
   168a8:	bne	16e00 <__assert_fail@plt+0x5444>
   168ac:	bl	1177c <__ctype_b_loc@plt>
   168b0:	ldr	r2, [r0]
   168b4:	sxth	r3, r6
   168b8:	lsl	r3, r3, #1
   168bc:	ldrh	r5, [r2, r3]
   168c0:	ldr	r3, [sp, #76]	; 0x4c
   168c4:	ubfx	r5, r5, #14, #1
   168c8:	str	r3, [sp, #56]	; 0x38
   168cc:	ldr	r3, [sp, #24]
   168d0:	eor	fp, r5, #1
   168d4:	and	fp, fp, r3
   168d8:	ands	fp, fp, #255	; 0xff
   168dc:	beq	16abc <__assert_fail@plt+0x5100>
   168e0:	mov	r5, #0
   168e4:	b	16eac <__assert_fail@plt+0x54f0>
   168e8:	cmp	r6, #11
   168ec:	beq	16dbc <__assert_fail@plt+0x5400>
   168f0:	bcc	16d90 <__assert_fail@plt+0x53d4>
   168f4:	cmp	r6, #12
   168f8:	beq	16dc4 <__assert_fail@plt+0x5408>
   168fc:	cmp	r6, #13
   16900:	moveq	r3, #114	; 0x72
   16904:	bne	168a0 <__assert_fail@plt+0x4ee4>
   16908:	cmp	sl, #2
   1690c:	movne	r2, #0
   16910:	andeq	r2, r7, #1
   16914:	cmp	r2, #0
   16918:	beq	16d9c <__assert_fail@plt+0x53e0>
   1691c:	mov	sl, #2
   16920:	b	167f4 <__assert_fail@plt+0x4e38>
   16924:	cmp	r6, #37	; 0x25
   16928:	beq	16b8c <__assert_fail@plt+0x51d0>
   1692c:	bhi	16940 <__assert_fail@plt+0x4f84>
   16930:	cmp	r6, #35	; 0x23
   16934:	beq	16bd4 <__assert_fail@plt+0x5218>
   16938:	mov	r5, #0
   1693c:	b	16be4 <__assert_fail@plt+0x5228>
   16940:	cmp	r6, #39	; 0x27
   16944:	bne	16938 <__assert_fail@plt+0x4f7c>
   16948:	cmp	sl, #2
   1694c:	ldrne	r5, [sp, #36]	; 0x24
   16950:	movne	r3, r5
   16954:	strne	r3, [sp, #68]	; 0x44
   16958:	bne	16cd8 <__assert_fail@plt+0x531c>
   1695c:	cmp	r7, #0
   16960:	bne	167f4 <__assert_fail@plt+0x4e38>
   16964:	ldr	r3, [sp, #60]	; 0x3c
   16968:	cmp	r9, #0
   1696c:	clz	r3, r3
   16970:	lsr	r3, r3, #5
   16974:	moveq	r3, #0
   16978:	cmp	r3, #0
   1697c:	strne	r9, [sp, #60]	; 0x3c
   16980:	movne	r9, #0
   16984:	bne	16994 <__assert_fail@plt+0x4fd8>
   16988:	cmp	r9, r4
   1698c:	movhi	r3, #39	; 0x27
   16990:	strbhi	r3, [r8, r4]
   16994:	add	r3, r4, #1
   16998:	ldr	r5, [sp, #36]	; 0x24
   1699c:	mov	fp, #0
   169a0:	cmp	r3, r9
   169a4:	movcc	r2, #92	; 0x5c
   169a8:	str	fp, [sp, #52]	; 0x34
   169ac:	strbcc	r2, [r8, r3]
   169b0:	add	r3, r4, #2
   169b4:	add	r4, r4, #3
   169b8:	cmp	r3, r9
   169bc:	str	r5, [sp, #68]	; 0x44
   169c0:	movcc	r2, #39	; 0x27
   169c4:	strbcc	r2, [r8, r3]
   169c8:	b	16abc <__assert_fail@plt+0x5100>
   169cc:	cmp	r6, #94	; 0x5e
   169d0:	beq	16938 <__assert_fail@plt+0x4f7c>
   169d4:	bhi	16b94 <__assert_fail@plt+0x51d8>
   169d8:	cmp	r6, #90	; 0x5a
   169dc:	bhi	16b80 <__assert_fail@plt+0x51c4>
   169e0:	cmp	r6, #65	; 0x41
   169e4:	bcs	16b8c <__assert_fail@plt+0x51d0>
   169e8:	cmp	r6, #62	; 0x3e
   169ec:	bls	16938 <__assert_fail@plt+0x4f7c>
   169f0:	cmp	r6, #63	; 0x3f
   169f4:	bne	168a0 <__assert_fail@plt+0x4ee4>
   169f8:	cmp	sl, #2
   169fc:	beq	16ce0 <__assert_fail@plt+0x5324>
   16a00:	cmp	sl, #5
   16a04:	movne	fp, #0
   16a08:	bne	170b0 <__assert_fail@plt+0x56f4>
   16a0c:	ldr	r3, [sp, #148]	; 0x94
   16a10:	tst	r3, #4
   16a14:	beq	16ce8 <__assert_fail@plt+0x532c>
   16a18:	ldr	r3, [sp, #28]
   16a1c:	add	r2, r3, #2
   16a20:	ldr	r3, [sp, #40]	; 0x28
   16a24:	cmp	r2, r3
   16a28:	bcs	16ce8 <__assert_fail@plt+0x532c>
   16a2c:	ldr	r1, [sp, #28]
   16a30:	ldr	r3, [sp, #48]	; 0x30
   16a34:	add	r3, r3, r1
   16a38:	ldrb	r1, [r3, #1]
   16a3c:	cmp	r1, #63	; 0x3f
   16a40:	bne	16ce8 <__assert_fail@plt+0x532c>
   16a44:	ldr	r3, [sp, #48]	; 0x30
   16a48:	ldrb	r6, [r3, r2]
   16a4c:	sub	r3, r6, #33	; 0x21
   16a50:	uxtb	r3, r3
   16a54:	cmp	r3, #29
   16a58:	bhi	170b8 <__assert_fail@plt+0x56fc>
   16a5c:	ldr	r0, [pc, #1804]	; 17170 <__assert_fail@plt+0x57b4>
   16a60:	mov	r5, #1
   16a64:	ands	r5, r0, r5, lsl r3
   16a68:	beq	170c0 <__assert_fail@plt+0x5704>
   16a6c:	cmp	r7, #0
   16a70:	bne	167f4 <__assert_fail@plt+0x4e38>
   16a74:	cmp	r9, r4
   16a78:	add	r3, r4, #1
   16a7c:	str	r2, [sp, #28]
   16a80:	mov	r5, #0
   16a84:	strbhi	r1, [r8, r4]
   16a88:	cmp	r9, r3
   16a8c:	mov	fp, r5
   16a90:	movhi	r1, #34	; 0x22
   16a94:	strbhi	r1, [r8, r3]
   16a98:	add	r3, r4, #2
   16a9c:	cmp	r9, r3
   16aa0:	movhi	r1, #34	; 0x22
   16aa4:	strbhi	r1, [r8, r3]
   16aa8:	add	r3, r4, #3
   16aac:	add	r4, r4, #4
   16ab0:	cmp	r9, r3
   16ab4:	movhi	r1, #63	; 0x3f
   16ab8:	strbhi	r1, [r8, r3]
   16abc:	ldr	r3, [sp, #24]
   16ac0:	eor	r3, r3, #1
   16ac4:	cmp	sl, #2
   16ac8:	orreq	r3, r3, #1
   16acc:	eor	r3, r3, #1
   16ad0:	orr	r3, r7, r3
   16ad4:	tst	r3, #255	; 0xff
   16ad8:	beq	16b04 <__assert_fail@plt+0x5148>
   16adc:	ldr	r3, [sp, #152]	; 0x98
   16ae0:	cmp	r3, #0
   16ae4:	beq	16b04 <__assert_fail@plt+0x5148>
   16ae8:	ldr	r1, [sp, #152]	; 0x98
   16aec:	ubfx	r2, r6, #5, #8
   16af0:	and	r3, r6, #31
   16af4:	ldr	r2, [r1, r2, lsl #2]
   16af8:	lsr	r3, r2, r3
   16afc:	tst	r3, #1
   16b00:	bne	16b10 <__assert_fail@plt+0x5154>
   16b04:	ldr	r3, [sp, #64]	; 0x40
   16b08:	cmp	r3, #0
   16b0c:	beq	16d08 <__assert_fail@plt+0x534c>
   16b10:	sub	r3, sl, #2
   16b14:	cmp	r7, #0
   16b18:	clz	r3, r3
   16b1c:	lsr	r3, r3, #5
   16b20:	bne	167f4 <__assert_fail@plt+0x4e38>
   16b24:	ldr	r2, [sp, #52]	; 0x34
   16b28:	eor	r2, r2, #1
   16b2c:	ands	r3, r3, r2
   16b30:	beq	16b68 <__assert_fail@plt+0x51ac>
   16b34:	cmp	r9, r4
   16b38:	str	r3, [sp, #52]	; 0x34
   16b3c:	movhi	r2, #39	; 0x27
   16b40:	strbhi	r2, [r8, r4]
   16b44:	add	r2, r4, #1
   16b48:	cmp	r9, r2
   16b4c:	movhi	r1, #36	; 0x24
   16b50:	strbhi	r1, [r8, r2]
   16b54:	add	r2, r4, #2
   16b58:	add	r4, r4, #3
   16b5c:	cmp	r9, r2
   16b60:	movhi	r1, #39	; 0x27
   16b64:	strbhi	r1, [r8, r2]
   16b68:	cmp	r9, r4
   16b6c:	ldr	fp, [sp, #36]	; 0x24
   16b70:	movhi	r3, #92	; 0x5c
   16b74:	strbhi	r3, [r8, r4]
   16b78:	add	r4, r4, #1
   16b7c:	b	16d08 <__assert_fail@plt+0x534c>
   16b80:	cmp	r6, #92	; 0x5c
   16b84:	beq	16cf0 <__assert_fail@plt+0x5334>
   16b88:	bls	16938 <__assert_fail@plt+0x4f7c>
   16b8c:	ldr	r5, [sp, #36]	; 0x24
   16b90:	b	16cd8 <__assert_fail@plt+0x531c>
   16b94:	cmp	r6, #122	; 0x7a
   16b98:	bhi	16bb8 <__assert_fail@plt+0x51fc>
   16b9c:	cmp	r6, #97	; 0x61
   16ba0:	bcs	16b8c <__assert_fail@plt+0x51d0>
   16ba4:	cmp	r6, #95	; 0x5f
   16ba8:	beq	16b8c <__assert_fail@plt+0x51d0>
   16bac:	cmp	r6, #96	; 0x60
   16bb0:	bne	168a0 <__assert_fail@plt+0x4ee4>
   16bb4:	b	16938 <__assert_fail@plt+0x4f7c>
   16bb8:	cmp	r6, #124	; 0x7c
   16bbc:	beq	16938 <__assert_fail@plt+0x4f7c>
   16bc0:	bcc	16dcc <__assert_fail@plt+0x5410>
   16bc4:	cmp	r6, #125	; 0x7d
   16bc8:	beq	16dcc <__assert_fail@plt+0x5410>
   16bcc:	cmp	r6, #126	; 0x7e
   16bd0:	bne	168a0 <__assert_fail@plt+0x4ee4>
   16bd4:	ldr	r3, [sp, #28]
   16bd8:	cmp	r3, #0
   16bdc:	bne	16ce8 <__assert_fail@plt+0x532c>
   16be0:	ldr	r5, [sp, #36]	; 0x24
   16be4:	cmp	sl, #2
   16be8:	movne	fp, #0
   16bec:	andeq	fp, r7, #1
   16bf0:	cmp	fp, #0
   16bf4:	beq	16abc <__assert_fail@plt+0x5100>
   16bf8:	b	1691c <__assert_fail@plt+0x4f60>
   16bfc:	ldr	r3, [sp, #24]
   16c00:	cmp	r3, #0
   16c04:	beq	16ccc <__assert_fail@plt+0x5310>
   16c08:	sub	r2, sl, #2
   16c0c:	cmp	r7, #0
   16c10:	clz	r2, r2
   16c14:	lsr	r2, r2, #5
   16c18:	bne	167f0 <__assert_fail@plt+0x4e34>
   16c1c:	ldr	r3, [sp, #52]	; 0x34
   16c20:	eor	r3, r3, #1
   16c24:	ands	r2, r2, r3
   16c28:	moveq	r3, r4
   16c2c:	beq	16c64 <__assert_fail@plt+0x52a8>
   16c30:	cmp	r9, r4
   16c34:	str	r2, [sp, #52]	; 0x34
   16c38:	movhi	r3, #39	; 0x27
   16c3c:	strbhi	r3, [r8, r4]
   16c40:	add	r3, r4, #1
   16c44:	cmp	r9, r3
   16c48:	movhi	r1, #36	; 0x24
   16c4c:	strbhi	r1, [r8, r3]
   16c50:	add	r3, r4, #2
   16c54:	cmp	r9, r3
   16c58:	movhi	r1, #39	; 0x27
   16c5c:	strbhi	r1, [r8, r3]
   16c60:	add	r3, r4, #3
   16c64:	cmp	r9, r3
   16c68:	add	r4, r3, #1
   16c6c:	movhi	r2, #92	; 0x5c
   16c70:	strbhi	r2, [r8, r3]
   16c74:	cmp	fp, #0
   16c78:	beq	170a0 <__assert_fail@plt+0x56e4>
   16c7c:	ldr	r2, [sp, #28]
   16c80:	ldr	r1, [sp, #40]	; 0x28
   16c84:	add	r2, r2, #1
   16c88:	cmp	r2, r1
   16c8c:	bcs	16cc4 <__assert_fail@plt+0x5308>
   16c90:	ldr	r1, [sp, #48]	; 0x30
   16c94:	mov	r6, #48	; 0x30
   16c98:	ldrb	r2, [r1, r2]
   16c9c:	sub	r2, r2, #48	; 0x30
   16ca0:	cmp	r2, #9
   16ca4:	bhi	170b0 <__assert_fail@plt+0x56f4>
   16ca8:	cmp	r9, r4
   16cac:	add	r2, r3, #2
   16cb0:	strbhi	r6, [r8, r4]
   16cb4:	cmp	r9, r2
   16cb8:	add	r4, r3, #3
   16cbc:	movhi	r1, #48	; 0x30
   16cc0:	strbhi	r1, [r8, r2]
   16cc4:	mov	r5, #0
   16cc8:	b	170a8 <__assert_fail@plt+0x56ec>
   16ccc:	ldr	r3, [sp, #148]	; 0x94
   16cd0:	ands	r5, r3, #1
   16cd4:	bne	16d5c <__assert_fail@plt+0x53a0>
   16cd8:	mov	fp, #0
   16cdc:	b	16abc <__assert_fail@plt+0x5100>
   16ce0:	cmp	r7, #0
   16ce4:	bne	167f4 <__assert_fail@plt+0x4e38>
   16ce8:	mov	r5, #0
   16cec:	b	16cd8 <__assert_fail@plt+0x531c>
   16cf0:	cmp	sl, #2
   16cf4:	bne	16d68 <__assert_fail@plt+0x53ac>
   16cf8:	cmp	r7, #0
   16cfc:	bne	167f4 <__assert_fail@plt+0x4e38>
   16d00:	mov	r5, r7
   16d04:	mov	fp, r7
   16d08:	ldr	r3, [sp, #52]	; 0x34
   16d0c:	eor	fp, fp, #1
   16d10:	tst	r3, fp
   16d14:	beq	16d40 <__assert_fail@plt+0x5384>
   16d18:	cmp	r9, r4
   16d1c:	movhi	r3, #39	; 0x27
   16d20:	strbhi	r3, [r8, r4]
   16d24:	add	r3, r4, #1
   16d28:	add	r4, r4, #2
   16d2c:	cmp	r9, r3
   16d30:	movhi	r2, #39	; 0x27
   16d34:	strbhi	r2, [r8, r3]
   16d38:	mov	r3, #0
   16d3c:	str	r3, [sp, #52]	; 0x34
   16d40:	cmp	r9, r4
   16d44:	ldr	r3, [sp, #72]	; 0x48
   16d48:	strbhi	r6, [r8, r4]
   16d4c:	cmp	r5, #0
   16d50:	add	r4, r4, #1
   16d54:	moveq	r3, #0
   16d58:	str	r3, [sp, #72]	; 0x48
   16d5c:	ldr	r3, [sp, #28]
   16d60:	add	r3, r3, #1
   16d64:	b	1651c <__assert_fail@plt+0x4b60>
   16d68:	ldr	r3, [sp, #24]
   16d6c:	and	r3, r3, r7
   16d70:	tst	r5, r3
   16d74:	moveq	r3, r6
   16d78:	beq	16908 <__assert_fail@plt+0x4f4c>
   16d7c:	mov	fp, #0
   16d80:	mov	r5, fp
   16d84:	b	16d08 <__assert_fail@plt+0x534c>
   16d88:	mov	r3, #116	; 0x74
   16d8c:	b	16908 <__assert_fail@plt+0x4f4c>
   16d90:	mov	r3, #110	; 0x6e
   16d94:	b	16908 <__assert_fail@plt+0x4f4c>
   16d98:	mov	r3, #97	; 0x61
   16d9c:	ldr	r2, [sp, #24]
   16da0:	cmp	r2, #0
   16da4:	beq	16ce8 <__assert_fail@plt+0x532c>
   16da8:	mov	r6, r3
   16dac:	mov	r5, #0
   16db0:	b	16b10 <__assert_fail@plt+0x5154>
   16db4:	mov	r3, #98	; 0x62
   16db8:	b	16d9c <__assert_fail@plt+0x53e0>
   16dbc:	mov	r3, #118	; 0x76
   16dc0:	b	16d9c <__assert_fail@plt+0x53e0>
   16dc4:	mov	r3, #102	; 0x66
   16dc8:	b	16d9c <__assert_fail@plt+0x53e0>
   16dcc:	ldr	r3, [sp, #40]	; 0x28
   16dd0:	cmn	r3, #1
   16dd4:	bne	16df4 <__assert_fail@plt+0x5438>
   16dd8:	ldr	r3, [sp, #48]	; 0x30
   16ddc:	ldrb	r3, [r3, #1]
   16de0:	adds	r3, r3, #0
   16de4:	movne	r3, #1
   16de8:	cmp	r3, #0
   16dec:	bne	16ce8 <__assert_fail@plt+0x532c>
   16df0:	b	16bd4 <__assert_fail@plt+0x5218>
   16df4:	ldr	r3, [sp, #40]	; 0x28
   16df8:	subs	r3, r3, #1
   16dfc:	b	16de4 <__assert_fail@plt+0x5428>
   16e00:	mov	r3, #0
   16e04:	mov	r2, #0
   16e08:	strd	r2, [sp, #96]	; 0x60
   16e0c:	ldr	r3, [sp, #40]	; 0x28
   16e10:	cmn	r3, #1
   16e14:	bne	16e24 <__assert_fail@plt+0x5468>
   16e18:	ldr	r0, [sp, #48]	; 0x30
   16e1c:	bl	117ac <strlen@plt>
   16e20:	str	r0, [sp, #40]	; 0x28
   16e24:	ldr	r5, [sp, #36]	; 0x24
   16e28:	mov	r3, #0
   16e2c:	str	r3, [sp, #56]	; 0x38
   16e30:	ldr	r3, [sp, #28]
   16e34:	add	r0, sp, #92	; 0x5c
   16e38:	ldr	r1, [sp, #40]	; 0x28
   16e3c:	ldr	r2, [sp, #56]	; 0x38
   16e40:	add	r2, r3, r2
   16e44:	ldr	r3, [sp, #48]	; 0x30
   16e48:	add	fp, r3, r2
   16e4c:	sub	r2, r1, r2
   16e50:	add	r3, sp, #96	; 0x60
   16e54:	mov	r1, fp
   16e58:	bl	1886c <__assert_fail@plt+0x6eb0>
   16e5c:	subs	r2, r0, #0
   16e60:	beq	16ea0 <__assert_fail@plt+0x54e4>
   16e64:	cmn	r2, #1
   16e68:	beq	17074 <__assert_fail@plt+0x56b8>
   16e6c:	cmn	r2, #2
   16e70:	bne	16fe4 <__assert_fail@plt+0x5628>
   16e74:	ldr	r3, [sp, #28]
   16e78:	ldr	r2, [sp, #56]	; 0x38
   16e7c:	add	r3, r3, r2
   16e80:	ldr	r2, [sp, #40]	; 0x28
   16e84:	cmp	r2, r3
   16e88:	bls	17074 <__assert_fail@plt+0x56b8>
   16e8c:	ldr	r2, [sp, #56]	; 0x38
   16e90:	ldr	r3, [sp, #80]	; 0x50
   16e94:	ldrb	r5, [r3, r2]
   16e98:	cmp	r5, #0
   16e9c:	bne	16fd4 <__assert_fail@plt+0x5618>
   16ea0:	ldr	r3, [sp, #56]	; 0x38
   16ea4:	cmp	r3, #1
   16ea8:	bls	168cc <__assert_fail@plt+0x4f10>
   16eac:	ldr	r3, [sp, #28]
   16eb0:	mov	fp, #0
   16eb4:	mov	ip, #92	; 0x5c
   16eb8:	ldr	r2, [sp, #56]	; 0x38
   16ebc:	add	r3, r3, r2
   16ec0:	ldr	r2, [sp, #24]
   16ec4:	str	r3, [sp, #36]	; 0x24
   16ec8:	eor	r3, r5, #1
   16ecc:	and	r3, r3, r2
   16ed0:	mov	r2, #39	; 0x27
   16ed4:	uxtb	r3, r3
   16ed8:	cmp	r3, #0
   16edc:	beq	1707c <__assert_fail@plt+0x56c0>
   16ee0:	sub	r0, sl, #2
   16ee4:	cmp	r7, #0
   16ee8:	clz	r0, r0
   16eec:	lsr	r0, r0, #5
   16ef0:	bne	167f0 <__assert_fail@plt+0x4e34>
   16ef4:	ldr	r1, [sp, #52]	; 0x34
   16ef8:	eor	r1, r1, #1
   16efc:	ands	r1, r0, r1
   16f00:	beq	16f30 <__assert_fail@plt+0x5574>
   16f04:	cmp	r9, r4
   16f08:	add	r0, r4, #1
   16f0c:	str	r1, [sp, #52]	; 0x34
   16f10:	strbhi	r2, [r8, r4]
   16f14:	cmp	r9, r0
   16f18:	movhi	lr, #36	; 0x24
   16f1c:	strbhi	lr, [r8, r0]
   16f20:	add	r0, r4, #2
   16f24:	add	r4, r4, #3
   16f28:	cmp	r9, r0
   16f2c:	strbhi	r2, [r8, r0]
   16f30:	cmp	r9, r4
   16f34:	add	r0, r4, #1
   16f38:	mov	fp, r3
   16f3c:	strbhi	ip, [r8, r4]
   16f40:	cmp	r9, r0
   16f44:	lsrhi	r1, r6, #6
   16f48:	addhi	r1, r1, #48	; 0x30
   16f4c:	strbhi	r1, [r8, r0]
   16f50:	add	r0, r4, #2
   16f54:	add	r4, r4, #3
   16f58:	cmp	r9, r0
   16f5c:	ubfxhi	r1, r6, #3, #3
   16f60:	and	r6, r6, #7
   16f64:	add	r6, r6, #48	; 0x30
   16f68:	addhi	r1, r1, #48	; 0x30
   16f6c:	strbhi	r1, [r8, r0]
   16f70:	eor	r0, fp, #1
   16f74:	ldr	r1, [sp, #28]
   16f78:	ldr	lr, [sp, #52]	; 0x34
   16f7c:	add	r1, r1, #1
   16f80:	and	r0, r0, lr
   16f84:	ldr	lr, [sp, #36]	; 0x24
   16f88:	cmp	r1, lr
   16f8c:	bcs	16d08 <__assert_fail@plt+0x534c>
   16f90:	cmp	r0, #0
   16f94:	beq	16fb8 <__assert_fail@plt+0x55fc>
   16f98:	cmp	r9, r4
   16f9c:	add	r0, r4, #1
   16fa0:	strbhi	r2, [r8, r4]
   16fa4:	cmp	r9, r0
   16fa8:	add	r4, r4, #2
   16fac:	strbhi	r2, [r8, r0]
   16fb0:	mov	r0, #0
   16fb4:	str	r0, [sp, #52]	; 0x34
   16fb8:	ldr	r0, [sp, #48]	; 0x30
   16fbc:	cmp	r9, r4
   16fc0:	str	r1, [sp, #28]
   16fc4:	strbhi	r6, [r8, r4]
   16fc8:	add	r4, r4, #1
   16fcc:	ldrb	r6, [r0, r1]
   16fd0:	b	16ed8 <__assert_fail@plt+0x551c>
   16fd4:	ldr	r3, [sp, #56]	; 0x38
   16fd8:	add	r3, r3, #1
   16fdc:	str	r3, [sp, #56]	; 0x38
   16fe0:	b	16e74 <__assert_fail@plt+0x54b8>
   16fe4:	cmp	sl, #2
   16fe8:	movne	r3, #0
   16fec:	andeq	r3, r7, #1
   16ff0:	cmp	r3, #0
   16ff4:	movne	r1, #1
   16ff8:	bne	17054 <__assert_fail@plt+0x5698>
   16ffc:	ldr	r0, [sp, #92]	; 0x5c
   17000:	str	r2, [sp, #84]	; 0x54
   17004:	bl	11674 <iswprint@plt>
   17008:	ldr	r3, [sp, #56]	; 0x38
   1700c:	cmp	r0, #0
   17010:	add	r0, sp, #96	; 0x60
   17014:	moveq	r5, #0
   17018:	ldr	r2, [sp, #84]	; 0x54
   1701c:	add	r3, r3, r2
   17020:	str	r3, [sp, #56]	; 0x38
   17024:	bl	11614 <mbsinit@plt>
   17028:	cmp	r0, #0
   1702c:	beq	16e30 <__assert_fail@plt+0x5474>
   17030:	b	16ea0 <__assert_fail@plt+0x54e4>
   17034:	ldrb	r3, [fp, #1]!
   17038:	cmp	r3, #94	; 0x5e
   1703c:	beq	1691c <__assert_fail@plt+0x4f60>
   17040:	bhi	17060 <__assert_fail@plt+0x56a4>
   17044:	sub	r3, r3, #91	; 0x5b
   17048:	cmp	r3, #1
   1704c:	bls	1691c <__assert_fail@plt+0x4f60>
   17050:	add	r1, r1, #1
   17054:	cmp	r1, r2
   17058:	bne	17034 <__assert_fail@plt+0x5678>
   1705c:	b	16ffc <__assert_fail@plt+0x5640>
   17060:	cmp	r3, #96	; 0x60
   17064:	beq	1691c <__assert_fail@plt+0x4f60>
   17068:	cmp	r3, #124	; 0x7c
   1706c:	bne	17050 <__assert_fail@plt+0x5694>
   17070:	b	1691c <__assert_fail@plt+0x4f60>
   17074:	mov	r5, #0
   17078:	b	16ea0 <__assert_fail@plt+0x54e4>
   1707c:	ldr	r1, [sp, #64]	; 0x40
   17080:	cmp	r1, #0
   17084:	beq	16f70 <__assert_fail@plt+0x55b4>
   17088:	cmp	r9, r4
   1708c:	mov	r1, #0
   17090:	strbhi	ip, [r8, r4]
   17094:	add	r4, r4, #1
   17098:	str	r1, [sp, #64]	; 0x40
   1709c:	b	16f70 <__assert_fail@plt+0x55b4>
   170a0:	mov	r5, fp
   170a4:	ldr	fp, [sp, #24]
   170a8:	mov	r6, #48	; 0x30
   170ac:	b	16abc <__assert_fail@plt+0x5100>
   170b0:	mov	r5, #0
   170b4:	b	16abc <__assert_fail@plt+0x5100>
   170b8:	mov	r6, r1
   170bc:	b	16ce8 <__assert_fail@plt+0x532c>
   170c0:	mov	r6, r1
   170c4:	b	16cd8 <__assert_fail@plt+0x531c>
   170c8:	ldr	r2, [sp, #28]
   170cc:	ldr	r3, [sp, #40]	; 0x28
   170d0:	subs	r3, r3, r2
   170d4:	movne	r3, #1
   170d8:	b	16540 <__assert_fail@plt+0x4b84>
   170dc:	ldr	r3, [sp, #60]	; 0x3c
   170e0:	mov	sl, #2
   170e4:	ldr	r7, [sp, #72]	; 0x48
   170e8:	adds	r6, r3, #0
   170ec:	mov	r5, r3
   170f0:	movne	r6, #1
   170f4:	cmp	r9, #0
   170f8:	movne	r6, #0
   170fc:	cmp	r6, #0
   17100:	bne	164d0 <__assert_fail@plt+0x4b14>
   17104:	ldr	r3, [sp, #68]	; 0x44
   17108:	ldr	r2, [sp, #44]	; 0x2c
   1710c:	cmp	r2, #0
   17110:	moveq	r3, #0
   17114:	andne	r3, r3, #1
   17118:	cmp	r3, #0
   1711c:	movne	r3, r2
   17120:	subne	r3, r3, #1
   17124:	bne	17154 <__assert_fail@plt+0x5798>
   17128:	cmp	r9, r4
   1712c:	movhi	r3, #0
   17130:	strbhi	r3, [r8, r4]
   17134:	mov	r0, r4
   17138:	add	sp, sp, #108	; 0x6c
   1713c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17140:	mov	r3, r7
   17144:	b	17108 <__assert_fail@plt+0x574c>
   17148:	cmp	r9, r4
   1714c:	strbhi	r2, [r8, r4]
   17150:	add	r4, r4, #1
   17154:	ldrb	r2, [r3, #1]!
   17158:	cmp	r2, #0
   1715c:	bne	17148 <__assert_fail@plt+0x578c>
   17160:	b	17128 <__assert_fail@plt+0x576c>
   17164:	andeq	r6, r2, r4, lsl r7
   17168:	andeq	r6, r2, r5, lsr #14
   1716c:	andeq	r5, r2, r6, asr pc
   17170:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17178:	sub	sp, sp, #52	; 0x34
   1717c:	mov	r6, r0
   17180:	mov	r5, r3
   17184:	mov	r8, r1
   17188:	mov	r9, r2
   1718c:	bl	117dc <__errno_location@plt>
   17190:	ldr	r3, [r0]
   17194:	cmn	r6, #-2147483647	; 0x80000001
   17198:	str	r0, [sp, #24]
   1719c:	ldr	r7, [pc, #368]	; 17314 <__assert_fail@plt+0x5958>
   171a0:	str	r3, [sp, #32]
   171a4:	movne	r3, #0
   171a8:	moveq	r3, #1
   171ac:	orrs	r3, r3, r6, lsr #31
   171b0:	ldr	r4, [r7]
   171b4:	beq	171bc <__assert_fail@plt+0x5800>
   171b8:	bl	11980 <abort@plt>
   171bc:	ldr	r2, [r7, #4]
   171c0:	cmp	r2, r6
   171c4:	bgt	17234 <__assert_fail@plt+0x5878>
   171c8:	add	sl, r7, #8
   171cc:	mov	r3, #8
   171d0:	cmp	r4, sl
   171d4:	add	r1, sp, #44	; 0x2c
   171d8:	str	r2, [sp, #44]	; 0x2c
   171dc:	sub	r2, r6, r2
   171e0:	movne	r0, r4
   171e4:	moveq	r0, #0
   171e8:	add	r2, r2, #1
   171ec:	str	r3, [sp]
   171f0:	mvn	r3, #-2147483648	; 0x80000000
   171f4:	bl	17ea4 <__assert_fail@plt+0x64e8>
   171f8:	cmp	r4, sl
   171fc:	mov	fp, r0
   17200:	str	r0, [r7]
   17204:	ldmeq	r4, {r0, r1}
   17208:	mov	r4, fp
   1720c:	ldr	r2, [sp, #44]	; 0x2c
   17210:	stmeq	fp, {r0, r1}
   17214:	mov	r1, #0
   17218:	ldr	r0, [r7, #4]
   1721c:	sub	r2, r2, r0
   17220:	add	r0, fp, r0, lsl #3
   17224:	lsl	r2, r2, #3
   17228:	bl	11818 <memset@plt>
   1722c:	ldr	r3, [sp, #44]	; 0x2c
   17230:	str	r3, [r7, #4]
   17234:	ldr	r3, [r5, #4]
   17238:	add	sl, r4, r6, lsl #3
   1723c:	mov	r2, r8
   17240:	ldr	fp, [r4, r6, lsl #3]
   17244:	ldr	r7, [sl, #4]
   17248:	orr	r3, r3, #1
   1724c:	str	r3, [sp, #28]
   17250:	add	r3, r5, #8
   17254:	mov	r1, fp
   17258:	str	r3, [sp, #36]	; 0x24
   1725c:	mov	r0, r7
   17260:	ldr	r3, [r5, #44]	; 0x2c
   17264:	str	r3, [sp, #16]
   17268:	ldr	r3, [r5, #40]	; 0x28
   1726c:	str	r3, [sp, #12]
   17270:	add	r3, r5, #8
   17274:	str	r3, [sp, #8]
   17278:	ldr	r3, [sp, #28]
   1727c:	str	r3, [sp, #4]
   17280:	ldr	r3, [r5]
   17284:	str	r3, [sp]
   17288:	mov	r3, r9
   1728c:	bl	16484 <__assert_fail@plt+0x4ac8>
   17290:	cmp	fp, r0
   17294:	bhi	172fc <__assert_fail@plt+0x5940>
   17298:	ldr	r3, [pc, #120]	; 17318 <__assert_fail@plt+0x595c>
   1729c:	add	fp, r0, #1
   172a0:	str	fp, [r4, r6, lsl #3]
   172a4:	cmp	r7, r3
   172a8:	beq	172b4 <__assert_fail@plt+0x58f8>
   172ac:	mov	r0, r7
   172b0:	bl	18758 <__assert_fail@plt+0x6d9c>
   172b4:	mov	r0, fp
   172b8:	bl	17d94 <__assert_fail@plt+0x63d8>
   172bc:	ldr	r3, [r5, #44]	; 0x2c
   172c0:	mov	r2, r8
   172c4:	mov	r1, fp
   172c8:	str	r0, [sl, #4]
   172cc:	mov	r7, r0
   172d0:	str	r3, [sp, #16]
   172d4:	ldr	r3, [r5, #40]	; 0x28
   172d8:	str	r3, [sp, #12]
   172dc:	add	r3, r5, #8
   172e0:	str	r3, [sp, #8]
   172e4:	ldr	r3, [sp, #28]
   172e8:	str	r3, [sp, #4]
   172ec:	ldr	r3, [r5]
   172f0:	str	r3, [sp]
   172f4:	mov	r3, r9
   172f8:	bl	16484 <__assert_fail@plt+0x4ac8>
   172fc:	ldr	r3, [sp, #24]
   17300:	mov	r0, r7
   17304:	ldr	r2, [sp, #32]
   17308:	str	r2, [r3]
   1730c:	add	sp, sp, #52	; 0x34
   17310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17314:	andeq	r7, r3, r4, asr #3
   17318:	andeq	r7, r3, r4, lsr #5
   1731c:	push	{r4, r5, r6, lr}
   17320:	mov	r5, r0
   17324:	bl	117dc <__errno_location@plt>
   17328:	mov	r4, r0
   1732c:	cmp	r5, #0
   17330:	ldr	r0, [pc, #20]	; 1734c <__assert_fail@plt+0x5990>
   17334:	mov	r1, #48	; 0x30
   17338:	movne	r0, r5
   1733c:	ldr	r6, [r4]
   17340:	bl	17f94 <__assert_fail@plt+0x65d8>
   17344:	str	r6, [r4]
   17348:	pop	{r4, r5, r6, pc}
   1734c:	andeq	r7, r3, r4, lsr #7
   17350:	ldr	r3, [pc, #12]	; 17364 <__assert_fail@plt+0x59a8>
   17354:	cmp	r0, #0
   17358:	moveq	r0, r3
   1735c:	ldr	r0, [r0]
   17360:	bx	lr
   17364:	andeq	r7, r3, r4, lsr #7
   17368:	ldr	r3, [pc, #12]	; 1737c <__assert_fail@plt+0x59c0>
   1736c:	cmp	r0, #0
   17370:	moveq	r0, r3
   17374:	str	r1, [r0]
   17378:	bx	lr
   1737c:	andeq	r7, r3, r4, lsr #7
   17380:	ldr	r3, [pc, #52]	; 173bc <__assert_fail@plt+0x5a00>
   17384:	cmp	r0, #0
   17388:	push	{lr}		; (str lr, [sp, #-4]!)
   1738c:	lsr	lr, r1, #5
   17390:	and	r1, r1, #31
   17394:	moveq	r0, r3
   17398:	add	r3, r0, #8
   1739c:	ldr	ip, [r3, lr, lsl #2]
   173a0:	lsr	r0, ip, r1
   173a4:	eor	r2, r2, r0
   173a8:	and	r0, r0, #1
   173ac:	and	r2, r2, #1
   173b0:	eor	r1, ip, r2, lsl r1
   173b4:	str	r1, [r3, lr, lsl #2]
   173b8:	pop	{pc}		; (ldr pc, [sp], #4)
   173bc:	andeq	r7, r3, r4, lsr #7
   173c0:	ldr	r3, [pc, #16]	; 173d8 <__assert_fail@plt+0x5a1c>
   173c4:	cmp	r0, #0
   173c8:	movne	r3, r0
   173cc:	ldr	r0, [r3, #4]
   173d0:	str	r1, [r3, #4]
   173d4:	bx	lr
   173d8:	andeq	r7, r3, r4, lsr #7
   173dc:	ldr	r3, [pc, #44]	; 17410 <__assert_fail@plt+0x5a54>
   173e0:	cmp	r0, #0
   173e4:	moveq	r0, r3
   173e8:	mov	r3, #10
   173ec:	cmp	r2, #0
   173f0:	cmpne	r1, #0
   173f4:	str	r3, [r0]
   173f8:	bne	17404 <__assert_fail@plt+0x5a48>
   173fc:	push	{r4, lr}
   17400:	bl	11980 <abort@plt>
   17404:	str	r1, [r0, #40]	; 0x28
   17408:	str	r2, [r0, #44]	; 0x2c
   1740c:	bx	lr
   17410:	andeq	r7, r3, r4, lsr #7
   17414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17418:	sub	sp, sp, #24
   1741c:	mov	sl, r3
   17420:	mov	r7, r0
   17424:	mov	r8, r1
   17428:	mov	r9, r2
   1742c:	ldr	r4, [sp, #56]	; 0x38
   17430:	ldr	r3, [pc, #88]	; 17490 <__assert_fail@plt+0x5ad4>
   17434:	cmp	r4, #0
   17438:	moveq	r4, r3
   1743c:	bl	117dc <__errno_location@plt>
   17440:	ldr	r3, [r4, #44]	; 0x2c
   17444:	mov	r5, r0
   17448:	mov	r2, r9
   1744c:	mov	r1, r8
   17450:	mov	r0, r7
   17454:	ldr	r6, [r5]
   17458:	str	r3, [sp, #16]
   1745c:	ldr	r3, [r4, #40]	; 0x28
   17460:	str	r3, [sp, #12]
   17464:	add	r3, r4, #8
   17468:	str	r3, [sp, #8]
   1746c:	ldr	r3, [r4, #4]
   17470:	str	r3, [sp, #4]
   17474:	ldr	r3, [r4]
   17478:	str	r3, [sp]
   1747c:	mov	r3, sl
   17480:	bl	16484 <__assert_fail@plt+0x4ac8>
   17484:	str	r6, [r5]
   17488:	add	sp, sp, #24
   1748c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17490:	andeq	r7, r3, r4, lsr #7
   17494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17498:	cmp	r3, #0
   1749c:	sub	sp, sp, #44	; 0x2c
   174a0:	mov	r6, r2
   174a4:	mov	sl, r1
   174a8:	mov	r9, r0
   174ac:	ldr	r4, [pc, #176]	; 17564 <__assert_fail@plt+0x5ba8>
   174b0:	movne	r4, r3
   174b4:	bl	117dc <__errno_location@plt>
   174b8:	ldr	r3, [r0]
   174bc:	mov	r1, #0
   174c0:	mov	r2, r9
   174c4:	mov	r8, r0
   174c8:	mov	r0, r1
   174cc:	ldr	r5, [r4, #4]
   174d0:	add	fp, r4, #8
   174d4:	str	r3, [sp, #28]
   174d8:	ldr	r3, [r4, #44]	; 0x2c
   174dc:	cmp	r6, #0
   174e0:	orreq	r5, r5, #1
   174e4:	str	r3, [sp, #16]
   174e8:	ldr	r3, [r4, #40]	; 0x28
   174ec:	stmib	sp, {r5, fp}
   174f0:	str	r3, [sp, #12]
   174f4:	ldr	r3, [r4]
   174f8:	str	r3, [sp]
   174fc:	mov	r3, sl
   17500:	bl	16484 <__assert_fail@plt+0x4ac8>
   17504:	add	r1, r0, #1
   17508:	mov	r7, r0
   1750c:	mov	r0, r1
   17510:	str	r1, [sp, #36]	; 0x24
   17514:	bl	17d94 <__assert_fail@plt+0x63d8>
   17518:	ldr	r3, [r4, #44]	; 0x2c
   1751c:	mov	r2, r9
   17520:	ldr	r1, [sp, #36]	; 0x24
   17524:	str	r3, [sp, #16]
   17528:	ldr	r3, [r4, #40]	; 0x28
   1752c:	stmib	sp, {r5, fp}
   17530:	str	r0, [sp, #32]
   17534:	str	r3, [sp, #12]
   17538:	ldr	r3, [r4]
   1753c:	str	r3, [sp]
   17540:	mov	r3, sl
   17544:	bl	16484 <__assert_fail@plt+0x4ac8>
   17548:	ldr	r3, [sp, #28]
   1754c:	cmp	r6, #0
   17550:	ldr	r0, [sp, #32]
   17554:	str	r3, [r8]
   17558:	strne	r7, [r6]
   1755c:	add	sp, sp, #44	; 0x2c
   17560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17564:	andeq	r7, r3, r4, lsr #7
   17568:	mov	r3, r2
   1756c:	mov	r2, #0
   17570:	b	17494 <__assert_fail@plt+0x5ad8>
   17574:	push	{r4, r5, r6, r7, r8, lr}
   17578:	mov	r6, #1
   1757c:	ldr	r4, [pc, #100]	; 175e8 <__assert_fail@plt+0x5c2c>
   17580:	ldr	r5, [r4]
   17584:	add	r7, r5, #4
   17588:	ldr	r3, [r4, #4]
   1758c:	cmp	r3, r6
   17590:	bgt	175d8 <__assert_fail@plt+0x5c1c>
   17594:	ldr	r6, [pc, #80]	; 175ec <__assert_fail@plt+0x5c30>
   17598:	ldr	r0, [r5, #4]
   1759c:	cmp	r0, r6
   175a0:	beq	175b4 <__assert_fail@plt+0x5bf8>
   175a4:	bl	18758 <__assert_fail@plt+0x6d9c>
   175a8:	mov	r3, #256	; 0x100
   175ac:	str	r3, [r4, #8]
   175b0:	str	r6, [r4, #12]
   175b4:	ldr	r6, [pc, #52]	; 175f0 <__assert_fail@plt+0x5c34>
   175b8:	cmp	r5, r6
   175bc:	beq	175cc <__assert_fail@plt+0x5c10>
   175c0:	mov	r0, r5
   175c4:	bl	18758 <__assert_fail@plt+0x6d9c>
   175c8:	str	r6, [r4]
   175cc:	mov	r3, #1
   175d0:	str	r3, [r4, #4]
   175d4:	pop	{r4, r5, r6, r7, r8, pc}
   175d8:	ldr	r0, [r7, r6, lsl #3]
   175dc:	add	r6, r6, #1
   175e0:	bl	18758 <__assert_fail@plt+0x6d9c>
   175e4:	b	17588 <__assert_fail@plt+0x5bcc>
   175e8:	andeq	r7, r3, r4, asr #3
   175ec:	andeq	r7, r3, r4, lsr #5
   175f0:	andeq	r7, r3, ip, asr #3
   175f4:	ldr	r3, [pc, #4]	; 17600 <__assert_fail@plt+0x5c44>
   175f8:	mvn	r2, #0
   175fc:	b	17174 <__assert_fail@plt+0x57b8>
   17600:	andeq	r7, r3, r4, lsr #7
   17604:	ldr	r3, [pc]	; 1760c <__assert_fail@plt+0x5c50>
   17608:	b	17174 <__assert_fail@plt+0x57b8>
   1760c:	andeq	r7, r3, r4, lsr #7
   17610:	mov	r1, r0
   17614:	mov	r0, #0
   17618:	b	175f4 <__assert_fail@plt+0x5c38>
   1761c:	mov	r2, r1
   17620:	mov	r1, r0
   17624:	mov	r0, #0
   17628:	b	17604 <__assert_fail@plt+0x5c48>
   1762c:	push	{r4, r5, lr}
   17630:	sub	sp, sp, #52	; 0x34
   17634:	mov	r5, r2
   17638:	mov	r4, r0
   1763c:	mov	r0, sp
   17640:	bl	16328 <__assert_fail@plt+0x496c>
   17644:	mov	r3, sp
   17648:	mvn	r2, #0
   1764c:	mov	r1, r5
   17650:	mov	r0, r4
   17654:	bl	17174 <__assert_fail@plt+0x57b8>
   17658:	add	sp, sp, #52	; 0x34
   1765c:	pop	{r4, r5, pc}
   17660:	push	{r4, r5, r6, lr}
   17664:	sub	sp, sp, #48	; 0x30
   17668:	mov	r5, r2
   1766c:	mov	r6, r3
   17670:	mov	r4, r0
   17674:	mov	r0, sp
   17678:	bl	16328 <__assert_fail@plt+0x496c>
   1767c:	mov	r3, sp
   17680:	mov	r2, r6
   17684:	mov	r1, r5
   17688:	mov	r0, r4
   1768c:	bl	17174 <__assert_fail@plt+0x57b8>
   17690:	add	sp, sp, #48	; 0x30
   17694:	pop	{r4, r5, r6, pc}
   17698:	mov	r2, r1
   1769c:	mov	r1, r0
   176a0:	mov	r0, #0
   176a4:	b	1762c <__assert_fail@plt+0x5c70>
   176a8:	mov	r3, r2
   176ac:	mov	r2, r1
   176b0:	mov	r1, r0
   176b4:	mov	r0, #0
   176b8:	b	17660 <__assert_fail@plt+0x5ca4>
   176bc:	push	{r4, r5, r6, lr}
   176c0:	mov	r4, r0
   176c4:	mov	r5, r1
   176c8:	mov	r6, r2
   176cc:	sub	sp, sp, #48	; 0x30
   176d0:	mov	ip, sp
   176d4:	ldr	lr, [pc, #64]	; 1771c <__assert_fail@plt+0x5d60>
   176d8:	ldm	lr!, {r0, r1, r2, r3}
   176dc:	stmia	ip!, {r0, r1, r2, r3}
   176e0:	ldm	lr!, {r0, r1, r2, r3}
   176e4:	stmia	ip!, {r0, r1, r2, r3}
   176e8:	ldm	lr, {r0, r1, r2, r3}
   176ec:	stm	ip, {r0, r1, r2, r3}
   176f0:	mov	r1, r6
   176f4:	mov	r2, #1
   176f8:	mov	r0, sp
   176fc:	bl	17380 <__assert_fail@plt+0x59c4>
   17700:	mov	r3, sp
   17704:	mov	r2, r5
   17708:	mov	r1, r4
   1770c:	mov	r0, #0
   17710:	bl	17174 <__assert_fail@plt+0x57b8>
   17714:	add	sp, sp, #48	; 0x30
   17718:	pop	{r4, r5, r6, pc}
   1771c:	andeq	r7, r3, r4, lsr #7
   17720:	mov	r2, r1
   17724:	mvn	r1, #0
   17728:	b	176bc <__assert_fail@plt+0x5d00>
   1772c:	mov	r1, #58	; 0x3a
   17730:	b	17720 <__assert_fail@plt+0x5d64>
   17734:	mov	r2, #58	; 0x3a
   17738:	b	176bc <__assert_fail@plt+0x5d00>
   1773c:	push	{r4, r5, lr}
   17740:	sub	sp, sp, #100	; 0x64
   17744:	mov	r4, r0
   17748:	mov	r0, sp
   1774c:	mov	r5, r2
   17750:	bl	16328 <__assert_fail@plt+0x496c>
   17754:	mov	ip, sp
   17758:	add	lr, sp, #48	; 0x30
   1775c:	ldm	ip!, {r0, r1, r2, r3}
   17760:	stmia	lr!, {r0, r1, r2, r3}
   17764:	ldm	ip!, {r0, r1, r2, r3}
   17768:	stmia	lr!, {r0, r1, r2, r3}
   1776c:	ldm	ip, {r0, r1, r2, r3}
   17770:	stm	lr, {r0, r1, r2, r3}
   17774:	mov	r2, #1
   17778:	mov	r1, #58	; 0x3a
   1777c:	add	r0, sp, #48	; 0x30
   17780:	bl	17380 <__assert_fail@plt+0x59c4>
   17784:	add	r3, sp, #48	; 0x30
   17788:	mvn	r2, #0
   1778c:	mov	r1, r5
   17790:	mov	r0, r4
   17794:	bl	17174 <__assert_fail@plt+0x57b8>
   17798:	add	sp, sp, #100	; 0x64
   1779c:	pop	{r4, r5, pc}
   177a0:	push	{r4, r5, r6, r7, lr}
   177a4:	mov	r4, r0
   177a8:	mov	r6, r1
   177ac:	mov	r7, r2
   177b0:	mov	r5, r3
   177b4:	sub	sp, sp, #52	; 0x34
   177b8:	ldr	lr, [pc, #68]	; 17804 <__assert_fail@plt+0x5e48>
   177bc:	mov	ip, sp
   177c0:	ldm	lr!, {r0, r1, r2, r3}
   177c4:	stmia	ip!, {r0, r1, r2, r3}
   177c8:	ldm	lr!, {r0, r1, r2, r3}
   177cc:	stmia	ip!, {r0, r1, r2, r3}
   177d0:	ldm	lr, {r0, r1, r2, r3}
   177d4:	stm	ip, {r0, r1, r2, r3}
   177d8:	mov	r2, r7
   177dc:	mov	r1, r6
   177e0:	mov	r0, sp
   177e4:	bl	173dc <__assert_fail@plt+0x5a20>
   177e8:	ldr	r2, [sp, #72]	; 0x48
   177ec:	mov	r3, sp
   177f0:	mov	r1, r5
   177f4:	mov	r0, r4
   177f8:	bl	17174 <__assert_fail@plt+0x57b8>
   177fc:	add	sp, sp, #52	; 0x34
   17800:	pop	{r4, r5, r6, r7, pc}
   17804:	andeq	r7, r3, r4, lsr #7
   17808:	mvn	ip, #0
   1780c:	push	{r0, r1, r2, lr}
   17810:	str	ip, [sp]
   17814:	bl	177a0 <__assert_fail@plt+0x5de4>
   17818:	add	sp, sp, #12
   1781c:	pop	{pc}		; (ldr pc, [sp], #4)
   17820:	mov	r3, r2
   17824:	mov	r2, r1
   17828:	mov	r1, r0
   1782c:	mov	r0, #0
   17830:	b	17808 <__assert_fail@plt+0x5e4c>
   17834:	push	{r0, r1, r2, lr}
   17838:	str	r3, [sp]
   1783c:	mov	r3, r2
   17840:	mov	r2, r1
   17844:	mov	r1, r0
   17848:	mov	r0, #0
   1784c:	bl	177a0 <__assert_fail@plt+0x5de4>
   17850:	add	sp, sp, #12
   17854:	pop	{pc}		; (ldr pc, [sp], #4)
   17858:	ldr	r3, [pc]	; 17860 <__assert_fail@plt+0x5ea4>
   1785c:	b	17174 <__assert_fail@plt+0x57b8>
   17860:	ldrdeq	r7, [r3], -r4
   17864:	mov	r2, r1
   17868:	mov	r1, r0
   1786c:	mov	r0, #0
   17870:	b	17858 <__assert_fail@plt+0x5e9c>
   17874:	mvn	r2, #0
   17878:	b	17858 <__assert_fail@plt+0x5e9c>
   1787c:	mov	r1, r0
   17880:	mov	r0, #0
   17884:	b	17874 <__assert_fail@plt+0x5eb8>
   17888:	push	{r4, r5, r6, lr}
   1788c:	mov	r2, r1
   17890:	mov	r4, r1
   17894:	mov	r1, #0
   17898:	mov	r5, r0
   1789c:	bl	1186c <memchr@plt>
   178a0:	cmp	r0, #0
   178a4:	subne	r4, r0, r5
   178a8:	addne	r4, r4, #1
   178ac:	mov	r0, r4
   178b0:	pop	{r4, r5, r6, pc}
   178b4:	cmp	r0, #2
   178b8:	push	{r4, r5, r6, r7, r8, lr}
   178bc:	mov	r4, r0
   178c0:	bhi	178e8 <__assert_fail@plt+0x5f2c>
   178c4:	bl	24f14 <__assert_fail@plt+0x13558>
   178c8:	mov	r6, r0
   178cc:	bl	117dc <__errno_location@plt>
   178d0:	mov	r5, r0
   178d4:	mov	r0, r4
   178d8:	ldr	r7, [r5]
   178dc:	mov	r4, r6
   178e0:	bl	11998 <close@plt>
   178e4:	str	r7, [r5]
   178e8:	mov	r0, r4
   178ec:	pop	{r4, r5, r6, r7, r8, pc}
   178f0:	push	{r4, r5, r6, lr}
   178f4:	cmp	r1, #0
   178f8:	sub	sp, sp, #32
   178fc:	mov	r5, r0
   17900:	ldr	r4, [sp, #48]	; 0x30
   17904:	ldr	r6, [sp, #52]	; 0x34
   17908:	beq	179b4 <__assert_fail@plt+0x5ff8>
   1790c:	mov	lr, r3
   17910:	mov	r3, r2
   17914:	mov	r2, r1
   17918:	ldr	r1, [pc, #740]	; 17c04 <__assert_fail@plt+0x6248>
   1791c:	str	lr, [sp]
   17920:	bl	117c4 <fprintf@plt>
   17924:	mov	r2, #5
   17928:	ldr	r1, [pc, #728]	; 17c08 <__assert_fail@plt+0x624c>
   1792c:	mov	r0, #0
   17930:	bl	11638 <dcgettext@plt>
   17934:	mov	r2, r0
   17938:	movw	r3, #2022	; 0x7e6
   1793c:	ldr	r1, [pc, #712]	; 17c0c <__assert_fail@plt+0x6250>
   17940:	mov	r0, r5
   17944:	bl	117c4 <fprintf@plt>
   17948:	mov	r1, r5
   1794c:	mov	r0, #10
   17950:	bl	118d8 <fputc@plt>
   17954:	mov	r2, #5
   17958:	ldr	r1, [pc, #688]	; 17c10 <__assert_fail@plt+0x6254>
   1795c:	mov	r0, #0
   17960:	bl	11638 <dcgettext@plt>
   17964:	mov	r1, r0
   17968:	ldr	r2, [pc, #676]	; 17c14 <__assert_fail@plt+0x6258>
   1796c:	mov	r0, r5
   17970:	bl	117c4 <fprintf@plt>
   17974:	mov	r1, r5
   17978:	mov	r0, #10
   1797c:	bl	118d8 <fputc@plt>
   17980:	cmp	r6, #9
   17984:	ldrls	pc, [pc, r6, lsl #2]
   17988:	b	17bf8 <__assert_fail@plt+0x623c>
   1798c:			; <UNDEFINED> instruction: 0x00017ab0
   17990:	andeq	r7, r1, r0, asr #19
   17994:	andeq	r7, r1, r8, ror #19
   17998:	andeq	r7, r1, r0, lsl sl
   1799c:	andeq	r7, r1, r0, asr #20
   179a0:	andeq	r7, r1, r8, ror sl
   179a4:			; <UNDEFINED> instruction: 0x00017ab8
   179a8:	strdeq	r7, [r1], -ip
   179ac:	andeq	r7, r1, r8, asr #22
   179b0:	muleq	r1, ip, fp
   179b4:	ldr	r1, [pc, #604]	; 17c18 <__assert_fail@plt+0x625c>
   179b8:	bl	117c4 <fprintf@plt>
   179bc:	b	17924 <__assert_fail@plt+0x5f68>
   179c0:	mov	r2, #5
   179c4:	ldr	r1, [pc, #592]	; 17c1c <__assert_fail@plt+0x6260>
   179c8:	mov	r0, #0
   179cc:	bl	11638 <dcgettext@plt>
   179d0:	ldr	r2, [r4]
   179d4:	mov	r1, r0
   179d8:	mov	r0, r5
   179dc:	add	sp, sp, #32
   179e0:	pop	{r4, r5, r6, lr}
   179e4:	b	117c4 <fprintf@plt>
   179e8:	mov	r2, #5
   179ec:	ldr	r1, [pc, #556]	; 17c20 <__assert_fail@plt+0x6264>
   179f0:	mov	r0, #0
   179f4:	bl	11638 <dcgettext@plt>
   179f8:	ldrd	r2, [r4]
   179fc:	mov	r1, r0
   17a00:	mov	r0, r5
   17a04:	add	sp, sp, #32
   17a08:	pop	{r4, r5, r6, lr}
   17a0c:	b	117c4 <fprintf@plt>
   17a10:	mov	r2, #5
   17a14:	ldr	r1, [pc, #520]	; 17c24 <__assert_fail@plt+0x6268>
   17a18:	mov	r0, #0
   17a1c:	bl	11638 <dcgettext@plt>
   17a20:	ldr	r3, [r4, #8]
   17a24:	mov	r1, r0
   17a28:	mov	r0, r5
   17a2c:	str	r3, [sp, #48]	; 0x30
   17a30:	ldrd	r2, [r4]
   17a34:	add	sp, sp, #32
   17a38:	pop	{r4, r5, r6, lr}
   17a3c:	b	117c4 <fprintf@plt>
   17a40:	mov	r2, #5
   17a44:	ldr	r1, [pc, #476]	; 17c28 <__assert_fail@plt+0x626c>
   17a48:	mov	r0, #0
   17a4c:	bl	11638 <dcgettext@plt>
   17a50:	ldr	r3, [r4, #12]
   17a54:	mov	r1, r0
   17a58:	mov	r0, r5
   17a5c:	str	r3, [sp, #52]	; 0x34
   17a60:	ldr	r3, [r4, #8]
   17a64:	str	r3, [sp, #48]	; 0x30
   17a68:	ldrd	r2, [r4]
   17a6c:	add	sp, sp, #32
   17a70:	pop	{r4, r5, r6, lr}
   17a74:	b	117c4 <fprintf@plt>
   17a78:	mov	r2, #5
   17a7c:	ldr	r1, [pc, #424]	; 17c2c <__assert_fail@plt+0x6270>
   17a80:	mov	r0, #0
   17a84:	bl	11638 <dcgettext@plt>
   17a88:	ldr	r3, [r4, #16]
   17a8c:	mov	r1, r0
   17a90:	mov	r0, r5
   17a94:	str	r3, [sp, #8]
   17a98:	ldr	r3, [r4, #12]
   17a9c:	str	r3, [sp, #4]
   17aa0:	ldr	r3, [r4, #8]
   17aa4:	str	r3, [sp]
   17aa8:	ldrd	r2, [r4]
   17aac:	bl	117c4 <fprintf@plt>
   17ab0:	add	sp, sp, #32
   17ab4:	pop	{r4, r5, r6, pc}
   17ab8:	mov	r2, #5
   17abc:	ldr	r1, [pc, #364]	; 17c30 <__assert_fail@plt+0x6274>
   17ac0:	mov	r0, #0
   17ac4:	bl	11638 <dcgettext@plt>
   17ac8:	ldr	r3, [r4, #20]
   17acc:	mov	r1, r0
   17ad0:	mov	r0, r5
   17ad4:	str	r3, [sp, #12]
   17ad8:	ldr	r3, [r4, #16]
   17adc:	str	r3, [sp, #8]
   17ae0:	ldr	r3, [r4, #12]
   17ae4:	str	r3, [sp, #4]
   17ae8:	ldr	r3, [r4, #8]
   17aec:	str	r3, [sp]
   17af0:	ldrd	r2, [r4]
   17af4:	bl	117c4 <fprintf@plt>
   17af8:	b	17ab0 <__assert_fail@plt+0x60f4>
   17afc:	mov	r2, #5
   17b00:	ldr	r1, [pc, #300]	; 17c34 <__assert_fail@plt+0x6278>
   17b04:	mov	r0, #0
   17b08:	bl	11638 <dcgettext@plt>
   17b0c:	ldr	r3, [r4, #24]
   17b10:	mov	r1, r0
   17b14:	mov	r0, r5
   17b18:	str	r3, [sp, #16]
   17b1c:	ldr	r3, [r4, #20]
   17b20:	str	r3, [sp, #12]
   17b24:	ldr	r3, [r4, #16]
   17b28:	str	r3, [sp, #8]
   17b2c:	ldr	r3, [r4, #12]
   17b30:	str	r3, [sp, #4]
   17b34:	ldr	r3, [r4, #8]
   17b38:	str	r3, [sp]
   17b3c:	ldrd	r2, [r4]
   17b40:	bl	117c4 <fprintf@plt>
   17b44:	b	17ab0 <__assert_fail@plt+0x60f4>
   17b48:	mov	r2, #5
   17b4c:	ldr	r1, [pc, #228]	; 17c38 <__assert_fail@plt+0x627c>
   17b50:	mov	r0, #0
   17b54:	bl	11638 <dcgettext@plt>
   17b58:	ldr	r3, [r4, #28]
   17b5c:	mov	r1, r0
   17b60:	mov	r0, r5
   17b64:	str	r3, [sp, #20]
   17b68:	ldr	r3, [r4, #24]
   17b6c:	str	r3, [sp, #16]
   17b70:	ldr	r3, [r4, #20]
   17b74:	str	r3, [sp, #12]
   17b78:	ldr	r3, [r4, #16]
   17b7c:	str	r3, [sp, #8]
   17b80:	ldr	r3, [r4, #12]
   17b84:	str	r3, [sp, #4]
   17b88:	ldr	r3, [r4, #8]
   17b8c:	str	r3, [sp]
   17b90:	ldrd	r2, [r4]
   17b94:	bl	117c4 <fprintf@plt>
   17b98:	b	17ab0 <__assert_fail@plt+0x60f4>
   17b9c:	ldr	r1, [pc, #152]	; 17c3c <__assert_fail@plt+0x6280>
   17ba0:	mov	r2, #5
   17ba4:	mov	r0, #0
   17ba8:	bl	11638 <dcgettext@plt>
   17bac:	ldr	r3, [r4, #32]
   17bb0:	mov	r1, r0
   17bb4:	mov	r0, r5
   17bb8:	str	r3, [sp, #24]
   17bbc:	ldr	r3, [r4, #28]
   17bc0:	str	r3, [sp, #20]
   17bc4:	ldr	r3, [r4, #24]
   17bc8:	str	r3, [sp, #16]
   17bcc:	ldr	r3, [r4, #20]
   17bd0:	str	r3, [sp, #12]
   17bd4:	ldr	r3, [r4, #16]
   17bd8:	str	r3, [sp, #8]
   17bdc:	ldr	r3, [r4, #12]
   17be0:	str	r3, [sp, #4]
   17be4:	ldr	r3, [r4, #8]
   17be8:	str	r3, [sp]
   17bec:	ldrd	r2, [r4]
   17bf0:	bl	117c4 <fprintf@plt>
   17bf4:	b	17ab0 <__assert_fail@plt+0x60f4>
   17bf8:	mov	r2, #5
   17bfc:	ldr	r1, [pc, #60]	; 17c40 <__assert_fail@plt+0x6284>
   17c00:	b	17ba4 <__assert_fail@plt+0x61e8>
   17c04:	andeq	r6, r2, r3, ror r7
   17c08:	andeq	r6, r2, r6, lsl #15
   17c0c:	andeq	r6, r2, lr, lsr sl
   17c10:	andeq	r6, r2, sl, lsl #15
   17c14:	andeq	r6, r2, r5, lsr r8
   17c18:	andeq	r6, r2, pc, ror r7
   17c1c:	andeq	r6, r2, r7, asr r8
   17c20:	andeq	r6, r2, r7, ror #16
   17c24:	andeq	r6, r2, lr, ror r8
   17c28:	muleq	r2, sl, r8
   17c2c:			; <UNDEFINED> instruction: 0x000268ba
   17c30:	ldrdeq	r6, [r2], -lr
   17c34:	andeq	r6, r2, r6, lsl #18
   17c38:	andeq	r6, r2, r2, lsr r9
   17c3c:	andeq	r6, r2, r2, ror #18
   17c40:	muleq	r2, r6, r9
   17c44:	push	{r0, r1, r4, lr}
   17c48:	mov	ip, #0
   17c4c:	ldr	lr, [sp, #16]
   17c50:	ldr	r4, [lr, ip, lsl #2]
   17c54:	cmp	r4, #0
   17c58:	bne	17c70 <__assert_fail@plt+0x62b4>
   17c5c:	str	lr, [sp]
   17c60:	str	ip, [sp, #4]
   17c64:	bl	178f0 <__assert_fail@plt+0x5f34>
   17c68:	add	sp, sp, #8
   17c6c:	pop	{r4, pc}
   17c70:	add	ip, ip, #1
   17c74:	b	17c50 <__assert_fail@plt+0x6294>
   17c78:	push	{r4, r5, r6, lr}
   17c7c:	sub	sp, sp, #48	; 0x30
   17c80:	mov	ip, #0
   17c84:	add	lr, sp, #8
   17c88:	mov	r5, lr
   17c8c:	ldr	r6, [sp, #64]	; 0x40
   17c90:	ldr	r4, [r6, ip, lsl #2]
   17c94:	cmp	r4, #0
   17c98:	str	r4, [lr], #4
   17c9c:	beq	17cac <__assert_fail@plt+0x62f0>
   17ca0:	add	ip, ip, #1
   17ca4:	cmp	ip, #10
   17ca8:	bne	17c90 <__assert_fail@plt+0x62d4>
   17cac:	stm	sp, {r5, ip}
   17cb0:	bl	178f0 <__assert_fail@plt+0x5f34>
   17cb4:	add	sp, sp, #48	; 0x30
   17cb8:	pop	{r4, r5, r6, pc}
   17cbc:	push	{r3}		; (str r3, [sp, #-4]!)
   17cc0:	push	{r0, r1, r2, r3, lr}
   17cc4:	add	r3, sp, #24
   17cc8:	str	r3, [sp]
   17ccc:	str	r3, [sp, #12]
   17cd0:	ldr	r3, [sp, #20]
   17cd4:	bl	17c78 <__assert_fail@plt+0x62bc>
   17cd8:	add	sp, sp, #16
   17cdc:	pop	{lr}		; (ldr lr, [sp], #4)
   17ce0:	add	sp, sp, #4
   17ce4:	bx	lr
   17ce8:	ldr	r3, [pc, #92]	; 17d4c <__assert_fail@plt+0x6390>
   17cec:	mov	r0, #10
   17cf0:	push	{r4, lr}
   17cf4:	ldr	r1, [r3]
   17cf8:	bl	118d8 <fputc@plt>
   17cfc:	mov	r2, #5
   17d00:	ldr	r1, [pc, #72]	; 17d50 <__assert_fail@plt+0x6394>
   17d04:	mov	r0, #0
   17d08:	bl	11638 <dcgettext@plt>
   17d0c:	ldr	r1, [pc, #64]	; 17d54 <__assert_fail@plt+0x6398>
   17d10:	bl	11560 <printf@plt>
   17d14:	mov	r2, #5
   17d18:	ldr	r1, [pc, #56]	; 17d58 <__assert_fail@plt+0x639c>
   17d1c:	mov	r0, #0
   17d20:	bl	11638 <dcgettext@plt>
   17d24:	ldr	r2, [pc, #48]	; 17d5c <__assert_fail@plt+0x63a0>
   17d28:	ldr	r1, [pc, #48]	; 17d60 <__assert_fail@plt+0x63a4>
   17d2c:	bl	11560 <printf@plt>
   17d30:	ldr	r1, [pc, #44]	; 17d64 <__assert_fail@plt+0x63a8>
   17d34:	mov	r2, #5
   17d38:	mov	r0, #0
   17d3c:	bl	11638 <dcgettext@plt>
   17d40:	ldr	r1, [pc, #32]	; 17d68 <__assert_fail@plt+0x63ac>
   17d44:	pop	{r4, lr}
   17d48:	b	11560 <printf@plt>
   17d4c:	andeq	r7, r3, ip, lsl r2
   17d50:	ldrdeq	r6, [r2], -r2
   17d54:	andeq	r6, r2, sp, asr #10
   17d58:	andeq	r6, r2, r6, ror #19
   17d5c:	andeq	r6, r2, r6, lsr #10
   17d60:	strdeq	r6, [r2], -r9
   17d64:	strdeq	r6, [r2], -sl
   17d68:	andeq	r6, r2, r1, lsr #20
   17d6c:	push	{r4, lr}
   17d70:	bl	18840 <__assert_fail@plt+0x6e84>
   17d74:	cmp	r0, #0
   17d78:	popne	{r4, pc}
   17d7c:	bl	18024 <__assert_fail@plt+0x6668>
   17d80:	push	{r4, lr}
   17d84:	bl	18840 <__assert_fail@plt+0x6e84>
   17d88:	cmp	r0, #0
   17d8c:	popne	{r4, pc}
   17d90:	bl	18024 <__assert_fail@plt+0x6668>
   17d94:	b	17d6c <__assert_fail@plt+0x63b0>
   17d98:	push	{r4, r5, r6, lr}
   17d9c:	mov	r5, r0
   17da0:	mov	r4, r1
   17da4:	bl	188bc <__assert_fail@plt+0x6f00>
   17da8:	cmp	r0, #0
   17dac:	popne	{r4, r5, r6, pc}
   17db0:	adds	r4, r4, #0
   17db4:	movne	r4, #1
   17db8:	cmp	r5, #0
   17dbc:	moveq	r4, #1
   17dc0:	cmp	r4, #0
   17dc4:	popeq	{r4, r5, r6, pc}
   17dc8:	bl	18024 <__assert_fail@plt+0x6668>
   17dcc:	push	{r4, lr}
   17dd0:	bl	24d30 <__assert_fail@plt+0x13374>
   17dd4:	cmp	r0, #0
   17dd8:	popne	{r4, pc}
   17ddc:	bl	18024 <__assert_fail@plt+0x6668>
   17de0:	push	{r4, r5, r6, lr}
   17de4:	mov	r6, r0
   17de8:	mov	r5, r1
   17dec:	mov	r4, r2
   17df0:	bl	18900 <__assert_fail@plt+0x6f44>
   17df4:	cmp	r0, #0
   17df8:	popne	{r4, r5, r6, pc}
   17dfc:	cmp	r6, #0
   17e00:	beq	17e10 <__assert_fail@plt+0x6454>
   17e04:	cmp	r5, #0
   17e08:	cmpne	r4, #0
   17e0c:	popeq	{r4, r5, r6, pc}
   17e10:	bl	18024 <__assert_fail@plt+0x6668>
   17e14:	b	17de0 <__assert_fail@plt+0x6424>
   17e18:	push	{r4, lr}
   17e1c:	bl	24d40 <__assert_fail@plt+0x13384>
   17e20:	cmp	r0, #0
   17e24:	popne	{r4, pc}
   17e28:	bl	18024 <__assert_fail@plt+0x6668>
   17e2c:	mov	r2, r1
   17e30:	mov	r1, r0
   17e34:	mov	r0, #0
   17e38:	b	17de0 <__assert_fail@plt+0x6424>
   17e3c:	mov	r2, r1
   17e40:	mov	r1, r0
   17e44:	mov	r0, #0
   17e48:	b	17e18 <__assert_fail@plt+0x645c>
   17e4c:	cmp	r0, #0
   17e50:	push	{r4, r5, r6, lr}
   17e54:	mov	r5, r1
   17e58:	ldr	r4, [r1]
   17e5c:	bne	17e88 <__assert_fail@plt+0x64cc>
   17e60:	cmp	r4, #0
   17e64:	bne	17e78 <__assert_fail@plt+0x64bc>
   17e68:	mov	r4, #64	; 0x40
   17e6c:	udiv	r4, r4, r2
   17e70:	cmp	r2, #64	; 0x40
   17e74:	addhi	r4, r4, #1
   17e78:	mov	r1, r4
   17e7c:	bl	17de0 <__assert_fail@plt+0x6424>
   17e80:	str	r4, [r5]
   17e84:	pop	{r4, r5, r6, pc}
   17e88:	lsr	r3, r4, #1
   17e8c:	add	r3, r3, #1
   17e90:	adds	r4, r4, r3
   17e94:	bcc	17e78 <__assert_fail@plt+0x64bc>
   17e98:	bl	18024 <__assert_fail@plt+0x6668>
   17e9c:	mov	r2, #1
   17ea0:	b	17e4c <__assert_fail@plt+0x6490>
   17ea4:	ldr	ip, [r1]
   17ea8:	push	{r4, r5, r6, r7, r8, lr}
   17eac:	mov	r5, r1
   17eb0:	mvn	r8, r3
   17eb4:	lsr	r8, r8, #31
   17eb8:	ldr	lr, [sp, #24]
   17ebc:	asr	r1, ip, #1
   17ec0:	adds	r4, ip, r1
   17ec4:	mvnvs	r4, #-2147483648	; 0x80000000
   17ec8:	cmp	r3, r4
   17ecc:	movge	r1, #0
   17ed0:	andlt	r1, r8, #1
   17ed4:	cmp	r1, #0
   17ed8:	movne	r4, r3
   17edc:	smull	r6, r7, r4, lr
   17ee0:	cmp	r7, r6, asr #31
   17ee4:	bne	17efc <__assert_fail@plt+0x6540>
   17ee8:	cmp	r6, #63	; 0x3f
   17eec:	mov	r1, r6
   17ef0:	bgt	17f0c <__assert_fail@plt+0x6550>
   17ef4:	mov	r1, #64	; 0x40
   17ef8:	b	17f00 <__assert_fail@plt+0x6544>
   17efc:	mvn	r1, #-2147483648	; 0x80000000
   17f00:	sdiv	r4, r1, lr
   17f04:	mls	r6, lr, r4, r1
   17f08:	sub	r1, r1, r6
   17f0c:	cmp	r0, #0
   17f10:	sub	r6, r4, ip
   17f14:	streq	r0, [r5]
   17f18:	cmp	r6, r2
   17f1c:	bge	17f50 <__assert_fail@plt+0x6594>
   17f20:	adds	r4, ip, r2
   17f24:	bvs	17f4c <__assert_fail@plt+0x6590>
   17f28:	cmp	r4, r3
   17f2c:	movle	r3, #0
   17f30:	andgt	r3, r8, #1
   17f34:	cmp	r3, #0
   17f38:	bne	17f4c <__assert_fail@plt+0x6590>
   17f3c:	smull	r2, r3, r4, lr
   17f40:	cmp	r3, r2, asr #31
   17f44:	mov	r1, r2
   17f48:	beq	17f50 <__assert_fail@plt+0x6594>
   17f4c:	bl	18024 <__assert_fail@plt+0x6668>
   17f50:	bl	17d98 <__assert_fail@plt+0x63dc>
   17f54:	str	r4, [r5]
   17f58:	pop	{r4, r5, r6, r7, r8, pc}
   17f5c:	push	{r4, lr}
   17f60:	bl	18504 <__assert_fail@plt+0x6b48>
   17f64:	cmp	r0, #0
   17f68:	popne	{r4, pc}
   17f6c:	bl	18024 <__assert_fail@plt+0x6668>
   17f70:	mov	r1, #1
   17f74:	b	17f5c <__assert_fail@plt+0x65a0>
   17f78:	push	{r4, lr}
   17f7c:	bl	18504 <__assert_fail@plt+0x6b48>
   17f80:	cmp	r0, #0
   17f84:	popne	{r4, pc}
   17f88:	bl	18024 <__assert_fail@plt+0x6668>
   17f8c:	mov	r1, #1
   17f90:	b	17f78 <__assert_fail@plt+0x65bc>
   17f94:	push	{r4, r5, r6, lr}
   17f98:	mov	r4, r1
   17f9c:	mov	r5, r0
   17fa0:	mov	r0, r1
   17fa4:	bl	17d6c <__assert_fail@plt+0x63b0>
   17fa8:	mov	r2, r4
   17fac:	mov	r1, r5
   17fb0:	pop	{r4, r5, r6, lr}
   17fb4:	b	115e4 <memcpy@plt>
   17fb8:	push	{r4, r5, r6, lr}
   17fbc:	mov	r4, r1
   17fc0:	mov	r5, r0
   17fc4:	mov	r0, r1
   17fc8:	bl	17d80 <__assert_fail@plt+0x63c4>
   17fcc:	mov	r2, r4
   17fd0:	mov	r1, r5
   17fd4:	pop	{r4, r5, r6, lr}
   17fd8:	b	115e4 <memcpy@plt>
   17fdc:	push	{r4, r5, r6, lr}
   17fe0:	mov	r5, r0
   17fe4:	add	r0, r1, #1
   17fe8:	mov	r4, r1
   17fec:	bl	17d80 <__assert_fail@plt+0x63c4>
   17ff0:	mov	r2, #0
   17ff4:	mov	r1, r5
   17ff8:	strb	r2, [r0, r4]
   17ffc:	mov	r2, r4
   18000:	pop	{r4, r5, r6, lr}
   18004:	b	115e4 <memcpy@plt>
   18008:	push	{r4, lr}
   1800c:	mov	r4, r0
   18010:	bl	117ac <strlen@plt>
   18014:	add	r1, r0, #1
   18018:	mov	r0, r4
   1801c:	pop	{r4, lr}
   18020:	b	17f94 <__assert_fail@plt+0x65d8>
   18024:	ldr	r3, [pc, #44]	; 18058 <__assert_fail@plt+0x669c>
   18028:	mov	r2, #5
   1802c:	mov	r0, #0
   18030:	push	{r4, lr}
   18034:	ldr	r1, [pc, #32]	; 1805c <__assert_fail@plt+0x66a0>
   18038:	ldr	r4, [r3]
   1803c:	bl	11638 <dcgettext@plt>
   18040:	mov	r3, r0
   18044:	ldr	r2, [pc, #20]	; 18060 <__assert_fail@plt+0x66a4>
   18048:	mov	r1, #0
   1804c:	mov	r0, r4
   18050:	bl	116e0 <error@plt>
   18054:	bl	11980 <abort@plt>
   18058:	andeq	r7, r3, r0, asr #3
   1805c:	andeq	r6, r2, sp, ror #20
   18060:	andeq	r6, r2, r8, lsr #27
   18064:	ldr	ip, [pc, #108]	; 180d8 <__assert_fail@plt+0x671c>
   18068:	push	{r0, r1, r2, r3, r4, lr}
   1806c:	sub	r0, r0, #1
   18070:	cmp	r0, #3
   18074:	ldr	r6, [ip]
   18078:	bhi	180d4 <__assert_fail@plt+0x6718>
   1807c:	cmp	r1, #0
   18080:	ldr	ip, [pc, #84]	; 180dc <__assert_fail@plt+0x6720>
   18084:	movlt	r3, #0
   18088:	addlt	r5, sp, #12
   1808c:	strblt	r2, [sp, #12]
   18090:	mov	r2, #5
   18094:	ldr	r4, [pc, #68]	; 180e0 <__assert_fail@plt+0x6724>
   18098:	strblt	r3, [sp, #13]
   1809c:	ldrge	r5, [r3, r1, lsl #4]
   180a0:	ldr	r0, [ip, r0, lsl #2]
   180a4:	sublt	r4, r4, r1
   180a8:	mov	r1, r0
   180ac:	mov	r0, #0
   180b0:	bl	11638 <dcgettext@plt>
   180b4:	ldr	r3, [sp, #24]
   180b8:	mov	r2, r0
   180bc:	mov	r1, #0
   180c0:	mov	r0, r6
   180c4:	str	r5, [sp]
   180c8:	str	r3, [sp, #4]
   180cc:	mov	r3, r4
   180d0:	bl	116e0 <error@plt>
   180d4:	bl	11980 <abort@plt>
   180d8:	andeq	r7, r3, r0, asr #3
   180dc:	andeq	r6, r2, r0, lsl #21
   180e0:	muleq	r2, r0, sl
   180e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180e8:	asr	fp, r1, #31
   180ec:	mov	lr, #0
   180f0:	mov	sl, r1
   180f4:	subs	r2, r2, #1
   180f8:	bcs	18104 <__assert_fail@plt+0x6748>
   180fc:	mov	r0, lr
   18100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18104:	ldm	r0, {r3, ip}
   18108:	mov	r6, #0
   1810c:	mov	r7, #0
   18110:	cmp	ip, #0
   18114:	beq	18134 <__assert_fail@plt+0x6778>
   18118:	umull	r8, r9, r3, r1
   1811c:	mov	r5, #0
   18120:	mov	r4, r9
   18124:	umlal	r4, r5, ip, r1
   18128:	cmp	r5, #0
   1812c:	movne	r6, #1
   18130:	movne	r7, #0
   18134:	orrs	r4, r6, r7
   18138:	mvnne	r4, #0
   1813c:	mvnne	r5, #0
   18140:	muleq	r4, r3, fp
   18144:	movne	r3, #1
   18148:	mlaeq	ip, r1, ip, r4
   1814c:	umulleq	r4, r5, r3, r1
   18150:	moveq	r3, #0
   18154:	orr	lr, lr, r3
   18158:	addeq	r5, ip, r5
   1815c:	strd	r4, [r0]
   18160:	b	180f4 <__assert_fail@plt+0x6738>
   18164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18168:	cmp	r2, #36	; 0x24
   1816c:	sub	sp, sp, #20
   18170:	ldr	r6, [sp, #56]	; 0x38
   18174:	bls	1818c <__assert_fail@plt+0x67d0>
   18178:	ldr	r3, [pc, #888]	; 184f8 <__assert_fail@plt+0x6b3c>
   1817c:	mov	r2, #84	; 0x54
   18180:	ldr	r1, [pc, #884]	; 184fc <__assert_fail@plt+0x6b40>
   18184:	ldr	r0, [pc, #884]	; 18500 <__assert_fail@plt+0x6b44>
   18188:	bl	119bc <__assert_fail@plt>
   1818c:	cmp	r1, #0
   18190:	mov	r7, r1
   18194:	mov	r4, r0
   18198:	mov	fp, r2
   1819c:	mov	r8, r3
   181a0:	addeq	r7, sp, #4
   181a4:	bl	117dc <__errno_location@plt>
   181a8:	mov	r3, #0
   181ac:	mov	sl, r0
   181b0:	str	r3, [r0]
   181b4:	bl	1177c <__ctype_b_loc@plt>
   181b8:	ldrb	r9, [r4]
   181bc:	mov	r3, r4
   181c0:	ldr	r1, [r0]
   181c4:	lsl	r2, r9, #1
   181c8:	ldrh	r5, [r1, r2]
   181cc:	ands	r5, r5, #8192	; 0x2000
   181d0:	bne	181ec <__assert_fail@plt+0x6830>
   181d4:	cmp	r9, #45	; 0x2d
   181d8:	bne	181f4 <__assert_fail@plt+0x6838>
   181dc:	mov	r5, #4
   181e0:	mov	r0, r5
   181e4:	add	sp, sp, #20
   181e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ec:	ldrb	r9, [r3, #1]!
   181f0:	b	181c4 <__assert_fail@plt+0x6808>
   181f4:	mov	r2, fp
   181f8:	mov	r1, r7
   181fc:	mov	r0, r4
   18200:	bl	11860 <strtoumax@plt>
   18204:	ldr	r9, [r7]
   18208:	strd	r0, [sp, #8]
   1820c:	cmp	r9, r4
   18210:	bne	18274 <__assert_fail@plt+0x68b8>
   18214:	cmp	r6, #0
   18218:	beq	181dc <__assert_fail@plt+0x6820>
   1821c:	ldrb	r1, [r4]
   18220:	cmp	r1, #0
   18224:	beq	181dc <__assert_fail@plt+0x6820>
   18228:	mov	r0, r6
   1822c:	bl	117b8 <strchr@plt>
   18230:	cmp	r0, #0
   18234:	movne	r2, #1
   18238:	movne	r3, #0
   1823c:	strdne	r2, [sp, #8]
   18240:	beq	181dc <__assert_fail@plt+0x6820>
   18244:	ldrb	r4, [r9]
   18248:	cmp	r4, #0
   1824c:	beq	184b0 <__assert_fail@plt+0x6af4>
   18250:	mov	r1, r4
   18254:	mov	r0, r6
   18258:	bl	117b8 <strchr@plt>
   1825c:	cmp	r0, #0
   18260:	bne	1829c <__assert_fail@plt+0x68e0>
   18264:	ldrd	r2, [sp, #8]
   18268:	orr	r5, r5, #2
   1826c:	strd	r2, [r8]
   18270:	b	181e0 <__assert_fail@plt+0x6824>
   18274:	ldr	r5, [sl]
   18278:	cmp	r5, #0
   1827c:	beq	1828c <__assert_fail@plt+0x68d0>
   18280:	cmp	r5, #34	; 0x22
   18284:	bne	181dc <__assert_fail@plt+0x6820>
   18288:	mov	r5, #1
   1828c:	cmp	r6, #0
   18290:	strdeq	r0, [r8]
   18294:	bne	18244 <__assert_fail@plt+0x6888>
   18298:	b	181e0 <__assert_fail@plt+0x6824>
   1829c:	cmp	r4, #84	; 0x54
   182a0:	beq	182f4 <__assert_fail@plt+0x6938>
   182a4:	bhi	182dc <__assert_fail@plt+0x6920>
   182a8:	cmp	r4, #75	; 0x4b
   182ac:	beq	182f4 <__assert_fail@plt+0x6938>
   182b0:	bhi	182cc <__assert_fail@plt+0x6910>
   182b4:	cmp	r4, #69	; 0x45
   182b8:	beq	182f4 <__assert_fail@plt+0x6938>
   182bc:	cmp	r4, #71	; 0x47
   182c0:	beq	182f4 <__assert_fail@plt+0x6938>
   182c4:	mov	r6, #1
   182c8:	b	183b8 <__assert_fail@plt+0x69fc>
   182cc:	cmp	r4, #77	; 0x4d
   182d0:	beq	182f4 <__assert_fail@plt+0x6938>
   182d4:	cmp	r4, #80	; 0x50
   182d8:	b	182c0 <__assert_fail@plt+0x6904>
   182dc:	cmp	r4, #103	; 0x67
   182e0:	beq	182f4 <__assert_fail@plt+0x6938>
   182e4:	bhi	18390 <__assert_fail@plt+0x69d4>
   182e8:	sub	r3, r4, #89	; 0x59
   182ec:	cmp	r3, #1
   182f0:	bhi	182c4 <__assert_fail@plt+0x6908>
   182f4:	mov	r1, #48	; 0x30
   182f8:	mov	r0, r6
   182fc:	bl	117b8 <strchr@plt>
   18300:	cmp	r0, #0
   18304:	beq	182c4 <__assert_fail@plt+0x6908>
   18308:	ldrb	r3, [r9, #1]
   1830c:	cmp	r3, #68	; 0x44
   18310:	moveq	r6, #2
   18314:	moveq	r1, #1000	; 0x3e8
   18318:	beq	18338 <__assert_fail@plt+0x697c>
   1831c:	cmp	r3, #105	; 0x69
   18320:	beq	183a8 <__assert_fail@plt+0x69ec>
   18324:	cmp	r3, #66	; 0x42
   18328:	moveq	r6, #2
   1832c:	movne	r6, #1
   18330:	moveq	r1, #1000	; 0x3e8
   18334:	movne	r1, #1024	; 0x400
   18338:	cmp	r4, #89	; 0x59
   1833c:	beq	184e0 <__assert_fail@plt+0x6b24>
   18340:	bhi	183e0 <__assert_fail@plt+0x6a24>
   18344:	cmp	r4, #75	; 0x4b
   18348:	beq	18420 <__assert_fail@plt+0x6a64>
   1834c:	bhi	183c0 <__assert_fail@plt+0x6a04>
   18350:	cmp	r4, #69	; 0x45
   18354:	beq	184bc <__assert_fail@plt+0x6b00>
   18358:	cmp	r4, #71	; 0x47
   1835c:	beq	184c8 <__assert_fail@plt+0x6b0c>
   18360:	cmp	r4, #66	; 0x42
   18364:	bne	18264 <__assert_fail@plt+0x68a8>
   18368:	ldrd	r2, [sp, #8]
   1836c:	mov	r0, #0
   18370:	lsr	r1, r3, #22
   18374:	cmp	r1, r0
   18378:	bne	18484 <__assert_fail@plt+0x6ac8>
   1837c:	lsl	r3, r3, #10
   18380:	orr	r3, r3, r2, lsr #22
   18384:	lsl	r2, r2, #10
   18388:	strd	r2, [sp, #8]
   1838c:	b	18494 <__assert_fail@plt+0x6ad8>
   18390:	cmp	r4, #109	; 0x6d
   18394:	beq	182f4 <__assert_fail@plt+0x6938>
   18398:	cmp	r4, #116	; 0x74
   1839c:	beq	182f4 <__assert_fail@plt+0x6938>
   183a0:	cmp	r4, #107	; 0x6b
   183a4:	b	182c0 <__assert_fail@plt+0x6904>
   183a8:	ldrb	r3, [r9, #2]
   183ac:	cmp	r3, #66	; 0x42
   183b0:	movne	r6, #1
   183b4:	moveq	r6, #3
   183b8:	mov	r1, #1024	; 0x400
   183bc:	b	18338 <__assert_fail@plt+0x697c>
   183c0:	cmp	r4, #80	; 0x50
   183c4:	beq	184d0 <__assert_fail@plt+0x6b14>
   183c8:	cmp	r4, #84	; 0x54
   183cc:	beq	184d8 <__assert_fail@plt+0x6b1c>
   183d0:	cmp	r4, #77	; 0x4d
   183d4:	bne	18264 <__assert_fail@plt+0x68a8>
   183d8:	mov	r2, #2
   183dc:	b	184c0 <__assert_fail@plt+0x6b04>
   183e0:	cmp	r4, #103	; 0x67
   183e4:	beq	184c8 <__assert_fail@plt+0x6b0c>
   183e8:	bhi	1840c <__assert_fail@plt+0x6a50>
   183ec:	cmp	r4, #98	; 0x62
   183f0:	beq	18464 <__assert_fail@plt+0x6aa8>
   183f4:	cmp	r4, #99	; 0x63
   183f8:	beq	184f0 <__assert_fail@plt+0x6b34>
   183fc:	cmp	r4, #90	; 0x5a
   18400:	bne	18264 <__assert_fail@plt+0x68a8>
   18404:	mov	r2, #7
   18408:	b	184c0 <__assert_fail@plt+0x6b04>
   1840c:	cmp	r4, #109	; 0x6d
   18410:	beq	183d8 <__assert_fail@plt+0x6a1c>
   18414:	bhi	18428 <__assert_fail@plt+0x6a6c>
   18418:	cmp	r4, #107	; 0x6b
   1841c:	bne	18264 <__assert_fail@plt+0x68a8>
   18420:	mov	r2, #1
   18424:	b	184c0 <__assert_fail@plt+0x6b04>
   18428:	cmp	r4, #116	; 0x74
   1842c:	beq	184d8 <__assert_fail@plt+0x6b1c>
   18430:	cmp	r4, #119	; 0x77
   18434:	bne	18264 <__assert_fail@plt+0x68a8>
   18438:	mov	r0, #0
   1843c:	ldr	r3, [sp, #8]
   18440:	ldr	r2, [sp, #12]
   18444:	lsr	r1, r2, #31
   18448:	cmp	r1, r0
   1844c:	bne	18484 <__assert_fail@plt+0x6ac8>
   18450:	adds	r3, r3, r3
   18454:	adc	r2, r2, r2
   18458:	str	r3, [sp, #8]
   1845c:	str	r2, [sp, #12]
   18460:	b	18494 <__assert_fail@plt+0x6ad8>
   18464:	ldrd	r2, [sp, #8]
   18468:	mov	r0, #0
   1846c:	lsr	r1, r3, #23
   18470:	cmp	r1, r0
   18474:	lsleq	r3, r3, #9
   18478:	orreq	r3, r3, r2, lsr #23
   1847c:	lsleq	r2, r2, #9
   18480:	beq	18388 <__assert_fail@plt+0x69cc>
   18484:	mvn	r2, #0
   18488:	mvn	r3, #0
   1848c:	mov	r0, #1
   18490:	strd	r2, [sp, #8]
   18494:	ldr	r3, [r7]
   18498:	orr	r5, r5, r0
   1849c:	add	r2, r3, r6
   184a0:	str	r2, [r7]
   184a4:	ldrb	r3, [r3, r6]
   184a8:	cmp	r3, #0
   184ac:	orrne	r5, r5, #2
   184b0:	ldrd	r2, [sp, #8]
   184b4:	strd	r2, [r8]
   184b8:	b	181e0 <__assert_fail@plt+0x6824>
   184bc:	mov	r2, #6
   184c0:	add	r0, sp, #8
   184c4:	b	184e8 <__assert_fail@plt+0x6b2c>
   184c8:	mov	r2, #3
   184cc:	b	184c0 <__assert_fail@plt+0x6b04>
   184d0:	mov	r2, #5
   184d4:	b	184c0 <__assert_fail@plt+0x6b04>
   184d8:	mov	r2, #4
   184dc:	b	184c0 <__assert_fail@plt+0x6b04>
   184e0:	mov	r2, #8
   184e4:	add	r0, sp, r2
   184e8:	bl	180e4 <__assert_fail@plt+0x6728>
   184ec:	b	18494 <__assert_fail@plt+0x6ad8>
   184f0:	mov	r0, #0
   184f4:	b	18494 <__assert_fail@plt+0x6ad8>
   184f8:	strdeq	r6, [r2], -r0
   184fc:	strdeq	r6, [r2], -fp
   18500:	andeq	r6, r2, r5, lsl #22
   18504:	cmp	r1, #0
   18508:	cmpne	r0, #0
   1850c:	beq	18544 <__assert_fail@plt+0x6b88>
   18510:	push	{r4, r5, r6, lr}
   18514:	umull	r4, r5, r0, r1
   18518:	adds	r3, r5, #0
   1851c:	movne	r3, #1
   18520:	cmp	r4, #0
   18524:	blt	18530 <__assert_fail@plt+0x6b74>
   18528:	cmp	r3, #0
   1852c:	beq	18550 <__assert_fail@plt+0x6b94>
   18530:	bl	117dc <__errno_location@plt>
   18534:	mov	r3, #12
   18538:	str	r3, [r0]
   1853c:	mov	r0, #0
   18540:	pop	{r4, r5, r6, pc}
   18544:	mov	r1, #1
   18548:	mov	r0, r1
   1854c:	b	11518 <calloc@plt>
   18550:	pop	{r4, r5, r6, lr}
   18554:	b	1854c <__assert_fail@plt+0x6b90>
   18558:	push	{r1, r2, r3}
   1855c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   18560:	add	r2, sp, #40	; 0x28
   18564:	ldr	r1, [sp, #36]	; 0x24
   18568:	str	r2, [sp, #4]
   1856c:	cmp	r1, #0
   18570:	beq	185c0 <__assert_fail@plt+0x6c04>
   18574:	movw	r3, #1030	; 0x406
   18578:	mov	r5, r0
   1857c:	cmp	r1, r3
   18580:	beq	185cc <__assert_fail@plt+0x6c10>
   18584:	cmp	r1, #11
   18588:	beq	185b0 <__assert_fail@plt+0x6bf4>
   1858c:	bgt	186c0 <__assert_fail@plt+0x6d04>
   18590:	cmp	r1, #4
   18594:	beq	186d8 <__assert_fail@plt+0x6d1c>
   18598:	bgt	186b8 <__assert_fail@plt+0x6cfc>
   1859c:	cmp	r1, #2
   185a0:	beq	186d8 <__assert_fail@plt+0x6d1c>
   185a4:	bgt	185b0 <__assert_fail@plt+0x6bf4>
   185a8:	cmp	r1, #1
   185ac:	bne	186d8 <__assert_fail@plt+0x6d1c>
   185b0:	mov	r0, r5
   185b4:	bl	1189c <fcntl64@plt>
   185b8:	mov	r4, r0
   185bc:	b	18614 <__assert_fail@plt+0x6c58>
   185c0:	ldr	r2, [sp, #40]	; 0x28
   185c4:	bl	1189c <fcntl64@plt>
   185c8:	b	185b8 <__assert_fail@plt+0x6bfc>
   185cc:	ldr	r6, [pc, #304]	; 18704 <__assert_fail@plt+0x6d48>
   185d0:	add	r3, sp, #44	; 0x2c
   185d4:	str	r3, [sp, #4]
   185d8:	ldr	r7, [r2]
   185dc:	ldr	r3, [r6]
   185e0:	mov	r8, r6
   185e4:	mov	r2, r7
   185e8:	cmp	r3, #0
   185ec:	blt	1867c <__assert_fail@plt+0x6cc0>
   185f0:	bl	1189c <fcntl64@plt>
   185f4:	subs	r4, r0, #0
   185f8:	bge	1860c <__assert_fail@plt+0x6c50>
   185fc:	bl	117dc <__errno_location@plt>
   18600:	ldr	r3, [r0]
   18604:	cmp	r3, #22
   18608:	beq	18628 <__assert_fail@plt+0x6c6c>
   1860c:	mov	r3, #1
   18610:	str	r3, [r8]
   18614:	mov	r0, r4
   18618:	add	sp, sp, #12
   1861c:	pop	{r4, r5, r6, r7, r8, lr}
   18620:	add	sp, sp, #12
   18624:	bx	lr
   18628:	mov	r2, r7
   1862c:	mov	r1, #0
   18630:	mov	r0, r5
   18634:	bl	1189c <fcntl64@plt>
   18638:	subs	r4, r0, #0
   1863c:	mvnge	r3, #0
   18640:	strge	r3, [r6]
   18644:	blt	18614 <__assert_fail@plt+0x6c58>
   18648:	mov	r1, #1
   1864c:	mov	r0, r4
   18650:	bl	1189c <fcntl64@plt>
   18654:	subs	r2, r0, #0
   18658:	bge	1869c <__assert_fail@plt+0x6ce0>
   1865c:	bl	117dc <__errno_location@plt>
   18660:	mov	r5, r0
   18664:	mov	r0, r4
   18668:	ldr	r6, [r5]
   1866c:	mvn	r4, #0
   18670:	bl	11998 <close@plt>
   18674:	str	r6, [r5]
   18678:	b	18614 <__assert_fail@plt+0x6c58>
   1867c:	mov	r1, #0
   18680:	bl	1189c <fcntl64@plt>
   18684:	subs	r4, r0, #0
   18688:	blt	18614 <__assert_fail@plt+0x6c58>
   1868c:	ldr	r3, [r6]
   18690:	cmn	r3, #1
   18694:	bne	18614 <__assert_fail@plt+0x6c58>
   18698:	b	18648 <__assert_fail@plt+0x6c8c>
   1869c:	orr	r2, r2, #1
   186a0:	mov	r1, #2
   186a4:	mov	r0, r4
   186a8:	bl	1189c <fcntl64@plt>
   186ac:	cmn	r0, #1
   186b0:	bne	18614 <__assert_fail@plt+0x6c58>
   186b4:	b	1865c <__assert_fail@plt+0x6ca0>
   186b8:	cmp	r1, #9
   186bc:	b	185ac <__assert_fail@plt+0x6bf0>
   186c0:	movw	r2, #1031	; 0x407
   186c4:	cmp	r1, r2
   186c8:	bgt	186e8 <__assert_fail@plt+0x6d2c>
   186cc:	cmp	r1, r3
   186d0:	movwlt	r3, #1025	; 0x401
   186d4:	blt	186fc <__assert_fail@plt+0x6d40>
   186d8:	ldr	r3, [sp, #4]
   186dc:	mov	r0, r5
   186e0:	ldr	r2, [r3]
   186e4:	b	185c4 <__assert_fail@plt+0x6c08>
   186e8:	movw	r3, #1033	; 0x409
   186ec:	cmp	r1, r3
   186f0:	beq	186d8 <__assert_fail@plt+0x6d1c>
   186f4:	blt	185b0 <__assert_fail@plt+0x6bf4>
   186f8:	movw	r3, #1034	; 0x40a
   186fc:	cmp	r1, r3
   18700:	b	185ac <__assert_fail@plt+0x6bf0>
   18704:	ldrdeq	r7, [r3], -r4
   18708:	push	{r0, r1, r4, lr}
   1870c:	subs	r4, r0, #0
   18710:	bne	18724 <__assert_fail@plt+0x6d68>
   18714:	mov	r0, r4
   18718:	add	sp, sp, #8
   1871c:	pop	{r4, lr}
   18720:	b	11578 <fflush@plt>
   18724:	bl	11740 <__freading@plt>
   18728:	cmp	r0, #0
   1872c:	beq	18714 <__assert_fail@plt+0x6d58>
   18730:	ldr	r3, [r4]
   18734:	tst	r3, #256	; 0x100
   18738:	beq	18714 <__assert_fail@plt+0x6d58>
   1873c:	mov	r3, #1
   18740:	mov	r2, #0
   18744:	mov	r0, r4
   18748:	str	r3, [sp]
   1874c:	mov	r3, #0
   18750:	bl	187a8 <__assert_fail@plt+0x6dec>
   18754:	b	18714 <__assert_fail@plt+0x6d58>
   18758:	push	{r0, r1, r2, r4, r5, lr}
   1875c:	mov	r5, r0
   18760:	bl	117dc <__errno_location@plt>
   18764:	mov	r4, r0
   18768:	mov	r0, r5
   1876c:	ldr	r3, [r4]
   18770:	str	r3, [sp]
   18774:	str	r3, [sp, #4]
   18778:	mov	r3, #0
   1877c:	str	r3, [r4]
   18780:	bl	115a8 <free@plt>
   18784:	ldr	r3, [r4]
   18788:	add	r2, sp, #8
   1878c:	clz	r3, r3
   18790:	lsr	r3, r3, #5
   18794:	add	r3, r2, r3, lsl #2
   18798:	ldr	r3, [r3, #-8]
   1879c:	str	r3, [r4]
   187a0:	add	sp, sp, #12
   187a4:	pop	{r4, r5, pc}
   187a8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   187ac:	mov	r4, r0
   187b0:	ldmib	r0, {ip, lr}
   187b4:	ldr	r8, [sp, #32]
   187b8:	cmp	lr, ip
   187bc:	bne	1882c <__assert_fail@plt+0x6e70>
   187c0:	ldr	ip, [r0, #16]
   187c4:	ldr	lr, [r0, #20]
   187c8:	cmp	lr, ip
   187cc:	bne	1882c <__assert_fail@plt+0x6e70>
   187d0:	ldr	r5, [r0, #36]	; 0x24
   187d4:	cmp	r5, #0
   187d8:	bne	1882c <__assert_fail@plt+0x6e70>
   187dc:	mov	r6, r2
   187e0:	mov	r7, r3
   187e4:	bl	11848 <fileno@plt>
   187e8:	mov	r2, r6
   187ec:	mov	r3, r7
   187f0:	str	r8, [sp]
   187f4:	bl	11698 <lseek64@plt>
   187f8:	mvn	r3, #0
   187fc:	mvn	r2, #0
   18800:	cmp	r1, r3
   18804:	cmpeq	r0, r2
   18808:	mvneq	r0, #0
   1880c:	beq	18824 <__assert_fail@plt+0x6e68>
   18810:	ldr	r3, [r4]
   18814:	strd	r0, [r4, #80]	; 0x50
   18818:	mov	r0, r5
   1881c:	bic	r3, r3, #16
   18820:	str	r3, [r4]
   18824:	add	sp, sp, #8
   18828:	pop	{r4, r5, r6, r7, r8, pc}
   1882c:	mov	r0, r4
   18830:	str	r8, [sp, #32]
   18834:	add	sp, sp, #8
   18838:	pop	{r4, r5, r6, r7, r8, lr}
   1883c:	b	11890 <fseeko64@plt>
   18840:	cmp	r0, #0
   18844:	beq	18864 <__assert_fail@plt+0x6ea8>
   18848:	bge	18868 <__assert_fail@plt+0x6eac>
   1884c:	push	{r4, lr}
   18850:	bl	117dc <__errno_location@plt>
   18854:	mov	r3, #12
   18858:	str	r3, [r0]
   1885c:	mov	r0, #0
   18860:	pop	{r4, pc}
   18864:	mov	r0, #1
   18868:	b	1171c <malloc@plt>
   1886c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18870:	subs	r5, r0, #0
   18874:	mov	r7, r2
   18878:	addeq	r5, sp, #4
   1887c:	mov	r6, r1
   18880:	mov	r0, r5
   18884:	bl	116d4 <mbrtowc@plt>
   18888:	cmp	r7, #0
   1888c:	cmnne	r0, #3
   18890:	mov	r4, r0
   18894:	bls	188b0 <__assert_fail@plt+0x6ef4>
   18898:	mov	r0, #0
   1889c:	bl	24cd0 <__assert_fail@plt+0x13314>
   188a0:	cmp	r0, #0
   188a4:	ldrbeq	r3, [r6]
   188a8:	moveq	r4, #1
   188ac:	streq	r3, [r5]
   188b0:	mov	r0, r4
   188b4:	add	sp, sp, #12
   188b8:	pop	{r4, r5, r6, r7, pc}
   188bc:	cmp	r0, #0
   188c0:	bne	188cc <__assert_fail@plt+0x6f10>
   188c4:	mov	r0, r1
   188c8:	b	18840 <__assert_fail@plt+0x6e84>
   188cc:	cmp	r1, #0
   188d0:	push	{r4, lr}
   188d4:	bne	188e4 <__assert_fail@plt+0x6f28>
   188d8:	bl	18758 <__assert_fail@plt+0x6d9c>
   188dc:	mov	r0, #0
   188e0:	pop	{r4, pc}
   188e4:	blt	188f0 <__assert_fail@plt+0x6f34>
   188e8:	pop	{r4, lr}
   188ec:	b	11644 <realloc@plt>
   188f0:	bl	117dc <__errno_location@plt>
   188f4:	mov	r3, #12
   188f8:	str	r3, [r0]
   188fc:	b	188dc <__assert_fail@plt+0x6f20>
   18900:	umull	r2, r3, r1, r2
   18904:	cmp	r3, #0
   18908:	bne	18914 <__assert_fail@plt+0x6f58>
   1890c:	mov	r1, r2
   18910:	b	188bc <__assert_fail@plt+0x6f00>
   18914:	push	{r4, lr}
   18918:	bl	117dc <__errno_location@plt>
   1891c:	mov	r3, #12
   18920:	str	r3, [r0]
   18924:	mov	r0, #0
   18928:	pop	{r4, pc}
   1892c:	cmp	r1, #0
   18930:	add	r3, r1, #31
   18934:	movge	r3, r1
   18938:	rsbs	r2, r1, #0
   1893c:	asr	r3, r3, #5
   18940:	and	r2, r2, #31
   18944:	and	r1, r1, #31
   18948:	rsbpl	r1, r2, #0
   1894c:	mov	ip, #1
   18950:	ldr	r2, [r0, r3, lsl #2]
   18954:	orr	r1, r2, ip, lsl r1
   18958:	str	r1, [r0, r3, lsl #2]
   1895c:	bx	lr
   18960:	asr	r3, r1, #5
   18964:	and	r1, r1, #31
   18968:	ldr	r0, [r0, r3, lsl #2]
   1896c:	lsr	r0, r0, r1
   18970:	and	r0, r0, #1
   18974:	bx	lr
   18978:	sub	r3, r0, #4
   1897c:	add	r0, r0, #28
   18980:	ldr	r2, [r3, #4]!
   18984:	mvn	r2, r2
   18988:	cmp	r3, r0
   1898c:	str	r2, [r3]
   18990:	bne	18980 <__assert_fail@plt+0x6fc4>
   18994:	bx	lr
   18998:	sub	r3, r0, #4
   1899c:	sub	r1, r1, #4
   189a0:	add	r0, r0, #28
   189a4:	ldr	r2, [r3, #4]!
   189a8:	ldr	ip, [r1, #4]!
   189ac:	cmp	r3, r0
   189b0:	orr	r2, r2, ip
   189b4:	str	r2, [r3]
   189b8:	bne	189a4 <__assert_fail@plt+0x6fe8>
   189bc:	bx	lr
   189c0:	sub	r3, r0, #4
   189c4:	sub	r1, r1, #4
   189c8:	add	r0, r0, #28
   189cc:	ldr	r2, [r3, #4]!
   189d0:	ldr	ip, [r1, #4]!
   189d4:	cmp	r3, r0
   189d8:	and	r2, r2, ip
   189dc:	str	r2, [r3]
   189e0:	bne	189cc <__assert_fail@plt+0x7010>
   189e4:	bx	lr
   189e8:	ldr	r3, [r0, #80]	; 0x50
   189ec:	cmp	r3, #1
   189f0:	ldreq	r3, [r0, #4]
   189f4:	ldrne	r3, [r0, #8]
   189f8:	ldrbeq	r0, [r3, r1]
   189fc:	ldrne	r0, [r3, r1, lsl #2]
   18a00:	bx	lr
   18a04:	ldr	r3, [r0, #36]	; 0x24
   18a08:	ldr	r2, [r0, #48]	; 0x30
   18a0c:	cmp	r3, r2
   18a10:	movlt	r2, r3
   18a14:	ldr	r3, [r0, #28]
   18a18:	cmp	r3, r2
   18a1c:	blt	18a2c <__assert_fail@plt+0x7070>
   18a20:	str	r3, [r0, #28]
   18a24:	str	r3, [r0, #32]
   18a28:	bx	lr
   18a2c:	ldr	r1, [r0]
   18a30:	ldr	ip, [r0, #24]
   18a34:	add	r1, r1, r3
   18a38:	ldrb	r1, [r1, ip]
   18a3c:	ldr	ip, [r0, #64]	; 0x40
   18a40:	ldrb	ip, [ip, r1]
   18a44:	ldr	r1, [r0, #4]
   18a48:	strb	ip, [r1, r3]
   18a4c:	add	r3, r3, #1
   18a50:	b	18a18 <__assert_fail@plt+0x705c>
   18a54:	mov	r2, r1
   18a58:	clz	r1, r1
   18a5c:	lsr	r1, r1, #5
   18a60:	cmp	r0, #0
   18a64:	moveq	r1, #1
   18a68:	cmp	r1, #0
   18a6c:	bne	18a90 <__assert_fail@plt+0x70d4>
   18a70:	ldr	r3, [r0, #4]
   18a74:	ldr	ip, [r2, #4]
   18a78:	cmp	r3, ip
   18a7c:	bne	18a94 <__assert_fail@plt+0x70d8>
   18a80:	subs	r3, r3, #1
   18a84:	bpl	18a9c <__assert_fail@plt+0x70e0>
   18a88:	mov	r1, #1
   18a8c:	b	18a94 <__assert_fail@plt+0x70d8>
   18a90:	mov	r1, #0
   18a94:	mov	r0, r1
   18a98:	bx	lr
   18a9c:	push	{lr}		; (str lr, [sp, #-4]!)
   18aa0:	ldr	lr, [r0, #8]
   18aa4:	ldr	ip, [r2, #8]
   18aa8:	ldr	lr, [lr, r3, lsl #2]
   18aac:	ldr	ip, [ip, r3, lsl #2]
   18ab0:	cmp	lr, ip
   18ab4:	bne	18ac4 <__assert_fail@plt+0x7108>
   18ab8:	subs	r3, r3, #1
   18abc:	bpl	18aa0 <__assert_fail@plt+0x70e4>
   18ac0:	mov	r1, #1
   18ac4:	mov	r0, r1
   18ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   18acc:	ldr	r3, [r0, #4]
   18ad0:	cmp	r3, #0
   18ad4:	ble	18b00 <__assert_fail@plt+0x7144>
   18ad8:	sub	r3, r3, #1
   18adc:	ldr	ip, [r0, #8]
   18ae0:	mov	r0, #0
   18ae4:	cmp	r0, r3
   18ae8:	bcc	18b08 <__assert_fail@plt+0x714c>
   18aec:	ldr	r3, [ip, r0, lsl #2]
   18af0:	cmp	r3, r1
   18af4:	bne	18b00 <__assert_fail@plt+0x7144>
   18af8:	add	r0, r0, #1
   18afc:	bx	lr
   18b00:	mov	r0, #0
   18b04:	bx	lr
   18b08:	push	{lr}		; (str lr, [sp, #-4]!)
   18b0c:	add	r2, r0, r3
   18b10:	lsr	r2, r2, #1
   18b14:	ldr	lr, [ip, r2, lsl #2]
   18b18:	cmp	lr, r1
   18b1c:	addlt	r0, r2, #1
   18b20:	movge	r3, r2
   18b24:	cmp	r0, r3
   18b28:	bcc	18b0c <__assert_fail@plt+0x7150>
   18b2c:	ldr	r3, [ip, r0, lsl #2]
   18b30:	cmp	r3, r1
   18b34:	addeq	r0, r0, #1
   18b38:	movne	r0, #0
   18b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b40:	push	{r4, r5, r6, lr}
   18b44:	mov	r4, r0
   18b48:	mov	r5, r1
   18b4c:	mov	r6, r2
   18b50:	ldr	r3, [r4, #4]
   18b54:	cmp	r3, #0
   18b58:	bne	18bb0 <__assert_fail@plt+0x71f4>
   18b5c:	ldr	r3, [r4, #8]
   18b60:	cmp	r3, #0
   18b64:	bne	18bb0 <__assert_fail@plt+0x71f4>
   18b68:	mov	r1, r4
   18b6c:	mov	r0, r6
   18b70:	blx	r5
   18b74:	cmp	r0, #0
   18b78:	popne	{r4, r5, r6, pc}
   18b7c:	ldr	r1, [r4]
   18b80:	cmp	r1, #0
   18b84:	popeq	{r4, r5, r6, pc}
   18b88:	ldr	r3, [r1, #8]
   18b8c:	sub	r4, r3, r4
   18b90:	cmp	r3, #0
   18b94:	clz	r4, r4
   18b98:	moveq	r2, #1
   18b9c:	lsr	r4, r4, #5
   18ba0:	movne	r2, r4
   18ba4:	mov	r4, r1
   18ba8:	cmp	r2, #0
   18bac:	bne	18b68 <__assert_fail@plt+0x71ac>
   18bb0:	mov	r4, r3
   18bb4:	b	18b50 <__assert_fail@plt+0x7194>
   18bb8:	ldr	r3, [r1, #40]	; 0x28
   18bbc:	ldr	ip, [r1, #56]	; 0x38
   18bc0:	cmp	ip, r3
   18bc4:	bgt	18bdc <__assert_fail@plt+0x7220>
   18bc8:	mov	r3, #2
   18bcc:	strb	r3, [r0, #4]
   18bd0:	mov	r3, #0
   18bd4:	mov	r0, r3
   18bd8:	bx	lr
   18bdc:	push	{r4, lr}
   18be0:	ldr	lr, [r1, #4]
   18be4:	ldr	r4, [r1, #80]	; 0x50
   18be8:	ldrb	ip, [lr, r3]
   18bec:	cmp	r4, #1
   18bf0:	strb	ip, [r0]
   18bf4:	ble	18c20 <__assert_fail@plt+0x7264>
   18bf8:	ldr	r4, [r1, #28]
   18bfc:	cmp	r3, r4
   18c00:	beq	18c20 <__assert_fail@plt+0x7264>
   18c04:	ldr	r4, [r1, #8]
   18c08:	ldr	r4, [r4, r3, lsl #2]
   18c0c:	cmn	r4, #1
   18c10:	bne	18c20 <__assert_fail@plt+0x7264>
   18c14:	mov	r3, #1
   18c18:	strb	r3, [r0, #4]
   18c1c:	b	18cac <__assert_fail@plt+0x72f0>
   18c20:	cmp	ip, #92	; 0x5c
   18c24:	bne	18c4c <__assert_fail@plt+0x7290>
   18c28:	tst	r2, #1
   18c2c:	beq	18c14 <__assert_fail@plt+0x7258>
   18c30:	ldr	r2, [r1, #48]	; 0x30
   18c34:	add	r3, r3, #1
   18c38:	cmp	r3, r2
   18c3c:	strlt	r3, [r1, #40]	; 0x28
   18c40:	ldrblt	r3, [lr, r3]
   18c44:	strblt	r3, [r0]
   18c48:	b	18c14 <__assert_fail@plt+0x7258>
   18c4c:	cmp	ip, #91	; 0x5b
   18c50:	bne	18cc4 <__assert_fail@plt+0x7308>
   18c54:	ldr	r1, [r1, #48]	; 0x30
   18c58:	add	ip, r3, #1
   18c5c:	cmp	ip, r1
   18c60:	bge	18c8c <__assert_fail@plt+0x72d0>
   18c64:	add	r3, lr, r3
   18c68:	ldrb	r3, [r3, #1]
   18c6c:	cmp	r3, #58	; 0x3a
   18c70:	strb	r3, [r0]
   18c74:	beq	18cb4 <__assert_fail@plt+0x72f8>
   18c78:	cmp	r3, #61	; 0x3d
   18c7c:	beq	18ca0 <__assert_fail@plt+0x72e4>
   18c80:	cmp	r3, #46	; 0x2e
   18c84:	moveq	r3, #26
   18c88:	beq	18ca4 <__assert_fail@plt+0x72e8>
   18c8c:	mov	r3, #1
   18c90:	mov	r2, #91	; 0x5b
   18c94:	strb	r2, [r0]
   18c98:	strb	r3, [r0, #4]
   18c9c:	b	18cac <__assert_fail@plt+0x72f0>
   18ca0:	mov	r3, #28
   18ca4:	strb	r3, [r0, #4]
   18ca8:	mov	r3, #2
   18cac:	mov	r0, r3
   18cb0:	pop	{r4, pc}
   18cb4:	tst	r2, #4
   18cb8:	beq	18c8c <__assert_fail@plt+0x72d0>
   18cbc:	mov	r3, #30
   18cc0:	b	18ca4 <__assert_fail@plt+0x72e8>
   18cc4:	cmp	ip, #93	; 0x5d
   18cc8:	beq	18cf0 <__assert_fail@plt+0x7334>
   18ccc:	cmp	ip, #94	; 0x5e
   18cd0:	moveq	r3, #25
   18cd4:	beq	18ce4 <__assert_fail@plt+0x7328>
   18cd8:	cmp	ip, #45	; 0x2d
   18cdc:	moveq	r3, #22
   18ce0:	bne	18c14 <__assert_fail@plt+0x7258>
   18ce4:	strb	r3, [r0, #4]
   18ce8:	mov	r3, #1
   18cec:	b	18cac <__assert_fail@plt+0x72f0>
   18cf0:	mov	r3, #21
   18cf4:	b	18ce4 <__assert_fail@plt+0x7328>
   18cf8:	ldrb	r3, [r1, #24]
   18cfc:	cmp	r3, #17
   18d00:	bne	18d18 <__assert_fail@plt+0x735c>
   18d04:	ldr	r3, [r1, #20]
   18d08:	cmp	r0, r3
   18d0c:	ldrbeq	r3, [r1, #26]
   18d10:	orreq	r3, r3, #8
   18d14:	strbeq	r3, [r1, #26]
   18d18:	mov	r0, #0
   18d1c:	bx	lr
   18d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d24:	sub	sp, sp, #36	; 0x24
   18d28:	mov	r6, r2
   18d2c:	mov	r9, #12
   18d30:	mov	fp, r0
   18d34:	mov	r4, r1
   18d38:	mov	r8, #0
   18d3c:	ldr	sl, [r0, #84]	; 0x54
   18d40:	str	r3, [sp, #12]
   18d44:	ldr	r2, [sp, #12]
   18d48:	ldr	r3, [sl, #24]
   18d4c:	mla	r9, r9, r2, r3
   18d50:	mov	r3, #1
   18d54:	ldr	r2, [sp, #72]	; 0x48
   18d58:	lsl	r3, r3, r6
   18d5c:	str	r3, [sp, #8]
   18d60:	mvn	r3, r3
   18d64:	str	r3, [sp, #20]
   18d68:	mov	r3, #24
   18d6c:	mla	r3, r2, r3, r3
   18d70:	str	r3, [sp, #28]
   18d74:	ldr	r3, [r9, #4]
   18d78:	cmp	r3, r8
   18d7c:	asrle	r0, r4, #1
   18d80:	ble	18e24 <__assert_fail@plt+0x7468>
   18d84:	ldr	r3, [r9, #8]
   18d88:	ldr	r7, [r3, r8, lsl #2]
   18d8c:	ldr	r3, [sl]
   18d90:	add	r2, r3, r7, lsl #3
   18d94:	ldrb	r2, [r2, #4]
   18d98:	cmp	r2, #8
   18d9c:	beq	18e9c <__assert_fail@plt+0x74e0>
   18da0:	cmp	r2, #9
   18da4:	beq	18eb4 <__assert_fail@plt+0x74f8>
   18da8:	cmp	r2, #4
   18dac:	bne	18e94 <__assert_fail@plt+0x74d8>
   18db0:	ldr	r3, [sp, #72]	; 0x48
   18db4:	cmn	r3, #1
   18db8:	beq	18e94 <__assert_fail@plt+0x74d8>
   18dbc:	mov	r3, #12
   18dc0:	ldr	r5, [fp, #116]	; 0x74
   18dc4:	mul	r3, r3, r7
   18dc8:	str	r3, [sp, #16]
   18dcc:	ldr	r3, [sp, #28]
   18dd0:	add	r5, r5, r3
   18dd4:	and	r3, r4, #2
   18dd8:	str	r3, [sp, #24]
   18ddc:	ldr	r3, [r5, #-24]	; 0xffffffe8
   18de0:	cmp	r3, r7
   18de4:	bne	18e84 <__assert_fail@plt+0x74c8>
   18de8:	cmp	r6, #31
   18dec:	bgt	18e00 <__assert_fail@plt+0x7444>
   18df0:	ldr	r3, [r5, #-8]
   18df4:	ldr	r2, [sp, #8]
   18df8:	tst	r2, r3
   18dfc:	beq	18e84 <__assert_fail@plt+0x74c8>
   18e00:	ldr	r2, [sp, #16]
   18e04:	ldr	r3, [sl, #20]
   18e08:	add	r3, r3, r2
   18e0c:	ldr	r2, [sp, #12]
   18e10:	ldr	r3, [r3, #8]
   18e14:	ldr	r3, [r3]
   18e18:	cmp	r2, r3
   18e1c:	bne	18e2c <__assert_fail@plt+0x7470>
   18e20:	sbfx	r0, r4, #0, #1
   18e24:	add	sp, sp, #36	; 0x24
   18e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e2c:	ldr	r2, [sp, #72]	; 0x48
   18e30:	mov	r1, r4
   18e34:	mov	r0, fp
   18e38:	str	r2, [sp]
   18e3c:	mov	r2, r6
   18e40:	bl	18d20 <__assert_fail@plt+0x7364>
   18e44:	cmn	r0, #1
   18e48:	bne	18e54 <__assert_fail@plt+0x7498>
   18e4c:	mvn	r0, #0
   18e50:	b	18e24 <__assert_fail@plt+0x7468>
   18e54:	cmp	r0, #0
   18e58:	bne	18e70 <__assert_fail@plt+0x74b4>
   18e5c:	ldr	r3, [sp, #24]
   18e60:	cmp	r3, #0
   18e64:	beq	18e70 <__assert_fail@plt+0x74b4>
   18e68:	mov	r0, #0
   18e6c:	b	18e24 <__assert_fail@plt+0x7468>
   18e70:	cmp	r6, #31
   18e74:	ldrle	r3, [r5, #-8]
   18e78:	ldrle	r2, [sp, #20]
   18e7c:	andle	r3, r3, r2
   18e80:	strle	r3, [r5, #-8]
   18e84:	add	r5, r5, #24
   18e88:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   18e8c:	cmp	r3, #0
   18e90:	bne	18ddc <__assert_fail@plt+0x7420>
   18e94:	add	r8, r8, #1
   18e98:	b	18d74 <__assert_fail@plt+0x73b8>
   18e9c:	tst	r4, #1
   18ea0:	beq	18e94 <__assert_fail@plt+0x74d8>
   18ea4:	ldr	r3, [r3, r7, lsl #3]
   18ea8:	cmp	r3, r6
   18eac:	bne	18e94 <__assert_fail@plt+0x74d8>
   18eb0:	b	18e4c <__assert_fail@plt+0x7490>
   18eb4:	tst	r4, #2
   18eb8:	beq	18e94 <__assert_fail@plt+0x74d8>
   18ebc:	ldr	r3, [r3, r7, lsl #3]
   18ec0:	cmp	r3, r6
   18ec4:	bne	18e94 <__assert_fail@plt+0x74d8>
   18ec8:	b	18e68 <__assert_fail@plt+0x74ac>
   18ecc:	push	{r4, r5, lr}
   18ed0:	mov	lr, #24
   18ed4:	ldr	r5, [r0, #116]	; 0x74
   18ed8:	ldr	ip, [sp, #12]
   18edc:	ldr	r4, [sp, #16]
   18ee0:	mla	r1, lr, r1, r5
   18ee4:	ldr	lr, [r1, #8]
   18ee8:	cmp	lr, ip
   18eec:	bgt	18f24 <__assert_fail@plt+0x7568>
   18ef0:	ldr	r1, [r1, #12]
   18ef4:	cmp	r1, ip
   18ef8:	blt	18f30 <__assert_fail@plt+0x7574>
   18efc:	cmp	r1, ip
   18f00:	moveq	r1, #2
   18f04:	movne	r1, #0
   18f08:	cmp	lr, ip
   18f0c:	orreq	r1, r1, #1
   18f10:	cmp	r1, #0
   18f14:	beq	18f28 <__assert_fail@plt+0x756c>
   18f18:	str	r4, [sp, #12]
   18f1c:	pop	{r4, r5, lr}
   18f20:	b	18d20 <__assert_fail@plt+0x7364>
   18f24:	mvn	r1, #0
   18f28:	mov	r0, r1
   18f2c:	pop	{r4, r5, pc}
   18f30:	mov	r1, #1
   18f34:	b	18f28 <__assert_fail@plt+0x756c>
   18f38:	push	{r4, r5, lr}
   18f3c:	mov	r3, #0
   18f40:	mov	r5, #24
   18f44:	ldr	r4, [r0, #108]	; 0x6c
   18f48:	mov	ip, r4
   18f4c:	cmp	ip, r3
   18f50:	bgt	18f80 <__assert_fail@plt+0x75c4>
   18f54:	cmp	r4, r3
   18f58:	mvnle	r3, #0
   18f5c:	ble	18f78 <__assert_fail@plt+0x75bc>
   18f60:	ldr	r0, [r0, #116]	; 0x74
   18f64:	mov	r2, #24
   18f68:	mla	r2, r2, r3, r0
   18f6c:	ldr	r2, [r2, #4]
   18f70:	cmp	r2, r1
   18f74:	mvnne	r3, #0
   18f78:	mov	r0, r3
   18f7c:	pop	{r4, r5, pc}
   18f80:	ldr	lr, [r0, #116]	; 0x74
   18f84:	add	r2, ip, r3
   18f88:	asr	r2, r2, #1
   18f8c:	mla	lr, r5, r2, lr
   18f90:	ldr	lr, [lr, #4]
   18f94:	cmp	lr, r1
   18f98:	addlt	r3, r2, #1
   18f9c:	movge	ip, r2
   18fa0:	b	18f4c <__assert_fail@plt+0x7590>
   18fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fa8:	mov	r6, r1
   18fac:	sub	sp, sp, #20
   18fb0:	mov	r1, r3
   18fb4:	mov	r5, r0
   18fb8:	mov	sl, r2
   18fbc:	mov	r7, r3
   18fc0:	ldr	r9, [r0, #84]	; 0x54
   18fc4:	mov	r4, #0
   18fc8:	bl	18f38 <__assert_fail@plt+0x757c>
   18fcc:	str	r0, [sp, #8]
   18fd0:	mov	r0, r5
   18fd4:	ldr	r1, [sp, #60]	; 0x3c
   18fd8:	bl	18f38 <__assert_fail@plt+0x757c>
   18fdc:	str	r0, [sp, #12]
   18fe0:	ldr	r3, [r6, #4]
   18fe4:	cmp	r3, r4
   18fe8:	bgt	18ff8 <__assert_fail@plt+0x763c>
   18fec:	mov	r0, #0
   18ff0:	add	sp, sp, #20
   18ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff8:	ldr	r3, [r6, #8]
   18ffc:	mov	r0, r5
   19000:	ldr	r2, [r5, #116]	; 0x74
   19004:	ldr	r1, [r3, r4, lsl #2]
   19008:	mov	r3, #24
   1900c:	mul	r3, r3, r1
   19010:	ldr	r2, [r2, r3]
   19014:	ldr	r3, [r9]
   19018:	ldr	r8, [r3, r2, lsl #3]
   1901c:	str	r7, [sp]
   19020:	ldr	r3, [sp, #8]
   19024:	mov	r2, r8
   19028:	str	r3, [sp, #4]
   1902c:	mov	r3, sl
   19030:	bl	18ecc <__assert_fail@plt+0x7510>
   19034:	ldr	r3, [sp, #12]
   19038:	mov	fp, r0
   1903c:	mov	r2, r8
   19040:	mov	r0, r5
   19044:	ldr	r1, [r6, #8]
   19048:	str	r3, [sp, #4]
   1904c:	ldr	r3, [sp, #60]	; 0x3c
   19050:	str	r3, [sp]
   19054:	ldr	r1, [r1, r4, lsl #2]
   19058:	ldr	r3, [sp, #56]	; 0x38
   1905c:	bl	18ecc <__assert_fail@plt+0x7510>
   19060:	cmp	fp, r0
   19064:	addeq	r4, r4, #1
   19068:	beq	18fe0 <__assert_fail@plt+0x7624>
   1906c:	mov	r0, #1
   19070:	b	18ff0 <__assert_fail@plt+0x7634>
   19074:	ldr	r3, [r0, #80]	; 0x50
   19078:	push	{r4, r5, r6, lr}
   1907c:	mov	r4, r0
   19080:	mov	r5, r1
   19084:	cmp	r3, #1
   19088:	ble	190d8 <__assert_fail@plt+0x771c>
   1908c:	cmn	r1, #-1073741823	; 0xc0000001
   19090:	bls	1909c <__assert_fail@plt+0x76e0>
   19094:	mov	r0, #12
   19098:	pop	{r4, r5, r6, pc}
   1909c:	lsl	r6, r1, #2
   190a0:	ldr	r0, [r0, #8]
   190a4:	mov	r1, r6
   190a8:	bl	188bc <__assert_fail@plt+0x6f00>
   190ac:	cmp	r0, #0
   190b0:	beq	19094 <__assert_fail@plt+0x76d8>
   190b4:	str	r0, [r4, #8]
   190b8:	ldr	r0, [r4, #12]
   190bc:	cmp	r0, #0
   190c0:	beq	190d8 <__assert_fail@plt+0x771c>
   190c4:	mov	r1, r6
   190c8:	bl	188bc <__assert_fail@plt+0x6f00>
   190cc:	cmp	r0, #0
   190d0:	beq	19094 <__assert_fail@plt+0x76d8>
   190d4:	str	r0, [r4, #12]
   190d8:	ldrb	r3, [r4, #75]	; 0x4b
   190dc:	cmp	r3, #0
   190e0:	beq	190fc <__assert_fail@plt+0x7740>
   190e4:	mov	r1, r5
   190e8:	ldr	r0, [r4, #4]
   190ec:	bl	188bc <__assert_fail@plt+0x6f00>
   190f0:	cmp	r0, #0
   190f4:	beq	19094 <__assert_fail@plt+0x76d8>
   190f8:	str	r0, [r4, #4]
   190fc:	mov	r0, #0
   19100:	str	r5, [r4, #36]	; 0x24
   19104:	pop	{r4, r5, r6, pc}
   19108:	push	{r4, r5, r6, lr}
   1910c:	mov	r5, r1
   19110:	mov	r4, r0
   19114:	ldm	r0, {r1, r3}
   19118:	cmp	r1, r3
   1911c:	bne	19144 <__assert_fail@plt+0x7788>
   19120:	add	r1, r1, #1
   19124:	ldr	r0, [r0, #8]
   19128:	lsl	r3, r1, #1
   1912c:	lsl	r1, r1, #3
   19130:	str	r3, [r4]
   19134:	bl	188bc <__assert_fail@plt+0x6f00>
   19138:	cmp	r0, #0
   1913c:	popeq	{r4, r5, r6, pc}
   19140:	str	r0, [r4, #8]
   19144:	ldr	r3, [r4, #4]
   19148:	mov	r0, #1
   1914c:	ldr	r2, [r4, #8]
   19150:	add	r1, r3, #1
   19154:	str	r1, [r4, #4]
   19158:	str	r5, [r2, r3, lsl #2]
   1915c:	pop	{r4, r5, r6, pc}
   19160:	mov	r2, #32
   19164:	mov	r1, #0
   19168:	b	11818 <memset@plt>
   1916c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19170:	mov	r9, r3
   19174:	mov	r4, r0
   19178:	mov	r7, r1
   1917c:	mov	r8, r2
   19180:	ldr	r3, [r0, #64]	; 0x40
   19184:	cmp	r3, #31
   19188:	bne	191b0 <__assert_fail@plt+0x77f4>
   1918c:	mov	r0, #996	; 0x3e4
   19190:	bl	18840 <__assert_fail@plt+0x6e84>
   19194:	subs	r5, r0, #0
   19198:	beq	19218 <__assert_fail@plt+0x785c>
   1919c:	ldr	r3, [r4, #56]	; 0x38
   191a0:	str	r0, [r4, #56]	; 0x38
   191a4:	str	r3, [r0]
   191a8:	mov	r3, #0
   191ac:	str	r3, [r4, #64]	; 0x40
   191b0:	ldr	r6, [r4, #56]	; 0x38
   191b4:	mov	r2, #0
   191b8:	cmp	r7, r2
   191bc:	ldr	ip, [r4, #64]	; 0x40
   191c0:	add	r3, ip, #1
   191c4:	lsl	ip, ip, #5
   191c8:	add	lr, r6, ip
   191cc:	str	r3, [r4, #64]	; 0x40
   191d0:	add	r5, ip, #4
   191d4:	add	r3, lr, #24
   191d8:	add	ip, ip, #16
   191dc:	stmib	lr, {r2, r7, r8}
   191e0:	add	ip, r6, ip
   191e4:	add	r5, r6, r5
   191e8:	ldm	r9, {r0, r1}
   191ec:	stm	r3, {r0, r1}
   191f0:	ldrb	r3, [ip, #14]
   191f4:	bic	r3, r3, #12
   191f8:	strb	r3, [ip, #14]
   191fc:	mvn	r3, #0
   19200:	str	r2, [lr, #16]
   19204:	str	r2, [lr, #20]
   19208:	str	r3, [lr, #32]
   1920c:	strne	r5, [r7]
   19210:	cmp	r8, #0
   19214:	strne	r5, [r8]
   19218:	mov	r0, r5
   1921c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19220:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19224:	mov	r5, r0
   19228:	mov	r7, r1
   1922c:	add	r6, sp, #4
   19230:	ldr	r4, [r0]
   19234:	mov	r2, #0
   19238:	add	r3, r5, #20
   1923c:	mov	r1, r2
   19240:	mov	r0, r7
   19244:	bl	1916c <__assert_fail@plt+0x77b0>
   19248:	cmp	r0, #0
   1924c:	str	r0, [r6]
   19250:	beq	192b0 <__assert_fail@plt+0x78f4>
   19254:	str	r4, [r0]
   19258:	ldr	r4, [r6]
   1925c:	ldrb	r3, [r4, #26]
   19260:	orr	r3, r3, #4
   19264:	strb	r3, [r4, #26]
   19268:	ldr	r3, [r5, #4]
   1926c:	cmp	r3, #0
   19270:	addne	r6, r4, #4
   19274:	bne	19290 <__assert_fail@plt+0x78d4>
   19278:	ldr	r2, [r5, #8]
   1927c:	cmp	r2, r3
   19280:	cmpne	r2, #0
   19284:	beq	19298 <__assert_fail@plt+0x78dc>
   19288:	add	r6, r4, #8
   1928c:	mov	r3, r2
   19290:	mov	r5, r3
   19294:	b	19234 <__assert_fail@plt+0x7878>
   19298:	ldr	r2, [r5]
   1929c:	mov	r3, r5
   192a0:	ldr	r4, [r4]
   192a4:	cmp	r2, #0
   192a8:	bne	192b8 <__assert_fail@plt+0x78fc>
   192ac:	ldr	r0, [sp, #4]
   192b0:	add	sp, sp, #12
   192b4:	pop	{r4, r5, r6, r7, pc}
   192b8:	mov	r5, r2
   192bc:	b	19278 <__assert_fail@plt+0x78bc>
   192c0:	push	{r0, r1, r2, r4, r5, lr}
   192c4:	mov	r4, #0
   192c8:	mov	r5, #0
   192cc:	strd	r4, [sp]
   192d0:	strb	r3, [sp, #4]
   192d4:	mov	r3, sp
   192d8:	bl	1916c <__assert_fail@plt+0x77b0>
   192dc:	add	sp, sp, #12
   192e0:	pop	{r4, r5, pc}
   192e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192e8:	ldr	r4, [r2, #4]
   192ec:	ldr	r9, [r1]
   192f0:	ldrb	r1, [r1, #28]
   192f4:	adds	r3, r4, #0
   192f8:	movne	r3, #1
   192fc:	ands	r3, r3, r1, lsr #4
   19300:	beq	19320 <__assert_fail@plt+0x7964>
   19304:	ldr	r1, [r2, #20]
   19308:	cmp	r1, #31
   1930c:	bgt	193b8 <__assert_fail@plt+0x79fc>
   19310:	ldr	r3, [r9, #80]	; 0x50
   19314:	lsr	r3, r3, r1
   19318:	tst	r3, #1
   1931c:	beq	193b8 <__assert_fail@plt+0x79fc>
   19320:	mov	sl, r2
   19324:	mov	r2, #0
   19328:	mov	r1, r2
   1932c:	mov	r3, #8
   19330:	mov	r6, r0
   19334:	mov	r0, r9
   19338:	bl	192c0 <__assert_fail@plt+0x7904>
   1933c:	mov	r2, #0
   19340:	mov	r8, r0
   19344:	mov	r3, #9
   19348:	mov	r1, r2
   1934c:	mov	r0, r9
   19350:	bl	192c0 <__assert_fail@plt+0x7904>
   19354:	cmp	r4, #0
   19358:	mov	r5, r0
   1935c:	moveq	r7, r0
   19360:	beq	1937c <__assert_fail@plt+0x79c0>
   19364:	mov	r2, r0
   19368:	mov	r3, #16
   1936c:	mov	r1, r4
   19370:	mov	r0, r9
   19374:	bl	192c0 <__assert_fail@plt+0x7904>
   19378:	mov	r7, r0
   1937c:	mov	r3, #16
   19380:	mov	r2, r7
   19384:	mov	r1, r8
   19388:	mov	r0, r9
   1938c:	bl	192c0 <__assert_fail@plt+0x7904>
   19390:	cmp	r7, #0
   19394:	cmpne	r0, #0
   19398:	mov	r4, r0
   1939c:	beq	193ac <__assert_fail@plt+0x79f0>
   193a0:	cmp	r5, #0
   193a4:	cmpne	r8, #0
   193a8:	bne	193c0 <__assert_fail@plt+0x7a04>
   193ac:	mov	r3, #12
   193b0:	mov	r4, #0
   193b4:	str	r3, [r6]
   193b8:	mov	r0, r4
   193bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193c0:	ldr	r3, [sl, #20]
   193c4:	str	r3, [r5, #20]
   193c8:	str	r3, [r8, #20]
   193cc:	ldrb	r3, [sl, #26]
   193d0:	ldrb	r2, [r5, #26]
   193d4:	ubfx	r3, r3, #3, #1
   193d8:	bfi	r2, r3, #3, #1
   193dc:	strb	r2, [r5, #26]
   193e0:	ldrb	r2, [r8, #26]
   193e4:	bfi	r2, r3, #3, #1
   193e8:	strb	r2, [r8, #26]
   193ec:	b	193b8 <__assert_fail@plt+0x79fc>
   193f0:	push	{r0, r1, r2, r4, r5, lr}
   193f4:	mov	r3, #0
   193f8:	mov	r5, r0
   193fc:	mov	r4, r1
   19400:	ldr	r2, [r1, #4]
   19404:	str	r3, [sp, #4]
   19408:	cmp	r2, r3
   1940c:	beq	19434 <__assert_fail@plt+0x7a78>
   19410:	ldrb	r3, [r2, #24]
   19414:	cmp	r3, #17
   19418:	bne	19434 <__assert_fail@plt+0x7a78>
   1941c:	mov	r1, r0
   19420:	add	r0, sp, #4
   19424:	bl	192e4 <__assert_fail@plt+0x7928>
   19428:	cmp	r0, #0
   1942c:	str	r0, [r4, #4]
   19430:	strne	r4, [r0]
   19434:	ldr	r2, [r4, #8]
   19438:	cmp	r2, #0
   1943c:	beq	19464 <__assert_fail@plt+0x7aa8>
   19440:	ldrb	r3, [r2, #24]
   19444:	cmp	r3, #17
   19448:	bne	19464 <__assert_fail@plt+0x7aa8>
   1944c:	mov	r1, r5
   19450:	add	r0, sp, #4
   19454:	bl	192e4 <__assert_fail@plt+0x7928>
   19458:	cmp	r0, #0
   1945c:	str	r0, [r4, #8]
   19460:	strne	r4, [r0]
   19464:	ldr	r0, [sp, #4]
   19468:	add	sp, sp, #12
   1946c:	pop	{r4, r5, pc}
   19470:	mov	r3, #1
   19474:	push	{r4, r5, r6, lr}
   19478:	mov	r4, r0
   1947c:	mov	r5, r1
   19480:	str	r3, [r0]
   19484:	str	r3, [r0, #4]
   19488:	mov	r0, #4
   1948c:	bl	18840 <__assert_fail@plt+0x6e84>
   19490:	cmp	r0, #0
   19494:	str	r0, [r4, #8]
   19498:	streq	r0, [r4]
   1949c:	streq	r0, [r4, #4]
   194a0:	moveq	r0, #12
   194a4:	strne	r5, [r0]
   194a8:	movne	r0, #0
   194ac:	pop	{r4, r5, r6, pc}
   194b0:	push	{r4, lr}
   194b4:	mov	r3, #0
   194b8:	mov	r4, r0
   194bc:	lsl	r0, r1, #2
   194c0:	stm	r4, {r1, r3}
   194c4:	bl	18840 <__assert_fail@plt+0x6e84>
   194c8:	cmp	r0, #0
   194cc:	str	r0, [r4, #8]
   194d0:	moveq	r0, #12
   194d4:	movne	r0, #0
   194d8:	pop	{r4, pc}
   194dc:	push	{r4, r5, r6, r7, r8, lr}
   194e0:	sub	sp, sp, #80	; 0x50
   194e4:	mov	r4, r0
   194e8:	add	r7, sp, #8
   194ec:	add	r6, r0, #16
   194f0:	ldr	r5, [r0, #28]
   194f4:	ldr	r8, [r0, #36]	; 0x24
   194f8:	ldr	r3, [r0, #48]	; 0x30
   194fc:	cmp	r8, r3
   19500:	movge	r8, r3
   19504:	cmp	r5, r8
   19508:	bge	19620 <__assert_fail@plt+0x7c64>
   1950c:	ldr	r3, [r4, #64]	; 0x40
   19510:	sub	r2, r8, r5
   19514:	ldm	r6, {r0, r1}
   19518:	cmp	r3, #0
   1951c:	stm	r7, {r0, r1}
   19520:	beq	19604 <__assert_fail@plt+0x7c48>
   19524:	mov	r3, #0
   19528:	add	r1, sp, #16
   1952c:	b	19560 <__assert_fail@plt+0x7ba4>
   19530:	ldr	r0, [r4]
   19534:	ldr	ip, [r4, #24]
   19538:	add	r0, r0, r5
   1953c:	add	r0, r0, r3
   19540:	ldrb	r0, [r0, ip]
   19544:	ldr	ip, [r4, #64]	; 0x40
   19548:	ldrb	ip, [ip, r0]
   1954c:	ldr	r0, [r4, #4]
   19550:	add	r0, r0, r3
   19554:	strb	ip, [r0, r5]
   19558:	strb	ip, [r1, r3]
   1955c:	add	r3, r3, #1
   19560:	ldr	r0, [r4, #80]	; 0x50
   19564:	cmp	r2, r0
   19568:	movlt	r0, r2
   1956c:	cmp	r0, r3
   19570:	bgt	19530 <__assert_fail@plt+0x7b74>
   19574:	mov	r3, r6
   19578:	add	r0, sp, #4
   1957c:	bl	1886c <__assert_fail@plt+0x6eb0>
   19580:	sub	r3, r0, #1
   19584:	cmn	r3, #3
   19588:	bhi	195a4 <__assert_fail@plt+0x7be8>
   1958c:	cmn	r0, #2
   19590:	bne	195d4 <__assert_fail@plt+0x7c18>
   19594:	ldr	r2, [r4, #36]	; 0x24
   19598:	ldr	r3, [r4, #48]	; 0x30
   1959c:	cmp	r2, r3
   195a0:	blt	19618 <__assert_fail@plt+0x7c5c>
   195a4:	ldr	r3, [r4]
   195a8:	ldr	r2, [r4, #24]
   195ac:	ldm	r7, {r0, r1}
   195b0:	add	r3, r3, r5
   195b4:	ldrb	r3, [r3, r2]
   195b8:	ldr	r2, [r4, #64]	; 0x40
   195bc:	str	r3, [sp, #4]
   195c0:	cmp	r2, #0
   195c4:	ldrbne	r3, [r2, r3]
   195c8:	stm	r6, {r0, r1}
   195cc:	mov	r0, #1
   195d0:	strne	r3, [sp, #4]
   195d4:	ldr	r3, [sp, #4]
   195d8:	add	r0, r5, r0
   195dc:	mvn	r1, #0
   195e0:	ldr	r2, [r4, #8]
   195e4:	str	r3, [r2, r5, lsl #2]
   195e8:	add	r3, r5, #1
   195ec:	cmp	r3, r0
   195f0:	mov	r5, r3
   195f4:	bge	19504 <__assert_fail@plt+0x7b48>
   195f8:	str	r1, [r2, r3, lsl #2]
   195fc:	add	r3, r3, #1
   19600:	b	195ec <__assert_fail@plt+0x7c30>
   19604:	ldr	r1, [r4, #24]
   19608:	add	r3, r5, r1
   1960c:	ldr	r1, [r4]
   19610:	add	r1, r1, r3
   19614:	b	19574 <__assert_fail@plt+0x7bb8>
   19618:	ldm	r7, {r0, r1}
   1961c:	stm	r6, {r0, r1}
   19620:	str	r5, [r4, #28]
   19624:	str	r5, [r4, #32]
   19628:	add	sp, sp, #80	; 0x50
   1962c:	pop	{r4, r5, r6, r7, r8, pc}
   19630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	mov	r4, r0
   19638:	sub	sp, sp, #100	; 0x64
   1963c:	ldr	r5, [r0, #28]
   19640:	ldr	r7, [r0, #36]	; 0x24
   19644:	ldr	r3, [r0, #48]	; 0x30
   19648:	cmp	r7, r3
   1964c:	movge	r7, r3
   19650:	ldrb	r3, [r0, #74]	; 0x4a
   19654:	cmp	r3, #0
   19658:	bne	1967c <__assert_fail@plt+0x7cc0>
   1965c:	ldr	r3, [r0, #64]	; 0x40
   19660:	cmp	r3, #0
   19664:	bne	1967c <__assert_fail@plt+0x7cc0>
   19668:	ldrb	r3, [r0, #76]	; 0x4c
   1966c:	cmp	r3, #0
   19670:	addeq	r6, r0, #16
   19674:	addeq	r8, sp, #24
   19678:	beq	196e0 <__assert_fail@plt+0x7d24>
   1967c:	mov	r6, r5
   19680:	ldr	r5, [r4, #32]
   19684:	cmp	r6, r7
   19688:	blt	19790 <__assert_fail@plt+0x7dd4>
   1968c:	b	19860 <__assert_fail@plt+0x7ea4>
   19690:	ldr	fp, [r4]
   19694:	str	r5, [sp, #4]
   19698:	ldr	sl, [r4, #24]
   1969c:	add	r3, fp, sl
   196a0:	ldrb	r9, [r3, r5]
   196a4:	tst	r9, #128	; 0x80
   196a8:	bne	196ec <__assert_fail@plt+0x7d30>
   196ac:	mov	r0, r6
   196b0:	bl	11614 <mbsinit@plt>
   196b4:	cmp	r0, #0
   196b8:	beq	196ec <__assert_fail@plt+0x7d30>
   196bc:	mov	r0, r9
   196c0:	bl	1195c <towupper@plt>
   196c4:	bics	r3, r0, #127	; 0x7f
   196c8:	bne	196ec <__assert_fail@plt+0x7d30>
   196cc:	ldr	r3, [r4, #4]
   196d0:	strb	r0, [r3, r5]
   196d4:	ldr	r3, [r4, #8]
   196d8:	str	r0, [r3, r5, lsl #2]
   196dc:	add	r5, r5, #1
   196e0:	cmp	r5, r7
   196e4:	blt	19690 <__assert_fail@plt+0x7cd4>
   196e8:	b	198cc <__assert_fail@plt+0x7f10>
   196ec:	ldm	r6, {r0, r1}
   196f0:	mov	r3, r6
   196f4:	sub	r2, r7, r5
   196f8:	stm	r8, {r0, r1}
   196fc:	add	r1, sl, r5
   19700:	add	r0, sp, #20
   19704:	add	r1, fp, r1
   19708:	bl	1886c <__assert_fail@plt+0x6eb0>
   1970c:	sub	r3, r0, #1
   19710:	mov	sl, r0
   19714:	cmn	r3, #4
   19718:	bhi	19884 <__assert_fail@plt+0x7ec8>
   1971c:	ldr	fp, [sp, #20]
   19720:	mov	r0, fp
   19724:	bl	1195c <towupper@plt>
   19728:	cmp	fp, r0
   1972c:	mov	r9, r0
   19730:	beq	19868 <__assert_fail@plt+0x7eac>
   19734:	mov	r1, r0
   19738:	mov	r2, r8
   1973c:	add	r0, sp, #32
   19740:	bl	1153c <wcrtomb@plt>
   19744:	cmp	sl, r0
   19748:	bne	1978c <__assert_fail@plt+0x7dd0>
   1974c:	ldr	r0, [r4, #4]
   19750:	mov	r2, sl
   19754:	add	r1, sp, #32
   19758:	add	r0, r0, r5
   1975c:	add	sl, sl, r5
   19760:	bl	115e4 <memcpy@plt>
   19764:	ldr	r2, [r4, #8]
   19768:	add	r3, r5, #1
   1976c:	mvn	r1, #0
   19770:	str	r9, [r2, r5, lsl #2]
   19774:	cmp	r3, sl
   19778:	mov	r5, r3
   1977c:	bge	196e0 <__assert_fail@plt+0x7d24>
   19780:	str	r1, [r2, r3, lsl #2]
   19784:	add	r3, r3, #1
   19788:	b	19774 <__assert_fail@plt+0x7db8>
   1978c:	mov	r6, r5
   19790:	add	r3, r4, #16
   19794:	ldr	ip, [r4, #64]	; 0x40
   19798:	add	sl, sp, #24
   1979c:	sub	r2, r7, r6
   197a0:	ldm	r3, {r0, r1}
   197a4:	str	r3, [sp, #4]
   197a8:	cmp	ip, #0
   197ac:	stm	sl, {r0, r1}
   197b0:	beq	19904 <__assert_fail@plt+0x7f48>
   197b4:	ldr	r0, [r4, #80]	; 0x50
   197b8:	mov	r3, #0
   197bc:	add	r9, sp, #32
   197c0:	cmp	r2, r0
   197c4:	movlt	r0, r2
   197c8:	cmp	r0, r3
   197cc:	bgt	198e0 <__assert_fail@plt+0x7f24>
   197d0:	mov	r1, r9
   197d4:	add	r0, sp, #20
   197d8:	ldr	r3, [sp, #4]
   197dc:	bl	1886c <__assert_fail@plt+0x6eb0>
   197e0:	sub	r3, r0, #1
   197e4:	mov	r8, r0
   197e8:	cmn	r3, #4
   197ec:	str	r3, [sp, #8]
   197f0:	bhi	19a88 <__assert_fail@plt+0x80cc>
   197f4:	ldr	r3, [sp, #20]
   197f8:	mov	r0, r3
   197fc:	str	r3, [sp, #12]
   19800:	bl	1195c <towupper@plt>
   19804:	ldr	r3, [sp, #12]
   19808:	mov	fp, r0
   1980c:	cmp	r3, r0
   19810:	beq	19a14 <__assert_fail@plt+0x8058>
   19814:	mov	r1, r0
   19818:	mov	r2, sl
   1981c:	add	r0, sp, #32
   19820:	bl	1153c <wcrtomb@plt>
   19824:	cmp	r8, r0
   19828:	mov	r3, r0
   1982c:	moveq	r2, r8
   19830:	addeq	r1, sp, #32
   19834:	ldreq	r0, [r4, #4]
   19838:	beq	19a20 <__assert_fail@plt+0x8064>
   1983c:	cmn	r3, #1
   19840:	beq	19a14 <__assert_fail@plt+0x8058>
   19844:	ldr	r0, [r4, #36]	; 0x24
   19848:	add	r9, r3, r6
   1984c:	cmp	r9, r0
   19850:	bls	19918 <__assert_fail@plt+0x7f5c>
   19854:	ldm	sl, {r0, r1}
   19858:	ldr	r3, [sp, #4]
   1985c:	stm	r3, {r0, r1}
   19860:	str	r6, [r4, #28]
   19864:	b	198d0 <__assert_fail@plt+0x7f14>
   19868:	ldr	r1, [r4]
   1986c:	mov	r2, sl
   19870:	ldr	r3, [r4, #24]
   19874:	ldr	r0, [r4, #4]
   19878:	add	r3, r5, r3
   1987c:	add	r1, r1, r3
   19880:	b	19758 <__assert_fail@plt+0x7d9c>
   19884:	cmn	r3, #3
   19888:	bne	1989c <__assert_fail@plt+0x7ee0>
   1988c:	ldr	r2, [r4, #36]	; 0x24
   19890:	ldr	r3, [r4, #48]	; 0x30
   19894:	cmp	r2, r3
   19898:	blt	198c4 <__assert_fail@plt+0x7f08>
   1989c:	ldr	r3, [r4, #4]
   198a0:	cmn	sl, #1
   198a4:	ldr	r2, [sp, #4]
   198a8:	strb	r9, [r3, r5]
   198ac:	add	r5, r5, #1
   198b0:	ldr	r3, [r4, #8]
   198b4:	str	r9, [r3, r2, lsl #2]
   198b8:	ldmeq	r8, {r0, r1}
   198bc:	stmeq	r6, {r0, r1}
   198c0:	b	196e0 <__assert_fail@plt+0x7d24>
   198c4:	ldm	r8, {r0, r1}
   198c8:	stm	r6, {r0, r1}
   198cc:	str	r5, [r4, #28]
   198d0:	mov	r0, #0
   198d4:	str	r5, [r4, #32]
   198d8:	add	sp, sp, #100	; 0x64
   198dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198e0:	ldr	r1, [r4]
   198e4:	ldr	lr, [r4, #24]
   198e8:	add	r1, r1, r5
   198ec:	add	r1, r1, r3
   198f0:	ldrb	r1, [r1, lr]
   198f4:	ldrb	r1, [ip, r1]
   198f8:	strb	r1, [r9, r3]
   198fc:	add	r3, r3, #1
   19900:	b	197c8 <__assert_fail@plt+0x7e0c>
   19904:	ldr	r9, [r4, #24]
   19908:	add	r3, r5, r9
   1990c:	ldr	r9, [r4]
   19910:	add	r9, r9, r3
   19914:	b	197d0 <__assert_fail@plt+0x7e14>
   19918:	ldr	r2, [r4, #12]
   1991c:	cmp	r2, #0
   19920:	bne	19944 <__assert_fail@plt+0x7f88>
   19924:	lsl	r0, r0, #2
   19928:	str	r3, [sp, #4]
   1992c:	bl	18840 <__assert_fail@plt+0x6e84>
   19930:	cmp	r0, #0
   19934:	str	r0, [r4, #12]
   19938:	moveq	r0, #12
   1993c:	ldr	r3, [sp, #4]
   19940:	beq	198d8 <__assert_fail@plt+0x7f1c>
   19944:	ldrb	r2, [r4, #76]	; 0x4c
   19948:	cmp	r2, #0
   1994c:	beq	199e0 <__assert_fail@plt+0x8024>
   19950:	ldr	r0, [r4, #4]
   19954:	mov	r2, r3
   19958:	add	r1, sp, #32
   1995c:	str	r3, [sp, #4]
   19960:	add	r0, r0, r6
   19964:	bl	115e4 <memcpy@plt>
   19968:	ldr	r1, [r4, #8]
   1996c:	lsl	r2, r6, #2
   19970:	mvn	lr, #0
   19974:	ldr	r0, [r4, #12]
   19978:	ldr	r3, [sp, #4]
   1997c:	str	fp, [r1, r6, lsl #2]
   19980:	add	r1, r1, r2
   19984:	str	r5, [r0, r6, lsl #2]
   19988:	add	r0, r0, r2
   1998c:	mov	r2, #1
   19990:	cmp	r2, r3
   19994:	bcc	199f4 <__assert_fail@plt+0x8038>
   19998:	ldr	r7, [r4, #48]	; 0x30
   1999c:	sub	r3, r3, r8
   199a0:	mov	r6, r9
   199a4:	ldr	r2, [r4, #52]	; 0x34
   199a8:	add	r7, r3, r7
   199ac:	cmp	r2, r5
   199b0:	add	r5, r5, r8
   199b4:	str	r7, [r4, #48]	; 0x30
   199b8:	ldrgt	r2, [r4, #56]	; 0x38
   199bc:	addgt	r3, r2, r3
   199c0:	strgt	r3, [r4, #56]	; 0x38
   199c4:	ldr	r3, [r4, #36]	; 0x24
   199c8:	cmp	r7, r3
   199cc:	movge	r7, r3
   199d0:	b	19684 <__assert_fail@plt+0x7cc8>
   199d4:	ldr	r1, [r4, #12]
   199d8:	str	r2, [r1, r2, lsl #2]
   199dc:	add	r2, r2, #1
   199e0:	cmp	r2, r6
   199e4:	bne	199d4 <__assert_fail@plt+0x8018>
   199e8:	mov	r2, #1
   199ec:	strb	r2, [r4, #76]	; 0x4c
   199f0:	b	19950 <__assert_fail@plt+0x7f94>
   199f4:	ldr	ip, [sp, #8]
   199f8:	cmp	r2, r8
   199fc:	movcc	ip, r2
   19a00:	add	r2, r2, #1
   19a04:	add	ip, r5, ip
   19a08:	str	ip, [r0, #4]!
   19a0c:	str	lr, [r1, #4]!
   19a10:	b	19990 <__assert_fail@plt+0x7fd4>
   19a14:	ldr	r0, [r4, #4]
   19a18:	mov	r2, r8
   19a1c:	mov	r1, r9
   19a20:	add	r0, r0, r6
   19a24:	bl	115e4 <memcpy@plt>
   19a28:	ldrb	r3, [r4, #76]	; 0x4c
   19a2c:	cmp	r3, #0
   19a30:	bne	19a64 <__assert_fail@plt+0x80a8>
   19a34:	ldr	r2, [r4, #8]
   19a38:	add	r5, r5, r8
   19a3c:	add	r3, r6, #1
   19a40:	add	r8, r8, r6
   19a44:	mvn	r1, #0
   19a48:	str	fp, [r2, r6, lsl #2]
   19a4c:	cmp	r3, r8
   19a50:	mov	r6, r3
   19a54:	bge	19684 <__assert_fail@plt+0x7cc8>
   19a58:	str	r1, [r2, r3, lsl #2]
   19a5c:	add	r3, r3, #1
   19a60:	b	19a4c <__assert_fail@plt+0x8090>
   19a64:	ldr	r2, [r4, #12]
   19a68:	mov	r3, #0
   19a6c:	add	r2, r2, r6, lsl #2
   19a70:	add	r1, r5, r3
   19a74:	add	r3, r3, #1
   19a78:	cmp	r8, r3
   19a7c:	str	r1, [r2], #4
   19a80:	bne	19a70 <__assert_fail@plt+0x80b4>
   19a84:	b	19a34 <__assert_fail@plt+0x8078>
   19a88:	sub	r3, r0, #1
   19a8c:	cmn	r3, #3
   19a90:	bne	19aa4 <__assert_fail@plt+0x80e8>
   19a94:	ldr	r2, [r4, #36]	; 0x24
   19a98:	ldr	r3, [r4, #48]	; 0x30
   19a9c:	cmp	r2, r3
   19aa0:	blt	19854 <__assert_fail@plt+0x7e98>
   19aa4:	ldr	r3, [r4]
   19aa8:	ldr	r2, [r4, #24]
   19aac:	add	r3, r3, r5
   19ab0:	ldrb	r3, [r3, r2]
   19ab4:	ldr	r2, [r4, #64]	; 0x40
   19ab8:	cmp	r2, #0
   19abc:	ldrbne	r3, [r2, r3]
   19ac0:	ldr	r2, [r4, #4]
   19ac4:	strb	r3, [r2, r6]
   19ac8:	lsl	r2, r6, #2
   19acc:	ldrb	r1, [r4, #76]	; 0x4c
   19ad0:	cmp	r1, #0
   19ad4:	ldrne	r1, [r4, #12]
   19ad8:	strne	r5, [r1, r6, lsl #2]
   19adc:	cmn	r8, #1
   19ae0:	add	r5, r5, #1
   19ae4:	ldr	r1, [r4, #8]
   19ae8:	add	r6, r6, #1
   19aec:	str	r3, [r1, r2]
   19af0:	ldreq	r3, [sp, #4]
   19af4:	ldmeq	sl, {r0, r1}
   19af8:	stmeq	r3, {r0, r1}
   19afc:	b	19684 <__assert_fail@plt+0x7cc8>
   19b00:	push	{r4, r5, r6, lr}
   19b04:	mov	r4, r0
   19b08:	ldr	r5, [r0, #28]
   19b0c:	ldr	r3, [r0, #36]	; 0x24
   19b10:	ldr	r6, [r0, #48]	; 0x30
   19b14:	cmp	r3, r6
   19b18:	movlt	r6, r3
   19b1c:	cmp	r5, r6
   19b20:	blt	19b30 <__assert_fail@plt+0x8174>
   19b24:	str	r5, [r4, #28]
   19b28:	str	r5, [r4, #32]
   19b2c:	pop	{r4, r5, r6, pc}
   19b30:	ldr	r3, [r4]
   19b34:	ldr	r2, [r4, #24]
   19b38:	add	r3, r3, r5
   19b3c:	ldrb	r0, [r3, r2]
   19b40:	ldr	r3, [r4, #64]	; 0x40
   19b44:	cmp	r3, #0
   19b48:	ldrbne	r0, [r3, r0]
   19b4c:	bl	118b4 <toupper@plt>
   19b50:	ldr	r3, [r4, #4]
   19b54:	strb	r0, [r3, r5]
   19b58:	add	r5, r5, #1
   19b5c:	b	19b1c <__assert_fail@plt+0x8160>
   19b60:	ldr	r3, [r0, #36]	; 0x24
   19b64:	push	{r4, r5, r6, lr}
   19b68:	cmn	r3, #-536870910	; 0xe0000002
   19b6c:	bls	19b7c <__assert_fail@plt+0x81c0>
   19b70:	mov	r5, #12
   19b74:	mov	r0, r5
   19b78:	pop	{r4, r5, r6, pc}
   19b7c:	ldr	r2, [r0, #48]	; 0x30
   19b80:	lsl	r3, r3, #1
   19b84:	mov	r4, r0
   19b88:	cmp	r3, r2
   19b8c:	movge	r3, r2
   19b90:	cmp	r3, r1
   19b94:	movge	r1, r3
   19b98:	bl	19074 <__assert_fail@plt+0x76b8>
   19b9c:	subs	r5, r0, #0
   19ba0:	bne	19b74 <__assert_fail@plt+0x81b8>
   19ba4:	ldr	r0, [r4, #100]	; 0x64
   19ba8:	cmp	r0, #0
   19bac:	beq	19bcc <__assert_fail@plt+0x8210>
   19bb0:	ldr	r1, [r4, #36]	; 0x24
   19bb4:	add	r1, r1, #1
   19bb8:	lsl	r1, r1, #2
   19bbc:	bl	188bc <__assert_fail@plt+0x6f00>
   19bc0:	cmp	r0, #0
   19bc4:	beq	19b70 <__assert_fail@plt+0x81b4>
   19bc8:	str	r0, [r4, #100]	; 0x64
   19bcc:	ldrb	r2, [r4, #72]	; 0x48
   19bd0:	ldr	r3, [r4, #80]	; 0x50
   19bd4:	cmp	r2, #0
   19bd8:	beq	19bf8 <__assert_fail@plt+0x823c>
   19bdc:	cmp	r3, #1
   19be0:	mov	r0, r4
   19be4:	ble	19bf0 <__assert_fail@plt+0x8234>
   19be8:	pop	{r4, r5, r6, lr}
   19bec:	b	19630 <__assert_fail@plt+0x7c74>
   19bf0:	bl	19b00 <__assert_fail@plt+0x8144>
   19bf4:	b	19b74 <__assert_fail@plt+0x81b8>
   19bf8:	cmp	r3, #1
   19bfc:	ble	19c0c <__assert_fail@plt+0x8250>
   19c00:	mov	r0, r4
   19c04:	bl	194dc <__assert_fail@plt+0x7b20>
   19c08:	b	19b74 <__assert_fail@plt+0x81b8>
   19c0c:	ldr	r3, [r4, #64]	; 0x40
   19c10:	cmp	r3, #0
   19c14:	beq	19b74 <__assert_fail@plt+0x81b8>
   19c18:	mov	r0, r4
   19c1c:	bl	18a04 <__assert_fail@plt+0x7048>
   19c20:	b	19b74 <__assert_fail@plt+0x81b8>
   19c24:	push	{r4, lr}
   19c28:	mov	r4, r0
   19c2c:	ldr	r0, [r0]
   19c30:	bl	18758 <__assert_fail@plt+0x6d9c>
   19c34:	ldr	r0, [r4, #4]
   19c38:	bl	18758 <__assert_fail@plt+0x6d9c>
   19c3c:	ldr	r0, [r4, #8]
   19c40:	bl	18758 <__assert_fail@plt+0x6d9c>
   19c44:	ldr	r0, [r4, #12]
   19c48:	bl	18758 <__assert_fail@plt+0x6d9c>
   19c4c:	mov	r0, r4
   19c50:	pop	{r4, lr}
   19c54:	b	18758 <__assert_fail@plt+0x6d9c>
   19c58:	ldr	r3, [pc, #36]	; 19c84 <__assert_fail@plt+0x82c8>
   19c5c:	ldr	r2, [r0, #4]
   19c60:	and	r3, r3, r2
   19c64:	cmp	r3, #6
   19c68:	bne	19c74 <__assert_fail@plt+0x82b8>
   19c6c:	ldr	r0, [r0]
   19c70:	b	19c24 <__assert_fail@plt+0x8268>
   19c74:	cmp	r3, #3
   19c78:	bxne	lr
   19c7c:	ldr	r0, [r0]
   19c80:	b	18758 <__assert_fail@plt+0x6d9c>
   19c84:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   19c88:	add	r0, r1, #20
   19c8c:	push	{r4, lr}
   19c90:	bl	19c58 <__assert_fail@plt+0x829c>
   19c94:	mov	r0, #0
   19c98:	pop	{r4, pc}
   19c9c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ca0:	mov	r7, sp
   19ca4:	mov	r4, r0
   19ca8:	ldr	r6, [r0, #4]
   19cac:	stm	r7, {r1, r2}
   19cb0:	ldr	r3, [r0, #8]
   19cb4:	ldrb	r5, [sp, #4]
   19cb8:	cmp	r3, r6
   19cbc:	bcc	19d90 <__assert_fail@plt+0x83d4>
   19cc0:	ldr	r3, [pc, #372]	; 19e3c <__assert_fail@plt+0x8480>
   19cc4:	lsl	r8, r6, #1
   19cc8:	cmp	r8, r3
   19ccc:	bls	19cdc <__assert_fail@plt+0x8320>
   19cd0:	mvn	r0, #0
   19cd4:	add	sp, sp, #12
   19cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cdc:	lsl	r1, r6, #4
   19ce0:	ldr	r0, [r0]
   19ce4:	bl	188bc <__assert_fail@plt+0x6f00>
   19ce8:	cmp	r0, #0
   19cec:	beq	19cd0 <__assert_fail@plt+0x8314>
   19cf0:	lsl	r9, r6, #3
   19cf4:	str	r0, [r4]
   19cf8:	ldr	r0, [r4, #12]
   19cfc:	mov	r1, r9
   19d00:	bl	188bc <__assert_fail@plt+0x6f00>
   19d04:	mov	sl, r0
   19d08:	mov	r1, r9
   19d0c:	ldr	r0, [r4, #16]
   19d10:	bl	188bc <__assert_fail@plt+0x6f00>
   19d14:	mov	r3, #24
   19d18:	mov	r9, r0
   19d1c:	ldr	r0, [r4, #20]
   19d20:	mul	r6, r3, r6
   19d24:	mov	r1, r6
   19d28:	bl	188bc <__assert_fail@plt+0x6f00>
   19d2c:	mov	fp, r0
   19d30:	mov	r1, r6
   19d34:	ldr	r0, [r4, #24]
   19d38:	bl	188bc <__assert_fail@plt+0x6f00>
   19d3c:	cmp	r9, #0
   19d40:	cmpne	sl, #0
   19d44:	mov	r6, r0
   19d48:	beq	19d58 <__assert_fail@plt+0x839c>
   19d4c:	cmp	r0, #0
   19d50:	cmpne	fp, #0
   19d54:	bne	19d7c <__assert_fail@plt+0x83c0>
   19d58:	mov	r0, sl
   19d5c:	bl	18758 <__assert_fail@plt+0x6d9c>
   19d60:	mov	r0, r9
   19d64:	bl	18758 <__assert_fail@plt+0x6d9c>
   19d68:	mov	r0, fp
   19d6c:	bl	18758 <__assert_fail@plt+0x6d9c>
   19d70:	mov	r0, r6
   19d74:	bl	18758 <__assert_fail@plt+0x6d9c>
   19d78:	b	19cd0 <__assert_fail@plt+0x8314>
   19d7c:	str	r8, [r4, #4]
   19d80:	str	sl, [r4, #12]
   19d84:	str	r9, [r4, #16]
   19d88:	str	fp, [r4, #20]
   19d8c:	str	r0, [r4, #24]
   19d90:	ldr	r3, [r4]
   19d94:	cmp	r5, #5
   19d98:	ldr	r2, [r4, #8]
   19d9c:	ldm	r7, {r0, r1}
   19da0:	add	r3, r3, r2, lsl #3
   19da4:	stm	r3, {r0, r1}
   19da8:	bfc	r1, #8, #10
   19dac:	str	r1, [r3, #4]
   19db0:	bne	19e2c <__assert_fail@plt+0x8470>
   19db4:	ldr	r5, [r4, #92]	; 0x5c
   19db8:	cmp	r5, #1
   19dbc:	movle	r5, #0
   19dc0:	movgt	r5, #1
   19dc4:	ldrb	r1, [r3, #6]
   19dc8:	bfi	r1, r5, #4, #1
   19dcc:	strb	r1, [r3, #6]
   19dd0:	mvn	r1, #0
   19dd4:	ldr	r3, [r4, #12]
   19dd8:	ldr	ip, [r4, #20]
   19ddc:	str	r1, [r3, r2, lsl #2]
   19de0:	mov	r2, #12
   19de4:	mov	r3, #0
   19de8:	ldr	r1, [r4, #8]
   19dec:	mul	r1, r2, r1
   19df0:	add	r0, ip, r1
   19df4:	str	r3, [ip, r1]
   19df8:	str	r3, [r0, #4]
   19dfc:	str	r3, [r0, #8]
   19e00:	ldr	r1, [r4, #8]
   19e04:	ldr	r0, [r4, #24]
   19e08:	mul	r2, r2, r1
   19e0c:	add	r1, r0, r2
   19e10:	str	r3, [r0, r2]
   19e14:	str	r3, [r1, #4]
   19e18:	str	r3, [r1, #8]
   19e1c:	ldr	r0, [r4, #8]
   19e20:	add	r3, r0, #1
   19e24:	str	r3, [r4, #8]
   19e28:	b	19cd4 <__assert_fail@plt+0x8318>
   19e2c:	sub	r5, r5, #6
   19e30:	clz	r5, r5
   19e34:	lsr	r5, r5, #5
   19e38:	b	19dc4 <__assert_fail@plt+0x8408>
   19e3c:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   19e40:	ldr	r3, [r0]
   19e44:	push	{r4, r5, r6, r7, r8, lr}
   19e48:	lsl	r7, r1, #3
   19e4c:	mov	r6, r1
   19e50:	mov	r4, r2
   19e54:	mov	r5, r0
   19e58:	add	r3, r3, r7
   19e5c:	ldm	r3, {r1, r2}
   19e60:	bl	19c9c <__assert_fail@plt+0x82e0>
   19e64:	cmn	r0, #1
   19e68:	popeq	{r4, r5, r6, r7, r8, pc}
   19e6c:	ubfx	r2, r4, #0, #10
   19e70:	ldr	ip, [r5]
   19e74:	add	r1, ip, r0, lsl #3
   19e78:	add	ip, ip, r7
   19e7c:	ldr	r3, [r1, #4]
   19e80:	bfi	r3, r2, #8, #10
   19e84:	str	r3, [r1, #4]
   19e88:	ldr	ip, [ip, #4]
   19e8c:	ubfx	ip, ip, #8, #10
   19e90:	orr	r2, r2, ip
   19e94:	bfi	r3, r2, #8, #10
   19e98:	str	r3, [r1, #4]
   19e9c:	ubfx	r3, r3, #16, #8
   19ea0:	orr	r3, r3, #4
   19ea4:	strb	r3, [r1, #6]
   19ea8:	ldr	r3, [r5, #16]
   19eac:	str	r6, [r3, r0, lsl #2]
   19eb0:	pop	{r4, r5, r6, r7, r8, pc}
   19eb4:	push	{r4, lr}
   19eb8:	mov	r4, r0
   19ebc:	ldr	r0, [r0, #24]
   19ec0:	bl	18758 <__assert_fail@plt+0x6d9c>
   19ec4:	ldr	r0, [r4, #36]	; 0x24
   19ec8:	bl	18758 <__assert_fail@plt+0x6d9c>
   19ecc:	ldr	r3, [r4, #40]	; 0x28
   19ed0:	add	r2, r4, #4
   19ed4:	cmp	r3, r2
   19ed8:	beq	19eec <__assert_fail@plt+0x8530>
   19edc:	ldr	r0, [r3, #8]
   19ee0:	bl	18758 <__assert_fail@plt+0x6d9c>
   19ee4:	ldr	r0, [r4, #40]	; 0x28
   19ee8:	bl	18758 <__assert_fail@plt+0x6d9c>
   19eec:	ldr	r0, [r4, #12]
   19ef0:	bl	18758 <__assert_fail@plt+0x6d9c>
   19ef4:	ldr	r0, [r4, #48]	; 0x30
   19ef8:	bl	18758 <__assert_fail@plt+0x6d9c>
   19efc:	ldr	r0, [r4, #44]	; 0x2c
   19f00:	bl	18758 <__assert_fail@plt+0x6d9c>
   19f04:	mov	r0, r4
   19f08:	pop	{r4, lr}
   19f0c:	b	18758 <__assert_fail@plt+0x6d9c>
   19f10:	push	{r4, lr}
   19f14:	mov	r4, r0
   19f18:	ldr	r0, [r0, #8]
   19f1c:	bl	18758 <__assert_fail@plt+0x6d9c>
   19f20:	ldr	r0, [r4, #12]
   19f24:	bl	18758 <__assert_fail@plt+0x6d9c>
   19f28:	ldrb	r3, [r4, #75]	; 0x4b
   19f2c:	cmp	r3, #0
   19f30:	popeq	{r4, pc}
   19f34:	ldr	r0, [r4, #4]
   19f38:	pop	{r4, lr}
   19f3c:	b	18758 <__assert_fail@plt+0x6d9c>
   19f40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f44:	mov	r4, #0
   19f48:	mov	r6, r0
   19f4c:	mov	r8, r4
   19f50:	ldr	r3, [r6, #124]	; 0x7c
   19f54:	cmp	r3, r4
   19f58:	bgt	19f68 <__assert_fail@plt+0x85ac>
   19f5c:	str	r8, [r6, #108]	; 0x6c
   19f60:	str	r8, [r6, #124]	; 0x7c
   19f64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f68:	ldr	r3, [r6, #132]	; 0x84
   19f6c:	mov	r7, #0
   19f70:	ldr	r5, [r3, r4, lsl #2]
   19f74:	ldr	r3, [r5, #16]
   19f78:	ldr	r0, [r5, #20]
   19f7c:	cmp	r3, r7
   19f80:	bgt	19fb4 <__assert_fail@plt+0x85f8>
   19f84:	bl	18758 <__assert_fail@plt+0x6d9c>
   19f88:	ldr	r3, [r5, #8]
   19f8c:	cmp	r3, #0
   19f90:	beq	19fa4 <__assert_fail@plt+0x85e8>
   19f94:	ldr	r0, [r3, #8]
   19f98:	bl	18758 <__assert_fail@plt+0x6d9c>
   19f9c:	ldr	r0, [r5, #8]
   19fa0:	bl	18758 <__assert_fail@plt+0x6d9c>
   19fa4:	mov	r0, r5
   19fa8:	add	r4, r4, #1
   19fac:	bl	18758 <__assert_fail@plt+0x6d9c>
   19fb0:	b	19f50 <__assert_fail@plt+0x8594>
   19fb4:	ldr	r9, [r0, r7, lsl #2]
   19fb8:	add	r7, r7, #1
   19fbc:	ldr	r0, [r9, #16]
   19fc0:	bl	18758 <__assert_fail@plt+0x6d9c>
   19fc4:	mov	r0, r9
   19fc8:	bl	18758 <__assert_fail@plt+0x6d9c>
   19fcc:	b	19f74 <__assert_fail@plt+0x85b8>
   19fd0:	mov	r3, r1
   19fd4:	ldr	r2, [r1, #28]
   19fd8:	ldrb	r1, [r1, #24]
   19fdc:	sub	r1, r1, #2
   19fe0:	cmp	r1, #14
   19fe4:	ldrls	pc, [pc, r1, lsl #2]
   19fe8:	b	1a0fc <__assert_fail@plt+0x8740>
   19fec:	andeq	sl, r1, ip, lsl #2
   19ff0:	strdeq	sl, [r1], -ip
   19ff4:	ldrdeq	sl, [r1], -r8
   19ff8:	strdeq	sl, [r1], -ip
   19ffc:	strdeq	sl, [r1], -ip
   1a000:	strdeq	sl, [r1], -ip
   1a004:	andeq	sl, r1, r0, asr #1
   1a008:	andeq	sl, r1, r0, asr #1
   1a00c:	andeq	sl, r1, r8, lsr #32
   1a010:	andeq	sl, r1, r8, lsr #32
   1a014:	andeq	sl, r1, r0, asr #1
   1a018:	strdeq	sl, [r1], -ip
   1a01c:	strdeq	sl, [r1], -ip
   1a020:	strdeq	sl, [r1], -ip
   1a024:	andeq	sl, r1, ip, lsl #2
   1a028:	ldrb	r1, [r0, #88]	; 0x58
   1a02c:	push	{r4, r5, r6, r7, r8, lr}
   1a030:	mov	r4, #12
   1a034:	mov	r8, #2
   1a038:	mul	r2, r4, r2
   1a03c:	orr	r1, r1, #1
   1a040:	strb	r1, [r0, #88]	; 0x58
   1a044:	ldr	r1, [r3, #4]
   1a048:	cmp	r1, #0
   1a04c:	ldreq	r1, [r3, #16]
   1a050:	ldrne	r1, [r1, #12]
   1a054:	ldr	r5, [r1, #28]
   1a058:	ldr	r1, [r3, #8]
   1a05c:	cmp	r1, #0
   1a060:	ldrne	r3, [r1, #12]
   1a064:	ldreq	r3, [r3, #16]
   1a068:	ldr	r6, [r3, #28]
   1a06c:	ldr	r3, [r0, #20]
   1a070:	mov	r0, #8
   1a074:	str	r8, [r3, r2]
   1a078:	add	r7, r3, r2
   1a07c:	bl	18840 <__assert_fail@plt+0x6e84>
   1a080:	cmp	r0, #0
   1a084:	str	r0, [r7, #8]
   1a088:	bne	1a094 <__assert_fail@plt+0x86d8>
   1a08c:	mov	r0, r4
   1a090:	pop	{r4, r5, r6, r7, r8, pc}
   1a094:	cmp	r5, r6
   1a098:	moveq	r3, #1
   1a09c:	streq	r3, [r7, #4]
   1a0a0:	streq	r5, [r0]
   1a0a4:	beq	1a0b8 <__assert_fail@plt+0x86fc>
   1a0a8:	str	r8, [r7, #4]
   1a0ac:	stmlt	r0, {r5, r6}
   1a0b0:	strge	r6, [r0]
   1a0b4:	strge	r5, [r0, #4]
   1a0b8:	mov	r0, #0
   1a0bc:	pop	{r4, r5, r6, r7, r8, pc}
   1a0c0:	ldr	r1, [r3, #16]
   1a0c4:	ldr	r3, [r0, #20]
   1a0c8:	ldr	r1, [r1, #28]
   1a0cc:	mov	r0, #12
   1a0d0:	mla	r0, r0, r2, r3
   1a0d4:	b	19470 <__assert_fail@plt+0x7ab4>
   1a0d8:	ldr	r1, [r3, #16]
   1a0dc:	ldr	ip, [r0, #12]
   1a0e0:	ldr	r1, [r1, #28]
   1a0e4:	str	r1, [ip, r2, lsl #2]
   1a0e8:	ldrb	r3, [r3, #24]
   1a0ec:	cmp	r3, #4
   1a0f0:	bne	1a10c <__assert_fail@plt+0x8750>
   1a0f4:	ldr	r3, [r0, #20]
   1a0f8:	b	1a0cc <__assert_fail@plt+0x8710>
   1a0fc:	ldr	r3, [r3, #16]
   1a100:	ldr	r1, [r3, #28]
   1a104:	ldr	r3, [r0, #12]
   1a108:	str	r1, [r3, r2, lsl #2]
   1a10c:	mov	r0, #0
   1a110:	bx	lr
   1a114:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a118:	mov	r4, r0
   1a11c:	mov	r8, r1
   1a120:	mov	r7, r2
   1a124:	mov	r5, #0
   1a128:	ldr	r9, [r0, #84]	; 0x54
   1a12c:	ldr	r3, [r8, #4]
   1a130:	cmp	r3, r5
   1a134:	movle	r0, #0
   1a138:	ble	1a1a0 <__assert_fail@plt+0x87e4>
   1a13c:	ldr	r3, [r8, #8]
   1a140:	ldr	r6, [r3, r5, lsl #2]
   1a144:	ldr	r3, [r9]
   1a148:	add	r2, r3, r6, lsl #3
   1a14c:	ldrb	r2, [r2, #4]
   1a150:	cmp	r2, #8
   1a154:	bne	1a1ec <__assert_fail@plt+0x8830>
   1a158:	ldr	r2, [r3, r6, lsl #3]
   1a15c:	cmp	r2, #31
   1a160:	bgt	1a1ec <__assert_fail@plt+0x8830>
   1a164:	ldr	r3, [r9, #80]	; 0x50
   1a168:	lsr	r3, r3, r2
   1a16c:	tst	r3, #1
   1a170:	beq	1a1ec <__assert_fail@plt+0x8830>
   1a174:	ldr	r3, [r4, #124]	; 0x7c
   1a178:	ldr	r1, [r4, #128]	; 0x80
   1a17c:	ldr	r0, [r4, #132]	; 0x84
   1a180:	cmp	r1, r3
   1a184:	bne	1a1b0 <__assert_fail@plt+0x87f4>
   1a188:	lsl	sl, r1, #1
   1a18c:	lsl	r1, r1, #3
   1a190:	bl	188bc <__assert_fail@plt+0x6f00>
   1a194:	cmp	r0, #0
   1a198:	bne	1a1a8 <__assert_fail@plt+0x87ec>
   1a19c:	mov	r0, #12
   1a1a0:	add	sp, sp, #4
   1a1a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1a8:	str	sl, [r4, #128]	; 0x80
   1a1ac:	str	r0, [r4, #132]	; 0x84
   1a1b0:	mov	r1, #24
   1a1b4:	mov	r0, #1
   1a1b8:	ldr	fp, [r4, #124]	; 0x7c
   1a1bc:	ldr	sl, [r4, #132]	; 0x84
   1a1c0:	bl	18504 <__assert_fail@plt+0x6b48>
   1a1c4:	ldr	r3, [r4, #124]	; 0x7c
   1a1c8:	ldr	r2, [r4, #132]	; 0x84
   1a1cc:	str	r0, [sl, fp, lsl #2]
   1a1d0:	ldr	r2, [r2, r3, lsl #2]
   1a1d4:	cmp	r2, #0
   1a1d8:	beq	1a19c <__assert_fail@plt+0x87e0>
   1a1dc:	add	r3, r3, #1
   1a1e0:	str	r6, [r2, #4]
   1a1e4:	str	r3, [r4, #124]	; 0x7c
   1a1e8:	str	r7, [r2]
   1a1ec:	add	r5, r5, #1
   1a1f0:	b	1a12c <__assert_fail@plt+0x8770>
   1a1f4:	ldr	r3, [r0, #36]	; 0x24
   1a1f8:	push	{r4, r5, r6, lr}
   1a1fc:	mov	r4, r0
   1a200:	mov	r5, r1
   1a204:	ldr	r6, [r0, #104]	; 0x68
   1a208:	cmp	r3, r1
   1a20c:	bgt	1a21c <__assert_fail@plt+0x8860>
   1a210:	ldr	r2, [r0, #48]	; 0x30
   1a214:	cmp	r3, r2
   1a218:	blt	1a244 <__assert_fail@plt+0x8888>
   1a21c:	ldr	r3, [r4, #28]
   1a220:	cmp	r3, r5
   1a224:	ble	1a238 <__assert_fail@plt+0x887c>
   1a228:	cmp	r6, r5
   1a22c:	blt	1a25c <__assert_fail@plt+0x88a0>
   1a230:	mov	r0, #0
   1a234:	pop	{r4, r5, r6, pc}
   1a238:	ldr	r2, [r4, #48]	; 0x30
   1a23c:	cmp	r3, r2
   1a240:	bge	1a228 <__assert_fail@plt+0x886c>
   1a244:	add	r1, r5, #1
   1a248:	mov	r0, r4
   1a24c:	bl	19b60 <__assert_fail@plt+0x81a4>
   1a250:	cmp	r0, #0
   1a254:	beq	1a228 <__assert_fail@plt+0x886c>
   1a258:	pop	{r4, r5, r6, pc}
   1a25c:	ldr	r0, [r4, #100]	; 0x64
   1a260:	sub	r2, r5, r6
   1a264:	add	r6, r6, #1
   1a268:	lsl	r2, r2, #2
   1a26c:	mov	r1, #0
   1a270:	add	r0, r0, r6, lsl #2
   1a274:	bl	11818 <memset@plt>
   1a278:	str	r5, [r4, #104]	; 0x68
   1a27c:	b	1a230 <__assert_fail@plt+0x8874>
   1a280:	push	{r4, r5, r6, r7, r8, lr}
   1a284:	subs	r4, r0, #0
   1a288:	ldr	r7, [sp, #28]
   1a28c:	beq	1a320 <__assert_fail@plt+0x8964>
   1a290:	ldr	r5, [r4]
   1a294:	cmp	r5, #0
   1a298:	beq	1a320 <__assert_fail@plt+0x8964>
   1a29c:	mov	r0, r3
   1a2a0:	sub	r5, r5, #1
   1a2a4:	lsl	r6, r2, #3
   1a2a8:	mov	r3, #24
   1a2ac:	str	r5, [r4]
   1a2b0:	mov	r2, r6
   1a2b4:	mul	r5, r3, r5
   1a2b8:	ldr	r3, [r4, #8]
   1a2bc:	add	ip, r3, r5
   1a2c0:	ldr	r3, [r3, r5]
   1a2c4:	str	r3, [r1]
   1a2c8:	ldr	r1, [ip, #8]
   1a2cc:	bl	115e4 <memcpy@plt>
   1a2d0:	ldr	r3, [r4, #8]
   1a2d4:	mov	r2, r6
   1a2d8:	ldr	r0, [sp, #24]
   1a2dc:	add	r3, r3, r5
   1a2e0:	ldr	r1, [r3, #8]
   1a2e4:	add	r1, r1, r6
   1a2e8:	bl	115e4 <memcpy@plt>
   1a2ec:	ldr	r0, [r7, #8]
   1a2f0:	bl	18758 <__assert_fail@plt+0x6d9c>
   1a2f4:	ldr	r3, [r4, #8]
   1a2f8:	add	r3, r3, r5
   1a2fc:	ldr	r0, [r3, #8]
   1a300:	bl	18758 <__assert_fail@plt+0x6d9c>
   1a304:	ldr	r3, [r4, #8]
   1a308:	add	r5, r3, r5
   1a30c:	add	r3, r5, #12
   1a310:	ldm	r3, {r0, r1, r2}
   1a314:	stm	r7, {r0, r1, r2}
   1a318:	ldr	r0, [r5, #4]
   1a31c:	pop	{r4, r5, r6, r7, r8, pc}
   1a320:	mvn	r0, #0
   1a324:	pop	{r4, r5, r6, r7, r8, pc}
   1a328:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a32c:	mov	r9, r3
   1a330:	mov	r5, r0
   1a334:	mov	r4, r1
   1a338:	mov	r8, r2
   1a33c:	ldr	r6, [sp, #32]
   1a340:	ldr	r3, [sp, #36]	; 0x24
   1a344:	tst	r3, #4194304	; 0x400000
   1a348:	beq	1a37c <__assert_fail@plt+0x89c0>
   1a34c:	mov	r0, r6
   1a350:	ldr	r1, [pc, #1720]	; 1aa10 <__assert_fail@plt+0x9054>
   1a354:	bl	11554 <strcmp@plt>
   1a358:	cmp	r0, #0
   1a35c:	ldreq	r6, [pc, #1712]	; 1aa14 <__assert_fail@plt+0x9058>
   1a360:	beq	1a37c <__assert_fail@plt+0x89c0>
   1a364:	mov	r0, r6
   1a368:	ldr	r1, [pc, #1704]	; 1aa18 <__assert_fail@plt+0x905c>
   1a36c:	bl	11554 <strcmp@plt>
   1a370:	ldr	r3, [pc, #1692]	; 1aa14 <__assert_fail@plt+0x9058>
   1a374:	cmp	r0, #0
   1a378:	moveq	r6, r3
   1a37c:	ldr	r7, [r9]
   1a380:	ldr	r3, [r8, #36]	; 0x24
   1a384:	cmp	r7, r3
   1a388:	bne	1a3b0 <__assert_fail@plt+0x89f4>
   1a38c:	lsl	r7, r7, #1
   1a390:	ldr	r0, [r8, #12]
   1a394:	add	r7, r7, #1
   1a398:	lsl	r1, r7, #2
   1a39c:	bl	188bc <__assert_fail@plt+0x6f00>
   1a3a0:	cmp	r0, #0
   1a3a4:	beq	1aa00 <__assert_fail@plt+0x9044>
   1a3a8:	str	r0, [r8, #12]
   1a3ac:	str	r7, [r9]
   1a3b0:	ldr	r9, [r8, #12]
   1a3b4:	mov	r0, r6
   1a3b8:	ldr	r7, [r8, #36]	; 0x24
   1a3bc:	add	r3, r7, #1
   1a3c0:	str	r3, [r8, #36]	; 0x24
   1a3c4:	bl	11524 <wctype@plt>
   1a3c8:	ldr	r1, [pc, #1612]	; 1aa1c <__assert_fail@plt+0x9060>
   1a3cc:	str	r0, [r9, r7, lsl #2]
   1a3d0:	mov	r0, r6
   1a3d4:	bl	11554 <strcmp@plt>
   1a3d8:	subs	r7, r0, #0
   1a3dc:	bne	1a454 <__assert_fail@plt+0x8a98>
   1a3e0:	bl	1177c <__ctype_b_loc@plt>
   1a3e4:	cmp	r5, #0
   1a3e8:	mov	r6, r0
   1a3ec:	beq	1a424 <__assert_fail@plt+0x8a68>
   1a3f0:	ldr	r2, [r6]
   1a3f4:	lsl	r3, r7, #1
   1a3f8:	ldrh	r3, [r2, r3]
   1a3fc:	tst	r3, #8
   1a400:	beq	1a410 <__assert_fail@plt+0x8a54>
   1a404:	ldrb	r1, [r5, r7]
   1a408:	mov	r0, r4
   1a40c:	bl	1892c <__assert_fail@plt+0x6f70>
   1a410:	add	r7, r7, #1
   1a414:	cmp	r7, #256	; 0x100
   1a418:	bne	1a3f0 <__assert_fail@plt+0x8a34>
   1a41c:	mov	r0, #0
   1a420:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a424:	ldr	r2, [r6]
   1a428:	lsl	r3, r7, #1
   1a42c:	ldrh	r3, [r2, r3]
   1a430:	tst	r3, #8
   1a434:	beq	1a444 <__assert_fail@plt+0x8a88>
   1a438:	mov	r1, r7
   1a43c:	mov	r0, r4
   1a440:	bl	1892c <__assert_fail@plt+0x6f70>
   1a444:	add	r7, r7, #1
   1a448:	cmp	r7, #256	; 0x100
   1a44c:	bne	1a424 <__assert_fail@plt+0x8a68>
   1a450:	b	1a41c <__assert_fail@plt+0x8a60>
   1a454:	ldr	r1, [pc, #1476]	; 1aa20 <__assert_fail@plt+0x9064>
   1a458:	mov	r0, r6
   1a45c:	bl	11554 <strcmp@plt>
   1a460:	subs	r7, r0, #0
   1a464:	bne	1a4d8 <__assert_fail@plt+0x8b1c>
   1a468:	bl	1177c <__ctype_b_loc@plt>
   1a46c:	cmp	r5, #0
   1a470:	mov	r6, r0
   1a474:	beq	1a4a8 <__assert_fail@plt+0x8aec>
   1a478:	ldr	r2, [r6]
   1a47c:	lsl	r3, r7, #1
   1a480:	ldrh	r3, [r2, r3]
   1a484:	tst	r3, #2
   1a488:	beq	1a498 <__assert_fail@plt+0x8adc>
   1a48c:	ldrb	r1, [r5, r7]
   1a490:	mov	r0, r4
   1a494:	bl	1892c <__assert_fail@plt+0x6f70>
   1a498:	add	r7, r7, #1
   1a49c:	cmp	r7, #256	; 0x100
   1a4a0:	bne	1a478 <__assert_fail@plt+0x8abc>
   1a4a4:	b	1a41c <__assert_fail@plt+0x8a60>
   1a4a8:	ldr	r2, [r6]
   1a4ac:	lsl	r3, r7, #1
   1a4b0:	ldrh	r3, [r2, r3]
   1a4b4:	tst	r3, #2
   1a4b8:	beq	1a4c8 <__assert_fail@plt+0x8b0c>
   1a4bc:	mov	r1, r7
   1a4c0:	mov	r0, r4
   1a4c4:	bl	1892c <__assert_fail@plt+0x6f70>
   1a4c8:	add	r7, r7, #1
   1a4cc:	cmp	r7, #256	; 0x100
   1a4d0:	bne	1a4a8 <__assert_fail@plt+0x8aec>
   1a4d4:	b	1a41c <__assert_fail@plt+0x8a60>
   1a4d8:	ldr	r1, [pc, #1336]	; 1aa18 <__assert_fail@plt+0x905c>
   1a4dc:	mov	r0, r6
   1a4e0:	bl	11554 <strcmp@plt>
   1a4e4:	subs	r7, r0, #0
   1a4e8:	bne	1a55c <__assert_fail@plt+0x8ba0>
   1a4ec:	bl	1177c <__ctype_b_loc@plt>
   1a4f0:	cmp	r5, #0
   1a4f4:	mov	r6, r0
   1a4f8:	beq	1a52c <__assert_fail@plt+0x8b70>
   1a4fc:	ldr	r2, [r6]
   1a500:	lsl	r3, r7, #1
   1a504:	ldrh	r3, [r2, r3]
   1a508:	tst	r3, #512	; 0x200
   1a50c:	beq	1a51c <__assert_fail@plt+0x8b60>
   1a510:	ldrb	r1, [r5, r7]
   1a514:	mov	r0, r4
   1a518:	bl	1892c <__assert_fail@plt+0x6f70>
   1a51c:	add	r7, r7, #1
   1a520:	cmp	r7, #256	; 0x100
   1a524:	bne	1a4fc <__assert_fail@plt+0x8b40>
   1a528:	b	1a41c <__assert_fail@plt+0x8a60>
   1a52c:	ldr	r2, [r6]
   1a530:	lsl	r3, r7, #1
   1a534:	ldrh	r3, [r2, r3]
   1a538:	tst	r3, #512	; 0x200
   1a53c:	beq	1a54c <__assert_fail@plt+0x8b90>
   1a540:	mov	r1, r7
   1a544:	mov	r0, r4
   1a548:	bl	1892c <__assert_fail@plt+0x6f70>
   1a54c:	add	r7, r7, #1
   1a550:	cmp	r7, #256	; 0x100
   1a554:	bne	1a52c <__assert_fail@plt+0x8b70>
   1a558:	b	1a41c <__assert_fail@plt+0x8a60>
   1a55c:	ldr	r1, [pc, #1216]	; 1aa24 <__assert_fail@plt+0x9068>
   1a560:	mov	r0, r6
   1a564:	bl	11554 <strcmp@plt>
   1a568:	subs	r7, r0, #0
   1a56c:	bne	1a5e0 <__assert_fail@plt+0x8c24>
   1a570:	bl	1177c <__ctype_b_loc@plt>
   1a574:	cmp	r5, #0
   1a578:	mov	r6, r0
   1a57c:	beq	1a5b0 <__assert_fail@plt+0x8bf4>
   1a580:	ldr	r2, [r6]
   1a584:	lsl	r3, r7, #1
   1a588:	ldrh	r3, [r2, r3]
   1a58c:	tst	r3, #8192	; 0x2000
   1a590:	beq	1a5a0 <__assert_fail@plt+0x8be4>
   1a594:	ldrb	r1, [r5, r7]
   1a598:	mov	r0, r4
   1a59c:	bl	1892c <__assert_fail@plt+0x6f70>
   1a5a0:	add	r7, r7, #1
   1a5a4:	cmp	r7, #256	; 0x100
   1a5a8:	bne	1a580 <__assert_fail@plt+0x8bc4>
   1a5ac:	b	1a41c <__assert_fail@plt+0x8a60>
   1a5b0:	ldr	r2, [r6]
   1a5b4:	lsl	r3, r7, #1
   1a5b8:	ldrh	r3, [r2, r3]
   1a5bc:	tst	r3, #8192	; 0x2000
   1a5c0:	beq	1a5d0 <__assert_fail@plt+0x8c14>
   1a5c4:	mov	r1, r7
   1a5c8:	mov	r0, r4
   1a5cc:	bl	1892c <__assert_fail@plt+0x6f70>
   1a5d0:	add	r7, r7, #1
   1a5d4:	cmp	r7, #256	; 0x100
   1a5d8:	bne	1a5b0 <__assert_fail@plt+0x8bf4>
   1a5dc:	b	1a41c <__assert_fail@plt+0x8a60>
   1a5e0:	ldr	r1, [pc, #1068]	; 1aa14 <__assert_fail@plt+0x9058>
   1a5e4:	mov	r0, r6
   1a5e8:	bl	11554 <strcmp@plt>
   1a5ec:	subs	r7, r0, #0
   1a5f0:	bne	1a664 <__assert_fail@plt+0x8ca8>
   1a5f4:	bl	1177c <__ctype_b_loc@plt>
   1a5f8:	cmp	r5, #0
   1a5fc:	mov	r6, r0
   1a600:	beq	1a634 <__assert_fail@plt+0x8c78>
   1a604:	ldr	r2, [r6]
   1a608:	lsl	r3, r7, #1
   1a60c:	ldrh	r3, [r2, r3]
   1a610:	tst	r3, #1024	; 0x400
   1a614:	beq	1a624 <__assert_fail@plt+0x8c68>
   1a618:	ldrb	r1, [r5, r7]
   1a61c:	mov	r0, r4
   1a620:	bl	1892c <__assert_fail@plt+0x6f70>
   1a624:	add	r7, r7, #1
   1a628:	cmp	r7, #256	; 0x100
   1a62c:	bne	1a604 <__assert_fail@plt+0x8c48>
   1a630:	b	1a41c <__assert_fail@plt+0x8a60>
   1a634:	ldr	r2, [r6]
   1a638:	lsl	r3, r7, #1
   1a63c:	ldrh	r3, [r2, r3]
   1a640:	tst	r3, #1024	; 0x400
   1a644:	beq	1a654 <__assert_fail@plt+0x8c98>
   1a648:	mov	r1, r7
   1a64c:	mov	r0, r4
   1a650:	bl	1892c <__assert_fail@plt+0x6f70>
   1a654:	add	r7, r7, #1
   1a658:	cmp	r7, #256	; 0x100
   1a65c:	bne	1a634 <__assert_fail@plt+0x8c78>
   1a660:	b	1a41c <__assert_fail@plt+0x8a60>
   1a664:	ldr	r1, [pc, #956]	; 1aa28 <__assert_fail@plt+0x906c>
   1a668:	mov	r0, r6
   1a66c:	bl	11554 <strcmp@plt>
   1a670:	subs	r7, r0, #0
   1a674:	bne	1a6e8 <__assert_fail@plt+0x8d2c>
   1a678:	bl	1177c <__ctype_b_loc@plt>
   1a67c:	cmp	r5, #0
   1a680:	mov	r6, r0
   1a684:	beq	1a6b8 <__assert_fail@plt+0x8cfc>
   1a688:	ldr	r2, [r6]
   1a68c:	lsl	r3, r7, #1
   1a690:	ldrh	r3, [r2, r3]
   1a694:	tst	r3, #2048	; 0x800
   1a698:	beq	1a6a8 <__assert_fail@plt+0x8cec>
   1a69c:	ldrb	r1, [r5, r7]
   1a6a0:	mov	r0, r4
   1a6a4:	bl	1892c <__assert_fail@plt+0x6f70>
   1a6a8:	add	r7, r7, #1
   1a6ac:	cmp	r7, #256	; 0x100
   1a6b0:	bne	1a688 <__assert_fail@plt+0x8ccc>
   1a6b4:	b	1a41c <__assert_fail@plt+0x8a60>
   1a6b8:	ldr	r2, [r6]
   1a6bc:	lsl	r3, r7, #1
   1a6c0:	ldrh	r3, [r2, r3]
   1a6c4:	tst	r3, #2048	; 0x800
   1a6c8:	beq	1a6d8 <__assert_fail@plt+0x8d1c>
   1a6cc:	mov	r1, r7
   1a6d0:	mov	r0, r4
   1a6d4:	bl	1892c <__assert_fail@plt+0x6f70>
   1a6d8:	add	r7, r7, #1
   1a6dc:	cmp	r7, #256	; 0x100
   1a6e0:	bne	1a6b8 <__assert_fail@plt+0x8cfc>
   1a6e4:	b	1a41c <__assert_fail@plt+0x8a60>
   1a6e8:	ldr	r1, [pc, #828]	; 1aa2c <__assert_fail@plt+0x9070>
   1a6ec:	mov	r0, r6
   1a6f0:	bl	11554 <strcmp@plt>
   1a6f4:	subs	r7, r0, #0
   1a6f8:	bne	1a76c <__assert_fail@plt+0x8db0>
   1a6fc:	bl	1177c <__ctype_b_loc@plt>
   1a700:	cmp	r5, #0
   1a704:	mov	r6, r0
   1a708:	beq	1a73c <__assert_fail@plt+0x8d80>
   1a70c:	ldr	r2, [r6]
   1a710:	lsl	r3, r7, #1
   1a714:	ldrh	r3, [r2, r3]
   1a718:	tst	r3, #16384	; 0x4000
   1a71c:	beq	1a72c <__assert_fail@plt+0x8d70>
   1a720:	ldrb	r1, [r5, r7]
   1a724:	mov	r0, r4
   1a728:	bl	1892c <__assert_fail@plt+0x6f70>
   1a72c:	add	r7, r7, #1
   1a730:	cmp	r7, #256	; 0x100
   1a734:	bne	1a70c <__assert_fail@plt+0x8d50>
   1a738:	b	1a41c <__assert_fail@plt+0x8a60>
   1a73c:	ldr	r2, [r6]
   1a740:	lsl	r3, r7, #1
   1a744:	ldrh	r3, [r2, r3]
   1a748:	tst	r3, #16384	; 0x4000
   1a74c:	beq	1a75c <__assert_fail@plt+0x8da0>
   1a750:	mov	r1, r7
   1a754:	mov	r0, r4
   1a758:	bl	1892c <__assert_fail@plt+0x6f70>
   1a75c:	add	r7, r7, #1
   1a760:	cmp	r7, #256	; 0x100
   1a764:	bne	1a73c <__assert_fail@plt+0x8d80>
   1a768:	b	1a41c <__assert_fail@plt+0x8a60>
   1a76c:	ldr	r1, [pc, #668]	; 1aa10 <__assert_fail@plt+0x9054>
   1a770:	mov	r0, r6
   1a774:	bl	11554 <strcmp@plt>
   1a778:	subs	r7, r0, #0
   1a77c:	bne	1a7f0 <__assert_fail@plt+0x8e34>
   1a780:	bl	1177c <__ctype_b_loc@plt>
   1a784:	cmp	r5, #0
   1a788:	mov	r6, r0
   1a78c:	beq	1a7c0 <__assert_fail@plt+0x8e04>
   1a790:	ldr	r2, [r6]
   1a794:	lsl	r3, r7, #1
   1a798:	ldrh	r3, [r2, r3]
   1a79c:	tst	r3, #256	; 0x100
   1a7a0:	beq	1a7b0 <__assert_fail@plt+0x8df4>
   1a7a4:	ldrb	r1, [r5, r7]
   1a7a8:	mov	r0, r4
   1a7ac:	bl	1892c <__assert_fail@plt+0x6f70>
   1a7b0:	add	r7, r7, #1
   1a7b4:	cmp	r7, #256	; 0x100
   1a7b8:	bne	1a790 <__assert_fail@plt+0x8dd4>
   1a7bc:	b	1a41c <__assert_fail@plt+0x8a60>
   1a7c0:	ldr	r2, [r6]
   1a7c4:	lsl	r3, r7, #1
   1a7c8:	ldrh	r3, [r2, r3]
   1a7cc:	tst	r3, #256	; 0x100
   1a7d0:	beq	1a7e0 <__assert_fail@plt+0x8e24>
   1a7d4:	mov	r1, r7
   1a7d8:	mov	r0, r4
   1a7dc:	bl	1892c <__assert_fail@plt+0x6f70>
   1a7e0:	add	r7, r7, #1
   1a7e4:	cmp	r7, #256	; 0x100
   1a7e8:	bne	1a7c0 <__assert_fail@plt+0x8e04>
   1a7ec:	b	1a41c <__assert_fail@plt+0x8a60>
   1a7f0:	ldr	r1, [pc, #568]	; 1aa30 <__assert_fail@plt+0x9074>
   1a7f4:	mov	r0, r6
   1a7f8:	bl	11554 <strcmp@plt>
   1a7fc:	subs	r7, r0, #0
   1a800:	bne	1a874 <__assert_fail@plt+0x8eb8>
   1a804:	bl	1177c <__ctype_b_loc@plt>
   1a808:	cmp	r5, #0
   1a80c:	mov	r6, r0
   1a810:	beq	1a844 <__assert_fail@plt+0x8e88>
   1a814:	ldr	r2, [r6]
   1a818:	lsl	r3, r7, #1
   1a81c:	ldrh	r3, [r2, r3]
   1a820:	tst	r3, #1
   1a824:	beq	1a834 <__assert_fail@plt+0x8e78>
   1a828:	ldrb	r1, [r5, r7]
   1a82c:	mov	r0, r4
   1a830:	bl	1892c <__assert_fail@plt+0x6f70>
   1a834:	add	r7, r7, #1
   1a838:	cmp	r7, #256	; 0x100
   1a83c:	bne	1a814 <__assert_fail@plt+0x8e58>
   1a840:	b	1a41c <__assert_fail@plt+0x8a60>
   1a844:	ldr	r2, [r6]
   1a848:	lsl	r3, r7, #1
   1a84c:	ldrh	r3, [r2, r3]
   1a850:	tst	r3, #1
   1a854:	beq	1a864 <__assert_fail@plt+0x8ea8>
   1a858:	mov	r1, r7
   1a85c:	mov	r0, r4
   1a860:	bl	1892c <__assert_fail@plt+0x6f70>
   1a864:	add	r7, r7, #1
   1a868:	cmp	r7, #256	; 0x100
   1a86c:	bne	1a844 <__assert_fail@plt+0x8e88>
   1a870:	b	1a41c <__assert_fail@plt+0x8a60>
   1a874:	ldr	r1, [pc, #440]	; 1aa34 <__assert_fail@plt+0x9078>
   1a878:	mov	r0, r6
   1a87c:	bl	11554 <strcmp@plt>
   1a880:	subs	r7, r0, #0
   1a884:	bne	1a8f8 <__assert_fail@plt+0x8f3c>
   1a888:	bl	1177c <__ctype_b_loc@plt>
   1a88c:	cmp	r5, #0
   1a890:	mov	r6, r0
   1a894:	beq	1a8c8 <__assert_fail@plt+0x8f0c>
   1a898:	ldr	r2, [r6]
   1a89c:	lsl	r3, r7, #1
   1a8a0:	ldrsh	r3, [r2, r3]
   1a8a4:	cmp	r3, #0
   1a8a8:	bge	1a8b8 <__assert_fail@plt+0x8efc>
   1a8ac:	ldrb	r1, [r5, r7]
   1a8b0:	mov	r0, r4
   1a8b4:	bl	1892c <__assert_fail@plt+0x6f70>
   1a8b8:	add	r7, r7, #1
   1a8bc:	cmp	r7, #256	; 0x100
   1a8c0:	bne	1a898 <__assert_fail@plt+0x8edc>
   1a8c4:	b	1a41c <__assert_fail@plt+0x8a60>
   1a8c8:	ldr	r2, [r6]
   1a8cc:	lsl	r3, r7, #1
   1a8d0:	ldrsh	r3, [r2, r3]
   1a8d4:	cmp	r3, #0
   1a8d8:	bge	1a8e8 <__assert_fail@plt+0x8f2c>
   1a8dc:	mov	r1, r7
   1a8e0:	mov	r0, r4
   1a8e4:	bl	1892c <__assert_fail@plt+0x6f70>
   1a8e8:	add	r7, r7, #1
   1a8ec:	cmp	r7, #256	; 0x100
   1a8f0:	bne	1a8c8 <__assert_fail@plt+0x8f0c>
   1a8f4:	b	1a41c <__assert_fail@plt+0x8a60>
   1a8f8:	ldr	r1, [pc, #312]	; 1aa38 <__assert_fail@plt+0x907c>
   1a8fc:	mov	r0, r6
   1a900:	bl	11554 <strcmp@plt>
   1a904:	subs	r7, r0, #0
   1a908:	bne	1a97c <__assert_fail@plt+0x8fc0>
   1a90c:	bl	1177c <__ctype_b_loc@plt>
   1a910:	cmp	r5, #0
   1a914:	mov	r6, r0
   1a918:	beq	1a94c <__assert_fail@plt+0x8f90>
   1a91c:	ldr	r2, [r6]
   1a920:	lsl	r3, r7, #1
   1a924:	ldrh	r3, [r2, r3]
   1a928:	tst	r3, #4
   1a92c:	beq	1a93c <__assert_fail@plt+0x8f80>
   1a930:	ldrb	r1, [r5, r7]
   1a934:	mov	r0, r4
   1a938:	bl	1892c <__assert_fail@plt+0x6f70>
   1a93c:	add	r7, r7, #1
   1a940:	cmp	r7, #256	; 0x100
   1a944:	bne	1a91c <__assert_fail@plt+0x8f60>
   1a948:	b	1a41c <__assert_fail@plt+0x8a60>
   1a94c:	ldr	r2, [r6]
   1a950:	lsl	r3, r7, #1
   1a954:	ldrh	r3, [r2, r3]
   1a958:	tst	r3, #4
   1a95c:	beq	1a96c <__assert_fail@plt+0x8fb0>
   1a960:	mov	r1, r7
   1a964:	mov	r0, r4
   1a968:	bl	1892c <__assert_fail@plt+0x6f70>
   1a96c:	add	r7, r7, #1
   1a970:	cmp	r7, #256	; 0x100
   1a974:	bne	1a94c <__assert_fail@plt+0x8f90>
   1a978:	b	1a41c <__assert_fail@plt+0x8a60>
   1a97c:	mov	r0, r6
   1a980:	ldr	r1, [pc, #180]	; 1aa3c <__assert_fail@plt+0x9080>
   1a984:	bl	11554 <strcmp@plt>
   1a988:	subs	r6, r0, #0
   1a98c:	bne	1aa08 <__assert_fail@plt+0x904c>
   1a990:	bl	1177c <__ctype_b_loc@plt>
   1a994:	cmp	r5, #0
   1a998:	mov	r7, r0
   1a99c:	beq	1a9d0 <__assert_fail@plt+0x9014>
   1a9a0:	ldr	r2, [r7]
   1a9a4:	lsl	r3, r6, #1
   1a9a8:	ldrh	r3, [r2, r3]
   1a9ac:	tst	r3, #4096	; 0x1000
   1a9b0:	beq	1a9c0 <__assert_fail@plt+0x9004>
   1a9b4:	ldrb	r1, [r5, r6]
   1a9b8:	mov	r0, r4
   1a9bc:	bl	1892c <__assert_fail@plt+0x6f70>
   1a9c0:	add	r6, r6, #1
   1a9c4:	cmp	r6, #256	; 0x100
   1a9c8:	bne	1a9a0 <__assert_fail@plt+0x8fe4>
   1a9cc:	b	1a41c <__assert_fail@plt+0x8a60>
   1a9d0:	ldr	r2, [r7]
   1a9d4:	lsl	r3, r6, #1
   1a9d8:	ldrh	r3, [r2, r3]
   1a9dc:	tst	r3, #4096	; 0x1000
   1a9e0:	beq	1a9f0 <__assert_fail@plt+0x9034>
   1a9e4:	mov	r1, r6
   1a9e8:	mov	r0, r4
   1a9ec:	bl	1892c <__assert_fail@plt+0x6f70>
   1a9f0:	add	r6, r6, #1
   1a9f4:	cmp	r6, #256	; 0x100
   1a9f8:	bne	1a9d0 <__assert_fail@plt+0x9014>
   1a9fc:	b	1a41c <__assert_fail@plt+0x8a60>
   1aa00:	mov	r0, #12
   1aa04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa08:	mov	r0, #4
   1aa0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa10:	andeq	r6, r2, r6, lsl sp
   1aa14:	andeq	r6, r2, r0, lsl sp
   1aa18:	andeq	r6, r2, ip, lsl sp
   1aa1c:	andeq	r6, r2, r2, lsr #26
   1aa20:	andeq	r6, r2, r8, lsr #26
   1aa24:	andeq	r6, r2, lr, lsr #26
   1aa28:	andeq	r6, r2, r7, asr #26
   1aa2c:	andeq	r6, r2, pc, lsl r2
   1aa30:	andeq	r6, r2, r4, lsr sp
   1aa34:	andeq	r6, r2, sl, lsr sp
   1aa38:	andeq	r6, r2, r0, asr #26
   1aa3c:	andeq	r6, r2, r6, asr #26
   1aa40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa44:	mov	r9, #0
   1aa48:	sub	sp, sp, #36	; 0x24
   1aa4c:	mov	r6, r0
   1aa50:	mov	fp, r1
   1aa54:	mov	r0, #32
   1aa58:	mov	r1, #1
   1aa5c:	ldr	r7, [sp, #76]	; 0x4c
   1aa60:	mov	r8, r3
   1aa64:	str	r2, [sp, #12]
   1aa68:	ldrb	sl, [sp, #72]	; 0x48
   1aa6c:	str	r9, [sp, #20]
   1aa70:	bl	18504 <__assert_fail@plt+0x6b48>
   1aa74:	subs	r4, r0, #0
   1aa78:	moveq	r3, #12
   1aa7c:	streq	r3, [r7]
   1aa80:	beq	1abc0 <__assert_fail@plt+0x9204>
   1aa84:	mov	r1, #1
   1aa88:	mov	r0, #40	; 0x28
   1aa8c:	bl	18504 <__assert_fail@plt+0x6b48>
   1aa90:	subs	r5, r0, #0
   1aa94:	bne	1aaac <__assert_fail@plt+0x90f0>
   1aa98:	mov	r0, r4
   1aa9c:	bl	18758 <__assert_fail@plt+0x6d9c>
   1aaa0:	mov	r3, #12
   1aaa4:	str	r3, [r7]
   1aaa8:	b	1aaf8 <__assert_fail@plt+0x913c>
   1aaac:	ldrb	r3, [r5, #16]
   1aab0:	mov	r0, fp
   1aab4:	mov	r2, r5
   1aab8:	mov	r1, r4
   1aabc:	bfi	r3, sl, #0, #1
   1aac0:	strb	r3, [r5, #16]
   1aac4:	ldr	r3, [sp, #12]
   1aac8:	str	r3, [sp]
   1aacc:	add	r3, sp, #20
   1aad0:	str	r9, [sp, #4]
   1aad4:	bl	1a328 <__assert_fail@plt+0x896c>
   1aad8:	subs	fp, r0, #0
   1aadc:	subeq	r8, r8, #1
   1aae0:	beq	1ab08 <__assert_fail@plt+0x914c>
   1aae4:	mov	r0, r4
   1aae8:	bl	18758 <__assert_fail@plt+0x6d9c>
   1aaec:	mov	r0, r5
   1aaf0:	bl	19c24 <__assert_fail@plt+0x8268>
   1aaf4:	str	fp, [r7]
   1aaf8:	mov	r4, #0
   1aafc:	b	1abc0 <__assert_fail@plt+0x9204>
   1ab00:	mov	r0, r4
   1ab04:	bl	1892c <__assert_fail@plt+0x6f70>
   1ab08:	ldrb	r1, [r8, #1]!
   1ab0c:	cmp	r1, #0
   1ab10:	bne	1ab00 <__assert_fail@plt+0x9144>
   1ab14:	cmp	sl, #0
   1ab18:	beq	1ab24 <__assert_fail@plt+0x9168>
   1ab1c:	mov	r0, r4
   1ab20:	bl	18978 <__assert_fail@plt+0x6fbc>
   1ab24:	ldr	r3, [r6, #92]	; 0x5c
   1ab28:	cmp	r3, #1
   1ab2c:	ble	1ab3c <__assert_fail@plt+0x9180>
   1ab30:	mov	r0, r4
   1ab34:	ldr	r1, [r6, #60]	; 0x3c
   1ab38:	bl	189c0 <__assert_fail@plt+0x7004>
   1ab3c:	mov	r8, #0
   1ab40:	mov	r3, #3
   1ab44:	str	r4, [sp, #24]
   1ab48:	mov	r2, r8
   1ab4c:	mov	r1, r8
   1ab50:	mov	r0, r6
   1ab54:	str	r8, [sp, #28]
   1ab58:	strb	r3, [sp, #28]
   1ab5c:	add	r3, sp, #24
   1ab60:	bl	1916c <__assert_fail@plt+0x77b0>
   1ab64:	subs	r9, r0, #0
   1ab68:	beq	1abdc <__assert_fail@plt+0x9220>
   1ab6c:	ldr	r3, [r6, #92]	; 0x5c
   1ab70:	cmp	r3, #1
   1ab74:	ble	1abcc <__assert_fail@plt+0x9210>
   1ab78:	mov	r3, #6
   1ab7c:	mov	r2, r8
   1ab80:	str	r5, [sp, #24]
   1ab84:	mov	r1, r8
   1ab88:	mov	r0, r6
   1ab8c:	strb	r3, [sp, #28]
   1ab90:	ldrb	r3, [r6, #88]	; 0x58
   1ab94:	orr	r3, r3, #2
   1ab98:	strb	r3, [r6, #88]	; 0x58
   1ab9c:	add	r3, sp, #24
   1aba0:	bl	1916c <__assert_fail@plt+0x77b0>
   1aba4:	subs	r2, r0, #0
   1aba8:	beq	1abdc <__assert_fail@plt+0x9220>
   1abac:	mov	r3, #10
   1abb0:	mov	r1, r9
   1abb4:	mov	r0, r6
   1abb8:	bl	192c0 <__assert_fail@plt+0x7904>
   1abbc:	mov	r4, r0
   1abc0:	mov	r0, r4
   1abc4:	add	sp, sp, #36	; 0x24
   1abc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abcc:	mov	r0, r5
   1abd0:	mov	r4, r9
   1abd4:	bl	19c24 <__assert_fail@plt+0x8268>
   1abd8:	b	1abc0 <__assert_fail@plt+0x9204>
   1abdc:	mov	r0, r4
   1abe0:	bl	18758 <__assert_fail@plt+0x6d9c>
   1abe4:	mov	r0, r5
   1abe8:	bl	19c24 <__assert_fail@plt+0x8268>
   1abec:	b	1aaa0 <__assert_fail@plt+0x90e4>
   1abf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abf4:	mov	r7, r0
   1abf8:	sub	sp, sp, #300	; 0x12c
   1abfc:	mov	fp, r1
   1ac00:	mov	r4, r2
   1ac04:	ldr	r5, [r0]
   1ac08:	ldr	r3, [r5, #92]	; 0x5c
   1ac0c:	cmp	r3, #1
   1ac10:	mov	r3, #0
   1ac14:	ldreq	r6, [r0, #12]
   1ac18:	movne	r6, #0
   1ac1c:	str	r3, [sp, #4]
   1ac20:	str	r3, [sp, #8]
   1ac24:	str	r3, [sp, #12]
   1ac28:	ubfxeq	r6, r6, #22, #1
   1ac2c:	ldr	r2, [sp, #4]
   1ac30:	ldr	r3, [fp, #8]
   1ac34:	cmp	r3, r2
   1ac38:	ble	1af34 <__assert_fail@plt+0x9578>
   1ac3c:	ldr	r2, [sp, #4]
   1ac40:	ldr	r3, [fp, #12]
   1ac44:	ldr	sl, [r3, r2, lsl #2]
   1ac48:	ldr	r3, [r5]
   1ac4c:	lsl	r9, sl, #3
   1ac50:	add	r2, r3, r9
   1ac54:	ldrb	r8, [r2, #4]
   1ac58:	cmp	r8, #1
   1ac5c:	bne	1ad48 <__assert_fail@plt+0x938c>
   1ac60:	ldrb	r0, [r3, sl, lsl #3]
   1ac64:	cmp	r6, #0
   1ac68:	strb	r8, [r4, r0]
   1ac6c:	beq	1ac78 <__assert_fail@plt+0x92bc>
   1ac70:	bl	115f0 <tolower@plt>
   1ac74:	strb	r8, [r4, r0]
   1ac78:	ldr	r3, [r7, #12]
   1ac7c:	tst	r3, #4194304	; 0x400000
   1ac80:	beq	1ad2c <__assert_fail@plt+0x9370>
   1ac84:	ldr	r3, [r5, #92]	; 0x5c
   1ac88:	cmp	r3, #1
   1ac8c:	ble	1ad2c <__assert_fail@plt+0x9370>
   1ac90:	ldr	r3, [r5]
   1ac94:	add	r8, sp, #41	; 0x29
   1ac98:	ldr	r1, [pc, #668]	; 1af3c <__assert_fail@plt+0x9580>
   1ac9c:	ldrb	r3, [r3, r9]
   1aca0:	strb	r3, [sp, #40]	; 0x28
   1aca4:	ldr	r3, [r5, #8]
   1aca8:	add	sl, sl, #1
   1acac:	cmp	r3, sl
   1acb0:	bls	1acd4 <__assert_fail@plt+0x9318>
   1acb4:	ldr	r2, [r5]
   1acb8:	add	r3, r2, sl, lsl #3
   1acbc:	ldr	r3, [r3, #4]
   1acc0:	bic	r3, r3, #-16777216	; 0xff000000
   1acc4:	bic	r3, r3, #14614528	; 0xdf0000
   1acc8:	bic	r3, r3, #65280	; 0xff00
   1accc:	cmp	r3, r1
   1acd0:	beq	1ad3c <__assert_fail@plt+0x9380>
   1acd4:	mov	r3, #0
   1acd8:	add	r9, sp, #40	; 0x28
   1acdc:	sub	r8, r8, r9
   1ace0:	mov	r1, r9
   1ace4:	mov	r2, r8
   1ace8:	add	r0, sp, #28
   1acec:	str	r3, [sp, #32]
   1acf0:	str	r3, [sp, #36]	; 0x24
   1acf4:	add	r3, sp, #32
   1acf8:	bl	1886c <__assert_fail@plt+0x6eb0>
   1acfc:	cmp	r8, r0
   1ad00:	bne	1ad2c <__assert_fail@plt+0x9370>
   1ad04:	ldr	r0, [sp, #28]
   1ad08:	bl	11608 <towlower@plt>
   1ad0c:	mov	r1, r0
   1ad10:	add	r2, sp, #32
   1ad14:	mov	r0, r9
   1ad18:	bl	1153c <wcrtomb@plt>
   1ad1c:	cmn	r0, #1
   1ad20:	ldrbne	r3, [sp, #40]	; 0x28
   1ad24:	movne	r2, #1
   1ad28:	strbne	r2, [r4, r3]
   1ad2c:	ldr	r3, [sp, #4]
   1ad30:	add	r3, r3, #1
   1ad34:	str	r3, [sp, #4]
   1ad38:	b	1ac2c <__assert_fail@plt+0x9270>
   1ad3c:	ldrb	r3, [r2, sl, lsl #3]
   1ad40:	strb	r3, [r8], #1
   1ad44:	b	1aca4 <__assert_fail@plt+0x92e8>
   1ad48:	cmp	r8, #3
   1ad4c:	bne	1adc4 <__assert_fail@plt+0x9408>
   1ad50:	mov	r8, #0
   1ad54:	mov	r2, #1
   1ad58:	ldr	r1, [r5]
   1ad5c:	lsl	r3, r8, #3
   1ad60:	mov	sl, #0
   1ad64:	ldr	r1, [r1, r9]
   1ad68:	ldr	r1, [r1, r8]
   1ad6c:	lsr	r0, r1, sl
   1ad70:	tst	r0, #1
   1ad74:	beq	1ada4 <__assert_fail@plt+0x93e8>
   1ad78:	cmp	r6, #0
   1ad7c:	strb	r2, [r4, r3]
   1ad80:	beq	1ada4 <__assert_fail@plt+0x93e8>
   1ad84:	mov	r0, r3
   1ad88:	str	r3, [sp, #16]
   1ad8c:	str	r1, [sp, #20]
   1ad90:	bl	115f0 <tolower@plt>
   1ad94:	ldr	r3, [sp, #16]
   1ad98:	mov	r2, #1
   1ad9c:	ldr	r1, [sp, #20]
   1ada0:	strb	r2, [r4, r0]
   1ada4:	add	sl, sl, #1
   1ada8:	add	r3, r3, #1
   1adac:	cmp	sl, #32
   1adb0:	bne	1ad6c <__assert_fail@plt+0x93b0>
   1adb4:	add	r8, r8, #4
   1adb8:	cmp	r8, #32
   1adbc:	bne	1ad58 <__assert_fail@plt+0x939c>
   1adc0:	b	1ad2c <__assert_fail@plt+0x9370>
   1adc4:	cmp	r8, #6
   1adc8:	bne	1af00 <__assert_fail@plt+0x9544>
   1adcc:	ldr	sl, [r3, r9]
   1add0:	ldr	r3, [r5, #92]	; 0x5c
   1add4:	cmp	r3, #1
   1add8:	ble	1aef8 <__assert_fail@plt+0x953c>
   1addc:	ldr	r3, [sl, #36]	; 0x24
   1ade0:	cmp	r3, #0
   1ade4:	bne	1ae00 <__assert_fail@plt+0x9444>
   1ade8:	ldrb	r3, [sl, #16]
   1adec:	tst	r3, #1
   1adf0:	bne	1ae00 <__assert_fail@plt+0x9444>
   1adf4:	ldr	r8, [sl, #32]
   1adf8:	cmp	r8, #0
   1adfc:	beq	1aee8 <__assert_fail@plt+0x952c>
   1ae00:	mov	r3, #0
   1ae04:	strb	r3, [sp, #32]
   1ae08:	ldr	r3, [sp, #8]
   1ae0c:	mov	r2, #1
   1ae10:	add	r1, sp, #32
   1ae14:	mov	r0, #0
   1ae18:	str	r3, [sp, #40]	; 0x28
   1ae1c:	ldr	r3, [sp, #12]
   1ae20:	str	r3, [sp, #44]	; 0x2c
   1ae24:	add	r3, sp, #40	; 0x28
   1ae28:	bl	1886c <__assert_fail@plt+0x6eb0>
   1ae2c:	ldrb	r3, [sp, #32]
   1ae30:	cmn	r0, #2
   1ae34:	moveq	r2, #1
   1ae38:	strbeq	r2, [r4, r3]
   1ae3c:	add	r3, r3, #1
   1ae40:	uxtb	r3, r3
   1ae44:	cmp	r3, #0
   1ae48:	strb	r3, [sp, #32]
   1ae4c:	bne	1ae08 <__assert_fail@plt+0x944c>
   1ae50:	b	1ad2c <__assert_fail@plt+0x9370>
   1ae54:	mov	r3, #0
   1ae58:	add	r2, sp, #32
   1ae5c:	lsl	r9, r8, #2
   1ae60:	add	r0, sp, #40	; 0x28
   1ae64:	str	r3, [sp, #32]
   1ae68:	str	r3, [sp, #36]	; 0x24
   1ae6c:	ldr	r3, [sl]
   1ae70:	ldr	r1, [r3, r8, lsl #2]
   1ae74:	bl	1153c <wcrtomb@plt>
   1ae78:	cmn	r0, #1
   1ae7c:	beq	1aea0 <__assert_fail@plt+0x94e4>
   1ae80:	ldrb	r0, [sp, #40]	; 0x28
   1ae84:	mov	r3, #1
   1ae88:	cmp	r6, #0
   1ae8c:	strb	r3, [r4, r0]
   1ae90:	beq	1aea0 <__assert_fail@plt+0x94e4>
   1ae94:	bl	115f0 <tolower@plt>
   1ae98:	mov	r3, #1
   1ae9c:	strb	r3, [r4, r0]
   1aea0:	ldr	r3, [r7, #12]
   1aea4:	tst	r3, #4194304	; 0x400000
   1aea8:	beq	1aee4 <__assert_fail@plt+0x9528>
   1aeac:	ldr	r3, [r5, #92]	; 0x5c
   1aeb0:	cmp	r3, #1
   1aeb4:	ble	1aee4 <__assert_fail@plt+0x9528>
   1aeb8:	ldr	r3, [sl]
   1aebc:	ldr	r0, [r3, r9]
   1aec0:	bl	11608 <towlower@plt>
   1aec4:	mov	r1, r0
   1aec8:	add	r2, sp, #32
   1aecc:	add	r0, sp, #40	; 0x28
   1aed0:	bl	1153c <wcrtomb@plt>
   1aed4:	cmn	r0, #1
   1aed8:	ldrbne	r3, [sp, #40]	; 0x28
   1aedc:	movne	r2, #1
   1aee0:	strbne	r2, [r4, r3]
   1aee4:	add	r8, r8, #1
   1aee8:	ldr	r3, [sl, #20]
   1aeec:	cmp	r3, r8
   1aef0:	bgt	1ae54 <__assert_fail@plt+0x9498>
   1aef4:	b	1ad2c <__assert_fail@plt+0x9370>
   1aef8:	mov	r8, #0
   1aefc:	b	1aee8 <__assert_fail@plt+0x952c>
   1af00:	and	r3, r8, #253	; 0xfd
   1af04:	cmp	r3, #5
   1af08:	beq	1af14 <__assert_fail@plt+0x9558>
   1af0c:	cmp	r8, #2
   1af10:	bne	1ad2c <__assert_fail@plt+0x9370>
   1af14:	mov	r2, #256	; 0x100
   1af18:	mov	r1, #1
   1af1c:	mov	r0, r4
   1af20:	bl	11818 <memset@plt>
   1af24:	cmp	r8, #2
   1af28:	ldrbeq	r3, [r7, #28]
   1af2c:	orreq	r3, r3, #1
   1af30:	strbeq	r3, [r7, #28]
   1af34:	add	sp, sp, #300	; 0x12c
   1af38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af3c:	eoreq	r0, r0, r1
   1af40:	ldr	r2, [r0, #80]	; 0x50
   1af44:	cmp	r2, #1
   1af48:	beq	1af60 <__assert_fail@plt+0x95a4>
   1af4c:	ldr	ip, [r0, #28]
   1af50:	add	r3, r1, #1
   1af54:	sub	r2, r3, r1
   1af58:	cmp	ip, r3
   1af5c:	bgt	1af68 <__assert_fail@plt+0x95ac>
   1af60:	mov	r0, r2
   1af64:	bx	lr
   1af68:	push	{lr}		; (str lr, [sp, #-4]!)
   1af6c:	ldr	lr, [r0, #8]
   1af70:	ldr	lr, [lr, r3, lsl #2]
   1af74:	add	r3, r3, #1
   1af78:	cmn	lr, #1
   1af7c:	bne	1af8c <__assert_fail@plt+0x95d0>
   1af80:	cmp	ip, r3
   1af84:	sub	r2, r3, r1
   1af88:	bgt	1af6c <__assert_fail@plt+0x95b0>
   1af8c:	mov	r0, r2
   1af90:	pop	{pc}		; (ldr pc, [sp], #4)
   1af94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af98:	ldr	r9, [r0]
   1af9c:	add	ip, r9, r1, lsl #3
   1afa0:	ldrb	r5, [ip, #4]
   1afa4:	cmp	r5, #7
   1afa8:	bne	1b094 <__assert_fail@plt+0x96d8>
   1afac:	ldr	r0, [r2, #4]
   1afb0:	ldrb	ip, [r0, r3]
   1afb4:	add	r1, r0, r3
   1afb8:	cmp	ip, #193	; 0xc1
   1afbc:	bls	1afec <__assert_fail@plt+0x9630>
   1afc0:	ldr	r0, [r2, #48]	; 0x30
   1afc4:	add	r2, r3, #1
   1afc8:	cmp	r2, r0
   1afcc:	bge	1afec <__assert_fail@plt+0x9630>
   1afd0:	cmp	ip, #223	; 0xdf
   1afd4:	ldrb	r2, [r1, #1]
   1afd8:	bhi	1aff8 <__assert_fail@plt+0x963c>
   1afdc:	eor	r2, r2, #128	; 0x80
   1afe0:	cmp	r2, #63	; 0x3f
   1afe4:	movls	r4, #2
   1afe8:	bls	1aff0 <__assert_fail@plt+0x9634>
   1afec:	mov	r4, #0
   1aff0:	mov	r0, r4
   1aff4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aff8:	cmp	ip, #239	; 0xef
   1affc:	bhi	1b040 <__assert_fail@plt+0x9684>
   1b000:	cmp	r2, #159	; 0x9f
   1b004:	cmpls	ip, #224	; 0xe0
   1b008:	movne	r4, #3
   1b00c:	beq	1afec <__assert_fail@plt+0x9630>
   1b010:	add	r3, r4, r3
   1b014:	cmp	r0, r3
   1b018:	blt	1afec <__assert_fail@plt+0x9630>
   1b01c:	mov	r3, #1
   1b020:	ldrb	r2, [r1, #1]!
   1b024:	eor	r2, r2, #128	; 0x80
   1b028:	cmp	r2, #63	; 0x3f
   1b02c:	bhi	1afec <__assert_fail@plt+0x9630>
   1b030:	add	r3, r3, #1
   1b034:	cmp	r4, r3
   1b038:	bne	1b020 <__assert_fail@plt+0x9664>
   1b03c:	b	1aff0 <__assert_fail@plt+0x9634>
   1b040:	cmp	ip, #247	; 0xf7
   1b044:	bhi	1b05c <__assert_fail@plt+0x96a0>
   1b048:	cmp	r2, #143	; 0x8f
   1b04c:	cmpls	ip, #240	; 0xf0
   1b050:	movne	r4, #4
   1b054:	bne	1b010 <__assert_fail@plt+0x9654>
   1b058:	b	1afec <__assert_fail@plt+0x9630>
   1b05c:	cmp	ip, #251	; 0xfb
   1b060:	bhi	1b078 <__assert_fail@plt+0x96bc>
   1b064:	cmp	r2, #135	; 0x87
   1b068:	cmpls	ip, #248	; 0xf8
   1b06c:	movne	r4, #5
   1b070:	bne	1b010 <__assert_fail@plt+0x9654>
   1b074:	b	1afec <__assert_fail@plt+0x9630>
   1b078:	cmp	ip, #253	; 0xfd
   1b07c:	bhi	1afec <__assert_fail@plt+0x9630>
   1b080:	cmp	r2, #131	; 0x83
   1b084:	cmpls	ip, #252	; 0xfc
   1b088:	beq	1afec <__assert_fail@plt+0x9630>
   1b08c:	mov	r4, #6
   1b090:	b	1b010 <__assert_fail@plt+0x9654>
   1b094:	mov	r7, r1
   1b098:	mov	sl, r0
   1b09c:	mov	r1, r3
   1b0a0:	mov	r0, r2
   1b0a4:	mov	r6, r3
   1b0a8:	mov	r8, r2
   1b0ac:	bl	1af40 <__assert_fail@plt+0x9584>
   1b0b0:	cmp	r5, #5
   1b0b4:	mov	r4, r0
   1b0b8:	bne	1b0fc <__assert_fail@plt+0x9740>
   1b0bc:	cmp	r0, #1
   1b0c0:	ble	1afec <__assert_fail@plt+0x9630>
   1b0c4:	ldr	r3, [sl, #128]	; 0x80
   1b0c8:	tst	r3, #64	; 0x40
   1b0cc:	bne	1b0e0 <__assert_fail@plt+0x9724>
   1b0d0:	ldr	r2, [r8, #4]
   1b0d4:	ldrb	r2, [r2, r6]
   1b0d8:	cmp	r2, #10
   1b0dc:	beq	1afec <__assert_fail@plt+0x9630>
   1b0e0:	tst	r3, #128	; 0x80
   1b0e4:	beq	1aff0 <__assert_fail@plt+0x9634>
   1b0e8:	ldr	r3, [r8, #4]
   1b0ec:	ldrb	r3, [r3, r6]
   1b0f0:	cmp	r3, #0
   1b0f4:	beq	1afec <__assert_fail@plt+0x9630>
   1b0f8:	b	1aff0 <__assert_fail@plt+0x9634>
   1b0fc:	sub	r3, r5, #6
   1b100:	cmp	r0, #1
   1b104:	clz	r3, r3
   1b108:	lsr	r3, r3, #5
   1b10c:	movle	r3, #0
   1b110:	cmp	r3, #0
   1b114:	beq	1afec <__assert_fail@plt+0x9630>
   1b118:	ldr	r7, [r9, r7, lsl #3]
   1b11c:	ldr	r2, [r7, #20]
   1b120:	ldr	r3, [r7, #32]
   1b124:	cmp	r3, #0
   1b128:	bne	1b138 <__assert_fail@plt+0x977c>
   1b12c:	ldr	r5, [r7, #36]	; 0x24
   1b130:	orrs	r5, r2, r5
   1b134:	beq	1b164 <__assert_fail@plt+0x97a8>
   1b138:	mov	r1, r6
   1b13c:	mov	r0, r8
   1b140:	bl	189e8 <__assert_fail@plt+0x702c>
   1b144:	mov	r5, r0
   1b148:	mov	r3, #0
   1b14c:	cmp	r3, r2
   1b150:	blt	1b194 <__assert_fail@plt+0x97d8>
   1b154:	mov	r6, #0
   1b158:	ldr	r3, [r7, #36]	; 0x24
   1b15c:	cmp	r3, r6
   1b160:	bgt	1b1ac <__assert_fail@plt+0x97f0>
   1b164:	ldr	r2, [r7, #32]
   1b168:	mov	r3, #0
   1b16c:	cmp	r2, r3
   1b170:	bgt	1b1cc <__assert_fail@plt+0x9810>
   1b174:	mov	r3, #0
   1b178:	ldrb	r2, [r7, #16]
   1b17c:	tst	r2, #1
   1b180:	moveq	r4, r3
   1b184:	beq	1aff0 <__assert_fail@plt+0x9634>
   1b188:	cmp	r3, #0
   1b18c:	bne	1afec <__assert_fail@plt+0x9630>
   1b190:	b	1aff0 <__assert_fail@plt+0x9634>
   1b194:	ldr	r1, [r7]
   1b198:	ldr	r1, [r1, r3, lsl #2]
   1b19c:	cmp	r1, r5
   1b1a0:	beq	1b1f4 <__assert_fail@plt+0x9838>
   1b1a4:	add	r3, r3, #1
   1b1a8:	b	1b14c <__assert_fail@plt+0x9790>
   1b1ac:	ldr	r3, [r7, #12]
   1b1b0:	mov	r0, r5
   1b1b4:	ldr	r1, [r3, r6, lsl #2]
   1b1b8:	bl	11548 <iswctype@plt>
   1b1bc:	cmp	r0, #0
   1b1c0:	bne	1b1f4 <__assert_fail@plt+0x9838>
   1b1c4:	add	r6, r6, #1
   1b1c8:	b	1b158 <__assert_fail@plt+0x979c>
   1b1cc:	ldr	r1, [r7, #4]
   1b1d0:	ldr	r1, [r1, r3, lsl #2]
   1b1d4:	cmp	r1, r5
   1b1d8:	bhi	1b1ec <__assert_fail@plt+0x9830>
   1b1dc:	ldr	r1, [r7, #8]
   1b1e0:	ldr	r1, [r1, r3, lsl #2]
   1b1e4:	cmp	r1, r5
   1b1e8:	bcs	1b1f4 <__assert_fail@plt+0x9838>
   1b1ec:	add	r3, r3, #1
   1b1f0:	b	1b16c <__assert_fail@plt+0x97b0>
   1b1f4:	mov	r3, r4
   1b1f8:	b	1b178 <__assert_fail@plt+0x97bc>
   1b1fc:	cmp	r1, #0
   1b200:	bxlt	lr
   1b204:	ldr	r3, [r0, #4]
   1b208:	cmp	r3, r1
   1b20c:	subgt	r3, r3, #1
   1b210:	strgt	r3, [r0, #4]
   1b214:	bxle	lr
   1b218:	ldr	r3, [r0, #4]
   1b21c:	cmp	r1, r3
   1b220:	bxge	lr
   1b224:	add	r1, r1, #1
   1b228:	ldr	r3, [r0, #8]
   1b22c:	ldr	r2, [r3, r1, lsl #2]
   1b230:	add	r3, r3, r1, lsl #2
   1b234:	str	r2, [r3, #-4]
   1b238:	b	1b218 <__assert_fail@plt+0x985c>
   1b23c:	ldrb	r3, [r1, #24]
   1b240:	cmp	r3, #4
   1b244:	bne	1b278 <__assert_fail@plt+0x98bc>
   1b248:	ldr	r3, [r0, #132]	; 0x84
   1b24c:	cmp	r3, #0
   1b250:	beq	1b270 <__assert_fail@plt+0x98b4>
   1b254:	ldr	r2, [r1, #20]
   1b258:	ldr	r2, [r3, r2, lsl #2]
   1b25c:	ldr	r3, [r0, #80]	; 0x50
   1b260:	str	r2, [r1, #20]
   1b264:	mov	r1, #1
   1b268:	orr	r3, r3, r1, lsl r2
   1b26c:	str	r3, [r0, #80]	; 0x50
   1b270:	mov	r0, #0
   1b274:	bx	lr
   1b278:	cmp	r3, #17
   1b27c:	bne	1b270 <__assert_fail@plt+0x98b4>
   1b280:	ldr	r3, [r1, #4]
   1b284:	cmp	r3, #0
   1b288:	beq	1b270 <__assert_fail@plt+0x98b4>
   1b28c:	ldrb	r2, [r3, #24]
   1b290:	cmp	r2, #17
   1b294:	bne	1b270 <__assert_fail@plt+0x98b4>
   1b298:	ldr	r2, [r3, #20]
   1b29c:	ldr	r3, [r3, #4]
   1b2a0:	cmp	r3, #0
   1b2a4:	str	r3, [r1, #4]
   1b2a8:	strne	r1, [r3]
   1b2ac:	cmp	r2, #31
   1b2b0:	ldr	r1, [r1, #20]
   1b2b4:	ldr	r3, [r0, #132]	; 0x84
   1b2b8:	ldr	r1, [r3, r1, lsl #2]
   1b2bc:	str	r1, [r3, r2, lsl #2]
   1b2c0:	bgt	1b270 <__assert_fail@plt+0x98b4>
   1b2c4:	ldr	r3, [r0, #80]	; 0x50
   1b2c8:	mov	r1, #1
   1b2cc:	bic	r3, r3, r1, lsl r2
   1b2d0:	b	1b26c <__assert_fail@plt+0x98b0>
   1b2d4:	ldrb	r3, [r1, #24]
   1b2d8:	ldr	r2, [r1, #4]
   1b2dc:	cmp	r3, #11
   1b2e0:	streq	r1, [r2, #16]
   1b2e4:	beq	1b308 <__assert_fail@plt+0x994c>
   1b2e8:	cmp	r3, #16
   1b2ec:	ldr	r3, [r1, #8]
   1b2f0:	beq	1b310 <__assert_fail@plt+0x9954>
   1b2f4:	cmp	r2, #0
   1b2f8:	ldrne	r0, [r1, #16]
   1b2fc:	strne	r0, [r2, #16]
   1b300:	cmp	r3, #0
   1b304:	bne	1b318 <__assert_fail@plt+0x995c>
   1b308:	mov	r0, #0
   1b30c:	bx	lr
   1b310:	ldr	r0, [r3, #12]
   1b314:	str	r0, [r2, #16]
   1b318:	ldr	r2, [r1, #16]
   1b31c:	str	r2, [r3, #16]
   1b320:	b	1b308 <__assert_fail@plt+0x994c>
   1b324:	push	{r4, r5, r6, lr}
   1b328:	mov	r4, r0
   1b32c:	mov	r5, r1
   1b330:	mov	r6, r2
   1b334:	mov	r1, r4
   1b338:	mov	r0, r6
   1b33c:	blx	r5
   1b340:	cmp	r0, #0
   1b344:	popne	{r4, r5, r6, pc}
   1b348:	ldr	r3, [r4, #4]
   1b34c:	cmp	r3, #0
   1b350:	moveq	r1, r0
   1b354:	beq	1b374 <__assert_fail@plt+0x99b8>
   1b358:	mov	r4, r3
   1b35c:	b	1b334 <__assert_fail@plt+0x9978>
   1b360:	ldr	r3, [r4]
   1b364:	mov	r1, r4
   1b368:	cmp	r3, #0
   1b36c:	popeq	{r4, r5, r6, pc}
   1b370:	mov	r4, r3
   1b374:	ldr	r3, [r4, #8]
   1b378:	cmp	r3, #0
   1b37c:	cmpne	r3, r1
   1b380:	beq	1b360 <__assert_fail@plt+0x99a4>
   1b384:	b	1b358 <__assert_fail@plt+0x999c>
   1b388:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b38c:	mov	r7, r1
   1b390:	mov	r9, r0
   1b394:	mov	r5, r1
   1b398:	mov	r4, r2
   1b39c:	str	r2, [r7], #16
   1b3a0:	mov	r0, r7
   1b3a4:	ldr	r1, [r1, #8]
   1b3a8:	bl	194b0 <__assert_fail@plt+0x7af4>
   1b3ac:	subs	r8, r0, #0
   1b3b0:	moveq	r6, r8
   1b3b4:	beq	1b3e4 <__assert_fail@plt+0x9a28>
   1b3b8:	mov	r8, #12
   1b3bc:	mov	r0, r8
   1b3c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b3c4:	ldr	r3, [r5, #12]
   1b3c8:	ldr	r1, [r3, r6, lsl #2]
   1b3cc:	ldr	r3, [r9]
   1b3d0:	add	r3, r3, r1, lsl #3
   1b3d4:	ldrb	r3, [r3, #4]
   1b3d8:	tst	r3, #8
   1b3dc:	beq	1b454 <__assert_fail@plt+0x9a98>
   1b3e0:	add	r6, r6, #1
   1b3e4:	ldr	r3, [r5, #8]
   1b3e8:	cmp	r3, r6
   1b3ec:	bgt	1b3c4 <__assert_fail@plt+0x9a08>
   1b3f0:	ldr	r7, [r9, #32]
   1b3f4:	ldr	r3, [r9, #68]	; 0x44
   1b3f8:	and	r4, r4, r3
   1b3fc:	mov	r3, #12
   1b400:	mul	r4, r3, r4
   1b404:	add	r6, r7, r4
   1b408:	ldr	r1, [r7, r4]
   1b40c:	ldr	r3, [r6, #4]
   1b410:	cmp	r3, r1
   1b414:	bgt	1b43c <__assert_fail@plt+0x9a80>
   1b418:	add	r1, r1, #1
   1b41c:	ldr	r0, [r6, #8]
   1b420:	lsl	r9, r1, #1
   1b424:	lsl	r1, r1, #3
   1b428:	bl	188bc <__assert_fail@plt+0x6f00>
   1b42c:	cmp	r0, #0
   1b430:	beq	1b3b8 <__assert_fail@plt+0x99fc>
   1b434:	str	r9, [r6, #4]
   1b438:	str	r0, [r6, #8]
   1b43c:	ldr	r3, [r7, r4]
   1b440:	ldr	r2, [r6, #8]
   1b444:	add	r1, r3, #1
   1b448:	str	r1, [r7, r4]
   1b44c:	str	r5, [r2, r3, lsl #2]
   1b450:	b	1b3bc <__assert_fail@plt+0x9a00>
   1b454:	mov	r0, r7
   1b458:	bl	19108 <__assert_fail@plt+0x774c>
   1b45c:	cmp	r0, #0
   1b460:	bne	1b3e0 <__assert_fail@plt+0x9a24>
   1b464:	b	1b3b8 <__assert_fail@plt+0x99fc>
   1b468:	ldr	r3, [r1, #4]
   1b46c:	cmp	r3, #0
   1b470:	str	r3, [r0, #4]
   1b474:	ble	1b4c8 <__assert_fail@plt+0x9b0c>
   1b478:	push	{r4, r5, r6, lr}
   1b47c:	mov	r4, r0
   1b480:	lsl	r0, r3, #2
   1b484:	mov	r5, r1
   1b488:	str	r3, [r4]
   1b48c:	bl	18840 <__assert_fail@plt+0x6e84>
   1b490:	cmp	r0, #0
   1b494:	mov	r3, r0
   1b498:	str	r0, [r4, #8]
   1b49c:	bne	1b4b0 <__assert_fail@plt+0x9af4>
   1b4a0:	mov	r0, #12
   1b4a4:	str	r3, [r4]
   1b4a8:	str	r3, [r4, #4]
   1b4ac:	pop	{r4, r5, r6, pc}
   1b4b0:	ldr	r2, [r5, #4]
   1b4b4:	ldr	r1, [r5, #8]
   1b4b8:	lsl	r2, r2, #2
   1b4bc:	bl	115e4 <memcpy@plt>
   1b4c0:	mov	r0, #0
   1b4c4:	pop	{r4, r5, r6, pc}
   1b4c8:	mov	r3, #0
   1b4cc:	str	r3, [r0]
   1b4d0:	str	r3, [r0, #4]
   1b4d4:	str	r3, [r0, #8]
   1b4d8:	mov	r0, r3
   1b4dc:	bx	lr
   1b4e0:	cmp	r1, #0
   1b4e4:	beq	1b588 <__assert_fail@plt+0x9bcc>
   1b4e8:	ldr	r3, [r1, #4]
   1b4ec:	cmp	r2, #0
   1b4f0:	cmpne	r3, #0
   1b4f4:	ble	1b57c <__assert_fail@plt+0x9bc0>
   1b4f8:	ldr	ip, [r2, #4]
   1b4fc:	cmp	ip, #0
   1b500:	ble	1b584 <__assert_fail@plt+0x9bc8>
   1b504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b508:	mov	r7, r0
   1b50c:	add	r0, r3, ip
   1b510:	mov	r9, r1
   1b514:	mov	r8, r2
   1b518:	str	r0, [r7]
   1b51c:	lsl	r0, r0, #2
   1b520:	bl	18840 <__assert_fail@plt+0x6e84>
   1b524:	cmp	r0, #0
   1b528:	mov	lr, r0
   1b52c:	str	r0, [r7, #8]
   1b530:	beq	1b5e8 <__assert_fail@plt+0x9c2c>
   1b534:	ldr	r5, [r8, #4]
   1b538:	mov	ip, #0
   1b53c:	mov	r3, ip
   1b540:	mov	r6, ip
   1b544:	ldr	r2, [r9, #4]
   1b548:	cmp	r2, r6
   1b54c:	mov	r4, ip
   1b550:	ble	1b5f0 <__assert_fail@plt+0x9c34>
   1b554:	ldr	sl, [r9, #8]
   1b558:	cmp	r5, r3
   1b55c:	add	r0, lr, ip, lsl #2
   1b560:	add	r1, sl, r6, lsl #2
   1b564:	bgt	1b5b8 <__assert_fail@plt+0x9bfc>
   1b568:	sub	r6, r2, r6
   1b56c:	lsl	r2, r6, #2
   1b570:	add	r4, r4, r6
   1b574:	bl	115e4 <memcpy@plt>
   1b578:	b	1b614 <__assert_fail@plt+0x9c58>
   1b57c:	cmp	r3, #0
   1b580:	ble	1b588 <__assert_fail@plt+0x9bcc>
   1b584:	b	1b468 <__assert_fail@plt+0x9aac>
   1b588:	cmp	r2, #0
   1b58c:	beq	1b5a0 <__assert_fail@plt+0x9be4>
   1b590:	ldr	r3, [r2, #4]
   1b594:	cmp	r3, #0
   1b598:	movgt	r1, r2
   1b59c:	bgt	1b584 <__assert_fail@plt+0x9bc8>
   1b5a0:	mov	r3, #0
   1b5a4:	str	r3, [r0]
   1b5a8:	str	r3, [r0, #4]
   1b5ac:	str	r3, [r0, #8]
   1b5b0:	mov	r0, r3
   1b5b4:	bx	lr
   1b5b8:	ldr	r0, [r8, #8]
   1b5bc:	ldr	r1, [sl, r6, lsl #2]
   1b5c0:	ldr	r0, [r0, r3, lsl #2]
   1b5c4:	cmp	r1, r0
   1b5c8:	addgt	r3, r3, #1
   1b5cc:	strgt	r0, [lr, ip, lsl #2]
   1b5d0:	bgt	1b5e0 <__assert_fail@plt+0x9c24>
   1b5d4:	addeq	r3, r3, #1
   1b5d8:	add	r6, r6, #1
   1b5dc:	str	r1, [lr, ip, lsl #2]
   1b5e0:	add	ip, ip, #1
   1b5e4:	b	1b548 <__assert_fail@plt+0x9b8c>
   1b5e8:	mov	r0, #12
   1b5ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b5f0:	cmp	r5, r3
   1b5f4:	ble	1b614 <__assert_fail@plt+0x9c58>
   1b5f8:	ldr	r1, [r8, #8]
   1b5fc:	sub	r5, r5, r3
   1b600:	add	r0, lr, r4, lsl #2
   1b604:	lsl	r2, r5, #2
   1b608:	add	r4, r4, r5
   1b60c:	add	r1, r1, r3, lsl #2
   1b610:	bl	115e4 <memcpy@plt>
   1b614:	mov	r0, #0
   1b618:	str	r4, [r7, #4]
   1b61c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b624:	sub	sp, sp, #20
   1b628:	ldr	r4, [r2, #4]
   1b62c:	cmp	r4, #0
   1b630:	addne	r9, r4, r3
   1b634:	movne	ip, #0
   1b638:	streq	r4, [r0]
   1b63c:	bne	1b65c <__assert_fail@plt+0x9ca0>
   1b640:	mov	r0, r4
   1b644:	add	sp, sp, #20
   1b648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b64c:	ldr	lr, [r2, #8]
   1b650:	ldr	lr, [lr, ip, lsl #2]
   1b654:	add	ip, ip, #1
   1b658:	add	r9, r9, lr
   1b65c:	cmp	r4, ip
   1b660:	bgt	1b64c <__assert_fail@plt+0x9c90>
   1b664:	mov	r5, r3
   1b668:	ldr	r3, [r1, #68]	; 0x44
   1b66c:	mov	r6, r2
   1b670:	mov	r8, r1
   1b674:	mov	r7, #0
   1b678:	str	r0, [sp, #8]
   1b67c:	and	r2, r9, r3
   1b680:	mov	r3, #12
   1b684:	mul	r3, r3, r2
   1b688:	ldr	r2, [r1, #32]
   1b68c:	ldr	fp, [r2, r3]
   1b690:	add	sl, r2, r3
   1b694:	cmp	fp, r7
   1b698:	bgt	1b6e4 <__assert_fail@plt+0x9d28>
   1b69c:	mov	r1, #1
   1b6a0:	mov	r0, #56	; 0x38
   1b6a4:	bl	18504 <__assert_fail@plt+0x6b48>
   1b6a8:	subs	r4, r0, #0
   1b6ac:	beq	1b6d0 <__assert_fail@plt+0x9d14>
   1b6b0:	add	sl, r4, #4
   1b6b4:	mov	r1, r6
   1b6b8:	mov	r0, sl
   1b6bc:	bl	1b468 <__assert_fail@plt+0x9aac>
   1b6c0:	subs	r3, r0, #0
   1b6c4:	beq	1b724 <__assert_fail@plt+0x9d68>
   1b6c8:	mov	r0, r4
   1b6cc:	bl	18758 <__assert_fail@plt+0x6d9c>
   1b6d0:	ldr	r2, [sp, #8]
   1b6d4:	mov	r3, #12
   1b6d8:	mov	r4, #0
   1b6dc:	str	r3, [r2]
   1b6e0:	b	1b640 <__assert_fail@plt+0x9c84>
   1b6e4:	ldr	r3, [sl, #8]
   1b6e8:	ldr	r4, [r3, r7, lsl #2]
   1b6ec:	ldr	r3, [r4]
   1b6f0:	cmp	r3, r9
   1b6f4:	bne	1b71c <__assert_fail@plt+0x9d60>
   1b6f8:	ldrb	r3, [r4, #52]	; 0x34
   1b6fc:	and	r3, r3, #15
   1b700:	cmp	r3, r5
   1b704:	bne	1b71c <__assert_fail@plt+0x9d60>
   1b708:	mov	r1, r6
   1b70c:	ldr	r0, [r4, #40]	; 0x28
   1b710:	bl	18a54 <__assert_fail@plt+0x7098>
   1b714:	cmp	r0, #0
   1b718:	bne	1b640 <__assert_fail@plt+0x9c84>
   1b71c:	add	r7, r7, #1
   1b720:	b	1b694 <__assert_fail@plt+0x9cd8>
   1b724:	ldrb	r2, [r4, #52]	; 0x34
   1b728:	mov	fp, r3
   1b72c:	str	sl, [r4, #40]	; 0x28
   1b730:	bfi	r2, r5, #0, #4
   1b734:	strb	r2, [r4, #52]	; 0x34
   1b738:	and	r2, r5, #4
   1b73c:	str	r2, [sp]
   1b740:	and	r2, r5, #2
   1b744:	and	r5, r5, #1
   1b748:	str	r2, [sp, #4]
   1b74c:	ldr	r1, [r6, #4]
   1b750:	cmp	fp, r1
   1b754:	blt	1b774 <__assert_fail@plt+0x9db8>
   1b758:	mov	r2, r9
   1b75c:	mov	r1, r4
   1b760:	mov	r0, r8
   1b764:	bl	1b388 <__assert_fail@plt+0x99cc>
   1b768:	cmp	r0, #0
   1b76c:	beq	1b640 <__assert_fail@plt+0x9c84>
   1b770:	b	1b800 <__assert_fail@plt+0x9e44>
   1b774:	ldr	r1, [r6, #8]
   1b778:	ldr	r0, [r8]
   1b77c:	ldr	r1, [r1, fp, lsl #2]
   1b780:	add	r0, r0, r1, lsl #3
   1b784:	ldr	r7, [r0, #4]
   1b788:	ldrb	ip, [r0, #4]
   1b78c:	ubfx	r7, r7, #8, #10
   1b790:	cmp	ip, #1
   1b794:	cmpeq	r7, #0
   1b798:	beq	1b88c <__assert_fail@plt+0x9ed0>
   1b79c:	ldrb	r1, [r4, #52]	; 0x34
   1b7a0:	cmp	ip, #2
   1b7a4:	ldrb	r0, [r0, #6]
   1b7a8:	ubfx	lr, r1, #5, #1
   1b7ac:	ubfx	r0, r0, #4, #1
   1b7b0:	orr	r0, lr, r0
   1b7b4:	bfi	r1, r0, #5, #1
   1b7b8:	strb	r1, [r4, #52]	; 0x34
   1b7bc:	uxtbeq	r1, r1
   1b7c0:	orreq	r1, r1, #16
   1b7c4:	beq	1b7d8 <__assert_fail@plt+0x9e1c>
   1b7c8:	cmp	ip, #4
   1b7cc:	bne	1b7dc <__assert_fail@plt+0x9e20>
   1b7d0:	ldrb	r1, [r4, #52]	; 0x34
   1b7d4:	orr	r1, r1, #64	; 0x40
   1b7d8:	strb	r1, [r4, #52]	; 0x34
   1b7dc:	cmp	r7, #0
   1b7e0:	beq	1b88c <__assert_fail@plt+0x9ed0>
   1b7e4:	ldr	r1, [r4, #40]	; 0x28
   1b7e8:	cmp	sl, r1
   1b7ec:	bne	1b82c <__assert_fail@plt+0x9e70>
   1b7f0:	mov	r0, #12
   1b7f4:	bl	18840 <__assert_fail@plt+0x6e84>
   1b7f8:	subs	r3, r0, #0
   1b7fc:	bne	1b80c <__assert_fail@plt+0x9e50>
   1b800:	mov	r0, r4
   1b804:	bl	19eb4 <__assert_fail@plt+0x84f8>
   1b808:	b	1b6d0 <__assert_fail@plt+0x9d14>
   1b80c:	mov	r1, r6
   1b810:	str	r3, [r4, #40]	; 0x28
   1b814:	bl	1b468 <__assert_fail@plt+0x9aac>
   1b818:	subs	r3, r0, #0
   1b81c:	bne	1b800 <__assert_fail@plt+0x9e44>
   1b820:	ldrb	r1, [r4, #52]	; 0x34
   1b824:	orr	r1, r1, #128	; 0x80
   1b828:	strb	r1, [r4, #52]	; 0x34
   1b82c:	tst	r7, #1
   1b830:	beq	1b83c <__assert_fail@plt+0x9e80>
   1b834:	cmp	r5, #0
   1b838:	beq	1b874 <__assert_fail@plt+0x9eb8>
   1b83c:	tst	r7, #2
   1b840:	beq	1b84c <__assert_fail@plt+0x9e90>
   1b844:	cmp	r5, #0
   1b848:	bne	1b874 <__assert_fail@plt+0x9eb8>
   1b84c:	tst	r7, #16
   1b850:	beq	1b860 <__assert_fail@plt+0x9ea4>
   1b854:	ldr	r2, [sp, #4]
   1b858:	cmp	r2, #0
   1b85c:	beq	1b874 <__assert_fail@plt+0x9eb8>
   1b860:	tst	r7, #64	; 0x40
   1b864:	beq	1b88c <__assert_fail@plt+0x9ed0>
   1b868:	ldr	r2, [sp]
   1b86c:	cmp	r2, #0
   1b870:	bne	1b88c <__assert_fail@plt+0x9ed0>
   1b874:	sub	r1, fp, r3
   1b878:	mov	r0, sl
   1b87c:	str	r3, [sp, #12]
   1b880:	bl	1b1fc <__assert_fail@plt+0x9840>
   1b884:	ldr	r3, [sp, #12]
   1b888:	add	r3, r3, #1
   1b88c:	add	fp, fp, #1
   1b890:	b	1b74c <__assert_fail@plt+0x9d90>
   1b894:	ldr	r3, [r1, #4]
   1b898:	cmp	r3, #0
   1b89c:	beq	1b9f0 <__assert_fail@plt+0xa034>
   1b8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8a4:	ldr	r4, [r2, #4]
   1b8a8:	cmp	r4, #0
   1b8ac:	beq	1b9d4 <__assert_fail@plt+0xa018>
   1b8b0:	mov	r6, r2
   1b8b4:	ldr	r2, [r0, #4]
   1b8b8:	add	r3, r3, r4
   1b8bc:	mov	r7, r1
   1b8c0:	mov	r5, r0
   1b8c4:	ldr	r4, [r0]
   1b8c8:	add	r2, r3, r2
   1b8cc:	cmp	r2, r4
   1b8d0:	ble	1b8f8 <__assert_fail@plt+0x9f3c>
   1b8d4:	add	r4, r3, r4
   1b8d8:	ldr	r0, [r0, #8]
   1b8dc:	lsl	r1, r4, #2
   1b8e0:	bl	188bc <__assert_fail@plt+0x6f00>
   1b8e4:	cmp	r0, #0
   1b8e8:	moveq	r3, #12
   1b8ec:	beq	1b9d8 <__assert_fail@plt+0xa01c>
   1b8f0:	str	r4, [r5]
   1b8f4:	str	r0, [r5, #8]
   1b8f8:	ldr	r2, [r5, #4]
   1b8fc:	ldmib	r7, {r3, r4}
   1b900:	ldmib	r6, {r0, r8}
   1b904:	add	ip, r2, r3
   1b908:	sub	r3, r3, #1
   1b90c:	sub	r2, r2, #1
   1b910:	add	ip, ip, r0
   1b914:	sub	r0, r0, #1
   1b918:	ldr	lr, [r8, r0, lsl #2]
   1b91c:	ldr	r1, [r4, r3, lsl #2]
   1b920:	cmp	r1, lr
   1b924:	ldreq	lr, [r5, #8]
   1b928:	beq	1b93c <__assert_fail@plt+0x9f80>
   1b92c:	blt	1b964 <__assert_fail@plt+0x9fa8>
   1b930:	subs	r3, r3, #1
   1b934:	b	1b968 <__assert_fail@plt+0x9fac>
   1b938:	sub	r2, r2, #1
   1b93c:	cmp	r2, #0
   1b940:	blt	1b954 <__assert_fail@plt+0x9f98>
   1b944:	ldr	r9, [lr, r2, lsl #2]
   1b948:	cmp	r1, r9
   1b94c:	blt	1b938 <__assert_fail@plt+0x9f7c>
   1b950:	beq	1b95c <__assert_fail@plt+0x9fa0>
   1b954:	sub	ip, ip, #1
   1b958:	str	r1, [lr, ip, lsl #2]
   1b95c:	subs	r3, r3, #1
   1b960:	bmi	1b96c <__assert_fail@plt+0x9fb0>
   1b964:	subs	r0, r0, #1
   1b968:	bpl	1b918 <__assert_fail@plt+0x9f5c>
   1b96c:	ldr	r1, [r5, #4]
   1b970:	ldr	r2, [r7, #4]
   1b974:	ldr	r0, [r6, #4]
   1b978:	sub	r3, r1, #1
   1b97c:	add	r2, r1, r2
   1b980:	add	r2, r2, r0
   1b984:	ldr	r0, [r5, #8]
   1b988:	sub	lr, r2, #1
   1b98c:	sub	r2, r2, ip
   1b990:	add	r1, r1, r2
   1b994:	cmp	r3, #0
   1b998:	cmpge	r2, #0
   1b99c:	str	r1, [r5, #4]
   1b9a0:	ble	1b9c8 <__assert_fail@plt+0xa00c>
   1b9a4:	ldr	r5, [r0, lr, lsl #2]
   1b9a8:	add	r1, r3, r2
   1b9ac:	ldr	r4, [r0, r3, lsl #2]
   1b9b0:	cmp	r5, r4
   1b9b4:	ble	1b9e0 <__assert_fail@plt+0xa024>
   1b9b8:	subs	r2, r2, #1
   1b9bc:	sub	lr, lr, #1
   1b9c0:	str	r5, [r0, r1, lsl #2]
   1b9c4:	bne	1b9a4 <__assert_fail@plt+0x9fe8>
   1b9c8:	lsl	r2, r2, #2
   1b9cc:	add	r1, r0, ip, lsl #2
   1b9d0:	bl	115e4 <memcpy@plt>
   1b9d4:	mov	r3, #0
   1b9d8:	mov	r0, r3
   1b9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b9e0:	subs	r3, r3, #1
   1b9e4:	str	r4, [r0, r1, lsl #2]
   1b9e8:	bcs	1b9a4 <__assert_fail@plt+0x9fe8>
   1b9ec:	b	1b9c8 <__assert_fail@plt+0xa00c>
   1b9f0:	mov	r0, r3
   1b9f4:	bx	lr
   1b9f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9fc:	mov	r9, #12
   1ba00:	sub	sp, sp, #28
   1ba04:	mov	r4, #0
   1ba08:	mov	r8, r0
   1ba0c:	mov	fp, r1
   1ba10:	mov	r7, r2
   1ba14:	ldr	r5, [r0, #28]
   1ba18:	str	r3, [sp]
   1ba1c:	str	r4, [sp, #12]
   1ba20:	str	r4, [sp, #16]
   1ba24:	str	r4, [sp, #20]
   1ba28:	mla	r5, r9, r1, r5
   1ba2c:	ldr	r3, [r5, #4]
   1ba30:	cmp	r3, r4
   1ba34:	bgt	1ba58 <__assert_fail@plt+0xa09c>
   1ba38:	mov	r4, #0
   1ba3c:	ldr	r3, [r5, #4]
   1ba40:	cmp	r3, r4
   1ba44:	bgt	1bb34 <__assert_fail@plt+0xa178>
   1ba48:	ldr	r0, [sp, #20]
   1ba4c:	mov	r6, #0
   1ba50:	bl	18758 <__assert_fail@plt+0x6d9c>
   1ba54:	b	1bb20 <__assert_fail@plt+0xa164>
   1ba58:	ldr	r3, [r5, #8]
   1ba5c:	ldr	r6, [r3, r4, lsl #2]
   1ba60:	cmp	fp, r6
   1ba64:	beq	1bb2c <__assert_fail@plt+0xa170>
   1ba68:	ldr	r3, [r8]
   1ba6c:	add	r3, r3, r6, lsl #3
   1ba70:	ldrb	r3, [r3, #4]
   1ba74:	tst	r3, #8
   1ba78:	beq	1bb2c <__assert_fail@plt+0xa170>
   1ba7c:	ldr	r3, [r8, #20]
   1ba80:	mul	r6, r9, r6
   1ba84:	mov	r0, r5
   1ba88:	add	r3, r3, r6
   1ba8c:	ldr	r1, [r3, #8]
   1ba90:	ldr	r3, [r3, #4]
   1ba94:	ldr	r2, [r1]
   1ba98:	cmp	r3, #1
   1ba9c:	ldrgt	sl, [r1, #4]
   1baa0:	mvnle	sl, #0
   1baa4:	mov	r1, r2
   1baa8:	str	r2, [sp, #4]
   1baac:	bl	18acc <__assert_fail@plt+0x7110>
   1bab0:	cmp	r0, #0
   1bab4:	bne	1bad0 <__assert_fail@plt+0xa114>
   1bab8:	ldr	r2, [sp, #4]
   1babc:	mov	r0, r7
   1bac0:	mov	r1, r2
   1bac4:	bl	18acc <__assert_fail@plt+0x7110>
   1bac8:	cmp	r0, #0
   1bacc:	bne	1bafc <__assert_fail@plt+0xa140>
   1bad0:	cmp	sl, #0
   1bad4:	ble	1bb2c <__assert_fail@plt+0xa170>
   1bad8:	mov	r1, sl
   1badc:	mov	r0, r5
   1bae0:	bl	18acc <__assert_fail@plt+0x7110>
   1bae4:	cmp	r0, #0
   1bae8:	bne	1bb2c <__assert_fail@plt+0xa170>
   1baec:	mov	r0, r7
   1baf0:	bl	18acc <__assert_fail@plt+0x7110>
   1baf4:	cmp	r0, #0
   1baf8:	beq	1bb2c <__assert_fail@plt+0xa170>
   1bafc:	ldr	r2, [r8, #28]
   1bb00:	add	r0, sp, #12
   1bb04:	ldr	r1, [sp]
   1bb08:	add	r2, r2, r6
   1bb0c:	bl	1b894 <__assert_fail@plt+0x9ed8>
   1bb10:	subs	r6, r0, #0
   1bb14:	beq	1bb2c <__assert_fail@plt+0xa170>
   1bb18:	ldr	r0, [sp, #20]
   1bb1c:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bb20:	mov	r0, r6
   1bb24:	add	sp, sp, #28
   1bb28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb2c:	add	r4, r4, #1
   1bb30:	b	1ba2c <__assert_fail@plt+0xa070>
   1bb34:	ldr	r3, [r5, #8]
   1bb38:	add	r0, sp, #12
   1bb3c:	ldr	r6, [r3, r4, lsl #2]
   1bb40:	mov	r1, r6
   1bb44:	bl	18acc <__assert_fail@plt+0x7110>
   1bb48:	cmp	r0, #0
   1bb4c:	bne	1bb64 <__assert_fail@plt+0xa1a8>
   1bb50:	mov	r0, r7
   1bb54:	bl	18acc <__assert_fail@plt+0x7110>
   1bb58:	sub	r1, r0, #1
   1bb5c:	mov	r0, r7
   1bb60:	bl	1b1fc <__assert_fail@plt+0x9840>
   1bb64:	add	r4, r4, #1
   1bb68:	b	1ba3c <__assert_fail@plt+0xa080>
   1bb6c:	ldrb	r3, [r1, #24]
   1bb70:	cmp	r3, #16
   1bb74:	bne	1bb94 <__assert_fail@plt+0xa1d8>
   1bb78:	ldr	r3, [r1, #4]
   1bb7c:	mov	r0, #0
   1bb80:	ldr	r2, [r3, #12]
   1bb84:	ldr	r3, [r3, #28]
   1bb88:	str	r2, [r1, #12]
   1bb8c:	str	r3, [r1, #28]
   1bb90:	bx	lr
   1bb94:	push	{r4, r5, r6, lr}
   1bb98:	mov	r4, r1
   1bb9c:	add	r3, r1, #20
   1bba0:	mov	r5, r0
   1bba4:	ldm	r3, {r1, r2}
   1bba8:	str	r4, [r4, #12]
   1bbac:	bl	19c9c <__assert_fail@plt+0x82e0>
   1bbb0:	cmn	r0, #1
   1bbb4:	str	r0, [r4, #28]
   1bbb8:	beq	1bbe8 <__assert_fail@plt+0xa22c>
   1bbbc:	ldrb	r3, [r4, #24]
   1bbc0:	cmp	r3, #12
   1bbc4:	bne	1bbe0 <__assert_fail@plt+0xa224>
   1bbc8:	ldr	r3, [r5]
   1bbcc:	ldr	r2, [r4, #20]
   1bbd0:	add	r0, r3, r0, lsl #3
   1bbd4:	ldr	r3, [r0, #4]
   1bbd8:	bfi	r3, r2, #8, #10
   1bbdc:	str	r3, [r0, #4]
   1bbe0:	mov	r0, #0
   1bbe4:	pop	{r4, r5, r6, pc}
   1bbe8:	mov	r0, #12
   1bbec:	pop	{r4, r5, r6, pc}
   1bbf0:	ldr	r3, [r0]
   1bbf4:	push	{r4, r5, r6, r7, r8, lr}
   1bbf8:	mov	r4, r0
   1bbfc:	cmp	r3, #0
   1bc00:	movne	r5, #0
   1bc04:	bne	1bc94 <__assert_fail@plt+0xa2d8>
   1bc08:	ldr	r0, [r4, #12]
   1bc0c:	mov	r5, #0
   1bc10:	mov	r6, #12
   1bc14:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc18:	ldr	r3, [r4, #8]
   1bc1c:	cmp	r3, r5
   1bc20:	bhi	1bca4 <__assert_fail@plt+0xa2e8>
   1bc24:	ldr	r0, [r4, #20]
   1bc28:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc2c:	ldr	r0, [r4, #24]
   1bc30:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc34:	ldr	r0, [r4, #28]
   1bc38:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc3c:	ldr	r0, [r4]
   1bc40:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc44:	ldr	r3, [r4, #32]
   1bc48:	cmp	r3, #0
   1bc4c:	movne	r5, #0
   1bc50:	movne	r8, #12
   1bc54:	bne	1bd14 <__assert_fail@plt+0xa358>
   1bc58:	ldr	r0, [r4, #32]
   1bc5c:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc60:	ldr	r3, [pc, #216]	; 1bd40 <__assert_fail@plt+0xa384>
   1bc64:	ldr	r0, [r4, #60]	; 0x3c
   1bc68:	cmp	r0, r3
   1bc6c:	bne	1bd38 <__assert_fail@plt+0xa37c>
   1bc70:	ldr	r0, [r4, #132]	; 0x84
   1bc74:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bc78:	mov	r0, r4
   1bc7c:	pop	{r4, r5, r6, r7, r8, lr}
   1bc80:	b	18758 <__assert_fail@plt+0x6d9c>
   1bc84:	ldr	r0, [r4]
   1bc88:	add	r0, r0, r5, lsl #3
   1bc8c:	add	r5, r5, #1
   1bc90:	bl	19c58 <__assert_fail@plt+0x829c>
   1bc94:	ldr	r3, [r4, #8]
   1bc98:	cmp	r3, r5
   1bc9c:	bhi	1bc84 <__assert_fail@plt+0xa2c8>
   1bca0:	b	1bc08 <__assert_fail@plt+0xa24c>
   1bca4:	ldr	r3, [r4, #24]
   1bca8:	cmp	r3, #0
   1bcac:	beq	1bcbc <__assert_fail@plt+0xa300>
   1bcb0:	mla	r3, r6, r5, r3
   1bcb4:	ldr	r0, [r3, #8]
   1bcb8:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bcbc:	ldr	r3, [r4, #28]
   1bcc0:	cmp	r3, #0
   1bcc4:	beq	1bcd4 <__assert_fail@plt+0xa318>
   1bcc8:	mla	r3, r6, r5, r3
   1bccc:	ldr	r0, [r3, #8]
   1bcd0:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bcd4:	ldr	r3, [r4, #20]
   1bcd8:	cmp	r3, #0
   1bcdc:	beq	1bcec <__assert_fail@plt+0xa330>
   1bce0:	mla	r3, r6, r5, r3
   1bce4:	ldr	r0, [r3, #8]
   1bce8:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bcec:	add	r5, r5, #1
   1bcf0:	b	1bc18 <__assert_fail@plt+0xa25c>
   1bcf4:	mla	r6, r8, r5, r6
   1bcf8:	mov	r7, #0
   1bcfc:	ldr	r3, [r6]
   1bd00:	ldr	r0, [r6, #8]
   1bd04:	cmp	r7, r3
   1bd08:	blt	1bd28 <__assert_fail@plt+0xa36c>
   1bd0c:	add	r5, r5, #1
   1bd10:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bd14:	ldr	r6, [r4, #32]
   1bd18:	ldr	r3, [r4, #68]	; 0x44
   1bd1c:	cmp	r5, r3
   1bd20:	bls	1bcf4 <__assert_fail@plt+0xa338>
   1bd24:	b	1bc58 <__assert_fail@plt+0xa29c>
   1bd28:	ldr	r0, [r0, r7, lsl #2]
   1bd2c:	add	r7, r7, #1
   1bd30:	bl	19eb4 <__assert_fail@plt+0x84f8>
   1bd34:	b	1bcfc <__assert_fail@plt+0xa340>
   1bd38:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bd3c:	b	1bc70 <__assert_fail@plt+0xa2b4>
   1bd40:	andeq	r6, r2, ip, lsr #22
   1bd44:	push	{r4, r5, r6, r7, r8, lr}
   1bd48:	subs	r4, r0, #0
   1bd4c:	movne	r5, #0
   1bd50:	movne	r7, #24
   1bd54:	bne	1bd84 <__assert_fail@plt+0xa3c8>
   1bd58:	mov	r0, #0
   1bd5c:	pop	{r4, r5, r6, r7, r8, pc}
   1bd60:	mul	r6, r7, r5
   1bd64:	add	r5, r5, #1
   1bd68:	add	r0, r0, r6
   1bd6c:	ldr	r0, [r0, #20]
   1bd70:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bd74:	ldr	r3, [r4, #8]
   1bd78:	add	r3, r3, r6
   1bd7c:	ldr	r0, [r3, #8]
   1bd80:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bd84:	ldr	r3, [r4]
   1bd88:	ldr	r0, [r4, #8]
   1bd8c:	cmp	r5, r3
   1bd90:	blt	1bd60 <__assert_fail@plt+0xa3a4>
   1bd94:	bl	18758 <__assert_fail@plt+0x6d9c>
   1bd98:	b	1bd58 <__assert_fail@plt+0xa39c>
   1bd9c:	ldr	r3, [r0]
   1bda0:	push	{r4, r5, r6, lr}
   1bda4:	cmp	r3, #0
   1bda8:	bne	1bdbc <__assert_fail@plt+0xa400>
   1bdac:	bl	19470 <__assert_fail@plt+0x7ab4>
   1bdb0:	clz	r0, r0
   1bdb4:	lsr	r0, r0, #5
   1bdb8:	pop	{r4, r5, r6, pc}
   1bdbc:	ldr	r2, [r0, #4]
   1bdc0:	mov	r4, r0
   1bdc4:	mov	r5, r1
   1bdc8:	ldr	r0, [r0, #8]
   1bdcc:	cmp	r2, #0
   1bdd0:	streq	r1, [r0]
   1bdd4:	beq	1be48 <__assert_fail@plt+0xa48c>
   1bdd8:	cmp	r3, r2
   1bddc:	bne	1bdfc <__assert_fail@plt+0xa440>
   1bde0:	lsl	r2, r3, #1
   1bde4:	lsl	r1, r3, #3
   1bde8:	str	r2, [r4]
   1bdec:	bl	188bc <__assert_fail@plt+0x6f00>
   1bdf0:	cmp	r0, #0
   1bdf4:	popeq	{r4, r5, r6, pc}
   1bdf8:	str	r0, [r4, #8]
   1bdfc:	ldr	r2, [r4, #4]
   1be00:	ldr	r1, [r4, #8]
   1be04:	ldr	r3, [r1]
   1be08:	cmp	r5, r3
   1be0c:	lsl	r3, r2, #2
   1be10:	add	r3, r1, r3
   1be14:	blt	1be30 <__assert_fail@plt+0xa474>
   1be18:	ldr	r0, [r3, #-4]
   1be1c:	cmp	r5, r0
   1be20:	bge	1be44 <__assert_fail@plt+0xa488>
   1be24:	sub	r2, r2, #1
   1be28:	str	r0, [r3], #-4
   1be2c:	b	1be18 <__assert_fail@plt+0xa45c>
   1be30:	mov	r0, r2
   1be34:	cmp	r0, #0
   1be38:	bgt	1be5c <__assert_fail@plt+0xa4a0>
   1be3c:	cmp	r2, #0
   1be40:	subge	r2, r2, r2
   1be44:	str	r5, [r1, r2, lsl #2]
   1be48:	ldr	r3, [r4, #4]
   1be4c:	mov	r0, #1
   1be50:	add	r3, r3, #1
   1be54:	str	r3, [r4, #4]
   1be58:	pop	{r4, r5, r6, pc}
   1be5c:	ldr	ip, [r3, #-4]
   1be60:	sub	r0, r0, #1
   1be64:	str	ip, [r3], #-4
   1be68:	b	1be34 <__assert_fail@plt+0xa478>
   1be6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be70:	sub	sp, sp, #20
   1be74:	mov	r4, r0
   1be78:	mov	r7, r1
   1be7c:	mov	fp, r2
   1be80:	mov	r9, #12
   1be84:	mov	sl, #0
   1be88:	ldr	r6, [sp, #56]	; 0x38
   1be8c:	str	r3, [sp, #8]
   1be90:	ldr	ip, [r4]
   1be94:	ldr	r0, [r4, #20]
   1be98:	add	r1, ip, r7, lsl #3
   1be9c:	ldrb	lr, [r1, #4]
   1bea0:	cmp	lr, #4
   1bea4:	bne	1bf1c <__assert_fail@plt+0xa560>
   1bea8:	ldr	r1, [r4, #12]
   1beac:	mul	r8, r9, fp
   1beb0:	mov	r2, r6
   1beb4:	str	fp, [sp, #12]
   1beb8:	add	r0, r0, r8
   1bebc:	ldr	r5, [r1, r7, lsl #2]
   1bec0:	str	sl, [r0, #4]
   1bec4:	mov	r0, r4
   1bec8:	mov	r1, r5
   1becc:	bl	19e40 <__assert_fail@plt+0x8484>
   1bed0:	cmn	r0, #1
   1bed4:	mov	fp, r0
   1bed8:	ldr	r3, [sp, #12]
   1bedc:	bne	1bef0 <__assert_fail@plt+0xa534>
   1bee0:	mov	r3, #12
   1bee4:	mov	r0, r3
   1bee8:	add	sp, sp, #20
   1beec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bef0:	ldr	r1, [r4, #12]
   1bef4:	ldr	r0, [r1, r7, lsl #2]
   1bef8:	str	r0, [r1, r3, lsl #2]
   1befc:	ldr	r0, [r4, #20]
   1bf00:	mov	r1, fp
   1bf04:	add	r0, r0, r8
   1bf08:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1bf0c:	cmp	r0, #0
   1bf10:	beq	1bee0 <__assert_fail@plt+0xa524>
   1bf14:	mov	r7, r5
   1bf18:	b	1be90 <__assert_fail@plt+0xa4d4>
   1bf1c:	mul	r3, r9, r7
   1bf20:	add	lr, r0, r3
   1bf24:	str	r3, [sp, #12]
   1bf28:	ldr	r3, [lr, #4]
   1bf2c:	cmp	r3, #0
   1bf30:	bne	1bf44 <__assert_fail@plt+0xa588>
   1bf34:	ldr	r1, [r4, #12]
   1bf38:	ldr	r0, [r1, r7, lsl #2]
   1bf3c:	str	r0, [r1, fp, lsl #2]
   1bf40:	b	1bee4 <__assert_fail@plt+0xa528>
   1bf44:	mul	r8, r9, fp
   1bf48:	ldr	lr, [lr, #8]
   1bf4c:	cmp	r3, #1
   1bf50:	ldrne	r1, [r4, #8]
   1bf54:	add	r0, r0, r8
   1bf58:	ldr	r5, [lr]
   1bf5c:	str	sl, [r0, #4]
   1bf60:	bne	1bfe8 <__assert_fail@plt+0xa62c>
   1bf64:	ldr	r3, [sp, #8]
   1bf68:	cmp	r7, fp
   1bf6c:	sub	r3, r7, r3
   1bf70:	clz	r3, r3
   1bf74:	lsr	r3, r3, #5
   1bf78:	moveq	r3, #0
   1bf7c:	cmp	r3, #0
   1bf80:	beq	1bf9c <__assert_fail@plt+0xa5e0>
   1bf84:	mov	r1, r5
   1bf88:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1bf8c:	cmp	r0, #0
   1bf90:	movne	r3, #0
   1bf94:	bne	1bee4 <__assert_fail@plt+0xa528>
   1bf98:	b	1bee0 <__assert_fail@plt+0xa524>
   1bf9c:	ldr	r3, [r1, #4]
   1bfa0:	ubfx	r3, r3, #8, #10
   1bfa4:	orr	r6, r6, r3
   1bfa8:	mov	r2, r6
   1bfac:	mov	r1, r5
   1bfb0:	mov	r0, r4
   1bfb4:	bl	19e40 <__assert_fail@plt+0x8484>
   1bfb8:	cmn	r0, #1
   1bfbc:	mov	fp, r0
   1bfc0:	bne	1befc <__assert_fail@plt+0xa540>
   1bfc4:	b	1bee0 <__assert_fail@plt+0xa524>
   1bfc8:	ldr	r2, [r4, #16]
   1bfcc:	ldr	r2, [r2, r1, lsl #2]
   1bfd0:	cmp	r2, r5
   1bfd4:	bne	1bfe8 <__assert_fail@plt+0xa62c>
   1bfd8:	ldr	r3, [r3, #4]
   1bfdc:	ubfx	r3, r3, #8, #10
   1bfe0:	cmp	r6, r3
   1bfe4:	beq	1c074 <__assert_fail@plt+0xa6b8>
   1bfe8:	sub	r1, r1, #1
   1bfec:	add	r3, ip, r1, lsl #3
   1bff0:	cmp	r1, #0
   1bff4:	movle	r2, #0
   1bff8:	movgt	r2, #1
   1bffc:	ldrb	lr, [r3, #6]
   1c000:	ands	r2, r2, lr, lsr #2
   1c004:	bne	1bfc8 <__assert_fail@plt+0xa60c>
   1c008:	mov	r2, r6
   1c00c:	mov	r1, r5
   1c010:	mov	r0, r4
   1c014:	bl	19e40 <__assert_fail@plt+0x8484>
   1c018:	cmn	r0, #1
   1c01c:	mov	r7, r0
   1c020:	beq	1bee0 <__assert_fail@plt+0xa524>
   1c024:	ldr	r0, [r4, #20]
   1c028:	mov	r1, r7
   1c02c:	add	r0, r0, r8
   1c030:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1c034:	cmp	r0, #0
   1c038:	beq	1bee0 <__assert_fail@plt+0xa524>
   1c03c:	mov	r2, r7
   1c040:	mov	r1, r5
   1c044:	str	r6, [sp]
   1c048:	mov	r0, r4
   1c04c:	ldr	r3, [sp, #8]
   1c050:	bl	1be6c <__assert_fail@plt+0xa4b0>
   1c054:	subs	r3, r0, #0
   1c058:	bne	1bee4 <__assert_fail@plt+0xa528>
   1c05c:	ldr	r2, [sp, #12]
   1c060:	ldr	r3, [r4, #20]
   1c064:	add	r3, r3, r2
   1c068:	ldr	r3, [r3, #8]
   1c06c:	ldr	r5, [r3, #4]
   1c070:	b	1bfa8 <__assert_fail@plt+0xa5ec>
   1c074:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1c078:	cmp	r0, #0
   1c07c:	bne	1c05c <__assert_fail@plt+0xa6a0>
   1c080:	b	1bee0 <__assert_fail@plt+0xa524>
   1c084:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c088:	mov	r6, r0
   1c08c:	mov	r5, r1
   1c090:	mov	r4, r2
   1c094:	mov	r8, r3
   1c098:	mov	r9, #12
   1c09c:	ldr	r7, [sp, #40]	; 0x28
   1c0a0:	mov	r1, r4
   1c0a4:	mov	r0, r5
   1c0a8:	bl	18acc <__assert_fail@plt+0x7110>
   1c0ac:	cmp	r0, #0
   1c0b0:	beq	1c0bc <__assert_fail@plt+0xa700>
   1c0b4:	mov	r0, #0
   1c0b8:	b	1c0fc <__assert_fail@plt+0xa740>
   1c0bc:	ldr	r3, [r6]
   1c0c0:	add	r2, r3, r4, lsl #3
   1c0c4:	ldrb	r2, [r2, #4]
   1c0c8:	cmp	r2, r7
   1c0cc:	bne	1c104 <__assert_fail@plt+0xa748>
   1c0d0:	ldr	r3, [r3, r4, lsl #3]
   1c0d4:	cmp	r3, r8
   1c0d8:	bne	1c104 <__assert_fail@plt+0xa748>
   1c0dc:	cmp	r7, #9
   1c0e0:	bne	1c0b4 <__assert_fail@plt+0xa6f8>
   1c0e4:	mov	r1, r4
   1c0e8:	mov	r0, r5
   1c0ec:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1c0f0:	cmp	r0, #0
   1c0f4:	bne	1c0b4 <__assert_fail@plt+0xa6f8>
   1c0f8:	mov	r0, #12
   1c0fc:	add	sp, sp, #12
   1c100:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c104:	mov	r1, r4
   1c108:	mov	r0, r5
   1c10c:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1c110:	cmp	r0, #0
   1c114:	beq	1c0f8 <__assert_fail@plt+0xa73c>
   1c118:	ldr	r3, [r6, #20]
   1c11c:	mul	r4, r9, r4
   1c120:	add	r3, r3, r4
   1c124:	ldr	r2, [r3, #4]
   1c128:	cmp	r2, #0
   1c12c:	beq	1c0b4 <__assert_fail@plt+0xa6f8>
   1c130:	cmp	r2, #2
   1c134:	beq	1c14c <__assert_fail@plt+0xa790>
   1c138:	ldr	r2, [r6, #20]
   1c13c:	add	r4, r2, r4
   1c140:	ldr	r3, [r4, #8]
   1c144:	ldr	r4, [r3]
   1c148:	b	1c0a0 <__assert_fail@plt+0xa6e4>
   1c14c:	ldr	r2, [r3, #8]
   1c150:	mov	r1, r5
   1c154:	mov	r0, r6
   1c158:	mov	r3, r8
   1c15c:	str	r7, [sp]
   1c160:	ldr	r2, [r2, #4]
   1c164:	bl	1c084 <__assert_fail@plt+0xa6c8>
   1c168:	cmp	r0, #0
   1c16c:	beq	1c138 <__assert_fail@plt+0xa77c>
   1c170:	b	1c0fc <__assert_fail@plt+0xa740>
   1c174:	push	{r4, r5, r6, r7, r8, lr}
   1c178:	subs	r7, r1, #0
   1c17c:	bne	1c188 <__assert_fail@plt+0xa7cc>
   1c180:	mov	r5, #0
   1c184:	b	1c1fc <__assert_fail@plt+0xa840>
   1c188:	ldr	r3, [r7, #4]
   1c18c:	cmp	r3, #0
   1c190:	beq	1c180 <__assert_fail@plt+0xa7c4>
   1c194:	ldm	r0, {r1, r2}
   1c198:	mov	r4, r0
   1c19c:	add	r2, r2, r3, lsl #1
   1c1a0:	cmp	r1, r2
   1c1a4:	bge	1c1d0 <__assert_fail@plt+0xa814>
   1c1a8:	add	r1, r3, r1
   1c1ac:	ldr	r0, [r0, #8]
   1c1b0:	lsl	r5, r1, #1
   1c1b4:	lsl	r1, r1, #3
   1c1b8:	bl	188bc <__assert_fail@plt+0x6f00>
   1c1bc:	cmp	r0, #0
   1c1c0:	moveq	r5, #12
   1c1c4:	beq	1c1fc <__assert_fail@plt+0xa840>
   1c1c8:	str	r5, [r4]
   1c1cc:	str	r0, [r4, #8]
   1c1d0:	ldr	r5, [r4, #4]
   1c1d4:	ldr	r2, [r7, #4]
   1c1d8:	cmp	r5, #0
   1c1dc:	addne	r6, r5, r2, lsl #1
   1c1e0:	bne	1c21c <__assert_fail@plt+0xa860>
   1c1e4:	ldr	r1, [r7, #8]
   1c1e8:	str	r2, [r4, #4]
   1c1ec:	ldr	r2, [r7, #4]
   1c1f0:	ldr	r0, [r4, #8]
   1c1f4:	lsl	r2, r2, #2
   1c1f8:	bl	115e4 <memcpy@plt>
   1c1fc:	mov	r0, r5
   1c200:	pop	{r4, r5, r6, r7, r8, pc}
   1c204:	ldr	r3, [r4, #8]
   1c208:	ldr	r1, [r7, #8]
   1c20c:	ldr	r0, [r3, r5, lsl #2]
   1c210:	ldr	r1, [r1, r2, lsl #2]
   1c214:	cmp	r0, r1
   1c218:	bne	1c228 <__assert_fail@plt+0xa86c>
   1c21c:	sub	r2, r2, #1
   1c220:	sub	r5, r5, #1
   1c224:	b	1c238 <__assert_fail@plt+0xa87c>
   1c228:	bge	1c220 <__assert_fail@plt+0xa864>
   1c22c:	sub	r6, r6, #1
   1c230:	sub	r2, r2, #1
   1c234:	str	r1, [r3, r6, lsl #2]
   1c238:	cmp	r2, #0
   1c23c:	cmpge	r5, #0
   1c240:	bge	1c204 <__assert_fail@plt+0xa848>
   1c244:	cmp	r2, #0
   1c248:	blt	1c268 <__assert_fail@plt+0xa8ac>
   1c24c:	ldr	r0, [r4, #8]
   1c250:	add	r2, r2, #1
   1c254:	sub	r6, r6, r2
   1c258:	lsl	r2, r2, #2
   1c25c:	ldr	r1, [r7, #8]
   1c260:	add	r0, r0, r6, lsl #2
   1c264:	bl	115e4 <memcpy@plt>
   1c268:	ldr	r1, [r4, #4]
   1c26c:	ldr	r2, [r7, #4]
   1c270:	add	r2, r1, r2, lsl #1
   1c274:	sub	ip, r2, #1
   1c278:	subs	r2, r2, r6
   1c27c:	beq	1c180 <__assert_fail@plt+0xa7c4>
   1c280:	ldr	r0, [r4, #8]
   1c284:	sub	r3, r1, #1
   1c288:	add	r1, r1, r2
   1c28c:	str	r1, [r4, #4]
   1c290:	ldr	r4, [r0, ip, lsl #2]
   1c294:	add	r1, r3, r2
   1c298:	ldr	lr, [r0, r3, lsl #2]
   1c29c:	cmp	r4, lr
   1c2a0:	ble	1c2b8 <__assert_fail@plt+0xa8fc>
   1c2a4:	subs	r2, r2, #1
   1c2a8:	sub	ip, ip, #1
   1c2ac:	str	r4, [r0, r1, lsl #2]
   1c2b0:	bne	1c290 <__assert_fail@plt+0xa8d4>
   1c2b4:	b	1c180 <__assert_fail@plt+0xa7c4>
   1c2b8:	subs	r3, r3, #1
   1c2bc:	str	lr, [r0, r1, lsl #2]
   1c2c0:	bpl	1c290 <__assert_fail@plt+0xa8d4>
   1c2c4:	lsl	r2, r2, #2
   1c2c8:	add	r1, r0, r6, lsl #2
   1c2cc:	bl	115e4 <memcpy@plt>
   1c2d0:	b	1c180 <__assert_fail@plt+0xa7c4>
   1c2d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2d8:	sub	sp, sp, #44	; 0x2c
   1c2dc:	mov	r6, #12
   1c2e0:	mov	r4, r1
   1c2e4:	add	r5, sp, #16
   1c2e8:	mul	r6, r6, r2
   1c2ec:	mov	r7, r2
   1c2f0:	str	r0, [sp, #8]
   1c2f4:	mov	r0, r5
   1c2f8:	str	r3, [sp, #12]
   1c2fc:	ldr	r3, [r1, #20]
   1c300:	add	r3, r3, r6
   1c304:	ldr	r1, [r3, #4]
   1c308:	add	r1, r1, #1
   1c30c:	bl	194b0 <__assert_fail@plt+0x7af4>
   1c310:	subs	r9, r0, #0
   1c314:	bne	1c444 <__assert_fail@plt+0xaa88>
   1c318:	ldr	r3, [sp, #20]
   1c31c:	lsl	r8, r7, #3
   1c320:	ldr	r1, [pc, #404]	; 1c4bc <__assert_fail@plt+0xab00>
   1c324:	add	r2, r3, #1
   1c328:	str	r2, [sp, #20]
   1c32c:	ldr	r2, [sp, #24]
   1c330:	str	r7, [r2, r3, lsl #2]
   1c334:	mvn	r2, #0
   1c338:	ldr	r3, [r4, #24]
   1c33c:	add	r3, r3, r6
   1c340:	str	r2, [r3, #4]
   1c344:	ldr	r2, [r4]
   1c348:	add	r3, r2, r8
   1c34c:	ldr	r3, [r3, #4]
   1c350:	and	r1, r1, r3
   1c354:	cmp	r1, #0
   1c358:	bne	1c384 <__assert_fail@plt+0xa9c8>
   1c35c:	ldr	r3, [r4]
   1c360:	add	r8, r3, r8
   1c364:	ldrb	r3, [r8, #4]
   1c368:	tst	r3, #8
   1c36c:	bne	1c4ac <__assert_fail@plt+0xaaf0>
   1c370:	ldr	r3, [r4, #24]
   1c374:	ldm	r5, {r0, r1, r2}
   1c378:	add	r6, r3, r6
   1c37c:	stm	r6, {r0, r1, r2}
   1c380:	b	1c438 <__assert_fail@plt+0xaa7c>
   1c384:	ldr	r1, [r4, #20]
   1c388:	add	r1, r1, r6
   1c38c:	ldr	r0, [r1, #4]
   1c390:	cmp	r0, #0
   1c394:	beq	1c35c <__assert_fail@plt+0xa9a0>
   1c398:	ldr	r1, [r1, #8]
   1c39c:	ldr	r1, [r1]
   1c3a0:	add	r2, r2, r1, lsl #3
   1c3a4:	ldrb	r2, [r2, #6]
   1c3a8:	tst	r2, #4
   1c3ac:	bne	1c35c <__assert_fail@plt+0xa9a0>
   1c3b0:	ubfx	r3, r3, #8, #10
   1c3b4:	mov	r0, r4
   1c3b8:	mov	r2, r7
   1c3bc:	mov	r1, r7
   1c3c0:	str	r3, [sp]
   1c3c4:	mov	r3, r7
   1c3c8:	bl	1be6c <__assert_fail@plt+0xa4b0>
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c35c <__assert_fail@plt+0xa9a0>
   1c3d4:	mov	r9, r0
   1c3d8:	b	1c444 <__assert_fail@plt+0xaa88>
   1c3dc:	ldr	r3, [r3, #8]
   1c3e0:	ldr	r2, [r3, r7, lsl #2]
   1c3e4:	mov	r3, #12
   1c3e8:	mul	fp, r3, r2
   1c3ec:	add	r1, r1, fp
   1c3f0:	ldr	r3, [r1, #4]
   1c3f4:	cmn	r3, #1
   1c3f8:	bne	1c450 <__assert_fail@plt+0xaa94>
   1c3fc:	mov	sl, #1
   1c400:	add	r7, r7, #1
   1c404:	ldr	r3, [r4, #20]
   1c408:	ldr	r1, [r4, #24]
   1c40c:	add	r3, r3, r6
   1c410:	ldr	r2, [r3, #4]
   1c414:	cmp	r2, r7
   1c418:	bgt	1c3dc <__assert_fail@plt+0xaa20>
   1c41c:	ldr	r3, [sp, #12]
   1c420:	add	r1, r1, r6
   1c424:	eor	r3, r3, #1
   1c428:	tst	sl, r3
   1c42c:	movne	r3, #0
   1c430:	strne	r3, [r1, #4]
   1c434:	beq	1c370 <__assert_fail@plt+0xa9b4>
   1c438:	ldm	r5, {r0, r1, r2}
   1c43c:	ldr	r3, [sp, #8]
   1c440:	stm	r3, {r0, r1, r2}
   1c444:	mov	r0, r9
   1c448:	add	sp, sp, #44	; 0x2c
   1c44c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c450:	cmp	r3, #0
   1c454:	bne	1c4a0 <__assert_fail@plt+0xaae4>
   1c458:	mov	r1, r4
   1c45c:	mov	r0, r8
   1c460:	bl	1c2d4 <__assert_fail@plt+0xa918>
   1c464:	cmp	r0, #0
   1c468:	bne	1c3d4 <__assert_fail@plt+0xaa18>
   1c46c:	mov	r1, r8
   1c470:	mov	r0, r5
   1c474:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1c478:	cmp	r0, #0
   1c47c:	bne	1c3d4 <__assert_fail@plt+0xaa18>
   1c480:	ldr	r3, [r4, #24]
   1c484:	add	fp, r3, fp
   1c488:	ldr	r3, [fp, #4]
   1c48c:	cmp	r3, #0
   1c490:	bne	1c400 <__assert_fail@plt+0xaa44>
   1c494:	ldr	r0, [sp, #36]	; 0x24
   1c498:	bl	18758 <__assert_fail@plt+0x6d9c>
   1c49c:	b	1c3fc <__assert_fail@plt+0xaa40>
   1c4a0:	ldm	r1, {r0, r1, r2}
   1c4a4:	stm	r8, {r0, r1, r2}
   1c4a8:	b	1c46c <__assert_fail@plt+0xaab0>
   1c4ac:	mov	r7, #0
   1c4b0:	add	r8, sp, #28
   1c4b4:	mov	sl, r7
   1c4b8:	b	1c404 <__assert_fail@plt+0xaa48>
   1c4bc:	andeq	pc, r3, r0, lsl #30
   1c4c0:	cmp	r1, #0
   1c4c4:	push	{r4, r5, r6, lr}
   1c4c8:	mov	r4, r0
   1c4cc:	bge	1c4d8 <__assert_fail@plt+0xab1c>
   1c4d0:	ldr	r0, [r4, #60]	; 0x3c
   1c4d4:	pop	{r4, r5, r6, pc}
   1c4d8:	ldr	r3, [r0, #48]	; 0x30
   1c4dc:	cmp	r3, r1
   1c4e0:	bne	1c4f4 <__assert_fail@plt+0xab38>
   1c4e4:	tst	r2, #2
   1c4e8:	movne	r0, #8
   1c4ec:	moveq	r0, #10
   1c4f0:	pop	{r4, r5, r6, pc}
   1c4f4:	ldr	r3, [r0, #80]	; 0x50
   1c4f8:	cmp	r3, #1
   1c4fc:	ldrgt	r3, [r0, #8]
   1c500:	bgt	1c534 <__assert_fail@plt+0xab78>
   1c504:	ldr	r3, [r0, #4]
   1c508:	ldr	r0, [r0, #68]	; 0x44
   1c50c:	ldrb	r2, [r3, r1]
   1c510:	mov	r1, r2
   1c514:	bl	18960 <__assert_fail@plt+0x6fa4>
   1c518:	cmp	r0, #0
   1c51c:	bne	1c598 <__assert_fail@plt+0xabdc>
   1c520:	cmp	r2, #10
   1c524:	popne	{r4, r5, r6, pc}
   1c528:	b	1c57c <__assert_fail@plt+0xabc0>
   1c52c:	subs	r1, r1, #1
   1c530:	bcc	1c4d0 <__assert_fail@plt+0xab14>
   1c534:	ldr	r5, [r3, r1, lsl #2]
   1c538:	cmn	r5, #1
   1c53c:	beq	1c52c <__assert_fail@plt+0xab70>
   1c540:	ldrb	r3, [r4, #78]	; 0x4e
   1c544:	cmp	r3, #0
   1c548:	beq	1c574 <__assert_fail@plt+0xabb8>
   1c54c:	mov	r0, r5
   1c550:	bl	117e8 <iswalnum@plt>
   1c554:	sub	r3, r5, #95	; 0x5f
   1c558:	cmp	r0, #0
   1c55c:	clz	r3, r3
   1c560:	movne	r0, #1
   1c564:	lsr	r3, r3, #5
   1c568:	moveq	r0, r3
   1c56c:	cmp	r0, #0
   1c570:	bne	1c598 <__assert_fail@plt+0xabdc>
   1c574:	cmp	r5, #10
   1c578:	bne	1c590 <__assert_fail@plt+0xabd4>
   1c57c:	ldrb	r3, [r4, #77]	; 0x4d
   1c580:	cmp	r3, #0
   1c584:	moveq	r0, #0
   1c588:	movne	r0, #2
   1c58c:	pop	{r4, r5, r6, pc}
   1c590:	mov	r0, #0
   1c594:	pop	{r4, r5, r6, pc}
   1c598:	mov	r0, #1
   1c59c:	pop	{r4, r5, r6, pc}
   1c5a0:	ldr	r3, [r0, #4]
   1c5a4:	push	{r4, r5, r6, lr}
   1c5a8:	mov	r4, r1
   1c5ac:	mov	r5, r0
   1c5b0:	mov	r6, r2
   1c5b4:	ldrb	r1, [r3, r2]
   1c5b8:	ldrb	r3, [r4, #4]
   1c5bc:	sub	r3, r3, #1
   1c5c0:	cmp	r3, #6
   1c5c4:	ldrls	pc, [pc, r3, lsl #2]
   1c5c8:	b	1c6ac <__assert_fail@plt+0xacf0>
   1c5cc:	andeq	ip, r1, r8, ror #11
   1c5d0:	andeq	ip, r1, ip, lsr #13
   1c5d4:	andeq	ip, r1, ip, asr r6
   1c5d8:	andeq	ip, r1, ip, lsr #13
   1c5dc:	andeq	ip, r1, r8, ror r6
   1c5e0:	andeq	ip, r1, ip, lsr #13
   1c5e4:	andeq	ip, r1, r0, ror r6
   1c5e8:	ldrb	r3, [r4]
   1c5ec:	cmp	r3, r1
   1c5f0:	bne	1c6ac <__assert_fail@plt+0xacf0>
   1c5f4:	ldr	r3, [pc, #192]	; 1c6bc <__assert_fail@plt+0xad00>
   1c5f8:	ldr	r4, [r4, #4]
   1c5fc:	and	r3, r3, r4
   1c600:	cmp	r3, #0
   1c604:	beq	1c6b4 <__assert_fail@plt+0xacf8>
   1c608:	mov	r1, r6
   1c60c:	mov	r0, r5
   1c610:	ldr	r2, [r5, #88]	; 0x58
   1c614:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1c618:	ubfx	r3, r4, #8, #10
   1c61c:	tst	r3, #4
   1c620:	beq	1c62c <__assert_fail@plt+0xac70>
   1c624:	ands	r1, r0, #1
   1c628:	beq	1c6ac <__assert_fail@plt+0xacf0>
   1c62c:	tst	r3, #8
   1c630:	beq	1c63c <__assert_fail@plt+0xac80>
   1c634:	tst	r0, #1
   1c638:	bne	1c6ac <__assert_fail@plt+0xacf0>
   1c63c:	tst	r3, #32
   1c640:	beq	1c64c <__assert_fail@plt+0xac90>
   1c644:	ands	r1, r0, #2
   1c648:	beq	1c6ac <__assert_fail@plt+0xacf0>
   1c64c:	tst	r3, #128	; 0x80
   1c650:	beq	1c6b4 <__assert_fail@plt+0xacf8>
   1c654:	ubfx	r0, r0, #3, #1
   1c658:	pop	{r4, r5, r6, pc}
   1c65c:	ldr	r0, [r4]
   1c660:	bl	18960 <__assert_fail@plt+0x6fa4>
   1c664:	cmp	r0, #0
   1c668:	bne	1c5f4 <__assert_fail@plt+0xac38>
   1c66c:	pop	{r4, r5, r6, pc}
   1c670:	tst	r1, #128	; 0x80
   1c674:	bne	1c6ac <__assert_fail@plt+0xacf0>
   1c678:	cmp	r1, #10
   1c67c:	bne	1c694 <__assert_fail@plt+0xacd8>
   1c680:	ldr	r3, [r5, #84]	; 0x54
   1c684:	ldr	r0, [r3, #128]	; 0x80
   1c688:	ands	r0, r0, #64	; 0x40
   1c68c:	bne	1c5f4 <__assert_fail@plt+0xac38>
   1c690:	pop	{r4, r5, r6, pc}
   1c694:	cmp	r1, #0
   1c698:	bne	1c5f4 <__assert_fail@plt+0xac38>
   1c69c:	ldr	r3, [r5, #84]	; 0x54
   1c6a0:	ldr	r3, [r3, #128]	; 0x80
   1c6a4:	tst	r3, #128	; 0x80
   1c6a8:	beq	1c5f4 <__assert_fail@plt+0xac38>
   1c6ac:	mov	r0, #0
   1c6b0:	pop	{r4, r5, r6, pc}
   1c6b4:	mov	r0, #1
   1c6b8:	pop	{r4, r5, r6, pc}
   1c6bc:	andeq	pc, r3, r0, lsl #30
   1c6c0:	push	{r4, r5, r6, r7, r8, lr}
   1c6c4:	mov	r5, r1
   1c6c8:	mov	r1, r2
   1c6cc:	mov	r4, r0
   1c6d0:	ldr	r2, [r0, #88]	; 0x58
   1c6d4:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1c6d8:	ldr	lr, [r5, #8]
   1c6dc:	mov	ip, #0
   1c6e0:	and	r6, r0, #8
   1c6e4:	and	r7, r0, #2
   1c6e8:	and	r1, r0, #1
   1c6ec:	cmp	lr, ip
   1c6f0:	bgt	1c6fc <__assert_fail@plt+0xad40>
   1c6f4:	mov	r0, #0
   1c6f8:	pop	{r4, r5, r6, r7, r8, pc}
   1c6fc:	ldr	r3, [r5, #12]
   1c700:	ldr	r0, [r3, ip, lsl #2]
   1c704:	ldr	r3, [r4, #84]	; 0x54
   1c708:	ldr	r2, [r3]
   1c70c:	add	r2, r2, r0, lsl #3
   1c710:	ldr	r3, [r2, #4]
   1c714:	ldrb	r2, [r2, #4]
   1c718:	ubfx	r3, r3, #8, #10
   1c71c:	cmp	r2, #2
   1c720:	bne	1c76c <__assert_fail@plt+0xadb0>
   1c724:	cmp	r3, #0
   1c728:	popeq	{r4, r5, r6, r7, r8, pc}
   1c72c:	tst	r3, #4
   1c730:	beq	1c73c <__assert_fail@plt+0xad80>
   1c734:	cmp	r1, #0
   1c738:	beq	1c76c <__assert_fail@plt+0xadb0>
   1c73c:	tst	r3, #8
   1c740:	beq	1c74c <__assert_fail@plt+0xad90>
   1c744:	cmp	r1, #0
   1c748:	bne	1c76c <__assert_fail@plt+0xadb0>
   1c74c:	tst	r3, #32
   1c750:	beq	1c75c <__assert_fail@plt+0xada0>
   1c754:	cmp	r7, #0
   1c758:	beq	1c76c <__assert_fail@plt+0xadb0>
   1c75c:	tst	r3, #128	; 0x80
   1c760:	popeq	{r4, r5, r6, r7, r8, pc}
   1c764:	cmp	r6, #0
   1c768:	popne	{r4, r5, r6, r7, r8, pc}
   1c76c:	add	ip, ip, #1
   1c770:	b	1c6ec <__assert_fail@plt+0xad30>
   1c774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c778:	mov	r4, r0
   1c77c:	sub	sp, sp, #28
   1c780:	mov	r6, r1
   1c784:	mov	sl, r2
   1c788:	ldr	r5, [r0, #24]
   1c78c:	cmp	r5, r1
   1c790:	suble	r5, r1, r5
   1c794:	ble	1c7f4 <__assert_fail@plt+0xae38>
   1c798:	ldr	r3, [r0, #80]	; 0x50
   1c79c:	mov	r5, r1
   1c7a0:	cmp	r3, #1
   1c7a4:	movgt	r3, #0
   1c7a8:	movgt	r2, #0
   1c7ac:	strdgt	r2, [r0, #16]
   1c7b0:	tst	sl, #1
   1c7b4:	ldr	r3, [r0, #44]	; 0x2c
   1c7b8:	str	r3, [r0, #48]	; 0x30
   1c7bc:	ldr	r3, [r0, #52]	; 0x34
   1c7c0:	str	r3, [r0, #56]	; 0x38
   1c7c4:	mov	r3, #0
   1c7c8:	str	r3, [r0, #24]
   1c7cc:	str	r3, [r0, #28]
   1c7d0:	str	r3, [r0, #32]
   1c7d4:	strb	r3, [r0, #76]	; 0x4c
   1c7d8:	movne	r3, #4
   1c7dc:	moveq	r3, #6
   1c7e0:	str	r3, [r0, #60]	; 0x3c
   1c7e4:	ldrb	r3, [r0, #75]	; 0x4b
   1c7e8:	cmp	r3, #0
   1c7ec:	ldreq	r3, [r0]
   1c7f0:	streq	r3, [r0, #4]
   1c7f4:	cmp	r5, #0
   1c7f8:	beq	1c8f8 <__assert_fail@plt+0xaf3c>
   1c7fc:	ldrb	r3, [r4, #76]	; 0x4c
   1c800:	ldr	r2, [r4, #32]
   1c804:	ldr	r8, [r4, #28]
   1c808:	cmp	r2, r5
   1c80c:	ble	1ca9c <__assert_fail@plt+0xb0e0>
   1c810:	cmp	r3, #0
   1c814:	beq	1ca2c <__assert_fail@plt+0xb070>
   1c818:	ldr	r9, [r4, #12]
   1c81c:	mov	r3, r8
   1c820:	mov	r2, #0
   1c824:	add	r7, r2, r3
   1c828:	add	r7, r7, r7, lsr #31
   1c82c:	asr	r7, r7, #1
   1c830:	ldr	r1, [r9, r7, lsl #2]
   1c834:	cmp	r1, r5
   1c838:	bgt	1c944 <__assert_fail@plt+0xaf88>
   1c83c:	bge	1c854 <__assert_fail@plt+0xae98>
   1c840:	add	r2, r7, #1
   1c844:	cmp	r2, r3
   1c848:	blt	1c824 <__assert_fail@plt+0xae68>
   1c84c:	cmp	r1, r5
   1c850:	addlt	r7, r7, #1
   1c854:	mov	r2, sl
   1c858:	sub	r1, r7, #1
   1c85c:	mov	r0, r4
   1c860:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1c864:	sub	r3, r5, r7
   1c868:	cmp	r5, r8
   1c86c:	str	r0, [r4, #60]	; 0x3c
   1c870:	clz	r3, r3
   1c874:	lsr	r3, r3, #5
   1c878:	movge	r3, #0
   1c87c:	cmp	r3, #0
   1c880:	beq	1c968 <__assert_fail@plt+0xafac>
   1c884:	ldr	r3, [r9, r7, lsl #2]
   1c888:	cmp	r3, r5
   1c88c:	bne	1c968 <__assert_fail@plt+0xafac>
   1c890:	ldr	r0, [r4, #8]
   1c894:	lsl	r7, r5, #2
   1c898:	sub	r2, r8, r5
   1c89c:	lsl	r2, r2, #2
   1c8a0:	add	r1, r0, r7
   1c8a4:	bl	1159c <memmove@plt>
   1c8a8:	ldr	r0, [r4, #4]
   1c8ac:	ldr	r2, [r4, #28]
   1c8b0:	add	r1, r0, r5
   1c8b4:	sub	r2, r2, r5
   1c8b8:	bl	1159c <memmove@plt>
   1c8bc:	ldr	r3, [r4, #28]
   1c8c0:	sub	r3, r3, r5
   1c8c4:	str	r3, [r4, #28]
   1c8c8:	ldr	r3, [r4, #32]
   1c8cc:	sub	r3, r3, r5
   1c8d0:	str	r3, [r4, #32]
   1c8d4:	mov	r3, #0
   1c8d8:	ldr	r2, [r4, #28]
   1c8dc:	cmp	r2, r3
   1c8e0:	bgt	1c94c <__assert_fail@plt+0xaf90>
   1c8e4:	ldrb	r3, [r4, #75]	; 0x4b
   1c8e8:	cmp	r3, #0
   1c8ec:	ldreq	r3, [r4, #4]
   1c8f0:	addeq	r3, r3, r5
   1c8f4:	streq	r3, [r4, #4]
   1c8f8:	ldr	r3, [r4, #48]	; 0x30
   1c8fc:	str	r6, [r4, #24]
   1c900:	ldr	r2, [r4, #56]	; 0x38
   1c904:	sub	r3, r3, r5
   1c908:	sub	r5, r2, r5
   1c90c:	ldr	r2, [r4, #80]	; 0x50
   1c910:	str	r3, [r4, #48]	; 0x30
   1c914:	str	r5, [r4, #56]	; 0x38
   1c918:	cmp	r2, #1
   1c91c:	ble	1cd70 <__assert_fail@plt+0xb3b4>
   1c920:	ldrb	r3, [r4, #72]	; 0x48
   1c924:	mov	r0, r4
   1c928:	cmp	r3, #0
   1c92c:	beq	1cd60 <__assert_fail@plt+0xb3a4>
   1c930:	bl	19630 <__assert_fail@plt+0x7c74>
   1c934:	cmp	r0, #0
   1c938:	beq	1cd64 <__assert_fail@plt+0xb3a8>
   1c93c:	add	sp, sp, #28
   1c940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c944:	mov	r3, r7
   1c948:	b	1c844 <__assert_fail@plt+0xae88>
   1c94c:	ldr	r1, [r4, #12]
   1c950:	ldr	r2, [r1, r7]
   1c954:	add	r7, r7, #4
   1c958:	sub	r2, r2, r5
   1c95c:	str	r2, [r1, r3, lsl #2]
   1c960:	add	r3, r3, #1
   1c964:	b	1c8d8 <__assert_fail@plt+0xaf1c>
   1c968:	ldr	r3, [r4, #44]	; 0x2c
   1c96c:	sub	r3, r3, r6
   1c970:	add	r3, r3, r5
   1c974:	str	r3, [r4, #48]	; 0x30
   1c978:	ldr	r3, [r4, #52]	; 0x34
   1c97c:	sub	r3, r3, r6
   1c980:	add	r3, r3, r5
   1c984:	str	r3, [r4, #56]	; 0x38
   1c988:	mov	r3, #0
   1c98c:	strb	r3, [r4, #76]	; 0x4c
   1c990:	add	r3, r9, r7, lsl #2
   1c994:	cmp	r7, #0
   1c998:	ble	1c9a8 <__assert_fail@plt+0xafec>
   1c99c:	ldr	r2, [r3, #-4]!
   1c9a0:	cmp	r2, r5
   1c9a4:	beq	1c9d8 <__assert_fail@plt+0xb01c>
   1c9a8:	cmp	r7, r8
   1c9ac:	blt	1c9e0 <__assert_fail@plt+0xb024>
   1c9b0:	moveq	r3, #0
   1c9b4:	streq	r3, [r4, #28]
   1c9b8:	beq	1c9d0 <__assert_fail@plt+0xb014>
   1c9bc:	ldr	r3, [r9, r7, lsl #2]
   1c9c0:	sub	r3, r3, r5
   1c9c4:	cmp	r3, #0
   1c9c8:	str	r3, [r4, #28]
   1c9cc:	bne	1ca20 <__assert_fail@plt+0xb064>
   1c9d0:	ldr	r3, [r4, #28]
   1c9d4:	b	1ca94 <__assert_fail@plt+0xb0d8>
   1c9d8:	sub	r7, r7, #1
   1c9dc:	b	1c994 <__assert_fail@plt+0xafd8>
   1c9e0:	ldr	r3, [r4, #8]
   1c9e4:	ldr	r3, [r3, r7, lsl #2]
   1c9e8:	cmn	r3, #1
   1c9ec:	bne	1c9bc <__assert_fail@plt+0xb000>
   1c9f0:	add	r7, r7, #1
   1c9f4:	b	1c9a8 <__assert_fail@plt+0xafec>
   1c9f8:	ldr	r2, [r4, #8]
   1c9fc:	str	r1, [r2, r3, lsl #2]
   1ca00:	add	r3, r3, #1
   1ca04:	ldr	r2, [r4, #28]
   1ca08:	cmp	r2, r3
   1ca0c:	bgt	1c9f8 <__assert_fail@plt+0xb03c>
   1ca10:	mov	r1, #255	; 0xff
   1ca14:	ldr	r0, [r4, #4]
   1ca18:	bl	11818 <memset@plt>
   1ca1c:	b	1c9d0 <__assert_fail@plt+0xb014>
   1ca20:	mov	r3, #0
   1ca24:	mvn	r1, #0
   1ca28:	b	1ca04 <__assert_fail@plt+0xb048>
   1ca2c:	mov	r2, sl
   1ca30:	sub	r1, r5, #1
   1ca34:	mov	r0, r4
   1ca38:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1ca3c:	ldr	r3, [r4, #80]	; 0x50
   1ca40:	str	r0, [r4, #60]	; 0x3c
   1ca44:	cmp	r3, #1
   1ca48:	ble	1ca60 <__assert_fail@plt+0xb0a4>
   1ca4c:	ldr	r0, [r4, #8]
   1ca50:	sub	r2, r8, r5
   1ca54:	lsl	r2, r2, #2
   1ca58:	add	r1, r0, r5, lsl #2
   1ca5c:	bl	1159c <memmove@plt>
   1ca60:	ldrb	r3, [r4, #75]	; 0x4b
   1ca64:	cmp	r3, #0
   1ca68:	beq	1ca80 <__assert_fail@plt+0xb0c4>
   1ca6c:	ldr	r0, [r4, #4]
   1ca70:	ldr	r2, [r4, #28]
   1ca74:	add	r1, r0, r5
   1ca78:	sub	r2, r2, r5
   1ca7c:	bl	1159c <memmove@plt>
   1ca80:	ldr	r3, [r4, #28]
   1ca84:	sub	r3, r3, r5
   1ca88:	str	r3, [r4, #28]
   1ca8c:	ldr	r3, [r4, #32]
   1ca90:	sub	r3, r3, r5
   1ca94:	str	r3, [r4, #32]
   1ca98:	b	1c8e4 <__assert_fail@plt+0xaf28>
   1ca9c:	cmp	r3, #0
   1caa0:	beq	1cacc <__assert_fail@plt+0xb110>
   1caa4:	ldr	r3, [r4, #44]	; 0x2c
   1caa8:	sub	r3, r3, r6
   1caac:	add	r3, r3, r5
   1cab0:	str	r3, [r4, #48]	; 0x30
   1cab4:	ldr	r3, [r4, #52]	; 0x34
   1cab8:	sub	r3, r3, r6
   1cabc:	add	r3, r3, r5
   1cac0:	str	r3, [r4, #56]	; 0x38
   1cac4:	mov	r3, #0
   1cac8:	strb	r3, [r4, #76]	; 0x4c
   1cacc:	mov	r1, #0
   1cad0:	ldr	r7, [r4, #24]
   1cad4:	ldr	r3, [r4, #80]	; 0x50
   1cad8:	str	r1, [r4, #28]
   1cadc:	cmp	r3, #1
   1cae0:	ble	1cd08 <__assert_fail@plt+0xb34c>
   1cae4:	ldrb	r2, [r4, #73]	; 0x49
   1cae8:	cmp	r2, r1
   1caec:	beq	1cbbc <__assert_fail@plt+0xb200>
   1caf0:	ldr	r2, [r4]
   1caf4:	sub	r3, r5, r3
   1caf8:	add	r7, r2, r7
   1cafc:	add	r3, r7, r3
   1cb00:	cmp	r2, r3
   1cb04:	movcs	r3, r2
   1cb08:	sub	r2, r5, #1
   1cb0c:	add	r2, r7, r2
   1cb10:	cmp	r2, r3
   1cb14:	mov	r9, r2
   1cb18:	bcc	1cbbc <__assert_fail@plt+0xb200>
   1cb1c:	mov	r2, r9
   1cb20:	ldrb	r1, [r2], #-1
   1cb24:	and	r1, r1, #192	; 0xc0
   1cb28:	cmp	r1, #128	; 0x80
   1cb2c:	beq	1cb10 <__assert_fail@plt+0xb154>
   1cb30:	ldr	r2, [r4, #48]	; 0x30
   1cb34:	ldr	r0, [r4, #64]	; 0x40
   1cb38:	add	r2, r7, r2
   1cb3c:	sub	r2, r2, r9
   1cb40:	cmp	r0, #0
   1cb44:	moveq	ip, r9
   1cb48:	beq	1cb68 <__assert_fail@plt+0xb1ac>
   1cb4c:	cmp	r2, #6
   1cb50:	add	r1, sp, #8
   1cb54:	movlt	r3, r2
   1cb58:	movge	r3, #6
   1cb5c:	subs	r3, r3, #1
   1cb60:	bpl	1cc14 <__assert_fail@plt+0xb258>
   1cb64:	mov	ip, r1
   1cb68:	mov	r0, #0
   1cb6c:	mov	r1, #0
   1cb70:	add	r3, sp, #16
   1cb74:	add	r7, r7, r5
   1cb78:	strd	r0, [sp, #16]
   1cb7c:	mov	r1, ip
   1cb80:	add	r0, sp, #4
   1cb84:	sub	r9, r7, r9
   1cb88:	bl	1886c <__assert_fail@plt+0x6eb0>
   1cb8c:	cmp	r9, r0
   1cb90:	bhi	1cbbc <__assert_fail@plt+0xb200>
   1cb94:	cmn	r0, #3
   1cb98:	bhi	1cbbc <__assert_fail@plt+0xb200>
   1cb9c:	ldr	fp, [sp, #4]
   1cba0:	mov	r2, #0
   1cba4:	mov	r3, #0
   1cba8:	sub	r0, r0, r9
   1cbac:	strd	r2, [r4, #16]
   1cbb0:	str	r0, [r4, #28]
   1cbb4:	cmn	fp, #1
   1cbb8:	bne	1cc8c <__assert_fail@plt+0xb2d0>
   1cbbc:	ldr	r7, [r4, #24]
   1cbc0:	mvn	fp, #0
   1cbc4:	add	r9, r4, #16
   1cbc8:	ldr	r3, [r4, #32]
   1cbcc:	add	r7, r7, r3
   1cbd0:	cmp	r6, r7
   1cbd4:	bgt	1cc24 <__assert_fail@plt+0xb268>
   1cbd8:	sub	r7, r7, r6
   1cbdc:	cmn	fp, #1
   1cbe0:	str	r7, [r4, #28]
   1cbe4:	bne	1cc8c <__assert_fail@plt+0xb2d0>
   1cbe8:	mov	r2, sl
   1cbec:	sub	r1, r8, #1
   1cbf0:	mov	r0, r4
   1cbf4:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1cbf8:	str	r0, [r4, #60]	; 0x3c
   1cbfc:	ldr	r3, [r4, #28]
   1cc00:	cmp	r3, #0
   1cc04:	beq	1c9d0 <__assert_fail@plt+0xb014>
   1cc08:	mov	r3, #0
   1cc0c:	mvn	r1, #0
   1cc10:	b	1ccec <__assert_fail@plt+0xb330>
   1cc14:	ldrb	ip, [r9, r3]
   1cc18:	ldrb	ip, [r0, ip]
   1cc1c:	strb	ip, [r1, r3]
   1cc20:	b	1cb5c <__assert_fail@plt+0xb1a0>
   1cc24:	ldm	r9, {r0, r1}
   1cc28:	add	r3, sp, #16
   1cc2c:	ldr	fp, [r4, #44]	; 0x2c
   1cc30:	stm	r3, {r0, r1}
   1cc34:	mov	r3, r9
   1cc38:	add	r0, sp, #8
   1cc3c:	ldr	r1, [r4]
   1cc40:	sub	fp, fp, r7
   1cc44:	mov	r2, fp
   1cc48:	add	r1, r1, r7
   1cc4c:	bl	1886c <__assert_fail@plt+0x6eb0>
   1cc50:	sub	r3, r0, #1
   1cc54:	cmn	r3, #4
   1cc58:	ldrls	fp, [sp, #8]
   1cc5c:	bls	1cc84 <__assert_fail@plt+0xb2c8>
   1cc60:	cmp	fp, #0
   1cc64:	cmpne	r0, #0
   1cc68:	ldrne	r3, [r4]
   1cc6c:	moveq	fp, #0
   1cc70:	ldrbne	fp, [r3, r7]
   1cc74:	add	r3, sp, #16
   1cc78:	ldm	r3, {r0, r1}
   1cc7c:	stm	r9, {r0, r1}
   1cc80:	mov	r0, #1
   1cc84:	add	r7, r7, r0
   1cc88:	b	1cbd0 <__assert_fail@plt+0xb214>
   1cc8c:	ldrb	r3, [r4, #78]	; 0x4e
   1cc90:	cmp	r3, #0
   1cc94:	beq	1ccbc <__assert_fail@plt+0xb300>
   1cc98:	mov	r0, fp
   1cc9c:	bl	117e8 <iswalnum@plt>
   1cca0:	subs	r3, fp, #95	; 0x5f
   1cca4:	movne	r3, #1
   1cca8:	cmp	r0, #0
   1ccac:	movne	r3, #0
   1ccb0:	cmp	r3, #0
   1ccb4:	moveq	r3, #1
   1ccb8:	beq	1ccd8 <__assert_fail@plt+0xb31c>
   1ccbc:	cmp	fp, #10
   1ccc0:	movne	r3, #0
   1ccc4:	bne	1ccd8 <__assert_fail@plt+0xb31c>
   1ccc8:	ldrb	r3, [r4, #77]	; 0x4d
   1cccc:	cmp	r3, #0
   1ccd0:	moveq	r3, #0
   1ccd4:	movne	r3, #2
   1ccd8:	str	r3, [r4, #60]	; 0x3c
   1ccdc:	b	1cbfc <__assert_fail@plt+0xb240>
   1cce0:	ldr	r2, [r4, #8]
   1cce4:	str	r1, [r2, r3, lsl #2]
   1cce8:	add	r3, r3, #1
   1ccec:	ldr	r2, [r4, #28]
   1ccf0:	cmp	r2, r3
   1ccf4:	bgt	1cce0 <__assert_fail@plt+0xb324>
   1ccf8:	ldrb	r3, [r4, #75]	; 0x4b
   1ccfc:	cmp	r3, #0
   1cd00:	beq	1c9d0 <__assert_fail@plt+0xb014>
   1cd04:	b	1ca10 <__assert_fail@plt+0xb054>
   1cd08:	ldr	r3, [r4]
   1cd0c:	ldr	r0, [r4, #68]	; 0x44
   1cd10:	add	r3, r3, r5
   1cd14:	add	r7, r3, r7
   1cd18:	ldr	r3, [r4, #64]	; 0x40
   1cd1c:	ldrb	r2, [r7, #-1]
   1cd20:	str	r1, [r4, #32]
   1cd24:	cmp	r3, #0
   1cd28:	ldrbne	r2, [r3, r2]
   1cd2c:	mov	r1, r2
   1cd30:	bl	18960 <__assert_fail@plt+0x6fa4>
   1cd34:	cmp	r0, #0
   1cd38:	movne	r0, #1
   1cd3c:	bne	1cd58 <__assert_fail@plt+0xb39c>
   1cd40:	cmp	r2, #10
   1cd44:	bne	1cd58 <__assert_fail@plt+0xb39c>
   1cd48:	ldrb	r3, [r4, #77]	; 0x4d
   1cd4c:	cmp	r3, #0
   1cd50:	moveq	r0, #0
   1cd54:	movne	r0, #2
   1cd58:	str	r0, [r4, #60]	; 0x3c
   1cd5c:	b	1c8e4 <__assert_fail@plt+0xaf28>
   1cd60:	bl	194dc <__assert_fail@plt+0x7b20>
   1cd64:	mov	r0, #0
   1cd68:	str	r0, [r4, #40]	; 0x28
   1cd6c:	b	1c93c <__assert_fail@plt+0xaf80>
   1cd70:	ldrb	r2, [r4, #75]	; 0x4b
   1cd74:	cmp	r2, #0
   1cd78:	streq	r3, [r4, #28]
   1cd7c:	beq	1cd64 <__assert_fail@plt+0xb3a8>
   1cd80:	ldrb	r3, [r4, #72]	; 0x48
   1cd84:	cmp	r3, #0
   1cd88:	beq	1cd98 <__assert_fail@plt+0xb3dc>
   1cd8c:	mov	r0, r4
   1cd90:	bl	19b00 <__assert_fail@plt+0x8144>
   1cd94:	b	1cd64 <__assert_fail@plt+0xb3a8>
   1cd98:	ldr	r3, [r4, #64]	; 0x40
   1cd9c:	cmp	r3, #0
   1cda0:	beq	1cd64 <__assert_fail@plt+0xb3a8>
   1cda4:	mov	r0, r4
   1cda8:	bl	18a04 <__assert_fail@plt+0x7048>
   1cdac:	b	1cd64 <__assert_fail@plt+0xb3a8>
   1cdb0:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1cdb4:	mov	r6, r0
   1cdb8:	mov	r4, r1
   1cdbc:	mov	r0, r1
   1cdc0:	mov	r7, r2
   1cdc4:	mov	r8, r3
   1cdc8:	ldr	r5, [r1, #40]	; 0x28
   1cdcc:	mov	r1, r5
   1cdd0:	bl	1af40 <__assert_fail@plt+0x9584>
   1cdd4:	cmp	r0, #1
   1cdd8:	ble	1ce08 <__assert_fail@plt+0xb44c>
   1cddc:	mov	r3, #1
   1cde0:	mov	r2, r0
   1cde4:	mov	r0, r4
   1cde8:	str	r3, [r6]
   1cdec:	bl	189e8 <__assert_fail@plt+0x702c>
   1cdf0:	add	r5, r5, r2
   1cdf4:	str	r0, [r6, #4]
   1cdf8:	mov	r0, #0
   1cdfc:	str	r5, [r4, #40]	; 0x28
   1ce00:	add	sp, sp, #8
   1ce04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce08:	ldrb	r2, [r7, #4]
   1ce0c:	add	r5, r5, r8
   1ce10:	str	r5, [r4, #40]	; 0x28
   1ce14:	and	r3, r2, #251	; 0xfb
   1ce18:	cmp	r2, #28
   1ce1c:	cmpne	r3, #26
   1ce20:	bne	1cf68 <__assert_fail@plt+0xb5ac>
   1ce24:	ldr	r3, [r4, #56]	; 0x38
   1ce28:	cmp	r5, r3
   1ce2c:	ldrblt	sl, [r7]
   1ce30:	movlt	r9, #0
   1ce34:	blt	1ced8 <__assert_fail@plt+0xb51c>
   1ce38:	mov	r0, #7
   1ce3c:	b	1ce00 <__assert_fail@plt+0xb444>
   1ce40:	ldrb	r3, [r4, #76]	; 0x4c
   1ce44:	cmp	r3, #0
   1ce48:	beq	1cf04 <__assert_fail@plt+0xb548>
   1ce4c:	ldr	r3, [r4, #28]
   1ce50:	cmp	r5, r3
   1ce54:	beq	1ce68 <__assert_fail@plt+0xb4ac>
   1ce58:	ldr	r3, [r4, #8]
   1ce5c:	ldr	r3, [r3, r5, lsl #2]
   1ce60:	cmn	r3, #1
   1ce64:	beq	1cef4 <__assert_fail@plt+0xb538>
   1ce68:	ldr	r3, [r4]
   1ce6c:	ldr	r2, [r4, #12]
   1ce70:	ldr	r1, [r2, r5, lsl #2]
   1ce74:	ldr	r2, [r4, #24]
   1ce78:	add	r3, r3, r1
   1ce7c:	ldrb	r8, [r3, r2]
   1ce80:	tst	r8, #128	; 0x80
   1ce84:	bne	1cef4 <__assert_fail@plt+0xb538>
   1ce88:	mov	r1, r5
   1ce8c:	mov	r0, r4
   1ce90:	bl	1af40 <__assert_fail@plt+0x9584>
   1ce94:	add	r0, r5, r0
   1ce98:	str	r0, [r4, #40]	; 0x28
   1ce9c:	ldr	r3, [r4, #40]	; 0x28
   1cea0:	ldr	r2, [r4, #56]	; 0x38
   1cea4:	cmp	r2, r3
   1cea8:	ble	1ce38 <__assert_fail@plt+0xb47c>
   1ceac:	cmp	sl, r8
   1ceb0:	ldr	r2, [r6, #4]
   1ceb4:	bne	1cec8 <__assert_fail@plt+0xb50c>
   1ceb8:	ldr	r1, [r4, #4]
   1cebc:	ldrb	r1, [r1, r3]
   1cec0:	cmp	r1, #93	; 0x5d
   1cec4:	beq	1cf20 <__assert_fail@plt+0xb564>
   1cec8:	strb	r8, [r2, r9]
   1cecc:	add	r9, r9, #1
   1ced0:	cmp	r9, #32
   1ced4:	beq	1ce38 <__assert_fail@plt+0xb47c>
   1ced8:	ldrb	r3, [r7, #4]
   1cedc:	ldr	r5, [r4, #40]	; 0x28
   1cee0:	cmp	r3, #30
   1cee4:	bne	1cef4 <__assert_fail@plt+0xb538>
   1cee8:	ldrb	r3, [r4, #75]	; 0x4b
   1ceec:	cmp	r3, #0
   1cef0:	bne	1ce40 <__assert_fail@plt+0xb484>
   1cef4:	add	r2, r5, #1
   1cef8:	ldr	r3, [r4, #4]
   1cefc:	str	r2, [r4, #40]	; 0x28
   1cf00:	b	1cf18 <__assert_fail@plt+0xb55c>
   1cf04:	ldr	r0, [r4]
   1cf08:	add	r2, r5, #1
   1cf0c:	ldr	r3, [r4, #24]
   1cf10:	str	r2, [r4, #40]	; 0x28
   1cf14:	add	r5, r0, r5
   1cf18:	ldrb	r8, [r3, r5]
   1cf1c:	b	1ce9c <__assert_fail@plt+0xb4e0>
   1cf20:	add	r3, r3, #1
   1cf24:	mov	r0, #0
   1cf28:	str	r3, [r4, #40]	; 0x28
   1cf2c:	strb	r0, [r2, r9]
   1cf30:	ldrb	r3, [r7, #4]
   1cf34:	cmp	r3, #28
   1cf38:	beq	1cf58 <__assert_fail@plt+0xb59c>
   1cf3c:	cmp	r3, #30
   1cf40:	beq	1cf60 <__assert_fail@plt+0xb5a4>
   1cf44:	cmp	r3, #26
   1cf48:	moveq	r3, #3
   1cf4c:	bne	1ce00 <__assert_fail@plt+0xb444>
   1cf50:	str	r3, [r6]
   1cf54:	b	1ce00 <__assert_fail@plt+0xb444>
   1cf58:	mov	r3, #2
   1cf5c:	b	1cf50 <__assert_fail@plt+0xb594>
   1cf60:	mov	r3, #4
   1cf64:	b	1cf50 <__assert_fail@plt+0xb594>
   1cf68:	ldrb	r3, [sp, #44]	; 0x2c
   1cf6c:	cmp	r2, #22
   1cf70:	orrne	r3, r3, #1
   1cf74:	cmp	r3, #0
   1cf78:	bne	1cf9c <__assert_fail@plt+0xb5e0>
   1cf7c:	mov	r1, r4
   1cf80:	mov	r0, sp
   1cf84:	ldr	r2, [sp, #40]	; 0x28
   1cf88:	bl	18bb8 <__assert_fail@plt+0x71fc>
   1cf8c:	ldrb	r3, [sp, #4]
   1cf90:	cmp	r3, #21
   1cf94:	movne	r0, #11
   1cf98:	bne	1ce00 <__assert_fail@plt+0xb444>
   1cf9c:	ldrb	r3, [r7]
   1cfa0:	mov	r0, #0
   1cfa4:	str	r0, [r6]
   1cfa8:	strb	r3, [r6, #4]
   1cfac:	b	1ce00 <__assert_fail@plt+0xb444>
   1cfb0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfb4:	ldr	r8, [r1, #40]	; 0x28
   1cfb8:	ldr	r3, [r1, #56]	; 0x38
   1cfbc:	cmp	r3, r8
   1cfc0:	movle	r3, #2
   1cfc4:	strble	r3, [r0, #4]
   1cfc8:	movle	r0, #0
   1cfcc:	ble	1d1a0 <__assert_fail@plt+0xb7e4>
   1cfd0:	ldrb	r3, [r0, #6]
   1cfd4:	ldr	sl, [r1, #4]
   1cfd8:	bic	r3, r3, #96	; 0x60
   1cfdc:	ldrb	r6, [sl, r8]
   1cfe0:	strb	r3, [r0, #6]
   1cfe4:	ldr	r3, [r1, #80]	; 0x50
   1cfe8:	strb	r6, [r0]
   1cfec:	cmp	r3, #1
   1cff0:	ble	1d030 <__assert_fail@plt+0xb674>
   1cff4:	ldr	ip, [r1, #28]
   1cff8:	cmp	r8, ip
   1cffc:	beq	1d030 <__assert_fail@plt+0xb674>
   1d000:	ldr	ip, [r1, #8]
   1d004:	ldr	ip, [ip, r8, lsl #2]
   1d008:	cmn	ip, #1
   1d00c:	bne	1d030 <__assert_fail@plt+0xb674>
   1d010:	ldr	r3, [r0, #4]
   1d014:	bic	r3, r3, #2097152	; 0x200000
   1d018:	bic	r3, r3, #255	; 0xff
   1d01c:	orr	r3, r3, #2097152	; 0x200000
   1d020:	orr	r3, r3, #1
   1d024:	str	r3, [r0, #4]
   1d028:	mov	r0, #1
   1d02c:	b	1d1a0 <__assert_fail@plt+0xb7e4>
   1d030:	cmp	r6, #92	; 0x5c
   1d034:	mov	r4, r2
   1d038:	mov	r7, r1
   1d03c:	mov	r5, r0
   1d040:	bne	1d378 <__assert_fail@plt+0xb9bc>
   1d044:	ldr	r2, [r7, #48]	; 0x30
   1d048:	add	r1, r8, #1
   1d04c:	cmp	r1, r2
   1d050:	movge	r3, #36	; 0x24
   1d054:	bge	1d4a4 <__assert_fail@plt+0xbae8>
   1d058:	ldrb	r2, [r7, #75]	; 0x4b
   1d05c:	cmp	r2, #0
   1d060:	bne	1d06c <__assert_fail@plt+0xb6b0>
   1d064:	ldrb	r6, [sl, r1]
   1d068:	b	1d0dc <__assert_fail@plt+0xb720>
   1d06c:	cmp	r3, #1
   1d070:	ble	1d0a8 <__assert_fail@plt+0xb6ec>
   1d074:	ldr	r2, [r7, #8]
   1d078:	lsl	r0, r1, #2
   1d07c:	ldr	ip, [r2, r1, lsl #2]
   1d080:	cmn	ip, #1
   1d084:	beq	1d064 <__assert_fail@plt+0xb6a8>
   1d088:	ldr	ip, [r7, #28]
   1d08c:	add	r8, r8, #2
   1d090:	cmp	ip, r8
   1d094:	beq	1d0a8 <__assert_fail@plt+0xb6ec>
   1d098:	add	r2, r2, r0
   1d09c:	ldr	r2, [r2, #4]
   1d0a0:	cmn	r2, #1
   1d0a4:	beq	1d064 <__assert_fail@plt+0xb6a8>
   1d0a8:	ldrb	r0, [r7, #76]	; 0x4c
   1d0ac:	ldr	lr, [r7, #24]
   1d0b0:	cmp	r0, #0
   1d0b4:	ldrne	r2, [r7, #12]
   1d0b8:	moveq	ip, r1
   1d0bc:	ldrne	ip, [r2, r1, lsl #2]
   1d0c0:	cmp	r0, #0
   1d0c4:	ldr	r2, [r7]
   1d0c8:	add	r2, r2, ip
   1d0cc:	ldrb	r6, [r2, lr]
   1d0d0:	beq	1d0dc <__assert_fail@plt+0xb720>
   1d0d4:	tst	r6, #128	; 0x80
   1d0d8:	bne	1d064 <__assert_fail@plt+0xb6a8>
   1d0dc:	mov	r2, #1
   1d0e0:	ldrb	r8, [r5, #6]
   1d0e4:	cmp	r3, r2
   1d0e8:	strb	r6, [r5]
   1d0ec:	strb	r2, [r5, #4]
   1d0f0:	ble	1d154 <__assert_fail@plt+0xb798>
   1d0f4:	mov	r0, r7
   1d0f8:	bl	189e8 <__assert_fail@plt+0x702c>
   1d0fc:	mov	r7, r0
   1d100:	bl	117e8 <iswalnum@plt>
   1d104:	adds	r0, r0, #0
   1d108:	movne	r0, #1
   1d10c:	cmp	r7, #95	; 0x5f
   1d110:	orreq	r0, r0, #1
   1d114:	bfi	r8, r0, #6, #1
   1d118:	cmp	r6, #66	; 0x42
   1d11c:	strb	r8, [r5, #6]
   1d120:	beq	1d2c4 <__assert_fail@plt+0xb908>
   1d124:	bhi	1d1dc <__assert_fail@plt+0xb820>
   1d128:	cmp	r6, #57	; 0x39
   1d12c:	bhi	1d1a8 <__assert_fail@plt+0xb7ec>
   1d130:	cmp	r6, #49	; 0x31
   1d134:	bcs	1d290 <__assert_fail@plt+0xb8d4>
   1d138:	cmp	r6, #40	; 0x28
   1d13c:	beq	1d32c <__assert_fail@plt+0xb970>
   1d140:	bhi	1d178 <__assert_fail@plt+0xb7bc>
   1d144:	cmp	r6, #39	; 0x27
   1d148:	beq	1d314 <__assert_fail@plt+0xb958>
   1d14c:	mov	r0, #2
   1d150:	b	1d1a0 <__assert_fail@plt+0xb7e4>
   1d154:	bl	1177c <__ctype_b_loc@plt>
   1d158:	ldr	r2, [r0]
   1d15c:	lsl	r3, r6, #1
   1d160:	ldrh	r3, [r2, r3]
   1d164:	ubfx	r3, r3, #3, #1
   1d168:	cmp	r6, #95	; 0x5f
   1d16c:	orreq	r3, r3, #1
   1d170:	bfi	r8, r3, #6, #1
   1d174:	b	1d118 <__assert_fail@plt+0xb75c>
   1d178:	cmp	r6, #41	; 0x29
   1d17c:	beq	1d33c <__assert_fail@plt+0xb980>
   1d180:	cmp	r6, #43	; 0x2b
   1d184:	bne	1d14c <__assert_fail@plt+0xb790>
   1d188:	movw	r0, #1026	; 0x402
   1d18c:	and	r0, r4, r0
   1d190:	cmp	r0, #2
   1d194:	moveq	r3, #18
   1d198:	bne	1d14c <__assert_fail@plt+0xb790>
   1d19c:	strb	r3, [r5, #4]
   1d1a0:	add	sp, sp, #12
   1d1a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1a8:	cmp	r6, #62	; 0x3e
   1d1ac:	beq	1d2ac <__assert_fail@plt+0xb8f0>
   1d1b0:	cmp	r6, #63	; 0x3f
   1d1b4:	beq	1d34c <__assert_fail@plt+0xb990>
   1d1b8:	cmp	r6, #60	; 0x3c
   1d1bc:	bne	1d14c <__assert_fail@plt+0xb790>
   1d1c0:	tst	r4, #524288	; 0x80000
   1d1c4:	moveq	r3, #12
   1d1c8:	strbeq	r3, [r5, #4]
   1d1cc:	moveq	r3, #6
   1d1d0:	bne	1d14c <__assert_fail@plt+0xb790>
   1d1d4:	str	r3, [r5]
   1d1d8:	b	1d14c <__assert_fail@plt+0xb790>
   1d1dc:	cmp	r6, #115	; 0x73
   1d1e0:	beq	1d2ec <__assert_fail@plt+0xb930>
   1d1e4:	bhi	1d234 <__assert_fail@plt+0xb878>
   1d1e8:	cmp	r6, #87	; 0x57
   1d1ec:	beq	1d2dc <__assert_fail@plt+0xb920>
   1d1f0:	bhi	1d20c <__assert_fail@plt+0xb850>
   1d1f4:	cmp	r6, #83	; 0x53
   1d1f8:	bne	1d14c <__assert_fail@plt+0xb790>
   1d1fc:	tst	r4, #524288	; 0x80000
   1d200:	moveq	r3, #35	; 0x23
   1d204:	beq	1d288 <__assert_fail@plt+0xb8cc>
   1d208:	b	1d14c <__assert_fail@plt+0xb790>
   1d20c:	cmp	r6, #96	; 0x60
   1d210:	beq	1d2fc <__assert_fail@plt+0xb940>
   1d214:	cmp	r6, #98	; 0x62
   1d218:	bne	1d14c <__assert_fail@plt+0xb790>
   1d21c:	tst	r4, #524288	; 0x80000
   1d220:	moveq	r3, #12
   1d224:	strbeq	r3, [r5, #4]
   1d228:	moveq	r3, #256	; 0x100
   1d22c:	beq	1d1d4 <__assert_fail@plt+0xb818>
   1d230:	b	1d14c <__assert_fail@plt+0xb790>
   1d234:	cmp	r6, #123	; 0x7b
   1d238:	beq	1d364 <__assert_fail@plt+0xb9a8>
   1d23c:	bhi	1d258 <__assert_fail@plt+0xb89c>
   1d240:	cmp	r6, #119	; 0x77
   1d244:	bne	1d14c <__assert_fail@plt+0xb790>
   1d248:	tst	r4, #524288	; 0x80000
   1d24c:	moveq	r3, #32
   1d250:	beq	1d288 <__assert_fail@plt+0xb8cc>
   1d254:	b	1d14c <__assert_fail@plt+0xb790>
   1d258:	cmp	r6, #124	; 0x7c
   1d25c:	beq	1d27c <__assert_fail@plt+0xb8c0>
   1d260:	cmp	r6, #125	; 0x7d
   1d264:	bne	1d14c <__assert_fail@plt+0xb790>
   1d268:	and	r4, r4, #4608	; 0x1200
   1d26c:	cmp	r4, #512	; 0x200
   1d270:	bne	1d14c <__assert_fail@plt+0xb790>
   1d274:	mov	r3, #24
   1d278:	b	1d288 <__assert_fail@plt+0xb8cc>
   1d27c:	tst	r4, #33792	; 0x8400
   1d280:	moveq	r3, #10
   1d284:	bne	1d14c <__assert_fail@plt+0xb790>
   1d288:	strb	r3, [r5, #4]
   1d28c:	b	1d14c <__assert_fail@plt+0xb790>
   1d290:	tst	r4, #16384	; 0x4000
   1d294:	bne	1d14c <__assert_fail@plt+0xb790>
   1d298:	mov	r3, #4
   1d29c:	sub	r6, r6, #49	; 0x31
   1d2a0:	str	r6, [r5]
   1d2a4:	strb	r3, [r5, #4]
   1d2a8:	b	1d14c <__assert_fail@plt+0xb790>
   1d2ac:	tst	r4, #524288	; 0x80000
   1d2b0:	moveq	r3, #12
   1d2b4:	strbeq	r3, [r5, #4]
   1d2b8:	moveq	r3, #9
   1d2bc:	beq	1d1d4 <__assert_fail@plt+0xb818>
   1d2c0:	b	1d14c <__assert_fail@plt+0xb790>
   1d2c4:	tst	r4, #524288	; 0x80000
   1d2c8:	moveq	r3, #12
   1d2cc:	strbeq	r3, [r5, #4]
   1d2d0:	moveq	r3, #512	; 0x200
   1d2d4:	beq	1d1d4 <__assert_fail@plt+0xb818>
   1d2d8:	b	1d14c <__assert_fail@plt+0xb790>
   1d2dc:	tst	r4, #524288	; 0x80000
   1d2e0:	moveq	r3, #33	; 0x21
   1d2e4:	beq	1d288 <__assert_fail@plt+0xb8cc>
   1d2e8:	b	1d14c <__assert_fail@plt+0xb790>
   1d2ec:	tst	r4, #524288	; 0x80000
   1d2f0:	moveq	r3, #34	; 0x22
   1d2f4:	beq	1d288 <__assert_fail@plt+0xb8cc>
   1d2f8:	b	1d14c <__assert_fail@plt+0xb790>
   1d2fc:	tst	r4, #524288	; 0x80000
   1d300:	moveq	r3, #12
   1d304:	strbeq	r3, [r5, #4]
   1d308:	moveq	r3, #64	; 0x40
   1d30c:	beq	1d1d4 <__assert_fail@plt+0xb818>
   1d310:	b	1d14c <__assert_fail@plt+0xb790>
   1d314:	tst	r4, #524288	; 0x80000
   1d318:	bne	1d14c <__assert_fail@plt+0xb790>
   1d31c:	mov	r3, #12
   1d320:	strb	r3, [r5, #4]
   1d324:	mov	r3, #128	; 0x80
   1d328:	b	1d1d4 <__assert_fail@plt+0xb818>
   1d32c:	tst	r4, #8192	; 0x2000
   1d330:	moveq	r3, #8
   1d334:	beq	1d288 <__assert_fail@plt+0xb8cc>
   1d338:	b	1d14c <__assert_fail@plt+0xb790>
   1d33c:	tst	r4, #8192	; 0x2000
   1d340:	moveq	r3, #9
   1d344:	beq	1d288 <__assert_fail@plt+0xb8cc>
   1d348:	b	1d14c <__assert_fail@plt+0xb790>
   1d34c:	movw	r0, #1026	; 0x402
   1d350:	and	r0, r4, r0
   1d354:	cmp	r0, #2
   1d358:	bne	1d14c <__assert_fail@plt+0xb790>
   1d35c:	mov	r3, #19
   1d360:	b	1d19c <__assert_fail@plt+0xb7e0>
   1d364:	and	r4, r4, #4608	; 0x1200
   1d368:	cmp	r4, #512	; 0x200
   1d36c:	moveq	r3, #23
   1d370:	bne	1d14c <__assert_fail@plt+0xb790>
   1d374:	b	1d288 <__assert_fail@plt+0xb8cc>
   1d378:	mov	r2, #1
   1d37c:	ldrb	r9, [r0, #6]
   1d380:	cmp	r3, r2
   1d384:	strb	r2, [r0, #4]
   1d388:	ble	1d438 <__assert_fail@plt+0xba7c>
   1d38c:	mov	r1, r8
   1d390:	mov	r0, r7
   1d394:	bl	189e8 <__assert_fail@plt+0x702c>
   1d398:	mov	fp, r0
   1d39c:	bl	117e8 <iswalnum@plt>
   1d3a0:	adds	r0, r0, #0
   1d3a4:	movne	r0, #1
   1d3a8:	cmp	fp, #95	; 0x5f
   1d3ac:	orreq	r0, r0, #1
   1d3b0:	bfi	r9, r0, #6, #1
   1d3b4:	cmp	r6, #46	; 0x2e
   1d3b8:	strb	r9, [r5, #6]
   1d3bc:	beq	1d548 <__assert_fail@plt+0xbb8c>
   1d3c0:	bhi	1d484 <__assert_fail@plt+0xbac8>
   1d3c4:	cmp	r6, #40	; 0x28
   1d3c8:	beq	1d528 <__assert_fail@plt+0xbb6c>
   1d3cc:	bhi	1d45c <__assert_fail@plt+0xbaa0>
   1d3d0:	cmp	r6, #10
   1d3d4:	beq	1d4d8 <__assert_fail@plt+0xbb1c>
   1d3d8:	cmp	r6, #36	; 0x24
   1d3dc:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d3e0:	tst	r4, #8
   1d3e4:	bne	1d428 <__assert_fail@plt+0xba6c>
   1d3e8:	ldr	r3, [r7, #48]	; 0x30
   1d3ec:	add	r8, r8, #1
   1d3f0:	cmp	r8, r3
   1d3f4:	beq	1d428 <__assert_fail@plt+0xba6c>
   1d3f8:	mov	r2, r4
   1d3fc:	mov	r1, r7
   1d400:	str	r8, [r7, #40]	; 0x28
   1d404:	mov	r0, sp
   1d408:	bl	1cfb0 <__assert_fail@plt+0xb5f4>
   1d40c:	ldr	r3, [r7, #40]	; 0x28
   1d410:	sub	r3, r3, #1
   1d414:	str	r3, [r7, #40]	; 0x28
   1d418:	ldrb	r3, [sp, #4]
   1d41c:	sub	r3, r3, #9
   1d420:	cmp	r3, #1
   1d424:	bhi	1d028 <__assert_fail@plt+0xb66c>
   1d428:	mov	r3, #12
   1d42c:	strb	r3, [r5, #4]
   1d430:	mov	r3, #32
   1d434:	b	1d59c <__assert_fail@plt+0xbbe0>
   1d438:	bl	1177c <__ctype_b_loc@plt>
   1d43c:	ldr	r2, [r0]
   1d440:	lsl	r3, r6, #1
   1d444:	ldrh	r3, [r2, r3]
   1d448:	ubfx	r3, r3, #3, #1
   1d44c:	cmp	r6, #95	; 0x5f
   1d450:	orreq	r3, r3, #1
   1d454:	bfi	r9, r3, #6, #1
   1d458:	b	1d3b4 <__assert_fail@plt+0xb9f8>
   1d45c:	cmp	r6, #42	; 0x2a
   1d460:	beq	1d4f8 <__assert_fail@plt+0xbb3c>
   1d464:	bcc	1d538 <__assert_fail@plt+0xbb7c>
   1d468:	cmp	r6, #43	; 0x2b
   1d46c:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d470:	movw	r3, #1026	; 0x402
   1d474:	tst	r4, r3
   1d478:	moveq	r3, #18
   1d47c:	beq	1d4a4 <__assert_fail@plt+0xbae8>
   1d480:	b	1d028 <__assert_fail@plt+0xb66c>
   1d484:	cmp	r6, #94	; 0x5e
   1d488:	beq	1d550 <__assert_fail@plt+0xbb94>
   1d48c:	bhi	1d4ac <__assert_fail@plt+0xbaf0>
   1d490:	cmp	r6, #63	; 0x3f
   1d494:	beq	1d500 <__assert_fail@plt+0xbb44>
   1d498:	cmp	r6, #91	; 0x5b
   1d49c:	moveq	r3, #20
   1d4a0:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d4a4:	strb	r3, [r5, #4]
   1d4a8:	b	1d028 <__assert_fail@plt+0xb66c>
   1d4ac:	cmp	r6, #124	; 0x7c
   1d4b0:	beq	1d4e8 <__assert_fail@plt+0xbb2c>
   1d4b4:	cmp	r6, #125	; 0x7d
   1d4b8:	beq	1d514 <__assert_fail@plt+0xbb58>
   1d4bc:	cmp	r6, #123	; 0x7b
   1d4c0:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d4c4:	and	r4, r4, #4608	; 0x1200
   1d4c8:	cmp	r4, #4608	; 0x1200
   1d4cc:	moveq	r3, #23
   1d4d0:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d4d4:	b	1d4a4 <__assert_fail@plt+0xbae8>
   1d4d8:	tst	r4, #2048	; 0x800
   1d4dc:	beq	1d028 <__assert_fail@plt+0xb66c>
   1d4e0:	mov	r3, #10
   1d4e4:	b	1d4a4 <__assert_fail@plt+0xbae8>
   1d4e8:	and	r4, r4, #33792	; 0x8400
   1d4ec:	cmp	r4, #32768	; 0x8000
   1d4f0:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d4f4:	b	1d4e0 <__assert_fail@plt+0xbb24>
   1d4f8:	mov	r3, #11
   1d4fc:	b	1d4a4 <__assert_fail@plt+0xbae8>
   1d500:	movw	r3, #1026	; 0x402
   1d504:	tst	r4, r3
   1d508:	moveq	r3, #19
   1d50c:	beq	1d4a4 <__assert_fail@plt+0xbae8>
   1d510:	b	1d028 <__assert_fail@plt+0xb66c>
   1d514:	and	r4, r4, #4608	; 0x1200
   1d518:	cmp	r4, #4608	; 0x1200
   1d51c:	moveq	r3, #24
   1d520:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d524:	b	1d4a4 <__assert_fail@plt+0xbae8>
   1d528:	tst	r4, #8192	; 0x2000
   1d52c:	movne	r3, #8
   1d530:	bne	1d4a4 <__assert_fail@plt+0xbae8>
   1d534:	b	1d028 <__assert_fail@plt+0xb66c>
   1d538:	tst	r4, #8192	; 0x2000
   1d53c:	movne	r3, #9
   1d540:	bne	1d4a4 <__assert_fail@plt+0xbae8>
   1d544:	b	1d028 <__assert_fail@plt+0xb66c>
   1d548:	mov	r3, #5
   1d54c:	b	1d4a4 <__assert_fail@plt+0xbae8>
   1d550:	ldr	r3, [pc, #76]	; 1d5a4 <__assert_fail@plt+0xbbe8>
   1d554:	tst	r4, r3
   1d558:	moveq	r3, #1
   1d55c:	movne	r3, #0
   1d560:	cmp	r8, #0
   1d564:	moveq	r3, #0
   1d568:	cmp	r3, #0
   1d56c:	beq	1d590 <__assert_fail@plt+0xbbd4>
   1d570:	add	r8, sl, r8
   1d574:	eor	r4, r4, #2048	; 0x800
   1d578:	ldrb	r2, [r8, #-1]
   1d57c:	ubfx	r4, r4, #11, #1
   1d580:	cmp	r2, #10
   1d584:	orrne	r4, r4, #1
   1d588:	cmp	r4, #0
   1d58c:	bne	1d028 <__assert_fail@plt+0xb66c>
   1d590:	mov	r3, #12
   1d594:	strb	r3, [r5, #4]
   1d598:	mov	r3, #16
   1d59c:	str	r3, [r5]
   1d5a0:	b	1d028 <__assert_fail@plt+0xb66c>
   1d5a4:	addeq	r0, r0, r8
   1d5a8:	push	{r4, lr}
   1d5ac:	mov	r4, r1
   1d5b0:	bl	1cfb0 <__assert_fail@plt+0xb5f4>
   1d5b4:	ldr	r3, [r4, #40]	; 0x28
   1d5b8:	add	r0, r3, r0
   1d5bc:	str	r0, [r4, #40]	; 0x28
   1d5c0:	pop	{r4, pc}
   1d5c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d5c8:	mov	r8, r0
   1d5cc:	mov	r5, r1
   1d5d0:	mov	r9, r2
   1d5d4:	mvn	r4, #0
   1d5d8:	mov	r7, #10
   1d5dc:	movw	r6, #32816	; 0x8030
   1d5e0:	mov	r2, r9
   1d5e4:	mov	r1, r8
   1d5e8:	mov	r0, r5
   1d5ec:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   1d5f0:	ldrb	r2, [r5, #4]
   1d5f4:	ldrb	r3, [r5]
   1d5f8:	cmp	r2, #2
   1d5fc:	beq	1d660 <__assert_fail@plt+0xbca4>
   1d600:	cmp	r3, #44	; 0x2c
   1d604:	cmpne	r2, #24
   1d608:	beq	1d664 <__assert_fail@plt+0xbca8>
   1d60c:	cmp	r2, #1
   1d610:	bne	1d658 <__assert_fail@plt+0xbc9c>
   1d614:	sub	r1, r3, #48	; 0x30
   1d618:	uxtb	r0, r1
   1d61c:	cmp	r0, #9
   1d620:	movhi	r2, #0
   1d624:	movls	r2, #1
   1d628:	cmn	r4, #2
   1d62c:	moveq	r2, #0
   1d630:	cmp	r2, #0
   1d634:	beq	1d658 <__assert_fail@plt+0xbc9c>
   1d638:	cmn	r4, #1
   1d63c:	moveq	r4, r1
   1d640:	beq	1d5e0 <__assert_fail@plt+0xbc24>
   1d644:	mla	r4, r7, r4, r3
   1d648:	cmp	r4, r6
   1d64c:	movge	r4, r6
   1d650:	sub	r4, r4, #48	; 0x30
   1d654:	b	1d5e0 <__assert_fail@plt+0xbc24>
   1d658:	mvn	r4, #1
   1d65c:	b	1d5e0 <__assert_fail@plt+0xbc24>
   1d660:	mvn	r4, #1
   1d664:	mov	r0, r4
   1d668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d66c:	push	{r4, r5, r6, lr}
   1d670:	add	r5, r0, #12
   1d674:	mov	r4, r0
   1d678:	ldr	r0, [r0, #8]
   1d67c:	cmp	r0, r5
   1d680:	beq	1d688 <__assert_fail@plt+0xbccc>
   1d684:	bl	18758 <__assert_fail@plt+0x6d9c>
   1d688:	mov	r3, #0
   1d68c:	str	r3, [r4]
   1d690:	mov	r3, #16
   1d694:	str	r5, [r4, #8]
   1d698:	str	r3, [r4, #4]
   1d69c:	pop	{r4, r5, r6, pc}
   1d6a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6a4:	mov	fp, #0
   1d6a8:	sub	sp, sp, #14400	; 0x3840
   1d6ac:	sub	sp, sp, #4
   1d6b0:	mov	sl, r0
   1d6b4:	add	r0, sp, #64	; 0x40
   1d6b8:	mov	r9, r1
   1d6bc:	str	fp, [r1, #44]	; 0x2c
   1d6c0:	str	fp, [r1, #48]	; 0x30
   1d6c4:	bl	19160 <__assert_fail@plt+0x77a4>
   1d6c8:	str	fp, [sp, #4]
   1d6cc:	ldr	r2, [sp, #4]
   1d6d0:	ldr	r3, [r9, #8]
   1d6d4:	cmp	r2, r3
   1d6d8:	blt	1d70c <__assert_fail@plt+0xbd50>
   1d6dc:	cmp	fp, #0
   1d6e0:	bgt	1db2c <__assert_fail@plt+0xc170>
   1d6e4:	bne	1db14 <__assert_fail@plt+0xc158>
   1d6e8:	mov	r1, #256	; 0x100
   1d6ec:	mov	r0, #4
   1d6f0:	bl	18504 <__assert_fail@plt+0x6b48>
   1d6f4:	str	r0, [r9, #44]	; 0x2c
   1d6f8:	adds	r0, r0, #0
   1d6fc:	movne	r0, #1
   1d700:	add	sp, sp, #14400	; 0x3840
   1d704:	add	sp, sp, #4
   1d708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d70c:	ldr	r3, [sp, #4]
   1d710:	ldr	r2, [sp, #4]
   1d714:	lsl	r3, r3, #2
   1d718:	str	r3, [sp, #12]
   1d71c:	ldr	r3, [r9, #12]
   1d720:	ldr	r2, [r3, r2, lsl #2]
   1d724:	ldr	r3, [sl]
   1d728:	add	r1, r3, r2, lsl #3
   1d72c:	ldrb	r5, [r1, #4]
   1d730:	str	r1, [sp, #8]
   1d734:	ldr	r4, [r1, #4]
   1d738:	cmp	r5, #1
   1d73c:	ubfx	r4, r4, #8, #10
   1d740:	bne	1d798 <__assert_fail@plt+0xbddc>
   1d744:	ldrb	r1, [r3, r2, lsl #3]
   1d748:	add	r0, sp, #64	; 0x40
   1d74c:	bl	1892c <__assert_fail@plt+0x6f70>
   1d750:	cmp	r4, #0
   1d754:	beq	1d838 <__assert_fail@plt+0xbe7c>
   1d758:	tst	r4, #32
   1d75c:	beq	1d784 <__assert_fail@plt+0xbdc8>
   1d760:	ldr	r6, [sp, #64]	; 0x40
   1d764:	add	r0, sp, #64	; 0x40
   1d768:	bl	19160 <__assert_fail@plt+0x77a4>
   1d76c:	and	r6, r6, #1024	; 0x400
   1d770:	cmp	r6, #0
   1d774:	beq	1d8b4 <__assert_fail@plt+0xbef8>
   1d778:	ldr	r3, [sp, #64]	; 0x40
   1d77c:	orr	r3, r3, #1024	; 0x400
   1d780:	str	r3, [sp, #64]	; 0x40
   1d784:	tst	r4, #128	; 0x80
   1d788:	beq	1d828 <__assert_fail@plt+0xbe6c>
   1d78c:	add	r0, sp, #64	; 0x40
   1d790:	bl	19160 <__assert_fail@plt+0x77a4>
   1d794:	b	1d8b4 <__assert_fail@plt+0xbef8>
   1d798:	cmp	r5, #3
   1d79c:	bne	1d7b0 <__assert_fail@plt+0xbdf4>
   1d7a0:	add	r0, sp, #64	; 0x40
   1d7a4:	ldr	r1, [r3, r2, lsl #3]
   1d7a8:	bl	18998 <__assert_fail@plt+0x6fdc>
   1d7ac:	b	1d750 <__assert_fail@plt+0xbd94>
   1d7b0:	cmp	r5, #5
   1d7b4:	bne	1d80c <__assert_fail@plt+0xbe50>
   1d7b8:	ldr	r3, [sl, #92]	; 0x5c
   1d7bc:	cmp	r3, #1
   1d7c0:	ble	1d7f8 <__assert_fail@plt+0xbe3c>
   1d7c4:	add	r0, sp, #64	; 0x40
   1d7c8:	ldr	r1, [sl, #60]	; 0x3c
   1d7cc:	bl	18998 <__assert_fail@plt+0x6fdc>
   1d7d0:	ldr	r2, [sl, #128]	; 0x80
   1d7d4:	tst	r2, #64	; 0x40
   1d7d8:	ldreq	r3, [sp, #64]	; 0x40
   1d7dc:	biceq	r3, r3, #1024	; 0x400
   1d7e0:	streq	r3, [sp, #64]	; 0x40
   1d7e4:	tst	r2, #128	; 0x80
   1d7e8:	ldrne	r3, [sp, #64]	; 0x40
   1d7ec:	bicne	r3, r3, #1
   1d7f0:	strne	r3, [sp, #64]	; 0x40
   1d7f4:	b	1d750 <__assert_fail@plt+0xbd94>
   1d7f8:	mov	r2, #32
   1d7fc:	mvn	r1, #0
   1d800:	add	r0, sp, #64	; 0x40
   1d804:	bl	11818 <memset@plt>
   1d808:	b	1d7d0 <__assert_fail@plt+0xbe14>
   1d80c:	cmp	r5, #7
   1d810:	bne	1d8b4 <__assert_fail@plt+0xbef8>
   1d814:	mvn	r2, #0
   1d818:	mvn	r3, #0
   1d81c:	strd	r2, [sp, #64]	; 0x40
   1d820:	strd	r2, [sp, #72]	; 0x48
   1d824:	b	1d7d0 <__assert_fail@plt+0xbe14>
   1d828:	tst	r4, #4
   1d82c:	bne	1d848 <__assert_fail@plt+0xbe8c>
   1d830:	tst	r4, #8
   1d834:	bne	1d8ec <__assert_fail@plt+0xbf30>
   1d838:	add	r4, sp, #6208	; 0x1840
   1d83c:	mov	r6, #0
   1d840:	add	r4, r4, #28
   1d844:	b	1daa8 <__assert_fail@plt+0xc0ec>
   1d848:	cmp	r5, #1
   1d84c:	bne	1d860 <__assert_fail@plt+0xbea4>
   1d850:	ldr	r3, [sp, #8]
   1d854:	ldrb	r3, [r3, #6]
   1d858:	tst	r3, #64	; 0x40
   1d85c:	beq	1d78c <__assert_fail@plt+0xbdd0>
   1d860:	ldr	r3, [sl, #92]	; 0x5c
   1d864:	add	r2, sl, #96	; 0x60
   1d868:	cmp	r3, #1
   1d86c:	add	r3, sp, #64	; 0x40
   1d870:	ble	1d8c4 <__assert_fail@plt+0xbf08>
   1d874:	ldr	ip, [sl, #60]	; 0x3c
   1d878:	add	lr, sl, #128	; 0x80
   1d87c:	mov	r0, #0
   1d880:	sub	ip, ip, #4
   1d884:	ldr	r1, [ip, #4]!
   1d888:	ldr	r6, [r2], #4
   1d88c:	ldr	r7, [r3]
   1d890:	mvn	r1, r1
   1d894:	orr	r1, r1, r6
   1d898:	cmp	lr, r2
   1d89c:	and	r1, r1, r7
   1d8a0:	orr	r0, r0, r1
   1d8a4:	str	r1, [r3], #4
   1d8a8:	bne	1d884 <__assert_fail@plt+0xbec8>
   1d8ac:	cmp	r0, #0
   1d8b0:	bne	1d830 <__assert_fail@plt+0xbe74>
   1d8b4:	ldr	r3, [sp, #4]
   1d8b8:	add	r3, r3, #1
   1d8bc:	str	r3, [sp, #4]
   1d8c0:	b	1d6cc <__assert_fail@plt+0xbd10>
   1d8c4:	add	ip, sl, #128	; 0x80
   1d8c8:	mov	r0, #0
   1d8cc:	ldr	lr, [r2], #4
   1d8d0:	ldr	r1, [r3]
   1d8d4:	cmp	r2, ip
   1d8d8:	and	r1, r1, lr
   1d8dc:	orr	r0, r0, r1
   1d8e0:	str	r1, [r3], #4
   1d8e4:	bne	1d8cc <__assert_fail@plt+0xbf10>
   1d8e8:	b	1d8ac <__assert_fail@plt+0xbef0>
   1d8ec:	cmp	r5, #1
   1d8f0:	bne	1d904 <__assert_fail@plt+0xbf48>
   1d8f4:	ldr	r3, [sp, #8]
   1d8f8:	ldrb	r3, [r3, #6]
   1d8fc:	tst	r3, #64	; 0x40
   1d900:	bne	1d78c <__assert_fail@plt+0xbdd0>
   1d904:	ldr	r3, [sl, #92]	; 0x5c
   1d908:	add	r2, sl, #96	; 0x60
   1d90c:	cmp	r3, #1
   1d910:	add	r3, sp, #64	; 0x40
   1d914:	ble	1d958 <__assert_fail@plt+0xbf9c>
   1d918:	ldr	r0, [sl, #60]	; 0x3c
   1d91c:	add	lr, sl, #128	; 0x80
   1d920:	mov	r1, #0
   1d924:	sub	r0, r0, #4
   1d928:	ldr	ip, [r2], #4
   1d92c:	ldr	r4, [r0, #4]!
   1d930:	ldr	r6, [r3]
   1d934:	cmp	lr, r2
   1d938:	and	ip, ip, r4
   1d93c:	bic	ip, r6, ip
   1d940:	orr	r1, r1, ip
   1d944:	str	ip, [r3], #4
   1d948:	bne	1d928 <__assert_fail@plt+0xbf6c>
   1d94c:	cmp	r1, #0
   1d950:	beq	1d8b4 <__assert_fail@plt+0xbef8>
   1d954:	b	1d838 <__assert_fail@plt+0xbe7c>
   1d958:	add	ip, sl, #128	; 0x80
   1d95c:	mov	r1, #0
   1d960:	ldr	lr, [r2], #4
   1d964:	ldr	r0, [r3]
   1d968:	cmp	ip, r2
   1d96c:	bic	r0, r0, lr
   1d970:	orr	r1, r1, r0
   1d974:	str	r0, [r3], #4
   1d978:	bne	1d960 <__assert_fail@plt+0xbfa4>
   1d97c:	b	1d94c <__assert_fail@plt+0xbf90>
   1d980:	cmp	r5, #1
   1d984:	sub	r0, r4, #28
   1d988:	bne	1d9a0 <__assert_fail@plt+0xbfe4>
   1d98c:	ldr	r3, [sp, #8]
   1d990:	ldrb	r1, [r3]
   1d994:	bl	18960 <__assert_fail@plt+0x6fa4>
   1d998:	cmp	r0, #0
   1d99c:	beq	1daa0 <__assert_fail@plt+0xc0e4>
   1d9a0:	add	r1, sp, #64	; 0x40
   1d9a4:	sub	r2, r4, #32
   1d9a8:	add	lr, sp, #1088	; 0x440
   1d9ac:	mov	ip, r2
   1d9b0:	mov	r7, r1
   1d9b4:	mov	r0, #0
   1d9b8:	ldr	r8, [ip, #4]!
   1d9bc:	ldr	r3, [r7], #4
   1d9c0:	cmp	ip, r4
   1d9c4:	and	r3, r3, r8
   1d9c8:	orr	r0, r0, r3
   1d9cc:	str	r3, [lr], #4
   1d9d0:	bne	1d9b8 <__assert_fail@plt+0xbffc>
   1d9d4:	cmp	r0, #0
   1d9d8:	beq	1daa0 <__assert_fail@plt+0xc0e4>
   1d9dc:	mov	r7, #0
   1d9e0:	add	r8, sp, #2112	; 0x840
   1d9e4:	mov	r0, r7
   1d9e8:	ldr	ip, [r2, #4]!
   1d9ec:	ldr	r3, [r1]
   1d9f0:	cmp	r4, r2
   1d9f4:	bic	lr, ip, r3
   1d9f8:	bic	r3, r3, ip
   1d9fc:	orr	r0, r0, lr
   1da00:	orr	r7, r7, r3
   1da04:	str	lr, [r8], #4
   1da08:	str	r3, [r1], #4
   1da0c:	bne	1d9e8 <__assert_fail@plt+0xc02c>
   1da10:	mov	r3, #12
   1da14:	add	r2, sp, #3136	; 0xc40
   1da18:	cmp	r0, #0
   1da1c:	mla	r8, r3, r6, r2
   1da20:	beq	1da7c <__assert_fail@plt+0xc0c0>
   1da24:	add	r2, sp, #14400	; 0x3840
   1da28:	add	lr, sp, #2112	; 0x840
   1da2c:	add	ip, r2, fp, lsl #5
   1da30:	ldm	lr!, {r0, r1, r2, r3}
   1da34:	sub	ip, ip, #8192	; 0x2000
   1da38:	stmia	ip!, {r0, r1, r2, r3}
   1da3c:	ldm	lr, {r0, r1, r2, r3}
   1da40:	add	lr, sp, #1088	; 0x440
   1da44:	stm	ip, {r0, r1, r2, r3}
   1da48:	sub	ip, r4, #28
   1da4c:	ldm	lr!, {r0, r1, r2, r3}
   1da50:	stmia	ip!, {r0, r1, r2, r3}
   1da54:	ldm	lr, {r0, r1, r2, r3}
   1da58:	stm	ip, {r0, r1, r2, r3}
   1da5c:	mov	r3, #12
   1da60:	add	r2, sp, #3136	; 0xc40
   1da64:	mov	r1, r8
   1da68:	mla	r0, r3, fp, r2
   1da6c:	bl	1b468 <__assert_fail@plt+0x9aac>
   1da70:	cmp	r0, #0
   1da74:	bne	1db00 <__assert_fail@plt+0xc144>
   1da78:	add	fp, fp, #1
   1da7c:	ldr	r3, [r9, #12]
   1da80:	mov	r0, r8
   1da84:	ldr	r2, [sp, #12]
   1da88:	ldr	r1, [r3, r2]
   1da8c:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1da90:	cmp	r0, #0
   1da94:	beq	1db00 <__assert_fail@plt+0xc144>
   1da98:	cmp	r7, #0
   1da9c:	beq	1dab0 <__assert_fail@plt+0xc0f4>
   1daa0:	add	r6, r6, #1
   1daa4:	add	r4, r4, #32
   1daa8:	cmp	r6, fp
   1daac:	blt	1d980 <__assert_fail@plt+0xbfc4>
   1dab0:	cmp	r6, fp
   1dab4:	bne	1d8b4 <__assert_fail@plt+0xbef8>
   1dab8:	add	r3, sp, #14400	; 0x3840
   1dabc:	add	lr, sp, #64	; 0x40
   1dac0:	add	ip, r3, fp, lsl #5
   1dac4:	ldm	lr!, {r0, r1, r2, r3}
   1dac8:	sub	ip, ip, #8192	; 0x2000
   1dacc:	stmia	ip!, {r0, r1, r2, r3}
   1dad0:	ldm	lr, {r0, r1, r2, r3}
   1dad4:	stm	ip, {r0, r1, r2, r3}
   1dad8:	ldr	r3, [r9, #12]
   1dadc:	ldr	r2, [sp, #12]
   1dae0:	ldr	r1, [r3, r2]
   1dae4:	mov	r3, #12
   1dae8:	add	r2, sp, #3136	; 0xc40
   1daec:	mla	r0, r3, fp, r2
   1daf0:	bl	19470 <__assert_fail@plt+0x7ab4>
   1daf4:	cmp	r0, #0
   1daf8:	addeq	fp, fp, #1
   1dafc:	beq	1d78c <__assert_fail@plt+0xbdd0>
   1db00:	add	r5, sp, #3136	; 0xc40
   1db04:	mov	r4, #0
   1db08:	cmp	r4, fp
   1db0c:	add	r5, r5, #12
   1db10:	blt	1db1c <__assert_fail@plt+0xc160>
   1db14:	mov	r0, #0
   1db18:	b	1d700 <__assert_fail@plt+0xbd44>
   1db1c:	ldr	r0, [r5, #-4]
   1db20:	add	r4, r4, #1
   1db24:	bl	18758 <__assert_fail@plt+0x6d9c>
   1db28:	b	1db08 <__assert_fail@plt+0xc14c>
   1db2c:	add	r1, fp, #1
   1db30:	add	r0, sp, #20
   1db34:	bl	194b0 <__assert_fail@plt+0x7af4>
   1db38:	add	r4, sp, #2112	; 0x840
   1db3c:	cmp	r0, #0
   1db40:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1db44:	mov	r6, r0
   1db48:	beq	1db78 <__assert_fail@plt+0xc1bc>
   1db4c:	ldr	r0, [sp, #28]
   1db50:	add	r5, sp, #3136	; 0xc40
   1db54:	mov	r4, #0
   1db58:	bl	18758 <__assert_fail@plt+0x6d9c>
   1db5c:	add	r4, r4, #1
   1db60:	ldr	r0, [r5, #8]
   1db64:	add	r5, r5, #12
   1db68:	bl	18758 <__assert_fail@plt+0x6d9c>
   1db6c:	cmp	r4, fp
   1db70:	bne	1db5c <__assert_fail@plt+0xc1a0>
   1db74:	b	1db14 <__assert_fail@plt+0xc158>
   1db78:	add	r0, sp, #32
   1db7c:	mov	r5, r6
   1db80:	bl	19160 <__assert_fail@plt+0x77a4>
   1db84:	add	r3, sp, #3136	; 0xc40
   1db88:	str	r6, [sp, #4]
   1db8c:	mov	r8, r3
   1db90:	str	r3, [sp, #8]
   1db94:	mov	r3, #0
   1db98:	mov	r7, r3
   1db9c:	str	r3, [r4, #-2088]	; 0xfffff7d8
   1dba0:	ldr	r3, [r8, #4]
   1dba4:	cmp	r3, r7
   1dba8:	bgt	1dc40 <__assert_fail@plt+0xc284>
   1dbac:	mov	r3, #0
   1dbb0:	add	r2, sp, #20
   1dbb4:	mov	r1, sl
   1dbb8:	add	r0, sp, #16
   1dbbc:	bl	1b620 <__assert_fail@plt+0x9c64>
   1dbc0:	add	r3, sp, #64	; 0x40
   1dbc4:	cmp	r0, #0
   1dbc8:	mov	r7, r0
   1dbcc:	str	r0, [r3, r5, lsl #2]
   1dbd0:	bne	1dbe0 <__assert_fail@plt+0xc224>
   1dbd4:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1dbd8:	cmp	r3, #0
   1dbdc:	bne	1db4c <__assert_fail@plt+0xc190>
   1dbe0:	ldrsb	r3, [r7, #52]	; 0x34
   1dbe4:	cmp	r3, #0
   1dbe8:	addge	r3, sp, #1088	; 0x440
   1dbec:	strge	r7, [r4, r5, lsl #2]
   1dbf0:	strge	r7, [r3, r5, lsl #2]
   1dbf4:	bge	1dcb8 <__assert_fail@plt+0xc2fc>
   1dbf8:	mov	r3, #1
   1dbfc:	add	r2, sp, #20
   1dc00:	mov	r1, sl
   1dc04:	add	r0, sp, #16
   1dc08:	bl	1b620 <__assert_fail@plt+0x9c64>
   1dc0c:	add	r3, sp, #1088	; 0x440
   1dc10:	cmp	r0, #0
   1dc14:	str	r0, [r3, r5, lsl #2]
   1dc18:	bne	1dc84 <__assert_fail@plt+0xc2c8>
   1dc1c:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1dc20:	cmp	r3, #0
   1dc24:	bne	1db4c <__assert_fail@plt+0xc190>
   1dc28:	ldr	r3, [sl, #92]	; 0x5c
   1dc2c:	cmp	r3, #2
   1dc30:	ldr	r3, [sp, #4]
   1dc34:	movge	r3, #1
   1dc38:	str	r3, [sp, #4]
   1dc3c:	b	1dc8c <__assert_fail@plt+0xc2d0>
   1dc40:	ldr	r3, [r8, #8]
   1dc44:	ldr	r2, [r3, r7, lsl #2]
   1dc48:	ldr	r3, [sl, #12]
   1dc4c:	ldr	r3, [r3, r2, lsl #2]
   1dc50:	cmn	r3, #1
   1dc54:	bne	1dc60 <__assert_fail@plt+0xc2a4>
   1dc58:	add	r7, r7, #1
   1dc5c:	b	1dba0 <__assert_fail@plt+0xc1e4>
   1dc60:	ldr	r1, [sl, #24]
   1dc64:	mov	r2, #12
   1dc68:	add	r0, sp, #20
   1dc6c:	mla	r1, r2, r3, r1
   1dc70:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1dc74:	cmp	r0, #0
   1dc78:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1dc7c:	beq	1dc58 <__assert_fail@plt+0xc29c>
   1dc80:	b	1db4c <__assert_fail@plt+0xc190>
   1dc84:	cmp	r7, r0
   1dc88:	bne	1dc28 <__assert_fail@plt+0xc26c>
   1dc8c:	mov	r3, #2
   1dc90:	add	r2, sp, #20
   1dc94:	mov	r1, sl
   1dc98:	add	r0, sp, #16
   1dc9c:	bl	1b620 <__assert_fail@plt+0x9c64>
   1dca0:	cmp	r0, #0
   1dca4:	str	r0, [r4, r5, lsl #2]
   1dca8:	bne	1dcb8 <__assert_fail@plt+0xc2fc>
   1dcac:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1dcb0:	cmp	r3, #0
   1dcb4:	bne	1db4c <__assert_fail@plt+0xc190>
   1dcb8:	add	r7, sp, #6208	; 0x1840
   1dcbc:	add	r0, sp, #32
   1dcc0:	add	r1, r7, r5, lsl #5
   1dcc4:	add	r5, r5, #1
   1dcc8:	add	r8, r8, #12
   1dccc:	bl	18998 <__assert_fail@plt+0x6fdc>
   1dcd0:	cmp	r5, fp
   1dcd4:	bne	1db94 <__assert_fail@plt+0xc1d8>
   1dcd8:	ldr	r3, [sp, #4]
   1dcdc:	cmp	r3, #0
   1dce0:	bne	1ddf4 <__assert_fail@plt+0xc438>
   1dce4:	mov	r1, #256	; 0x100
   1dce8:	mov	r0, #4
   1dcec:	bl	18504 <__assert_fail@plt+0x6b48>
   1dcf0:	cmp	r0, #0
   1dcf4:	mov	r2, r0
   1dcf8:	str	r0, [r9, #44]	; 0x2c
   1dcfc:	beq	1db4c <__assert_fail@plt+0xc190>
   1dd00:	ldr	r0, [sp, #4]
   1dd04:	add	r1, sp, #32
   1dd08:	mov	r5, r7
   1dd0c:	add	r9, sl, #96	; 0x60
   1dd10:	ldr	ip, [r1], #4
   1dd14:	add	r4, r2, r0, lsl #7
   1dd18:	mov	lr, #1
   1dd1c:	cmp	ip, #0
   1dd20:	bne	1dda4 <__assert_fail@plt+0xc3e8>
   1dd24:	add	r0, r0, #1
   1dd28:	add	r5, r5, #4
   1dd2c:	cmp	r0, #8
   1dd30:	bne	1dd10 <__assert_fail@plt+0xc354>
   1dd34:	add	r5, sp, #2112	; 0x840
   1dd38:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   1dd3c:	tst	r3, #1024	; 0x400
   1dd40:	beq	1dd70 <__assert_fail@plt+0xc3b4>
   1dd44:	mov	r4, #0
   1dd48:	mov	r1, #10
   1dd4c:	mov	r0, r7
   1dd50:	bl	18960 <__assert_fail@plt+0x6fa4>
   1dd54:	cmp	r0, #0
   1dd58:	beq	1de8c <__assert_fail@plt+0xc4d0>
   1dd5c:	ldr	r1, [sp, #4]
   1dd60:	ldr	r3, [r5, r4, lsl #2]
   1dd64:	cmp	r1, #0
   1dd68:	strne	r3, [r2, #1064]	; 0x428
   1dd6c:	str	r3, [r2, #40]	; 0x28
   1dd70:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   1dd74:	bl	18758 <__assert_fail@plt+0x6d9c>
   1dd78:	ldr	r3, [sp, #8]
   1dd7c:	add	r6, r6, #1
   1dd80:	ldr	r0, [r3, #8]
   1dd84:	bl	18758 <__assert_fail@plt+0x6d9c>
   1dd88:	ldr	r3, [sp, #8]
   1dd8c:	cmp	r6, fp
   1dd90:	add	r3, r3, #12
   1dd94:	str	r3, [sp, #8]
   1dd98:	bne	1dd78 <__assert_fail@plt+0xc3bc>
   1dd9c:	mov	r0, #1
   1dda0:	b	1d700 <__assert_fail@plt+0xbd44>
   1dda4:	tst	ip, #1
   1dda8:	beq	1dde4 <__assert_fail@plt+0xc428>
   1ddac:	mov	r3, #0
   1ddb0:	b	1ddb8 <__assert_fail@plt+0xc3fc>
   1ddb4:	add	r3, r3, #1
   1ddb8:	ldr	sl, [r5, r3, lsl #5]
   1ddbc:	tst	lr, sl
   1ddc0:	beq	1ddb4 <__assert_fail@plt+0xc3f8>
   1ddc4:	ldr	sl, [r9, r0, lsl #2]
   1ddc8:	lsl	r3, r3, #2
   1ddcc:	add	r8, sp, #2112	; 0x840
   1ddd0:	add	r3, r8, r3
   1ddd4:	tst	lr, sl
   1ddd8:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   1dddc:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1dde0:	str	r3, [r4]
   1dde4:	lsl	lr, lr, #1
   1dde8:	add	r4, r4, #4
   1ddec:	lsr	ip, ip, #1
   1ddf0:	b	1dd1c <__assert_fail@plt+0xc360>
   1ddf4:	mov	r1, #512	; 0x200
   1ddf8:	mov	r0, #4
   1ddfc:	bl	18504 <__assert_fail@plt+0x6b48>
   1de00:	cmp	r0, #0
   1de04:	mov	r2, r0
   1de08:	str	r0, [r9, #48]	; 0x30
   1de0c:	beq	1db4c <__assert_fail@plt+0xc190>
   1de10:	add	r3, sp, #32
   1de14:	add	r9, r0, #1024	; 0x400
   1de18:	mov	r4, r7
   1de1c:	ldr	ip, [r3], #4
   1de20:	mov	lr, r0
   1de24:	mov	r5, #1
   1de28:	cmp	ip, #0
   1de2c:	bne	1de44 <__assert_fail@plt+0xc488>
   1de30:	add	r0, r0, #128	; 0x80
   1de34:	add	r4, r4, #4
   1de38:	cmp	r0, r9
   1de3c:	bne	1de1c <__assert_fail@plt+0xc460>
   1de40:	b	1dd34 <__assert_fail@plt+0xc378>
   1de44:	tst	ip, #1
   1de48:	beq	1de7c <__assert_fail@plt+0xc4c0>
   1de4c:	mov	r1, #0
   1de50:	b	1de58 <__assert_fail@plt+0xc49c>
   1de54:	add	r1, r1, #1
   1de58:	ldr	sl, [r4, r1, lsl #5]
   1de5c:	tst	r5, sl
   1de60:	beq	1de54 <__assert_fail@plt+0xc498>
   1de64:	add	r8, sp, #2112	; 0x840
   1de68:	add	r1, r8, r1, lsl #2
   1de6c:	ldr	sl, [r1, #-2048]	; 0xfffff800
   1de70:	str	sl, [lr]
   1de74:	ldr	r1, [r1, #-1024]	; 0xfffffc00
   1de78:	str	r1, [lr, #1024]	; 0x400
   1de7c:	lsl	r5, r5, #1
   1de80:	add	lr, lr, #4
   1de84:	lsr	ip, ip, #1
   1de88:	b	1de28 <__assert_fail@plt+0xc46c>
   1de8c:	add	r4, r4, #1
   1de90:	add	r7, r7, #32
   1de94:	cmp	r4, fp
   1de98:	bne	1dd48 <__assert_fail@plt+0xc38c>
   1de9c:	b	1dd70 <__assert_fail@plt+0xc3b4>
   1dea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dea4:	sub	sp, sp, #28
   1dea8:	mov	r8, r0
   1deac:	add	r5, sp, #12
   1deb0:	mov	r4, r1
   1deb4:	mov	r0, r5
   1deb8:	mov	r9, r2
   1debc:	ldr	r1, [r1, #4]
   1dec0:	mov	sl, r3
   1dec4:	bl	194b0 <__assert_fail@plt+0x7af4>
   1dec8:	subs	r6, r0, #0
   1decc:	moveq	r7, r6
   1ded0:	beq	1df74 <__assert_fail@plt+0xc5b8>
   1ded4:	mov	r0, r6
   1ded8:	add	sp, sp, #28
   1dedc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dee0:	ldr	r2, [r0, r7, lsl #2]
   1dee4:	mov	r3, #12
   1dee8:	ldr	r1, [r8, #24]
   1deec:	mla	r1, r3, r2, r1
   1def0:	mov	r3, #0
   1def4:	ldr	lr, [r1, #4]
   1def8:	cmp	r3, lr
   1defc:	blt	1df20 <__assert_fail@plt+0xc564>
   1df00:	mov	r0, r5
   1df04:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1df08:	subs	fp, r0, #0
   1df0c:	beq	1df70 <__assert_fail@plt+0xc5b4>
   1df10:	ldr	r0, [sp, #20]
   1df14:	mov	r6, fp
   1df18:	bl	18758 <__assert_fail@plt+0x6d9c>
   1df1c:	b	1ded4 <__assert_fail@plt+0xc518>
   1df20:	ldr	r0, [r1, #8]
   1df24:	ldr	ip, [r8]
   1df28:	ldr	r0, [r0, r3, lsl #2]
   1df2c:	add	fp, ip, r0, lsl #3
   1df30:	ldrb	fp, [fp, #4]
   1df34:	cmp	sl, fp
   1df38:	bne	1df48 <__assert_fail@plt+0xc58c>
   1df3c:	ldr	ip, [ip, r0, lsl #3]
   1df40:	cmp	r9, ip
   1df44:	beq	1df50 <__assert_fail@plt+0xc594>
   1df48:	add	r3, r3, #1
   1df4c:	b	1def8 <__assert_fail@plt+0xc53c>
   1df50:	cmn	r0, #1
   1df54:	beq	1df00 <__assert_fail@plt+0xc544>
   1df58:	mov	r3, r9
   1df5c:	mov	r1, r5
   1df60:	str	sl, [sp]
   1df64:	mov	r0, r8
   1df68:	bl	1c084 <__assert_fail@plt+0xa6c8>
   1df6c:	b	1df08 <__assert_fail@plt+0xc54c>
   1df70:	add	r7, r7, #1
   1df74:	ldr	r3, [r4, #4]
   1df78:	ldr	r0, [r4, #8]
   1df7c:	cmp	r3, r7
   1df80:	bgt	1dee0 <__assert_fail@plt+0xc524>
   1df84:	bl	18758 <__assert_fail@plt+0x6d9c>
   1df88:	ldm	r5, {r0, r1, r2}
   1df8c:	stm	r4, {r0, r1, r2}
   1df90:	b	1ded4 <__assert_fail@plt+0xc518>
   1df94:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df98:	ldr	r4, [r2, #4]
   1df9c:	cmp	r4, #0
   1dfa0:	movne	r7, r4
   1dfa4:	movne	r3, #0
   1dfa8:	streq	r4, [r0]
   1dfac:	bne	1dfcc <__assert_fail@plt+0xc610>
   1dfb0:	mov	r0, r4
   1dfb4:	add	sp, sp, #4
   1dfb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfbc:	ldr	ip, [r2, #8]
   1dfc0:	ldr	ip, [ip, r3, lsl #2]
   1dfc4:	add	r3, r3, #1
   1dfc8:	add	r7, r7, ip
   1dfcc:	cmp	r4, r3
   1dfd0:	bgt	1dfbc <__assert_fail@plt+0xc600>
   1dfd4:	ldr	r3, [r1, #68]	; 0x44
   1dfd8:	mov	r5, r2
   1dfdc:	mov	r6, r1
   1dfe0:	mov	r8, r0
   1dfe4:	mov	r9, #0
   1dfe8:	and	r2, r7, r3
   1dfec:	mov	r3, #12
   1dff0:	mul	r3, r3, r2
   1dff4:	ldr	r2, [r1, #32]
   1dff8:	ldr	sl, [r2, r3]
   1dffc:	add	fp, r2, r3
   1e000:	cmp	sl, r9
   1e004:	bgt	1e04c <__assert_fail@plt+0xc690>
   1e008:	mov	r1, #1
   1e00c:	mov	r0, #56	; 0x38
   1e010:	bl	18504 <__assert_fail@plt+0x6b48>
   1e014:	subs	r4, r0, #0
   1e018:	beq	1e03c <__assert_fail@plt+0xc680>
   1e01c:	add	r9, r4, #4
   1e020:	mov	r1, r5
   1e024:	mov	r0, r9
   1e028:	bl	1b468 <__assert_fail@plt+0x9aac>
   1e02c:	cmp	r0, #0
   1e030:	beq	1e07c <__assert_fail@plt+0xc6c0>
   1e034:	mov	r0, r4
   1e038:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e03c:	mov	r3, #12
   1e040:	mov	r4, #0
   1e044:	str	r3, [r8]
   1e048:	b	1dfb0 <__assert_fail@plt+0xc5f4>
   1e04c:	ldr	r3, [fp, #8]
   1e050:	ldr	r4, [r3, r9, lsl #2]
   1e054:	ldr	r3, [r4]
   1e058:	cmp	r3, r7
   1e05c:	bne	1e074 <__assert_fail@plt+0xc6b8>
   1e060:	mov	r1, r5
   1e064:	add	r0, r4, #4
   1e068:	bl	18a54 <__assert_fail@plt+0x7098>
   1e06c:	cmp	r0, #0
   1e070:	bne	1dfb0 <__assert_fail@plt+0xc5f4>
   1e074:	add	r9, r9, #1
   1e078:	b	1e000 <__assert_fail@plt+0xc644>
   1e07c:	ldr	r1, [pc, #188]	; 1e140 <__assert_fail@plt+0xc784>
   1e080:	str	r9, [r4, #40]	; 0x28
   1e084:	ldr	lr, [r5, #4]
   1e088:	cmp	r0, lr
   1e08c:	blt	1e0b4 <__assert_fail@plt+0xc6f8>
   1e090:	mov	r2, r7
   1e094:	mov	r1, r4
   1e098:	mov	r0, r6
   1e09c:	bl	1b388 <__assert_fail@plt+0x99cc>
   1e0a0:	cmp	r0, #0
   1e0a4:	beq	1dfb0 <__assert_fail@plt+0xc5f4>
   1e0a8:	mov	r0, r4
   1e0ac:	bl	19eb4 <__assert_fail@plt+0x84f8>
   1e0b0:	b	1e03c <__assert_fail@plt+0xc680>
   1e0b4:	ldr	r3, [r5, #8]
   1e0b8:	ldr	r2, [r3, r0, lsl #2]
   1e0bc:	ldr	r3, [r6]
   1e0c0:	add	r3, r3, r2, lsl #3
   1e0c4:	ldrb	r2, [r3, #4]
   1e0c8:	cmp	r2, #1
   1e0cc:	bne	1e0dc <__assert_fail@plt+0xc720>
   1e0d0:	ldr	ip, [r3, #4]
   1e0d4:	tst	r1, ip
   1e0d8:	beq	1e138 <__assert_fail@plt+0xc77c>
   1e0dc:	ldrb	sl, [r3, #6]
   1e0e0:	cmp	r2, #2
   1e0e4:	ldrb	ip, [r4, #52]	; 0x34
   1e0e8:	ubfx	sl, sl, #4, #1
   1e0ec:	ubfx	r9, ip, #5, #1
   1e0f0:	orr	r9, r9, sl
   1e0f4:	bfi	ip, r9, #5, #1
   1e0f8:	uxtbeq	r3, ip
   1e0fc:	orreq	r3, r3, #16
   1e100:	strb	ip, [r4, #52]	; 0x34
   1e104:	beq	1e134 <__assert_fail@plt+0xc778>
   1e108:	cmp	r2, #4
   1e10c:	ldrbeq	r3, [r4, #52]	; 0x34
   1e110:	orreq	r3, r3, #64	; 0x40
   1e114:	beq	1e134 <__assert_fail@plt+0xc778>
   1e118:	cmp	r2, #12
   1e11c:	beq	1e12c <__assert_fail@plt+0xc770>
   1e120:	ldr	r3, [r3, #4]
   1e124:	tst	r1, r3
   1e128:	beq	1e138 <__assert_fail@plt+0xc77c>
   1e12c:	ldrb	r3, [r4, #52]	; 0x34
   1e130:	orr	r3, r3, #128	; 0x80
   1e134:	strb	r3, [r4, #52]	; 0x34
   1e138:	add	r0, r0, #1
   1e13c:	b	1e088 <__assert_fail@plt+0xc6cc>
   1e140:	andeq	pc, r3, r0, lsl #30
   1e144:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e148:	mov	r7, r0
   1e14c:	mov	r5, r1
   1e150:	mov	r8, r2
   1e154:	mov	r6, r3
   1e158:	mov	r4, #0
   1e15c:	cmp	r4, r6
   1e160:	blt	1e170 <__assert_fail@plt+0xc7b4>
   1e164:	mov	r0, #0
   1e168:	add	sp, sp, #16
   1e16c:	pop	{r4, r5, r6, r7, r8, pc}
   1e170:	ldr	r1, [r5, r4, lsl #2]
   1e174:	ldr	r2, [r8, r4, lsl #2]
   1e178:	cmp	r1, #0
   1e17c:	streq	r2, [r5, r4, lsl #2]
   1e180:	beq	1e1d0 <__assert_fail@plt+0xc814>
   1e184:	cmp	r2, #0
   1e188:	beq	1e1d0 <__assert_fail@plt+0xc814>
   1e18c:	add	r2, r2, #4
   1e190:	add	r1, r1, #4
   1e194:	add	r0, sp, #4
   1e198:	bl	1b4e0 <__assert_fail@plt+0x9b24>
   1e19c:	cmp	r0, #0
   1e1a0:	str	r0, [sp]
   1e1a4:	bne	1e168 <__assert_fail@plt+0xc7ac>
   1e1a8:	add	r2, sp, #4
   1e1ac:	mov	r1, r7
   1e1b0:	mov	r0, sp
   1e1b4:	bl	1df94 <__assert_fail@plt+0xc5d8>
   1e1b8:	str	r0, [r5, r4, lsl #2]
   1e1bc:	ldr	r0, [sp, #12]
   1e1c0:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e1c4:	ldr	r0, [sp]
   1e1c8:	cmp	r0, #0
   1e1cc:	bne	1e168 <__assert_fail@plt+0xc7ac>
   1e1d0:	add	r4, r4, #1
   1e1d4:	b	1e15c <__assert_fail@plt+0xc7a0>
   1e1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1dc:	sub	sp, sp, #36	; 0x24
   1e1e0:	mov	r8, r1
   1e1e4:	mov	r1, r2
   1e1e8:	mov	r6, r0
   1e1ec:	mov	r9, r2
   1e1f0:	str	r3, [sp, #4]
   1e1f4:	bl	18f38 <__assert_fail@plt+0x757c>
   1e1f8:	cmn	r0, #1
   1e1fc:	bne	1e20c <__assert_fail@plt+0xc850>
   1e200:	mov	r0, #0
   1e204:	add	sp, sp, #36	; 0x24
   1e208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e20c:	mov	r3, #24
   1e210:	ldr	r7, [r6, #84]	; 0x54
   1e214:	mla	r3, r0, r3, r3
   1e218:	str	r3, [sp, #8]
   1e21c:	ldr	r3, [sp, #8]
   1e220:	mov	fp, #12
   1e224:	ldr	r4, [r6, #116]	; 0x74
   1e228:	add	r4, r4, r3
   1e22c:	ldr	sl, [r4, #-24]	; 0xffffffe8
   1e230:	mov	r0, r8
   1e234:	mov	r1, sl
   1e238:	bl	18acc <__assert_fail@plt+0x7110>
   1e23c:	cmp	r0, #0
   1e240:	beq	1e38c <__assert_fail@plt+0xc9d0>
   1e244:	ldr	r2, [r4, #-16]
   1e248:	ldr	r5, [r4, #-12]
   1e24c:	add	r5, r9, r5
   1e250:	sub	r5, r5, r2
   1e254:	cmp	r9, r5
   1e258:	bne	1e2e4 <__assert_fail@plt+0xc928>
   1e25c:	ldr	r2, [r7, #20]
   1e260:	mov	r0, r8
   1e264:	mla	r3, fp, sl, r2
   1e268:	ldr	r3, [r3, #8]
   1e26c:	ldr	r5, [r3]
   1e270:	mov	r1, r5
   1e274:	bl	18acc <__assert_fail@plt+0x7110>
   1e278:	cmp	r0, #0
   1e27c:	bne	1e38c <__assert_fail@plt+0xc9d0>
   1e280:	add	r0, sp, #20
   1e284:	bl	19470 <__assert_fail@plt+0x7ab4>
   1e288:	add	r1, sp, #20
   1e28c:	str	r0, [sp, #16]
   1e290:	mov	r0, r7
   1e294:	ldr	r2, [sp, #4]
   1e298:	ldr	r3, [sp, #72]	; 0x48
   1e29c:	bl	1dea0 <__assert_fail@plt+0xc4e4>
   1e2a0:	mov	r4, r0
   1e2a4:	add	r1, sp, #20
   1e2a8:	mov	r0, r8
   1e2ac:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1e2b0:	mov	r5, r0
   1e2b4:	ldr	r0, [sp, #28]
   1e2b8:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e2bc:	ldr	r0, [sp, #16]
   1e2c0:	orr	r3, r4, r5
   1e2c4:	orrs	r3, r3, r0
   1e2c8:	beq	1e21c <__assert_fail@plt+0xc860>
   1e2cc:	cmp	r0, #0
   1e2d0:	bne	1e204 <__assert_fail@plt+0xc848>
   1e2d4:	cmp	r4, #0
   1e2d8:	movne	r0, r4
   1e2dc:	moveq	r0, r5
   1e2e0:	b	1e204 <__assert_fail@plt+0xc848>
   1e2e4:	ldr	r3, [r6, #100]	; 0x64
   1e2e8:	ldr	r2, [r7, #12]
   1e2ec:	ldr	r3, [r3, r5, lsl #2]
   1e2f0:	ldr	sl, [r2, sl, lsl #2]
   1e2f4:	cmp	r3, #0
   1e2f8:	beq	1e3b8 <__assert_fail@plt+0xc9fc>
   1e2fc:	add	r3, r3, #4
   1e300:	mov	r1, sl
   1e304:	mov	r0, r3
   1e308:	str	r3, [sp, #12]
   1e30c:	bl	18acc <__assert_fail@plt+0x7110>
   1e310:	cmp	r0, #0
   1e314:	bne	1e38c <__assert_fail@plt+0xc9d0>
   1e318:	ldr	r3, [sp, #12]
   1e31c:	add	r0, sp, #20
   1e320:	mov	r1, r3
   1e324:	bl	1b468 <__assert_fail@plt+0x9aac>
   1e328:	mov	r1, sl
   1e32c:	str	r0, [sp, #16]
   1e330:	add	r0, sp, #20
   1e334:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1e338:	ldr	r3, [sp, #16]
   1e33c:	eor	r0, r0, #1
   1e340:	cmp	r3, #0
   1e344:	orrne	r0, r0, #1
   1e348:	tst	r0, #255	; 0xff
   1e34c:	bne	1e3a0 <__assert_fail@plt+0xc9e4>
   1e350:	ldr	sl, [r6, #100]	; 0x64
   1e354:	add	r2, sp, #20
   1e358:	mov	r1, r7
   1e35c:	add	r0, sp, #16
   1e360:	bl	1df94 <__assert_fail@plt+0xc5d8>
   1e364:	str	r0, [sl, r5, lsl #2]
   1e368:	ldr	r0, [sp, #28]
   1e36c:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e370:	ldr	r3, [r6, #100]	; 0x64
   1e374:	ldr	r3, [r3, r5, lsl #2]
   1e378:	cmp	r3, #0
   1e37c:	bne	1e38c <__assert_fail@plt+0xc9d0>
   1e380:	ldr	r0, [sp, #16]
   1e384:	cmp	r0, #0
   1e388:	bne	1e204 <__assert_fail@plt+0xc848>
   1e38c:	add	r4, r4, #24
   1e390:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1e394:	cmp	r3, #0
   1e398:	bne	1e22c <__assert_fail@plt+0xc870>
   1e39c:	b	1e200 <__assert_fail@plt+0xc844>
   1e3a0:	ldr	r0, [sp, #28]
   1e3a4:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e3a8:	ldr	r0, [sp, #16]
   1e3ac:	cmp	r0, #0
   1e3b0:	moveq	r0, #12
   1e3b4:	b	1e204 <__assert_fail@plt+0xc848>
   1e3b8:	mov	r1, sl
   1e3bc:	add	r0, sp, #20
   1e3c0:	bl	19470 <__assert_fail@plt+0x7ab4>
   1e3c4:	cmp	r0, #0
   1e3c8:	str	r0, [sp, #16]
   1e3cc:	beq	1e350 <__assert_fail@plt+0xc994>
   1e3d0:	b	1e204 <__assert_fail@plt+0xc848>
   1e3d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3d8:	mov	r9, r3
   1e3dc:	sub	sp, sp, #84	; 0x54
   1e3e0:	mov	sl, #0
   1e3e4:	mov	r4, r0
   1e3e8:	mov	r7, r1
   1e3ec:	mov	r6, r2
   1e3f0:	ldr	r3, [r0, #84]	; 0x54
   1e3f4:	ldr	r5, [r0, #120]	; 0x78
   1e3f8:	ldr	r8, [r1, #4]
   1e3fc:	str	r3, [sp, #12]
   1e400:	ldr	r3, [r3]
   1e404:	str	sl, [sp, #48]	; 0x30
   1e408:	ldr	r3, [r3, r2, lsl #3]
   1e40c:	str	r3, [sp, #16]
   1e410:	ldr	r3, [sp, #124]	; 0x7c
   1e414:	add	r5, r3, r5
   1e418:	cmp	r5, r8
   1e41c:	blt	1e478 <__assert_fail@plt+0xcabc>
   1e420:	mvn	r3, #-2147483648	; 0x80000000
   1e424:	add	r5, r5, #1
   1e428:	sub	r3, r3, r8
   1e42c:	cmp	r3, r5
   1e430:	bge	1e440 <__assert_fail@plt+0xca84>
   1e434:	mov	r0, #12
   1e438:	add	sp, sp, #84	; 0x54
   1e43c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e440:	add	fp, r8, r5
   1e444:	cmn	fp, #-1073741823	; 0xc0000001
   1e448:	bhi	1e434 <__assert_fail@plt+0xca78>
   1e44c:	lsl	r1, fp, #2
   1e450:	ldr	r0, [r7, #8]
   1e454:	bl	188bc <__assert_fail@plt+0x6f00>
   1e458:	cmp	r0, #0
   1e45c:	beq	1e434 <__assert_fail@plt+0xca78>
   1e460:	lsl	r2, r5, #2
   1e464:	mov	r1, sl
   1e468:	str	fp, [r7, #4]
   1e46c:	str	r0, [r7, #8]
   1e470:	add	r0, r0, r8, lsl #2
   1e474:	bl	11818 <memset@plt>
   1e478:	ldr	r5, [r7]
   1e47c:	mov	r0, r4
   1e480:	ldr	r3, [r4, #100]	; 0x64
   1e484:	ldr	sl, [r7, #8]
   1e488:	cmp	r5, #0
   1e48c:	moveq	r5, r9
   1e490:	ldr	r2, [r4, #88]	; 0x58
   1e494:	str	r3, [sp, #32]
   1e498:	sub	r1, r5, #1
   1e49c:	ldr	r3, [r4, #40]	; 0x28
   1e4a0:	str	r5, [r4, #40]	; 0x28
   1e4a4:	str	sl, [r4, #100]	; 0x64
   1e4a8:	str	r3, [sp, #36]	; 0x24
   1e4ac:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1e4b0:	cmp	r5, r9
   1e4b4:	mov	r8, r0
   1e4b8:	bne	1e534 <__assert_fail@plt+0xcb78>
   1e4bc:	mov	r1, r6
   1e4c0:	add	r0, sp, #56	; 0x38
   1e4c4:	bl	19470 <__assert_fail@plt+0x7ab4>
   1e4c8:	cmp	r0, #0
   1e4cc:	str	r0, [sp, #48]	; 0x30
   1e4d0:	bne	1e438 <__assert_fail@plt+0xca7c>
   1e4d4:	add	r1, sp, #56	; 0x38
   1e4d8:	ldr	r0, [sp, #12]
   1e4dc:	ldr	r2, [sp, #16]
   1e4e0:	ldr	r3, [sp, #128]	; 0x80
   1e4e4:	bl	1dea0 <__assert_fail@plt+0xc4e4>
   1e4e8:	cmp	r0, #0
   1e4ec:	str	r0, [sp, #48]	; 0x30
   1e4f0:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e4f4:	ldr	r3, [sp, #60]	; 0x3c
   1e4f8:	cmp	r3, #0
   1e4fc:	bne	1e5fc <__assert_fail@plt+0xcc40>
   1e500:	mov	r3, r8
   1e504:	add	r2, sp, #56	; 0x38
   1e508:	ldr	r1, [sp, #12]
   1e50c:	add	r0, sp, #48	; 0x30
   1e510:	bl	1b620 <__assert_fail@plt+0x9c64>
   1e514:	subs	r6, r0, #0
   1e518:	bne	1e528 <__assert_fail@plt+0xcb6c>
   1e51c:	ldr	r3, [sp, #48]	; 0x30
   1e520:	cmp	r3, #0
   1e524:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e528:	ldr	r3, [r4, #100]	; 0x64
   1e52c:	str	r6, [r3, r5, lsl #2]
   1e530:	b	1e570 <__assert_fail@plt+0xcbb4>
   1e534:	ldr	r6, [sl, r5, lsl #2]
   1e538:	cmp	r6, #0
   1e53c:	beq	1e5e0 <__assert_fail@plt+0xcc24>
   1e540:	ldrb	r3, [r6, #52]	; 0x34
   1e544:	tst	r3, #64	; 0x40
   1e548:	beq	1e5e0 <__assert_fail@plt+0xcc24>
   1e54c:	add	r1, r6, #4
   1e550:	add	r0, sp, #56	; 0x38
   1e554:	bl	1b468 <__assert_fail@plt+0x9aac>
   1e558:	cmp	r0, #0
   1e55c:	str	r0, [sp, #48]	; 0x30
   1e560:	bne	1e438 <__assert_fail@plt+0xca7c>
   1e564:	ldrb	r3, [r6, #52]	; 0x34
   1e568:	tst	r3, #64	; 0x40
   1e56c:	bne	1e4f4 <__assert_fail@plt+0xcb38>
   1e570:	mov	fp, #0
   1e574:	mov	r8, fp
   1e578:	ldr	r3, [sp, #124]	; 0x7c
   1e57c:	cmp	r5, r3
   1e580:	bge	1e590 <__assert_fail@plt+0xcbd4>
   1e584:	ldr	r3, [r4, #120]	; 0x78
   1e588:	cmp	r3, fp
   1e58c:	bge	1e634 <__assert_fail@plt+0xcc78>
   1e590:	ldr	r0, [sp, #64]	; 0x40
   1e594:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e598:	ldr	r3, [r4, #100]	; 0x64
   1e59c:	ldr	r2, [sp, #124]	; 0x7c
   1e5a0:	ldr	r0, [r3, r2, lsl #2]
   1e5a4:	str	r5, [r7]
   1e5a8:	ldr	r3, [sp, #32]
   1e5ac:	cmp	r0, #0
   1e5b0:	addne	r0, r0, #4
   1e5b4:	str	r3, [r4, #100]	; 0x64
   1e5b8:	cmp	r0, #0
   1e5bc:	ldr	r3, [sp, #36]	; 0x24
   1e5c0:	moveq	r0, #1
   1e5c4:	str	r3, [r4, #40]	; 0x28
   1e5c8:	beq	1e438 <__assert_fail@plt+0xca7c>
   1e5cc:	ldr	r1, [sp, #120]	; 0x78
   1e5d0:	bl	18acc <__assert_fail@plt+0x7110>
   1e5d4:	clz	r0, r0
   1e5d8:	lsr	r0, r0, #5
   1e5dc:	b	1e438 <__assert_fail@plt+0xca7c>
   1e5e0:	mov	r3, #0
   1e5e4:	cmp	r6, r3
   1e5e8:	str	r3, [sp, #56]	; 0x38
   1e5ec:	str	r3, [sp, #60]	; 0x3c
   1e5f0:	str	r3, [sp, #64]	; 0x40
   1e5f4:	bne	1e564 <__assert_fail@plt+0xcba8>
   1e5f8:	b	1e570 <__assert_fail@plt+0xcbb4>
   1e5fc:	ldr	r3, [sp, #128]	; 0x80
   1e600:	mov	r2, r5
   1e604:	add	r1, sp, #56	; 0x38
   1e608:	mov	r0, r4
   1e60c:	str	r3, [sp]
   1e610:	ldr	r3, [sp, #16]
   1e614:	bl	1e1d8 <__assert_fail@plt+0xc81c>
   1e618:	cmp	r0, #0
   1e61c:	str	r0, [sp, #48]	; 0x30
   1e620:	beq	1e500 <__assert_fail@plt+0xcb44>
   1e624:	ldr	r0, [sp, #64]	; 0x40
   1e628:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e62c:	ldr	r0, [sp, #48]	; 0x30
   1e630:	b	1e438 <__assert_fail@plt+0xca7c>
   1e634:	add	r3, r5, #1
   1e638:	add	r2, r5, #1
   1e63c:	str	r3, [sp, #40]	; 0x28
   1e640:	ldr	r3, [r4, #100]	; 0x64
   1e644:	str	r8, [sp, #60]	; 0x3c
   1e648:	ldr	r1, [r3, r2, lsl #2]
   1e64c:	cmp	r1, #0
   1e650:	beq	1e66c <__assert_fail@plt+0xccb0>
   1e654:	add	r1, r1, #4
   1e658:	add	r0, sp, #56	; 0x38
   1e65c:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1e660:	cmp	r0, #0
   1e664:	str	r0, [sp, #48]	; 0x30
   1e668:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e66c:	cmp	r6, #0
   1e670:	beq	1e784 <__assert_fail@plt+0xcdc8>
   1e674:	ldr	sl, [r4, #84]	; 0x54
   1e678:	add	r3, sp, #68	; 0x44
   1e67c:	mov	r2, #0
   1e680:	str	r2, [sp, #20]
   1e684:	str	r3, [sp, #28]
   1e688:	str	r8, [sp, #52]	; 0x34
   1e68c:	str	r8, [sp, #68]	; 0x44
   1e690:	str	r8, [sp, #72]	; 0x48
   1e694:	str	r8, [sp, #76]	; 0x4c
   1e698:	ldr	r3, [r6, #20]
   1e69c:	ldr	r2, [sp, #20]
   1e6a0:	cmp	r2, r3
   1e6a4:	blt	1e6b8 <__assert_fail@plt+0xccfc>
   1e6a8:	ldr	r0, [sp, #76]	; 0x4c
   1e6ac:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e6b0:	str	r8, [sp, #48]	; 0x30
   1e6b4:	b	1e784 <__assert_fail@plt+0xcdc8>
   1e6b8:	ldr	r2, [sp, #20]
   1e6bc:	ldr	r3, [r6, #24]
   1e6c0:	ldr	r3, [r3, r2, lsl #2]
   1e6c4:	lsl	r9, r3, #3
   1e6c8:	str	r3, [sp, #24]
   1e6cc:	ldr	r3, [sl]
   1e6d0:	add	r3, r3, r9
   1e6d4:	ldrb	r3, [r3, #6]
   1e6d8:	tst	r3, #16
   1e6dc:	bne	1e70c <__assert_fail@plt+0xcd50>
   1e6e0:	ldr	r1, [sl]
   1e6e4:	mov	r2, r5
   1e6e8:	mov	r0, r4
   1e6ec:	add	r1, r1, r9
   1e6f0:	bl	1c5a0 <__assert_fail@plt+0xabe4>
   1e6f4:	cmp	r0, #0
   1e6f8:	bne	1e88c <__assert_fail@plt+0xced0>
   1e6fc:	ldr	r3, [sp, #20]
   1e700:	add	r3, r3, #1
   1e704:	str	r3, [sp, #20]
   1e708:	b	1e698 <__assert_fail@plt+0xccdc>
   1e70c:	mov	r3, r5
   1e710:	mov	r2, r4
   1e714:	ldr	r1, [sp, #24]
   1e718:	mov	r0, sl
   1e71c:	bl	1af94 <__assert_fail@plt+0x95d8>
   1e720:	cmp	r0, #1
   1e724:	ble	1e8bc <__assert_fail@plt+0xcf00>
   1e728:	ldr	r3, [sl, #12]
   1e72c:	add	r9, r5, r0
   1e730:	ldr	r2, [sp, #24]
   1e734:	ldr	r3, [r3, r2, lsl #2]
   1e738:	ldr	r2, [r4, #100]	; 0x64
   1e73c:	ldr	r1, [r2, r9, lsl #2]
   1e740:	str	r8, [sp, #72]	; 0x48
   1e744:	cmp	r1, #0
   1e748:	beq	1e834 <__assert_fail@plt+0xce78>
   1e74c:	add	r1, r1, #4
   1e750:	ldr	r0, [sp, #28]
   1e754:	str	r3, [sp, #44]	; 0x2c
   1e758:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1e75c:	cmp	r0, #0
   1e760:	str	r0, [sp, #52]	; 0x34
   1e764:	ldr	r3, [sp, #44]	; 0x2c
   1e768:	beq	1e834 <__assert_fail@plt+0xce78>
   1e76c:	ldr	r0, [sp, #76]	; 0x4c
   1e770:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e774:	ldr	r3, [sp, #52]	; 0x34
   1e778:	cmp	r3, #0
   1e77c:	str	r3, [sp, #48]	; 0x30
   1e780:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e784:	ldr	r3, [sp, #60]	; 0x3c
   1e788:	add	r9, r5, #1
   1e78c:	cmp	r3, #0
   1e790:	beq	1e7dc <__assert_fail@plt+0xce20>
   1e794:	add	r1, sp, #56	; 0x38
   1e798:	ldr	r0, [sp, #12]
   1e79c:	ldr	r2, [sp, #16]
   1e7a0:	ldr	r3, [sp, #128]	; 0x80
   1e7a4:	bl	1dea0 <__assert_fail@plt+0xc4e4>
   1e7a8:	cmp	r0, #0
   1e7ac:	str	r0, [sp, #48]	; 0x30
   1e7b0:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e7b4:	ldr	r3, [sp, #128]	; 0x80
   1e7b8:	mov	r2, r9
   1e7bc:	add	r1, sp, #56	; 0x38
   1e7c0:	mov	r0, r4
   1e7c4:	str	r3, [sp]
   1e7c8:	ldr	r3, [sp, #16]
   1e7cc:	bl	1e1d8 <__assert_fail@plt+0xc81c>
   1e7d0:	cmp	r0, #0
   1e7d4:	str	r0, [sp, #48]	; 0x30
   1e7d8:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e7dc:	mov	r1, r5
   1e7e0:	mov	r0, r4
   1e7e4:	ldr	r2, [r4, #88]	; 0x58
   1e7e8:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1e7ec:	mov	r3, r0
   1e7f0:	add	r2, sp, #56	; 0x38
   1e7f4:	ldr	r1, [sp, #12]
   1e7f8:	add	r0, sp, #48	; 0x30
   1e7fc:	bl	1b620 <__assert_fail@plt+0x9c64>
   1e800:	subs	r6, r0, #0
   1e804:	bne	1e814 <__assert_fail@plt+0xce58>
   1e808:	ldr	r3, [sp, #48]	; 0x30
   1e80c:	cmp	r3, #0
   1e810:	bne	1e624 <__assert_fail@plt+0xcc68>
   1e814:	ldr	r2, [sp, #40]	; 0x28
   1e818:	cmp	r6, #0
   1e81c:	addeq	fp, fp, #1
   1e820:	ldr	r3, [r4, #100]	; 0x64
   1e824:	str	r6, [r3, r2, lsl #2]
   1e828:	movne	fp, #0
   1e82c:	mov	r5, r9
   1e830:	b	1e578 <__assert_fail@plt+0xcbbc>
   1e834:	mov	r1, r3
   1e838:	ldr	r0, [sp, #28]
   1e83c:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1e840:	cmp	r0, #0
   1e844:	bne	1e85c <__assert_fail@plt+0xcea0>
   1e848:	ldr	r0, [sp, #76]	; 0x4c
   1e84c:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e850:	mov	r3, #12
   1e854:	str	r3, [sp, #48]	; 0x30
   1e858:	b	1e624 <__assert_fail@plt+0xcc68>
   1e85c:	ldr	r3, [r4, #100]	; 0x64
   1e860:	mov	r1, sl
   1e864:	add	r0, sp, #52	; 0x34
   1e868:	ldr	r2, [sp, #28]
   1e86c:	str	r3, [sp, #44]	; 0x2c
   1e870:	bl	1df94 <__assert_fail@plt+0xc5d8>
   1e874:	ldr	r3, [sp, #44]	; 0x2c
   1e878:	str	r0, [r3, r9, lsl #2]
   1e87c:	ldr	r3, [r4, #100]	; 0x64
   1e880:	ldr	r3, [r3, r9, lsl #2]
   1e884:	cmp	r3, #0
   1e888:	beq	1e8ac <__assert_fail@plt+0xcef0>
   1e88c:	ldr	r3, [sl, #12]
   1e890:	add	r0, sp, #56	; 0x38
   1e894:	ldr	r2, [sp, #24]
   1e898:	ldr	r1, [r3, r2, lsl #2]
   1e89c:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1e8a0:	cmp	r0, #0
   1e8a4:	bne	1e6fc <__assert_fail@plt+0xcd40>
   1e8a8:	b	1e848 <__assert_fail@plt+0xce8c>
   1e8ac:	ldr	r3, [sp, #52]	; 0x34
   1e8b0:	cmp	r3, #0
   1e8b4:	beq	1e88c <__assert_fail@plt+0xced0>
   1e8b8:	b	1e76c <__assert_fail@plt+0xcdb0>
   1e8bc:	cmp	r0, #0
   1e8c0:	beq	1e6e0 <__assert_fail@plt+0xcd24>
   1e8c4:	b	1e88c <__assert_fail@plt+0xced0>
   1e8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8cc:	sub	sp, sp, #20
   1e8d0:	mov	r9, r3
   1e8d4:	mov	r3, #8
   1e8d8:	mov	r8, r1
   1e8dc:	mov	r7, r2
   1e8e0:	add	r1, r2, #8
   1e8e4:	ldr	r5, [sp, #56]	; 0x38
   1e8e8:	mov	r4, r0
   1e8ec:	str	r9, [sp]
   1e8f0:	str	r5, [sp, #4]
   1e8f4:	str	r3, [sp, #8]
   1e8f8:	ldrd	r2, [r2]
   1e8fc:	bl	1e3d4 <__assert_fail@plt+0xca18>
   1e900:	subs	fp, r0, #0
   1e904:	bne	1e940 <__assert_fail@plt+0xcf84>
   1e908:	ldrd	r2, [r4, #108]	; 0x6c
   1e90c:	ldr	sl, [r8]
   1e910:	ldr	r6, [r7, #4]
   1e914:	cmp	r2, r3
   1e918:	blt	1e978 <__assert_fail@plt+0xcfbc>
   1e91c:	mov	r1, #48	; 0x30
   1e920:	ldr	r0, [r4, #116]	; 0x74
   1e924:	mul	r1, r1, r3
   1e928:	bl	188bc <__assert_fail@plt+0x6f00>
   1e92c:	subs	r3, r0, #0
   1e930:	bne	1e94c <__assert_fail@plt+0xcf90>
   1e934:	ldr	r0, [r4, #116]	; 0x74
   1e938:	mov	fp, #12
   1e93c:	bl	18758 <__assert_fail@plt+0x6d9c>
   1e940:	mov	r0, fp
   1e944:	add	sp, sp, #20
   1e948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e94c:	ldr	ip, [r4, #108]	; 0x6c
   1e950:	mov	r0, #24
   1e954:	mov	r1, fp
   1e958:	str	r3, [r4, #116]	; 0x74
   1e95c:	ldr	r2, [r4, #112]	; 0x70
   1e960:	mul	r2, r0, r2
   1e964:	mla	r0, r0, ip, r3
   1e968:	bl	11818 <memset@plt>
   1e96c:	ldr	r3, [r4, #112]	; 0x70
   1e970:	lsl	r3, r3, #1
   1e974:	str	r3, [r4, #112]	; 0x70
   1e978:	ldr	r2, [r4, #108]	; 0x6c
   1e97c:	mov	r1, #24
   1e980:	ldr	r0, [r4, #116]	; 0x74
   1e984:	cmp	r2, #0
   1e988:	mul	r1, r1, r2
   1e98c:	ble	1e9a8 <__assert_fail@plt+0xcfec>
   1e990:	sub	r3, r1, #24
   1e994:	add	r3, r0, r3
   1e998:	ldr	ip, [r3, #4]
   1e99c:	cmp	r5, ip
   1e9a0:	moveq	ip, #1
   1e9a4:	strbeq	ip, [r3, #20]
   1e9a8:	cmp	sl, r6
   1e9ac:	add	r3, r0, r1
   1e9b0:	str	r9, [r0, r1]
   1e9b4:	add	r2, r2, #1
   1e9b8:	movne	r1, #0
   1e9bc:	mvneq	r1, #0
   1e9c0:	stmib	r3, {r5, sl}
   1e9c4:	mov	r0, r4
   1e9c8:	str	r6, [r3, #12]
   1e9cc:	sub	r6, r6, sl
   1e9d0:	str	r1, [r3, #16]
   1e9d4:	str	r2, [r4, #108]	; 0x6c
   1e9d8:	mov	r2, #0
   1e9dc:	strb	r2, [r3, #20]
   1e9e0:	ldr	r3, [r4, #120]	; 0x78
   1e9e4:	ldr	r1, [r7, #4]
   1e9e8:	cmp	r3, r6
   1e9ec:	add	r5, r5, r1
   1e9f0:	strlt	r6, [r4, #120]	; 0x78
   1e9f4:	ldr	r1, [r8]
   1e9f8:	sub	r1, r5, r1
   1e9fc:	add	sp, sp, #20
   1ea00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea04:	b	1a1f4 <__assert_fail@plt+0x8838>
   1ea08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea0c:	sub	sp, sp, #84	; 0x54
   1ea10:	mov	r4, r0
   1ea14:	ldr	r9, [r0, #40]	; 0x28
   1ea18:	str	r1, [sp, #56]	; 0x38
   1ea1c:	ldr	sl, [r0, #84]	; 0x54
   1ea20:	lsl	r3, r9, #2
   1ea24:	str	r3, [sp, #44]	; 0x2c
   1ea28:	mov	r3, #0
   1ea2c:	str	r3, [sp, #20]
   1ea30:	ldr	r2, [sp, #20]
   1ea34:	ldr	r3, [sp, #56]	; 0x38
   1ea38:	ldr	r3, [r3, #4]
   1ea3c:	cmp	r3, r2
   1ea40:	movle	r3, #0
   1ea44:	ble	1ee9c <__assert_fail@plt+0xd4e0>
   1ea48:	ldr	r2, [sp, #20]
   1ea4c:	ldr	r3, [sp, #56]	; 0x38
   1ea50:	ldr	r3, [r3, #8]
   1ea54:	ldr	r3, [r3, r2, lsl #2]
   1ea58:	str	r3, [sp, #16]
   1ea5c:	ldr	r3, [sl]
   1ea60:	ldr	r2, [sp, #16]
   1ea64:	add	r3, r3, r2, lsl #3
   1ea68:	ldrb	r2, [r3, #4]
   1ea6c:	cmp	r2, #4
   1ea70:	beq	1ea80 <__assert_fail@plt+0xd0c4>
   1ea74:	ldr	r3, [sp, #20]
   1ea78:	add	r3, r3, #1
   1ea7c:	b	1ea2c <__assert_fail@plt+0xd070>
   1ea80:	ldr	r5, [r3, #4]
   1ea84:	ldr	r3, [pc, #1400]	; 1f004 <__assert_fail@plt+0xd648>
   1ea88:	and	r3, r3, r5
   1ea8c:	cmp	r3, #0
   1ea90:	beq	1eae8 <__assert_fail@plt+0xd12c>
   1ea94:	mov	r1, r9
   1ea98:	mov	r0, r4
   1ea9c:	ldr	r2, [r4, #88]	; 0x58
   1eaa0:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1eaa4:	ubfx	r3, r5, #8, #10
   1eaa8:	tst	r3, #4
   1eaac:	beq	1eab8 <__assert_fail@plt+0xd0fc>
   1eab0:	tst	r0, #1
   1eab4:	beq	1ea74 <__assert_fail@plt+0xd0b8>
   1eab8:	tst	r3, #8
   1eabc:	beq	1eac8 <__assert_fail@plt+0xd10c>
   1eac0:	tst	r0, #1
   1eac4:	bne	1ea74 <__assert_fail@plt+0xd0b8>
   1eac8:	tst	r3, #32
   1eacc:	beq	1ead8 <__assert_fail@plt+0xd11c>
   1ead0:	tst	r0, #2
   1ead4:	beq	1ea74 <__assert_fail@plt+0xd0b8>
   1ead8:	tst	r3, #128	; 0x80
   1eadc:	beq	1eae8 <__assert_fail@plt+0xd12c>
   1eae0:	tst	r0, #8
   1eae4:	beq	1ea74 <__assert_fail@plt+0xd0b8>
   1eae8:	ldr	r3, [r4, #108]	; 0x6c
   1eaec:	mov	r1, r9
   1eaf0:	mov	r0, r4
   1eaf4:	str	r3, [sp, #24]
   1eaf8:	bl	18f38 <__assert_fail@plt+0x757c>
   1eafc:	cmn	r0, #1
   1eb00:	beq	1eb98 <__assert_fail@plt+0xd1dc>
   1eb04:	mov	r3, #24
   1eb08:	mla	r3, r0, r3, r3
   1eb0c:	ldr	r0, [r4, #116]	; 0x74
   1eb10:	add	r0, r0, r3
   1eb14:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1eb18:	ldr	r2, [sp, #16]
   1eb1c:	cmp	r2, r3
   1eb20:	bne	1eb88 <__assert_fail@plt+0xd1cc>
   1eb24:	mov	r3, #0
   1eb28:	ldr	r2, [sp, #16]
   1eb2c:	str	r3, [sp, #64]	; 0x40
   1eb30:	ldr	r3, [sp, #16]
   1eb34:	lsl	r3, r3, #2
   1eb38:	str	r3, [sp, #28]
   1eb3c:	mov	r3, #12
   1eb40:	mul	fp, r3, r2
   1eb44:	ldr	r2, [sp, #24]
   1eb48:	ldr	r3, [r4, #108]	; 0x6c
   1eb4c:	cmp	r3, r2
   1eb50:	ble	1ea74 <__assert_fail@plt+0xd0b8>
   1eb54:	ldr	r2, [sp, #24]
   1eb58:	mov	r3, #24
   1eb5c:	ldr	r1, [r4, #116]	; 0x74
   1eb60:	mul	r3, r3, r2
   1eb64:	add	r2, r1, r3
   1eb68:	ldr	r3, [r1, r3]
   1eb6c:	ldr	r1, [sp, #16]
   1eb70:	cmp	r3, r1
   1eb74:	beq	1eea4 <__assert_fail@plt+0xd4e8>
   1eb78:	ldr	r3, [sp, #24]
   1eb7c:	add	r3, r3, #1
   1eb80:	str	r3, [sp, #24]
   1eb84:	b	1eb44 <__assert_fail@plt+0xd188>
   1eb88:	add	r0, r0, #24
   1eb8c:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   1eb90:	cmp	r3, #0
   1eb94:	bne	1eb14 <__assert_fail@plt+0xd158>
   1eb98:	ldr	r2, [sp, #16]
   1eb9c:	ldr	r3, [r4, #84]	; 0x54
   1eba0:	ldr	r7, [r4, #4]
   1eba4:	str	r3, [sp, #36]	; 0x24
   1eba8:	ldr	r3, [r3]
   1ebac:	ldr	r3, [r3, r2, lsl #3]
   1ebb0:	str	r3, [sp, #48]	; 0x30
   1ebb4:	mov	r3, #0
   1ebb8:	str	r3, [sp, #28]
   1ebbc:	ldr	r2, [sp, #28]
   1ebc0:	ldr	r3, [r4, #124]	; 0x7c
   1ebc4:	cmp	r2, r3
   1ebc8:	bge	1eb24 <__assert_fail@plt+0xd168>
   1ebcc:	ldr	r2, [sp, #28]
   1ebd0:	ldr	r3, [r4, #132]	; 0x84
   1ebd4:	ldr	r5, [r3, r2, lsl #2]
   1ebd8:	ldr	r3, [sp, #36]	; 0x24
   1ebdc:	ldr	r2, [r5, #4]
   1ebe0:	ldr	r3, [r3]
   1ebe4:	ldr	r3, [r3, r2, lsl #3]
   1ebe8:	ldr	r2, [sp, #48]	; 0x30
   1ebec:	cmp	r2, r3
   1ebf0:	moveq	fp, r9
   1ebf4:	moveq	r8, #0
   1ebf8:	ldreq	r6, [r5]
   1ebfc:	beq	1ed40 <__assert_fail@plt+0xd384>
   1ec00:	ldr	r3, [sp, #28]
   1ec04:	add	r3, r3, #1
   1ec08:	b	1ebb8 <__assert_fail@plt+0xd1fc>
   1ec0c:	ldr	r3, [r4, #28]
   1ec10:	add	r1, r2, fp
   1ec14:	cmp	r3, r1
   1ec18:	bge	1ec4c <__assert_fail@plt+0xd290>
   1ec1c:	str	r2, [sp, #60]	; 0x3c
   1ec20:	ldr	r2, [sp, #32]
   1ec24:	ldr	r3, [r4, #48]	; 0x30
   1ec28:	cmp	r3, r2
   1ec2c:	blt	1ec60 <__assert_fail@plt+0xd2a4>
   1ec30:	mov	r1, r2
   1ec34:	mov	r0, r4
   1ec38:	bl	1a1f4 <__assert_fail@plt+0x8838>
   1ec3c:	cmp	r0, #0
   1ec40:	bne	1ed98 <__assert_fail@plt+0xd3dc>
   1ec44:	ldr	r7, [r4, #4]
   1ec48:	ldr	r2, [sp, #60]	; 0x3c
   1ec4c:	add	r1, r7, r6
   1ec50:	add	r0, r7, fp
   1ec54:	bl	1162c <memcmp@plt>
   1ec58:	cmp	r0, #0
   1ec5c:	beq	1ed74 <__assert_fail@plt+0xd3b8>
   1ec60:	ldr	r3, [r5, #16]
   1ec64:	cmp	r8, r3
   1ec68:	blt	1ec00 <__assert_fail@plt+0xd244>
   1ec6c:	cmp	r8, #0
   1ec70:	ble	1ec78 <__assert_fail@plt+0xd2bc>
   1ec74:	add	r6, r6, #1
   1ec78:	cmp	r9, r6
   1ec7c:	blt	1ec00 <__assert_fail@plt+0xd244>
   1ec80:	ldr	r3, [r5]
   1ec84:	sub	r3, r6, r3
   1ec88:	cmp	r3, #0
   1ec8c:	ble	1ecdc <__assert_fail@plt+0xd320>
   1ec90:	ldr	r3, [r4, #28]
   1ec94:	cmp	r3, fp
   1ec98:	bgt	1ecc0 <__assert_fail@plt+0xd304>
   1ec9c:	ldr	r3, [r4, #48]	; 0x30
   1eca0:	cmp	fp, r3
   1eca4:	bge	1ec00 <__assert_fail@plt+0xd244>
   1eca8:	add	r1, fp, #1
   1ecac:	mov	r0, r4
   1ecb0:	bl	19b60 <__assert_fail@plt+0x81a4>
   1ecb4:	cmp	r0, #0
   1ecb8:	bne	1ed98 <__assert_fail@plt+0xd3dc>
   1ecbc:	ldr	r7, [r4, #4]
   1ecc0:	add	r3, r7, r6
   1ecc4:	add	r2, fp, #1
   1ecc8:	ldrb	r1, [r7, fp]
   1eccc:	ldrb	r3, [r3, #-1]
   1ecd0:	cmp	r1, r3
   1ecd4:	bne	1ec00 <__assert_fail@plt+0xd244>
   1ecd8:	mov	fp, r2
   1ecdc:	ldr	r3, [r4, #100]	; 0x64
   1ece0:	ldr	r2, [r3, r6, lsl #2]
   1ece4:	cmp	r2, #0
   1ece8:	movne	r3, #0
   1ecec:	ldrne	r0, [r2, #8]
   1ecf0:	beq	1ec74 <__assert_fail@plt+0xd2b8>
   1ecf4:	cmp	r3, r0
   1ecf8:	bge	1ec74 <__assert_fail@plt+0xd2b8>
   1ecfc:	ldr	r1, [r2, #12]
   1ed00:	ldr	r8, [r1, r3, lsl #2]
   1ed04:	ldr	r1, [sp, #36]	; 0x24
   1ed08:	ldr	r1, [r1]
   1ed0c:	add	ip, r1, r8, lsl #3
   1ed10:	ldrb	ip, [ip, #4]
   1ed14:	cmp	ip, #9
   1ed18:	bne	1ed2c <__assert_fail@plt+0xd370>
   1ed1c:	ldr	r1, [r1, r8, lsl #3]
   1ed20:	ldr	ip, [sp, #48]	; 0x30
   1ed24:	cmp	ip, r1
   1ed28:	beq	1eda8 <__assert_fail@plt+0xd3ec>
   1ed2c:	add	r3, r3, #1
   1ed30:	b	1ecf4 <__assert_fail@plt+0xd338>
   1ed34:	ldr	fp, [sp, #32]
   1ed38:	add	r8, r8, #1
   1ed3c:	ldr	r6, [sp, #40]	; 0x28
   1ed40:	ldr	r3, [r5, #16]
   1ed44:	cmp	r8, r3
   1ed48:	bge	1ec60 <__assert_fail@plt+0xd2a4>
   1ed4c:	ldr	r3, [r5, #20]
   1ed50:	ldr	r3, [r3, r8, lsl #2]
   1ed54:	str	r3, [sp, #52]	; 0x34
   1ed58:	ldr	r3, [r3, #4]
   1ed5c:	sub	r2, r3, r6
   1ed60:	str	r3, [sp, #40]	; 0x28
   1ed64:	add	r3, r2, fp
   1ed68:	cmp	r2, #0
   1ed6c:	str	r3, [sp, #32]
   1ed70:	bgt	1ec0c <__assert_fail@plt+0xd250>
   1ed74:	mov	r1, r5
   1ed78:	mov	r0, r4
   1ed7c:	str	r9, [sp]
   1ed80:	ldr	r3, [sp, #16]
   1ed84:	ldr	r2, [sp, #52]	; 0x34
   1ed88:	bl	1e8c8 <__assert_fail@plt+0xcf0c>
   1ed8c:	cmp	r0, #1
   1ed90:	ldr	r7, [r4, #4]
   1ed94:	bls	1ed34 <__assert_fail@plt+0xd378>
   1ed98:	str	r0, [sp, #64]	; 0x40
   1ed9c:	ldr	r0, [sp, #64]	; 0x40
   1eda0:	add	sp, sp, #84	; 0x54
   1eda4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eda8:	cmn	r8, #1
   1edac:	beq	1ec74 <__assert_fail@plt+0xd2b8>
   1edb0:	ldr	r3, [r5, #8]
   1edb4:	cmp	r3, #0
   1edb8:	beq	1ee78 <__assert_fail@plt+0xd4bc>
   1edbc:	mov	r3, #9
   1edc0:	mov	r0, r4
   1edc4:	str	r8, [sp]
   1edc8:	str	r6, [sp, #4]
   1edcc:	str	r3, [sp, #8]
   1edd0:	ldr	r3, [r5]
   1edd4:	ldr	r2, [r5, #4]
   1edd8:	ldr	r1, [r5, #8]
   1eddc:	bl	1e3d4 <__assert_fail@plt+0xca18>
   1ede0:	cmp	r0, #1
   1ede4:	beq	1ec74 <__assert_fail@plt+0xd2b8>
   1ede8:	cmp	r0, #0
   1edec:	bne	1ed98 <__assert_fail@plt+0xd3dc>
   1edf0:	ldr	r3, [r5, #12]
   1edf4:	ldr	r7, [r5, #16]
   1edf8:	cmp	r7, r3
   1edfc:	bne	1ee24 <__assert_fail@plt+0xd468>
   1ee00:	lsl	r7, r7, #1
   1ee04:	ldr	r0, [r5, #20]
   1ee08:	add	r7, r7, #1
   1ee0c:	lsl	r1, r7, #2
   1ee10:	bl	188bc <__assert_fail@plt+0x6f00>
   1ee14:	cmp	r0, #0
   1ee18:	beq	1ee98 <__assert_fail@plt+0xd4dc>
   1ee1c:	str	r7, [r5, #12]
   1ee20:	str	r0, [r5, #20]
   1ee24:	mov	r1, #20
   1ee28:	mov	r0, #1
   1ee2c:	bl	18504 <__assert_fail@plt+0x6b48>
   1ee30:	subs	r2, r0, #0
   1ee34:	beq	1ee98 <__assert_fail@plt+0xd4dc>
   1ee38:	ldr	r3, [r5, #16]
   1ee3c:	mov	r0, r4
   1ee40:	ldr	r1, [r5, #20]
   1ee44:	str	r2, [r1, r3, lsl #2]
   1ee48:	add	r3, r3, #1
   1ee4c:	mov	r1, r5
   1ee50:	str	r8, [r2]
   1ee54:	str	r6, [r2, #4]
   1ee58:	str	r3, [r5, #16]
   1ee5c:	str	r9, [sp]
   1ee60:	ldr	r3, [sp, #16]
   1ee64:	bl	1e8c8 <__assert_fail@plt+0xcf0c>
   1ee68:	cmp	r0, #1
   1ee6c:	ldr	r7, [r4, #4]
   1ee70:	bls	1ec74 <__assert_fail@plt+0xd2b8>
   1ee74:	b	1ed98 <__assert_fail@plt+0xd3dc>
   1ee78:	ldr	r1, [r5]
   1ee7c:	mov	r0, #12
   1ee80:	sub	r1, r6, r1
   1ee84:	add	r1, r1, #1
   1ee88:	bl	18504 <__assert_fail@plt+0x6b48>
   1ee8c:	cmp	r0, #0
   1ee90:	str	r0, [r5, #8]
   1ee94:	bne	1edbc <__assert_fail@plt+0xd400>
   1ee98:	mov	r3, #12
   1ee9c:	str	r3, [sp, #64]	; 0x40
   1eea0:	b	1ed9c <__assert_fail@plt+0xd3e0>
   1eea4:	ldr	r3, [r2, #4]
   1eea8:	cmp	r3, r9
   1eeac:	bne	1eb78 <__assert_fail@plt+0xd1bc>
   1eeb0:	ldr	r3, [r2, #8]
   1eeb4:	mov	r0, r4
   1eeb8:	ldr	r5, [r2, #12]
   1eebc:	ldr	r6, [sl, #24]
   1eec0:	subs	r2, r5, r3
   1eec4:	add	r5, r5, r9
   1eec8:	ldrne	r1, [sp, #28]
   1eecc:	sub	r5, r5, r3
   1eed0:	str	r2, [sp, #32]
   1eed4:	ldreq	r2, [sl, #20]
   1eed8:	ldrne	r2, [sl, #12]
   1eedc:	addeq	r2, r2, fp
   1eee0:	ldreq	r2, [r2, #8]
   1eee4:	ldrne	r2, [r2, r1]
   1eee8:	mov	r1, #12
   1eeec:	ldreq	r2, [r2]
   1eef0:	mla	r6, r1, r2, r6
   1eef4:	sub	r1, r5, #1
   1eef8:	ldr	r2, [r4, #88]	; 0x58
   1eefc:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1ef00:	ldr	r2, [sp, #44]	; 0x2c
   1ef04:	mov	r3, r0
   1ef08:	ldr	r8, [r4, #100]	; 0x64
   1ef0c:	ldr	r7, [r8, r2]
   1ef10:	ldr	r1, [r8, r5, lsl #2]
   1ef14:	cmp	r7, #0
   1ef18:	ldrne	r7, [r7, #8]
   1ef1c:	cmp	r1, #0
   1ef20:	bne	1efb0 <__assert_fail@plt+0xd5f4>
   1ef24:	mov	r2, r6
   1ef28:	mov	r1, sl
   1ef2c:	add	r0, sp, #64	; 0x40
   1ef30:	bl	1b620 <__assert_fail@plt+0x9c64>
   1ef34:	str	r0, [r8, r5, lsl #2]
   1ef38:	ldr	r3, [r4, #100]	; 0x64
   1ef3c:	ldr	r3, [r3, r5, lsl #2]
   1ef40:	cmp	r3, #0
   1ef44:	bne	1ef54 <__assert_fail@plt+0xd598>
   1ef48:	ldr	r3, [sp, #64]	; 0x40
   1ef4c:	cmp	r3, #0
   1ef50:	bne	1ed9c <__assert_fail@plt+0xd3e0>
   1ef54:	ldr	r3, [sp, #32]
   1ef58:	cmp	r3, #0
   1ef5c:	bne	1eb78 <__assert_fail@plt+0xd1bc>
   1ef60:	ldr	r2, [sp, #44]	; 0x2c
   1ef64:	ldr	r3, [r4, #100]	; 0x64
   1ef68:	ldr	r3, [r3, r2]
   1ef6c:	ldr	r3, [r3, #8]
   1ef70:	cmp	r3, r7
   1ef74:	ble	1eb78 <__assert_fail@plt+0xd1bc>
   1ef78:	mov	r2, r9
   1ef7c:	mov	r1, r6
   1ef80:	mov	r0, r4
   1ef84:	bl	1a114 <__assert_fail@plt+0x8758>
   1ef88:	cmp	r0, #0
   1ef8c:	str	r0, [sp, #64]	; 0x40
   1ef90:	bne	1ed9c <__assert_fail@plt+0xd3e0>
   1ef94:	mov	r1, r6
   1ef98:	mov	r0, r4
   1ef9c:	bl	1ea08 <__assert_fail@plt+0xd04c>
   1efa0:	cmp	r0, #0
   1efa4:	str	r0, [sp, #64]	; 0x40
   1efa8:	beq	1eb78 <__assert_fail@plt+0xd1bc>
   1efac:	b	1ed9c <__assert_fail@plt+0xd3e0>
   1efb0:	mov	r2, r6
   1efb4:	add	r0, sp, #68	; 0x44
   1efb8:	ldr	r1, [r1, #40]	; 0x28
   1efbc:	str	r3, [sp, #36]	; 0x24
   1efc0:	bl	1b4e0 <__assert_fail@plt+0x9b24>
   1efc4:	cmp	r0, #0
   1efc8:	str	r0, [sp, #64]	; 0x40
   1efcc:	ldr	r3, [sp, #36]	; 0x24
   1efd0:	beq	1efe0 <__assert_fail@plt+0xd624>
   1efd4:	ldr	r0, [sp, #76]	; 0x4c
   1efd8:	bl	18758 <__assert_fail@plt+0x6d9c>
   1efdc:	b	1ed9c <__assert_fail@plt+0xd3e0>
   1efe0:	ldr	r8, [r4, #100]	; 0x64
   1efe4:	add	r2, sp, #68	; 0x44
   1efe8:	mov	r1, sl
   1efec:	add	r0, sp, #64	; 0x40
   1eff0:	bl	1b620 <__assert_fail@plt+0x9c64>
   1eff4:	str	r0, [r8, r5, lsl #2]
   1eff8:	ldr	r0, [sp, #76]	; 0x4c
   1effc:	bl	18758 <__assert_fail@plt+0x6d9c>
   1f000:	b	1ef38 <__assert_fail@plt+0xd57c>
   1f004:	andeq	pc, r3, r0, lsl #30
   1f008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f00c:	mov	r4, r2
   1f010:	sub	sp, sp, #20
   1f014:	mov	r8, r0
   1f018:	mov	r5, r1
   1f01c:	ldr	r6, [r1, #40]	; 0x28
   1f020:	ldr	sl, [r1, #84]	; 0x54
   1f024:	ldr	r2, [r1, #104]	; 0x68
   1f028:	ldr	r3, [r1, #100]	; 0x64
   1f02c:	cmp	r2, r6
   1f030:	strlt	r4, [r3, r6, lsl #2]
   1f034:	strlt	r6, [r1, #104]	; 0x68
   1f038:	blt	1f0d8 <__assert_fail@plt+0xd71c>
   1f03c:	ldr	r2, [r3, r6, lsl #2]
   1f040:	cmp	r2, #0
   1f044:	streq	r4, [r3, r6, lsl #2]
   1f048:	beq	1f0d8 <__assert_fail@plt+0xd71c>
   1f04c:	cmp	r4, #0
   1f050:	add	r7, sp, #4
   1f054:	ldr	r2, [r2, #40]	; 0x28
   1f058:	beq	1f088 <__assert_fail@plt+0xd6cc>
   1f05c:	ldr	r9, [r4, #40]	; 0x28
   1f060:	mov	r0, r7
   1f064:	mov	r1, r9
   1f068:	bl	1b4e0 <__assert_fail@plt+0x9b24>
   1f06c:	cmp	r0, #0
   1f070:	str	r0, [r8]
   1f074:	beq	1f094 <__assert_fail@plt+0xd6d8>
   1f078:	mov	r4, #0
   1f07c:	mov	r0, r4
   1f080:	add	sp, sp, #20
   1f084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f088:	ldm	r2, {r0, r1, r2}
   1f08c:	mov	r9, r4
   1f090:	stm	r7, {r0, r1, r2}
   1f094:	mov	r0, r5
   1f098:	ldr	r1, [r5, #40]	; 0x28
   1f09c:	ldr	r2, [r5, #88]	; 0x58
   1f0a0:	sub	r1, r1, #1
   1f0a4:	bl	1c4c0 <__assert_fail@plt+0xab04>
   1f0a8:	ldr	fp, [r5, #100]	; 0x64
   1f0ac:	mov	r3, r0
   1f0b0:	mov	r2, r7
   1f0b4:	mov	r1, sl
   1f0b8:	mov	r0, r8
   1f0bc:	bl	1b620 <__assert_fail@plt+0x9c64>
   1f0c0:	cmp	r9, #0
   1f0c4:	mov	r4, r0
   1f0c8:	str	r0, [fp, r6, lsl #2]
   1f0cc:	beq	1f0d8 <__assert_fail@plt+0xd71c>
   1f0d0:	ldr	r0, [sp, #12]
   1f0d4:	bl	18758 <__assert_fail@plt+0x6d9c>
   1f0d8:	ldr	r3, [sl, #76]	; 0x4c
   1f0dc:	cmp	r3, #0
   1f0e0:	beq	1f07c <__assert_fail@plt+0xd6c0>
   1f0e4:	cmp	r4, #0
   1f0e8:	beq	1f078 <__assert_fail@plt+0xd6bc>
   1f0ec:	add	r7, r4, #4
   1f0f0:	mov	r2, r6
   1f0f4:	mov	r1, r7
   1f0f8:	mov	r0, r5
   1f0fc:	bl	1a114 <__assert_fail@plt+0x8758>
   1f100:	cmp	r0, #0
   1f104:	str	r0, [r8]
   1f108:	bne	1f078 <__assert_fail@plt+0xd6bc>
   1f10c:	ldrb	r3, [r4, #52]	; 0x34
   1f110:	tst	r3, #64	; 0x40
   1f114:	beq	1f07c <__assert_fail@plt+0xd6c0>
   1f118:	mov	r1, r7
   1f11c:	mov	r0, r5
   1f120:	bl	1ea08 <__assert_fail@plt+0xd04c>
   1f124:	cmp	r0, #0
   1f128:	str	r0, [r8]
   1f12c:	bne	1f078 <__assert_fail@plt+0xd6bc>
   1f130:	ldr	r3, [r5, #100]	; 0x64
   1f134:	ldr	r4, [r3, r6, lsl #2]
   1f138:	b	1f07c <__assert_fail@plt+0xd6c0>
   1f13c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f140:	mov	r4, r3
   1f144:	sub	sp, sp, #84	; 0x54
   1f148:	mov	r3, #0
   1f14c:	mov	r5, r2
   1f150:	mov	r7, r0
   1f154:	mov	r6, r1
   1f158:	str	r3, [sp, #48]	; 0x30
   1f15c:	lsl	r3, r2, #2
   1f160:	ldr	r8, [r0, #84]	; 0x54
   1f164:	str	r3, [sp, #24]
   1f168:	ldr	r3, [r0, #100]	; 0x64
   1f16c:	ldr	fp, [r3, r2, lsl #2]
   1f170:	ldr	r3, [r4, #4]
   1f174:	cmp	fp, #0
   1f178:	addne	fp, fp, #4
   1f17c:	cmp	r3, #0
   1f180:	ldreq	r2, [r1]
   1f184:	streq	r3, [r2, r5, lsl #2]
   1f188:	beq	1f480 <__assert_fail@plt+0xdac4>
   1f18c:	cmp	fp, #0
   1f190:	bne	1f1c4 <__assert_fail@plt+0xd808>
   1f194:	mov	r2, r4
   1f198:	mov	r1, r8
   1f19c:	ldr	r9, [r6]
   1f1a0:	add	r0, sp, #48	; 0x30
   1f1a4:	bl	1df94 <__assert_fail@plt+0xc5d8>
   1f1a8:	ldr	r3, [sp, #48]	; 0x30
   1f1ac:	str	r0, [r9, r5, lsl #2]
   1f1b0:	cmp	r3, #0
   1f1b4:	beq	1f480 <__assert_fail@plt+0xdac4>
   1f1b8:	mov	r0, r3
   1f1bc:	add	sp, sp, #84	; 0x54
   1f1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1c4:	mov	r3, #0
   1f1c8:	mov	r2, r4
   1f1cc:	mov	r1, r8
   1f1d0:	add	r0, sp, #52	; 0x34
   1f1d4:	str	r3, [sp, #52]	; 0x34
   1f1d8:	bl	1df94 <__assert_fail@plt+0xc5d8>
   1f1dc:	ldr	r3, [sp, #52]	; 0x34
   1f1e0:	cmp	r3, #0
   1f1e4:	bne	1f20c <__assert_fail@plt+0xd850>
   1f1e8:	ldr	r3, [r0, #28]
   1f1ec:	add	sl, r0, #28
   1f1f0:	cmp	r3, #0
   1f1f4:	beq	1f248 <__assert_fail@plt+0xd88c>
   1f1f8:	mov	r2, sl
   1f1fc:	mov	r1, fp
   1f200:	mov	r0, r4
   1f204:	bl	1b894 <__assert_fail@plt+0x9ed8>
   1f208:	mov	r3, r0
   1f20c:	cmp	r3, #0
   1f210:	str	r3, [sp, #48]	; 0x30
   1f214:	bne	1f1b8 <__assert_fail@plt+0xd7fc>
   1f218:	ldr	r2, [r6, #20]
   1f21c:	cmp	r2, #0
   1f220:	ldrne	r2, [r7, #116]	; 0x74
   1f224:	strne	r2, [sp, #16]
   1f228:	beq	1f194 <__assert_fail@plt+0xd7d8>
   1f22c:	str	r3, [sp, #12]
   1f230:	ldr	r2, [sp, #12]
   1f234:	ldr	r3, [r6, #20]
   1f238:	cmp	r2, r3
   1f23c:	blt	1f2a8 <__assert_fail@plt+0xd8ec>
   1f240:	mov	r3, #0
   1f244:	b	1f394 <__assert_fail@plt+0xd9d8>
   1f248:	mov	r0, sl
   1f24c:	ldr	r1, [r4, #4]
   1f250:	bl	194b0 <__assert_fail@plt+0x7af4>
   1f254:	cmp	r0, #0
   1f258:	mov	r9, r0
   1f25c:	str	r0, [sp, #52]	; 0x34
   1f260:	movne	r3, #12
   1f264:	bne	1f1b8 <__assert_fail@plt+0xd7fc>
   1f268:	ldr	r3, [r4, #4]
   1f26c:	mov	r2, #12
   1f270:	cmp	r9, r3
   1f274:	bge	1f1f8 <__assert_fail@plt+0xd83c>
   1f278:	ldr	r3, [r4, #8]
   1f27c:	mov	r0, sl
   1f280:	ldr	r1, [r3, r9, lsl #2]
   1f284:	ldr	r3, [r8, #28]
   1f288:	mla	r1, r2, r1, r3
   1f28c:	bl	1c174 <__assert_fail@plt+0xa7b8>
   1f290:	cmp	r0, #0
   1f294:	str	r0, [sp, #52]	; 0x34
   1f298:	addeq	r9, r9, #1
   1f29c:	beq	1f268 <__assert_fail@plt+0xd8ac>
   1f2a0:	mov	r3, #12
   1f2a4:	b	1f20c <__assert_fail@plt+0xd850>
   1f2a8:	ldr	r2, [sp, #12]
   1f2ac:	ldr	r3, [r6, #24]
   1f2b0:	ldr	r3, [r3, r2, lsl #2]
   1f2b4:	mov	r2, #24
   1f2b8:	mul	r3, r2, r3
   1f2bc:	ldr	r2, [sp, #16]
   1f2c0:	add	r2, r2, r3
   1f2c4:	ldr	r1, [r2, #8]
   1f2c8:	cmp	r5, r1
   1f2cc:	bgt	1f2dc <__assert_fail@plt+0xd920>
   1f2d0:	ldr	r3, [sp, #12]
   1f2d4:	add	r3, r3, #1
   1f2d8:	b	1f22c <__assert_fail@plt+0xd870>
   1f2dc:	ldr	r1, [r2, #4]
   1f2e0:	cmp	r5, r1
   1f2e4:	bgt	1f2d0 <__assert_fail@plt+0xd914>
   1f2e8:	ldr	r1, [sp, #16]
   1f2ec:	ldr	r0, [r8]
   1f2f0:	ldr	r3, [r1, r3]
   1f2f4:	ldr	r9, [r0, r3, lsl #3]
   1f2f8:	ldr	r3, [r2, #12]
   1f2fc:	cmp	r5, r3
   1f300:	movne	sl, #0
   1f304:	bne	1f448 <__assert_fail@plt+0xda8c>
   1f308:	ldr	lr, [r4, #4]
   1f30c:	mvn	sl, #0
   1f310:	mov	r2, #0
   1f314:	mov	r1, sl
   1f318:	cmp	r2, lr
   1f31c:	blt	1f338 <__assert_fail@plt+0xd97c>
   1f320:	cmp	r1, #0
   1f324:	bge	1f37c <__assert_fail@plt+0xd9c0>
   1f328:	cmp	sl, #0
   1f32c:	blt	1f2d0 <__assert_fail@plt+0xd914>
   1f330:	mov	r9, #0
   1f334:	b	1f414 <__assert_fail@plt+0xda58>
   1f338:	ldr	r3, [r4, #8]
   1f33c:	ldr	r3, [r3, r2, lsl #2]
   1f340:	add	ip, r0, r3, lsl #3
   1f344:	ldrb	ip, [ip, #4]
   1f348:	cmp	ip, #8
   1f34c:	bne	1f364 <__assert_fail@plt+0xd9a8>
   1f350:	ldr	ip, [r0, r3, lsl #3]
   1f354:	cmp	r9, ip
   1f358:	moveq	r1, r3
   1f35c:	add	r2, r2, #1
   1f360:	b	1f318 <__assert_fail@plt+0xd95c>
   1f364:	cmp	ip, #9
   1f368:	bne	1f35c <__assert_fail@plt+0xd9a0>
   1f36c:	ldr	ip, [r0, r3, lsl #3]
   1f370:	cmp	r9, ip
   1f374:	moveq	sl, r3
   1f378:	b	1f35c <__assert_fail@plt+0xd9a0>
   1f37c:	mov	r3, fp
   1f380:	mov	r2, r4
   1f384:	mov	r0, r8
   1f388:	bl	1b9f8 <__assert_fail@plt+0xa03c>
   1f38c:	subs	r3, r0, #0
   1f390:	beq	1f328 <__assert_fail@plt+0xd96c>
   1f394:	cmp	r3, #0
   1f398:	str	r3, [sp, #48]	; 0x30
   1f39c:	beq	1f194 <__assert_fail@plt+0xd7d8>
   1f3a0:	b	1f1b8 <__assert_fail@plt+0xd7fc>
   1f3a4:	ldr	r3, [r4, #8]
   1f3a8:	mov	r1, sl
   1f3ac:	ldr	r0, [r8, #28]
   1f3b0:	ldr	r3, [r3, r9, lsl #2]
   1f3b4:	str	r3, [sp, #20]
   1f3b8:	mov	r3, #12
   1f3bc:	ldr	r2, [sp, #20]
   1f3c0:	mul	r3, r3, r2
   1f3c4:	add	r0, r0, r3
   1f3c8:	str	r3, [sp, #28]
   1f3cc:	bl	18acc <__assert_fail@plt+0x7110>
   1f3d0:	cmp	r0, #0
   1f3d4:	bne	1f410 <__assert_fail@plt+0xda54>
   1f3d8:	ldr	r0, [r8, #24]
   1f3dc:	ldr	r3, [sp, #28]
   1f3e0:	add	r0, r0, r3
   1f3e4:	bl	18acc <__assert_fail@plt+0x7110>
   1f3e8:	cmp	r0, #0
   1f3ec:	bne	1f410 <__assert_fail@plt+0xda54>
   1f3f0:	mov	r3, fp
   1f3f4:	mov	r2, r4
   1f3f8:	ldr	r1, [sp, #20]
   1f3fc:	mov	r0, r8
   1f400:	bl	1b9f8 <__assert_fail@plt+0xa03c>
   1f404:	subs	r3, r0, #0
   1f408:	bne	1f394 <__assert_fail@plt+0xd9d8>
   1f40c:	sub	r9, r9, #1
   1f410:	add	r9, r9, #1
   1f414:	ldr	r3, [r4, #4]
   1f418:	cmp	r9, r3
   1f41c:	blt	1f3a4 <__assert_fail@plt+0xd9e8>
   1f420:	b	1f2d0 <__assert_fail@plt+0xd914>
   1f424:	ldr	r3, [r4, #8]
   1f428:	ldr	r2, [r8]
   1f42c:	ldr	r1, [r3, sl, lsl #2]
   1f430:	add	r3, r2, r1, lsl #3
   1f434:	ldrb	r3, [r3, #4]
   1f438:	sub	r3, r3, #8
   1f43c:	cmp	r3, #1
   1f440:	bls	1f458 <__assert_fail@plt+0xda9c>
   1f444:	add	sl, sl, #1
   1f448:	ldr	r3, [r4, #4]
   1f44c:	cmp	sl, r3
   1f450:	blt	1f424 <__assert_fail@plt+0xda68>
   1f454:	b	1f2d0 <__assert_fail@plt+0xd914>
   1f458:	ldr	r3, [r2, r1, lsl #3]
   1f45c:	cmp	r9, r3
   1f460:	bne	1f444 <__assert_fail@plt+0xda88>
   1f464:	mov	r3, fp
   1f468:	mov	r2, r4
   1f46c:	mov	r0, r8
   1f470:	bl	1b9f8 <__assert_fail@plt+0xa03c>
   1f474:	subs	r3, r0, #0
   1f478:	beq	1f444 <__assert_fail@plt+0xda88>
   1f47c:	b	1f394 <__assert_fail@plt+0xd9d8>
   1f480:	cmp	fp, #0
   1f484:	moveq	r3, fp
   1f488:	beq	1f1b8 <__assert_fail@plt+0xd7fc>
   1f48c:	ldr	r3, [r7, #100]	; 0x64
   1f490:	ldr	r3, [r3, r5, lsl #2]
   1f494:	ldrb	r3, [r3, #52]	; 0x34
   1f498:	ands	r3, r3, #64	; 0x40
   1f49c:	beq	1f1b8 <__assert_fail@plt+0xd7fc>
   1f4a0:	mov	r1, r5
   1f4a4:	mov	r0, r7
   1f4a8:	bl	18f38 <__assert_fail@plt+0x757c>
   1f4ac:	cmn	r0, #1
   1f4b0:	mov	r2, #0
   1f4b4:	str	r0, [sp, #16]
   1f4b8:	mov	r3, r0
   1f4bc:	moveq	r3, r2
   1f4c0:	beq	1f1b8 <__assert_fail@plt+0xd7fc>
   1f4c4:	ldr	r1, [sp, #16]
   1f4c8:	mov	r3, #24
   1f4cc:	str	r2, [sp, #12]
   1f4d0:	ldr	sl, [r7, #84]	; 0x54
   1f4d4:	str	r2, [sp, #52]	; 0x34
   1f4d8:	mul	r3, r3, r1
   1f4dc:	str	r3, [sp, #28]
   1f4e0:	add	r3, r6, #16
   1f4e4:	str	r3, [sp, #20]
   1f4e8:	ldr	r3, [fp, #4]
   1f4ec:	ldr	r2, [sp, #12]
   1f4f0:	cmp	r2, r3
   1f4f4:	movge	r3, #0
   1f4f8:	bge	1f634 <__assert_fail@plt+0xdc78>
   1f4fc:	ldr	r3, [fp, #8]
   1f500:	ldr	r2, [sp, #12]
   1f504:	ldr	r8, [r3, r2, lsl #2]
   1f508:	ldr	r3, [sl]
   1f50c:	ldr	r2, [r6, #8]
   1f510:	add	r3, r3, r8, lsl #3
   1f514:	cmp	r8, r2
   1f518:	ldrb	r3, [r3, #4]
   1f51c:	bne	1f53c <__assert_fail@plt+0xdb80>
   1f520:	ldr	r2, [r6, #12]
   1f524:	cmp	r5, r2
   1f528:	bne	1f53c <__assert_fail@plt+0xdb80>
   1f52c:	ldr	r3, [sp, #12]
   1f530:	add	r3, r3, #1
   1f534:	str	r3, [sp, #12]
   1f538:	b	1f4e8 <__assert_fail@plt+0xdb2c>
   1f53c:	cmp	r3, #4
   1f540:	bne	1f52c <__assert_fail@plt+0xdb70>
   1f544:	ldr	r4, [r7, #116]	; 0x74
   1f548:	ldr	r3, [sp, #28]
   1f54c:	ldr	r9, [sp, #16]
   1f550:	add	r4, r4, r3
   1f554:	mov	r3, #12
   1f558:	mul	r3, r3, r8
   1f55c:	str	r3, [sp, #36]	; 0x24
   1f560:	lsl	r3, r8, #2
   1f564:	str	r3, [sp, #32]
   1f568:	ldr	r3, [r4]
   1f56c:	cmp	r8, r3
   1f570:	bne	1f6e4 <__assert_fail@plt+0xdd28>
   1f574:	ldrd	r2, [r4, #8]
   1f578:	sub	r3, r3, r2
   1f57c:	cmp	r3, #0
   1f580:	add	r2, r5, r3
   1f584:	ldreq	r1, [sp, #36]	; 0x24
   1f588:	ldreq	r3, [sl, #20]
   1f58c:	ldrne	r1, [sp, #32]
   1f590:	ldrne	r3, [sl, #12]
   1f594:	addeq	r3, r3, r1
   1f598:	ldreq	r3, [r3, #8]
   1f59c:	ldrne	r3, [r3, r1]
   1f5a0:	ldr	r1, [r6, #12]
   1f5a4:	ldreq	r3, [r3]
   1f5a8:	cmp	r2, r1
   1f5ac:	bgt	1f6e4 <__assert_fail@plt+0xdd28>
   1f5b0:	ldr	r1, [r6]
   1f5b4:	str	r2, [sp, #44]	; 0x2c
   1f5b8:	ldr	r0, [r1, r2, lsl #2]
   1f5bc:	cmp	r0, #0
   1f5c0:	beq	1f6e4 <__assert_fail@plt+0xdd28>
   1f5c4:	mov	r1, r3
   1f5c8:	add	r0, r0, #4
   1f5cc:	str	r3, [sp, #40]	; 0x28
   1f5d0:	bl	18acc <__assert_fail@plt+0x7110>
   1f5d4:	cmp	r0, #0
   1f5d8:	beq	1f6e4 <__assert_fail@plt+0xdd28>
   1f5dc:	mov	r0, r7
   1f5e0:	ldr	r1, [sp, #20]
   1f5e4:	ldr	r3, [sp, #40]	; 0x28
   1f5e8:	ldr	r2, [sp, #44]	; 0x2c
   1f5ec:	str	r3, [sp]
   1f5f0:	mov	r3, r5
   1f5f4:	str	r2, [sp, #4]
   1f5f8:	mov	r2, r8
   1f5fc:	bl	18fa4 <__assert_fail@plt+0x75e8>
   1f600:	cmp	r0, #0
   1f604:	bne	1f6e4 <__assert_fail@plt+0xdd28>
   1f608:	ldr	r3, [sp, #52]	; 0x34
   1f60c:	cmp	r3, #0
   1f610:	beq	1f654 <__assert_fail@plt+0xdc98>
   1f614:	mov	r1, r9
   1f618:	add	r0, sp, #68	; 0x44
   1f61c:	str	r8, [sp, #60]	; 0x3c
   1f620:	str	r5, [sp, #64]	; 0x40
   1f624:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1f628:	cmp	r0, #0
   1f62c:	bne	1f688 <__assert_fail@plt+0xdccc>
   1f630:	mov	r3, #12
   1f634:	ldr	r2, [sp, #52]	; 0x34
   1f638:	cmp	r2, #0
   1f63c:	beq	1f1b8 <__assert_fail@plt+0xd7fc>
   1f640:	ldr	r0, [sp, #76]	; 0x4c
   1f644:	str	r3, [sp, #12]
   1f648:	bl	18758 <__assert_fail@plt+0x6d9c>
   1f64c:	ldr	r3, [sp, #12]
   1f650:	b	1f1b8 <__assert_fail@plt+0xd7fc>
   1f654:	mov	lr, r6
   1f658:	add	ip, sp, #52	; 0x34
   1f65c:	ldm	lr!, {r0, r1, r2, r3}
   1f660:	stmia	ip!, {r0, r1, r2, r3}
   1f664:	ldr	r3, [sp, #20]
   1f668:	ldm	r3, {r0, r1, r2}
   1f66c:	stm	ip, {r0, r1, r2}
   1f670:	mov	r1, r3
   1f674:	add	r0, sp, #68	; 0x44
   1f678:	bl	1b468 <__assert_fail@plt+0x9aac>
   1f67c:	subs	r3, r0, #0
   1f680:	beq	1f614 <__assert_fail@plt+0xdc58>
   1f684:	b	1f634 <__assert_fail@plt+0xdc78>
   1f688:	ldr	r2, [sp, #24]
   1f68c:	add	r1, sp, #52	; 0x34
   1f690:	mov	r0, r7
   1f694:	ldr	r3, [sp, #52]	; 0x34
   1f698:	ldr	r4, [r3, r2]
   1f69c:	bl	1f71c <__assert_fail@plt+0xdd60>
   1f6a0:	subs	r3, r0, #0
   1f6a4:	bne	1f634 <__assert_fail@plt+0xdc78>
   1f6a8:	ldr	r1, [r6, #4]
   1f6ac:	cmp	r1, #0
   1f6b0:	bne	1f700 <__assert_fail@plt+0xdd44>
   1f6b4:	ldr	r2, [sp, #24]
   1f6b8:	mov	r1, r9
   1f6bc:	add	r0, sp, #68	; 0x44
   1f6c0:	ldr	r3, [sp, #52]	; 0x34
   1f6c4:	str	r4, [r3, r2]
   1f6c8:	mov	r4, #24
   1f6cc:	bl	18acc <__assert_fail@plt+0x7110>
   1f6d0:	sub	r1, r0, #1
   1f6d4:	add	r0, sp, #68	; 0x44
   1f6d8:	bl	1b1fc <__assert_fail@plt+0x9840>
   1f6dc:	ldr	r3, [r7, #116]	; 0x74
   1f6e0:	mla	r4, r4, r9, r3
   1f6e4:	ldrb	r3, [r4, #20]
   1f6e8:	add	r9, r9, #1
   1f6ec:	add	r2, r4, #24
   1f6f0:	cmp	r3, #0
   1f6f4:	beq	1f52c <__assert_fail@plt+0xdb70>
   1f6f8:	mov	r4, r2
   1f6fc:	b	1f568 <__assert_fail@plt+0xdbac>
   1f700:	add	r3, r5, #1
   1f704:	mov	r0, sl
   1f708:	ldr	r2, [sp, #52]	; 0x34
   1f70c:	bl	1e144 <__assert_fail@plt+0xc788>
   1f710:	subs	r3, r0, #0
   1f714:	beq	1f6b4 <__assert_fail@plt+0xdcf8>
   1f718:	b	1f634 <__assert_fail@plt+0xdc78>
   1f71c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f720:	sub	sp, sp, #52	; 0x34
   1f724:	mov	r6, r0
   1f728:	mov	r5, r1
   1f72c:	add	r0, sp, #36	; 0x24
   1f730:	ldr	r4, [r1, #12]
   1f734:	ldr	r1, [r1, #8]
   1f738:	bl	19470 <__assert_fail@plt+0x7ab4>
   1f73c:	subs	r8, r0, #0
   1f740:	bne	1f774 <__assert_fail@plt+0xddb8>
   1f744:	add	r3, sp, #36	; 0x24
   1f748:	mov	r2, r4
   1f74c:	mov	r1, r5
   1f750:	mov	r0, r6
   1f754:	bl	1f13c <__assert_fail@plt+0xd780>
   1f758:	subs	r8, r0, #0
   1f75c:	addeq	r3, r5, #16
   1f760:	moveq	fp, r8
   1f764:	streq	r3, [sp, #28]
   1f768:	beq	1f93c <__assert_fail@plt+0xdf80>
   1f76c:	ldr	r0, [sp, #44]	; 0x2c
   1f770:	bl	18758 <__assert_fail@plt+0x6d9c>
   1f774:	mov	r0, r8
   1f778:	add	sp, sp, #52	; 0x34
   1f77c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f780:	mov	r3, #0
   1f784:	ldr	r2, [sp, #16]
   1f788:	sub	r4, r4, #1
   1f78c:	str	r3, [sp, #40]	; 0x28
   1f790:	ldr	r3, [r6, #100]	; 0x64
   1f794:	add	r3, r3, r2
   1f798:	ldr	sl, [r3, #-4]
   1f79c:	cmp	sl, #0
   1f7a0:	movne	r3, #0
   1f7a4:	ldrne	r9, [r6, #84]	; 0x54
   1f7a8:	bne	1f824 <__assert_fail@plt+0xde68>
   1f7ac:	add	r3, sp, #36	; 0x24
   1f7b0:	mov	r2, r4
   1f7b4:	mov	r1, r5
   1f7b8:	mov	r0, r6
   1f7bc:	bl	1f13c <__assert_fail@plt+0xd780>
   1f7c0:	cmp	r0, #0
   1f7c4:	beq	1f93c <__assert_fail@plt+0xdf80>
   1f7c8:	mov	r8, r0
   1f7cc:	b	1f76c <__assert_fail@plt+0xddb0>
   1f7d0:	ldr	r2, [sp, #12]
   1f7d4:	ldr	r3, [sl, #24]
   1f7d8:	ldr	r7, [r3, r2, lsl #2]
   1f7dc:	lsl	r3, r7, #3
   1f7e0:	lsl	r2, r7, #3
   1f7e4:	str	r3, [sp, #20]
   1f7e8:	ldr	r3, [r9]
   1f7ec:	add	r3, r3, r2
   1f7f0:	ldrb	r3, [r3, #6]
   1f7f4:	tst	r3, #16
   1f7f8:	bne	1f83c <__assert_fail@plt+0xde80>
   1f7fc:	ldr	r1, [r9]
   1f800:	lsl	r3, r7, #3
   1f804:	mov	r2, r4
   1f808:	mov	r0, r6
   1f80c:	add	r1, r1, r3
   1f810:	bl	1c5a0 <__assert_fail@plt+0xabe4>
   1f814:	cmp	r0, #0
   1f818:	bne	1f8dc <__assert_fail@plt+0xdf20>
   1f81c:	ldr	r3, [sp, #12]
   1f820:	add	r3, r3, #1
   1f824:	str	r3, [sp, #12]
   1f828:	ldr	r2, [sp, #12]
   1f82c:	ldr	r3, [sl, #20]
   1f830:	cmp	r2, r3
   1f834:	blt	1f7d0 <__assert_fail@plt+0xde14>
   1f838:	b	1f7ac <__assert_fail@plt+0xddf0>
   1f83c:	ldr	r3, [r5, #12]
   1f840:	mov	r2, r6
   1f844:	mov	r1, r7
   1f848:	str	r3, [sp, #24]
   1f84c:	ldr	r3, [r6, #84]	; 0x54
   1f850:	str	r3, [sp, #20]
   1f854:	mov	r3, r4
   1f858:	ldr	r0, [sp, #20]
   1f85c:	bl	1af94 <__assert_fail@plt+0x95d8>
   1f860:	subs	r3, r0, #0
   1f864:	ble	1f8d4 <__assert_fail@plt+0xdf18>
   1f868:	ldr	r1, [sp, #24]
   1f86c:	add	r2, r4, r3
   1f870:	cmp	r1, r2
   1f874:	blt	1f8ac <__assert_fail@plt+0xdef0>
   1f878:	ldr	r1, [r5]
   1f87c:	str	r3, [sp, #24]
   1f880:	ldr	r0, [r1, r2, lsl #2]
   1f884:	cmp	r0, #0
   1f888:	beq	1f7fc <__assert_fail@plt+0xde40>
   1f88c:	ldr	r3, [sp, #20]
   1f890:	add	r0, r0, #4
   1f894:	ldr	r2, [r3, #12]
   1f898:	ldr	r1, [r2, r7, lsl #2]
   1f89c:	bl	18acc <__assert_fail@plt+0x7110>
   1f8a0:	cmp	r0, #0
   1f8a4:	ldrne	r3, [sp, #24]
   1f8a8:	beq	1f7fc <__assert_fail@plt+0xde40>
   1f8ac:	ldr	r2, [r5, #20]
   1f8b0:	cmp	r2, #0
   1f8b4:	bne	1f910 <__assert_fail@plt+0xdf54>
   1f8b8:	mov	r1, r7
   1f8bc:	add	r0, sp, #36	; 0x24
   1f8c0:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   1f8c4:	cmp	r0, #0
   1f8c8:	bne	1f81c <__assert_fail@plt+0xde60>
   1f8cc:	mov	r8, #12
   1f8d0:	b	1f76c <__assert_fail@plt+0xddb0>
   1f8d4:	beq	1f7fc <__assert_fail@plt+0xde40>
   1f8d8:	b	1f8ac <__assert_fail@plt+0xdef0>
   1f8dc:	ldr	r3, [r5]
   1f8e0:	ldr	r2, [sp, #16]
   1f8e4:	ldr	r0, [r3, r2]
   1f8e8:	cmp	r0, #0
   1f8ec:	beq	1f81c <__assert_fail@plt+0xde60>
   1f8f0:	ldr	r3, [r9, #12]
   1f8f4:	add	r0, r0, #4
   1f8f8:	ldr	r1, [r3, r7, lsl #2]
   1f8fc:	bl	18acc <__assert_fail@plt+0x7110>
   1f900:	cmp	r0, #0
   1f904:	beq	1f81c <__assert_fail@plt+0xde60>
   1f908:	mov	r3, #1
   1f90c:	b	1f8ac <__assert_fail@plt+0xdef0>
   1f910:	ldr	r2, [r9, #12]
   1f914:	add	r3, r4, r3
   1f918:	mov	r0, r6
   1f91c:	str	r7, [sp]
   1f920:	str	r4, [sp, #4]
   1f924:	ldr	r1, [sp, #28]
   1f928:	ldr	r2, [r2, r7, lsl #2]
   1f92c:	bl	18fa4 <__assert_fail@plt+0x75e8>
   1f930:	cmp	r0, #0
   1f934:	beq	1f8b8 <__assert_fail@plt+0xdefc>
   1f938:	b	1f81c <__assert_fail@plt+0xde60>
   1f93c:	cmp	r4, #0
   1f940:	ble	1f76c <__assert_fail@plt+0xddb0>
   1f944:	ldr	r0, [r5]
   1f948:	lsl	r3, r4, #2
   1f94c:	str	r3, [sp, #16]
   1f950:	ldr	r3, [r0, r4, lsl #2]
   1f954:	cmp	r3, #0
   1f958:	ldr	r3, [r6, #120]	; 0x78
   1f95c:	addeq	fp, fp, #1
   1f960:	movne	fp, #0
   1f964:	cmp	r3, fp
   1f968:	bge	1f780 <__assert_fail@plt+0xddc4>
   1f96c:	mov	r1, #0
   1f970:	ldr	r2, [sp, #16]
   1f974:	bl	11818 <memset@plt>
   1f978:	b	1f76c <__assert_fail@plt+0xddb0>
   1f97c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f980:	sub	sp, sp, #412	; 0x19c
   1f984:	mov	sl, r0
   1f988:	add	r4, sp, #448	; 0x1c0
   1f98c:	mov	r7, r3
   1f990:	str	r2, [sp, #24]
   1f994:	mov	r2, #136	; 0x88
   1f998:	str	r1, [sp, #40]	; 0x28
   1f99c:	mov	r1, #0
   1f9a0:	ldr	fp, [r0]
   1f9a4:	add	r0, sp, #132	; 0x84
   1f9a8:	ldm	r4, {r4, r6, r8}
   1f9ac:	ldr	r5, [sp, #460]	; 0x1cc
   1f9b0:	bl	11818 <memset@plt>
   1f9b4:	ldr	r3, [sl, #16]
   1f9b8:	cmp	r3, #0
   1f9bc:	str	r3, [sp, #16]
   1f9c0:	str	fp, [sp, #216]	; 0xd8
   1f9c4:	beq	1f9ec <__assert_fail@plt+0xe030>
   1f9c8:	ldrb	r2, [sl, #28]
   1f9cc:	subs	r3, r7, r4
   1f9d0:	movne	r3, #1
   1f9d4:	ands	r3, r3, r2, lsr #3
   1f9d8:	beq	1f9e8 <__assert_fail@plt+0xe02c>
   1f9dc:	tst	r2, #1
   1f9e0:	ldr	r3, [sp, #16]
   1f9e4:	movne	r3, #0
   1f9e8:	str	r3, [sp, #16]
   1f9ec:	ldr	r3, [sl, #24]
   1f9f0:	cmp	r3, r8
   1f9f4:	subcc	r2, r8, #1
   1f9f8:	movcs	r3, #0
   1f9fc:	subcc	r3, r2, r3
   1fa00:	str	r3, [sp, #56]	; 0x38
   1fa04:	ldr	r3, [sl, #8]
   1fa08:	cmp	r3, #0
   1fa0c:	beq	20f60 <__assert_fail@plt+0xf5a4>
   1fa10:	ldr	r1, [fp, #36]	; 0x24
   1fa14:	cmp	r1, #0
   1fa18:	beq	20f60 <__assert_fail@plt+0xf5a4>
   1fa1c:	ldr	r2, [fp, #40]	; 0x28
   1fa20:	cmp	r2, #0
   1fa24:	beq	20f60 <__assert_fail@plt+0xf5a4>
   1fa28:	ldr	r3, [fp, #44]	; 0x2c
   1fa2c:	cmp	r3, #0
   1fa30:	beq	20f60 <__assert_fail@plt+0xf5a4>
   1fa34:	ldr	r0, [fp, #48]	; 0x30
   1fa38:	cmp	r0, #0
   1fa3c:	beq	20f60 <__assert_fail@plt+0xf5a4>
   1fa40:	ldr	r1, [r1, #8]
   1fa44:	cmp	r1, #0
   1fa48:	bne	1fa8c <__assert_fail@plt+0xe0d0>
   1fa4c:	ldr	r2, [r2, #8]
   1fa50:	cmp	r2, #0
   1fa54:	bne	1fa8c <__assert_fail@plt+0xe0d0>
   1fa58:	ldr	r3, [r3, #8]
   1fa5c:	cmp	r3, #0
   1fa60:	beq	1fa70 <__assert_fail@plt+0xe0b4>
   1fa64:	ldrsb	r3, [sl, #28]
   1fa68:	cmp	r3, #0
   1fa6c:	blt	1fa8c <__assert_fail@plt+0xe0d0>
   1fa70:	adds	r4, r4, #0
   1fa74:	movne	r4, #1
   1fa78:	cmp	r7, #0
   1fa7c:	moveq	r4, #0
   1fa80:	cmp	r4, #0
   1fa84:	bne	20f60 <__assert_fail@plt+0xf5a4>
   1fa88:	mov	r7, r4
   1fa8c:	ldr	r3, [sp, #56]	; 0x38
   1fa90:	subs	r3, r8, r3
   1fa94:	str	r3, [sp, #8]
   1fa98:	movne	r3, #1
   1fa9c:	bne	1faac <__assert_fail@plt+0xe0f0>
   1faa0:	ldr	r3, [fp, #76]	; 0x4c
   1faa4:	adds	r3, r3, #0
   1faa8:	movne	r3, #1
   1faac:	str	r3, [sp, #36]	; 0x24
   1fab0:	ldr	ip, [sp, #40]	; 0x28
   1fab4:	ldr	r2, [sl, #12]
   1fab8:	ldr	r3, [sl, #20]
   1fabc:	ldr	r0, [fp, #92]	; 0x5c
   1fac0:	ldr	r1, [sp, #24]
   1fac4:	str	ip, [sp, #132]	; 0x84
   1fac8:	ldr	ip, [sp, #24]
   1facc:	str	r3, [sp, #20]
   1fad0:	ldr	r3, [fp, #8]
   1fad4:	add	r1, r1, #1
   1fad8:	str	ip, [sp, #176]	; 0xb0
   1fadc:	str	ip, [sp, #180]	; 0xb4
   1fae0:	ldr	ip, [sp, #20]
   1fae4:	add	r3, r3, #1
   1fae8:	cmp	r3, r0
   1faec:	movlt	r3, r0
   1faf0:	str	ip, [sp, #196]	; 0xc4
   1faf4:	and	ip, r2, #4194304	; 0x400000
   1faf8:	ubfx	r2, r2, #22, #1
   1fafc:	str	r0, [sp, #212]	; 0xd4
   1fb00:	strb	r2, [sp, #204]	; 0xcc
   1fb04:	ldr	r2, [sp, #20]
   1fb08:	orrs	r2, r2, ip
   1fb0c:	movne	r2, #1
   1fb10:	moveq	r2, #0
   1fb14:	cmp	r3, r1
   1fb18:	strb	r2, [sp, #207]	; 0xcf
   1fb1c:	movlt	r1, r3
   1fb20:	ldrb	r2, [fp, #88]	; 0x58
   1fb24:	ubfx	r0, r2, #2, #1
   1fb28:	ubfx	r2, r2, #3, #1
   1fb2c:	strb	r0, [sp, #205]	; 0xcd
   1fb30:	add	r0, sp, #132	; 0x84
   1fb34:	strb	r2, [sp, #206]	; 0xce
   1fb38:	ldr	r2, [sp, #24]
   1fb3c:	str	r2, [sp, #184]	; 0xb8
   1fb40:	str	r2, [sp, #188]	; 0xbc
   1fb44:	bl	19074 <__assert_fail@plt+0x76b8>
   1fb48:	cmp	r0, #0
   1fb4c:	bne	20c3c <__assert_fail@plt+0xf280>
   1fb50:	add	r3, fp, #96	; 0x60
   1fb54:	str	r3, [sp, #200]	; 0xc8
   1fb58:	ldrb	r3, [fp, #88]	; 0x58
   1fb5c:	ubfx	r3, r3, #4, #1
   1fb60:	strb	r3, [sp, #210]	; 0xd2
   1fb64:	ldrb	r3, [sp, #207]	; 0xcf
   1fb68:	cmp	r3, #0
   1fb6c:	ldrne	r2, [sp, #136]	; 0x88
   1fb70:	ldreq	r2, [sp, #40]	; 0x28
   1fb74:	cmp	r3, #0
   1fb78:	movne	r3, #0
   1fb7c:	str	r2, [sp, #136]	; 0x88
   1fb80:	bne	1fb94 <__assert_fail@plt+0xe1d8>
   1fb84:	ldr	r3, [fp, #92]	; 0x5c
   1fb88:	cmp	r3, #1
   1fb8c:	ldr	r3, [sp, #24]
   1fb90:	movgt	r3, #0
   1fb94:	str	r3, [sp, #160]	; 0xa0
   1fb98:	str	r3, [sp, #164]	; 0xa4
   1fb9c:	ldrb	r3, [sl, #28]
   1fba0:	str	r6, [sp, #184]	; 0xb8
   1fba4:	str	r6, [sp, #188]	; 0xbc
   1fba8:	ubfx	r3, r3, #7, #1
   1fbac:	strb	r3, [sp, #209]	; 0xd1
   1fbb0:	ldr	r8, [fp, #76]	; 0x4c
   1fbb4:	ldr	r3, [sp, #464]	; 0x1d0
   1fbb8:	lsl	r6, r8, #1
   1fbbc:	str	r3, [sp, #220]	; 0xdc
   1fbc0:	mvn	r3, #0
   1fbc4:	cmp	r6, #0
   1fbc8:	str	r3, [sp, #224]	; 0xe0
   1fbcc:	bgt	1fc54 <__assert_fail@plt+0xe298>
   1fbd0:	mov	r3, #1
   1fbd4:	str	r6, [sp, #244]	; 0xf4
   1fbd8:	str	r3, [sp, #252]	; 0xfc
   1fbdc:	ldr	r3, [sp, #8]
   1fbe0:	str	r6, [sp, #260]	; 0x104
   1fbe4:	cmp	r3, #1
   1fbe8:	bhi	1fc98 <__assert_fail@plt+0xe2dc>
   1fbec:	ldrb	r3, [fp, #88]	; 0x58
   1fbf0:	tst	r3, #2
   1fbf4:	bne	1fc98 <__assert_fail@plt+0xe2dc>
   1fbf8:	ldr	r3, [sp, #464]	; 0x1d0
   1fbfc:	str	r7, [sp, #100]	; 0x64
   1fc00:	tst	r3, #1
   1fc04:	movne	r3, #4
   1fc08:	moveq	r3, #6
   1fc0c:	cmp	r7, r4
   1fc10:	str	r3, [sp, #192]	; 0xc0
   1fc14:	mvngt	r3, #0
   1fc18:	movle	r3, #1
   1fc1c:	str	r3, [sp, #76]	; 0x4c
   1fc20:	movlt	r3, r7
   1fc24:	movge	r3, r4
   1fc28:	str	r3, [sp, #60]	; 0x3c
   1fc2c:	movge	r3, r7
   1fc30:	movlt	r3, r4
   1fc34:	str	r3, [sp, #28]
   1fc38:	ldr	r3, [fp, #92]	; 0x5c
   1fc3c:	str	r3, [sp, #72]	; 0x48
   1fc40:	ldr	r3, [sp, #16]
   1fc44:	cmp	r3, #0
   1fc48:	bne	1fcc0 <__assert_fail@plt+0xe304>
   1fc4c:	mov	r3, #8
   1fc50:	b	1fd04 <__assert_fail@plt+0xe348>
   1fc54:	ldr	r3, [pc, #4072]	; 20c44 <__assert_fail@plt+0xf288>
   1fc58:	cmp	r6, r3
   1fc5c:	ble	1fc68 <__assert_fail@plt+0xe2ac>
   1fc60:	mov	r3, #12
   1fc64:	b	1fdec <__assert_fail@plt+0xe430>
   1fc68:	mov	r0, #24
   1fc6c:	mul	r0, r0, r6
   1fc70:	bl	18840 <__assert_fail@plt+0x6e84>
   1fc74:	str	r0, [sp, #248]	; 0xf8
   1fc78:	lsl	r0, r8, #3
   1fc7c:	bl	18840 <__assert_fail@plt+0x6e84>
   1fc80:	ldr	r3, [sp, #248]	; 0xf8
   1fc84:	str	r0, [sp, #264]	; 0x108
   1fc88:	cmp	r0, #0
   1fc8c:	cmpne	r3, #0
   1fc90:	bne	1fbd0 <__assert_fail@plt+0xe214>
   1fc94:	b	1fc60 <__assert_fail@plt+0xe2a4>
   1fc98:	ldr	r0, [sp, #168]	; 0xa8
   1fc9c:	cmn	r0, #-1073741822	; 0xc0000002
   1fca0:	bhi	1fc60 <__assert_fail@plt+0xe2a4>
   1fca4:	add	r0, r0, #1
   1fca8:	lsl	r0, r0, #2
   1fcac:	bl	18840 <__assert_fail@plt+0x6e84>
   1fcb0:	cmp	r0, #0
   1fcb4:	str	r0, [sp, #232]	; 0xe8
   1fcb8:	bne	1fbf8 <__assert_fail@plt+0xe23c>
   1fcbc:	b	1fc60 <__assert_fail@plt+0xe2a4>
   1fcc0:	ldr	r3, [sp, #72]	; 0x48
   1fcc4:	cmp	r3, #1
   1fcc8:	moveq	r3, #4
   1fccc:	beq	1fce8 <__assert_fail@plt+0xe32c>
   1fcd0:	ldr	r3, [sl, #12]
   1fcd4:	ldr	r2, [sp, #20]
   1fcd8:	and	r3, r3, #4194304	; 0x400000
   1fcdc:	orrs	r3, r2, r3
   1fce0:	moveq	r3, #4
   1fce4:	movne	r3, #0
   1fce8:	ldr	r1, [sp, #20]
   1fcec:	cmp	r7, r4
   1fcf0:	movle	r2, #2
   1fcf4:	movgt	r2, #0
   1fcf8:	cmp	r1, #0
   1fcfc:	orrne	r3, r3, #1
   1fd00:	orr	r3, r3, r2
   1fd04:	cmp	r7, r4
   1fd08:	str	r3, [sp, #80]	; 0x50
   1fd0c:	add	r3, sp, #408	; 0x198
   1fd10:	suble	r3, r3, #308	; 0x134
   1fd14:	movgt	r3, #0
   1fd18:	str	r3, [sp, #84]	; 0x54
   1fd1c:	adds	r3, r3, #0
   1fd20:	movne	r3, #1
   1fd24:	str	r3, [sp, #88]	; 0x58
   1fd28:	ldr	r2, [sp, #28]
   1fd2c:	ldr	r1, [sp, #60]	; 0x3c
   1fd30:	ldr	r3, [sp, #100]	; 0x64
   1fd34:	cmp	r3, r2
   1fd38:	movle	r2, #0
   1fd3c:	movgt	r2, #1
   1fd40:	cmp	r3, r1
   1fd44:	orrlt	r2, r2, #1
   1fd48:	cmp	r2, #0
   1fd4c:	str	r2, [sp, #32]
   1fd50:	bne	1fde8 <__assert_fail@plt+0xe42c>
   1fd54:	ldr	r2, [sp, #80]	; 0x50
   1fd58:	sub	r2, r2, #4
   1fd5c:	cmp	r2, #4
   1fd60:	ldrls	pc, [pc, r2, lsl #2]
   1fd64:	b	1ff04 <__assert_fail@plt+0xe548>
   1fd68:	andeq	pc, r1, r8, ror #28
   1fd6c:	andeq	pc, r1, r8, ror #28
   1fd70:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1fd74:	andeq	pc, r1, ip, ror sp	; <UNPREDICTABLE>
   1fd78:	andeq	pc, r1, r4, lsr #31
   1fd7c:	mov	r2, #0
   1fd80:	ldr	r0, [sp, #28]
   1fd84:	mov	r1, r3
   1fd88:	cmp	r0, r3
   1fd8c:	bgt	1fe90 <__assert_fail@plt+0xe4d4>
   1fd90:	cmp	r2, #0
   1fd94:	strne	r3, [sp, #100]	; 0x64
   1fd98:	ldr	r2, [sp, #28]
   1fd9c:	ldr	r3, [sp, #100]	; 0x64
   1fda0:	cmp	r3, r2
   1fda4:	bne	1ffa4 <__assert_fail@plt+0xe5e8>
   1fda8:	mov	r3, r2
   1fdac:	ldr	r1, [sp, #20]
   1fdb0:	ldr	r2, [sp, #24]
   1fdb4:	cmp	r3, r2
   1fdb8:	ldrlt	r3, [sp, #40]	; 0x28
   1fdbc:	movge	r3, #0
   1fdc0:	ldrlt	r2, [sp, #28]
   1fdc4:	ldrblt	r3, [r3, r2]
   1fdc8:	cmp	r1, #0
   1fdcc:	mov	r2, r3
   1fdd0:	movne	r2, r1
   1fdd4:	ldrbne	r2, [r2, r3]
   1fdd8:	ldr	r3, [sp, #16]
   1fddc:	ldrb	r3, [r3, r2]
   1fde0:	cmp	r3, #0
   1fde4:	bne	1ffa4 <__assert_fail@plt+0xe5e8>
   1fde8:	mov	r3, #1
   1fdec:	str	r3, [sp, #12]
   1fdf0:	ldr	r0, [sp, #232]	; 0xe8
   1fdf4:	bl	18758 <__assert_fail@plt+0x6d9c>
   1fdf8:	ldr	r3, [fp, #76]	; 0x4c
   1fdfc:	cmp	r3, #0
   1fe00:	beq	1fe1c <__assert_fail@plt+0xe460>
   1fe04:	add	r0, sp, #132	; 0x84
   1fe08:	bl	19f40 <__assert_fail@plt+0x8584>
   1fe0c:	ldr	r0, [sp, #264]	; 0x108
   1fe10:	bl	18758 <__assert_fail@plt+0x6d9c>
   1fe14:	ldr	r0, [sp, #248]	; 0xf8
   1fe18:	bl	18758 <__assert_fail@plt+0x6d9c>
   1fe1c:	add	r0, sp, #132	; 0x84
   1fe20:	bl	19f10 <__assert_fail@plt+0x8554>
   1fe24:	ldr	r0, [sp, #12]
   1fe28:	add	sp, sp, #412	; 0x19c
   1fe2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe30:	mov	r2, #0
   1fe34:	ldr	r0, [sp, #28]
   1fe38:	mov	r1, r3
   1fe3c:	cmp	r0, r3
   1fe40:	ble	1fd90 <__assert_fail@plt+0xe3d4>
   1fe44:	ldr	ip, [sp, #16]
   1fe48:	ldr	r0, [sp, #40]	; 0x28
   1fe4c:	ldrb	r0, [r0, r3]
   1fe50:	add	r3, r3, #1
   1fe54:	ldrb	r0, [ip, r0]
   1fe58:	cmp	r0, #0
   1fe5c:	bne	1feb4 <__assert_fail@plt+0xe4f8>
   1fe60:	mov	r2, #1
   1fe64:	b	1fe34 <__assert_fail@plt+0xe478>
   1fe68:	mov	r2, #0
   1fe6c:	ldr	r1, [sp, #60]	; 0x3c
   1fe70:	mov	ip, r3
   1fe74:	cmp	r1, r3
   1fe78:	ble	1fec0 <__assert_fail@plt+0xe504>
   1fe7c:	cmp	r2, #0
   1fe80:	strne	r3, [sp, #100]	; 0x64
   1fe84:	b	1fde8 <__assert_fail@plt+0xe42c>
   1fe88:	mov	r2, #1
   1fe8c:	b	1fd80 <__assert_fail@plt+0xe3c4>
   1fe90:	ldr	ip, [sp, #20]
   1fe94:	ldr	r0, [sp, #40]	; 0x28
   1fe98:	ldrb	r0, [r0, r3]
   1fe9c:	add	r3, r3, #1
   1fea0:	ldrb	r0, [ip, r0]
   1fea4:	ldr	ip, [sp, #16]
   1fea8:	ldrb	r0, [ip, r0]
   1feac:	cmp	r0, #0
   1feb0:	beq	1fe88 <__assert_fail@plt+0xe4cc>
   1feb4:	cmp	r2, #0
   1feb8:	strne	r1, [sp, #100]	; 0x64
   1febc:	b	1fd98 <__assert_fail@plt+0xe3dc>
   1fec0:	ldr	lr, [sp, #20]
   1fec4:	ldr	r1, [sp, #24]
   1fec8:	cmp	r1, r3
   1fecc:	ldrgt	r1, [sp, #40]	; 0x28
   1fed0:	movle	r1, #0
   1fed4:	ldrbgt	r1, [r1, r3]
   1fed8:	cmp	lr, #0
   1fedc:	sub	r3, r3, #1
   1fee0:	mov	r0, r1
   1fee4:	movne	r0, lr
   1fee8:	ldrbne	r0, [r0, r1]
   1feec:	ldr	r1, [sp, #16]
   1fef0:	ldrb	r1, [r1, r0]
   1fef4:	cmp	r1, #0
   1fef8:	bne	1ff9c <__assert_fail@plt+0xe5e0>
   1fefc:	mov	r2, #1
   1ff00:	b	1fe6c <__assert_fail@plt+0xe4b0>
   1ff04:	ldr	r4, [sp, #100]	; 0x64
   1ff08:	ldr	r3, [sp, #156]	; 0x9c
   1ff0c:	ldr	r2, [sp, #164]	; 0xa4
   1ff10:	sub	r3, r4, r3
   1ff14:	cmp	r2, r3
   1ff18:	bhi	1ff40 <__assert_fail@plt+0xe584>
   1ff1c:	mov	r1, r4
   1ff20:	add	r0, sp, #132	; 0x84
   1ff24:	ldr	r2, [sp, #464]	; 0x1d0
   1ff28:	bl	1c774 <__assert_fail@plt+0xadb8>
   1ff2c:	subs	r3, r0, #0
   1ff30:	str	r3, [sp, #12]
   1ff34:	bne	1fdf0 <__assert_fail@plt+0xe434>
   1ff38:	ldr	r3, [sp, #156]	; 0x9c
   1ff3c:	sub	r3, r4, r3
   1ff40:	ldr	r2, [sp, #160]	; 0xa0
   1ff44:	cmp	r2, r3
   1ff48:	ldrhi	r2, [sp, #136]	; 0x88
   1ff4c:	movls	r3, #0
   1ff50:	ldrbhi	r3, [r2, r3]
   1ff54:	ldr	r2, [sp, #16]
   1ff58:	ldrb	r3, [r2, r3]
   1ff5c:	cmp	r3, #0
   1ff60:	bne	1ffa4 <__assert_fail@plt+0xe5e8>
   1ff64:	ldr	r2, [sp, #60]	; 0x3c
   1ff68:	ldr	r3, [sp, #76]	; 0x4c
   1ff6c:	add	r4, r4, r3
   1ff70:	ldr	r3, [sp, #28]
   1ff74:	str	r4, [sp, #100]	; 0x64
   1ff78:	cmp	r4, r3
   1ff7c:	movle	r3, #0
   1ff80:	movgt	r3, #1
   1ff84:	cmp	r4, r2
   1ff88:	movge	r4, r3
   1ff8c:	orrlt	r4, r3, #1
   1ff90:	cmp	r4, #0
   1ff94:	beq	1ff04 <__assert_fail@plt+0xe548>
   1ff98:	b	1fde8 <__assert_fail@plt+0xe42c>
   1ff9c:	cmp	r2, #0
   1ffa0:	strne	ip, [sp, #100]	; 0x64
   1ffa4:	add	r0, sp, #132	; 0x84
   1ffa8:	ldr	r1, [sp, #100]	; 0x64
   1ffac:	ldr	r2, [sp, #464]	; 0x1d0
   1ffb0:	bl	1c774 <__assert_fail@plt+0xadb8>
   1ffb4:	subs	r3, r0, #0
   1ffb8:	str	r3, [sp, #12]
   1ffbc:	bne	1fdf0 <__assert_fail@plt+0xe434>
   1ffc0:	ldr	r3, [sp, #72]	; 0x48
   1ffc4:	cmp	r3, #1
   1ffc8:	beq	1ffe8 <__assert_fail@plt+0xe62c>
   1ffcc:	ldr	r3, [sp, #160]	; 0xa0
   1ffd0:	cmp	r3, #0
   1ffd4:	beq	1ffe8 <__assert_fail@plt+0xe62c>
   1ffd8:	ldr	r3, [sp, #140]	; 0x8c
   1ffdc:	ldr	r3, [r3]
   1ffe0:	cmn	r3, #1
   1ffe4:	beq	200f4 <__assert_fail@plt+0xe738>
   1ffe8:	mov	r3, #0
   1ffec:	ldr	r9, [sp, #172]	; 0xac
   1fff0:	ldr	r4, [sp, #216]	; 0xd8
   1fff4:	ldr	r6, [r4, #36]	; 0x24
   1fff8:	str	r3, [sp, #108]	; 0x6c
   1fffc:	str	r3, [sp, #236]	; 0xec
   20000:	str	r3, [sp, #240]	; 0xf0
   20004:	str	r3, [sp, #252]	; 0xfc
   20008:	ldrsb	r3, [r6, #52]	; 0x34
   2000c:	cmp	r3, #0
   20010:	bge	2007c <__assert_fail@plt+0xe6c0>
   20014:	sub	r1, r9, #1
   20018:	add	r0, sp, #132	; 0x84
   2001c:	ldr	r2, [sp, #220]	; 0xdc
   20020:	bl	1c4c0 <__assert_fail@plt+0xab04>
   20024:	tst	r0, #1
   20028:	mov	r3, r0
   2002c:	ldrne	r6, [r4, #40]	; 0x28
   20030:	bne	20074 <__assert_fail@plt+0xe6b8>
   20034:	cmp	r0, #0
   20038:	beq	2007c <__assert_fail@plt+0xe6c0>
   2003c:	and	r2, r0, #6
   20040:	cmp	r2, #6
   20044:	ldreq	r6, [r4, #48]	; 0x30
   20048:	beq	20074 <__assert_fail@plt+0xe6b8>
   2004c:	tst	r0, #2
   20050:	ldrne	r6, [r4, #44]	; 0x2c
   20054:	bne	20074 <__assert_fail@plt+0xe6b8>
   20058:	tst	r0, #4
   2005c:	beq	2007c <__assert_fail@plt+0xe6c0>
   20060:	mov	r1, r4
   20064:	add	r0, sp, #108	; 0x6c
   20068:	ldr	r2, [r6, #40]	; 0x28
   2006c:	bl	1b620 <__assert_fail@plt+0x9c64>
   20070:	mov	r6, r0
   20074:	cmp	r6, #0
   20078:	beq	1fc60 <__assert_fail@plt+0xe2a4>
   2007c:	ldr	r3, [sp, #232]	; 0xe8
   20080:	cmp	r3, #0
   20084:	beq	20108 <__assert_fail@plt+0xe74c>
   20088:	str	r6, [r3, r9, lsl #2]
   2008c:	ldr	r3, [r4, #76]	; 0x4c
   20090:	cmp	r3, #0
   20094:	beq	20108 <__assert_fail@plt+0xe74c>
   20098:	add	r7, r6, #4
   2009c:	mov	r2, #0
   200a0:	mov	r1, r7
   200a4:	add	r0, sp, #132	; 0x84
   200a8:	bl	1a114 <__assert_fail@plt+0x8758>
   200ac:	cmp	r0, #0
   200b0:	mov	r4, r0
   200b4:	str	r0, [sp, #108]	; 0x6c
   200b8:	bne	200e4 <__assert_fail@plt+0xe728>
   200bc:	ldrb	r3, [r6, #52]	; 0x34
   200c0:	tst	r3, #64	; 0x40
   200c4:	beq	20110 <__assert_fail@plt+0xe754>
   200c8:	mov	r1, r7
   200cc:	add	r0, sp, #132	; 0x84
   200d0:	bl	1ea08 <__assert_fail@plt+0xd04c>
   200d4:	cmp	r0, #0
   200d8:	mov	r4, r0
   200dc:	str	r0, [sp, #108]	; 0x6c
   200e0:	beq	20110 <__assert_fail@plt+0xe754>
   200e4:	cmn	r4, #1
   200e8:	bne	20598 <__assert_fail@plt+0xebdc>
   200ec:	add	r0, sp, #132	; 0x84
   200f0:	bl	19f40 <__assert_fail@plt+0x8584>
   200f4:	ldr	r2, [sp, #76]	; 0x4c
   200f8:	ldr	r3, [sp, #100]	; 0x64
   200fc:	add	r3, r3, r2
   20100:	str	r3, [sp, #100]	; 0x64
   20104:	b	1fd28 <__assert_fail@plt+0xe36c>
   20108:	ldr	r3, [sp, #88]	; 0x58
   2010c:	str	r3, [sp, #32]
   20110:	ldrb	r3, [r6, #52]	; 0x34
   20114:	ubfx	r3, r3, #4, #1
   20118:	cmp	r3, #0
   2011c:	streq	r3, [sp, #44]	; 0x2c
   20120:	beq	20590 <__assert_fail@plt+0xebd4>
   20124:	ldrsb	r3, [r6, #52]	; 0x34
   20128:	cmp	r3, #0
   2012c:	bge	2014c <__assert_fail@plt+0xe790>
   20130:	mov	r2, r9
   20134:	mov	r1, r6
   20138:	add	r0, sp, #132	; 0x84
   2013c:	bl	1c6c0 <__assert_fail@plt+0xad04>
   20140:	subs	r3, r0, #0
   20144:	str	r3, [sp, #44]	; 0x2c
   20148:	beq	20590 <__assert_fail@plt+0xebd4>
   2014c:	ldr	r3, [sp, #36]	; 0x24
   20150:	mov	r4, r9
   20154:	cmp	r3, #0
   20158:	ldrne	r3, [sp, #36]	; 0x24
   2015c:	strne	r3, [sp, #44]	; 0x2c
   20160:	beq	200e4 <__assert_fail@plt+0xe728>
   20164:	ldr	r3, [sp, #84]	; 0x54
   20168:	str	r3, [sp, #48]	; 0x30
   2016c:	ldr	r1, [sp, #172]	; 0xac
   20170:	ldr	r3, [sp, #188]	; 0xbc
   20174:	cmp	r1, r3
   20178:	bge	2027c <__assert_fail@plt+0xe8c0>
   2017c:	add	r3, r1, #1
   20180:	add	r2, r1, #1
   20184:	str	r3, [sp, #64]	; 0x40
   20188:	ldr	r3, [sp, #168]	; 0xa8
   2018c:	cmp	r2, r3
   20190:	blt	201a0 <__assert_fail@plt+0xe7e4>
   20194:	ldr	r2, [sp, #180]	; 0xb4
   20198:	cmp	r3, r2
   2019c:	blt	201bc <__assert_fail@plt+0xe800>
   201a0:	ldr	r3, [sp, #160]	; 0xa0
   201a4:	add	r2, r1, #1
   201a8:	cmp	r2, r3
   201ac:	blt	201d4 <__assert_fail@plt+0xe818>
   201b0:	ldr	r2, [sp, #180]	; 0xb4
   201b4:	cmp	r3, r2
   201b8:	bge	201d4 <__assert_fail@plt+0xe818>
   201bc:	add	r1, r1, #2
   201c0:	add	r0, sp, #132	; 0x84
   201c4:	bl	19b60 <__assert_fail@plt+0x81a4>
   201c8:	cmp	r0, #0
   201cc:	str	r0, [sp, #108]	; 0x6c
   201d0:	bne	1fc60 <__assert_fail@plt+0xe2a4>
   201d4:	ldrb	r3, [r6, #52]	; 0x34
   201d8:	tst	r3, #32
   201dc:	bne	20298 <__assert_fail@plt+0xe8dc>
   201e0:	ldr	r3, [sp, #172]	; 0xac
   201e4:	add	r2, r3, #1
   201e8:	str	r2, [sp, #172]	; 0xac
   201ec:	ldr	r2, [sp, #136]	; 0x88
   201f0:	ldrb	r8, [r2, r3]
   201f4:	ldr	r3, [r6, #44]	; 0x2c
   201f8:	cmp	r3, #0
   201fc:	beq	20470 <__assert_fail@plt+0xeab4>
   20200:	ldr	r7, [r3, r8, lsl #2]
   20204:	ldr	r3, [sp, #232]	; 0xe8
   20208:	cmp	r3, #0
   2020c:	beq	20224 <__assert_fail@plt+0xe868>
   20210:	mov	r2, r7
   20214:	add	r1, sp, #132	; 0x84
   20218:	add	r0, sp, #108	; 0x6c
   2021c:	bl	1f008 <__assert_fail@plt+0xd64c>
   20220:	mov	r7, r0
   20224:	cmp	r7, #0
   20228:	bne	20500 <__assert_fail@plt+0xeb44>
   2022c:	ldr	r2, [sp, #108]	; 0x6c
   20230:	ldr	r3, [sp, #232]	; 0xe8
   20234:	cmp	r2, #0
   20238:	bne	1fc60 <__assert_fail@plt+0xe2a4>
   2023c:	cmp	r3, #0
   20240:	beq	2027c <__assert_fail@plt+0xe8c0>
   20244:	ldr	r3, [sp, #36]	; 0x24
   20248:	ldr	r2, [sp, #44]	; 0x2c
   2024c:	eor	r3, r3, #1
   20250:	tst	r2, r3
   20254:	bne	2027c <__assert_fail@plt+0xe8c0>
   20258:	ldr	r3, [sp, #172]	; 0xac
   2025c:	mov	r2, #0
   20260:	ldr	r0, [sp, #232]	; 0xe8
   20264:	ldr	ip, [sp, #236]	; 0xec
   20268:	add	r1, r3, #1
   2026c:	cmp	ip, r1
   20270:	bge	204c0 <__assert_fail@plt+0xeb04>
   20274:	cmp	r2, #0
   20278:	strne	r3, [sp, #172]	; 0xac
   2027c:	ldr	r3, [sp, #48]	; 0x30
   20280:	cmp	r3, #0
   20284:	ldrne	r3, [r3]
   20288:	ldrne	r2, [sp, #48]	; 0x30
   2028c:	addne	r3, r3, r9
   20290:	strne	r3, [r2]
   20294:	b	200e4 <__assert_fail@plt+0xe728>
   20298:	ldr	r8, [sp, #216]	; 0xd8
   2029c:	mov	r3, #0
   202a0:	str	r3, [sp, #52]	; 0x34
   202a4:	ldr	r3, [r6, #8]
   202a8:	ldr	r2, [sp, #52]	; 0x34
   202ac:	cmp	r2, r3
   202b0:	movge	r0, #0
   202b4:	bge	2045c <__assert_fail@plt+0xeaa0>
   202b8:	ldr	r3, [r6, #12]
   202bc:	ldr	r2, [sp, #52]	; 0x34
   202c0:	ldr	r3, [r3, r2, lsl #2]
   202c4:	str	r3, [sp, #68]	; 0x44
   202c8:	ldr	r3, [r8]
   202cc:	ldr	r2, [sp, #68]	; 0x44
   202d0:	add	r3, r3, r2, lsl #3
   202d4:	ldrb	r2, [r3, #6]
   202d8:	tst	r2, #16
   202dc:	beq	20434 <__assert_fail@plt+0xea78>
   202e0:	ldr	r7, [r3, #4]
   202e4:	ldr	r3, [pc, #2396]	; 20c48 <__assert_fail@plt+0xf28c>
   202e8:	ldr	r2, [sp, #172]	; 0xac
   202ec:	tst	r3, r7
   202f0:	str	r2, [sp, #92]	; 0x5c
   202f4:	beq	2034c <__assert_fail@plt+0xe990>
   202f8:	ubfx	r7, r7, #8, #10
   202fc:	add	r0, sp, #132	; 0x84
   20300:	ldr	r1, [sp, #92]	; 0x5c
   20304:	ldr	r2, [sp, #220]	; 0xdc
   20308:	bl	1c4c0 <__assert_fail@plt+0xab04>
   2030c:	tst	r7, #4
   20310:	beq	2031c <__assert_fail@plt+0xe960>
   20314:	tst	r0, #1
   20318:	beq	20434 <__assert_fail@plt+0xea78>
   2031c:	tst	r7, #8
   20320:	beq	2032c <__assert_fail@plt+0xe970>
   20324:	tst	r0, #1
   20328:	bne	20434 <__assert_fail@plt+0xea78>
   2032c:	tst	r7, #32
   20330:	beq	2033c <__assert_fail@plt+0xe980>
   20334:	tst	r0, #2
   20338:	beq	20434 <__assert_fail@plt+0xea78>
   2033c:	tst	r7, #128	; 0x80
   20340:	beq	2034c <__assert_fail@plt+0xe990>
   20344:	tst	r0, #8
   20348:	beq	20434 <__assert_fail@plt+0xea78>
   2034c:	add	r2, sp, #132	; 0x84
   20350:	mov	r0, r8
   20354:	ldr	r1, [sp, #68]	; 0x44
   20358:	ldr	r3, [sp, #92]	; 0x5c
   2035c:	bl	1af94 <__assert_fail@plt+0x95d8>
   20360:	cmp	r0, #0
   20364:	beq	20434 <__assert_fail@plt+0xea78>
   20368:	ldr	r7, [sp, #172]	; 0xac
   2036c:	ldr	r3, [sp, #252]	; 0xfc
   20370:	add	r7, r0, r7
   20374:	mov	r1, r7
   20378:	cmp	r3, r0
   2037c:	strge	r3, [sp, #252]	; 0xfc
   20380:	strlt	r0, [sp, #252]	; 0xfc
   20384:	add	r0, sp, #132	; 0x84
   20388:	bl	1a1f4 <__assert_fail@plt+0x8838>
   2038c:	cmp	r0, #0
   20390:	str	r0, [sp, #120]	; 0x78
   20394:	bne	2045c <__assert_fail@plt+0xeaa0>
   20398:	ldr	r3, [r8, #12]
   2039c:	mov	r1, #12
   203a0:	ldr	r2, [sp, #68]	; 0x44
   203a4:	ldr	r2, [r3, r2, lsl #2]
   203a8:	ldr	r3, [r8, #24]
   203ac:	mla	r2, r1, r2, r3
   203b0:	ldr	r3, [sp, #232]	; 0xe8
   203b4:	ldr	r3, [r3, r7, lsl #2]
   203b8:	cmp	r3, #0
   203bc:	str	r3, [sp, #68]	; 0x44
   203c0:	add	r3, sp, #268	; 0x10c
   203c4:	bne	20440 <__assert_fail@plt+0xea84>
   203c8:	ldm	r2, {r0, r1, r2}
   203cc:	stm	r3, {r0, r1, r2}
   203d0:	sub	r1, r7, #1
   203d4:	add	r0, sp, #132	; 0x84
   203d8:	ldr	r2, [sp, #220]	; 0xdc
   203dc:	bl	1c4c0 <__assert_fail@plt+0xab04>
   203e0:	ldr	r3, [sp, #232]	; 0xe8
   203e4:	add	r2, sp, #268	; 0x10c
   203e8:	mov	r1, r8
   203ec:	str	r3, [sp, #92]	; 0x5c
   203f0:	mov	r3, r0
   203f4:	add	r0, sp, #120	; 0x78
   203f8:	bl	1b620 <__assert_fail@plt+0x9c64>
   203fc:	ldr	r3, [sp, #92]	; 0x5c
   20400:	str	r0, [r3, r7, lsl #2]
   20404:	ldr	r3, [sp, #68]	; 0x44
   20408:	cmp	r3, #0
   2040c:	beq	20418 <__assert_fail@plt+0xea5c>
   20410:	ldr	r0, [sp, #276]	; 0x114
   20414:	bl	18758 <__assert_fail@plt+0x6d9c>
   20418:	ldr	r3, [sp, #232]	; 0xe8
   2041c:	ldr	r3, [r3, r7, lsl #2]
   20420:	cmp	r3, #0
   20424:	bne	20434 <__assert_fail@plt+0xea78>
   20428:	ldr	r0, [sp, #120]	; 0x78
   2042c:	cmp	r0, #0
   20430:	bne	2045c <__assert_fail@plt+0xeaa0>
   20434:	ldr	r3, [sp, #52]	; 0x34
   20438:	add	r3, r3, #1
   2043c:	b	202a0 <__assert_fail@plt+0xe8e4>
   20440:	ldr	r1, [sp, #68]	; 0x44
   20444:	mov	r0, r3
   20448:	ldr	r1, [r1, #40]	; 0x28
   2044c:	bl	1b4e0 <__assert_fail@plt+0x9b24>
   20450:	cmp	r0, #0
   20454:	str	r0, [sp, #120]	; 0x78
   20458:	beq	203d0 <__assert_fail@plt+0xea14>
   2045c:	cmp	r0, #0
   20460:	str	r0, [sp, #108]	; 0x6c
   20464:	beq	201e0 <__assert_fail@plt+0xe824>
   20468:	mov	r7, #0
   2046c:	b	20204 <__assert_fail@plt+0xe848>
   20470:	ldr	r7, [r6, #48]	; 0x30
   20474:	cmp	r7, #0
   20478:	beq	204a0 <__assert_fail@plt+0xeae4>
   2047c:	ldr	r1, [sp, #172]	; 0xac
   20480:	add	r0, sp, #132	; 0x84
   20484:	ldr	r2, [sp, #220]	; 0xdc
   20488:	sub	r1, r1, #1
   2048c:	bl	1c4c0 <__assert_fail@plt+0xab04>
   20490:	tst	r0, #1
   20494:	addne	r8, r8, #256	; 0x100
   20498:	ldr	r7, [r7, r8, lsl #2]
   2049c:	b	20204 <__assert_fail@plt+0xe848>
   204a0:	mov	r1, r6
   204a4:	ldr	r0, [sp, #216]	; 0xd8
   204a8:	bl	1d6a0 <__assert_fail@plt+0xbce4>
   204ac:	cmp	r0, #0
   204b0:	bne	201f4 <__assert_fail@plt+0xe838>
   204b4:	mov	r3, #12
   204b8:	str	r3, [sp, #108]	; 0x6c
   204bc:	b	20204 <__assert_fail@plt+0xe848>
   204c0:	mov	r3, r1
   204c4:	ldr	r1, [r0, r1, lsl #2]
   204c8:	mov	r2, #1
   204cc:	cmp	r1, #0
   204d0:	beq	20268 <__assert_fail@plt+0xe8ac>
   204d4:	mov	r2, #0
   204d8:	add	r1, sp, #132	; 0x84
   204dc:	str	r3, [sp, #172]	; 0xac
   204e0:	add	r0, sp, #108	; 0x6c
   204e4:	bl	1f008 <__assert_fail@plt+0xd64c>
   204e8:	ldr	r3, [sp, #108]	; 0x6c
   204ec:	mov	r7, r0
   204f0:	cmp	r3, #0
   204f4:	bne	20584 <__assert_fail@plt+0xebc8>
   204f8:	cmp	r0, #0
   204fc:	beq	20258 <__assert_fail@plt+0xe89c>
   20500:	ldr	r3, [sp, #32]
   20504:	cmp	r6, r7
   20508:	movne	r3, #0
   2050c:	andeq	r3, r3, #1
   20510:	str	r3, [sp, #32]
   20514:	ldr	r2, [sp, #32]
   20518:	ldr	r3, [sp, #64]	; 0x40
   2051c:	cmp	r2, #0
   20520:	moveq	r3, r9
   20524:	str	r3, [sp, #64]	; 0x40
   20528:	ldrb	r3, [r7, #52]	; 0x34
   2052c:	tst	r3, #16
   20530:	beq	20578 <__assert_fail@plt+0xebbc>
   20534:	tst	r3, #128	; 0x80
   20538:	ldr	r6, [sp, #172]	; 0xac
   2053c:	beq	20558 <__assert_fail@plt+0xeb9c>
   20540:	mov	r2, r6
   20544:	mov	r1, r7
   20548:	add	r0, sp, #132	; 0x84
   2054c:	bl	1c6c0 <__assert_fail@plt+0xad04>
   20550:	cmp	r0, #0
   20554:	beq	20578 <__assert_fail@plt+0xebbc>
   20558:	ldr	r3, [sp, #36]	; 0x24
   2055c:	mov	r4, r6
   20560:	cmp	r3, #0
   20564:	beq	200e4 <__assert_fail@plt+0xe728>
   20568:	ldr	r3, [sp, #36]	; 0x24
   2056c:	str	r3, [sp, #44]	; 0x2c
   20570:	mov	r3, #0
   20574:	str	r3, [sp, #48]	; 0x30
   20578:	mov	r6, r7
   2057c:	ldr	r9, [sp, #64]	; 0x40
   20580:	b	2016c <__assert_fail@plt+0xe7b0>
   20584:	cmp	r0, #0
   20588:	bne	20500 <__assert_fail@plt+0xeb44>
   2058c:	b	2027c <__assert_fail@plt+0xe8c0>
   20590:	mvn	r4, #0
   20594:	b	20164 <__assert_fail@plt+0xe7a8>
   20598:	cmn	r4, #2
   2059c:	beq	1fc60 <__assert_fail@plt+0xe2a4>
   205a0:	ldr	r2, [sp, #8]
   205a4:	str	r4, [sp, #224]	; 0xe0
   205a8:	ldrb	r3, [sl, #28]
   205ac:	cmp	r2, #1
   205b0:	movls	r2, #0
   205b4:	movhi	r2, #1
   205b8:	eor	r3, r3, #16
   205bc:	ands	r6, r2, r3, lsr #4
   205c0:	bne	205d0 <__assert_fail@plt+0xec14>
   205c4:	ldr	r3, [fp, #76]	; 0x4c
   205c8:	cmp	r3, #0
   205cc:	beq	205fc <__assert_fail@plt+0xec40>
   205d0:	ldr	r3, [sp, #232]	; 0xe8
   205d4:	mov	r2, r4
   205d8:	add	r0, sp, #132	; 0x84
   205dc:	ldr	r1, [r3, r4, lsl #2]
   205e0:	bl	1c6c0 <__assert_fail@plt+0xad04>
   205e4:	cmp	r6, #0
   205e8:	str	r0, [sp, #228]	; 0xe4
   205ec:	beq	205fc <__assert_fail@plt+0xec40>
   205f0:	ldrb	r3, [fp, #88]	; 0x58
   205f4:	tst	r3, #1
   205f8:	bne	20608 <__assert_fail@plt+0xec4c>
   205fc:	ldr	r3, [fp, #76]	; 0x4c
   20600:	cmp	r3, #0
   20604:	beq	20f78 <__assert_fail@plt+0xf5bc>
   20608:	ldr	r3, [sp, #216]	; 0xd8
   2060c:	cmn	r4, #-1073741822	; 0xc0000002
   20610:	ldr	r8, [sp, #228]	; 0xe4
   20614:	str	r3, [sp, #32]
   20618:	bhi	1fc60 <__assert_fail@plt+0xe2a4>
   2061c:	add	r9, r4, #1
   20620:	lsl	r9, r9, #2
   20624:	mov	r0, r9
   20628:	bl	18840 <__assert_fail@plt+0x6e84>
   2062c:	subs	r7, r0, #0
   20630:	beq	20794 <__assert_fail@plt+0xedd8>
   20634:	ldr	r3, [sp, #32]
   20638:	ldr	r6, [r3, #76]	; 0x4c
   2063c:	cmp	r6, #0
   20640:	beq	2072c <__assert_fail@plt+0xed70>
   20644:	mov	r0, r9
   20648:	bl	18840 <__assert_fail@plt+0x6e84>
   2064c:	subs	r6, r0, #0
   20650:	beq	20798 <__assert_fail@plt+0xeddc>
   20654:	add	r3, r4, #1
   20658:	mov	r1, #0
   2065c:	lsl	r2, r3, #2
   20660:	mov	r0, r6
   20664:	str	r3, [sp, #44]	; 0x2c
   20668:	bl	11818 <memset@plt>
   2066c:	mov	r3, #0
   20670:	add	r1, sp, #268	; 0x10c
   20674:	str	r7, [sp, #268]	; 0x10c
   20678:	add	r0, sp, #132	; 0x84
   2067c:	str	r6, [sp, #272]	; 0x110
   20680:	str	r8, [sp, #276]	; 0x114
   20684:	str	r4, [sp, #280]	; 0x118
   20688:	str	r3, [sp, #284]	; 0x11c
   2068c:	str	r3, [sp, #288]	; 0x120
   20690:	str	r3, [sp, #292]	; 0x124
   20694:	bl	1f71c <__assert_fail@plt+0xdd60>
   20698:	mov	r9, r0
   2069c:	ldr	r0, [sp, #292]	; 0x124
   206a0:	bl	18758 <__assert_fail@plt+0x6d9c>
   206a4:	cmp	r9, #0
   206a8:	bne	2079c <__assert_fail@plt+0xede0>
   206ac:	ldr	r2, [r7]
   206b0:	ldr	r3, [sp, #44]	; 0x2c
   206b4:	cmp	r2, #0
   206b8:	bne	20700 <__assert_fail@plt+0xed44>
   206bc:	ldr	r2, [r6]
   206c0:	cmp	r2, #0
   206c4:	bne	20700 <__assert_fail@plt+0xed44>
   206c8:	ldr	r2, [sp, #232]	; 0xe8
   206cc:	subs	r4, r4, #1
   206d0:	bcc	207c4 <__assert_fail@plt+0xee08>
   206d4:	ldr	r1, [r2, r4, lsl #2]
   206d8:	cmp	r1, #0
   206dc:	beq	206cc <__assert_fail@plt+0xed10>
   206e0:	ldrb	r3, [r1, #52]	; 0x34
   206e4:	tst	r3, #16
   206e8:	beq	206cc <__assert_fail@plt+0xed10>
   206ec:	mov	r2, r4
   206f0:	add	r0, sp, #132	; 0x84
   206f4:	bl	1c6c0 <__assert_fail@plt+0xad04>
   206f8:	mov	r8, r0
   206fc:	b	20654 <__assert_fail@plt+0xec98>
   20700:	mov	r2, r6
   20704:	mov	r1, r7
   20708:	ldr	r0, [sp, #32]
   2070c:	bl	1e144 <__assert_fail@plt+0xc788>
   20710:	mov	r9, r0
   20714:	mov	r0, r6
   20718:	bl	18758 <__assert_fail@plt+0x6d9c>
   2071c:	cmp	r9, #0
   20720:	beq	20774 <__assert_fail@plt+0xedb8>
   20724:	mov	r6, #0
   20728:	b	2079c <__assert_fail@plt+0xede0>
   2072c:	add	r1, sp, #268	; 0x10c
   20730:	add	r0, sp, #132	; 0x84
   20734:	str	r7, [sp, #268]	; 0x10c
   20738:	str	r6, [sp, #272]	; 0x110
   2073c:	str	r8, [sp, #276]	; 0x114
   20740:	str	r4, [sp, #280]	; 0x118
   20744:	str	r6, [sp, #284]	; 0x11c
   20748:	str	r6, [sp, #288]	; 0x120
   2074c:	str	r6, [sp, #292]	; 0x124
   20750:	bl	1f71c <__assert_fail@plt+0xdd60>
   20754:	mov	r9, r0
   20758:	ldr	r0, [sp, #292]	; 0x124
   2075c:	bl	18758 <__assert_fail@plt+0x6d9c>
   20760:	cmp	r9, #0
   20764:	bne	2079c <__assert_fail@plt+0xede0>
   20768:	ldr	r6, [r7]
   2076c:	cmp	r6, #0
   20770:	beq	207c4 <__assert_fail@plt+0xee08>
   20774:	ldr	r0, [sp, #232]	; 0xe8
   20778:	bl	18758 <__assert_fail@plt+0x6d9c>
   2077c:	str	r4, [sp, #224]	; 0xe0
   20780:	str	r7, [sp, #232]	; 0xe8
   20784:	mov	r7, #0
   20788:	mov	r9, r7
   2078c:	str	r8, [sp, #228]	; 0xe4
   20790:	b	20724 <__assert_fail@plt+0xed68>
   20794:	mov	r6, r7
   20798:	mov	r9, #12
   2079c:	mov	r0, r7
   207a0:	bl	18758 <__assert_fail@plt+0x6d9c>
   207a4:	mov	r0, r6
   207a8:	bl	18758 <__assert_fail@plt+0x6d9c>
   207ac:	cmp	r9, #0
   207b0:	beq	20f78 <__assert_fail@plt+0xf5bc>
   207b4:	cmp	r9, #1
   207b8:	beq	200ec <__assert_fail@plt+0xe730>
   207bc:	str	r9, [sp, #12]
   207c0:	b	1fdf0 <__assert_fail@plt+0xe434>
   207c4:	mov	r9, #1
   207c8:	b	2079c <__assert_fail@plt+0xede0>
   207cc:	str	r2, [r1, r3, lsl #3]
   207d0:	str	r2, [r5, r3, lsl #3]
   207d4:	add	r3, r3, #1
   207d8:	ldr	r0, [sp, #8]
   207dc:	cmp	r3, r0
   207e0:	bne	207cc <__assert_fail@plt+0xee10>
   207e4:	mov	r3, #0
   207e8:	subs	r2, r0, #1
   207ec:	movne	r2, #1
   207f0:	str	r3, [r5]
   207f4:	ldr	r3, [sp, #224]	; 0xe0
   207f8:	str	r3, [r5, #4]
   207fc:	ldrb	r3, [sl, #28]
   20800:	eor	r3, r3, #16
   20804:	ands	r3, r2, r3, lsr #4
   20808:	beq	20e58 <__assert_fail@plt+0xf49c>
   2080c:	ldrb	r4, [fp, #88]	; 0x58
   20810:	ands	r4, r4, #1
   20814:	beq	20828 <__assert_fail@plt+0xee6c>
   20818:	ldr	r4, [fp, #76]	; 0x4c
   2081c:	cmp	r4, #0
   20820:	movle	r4, #0
   20824:	movgt	r4, #1
   20828:	ldr	r3, [sl]
   2082c:	mov	r2, #2
   20830:	add	r7, sp, #280	; 0x118
   20834:	cmp	r4, #0
   20838:	str	r3, [sp, #16]
   2083c:	mov	r3, #0
   20840:	str	r2, [sp, #124]	; 0x7c
   20844:	str	r3, [sp, #120]	; 0x78
   20848:	str	r3, [sp, #128]	; 0x80
   2084c:	str	r3, [sp, #268]	; 0x10c
   20850:	mov	r3, #16
   20854:	str	r7, [sp, #276]	; 0x114
   20858:	str	r3, [sp, #272]	; 0x110
   2085c:	beq	20878 <__assert_fail@plt+0xeebc>
   20860:	mov	r0, #48	; 0x30
   20864:	bl	18840 <__assert_fail@plt+0x6e84>
   20868:	cmp	r0, #0
   2086c:	str	r0, [sp, #128]	; 0x80
   20870:	addne	r4, sp, #120	; 0x78
   20874:	beq	1fc60 <__assert_fail@plt+0xe2a4>
   20878:	ldr	r2, [sp, #8]
   2087c:	ldr	r3, [sp, #16]
   20880:	ldr	r6, [r3, #72]	; 0x48
   20884:	mov	r3, #0
   20888:	str	r3, [sp, #108]	; 0x6c
   2088c:	str	r3, [sp, #112]	; 0x70
   20890:	str	r3, [sp, #116]	; 0x74
   20894:	ldr	r3, [sp, #268]	; 0x10c
   20898:	cmp	r2, r3
   2089c:	ldrls	r3, [sp, #8]
   208a0:	strls	r3, [sp, #268]	; 0x10c
   208a4:	bls	208fc <__assert_fail@plt+0xef40>
   208a8:	mov	r3, #8
   208ac:	mov	r2, r7
   208b0:	ldr	r1, [sp, #8]
   208b4:	add	r0, sp, #268	; 0x10c
   208b8:	bl	24c30 <__assert_fail@plt+0x13274>
   208bc:	cmp	r0, #0
   208c0:	bne	208fc <__assert_fail@plt+0xef40>
   208c4:	ldr	r0, [sp, #276]	; 0x114
   208c8:	cmp	r0, r7
   208cc:	beq	208d4 <__assert_fail@plt+0xef18>
   208d0:	bl	18758 <__assert_fail@plt+0x6d9c>
   208d4:	mov	r3, #0
   208d8:	str	r3, [sp, #268]	; 0x10c
   208dc:	mvn	r3, #0
   208e0:	str	r7, [sp, #276]	; 0x114
   208e4:	str	r3, [sp, #272]	; 0x110
   208e8:	add	r0, sp, #268	; 0x10c
   208ec:	bl	1d66c <__assert_fail@plt+0xbcb0>
   208f0:	mov	r0, r4
   208f4:	bl	1bd44 <__assert_fail@plt+0xa388>
   208f8:	b	1fc60 <__assert_fail@plt+0xe2a4>
   208fc:	ldr	r3, [sp, #8]
   20900:	mov	r1, r5
   20904:	ldr	r7, [sp, #276]	; 0x114
   20908:	lsl	r8, r3, #3
   2090c:	mov	r0, r7
   20910:	mov	r2, r8
   20914:	bl	115e4 <memcpy@plt>
   20918:	mov	r2, r5
   2091c:	ldr	r3, [r2], #4
   20920:	str	r2, [sp, #28]
   20924:	str	r3, [sp, #104]	; 0x68
   20928:	ldr	r3, [sp, #8]
   2092c:	lsl	r3, r3, #4
   20930:	str	r3, [sp, #24]
   20934:	ldr	r3, [r5, #4]
   20938:	ldr	r2, [sp, #104]	; 0x68
   2093c:	cmp	r2, r3
   20940:	bgt	20c1c <__assert_fail@plt+0xf260>
   20944:	ldr	r3, [sp, #16]
   20948:	lsl	r0, r6, #3
   2094c:	ldr	r3, [r3]
   20950:	add	r1, r3, r0
   20954:	ldrb	ip, [r1, #4]
   20958:	cmp	ip, #8
   2095c:	bne	20ba0 <__assert_fail@plt+0xf1e4>
   20960:	ldr	r3, [r3, r6, lsl #3]
   20964:	ldr	r1, [sp, #8]
   20968:	add	r3, r3, #1
   2096c:	cmp	r1, r3
   20970:	ble	20984 <__assert_fail@plt+0xefc8>
   20974:	add	r1, r5, r3, lsl #3
   20978:	str	r2, [r5, r3, lsl #3]
   2097c:	mvn	r3, #0
   20980:	str	r3, [r1, #4]
   20984:	ldr	r2, [r5, #4]
   20988:	ldr	r3, [sp, #104]	; 0x68
   2098c:	cmp	r2, r3
   20990:	bne	209a0 <__assert_fail@plt+0xefe4>
   20994:	ldr	r3, [sp, #228]	; 0xe4
   20998:	cmp	r6, r3
   2099c:	beq	20c14 <__assert_fail@plt+0xf258>
   209a0:	cmp	r4, #0
   209a4:	beq	20a04 <__assert_fail@plt+0xf048>
   209a8:	mov	r1, r6
   209ac:	add	r0, sp, #108	; 0x6c
   209b0:	bl	18acc <__assert_fail@plt+0x7110>
   209b4:	cmp	r0, #0
   209b8:	beq	20a04 <__assert_fail@plt+0xf048>
   209bc:	mov	r3, #0
   209c0:	ldr	r2, [r5, r3, lsl #3]
   209c4:	cmp	r2, #0
   209c8:	blt	20c4c <__assert_fail@plt+0xf290>
   209cc:	ldr	r2, [sp, #28]
   209d0:	ldr	r2, [r2, r3, lsl #3]
   209d4:	cmn	r2, #1
   209d8:	bne	20c4c <__assert_fail@plt+0xf290>
   209dc:	add	r3, sp, #108	; 0x6c
   209e0:	add	r1, sp, #104	; 0x68
   209e4:	str	r7, [sp]
   209e8:	mov	r0, r4
   209ec:	ldr	r2, [sp, #8]
   209f0:	str	r3, [sp, #4]
   209f4:	mov	r3, r5
   209f8:	bl	1a280 <__assert_fail@plt+0x88c4>
   209fc:	subs	r6, r0, #0
   20a00:	blt	20c1c <__assert_fail@plt+0xf260>
   20a04:	ldr	r9, [sp, #216]	; 0xd8
   20a08:	lsl	sl, r6, #3
   20a0c:	str	r6, [sp, #20]
   20a10:	ldr	r3, [r9]
   20a14:	add	r1, r3, sl
   20a18:	ldrb	r2, [r1, #4]
   20a1c:	tst	r2, #8
   20a20:	beq	20c88 <__assert_fail@plt+0xf2cc>
   20a24:	ldr	r2, [sp, #104]	; 0x68
   20a28:	mov	r1, r6
   20a2c:	add	r0, sp, #108	; 0x6c
   20a30:	ldr	r3, [sp, #232]	; 0xe8
   20a34:	ldr	sl, [r3, r2, lsl #2]
   20a38:	mov	r2, #12
   20a3c:	add	r3, sl, #4
   20a40:	str	r3, [sp, #20]
   20a44:	ldr	r3, [r9, #20]
   20a48:	mla	sl, r2, r6, r3
   20a4c:	bl	18acc <__assert_fail@plt+0x7110>
   20a50:	cmp	r0, #0
   20a54:	beq	20c60 <__assert_fail@plt+0xf2a4>
   20a58:	ldr	r2, [sl, #4]
   20a5c:	mov	r3, #0
   20a60:	mvn	r6, #0
   20a64:	cmp	r3, r2
   20a68:	bge	20b8c <__assert_fail@plt+0xf1d0>
   20a6c:	ldr	r1, [sl, #8]
   20a70:	str	r3, [sp, #32]
   20a74:	ldr	r0, [sp, #20]
   20a78:	str	r2, [sp, #36]	; 0x24
   20a7c:	ldr	r9, [r1, r3, lsl #2]
   20a80:	mov	r1, r9
   20a84:	bl	18acc <__assert_fail@plt+0x7110>
   20a88:	cmp	r0, #0
   20a8c:	ldr	r3, [sp, #32]
   20a90:	ldr	r2, [sp, #36]	; 0x24
   20a94:	beq	20c80 <__assert_fail@plt+0xf2c4>
   20a98:	cmn	r6, #1
   20a9c:	beq	20c7c <__assert_fail@plt+0xf2c0>
   20aa0:	mov	r1, r6
   20aa4:	add	r0, sp, #108	; 0x6c
   20aa8:	bl	18acc <__assert_fail@plt+0x7110>
   20aac:	cmp	r0, #0
   20ab0:	bne	20e50 <__assert_fail@plt+0xf494>
   20ab4:	cmp	r4, #0
   20ab8:	beq	20b8c <__assert_fail@plt+0xf1d0>
   20abc:	ldr	sl, [r4]
   20ac0:	ldr	r3, [sp, #104]	; 0x68
   20ac4:	ldr	r2, [r4, #4]
   20ac8:	str	r3, [sp, #20]
   20acc:	add	r3, sl, #1
   20ad0:	cmp	r3, r2
   20ad4:	str	r3, [r4]
   20ad8:	bne	20b04 <__assert_fail@plt+0xf148>
   20adc:	mov	r1, #48	; 0x30
   20ae0:	ldr	r0, [r4, #8]
   20ae4:	mul	r1, r1, r3
   20ae8:	bl	188bc <__assert_fail@plt+0x6f00>
   20aec:	cmp	r0, #0
   20af0:	beq	20c70 <__assert_fail@plt+0xf2b4>
   20af4:	ldr	r3, [r4, #4]
   20af8:	str	r0, [r4, #8]
   20afc:	lsl	r3, r3, #1
   20b00:	str	r3, [r4, #4]
   20b04:	mov	r0, #24
   20b08:	ldr	r2, [r4, #8]
   20b0c:	mul	sl, r0, sl
   20b10:	ldr	r1, [sp, #20]
   20b14:	ldr	r0, [sp, #24]
   20b18:	add	r3, r2, sl
   20b1c:	str	r1, [r2, sl]
   20b20:	str	r9, [r3, #4]
   20b24:	str	r3, [sp, #20]
   20b28:	bl	18840 <__assert_fail@plt+0x6e84>
   20b2c:	ldr	r3, [sp, #20]
   20b30:	str	r0, [r3, #8]
   20b34:	ldr	r3, [r4, #8]
   20b38:	add	r3, r3, sl
   20b3c:	ldr	r0, [r3, #8]
   20b40:	cmp	r0, #0
   20b44:	beq	20c70 <__assert_fail@plt+0xf2b4>
   20b48:	mov	r2, r8
   20b4c:	mov	r1, r5
   20b50:	bl	115e4 <memcpy@plt>
   20b54:	ldr	r3, [r4, #8]
   20b58:	mov	r2, r8
   20b5c:	mov	r1, r7
   20b60:	add	r3, r3, sl
   20b64:	ldr	r0, [r3, #8]
   20b68:	add	r0, r0, r8
   20b6c:	bl	115e4 <memcpy@plt>
   20b70:	ldr	r0, [r4, #8]
   20b74:	add	r1, sp, #108	; 0x6c
   20b78:	add	r0, r0, sl
   20b7c:	add	r0, r0, #12
   20b80:	bl	1b468 <__assert_fail@plt+0x9aac>
   20b84:	cmp	r0, #0
   20b88:	bne	20c70 <__assert_fail@plt+0xf2b4>
   20b8c:	cmp	r6, #0
   20b90:	bge	20934 <__assert_fail@plt+0xef78>
   20b94:	cmn	r6, #2
   20b98:	bne	20cd0 <__assert_fail@plt+0xf314>
   20b9c:	b	20c70 <__assert_fail@plt+0xf2b4>
   20ba0:	cmp	ip, #9
   20ba4:	bne	20984 <__assert_fail@plt+0xefc8>
   20ba8:	ldr	r3, [r3, r0]
   20bac:	ldr	r0, [sp, #8]
   20bb0:	add	r3, r3, #1
   20bb4:	cmp	r0, r3
   20bb8:	ble	20984 <__assert_fail@plt+0xefc8>
   20bbc:	ldr	ip, [r5, r3, lsl #3]
   20bc0:	add	r0, r5, r3, lsl #3
   20bc4:	cmp	r2, ip
   20bc8:	ble	20be4 <__assert_fail@plt+0xf228>
   20bcc:	mov	r1, r5
   20bd0:	str	r2, [r0, #4]
   20bd4:	mov	r2, r8
   20bd8:	mov	r0, r7
   20bdc:	bl	115e4 <memcpy@plt>
   20be0:	b	20984 <__assert_fail@plt+0xefc8>
   20be4:	ldrb	r1, [r1, #6]
   20be8:	tst	r1, #8
   20bec:	beq	20c0c <__assert_fail@plt+0xf250>
   20bf0:	ldr	r3, [r7, r3, lsl #3]
   20bf4:	cmn	r3, #1
   20bf8:	beq	20c0c <__assert_fail@plt+0xf250>
   20bfc:	mov	r2, r8
   20c00:	mov	r1, r7
   20c04:	mov	r0, r5
   20c08:	b	20bdc <__assert_fail@plt+0xf220>
   20c0c:	str	r2, [r0, #4]
   20c10:	b	20984 <__assert_fail@plt+0xefc8>
   20c14:	cmp	r4, #0
   20c18:	bne	209bc <__assert_fail@plt+0xf000>
   20c1c:	ldr	r0, [sp, #116]	; 0x74
   20c20:	bl	18758 <__assert_fail@plt+0x6d9c>
   20c24:	add	r0, sp, #268	; 0x10c
   20c28:	bl	1d66c <__assert_fail@plt+0xbcb0>
   20c2c:	mov	r0, r4
   20c30:	bl	1bd44 <__assert_fail@plt+0xa388>
   20c34:	cmp	r0, #0
   20c38:	beq	20e58 <__assert_fail@plt+0xf49c>
   20c3c:	str	r0, [sp, #12]
   20c40:	b	1fdf0 <__assert_fail@plt+0xe434>
   20c44:	beq	feacb6f4 <optarg@@GLIBC_2.4+0xfea944d4>
   20c48:	andeq	pc, r3, r0, lsl #30
   20c4c:	ldr	r2, [sp, #8]
   20c50:	add	r3, r3, #1
   20c54:	cmp	r2, r3
   20c58:	bne	209c0 <__assert_fail@plt+0xf004>
   20c5c:	b	20c1c <__assert_fail@plt+0xf260>
   20c60:	add	r0, sp, #108	; 0x6c
   20c64:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   20c68:	cmp	r0, #0
   20c6c:	bne	20a58 <__assert_fail@plt+0xf09c>
   20c70:	ldr	r0, [sp, #116]	; 0x74
   20c74:	bl	18758 <__assert_fail@plt+0x6d9c>
   20c78:	b	208e8 <__assert_fail@plt+0xef2c>
   20c7c:	mov	r6, r9
   20c80:	add	r3, r3, #1
   20c84:	b	20a64 <__assert_fail@plt+0xf0a8>
   20c88:	ldrb	r1, [r1, #6]
   20c8c:	tst	r1, #16
   20c90:	beq	20d14 <__assert_fail@plt+0xf358>
   20c94:	add	r2, sp, #132	; 0x84
   20c98:	mov	r0, r9
   20c9c:	ldr	r1, [sp, #20]
   20ca0:	ldr	r3, [sp, #104]	; 0x68
   20ca4:	bl	1af94 <__assert_fail@plt+0x95d8>
   20ca8:	subs	r3, r0, #0
   20cac:	bne	20d98 <__assert_fail@plt+0xf3dc>
   20cb0:	ldr	r1, [r9]
   20cb4:	add	r0, sp, #132	; 0x84
   20cb8:	ldr	r2, [sp, #104]	; 0x68
   20cbc:	add	r1, r1, sl
   20cc0:	bl	1c5a0 <__assert_fail@plt+0xabe4>
   20cc4:	cmp	r0, #0
   20cc8:	movne	r3, #0
   20ccc:	bne	20d98 <__assert_fail@plt+0xf3dc>
   20cd0:	add	r3, sp, #108	; 0x6c
   20cd4:	add	r1, sp, #104	; 0x68
   20cd8:	str	r7, [sp]
   20cdc:	mov	r0, r4
   20ce0:	ldr	r2, [sp, #8]
   20ce4:	str	r3, [sp, #4]
   20ce8:	mov	r3, r5
   20cec:	bl	1a280 <__assert_fail@plt+0x88c4>
   20cf0:	subs	r6, r0, #0
   20cf4:	bge	20934 <__assert_fail@plt+0xef78>
   20cf8:	ldr	r0, [sp, #116]	; 0x74
   20cfc:	bl	18758 <__assert_fail@plt+0x6d9c>
   20d00:	add	r0, sp, #268	; 0x10c
   20d04:	bl	1d66c <__assert_fail@plt+0xbcb0>
   20d08:	mov	r0, r4
   20d0c:	bl	1bd44 <__assert_fail@plt+0xa388>
   20d10:	b	1fde8 <__assert_fail@plt+0xe42c>
   20d14:	cmp	r2, #4
   20d18:	bne	20cb0 <__assert_fail@plt+0xf2f4>
   20d1c:	ldr	r3, [r3, sl]
   20d20:	ldr	r2, [sp, #8]
   20d24:	add	r3, r3, #1
   20d28:	cmp	r2, r3
   20d2c:	ble	20f6c <__assert_fail@plt+0xf5b0>
   20d30:	add	r2, r5, r3, lsl #3
   20d34:	ldr	r0, [r5, r3, lsl #3]
   20d38:	cmp	r4, #0
   20d3c:	ldr	r2, [r2, #4]
   20d40:	sub	r3, r2, r0
   20d44:	beq	20dfc <__assert_fail@plt+0xf440>
   20d48:	cmn	r0, #1
   20d4c:	beq	20cd0 <__assert_fail@plt+0xf314>
   20d50:	cmn	r2, #1
   20d54:	beq	20cd0 <__assert_fail@plt+0xf314>
   20d58:	cmp	r3, #0
   20d5c:	beq	20e04 <__assert_fail@plt+0xf448>
   20d60:	ldr	r1, [sp, #104]	; 0x68
   20d64:	ldr	ip, [sp, #136]	; 0x88
   20d68:	ldr	r2, [sp, #160]	; 0xa0
   20d6c:	sub	r2, r2, r1
   20d70:	cmp	r3, r2
   20d74:	bgt	20cd0 <__assert_fail@plt+0xf314>
   20d78:	mov	r2, r3
   20d7c:	add	r1, ip, r1
   20d80:	str	r3, [sp, #32]
   20d84:	add	r0, ip, r0
   20d88:	bl	1162c <memcmp@plt>
   20d8c:	cmp	r0, #0
   20d90:	ldr	r3, [sp, #32]
   20d94:	bne	20cd0 <__assert_fail@plt+0xf314>
   20d98:	ldr	r2, [r9, #12]
   20d9c:	cmp	r3, #0
   20da0:	ldr	r1, [sp, #20]
   20da4:	ldr	r6, [r2, r1, lsl #2]
   20da8:	ldr	r2, [sp, #104]	; 0x68
   20dac:	addeq	r3, r2, #1
   20db0:	addne	r3, r2, r3
   20db4:	cmp	r4, #0
   20db8:	str	r3, [sp, #104]	; 0x68
   20dbc:	beq	20df0 <__assert_fail@plt+0xf434>
   20dc0:	ldr	r2, [sp, #224]	; 0xe0
   20dc4:	cmp	r3, r2
   20dc8:	bgt	20cd0 <__assert_fail@plt+0xf314>
   20dcc:	ldr	r2, [sp, #232]	; 0xe8
   20dd0:	ldr	r0, [r2, r3, lsl #2]
   20dd4:	cmp	r0, #0
   20dd8:	beq	20cd0 <__assert_fail@plt+0xf314>
   20ddc:	mov	r1, r6
   20de0:	add	r0, r0, #4
   20de4:	bl	18acc <__assert_fail@plt+0x7110>
   20de8:	cmp	r0, #0
   20dec:	beq	20cd0 <__assert_fail@plt+0xf314>
   20df0:	mov	r3, #0
   20df4:	str	r3, [sp, #112]	; 0x70
   20df8:	b	20b8c <__assert_fail@plt+0xf1d0>
   20dfc:	cmp	r3, #0
   20e00:	bne	20d98 <__assert_fail@plt+0xf3dc>
   20e04:	mov	r1, r6
   20e08:	add	r0, sp, #108	; 0x6c
   20e0c:	bl	1bd9c <__assert_fail@plt+0xa3e0>
   20e10:	cmp	r0, #0
   20e14:	beq	20c70 <__assert_fail@plt+0xf2b4>
   20e18:	ldr	r2, [r9, #20]
   20e1c:	mov	r3, #12
   20e20:	mla	r6, r3, r6, r2
   20e24:	ldr	r2, [sp, #104]	; 0x68
   20e28:	ldr	r3, [r6, #8]
   20e2c:	ldr	r6, [r3]
   20e30:	ldr	r3, [sp, #232]	; 0xe8
   20e34:	mov	r1, r6
   20e38:	ldr	r0, [r3, r2, lsl #2]
   20e3c:	add	r0, r0, #4
   20e40:	bl	18acc <__assert_fail@plt+0x7110>
   20e44:	cmp	r0, #0
   20e48:	beq	20cb0 <__assert_fail@plt+0xf2f4>
   20e4c:	b	20b8c <__assert_fail@plt+0xf1d0>
   20e50:	mov	r6, r9
   20e54:	b	20b8c <__assert_fail@plt+0xf1d0>
   20e58:	ldrb	r6, [sp, #208]	; 0xd0
   20e5c:	mov	r2, r5
   20e60:	mov	r3, #0
   20e64:	ldr	r0, [sp, #100]	; 0x64
   20e68:	ldr	lr, [sp, #144]	; 0x90
   20e6c:	ldr	r4, [sp, #160]	; 0xa0
   20e70:	ldr	ip, [sp, #164]	; 0xa4
   20e74:	ldr	r1, [r5, r3, lsl #3]
   20e78:	cmn	r1, #1
   20e7c:	beq	20ec4 <__assert_fail@plt+0xf508>
   20e80:	cmp	r6, #0
   20e84:	beq	20eac <__assert_fail@plt+0xf4f0>
   20e88:	cmp	r1, r4
   20e8c:	ldrne	r1, [lr, r1, lsl #2]
   20e90:	moveq	r1, ip
   20e94:	str	r1, [r5, r3, lsl #3]
   20e98:	ldr	r1, [r2, #4]
   20e9c:	cmp	r4, r1
   20ea0:	ldrne	r1, [lr, r1, lsl #2]
   20ea4:	moveq	r1, ip
   20ea8:	str	r1, [r2, #4]
   20eac:	ldr	r1, [r5, r3, lsl #3]
   20eb0:	add	r1, r1, r0
   20eb4:	str	r1, [r5, r3, lsl #3]
   20eb8:	ldr	r1, [r2, #4]
   20ebc:	add	r1, r1, r0
   20ec0:	str	r1, [r2, #4]
   20ec4:	ldr	r1, [sp, #8]
   20ec8:	add	r3, r3, #1
   20ecc:	add	r2, r2, #8
   20ed0:	cmp	r3, r1
   20ed4:	bne	20e74 <__assert_fail@plt+0xf4b8>
   20ed8:	ldr	r3, [sp, #8]
   20edc:	mov	r2, #0
   20ee0:	mvn	r1, #0
   20ee4:	add	r3, r5, r3, lsl #3
   20ee8:	ldr	r0, [sp, #56]	; 0x38
   20eec:	add	r3, r3, #8
   20ef0:	cmp	r2, r0
   20ef4:	blt	20f50 <__assert_fail@plt+0xf594>
   20ef8:	ldr	r3, [fp, #132]	; 0x84
   20efc:	cmp	r3, #0
   20f00:	movne	r0, #0
   20f04:	addne	ip, r5, #4
   20f08:	beq	1fdf0 <__assert_fail@plt+0xe434>
   20f0c:	ldr	r1, [sp, #8]
   20f10:	add	r2, r0, #1
   20f14:	cmp	r2, r1
   20f18:	beq	1fdf0 <__assert_fail@plt+0xe434>
   20f1c:	ldr	r1, [r3]
   20f20:	cmp	r1, r0
   20f24:	beq	20f44 <__assert_fail@plt+0xf588>
   20f28:	add	r1, r1, #1
   20f2c:	ldr	r1, [r5, r1, lsl #3]
   20f30:	str	r1, [r5, r2, lsl #3]
   20f34:	ldr	r1, [r3]
   20f38:	add	r1, r5, r1, lsl #3
   20f3c:	ldr	r1, [r1, #12]
   20f40:	str	r1, [ip, r2, lsl #3]
   20f44:	add	r3, r3, #4
   20f48:	mov	r0, r2
   20f4c:	b	20f0c <__assert_fail@plt+0xf550>
   20f50:	add	r2, r2, #1
   20f54:	str	r1, [r3, #-8]
   20f58:	str	r1, [r3, #-4]
   20f5c:	b	20ee8 <__assert_fail@plt+0xf52c>
   20f60:	mov	r3, #1
   20f64:	str	r3, [sp, #12]
   20f68:	b	1fe24 <__assert_fail@plt+0xe468>
   20f6c:	cmp	r4, #0
   20f70:	beq	20e04 <__assert_fail@plt+0xf448>
   20f74:	b	20cd0 <__assert_fail@plt+0xf314>
   20f78:	ldr	r3, [sp, #8]
   20f7c:	cmp	r3, #0
   20f80:	movne	r3, #1
   20f84:	addne	r1, r5, #4
   20f88:	mvnne	r2, #0
   20f8c:	bne	207d8 <__assert_fail@plt+0xee1c>
   20f90:	b	1fdf0 <__assert_fail@plt+0xe434>
   20f94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f98:	sub	sp, sp, #148	; 0x94
   20f9c:	mov	fp, r0
   20fa0:	mov	r6, r1
   20fa4:	mov	r5, r2
   20fa8:	and	r7, r3, #16777216	; 0x1000000
   20fac:	and	r8, r3, #32
   20fb0:	ldr	sl, [sp, #188]	; 0xbc
   20fb4:	and	r9, r3, #16
   20fb8:	str	r3, [sp, #8]
   20fbc:	ldrb	r3, [r5, #4]
   20fc0:	ldr	r4, [r6]
   20fc4:	sub	r2, r3, #1
   20fc8:	cmp	r2, #35	; 0x23
   20fcc:	ldrls	pc, [pc, r2, lsl #2]
   20fd0:	b	21c6c <__assert_fail@plt+0x102b0>
   20fd4:	andeq	r1, r2, r4, rrx
   20fd8:	muleq	r2, r0, r2
   20fdc:	andeq	r1, r2, ip, ror #24
   20fe0:	andeq	r1, r2, r4, asr #18
   20fe4:	andeq	r1, r2, r0, ror #23
   20fe8:	andeq	r1, r2, ip, ror #24
   20fec:	andeq	r1, r2, ip, ror #24
   20ff0:			; <UNDEFINED> instruction: 0x000211b0
   20ff4:	andeq	r1, r2, r0, ror #19
   20ff8:	muleq	r2, r0, r2
   20ffc:			; <UNDEFINED> instruction: 0x000219b4
   21000:	andeq	r1, r2, r8, lsr #20
   21004:	andeq	r1, r2, ip, ror #24
   21008:	andeq	r1, r2, ip, ror #24
   2100c:	andeq	r1, r2, ip, ror #24
   21010:	andeq	r1, r2, ip, ror #24
   21014:	andeq	r1, r2, ip, ror #24
   21018:			; <UNDEFINED> instruction: 0x000219b4
   2101c:			; <UNDEFINED> instruction: 0x000219b4
   21020:	muleq	r2, r8, r2
   21024:	andeq	r1, r2, ip, ror #24
   21028:	andeq	r1, r2, ip, ror #24
   2102c:	andeq	r1, r2, r4, lsr #19
   21030:	andeq	r1, r2, r0, lsl #20
   21034:	andeq	r1, r2, ip, ror #24
   21038:	andeq	r1, r2, ip, ror #24
   2103c:	andeq	r1, r2, ip, ror #24
   21040:	andeq	r1, r2, ip, ror #24
   21044:	andeq	r1, r2, ip, ror #24
   21048:	andeq	r1, r2, ip, ror #24
   2104c:	andeq	r1, r2, ip, ror #24
   21050:	andeq	r1, r2, ip, lsl #24
   21054:	andeq	r1, r2, ip, lsl #24
   21058:	andeq	r1, r2, r0, asr ip
   2105c:	andeq	r1, r2, r0, asr ip
   21060:	andeq	r1, r2, ip, ror #24
   21064:	mov	r2, #0
   21068:	mov	r3, r5
   2106c:	mov	r1, r2
   21070:	mov	r0, r4
   21074:	bl	1916c <__assert_fail@plt+0x77b0>
   21078:	subs	r6, r0, #0
   2107c:	bne	2108c <__assert_fail@plt+0xf6d0>
   21080:	mov	r3, #12
   21084:	str	r3, [sl]
   21088:	b	21290 <__assert_fail@plt+0xf8d4>
   2108c:	ldr	r3, [r4, #92]	; 0x5c
   21090:	cmp	r3, #1
   21094:	bgt	21180 <__assert_fail@plt+0xf7c4>
   21098:	mov	r1, fp
   2109c:	mov	r0, r5
   210a0:	ldr	r2, [sp, #8]
   210a4:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   210a8:	ldrb	r3, [r5, #4]
   210ac:	cmp	r3, #23
   210b0:	bhi	219f4 <__assert_fail@plt+0x10038>
   210b4:	ldr	r2, [pc, #3904]	; 21ffc <__assert_fail@plt+0x10640>
   210b8:	sub	r9, r3, #18
   210bc:	clz	r9, r9
   210c0:	lsr	r9, r9, #5
   210c4:	mvn	r8, r2, lsr r3
   210c8:	ands	r8, r8, #1
   210cc:	bne	219f4 <__assert_fail@plt+0x10038>
   210d0:	ldr	r2, [fp, #40]	; 0x28
   210d4:	cmp	r3, #23
   210d8:	ldm	r5, {r0, r1}
   210dc:	str	r2, [sp, #12]
   210e0:	add	r2, sp, #112	; 0x70
   210e4:	stm	r2, {r0, r1}
   210e8:	bne	21dc0 <__assert_fail@plt+0x10404>
   210ec:	mov	r1, r5
   210f0:	mov	r0, fp
   210f4:	ldr	r2, [sp, #8]
   210f8:	bl	1d5c4 <__assert_fail@plt+0xbc08>
   210fc:	cmn	r0, #1
   21100:	mov	r9, r0
   21104:	bne	21c74 <__assert_fail@plt+0x102b8>
   21108:	ldrb	r3, [r5, #4]
   2110c:	cmp	r3, #1
   21110:	bne	21124 <__assert_fail@plt+0xf768>
   21114:	ldrb	r3, [r5]
   21118:	cmp	r3, #44	; 0x2c
   2111c:	moveq	r9, r8
   21120:	beq	21ce0 <__assert_fail@plt+0x10324>
   21124:	mov	r3, #10
   21128:	mov	r7, #0
   2112c:	str	r3, [sl]
   21130:	b	21ca8 <__assert_fail@plt+0x102ec>
   21134:	mov	r1, fp
   21138:	mov	r0, r5
   2113c:	ldr	r2, [sp, #8]
   21140:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   21144:	mov	r2, #0
   21148:	mov	r3, r5
   2114c:	mov	r1, r2
   21150:	mov	r0, r4
   21154:	bl	1916c <__assert_fail@plt+0x77b0>
   21158:	mov	r7, r0
   2115c:	mov	r2, r0
   21160:	mov	r1, r6
   21164:	mov	r3, #16
   21168:	mov	r0, r4
   2116c:	bl	192c0 <__assert_fail@plt+0x7904>
   21170:	cmp	r0, #0
   21174:	cmpne	r7, #0
   21178:	mov	r6, r0
   2117c:	beq	21080 <__assert_fail@plt+0xf6c4>
   21180:	ldr	r3, [fp, #40]	; 0x28
   21184:	ldr	r2, [fp, #56]	; 0x38
   21188:	cmp	r2, r3
   2118c:	ble	21098 <__assert_fail@plt+0xf6dc>
   21190:	ldr	r2, [fp, #28]
   21194:	cmp	r3, r2
   21198:	beq	21098 <__assert_fail@plt+0xf6dc>
   2119c:	ldr	r2, [fp, #8]
   211a0:	ldr	r3, [r2, r3, lsl #2]
   211a4:	cmn	r3, #1
   211a8:	beq	21134 <__assert_fail@plt+0xf778>
   211ac:	b	21098 <__assert_fail@plt+0xf6dc>
   211b0:	ldr	r7, [r6, #24]
   211b4:	mov	r1, fp
   211b8:	mov	r0, r5
   211bc:	add	r3, r7, #1
   211c0:	str	r3, [r6, #24]
   211c4:	ldr	r3, [sp, #8]
   211c8:	orr	r2, r3, #8388608	; 0x800000
   211cc:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   211d0:	ldrb	r3, [r5, #4]
   211d4:	cmp	r3, #9
   211d8:	moveq	r1, #0
   211dc:	beq	2123c <__assert_fail@plt+0xf880>
   211e0:	ldr	r3, [sp, #184]	; 0xb8
   211e4:	mov	r2, r5
   211e8:	mov	r1, r6
   211ec:	mov	r0, fp
   211f0:	add	r3, r3, #1
   211f4:	stm	sp, {r3, sl}
   211f8:	ldr	r3, [sp, #8]
   211fc:	bl	2216c <__assert_fail@plt+0x107b0>
   21200:	ldr	r2, [sl]
   21204:	mov	r1, r0
   21208:	cmp	r2, #0
   2120c:	bne	21234 <__assert_fail@plt+0xf878>
   21210:	ldrb	r3, [r5, #4]
   21214:	cmp	r3, #9
   21218:	beq	2123c <__assert_fail@plt+0xf880>
   2121c:	cmp	r0, #0
   21220:	beq	2122c <__assert_fail@plt+0xf870>
   21224:	ldr	r1, [pc, #3540]	; 22000 <__assert_fail@plt+0x10644>
   21228:	bl	18b40 <__assert_fail@plt+0x7184>
   2122c:	mov	r3, #8
   21230:	str	r3, [sl]
   21234:	mov	r6, #0
   21238:	b	21274 <__assert_fail@plt+0xf8b8>
   2123c:	cmp	r7, #8
   21240:	mov	r0, r4
   21244:	ldrls	r3, [r4, #84]	; 0x54
   21248:	movls	r2, #1
   2124c:	orrls	r3, r3, r2, lsl r7
   21250:	mov	r2, #0
   21254:	strls	r3, [r4, #84]	; 0x54
   21258:	mov	r3, #17
   2125c:	bl	192c0 <__assert_fail@plt+0x7904>
   21260:	subs	r6, r0, #0
   21264:	strne	r7, [r6, #20]
   21268:	bne	21274 <__assert_fail@plt+0xf8b8>
   2126c:	mov	r3, #12
   21270:	str	r3, [sl]
   21274:	ldr	r2, [sl]
   21278:	clz	r3, r6
   2127c:	lsr	r3, r3, #5
   21280:	cmp	r2, #0
   21284:	moveq	r3, #0
   21288:	cmp	r3, #0
   2128c:	beq	21098 <__assert_fail@plt+0xf6dc>
   21290:	mov	r6, #0
   21294:	b	219f4 <__assert_fail@plt+0x10038>
   21298:	mov	r6, #0
   2129c:	mov	r1, #1
   212a0:	mov	r0, #32
   212a4:	str	r6, [sp, #52]	; 0x34
   212a8:	bl	18504 <__assert_fail@plt+0x6b48>
   212ac:	mov	r1, #1
   212b0:	str	r0, [sp, #12]
   212b4:	mov	r0, #40	; 0x28
   212b8:	bl	18504 <__assert_fail@plt+0x6b48>
   212bc:	ldr	r3, [sp, #12]
   212c0:	mov	r7, r0
   212c4:	clz	r0, r0
   212c8:	lsr	r0, r0, #5
   212cc:	cmp	r3, r6
   212d0:	movne	r8, r0
   212d4:	moveq	r8, #1
   212d8:	cmp	r8, r6
   212dc:	beq	212f4 <__assert_fail@plt+0xf938>
   212e0:	mov	r0, r3
   212e4:	bl	18758 <__assert_fail@plt+0x6d9c>
   212e8:	mov	r0, r7
   212ec:	bl	18758 <__assert_fail@plt+0x6d9c>
   212f0:	b	2126c <__assert_fail@plt+0xf8b0>
   212f4:	mov	r1, fp
   212f8:	mov	r0, r5
   212fc:	ldr	r2, [sp, #8]
   21300:	bl	18bb8 <__assert_fail@plt+0x71fc>
   21304:	ldrb	r3, [r5, #4]
   21308:	str	r0, [sp, #20]
   2130c:	cmp	r3, #2
   21310:	bne	21320 <__assert_fail@plt+0xf964>
   21314:	mov	r3, #2
   21318:	str	r3, [sl]
   2131c:	b	213f0 <__assert_fail@plt+0xfa34>
   21320:	cmp	r3, #25
   21324:	strne	r8, [sp, #32]
   21328:	bne	21388 <__assert_fail@plt+0xf9cc>
   2132c:	ldrb	r3, [r7, #16]
   21330:	orr	r3, r3, #1
   21334:	strb	r3, [r7, #16]
   21338:	ldr	r3, [sp, #8]
   2133c:	tst	r3, #256	; 0x100
   21340:	beq	21350 <__assert_fail@plt+0xf994>
   21344:	mov	r1, #10
   21348:	ldr	r0, [sp, #12]
   2134c:	bl	1892c <__assert_fail@plt+0x6f70>
   21350:	ldr	r2, [sp, #20]
   21354:	mov	r1, fp
   21358:	mov	r0, r5
   2135c:	ldr	r3, [fp, #40]	; 0x28
   21360:	add	r3, r3, r2
   21364:	ldr	r2, [sp, #8]
   21368:	str	r3, [fp, #40]	; 0x28
   2136c:	bl	18bb8 <__assert_fail@plt+0x71fc>
   21370:	ldrb	r3, [r5, #4]
   21374:	str	r0, [sp, #20]
   21378:	cmp	r3, #2
   2137c:	movne	r3, #1
   21380:	strne	r3, [sp, #32]
   21384:	beq	21314 <__assert_fail@plt+0xf958>
   21388:	ldrb	r3, [r5, #4]
   2138c:	mov	r2, #0
   21390:	cmp	r3, #21
   21394:	moveq	r3, #1
   21398:	strbeq	r3, [r5, #4]
   2139c:	mov	r3, #0
   213a0:	strd	r2, [sp, #24]
   213a4:	mov	r3, #1
   213a8:	ldr	r2, [sp, #8]
   213ac:	ubfx	r2, r2, #16, #1
   213b0:	str	r2, [sp, #36]	; 0x24
   213b4:	str	r3, [sp, #4]
   213b8:	add	r2, sp, #80	; 0x50
   213bc:	mov	r6, #3
   213c0:	ldr	r3, [sp, #8]
   213c4:	mov	r1, fp
   213c8:	add	r0, sp, #56	; 0x38
   213cc:	str	r2, [sp, #60]	; 0x3c
   213d0:	mov	r2, r5
   213d4:	str	r3, [sp]
   213d8:	ldr	r3, [sp, #20]
   213dc:	str	r6, [sp, #56]	; 0x38
   213e0:	bl	1cdb0 <__assert_fail@plt+0xb3f4>
   213e4:	cmp	r0, #0
   213e8:	beq	21404 <__assert_fail@plt+0xfa48>
   213ec:	str	r0, [sl]
   213f0:	ldr	r0, [sp, #12]
   213f4:	bl	18758 <__assert_fail@plt+0x6d9c>
   213f8:	mov	r0, r7
   213fc:	bl	19c24 <__assert_fail@plt+0x8268>
   21400:	b	21234 <__assert_fail@plt+0xf878>
   21404:	mov	r1, fp
   21408:	mov	r0, r5
   2140c:	ldr	r2, [sp, #8]
   21410:	bl	18bb8 <__assert_fail@plt+0x71fc>
   21414:	ldr	r3, [sp, #56]	; 0x38
   21418:	str	r0, [sp, #20]
   2141c:	sub	r3, r3, #2
   21420:	bics	r3, r3, #2
   21424:	beq	214d4 <__assert_fail@plt+0xfb18>
   21428:	ldrb	r3, [r5, #4]
   2142c:	cmp	r3, #2
   21430:	bne	2143c <__assert_fail@plt+0xfa80>
   21434:	mov	r3, #7
   21438:	b	21318 <__assert_fail@plt+0xf95c>
   2143c:	cmp	r3, #22
   21440:	bne	214d4 <__assert_fail@plt+0xfb18>
   21444:	ldr	r2, [sp, #20]
   21448:	mov	r1, fp
   2144c:	add	r0, sp, #72	; 0x48
   21450:	ldr	r3, [fp, #40]	; 0x28
   21454:	add	r3, r3, r2
   21458:	ldr	r2, [sp, #8]
   2145c:	str	r3, [fp, #40]	; 0x28
   21460:	bl	18bb8 <__assert_fail@plt+0x71fc>
   21464:	ldrb	r2, [sp, #76]	; 0x4c
   21468:	mov	r3, r0
   2146c:	cmp	r2, #2
   21470:	beq	21434 <__assert_fail@plt+0xfa78>
   21474:	cmp	r2, #21
   21478:	beq	214bc <__assert_fail@plt+0xfb00>
   2147c:	add	r2, sp, #112	; 0x70
   21480:	mov	r1, fp
   21484:	str	r6, [sp, #64]	; 0x40
   21488:	add	r0, sp, #64	; 0x40
   2148c:	str	r2, [sp, #68]	; 0x44
   21490:	mov	r2, #1
   21494:	str	r2, [sp, #4]
   21498:	ldr	r2, [sp, #8]
   2149c:	str	r2, [sp]
   214a0:	add	r2, sp, #72	; 0x48
   214a4:	bl	1cdb0 <__assert_fail@plt+0xb3f4>
   214a8:	subs	r3, r0, #0
   214ac:	str	r3, [sp, #16]
   214b0:	beq	214f8 <__assert_fail@plt+0xfb3c>
   214b4:	ldr	r3, [sp, #16]
   214b8:	b	21318 <__assert_fail@plt+0xf95c>
   214bc:	ldr	r2, [sp, #20]
   214c0:	ldr	r3, [fp, #40]	; 0x28
   214c4:	sub	r3, r3, r2
   214c8:	str	r3, [fp, #40]	; 0x28
   214cc:	mov	r3, #1
   214d0:	strb	r3, [r5, #4]
   214d4:	ldr	r3, [sp, #56]	; 0x38
   214d8:	cmp	r3, #4
   214dc:	ldrls	pc, [pc, r3, lsl #2]
   214e0:	b	217f0 <__assert_fail@plt+0xfe34>
   214e4:	andeq	r1, r2, r8, asr #14
   214e8:	andeq	r1, r2, r0, ror r7
   214ec:	andeq	r1, r2, r0, asr #15
   214f0:	andeq	r1, r2, r0, asr #15
   214f4:	strdeq	r1, [r2], -r0
   214f8:	mov	r1, fp
   214fc:	mov	r0, r5
   21500:	ldr	r2, [sp, #8]
   21504:	bl	18bb8 <__assert_fail@plt+0x71fc>
   21508:	ldr	r2, [sp, #56]	; 0x38
   2150c:	str	r0, [sp, #20]
   21510:	sub	r3, r2, #2
   21514:	bics	r3, r3, #2
   21518:	beq	21740 <__assert_fail@plt+0xfd84>
   2151c:	ldr	r8, [sp, #64]	; 0x40
   21520:	sub	r3, r8, #2
   21524:	bics	r3, r3, #2
   21528:	beq	21740 <__assert_fail@plt+0xfd84>
   2152c:	cmp	r2, #3
   21530:	moveq	r9, #1
   21534:	movne	r9, #0
   21538:	bne	2155c <__assert_fail@plt+0xfba0>
   2153c:	ldr	r0, [sp, #60]	; 0x3c
   21540:	str	r2, [sp, #40]	; 0x28
   21544:	bl	117ac <strlen@plt>
   21548:	cmp	r0, #1
   2154c:	ldr	r2, [sp, #40]	; 0x28
   21550:	bls	21fd4 <__assert_fail@plt+0x10618>
   21554:	mov	r3, #3
   21558:	b	21698 <__assert_fail@plt+0xfcdc>
   2155c:	cmp	r8, #3
   21560:	bne	21fe0 <__assert_fail@plt+0x10624>
   21564:	ldr	r0, [sp, #68]	; 0x44
   21568:	str	r2, [sp, #40]	; 0x28
   2156c:	bl	117ac <strlen@plt>
   21570:	cmp	r0, #1
   21574:	bhi	21554 <__assert_fail@plt+0xfb98>
   21578:	ldr	r2, [sp, #40]	; 0x28
   2157c:	cmp	r2, #0
   21580:	bne	216a0 <__assert_fail@plt+0xfce4>
   21584:	ldrb	r6, [sp, #60]	; 0x3c
   21588:	cmp	r8, #0
   2158c:	bne	216c4 <__assert_fail@plt+0xfd08>
   21590:	ldrb	r8, [sp, #68]	; 0x44
   21594:	cmp	r2, #0
   21598:	moveq	r9, #1
   2159c:	cmp	r9, #0
   215a0:	ldreq	r6, [sp, #60]	; 0x3c
   215a4:	beq	215c0 <__assert_fail@plt+0xfc04>
   215a8:	ldr	r3, [r4, #92]	; 0x5c
   215ac:	cmp	r3, #1
   215b0:	ble	215c0 <__assert_fail@plt+0xfc04>
   215b4:	mov	r0, r6
   215b8:	bl	11830 <btowc@plt>
   215bc:	mov	r6, r0
   215c0:	ldr	r3, [sp, #64]	; 0x40
   215c4:	cmp	r3, #3
   215c8:	cmpne	r3, #0
   215cc:	ldrne	r8, [sp, #68]	; 0x44
   215d0:	bne	215ec <__assert_fail@plt+0xfc30>
   215d4:	ldr	r3, [r4, #92]	; 0x5c
   215d8:	cmp	r3, #1
   215dc:	ble	215ec <__assert_fail@plt+0xfc30>
   215e0:	mov	r0, r8
   215e4:	bl	11830 <btowc@plt>
   215e8:	mov	r8, r0
   215ec:	cmn	r6, #1
   215f0:	cmnne	r8, #1
   215f4:	beq	21554 <__assert_fail@plt+0xfb98>
   215f8:	ldr	r3, [sp, #36]	; 0x24
   215fc:	cmp	r6, r8
   21600:	movls	r3, #0
   21604:	andhi	r3, r3, #1
   21608:	cmp	r3, #0
   2160c:	bne	21740 <__assert_fail@plt+0xfd84>
   21610:	ldr	r3, [r4, #92]	; 0x5c
   21614:	cmp	r3, #1
   21618:	ble	216f4 <__assert_fail@plt+0xfd38>
   2161c:	ldr	r2, [sp, #28]
   21620:	ldr	r3, [r7, #32]
   21624:	cmp	r3, r2
   21628:	bne	216d4 <__assert_fail@plt+0xfd18>
   2162c:	lsl	r9, r2, #1
   21630:	ldr	r0, [r7, #4]
   21634:	add	r9, r9, #1
   21638:	lsl	r3, r9, #2
   2163c:	mov	r1, r3
   21640:	str	r3, [sp, #44]	; 0x2c
   21644:	bl	188bc <__assert_fail@plt+0x6f00>
   21648:	ldr	r3, [sp, #44]	; 0x2c
   2164c:	mov	r2, r0
   21650:	ldr	r0, [r7, #8]
   21654:	str	r2, [sp, #40]	; 0x28
   21658:	mov	r1, r3
   2165c:	bl	188bc <__assert_fail@plt+0x6f00>
   21660:	ldr	r2, [sp, #40]	; 0x28
   21664:	mov	r3, r0
   21668:	cmp	r0, #0
   2166c:	cmpne	r2, #0
   21670:	strdne	r2, [r7, #4]
   21674:	strne	r9, [sp, #28]
   21678:	bne	216d4 <__assert_fail@plt+0xfd18>
   2167c:	mov	r0, r2
   21680:	str	r3, [sp, #16]
   21684:	bl	18758 <__assert_fail@plt+0x6d9c>
   21688:	ldr	r3, [sp, #16]
   2168c:	mov	r0, r3
   21690:	bl	18758 <__assert_fail@plt+0x6d9c>
   21694:	mov	r3, #12
   21698:	str	r3, [sp, #16]
   2169c:	b	2172c <__assert_fail@plt+0xfd70>
   216a0:	cmp	r2, #3
   216a4:	bne	216b4 <__assert_fail@plt+0xfcf8>
   216a8:	ldr	r3, [sp, #60]	; 0x3c
   216ac:	ldrb	r6, [r3]
   216b0:	b	21588 <__assert_fail@plt+0xfbcc>
   216b4:	mov	r6, #0
   216b8:	ldr	r3, [sp, #68]	; 0x44
   216bc:	ldrb	r8, [r3]
   216c0:	b	21594 <__assert_fail@plt+0xfbd8>
   216c4:	cmp	r8, #3
   216c8:	beq	216b8 <__assert_fail@plt+0xfcfc>
   216cc:	mov	r8, #0
   216d0:	b	21594 <__assert_fail@plt+0xfbd8>
   216d4:	ldr	r3, [r7, #4]
   216d8:	ldr	r2, [r7, #32]
   216dc:	str	r6, [r3, r2, lsl #2]
   216e0:	ldr	r2, [r7, #8]
   216e4:	ldr	r3, [r7, #32]
   216e8:	add	r1, r3, #1
   216ec:	str	r1, [r7, #32]
   216f0:	str	r8, [r2, r3, lsl #2]
   216f4:	mov	r9, #0
   216f8:	cmp	r6, r9
   216fc:	movhi	r3, #0
   21700:	movls	r3, #1
   21704:	cmp	r8, r9
   21708:	movcc	r3, #0
   2170c:	cmp	r3, #0
   21710:	beq	21720 <__assert_fail@plt+0xfd64>
   21714:	mov	r1, r9
   21718:	ldr	r0, [sp, #12]
   2171c:	bl	1892c <__assert_fail@plt+0x6f70>
   21720:	add	r9, r9, #1
   21724:	cmp	r9, #256	; 0x100
   21728:	bne	216f8 <__assert_fail@plt+0xfd3c>
   2172c:	ldr	r3, [sp, #16]
   21730:	cmp	r3, #0
   21734:	str	r3, [sl]
   21738:	beq	21754 <__assert_fail@plt+0xfd98>
   2173c:	b	213f0 <__assert_fail@plt+0xfa34>
   21740:	mov	r3, #11
   21744:	b	21698 <__assert_fail@plt+0xfcdc>
   21748:	ldrb	r1, [sp, #60]	; 0x3c
   2174c:	ldr	r0, [sp, #12]
   21750:	bl	1892c <__assert_fail@plt+0x6f70>
   21754:	ldrb	r3, [r5, #4]
   21758:	cmp	r3, #2
   2175c:	beq	21434 <__assert_fail@plt+0xfa78>
   21760:	cmp	r3, #21
   21764:	beq	21820 <__assert_fail@plt+0xfe64>
   21768:	mov	r3, #0
   2176c:	b	213b4 <__assert_fail@plt+0xf9f8>
   21770:	ldr	r3, [r7, #20]
   21774:	ldr	r2, [sp, #24]
   21778:	cmp	r3, r2
   2177c:	bne	217a4 <__assert_fail@plt+0xfde8>
   21780:	lsl	r3, r2, #1
   21784:	ldr	r0, [r7]
   21788:	add	r3, r3, #1
   2178c:	lsl	r1, r3, #2
   21790:	str	r3, [sp, #24]
   21794:	bl	188bc <__assert_fail@plt+0x6f00>
   21798:	cmp	r0, #0
   2179c:	beq	21fcc <__assert_fail@plt+0x10610>
   217a0:	str	r0, [r7]
   217a4:	ldr	r2, [r7]
   217a8:	ldr	r3, [r7, #20]
   217ac:	add	r1, r3, #1
   217b0:	str	r1, [r7, #20]
   217b4:	ldr	r1, [sp, #60]	; 0x3c
   217b8:	str	r1, [r2, r3, lsl #2]
   217bc:	b	21754 <__assert_fail@plt+0xfd98>
   217c0:	ldr	r6, [sp, #60]	; 0x3c
   217c4:	mov	r0, r6
   217c8:	bl	117ac <strlen@plt>
   217cc:	cmp	r0, #1
   217d0:	movne	r3, #3
   217d4:	bne	21318 <__assert_fail@plt+0xf95c>
   217d8:	ldrb	r1, [r6]
   217dc:	ldr	r0, [sp, #12]
   217e0:	bl	1892c <__assert_fail@plt+0x6f70>
   217e4:	mov	r3, #0
   217e8:	str	r3, [sl]
   217ec:	b	21754 <__assert_fail@plt+0xfd98>
   217f0:	ldr	r3, [sp, #8]
   217f4:	mov	r2, r7
   217f8:	ldr	r0, [fp, #64]	; 0x40
   217fc:	ldr	r1, [sp, #12]
   21800:	str	r3, [sp, #4]
   21804:	ldr	r3, [sp, #60]	; 0x3c
   21808:	str	r3, [sp]
   2180c:	add	r3, sp, #52	; 0x34
   21810:	bl	1a328 <__assert_fail@plt+0x896c>
   21814:	cmp	r0, #0
   21818:	str	r0, [sl]
   2181c:	b	21738 <__assert_fail@plt+0xfd7c>
   21820:	ldr	r2, [sp, #20]
   21824:	ldr	r3, [fp, #40]	; 0x28
   21828:	add	r3, r3, r2
   2182c:	str	r3, [fp, #40]	; 0x28
   21830:	ldr	r3, [sp, #32]
   21834:	cmp	r3, #0
   21838:	beq	21844 <__assert_fail@plt+0xfe88>
   2183c:	ldr	r0, [sp, #12]
   21840:	bl	18978 <__assert_fail@plt+0x6fbc>
   21844:	ldr	r3, [r4, #92]	; 0x5c
   21848:	cmp	r3, #1
   2184c:	ble	2185c <__assert_fail@plt+0xfea0>
   21850:	ldr	r0, [sp, #12]
   21854:	ldr	r1, [r4, #60]	; 0x3c
   21858:	bl	189c0 <__assert_fail@plt+0x7004>
   2185c:	ldr	r3, [r7, #20]
   21860:	cmp	r3, #0
   21864:	bne	218b0 <__assert_fail@plt+0xfef4>
   21868:	ldr	r3, [r7, #24]
   2186c:	cmp	r3, #0
   21870:	bne	218b0 <__assert_fail@plt+0xfef4>
   21874:	ldr	r3, [r7, #28]
   21878:	cmp	r3, #0
   2187c:	bne	218b0 <__assert_fail@plt+0xfef4>
   21880:	ldr	r3, [r7, #32]
   21884:	cmp	r3, #0
   21888:	bne	218b0 <__assert_fail@plt+0xfef4>
   2188c:	ldr	r3, [r4, #92]	; 0x5c
   21890:	cmp	r3, #1
   21894:	ble	21914 <__assert_fail@plt+0xff58>
   21898:	ldr	r3, [r7, #36]	; 0x24
   2189c:	cmp	r3, #0
   218a0:	bne	218b0 <__assert_fail@plt+0xfef4>
   218a4:	ldrb	r3, [r7, #16]
   218a8:	tst	r3, #1
   218ac:	beq	21914 <__assert_fail@plt+0xff58>
   218b0:	ldrb	r3, [r4, #88]	; 0x58
   218b4:	mov	r2, #0
   218b8:	mov	r0, r4
   218bc:	mov	r1, r2
   218c0:	orr	r3, r3, #2
   218c4:	strb	r3, [r4, #88]	; 0x58
   218c8:	mov	r3, #6
   218cc:	str	r7, [sp, #112]	; 0x70
   218d0:	strb	r3, [sp, #116]	; 0x74
   218d4:	add	r3, sp, #112	; 0x70
   218d8:	bl	1916c <__assert_fail@plt+0x77b0>
   218dc:	subs	r6, r0, #0
   218e0:	beq	21fcc <__assert_fail@plt+0x10610>
   218e4:	ldr	r3, [sp, #12]
   218e8:	ldr	r2, [sp, #12]
   218ec:	sub	r3, r3, #4
   218f0:	add	r2, r2, #28
   218f4:	ldr	r1, [r3, #4]!
   218f8:	cmp	r1, #0
   218fc:	bne	21f88 <__assert_fail@plt+0x105cc>
   21900:	cmp	r2, r3
   21904:	bne	218f4 <__assert_fail@plt+0xff38>
   21908:	ldr	r0, [sp, #12]
   2190c:	bl	18758 <__assert_fail@plt+0x6d9c>
   21910:	b	21274 <__assert_fail@plt+0xf8b8>
   21914:	mov	r0, r7
   21918:	bl	19c24 <__assert_fail@plt+0x8268>
   2191c:	mov	r3, #3
   21920:	mov	r2, #0
   21924:	mov	r1, r2
   21928:	mov	r0, r4
   2192c:	strb	r3, [sp, #116]	; 0x74
   21930:	ldr	r3, [sp, #12]
   21934:	str	r3, [sp, #112]	; 0x70
   21938:	add	r3, sp, #112	; 0x70
   2193c:	bl	1916c <__assert_fail@plt+0x77b0>
   21940:	b	21fc4 <__assert_fail@plt+0x10608>
   21944:	ldr	r2, [r5]
   21948:	mov	r3, #1
   2194c:	ldr	r6, [r4, #84]	; 0x54
   21950:	lsl	r3, r3, r2
   21954:	ands	r6, r3, r6
   21958:	moveq	r3, #6
   2195c:	beq	219f0 <__assert_fail@plt+0x10034>
   21960:	ldr	r2, [r4, #80]	; 0x50
   21964:	mov	r0, r4
   21968:	orr	r3, r2, r3
   2196c:	mov	r2, #0
   21970:	mov	r1, r2
   21974:	str	r3, [r4, #80]	; 0x50
   21978:	mov	r3, r5
   2197c:	bl	1916c <__assert_fail@plt+0x77b0>
   21980:	subs	r6, r0, #0
   21984:	ldrne	r3, [r4, #76]	; 0x4c
   21988:	addne	r3, r3, #1
   2198c:	strne	r3, [r4, #76]	; 0x4c
   21990:	beq	21080 <__assert_fail@plt+0xf6c4>
   21994:	ldrb	r3, [r4, #88]	; 0x58
   21998:	orr	r3, r3, #2
   2199c:	strb	r3, [r4, #88]	; 0x58
   219a0:	b	21098 <__assert_fail@plt+0xf6dc>
   219a4:	cmp	r7, #0
   219a8:	beq	219b4 <__assert_fail@plt+0xfff8>
   219ac:	mov	r3, #13
   219b0:	b	21084 <__assert_fail@plt+0xf6c8>
   219b4:	cmp	r8, #0
   219b8:	bne	219ac <__assert_fail@plt+0xfff0>
   219bc:	cmp	r9, #0
   219c0:	beq	219d8 <__assert_fail@plt+0x1001c>
   219c4:	mov	r1, fp
   219c8:	mov	r0, r5
   219cc:	ldr	r2, [sp, #8]
   219d0:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   219d4:	b	20fbc <__assert_fail@plt+0xf600>
   219d8:	cmp	r3, #9
   219dc:	bne	21a00 <__assert_fail@plt+0x10044>
   219e0:	ldr	r3, [sp, #8]
   219e4:	ands	r6, r3, #131072	; 0x20000
   219e8:	bne	21a00 <__assert_fail@plt+0x10044>
   219ec:	mov	r3, #16
   219f0:	str	r3, [sl]
   219f4:	mov	r0, r6
   219f8:	add	sp, sp, #148	; 0x94
   219fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a00:	mov	r3, #1
   21a04:	mov	r2, #0
   21a08:	mov	r1, r2
   21a0c:	mov	r0, r4
   21a10:	strb	r3, [r5, #4]
   21a14:	mov	r3, r5
   21a18:	bl	1916c <__assert_fail@plt+0x77b0>
   21a1c:	subs	r6, r0, #0
   21a20:	bne	21098 <__assert_fail@plt+0xf6dc>
   21a24:	b	21080 <__assert_fail@plt+0xf6c4>
   21a28:	ldr	r3, [r5]
   21a2c:	movw	r2, #783	; 0x30f
   21a30:	tst	r2, r3
   21a34:	beq	21a80 <__assert_fail@plt+0x100c4>
   21a38:	ldrb	r3, [r4, #88]	; 0x58
   21a3c:	ands	r7, r3, #16
   21a40:	bne	21a80 <__assert_fail@plt+0x100c4>
   21a44:	orr	r3, r3, #16
   21a48:	ands	r1, r3, #8
   21a4c:	strb	r3, [r4, #88]	; 0x58
   21a50:	bne	21b70 <__assert_fail@plt+0x101b4>
   21a54:	ldr	r2, [pc, #1448]	; 22004 <__assert_fail@plt+0x10648>
   21a58:	mvn	r6, #2013265921	; 0x78000001
   21a5c:	mvn	r7, #-134217727	; 0xf8000001
   21a60:	tst	r3, #4
   21a64:	str	r1, [r4, #96]	; 0x60
   21a68:	str	r2, [r4, #100]	; 0x64
   21a6c:	strd	r6, [r4, #104]	; 0x68
   21a70:	beq	21b90 <__assert_fail@plt+0x101d4>
   21a74:	mov	r2, #16
   21a78:	add	r0, r4, #112	; 0x70
   21a7c:	bl	11818 <memset@plt>
   21a80:	ldr	r3, [r5]
   21a84:	sub	r2, r3, #256	; 0x100
   21a88:	bics	r2, r2, #256	; 0x100
   21a8c:	bne	21bc0 <__assert_fail@plt+0x10204>
   21a90:	cmp	r3, #256	; 0x100
   21a94:	bne	21b9c <__assert_fail@plt+0x101e0>
   21a98:	mov	r3, #6
   21a9c:	mov	r1, r2
   21aa0:	mov	r0, r4
   21aa4:	str	r3, [r5]
   21aa8:	mov	r3, r5
   21aac:	bl	1916c <__assert_fail@plt+0x77b0>
   21ab0:	mov	r7, r0
   21ab4:	mov	r3, #9
   21ab8:	mov	r2, #0
   21abc:	mov	r0, r4
   21ac0:	str	r3, [r5]
   21ac4:	mov	r1, r2
   21ac8:	mov	r3, r5
   21acc:	bl	1916c <__assert_fail@plt+0x77b0>
   21ad0:	mov	r6, r0
   21ad4:	mov	r2, r0
   21ad8:	mov	r3, #10
   21adc:	mov	r1, r7
   21ae0:	mov	r0, r4
   21ae4:	bl	192c0 <__assert_fail@plt+0x7904>
   21ae8:	clz	r2, r6
   21aec:	cmp	r7, #0
   21af0:	lsr	r2, r2, #5
   21af4:	moveq	r2, #1
   21af8:	cmp	r0, #0
   21afc:	moveq	r2, #1
   21b00:	mov	r6, r0
   21b04:	cmp	r2, #0
   21b08:	bne	21080 <__assert_fail@plt+0xf6c4>
   21b0c:	mov	r1, fp
   21b10:	mov	r0, r5
   21b14:	ldr	r2, [sp, #8]
   21b18:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   21b1c:	b	219f4 <__assert_fail@plt+0x10038>
   21b20:	ldrh	r8, [r0], #2
   21b24:	add	r1, r2, r7
   21b28:	ubfx	r8, r8, #3, #1
   21b2c:	cmp	r1, #95	; 0x5f
   21b30:	movne	r1, r8
   21b34:	orreq	r1, r8, #1
   21b38:	cmp	r1, #0
   21b3c:	ldrne	r1, [r3]
   21b40:	orrne	r1, r1, r6, lsl r2
   21b44:	add	r2, r2, #1
   21b48:	strne	r1, [r3]
   21b4c:	cmp	r2, #32
   21b50:	bne	21b20 <__assert_fail@plt+0x10164>
   21b54:	add	r3, r3, #4
   21b58:	add	r7, r7, #32
   21b5c:	cmp	lr, r3
   21b60:	beq	21a80 <__assert_fail@plt+0x100c4>
   21b64:	add	r0, ip, r7, lsl #1
   21b68:	mov	r2, #0
   21b6c:	b	21b20 <__assert_fail@plt+0x10164>
   21b70:	mov	r6, r7
   21b74:	bl	1177c <__ctype_b_loc@plt>
   21b78:	add	r3, r6, #24
   21b7c:	add	lr, r4, #128	; 0x80
   21b80:	ldr	ip, [r0]
   21b84:	add	r3, r4, r3, lsl #2
   21b88:	mov	r6, #1
   21b8c:	b	21b64 <__assert_fail@plt+0x101a8>
   21b90:	mov	r7, #128	; 0x80
   21b94:	mov	r6, #4
   21b98:	b	21b74 <__assert_fail@plt+0x101b8>
   21b9c:	mov	r3, #5
   21ba0:	mov	r1, r2
   21ba4:	mov	r0, r4
   21ba8:	str	r3, [r5]
   21bac:	mov	r3, r5
   21bb0:	bl	1916c <__assert_fail@plt+0x77b0>
   21bb4:	mov	r7, r0
   21bb8:	mov	r3, #10
   21bbc:	b	21ab8 <__assert_fail@plt+0x100fc>
   21bc0:	mov	r2, #0
   21bc4:	mov	r3, r5
   21bc8:	mov	r1, r2
   21bcc:	mov	r0, r4
   21bd0:	bl	1916c <__assert_fail@plt+0x77b0>
   21bd4:	subs	r6, r0, #0
   21bd8:	bne	21b0c <__assert_fail@plt+0x10150>
   21bdc:	b	21080 <__assert_fail@plt+0xf6c4>
   21be0:	mov	r2, #0
   21be4:	mov	r3, r5
   21be8:	mov	r1, r2
   21bec:	mov	r0, r4
   21bf0:	bl	1916c <__assert_fail@plt+0x77b0>
   21bf4:	subs	r6, r0, #0
   21bf8:	beq	21080 <__assert_fail@plt+0xf6c4>
   21bfc:	ldr	r3, [r4, #92]	; 0x5c
   21c00:	cmp	r3, #1
   21c04:	bgt	21994 <__assert_fail@plt+0xffd8>
   21c08:	b	21098 <__assert_fail@plt+0xf6dc>
   21c0c:	sub	r3, r3, #33	; 0x21
   21c10:	ldr	r2, [pc, #1008]	; 22008 <__assert_fail@plt+0x1064c>
   21c14:	clz	r3, r3
   21c18:	lsr	r3, r3, #5
   21c1c:	stm	sp, {r3, sl}
   21c20:	ldr	r3, [pc, #996]	; 2200c <__assert_fail@plt+0x10650>
   21c24:	mov	r0, r4
   21c28:	ldr	r1, [fp, #64]	; 0x40
   21c2c:	bl	1aa40 <__assert_fail@plt+0x9084>
   21c30:	ldr	r3, [sl]
   21c34:	mov	r6, r0
   21c38:	clz	r0, r0
   21c3c:	lsr	r0, r0, #5
   21c40:	cmp	r3, #0
   21c44:	moveq	r0, #0
   21c48:	cmp	r0, #0
   21c4c:	b	2128c <__assert_fail@plt+0xf8d0>
   21c50:	sub	r3, r3, #35	; 0x23
   21c54:	ldr	r2, [pc, #948]	; 22010 <__assert_fail@plt+0x10654>
   21c58:	clz	r3, r3
   21c5c:	lsr	r3, r3, #5
   21c60:	stm	sp, {r3, sl}
   21c64:	ldr	r3, [pc, #936]	; 22014 <__assert_fail@plt+0x10658>
   21c68:	b	21c24 <__assert_fail@plt+0x10268>
   21c6c:	mov	r3, #5
   21c70:	b	21084 <__assert_fail@plt+0xf6c8>
   21c74:	cmn	r0, #2
   21c78:	bne	21ce0 <__assert_fail@plt+0x10324>
   21c7c:	cmn	r9, #2
   21c80:	cmnne	r8, #2
   21c84:	bne	21d48 <__assert_fail@plt+0x1038c>
   21c88:	ldr	r3, [sp, #8]
   21c8c:	ands	r7, r3, #2097152	; 0x200000
   21c90:	bne	21d24 <__assert_fail@plt+0x10368>
   21c94:	ldrb	r3, [r5, #4]
   21c98:	cmp	r3, #2
   21c9c:	moveq	r3, #9
   21ca0:	streq	r3, [sl]
   21ca4:	bne	21124 <__assert_fail@plt+0xf768>
   21ca8:	ldr	r3, [sl]
   21cac:	clz	r2, r7
   21cb0:	lsr	r2, r2, #5
   21cb4:	cmp	r3, #0
   21cb8:	moveq	r2, #0
   21cbc:	cmp	r2, #0
   21cc0:	beq	21f4c <__assert_fail@plt+0x10590>
   21cc4:	cmp	r6, #0
   21cc8:	beq	21290 <__assert_fail@plt+0xf8d4>
   21ccc:	mov	r2, #0
   21cd0:	ldr	r1, [pc, #808]	; 22000 <__assert_fail@plt+0x10644>
   21cd4:	mov	r0, r6
   21cd8:	bl	18b40 <__assert_fail@plt+0x7184>
   21cdc:	b	21290 <__assert_fail@plt+0xf8d4>
   21ce0:	ldrb	r3, [r5, #4]
   21ce4:	cmp	r3, #24
   21ce8:	moveq	r8, r9
   21cec:	beq	21c7c <__assert_fail@plt+0x102c0>
   21cf0:	cmp	r3, #1
   21cf4:	bne	21d1c <__assert_fail@plt+0x10360>
   21cf8:	ldrb	r3, [r5]
   21cfc:	cmp	r3, #44	; 0x2c
   21d00:	bne	21d1c <__assert_fail@plt+0x10360>
   21d04:	mov	r1, r5
   21d08:	mov	r0, fp
   21d0c:	ldr	r2, [sp, #8]
   21d10:	bl	1d5c4 <__assert_fail@plt+0xbc08>
   21d14:	mov	r8, r0
   21d18:	b	21c7c <__assert_fail@plt+0x102c0>
   21d1c:	mvn	r8, #1
   21d20:	b	21c7c <__assert_fail@plt+0x102c0>
   21d24:	ldr	r3, [sp, #12]
   21d28:	str	r3, [fp, #40]	; 0x28
   21d2c:	add	r3, sp, #112	; 0x70
   21d30:	ldm	r3, {r0, r1}
   21d34:	mov	r3, #1
   21d38:	stm	r5, {r0, r1}
   21d3c:	strb	r3, [r5, #4]
   21d40:	mov	r7, r6
   21d44:	b	21ca8 <__assert_fail@plt+0x102ec>
   21d48:	cmn	r8, #1
   21d4c:	cmpne	r9, r8
   21d50:	bgt	21124 <__assert_fail@plt+0xf768>
   21d54:	ldrb	r3, [r5, #4]
   21d58:	cmp	r3, #24
   21d5c:	bne	21124 <__assert_fail@plt+0xf768>
   21d60:	cmn	r8, #1
   21d64:	movw	r3, #32767	; 0x7fff
   21d68:	bne	21db8 <__assert_fail@plt+0x103fc>
   21d6c:	cmp	r9, r3
   21d70:	movle	r3, #0
   21d74:	movgt	r3, #1
   21d78:	cmp	r3, #0
   21d7c:	movne	r3, #15
   21d80:	bne	21128 <__assert_fail@plt+0xf76c>
   21d84:	mov	r1, fp
   21d88:	mov	r0, r5
   21d8c:	ldr	r2, [sp, #8]
   21d90:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   21d94:	cmp	r6, #0
   21d98:	beq	21d40 <__assert_fail@plt+0x10384>
   21d9c:	orrs	r7, r9, r8
   21da0:	bne	21dd0 <__assert_fail@plt+0x10414>
   21da4:	mov	r2, r7
   21da8:	ldr	r1, [pc, #592]	; 22000 <__assert_fail@plt+0x10644>
   21dac:	mov	r0, r6
   21db0:	bl	18b40 <__assert_fail@plt+0x7184>
   21db4:	b	21ca8 <__assert_fail@plt+0x102ec>
   21db8:	cmp	r8, r3
   21dbc:	b	21d70 <__assert_fail@plt+0x103b4>
   21dc0:	cmp	r3, #19
   21dc4:	moveq	r8, #1
   21dc8:	mvnne	r8, #0
   21dcc:	b	21d84 <__assert_fail@plt+0x103c8>
   21dd0:	cmp	r9, #0
   21dd4:	movle	r3, #0
   21dd8:	strle	r6, [sp, #12]
   21ddc:	strle	r3, [sp, #16]
   21de0:	ble	21e68 <__assert_fail@plt+0x104ac>
   21de4:	mov	r7, r6
   21de8:	mov	r3, #2
   21dec:	str	r6, [sp, #12]
   21df0:	b	21e34 <__assert_fail@plt+0x10478>
   21df4:	mov	r1, r4
   21df8:	ldr	r0, [sp, #12]
   21dfc:	bl	19220 <__assert_fail@plt+0x7864>
   21e00:	mov	r2, r0
   21e04:	mov	r3, #16
   21e08:	str	r0, [sp, #12]
   21e0c:	mov	r1, r7
   21e10:	mov	r0, r4
   21e14:	bl	192c0 <__assert_fail@plt+0x7904>
   21e18:	ldr	r3, [sp, #12]
   21e1c:	mov	r7, r0
   21e20:	cmp	r0, #0
   21e24:	cmpne	r3, #0
   21e28:	beq	21eb4 <__assert_fail@plt+0x104f8>
   21e2c:	ldr	r3, [sp, #16]
   21e30:	add	r3, r3, #1
   21e34:	str	r3, [sp, #16]
   21e38:	ldr	r3, [sp, #16]
   21e3c:	cmp	r9, r3
   21e40:	bge	21df4 <__assert_fail@plt+0x10438>
   21e44:	cmp	r9, r8
   21e48:	beq	21ca8 <__assert_fail@plt+0x102ec>
   21e4c:	mov	r1, r4
   21e50:	ldr	r0, [sp, #12]
   21e54:	bl	19220 <__assert_fail@plt+0x7864>
   21e58:	subs	r3, r0, #0
   21e5c:	str	r3, [sp, #12]
   21e60:	beq	21eb4 <__assert_fail@plt+0x104f8>
   21e64:	str	r7, [sp, #16]
   21e68:	ldr	r3, [sp, #12]
   21e6c:	ldrb	r3, [r3, #24]
   21e70:	cmp	r3, #17
   21e74:	bne	21e8c <__assert_fail@plt+0x104d0>
   21e78:	ldr	r3, [sp, #12]
   21e7c:	ldr	r1, [pc, #404]	; 22018 <__assert_fail@plt+0x1065c>
   21e80:	mov	r0, r3
   21e84:	ldr	r2, [r3, #20]
   21e88:	bl	18b40 <__assert_fail@plt+0x7184>
   21e8c:	cmn	r8, #1
   21e90:	mov	r2, #0
   21e94:	ldr	r1, [sp, #12]
   21e98:	moveq	r3, #11
   21e9c:	movne	r3, #10
   21ea0:	mov	r0, r4
   21ea4:	bl	192c0 <__assert_fail@plt+0x7904>
   21ea8:	subs	r7, r0, #0
   21eac:	addne	r9, r9, #2
   21eb0:	bne	21f1c <__assert_fail@plt+0x10560>
   21eb4:	mov	r3, #12
   21eb8:	b	21128 <__assert_fail@plt+0xf76c>
   21ebc:	mov	r1, r4
   21ec0:	ldr	r0, [sp, #12]
   21ec4:	bl	19220 <__assert_fail@plt+0x7864>
   21ec8:	mov	r2, r0
   21ecc:	mov	r3, #16
   21ed0:	str	r0, [sp, #12]
   21ed4:	mov	r1, r7
   21ed8:	mov	r0, r4
   21edc:	bl	192c0 <__assert_fail@plt+0x7904>
   21ee0:	ldr	r3, [sp, #12]
   21ee4:	mov	r1, r0
   21ee8:	clz	r0, r0
   21eec:	lsr	r0, r0, #5
   21ef0:	cmp	r3, #0
   21ef4:	movne	r2, r0
   21ef8:	moveq	r2, #1
   21efc:	cmp	r2, #0
   21f00:	bne	21eb4 <__assert_fail@plt+0x104f8>
   21f04:	mov	r3, #10
   21f08:	mov	r0, r4
   21f0c:	bl	192c0 <__assert_fail@plt+0x7904>
   21f10:	subs	r7, r0, #0
   21f14:	beq	21eb4 <__assert_fail@plt+0x104f8>
   21f18:	add	r9, r9, #1
   21f1c:	cmp	r8, r9
   21f20:	bge	21ebc <__assert_fail@plt+0x10500>
   21f24:	ldr	r3, [sp, #16]
   21f28:	cmp	r3, #0
   21f2c:	beq	21ca8 <__assert_fail@plt+0x102ec>
   21f30:	mov	r2, r7
   21f34:	mov	r3, #16
   21f38:	ldr	r1, [sp, #16]
   21f3c:	mov	r0, r4
   21f40:	bl	192c0 <__assert_fail@plt+0x7904>
   21f44:	mov	r7, r0
   21f48:	b	21ca8 <__assert_fail@plt+0x102ec>
   21f4c:	ldr	r3, [sp, #8]
   21f50:	tst	r3, #16777216	; 0x1000000
   21f54:	beq	21f80 <__assert_fail@plt+0x105c4>
   21f58:	ldrb	r3, [r5, #4]
   21f5c:	cmp	r3, #23
   21f60:	cmpne	r3, #11
   21f64:	bne	21f80 <__assert_fail@plt+0x105c4>
   21f68:	cmp	r7, #0
   21f6c:	beq	219ac <__assert_fail@plt+0xfff0>
   21f70:	ldr	r1, [pc, #136]	; 22000 <__assert_fail@plt+0x10644>
   21f74:	mov	r0, r7
   21f78:	bl	18b40 <__assert_fail@plt+0x7184>
   21f7c:	b	219ac <__assert_fail@plt+0xfff0>
   21f80:	mov	r6, r7
   21f84:	b	210a8 <__assert_fail@plt+0xf6ec>
   21f88:	mov	r3, #3
   21f8c:	mov	r2, #0
   21f90:	mov	r1, r2
   21f94:	mov	r0, r4
   21f98:	strb	r3, [sp, #116]	; 0x74
   21f9c:	ldr	r3, [sp, #12]
   21fa0:	str	r3, [sp, #112]	; 0x70
   21fa4:	add	r3, sp, #112	; 0x70
   21fa8:	bl	1916c <__assert_fail@plt+0x77b0>
   21fac:	subs	r1, r0, #0
   21fb0:	beq	21fcc <__assert_fail@plt+0x10610>
   21fb4:	mov	r3, #10
   21fb8:	mov	r2, r6
   21fbc:	mov	r0, r4
   21fc0:	bl	192c0 <__assert_fail@plt+0x7904>
   21fc4:	subs	r6, r0, #0
   21fc8:	bne	21274 <__assert_fail@plt+0xf8b8>
   21fcc:	mov	r3, #12
   21fd0:	b	21318 <__assert_fail@plt+0xf95c>
   21fd4:	cmp	r8, #3
   21fd8:	bne	216a8 <__assert_fail@plt+0xfcec>
   21fdc:	b	21564 <__assert_fail@plt+0xfba8>
   21fe0:	cmp	r2, #0
   21fe4:	beq	21584 <__assert_fail@plt+0xfbc8>
   21fe8:	cmp	r8, #0
   21fec:	movne	r6, #0
   21ff0:	bne	216cc <__assert_fail@plt+0xfd10>
   21ff4:	mov	r6, r8
   21ff8:	b	21590 <__assert_fail@plt+0xfbd4>
   21ffc:	addeq	r0, ip, r0, lsl #16
   22000:	andeq	r9, r1, r8, lsl #25
   22004:	mvnseq	r0, #0
   22008:	andeq	r6, r2, r2, lsr #26
   2200c:	andeq	r6, r2, sp, asr #26
   22010:	andeq	r6, r2, lr, lsr #26
   22014:	strdeq	r5, [r2], -r7
   22018:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   2201c:	ldr	ip, [r1]
   22020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22024:	sub	sp, sp, #20
   22028:	mov	fp, r3
   2202c:	mov	sl, r0
   22030:	mov	r7, r1
   22034:	mov	r8, r2
   22038:	ldr	r5, [sp, #60]	; 0x3c
   2203c:	str	ip, [sp, #12]
   22040:	ldr	ip, [sp, #56]	; 0x38
   22044:	str	ip, [sp]
   22048:	str	r5, [sp, #4]
   2204c:	bl	20f94 <__assert_fail@plt+0xf5d8>
   22050:	ldr	r3, [r5]
   22054:	mov	r4, r0
   22058:	clz	r0, r0
   2205c:	lsr	r0, r0, #5
   22060:	cmp	r3, #0
   22064:	moveq	r0, #0
   22068:	cmp	r0, #0
   2206c:	beq	220dc <__assert_fail@plt+0x10720>
   22070:	mov	r4, #0
   22074:	mov	r0, r4
   22078:	add	sp, sp, #20
   2207c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22080:	cmp	r4, #0
   22084:	cmpne	r6, #0
   22088:	beq	220d4 <__assert_fail@plt+0x10718>
   2208c:	mov	r3, #16
   22090:	mov	r2, r6
   22094:	ldr	r0, [sp, #12]
   22098:	mov	r1, r4
   2209c:	bl	192c0 <__assert_fail@plt+0x7904>
   220a0:	subs	r9, r0, #0
   220a4:	bne	22160 <__assert_fail@plt+0x107a4>
   220a8:	mov	r2, r9
   220ac:	ldr	r1, [pc, #180]	; 22168 <__assert_fail@plt+0x107ac>
   220b0:	mov	r0, r6
   220b4:	bl	18b40 <__assert_fail@plt+0x7184>
   220b8:	mov	r2, r9
   220bc:	ldr	r1, [pc, #164]	; 22168 <__assert_fail@plt+0x107ac>
   220c0:	mov	r0, r4
   220c4:	bl	18b40 <__assert_fail@plt+0x7184>
   220c8:	mov	r2, #12
   220cc:	str	r2, [r5]
   220d0:	b	22070 <__assert_fail@plt+0x106b4>
   220d4:	cmp	r4, #0
   220d8:	moveq	r4, r6
   220dc:	ldrb	r2, [r8, #4]
   220e0:	and	r3, r2, #247	; 0xf7
   220e4:	cmp	r3, #2
   220e8:	beq	22074 <__assert_fail@plt+0x106b8>
   220ec:	ldr	r3, [sp, #56]	; 0x38
   220f0:	clz	r3, r3
   220f4:	lsr	r3, r3, #5
   220f8:	cmp	r2, #9
   220fc:	orrne	r3, r3, #1
   22100:	cmp	r3, #0
   22104:	beq	22074 <__assert_fail@plt+0x106b8>
   22108:	ldr	r3, [sp, #56]	; 0x38
   2210c:	mov	r2, r8
   22110:	mov	r1, r7
   22114:	mov	r0, sl
   22118:	stm	sp, {r3, r5}
   2211c:	mov	r3, fp
   22120:	bl	20f94 <__assert_fail@plt+0xf5d8>
   22124:	ldr	r3, [r5]
   22128:	mov	r6, r0
   2212c:	clz	r0, r0
   22130:	lsr	r0, r0, #5
   22134:	cmp	r3, #0
   22138:	moveq	r0, #0
   2213c:	cmp	r0, #0
   22140:	beq	22080 <__assert_fail@plt+0x106c4>
   22144:	cmp	r4, #0
   22148:	beq	22070 <__assert_fail@plt+0x106b4>
   2214c:	mov	r2, #0
   22150:	ldr	r1, [pc, #16]	; 22168 <__assert_fail@plt+0x107ac>
   22154:	mov	r0, r4
   22158:	bl	18b40 <__assert_fail@plt+0x7184>
   2215c:	b	22070 <__assert_fail@plt+0x106b4>
   22160:	mov	r4, r9
   22164:	b	220dc <__assert_fail@plt+0x10720>
   22168:	andeq	r9, r1, r8, lsl #25
   2216c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22170:	sub	sp, sp, #20
   22174:	mov	sl, r3
   22178:	mov	r8, r0
   2217c:	mov	r9, r1
   22180:	mov	r7, r2
   22184:	ldr	r5, [r1]
   22188:	ldr	r6, [sp, #60]	; 0x3c
   2218c:	ldr	ip, [r5, #84]	; 0x54
   22190:	stmib	sp, {r6, ip}
   22194:	ldr	ip, [sp, #56]	; 0x38
   22198:	str	ip, [sp]
   2219c:	bl	2201c <__assert_fail@plt+0x10660>
   221a0:	ldr	r3, [r6]
   221a4:	mov	r4, r0
   221a8:	clz	r0, r0
   221ac:	lsr	r0, r0, #5
   221b0:	cmp	r3, #0
   221b4:	moveq	r0, #0
   221b8:	cmp	r0, #0
   221bc:	orreq	r3, sl, #8388608	; 0x800000
   221c0:	streq	r3, [sp, #12]
   221c4:	beq	22210 <__assert_fail@plt+0x10854>
   221c8:	mov	r4, #0
   221cc:	mov	r0, r4
   221d0:	add	sp, sp, #20
   221d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221d8:	ldr	r3, [r5, #84]	; 0x54
   221dc:	orr	fp, r3, fp
   221e0:	str	fp, [r5, #84]	; 0x54
   221e4:	mov	r1, r4
   221e8:	mov	r3, #10
   221ec:	mov	r0, r5
   221f0:	bl	192c0 <__assert_fail@plt+0x7904>
   221f4:	subs	r4, r0, #0
   221f8:	bne	22210 <__assert_fail@plt+0x10854>
   221fc:	mov	r3, #12
   22200:	str	r3, [r6]
   22204:	b	221cc <__assert_fail@plt+0x10810>
   22208:	mov	r2, #0
   2220c:	b	221e4 <__assert_fail@plt+0x10828>
   22210:	ldrb	r3, [r7, #4]
   22214:	cmp	r3, #10
   22218:	bne	221cc <__assert_fail@plt+0x10810>
   2221c:	mov	r1, r8
   22220:	mov	r0, r7
   22224:	ldr	r2, [sp, #12]
   22228:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   2222c:	ldrb	r3, [r7, #4]
   22230:	and	r2, r3, #247	; 0xf7
   22234:	cmp	r2, #2
   22238:	beq	22208 <__assert_fail@plt+0x1084c>
   2223c:	ldr	r2, [sp, #56]	; 0x38
   22240:	clz	r2, r2
   22244:	lsr	r2, r2, #5
   22248:	cmp	r3, #9
   2224c:	orrne	r2, r2, #1
   22250:	cmp	r2, #0
   22254:	beq	221e4 <__assert_fail@plt+0x10828>
   22258:	ldr	r3, [sp, #8]
   2225c:	mov	r2, r7
   22260:	mov	r1, r9
   22264:	mov	r0, r8
   22268:	ldr	fp, [r5, #84]	; 0x54
   2226c:	str	r3, [r5, #84]	; 0x54
   22270:	ldr	r3, [sp, #56]	; 0x38
   22274:	str	r3, [sp]
   22278:	mov	r3, sl
   2227c:	str	r6, [sp, #4]
   22280:	bl	2201c <__assert_fail@plt+0x10660>
   22284:	ldr	r3, [r6]
   22288:	mov	r2, r0
   2228c:	clz	r0, r0
   22290:	lsr	r0, r0, #5
   22294:	cmp	r3, #0
   22298:	moveq	r0, #0
   2229c:	cmp	r0, #0
   222a0:	beq	221d8 <__assert_fail@plt+0x1081c>
   222a4:	cmp	r4, #0
   222a8:	beq	221c8 <__assert_fail@plt+0x1080c>
   222ac:	mov	r2, #0
   222b0:	ldr	r1, [pc, #8]	; 222c0 <__assert_fail@plt+0x10904>
   222b4:	mov	r0, r4
   222b8:	bl	18b40 <__assert_fail@plt+0x7184>
   222bc:	b	221c8 <__assert_fail@plt+0x1080c>
   222c0:	andeq	r9, r1, r8, lsl #25
   222c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222c8:	mov	r8, r3
   222cc:	sub	sp, sp, #132	; 0x84
   222d0:	mov	r3, #0
   222d4:	mov	r6, r0
   222d8:	mov	r9, r1
   222dc:	mov	r5, r2
   222e0:	str	r3, [r0, #8]
   222e4:	str	r3, [sp, #24]
   222e8:	str	r3, [r0, #24]
   222ec:	ldrb	r3, [r0, #28]
   222f0:	str	r8, [r0, #12]
   222f4:	ldr	r4, [r0]
   222f8:	bic	r3, r3, #111	; 0x6f
   222fc:	strb	r3, [r0, #28]
   22300:	ldr	r3, [r0, #4]
   22304:	cmp	r3, #159	; 0x9f
   22308:	bhi	2232c <__assert_fail@plt+0x10970>
   2230c:	mov	r0, r4
   22310:	mov	r1, #160	; 0xa0
   22314:	bl	188bc <__assert_fail@plt+0x6f00>
   22318:	subs	r4, r0, #0
   2231c:	beq	22e20 <__assert_fail@plt+0x11464>
   22320:	mov	r3, #160	; 0xa0
   22324:	str	r4, [r6]
   22328:	str	r3, [r6, #4]
   2232c:	mov	r2, #160	; 0xa0
   22330:	mov	r1, #0
   22334:	mov	r0, r4
   22338:	str	r2, [r6, #8]
   2233c:	bl	11818 <memset@plt>
   22340:	mov	r3, #31
   22344:	str	r3, [r4, #64]	; 0x40
   22348:	ldr	r3, [pc, #2780]	; 22e2c <__assert_fail@plt+0x11470>
   2234c:	cmp	r5, r3
   22350:	bhi	224c4 <__assert_fail@plt+0x10b08>
   22354:	add	sl, r5, #1
   22358:	mov	r7, #1
   2235c:	lsl	r0, sl, #3
   22360:	str	sl, [r4, #4]
   22364:	bl	18840 <__assert_fail@plt+0x6e84>
   22368:	str	r0, [r4]
   2236c:	cmp	r5, r7
   22370:	lslcs	r7, r7, #1
   22374:	bcs	2236c <__assert_fail@plt+0x109b0>
   22378:	mov	r1, r7
   2237c:	mov	r0, #12
   22380:	sub	r7, r7, #1
   22384:	bl	18504 <__assert_fail@plt+0x6b48>
   22388:	str	r0, [r4, #32]
   2238c:	str	r7, [r4, #68]	; 0x44
   22390:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   22394:	str	r0, [r4, #92]	; 0x5c
   22398:	mov	r0, #14
   2239c:	bl	118cc <nl_langinfo@plt>
   223a0:	ldrb	r3, [r0]
   223a4:	and	r3, r3, #223	; 0xdf
   223a8:	cmp	r3, #85	; 0x55
   223ac:	bne	223fc <__assert_fail@plt+0x10a40>
   223b0:	ldrb	r3, [r0, #1]
   223b4:	and	r3, r3, #223	; 0xdf
   223b8:	cmp	r3, #84	; 0x54
   223bc:	bne	223fc <__assert_fail@plt+0x10a40>
   223c0:	ldrb	r3, [r0, #2]
   223c4:	and	r3, r3, #223	; 0xdf
   223c8:	cmp	r3, #70	; 0x46
   223cc:	bne	223fc <__assert_fail@plt+0x10a40>
   223d0:	ldrb	r3, [r0, #3]
   223d4:	ldr	r1, [pc, #2644]	; 22e30 <__assert_fail@plt+0x11474>
   223d8:	cmp	r3, #45	; 0x2d
   223dc:	moveq	r3, #4
   223e0:	movne	r3, #3
   223e4:	add	r0, r0, r3
   223e8:	bl	11554 <strcmp@plt>
   223ec:	cmp	r0, #0
   223f0:	ldrbeq	r3, [r4, #88]	; 0x58
   223f4:	orreq	r3, r3, #4
   223f8:	strbeq	r3, [r4, #88]	; 0x58
   223fc:	ldrb	r3, [r4, #88]	; 0x58
   22400:	bfc	r3, #3, #1
   22404:	strb	r3, [r4, #88]	; 0x58
   22408:	ldr	r3, [r4, #92]	; 0x5c
   2240c:	cmp	r3, #1
   22410:	ble	224ac <__assert_fail@plt+0x10af0>
   22414:	ldrb	r7, [r4, #88]	; 0x58
   22418:	ands	r7, r7, #4
   2241c:	ldrne	r3, [pc, #2576]	; 22e34 <__assert_fail@plt+0x11478>
   22420:	strne	r3, [r4, #60]	; 0x3c
   22424:	bne	224ac <__assert_fail@plt+0x10af0>
   22428:	mov	r1, #1
   2242c:	mov	r0, #32
   22430:	bl	18504 <__assert_fail@plt+0x6b48>
   22434:	cmp	r0, #0
   22438:	str	r0, [r4, #60]	; 0x3c
   2243c:	beq	224c4 <__assert_fail@plt+0x10b08>
   22440:	lsl	r2, r7, #3
   22444:	mov	fp, #0
   22448:	add	r3, fp, r2
   2244c:	mov	r0, r3
   22450:	str	r3, [sp, #12]
   22454:	str	r2, [sp, #16]
   22458:	bl	11830 <btowc@plt>
   2245c:	cmn	r0, #1
   22460:	ldr	r3, [sp, #12]
   22464:	mov	r1, #1
   22468:	ldrne	lr, [r4, #60]	; 0x3c
   2246c:	ldr	r2, [sp, #16]
   22470:	ldrne	ip, [lr, r7]
   22474:	orrne	ip, ip, r1, lsl fp
   22478:	strne	ip, [lr, r7]
   2247c:	bics	ip, r3, #127	; 0x7f
   22480:	bne	22494 <__assert_fail@plt+0x10ad8>
   22484:	cmp	r0, r3
   22488:	ldrbne	r3, [r4, #88]	; 0x58
   2248c:	orrne	r3, r3, #8
   22490:	strbne	r3, [r4, #88]	; 0x58
   22494:	add	fp, fp, #1
   22498:	cmp	fp, #32
   2249c:	bne	22448 <__assert_fail@plt+0x10a8c>
   224a0:	add	r7, r7, #4
   224a4:	cmp	r7, #32
   224a8:	bne	22440 <__assert_fail@plt+0x10a84>
   224ac:	ldr	r3, [r4]
   224b0:	cmp	r3, #0
   224b4:	beq	224c4 <__assert_fail@plt+0x10b08>
   224b8:	ldr	r3, [r4, #32]
   224bc:	cmp	r3, #0
   224c0:	bne	224e4 <__assert_fail@plt+0x10b28>
   224c4:	mov	r3, #12
   224c8:	str	r3, [sp, #24]
   224cc:	mov	r0, r4
   224d0:	bl	1bbf0 <__assert_fail@plt+0xa234>
   224d4:	mov	r3, #0
   224d8:	str	r3, [r6]
   224dc:	str	r3, [r6, #4]
   224e0:	b	22a98 <__assert_fail@plt+0x110dc>
   224e4:	ldr	r2, [pc, #2380]	; 22e38 <__assert_fail@plt+0x1147c>
   224e8:	mov	r3, #0
   224ec:	ldr	r1, [pc, #2376]	; 22e3c <__assert_fail@plt+0x11480>
   224f0:	str	r3, [sp, #24]
   224f4:	mov	r3, #1
   224f8:	cmp	r2, #0
   224fc:	moveq	r3, r2
   22500:	mov	r2, #1
   22504:	cmp	r1, #0
   22508:	moveq	r2, r1
   2250c:	orr	r3, r3, r2
   22510:	ands	r3, r3, #255	; 0xff
   22514:	str	r3, [sp, #16]
   22518:	beq	2253c <__assert_fail@plt+0x10b80>
   2251c:	mov	r1, #0
   22520:	add	r0, r4, #136	; 0x88
   22524:	bl	115fc <pthread_mutex_init@plt>
   22528:	cmp	r0, #0
   2252c:	bne	224c4 <__assert_fail@plt+0x10b08>
   22530:	ldr	r3, [sp, #24]
   22534:	cmp	r3, #0
   22538:	bne	224cc <__assert_fail@plt+0x10b10>
   2253c:	ldr	r3, [r6, #20]
   22540:	and	r7, r8, #4194304	; 0x400000
   22544:	mov	r2, #76	; 0x4c
   22548:	mov	r1, #0
   2254c:	add	r0, sp, #48	; 0x30
   22550:	orr	fp, r3, r7
   22554:	str	r3, [sp, #12]
   22558:	bl	11818 <memset@plt>
   2255c:	ldr	r3, [sp, #12]
   22560:	str	r9, [sp, #44]	; 0x2c
   22564:	str	r5, [sp, #88]	; 0x58
   22568:	str	r5, [sp, #92]	; 0x5c
   2256c:	str	r5, [sp, #96]	; 0x60
   22570:	str	r5, [sp, #100]	; 0x64
   22574:	str	r3, [sp, #108]	; 0x6c
   22578:	adds	r3, r7, #0
   2257c:	movne	r3, #1
   22580:	strb	r3, [sp, #116]	; 0x74
   22584:	adds	r3, fp, #0
   22588:	movne	r3, #1
   2258c:	cmp	r5, #0
   22590:	strb	r3, [sp, #119]	; 0x77
   22594:	ldr	r3, [r4, #92]	; 0x5c
   22598:	str	r3, [sp, #124]	; 0x7c
   2259c:	ldrb	r3, [r4, #88]	; 0x58
   225a0:	ubfx	r2, r3, #2, #1
   225a4:	ubfx	r3, r3, #3, #1
   225a8:	strb	r2, [sp, #117]	; 0x75
   225ac:	strb	r3, [sp, #118]	; 0x76
   225b0:	bne	22624 <__assert_fail@plt+0x10c68>
   225b4:	ldrb	r3, [sp, #119]	; 0x77
   225b8:	cmp	r3, #0
   225bc:	ldr	r3, [r4, #92]	; 0x5c
   225c0:	ldrne	r9, [sp, #48]	; 0x30
   225c4:	cmp	r7, #0
   225c8:	str	r9, [sp, #48]	; 0x30
   225cc:	beq	22758 <__assert_fail@plt+0x10d9c>
   225d0:	cmp	r3, #1
   225d4:	ble	22690 <__assert_fail@plt+0x10cd4>
   225d8:	add	r0, sp, #44	; 0x2c
   225dc:	bl	19630 <__assert_fail@plt+0x7c74>
   225e0:	cmp	r0, #0
   225e4:	bne	22638 <__assert_fail@plt+0x10c7c>
   225e8:	ldr	r3, [sp, #76]	; 0x4c
   225ec:	cmp	r5, r3
   225f0:	ble	22638 <__assert_fail@plt+0x10c7c>
   225f4:	ldr	r3, [sp, #72]	; 0x48
   225f8:	ldr	r2, [r4, #92]	; 0x5c
   225fc:	ldr	r1, [sp, #80]	; 0x50
   22600:	add	r3, r3, r2
   22604:	cmp	r1, r3
   22608:	bgt	22638 <__assert_fail@plt+0x10c7c>
   2260c:	lsl	r1, r1, #1
   22610:	add	r0, sp, #44	; 0x2c
   22614:	bl	19074 <__assert_fail@plt+0x76b8>
   22618:	cmp	r0, #0
   2261c:	beq	225d8 <__assert_fail@plt+0x10c1c>
   22620:	b	22638 <__assert_fail@plt+0x10c7c>
   22624:	mov	r1, sl
   22628:	add	r0, sp, #44	; 0x2c
   2262c:	bl	19074 <__assert_fail@plt+0x76b8>
   22630:	cmp	r0, #0
   22634:	beq	225b4 <__assert_fail@plt+0x10bf8>
   22638:	cmp	r0, #0
   2263c:	str	r0, [sp, #24]
   22640:	beq	226a0 <__assert_fail@plt+0x10ce4>
   22644:	ldr	r7, [r6]
   22648:	ldr	r5, [r7, #56]	; 0x38
   2264c:	cmp	r5, #0
   22650:	bne	22790 <__assert_fail@plt+0x10dd4>
   22654:	mov	r3, #31
   22658:	str	r5, [r7, #52]	; 0x34
   2265c:	str	r5, [r7, #56]	; 0x38
   22660:	str	r3, [r7, #64]	; 0x40
   22664:	ldr	r0, [r7, #16]
   22668:	bl	18758 <__assert_fail@plt+0x6d9c>
   2266c:	add	r0, sp, #44	; 0x2c
   22670:	str	r5, [r7, #16]
   22674:	bl	19f10 <__assert_fail@plt+0x8554>
   22678:	ldr	r3, [sp, #16]
   2267c:	cmp	r3, #0
   22680:	beq	224cc <__assert_fail@plt+0x10b10>
   22684:	add	r0, r4, #136	; 0x88
   22688:	bl	1156c <pthread_mutex_destroy@plt>
   2268c:	b	224cc <__assert_fail@plt+0x10b10>
   22690:	add	r0, sp, #44	; 0x2c
   22694:	bl	19b00 <__assert_fail@plt+0x8144>
   22698:	mov	r3, #0
   2269c:	str	r3, [sp, #24]
   226a0:	ldr	r9, [r6]
   226a4:	mov	r5, #0
   226a8:	orr	r2, r8, #8388608	; 0x800000
   226ac:	add	r1, sp, #44	; 0x2c
   226b0:	add	r0, sp, #32
   226b4:	str	r5, [r6, #24]
   226b8:	str	r8, [r9, #128]	; 0x80
   226bc:	bl	1d5a8 <__assert_fail@plt+0xbbec>
   226c0:	add	r3, sp, #24
   226c4:	add	r2, sp, #32
   226c8:	str	r5, [sp]
   226cc:	mov	r1, r6
   226d0:	add	r0, sp, #44	; 0x2c
   226d4:	str	r3, [sp, #4]
   226d8:	mov	r3, r8
   226dc:	bl	2216c <__assert_fail@plt+0x107b0>
   226e0:	ldr	r2, [sp, #24]
   226e4:	mov	sl, r0
   226e8:	clz	r0, r0
   226ec:	lsr	r0, r0, #5
   226f0:	cmp	r2, r5
   226f4:	movne	r2, r0
   226f8:	moveq	r2, r5
   226fc:	cmp	r2, r5
   22700:	bne	227a4 <__assert_fail@plt+0x10de8>
   22704:	mov	r3, #2
   22708:	mov	r1, r2
   2270c:	mov	r0, r9
   22710:	bl	192c0 <__assert_fail@plt+0x7904>
   22714:	cmp	sl, r5
   22718:	mov	r8, r0
   2271c:	beq	22734 <__assert_fail@plt+0x10d78>
   22720:	mov	r3, #16
   22724:	mov	r2, r8
   22728:	mov	r1, sl
   2272c:	mov	r0, r9
   22730:	bl	192c0 <__assert_fail@plt+0x7904>
   22734:	cmp	r0, #0
   22738:	cmpne	r8, #0
   2273c:	ldr	r5, [r6]
   22740:	bne	227ac <__assert_fail@plt+0x10df0>
   22744:	mov	r3, #12
   22748:	str	r3, [sp, #24]
   2274c:	mov	r3, #0
   22750:	str	r3, [r4, #52]	; 0x34
   22754:	b	22644 <__assert_fail@plt+0x10c88>
   22758:	cmp	r3, #1
   2275c:	ble	22770 <__assert_fail@plt+0x10db4>
   22760:	add	r0, sp, #44	; 0x2c
   22764:	bl	194dc <__assert_fail@plt+0x7b20>
   22768:	str	r7, [sp, #24]
   2276c:	b	226a0 <__assert_fail@plt+0x10ce4>
   22770:	cmp	fp, #0
   22774:	ldreq	r3, [sp, #80]	; 0x50
   22778:	streq	r3, [sp, #72]	; 0x48
   2277c:	streq	r3, [sp, #76]	; 0x4c
   22780:	beq	22768 <__assert_fail@plt+0x10dac>
   22784:	add	r0, sp, #44	; 0x2c
   22788:	bl	18a04 <__assert_fail@plt+0x7048>
   2278c:	b	22768 <__assert_fail@plt+0x10dac>
   22790:	ldr	r8, [r5]
   22794:	mov	r0, r5
   22798:	bl	18758 <__assert_fail@plt+0x6d9c>
   2279c:	mov	r5, r8
   227a0:	b	2264c <__assert_fail@plt+0x10c90>
   227a4:	str	r5, [r4, #52]	; 0x34
   227a8:	b	22644 <__assert_fail@plt+0x10c88>
   227ac:	str	r0, [r4, #52]	; 0x34
   227b0:	mov	r8, #12
   227b4:	ldr	r0, [r5, #4]
   227b8:	lsl	r0, r0, #2
   227bc:	bl	18840 <__assert_fail@plt+0x6e84>
   227c0:	str	r0, [r5, #12]
   227c4:	ldr	r0, [r5, #4]
   227c8:	lsl	r0, r0, #2
   227cc:	bl	18840 <__assert_fail@plt+0x6e84>
   227d0:	str	r0, [r5, #16]
   227d4:	ldr	r0, [r5, #4]
   227d8:	mul	r0, r8, r0
   227dc:	bl	18840 <__assert_fail@plt+0x6e84>
   227e0:	str	r0, [r5, #20]
   227e4:	ldr	r0, [r5, #4]
   227e8:	mul	r0, r8, r0
   227ec:	bl	18840 <__assert_fail@plt+0x6e84>
   227f0:	ldr	r3, [r5, #12]
   227f4:	str	r0, [r5, #24]
   227f8:	cmp	r3, #0
   227fc:	bne	2280c <__assert_fail@plt+0x10e50>
   22800:	mov	r3, #12
   22804:	str	r3, [sp, #24]
   22808:	b	22644 <__assert_fail@plt+0x10c88>
   2280c:	ldr	r3, [r5, #16]
   22810:	cmp	r3, #0
   22814:	beq	22800 <__assert_fail@plt+0x10e44>
   22818:	ldr	r3, [r5, #20]
   2281c:	clz	r0, r0
   22820:	lsr	r0, r0, #5
   22824:	cmp	r3, #0
   22828:	moveq	r0, #1
   2282c:	cmp	r0, #0
   22830:	str	r0, [sp, #12]
   22834:	bne	22800 <__assert_fail@plt+0x10e44>
   22838:	ldr	r0, [r6, #24]
   2283c:	lsl	r0, r0, #2
   22840:	bl	18840 <__assert_fail@plt+0x6e84>
   22844:	cmp	r0, #0
   22848:	str	r0, [r5, #132]	; 0x84
   2284c:	ldrne	r2, [r6, #24]
   22850:	ldrne	r3, [sp, #12]
   22854:	bne	22928 <__assert_fail@plt+0x10f6c>
   22858:	mov	r2, r6
   2285c:	ldr	r1, [pc, #1500]	; 22e40 <__assert_fail@plt+0x11484>
   22860:	ldr	r0, [r5, #52]	; 0x34
   22864:	bl	18b40 <__assert_fail@plt+0x7184>
   22868:	subs	r8, r0, #0
   2286c:	bne	22910 <__assert_fail@plt+0x10f54>
   22870:	mov	r2, r5
   22874:	ldr	r1, [pc, #1480]	; 22e44 <__assert_fail@plt+0x11488>
   22878:	ldr	r0, [r5, #52]	; 0x34
   2287c:	bl	18b40 <__assert_fail@plt+0x7184>
   22880:	subs	r8, r0, #0
   22884:	bne	22910 <__assert_fail@plt+0x10f54>
   22888:	mov	r2, r5
   2288c:	ldr	r1, [pc, #1460]	; 22e48 <__assert_fail@plt+0x1148c>
   22890:	ldr	r0, [r5, #52]	; 0x34
   22894:	bl	1b324 <__assert_fail@plt+0x9968>
   22898:	mov	r2, r5
   2289c:	ldr	r1, [pc, #1448]	; 22e4c <__assert_fail@plt+0x11490>
   228a0:	ldr	r0, [r5, #52]	; 0x34
   228a4:	bl	1b324 <__assert_fail@plt+0x9968>
   228a8:	subs	r8, r0, #0
   228ac:	bne	22910 <__assert_fail@plt+0x10f54>
   228b0:	mov	sl, r8
   228b4:	mov	r9, r8
   228b8:	ldr	r3, [r5, #8]
   228bc:	cmp	r3, r9
   228c0:	bne	228d4 <__assert_fail@plt+0x10f18>
   228c4:	cmp	sl, #0
   228c8:	beq	229a4 <__assert_fail@plt+0x10fe8>
   228cc:	mov	sl, #0
   228d0:	mov	r9, sl
   228d4:	mov	r3, #12
   228d8:	mul	fp, r3, r9
   228dc:	ldr	r3, [r5, #24]
   228e0:	add	r3, r3, fp
   228e4:	ldr	r3, [r3, #4]
   228e8:	cmp	r3, #0
   228ec:	bne	2299c <__assert_fail@plt+0x10fe0>
   228f0:	mov	r3, #1
   228f4:	mov	r2, r9
   228f8:	mov	r1, r5
   228fc:	add	r0, sp, #32
   22900:	bl	1c2d4 <__assert_fail@plt+0xa918>
   22904:	cmp	r0, #0
   22908:	beq	2297c <__assert_fail@plt+0x10fc0>
   2290c:	mov	r8, r0
   22910:	cmp	r8, #0
   22914:	str	r8, [sp, #24]
   22918:	beq	229c0 <__assert_fail@plt+0x11004>
   2291c:	b	22644 <__assert_fail@plt+0x10c88>
   22920:	str	r3, [r0, r3, lsl #2]
   22924:	add	r3, r3, #1
   22928:	cmp	r3, r2
   2292c:	bne	22920 <__assert_fail@plt+0x10f64>
   22930:	mov	r2, r5
   22934:	ldr	r1, [pc, #1300]	; 22e50 <__assert_fail@plt+0x11494>
   22938:	ldr	r0, [r5, #52]	; 0x34
   2293c:	bl	1b324 <__assert_fail@plt+0x9968>
   22940:	ldr	r2, [r6, #24]
   22944:	mov	r3, #0
   22948:	cmp	r3, r2
   2294c:	bne	22964 <__assert_fail@plt+0x10fa8>
   22950:	ldr	r0, [r5, #132]	; 0x84
   22954:	bl	18758 <__assert_fail@plt+0x6d9c>
   22958:	mov	r3, #0
   2295c:	str	r3, [r5, #132]	; 0x84
   22960:	b	22858 <__assert_fail@plt+0x10e9c>
   22964:	ldr	r1, [r5, #132]	; 0x84
   22968:	ldr	r1, [r1, r3, lsl #2]
   2296c:	cmp	r1, r3
   22970:	bne	22858 <__assert_fail@plt+0x10e9c>
   22974:	add	r3, r3, #1
   22978:	b	22948 <__assert_fail@plt+0x10f8c>
   2297c:	ldr	r3, [r5, #24]
   22980:	add	fp, r3, fp
   22984:	ldr	r3, [fp, #4]
   22988:	cmp	r3, #0
   2298c:	bne	2299c <__assert_fail@plt+0x10fe0>
   22990:	ldr	r0, [sp, #40]	; 0x28
   22994:	mov	sl, #1
   22998:	bl	18758 <__assert_fail@plt+0x6d9c>
   2299c:	add	r9, r9, #1
   229a0:	b	228b8 <__assert_fail@plt+0x10efc>
   229a4:	ldrb	r3, [r6, #28]
   229a8:	tst	r3, #16
   229ac:	beq	22aa0 <__assert_fail@plt+0x110e4>
   229b0:	ldr	r3, [r5, #76]	; 0x4c
   229b4:	cmp	r3, #0
   229b8:	streq	r3, [sp, #24]
   229bc:	bne	22ab8 <__assert_fail@plt+0x110fc>
   229c0:	ldrb	r3, [r4, #88]	; 0x58
   229c4:	clz	r7, r7
   229c8:	lsr	r7, r7, #5
   229cc:	ands	r7, r7, r3, lsr #2
   229d0:	beq	229e8 <__assert_fail@plt+0x1102c>
   229d4:	ldr	r3, [r6, #20]
   229d8:	cmp	r3, #0
   229dc:	moveq	r2, r3
   229e0:	ldreq	ip, [r4, #8]
   229e4:	beq	22bd8 <__assert_fail@plt+0x1121c>
   229e8:	mov	r8, #12
   229ec:	add	r0, sp, #32
   229f0:	ldr	r1, [r4, #24]
   229f4:	ldr	r3, [r4, #52]	; 0x34
   229f8:	ldr	r3, [r3, #12]
   229fc:	ldr	r3, [r3, #28]
   22a00:	mla	r1, r8, r3, r1
   22a04:	str	r3, [r4, #72]	; 0x48
   22a08:	bl	1b468 <__assert_fail@plt+0x9aac>
   22a0c:	cmp	r0, #0
   22a10:	mov	r5, r0
   22a14:	str	r0, [sp, #28]
   22a18:	bne	22a54 <__assert_fail@plt+0x11098>
   22a1c:	ldr	r3, [r4, #76]	; 0x4c
   22a20:	cmp	r3, #0
   22a24:	movgt	r7, r0
   22a28:	addgt	r9, sp, #32
   22a2c:	bgt	22cfc <__assert_fail@plt+0x11340>
   22a30:	mov	r3, #0
   22a34:	add	r2, sp, #32
   22a38:	mov	r1, r4
   22a3c:	add	r0, sp, #28
   22a40:	bl	1b620 <__assert_fail@plt+0x9c64>
   22a44:	cmp	r0, #0
   22a48:	str	r0, [r4, #36]	; 0x24
   22a4c:	bne	22d84 <__assert_fail@plt+0x113c8>
   22a50:	ldr	r5, [sp, #28]
   22a54:	str	r5, [sp, #24]
   22a58:	ldr	r7, [r6]
   22a5c:	ldr	r5, [r7, #56]	; 0x38
   22a60:	cmp	r5, #0
   22a64:	bne	22e0c <__assert_fail@plt+0x11450>
   22a68:	mov	r3, #31
   22a6c:	str	r5, [r7, #52]	; 0x34
   22a70:	str	r5, [r7, #56]	; 0x38
   22a74:	str	r3, [r7, #64]	; 0x40
   22a78:	ldr	r0, [r7, #16]
   22a7c:	bl	18758 <__assert_fail@plt+0x6d9c>
   22a80:	add	r0, sp, #44	; 0x2c
   22a84:	str	r5, [r7, #16]
   22a88:	bl	19f10 <__assert_fail@plt+0x8554>
   22a8c:	ldr	r3, [sp, #24]
   22a90:	cmp	r3, #0
   22a94:	bne	22678 <__assert_fail@plt+0x10cbc>
   22a98:	ldr	r0, [sp, #24]
   22a9c:	b	22e24 <__assert_fail@plt+0x11468>
   22aa0:	ldr	r3, [r6, #24]
   22aa4:	cmp	r3, #0
   22aa8:	beq	229b0 <__assert_fail@plt+0x10ff4>
   22aac:	ldrb	r3, [r5, #88]	; 0x58
   22ab0:	tst	r3, #1
   22ab4:	beq	229b0 <__assert_fail@plt+0x10ff4>
   22ab8:	mov	sl, #12
   22abc:	mul	r0, sl, r9
   22ac0:	bl	18840 <__assert_fail@plt+0x6e84>
   22ac4:	cmp	r0, #0
   22ac8:	str	r0, [r5, #28]
   22acc:	movne	r3, #0
   22ad0:	movne	ip, r3
   22ad4:	beq	22800 <__assert_fail@plt+0x10e44>
   22ad8:	ldr	r2, [r5, #8]
   22adc:	cmp	r2, r3
   22ae0:	bhi	22b28 <__assert_fail@plt+0x1116c>
   22ae4:	mov	r9, #0
   22ae8:	mov	r2, #12
   22aec:	ldr	r3, [r5, #8]
   22af0:	cmp	r3, r9
   22af4:	bls	22910 <__assert_fail@plt+0x10f54>
   22af8:	ldr	r3, [r5, #24]
   22afc:	mul	fp, r2, r9
   22b00:	mov	sl, #0
   22b04:	add	r3, r3, fp
   22b08:	ldr	r3, [r3, #8]
   22b0c:	ldr	r1, [r5, #24]
   22b10:	add	r1, r1, fp
   22b14:	ldr	r1, [r1, #4]
   22b18:	cmp	sl, r1
   22b1c:	blt	22b48 <__assert_fail@plt+0x1118c>
   22b20:	add	r9, r9, #1
   22b24:	b	22aec <__assert_fail@plt+0x11130>
   22b28:	ldr	r0, [r5, #28]
   22b2c:	mul	r1, sl, r3
   22b30:	add	r3, r3, #1
   22b34:	add	r2, r0, r1
   22b38:	str	ip, [r0, r1]
   22b3c:	str	ip, [r2, #4]
   22b40:	str	ip, [r2, #8]
   22b44:	b	22ad8 <__assert_fail@plt+0x1111c>
   22b48:	ldr	ip, [r3, sl, lsl #2]
   22b4c:	mov	r1, r9
   22b50:	str	r3, [sp, #20]
   22b54:	ldr	r0, [r5, #28]
   22b58:	mla	r0, r2, ip, r0
   22b5c:	bl	19108 <__assert_fail@plt+0x774c>
   22b60:	cmp	r0, #0
   22b64:	beq	22b78 <__assert_fail@plt+0x111bc>
   22b68:	add	sl, sl, #1
   22b6c:	mov	r2, #12
   22b70:	ldr	r3, [sp, #20]
   22b74:	b	22b0c <__assert_fail@plt+0x11150>
   22b78:	mov	r8, #12
   22b7c:	b	22910 <__assert_fail@plt+0x10f54>
   22b80:	ldr	r1, [r4]
   22b84:	lsl	lr, r2, #3
   22b88:	add	r0, r1, lr
   22b8c:	ldrb	r0, [r0, #4]
   22b90:	sub	r0, r0, #1
   22b94:	cmp	r0, #11
   22b98:	ldrls	pc, [pc, r0, lsl #2]
   22b9c:	b	22c80 <__assert_fail@plt+0x112c4>
   22ba0:	andeq	r2, r2, r8, lsl ip
   22ba4:	ldrdeq	r2, [r2], -r4
   22ba8:	andeq	r2, r2, ip, asr ip
   22bac:	ldrdeq	r2, [r2], -r4
   22bb0:	ldrdeq	r2, [r2], -r0
   22bb4:	andeq	r2, r2, r8, ror #19
   22bb8:	andeq	r2, r2, r0, lsl #25
   22bbc:	ldrdeq	r2, [r2], -r4
   22bc0:	ldrdeq	r2, [r2], -r4
   22bc4:	ldrdeq	r2, [r2], -r4
   22bc8:	ldrdeq	r2, [r2], -r4
   22bcc:	andeq	r2, r2, r0, lsr ip
   22bd0:	mov	r3, r7
   22bd4:	add	r2, r2, #1
   22bd8:	cmp	r2, ip
   22bdc:	bne	22b80 <__assert_fail@plt+0x111c4>
   22be0:	ldr	r2, [sp, #12]
   22be4:	orr	r0, r2, r3
   22be8:	tst	r0, #255	; 0xff
   22bec:	bne	22ccc <__assert_fail@plt+0x11310>
   22bf0:	mov	r2, #1
   22bf4:	ldr	r1, [r4, #76]	; 0x4c
   22bf8:	str	r2, [r4, #92]	; 0x5c
   22bfc:	ldrb	r2, [r4, #88]	; 0x58
   22c00:	cmp	r1, #0
   22c04:	orrgt	r3, r3, #1
   22c08:	and	r2, r2, #251	; 0xfb
   22c0c:	bfi	r2, r3, #1, #1
   22c10:	strb	r2, [r4, #88]	; 0x58
   22c14:	b	229e8 <__assert_fail@plt+0x1102c>
   22c18:	ldrsb	r1, [r1, lr]
   22c1c:	ldr	r0, [sp, #12]
   22c20:	cmp	r1, #0
   22c24:	movlt	r0, r7
   22c28:	str	r0, [sp, #12]
   22c2c:	b	22bd4 <__assert_fail@plt+0x11218>
   22c30:	ldr	r1, [r1, r2, lsl #3]
   22c34:	cmp	r1, #32
   22c38:	beq	22bd4 <__assert_fail@plt+0x11218>
   22c3c:	bhi	22c4c <__assert_fail@plt+0x11290>
   22c40:	cmp	r1, #16
   22c44:	beq	22bd4 <__assert_fail@plt+0x11218>
   22c48:	b	229e8 <__assert_fail@plt+0x1102c>
   22c4c:	cmp	r1, #64	; 0x40
   22c50:	beq	22bd4 <__assert_fail@plt+0x11218>
   22c54:	cmp	r1, #128	; 0x80
   22c58:	b	22c44 <__assert_fail@plt+0x11288>
   22c5c:	ldr	r1, [r1, r2, lsl #3]
   22c60:	add	r0, r1, #12
   22c64:	add	r1, r1, #28
   22c68:	ldr	lr, [r0, #4]!
   22c6c:	cmp	lr, #0
   22c70:	bne	229e8 <__assert_fail@plt+0x1102c>
   22c74:	cmp	r1, r0
   22c78:	bne	22c68 <__assert_fail@plt+0x112ac>
   22c7c:	b	22bd4 <__assert_fail@plt+0x11218>
   22c80:	bl	11980 <abort@plt>
   22c84:	ldr	r5, [r4]
   22c88:	lsl	lr, r2, #3
   22c8c:	add	r1, r5, lr
   22c90:	ldrb	r0, [r1, #4]
   22c94:	cmp	r0, #1
   22c98:	bne	22cc0 <__assert_fail@plt+0x11304>
   22c9c:	ldrsb	r0, [r5, lr]
   22ca0:	cmp	r0, #0
   22ca4:	ldrblt	r0, [r1, #6]
   22ca8:	bfclt	r0, #5, #1
   22cac:	strblt	r0, [r1, #6]
   22cb0:	add	r2, r2, #1
   22cb4:	cmp	r2, ip
   22cb8:	bne	22c84 <__assert_fail@plt+0x112c8>
   22cbc:	b	22bf0 <__assert_fail@plt+0x11234>
   22cc0:	cmp	r0, #5
   22cc4:	strbeq	r7, [r1, #4]
   22cc8:	b	22cb0 <__assert_fail@plt+0x112f4>
   22ccc:	mov	r2, #0
   22cd0:	mov	r7, #7
   22cd4:	b	22cb4 <__assert_fail@plt+0x112f8>
   22cd8:	ldr	r0, [sp, #40]	; 0x28
   22cdc:	ldr	r1, [r4]
   22ce0:	ldr	r3, [r0, r7, lsl #2]
   22ce4:	add	ip, r1, r3, lsl #3
   22ce8:	ldrb	r2, [ip, #4]
   22cec:	cmp	r2, #4
   22cf0:	moveq	r2, #0
   22cf4:	beq	22d34 <__assert_fail@plt+0x11378>
   22cf8:	add	r7, r7, #1
   22cfc:	ldr	fp, [sp, #36]	; 0x24
   22d00:	cmp	r7, fp
   22d04:	blt	22cd8 <__assert_fail@plt+0x1131c>
   22d08:	b	22a30 <__assert_fail@plt+0x11074>
   22d0c:	ldr	lr, [r0, r2, lsl #2]
   22d10:	add	sl, r1, lr, lsl #3
   22d14:	ldrb	sl, [sl, #4]
   22d18:	cmp	sl, #9
   22d1c:	bne	22d30 <__assert_fail@plt+0x11374>
   22d20:	ldr	sl, [r1, lr, lsl #3]
   22d24:	ldr	lr, [ip]
   22d28:	cmp	sl, lr
   22d2c:	beq	22d40 <__assert_fail@plt+0x11384>
   22d30:	add	r2, r2, #1
   22d34:	cmp	r2, fp
   22d38:	blt	22d0c <__assert_fail@plt+0x11350>
   22d3c:	beq	22cf8 <__assert_fail@plt+0x1133c>
   22d40:	ldr	r2, [r4, #20]
   22d44:	mov	r0, r9
   22d48:	mla	r3, r8, r3, r2
   22d4c:	ldr	r3, [r3, #8]
   22d50:	ldr	sl, [r3]
   22d54:	mov	r1, sl
   22d58:	bl	18acc <__assert_fail@plt+0x7110>
   22d5c:	cmp	r0, #0
   22d60:	bne	22cf8 <__assert_fail@plt+0x1133c>
   22d64:	ldr	r1, [r4, #24]
   22d68:	mov	r0, r9
   22d6c:	mla	r1, r8, sl, r1
   22d70:	bl	1c174 <__assert_fail@plt+0xa7b8>
   22d74:	subs	r7, r0, #0
   22d78:	beq	22cf8 <__assert_fail@plt+0x1133c>
   22d7c:	mov	r5, r7
   22d80:	b	22a54 <__assert_fail@plt+0x11098>
   22d84:	ldrsb	r3, [r0, #52]	; 0x34
   22d88:	cmp	r3, #0
   22d8c:	strge	r0, [r4, #40]	; 0x28
   22d90:	strge	r0, [r4, #44]	; 0x2c
   22d94:	strge	r0, [r4, #48]	; 0x30
   22d98:	bge	22e00 <__assert_fail@plt+0x11444>
   22d9c:	mov	r3, #1
   22da0:	add	r2, sp, #32
   22da4:	mov	r1, r4
   22da8:	add	r0, sp, #28
   22dac:	bl	1b620 <__assert_fail@plt+0x9c64>
   22db0:	mov	r3, #2
   22db4:	add	r2, sp, #32
   22db8:	str	r0, [r4, #40]	; 0x28
   22dbc:	mov	r1, r4
   22dc0:	add	r0, sp, #28
   22dc4:	bl	1b620 <__assert_fail@plt+0x9c64>
   22dc8:	mov	r3, #6
   22dcc:	add	r2, sp, #32
   22dd0:	str	r0, [r4, #44]	; 0x2c
   22dd4:	mov	r1, r4
   22dd8:	add	r0, sp, #28
   22ddc:	bl	1b620 <__assert_fail@plt+0x9c64>
   22de0:	ldr	r3, [r4, #40]	; 0x28
   22de4:	str	r0, [r4, #48]	; 0x30
   22de8:	cmp	r3, #0
   22dec:	beq	22a50 <__assert_fail@plt+0x11094>
   22df0:	ldr	r3, [r4, #44]	; 0x2c
   22df4:	cmp	r0, #0
   22df8:	cmpne	r3, #0
   22dfc:	beq	22a50 <__assert_fail@plt+0x11094>
   22e00:	ldr	r0, [sp, #40]	; 0x28
   22e04:	bl	18758 <__assert_fail@plt+0x6d9c>
   22e08:	b	22a54 <__assert_fail@plt+0x11098>
   22e0c:	ldr	r8, [r5]
   22e10:	mov	r0, r5
   22e14:	bl	18758 <__assert_fail@plt+0x6d9c>
   22e18:	mov	r5, r8
   22e1c:	b	22a60 <__assert_fail@plt+0x110a4>
   22e20:	mov	r0, #12
   22e24:	add	sp, sp, #132	; 0x84
   22e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e2c:	beq	feacd8d8 <optarg@@GLIBC_2.4+0xfea966b8>
   22e30:	andeq	r6, r2, pc, asr #26
   22e34:	andeq	r6, r2, ip, lsr #22
	...
   22e40:	strdeq	r9, [r1], -r0
   22e44:	andeq	fp, r1, ip, ror #22
   22e48:	ldrdeq	fp, [r1], -r4
   22e4c:	ldrdeq	r9, [r1], -r0
   22e50:	andeq	fp, r1, ip, lsr r2
   22e54:	ldr	r3, [pc, #92]	; 22eb8 <__assert_fail@plt+0x114fc>
   22e58:	mov	ip, r2
   22e5c:	push	{r4, lr}
   22e60:	ldrb	r2, [r2, #28]
   22e64:	ldr	r3, [r3]
   22e68:	ubfx	lr, r3, #25, #1
   22e6c:	bfi	r2, lr, #4, #1
   22e70:	mvn	r2, r2, lsl #25
   22e74:	mvn	r2, r2, lsr #25
   22e78:	strb	r2, [ip, #28]
   22e7c:	mov	r2, r1
   22e80:	mov	r1, r0
   22e84:	mov	r0, ip
   22e88:	bl	222c4 <__assert_fail@plt+0x10908>
   22e8c:	subs	r2, r0, #0
   22e90:	popeq	{r4, pc}
   22e94:	mov	r0, #0
   22e98:	pop	{r4, lr}
   22e9c:	ldr	r3, [pc, #24]	; 22ebc <__assert_fail@plt+0x11500>
   22ea0:	add	r1, r3, #32
   22ea4:	add	r3, r3, r2, lsl #2
   22ea8:	mov	r2, #5
   22eac:	ldr	r3, [r3, #416]	; 0x1a0
   22eb0:	add	r1, r1, r3
   22eb4:	b	11638 <dcgettext@plt>
   22eb8:	ldrdeq	r7, [r3], -r8
   22ebc:	andeq	r6, r2, ip, lsr #22
   22ec0:	ldr	r3, [pc, #12]	; 22ed4 <__assert_fail@plt+0x11518>
   22ec4:	ldr	r2, [r3]
   22ec8:	str	r0, [r3]
   22ecc:	mov	r0, r2
   22ed0:	bx	lr
   22ed4:	ldrdeq	r7, [r3], -r8
   22ed8:	push	{r4, r5, r6, lr}
   22edc:	mov	r2, #256	; 0x100
   22ee0:	mov	r4, r0
   22ee4:	mov	r1, #0
   22ee8:	ldr	r5, [r0]
   22eec:	ldr	r6, [r0, #16]
   22ef0:	mov	r0, r6
   22ef4:	bl	11818 <memset@plt>
   22ef8:	mov	r2, r6
   22efc:	mov	r0, r4
   22f00:	ldr	r1, [r5, #36]	; 0x24
   22f04:	bl	1abf0 <__assert_fail@plt+0x9234>
   22f08:	ldr	r3, [r5, #36]	; 0x24
   22f0c:	ldr	r1, [r5, #40]	; 0x28
   22f10:	cmp	r3, r1
   22f14:	beq	22f24 <__assert_fail@plt+0x11568>
   22f18:	mov	r2, r6
   22f1c:	mov	r0, r4
   22f20:	bl	1abf0 <__assert_fail@plt+0x9234>
   22f24:	ldr	r3, [r5, #36]	; 0x24
   22f28:	ldr	r1, [r5, #44]	; 0x2c
   22f2c:	cmp	r3, r1
   22f30:	beq	22f40 <__assert_fail@plt+0x11584>
   22f34:	mov	r2, r6
   22f38:	mov	r0, r4
   22f3c:	bl	1abf0 <__assert_fail@plt+0x9234>
   22f40:	ldr	r3, [r5, #36]	; 0x24
   22f44:	ldr	r1, [r5, #48]	; 0x30
   22f48:	cmp	r3, r1
   22f4c:	beq	22f5c <__assert_fail@plt+0x115a0>
   22f50:	mov	r2, r6
   22f54:	mov	r0, r4
   22f58:	bl	1abf0 <__assert_fail@plt+0x9234>
   22f5c:	ldrb	r3, [r4, #28]
   22f60:	mov	r0, #0
   22f64:	orr	r3, r3, #8
   22f68:	strb	r3, [r4, #28]
   22f6c:	pop	{r4, r5, r6, pc}
   22f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f74:	sub	sp, sp, #44	; 0x2c
   22f78:	cmp	r3, r2
   22f7c:	ldr	lr, [r0]
   22f80:	ldr	ip, [sp, #80]	; 0x50
   22f84:	ldr	r4, [sp, #88]	; 0x58
   22f88:	str	lr, [sp, #24]
   22f8c:	movle	lr, #0
   22f90:	movgt	lr, #1
   22f94:	orrs	lr, lr, r3, lsr #31
   22f98:	add	r6, r3, ip
   22f9c:	mvnne	r4, #0
   22fa0:	bne	2310c <__assert_fail@plt+0x11750>
   22fa4:	cmp	r6, r2
   22fa8:	bgt	23118 <__assert_fail@plt+0x1175c>
   22fac:	cmp	ip, #0
   22fb0:	cmpge	r3, r6
   22fb4:	movgt	lr, #1
   22fb8:	movle	lr, #0
   22fbc:	bgt	23118 <__assert_fail@plt+0x1175c>
   22fc0:	cmp	r6, #0
   22fc4:	movlt	r6, lr
   22fc8:	blt	22fe0 <__assert_fail@plt+0x11624>
   22fcc:	cmp	r3, r6
   22fd0:	movgt	lr, #0
   22fd4:	movle	lr, #1
   22fd8:	ands	ip, lr, ip, lsr #31
   22fdc:	movne	r6, #0
   22fe0:	ldr	lr, [pc, #672]	; 23288 <__assert_fail@plt+0x118cc>
   22fe4:	mov	ip, #1
   22fe8:	mov	r8, r3
   22fec:	mov	r9, r1
   22ff0:	mov	r7, r0
   22ff4:	str	r2, [sp, #32]
   22ff8:	ldr	r5, [pc, #652]	; 2328c <__assert_fail@plt+0x118d0>
   22ffc:	cmp	lr, #0
   23000:	moveq	ip, lr
   23004:	mov	lr, #1
   23008:	cmp	r5, #0
   2300c:	moveq	lr, r5
   23010:	orr	ip, ip, lr
   23014:	ands	r3, ip, #255	; 0xff
   23018:	str	r3, [sp, #28]
   2301c:	beq	2302c <__assert_fail@plt+0x11670>
   23020:	ldr	r3, [sp, #24]
   23024:	add	r0, r3, #136	; 0x88
   23028:	bl	115b4 <pthread_mutex_lock@plt>
   2302c:	ldrb	r2, [r7, #28]
   23030:	cmp	r6, r8
   23034:	ubfx	fp, r2, #5, #2
   23038:	ble	23058 <__assert_fail@plt+0x1169c>
   2303c:	ldr	r1, [r7, #16]
   23040:	cmp	r1, #0
   23044:	beq	23058 <__assert_fail@plt+0x1169c>
   23048:	tst	r2, #8
   2304c:	bne	23058 <__assert_fail@plt+0x1169c>
   23050:	mov	r0, r7
   23054:	bl	22ed8 <__assert_fail@plt+0x1151c>
   23058:	ldrb	r1, [r7, #28]
   2305c:	ubfx	r2, r1, #4, #1
   23060:	cmp	r4, #0
   23064:	orreq	r2, r2, #1
   23068:	ands	r2, r2, #255	; 0xff
   2306c:	movne	r5, #1
   23070:	movne	r4, #0
   23074:	bne	230a0 <__assert_fail@plt+0x116e4>
   23078:	and	r1, r1, #6
   2307c:	ldr	r5, [r7, #24]
   23080:	cmp	r1, #4
   23084:	bne	23120 <__assert_fail@plt+0x11764>
   23088:	ldr	r1, [r4]
   2308c:	cmp	r5, r1
   23090:	bcc	23120 <__assert_fail@plt+0x11764>
   23094:	subs	r5, r1, #0
   23098:	movle	r5, #1
   2309c:	movle	r4, r2
   230a0:	lsl	r0, r5, #3
   230a4:	bl	18840 <__assert_fail@plt+0x6e84>
   230a8:	subs	sl, r0, #0
   230ac:	mvneq	r4, #1
   230b0:	beq	230f4 <__assert_fail@plt+0x11738>
   230b4:	ldr	r2, [sp, #84]	; 0x54
   230b8:	mov	r1, r9
   230bc:	mov	r3, r8
   230c0:	mov	r0, r7
   230c4:	str	r6, [sp]
   230c8:	stmib	sp, {r2, r5, sl, fp}
   230cc:	ldr	r2, [sp, #32]
   230d0:	bl	1f97c <__assert_fail@plt+0xdfc0>
   230d4:	subs	r9, r0, #0
   230d8:	beq	23128 <__assert_fail@plt+0x1176c>
   230dc:	cmp	r9, #1
   230e0:	mvneq	r4, #0
   230e4:	beq	230ec <__assert_fail@plt+0x11730>
   230e8:	mvn	r4, #1
   230ec:	mov	r0, sl
   230f0:	bl	18758 <__assert_fail@plt+0x6d9c>
   230f4:	ldr	r3, [sp, #28]
   230f8:	cmp	r3, #0
   230fc:	beq	2310c <__assert_fail@plt+0x11750>
   23100:	ldr	r3, [sp, #24]
   23104:	add	r0, r3, #136	; 0x88
   23108:	bl	11500 <pthread_mutex_unlock@plt>
   2310c:	mov	r0, r4
   23110:	add	sp, sp, #44	; 0x2c
   23114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23118:	mov	r6, r2
   2311c:	b	22fe0 <__assert_fail@plt+0x11624>
   23120:	add	r5, r5, #1
   23124:	b	230a0 <__assert_fail@plt+0x116e4>
   23128:	cmp	r4, #0
   2312c:	bne	23148 <__assert_fail@plt+0x1178c>
   23130:	ldrb	r3, [sp, #92]	; 0x5c
   23134:	ldr	r4, [sl]
   23138:	cmp	r3, #0
   2313c:	ldrne	r4, [sl, #4]
   23140:	subne	r4, r4, r8
   23144:	b	230ec <__assert_fail@plt+0x11730>
   23148:	ldrb	r6, [r7, #28]
   2314c:	add	fp, r5, #1
   23150:	ubfx	r6, r6, #1, #2
   23154:	cmp	r6, #0
   23158:	bne	231c0 <__assert_fail@plt+0x11804>
   2315c:	lsl	r6, fp, #2
   23160:	mov	r0, r6
   23164:	bl	18840 <__assert_fail@plt+0x6e84>
   23168:	cmp	r0, #0
   2316c:	str	r0, [r4, #4]
   23170:	bne	23194 <__assert_fail@plt+0x117d8>
   23174:	mov	r6, #0
   23178:	ldrb	r3, [r7, #28]
   2317c:	bfi	r3, r6, #1, #2
   23180:	strb	r3, [r7, #28]
   23184:	and	r3, r3, #6
   23188:	cmp	r3, #0
   2318c:	bne	23130 <__assert_fail@plt+0x11774>
   23190:	b	230e8 <__assert_fail@plt+0x1172c>
   23194:	mov	r0, r6
   23198:	bl	18840 <__assert_fail@plt+0x6e84>
   2319c:	cmp	r0, #0
   231a0:	mov	r6, r0
   231a4:	str	r0, [r4, #8]
   231a8:	movne	r6, #1
   231ac:	strne	fp, [r4]
   231b0:	bne	23230 <__assert_fail@plt+0x11874>
   231b4:	ldr	r0, [r4, #4]
   231b8:	bl	18758 <__assert_fail@plt+0x6d9c>
   231bc:	b	23178 <__assert_fail@plt+0x117bc>
   231c0:	cmp	r6, #1
   231c4:	movne	r6, #2
   231c8:	bne	23230 <__assert_fail@plt+0x11874>
   231cc:	ldr	r3, [r4]
   231d0:	cmp	r3, fp
   231d4:	bcs	23230 <__assert_fail@plt+0x11874>
   231d8:	lsl	r2, fp, #2
   231dc:	ldr	r0, [r4, #4]
   231e0:	mov	r1, r2
   231e4:	str	r2, [sp, #36]	; 0x24
   231e8:	bl	188bc <__assert_fail@plt+0x6f00>
   231ec:	subs	r3, r0, #0
   231f0:	str	r3, [sp, #32]
   231f4:	beq	23174 <__assert_fail@plt+0x117b8>
   231f8:	ldr	r2, [sp, #36]	; 0x24
   231fc:	ldr	r0, [r4, #8]
   23200:	mov	r1, r2
   23204:	bl	188bc <__assert_fail@plt+0x6f00>
   23208:	ldr	r3, [sp, #32]
   2320c:	subs	r2, r0, #0
   23210:	strne	fp, [r4]
   23214:	strne	r2, [r4, #8]
   23218:	strne	r3, [r4, #4]
   2321c:	bne	23230 <__assert_fail@plt+0x11874>
   23220:	mov	r0, r3
   23224:	str	r2, [sp, #32]
   23228:	bl	18758 <__assert_fail@plt+0x6d9c>
   2322c:	b	23174 <__assert_fail@plt+0x117b8>
   23230:	add	r3, sl, #4
   23234:	cmp	r5, r9
   23238:	bgt	23268 <__assert_fail@plt+0x118ac>
   2323c:	bic	r5, r5, r5, asr #31
   23240:	mvn	r3, #0
   23244:	ldr	r2, [r4]
   23248:	cmp	r5, r2
   2324c:	bcs	23178 <__assert_fail@plt+0x117bc>
   23250:	ldr	r2, [r4, #8]
   23254:	str	r3, [r2, r5, lsl #2]
   23258:	ldr	r2, [r4, #4]
   2325c:	str	r3, [r2, r5, lsl #2]
   23260:	add	r5, r5, #1
   23264:	b	23244 <__assert_fail@plt+0x11888>
   23268:	ldr	r1, [sl, r9, lsl #3]
   2326c:	ldr	r2, [r4, #4]
   23270:	str	r1, [r2, r9, lsl #2]
   23274:	ldr	r1, [r3, r9, lsl #3]
   23278:	ldr	r2, [r4, #8]
   2327c:	str	r1, [r2, r9, lsl #2]
   23280:	add	r9, r9, #1
   23284:	b	23234 <__assert_fail@plt+0x11878>
	...
   23290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23294:	sub	sp, sp, #20
   23298:	mov	sl, r3
   2329c:	ldr	r5, [sp, #56]	; 0x38
   232a0:	ldr	r9, [sp, #72]	; 0x48
   232a4:	orr	r3, r5, r2
   232a8:	orrs	r3, r3, r9
   232ac:	bpl	232c0 <__assert_fail@plt+0x11904>
   232b0:	mvn	r4, #1
   232b4:	mov	r0, r4
   232b8:	add	sp, sp, #20
   232bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   232c0:	adds	r8, r2, r5
   232c4:	mov	r4, r2
   232c8:	bvs	232b0 <__assert_fail@plt+0x118f4>
   232cc:	cmp	r5, #0
   232d0:	mov	fp, r0
   232d4:	mov	r7, r1
   232d8:	beq	2335c <__assert_fail@plt+0x119a0>
   232dc:	cmp	r2, #0
   232e0:	moveq	r7, sl
   232e4:	moveq	r6, r2
   232e8:	beq	2331c <__assert_fail@plt+0x11960>
   232ec:	mov	r0, r8
   232f0:	bl	18840 <__assert_fail@plt+0x6e84>
   232f4:	subs	r6, r0, #0
   232f8:	beq	232b0 <__assert_fail@plt+0x118f4>
   232fc:	mov	r1, r7
   23300:	mov	r2, r4
   23304:	bl	115e4 <memcpy@plt>
   23308:	mov	r7, r6
   2330c:	mov	r2, r5
   23310:	mov	r1, sl
   23314:	add	r0, r6, r4
   23318:	bl	115e4 <memcpy@plt>
   2331c:	ldrb	r3, [sp, #76]	; 0x4c
   23320:	mov	r2, r8
   23324:	mov	r1, r7
   23328:	mov	r0, fp
   2332c:	str	r9, [sp, #4]
   23330:	str	r3, [sp, #12]
   23334:	ldr	r3, [sp, #68]	; 0x44
   23338:	str	r3, [sp, #8]
   2333c:	ldr	r3, [sp, #64]	; 0x40
   23340:	str	r3, [sp]
   23344:	ldr	r3, [sp, #60]	; 0x3c
   23348:	bl	22f70 <__assert_fail@plt+0x115b4>
   2334c:	mov	r4, r0
   23350:	mov	r0, r6
   23354:	bl	18758 <__assert_fail@plt+0x6d9c>
   23358:	b	232b4 <__assert_fail@plt+0x118f8>
   2335c:	mov	r6, r5
   23360:	b	2331c <__assert_fail@plt+0x11960>
   23364:	push	{r4, r5, r6, r7, r8, lr}
   23368:	mov	r3, #0
   2336c:	tst	r2, #1
   23370:	mov	r4, r0
   23374:	mov	r7, r1
   23378:	mov	r6, r2
   2337c:	ldr	r5, [pc, #184]	; 2343c <__assert_fail@plt+0x11a80>
   23380:	str	r3, [r0]
   23384:	str	r3, [r0, #4]
   23388:	str	r3, [r0, #8]
   2338c:	mov	r0, #256	; 0x100
   23390:	ldr	r8, [pc, #168]	; 23440 <__assert_fail@plt+0x11a84>
   23394:	movne	r8, r5
   23398:	bl	18840 <__assert_fail@plt+0x6e84>
   2339c:	cmp	r0, #0
   233a0:	str	r0, [r4, #16]
   233a4:	moveq	r5, #12
   233a8:	beq	2341c <__assert_fail@plt+0x11a60>
   233ac:	ldrb	r3, [r4, #28]
   233b0:	ands	r2, r6, #4
   233b4:	lsl	r5, r6, #21
   233b8:	movne	r2, #1
   233bc:	ubfx	r6, r6, #3, #1
   233c0:	mov	r0, r7
   233c4:	and	r5, r5, #4194304	; 0x400000
   233c8:	orr	r5, r5, r8
   233cc:	bicne	r5, r5, #64	; 0x40
   233d0:	bfi	r3, r2, #7, #1
   233d4:	orrne	r5, r5, #256	; 0x100
   233d8:	bfi	r3, r6, #4, #1
   233dc:	strb	r3, [r4, #28]
   233e0:	mov	r3, #0
   233e4:	str	r3, [r4, #20]
   233e8:	bl	117ac <strlen@plt>
   233ec:	mov	r2, r0
   233f0:	mov	r3, r5
   233f4:	mov	r1, r7
   233f8:	mov	r0, r4
   233fc:	bl	222c4 <__assert_fail@plt+0x10908>
   23400:	cmp	r0, #16
   23404:	mov	r5, r0
   23408:	beq	23424 <__assert_fail@plt+0x11a68>
   2340c:	cmp	r0, #0
   23410:	bne	23428 <__assert_fail@plt+0x11a6c>
   23414:	mov	r0, r4
   23418:	bl	22ed8 <__assert_fail@plt+0x1151c>
   2341c:	mov	r0, r5
   23420:	pop	{r4, r5, r6, r7, r8, pc}
   23424:	mov	r5, #8
   23428:	ldr	r0, [r4, #16]
   2342c:	bl	18758 <__assert_fail@plt+0x6d9c>
   23430:	mov	r3, #0
   23434:	str	r3, [r4, #16]
   23438:	b	2341c <__assert_fail@plt+0x11a60>
   2343c:	strdeq	fp, [r3], -ip
   23440:	smlabteq	r1, r6, r2, r0
   23444:	cmp	r0, #16
   23448:	push	{r4, r5, r6, r7, r8, lr}
   2344c:	bls	23454 <__assert_fail@plt+0x11a98>
   23450:	bl	11980 <abort@plt>
   23454:	mov	r4, r3
   23458:	ldr	r3, [pc, #88]	; 234b8 <__assert_fail@plt+0x11afc>
   2345c:	mov	r6, r2
   23460:	mov	r2, #5
   23464:	add	r1, r3, #32
   23468:	add	r3, r3, r0, lsl #2
   2346c:	mov	r0, #0
   23470:	ldr	r3, [r3, #416]	; 0x1a0
   23474:	add	r1, r1, r3
   23478:	bl	11638 <dcgettext@plt>
   2347c:	mov	r7, r0
   23480:	bl	117ac <strlen@plt>
   23484:	cmp	r4, #0
   23488:	add	r5, r0, #1
   2348c:	beq	234b0 <__assert_fail@plt+0x11af4>
   23490:	cmp	r5, r4
   23494:	mov	r1, r7
   23498:	subhi	r2, r4, #1
   2349c:	movhi	r3, #0
   234a0:	movls	r2, r5
   234a4:	mov	r0, r6
   234a8:	strbhi	r3, [r6, r2]
   234ac:	bl	115e4 <memcpy@plt>
   234b0:	mov	r0, r5
   234b4:	pop	{r4, r5, r6, r7, r8, pc}
   234b8:	andeq	r6, r2, ip, lsr #22
   234bc:	push	{r4, r5, r6, lr}
   234c0:	mov	r4, r0
   234c4:	ldr	r5, [r0]
   234c8:	cmp	r5, #0
   234cc:	beq	2350c <__assert_fail@plt+0x11b50>
   234d0:	ldr	r2, [pc, #92]	; 23534 <__assert_fail@plt+0x11b78>
   234d4:	mov	r3, #1
   234d8:	ldr	r1, [pc, #88]	; 23538 <__assert_fail@plt+0x11b7c>
   234dc:	cmp	r2, #0
   234e0:	moveq	r3, r2
   234e4:	mov	r2, #1
   234e8:	cmp	r1, #0
   234ec:	moveq	r2, r1
   234f0:	orr	r3, r3, r2
   234f4:	tst	r3, #1
   234f8:	beq	23504 <__assert_fail@plt+0x11b48>
   234fc:	add	r0, r5, #136	; 0x88
   23500:	bl	1156c <pthread_mutex_destroy@plt>
   23504:	mov	r0, r5
   23508:	bl	1bbf0 <__assert_fail@plt+0xa234>
   2350c:	mov	r5, #0
   23510:	ldr	r0, [r4, #16]
   23514:	str	r5, [r4]
   23518:	str	r5, [r4, #4]
   2351c:	bl	18758 <__assert_fail@plt+0x6d9c>
   23520:	str	r5, [r4, #16]
   23524:	ldr	r0, [r4, #20]
   23528:	bl	18758 <__assert_fail@plt+0x6d9c>
   2352c:	str	r5, [r4, #20]
   23530:	pop	{r4, r5, r6, pc}
	...
   2353c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23540:	sub	sp, sp, #36	; 0x24
   23544:	ldr	r9, [sp, #72]	; 0x48
   23548:	bics	ip, r9, #7
   2354c:	movne	r0, #2
   23550:	bne	23614 <__assert_fail@plt+0x11c58>
   23554:	ands	fp, r9, #4
   23558:	mov	r8, r3
   2355c:	str	r2, [sp, #28]
   23560:	mov	r7, r1
   23564:	mov	r6, r0
   23568:	ldrne	fp, [r3]
   2356c:	ldrne	r5, [r3, #4]
   23570:	bne	23580 <__assert_fail@plt+0x11bc4>
   23574:	mov	r0, r1
   23578:	bl	117ac <strlen@plt>
   2357c:	mov	r5, r0
   23580:	ldr	r2, [pc, #148]	; 2361c <__assert_fail@plt+0x11c60>
   23584:	mov	r4, #1
   23588:	ldr	r1, [pc, #144]	; 23620 <__assert_fail@plt+0x11c64>
   2358c:	ldr	sl, [r6]
   23590:	cmp	r2, #0
   23594:	moveq	r4, r2
   23598:	mov	r2, #1
   2359c:	cmp	r1, #0
   235a0:	moveq	r2, r1
   235a4:	orr	r4, r4, r2
   235a8:	ands	r4, r4, #255	; 0xff
   235ac:	beq	235b8 <__assert_fail@plt+0x11bfc>
   235b0:	add	r0, sl, #136	; 0x88
   235b4:	bl	115b4 <pthread_mutex_lock@plt>
   235b8:	ldrb	r2, [r6, #28]
   235bc:	mov	r1, r7
   235c0:	mov	r0, r6
   235c4:	str	r5, [sp]
   235c8:	str	r5, [sp, #4]
   235cc:	str	r9, [sp, #16]
   235d0:	tst	r2, #16
   235d4:	ldreq	r3, [sp, #28]
   235d8:	movne	r2, #0
   235dc:	streq	r8, [sp, #12]
   235e0:	strne	r2, [sp, #8]
   235e4:	strne	r2, [sp, #12]
   235e8:	mov	r2, r5
   235ec:	streq	r3, [sp, #8]
   235f0:	mov	r3, fp
   235f4:	bl	1f97c <__assert_fail@plt+0xdfc0>
   235f8:	cmp	r4, #0
   235fc:	mov	r5, r0
   23600:	beq	2360c <__assert_fail@plt+0x11c50>
   23604:	add	r0, sl, #136	; 0x88
   23608:	bl	11500 <pthread_mutex_unlock@plt>
   2360c:	adds	r0, r5, #0
   23610:	movne	r0, #1
   23614:	add	sp, sp, #36	; 0x24
   23618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   23624:	mov	ip, #1
   23628:	push	{r0, r1, r2, r3, r4, lr}
   2362c:	str	r2, [sp, #4]
   23630:	str	ip, [sp, #12]
   23634:	ldr	ip, [sp, #24]
   23638:	str	ip, [sp, #8]
   2363c:	mov	ip, #0
   23640:	str	ip, [sp]
   23644:	bl	22f70 <__assert_fail@plt+0x115b4>
   23648:	add	sp, sp, #20
   2364c:	pop	{pc}		; (ldr pc, [sp], #4)
   23650:	mov	ip, #0
   23654:	push	{r0, r1, r2, r3, r4, lr}
   23658:	str	r2, [sp, #4]
   2365c:	str	ip, [sp, #12]
   23660:	ldr	ip, [sp, #28]
   23664:	str	ip, [sp, #8]
   23668:	ldr	ip, [sp, #24]
   2366c:	str	ip, [sp]
   23670:	bl	22f70 <__assert_fail@plt+0x115b4>
   23674:	add	sp, sp, #20
   23678:	pop	{pc}		; (ldr pc, [sp], #4)
   2367c:	mov	ip, #1
   23680:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23684:	str	ip, [sp, #20]
   23688:	ldr	ip, [sp, #44]	; 0x2c
   2368c:	str	ip, [sp, #16]
   23690:	ldr	ip, [sp, #40]	; 0x28
   23694:	str	ip, [sp, #12]
   23698:	mov	ip, #0
   2369c:	str	ip, [sp, #8]
   236a0:	ldr	ip, [sp, #36]	; 0x24
   236a4:	str	ip, [sp, #4]
   236a8:	ldr	ip, [sp, #32]
   236ac:	str	ip, [sp]
   236b0:	bl	23290 <__assert_fail@plt+0x118d4>
   236b4:	add	sp, sp, #28
   236b8:	pop	{pc}		; (ldr pc, [sp], #4)
   236bc:	mov	ip, #0
   236c0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   236c4:	str	ip, [sp, #20]
   236c8:	ldr	ip, [sp, #48]	; 0x30
   236cc:	str	ip, [sp, #16]
   236d0:	ldr	ip, [sp, #44]	; 0x2c
   236d4:	str	ip, [sp, #12]
   236d8:	ldr	ip, [sp, #40]	; 0x28
   236dc:	str	ip, [sp, #8]
   236e0:	ldr	ip, [sp, #36]	; 0x24
   236e4:	str	ip, [sp, #4]
   236e8:	ldr	ip, [sp, #32]
   236ec:	str	ip, [sp]
   236f0:	bl	23290 <__assert_fail@plt+0x118d4>
   236f4:	add	sp, sp, #28
   236f8:	pop	{pc}		; (ldr pc, [sp], #4)
   236fc:	cmp	r2, #0
   23700:	ldrb	ip, [r0, #28]
   23704:	beq	23728 <__assert_fail@plt+0x11d6c>
   23708:	push	{lr}		; (str lr, [sp, #-4]!)
   2370c:	mov	lr, #1
   23710:	bfi	ip, lr, #1, #2
   23714:	strb	ip, [r0, #28]
   23718:	strd	r2, [r1]
   2371c:	ldr	r3, [sp, #4]
   23720:	str	r3, [r1, #8]
   23724:	pop	{pc}		; (ldr pc, [sp], #4)
   23728:	bfi	ip, r2, #1, #2
   2372c:	strb	ip, [r0, #28]
   23730:	str	r2, [r1]
   23734:	str	r2, [r1, #4]
   23738:	str	r2, [r1, #8]
   2373c:	bx	lr
   23740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23744:	mov	r6, #1
   23748:	sub	sp, sp, #20
   2374c:	mov	sl, r0
   23750:	mov	fp, r1
   23754:	mov	r4, r6
   23758:	mov	r8, #0
   2375c:	mvn	r5, #0
   23760:	str	r2, [sp, #4]
   23764:	add	r7, r4, r8
   23768:	cmp	r7, fp
   2376c:	bcc	237b4 <__assert_fail@plt+0x11df8>
   23770:	ldr	r3, [sp, #4]
   23774:	mov	r8, #1
   23778:	mov	r9, #0
   2377c:	mov	r4, r8
   23780:	str	r6, [r3]
   23784:	mvn	r6, #0
   23788:	add	r7, r4, r9
   2378c:	cmp	fp, r7
   23790:	bhi	2385c <__assert_fail@plt+0x11ea0>
   23794:	add	r0, r5, #1
   23798:	add	r6, r6, #1
   2379c:	cmp	r6, r0
   237a0:	ldrcs	r3, [sp, #4]
   237a4:	movcs	r0, r6
   237a8:	strcs	r8, [r3]
   237ac:	add	sp, sp, #20
   237b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237b4:	bl	1177c <__ctype_b_loc@plt>
   237b8:	ldrb	r9, [sl, r7]
   237bc:	ldr	r2, [r0]
   237c0:	sxth	r3, r9
   237c4:	lsl	r1, r3, #1
   237c8:	str	r3, [sp, #12]
   237cc:	ldrh	r1, [r2, r1]
   237d0:	tst	r1, #256	; 0x100
   237d4:	beq	237ec <__assert_fail@plt+0x11e30>
   237d8:	str	r2, [sp, #8]
   237dc:	bl	11758 <__ctype_tolower_loc@plt>
   237e0:	ldr	r1, [r0]
   237e4:	ldrd	r2, [sp, #8]
   237e8:	ldrb	r9, [r1, r3, lsl #2]
   237ec:	add	r3, sl, r5
   237f0:	ldrb	r1, [r3, r4]
   237f4:	sxth	r3, r1
   237f8:	lsl	r0, r3, #1
   237fc:	str	r3, [sp, #8]
   23800:	ldrh	r2, [r2, r0]
   23804:	tst	r2, #256	; 0x100
   23808:	beq	2381c <__assert_fail@plt+0x11e60>
   2380c:	bl	11758 <__ctype_tolower_loc@plt>
   23810:	ldr	r2, [r0]
   23814:	ldr	r3, [sp, #8]
   23818:	ldrb	r1, [r2, r3, lsl #2]
   2381c:	cmp	r9, r1
   23820:	subcc	r6, r7, r5
   23824:	bcc	2383c <__assert_fail@plt+0x11e80>
   23828:	bne	23848 <__assert_fail@plt+0x11e8c>
   2382c:	cmp	r4, r6
   23830:	addne	r4, r4, #1
   23834:	movne	r7, r8
   23838:	bne	23840 <__assert_fail@plt+0x11e84>
   2383c:	mov	r4, #1
   23840:	mov	r8, r7
   23844:	b	23764 <__assert_fail@plt+0x11da8>
   23848:	mov	r6, #1
   2384c:	add	r7, r8, #1
   23850:	mov	r5, r8
   23854:	mov	r4, r6
   23858:	b	23840 <__assert_fail@plt+0x11e84>
   2385c:	bl	1177c <__ctype_b_loc@plt>
   23860:	ldrb	r3, [sl, r7]
   23864:	ldr	r1, [r0]
   23868:	sxth	r2, r3
   2386c:	lsl	r0, r2, #1
   23870:	str	r2, [sp, #12]
   23874:	ldrh	r0, [r1, r0]
   23878:	tst	r0, #256	; 0x100
   2387c:	beq	23898 <__assert_fail@plt+0x11edc>
   23880:	str	r1, [sp, #8]
   23884:	bl	11758 <__ctype_tolower_loc@plt>
   23888:	ldr	r3, [r0]
   2388c:	ldr	r1, [sp, #8]
   23890:	ldr	r2, [sp, #12]
   23894:	ldrb	r3, [r3, r2, lsl #2]
   23898:	add	r2, sl, r6
   2389c:	ldrb	r0, [r2, r4]
   238a0:	sxth	r2, r0
   238a4:	lsl	ip, r2, #1
   238a8:	str	r2, [sp, #12]
   238ac:	ldrh	r1, [r1, ip]
   238b0:	tst	r1, #256	; 0x100
   238b4:	beq	238d0 <__assert_fail@plt+0x11f14>
   238b8:	str	r3, [sp, #8]
   238bc:	bl	11758 <__ctype_tolower_loc@plt>
   238c0:	ldr	r1, [r0]
   238c4:	ldr	r3, [sp, #8]
   238c8:	ldr	r2, [sp, #12]
   238cc:	ldrb	r0, [r1, r2, lsl #2]
   238d0:	cmp	r3, r0
   238d4:	subhi	r8, r7, r6
   238d8:	bhi	238f4 <__assert_fail@plt+0x11f38>
   238dc:	bne	23900 <__assert_fail@plt+0x11f44>
   238e0:	cmp	r4, r8
   238e4:	addne	r4, r4, #1
   238e8:	movne	r7, r9
   238ec:	bne	238f8 <__assert_fail@plt+0x11f3c>
   238f0:	add	r7, r4, r9
   238f4:	mov	r4, #1
   238f8:	mov	r9, r7
   238fc:	b	23788 <__assert_fail@plt+0x11dcc>
   23900:	mov	r8, #1
   23904:	add	r7, r9, #1
   23908:	mov	r6, r9
   2390c:	mov	r4, r8
   23910:	b	238f8 <__assert_fail@plt+0x11f3c>
   23914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23918:	cmp	r3, #2
   2391c:	sub	sp, sp, #1072	; 0x430
   23920:	sub	sp, sp, #4
   23924:	mov	r8, r3
   23928:	movls	r3, #1
   2392c:	mov	r7, r0
   23930:	mov	sl, r1
   23934:	subls	r5, r8, #1
   23938:	str	r2, [sp, #4]
   2393c:	strls	r3, [sp, #44]	; 0x2c
   23940:	bls	23958 <__assert_fail@plt+0x11f9c>
   23944:	add	r2, sp, #44	; 0x2c
   23948:	mov	r1, r8
   2394c:	ldr	r0, [sp, #4]
   23950:	bl	23740 <__assert_fail@plt+0x11d84>
   23954:	mov	r5, r0
   23958:	add	r3, sp, #48	; 0x30
   2395c:	mov	r2, #0
   23960:	add	r2, r2, #1
   23964:	str	r8, [r3], #4
   23968:	cmp	r2, #256	; 0x100
   2396c:	bne	23960 <__assert_fail@plt+0x11fa4>
   23970:	ldr	r4, [sp, #4]
   23974:	sub	r3, r8, #1
   23978:	mov	r6, r3
   2397c:	str	r3, [sp, #16]
   23980:	cmn	r6, #1
   23984:	bne	23a58 <__assert_fail@plt+0x1209c>
   23988:	ldr	r3, [sp, #44]	; 0x2c
   2398c:	mov	r2, r5
   23990:	str	r3, [sp, #8]
   23994:	ldr	r3, [sp, #4]
   23998:	ldr	r1, [sp, #8]
   2399c:	mov	r0, r3
   239a0:	add	r1, r3, r1
   239a4:	bl	117f4 <strncasecmp@plt>
   239a8:	subs	r6, r0, #0
   239ac:	beq	23c98 <__assert_fail@plt+0x122dc>
   239b0:	sub	r9, r8, r5
   239b4:	rsb	r3, r5, #1
   239b8:	cmp	r9, r5
   239bc:	mov	r6, #0
   239c0:	movcc	r9, r5
   239c4:	str	r3, [sp, #12]
   239c8:	add	r9, r9, #1
   239cc:	str	r9, [sp, #44]	; 0x2c
   239d0:	add	fp, r8, r6
   239d4:	mov	r1, #0
   239d8:	sub	r2, fp, sl
   239dc:	add	r0, r7, sl
   239e0:	bl	1186c <memchr@plt>
   239e4:	adds	r3, fp, #0
   239e8:	movne	r3, #1
   239ec:	cmp	r0, #0
   239f0:	moveq	r0, r3
   239f4:	movne	r0, #0
   239f8:	cmp	r0, #0
   239fc:	beq	23b38 <__assert_fail@plt+0x1217c>
   23a00:	bl	1177c <__ctype_b_loc@plt>
   23a04:	add	r3, r7, fp
   23a08:	ldr	sl, [r0]
   23a0c:	ldrb	r3, [r3, #-1]
   23a10:	sxth	r4, r3
   23a14:	lsl	r2, r4, #1
   23a18:	ldrh	r2, [sl, r2]
   23a1c:	tst	r2, #256	; 0x100
   23a20:	beq	23a30 <__assert_fail@plt+0x12074>
   23a24:	bl	11758 <__ctype_tolower_loc@plt>
   23a28:	ldr	r3, [r0]
   23a2c:	ldr	r3, [r3, r4, lsl #2]
   23a30:	add	r2, sp, #1072	; 0x430
   23a34:	add	r3, r2, r3, lsl #2
   23a38:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   23a3c:	cmp	r3, #0
   23a40:	addne	r6, r6, r3
   23a44:	bne	23dcc <__assert_fail@plt+0x12410>
   23a48:	add	r3, r7, r6
   23a4c:	mov	r4, r5
   23a50:	str	r3, [sp, #8]
   23a54:	b	23cb8 <__assert_fail@plt+0x122fc>
   23a58:	bl	1177c <__ctype_b_loc@plt>
   23a5c:	ldrb	r3, [r4], #1
   23a60:	ldr	r1, [r0]
   23a64:	sxth	r9, r3
   23a68:	lsl	r2, r9, #1
   23a6c:	ldrh	r2, [r1, r2]
   23a70:	tst	r2, #256	; 0x100
   23a74:	beq	23a84 <__assert_fail@plt+0x120c8>
   23a78:	bl	11758 <__ctype_tolower_loc@plt>
   23a7c:	ldr	r3, [r0]
   23a80:	ldr	r3, [r3, r9, lsl #2]
   23a84:	add	r2, sp, #1072	; 0x430
   23a88:	add	r3, r2, r3, lsl #2
   23a8c:	str	r6, [r3, #-1024]	; 0xfffffc00
   23a90:	sub	r6, r6, #1
   23a94:	b	23980 <__assert_fail@plt+0x11fc4>
   23a98:	bl	1177c <__ctype_b_loc@plt>
   23a9c:	ldr	r3, [sp, #12]
   23aa0:	ldr	r9, [r0]
   23aa4:	add	r3, r7, r3
   23aa8:	ldrb	r3, [r3, #-1]
   23aac:	sxth	sl, r3
   23ab0:	lsl	r2, sl, #1
   23ab4:	ldrh	r2, [r9, r2]
   23ab8:	tst	r2, #256	; 0x100
   23abc:	beq	23acc <__assert_fail@plt+0x12110>
   23ac0:	bl	11758 <__ctype_tolower_loc@plt>
   23ac4:	ldr	r3, [r0]
   23ac8:	ldr	r3, [r3, sl, lsl #2]
   23acc:	add	r2, sp, #1072	; 0x430
   23ad0:	add	r3, r2, r3, lsl #2
   23ad4:	ldr	sl, [r3, #-1024]	; 0xfffffc00
   23ad8:	cmp	sl, #0
   23adc:	beq	23b40 <__assert_fail@plt+0x12184>
   23ae0:	ldr	r3, [sp, #8]
   23ae4:	cmp	r6, #0
   23ae8:	cmpne	r3, sl
   23aec:	ldrhi	sl, [sp, #24]
   23af0:	add	r4, r4, sl
   23af4:	mov	sl, #0
   23af8:	mov	r6, sl
   23afc:	ldr	sl, [sp, #12]
   23b00:	add	r3, r8, r4
   23b04:	mov	r1, #0
   23b08:	sub	r2, r3, sl
   23b0c:	add	r0, r7, sl
   23b10:	str	r3, [sp, #12]
   23b14:	bl	1186c <memchr@plt>
   23b18:	add	r3, r8, r4
   23b1c:	adds	r3, r3, #0
   23b20:	movne	r3, #1
   23b24:	cmp	r0, #0
   23b28:	moveq	r0, r3
   23b2c:	movne	r0, #0
   23b30:	cmp	r0, #0
   23b34:	bne	23a98 <__assert_fail@plt+0x120dc>
   23b38:	mov	r0, #0
   23b3c:	b	23c7c <__assert_fail@plt+0x122c0>
   23b40:	cmp	r6, r5
   23b44:	add	r3, r7, r4
   23b48:	movcs	fp, r6
   23b4c:	movcc	fp, r5
   23b50:	str	r3, [sp, #20]
   23b54:	ldr	r3, [sp, #16]
   23b58:	cmp	fp, r3
   23b5c:	bcs	23dd4 <__assert_fail@plt+0x12418>
   23b60:	ldr	r3, [sp, #4]
   23b64:	ldrb	r3, [r3, fp]
   23b68:	sxth	r2, r3
   23b6c:	lsl	r1, r2, #1
   23b70:	str	r2, [sp, #32]
   23b74:	ldrh	r1, [r9, r1]
   23b78:	tst	r1, #256	; 0x100
   23b7c:	beq	23b90 <__assert_fail@plt+0x121d4>
   23b80:	bl	11758 <__ctype_tolower_loc@plt>
   23b84:	ldr	r3, [r0]
   23b88:	ldr	r2, [sp, #32]
   23b8c:	ldr	r3, [r3, r2, lsl #2]
   23b90:	ldr	r2, [sp, #20]
   23b94:	ldrb	r1, [r2, fp]
   23b98:	sxth	r2, r1
   23b9c:	lsl	r0, r2, #1
   23ba0:	str	r2, [sp, #36]	; 0x24
   23ba4:	ldrh	r0, [r9, r0]
   23ba8:	tst	r0, #256	; 0x100
   23bac:	moveq	r2, r1
   23bb0:	beq	23bcc <__assert_fail@plt+0x12210>
   23bb4:	str	r3, [sp, #32]
   23bb8:	bl	11758 <__ctype_tolower_loc@plt>
   23bbc:	ldr	r1, [r0]
   23bc0:	ldr	r3, [sp, #32]
   23bc4:	ldr	r2, [sp, #36]	; 0x24
   23bc8:	ldr	r2, [r1, r2, lsl #2]
   23bcc:	cmp	r3, r2
   23bd0:	beq	23be4 <__assert_fail@plt+0x12228>
   23bd4:	ldr	r3, [sp, #28]
   23bd8:	add	r4, r3, r4
   23bdc:	add	r4, r4, fp
   23be0:	b	23af8 <__assert_fail@plt+0x1213c>
   23be4:	add	fp, fp, #1
   23be8:	b	23b54 <__assert_fail@plt+0x12198>
   23bec:	ldr	r3, [sp, #20]
   23bf0:	ldrb	r2, [r3, #-1]!
   23bf4:	str	r3, [sp, #20]
   23bf8:	sxth	r3, r2
   23bfc:	lsl	r0, r3, #1
   23c00:	str	r3, [sp, #32]
   23c04:	ldrh	r0, [r9, r0]
   23c08:	tst	r0, #256	; 0x100
   23c0c:	beq	23c20 <__assert_fail@plt+0x12264>
   23c10:	bl	11758 <__ctype_tolower_loc@plt>
   23c14:	ldr	r2, [r0]
   23c18:	ldr	r3, [sp, #32]
   23c1c:	ldr	r2, [r2, r3, lsl #2]
   23c20:	ldrb	r0, [fp, #-1]!
   23c24:	sxth	r3, r0
   23c28:	lsl	ip, r3, #1
   23c2c:	str	r3, [sp, #36]	; 0x24
   23c30:	ldrh	ip, [r9, ip]
   23c34:	tst	ip, #256	; 0x100
   23c38:	moveq	r3, r0
   23c3c:	beq	23c54 <__assert_fail@plt+0x12298>
   23c40:	str	r2, [sp, #32]
   23c44:	bl	11758 <__ctype_tolower_loc@plt>
   23c48:	ldr	r0, [r0]
   23c4c:	ldrd	r2, [sp, #32]
   23c50:	ldr	r3, [r0, r3, lsl #2]
   23c54:	cmp	r2, r3
   23c58:	sub	r0, sl, #1
   23c5c:	bne	23c6c <__assert_fail@plt+0x122b0>
   23c60:	mov	sl, r0
   23c64:	cmp	r6, sl
   23c68:	bcc	23bec <__assert_fail@plt+0x12230>
   23c6c:	add	r6, r6, #1
   23c70:	cmp	r6, sl
   23c74:	bls	23c88 <__assert_fail@plt+0x122cc>
   23c78:	add	r0, r7, r4
   23c7c:	add	sp, sp, #1072	; 0x430
   23c80:	add	sp, sp, #4
   23c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c88:	ldr	r3, [sp, #8]
   23c8c:	ldr	sl, [sp, #24]
   23c90:	add	r4, r4, r3
   23c94:	b	23af8 <__assert_fail@plt+0x1213c>
   23c98:	ldr	r3, [sp, #8]
   23c9c:	mov	r4, r6
   23ca0:	sub	r3, r8, r3
   23ca4:	str	r3, [sp, #24]
   23ca8:	rsb	r3, r5, #1
   23cac:	str	r3, [sp, #28]
   23cb0:	b	23b00 <__assert_fail@plt+0x12144>
   23cb4:	add	r4, r4, #1
   23cb8:	ldr	r3, [sp, #16]
   23cbc:	cmp	r4, r3
   23cc0:	bcs	23df8 <__assert_fail@plt+0x1243c>
   23cc4:	ldr	r3, [sp, #4]
   23cc8:	ldrb	r1, [r3, r4]
   23ccc:	sxth	r2, r1
   23cd0:	lsl	r0, r2, #1
   23cd4:	str	r2, [sp, #20]
   23cd8:	ldrh	r0, [sl, r0]
   23cdc:	tst	r0, #256	; 0x100
   23ce0:	beq	23cf4 <__assert_fail@plt+0x12338>
   23ce4:	bl	11758 <__ctype_tolower_loc@plt>
   23ce8:	ldr	r1, [r0]
   23cec:	ldr	r2, [sp, #20]
   23cf0:	ldr	r1, [r1, r2, lsl #2]
   23cf4:	ldr	r3, [sp, #8]
   23cf8:	ldrb	r0, [r3, r4]
   23cfc:	sxth	r2, r0
   23d00:	lsl	ip, r2, #1
   23d04:	str	r2, [sp, #24]
   23d08:	ldrh	ip, [sl, ip]
   23d0c:	tst	ip, #256	; 0x100
   23d10:	moveq	r2, r0
   23d14:	beq	23d30 <__assert_fail@plt+0x12374>
   23d18:	str	r1, [sp, #20]
   23d1c:	bl	11758 <__ctype_tolower_loc@plt>
   23d20:	ldr	r0, [r0]
   23d24:	ldr	r1, [sp, #20]
   23d28:	ldr	r2, [sp, #24]
   23d2c:	ldr	r2, [r0, r2, lsl #2]
   23d30:	cmp	r1, r2
   23d34:	beq	23cb4 <__assert_fail@plt+0x122f8>
   23d38:	ldr	r3, [sp, #12]
   23d3c:	add	r6, r3, r6
   23d40:	add	r6, r4, r6
   23d44:	b	23dcc <__assert_fail@plt+0x12410>
   23d48:	sub	r4, r4, #1
   23d4c:	cmn	r4, #1
   23d50:	beq	23df0 <__assert_fail@plt+0x12434>
   23d54:	ldr	r3, [sp, #4]
   23d58:	ldrb	r1, [r3, r4]
   23d5c:	sxth	r2, r1
   23d60:	lsl	r0, r2, #1
   23d64:	str	r2, [sp, #20]
   23d68:	ldrh	r0, [sl, r0]
   23d6c:	tst	r0, #256	; 0x100
   23d70:	beq	23d84 <__assert_fail@plt+0x123c8>
   23d74:	bl	11758 <__ctype_tolower_loc@plt>
   23d78:	ldr	r1, [r0]
   23d7c:	ldr	r2, [sp, #20]
   23d80:	ldr	r1, [r1, r2, lsl #2]
   23d84:	ldr	r3, [sp, #8]
   23d88:	ldrb	r0, [r3, r4]
   23d8c:	sxth	r2, r0
   23d90:	lsl	ip, r2, #1
   23d94:	str	r2, [sp, #24]
   23d98:	ldrh	ip, [sl, ip]
   23d9c:	tst	ip, #256	; 0x100
   23da0:	moveq	r2, r0
   23da4:	beq	23dc0 <__assert_fail@plt+0x12404>
   23da8:	str	r1, [sp, #20]
   23dac:	bl	11758 <__ctype_tolower_loc@plt>
   23db0:	ldr	r0, [r0]
   23db4:	ldr	r1, [sp, #20]
   23db8:	ldr	r2, [sp, #24]
   23dbc:	ldr	r2, [r0, r2, lsl #2]
   23dc0:	cmp	r1, r2
   23dc4:	beq	23d48 <__assert_fail@plt+0x1238c>
   23dc8:	add	r6, r6, r9
   23dcc:	mov	sl, fp
   23dd0:	b	239d0 <__assert_fail@plt+0x12014>
   23dd4:	ldr	r3, [sp, #4]
   23dd8:	add	fp, r4, r5
   23ddc:	mov	sl, r5
   23de0:	add	fp, r7, fp
   23de4:	add	r3, r3, r5
   23de8:	str	r3, [sp, #20]
   23dec:	b	23c64 <__assert_fail@plt+0x122a8>
   23df0:	ldr	r0, [sp, #8]
   23df4:	b	23c7c <__assert_fail@plt+0x122c0>
   23df8:	add	r3, r7, r6
   23dfc:	sub	r4, r5, #1
   23e00:	str	r3, [sp, #8]
   23e04:	b	23d4c <__assert_fail@plt+0x12390>
   23e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e0c:	mov	r6, r0
   23e10:	sub	sp, sp, #44	; 0x2c
   23e14:	sub	sl, r0, #1
   23e18:	mov	r9, r1
   23e1c:	mov	r8, #1
   23e20:	str	r1, [sp]
   23e24:	ldrb	r5, [sl, #1]!
   23e28:	mov	r4, r9
   23e2c:	ldrb	r7, [r9], #1
   23e30:	cmp	r5, #0
   23e34:	beq	23f70 <__assert_fail@plt+0x125b4>
   23e38:	cmp	r7, #0
   23e3c:	bne	23f18 <__assert_fail@plt+0x1255c>
   23e40:	cmp	r8, #0
   23e44:	bne	24030 <__assert_fail@plt+0x12674>
   23e48:	ldr	r3, [sp]
   23e4c:	sub	r4, r4, r3
   23e50:	add	r3, r6, #1
   23e54:	cmp	r4, #31
   23e58:	sub	r9, r4, #1
   23e5c:	str	r3, [sp, #4]
   23e60:	bhi	24278 <__assert_fail@plt+0x128bc>
   23e64:	cmp	r4, #2
   23e68:	movls	r3, #1
   23e6c:	movls	r5, r9
   23e70:	strls	r3, [sp, #36]	; 0x24
   23e74:	bls	23e8c <__assert_fail@plt+0x124d0>
   23e78:	add	r2, sp, #36	; 0x24
   23e7c:	mov	r1, r4
   23e80:	ldr	r0, [sp]
   23e84:	bl	23740 <__assert_fail@plt+0x11d84>
   23e88:	mov	r5, r0
   23e8c:	ldr	r3, [sp, #36]	; 0x24
   23e90:	mov	r2, r5
   23e94:	str	r3, [sp, #8]
   23e98:	ldr	r3, [sp]
   23e9c:	ldr	r1, [sp, #8]
   23ea0:	mov	r0, r3
   23ea4:	add	r1, r3, r1
   23ea8:	bl	117f4 <strncasecmp@plt>
   23eac:	subs	r7, r0, #0
   23eb0:	beq	24130 <__assert_fail@plt+0x12774>
   23eb4:	sub	r8, r4, r5
   23eb8:	mov	r7, #0
   23ebc:	cmp	r8, r5
   23ec0:	movcc	r8, r5
   23ec4:	add	r3, r8, #1
   23ec8:	str	r3, [sp, #8]
   23ecc:	str	r3, [sp, #36]	; 0x24
   23ed0:	rsb	r3, r5, #1
   23ed4:	str	r3, [sp, #12]
   23ed8:	ldr	r3, [sp, #4]
   23edc:	add	sl, r4, r7
   23ee0:	mov	r1, #0
   23ee4:	sub	r2, sl, r9
   23ee8:	add	r0, r3, r9
   23eec:	bl	1186c <memchr@plt>
   23ef0:	clz	r0, r0
   23ef4:	cmp	sl, #0
   23ef8:	lsr	r0, r0, #5
   23efc:	moveq	r0, #0
   23f00:	cmp	r0, #0
   23f04:	beq	23f78 <__assert_fail@plt+0x125bc>
   23f08:	add	fp, r7, #1
   23f0c:	mov	r9, r5
   23f10:	add	fp, r6, fp
   23f14:	b	24150 <__assert_fail@plt+0x12794>
   23f18:	bl	1177c <__ctype_b_loc@plt>
   23f1c:	ldr	fp, [r0]
   23f20:	sxth	r4, r5
   23f24:	lsl	r3, r4, #1
   23f28:	ldrh	r3, [fp, r3]
   23f2c:	tst	r3, #256	; 0x100
   23f30:	beq	23f40 <__assert_fail@plt+0x12584>
   23f34:	bl	11758 <__ctype_tolower_loc@plt>
   23f38:	ldr	r3, [r0]
   23f3c:	ldr	r5, [r3, r4, lsl #2]
   23f40:	sxth	r4, r7
   23f44:	lsl	r3, r4, #1
   23f48:	ldrh	r3, [fp, r3]
   23f4c:	tst	r3, #256	; 0x100
   23f50:	beq	23f60 <__assert_fail@plt+0x125a4>
   23f54:	bl	11758 <__ctype_tolower_loc@plt>
   23f58:	ldr	r3, [r0]
   23f5c:	ldr	r7, [r3, r4, lsl #2]
   23f60:	cmp	r5, r7
   23f64:	movne	r8, #0
   23f68:	andeq	r8, r8, #1
   23f6c:	b	23e24 <__assert_fail@plt+0x12468>
   23f70:	cmp	r7, #0
   23f74:	beq	23e40 <__assert_fail@plt+0x12484>
   23f78:	mov	r6, #0
   23f7c:	b	24030 <__assert_fail@plt+0x12674>
   23f80:	add	r9, r9, #1
   23f84:	b	240a8 <__assert_fail@plt+0x126ec>
   23f88:	ldr	r3, [sp]
   23f8c:	mov	r9, r5
   23f90:	add	sl, r3, r5
   23f94:	add	r3, r6, r8
   23f98:	str	r3, [sp, #16]
   23f9c:	cmp	r7, r9
   23fa0:	bcs	2401c <__assert_fail@plt+0x12660>
   23fa4:	bl	1177c <__ctype_b_loc@plt>
   23fa8:	ldrb	r3, [sl, #-1]!
   23fac:	ldr	r2, [r0]
   23fb0:	sxth	fp, r3
   23fb4:	lsl	r1, fp, #1
   23fb8:	ldrh	r1, [r2, r1]
   23fbc:	tst	r1, #256	; 0x100
   23fc0:	moveq	fp, r3
   23fc4:	beq	23fdc <__assert_fail@plt+0x12620>
   23fc8:	str	r2, [sp, #28]
   23fcc:	bl	11758 <__ctype_tolower_loc@plt>
   23fd0:	ldr	r3, [r0]
   23fd4:	ldr	r2, [sp, #28]
   23fd8:	ldr	fp, [r3, fp, lsl #2]
   23fdc:	ldr	r3, [sp, #16]
   23fe0:	ldrb	r1, [r3, r9]
   23fe4:	sxth	r3, r1
   23fe8:	lsl	r0, r3, #1
   23fec:	str	r3, [sp, #28]
   23ff0:	ldrh	r2, [r2, r0]
   23ff4:	tst	r2, #256	; 0x100
   23ff8:	moveq	r3, r1
   23ffc:	beq	24010 <__assert_fail@plt+0x12654>
   24000:	bl	11758 <__ctype_tolower_loc@plt>
   24004:	ldr	r2, [r0]
   24008:	ldr	r3, [sp, #28]
   2400c:	ldr	r3, [r2, r3, lsl #2]
   24010:	cmp	fp, r3
   24014:	sub	r2, r9, #1
   24018:	beq	2403c <__assert_fail@plt+0x12680>
   2401c:	add	r7, r7, #1
   24020:	cmp	r7, r9
   24024:	bls	24044 <__assert_fail@plt+0x12688>
   24028:	ldr	r3, [sp, #4]
   2402c:	add	r6, r3, r8
   24030:	mov	r0, r6
   24034:	add	sp, sp, #44	; 0x2c
   24038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2403c:	mov	r9, r2
   24040:	b	23f9c <__assert_fail@plt+0x125e0>
   24044:	ldr	r3, [sp, #8]
   24048:	ldr	r7, [sp, #20]
   2404c:	add	r8, r8, r3
   24050:	ldr	r9, [sp, #12]
   24054:	add	r3, r4, r8
   24058:	mov	r1, #0
   2405c:	sub	r2, r3, r9
   24060:	str	r3, [sp, #12]
   24064:	ldr	r3, [sp, #4]
   24068:	add	r0, r3, r9
   2406c:	bl	1186c <memchr@plt>
   24070:	add	r3, r4, r8
   24074:	adds	r3, r3, #0
   24078:	movne	r3, #1
   2407c:	cmp	r0, #0
   24080:	moveq	r0, r3
   24084:	movne	r0, #0
   24088:	cmp	r0, #0
   2408c:	beq	23f78 <__assert_fail@plt+0x125bc>
   24090:	cmp	r7, r5
   24094:	add	r3, r8, #1
   24098:	add	r3, r6, r3
   2409c:	movcs	r9, r7
   240a0:	movcc	r9, r5
   240a4:	str	r3, [sp, #16]
   240a8:	cmp	r4, r9
   240ac:	bls	23f88 <__assert_fail@plt+0x125cc>
   240b0:	bl	1177c <__ctype_b_loc@plt>
   240b4:	ldr	r2, [sp]
   240b8:	ldr	r3, [r0]
   240bc:	ldrb	sl, [r2, r9]
   240c0:	sxth	fp, sl
   240c4:	lsl	r2, fp, #1
   240c8:	ldrh	r2, [r3, r2]
   240cc:	tst	r2, #256	; 0x100
   240d0:	beq	240e8 <__assert_fail@plt+0x1272c>
   240d4:	str	r3, [sp, #28]
   240d8:	bl	11758 <__ctype_tolower_loc@plt>
   240dc:	ldr	r2, [r0]
   240e0:	ldr	r3, [sp, #28]
   240e4:	ldr	sl, [r2, fp, lsl #2]
   240e8:	ldr	r2, [sp, #16]
   240ec:	ldrb	r2, [r2, r9]
   240f0:	sxth	fp, r2
   240f4:	lsl	r1, fp, #1
   240f8:	ldrh	r3, [r3, r1]
   240fc:	tst	r3, #256	; 0x100
   24100:	moveq	r3, r2
   24104:	beq	24114 <__assert_fail@plt+0x12758>
   24108:	bl	11758 <__ctype_tolower_loc@plt>
   2410c:	ldr	r3, [r0]
   24110:	ldr	r3, [r3, fp, lsl #2]
   24114:	cmp	sl, r3
   24118:	beq	23f80 <__assert_fail@plt+0x125c4>
   2411c:	ldr	r3, [sp, #24]
   24120:	mov	r7, #0
   24124:	add	r8, r3, r8
   24128:	add	r8, r9, r8
   2412c:	b	24050 <__assert_fail@plt+0x12694>
   24130:	ldr	r3, [sp, #8]
   24134:	mov	r8, r7
   24138:	sub	r3, r4, r3
   2413c:	str	r3, [sp, #20]
   24140:	rsb	r3, r5, #1
   24144:	str	r3, [sp, #24]
   24148:	b	24054 <__assert_fail@plt+0x12698>
   2414c:	add	r9, r9, #1
   24150:	cmp	r4, r9
   24154:	bls	241e0 <__assert_fail@plt+0x12824>
   24158:	bl	1177c <__ctype_b_loc@plt>
   2415c:	ldr	r3, [sp]
   24160:	ldr	r1, [r0]
   24164:	ldrb	r3, [r3, r9]
   24168:	sxth	r8, r3
   2416c:	lsl	r0, r8, #1
   24170:	ldrh	r0, [r1, r0]
   24174:	tst	r0, #256	; 0x100
   24178:	moveq	r8, r3
   2417c:	beq	24194 <__assert_fail@plt+0x127d8>
   24180:	str	r1, [sp, #16]
   24184:	bl	11758 <__ctype_tolower_loc@plt>
   24188:	ldr	r3, [r0]
   2418c:	ldr	r1, [sp, #16]
   24190:	ldr	r8, [r3, r8, lsl #2]
   24194:	ldrb	r0, [fp, r9]
   24198:	sxth	r2, r0
   2419c:	lsl	ip, r2, #1
   241a0:	str	r2, [sp, #16]
   241a4:	ldrh	r1, [r1, ip]
   241a8:	tst	r1, #256	; 0x100
   241ac:	moveq	r2, r0
   241b0:	beq	241c4 <__assert_fail@plt+0x12808>
   241b4:	bl	11758 <__ctype_tolower_loc@plt>
   241b8:	ldr	r1, [r0]
   241bc:	ldr	r2, [sp, #16]
   241c0:	ldr	r2, [r1, r2, lsl #2]
   241c4:	cmp	r8, r2
   241c8:	beq	2414c <__assert_fail@plt+0x12790>
   241cc:	ldr	r3, [sp, #12]
   241d0:	add	r7, r3, r7
   241d4:	add	r7, r7, r9
   241d8:	mov	r9, sl
   241dc:	b	23ed8 <__assert_fail@plt+0x1251c>
   241e0:	add	fp, r7, #1
   241e4:	sub	r8, r5, #1
   241e8:	add	fp, r6, fp
   241ec:	cmn	r8, #1
   241f0:	beq	24294 <__assert_fail@plt+0x128d8>
   241f4:	bl	1177c <__ctype_b_loc@plt>
   241f8:	ldr	r3, [sp]
   241fc:	ldr	r1, [r0]
   24200:	ldrb	r2, [r3, r8]
   24204:	sxth	r9, r2
   24208:	lsl	r0, r9, #1
   2420c:	ldrh	r0, [r1, r0]
   24210:	tst	r0, #256	; 0x100
   24214:	moveq	r9, r2
   24218:	beq	24230 <__assert_fail@plt+0x12874>
   2421c:	str	r1, [sp, #16]
   24220:	bl	11758 <__ctype_tolower_loc@plt>
   24224:	ldr	r2, [r0]
   24228:	ldr	r1, [sp, #16]
   2422c:	ldr	r9, [r2, r9, lsl #2]
   24230:	ldrb	r0, [fp, r8]
   24234:	sxth	r2, r0
   24238:	lsl	ip, r2, #1
   2423c:	str	r2, [sp, #16]
   24240:	ldrh	r1, [r1, ip]
   24244:	tst	r1, #256	; 0x100
   24248:	moveq	r2, r0
   2424c:	beq	24260 <__assert_fail@plt+0x128a4>
   24250:	bl	11758 <__ctype_tolower_loc@plt>
   24254:	ldr	r1, [r0]
   24258:	ldr	r2, [sp, #16]
   2425c:	ldr	r2, [r1, r2, lsl #2]
   24260:	cmp	r9, r2
   24264:	ldrne	r3, [sp, #8]
   24268:	addne	r7, r7, r3
   2426c:	bne	241d8 <__assert_fail@plt+0x1281c>
   24270:	sub	r8, r8, #1
   24274:	b	241ec <__assert_fail@plt+0x12830>
   24278:	mov	r3, r4
   2427c:	mov	r1, r9
   24280:	ldr	r2, [sp]
   24284:	ldr	r0, [sp, #4]
   24288:	bl	23914 <__assert_fail@plt+0x11f58>
   2428c:	mov	r6, r0
   24290:	b	24030 <__assert_fail@plt+0x12674>
   24294:	ldr	r3, [sp, #4]
   24298:	add	r6, r3, r7
   2429c:	b	24030 <__assert_fail@plt+0x12674>
   242a0:	push	{r4, r5, r6, r7, r8, lr}
   242a4:	mov	lr, #1
   242a8:	mov	r5, #0
   242ac:	mov	ip, lr
   242b0:	mvn	r3, #0
   242b4:	add	r4, ip, r5
   242b8:	cmp	r4, r1
   242bc:	bcc	242f8 <__assert_fail@plt+0x1293c>
   242c0:	mov	r4, #1
   242c4:	mov	r6, #0
   242c8:	str	lr, [r2]
   242cc:	mov	ip, r4
   242d0:	mvn	lr, #0
   242d4:	add	r5, ip, r6
   242d8:	cmp	r1, r5
   242dc:	bhi	24344 <__assert_fail@plt+0x12988>
   242e0:	add	r0, r3, #1
   242e4:	add	lr, lr, #1
   242e8:	cmp	lr, r0
   242ec:	movcs	r0, lr
   242f0:	strcs	r4, [r2]
   242f4:	pop	{r4, r5, r6, r7, r8, pc}
   242f8:	add	r6, r0, r3
   242fc:	ldrb	r7, [r0, r4]
   24300:	ldrb	r6, [r6, ip]
   24304:	cmp	r7, r6
   24308:	subcc	lr, r4, r3
   2430c:	bcc	24324 <__assert_fail@plt+0x12968>
   24310:	bne	24330 <__assert_fail@plt+0x12974>
   24314:	cmp	ip, lr
   24318:	addne	ip, ip, #1
   2431c:	movne	r4, r5
   24320:	bne	24328 <__assert_fail@plt+0x1296c>
   24324:	mov	ip, #1
   24328:	mov	r5, r4
   2432c:	b	242b4 <__assert_fail@plt+0x128f8>
   24330:	mov	lr, #1
   24334:	add	r4, r5, #1
   24338:	mov	r3, r5
   2433c:	mov	ip, lr
   24340:	b	24328 <__assert_fail@plt+0x1296c>
   24344:	add	r7, r0, lr
   24348:	ldrb	r8, [r0, r5]
   2434c:	ldrb	r7, [r7, ip]
   24350:	cmp	r8, r7
   24354:	subhi	r4, r5, lr
   24358:	bhi	24370 <__assert_fail@plt+0x129b4>
   2435c:	bne	2437c <__assert_fail@plt+0x129c0>
   24360:	cmp	ip, r4
   24364:	addne	ip, ip, #1
   24368:	movne	r5, r6
   2436c:	bne	24374 <__assert_fail@plt+0x129b8>
   24370:	mov	ip, #1
   24374:	mov	r6, r5
   24378:	b	242d4 <__assert_fail@plt+0x12918>
   2437c:	mov	r4, #1
   24380:	add	r5, r6, #1
   24384:	mov	lr, r6
   24388:	mov	ip, r4
   2438c:	b	24374 <__assert_fail@plt+0x129b8>
   24390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24394:	cmp	r3, #2
   24398:	sub	sp, sp, #1040	; 0x410
   2439c:	mov	sl, r3
   243a0:	sub	sp, sp, #12
   243a4:	movls	r3, #1
   243a8:	mov	r8, r0
   243ac:	mov	fp, r1
   243b0:	mov	r9, r2
   243b4:	subls	r4, sl, #1
   243b8:	strls	r3, [sp, #20]
   243bc:	bls	243d4 <__assert_fail@plt+0x12a18>
   243c0:	add	r2, sp, #20
   243c4:	mov	r1, sl
   243c8:	mov	r0, r9
   243cc:	bl	242a0 <__assert_fail@plt+0x128e4>
   243d0:	mov	r4, r0
   243d4:	add	r3, sp, #24
   243d8:	mov	r2, #0
   243dc:	add	r2, r2, #1
   243e0:	str	sl, [r3], #4
   243e4:	cmp	r2, #256	; 0x100
   243e8:	bne	243dc <__assert_fail@plt+0x12a20>
   243ec:	sub	r3, sl, #1
   243f0:	mov	r1, r9
   243f4:	str	r3, [sp]
   243f8:	cmn	r3, #1
   243fc:	bne	24494 <__assert_fail@plt+0x12ad8>
   24400:	ldr	r5, [sp, #20]
   24404:	mov	r2, r4
   24408:	mov	r0, r9
   2440c:	add	r1, r9, r5
   24410:	bl	1162c <memcmp@plt>
   24414:	subs	r7, r0, #0
   24418:	beq	245b4 <__assert_fail@plt+0x12bf8>
   2441c:	sub	r7, sl, r4
   24420:	mov	r5, #0
   24424:	cmp	r7, r4
   24428:	rsb	r3, r4, #1
   2442c:	movcc	r7, r4
   24430:	add	r7, r7, #1
   24434:	add	r6, r5, sl
   24438:	mov	r1, #0
   2443c:	str	r3, [sp, #4]
   24440:	sub	r2, r6, fp
   24444:	add	r0, r8, fp
   24448:	bl	1186c <memchr@plt>
   2444c:	adds	r2, r6, #0
   24450:	ldr	r3, [sp, #4]
   24454:	movne	r2, #1
   24458:	cmp	r0, #0
   2445c:	moveq	r0, r2
   24460:	movne	r0, #0
   24464:	cmp	r0, #0
   24468:	beq	2459c <__assert_fail@plt+0x12be0>
   2446c:	add	r2, r8, r6
   24470:	add	r1, sp, #1040	; 0x410
   24474:	ldrb	r2, [r2, #-1]
   24478:	add	r1, r1, #8
   2447c:	add	r2, r1, r2, lsl #2
   24480:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   24484:	cmp	r2, #0
   24488:	beq	245f4 <__assert_fail@plt+0x12c38>
   2448c:	add	r5, r2, r5
   24490:	b	24644 <__assert_fail@plt+0x12c88>
   24494:	ldrb	r2, [r1], #1
   24498:	add	r0, sp, #1040	; 0x410
   2449c:	add	r0, r0, #8
   244a0:	add	r2, r0, r2, lsl #2
   244a4:	str	r3, [r2, #-1024]	; 0xfffffc00
   244a8:	sub	r3, r3, #1
   244ac:	b	243f8 <__assert_fail@plt+0x12a3c>
   244b0:	add	r2, r8, r3
   244b4:	add	r1, sp, #1040	; 0x410
   244b8:	ldrb	r2, [r2, #-1]
   244bc:	add	r1, r1, #8
   244c0:	add	r2, r1, r2, lsl #2
   244c4:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   244c8:	cmp	r2, #0
   244cc:	beq	24528 <__assert_fail@plt+0x12b6c>
   244d0:	cmp	r7, #0
   244d4:	cmpne	r5, r2
   244d8:	ldrhi	r2, [sp, #4]
   244dc:	add	r6, r6, r2
   244e0:	mov	r2, #0
   244e4:	mov	r7, r2
   244e8:	mov	fp, r3
   244ec:	add	r3, r6, sl
   244f0:	mov	r1, #0
   244f4:	sub	r2, r3, fp
   244f8:	add	r0, r8, fp
   244fc:	str	r3, [sp, #12]
   24500:	bl	1186c <memchr@plt>
   24504:	ldr	r3, [sp, #12]
   24508:	adds	r2, r3, #0
   2450c:	movne	r2, #1
   24510:	cmp	r0, #0
   24514:	moveq	r0, r2
   24518:	movne	r0, #0
   2451c:	cmp	r0, #0
   24520:	bne	244b0 <__assert_fail@plt+0x12af4>
   24524:	b	2459c <__assert_fail@plt+0x12be0>
   24528:	cmp	r7, r4
   2452c:	add	lr, r8, r6
   24530:	movcs	r1, r7
   24534:	movcc	r1, r4
   24538:	ldr	r0, [sp]
   2453c:	cmp	r1, r0
   24540:	bcs	24600 <__assert_fail@plt+0x12c44>
   24544:	ldrb	ip, [r9, r1]
   24548:	ldrb	r0, [lr, r1]
   2454c:	cmp	ip, r0
   24550:	beq	24564 <__assert_fail@plt+0x12ba8>
   24554:	ldr	r0, [sp, #8]
   24558:	add	r6, r0, r6
   2455c:	add	r6, r6, r1
   24560:	b	244e4 <__assert_fail@plt+0x12b28>
   24564:	add	r1, r1, #1
   24568:	b	24538 <__assert_fail@plt+0x12b7c>
   2456c:	ldrb	ip, [r1, #-1]!
   24570:	sub	lr, r2, #1
   24574:	ldrb	r0, [fp, #-1]!
   24578:	cmp	ip, r0
   2457c:	bne	2458c <__assert_fail@plt+0x12bd0>
   24580:	mov	r2, lr
   24584:	cmp	r7, r2
   24588:	bcc	2456c <__assert_fail@plt+0x12bb0>
   2458c:	add	r7, r7, #1
   24590:	cmp	r7, r2
   24594:	bls	245a8 <__assert_fail@plt+0x12bec>
   24598:	add	r0, r8, r6
   2459c:	add	sp, sp, #1040	; 0x410
   245a0:	add	sp, sp, #12
   245a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245a8:	add	r6, r6, r5
   245ac:	ldr	r2, [sp, #4]
   245b0:	b	244e4 <__assert_fail@plt+0x12b28>
   245b4:	sub	r3, sl, r5
   245b8:	mov	r6, r7
   245bc:	str	r3, [sp, #4]
   245c0:	rsb	r3, r4, #1
   245c4:	str	r3, [sp, #8]
   245c8:	b	244ec <__assert_fail@plt+0x12b30>
   245cc:	add	r2, r2, #1
   245d0:	ldr	r1, [sp]
   245d4:	cmp	r2, r1
   245d8:	bcs	2461c <__assert_fail@plt+0x12c60>
   245dc:	ldrb	r0, [r9, r2]
   245e0:	ldrb	r1, [ip, r2]
   245e4:	cmp	r0, r1
   245e8:	beq	245cc <__assert_fail@plt+0x12c10>
   245ec:	add	r5, r3, r5
   245f0:	b	2448c <__assert_fail@plt+0x12ad0>
   245f4:	mov	r2, r4
   245f8:	add	ip, r8, r5
   245fc:	b	245d0 <__assert_fail@plt+0x12c14>
   24600:	add	fp, r6, r4
   24604:	add	r1, r9, r4
   24608:	add	fp, r8, fp
   2460c:	mov	r2, r4
   24610:	b	24584 <__assert_fail@plt+0x12bc8>
   24614:	add	r0, r8, r5
   24618:	b	2459c <__assert_fail@plt+0x12be0>
   2461c:	add	r2, r5, r4
   24620:	add	r1, r9, r4
   24624:	add	r2, r8, r2
   24628:	cmp	r9, r1
   2462c:	beq	24614 <__assert_fail@plt+0x12c58>
   24630:	ldrb	ip, [r1, #-1]!
   24634:	ldrb	r0, [r2, #-1]!
   24638:	cmp	ip, r0
   2463c:	beq	24628 <__assert_fail@plt+0x12c6c>
   24640:	add	r5, r5, r7
   24644:	mov	fp, r6
   24648:	b	24434 <__assert_fail@plt+0x12a78>
   2464c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24650:	mov	ip, r1
   24654:	sub	sp, sp, #28
   24658:	sub	lr, r0, #1
   2465c:	mov	r3, #1
   24660:	mov	r8, ip
   24664:	ldrb	r4, [lr, #1]!
   24668:	ldrb	r2, [ip], #1
   2466c:	cmp	r4, #0
   24670:	beq	24778 <__assert_fail@plt+0x12dbc>
   24674:	cmp	r2, #0
   24678:	bne	24768 <__assert_fail@plt+0x12dac>
   2467c:	cmp	r3, #0
   24680:	bne	24858 <__assert_fail@plt+0x12e9c>
   24684:	mov	r5, r0
   24688:	sub	r7, r8, r1
   2468c:	ldrb	r1, [r1]
   24690:	add	r0, r0, #1
   24694:	bl	117b8 <strchr@plt>
   24698:	subs	r4, r0, #0
   2469c:	beq	24780 <__assert_fail@plt+0x12dc4>
   246a0:	cmp	r7, #1
   246a4:	beq	24780 <__assert_fail@plt+0x12dc4>
   246a8:	add	r5, r5, r7
   246ac:	sub	r8, r8, r7
   246b0:	cmp	r5, r4
   246b4:	subcs	r5, r5, r4
   246b8:	movcc	r5, #1
   246bc:	cmp	r7, #31
   246c0:	bhi	248d0 <__assert_fail@plt+0x12f14>
   246c4:	cmp	r7, #2
   246c8:	movls	r3, #1
   246cc:	subls	r6, r7, #1
   246d0:	strls	r3, [sp, #20]
   246d4:	bls	246ec <__assert_fail@plt+0x12d30>
   246d8:	add	r2, sp, #20
   246dc:	mov	r1, r7
   246e0:	mov	r0, r8
   246e4:	bl	242a0 <__assert_fail@plt+0x128e4>
   246e8:	mov	r6, r0
   246ec:	ldr	r3, [sp, #20]
   246f0:	mov	r2, r6
   246f4:	mov	r0, r8
   246f8:	add	r1, r8, r3
   246fc:	str	r3, [sp, #4]
   24700:	bl	1162c <memcmp@plt>
   24704:	subs	r9, r0, #0
   24708:	ldr	r3, [sp, #4]
   2470c:	beq	24860 <__assert_fail@plt+0x12ea4>
   24710:	sub	sl, r7, r6
   24714:	mov	r9, #0
   24718:	cmp	sl, r6
   2471c:	rsb	r3, r6, #1
   24720:	movcc	sl, r6
   24724:	add	sl, sl, #1
   24728:	add	fp, r7, r9
   2472c:	mov	r1, #0
   24730:	str	r3, [sp, #4]
   24734:	sub	r2, fp, r5
   24738:	add	r0, r4, r5
   2473c:	bl	1186c <memchr@plt>
   24740:	clz	r0, r0
   24744:	cmp	fp, #0
   24748:	ldr	r3, [sp, #4]
   2474c:	lsr	r0, r0, #5
   24750:	moveq	r0, #0
   24754:	cmp	r0, #0
   24758:	beq	24858 <__assert_fail@plt+0x12e9c>
   2475c:	mov	r2, r6
   24760:	add	ip, r4, r9
   24764:	b	2487c <__assert_fail@plt+0x12ec0>
   24768:	cmp	r4, r2
   2476c:	movne	r3, #0
   24770:	andeq	r3, r3, #1
   24774:	b	24660 <__assert_fail@plt+0x12ca4>
   24778:	cmp	r2, #0
   2477c:	beq	2467c <__assert_fail@plt+0x12cc0>
   24780:	mov	r0, r4
   24784:	add	sp, sp, #28
   24788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2478c:	cmp	r9, r6
   24790:	add	ip, r4, sl
   24794:	movcs	r2, r9
   24798:	movcc	r2, r6
   2479c:	cmp	r7, r2
   247a0:	bls	247d0 <__assert_fail@plt+0x12e14>
   247a4:	ldrb	r0, [r8, r2]
   247a8:	ldrb	r1, [ip, r2]
   247ac:	cmp	r0, r1
   247b0:	beq	247c8 <__assert_fail@plt+0x12e0c>
   247b4:	ldr	r1, [sp, #8]
   247b8:	mov	r9, #0
   247bc:	add	sl, r1, sl
   247c0:	add	sl, r2, sl
   247c4:	b	24820 <__assert_fail@plt+0x12e64>
   247c8:	add	r2, r2, #1
   247cc:	b	2479c <__assert_fail@plt+0x12de0>
   247d0:	add	r1, sl, r6
   247d4:	add	r0, r8, r6
   247d8:	add	r1, r4, r1
   247dc:	mov	r2, r6
   247e0:	cmp	r9, r2
   247e4:	bcs	247fc <__assert_fail@plt+0x12e40>
   247e8:	ldrb	lr, [r0, #-1]!
   247ec:	sub	r5, r2, #1
   247f0:	ldrb	ip, [r1, #-1]!
   247f4:	cmp	lr, ip
   247f8:	beq	24810 <__assert_fail@plt+0x12e54>
   247fc:	add	r9, r9, #1
   24800:	cmp	r9, r2
   24804:	bls	24818 <__assert_fail@plt+0x12e5c>
   24808:	add	r4, r4, sl
   2480c:	b	24780 <__assert_fail@plt+0x12dc4>
   24810:	mov	r2, r5
   24814:	b	247e0 <__assert_fail@plt+0x12e24>
   24818:	ldr	r9, [sp, #4]
   2481c:	add	sl, sl, r3
   24820:	mov	r5, fp
   24824:	add	fp, r7, sl
   24828:	mov	r1, #0
   2482c:	str	r3, [sp, #12]
   24830:	sub	r2, fp, r5
   24834:	add	r0, r4, r5
   24838:	bl	1186c <memchr@plt>
   2483c:	clz	r0, r0
   24840:	cmp	fp, #0
   24844:	ldr	r3, [sp, #12]
   24848:	lsr	r0, r0, #5
   2484c:	moveq	r0, #0
   24850:	cmp	r0, #0
   24854:	bne	2478c <__assert_fail@plt+0x12dd0>
   24858:	mov	r4, r0
   2485c:	b	24780 <__assert_fail@plt+0x12dc4>
   24860:	sub	r2, r7, r3
   24864:	mov	sl, r9
   24868:	str	r2, [sp, #4]
   2486c:	rsb	r2, r6, #1
   24870:	str	r2, [sp, #8]
   24874:	b	24824 <__assert_fail@plt+0x12e68>
   24878:	add	r2, r2, #1
   2487c:	cmp	r7, r2
   24880:	bls	248a4 <__assert_fail@plt+0x12ee8>
   24884:	ldrb	r0, [r8, r2]
   24888:	ldrb	r1, [ip, r2]
   2488c:	cmp	r0, r1
   24890:	beq	24878 <__assert_fail@plt+0x12ebc>
   24894:	add	r9, r3, r9
   24898:	add	r9, r9, r2
   2489c:	mov	r5, fp
   248a0:	b	24728 <__assert_fail@plt+0x12d6c>
   248a4:	add	r2, r9, r6
   248a8:	add	r1, r8, r6
   248ac:	add	r2, r4, r2
   248b0:	cmp	r8, r1
   248b4:	beq	248e8 <__assert_fail@plt+0x12f2c>
   248b8:	ldrb	ip, [r1, #-1]!
   248bc:	ldrb	r0, [r2, #-1]!
   248c0:	cmp	ip, r0
   248c4:	beq	248b0 <__assert_fail@plt+0x12ef4>
   248c8:	add	r9, r9, sl
   248cc:	b	2489c <__assert_fail@plt+0x12ee0>
   248d0:	mov	r3, r7
   248d4:	mov	r2, r8
   248d8:	mov	r1, r5
   248dc:	mov	r0, r4
   248e0:	bl	24390 <__assert_fail@plt+0x129d4>
   248e4:	b	24858 <__assert_fail@plt+0x12e9c>
   248e8:	add	r4, r4, r9
   248ec:	b	24780 <__assert_fail@plt+0x12dc4>
   248f0:	ldr	r3, [pc, #8]	; 24900 <__assert_fail@plt+0x12f44>
   248f4:	push	{r4, lr}
   248f8:	ldr	r0, [r3]
   248fc:	bl	11788 <exit@plt>
   24900:	andeq	r7, r3, r0, asr #3
   24904:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24908:	mov	fp, r1
   2490c:	mov	r8, r2
   24910:	mov	r9, r3
   24914:	mov	r7, r2
   24918:	mov	r5, #0
   2491c:	mvn	r4, #0
   24920:	str	r0, [sp]
   24924:	mov	r6, r5
   24928:	bl	117ac <strlen@plt>
   2492c:	mov	sl, r0
   24930:	ldr	r3, [fp, r6, lsl #2]
   24934:	cmp	r3, #0
   24938:	bne	24948 <__assert_fail@plt+0x12f8c>
   2493c:	cmp	r5, #0
   24940:	mvnne	r4, #1
   24944:	b	2497c <__assert_fail@plt+0x12fc0>
   24948:	mov	r2, sl
   2494c:	mov	r0, r3
   24950:	ldr	r1, [sp]
   24954:	str	r3, [sp, #4]
   24958:	bl	11974 <strncmp@plt>
   2495c:	cmp	r0, #0
   24960:	bne	249b8 <__assert_fail@plt+0x12ffc>
   24964:	ldr	r3, [sp, #4]
   24968:	mov	r0, r3
   2496c:	bl	117ac <strlen@plt>
   24970:	cmp	r0, sl
   24974:	bne	24988 <__assert_fail@plt+0x12fcc>
   24978:	mov	r4, r6
   2497c:	mov	r0, r4
   24980:	add	sp, sp, #12
   24984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24988:	cmn	r4, #1
   2498c:	moveq	r4, r6
   24990:	beq	249b8 <__assert_fail@plt+0x12ffc>
   24994:	cmp	r8, #0
   24998:	moveq	r5, #1
   2499c:	beq	249b8 <__assert_fail@plt+0x12ffc>
   249a0:	mov	r2, r9
   249a4:	mov	r1, r7
   249a8:	mla	r0, r9, r4, r8
   249ac:	bl	1162c <memcmp@plt>
   249b0:	cmp	r0, #0
   249b4:	movne	r5, #1
   249b8:	add	r6, r6, #1
   249bc:	add	r7, r7, r9
   249c0:	b	24930 <__assert_fail@plt+0x12f74>
   249c4:	cmn	r2, #1
   249c8:	push	{r0, r1, r4, r5, r6, lr}
   249cc:	mov	r2, #5
   249d0:	mov	r5, r1
   249d4:	mov	r6, r0
   249d8:	mov	r0, #0
   249dc:	ldreq	r1, [pc, #72]	; 24a2c <__assert_fail@plt+0x13070>
   249e0:	ldrne	r1, [pc, #72]	; 24a30 <__assert_fail@plt+0x13074>
   249e4:	bl	11638 <dcgettext@plt>
   249e8:	mov	r4, r0
   249ec:	mov	r2, r5
   249f0:	mov	r1, #8
   249f4:	mov	r0, #0
   249f8:	bl	1762c <__assert_fail@plt+0x5c70>
   249fc:	mov	r5, r0
   24a00:	mov	r1, r6
   24a04:	mov	r0, #1
   24a08:	bl	17874 <__assert_fail@plt+0x5eb8>
   24a0c:	mov	r1, #0
   24a10:	mov	r3, r5
   24a14:	str	r0, [sp]
   24a18:	mov	r2, r4
   24a1c:	mov	r0, r1
   24a20:	bl	116e0 <error@plt>
   24a24:	add	sp, sp, #8
   24a28:	pop	{r4, r5, r6, pc}
   24a2c:	andeq	r6, r2, r1, asr sp
   24a30:	andeq	r6, r2, ip, ror #26
   24a34:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a38:	mov	r6, #0
   24a3c:	mov	sl, r0
   24a40:	mov	r4, r1
   24a44:	mov	r8, r2
   24a48:	mov	r0, #0
   24a4c:	mov	r2, #5
   24a50:	ldr	r7, [pc, #180]	; 24b0c <__assert_fail@plt+0x13150>
   24a54:	mov	r5, r6
   24a58:	ldr	fp, [pc, #176]	; 24b10 <__assert_fail@plt+0x13154>
   24a5c:	ldr	r1, [pc, #176]	; 24b14 <__assert_fail@plt+0x13158>
   24a60:	bl	11638 <dcgettext@plt>
   24a64:	ldr	r1, [r7]
   24a68:	bl	11968 <fputs@plt>
   24a6c:	str	r7, [sp]
   24a70:	ldr	r3, [sl, r5, lsl #2]
   24a74:	ldr	r2, [sp]
   24a78:	cmp	r3, #0
   24a7c:	ldr	r7, [r2]
   24a80:	bne	24a98 <__assert_fail@plt+0x130dc>
   24a84:	mov	r1, r7
   24a88:	mov	r0, #10
   24a8c:	add	sp, sp, #12
   24a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a94:	b	11914 <putc@plt>
   24a98:	cmp	r5, #0
   24a9c:	mov	r9, r4
   24aa0:	beq	24ac4 <__assert_fail@plt+0x13108>
   24aa4:	mov	r2, r8
   24aa8:	mov	r1, r4
   24aac:	str	r3, [sp, #4]
   24ab0:	mov	r0, r6
   24ab4:	bl	1162c <memcmp@plt>
   24ab8:	cmp	r0, #0
   24abc:	ldr	r3, [sp, #4]
   24ac0:	beq	24aec <__assert_fail@plt+0x13130>
   24ac4:	mov	r0, r3
   24ac8:	bl	1787c <__assert_fail@plt+0x5ec0>
   24acc:	mov	r2, r0
   24ad0:	ldr	r1, [pc, #64]	; 24b18 <__assert_fail@plt+0x1315c>
   24ad4:	mov	r0, r7
   24ad8:	bl	117c4 <fprintf@plt>
   24adc:	add	r5, r5, #1
   24ae0:	add	r4, r4, r8
   24ae4:	mov	r6, r9
   24ae8:	b	24a70 <__assert_fail@plt+0x130b4>
   24aec:	mov	r0, r3
   24af0:	mov	r9, r6
   24af4:	bl	1787c <__assert_fail@plt+0x5ec0>
   24af8:	mov	r2, r0
   24afc:	mov	r1, fp
   24b00:	mov	r0, r7
   24b04:	bl	117c4 <fprintf@plt>
   24b08:	b	24adc <__assert_fail@plt+0x13120>
   24b0c:	andeq	r7, r3, r8, lsl r2
   24b10:	andeq	r6, r2, r6, lsr #27
   24b14:	andeq	r6, r2, r9, lsl #27
   24b18:	muleq	r2, lr, sp
   24b1c:	push	{r4, r5, r6, r7, r8, lr}
   24b20:	mov	r6, r1
   24b24:	mov	r4, r2
   24b28:	mov	r7, r0
   24b2c:	mov	r2, r3
   24b30:	mov	r5, r3
   24b34:	mov	r1, r4
   24b38:	mov	r0, r6
   24b3c:	ldr	r3, [sp, #24]
   24b40:	bl	24904 <__assert_fail@plt+0x12f48>
   24b44:	cmp	r0, #0
   24b48:	popge	{r4, r5, r6, r7, r8, pc}
   24b4c:	mov	r2, r0
   24b50:	mov	r1, r6
   24b54:	mov	r0, r7
   24b58:	bl	249c4 <__assert_fail@plt+0x13008>
   24b5c:	mov	r0, r4
   24b60:	mov	r1, r5
   24b64:	ldr	r2, [sp, #24]
   24b68:	bl	24a34 <__assert_fail@plt+0x13078>
   24b6c:	ldr	r3, [sp, #28]
   24b70:	blx	r3
   24b74:	mvn	r0, #0
   24b78:	pop	{r4, r5, r6, r7, r8, pc}
   24b7c:	push	{r4, r5, r6, r7, r8, lr}
   24b80:	mov	r8, r0
   24b84:	mov	r7, r3
   24b88:	sub	r6, r1, #4
   24b8c:	mov	r4, r2
   24b90:	ldr	r5, [r6, #4]!
   24b94:	cmp	r5, #0
   24b98:	beq	24bb8 <__assert_fail@plt+0x131fc>
   24b9c:	mov	r1, r4
   24ba0:	mov	r2, r7
   24ba4:	mov	r0, r8
   24ba8:	add	r4, r4, r7
   24bac:	bl	1162c <memcmp@plt>
   24bb0:	cmp	r0, #0
   24bb4:	bne	24b90 <__assert_fail@plt+0x131d4>
   24bb8:	mov	r0, r5
   24bbc:	pop	{r4, r5, r6, r7, r8, pc}
   24bc0:	push	{r4, r5, r6, lr}
   24bc4:	mov	r4, r0
   24bc8:	bl	116c8 <__fpending@plt>
   24bcc:	mov	r5, r0
   24bd0:	mov	r0, r4
   24bd4:	bl	115c0 <ferror@plt>
   24bd8:	mov	r6, r0
   24bdc:	mov	r0, r4
   24be0:	bl	11878 <fclose@plt>
   24be4:	cmp	r6, #0
   24be8:	mov	r4, r0
   24bec:	bne	24c18 <__assert_fail@plt+0x1325c>
   24bf0:	cmp	r0, #0
   24bf4:	beq	24c10 <__assert_fail@plt+0x13254>
   24bf8:	cmp	r5, #0
   24bfc:	bne	24c28 <__assert_fail@plt+0x1326c>
   24c00:	bl	117dc <__errno_location@plt>
   24c04:	ldr	r4, [r0]
   24c08:	subs	r4, r4, #9
   24c0c:	mvnne	r4, #0
   24c10:	mov	r0, r4
   24c14:	pop	{r4, r5, r6, pc}
   24c18:	cmp	r0, #0
   24c1c:	bne	24c28 <__assert_fail@plt+0x1326c>
   24c20:	bl	117dc <__errno_location@plt>
   24c24:	str	r4, [r0]
   24c28:	mvn	r4, #0
   24c2c:	b	24c10 <__assert_fail@plt+0x13254>
   24c30:	ldr	ip, [r0, #4]
   24c34:	cmp	ip, r1
   24c38:	bcc	24c48 <__assert_fail@plt+0x1328c>
   24c3c:	str	r1, [r0]
   24c40:	mov	r0, #1
   24c44:	bx	lr
   24c48:	push	{r4, r5, r6, r7, r8, lr}
   24c4c:	umull	r6, r7, r1, r3
   24c50:	mov	r8, r3
   24c54:	mov	r5, r1
   24c58:	mov	r4, r0
   24c5c:	cmp	r7, #0
   24c60:	bne	24ca8 <__assert_fail@plt+0x132ec>
   24c64:	ldr	r0, [r0, #8]
   24c68:	cmp	r0, r2
   24c6c:	bne	24cbc <__assert_fail@plt+0x13300>
   24c70:	mov	r0, r6
   24c74:	bl	18840 <__assert_fail@plt+0x6e84>
   24c78:	subs	r6, r0, #0
   24c7c:	beq	24cb4 <__assert_fail@plt+0x132f8>
   24c80:	ldr	r1, [r4, #8]
   24c84:	cmp	r1, #0
   24c88:	beq	24c98 <__assert_fail@plt+0x132dc>
   24c8c:	ldr	r2, [r4]
   24c90:	mul	r2, r2, r8
   24c94:	bl	115e4 <memcpy@plt>
   24c98:	mov	r0, #1
   24c9c:	str	r5, [r4]
   24ca0:	stmib	r4, {r5, r6}
   24ca4:	pop	{r4, r5, r6, r7, r8, pc}
   24ca8:	bl	117dc <__errno_location@plt>
   24cac:	mov	r3, #12
   24cb0:	str	r3, [r0]
   24cb4:	mov	r0, #0
   24cb8:	pop	{r4, r5, r6, r7, r8, pc}
   24cbc:	mov	r1, r6
   24cc0:	bl	188bc <__assert_fail@plt+0x6f00>
   24cc4:	subs	r6, r0, #0
   24cc8:	bne	24c98 <__assert_fail@plt+0x132dc>
   24ccc:	b	24cb4 <__assert_fail@plt+0x132f8>
   24cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   24cd4:	sub	sp, sp, #268	; 0x10c
   24cd8:	movw	r2, #257	; 0x101
   24cdc:	add	r1, sp, #4
   24ce0:	bl	24e90 <__assert_fail@plt+0x134d4>
   24ce4:	cmp	r0, #0
   24ce8:	movne	r0, #0
   24cec:	bne	24d1c <__assert_fail@plt+0x13360>
   24cf0:	ldr	r1, [pc, #44]	; 24d24 <__assert_fail@plt+0x13368>
   24cf4:	add	r0, sp, #4
   24cf8:	bl	11554 <strcmp@plt>
   24cfc:	cmp	r0, #0
   24d00:	beq	24d18 <__assert_fail@plt+0x1335c>
   24d04:	ldr	r1, [pc, #28]	; 24d28 <__assert_fail@plt+0x1336c>
   24d08:	add	r0, sp, #4
   24d0c:	bl	11554 <strcmp@plt>
   24d10:	adds	r0, r0, #0
   24d14:	movne	r0, #1
   24d18:	and	r0, r0, #1
   24d1c:	add	sp, sp, #268	; 0x10c
   24d20:	pop	{pc}		; (ldr pc, [sp], #4)
   24d24:	andeq	r6, r2, fp, lsr #27
   24d28:	andeq	r6, r2, sp, lsr #27
   24d2c:	b	18840 <__assert_fail@plt+0x6e84>
   24d30:	cmp	r1, #0
   24d34:	orreq	r1, r1, #1
   24d38:	b	188bc <__assert_fail@plt+0x6f00>
   24d3c:	b	18504 <__assert_fail@plt+0x6b48>
   24d40:	cmp	r2, #0
   24d44:	cmpne	r1, #0
   24d48:	moveq	r2, #1
   24d4c:	moveq	r1, r2
   24d50:	b	18900 <__assert_fail@plt+0x6f44>
   24d54:	push	{r4, lr}
   24d58:	mov	r0, #14
   24d5c:	bl	118cc <nl_langinfo@plt>
   24d60:	cmp	r0, #0
   24d64:	beq	24d7c <__assert_fail@plt+0x133c0>
   24d68:	ldrb	r2, [r0]
   24d6c:	ldr	r3, [pc, #16]	; 24d84 <__assert_fail@plt+0x133c8>
   24d70:	cmp	r2, #0
   24d74:	moveq	r0, r3
   24d78:	pop	{r4, pc}
   24d7c:	ldr	r0, [pc]	; 24d84 <__assert_fail@plt+0x133c8>
   24d80:	pop	{r4, pc}
   24d84:			; <UNDEFINED> instruction: 0x00026db3
   24d88:	mov	r3, r0
   24d8c:	adds	r0, r0, #16
   24d90:	bmi	24dc8 <__assert_fail@plt+0x1340c>
   24d94:	cmp	r0, r3
   24d98:	bcc	24dc8 <__assert_fail@plt+0x1340c>
   24d9c:	push	{r4, lr}
   24da0:	bl	1171c <malloc@plt>
   24da4:	cmp	r0, #0
   24da8:	addne	r3, r0, #8
   24dac:	rsbne	r2, r0, #8
   24db0:	bicne	r3, r3, #15
   24db4:	moveq	r0, #0
   24db8:	addne	r3, r3, r2
   24dbc:	addne	r0, r0, r3
   24dc0:	strbne	r3, [r0, #-1]
   24dc4:	pop	{r4, pc}
   24dc8:	mov	r0, #0
   24dcc:	bx	lr
   24dd0:	tst	r0, #7
   24dd4:	beq	24de0 <__assert_fail@plt+0x13424>
   24dd8:	push	{r4, lr}
   24ddc:	bl	11980 <abort@plt>
   24de0:	tst	r0, #8
   24de4:	bxeq	lr
   24de8:	ldrb	r3, [r0, #-1]
   24dec:	sub	r0, r0, r3
   24df0:	b	18758 <__assert_fail@plt+0x6d9c>
   24df4:	push	{r4, lr}
   24df8:	mov	r4, r0
   24dfc:	bl	11584 <wcwidth@plt>
   24e00:	cmp	r0, #0
   24e04:	popge	{r4, pc}
   24e08:	mov	r0, r4
   24e0c:	bl	1165c <iswcntrl@plt>
   24e10:	clz	r0, r0
   24e14:	lsr	r0, r0, #5
   24e18:	pop	{r4, pc}
   24e1c:	mov	r3, r1
   24e20:	push	{r4, r5, r6, lr}
   24e24:	mov	r5, r1
   24e28:	mov	r4, r0
   24e2c:	ldr	r1, [r3], #16
   24e30:	cmp	r1, r3
   24e34:	strne	r1, [r0]
   24e38:	bne	24e50 <__assert_fail@plt+0x13494>
   24e3c:	add	r3, r0, #16
   24e40:	ldr	r2, [r5, #4]
   24e44:	mov	r0, r3
   24e48:	bl	115e4 <memcpy@plt>
   24e4c:	str	r0, [r4]
   24e50:	ldr	r3, [r5, #4]
   24e54:	str	r3, [r4, #4]
   24e58:	ldrb	r3, [r5, #8]
   24e5c:	cmp	r3, #0
   24e60:	strb	r3, [r4, #8]
   24e64:	ldrne	r3, [r5, #12]
   24e68:	strne	r3, [r4, #12]
   24e6c:	pop	{r4, r5, r6, pc}
   24e70:	ldr	r3, [pc, #20]	; 24e8c <__assert_fail@plt+0x134d0>
   24e74:	lsr	r2, r0, #5
   24e78:	and	r0, r0, #31
   24e7c:	ldr	r3, [r3, r2, lsl #2]
   24e80:	lsr	r0, r3, r0
   24e84:	and	r0, r0, #1
   24e88:	bx	lr
   24e8c:			; <UNDEFINED> instruction: 0x00026dbc
   24e90:	push	{r4, r5, r6, lr}
   24e94:	mov	r5, r1
   24e98:	mov	r1, #0
   24e9c:	mov	r4, r2
   24ea0:	bl	118a8 <setlocale@plt>
   24ea4:	subs	r6, r0, #0
   24ea8:	bne	24ebc <__assert_fail@plt+0x13500>
   24eac:	cmp	r4, #0
   24eb0:	mov	r0, #22
   24eb4:	strbne	r6, [r5]
   24eb8:	pop	{r4, r5, r6, pc}
   24ebc:	bl	117ac <strlen@plt>
   24ec0:	cmp	r4, r0
   24ec4:	bls	24ee0 <__assert_fail@plt+0x13524>
   24ec8:	add	r2, r0, #1
   24ecc:	mov	r1, r6
   24ed0:	mov	r0, r5
   24ed4:	bl	115e4 <memcpy@plt>
   24ed8:	mov	r0, #0
   24edc:	pop	{r4, r5, r6, pc}
   24ee0:	cmp	r4, #0
   24ee4:	beq	24f04 <__assert_fail@plt+0x13548>
   24ee8:	sub	r4, r4, #1
   24eec:	mov	r1, r6
   24ef0:	mov	r2, r4
   24ef4:	mov	r0, r5
   24ef8:	bl	115e4 <memcpy@plt>
   24efc:	mov	r3, #0
   24f00:	strb	r3, [r5, r4]
   24f04:	mov	r0, #34	; 0x22
   24f08:	pop	{r4, r5, r6, pc}
   24f0c:	mov	r1, #0
   24f10:	b	118a8 <setlocale@plt>
   24f14:	mov	r2, #3
   24f18:	mov	r1, #0
   24f1c:	b	18558 <__assert_fail@plt+0x6b9c>
   24f20:	eor	r1, r1, #-2147483648	; 0x80000000
   24f24:	b	24f2c <__assert_fail@plt+0x13570>
   24f28:	eor	r3, r3, #-2147483648	; 0x80000000
   24f2c:	push	{r4, r5, lr}
   24f30:	lsl	r4, r1, #1
   24f34:	lsl	r5, r3, #1
   24f38:	teq	r4, r5
   24f3c:	teqeq	r0, r2
   24f40:	orrsne	ip, r4, r0
   24f44:	orrsne	ip, r5, r2
   24f48:	mvnsne	ip, r4, asr #21
   24f4c:	mvnsne	ip, r5, asr #21
   24f50:	beq	2513c <__assert_fail@plt+0x13780>
   24f54:	lsr	r4, r4, #21
   24f58:	rsbs	r5, r4, r5, lsr #21
   24f5c:	rsblt	r5, r5, #0
   24f60:	ble	24f80 <__assert_fail@plt+0x135c4>
   24f64:	add	r4, r4, r5
   24f68:	eor	r2, r0, r2
   24f6c:	eor	r3, r1, r3
   24f70:	eor	r0, r2, r0
   24f74:	eor	r1, r3, r1
   24f78:	eor	r2, r0, r2
   24f7c:	eor	r3, r1, r3
   24f80:	cmp	r5, #54	; 0x36
   24f84:	pophi	{r4, r5, pc}
   24f88:	tst	r1, #-2147483648	; 0x80000000
   24f8c:	lsl	r1, r1, #12
   24f90:	mov	ip, #1048576	; 0x100000
   24f94:	orr	r1, ip, r1, lsr #12
   24f98:	beq	24fa4 <__assert_fail@plt+0x135e8>
   24f9c:	rsbs	r0, r0, #0
   24fa0:	rsc	r1, r1, #0
   24fa4:	tst	r3, #-2147483648	; 0x80000000
   24fa8:	lsl	r3, r3, #12
   24fac:	orr	r3, ip, r3, lsr #12
   24fb0:	beq	24fbc <__assert_fail@plt+0x13600>
   24fb4:	rsbs	r2, r2, #0
   24fb8:	rsc	r3, r3, #0
   24fbc:	teq	r4, r5
   24fc0:	beq	25124 <__assert_fail@plt+0x13768>
   24fc4:	sub	r4, r4, #1
   24fc8:	rsbs	lr, r5, #32
   24fcc:	blt	24fe8 <__assert_fail@plt+0x1362c>
   24fd0:	lsl	ip, r2, lr
   24fd4:	adds	r0, r0, r2, lsr r5
   24fd8:	adc	r1, r1, #0
   24fdc:	adds	r0, r0, r3, lsl lr
   24fe0:	adcs	r1, r1, r3, asr r5
   24fe4:	b	25004 <__assert_fail@plt+0x13648>
   24fe8:	sub	r5, r5, #32
   24fec:	add	lr, lr, #32
   24ff0:	cmp	r2, #1
   24ff4:	lsl	ip, r3, lr
   24ff8:	orrcs	ip, ip, #2
   24ffc:	adds	r0, r0, r3, asr r5
   25000:	adcs	r1, r1, r3, asr #31
   25004:	and	r5, r1, #-2147483648	; 0x80000000
   25008:	bpl	25018 <__assert_fail@plt+0x1365c>
   2500c:	rsbs	ip, ip, #0
   25010:	rscs	r0, r0, #0
   25014:	rsc	r1, r1, #0
   25018:	cmp	r1, #1048576	; 0x100000
   2501c:	bcc	2505c <__assert_fail@plt+0x136a0>
   25020:	cmp	r1, #2097152	; 0x200000
   25024:	bcc	25044 <__assert_fail@plt+0x13688>
   25028:	lsrs	r1, r1, #1
   2502c:	rrxs	r0, r0
   25030:	rrx	ip, ip
   25034:	add	r4, r4, #1
   25038:	lsl	r2, r4, #21
   2503c:	cmn	r2, #4194304	; 0x400000
   25040:	bcs	2519c <__assert_fail@plt+0x137e0>
   25044:	cmp	ip, #-2147483648	; 0x80000000
   25048:	lsrseq	ip, r0, #1
   2504c:	adcs	r0, r0, #0
   25050:	adc	r1, r1, r4, lsl #20
   25054:	orr	r1, r1, r5
   25058:	pop	{r4, r5, pc}
   2505c:	lsls	ip, ip, #1
   25060:	adcs	r0, r0, r0
   25064:	adc	r1, r1, r1
   25068:	tst	r1, #1048576	; 0x100000
   2506c:	sub	r4, r4, #1
   25070:	bne	25044 <__assert_fail@plt+0x13688>
   25074:	teq	r1, #0
   25078:	moveq	r1, r0
   2507c:	moveq	r0, #0
   25080:	clz	r3, r1
   25084:	addeq	r3, r3, #32
   25088:	sub	r3, r3, #11
   2508c:	subs	r2, r3, #32
   25090:	bge	250b4 <__assert_fail@plt+0x136f8>
   25094:	adds	r2, r2, #12
   25098:	ble	250b0 <__assert_fail@plt+0x136f4>
   2509c:	add	ip, r2, #20
   250a0:	rsb	r2, r2, #12
   250a4:	lsl	r0, r1, ip
   250a8:	lsr	r1, r1, r2
   250ac:	b	250c4 <__assert_fail@plt+0x13708>
   250b0:	add	r2, r2, #20
   250b4:	rsble	ip, r2, #32
   250b8:	lsl	r1, r1, r2
   250bc:	orrle	r1, r1, r0, lsr ip
   250c0:	lslle	r0, r0, r2
   250c4:	subs	r4, r4, r3
   250c8:	addge	r1, r1, r4, lsl #20
   250cc:	orrge	r1, r1, r5
   250d0:	popge	{r4, r5, pc}
   250d4:	mvn	r4, r4
   250d8:	subs	r4, r4, #31
   250dc:	bge	25118 <__assert_fail@plt+0x1375c>
   250e0:	adds	r4, r4, #12
   250e4:	bgt	25100 <__assert_fail@plt+0x13744>
   250e8:	add	r4, r4, #20
   250ec:	rsb	r2, r4, #32
   250f0:	lsr	r0, r0, r4
   250f4:	orr	r0, r0, r1, lsl r2
   250f8:	orr	r1, r5, r1, lsr r4
   250fc:	pop	{r4, r5, pc}
   25100:	rsb	r4, r4, #12
   25104:	rsb	r2, r4, #32
   25108:	lsr	r0, r0, r2
   2510c:	orr	r0, r0, r1, lsl r4
   25110:	mov	r1, r5
   25114:	pop	{r4, r5, pc}
   25118:	lsr	r0, r1, r4
   2511c:	mov	r1, r5
   25120:	pop	{r4, r5, pc}
   25124:	teq	r4, #0
   25128:	eor	r3, r3, #1048576	; 0x100000
   2512c:	eoreq	r1, r1, #1048576	; 0x100000
   25130:	addeq	r4, r4, #1
   25134:	subne	r5, r5, #1
   25138:	b	24fc4 <__assert_fail@plt+0x13608>
   2513c:	mvns	ip, r4, asr #21
   25140:	mvnsne	ip, r5, asr #21
   25144:	beq	251ac <__assert_fail@plt+0x137f0>
   25148:	teq	r4, r5
   2514c:	teqeq	r0, r2
   25150:	beq	25164 <__assert_fail@plt+0x137a8>
   25154:	orrs	ip, r4, r0
   25158:	moveq	r1, r3
   2515c:	moveq	r0, r2
   25160:	pop	{r4, r5, pc}
   25164:	teq	r1, r3
   25168:	movne	r1, #0
   2516c:	movne	r0, #0
   25170:	popne	{r4, r5, pc}
   25174:	lsrs	ip, r4, #21
   25178:	bne	2518c <__assert_fail@plt+0x137d0>
   2517c:	lsls	r0, r0, #1
   25180:	adcs	r1, r1, r1
   25184:	orrcs	r1, r1, #-2147483648	; 0x80000000
   25188:	pop	{r4, r5, pc}
   2518c:	adds	r4, r4, #4194304	; 0x400000
   25190:	addcc	r1, r1, #1048576	; 0x100000
   25194:	popcc	{r4, r5, pc}
   25198:	and	r5, r1, #-2147483648	; 0x80000000
   2519c:	orr	r1, r5, #2130706432	; 0x7f000000
   251a0:	orr	r1, r1, #15728640	; 0xf00000
   251a4:	mov	r0, #0
   251a8:	pop	{r4, r5, pc}
   251ac:	mvns	ip, r4, asr #21
   251b0:	movne	r1, r3
   251b4:	movne	r0, r2
   251b8:	mvnseq	ip, r5, asr #21
   251bc:	movne	r3, r1
   251c0:	movne	r2, r0
   251c4:	orrs	r4, r0, r1, lsl #12
   251c8:	orrseq	r5, r2, r3, lsl #12
   251cc:	teqeq	r1, r3
   251d0:	orrne	r1, r1, #524288	; 0x80000
   251d4:	pop	{r4, r5, pc}
   251d8:	teq	r0, #0
   251dc:	moveq	r1, #0
   251e0:	bxeq	lr
   251e4:	push	{r4, r5, lr}
   251e8:	mov	r4, #1024	; 0x400
   251ec:	add	r4, r4, #50	; 0x32
   251f0:	mov	r5, #0
   251f4:	mov	r1, #0
   251f8:	b	25074 <__assert_fail@plt+0x136b8>
   251fc:	teq	r0, #0
   25200:	moveq	r1, #0
   25204:	bxeq	lr
   25208:	push	{r4, r5, lr}
   2520c:	mov	r4, #1024	; 0x400
   25210:	add	r4, r4, #50	; 0x32
   25214:	ands	r5, r0, #-2147483648	; 0x80000000
   25218:	rsbmi	r0, r0, #0
   2521c:	mov	r1, #0
   25220:	b	25074 <__assert_fail@plt+0x136b8>
   25224:	lsls	r2, r0, #1
   25228:	asr	r1, r2, #3
   2522c:	rrx	r1, r1
   25230:	lsl	r0, r2, #28
   25234:	andsne	r3, r2, #-16777216	; 0xff000000
   25238:	teqne	r3, #-16777216	; 0xff000000
   2523c:	eorne	r1, r1, #939524096	; 0x38000000
   25240:	bxne	lr
   25244:	bics	r2, r2, #-16777216	; 0xff000000
   25248:	bxeq	lr
   2524c:	teq	r3, #-16777216	; 0xff000000
   25250:	orreq	r1, r1, #524288	; 0x80000
   25254:	bxeq	lr
   25258:	push	{r4, r5, lr}
   2525c:	mov	r4, #896	; 0x380
   25260:	and	r5, r1, #-2147483648	; 0x80000000
   25264:	bic	r1, r1, #-2147483648	; 0x80000000
   25268:	b	25074 <__assert_fail@plt+0x136b8>
   2526c:	orrs	r2, r0, r1
   25270:	bxeq	lr
   25274:	push	{r4, r5, lr}
   25278:	mov	r5, #0
   2527c:	b	2529c <__assert_fail@plt+0x138e0>
   25280:	orrs	r2, r0, r1
   25284:	bxeq	lr
   25288:	push	{r4, r5, lr}
   2528c:	ands	r5, r1, #-2147483648	; 0x80000000
   25290:	bpl	2529c <__assert_fail@plt+0x138e0>
   25294:	rsbs	r0, r0, #0
   25298:	rsc	r1, r1, #0
   2529c:	mov	r4, #1024	; 0x400
   252a0:	add	r4, r4, #50	; 0x32
   252a4:	lsrs	ip, r1, #22
   252a8:	beq	25018 <__assert_fail@plt+0x1365c>
   252ac:	mov	r2, #3
   252b0:	lsrs	ip, ip, #3
   252b4:	addne	r2, r2, #3
   252b8:	lsrs	ip, ip, #3
   252bc:	addne	r2, r2, #3
   252c0:	add	r2, r2, ip, lsr #3
   252c4:	rsb	r3, r2, #32
   252c8:	lsl	ip, r0, r3
   252cc:	lsr	r0, r0, r2
   252d0:	orr	r0, r0, r1, lsl r3
   252d4:	lsr	r1, r1, r2
   252d8:	add	r4, r4, r2
   252dc:	b	25018 <__assert_fail@plt+0x1365c>
   252e0:	cmp	r3, #0
   252e4:	cmpeq	r2, #0
   252e8:	bne	25300 <__assert_fail@plt+0x13944>
   252ec:	cmp	r1, #0
   252f0:	cmpeq	r0, #0
   252f4:	mvnne	r1, #0
   252f8:	mvnne	r0, #0
   252fc:	b	2531c <__assert_fail@plt+0x13960>
   25300:	sub	sp, sp, #8
   25304:	push	{sp, lr}
   25308:	bl	25370 <__assert_fail@plt+0x139b4>
   2530c:	ldr	lr, [sp, #4]
   25310:	add	sp, sp, #8
   25314:	pop	{r2, r3}
   25318:	bx	lr
   2531c:	push	{r1, lr}
   25320:	mov	r0, #8
   25324:	bl	11530 <raise@plt>
   25328:	pop	{r1, pc}
   2532c:	andeq	r0, r0, r0
   25330:	vmov	d6, r0, r1
   25334:	vldr	d7, [pc, #36]	; 25360 <__assert_fail@plt+0x139a4>
   25338:	vldr	d5, [pc, #40]	; 25368 <__assert_fail@plt+0x139ac>
   2533c:	vmul.f64	d7, d6, d7
   25340:	vcvt.u32.f64	s14, d7
   25344:	vcvt.f64.u32	d4, s14
   25348:	vmov	r1, s14
   2534c:	vmls.f64	d6, d4, d5
   25350:	vcvt.u32.f64	s15, d6
   25354:	vmov	r0, s15
   25358:	bx	lr
   2535c:	nop			; (mov r0, r0)
   25360:	andeq	r0, r0, r0
   25364:	ldclcc	0, cr0, [r0]
   25368:	andeq	r0, r0, r0
   2536c:	mvnsmi	r0, r0
   25370:	cmp	r1, r3
   25374:	cmpeq	r0, r2
   25378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2537c:	mov	r4, r0
   25380:	movcc	r0, #0
   25384:	mov	r5, r1
   25388:	ldr	lr, [sp, #36]	; 0x24
   2538c:	movcc	r1, r0
   25390:	bcc	2548c <__assert_fail@plt+0x13ad0>
   25394:	cmp	r3, #0
   25398:	clzeq	ip, r2
   2539c:	clzne	ip, r3
   253a0:	addeq	ip, ip, #32
   253a4:	cmp	r5, #0
   253a8:	clzeq	r1, r4
   253ac:	addeq	r1, r1, #32
   253b0:	clzne	r1, r5
   253b4:	sub	ip, ip, r1
   253b8:	sub	sl, ip, #32
   253bc:	lsl	r9, r3, ip
   253c0:	rsb	fp, ip, #32
   253c4:	orr	r9, r9, r2, lsl sl
   253c8:	orr	r9, r9, r2, lsr fp
   253cc:	lsl	r8, r2, ip
   253d0:	cmp	r5, r9
   253d4:	cmpeq	r4, r8
   253d8:	movcc	r0, #0
   253dc:	movcc	r1, r0
   253e0:	bcc	253fc <__assert_fail@plt+0x13a40>
   253e4:	mov	r0, #1
   253e8:	subs	r4, r4, r8
   253ec:	lsl	r1, r0, sl
   253f0:	orr	r1, r1, r0, lsr fp
   253f4:	lsl	r0, r0, ip
   253f8:	sbc	r5, r5, r9
   253fc:	cmp	ip, #0
   25400:	beq	2548c <__assert_fail@plt+0x13ad0>
   25404:	lsr	r6, r8, #1
   25408:	orr	r6, r6, r9, lsl #31
   2540c:	lsr	r7, r9, #1
   25410:	mov	r2, ip
   25414:	b	25438 <__assert_fail@plt+0x13a7c>
   25418:	subs	r3, r4, r6
   2541c:	sbc	r8, r5, r7
   25420:	adds	r3, r3, r3
   25424:	adc	r8, r8, r8
   25428:	adds	r4, r3, #1
   2542c:	adc	r5, r8, #0
   25430:	subs	r2, r2, #1
   25434:	beq	25454 <__assert_fail@plt+0x13a98>
   25438:	cmp	r5, r7
   2543c:	cmpeq	r4, r6
   25440:	bcs	25418 <__assert_fail@plt+0x13a5c>
   25444:	adds	r4, r4, r4
   25448:	adc	r5, r5, r5
   2544c:	subs	r2, r2, #1
   25450:	bne	25438 <__assert_fail@plt+0x13a7c>
   25454:	lsr	r3, r4, ip
   25458:	orr	r3, r3, r5, lsl fp
   2545c:	lsr	r2, r5, ip
   25460:	orr	r3, r3, r5, lsr sl
   25464:	adds	r0, r0, r4
   25468:	mov	r4, r3
   2546c:	lsl	r3, r2, ip
   25470:	orr	r3, r3, r4, lsl sl
   25474:	lsl	ip, r4, ip
   25478:	orr	r3, r3, r4, lsr fp
   2547c:	adc	r1, r1, r5
   25480:	subs	r0, r0, ip
   25484:	mov	r5, r2
   25488:	sbc	r1, r1, r3
   2548c:	cmp	lr, #0
   25490:	strdne	r4, [lr]
   25494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25498:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2549c:	mov	r7, r0
   254a0:	ldr	r6, [pc, #72]	; 254f0 <__assert_fail@plt+0x13b34>
   254a4:	ldr	r5, [pc, #72]	; 254f4 <__assert_fail@plt+0x13b38>
   254a8:	add	r6, pc, r6
   254ac:	add	r5, pc, r5
   254b0:	sub	r6, r6, r5
   254b4:	mov	r8, r1
   254b8:	mov	r9, r2
   254bc:	bl	114e0 <pthread_mutex_unlock@plt-0x20>
   254c0:	asrs	r6, r6, #2
   254c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   254c8:	mov	r4, #0
   254cc:	add	r4, r4, #1
   254d0:	ldr	r3, [r5], #4
   254d4:	mov	r2, r9
   254d8:	mov	r1, r8
   254dc:	mov	r0, r7
   254e0:	blx	r3
   254e4:	cmp	r6, r4
   254e8:	bne	254cc <__assert_fail@plt+0x13b10>
   254ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   254f0:	andeq	r1, r1, r4, ror #20
   254f4:	andeq	r1, r1, ip, asr sl
   254f8:	bx	lr
   254fc:	ldr	r3, [pc, #12]	; 25510 <__assert_fail@plt+0x13b54>
   25500:	mov	r1, #0
   25504:	add	r3, pc, r3
   25508:	ldr	r2, [r3]
   2550c:	b	11800 <__cxa_atexit@plt>
   25510:	andeq	r1, r1, r0, lsr #25
   25514:	mov	r2, r1
   25518:	mov	r1, r0
   2551c:	mov	r0, #3
   25520:	b	11944 <__xstat64@plt>
   25524:	mov	r2, r1
   25528:	mov	r1, r0
   2552c:	mov	r0, #3
   25530:	b	1168c <__fxstat64@plt>
   25534:	mov	r2, r1
   25538:	mov	r1, r0
   2553c:	mov	r0, #3
   25540:	b	119a4 <__lxstat64@plt>

Disassembly of section .fini:

00025544 <.fini>:
   25544:	push	{r3, lr}
   25548:	pop	{r3, pc}
