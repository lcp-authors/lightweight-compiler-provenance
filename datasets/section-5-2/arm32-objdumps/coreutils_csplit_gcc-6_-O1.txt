
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	115a0 <__assert_fail@plt+0x48>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	r5, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #151552	; 0x25000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #151552	; 0x25000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #151552	; 0x25000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #151552	; 0x25000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #151552	; 0x25000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #151552	; 0x25000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #151552	; 0x25000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #151552	; 0x25000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #151552	; 0x25000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #151552	; 0x25000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #151552	; 0x25000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #151552	; 0x25000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #151552	; 0x25000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #151552	; 0x25000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #151552	; 0x25000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #151552	; 0x25000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #151552	; 0x25000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #151552	; 0x25000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <pthread_mutex_init@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #151552	; 0x25000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <__strtoull_internal@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #151552	; 0x25000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #151552	; 0x25000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #151552	; 0x25000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #151552	; 0x25000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #151552	; 0x25000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #151552	; 0x25000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #151552	; 0x25000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #151552	; 0x25000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #151552	; 0x25000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #151552	; 0x25000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #151552	; 0x25000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #151552	; 0x25000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #151552	; 0x25000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #151552	; 0x25000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #151552	; 0x25000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #151552	; 0x25000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <fwrite@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #151552	; 0x25000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <lseek64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #151552	; 0x25000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #151552	; 0x25000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <strcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #151552	; 0x25000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__fpending@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #151552	; 0x25000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #151552	; 0x25000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #151552	; 0x25000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #151552	; 0x25000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #151552	; 0x25000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #151552	; 0x25000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #151552	; 0x25000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #151552	; 0x25000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__ctype_tolower_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #151552	; 0x25000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <__ctype_toupper_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #151552	; 0x25000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__gmon_start__@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #151552	; 0x25000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <getopt_long@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #151552	; 0x25000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <__ctype_b_loc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #151552	; 0x25000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <exit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #151552	; 0x25000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <strlen@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #151552	; 0x25000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #151552	; 0x25000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__errno_location@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #151552	; 0x25000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <iswalnum@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #151552	; 0x25000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <__sprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #151552	; 0x25000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <__cxa_atexit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #151552	; 0x25000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <memset@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #151552	; 0x25000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <btowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #151552	; 0x25000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <__printf_chk@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #151552	; 0x25000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fileno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #151552	; 0x25000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__fprintf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #151552	; 0x25000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #151552	; 0x25000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #151552	; 0x25000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #151552	; 0x25000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #151552	; 0x25000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #151552	; 0x25000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <strrchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #151552	; 0x25000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <nl_langinfo@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #151552	; 0x25000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <fputc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #151552	; 0x25000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <__strtoll_internal@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #151552	; 0x25000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #151552	; 0x25000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #151552	; 0x25000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #151552	; 0x25000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <strncmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #151552	; 0x25000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <abort@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #151552	; 0x25000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <close@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #151552	; 0x25000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <__snprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #151552	; 0x25000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__assert_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #151552	; 0x25000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

Disassembly of section .text:

00011564 <.text>:
   11564:	mov	fp, #0
   11568:	mov	lr, #0
   1156c:	pop	{r1}		; (ldr r1, [sp], #4)
   11570:	mov	r2, sp
   11574:	push	{r2}		; (str r2, [sp, #-4]!)
   11578:	push	{r0}		; (str r0, [sp, #-4]!)
   1157c:	ldr	ip, [pc, #16]	; 11594 <__assert_fail@plt+0x3c>
   11580:	push	{ip}		; (str ip, [sp, #-4]!)
   11584:	ldr	r0, [pc, #12]	; 11598 <__assert_fail@plt+0x40>
   11588:	ldr	r3, [pc, #12]	; 1159c <__assert_fail@plt+0x44>
   1158c:	bl	113b4 <__libc_start_main@plt>
   11590:	bl	11534 <abort@plt>
   11594:			; <UNDEFINED> instruction: 0x000251b8
   11598:	strdeq	r2, [r1], -r8
   1159c:	andeq	r5, r2, r8, asr r1
   115a0:	ldr	r3, [pc, #20]	; 115bc <__assert_fail@plt+0x64>
   115a4:	ldr	r2, [pc, #20]	; 115c0 <__assert_fail@plt+0x68>
   115a8:	add	r3, pc, r3
   115ac:	ldr	r2, [r3, r2]
   115b0:	cmp	r2, #0
   115b4:	bxeq	lr
   115b8:	b	113e4 <__gmon_start__@plt>
   115bc:	andeq	r5, r2, r0, asr sl
   115c0:	andeq	r0, r0, r0, asr r1
   115c4:	ldr	r3, [pc, #28]	; 115e8 <__assert_fail@plt+0x90>
   115c8:	ldr	r0, [pc, #28]	; 115ec <__assert_fail@plt+0x94>
   115cc:	sub	r3, r3, r0
   115d0:	cmp	r3, #6
   115d4:	bxls	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0x98>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	r7, r3, fp, lsr #3
   115ec:	andeq	r7, r3, r8, lsr #3
   115f0:	andeq	r0, r0, r0
   115f4:	ldr	r1, [pc, #36]	; 11620 <__assert_fail@plt+0xc8>
   115f8:	ldr	r0, [pc, #36]	; 11624 <__assert_fail@plt+0xcc>
   115fc:	sub	r1, r1, r0
   11600:	asr	r1, r1, #2
   11604:	add	r1, r1, r1, lsr #31
   11608:	asrs	r1, r1, #1
   1160c:	bxeq	lr
   11610:	ldr	r3, [pc, #16]	; 11628 <__assert_fail@plt+0xd0>
   11614:	cmp	r3, #0
   11618:	bxeq	lr
   1161c:	bx	r3
   11620:	andeq	r7, r3, r8, lsr #3
   11624:	andeq	r7, r3, r8, lsr #3
   11628:	andeq	r0, r0, r0
   1162c:	push	{r4, lr}
   11630:	ldr	r4, [pc, #24]	; 11650 <__assert_fail@plt+0xf8>
   11634:	ldrb	r3, [r4]
   11638:	cmp	r3, #0
   1163c:	popne	{r4, pc}
   11640:	bl	115c4 <__assert_fail@plt+0x6c>
   11644:	mov	r3, #1
   11648:	strb	r3, [r4]
   1164c:	pop	{r4, pc}
   11650:	andeq	r7, r3, r4, asr #3
   11654:	ldr	r0, [pc, #40]	; 11684 <__assert_fail@plt+0x12c>
   11658:	ldr	r3, [r0]
   1165c:	cmp	r3, #0
   11660:	bne	11668 <__assert_fail@plt+0x110>
   11664:	b	115f4 <__assert_fail@plt+0x9c>
   11668:	ldr	r3, [pc, #24]	; 11688 <__assert_fail@plt+0x130>
   1166c:	cmp	r3, #0
   11670:	beq	11664 <__assert_fail@plt+0x10c>
   11674:	push	{r4, lr}
   11678:	blx	r3
   1167c:	pop	{r4, lr}
   11680:	b	115f4 <__assert_fail@plt+0x9c>
   11684:	andeq	r6, r3, r4, lsl pc
   11688:	andeq	r0, r0, r0
   1168c:	push	{r4, r5, r6, lr}
   11690:	sub	sp, sp, #8
   11694:	mov	r5, r0
   11698:	ldr	r4, [pc, #128]	; 11720 <__assert_fail@plt+0x1c8>
   1169c:	ldr	r0, [r4]
   116a0:	ldr	r1, [r4, #4]
   116a4:	bl	11360 <strcpy@plt>
   116a8:	ldr	r3, [r4, #8]
   116ac:	cmp	r3, #0
   116b0:	beq	116e8 <__assert_fail@plt+0x190>
   116b4:	ldr	r6, [r4]
   116b8:	ldr	r0, [r4, #4]
   116bc:	bl	11414 <strlen@plt>
   116c0:	ldr	r3, [r4, #8]
   116c4:	str	r5, [sp]
   116c8:	mvn	r2, #0
   116cc:	mov	r1, #1
   116d0:	add	r0, r6, r0
   116d4:	bl	11444 <__sprintf_chk@plt>
   116d8:	ldr	r3, [pc, #64]	; 11720 <__assert_fail@plt+0x1c8>
   116dc:	ldr	r0, [r3]
   116e0:	add	sp, sp, #8
   116e4:	pop	{r4, r5, r6, pc}
   116e8:	ldr	r3, [pc, #48]	; 11720 <__assert_fail@plt+0x1c8>
   116ec:	ldr	r4, [r3]
   116f0:	ldr	r0, [r3, #4]
   116f4:	bl	11414 <strlen@plt>
   116f8:	ldr	r3, [pc, #36]	; 11724 <__assert_fail@plt+0x1cc>
   116fc:	ldr	r3, [r3]
   11700:	str	r5, [sp, #4]
   11704:	str	r3, [sp]
   11708:	ldr	r3, [pc, #24]	; 11728 <__assert_fail@plt+0x1d0>
   1170c:	mvn	r2, #0
   11710:	mov	r1, #1
   11714:	add	r0, r4, r0
   11718:	bl	11444 <__sprintf_chk@plt>
   1171c:	b	116d8 <__assert_fail@plt+0x180>
   11720:	andeq	r7, r3, r8, asr #3
   11724:	andeq	r7, r3, ip, asr r1
   11728:	andeq	r5, r2, r0, lsl #6
   1172c:	ldr	r3, [pc, #152]	; 117cc <__assert_fail@plt+0x274>
   11730:	ldrb	r3, [r3, #12]
   11734:	tst	r3, #255	; 0xff
   11738:	bxeq	lr
   1173c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11740:	mov	r7, r0
   11744:	ldr	r3, [pc, #128]	; 117cc <__assert_fail@plt+0x274>
   11748:	ldr	r4, [r3, #16]
   1174c:	mov	sl, #3
   11750:	mov	r8, #0
   11754:	ldr	r9, [pc, #116]	; 117d0 <__assert_fail@plt+0x278>
   11758:	subs	r4, r4, #1
   1175c:	bmi	117bc <__assert_fail@plt+0x264>
   11760:	mov	r0, r4
   11764:	bl	1168c <__assert_fail@plt+0x134>
   11768:	mov	r6, r0
   1176c:	bl	112dc <unlink@plt>
   11770:	cmp	r0, #0
   11774:	beq	11758 <__assert_fail@plt+0x200>
   11778:	bl	1142c <__errno_location@plt>
   1177c:	ldr	r5, [r0]
   11780:	cmp	r5, #2
   11784:	movne	r3, r7
   11788:	orreq	r3, r7, #1
   1178c:	cmp	r3, #0
   11790:	bne	11758 <__assert_fail@plt+0x200>
   11794:	mov	r2, r6
   11798:	mov	r1, sl
   1179c:	mov	r0, r8
   117a0:	bl	156fc <__assert_fail@plt+0x41a4>
   117a4:	mov	r3, r0
   117a8:	mov	r2, r9
   117ac:	mov	r1, r5
   117b0:	mov	r0, r8
   117b4:	bl	11384 <error@plt>
   117b8:	b	11758 <__assert_fail@plt+0x200>
   117bc:	mov	r2, #0
   117c0:	ldr	r3, [pc, #4]	; 117cc <__assert_fail@plt+0x274>
   117c4:	str	r2, [r3, #16]
   117c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   117cc:	andeq	r7, r3, r8, asr #3
   117d0:	ldrdeq	r5, [r2], -r8
   117d4:	push	{lr}		; (str lr, [sp, #-4]!)
   117d8:	sub	sp, sp, #132	; 0x84
   117dc:	bl	11814 <__assert_fail@plt+0x2bc>
   117e0:	mov	r2, sp
   117e4:	ldr	r1, [pc, #36]	; 11810 <__assert_fail@plt+0x2b8>
   117e8:	mov	r0, #0
   117ec:	bl	11228 <sigprocmask@plt>
   117f0:	mov	r0, #0
   117f4:	bl	1172c <__assert_fail@plt+0x1d4>
   117f8:	mov	r2, #0
   117fc:	mov	r1, sp
   11800:	mov	r0, #2
   11804:	bl	11228 <sigprocmask@plt>
   11808:	mov	r0, #1
   1180c:	bl	11408 <exit@plt>
   11810:	ldrdeq	r7, [r3], -ip
   11814:	ldr	r3, [pc, #400]	; 119ac <__assert_fail@plt+0x454>
   11818:	ldr	r0, [r3, #148]	; 0x94
   1181c:	cmp	r0, #0
   11820:	bxeq	lr
   11824:	push	{r4, r5, r6, r7, lr}
   11828:	sub	sp, sp, #132	; 0x84
   1182c:	ldr	r3, [r0]
   11830:	tst	r3, #32
   11834:	bne	11888 <__assert_fail@plt+0x330>
   11838:	bl	13934 <__assert_fail@plt+0x23dc>
   1183c:	cmp	r0, #0
   11840:	bne	118cc <__assert_fail@plt+0x374>
   11844:	ldr	r3, [pc, #352]	; 119ac <__assert_fail@plt+0x454>
   11848:	ldrd	r0, [r3, #160]	; 0xa0
   1184c:	orrs	r3, r0, r1
   11850:	bne	11864 <__assert_fail@plt+0x30c>
   11854:	ldr	r3, [pc, #336]	; 119ac <__assert_fail@plt+0x454>
   11858:	ldrb	r3, [r3, #168]	; 0xa8
   1185c:	cmp	r3, #0
   11860:	bne	11908 <__assert_fail@plt+0x3b0>
   11864:	ldr	r3, [pc, #320]	; 119ac <__assert_fail@plt+0x454>
   11868:	ldrb	r3, [r3, #169]	; 0xa9
   1186c:	cmp	r3, #0
   11870:	beq	11984 <__assert_fail@plt+0x42c>
   11874:	mov	r2, #0
   11878:	ldr	r3, [pc, #300]	; 119ac <__assert_fail@plt+0x454>
   1187c:	str	r2, [r3, #148]	; 0x94
   11880:	add	sp, sp, #132	; 0x84
   11884:	pop	{r4, r5, r6, r7, pc}
   11888:	mov	r2, #5
   1188c:	ldr	r1, [pc, #284]	; 119b0 <__assert_fail@plt+0x458>
   11890:	mov	r0, #0
   11894:	bl	112d0 <dcgettext@plt>
   11898:	mov	r5, r0
   1189c:	ldr	r4, [pc, #264]	; 119ac <__assert_fail@plt+0x454>
   118a0:	ldr	r1, [r4, #152]	; 0x98
   118a4:	mov	r0, #4
   118a8:	bl	15630 <__assert_fail@plt+0x40d8>
   118ac:	mov	r3, r0
   118b0:	mov	r2, r5
   118b4:	mov	r1, #0
   118b8:	mov	r0, r1
   118bc:	bl	11384 <error@plt>
   118c0:	mov	r3, #0
   118c4:	str	r3, [r4, #148]	; 0x94
   118c8:	bl	117d4 <__assert_fail@plt+0x27c>
   118cc:	bl	1142c <__errno_location@plt>
   118d0:	ldr	r5, [r0]
   118d4:	ldr	r4, [pc, #208]	; 119ac <__assert_fail@plt+0x454>
   118d8:	ldr	r2, [r4, #152]	; 0x98
   118dc:	mov	r1, #3
   118e0:	mov	r0, #0
   118e4:	bl	156fc <__assert_fail@plt+0x41a4>
   118e8:	mov	r3, r0
   118ec:	ldr	r2, [pc, #192]	; 119b4 <__assert_fail@plt+0x45c>
   118f0:	mov	r1, r5
   118f4:	mov	r0, #0
   118f8:	bl	11384 <error@plt>
   118fc:	mov	r3, #0
   11900:	str	r3, [r4, #148]	; 0x94
   11904:	bl	117d4 <__assert_fail@plt+0x27c>
   11908:	ldr	r4, [pc, #156]	; 119ac <__assert_fail@plt+0x454>
   1190c:	mov	r2, sp
   11910:	add	r1, r4, #20
   11914:	mov	r0, #0
   11918:	bl	11228 <sigprocmask@plt>
   1191c:	ldr	r6, [r4, #152]	; 0x98
   11920:	mov	r0, r6
   11924:	bl	112dc <unlink@plt>
   11928:	mov	r7, r0
   1192c:	bl	1142c <__errno_location@plt>
   11930:	ldr	r5, [r0]
   11934:	ldr	r3, [r4, #16]
   11938:	sub	r3, r3, #1
   1193c:	str	r3, [r4, #16]
   11940:	mov	r2, #0
   11944:	mov	r1, sp
   11948:	mov	r0, #2
   1194c:	bl	11228 <sigprocmask@plt>
   11950:	cmp	r7, #0
   11954:	cmpne	r5, #2
   11958:	beq	11874 <__assert_fail@plt+0x31c>
   1195c:	mov	r2, r6
   11960:	mov	r1, #3
   11964:	mov	r0, #0
   11968:	bl	156fc <__assert_fail@plt+0x41a4>
   1196c:	mov	r3, r0
   11970:	ldr	r2, [pc, #60]	; 119b4 <__assert_fail@plt+0x45c>
   11974:	mov	r1, r5
   11978:	mov	r0, #0
   1197c:	bl	11384 <error@plt>
   11980:	b	11874 <__assert_fail@plt+0x31c>
   11984:	ldr	r3, [pc, #44]	; 119b8 <__assert_fail@plt+0x460>
   11988:	ldr	r4, [r3]
   1198c:	mov	r2, sp
   11990:	bl	13c40 <__assert_fail@plt+0x26e8>
   11994:	mov	r3, r0
   11998:	ldr	r2, [pc, #28]	; 119bc <__assert_fail@plt+0x464>
   1199c:	mov	r1, #1
   119a0:	mov	r0, r4
   119a4:	bl	1148c <__fprintf_chk@plt>
   119a8:	b	11874 <__assert_fail@plt+0x31c>
   119ac:	andeq	r7, r3, r8, asr #3
   119b0:	andeq	r5, r2, r8, lsl #6
   119b4:	ldrdeq	r5, [r2], -r8
   119b8:			; <UNDEFINED> instruction: 0x000371bc
   119bc:	andeq	r6, r2, r0, lsr #3
   119c0:	push	{r7, lr}
   119c4:	sub	sp, sp, #32
   119c8:	mov	r9, r0
   119cc:	mov	r4, r2
   119d0:	mov	r5, r3
   119d4:	ldr	r3, [pc, #164]	; 11a80 <__assert_fail@plt+0x528>
   119d8:	ldr	r6, [r3]
   119dc:	mov	r2, #5
   119e0:	ldr	r1, [pc, #156]	; 11a84 <__assert_fail@plt+0x52c>
   119e4:	mov	r0, #0
   119e8:	bl	112d0 <dcgettext@plt>
   119ec:	mov	r7, r0
   119f0:	ldr	r3, [pc, #144]	; 11a88 <__assert_fail@plt+0x530>
   119f4:	ldr	r8, [r3]
   119f8:	add	r2, sp, #8
   119fc:	ldrd	r0, [r9, #8]
   11a00:	bl	13c40 <__assert_fail@plt+0x26e8>
   11a04:	bl	15864 <__assert_fail@plt+0x430c>
   11a08:	str	r0, [sp]
   11a0c:	mov	r3, r8
   11a10:	mov	r2, r7
   11a14:	mov	r1, #1
   11a18:	mov	r0, r6
   11a1c:	bl	1148c <__fprintf_chk@plt>
   11a20:	orrs	r3, r4, r5
   11a24:	beq	11a6c <__assert_fail@plt+0x514>
   11a28:	ldr	r3, [pc, #80]	; 11a80 <__assert_fail@plt+0x528>
   11a2c:	ldr	r6, [r3]
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #80]	; 11a8c <__assert_fail@plt+0x534>
   11a38:	mov	r0, #0
   11a3c:	bl	112d0 <dcgettext@plt>
   11a40:	mov	r7, r0
   11a44:	add	r2, sp, #8
   11a48:	mov	r0, r4
   11a4c:	mov	r1, r5
   11a50:	bl	13c40 <__assert_fail@plt+0x26e8>
   11a54:	mov	r3, r0
   11a58:	mov	r2, r7
   11a5c:	mov	r1, #1
   11a60:	mov	r0, r6
   11a64:	bl	1148c <__fprintf_chk@plt>
   11a68:	bl	117d4 <__assert_fail@plt+0x27c>
   11a6c:	ldr	r3, [pc, #12]	; 11a80 <__assert_fail@plt+0x528>
   11a70:	ldr	r1, [r3]
   11a74:	mov	r0, #10
   11a78:	bl	114ec <fputc@plt>
   11a7c:	b	11a68 <__assert_fail@plt+0x510>
   11a80:			; <UNDEFINED> instruction: 0x000371b8
   11a84:	andeq	r5, r2, ip, lsl r3
   11a88:	andeq	r7, r3, r0, asr #5
   11a8c:	andeq	r5, r2, r0, asr #6
   11a90:	push	{r4, lr}
   11a94:	mov	r4, r0
   11a98:	mov	r0, #1
   11a9c:	bl	1172c <__assert_fail@plt+0x1d4>
   11aa0:	mov	r1, #0
   11aa4:	mov	r0, r4
   11aa8:	bl	112a0 <signal@plt>
   11aac:	mov	r0, r4
   11ab0:	bl	111d4 <raise@plt>
   11ab4:	pop	{r4, pc}
   11ab8:	push	{r4, r5, lr}
   11abc:	sub	sp, sp, #12
   11ac0:	ldr	r3, [pc, #120]	; 11b40 <__assert_fail@plt+0x5e8>
   11ac4:	ldr	r2, [r3, #172]	; 0xac
   11ac8:	ldr	r3, [r3, #176]	; 0xb0
   11acc:	cmp	r2, r3
   11ad0:	beq	11b18 <__assert_fail@plt+0x5c0>
   11ad4:	ldr	r2, [pc, #100]	; 11b40 <__assert_fail@plt+0x5e8>
   11ad8:	ldr	r1, [r2, #180]	; 0xb4
   11adc:	ldr	r3, [r2, #172]	; 0xac
   11ae0:	add	r0, r3, #1
   11ae4:	str	r0, [r2, #172]	; 0xac
   11ae8:	lsl	r3, r3, #6
   11aec:	add	r0, r1, r3
   11af0:	mov	r2, #0
   11af4:	strb	r2, [r0, #30]
   11af8:	mov	r4, #0
   11afc:	mov	r5, #0
   11b00:	strd	r4, [r0, #16]
   11b04:	strb	r2, [r0, #28]
   11b08:	strd	r4, [r0, #8]
   11b0c:	strd	r4, [r1, r3]
   11b10:	add	sp, sp, #12
   11b14:	pop	{r4, r5, pc}
   11b18:	ldr	r4, [pc, #32]	; 11b40 <__assert_fail@plt+0x5e8>
   11b1c:	mov	r3, #64	; 0x40
   11b20:	str	r3, [sp]
   11b24:	mvn	r3, #0
   11b28:	mov	r2, #1
   11b2c:	add	r1, r4, #176	; 0xb0
   11b30:	ldr	r0, [r4, #180]	; 0xb4
   11b34:	bl	23384 <__assert_fail@plt+0x11e2c>
   11b38:	str	r0, [r4, #180]	; 0xb4
   11b3c:	b	11ad4 <__assert_fail@plt+0x57c>
   11b40:	andeq	r7, r3, r8, asr #3
   11b44:	push	{r4, r5, r6, lr}
   11b48:	mov	r4, r0
   11b4c:	ldr	r3, [pc, #128]	; 11bd4 <__assert_fail@plt+0x67c>
   11b50:	ldr	r3, [r3, #148]	; 0x94
   11b54:	ldr	r2, [r0]
   11b58:	mov	r1, #1
   11b5c:	ldr	r0, [r0, #4]
   11b60:	bl	112ac <fwrite_unlocked@plt>
   11b64:	ldr	r3, [r4]
   11b68:	cmp	r0, r3
   11b6c:	bne	11b88 <__assert_fail@plt+0x630>
   11b70:	ldr	r1, [pc, #92]	; 11bd4 <__assert_fail@plt+0x67c>
   11b74:	ldrd	r2, [r1, #160]	; 0xa0
   11b78:	adds	r2, r2, r0
   11b7c:	adc	r3, r3, r0, asr #31
   11b80:	strd	r2, [r1, #160]	; 0xa0
   11b84:	pop	{r4, r5, r6, pc}
   11b88:	bl	1142c <__errno_location@plt>
   11b8c:	ldr	r5, [r0]
   11b90:	mov	r2, #5
   11b94:	ldr	r1, [pc, #60]	; 11bd8 <__assert_fail@plt+0x680>
   11b98:	mov	r0, #0
   11b9c:	bl	112d0 <dcgettext@plt>
   11ba0:	mov	r6, r0
   11ba4:	ldr	r4, [pc, #40]	; 11bd4 <__assert_fail@plt+0x67c>
   11ba8:	ldr	r1, [r4, #152]	; 0x98
   11bac:	mov	r0, #4
   11bb0:	bl	15630 <__assert_fail@plt+0x40d8>
   11bb4:	mov	r3, r0
   11bb8:	mov	r2, r6
   11bbc:	mov	r1, r5
   11bc0:	mov	r0, #0
   11bc4:	bl	11384 <error@plt>
   11bc8:	mov	r3, #0
   11bcc:	str	r3, [r4, #148]	; 0x94
   11bd0:	bl	117d4 <__assert_fail@plt+0x27c>
   11bd4:	andeq	r7, r3, r8, asr #3
   11bd8:	andeq	r5, r2, r8, lsl #6
   11bdc:	push	{r4, r5, r6, lr}
   11be0:	mov	r5, r0
   11be4:	ldr	r0, [r0, #32]
   11be8:	cmp	r0, #0
   11bec:	beq	11c04 <__assert_fail@plt+0x6ac>
   11bf0:	ldr	r4, [r0, #652]	; 0x28c
   11bf4:	bl	13b40 <__assert_fail@plt+0x25e8>
   11bf8:	mov	r0, r4
   11bfc:	cmp	r4, #0
   11c00:	bne	11bf0 <__assert_fail@plt+0x698>
   11c04:	ldr	r0, [r5, #28]
   11c08:	bl	13b40 <__assert_fail@plt+0x25e8>
   11c0c:	mov	r0, r5
   11c10:	bl	13b40 <__assert_fail@plt+0x25e8>
   11c14:	pop	{r4, r5, r6, pc}
   11c18:	push	{r4, r5, r6, r7, lr}
   11c1c:	sub	sp, sp, #132	; 0x84
   11c20:	ldr	r5, [pc, #180]	; 11cdc <__assert_fail@plt+0x784>
   11c24:	ldr	r4, [r5, #16]
   11c28:	mov	r0, r4
   11c2c:	bl	1168c <__assert_fail@plt+0x134>
   11c30:	str	r0, [r5, #152]	; 0x98
   11c34:	cmn	r4, #-2147483647	; 0x80000001
   11c38:	beq	11cac <__assert_fail@plt+0x754>
   11c3c:	mov	r6, r0
   11c40:	mov	r7, r5
   11c44:	mov	r2, sp
   11c48:	add	r1, r5, #20
   11c4c:	mov	r0, #0
   11c50:	bl	11228 <sigprocmask@plt>
   11c54:	ldr	r1, [pc, #132]	; 11ce0 <__assert_fail@plt+0x788>
   11c58:	mov	r0, r6
   11c5c:	bl	13aa4 <__assert_fail@plt+0x254c>
   11c60:	mov	r5, r0
   11c64:	str	r0, [r7, #148]	; 0x94
   11c68:	bl	1142c <__errno_location@plt>
   11c6c:	ldr	r6, [r0]
   11c70:	cmp	r5, #0
   11c74:	addne	r4, r4, #1
   11c78:	str	r4, [r7, #16]
   11c7c:	mov	r2, #0
   11c80:	mov	r1, sp
   11c84:	mov	r0, #2
   11c88:	bl	11228 <sigprocmask@plt>
   11c8c:	cmp	r5, #0
   11c90:	beq	11cb0 <__assert_fail@plt+0x758>
   11c94:	mov	r0, #0
   11c98:	mov	r1, #0
   11c9c:	ldr	r3, [pc, #56]	; 11cdc <__assert_fail@plt+0x784>
   11ca0:	strd	r0, [r3, #160]	; 0xa0
   11ca4:	add	sp, sp, #132	; 0x84
   11ca8:	pop	{r4, r5, r6, r7, pc}
   11cac:	mov	r6, #75	; 0x4b
   11cb0:	ldr	r3, [pc, #36]	; 11cdc <__assert_fail@plt+0x784>
   11cb4:	ldr	r2, [r3, #152]	; 0x98
   11cb8:	mov	r1, #3
   11cbc:	mov	r0, #0
   11cc0:	bl	156fc <__assert_fail@plt+0x41a4>
   11cc4:	mov	r3, r0
   11cc8:	ldr	r2, [pc, #20]	; 11ce4 <__assert_fail@plt+0x78c>
   11ccc:	mov	r1, r6
   11cd0:	mov	r0, #0
   11cd4:	bl	11384 <error@plt>
   11cd8:	bl	117d4 <__assert_fail@plt+0x27c>
   11cdc:	andeq	r7, r3, r8, asr #3
   11ce0:	andeq	r5, r2, r4, asr r3
   11ce4:	ldrdeq	r5, [r2], -r8
   11ce8:	push	{r4, r5, r6, r7, r8, lr}
   11cec:	mov	r4, r0
   11cf0:	mov	r7, r1
   11cf4:	mov	r6, r2
   11cf8:	ldr	r3, [r0, #32]
   11cfc:	cmp	r3, #0
   11d00:	beq	11d40 <__assert_fail@plt+0x7e8>
   11d04:	ldr	r5, [r0, #36]	; 0x24
   11d08:	ldr	r3, [r5]
   11d0c:	cmp	r3, #80	; 0x50
   11d10:	beq	11d68 <__assert_fail@plt+0x810>
   11d14:	ldr	r3, [r4, #36]	; 0x24
   11d18:	ldr	r2, [r3, #4]
   11d1c:	add	r1, r3, r2, lsl #3
   11d20:	str	r7, [r1, #16]
   11d24:	str	r6, [r1, #12]
   11d28:	ldr	r1, [r3]
   11d2c:	add	r1, r1, #1
   11d30:	str	r1, [r3]
   11d34:	add	r2, r2, #1
   11d38:	str	r2, [r3, #4]
   11d3c:	pop	{r4, r5, r6, r7, r8, pc}
   11d40:	mov	r0, #656	; 0x290
   11d44:	bl	231d8 <__assert_fail@plt+0x11c80>
   11d48:	mov	r3, #0
   11d4c:	str	r3, [r0, #652]	; 0x28c
   11d50:	str	r3, [r0]
   11d54:	str	r3, [r0, #4]
   11d58:	str	r3, [r0, #8]
   11d5c:	str	r0, [r4, #36]	; 0x24
   11d60:	str	r0, [r4, #32]
   11d64:	b	11d14 <__assert_fail@plt+0x7bc>
   11d68:	mov	r0, #656	; 0x290
   11d6c:	bl	231d8 <__assert_fail@plt+0x11c80>
   11d70:	mov	r3, #0
   11d74:	str	r3, [r0, #652]	; 0x28c
   11d78:	str	r3, [r0]
   11d7c:	str	r3, [r0, #4]
   11d80:	str	r3, [r0, #8]
   11d84:	str	r0, [r5, #652]	; 0x28c
   11d88:	ldr	r3, [r4, #36]	; 0x24
   11d8c:	ldr	r3, [r3, #652]	; 0x28c
   11d90:	str	r3, [r4, #36]	; 0x24
   11d94:	b	11d14 <__assert_fail@plt+0x7bc>
   11d98:	push	{r4, lr}
   11d9c:	mov	r2, #5
   11da0:	ldr	r1, [pc, #28]	; 11dc4 <__assert_fail@plt+0x86c>
   11da4:	mov	r0, #0
   11da8:	bl	112d0 <dcgettext@plt>
   11dac:	mov	r3, r0
   11db0:	ldr	r2, [pc, #16]	; 11dc8 <__assert_fail@plt+0x870>
   11db4:	mov	r1, #0
   11db8:	mov	r0, r1
   11dbc:	bl	11384 <error@plt>
   11dc0:	bl	117d4 <__assert_fail@plt+0x27c>
   11dc4:	andeq	r5, r2, r8, asr r3
   11dc8:	ldrdeq	r5, [r2], -r8
   11dcc:	ldr	r3, [pc, #708]	; 12098 <__assert_fail@plt+0xb40>
   11dd0:	ldrb	r3, [r3, #184]	; 0xb8
   11dd4:	cmp	r3, #0
   11dd8:	bne	12090 <__assert_fail@plt+0xb38>
   11ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de0:	sub	sp, sp, #12
   11de4:	ldr	r3, [pc, #684]	; 12098 <__assert_fail@plt+0xb40>
   11de8:	ldr	r4, [r3, #188]	; 0xbc
   11dec:	ldr	r3, [pc, #680]	; 1209c <__assert_fail@plt+0xb44>
   11df0:	cmp	r4, r3
   11df4:	addgt	r4, r4, #1
   11df8:	ldrle	r4, [pc, #672]	; 120a0 <__assert_fail@plt+0xb48>
   11dfc:	mov	r9, #0
   11e00:	ldr	fp, [pc, #656]	; 12098 <__assert_fail@plt+0xb40>
   11e04:	mov	sl, #10
   11e08:	b	11f20 <__assert_fail@plt+0x9c8>
   11e0c:	mov	r2, r7
   11e10:	ldr	r1, [fp, #200]	; 0xc8
   11e14:	bl	11264 <memcpy@plt>
   11e18:	add	r1, r5, r7
   11e1c:	ldr	r3, [r6, #4]
   11e20:	add	r3, r3, r7
   11e24:	str	r3, [r6, #4]
   11e28:	str	r9, [fp, #188]	; 0xbc
   11e2c:	sub	r2, r4, r7
   11e30:	subs	r2, r2, #1
   11e34:	bne	11f98 <__assert_fail@plt+0xa40>
   11e38:	ldr	r0, [r6, #4]
   11e3c:	add	r2, r2, r0
   11e40:	str	r2, [r6, #4]
   11e44:	cmp	r2, #0
   11e48:	beq	11ee8 <__assert_fail@plt+0x990>
   11e4c:	ldr	r4, [r6, #28]
   11e50:	add	r8, r4, r2
   11e54:	strb	sl, [r4, r2]
   11e58:	mov	r7, #0
   11e5c:	mov	r1, sl
   11e60:	mov	r0, r4
   11e64:	bl	11318 <rawmemchr@plt>
   11e68:	mov	r5, r0
   11e6c:	cmp	r8, r0
   11e70:	beq	11e94 <__assert_fail@plt+0x93c>
   11e74:	sub	r2, r0, r4
   11e78:	add	r2, r2, #1
   11e7c:	mov	r1, r4
   11e80:	mov	r0, r6
   11e84:	bl	11ce8 <__assert_fail@plt+0x790>
   11e88:	add	r4, r5, #1
   11e8c:	add	r7, r7, #1
   11e90:	b	11e5c <__assert_fail@plt+0x904>
   11e94:	subs	r8, r8, r4
   11e98:	beq	11ebc <__assert_fail@plt+0x964>
   11e9c:	ldrb	r3, [fp, #184]	; 0xb8
   11ea0:	cmp	r3, #0
   11ea4:	beq	11fe4 <__assert_fail@plt+0xa8c>
   11ea8:	mov	r2, r8
   11eac:	mov	r1, r4
   11eb0:	mov	r0, r6
   11eb4:	bl	11ce8 <__assert_fail@plt+0x790>
   11eb8:	add	r7, r7, #1
   11ebc:	str	r7, [r6, #24]
   11ec0:	ldrd	r2, [fp, #192]	; 0xc0
   11ec4:	adds	r0, r2, #1
   11ec8:	adc	r1, r3, #0
   11ecc:	strd	r0, [r6, #8]
   11ed0:	strd	r0, [r6, #16]
   11ed4:	adds	r2, r2, r7
   11ed8:	adc	r3, r3, r7, asr #31
   11edc:	strd	r2, [fp, #192]	; 0xc0
   11ee0:	cmp	r7, #0
   11ee4:	bne	12034 <__assert_fail@plt+0xadc>
   11ee8:	ldrb	r0, [fp, #184]	; 0xb8
   11eec:	cmp	r0, #0
   11ef0:	bne	12074 <__assert_fail@plt+0xb1c>
   11ef4:	ldr	r4, [r6]
   11ef8:	cmp	r4, #0
   11efc:	blt	12008 <__assert_fail@plt+0xab0>
   11f00:	cmn	r4, #-1073741823	; 0xc0000001
   11f04:	movle	r0, #0
   11f08:	movgt	r0, #1
   11f0c:	cmp	r0, #0
   11f10:	bne	12030 <__assert_fail@plt+0xad8>
   11f14:	mov	r0, r6
   11f18:	bl	11bdc <__assert_fail@plt+0x684>
   11f1c:	lsl	r4, r4, #1
   11f20:	mov	r0, #48	; 0x30
   11f24:	bl	231d8 <__assert_fail@plt+0x11c80>
   11f28:	mov	r6, r0
   11f2c:	str	r9, [r0]
   11f30:	mov	r3, #1
   11f34:	str	r3, [sp]
   11f38:	mvn	r3, #0
   11f3c:	mov	r2, r4
   11f40:	mov	r1, r0
   11f44:	mov	r0, r9
   11f48:	bl	23384 <__assert_fail@plt+0x11e2c>
   11f4c:	mov	r5, r0
   11f50:	str	r0, [r6, #28]
   11f54:	str	r9, [r6, #4]
   11f58:	ldrd	r2, [fp, #192]	; 0xc0
   11f5c:	adds	r2, r2, #1
   11f60:	adc	r3, r3, #0
   11f64:	strd	r2, [r6, #16]
   11f68:	strd	r2, [r6, #8]
   11f6c:	str	r9, [r6, #24]
   11f70:	str	r9, [r6, #36]	; 0x24
   11f74:	str	r9, [r6, #32]
   11f78:	str	r9, [r6, #40]	; 0x28
   11f7c:	ldr	r4, [r6]
   11f80:	ldr	r7, [fp, #188]	; 0xbc
   11f84:	cmp	r7, #0
   11f88:	bne	11e0c <__assert_fail@plt+0x8b4>
   11f8c:	subs	r2, r4, #1
   11f90:	movne	r1, r0
   11f94:	beq	11ee8 <__assert_fail@plt+0x990>
   11f98:	mov	r0, r9
   11f9c:	bl	22bcc <__assert_fail@plt+0x11674>
   11fa0:	subs	r2, r0, #0
   11fa4:	moveq	r3, #1
   11fa8:	strbeq	r3, [fp, #184]	; 0xb8
   11fac:	beq	11e38 <__assert_fail@plt+0x8e0>
   11fb0:	cmn	r2, #1
   11fb4:	bne	11e38 <__assert_fail@plt+0x8e0>
   11fb8:	bl	1142c <__errno_location@plt>
   11fbc:	ldr	r4, [r0]
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #216]	; 120a4 <__assert_fail@plt+0xb4c>
   11fc8:	mov	r0, #0
   11fcc:	bl	112d0 <dcgettext@plt>
   11fd0:	mov	r2, r0
   11fd4:	mov	r1, r4
   11fd8:	mov	r0, #0
   11fdc:	bl	11384 <error@plt>
   11fe0:	bl	117d4 <__assert_fail@plt+0x27c>
   11fe4:	mov	r1, r8
   11fe8:	mov	r0, r4
   11fec:	bl	23710 <__assert_fail@plt+0x121b8>
   11ff0:	mov	r4, r0
   11ff4:	ldr	r0, [fp, #200]	; 0xc8
   11ff8:	bl	13b40 <__assert_fail@plt+0x25e8>
   11ffc:	str	r4, [fp, #200]	; 0xc8
   12000:	str	r8, [fp, #188]	; 0xbc
   12004:	b	11ebc <__assert_fail@plt+0x964>
   12008:	cmn	r4, #1
   1200c:	beq	12028 <__assert_fail@plt+0xad0>
   12010:	mov	r1, r4
   12014:	mov	r0, #-2147483648	; 0x80000000
   12018:	bl	24cd0 <__assert_fail@plt+0x13778>
   1201c:	cmp	r0, #1
   12020:	movgt	r0, #0
   12024:	movle	r0, #1
   12028:	and	r0, r0, #1
   1202c:	b	11f0c <__assert_fail@plt+0x9b4>
   12030:	bl	11d98 <__assert_fail@plt+0x840>
   12034:	mov	r3, #0
   12038:	str	r3, [r6, #40]	; 0x28
   1203c:	ldr	r3, [r6, #32]
   12040:	str	r3, [r6, #36]	; 0x24
   12044:	ldr	r3, [pc, #76]	; 12098 <__assert_fail@plt+0xb40>
   12048:	ldr	r2, [r3, #204]	; 0xcc
   1204c:	cmp	r2, #0
   12050:	streq	r6, [r3, #204]	; 0xcc
   12054:	bne	12060 <__assert_fail@plt+0xb08>
   12058:	b	12080 <__assert_fail@plt+0xb28>
   1205c:	mov	r2, r3
   12060:	ldr	r3, [r2, #40]	; 0x28
   12064:	cmp	r3, #0
   12068:	bne	1205c <__assert_fail@plt+0xb04>
   1206c:	str	r6, [r2, #40]	; 0x28
   12070:	b	12080 <__assert_fail@plt+0xb28>
   12074:	mov	r0, r6
   12078:	bl	11bdc <__assert_fail@plt+0x684>
   1207c:	mov	r7, #0
   12080:	adds	r0, r7, #0
   12084:	movne	r0, #1
   12088:	add	sp, sp, #12
   1208c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12090:	mov	r0, #0
   12094:	bx	lr
   12098:	andeq	r7, r3, r8, asr #3
   1209c:	strdeq	r1, [r0], -lr
   120a0:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   120a4:	andeq	r5, r2, ip, ror #6
   120a8:	push	{r4, r6, r7, lr}
   120ac:	mov	r6, r0
   120b0:	mov	r7, r1
   120b4:	ldr	r3, [pc, #260]	; 121c0 <__assert_fail@plt+0xc68>
   120b8:	ldr	r4, [r3, #204]	; 0xcc
   120bc:	cmp	r4, #0
   120c0:	beq	12118 <__assert_fail@plt+0xbc0>
   120c4:	ldrd	r2, [r4, #8]
   120c8:	cmp	r0, r2
   120cc:	sbcs	r1, r7, r3
   120d0:	blt	121b8 <__assert_fail@plt+0xc60>
   120d4:	ldr	ip, [r4, #24]
   120d8:	adds	r0, r2, ip
   120dc:	adc	r1, r3, ip, asr #31
   120e0:	cmp	r6, r0
   120e4:	sbcs	r1, r7, r1
   120e8:	bge	12164 <__assert_fail@plt+0xc0c>
   120ec:	ldr	r3, [r4, #32]
   120f0:	sub	r2, r6, r2
   120f4:	cmp	r2, #79	; 0x4f
   120f8:	ble	1210c <__assert_fail@plt+0xbb4>
   120fc:	ldr	r3, [r3, #652]	; 0x28c
   12100:	sub	r2, r2, #80	; 0x50
   12104:	cmp	r2, #79	; 0x4f
   12108:	bgt	120fc <__assert_fail@plt+0xba4>
   1210c:	add	r2, r3, r2, lsl #3
   12110:	add	r0, r2, #12
   12114:	pop	{r4, r6, r7, pc}
   12118:	bl	11dcc <__assert_fail@plt+0x874>
   1211c:	cmp	r0, #0
   12120:	beq	121a0 <__assert_fail@plt+0xc48>
   12124:	ldr	r3, [pc, #148]	; 121c0 <__assert_fail@plt+0xc68>
   12128:	ldr	r4, [r3, #204]	; 0xcc
   1212c:	ldrd	r2, [r4, #8]
   12130:	cmp	r6, r2
   12134:	sbcs	r1, r7, r3
   12138:	blt	121a8 <__assert_fail@plt+0xc50>
   1213c:	cmp	r4, #0
   12140:	bne	120d4 <__assert_fail@plt+0xb7c>
   12144:	b	1218c <__assert_fail@plt+0xc34>
   12148:	ldrd	r2, [r4, #8]
   1214c:	ldr	ip, [r4, #24]
   12150:	adds	r0, r2, ip
   12154:	adc	r1, r3, ip, asr #31
   12158:	cmp	r6, r0
   1215c:	sbcs	r1, r7, r1
   12160:	blt	120ec <__assert_fail@plt+0xb94>
   12164:	ldr	r3, [r4, #40]	; 0x28
   12168:	cmp	r3, #0
   1216c:	movne	r4, r3
   12170:	bne	12148 <__assert_fail@plt+0xbf0>
   12174:	bl	11dcc <__assert_fail@plt+0x874>
   12178:	cmp	r0, #0
   1217c:	beq	121b0 <__assert_fail@plt+0xc58>
   12180:	ldr	r4, [r4, #40]	; 0x28
   12184:	cmp	r4, #0
   12188:	bne	12148 <__assert_fail@plt+0xbf0>
   1218c:	ldr	r3, [pc, #48]	; 121c4 <__assert_fail@plt+0xc6c>
   12190:	ldr	r2, [pc, #48]	; 121c8 <__assert_fail@plt+0xc70>
   12194:	ldr	r1, [pc, #48]	; 121cc <__assert_fail@plt+0xc74>
   12198:	ldr	r0, [pc, #48]	; 121d0 <__assert_fail@plt+0xc78>
   1219c:	bl	11558 <__assert_fail@plt>
   121a0:	mov	r0, #0
   121a4:	pop	{r4, r6, r7, pc}
   121a8:	mov	r0, #0
   121ac:	pop	{r4, r6, r7, pc}
   121b0:	mov	r0, #0
   121b4:	pop	{r4, r6, r7, pc}
   121b8:	mov	r0, #0
   121bc:	pop	{r4, r6, r7, pc}
   121c0:	andeq	r7, r3, r8, asr #3
   121c4:	andeq	r5, r2, r0, ror #3
   121c8:	andeq	r0, r0, r7, asr #4
   121cc:	andeq	r5, r2, r8, ror r3
   121d0:	andeq	r5, r2, r8, lsl #7
   121d4:	push	{r4, lr}
   121d8:	ldr	r3, [pc, #24]	; 121f8 <__assert_fail@plt+0xca0>
   121dc:	ldrd	r0, [r3, #208]	; 0xd0
   121e0:	adds	r0, r0, #1
   121e4:	adc	r1, r1, #0
   121e8:	bl	120a8 <__assert_fail@plt+0xb50>
   121ec:	clz	r0, r0
   121f0:	lsr	r0, r0, #5
   121f4:	pop	{r4, pc}
   121f8:	andeq	r7, r3, r8, asr #3
   121fc:	ldr	r3, [pc, #96]	; 12264 <__assert_fail@plt+0xd0c>
   12200:	ldr	r3, [r3, #204]	; 0xcc
   12204:	cmp	r3, #0
   12208:	beq	1221c <__assert_fail@plt+0xcc4>
   1220c:	ldr	r3, [pc, #80]	; 12264 <__assert_fail@plt+0xd0c>
   12210:	ldr	r3, [r3, #204]	; 0xcc
   12214:	ldrd	r0, [r3, #16]
   12218:	bx	lr
   1221c:	push	{r4, lr}
   12220:	bl	11dcc <__assert_fail@plt+0x874>
   12224:	cmp	r0, #0
   12228:	beq	1223c <__assert_fail@plt+0xce4>
   1222c:	ldr	r3, [pc, #48]	; 12264 <__assert_fail@plt+0xd0c>
   12230:	ldr	r3, [r3, #204]	; 0xcc
   12234:	ldrd	r0, [r3, #16]
   12238:	pop	{r4, pc}
   1223c:	bl	1142c <__errno_location@plt>
   12240:	ldr	r4, [r0]
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #24]	; 12268 <__assert_fail@plt+0xd10>
   1224c:	mov	r0, #0
   12250:	bl	112d0 <dcgettext@plt>
   12254:	mov	r2, r0
   12258:	mov	r1, r4
   1225c:	mov	r0, #1
   12260:	bl	11384 <error@plt>
   12264:	andeq	r7, r3, r8, asr #3
   12268:	andeq	r5, r2, ip, lsl #7
   1226c:	push	{r4, r5, r6, lr}
   12270:	ldr	r3, [pc, #188]	; 12334 <__assert_fail@plt+0xddc>
   12274:	ldr	r0, [r3, #216]	; 0xd8
   12278:	cmp	r0, #0
   1227c:	beq	12290 <__assert_fail@plt+0xd38>
   12280:	bl	11bdc <__assert_fail@plt+0x684>
   12284:	mov	r2, #0
   12288:	ldr	r3, [pc, #164]	; 12334 <__assert_fail@plt+0xddc>
   1228c:	str	r2, [r3, #216]	; 0xd8
   12290:	ldr	r3, [pc, #156]	; 12334 <__assert_fail@plt+0xddc>
   12294:	ldr	r3, [r3, #204]	; 0xcc
   12298:	cmp	r3, #0
   1229c:	beq	12320 <__assert_fail@plt+0xdc8>
   122a0:	ldr	r0, [pc, #140]	; 12334 <__assert_fail@plt+0xddc>
   122a4:	ldr	r1, [r0, #204]	; 0xcc
   122a8:	ldrd	r2, [r1, #16]
   122ac:	ldrd	r4, [r0, #208]	; 0xd0
   122b0:	cmp	r4, r2
   122b4:	sbcs	r0, r5, r3
   122b8:	ldrlt	r0, [pc, #116]	; 12334 <__assert_fail@plt+0xddc>
   122bc:	strdlt	r2, [r0, #208]	; 0xd0
   122c0:	adds	r2, r2, #1
   122c4:	adc	r3, r3, #0
   122c8:	strd	r2, [r1, #16]
   122cc:	ldr	r2, [r1, #36]	; 0x24
   122d0:	ldr	r3, [r2, #8]
   122d4:	add	r3, r3, #1
   122d8:	add	r0, r2, r3, lsl #3
   122dc:	add	r0, r0, #4
   122e0:	str	r3, [r2, #8]
   122e4:	ldr	ip, [r2]
   122e8:	cmp	r3, ip
   122ec:	popne	{r4, r5, r6, pc}
   122f0:	ldr	r3, [r2, #652]	; 0x28c
   122f4:	str	r3, [r1, #36]	; 0x24
   122f8:	cmp	r3, #0
   122fc:	beq	1230c <__assert_fail@plt+0xdb4>
   12300:	ldr	r3, [r3]
   12304:	cmp	r3, #0
   12308:	popne	{r4, r5, r6, pc}
   1230c:	ldr	r3, [pc, #32]	; 12334 <__assert_fail@plt+0xddc>
   12310:	str	r1, [r3, #216]	; 0xd8
   12314:	ldr	r2, [r1, #40]	; 0x28
   12318:	str	r2, [r3, #204]	; 0xcc
   1231c:	pop	{r4, r5, r6, pc}
   12320:	bl	11dcc <__assert_fail@plt+0x874>
   12324:	cmp	r0, #0
   12328:	bne	122a0 <__assert_fail@plt+0xd48>
   1232c:	mov	r0, #0
   12330:	pop	{r4, r5, r6, pc}
   12334:	andeq	r7, r3, r8, asr #3
   12338:	push	{r4, lr}
   1233c:	b	12344 <__assert_fail@plt+0xdec>
   12340:	bl	11b44 <__assert_fail@plt+0x5ec>
   12344:	bl	1226c <__assert_fail@plt+0xd14>
   12348:	cmp	r0, #0
   1234c:	bne	12340 <__assert_fail@plt+0xde8>
   12350:	pop	{r4, pc}
   12354:	push	{r7, lr}
   12358:	sub	sp, sp, #32
   1235c:	mov	r9, r0
   12360:	mov	r4, r2
   12364:	mov	r5, r3
   12368:	ldr	r3, [pc, #192]	; 12430 <__assert_fail@plt+0xed8>
   1236c:	ldr	r6, [r3]
   12370:	mov	r2, #5
   12374:	ldr	r1, [pc, #184]	; 12434 <__assert_fail@plt+0xedc>
   12378:	mov	r0, #0
   1237c:	bl	112d0 <dcgettext@plt>
   12380:	mov	r7, r0
   12384:	ldr	r3, [pc, #172]	; 12438 <__assert_fail@plt+0xee0>
   12388:	ldr	r8, [r3]
   1238c:	ldr	r2, [r9, #24]
   12390:	ldr	r3, [pc, #164]	; 1243c <__assert_fail@plt+0xee4>
   12394:	ldr	r3, [r3, #220]	; 0xdc
   12398:	ldr	r0, [r3, r2, lsl #2]
   1239c:	bl	15864 <__assert_fail@plt+0x430c>
   123a0:	str	r0, [sp]
   123a4:	mov	r3, r8
   123a8:	mov	r2, r7
   123ac:	mov	r1, #1
   123b0:	mov	r0, r6
   123b4:	bl	1148c <__fprintf_chk@plt>
   123b8:	orrs	r3, r4, r5
   123bc:	beq	12410 <__assert_fail@plt+0xeb8>
   123c0:	ldr	r3, [pc, #104]	; 12430 <__assert_fail@plt+0xed8>
   123c4:	ldr	r6, [r3]
   123c8:	mov	r2, #5
   123cc:	ldr	r1, [pc, #108]	; 12440 <__assert_fail@plt+0xee8>
   123d0:	mov	r0, #0
   123d4:	bl	112d0 <dcgettext@plt>
   123d8:	mov	r7, r0
   123dc:	add	r2, sp, #8
   123e0:	mov	r0, r4
   123e4:	mov	r1, r5
   123e8:	bl	13c40 <__assert_fail@plt+0x26e8>
   123ec:	mov	r3, r0
   123f0:	mov	r2, r7
   123f4:	mov	r1, #1
   123f8:	mov	r0, r6
   123fc:	bl	1148c <__fprintf_chk@plt>
   12400:	ldrb	r3, [sp, #40]	; 0x28
   12404:	cmp	r3, #0
   12408:	beq	12424 <__assert_fail@plt+0xecc>
   1240c:	bl	117d4 <__assert_fail@plt+0x27c>
   12410:	ldr	r3, [pc, #24]	; 12430 <__assert_fail@plt+0xed8>
   12414:	ldr	r1, [r3]
   12418:	mov	r0, #10
   1241c:	bl	114ec <fputc@plt>
   12420:	b	12400 <__assert_fail@plt+0xea8>
   12424:	bl	12338 <__assert_fail@plt+0xde0>
   12428:	bl	11814 <__assert_fail@plt+0x2bc>
   1242c:	b	1240c <__assert_fail@plt+0xeb4>
   12430:			; <UNDEFINED> instruction: 0x000371b8
   12434:	andeq	r5, r2, r0, lsr #7
   12438:	andeq	r7, r3, r0, asr #5
   1243c:	andeq	r7, r3, r8, asr #3
   12440:	andeq	r5, r2, r0, asr #6
   12444:	push	{lr}		; (str lr, [sp, #-4]!)
   12448:	sub	sp, sp, #60	; 0x3c
   1244c:	subs	r6, r0, #0
   12450:	beq	1248c <__assert_fail@plt+0xf34>
   12454:	ldr	r3, [pc, #824]	; 12794 <__assert_fail@plt+0x123c>
   12458:	ldr	r4, [r3]
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #816]	; 12798 <__assert_fail@plt+0x1240>
   12464:	mov	r0, #0
   12468:	bl	112d0 <dcgettext@plt>
   1246c:	ldr	r3, [pc, #808]	; 1279c <__assert_fail@plt+0x1244>
   12470:	ldr	r3, [r3]
   12474:	mov	r2, r0
   12478:	mov	r1, #1
   1247c:	mov	r0, r4
   12480:	bl	1148c <__fprintf_chk@plt>
   12484:	mov	r0, r6
   12488:	bl	11408 <exit@plt>
   1248c:	mov	r2, #5
   12490:	ldr	r1, [pc, #776]	; 127a0 <__assert_fail@plt+0x1248>
   12494:	mov	r0, #0
   12498:	bl	112d0 <dcgettext@plt>
   1249c:	ldr	r3, [pc, #760]	; 1279c <__assert_fail@plt+0x1244>
   124a0:	ldr	r2, [r3]
   124a4:	mov	r1, r0
   124a8:	mov	r0, #1
   124ac:	bl	11474 <__printf_chk@plt>
   124b0:	mov	r2, #5
   124b4:	ldr	r1, [pc, #744]	; 127a4 <__assert_fail@plt+0x124c>
   124b8:	mov	r0, #0
   124bc:	bl	112d0 <dcgettext@plt>
   124c0:	ldr	r4, [pc, #736]	; 127a8 <__assert_fail@plt+0x1250>
   124c4:	ldr	r1, [r4]
   124c8:	bl	111bc <fputs_unlocked@plt>
   124cc:	mov	r2, #5
   124d0:	ldr	r1, [pc, #724]	; 127ac <__assert_fail@plt+0x1254>
   124d4:	mov	r0, #0
   124d8:	bl	112d0 <dcgettext@plt>
   124dc:	ldr	r1, [r4]
   124e0:	bl	111bc <fputs_unlocked@plt>
   124e4:	mov	r2, #5
   124e8:	ldr	r1, [pc, #704]	; 127b0 <__assert_fail@plt+0x1258>
   124ec:	mov	r0, #0
   124f0:	bl	112d0 <dcgettext@plt>
   124f4:	ldr	r1, [r4]
   124f8:	bl	111bc <fputs_unlocked@plt>
   124fc:	mov	r2, #5
   12500:	ldr	r1, [pc, #684]	; 127b4 <__assert_fail@plt+0x125c>
   12504:	mov	r0, #0
   12508:	bl	112d0 <dcgettext@plt>
   1250c:	ldr	r1, [r4]
   12510:	bl	111bc <fputs_unlocked@plt>
   12514:	mov	r2, #5
   12518:	ldr	r1, [pc, #664]	; 127b8 <__assert_fail@plt+0x1260>
   1251c:	mov	r0, #0
   12520:	bl	112d0 <dcgettext@plt>
   12524:	ldr	r1, [r4]
   12528:	bl	111bc <fputs_unlocked@plt>
   1252c:	mov	r2, #5
   12530:	ldr	r1, [pc, #644]	; 127bc <__assert_fail@plt+0x1264>
   12534:	mov	r0, #0
   12538:	bl	112d0 <dcgettext@plt>
   1253c:	ldr	r1, [r4]
   12540:	bl	111bc <fputs_unlocked@plt>
   12544:	mov	r2, #5
   12548:	ldr	r1, [pc, #624]	; 127c0 <__assert_fail@plt+0x1268>
   1254c:	mov	r0, #0
   12550:	bl	112d0 <dcgettext@plt>
   12554:	ldr	r1, [r4]
   12558:	bl	111bc <fputs_unlocked@plt>
   1255c:	mov	r2, #5
   12560:	ldr	r1, [pc, #604]	; 127c4 <__assert_fail@plt+0x126c>
   12564:	mov	r0, #0
   12568:	bl	112d0 <dcgettext@plt>
   1256c:	ldr	r1, [r4]
   12570:	bl	111bc <fputs_unlocked@plt>
   12574:	mov	r2, #5
   12578:	ldr	r1, [pc, #584]	; 127c8 <__assert_fail@plt+0x1270>
   1257c:	mov	r0, #0
   12580:	bl	112d0 <dcgettext@plt>
   12584:	ldr	r1, [r4]
   12588:	bl	111bc <fputs_unlocked@plt>
   1258c:	mov	ip, sp
   12590:	ldr	lr, [pc, #564]	; 127cc <__assert_fail@plt+0x1274>
   12594:	ldm	lr!, {r0, r1, r2, r3}
   12598:	stmia	ip!, {r0, r1, r2, r3}
   1259c:	ldm	lr!, {r0, r1, r2, r3}
   125a0:	stmia	ip!, {r0, r1, r2, r3}
   125a4:	ldm	lr!, {r0, r1, r2, r3}
   125a8:	stmia	ip!, {r0, r1, r2, r3}
   125ac:	ldm	lr, {r0, r1}
   125b0:	stm	ip, {r0, r1}
   125b4:	ldr	r1, [sp]
   125b8:	cmp	r1, #0
   125bc:	moveq	r4, sp
   125c0:	beq	125e8 <__assert_fail@plt+0x1090>
   125c4:	mov	r4, sp
   125c8:	ldr	r5, [pc, #512]	; 127d0 <__assert_fail@plt+0x1278>
   125cc:	mov	r0, r5
   125d0:	bl	111f8 <strcmp@plt>
   125d4:	cmp	r0, #0
   125d8:	beq	125e8 <__assert_fail@plt+0x1090>
   125dc:	ldr	r1, [r4, #8]!
   125e0:	cmp	r1, #0
   125e4:	bne	125cc <__assert_fail@plt+0x1074>
   125e8:	ldr	r4, [r4, #4]
   125ec:	cmp	r4, #0
   125f0:	beq	12704 <__assert_fail@plt+0x11ac>
   125f4:	mov	r2, #5
   125f8:	ldr	r1, [pc, #468]	; 127d4 <__assert_fail@plt+0x127c>
   125fc:	mov	r0, #0
   12600:	bl	112d0 <dcgettext@plt>
   12604:	ldr	r3, [pc, #460]	; 127d8 <__assert_fail@plt+0x1280>
   12608:	ldr	r2, [pc, #460]	; 127dc <__assert_fail@plt+0x1284>
   1260c:	mov	r1, r0
   12610:	mov	r0, #1
   12614:	bl	11474 <__printf_chk@plt>
   12618:	mov	r1, #0
   1261c:	mov	r0, #5
   12620:	bl	114bc <setlocale@plt>
   12624:	cmp	r0, #0
   12628:	beq	12640 <__assert_fail@plt+0x10e8>
   1262c:	mov	r2, #3
   12630:	ldr	r1, [pc, #424]	; 127e0 <__assert_fail@plt+0x1288>
   12634:	bl	11528 <strncmp@plt>
   12638:	cmp	r0, #0
   1263c:	bne	126a0 <__assert_fail@plt+0x1148>
   12640:	mov	r2, #5
   12644:	ldr	r1, [pc, #408]	; 127e4 <__assert_fail@plt+0x128c>
   12648:	mov	r0, #0
   1264c:	bl	112d0 <dcgettext@plt>
   12650:	ldr	r5, [pc, #376]	; 127d0 <__assert_fail@plt+0x1278>
   12654:	mov	r3, r5
   12658:	ldr	r2, [pc, #376]	; 127d8 <__assert_fail@plt+0x1280>
   1265c:	mov	r1, r0
   12660:	mov	r0, #1
   12664:	bl	11474 <__printf_chk@plt>
   12668:	mov	r2, #5
   1266c:	ldr	r1, [pc, #372]	; 127e8 <__assert_fail@plt+0x1290>
   12670:	mov	r0, #0
   12674:	bl	112d0 <dcgettext@plt>
   12678:	mov	r1, r0
   1267c:	ldr	r2, [pc, #360]	; 127ec <__assert_fail@plt+0x1294>
   12680:	ldr	r3, [pc, #360]	; 127f0 <__assert_fail@plt+0x1298>
   12684:	cmp	r4, r5
   12688:	movne	r3, r2
   1268c:	mov	r2, r4
   12690:	mov	r0, #1
   12694:	bl	11474 <__printf_chk@plt>
   12698:	b	12484 <__assert_fail@plt+0xf2c>
   1269c:	ldr	r4, [pc, #300]	; 127d0 <__assert_fail@plt+0x1278>
   126a0:	mov	r2, #5
   126a4:	ldr	r1, [pc, #328]	; 127f4 <__assert_fail@plt+0x129c>
   126a8:	mov	r0, #0
   126ac:	bl	112d0 <dcgettext@plt>
   126b0:	ldr	r3, [pc, #240]	; 127a8 <__assert_fail@plt+0x1250>
   126b4:	ldr	r1, [r3]
   126b8:	bl	111bc <fputs_unlocked@plt>
   126bc:	b	12640 <__assert_fail@plt+0x10e8>
   126c0:	mov	r2, #5
   126c4:	ldr	r1, [pc, #280]	; 127e4 <__assert_fail@plt+0x128c>
   126c8:	mov	r0, #0
   126cc:	bl	112d0 <dcgettext@plt>
   126d0:	ldr	r4, [pc, #248]	; 127d0 <__assert_fail@plt+0x1278>
   126d4:	mov	r3, r4
   126d8:	ldr	r2, [pc, #248]	; 127d8 <__assert_fail@plt+0x1280>
   126dc:	mov	r1, r0
   126e0:	mov	r0, #1
   126e4:	bl	11474 <__printf_chk@plt>
   126e8:	mov	r2, #5
   126ec:	ldr	r1, [pc, #244]	; 127e8 <__assert_fail@plt+0x1290>
   126f0:	mov	r0, #0
   126f4:	bl	112d0 <dcgettext@plt>
   126f8:	mov	r1, r0
   126fc:	ldr	r3, [pc, #236]	; 127f0 <__assert_fail@plt+0x1298>
   12700:	b	1268c <__assert_fail@plt+0x1134>
   12704:	mov	r2, #5
   12708:	ldr	r1, [pc, #196]	; 127d4 <__assert_fail@plt+0x127c>
   1270c:	mov	r0, #0
   12710:	bl	112d0 <dcgettext@plt>
   12714:	ldr	r3, [pc, #188]	; 127d8 <__assert_fail@plt+0x1280>
   12718:	ldr	r2, [pc, #188]	; 127dc <__assert_fail@plt+0x1284>
   1271c:	mov	r1, r0
   12720:	mov	r0, #1
   12724:	bl	11474 <__printf_chk@plt>
   12728:	mov	r1, #0
   1272c:	mov	r0, #5
   12730:	bl	114bc <setlocale@plt>
   12734:	cmp	r0, #0
   12738:	beq	126c0 <__assert_fail@plt+0x1168>
   1273c:	mov	r2, #3
   12740:	ldr	r1, [pc, #152]	; 127e0 <__assert_fail@plt+0x1288>
   12744:	bl	11528 <strncmp@plt>
   12748:	cmp	r0, #0
   1274c:	bne	1269c <__assert_fail@plt+0x1144>
   12750:	mov	r2, #5
   12754:	ldr	r1, [pc, #136]	; 127e4 <__assert_fail@plt+0x128c>
   12758:	mov	r0, #0
   1275c:	bl	112d0 <dcgettext@plt>
   12760:	ldr	r4, [pc, #104]	; 127d0 <__assert_fail@plt+0x1278>
   12764:	mov	r3, r4
   12768:	ldr	r2, [pc, #104]	; 127d8 <__assert_fail@plt+0x1280>
   1276c:	mov	r1, r0
   12770:	mov	r0, #1
   12774:	bl	11474 <__printf_chk@plt>
   12778:	mov	r2, #5
   1277c:	ldr	r1, [pc, #100]	; 127e8 <__assert_fail@plt+0x1290>
   12780:	mov	r0, #0
   12784:	bl	112d0 <dcgettext@plt>
   12788:	mov	r1, r0
   1278c:	ldr	r3, [pc, #92]	; 127f0 <__assert_fail@plt+0x1298>
   12790:	b	1268c <__assert_fail@plt+0x1134>
   12794:			; <UNDEFINED> instruction: 0x000371b8
   12798:	andeq	r5, r2, r0, asr #7
   1279c:	andeq	r7, r3, r0, asr #5
   127a0:	andeq	r5, r2, r8, ror #7
   127a4:	andeq	r5, r2, r0, lsl r4
   127a8:			; <UNDEFINED> instruction: 0x000371bc
   127ac:	muleq	r2, r8, r4
   127b0:			; <UNDEFINED> instruction: 0x000254bc
   127b4:	andeq	r5, r2, r8, lsl #10
   127b8:	andeq	r5, r2, r4, asr #11
   127bc:	andeq	r5, r2, r8, lsl #12
   127c0:	ldrdeq	r5, [r2], -r0
   127c4:	andeq	r5, r2, r0, lsl #14
   127c8:	andeq	r5, r2, r8, lsr r7
   127cc:	andeq	r5, r2, ip, ror #3
   127d0:			; <UNDEFINED> instruction: 0x000253b8
   127d4:	strdeq	r5, [r2], -r0
   127d8:	andeq	r5, r2, r8, lsl #18
   127dc:	andeq	r5, r2, r0, lsr r9
   127e0:	andeq	r5, r2, r0, asr #18
   127e4:	andeq	r5, r2, ip, lsl #19
   127e8:	andeq	r5, r2, r8, lsr #19
   127ec:	strdeq	r5, [r2], -ip
   127f0:	andeq	r5, r2, ip, lsr sp
   127f4:	andeq	r5, r2, r4, asr #18
   127f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127fc:	sub	sp, sp, #204	; 0xcc
   12800:	mov	fp, r0
   12804:	mov	r4, r1
   12808:	ldr	r0, [r1]
   1280c:	bl	13d14 <__assert_fail@plt+0x27bc>
   12810:	ldr	r1, [pc, #3924]	; 1376c <__assert_fail@plt+0x2214>
   12814:	mov	r0, #6
   12818:	bl	114bc <setlocale@plt>
   1281c:	ldr	r5, [pc, #3916]	; 13770 <__assert_fail@plt+0x2218>
   12820:	ldr	r1, [pc, #3916]	; 13774 <__assert_fail@plt+0x221c>
   12824:	mov	r0, r5
   12828:	bl	11510 <bindtextdomain@plt>
   1282c:	mov	r0, r5
   12830:	bl	1130c <textdomain@plt>
   12834:	ldr	r0, [pc, #3900]	; 13778 <__assert_fail@plt+0x2220>
   12838:	bl	251bc <__assert_fail@plt+0x13c64>
   1283c:	ldr	r3, [pc, #3896]	; 1377c <__assert_fail@plt+0x2224>
   12840:	str	r4, [r3, #220]	; 0xdc
   12844:	mov	r2, #0
   12848:	str	r2, [r3, #180]	; 0xb4
   1284c:	str	r2, [r3, #172]	; 0xac
   12850:	strb	r2, [r3, #169]	; 0xa9
   12854:	mov	r1, #1
   12858:	strb	r1, [r3, #12]
   1285c:	strb	r2, [r3, #224]	; 0xe0
   12860:	ldr	r2, [pc, #3864]	; 13780 <__assert_fail@plt+0x2228>
   12864:	str	r2, [r3, #4]
   12868:	ldr	r6, [pc, #3860]	; 13784 <__assert_fail@plt+0x222c>
   1286c:	ldr	r5, [pc, #3860]	; 13788 <__assert_fail@plt+0x2230>
   12870:	mov	r7, r3
   12874:	ldr	r8, [pc, #3856]	; 1378c <__assert_fail@plt+0x2234>
   12878:	ldr	sl, [pc, #3856]	; 13790 <__assert_fail@plt+0x2238>
   1287c:	ldr	r9, [pc, #3816]	; 1376c <__assert_fail@plt+0x2214>
   12880:	mov	r3, #0
   12884:	str	r3, [sp]
   12888:	mov	r3, r6
   1288c:	mov	r2, r5
   12890:	mov	r1, r4
   12894:	mov	r0, fp
   12898:	bl	113f0 <getopt_long@plt>
   1289c:	cmn	r0, #1
   128a0:	beq	129e4 <__assert_fail@plt+0x148c>
   128a4:	cmp	r0, #107	; 0x6b
   128a8:	beq	129bc <__assert_fail@plt+0x1464>
   128ac:	bgt	1291c <__assert_fail@plt+0x13c4>
   128b0:	cmn	r0, #2
   128b4:	beq	129d4 <__assert_fail@plt+0x147c>
   128b8:	ble	128d8 <__assert_fail@plt+0x1380>
   128bc:	cmp	r0, #98	; 0x62
   128c0:	beq	129b0 <__assert_fail@plt+0x1458>
   128c4:	cmp	r0, #102	; 0x66
   128c8:	bne	129dc <__assert_fail@plt+0x1484>
   128cc:	ldr	r3, [r8]
   128d0:	str	r3, [r7, #4]
   128d4:	b	12880 <__assert_fail@plt+0x1328>
   128d8:	cmn	r0, #3
   128dc:	bne	129dc <__assert_fail@plt+0x1484>
   128e0:	mov	r4, #0
   128e4:	str	r4, [sp, #8]
   128e8:	ldr	r3, [pc, #3748]	; 13794 <__assert_fail@plt+0x223c>
   128ec:	str	r3, [sp, #4]
   128f0:	ldr	r3, [pc, #3744]	; 13798 <__assert_fail@plt+0x2240>
   128f4:	str	r3, [sp]
   128f8:	ldr	r3, [pc, #3740]	; 1379c <__assert_fail@plt+0x2244>
   128fc:	ldr	r3, [r3]
   12900:	ldr	r2, [pc, #3736]	; 137a0 <__assert_fail@plt+0x2248>
   12904:	ldr	r1, [pc, #3736]	; 137a4 <__assert_fail@plt+0x224c>
   12908:	ldr	r0, [pc, #3736]	; 137a8 <__assert_fail@plt+0x2250>
   1290c:	ldr	r0, [r0]
   12910:	bl	2310c <__assert_fail@plt+0x11bb4>
   12914:	mov	r0, r4
   12918:	bl	11408 <exit@plt>
   1291c:	cmp	r0, #115	; 0x73
   12920:	beq	129a4 <__assert_fail@plt+0x144c>
   12924:	ble	12944 <__assert_fail@plt+0x13ec>
   12928:	cmp	r0, #122	; 0x7a
   1292c:	beq	129c8 <__assert_fail@plt+0x1470>
   12930:	cmp	r0, #256	; 0x100
   12934:	bne	129dc <__assert_fail@plt+0x1484>
   12938:	mov	r3, #1
   1293c:	strb	r3, [r7, #224]	; 0xe0
   12940:	b	12880 <__assert_fail@plt+0x1328>
   12944:	cmp	r0, #110	; 0x6e
   12948:	bne	1299c <__assert_fail@plt+0x1444>
   1294c:	ldr	r3, [r8]
   12950:	str	r3, [sp, #24]
   12954:	mov	r2, #5
   12958:	mov	r1, sl
   1295c:	mov	r0, #0
   12960:	bl	112d0 <dcgettext@plt>
   12964:	mov	r3, #0
   12968:	str	r3, [sp, #16]
   1296c:	str	r0, [sp, #12]
   12970:	str	r9, [sp, #8]
   12974:	mvn	r2, #-2147483648	; 0x80000000
   12978:	mov	r3, #0
   1297c:	strd	r2, [sp]
   12980:	mov	r2, #0
   12984:	mov	r3, #0
   12988:	ldr	r0, [sp, #24]
   1298c:	bl	238d0 <__assert_fail@plt+0x12378>
   12990:	ldr	r3, [pc, #3604]	; 137ac <__assert_fail@plt+0x2254>
   12994:	str	r0, [r3]
   12998:	b	12880 <__assert_fail@plt+0x1328>
   1299c:	cmp	r0, #113	; 0x71
   129a0:	bne	129dc <__assert_fail@plt+0x1484>
   129a4:	mov	r3, #1
   129a8:	strb	r3, [r7, #169]	; 0xa9
   129ac:	b	12880 <__assert_fail@plt+0x1328>
   129b0:	ldr	r3, [r8]
   129b4:	str	r3, [r7, #8]
   129b8:	b	12880 <__assert_fail@plt+0x1328>
   129bc:	mov	r3, #0
   129c0:	strb	r3, [r7, #12]
   129c4:	b	12880 <__assert_fail@plt+0x1328>
   129c8:	mov	r3, #1
   129cc:	strb	r3, [r7, #168]	; 0xa8
   129d0:	b	12880 <__assert_fail@plt+0x1328>
   129d4:	mov	r0, #0
   129d8:	bl	12444 <__assert_fail@plt+0xeec>
   129dc:	mov	r0, #1
   129e0:	bl	12444 <__assert_fail@plt+0xeec>
   129e4:	ldr	r3, [pc, #3524]	; 137b0 <__assert_fail@plt+0x2258>
   129e8:	ldr	r3, [r3]
   129ec:	sub	r2, fp, r3
   129f0:	cmp	r2, #1
   129f4:	ble	12a30 <__assert_fail@plt+0x14d8>
   129f8:	ldr	r5, [pc, #3452]	; 1377c <__assert_fail@plt+0x2224>
   129fc:	ldr	r0, [r5, #4]
   12a00:	bl	11414 <strlen@plt>
   12a04:	mov	r6, r0
   12a08:	ldr	r3, [r5, #8]
   12a0c:	cmp	r3, #0
   12a10:	beq	12d08 <__assert_fail@plt+0x17b0>
   12a14:	ldr	r0, [r5, #8]
   12a18:	mov	r3, r0
   12a1c:	mov	r5, #0
   12a20:	mov	ip, #1
   12a24:	mov	r9, #2
   12a28:	mov	lr, #100	; 0x64
   12a2c:	b	12b9c <__assert_fail@plt+0x1644>
   12a30:	cmp	fp, r3
   12a34:	bgt	12a60 <__assert_fail@plt+0x1508>
   12a38:	mov	r2, #5
   12a3c:	ldr	r1, [pc, #3440]	; 137b4 <__assert_fail@plt+0x225c>
   12a40:	mov	r0, #0
   12a44:	bl	112d0 <dcgettext@plt>
   12a48:	mov	r2, r0
   12a4c:	mov	r1, #0
   12a50:	mov	r0, r1
   12a54:	bl	11384 <error@plt>
   12a58:	mov	r0, #1
   12a5c:	bl	12444 <__assert_fail@plt+0xeec>
   12a60:	mov	r2, #5
   12a64:	ldr	r1, [pc, #3404]	; 137b8 <__assert_fail@plt+0x2260>
   12a68:	mov	r0, #0
   12a6c:	bl	112d0 <dcgettext@plt>
   12a70:	mov	r5, r0
   12a74:	sub	r3, fp, #-1073741823	; 0xc0000001
   12a78:	ldr	r0, [r4, r3, lsl #2]
   12a7c:	bl	15864 <__assert_fail@plt+0x430c>
   12a80:	mov	r3, r0
   12a84:	mov	r2, r5
   12a88:	mov	r1, #0
   12a8c:	mov	r0, r1
   12a90:	bl	11384 <error@plt>
   12a94:	b	12a58 <__assert_fail@plt+0x1500>
   12a98:	mov	r2, #5
   12a9c:	ldr	r1, [pc, #3352]	; 137bc <__assert_fail@plt+0x2264>
   12aa0:	mov	r0, #0
   12aa4:	bl	112d0 <dcgettext@plt>
   12aa8:	mov	r2, r0
   12aac:	mov	r1, #0
   12ab0:	mov	r0, #1
   12ab4:	bl	11384 <error@plt>
   12ab8:	cmp	r2, #45	; 0x2d
   12abc:	beq	12bcc <__assert_fail@plt+0x1674>
   12ac0:	cmp	r2, #48	; 0x30
   12ac4:	beq	12bcc <__assert_fail@plt+0x1674>
   12ac8:	sub	r1, r2, #48	; 0x30
   12acc:	cmp	r1, #9
   12ad0:	bhi	12ae4 <__assert_fail@plt+0x158c>
   12ad4:	ldrb	r2, [r3, #1]!
   12ad8:	sub	r1, r2, #48	; 0x30
   12adc:	cmp	r1, #9
   12ae0:	bls	12ad4 <__assert_fail@plt+0x157c>
   12ae4:	cmp	r2, #46	; 0x2e
   12ae8:	beq	12b5c <__assert_fail@plt+0x1604>
   12aec:	ldrb	r7, [r3]
   12af0:	mov	r8, r7
   12af4:	cmp	r7, #105	; 0x69
   12af8:	beq	12c40 <__assert_fail@plt+0x16e8>
   12afc:	bhi	12b70 <__assert_fail@plt+0x1618>
   12b00:	cmp	r7, #88	; 0x58
   12b04:	beq	12b88 <__assert_fail@plt+0x1630>
   12b08:	cmp	r7, #100	; 0x64
   12b0c:	beq	12c40 <__assert_fail@plt+0x16e8>
   12b10:	cmp	r7, #0
   12b14:	beq	12bfc <__assert_fail@plt+0x16a4>
   12b18:	bl	113fc <__ctype_b_loc@plt>
   12b1c:	ldr	r3, [r0]
   12b20:	lsl	r7, r7, #1
   12b24:	ldrh	r3, [r3, r7]
   12b28:	tst	r3, #16384	; 0x4000
   12b2c:	beq	12c1c <__assert_fail@plt+0x16c4>
   12b30:	mov	r2, #5
   12b34:	ldr	r1, [pc, #3204]	; 137c0 <__assert_fail@plt+0x2268>
   12b38:	mov	r0, #0
   12b3c:	bl	112d0 <dcgettext@plt>
   12b40:	mov	r3, r8
   12b44:	mov	r2, r0
   12b48:	mov	r1, #0
   12b4c:	mov	r0, #1
   12b50:	bl	11384 <error@plt>
   12b54:	orr	r5, r5, #1
   12b58:	b	12bcc <__assert_fail@plt+0x1674>
   12b5c:	ldrb	r2, [r3, #1]!
   12b60:	sub	r2, r2, #48	; 0x30
   12b64:	cmp	r2, #9
   12b68:	bls	12b5c <__assert_fail@plt+0x1604>
   12b6c:	b	12aec <__assert_fail@plt+0x1594>
   12b70:	cmp	r7, #117	; 0x75
   12b74:	beq	12bf0 <__assert_fail@plt+0x1698>
   12b78:	cmp	r7, #120	; 0x78
   12b7c:	beq	12b88 <__assert_fail@plt+0x1630>
   12b80:	cmp	r7, #111	; 0x6f
   12b84:	bne	12b18 <__assert_fail@plt+0x15c0>
   12b88:	mov	r2, r9
   12b8c:	bics	r5, r5, r2
   12b90:	bne	12c48 <__assert_fail@plt+0x16f0>
   12b94:	mov	r5, ip
   12b98:	add	r3, r3, #1
   12b9c:	ldrb	r2, [r3]
   12ba0:	cmp	r2, #0
   12ba4:	beq	12c84 <__assert_fail@plt+0x172c>
   12ba8:	cmp	r2, #37	; 0x25
   12bac:	bne	12b98 <__assert_fail@plt+0x1640>
   12bb0:	add	r1, r3, #1
   12bb4:	ldrb	r3, [r3, #1]
   12bb8:	cmp	r3, #37	; 0x25
   12bbc:	beq	12c7c <__assert_fail@plt+0x1724>
   12bc0:	cmp	r5, #0
   12bc4:	bne	12a98 <__assert_fail@plt+0x1540>
   12bc8:	mov	r5, #0
   12bcc:	mov	r3, r1
   12bd0:	ldrb	r2, [r1], #1
   12bd4:	cmp	r2, #39	; 0x27
   12bd8:	beq	12b54 <__assert_fail@plt+0x15fc>
   12bdc:	bhi	12ab8 <__assert_fail@plt+0x1560>
   12be0:	cmp	r2, #35	; 0x23
   12be4:	bne	12ac8 <__assert_fail@plt+0x1570>
   12be8:	orr	r5, r5, #2
   12bec:	b	12bcc <__assert_fail@plt+0x1674>
   12bf0:	strb	lr, [r3]
   12bf4:	mov	r2, ip
   12bf8:	b	12b8c <__assert_fail@plt+0x1634>
   12bfc:	mov	r2, #5
   12c00:	ldr	r1, [pc, #3004]	; 137c4 <__assert_fail@plt+0x226c>
   12c04:	mov	r0, #0
   12c08:	bl	112d0 <dcgettext@plt>
   12c0c:	mov	r2, r0
   12c10:	mov	r1, #0
   12c14:	mov	r0, #1
   12c18:	bl	11384 <error@plt>
   12c1c:	mov	r2, #5
   12c20:	ldr	r1, [pc, #2976]	; 137c8 <__assert_fail@plt+0x2270>
   12c24:	mov	r0, #0
   12c28:	bl	112d0 <dcgettext@plt>
   12c2c:	mov	r3, r8
   12c30:	mov	r2, r0
   12c34:	mov	r1, #0
   12c38:	mov	r0, #1
   12c3c:	bl	11384 <error@plt>
   12c40:	mov	r2, ip
   12c44:	b	12b8c <__assert_fail@plt+0x1634>
   12c48:	mov	r2, #5
   12c4c:	ldr	r1, [pc, #2936]	; 137cc <__assert_fail@plt+0x2274>
   12c50:	mov	r0, #0
   12c54:	bl	112d0 <dcgettext@plt>
   12c58:	and	r3, r5, #2
   12c5c:	str	r8, [sp]
   12c60:	cmp	r3, #0
   12c64:	movne	r3, #35	; 0x23
   12c68:	moveq	r3, #39	; 0x27
   12c6c:	mov	r2, r0
   12c70:	mov	r1, #0
   12c74:	mov	r0, #1
   12c78:	bl	11384 <error@plt>
   12c7c:	mov	r3, r1
   12c80:	b	12b98 <__assert_fail@plt+0x1640>
   12c84:	cmp	r5, #0
   12c88:	beq	12ce4 <__assert_fail@plt+0x178c>
   12c8c:	mvn	r3, #-2147483648	; 0x80000000
   12c90:	str	r3, [sp, #4]
   12c94:	str	r0, [sp]
   12c98:	mvn	r3, #0
   12c9c:	mov	r2, #1
   12ca0:	mov	r1, #0
   12ca4:	mov	r0, r1
   12ca8:	bl	1154c <__snprintf_chk@plt>
   12cac:	cmp	r0, #0
   12cb0:	blt	12d04 <__assert_fail@plt+0x17ac>
   12cb4:	adds	r2, r0, #1
   12cb8:	bmi	12d24 <__assert_fail@plt+0x17cc>
   12cbc:	cmp	r6, #0
   12cc0:	blt	12d44 <__assert_fail@plt+0x17ec>
   12cc4:	mvn	r3, #-2147483647	; 0x80000001
   12cc8:	sub	r3, r3, r0
   12ccc:	cmp	r6, r3
   12cd0:	movle	r3, #0
   12cd4:	movgt	r3, #1
   12cd8:	cmp	r3, #0
   12cdc:	beq	12d58 <__assert_fail@plt+0x1800>
   12ce0:	bl	11d98 <__assert_fail@plt+0x840>
   12ce4:	mov	r2, #5
   12ce8:	ldr	r1, [pc, #2784]	; 137d0 <__assert_fail@plt+0x2278>
   12cec:	mov	r0, #0
   12cf0:	bl	112d0 <dcgettext@plt>
   12cf4:	mov	r2, r0
   12cf8:	mov	r1, #0
   12cfc:	mov	r0, #1
   12d00:	bl	11384 <error@plt>
   12d04:	bl	11d98 <__assert_fail@plt+0x840>
   12d08:	ldr	r3, [pc, #2716]	; 137ac <__assert_fail@plt+0x2254>
   12d0c:	ldr	r3, [r3]
   12d10:	cmp	r3, #10
   12d14:	bls	12d38 <__assert_fail@plt+0x17e0>
   12d18:	ldr	r3, [pc, #2700]	; 137ac <__assert_fail@plt+0x2254>
   12d1c:	ldr	r0, [r3]
   12d20:	b	12cb4 <__assert_fail@plt+0x175c>
   12d24:	rsb	r3, r2, #-2147483648	; 0x80000000
   12d28:	cmp	r6, r3
   12d2c:	movge	r3, #0
   12d30:	movlt	r3, #1
   12d34:	b	12cd8 <__assert_fail@plt+0x1780>
   12d38:	mov	r2, #12
   12d3c:	mov	r0, #11
   12d40:	b	12cbc <__assert_fail@plt+0x1764>
   12d44:	rsb	r3, r6, #-2147483648	; 0x80000000
   12d48:	cmp	r3, r2
   12d4c:	movle	r3, #0
   12d50:	movgt	r3, #1
   12d54:	b	12cd8 <__assert_fail@plt+0x1780>
   12d58:	add	r6, r6, #1
   12d5c:	add	r0, r6, r0
   12d60:	bl	231ec <__assert_fail@plt+0x11c94>
   12d64:	ldr	r3, [pc, #2576]	; 1377c <__assert_fail@plt+0x2224>
   12d68:	str	r0, [r3]
   12d6c:	ldr	r2, [pc, #2620]	; 137b0 <__assert_fail@plt+0x2258>
   12d70:	ldr	r3, [r2]
   12d74:	add	r1, r3, #1
   12d78:	str	r1, [r2]
   12d7c:	ldr	r5, [r4, r3, lsl #2]
   12d80:	ldr	r1, [pc, #2636]	; 137d4 <__assert_fail@plt+0x227c>
   12d84:	mov	r0, r5
   12d88:	bl	111f8 <strcmp@plt>
   12d8c:	cmp	r0, #0
   12d90:	bne	12dc0 <__assert_fail@plt+0x1868>
   12d94:	ldr	r3, [pc, #2580]	; 137b0 <__assert_fail@plt+0x2258>
   12d98:	ldr	r6, [r3]
   12d9c:	cmp	fp, r6
   12da0:	bgt	12f14 <__assert_fail@plt+0x19bc>
   12da4:	ldr	r0, [pc, #2604]	; 137d8 <__assert_fail@plt+0x2280>
   12da8:	bl	114c8 <sigemptyset@plt>
   12dac:	mov	r4, #0
   12db0:	ldr	r7, [pc, #2596]	; 137dc <__assert_fail@plt+0x2284>
   12db4:	mov	r6, r4
   12db8:	ldr	r8, [pc, #2584]	; 137d8 <__assert_fail@plt+0x2280>
   12dbc:	b	131f0 <__assert_fail@plt+0x1c98>
   12dc0:	mov	r3, #0
   12dc4:	mov	r2, r3
   12dc8:	mov	r1, r5
   12dcc:	mov	r0, r3
   12dd0:	bl	139dc <__assert_fail@plt+0x2484>
   12dd4:	cmp	r0, #0
   12dd8:	bge	12d94 <__assert_fail@plt+0x183c>
   12ddc:	bl	1142c <__errno_location@plt>
   12de0:	ldr	r4, [r0]
   12de4:	mov	r2, #5
   12de8:	ldr	r1, [pc, #2544]	; 137e0 <__assert_fail@plt+0x2288>
   12dec:	mov	r0, #0
   12df0:	bl	112d0 <dcgettext@plt>
   12df4:	mov	r6, r0
   12df8:	mov	r1, r5
   12dfc:	mov	r0, #4
   12e00:	bl	15630 <__assert_fail@plt+0x40d8>
   12e04:	mov	r3, r0
   12e08:	mov	r2, r6
   12e0c:	mov	r1, r4
   12e10:	mov	r0, #1
   12e14:	bl	11384 <error@plt>
   12e18:	mov	r2, #5
   12e1c:	ldr	r1, [pc, #2496]	; 137e4 <__assert_fail@plt+0x228c>
   12e20:	bl	112d0 <dcgettext@plt>
   12e24:	str	r5, [sp]
   12e28:	mov	r3, r8
   12e2c:	mov	r2, r0
   12e30:	mov	r1, #0
   12e34:	mov	r0, #1
   12e38:	bl	11384 <error@plt>
   12e3c:	mov	r9, r0
   12e40:	mov	r2, #5
   12e44:	ldr	r1, [pc, #2460]	; 137e8 <__assert_fail@plt+0x2290>
   12e48:	mov	r0, #0
   12e4c:	bl	112d0 <dcgettext@plt>
   12e50:	mov	r4, r0
   12e54:	mov	r0, r8
   12e58:	bl	15864 <__assert_fail@plt+0x430c>
   12e5c:	str	r9, [sp]
   12e60:	mov	r3, r0
   12e64:	mov	r2, r4
   12e68:	mov	r1, #0
   12e6c:	mov	r0, r1
   12e70:	bl	11384 <error@plt>
   12e74:	bl	117d4 <__assert_fail@plt+0x27c>
   12e78:	bl	11ab8 <__assert_fail@plt+0x560>
   12e7c:	mov	r5, r0
   12e80:	str	r6, [r0, #24]
   12e84:	ldr	r3, [pc, #2272]	; 1376c <__assert_fail@plt+0x2214>
   12e88:	str	r3, [sp]
   12e8c:	add	r3, sp, #48	; 0x30
   12e90:	mov	r2, #10
   12e94:	mov	r1, #0
   12e98:	ldr	r0, [r4, r6, lsl #2]
   12e9c:	bl	23ff8 <__assert_fail@plt+0x12aa0>
   12ea0:	cmp	r0, #0
   12ea4:	bne	13014 <__assert_fail@plt+0x1abc>
   12ea8:	ldrd	r2, [sp, #48]	; 0x30
   12eac:	cmp	r2, #0
   12eb0:	sbcs	r1, r3, #0
   12eb4:	blt	13014 <__assert_fail@plt+0x1abc>
   12eb8:	orrs	r1, r2, r3
   12ebc:	beq	13044 <__assert_fail@plt+0x1aec>
   12ec0:	ldr	r1, [pc, #2228]	; 1377c <__assert_fail@plt+0x2224>
   12ec4:	ldrd	r0, [r1, #232]	; 0xe8
   12ec8:	cmp	r3, r1
   12ecc:	cmpeq	r2, r0
   12ed0:	bcc	13068 <__assert_fail@plt+0x1b10>
   12ed4:	cmp	r3, r1
   12ed8:	cmpeq	r2, r0
   12edc:	beq	130b0 <__assert_fail@plt+0x1b58>
   12ee0:	ldrd	r2, [sp, #48]	; 0x30
   12ee4:	ldr	r1, [pc, #2192]	; 1377c <__assert_fail@plt+0x2224>
   12ee8:	strd	r2, [r1, #232]	; 0xe8
   12eec:	strd	r2, [r5, #8]
   12ef0:	add	r3, r6, #1
   12ef4:	cmp	fp, r3
   12ef8:	ble	12da4 <__assert_fail@plt+0x184c>
   12efc:	add	r7, r7, #4
   12f00:	ldr	r8, [r4, r7]
   12f04:	ldrb	r2, [r8]
   12f08:	cmp	r2, #123	; 0x7b
   12f0c:	beq	130e4 <__assert_fail@plt+0x1b8c>
   12f10:	mov	r6, r3
   12f14:	lsl	r7, r6, #2
   12f18:	add	sl, r4, r7
   12f1c:	ldr	r8, [r4, r6, lsl #2]
   12f20:	ldrb	r1, [r8]
   12f24:	cmp	r1, #37	; 0x25
   12f28:	movne	r9, #0
   12f2c:	moveq	r9, #1
   12f30:	cmp	r1, #37	; 0x25
   12f34:	cmpne	r1, #47	; 0x2f
   12f38:	bne	12e78 <__assert_fail@plt+0x1920>
   12f3c:	add	r3, r8, #1
   12f40:	str	r3, [sp, #24]
   12f44:	mov	r5, r1
   12f48:	mov	r0, r3
   12f4c:	bl	114d4 <strrchr@plt>
   12f50:	subs	sl, r0, #0
   12f54:	beq	12e18 <__assert_fail@plt+0x18c0>
   12f58:	bl	11ab8 <__assert_fail@plt+0x560>
   12f5c:	mov	r5, r0
   12f60:	str	r6, [r0, #24]
   12f64:	strb	r9, [r0, #29]
   12f68:	mov	r3, #1
   12f6c:	strb	r3, [r0, #30]
   12f70:	mov	r9, #0
   12f74:	str	r9, [r0, #32]
   12f78:	str	r9, [r0, #36]	; 0x24
   12f7c:	mov	r0, #256	; 0x100
   12f80:	bl	231d8 <__assert_fail@plt+0x11c80>
   12f84:	str	r0, [r5, #48]	; 0x30
   12f88:	str	r9, [r5, #52]	; 0x34
   12f8c:	ldr	r3, [pc, #2136]	; 137ec <__assert_fail@plt+0x2294>
   12f90:	ldr	r2, [pc, #2136]	; 137f0 <__assert_fail@plt+0x2298>
   12f94:	str	r2, [r3]
   12f98:	sub	r1, sl, r8
   12f9c:	add	r2, r5, #32
   12fa0:	sub	r1, r1, #1
   12fa4:	ldr	r0, [sp, #24]
   12fa8:	bl	221a8 <__assert_fail@plt+0x10c50>
   12fac:	cmp	r0, #0
   12fb0:	bne	12e3c <__assert_fail@plt+0x18e4>
   12fb4:	ldrb	r3, [sl, #1]
   12fb8:	cmp	r3, #0
   12fbc:	beq	12ef0 <__assert_fail@plt+0x1998>
   12fc0:	ldr	r3, [pc, #1956]	; 1376c <__assert_fail@plt+0x2214>
   12fc4:	str	r3, [sp]
   12fc8:	mov	r3, r5
   12fcc:	mov	r2, #10
   12fd0:	mov	r1, #0
   12fd4:	add	r0, sl, #1
   12fd8:	bl	23acc <__assert_fail@plt+0x12574>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12ef0 <__assert_fail@plt+0x1998>
   12fe4:	mov	r2, #5
   12fe8:	ldr	r1, [pc, #2052]	; 137f4 <__assert_fail@plt+0x229c>
   12fec:	mov	r0, #0
   12ff0:	bl	112d0 <dcgettext@plt>
   12ff4:	mov	r4, r0
   12ff8:	mov	r0, r8
   12ffc:	bl	15864 <__assert_fail@plt+0x430c>
   13000:	mov	r3, r0
   13004:	mov	r2, r4
   13008:	mov	r1, #0
   1300c:	mov	r0, #1
   13010:	bl	11384 <error@plt>
   13014:	mov	r2, #5
   13018:	ldr	r1, [pc, #2008]	; 137f8 <__assert_fail@plt+0x22a0>
   1301c:	mov	r0, #0
   13020:	bl	112d0 <dcgettext@plt>
   13024:	mov	r4, r0
   13028:	ldr	r0, [sl]
   1302c:	bl	15864 <__assert_fail@plt+0x430c>
   13030:	mov	r3, r0
   13034:	mov	r2, r4
   13038:	mov	r1, #0
   1303c:	mov	r0, #1
   13040:	bl	11384 <error@plt>
   13044:	mov	r2, #5
   13048:	ldr	r1, [pc, #1964]	; 137fc <__assert_fail@plt+0x22a4>
   1304c:	mov	r0, #0
   13050:	bl	112d0 <dcgettext@plt>
   13054:	ldr	r3, [sl]
   13058:	mov	r2, r0
   1305c:	mov	r1, #0
   13060:	mov	r0, #1
   13064:	bl	11384 <error@plt>
   13068:	mov	r2, #5
   1306c:	ldr	r1, [pc, #1932]	; 13800 <__assert_fail@plt+0x22a8>
   13070:	mov	r0, #0
   13074:	bl	112d0 <dcgettext@plt>
   13078:	mov	r4, r0
   1307c:	ldr	r0, [sl]
   13080:	bl	15864 <__assert_fail@plt+0x430c>
   13084:	mov	r5, r0
   13088:	add	r2, sp, #56	; 0x38
   1308c:	ldr	r3, [pc, #1768]	; 1377c <__assert_fail@plt+0x2224>
   13090:	ldrd	r0, [r3, #232]	; 0xe8
   13094:	bl	13c40 <__assert_fail@plt+0x26e8>
   13098:	str	r0, [sp]
   1309c:	mov	r3, r5
   130a0:	mov	r2, r4
   130a4:	mov	r1, #0
   130a8:	mov	r0, #1
   130ac:	bl	11384 <error@plt>
   130b0:	mov	r2, #5
   130b4:	ldr	r1, [pc, #1864]	; 13804 <__assert_fail@plt+0x22ac>
   130b8:	mov	r0, #0
   130bc:	bl	112d0 <dcgettext@plt>
   130c0:	mov	r8, r0
   130c4:	ldr	r0, [r4, r7]
   130c8:	bl	15864 <__assert_fail@plt+0x430c>
   130cc:	mov	r3, r0
   130d0:	mov	r2, r8
   130d4:	mov	r1, #0
   130d8:	mov	r0, r1
   130dc:	bl	11384 <error@plt>
   130e0:	b	12ee0 <__assert_fail@plt+0x1988>
   130e4:	mov	r0, r8
   130e8:	bl	11414 <strlen@plt>
   130ec:	sub	r9, r0, #1
   130f0:	add	r3, r8, r9
   130f4:	ldrb	r2, [r8, r9]
   130f8:	cmp	r2, #125	; 0x7d
   130fc:	bne	13164 <__assert_fail@plt+0x1c0c>
   13100:	mov	r2, #0
   13104:	strb	r2, [r8, r9]
   13108:	add	r0, r8, #1
   1310c:	sub	r3, r3, #1
   13110:	cmp	r0, r3
   13114:	beq	13194 <__assert_fail@plt+0x1c3c>
   13118:	ldr	r3, [pc, #1612]	; 1376c <__assert_fail@plt+0x2214>
   1311c:	str	r3, [sp]
   13120:	add	r3, sp, #56	; 0x38
   13124:	mov	r2, #10
   13128:	mov	r1, #0
   1312c:	bl	23ff8 <__assert_fail@plt+0x12aa0>
   13130:	cmp	r0, #0
   13134:	bne	131ac <__assert_fail@plt+0x1c54>
   13138:	ldrd	r2, [sp, #56]	; 0x38
   1313c:	cmp	r2, #0
   13140:	sbcs	r1, r3, #0
   13144:	blt	131ac <__assert_fail@plt+0x1c54>
   13148:	strd	r2, [r5, #16]
   1314c:	mov	r3, #125	; 0x7d
   13150:	strb	r3, [r8, r9]
   13154:	add	r3, r6, #2
   13158:	cmp	fp, r3
   1315c:	bgt	12f10 <__assert_fail@plt+0x19b8>
   13160:	b	12da4 <__assert_fail@plt+0x184c>
   13164:	mov	r2, #5
   13168:	ldr	r1, [pc, #1688]	; 13808 <__assert_fail@plt+0x22b0>
   1316c:	mov	r0, #0
   13170:	bl	112d0 <dcgettext@plt>
   13174:	mov	r4, r0
   13178:	mov	r0, r8
   1317c:	bl	15864 <__assert_fail@plt+0x430c>
   13180:	mov	r3, r0
   13184:	mov	r2, r4
   13188:	mov	r1, #0
   1318c:	mov	r0, #1
   13190:	bl	11384 <error@plt>
   13194:	ldrb	r3, [r8, #1]
   13198:	cmp	r3, #42	; 0x2a
   1319c:	moveq	r3, #1
   131a0:	strbeq	r3, [r5, #28]
   131a4:	bne	13118 <__assert_fail@plt+0x1bc0>
   131a8:	b	1314c <__assert_fail@plt+0x1bf4>
   131ac:	mov	r2, #5
   131b0:	ldr	r1, [pc, #1620]	; 1380c <__assert_fail@plt+0x22b4>
   131b4:	mov	r0, #0
   131b8:	bl	112d0 <dcgettext@plt>
   131bc:	mov	r4, r0
   131c0:	ldr	r3, [pc, #1460]	; 1377c <__assert_fail@plt+0x2224>
   131c4:	ldr	r3, [r3, #220]	; 0xdc
   131c8:	ldr	r0, [r3, r7]
   131cc:	bl	15864 <__assert_fail@plt+0x430c>
   131d0:	mov	r3, r0
   131d4:	mov	r2, r4
   131d8:	mov	r1, #0
   131dc:	mov	r0, #1
   131e0:	bl	11384 <error@plt>
   131e4:	add	r4, r4, #1
   131e8:	cmp	r4, #11
   131ec:	beq	13220 <__assert_fail@plt+0x1cc8>
   131f0:	ldr	r5, [r7, r4, lsl #2]
   131f4:	add	r2, sp, #56	; 0x38
   131f8:	mov	r1, r6
   131fc:	mov	r0, r5
   13200:	bl	11330 <sigaction@plt>
   13204:	ldr	r3, [sp, #56]	; 0x38
   13208:	cmp	r3, #1
   1320c:	beq	131e4 <__assert_fail@plt+0x1c8c>
   13210:	mov	r1, r5
   13214:	mov	r0, r8
   13218:	bl	113a8 <sigaddset@plt>
   1321c:	b	131e4 <__assert_fail@plt+0x1c8c>
   13220:	ldr	r3, [pc, #1512]	; 13810 <__assert_fail@plt+0x22b8>
   13224:	str	r3, [sp, #56]	; 0x38
   13228:	mov	r2, #128	; 0x80
   1322c:	ldr	r1, [pc, #1444]	; 137d8 <__assert_fail@plt+0x2280>
   13230:	add	r0, sp, #60	; 0x3c
   13234:	bl	11264 <memcpy@plt>
   13238:	mov	r4, #0
   1323c:	str	r4, [sp, #188]	; 0xbc
   13240:	ldr	r7, [pc, #1428]	; 137dc <__assert_fail@plt+0x2284>
   13244:	ldr	r6, [pc, #1420]	; 137d8 <__assert_fail@plt+0x2280>
   13248:	b	13258 <__assert_fail@plt+0x1d00>
   1324c:	add	r4, r4, #1
   13250:	cmp	r4, #11
   13254:	beq	13284 <__assert_fail@plt+0x1d2c>
   13258:	ldr	r5, [r7, r4, lsl #2]
   1325c:	mov	r1, r5
   13260:	mov	r0, r6
   13264:	bl	11300 <sigismember@plt>
   13268:	cmp	r0, #0
   1326c:	beq	1324c <__assert_fail@plt+0x1cf4>
   13270:	mov	r2, #0
   13274:	add	r1, sp, #56	; 0x38
   13278:	mov	r0, r5
   1327c:	bl	11330 <sigaction@plt>
   13280:	b	1324c <__assert_fail@plt+0x1cf4>
   13284:	mov	r3, #0
   13288:	str	r3, [sp, #40]	; 0x28
   1328c:	ldr	sl, [pc, #1256]	; 1377c <__assert_fail@plt+0x2224>
   13290:	ldr	r3, [sl, #172]	; 0xac
   13294:	ldr	r2, [sp, #40]	; 0x28
   13298:	cmp	r2, r3
   1329c:	bge	13718 <__assert_fail@plt+0x21c0>
   132a0:	ldr	r3, [sp, #40]	; 0x28
   132a4:	lsl	r3, r3, #6
   132a8:	mov	r2, r3
   132ac:	str	r3, [sp, #32]
   132b0:	ldr	r3, [sl, #180]	; 0xb4
   132b4:	add	r3, r3, r2
   132b8:	ldrb	r3, [r3, #30]
   132bc:	cmp	r3, #0
   132c0:	bne	13534 <__assert_fail@plt+0x1fdc>
   132c4:	str	r3, [sp, #24]
   132c8:	str	r3, [sp, #28]
   132cc:	b	13630 <__assert_fail@plt+0x20d8>
   132d0:	bl	11c18 <__assert_fail@plt+0x6c0>
   132d4:	b	13578 <__assert_fail@plt+0x2020>
   132d8:	ldrb	r3, [r4, #28]
   132dc:	cmp	r3, #0
   132e0:	beq	13300 <__assert_fail@plt+0x1da8>
   132e4:	cmp	r7, #0
   132e8:	beq	132f4 <__assert_fail@plt+0x1d9c>
   132ec:	mov	r0, #0
   132f0:	bl	11408 <exit@plt>
   132f4:	bl	12338 <__assert_fail@plt+0xde0>
   132f8:	bl	11814 <__assert_fail@plt+0x2bc>
   132fc:	b	132ec <__assert_fail@plt+0x1d94>
   13300:	str	r7, [sp]
   13304:	ldrd	r2, [sp, #24]
   13308:	mov	r0, r4
   1330c:	bl	12354 <__assert_fail@plt+0xdfc>
   13310:	mov	r2, #5
   13314:	ldr	r1, [pc, #1272]	; 13814 <__assert_fail@plt+0x22bc>
   13318:	mov	r0, #0
   1331c:	bl	112d0 <dcgettext@plt>
   13320:	mov	r2, r0
   13324:	mov	r1, #0
   13328:	mov	r0, r1
   1332c:	bl	11384 <error@plt>
   13330:	bl	117d4 <__assert_fail@plt+0x27c>
   13334:	add	r5, r4, #32
   13338:	ldrd	r0, [sl, #208]	; 0xd0
   1333c:	adds	r2, r0, #1
   13340:	adc	r3, r1, #0
   13344:	strd	r2, [sl, #208]	; 0xd0
   13348:	mov	r0, r2
   1334c:	mov	r1, r3
   13350:	bl	120a8 <__assert_fail@plt+0xb50>
   13354:	cmp	r0, #0
   13358:	beq	133dc <__assert_fail@plt+0x1e84>
   1335c:	ldr	r2, [r0]
   13360:	ldr	r1, [r0, #4]
   13364:	add	r3, r1, r2
   13368:	ldrb	r3, [r3, #-1]
   1336c:	cmp	r3, #10
   13370:	subeq	r2, r2, #1
   13374:	mov	r3, #0
   13378:	str	r3, [sp, #4]
   1337c:	str	r2, [sp]
   13380:	mov	r0, r5
   13384:	bl	22ac8 <__assert_fail@plt+0x11570>
   13388:	cmn	r0, #2
   1338c:	beq	13414 <__assert_fail@plt+0x1ebc>
   13390:	cmn	r0, #1
   13394:	beq	13338 <__assert_fail@plt+0x1de0>
   13398:	ldrd	r0, [r6, fp]
   1339c:	ldrd	r2, [sl, #208]	; 0xd0
   133a0:	adds	r8, r0, r2
   133a4:	adc	r9, r1, r3
   133a8:	strd	r8, [sp, #32]
   133ac:	ldr	r3, [r4, #24]
   133b0:	str	r3, [sp, #44]	; 0x2c
   133b4:	bl	121fc <__assert_fail@plt+0xca4>
   133b8:	cmp	r8, r0
   133bc:	sbcs	r3, r9, r1
   133c0:	blt	13438 <__assert_fail@plt+0x1ee0>
   133c4:	ldrd	r4, [sp, #32]
   133c8:	subs	r4, r4, r0
   133cc:	sbc	r5, r5, r1
   133d0:	mov	r8, #0
   133d4:	mov	r9, #0
   133d8:	b	134c0 <__assert_fail@plt+0x1f68>
   133dc:	ldrb	r3, [r4, #28]
   133e0:	cmp	r3, #0
   133e4:	beq	13404 <__assert_fail@plt+0x1eac>
   133e8:	cmp	r7, #0
   133ec:	beq	133f8 <__assert_fail@plt+0x1ea0>
   133f0:	mov	r0, #0
   133f4:	bl	11408 <exit@plt>
   133f8:	bl	12338 <__assert_fail@plt+0xde0>
   133fc:	bl	11814 <__assert_fail@plt+0x2bc>
   13400:	b	133f0 <__assert_fail@plt+0x1e98>
   13404:	str	r7, [sp]
   13408:	ldrd	r2, [sp, #24]
   1340c:	mov	r0, r4
   13410:	bl	12354 <__assert_fail@plt+0xdfc>
   13414:	mov	r2, #5
   13418:	ldr	r1, [pc, #1012]	; 13814 <__assert_fail@plt+0x22bc>
   1341c:	mov	r0, #0
   13420:	bl	112d0 <dcgettext@plt>
   13424:	mov	r2, r0
   13428:	mov	r1, #0
   1342c:	mov	r0, r1
   13430:	bl	11384 <error@plt>
   13434:	bl	117d4 <__assert_fail@plt+0x27c>
   13438:	ldr	fp, [sp, #44]	; 0x2c
   1343c:	mov	r2, #5
   13440:	ldr	r1, [pc, #976]	; 13818 <__assert_fail@plt+0x22c0>
   13444:	mov	r0, #0
   13448:	bl	112d0 <dcgettext@plt>
   1344c:	mov	r4, r0
   13450:	ldr	r3, [pc, #804]	; 1377c <__assert_fail@plt+0x2224>
   13454:	ldr	r3, [r3, #220]	; 0xdc
   13458:	ldr	r0, [r3, fp, lsl #2]
   1345c:	bl	15864 <__assert_fail@plt+0x430c>
   13460:	mov	r3, r0
   13464:	mov	r2, r4
   13468:	mov	r1, #0
   1346c:	mov	r0, r1
   13470:	bl	11384 <error@plt>
   13474:	bl	117d4 <__assert_fail@plt+0x27c>
   13478:	ldr	fp, [sp, #44]	; 0x2c
   1347c:	mov	r2, #5
   13480:	ldr	r1, [pc, #912]	; 13818 <__assert_fail@plt+0x22c0>
   13484:	mov	r0, #0
   13488:	bl	112d0 <dcgettext@plt>
   1348c:	mov	r4, r0
   13490:	ldr	r3, [pc, #740]	; 1377c <__assert_fail@plt+0x2224>
   13494:	ldr	r3, [r3, #220]	; 0xdc
   13498:	ldr	r0, [r3, fp, lsl #2]
   1349c:	bl	15864 <__assert_fail@plt+0x430c>
   134a0:	mov	r3, r0
   134a4:	mov	r2, r4
   134a8:	mov	r1, #0
   134ac:	mov	r0, r1
   134b0:	bl	11384 <error@plt>
   134b4:	bl	117d4 <__assert_fail@plt+0x27c>
   134b8:	adds	r8, r8, #1
   134bc:	adc	r9, r9, #0
   134c0:	cmp	r8, r4
   134c4:	sbcs	r3, r9, r5
   134c8:	bge	134e8 <__assert_fail@plt+0x1f90>
   134cc:	bl	1226c <__assert_fail@plt+0xd14>
   134d0:	cmp	r0, #0
   134d4:	beq	13478 <__assert_fail@plt+0x1f20>
   134d8:	cmp	r7, #0
   134dc:	bne	134b8 <__assert_fail@plt+0x1f60>
   134e0:	bl	11b44 <__assert_fail@plt+0x5ec>
   134e4:	b	134b8 <__assert_fail@plt+0x1f60>
   134e8:	cmp	r7, #0
   134ec:	beq	13524 <__assert_fail@plt+0x1fcc>
   134f0:	ldrd	r2, [r6, fp]
   134f4:	cmp	r2, #1
   134f8:	sbcs	r3, r3, #0
   134fc:	ldrdge	r2, [sp, #32]
   13500:	strdge	r2, [sl, #208]	; 0xd0
   13504:	ldrb	r3, [sl, #224]	; 0xe0
   13508:	cmp	r3, #0
   1350c:	bne	1352c <__assert_fail@plt+0x1fd4>
   13510:	ldrd	r2, [sp, #24]
   13514:	adds	r2, r2, #1
   13518:	adc	r3, r3, #0
   1351c:	strd	r2, [sp, #24]
   13520:	b	13544 <__assert_fail@plt+0x1fec>
   13524:	bl	11814 <__assert_fail@plt+0x2bc>
   13528:	b	134f0 <__assert_fail@plt+0x1f98>
   1352c:	bl	1226c <__assert_fail@plt+0xd14>
   13530:	b	13510 <__assert_fail@plt+0x1fb8>
   13534:	mov	r2, #0
   13538:	mov	r3, #0
   1353c:	strd	r2, [sp, #24]
   13540:	ldr	fp, [sp, #32]
   13544:	ldr	r6, [sl, #180]	; 0xb4
   13548:	add	r4, r6, fp
   1354c:	ldrb	r3, [r4, #28]
   13550:	cmp	r3, #0
   13554:	bne	1356c <__assert_fail@plt+0x2014>
   13558:	ldrd	r2, [r4, #16]
   1355c:	ldrd	r0, [sp, #24]
   13560:	cmp	r2, r0
   13564:	sbcs	r3, r3, r1
   13568:	blt	13708 <__assert_fail@plt+0x21b0>
   1356c:	ldrb	r7, [r4, #29]
   13570:	cmp	r7, #0
   13574:	beq	132d0 <__assert_fail@plt+0x1d78>
   13578:	ldrd	r2, [r6, fp]
   1357c:	cmp	r2, #0
   13580:	sbcs	r3, r3, #0
   13584:	blt	13334 <__assert_fail@plt+0x1ddc>
   13588:	add	r5, r4, #32
   1358c:	ldrd	r0, [sl, #208]	; 0xd0
   13590:	adds	r2, r0, #1
   13594:	adc	r3, r1, #0
   13598:	strd	r2, [sl, #208]	; 0xd0
   1359c:	mov	r0, r2
   135a0:	mov	r1, r3
   135a4:	bl	120a8 <__assert_fail@plt+0xb50>
   135a8:	cmp	r0, #0
   135ac:	beq	132d8 <__assert_fail@plt+0x1d80>
   135b0:	ldr	r2, [r0]
   135b4:	ldr	r1, [r0, #4]
   135b8:	add	r3, r1, r2
   135bc:	ldrb	r3, [r3, #-1]
   135c0:	cmp	r3, #10
   135c4:	subeq	r2, r2, #1
   135c8:	mov	r3, #0
   135cc:	str	r3, [sp, #4]
   135d0:	str	r2, [sp]
   135d4:	mov	r0, r5
   135d8:	bl	22ac8 <__assert_fail@plt+0x11570>
   135dc:	cmn	r0, #2
   135e0:	beq	13310 <__assert_fail@plt+0x1db8>
   135e4:	cmn	r0, #1
   135e8:	bne	13398 <__assert_fail@plt+0x1e40>
   135ec:	bl	1226c <__assert_fail@plt+0xd14>
   135f0:	cmp	r7, #0
   135f4:	bne	1358c <__assert_fail@plt+0x2034>
   135f8:	bl	11b44 <__assert_fail@plt+0x5ec>
   135fc:	b	1358c <__assert_fail@plt+0x2034>
   13600:	ldrd	r2, [sp, #24]
   13604:	mov	r0, fp
   13608:	bl	119c0 <__assert_fail@plt+0x468>
   1360c:	ldrd	r2, [sp, #24]
   13610:	mov	r0, fp
   13614:	bl	119c0 <__assert_fail@plt+0x468>
   13618:	bl	1226c <__assert_fail@plt+0xd14>
   1361c:	b	136e8 <__assert_fail@plt+0x2190>
   13620:	ldrd	r2, [sp, #24]
   13624:	mov	r0, fp
   13628:	bl	119c0 <__assert_fail@plt+0x468>
   1362c:	strd	r8, [sp, #24]
   13630:	ldr	fp, [sl, #180]	; 0xb4
   13634:	ldr	r3, [sp, #32]
   13638:	add	fp, fp, r3
   1363c:	ldrb	r3, [fp, #28]
   13640:	cmp	r3, #0
   13644:	bne	1365c <__assert_fail@plt+0x2104>
   13648:	ldrd	r2, [fp, #16]
   1364c:	ldrd	r0, [sp, #24]
   13650:	cmp	r2, r0
   13654:	sbcs	r3, r3, r1
   13658:	blt	13708 <__assert_fail@plt+0x21b0>
   1365c:	ldrd	r8, [sp, #24]
   13660:	adds	r8, r8, #1
   13664:	adc	r9, r9, #0
   13668:	ldr	r6, [fp, #8]
   1366c:	ldr	r3, [fp, #12]
   13670:	mul	r3, r8, r3
   13674:	mla	r3, r6, r9, r3
   13678:	umull	r6, r7, r6, r8
   1367c:	add	r7, r3, r7
   13680:	bl	11c18 <__assert_fail@plt+0x6c0>
   13684:	bl	121d4 <__assert_fail@plt+0xc7c>
   13688:	cmp	r0, #0
   1368c:	beq	1369c <__assert_fail@plt+0x2144>
   13690:	ldrb	r3, [sl, #224]	; 0xe0
   13694:	cmp	r3, #0
   13698:	bne	13600 <__assert_fail@plt+0x20a8>
   1369c:	bl	121fc <__assert_fail@plt+0xca4>
   136a0:	cmp	r0, r6
   136a4:	sbcs	r3, r1, r7
   136a8:	bge	136d8 <__assert_fail@plt+0x2180>
   136ac:	mov	r4, r0
   136b0:	mov	r5, r1
   136b4:	bl	1226c <__assert_fail@plt+0xd14>
   136b8:	cmp	r0, #0
   136bc:	beq	1360c <__assert_fail@plt+0x20b4>
   136c0:	bl	11b44 <__assert_fail@plt+0x5ec>
   136c4:	adds	r4, r4, #1
   136c8:	adc	r5, r5, #0
   136cc:	cmp	r5, r7
   136d0:	cmpeq	r4, r6
   136d4:	bne	136b4 <__assert_fail@plt+0x215c>
   136d8:	bl	11814 <__assert_fail@plt+0x2bc>
   136dc:	ldrb	r3, [sl, #224]	; 0xe0
   136e0:	cmp	r3, #0
   136e4:	bne	13618 <__assert_fail@plt+0x20c0>
   136e8:	bl	121d4 <__assert_fail@plt+0xc7c>
   136ec:	cmp	r0, #0
   136f0:	beq	1362c <__assert_fail@plt+0x20d4>
   136f4:	ldrb	r3, [sl, #224]	; 0xe0
   136f8:	cmp	r3, #0
   136fc:	beq	13620 <__assert_fail@plt+0x20c8>
   13700:	strd	r8, [sp, #24]
   13704:	b	13630 <__assert_fail@plt+0x20d8>
   13708:	ldr	r3, [sp, #40]	; 0x28
   1370c:	add	r3, r3, #1
   13710:	str	r3, [sp, #40]	; 0x28
   13714:	b	13290 <__assert_fail@plt+0x1d38>
   13718:	bl	11c18 <__assert_fail@plt+0x6c0>
   1371c:	bl	12338 <__assert_fail@plt+0xde0>
   13720:	bl	11814 <__assert_fail@plt+0x2bc>
   13724:	mov	r0, #0
   13728:	bl	11540 <close@plt>
   1372c:	cmp	r0, #0
   13730:	bne	13740 <__assert_fail@plt+0x21e8>
   13734:	mov	r0, #0
   13738:	add	sp, sp, #204	; 0xcc
   1373c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13740:	bl	1142c <__errno_location@plt>
   13744:	ldr	r4, [r0]
   13748:	mov	r2, #5
   1374c:	ldr	r1, [pc, #200]	; 1381c <__assert_fail@plt+0x22c4>
   13750:	mov	r0, #0
   13754:	bl	112d0 <dcgettext@plt>
   13758:	mov	r2, r0
   1375c:	mov	r1, r4
   13760:	mov	r0, #0
   13764:	bl	11384 <error@plt>
   13768:	bl	117d4 <__assert_fail@plt+0x27c>
   1376c:	strdeq	r5, [r2], -ip
   13770:	andeq	r5, r2, r4, lsr r9
   13774:	ldrdeq	r5, [r2], -ip
   13778:	andeq	r3, r1, r0, asr #16
   1377c:	andeq	r7, r3, r8, asr #3
   13780:	strdeq	r5, [r2], -r4
   13784:	andeq	r5, r2, r4, lsr #4
   13788:	andeq	r5, r2, r4, lsr #20
   1378c:	andeq	r7, r3, r0, asr #3
   13790:	strdeq	r5, [r2], -r8
   13794:	andeq	r5, r2, r8, lsl #20
   13798:	andeq	r5, r2, r8, lsl sl
   1379c:	andeq	r7, r3, r0, ror #2
   137a0:	andeq	r5, r2, r0, lsr r9
   137a4:			; <UNDEFINED> instruction: 0x000253b8
   137a8:			; <UNDEFINED> instruction: 0x000371bc
   137ac:	andeq	r7, r3, ip, asr r1
   137b0:			; <UNDEFINED> instruction: 0x000371b0
   137b4:	andeq	r5, r2, r0, lsr sl
   137b8:	andeq	r5, r2, r0, asr #20
   137bc:	andeq	r5, r2, ip, asr sl
   137c0:			; <UNDEFINED> instruction: 0x00025ab4
   137c4:	andeq	r5, r2, ip, lsl #21
   137c8:	andeq	r5, r2, r0, ror #21
   137cc:	andeq	r5, r2, r0, lsl fp
   137d0:	andeq	r5, r2, r4, asr #22
   137d4:	andeq	r5, r2, r4, ror fp
   137d8:	ldrdeq	r7, [r3], -ip
   137dc:	ldrdeq	r5, [r2], -r4
   137e0:	andeq	r5, r2, r8, ror fp
   137e4:	muleq	r2, r4, fp
   137e8:			; <UNDEFINED> instruction: 0x00025bb8
   137ec:	strdeq	r7, [r3], -r4
   137f0:	andeq	r0, r0, r6, asr #5
   137f4:	ldrdeq	r5, [r2], -ip
   137f8:	andeq	r5, r2, r4, lsl #24
   137fc:	andeq	r5, r2, r8, lsl ip
   13800:	andeq	r5, r2, r4, asr #24
   13804:	andeq	r5, r2, r0, lsl #25
   13808:	andeq	r5, r2, r0, asr #25
   1380c:	andeq	r5, r2, r4, ror #25
   13810:	muleq	r1, r0, sl
   13814:	andeq	r5, r2, r0, lsl sp
   13818:	andeq	r5, r2, r0, lsr #6
   1381c:	andeq	r5, r2, ip, ror #6
   13820:	ldr	r3, [pc, #4]	; 1382c <__assert_fail@plt+0x22d4>
   13824:	str	r0, [r3]
   13828:	bx	lr
   1382c:			; <UNDEFINED> instruction: 0x000372b8
   13830:	ldr	r3, [pc, #4]	; 1383c <__assert_fail@plt+0x22e4>
   13834:	strb	r0, [r3, #4]
   13838:	bx	lr
   1383c:			; <UNDEFINED> instruction: 0x000372b8
   13840:	push	{r4, r5, r6, lr}
   13844:	sub	sp, sp, #8
   13848:	ldr	r3, [pc, #200]	; 13918 <__assert_fail@plt+0x23c0>
   1384c:	ldr	r0, [r3]
   13850:	bl	24548 <__assert_fail@plt+0x12ff0>
   13854:	cmp	r0, #0
   13858:	beq	1387c <__assert_fail@plt+0x2324>
   1385c:	ldr	r3, [pc, #184]	; 1391c <__assert_fail@plt+0x23c4>
   13860:	ldrb	r3, [r3, #4]
   13864:	cmp	r3, #0
   13868:	beq	13898 <__assert_fail@plt+0x2340>
   1386c:	bl	1142c <__errno_location@plt>
   13870:	ldr	r3, [r0]
   13874:	cmp	r3, #32
   13878:	bne	13898 <__assert_fail@plt+0x2340>
   1387c:	ldr	r3, [pc, #156]	; 13920 <__assert_fail@plt+0x23c8>
   13880:	ldr	r0, [r3]
   13884:	bl	24548 <__assert_fail@plt+0x12ff0>
   13888:	cmp	r0, #0
   1388c:	bne	1390c <__assert_fail@plt+0x23b4>
   13890:	add	sp, sp, #8
   13894:	pop	{r4, r5, r6, pc}
   13898:	mov	r2, #5
   1389c:	ldr	r1, [pc, #128]	; 13924 <__assert_fail@plt+0x23cc>
   138a0:	mov	r0, #0
   138a4:	bl	112d0 <dcgettext@plt>
   138a8:	mov	r4, r0
   138ac:	ldr	r3, [pc, #104]	; 1391c <__assert_fail@plt+0x23c4>
   138b0:	ldr	r5, [r3]
   138b4:	cmp	r5, #0
   138b8:	beq	138f0 <__assert_fail@plt+0x2398>
   138bc:	bl	1142c <__errno_location@plt>
   138c0:	ldr	r6, [r0]
   138c4:	mov	r0, r5
   138c8:	bl	156dc <__assert_fail@plt+0x4184>
   138cc:	str	r4, [sp]
   138d0:	mov	r3, r0
   138d4:	ldr	r2, [pc, #76]	; 13928 <__assert_fail@plt+0x23d0>
   138d8:	mov	r1, r6
   138dc:	mov	r0, #0
   138e0:	bl	11384 <error@plt>
   138e4:	ldr	r3, [pc, #64]	; 1392c <__assert_fail@plt+0x23d4>
   138e8:	ldr	r0, [r3]
   138ec:	bl	11258 <_exit@plt>
   138f0:	bl	1142c <__errno_location@plt>
   138f4:	mov	r3, r4
   138f8:	ldr	r2, [pc, #48]	; 13930 <__assert_fail@plt+0x23d8>
   138fc:	ldr	r1, [r0]
   13900:	mov	r0, #0
   13904:	bl	11384 <error@plt>
   13908:	b	138e4 <__assert_fail@plt+0x238c>
   1390c:	ldr	r3, [pc, #24]	; 1392c <__assert_fail@plt+0x23d4>
   13910:	ldr	r0, [r3]
   13914:	bl	11258 <_exit@plt>
   13918:			; <UNDEFINED> instruction: 0x000371bc
   1391c:			; <UNDEFINED> instruction: 0x000372b8
   13920:			; <UNDEFINED> instruction: 0x000371b8
   13924:	andeq	r5, r2, r4, lsr #28
   13928:	andeq	r5, r2, r0, lsr lr
   1392c:	andeq	r7, r3, r4, ror #2
   13930:	ldrdeq	r5, [r2], -r8
   13934:	push	{r4, r5, r6, lr}
   13938:	sub	sp, sp, #8
   1393c:	mov	r4, r0
   13940:	bl	11480 <fileno@plt>
   13944:	cmp	r0, #0
   13948:	blt	139c0 <__assert_fail@plt+0x2468>
   1394c:	mov	r0, r4
   13950:	bl	113c0 <__freading@plt>
   13954:	cmp	r0, #0
   13958:	beq	1398c <__assert_fail@plt+0x2434>
   1395c:	mov	r0, r4
   13960:	bl	11480 <fileno@plt>
   13964:	mov	r3, #1
   13968:	str	r3, [sp]
   1396c:	mov	r2, #0
   13970:	mov	r3, #0
   13974:	bl	11348 <lseek64@plt>
   13978:	mvn	r2, #0
   1397c:	mvn	r3, #0
   13980:	cmp	r1, r3
   13984:	cmpeq	r0, r2
   13988:	beq	139cc <__assert_fail@plt+0x2474>
   1398c:	mov	r0, r4
   13990:	bl	13a40 <__assert_fail@plt+0x24e8>
   13994:	cmp	r0, #0
   13998:	beq	139cc <__assert_fail@plt+0x2474>
   1399c:	bl	1142c <__errno_location@plt>
   139a0:	mov	r5, r0
   139a4:	ldr	r6, [r0]
   139a8:	mov	r0, r4
   139ac:	bl	11498 <fclose@plt>
   139b0:	cmp	r6, #0
   139b4:	strne	r6, [r5]
   139b8:	mvnne	r0, #0
   139bc:	b	139d4 <__assert_fail@plt+0x247c>
   139c0:	mov	r0, r4
   139c4:	bl	11498 <fclose@plt>
   139c8:	b	139d4 <__assert_fail@plt+0x247c>
   139cc:	mov	r0, r4
   139d0:	bl	11498 <fclose@plt>
   139d4:	add	sp, sp, #8
   139d8:	pop	{r4, r5, r6, pc}
   139dc:	push	{r4, r5, r6, r7, r8, lr}
   139e0:	mov	r5, r0
   139e4:	mov	r0, r1
   139e8:	mov	r1, r2
   139ec:	mov	r2, r3
   139f0:	bl	11390 <open64@plt>
   139f4:	mov	r4, r0
   139f8:	cmp	r5, r0
   139fc:	movne	r3, #0
   13a00:	moveq	r3, #1
   13a04:	orrs	r3, r3, r0, lsr #31
   13a08:	beq	13a14 <__assert_fail@plt+0x24bc>
   13a0c:	mov	r0, r4
   13a10:	pop	{r4, r5, r6, r7, r8, pc}
   13a14:	mov	r1, r5
   13a18:	bl	112e8 <dup2@plt>
   13a1c:	mov	r6, r0
   13a20:	bl	1142c <__errno_location@plt>
   13a24:	mov	r5, r0
   13a28:	ldr	r7, [r0]
   13a2c:	mov	r0, r4
   13a30:	bl	11540 <close@plt>
   13a34:	str	r7, [r5]
   13a38:	mov	r4, r6
   13a3c:	b	13a0c <__assert_fail@plt+0x24b4>
   13a40:	push	{r4, lr}
   13a44:	sub	sp, sp, #8
   13a48:	subs	r4, r0, #0
   13a4c:	beq	13a60 <__assert_fail@plt+0x2508>
   13a50:	mov	r0, r4
   13a54:	bl	113c0 <__freading@plt>
   13a58:	cmp	r0, #0
   13a5c:	bne	13a70 <__assert_fail@plt+0x2518>
   13a60:	mov	r0, r4
   13a64:	bl	1121c <fflush@plt>
   13a68:	add	sp, sp, #8
   13a6c:	pop	{r4, pc}
   13a70:	ldr	r3, [r4]
   13a74:	tst	r3, #256	; 0x100
   13a78:	bne	13a88 <__assert_fail@plt+0x2530>
   13a7c:	mov	r0, r4
   13a80:	bl	1121c <fflush@plt>
   13a84:	b	13a68 <__assert_fail@plt+0x2510>
   13a88:	mov	r3, #1
   13a8c:	str	r3, [sp]
   13a90:	mov	r2, #0
   13a94:	mov	r3, #0
   13a98:	mov	r0, r4
   13a9c:	bl	13b98 <__assert_fail@plt+0x2640>
   13aa0:	b	13a7c <__assert_fail@plt+0x2524>
   13aa4:	push	{r4, r5, r6, lr}
   13aa8:	mov	r5, r1
   13aac:	bl	11504 <fopen64@plt>
   13ab0:	subs	r4, r0, #0
   13ab4:	beq	13ac8 <__assert_fail@plt+0x2570>
   13ab8:	mov	r0, r4
   13abc:	bl	11480 <fileno@plt>
   13ac0:	cmp	r0, #2
   13ac4:	bls	13ad0 <__assert_fail@plt+0x2578>
   13ac8:	mov	r0, r4
   13acc:	pop	{r4, r5, r6, pc}
   13ad0:	bl	22c40 <__assert_fail@plt+0x116e8>
   13ad4:	subs	r6, r0, #0
   13ad8:	blt	13b20 <__assert_fail@plt+0x25c8>
   13adc:	mov	r0, r4
   13ae0:	bl	13934 <__assert_fail@plt+0x23dc>
   13ae4:	cmp	r0, #0
   13ae8:	bne	13b00 <__assert_fail@plt+0x25a8>
   13aec:	mov	r1, r5
   13af0:	mov	r0, r6
   13af4:	bl	111a4 <fdopen@plt>
   13af8:	subs	r4, r0, #0
   13afc:	bne	13ac8 <__assert_fail@plt+0x2570>
   13b00:	bl	1142c <__errno_location@plt>
   13b04:	mov	r4, r0
   13b08:	ldr	r5, [r0]
   13b0c:	mov	r0, r6
   13b10:	bl	11540 <close@plt>
   13b14:	str	r5, [r4]
   13b18:	mov	r4, #0
   13b1c:	b	13ac8 <__assert_fail@plt+0x2570>
   13b20:	bl	1142c <__errno_location@plt>
   13b24:	mov	r5, r0
   13b28:	ldr	r6, [r0]
   13b2c:	mov	r0, r4
   13b30:	bl	13934 <__assert_fail@plt+0x23dc>
   13b34:	str	r6, [r5]
   13b38:	mov	r4, #0
   13b3c:	b	13ac8 <__assert_fail@plt+0x2570>
   13b40:	push	{r4, r5, lr}
   13b44:	sub	sp, sp, #12
   13b48:	mov	r5, r0
   13b4c:	bl	1142c <__errno_location@plt>
   13b50:	mov	r4, r0
   13b54:	ldr	r3, [r0]
   13b58:	str	r3, [sp]
   13b5c:	str	r3, [sp, #4]
   13b60:	mov	r3, #0
   13b64:	str	r3, [r0]
   13b68:	mov	r0, r5
   13b6c:	bl	11240 <free@plt>
   13b70:	ldr	r3, [r4]
   13b74:	cmp	r3, #0
   13b78:	moveq	r3, #4
   13b7c:	movne	r3, #0
   13b80:	add	r2, sp, #8
   13b84:	add	r3, r2, r3
   13b88:	ldr	r3, [r3, #-8]
   13b8c:	str	r3, [r4]
   13b90:	add	sp, sp, #12
   13b94:	pop	{r4, r5, pc}
   13b98:	push	{r4, r5, r6, r7, lr}
   13b9c:	sub	sp, sp, #12
   13ba0:	mov	r4, r0
   13ba4:	mov	r6, r2
   13ba8:	mov	r7, r3
   13bac:	ldr	r5, [sp, #32]
   13bb0:	ldr	r2, [r0, #8]
   13bb4:	ldr	r3, [r0, #4]
   13bb8:	cmp	r2, r3
   13bbc:	beq	13bdc <__assert_fail@plt+0x2684>
   13bc0:	str	r5, [sp]
   13bc4:	mov	r2, r6
   13bc8:	mov	r3, r7
   13bcc:	mov	r0, r4
   13bd0:	bl	114a4 <fseeko64@plt>
   13bd4:	add	sp, sp, #12
   13bd8:	pop	{r4, r5, r6, r7, pc}
   13bdc:	ldr	r2, [r0, #20]
   13be0:	ldr	r3, [r0, #16]
   13be4:	cmp	r2, r3
   13be8:	bne	13bc0 <__assert_fail@plt+0x2668>
   13bec:	ldr	r3, [r0, #36]	; 0x24
   13bf0:	cmp	r3, #0
   13bf4:	bne	13bc0 <__assert_fail@plt+0x2668>
   13bf8:	bl	11480 <fileno@plt>
   13bfc:	str	r5, [sp]
   13c00:	mov	r2, r6
   13c04:	mov	r3, r7
   13c08:	bl	11348 <lseek64@plt>
   13c0c:	mvn	r2, #0
   13c10:	mvn	r3, #0
   13c14:	cmp	r1, r3
   13c18:	cmpeq	r0, r2
   13c1c:	beq	13c38 <__assert_fail@plt+0x26e0>
   13c20:	ldr	r3, [r4]
   13c24:	bic	r3, r3, #16
   13c28:	str	r3, [r4]
   13c2c:	strd	r0, [r4, #80]	; 0x50
   13c30:	mov	r0, #0
   13c34:	b	13bd4 <__assert_fail@plt+0x267c>
   13c38:	mvn	r0, #0
   13c3c:	b	13bd4 <__assert_fail@plt+0x267c>
   13c40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c44:	mov	r4, r0
   13c48:	mov	r5, r1
   13c4c:	add	r6, r2, #20
   13c50:	mov	r3, #0
   13c54:	strb	r3, [r2, #20]
   13c58:	cmp	r0, #0
   13c5c:	sbcs	r3, r1, #0
   13c60:	movlt	r8, #10
   13c64:	movlt	r9, #0
   13c68:	blt	13cc0 <__assert_fail@plt+0x2768>
   13c6c:	mov	r8, #10
   13c70:	mov	r9, #0
   13c74:	mov	r2, r8
   13c78:	mov	r3, r9
   13c7c:	mov	r0, r4
   13c80:	mov	r1, r5
   13c84:	bl	24f10 <__assert_fail@plt+0x139b8>
   13c88:	add	r2, r2, #48	; 0x30
   13c8c:	strb	r2, [r6, #-1]!
   13c90:	mov	r2, r8
   13c94:	mov	r3, r9
   13c98:	mov	r0, r4
   13c9c:	mov	r1, r5
   13ca0:	bl	24f10 <__assert_fail@plt+0x139b8>
   13ca4:	mov	r4, r0
   13ca8:	mov	r5, r1
   13cac:	orrs	r3, r4, r5
   13cb0:	bne	13c74 <__assert_fail@plt+0x271c>
   13cb4:	mov	r0, r6
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cbc:	mov	r6, r7
   13cc0:	sub	r7, r6, #1
   13cc4:	mov	r2, r8
   13cc8:	mov	r3, r9
   13ccc:	mov	r0, r4
   13cd0:	mov	r1, r5
   13cd4:	bl	24f10 <__assert_fail@plt+0x139b8>
   13cd8:	rsb	r2, r2, #48	; 0x30
   13cdc:	strb	r2, [r6, #-1]
   13ce0:	mov	r2, r8
   13ce4:	mov	r3, r9
   13ce8:	mov	r0, r4
   13cec:	mov	r1, r5
   13cf0:	bl	24f10 <__assert_fail@plt+0x139b8>
   13cf4:	mov	r4, r0
   13cf8:	mov	r5, r1
   13cfc:	orrs	r3, r4, r5
   13d00:	bne	13cbc <__assert_fail@plt+0x2764>
   13d04:	sub	r6, r6, #2
   13d08:	mov	r3, #45	; 0x2d
   13d0c:	strb	r3, [r7, #-1]
   13d10:	b	13cb4 <__assert_fail@plt+0x275c>
   13d14:	push	{r4, r5, r6, lr}
   13d18:	subs	r4, r0, #0
   13d1c:	beq	13d94 <__assert_fail@plt+0x283c>
   13d20:	mov	r1, #47	; 0x2f
   13d24:	mov	r0, r4
   13d28:	bl	114d4 <strrchr@plt>
   13d2c:	cmp	r0, #0
   13d30:	addne	r5, r0, #1
   13d34:	moveq	r5, r4
   13d38:	sub	r3, r5, r4
   13d3c:	cmp	r3, #6
   13d40:	ble	13d80 <__assert_fail@plt+0x2828>
   13d44:	mov	r2, #7
   13d48:	ldr	r1, [pc, #96]	; 13db0 <__assert_fail@plt+0x2858>
   13d4c:	sub	r0, r5, #7
   13d50:	bl	11528 <strncmp@plt>
   13d54:	cmp	r0, #0
   13d58:	bne	13d80 <__assert_fail@plt+0x2828>
   13d5c:	mov	r2, #3
   13d60:	ldr	r1, [pc, #76]	; 13db4 <__assert_fail@plt+0x285c>
   13d64:	mov	r0, r5
   13d68:	bl	11528 <strncmp@plt>
   13d6c:	cmp	r0, #0
   13d70:	addeq	r4, r5, #3
   13d74:	ldreq	r3, [pc, #60]	; 13db8 <__assert_fail@plt+0x2860>
   13d78:	streq	r4, [r3]
   13d7c:	movne	r4, r5
   13d80:	ldr	r3, [pc, #52]	; 13dbc <__assert_fail@plt+0x2864>
   13d84:	str	r4, [r3]
   13d88:	ldr	r3, [pc, #48]	; 13dc0 <__assert_fail@plt+0x2868>
   13d8c:	str	r4, [r3]
   13d90:	pop	{r4, r5, r6, pc}
   13d94:	ldr	r3, [pc, #40]	; 13dc4 <__assert_fail@plt+0x286c>
   13d98:	ldr	r3, [r3]
   13d9c:	mov	r2, #55	; 0x37
   13da0:	mov	r1, #1
   13da4:	ldr	r0, [pc, #28]	; 13dc8 <__assert_fail@plt+0x2870>
   13da8:	bl	1133c <fwrite@plt>
   13dac:	bl	11534 <abort@plt>
   13db0:	andeq	r5, r2, r0, ror lr
   13db4:	andeq	r5, r2, r8, ror lr
   13db8:	andeq	r7, r3, r8, lsr #3
   13dbc:	andeq	r7, r3, r0, asr #5
   13dc0:	andeq	r7, r3, ip, lsr #3
   13dc4:			; <UNDEFINED> instruction: 0x000371b8
   13dc8:	andeq	r5, r2, r8, lsr lr
   13dcc:	push	{r4, r5, r6, lr}
   13dd0:	mov	r5, r0
   13dd4:	mov	r4, r1
   13dd8:	mov	r2, #48	; 0x30
   13ddc:	mov	r1, #0
   13de0:	bl	1145c <memset@plt>
   13de4:	cmp	r4, #10
   13de8:	beq	13df8 <__assert_fail@plt+0x28a0>
   13dec:	str	r4, [r5]
   13df0:	mov	r0, r5
   13df4:	pop	{r4, r5, r6, pc}
   13df8:	bl	11534 <abort@plt>
   13dfc:	push	{r4, r5, r6, lr}
   13e00:	mov	r4, r0
   13e04:	mov	r5, r1
   13e08:	mov	r2, #5
   13e0c:	mov	r1, r0
   13e10:	mov	r0, #0
   13e14:	bl	112d0 <dcgettext@plt>
   13e18:	cmp	r4, r0
   13e1c:	popne	{r4, r5, r6, pc}
   13e20:	bl	248e4 <__assert_fail@plt+0x1338c>
   13e24:	ldrb	r3, [r0]
   13e28:	bic	r3, r3, #32
   13e2c:	cmp	r3, #85	; 0x55
   13e30:	beq	13eac <__assert_fail@plt+0x2954>
   13e34:	cmp	r3, #71	; 0x47
   13e38:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e3c:	ldrb	r3, [r0, #1]
   13e40:	bic	r3, r3, #32
   13e44:	cmp	r3, #66	; 0x42
   13e48:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e4c:	ldrb	r3, [r0, #2]
   13e50:	cmp	r3, #49	; 0x31
   13e54:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e58:	ldrb	r3, [r0, #3]
   13e5c:	cmp	r3, #56	; 0x38
   13e60:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e64:	ldrb	r3, [r0, #4]
   13e68:	cmp	r3, #48	; 0x30
   13e6c:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e70:	ldrb	r3, [r0, #5]
   13e74:	cmp	r3, #51	; 0x33
   13e78:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e7c:	ldrb	r3, [r0, #6]
   13e80:	cmp	r3, #48	; 0x30
   13e84:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e88:	ldrb	r3, [r0, #7]
   13e8c:	cmp	r3, #0
   13e90:	bne	13f08 <__assert_fail@plt+0x29b0>
   13e94:	ldrb	r2, [r4]
   13e98:	ldr	r3, [pc, #124]	; 13f1c <__assert_fail@plt+0x29c4>
   13e9c:	ldr	r0, [pc, #124]	; 13f20 <__assert_fail@plt+0x29c8>
   13ea0:	cmp	r2, #96	; 0x60
   13ea4:	movne	r0, r3
   13ea8:	pop	{r4, r5, r6, pc}
   13eac:	ldrb	r3, [r0, #1]
   13eb0:	bic	r3, r3, #32
   13eb4:	cmp	r3, #84	; 0x54
   13eb8:	bne	13f08 <__assert_fail@plt+0x29b0>
   13ebc:	ldrb	r3, [r0, #2]
   13ec0:	bic	r3, r3, #32
   13ec4:	cmp	r3, #70	; 0x46
   13ec8:	bne	13f08 <__assert_fail@plt+0x29b0>
   13ecc:	ldrb	r3, [r0, #3]
   13ed0:	cmp	r3, #45	; 0x2d
   13ed4:	bne	13f08 <__assert_fail@plt+0x29b0>
   13ed8:	ldrb	r3, [r0, #4]
   13edc:	cmp	r3, #56	; 0x38
   13ee0:	bne	13f08 <__assert_fail@plt+0x29b0>
   13ee4:	ldrb	r3, [r0, #5]
   13ee8:	cmp	r3, #0
   13eec:	bne	13f08 <__assert_fail@plt+0x29b0>
   13ef0:	ldrb	r2, [r4]
   13ef4:	ldr	r3, [pc, #40]	; 13f24 <__assert_fail@plt+0x29cc>
   13ef8:	ldr	r0, [pc, #40]	; 13f28 <__assert_fail@plt+0x29d0>
   13efc:	cmp	r2, #96	; 0x60
   13f00:	movne	r0, r3
   13f04:	pop	{r4, r5, r6, pc}
   13f08:	ldr	r3, [pc, #28]	; 13f2c <__assert_fail@plt+0x29d4>
   13f0c:	ldr	r0, [pc, #28]	; 13f30 <__assert_fail@plt+0x29d8>
   13f10:	cmp	r5, #9
   13f14:	movne	r0, r3
   13f18:	pop	{r4, r5, r6, pc}
   13f1c:	ldrdeq	r5, [r2], -r4
   13f20:	ldrdeq	r5, [r2], -ip
   13f24:	ldrdeq	r5, [r2], -r0
   13f28:	andeq	r5, r2, r0, ror #29
   13f2c:	andeq	r5, r2, ip, lsl #26
   13f30:	ldrdeq	r5, [r2], -r8
   13f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f38:	sub	sp, sp, #116	; 0x74
   13f3c:	str	r0, [sp, #36]	; 0x24
   13f40:	mov	sl, r1
   13f44:	str	r2, [sp, #52]	; 0x34
   13f48:	str	r3, [sp, #28]
   13f4c:	ldr	r8, [sp, #152]	; 0x98
   13f50:	bl	11354 <__ctype_get_mb_cur_max@plt>
   13f54:	str	r0, [sp, #84]	; 0x54
   13f58:	ldr	r3, [sp, #156]	; 0x9c
   13f5c:	lsr	r3, r3, #1
   13f60:	and	r3, r3, #1
   13f64:	str	r3, [sp, #32]
   13f68:	mov	r3, #1
   13f6c:	str	r3, [sp, #40]	; 0x28
   13f70:	mov	r3, #0
   13f74:	str	r3, [sp, #80]	; 0x50
   13f78:	str	r3, [sp, #44]	; 0x2c
   13f7c:	str	r3, [sp, #48]	; 0x30
   13f80:	str	r3, [sp, #60]	; 0x3c
   13f84:	str	r3, [sp, #72]	; 0x48
   13f88:	str	r3, [sp, #76]	; 0x4c
   13f8c:	mov	r7, sl
   13f90:	mov	sl, r8
   13f94:	cmp	sl, #10
   13f98:	ldrls	pc, [pc, sl, lsl #2]
   13f9c:	b	14154 <__assert_fail@plt+0x2bfc>
   13fa0:	andeq	r4, r1, r4
   13fa4:	ldrdeq	r3, [r1], -r4
   13fa8:	andeq	r4, r1, r0, lsr r1
   13fac:	andeq	r3, r1, ip, asr #31
   13fb0:	andeq	r4, r1, r4, ror #1
   13fb4:	andeq	r4, r1, r4, lsl r0
   13fb8:	andeq	r5, r1, r0, lsl #1
   13fbc:	andeq	r4, r1, r8, asr r1
   13fc0:	andeq	r4, r1, r0, asr r0
   13fc4:	andeq	r4, r1, r0, asr r0
   13fc8:	andeq	r4, r1, r0, asr r0
   13fcc:	mov	r3, #1
   13fd0:	str	r3, [sp, #48]	; 0x30
   13fd4:	mov	r3, #1
   13fd8:	str	r3, [sp, #32]
   13fdc:	str	r3, [sp, #60]	; 0x3c
   13fe0:	ldr	r3, [pc, #4068]	; 14fcc <__assert_fail@plt+0x3a74>
   13fe4:	str	r3, [sp, #72]	; 0x48
   13fe8:	mov	fp, #0
   13fec:	mov	sl, #2
   13ff0:	mov	r6, #0
   13ff4:	ldr	r3, [sp, #48]	; 0x30
   13ff8:	eor	r3, r3, #1
   13ffc:	str	r3, [sp, #68]	; 0x44
   14000:	b	148e8 <__assert_fail@plt+0x3390>
   14004:	mov	r3, #0
   14008:	str	r3, [sp, #32]
   1400c:	mov	fp, r3
   14010:	b	13ff0 <__assert_fail@plt+0x2a98>
   14014:	ldr	r3, [sp, #32]
   14018:	cmp	r3, #0
   1401c:	bne	14170 <__assert_fail@plt+0x2c18>
   14020:	cmp	r7, #0
   14024:	beq	14190 <__assert_fail@plt+0x2c38>
   14028:	ldr	r3, [sp, #36]	; 0x24
   1402c:	mov	r2, #34	; 0x22
   14030:	strb	r2, [r3]
   14034:	mov	r3, #1
   14038:	str	r3, [sp, #48]	; 0x30
   1403c:	str	r3, [sp, #60]	; 0x3c
   14040:	ldr	r3, [pc, #3980]	; 14fd4 <__assert_fail@plt+0x3a7c>
   14044:	str	r3, [sp, #72]	; 0x48
   14048:	mov	fp, #1
   1404c:	b	13ff0 <__assert_fail@plt+0x2a98>
   14050:	cmp	sl, #10
   14054:	beq	14078 <__assert_fail@plt+0x2b20>
   14058:	mov	r1, sl
   1405c:	ldr	r0, [pc, #3948]	; 14fd0 <__assert_fail@plt+0x3a78>
   14060:	bl	13dfc <__assert_fail@plt+0x28a4>
   14064:	str	r0, [sp, #164]	; 0xa4
   14068:	mov	r1, sl
   1406c:	ldr	r0, [pc, #3928]	; 14fcc <__assert_fail@plt+0x3a74>
   14070:	bl	13dfc <__assert_fail@plt+0x28a4>
   14074:	str	r0, [sp, #168]	; 0xa8
   14078:	ldr	r3, [sp, #32]
   1407c:	cmp	r3, #0
   14080:	movne	fp, #0
   14084:	bne	140bc <__assert_fail@plt+0x2b64>
   14088:	ldr	r3, [sp, #164]	; 0xa4
   1408c:	ldrb	r3, [r3]
   14090:	cmp	r3, #0
   14094:	beq	140dc <__assert_fail@plt+0x2b84>
   14098:	ldr	r2, [sp, #164]	; 0xa4
   1409c:	mov	fp, #0
   140a0:	ldr	r1, [sp, #36]	; 0x24
   140a4:	cmp	r7, fp
   140a8:	strbhi	r3, [r1, fp]
   140ac:	add	fp, fp, #1
   140b0:	ldrb	r3, [r2, #1]!
   140b4:	cmp	r3, #0
   140b8:	bne	140a4 <__assert_fail@plt+0x2b4c>
   140bc:	ldr	r0, [sp, #168]	; 0xa8
   140c0:	bl	11414 <strlen@plt>
   140c4:	str	r0, [sp, #60]	; 0x3c
   140c8:	ldr	r3, [sp, #168]	; 0xa8
   140cc:	str	r3, [sp, #72]	; 0x48
   140d0:	mov	r3, #1
   140d4:	str	r3, [sp, #48]	; 0x30
   140d8:	b	13ff0 <__assert_fail@plt+0x2a98>
   140dc:	mov	fp, #0
   140e0:	b	140bc <__assert_fail@plt+0x2b64>
   140e4:	ldr	r3, [sp, #32]
   140e8:	cmp	r3, #0
   140ec:	bne	141ac <__assert_fail@plt+0x2c54>
   140f0:	mov	r3, #1
   140f4:	str	r3, [sp, #48]	; 0x30
   140f8:	cmp	r7, #0
   140fc:	beq	141c8 <__assert_fail@plt+0x2c70>
   14100:	ldr	r3, [sp, #36]	; 0x24
   14104:	mov	r2, #39	; 0x27
   14108:	strb	r2, [r3]
   1410c:	mov	r3, #0
   14110:	str	r3, [sp, #32]
   14114:	mov	r3, #1
   14118:	str	r3, [sp, #60]	; 0x3c
   1411c:	ldr	r3, [pc, #3752]	; 14fcc <__assert_fail@plt+0x3a74>
   14120:	str	r3, [sp, #72]	; 0x48
   14124:	mov	fp, #1
   14128:	mov	sl, #2
   1412c:	b	13ff0 <__assert_fail@plt+0x2a98>
   14130:	ldr	r3, [sp, #32]
   14134:	cmp	r3, #0
   14138:	beq	140f8 <__assert_fail@plt+0x2ba0>
   1413c:	mov	r3, #1
   14140:	str	r3, [sp, #60]	; 0x3c
   14144:	ldr	r3, [pc, #3712]	; 14fcc <__assert_fail@plt+0x3a74>
   14148:	str	r3, [sp, #72]	; 0x48
   1414c:	mov	fp, #0
   14150:	b	13ff0 <__assert_fail@plt+0x2a98>
   14154:	bl	11534 <abort@plt>
   14158:	mov	r3, #0
   1415c:	str	r3, [sp, #32]
   14160:	mov	r3, #1
   14164:	str	r3, [sp, #48]	; 0x30
   14168:	mov	fp, #0
   1416c:	b	13ff0 <__assert_fail@plt+0x2a98>
   14170:	ldr	r3, [sp, #32]
   14174:	str	r3, [sp, #48]	; 0x30
   14178:	mov	r3, #1
   1417c:	str	r3, [sp, #60]	; 0x3c
   14180:	ldr	r3, [pc, #3660]	; 14fd4 <__assert_fail@plt+0x3a7c>
   14184:	str	r3, [sp, #72]	; 0x48
   14188:	mov	fp, #0
   1418c:	b	13ff0 <__assert_fail@plt+0x2a98>
   14190:	mov	r3, #1
   14194:	str	r3, [sp, #48]	; 0x30
   14198:	str	r3, [sp, #60]	; 0x3c
   1419c:	ldr	r3, [pc, #3632]	; 14fd4 <__assert_fail@plt+0x3a7c>
   141a0:	str	r3, [sp, #72]	; 0x48
   141a4:	mov	fp, #1
   141a8:	b	13ff0 <__assert_fail@plt+0x2a98>
   141ac:	mov	r3, #1
   141b0:	str	r3, [sp, #60]	; 0x3c
   141b4:	ldr	r3, [pc, #3600]	; 14fcc <__assert_fail@plt+0x3a74>
   141b8:	str	r3, [sp, #72]	; 0x48
   141bc:	mov	fp, #0
   141c0:	mov	sl, #2
   141c4:	b	13ff0 <__assert_fail@plt+0x2a98>
   141c8:	mov	r3, #0
   141cc:	str	r3, [sp, #32]
   141d0:	mov	r3, #1
   141d4:	str	r3, [sp, #60]	; 0x3c
   141d8:	ldr	r3, [pc, #3564]	; 14fcc <__assert_fail@plt+0x3a74>
   141dc:	str	r3, [sp, #72]	; 0x48
   141e0:	mov	fp, #1
   141e4:	mov	sl, #2
   141e8:	b	13ff0 <__assert_fail@plt+0x2a98>
   141ec:	mov	r3, #0
   141f0:	str	r3, [sp, #56]	; 0x38
   141f4:	ldr	r3, [sp, #52]	; 0x34
   141f8:	add	r2, r3, r6
   141fc:	str	r2, [sp, #64]	; 0x40
   14200:	ldrb	r4, [r3, r6]
   14204:	cmp	r4, #126	; 0x7e
   14208:	ldrls	pc, [pc, r4, lsl #2]
   1420c:	b	14a48 <__assert_fail@plt+0x34f0>
   14210:	andeq	r4, r1, r8, lsr #8
   14214:	andeq	r4, r1, r8, asr #20
   14218:	andeq	r4, r1, r8, asr #20
   1421c:	andeq	r4, r1, r8, asr #20
   14220:	andeq	r4, r1, r8, asr #20
   14224:	andeq	r4, r1, r8, asr #20
   14228:	andeq	r4, r1, r8, asr #20
   1422c:	andeq	r4, r1, r4, lsl #15
   14230:	andeq	r4, r1, r0, lsr #8
   14234:	andeq	r4, r1, ip, lsr r7
   14238:	andeq	r4, r1, r4, lsr r7
   1423c:	andeq	r4, r1, r4, lsr #13
   14240:	muleq	r1, ip, r6
   14244:	andeq	r4, r1, r8, lsl r4
   14248:	andeq	r4, r1, r8, asr #20
   1424c:	andeq	r4, r1, r8, asr #20
   14250:	andeq	r4, r1, r8, asr #20
   14254:	andeq	r4, r1, r8, asr #20
   14258:	andeq	r4, r1, r8, asr #20
   1425c:	andeq	r4, r1, r8, asr #20
   14260:	andeq	r4, r1, r8, asr #20
   14264:	andeq	r4, r1, r8, asr #20
   14268:	andeq	r4, r1, r8, asr #20
   1426c:	andeq	r4, r1, r8, asr #20
   14270:	andeq	r4, r1, r8, asr #20
   14274:	andeq	r4, r1, r8, asr #20
   14278:	andeq	r4, r1, r8, asr #20
   1427c:	andeq	r4, r1, r8, asr #20
   14280:	andeq	r4, r1, r8, asr #20
   14284:	andeq	r4, r1, r8, asr #20
   14288:	andeq	r4, r1, r8, asr #20
   1428c:	andeq	r4, r1, r8, asr #20
   14290:	ldrdeq	r4, [r1], -r8
   14294:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14298:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1429c:	andeq	r4, r1, ip, lsr #15
   142a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142a4:	andeq	r4, r1, ip, lsl lr
   142a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142ac:	andeq	r4, r1, ip, lsr #19
   142b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142bc:	andeq	r4, r1, ip, lsl lr
   142c0:	andeq	r4, r1, ip, lsl lr
   142c4:	andeq	r4, r1, ip, lsl lr
   142c8:	andeq	r4, r1, ip, lsl lr
   142cc:	andeq	r4, r1, ip, lsl lr
   142d0:	andeq	r4, r1, ip, lsl lr
   142d4:	andeq	r4, r1, ip, lsl lr
   142d8:	andeq	r4, r1, ip, lsl lr
   142dc:	andeq	r4, r1, ip, lsl lr
   142e0:	andeq	r4, r1, ip, lsl lr
   142e4:	andeq	r4, r1, ip, lsl lr
   142e8:	andeq	r4, r1, ip, lsl lr
   142ec:	andeq	r4, r1, ip, lsl lr
   142f0:	andeq	r4, r1, ip, lsl lr
   142f4:	andeq	r4, r1, ip, lsl lr
   142f8:	andeq	r4, r1, ip, lsl lr
   142fc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14300:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14304:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14308:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1430c:	andeq	r4, r1, r0, lsr r5
   14310:	andeq	r4, r1, r8, asr #20
   14314:	andeq	r4, r1, ip, lsl lr
   14318:	andeq	r4, r1, ip, lsl lr
   1431c:	andeq	r4, r1, ip, lsl lr
   14320:	andeq	r4, r1, ip, lsl lr
   14324:	andeq	r4, r1, ip, lsl lr
   14328:	andeq	r4, r1, ip, lsl lr
   1432c:	andeq	r4, r1, ip, lsl lr
   14330:	andeq	r4, r1, ip, lsl lr
   14334:	andeq	r4, r1, ip, lsl lr
   14338:	andeq	r4, r1, ip, lsl lr
   1433c:	andeq	r4, r1, ip, lsl lr
   14340:	andeq	r4, r1, ip, lsl lr
   14344:	andeq	r4, r1, ip, lsl lr
   14348:	andeq	r4, r1, ip, lsl lr
   1434c:	andeq	r4, r1, ip, lsl lr
   14350:	andeq	r4, r1, ip, lsl lr
   14354:	andeq	r4, r1, ip, lsl lr
   14358:	andeq	r4, r1, ip, lsl lr
   1435c:	andeq	r4, r1, ip, lsl lr
   14360:	andeq	r4, r1, ip, lsl lr
   14364:	andeq	r4, r1, ip, lsl lr
   14368:	andeq	r4, r1, ip, lsl lr
   1436c:	andeq	r4, r1, ip, lsl lr
   14370:	andeq	r4, r1, ip, lsl lr
   14374:	andeq	r4, r1, ip, lsl lr
   14378:	andeq	r4, r1, ip, lsl lr
   1437c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14380:	andeq	r4, r1, ip, lsr #13
   14384:	andeq	r4, r1, ip, lsl lr
   14388:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1438c:	andeq	r4, r1, ip, lsl lr
   14390:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14394:	andeq	r4, r1, ip, lsl lr
   14398:	andeq	r4, r1, ip, lsl lr
   1439c:	andeq	r4, r1, ip, lsl lr
   143a0:	andeq	r4, r1, ip, lsl lr
   143a4:	andeq	r4, r1, ip, lsl lr
   143a8:	andeq	r4, r1, ip, lsl lr
   143ac:	andeq	r4, r1, ip, lsl lr
   143b0:	andeq	r4, r1, ip, lsl lr
   143b4:	andeq	r4, r1, ip, lsl lr
   143b8:	andeq	r4, r1, ip, lsl lr
   143bc:	andeq	r4, r1, ip, lsl lr
   143c0:	andeq	r4, r1, ip, lsl lr
   143c4:	andeq	r4, r1, ip, lsl lr
   143c8:	andeq	r4, r1, ip, lsl lr
   143cc:	andeq	r4, r1, ip, lsl lr
   143d0:	andeq	r4, r1, ip, lsl lr
   143d4:	andeq	r4, r1, ip, lsl lr
   143d8:	andeq	r4, r1, ip, lsl lr
   143dc:	andeq	r4, r1, ip, lsl lr
   143e0:	andeq	r4, r1, ip, lsl lr
   143e4:	andeq	r4, r1, ip, lsl lr
   143e8:	andeq	r4, r1, ip, lsl lr
   143ec:	andeq	r4, r1, ip, lsl lr
   143f0:	andeq	r4, r1, ip, lsl lr
   143f4:	andeq	r4, r1, ip, lsl lr
   143f8:	andeq	r4, r1, ip, lsl lr
   143fc:	andeq	r4, r1, ip, lsl #15
   14400:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14404:	andeq	r4, r1, ip, lsl #15
   14408:	andeq	r4, r1, ip, lsr #15
   1440c:	mov	r3, #0
   14410:	str	r3, [sp, #56]	; 0x38
   14414:	b	141f4 <__assert_fail@plt+0x2c9c>
   14418:	mov	r3, #114	; 0x72
   1441c:	b	14740 <__assert_fail@plt+0x31e8>
   14420:	mov	r3, #98	; 0x62
   14424:	b	14758 <__assert_fail@plt+0x3200>
   14428:	ldr	r3, [sp, #48]	; 0x30
   1442c:	cmp	r3, #0
   14430:	beq	14518 <__assert_fail@plt+0x2fc0>
   14434:	ldr	r3, [sp, #32]
   14438:	cmp	r3, #0
   1443c:	bne	14fa0 <__assert_fail@plt+0x3a48>
   14440:	ldr	r3, [sp, #44]	; 0x2c
   14444:	eor	r3, r3, #1
   14448:	cmp	sl, #2
   1444c:	movne	r3, #0
   14450:	andeq	r3, r3, #1
   14454:	cmp	r3, #0
   14458:	moveq	r2, fp
   1445c:	beq	144a0 <__assert_fail@plt+0x2f48>
   14460:	cmp	r7, fp
   14464:	ldrhi	r2, [sp, #36]	; 0x24
   14468:	movhi	r1, #39	; 0x27
   1446c:	strbhi	r1, [r2, fp]
   14470:	add	r2, fp, #1
   14474:	cmp	r7, r2
   14478:	ldrhi	r1, [sp, #36]	; 0x24
   1447c:	movhi	r0, #36	; 0x24
   14480:	strbhi	r0, [r1, r2]
   14484:	add	r2, fp, #2
   14488:	cmp	r7, r2
   1448c:	ldrhi	r1, [sp, #36]	; 0x24
   14490:	movhi	r0, #39	; 0x27
   14494:	strbhi	r0, [r1, r2]
   14498:	add	r2, fp, #3
   1449c:	str	r3, [sp, #44]	; 0x2c
   144a0:	cmp	r7, r2
   144a4:	ldrhi	r3, [sp, #36]	; 0x24
   144a8:	movhi	r1, #92	; 0x5c
   144ac:	strbhi	r1, [r3, r2]
   144b0:	add	fp, r2, #1
   144b4:	cmp	r5, #0
   144b8:	beq	14e24 <__assert_fail@plt+0x38cc>
   144bc:	add	r3, r6, #1
   144c0:	ldr	r1, [sp, #28]
   144c4:	cmp	r1, r3
   144c8:	bls	14e34 <__assert_fail@plt+0x38dc>
   144cc:	ldr	r1, [sp, #52]	; 0x34
   144d0:	ldrb	r3, [r1, r3]
   144d4:	sub	r3, r3, #48	; 0x30
   144d8:	uxtb	r3, r3
   144dc:	cmp	r3, #9
   144e0:	bhi	14e40 <__assert_fail@plt+0x38e8>
   144e4:	cmp	r7, fp
   144e8:	movhi	r3, #48	; 0x30
   144ec:	ldrhi	r1, [sp, #36]	; 0x24
   144f0:	strbhi	r3, [r1, fp]
   144f4:	add	r3, r2, #2
   144f8:	cmp	r7, r3
   144fc:	movhi	r1, #48	; 0x30
   14500:	ldrhi	r0, [sp, #36]	; 0x24
   14504:	strbhi	r1, [r0, r3]
   14508:	add	fp, r2, #3
   1450c:	ldr	r8, [sp, #32]
   14510:	mov	r4, #48	; 0x30
   14514:	b	147f0 <__assert_fail@plt+0x3298>
   14518:	ldr	r3, [sp, #156]	; 0x9c
   1451c:	tst	r3, #1
   14520:	bne	148e4 <__assert_fail@plt+0x338c>
   14524:	ldr	r5, [sp, #48]	; 0x30
   14528:	mov	r8, r5
   1452c:	b	147f0 <__assert_fail@plt+0x3298>
   14530:	cmp	sl, #2
   14534:	beq	1454c <__assert_fail@plt+0x2ff4>
   14538:	cmp	sl, #5
   1453c:	beq	14564 <__assert_fail@plt+0x300c>
   14540:	mov	r8, #0
   14544:	mov	r5, r8
   14548:	b	147f0 <__assert_fail@plt+0x3298>
   1454c:	ldr	r3, [sp, #32]
   14550:	cmp	r3, #0
   14554:	bne	14fb4 <__assert_fail@plt+0x3a5c>
   14558:	mov	r8, r3
   1455c:	mov	r5, r3
   14560:	b	147f0 <__assert_fail@plt+0x3298>
   14564:	ldr	r3, [sp, #156]	; 0x9c
   14568:	tst	r3, #4
   1456c:	beq	14e4c <__assert_fail@plt+0x38f4>
   14570:	add	r3, r6, #2
   14574:	ldr	r2, [sp, #28]
   14578:	cmp	r2, r3
   1457c:	bls	14e58 <__assert_fail@plt+0x3900>
   14580:	ldr	r2, [sp, #52]	; 0x34
   14584:	add	r2, r2, r6
   14588:	ldrb	r2, [r2, #1]
   1458c:	cmp	r2, #63	; 0x3f
   14590:	movne	r8, #0
   14594:	movne	r5, r8
   14598:	bne	147f0 <__assert_fail@plt+0x3298>
   1459c:	ldr	r2, [sp, #52]	; 0x34
   145a0:	ldrb	r2, [r2, r3]
   145a4:	sub	r1, r2, #33	; 0x21
   145a8:	cmp	r1, #29
   145ac:	ldrls	pc, [pc, r1, lsl #2]
   145b0:	b	14e64 <__assert_fail@plt+0x390c>
   145b4:	andeq	r4, r1, ip, lsr #12
   145b8:	andeq	r4, r1, r4, ror #28
   145bc:	andeq	r4, r1, r4, ror #28
   145c0:	andeq	r4, r1, r4, ror #28
   145c4:	andeq	r4, r1, r4, ror #28
   145c8:	andeq	r4, r1, r4, ror #28
   145cc:	andeq	r4, r1, ip, lsr #12
   145d0:	andeq	r4, r1, ip, lsr #12
   145d4:	andeq	r4, r1, ip, lsr #12
   145d8:	andeq	r4, r1, r4, ror #28
   145dc:	andeq	r4, r1, r4, ror #28
   145e0:	andeq	r4, r1, r4, ror #28
   145e4:	andeq	r4, r1, ip, lsr #12
   145e8:	andeq	r4, r1, r4, ror #28
   145ec:	andeq	r4, r1, ip, lsr #12
   145f0:	andeq	r4, r1, r4, ror #28
   145f4:	andeq	r4, r1, r4, ror #28
   145f8:	andeq	r4, r1, r4, ror #28
   145fc:	andeq	r4, r1, r4, ror #28
   14600:	andeq	r4, r1, r4, ror #28
   14604:	andeq	r4, r1, r4, ror #28
   14608:	andeq	r4, r1, r4, ror #28
   1460c:	andeq	r4, r1, r4, ror #28
   14610:	andeq	r4, r1, r4, ror #28
   14614:	andeq	r4, r1, r4, ror #28
   14618:	andeq	r4, r1, r4, ror #28
   1461c:	andeq	r4, r1, r4, ror #28
   14620:	andeq	r4, r1, ip, lsr #12
   14624:	andeq	r4, r1, ip, lsr #12
   14628:	andeq	r4, r1, ip, lsr #12
   1462c:	ldr	r1, [sp, #32]
   14630:	cmp	r1, #0
   14634:	bne	15074 <__assert_fail@plt+0x3b1c>
   14638:	cmp	r7, fp
   1463c:	movhi	r1, #63	; 0x3f
   14640:	ldrhi	r0, [sp, #36]	; 0x24
   14644:	strbhi	r1, [r0, fp]
   14648:	add	r1, fp, #1
   1464c:	cmp	r7, r1
   14650:	ldrhi	r0, [sp, #36]	; 0x24
   14654:	movhi	ip, #34	; 0x22
   14658:	strbhi	ip, [r0, r1]
   1465c:	add	r1, fp, #2
   14660:	cmp	r7, r1
   14664:	ldrhi	r0, [sp, #36]	; 0x24
   14668:	movhi	ip, #34	; 0x22
   1466c:	strbhi	ip, [r0, r1]
   14670:	add	r1, fp, #3
   14674:	cmp	r7, r1
   14678:	movhi	r0, #63	; 0x3f
   1467c:	ldrhi	ip, [sp, #36]	; 0x24
   14680:	strbhi	r0, [ip, r1]
   14684:	add	fp, fp, #4
   14688:	ldr	r5, [sp, #32]
   1468c:	mov	r8, r5
   14690:	mov	r4, r2
   14694:	mov	r6, r3
   14698:	b	147f0 <__assert_fail@plt+0x3298>
   1469c:	mov	r3, #102	; 0x66
   146a0:	b	14758 <__assert_fail@plt+0x3200>
   146a4:	mov	r3, #118	; 0x76
   146a8:	b	14758 <__assert_fail@plt+0x3200>
   146ac:	cmp	sl, #2
   146b0:	beq	1471c <__assert_fail@plt+0x31c4>
   146b4:	ldr	r3, [sp, #48]	; 0x30
   146b8:	ldr	r2, [sp, #32]
   146bc:	and	r3, r3, r2
   146c0:	tst	r9, r3
   146c4:	moveq	r3, r4
   146c8:	beq	14758 <__assert_fail@plt+0x3200>
   146cc:	mov	r8, #0
   146d0:	mov	r5, r8
   146d4:	eor	r5, r5, #1
   146d8:	ldr	r3, [sp, #44]	; 0x2c
   146dc:	and	r5, r5, r3
   146e0:	tst	r5, #255	; 0xff
   146e4:	beq	148c4 <__assert_fail@plt+0x336c>
   146e8:	cmp	r7, fp
   146ec:	ldrhi	r3, [sp, #36]	; 0x24
   146f0:	movhi	r2, #39	; 0x27
   146f4:	strbhi	r2, [r3, fp]
   146f8:	add	r3, fp, #1
   146fc:	cmp	r7, r3
   14700:	ldrhi	r2, [sp, #36]	; 0x24
   14704:	movhi	r1, #39	; 0x27
   14708:	strbhi	r1, [r2, r3]
   1470c:	add	fp, fp, #2
   14710:	mov	r3, #0
   14714:	str	r3, [sp, #44]	; 0x2c
   14718:	b	148c4 <__assert_fail@plt+0x336c>
   1471c:	ldr	r3, [sp, #32]
   14720:	cmp	r3, #0
   14724:	bne	14fc0 <__assert_fail@plt+0x3a68>
   14728:	mov	r8, r3
   1472c:	mov	r5, r3
   14730:	b	146d4 <__assert_fail@plt+0x317c>
   14734:	mov	r3, #110	; 0x6e
   14738:	b	14740 <__assert_fail@plt+0x31e8>
   1473c:	mov	r3, #116	; 0x74
   14740:	ldr	r2, [sp, #32]
   14744:	cmp	sl, #2
   14748:	movne	r2, #0
   1474c:	andeq	r2, r2, #1
   14750:	cmp	r2, #0
   14754:	bne	14778 <__assert_fail@plt+0x3220>
   14758:	ldr	r2, [sp, #48]	; 0x30
   1475c:	cmp	r2, #0
   14760:	moveq	r8, r2
   14764:	moveq	r5, r2
   14768:	beq	147f0 <__assert_fail@plt+0x3298>
   1476c:	mov	r4, r3
   14770:	mov	r8, #0
   14774:	b	14848 <__assert_fail@plt+0x32f0>
   14778:	mov	r8, sl
   1477c:	mov	sl, r7
   14780:	b	14fec <__assert_fail@plt+0x3a94>
   14784:	mov	r3, #97	; 0x61
   14788:	b	14758 <__assert_fail@plt+0x3200>
   1478c:	ldr	r3, [sp, #28]
   14790:	cmn	r3, #1
   14794:	beq	147c0 <__assert_fail@plt+0x3268>
   14798:	ldr	r3, [sp, #28]
   1479c:	subs	r3, r3, #1
   147a0:	movne	r3, #1
   147a4:	cmp	r3, #0
   147a8:	bne	14e70 <__assert_fail@plt+0x3918>
   147ac:	cmp	r6, #0
   147b0:	beq	147d8 <__assert_fail@plt+0x3280>
   147b4:	mov	r8, #0
   147b8:	mov	r5, r8
   147bc:	b	147f0 <__assert_fail@plt+0x3298>
   147c0:	ldr	r3, [sp, #52]	; 0x34
   147c4:	ldrb	r3, [r3, #1]
   147c8:	adds	r3, r3, #0
   147cc:	movne	r3, #1
   147d0:	b	147a4 <__assert_fail@plt+0x324c>
   147d4:	mov	r8, #0
   147d8:	ldr	r5, [sp, #32]
   147dc:	cmp	sl, #2
   147e0:	movne	r5, #0
   147e4:	andeq	r5, r5, #1
   147e8:	cmp	r5, #0
   147ec:	bne	149a0 <__assert_fail@plt+0x3448>
   147f0:	ldr	r3, [sp, #68]	; 0x44
   147f4:	cmp	sl, #2
   147f8:	orreq	r3, r3, #1
   147fc:	eor	r3, r3, #1
   14800:	ldr	r2, [sp, #32]
   14804:	orr	r3, r2, r3
   14808:	tst	r3, #255	; 0xff
   1480c:	beq	1483c <__assert_fail@plt+0x32e4>
   14810:	ldr	r3, [sp, #160]	; 0xa0
   14814:	cmp	r3, #0
   14818:	beq	1483c <__assert_fail@plt+0x32e4>
   1481c:	lsr	r2, r4, #5
   14820:	uxtb	r2, r2
   14824:	and	r3, r4, #31
   14828:	ldr	r1, [sp, #160]	; 0xa0
   1482c:	ldr	r2, [r1, r2, lsl #2]
   14830:	lsr	r3, r2, r3
   14834:	tst	r3, #1
   14838:	bne	14848 <__assert_fail@plt+0x32f0>
   1483c:	ldr	r3, [sp, #56]	; 0x38
   14840:	cmp	r3, #0
   14844:	beq	146d4 <__assert_fail@plt+0x317c>
   14848:	ldr	r3, [sp, #32]
   1484c:	cmp	r3, #0
   14850:	bne	1505c <__assert_fail@plt+0x3b04>
   14854:	ldr	r3, [sp, #44]	; 0x2c
   14858:	eor	r3, r3, #1
   1485c:	cmp	sl, #2
   14860:	movne	r3, #0
   14864:	andeq	r3, r3, #1
   14868:	cmp	r3, #0
   1486c:	beq	148b0 <__assert_fail@plt+0x3358>
   14870:	cmp	r7, fp
   14874:	ldrhi	r2, [sp, #36]	; 0x24
   14878:	movhi	r1, #39	; 0x27
   1487c:	strbhi	r1, [r2, fp]
   14880:	add	r2, fp, #1
   14884:	cmp	r7, r2
   14888:	ldrhi	r1, [sp, #36]	; 0x24
   1488c:	movhi	r0, #36	; 0x24
   14890:	strbhi	r0, [r1, r2]
   14894:	add	r2, fp, #2
   14898:	cmp	r7, r2
   1489c:	ldrhi	r1, [sp, #36]	; 0x24
   148a0:	movhi	r0, #39	; 0x27
   148a4:	strbhi	r0, [r1, r2]
   148a8:	add	fp, fp, #3
   148ac:	str	r3, [sp, #44]	; 0x2c
   148b0:	cmp	r7, fp
   148b4:	ldrhi	r3, [sp, #36]	; 0x24
   148b8:	movhi	r2, #92	; 0x5c
   148bc:	strbhi	r2, [r3, fp]
   148c0:	add	fp, fp, #1
   148c4:	cmp	fp, r7
   148c8:	ldrcc	r3, [sp, #36]	; 0x24
   148cc:	strbcc	r4, [r3, fp]
   148d0:	add	fp, fp, #1
   148d4:	ldr	r3, [sp, #40]	; 0x28
   148d8:	cmp	r8, #0
   148dc:	moveq	r3, #0
   148e0:	str	r3, [sp, #40]	; 0x28
   148e4:	add	r6, r6, #1
   148e8:	ldr	r3, [sp, #28]
   148ec:	cmn	r3, #1
   148f0:	beq	14e7c <__assert_fail@plt+0x3924>
   148f4:	ldr	r3, [sp, #28]
   148f8:	subs	r8, r3, r6
   148fc:	movne	r8, #1
   14900:	cmp	r8, #0
   14904:	beq	14e90 <__assert_fail@plt+0x3938>
   14908:	ldr	r5, [sp, #48]	; 0x30
   1490c:	cmp	sl, #2
   14910:	moveq	r5, #0
   14914:	andne	r5, r5, #1
   14918:	ldr	r3, [sp, #60]	; 0x3c
   1491c:	adds	r9, r3, #0
   14920:	movne	r9, #1
   14924:	ands	r2, r5, r9
   14928:	str	r2, [sp, #56]	; 0x38
   1492c:	beq	141f4 <__assert_fail@plt+0x2c9c>
   14930:	add	r4, r6, r3
   14934:	ldr	r2, [sp, #28]
   14938:	cmp	r3, #1
   1493c:	movls	r3, #0
   14940:	movhi	r3, #1
   14944:	cmn	r2, #1
   14948:	movne	r3, #0
   1494c:	cmp	r3, #0
   14950:	beq	14960 <__assert_fail@plt+0x3408>
   14954:	ldr	r0, [sp, #52]	; 0x34
   14958:	bl	11414 <strlen@plt>
   1495c:	str	r0, [sp, #28]
   14960:	ldr	r3, [sp, #28]
   14964:	cmp	r3, r4
   14968:	bcc	141ec <__assert_fail@plt+0x2c94>
   1496c:	ldr	r2, [sp, #60]	; 0x3c
   14970:	ldr	r1, [sp, #72]	; 0x48
   14974:	ldr	r3, [sp, #52]	; 0x34
   14978:	add	r0, r3, r6
   1497c:	bl	112b8 <memcmp@plt>
   14980:	cmp	r0, #0
   14984:	bne	1440c <__assert_fail@plt+0x2eb4>
   14988:	ldr	r3, [sp, #32]
   1498c:	cmp	r3, #0
   14990:	beq	141f4 <__assert_fail@plt+0x2c9c>
   14994:	mov	r8, sl
   14998:	mov	sl, r7
   1499c:	b	14fec <__assert_fail@plt+0x3a94>
   149a0:	mov	r8, sl
   149a4:	mov	sl, r7
   149a8:	b	14fec <__assert_fail@plt+0x3a94>
   149ac:	cmp	sl, #2
   149b0:	strne	r8, [sp, #80]	; 0x50
   149b4:	movne	r5, #0
   149b8:	bne	147f0 <__assert_fail@plt+0x3298>
   149bc:	ldr	r3, [sp, #32]
   149c0:	cmp	r3, #0
   149c4:	bne	14fd8 <__assert_fail@plt+0x3a80>
   149c8:	ldr	r2, [sp, #76]	; 0x4c
   149cc:	adds	r3, r7, #0
   149d0:	movne	r3, #1
   149d4:	cmp	r2, #0
   149d8:	movne	r3, #0
   149dc:	cmp	r3, #0
   149e0:	movne	r3, #0
   149e4:	bne	14a14 <__assert_fail@plt+0x34bc>
   149e8:	cmp	r7, fp
   149ec:	ldrhi	r3, [sp, #36]	; 0x24
   149f0:	movhi	r2, #39	; 0x27
   149f4:	strbhi	r2, [r3, fp]
   149f8:	add	r3, fp, #1
   149fc:	cmp	r7, r3
   14a00:	ldrhi	r2, [sp, #36]	; 0x24
   14a04:	movhi	r1, #92	; 0x5c
   14a08:	strbhi	r1, [r2, r3]
   14a0c:	mov	r3, r7
   14a10:	ldr	r7, [sp, #76]	; 0x4c
   14a14:	add	r2, fp, #2
   14a18:	cmp	r2, r3
   14a1c:	ldrcc	r1, [sp, #36]	; 0x24
   14a20:	movcc	r0, #39	; 0x27
   14a24:	strbcc	r0, [r1, r2]
   14a28:	add	fp, fp, #3
   14a2c:	ldr	r2, [sp, #32]
   14a30:	mov	r5, r2
   14a34:	str	r8, [sp, #80]	; 0x50
   14a38:	str	r2, [sp, #44]	; 0x2c
   14a3c:	str	r7, [sp, #76]	; 0x4c
   14a40:	mov	r7, r3
   14a44:	b	147f0 <__assert_fail@plt+0x3298>
   14a48:	ldr	r5, [sp, #84]	; 0x54
   14a4c:	cmp	r5, #1
   14a50:	beq	14a80 <__assert_fail@plt+0x3528>
   14a54:	mov	r3, #0
   14a58:	str	r3, [sp, #104]	; 0x68
   14a5c:	str	r3, [sp, #108]	; 0x6c
   14a60:	ldr	r3, [sp, #28]
   14a64:	cmn	r3, #1
   14a68:	beq	14ab4 <__assert_fail@plt+0x355c>
   14a6c:	mov	r3, #0
   14a70:	str	r4, [sp, #88]	; 0x58
   14a74:	str	fp, [sp, #92]	; 0x5c
   14a78:	mov	fp, r3
   14a7c:	b	14bdc <__assert_fail@plt+0x3684>
   14a80:	bl	113fc <__ctype_b_loc@plt>
   14a84:	ldr	r2, [r0]
   14a88:	lsl	r3, r4, #1
   14a8c:	ldrh	r8, [r2, r3]
   14a90:	lsr	r8, r8, #14
   14a94:	and	r8, r8, #1
   14a98:	mov	r2, r5
   14a9c:	eor	r5, r8, #1
   14aa0:	ldr	r3, [sp, #48]	; 0x30
   14aa4:	and	r5, r5, r3
   14aa8:	ands	r5, r5, #255	; 0xff
   14aac:	beq	147f0 <__assert_fail@plt+0x3298>
   14ab0:	b	14c74 <__assert_fail@plt+0x371c>
   14ab4:	ldr	r0, [sp, #52]	; 0x34
   14ab8:	bl	11414 <strlen@plt>
   14abc:	str	r0, [sp, #28]
   14ac0:	b	14a6c <__assert_fail@plt+0x3514>
   14ac4:	mov	r2, fp
   14ac8:	mov	r1, r4
   14acc:	ldr	r4, [sp, #88]	; 0x58
   14ad0:	ldr	fp, [sp, #92]	; 0x5c
   14ad4:	ldr	r0, [sp, #28]
   14ad8:	cmp	r0, r5
   14adc:	bls	14ca8 <__assert_fail@plt+0x3750>
   14ae0:	ldrb	r3, [r1]
   14ae4:	cmp	r3, #0
   14ae8:	beq	14cb0 <__assert_fail@plt+0x3758>
   14aec:	mov	r3, r1
   14af0:	add	r2, r2, #1
   14af4:	add	r1, r6, r2
   14af8:	cmp	r0, r1
   14afc:	bls	14cb8 <__assert_fail@plt+0x3760>
   14b00:	ldrb	r1, [r3, #1]!
   14b04:	cmp	r1, #0
   14b08:	bne	14af0 <__assert_fail@plt+0x3598>
   14b0c:	mov	r8, #0
   14b10:	b	14c6c <__assert_fail@plt+0x3714>
   14b14:	cmp	r4, r5
   14b18:	beq	14bb8 <__assert_fail@plt+0x3660>
   14b1c:	ldrb	r3, [r4, #1]!
   14b20:	sub	r3, r3, #91	; 0x5b
   14b24:	cmp	r3, #33	; 0x21
   14b28:	ldrls	pc, [pc, r3, lsl #2]
   14b2c:	b	14b14 <__assert_fail@plt+0x35bc>
   14b30:	andeq	r4, r1, r4, ror #31
   14b34:	andeq	r4, r1, r4, ror #31
   14b38:	andeq	r4, r1, r4, lsl fp
   14b3c:	andeq	r4, r1, r4, ror #31
   14b40:	andeq	r4, r1, r4, lsl fp
   14b44:	andeq	r4, r1, r4, ror #31
   14b48:	andeq	r4, r1, r4, lsl fp
   14b4c:	andeq	r4, r1, r4, lsl fp
   14b50:	andeq	r4, r1, r4, lsl fp
   14b54:	andeq	r4, r1, r4, lsl fp
   14b58:	andeq	r4, r1, r4, lsl fp
   14b5c:	andeq	r4, r1, r4, lsl fp
   14b60:	andeq	r4, r1, r4, lsl fp
   14b64:	andeq	r4, r1, r4, lsl fp
   14b68:	andeq	r4, r1, r4, lsl fp
   14b6c:	andeq	r4, r1, r4, lsl fp
   14b70:	andeq	r4, r1, r4, lsl fp
   14b74:	andeq	r4, r1, r4, lsl fp
   14b78:	andeq	r4, r1, r4, lsl fp
   14b7c:	andeq	r4, r1, r4, lsl fp
   14b80:	andeq	r4, r1, r4, lsl fp
   14b84:	andeq	r4, r1, r4, lsl fp
   14b88:	andeq	r4, r1, r4, lsl fp
   14b8c:	andeq	r4, r1, r4, lsl fp
   14b90:	andeq	r4, r1, r4, lsl fp
   14b94:	andeq	r4, r1, r4, lsl fp
   14b98:	andeq	r4, r1, r4, lsl fp
   14b9c:	andeq	r4, r1, r4, lsl fp
   14ba0:	andeq	r4, r1, r4, lsl fp
   14ba4:	andeq	r4, r1, r4, lsl fp
   14ba8:	andeq	r4, r1, r4, lsl fp
   14bac:	andeq	r4, r1, r4, lsl fp
   14bb0:	andeq	r4, r1, r4, lsl fp
   14bb4:	andeq	r4, r1, r4, ror #31
   14bb8:	ldr	r0, [sp, #100]	; 0x64
   14bbc:	bl	11324 <iswprint@plt>
   14bc0:	cmp	r0, #0
   14bc4:	moveq	r8, #0
   14bc8:	add	fp, fp, r9
   14bcc:	add	r0, sp, #104	; 0x68
   14bd0:	bl	11294 <mbsinit@plt>
   14bd4:	cmp	r0, #0
   14bd8:	bne	14c4c <__assert_fail@plt+0x36f4>
   14bdc:	add	r5, r6, fp
   14be0:	ldr	r3, [sp, #52]	; 0x34
   14be4:	add	r4, r3, r5
   14be8:	add	r3, sp, #104	; 0x68
   14bec:	ldr	r2, [sp, #28]
   14bf0:	sub	r2, r2, r5
   14bf4:	mov	r1, r4
   14bf8:	add	r0, sp, #100	; 0x64
   14bfc:	bl	24918 <__assert_fail@plt+0x133c0>
   14c00:	subs	r9, r0, #0
   14c04:	beq	14cc0 <__assert_fail@plt+0x3768>
   14c08:	cmn	r9, #1
   14c0c:	beq	14c5c <__assert_fail@plt+0x3704>
   14c10:	cmn	r9, #2
   14c14:	beq	14ac4 <__assert_fail@plt+0x356c>
   14c18:	ldr	r3, [sp, #32]
   14c1c:	cmp	sl, #2
   14c20:	movne	r3, #0
   14c24:	andeq	r3, r3, #1
   14c28:	cmp	r3, #0
   14c2c:	beq	14bb8 <__assert_fail@plt+0x3660>
   14c30:	cmp	r9, #1
   14c34:	bls	14bb8 <__assert_fail@plt+0x3660>
   14c38:	sub	r3, r9, #1
   14c3c:	add	r5, r3, r5
   14c40:	ldr	r3, [sp, #52]	; 0x34
   14c44:	add	r5, r3, r5
   14c48:	b	14b1c <__assert_fail@plt+0x35c4>
   14c4c:	ldr	r4, [sp, #88]	; 0x58
   14c50:	mov	r2, fp
   14c54:	ldr	fp, [sp, #92]	; 0x5c
   14c58:	b	14c6c <__assert_fail@plt+0x3714>
   14c5c:	ldr	r4, [sp, #88]	; 0x58
   14c60:	mov	r2, fp
   14c64:	ldr	fp, [sp, #92]	; 0x5c
   14c68:	mov	r8, #0
   14c6c:	cmp	r2, #1
   14c70:	bls	14a9c <__assert_fail@plt+0x3544>
   14c74:	add	r1, r6, r2
   14c78:	ldr	ip, [sp, #64]	; 0x40
   14c7c:	mov	r5, #0
   14c80:	eor	r3, r8, #1
   14c84:	ldr	r2, [sp, #48]	; 0x30
   14c88:	and	r3, r3, r2
   14c8c:	uxtb	r3, r3
   14c90:	ldr	r9, [sp, #32]
   14c94:	ldr	lr, [sp, #44]	; 0x2c
   14c98:	ldr	r2, [sp, #56]	; 0x38
   14c9c:	str	r8, [sp, #56]	; 0x38
   14ca0:	ldr	r0, [sp, #36]	; 0x24
   14ca4:	b	14d40 <__assert_fail@plt+0x37e8>
   14ca8:	mov	r8, #0
   14cac:	b	14c6c <__assert_fail@plt+0x3714>
   14cb0:	mov	r8, #0
   14cb4:	b	14c6c <__assert_fail@plt+0x3714>
   14cb8:	mov	r8, #0
   14cbc:	b	14c6c <__assert_fail@plt+0x3714>
   14cc0:	ldr	r4, [sp, #88]	; 0x58
   14cc4:	mov	r2, fp
   14cc8:	ldr	fp, [sp, #92]	; 0x5c
   14ccc:	b	14c6c <__assert_fail@plt+0x3714>
   14cd0:	cmp	r2, #0
   14cd4:	beq	14ce8 <__assert_fail@plt+0x3790>
   14cd8:	cmp	r7, fp
   14cdc:	movhi	r2, #92	; 0x5c
   14ce0:	strbhi	r2, [r0, fp]
   14ce4:	add	fp, fp, #1
   14ce8:	add	r8, r6, #1
   14cec:	cmp	r1, r8
   14cf0:	bls	14df8 <__assert_fail@plt+0x38a0>
   14cf4:	eor	r2, r5, #1
   14cf8:	and	r2, r2, lr
   14cfc:	ands	r2, r2, #255	; 0xff
   14d00:	beq	14e14 <__assert_fail@plt+0x38bc>
   14d04:	cmp	r7, fp
   14d08:	movhi	r2, #39	; 0x27
   14d0c:	strbhi	r2, [r0, fp]
   14d10:	add	r2, fp, #1
   14d14:	cmp	r7, r2
   14d18:	movhi	lr, #39	; 0x27
   14d1c:	strbhi	lr, [r0, r2]
   14d20:	add	fp, fp, #2
   14d24:	mov	r6, r8
   14d28:	mov	r2, r3
   14d2c:	mov	lr, r3
   14d30:	cmp	r7, fp
   14d34:	strbhi	r4, [r0, fp]
   14d38:	add	fp, fp, #1
   14d3c:	ldrb	r4, [ip, #1]!
   14d40:	cmp	r3, #0
   14d44:	beq	14cd0 <__assert_fail@plt+0x3778>
   14d48:	cmp	r9, #0
   14d4c:	bne	15050 <__assert_fail@plt+0x3af8>
   14d50:	eor	r5, lr, #1
   14d54:	cmp	sl, #2
   14d58:	movne	r5, #0
   14d5c:	andeq	r5, r5, #1
   14d60:	cmp	r5, #0
   14d64:	beq	14d9c <__assert_fail@plt+0x3844>
   14d68:	cmp	r7, fp
   14d6c:	movhi	lr, #39	; 0x27
   14d70:	strbhi	lr, [r0, fp]
   14d74:	add	lr, fp, #1
   14d78:	cmp	r7, lr
   14d7c:	movhi	r8, #36	; 0x24
   14d80:	strbhi	r8, [r0, lr]
   14d84:	add	lr, fp, #2
   14d88:	cmp	r7, lr
   14d8c:	movhi	r8, #39	; 0x27
   14d90:	strbhi	r8, [r0, lr]
   14d94:	add	fp, fp, #3
   14d98:	mov	lr, r5
   14d9c:	cmp	r7, fp
   14da0:	movhi	r5, #92	; 0x5c
   14da4:	strbhi	r5, [r0, fp]
   14da8:	add	r5, fp, #1
   14dac:	cmp	r7, r5
   14db0:	lsrhi	r8, r4, #6
   14db4:	addhi	r8, r8, #48	; 0x30
   14db8:	strbhi	r8, [r0, r5]
   14dbc:	add	r8, fp, #2
   14dc0:	cmp	r7, r8
   14dc4:	lsrhi	r5, r4, #3
   14dc8:	andhi	r5, r5, #7
   14dcc:	addhi	r5, r5, #48	; 0x30
   14dd0:	strbhi	r5, [r0, r8]
   14dd4:	add	fp, fp, #3
   14dd8:	and	r4, r4, #7
   14ddc:	add	r4, r4, #48	; 0x30
   14de0:	add	r5, r6, #1
   14de4:	cmp	r1, r5
   14de8:	bls	14e04 <__assert_fail@plt+0x38ac>
   14dec:	mov	r6, r5
   14df0:	mov	r5, r3
   14df4:	b	14d30 <__assert_fail@plt+0x37d8>
   14df8:	str	lr, [sp, #44]	; 0x2c
   14dfc:	ldr	r8, [sp, #56]	; 0x38
   14e00:	b	146d4 <__assert_fail@plt+0x317c>
   14e04:	str	lr, [sp, #44]	; 0x2c
   14e08:	ldr	r8, [sp, #56]	; 0x38
   14e0c:	mov	r5, r3
   14e10:	b	146d4 <__assert_fail@plt+0x317c>
   14e14:	mov	r6, r8
   14e18:	b	14d30 <__assert_fail@plt+0x37d8>
   14e1c:	mov	r5, #0
   14e20:	b	147f0 <__assert_fail@plt+0x3298>
   14e24:	mov	r8, r5
   14e28:	ldr	r5, [sp, #48]	; 0x30
   14e2c:	mov	r4, #48	; 0x30
   14e30:	b	147f0 <__assert_fail@plt+0x3298>
   14e34:	ldr	r8, [sp, #32]
   14e38:	mov	r4, #48	; 0x30
   14e3c:	b	147f0 <__assert_fail@plt+0x3298>
   14e40:	ldr	r8, [sp, #32]
   14e44:	mov	r4, #48	; 0x30
   14e48:	b	147f0 <__assert_fail@plt+0x3298>
   14e4c:	mov	r8, #0
   14e50:	mov	r5, r8
   14e54:	b	147f0 <__assert_fail@plt+0x3298>
   14e58:	mov	r8, #0
   14e5c:	mov	r5, r8
   14e60:	b	147f0 <__assert_fail@plt+0x3298>
   14e64:	mov	r8, #0
   14e68:	mov	r5, r8
   14e6c:	b	147f0 <__assert_fail@plt+0x3298>
   14e70:	mov	r8, #0
   14e74:	mov	r5, r8
   14e78:	b	147f0 <__assert_fail@plt+0x3298>
   14e7c:	ldr	r3, [sp, #52]	; 0x34
   14e80:	ldrb	r8, [r3, r6]
   14e84:	adds	r8, r8, #0
   14e88:	movne	r8, #1
   14e8c:	b	14900 <__assert_fail@plt+0x33a8>
   14e90:	cmp	sl, #2
   14e94:	movne	r3, #0
   14e98:	moveq	r3, #1
   14e9c:	ldr	r1, [sp, #32]
   14ea0:	mov	r2, r1
   14ea4:	and	r2, r2, r3
   14ea8:	cmp	fp, #0
   14eac:	movne	r2, #0
   14eb0:	andeq	r2, r2, #1
   14eb4:	cmp	r2, #0
   14eb8:	bne	15068 <__assert_fail@plt+0x3b10>
   14ebc:	eor	r2, r1, #1
   14ec0:	and	r3, r3, r2
   14ec4:	ldr	r1, [sp, #80]	; 0x50
   14ec8:	tst	r1, r3
   14ecc:	beq	14f44 <__assert_fail@plt+0x39ec>
   14ed0:	ldr	r3, [sp, #40]	; 0x28
   14ed4:	cmp	r3, #0
   14ed8:	bne	14f00 <__assert_fail@plt+0x39a8>
   14edc:	ldr	r1, [sp, #76]	; 0x4c
   14ee0:	clz	r3, r7
   14ee4:	lsr	r3, r3, #5
   14ee8:	cmp	r1, #0
   14eec:	moveq	r3, #0
   14ef0:	cmp	r3, #0
   14ef4:	beq	14f44 <__assert_fail@plt+0x39ec>
   14ef8:	ldr	r7, [sp, #76]	; 0x4c
   14efc:	b	13f94 <__assert_fail@plt+0x2a3c>
   14f00:	ldr	r3, [sp, #168]	; 0xa8
   14f04:	str	r3, [sp, #16]
   14f08:	ldr	r3, [sp, #164]	; 0xa4
   14f0c:	str	r3, [sp, #12]
   14f10:	ldr	r3, [sp, #160]	; 0xa0
   14f14:	str	r3, [sp, #8]
   14f18:	ldr	r3, [sp, #156]	; 0x9c
   14f1c:	str	r3, [sp, #4]
   14f20:	mov	r3, #5
   14f24:	str	r3, [sp]
   14f28:	ldr	r3, [sp, #28]
   14f2c:	ldr	r2, [sp, #52]	; 0x34
   14f30:	ldr	r1, [sp, #76]	; 0x4c
   14f34:	ldr	r0, [sp, #36]	; 0x24
   14f38:	bl	13f34 <__assert_fail@plt+0x29dc>
   14f3c:	mov	fp, r0
   14f40:	b	15044 <__assert_fail@plt+0x3aec>
   14f44:	mov	sl, r7
   14f48:	ldr	r3, [sp, #72]	; 0x48
   14f4c:	cmp	r3, #0
   14f50:	moveq	r2, #0
   14f54:	andne	r2, r2, #1
   14f58:	cmp	r2, #0
   14f5c:	beq	14f8c <__assert_fail@plt+0x3a34>
   14f60:	mov	r2, r3
   14f64:	ldrb	r3, [r3]
   14f68:	cmp	r3, #0
   14f6c:	beq	14f8c <__assert_fail@plt+0x3a34>
   14f70:	ldr	r1, [sp, #36]	; 0x24
   14f74:	cmp	sl, fp
   14f78:	strbhi	r3, [r1, fp]
   14f7c:	add	fp, fp, #1
   14f80:	ldrb	r3, [r2, #1]!
   14f84:	cmp	r3, #0
   14f88:	bne	14f74 <__assert_fail@plt+0x3a1c>
   14f8c:	cmp	sl, fp
   14f90:	movhi	r3, #0
   14f94:	ldrhi	r2, [sp, #36]	; 0x24
   14f98:	strbhi	r3, [r2, fp]
   14f9c:	b	15044 <__assert_fail@plt+0x3aec>
   14fa0:	mov	r8, sl
   14fa4:	mov	sl, r7
   14fa8:	ldr	r3, [sp, #32]
   14fac:	str	r3, [sp, #48]	; 0x30
   14fb0:	b	14fec <__assert_fail@plt+0x3a94>
   14fb4:	mov	r8, sl
   14fb8:	mov	sl, r7
   14fbc:	b	14fec <__assert_fail@plt+0x3a94>
   14fc0:	mov	r8, sl
   14fc4:	mov	sl, r7
   14fc8:	b	14fec <__assert_fail@plt+0x3a94>
   14fcc:	andeq	r5, r2, ip, lsl #26
   14fd0:	andeq	r5, r2, r4, ror #29
   14fd4:	ldrdeq	r5, [r2], -r8
   14fd8:	mov	r8, sl
   14fdc:	mov	sl, r7
   14fe0:	b	14fec <__assert_fail@plt+0x3a94>
   14fe4:	mov	r8, sl
   14fe8:	mov	sl, r7
   14fec:	ldr	r3, [sp, #48]	; 0x30
   14ff0:	cmp	r8, #2
   14ff4:	movne	r3, #0
   14ff8:	andeq	r3, r3, #1
   14ffc:	cmp	r3, #0
   15000:	movne	r8, #4
   15004:	ldr	r3, [sp, #168]	; 0xa8
   15008:	str	r3, [sp, #16]
   1500c:	ldr	r3, [sp, #164]	; 0xa4
   15010:	str	r3, [sp, #12]
   15014:	mov	r3, #0
   15018:	str	r3, [sp, #8]
   1501c:	ldr	r3, [sp, #156]	; 0x9c
   15020:	bic	r3, r3, #2
   15024:	str	r3, [sp, #4]
   15028:	str	r8, [sp]
   1502c:	ldr	r3, [sp, #28]
   15030:	ldr	r2, [sp, #52]	; 0x34
   15034:	mov	r1, sl
   15038:	ldr	r0, [sp, #36]	; 0x24
   1503c:	bl	13f34 <__assert_fail@plt+0x29dc>
   15040:	mov	fp, r0
   15044:	mov	r0, fp
   15048:	add	sp, sp, #116	; 0x74
   1504c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15050:	mov	r8, sl
   15054:	mov	sl, r7
   15058:	b	14fec <__assert_fail@plt+0x3a94>
   1505c:	mov	r8, sl
   15060:	mov	sl, r7
   15064:	b	14fec <__assert_fail@plt+0x3a94>
   15068:	mov	r8, sl
   1506c:	mov	sl, r7
   15070:	b	14fec <__assert_fail@plt+0x3a94>
   15074:	mov	r8, sl
   15078:	mov	sl, r7
   1507c:	b	15004 <__assert_fail@plt+0x3aac>
   15080:	mov	r3, #1
   15084:	str	r3, [sp, #32]
   15088:	str	r3, [sp, #48]	; 0x30
   1508c:	str	r3, [sp, #60]	; 0x3c
   15090:	ldr	r3, [pc, #-196]	; 14fd4 <__assert_fail@plt+0x3a7c>
   15094:	str	r3, [sp, #72]	; 0x48
   15098:	mov	fp, #0
   1509c:	mov	sl, #5
   150a0:	b	13ff0 <__assert_fail@plt+0x2a98>
   150a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150a8:	sub	sp, sp, #52	; 0x34
   150ac:	mov	r5, r0
   150b0:	str	r1, [sp, #24]
   150b4:	str	r2, [sp, #28]
   150b8:	mov	r4, r3
   150bc:	bl	1142c <__errno_location@plt>
   150c0:	str	r0, [sp, #32]
   150c4:	ldr	r3, [r0]
   150c8:	str	r3, [sp, #36]	; 0x24
   150cc:	ldr	r3, [pc, #396]	; 15260 <__assert_fail@plt+0x3d08>
   150d0:	ldr	r6, [r3]
   150d4:	cmn	r5, #-2147483647	; 0x80000001
   150d8:	movne	r3, #0
   150dc:	moveq	r3, #1
   150e0:	orrs	r3, r3, r5, lsr #31
   150e4:	bne	15224 <__assert_fail@plt+0x3ccc>
   150e8:	ldr	r3, [pc, #368]	; 15260 <__assert_fail@plt+0x3d08>
   150ec:	ldr	r2, [r3, #4]
   150f0:	cmp	r5, r2
   150f4:	blt	1515c <__assert_fail@plt+0x3c04>
   150f8:	str	r2, [sp, #44]	; 0x2c
   150fc:	add	r3, r3, #8
   15100:	cmp	r6, r3
   15104:	beq	15228 <__assert_fail@plt+0x3cd0>
   15108:	sub	r2, r5, r2
   1510c:	mov	r3, #8
   15110:	str	r3, [sp]
   15114:	mvn	r3, #-2147483648	; 0x80000000
   15118:	add	r2, r2, #1
   1511c:	add	r1, sp, #44	; 0x2c
   15120:	mov	r0, r6
   15124:	bl	23384 <__assert_fail@plt+0x11e2c>
   15128:	mov	r6, r0
   1512c:	ldr	r3, [pc, #300]	; 15260 <__assert_fail@plt+0x3d08>
   15130:	str	r0, [r3]
   15134:	ldr	r7, [pc, #292]	; 15260 <__assert_fail@plt+0x3d08>
   15138:	ldr	r0, [r7, #4]
   1513c:	ldr	r2, [sp, #44]	; 0x2c
   15140:	sub	r2, r2, r0
   15144:	lsl	r2, r2, #3
   15148:	mov	r1, #0
   1514c:	add	r0, r6, r0, lsl #3
   15150:	bl	1145c <memset@plt>
   15154:	ldr	r3, [sp, #44]	; 0x2c
   15158:	str	r3, [r7, #4]
   1515c:	add	fp, r6, r5, lsl #3
   15160:	ldr	r8, [r6, r5, lsl #3]
   15164:	ldr	r7, [fp, #4]
   15168:	ldr	r9, [r4, #4]
   1516c:	orr	r9, r9, #1
   15170:	add	sl, r4, #8
   15174:	ldr	r3, [r4, #44]	; 0x2c
   15178:	str	r3, [sp, #16]
   1517c:	ldr	r3, [r4, #40]	; 0x28
   15180:	str	r3, [sp, #12]
   15184:	str	sl, [sp, #8]
   15188:	str	r9, [sp, #4]
   1518c:	ldr	r3, [r4]
   15190:	str	r3, [sp]
   15194:	ldr	r3, [sp, #28]
   15198:	ldr	r2, [sp, #24]
   1519c:	mov	r1, r8
   151a0:	mov	r0, r7
   151a4:	bl	13f34 <__assert_fail@plt+0x29dc>
   151a8:	cmp	r8, r0
   151ac:	bhi	1520c <__assert_fail@plt+0x3cb4>
   151b0:	add	r8, r0, #1
   151b4:	str	r8, [r6, r5, lsl #3]
   151b8:	ldr	r3, [pc, #164]	; 15264 <__assert_fail@plt+0x3d0c>
   151bc:	cmp	r7, r3
   151c0:	beq	151cc <__assert_fail@plt+0x3c74>
   151c4:	mov	r0, r7
   151c8:	bl	13b40 <__assert_fail@plt+0x25e8>
   151cc:	mov	r0, r8
   151d0:	bl	23200 <__assert_fail@plt+0x11ca8>
   151d4:	mov	r7, r0
   151d8:	str	r0, [fp, #4]
   151dc:	ldr	r3, [r4, #44]	; 0x2c
   151e0:	str	r3, [sp, #16]
   151e4:	ldr	r3, [r4, #40]	; 0x28
   151e8:	str	r3, [sp, #12]
   151ec:	str	sl, [sp, #8]
   151f0:	str	r9, [sp, #4]
   151f4:	ldr	r3, [r4]
   151f8:	str	r3, [sp]
   151fc:	ldr	r3, [sp, #28]
   15200:	ldr	r2, [sp, #24]
   15204:	mov	r1, r8
   15208:	bl	13f34 <__assert_fail@plt+0x29dc>
   1520c:	ldr	r3, [sp, #32]
   15210:	ldr	r2, [sp, #36]	; 0x24
   15214:	str	r2, [r3]
   15218:	mov	r0, r7
   1521c:	add	sp, sp, #52	; 0x34
   15220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15224:	bl	11534 <abort@plt>
   15228:	sub	r2, r5, r2
   1522c:	mov	r3, #8
   15230:	str	r3, [sp]
   15234:	mvn	r3, #-2147483648	; 0x80000000
   15238:	add	r2, r2, #1
   1523c:	add	r1, sp, #44	; 0x2c
   15240:	mov	r0, #0
   15244:	bl	23384 <__assert_fail@plt+0x11e2c>
   15248:	mov	r6, r0
   1524c:	ldr	r3, [pc, #12]	; 15260 <__assert_fail@plt+0x3d08>
   15250:	str	r0, [r3], #8
   15254:	ldm	r3, {r0, r1}
   15258:	stm	r6, {r0, r1}
   1525c:	b	15134 <__assert_fail@plt+0x3bdc>
   15260:	andeq	r7, r3, r8, ror #2
   15264:	andeq	r7, r3, r4, asr #5
   15268:	push	{r4, r5, r6, lr}
   1526c:	mov	r4, r0
   15270:	bl	1142c <__errno_location@plt>
   15274:	mov	r5, r0
   15278:	ldr	r6, [r0]
   1527c:	cmp	r4, #0
   15280:	ldr	r3, [pc, #20]	; 1529c <__assert_fail@plt+0x3d44>
   15284:	moveq	r4, r3
   15288:	mov	r1, #48	; 0x30
   1528c:	mov	r0, r4
   15290:	bl	236ec <__assert_fail@plt+0x12194>
   15294:	str	r6, [r5]
   15298:	pop	{r4, r5, r6, pc}
   1529c:	andeq	r7, r3, r4, asr #7
   152a0:	subs	r3, r0, #0
   152a4:	ldr	r2, [pc, #8]	; 152b4 <__assert_fail@plt+0x3d5c>
   152a8:	moveq	r3, r2
   152ac:	ldr	r0, [r3]
   152b0:	bx	lr
   152b4:	andeq	r7, r3, r4, asr #7
   152b8:	subs	r3, r0, #0
   152bc:	ldr	r2, [pc, #8]	; 152cc <__assert_fail@plt+0x3d74>
   152c0:	moveq	r3, r2
   152c4:	str	r1, [r3]
   152c8:	bx	lr
   152cc:	andeq	r7, r3, r4, asr #7
   152d0:	push	{lr}		; (str lr, [sp, #-4]!)
   152d4:	subs	r3, r0, #0
   152d8:	ldr	r0, [pc, #44]	; 1530c <__assert_fail@plt+0x3db4>
   152dc:	moveq	r3, r0
   152e0:	add	r3, r3, #8
   152e4:	lsr	lr, r1, #5
   152e8:	and	r1, r1, #31
   152ec:	ldr	ip, [r3, lr, lsl #2]
   152f0:	lsr	r0, ip, r1
   152f4:	eor	r2, r2, r0
   152f8:	and	r2, r2, #1
   152fc:	eor	r1, ip, r2, lsl r1
   15300:	str	r1, [r3, lr, lsl #2]
   15304:	and	r0, r0, #1
   15308:	pop	{pc}		; (ldr pc, [sp], #4)
   1530c:	andeq	r7, r3, r4, asr #7
   15310:	subs	r3, r0, #0
   15314:	ldr	r2, [pc, #12]	; 15328 <__assert_fail@plt+0x3dd0>
   15318:	moveq	r3, r2
   1531c:	ldr	r0, [r3, #4]
   15320:	str	r1, [r3, #4]
   15324:	bx	lr
   15328:	andeq	r7, r3, r4, asr #7
   1532c:	subs	r3, r0, #0
   15330:	ldr	r0, [pc, #40]	; 15360 <__assert_fail@plt+0x3e08>
   15334:	moveq	r3, r0
   15338:	mov	r0, #10
   1533c:	str	r0, [r3]
   15340:	cmp	r2, #0
   15344:	cmpne	r1, #0
   15348:	beq	15358 <__assert_fail@plt+0x3e00>
   1534c:	str	r1, [r3, #40]	; 0x28
   15350:	str	r2, [r3, #44]	; 0x2c
   15354:	bx	lr
   15358:	push	{r4, lr}
   1535c:	bl	11534 <abort@plt>
   15360:	andeq	r7, r3, r4, asr #7
   15364:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15368:	sub	sp, sp, #24
   1536c:	mov	r7, r0
   15370:	mov	r8, r1
   15374:	mov	r9, r2
   15378:	mov	sl, r3
   1537c:	ldr	r4, [sp, #56]	; 0x38
   15380:	cmp	r4, #0
   15384:	ldr	r3, [pc, #84]	; 153e0 <__assert_fail@plt+0x3e88>
   15388:	moveq	r4, r3
   1538c:	bl	1142c <__errno_location@plt>
   15390:	mov	r5, r0
   15394:	ldr	r6, [r0]
   15398:	ldr	r3, [r4, #44]	; 0x2c
   1539c:	str	r3, [sp, #16]
   153a0:	ldr	r3, [r4, #40]	; 0x28
   153a4:	str	r3, [sp, #12]
   153a8:	add	r3, r4, #8
   153ac:	str	r3, [sp, #8]
   153b0:	ldr	r3, [r4, #4]
   153b4:	str	r3, [sp, #4]
   153b8:	ldr	r3, [r4]
   153bc:	str	r3, [sp]
   153c0:	mov	r3, sl
   153c4:	mov	r2, r9
   153c8:	mov	r1, r8
   153cc:	mov	r0, r7
   153d0:	bl	13f34 <__assert_fail@plt+0x29dc>
   153d4:	str	r6, [r5]
   153d8:	add	sp, sp, #24
   153dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153e0:	andeq	r7, r3, r4, asr #7
   153e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153e8:	sub	sp, sp, #44	; 0x2c
   153ec:	str	r0, [sp, #28]
   153f0:	str	r1, [sp, #32]
   153f4:	mov	r6, r2
   153f8:	subs	r4, r3, #0
   153fc:	ldr	r3, [pc, #172]	; 154b0 <__assert_fail@plt+0x3f58>
   15400:	moveq	r4, r3
   15404:	bl	1142c <__errno_location@plt>
   15408:	mov	r7, r0
   1540c:	ldr	fp, [r0]
   15410:	ldr	r5, [r4, #4]
   15414:	cmp	r6, #0
   15418:	orreq	r5, r5, #1
   1541c:	add	r9, r4, #8
   15420:	ldr	r3, [r4, #44]	; 0x2c
   15424:	str	r3, [sp, #16]
   15428:	ldr	r3, [r4, #40]	; 0x28
   1542c:	str	r3, [sp, #12]
   15430:	str	r9, [sp, #8]
   15434:	str	r5, [sp, #4]
   15438:	ldr	r3, [r4]
   1543c:	str	r3, [sp]
   15440:	ldr	r3, [sp, #32]
   15444:	ldr	r2, [sp, #28]
   15448:	mov	r1, #0
   1544c:	mov	r0, r1
   15450:	bl	13f34 <__assert_fail@plt+0x29dc>
   15454:	mov	sl, r0
   15458:	add	r8, r0, #1
   1545c:	mov	r0, r8
   15460:	bl	23200 <__assert_fail@plt+0x11ca8>
   15464:	str	r0, [sp, #36]	; 0x24
   15468:	ldr	r3, [r4, #44]	; 0x2c
   1546c:	str	r3, [sp, #16]
   15470:	ldr	r3, [r4, #40]	; 0x28
   15474:	str	r3, [sp, #12]
   15478:	str	r9, [sp, #8]
   1547c:	str	r5, [sp, #4]
   15480:	ldr	r3, [r4]
   15484:	str	r3, [sp]
   15488:	ldr	r3, [sp, #32]
   1548c:	ldr	r2, [sp, #28]
   15490:	mov	r1, r8
   15494:	bl	13f34 <__assert_fail@plt+0x29dc>
   15498:	str	fp, [r7]
   1549c:	cmp	r6, #0
   154a0:	strne	sl, [r6]
   154a4:	ldr	r0, [sp, #36]	; 0x24
   154a8:	add	sp, sp, #44	; 0x2c
   154ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154b0:	andeq	r7, r3, r4, asr #7
   154b4:	push	{r4, lr}
   154b8:	mov	r3, r2
   154bc:	mov	r2, #0
   154c0:	bl	153e4 <__assert_fail@plt+0x3e8c>
   154c4:	pop	{r4, pc}
   154c8:	push	{r4, r5, r6, r7, r8, lr}
   154cc:	ldr	r3, [pc, #140]	; 15560 <__assert_fail@plt+0x4008>
   154d0:	ldr	r7, [r3]
   154d4:	ldr	r3, [r3, #4]
   154d8:	cmp	r3, #1
   154dc:	ble	15508 <__assert_fail@plt+0x3fb0>
   154e0:	mov	r5, r7
   154e4:	mov	r4, #1
   154e8:	ldr	r6, [pc, #112]	; 15560 <__assert_fail@plt+0x4008>
   154ec:	ldr	r0, [r5, #12]
   154f0:	bl	13b40 <__assert_fail@plt+0x25e8>
   154f4:	add	r4, r4, #1
   154f8:	add	r5, r5, #8
   154fc:	ldr	r3, [r6, #4]
   15500:	cmp	r3, r4
   15504:	bgt	154ec <__assert_fail@plt+0x3f94>
   15508:	ldr	r0, [r7, #4]
   1550c:	ldr	r3, [pc, #80]	; 15564 <__assert_fail@plt+0x400c>
   15510:	cmp	r0, r3
   15514:	beq	15530 <__assert_fail@plt+0x3fd8>
   15518:	bl	13b40 <__assert_fail@plt+0x25e8>
   1551c:	ldr	r3, [pc, #60]	; 15560 <__assert_fail@plt+0x4008>
   15520:	mov	r2, #256	; 0x100
   15524:	str	r2, [r3, #8]
   15528:	ldr	r2, [pc, #52]	; 15564 <__assert_fail@plt+0x400c>
   1552c:	str	r2, [r3, #12]
   15530:	ldr	r3, [pc, #48]	; 15568 <__assert_fail@plt+0x4010>
   15534:	cmp	r7, r3
   15538:	beq	15550 <__assert_fail@plt+0x3ff8>
   1553c:	mov	r0, r7
   15540:	bl	13b40 <__assert_fail@plt+0x25e8>
   15544:	ldr	r3, [pc, #20]	; 15560 <__assert_fail@plt+0x4008>
   15548:	add	r2, r3, #8
   1554c:	str	r2, [r3]
   15550:	mov	r2, #1
   15554:	ldr	r3, [pc, #4]	; 15560 <__assert_fail@plt+0x4008>
   15558:	str	r2, [r3, #4]
   1555c:	pop	{r4, r5, r6, r7, r8, pc}
   15560:	andeq	r7, r3, r8, ror #2
   15564:	andeq	r7, r3, r4, asr #5
   15568:	andeq	r7, r3, r0, ror r1
   1556c:	push	{r4, lr}
   15570:	ldr	r3, [pc, #8]	; 15580 <__assert_fail@plt+0x4028>
   15574:	mvn	r2, #0
   15578:	bl	150a4 <__assert_fail@plt+0x3b4c>
   1557c:	pop	{r4, pc}
   15580:	andeq	r7, r3, r4, asr #7
   15584:	push	{r4, lr}
   15588:	ldr	r3, [pc, #4]	; 15594 <__assert_fail@plt+0x403c>
   1558c:	bl	150a4 <__assert_fail@plt+0x3b4c>
   15590:	pop	{r4, pc}
   15594:	andeq	r7, r3, r4, asr #7
   15598:	push	{r4, lr}
   1559c:	mov	r1, r0
   155a0:	mov	r0, #0
   155a4:	bl	1556c <__assert_fail@plt+0x4014>
   155a8:	pop	{r4, pc}
   155ac:	push	{r4, lr}
   155b0:	mov	r2, r1
   155b4:	mov	r1, r0
   155b8:	mov	r0, #0
   155bc:	bl	15584 <__assert_fail@plt+0x402c>
   155c0:	pop	{r4, pc}
   155c4:	push	{r4, r5, lr}
   155c8:	sub	sp, sp, #52	; 0x34
   155cc:	mov	r4, r0
   155d0:	mov	r5, r2
   155d4:	mov	r0, sp
   155d8:	bl	13dcc <__assert_fail@plt+0x2874>
   155dc:	mov	r3, sp
   155e0:	mvn	r2, #0
   155e4:	mov	r1, r5
   155e8:	mov	r0, r4
   155ec:	bl	150a4 <__assert_fail@plt+0x3b4c>
   155f0:	add	sp, sp, #52	; 0x34
   155f4:	pop	{r4, r5, pc}
   155f8:	push	{r4, r5, r6, lr}
   155fc:	sub	sp, sp, #48	; 0x30
   15600:	mov	r4, r0
   15604:	mov	r5, r2
   15608:	mov	r6, r3
   1560c:	mov	r0, sp
   15610:	bl	13dcc <__assert_fail@plt+0x2874>
   15614:	mov	r3, sp
   15618:	mov	r2, r6
   1561c:	mov	r1, r5
   15620:	mov	r0, r4
   15624:	bl	150a4 <__assert_fail@plt+0x3b4c>
   15628:	add	sp, sp, #48	; 0x30
   1562c:	pop	{r4, r5, r6, pc}
   15630:	push	{r4, lr}
   15634:	mov	r2, r1
   15638:	mov	r1, r0
   1563c:	mov	r0, #0
   15640:	bl	155c4 <__assert_fail@plt+0x406c>
   15644:	pop	{r4, pc}
   15648:	push	{r4, lr}
   1564c:	mov	r3, r2
   15650:	mov	r2, r1
   15654:	mov	r1, r0
   15658:	mov	r0, #0
   1565c:	bl	155f8 <__assert_fail@plt+0x40a0>
   15660:	pop	{r4, pc}
   15664:	push	{r4, r5, r6, lr}
   15668:	sub	sp, sp, #48	; 0x30
   1566c:	mov	r4, r0
   15670:	mov	r5, r1
   15674:	mov	r6, r2
   15678:	mov	ip, sp
   1567c:	ldr	lr, [pc, #64]	; 156c4 <__assert_fail@plt+0x416c>
   15680:	ldm	lr!, {r0, r1, r2, r3}
   15684:	stmia	ip!, {r0, r1, r2, r3}
   15688:	ldm	lr!, {r0, r1, r2, r3}
   1568c:	stmia	ip!, {r0, r1, r2, r3}
   15690:	ldm	lr, {r0, r1, r2, r3}
   15694:	stm	ip, {r0, r1, r2, r3}
   15698:	mov	r2, #1
   1569c:	mov	r1, r6
   156a0:	mov	r0, sp
   156a4:	bl	152d0 <__assert_fail@plt+0x3d78>
   156a8:	mov	r3, sp
   156ac:	mov	r2, r5
   156b0:	mov	r1, r4
   156b4:	mov	r0, #0
   156b8:	bl	150a4 <__assert_fail@plt+0x3b4c>
   156bc:	add	sp, sp, #48	; 0x30
   156c0:	pop	{r4, r5, r6, pc}
   156c4:	andeq	r7, r3, r4, asr #7
   156c8:	push	{r4, lr}
   156cc:	mov	r2, r1
   156d0:	mvn	r1, #0
   156d4:	bl	15664 <__assert_fail@plt+0x410c>
   156d8:	pop	{r4, pc}
   156dc:	push	{r4, lr}
   156e0:	mov	r1, #58	; 0x3a
   156e4:	bl	156c8 <__assert_fail@plt+0x4170>
   156e8:	pop	{r4, pc}
   156ec:	push	{r4, lr}
   156f0:	mov	r2, #58	; 0x3a
   156f4:	bl	15664 <__assert_fail@plt+0x410c>
   156f8:	pop	{r4, pc}
   156fc:	push	{r4, r5, lr}
   15700:	sub	sp, sp, #100	; 0x64
   15704:	mov	r4, r0
   15708:	mov	r5, r2
   1570c:	mov	r0, sp
   15710:	bl	13dcc <__assert_fail@plt+0x2874>
   15714:	add	lr, sp, #48	; 0x30
   15718:	mov	ip, sp
   1571c:	ldm	ip!, {r0, r1, r2, r3}
   15720:	stmia	lr!, {r0, r1, r2, r3}
   15724:	ldm	ip!, {r0, r1, r2, r3}
   15728:	stmia	lr!, {r0, r1, r2, r3}
   1572c:	ldm	ip, {r0, r1, r2, r3}
   15730:	stm	lr, {r0, r1, r2, r3}
   15734:	mov	r2, #1
   15738:	mov	r1, #58	; 0x3a
   1573c:	add	r0, sp, #48	; 0x30
   15740:	bl	152d0 <__assert_fail@plt+0x3d78>
   15744:	add	r3, sp, #48	; 0x30
   15748:	mvn	r2, #0
   1574c:	mov	r1, r5
   15750:	mov	r0, r4
   15754:	bl	150a4 <__assert_fail@plt+0x3b4c>
   15758:	add	sp, sp, #100	; 0x64
   1575c:	pop	{r4, r5, pc}
   15760:	push	{r4, r5, r6, r7, lr}
   15764:	sub	sp, sp, #52	; 0x34
   15768:	mov	r4, r0
   1576c:	mov	r6, r1
   15770:	mov	r7, r2
   15774:	mov	r5, r3
   15778:	mov	ip, sp
   1577c:	ldr	lr, [pc, #64]	; 157c4 <__assert_fail@plt+0x426c>
   15780:	ldm	lr!, {r0, r1, r2, r3}
   15784:	stmia	ip!, {r0, r1, r2, r3}
   15788:	ldm	lr!, {r0, r1, r2, r3}
   1578c:	stmia	ip!, {r0, r1, r2, r3}
   15790:	ldm	lr, {r0, r1, r2, r3}
   15794:	stm	ip, {r0, r1, r2, r3}
   15798:	mov	r2, r7
   1579c:	mov	r1, r6
   157a0:	mov	r0, sp
   157a4:	bl	1532c <__assert_fail@plt+0x3dd4>
   157a8:	mov	r3, sp
   157ac:	ldr	r2, [sp, #72]	; 0x48
   157b0:	mov	r1, r5
   157b4:	mov	r0, r4
   157b8:	bl	150a4 <__assert_fail@plt+0x3b4c>
   157bc:	add	sp, sp, #52	; 0x34
   157c0:	pop	{r4, r5, r6, r7, pc}
   157c4:	andeq	r7, r3, r4, asr #7
   157c8:	push	{lr}		; (str lr, [sp, #-4]!)
   157cc:	sub	sp, sp, #12
   157d0:	mvn	ip, #0
   157d4:	str	ip, [sp]
   157d8:	bl	15760 <__assert_fail@plt+0x4208>
   157dc:	add	sp, sp, #12
   157e0:	pop	{pc}		; (ldr pc, [sp], #4)
   157e4:	push	{r4, lr}
   157e8:	mov	r3, r2
   157ec:	mov	r2, r1
   157f0:	mov	r1, r0
   157f4:	mov	r0, #0
   157f8:	bl	157c8 <__assert_fail@plt+0x4270>
   157fc:	pop	{r4, pc}
   15800:	push	{lr}		; (str lr, [sp, #-4]!)
   15804:	sub	sp, sp, #12
   15808:	str	r3, [sp]
   1580c:	mov	r3, r2
   15810:	mov	r2, r1
   15814:	mov	r1, r0
   15818:	mov	r0, #0
   1581c:	bl	15760 <__assert_fail@plt+0x4208>
   15820:	add	sp, sp, #12
   15824:	pop	{pc}		; (ldr pc, [sp], #4)
   15828:	push	{r4, lr}
   1582c:	ldr	r3, [pc, #4]	; 15838 <__assert_fail@plt+0x42e0>
   15830:	bl	150a4 <__assert_fail@plt+0x3b4c>
   15834:	pop	{r4, pc}
   15838:	andeq	r7, r3, r8, ror r1
   1583c:	push	{r4, lr}
   15840:	mov	r2, r1
   15844:	mov	r1, r0
   15848:	mov	r0, #0
   1584c:	bl	15828 <__assert_fail@plt+0x42d0>
   15850:	pop	{r4, pc}
   15854:	push	{r4, lr}
   15858:	mvn	r2, #0
   1585c:	bl	15828 <__assert_fail@plt+0x42d0>
   15860:	pop	{r4, pc}
   15864:	push	{r4, lr}
   15868:	mov	r1, r0
   1586c:	mov	r0, #0
   15870:	bl	15854 <__assert_fail@plt+0x42fc>
   15874:	pop	{r4, pc}
   15878:	ldr	r3, [r0, #80]	; 0x50
   1587c:	cmp	r3, #1
   15880:	beq	158d4 <__assert_fail@plt+0x437c>
   15884:	add	ip, r1, #1
   15888:	ldr	r3, [r0, #28]
   1588c:	cmp	ip, r3
   15890:	bge	158dc <__assert_fail@plt+0x4384>
   15894:	ldr	r0, [r0, #8]
   15898:	add	r2, r0, ip, lsl #2
   1589c:	ldr	r0, [r0, ip, lsl #2]
   158a0:	cmn	r0, #1
   158a4:	bne	158e4 <__assert_fail@plt+0x438c>
   158a8:	sub	r1, r3, r1
   158ac:	mov	r3, #2
   158b0:	mov	r0, r3
   158b4:	cmp	r3, r1
   158b8:	beq	158d0 <__assert_fail@plt+0x4378>
   158bc:	add	r3, r3, #1
   158c0:	ldr	ip, [r2, #4]!
   158c4:	cmn	ip, #1
   158c8:	beq	158b0 <__assert_fail@plt+0x4358>
   158cc:	bx	lr
   158d0:	bx	lr
   158d4:	mov	r0, #1
   158d8:	bx	lr
   158dc:	mov	r0, #1
   158e0:	bx	lr
   158e4:	mov	r0, #1
   158e8:	bx	lr
   158ec:	ldr	r3, [r0, #80]	; 0x50
   158f0:	cmp	r3, #1
   158f4:	ldreq	r3, [r0, #4]
   158f8:	ldrbeq	r0, [r3, r1]
   158fc:	ldrne	r3, [r0, #8]
   15900:	ldrne	r0, [r3, r1, lsl #2]
   15904:	bx	lr
   15908:	ldr	ip, [r0, #36]	; 0x24
   1590c:	ldr	r3, [r0, #48]	; 0x30
   15910:	cmp	ip, r3
   15914:	movge	ip, r3
   15918:	ldr	r3, [r0, #28]
   1591c:	cmp	ip, r3
   15920:	ble	15950 <__assert_fail@plt+0x43f8>
   15924:	ldr	r2, [r0]
   15928:	ldr	r1, [r0, #24]
   1592c:	add	r2, r2, r3
   15930:	ldrb	r2, [r2, r1]
   15934:	ldr	r1, [r0, #64]	; 0x40
   15938:	ldrb	r1, [r1, r2]
   1593c:	ldr	r2, [r0, #4]
   15940:	strb	r1, [r2, r3]
   15944:	add	r3, r3, #1
   15948:	cmp	ip, r3
   1594c:	bne	15924 <__assert_fail@plt+0x43cc>
   15950:	str	r3, [r0, #28]
   15954:	str	r3, [r0, #32]
   15958:	bx	lr
   1595c:	push	{r4, r5, lr}
   15960:	mov	r4, r0
   15964:	cmp	r1, #0
   15968:	cmpne	r0, #0
   1596c:	moveq	r0, #1
   15970:	movne	r0, #0
   15974:	beq	159c8 <__assert_fail@plt+0x4470>
   15978:	mov	r5, r1
   1597c:	ldr	r2, [r4, #4]
   15980:	ldr	r3, [r1, #4]
   15984:	cmp	r2, r3
   15988:	subeq	r3, r2, #1
   1598c:	lsleq	r3, r3, #2
   15990:	beq	15998 <__assert_fail@plt+0x4440>
   15994:	pop	{r4, r5, pc}
   15998:	subs	r2, r2, #1
   1599c:	bmi	159c0 <__assert_fail@plt+0x4468>
   159a0:	ldr	ip, [r4, #8]
   159a4:	ldr	lr, [ip, r3]
   159a8:	ldr	ip, [r5, #8]
   159ac:	ldr	ip, [ip, r3]
   159b0:	sub	r3, r3, #4
   159b4:	cmp	lr, ip
   159b8:	beq	15998 <__assert_fail@plt+0x4440>
   159bc:	pop	{r4, r5, pc}
   159c0:	mov	r0, #1
   159c4:	pop	{r4, r5, pc}
   159c8:	mov	r0, #0
   159cc:	pop	{r4, r5, pc}
   159d0:	push	{r4, lr}
   159d4:	ldr	lr, [r0, #4]
   159d8:	cmp	lr, #0
   159dc:	ble	15a60 <__assert_fail@plt+0x4508>
   159e0:	sub	lr, lr, #1
   159e4:	mov	ip, #0
   159e8:	cmp	ip, lr
   159ec:	bcs	15a40 <__assert_fail@plt+0x44e8>
   159f0:	add	r2, ip, lr
   159f4:	lsr	r2, r2, #1
   159f8:	ldr	r4, [r0, #8]
   159fc:	ldr	r3, [r4, r2, lsl #2]
   15a00:	cmp	r1, r3
   15a04:	bgt	15a2c <__assert_fail@plt+0x44d4>
   15a08:	cmp	ip, r2
   15a0c:	bcs	15a40 <__assert_fail@plt+0x44e8>
   15a10:	add	r3, ip, r2
   15a14:	lsr	r3, r3, #1
   15a18:	ldr	lr, [r4, r3, lsl #2]
   15a1c:	cmp	lr, r1
   15a20:	blt	15a34 <__assert_fail@plt+0x44dc>
   15a24:	mov	r2, r3
   15a28:	b	15a08 <__assert_fail@plt+0x44b0>
   15a2c:	mov	r3, r2
   15a30:	mov	r2, lr
   15a34:	add	ip, r3, #1
   15a38:	mov	lr, r2
   15a3c:	b	159e8 <__assert_fail@plt+0x4490>
   15a40:	ldr	r3, [r0, #8]
   15a44:	ldr	r3, [r3, ip, lsl #2]
   15a48:	cmp	r1, r3
   15a4c:	beq	15a58 <__assert_fail@plt+0x4500>
   15a50:	mov	r0, #0
   15a54:	pop	{r4, pc}
   15a58:	add	r0, ip, #1
   15a5c:	pop	{r4, pc}
   15a60:	mov	r0, #0
   15a64:	pop	{r4, pc}
   15a68:	cmp	r1, #0
   15a6c:	bxlt	lr
   15a70:	ldr	r3, [r0, #4]
   15a74:	cmp	r1, r3
   15a78:	bxge	lr
   15a7c:	sub	r3, r3, #1
   15a80:	str	r3, [r0, #4]
   15a84:	cmp	r1, r3
   15a88:	bxge	lr
   15a8c:	push	{lr}		; (str lr, [sp, #-4]!)
   15a90:	lsl	r3, r1, #2
   15a94:	ldr	ip, [r0, #8]
   15a98:	add	r2, r3, #4
   15a9c:	ldr	lr, [ip, r2]
   15aa0:	str	lr, [ip, r3]
   15aa4:	add	r1, r1, #1
   15aa8:	mov	r3, r2
   15aac:	ldr	r2, [r0, #4]
   15ab0:	cmp	r2, r1
   15ab4:	bgt	15a94 <__assert_fail@plt+0x453c>
   15ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   15abc:	ldrb	r3, [r1, #24]
   15ac0:	cmp	r3, #4
   15ac4:	beq	15ad8 <__assert_fail@plt+0x4580>
   15ac8:	cmp	r3, #17
   15acc:	beq	15b04 <__assert_fail@plt+0x45ac>
   15ad0:	mov	r0, #0
   15ad4:	bx	lr
   15ad8:	ldr	r3, [r0, #132]	; 0x84
   15adc:	cmp	r3, #0
   15ae0:	beq	15ad0 <__assert_fail@plt+0x4578>
   15ae4:	ldr	r2, [r1, #20]
   15ae8:	ldr	r2, [r3, r2, lsl #2]
   15aec:	str	r2, [r1, #20]
   15af0:	ldr	r3, [r0, #80]	; 0x50
   15af4:	mov	r1, #1
   15af8:	orr	r3, r3, r1, lsl r2
   15afc:	str	r3, [r0, #80]	; 0x50
   15b00:	b	15ad0 <__assert_fail@plt+0x4578>
   15b04:	ldr	r3, [r1, #4]
   15b08:	cmp	r3, #0
   15b0c:	beq	15ad0 <__assert_fail@plt+0x4578>
   15b10:	ldrb	r2, [r3, #24]
   15b14:	cmp	r2, #17
   15b18:	bne	15ad0 <__assert_fail@plt+0x4578>
   15b1c:	ldr	r2, [r3, #20]
   15b20:	ldr	r3, [r3, #4]
   15b24:	str	r3, [r1, #4]
   15b28:	cmp	r3, #0
   15b2c:	strne	r1, [r3]
   15b30:	ldr	r3, [r0, #132]	; 0x84
   15b34:	ldr	r1, [r1, #20]
   15b38:	ldr	r1, [r3, r1, lsl #2]
   15b3c:	str	r1, [r3, r2, lsl #2]
   15b40:	cmp	r2, #31
   15b44:	ldrle	r3, [r0, #80]	; 0x50
   15b48:	movle	r1, #1
   15b4c:	bicle	r2, r3, r1, lsl r2
   15b50:	strle	r2, [r0, #80]	; 0x50
   15b54:	b	15ad0 <__assert_fail@plt+0x4578>
   15b58:	ldrb	r3, [r1, #24]
   15b5c:	cmp	r3, #11
   15b60:	beq	15b90 <__assert_fail@plt+0x4638>
   15b64:	cmp	r3, #16
   15b68:	beq	15ba0 <__assert_fail@plt+0x4648>
   15b6c:	ldr	r3, [r1, #4]
   15b70:	cmp	r3, #0
   15b74:	ldrne	r2, [r1, #16]
   15b78:	strne	r2, [r3, #16]
   15b7c:	ldr	r3, [r1, #8]
   15b80:	cmp	r3, #0
   15b84:	ldrne	r2, [r1, #16]
   15b88:	strne	r2, [r3, #16]
   15b8c:	b	15b98 <__assert_fail@plt+0x4640>
   15b90:	ldr	r3, [r1, #4]
   15b94:	str	r1, [r3, #16]
   15b98:	mov	r0, #0
   15b9c:	bx	lr
   15ba0:	ldr	r3, [r1, #4]
   15ba4:	ldr	r2, [r1, #8]
   15ba8:	ldr	r2, [r2, #12]
   15bac:	str	r2, [r3, #16]
   15bb0:	ldr	r3, [r1, #8]
   15bb4:	ldr	r2, [r1, #16]
   15bb8:	str	r2, [r3, #16]
   15bbc:	b	15b98 <__assert_fail@plt+0x4640>
   15bc0:	ldr	r3, [r1, #40]	; 0x28
   15bc4:	ldr	ip, [r1, #56]	; 0x38
   15bc8:	cmp	ip, r3
   15bcc:	ble	15c44 <__assert_fail@plt+0x46ec>
   15bd0:	push	{lr}		; (str lr, [sp, #-4]!)
   15bd4:	ldr	ip, [r1, #4]
   15bd8:	ldrb	r3, [ip, r3]
   15bdc:	strb	r3, [r0]
   15be0:	ldr	ip, [r1, #80]	; 0x50
   15be4:	cmp	ip, #1
   15be8:	ble	15c0c <__assert_fail@plt+0x46b4>
   15bec:	ldr	ip, [r1, #40]	; 0x28
   15bf0:	ldr	lr, [r1, #28]
   15bf4:	cmp	ip, lr
   15bf8:	beq	15c0c <__assert_fail@plt+0x46b4>
   15bfc:	ldr	lr, [r1, #8]
   15c00:	ldr	ip, [lr, ip, lsl #2]
   15c04:	cmn	ip, #1
   15c08:	beq	15c54 <__assert_fail@plt+0x46fc>
   15c0c:	cmp	r3, #92	; 0x5c
   15c10:	beq	15c64 <__assert_fail@plt+0x470c>
   15c14:	cmp	r3, #91	; 0x5b
   15c18:	beq	15cb0 <__assert_fail@plt+0x4758>
   15c1c:	cmp	r3, #93	; 0x5d
   15c20:	beq	15d3c <__assert_fail@plt+0x47e4>
   15c24:	cmp	r3, #94	; 0x5e
   15c28:	beq	15d4c <__assert_fail@plt+0x47f4>
   15c2c:	cmp	r3, #45	; 0x2d
   15c30:	bne	15c80 <__assert_fail@plt+0x4728>
   15c34:	mov	r3, #22
   15c38:	strb	r3, [r0, #4]
   15c3c:	mov	r0, #1
   15c40:	pop	{pc}		; (ldr pc, [sp], #4)
   15c44:	mov	r3, #2
   15c48:	strb	r3, [r0, #4]
   15c4c:	mov	r0, #0
   15c50:	bx	lr
   15c54:	mov	r3, #1
   15c58:	strb	r3, [r0, #4]
   15c5c:	mov	r0, r3
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	tst	r2, #1
   15c68:	beq	15c80 <__assert_fail@plt+0x4728>
   15c6c:	ldr	r3, [r1, #40]	; 0x28
   15c70:	add	r3, r3, #1
   15c74:	ldr	r2, [r1, #48]	; 0x30
   15c78:	cmp	r3, r2
   15c7c:	blt	15c90 <__assert_fail@plt+0x4738>
   15c80:	mov	r3, #1
   15c84:	strb	r3, [r0, #4]
   15c88:	mov	r0, r3
   15c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c90:	str	r3, [r1, #40]	; 0x28
   15c94:	ldr	r2, [r1, #4]
   15c98:	ldrb	r3, [r2, r3]
   15c9c:	strb	r3, [r0]
   15ca0:	mov	r3, #1
   15ca4:	strb	r3, [r0, #4]
   15ca8:	mov	r0, r3
   15cac:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb0:	ldr	r3, [r1, #40]	; 0x28
   15cb4:	add	lr, r3, #1
   15cb8:	ldr	ip, [r1, #48]	; 0x30
   15cbc:	cmp	lr, ip
   15cc0:	bge	15d24 <__assert_fail@plt+0x47cc>
   15cc4:	ldr	r1, [r1, #4]
   15cc8:	add	r3, r1, r3
   15ccc:	ldrb	r3, [r3, #1]
   15cd0:	strb	r3, [r0]
   15cd4:	cmp	r3, #58	; 0x3a
   15cd8:	beq	15d0c <__assert_fail@plt+0x47b4>
   15cdc:	cmp	r3, #61	; 0x3d
   15ce0:	beq	15cfc <__assert_fail@plt+0x47a4>
   15ce4:	cmp	r3, #46	; 0x2e
   15ce8:	bne	15d24 <__assert_fail@plt+0x47cc>
   15cec:	mov	r3, #26
   15cf0:	strb	r3, [r0, #4]
   15cf4:	mov	r0, #2
   15cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cfc:	mov	r3, #28
   15d00:	strb	r3, [r0, #4]
   15d04:	mov	r0, #2
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	tst	r2, #4
   15d10:	beq	15d24 <__assert_fail@plt+0x47cc>
   15d14:	mov	r3, #30
   15d18:	strb	r3, [r0, #4]
   15d1c:	mov	r0, #2
   15d20:	pop	{pc}		; (ldr pc, [sp], #4)
   15d24:	mov	r3, #1
   15d28:	strb	r3, [r0, #4]
   15d2c:	mov	r2, #91	; 0x5b
   15d30:	strb	r2, [r0]
   15d34:	mov	r0, r3
   15d38:	pop	{pc}		; (ldr pc, [sp], #4)
   15d3c:	mov	r3, #21
   15d40:	strb	r3, [r0, #4]
   15d44:	mov	r0, #1
   15d48:	pop	{pc}		; (ldr pc, [sp], #4)
   15d4c:	mov	r3, #25
   15d50:	strb	r3, [r0, #4]
   15d54:	mov	r0, #1
   15d58:	pop	{pc}		; (ldr pc, [sp], #4)
   15d5c:	ldrb	r3, [r1, #24]
   15d60:	cmp	r3, #17
   15d64:	beq	15d70 <__assert_fail@plt+0x4818>
   15d68:	mov	r0, #0
   15d6c:	bx	lr
   15d70:	ldr	r3, [r1, #20]
   15d74:	cmp	r0, r3
   15d78:	ldrbeq	r3, [r1, #26]
   15d7c:	orreq	r3, r3, #8
   15d80:	strbeq	r3, [r1, #26]
   15d84:	b	15d68 <__assert_fail@plt+0x4810>
   15d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d8c:	sub	sp, sp, #52	; 0x34
   15d90:	str	r0, [sp, #8]
   15d94:	str	r1, [sp, #12]
   15d98:	mov	r7, r2
   15d9c:	str	r3, [sp, #40]	; 0x28
   15da0:	ldr	r9, [r0, #84]	; 0x54
   15da4:	add	r3, r3, r3, lsl #1
   15da8:	ldr	sl, [r9, #24]
   15dac:	add	sl, sl, r3, lsl #2
   15db0:	ldr	r3, [sl, #4]
   15db4:	cmp	r3, #0
   15db8:	ble	15f64 <__assert_fail@plt+0x4a0c>
   15dbc:	ldr	r3, [sp, #88]	; 0x58
   15dc0:	add	r3, r3, r3, lsl #1
   15dc4:	lsl	r3, r3, #3
   15dc8:	mov	r2, #1
   15dcc:	lsl	r2, r2, r7
   15dd0:	str	r2, [sp, #20]
   15dd4:	mvn	r2, r2
   15dd8:	str	r2, [sp, #24]
   15ddc:	mov	r8, #0
   15de0:	mov	r2, r1
   15de4:	and	r1, r1, #1
   15de8:	str	r1, [sp, #28]
   15dec:	and	r2, r2, #2
   15df0:	str	r2, [sp, #16]
   15df4:	add	r3, r3, #24
   15df8:	str	r3, [sp, #44]	; 0x2c
   15dfc:	b	15ee0 <__assert_fail@plt+0x4988>
   15e00:	ldr	r3, [r9, #20]
   15e04:	add	r3, r3, fp
   15e08:	ldr	r3, [r3, #8]
   15e0c:	ldr	r3, [r3]
   15e10:	cmp	sl, r3
   15e14:	beq	15e98 <__assert_fail@plt+0x4940>
   15e18:	str	r8, [sp]
   15e1c:	mov	r2, r7
   15e20:	ldr	r1, [sp, #12]
   15e24:	ldr	r0, [sp, #8]
   15e28:	bl	15d88 <__assert_fail@plt+0x4830>
   15e2c:	cmn	r0, #1
   15e30:	beq	15ea4 <__assert_fail@plt+0x494c>
   15e34:	cmp	r0, #0
   15e38:	bne	15e48 <__assert_fail@plt+0x48f0>
   15e3c:	ldr	r3, [sp, #16]
   15e40:	cmp	r3, #0
   15e44:	bne	15ea4 <__assert_fail@plt+0x494c>
   15e48:	cmp	r7, #31
   15e4c:	ldrle	r3, [r6, #-8]
   15e50:	ldrle	r2, [sp, #24]
   15e54:	andle	r3, r3, r2
   15e58:	strle	r3, [r6, #-8]
   15e5c:	add	r4, r4, #24
   15e60:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   15e64:	cmp	r3, #0
   15e68:	beq	15eac <__assert_fail@plt+0x4954>
   15e6c:	mov	r6, r4
   15e70:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15e74:	cmp	r5, r3
   15e78:	bne	15e5c <__assert_fail@plt+0x4904>
   15e7c:	cmp	r7, #31
   15e80:	bgt	15e00 <__assert_fail@plt+0x48a8>
   15e84:	ldr	r3, [r4, #-8]
   15e88:	ldr	r2, [sp, #20]
   15e8c:	tst	r2, r3
   15e90:	beq	15e5c <__assert_fail@plt+0x4904>
   15e94:	b	15e00 <__assert_fail@plt+0x48a8>
   15e98:	ldr	r3, [sp, #12]
   15e9c:	ands	r0, r3, #1
   15ea0:	mvnne	r0, #0
   15ea4:	add	sp, sp, #52	; 0x34
   15ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eac:	ldr	sl, [sp, #32]
   15eb0:	ldr	r8, [sp, #36]	; 0x24
   15eb4:	b	15ed0 <__assert_fail@plt+0x4978>
   15eb8:	ldr	r3, [sp, #28]
   15ebc:	cmp	r3, #0
   15ec0:	beq	15ed0 <__assert_fail@plt+0x4978>
   15ec4:	ldr	r3, [r2, r5, lsl #3]
   15ec8:	cmp	r3, r7
   15ecc:	beq	15f74 <__assert_fail@plt+0x4a1c>
   15ed0:	add	r8, r8, #1
   15ed4:	ldr	r3, [sl, #4]
   15ed8:	cmp	r3, r8
   15edc:	ble	15f64 <__assert_fail@plt+0x4a0c>
   15ee0:	ldr	r3, [sl, #8]
   15ee4:	ldr	r5, [r3, r8, lsl #2]
   15ee8:	ldr	r2, [r9]
   15eec:	add	r3, r2, r5, lsl #3
   15ef0:	ldrb	r3, [r3, #4]
   15ef4:	cmp	r3, #8
   15ef8:	beq	15eb8 <__assert_fail@plt+0x4960>
   15efc:	cmp	r3, #9
   15f00:	beq	15f44 <__assert_fail@plt+0x49ec>
   15f04:	cmp	r3, #4
   15f08:	bne	15ed0 <__assert_fail@plt+0x4978>
   15f0c:	ldr	r3, [sp, #88]	; 0x58
   15f10:	cmn	r3, #1
   15f14:	beq	15ed0 <__assert_fail@plt+0x4978>
   15f18:	add	fp, r5, r5, lsl #1
   15f1c:	lsl	fp, fp, #2
   15f20:	ldr	r3, [sp, #8]
   15f24:	ldr	r4, [r3, #116]	; 0x74
   15f28:	ldr	r3, [sp, #44]	; 0x2c
   15f2c:	add	r4, r4, r3
   15f30:	str	sl, [sp, #32]
   15f34:	str	r8, [sp, #36]	; 0x24
   15f38:	ldr	sl, [sp, #40]	; 0x28
   15f3c:	ldr	r8, [sp, #88]	; 0x58
   15f40:	b	15e6c <__assert_fail@plt+0x4914>
   15f44:	ldr	r3, [sp, #16]
   15f48:	cmp	r3, #0
   15f4c:	beq	15ed0 <__assert_fail@plt+0x4978>
   15f50:	ldr	r3, [r2, r5, lsl #3]
   15f54:	cmp	r7, r3
   15f58:	bne	15ed0 <__assert_fail@plt+0x4978>
   15f5c:	mov	r0, #0
   15f60:	b	15ea4 <__assert_fail@plt+0x494c>
   15f64:	ldr	r3, [sp, #12]
   15f68:	lsr	r0, r3, #1
   15f6c:	and	r0, r0, #1
   15f70:	b	15ea4 <__assert_fail@plt+0x494c>
   15f74:	mvn	r0, #0
   15f78:	b	15ea4 <__assert_fail@plt+0x494c>
   15f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   15f80:	sub	sp, sp, #12
   15f84:	ldr	lr, [sp, #16]
   15f88:	add	r1, r1, r1, lsl #1
   15f8c:	ldr	ip, [r0, #116]	; 0x74
   15f90:	add	r1, ip, r1, lsl #3
   15f94:	ldr	ip, [r1, #8]
   15f98:	cmp	ip, lr
   15f9c:	bgt	15fec <__assert_fail@plt+0x4a94>
   15fa0:	ldr	r1, [r1, #12]
   15fa4:	cmp	lr, r1
   15fa8:	movgt	r1, #1
   15fac:	bgt	15fcc <__assert_fail@plt+0x4a74>
   15fb0:	cmp	lr, r1
   15fb4:	moveq	r1, #2
   15fb8:	movne	r1, #0
   15fbc:	cmp	ip, lr
   15fc0:	orreq	r1, r1, #1
   15fc4:	cmp	r1, #0
   15fc8:	bne	15fd8 <__assert_fail@plt+0x4a80>
   15fcc:	mov	r0, r1
   15fd0:	add	sp, sp, #12
   15fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd8:	ldr	ip, [sp, #20]
   15fdc:	str	ip, [sp]
   15fe0:	bl	15d88 <__assert_fail@plt+0x4830>
   15fe4:	mov	r1, r0
   15fe8:	b	15fcc <__assert_fail@plt+0x4a74>
   15fec:	mvn	r1, #0
   15ff0:	b	15fcc <__assert_fail@plt+0x4a74>
   15ff4:	push	{r4, r5, lr}
   15ff8:	mov	r4, r0
   15ffc:	ldr	r5, [r0, #108]	; 0x6c
   16000:	mov	r2, r5
   16004:	mov	r0, #0
   16008:	cmp	r0, r2
   1600c:	bge	16078 <__assert_fail@plt+0x4b20>
   16010:	add	ip, r0, r2
   16014:	add	ip, ip, ip, lsr #31
   16018:	asr	ip, ip, #1
   1601c:	ldr	lr, [r4, #116]	; 0x74
   16020:	add	r3, ip, ip, lsl #1
   16024:	add	r3, lr, r3, lsl #3
   16028:	ldr	r3, [r3, #4]
   1602c:	cmp	r1, r3
   16030:	bgt	16064 <__assert_fail@plt+0x4b0c>
   16034:	cmp	r0, ip
   16038:	bge	16078 <__assert_fail@plt+0x4b20>
   1603c:	add	r3, r0, ip
   16040:	add	r3, r3, r3, lsr #31
   16044:	asr	r3, r3, #1
   16048:	add	r2, r3, r3, lsl #1
   1604c:	add	r2, lr, r2, lsl #3
   16050:	ldr	r2, [r2, #4]
   16054:	cmp	r2, r1
   16058:	blt	1606c <__assert_fail@plt+0x4b14>
   1605c:	mov	ip, r3
   16060:	b	16034 <__assert_fail@plt+0x4adc>
   16064:	mov	r3, ip
   16068:	mov	ip, r2
   1606c:	add	r0, r3, #1
   16070:	mov	r2, ip
   16074:	b	16008 <__assert_fail@plt+0x4ab0>
   16078:	cmp	r5, r0
   1607c:	ble	1609c <__assert_fail@plt+0x4b44>
   16080:	ldr	r3, [r4, #116]	; 0x74
   16084:	add	r2, r0, r0, lsl #1
   16088:	add	r3, r3, r2, lsl #3
   1608c:	ldr	r3, [r3, #4]
   16090:	cmp	r1, r3
   16094:	mvnne	r0, #0
   16098:	pop	{r4, r5, pc}
   1609c:	mvn	r0, #0
   160a0:	pop	{r4, r5, pc}
   160a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160a8:	sub	sp, sp, #20
   160ac:	mov	r4, r0
   160b0:	mov	r6, r1
   160b4:	str	r2, [sp, #12]
   160b8:	mov	r8, r3
   160bc:	ldr	sl, [r0, #84]	; 0x54
   160c0:	mov	r1, r3
   160c4:	bl	15ff4 <__assert_fail@plt+0x4a9c>
   160c8:	mov	fp, r0
   160cc:	ldr	r1, [sp, #60]	; 0x3c
   160d0:	mov	r0, r4
   160d4:	bl	15ff4 <__assert_fail@plt+0x4a9c>
   160d8:	str	r0, [sp, #8]
   160dc:	ldr	r3, [r6, #4]
   160e0:	cmp	r3, #0
   160e4:	ble	16178 <__assert_fail@plt+0x4c20>
   160e8:	mov	r5, #0
   160ec:	ldr	r3, [r6, #8]
   160f0:	ldr	r1, [r3, r5, lsl #2]
   160f4:	ldr	r3, [r4, #116]	; 0x74
   160f8:	add	r2, r1, r1, lsl #1
   160fc:	ldr	r2, [r3, r2, lsl #3]
   16100:	ldr	r3, [sl]
   16104:	ldr	r7, [r3, r2, lsl #3]
   16108:	str	fp, [sp, #4]
   1610c:	str	r8, [sp]
   16110:	ldr	r3, [sp, #12]
   16114:	mov	r2, r7
   16118:	mov	r0, r4
   1611c:	bl	15f7c <__assert_fail@plt+0x4a24>
   16120:	mov	r9, r0
   16124:	ldr	r3, [r6, #8]
   16128:	ldr	r1, [r3, r5, lsl #2]
   1612c:	ldr	r3, [sp, #8]
   16130:	str	r3, [sp, #4]
   16134:	ldr	r3, [sp, #60]	; 0x3c
   16138:	str	r3, [sp]
   1613c:	ldr	r3, [sp, #56]	; 0x38
   16140:	mov	r2, r7
   16144:	mov	r0, r4
   16148:	bl	15f7c <__assert_fail@plt+0x4a24>
   1614c:	cmp	r9, r0
   16150:	beq	16160 <__assert_fail@plt+0x4c08>
   16154:	mov	r0, #1
   16158:	add	sp, sp, #20
   1615c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16160:	add	r5, r5, #1
   16164:	ldr	r3, [r6, #4]
   16168:	cmp	r3, r5
   1616c:	bgt	160ec <__assert_fail@plt+0x4b94>
   16170:	mov	r0, #0
   16174:	b	16158 <__assert_fail@plt+0x4c00>
   16178:	mov	r0, #0
   1617c:	b	16158 <__assert_fail@plt+0x4c00>
   16180:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16184:	sub	sp, sp, #8
   16188:	mov	r5, r0
   1618c:	mov	r4, r1
   16190:	mov	r8, r2
   16194:	mov	r9, r3
   16198:	ldr	r6, [r1, #40]	; 0x28
   1619c:	mov	r1, r6
   161a0:	mov	r0, r4
   161a4:	bl	15878 <__assert_fail@plt+0x4320>
   161a8:	cmp	r0, #1
   161ac:	ble	161e4 <__assert_fail@plt+0x4c8c>
   161b0:	mov	r7, r0
   161b4:	mov	r3, #1
   161b8:	str	r3, [r5]
   161bc:	ldr	r1, [r4, #40]	; 0x28
   161c0:	mov	r0, r4
   161c4:	bl	158ec <__assert_fail@plt+0x4394>
   161c8:	str	r0, [r5, #4]
   161cc:	ldr	r3, [r4, #40]	; 0x28
   161d0:	add	r7, r3, r7
   161d4:	str	r7, [r4, #40]	; 0x28
   161d8:	mov	r0, #0
   161dc:	add	sp, sp, #8
   161e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161e4:	add	r6, r6, r9
   161e8:	str	r6, [r4, #40]	; 0x28
   161ec:	ldrb	r3, [r8, #4]
   161f0:	and	r2, r3, #251	; 0xfb
   161f4:	cmp	r3, #28
   161f8:	cmpne	r2, #26
   161fc:	beq	1622c <__assert_fail@plt+0x4cd4>
   16200:	ldrb	r2, [sp, #48]	; 0x30
   16204:	cmp	r3, #22
   16208:	moveq	r3, r2
   1620c:	orrne	r3, r2, #1
   16210:	cmp	r3, #0
   16214:	beq	163d4 <__assert_fail@plt+0x4e7c>
   16218:	mov	r0, #0
   1621c:	str	r0, [r5]
   16220:	ldrb	r3, [r8]
   16224:	strb	r3, [r5, #4]
   16228:	b	161dc <__assert_fail@plt+0x4c84>
   1622c:	ldr	r3, [r4, #56]	; 0x38
   16230:	cmp	r6, r3
   16234:	movge	r0, #7
   16238:	bge	161dc <__assert_fail@plt+0x4c84>
   1623c:	ldrb	r9, [r8]
   16240:	mov	r6, #0
   16244:	b	1632c <__assert_fail@plt+0x4dd4>
   16248:	ldrb	r3, [r4, #75]	; 0x4b
   1624c:	cmp	r3, #0
   16250:	bne	1626c <__assert_fail@plt+0x4d14>
   16254:	ldr	r2, [r4, #4]
   16258:	ldr	r3, [r4, #40]	; 0x28
   1625c:	add	r1, r3, #1
   16260:	str	r1, [r4, #40]	; 0x28
   16264:	ldrb	r7, [r2, r3]
   16268:	b	1634c <__assert_fail@plt+0x4df4>
   1626c:	ldrb	r3, [r4, #76]	; 0x4c
   16270:	cmp	r3, #0
   16274:	beq	162f8 <__assert_fail@plt+0x4da0>
   16278:	ldr	sl, [r4, #40]	; 0x28
   1627c:	ldr	r3, [r4, #28]
   16280:	cmp	sl, r3
   16284:	beq	16298 <__assert_fail@plt+0x4d40>
   16288:	ldr	r3, [r4, #8]
   1628c:	ldr	r3, [r3, sl, lsl #2]
   16290:	cmn	r3, #1
   16294:	beq	162cc <__assert_fail@plt+0x4d74>
   16298:	ldr	r2, [r4, #12]
   1629c:	ldr	r3, [r4]
   162a0:	ldr	r1, [r2, sl, lsl #2]
   162a4:	ldr	r2, [r4, #24]
   162a8:	add	r3, r3, r1
   162ac:	ldrb	r7, [r3, r2]
   162b0:	bics	r3, r7, #127	; 0x7f
   162b4:	beq	162e0 <__assert_fail@plt+0x4d88>
   162b8:	ldr	r3, [r4, #4]
   162bc:	add	r2, sl, #1
   162c0:	str	r2, [r4, #40]	; 0x28
   162c4:	ldrb	r7, [r3, sl]
   162c8:	b	1634c <__assert_fail@plt+0x4df4>
   162cc:	ldr	r3, [r4, #4]
   162d0:	add	r2, sl, #1
   162d4:	str	r2, [r4, #40]	; 0x28
   162d8:	ldrb	r7, [r3, sl]
   162dc:	b	1634c <__assert_fail@plt+0x4df4>
   162e0:	mov	r1, sl
   162e4:	mov	r0, r4
   162e8:	bl	15878 <__assert_fail@plt+0x4320>
   162ec:	add	r0, sl, r0
   162f0:	str	r0, [r4, #40]	; 0x28
   162f4:	b	1634c <__assert_fail@plt+0x4df4>
   162f8:	ldr	r3, [r4]
   162fc:	ldr	r1, [r4, #24]
   16300:	ldr	r2, [r4, #40]	; 0x28
   16304:	add	r0, r2, #1
   16308:	str	r0, [r4, #40]	; 0x28
   1630c:	add	r3, r3, r1
   16310:	ldrb	r7, [r3, r2]
   16314:	b	1634c <__assert_fail@plt+0x4df4>
   16318:	ldr	r3, [r5, #4]
   1631c:	strb	r7, [r3, r6]
   16320:	add	r6, r6, #1
   16324:	cmp	r6, #32
   16328:	beq	16400 <__assert_fail@plt+0x4ea8>
   1632c:	ldrb	r3, [r8, #4]
   16330:	cmp	r3, #30
   16334:	beq	16248 <__assert_fail@plt+0x4cf0>
   16338:	ldr	r2, [r4, #4]
   1633c:	ldr	r3, [r4, #40]	; 0x28
   16340:	add	r1, r3, #1
   16344:	str	r1, [r4, #40]	; 0x28
   16348:	ldrb	r7, [r2, r3]
   1634c:	ldr	r3, [r4, #40]	; 0x28
   16350:	ldr	r2, [r4, #56]	; 0x38
   16354:	cmp	r2, r3
   16358:	ble	163f8 <__assert_fail@plt+0x4ea0>
   1635c:	cmp	r9, r7
   16360:	bne	16318 <__assert_fail@plt+0x4dc0>
   16364:	ldr	r2, [r4, #4]
   16368:	ldrb	r2, [r2, r3]
   1636c:	cmp	r2, #93	; 0x5d
   16370:	bne	16318 <__assert_fail@plt+0x4dc0>
   16374:	add	r3, r3, #1
   16378:	str	r3, [r4, #40]	; 0x28
   1637c:	ldr	r3, [r5, #4]
   16380:	mov	r2, #0
   16384:	strb	r2, [r3, r6]
   16388:	ldrb	r3, [r8, #4]
   1638c:	cmp	r3, #28
   16390:	beq	163b4 <__assert_fail@plt+0x4e5c>
   16394:	cmp	r3, #30
   16398:	beq	163c4 <__assert_fail@plt+0x4e6c>
   1639c:	cmp	r3, #26
   163a0:	moveq	r3, #3
   163a4:	streq	r3, [r5]
   163a8:	moveq	r0, r2
   163ac:	movne	r0, #0
   163b0:	b	161dc <__assert_fail@plt+0x4c84>
   163b4:	mov	r3, #2
   163b8:	str	r3, [r5]
   163bc:	mov	r0, #0
   163c0:	b	161dc <__assert_fail@plt+0x4c84>
   163c4:	mov	r3, #4
   163c8:	str	r3, [r5]
   163cc:	mov	r0, #0
   163d0:	b	161dc <__assert_fail@plt+0x4c84>
   163d4:	ldr	r2, [sp, #44]	; 0x2c
   163d8:	mov	r1, r4
   163dc:	mov	r0, sp
   163e0:	bl	15bc0 <__assert_fail@plt+0x4668>
   163e4:	ldrb	r3, [sp, #4]
   163e8:	cmp	r3, #21
   163ec:	movne	r0, #11
   163f0:	bne	161dc <__assert_fail@plt+0x4c84>
   163f4:	b	16218 <__assert_fail@plt+0x4cc0>
   163f8:	mov	r0, #7
   163fc:	b	161dc <__assert_fail@plt+0x4c84>
   16400:	mov	r0, #7
   16404:	b	161dc <__assert_fail@plt+0x4c84>
   16408:	push	{r4, r5, r6, lr}
   1640c:	mov	r4, r0
   16410:	mov	r6, r1
   16414:	mov	r5, r2
   16418:	b	16420 <__assert_fail@plt+0x4ec8>
   1641c:	mov	r4, r3
   16420:	ldr	r3, [r4, #4]
   16424:	cmp	r3, #0
   16428:	bne	1641c <__assert_fail@plt+0x4ec4>
   1642c:	ldr	r3, [r4, #8]
   16430:	cmp	r3, #0
   16434:	bne	1641c <__assert_fail@plt+0x4ec4>
   16438:	mov	r1, r4
   1643c:	mov	r0, r5
   16440:	blx	r6
   16444:	cmp	r0, #0
   16448:	popne	{r4, r5, r6, pc}
   1644c:	ldr	r2, [r4]
   16450:	cmp	r2, #0
   16454:	popeq	{r4, r5, r6, pc}
   16458:	ldr	r3, [r2, #8]
   1645c:	cmp	r4, r3
   16460:	cmpne	r3, #0
   16464:	moveq	r1, #1
   16468:	movne	r1, #0
   1646c:	mov	r4, r2
   16470:	cmp	r1, #0
   16474:	bne	16438 <__assert_fail@plt+0x4ee0>
   16478:	b	1641c <__assert_fail@plt+0x4ec4>
   1647c:	push	{r4, r5, r6, r7, r8, lr}
   16480:	mov	r4, r0
   16484:	mov	r6, r1
   16488:	mov	r5, r2
   1648c:	mov	r7, #0
   16490:	b	16498 <__assert_fail@plt+0x4f40>
   16494:	mov	r4, r3
   16498:	mov	r1, r4
   1649c:	mov	r0, r5
   164a0:	blx	r6
   164a4:	cmp	r0, #0
   164a8:	popne	{r4, r5, r6, r7, r8, pc}
   164ac:	ldr	r3, [r4, #4]
   164b0:	cmp	r3, #0
   164b4:	moveq	r2, r7
   164b8:	bne	16494 <__assert_fail@plt+0x4f3c>
   164bc:	ldr	r3, [r4, #8]
   164c0:	cmp	r3, #0
   164c4:	cmpne	r2, r3
   164c8:	bne	16494 <__assert_fail@plt+0x4f3c>
   164cc:	ldr	r3, [r4]
   164d0:	mov	r2, r4
   164d4:	cmp	r3, #0
   164d8:	popeq	{r4, r5, r6, r7, r8, pc}
   164dc:	mov	r4, r3
   164e0:	b	164bc <__assert_fail@plt+0x4f64>
   164e4:	push	{r4, r5, r6, lr}
   164e8:	mov	r4, r0
   164ec:	mov	r5, r1
   164f0:	ldr	r3, [r0, #80]	; 0x50
   164f4:	cmp	r3, #1
   164f8:	ble	16540 <__assert_fail@plt+0x4fe8>
   164fc:	cmn	r1, #-1073741823	; 0xc0000001
   16500:	bhi	16574 <__assert_fail@plt+0x501c>
   16504:	lsl	r6, r1, #2
   16508:	mov	r1, r6
   1650c:	ldr	r0, [r0, #8]
   16510:	bl	244f8 <__assert_fail@plt+0x12fa0>
   16514:	cmp	r0, #0
   16518:	beq	1657c <__assert_fail@plt+0x5024>
   1651c:	str	r0, [r4, #8]
   16520:	ldr	r0, [r4, #12]
   16524:	cmp	r0, #0
   16528:	beq	16540 <__assert_fail@plt+0x4fe8>
   1652c:	mov	r1, r6
   16530:	bl	244f8 <__assert_fail@plt+0x12fa0>
   16534:	cmp	r0, #0
   16538:	beq	16584 <__assert_fail@plt+0x502c>
   1653c:	str	r0, [r4, #12]
   16540:	ldrb	r3, [r4, #75]	; 0x4b
   16544:	cmp	r3, #0
   16548:	bne	16558 <__assert_fail@plt+0x5000>
   1654c:	str	r5, [r4, #36]	; 0x24
   16550:	mov	r0, #0
   16554:	pop	{r4, r5, r6, pc}
   16558:	mov	r1, r5
   1655c:	ldr	r0, [r4, #4]
   16560:	bl	244f8 <__assert_fail@plt+0x12fa0>
   16564:	cmp	r0, #0
   16568:	beq	1658c <__assert_fail@plt+0x5034>
   1656c:	str	r0, [r4, #4]
   16570:	b	1654c <__assert_fail@plt+0x4ff4>
   16574:	mov	r0, #12
   16578:	pop	{r4, r5, r6, pc}
   1657c:	mov	r0, #12
   16580:	pop	{r4, r5, r6, pc}
   16584:	mov	r0, #12
   16588:	pop	{r4, r5, r6, pc}
   1658c:	mov	r0, #12
   16590:	pop	{r4, r5, r6, pc}
   16594:	push	{r4, r5, r6, lr}
   16598:	mov	r4, r0
   1659c:	mov	r5, r1
   165a0:	ldr	r1, [r0]
   165a4:	ldr	r3, [r0, #4]
   165a8:	cmp	r1, r3
   165ac:	beq	165cc <__assert_fail@plt+0x5074>
   165b0:	ldr	r2, [r4, #8]
   165b4:	ldr	r3, [r4, #4]
   165b8:	add	r1, r3, #1
   165bc:	str	r1, [r4, #4]
   165c0:	str	r5, [r2, r3, lsl #2]
   165c4:	mov	r0, #1
   165c8:	pop	{r4, r5, r6, pc}
   165cc:	add	r1, r1, #1
   165d0:	lsl	r3, r1, #1
   165d4:	str	r3, [r0]
   165d8:	lsl	r1, r1, #3
   165dc:	ldr	r0, [r0, #8]
   165e0:	bl	244f8 <__assert_fail@plt+0x12fa0>
   165e4:	cmp	r0, #0
   165e8:	strne	r0, [r4, #8]
   165ec:	bne	165b0 <__assert_fail@plt+0x5058>
   165f0:	mov	r0, #0
   165f4:	pop	{r4, r5, r6, pc}
   165f8:	push	{r4, r5, r6, r7, r8, lr}
   165fc:	mov	r7, r0
   16600:	mov	r5, r1
   16604:	mov	r4, r2
   16608:	mov	r6, r3
   1660c:	ldr	r3, [r0, #64]	; 0x40
   16610:	cmp	r3, #31
   16614:	beq	16688 <__assert_fail@plt+0x5130>
   16618:	ldr	r3, [r7, #56]	; 0x38
   1661c:	ldr	r2, [r7, #64]	; 0x40
   16620:	add	r1, r2, #1
   16624:	str	r1, [r7, #64]	; 0x40
   16628:	lsl	r2, r2, #5
   1662c:	add	ip, r2, #4
   16630:	add	ip, r3, ip
   16634:	add	r3, r3, r2
   16638:	mov	r2, #0
   1663c:	str	r2, [r3, #4]
   16640:	str	r5, [r3, #8]
   16644:	str	r4, [r3, #12]
   16648:	add	lr, r3, #24
   1664c:	ldm	r6, {r0, r1}
   16650:	stm	lr, {r0, r1}
   16654:	ldrb	r1, [r3, #30]
   16658:	and	r1, r1, #243	; 0xf3
   1665c:	strb	r1, [r3, #30]
   16660:	str	r2, [r3, #16]
   16664:	str	r2, [r3, #20]
   16668:	mvn	r2, #0
   1666c:	str	r2, [r3, #32]
   16670:	cmp	r5, #0
   16674:	strne	ip, [r5]
   16678:	cmp	r4, #0
   1667c:	strne	ip, [r4]
   16680:	mov	r0, ip
   16684:	pop	{r4, r5, r6, r7, r8, pc}
   16688:	mov	r0, #996	; 0x3e4
   1668c:	bl	244c8 <__assert_fail@plt+0x12f70>
   16690:	cmp	r0, #0
   16694:	beq	166b0 <__assert_fail@plt+0x5158>
   16698:	ldr	r3, [r7, #56]	; 0x38
   1669c:	str	r3, [r0]
   166a0:	str	r0, [r7, #56]	; 0x38
   166a4:	mov	r3, #0
   166a8:	str	r3, [r7, #64]	; 0x40
   166ac:	b	16618 <__assert_fail@plt+0x50c0>
   166b0:	mov	ip, #0
   166b4:	b	16680 <__assert_fail@plt+0x5128>
   166b8:	push	{r4, r5, r6, r7, r8, lr}
   166bc:	sub	sp, sp, #8
   166c0:	mov	r4, r0
   166c4:	mov	r8, r1
   166c8:	ldr	r5, [r0]
   166cc:	add	r6, sp, #4
   166d0:	mov	r7, #0
   166d4:	add	r3, r4, #20
   166d8:	mov	r2, r7
   166dc:	mov	r1, r7
   166e0:	mov	r0, r8
   166e4:	bl	165f8 <__assert_fail@plt+0x50a0>
   166e8:	str	r0, [r6]
   166ec:	cmp	r0, #0
   166f0:	beq	16728 <__assert_fail@plt+0x51d0>
   166f4:	str	r5, [r0]
   166f8:	ldr	r2, [r6]
   166fc:	ldrb	r3, [r2, #26]
   16700:	orr	r3, r3, #4
   16704:	strb	r3, [r2, #26]
   16708:	ldr	r5, [r6]
   1670c:	ldr	r3, [r4, #4]
   16710:	cmp	r3, #0
   16714:	beq	16730 <__assert_fail@plt+0x51d8>
   16718:	add	r6, r5, #4
   1671c:	mov	r4, r3
   16720:	b	166d4 <__assert_fail@plt+0x517c>
   16724:	ldr	r0, [sp, #4]
   16728:	add	sp, sp, #8
   1672c:	pop	{r4, r5, r6, r7, r8, pc}
   16730:	mov	r2, r7
   16734:	ldr	r3, [r4, #8]
   16738:	cmp	r3, #0
   1673c:	cmpne	r2, r3
   16740:	bne	16760 <__assert_fail@plt+0x5208>
   16744:	ldr	r3, [r4]
   16748:	ldr	r5, [r5]
   1674c:	mov	r2, r4
   16750:	cmp	r3, #0
   16754:	beq	16724 <__assert_fail@plt+0x51cc>
   16758:	mov	r4, r3
   1675c:	b	16734 <__assert_fail@plt+0x51dc>
   16760:	add	r6, r5, #8
   16764:	mov	r4, r3
   16768:	b	166d4 <__assert_fail@plt+0x517c>
   1676c:	push	{lr}		; (str lr, [sp, #-4]!)
   16770:	sub	sp, sp, #12
   16774:	mov	ip, #0
   16778:	str	ip, [sp]
   1677c:	str	ip, [sp, #4]
   16780:	strb	r3, [sp, #4]
   16784:	mov	r3, sp
   16788:	bl	165f8 <__assert_fail@plt+0x50a0>
   1678c:	add	sp, sp, #12
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16798:	ldr	r6, [r1]
   1679c:	ldr	r5, [r2, #4]
   167a0:	ldrb	r1, [r1, #28]
   167a4:	adds	r3, r5, #0
   167a8:	movne	r3, #1
   167ac:	ands	r3, r3, r1, lsr #4
   167b0:	beq	167d0 <__assert_fail@plt+0x5278>
   167b4:	ldr	r3, [r2, #20]
   167b8:	cmp	r3, #31
   167bc:	bgt	16898 <__assert_fail@plt+0x5340>
   167c0:	ldr	r1, [r6, #80]	; 0x50
   167c4:	lsr	r3, r1, r3
   167c8:	tst	r3, #1
   167cc:	beq	16898 <__assert_fail@plt+0x5340>
   167d0:	mov	r4, r2
   167d4:	mov	r9, r0
   167d8:	mov	r3, #8
   167dc:	mov	r2, #0
   167e0:	mov	r1, r2
   167e4:	mov	r0, r6
   167e8:	bl	1676c <__assert_fail@plt+0x5214>
   167ec:	mov	r7, r0
   167f0:	mov	r3, #9
   167f4:	mov	r2, #0
   167f8:	mov	r1, r2
   167fc:	mov	r0, r6
   16800:	bl	1676c <__assert_fail@plt+0x5214>
   16804:	mov	r8, r0
   16808:	cmp	r5, #0
   1680c:	moveq	sl, r0
   16810:	beq	1682c <__assert_fail@plt+0x52d4>
   16814:	mov	r3, #16
   16818:	mov	r2, r0
   1681c:	mov	r1, r5
   16820:	mov	r0, r6
   16824:	bl	1676c <__assert_fail@plt+0x5214>
   16828:	mov	sl, r0
   1682c:	mov	r3, #16
   16830:	mov	r2, sl
   16834:	mov	r1, r7
   16838:	mov	r0, r6
   1683c:	bl	1676c <__assert_fail@plt+0x5214>
   16840:	mov	r5, r0
   16844:	cmp	sl, #0
   16848:	cmpne	r0, #0
   1684c:	beq	168a0 <__assert_fail@plt+0x5348>
   16850:	cmp	r8, #0
   16854:	cmpne	r7, #0
   16858:	beq	168a0 <__assert_fail@plt+0x5348>
   1685c:	ldr	r3, [r4, #20]
   16860:	str	r3, [r8, #20]
   16864:	str	r3, [r7, #20]
   16868:	ldrb	r3, [r4, #26]
   1686c:	lsr	r3, r3, #3
   16870:	and	r3, r3, #1
   16874:	ldrb	r2, [r8, #26]
   16878:	and	r1, r3, #1
   1687c:	bic	r2, r2, #8
   16880:	orr	r2, r2, r1, lsl #3
   16884:	strb	r2, [r8, #26]
   16888:	ldrb	r2, [r7, #26]
   1688c:	bic	r2, r2, #8
   16890:	orr	r3, r2, r1, lsl #3
   16894:	strb	r3, [r7, #26]
   16898:	mov	r0, r5
   1689c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168a0:	mov	r3, #12
   168a4:	str	r3, [r9]
   168a8:	mov	r5, #0
   168ac:	b	16898 <__assert_fail@plt+0x5340>
   168b0:	push	{r4, r5, lr}
   168b4:	sub	sp, sp, #12
   168b8:	mov	r5, r0
   168bc:	mov	r4, r1
   168c0:	mov	r3, #0
   168c4:	str	r3, [sp, #4]
   168c8:	ldr	r2, [r1, #4]
   168cc:	cmp	r2, r3
   168d0:	beq	168e0 <__assert_fail@plt+0x5388>
   168d4:	ldrb	r3, [r2, #24]
   168d8:	cmp	r3, #17
   168dc:	beq	16904 <__assert_fail@plt+0x53ac>
   168e0:	ldr	r2, [r4, #8]
   168e4:	cmp	r2, #0
   168e8:	beq	168f8 <__assert_fail@plt+0x53a0>
   168ec:	ldrb	r3, [r2, #24]
   168f0:	cmp	r3, #17
   168f4:	beq	16920 <__assert_fail@plt+0x53c8>
   168f8:	ldr	r0, [sp, #4]
   168fc:	add	sp, sp, #12
   16900:	pop	{r4, r5, pc}
   16904:	mov	r1, r0
   16908:	add	r0, sp, #4
   1690c:	bl	16794 <__assert_fail@plt+0x523c>
   16910:	str	r0, [r4, #4]
   16914:	cmp	r0, #0
   16918:	strne	r4, [r0]
   1691c:	b	168e0 <__assert_fail@plt+0x5388>
   16920:	mov	r1, r5
   16924:	add	r0, sp, #4
   16928:	bl	16794 <__assert_fail@plt+0x523c>
   1692c:	str	r0, [r4, #8]
   16930:	cmp	r0, #0
   16934:	strne	r4, [r0]
   16938:	b	168f8 <__assert_fail@plt+0x53a0>
   1693c:	push	{r4, r5, r6, lr}
   16940:	mov	r4, r0
   16944:	mov	r5, r1
   16948:	mov	r3, #1
   1694c:	str	r3, [r0]
   16950:	str	r3, [r0, #4]
   16954:	mov	r0, #4
   16958:	bl	244c8 <__assert_fail@plt+0x12f70>
   1695c:	str	r0, [r4, #8]
   16960:	cmp	r0, #0
   16964:	moveq	r3, #0
   16968:	streq	r3, [r4, #4]
   1696c:	streq	r3, [r4]
   16970:	moveq	r0, #12
   16974:	strne	r5, [r0]
   16978:	movne	r0, #0
   1697c:	pop	{r4, r5, r6, pc}
   16980:	push	{r4, lr}
   16984:	mov	r4, r0
   16988:	str	r1, [r0]
   1698c:	mov	r3, #0
   16990:	str	r3, [r0, #4]
   16994:	lsl	r0, r1, #2
   16998:	bl	244c8 <__assert_fail@plt+0x12f70>
   1699c:	str	r0, [r4, #8]
   169a0:	cmp	r0, #0
   169a4:	moveq	r0, #12
   169a8:	movne	r0, #0
   169ac:	pop	{r4, pc}
   169b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169b4:	mov	r6, r0
   169b8:	mov	r5, r1
   169bc:	mov	r7, r2
   169c0:	mov	r8, r1
   169c4:	str	r2, [r8], #16
   169c8:	ldr	r1, [r1, #8]
   169cc:	mov	r0, r8
   169d0:	bl	16980 <__assert_fail@plt+0x5428>
   169d4:	subs	r9, r0, #0
   169d8:	bne	16aa0 <__assert_fail@plt+0x5548>
   169dc:	ldr	r3, [r5, #8]
   169e0:	cmp	r3, #0
   169e4:	ble	16a34 <__assert_fail@plt+0x54dc>
   169e8:	mov	r4, #0
   169ec:	b	16a00 <__assert_fail@plt+0x54a8>
   169f0:	add	r4, r4, #1
   169f4:	ldr	r3, [r5, #8]
   169f8:	cmp	r3, r4
   169fc:	ble	16a34 <__assert_fail@plt+0x54dc>
   16a00:	ldr	r3, [r5, #12]
   16a04:	ldr	r1, [r3, r4, lsl #2]
   16a08:	ldr	r3, [r6]
   16a0c:	add	r3, r3, r1, lsl #3
   16a10:	ldrb	r3, [r3, #4]
   16a14:	tst	r3, #8
   16a18:	bne	169f0 <__assert_fail@plt+0x5498>
   16a1c:	mov	r0, r8
   16a20:	bl	16594 <__assert_fail@plt+0x503c>
   16a24:	cmp	r0, #0
   16a28:	bne	169f0 <__assert_fail@plt+0x5498>
   16a2c:	mov	r9, #12
   16a30:	b	16a70 <__assert_fail@plt+0x5518>
   16a34:	ldr	r4, [r6, #68]	; 0x44
   16a38:	and	r7, r7, r4
   16a3c:	add	r7, r7, r7, lsl #1
   16a40:	lsl	r4, r7, #2
   16a44:	ldr	r6, [r6, #32]
   16a48:	add	r7, r6, r4
   16a4c:	ldr	r3, [r6, r4]
   16a50:	ldr	r2, [r7, #4]
   16a54:	cmp	r2, r3
   16a58:	ble	16a78 <__assert_fail@plt+0x5520>
   16a5c:	ldr	r2, [r7, #8]
   16a60:	ldr	r3, [r6, r4]
   16a64:	add	r1, r3, #1
   16a68:	str	r1, [r6, r4]
   16a6c:	str	r5, [r2, r3, lsl #2]
   16a70:	mov	r0, r9
   16a74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a78:	add	r3, r3, #1
   16a7c:	lsl	r8, r3, #1
   16a80:	lsl	r1, r3, #3
   16a84:	ldr	r0, [r7, #8]
   16a88:	bl	244f8 <__assert_fail@plt+0x12fa0>
   16a8c:	cmp	r0, #0
   16a90:	beq	16aa8 <__assert_fail@plt+0x5550>
   16a94:	str	r0, [r7, #8]
   16a98:	str	r8, [r7, #4]
   16a9c:	b	16a5c <__assert_fail@plt+0x5504>
   16aa0:	mov	r9, #12
   16aa4:	b	16a70 <__assert_fail@plt+0x5518>
   16aa8:	mov	r9, #12
   16aac:	b	16a70 <__assert_fail@plt+0x5518>
   16ab0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ab4:	sub	sp, sp, #80	; 0x50
   16ab8:	mov	r4, r0
   16abc:	ldr	r8, [r0, #36]	; 0x24
   16ac0:	ldr	r3, [r0, #48]	; 0x30
   16ac4:	cmp	r8, r3
   16ac8:	movge	r8, r3
   16acc:	ldr	sl, [r0, #28]
   16ad0:	cmp	r8, sl
   16ad4:	ble	16c34 <__assert_fail@plt+0x56dc>
   16ad8:	add	r7, sp, #8
   16adc:	add	r6, r0, #16
   16ae0:	mov	r9, #1
   16ae4:	mvn	r5, #0
   16ae8:	b	16bcc <__assert_fail@plt+0x5674>
   16aec:	ldr	r3, [r4, #80]	; 0x50
   16af0:	cmp	r3, #0
   16af4:	cmpgt	r2, #0
   16af8:	ble	16b4c <__assert_fail@plt+0x55f4>
   16afc:	add	r0, sp, #15
   16b00:	mov	r3, #0
   16b04:	ldr	r1, [r4]
   16b08:	ldr	ip, [r4, #24]
   16b0c:	add	r1, r1, sl
   16b10:	add	r1, r1, r3
   16b14:	ldrb	r1, [r1, ip]
   16b18:	ldr	ip, [r4, #64]	; 0x40
   16b1c:	ldrb	ip, [ip, r1]
   16b20:	ldr	r1, [r4, #4]
   16b24:	add	r1, r1, sl
   16b28:	strb	ip, [r1, r3]
   16b2c:	strb	ip, [r0, #1]!
   16b30:	add	r3, r3, #1
   16b34:	ldr	r1, [r4, #80]	; 0x50
   16b38:	cmp	r1, r3
   16b3c:	cmpgt	r2, r3
   16b40:	bgt	16b04 <__assert_fail@plt+0x55ac>
   16b44:	add	r1, sp, #16
   16b48:	b	16bf4 <__assert_fail@plt+0x569c>
   16b4c:	add	r1, sp, #16
   16b50:	b	16bf4 <__assert_fail@plt+0x569c>
   16b54:	ldr	r3, [r4]
   16b58:	ldr	r2, [r4, #24]
   16b5c:	add	r3, r3, sl
   16b60:	ldrb	r3, [r3, r2]
   16b64:	str	r3, [sp, #4]
   16b68:	ldr	r2, [r4, #64]	; 0x40
   16b6c:	cmp	r2, #0
   16b70:	ldrbne	r3, [r2, r3]
   16b74:	strne	r3, [sp, #4]
   16b78:	ldm	r7, {r0, r1}
   16b7c:	stm	r6, {r0, r1}
   16b80:	mov	r0, r9
   16b84:	add	r2, sl, #1
   16b88:	lsl	r3, sl, #2
   16b8c:	ldr	r1, [r4, #8]
   16b90:	ldr	ip, [sp, #4]
   16b94:	str	ip, [r1, sl, lsl #2]
   16b98:	add	sl, sl, r0
   16b9c:	mov	ip, sl
   16ba0:	cmp	r2, sl
   16ba4:	bge	16c44 <__assert_fail@plt+0x56ec>
   16ba8:	add	r3, r3, #4
   16bac:	add	r2, r2, #1
   16bb0:	ldr	r1, [r4, #8]
   16bb4:	str	r5, [r1, r3]
   16bb8:	add	r3, r3, #4
   16bbc:	cmp	ip, r2
   16bc0:	bne	16bac <__assert_fail@plt+0x5654>
   16bc4:	cmp	r8, sl
   16bc8:	ble	16c34 <__assert_fail@plt+0x56dc>
   16bcc:	sub	r2, r8, sl
   16bd0:	ldm	r6, {r0, r1}
   16bd4:	stm	r7, {r0, r1}
   16bd8:	ldr	r3, [r4, #64]	; 0x40
   16bdc:	cmp	r3, #0
   16be0:	bne	16aec <__assert_fail@plt+0x5594>
   16be4:	ldr	r1, [r4, #24]
   16be8:	add	r3, sl, r1
   16bec:	ldr	r1, [r4]
   16bf0:	add	r1, r1, r3
   16bf4:	mov	r3, r6
   16bf8:	add	r0, sp, #4
   16bfc:	bl	24918 <__assert_fail@plt+0x133c0>
   16c00:	sub	r3, r0, #1
   16c04:	cmn	r3, #3
   16c08:	bhi	16b54 <__assert_fail@plt+0x55fc>
   16c0c:	cmn	r0, #2
   16c10:	bne	16b84 <__assert_fail@plt+0x562c>
   16c14:	ldr	r2, [r4, #36]	; 0x24
   16c18:	ldr	r3, [r4, #48]	; 0x30
   16c1c:	cmp	r2, r3
   16c20:	bge	16b54 <__assert_fail@plt+0x55fc>
   16c24:	add	r3, r4, #16
   16c28:	add	r2, sp, #8
   16c2c:	ldm	r2, {r0, r1}
   16c30:	stm	r3, {r0, r1}
   16c34:	str	sl, [r4, #28]
   16c38:	str	sl, [r4, #32]
   16c3c:	add	sp, sp, #80	; 0x50
   16c40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c44:	mov	sl, r2
   16c48:	b	16bc4 <__assert_fail@plt+0x566c>
   16c4c:	ldr	r3, [r1, #4]
   16c50:	cmp	r3, #0
   16c54:	beq	16dec <__assert_fail@plt+0x5894>
   16c58:	ldr	ip, [r2, #4]
   16c5c:	cmp	ip, #0
   16c60:	beq	16df4 <__assert_fail@plt+0x589c>
   16c64:	push	{r4, r5, r6, r7, r8, lr}
   16c68:	mov	r6, r2
   16c6c:	mov	r5, r1
   16c70:	mov	r7, r0
   16c74:	add	r3, r3, ip
   16c78:	ldr	r4, [r0]
   16c7c:	ldr	r2, [r0, #4]
   16c80:	add	r2, r3, r2
   16c84:	cmp	r2, r4
   16c88:	bgt	16cb0 <__assert_fail@plt+0x5758>
   16c8c:	ldr	r3, [r7, #4]
   16c90:	ldr	r2, [r5, #4]
   16c94:	ldr	r0, [r6, #4]
   16c98:	add	r1, r3, r2
   16c9c:	add	r1, r1, r0
   16ca0:	sub	r2, r2, #1
   16ca4:	sub	r0, r0, #1
   16ca8:	sub	r3, r3, #1
   16cac:	b	16d3c <__assert_fail@plt+0x57e4>
   16cb0:	add	r4, r3, r4
   16cb4:	lsl	r1, r4, #2
   16cb8:	ldr	r0, [r0, #8]
   16cbc:	bl	244f8 <__assert_fail@plt+0x12fa0>
   16cc0:	cmp	r0, #0
   16cc4:	beq	16dfc <__assert_fail@plt+0x58a4>
   16cc8:	str	r0, [r7, #8]
   16ccc:	str	r4, [r7]
   16cd0:	b	16c8c <__assert_fail@plt+0x5734>
   16cd4:	cmp	r3, #0
   16cd8:	blt	16d14 <__assert_fail@plt+0x57bc>
   16cdc:	ldr	r8, [r7, #8]
   16ce0:	add	ip, r8, r3, lsl #2
   16ce4:	ldr	r4, [r8, r3, lsl #2]
   16ce8:	cmp	lr, r4
   16cec:	bge	16d08 <__assert_fail@plt+0x57b0>
   16cf0:	sub	r3, r3, #1
   16cf4:	cmn	r3, #1
   16cf8:	beq	16e04 <__assert_fail@plt+0x58ac>
   16cfc:	ldr	r4, [ip, #-4]!
   16d00:	cmp	lr, r4
   16d04:	blt	16cf0 <__assert_fail@plt+0x5798>
   16d08:	ldr	ip, [r8, r3, lsl #2]
   16d0c:	cmp	lr, ip
   16d10:	beq	16d20 <__assert_fail@plt+0x57c8>
   16d14:	sub	r1, r1, #1
   16d18:	ldr	ip, [r7, #8]
   16d1c:	str	lr, [ip, r1, lsl #2]
   16d20:	subs	r2, r2, #1
   16d24:	bmi	16d64 <__assert_fail@plt+0x580c>
   16d28:	subs	r0, r0, #1
   16d2c:	bpl	16d3c <__assert_fail@plt+0x57e4>
   16d30:	b	16d64 <__assert_fail@plt+0x580c>
   16d34:	subs	r2, r2, #1
   16d38:	bmi	16d64 <__assert_fail@plt+0x580c>
   16d3c:	ldr	ip, [r5, #8]
   16d40:	ldr	lr, [ip, r2, lsl #2]
   16d44:	ldr	ip, [r6, #8]
   16d48:	ldr	ip, [ip, r0, lsl #2]
   16d4c:	cmp	lr, ip
   16d50:	beq	16cd4 <__assert_fail@plt+0x577c>
   16d54:	cmp	lr, ip
   16d58:	bge	16d34 <__assert_fail@plt+0x57dc>
   16d5c:	subs	r0, r0, #1
   16d60:	bpl	16d3c <__assert_fail@plt+0x57e4>
   16d64:	ldr	r3, [r7, #4]
   16d68:	sub	r0, r3, #1
   16d6c:	ldr	r2, [r5, #4]
   16d70:	add	r2, r3, r2
   16d74:	ldr	ip, [r6, #4]
   16d78:	add	r2, r2, ip
   16d7c:	sub	r4, r2, #1
   16d80:	sub	r2, r2, r1
   16d84:	add	r3, r3, r2
   16d88:	str	r3, [r7, #4]
   16d8c:	cmp	r0, #0
   16d90:	cmpge	r2, #0
   16d94:	bgt	16dc0 <__assert_fail@plt+0x5868>
   16d98:	ldr	r0, [r7, #8]
   16d9c:	lsl	r2, r2, #2
   16da0:	add	r1, r0, r1, lsl #2
   16da4:	bl	11264 <memcpy@plt>
   16da8:	mov	r0, #0
   16dac:	pop	{r4, r5, r6, r7, r8, pc}
   16db0:	add	lr, r0, r2
   16db4:	str	ip, [r3, lr, lsl #2]
   16db8:	subs	r0, r0, #1
   16dbc:	bmi	16d98 <__assert_fail@plt+0x5840>
   16dc0:	ldr	r3, [r7, #8]
   16dc4:	ldr	lr, [r3, r4, lsl #2]
   16dc8:	ldr	ip, [r3, r0, lsl #2]
   16dcc:	cmp	lr, ip
   16dd0:	ble	16db0 <__assert_fail@plt+0x5858>
   16dd4:	sub	r4, r4, #1
   16dd8:	add	ip, r0, r2
   16ddc:	str	lr, [r3, ip, lsl #2]
   16de0:	subs	r2, r2, #1
   16de4:	bne	16dc0 <__assert_fail@plt+0x5868>
   16de8:	b	16d98 <__assert_fail@plt+0x5840>
   16dec:	mov	r0, #0
   16df0:	bx	lr
   16df4:	mov	r0, #0
   16df8:	bx	lr
   16dfc:	mov	r0, #12
   16e00:	pop	{r4, r5, r6, r7, r8, pc}
   16e04:	mvn	r3, #0
   16e08:	b	16d14 <__assert_fail@plt+0x57bc>
   16e0c:	ldr	r3, [r1, #4]
   16e10:	str	r3, [r0, #4]
   16e14:	ldr	r2, [r1, #4]
   16e18:	cmp	r2, #0
   16e1c:	ble	16e70 <__assert_fail@plt+0x5918>
   16e20:	push	{r4, r5, r6, lr}
   16e24:	mov	r5, r1
   16e28:	mov	r4, r0
   16e2c:	str	r3, [r0]
   16e30:	lsl	r0, r3, #2
   16e34:	bl	244c8 <__assert_fail@plt+0x12f70>
   16e38:	str	r0, [r4, #8]
   16e3c:	cmp	r0, #0
   16e40:	beq	16e5c <__assert_fail@plt+0x5904>
   16e44:	ldr	r2, [r5, #4]
   16e48:	lsl	r2, r2, #2
   16e4c:	ldr	r1, [r5, #8]
   16e50:	bl	11264 <memcpy@plt>
   16e54:	mov	r0, #0
   16e58:	pop	{r4, r5, r6, pc}
   16e5c:	mov	r3, #0
   16e60:	str	r3, [r4, #4]
   16e64:	str	r3, [r4]
   16e68:	mov	r0, #12
   16e6c:	pop	{r4, r5, r6, pc}
   16e70:	mov	r3, #0
   16e74:	str	r3, [r0]
   16e78:	str	r3, [r0, #4]
   16e7c:	str	r3, [r0, #8]
   16e80:	mov	r0, r3
   16e84:	bx	lr
   16e88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e8c:	mov	r8, r0
   16e90:	mov	r5, r2
   16e94:	subs	r7, r1, #0
   16e98:	beq	16ef0 <__assert_fail@plt+0x5998>
   16e9c:	ldr	r0, [r7, #4]
   16ea0:	cmp	r2, #0
   16ea4:	cmpne	r0, #0
   16ea8:	ble	16ee8 <__assert_fail@plt+0x5990>
   16eac:	ldr	r3, [r2, #4]
   16eb0:	cmp	r3, #0
   16eb4:	ble	16ee8 <__assert_fail@plt+0x5990>
   16eb8:	add	r0, r0, r3
   16ebc:	str	r0, [r8]
   16ec0:	lsl	r0, r0, #2
   16ec4:	bl	244c8 <__assert_fail@plt+0x12f70>
   16ec8:	str	r0, [r8, #8]
   16ecc:	cmp	r0, #0
   16ed0:	beq	1700c <__assert_fail@plt+0x5ab4>
   16ed4:	mov	r3, #0
   16ed8:	mov	r2, #1
   16edc:	mov	r4, r3
   16ee0:	mov	r6, r3
   16ee4:	b	16f54 <__assert_fail@plt+0x59fc>
   16ee8:	cmp	r0, #0
   16eec:	bgt	16f14 <__assert_fail@plt+0x59bc>
   16ef0:	cmp	r5, #0
   16ef4:	beq	16f24 <__assert_fail@plt+0x59cc>
   16ef8:	ldr	r3, [r5, #4]
   16efc:	cmp	r3, #0
   16f00:	ble	16f24 <__assert_fail@plt+0x59cc>
   16f04:	mov	r1, r5
   16f08:	mov	r0, r8
   16f0c:	bl	16e0c <__assert_fail@plt+0x58b4>
   16f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f14:	mov	r1, r7
   16f18:	mov	r0, r8
   16f1c:	bl	16e0c <__assert_fail@plt+0x58b4>
   16f20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f24:	mov	r0, #0
   16f28:	str	r0, [r8]
   16f2c:	str	r0, [r8, #4]
   16f30:	str	r0, [r8, #8]
   16f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f38:	cmp	r1, r0
   16f3c:	addeq	r4, r4, #1
   16f40:	add	r6, r6, #1
   16f44:	ldr	r0, [r8, #8]
   16f48:	str	r1, [r0, r3]
   16f4c:	add	r2, r2, #1
   16f50:	add	r3, r3, #4
   16f54:	sub	r0, r2, #1
   16f58:	mov	r9, r0
   16f5c:	ldr	r1, [r7, #4]
   16f60:	cmp	r6, r1
   16f64:	bge	16fc8 <__assert_fail@plt+0x5a70>
   16f68:	ldr	ip, [r5, #4]
   16f6c:	cmp	r4, ip
   16f70:	bge	16f9c <__assert_fail@plt+0x5a44>
   16f74:	ldr	r1, [r7, #8]
   16f78:	ldr	r1, [r1, r6, lsl #2]
   16f7c:	ldr	r0, [r5, #8]
   16f80:	ldr	r0, [r0, r4, lsl #2]
   16f84:	cmp	r1, r0
   16f88:	ble	16f38 <__assert_fail@plt+0x59e0>
   16f8c:	add	r4, r4, #1
   16f90:	ldr	r1, [r8, #8]
   16f94:	str	r0, [r1, r3]
   16f98:	b	16f4c <__assert_fail@plt+0x59f4>
   16f9c:	ldr	r3, [r8, #8]
   16fa0:	sub	r2, r1, r6
   16fa4:	ldr	r1, [r7, #8]
   16fa8:	lsl	r2, r2, #2
   16fac:	add	r1, r1, r6, lsl #2
   16fb0:	add	r0, r3, r0, lsl #2
   16fb4:	bl	11264 <memcpy@plt>
   16fb8:	ldr	r3, [r7, #4]
   16fbc:	sub	r6, r3, r6
   16fc0:	add	r9, r9, r6
   16fc4:	b	16fd4 <__assert_fail@plt+0x5a7c>
   16fc8:	ldr	r2, [r5, #4]
   16fcc:	cmp	r4, r2
   16fd0:	blt	16fe0 <__assert_fail@plt+0x5a88>
   16fd4:	str	r9, [r8, #4]
   16fd8:	mov	r0, #0
   16fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fe0:	ldr	r3, [r8, #8]
   16fe4:	sub	r2, r2, r4
   16fe8:	ldr	r1, [r5, #8]
   16fec:	lsl	r2, r2, #2
   16ff0:	add	r1, r1, r4, lsl #2
   16ff4:	add	r0, r3, r0, lsl #2
   16ff8:	bl	11264 <memcpy@plt>
   16ffc:	ldr	r3, [r5, #4]
   17000:	sub	r4, r3, r4
   17004:	add	r9, r9, r4
   17008:	b	16fd4 <__assert_fail@plt+0x5a7c>
   1700c:	mov	r0, #12
   17010:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17018:	sub	sp, sp, #92	; 0x5c
   1701c:	mov	r5, r0
   17020:	ldr	r4, [r0, #28]
   17024:	ldr	r6, [r0, #36]	; 0x24
   17028:	ldr	r3, [r0, #48]	; 0x30
   1702c:	cmp	r6, r3
   17030:	movge	r6, r3
   17034:	ldrb	r3, [r0, #74]	; 0x4a
   17038:	cmp	r3, #0
   1703c:	bne	1704c <__assert_fail@plt+0x5af4>
   17040:	ldr	r3, [r0, #64]	; 0x40
   17044:	cmp	r3, #0
   17048:	beq	1706c <__assert_fail@plt+0x5b14>
   1704c:	ldr	r7, [r5, #32]
   17050:	cmp	r4, r6
   17054:	blt	171ac <__assert_fail@plt+0x5c54>
   17058:	str	r4, [r5, #28]
   1705c:	str	r7, [r5, #32]
   17060:	mov	r0, #0
   17064:	add	sp, sp, #92	; 0x5c
   17068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1706c:	ldrb	r3, [r0, #76]	; 0x4c
   17070:	cmp	r3, #0
   17074:	bne	1704c <__assert_fail@plt+0x5af4>
   17078:	cmp	r4, r6
   1707c:	bge	17334 <__assert_fail@plt+0x5ddc>
   17080:	add	r3, r0, #16
   17084:	str	r3, [sp, #4]
   17088:	mvn	r7, #0
   1708c:	b	17158 <__assert_fail@plt+0x5c00>
   17090:	ldr	r3, [sp, #4]
   17094:	ldm	r3, {r0, r1}
   17098:	add	r2, sp, #80	; 0x50
   1709c:	stm	r2, {r0, r1}
   170a0:	mov	r9, r4
   170a4:	add	r1, r8, r4
   170a8:	sub	r2, r6, r4
   170ac:	add	r1, fp, r1
   170b0:	add	r0, sp, #12
   170b4:	bl	24918 <__assert_fail@plt+0x133c0>
   170b8:	mov	r8, r0
   170bc:	sub	r3, r0, #1
   170c0:	cmn	r3, #4
   170c4:	bhi	172c0 <__assert_fail@plt+0x5d68>
   170c8:	ldr	fp, [sp, #12]
   170cc:	mov	r0, fp
   170d0:	bl	1151c <towupper@plt>
   170d4:	mov	sl, r0
   170d8:	cmp	fp, r0
   170dc:	beq	1729c <__assert_fail@plt+0x5d44>
   170e0:	add	r2, sp, #80	; 0x50
   170e4:	mov	r1, r0
   170e8:	add	r0, sp, #16
   170ec:	bl	111e0 <wcrtomb@plt>
   170f0:	cmp	r8, r0
   170f4:	bne	171a8 <__assert_fail@plt+0x5c50>
   170f8:	ldr	r0, [r5, #4]
   170fc:	mov	r2, r8
   17100:	add	r1, sp, #16
   17104:	add	r0, r0, r4
   17108:	bl	11264 <memcpy@plt>
   1710c:	add	r4, r4, #1
   17110:	lsl	r3, r9, #2
   17114:	ldr	r2, [r5, #8]
   17118:	str	sl, [r2, r9, lsl #2]
   1711c:	sub	r2, r4, #1
   17120:	add	r8, r2, r8
   17124:	mov	r1, r8
   17128:	cmp	r4, r8
   1712c:	bge	17150 <__assert_fail@plt+0x5bf8>
   17130:	add	r3, r3, #4
   17134:	add	r4, r4, #1
   17138:	ldr	r2, [r5, #8]
   1713c:	str	r7, [r2, r3]
   17140:	add	r3, r3, #4
   17144:	cmp	r1, r4
   17148:	bne	17134 <__assert_fail@plt+0x5bdc>
   1714c:	mov	r4, r8
   17150:	cmp	r6, r4
   17154:	ble	17334 <__assert_fail@plt+0x5ddc>
   17158:	ldr	fp, [r5]
   1715c:	ldr	r8, [r5, #24]
   17160:	add	r3, fp, r8
   17164:	ldrb	sl, [r3, r4]
   17168:	bics	r3, sl, #127	; 0x7f
   1716c:	bne	17090 <__assert_fail@plt+0x5b38>
   17170:	ldr	r0, [sp, #4]
   17174:	bl	11294 <mbsinit@plt>
   17178:	cmp	r0, #0
   1717c:	beq	17090 <__assert_fail@plt+0x5b38>
   17180:	mov	r0, sl
   17184:	bl	1151c <towupper@plt>
   17188:	bics	r3, r0, #127	; 0x7f
   1718c:	bne	17090 <__assert_fail@plt+0x5b38>
   17190:	ldr	r3, [r5, #4]
   17194:	strb	r0, [r3, r4]
   17198:	ldr	r3, [r5, #8]
   1719c:	str	r0, [r3, r4, lsl #2]
   171a0:	add	r4, r4, #1
   171a4:	b	17150 <__assert_fail@plt+0x5bf8>
   171a8:	mov	r7, r4
   171ac:	sub	r2, r6, r4
   171b0:	add	r3, r5, #16
   171b4:	ldm	r3, {r0, r1}
   171b8:	add	r3, sp, #88	; 0x58
   171bc:	stmdb	r3, {r0, r1}
   171c0:	ldr	r1, [r5, #64]	; 0x40
   171c4:	cmp	r1, #0
   171c8:	bne	17344 <__assert_fail@plt+0x5dec>
   171cc:	ldr	r3, [r5, #24]
   171d0:	add	r3, r7, r3
   171d4:	ldr	r1, [r5]
   171d8:	add	r3, r1, r3
   171dc:	str	r3, [sp, #4]
   171e0:	add	r3, r5, #16
   171e4:	ldr	r1, [sp, #4]
   171e8:	add	r0, sp, #12
   171ec:	bl	24918 <__assert_fail@plt+0x133c0>
   171f0:	mov	r8, r0
   171f4:	sub	fp, r0, #1
   171f8:	cmn	fp, #4
   171fc:	bhi	17538 <__assert_fail@plt+0x5fe0>
   17200:	ldr	sl, [sp, #12]
   17204:	mov	r0, sl
   17208:	bl	1151c <towupper@plt>
   1720c:	mov	r9, r0
   17210:	cmp	sl, r0
   17214:	beq	174f0 <__assert_fail@plt+0x5f98>
   17218:	add	r2, sp, #80	; 0x50
   1721c:	mov	r1, r0
   17220:	add	r0, sp, #16
   17224:	bl	111e0 <wcrtomb@plt>
   17228:	mov	sl, r0
   1722c:	cmp	r8, r0
   17230:	bne	173a4 <__assert_fail@plt+0x5e4c>
   17234:	ldr	r0, [r5, #4]
   17238:	mov	r2, r8
   1723c:	add	r1, sp, #16
   17240:	add	r0, r0, r4
   17244:	bl	11264 <memcpy@plt>
   17248:	ldrb	r3, [r5, #76]	; 0x4c
   1724c:	cmp	r3, #0
   17250:	bne	17508 <__assert_fail@plt+0x5fb0>
   17254:	add	r7, r7, r8
   17258:	add	r2, r4, #1
   1725c:	lsl	r3, r4, #2
   17260:	ldr	r1, [r5, #8]
   17264:	str	r9, [r1, r4, lsl #2]
   17268:	add	r4, r4, r8
   1726c:	mov	ip, r4
   17270:	cmp	r2, r4
   17274:	bge	175cc <__assert_fail@plt+0x6074>
   17278:	add	r3, r3, #4
   1727c:	mvn	r0, #0
   17280:	add	r2, r2, #1
   17284:	ldr	r1, [r5, #8]
   17288:	str	r0, [r1, r3]
   1728c:	add	r3, r3, #4
   17290:	cmp	ip, r2
   17294:	bne	17280 <__assert_fail@plt+0x5d28>
   17298:	b	17050 <__assert_fail@plt+0x5af8>
   1729c:	ldr	r0, [r5, #4]
   172a0:	ldr	r3, [r5, #24]
   172a4:	add	r3, r4, r3
   172a8:	ldr	r1, [r5]
   172ac:	mov	r2, r8
   172b0:	add	r1, r1, r3
   172b4:	add	r0, r0, r4
   172b8:	bl	11264 <memcpy@plt>
   172bc:	b	1710c <__assert_fail@plt+0x5bb4>
   172c0:	cmn	r3, #3
   172c4:	bhi	172f8 <__assert_fail@plt+0x5da0>
   172c8:	cmn	r0, #2
   172cc:	bne	17324 <__assert_fail@plt+0x5dcc>
   172d0:	ldr	r2, [r5, #36]	; 0x24
   172d4:	ldr	r3, [r5, #48]	; 0x30
   172d8:	cmp	r2, r3
   172dc:	blt	17324 <__assert_fail@plt+0x5dcc>
   172e0:	ldr	r3, [r5, #4]
   172e4:	strb	sl, [r3, r4]
   172e8:	add	r4, r4, #1
   172ec:	ldr	r3, [r5, #8]
   172f0:	str	sl, [r3, r9, lsl #2]
   172f4:	b	17150 <__assert_fail@plt+0x5bf8>
   172f8:	ldr	r3, [r5, #4]
   172fc:	strb	sl, [r3, r4]
   17300:	add	r4, r4, #1
   17304:	ldr	r3, [r5, #8]
   17308:	str	sl, [r3, r9, lsl #2]
   1730c:	cmn	r0, #1
   17310:	addeq	r3, sp, #80	; 0x50
   17314:	ldmeq	r3, {r0, r1}
   17318:	ldreq	r3, [sp, #4]
   1731c:	stmeq	r3, {r0, r1}
   17320:	b	17150 <__assert_fail@plt+0x5bf8>
   17324:	add	r3, r5, #16
   17328:	add	r2, sp, #88	; 0x58
   1732c:	ldmdb	r2, {r0, r1}
   17330:	stm	r3, {r0, r1}
   17334:	str	r4, [r5, #28]
   17338:	str	r4, [r5, #32]
   1733c:	mov	r0, #0
   17340:	b	17064 <__assert_fail@plt+0x5b0c>
   17344:	ldr	r8, [r5, #80]	; 0x50
   17348:	cmp	r2, #0
   1734c:	cmpgt	r8, #0
   17350:	ble	17398 <__assert_fail@plt+0x5e40>
   17354:	ldr	r3, [r5, #24]
   17358:	add	r3, r7, r3
   1735c:	sub	r3, r3, #1
   17360:	ldr	r0, [r5]
   17364:	add	r0, r0, r3
   17368:	add	ip, sp, #15
   1736c:	mov	r3, #0
   17370:	ldrb	lr, [r0, #1]!
   17374:	ldrb	lr, [r1, lr]
   17378:	strb	lr, [ip, #1]!
   1737c:	add	r3, r3, #1
   17380:	cmp	r8, r3
   17384:	cmpgt	r2, r3
   17388:	bgt	17370 <__assert_fail@plt+0x5e18>
   1738c:	add	r3, sp, #16
   17390:	str	r3, [sp, #4]
   17394:	b	171e0 <__assert_fail@plt+0x5c88>
   17398:	add	r3, sp, #16
   1739c:	str	r3, [sp, #4]
   173a0:	b	171e0 <__assert_fail@plt+0x5c88>
   173a4:	cmn	r0, #1
   173a8:	beq	174d8 <__assert_fail@plt+0x5f80>
   173ac:	mov	r6, r4
   173b0:	add	r3, r4, r0
   173b4:	str	r3, [sp, #4]
   173b8:	ldr	r0, [r5, #36]	; 0x24
   173bc:	cmp	r3, r0
   173c0:	bls	173d8 <__assert_fail@plt+0x5e80>
   173c4:	add	r3, r5, #16
   173c8:	add	r2, sp, #88	; 0x58
   173cc:	ldmdb	r2, {r0, r1}
   173d0:	stm	r3, {r0, r1}
   173d4:	b	17058 <__assert_fail@plt+0x5b00>
   173d8:	ldr	r3, [r5, #12]
   173dc:	cmp	r3, #0
   173e0:	beq	174bc <__assert_fail@plt+0x5f64>
   173e4:	ldrb	r3, [r5, #76]	; 0x4c
   173e8:	cmp	r3, #0
   173ec:	bne	17414 <__assert_fail@plt+0x5ebc>
   173f0:	cmp	r6, #0
   173f4:	beq	1740c <__assert_fail@plt+0x5eb4>
   173f8:	ldr	r2, [r5, #12]
   173fc:	str	r3, [r2, r3, lsl #2]
   17400:	add	r3, r3, #1
   17404:	cmp	r6, r3
   17408:	bne	173f8 <__assert_fail@plt+0x5ea0>
   1740c:	mov	r3, #1
   17410:	strb	r3, [r5, #76]	; 0x4c
   17414:	ldr	r0, [r5, #4]
   17418:	mov	r2, sl
   1741c:	add	r1, sp, #16
   17420:	add	r0, r0, r6
   17424:	bl	11264 <memcpy@plt>
   17428:	lsl	r3, r6, #2
   1742c:	ldr	r2, [r5, #8]
   17430:	str	r9, [r2, r6, lsl #2]
   17434:	ldr	r2, [r5, #12]
   17438:	str	r7, [r2, r6, lsl #2]
   1743c:	cmp	sl, #1
   17440:	bls	17480 <__assert_fail@plt+0x5f28>
   17444:	add	r3, r3, #4
   17448:	mov	r2, #1
   1744c:	mvn	r0, #0
   17450:	ldr	ip, [r5, #12]
   17454:	cmp	r8, r2
   17458:	movhi	r1, r2
   1745c:	movls	r1, fp
   17460:	add	r1, r7, r1
   17464:	str	r1, [ip, r3]
   17468:	ldr	r1, [r5, #8]
   1746c:	str	r0, [r1, r3]
   17470:	add	r2, r2, #1
   17474:	add	r3, r3, #4
   17478:	cmp	r2, sl
   1747c:	bne	17450 <__assert_fail@plt+0x5ef8>
   17480:	sub	sl, sl, r8
   17484:	ldr	r6, [r5, #48]	; 0x30
   17488:	add	r6, sl, r6
   1748c:	str	r6, [r5, #48]	; 0x30
   17490:	ldr	r3, [r5, #52]	; 0x34
   17494:	cmp	r7, r3
   17498:	ldrlt	r3, [r5, #56]	; 0x38
   1749c:	addlt	sl, r3, sl
   174a0:	strlt	sl, [r5, #56]	; 0x38
   174a4:	ldr	r3, [r5, #36]	; 0x24
   174a8:	cmp	r6, r3
   174ac:	movge	r6, r3
   174b0:	ldr	r4, [sp, #4]
   174b4:	add	r7, r7, r8
   174b8:	b	17050 <__assert_fail@plt+0x5af8>
   174bc:	lsl	r0, r0, #2
   174c0:	bl	244c8 <__assert_fail@plt+0x12f70>
   174c4:	str	r0, [r5, #12]
   174c8:	cmp	r0, #0
   174cc:	moveq	r0, #12
   174d0:	bne	173e4 <__assert_fail@plt+0x5e8c>
   174d4:	b	17064 <__assert_fail@plt+0x5b0c>
   174d8:	ldr	r0, [r5, #4]
   174dc:	mov	r2, r8
   174e0:	ldr	r1, [sp, #4]
   174e4:	add	r0, r0, r4
   174e8:	bl	11264 <memcpy@plt>
   174ec:	b	17248 <__assert_fail@plt+0x5cf0>
   174f0:	ldr	r0, [r5, #4]
   174f4:	mov	r2, r8
   174f8:	ldr	r1, [sp, #4]
   174fc:	add	r0, r0, r4
   17500:	bl	11264 <memcpy@plt>
   17504:	b	17248 <__assert_fail@plt+0x5cf0>
   17508:	cmp	r8, #0
   1750c:	beq	17254 <__assert_fail@plt+0x5cfc>
   17510:	lsl	r2, r4, #2
   17514:	mov	r3, r7
   17518:	add	r0, r8, r7
   1751c:	ldr	r1, [r5, #12]
   17520:	str	r3, [r1, r2]
   17524:	add	r2, r2, #4
   17528:	add	r3, r3, #1
   1752c:	cmp	r3, r0
   17530:	bne	1751c <__assert_fail@plt+0x5fc4>
   17534:	b	17254 <__assert_fail@plt+0x5cfc>
   17538:	cmn	fp, #3
   1753c:	bhi	1756c <__assert_fail@plt+0x6014>
   17540:	cmn	r0, #2
   17544:	beq	1755c <__assert_fail@plt+0x6004>
   17548:	add	r3, r5, #16
   1754c:	add	r2, sp, #88	; 0x58
   17550:	ldmdb	r2, {r0, r1}
   17554:	stm	r3, {r0, r1}
   17558:	b	17058 <__assert_fail@plt+0x5b00>
   1755c:	ldr	r2, [r5, #36]	; 0x24
   17560:	ldr	r3, [r5, #48]	; 0x30
   17564:	cmp	r2, r3
   17568:	blt	17548 <__assert_fail@plt+0x5ff0>
   1756c:	ldr	r3, [r5]
   17570:	ldr	r2, [r5, #24]
   17574:	add	r3, r3, r7
   17578:	ldrb	r3, [r3, r2]
   1757c:	ldr	r2, [r5, #64]	; 0x40
   17580:	cmp	r2, #0
   17584:	ldrbne	r3, [r2, r3]
   17588:	mov	r1, r4
   1758c:	ldr	r2, [r5, #4]
   17590:	strb	r3, [r2, r4]
   17594:	ldrb	r2, [r5, #76]	; 0x4c
   17598:	cmp	r2, #0
   1759c:	ldrne	r2, [r5, #12]
   175a0:	strne	r7, [r2, r4, lsl #2]
   175a4:	add	r7, r7, #1
   175a8:	add	r4, r4, #1
   175ac:	ldr	r2, [r5, #8]
   175b0:	str	r3, [r2, r1, lsl #2]
   175b4:	cmn	r8, #1
   175b8:	addeq	r3, r5, #16
   175bc:	addeq	r2, sp, #88	; 0x58
   175c0:	ldmdbeq	r2, {r0, r1}
   175c4:	stmeq	r3, {r0, r1}
   175c8:	b	17050 <__assert_fail@plt+0x5af8>
   175cc:	mov	r4, r2
   175d0:	b	17050 <__assert_fail@plt+0x5af8>
   175d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175d8:	mov	r6, r0
   175dc:	ldr	r8, [r0, #36]	; 0x24
   175e0:	ldr	r3, [r0, #48]	; 0x30
   175e4:	cmp	r8, r3
   175e8:	movge	r8, r3
   175ec:	ldr	r4, [r0, #28]
   175f0:	cmp	r8, r4
   175f4:	ble	17650 <__assert_fail@plt+0x60f8>
   175f8:	ldr	r9, [pc, #92]	; 1765c <__assert_fail@plt+0x6104>
   175fc:	b	17610 <__assert_fail@plt+0x60b8>
   17600:	strb	r5, [r7]
   17604:	add	r4, r4, #1
   17608:	cmp	r8, r4
   1760c:	beq	17650 <__assert_fail@plt+0x60f8>
   17610:	ldr	r3, [r6]
   17614:	ldr	r2, [r6, #24]
   17618:	add	r3, r3, r4
   1761c:	ldrb	r5, [r3, r2]
   17620:	ldr	r3, [r6, #64]	; 0x40
   17624:	cmp	r3, #0
   17628:	ldrbne	r5, [r3, r5]
   1762c:	ldr	r7, [r6, #4]
   17630:	add	r7, r7, r4
   17634:	add	r3, r5, #128	; 0x80
   17638:	cmp	r3, r9
   1763c:	bhi	17600 <__assert_fail@plt+0x60a8>
   17640:	bl	113d8 <__ctype_toupper_loc@plt>
   17644:	ldr	r3, [r0]
   17648:	ldr	r5, [r3, r5, lsl #2]
   1764c:	b	17600 <__assert_fail@plt+0x60a8>
   17650:	str	r4, [r6, #28]
   17654:	str	r4, [r6, #32]
   17658:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1765c:	andeq	r0, r0, pc, ror r1
   17660:	push	{r4, r5, r6, lr}
   17664:	ldr	r3, [r0, #36]	; 0x24
   17668:	cmn	r3, #-536870910	; 0xe0000002
   1766c:	bhi	17728 <__assert_fail@plt+0x61d0>
   17670:	mov	r4, r0
   17674:	lsl	r3, r3, #1
   17678:	ldr	r2, [r0, #48]	; 0x30
   1767c:	cmp	r3, r2
   17680:	movge	r3, r2
   17684:	cmp	r3, r1
   17688:	movge	r1, r3
   1768c:	bl	164e4 <__assert_fail@plt+0x4f8c>
   17690:	subs	r5, r0, #0
   17694:	bne	176e4 <__assert_fail@plt+0x618c>
   17698:	ldr	r0, [r4, #100]	; 0x64
   1769c:	cmp	r0, #0
   176a0:	beq	176c0 <__assert_fail@plt+0x6168>
   176a4:	ldr	r1, [r4, #36]	; 0x24
   176a8:	add	r1, r1, #1
   176ac:	lsl	r1, r1, #2
   176b0:	bl	244f8 <__assert_fail@plt+0x12fa0>
   176b4:	cmp	r0, #0
   176b8:	beq	17730 <__assert_fail@plt+0x61d8>
   176bc:	str	r0, [r4, #100]	; 0x64
   176c0:	ldrb	r3, [r4, #72]	; 0x48
   176c4:	cmp	r3, #0
   176c8:	beq	176f8 <__assert_fail@plt+0x61a0>
   176cc:	ldr	r3, [r4, #80]	; 0x50
   176d0:	cmp	r3, #1
   176d4:	ble	176ec <__assert_fail@plt+0x6194>
   176d8:	mov	r0, r4
   176dc:	bl	17014 <__assert_fail@plt+0x5abc>
   176e0:	mov	r5, r0
   176e4:	mov	r0, r5
   176e8:	pop	{r4, r5, r6, pc}
   176ec:	mov	r0, r4
   176f0:	bl	175d4 <__assert_fail@plt+0x607c>
   176f4:	b	176e4 <__assert_fail@plt+0x618c>
   176f8:	ldr	r3, [r4, #80]	; 0x50
   176fc:	cmp	r3, #1
   17700:	bgt	1771c <__assert_fail@plt+0x61c4>
   17704:	ldr	r3, [r4, #64]	; 0x40
   17708:	cmp	r3, #0
   1770c:	beq	176e4 <__assert_fail@plt+0x618c>
   17710:	mov	r0, r4
   17714:	bl	15908 <__assert_fail@plt+0x43b0>
   17718:	b	176e4 <__assert_fail@plt+0x618c>
   1771c:	mov	r0, r4
   17720:	bl	16ab0 <__assert_fail@plt+0x5558>
   17724:	b	176e4 <__assert_fail@plt+0x618c>
   17728:	mov	r5, #12
   1772c:	b	176e4 <__assert_fail@plt+0x618c>
   17730:	mov	r5, #12
   17734:	b	176e4 <__assert_fail@plt+0x618c>
   17738:	ldr	r3, [r1, #40]	; 0x28
   1773c:	ldr	ip, [r1, #56]	; 0x38
   17740:	cmp	ip, r3
   17744:	ble	179d0 <__assert_fail@plt+0x6478>
   17748:	push	{r4, r5, r6, r7, r8, lr}
   1774c:	sub	sp, sp, #8
   17750:	ldr	ip, [r1, #4]
   17754:	ldrb	r6, [ip, r3]
   17758:	strb	r6, [r0]
   1775c:	ldrb	r3, [r0, #6]
   17760:	and	r3, r3, #159	; 0x9f
   17764:	strb	r3, [r0, #6]
   17768:	ldr	r3, [r1, #80]	; 0x50
   1776c:	cmp	r3, #1
   17770:	ble	17794 <__assert_fail@plt+0x623c>
   17774:	ldr	ip, [r1, #40]	; 0x28
   17778:	ldr	lr, [r1, #28]
   1777c:	cmp	ip, lr
   17780:	beq	17794 <__assert_fail@plt+0x623c>
   17784:	ldr	lr, [r1, #8]
   17788:	ldr	ip, [lr, ip, lsl #2]
   1778c:	cmn	ip, #1
   17790:	beq	179e0 <__assert_fail@plt+0x6488>
   17794:	mov	r7, r2
   17798:	mov	r4, r1
   1779c:	mov	r5, r0
   177a0:	cmp	r6, #92	; 0x5c
   177a4:	beq	17a00 <__assert_fail@plt+0x64a8>
   177a8:	mov	r3, #1
   177ac:	strb	r3, [r0, #4]
   177b0:	ldr	r3, [r1, #80]	; 0x50
   177b4:	cmp	r3, #1
   177b8:	ble	17ec0 <__assert_fail@plt+0x6968>
   177bc:	ldr	r1, [r1, #40]	; 0x28
   177c0:	mov	r0, r4
   177c4:	bl	158ec <__assert_fail@plt+0x4394>
   177c8:	mov	r8, r0
   177cc:	bl	11438 <iswalnum@plt>
   177d0:	adds	r3, r0, #0
   177d4:	movne	r3, #1
   177d8:	ldrb	r0, [r5, #6]
   177dc:	cmp	r8, #95	; 0x5f
   177e0:	orreq	r3, r3, #1
   177e4:	bic	r0, r0, #64	; 0x40
   177e8:	orr	r0, r0, r3, lsl #6
   177ec:	strb	r0, [r5, #6]
   177f0:	sub	r6, r6, #10
   177f4:	cmp	r6, #115	; 0x73
   177f8:	ldrls	pc, [pc, r6, lsl #2]
   177fc:	b	180d0 <__assert_fail@plt+0x6b78>
   17800:	strdeq	r7, [r1], -r4
   17804:	ldrdeq	r8, [r1], -r0
   17808:	ldrdeq	r8, [r1], -r0
   1780c:	ldrdeq	r8, [r1], -r0
   17810:	ldrdeq	r8, [r1], -r0
   17814:	ldrdeq	r8, [r1], -r0
   17818:	ldrdeq	r8, [r1], -r0
   1781c:	ldrdeq	r8, [r1], -r0
   17820:	ldrdeq	r8, [r1], -r0
   17824:	ldrdeq	r8, [r1], -r0
   17828:	ldrdeq	r8, [r1], -r0
   1782c:	ldrdeq	r8, [r1], -r0
   17830:	ldrdeq	r8, [r1], -r0
   17834:	ldrdeq	r8, [r1], -r0
   17838:	ldrdeq	r8, [r1], -r0
   1783c:	ldrdeq	r8, [r1], -r0
   17840:	ldrdeq	r8, [r1], -r0
   17844:	ldrdeq	r8, [r1], -r0
   17848:	ldrdeq	r8, [r1], -r0
   1784c:	ldrdeq	r8, [r1], -r0
   17850:	ldrdeq	r8, [r1], -r0
   17854:	ldrdeq	r8, [r1], -r0
   17858:	ldrdeq	r8, [r1], -r0
   1785c:	ldrdeq	r8, [r1], -r0
   17860:	ldrdeq	r8, [r1], -r0
   17864:	ldrdeq	r8, [r1], -r0
   17868:	andeq	r8, r1, ip, asr r0
   1786c:	ldrdeq	r8, [r1], -r0
   17870:	ldrdeq	r8, [r1], -r0
   17874:	ldrdeq	r8, [r1], -r0
   17878:			; <UNDEFINED> instruction: 0x00017fb0
   1787c:	andeq	r7, r1, r8, asr #31
   17880:	andeq	r7, r1, r8, lsr #30
   17884:	andeq	r7, r1, r8, lsr pc
   17888:	ldrdeq	r8, [r1], -r0
   1788c:	ldrdeq	r8, [r1], -r0
   17890:	strdeq	r7, [r1], -r0
   17894:	ldrdeq	r8, [r1], -r0
   17898:	ldrdeq	r8, [r1], -r0
   1789c:	ldrdeq	r8, [r1], -r0
   178a0:	ldrdeq	r8, [r1], -r0
   178a4:	ldrdeq	r8, [r1], -r0
   178a8:	ldrdeq	r8, [r1], -r0
   178ac:	ldrdeq	r8, [r1], -r0
   178b0:	ldrdeq	r8, [r1], -r0
   178b4:	ldrdeq	r8, [r1], -r0
   178b8:	ldrdeq	r8, [r1], -r0
   178bc:	ldrdeq	r8, [r1], -r0
   178c0:	ldrdeq	r8, [r1], -r0
   178c4:	ldrdeq	r8, [r1], -r0
   178c8:	ldrdeq	r8, [r1], -r0
   178cc:	ldrdeq	r8, [r1], -r0
   178d0:	ldrdeq	r8, [r1], -r0
   178d4:	andeq	r7, r1, r8, asr pc
   178d8:	ldrdeq	r8, [r1], -r0
   178dc:	ldrdeq	r8, [r1], -r0
   178e0:	ldrdeq	r8, [r1], -r0
   178e4:	ldrdeq	r8, [r1], -r0
   178e8:	ldrdeq	r8, [r1], -r0
   178ec:	ldrdeq	r8, [r1], -r0
   178f0:	ldrdeq	r8, [r1], -r0
   178f4:	ldrdeq	r8, [r1], -r0
   178f8:	ldrdeq	r8, [r1], -r0
   178fc:	ldrdeq	r8, [r1], -r0
   17900:	ldrdeq	r8, [r1], -r0
   17904:	ldrdeq	r8, [r1], -r0
   17908:	ldrdeq	r8, [r1], -r0
   1790c:	ldrdeq	r8, [r1], -r0
   17910:	ldrdeq	r8, [r1], -r0
   17914:	ldrdeq	r8, [r1], -r0
   17918:	ldrdeq	r8, [r1], -r0
   1791c:	ldrdeq	r8, [r1], -r0
   17920:	ldrdeq	r8, [r1], -r0
   17924:	ldrdeq	r8, [r1], -r0
   17928:	ldrdeq	r8, [r1], -r0
   1792c:	ldrdeq	r8, [r1], -r0
   17930:	ldrdeq	r8, [r1], -r0
   17934:	ldrdeq	r8, [r1], -r0
   17938:	ldrdeq	r8, [r1], -r0
   1793c:	ldrdeq	r8, [r1], -r0
   17940:	ldrdeq	r8, [r1], -r0
   17944:	andeq	r7, r1, r0, ror #31
   17948:	ldrdeq	r8, [r1], -r0
   1794c:	ldrdeq	r8, [r1], -r0
   17950:	andeq	r8, r1, r0
   17954:	ldrdeq	r8, [r1], -r0
   17958:	ldrdeq	r8, [r1], -r0
   1795c:	ldrdeq	r8, [r1], -r0
   17960:	ldrdeq	r8, [r1], -r0
   17964:	ldrdeq	r8, [r1], -r0
   17968:	ldrdeq	r8, [r1], -r0
   1796c:	ldrdeq	r8, [r1], -r0
   17970:	ldrdeq	r8, [r1], -r0
   17974:	ldrdeq	r8, [r1], -r0
   17978:	ldrdeq	r8, [r1], -r0
   1797c:	ldrdeq	r8, [r1], -r0
   17980:	ldrdeq	r8, [r1], -r0
   17984:	ldrdeq	r8, [r1], -r0
   17988:	ldrdeq	r8, [r1], -r0
   1798c:	ldrdeq	r8, [r1], -r0
   17990:	ldrdeq	r8, [r1], -r0
   17994:	ldrdeq	r8, [r1], -r0
   17998:	ldrdeq	r8, [r1], -r0
   1799c:	ldrdeq	r8, [r1], -r0
   179a0:	ldrdeq	r8, [r1], -r0
   179a4:	ldrdeq	r8, [r1], -r0
   179a8:	ldrdeq	r8, [r1], -r0
   179ac:	ldrdeq	r8, [r1], -r0
   179b0:	ldrdeq	r8, [r1], -r0
   179b4:	ldrdeq	r8, [r1], -r0
   179b8:	ldrdeq	r8, [r1], -r0
   179bc:	ldrdeq	r8, [r1], -r0
   179c0:	ldrdeq	r8, [r1], -r0
   179c4:	andeq	r7, r1, r8, ror pc
   179c8:	andeq	r7, r1, ip, lsl #30
   179cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   179d0:	mov	r3, #2
   179d4:	strb	r3, [r0, #4]
   179d8:	mov	r0, #0
   179dc:	bx	lr
   179e0:	mov	r3, #1
   179e4:	strb	r3, [r0, #4]
   179e8:	ldrb	r2, [r0, #6]
   179ec:	orr	r2, r2, #32
   179f0:	strb	r2, [r0, #6]
   179f4:	mov	r0, r3
   179f8:	add	sp, sp, #8
   179fc:	pop	{r4, r5, r6, r7, r8, pc}
   17a00:	ldr	r1, [r1, #40]	; 0x28
   17a04:	add	r2, r1, #1
   17a08:	ldr	r0, [r4, #48]	; 0x30
   17a0c:	cmp	r2, r0
   17a10:	bge	17be4 <__assert_fail@plt+0x668c>
   17a14:	ldrb	r0, [r4, #75]	; 0x4b
   17a18:	cmp	r0, #0
   17a1c:	bne	17bf4 <__assert_fail@plt+0x669c>
   17a20:	ldr	r3, [r4, #4]
   17a24:	ldrb	r6, [r3, r2]
   17a28:	strb	r6, [r5]
   17a2c:	mov	r3, #1
   17a30:	strb	r3, [r5, #4]
   17a34:	ldr	r3, [r4, #80]	; 0x50
   17a38:	cmp	r3, #1
   17a3c:	ble	17c70 <__assert_fail@plt+0x6718>
   17a40:	ldr	r1, [r4, #40]	; 0x28
   17a44:	add	r1, r1, #1
   17a48:	mov	r0, r4
   17a4c:	bl	158ec <__assert_fail@plt+0x4394>
   17a50:	mov	r4, r0
   17a54:	bl	11438 <iswalnum@plt>
   17a58:	adds	r3, r0, #0
   17a5c:	movne	r3, #1
   17a60:	ldrb	r0, [r5, #6]
   17a64:	cmp	r4, #95	; 0x5f
   17a68:	orreq	r3, r3, #1
   17a6c:	bic	r0, r0, #64	; 0x40
   17a70:	orr	r0, r0, r3, lsl #6
   17a74:	strb	r0, [r5, #6]
   17a78:	sub	r3, r6, #39	; 0x27
   17a7c:	cmp	r3, #86	; 0x56
   17a80:	ldrls	pc, [pc, r3, lsl #2]
   17a84:	b	180c8 <__assert_fail@plt+0x6b70>
   17a88:	strdeq	r7, [r1], -r4
   17a8c:	andeq	r7, r1, r8, lsl lr
   17a90:	andeq	r7, r1, r0, lsr lr
   17a94:	andeq	r8, r1, r8, asr #1
   17a98:	andeq	r7, r1, r8, asr #28
   17a9c:	andeq	r8, r1, r8, asr #1
   17aa0:	andeq	r8, r1, r8, asr #1
   17aa4:	andeq	r8, r1, r8, asr #1
   17aa8:	andeq	r8, r1, r8, asr #1
   17aac:	andeq	r8, r1, r8, asr #1
   17ab0:			; <UNDEFINED> instruction: 0x00017cbc
   17ab4:			; <UNDEFINED> instruction: 0x00017cbc
   17ab8:			; <UNDEFINED> instruction: 0x00017cbc
   17abc:			; <UNDEFINED> instruction: 0x00017cbc
   17ac0:			; <UNDEFINED> instruction: 0x00017cbc
   17ac4:			; <UNDEFINED> instruction: 0x00017cbc
   17ac8:			; <UNDEFINED> instruction: 0x00017cbc
   17acc:			; <UNDEFINED> instruction: 0x00017cbc
   17ad0:			; <UNDEFINED> instruction: 0x00017cbc
   17ad4:	andeq	r8, r1, r8, asr #1
   17ad8:	andeq	r8, r1, r8, asr #1
   17adc:	andeq	r7, r1, r0, ror #25
   17ae0:	andeq	r8, r1, r8, asr #1
   17ae4:	andeq	r7, r1, r4, lsl #26
   17ae8:	andeq	r7, r1, r8, ror #28
   17aec:	andeq	r8, r1, r8, asr #1
   17af0:	andeq	r8, r1, r8, asr #1
   17af4:	andeq	r7, r1, ip, asr #26
   17af8:	andeq	r8, r1, r8, asr #1
   17afc:	andeq	r8, r1, r8, asr #1
   17b00:	andeq	r8, r1, r8, asr #1
   17b04:	andeq	r8, r1, r8, asr #1
   17b08:	andeq	r8, r1, r8, asr #1
   17b0c:	andeq	r8, r1, r8, asr #1
   17b10:	andeq	r8, r1, r8, asr #1
   17b14:	andeq	r8, r1, r8, asr #1
   17b18:	andeq	r8, r1, r8, asr #1
   17b1c:	andeq	r8, r1, r8, asr #1
   17b20:	andeq	r8, r1, r8, asr #1
   17b24:	andeq	r8, r1, r8, asr #1
   17b28:	andeq	r8, r1, r8, asr #1
   17b2c:	andeq	r8, r1, r8, asr #1
   17b30:	andeq	r8, r1, r8, asr #1
   17b34:	andeq	r8, r1, r8, asr #1
   17b38:			; <UNDEFINED> instruction: 0x00017db8
   17b3c:	andeq	r8, r1, r8, asr #1
   17b40:	andeq	r8, r1, r8, asr #1
   17b44:	andeq	r8, r1, r8, asr #1
   17b48:	andeq	r7, r1, r8, lsl #27
   17b4c:	andeq	r8, r1, r8, asr #1
   17b50:	andeq	r8, r1, r8, asr #1
   17b54:	andeq	r8, r1, r8, asr #1
   17b58:	andeq	r8, r1, r8, asr #1
   17b5c:	andeq	r8, r1, r8, asr #1
   17b60:	andeq	r8, r1, r8, asr #1
   17b64:	andeq	r8, r1, r8, asr #1
   17b68:	andeq	r8, r1, r8, asr #1
   17b6c:	ldrdeq	r7, [r1], -r0
   17b70:	andeq	r8, r1, r8, asr #1
   17b74:	andeq	r7, r1, r8, lsr #26
   17b78:	andeq	r8, r1, r8, asr #1
   17b7c:	andeq	r8, r1, r8, asr #1
   17b80:	andeq	r8, r1, r8, asr #1
   17b84:	andeq	r8, r1, r8, asr #1
   17b88:	andeq	r8, r1, r8, asr #1
   17b8c:	andeq	r8, r1, r8, asr #1
   17b90:	andeq	r8, r1, r8, asr #1
   17b94:	andeq	r8, r1, r8, asr #1
   17b98:	andeq	r8, r1, r8, asr #1
   17b9c:	andeq	r8, r1, r8, asr #1
   17ba0:	andeq	r8, r1, r8, asr #1
   17ba4:	andeq	r8, r1, r8, asr #1
   17ba8:	andeq	r8, r1, r8, asr #1
   17bac:	andeq	r8, r1, r8, asr #1
   17bb0:	andeq	r8, r1, r8, asr #1
   17bb4:	andeq	r8, r1, r8, asr #1
   17bb8:	andeq	r7, r1, r0, lsr #27
   17bbc:	andeq	r8, r1, r8, asr #1
   17bc0:	andeq	r8, r1, r8, asr #1
   17bc4:	andeq	r8, r1, r8, asr #1
   17bc8:	andeq	r7, r1, r0, ror sp
   17bcc:	andeq	r8, r1, r8, asr #1
   17bd0:	andeq	r8, r1, r8, asr #1
   17bd4:	andeq	r8, r1, r8, asr #1
   17bd8:	andeq	r7, r1, r8, lsl #29
   17bdc:	andeq	r7, r1, r4, lsr #25
   17be0:	andeq	r7, r1, r4, lsr #29
   17be4:	mov	r3, #36	; 0x24
   17be8:	strb	r3, [r5, #4]
   17bec:	mov	r0, #1
   17bf0:	b	179f8 <__assert_fail@plt+0x64a0>
   17bf4:	cmp	r3, #1
   17bf8:	ble	17c30 <__assert_fail@plt+0x66d8>
   17bfc:	ldr	r3, [r4, #8]
   17c00:	lsl	ip, r2, #2
   17c04:	ldr	r0, [r3, r2, lsl #2]
   17c08:	cmn	r0, #1
   17c0c:	beq	17c64 <__assert_fail@plt+0x670c>
   17c10:	add	r1, r1, #2
   17c14:	ldr	r0, [r4, #28]
   17c18:	cmp	r0, r1
   17c1c:	beq	17c30 <__assert_fail@plt+0x66d8>
   17c20:	add	r3, r3, ip
   17c24:	ldr	r3, [r3, #4]
   17c28:	cmn	r3, #1
   17c2c:	beq	17c64 <__assert_fail@plt+0x670c>
   17c30:	ldrb	r3, [r4, #76]	; 0x4c
   17c34:	cmp	r3, #0
   17c38:	beq	180d8 <__assert_fail@plt+0x6b80>
   17c3c:	ldr	r1, [r4, #12]
   17c40:	ldr	r3, [r4]
   17c44:	ldr	r0, [r1, r2, lsl #2]
   17c48:	ldr	r1, [r4, #24]
   17c4c:	add	r3, r3, r0
   17c50:	ldrb	r6, [r3, r1]
   17c54:	bics	r3, r6, #127	; 0x7f
   17c58:	ldrne	r3, [r4, #4]
   17c5c:	ldrbne	r6, [r3, r2]
   17c60:	b	17a28 <__assert_fail@plt+0x64d0>
   17c64:	ldr	r3, [r4, #4]
   17c68:	ldrb	r6, [r3, r2]
   17c6c:	b	17a28 <__assert_fail@plt+0x64d0>
   17c70:	bl	113fc <__ctype_b_loc@plt>
   17c74:	ldr	r2, [r0]
   17c78:	lsl	r3, r6, #1
   17c7c:	ldrh	r3, [r2, r3]
   17c80:	lsr	r3, r3, #3
   17c84:	and	r3, r3, #1
   17c88:	ldrb	r2, [r5, #6]
   17c8c:	cmp	r6, #95	; 0x5f
   17c90:	orreq	r3, r3, #1
   17c94:	bic	r2, r2, #64	; 0x40
   17c98:	orr	r3, r2, r3, lsl #6
   17c9c:	strb	r3, [r5, #6]
   17ca0:	b	17a78 <__assert_fail@plt+0x6520>
   17ca4:	tst	r7, #33792	; 0x8400
   17ca8:	movne	r0, #2
   17cac:	moveq	r3, #10
   17cb0:	strbeq	r3, [r5, #4]
   17cb4:	moveq	r0, #2
   17cb8:	b	179f8 <__assert_fail@plt+0x64a0>
   17cbc:	tst	r7, #16384	; 0x4000
   17cc0:	movne	r0, #2
   17cc4:	bne	179f8 <__assert_fail@plt+0x64a0>
   17cc8:	mov	r3, #4
   17ccc:	strb	r3, [r5, #4]
   17cd0:	sub	r6, r6, #49	; 0x31
   17cd4:	str	r6, [r5]
   17cd8:	mov	r0, #2
   17cdc:	b	179f8 <__assert_fail@plt+0x64a0>
   17ce0:	tst	r7, #524288	; 0x80000
   17ce4:	movne	r0, #2
   17ce8:	bne	179f8 <__assert_fail@plt+0x64a0>
   17cec:	mov	r3, #12
   17cf0:	strb	r3, [r5, #4]
   17cf4:	mov	r3, #6
   17cf8:	str	r3, [r5]
   17cfc:	mov	r0, #2
   17d00:	b	179f8 <__assert_fail@plt+0x64a0>
   17d04:	tst	r7, #524288	; 0x80000
   17d08:	movne	r0, #2
   17d0c:	bne	179f8 <__assert_fail@plt+0x64a0>
   17d10:	mov	r3, #12
   17d14:	strb	r3, [r5, #4]
   17d18:	mov	r3, #9
   17d1c:	str	r3, [r5]
   17d20:	mov	r0, #2
   17d24:	b	179f8 <__assert_fail@plt+0x64a0>
   17d28:	tst	r7, #524288	; 0x80000
   17d2c:	movne	r0, #2
   17d30:	bne	179f8 <__assert_fail@plt+0x64a0>
   17d34:	mov	r3, #12
   17d38:	strb	r3, [r5, #4]
   17d3c:	mov	r3, #256	; 0x100
   17d40:	str	r3, [r5]
   17d44:	mov	r0, #2
   17d48:	b	179f8 <__assert_fail@plt+0x64a0>
   17d4c:	tst	r7, #524288	; 0x80000
   17d50:	movne	r0, #2
   17d54:	bne	179f8 <__assert_fail@plt+0x64a0>
   17d58:	mov	r3, #12
   17d5c:	strb	r3, [r5, #4]
   17d60:	mov	r3, #512	; 0x200
   17d64:	str	r3, [r5]
   17d68:	mov	r0, #2
   17d6c:	b	179f8 <__assert_fail@plt+0x64a0>
   17d70:	tst	r7, #524288	; 0x80000
   17d74:	movne	r0, #2
   17d78:	moveq	r3, #32
   17d7c:	strbeq	r3, [r5, #4]
   17d80:	moveq	r0, #2
   17d84:	b	179f8 <__assert_fail@plt+0x64a0>
   17d88:	tst	r7, #524288	; 0x80000
   17d8c:	movne	r0, #2
   17d90:	moveq	r3, #33	; 0x21
   17d94:	strbeq	r3, [r5, #4]
   17d98:	moveq	r0, #2
   17d9c:	b	179f8 <__assert_fail@plt+0x64a0>
   17da0:	tst	r7, #524288	; 0x80000
   17da4:	movne	r0, #2
   17da8:	moveq	r3, #34	; 0x22
   17dac:	strbeq	r3, [r5, #4]
   17db0:	moveq	r0, #2
   17db4:	b	179f8 <__assert_fail@plt+0x64a0>
   17db8:	tst	r7, #524288	; 0x80000
   17dbc:	movne	r0, #2
   17dc0:	moveq	r3, #35	; 0x23
   17dc4:	strbeq	r3, [r5, #4]
   17dc8:	moveq	r0, #2
   17dcc:	b	179f8 <__assert_fail@plt+0x64a0>
   17dd0:	tst	r7, #524288	; 0x80000
   17dd4:	movne	r0, #2
   17dd8:	bne	179f8 <__assert_fail@plt+0x64a0>
   17ddc:	mov	r3, #12
   17de0:	strb	r3, [r5, #4]
   17de4:	mov	r3, #64	; 0x40
   17de8:	str	r3, [r5]
   17dec:	mov	r0, #2
   17df0:	b	179f8 <__assert_fail@plt+0x64a0>
   17df4:	tst	r7, #524288	; 0x80000
   17df8:	movne	r0, #2
   17dfc:	bne	179f8 <__assert_fail@plt+0x64a0>
   17e00:	mov	r3, #12
   17e04:	strb	r3, [r5, #4]
   17e08:	mov	r3, #128	; 0x80
   17e0c:	str	r3, [r5]
   17e10:	mov	r0, #2
   17e14:	b	179f8 <__assert_fail@plt+0x64a0>
   17e18:	tst	r7, #8192	; 0x2000
   17e1c:	movne	r0, #2
   17e20:	moveq	r3, #8
   17e24:	strbeq	r3, [r5, #4]
   17e28:	moveq	r0, #2
   17e2c:	b	179f8 <__assert_fail@plt+0x64a0>
   17e30:	tst	r7, #8192	; 0x2000
   17e34:	movne	r0, #2
   17e38:	moveq	r3, #9
   17e3c:	strbeq	r3, [r5, #4]
   17e40:	moveq	r0, #2
   17e44:	b	179f8 <__assert_fail@plt+0x64a0>
   17e48:	ldr	r3, [pc, #668]	; 180ec <__assert_fail@plt+0x6b94>
   17e4c:	and	r3, r3, r7
   17e50:	cmp	r3, #2
   17e54:	moveq	r3, #18
   17e58:	strbeq	r3, [r5, #4]
   17e5c:	moveq	r0, #2
   17e60:	movne	r0, #2
   17e64:	b	179f8 <__assert_fail@plt+0x64a0>
   17e68:	ldr	r3, [pc, #636]	; 180ec <__assert_fail@plt+0x6b94>
   17e6c:	and	r3, r3, r7
   17e70:	cmp	r3, #2
   17e74:	moveq	r3, #19
   17e78:	strbeq	r3, [r5, #4]
   17e7c:	moveq	r0, #2
   17e80:	movne	r0, #2
   17e84:	b	179f8 <__assert_fail@plt+0x64a0>
   17e88:	and	r7, r7, #4608	; 0x1200
   17e8c:	cmp	r7, #512	; 0x200
   17e90:	moveq	r3, #23
   17e94:	strbeq	r3, [r5, #4]
   17e98:	moveq	r0, #2
   17e9c:	movne	r0, #2
   17ea0:	b	179f8 <__assert_fail@plt+0x64a0>
   17ea4:	and	r7, r7, #4608	; 0x1200
   17ea8:	cmp	r7, #512	; 0x200
   17eac:	moveq	r3, #24
   17eb0:	strbeq	r3, [r5, #4]
   17eb4:	moveq	r0, #2
   17eb8:	movne	r0, #2
   17ebc:	b	179f8 <__assert_fail@plt+0x64a0>
   17ec0:	bl	113fc <__ctype_b_loc@plt>
   17ec4:	ldr	r2, [r0]
   17ec8:	lsl	r3, r6, #1
   17ecc:	ldrh	r3, [r2, r3]
   17ed0:	lsr	r3, r3, #3
   17ed4:	and	r3, r3, #1
   17ed8:	ldrb	r2, [r5, #6]
   17edc:	cmp	r6, #95	; 0x5f
   17ee0:	orreq	r3, r3, #1
   17ee4:	bic	r2, r2, #64	; 0x40
   17ee8:	orr	r3, r2, r3, lsl #6
   17eec:	strb	r3, [r5, #6]
   17ef0:	b	177f0 <__assert_fail@plt+0x6298>
   17ef4:	tst	r7, #2048	; 0x800
   17ef8:	moveq	r0, #1
   17efc:	movne	r3, #10
   17f00:	strbne	r3, [r5, #4]
   17f04:	movne	r0, #1
   17f08:	b	179f8 <__assert_fail@plt+0x64a0>
   17f0c:	and	r7, r7, #33792	; 0x8400
   17f10:	cmp	r7, #32768	; 0x8000
   17f14:	moveq	r3, #10
   17f18:	strbeq	r3, [r5, #4]
   17f1c:	moveq	r0, #1
   17f20:	movne	r0, #1
   17f24:	b	179f8 <__assert_fail@plt+0x64a0>
   17f28:	mov	r3, #11
   17f2c:	strb	r3, [r5, #4]
   17f30:	mov	r0, #1
   17f34:	b	179f8 <__assert_fail@plt+0x64a0>
   17f38:	ldr	r3, [pc, #428]	; 180ec <__assert_fail@plt+0x6b94>
   17f3c:	and	r3, r3, r7
   17f40:	cmp	r3, #0
   17f44:	movne	r0, #1
   17f48:	moveq	r3, #18
   17f4c:	strbeq	r3, [r5, #4]
   17f50:	moveq	r0, #1
   17f54:	b	179f8 <__assert_fail@plt+0x64a0>
   17f58:	ldr	r3, [pc, #396]	; 180ec <__assert_fail@plt+0x6b94>
   17f5c:	and	r3, r3, r7
   17f60:	cmp	r3, #0
   17f64:	movne	r0, #1
   17f68:	moveq	r3, #19
   17f6c:	strbeq	r3, [r5, #4]
   17f70:	moveq	r0, #1
   17f74:	b	179f8 <__assert_fail@plt+0x64a0>
   17f78:	and	r7, r7, #4608	; 0x1200
   17f7c:	cmp	r7, #4608	; 0x1200
   17f80:	moveq	r3, #23
   17f84:	strbeq	r3, [r5, #4]
   17f88:	moveq	r0, #1
   17f8c:	movne	r0, #1
   17f90:	b	179f8 <__assert_fail@plt+0x64a0>
   17f94:	and	r7, r7, #4608	; 0x1200
   17f98:	cmp	r7, #4608	; 0x1200
   17f9c:	moveq	r3, #24
   17fa0:	strbeq	r3, [r5, #4]
   17fa4:	moveq	r0, #1
   17fa8:	movne	r0, #1
   17fac:	b	179f8 <__assert_fail@plt+0x64a0>
   17fb0:	tst	r7, #8192	; 0x2000
   17fb4:	moveq	r0, #1
   17fb8:	movne	r3, #8
   17fbc:	strbne	r3, [r5, #4]
   17fc0:	movne	r0, #1
   17fc4:	b	179f8 <__assert_fail@plt+0x64a0>
   17fc8:	tst	r7, #8192	; 0x2000
   17fcc:	moveq	r0, #1
   17fd0:	movne	r3, #9
   17fd4:	strbne	r3, [r5, #4]
   17fd8:	movne	r0, #1
   17fdc:	b	179f8 <__assert_fail@plt+0x64a0>
   17fe0:	mov	r3, #20
   17fe4:	strb	r3, [r5, #4]
   17fe8:	mov	r0, #1
   17fec:	b	179f8 <__assert_fail@plt+0x64a0>
   17ff0:	mov	r3, #5
   17ff4:	strb	r3, [r5, #4]
   17ff8:	mov	r0, #1
   17ffc:	b	179f8 <__assert_fail@plt+0x64a0>
   18000:	ldr	r3, [pc, #232]	; 180f0 <__assert_fail@plt+0x6b98>
   18004:	and	r3, r3, r7
   18008:	cmp	r3, #0
   1800c:	bne	18044 <__assert_fail@plt+0x6aec>
   18010:	ldr	r3, [r4, #40]	; 0x28
   18014:	cmp	r3, #0
   18018:	beq	18044 <__assert_fail@plt+0x6aec>
   1801c:	ldr	r2, [r4, #4]
   18020:	add	r3, r2, r3
   18024:	ldrb	r2, [r3, #-1]
   18028:	lsr	r3, r7, #11
   1802c:	eor	r3, r3, #1
   18030:	cmp	r2, #10
   18034:	orrne	r3, r3, #1
   18038:	tst	r3, #1
   1803c:	movne	r0, #1
   18040:	bne	179f8 <__assert_fail@plt+0x64a0>
   18044:	mov	r3, #12
   18048:	strb	r3, [r5, #4]
   1804c:	mov	r3, #16
   18050:	str	r3, [r5]
   18054:	mov	r0, #1
   18058:	b	179f8 <__assert_fail@plt+0x64a0>
   1805c:	tst	r7, #8
   18060:	bne	180b0 <__assert_fail@plt+0x6b58>
   18064:	ldr	r3, [r4, #40]	; 0x28
   18068:	add	r3, r3, #1
   1806c:	ldr	r2, [r4, #48]	; 0x30
   18070:	cmp	r3, r2
   18074:	beq	180b0 <__assert_fail@plt+0x6b58>
   18078:	str	r3, [r4, #40]	; 0x28
   1807c:	mov	r2, r7
   18080:	mov	r1, r4
   18084:	mov	r0, sp
   18088:	bl	17738 <__assert_fail@plt+0x61e0>
   1808c:	ldr	r3, [r4, #40]	; 0x28
   18090:	sub	r3, r3, #1
   18094:	str	r3, [r4, #40]	; 0x28
   18098:	ldrb	r3, [sp, #4]
   1809c:	sub	r3, r3, #9
   180a0:	uxtb	r3, r3
   180a4:	cmp	r3, #1
   180a8:	movhi	r0, #1
   180ac:	bhi	179f8 <__assert_fail@plt+0x64a0>
   180b0:	mov	r3, #12
   180b4:	strb	r3, [r5, #4]
   180b8:	mov	r3, #32
   180bc:	str	r3, [r5]
   180c0:	mov	r0, #1
   180c4:	b	179f8 <__assert_fail@plt+0x64a0>
   180c8:	mov	r0, #2
   180cc:	b	179f8 <__assert_fail@plt+0x64a0>
   180d0:	mov	r0, #1
   180d4:	b	179f8 <__assert_fail@plt+0x64a0>
   180d8:	ldr	r3, [r4]
   180dc:	ldr	r1, [r4, #24]
   180e0:	add	r2, r3, r2
   180e4:	ldrb	r6, [r2, r1]
   180e8:	b	17a28 <__assert_fail@plt+0x64d0>
   180ec:	andeq	r0, r0, r2, lsl #8
   180f0:	addeq	r0, r0, r8
   180f4:	push	{r4, lr}
   180f8:	mov	r4, r1
   180fc:	bl	17738 <__assert_fail@plt+0x61e0>
   18100:	ldr	r3, [r4, #40]	; 0x28
   18104:	add	r0, r3, r0
   18108:	str	r0, [r4, #40]	; 0x28
   1810c:	pop	{r4, pc}
   18110:	push	{r4, r5, r6, r7, r8, lr}
   18114:	mov	r7, r0
   18118:	mov	r4, r1
   1811c:	mov	r6, r2
   18120:	mvn	r5, #0
   18124:	mov	r2, r6
   18128:	mov	r1, r7
   1812c:	mov	r0, r4
   18130:	bl	180f4 <__assert_fail@plt+0x6b9c>
   18134:	ldrb	r2, [r4]
   18138:	ldrb	r3, [r4, #4]
   1813c:	cmp	r3, #2
   18140:	beq	181a8 <__assert_fail@plt+0x6c50>
   18144:	cmp	r3, #24
   18148:	cmpne	r2, #44	; 0x2c
   1814c:	beq	181ac <__assert_fail@plt+0x6c54>
   18150:	cmp	r3, #1
   18154:	mvnne	r5, #1
   18158:	bne	18124 <__assert_fail@plt+0x6bcc>
   1815c:	sub	r3, r2, #48	; 0x30
   18160:	uxtb	r3, r3
   18164:	cmp	r3, #9
   18168:	movhi	r3, #0
   1816c:	movls	r3, #1
   18170:	cmn	r5, #2
   18174:	moveq	r3, #0
   18178:	cmp	r3, #0
   1817c:	mvneq	r5, #1
   18180:	beq	18124 <__assert_fail@plt+0x6bcc>
   18184:	cmn	r5, #1
   18188:	subeq	r5, r2, #48	; 0x30
   1818c:	beq	18124 <__assert_fail@plt+0x6bcc>
   18190:	add	r5, r5, r5, lsl #2
   18194:	add	r2, r2, r5, lsl #1
   18198:	sub	r5, r2, #48	; 0x30
   1819c:	cmp	r5, #32768	; 0x8000
   181a0:	movge	r5, #32768	; 0x8000
   181a4:	b	18124 <__assert_fail@plt+0x6bcc>
   181a8:	mvn	r5, #1
   181ac:	mov	r0, r5
   181b0:	pop	{r4, r5, r6, r7, r8, pc}
   181b4:	push	{r4, lr}
   181b8:	mov	r4, r0
   181bc:	ldr	r0, [r0]
   181c0:	bl	13b40 <__assert_fail@plt+0x25e8>
   181c4:	ldr	r0, [r4, #4]
   181c8:	bl	13b40 <__assert_fail@plt+0x25e8>
   181cc:	ldr	r0, [r4, #8]
   181d0:	bl	13b40 <__assert_fail@plt+0x25e8>
   181d4:	ldr	r0, [r4, #12]
   181d8:	bl	13b40 <__assert_fail@plt+0x25e8>
   181dc:	mov	r0, r4
   181e0:	bl	13b40 <__assert_fail@plt+0x25e8>
   181e4:	pop	{r4, pc}
   181e8:	push	{r4, lr}
   181ec:	ldr	r2, [r0, #4]
   181f0:	ldr	r3, [pc, #40]	; 18220 <__assert_fail@plt+0x6cc8>
   181f4:	and	r3, r3, r2
   181f8:	cmp	r3, #6
   181fc:	beq	18214 <__assert_fail@plt+0x6cbc>
   18200:	cmp	r3, #3
   18204:	popne	{r4, pc}
   18208:	ldr	r0, [r0]
   1820c:	bl	13b40 <__assert_fail@plt+0x25e8>
   18210:	pop	{r4, pc}
   18214:	ldr	r0, [r0]
   18218:	bl	181b4 <__assert_fail@plt+0x6c5c>
   1821c:	pop	{r4, pc}
   18220:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   18224:	push	{r4, lr}
   18228:	add	r0, r1, #20
   1822c:	bl	181e8 <__assert_fail@plt+0x6c90>
   18230:	mov	r0, #0
   18234:	pop	{r4, pc}
   18238:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1823c:	sub	sp, sp, #8
   18240:	mov	r4, r0
   18244:	add	r3, sp, #8
   18248:	stmdb	r3, {r1, r2}
   1824c:	ldrb	r5, [sp, #4]
   18250:	ldr	r3, [r0, #4]
   18254:	ldr	r2, [r0, #8]
   18258:	cmp	r2, r3
   1825c:	bcs	18330 <__assert_fail@plt+0x6dd8>
   18260:	ldr	r2, [r4, #8]
   18264:	ldr	r3, [r4]
   18268:	add	r3, r3, r2, lsl #3
   1826c:	add	r2, sp, #8
   18270:	ldmdb	r2, {r0, r1}
   18274:	stm	r3, {r0, r1}
   18278:	ldr	r3, [r4, #8]
   1827c:	ldr	r2, [r4]
   18280:	add	r2, r2, r3, lsl #3
   18284:	ldr	r3, [r2, #4]
   18288:	bic	r3, r3, #261120	; 0x3fc00
   1828c:	bic	r3, r3, #768	; 0x300
   18290:	str	r3, [r2, #4]
   18294:	ldr	r3, [r4, #8]
   18298:	ldr	r2, [r4]
   1829c:	add	r2, r2, r3, lsl #3
   182a0:	cmp	r5, #5
   182a4:	beq	183fc <__assert_fail@plt+0x6ea4>
   182a8:	cmp	r5, #6
   182ac:	movne	r5, #0
   182b0:	moveq	r5, #1
   182b4:	ldrb	r3, [r2, #6]
   182b8:	and	r5, r5, #1
   182bc:	bic	r3, r3, #16
   182c0:	orr	r5, r3, r5, lsl #4
   182c4:	strb	r5, [r2, #6]
   182c8:	ldr	r2, [r4, #8]
   182cc:	ldr	r3, [r4, #12]
   182d0:	mvn	r1, #0
   182d4:	str	r1, [r3, r2, lsl #2]
   182d8:	ldr	r3, [r4, #8]
   182dc:	add	r3, r3, r3, lsl #1
   182e0:	lsl	r3, r3, #2
   182e4:	ldr	r0, [r4, #20]
   182e8:	add	r1, r0, r3
   182ec:	mov	r2, #0
   182f0:	str	r2, [r0, r3]
   182f4:	str	r2, [r1, #4]
   182f8:	str	r2, [r1, #8]
   182fc:	ldr	r3, [r4, #8]
   18300:	add	r3, r3, r3, lsl #1
   18304:	lsl	r3, r3, #2
   18308:	ldr	r0, [r4, #24]
   1830c:	add	r1, r0, r3
   18310:	str	r2, [r0, r3]
   18314:	str	r2, [r1, #4]
   18318:	str	r2, [r1, #8]
   1831c:	ldr	r0, [r4, #8]
   18320:	add	r3, r0, #1
   18324:	str	r3, [r4, #8]
   18328:	add	sp, sp, #8
   1832c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18330:	lsl	r6, r3, #1
   18334:	ldr	r3, [pc, #228]	; 18420 <__assert_fail@plt+0x6ec8>
   18338:	cmp	r6, r3
   1833c:	bhi	18410 <__assert_fail@plt+0x6eb8>
   18340:	lsl	r1, r6, #3
   18344:	ldr	r0, [r0]
   18348:	bl	244f8 <__assert_fail@plt+0x12fa0>
   1834c:	cmp	r0, #0
   18350:	beq	18418 <__assert_fail@plt+0x6ec0>
   18354:	str	r0, [r4]
   18358:	lsl	r7, r6, #2
   1835c:	mov	r1, r7
   18360:	ldr	r0, [r4, #12]
   18364:	bl	244f8 <__assert_fail@plt+0x12fa0>
   18368:	mov	r9, r0
   1836c:	mov	r1, r7
   18370:	ldr	r0, [r4, #16]
   18374:	bl	244f8 <__assert_fail@plt+0x12fa0>
   18378:	mov	r8, r0
   1837c:	add	r7, r6, r6, lsl #1
   18380:	lsl	r7, r7, #2
   18384:	mov	r1, r7
   18388:	ldr	r0, [r4, #20]
   1838c:	bl	244f8 <__assert_fail@plt+0x12fa0>
   18390:	mov	sl, r0
   18394:	mov	r1, r7
   18398:	ldr	r0, [r4, #24]
   1839c:	bl	244f8 <__assert_fail@plt+0x12fa0>
   183a0:	mov	r7, r0
   183a4:	cmp	r8, #0
   183a8:	cmpne	r9, #0
   183ac:	beq	183d4 <__assert_fail@plt+0x6e7c>
   183b0:	cmp	r0, #0
   183b4:	cmpne	sl, #0
   183b8:	beq	183d4 <__assert_fail@plt+0x6e7c>
   183bc:	str	r9, [r4, #12]
   183c0:	str	r8, [r4, #16]
   183c4:	str	sl, [r4, #20]
   183c8:	str	r0, [r4, #24]
   183cc:	str	r6, [r4, #4]
   183d0:	b	18260 <__assert_fail@plt+0x6d08>
   183d4:	mov	r0, r9
   183d8:	bl	13b40 <__assert_fail@plt+0x25e8>
   183dc:	mov	r0, r8
   183e0:	bl	13b40 <__assert_fail@plt+0x25e8>
   183e4:	mov	r0, sl
   183e8:	bl	13b40 <__assert_fail@plt+0x25e8>
   183ec:	mov	r0, r7
   183f0:	bl	13b40 <__assert_fail@plt+0x25e8>
   183f4:	mvn	r0, #0
   183f8:	b	18328 <__assert_fail@plt+0x6dd0>
   183fc:	ldr	r3, [r4, #92]	; 0x5c
   18400:	cmp	r3, #1
   18404:	movgt	r5, #1
   18408:	bgt	182b4 <__assert_fail@plt+0x6d5c>
   1840c:	b	182a8 <__assert_fail@plt+0x6d50>
   18410:	mvn	r0, #0
   18414:	b	18328 <__assert_fail@plt+0x6dd0>
   18418:	mvn	r0, #0
   1841c:	b	18328 <__assert_fail@plt+0x6dd0>
   18420:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   18424:	ldrb	r3, [r1, #24]
   18428:	cmp	r3, #16
   1842c:	beq	1846c <__assert_fail@plt+0x6f14>
   18430:	push	{r4, r5, r6, lr}
   18434:	mov	r4, r1
   18438:	mov	r5, r0
   1843c:	str	r1, [r4, #12]
   18440:	add	r3, r1, #20
   18444:	ldm	r3, {r1, r2}
   18448:	bl	18238 <__assert_fail@plt+0x6ce0>
   1844c:	str	r0, [r4, #28]
   18450:	cmn	r0, #1
   18454:	beq	184b4 <__assert_fail@plt+0x6f5c>
   18458:	ldrb	r3, [r4, #24]
   1845c:	cmp	r3, #12
   18460:	beq	18488 <__assert_fail@plt+0x6f30>
   18464:	mov	r0, #0
   18468:	pop	{r4, r5, r6, pc}
   1846c:	ldr	r3, [r1, #4]
   18470:	ldr	r2, [r3, #12]
   18474:	str	r2, [r1, #12]
   18478:	ldr	r3, [r3, #28]
   1847c:	str	r3, [r1, #28]
   18480:	mov	r0, #0
   18484:	bx	lr
   18488:	ldr	r3, [r5]
   1848c:	ldr	r2, [r4, #20]
   18490:	add	r0, r3, r0, lsl #3
   18494:	ldr	r3, [r0, #4]
   18498:	ldr	r1, [pc, #28]	; 184bc <__assert_fail@plt+0x6f64>
   1849c:	and	r2, r2, r1
   184a0:	bic	r3, r3, r1, lsl #8
   184a4:	orr	r3, r3, r2, lsl #8
   184a8:	str	r3, [r0, #4]
   184ac:	mov	r0, #0
   184b0:	pop	{r4, r5, r6, pc}
   184b4:	mov	r0, #12
   184b8:	pop	{r4, r5, r6, pc}
   184bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   184c0:	push	{r4, r5, r6, r7, r8, lr}
   184c4:	mov	r4, r0
   184c8:	mov	r5, r1
   184cc:	mov	r7, r2
   184d0:	lsl	r6, r1, #3
   184d4:	ldr	r3, [r0]
   184d8:	add	r3, r3, r6
   184dc:	ldm	r3, {r1, r2}
   184e0:	bl	18238 <__assert_fail@plt+0x6ce0>
   184e4:	cmn	r0, #1
   184e8:	popeq	{r4, r5, r6, r7, r8, pc}
   184ec:	lsl	r1, r0, #3
   184f0:	ldr	r2, [r4]
   184f4:	add	r2, r2, r1
   184f8:	ldr	r3, [r2, #4]
   184fc:	ldr	ip, [pc, #96]	; 18564 <__assert_fail@plt+0x700c>
   18500:	and	r7, r7, ip
   18504:	lsl	ip, ip, #8
   18508:	bic	r3, r3, ip
   1850c:	orr	r3, r3, r7, lsl #8
   18510:	str	r3, [r2, #4]
   18514:	ldr	r3, [r4]
   18518:	add	lr, r3, r1
   1851c:	add	r6, r3, r6
   18520:	ldr	r2, [r6, #4]
   18524:	lsl	r6, r2, #14
   18528:	ldr	r3, [lr, #4]
   1852c:	lsl	r2, r3, #14
   18530:	lsr	r2, r2, #22
   18534:	orr	r2, r2, r6, lsr #22
   18538:	bic	r3, r3, ip
   1853c:	orr	r3, r3, r2, lsl #8
   18540:	str	r3, [lr, #4]
   18544:	ldr	r3, [r4]
   18548:	add	r1, r3, r1
   1854c:	ldrb	r3, [r1, #6]
   18550:	orr	r3, r3, #4
   18554:	strb	r3, [r1, #6]
   18558:	ldr	r3, [r4, #16]
   1855c:	str	r5, [r3, r0, lsl #2]
   18560:	pop	{r4, r5, r6, r7, r8, pc}
   18564:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18568:	push	{r4, lr}
   1856c:	mov	r4, r0
   18570:	ldr	r0, [r0, #24]
   18574:	bl	13b40 <__assert_fail@plt+0x25e8>
   18578:	ldr	r0, [r4, #36]	; 0x24
   1857c:	bl	13b40 <__assert_fail@plt+0x25e8>
   18580:	ldr	r3, [r4, #40]	; 0x28
   18584:	add	r2, r4, #4
   18588:	cmp	r3, r2
   1858c:	beq	185a0 <__assert_fail@plt+0x7048>
   18590:	ldr	r0, [r3, #8]
   18594:	bl	13b40 <__assert_fail@plt+0x25e8>
   18598:	ldr	r0, [r4, #40]	; 0x28
   1859c:	bl	13b40 <__assert_fail@plt+0x25e8>
   185a0:	ldr	r0, [r4, #12]
   185a4:	bl	13b40 <__assert_fail@plt+0x25e8>
   185a8:	ldr	r0, [r4, #48]	; 0x30
   185ac:	bl	13b40 <__assert_fail@plt+0x25e8>
   185b0:	ldr	r0, [r4, #44]	; 0x2c
   185b4:	bl	13b40 <__assert_fail@plt+0x25e8>
   185b8:	mov	r0, r4
   185bc:	bl	13b40 <__assert_fail@plt+0x25e8>
   185c0:	pop	{r4, pc}
   185c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185c8:	sub	sp, sp, #20
   185cc:	mov	ip, #0
   185d0:	str	ip, [r0]
   185d4:	ldr	r5, [r2, #4]
   185d8:	cmp	r5, ip
   185dc:	beq	188a8 <__assert_fail@plt+0x7350>
   185e0:	add	r8, r3, r5
   185e4:	ble	18600 <__assert_fail@plt+0x70a8>
   185e8:	ldr	ip, [r2, #8]
   185ec:	add	r5, ip, r5, lsl #2
   185f0:	ldr	lr, [ip], #4
   185f4:	add	r8, r8, lr
   185f8:	cmp	r5, ip
   185fc:	bne	185f0 <__assert_fail@plt+0x7098>
   18600:	mov	r4, r3
   18604:	mov	r7, r2
   18608:	mov	r9, r1
   1860c:	str	r0, [sp, #12]
   18610:	ldr	r3, [r1, #68]	; 0x44
   18614:	and	r3, r3, r8
   18618:	add	r3, r3, r3, lsl #1
   1861c:	lsl	r3, r3, #2
   18620:	ldr	r2, [r1, #32]
   18624:	add	r1, r2, r3
   18628:	ldr	fp, [r2, r3]
   1862c:	cmp	fp, #0
   18630:	ble	18688 <__assert_fail@plt+0x7130>
   18634:	ldr	sl, [r1, #8]
   18638:	sub	sl, sl, #4
   1863c:	mov	r5, #0
   18640:	b	18650 <__assert_fail@plt+0x70f8>
   18644:	add	r5, r5, #1
   18648:	cmp	r5, fp
   1864c:	beq	18688 <__assert_fail@plt+0x7130>
   18650:	ldr	r6, [sl, #4]!
   18654:	ldr	r3, [r6]
   18658:	cmp	r3, r8
   1865c:	bne	18644 <__assert_fail@plt+0x70ec>
   18660:	ldrb	r3, [r6, #52]	; 0x34
   18664:	and	r3, r3, #15
   18668:	cmp	r4, r3
   1866c:	bne	18644 <__assert_fail@plt+0x70ec>
   18670:	mov	r1, r7
   18674:	ldr	r0, [r6, #40]	; 0x28
   18678:	bl	1595c <__assert_fail@plt+0x4404>
   1867c:	cmp	r0, #0
   18680:	beq	18644 <__assert_fail@plt+0x70ec>
   18684:	b	18890 <__assert_fail@plt+0x7338>
   18688:	mov	r1, #1
   1868c:	mov	r0, #56	; 0x38
   18690:	bl	24478 <__assert_fail@plt+0x12f20>
   18694:	subs	r6, r0, #0
   18698:	beq	18708 <__assert_fail@plt+0x71b0>
   1869c:	add	fp, r6, #4
   186a0:	mov	r1, r7
   186a4:	mov	r0, fp
   186a8:	bl	16e0c <__assert_fail@plt+0x58b4>
   186ac:	cmp	r0, #0
   186b0:	bne	18700 <__assert_fail@plt+0x71a8>
   186b4:	ldrb	r2, [r6, #52]	; 0x34
   186b8:	and	r3, r4, #15
   186bc:	bic	r2, r2, #15
   186c0:	orr	r3, r3, r2
   186c4:	strb	r3, [r6, #52]	; 0x34
   186c8:	str	fp, [r6, #40]	; 0x28
   186cc:	ldr	r3, [r7, #4]
   186d0:	cmp	r3, #0
   186d4:	ble	18878 <__assert_fail@plt+0x7320>
   186d8:	mov	sl, #0
   186dc:	mov	r5, sl
   186e0:	and	r3, r4, #4
   186e4:	str	r3, [sp, #4]
   186e8:	and	r3, r4, #2
   186ec:	str	r3, [sp]
   186f0:	and	r3, r4, #1
   186f4:	str	r8, [sp, #8]
   186f8:	mov	r8, r3
   186fc:	b	187c4 <__assert_fail@plt+0x726c>
   18700:	mov	r0, r6
   18704:	bl	13b40 <__assert_fail@plt+0x25e8>
   18708:	mov	r3, #12
   1870c:	ldr	r2, [sp, #12]
   18710:	str	r3, [r2]
   18714:	mov	r6, #0
   18718:	b	18890 <__assert_fail@plt+0x7338>
   1871c:	mov	r0, #12
   18720:	bl	244c8 <__assert_fail@plt+0x12f70>
   18724:	cmp	r0, #0
   18728:	beq	18754 <__assert_fail@plt+0x71fc>
   1872c:	str	r0, [r6, #40]	; 0x28
   18730:	mov	r1, r7
   18734:	bl	16e0c <__assert_fail@plt+0x58b4>
   18738:	cmp	r0, #0
   1873c:	bne	18760 <__assert_fail@plt+0x7208>
   18740:	ldrb	r3, [r6, #52]	; 0x34
   18744:	orr	r3, r3, #128	; 0x80
   18748:	strb	r3, [r6, #52]	; 0x34
   1874c:	mov	sl, #0
   18750:	b	18858 <__assert_fail@plt+0x7300>
   18754:	mov	r0, r6
   18758:	bl	18568 <__assert_fail@plt+0x7010>
   1875c:	b	18708 <__assert_fail@plt+0x71b0>
   18760:	mov	r0, r6
   18764:	bl	18568 <__assert_fail@plt+0x7010>
   18768:	b	18708 <__assert_fail@plt+0x71b0>
   1876c:	tst	r4, #2
   18770:	beq	1877c <__assert_fail@plt+0x7224>
   18774:	cmp	r8, #0
   18778:	bne	187a4 <__assert_fail@plt+0x724c>
   1877c:	tst	r4, #16
   18780:	beq	18790 <__assert_fail@plt+0x7238>
   18784:	ldr	r3, [sp]
   18788:	cmp	r3, #0
   1878c:	beq	187a4 <__assert_fail@plt+0x724c>
   18790:	tst	r4, #64	; 0x40
   18794:	beq	187b4 <__assert_fail@plt+0x725c>
   18798:	ldr	r3, [sp, #4]
   1879c:	cmp	r3, #0
   187a0:	bne	187b4 <__assert_fail@plt+0x725c>
   187a4:	sub	r1, r5, sl
   187a8:	mov	r0, fp
   187ac:	bl	15a68 <__assert_fail@plt+0x4510>
   187b0:	add	sl, sl, #1
   187b4:	add	r5, r5, #1
   187b8:	ldr	r3, [r7, #4]
   187bc:	cmp	r5, r3
   187c0:	bge	18874 <__assert_fail@plt+0x731c>
   187c4:	ldr	r3, [r7, #8]
   187c8:	ldr	r2, [r3, r5, lsl #2]
   187cc:	ldr	r3, [r9]
   187d0:	add	r3, r3, r2, lsl #3
   187d4:	ldrb	r2, [r3, #4]
   187d8:	ldr	r4, [r3, #4]
   187dc:	lsl	r4, r4, #14
   187e0:	lsrs	r4, r4, #22
   187e4:	moveq	r1, #1
   187e8:	movne	r1, #0
   187ec:	cmp	r2, #1
   187f0:	movne	r1, #0
   187f4:	andeq	r1, r1, #1
   187f8:	cmp	r1, #0
   187fc:	bne	187b4 <__assert_fail@plt+0x725c>
   18800:	ldrb	r1, [r6, #52]	; 0x34
   18804:	ldrb	r3, [r3, #6]
   18808:	lsr	r3, r3, #4
   1880c:	orr	r3, r3, r1, lsr #5
   18810:	and	r3, r3, #1
   18814:	bic	r1, r1, #32
   18818:	orr	r3, r1, r3, lsl #5
   1881c:	strb	r3, [r6, #52]	; 0x34
   18820:	cmp	r2, #2
   18824:	uxtbeq	r3, r3
   18828:	orreq	r3, r3, #16
   1882c:	strbeq	r3, [r6, #52]	; 0x34
   18830:	beq	18844 <__assert_fail@plt+0x72ec>
   18834:	cmp	r2, #4
   18838:	ldrbeq	r3, [r6, #52]	; 0x34
   1883c:	orreq	r3, r3, #64	; 0x40
   18840:	strbeq	r3, [r6, #52]	; 0x34
   18844:	cmp	r4, #0
   18848:	beq	187b4 <__assert_fail@plt+0x725c>
   1884c:	ldr	r3, [r6, #40]	; 0x28
   18850:	cmp	fp, r3
   18854:	beq	1871c <__assert_fail@plt+0x71c4>
   18858:	tst	r4, #1
   1885c:	beq	1876c <__assert_fail@plt+0x7214>
   18860:	cmp	r8, #0
   18864:	beq	187a4 <__assert_fail@plt+0x724c>
   18868:	tst	r4, #2
   1886c:	bne	187a4 <__assert_fail@plt+0x724c>
   18870:	b	1877c <__assert_fail@plt+0x7224>
   18874:	ldr	r8, [sp, #8]
   18878:	mov	r2, r8
   1887c:	mov	r1, r6
   18880:	mov	r0, r9
   18884:	bl	169b0 <__assert_fail@plt+0x5458>
   18888:	cmp	r0, #0
   1888c:	bne	1889c <__assert_fail@plt+0x7344>
   18890:	mov	r0, r6
   18894:	add	sp, sp, #20
   18898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1889c:	mov	r0, r6
   188a0:	bl	18568 <__assert_fail@plt+0x7010>
   188a4:	b	18708 <__assert_fail@plt+0x71b0>
   188a8:	mov	r6, #0
   188ac:	b	18890 <__assert_fail@plt+0x7338>
   188b0:	push	{r4, r5, r6, lr}
   188b4:	ldr	r5, [r0]
   188b8:	ldr	r0, [r5, #56]	; 0x38
   188bc:	cmp	r0, #0
   188c0:	beq	188d8 <__assert_fail@plt+0x7380>
   188c4:	ldr	r4, [r0]
   188c8:	bl	13b40 <__assert_fail@plt+0x25e8>
   188cc:	mov	r0, r4
   188d0:	cmp	r4, #0
   188d4:	bne	188c4 <__assert_fail@plt+0x736c>
   188d8:	mov	r4, #0
   188dc:	str	r4, [r5, #56]	; 0x38
   188e0:	mov	r3, #31
   188e4:	str	r3, [r5, #64]	; 0x40
   188e8:	str	r4, [r5, #52]	; 0x34
   188ec:	ldr	r0, [r5, #16]
   188f0:	bl	13b40 <__assert_fail@plt+0x25e8>
   188f4:	str	r4, [r5, #16]
   188f8:	pop	{r4, r5, r6, pc}
   188fc:	push	{r4, lr}
   18900:	mov	r4, r0
   18904:	ldr	r0, [r0, #8]
   18908:	bl	13b40 <__assert_fail@plt+0x25e8>
   1890c:	ldr	r0, [r4, #12]
   18910:	bl	13b40 <__assert_fail@plt+0x25e8>
   18914:	ldrb	r3, [r4, #75]	; 0x4b
   18918:	cmp	r3, #0
   1891c:	popeq	{r4, pc}
   18920:	ldr	r0, [r4, #4]
   18924:	bl	13b40 <__assert_fail@plt+0x25e8>
   18928:	pop	{r4, pc}
   1892c:	push	{r4, r5, r6, r7, r8, lr}
   18930:	mov	r6, r0
   18934:	ldr	r3, [r0]
   18938:	cmp	r3, #0
   1893c:	beq	1896c <__assert_fail@plt+0x7414>
   18940:	ldr	r3, [r0, #8]
   18944:	cmp	r3, #0
   18948:	beq	1896c <__assert_fail@plt+0x7414>
   1894c:	mov	r4, #0
   18950:	ldr	r0, [r6]
   18954:	add	r0, r0, r4, lsl #3
   18958:	bl	181e8 <__assert_fail@plt+0x6c90>
   1895c:	add	r4, r4, #1
   18960:	ldr	r3, [r6, #8]
   18964:	cmp	r3, r4
   18968:	bhi	18950 <__assert_fail@plt+0x73f8>
   1896c:	ldr	r0, [r6, #12]
   18970:	bl	13b40 <__assert_fail@plt+0x25e8>
   18974:	ldr	r3, [r6, #8]
   18978:	cmp	r3, #0
   1897c:	beq	189ec <__assert_fail@plt+0x7494>
   18980:	mov	r4, #0
   18984:	mov	r5, r4
   18988:	b	189a0 <__assert_fail@plt+0x7448>
   1898c:	add	r5, r5, #1
   18990:	add	r4, r4, #12
   18994:	ldr	r3, [r6, #8]
   18998:	cmp	r3, r5
   1899c:	bls	189ec <__assert_fail@plt+0x7494>
   189a0:	ldr	r3, [r6, #24]
   189a4:	cmp	r3, #0
   189a8:	beq	189b8 <__assert_fail@plt+0x7460>
   189ac:	add	r3, r3, r4
   189b0:	ldr	r0, [r3, #8]
   189b4:	bl	13b40 <__assert_fail@plt+0x25e8>
   189b8:	ldr	r3, [r6, #28]
   189bc:	cmp	r3, #0
   189c0:	beq	189d0 <__assert_fail@plt+0x7478>
   189c4:	add	r3, r3, r4
   189c8:	ldr	r0, [r3, #8]
   189cc:	bl	13b40 <__assert_fail@plt+0x25e8>
   189d0:	ldr	r3, [r6, #20]
   189d4:	cmp	r3, #0
   189d8:	beq	1898c <__assert_fail@plt+0x7434>
   189dc:	add	r3, r3, r4
   189e0:	ldr	r0, [r3, #8]
   189e4:	bl	13b40 <__assert_fail@plt+0x25e8>
   189e8:	b	1898c <__assert_fail@plt+0x7434>
   189ec:	ldr	r0, [r6, #20]
   189f0:	bl	13b40 <__assert_fail@plt+0x25e8>
   189f4:	ldr	r0, [r6, #24]
   189f8:	bl	13b40 <__assert_fail@plt+0x25e8>
   189fc:	ldr	r0, [r6, #28]
   18a00:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a04:	ldr	r0, [r6]
   18a08:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a0c:	ldr	r3, [r6, #32]
   18a10:	cmp	r3, #0
   18a14:	beq	18a70 <__assert_fail@plt+0x7518>
   18a18:	mov	r7, #0
   18a1c:	mov	r8, r7
   18a20:	ldr	r3, [r6, #32]
   18a24:	add	r5, r3, r7
   18a28:	ldr	r3, [r3, r7]
   18a2c:	cmp	r3, #0
   18a30:	ble	18a54 <__assert_fail@plt+0x74fc>
   18a34:	mov	r4, #0
   18a38:	ldr	r3, [r5, #8]
   18a3c:	ldr	r0, [r3, r4, lsl #2]
   18a40:	bl	18568 <__assert_fail@plt+0x7010>
   18a44:	add	r4, r4, #1
   18a48:	ldr	r3, [r5]
   18a4c:	cmp	r3, r4
   18a50:	bgt	18a38 <__assert_fail@plt+0x74e0>
   18a54:	ldr	r0, [r5, #8]
   18a58:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a5c:	add	r8, r8, #1
   18a60:	add	r7, r7, #12
   18a64:	ldr	r3, [r6, #68]	; 0x44
   18a68:	cmp	r3, r8
   18a6c:	bcs	18a20 <__assert_fail@plt+0x74c8>
   18a70:	ldr	r0, [r6, #32]
   18a74:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a78:	ldr	r0, [r6, #60]	; 0x3c
   18a7c:	ldr	r3, [pc, #28]	; 18aa0 <__assert_fail@plt+0x7548>
   18a80:	cmp	r0, r3
   18a84:	beq	18a8c <__assert_fail@plt+0x7534>
   18a88:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a8c:	ldr	r0, [r6, #132]	; 0x84
   18a90:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a94:	mov	r0, r6
   18a98:	bl	13b40 <__assert_fail@plt+0x25e8>
   18a9c:	pop	{r4, r5, r6, r7, r8, pc}
   18aa0:	andeq	r5, r2, ip, asr #30
   18aa4:	push	{r4, r5, r6, r7, r8, lr}
   18aa8:	mov	r8, r0
   18aac:	ldr	r3, [r0, #124]	; 0x7c
   18ab0:	cmp	r3, #0
   18ab4:	ble	18b40 <__assert_fail@plt+0x75e8>
   18ab8:	mov	r7, #0
   18abc:	b	18ad8 <__assert_fail@plt+0x7580>
   18ac0:	mov	r0, r6
   18ac4:	bl	13b40 <__assert_fail@plt+0x25e8>
   18ac8:	add	r7, r7, #1
   18acc:	ldr	r3, [r8, #124]	; 0x7c
   18ad0:	cmp	r3, r7
   18ad4:	ble	18b40 <__assert_fail@plt+0x75e8>
   18ad8:	ldr	r3, [r8, #132]	; 0x84
   18adc:	ldr	r6, [r3, r7, lsl #2]
   18ae0:	ldr	r3, [r6, #16]
   18ae4:	cmp	r3, #0
   18ae8:	ble	18b18 <__assert_fail@plt+0x75c0>
   18aec:	mov	r4, #0
   18af0:	ldr	r3, [r6, #20]
   18af4:	ldr	r5, [r3, r4, lsl #2]
   18af8:	ldr	r0, [r5, #16]
   18afc:	bl	13b40 <__assert_fail@plt+0x25e8>
   18b00:	mov	r0, r5
   18b04:	bl	13b40 <__assert_fail@plt+0x25e8>
   18b08:	add	r4, r4, #1
   18b0c:	ldr	r3, [r6, #16]
   18b10:	cmp	r3, r4
   18b14:	bgt	18af0 <__assert_fail@plt+0x7598>
   18b18:	ldr	r0, [r6, #20]
   18b1c:	bl	13b40 <__assert_fail@plt+0x25e8>
   18b20:	ldr	r3, [r6, #8]
   18b24:	cmp	r3, #0
   18b28:	beq	18ac0 <__assert_fail@plt+0x7568>
   18b2c:	ldr	r0, [r3, #8]
   18b30:	bl	13b40 <__assert_fail@plt+0x25e8>
   18b34:	ldr	r0, [r6, #8]
   18b38:	bl	13b40 <__assert_fail@plt+0x25e8>
   18b3c:	b	18ac0 <__assert_fail@plt+0x7568>
   18b40:	mov	r3, #0
   18b44:	str	r3, [r8, #124]	; 0x7c
   18b48:	str	r3, [r8, #108]	; 0x6c
   18b4c:	pop	{r4, r5, r6, r7, r8, pc}
   18b50:	push	{r4, r5, r6, lr}
   18b54:	mov	r4, r0
   18b58:	ldr	r0, [r0, #8]
   18b5c:	add	r5, r4, #12
   18b60:	cmp	r0, r5
   18b64:	beq	18b6c <__assert_fail@plt+0x7614>
   18b68:	bl	13b40 <__assert_fail@plt+0x25e8>
   18b6c:	mov	r3, #0
   18b70:	str	r3, [r4]
   18b74:	mov	r3, #16
   18b78:	str	r3, [r4, #4]
   18b7c:	str	r5, [r4, #8]
   18b80:	pop	{r4, r5, r6, pc}
   18b84:	push	{r4, r5, r6, lr}
   18b88:	subs	r5, r0, #0
   18b8c:	beq	18be0 <__assert_fail@plt+0x7688>
   18b90:	ldr	r3, [r5]
   18b94:	cmp	r3, #0
   18b98:	ble	18bd8 <__assert_fail@plt+0x7680>
   18b9c:	mov	r4, #0
   18ba0:	mov	r6, r4
   18ba4:	ldr	r3, [r5, #8]
   18ba8:	add	r3, r3, r4
   18bac:	ldr	r0, [r3, #20]
   18bb0:	bl	13b40 <__assert_fail@plt+0x25e8>
   18bb4:	ldr	r3, [r5, #8]
   18bb8:	add	r3, r3, r4
   18bbc:	ldr	r0, [r3, #8]
   18bc0:	bl	13b40 <__assert_fail@plt+0x25e8>
   18bc4:	add	r6, r6, #1
   18bc8:	add	r4, r4, #24
   18bcc:	ldr	r3, [r5]
   18bd0:	cmp	r3, r6
   18bd4:	bgt	18ba4 <__assert_fail@plt+0x764c>
   18bd8:	ldr	r0, [r5, #8]
   18bdc:	bl	13b40 <__assert_fail@plt+0x25e8>
   18be0:	mov	r0, #0
   18be4:	pop	{r4, r5, r6, pc}
   18be8:	push	{r4, r5, r6, lr}
   18bec:	ldr	r2, [r1, #28]
   18bf0:	ldrb	r3, [r1, #24]
   18bf4:	sub	r3, r3, #2
   18bf8:	cmp	r3, #14
   18bfc:	ldrls	pc, [pc, r3, lsl #2]
   18c00:	b	18d3c <__assert_fail@plt+0x77e4>
   18c04:	andeq	r8, r1, r4, asr sp
   18c08:	andeq	r8, r1, ip, lsr sp
   18c0c:	strdeq	r8, [r1], -ip
   18c10:	andeq	r8, r1, ip, lsr sp
   18c14:	andeq	r8, r1, ip, lsr sp
   18c18:	andeq	r8, r1, ip, lsr sp
   18c1c:	andeq	r8, r1, r0, ror #25
   18c20:	andeq	r8, r1, r0, ror #25
   18c24:	andeq	r8, r1, r0, asr #24
   18c28:	andeq	r8, r1, r0, asr #24
   18c2c:	andeq	r8, r1, r0, ror #25
   18c30:	andeq	r8, r1, ip, lsr sp
   18c34:	andeq	r8, r1, ip, lsr sp
   18c38:	andeq	r8, r1, ip, lsr sp
   18c3c:	andeq	r8, r1, r4, asr sp
   18c40:	ldrb	r3, [r0, #88]	; 0x58
   18c44:	orr	r3, r3, #1
   18c48:	strb	r3, [r0, #88]	; 0x58
   18c4c:	ldr	r3, [r1, #4]
   18c50:	cmp	r3, #0
   18c54:	ldrne	r3, [r3, #12]
   18c58:	ldreq	r3, [r1, #16]
   18c5c:	ldr	r4, [r3, #28]
   18c60:	ldr	r3, [r1, #8]
   18c64:	cmp	r3, #0
   18c68:	ldrne	r3, [r3, #12]
   18c6c:	ldreq	r3, [r1, #16]
   18c70:	ldr	r5, [r3, #28]
   18c74:	add	r2, r2, r2, lsl #1
   18c78:	lsl	r2, r2, #2
   18c7c:	ldr	r3, [r0, #20]
   18c80:	add	r6, r3, r2
   18c84:	mov	r1, #2
   18c88:	str	r1, [r3, r2]
   18c8c:	mov	r0, #8
   18c90:	bl	244c8 <__assert_fail@plt+0x12f70>
   18c94:	str	r0, [r6, #8]
   18c98:	cmp	r0, #0
   18c9c:	beq	18d5c <__assert_fail@plt+0x7804>
   18ca0:	cmp	r4, r5
   18ca4:	beq	18ccc <__assert_fail@plt+0x7774>
   18ca8:	mov	r3, #2
   18cac:	str	r3, [r6, #4]
   18cb0:	cmp	r4, r5
   18cb4:	strlt	r4, [r0]
   18cb8:	strlt	r5, [r0, #4]
   18cbc:	strge	r5, [r0]
   18cc0:	strge	r4, [r0, #4]
   18cc4:	mov	r0, #0
   18cc8:	pop	{r4, r5, r6, pc}
   18ccc:	mov	r3, #1
   18cd0:	str	r3, [r6, #4]
   18cd4:	str	r4, [r0]
   18cd8:	mov	r0, #0
   18cdc:	pop	{r4, r5, r6, pc}
   18ce0:	ldr	r1, [r1, #16]
   18ce4:	add	r2, r2, r2, lsl #1
   18ce8:	ldr	r0, [r0, #20]
   18cec:	ldr	r1, [r1, #28]
   18cf0:	add	r0, r0, r2, lsl #2
   18cf4:	bl	1693c <__assert_fail@plt+0x53e4>
   18cf8:	pop	{r4, r5, r6, pc}
   18cfc:	ldr	r3, [r1, #16]
   18d00:	ldr	ip, [r3, #28]
   18d04:	ldr	r3, [r0, #12]
   18d08:	str	ip, [r3, r2, lsl #2]
   18d0c:	ldrb	r3, [r1, #24]
   18d10:	cmp	r3, #4
   18d14:	beq	18d20 <__assert_fail@plt+0x77c8>
   18d18:	mov	r0, #0
   18d1c:	pop	{r4, r5, r6, pc}
   18d20:	ldr	r1, [r0, #12]
   18d24:	add	ip, r2, r2, lsl #1
   18d28:	ldr	r0, [r0, #20]
   18d2c:	ldr	r1, [r1, r2, lsl #2]
   18d30:	add	r0, r0, ip, lsl #2
   18d34:	bl	1693c <__assert_fail@plt+0x53e4>
   18d38:	pop	{r4, r5, r6, pc}
   18d3c:	ldr	r3, [r1, #16]
   18d40:	ldr	r1, [r3, #28]
   18d44:	ldr	r3, [r0, #12]
   18d48:	str	r1, [r3, r2, lsl #2]
   18d4c:	mov	r0, #0
   18d50:	pop	{r4, r5, r6, pc}
   18d54:	mov	r0, #0
   18d58:	pop	{r4, r5, r6, pc}
   18d5c:	mov	r0, #12
   18d60:	pop	{r4, r5, r6, pc}
   18d64:	push	{r4, r5, r6, lr}
   18d68:	mov	r4, r0
   18d6c:	mov	r5, r1
   18d70:	ldr	r1, [r0]
   18d74:	cmp	r1, #0
   18d78:	beq	18da4 <__assert_fail@plt+0x784c>
   18d7c:	ldr	r3, [r0, #4]
   18d80:	cmp	r3, #0
   18d84:	bne	18db8 <__assert_fail@plt+0x7860>
   18d88:	ldr	r3, [r0, #8]
   18d8c:	str	r5, [r3]
   18d90:	ldr	r3, [r0, #4]
   18d94:	add	r3, r3, #1
   18d98:	str	r3, [r0, #4]
   18d9c:	mov	r0, #1
   18da0:	pop	{r4, r5, r6, pc}
   18da4:	mov	r1, r5
   18da8:	bl	1693c <__assert_fail@plt+0x53e4>
   18dac:	clz	r0, r0
   18db0:	lsr	r0, r0, #5
   18db4:	pop	{r4, r5, r6, pc}
   18db8:	cmp	r1, r3
   18dbc:	beq	18e18 <__assert_fail@plt+0x78c0>
   18dc0:	ldr	r1, [r4, #8]
   18dc4:	ldr	r3, [r1]
   18dc8:	cmp	r5, r3
   18dcc:	bge	18e3c <__assert_fail@plt+0x78e4>
   18dd0:	ldr	r3, [r4, #4]
   18dd4:	cmp	r3, #0
   18dd8:	ble	18dfc <__assert_fail@plt+0x78a4>
   18ddc:	lsl	r2, r3, #2
   18de0:	ldr	r1, [r4, #8]
   18de4:	add	r0, r1, r2
   18de8:	ldr	r0, [r0, #-4]
   18dec:	str	r0, [r1, r2]
   18df0:	sub	r2, r2, #4
   18df4:	subs	r3, r3, #1
   18df8:	bne	18de0 <__assert_fail@plt+0x7888>
   18dfc:	ldr	r2, [r4, #8]
   18e00:	str	r5, [r2, r3, lsl #2]
   18e04:	ldr	r3, [r4, #4]
   18e08:	add	r3, r3, #1
   18e0c:	str	r3, [r4, #4]
   18e10:	mov	r0, #1
   18e14:	pop	{r4, r5, r6, pc}
   18e18:	lsl	r3, r1, #1
   18e1c:	str	r3, [r0]
   18e20:	lsl	r1, r1, #3
   18e24:	ldr	r0, [r0, #8]
   18e28:	bl	244f8 <__assert_fail@plt+0x12fa0>
   18e2c:	cmp	r0, #0
   18e30:	beq	18e7c <__assert_fail@plt+0x7924>
   18e34:	str	r0, [r4, #8]
   18e38:	b	18dc0 <__assert_fail@plt+0x7868>
   18e3c:	ldr	r3, [r4, #4]
   18e40:	sub	r0, r3, #-1073741823	; 0xc0000001
   18e44:	lsl	r2, r0, #2
   18e48:	ldr	r0, [r1, r0, lsl #2]
   18e4c:	cmp	r5, r0
   18e50:	bge	18dfc <__assert_fail@plt+0x78a4>
   18e54:	add	r2, r2, #4
   18e58:	str	r0, [r1, r2]
   18e5c:	sub	r3, r3, #1
   18e60:	ldr	r1, [r4, #8]
   18e64:	add	r0, r1, r2
   18e68:	ldr	r0, [r0, #-8]
   18e6c:	sub	r2, r2, #4
   18e70:	cmp	r5, r0
   18e74:	blt	18e58 <__assert_fail@plt+0x7900>
   18e78:	b	18dfc <__assert_fail@plt+0x78a4>
   18e7c:	mov	r0, #0
   18e80:	pop	{r4, r5, r6, pc}
   18e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e88:	sub	sp, sp, #20
   18e8c:	mov	r4, r0
   18e90:	mov	r5, r1
   18e94:	mov	r6, r2
   18e98:	mov	r9, r3
   18e9c:	ldr	r7, [sp, #56]	; 0x38
   18ea0:	mov	r8, #0
   18ea4:	b	19078 <__assert_fail@plt+0x7b20>
   18ea8:	lsl	fp, r5, #2
   18eac:	ldr	r3, [r4, #12]
   18eb0:	ldr	r5, [r3, r5, lsl #2]
   18eb4:	str	r6, [sp, #12]
   18eb8:	add	r6, r6, r6, lsl #1
   18ebc:	lsl	sl, r6, #2
   18ec0:	ldr	r3, [r4, #20]
   18ec4:	add	r3, r3, sl
   18ec8:	str	r8, [r3, #4]
   18ecc:	mov	r2, r7
   18ed0:	mov	r1, r5
   18ed4:	mov	r0, r4
   18ed8:	bl	184c0 <__assert_fail@plt+0x6f68>
   18edc:	mov	r6, r0
   18ee0:	cmn	r0, #1
   18ee4:	beq	19168 <__assert_fail@plt+0x7c10>
   18ee8:	ldr	r3, [r4, #12]
   18eec:	ldr	r2, [r3, fp]
   18ef0:	ldr	r1, [sp, #12]
   18ef4:	str	r2, [r3, r1, lsl #2]
   18ef8:	ldr	r0, [r4, #20]
   18efc:	mov	r1, r6
   18f00:	add	r0, r0, sl
   18f04:	bl	18d64 <__assert_fail@plt+0x780c>
   18f08:	cmp	r0, #0
   18f0c:	bne	19078 <__assert_fail@plt+0x7b20>
   18f10:	mov	r0, #12
   18f14:	b	19194 <__assert_fail@plt+0x7c3c>
   18f18:	ldr	r3, [r4, #12]
   18f1c:	ldr	r2, [r3, r5, lsl #2]
   18f20:	str	r2, [r3, r6, lsl #2]
   18f24:	mov	r0, #0
   18f28:	b	19194 <__assert_fail@plt+0x7c3c>
   18f2c:	ldr	r2, [r2, #8]
   18f30:	ldr	fp, [r2]
   18f34:	add	sl, r6, r6, lsl #1
   18f38:	lsl	sl, sl, #2
   18f3c:	add	r3, r3, sl
   18f40:	str	r8, [r3, #4]
   18f44:	cmp	r5, r9
   18f48:	movne	r3, #0
   18f4c:	moveq	r3, #1
   18f50:	cmp	r5, r6
   18f54:	moveq	r3, #0
   18f58:	cmp	r3, #0
   18f5c:	bne	18fb0 <__assert_fail@plt+0x7a58>
   18f60:	ldr	r3, [r4]
   18f64:	add	ip, r3, ip
   18f68:	ldr	r3, [ip, #4]
   18f6c:	lsl	r3, r3, #14
   18f70:	orr	r7, r7, r3, lsr #22
   18f74:	mov	r2, r7
   18f78:	mov	r1, fp
   18f7c:	mov	r0, r4
   18f80:	bl	184c0 <__assert_fail@plt+0x6f68>
   18f84:	mov	r6, r0
   18f88:	cmn	r0, #1
   18f8c:	beq	19170 <__assert_fail@plt+0x7c18>
   18f90:	ldr	r0, [r4, #20]
   18f94:	mov	r1, r6
   18f98:	add	r0, r0, sl
   18f9c:	bl	18d64 <__assert_fail@plt+0x780c>
   18fa0:	cmp	r0, #0
   18fa4:	beq	18fd0 <__assert_fail@plt+0x7a78>
   18fa8:	mov	r5, fp
   18fac:	b	19078 <__assert_fail@plt+0x7b20>
   18fb0:	ldr	r0, [r4, #20]
   18fb4:	mov	r1, fp
   18fb8:	add	r0, r0, sl
   18fbc:	bl	18d64 <__assert_fail@plt+0x780c>
   18fc0:	cmp	r0, #0
   18fc4:	moveq	r0, #12
   18fc8:	movne	r0, #0
   18fcc:	b	19194 <__assert_fail@plt+0x7c3c>
   18fd0:	mov	r0, #12
   18fd4:	b	19194 <__assert_fail@plt+0x7c3c>
   18fd8:	sub	r1, r1, #1
   18fdc:	add	r3, r3, ip
   18fe0:	add	r3, lr, r3
   18fe4:	ldrb	r6, [r3, #6]
   18fe8:	cmp	r1, #0
   18fec:	movle	r0, #0
   18ff0:	movgt	r0, #1
   18ff4:	ands	r0, r0, r6, lsr #2
   18ff8:	beq	19108 <__assert_fail@plt+0x7bb0>
   18ffc:	ldr	r0, [r2, #-4]!
   19000:	cmp	r5, r0
   19004:	bne	18fd8 <__assert_fail@plt+0x7a80>
   19008:	ldr	r0, [r3, #4]
   1900c:	lsl	r0, r0, #14
   19010:	cmp	r7, r0, lsr #22
   19014:	bne	18fd8 <__assert_fail@plt+0x7a80>
   19018:	cmn	r1, #1
   1901c:	beq	19108 <__assert_fail@plt+0x7bb0>
   19020:	ldr	r0, [r4, #20]
   19024:	add	r0, r0, fp
   19028:	bl	18d64 <__assert_fail@plt+0x780c>
   1902c:	cmp	r0, #0
   19030:	beq	19188 <__assert_fail@plt+0x7c30>
   19034:	ldr	r3, [r4, #20]
   19038:	add	sl, r3, sl
   1903c:	ldr	r3, [sl, #8]
   19040:	ldr	r5, [r3, #4]
   19044:	mov	r2, r7
   19048:	mov	r1, r5
   1904c:	mov	r0, r4
   19050:	bl	184c0 <__assert_fail@plt+0x6f68>
   19054:	mov	r6, r0
   19058:	cmn	r0, #1
   1905c:	beq	19190 <__assert_fail@plt+0x7c38>
   19060:	ldr	r0, [r4, #20]
   19064:	mov	r1, r6
   19068:	add	r0, r0, fp
   1906c:	bl	18d64 <__assert_fail@plt+0x780c>
   19070:	cmp	r0, #0
   19074:	beq	19160 <__assert_fail@plt+0x7c08>
   19078:	lsl	ip, r5, #3
   1907c:	ldr	r3, [r4]
   19080:	add	r3, r3, ip
   19084:	ldrb	r3, [r3, #4]
   19088:	cmp	r3, #4
   1908c:	beq	18ea8 <__assert_fail@plt+0x7950>
   19090:	ldr	r3, [r4, #20]
   19094:	add	sl, r5, r5, lsl #1
   19098:	lsl	sl, sl, #2
   1909c:	add	r2, r3, sl
   190a0:	ldr	r1, [r2, #4]
   190a4:	cmp	r1, #0
   190a8:	beq	18f18 <__assert_fail@plt+0x79c0>
   190ac:	cmp	r1, #1
   190b0:	beq	18f2c <__assert_fail@plt+0x79d4>
   190b4:	ldr	r2, [r2, #8]
   190b8:	ldr	r5, [r2]
   190bc:	add	r6, r6, r6, lsl #1
   190c0:	lsl	fp, r6, #2
   190c4:	add	r3, r3, fp
   190c8:	str	r8, [r3, #4]
   190cc:	ldr	ip, [r4, #8]
   190d0:	sub	r1, ip, #1
   190d4:	ldr	lr, [r4]
   190d8:	add	r3, lr, r1, lsl #3
   190dc:	ldrb	r0, [r3, #6]
   190e0:	cmp	r1, #0
   190e4:	movle	r2, #0
   190e8:	movgt	r2, #1
   190ec:	ands	r2, r2, r0, lsr #2
   190f0:	beq	19108 <__assert_fail@plt+0x7bb0>
   190f4:	ldr	r2, [r4, #16]
   190f8:	add	r2, r2, ip, lsl #2
   190fc:	rsb	ip, r3, ip, lsl #3
   19100:	sub	ip, ip, #16
   19104:	b	18ffc <__assert_fail@plt+0x7aa4>
   19108:	mov	r2, r7
   1910c:	mov	r1, r5
   19110:	mov	r0, r4
   19114:	bl	184c0 <__assert_fail@plt+0x6f68>
   19118:	mov	r6, r0
   1911c:	cmn	r0, #1
   19120:	beq	19178 <__assert_fail@plt+0x7c20>
   19124:	ldr	r0, [r4, #20]
   19128:	mov	r1, r6
   1912c:	add	r0, r0, fp
   19130:	bl	18d64 <__assert_fail@plt+0x780c>
   19134:	cmp	r0, #0
   19138:	beq	19180 <__assert_fail@plt+0x7c28>
   1913c:	str	r7, [sp]
   19140:	mov	r3, r9
   19144:	mov	r2, r6
   19148:	mov	r1, r5
   1914c:	mov	r0, r4
   19150:	bl	18e84 <__assert_fail@plt+0x792c>
   19154:	cmp	r0, #0
   19158:	beq	19034 <__assert_fail@plt+0x7adc>
   1915c:	b	19194 <__assert_fail@plt+0x7c3c>
   19160:	mov	r0, #12
   19164:	b	19194 <__assert_fail@plt+0x7c3c>
   19168:	mov	r0, #12
   1916c:	b	19194 <__assert_fail@plt+0x7c3c>
   19170:	mov	r0, #12
   19174:	b	19194 <__assert_fail@plt+0x7c3c>
   19178:	mov	r0, #12
   1917c:	b	19194 <__assert_fail@plt+0x7c3c>
   19180:	mov	r0, #12
   19184:	b	19194 <__assert_fail@plt+0x7c3c>
   19188:	mov	r0, #12
   1918c:	b	19194 <__assert_fail@plt+0x7c3c>
   19190:	mov	r0, #12
   19194:	add	sp, sp, #20
   19198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1919c:	push	{r4, r5, r6, r7, r8, r9, lr}
   191a0:	sub	sp, sp, #12
   191a4:	mov	r6, r0
   191a8:	mov	r7, r1
   191ac:	mov	r4, r2
   191b0:	mov	r9, r3
   191b4:	ldr	r8, [sp, #40]	; 0x28
   191b8:	b	19204 <__assert_fail@plt+0x7cac>
   191bc:	mov	r1, r4
   191c0:	mov	r0, r7
   191c4:	bl	18d64 <__assert_fail@plt+0x780c>
   191c8:	cmp	r0, #0
   191cc:	beq	19294 <__assert_fail@plt+0x7d3c>
   191d0:	add	r5, r5, r5, lsl #1
   191d4:	lsl	r5, r5, #2
   191d8:	ldr	r3, [r6, #20]
   191dc:	add	r3, r3, r5
   191e0:	ldr	r2, [r3, #4]
   191e4:	cmp	r2, #0
   191e8:	beq	192a0 <__assert_fail@plt+0x7d48>
   191ec:	cmp	r2, #2
   191f0:	beq	19264 <__assert_fail@plt+0x7d0c>
   191f4:	ldr	r3, [r6, #20]
   191f8:	add	r5, r3, r5
   191fc:	ldr	r3, [r5, #8]
   19200:	ldr	r4, [r3]
   19204:	mov	r1, r4
   19208:	mov	r0, r7
   1920c:	bl	159d0 <__assert_fail@plt+0x4478>
   19210:	cmp	r0, #0
   19214:	bne	1928c <__assert_fail@plt+0x7d34>
   19218:	mov	r5, r4
   1921c:	ldr	r3, [r6]
   19220:	add	r2, r3, r4, lsl #3
   19224:	ldrb	r2, [r2, #4]
   19228:	cmp	r2, r8
   1922c:	bne	191bc <__assert_fail@plt+0x7c64>
   19230:	ldr	r3, [r3, r4, lsl #3]
   19234:	cmp	r9, r3
   19238:	bne	191bc <__assert_fail@plt+0x7c64>
   1923c:	cmp	r2, #9
   19240:	movne	r0, #0
   19244:	bne	19298 <__assert_fail@plt+0x7d40>
   19248:	mov	r1, r4
   1924c:	mov	r0, r7
   19250:	bl	18d64 <__assert_fail@plt+0x780c>
   19254:	cmp	r0, #0
   19258:	moveq	r0, #12
   1925c:	movne	r0, #0
   19260:	b	19298 <__assert_fail@plt+0x7d40>
   19264:	ldr	r3, [r3, #8]
   19268:	ldr	r2, [r3, #4]
   1926c:	str	r8, [sp]
   19270:	mov	r3, r9
   19274:	mov	r1, r7
   19278:	mov	r0, r6
   1927c:	bl	1919c <__assert_fail@plt+0x7c44>
   19280:	cmp	r0, #0
   19284:	beq	191f4 <__assert_fail@plt+0x7c9c>
   19288:	b	19298 <__assert_fail@plt+0x7d40>
   1928c:	mov	r0, #0
   19290:	b	19298 <__assert_fail@plt+0x7d40>
   19294:	mov	r0, #12
   19298:	add	sp, sp, #12
   1929c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   192a0:	mov	r0, #0
   192a4:	b	19298 <__assert_fail@plt+0x7d40>
   192a8:	push	{r4, r5, r6, lr}
   192ac:	subs	r6, r1, #0
   192b0:	beq	19430 <__assert_fail@plt+0x7ed8>
   192b4:	ldr	r2, [r6, #4]
   192b8:	cmp	r2, #0
   192bc:	beq	19438 <__assert_fail@plt+0x7ee0>
   192c0:	mov	r4, r0
   192c4:	ldr	r1, [r0]
   192c8:	ldr	r3, [r0, #4]
   192cc:	add	r0, r3, r2, lsl #1
   192d0:	cmp	r1, r0
   192d4:	blt	19334 <__assert_fail@plt+0x7ddc>
   192d8:	cmp	r3, #0
   192dc:	beq	19368 <__assert_fail@plt+0x7e10>
   192e0:	ldr	r2, [r6, #4]
   192e4:	add	r5, r3, r2, lsl #1
   192e8:	sub	r2, r2, #1
   192ec:	sub	r3, r3, #1
   192f0:	cmp	r2, #0
   192f4:	cmpge	r3, #0
   192f8:	blt	1938c <__assert_fail@plt+0x7e34>
   192fc:	ldr	ip, [r4, #8]
   19300:	ldr	r0, [ip, r3, lsl #2]
   19304:	ldr	r1, [r6, #8]
   19308:	ldr	r1, [r1, r2, lsl #2]
   1930c:	cmp	r0, r1
   19310:	subeq	r2, r2, #1
   19314:	subeq	r3, r3, #1
   19318:	beq	192f0 <__assert_fail@plt+0x7d98>
   1931c:	cmp	r0, r1
   19320:	sublt	r5, r5, #1
   19324:	sublt	r2, r2, #1
   19328:	strlt	r1, [ip, r5, lsl #2]
   1932c:	subge	r3, r3, #1
   19330:	b	192f0 <__assert_fail@plt+0x7d98>
   19334:	add	r1, r2, r1
   19338:	lsl	r5, r1, #1
   1933c:	lsl	r1, r1, #3
   19340:	ldr	r0, [r4, #8]
   19344:	bl	244f8 <__assert_fail@plt+0x12fa0>
   19348:	cmp	r0, #0
   1934c:	beq	19440 <__assert_fail@plt+0x7ee8>
   19350:	str	r0, [r4, #8]
   19354:	str	r5, [r4]
   19358:	ldr	r3, [r4, #4]
   1935c:	cmp	r3, #0
   19360:	bne	192e0 <__assert_fail@plt+0x7d88>
   19364:	b	1936c <__assert_fail@plt+0x7e14>
   19368:	ldr	r0, [r4, #8]
   1936c:	ldr	r3, [r6, #4]
   19370:	str	r3, [r4, #4]
   19374:	ldr	r2, [r6, #4]
   19378:	lsl	r2, r2, #2
   1937c:	ldr	r1, [r6, #8]
   19380:	bl	11264 <memcpy@plt>
   19384:	mov	r0, #0
   19388:	pop	{r4, r5, r6, pc}
   1938c:	cmp	r2, #0
   19390:	blt	193b0 <__assert_fail@plt+0x7e58>
   19394:	add	r2, r2, #1
   19398:	sub	r5, r5, r2
   1939c:	ldr	r0, [r4, #8]
   193a0:	lsl	r2, r2, #2
   193a4:	ldr	r1, [r6, #8]
   193a8:	add	r0, r0, r5, lsl #2
   193ac:	bl	11264 <memcpy@plt>
   193b0:	ldr	r3, [r4, #4]
   193b4:	ldr	r2, [r6, #4]
   193b8:	add	r2, r3, r2, lsl #1
   193bc:	sub	lr, r2, #1
   193c0:	subs	r2, r2, r5
   193c4:	beq	19448 <__assert_fail@plt+0x7ef0>
   193c8:	sub	r1, r3, #1
   193cc:	add	r3, r3, r2
   193d0:	str	r3, [r4, #4]
   193d4:	b	193e8 <__assert_fail@plt+0x7e90>
   193d8:	add	ip, r1, r2
   193dc:	str	r0, [r3, ip, lsl #2]
   193e0:	subs	r1, r1, #1
   193e4:	bmi	19418 <__assert_fail@plt+0x7ec0>
   193e8:	ldr	r3, [r4, #8]
   193ec:	ldr	ip, [r3, lr, lsl #2]
   193f0:	ldr	r0, [r3, r1, lsl #2]
   193f4:	cmp	ip, r0
   193f8:	ble	193d8 <__assert_fail@plt+0x7e80>
   193fc:	sub	lr, lr, #1
   19400:	add	r0, r1, r2
   19404:	str	ip, [r3, r0, lsl #2]
   19408:	subs	r2, r2, #1
   1940c:	bne	193e8 <__assert_fail@plt+0x7e90>
   19410:	mov	r0, #0
   19414:	pop	{r4, r5, r6, pc}
   19418:	ldr	r0, [r4, #8]
   1941c:	lsl	r2, r2, #2
   19420:	add	r1, r0, r5, lsl #2
   19424:	bl	11264 <memcpy@plt>
   19428:	mov	r0, #0
   1942c:	pop	{r4, r5, r6, pc}
   19430:	mov	r0, #0
   19434:	pop	{r4, r5, r6, pc}
   19438:	mov	r0, #0
   1943c:	pop	{r4, r5, r6, pc}
   19440:	mov	r0, #12
   19444:	pop	{r4, r5, r6, pc}
   19448:	mov	r0, #0
   1944c:	pop	{r4, r5, r6, pc}
   19450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19454:	sub	sp, sp, #44	; 0x2c
   19458:	mov	sl, r0
   1945c:	mov	r5, r1
   19460:	mov	r4, r2
   19464:	str	r3, [sp, #12]
   19468:	add	r8, r2, r2, lsl #1
   1946c:	lsl	r8, r8, #2
   19470:	ldr	r3, [r1, #20]
   19474:	add	r3, r3, r8
   19478:	ldr	r1, [r3, #4]
   1947c:	add	r1, r1, #1
   19480:	add	r0, sp, #28
   19484:	bl	16980 <__assert_fail@plt+0x5428>
   19488:	subs	fp, r0, #0
   1948c:	bne	19654 <__assert_fail@plt+0x80fc>
   19490:	mov	r9, r8
   19494:	ldr	r3, [sp, #32]
   19498:	add	r2, r3, #1
   1949c:	str	r2, [sp, #32]
   194a0:	ldr	r2, [sp, #36]	; 0x24
   194a4:	str	r4, [r2, r3, lsl #2]
   194a8:	ldr	r3, [r5, #24]
   194ac:	add	r3, r3, r8
   194b0:	mvn	r2, #0
   194b4:	str	r2, [r3, #4]
   194b8:	ldr	r2, [r5]
   194bc:	lsl	r6, r4, #3
   194c0:	add	r1, r2, r6
   194c4:	ldr	r0, [r1, #4]
   194c8:	ldr	r3, [pc, #424]	; 19678 <__assert_fail@plt+0x8120>
   194cc:	and	r3, r3, r0
   194d0:	cmp	r3, #0
   194d4:	beq	19504 <__assert_fail@plt+0x7fac>
   194d8:	ldr	r3, [r5, #20]
   194dc:	add	r3, r3, r8
   194e0:	ldr	r0, [r3, #4]
   194e4:	cmp	r0, #0
   194e8:	beq	19660 <__assert_fail@plt+0x8108>
   194ec:	ldr	r3, [r3, #8]
   194f0:	ldr	r3, [r3]
   194f4:	add	r2, r2, r3, lsl #3
   194f8:	ldrb	r3, [r2, #6]
   194fc:	tst	r3, #4
   19500:	beq	19540 <__assert_fail@plt+0x7fe8>
   19504:	ldr	r3, [r5]
   19508:	add	r6, r3, r6
   1950c:	ldrb	r3, [r6, #4]
   19510:	tst	r3, #8
   19514:	beq	19660 <__assert_fail@plt+0x8108>
   19518:	ldr	r3, [r5, #20]
   1951c:	add	r3, r3, r8
   19520:	ldr	r2, [r3, #4]
   19524:	cmp	r2, #0
   19528:	ble	19660 <__assert_fail@plt+0x8108>
   1952c:	mov	r2, #0
   19530:	str	r2, [sp, #8]
   19534:	mov	r6, r2
   19538:	add	r7, sp, #16
   1953c:	b	195ac <__assert_fail@plt+0x8054>
   19540:	ldr	r3, [r1, #4]
   19544:	lsl	r3, r3, #14
   19548:	lsr	r3, r3, #22
   1954c:	str	r3, [sp]
   19550:	mov	r3, r4
   19554:	mov	r2, r4
   19558:	mov	r1, r4
   1955c:	mov	r0, r5
   19560:	bl	18e84 <__assert_fail@plt+0x792c>
   19564:	cmp	r0, #0
   19568:	beq	19504 <__assert_fail@plt+0x7fac>
   1956c:	mov	fp, r0
   19570:	b	19654 <__assert_fail@plt+0x80fc>
   19574:	mov	r3, #0
   19578:	mov	r1, r5
   1957c:	mov	r0, r7
   19580:	bl	19450 <__assert_fail@plt+0x7ef8>
   19584:	cmp	r0, #0
   19588:	beq	195e8 <__assert_fail@plt+0x8090>
   1958c:	mov	fp, r0
   19590:	b	19654 <__assert_fail@plt+0x80fc>
   19594:	add	r6, r6, #1
   19598:	ldr	r3, [r5, #20]
   1959c:	add	r3, r3, r9
   195a0:	ldr	r2, [r3, #4]
   195a4:	cmp	r2, r6
   195a8:	ble	19624 <__assert_fail@plt+0x80cc>
   195ac:	ldr	r3, [r3, #8]
   195b0:	ldr	r2, [r3, r6, lsl #2]
   195b4:	add	r4, r2, r2, lsl #1
   195b8:	lsl	r4, r4, #2
   195bc:	ldr	r3, [r5, #24]
   195c0:	add	r3, r3, r4
   195c4:	ldr	r1, [r3, #4]
   195c8:	cmn	r1, #1
   195cc:	moveq	r3, #1
   195d0:	streq	r3, [sp, #8]
   195d4:	beq	19594 <__assert_fail@plt+0x803c>
   195d8:	cmp	r1, #0
   195dc:	beq	19574 <__assert_fail@plt+0x801c>
   195e0:	ldm	r3, {r0, r1, r2}
   195e4:	stm	r7, {r0, r1, r2}
   195e8:	mov	r1, r7
   195ec:	add	r0, sp, #28
   195f0:	bl	192a8 <__assert_fail@plt+0x7d50>
   195f4:	cmp	r0, #0
   195f8:	bne	1958c <__assert_fail@plt+0x8034>
   195fc:	ldr	r3, [r5, #24]
   19600:	add	r4, r3, r4
   19604:	ldr	r3, [r4, #4]
   19608:	cmp	r3, #0
   1960c:	bne	19594 <__assert_fail@plt+0x803c>
   19610:	ldr	r0, [sp, #24]
   19614:	bl	13b40 <__assert_fail@plt+0x25e8>
   19618:	mov	r3, #1
   1961c:	str	r3, [sp, #8]
   19620:	b	19594 <__assert_fail@plt+0x803c>
   19624:	ldr	r3, [sp, #12]
   19628:	eor	r3, r3, #1
   1962c:	ldr	r2, [sp, #8]
   19630:	tst	r2, r3
   19634:	beq	19660 <__assert_fail@plt+0x8108>
   19638:	ldr	r3, [r5, #24]
   1963c:	add	r8, r3, r8
   19640:	mov	r3, #0
   19644:	str	r3, [r8, #4]
   19648:	add	r3, sp, #40	; 0x28
   1964c:	ldmdb	r3, {r0, r1, r2}
   19650:	stm	sl, {r0, r1, r2}
   19654:	mov	r0, fp
   19658:	add	sp, sp, #44	; 0x2c
   1965c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19660:	ldr	r3, [r5, #24]
   19664:	add	r8, r3, r8
   19668:	add	r3, sp, #40	; 0x28
   1966c:	ldmdb	r3, {r0, r1, r2}
   19670:	stm	r8, {r0, r1, r2}
   19674:	b	19648 <__assert_fail@plt+0x80f0>
   19678:	andeq	pc, r3, r0, lsl #30
   1967c:	push	{r4, r5, r6, lr}
   19680:	mov	r5, r0
   19684:	cmp	r1, #0
   19688:	blt	196cc <__assert_fail@plt+0x8174>
   1968c:	ldr	r3, [r0, #48]	; 0x30
   19690:	cmp	r1, r3
   19694:	beq	196d4 <__assert_fail@plt+0x817c>
   19698:	ldr	r3, [r0, #80]	; 0x50
   1969c:	cmp	r3, #1
   196a0:	ble	19740 <__assert_fail@plt+0x81e8>
   196a4:	ldr	r3, [r0, #8]
   196a8:	add	r3, r3, r1, lsl #2
   196ac:	ldr	r4, [r3], #-4
   196b0:	cmn	r4, #1
   196b4:	bne	196e8 <__assert_fail@plt+0x8190>
   196b8:	sub	r1, r1, #1
   196bc:	cmn	r1, #1
   196c0:	bne	196ac <__assert_fail@plt+0x8154>
   196c4:	ldr	r0, [r5, #60]	; 0x3c
   196c8:	pop	{r4, r5, r6, pc}
   196cc:	ldr	r0, [r0, #60]	; 0x3c
   196d0:	pop	{r4, r5, r6, pc}
   196d4:	and	r2, r2, #2
   196d8:	cmp	r2, #0
   196dc:	movne	r0, #8
   196e0:	moveq	r0, #10
   196e4:	pop	{r4, r5, r6, pc}
   196e8:	ldrb	r3, [r5, #78]	; 0x4e
   196ec:	cmp	r3, #0
   196f0:	bne	19704 <__assert_fail@plt+0x81ac>
   196f4:	cmp	r4, #10
   196f8:	beq	1972c <__assert_fail@plt+0x81d4>
   196fc:	mov	r0, #0
   19700:	pop	{r4, r5, r6, pc}
   19704:	mov	r0, r4
   19708:	bl	11438 <iswalnum@plt>
   1970c:	adds	r3, r0, #0
   19710:	movne	r3, #1
   19714:	cmp	r4, #95	; 0x5f
   19718:	orreq	r3, r3, #1
   1971c:	cmp	r3, #0
   19720:	beq	196f4 <__assert_fail@plt+0x819c>
   19724:	mov	r0, #1
   19728:	pop	{r4, r5, r6, pc}
   1972c:	ldrb	r0, [r5, #77]	; 0x4d
   19730:	cmp	r0, #0
   19734:	movne	r0, #2
   19738:	moveq	r0, #0
   1973c:	pop	{r4, r5, r6, pc}
   19740:	ldr	r3, [r0, #4]
   19744:	ldrb	r2, [r3, r1]
   19748:	asr	r0, r2, #5
   1974c:	ldr	r3, [r5, #68]	; 0x44
   19750:	and	r1, r2, #31
   19754:	ldr	r3, [r3, r0, lsl #2]
   19758:	lsr	r3, r3, r1
   1975c:	tst	r3, #1
   19760:	bne	19788 <__assert_fail@plt+0x8230>
   19764:	cmp	r2, #10
   19768:	beq	19774 <__assert_fail@plt+0x821c>
   1976c:	mov	r0, #0
   19770:	pop	{r4, r5, r6, pc}
   19774:	ldrb	r0, [r5, #77]	; 0x4d
   19778:	cmp	r0, #0
   1977c:	movne	r0, #2
   19780:	moveq	r0, #0
   19784:	pop	{r4, r5, r6, pc}
   19788:	mov	r0, #1
   1978c:	pop	{r4, r5, r6, pc}
   19790:	push	{r4, lr}
   19794:	ldr	r3, [r0, #4]
   19798:	ldrb	ip, [r3, r2]
   1979c:	ldrb	r3, [r1, #4]
   197a0:	sub	r3, r3, #1
   197a4:	cmp	r3, #6
   197a8:	ldrls	pc, [pc, r3, lsl #2]
   197ac:	b	198cc <__assert_fail@plt+0x8374>
   197b0:	andeq	r9, r1, ip, asr #15
   197b4:	andeq	r9, r1, ip, asr #17
   197b8:	andeq	r9, r1, r0, ror #15
   197bc:	andeq	r9, r1, ip, asr #17
   197c0:	andeq	r9, r1, r8, asr r8
   197c4:	andeq	r9, r1, ip, asr #17
   197c8:	andeq	r9, r1, r0, asr r8
   197cc:	ldrb	r3, [r1]
   197d0:	cmp	r3, ip
   197d4:	beq	197fc <__assert_fail@plt+0x82a4>
   197d8:	mov	r0, #0
   197dc:	pop	{r4, pc}
   197e0:	lsr	lr, ip, #5
   197e4:	ldr	r3, [r1]
   197e8:	and	ip, ip, #31
   197ec:	ldr	r3, [r3, lr, lsl #2]
   197f0:	lsr	ip, r3, ip
   197f4:	tst	ip, #1
   197f8:	beq	198d4 <__assert_fail@plt+0x837c>
   197fc:	ldr	ip, [r1, #4]
   19800:	ldr	r3, [pc, #260]	; 1990c <__assert_fail@plt+0x83b4>
   19804:	and	r3, r3, ip
   19808:	cmp	r3, #0
   1980c:	beq	198e4 <__assert_fail@plt+0x838c>
   19810:	mov	r3, r2
   19814:	mov	r4, r1
   19818:	ldr	r2, [r0, #88]	; 0x58
   1981c:	mov	r1, r3
   19820:	bl	1967c <__assert_fail@plt+0x8124>
   19824:	ldr	r3, [r4, #4]
   19828:	lsl	r3, r3, #14
   1982c:	lsr	r3, r3, #22
   19830:	tst	r3, #4
   19834:	beq	19898 <__assert_fail@plt+0x8340>
   19838:	tst	r0, #1
   1983c:	beq	198ec <__assert_fail@plt+0x8394>
   19840:	tst	r3, #8
   19844:	beq	198a8 <__assert_fail@plt+0x8350>
   19848:	mov	r0, #0
   1984c:	pop	{r4, pc}
   19850:	tst	ip, #128	; 0x80
   19854:	bne	198dc <__assert_fail@plt+0x8384>
   19858:	cmp	ip, #10
   1985c:	beq	19880 <__assert_fail@plt+0x8328>
   19860:	cmp	ip, #0
   19864:	bne	197fc <__assert_fail@plt+0x82a4>
   19868:	ldr	r3, [r0, #84]	; 0x54
   1986c:	ldr	r3, [r3, #128]	; 0x80
   19870:	tst	r3, #128	; 0x80
   19874:	beq	197fc <__assert_fail@plt+0x82a4>
   19878:	mov	r0, #0
   1987c:	pop	{r4, pc}
   19880:	ldr	r3, [r0, #84]	; 0x54
   19884:	ldr	r3, [r3, #128]	; 0x80
   19888:	tst	r3, #64	; 0x40
   1988c:	bne	197fc <__assert_fail@plt+0x82a4>
   19890:	mov	r0, #0
   19894:	pop	{r4, pc}
   19898:	tst	r3, #8
   1989c:	beq	198a8 <__assert_fail@plt+0x8350>
   198a0:	tst	r0, #1
   198a4:	bne	198f4 <__assert_fail@plt+0x839c>
   198a8:	tst	r3, #32
   198ac:	beq	198b8 <__assert_fail@plt+0x8360>
   198b0:	tst	r0, #2
   198b4:	beq	198fc <__assert_fail@plt+0x83a4>
   198b8:	tst	r3, #128	; 0x80
   198bc:	beq	19904 <__assert_fail@plt+0x83ac>
   198c0:	lsr	r0, r0, #3
   198c4:	and	r0, r0, #1
   198c8:	pop	{r4, pc}
   198cc:	mov	r0, #0
   198d0:	pop	{r4, pc}
   198d4:	mov	r0, #0
   198d8:	pop	{r4, pc}
   198dc:	mov	r0, #0
   198e0:	pop	{r4, pc}
   198e4:	mov	r0, #1
   198e8:	pop	{r4, pc}
   198ec:	mov	r0, #0
   198f0:	pop	{r4, pc}
   198f4:	mov	r0, #0
   198f8:	pop	{r4, pc}
   198fc:	mov	r0, #0
   19900:	pop	{r4, pc}
   19904:	mov	r0, #1
   19908:	pop	{r4, pc}
   1990c:	andeq	pc, r3, r0, lsl #30
   19910:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19914:	ldr	r7, [r0, #84]	; 0x54
   19918:	ldr	r3, [r1, #4]
   1991c:	cmp	r3, #0
   19920:	ble	19a08 <__assert_fail@plt+0x84b0>
   19924:	mov	r9, r2
   19928:	mov	r6, r1
   1992c:	mov	r8, r0
   19930:	mov	r4, #0
   19934:	b	19968 <__assert_fail@plt+0x8410>
   19938:	lsl	sl, r1, #1
   1993c:	lsl	r1, r1, #3
   19940:	bl	244f8 <__assert_fail@plt+0x12fa0>
   19944:	cmp	r0, #0
   19948:	beq	19a10 <__assert_fail@plt+0x84b8>
   1994c:	str	r0, [r8, #132]	; 0x84
   19950:	str	sl, [r8, #128]	; 0x80
   19954:	b	199b4 <__assert_fail@plt+0x845c>
   19958:	add	r4, r4, #1
   1995c:	ldr	r3, [r6, #4]
   19960:	cmp	r3, r4
   19964:	ble	19a00 <__assert_fail@plt+0x84a8>
   19968:	ldr	r3, [r6, #8]
   1996c:	ldr	r5, [r3, r4, lsl #2]
   19970:	ldr	r3, [r7]
   19974:	add	r2, r3, r5, lsl #3
   19978:	ldrb	r2, [r2, #4]
   1997c:	cmp	r2, #8
   19980:	bne	19958 <__assert_fail@plt+0x8400>
   19984:	ldr	r3, [r3, r5, lsl #3]
   19988:	cmp	r3, #31
   1998c:	bgt	19958 <__assert_fail@plt+0x8400>
   19990:	ldr	r2, [r7, #80]	; 0x50
   19994:	lsr	r3, r2, r3
   19998:	tst	r3, #1
   1999c:	beq	19958 <__assert_fail@plt+0x8400>
   199a0:	ldr	r0, [r8, #132]	; 0x84
   199a4:	ldr	r1, [r8, #128]	; 0x80
   199a8:	ldr	r3, [r8, #124]	; 0x7c
   199ac:	cmp	r1, r3
   199b0:	beq	19938 <__assert_fail@plt+0x83e0>
   199b4:	ldr	fp, [r8, #124]	; 0x7c
   199b8:	ldr	sl, [r8, #132]	; 0x84
   199bc:	mov	r1, #24
   199c0:	mov	r0, #1
   199c4:	bl	24478 <__assert_fail@plt+0x12f20>
   199c8:	str	r0, [sl, fp, lsl #2]
   199cc:	ldr	r2, [r8, #124]	; 0x7c
   199d0:	ldr	r3, [r8, #132]	; 0x84
   199d4:	ldr	r3, [r3, r2, lsl #2]
   199d8:	cmp	r3, #0
   199dc:	beq	19a10 <__assert_fail@plt+0x84b8>
   199e0:	str	r5, [r3, #4]
   199e4:	ldr	r2, [r8, #132]	; 0x84
   199e8:	ldr	r3, [r8, #124]	; 0x7c
   199ec:	add	r1, r3, #1
   199f0:	str	r1, [r8, #124]	; 0x7c
   199f4:	ldr	r3, [r2, r3, lsl #2]
   199f8:	str	r9, [r3]
   199fc:	b	19958 <__assert_fail@plt+0x8400>
   19a00:	mov	r0, #0
   19a04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a08:	mov	r0, #0
   19a0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a10:	mov	r0, #12
   19a14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a18:	push	{r4, r5, r6, lr}
   19a1c:	mov	r4, r0
   19a20:	mov	r5, r1
   19a24:	ldr	r6, [r0, #104]	; 0x68
   19a28:	ldr	r3, [r0, #36]	; 0x24
   19a2c:	cmp	r3, r1
   19a30:	bgt	19a40 <__assert_fail@plt+0x84e8>
   19a34:	ldr	r2, [r0, #48]	; 0x30
   19a38:	cmp	r3, r2
   19a3c:	blt	19a58 <__assert_fail@plt+0x8500>
   19a40:	ldr	r3, [r4, #28]
   19a44:	cmp	r5, r3
   19a48:	blt	19a6c <__assert_fail@plt+0x8514>
   19a4c:	ldr	r2, [r4, #48]	; 0x30
   19a50:	cmp	r3, r2
   19a54:	bge	19a6c <__assert_fail@plt+0x8514>
   19a58:	add	r1, r5, #1
   19a5c:	mov	r0, r4
   19a60:	bl	17660 <__assert_fail@plt+0x6108>
   19a64:	cmp	r0, #0
   19a68:	popne	{r4, r5, r6, pc}
   19a6c:	cmp	r6, r5
   19a70:	bge	19a9c <__assert_fail@plt+0x8544>
   19a74:	sub	r2, r5, r6
   19a78:	add	r6, r6, #1
   19a7c:	ldr	r0, [r4, #100]	; 0x64
   19a80:	lsl	r2, r2, #2
   19a84:	mov	r1, #0
   19a88:	add	r0, r0, r6, lsl #2
   19a8c:	bl	1145c <memset@plt>
   19a90:	str	r5, [r4, #104]	; 0x68
   19a94:	mov	r0, #0
   19a98:	pop	{r4, r5, r6, pc}
   19a9c:	mov	r0, #0
   19aa0:	pop	{r4, r5, r6, pc}
   19aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19aa8:	sub	sp, sp, #28
   19aac:	mov	r7, r0
   19ab0:	mov	r8, r1
   19ab4:	mov	r5, r2
   19ab8:	mov	r4, r3
   19abc:	ldr	r1, [r1, #4]
   19ac0:	add	r0, sp, #12
   19ac4:	bl	16980 <__assert_fail@plt+0x5428>
   19ac8:	subs	r9, r0, #0
   19acc:	bne	19bc4 <__assert_fail@plt+0x866c>
   19ad0:	ldr	r3, [r8, #4]
   19ad4:	cmp	r3, #0
   19ad8:	ble	19ba8 <__assert_fail@plt+0x8650>
   19adc:	mov	r6, #0
   19ae0:	b	19b44 <__assert_fail@plt+0x85ec>
   19ae4:	add	r3, r3, #1
   19ae8:	cmp	fp, r3
   19aec:	beq	19b78 <__assert_fail@plt+0x8620>
   19af0:	ldr	r0, [ip, #4]!
   19af4:	add	lr, sl, r0, lsl #3
   19af8:	ldrb	lr, [lr, #4]
   19afc:	cmp	r4, lr
   19b00:	bne	19ae4 <__assert_fail@plt+0x858c>
   19b04:	ldr	lr, [sl, r0, lsl #3]
   19b08:	cmp	r5, lr
   19b0c:	bne	19ae4 <__assert_fail@plt+0x858c>
   19b10:	cmn	r0, #1
   19b14:	beq	19b78 <__assert_fail@plt+0x8620>
   19b18:	str	r4, [sp]
   19b1c:	mov	r3, r5
   19b20:	add	r1, sp, #12
   19b24:	mov	r0, r7
   19b28:	bl	1919c <__assert_fail@plt+0x7c44>
   19b2c:	subs	sl, r0, #0
   19b30:	bne	19b94 <__assert_fail@plt+0x863c>
   19b34:	add	r6, r6, #1
   19b38:	ldr	r3, [r8, #4]
   19b3c:	cmp	r3, r6
   19b40:	ble	19ba8 <__assert_fail@plt+0x8650>
   19b44:	ldr	r3, [r8, #8]
   19b48:	ldr	r2, [r3, r6, lsl #2]
   19b4c:	add	r3, r2, r2, lsl #1
   19b50:	ldr	r1, [r7, #24]
   19b54:	add	r1, r1, r3, lsl #2
   19b58:	ldr	fp, [r1, #4]
   19b5c:	cmp	fp, #0
   19b60:	ble	19b78 <__assert_fail@plt+0x8620>
   19b64:	ldr	sl, [r7]
   19b68:	ldr	ip, [r1, #8]
   19b6c:	sub	ip, ip, #4
   19b70:	mov	r3, #0
   19b74:	b	19af0 <__assert_fail@plt+0x8598>
   19b78:	add	r0, sp, #12
   19b7c:	bl	192a8 <__assert_fail@plt+0x7d50>
   19b80:	subs	sl, r0, #0
   19b84:	beq	19b34 <__assert_fail@plt+0x85dc>
   19b88:	ldr	r0, [sp, #20]
   19b8c:	bl	13b40 <__assert_fail@plt+0x25e8>
   19b90:	b	19b9c <__assert_fail@plt+0x8644>
   19b94:	ldr	r0, [sp, #20]
   19b98:	bl	13b40 <__assert_fail@plt+0x25e8>
   19b9c:	mov	r0, sl
   19ba0:	add	sp, sp, #28
   19ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ba8:	ldr	r0, [r8, #8]
   19bac:	bl	13b40 <__assert_fail@plt+0x25e8>
   19bb0:	add	r3, sp, #24
   19bb4:	ldmdb	r3, {r0, r1, r2}
   19bb8:	stm	r8, {r0, r1, r2}
   19bbc:	mov	sl, r9
   19bc0:	b	19b9c <__assert_fail@plt+0x8644>
   19bc4:	mov	sl, r9
   19bc8:	b	19b9c <__assert_fail@plt+0x8644>
   19bcc:	push	{r4, r5, r6, r7, r8, lr}
   19bd0:	mov	r4, r0
   19bd4:	mov	r5, r1
   19bd8:	mov	r1, r2
   19bdc:	ldr	r2, [r0, #88]	; 0x58
   19be0:	bl	1967c <__assert_fail@plt+0x8124>
   19be4:	ldr	lr, [r5, #8]
   19be8:	cmp	lr, #0
   19bec:	ble	19c94 <__assert_fail@plt+0x873c>
   19bf0:	ldr	r3, [r4, #84]	; 0x54
   19bf4:	ldr	r4, [r3]
   19bf8:	ldr	ip, [r5, #12]
   19bfc:	sub	ip, ip, #4
   19c00:	mov	r1, #0
   19c04:	and	r7, r0, #8
   19c08:	and	r6, r0, #2
   19c0c:	and	r5, r0, #1
   19c10:	b	19c50 <__assert_fail@plt+0x86f8>
   19c14:	tst	r3, #8
   19c18:	beq	19c24 <__assert_fail@plt+0x86cc>
   19c1c:	cmp	r5, #0
   19c20:	bne	19c44 <__assert_fail@plt+0x86ec>
   19c24:	tst	r3, #32
   19c28:	beq	19c34 <__assert_fail@plt+0x86dc>
   19c2c:	cmp	r6, #0
   19c30:	beq	19c44 <__assert_fail@plt+0x86ec>
   19c34:	tst	r3, #128	; 0x80
   19c38:	popeq	{r4, r5, r6, r7, r8, pc}
   19c3c:	cmp	r7, #0
   19c40:	popne	{r4, r5, r6, r7, r8, pc}
   19c44:	add	r1, r1, #1
   19c48:	cmp	lr, r1
   19c4c:	beq	19c9c <__assert_fail@plt+0x8744>
   19c50:	ldr	r0, [ip, #4]!
   19c54:	add	r2, r4, r0, lsl #3
   19c58:	ldr	r3, [r2, #4]
   19c5c:	lsl	r3, r3, #14
   19c60:	lsr	r3, r3, #22
   19c64:	ldrb	r2, [r2, #4]
   19c68:	cmp	r2, #2
   19c6c:	bne	19c44 <__assert_fail@plt+0x86ec>
   19c70:	cmp	r3, #0
   19c74:	popeq	{r4, r5, r6, r7, r8, pc}
   19c78:	tst	r3, #4
   19c7c:	beq	19c14 <__assert_fail@plt+0x86bc>
   19c80:	cmp	r5, #0
   19c84:	beq	19c44 <__assert_fail@plt+0x86ec>
   19c88:	tst	r3, #8
   19c8c:	bne	19c44 <__assert_fail@plt+0x86ec>
   19c90:	b	19c24 <__assert_fail@plt+0x86cc>
   19c94:	mov	r0, #0
   19c98:	pop	{r4, r5, r6, r7, r8, pc}
   19c9c:	mov	r0, #0
   19ca0:	pop	{r4, r5, r6, r7, r8, pc}
   19ca4:	push	{r4, r5, r6, r7, r8, lr}
   19ca8:	ldr	r7, [sp, #28]
   19cac:	subs	r5, r0, #0
   19cb0:	beq	19d50 <__assert_fail@plt+0x87f8>
   19cb4:	ldr	r4, [r5]
   19cb8:	cmp	r4, #0
   19cbc:	beq	19d58 <__assert_fail@plt+0x8800>
   19cc0:	mov	r0, r3
   19cc4:	sub	r4, r4, #1
   19cc8:	str	r4, [r5]
   19ccc:	add	r4, r4, r4, lsl #1
   19cd0:	lsl	r4, r4, #3
   19cd4:	ldr	r3, [r5, #8]
   19cd8:	ldr	r3, [r3, r4]
   19cdc:	str	r3, [r1]
   19ce0:	lsl	r6, r2, #3
   19ce4:	ldr	r3, [r5, #8]
   19ce8:	add	r3, r3, r4
   19cec:	mov	r2, r6
   19cf0:	ldr	r1, [r3, #8]
   19cf4:	bl	11264 <memcpy@plt>
   19cf8:	ldr	r3, [r5, #8]
   19cfc:	add	r3, r3, r4
   19d00:	ldr	r1, [r3, #8]
   19d04:	mov	r2, r6
   19d08:	add	r1, r1, r6
   19d0c:	ldr	r0, [sp, #24]
   19d10:	bl	11264 <memcpy@plt>
   19d14:	ldr	r0, [r7, #8]
   19d18:	bl	13b40 <__assert_fail@plt+0x25e8>
   19d1c:	ldr	r3, [r5, #8]
   19d20:	add	r3, r3, r4
   19d24:	ldr	r0, [r3, #8]
   19d28:	bl	13b40 <__assert_fail@plt+0x25e8>
   19d2c:	ldr	r3, [r5, #8]
   19d30:	add	r3, r3, r4
   19d34:	add	r3, r3, #12
   19d38:	ldm	r3, {r0, r1, r2}
   19d3c:	stm	r7, {r0, r1, r2}
   19d40:	ldr	r3, [r5, #8]
   19d44:	add	r4, r3, r4
   19d48:	ldr	r0, [r4, #4]
   19d4c:	pop	{r4, r5, r6, r7, r8, pc}
   19d50:	mvn	r0, #0
   19d54:	pop	{r4, r5, r6, r7, r8, pc}
   19d58:	mvn	r0, #0
   19d5c:	pop	{r4, r5, r6, r7, r8, pc}
   19d60:	push	{r4, r5, r6, r7, r8, lr}
   19d64:	mov	r6, r0
   19d68:	mov	r5, r1
   19d6c:	mov	r4, r2
   19d70:	mov	r8, r3
   19d74:	ldr	r3, [sp, #28]
   19d78:	tst	r3, #4194304	; 0x400000
   19d7c:	beq	19db4 <__assert_fail@plt+0x885c>
   19d80:	ldr	r1, [pc, #2780]	; 1a864 <__assert_fail@plt+0x930c>
   19d84:	ldr	r0, [sp, #24]
   19d88:	bl	111f8 <strcmp@plt>
   19d8c:	cmp	r0, #0
   19d90:	beq	19e08 <__assert_fail@plt+0x88b0>
   19d94:	ldr	r1, [pc, #2764]	; 1a868 <__assert_fail@plt+0x9310>
   19d98:	ldr	r0, [sp, #24]
   19d9c:	bl	111f8 <strcmp@plt>
   19da0:	ldr	r3, [pc, #2756]	; 1a86c <__assert_fail@plt+0x9314>
   19da4:	ldr	r2, [sp, #24]
   19da8:	cmp	r0, #0
   19dac:	moveq	r2, r3
   19db0:	str	r2, [sp, #24]
   19db4:	ldr	r3, [r8]
   19db8:	ldr	r2, [r4, #36]	; 0x24
   19dbc:	cmp	r3, r2
   19dc0:	beq	19e14 <__assert_fail@plt+0x88bc>
   19dc4:	ldr	r8, [r4, #12]
   19dc8:	ldr	r7, [r4, #36]	; 0x24
   19dcc:	add	r3, r7, #1
   19dd0:	str	r3, [r4, #36]	; 0x24
   19dd4:	ldr	r0, [sp, #24]
   19dd8:	bl	111c8 <wctype@plt>
   19ddc:	str	r0, [r8, r7, lsl #2]
   19de0:	ldr	r1, [pc, #2696]	; 1a870 <__assert_fail@plt+0x9318>
   19de4:	ldr	r0, [sp, #24]
   19de8:	bl	111f8 <strcmp@plt>
   19dec:	subs	r4, r0, #0
   19df0:	bne	19ef0 <__assert_fail@plt+0x8998>
   19df4:	cmp	r6, #0
   19df8:	bne	19e3c <__assert_fail@plt+0x88e4>
   19dfc:	bl	113fc <__ctype_b_loc@plt>
   19e00:	mov	ip, #1
   19e04:	b	19ea0 <__assert_fail@plt+0x8948>
   19e08:	ldr	r3, [pc, #2652]	; 1a86c <__assert_fail@plt+0x9314>
   19e0c:	str	r3, [sp, #24]
   19e10:	b	19db4 <__assert_fail@plt+0x885c>
   19e14:	lsl	r3, r3, #1
   19e18:	add	r7, r3, #1
   19e1c:	lsl	r1, r7, #2
   19e20:	ldr	r0, [r4, #12]
   19e24:	bl	244f8 <__assert_fail@plt+0x12fa0>
   19e28:	cmp	r0, #0
   19e2c:	beq	1a854 <__assert_fail@plt+0x92fc>
   19e30:	str	r0, [r4, #12]
   19e34:	str	r7, [r8]
   19e38:	b	19dc4 <__assert_fail@plt+0x886c>
   19e3c:	bl	113fc <__ctype_b_loc@plt>
   19e40:	mov	r2, r6
   19e44:	mov	r3, #0
   19e48:	mov	r4, #1
   19e4c:	b	19e60 <__assert_fail@plt+0x8908>
   19e50:	add	r3, r3, #2
   19e54:	add	r2, r2, #1
   19e58:	cmp	r3, #512	; 0x200
   19e5c:	beq	19e8c <__assert_fail@plt+0x8934>
   19e60:	ldr	r1, [r0]
   19e64:	ldrh	r1, [r1, r3]
   19e68:	tst	r1, #8
   19e6c:	beq	19e50 <__assert_fail@plt+0x88f8>
   19e70:	ldrb	r1, [r2]
   19e74:	asr	lr, r1, #5
   19e78:	and	r1, r1, #31
   19e7c:	ldr	ip, [r5, lr, lsl #2]
   19e80:	orr	r1, ip, r4, lsl r1
   19e84:	str	r1, [r5, lr, lsl #2]
   19e88:	b	19e50 <__assert_fail@plt+0x88f8>
   19e8c:	mov	r0, #0
   19e90:	pop	{r4, r5, r6, r7, r8, pc}
   19e94:	add	r4, r4, #1
   19e98:	cmp	r4, #256	; 0x100
   19e9c:	beq	19ee8 <__assert_fail@plt+0x8990>
   19ea0:	ldr	r2, [r0]
   19ea4:	lsl	r3, r4, #1
   19ea8:	ldrh	r3, [r2, r3]
   19eac:	tst	r3, #8
   19eb0:	beq	19e94 <__assert_fail@plt+0x893c>
   19eb4:	add	r3, r4, #31
   19eb8:	cmp	r4, #0
   19ebc:	movge	r3, r4
   19ec0:	asr	r3, r3, #5
   19ec4:	asr	r2, r4, #31
   19ec8:	lsr	r1, r2, #27
   19ecc:	add	r2, r4, r1
   19ed0:	and	r2, r2, #31
   19ed4:	sub	r2, r2, r1
   19ed8:	ldr	r1, [r5, r3, lsl #2]
   19edc:	orr	r2, r1, ip, lsl r2
   19ee0:	str	r2, [r5, r3, lsl #2]
   19ee4:	b	19e94 <__assert_fail@plt+0x893c>
   19ee8:	mov	r0, #0
   19eec:	pop	{r4, r5, r6, r7, r8, pc}
   19ef0:	ldr	r1, [pc, #2428]	; 1a874 <__assert_fail@plt+0x931c>
   19ef4:	ldr	r0, [sp, #24]
   19ef8:	bl	111f8 <strcmp@plt>
   19efc:	subs	r4, r0, #0
   19f00:	bne	19fcc <__assert_fail@plt+0x8a74>
   19f04:	cmp	r6, #0
   19f08:	bne	19f18 <__assert_fail@plt+0x89c0>
   19f0c:	bl	113fc <__ctype_b_loc@plt>
   19f10:	mov	ip, #1
   19f14:	b	19f7c <__assert_fail@plt+0x8a24>
   19f18:	bl	113fc <__ctype_b_loc@plt>
   19f1c:	mov	r2, r6
   19f20:	mov	r3, #0
   19f24:	mov	r4, #1
   19f28:	b	19f3c <__assert_fail@plt+0x89e4>
   19f2c:	add	r3, r3, #2
   19f30:	add	r2, r2, #1
   19f34:	cmp	r3, #512	; 0x200
   19f38:	beq	19f68 <__assert_fail@plt+0x8a10>
   19f3c:	ldr	r1, [r0]
   19f40:	ldrh	r1, [r1, r3]
   19f44:	tst	r1, #2
   19f48:	beq	19f2c <__assert_fail@plt+0x89d4>
   19f4c:	ldrb	r1, [r2]
   19f50:	asr	lr, r1, #5
   19f54:	and	r1, r1, #31
   19f58:	ldr	ip, [r5, lr, lsl #2]
   19f5c:	orr	r1, ip, r4, lsl r1
   19f60:	str	r1, [r5, lr, lsl #2]
   19f64:	b	19f2c <__assert_fail@plt+0x89d4>
   19f68:	mov	r0, #0
   19f6c:	pop	{r4, r5, r6, r7, r8, pc}
   19f70:	add	r4, r4, #1
   19f74:	cmp	r4, #256	; 0x100
   19f78:	beq	19fc4 <__assert_fail@plt+0x8a6c>
   19f7c:	ldr	r2, [r0]
   19f80:	lsl	r3, r4, #1
   19f84:	ldrh	r3, [r2, r3]
   19f88:	tst	r3, #2
   19f8c:	beq	19f70 <__assert_fail@plt+0x8a18>
   19f90:	add	r3, r4, #31
   19f94:	cmp	r4, #0
   19f98:	movge	r3, r4
   19f9c:	asr	r3, r3, #5
   19fa0:	asr	r2, r4, #31
   19fa4:	lsr	r1, r2, #27
   19fa8:	add	r2, r4, r1
   19fac:	and	r2, r2, #31
   19fb0:	sub	r2, r2, r1
   19fb4:	ldr	r1, [r5, r3, lsl #2]
   19fb8:	orr	r2, r1, ip, lsl r2
   19fbc:	str	r2, [r5, r3, lsl #2]
   19fc0:	b	19f70 <__assert_fail@plt+0x8a18>
   19fc4:	mov	r0, #0
   19fc8:	pop	{r4, r5, r6, r7, r8, pc}
   19fcc:	ldr	r1, [pc, #2196]	; 1a868 <__assert_fail@plt+0x9310>
   19fd0:	ldr	r0, [sp, #24]
   19fd4:	bl	111f8 <strcmp@plt>
   19fd8:	subs	r4, r0, #0
   19fdc:	bne	1a0a8 <__assert_fail@plt+0x8b50>
   19fe0:	cmp	r6, #0
   19fe4:	bne	19ff4 <__assert_fail@plt+0x8a9c>
   19fe8:	bl	113fc <__ctype_b_loc@plt>
   19fec:	mov	ip, #1
   19ff0:	b	1a058 <__assert_fail@plt+0x8b00>
   19ff4:	bl	113fc <__ctype_b_loc@plt>
   19ff8:	mov	r2, r6
   19ffc:	mov	r3, #0
   1a000:	mov	r4, #1
   1a004:	b	1a018 <__assert_fail@plt+0x8ac0>
   1a008:	add	r3, r3, #2
   1a00c:	add	r2, r2, #1
   1a010:	cmp	r3, #512	; 0x200
   1a014:	beq	1a044 <__assert_fail@plt+0x8aec>
   1a018:	ldr	r1, [r0]
   1a01c:	ldrh	r1, [r1, r3]
   1a020:	tst	r1, #512	; 0x200
   1a024:	beq	1a008 <__assert_fail@plt+0x8ab0>
   1a028:	ldrb	r1, [r2]
   1a02c:	asr	lr, r1, #5
   1a030:	and	r1, r1, #31
   1a034:	ldr	ip, [r5, lr, lsl #2]
   1a038:	orr	r1, ip, r4, lsl r1
   1a03c:	str	r1, [r5, lr, lsl #2]
   1a040:	b	1a008 <__assert_fail@plt+0x8ab0>
   1a044:	mov	r0, #0
   1a048:	pop	{r4, r5, r6, r7, r8, pc}
   1a04c:	add	r4, r4, #1
   1a050:	cmp	r4, #256	; 0x100
   1a054:	beq	1a0a0 <__assert_fail@plt+0x8b48>
   1a058:	ldr	r2, [r0]
   1a05c:	lsl	r3, r4, #1
   1a060:	ldrh	r3, [r2, r3]
   1a064:	tst	r3, #512	; 0x200
   1a068:	beq	1a04c <__assert_fail@plt+0x8af4>
   1a06c:	add	r3, r4, #31
   1a070:	cmp	r4, #0
   1a074:	movge	r3, r4
   1a078:	asr	r3, r3, #5
   1a07c:	asr	r2, r4, #31
   1a080:	lsr	r1, r2, #27
   1a084:	add	r2, r4, r1
   1a088:	and	r2, r2, #31
   1a08c:	sub	r2, r2, r1
   1a090:	ldr	r1, [r5, r3, lsl #2]
   1a094:	orr	r2, r1, ip, lsl r2
   1a098:	str	r2, [r5, r3, lsl #2]
   1a09c:	b	1a04c <__assert_fail@plt+0x8af4>
   1a0a0:	mov	r0, #0
   1a0a4:	pop	{r4, r5, r6, r7, r8, pc}
   1a0a8:	ldr	r1, [pc, #1992]	; 1a878 <__assert_fail@plt+0x9320>
   1a0ac:	ldr	r0, [sp, #24]
   1a0b0:	bl	111f8 <strcmp@plt>
   1a0b4:	subs	r4, r0, #0
   1a0b8:	bne	1a184 <__assert_fail@plt+0x8c2c>
   1a0bc:	cmp	r6, #0
   1a0c0:	bne	1a0d0 <__assert_fail@plt+0x8b78>
   1a0c4:	bl	113fc <__ctype_b_loc@plt>
   1a0c8:	mov	ip, #1
   1a0cc:	b	1a134 <__assert_fail@plt+0x8bdc>
   1a0d0:	bl	113fc <__ctype_b_loc@plt>
   1a0d4:	mov	r2, r6
   1a0d8:	mov	r3, #0
   1a0dc:	mov	r4, #1
   1a0e0:	b	1a0f4 <__assert_fail@plt+0x8b9c>
   1a0e4:	add	r3, r3, #2
   1a0e8:	add	r2, r2, #1
   1a0ec:	cmp	r3, #512	; 0x200
   1a0f0:	beq	1a120 <__assert_fail@plt+0x8bc8>
   1a0f4:	ldr	r1, [r0]
   1a0f8:	ldrh	r1, [r1, r3]
   1a0fc:	tst	r1, #8192	; 0x2000
   1a100:	beq	1a0e4 <__assert_fail@plt+0x8b8c>
   1a104:	ldrb	r1, [r2]
   1a108:	asr	lr, r1, #5
   1a10c:	and	r1, r1, #31
   1a110:	ldr	ip, [r5, lr, lsl #2]
   1a114:	orr	r1, ip, r4, lsl r1
   1a118:	str	r1, [r5, lr, lsl #2]
   1a11c:	b	1a0e4 <__assert_fail@plt+0x8b8c>
   1a120:	mov	r0, #0
   1a124:	pop	{r4, r5, r6, r7, r8, pc}
   1a128:	add	r4, r4, #1
   1a12c:	cmp	r4, #256	; 0x100
   1a130:	beq	1a17c <__assert_fail@plt+0x8c24>
   1a134:	ldr	r2, [r0]
   1a138:	lsl	r3, r4, #1
   1a13c:	ldrh	r3, [r2, r3]
   1a140:	tst	r3, #8192	; 0x2000
   1a144:	beq	1a128 <__assert_fail@plt+0x8bd0>
   1a148:	add	r3, r4, #31
   1a14c:	cmp	r4, #0
   1a150:	movge	r3, r4
   1a154:	asr	r3, r3, #5
   1a158:	asr	r2, r4, #31
   1a15c:	lsr	r1, r2, #27
   1a160:	add	r2, r4, r1
   1a164:	and	r2, r2, #31
   1a168:	sub	r2, r2, r1
   1a16c:	ldr	r1, [r5, r3, lsl #2]
   1a170:	orr	r2, r1, ip, lsl r2
   1a174:	str	r2, [r5, r3, lsl #2]
   1a178:	b	1a128 <__assert_fail@plt+0x8bd0>
   1a17c:	mov	r0, #0
   1a180:	pop	{r4, r5, r6, r7, r8, pc}
   1a184:	ldr	r1, [pc, #1760]	; 1a86c <__assert_fail@plt+0x9314>
   1a188:	ldr	r0, [sp, #24]
   1a18c:	bl	111f8 <strcmp@plt>
   1a190:	subs	r4, r0, #0
   1a194:	bne	1a260 <__assert_fail@plt+0x8d08>
   1a198:	cmp	r6, #0
   1a19c:	bne	1a1ac <__assert_fail@plt+0x8c54>
   1a1a0:	bl	113fc <__ctype_b_loc@plt>
   1a1a4:	mov	ip, #1
   1a1a8:	b	1a210 <__assert_fail@plt+0x8cb8>
   1a1ac:	bl	113fc <__ctype_b_loc@plt>
   1a1b0:	mov	r2, r6
   1a1b4:	mov	r3, #0
   1a1b8:	mov	r4, #1
   1a1bc:	b	1a1d0 <__assert_fail@plt+0x8c78>
   1a1c0:	add	r3, r3, #2
   1a1c4:	add	r2, r2, #1
   1a1c8:	cmp	r3, #512	; 0x200
   1a1cc:	beq	1a1fc <__assert_fail@plt+0x8ca4>
   1a1d0:	ldr	r1, [r0]
   1a1d4:	ldrh	r1, [r1, r3]
   1a1d8:	tst	r1, #1024	; 0x400
   1a1dc:	beq	1a1c0 <__assert_fail@plt+0x8c68>
   1a1e0:	ldrb	r1, [r2]
   1a1e4:	asr	lr, r1, #5
   1a1e8:	and	r1, r1, #31
   1a1ec:	ldr	ip, [r5, lr, lsl #2]
   1a1f0:	orr	r1, ip, r4, lsl r1
   1a1f4:	str	r1, [r5, lr, lsl #2]
   1a1f8:	b	1a1c0 <__assert_fail@plt+0x8c68>
   1a1fc:	mov	r0, #0
   1a200:	pop	{r4, r5, r6, r7, r8, pc}
   1a204:	add	r4, r4, #1
   1a208:	cmp	r4, #256	; 0x100
   1a20c:	beq	1a258 <__assert_fail@plt+0x8d00>
   1a210:	ldr	r2, [r0]
   1a214:	lsl	r3, r4, #1
   1a218:	ldrh	r3, [r2, r3]
   1a21c:	tst	r3, #1024	; 0x400
   1a220:	beq	1a204 <__assert_fail@plt+0x8cac>
   1a224:	add	r3, r4, #31
   1a228:	cmp	r4, #0
   1a22c:	movge	r3, r4
   1a230:	asr	r3, r3, #5
   1a234:	asr	r2, r4, #31
   1a238:	lsr	r1, r2, #27
   1a23c:	add	r2, r4, r1
   1a240:	and	r2, r2, #31
   1a244:	sub	r2, r2, r1
   1a248:	ldr	r1, [r5, r3, lsl #2]
   1a24c:	orr	r2, r1, ip, lsl r2
   1a250:	str	r2, [r5, r3, lsl #2]
   1a254:	b	1a204 <__assert_fail@plt+0x8cac>
   1a258:	mov	r0, #0
   1a25c:	pop	{r4, r5, r6, r7, r8, pc}
   1a260:	ldr	r1, [pc, #1556]	; 1a87c <__assert_fail@plt+0x9324>
   1a264:	ldr	r0, [sp, #24]
   1a268:	bl	111f8 <strcmp@plt>
   1a26c:	subs	r4, r0, #0
   1a270:	bne	1a33c <__assert_fail@plt+0x8de4>
   1a274:	cmp	r6, #0
   1a278:	bne	1a288 <__assert_fail@plt+0x8d30>
   1a27c:	bl	113fc <__ctype_b_loc@plt>
   1a280:	mov	ip, #1
   1a284:	b	1a2ec <__assert_fail@plt+0x8d94>
   1a288:	bl	113fc <__ctype_b_loc@plt>
   1a28c:	mov	r2, r6
   1a290:	mov	r3, #0
   1a294:	mov	r4, #1
   1a298:	b	1a2ac <__assert_fail@plt+0x8d54>
   1a29c:	add	r3, r3, #2
   1a2a0:	add	r2, r2, #1
   1a2a4:	cmp	r3, #512	; 0x200
   1a2a8:	beq	1a2d8 <__assert_fail@plt+0x8d80>
   1a2ac:	ldr	r1, [r0]
   1a2b0:	ldrh	r1, [r1, r3]
   1a2b4:	tst	r1, #2048	; 0x800
   1a2b8:	beq	1a29c <__assert_fail@plt+0x8d44>
   1a2bc:	ldrb	r1, [r2]
   1a2c0:	asr	lr, r1, #5
   1a2c4:	and	r1, r1, #31
   1a2c8:	ldr	ip, [r5, lr, lsl #2]
   1a2cc:	orr	r1, ip, r4, lsl r1
   1a2d0:	str	r1, [r5, lr, lsl #2]
   1a2d4:	b	1a29c <__assert_fail@plt+0x8d44>
   1a2d8:	mov	r0, #0
   1a2dc:	pop	{r4, r5, r6, r7, r8, pc}
   1a2e0:	add	r4, r4, #1
   1a2e4:	cmp	r4, #256	; 0x100
   1a2e8:	beq	1a334 <__assert_fail@plt+0x8ddc>
   1a2ec:	ldr	r2, [r0]
   1a2f0:	lsl	r3, r4, #1
   1a2f4:	ldrh	r3, [r2, r3]
   1a2f8:	tst	r3, #2048	; 0x800
   1a2fc:	beq	1a2e0 <__assert_fail@plt+0x8d88>
   1a300:	add	r3, r4, #31
   1a304:	cmp	r4, #0
   1a308:	movge	r3, r4
   1a30c:	asr	r3, r3, #5
   1a310:	asr	r2, r4, #31
   1a314:	lsr	r1, r2, #27
   1a318:	add	r2, r4, r1
   1a31c:	and	r2, r2, #31
   1a320:	sub	r2, r2, r1
   1a324:	ldr	r1, [r5, r3, lsl #2]
   1a328:	orr	r2, r1, ip, lsl r2
   1a32c:	str	r2, [r5, r3, lsl #2]
   1a330:	b	1a2e0 <__assert_fail@plt+0x8d88>
   1a334:	mov	r0, #0
   1a338:	pop	{r4, r5, r6, r7, r8, pc}
   1a33c:	ldr	r1, [pc, #1340]	; 1a880 <__assert_fail@plt+0x9328>
   1a340:	ldr	r0, [sp, #24]
   1a344:	bl	111f8 <strcmp@plt>
   1a348:	subs	r4, r0, #0
   1a34c:	bne	1a418 <__assert_fail@plt+0x8ec0>
   1a350:	cmp	r6, #0
   1a354:	bne	1a364 <__assert_fail@plt+0x8e0c>
   1a358:	bl	113fc <__ctype_b_loc@plt>
   1a35c:	mov	ip, #1
   1a360:	b	1a3c8 <__assert_fail@plt+0x8e70>
   1a364:	bl	113fc <__ctype_b_loc@plt>
   1a368:	mov	r2, r6
   1a36c:	mov	r3, #0
   1a370:	mov	r4, #1
   1a374:	b	1a388 <__assert_fail@plt+0x8e30>
   1a378:	add	r3, r3, #2
   1a37c:	add	r2, r2, #1
   1a380:	cmp	r3, #512	; 0x200
   1a384:	beq	1a3b4 <__assert_fail@plt+0x8e5c>
   1a388:	ldr	r1, [r0]
   1a38c:	ldrh	r1, [r1, r3]
   1a390:	tst	r1, #16384	; 0x4000
   1a394:	beq	1a378 <__assert_fail@plt+0x8e20>
   1a398:	ldrb	r1, [r2]
   1a39c:	asr	lr, r1, #5
   1a3a0:	and	r1, r1, #31
   1a3a4:	ldr	ip, [r5, lr, lsl #2]
   1a3a8:	orr	r1, ip, r4, lsl r1
   1a3ac:	str	r1, [r5, lr, lsl #2]
   1a3b0:	b	1a378 <__assert_fail@plt+0x8e20>
   1a3b4:	mov	r0, #0
   1a3b8:	pop	{r4, r5, r6, r7, r8, pc}
   1a3bc:	add	r4, r4, #1
   1a3c0:	cmp	r4, #256	; 0x100
   1a3c4:	beq	1a410 <__assert_fail@plt+0x8eb8>
   1a3c8:	ldr	r2, [r0]
   1a3cc:	lsl	r3, r4, #1
   1a3d0:	ldrh	r3, [r2, r3]
   1a3d4:	tst	r3, #16384	; 0x4000
   1a3d8:	beq	1a3bc <__assert_fail@plt+0x8e64>
   1a3dc:	add	r3, r4, #31
   1a3e0:	cmp	r4, #0
   1a3e4:	movge	r3, r4
   1a3e8:	asr	r3, r3, #5
   1a3ec:	asr	r2, r4, #31
   1a3f0:	lsr	r1, r2, #27
   1a3f4:	add	r2, r4, r1
   1a3f8:	and	r2, r2, #31
   1a3fc:	sub	r2, r2, r1
   1a400:	ldr	r1, [r5, r3, lsl #2]
   1a404:	orr	r2, r1, ip, lsl r2
   1a408:	str	r2, [r5, r3, lsl #2]
   1a40c:	b	1a3bc <__assert_fail@plt+0x8e64>
   1a410:	mov	r0, #0
   1a414:	pop	{r4, r5, r6, r7, r8, pc}
   1a418:	ldr	r1, [pc, #1092]	; 1a864 <__assert_fail@plt+0x930c>
   1a41c:	ldr	r0, [sp, #24]
   1a420:	bl	111f8 <strcmp@plt>
   1a424:	subs	r4, r0, #0
   1a428:	bne	1a4f4 <__assert_fail@plt+0x8f9c>
   1a42c:	cmp	r6, #0
   1a430:	bne	1a440 <__assert_fail@plt+0x8ee8>
   1a434:	bl	113fc <__ctype_b_loc@plt>
   1a438:	mov	ip, #1
   1a43c:	b	1a4a4 <__assert_fail@plt+0x8f4c>
   1a440:	bl	113fc <__ctype_b_loc@plt>
   1a444:	mov	r2, r6
   1a448:	mov	r3, #0
   1a44c:	mov	r4, #1
   1a450:	b	1a464 <__assert_fail@plt+0x8f0c>
   1a454:	add	r3, r3, #2
   1a458:	add	r2, r2, #1
   1a45c:	cmp	r3, #512	; 0x200
   1a460:	beq	1a490 <__assert_fail@plt+0x8f38>
   1a464:	ldr	r1, [r0]
   1a468:	ldrh	r1, [r1, r3]
   1a46c:	tst	r1, #256	; 0x100
   1a470:	beq	1a454 <__assert_fail@plt+0x8efc>
   1a474:	ldrb	r1, [r2]
   1a478:	asr	lr, r1, #5
   1a47c:	and	r1, r1, #31
   1a480:	ldr	ip, [r5, lr, lsl #2]
   1a484:	orr	r1, ip, r4, lsl r1
   1a488:	str	r1, [r5, lr, lsl #2]
   1a48c:	b	1a454 <__assert_fail@plt+0x8efc>
   1a490:	mov	r0, #0
   1a494:	pop	{r4, r5, r6, r7, r8, pc}
   1a498:	add	r4, r4, #1
   1a49c:	cmp	r4, #256	; 0x100
   1a4a0:	beq	1a4ec <__assert_fail@plt+0x8f94>
   1a4a4:	ldr	r2, [r0]
   1a4a8:	lsl	r3, r4, #1
   1a4ac:	ldrh	r3, [r2, r3]
   1a4b0:	tst	r3, #256	; 0x100
   1a4b4:	beq	1a498 <__assert_fail@plt+0x8f40>
   1a4b8:	add	r3, r4, #31
   1a4bc:	cmp	r4, #0
   1a4c0:	movge	r3, r4
   1a4c4:	asr	r3, r3, #5
   1a4c8:	asr	r2, r4, #31
   1a4cc:	lsr	r1, r2, #27
   1a4d0:	add	r2, r4, r1
   1a4d4:	and	r2, r2, #31
   1a4d8:	sub	r2, r2, r1
   1a4dc:	ldr	r1, [r5, r3, lsl #2]
   1a4e0:	orr	r2, r1, ip, lsl r2
   1a4e4:	str	r2, [r5, r3, lsl #2]
   1a4e8:	b	1a498 <__assert_fail@plt+0x8f40>
   1a4ec:	mov	r0, #0
   1a4f0:	pop	{r4, r5, r6, r7, r8, pc}
   1a4f4:	ldr	r1, [pc, #904]	; 1a884 <__assert_fail@plt+0x932c>
   1a4f8:	ldr	r0, [sp, #24]
   1a4fc:	bl	111f8 <strcmp@plt>
   1a500:	subs	r4, r0, #0
   1a504:	bne	1a5d0 <__assert_fail@plt+0x9078>
   1a508:	cmp	r6, #0
   1a50c:	beq	1a568 <__assert_fail@plt+0x9010>
   1a510:	bl	113fc <__ctype_b_loc@plt>
   1a514:	mov	r2, r6
   1a518:	mov	r3, #0
   1a51c:	mov	r4, #1
   1a520:	b	1a534 <__assert_fail@plt+0x8fdc>
   1a524:	add	r3, r3, #2
   1a528:	add	r2, r2, #1
   1a52c:	cmp	r3, #512	; 0x200
   1a530:	beq	1a560 <__assert_fail@plt+0x9008>
   1a534:	ldr	r1, [r0]
   1a538:	ldrh	r1, [r1, r3]
   1a53c:	tst	r1, #1
   1a540:	beq	1a524 <__assert_fail@plt+0x8fcc>
   1a544:	ldrb	r1, [r2]
   1a548:	asr	lr, r1, #5
   1a54c:	and	r1, r1, #31
   1a550:	ldr	ip, [r5, lr, lsl #2]
   1a554:	orr	r1, ip, r4, lsl r1
   1a558:	str	r1, [r5, lr, lsl #2]
   1a55c:	b	1a524 <__assert_fail@plt+0x8fcc>
   1a560:	mov	r0, #0
   1a564:	pop	{r4, r5, r6, r7, r8, pc}
   1a568:	bl	113fc <__ctype_b_loc@plt>
   1a56c:	mov	ip, #1
   1a570:	b	1a580 <__assert_fail@plt+0x9028>
   1a574:	add	r4, r4, #1
   1a578:	cmp	r4, #256	; 0x100
   1a57c:	beq	1a5c8 <__assert_fail@plt+0x9070>
   1a580:	ldr	r2, [r0]
   1a584:	lsl	r3, r4, #1
   1a588:	ldrh	r3, [r2, r3]
   1a58c:	tst	r3, #1
   1a590:	beq	1a574 <__assert_fail@plt+0x901c>
   1a594:	add	r3, r4, #31
   1a598:	cmp	r4, #0
   1a59c:	movge	r3, r4
   1a5a0:	asr	r3, r3, #5
   1a5a4:	asr	r2, r4, #31
   1a5a8:	lsr	r1, r2, #27
   1a5ac:	add	r2, r4, r1
   1a5b0:	and	r2, r2, #31
   1a5b4:	sub	r2, r2, r1
   1a5b8:	ldr	r1, [r5, r3, lsl #2]
   1a5bc:	orr	r2, r1, ip, lsl r2
   1a5c0:	str	r2, [r5, r3, lsl #2]
   1a5c4:	b	1a574 <__assert_fail@plt+0x901c>
   1a5c8:	mov	r0, #0
   1a5cc:	pop	{r4, r5, r6, r7, r8, pc}
   1a5d0:	ldr	r1, [pc, #688]	; 1a888 <__assert_fail@plt+0x9330>
   1a5d4:	ldr	r0, [sp, #24]
   1a5d8:	bl	111f8 <strcmp@plt>
   1a5dc:	subs	r4, r0, #0
   1a5e0:	bne	1a6ac <__assert_fail@plt+0x9154>
   1a5e4:	cmp	r6, #0
   1a5e8:	beq	1a644 <__assert_fail@plt+0x90ec>
   1a5ec:	bl	113fc <__ctype_b_loc@plt>
   1a5f0:	mov	r2, r6
   1a5f4:	mov	r3, #0
   1a5f8:	mov	r4, #1
   1a5fc:	b	1a610 <__assert_fail@plt+0x90b8>
   1a600:	add	r3, r3, #2
   1a604:	add	r2, r2, #1
   1a608:	cmp	r3, #512	; 0x200
   1a60c:	beq	1a63c <__assert_fail@plt+0x90e4>
   1a610:	ldr	r1, [r0]
   1a614:	ldrsh	r1, [r1, r3]
   1a618:	cmp	r1, #0
   1a61c:	bge	1a600 <__assert_fail@plt+0x90a8>
   1a620:	ldrb	r1, [r2]
   1a624:	asr	lr, r1, #5
   1a628:	and	r1, r1, #31
   1a62c:	ldr	ip, [r5, lr, lsl #2]
   1a630:	orr	r1, ip, r4, lsl r1
   1a634:	str	r1, [r5, lr, lsl #2]
   1a638:	b	1a600 <__assert_fail@plt+0x90a8>
   1a63c:	mov	r0, #0
   1a640:	pop	{r4, r5, r6, r7, r8, pc}
   1a644:	bl	113fc <__ctype_b_loc@plt>
   1a648:	mov	ip, #1
   1a64c:	b	1a65c <__assert_fail@plt+0x9104>
   1a650:	add	r4, r4, #1
   1a654:	cmp	r4, #256	; 0x100
   1a658:	beq	1a6a4 <__assert_fail@plt+0x914c>
   1a65c:	ldr	r2, [r0]
   1a660:	lsl	r3, r4, #1
   1a664:	ldrsh	r3, [r2, r3]
   1a668:	cmp	r3, #0
   1a66c:	bge	1a650 <__assert_fail@plt+0x90f8>
   1a670:	add	r3, r4, #31
   1a674:	cmp	r4, #0
   1a678:	movge	r3, r4
   1a67c:	asr	r3, r3, #5
   1a680:	asr	r2, r4, #31
   1a684:	lsr	r1, r2, #27
   1a688:	add	r2, r4, r1
   1a68c:	and	r2, r2, #31
   1a690:	sub	r2, r2, r1
   1a694:	ldr	r1, [r5, r3, lsl #2]
   1a698:	orr	r2, r1, ip, lsl r2
   1a69c:	str	r2, [r5, r3, lsl #2]
   1a6a0:	b	1a650 <__assert_fail@plt+0x90f8>
   1a6a4:	mov	r0, #0
   1a6a8:	pop	{r4, r5, r6, r7, r8, pc}
   1a6ac:	ldr	r1, [pc, #472]	; 1a88c <__assert_fail@plt+0x9334>
   1a6b0:	ldr	r0, [sp, #24]
   1a6b4:	bl	111f8 <strcmp@plt>
   1a6b8:	subs	r4, r0, #0
   1a6bc:	bne	1a780 <__assert_fail@plt+0x9228>
   1a6c0:	cmp	r6, #0
   1a6c4:	beq	1a718 <__assert_fail@plt+0x91c0>
   1a6c8:	bl	113fc <__ctype_b_loc@plt>
   1a6cc:	mov	r2, r6
   1a6d0:	mov	r3, #0
   1a6d4:	mov	r4, #1
   1a6d8:	ldr	r1, [r0]
   1a6dc:	ldrh	r1, [r1, r3]
   1a6e0:	tst	r1, #4
   1a6e4:	beq	1a700 <__assert_fail@plt+0x91a8>
   1a6e8:	ldrb	r1, [r2]
   1a6ec:	asr	lr, r1, #5
   1a6f0:	and	r1, r1, #31
   1a6f4:	ldr	ip, [r5, lr, lsl #2]
   1a6f8:	orr	r1, ip, r4, lsl r1
   1a6fc:	str	r1, [r5, lr, lsl #2]
   1a700:	add	r3, r3, #2
   1a704:	add	r2, r2, #1
   1a708:	cmp	r3, #512	; 0x200
   1a70c:	bne	1a6d8 <__assert_fail@plt+0x9180>
   1a710:	mov	r0, #0
   1a714:	pop	{r4, r5, r6, r7, r8, pc}
   1a718:	bl	113fc <__ctype_b_loc@plt>
   1a71c:	mov	ip, #1
   1a720:	b	1a730 <__assert_fail@plt+0x91d8>
   1a724:	add	r4, r4, #1
   1a728:	cmp	r4, #256	; 0x100
   1a72c:	beq	1a778 <__assert_fail@plt+0x9220>
   1a730:	ldr	r2, [r0]
   1a734:	lsl	r3, r4, #1
   1a738:	ldrh	r3, [r2, r3]
   1a73c:	tst	r3, #4
   1a740:	beq	1a724 <__assert_fail@plt+0x91cc>
   1a744:	add	r3, r4, #31
   1a748:	cmp	r4, #0
   1a74c:	movge	r3, r4
   1a750:	asr	r3, r3, #5
   1a754:	asr	r2, r4, #31
   1a758:	lsr	r1, r2, #27
   1a75c:	add	r2, r4, r1
   1a760:	and	r2, r2, #31
   1a764:	sub	r2, r2, r1
   1a768:	ldr	r1, [r5, r3, lsl #2]
   1a76c:	orr	r2, r1, ip, lsl r2
   1a770:	str	r2, [r5, r3, lsl #2]
   1a774:	b	1a724 <__assert_fail@plt+0x91cc>
   1a778:	mov	r0, #0
   1a77c:	pop	{r4, r5, r6, r7, r8, pc}
   1a780:	ldr	r1, [pc, #264]	; 1a890 <__assert_fail@plt+0x9338>
   1a784:	ldr	r0, [sp, #24]
   1a788:	bl	111f8 <strcmp@plt>
   1a78c:	subs	r4, r0, #0
   1a790:	bne	1a85c <__assert_fail@plt+0x9304>
   1a794:	cmp	r6, #0
   1a798:	beq	1a7ec <__assert_fail@plt+0x9294>
   1a79c:	bl	113fc <__ctype_b_loc@plt>
   1a7a0:	mov	r2, r6
   1a7a4:	mov	r3, #0
   1a7a8:	mov	r4, #1
   1a7ac:	ldr	r1, [r0]
   1a7b0:	ldrh	r1, [r1, r3]
   1a7b4:	tst	r1, #4096	; 0x1000
   1a7b8:	beq	1a7d4 <__assert_fail@plt+0x927c>
   1a7bc:	ldrb	r1, [r2]
   1a7c0:	asr	lr, r1, #5
   1a7c4:	and	r1, r1, #31
   1a7c8:	ldr	ip, [r5, lr, lsl #2]
   1a7cc:	orr	r1, ip, r4, lsl r1
   1a7d0:	str	r1, [r5, lr, lsl #2]
   1a7d4:	add	r3, r3, #2
   1a7d8:	add	r2, r2, #1
   1a7dc:	cmp	r3, #512	; 0x200
   1a7e0:	bne	1a7ac <__assert_fail@plt+0x9254>
   1a7e4:	mov	r0, #0
   1a7e8:	pop	{r4, r5, r6, r7, r8, pc}
   1a7ec:	bl	113fc <__ctype_b_loc@plt>
   1a7f0:	mov	ip, #1
   1a7f4:	b	1a804 <__assert_fail@plt+0x92ac>
   1a7f8:	add	r4, r4, #1
   1a7fc:	cmp	r4, #256	; 0x100
   1a800:	beq	1a84c <__assert_fail@plt+0x92f4>
   1a804:	ldr	r2, [r0]
   1a808:	lsl	r3, r4, #1
   1a80c:	ldrh	r3, [r2, r3]
   1a810:	tst	r3, #4096	; 0x1000
   1a814:	beq	1a7f8 <__assert_fail@plt+0x92a0>
   1a818:	add	r3, r4, #31
   1a81c:	cmp	r4, #0
   1a820:	movge	r3, r4
   1a824:	asr	r3, r3, #5
   1a828:	asr	r2, r4, #31
   1a82c:	lsr	r1, r2, #27
   1a830:	add	r2, r4, r1
   1a834:	and	r2, r2, #31
   1a838:	sub	r2, r2, r1
   1a83c:	ldr	r1, [r5, r3, lsl #2]
   1a840:	orr	r2, r1, ip, lsl r2
   1a844:	str	r2, [r5, r3, lsl #2]
   1a848:	b	1a7f8 <__assert_fail@plt+0x92a0>
   1a84c:	mov	r0, #0
   1a850:	pop	{r4, r5, r6, r7, r8, pc}
   1a854:	mov	r0, #12
   1a858:	pop	{r4, r5, r6, r7, r8, pc}
   1a85c:	mov	r0, #4
   1a860:	pop	{r4, r5, r6, r7, r8, pc}
   1a864:	andeq	r6, r2, r8, lsr r1
   1a868:	andeq	r6, r2, r0, asr #2
   1a86c:	andeq	r6, r2, r0, lsr r1
   1a870:	andeq	r6, r2, r8, asr #2
   1a874:	andeq	r6, r2, r0, asr r1
   1a878:	andeq	r6, r2, r8, asr r1
   1a87c:	andeq	r6, r2, r0, ror #2
   1a880:	andeq	r6, r2, r8, ror #2
   1a884:	andeq	r6, r2, r0, ror r1
   1a888:	andeq	r6, r2, r8, ror r1
   1a88c:	andeq	r6, r2, r0, lsl #3
   1a890:	andeq	r6, r2, r8, lsl #3
   1a894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a898:	sub	sp, sp, #24
   1a89c:	mov	r6, r0
   1a8a0:	mov	r9, r1
   1a8a4:	mov	sl, r2
   1a8a8:	mov	r5, r3
   1a8ac:	ldrb	r8, [sp, #56]	; 0x38
   1a8b0:	mov	r3, #0
   1a8b4:	str	r3, [sp, #20]
   1a8b8:	mov	r1, #1
   1a8bc:	mov	r0, #32
   1a8c0:	bl	24478 <__assert_fail@plt+0x12f20>
   1a8c4:	subs	r4, r0, #0
   1a8c8:	beq	1aa30 <__assert_fail@plt+0x94d8>
   1a8cc:	mov	r1, #1
   1a8d0:	mov	r0, #40	; 0x28
   1a8d4:	bl	24478 <__assert_fail@plt+0x12f20>
   1a8d8:	subs	r7, r0, #0
   1a8dc:	beq	1aa44 <__assert_fail@plt+0x94ec>
   1a8e0:	ldrb	r2, [r7, #16]
   1a8e4:	and	r3, r8, #1
   1a8e8:	bic	r2, r2, #1
   1a8ec:	orr	r3, r3, r2
   1a8f0:	strb	r3, [r7, #16]
   1a8f4:	mov	r3, #0
   1a8f8:	str	r3, [sp, #4]
   1a8fc:	str	sl, [sp]
   1a900:	add	r3, sp, #20
   1a904:	mov	r2, r7
   1a908:	mov	r1, r4
   1a90c:	mov	r0, r9
   1a910:	bl	19d60 <__assert_fail@plt+0x8808>
   1a914:	subs	r9, r0, #0
   1a918:	bne	1aa60 <__assert_fail@plt+0x9508>
   1a91c:	ldrb	r3, [r5]
   1a920:	cmp	r3, #0
   1a924:	movne	r0, #1
   1a928:	beq	1a94c <__assert_fail@plt+0x93f4>
   1a92c:	lsr	r1, r3, #5
   1a930:	and	r3, r3, #31
   1a934:	ldr	r2, [r4, r1, lsl #2]
   1a938:	orr	r3, r2, r0, lsl r3
   1a93c:	str	r3, [r4, r1, lsl #2]
   1a940:	ldrb	r3, [r5, #1]!
   1a944:	cmp	r3, #0
   1a948:	bne	1a92c <__assert_fail@plt+0x93d4>
   1a94c:	cmp	r8, #0
   1a950:	beq	1a970 <__assert_fail@plt+0x9418>
   1a954:	sub	r3, r4, #4
   1a958:	add	r1, r4, #28
   1a95c:	ldr	r2, [r3, #4]
   1a960:	mvn	r2, r2
   1a964:	str	r2, [r3, #4]!
   1a968:	cmp	r3, r1
   1a96c:	bne	1a95c <__assert_fail@plt+0x9404>
   1a970:	ldr	r3, [r6, #92]	; 0x5c
   1a974:	cmp	r3, #1
   1a978:	ble	1a9a4 <__assert_fail@plt+0x944c>
   1a97c:	sub	r3, r4, #4
   1a980:	ldr	r1, [r6, #60]	; 0x3c
   1a984:	sub	r1, r1, #4
   1a988:	add	ip, r4, #28
   1a98c:	ldr	r2, [r3, #4]
   1a990:	ldr	r0, [r1, #4]!
   1a994:	and	r2, r2, r0
   1a998:	str	r2, [r3, #4]!
   1a99c:	cmp	r3, ip
   1a9a0:	bne	1a98c <__assert_fail@plt+0x9434>
   1a9a4:	mov	r1, #0
   1a9a8:	str	r1, [sp, #16]
   1a9ac:	str	r4, [sp, #12]
   1a9b0:	mov	r3, #3
   1a9b4:	strb	r3, [sp, #16]
   1a9b8:	add	r3, sp, #12
   1a9bc:	mov	r2, r1
   1a9c0:	mov	r0, r6
   1a9c4:	bl	165f8 <__assert_fail@plt+0x50a0>
   1a9c8:	subs	r5, r0, #0
   1a9cc:	beq	1aa8c <__assert_fail@plt+0x9534>
   1a9d0:	ldr	r3, [r6, #92]	; 0x5c
   1a9d4:	cmp	r3, #1
   1a9d8:	ble	1aa80 <__assert_fail@plt+0x9528>
   1a9dc:	mov	r3, #6
   1a9e0:	strb	r3, [sp, #16]
   1a9e4:	add	r3, sp, #24
   1a9e8:	str	r7, [r3, #-12]!
   1a9ec:	ldrb	r2, [r6, #88]	; 0x58
   1a9f0:	orr	r2, r2, #2
   1a9f4:	strb	r2, [r6, #88]	; 0x58
   1a9f8:	mov	r2, #0
   1a9fc:	mov	r1, r2
   1aa00:	mov	r0, r6
   1aa04:	bl	165f8 <__assert_fail@plt+0x50a0>
   1aa08:	subs	r2, r0, #0
   1aa0c:	beq	1aa8c <__assert_fail@plt+0x9534>
   1aa10:	mov	r3, #10
   1aa14:	mov	r1, r5
   1aa18:	mov	r0, r6
   1aa1c:	bl	1676c <__assert_fail@plt+0x5214>
   1aa20:	mov	r5, r0
   1aa24:	mov	r0, r5
   1aa28:	add	sp, sp, #24
   1aa2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa30:	mov	r3, #12
   1aa34:	ldr	r2, [sp, #60]	; 0x3c
   1aa38:	str	r3, [r2]
   1aa3c:	mov	r5, #0
   1aa40:	b	1aa24 <__assert_fail@plt+0x94cc>
   1aa44:	mov	r0, r4
   1aa48:	bl	13b40 <__assert_fail@plt+0x25e8>
   1aa4c:	mov	r3, #12
   1aa50:	ldr	r2, [sp, #60]	; 0x3c
   1aa54:	str	r3, [r2]
   1aa58:	mov	r5, #0
   1aa5c:	b	1aa24 <__assert_fail@plt+0x94cc>
   1aa60:	mov	r0, r4
   1aa64:	bl	13b40 <__assert_fail@plt+0x25e8>
   1aa68:	mov	r0, r7
   1aa6c:	bl	181b4 <__assert_fail@plt+0x6c5c>
   1aa70:	ldr	r3, [sp, #60]	; 0x3c
   1aa74:	str	r9, [r3]
   1aa78:	mov	r5, #0
   1aa7c:	b	1aa24 <__assert_fail@plt+0x94cc>
   1aa80:	mov	r0, r7
   1aa84:	bl	181b4 <__assert_fail@plt+0x6c5c>
   1aa88:	b	1aa24 <__assert_fail@plt+0x94cc>
   1aa8c:	mov	r0, r4
   1aa90:	bl	13b40 <__assert_fail@plt+0x25e8>
   1aa94:	mov	r0, r7
   1aa98:	bl	181b4 <__assert_fail@plt+0x6c5c>
   1aa9c:	mov	r3, #12
   1aaa0:	ldr	r2, [sp, #60]	; 0x3c
   1aaa4:	str	r3, [r2]
   1aaa8:	mov	r5, #0
   1aaac:	b	1aa24 <__assert_fail@plt+0x94cc>
   1aab0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aab4:	ldr	r9, [r0]
   1aab8:	add	ip, r9, r1, lsl #3
   1aabc:	ldrb	r8, [ip, #4]
   1aac0:	cmp	r8, #7
   1aac4:	beq	1ab18 <__assert_fail@plt+0x95c0>
   1aac8:	mov	r4, r3
   1aacc:	mov	r5, r2
   1aad0:	mov	r7, r1
   1aad4:	mov	r6, r0
   1aad8:	mov	r1, r3
   1aadc:	mov	r0, r2
   1aae0:	bl	15878 <__assert_fail@plt+0x4320>
   1aae4:	mov	sl, r0
   1aae8:	cmp	r8, #5
   1aaec:	beq	1ac30 <__assert_fail@plt+0x96d8>
   1aaf0:	cmp	r8, #6
   1aaf4:	movne	r8, #0
   1aaf8:	moveq	r8, #1
   1aafc:	cmp	r0, #1
   1ab00:	movle	r8, #0
   1ab04:	cmp	r8, #0
   1ab08:	moveq	sl, #0
   1ab0c:	bne	1ac78 <__assert_fail@plt+0x9720>
   1ab10:	mov	r0, sl
   1ab14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab18:	ldr	r0, [r2, #4]
   1ab1c:	ldrb	r1, [r0, r3]
   1ab20:	cmp	r1, #193	; 0xc1
   1ab24:	movls	sl, #0
   1ab28:	bls	1ab10 <__assert_fail@plt+0x95b8>
   1ab2c:	ldr	ip, [r2, #48]	; 0x30
   1ab30:	add	r2, r3, #2
   1ab34:	cmp	r2, ip
   1ab38:	movgt	sl, #0
   1ab3c:	bgt	1ab10 <__assert_fail@plt+0x95b8>
   1ab40:	add	lr, r3, #1
   1ab44:	add	r2, r0, lr
   1ab48:	ldrb	lr, [r0, lr]
   1ab4c:	cmp	r1, #223	; 0xdf
   1ab50:	bhi	1ab68 <__assert_fail@plt+0x9610>
   1ab54:	eor	lr, lr, #128	; 0x80
   1ab58:	cmp	lr, #63	; 0x3f
   1ab5c:	movls	sl, #2
   1ab60:	movhi	sl, #0
   1ab64:	b	1ab10 <__assert_fail@plt+0x95b8>
   1ab68:	cmp	r1, #239	; 0xef
   1ab6c:	bhi	1abcc <__assert_fail@plt+0x9674>
   1ab70:	cmp	lr, #159	; 0x9f
   1ab74:	cmpls	r1, #224	; 0xe0
   1ab78:	movne	sl, #3
   1ab7c:	beq	1adb0 <__assert_fail@plt+0x9858>
   1ab80:	add	r1, sl, r3
   1ab84:	cmp	ip, r1
   1ab88:	blt	1adc0 <__assert_fail@plt+0x9868>
   1ab8c:	add	r3, r0, r3
   1ab90:	ldrb	r3, [r3, #1]
   1ab94:	eor	r3, r3, #128	; 0x80
   1ab98:	cmp	r3, #63	; 0x3f
   1ab9c:	bhi	1adb8 <__assert_fail@plt+0x9860>
   1aba0:	mov	r1, r2
   1aba4:	mov	r2, #1
   1aba8:	add	r2, r2, #1
   1abac:	cmp	sl, r2
   1abb0:	ble	1ab10 <__assert_fail@plt+0x95b8>
   1abb4:	ldrb	r3, [r1, #1]!
   1abb8:	eor	r3, r3, #128	; 0x80
   1abbc:	cmp	r3, #63	; 0x3f
   1abc0:	bls	1aba8 <__assert_fail@plt+0x9650>
   1abc4:	mov	sl, #0
   1abc8:	b	1ab10 <__assert_fail@plt+0x95b8>
   1abcc:	cmp	r1, #247	; 0xf7
   1abd0:	bhi	1abec <__assert_fail@plt+0x9694>
   1abd4:	cmp	lr, #143	; 0x8f
   1abd8:	cmpls	r1, #240	; 0xf0
   1abdc:	movne	sl, #4
   1abe0:	bne	1ab80 <__assert_fail@plt+0x9628>
   1abe4:	mov	sl, #0
   1abe8:	b	1ab10 <__assert_fail@plt+0x95b8>
   1abec:	cmp	r1, #251	; 0xfb
   1abf0:	bhi	1ac0c <__assert_fail@plt+0x96b4>
   1abf4:	cmp	lr, #135	; 0x87
   1abf8:	cmpls	r1, #248	; 0xf8
   1abfc:	movne	sl, #5
   1ac00:	bne	1ab80 <__assert_fail@plt+0x9628>
   1ac04:	mov	sl, #0
   1ac08:	b	1ab10 <__assert_fail@plt+0x95b8>
   1ac0c:	cmp	r1, #253	; 0xfd
   1ac10:	movhi	sl, #0
   1ac14:	bhi	1ab10 <__assert_fail@plt+0x95b8>
   1ac18:	cmp	lr, #131	; 0x83
   1ac1c:	cmpls	r1, #252	; 0xfc
   1ac20:	movne	sl, #6
   1ac24:	bne	1ab80 <__assert_fail@plt+0x9628>
   1ac28:	mov	sl, #0
   1ac2c:	b	1ab10 <__assert_fail@plt+0x95b8>
   1ac30:	cmp	r0, #1
   1ac34:	movle	sl, #0
   1ac38:	ble	1ab10 <__assert_fail@plt+0x95b8>
   1ac3c:	ldr	r3, [r6, #128]	; 0x80
   1ac40:	tst	r3, #64	; 0x40
   1ac44:	bne	1ac5c <__assert_fail@plt+0x9704>
   1ac48:	ldr	r2, [r5, #4]
   1ac4c:	ldrb	r2, [r2, r4]
   1ac50:	cmp	r2, #10
   1ac54:	moveq	sl, #0
   1ac58:	beq	1ab10 <__assert_fail@plt+0x95b8>
   1ac5c:	tst	r3, #128	; 0x80
   1ac60:	beq	1ab10 <__assert_fail@plt+0x95b8>
   1ac64:	ldr	r3, [r5, #4]
   1ac68:	ldrb	r3, [r3, r4]
   1ac6c:	cmp	r3, #0
   1ac70:	moveq	sl, #0
   1ac74:	b	1ab10 <__assert_fail@plt+0x95b8>
   1ac78:	ldr	r6, [r9, r7, lsl #3]
   1ac7c:	ldr	r3, [r6, #32]
   1ac80:	cmp	r3, #0
   1ac84:	bne	1acc4 <__assert_fail@plt+0x976c>
   1ac88:	ldr	r3, [r6, #36]	; 0x24
   1ac8c:	cmp	r3, #0
   1ac90:	bne	1acc4 <__assert_fail@plt+0x976c>
   1ac94:	ldr	r3, [r6, #20]
   1ac98:	cmp	r3, #0
   1ac9c:	moveq	r4, #0
   1aca0:	beq	1ad68 <__assert_fail@plt+0x9810>
   1aca4:	mov	r1, r4
   1aca8:	mov	r0, r5
   1acac:	bl	158ec <__assert_fail@plt+0x4394>
   1acb0:	mov	r4, r0
   1acb4:	ldr	r0, [r6, #20]
   1acb8:	cmp	r0, #0
   1acbc:	bgt	1ace0 <__assert_fail@plt+0x9788>
   1acc0:	b	1ad68 <__assert_fail@plt+0x9810>
   1acc4:	mov	r1, r4
   1acc8:	mov	r0, r5
   1accc:	bl	158ec <__assert_fail@plt+0x4394>
   1acd0:	mov	r4, r0
   1acd4:	ldr	r0, [r6, #20]
   1acd8:	cmp	r0, #0
   1acdc:	ble	1ad30 <__assert_fail@plt+0x97d8>
   1ace0:	ldr	r2, [r6]
   1ace4:	ldr	r3, [r2]
   1ace8:	cmp	r4, r3
   1acec:	beq	1ad0c <__assert_fail@plt+0x97b4>
   1acf0:	mov	r3, #0
   1acf4:	add	r3, r3, #1
   1acf8:	cmp	r0, r3
   1acfc:	beq	1ad30 <__assert_fail@plt+0x97d8>
   1ad00:	ldr	r1, [r2, #4]!
   1ad04:	cmp	r4, r1
   1ad08:	bne	1acf4 <__assert_fail@plt+0x979c>
   1ad0c:	ldrb	r3, [r6, #16]
   1ad10:	tst	r3, #1
   1ad14:	beq	1ab10 <__assert_fail@plt+0x95b8>
   1ad18:	cmp	sl, #0
   1ad1c:	movgt	sl, #0
   1ad20:	bgt	1ab10 <__assert_fail@plt+0x95b8>
   1ad24:	cmp	sl, #1
   1ad28:	movlt	sl, #1
   1ad2c:	b	1ab10 <__assert_fail@plt+0x95b8>
   1ad30:	ldr	r3, [r6, #36]	; 0x24
   1ad34:	cmp	r3, #0
   1ad38:	ble	1ad68 <__assert_fail@plt+0x9810>
   1ad3c:	mov	r5, #0
   1ad40:	ldr	r3, [r6, #12]
   1ad44:	ldr	r1, [r3, r5, lsl #2]
   1ad48:	mov	r0, r4
   1ad4c:	bl	111ec <iswctype@plt>
   1ad50:	cmp	r0, #0
   1ad54:	bne	1ad0c <__assert_fail@plt+0x97b4>
   1ad58:	add	r5, r5, #1
   1ad5c:	ldr	r3, [r6, #36]	; 0x24
   1ad60:	cmp	r3, r5
   1ad64:	bgt	1ad40 <__assert_fail@plt+0x97e8>
   1ad68:	ldr	r0, [r6, #32]
   1ad6c:	cmp	r0, #0
   1ad70:	ble	1adc8 <__assert_fail@plt+0x9870>
   1ad74:	ldr	r2, [r6, #4]
   1ad78:	sub	r2, r2, #4
   1ad7c:	mov	r3, #0
   1ad80:	b	1ad90 <__assert_fail@plt+0x9838>
   1ad84:	add	r3, r3, #1
   1ad88:	cmp	r0, r3
   1ad8c:	beq	1adc8 <__assert_fail@plt+0x9870>
   1ad90:	ldr	r1, [r2, #4]!
   1ad94:	cmp	r4, r1
   1ad98:	bcc	1ad84 <__assert_fail@plt+0x982c>
   1ad9c:	ldr	r1, [r6, #8]
   1ada0:	ldr	r1, [r1, r3, lsl #2]
   1ada4:	cmp	r4, r1
   1ada8:	bhi	1ad84 <__assert_fail@plt+0x982c>
   1adac:	b	1ad0c <__assert_fail@plt+0x97b4>
   1adb0:	mov	sl, #0
   1adb4:	b	1ab10 <__assert_fail@plt+0x95b8>
   1adb8:	mov	sl, #0
   1adbc:	b	1ab10 <__assert_fail@plt+0x95b8>
   1adc0:	mov	sl, #0
   1adc4:	b	1ab10 <__assert_fail@plt+0x95b8>
   1adc8:	ldrb	r3, [r6, #16]
   1adcc:	tst	r3, #1
   1add0:	bne	1ad24 <__assert_fail@plt+0x97cc>
   1add4:	mov	sl, #0
   1add8:	b	1ab10 <__assert_fail@plt+0x95b8>
   1addc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade0:	sub	sp, sp, #28
   1ade4:	str	r3, [sp, #4]
   1ade8:	add	r3, r1, r1, lsl #1
   1adec:	ldr	r6, [r0, #28]
   1adf0:	add	r6, r6, r3, lsl #2
   1adf4:	mov	r3, #0
   1adf8:	str	r3, [sp, #12]
   1adfc:	str	r3, [sp, #16]
   1ae00:	str	r3, [sp, #20]
   1ae04:	ldr	r3, [r6, #4]
   1ae08:	cmp	r3, #0
   1ae0c:	ble	1ae88 <__assert_fail@plt+0x9930>
   1ae10:	mov	r7, r0
   1ae14:	mov	r8, r1
   1ae18:	mov	fp, r2
   1ae1c:	mov	r5, #0
   1ae20:	b	1aef4 <__assert_fail@plt+0x999c>
   1ae24:	ldr	r0, [sp, #20]
   1ae28:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ae2c:	b	1ae94 <__assert_fail@plt+0x993c>
   1ae30:	cmp	r3, #0
   1ae34:	ble	1ae88 <__assert_fail@plt+0x9930>
   1ae38:	mov	r4, #0
   1ae3c:	b	1ae50 <__assert_fail@plt+0x98f8>
   1ae40:	add	r4, r4, #1
   1ae44:	ldr	r3, [r6, #4]
   1ae48:	cmp	r3, r4
   1ae4c:	ble	1ae88 <__assert_fail@plt+0x9930>
   1ae50:	ldr	r3, [r6, #8]
   1ae54:	ldr	r5, [r3, r4, lsl #2]
   1ae58:	mov	r1, r5
   1ae5c:	add	r0, sp, #12
   1ae60:	bl	159d0 <__assert_fail@plt+0x4478>
   1ae64:	cmp	r0, #0
   1ae68:	bne	1ae40 <__assert_fail@plt+0x98e8>
   1ae6c:	mov	r1, r5
   1ae70:	mov	r0, fp
   1ae74:	bl	159d0 <__assert_fail@plt+0x4478>
   1ae78:	sub	r1, r0, #1
   1ae7c:	mov	r0, fp
   1ae80:	bl	15a68 <__assert_fail@plt+0x4510>
   1ae84:	b	1ae40 <__assert_fail@plt+0x98e8>
   1ae88:	ldr	r0, [sp, #20]
   1ae8c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ae90:	mov	r4, #0
   1ae94:	mov	r0, r4
   1ae98:	add	sp, sp, #28
   1ae9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aea0:	mov	r1, r9
   1aea4:	mov	r0, r6
   1aea8:	bl	159d0 <__assert_fail@plt+0x4478>
   1aeac:	cmp	r0, #0
   1aeb0:	bne	1aee4 <__assert_fail@plt+0x998c>
   1aeb4:	mov	r1, r9
   1aeb8:	mov	r0, fp
   1aebc:	bl	159d0 <__assert_fail@plt+0x4478>
   1aec0:	cmp	r0, #0
   1aec4:	beq	1aee4 <__assert_fail@plt+0x998c>
   1aec8:	ldr	r2, [r7, #28]
   1aecc:	add	r2, r2, r4
   1aed0:	ldr	r1, [sp, #4]
   1aed4:	add	r0, sp, #12
   1aed8:	bl	16c4c <__assert_fail@plt+0x56f4>
   1aedc:	subs	r4, r0, #0
   1aee0:	bne	1ae24 <__assert_fail@plt+0x98cc>
   1aee4:	add	r5, r5, #1
   1aee8:	ldr	r3, [r6, #4]
   1aeec:	cmp	r3, r5
   1aef0:	ble	1ae30 <__assert_fail@plt+0x98d8>
   1aef4:	ldr	r3, [r6, #8]
   1aef8:	ldr	r4, [r3, r5, lsl #2]
   1aefc:	cmp	r8, r4
   1af00:	beq	1aee4 <__assert_fail@plt+0x998c>
   1af04:	ldr	r3, [r7]
   1af08:	add	r3, r3, r4, lsl #3
   1af0c:	ldrb	r3, [r3, #4]
   1af10:	tst	r3, #8
   1af14:	beq	1aee4 <__assert_fail@plt+0x998c>
   1af18:	add	r4, r4, r4, lsl #1
   1af1c:	lsl	r4, r4, #2
   1af20:	ldr	r3, [r7, #20]
   1af24:	add	r3, r3, r4
   1af28:	ldr	r2, [r3, #8]
   1af2c:	ldr	r9, [r2]
   1af30:	ldr	r3, [r3, #4]
   1af34:	cmp	r3, #1
   1af38:	ble	1aea0 <__assert_fail@plt+0x9948>
   1af3c:	ldr	sl, [r2, #4]
   1af40:	mov	r1, r9
   1af44:	mov	r0, r6
   1af48:	bl	159d0 <__assert_fail@plt+0x4478>
   1af4c:	cmp	r0, #0
   1af50:	bne	1af68 <__assert_fail@plt+0x9a10>
   1af54:	mov	r1, r9
   1af58:	mov	r0, fp
   1af5c:	bl	159d0 <__assert_fail@plt+0x4478>
   1af60:	cmp	r0, #0
   1af64:	bne	1aec8 <__assert_fail@plt+0x9970>
   1af68:	cmp	sl, #0
   1af6c:	ble	1aee4 <__assert_fail@plt+0x998c>
   1af70:	mov	r1, sl
   1af74:	mov	r0, r6
   1af78:	bl	159d0 <__assert_fail@plt+0x4478>
   1af7c:	cmp	r0, #0
   1af80:	bne	1aee4 <__assert_fail@plt+0x998c>
   1af84:	mov	r1, sl
   1af88:	mov	r0, fp
   1af8c:	bl	159d0 <__assert_fail@plt+0x4478>
   1af90:	cmp	r0, #0
   1af94:	beq	1aee4 <__assert_fail@plt+0x998c>
   1af98:	b	1aec8 <__assert_fail@plt+0x9970>
   1af9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afa0:	sub	sp, sp, #36	; 0x24
   1afa4:	mov	r4, r0
   1afa8:	mov	r6, r1
   1afac:	mov	r7, r2
   1afb0:	ldr	r5, [r0, #24]
   1afb4:	cmp	r5, r1
   1afb8:	suble	r5, r1, r5
   1afbc:	ble	1b020 <__assert_fail@plt+0x9ac8>
   1afc0:	ldr	r3, [r0, #80]	; 0x50
   1afc4:	cmp	r3, #1
   1afc8:	movgt	r3, #0
   1afcc:	strgt	r3, [r0, #16]
   1afd0:	strgt	r3, [r0, #20]
   1afd4:	ldr	r3, [r0, #44]	; 0x2c
   1afd8:	str	r3, [r0, #48]	; 0x30
   1afdc:	ldr	r3, [r0, #52]	; 0x34
   1afe0:	str	r3, [r0, #56]	; 0x38
   1afe4:	mov	r3, #0
   1afe8:	str	r3, [r0, #28]
   1afec:	str	r3, [r0, #24]
   1aff0:	str	r3, [r0, #32]
   1aff4:	strb	r3, [r0, #76]	; 0x4c
   1aff8:	and	r3, r2, #1
   1affc:	cmp	r3, #0
   1b000:	movne	r3, #4
   1b004:	moveq	r3, #6
   1b008:	str	r3, [r0, #60]	; 0x3c
   1b00c:	ldrb	r3, [r0, #75]	; 0x4b
   1b010:	cmp	r3, #0
   1b014:	ldreq	r3, [r0]
   1b018:	streq	r3, [r0, #4]
   1b01c:	mov	r5, r1
   1b020:	cmp	r5, #0
   1b024:	beq	1b0b0 <__assert_fail@plt+0x9b58>
   1b028:	ldr	r3, [r4, #32]
   1b02c:	cmp	r5, r3
   1b030:	bge	1b300 <__assert_fail@plt+0x9da8>
   1b034:	ldrb	r3, [r4, #76]	; 0x4c
   1b038:	cmp	r3, #0
   1b03c:	bne	1b0f8 <__assert_fail@plt+0x9ba0>
   1b040:	mov	r2, r7
   1b044:	sub	r1, r5, #1
   1b048:	mov	r0, r4
   1b04c:	bl	1967c <__assert_fail@plt+0x8124>
   1b050:	str	r0, [r4, #60]	; 0x3c
   1b054:	ldr	r3, [r4, #80]	; 0x50
   1b058:	cmp	r3, #1
   1b05c:	ble	1b078 <__assert_fail@plt+0x9b20>
   1b060:	ldr	r0, [r4, #8]
   1b064:	ldr	r2, [r4, #28]
   1b068:	sub	r2, r2, r5
   1b06c:	lsl	r2, r2, #2
   1b070:	add	r1, r0, r5, lsl #2
   1b074:	bl	11234 <memmove@plt>
   1b078:	ldrb	r3, [r4, #75]	; 0x4b
   1b07c:	cmp	r3, #0
   1b080:	bne	1b2e8 <__assert_fail@plt+0x9d90>
   1b084:	ldr	r3, [r4, #28]
   1b088:	sub	r3, r3, r5
   1b08c:	str	r3, [r4, #28]
   1b090:	ldr	r3, [r4, #32]
   1b094:	sub	r3, r3, r5
   1b098:	str	r3, [r4, #32]
   1b09c:	ldrb	r3, [r4, #75]	; 0x4b
   1b0a0:	cmp	r3, #0
   1b0a4:	ldreq	r3, [r4, #4]
   1b0a8:	addeq	r3, r3, r5
   1b0ac:	streq	r3, [r4, #4]
   1b0b0:	str	r6, [r4, #24]
   1b0b4:	ldr	r3, [r4, #48]	; 0x30
   1b0b8:	sub	r3, r3, r5
   1b0bc:	str	r3, [r4, #48]	; 0x30
   1b0c0:	ldr	r2, [r4, #56]	; 0x38
   1b0c4:	sub	r5, r2, r5
   1b0c8:	str	r5, [r4, #56]	; 0x38
   1b0cc:	ldr	r2, [r4, #80]	; 0x50
   1b0d0:	cmp	r2, #1
   1b0d4:	ble	1b664 <__assert_fail@plt+0xa10c>
   1b0d8:	ldrb	r3, [r4, #72]	; 0x48
   1b0dc:	cmp	r3, #0
   1b0e0:	beq	1b64c <__assert_fail@plt+0xa0f4>
   1b0e4:	mov	r0, r4
   1b0e8:	bl	17014 <__assert_fail@plt+0x5abc>
   1b0ec:	cmp	r0, #0
   1b0f0:	beq	1b654 <__assert_fail@plt+0xa0fc>
   1b0f4:	b	1b65c <__assert_fail@plt+0xa104>
   1b0f8:	ldr	sl, [r4, #28]
   1b0fc:	ldr	r9, [r4, #12]
   1b100:	mov	r2, sl
   1b104:	mov	r1, #0
   1b108:	b	1b118 <__assert_fail@plt+0x9bc0>
   1b10c:	mov	r2, r8
   1b110:	cmp	r1, r2
   1b114:	bge	1b13c <__assert_fail@plt+0x9be4>
   1b118:	add	r3, r1, r2
   1b11c:	add	r3, r3, r3, lsr #31
   1b120:	asr	r8, r3, #1
   1b124:	ldr	r3, [r9, r8, lsl #2]
   1b128:	cmp	r5, r3
   1b12c:	blt	1b10c <__assert_fail@plt+0x9bb4>
   1b130:	ble	1b144 <__assert_fail@plt+0x9bec>
   1b134:	add	r1, r8, #1
   1b138:	b	1b110 <__assert_fail@plt+0x9bb8>
   1b13c:	cmp	r5, r3
   1b140:	addgt	r8, r8, #1
   1b144:	mov	r2, r7
   1b148:	sub	r1, r8, #1
   1b14c:	mov	r0, r4
   1b150:	bl	1967c <__assert_fail@plt+0x8124>
   1b154:	str	r0, [r4, #60]	; 0x3c
   1b158:	cmp	r5, sl
   1b15c:	movge	r3, #0
   1b160:	movlt	r3, #1
   1b164:	cmp	r5, r8
   1b168:	movne	r3, #0
   1b16c:	cmp	r3, #0
   1b170:	bne	1b250 <__assert_fail@plt+0x9cf8>
   1b174:	ldr	r3, [r4, #44]	; 0x2c
   1b178:	sub	r3, r3, r6
   1b17c:	add	r3, r3, r5
   1b180:	str	r3, [r4, #48]	; 0x30
   1b184:	ldr	r3, [r4, #52]	; 0x34
   1b188:	sub	r3, r3, r6
   1b18c:	add	r3, r3, r5
   1b190:	str	r3, [r4, #56]	; 0x38
   1b194:	mov	r3, #0
   1b198:	strb	r3, [r4, #76]	; 0x4c
   1b19c:	cmp	r8, r3
   1b1a0:	ble	1b1cc <__assert_fail@plt+0x9c74>
   1b1a4:	sub	r2, r8, #-1073741823	; 0xc0000001
   1b1a8:	add	r3, r9, r2, lsl #2
   1b1ac:	ldr	r2, [r9, r2, lsl #2]
   1b1b0:	cmp	r5, r2
   1b1b4:	bne	1b1cc <__assert_fail@plt+0x9c74>
   1b1b8:	subs	r8, r8, #1
   1b1bc:	beq	1b1cc <__assert_fail@plt+0x9c74>
   1b1c0:	ldr	r2, [r3, #-4]!
   1b1c4:	cmp	r5, r2
   1b1c8:	beq	1b1b8 <__assert_fail@plt+0x9c60>
   1b1cc:	cmp	sl, r8
   1b1d0:	ble	1b2d4 <__assert_fail@plt+0x9d7c>
   1b1d4:	ldr	r2, [r4, #8]
   1b1d8:	add	r3, r2, r8, lsl #2
   1b1dc:	ldr	r2, [r2, r8, lsl #2]
   1b1e0:	cmn	r2, #1
   1b1e4:	bne	1b200 <__assert_fail@plt+0x9ca8>
   1b1e8:	add	r8, r8, #1
   1b1ec:	cmp	sl, r8
   1b1f0:	beq	1b2dc <__assert_fail@plt+0x9d84>
   1b1f4:	ldr	r2, [r3, #4]!
   1b1f8:	cmn	r2, #1
   1b1fc:	beq	1b1e8 <__assert_fail@plt+0x9c90>
   1b200:	ldr	r2, [r9, r8, lsl #2]
   1b204:	sub	r2, r2, r5
   1b208:	str	r2, [r4, #28]
   1b20c:	cmp	r2, #0
   1b210:	beq	1b244 <__assert_fail@plt+0x9cec>
   1b214:	ble	1b238 <__assert_fail@plt+0x9ce0>
   1b218:	mov	r3, #0
   1b21c:	mvn	r1, #0
   1b220:	ldr	r2, [r4, #8]
   1b224:	str	r1, [r2, r3, lsl #2]
   1b228:	add	r3, r3, #1
   1b22c:	ldr	r2, [r4, #28]
   1b230:	cmp	r2, r3
   1b234:	bgt	1b220 <__assert_fail@plt+0x9cc8>
   1b238:	mov	r1, #255	; 0xff
   1b23c:	ldr	r0, [r4, #4]
   1b240:	bl	1145c <memset@plt>
   1b244:	ldr	r3, [r4, #28]
   1b248:	str	r3, [r4, #32]
   1b24c:	b	1b09c <__assert_fail@plt+0x9b44>
   1b250:	ldr	r3, [r9, r8, lsl #2]
   1b254:	cmp	r5, r3
   1b258:	bne	1b174 <__assert_fail@plt+0x9c1c>
   1b25c:	ldr	r0, [r4, #8]
   1b260:	lsl	r7, r5, #2
   1b264:	sub	r2, sl, r5
   1b268:	lsl	r2, r2, #2
   1b26c:	add	r1, r0, r7
   1b270:	bl	11234 <memmove@plt>
   1b274:	ldr	r0, [r4, #4]
   1b278:	ldr	r2, [r4, #28]
   1b27c:	sub	r2, r2, r5
   1b280:	add	r1, r0, r5
   1b284:	bl	11234 <memmove@plt>
   1b288:	ldr	r3, [r4, #28]
   1b28c:	sub	r3, r3, r5
   1b290:	str	r3, [r4, #28]
   1b294:	ldr	r2, [r4, #32]
   1b298:	sub	r2, r2, r5
   1b29c:	str	r2, [r4, #32]
   1b2a0:	cmp	r3, #0
   1b2a4:	ble	1b09c <__assert_fail@plt+0x9b44>
   1b2a8:	mov	r3, #0
   1b2ac:	ldr	r1, [r4, #12]
   1b2b0:	ldr	r2, [r1, r7]
   1b2b4:	sub	r2, r2, r5
   1b2b8:	str	r2, [r1, r3, lsl #2]
   1b2bc:	add	r3, r3, #1
   1b2c0:	add	r7, r7, #4
   1b2c4:	ldr	r2, [r4, #28]
   1b2c8:	cmp	r2, r3
   1b2cc:	bgt	1b2ac <__assert_fail@plt+0x9d54>
   1b2d0:	b	1b09c <__assert_fail@plt+0x9b44>
   1b2d4:	cmp	sl, r8
   1b2d8:	bne	1b200 <__assert_fail@plt+0x9ca8>
   1b2dc:	mov	r3, #0
   1b2e0:	str	r3, [r4, #28]
   1b2e4:	b	1b244 <__assert_fail@plt+0x9cec>
   1b2e8:	ldr	r0, [r4, #4]
   1b2ec:	ldr	r2, [r4, #28]
   1b2f0:	sub	r2, r2, r5
   1b2f4:	add	r1, r0, r5
   1b2f8:	bl	11234 <memmove@plt>
   1b2fc:	b	1b084 <__assert_fail@plt+0x9b2c>
   1b300:	ldr	fp, [r4, #28]
   1b304:	ldrb	r3, [r4, #76]	; 0x4c
   1b308:	cmp	r3, #0
   1b30c:	bne	1b414 <__assert_fail@plt+0x9ebc>
   1b310:	mov	r3, #0
   1b314:	str	r3, [r4, #28]
   1b318:	ldr	r3, [r4, #80]	; 0x50
   1b31c:	cmp	r3, #1
   1b320:	ble	1b5dc <__assert_fail@plt+0xa084>
   1b324:	ldrb	r2, [r4, #73]	; 0x49
   1b328:	cmp	r2, #0
   1b32c:	beq	1b3f0 <__assert_fail@plt+0x9e98>
   1b330:	ldr	r0, [r4]
   1b334:	ldr	r8, [r4, #24]
   1b338:	add	r8, r0, r8
   1b33c:	sub	r3, r5, r3
   1b340:	add	r3, r8, r3
   1b344:	cmp	r0, r3
   1b348:	movcc	r0, r3
   1b34c:	mov	r9, r5
   1b350:	sub	r3, r5, #1
   1b354:	add	r1, r8, r3
   1b358:	cmp	r1, r0
   1b35c:	bcc	1b3f0 <__assert_fail@plt+0x9e98>
   1b360:	ldrb	r3, [r8, r3]
   1b364:	and	r3, r3, #192	; 0xc0
   1b368:	cmp	r3, #128	; 0x80
   1b36c:	subeq	r3, r1, #1
   1b370:	subeq	r0, r0, #1
   1b374:	bne	1b398 <__assert_fail@plt+0x9e40>
   1b378:	mov	r1, r3
   1b37c:	cmp	r3, r0
   1b380:	beq	1b3f0 <__assert_fail@plt+0x9e98>
   1b384:	sub	r3, r3, #1
   1b388:	ldrb	r2, [r1]
   1b38c:	and	r2, r2, #192	; 0xc0
   1b390:	cmp	r2, #128	; 0x80
   1b394:	beq	1b378 <__assert_fail@plt+0x9e20>
   1b398:	mov	sl, r1
   1b39c:	ldr	r2, [r4, #48]	; 0x30
   1b3a0:	add	r2, r8, r2
   1b3a4:	sub	r2, r2, r1
   1b3a8:	ldr	r3, [r4, #64]	; 0x40
   1b3ac:	cmp	r3, #0
   1b3b0:	bne	1b440 <__assert_fail@plt+0x9ee8>
   1b3b4:	mov	r3, #0
   1b3b8:	str	r3, [sp, #24]
   1b3bc:	str	r3, [sp, #28]
   1b3c0:	add	r3, sp, #24
   1b3c4:	add	r0, sp, #12
   1b3c8:	bl	24918 <__assert_fail@plt+0x133c0>
   1b3cc:	add	r8, r8, r9
   1b3d0:	sub	sl, r8, sl
   1b3d4:	cmp	r0, sl
   1b3d8:	movcc	r3, #0
   1b3dc:	movcs	r3, #1
   1b3e0:	cmn	r0, #3
   1b3e4:	movhi	r3, #0
   1b3e8:	cmp	r3, #0
   1b3ec:	bne	1b484 <__assert_fail@plt+0x9f2c>
   1b3f0:	ldr	ip, [r4, #24]
   1b3f4:	ldr	r3, [r4, #32]
   1b3f8:	add	ip, ip, r3
   1b3fc:	cmp	r6, ip
   1b400:	ble	1b6a4 <__assert_fail@plt+0xa14c>
   1b404:	add	sl, sp, #24
   1b408:	add	r9, r4, #16
   1b40c:	str	r5, [sp, #4]
   1b410:	b	1b4b4 <__assert_fail@plt+0x9f5c>
   1b414:	ldr	r3, [r4, #44]	; 0x2c
   1b418:	sub	r3, r3, r6
   1b41c:	add	r3, r3, r5
   1b420:	str	r3, [r4, #48]	; 0x30
   1b424:	ldr	r3, [r4, #52]	; 0x34
   1b428:	sub	r3, r3, r6
   1b42c:	add	r3, r3, r5
   1b430:	str	r3, [r4, #56]	; 0x38
   1b434:	mov	r3, #0
   1b438:	strb	r3, [r4, #76]	; 0x4c
   1b43c:	b	1b310 <__assert_fail@plt+0x9db8>
   1b440:	cmp	r2, #6
   1b444:	movlt	ip, r2
   1b448:	movge	ip, #6
   1b44c:	cmp	ip, #1
   1b450:	addmi	r1, sp, #16
   1b454:	bmi	1b3b4 <__assert_fail@plt+0x9e5c>
   1b458:	add	r0, r1, ip
   1b45c:	add	lr, sp, #32
   1b460:	add	ip, lr, ip
   1b464:	sub	ip, ip, #17
   1b468:	ldrb	lr, [r0, #-1]!
   1b46c:	ldrb	lr, [r3, lr]
   1b470:	strb	lr, [ip], #-1
   1b474:	cmp	r0, r1
   1b478:	bne	1b468 <__assert_fail@plt+0x9f10>
   1b47c:	add	r1, sp, #16
   1b480:	b	1b3b4 <__assert_fail@plt+0x9e5c>
   1b484:	mov	r3, #0
   1b488:	str	r3, [r4, #16]
   1b48c:	str	r3, [r4, #20]
   1b490:	sub	sl, r0, sl
   1b494:	str	sl, [r4, #28]
   1b498:	ldr	r8, [sp, #12]
   1b49c:	cmn	r8, #1
   1b4a0:	bne	1b52c <__assert_fail@plt+0x9fd4>
   1b4a4:	b	1b3f0 <__assert_fail@plt+0x9e98>
   1b4a8:	add	ip, r8, r0
   1b4ac:	cmp	r6, ip
   1b4b0:	ble	1b514 <__assert_fail@plt+0x9fbc>
   1b4b4:	ldr	r5, [r4, #44]	; 0x2c
   1b4b8:	sub	r5, r5, ip
   1b4bc:	ldm	r9, {r0, r1}
   1b4c0:	stm	sl, {r0, r1}
   1b4c4:	mov	r8, ip
   1b4c8:	ldr	r1, [r4]
   1b4cc:	mov	r3, r9
   1b4d0:	mov	r2, r5
   1b4d4:	add	r1, r1, ip
   1b4d8:	add	r0, sp, #16
   1b4dc:	bl	24918 <__assert_fail@plt+0x133c0>
   1b4e0:	sub	r3, r0, #1
   1b4e4:	cmn	r3, #4
   1b4e8:	ldrls	r3, [sp, #16]
   1b4ec:	bls	1b4a8 <__assert_fail@plt+0x9f50>
   1b4f0:	cmp	r5, #0
   1b4f4:	cmpne	r0, #0
   1b4f8:	ldrne	r3, [r4]
   1b4fc:	ldrbne	r3, [r3, r8]
   1b500:	moveq	r3, #0
   1b504:	ldm	sl, {r0, r1}
   1b508:	stm	r9, {r0, r1}
   1b50c:	mov	r0, #1
   1b510:	b	1b4a8 <__assert_fail@plt+0x9f50>
   1b514:	ldr	r5, [sp, #4]
   1b518:	mov	r8, r3
   1b51c:	sub	ip, ip, r6
   1b520:	str	ip, [r4, #28]
   1b524:	cmn	r3, #1
   1b528:	beq	1b6ac <__assert_fail@plt+0xa154>
   1b52c:	ldrb	r3, [r4, #78]	; 0x4e
   1b530:	cmp	r3, #0
   1b534:	bne	1b560 <__assert_fail@plt+0xa008>
   1b538:	cmp	r8, #10
   1b53c:	movne	r3, #0
   1b540:	beq	1b588 <__assert_fail@plt+0xa030>
   1b544:	str	r3, [r4, #60]	; 0x3c
   1b548:	ldr	r2, [r4, #28]
   1b54c:	cmp	r2, #0
   1b550:	bne	1b59c <__assert_fail@plt+0xa044>
   1b554:	ldr	r3, [r4, #28]
   1b558:	str	r3, [r4, #32]
   1b55c:	b	1b09c <__assert_fail@plt+0x9b44>
   1b560:	mov	r0, r8
   1b564:	bl	11438 <iswalnum@plt>
   1b568:	clz	r0, r0
   1b56c:	lsr	r0, r0, #5
   1b570:	cmp	r8, #95	; 0x5f
   1b574:	moveq	r0, #0
   1b578:	cmp	r0, #0
   1b57c:	moveq	r3, #1
   1b580:	bne	1b538 <__assert_fail@plt+0x9fe0>
   1b584:	b	1b544 <__assert_fail@plt+0x9fec>
   1b588:	ldrb	r3, [r4, #77]	; 0x4d
   1b58c:	cmp	r3, #0
   1b590:	movne	r3, #2
   1b594:	moveq	r3, #0
   1b598:	b	1b544 <__assert_fail@plt+0x9fec>
   1b59c:	ble	1b5c0 <__assert_fail@plt+0xa068>
   1b5a0:	mov	r3, #0
   1b5a4:	mvn	r1, #0
   1b5a8:	ldr	r2, [r4, #8]
   1b5ac:	str	r1, [r2, r3, lsl #2]
   1b5b0:	add	r3, r3, #1
   1b5b4:	ldr	r2, [r4, #28]
   1b5b8:	cmp	r2, r3
   1b5bc:	bgt	1b5a8 <__assert_fail@plt+0xa050>
   1b5c0:	ldrb	r3, [r4, #75]	; 0x4b
   1b5c4:	cmp	r3, #0
   1b5c8:	beq	1b554 <__assert_fail@plt+0x9ffc>
   1b5cc:	mov	r1, #255	; 0xff
   1b5d0:	ldr	r0, [r4, #4]
   1b5d4:	bl	1145c <memset@plt>
   1b5d8:	b	1b554 <__assert_fail@plt+0x9ffc>
   1b5dc:	ldr	r3, [r4]
   1b5e0:	ldr	r2, [r4, #24]
   1b5e4:	add	r3, r3, r5
   1b5e8:	add	r3, r3, r2
   1b5ec:	ldrb	r3, [r3, #-1]
   1b5f0:	mov	r2, #0
   1b5f4:	str	r2, [r4, #32]
   1b5f8:	ldr	r2, [r4, #64]	; 0x40
   1b5fc:	cmp	r2, #0
   1b600:	ldrbne	r3, [r2, r3]
   1b604:	lsr	r1, r3, #5
   1b608:	ldr	r0, [r4, #68]	; 0x44
   1b60c:	and	r2, r3, #31
   1b610:	ldr	r1, [r0, r1, lsl #2]
   1b614:	lsr	r2, r1, r2
   1b618:	tst	r2, #1
   1b61c:	movne	r3, #1
   1b620:	bne	1b630 <__assert_fail@plt+0xa0d8>
   1b624:	cmp	r3, #10
   1b628:	movne	r3, #0
   1b62c:	beq	1b638 <__assert_fail@plt+0xa0e0>
   1b630:	str	r3, [r4, #60]	; 0x3c
   1b634:	b	1b09c <__assert_fail@plt+0x9b44>
   1b638:	ldrb	r3, [r4, #77]	; 0x4d
   1b63c:	cmp	r3, #0
   1b640:	movne	r3, #2
   1b644:	moveq	r3, #0
   1b648:	b	1b630 <__assert_fail@plt+0xa0d8>
   1b64c:	mov	r0, r4
   1b650:	bl	16ab0 <__assert_fail@plt+0x5558>
   1b654:	mov	r0, #0
   1b658:	str	r0, [r4, #40]	; 0x28
   1b65c:	add	sp, sp, #36	; 0x24
   1b660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b664:	ldrb	r2, [r4, #75]	; 0x4b
   1b668:	cmp	r2, #0
   1b66c:	streq	r3, [r4, #28]
   1b670:	beq	1b654 <__assert_fail@plt+0xa0fc>
   1b674:	ldrb	r3, [r4, #72]	; 0x48
   1b678:	cmp	r3, #0
   1b67c:	bne	1b698 <__assert_fail@plt+0xa140>
   1b680:	ldr	r3, [r4, #64]	; 0x40
   1b684:	cmp	r3, #0
   1b688:	beq	1b654 <__assert_fail@plt+0xa0fc>
   1b68c:	mov	r0, r4
   1b690:	bl	15908 <__assert_fail@plt+0x43b0>
   1b694:	b	1b654 <__assert_fail@plt+0xa0fc>
   1b698:	mov	r0, r4
   1b69c:	bl	175d4 <__assert_fail@plt+0x607c>
   1b6a0:	b	1b654 <__assert_fail@plt+0xa0fc>
   1b6a4:	sub	ip, ip, r6
   1b6a8:	str	ip, [r4, #28]
   1b6ac:	mov	r2, r7
   1b6b0:	sub	r1, fp, #1
   1b6b4:	mov	r0, r4
   1b6b8:	bl	1967c <__assert_fail@plt+0x8124>
   1b6bc:	str	r0, [r4, #60]	; 0x3c
   1b6c0:	b	1b548 <__assert_fail@plt+0x9ff0>
   1b6c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6c8:	sub	sp, sp, #14464	; 0x3880
   1b6cc:	sub	sp, sp, #52	; 0x34
   1b6d0:	mov	r9, r0
   1b6d4:	mov	r4, r1
   1b6d8:	str	r1, [sp, #4]
   1b6dc:	mov	r1, #0
   1b6e0:	str	r1, [r4, #44]	; 0x2c
   1b6e4:	str	r1, [r4, #48]	; 0x30
   1b6e8:	mov	r2, #32
   1b6ec:	add	r0, sp, #32
   1b6f0:	bl	1145c <memset@plt>
   1b6f4:	ldr	r3, [r4, #8]
   1b6f8:	cmp	r3, #0
   1b6fc:	ble	1bd50 <__assert_fail@plt+0xa7f8>
   1b700:	mov	r8, #0
   1b704:	str	r8, [sp, #12]
   1b708:	add	r3, sp, #8320	; 0x2080
   1b70c:	str	r3, [sp, #24]
   1b710:	add	r3, sp, #32
   1b714:	str	r3, [sp, #28]
   1b718:	str	r9, [sp, #20]
   1b71c:	b	1bb5c <__assert_fail@plt+0xa604>
   1b720:	ldrb	r3, [r3, r2, lsl #3]
   1b724:	asr	r1, r3, #5
   1b728:	and	r3, r3, #31
   1b72c:	ldr	ip, [sp, #28]
   1b730:	ldr	r2, [ip, r1, lsl #2]
   1b734:	mov	r0, #1
   1b738:	orr	r3, r2, r0, lsl r3
   1b73c:	str	r3, [ip, r1, lsl #2]
   1b740:	cmp	r4, #0
   1b744:	beq	1b824 <__assert_fail@plt+0xa2cc>
   1b748:	tst	r4, #32
   1b74c:	bne	1b8e0 <__assert_fail@plt+0xa388>
   1b750:	tst	r4, #128	; 0x80
   1b754:	bne	1b90c <__assert_fail@plt+0xa3b4>
   1b758:	tst	r4, #4
   1b75c:	beq	1b7c0 <__assert_fail@plt+0xa268>
   1b760:	cmp	r9, #1
   1b764:	beq	1b920 <__assert_fail@plt+0xa3c8>
   1b768:	ldr	r2, [sp, #20]
   1b76c:	ldr	r3, [r2, #92]	; 0x5c
   1b770:	cmp	r3, #1
   1b774:	ble	1b944 <__assert_fail@plt+0xa3ec>
   1b778:	add	r0, sp, #32
   1b77c:	add	r1, r2, #96	; 0x60
   1b780:	ldr	lr, [r2, #60]	; 0x3c
   1b784:	sub	lr, lr, #4
   1b788:	add	r5, r2, #128	; 0x80
   1b78c:	mov	ip, #0
   1b790:	ldr	r2, [r1], #4
   1b794:	ldr	r3, [lr, #4]!
   1b798:	mvn	r3, r3
   1b79c:	orr	r3, r3, r2
   1b7a0:	ldr	r2, [r0]
   1b7a4:	and	r3, r3, r2
   1b7a8:	str	r3, [r0], #4
   1b7ac:	orr	ip, ip, r3
   1b7b0:	cmp	r1, r5
   1b7b4:	bne	1b790 <__assert_fail@plt+0xa238>
   1b7b8:	cmp	ip, #0
   1b7bc:	beq	1bb3c <__assert_fail@plt+0xa5e4>
   1b7c0:	tst	r4, #8
   1b7c4:	beq	1b824 <__assert_fail@plt+0xa2cc>
   1b7c8:	cmp	r9, #1
   1b7cc:	beq	1b978 <__assert_fail@plt+0xa420>
   1b7d0:	ldr	r2, [sp, #20]
   1b7d4:	ldr	r3, [r2, #92]	; 0x5c
   1b7d8:	cmp	r3, #1
   1b7dc:	ble	1b99c <__assert_fail@plt+0xa444>
   1b7e0:	add	ip, sp, #32
   1b7e4:	add	r0, r2, #96	; 0x60
   1b7e8:	ldr	lr, [r2, #60]	; 0x3c
   1b7ec:	sub	lr, lr, #4
   1b7f0:	add	r4, r2, #128	; 0x80
   1b7f4:	mov	r1, #0
   1b7f8:	ldr	r3, [r0], #4
   1b7fc:	ldr	r2, [lr, #4]!
   1b800:	and	r2, r2, r3
   1b804:	ldr	r3, [ip]
   1b808:	bic	r3, r3, r2
   1b80c:	str	r3, [ip], #4
   1b810:	orr	r1, r1, r3
   1b814:	cmp	r0, r4
   1b818:	bne	1b7f8 <__assert_fail@plt+0xa2a0>
   1b81c:	cmp	r1, #0
   1b820:	beq	1bb3c <__assert_fail@plt+0xa5e4>
   1b824:	cmp	r8, #0
   1b828:	ble	1bb30 <__assert_fail@plt+0xa5d8>
   1b82c:	add	r5, sp, #124	; 0x7c
   1b830:	add	r6, sp, #8320	; 0x2080
   1b834:	mov	r7, #0
   1b838:	b	1ba48 <__assert_fail@plt+0xa4f0>
   1b83c:	ldr	ip, [r3, r2, lsl #3]
   1b840:	add	r0, sp, #32
   1b844:	sub	r1, ip, #4
   1b848:	add	ip, ip, #28
   1b84c:	ldr	r3, [r0]
   1b850:	ldr	r2, [r1, #4]!
   1b854:	orr	r3, r3, r2
   1b858:	str	r3, [r0], #4
   1b85c:	cmp	r1, ip
   1b860:	bne	1b84c <__assert_fail@plt+0xa2f4>
   1b864:	b	1b740 <__assert_fail@plt+0xa1e8>
   1b868:	ldr	r2, [sp, #20]
   1b86c:	ldr	r3, [r2, #92]	; 0x5c
   1b870:	cmp	r3, #1
   1b874:	ble	1b8cc <__assert_fail@plt+0xa374>
   1b878:	ldr	ip, [r2, #60]	; 0x3c
   1b87c:	add	r0, sp, #32
   1b880:	sub	r1, ip, #4
   1b884:	add	ip, ip, #28
   1b888:	ldr	r3, [r0]
   1b88c:	ldr	r2, [r1, #4]!
   1b890:	orr	r3, r3, r2
   1b894:	str	r3, [r0], #4
   1b898:	cmp	r1, ip
   1b89c:	bne	1b888 <__assert_fail@plt+0xa330>
   1b8a0:	ldr	r3, [sp, #20]
   1b8a4:	ldr	r3, [r3, #128]	; 0x80
   1b8a8:	tst	r3, #64	; 0x40
   1b8ac:	ldreq	r2, [sp, #32]
   1b8b0:	biceq	r2, r2, #1024	; 0x400
   1b8b4:	streq	r2, [sp, #32]
   1b8b8:	tst	r3, #128	; 0x80
   1b8bc:	ldrne	r3, [sp, #32]
   1b8c0:	bicne	r3, r3, #1
   1b8c4:	strne	r3, [sp, #32]
   1b8c8:	b	1b740 <__assert_fail@plt+0xa1e8>
   1b8cc:	mov	r2, #32
   1b8d0:	mvn	r1, #0
   1b8d4:	ldr	r0, [sp, #28]
   1b8d8:	bl	1145c <memset@plt>
   1b8dc:	b	1b8a0 <__assert_fail@plt+0xa348>
   1b8e0:	ldr	r5, [sp, #32]
   1b8e4:	and	r5, r5, #1024	; 0x400
   1b8e8:	mov	r2, #32
   1b8ec:	mov	r1, #0
   1b8f0:	ldr	r0, [sp, #28]
   1b8f4:	bl	1145c <memset@plt>
   1b8f8:	cmp	r5, #0
   1b8fc:	beq	1bb3c <__assert_fail@plt+0xa5e4>
   1b900:	mov	r3, #1024	; 0x400
   1b904:	str	r3, [sp, #32]
   1b908:	b	1b750 <__assert_fail@plt+0xa1f8>
   1b90c:	mov	r2, #32
   1b910:	mov	r1, #0
   1b914:	ldr	r0, [sp, #28]
   1b918:	bl	1145c <memset@plt>
   1b91c:	b	1bb3c <__assert_fail@plt+0xa5e4>
   1b920:	ldr	r3, [sp, #16]
   1b924:	ldrb	r3, [r3, #6]
   1b928:	tst	r3, #64	; 0x40
   1b92c:	bne	1b768 <__assert_fail@plt+0xa210>
   1b930:	mov	r2, #32
   1b934:	mov	r1, #0
   1b938:	ldr	r0, [sp, #28]
   1b93c:	bl	1145c <memset@plt>
   1b940:	b	1bb3c <__assert_fail@plt+0xa5e4>
   1b944:	add	r1, sp, #32
   1b948:	ldr	r3, [sp, #20]
   1b94c:	add	r2, r3, #96	; 0x60
   1b950:	add	r0, r3, #128	; 0x80
   1b954:	mov	ip, #0
   1b958:	ldr	r3, [r2], #4
   1b95c:	ldr	lr, [r1]
   1b960:	and	r3, r3, lr
   1b964:	str	r3, [r1], #4
   1b968:	orr	ip, ip, r3
   1b96c:	cmp	r2, r0
   1b970:	bne	1b958 <__assert_fail@plt+0xa400>
   1b974:	b	1b7b8 <__assert_fail@plt+0xa260>
   1b978:	ldr	r3, [sp, #16]
   1b97c:	ldrb	r3, [r3, #6]
   1b980:	tst	r3, #64	; 0x40
   1b984:	beq	1b7d0 <__assert_fail@plt+0xa278>
   1b988:	mov	r2, #32
   1b98c:	mov	r1, #0
   1b990:	ldr	r0, [sp, #28]
   1b994:	bl	1145c <memset@plt>
   1b998:	b	1bb3c <__assert_fail@plt+0xa5e4>
   1b99c:	add	r0, sp, #32
   1b9a0:	ldr	r3, [sp, #20]
   1b9a4:	add	r2, r3, #96	; 0x60
   1b9a8:	add	ip, r3, #128	; 0x80
   1b9ac:	mov	r1, #0
   1b9b0:	ldr	lr, [r2], #4
   1b9b4:	ldr	r3, [r0]
   1b9b8:	bic	r3, r3, lr
   1b9bc:	str	r3, [r0], #4
   1b9c0:	orr	r1, r1, r3
   1b9c4:	cmp	r2, ip
   1b9c8:	bne	1b9b0 <__assert_fail@plt+0xa458>
   1b9cc:	b	1b81c <__assert_fail@plt+0xa2c4>
   1b9d0:	ldr	r3, [sp, #16]
   1b9d4:	ldrb	r2, [r3]
   1b9d8:	asr	r1, r2, #5
   1b9dc:	lsl	r3, r7, #5
   1b9e0:	add	r3, r3, r1, lsl #2
   1b9e4:	add	r1, sp, #14464	; 0x3880
   1b9e8:	add	r1, r1, #48	; 0x30
   1b9ec:	add	r3, r1, r3
   1b9f0:	sub	r3, r3, #14336	; 0x3800
   1b9f4:	and	r2, r2, #31
   1b9f8:	ldr	r3, [r3, #-48]	; 0xffffffd0
   1b9fc:	lsr	r2, r3, r2
   1ba00:	tst	r2, #1
   1ba04:	beq	1ba34 <__assert_fail@plt+0xa4dc>
   1ba08:	b	1ba50 <__assert_fail@plt+0xa4f8>
   1ba0c:	ldr	r3, [sp, #4]
   1ba10:	ldr	r3, [r3, #12]
   1ba14:	ldr	r2, [sp, #8]
   1ba18:	ldr	r1, [r3, r2]
   1ba1c:	mov	r0, r6
   1ba20:	bl	18d64 <__assert_fail@plt+0x780c>
   1ba24:	cmp	r0, #0
   1ba28:	beq	1bc64 <__assert_fail@plt+0xa70c>
   1ba2c:	cmp	r4, #0
   1ba30:	beq	1bb34 <__assert_fail@plt+0xa5dc>
   1ba34:	add	r7, r7, #1
   1ba38:	add	r5, r5, #32
   1ba3c:	add	r6, r6, #12
   1ba40:	cmp	r7, r8
   1ba44:	bge	1bb34 <__assert_fail@plt+0xa5dc>
   1ba48:	cmp	r9, #1
   1ba4c:	beq	1b9d0 <__assert_fail@plt+0xa478>
   1ba50:	add	r0, sp, #32
   1ba54:	add	r4, sp, #64	; 0x40
   1ba58:	add	sl, r5, #32
   1ba5c:	mov	r1, r5
   1ba60:	mov	lr, r0
   1ba64:	mov	ip, #0
   1ba68:	ldr	r3, [lr], #4
   1ba6c:	ldr	r2, [r1, #4]!
   1ba70:	and	r3, r3, r2
   1ba74:	str	r3, [r4], #4
   1ba78:	orr	ip, ip, r3
   1ba7c:	cmp	r1, sl
   1ba80:	bne	1ba68 <__assert_fail@plt+0xa510>
   1ba84:	cmp	ip, #0
   1ba88:	beq	1ba34 <__assert_fail@plt+0xa4dc>
   1ba8c:	add	fp, sp, #96	; 0x60
   1ba90:	mov	ip, r5
   1ba94:	mov	r4, #0
   1ba98:	mov	sl, r4
   1ba9c:	ldr	r3, [r0]
   1baa0:	ldr	r2, [ip, #4]!
   1baa4:	bic	lr, r2, r3
   1baa8:	str	lr, [fp], #4
   1baac:	orr	sl, sl, lr
   1bab0:	bic	r3, r3, r2
   1bab4:	str	r3, [r0], #4
   1bab8:	orr	r4, r4, r3
   1babc:	cmp	ip, r1
   1bac0:	bne	1ba9c <__assert_fail@plt+0xa544>
   1bac4:	cmp	sl, #0
   1bac8:	beq	1ba0c <__assert_fail@plt+0xa4b4>
   1bacc:	add	r3, sp, #14464	; 0x3880
   1bad0:	add	r3, r3, #48	; 0x30
   1bad4:	add	ip, r3, r8, lsl #5
   1bad8:	sub	ip, ip, #14336	; 0x3800
   1badc:	sub	ip, ip, #48	; 0x30
   1bae0:	add	lr, sp, #96	; 0x60
   1bae4:	ldm	lr!, {r0, r1, r2, r3}
   1bae8:	stmia	ip!, {r0, r1, r2, r3}
   1baec:	ldm	lr, {r0, r1, r2, r3}
   1baf0:	stm	ip, {r0, r1, r2, r3}
   1baf4:	add	ip, r5, #4
   1baf8:	add	lr, sp, #64	; 0x40
   1bafc:	ldm	lr!, {r0, r1, r2, r3}
   1bb00:	stmia	ip!, {r0, r1, r2, r3}
   1bb04:	ldm	lr, {r0, r1, r2, r3}
   1bb08:	stm	ip, {r0, r1, r2, r3}
   1bb0c:	add	r0, r8, r8, lsl #1
   1bb10:	mov	r1, r6
   1bb14:	ldr	r3, [sp, #24]
   1bb18:	add	r0, r3, r0, lsl #2
   1bb1c:	bl	16e0c <__assert_fail@plt+0x58b4>
   1bb20:	cmp	r0, #0
   1bb24:	bne	1bc64 <__assert_fail@plt+0xa70c>
   1bb28:	add	r8, r8, #1
   1bb2c:	b	1ba0c <__assert_fail@plt+0xa4b4>
   1bb30:	mov	r7, #0
   1bb34:	cmp	r8, r7
   1bb38:	beq	1bbf8 <__assert_fail@plt+0xa6a0>
   1bb3c:	ldr	r3, [sp, #12]
   1bb40:	add	r3, r3, #1
   1bb44:	mov	r2, r3
   1bb48:	str	r3, [sp, #12]
   1bb4c:	ldr	r3, [sp, #4]
   1bb50:	ldr	r3, [r3, #8]
   1bb54:	cmp	r2, r3
   1bb58:	bge	1bc9c <__assert_fail@plt+0xa744>
   1bb5c:	ldr	r2, [sp, #12]
   1bb60:	lsl	r3, r2, #2
   1bb64:	str	r3, [sp, #8]
   1bb68:	ldr	r3, [sp, #4]
   1bb6c:	ldr	r3, [r3, #12]
   1bb70:	ldr	r2, [r3, r2, lsl #2]
   1bb74:	ldr	r3, [sp, #20]
   1bb78:	ldr	r3, [r3]
   1bb7c:	add	r1, r3, r2, lsl #3
   1bb80:	str	r1, [sp, #16]
   1bb84:	ldrb	r9, [r1, #4]
   1bb88:	ldr	r4, [r1, #4]
   1bb8c:	lsl	r4, r4, #14
   1bb90:	lsr	r4, r4, #22
   1bb94:	cmp	r9, #1
   1bb98:	beq	1b720 <__assert_fail@plt+0xa1c8>
   1bb9c:	cmp	r9, #3
   1bba0:	beq	1b83c <__assert_fail@plt+0xa2e4>
   1bba4:	cmp	r9, #5
   1bba8:	beq	1b868 <__assert_fail@plt+0xa310>
   1bbac:	cmp	r9, #7
   1bbb0:	bne	1bb3c <__assert_fail@plt+0xa5e4>
   1bbb4:	mvn	r3, #0
   1bbb8:	ldr	r2, [sp, #28]
   1bbbc:	str	r3, [r2]
   1bbc0:	str	r3, [r2, #4]
   1bbc4:	str	r3, [r2, #8]
   1bbc8:	str	r3, [r2, #12]
   1bbcc:	ldr	r3, [sp, #20]
   1bbd0:	ldr	r2, [r3, #128]	; 0x80
   1bbd4:	tst	r2, #64	; 0x40
   1bbd8:	ldreq	r3, [sp, #32]
   1bbdc:	biceq	r3, r3, #1024	; 0x400
   1bbe0:	streq	r3, [sp, #32]
   1bbe4:	tst	r2, #128	; 0x80
   1bbe8:	ldrne	r3, [sp, #32]
   1bbec:	bicne	r3, r3, #1
   1bbf0:	strne	r3, [sp, #32]
   1bbf4:	b	1b740 <__assert_fail@plt+0xa1e8>
   1bbf8:	add	r3, sp, #14464	; 0x3880
   1bbfc:	add	r3, r3, #48	; 0x30
   1bc00:	add	ip, r3, r8, lsl #5
   1bc04:	sub	ip, ip, #14336	; 0x3800
   1bc08:	sub	ip, ip, #48	; 0x30
   1bc0c:	add	lr, sp, #32
   1bc10:	ldm	lr!, {r0, r1, r2, r3}
   1bc14:	stmia	ip!, {r0, r1, r2, r3}
   1bc18:	ldm	lr, {r0, r1, r2, r3}
   1bc1c:	stm	ip, {r0, r1, r2, r3}
   1bc20:	ldr	r3, [sp, #4]
   1bc24:	ldr	r3, [r3, #12]
   1bc28:	add	r0, r8, r8, lsl #1
   1bc2c:	ldr	r2, [sp, #8]
   1bc30:	ldr	r1, [r3, r2]
   1bc34:	ldr	r3, [sp, #24]
   1bc38:	add	r0, r3, r0, lsl #2
   1bc3c:	bl	1693c <__assert_fail@plt+0x53e4>
   1bc40:	cmp	r0, #0
   1bc44:	bne	1bc60 <__assert_fail@plt+0xa708>
   1bc48:	add	r8, r8, #1
   1bc4c:	mov	r2, #32
   1bc50:	mov	r1, #0
   1bc54:	ldr	r0, [sp, #28]
   1bc58:	bl	1145c <memset@plt>
   1bc5c:	b	1bb3c <__assert_fail@plt+0xa5e4>
   1bc60:	mov	r8, r7
   1bc64:	cmp	r8, #0
   1bc68:	ble	1bc8c <__assert_fail@plt+0xa734>
   1bc6c:	add	r4, sp, #8320	; 0x2080
   1bc70:	mov	r5, #0
   1bc74:	ldr	r0, [r4, #8]
   1bc78:	bl	13b40 <__assert_fail@plt+0x25e8>
   1bc7c:	add	r5, r5, #1
   1bc80:	add	r4, r4, #12
   1bc84:	cmp	r5, r8
   1bc88:	bne	1bc74 <__assert_fail@plt+0xa71c>
   1bc8c:	mov	r0, #0
   1bc90:	add	sp, sp, #14464	; 0x3880
   1bc94:	add	sp, sp, #52	; 0x34
   1bc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc9c:	ldr	r9, [sp, #20]
   1bca0:	cmp	r8, #0
   1bca4:	ble	1bd48 <__assert_fail@plt+0xa7f0>
   1bca8:	add	r1, r8, #1
   1bcac:	add	r0, sp, #11392	; 0x2c80
   1bcb0:	add	r0, r0, #32
   1bcb4:	bl	16980 <__assert_fail@plt+0x5428>
   1bcb8:	add	r3, sp, #14464	; 0x3880
   1bcbc:	add	r3, r3, #44	; 0x2c
   1bcc0:	str	r0, [r3]
   1bcc4:	cmp	r0, #0
   1bcc8:	bne	1bdc4 <__assert_fail@plt+0xa86c>
   1bccc:	mov	r2, #32
   1bcd0:	mov	r1, #0
   1bcd4:	add	r0, sp, #11392	; 0x2c80
   1bcd8:	bl	1145c <memset@plt>
   1bcdc:	add	r3, sp, #8320	; 0x2080
   1bce0:	str	r3, [sp, #20]
   1bce4:	add	r6, sp, #124	; 0x7c
   1bce8:	add	r2, sp, #12416	; 0x3080
   1bcec:	add	r2, r2, #48	; 0x30
   1bcf0:	sub	fp, r2, #4
   1bcf4:	add	r2, sp, #13440	; 0x3480
   1bcf8:	add	r2, r2, #48	; 0x30
   1bcfc:	sub	sl, r2, #8
   1bd00:	mov	r7, r3
   1bd04:	mov	r3, #0
   1bd08:	str	r3, [sp, #16]
   1bd0c:	str	r3, [sp, #8]
   1bd10:	add	r3, sp, #11392	; 0x2c80
   1bd14:	add	r3, r3, #48	; 0x30
   1bd18:	sub	r3, r3, #4
   1bd1c:	str	r3, [sp, #12]
   1bd20:	add	r3, sp, #11392	; 0x2c80
   1bd24:	add	r3, r3, #36	; 0x24
   1bd28:	mov	r2, #0
   1bd2c:	str	r2, [r3]
   1bd30:	mov	r5, r7
   1bd34:	ldr	r3, [r7, #4]
   1bd38:	cmp	r3, r2
   1bd3c:	ble	1bdfc <__assert_fail@plt+0xa8a4>
   1bd40:	mov	r4, r2
   1bd44:	b	1bd80 <__assert_fail@plt+0xa828>
   1bd48:	movne	r0, #0
   1bd4c:	bne	1bc90 <__assert_fail@plt+0xa738>
   1bd50:	mov	r1, #256	; 0x100
   1bd54:	mov	r0, #4
   1bd58:	bl	24478 <__assert_fail@plt+0x12f20>
   1bd5c:	ldr	r3, [sp, #4]
   1bd60:	str	r0, [r3, #44]	; 0x2c
   1bd64:	adds	r0, r0, #0
   1bd68:	movne	r0, #1
   1bd6c:	b	1bc90 <__assert_fail@plt+0xa738>
   1bd70:	add	r4, r4, #1
   1bd74:	ldr	r3, [r5, #4]
   1bd78:	cmp	r3, r4
   1bd7c:	ble	1bdfc <__assert_fail@plt+0xa8a4>
   1bd80:	ldr	r3, [r5, #8]
   1bd84:	ldr	r2, [r3, r4, lsl #2]
   1bd88:	ldr	r3, [r9, #12]
   1bd8c:	ldr	r1, [r3, r2, lsl #2]
   1bd90:	cmn	r1, #1
   1bd94:	beq	1bd70 <__assert_fail@plt+0xa818>
   1bd98:	add	r1, r1, r1, lsl #1
   1bd9c:	ldr	r3, [r9, #24]
   1bda0:	add	r1, r3, r1, lsl #2
   1bda4:	add	r0, sp, #11392	; 0x2c80
   1bda8:	add	r0, r0, #32
   1bdac:	bl	192a8 <__assert_fail@plt+0x7d50>
   1bdb0:	add	r3, sp, #14464	; 0x3880
   1bdb4:	add	r3, r3, #44	; 0x2c
   1bdb8:	str	r0, [r3]
   1bdbc:	cmp	r0, #0
   1bdc0:	beq	1bd70 <__assert_fail@plt+0xa818>
   1bdc4:	add	r3, sp, #11392	; 0x2c80
   1bdc8:	add	r3, r3, #40	; 0x28
   1bdcc:	ldr	r0, [r3]
   1bdd0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1bdd4:	add	r4, sp, #8320	; 0x2080
   1bdd8:	mov	r5, #0
   1bddc:	ldr	r0, [r4, #8]
   1bde0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1bde4:	add	r5, r5, #1
   1bde8:	add	r4, r4, #12
   1bdec:	cmp	r5, r8
   1bdf0:	bne	1bddc <__assert_fail@plt+0xa884>
   1bdf4:	mov	r0, #0
   1bdf8:	b	1bc90 <__assert_fail@plt+0xa738>
   1bdfc:	mov	r3, #0
   1be00:	add	r2, sp, #11392	; 0x2c80
   1be04:	add	r2, r2, #32
   1be08:	mov	r1, r9
   1be0c:	add	r0, sp, #14464	; 0x3880
   1be10:	add	r0, r0, #44	; 0x2c
   1be14:	bl	185c4 <__assert_fail@plt+0x706c>
   1be18:	mov	r4, r0
   1be1c:	str	r0, [sl, #4]!
   1be20:	cmp	r0, #0
   1be24:	beq	1bec4 <__assert_fail@plt+0xa96c>
   1be28:	ldrsb	r3, [r4, #52]	; 0x34
   1be2c:	cmp	r3, #0
   1be30:	blt	1bedc <__assert_fail@plt+0xa984>
   1be34:	str	r4, [fp]
   1be38:	ldr	r3, [sp, #12]
   1be3c:	ldr	r2, [sp, #8]
   1be40:	str	r4, [r3, r2, lsl #2]
   1be44:	add	r4, sp, #11392	; 0x2c80
   1be48:	add	r0, r6, #32
   1be4c:	mov	r1, r4
   1be50:	ldr	r3, [r1]
   1be54:	ldr	r2, [r6, #4]!
   1be58:	orr	r3, r3, r2
   1be5c:	str	r3, [r1], #4
   1be60:	cmp	r0, r6
   1be64:	bne	1be50 <__assert_fail@plt+0xa8f8>
   1be68:	ldr	r3, [sp, #8]
   1be6c:	add	r3, r3, #1
   1be70:	str	r3, [sp, #8]
   1be74:	add	r7, r7, #12
   1be78:	add	fp, fp, #4
   1be7c:	mov	r6, r0
   1be80:	cmp	r3, r8
   1be84:	bne	1bd20 <__assert_fail@plt+0xa7c8>
   1be88:	ldr	r3, [sp, #16]
   1be8c:	cmp	r3, #0
   1be90:	bne	1c014 <__assert_fail@plt+0xaabc>
   1be94:	mov	r1, #256	; 0x100
   1be98:	mov	r0, #4
   1be9c:	bl	24478 <__assert_fail@plt+0x12f20>
   1bea0:	ldr	r3, [sp, #4]
   1bea4:	str	r0, [r3, #44]	; 0x2c
   1bea8:	cmp	r0, #0
   1beac:	beq	1bdc4 <__assert_fail@plt+0xa86c>
   1beb0:	mov	r2, r0
   1beb4:	add	r1, r9, #96	; 0x60
   1beb8:	add	r7, sp, #128	; 0x80
   1bebc:	add	sl, r0, #1024	; 0x400
   1bec0:	b	1bffc <__assert_fail@plt+0xaaa4>
   1bec4:	add	r3, sp, #14464	; 0x3880
   1bec8:	add	r3, r3, #44	; 0x2c
   1becc:	ldr	r3, [r3]
   1bed0:	cmp	r3, #0
   1bed4:	beq	1be28 <__assert_fail@plt+0xa8d0>
   1bed8:	b	1bdc4 <__assert_fail@plt+0xa86c>
   1bedc:	mov	r3, #1
   1bee0:	add	r2, sp, #11392	; 0x2c80
   1bee4:	add	r2, r2, #32
   1bee8:	mov	r1, r9
   1beec:	add	r0, sp, #14464	; 0x3880
   1bef0:	add	r0, r0, #44	; 0x2c
   1bef4:	bl	185c4 <__assert_fail@plt+0x706c>
   1bef8:	str	r0, [fp]
   1befc:	cmp	r0, #0
   1bf00:	beq	1bf68 <__assert_fail@plt+0xaa10>
   1bf04:	cmp	r4, r0
   1bf08:	beq	1bf20 <__assert_fail@plt+0xa9c8>
   1bf0c:	ldr	r3, [r9, #92]	; 0x5c
   1bf10:	ldr	r2, [sp, #16]
   1bf14:	cmp	r3, #1
   1bf18:	movgt	r2, #1
   1bf1c:	str	r2, [sp, #16]
   1bf20:	mov	r3, #2
   1bf24:	add	r2, sp, #11392	; 0x2c80
   1bf28:	add	r2, r2, #32
   1bf2c:	mov	r1, r9
   1bf30:	add	r0, sp, #14464	; 0x3880
   1bf34:	add	r0, r0, #44	; 0x2c
   1bf38:	bl	185c4 <__assert_fail@plt+0x706c>
   1bf3c:	ldr	r3, [sp, #12]
   1bf40:	ldr	r2, [sp, #8]
   1bf44:	str	r0, [r3, r2, lsl #2]
   1bf48:	cmp	r0, #0
   1bf4c:	bne	1be44 <__assert_fail@plt+0xa8ec>
   1bf50:	add	r3, sp, #14464	; 0x3880
   1bf54:	add	r3, r3, #44	; 0x2c
   1bf58:	ldr	r3, [r3]
   1bf5c:	cmp	r3, #0
   1bf60:	beq	1be44 <__assert_fail@plt+0xa8ec>
   1bf64:	b	1bdc4 <__assert_fail@plt+0xa86c>
   1bf68:	add	r3, sp, #14464	; 0x3880
   1bf6c:	add	r3, r3, #44	; 0x2c
   1bf70:	ldr	r3, [r3]
   1bf74:	cmp	r3, #0
   1bf78:	beq	1bf04 <__assert_fail@plt+0xa9ac>
   1bf7c:	b	1bdc4 <__assert_fail@plt+0xa86c>
   1bf80:	mov	r3, #0
   1bf84:	b	1bfc4 <__assert_fail@plt+0xaa6c>
   1bf88:	lsl	lr, lr, #1
   1bf8c:	add	r8, r8, #4
   1bf90:	lsrs	r6, r6, #1
   1bf94:	beq	1bfe8 <__assert_fail@plt+0xaa90>
   1bf98:	tst	r6, #1
   1bf9c:	beq	1bf88 <__assert_fail@plt+0xaa30>
   1bfa0:	mov	r5, r7
   1bfa4:	ldr	r3, [r7]
   1bfa8:	tst	lr, r3
   1bfac:	bne	1bf80 <__assert_fail@plt+0xaa28>
   1bfb0:	mov	r3, #0
   1bfb4:	add	r3, r3, #1
   1bfb8:	ldr	ip, [r5, r3, lsl #5]
   1bfbc:	tst	lr, ip
   1bfc0:	beq	1bfb4 <__assert_fail@plt+0xaa5c>
   1bfc4:	ldr	ip, [r1]
   1bfc8:	tst	lr, ip
   1bfcc:	add	ip, sp, #14464	; 0x3880
   1bfd0:	add	ip, ip, #48	; 0x30
   1bfd4:	add	r3, ip, r3, lsl #2
   1bfd8:	ldrne	r3, [r3, #-2052]	; 0xfffff7fc
   1bfdc:	ldreq	r3, [r3, #-1028]	; 0xfffffbfc
   1bfe0:	str	r3, [r8]
   1bfe4:	b	1bf88 <__assert_fail@plt+0xaa30>
   1bfe8:	add	r2, r2, #128	; 0x80
   1bfec:	add	r1, r1, #4
   1bff0:	add	r7, r7, #4
   1bff4:	cmp	r2, sl
   1bff8:	beq	1c078 <__assert_fail@plt+0xab20>
   1bffc:	ldr	r6, [r4], #4
   1c000:	cmp	r6, #0
   1c004:	beq	1bfe8 <__assert_fail@plt+0xaa90>
   1c008:	mov	r8, r2
   1c00c:	mov	lr, #1
   1c010:	b	1bf98 <__assert_fail@plt+0xaa40>
   1c014:	mov	r1, #512	; 0x200
   1c018:	mov	r0, #4
   1c01c:	bl	24478 <__assert_fail@plt+0x12f20>
   1c020:	ldr	r3, [sp, #4]
   1c024:	str	r0, [r3, #48]	; 0x30
   1c028:	cmp	r0, #0
   1c02c:	beq	1bdc4 <__assert_fail@plt+0xa86c>
   1c030:	mov	r5, r0
   1c034:	add	ip, sp, #128	; 0x80
   1c038:	add	r7, r0, #1024	; 0x400
   1c03c:	ldr	r6, [r4], #4
   1c040:	cmp	r6, #0
   1c044:	beq	1c068 <__assert_fail@plt+0xab10>
   1c048:	mov	r8, r5
   1c04c:	mov	r1, #1
   1c050:	tst	r6, #1
   1c054:	bne	1c0a0 <__assert_fail@plt+0xab48>
   1c058:	lsl	r1, r1, #1
   1c05c:	add	r8, r8, #4
   1c060:	lsrs	r6, r6, #1
   1c064:	bne	1c050 <__assert_fail@plt+0xaaf8>
   1c068:	add	r5, r5, #128	; 0x80
   1c06c:	add	ip, ip, #4
   1c070:	cmp	r7, r5
   1c074:	bne	1c03c <__assert_fail@plt+0xaae4>
   1c078:	add	r3, sp, #11392	; 0x2c80
   1c07c:	ldr	r3, [r3]
   1c080:	tst	r3, #1024	; 0x400
   1c084:	beq	1c130 <__assert_fail@plt+0xabd8>
   1c088:	ldr	r3, [sp, #128]	; 0x80
   1c08c:	tst	r3, #1024	; 0x400
   1c090:	bne	1c10c <__assert_fail@plt+0xabb4>
   1c094:	mov	r3, #0
   1c098:	add	r2, sp, #128	; 0x80
   1c09c:	b	1c0f8 <__assert_fail@plt+0xaba0>
   1c0a0:	mov	lr, ip
   1c0a4:	ldr	r3, [ip]
   1c0a8:	tst	r1, r3
   1c0ac:	bne	1c0e4 <__assert_fail@plt+0xab8c>
   1c0b0:	mov	r3, #0
   1c0b4:	add	r3, r3, #1
   1c0b8:	ldr	r2, [lr, r3, lsl #5]
   1c0bc:	tst	r1, r2
   1c0c0:	beq	1c0b4 <__assert_fail@plt+0xab5c>
   1c0c4:	add	r2, sp, #14464	; 0x3880
   1c0c8:	add	r2, r2, #48	; 0x30
   1c0cc:	add	r3, r2, r3, lsl #2
   1c0d0:	ldr	r2, [r3, #-1028]	; 0xfffffbfc
   1c0d4:	str	r2, [r8]
   1c0d8:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   1c0dc:	str	r3, [r8, #1024]	; 0x400
   1c0e0:	b	1c058 <__assert_fail@plt+0xab00>
   1c0e4:	mov	r3, #0
   1c0e8:	b	1c0c4 <__assert_fail@plt+0xab6c>
   1c0ec:	ldr	r1, [r2, r3, lsl #5]
   1c0f0:	tst	r1, #1024	; 0x400
   1c0f4:	bne	1c110 <__assert_fail@plt+0xabb8>
   1c0f8:	add	r3, r3, #1
   1c0fc:	ldr	r1, [sp, #8]
   1c100:	cmp	r1, r3
   1c104:	bne	1c0ec <__assert_fail@plt+0xab94>
   1c108:	b	1c130 <__assert_fail@plt+0xabd8>
   1c10c:	mov	r3, #0
   1c110:	add	r2, sp, #14464	; 0x3880
   1c114:	add	r2, r2, #48	; 0x30
   1c118:	add	r3, r2, r3, lsl #2
   1c11c:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   1c120:	str	r3, [r0, #40]	; 0x28
   1c124:	ldr	r2, [sp, #16]
   1c128:	cmp	r2, #0
   1c12c:	strne	r3, [r0, #1064]	; 0x428
   1c130:	add	r3, sp, #11392	; 0x2c80
   1c134:	add	r3, r3, #40	; 0x28
   1c138:	ldr	r0, [r3]
   1c13c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1c140:	mov	r4, #0
   1c144:	ldr	r5, [sp, #20]
   1c148:	ldr	r6, [sp, #8]
   1c14c:	ldr	r0, [r5, #8]
   1c150:	bl	13b40 <__assert_fail@plt+0x25e8>
   1c154:	add	r4, r4, #1
   1c158:	add	r5, r5, #12
   1c15c:	cmp	r6, r4
   1c160:	bne	1c14c <__assert_fail@plt+0xabf4>
   1c164:	mov	r0, #1
   1c168:	b	1bc90 <__assert_fail@plt+0xa738>
   1c16c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c170:	sub	sp, sp, #300	; 0x12c
   1c174:	ldr	r3, [r0]
   1c178:	str	r3, [sp, #4]
   1c17c:	ldr	r3, [r3, #92]	; 0x5c
   1c180:	cmp	r3, #1
   1c184:	ldreq	r3, [r0, #12]
   1c188:	lsreq	r3, r3, #22
   1c18c:	andeq	r3, r3, #1
   1c190:	movne	r3, #0
   1c194:	mov	sl, r3
   1c198:	ldr	r3, [r1, #8]
   1c19c:	cmp	r3, #0
   1c1a0:	ble	1c4dc <__assert_fail@plt+0xaf84>
   1c1a4:	mov	r8, r2
   1c1a8:	str	r1, [sp, #16]
   1c1ac:	str	r0, [sp, #20]
   1c1b0:	mov	r3, #0
   1c1b4:	str	r3, [sp, #8]
   1c1b8:	ldr	fp, [pc, #1020]	; 1c5bc <__assert_fail@plt+0xb064>
   1c1bc:	b	1c470 <__assert_fail@plt+0xaf18>
   1c1c0:	ldrb	r5, [r2, r4, lsl #3]
   1c1c4:	strb	r3, [r8, r5]
   1c1c8:	cmp	sl, #0
   1c1cc:	beq	1c1f0 <__assert_fail@plt+0xac98>
   1c1d0:	add	r3, r5, #128	; 0x80
   1c1d4:	cmp	r3, fp
   1c1d8:	bhi	1c1e8 <__assert_fail@plt+0xac90>
   1c1dc:	bl	113cc <__ctype_tolower_loc@plt>
   1c1e0:	ldr	r3, [r0]
   1c1e4:	ldr	r5, [r3, r5, lsl #2]
   1c1e8:	mov	r3, #1
   1c1ec:	strb	r3, [r8, r5]
   1c1f0:	ldr	r3, [sp, #20]
   1c1f4:	ldr	r3, [r3, #12]
   1c1f8:	tst	r3, #4194304	; 0x400000
   1c1fc:	beq	1c450 <__assert_fail@plt+0xaef8>
   1c200:	ldr	ip, [sp, #4]
   1c204:	ldr	r3, [ip, #92]	; 0x5c
   1c208:	cmp	r3, #1
   1c20c:	ble	1c450 <__assert_fail@plt+0xaef8>
   1c210:	ldr	r3, [ip]
   1c214:	ldrb	r3, [r3, r4, lsl #3]
   1c218:	strb	r3, [sp, #40]	; 0x28
   1c21c:	add	r1, r4, #1
   1c220:	ldr	r3, [ip, #8]
   1c224:	cmp	r1, r3
   1c228:	bcs	1c2fc <__assert_fail@plt+0xada4>
   1c22c:	ldr	r0, [sp, #12]
   1c230:	add	r3, r0, #8
   1c234:	ldr	r2, [ip]
   1c238:	add	r3, r2, r3
   1c23c:	ldr	r2, [r3, #4]
   1c240:	bic	r2, r2, #-16777216	; 0xff000000
   1c244:	bic	r2, r2, #14614528	; 0xdf0000
   1c248:	bic	r2, r2, #65280	; 0xff00
   1c24c:	ldr	lr, [pc, #876]	; 1c5c0 <__assert_fail@plt+0xb068>
   1c250:	cmp	r2, lr
   1c254:	bne	1c304 <__assert_fail@plt+0xadac>
   1c258:	add	r0, r0, #16
   1c25c:	add	r4, sp, #41	; 0x29
   1c260:	ldrb	r3, [r3]
   1c264:	strb	r3, [r4], #1
   1c268:	add	r1, r1, #1
   1c26c:	ldr	r3, [ip, #8]
   1c270:	cmp	r1, r3
   1c274:	bcs	1c2a0 <__assert_fail@plt+0xad48>
   1c278:	ldr	r3, [ip]
   1c27c:	add	r3, r3, r0
   1c280:	add	r0, r0, #8
   1c284:	ldr	r2, [r3, #4]
   1c288:	bic	r2, r2, #-16777216	; 0xff000000
   1c28c:	bic	r2, r2, #14614528	; 0xdf0000
   1c290:	bic	r2, r2, #65280	; 0xff00
   1c294:	ldr	lr, [pc, #804]	; 1c5c0 <__assert_fail@plt+0xb068>
   1c298:	cmp	r2, lr
   1c29c:	beq	1c260 <__assert_fail@plt+0xad08>
   1c2a0:	mov	r3, #0
   1c2a4:	str	r3, [sp, #32]
   1c2a8:	str	r3, [sp, #36]	; 0x24
   1c2ac:	add	r3, sp, #40	; 0x28
   1c2b0:	sub	r4, r4, r3
   1c2b4:	add	r3, sp, #32
   1c2b8:	mov	r2, r4
   1c2bc:	add	r1, sp, #40	; 0x28
   1c2c0:	add	r0, sp, #28
   1c2c4:	bl	24918 <__assert_fail@plt+0x133c0>
   1c2c8:	cmp	r4, r0
   1c2cc:	bne	1c450 <__assert_fail@plt+0xaef8>
   1c2d0:	ldr	r0, [sp, #28]
   1c2d4:	bl	11288 <towlower@plt>
   1c2d8:	add	r2, sp, #32
   1c2dc:	mov	r1, r0
   1c2e0:	add	r0, sp, #40	; 0x28
   1c2e4:	bl	111e0 <wcrtomb@plt>
   1c2e8:	cmn	r0, #1
   1c2ec:	ldrbne	r3, [sp, #40]	; 0x28
   1c2f0:	movne	r2, #1
   1c2f4:	strbne	r2, [r8, r3]
   1c2f8:	b	1c450 <__assert_fail@plt+0xaef8>
   1c2fc:	add	r4, sp, #41	; 0x29
   1c300:	b	1c2a0 <__assert_fail@plt+0xad48>
   1c304:	add	r4, sp, #41	; 0x29
   1c308:	b	1c2a0 <__assert_fail@plt+0xad48>
   1c30c:	mov	r3, #0
   1c310:	str	r3, [sp]
   1c314:	mov	r9, #1
   1c318:	b	1c380 <__assert_fail@plt+0xae28>
   1c31c:	strb	r9, [r8, r3]
   1c320:	add	r4, r4, #1
   1c324:	add	r5, r5, #1
   1c328:	add	r6, r6, #4
   1c32c:	cmp	r4, #32
   1c330:	beq	1c36c <__assert_fail@plt+0xae14>
   1c334:	lsr	r3, r7, r4
   1c338:	tst	r3, #1
   1c33c:	beq	1c320 <__assert_fail@plt+0xadc8>
   1c340:	strb	r9, [r8, r5]
   1c344:	cmp	sl, #0
   1c348:	beq	1c320 <__assert_fail@plt+0xadc8>
   1c34c:	add	r3, r5, #128	; 0x80
   1c350:	cmp	r3, fp
   1c354:	movhi	r3, r5
   1c358:	bhi	1c31c <__assert_fail@plt+0xadc4>
   1c35c:	bl	113cc <__ctype_tolower_loc@plt>
   1c360:	ldr	r3, [r0]
   1c364:	ldr	r3, [r3, r6]
   1c368:	b	1c31c <__assert_fail@plt+0xadc4>
   1c36c:	ldr	r3, [sp]
   1c370:	add	r3, r3, #4
   1c374:	str	r3, [sp]
   1c378:	cmp	r3, #32
   1c37c:	beq	1c450 <__assert_fail@plt+0xaef8>
   1c380:	ldr	r2, [sp]
   1c384:	lsl	r5, r2, #3
   1c388:	ldr	r3, [sp, #4]
   1c38c:	ldr	r3, [r3]
   1c390:	ldr	r1, [sp, #12]
   1c394:	ldr	r3, [r3, r1]
   1c398:	ldr	r7, [r3, r2]
   1c39c:	lsl	r6, r2, #5
   1c3a0:	mov	r4, #0
   1c3a4:	b	1c334 <__assert_fail@plt+0xaddc>
   1c3a8:	ldr	r5, [r2, r4, lsl #3]
   1c3ac:	ldr	r3, [sp, #4]
   1c3b0:	ldr	r3, [r3, #92]	; 0x5c
   1c3b4:	cmp	r3, #1
   1c3b8:	ble	1c3e0 <__assert_fail@plt+0xae88>
   1c3bc:	ldr	r3, [r5, #36]	; 0x24
   1c3c0:	cmp	r3, #0
   1c3c4:	bne	1c400 <__assert_fail@plt+0xaea8>
   1c3c8:	ldrb	r3, [r5, #16]
   1c3cc:	tst	r3, #1
   1c3d0:	bne	1c400 <__assert_fail@plt+0xaea8>
   1c3d4:	ldr	r3, [r5, #32]
   1c3d8:	cmp	r3, #0
   1c3dc:	bne	1c400 <__assert_fail@plt+0xaea8>
   1c3e0:	ldr	r3, [r5, #20]
   1c3e4:	cmp	r3, #0
   1c3e8:	ble	1c450 <__assert_fail@plt+0xaef8>
   1c3ec:	mov	r4, #0
   1c3f0:	mov	r9, r4
   1c3f4:	str	sl, [sp]
   1c3f8:	ldr	sl, [sp, #20]
   1c3fc:	b	1c544 <__assert_fail@plt+0xafec>
   1c400:	mov	r3, #0
   1c404:	strb	r3, [sp, #32]
   1c408:	mov	r4, #0
   1c40c:	mov	r5, #1
   1c410:	str	r4, [sp, #40]	; 0x28
   1c414:	str	r4, [sp, #44]	; 0x2c
   1c418:	add	r3, sp, #40	; 0x28
   1c41c:	mov	r2, r5
   1c420:	add	r1, sp, #32
   1c424:	mov	r0, r4
   1c428:	bl	24918 <__assert_fail@plt+0x133c0>
   1c42c:	cmn	r0, #2
   1c430:	ldrbeq	r3, [sp, #32]
   1c434:	strbeq	r5, [r8, r3]
   1c438:	ldrb	r3, [sp, #32]
   1c43c:	add	r3, r3, #1
   1c440:	uxtb	r3, r3
   1c444:	strb	r3, [sp, #32]
   1c448:	cmp	r3, #0
   1c44c:	bne	1c410 <__assert_fail@plt+0xaeb8>
   1c450:	ldr	r3, [sp, #8]
   1c454:	add	r3, r3, #1
   1c458:	mov	r2, r3
   1c45c:	str	r3, [sp, #8]
   1c460:	ldr	r3, [sp, #16]
   1c464:	ldr	r3, [r3, #8]
   1c468:	cmp	r3, r2
   1c46c:	ble	1c4dc <__assert_fail@plt+0xaf84>
   1c470:	ldr	r3, [sp, #16]
   1c474:	ldr	r3, [r3, #12]
   1c478:	ldr	r2, [sp, #8]
   1c47c:	ldr	r4, [r3, r2, lsl #2]
   1c480:	lsl	r3, r4, #3
   1c484:	str	r3, [sp, #12]
   1c488:	ldr	r2, [sp, #4]
   1c48c:	ldr	r2, [r2]
   1c490:	add	r3, r2, r3
   1c494:	ldrb	r3, [r3, #4]
   1c498:	mov	r5, r3
   1c49c:	cmp	r3, #1
   1c4a0:	beq	1c1c0 <__assert_fail@plt+0xac68>
   1c4a4:	cmp	r3, #3
   1c4a8:	beq	1c30c <__assert_fail@plt+0xadb4>
   1c4ac:	cmp	r3, #6
   1c4b0:	beq	1c3a8 <__assert_fail@plt+0xae50>
   1c4b4:	and	r2, r3, #253	; 0xfd
   1c4b8:	cmp	r3, #2
   1c4bc:	cmpne	r2, #5
   1c4c0:	bne	1c450 <__assert_fail@plt+0xaef8>
   1c4c4:	mov	r2, #256	; 0x100
   1c4c8:	mov	r1, #1
   1c4cc:	mov	r0, r8
   1c4d0:	bl	1145c <memset@plt>
   1c4d4:	cmp	r5, #2
   1c4d8:	beq	1c5a8 <__assert_fail@plt+0xb050>
   1c4dc:	add	sp, sp, #300	; 0x12c
   1c4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4e4:	mov	r3, #1
   1c4e8:	strb	r3, [r8, r6]
   1c4ec:	ldr	r3, [sl, #12]
   1c4f0:	tst	r3, #4194304	; 0x400000
   1c4f4:	beq	1c534 <__assert_fail@plt+0xafdc>
   1c4f8:	ldr	r3, [sp, #4]
   1c4fc:	ldr	r3, [r3, #92]	; 0x5c
   1c500:	cmp	r3, #1
   1c504:	ble	1c534 <__assert_fail@plt+0xafdc>
   1c508:	ldr	r3, [r5]
   1c50c:	ldr	r0, [r3, r7]
   1c510:	bl	11288 <towlower@plt>
   1c514:	add	r2, sp, #32
   1c518:	mov	r1, r0
   1c51c:	add	r0, sp, #40	; 0x28
   1c520:	bl	111e0 <wcrtomb@plt>
   1c524:	cmn	r0, #1
   1c528:	ldrbne	r3, [sp, #40]	; 0x28
   1c52c:	movne	r2, #1
   1c530:	strbne	r2, [r8, r3]
   1c534:	add	r4, r4, #1
   1c538:	ldr	r3, [r5, #20]
   1c53c:	cmp	r3, r4
   1c540:	ble	1c5a0 <__assert_fail@plt+0xb048>
   1c544:	str	r9, [sp, #32]
   1c548:	str	r9, [sp, #36]	; 0x24
   1c54c:	lsl	r7, r4, #2
   1c550:	ldr	r3, [r5]
   1c554:	add	r2, sp, #32
   1c558:	ldr	r1, [r3, r4, lsl #2]
   1c55c:	add	r0, sp, #40	; 0x28
   1c560:	bl	111e0 <wcrtomb@plt>
   1c564:	cmn	r0, #1
   1c568:	beq	1c4ec <__assert_fail@plt+0xaf94>
   1c56c:	ldrb	r6, [sp, #40]	; 0x28
   1c570:	mov	r3, #1
   1c574:	strb	r3, [r8, r6]
   1c578:	ldr	r3, [sp]
   1c57c:	cmp	r3, #0
   1c580:	beq	1c4ec <__assert_fail@plt+0xaf94>
   1c584:	add	r3, r6, #128	; 0x80
   1c588:	cmp	r3, fp
   1c58c:	bhi	1c4e4 <__assert_fail@plt+0xaf8c>
   1c590:	bl	113cc <__ctype_tolower_loc@plt>
   1c594:	ldr	r3, [r0]
   1c598:	ldr	r6, [r3, r6, lsl #2]
   1c59c:	b	1c4e4 <__assert_fail@plt+0xaf8c>
   1c5a0:	ldr	sl, [sp]
   1c5a4:	b	1c450 <__assert_fail@plt+0xaef8>
   1c5a8:	ldr	r2, [sp, #20]
   1c5ac:	ldrb	r3, [r2, #28]
   1c5b0:	orr	r3, r3, #1
   1c5b4:	strb	r3, [r2, #28]
   1c5b8:	b	1c4dc <__assert_fail@plt+0xaf84>
   1c5bc:	andeq	r0, r0, pc, ror r1
   1c5c0:	eoreq	r0, r0, r1
   1c5c4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5c8:	mov	r3, #0
   1c5cc:	str	r3, [r0]
   1c5d0:	ldr	lr, [r2, #4]
   1c5d4:	cmp	lr, r3
   1c5d8:	beq	1c7c0 <__assert_fail@plt+0xb268>
   1c5dc:	mov	r6, lr
   1c5e0:	ble	1c5fc <__assert_fail@plt+0xb0a4>
   1c5e4:	ldr	r3, [r2, #8]
   1c5e8:	add	lr, r3, lr, lsl #2
   1c5ec:	ldr	ip, [r3], #4
   1c5f0:	add	r6, r6, ip
   1c5f4:	cmp	r3, lr
   1c5f8:	bne	1c5ec <__assert_fail@plt+0xb094>
   1c5fc:	mov	sl, r2
   1c600:	mov	r7, r1
   1c604:	mov	r8, r0
   1c608:	ldr	r3, [r1, #68]	; 0x44
   1c60c:	and	r3, r3, r6
   1c610:	add	r3, r3, r3, lsl #1
   1c614:	lsl	r3, r3, #2
   1c618:	ldr	r2, [r1, #32]
   1c61c:	add	r1, r2, r3
   1c620:	ldr	fp, [r2, r3]
   1c624:	cmp	fp, #0
   1c628:	ble	1c670 <__assert_fail@plt+0xb118>
   1c62c:	ldr	r9, [r1, #8]
   1c630:	sub	r9, r9, #4
   1c634:	mov	r5, #0
   1c638:	b	1c648 <__assert_fail@plt+0xb0f0>
   1c63c:	add	r5, r5, #1
   1c640:	cmp	r5, fp
   1c644:	beq	1c670 <__assert_fail@plt+0xb118>
   1c648:	ldr	r4, [r9, #4]!
   1c64c:	ldr	r3, [r4]
   1c650:	cmp	r6, r3
   1c654:	bne	1c63c <__assert_fail@plt+0xb0e4>
   1c658:	mov	r1, sl
   1c65c:	add	r0, r4, #4
   1c660:	bl	1595c <__assert_fail@plt+0x4404>
   1c664:	cmp	r0, #0
   1c668:	beq	1c63c <__assert_fail@plt+0xb0e4>
   1c66c:	b	1c7ac <__assert_fail@plt+0xb254>
   1c670:	mov	r1, #1
   1c674:	mov	r0, #56	; 0x38
   1c678:	bl	24478 <__assert_fail@plt+0x12f20>
   1c67c:	subs	r4, r0, #0
   1c680:	beq	1c6c8 <__assert_fail@plt+0xb170>
   1c684:	add	r5, r4, #4
   1c688:	mov	r1, sl
   1c68c:	mov	r0, r5
   1c690:	bl	16e0c <__assert_fail@plt+0x58b4>
   1c694:	cmp	r0, #0
   1c698:	bne	1c6c0 <__assert_fail@plt+0xb168>
   1c69c:	str	r5, [r4, #40]	; 0x28
   1c6a0:	ldr	lr, [sl, #4]
   1c6a4:	cmp	lr, #0
   1c6a8:	ble	1c794 <__assert_fail@plt+0xb23c>
   1c6ac:	ldr	r5, [r7]
   1c6b0:	ldr	ip, [sl, #8]
   1c6b4:	add	lr, ip, lr, lsl #2
   1c6b8:	ldr	r9, [pc, #264]	; 1c7c8 <__assert_fail@plt+0xb270>
   1c6bc:	b	1c72c <__assert_fail@plt+0xb1d4>
   1c6c0:	mov	r0, r4
   1c6c4:	bl	13b40 <__assert_fail@plt+0x25e8>
   1c6c8:	mov	r3, #12
   1c6cc:	str	r3, [r8]
   1c6d0:	mov	r4, #0
   1c6d4:	b	1c7ac <__assert_fail@plt+0xb254>
   1c6d8:	ldr	r3, [r2, #4]
   1c6dc:	tst	r3, r9
   1c6e0:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c6e4:	ldrb	r0, [r2, #6]
   1c6e8:	ldrb	r3, [r4, #52]	; 0x34
   1c6ec:	lsr	r1, r3, #5
   1c6f0:	orr	r1, r1, r0, lsr #4
   1c6f4:	and	r1, r1, #1
   1c6f8:	bic	r3, r3, #32
   1c6fc:	orr	r3, r3, r1, lsl #5
   1c700:	strb	r3, [r4, #52]	; 0x34
   1c704:	b	1c784 <__assert_fail@plt+0xb22c>
   1c708:	ldrb	r3, [r4, #52]	; 0x34
   1c70c:	orr	r3, r3, #64	; 0x40
   1c710:	strb	r3, [r4, #52]	; 0x34
   1c714:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c718:	ldrb	r3, [r4, #52]	; 0x34
   1c71c:	orr	r3, r3, #128	; 0x80
   1c720:	strb	r3, [r4, #52]	; 0x34
   1c724:	cmp	ip, lr
   1c728:	beq	1c794 <__assert_fail@plt+0xb23c>
   1c72c:	ldr	r2, [ip], #4
   1c730:	add	r2, r5, r2, lsl #3
   1c734:	ldrb	r0, [r2, #4]
   1c738:	cmp	r0, #1
   1c73c:	beq	1c6d8 <__assert_fail@plt+0xb180>
   1c740:	ldrb	r1, [r4, #52]	; 0x34
   1c744:	ldrb	r3, [r2, #6]
   1c748:	lsr	r3, r3, #4
   1c74c:	orr	r3, r3, r1, lsr #5
   1c750:	and	r3, r3, #1
   1c754:	bic	r1, r1, #32
   1c758:	orr	r3, r1, r3, lsl #5
   1c75c:	strb	r3, [r4, #52]	; 0x34
   1c760:	cmp	r0, #2
   1c764:	uxtbeq	r3, r3
   1c768:	orreq	r3, r3, #16
   1c76c:	strbeq	r3, [r4, #52]	; 0x34
   1c770:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c774:	cmp	r0, #4
   1c778:	beq	1c708 <__assert_fail@plt+0xb1b0>
   1c77c:	cmp	r0, #12
   1c780:	beq	1c718 <__assert_fail@plt+0xb1c0>
   1c784:	ldr	r3, [r2, #4]
   1c788:	tst	r3, r9
   1c78c:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c790:	b	1c718 <__assert_fail@plt+0xb1c0>
   1c794:	mov	r2, r6
   1c798:	mov	r1, r4
   1c79c:	mov	r0, r7
   1c7a0:	bl	169b0 <__assert_fail@plt+0x5458>
   1c7a4:	cmp	r0, #0
   1c7a8:	bne	1c7b4 <__assert_fail@plt+0xb25c>
   1c7ac:	mov	r0, r4
   1c7b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7b4:	mov	r0, r4
   1c7b8:	bl	18568 <__assert_fail@plt+0x7010>
   1c7bc:	b	1c6c8 <__assert_fail@plt+0xb170>
   1c7c0:	mov	r4, #0
   1c7c4:	b	1c7ac <__assert_fail@plt+0xb254>
   1c7c8:	andeq	pc, r3, r0, lsl #30
   1c7cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c7d0:	sub	sp, sp, #20
   1c7d4:	subs	r8, r3, #0
   1c7d8:	ble	1c878 <__assert_fail@plt+0xb320>
   1c7dc:	mov	r9, r0
   1c7e0:	mov	r4, r1
   1c7e4:	mov	r5, r2
   1c7e8:	mov	r6, #0
   1c7ec:	b	1c80c <__assert_fail@plt+0xb2b4>
   1c7f0:	ldr	r3, [r5]
   1c7f4:	str	r3, [r4]
   1c7f8:	add	r6, r6, #1
   1c7fc:	add	r4, r4, #4
   1c800:	add	r5, r5, #4
   1c804:	cmp	r8, r6
   1c808:	beq	1c870 <__assert_fail@plt+0xb318>
   1c80c:	ldr	r1, [r4]
   1c810:	cmp	r1, #0
   1c814:	beq	1c7f0 <__assert_fail@plt+0xb298>
   1c818:	ldr	r2, [r5]
   1c81c:	cmp	r2, #0
   1c820:	beq	1c7f8 <__assert_fail@plt+0xb2a0>
   1c824:	add	r2, r2, #4
   1c828:	add	r1, r1, #4
   1c82c:	mov	r0, sp
   1c830:	bl	16e88 <__assert_fail@plt+0x5930>
   1c834:	str	r0, [sp, #12]
   1c838:	cmp	r0, #0
   1c83c:	bne	1c868 <__assert_fail@plt+0xb310>
   1c840:	mov	r2, sp
   1c844:	mov	r1, r9
   1c848:	add	r0, sp, #12
   1c84c:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1c850:	str	r0, [r4]
   1c854:	ldr	r0, [sp, #8]
   1c858:	bl	13b40 <__assert_fail@plt+0x25e8>
   1c85c:	ldr	r0, [sp, #12]
   1c860:	cmp	r0, #0
   1c864:	beq	1c7f8 <__assert_fail@plt+0xb2a0>
   1c868:	add	sp, sp, #20
   1c86c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c870:	mov	r0, #0
   1c874:	b	1c868 <__assert_fail@plt+0xb310>
   1c878:	mov	r0, #0
   1c87c:	b	1c868 <__assert_fail@plt+0xb310>
   1c880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c884:	sub	sp, sp, #28
   1c888:	mov	sl, r0
   1c88c:	mov	r7, r1
   1c890:	mov	r8, r2
   1c894:	str	r3, [sp, #4]
   1c898:	mov	r1, r2
   1c89c:	bl	15ff4 <__assert_fail@plt+0x4a9c>
   1c8a0:	cmn	r0, #1
   1c8a4:	moveq	r0, #0
   1c8a8:	beq	1ca80 <__assert_fail@plt+0xb528>
   1c8ac:	ldr	fp, [sl, #84]	; 0x54
   1c8b0:	add	r0, r0, r0, lsl #1
   1c8b4:	lsl	r0, r0, #3
   1c8b8:	add	r3, r0, #24
   1c8bc:	str	r3, [sp]
   1c8c0:	b	1ca20 <__assert_fail@plt+0xb4c8>
   1c8c4:	ldr	r3, [fp, #20]
   1c8c8:	add	r6, r6, r6, lsl #1
   1c8cc:	add	r6, r3, r6, lsl #2
   1c8d0:	ldr	r3, [r6, #8]
   1c8d4:	ldr	r5, [r3]
   1c8d8:	mov	r1, r5
   1c8dc:	mov	r0, r7
   1c8e0:	bl	159d0 <__assert_fail@plt+0x4478>
   1c8e4:	cmp	r0, #0
   1c8e8:	beq	1c9d0 <__assert_fail@plt+0xb478>
   1c8ec:	add	r4, r4, #24
   1c8f0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1c8f4:	cmp	r3, #0
   1c8f8:	beq	1ca7c <__assert_fail@plt+0xb524>
   1c8fc:	ldr	r6, [r4, #-24]	; 0xffffffe8
   1c900:	mov	r1, r6
   1c904:	mov	r0, r7
   1c908:	bl	159d0 <__assert_fail@plt+0x4478>
   1c90c:	cmp	r0, #0
   1c910:	beq	1c8ec <__assert_fail@plt+0xb394>
   1c914:	ldr	r5, [r4, #-12]
   1c918:	add	r5, r8, r5
   1c91c:	ldr	r3, [r4, #-16]
   1c920:	sub	r5, r5, r3
   1c924:	cmp	r8, r5
   1c928:	beq	1c8c4 <__assert_fail@plt+0xb36c>
   1c92c:	ldr	r3, [fp, #12]
   1c930:	ldr	r9, [r3, r6, lsl #2]
   1c934:	ldr	r3, [sl, #100]	; 0x64
   1c938:	ldr	r6, [r3, r5, lsl #2]
   1c93c:	cmp	r6, #0
   1c940:	beq	1ca60 <__assert_fail@plt+0xb508>
   1c944:	add	r6, r6, #4
   1c948:	mov	r1, r9
   1c94c:	mov	r0, r6
   1c950:	bl	159d0 <__assert_fail@plt+0x4478>
   1c954:	cmp	r0, #0
   1c958:	bne	1c8ec <__assert_fail@plt+0xb394>
   1c95c:	mov	r1, r6
   1c960:	add	r0, sp, #8
   1c964:	bl	16e0c <__assert_fail@plt+0x58b4>
   1c968:	str	r0, [sp, #20]
   1c96c:	mov	r1, r9
   1c970:	add	r0, sp, #8
   1c974:	bl	18d64 <__assert_fail@plt+0x780c>
   1c978:	eor	r0, r0, #1
   1c97c:	ldr	r3, [sp, #20]
   1c980:	cmp	r3, #0
   1c984:	orrne	r0, r0, #1
   1c988:	tst	r0, #255	; 0xff
   1c98c:	bne	1ca48 <__assert_fail@plt+0xb4f0>
   1c990:	ldr	r6, [sl, #100]	; 0x64
   1c994:	add	r2, sp, #8
   1c998:	mov	r1, fp
   1c99c:	add	r0, sp, #20
   1c9a0:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1c9a4:	str	r0, [r6, r5, lsl #2]
   1c9a8:	ldr	r0, [sp, #16]
   1c9ac:	bl	13b40 <__assert_fail@plt+0x25e8>
   1c9b0:	ldr	r3, [sl, #100]	; 0x64
   1c9b4:	ldr	r3, [r3, r5, lsl #2]
   1c9b8:	cmp	r3, #0
   1c9bc:	bne	1c8ec <__assert_fail@plt+0xb394>
   1c9c0:	ldr	r0, [sp, #20]
   1c9c4:	cmp	r0, #0
   1c9c8:	beq	1c8ec <__assert_fail@plt+0xb394>
   1c9cc:	b	1ca80 <__assert_fail@plt+0xb528>
   1c9d0:	mov	r1, r5
   1c9d4:	add	r0, sp, #8
   1c9d8:	bl	1693c <__assert_fail@plt+0x53e4>
   1c9dc:	str	r0, [sp, #20]
   1c9e0:	ldr	r3, [sp, #64]	; 0x40
   1c9e4:	ldr	r2, [sp, #4]
   1c9e8:	add	r1, sp, #8
   1c9ec:	mov	r0, fp
   1c9f0:	bl	19aa4 <__assert_fail@plt+0x854c>
   1c9f4:	mov	r4, r0
   1c9f8:	add	r1, sp, #8
   1c9fc:	mov	r0, r7
   1ca00:	bl	192a8 <__assert_fail@plt+0x7d50>
   1ca04:	mov	r5, r0
   1ca08:	ldr	r0, [sp, #16]
   1ca0c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ca10:	ldr	r0, [sp, #20]
   1ca14:	orr	r3, r4, r5
   1ca18:	orrs	r3, r3, r0
   1ca1c:	bne	1ca30 <__assert_fail@plt+0xb4d8>
   1ca20:	ldr	r4, [sl, #116]	; 0x74
   1ca24:	ldr	r3, [sp]
   1ca28:	add	r4, r4, r3
   1ca2c:	b	1c8fc <__assert_fail@plt+0xb3a4>
   1ca30:	cmp	r0, #0
   1ca34:	bne	1ca80 <__assert_fail@plt+0xb528>
   1ca38:	cmp	r4, #0
   1ca3c:	movne	r0, r4
   1ca40:	moveq	r0, r5
   1ca44:	b	1ca80 <__assert_fail@plt+0xb528>
   1ca48:	ldr	r0, [sp, #16]
   1ca4c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ca50:	ldr	r0, [sp, #20]
   1ca54:	cmp	r0, #0
   1ca58:	moveq	r0, #12
   1ca5c:	b	1ca80 <__assert_fail@plt+0xb528>
   1ca60:	mov	r1, r9
   1ca64:	add	r0, sp, #8
   1ca68:	bl	1693c <__assert_fail@plt+0x53e4>
   1ca6c:	str	r0, [sp, #20]
   1ca70:	cmp	r0, #0
   1ca74:	beq	1c990 <__assert_fail@plt+0xb438>
   1ca78:	b	1ca80 <__assert_fail@plt+0xb528>
   1ca7c:	mov	r0, #0
   1ca80:	add	sp, sp, #28
   1ca84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca8c:	sub	sp, sp, #92	; 0x5c
   1ca90:	mov	sl, r0
   1ca94:	str	r1, [sp, #44]	; 0x2c
   1ca98:	mov	r7, r2
   1ca9c:	mov	r5, r3
   1caa0:	ldr	r3, [r0, #84]	; 0x54
   1caa4:	mov	r2, r3
   1caa8:	str	r3, [sp, #36]	; 0x24
   1caac:	mov	r3, #0
   1cab0:	str	r3, [sp, #84]	; 0x54
   1cab4:	ldr	r3, [r2]
   1cab8:	ldr	r3, [r3, r7, lsl #3]
   1cabc:	str	r3, [sp, #40]	; 0x28
   1cac0:	ldr	r6, [r1, #4]
   1cac4:	ldr	r4, [r0, #120]	; 0x78
   1cac8:	ldr	r3, [sp, #132]	; 0x84
   1cacc:	add	r4, r3, r4
   1cad0:	add	r4, r4, #1
   1cad4:	cmp	r6, r4
   1cad8:	blt	1cbf0 <__assert_fail@plt+0xb698>
   1cadc:	ldr	r3, [sp, #44]	; 0x2c
   1cae0:	ldr	fp, [r3]
   1cae4:	cmp	fp, #0
   1cae8:	beq	1d060 <__assert_fail@plt+0xbb08>
   1caec:	ldr	r2, [sl, #100]	; 0x64
   1caf0:	str	r2, [sp, #48]	; 0x30
   1caf4:	ldr	r2, [sl, #40]	; 0x28
   1caf8:	str	r2, [sp, #52]	; 0x34
   1cafc:	ldr	r6, [r3, #8]
   1cb00:	str	r6, [sl, #100]	; 0x64
   1cb04:	str	fp, [sl, #40]	; 0x28
   1cb08:	str	sl, [sp, #20]
   1cb0c:	ldr	r2, [sl, #88]	; 0x58
   1cb10:	sub	r1, fp, #1
   1cb14:	mov	r0, sl
   1cb18:	bl	1967c <__assert_fail@plt+0x8124>
   1cb1c:	mov	r4, r0
   1cb20:	cmp	fp, r5
   1cb24:	beq	1d098 <__assert_fail@plt+0xbb40>
   1cb28:	ldr	r6, [r6, fp, lsl #2]
   1cb2c:	cmp	r6, #0
   1cb30:	beq	1d104 <__assert_fail@plt+0xbbac>
   1cb34:	ldrb	r3, [r6, #52]	; 0x34
   1cb38:	tst	r3, #64	; 0x40
   1cb3c:	bne	1cc40 <__assert_fail@plt+0xb6e8>
   1cb40:	mov	r3, #0
   1cb44:	str	r3, [sp, #72]	; 0x48
   1cb48:	str	r3, [sp, #76]	; 0x4c
   1cb4c:	str	r3, [sp, #80]	; 0x50
   1cb50:	ldrb	r3, [r6, #52]	; 0x34
   1cb54:	tst	r3, #64	; 0x40
   1cb58:	beq	1cbb4 <__assert_fail@plt+0xb65c>
   1cb5c:	ldr	r3, [sp, #76]	; 0x4c
   1cb60:	cmp	r3, #0
   1cb64:	beq	1cb90 <__assert_fail@plt+0xb638>
   1cb68:	ldr	r3, [sp, #136]	; 0x88
   1cb6c:	str	r3, [sp]
   1cb70:	ldr	r3, [sp, #40]	; 0x28
   1cb74:	mov	r2, fp
   1cb78:	add	r1, sp, #72	; 0x48
   1cb7c:	mov	r0, sl
   1cb80:	bl	1c880 <__assert_fail@plt+0xb328>
   1cb84:	str	r0, [sp, #84]	; 0x54
   1cb88:	cmp	r0, #0
   1cb8c:	bne	1cc5c <__assert_fail@plt+0xb704>
   1cb90:	mov	r3, r4
   1cb94:	add	r2, sp, #72	; 0x48
   1cb98:	ldr	r1, [sp, #36]	; 0x24
   1cb9c:	add	r0, sp, #84	; 0x54
   1cba0:	bl	185c4 <__assert_fail@plt+0x706c>
   1cba4:	subs	r6, r0, #0
   1cba8:	beq	1cc6c <__assert_fail@plt+0xb714>
   1cbac:	ldr	r3, [sl, #100]	; 0x64
   1cbb0:	str	r6, [r3, fp, lsl #2]
   1cbb4:	ldr	r3, [sp, #132]	; 0x84
   1cbb8:	cmp	r3, fp
   1cbbc:	ble	1d030 <__assert_fail@plt+0xbad8>
   1cbc0:	ldr	r3, [sl, #120]	; 0x78
   1cbc4:	cmp	r3, #0
   1cbc8:	blt	1d038 <__assert_fail@plt+0xbae0>
   1cbcc:	add	r3, fp, #1
   1cbd0:	lsl	r3, r3, #2
   1cbd4:	str	r3, [sp, #16]
   1cbd8:	mov	r3, #0
   1cbdc:	str	r3, [sp, #32]
   1cbe0:	mov	r9, r3
   1cbe4:	str	fp, [sp, #12]
   1cbe8:	mov	fp, sl
   1cbec:	b	1cf00 <__assert_fail@plt+0xb9a8>
   1cbf0:	mvn	r3, #-2147483648	; 0x80000000
   1cbf4:	sub	r3, r3, r6
   1cbf8:	cmp	r4, r3
   1cbfc:	bgt	1d048 <__assert_fail@plt+0xbaf0>
   1cc00:	add	r8, r6, r4
   1cc04:	cmn	r8, #-1073741823	; 0xc0000001
   1cc08:	bhi	1d050 <__assert_fail@plt+0xbaf8>
   1cc0c:	lsl	r1, r8, #2
   1cc10:	ldr	r9, [sp, #44]	; 0x2c
   1cc14:	ldr	r0, [r9, #8]
   1cc18:	bl	244f8 <__assert_fail@plt+0x12fa0>
   1cc1c:	cmp	r0, #0
   1cc20:	beq	1d058 <__assert_fail@plt+0xbb00>
   1cc24:	str	r0, [r9, #8]
   1cc28:	str	r8, [r9, #4]
   1cc2c:	lsl	r2, r4, #2
   1cc30:	mov	r1, #0
   1cc34:	add	r0, r0, r6, lsl #2
   1cc38:	bl	1145c <memset@plt>
   1cc3c:	b	1cadc <__assert_fail@plt+0xb584>
   1cc40:	add	r1, r6, #4
   1cc44:	add	r0, sp, #72	; 0x48
   1cc48:	bl	16e0c <__assert_fail@plt+0x58b4>
   1cc4c:	str	r0, [sp, #84]	; 0x54
   1cc50:	cmp	r0, #0
   1cc54:	beq	1cb50 <__assert_fail@plt+0xb5f8>
   1cc58:	b	1cc94 <__assert_fail@plt+0xb73c>
   1cc5c:	ldr	r0, [sp, #80]	; 0x50
   1cc60:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cc64:	ldr	r0, [sp, #84]	; 0x54
   1cc68:	b	1cc94 <__assert_fail@plt+0xb73c>
   1cc6c:	ldr	r3, [sp, #84]	; 0x54
   1cc70:	cmp	r3, #0
   1cc74:	beq	1cbac <__assert_fail@plt+0xb654>
   1cc78:	ldr	r0, [sp, #80]	; 0x50
   1cc7c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cc80:	ldr	r0, [sp, #84]	; 0x54
   1cc84:	b	1cc94 <__assert_fail@plt+0xb73c>
   1cc88:	ldr	r0, [sp, #80]	; 0x50
   1cc8c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cc90:	ldr	r0, [sp, #84]	; 0x54
   1cc94:	add	sp, sp, #92	; 0x5c
   1cc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc9c:	ldr	r3, [sp, #12]
   1cca0:	ldr	r2, [sp, #20]
   1cca4:	mov	r0, r5
   1cca8:	bl	1aab0 <__assert_fail@plt+0x9558>
   1ccac:	mov	r8, r0
   1ccb0:	cmp	r0, #1
   1ccb4:	ble	1cd48 <__assert_fail@plt+0xb7f0>
   1ccb8:	ldr	r3, [r5, #12]
   1ccbc:	ldr	r2, [r3, fp, lsl #2]
   1ccc0:	str	r2, [sp, #24]
   1ccc4:	ldr	r3, [sp, #12]
   1ccc8:	add	r3, r3, r0
   1cccc:	mov	r2, r3
   1ccd0:	str	r3, [sp, #28]
   1ccd4:	ldr	r3, [sl, #100]	; 0x64
   1ccd8:	ldr	r1, [r3, r2, lsl #2]
   1ccdc:	str	r9, [sp, #64]	; 0x40
   1cce0:	cmp	r1, #0
   1cce4:	beq	1cd00 <__assert_fail@plt+0xb7a8>
   1cce8:	add	r1, r1, #4
   1ccec:	add	r0, sp, #60	; 0x3c
   1ccf0:	bl	192a8 <__assert_fail@plt+0x7d50>
   1ccf4:	str	r0, [sp, #56]	; 0x38
   1ccf8:	cmp	r0, #0
   1ccfc:	bne	1cdbc <__assert_fail@plt+0xb864>
   1cd00:	ldr	r1, [sp, #24]
   1cd04:	add	r0, sp, #60	; 0x3c
   1cd08:	bl	18d64 <__assert_fail@plt+0x780c>
   1cd0c:	cmp	r0, #0
   1cd10:	beq	1cddc <__assert_fail@plt+0xb884>
   1cd14:	ldr	r3, [sl, #100]	; 0x64
   1cd18:	str	r3, [sp, #24]
   1cd1c:	add	r2, sp, #60	; 0x3c
   1cd20:	mov	r1, r5
   1cd24:	add	r0, sp, #56	; 0x38
   1cd28:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1cd2c:	ldr	r1, [sp, #24]
   1cd30:	ldr	r2, [sp, #28]
   1cd34:	str	r0, [r1, r2, lsl #2]
   1cd38:	ldr	r3, [sl, #100]	; 0x64
   1cd3c:	ldr	r3, [r3, r2, lsl #2]
   1cd40:	cmp	r3, #0
   1cd44:	beq	1cde8 <__assert_fail@plt+0xb890>
   1cd48:	cmp	r8, #0
   1cd4c:	beq	1cd9c <__assert_fail@plt+0xb844>
   1cd50:	ldr	r3, [r5, #12]
   1cd54:	ldr	r1, [r3, fp, lsl #2]
   1cd58:	add	r0, sp, #72	; 0x48
   1cd5c:	bl	18d64 <__assert_fail@plt+0x780c>
   1cd60:	cmp	r0, #0
   1cd64:	beq	1ce08 <__assert_fail@plt+0xb8b0>
   1cd68:	add	r4, r4, #1
   1cd6c:	ldr	r3, [r6, #20]
   1cd70:	cmp	r4, r3
   1cd74:	bge	1ce28 <__assert_fail@plt+0xb8d0>
   1cd78:	ldr	r3, [r6, #24]
   1cd7c:	ldr	r1, [r3, r4, lsl #2]
   1cd80:	mov	fp, r1
   1cd84:	lsl	r7, r1, #3
   1cd88:	ldr	r3, [r5]
   1cd8c:	add	r3, r3, r7
   1cd90:	ldrb	r3, [r3, #6]
   1cd94:	tst	r3, #16
   1cd98:	bne	1cc9c <__assert_fail@plt+0xb744>
   1cd9c:	ldr	r1, [r5]
   1cda0:	ldr	r2, [sp, #12]
   1cda4:	add	r1, r1, r7
   1cda8:	mov	r0, sl
   1cdac:	bl	19790 <__assert_fail@plt+0x8238>
   1cdb0:	cmp	r0, #0
   1cdb4:	beq	1cd68 <__assert_fail@plt+0xb810>
   1cdb8:	b	1cd50 <__assert_fail@plt+0xb7f8>
   1cdbc:	mov	fp, sl
   1cdc0:	ldr	r0, [sp, #68]	; 0x44
   1cdc4:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cdc8:	ldr	r3, [sp, #56]	; 0x38
   1cdcc:	str	r3, [sp, #84]	; 0x54
   1cdd0:	cmp	r3, #0
   1cdd4:	beq	1ce38 <__assert_fail@plt+0xb8e0>
   1cdd8:	b	1ce18 <__assert_fail@plt+0xb8c0>
   1cddc:	ldr	r0, [sp, #68]	; 0x44
   1cde0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cde4:	b	1ce10 <__assert_fail@plt+0xb8b8>
   1cde8:	ldr	r3, [sp, #56]	; 0x38
   1cdec:	cmp	r3, #0
   1cdf0:	beq	1cd48 <__assert_fail@plt+0xb7f0>
   1cdf4:	mov	fp, sl
   1cdf8:	ldr	r0, [sp, #68]	; 0x44
   1cdfc:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ce00:	ldr	r3, [sp, #56]	; 0x38
   1ce04:	b	1cdcc <__assert_fail@plt+0xb874>
   1ce08:	ldr	r0, [sp, #68]	; 0x44
   1ce0c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ce10:	mov	r3, #12
   1ce14:	str	r3, [sp, #84]	; 0x54
   1ce18:	ldr	r0, [sp, #80]	; 0x50
   1ce1c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ce20:	ldr	r0, [sp, #84]	; 0x54
   1ce24:	b	1cc94 <__assert_fail@plt+0xb73c>
   1ce28:	mov	fp, sl
   1ce2c:	ldr	r0, [sp, #68]	; 0x44
   1ce30:	bl	13b40 <__assert_fail@plt+0x25e8>
   1ce34:	str	r9, [sp, #84]	; 0x54
   1ce38:	ldr	r3, [sp, #12]
   1ce3c:	add	r4, r3, #1
   1ce40:	ldr	r3, [sp, #76]	; 0x4c
   1ce44:	cmp	r3, #0
   1ce48:	beq	1ce94 <__assert_fail@plt+0xb93c>
   1ce4c:	ldr	r3, [sp, #136]	; 0x88
   1ce50:	ldr	r2, [sp, #40]	; 0x28
   1ce54:	add	r1, sp, #72	; 0x48
   1ce58:	ldr	r0, [sp, #36]	; 0x24
   1ce5c:	bl	19aa4 <__assert_fail@plt+0x854c>
   1ce60:	str	r0, [sp, #84]	; 0x54
   1ce64:	cmp	r0, #0
   1ce68:	bne	1cf80 <__assert_fail@plt+0xba28>
   1ce6c:	ldr	r3, [sp, #136]	; 0x88
   1ce70:	str	r3, [sp]
   1ce74:	ldr	r3, [sp, #40]	; 0x28
   1ce78:	mov	r2, r4
   1ce7c:	add	r1, sp, #72	; 0x48
   1ce80:	mov	r0, fp
   1ce84:	bl	1c880 <__assert_fail@plt+0xb328>
   1ce88:	str	r0, [sp, #84]	; 0x54
   1ce8c:	cmp	r0, #0
   1ce90:	bne	1cf90 <__assert_fail@plt+0xba38>
   1ce94:	ldr	r2, [fp, #88]	; 0x58
   1ce98:	ldr	r1, [sp, #12]
   1ce9c:	ldr	r0, [sp, #20]
   1cea0:	bl	1967c <__assert_fail@plt+0x8124>
   1cea4:	mov	r3, r0
   1cea8:	add	r2, sp, #72	; 0x48
   1ceac:	ldr	r1, [sp, #36]	; 0x24
   1ceb0:	add	r0, sp, #84	; 0x54
   1ceb4:	bl	185c4 <__assert_fail@plt+0x706c>
   1ceb8:	subs	r6, r0, #0
   1cebc:	beq	1cfa0 <__assert_fail@plt+0xba48>
   1cec0:	ldr	r3, [fp, #100]	; 0x64
   1cec4:	ldr	r2, [sp, #16]
   1cec8:	str	r6, [r3, r2]
   1cecc:	mov	r3, #0
   1ced0:	str	r3, [sp, #32]
   1ced4:	ldr	r3, [sp, #132]	; 0x84
   1ced8:	cmp	r3, r4
   1cedc:	ble	1d040 <__assert_fail@plt+0xbae8>
   1cee0:	ldr	r3, [sp, #16]
   1cee4:	add	r3, r3, #4
   1cee8:	str	r3, [sp, #16]
   1ceec:	ldr	r3, [fp, #120]	; 0x78
   1cef0:	ldr	r2, [sp, #32]
   1cef4:	cmp	r2, r3
   1cef8:	bgt	1cfd8 <__assert_fail@plt+0xba80>
   1cefc:	str	r4, [sp, #12]
   1cf00:	str	r9, [sp, #76]	; 0x4c
   1cf04:	ldr	r3, [fp, #100]	; 0x64
   1cf08:	ldr	r2, [sp, #16]
   1cf0c:	ldr	r1, [r3, r2]
   1cf10:	cmp	r1, #0
   1cf14:	beq	1d118 <__assert_fail@plt+0xbbc0>
   1cf18:	add	r1, r1, #4
   1cf1c:	add	r0, sp, #72	; 0x48
   1cf20:	bl	192a8 <__assert_fail@plt+0x7d50>
   1cf24:	str	r0, [sp, #84]	; 0x54
   1cf28:	cmp	r0, #0
   1cf2c:	bne	1cc88 <__assert_fail@plt+0xb730>
   1cf30:	cmp	r6, #0
   1cf34:	beq	1ce38 <__assert_fail@plt+0xb8e0>
   1cf38:	ldr	r5, [fp, #84]	; 0x54
   1cf3c:	str	r9, [sp, #56]	; 0x38
   1cf40:	str	r9, [sp, #60]	; 0x3c
   1cf44:	str	r9, [sp, #64]	; 0x40
   1cf48:	str	r9, [sp, #68]	; 0x44
   1cf4c:	ldr	r3, [r6, #20]
   1cf50:	cmp	r3, #0
   1cf54:	ble	1ce2c <__assert_fail@plt+0xb8d4>
   1cf58:	ldr	r3, [r6, #24]
   1cf5c:	ldr	r1, [r3]
   1cf60:	lsl	r7, r1, #3
   1cf64:	ldr	r3, [r5]
   1cf68:	add	r3, r3, r7
   1cf6c:	mov	r4, #0
   1cf70:	mov	r2, fp
   1cf74:	mov	fp, r1
   1cf78:	mov	sl, r2
   1cf7c:	b	1cd90 <__assert_fail@plt+0xb838>
   1cf80:	ldr	r0, [sp, #80]	; 0x50
   1cf84:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cf88:	ldr	r0, [sp, #84]	; 0x54
   1cf8c:	b	1cc94 <__assert_fail@plt+0xb73c>
   1cf90:	ldr	r0, [sp, #80]	; 0x50
   1cf94:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cf98:	ldr	r0, [sp, #84]	; 0x54
   1cf9c:	b	1cc94 <__assert_fail@plt+0xb73c>
   1cfa0:	ldr	r3, [sp, #84]	; 0x54
   1cfa4:	cmp	r3, #0
   1cfa8:	bne	1cfc8 <__assert_fail@plt+0xba70>
   1cfac:	ldr	r3, [fp, #100]	; 0x64
   1cfb0:	ldr	r2, [sp, #16]
   1cfb4:	str	r9, [r3, r2]
   1cfb8:	ldr	r3, [sp, #32]
   1cfbc:	add	r3, r3, #1
   1cfc0:	str	r3, [sp, #32]
   1cfc4:	b	1ced4 <__assert_fail@plt+0xb97c>
   1cfc8:	ldr	r0, [sp, #80]	; 0x50
   1cfcc:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cfd0:	ldr	r0, [sp, #84]	; 0x54
   1cfd4:	b	1cc94 <__assert_fail@plt+0xb73c>
   1cfd8:	mov	sl, fp
   1cfdc:	ldr	r0, [sp, #80]	; 0x50
   1cfe0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1cfe4:	ldr	r3, [sl, #100]	; 0x64
   1cfe8:	ldr	r2, [sp, #132]	; 0x84
   1cfec:	ldr	r3, [r3, r2, lsl #2]
   1cff0:	cmp	r3, #0
   1cff4:	beq	1d0e4 <__assert_fail@plt+0xbb8c>
   1cff8:	ldr	r2, [sp, #44]	; 0x2c
   1cffc:	str	r4, [r2]
   1d000:	ldr	r2, [sp, #48]	; 0x30
   1d004:	str	r2, [sl, #100]	; 0x64
   1d008:	ldr	r2, [sp, #52]	; 0x34
   1d00c:	str	r2, [sl, #40]	; 0x28
   1d010:	adds	r0, r3, #4
   1d014:	moveq	r0, #1
   1d018:	beq	1cc94 <__assert_fail@plt+0xb73c>
   1d01c:	ldr	r1, [sp, #128]	; 0x80
   1d020:	bl	159d0 <__assert_fail@plt+0x4478>
   1d024:	clz	r0, r0
   1d028:	lsr	r0, r0, #5
   1d02c:	b	1cc94 <__assert_fail@plt+0xb73c>
   1d030:	mov	r4, fp
   1d034:	b	1cfdc <__assert_fail@plt+0xba84>
   1d038:	mov	r4, fp
   1d03c:	b	1cfdc <__assert_fail@plt+0xba84>
   1d040:	mov	sl, fp
   1d044:	b	1cfdc <__assert_fail@plt+0xba84>
   1d048:	mov	r0, #12
   1d04c:	b	1cc94 <__assert_fail@plt+0xb73c>
   1d050:	mov	r0, #12
   1d054:	b	1cc94 <__assert_fail@plt+0xb73c>
   1d058:	mov	r0, #12
   1d05c:	b	1cc94 <__assert_fail@plt+0xb73c>
   1d060:	ldr	r3, [sl, #100]	; 0x64
   1d064:	str	r3, [sp, #48]	; 0x30
   1d068:	ldr	r3, [sl, #40]	; 0x28
   1d06c:	str	r3, [sp, #52]	; 0x34
   1d070:	ldr	r3, [sp, #44]	; 0x2c
   1d074:	ldr	r3, [r3, #8]
   1d078:	str	r3, [sl, #100]	; 0x64
   1d07c:	str	r5, [sl, #40]	; 0x28
   1d080:	str	sl, [sp, #20]
   1d084:	ldr	r2, [sl, #88]	; 0x58
   1d088:	sub	r1, r5, #1
   1d08c:	mov	r0, sl
   1d090:	bl	1967c <__assert_fail@plt+0x8124>
   1d094:	mov	r4, r0
   1d098:	mov	r1, r7
   1d09c:	add	r0, sp, #72	; 0x48
   1d0a0:	bl	1693c <__assert_fail@plt+0x53e4>
   1d0a4:	str	r0, [sp, #84]	; 0x54
   1d0a8:	cmp	r0, #0
   1d0ac:	bne	1cc94 <__assert_fail@plt+0xb73c>
   1d0b0:	ldr	r3, [sp, #136]	; 0x88
   1d0b4:	ldr	r2, [sp, #40]	; 0x28
   1d0b8:	add	r1, sp, #72	; 0x48
   1d0bc:	ldr	r0, [sp, #36]	; 0x24
   1d0c0:	bl	19aa4 <__assert_fail@plt+0x854c>
   1d0c4:	str	r0, [sp, #84]	; 0x54
   1d0c8:	cmp	r0, #0
   1d0cc:	moveq	fp, r5
   1d0d0:	beq	1cb5c <__assert_fail@plt+0xb604>
   1d0d4:	ldr	r0, [sp, #80]	; 0x50
   1d0d8:	bl	13b40 <__assert_fail@plt+0x25e8>
   1d0dc:	ldr	r0, [sp, #84]	; 0x54
   1d0e0:	b	1cc94 <__assert_fail@plt+0xb73c>
   1d0e4:	ldr	r3, [sp, #44]	; 0x2c
   1d0e8:	str	r4, [r3]
   1d0ec:	ldr	r3, [sp, #48]	; 0x30
   1d0f0:	str	r3, [sl, #100]	; 0x64
   1d0f4:	ldr	r3, [sp, #52]	; 0x34
   1d0f8:	str	r3, [sl, #40]	; 0x28
   1d0fc:	mov	r0, #1
   1d100:	b	1cc94 <__assert_fail@plt+0xb73c>
   1d104:	mov	r3, #0
   1d108:	str	r3, [sp, #72]	; 0x48
   1d10c:	str	r3, [sp, #76]	; 0x4c
   1d110:	str	r3, [sp, #80]	; 0x50
   1d114:	b	1cbb4 <__assert_fail@plt+0xb65c>
   1d118:	cmp	r6, #0
   1d11c:	bne	1cf38 <__assert_fail@plt+0xb9e0>
   1d120:	ldr	r3, [sp, #12]
   1d124:	add	r4, r3, #1
   1d128:	b	1ce94 <__assert_fail@plt+0xb93c>
   1d12c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d130:	sub	sp, sp, #16
   1d134:	mov	r4, r0
   1d138:	mov	r8, r1
   1d13c:	mov	r6, r2
   1d140:	mov	r9, r3
   1d144:	ldr	r5, [sp, #48]	; 0x30
   1d148:	mov	r1, r2
   1d14c:	ldr	r2, [r1], #8
   1d150:	mov	r3, #8
   1d154:	str	r3, [sp, #8]
   1d158:	str	r5, [sp, #4]
   1d15c:	str	r9, [sp]
   1d160:	ldr	r3, [r6, #4]
   1d164:	bl	1ca88 <__assert_fail@plt+0xb530>
   1d168:	cmp	r0, #0
   1d16c:	beq	1d178 <__assert_fail@plt+0xbc20>
   1d170:	add	sp, sp, #16
   1d174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d178:	ldr	sl, [r8]
   1d17c:	ldr	r7, [r6, #4]
   1d180:	ldr	r1, [r4, #112]	; 0x70
   1d184:	ldr	r3, [r4, #108]	; 0x6c
   1d188:	cmp	r3, r1
   1d18c:	bge	1d278 <__assert_fail@plt+0xbd20>
   1d190:	ldr	r3, [r4, #108]	; 0x6c
   1d194:	cmp	r3, #0
   1d198:	ble	1d1c0 <__assert_fail@plt+0xbc68>
   1d19c:	add	r3, r3, r3, lsl #1
   1d1a0:	lsl	r3, r3, #3
   1d1a4:	sub	r3, r3, #24
   1d1a8:	ldr	r2, [r4, #116]	; 0x74
   1d1ac:	add	r3, r2, r3
   1d1b0:	ldr	r2, [r3, #4]
   1d1b4:	cmp	r5, r2
   1d1b8:	moveq	r2, #1
   1d1bc:	strbeq	r2, [r3, #20]
   1d1c0:	ldr	r3, [r4, #108]	; 0x6c
   1d1c4:	ldr	r2, [r4, #116]	; 0x74
   1d1c8:	add	r3, r3, r3, lsl #1
   1d1cc:	str	r9, [r2, r3, lsl #3]
   1d1d0:	ldr	r3, [r4, #108]	; 0x6c
   1d1d4:	ldr	r2, [r4, #116]	; 0x74
   1d1d8:	add	r3, r3, r3, lsl #1
   1d1dc:	add	r3, r2, r3, lsl #3
   1d1e0:	str	r5, [r3, #4]
   1d1e4:	ldr	r3, [r4, #108]	; 0x6c
   1d1e8:	ldr	r2, [r4, #116]	; 0x74
   1d1ec:	add	r3, r3, r3, lsl #1
   1d1f0:	add	r3, r2, r3, lsl #3
   1d1f4:	str	sl, [r3, #8]
   1d1f8:	ldr	r3, [r4, #108]	; 0x6c
   1d1fc:	ldr	r2, [r4, #116]	; 0x74
   1d200:	add	r3, r3, r3, lsl #1
   1d204:	add	r3, r2, r3, lsl #3
   1d208:	str	r7, [r3, #12]
   1d20c:	ldr	r3, [r4, #108]	; 0x6c
   1d210:	ldr	r2, [r4, #116]	; 0x74
   1d214:	add	r3, r3, r3, lsl #1
   1d218:	add	r3, r2, r3, lsl #3
   1d21c:	cmp	sl, r7
   1d220:	movne	r2, #0
   1d224:	mvneq	r2, #0
   1d228:	str	r2, [r3, #16]
   1d22c:	ldr	r2, [r4, #116]	; 0x74
   1d230:	ldr	r3, [r4, #108]	; 0x6c
   1d234:	add	r1, r3, #1
   1d238:	str	r1, [r4, #108]	; 0x6c
   1d23c:	add	r3, r3, r3, lsl #1
   1d240:	add	r3, r2, r3, lsl #3
   1d244:	mov	r2, #0
   1d248:	strb	r2, [r3, #20]
   1d24c:	sub	r7, r7, sl
   1d250:	ldr	r3, [r4, #120]	; 0x78
   1d254:	cmp	r3, r7
   1d258:	strlt	r7, [r4, #120]	; 0x78
   1d25c:	ldr	r1, [r6, #4]
   1d260:	add	r5, r5, r1
   1d264:	ldr	r1, [r8]
   1d268:	sub	r1, r5, r1
   1d26c:	mov	r0, r4
   1d270:	bl	19a18 <__assert_fail@plt+0x84c0>
   1d274:	b	1d170 <__assert_fail@plt+0xbc18>
   1d278:	add	r1, r1, r1, lsl #1
   1d27c:	lsl	r1, r1, #4
   1d280:	ldr	r0, [r4, #116]	; 0x74
   1d284:	bl	244f8 <__assert_fail@plt+0x12fa0>
   1d288:	cmp	r0, #0
   1d28c:	beq	1d2c4 <__assert_fail@plt+0xbd6c>
   1d290:	str	r0, [r4, #116]	; 0x74
   1d294:	ldr	r2, [r4, #112]	; 0x70
   1d298:	add	r2, r2, r2, lsl #1
   1d29c:	ldr	r3, [r4, #108]	; 0x6c
   1d2a0:	add	r3, r3, r3, lsl #1
   1d2a4:	lsl	r2, r2, #3
   1d2a8:	mov	r1, #0
   1d2ac:	add	r0, r0, r3, lsl #3
   1d2b0:	bl	1145c <memset@plt>
   1d2b4:	ldr	r3, [r4, #112]	; 0x70
   1d2b8:	lsl	r3, r3, #1
   1d2bc:	str	r3, [r4, #112]	; 0x70
   1d2c0:	b	1d190 <__assert_fail@plt+0xbc38>
   1d2c4:	ldr	r0, [r4, #116]	; 0x74
   1d2c8:	bl	13b40 <__assert_fail@plt+0x25e8>
   1d2cc:	mov	r0, #12
   1d2d0:	b	1d170 <__assert_fail@plt+0xbc18>
   1d2d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2d8:	sub	sp, sp, #84	; 0x54
   1d2dc:	ldr	r3, [r0, #84]	; 0x54
   1d2e0:	str	r3, [sp, #32]
   1d2e4:	ldr	r3, [r0, #40]	; 0x28
   1d2e8:	mov	r2, r3
   1d2ec:	str	r3, [sp, #28]
   1d2f0:	ldr	r3, [r1, #4]
   1d2f4:	cmp	r3, #0
   1d2f8:	ble	1d9c0 <__assert_fail@plt+0xc468>
   1d2fc:	mov	sl, r0
   1d300:	lsl	r3, r2, #2
   1d304:	str	r3, [sp, #44]	; 0x2c
   1d308:	mov	r3, #0
   1d30c:	str	r3, [sp, #20]
   1d310:	mov	r8, r1
   1d314:	b	1d954 <__assert_fail@plt+0xc3fc>
   1d318:	tst	r3, #8
   1d31c:	beq	1d328 <__assert_fail@plt+0xbdd0>
   1d320:	tst	r0, #1
   1d324:	bne	1d938 <__assert_fail@plt+0xc3e0>
   1d328:	tst	r3, #32
   1d32c:	beq	1d338 <__assert_fail@plt+0xbde0>
   1d330:	tst	r0, #2
   1d334:	beq	1d938 <__assert_fail@plt+0xc3e0>
   1d338:	tst	r3, #128	; 0x80
   1d33c:	beq	1d348 <__assert_fail@plt+0xbdf0>
   1d340:	tst	r0, #8
   1d344:	beq	1d938 <__assert_fail@plt+0xc3e0>
   1d348:	ldr	fp, [sl, #108]	; 0x6c
   1d34c:	ldr	r1, [sp, #28]
   1d350:	mov	r0, sl
   1d354:	bl	15ff4 <__assert_fail@plt+0x4a9c>
   1d358:	cmn	r0, #1
   1d35c:	beq	1d390 <__assert_fail@plt+0xbe38>
   1d360:	add	r0, r0, r0, lsl #1
   1d364:	lsl	r3, r0, #3
   1d368:	add	r2, r3, #24
   1d36c:	ldr	r3, [sl, #116]	; 0x74
   1d370:	add	r3, r3, r2
   1d374:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1d378:	cmp	r9, r2
   1d37c:	beq	1d700 <__assert_fail@plt+0xc1a8>
   1d380:	add	r3, r3, #24
   1d384:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1d388:	cmp	r2, #0
   1d38c:	bne	1d374 <__assert_fail@plt+0xbe1c>
   1d390:	ldr	r3, [sl, #84]	; 0x54
   1d394:	str	r3, [sp, #48]	; 0x30
   1d398:	ldr	r3, [r3]
   1d39c:	ldr	r3, [r3, r9, lsl #3]
   1d3a0:	str	r3, [sp, #52]	; 0x34
   1d3a4:	ldr	r3, [sl, #124]	; 0x7c
   1d3a8:	cmp	r3, #0
   1d3ac:	ble	1d700 <__assert_fail@plt+0xc1a8>
   1d3b0:	ldr	r3, [sl, #4]
   1d3b4:	mov	r2, #0
   1d3b8:	str	r2, [sp, #40]	; 0x28
   1d3bc:	str	r9, [sp, #36]	; 0x24
   1d3c0:	str	fp, [sp, #56]	; 0x38
   1d3c4:	str	r8, [sp, #60]	; 0x3c
   1d3c8:	mov	r8, r3
   1d3cc:	b	1d4a4 <__assert_fail@plt+0xbf4c>
   1d3d0:	mov	r2, r5
   1d3d4:	ldr	r3, [sp, #24]
   1d3d8:	add	r1, r8, r3
   1d3dc:	add	r0, r8, r6
   1d3e0:	bl	112b8 <memcmp@plt>
   1d3e4:	cmp	r0, #0
   1d3e8:	bne	1d47c <__assert_fail@plt+0xbf24>
   1d3ec:	add	r6, r6, r5
   1d3f0:	ldr	r3, [sp, #28]
   1d3f4:	str	r3, [sp]
   1d3f8:	ldr	r3, [sp, #36]	; 0x24
   1d3fc:	mov	r2, r9
   1d400:	mov	r1, r4
   1d404:	mov	r0, sl
   1d408:	bl	1d12c <__assert_fail@plt+0xbbd4>
   1d40c:	ldr	r8, [sl, #4]
   1d410:	cmp	r0, #1
   1d414:	bhi	1d70c <__assert_fail@plt+0xc1b4>
   1d418:	add	r7, r7, #1
   1d41c:	str	fp, [sp, #24]
   1d420:	ldr	r3, [r4, #16]
   1d424:	cmp	r7, r3
   1d428:	bge	1d4f0 <__assert_fail@plt+0xbf98>
   1d42c:	ldr	r3, [r4, #20]
   1d430:	ldr	r9, [r3, r7, lsl #2]
   1d434:	ldr	fp, [r9, #4]
   1d438:	ldr	r3, [sp, #24]
   1d43c:	sub	r5, fp, r3
   1d440:	cmp	r5, #0
   1d444:	ble	1d3ec <__assert_fail@plt+0xbe94>
   1d448:	add	r1, r6, r5
   1d44c:	ldr	r3, [sl, #28]
   1d450:	cmp	r1, r3
   1d454:	ble	1d3d0 <__assert_fail@plt+0xbe78>
   1d458:	ldr	r3, [sl, #48]	; 0x30
   1d45c:	cmp	r1, r3
   1d460:	bgt	1d47c <__assert_fail@plt+0xbf24>
   1d464:	mov	r0, sl
   1d468:	bl	19a18 <__assert_fail@plt+0x84c0>
   1d46c:	cmp	r0, #0
   1d470:	bne	1d6c4 <__assert_fail@plt+0xc16c>
   1d474:	ldr	r8, [sl, #4]
   1d478:	b	1d3d0 <__assert_fail@plt+0xbe78>
   1d47c:	ldr	r3, [r4, #16]
   1d480:	cmp	r3, r7
   1d484:	ble	1d4ec <__assert_fail@plt+0xbf94>
   1d488:	ldr	r3, [sp, #40]	; 0x28
   1d48c:	add	r3, r3, #1
   1d490:	mov	r2, r3
   1d494:	str	r3, [sp, #40]	; 0x28
   1d498:	ldr	r3, [sl, #124]	; 0x7c
   1d49c:	cmp	r2, r3
   1d4a0:	bge	1d6f4 <__assert_fail@plt+0xc19c>
   1d4a4:	ldr	r3, [sl, #132]	; 0x84
   1d4a8:	ldr	r2, [sp, #40]	; 0x28
   1d4ac:	ldr	r4, [r3, r2, lsl #2]
   1d4b0:	ldr	r2, [r4, #4]
   1d4b4:	ldr	r3, [sp, #48]	; 0x30
   1d4b8:	ldr	r3, [r3]
   1d4bc:	ldr	r3, [r3, r2, lsl #3]
   1d4c0:	ldr	r2, [sp, #52]	; 0x34
   1d4c4:	cmp	r2, r3
   1d4c8:	bne	1d488 <__assert_fail@plt+0xbf30>
   1d4cc:	ldr	r3, [r4]
   1d4d0:	str	r3, [sp, #24]
   1d4d4:	ldr	r3, [r4, #16]
   1d4d8:	cmp	r3, #0
   1d4dc:	ble	1d510 <__assert_fail@plt+0xbfb8>
   1d4e0:	ldr	r6, [sp, #28]
   1d4e4:	mov	r7, #0
   1d4e8:	b	1d42c <__assert_fail@plt+0xbed4>
   1d4ec:	ldr	fp, [sp, #24]
   1d4f0:	cmp	r7, #0
   1d4f4:	addgt	fp, fp, #1
   1d4f8:	ldr	r3, [sp, #28]
   1d4fc:	cmp	r3, fp
   1d500:	blt	1d488 <__assert_fail@plt+0xbf30>
   1d504:	lsl	r9, fp, #2
   1d508:	ldr	r7, [sp, #52]	; 0x34
   1d50c:	b	1d634 <__assert_fail@plt+0xc0dc>
   1d510:	ldr	r6, [sp, #28]
   1d514:	ldr	fp, [sp, #24]
   1d518:	b	1d4f8 <__assert_fail@plt+0xbfa0>
   1d51c:	ldr	r3, [sl, #48]	; 0x30
   1d520:	cmp	r3, r6
   1d524:	ble	1d488 <__assert_fail@plt+0xbf30>
   1d528:	add	r1, r6, #1
   1d52c:	mov	r0, sl
   1d530:	bl	17660 <__assert_fail@plt+0x6108>
   1d534:	cmp	r0, #0
   1d538:	bne	1d6c4 <__assert_fail@plt+0xc16c>
   1d53c:	ldr	r8, [sl, #4]
   1d540:	b	1d650 <__assert_fail@plt+0xc0f8>
   1d544:	add	r3, r3, #1
   1d548:	cmp	ip, r3
   1d54c:	beq	1d620 <__assert_fail@plt+0xc0c8>
   1d550:	ldr	r5, [r2, #4]!
   1d554:	add	r1, r0, r5, lsl #3
   1d558:	ldrb	r1, [r1, #4]
   1d55c:	cmp	r1, #9
   1d560:	bne	1d544 <__assert_fail@plt+0xbfec>
   1d564:	ldr	r1, [r0, r5, lsl #3]
   1d568:	cmp	r7, r1
   1d56c:	bne	1d544 <__assert_fail@plt+0xbfec>
   1d570:	cmn	r5, #1
   1d574:	beq	1d620 <__assert_fail@plt+0xc0c8>
   1d578:	ldr	r3, [r4, #8]
   1d57c:	cmp	r3, #0
   1d580:	beq	1d6a0 <__assert_fail@plt+0xc148>
   1d584:	ldr	r3, [r4]
   1d588:	ldr	r2, [r4, #4]
   1d58c:	ldr	r1, [r4, #8]
   1d590:	mov	r0, #9
   1d594:	str	r0, [sp, #8]
   1d598:	str	fp, [sp, #4]
   1d59c:	str	r5, [sp]
   1d5a0:	mov	r0, sl
   1d5a4:	bl	1ca88 <__assert_fail@plt+0xb530>
   1d5a8:	cmp	r0, #1
   1d5ac:	beq	1d620 <__assert_fail@plt+0xc0c8>
   1d5b0:	cmp	r0, #0
   1d5b4:	bne	1d6c4 <__assert_fail@plt+0xc16c>
   1d5b8:	ldr	r3, [r4, #16]
   1d5bc:	ldr	r2, [r4, #12]
   1d5c0:	cmp	r3, r2
   1d5c4:	beq	1d6cc <__assert_fail@plt+0xc174>
   1d5c8:	mov	r1, #20
   1d5cc:	mov	r0, #1
   1d5d0:	bl	24478 <__assert_fail@plt+0x12f20>
   1d5d4:	subs	r2, r0, #0
   1d5d8:	beq	1d9cc <__assert_fail@plt+0xc474>
   1d5dc:	ldr	r1, [r4, #16]
   1d5e0:	ldr	r3, [r4, #20]
   1d5e4:	str	r2, [r3, r1, lsl #2]
   1d5e8:	str	r5, [r2]
   1d5ec:	str	fp, [r2, #4]
   1d5f0:	ldr	r3, [r4, #16]
   1d5f4:	add	r3, r3, #1
   1d5f8:	str	r3, [r4, #16]
   1d5fc:	ldr	r3, [sp, #28]
   1d600:	str	r3, [sp]
   1d604:	ldr	r3, [sp, #36]	; 0x24
   1d608:	mov	r1, r4
   1d60c:	mov	r0, sl
   1d610:	bl	1d12c <__assert_fail@plt+0xbbd4>
   1d614:	ldr	r8, [sl, #4]
   1d618:	cmp	r0, #1
   1d61c:	bhi	1d75c <__assert_fail@plt+0xc204>
   1d620:	add	fp, fp, #1
   1d624:	add	r9, r9, #4
   1d628:	ldr	r3, [sp, #28]
   1d62c:	cmp	r3, fp
   1d630:	blt	1d488 <__assert_fail@plt+0xbf30>
   1d634:	ldr	r3, [r4]
   1d638:	sub	r3, fp, r3
   1d63c:	cmp	r3, #0
   1d640:	ble	1d66c <__assert_fail@plt+0xc114>
   1d644:	ldr	r3, [sl, #28]
   1d648:	cmp	r3, r6
   1d64c:	ble	1d51c <__assert_fail@plt+0xbfc4>
   1d650:	add	r2, r6, #1
   1d654:	add	r3, r8, fp
   1d658:	ldrb	r1, [r8, r6]
   1d65c:	ldrb	r3, [r3, #-1]
   1d660:	cmp	r1, r3
   1d664:	bne	1d488 <__assert_fail@plt+0xbf30>
   1d668:	mov	r6, r2
   1d66c:	ldr	r3, [sl, #100]	; 0x64
   1d670:	ldr	r3, [r3, r9]
   1d674:	cmp	r3, #0
   1d678:	beq	1d620 <__assert_fail@plt+0xc0c8>
   1d67c:	ldr	ip, [r3, #8]
   1d680:	cmp	ip, #0
   1d684:	ble	1d620 <__assert_fail@plt+0xc0c8>
   1d688:	ldr	r2, [sp, #48]	; 0x30
   1d68c:	ldr	r0, [r2]
   1d690:	ldr	r2, [r3, #12]
   1d694:	sub	r2, r2, #4
   1d698:	mov	r3, #0
   1d69c:	b	1d550 <__assert_fail@plt+0xbff8>
   1d6a0:	ldr	r1, [r4]
   1d6a4:	sub	r1, fp, r1
   1d6a8:	add	r1, r1, #1
   1d6ac:	mov	r0, #12
   1d6b0:	bl	24478 <__assert_fail@plt+0x12f20>
   1d6b4:	str	r0, [r4, #8]
   1d6b8:	cmp	r0, #0
   1d6bc:	bne	1d584 <__assert_fail@plt+0xc02c>
   1d6c0:	mov	r0, #12
   1d6c4:	str	r0, [sp, #76]	; 0x4c
   1d6c8:	b	1d7ac <__assert_fail@plt+0xc254>
   1d6cc:	lsl	r3, r3, #1
   1d6d0:	add	r8, r3, #1
   1d6d4:	lsl	r1, r8, #2
   1d6d8:	ldr	r0, [r4, #20]
   1d6dc:	bl	244f8 <__assert_fail@plt+0x12fa0>
   1d6e0:	cmp	r0, #0
   1d6e4:	beq	1d9cc <__assert_fail@plt+0xc474>
   1d6e8:	str	r0, [r4, #20]
   1d6ec:	str	r8, [r4, #12]
   1d6f0:	b	1d5c8 <__assert_fail@plt+0xc070>
   1d6f4:	ldr	r9, [sp, #36]	; 0x24
   1d6f8:	ldr	fp, [sp, #56]	; 0x38
   1d6fc:	ldr	r8, [sp, #60]	; 0x3c
   1d700:	mov	r3, #0
   1d704:	str	r3, [sp, #76]	; 0x4c
   1d708:	b	1d724 <__assert_fail@plt+0xc1cc>
   1d70c:	ldr	r9, [sp, #36]	; 0x24
   1d710:	ldr	fp, [sp, #56]	; 0x38
   1d714:	ldr	r8, [sp, #60]	; 0x3c
   1d718:	str	r0, [sp, #76]	; 0x4c
   1d71c:	cmp	r0, #0
   1d720:	bne	1d7ac <__assert_fail@plt+0xc254>
   1d724:	lsl	r3, r9, #2
   1d728:	str	r3, [sp, #52]	; 0x34
   1d72c:	ldr	r3, [sl, #108]	; 0x6c
   1d730:	cmp	fp, r3
   1d734:	bge	1d938 <__assert_fail@plt+0xc3e0>
   1d738:	add	r3, r9, r9, lsl #1
   1d73c:	lsl	r3, r3, #2
   1d740:	str	r3, [sp, #56]	; 0x38
   1d744:	add	r4, fp, fp, lsl #1
   1d748:	lsl	r4, r4, #3
   1d74c:	ldr	r6, [sp, #28]
   1d750:	str	r8, [sp, #60]	; 0x3c
   1d754:	ldr	r8, [sp, #32]
   1d758:	b	1d7dc <__assert_fail@plt+0xc284>
   1d75c:	ldr	r9, [sp, #36]	; 0x24
   1d760:	ldr	fp, [sp, #56]	; 0x38
   1d764:	ldr	r8, [sp, #60]	; 0x3c
   1d768:	b	1d718 <__assert_fail@plt+0xc1c0>
   1d76c:	ldr	r3, [sp, #40]	; 0x28
   1d770:	ldr	r2, [sp, #24]
   1d774:	mov	r1, r8
   1d778:	add	r0, sp, #76	; 0x4c
   1d77c:	bl	185c4 <__assert_fail@plt+0x706c>
   1d780:	str	r0, [r7, r5, lsl #2]
   1d784:	ldr	r3, [sl, #100]	; 0x64
   1d788:	ldr	r3, [r3, r5, lsl #2]
   1d78c:	cmp	r3, #0
   1d790:	bne	1d8d0 <__assert_fail@plt+0xc378>
   1d794:	ldr	r3, [sp, #76]	; 0x4c
   1d798:	cmp	r3, #0
   1d79c:	beq	1d8d0 <__assert_fail@plt+0xc378>
   1d7a0:	b	1d7ac <__assert_fail@plt+0xc254>
   1d7a4:	ldr	r0, [sp, #72]	; 0x48
   1d7a8:	bl	13b40 <__assert_fail@plt+0x25e8>
   1d7ac:	ldr	r0, [sp, #76]	; 0x4c
   1d7b0:	add	sp, sp, #84	; 0x54
   1d7b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7b8:	ldr	r3, [sp, #76]	; 0x4c
   1d7bc:	cmp	r3, #0
   1d7c0:	beq	1d8d0 <__assert_fail@plt+0xc378>
   1d7c4:	b	1d7ac <__assert_fail@plt+0xc254>
   1d7c8:	add	fp, fp, #1
   1d7cc:	add	r4, r4, #24
   1d7d0:	ldr	r3, [sl, #108]	; 0x6c
   1d7d4:	cmp	r3, fp
   1d7d8:	ble	1d934 <__assert_fail@plt+0xc3dc>
   1d7dc:	ldr	r3, [sl, #116]	; 0x74
   1d7e0:	add	r2, r3, r4
   1d7e4:	ldr	r3, [r3, r4]
   1d7e8:	cmp	r9, r3
   1d7ec:	bne	1d7c8 <__assert_fail@plt+0xc270>
   1d7f0:	ldr	r3, [r2, #4]
   1d7f4:	cmp	r6, r3
   1d7f8:	bne	1d7c8 <__assert_fail@plt+0xc270>
   1d7fc:	ldr	r3, [r2, #12]
   1d800:	ldr	r5, [r2, #8]
   1d804:	subs	r2, r3, r5
   1d808:	str	r2, [sp, #36]	; 0x24
   1d80c:	ldreq	r2, [r8, #20]
   1d810:	ldreq	r1, [sp, #56]	; 0x38
   1d814:	addeq	r2, r2, r1
   1d818:	ldreq	r2, [r2, #8]
   1d81c:	ldreq	r2, [r2]
   1d820:	ldrne	r2, [r8, #12]
   1d824:	ldrne	r1, [sp, #52]	; 0x34
   1d828:	ldrne	r2, [r2, r1]
   1d82c:	add	r2, r2, r2, lsl #1
   1d830:	ldr	r1, [r8, #24]
   1d834:	add	r2, r1, r2, lsl #2
   1d838:	str	r2, [sp, #24]
   1d83c:	add	r3, r6, r3
   1d840:	sub	r5, r3, r5
   1d844:	ldr	r2, [sl, #88]	; 0x58
   1d848:	sub	r1, r5, #1
   1d84c:	mov	r0, sl
   1d850:	bl	1967c <__assert_fail@plt+0x8124>
   1d854:	str	r0, [sp, #40]	; 0x28
   1d858:	ldr	r7, [sl, #100]	; 0x64
   1d85c:	ldr	r3, [r7, r5, lsl #2]
   1d860:	ldr	r2, [sp, #44]	; 0x2c
   1d864:	ldr	r2, [r7, r2]
   1d868:	cmp	r2, #0
   1d86c:	ldrne	r2, [r2, #8]
   1d870:	moveq	r2, #0
   1d874:	str	r2, [sp, #48]	; 0x30
   1d878:	cmp	r3, #0
   1d87c:	beq	1d76c <__assert_fail@plt+0xc214>
   1d880:	ldr	r2, [sp, #24]
   1d884:	ldr	r1, [r3, #40]	; 0x28
   1d888:	add	r0, sp, #64	; 0x40
   1d88c:	bl	16e88 <__assert_fail@plt+0x5930>
   1d890:	str	r0, [sp, #76]	; 0x4c
   1d894:	cmp	r0, #0
   1d898:	bne	1d7a4 <__assert_fail@plt+0xc24c>
   1d89c:	ldr	r7, [sl, #100]	; 0x64
   1d8a0:	ldr	r3, [sp, #40]	; 0x28
   1d8a4:	add	r2, sp, #64	; 0x40
   1d8a8:	mov	r1, r8
   1d8ac:	add	r0, sp, #76	; 0x4c
   1d8b0:	bl	185c4 <__assert_fail@plt+0x706c>
   1d8b4:	str	r0, [r7, r5, lsl #2]
   1d8b8:	ldr	r0, [sp, #72]	; 0x48
   1d8bc:	bl	13b40 <__assert_fail@plt+0x25e8>
   1d8c0:	ldr	r3, [sl, #100]	; 0x64
   1d8c4:	ldr	r3, [r3, r5, lsl #2]
   1d8c8:	cmp	r3, #0
   1d8cc:	beq	1d7b8 <__assert_fail@plt+0xc260>
   1d8d0:	ldr	r3, [sp, #36]	; 0x24
   1d8d4:	cmp	r3, #0
   1d8d8:	bne	1d7c8 <__assert_fail@plt+0xc270>
   1d8dc:	ldr	r3, [sl, #100]	; 0x64
   1d8e0:	ldr	r2, [sp, #44]	; 0x2c
   1d8e4:	ldr	r3, [r3, r2]
   1d8e8:	ldr	r3, [r3, #8]
   1d8ec:	ldr	r2, [sp, #48]	; 0x30
   1d8f0:	cmp	r2, r3
   1d8f4:	bge	1d7c8 <__assert_fail@plt+0xc270>
   1d8f8:	mov	r2, r6
   1d8fc:	ldr	r5, [sp, #24]
   1d900:	mov	r1, r5
   1d904:	mov	r0, sl
   1d908:	bl	19910 <__assert_fail@plt+0x83b8>
   1d90c:	str	r0, [sp, #76]	; 0x4c
   1d910:	cmp	r0, #0
   1d914:	bne	1d7ac <__assert_fail@plt+0xc254>
   1d918:	mov	r1, r5
   1d91c:	mov	r0, sl
   1d920:	bl	1d2d4 <__assert_fail@plt+0xbd7c>
   1d924:	str	r0, [sp, #76]	; 0x4c
   1d928:	cmp	r0, #0
   1d92c:	beq	1d7c8 <__assert_fail@plt+0xc270>
   1d930:	b	1d7ac <__assert_fail@plt+0xc254>
   1d934:	ldr	r8, [sp, #60]	; 0x3c
   1d938:	ldr	r3, [sp, #20]
   1d93c:	add	r3, r3, #1
   1d940:	mov	r2, r3
   1d944:	str	r3, [sp, #20]
   1d948:	ldr	r3, [r8, #4]
   1d94c:	cmp	r3, r2
   1d950:	ble	1d9c0 <__assert_fail@plt+0xc468>
   1d954:	ldr	r3, [r8, #8]
   1d958:	ldr	r2, [sp, #20]
   1d95c:	ldr	r9, [r3, r2, lsl #2]
   1d960:	ldr	r3, [sp, #32]
   1d964:	ldr	r4, [r3]
   1d968:	add	r4, r4, r9, lsl #3
   1d96c:	ldrb	r3, [r4, #4]
   1d970:	cmp	r3, #4
   1d974:	bne	1d938 <__assert_fail@plt+0xc3e0>
   1d978:	ldr	r3, [r4, #4]
   1d97c:	ldr	r2, [pc, #84]	; 1d9d8 <__assert_fail@plt+0xc480>
   1d980:	tst	r3, r2
   1d984:	beq	1d348 <__assert_fail@plt+0xbdf0>
   1d988:	ldr	r2, [sl, #88]	; 0x58
   1d98c:	ldr	r1, [sp, #28]
   1d990:	mov	r0, sl
   1d994:	bl	1967c <__assert_fail@plt+0x8124>
   1d998:	ldr	r3, [r4, #4]
   1d99c:	lsl	r3, r3, #14
   1d9a0:	lsr	r3, r3, #22
   1d9a4:	tst	r3, #4
   1d9a8:	beq	1d318 <__assert_fail@plt+0xbdc0>
   1d9ac:	tst	r0, #1
   1d9b0:	beq	1d938 <__assert_fail@plt+0xc3e0>
   1d9b4:	tst	r3, #8
   1d9b8:	bne	1d938 <__assert_fail@plt+0xc3e0>
   1d9bc:	b	1d328 <__assert_fail@plt+0xbdd0>
   1d9c0:	mov	r3, #0
   1d9c4:	str	r3, [sp, #76]	; 0x4c
   1d9c8:	b	1d7ac <__assert_fail@plt+0xc254>
   1d9cc:	mov	r3, #12
   1d9d0:	str	r3, [sp, #76]	; 0x4c
   1d9d4:	b	1d7ac <__assert_fail@plt+0xc254>
   1d9d8:	andeq	pc, r3, r0, lsl #30
   1d9dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d9e0:	sub	sp, sp, #16
   1d9e4:	mov	r8, r0
   1d9e8:	mov	r4, r1
   1d9ec:	mov	r5, r2
   1d9f0:	ldr	r7, [r1, #84]	; 0x54
   1d9f4:	ldr	r6, [r1, #40]	; 0x28
   1d9f8:	ldr	r3, [r1, #104]	; 0x68
   1d9fc:	cmp	r6, r3
   1da00:	ble	1da5c <__assert_fail@plt+0xc504>
   1da04:	ldr	r3, [r1, #100]	; 0x64
   1da08:	str	r2, [r3, r6, lsl #2]
   1da0c:	str	r6, [r1, #104]	; 0x68
   1da10:	ldr	r3, [r7, #76]	; 0x4c
   1da14:	cmp	r3, #0
   1da18:	cmpne	r5, #0
   1da1c:	moveq	r0, r5
   1da20:	beq	1da54 <__assert_fail@plt+0xc4fc>
   1da24:	add	r7, r5, #4
   1da28:	mov	r2, r6
   1da2c:	mov	r1, r7
   1da30:	mov	r0, r4
   1da34:	bl	19910 <__assert_fail@plt+0x83b8>
   1da38:	str	r0, [r8]
   1da3c:	cmp	r0, #0
   1da40:	bne	1db44 <__assert_fail@plt+0xc5ec>
   1da44:	ldrb	r3, [r5, #52]	; 0x34
   1da48:	tst	r3, #64	; 0x40
   1da4c:	moveq	r0, r5
   1da50:	bne	1db20 <__assert_fail@plt+0xc5c8>
   1da54:	add	sp, sp, #16
   1da58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da5c:	ldr	r9, [r1, #100]	; 0x64
   1da60:	ldr	r3, [r9, r6, lsl #2]
   1da64:	cmp	r3, #0
   1da68:	streq	r2, [r9, r6, lsl #2]
   1da6c:	beq	1da10 <__assert_fail@plt+0xc4b8>
   1da70:	ldr	r2, [r3, #40]	; 0x28
   1da74:	cmp	r5, #0
   1da78:	beq	1dae4 <__assert_fail@plt+0xc58c>
   1da7c:	ldr	r9, [r5, #40]	; 0x28
   1da80:	mov	r1, r9
   1da84:	add	r0, sp, #4
   1da88:	bl	16e88 <__assert_fail@plt+0x5930>
   1da8c:	str	r0, [r8]
   1da90:	cmp	r0, #0
   1da94:	movne	r0, #0
   1da98:	bne	1da54 <__assert_fail@plt+0xc4fc>
   1da9c:	ldr	r1, [r4, #40]	; 0x28
   1daa0:	ldr	r2, [r4, #88]	; 0x58
   1daa4:	sub	r1, r1, #1
   1daa8:	mov	r0, r4
   1daac:	bl	1967c <__assert_fail@plt+0x8124>
   1dab0:	ldr	sl, [r4, #100]	; 0x64
   1dab4:	mov	r3, r0
   1dab8:	add	r2, sp, #4
   1dabc:	mov	r1, r7
   1dac0:	mov	r0, r8
   1dac4:	bl	185c4 <__assert_fail@plt+0x706c>
   1dac8:	mov	r5, r0
   1dacc:	str	r0, [sl, r6, lsl #2]
   1dad0:	cmp	r9, #0
   1dad4:	beq	1da10 <__assert_fail@plt+0xc4b8>
   1dad8:	ldr	r0, [sp, #12]
   1dadc:	bl	13b40 <__assert_fail@plt+0x25e8>
   1dae0:	b	1da10 <__assert_fail@plt+0xc4b8>
   1dae4:	add	r5, sp, #4
   1dae8:	ldm	r2, {r0, r1, r2}
   1daec:	stm	r5, {r0, r1, r2}
   1daf0:	ldr	r2, [r4, #88]	; 0x58
   1daf4:	sub	r1, r6, #1
   1daf8:	mov	r0, r4
   1dafc:	bl	1967c <__assert_fail@plt+0x8124>
   1db00:	mov	r3, r0
   1db04:	mov	r2, r5
   1db08:	mov	r1, r7
   1db0c:	mov	r0, r8
   1db10:	bl	185c4 <__assert_fail@plt+0x706c>
   1db14:	mov	r5, r0
   1db18:	str	r0, [r9, r6, lsl #2]
   1db1c:	b	1da10 <__assert_fail@plt+0xc4b8>
   1db20:	mov	r1, r7
   1db24:	mov	r0, r4
   1db28:	bl	1d2d4 <__assert_fail@plt+0xbd7c>
   1db2c:	str	r0, [r8]
   1db30:	cmp	r0, #0
   1db34:	bne	1db4c <__assert_fail@plt+0xc5f4>
   1db38:	ldr	r3, [r4, #100]	; 0x64
   1db3c:	ldr	r0, [r3, r6, lsl #2]
   1db40:	b	1da54 <__assert_fail@plt+0xc4fc>
   1db44:	mov	r0, #0
   1db48:	b	1da54 <__assert_fail@plt+0xc4fc>
   1db4c:	mov	r0, #0
   1db50:	b	1da54 <__assert_fail@plt+0xc4fc>
   1db54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db58:	sub	sp, sp, #92	; 0x5c
   1db5c:	str	r0, [sp, #28]
   1db60:	mov	sl, r1
   1db64:	mov	fp, r2
   1db68:	mov	r5, r3
   1db6c:	ldr	r6, [r0, #84]	; 0x54
   1db70:	mov	r3, #0
   1db74:	str	r3, [sp, #84]	; 0x54
   1db78:	lsl	r3, r2, #2
   1db7c:	str	r3, [sp, #32]
   1db80:	ldr	r3, [r0, #100]	; 0x64
   1db84:	ldr	r3, [r3, r2, lsl #2]
   1db88:	cmp	r3, #0
   1db8c:	addne	r3, r3, #4
   1db90:	moveq	r3, #0
   1db94:	str	r3, [sp, #12]
   1db98:	ldr	r3, [r5, #4]
   1db9c:	cmp	r3, #0
   1dba0:	bne	1dbe8 <__assert_fail@plt+0xc690>
   1dba4:	ldr	r3, [r1]
   1dba8:	mov	r2, #0
   1dbac:	str	r2, [r3, fp, lsl #2]
   1dbb0:	ldr	r3, [sp, #12]
   1dbb4:	cmp	r3, #0
   1dbb8:	moveq	r4, #0
   1dbbc:	beq	1dbdc <__assert_fail@plt+0xc684>
   1dbc0:	ldr	r3, [sp, #28]
   1dbc4:	ldr	r3, [r3, #100]	; 0x64
   1dbc8:	ldr	r3, [r3, fp, lsl #2]
   1dbcc:	ldrb	r3, [r3, #52]	; 0x34
   1dbd0:	tst	r3, #64	; 0x40
   1dbd4:	moveq	r4, #0
   1dbd8:	bne	1de90 <__assert_fail@plt+0xc938>
   1dbdc:	mov	r0, r4
   1dbe0:	add	sp, sp, #92	; 0x5c
   1dbe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbe8:	ldr	r3, [sp, #12]
   1dbec:	cmp	r3, #0
   1dbf0:	beq	1de68 <__assert_fail@plt+0xc910>
   1dbf4:	add	r0, sp, #88	; 0x58
   1dbf8:	mov	r3, #0
   1dbfc:	str	r3, [r0, #-32]!	; 0xffffffe0
   1dc00:	mov	r2, r5
   1dc04:	mov	r1, r6
   1dc08:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1dc0c:	mov	r7, r0
   1dc10:	ldr	r4, [sp, #56]	; 0x38
   1dc14:	cmp	r4, #0
   1dc18:	bne	1dbdc <__assert_fail@plt+0xc684>
   1dc1c:	ldr	r3, [r0, #28]
   1dc20:	cmp	r3, #0
   1dc24:	bne	1dc88 <__assert_fail@plt+0xc730>
   1dc28:	add	r8, r0, #28
   1dc2c:	ldr	r1, [r5, #4]
   1dc30:	mov	r0, r8
   1dc34:	bl	16980 <__assert_fail@plt+0x5428>
   1dc38:	str	r0, [sp, #56]	; 0x38
   1dc3c:	cmp	r0, #0
   1dc40:	bne	1e150 <__assert_fail@plt+0xcbf8>
   1dc44:	ldr	r3, [r5, #4]
   1dc48:	cmp	r3, #0
   1dc4c:	ble	1dc88 <__assert_fail@plt+0xc730>
   1dc50:	ldr	r3, [r5, #8]
   1dc54:	ldr	r1, [r3, r4, lsl #2]
   1dc58:	add	r1, r1, r1, lsl #1
   1dc5c:	ldr	r3, [r6, #28]
   1dc60:	add	r1, r3, r1, lsl #2
   1dc64:	mov	r0, r8
   1dc68:	bl	192a8 <__assert_fail@plt+0x7d50>
   1dc6c:	str	r0, [sp, #56]	; 0x38
   1dc70:	cmp	r0, #0
   1dc74:	bne	1e158 <__assert_fail@plt+0xcc00>
   1dc78:	add	r4, r4, #1
   1dc7c:	ldr	r3, [r5, #4]
   1dc80:	cmp	r4, r3
   1dc84:	blt	1dc50 <__assert_fail@plt+0xc6f8>
   1dc88:	add	r2, r7, #28
   1dc8c:	ldr	r1, [sp, #12]
   1dc90:	mov	r0, r5
   1dc94:	bl	16c4c <__assert_fail@plt+0x56f4>
   1dc98:	mov	r4, r0
   1dc9c:	str	r0, [sp, #84]	; 0x54
   1dca0:	cmp	r0, #0
   1dca4:	bne	1dbdc <__assert_fail@plt+0xc684>
   1dca8:	ldr	r3, [sl, #20]
   1dcac:	cmp	r3, #0
   1dcb0:	bne	1dcdc <__assert_fail@plt+0xc784>
   1dcb4:	ldr	r4, [sl]
   1dcb8:	mov	r2, r5
   1dcbc:	mov	r1, r6
   1dcc0:	add	r0, sp, #84	; 0x54
   1dcc4:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1dcc8:	str	r0, [r4, fp, lsl #2]
   1dccc:	ldr	r4, [sp, #84]	; 0x54
   1dcd0:	cmp	r4, #0
   1dcd4:	beq	1dbc0 <__assert_fail@plt+0xc668>
   1dcd8:	b	1dbdc <__assert_fail@plt+0xc684>
   1dcdc:	ldr	r3, [sp, #28]
   1dce0:	ldr	r3, [r3, #116]	; 0x74
   1dce4:	str	r3, [sp, #20]
   1dce8:	ble	1e160 <__assert_fail@plt+0xcc08>
   1dcec:	mov	r7, #0
   1dcf0:	b	1e1ac <__assert_fail@plt+0xcc54>
   1dcf4:	ldr	lr, [r5, #4]
   1dcf8:	cmp	lr, #0
   1dcfc:	ble	1e19c <__assert_fail@plt+0xcc44>
   1dd00:	ldr	r3, [r5, #8]
   1dd04:	add	lr, r3, lr, lsl #2
   1dd08:	mvn	r2, #0
   1dd0c:	mov	r4, r2
   1dd10:	mov	r1, r2
   1dd14:	b	1dd2c <__assert_fail@plt+0xc7d4>
   1dd18:	ldr	ip, [r0, r2, lsl #3]
   1dd1c:	cmp	r8, ip
   1dd20:	moveq	r1, r2
   1dd24:	cmp	lr, r3
   1dd28:	beq	1dd58 <__assert_fail@plt+0xc800>
   1dd2c:	ldr	r2, [r3], #4
   1dd30:	add	ip, r0, r2, lsl #3
   1dd34:	ldrb	ip, [ip, #4]
   1dd38:	cmp	ip, #8
   1dd3c:	beq	1dd18 <__assert_fail@plt+0xc7c0>
   1dd40:	cmp	ip, #9
   1dd44:	bne	1dd24 <__assert_fail@plt+0xc7cc>
   1dd48:	ldr	ip, [r0, r2, lsl #3]
   1dd4c:	cmp	r8, ip
   1dd50:	moveq	r4, r2
   1dd54:	b	1dd24 <__assert_fail@plt+0xc7cc>
   1dd58:	str	r4, [sp, #16]
   1dd5c:	cmp	r1, #0
   1dd60:	blt	1e190 <__assert_fail@plt+0xcc38>
   1dd64:	ldr	r3, [sp, #12]
   1dd68:	mov	r2, r5
   1dd6c:	mov	r0, r6
   1dd70:	bl	1addc <__assert_fail@plt+0x9884>
   1dd74:	cmp	r0, #0
   1dd78:	bne	1e204 <__assert_fail@plt+0xccac>
   1dd7c:	cmp	r4, #0
   1dd80:	blt	1e19c <__assert_fail@plt+0xcc44>
   1dd84:	ldr	r3, [r5, #4]
   1dd88:	cmp	r3, #0
   1dd8c:	ble	1e19c <__assert_fail@plt+0xcc44>
   1dd90:	mov	r8, #0
   1dd94:	b	1dda8 <__assert_fail@plt+0xc850>
   1dd98:	add	r8, r8, #1
   1dd9c:	ldr	r3, [r5, #4]
   1dda0:	cmp	r8, r3
   1dda4:	bge	1e19c <__assert_fail@plt+0xcc44>
   1dda8:	ldr	r3, [r5, #8]
   1ddac:	ldr	r9, [r3, r8, lsl #2]
   1ddb0:	add	r4, r9, r9, lsl #1
   1ddb4:	lsl	r4, r4, #2
   1ddb8:	ldr	r0, [r6, #28]
   1ddbc:	ldr	r1, [sp, #16]
   1ddc0:	add	r0, r0, r4
   1ddc4:	bl	159d0 <__assert_fail@plt+0x4478>
   1ddc8:	cmp	r0, #0
   1ddcc:	bne	1dd98 <__assert_fail@plt+0xc840>
   1ddd0:	ldr	r0, [r6, #24]
   1ddd4:	ldr	r1, [sp, #16]
   1ddd8:	add	r0, r0, r4
   1dddc:	bl	159d0 <__assert_fail@plt+0x4478>
   1dde0:	cmp	r0, #0
   1dde4:	bne	1dd98 <__assert_fail@plt+0xc840>
   1dde8:	ldr	r3, [sp, #12]
   1ddec:	mov	r2, r5
   1ddf0:	mov	r1, r9
   1ddf4:	mov	r0, r6
   1ddf8:	bl	1addc <__assert_fail@plt+0x9884>
   1ddfc:	cmp	r0, #0
   1de00:	bne	1e20c <__assert_fail@plt+0xccb4>
   1de04:	sub	r8, r8, #1
   1de08:	b	1dd98 <__assert_fail@plt+0xc840>
   1de0c:	add	r9, r9, #1
   1de10:	ldr	r3, [r5, #4]
   1de14:	cmp	r9, r3
   1de18:	bge	1e19c <__assert_fail@plt+0xcc44>
   1de1c:	ldr	r3, [r5, #8]
   1de20:	ldr	r1, [r3, r9, lsl #2]
   1de24:	ldr	r2, [r6]
   1de28:	add	r3, r2, r1, lsl #3
   1de2c:	ldrb	r3, [r3, #4]
   1de30:	sub	r3, r3, #8
   1de34:	cmp	r3, #1
   1de38:	bhi	1de0c <__assert_fail@plt+0xc8b4>
   1de3c:	ldr	r3, [r2, r1, lsl #3]
   1de40:	cmp	r8, r3
   1de44:	bne	1de0c <__assert_fail@plt+0xc8b4>
   1de48:	ldr	r3, [sp, #12]
   1de4c:	mov	r2, r5
   1de50:	mov	r0, r6
   1de54:	bl	1addc <__assert_fail@plt+0x9884>
   1de58:	cmp	r0, #0
   1de5c:	beq	1de0c <__assert_fail@plt+0xc8b4>
   1de60:	mov	r4, r0
   1de64:	b	1dbdc <__assert_fail@plt+0xc684>
   1de68:	ldr	r4, [r1]
   1de6c:	mov	r2, r5
   1de70:	mov	r1, r6
   1de74:	add	r0, sp, #84	; 0x54
   1de78:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1de7c:	str	r0, [r4, fp, lsl #2]
   1de80:	ldr	r4, [sp, #84]	; 0x54
   1de84:	cmp	r4, #0
   1de88:	beq	1dbb0 <__assert_fail@plt+0xc658>
   1de8c:	b	1dbdc <__assert_fail@plt+0xc684>
   1de90:	mov	r1, fp
   1de94:	ldr	r4, [sp, #28]
   1de98:	mov	r0, r4
   1de9c:	bl	15ff4 <__assert_fail@plt+0x4a9c>
   1dea0:	str	r0, [sp, #44]	; 0x2c
   1dea4:	cmn	r0, #1
   1dea8:	moveq	r4, #0
   1deac:	beq	1dbdc <__assert_fail@plt+0xc684>
   1deb0:	ldr	r9, [r4, #84]	; 0x54
   1deb4:	mov	r3, #0
   1deb8:	str	r3, [sp, #56]	; 0x38
   1debc:	ldr	r1, [sp, #12]
   1dec0:	ldr	r3, [r1, #4]
   1dec4:	cmp	r3, #0
   1dec8:	ble	1e148 <__assert_fail@plt+0xcbf0>
   1decc:	add	r3, r0, r0, lsl #1
   1ded0:	lsl	r3, r3, #3
   1ded4:	str	r3, [sp, #48]	; 0x30
   1ded8:	mov	r3, #0
   1dedc:	str	r3, [sp, #16]
   1dee0:	add	r3, sl, #16
   1dee4:	str	r3, [sp, #40]	; 0x28
   1dee8:	add	r3, fp, #1
   1deec:	str	r3, [sp, #52]	; 0x34
   1def0:	str	fp, [sp, #12]
   1def4:	mov	fp, r1
   1def8:	b	1e0c0 <__assert_fail@plt+0xcb68>
   1defc:	ldr	r3, [sl, #12]
   1df00:	ldr	r1, [sp, #12]
   1df04:	cmp	r1, r3
   1df08:	bne	1e0e4 <__assert_fail@plt+0xcb8c>
   1df0c:	b	1e0a4 <__assert_fail@plt+0xcb4c>
   1df10:	add	ip, sp, #56	; 0x38
   1df14:	mov	lr, sl
   1df18:	ldm	lr!, {r0, r1, r2, r3}
   1df1c:	stmia	ip!, {r0, r1, r2, r3}
   1df20:	ldm	lr, {r0, r1, r2}
   1df24:	stm	ip, {r0, r1, r2}
   1df28:	ldr	r1, [sp, #40]	; 0x28
   1df2c:	add	r0, sp, #72	; 0x48
   1df30:	bl	16e0c <__assert_fail@plt+0x58b4>
   1df34:	cmp	r0, #0
   1df38:	beq	1e034 <__assert_fail@plt+0xcadc>
   1df3c:	mov	r4, r0
   1df40:	b	1e120 <__assert_fail@plt+0xcbc8>
   1df44:	ldr	r3, [sp, #56]	; 0x38
   1df48:	ldr	r2, [sp, #32]
   1df4c:	str	r4, [r3, r2]
   1df50:	mov	r1, r5
   1df54:	add	r0, sp, #72	; 0x48
   1df58:	bl	159d0 <__assert_fail@plt+0x4478>
   1df5c:	sub	r1, r0, #1
   1df60:	add	r0, sp, #72	; 0x48
   1df64:	bl	15a68 <__assert_fail@plt+0x4510>
   1df68:	ldr	r3, [sp, #28]
   1df6c:	ldr	r4, [r3, #116]	; 0x74
   1df70:	add	r4, r4, r6
   1df74:	add	r5, r5, #1
   1df78:	add	r2, r4, #24
   1df7c:	add	r6, r6, #24
   1df80:	ldrb	r3, [r4, #20]
   1df84:	cmp	r3, #0
   1df88:	beq	1e0a0 <__assert_fail@plt+0xcb48>
   1df8c:	mov	r4, r2
   1df90:	ldr	r3, [r4]
   1df94:	cmp	r7, r3
   1df98:	bne	1df74 <__assert_fail@plt+0xca1c>
   1df9c:	ldr	r3, [r4, #12]
   1dfa0:	ldr	r2, [r4, #8]
   1dfa4:	sub	r3, r3, r2
   1dfa8:	ldr	r2, [sp, #12]
   1dfac:	add	r8, r2, r3
   1dfb0:	cmp	r3, #0
   1dfb4:	ldrne	r3, [r9, #12]
   1dfb8:	ldrne	r2, [sp, #20]
   1dfbc:	ldrne	fp, [r3, r2]
   1dfc0:	ldreq	r3, [r9, #20]
   1dfc4:	ldreq	r2, [sp, #24]
   1dfc8:	addeq	r3, r3, r2
   1dfcc:	ldreq	r3, [r3, #8]
   1dfd0:	ldreq	fp, [r3]
   1dfd4:	ldr	r3, [sl, #12]
   1dfd8:	cmp	r8, r3
   1dfdc:	bgt	1df74 <__assert_fail@plt+0xca1c>
   1dfe0:	ldr	r3, [sl]
   1dfe4:	ldr	r0, [r3, r8, lsl #2]
   1dfe8:	cmp	r0, #0
   1dfec:	beq	1df74 <__assert_fail@plt+0xca1c>
   1dff0:	mov	r1, fp
   1dff4:	add	r0, r0, #4
   1dff8:	bl	159d0 <__assert_fail@plt+0x4478>
   1dffc:	cmp	r0, #0
   1e000:	beq	1df74 <__assert_fail@plt+0xca1c>
   1e004:	str	r8, [sp, #4]
   1e008:	str	fp, [sp]
   1e00c:	ldr	r3, [sp, #12]
   1e010:	mov	r2, r7
   1e014:	ldr	r1, [sp, #40]	; 0x28
   1e018:	ldr	r0, [sp, #28]
   1e01c:	bl	160a4 <__assert_fail@plt+0x4b4c>
   1e020:	cmp	r0, #0
   1e024:	bne	1df74 <__assert_fail@plt+0xca1c>
   1e028:	ldr	r3, [sp, #56]	; 0x38
   1e02c:	cmp	r3, #0
   1e030:	beq	1df10 <__assert_fail@plt+0xc9b8>
   1e034:	str	r7, [sp, #64]	; 0x40
   1e038:	ldr	r3, [sp, #12]
   1e03c:	str	r3, [sp, #68]	; 0x44
   1e040:	mov	r1, r5
   1e044:	add	r0, sp, #72	; 0x48
   1e048:	bl	18d64 <__assert_fail@plt+0x780c>
   1e04c:	cmp	r0, #0
   1e050:	beq	1e138 <__assert_fail@plt+0xcbe0>
   1e054:	ldr	r3, [sp, #56]	; 0x38
   1e058:	ldr	r2, [sp, #32]
   1e05c:	ldr	r4, [r3, r2]
   1e060:	add	r1, sp, #56	; 0x38
   1e064:	ldr	r0, [sp, #28]
   1e068:	bl	1e214 <__assert_fail@plt+0xccbc>
   1e06c:	cmp	r0, #0
   1e070:	bne	1e140 <__assert_fail@plt+0xcbe8>
   1e074:	ldr	r1, [sl, #4]
   1e078:	cmp	r1, #0
   1e07c:	beq	1df44 <__assert_fail@plt+0xc9ec>
   1e080:	ldr	r3, [sp, #52]	; 0x34
   1e084:	ldr	r2, [sp, #56]	; 0x38
   1e088:	mov	r0, r9
   1e08c:	bl	1c7cc <__assert_fail@plt+0xb274>
   1e090:	cmp	r0, #0
   1e094:	beq	1df44 <__assert_fail@plt+0xc9ec>
   1e098:	mov	r4, r0
   1e09c:	b	1e120 <__assert_fail@plt+0xcbc8>
   1e0a0:	ldr	fp, [sp, #36]	; 0x24
   1e0a4:	ldr	r3, [sp, #16]
   1e0a8:	add	r3, r3, #1
   1e0ac:	mov	r2, r3
   1e0b0:	str	r3, [sp, #16]
   1e0b4:	ldr	r3, [fp, #4]
   1e0b8:	cmp	r2, r3
   1e0bc:	bge	1e11c <__assert_fail@plt+0xcbc4>
   1e0c0:	ldr	r3, [fp, #8]
   1e0c4:	ldr	r2, [sp, #16]
   1e0c8:	ldr	r7, [r3, r2, lsl #2]
   1e0cc:	ldr	r3, [r9]
   1e0d0:	add	r3, r3, r7, lsl #3
   1e0d4:	ldrb	r2, [r3, #4]
   1e0d8:	ldr	r3, [sl, #8]
   1e0dc:	cmp	r7, r3
   1e0e0:	beq	1defc <__assert_fail@plt+0xc9a4>
   1e0e4:	cmp	r2, #4
   1e0e8:	bne	1e0a4 <__assert_fail@plt+0xcb4c>
   1e0ec:	ldr	r3, [sp, #28]
   1e0f0:	ldr	r4, [r3, #116]	; 0x74
   1e0f4:	ldr	r6, [sp, #48]	; 0x30
   1e0f8:	add	r4, r4, r6
   1e0fc:	add	r3, r7, r7, lsl #1
   1e100:	lsl	r3, r3, #2
   1e104:	str	r3, [sp, #24]
   1e108:	lsl	r3, r7, #2
   1e10c:	str	r3, [sp, #20]
   1e110:	ldr	r5, [sp, #44]	; 0x2c
   1e114:	str	fp, [sp, #36]	; 0x24
   1e118:	b	1df90 <__assert_fail@plt+0xca38>
   1e11c:	mov	r4, #0
   1e120:	ldr	r3, [sp, #56]	; 0x38
   1e124:	cmp	r3, #0
   1e128:	beq	1dbdc <__assert_fail@plt+0xc684>
   1e12c:	ldr	r0, [sp, #80]	; 0x50
   1e130:	bl	13b40 <__assert_fail@plt+0x25e8>
   1e134:	b	1dbdc <__assert_fail@plt+0xc684>
   1e138:	mov	r4, #12
   1e13c:	b	1e120 <__assert_fail@plt+0xcbc8>
   1e140:	mov	r4, r0
   1e144:	b	1e120 <__assert_fail@plt+0xcbc8>
   1e148:	mov	r4, #0
   1e14c:	b	1dbdc <__assert_fail@plt+0xc684>
   1e150:	mov	r4, #12
   1e154:	b	1dbdc <__assert_fail@plt+0xc684>
   1e158:	mov	r4, #12
   1e15c:	b	1dbdc <__assert_fail@plt+0xc684>
   1e160:	add	r0, sp, #88	; 0x58
   1e164:	mov	r3, #0
   1e168:	str	r3, [r0, #-4]!
   1e16c:	ldr	r4, [sl]
   1e170:	mov	r2, r5
   1e174:	mov	r1, r6
   1e178:	bl	1c5c4 <__assert_fail@plt+0xb06c>
   1e17c:	str	r0, [r4, fp, lsl #2]
   1e180:	ldr	r4, [sp, #84]	; 0x54
   1e184:	cmp	r4, #0
   1e188:	beq	1dbc0 <__assert_fail@plt+0xc668>
   1e18c:	b	1dbdc <__assert_fail@plt+0xc684>
   1e190:	ldr	r3, [sp, #16]
   1e194:	cmp	r3, #0
   1e198:	bge	1dd90 <__assert_fail@plt+0xc838>
   1e19c:	add	r7, r7, #1
   1e1a0:	ldr	r3, [sl, #20]
   1e1a4:	cmp	r7, r3
   1e1a8:	bge	1e160 <__assert_fail@plt+0xcc08>
   1e1ac:	ldr	r3, [sl, #24]
   1e1b0:	ldr	r3, [r3, r7, lsl #2]
   1e1b4:	add	r3, r3, r3, lsl #1
   1e1b8:	ldr	ip, [sp, #20]
   1e1bc:	add	r2, ip, r3, lsl #3
   1e1c0:	ldr	r1, [r2, #8]
   1e1c4:	cmp	fp, r1
   1e1c8:	ble	1e19c <__assert_fail@plt+0xcc44>
   1e1cc:	ldr	r1, [r2, #4]
   1e1d0:	cmp	fp, r1
   1e1d4:	bgt	1e19c <__assert_fail@plt+0xcc44>
   1e1d8:	ldr	r0, [r6]
   1e1dc:	ldr	r3, [ip, r3, lsl #3]
   1e1e0:	ldr	r8, [r0, r3, lsl #3]
   1e1e4:	ldr	r3, [r2, #12]
   1e1e8:	cmp	fp, r3
   1e1ec:	beq	1dcf4 <__assert_fail@plt+0xc79c>
   1e1f0:	ldr	r3, [r5, #4]
   1e1f4:	cmp	r3, #0
   1e1f8:	movgt	r9, #0
   1e1fc:	bgt	1de1c <__assert_fail@plt+0xc8c4>
   1e200:	b	1e19c <__assert_fail@plt+0xcc44>
   1e204:	mov	r4, r0
   1e208:	b	1dbdc <__assert_fail@plt+0xc684>
   1e20c:	mov	r4, r0
   1e210:	b	1dbdc <__assert_fail@plt+0xc684>
   1e214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e218:	sub	sp, sp, #60	; 0x3c
   1e21c:	mov	r5, r0
   1e220:	str	r0, [sp, #12]
   1e224:	mov	r9, r1
   1e228:	ldr	fp, [r1, #12]
   1e22c:	lsl	r3, fp, #2
   1e230:	str	r3, [sp, #16]
   1e234:	ldr	r1, [r1, #8]
   1e238:	add	r0, sp, #44	; 0x2c
   1e23c:	bl	1693c <__assert_fail@plt+0x53e4>
   1e240:	subs	r4, r0, #0
   1e244:	bne	1e4d8 <__assert_fail@plt+0xcf80>
   1e248:	add	r3, sp, #44	; 0x2c
   1e24c:	mov	r2, fp
   1e250:	mov	r1, r9
   1e254:	mov	r0, r5
   1e258:	bl	1db54 <__assert_fail@plt+0xc5fc>
   1e25c:	subs	r3, r0, #0
   1e260:	str	r3, [sp, #36]	; 0x24
   1e264:	bne	1e4c4 <__assert_fail@plt+0xcf6c>
   1e268:	cmp	fp, #0
   1e26c:	ldrle	r4, [sp, #36]	; 0x24
   1e270:	ble	1e4d0 <__assert_fail@plt+0xcf78>
   1e274:	mov	r3, #0
   1e278:	str	r3, [sp, #32]
   1e27c:	add	r3, r9, #16
   1e280:	str	r3, [sp, #28]
   1e284:	mov	sl, fp
   1e288:	mov	fp, r9
   1e28c:	b	1e428 <__assert_fail@plt+0xced0>
   1e290:	ldr	r2, [sp, #16]
   1e294:	mov	r1, #0
   1e298:	bl	1145c <memset@plt>
   1e29c:	ldr	r0, [sp, #52]	; 0x34
   1e2a0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1e2a4:	ldr	r4, [sp, #36]	; 0x24
   1e2a8:	b	1e4d8 <__assert_fail@plt+0xcf80>
   1e2ac:	ldr	r3, [fp, #12]
   1e2b0:	str	r3, [sp, #20]
   1e2b4:	ldr	r2, [sp, #12]
   1e2b8:	ldr	r3, [r2, #84]	; 0x54
   1e2bc:	mov	r0, r3
   1e2c0:	mov	r3, sl
   1e2c4:	mov	r1, r4
   1e2c8:	str	r0, [sp, #24]
   1e2cc:	bl	1aab0 <__assert_fail@plt+0x9558>
   1e2d0:	subs	r9, r0, #0
   1e2d4:	ble	1e31c <__assert_fail@plt+0xcdc4>
   1e2d8:	add	r3, sl, r9
   1e2dc:	ldr	r2, [sp, #20]
   1e2e0:	cmp	r2, r3
   1e2e4:	blt	1e324 <__assert_fail@plt+0xcdcc>
   1e2e8:	ldr	r2, [fp]
   1e2ec:	ldr	r0, [r2, r3, lsl #2]
   1e2f0:	cmp	r0, #0
   1e2f4:	beq	1e3a4 <__assert_fail@plt+0xce4c>
   1e2f8:	ldr	r3, [sp, #24]
   1e2fc:	ldr	r3, [r3, #12]
   1e300:	ldr	r2, [sp, #8]
   1e304:	ldr	r1, [r3, r2, lsl #2]
   1e308:	add	r0, r0, #4
   1e30c:	bl	159d0 <__assert_fail@plt+0x4478>
   1e310:	cmp	r0, #0
   1e314:	beq	1e3a4 <__assert_fail@plt+0xce4c>
   1e318:	b	1e324 <__assert_fail@plt+0xcdcc>
   1e31c:	cmp	r9, #0
   1e320:	beq	1e3a4 <__assert_fail@plt+0xce4c>
   1e324:	ldr	r3, [fp, #20]
   1e328:	cmp	r3, #0
   1e32c:	beq	1e35c <__assert_fail@plt+0xce04>
   1e330:	ldr	r3, [r8, #12]
   1e334:	ldr	r2, [sp, #8]
   1e338:	ldr	r2, [r3, r2, lsl #2]
   1e33c:	str	sl, [sp, #4]
   1e340:	str	r4, [sp]
   1e344:	add	r3, sl, r9
   1e348:	ldr	r1, [sp, #28]
   1e34c:	ldr	r0, [sp, #12]
   1e350:	bl	160a4 <__assert_fail@plt+0x4b4c>
   1e354:	cmp	r0, #0
   1e358:	bne	1e370 <__assert_fail@plt+0xce18>
   1e35c:	mov	r1, r4
   1e360:	add	r0, sp, #44	; 0x2c
   1e364:	bl	18d64 <__assert_fail@plt+0x780c>
   1e368:	cmp	r0, #0
   1e36c:	beq	1e4cc <__assert_fail@plt+0xcf74>
   1e370:	add	r5, r5, #1
   1e374:	ldr	r3, [r7, #20]
   1e378:	cmp	r5, r3
   1e37c:	bge	1e3f8 <__assert_fail@plt+0xcea0>
   1e380:	ldr	r3, [r7, #24]
   1e384:	ldr	r4, [r3, r5, lsl #2]
   1e388:	str	r4, [sp, #8]
   1e38c:	lsl	r6, r4, #3
   1e390:	ldr	r3, [r8]
   1e394:	add	r3, r3, r6
   1e398:	ldrb	r3, [r3, #6]
   1e39c:	tst	r3, #16
   1e3a0:	bne	1e2ac <__assert_fail@plt+0xcd54>
   1e3a4:	ldr	r1, [r8]
   1e3a8:	mov	r2, sl
   1e3ac:	add	r1, r1, r6
   1e3b0:	ldr	r0, [sp, #12]
   1e3b4:	bl	19790 <__assert_fail@plt+0x8238>
   1e3b8:	cmp	r0, #0
   1e3bc:	beq	1e370 <__assert_fail@plt+0xce18>
   1e3c0:	ldr	r3, [fp]
   1e3c4:	ldr	r2, [sp, #16]
   1e3c8:	ldr	r0, [r3, r2]
   1e3cc:	cmp	r0, #0
   1e3d0:	beq	1e370 <__assert_fail@plt+0xce18>
   1e3d4:	ldr	r3, [r8, #12]
   1e3d8:	ldr	r2, [sp, #8]
   1e3dc:	ldr	r1, [r3, r2, lsl #2]
   1e3e0:	add	r0, r0, #4
   1e3e4:	bl	159d0 <__assert_fail@plt+0x4478>
   1e3e8:	cmp	r0, #0
   1e3ec:	beq	1e370 <__assert_fail@plt+0xce18>
   1e3f0:	mov	r9, #1
   1e3f4:	b	1e324 <__assert_fail@plt+0xcdcc>
   1e3f8:	add	r3, sp, #44	; 0x2c
   1e3fc:	mov	r2, sl
   1e400:	mov	r1, fp
   1e404:	ldr	r0, [sp, #12]
   1e408:	bl	1db54 <__assert_fail@plt+0xc5fc>
   1e40c:	cmp	r0, #0
   1e410:	bne	1e4b4 <__assert_fail@plt+0xcf5c>
   1e414:	ldr	r3, [sp, #16]
   1e418:	sub	r3, r3, #4
   1e41c:	str	r3, [sp, #16]
   1e420:	cmp	sl, #0
   1e424:	beq	1e4bc <__assert_fail@plt+0xcf64>
   1e428:	ldr	r0, [fp]
   1e42c:	ldr	r3, [sp, #16]
   1e430:	ldr	r3, [r0, r3]
   1e434:	cmp	r3, #0
   1e438:	ldreq	r3, [sp, #32]
   1e43c:	addeq	r3, r3, #1
   1e440:	movne	r3, #0
   1e444:	str	r3, [sp, #32]
   1e448:	ldr	r3, [sp, #12]
   1e44c:	ldr	r3, [r3, #120]	; 0x78
   1e450:	ldr	r2, [sp, #32]
   1e454:	cmp	r2, r3
   1e458:	bgt	1e290 <__assert_fail@plt+0xcd38>
   1e45c:	mov	r3, #0
   1e460:	str	r3, [sp, #48]	; 0x30
   1e464:	sub	sl, sl, #1
   1e468:	ldr	r2, [sp, #12]
   1e46c:	ldr	r3, [r2, #100]	; 0x64
   1e470:	ldr	r1, [sp, #16]
   1e474:	add	r3, r3, r1
   1e478:	ldr	r7, [r3, #-4]
   1e47c:	cmp	r7, #0
   1e480:	beq	1e3f8 <__assert_fail@plt+0xcea0>
   1e484:	ldr	r8, [r2, #84]	; 0x54
   1e488:	ldr	r3, [r7, #20]
   1e48c:	cmp	r3, #0
   1e490:	ble	1e3f8 <__assert_fail@plt+0xcea0>
   1e494:	ldr	r3, [r7, #24]
   1e498:	ldr	r4, [r3]
   1e49c:	str	r4, [sp, #8]
   1e4a0:	lsl	r6, r4, #3
   1e4a4:	ldr	r3, [r8]
   1e4a8:	add	r3, r3, r6
   1e4ac:	mov	r5, #0
   1e4b0:	b	1e398 <__assert_fail@plt+0xce40>
   1e4b4:	mov	r4, r0
   1e4b8:	b	1e4d0 <__assert_fail@plt+0xcf78>
   1e4bc:	mov	r4, r0
   1e4c0:	b	1e4d0 <__assert_fail@plt+0xcf78>
   1e4c4:	ldr	r4, [sp, #36]	; 0x24
   1e4c8:	b	1e4d0 <__assert_fail@plt+0xcf78>
   1e4cc:	mov	r4, #12
   1e4d0:	ldr	r0, [sp, #52]	; 0x34
   1e4d4:	bl	13b40 <__assert_fail@plt+0x25e8>
   1e4d8:	mov	r0, r4
   1e4dc:	add	sp, sp, #60	; 0x3c
   1e4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4e8:	sub	sp, sp, #412	; 0x19c
   1e4ec:	mov	r6, r0
   1e4f0:	str	r0, [sp, #24]
   1e4f4:	str	r1, [sp, #36]	; 0x24
   1e4f8:	str	r2, [sp, #48]	; 0x30
   1e4fc:	mov	r4, r3
   1e500:	ldr	r5, [sp, #448]	; 0x1c0
   1e504:	ldr	fp, [r0]
   1e508:	mov	r2, #136	; 0x88
   1e50c:	mov	r1, #0
   1e510:	add	r0, sp, #268	; 0x10c
   1e514:	bl	1145c <memset@plt>
   1e518:	str	fp, [sp, #352]	; 0x160
   1e51c:	ldr	r2, [r6, #16]
   1e520:	cmp	r2, #0
   1e524:	beq	1e8c0 <__assert_fail@plt+0xd368>
   1e528:	ldrb	r3, [r6, #28]
   1e52c:	subs	r1, r4, r5
   1e530:	movne	r1, #1
   1e534:	ands	r1, r1, r3, lsr #3
   1e538:	beq	1e8cc <__assert_fail@plt+0xd374>
   1e53c:	and	r3, r3, #1
   1e540:	cmp	r3, #0
   1e544:	movne	r2, #0
   1e548:	str	r2, [sp, #52]	; 0x34
   1e54c:	ldr	r3, [sp, #24]
   1e550:	ldr	r3, [r3, #24]
   1e554:	ldr	r2, [sp, #456]	; 0x1c8
   1e558:	cmp	r3, r2
   1e55c:	subcc	r2, r2, #1
   1e560:	subcc	r3, r2, r3
   1e564:	movcs	r3, #0
   1e568:	str	r3, [sp, #64]	; 0x40
   1e56c:	ldr	r2, [sp, #24]
   1e570:	ldr	r3, [r2, #8]
   1e574:	cmp	r3, #0
   1e578:	beq	1fac8 <__assert_fail@plt+0xe570>
   1e57c:	ldr	r3, [fp, #36]	; 0x24
   1e580:	cmp	r3, #0
   1e584:	moveq	r3, #1
   1e588:	streq	r3, [sp, #28]
   1e58c:	beq	1fb4c <__assert_fail@plt+0xe5f4>
   1e590:	ldr	r3, [fp, #40]	; 0x28
   1e594:	cmp	r3, #0
   1e598:	beq	1fad4 <__assert_fail@plt+0xe57c>
   1e59c:	ldr	r3, [fp, #44]	; 0x2c
   1e5a0:	cmp	r3, #0
   1e5a4:	moveq	r3, #1
   1e5a8:	streq	r3, [sp, #28]
   1e5ac:	beq	1fb4c <__assert_fail@plt+0xe5f4>
   1e5b0:	ldr	r3, [fp, #48]	; 0x30
   1e5b4:	cmp	r3, #0
   1e5b8:	beq	1fae0 <__assert_fail@plt+0xe588>
   1e5bc:	ldr	r3, [fp, #36]	; 0x24
   1e5c0:	ldr	r3, [r3, #8]
   1e5c4:	cmp	r3, #0
   1e5c8:	bne	1e614 <__assert_fail@plt+0xd0bc>
   1e5cc:	ldr	r3, [fp, #40]	; 0x28
   1e5d0:	ldr	r3, [r3, #8]
   1e5d4:	cmp	r3, #0
   1e5d8:	bne	1e614 <__assert_fail@plt+0xd0bc>
   1e5dc:	ldr	r3, [fp, #44]	; 0x2c
   1e5e0:	ldr	r3, [r3, #8]
   1e5e4:	cmp	r3, #0
   1e5e8:	beq	1e5f8 <__assert_fail@plt+0xd0a0>
   1e5ec:	ldrsb	r3, [r2, #28]
   1e5f0:	cmp	r3, #0
   1e5f4:	blt	1e614 <__assert_fail@plt+0xd0bc>
   1e5f8:	cmp	r4, #0
   1e5fc:	cmpne	r5, #0
   1e600:	movne	r3, #1
   1e604:	strne	r3, [sp, #28]
   1e608:	bne	1fb4c <__assert_fail@plt+0xe5f4>
   1e60c:	mov	r5, #0
   1e610:	mov	r4, r5
   1e614:	ldr	r3, [sp, #456]	; 0x1c8
   1e618:	ldr	r2, [sp, #64]	; 0x40
   1e61c:	subs	r3, r3, r2
   1e620:	str	r3, [sp, #60]	; 0x3c
   1e624:	movne	r3, #1
   1e628:	strne	r3, [sp, #16]
   1e62c:	bne	1e640 <__assert_fail@plt+0xd0e8>
   1e630:	ldr	r3, [fp, #76]	; 0x4c
   1e634:	adds	r3, r3, #0
   1e638:	movne	r3, #1
   1e63c:	str	r3, [sp, #16]
   1e640:	ldr	r2, [sp, #24]
   1e644:	ldr	r3, [r2, #20]
   1e648:	mov	lr, r3
   1e64c:	str	r3, [sp, #76]	; 0x4c
   1e650:	ldr	r3, [r2, #12]
   1e654:	lsr	r3, r3, #22
   1e658:	and	r3, r3, #1
   1e65c:	ldr	r0, [fp, #92]	; 0x5c
   1e660:	ldr	r2, [fp, #8]
   1e664:	add	r2, r2, #1
   1e668:	cmp	r2, r0
   1e66c:	movlt	r2, r0
   1e670:	ldr	ip, [sp, #48]	; 0x30
   1e674:	add	r1, ip, #1
   1e678:	ldr	r6, [sp, #36]	; 0x24
   1e67c:	str	r6, [sp, #268]	; 0x10c
   1e680:	str	ip, [sp, #316]	; 0x13c
   1e684:	str	ip, [sp, #312]	; 0x138
   1e688:	str	lr, [sp, #332]	; 0x14c
   1e68c:	strb	r3, [sp, #340]	; 0x154
   1e690:	adds	r6, lr, #0
   1e694:	movne	r6, #1
   1e698:	orr	r3, r3, r6
   1e69c:	strb	r3, [sp, #343]	; 0x157
   1e6a0:	str	r0, [sp, #348]	; 0x15c
   1e6a4:	ldrb	r3, [fp, #88]	; 0x58
   1e6a8:	lsr	r0, r3, #2
   1e6ac:	and	r0, r0, #1
   1e6b0:	strb	r0, [sp, #341]	; 0x155
   1e6b4:	lsr	r3, r3, #3
   1e6b8:	and	r3, r3, #1
   1e6bc:	strb	r3, [sp, #342]	; 0x156
   1e6c0:	str	ip, [sp, #324]	; 0x144
   1e6c4:	str	ip, [sp, #320]	; 0x140
   1e6c8:	cmp	r2, r1
   1e6cc:	movlt	r1, r2
   1e6d0:	add	r0, sp, #268	; 0x10c
   1e6d4:	bl	164e4 <__assert_fail@plt+0x4f8c>
   1e6d8:	subs	r3, r0, #0
   1e6dc:	str	r3, [sp, #28]
   1e6e0:	bne	1fb30 <__assert_fail@plt+0xe5d8>
   1e6e4:	add	r3, fp, #96	; 0x60
   1e6e8:	str	r3, [sp, #336]	; 0x150
   1e6ec:	ldrb	r3, [fp, #88]	; 0x58
   1e6f0:	lsr	r3, r3, #4
   1e6f4:	and	r3, r3, #1
   1e6f8:	strb	r3, [sp, #346]	; 0x15a
   1e6fc:	ldrb	r3, [sp, #343]	; 0x157
   1e700:	cmp	r3, #0
   1e704:	beq	1faec <__assert_fail@plt+0xe594>
   1e708:	mov	r3, #0
   1e70c:	str	r3, [sp, #296]	; 0x128
   1e710:	str	r3, [sp, #300]	; 0x12c
   1e714:	ldr	r3, [sp, #452]	; 0x1c4
   1e718:	str	r3, [sp, #324]	; 0x144
   1e71c:	str	r3, [sp, #320]	; 0x140
   1e720:	ldr	r3, [sp, #24]
   1e724:	ldrb	r3, [r3, #28]
   1e728:	lsr	r3, r3, #7
   1e72c:	strb	r3, [sp, #345]	; 0x159
   1e730:	ldr	r7, [fp, #76]	; 0x4c
   1e734:	lsl	r7, r7, #1
   1e738:	ldr	r3, [sp, #464]	; 0x1d0
   1e73c:	str	r3, [sp, #356]	; 0x164
   1e740:	mvn	r3, #0
   1e744:	str	r3, [sp, #360]	; 0x168
   1e748:	cmp	r7, #0
   1e74c:	ble	1e788 <__assert_fail@plt+0xd230>
   1e750:	ldr	r3, [pc, #4000]	; 1f6f8 <__assert_fail@plt+0xe1a0>
   1e754:	cmp	r7, r3
   1e758:	bhi	1fb0c <__assert_fail@plt+0xe5b4>
   1e75c:	add	r0, r7, r7, lsl #1
   1e760:	lsl	r0, r0, #3
   1e764:	bl	244c8 <__assert_fail@plt+0x12f70>
   1e768:	str	r0, [sp, #384]	; 0x180
   1e76c:	lsl	r0, r7, #2
   1e770:	bl	244c8 <__assert_fail@plt+0x12f70>
   1e774:	str	r0, [sp, #400]	; 0x190
   1e778:	ldr	r3, [sp, #384]	; 0x180
   1e77c:	cmp	r0, #0
   1e780:	cmpne	r3, #0
   1e784:	beq	1fb0c <__assert_fail@plt+0xe5b4>
   1e788:	str	r7, [sp, #380]	; 0x17c
   1e78c:	mov	r3, #1
   1e790:	str	r3, [sp, #388]	; 0x184
   1e794:	str	r7, [sp, #396]	; 0x18c
   1e798:	ldr	r3, [sp, #60]	; 0x3c
   1e79c:	cmp	r3, #1
   1e7a0:	bls	1e8d8 <__assert_fail@plt+0xd380>
   1e7a4:	ldr	r3, [sp, #304]	; 0x130
   1e7a8:	cmn	r3, #-1073741822	; 0xc0000002
   1e7ac:	bhi	1fa64 <__assert_fail@plt+0xe50c>
   1e7b0:	add	r3, r3, #1
   1e7b4:	lsl	r0, r3, #2
   1e7b8:	bl	244c8 <__assert_fail@plt+0x12f70>
   1e7bc:	str	r0, [sp, #368]	; 0x170
   1e7c0:	cmp	r0, #0
   1e7c4:	beq	1fa70 <__assert_fail@plt+0xe518>
   1e7c8:	str	r4, [sp, #404]	; 0x194
   1e7cc:	ldr	r3, [sp, #464]	; 0x1d0
   1e7d0:	and	r3, r3, #1
   1e7d4:	cmp	r3, #0
   1e7d8:	movne	r3, #4
   1e7dc:	moveq	r3, #6
   1e7e0:	str	r3, [sp, #328]	; 0x148
   1e7e4:	cmp	r4, r5
   1e7e8:	mvngt	r3, #0
   1e7ec:	movle	r3, #1
   1e7f0:	str	r3, [sp, #84]	; 0x54
   1e7f4:	movlt	r3, r4
   1e7f8:	movge	r3, r5
   1e7fc:	str	r3, [sp, #56]	; 0x38
   1e800:	movge	r3, r4
   1e804:	movlt	r3, r5
   1e808:	str	r3, [sp, #44]	; 0x2c
   1e80c:	ldr	r3, [fp, #92]	; 0x5c
   1e810:	str	r3, [sp, #80]	; 0x50
   1e814:	ldr	r2, [sp, #52]	; 0x34
   1e818:	cmp	r2, #0
   1e81c:	moveq	r3, #8
   1e820:	beq	1e868 <__assert_fail@plt+0xd310>
   1e824:	cmp	r3, #1
   1e828:	moveq	r3, #4
   1e82c:	beq	1e854 <__assert_fail@plt+0xd2fc>
   1e830:	ldr	r3, [sp, #24]
   1e834:	ldr	r3, [r3, #12]
   1e838:	lsr	r3, r3, #22
   1e83c:	eor	r3, r3, #1
   1e840:	ldr	r2, [sp, #76]	; 0x4c
   1e844:	cmp	r2, #0
   1e848:	movne	r3, #0
   1e84c:	andeq	r3, r3, #1
   1e850:	lsl	r3, r3, #2
   1e854:	cmp	r4, r5
   1e858:	movle	r2, #2
   1e85c:	movgt	r2, #0
   1e860:	orr	r3, r6, r3
   1e864:	orr	r3, r3, r2
   1e868:	ldr	r2, [sp, #56]	; 0x38
   1e86c:	cmp	r4, r2
   1e870:	movge	r2, #0
   1e874:	movlt	r2, #1
   1e878:	ldr	r1, [sp, #44]	; 0x2c
   1e87c:	cmp	r4, r1
   1e880:	orrgt	r2, r2, #1
   1e884:	str	r2, [sp, #68]	; 0x44
   1e888:	cmp	r2, #0
   1e88c:	bne	1fa7c <__assert_fail@plt+0xe524>
   1e890:	add	r2, sp, #408	; 0x198
   1e894:	cmp	r4, r5
   1e898:	suble	r2, r2, #4
   1e89c:	movgt	r2, #0
   1e8a0:	str	r2, [sp, #88]	; 0x58
   1e8a4:	adds	r2, r2, #0
   1e8a8:	movne	r2, #1
   1e8ac:	str	r2, [sp, #92]	; 0x5c
   1e8b0:	sub	r3, r3, #4
   1e8b4:	str	r3, [sp, #72]	; 0x48
   1e8b8:	str	fp, [sp, #40]	; 0x28
   1e8bc:	b	1fe30 <__assert_fail@plt+0xe8d8>
   1e8c0:	mov	r3, #0
   1e8c4:	str	r3, [sp, #52]	; 0x34
   1e8c8:	b	1e54c <__assert_fail@plt+0xcff4>
   1e8cc:	mov	r3, #0
   1e8d0:	str	r3, [sp, #52]	; 0x34
   1e8d4:	b	1e54c <__assert_fail@plt+0xcff4>
   1e8d8:	ldrb	r3, [fp, #88]	; 0x58
   1e8dc:	tst	r3, #2
   1e8e0:	beq	1e7c8 <__assert_fail@plt+0xd270>
   1e8e4:	b	1e7a4 <__assert_fail@plt+0xd24c>
   1e8e8:	ldr	r3, [sp, #404]	; 0x194
   1e8ec:	ldr	r2, [sp, #44]	; 0x2c
   1e8f0:	cmp	r2, r3
   1e8f4:	ble	1ea6c <__assert_fail@plt+0xd514>
   1e8f8:	ldr	r1, [sp, #36]	; 0x24
   1e8fc:	add	r2, r1, r3
   1e900:	ldrb	r1, [r1, r3]
   1e904:	ldr	r0, [sp, #76]	; 0x4c
   1e908:	ldrb	r1, [r0, r1]
   1e90c:	ldr	r0, [sp, #52]	; 0x34
   1e910:	ldrb	r1, [r0, r1]
   1e914:	cmp	r1, #0
   1e918:	bne	1ea94 <__assert_fail@plt+0xd53c>
   1e91c:	ldr	ip, [sp, #52]	; 0x34
   1e920:	ldr	lr, [sp, #76]	; 0x4c
   1e924:	ldr	r0, [sp, #44]	; 0x2c
   1e928:	add	r3, r3, #1
   1e92c:	cmp	r0, r3
   1e930:	beq	1ea1c <__assert_fail@plt+0xd4c4>
   1e934:	ldrb	r1, [r2, #1]!
   1e938:	ldrb	r1, [lr, r1]
   1e93c:	ldrb	r1, [ip, r1]
   1e940:	cmp	r1, #0
   1e944:	beq	1e928 <__assert_fail@plt+0xd3d0>
   1e948:	str	r3, [sp, #404]	; 0x194
   1e94c:	b	1ea94 <__assert_fail@plt+0xd53c>
   1e950:	ldr	r3, [sp, #404]	; 0x194
   1e954:	ldr	r2, [sp, #44]	; 0x2c
   1e958:	cmp	r2, r3
   1e95c:	ble	1ea6c <__assert_fail@plt+0xd514>
   1e960:	ldr	r1, [sp, #36]	; 0x24
   1e964:	add	r2, r1, r3
   1e968:	ldrb	r1, [r1, r3]
   1e96c:	ldr	r0, [sp, #52]	; 0x34
   1e970:	ldrb	r1, [r0, r1]
   1e974:	cmp	r1, #0
   1e978:	bne	1ea94 <__assert_fail@plt+0xd53c>
   1e97c:	ldr	ip, [sp, #52]	; 0x34
   1e980:	ldr	r0, [sp, #44]	; 0x2c
   1e984:	add	r3, r3, #1
   1e988:	cmp	r0, r3
   1e98c:	beq	1ea64 <__assert_fail@plt+0xd50c>
   1e990:	ldrb	r1, [r2, #1]!
   1e994:	ldrb	r1, [ip, r1]
   1e998:	cmp	r1, #0
   1e99c:	beq	1e984 <__assert_fail@plt+0xd42c>
   1e9a0:	str	r3, [sp, #404]	; 0x194
   1e9a4:	b	1ea94 <__assert_fail@plt+0xd53c>
   1e9a8:	ldr	r3, [sp, #404]	; 0x194
   1e9ac:	ldr	r2, [sp, #56]	; 0x38
   1e9b0:	cmp	r2, r3
   1e9b4:	bgt	1ea14 <__assert_fail@plt+0xd4bc>
   1e9b8:	ldr	r1, [sp, #68]	; 0x44
   1e9bc:	ldr	ip, [sp, #52]	; 0x34
   1e9c0:	ldr	r0, [sp, #76]	; 0x4c
   1e9c4:	ldr	r4, [sp, #56]	; 0x38
   1e9c8:	ldr	r5, [sp, #36]	; 0x24
   1e9cc:	ldr	lr, [sp, #48]	; 0x30
   1e9d0:	cmp	lr, r3
   1e9d4:	ldrbgt	r2, [r5, r3]
   1e9d8:	movle	r2, #0
   1e9dc:	cmp	r0, #0
   1e9e0:	ldrbne	r2, [r0, r2]
   1e9e4:	ldrb	r2, [ip, r2]
   1e9e8:	cmp	r2, #0
   1e9ec:	bne	1ea80 <__assert_fail@plt+0xd528>
   1e9f0:	sub	r3, r3, #1
   1e9f4:	mov	r1, #1
   1e9f8:	cmp	r4, r3
   1e9fc:	ble	1e9d0 <__assert_fail@plt+0xd478>
   1ea00:	ldr	fp, [sp, #40]	; 0x28
   1ea04:	str	r3, [sp, #404]	; 0x194
   1ea08:	mov	r3, #1
   1ea0c:	str	r3, [sp, #28]
   1ea10:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1ea14:	ldr	fp, [sp, #40]	; 0x28
   1ea18:	b	1ea08 <__assert_fail@plt+0xd4b0>
   1ea1c:	str	r3, [sp, #404]	; 0x194
   1ea20:	ldr	r2, [sp, #48]	; 0x30
   1ea24:	ldr	r3, [sp, #44]	; 0x2c
   1ea28:	cmp	r2, r3
   1ea2c:	ldrgt	r2, [sp, #36]	; 0x24
   1ea30:	ldrbgt	r3, [r2, r3]
   1ea34:	movle	r3, #0
   1ea38:	ldr	r2, [sp, #76]	; 0x4c
   1ea3c:	cmp	r2, #0
   1ea40:	ldrbne	r3, [r2, r3]
   1ea44:	ldr	r2, [sp, #52]	; 0x34
   1ea48:	ldrb	r3, [r2, r3]
   1ea4c:	cmp	r3, #0
   1ea50:	bne	1ea94 <__assert_fail@plt+0xd53c>
   1ea54:	ldr	fp, [sp, #40]	; 0x28
   1ea58:	mov	r3, #1
   1ea5c:	str	r3, [sp, #28]
   1ea60:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1ea64:	str	r3, [sp, #404]	; 0x194
   1ea68:	b	1ea20 <__assert_fail@plt+0xd4c8>
   1ea6c:	ldr	r3, [sp, #404]	; 0x194
   1ea70:	ldr	r2, [sp, #44]	; 0x2c
   1ea74:	cmp	r2, r3
   1ea78:	bne	1ea94 <__assert_fail@plt+0xd53c>
   1ea7c:	b	1ea20 <__assert_fail@plt+0xd4c8>
   1ea80:	cmp	r1, #0
   1ea84:	strne	r3, [sp, #404]	; 0x194
   1ea88:	ldr	r2, [sp, #56]	; 0x38
   1ea8c:	cmp	r2, r3
   1ea90:	bgt	1eb54 <__assert_fail@plt+0xd5fc>
   1ea94:	ldr	r2, [sp, #464]	; 0x1d0
   1ea98:	ldr	r1, [sp, #404]	; 0x194
   1ea9c:	add	r0, sp, #268	; 0x10c
   1eaa0:	bl	1af9c <__assert_fail@plt+0x9a44>
   1eaa4:	subs	r3, r0, #0
   1eaa8:	str	r3, [sp, #28]
   1eaac:	bne	1faa4 <__assert_fail@plt+0xe54c>
   1eab0:	ldr	r3, [sp, #80]	; 0x50
   1eab4:	cmp	r3, #1
   1eab8:	beq	1ead8 <__assert_fail@plt+0xd580>
   1eabc:	ldr	r3, [sp, #296]	; 0x128
   1eac0:	cmp	r3, #0
   1eac4:	beq	1ead8 <__assert_fail@plt+0xd580>
   1eac8:	ldr	r3, [sp, #276]	; 0x114
   1eacc:	ldr	r3, [r3]
   1ead0:	cmn	r3, #1
   1ead4:	beq	1fdf8 <__assert_fail@plt+0xe8a0>
   1ead8:	mov	r3, #0
   1eadc:	str	r3, [sp, #388]	; 0x184
   1eae0:	str	r3, [sp, #376]	; 0x178
   1eae4:	str	r3, [sp, #372]	; 0x174
   1eae8:	ldr	r4, [sp, #352]	; 0x160
   1eaec:	ldr	r3, [sp, #308]	; 0x134
   1eaf0:	str	r3, [sp, #32]
   1eaf4:	mov	r3, #0
   1eaf8:	str	r3, [sp, #104]	; 0x68
   1eafc:	ldr	r6, [r4, #36]	; 0x24
   1eb00:	ldrsb	r3, [r6, #52]	; 0x34
   1eb04:	cmp	r3, #0
   1eb08:	blt	1ec0c <__assert_fail@plt+0xd6b4>
   1eb0c:	ldr	r3, [sp, #368]	; 0x170
   1eb10:	cmp	r3, #0
   1eb14:	beq	1eccc <__assert_fail@plt+0xd774>
   1eb18:	ldr	r2, [sp, #32]
   1eb1c:	str	r6, [r3, r2, lsl #2]
   1eb20:	ldr	r3, [r4, #76]	; 0x4c
   1eb24:	cmp	r3, #0
   1eb28:	ldreq	fp, [sp, #92]	; 0x5c
   1eb2c:	bne	1ec7c <__assert_fail@plt+0xd724>
   1eb30:	ldrb	r3, [r6, #52]	; 0x34
   1eb34:	tst	r3, #16
   1eb38:	bne	1ecd4 <__assert_fail@plt+0xd77c>
   1eb3c:	mvn	sl, #0
   1eb40:	mov	r3, #0
   1eb44:	str	r3, [sp, #12]
   1eb48:	ldr	r3, [sp, #88]	; 0x58
   1eb4c:	str	r3, [sp, #20]
   1eb50:	b	1f070 <__assert_fail@plt+0xdb18>
   1eb54:	ldr	fp, [sp, #40]	; 0x28
   1eb58:	mov	r3, #1
   1eb5c:	str	r3, [sp, #28]
   1eb60:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1eb64:	ldr	r5, [sp, #52]	; 0x34
   1eb68:	ldr	r6, [sp, #84]	; 0x54
   1eb6c:	ldr	r7, [sp, #56]	; 0x38
   1eb70:	ldr	r8, [sp, #44]	; 0x2c
   1eb74:	b	1ebc0 <__assert_fail@plt+0xd668>
   1eb78:	ldr	r2, [sp, #296]	; 0x128
   1eb7c:	cmp	r3, r2
   1eb80:	ldrcc	r2, [sp, #272]	; 0x110
   1eb84:	ldrbcc	r3, [r2, r3]
   1eb88:	movcs	r3, #0
   1eb8c:	ldrb	r3, [r5, r3]
   1eb90:	cmp	r3, #0
   1eb94:	bne	1ea94 <__assert_fail@plt+0xd53c>
   1eb98:	add	r3, r6, r4
   1eb9c:	str	r3, [sp, #404]	; 0x194
   1eba0:	cmp	r8, r3
   1eba4:	movge	r2, #0
   1eba8:	movlt	r2, #1
   1ebac:	cmp	r7, r3
   1ebb0:	movle	r3, r2
   1ebb4:	orrgt	r3, r2, #1
   1ebb8:	cmp	r3, #0
   1ebbc:	bne	1ebfc <__assert_fail@plt+0xd6a4>
   1ebc0:	ldr	r4, [sp, #404]	; 0x194
   1ebc4:	ldr	r3, [sp, #292]	; 0x124
   1ebc8:	sub	r3, r4, r3
   1ebcc:	ldr	r2, [sp, #300]	; 0x12c
   1ebd0:	cmp	r3, r2
   1ebd4:	bcc	1eb78 <__assert_fail@plt+0xd620>
   1ebd8:	ldr	r2, [sp, #464]	; 0x1d0
   1ebdc:	mov	r1, r4
   1ebe0:	add	r0, sp, #268	; 0x10c
   1ebe4:	bl	1af9c <__assert_fail@plt+0x9a44>
   1ebe8:	cmp	r0, #0
   1ebec:	bne	1fa98 <__assert_fail@plt+0xe540>
   1ebf0:	ldr	r3, [sp, #292]	; 0x124
   1ebf4:	sub	r3, r4, r3
   1ebf8:	b	1eb78 <__assert_fail@plt+0xd620>
   1ebfc:	ldr	fp, [sp, #40]	; 0x28
   1ec00:	mov	r3, #1
   1ec04:	str	r3, [sp, #28]
   1ec08:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1ec0c:	ldr	r2, [sp, #356]	; 0x164
   1ec10:	ldr	r3, [sp, #32]
   1ec14:	sub	r1, r3, #1
   1ec18:	add	r0, sp, #268	; 0x10c
   1ec1c:	bl	1967c <__assert_fail@plt+0x8124>
   1ec20:	tst	r0, #1
   1ec24:	ldrne	r6, [r4, #40]	; 0x28
   1ec28:	bne	1eb0c <__assert_fail@plt+0xd5b4>
   1ec2c:	cmp	r0, #0
   1ec30:	beq	1eb0c <__assert_fail@plt+0xd5b4>
   1ec34:	and	r3, r0, #6
   1ec38:	cmp	r3, #6
   1ec3c:	ldreq	r6, [r4, #48]	; 0x30
   1ec40:	beq	1eb0c <__assert_fail@plt+0xd5b4>
   1ec44:	tst	r0, #2
   1ec48:	ldrne	r6, [r4, #44]	; 0x2c
   1ec4c:	bne	1eb0c <__assert_fail@plt+0xd5b4>
   1ec50:	tst	r0, #4
   1ec54:	beq	1eb0c <__assert_fail@plt+0xd5b4>
   1ec58:	mov	r3, r0
   1ec5c:	ldr	r2, [r6, #40]	; 0x28
   1ec60:	mov	r1, r4
   1ec64:	add	r0, sp, #104	; 0x68
   1ec68:	bl	185c4 <__assert_fail@plt+0x706c>
   1ec6c:	subs	r6, r0, #0
   1ec70:	bne	1eb0c <__assert_fail@plt+0xd5b4>
   1ec74:	ldr	fp, [sp, #40]	; 0x28
   1ec78:	b	1fb28 <__assert_fail@plt+0xe5d0>
   1ec7c:	add	r4, r6, #4
   1ec80:	mov	r2, #0
   1ec84:	mov	r1, r4
   1ec88:	add	r0, sp, #268	; 0x10c
   1ec8c:	bl	19910 <__assert_fail@plt+0x83b8>
   1ec90:	str	r0, [sp, #104]	; 0x68
   1ec94:	cmp	r0, #0
   1ec98:	bne	1f12c <__assert_fail@plt+0xdbd4>
   1ec9c:	ldrb	r3, [r6, #52]	; 0x34
   1eca0:	tst	r3, #64	; 0x40
   1eca4:	ldreq	fp, [sp, #68]	; 0x44
   1eca8:	beq	1eb30 <__assert_fail@plt+0xd5d8>
   1ecac:	mov	r1, r4
   1ecb0:	add	r0, sp, #268	; 0x10c
   1ecb4:	bl	1d2d4 <__assert_fail@plt+0xbd7c>
   1ecb8:	str	r0, [sp, #104]	; 0x68
   1ecbc:	cmp	r0, #0
   1ecc0:	bne	1f134 <__assert_fail@plt+0xdbdc>
   1ecc4:	ldr	fp, [sp, #68]	; 0x44
   1ecc8:	b	1eb30 <__assert_fail@plt+0xd5d8>
   1eccc:	ldr	fp, [sp, #92]	; 0x5c
   1ecd0:	b	1eb30 <__assert_fail@plt+0xd5d8>
   1ecd4:	ldrsb	r3, [r6, #52]	; 0x34
   1ecd8:	cmp	r3, #0
   1ecdc:	blt	1ecfc <__assert_fail@plt+0xd7a4>
   1ece0:	ldr	r3, [sp, #16]
   1ece4:	cmp	r3, #0
   1ece8:	beq	1ed24 <__assert_fail@plt+0xd7cc>
   1ecec:	ldr	sl, [sp, #32]
   1ecf0:	mov	r3, #1
   1ecf4:	str	r3, [sp, #12]
   1ecf8:	b	1eb48 <__assert_fail@plt+0xd5f0>
   1ecfc:	ldr	r2, [sp, #32]
   1ed00:	mov	r1, r6
   1ed04:	add	r0, sp, #268	; 0x10c
   1ed08:	bl	19bcc <__assert_fail@plt+0x8674>
   1ed0c:	cmp	r0, #0
   1ed10:	bne	1ece0 <__assert_fail@plt+0xd788>
   1ed14:	mvn	sl, #0
   1ed18:	mov	r3, #0
   1ed1c:	str	r3, [sp, #12]
   1ed20:	b	1eb48 <__assert_fail@plt+0xd5f0>
   1ed24:	ldr	sl, [sp, #32]
   1ed28:	b	1fc48 <__assert_fail@plt+0xe6f0>
   1ed2c:	ldr	r2, [sp, #316]	; 0x13c
   1ed30:	cmp	r3, r2
   1ed34:	bge	1f090 <__assert_fail@plt+0xdb38>
   1ed38:	add	r1, r1, #2
   1ed3c:	add	r0, sp, #268	; 0x10c
   1ed40:	bl	17660 <__assert_fail@plt+0x6108>
   1ed44:	str	r0, [sp, #104]	; 0x68
   1ed48:	cmp	r0, #0
   1ed4c:	beq	1f09c <__assert_fail@plt+0xdb44>
   1ed50:	ldr	fp, [sp, #40]	; 0x28
   1ed54:	b	1fb28 <__assert_fail@plt+0xe5d0>
   1ed58:	ldr	r2, [sp, #316]	; 0x13c
   1ed5c:	cmp	r3, r2
   1ed60:	bge	1f09c <__assert_fail@plt+0xdb44>
   1ed64:	b	1ed38 <__assert_fail@plt+0xd7e0>
   1ed68:	ldr	r8, [sp, #352]	; 0x160
   1ed6c:	ldr	r3, [r6, #8]
   1ed70:	cmp	r3, #0
   1ed74:	ble	1fb18 <__assert_fail@plt+0xe5c0>
   1ed78:	mov	r5, #0
   1ed7c:	b	1eddc <__assert_fail@plt+0xd884>
   1ed80:	tst	r3, #8
   1ed84:	beq	1ed90 <__assert_fail@plt+0xd838>
   1ed88:	tst	r0, #1
   1ed8c:	bne	1edcc <__assert_fail@plt+0xd874>
   1ed90:	tst	r3, #32
   1ed94:	beq	1eda0 <__assert_fail@plt+0xd848>
   1ed98:	tst	r0, #2
   1ed9c:	beq	1edcc <__assert_fail@plt+0xd874>
   1eda0:	tst	r3, #128	; 0x80
   1eda4:	beq	1edb0 <__assert_fail@plt+0xd858>
   1eda8:	tst	r0, #8
   1edac:	beq	1edcc <__assert_fail@plt+0xd874>
   1edb0:	ldr	r3, [sp, #308]	; 0x134
   1edb4:	add	r2, sp, #268	; 0x10c
   1edb8:	mov	r1, r7
   1edbc:	mov	r0, r8
   1edc0:	bl	1aab0 <__assert_fail@plt+0x9558>
   1edc4:	cmp	r0, #0
   1edc8:	bne	1ee40 <__assert_fail@plt+0xd8e8>
   1edcc:	add	r5, r5, #1
   1edd0:	ldr	r3, [r6, #8]
   1edd4:	cmp	r5, r3
   1edd8:	bge	1fb18 <__assert_fail@plt+0xe5c0>
   1eddc:	ldr	r3, [r6, #12]
   1ede0:	ldr	r7, [r3, r5, lsl #2]
   1ede4:	ldr	r4, [r8]
   1ede8:	add	r4, r4, r7, lsl #3
   1edec:	ldrb	r3, [r4, #6]
   1edf0:	tst	r3, #16
   1edf4:	beq	1edcc <__assert_fail@plt+0xd874>
   1edf8:	ldr	r3, [r4, #4]
   1edfc:	ldr	r2, [pc, #2296]	; 1f6fc <__assert_fail@plt+0xe1a4>
   1ee00:	tst	r3, r2
   1ee04:	beq	1edb0 <__assert_fail@plt+0xd858>
   1ee08:	ldr	r2, [sp, #356]	; 0x164
   1ee0c:	ldr	r1, [sp, #308]	; 0x134
   1ee10:	add	r0, sp, #268	; 0x10c
   1ee14:	bl	1967c <__assert_fail@plt+0x8124>
   1ee18:	ldr	r3, [r4, #4]
   1ee1c:	lsl	r3, r3, #14
   1ee20:	lsr	r3, r3, #22
   1ee24:	tst	r3, #4
   1ee28:	beq	1ed80 <__assert_fail@plt+0xd828>
   1ee2c:	tst	r0, #1
   1ee30:	beq	1edcc <__assert_fail@plt+0xd874>
   1ee34:	tst	r3, #8
   1ee38:	bne	1edcc <__assert_fail@plt+0xd874>
   1ee3c:	b	1ed90 <__assert_fail@plt+0xd838>
   1ee40:	ldr	r4, [sp, #308]	; 0x134
   1ee44:	add	r4, r0, r4
   1ee48:	ldr	r3, [sp, #388]	; 0x184
   1ee4c:	cmp	r3, r0
   1ee50:	movge	r0, r3
   1ee54:	str	r0, [sp, #388]	; 0x184
   1ee58:	mov	r1, r4
   1ee5c:	add	r0, sp, #268	; 0x10c
   1ee60:	bl	19a18 <__assert_fail@plt+0x84c0>
   1ee64:	str	r0, [sp, #116]	; 0x74
   1ee68:	cmp	r0, #0
   1ee6c:	bne	1eefc <__assert_fail@plt+0xd9a4>
   1ee70:	ldr	r3, [r8, #12]
   1ee74:	ldr	r2, [r3, r7, lsl #2]
   1ee78:	add	r2, r2, r2, lsl #1
   1ee7c:	ldr	r3, [r8, #24]
   1ee80:	add	r2, r3, r2, lsl #2
   1ee84:	ldr	r7, [sp, #368]	; 0x170
   1ee88:	ldr	r3, [r7, r4, lsl #2]
   1ee8c:	cmp	r3, #0
   1ee90:	beq	1ef14 <__assert_fail@plt+0xd9bc>
   1ee94:	ldr	r1, [r3, #40]	; 0x28
   1ee98:	add	r0, sp, #128	; 0x80
   1ee9c:	bl	16e88 <__assert_fail@plt+0x5930>
   1eea0:	str	r0, [sp, #116]	; 0x74
   1eea4:	cmp	r0, #0
   1eea8:	bne	1eefc <__assert_fail@plt+0xd9a4>
   1eeac:	ldr	r2, [sp, #356]	; 0x164
   1eeb0:	sub	r1, r4, #1
   1eeb4:	add	r0, sp, #268	; 0x10c
   1eeb8:	bl	1967c <__assert_fail@plt+0x8124>
   1eebc:	ldr	r7, [sp, #368]	; 0x170
   1eec0:	mov	r3, r0
   1eec4:	add	r2, sp, #128	; 0x80
   1eec8:	mov	r1, r8
   1eecc:	add	r0, sp, #116	; 0x74
   1eed0:	bl	185c4 <__assert_fail@plt+0x706c>
   1eed4:	str	r0, [r7, r4, lsl #2]
   1eed8:	ldr	r0, [sp, #136]	; 0x88
   1eedc:	bl	13b40 <__assert_fail@plt+0x25e8>
   1eee0:	ldr	r3, [sp, #368]	; 0x170
   1eee4:	ldr	r3, [r3, r4, lsl #2]
   1eee8:	cmp	r3, #0
   1eeec:	bne	1edcc <__assert_fail@plt+0xd874>
   1eef0:	ldr	r0, [sp, #116]	; 0x74
   1eef4:	cmp	r0, #0
   1eef8:	beq	1edcc <__assert_fail@plt+0xd874>
   1eefc:	str	r0, [sp, #104]	; 0x68
   1ef00:	ldr	r3, [sp, #368]	; 0x170
   1ef04:	cmp	r3, #0
   1ef08:	beq	1fc24 <__assert_fail@plt+0xe6cc>
   1ef0c:	mov	r4, #0
   1ef10:	b	1f0d8 <__assert_fail@plt+0xdb80>
   1ef14:	ldm	r2, {r0, r1, r2}
   1ef18:	add	r3, sp, #128	; 0x80
   1ef1c:	stm	r3, {r0, r1, r2}
   1ef20:	ldr	r2, [sp, #356]	; 0x164
   1ef24:	sub	r1, r4, #1
   1ef28:	add	r0, sp, #268	; 0x10c
   1ef2c:	bl	1967c <__assert_fail@plt+0x8124>
   1ef30:	mov	r3, r0
   1ef34:	add	r2, sp, #128	; 0x80
   1ef38:	mov	r1, r8
   1ef3c:	add	r0, sp, #116	; 0x74
   1ef40:	bl	185c4 <__assert_fail@plt+0x706c>
   1ef44:	str	r0, [r7, r4, lsl #2]
   1ef48:	b	1eee0 <__assert_fail@plt+0xd988>
   1ef4c:	ldr	r5, [r6, #48]	; 0x30
   1ef50:	cmp	r5, #0
   1ef54:	beq	1ef7c <__assert_fail@plt+0xda24>
   1ef58:	ldr	r2, [sp, #356]	; 0x164
   1ef5c:	ldr	r1, [sp, #308]	; 0x134
   1ef60:	sub	r1, r1, #1
   1ef64:	add	r0, sp, #268	; 0x10c
   1ef68:	bl	1967c <__assert_fail@plt+0x8124>
   1ef6c:	tst	r0, #1
   1ef70:	addne	r4, r4, #256	; 0x100
   1ef74:	ldr	r4, [r5, r4, lsl #2]
   1ef78:	b	1f0cc <__assert_fail@plt+0xdb74>
   1ef7c:	mov	r1, r6
   1ef80:	ldr	r0, [sp, #352]	; 0x160
   1ef84:	bl	1b6c4 <__assert_fail@plt+0xa16c>
   1ef88:	cmp	r0, #0
   1ef8c:	bne	1f0bc <__assert_fail@plt+0xdb64>
   1ef90:	mov	r3, #12
   1ef94:	str	r3, [sp, #104]	; 0x68
   1ef98:	b	1ef00 <__assert_fail@plt+0xd9a8>
   1ef9c:	ldr	r3, [sp, #104]	; 0x68
   1efa0:	cmp	r3, #0
   1efa4:	bne	1fb24 <__assert_fail@plt+0xe5cc>
   1efa8:	ldr	r3, [sp, #368]	; 0x170
   1efac:	cmp	r3, #0
   1efb0:	beq	1fc30 <__assert_fail@plt+0xe6d8>
   1efb4:	ldr	r3, [sp, #16]
   1efb8:	eor	r3, r3, #1
   1efbc:	ldr	r2, [sp, #12]
   1efc0:	tst	r2, r3
   1efc4:	bne	1fc30 <__assert_fail@plt+0xe6d8>
   1efc8:	ldr	r0, [sp, #372]	; 0x174
   1efcc:	ldr	r2, [sp, #308]	; 0x134
   1efd0:	ldr	r1, [sp, #368]	; 0x170
   1efd4:	add	r1, r1, r2, lsl #2
   1efd8:	add	r2, r2, #1
   1efdc:	cmp	r0, r2
   1efe0:	blt	1fc30 <__assert_fail@plt+0xe6d8>
   1efe4:	ldr	r3, [sp, #308]	; 0x134
   1efe8:	add	r3, r3, #1
   1efec:	str	r3, [sp, #308]	; 0x134
   1eff0:	ldr	r3, [r1, #4]!
   1eff4:	cmp	r3, #0
   1eff8:	beq	1efd8 <__assert_fail@plt+0xda80>
   1effc:	mov	r2, #0
   1f000:	add	r1, sp, #268	; 0x10c
   1f004:	add	r0, sp, #104	; 0x68
   1f008:	bl	1d9dc <__assert_fail@plt+0xc484>
   1f00c:	mov	r4, r0
   1f010:	ldr	r3, [sp, #104]	; 0x68
   1f014:	cmp	r3, #0
   1f018:	cmpeq	r0, #0
   1f01c:	beq	1efc8 <__assert_fail@plt+0xda70>
   1f020:	cmp	r0, #0
   1f024:	bne	1f0f4 <__assert_fail@plt+0xdb9c>
   1f028:	b	1fc30 <__assert_fail@plt+0xe6d8>
   1f02c:	ldr	r3, [sp, #68]	; 0x44
   1f030:	cmp	r6, r4
   1f034:	movne	fp, r3
   1f038:	ldr	r3, [sp, #32]
   1f03c:	cmp	r6, r4
   1f040:	moveq	r3, r9
   1f044:	str	r3, [sp, #32]
   1f048:	b	1f0fc <__assert_fail@plt+0xdba4>
   1f04c:	ldr	sl, [sp, #308]	; 0x134
   1f050:	ldr	r3, [sp, #16]
   1f054:	cmp	r3, #0
   1f058:	beq	1fc48 <__assert_fail@plt+0xe6f0>
   1f05c:	mov	r3, #1
   1f060:	str	r3, [sp, #12]
   1f064:	mov	r3, #0
   1f068:	str	r3, [sp, #20]
   1f06c:	mov	r6, r4
   1f070:	ldr	r1, [sp, #308]	; 0x134
   1f074:	ldr	r3, [sp, #324]	; 0x144
   1f078:	cmp	r1, r3
   1f07c:	bge	1fc30 <__assert_fail@plt+0xe6d8>
   1f080:	add	r9, r1, #1
   1f084:	ldr	r3, [sp, #304]	; 0x130
   1f088:	cmp	r9, r3
   1f08c:	bge	1ed2c <__assert_fail@plt+0xd7d4>
   1f090:	ldr	r3, [sp, #296]	; 0x128
   1f094:	cmp	r9, r3
   1f098:	bge	1ed58 <__assert_fail@plt+0xd800>
   1f09c:	ldrb	r3, [r6, #52]	; 0x34
   1f0a0:	tst	r3, #32
   1f0a4:	bne	1ed68 <__assert_fail@plt+0xd810>
   1f0a8:	ldr	r3, [sp, #308]	; 0x134
   1f0ac:	add	r2, r3, #1
   1f0b0:	str	r2, [sp, #308]	; 0x134
   1f0b4:	ldr	r2, [sp, #272]	; 0x110
   1f0b8:	ldrb	r4, [r2, r3]
   1f0bc:	ldr	r3, [r6, #44]	; 0x2c
   1f0c0:	cmp	r3, #0
   1f0c4:	beq	1ef4c <__assert_fail@plt+0xd9f4>
   1f0c8:	ldr	r4, [r3, r4, lsl #2]
   1f0cc:	ldr	r3, [sp, #368]	; 0x170
   1f0d0:	cmp	r3, #0
   1f0d4:	beq	1f0ec <__assert_fail@plt+0xdb94>
   1f0d8:	mov	r2, r4
   1f0dc:	add	r1, sp, #268	; 0x10c
   1f0e0:	add	r0, sp, #104	; 0x68
   1f0e4:	bl	1d9dc <__assert_fail@plt+0xc484>
   1f0e8:	mov	r4, r0
   1f0ec:	cmp	r4, #0
   1f0f0:	beq	1ef9c <__assert_fail@plt+0xda44>
   1f0f4:	cmp	fp, #0
   1f0f8:	bne	1f02c <__assert_fail@plt+0xdad4>
   1f0fc:	ldrb	r3, [r4, #52]	; 0x34
   1f100:	tst	r3, #16
   1f104:	beq	1f06c <__assert_fail@plt+0xdb14>
   1f108:	tst	r3, #128	; 0x80
   1f10c:	beq	1f04c <__assert_fail@plt+0xdaf4>
   1f110:	ldr	r2, [sp, #308]	; 0x134
   1f114:	mov	r1, r4
   1f118:	add	r0, sp, #268	; 0x10c
   1f11c:	bl	19bcc <__assert_fail@plt+0x8674>
   1f120:	cmp	r0, #0
   1f124:	beq	1f06c <__assert_fail@plt+0xdb14>
   1f128:	b	1f04c <__assert_fail@plt+0xdaf4>
   1f12c:	mov	sl, r0
   1f130:	b	1fc48 <__assert_fail@plt+0xe6f0>
   1f134:	mov	sl, r0
   1f138:	b	1fc48 <__assert_fail@plt+0xe6f0>
   1f13c:	ldr	r2, [sp, #40]	; 0x28
   1f140:	ldr	r3, [r2, #76]	; 0x4c
   1f144:	cmp	r3, #0
   1f148:	bne	1fdb8 <__assert_fail@plt+0xe860>
   1f14c:	mov	r9, fp
   1f150:	mov	fp, r2
   1f154:	b	1f204 <__assert_fail@plt+0xdcac>
   1f158:	mov	r3, fp
   1f15c:	ldr	fp, [sp, #12]
   1f160:	mov	r2, r6
   1f164:	mov	r1, r5
   1f168:	mov	r0, r9
   1f16c:	bl	1c7cc <__assert_fail@plt+0xb274>
   1f170:	mov	r8, r0
   1f174:	mov	r0, r6
   1f178:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f17c:	cmp	r8, #0
   1f180:	beq	1f1d8 <__assert_fail@plt+0xdc80>
   1f184:	mov	r6, #0
   1f188:	b	1fdd8 <__assert_fail@plt+0xe880>
   1f18c:	str	r5, [sp, #128]	; 0x80
   1f190:	mov	r3, #0
   1f194:	str	r3, [sp, #132]	; 0x84
   1f198:	str	r7, [sp, #136]	; 0x88
   1f19c:	str	sl, [sp, #140]	; 0x8c
   1f1a0:	str	r3, [sp, #144]	; 0x90
   1f1a4:	str	r3, [sp, #148]	; 0x94
   1f1a8:	str	r3, [sp, #152]	; 0x98
   1f1ac:	add	r1, sp, #128	; 0x80
   1f1b0:	add	r0, sp, #268	; 0x10c
   1f1b4:	bl	1e214 <__assert_fail@plt+0xccbc>
   1f1b8:	mov	r8, r0
   1f1bc:	ldr	r0, [sp, #152]	; 0x98
   1f1c0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f1c4:	cmp	r8, #0
   1f1c8:	bne	1fdd4 <__assert_fail@plt+0xe87c>
   1f1cc:	ldr	r3, [r5]
   1f1d0:	cmp	r3, #0
   1f1d4:	beq	1fe80 <__assert_fail@plt+0xe928>
   1f1d8:	mov	r9, fp
   1f1dc:	ldr	fp, [sp, #40]	; 0x28
   1f1e0:	ldr	r0, [sp, #368]	; 0x170
   1f1e4:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f1e8:	str	r5, [sp, #368]	; 0x170
   1f1ec:	str	r7, [sp, #364]	; 0x16c
   1f1f0:	str	sl, [sp, #360]	; 0x168
   1f1f4:	mov	r0, #0
   1f1f8:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f1fc:	mov	r0, #0
   1f200:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f204:	ldr	r3, [sp, #60]	; 0x3c
   1f208:	cmp	r3, #0
   1f20c:	beq	1fb30 <__assert_fail@plt+0xe5d8>
   1f210:	cmp	r3, #1
   1f214:	bls	1fb68 <__assert_fail@plt+0xe610>
   1f218:	ldr	r2, [sp, #460]	; 0x1cc
   1f21c:	str	r2, [sp, #36]	; 0x24
   1f220:	sub	r4, r3, #-536870911	; 0xe0000001
   1f224:	lsl	r4, r4, #3
   1f228:	mov	r3, r2
   1f22c:	add	r1, r2, r4
   1f230:	mvn	r2, #0
   1f234:	str	r2, [r3, #12]
   1f238:	str	r2, [r3, #8]!
   1f23c:	cmp	r3, r1
   1f240:	bne	1f234 <__assert_fail@plt+0xdcdc>
   1f244:	mov	r3, #0
   1f248:	ldr	r2, [sp, #460]	; 0x1cc
   1f24c:	str	r3, [r2]
   1f250:	ldr	r3, [sp, #360]	; 0x168
   1f254:	str	r3, [r2, #4]
   1f258:	ldr	r3, [sp, #24]
   1f25c:	ldrb	r3, [r3, #28]
   1f260:	eor	r3, r3, #16
   1f264:	ands	r3, r9, r3, lsr #4
   1f268:	beq	1f560 <__assert_fail@plt+0xe008>
   1f26c:	ldrb	r3, [fp, #88]	; 0x58
   1f270:	tst	r3, #1
   1f274:	beq	1fb80 <__assert_fail@plt+0xe628>
   1f278:	ldr	r3, [fp, #76]	; 0x4c
   1f27c:	cmp	r3, #0
   1f280:	ble	1fb80 <__assert_fail@plt+0xe628>
   1f284:	ldr	r3, [sp, #24]
   1f288:	ldr	r3, [r3]
   1f28c:	str	r3, [sp, #24]
   1f290:	mov	r3, #0
   1f294:	str	r3, [sp, #116]	; 0x74
   1f298:	mov	r2, #2
   1f29c:	str	r2, [sp, #120]	; 0x78
   1f2a0:	str	r3, [sp, #124]	; 0x7c
   1f2a4:	str	r3, [sp, #128]	; 0x80
   1f2a8:	mov	r3, #16
   1f2ac:	str	r3, [sp, #132]	; 0x84
   1f2b0:	add	r3, sp, #140	; 0x8c
   1f2b4:	str	r3, [sp, #136]	; 0x88
   1f2b8:	mov	r0, #48	; 0x30
   1f2bc:	bl	244c8 <__assert_fail@plt+0x12f70>
   1f2c0:	str	r0, [sp, #124]	; 0x7c
   1f2c4:	cmp	r0, #0
   1f2c8:	addne	r9, sp, #116	; 0x74
   1f2cc:	beq	1fc18 <__assert_fail@plt+0xe6c0>
   1f2d0:	ldr	r3, [sp, #24]
   1f2d4:	ldr	sl, [r3, #72]	; 0x48
   1f2d8:	mov	r3, #0
   1f2dc:	str	r3, [sp, #104]	; 0x68
   1f2e0:	str	r3, [sp, #108]	; 0x6c
   1f2e4:	str	r3, [sp, #112]	; 0x70
   1f2e8:	ldr	r3, [sp, #128]	; 0x80
   1f2ec:	ldr	r2, [sp, #60]	; 0x3c
   1f2f0:	cmp	r2, r3
   1f2f4:	bhi	1f36c <__assert_fail@plt+0xde14>
   1f2f8:	ldr	r3, [sp, #60]	; 0x3c
   1f2fc:	str	r3, [sp, #128]	; 0x80
   1f300:	ldr	r3, [sp, #136]	; 0x88
   1f304:	str	r3, [sp, #16]
   1f308:	add	r2, r4, #8
   1f30c:	str	r2, [sp, #32]
   1f310:	ldr	r1, [sp, #460]	; 0x1cc
   1f314:	mov	r0, r3
   1f318:	bl	11264 <memcpy@plt>
   1f31c:	ldr	r3, [sp, #460]	; 0x1cc
   1f320:	ldr	r3, [r3]
   1f324:	add	r2, sp, #408	; 0x198
   1f328:	str	r3, [r2, #-308]!	; 0xfffffecc
   1f32c:	str	r2, [sp, #40]	; 0x28
   1f330:	ldr	r3, [sp, #60]	; 0x3c
   1f334:	mov	r2, r3
   1f338:	lsl	r3, r3, #4
   1f33c:	str	r3, [sp, #44]	; 0x2c
   1f340:	str	fp, [sp, #12]
   1f344:	mov	fp, r2
   1f348:	ldr	r4, [sp, #460]	; 0x1cc
   1f34c:	b	1f7a0 <__assert_fail@plt+0xe248>
   1f350:	ldr	fp, [sp, #40]	; 0x28
   1f354:	mov	r3, #1
   1f358:	str	r3, [sp, #28]
   1f35c:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1f360:	mov	r9, fp
   1f364:	ldr	fp, [sp, #40]	; 0x28
   1f368:	b	1f204 <__assert_fail@plt+0xdcac>
   1f36c:	mov	r3, #8
   1f370:	add	r2, sp, #140	; 0x8c
   1f374:	ldr	r1, [sp, #60]	; 0x3c
   1f378:	add	r0, sp, #128	; 0x80
   1f37c:	bl	245c0 <__assert_fail@plt+0x13068>
   1f380:	cmp	r0, #0
   1f384:	bne	1f300 <__assert_fail@plt+0xdda8>
   1f388:	ldr	r0, [sp, #136]	; 0x88
   1f38c:	add	r3, sp, #140	; 0x8c
   1f390:	cmp	r0, r3
   1f394:	beq	1f39c <__assert_fail@plt+0xde44>
   1f398:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f39c:	add	r3, sp, #140	; 0x8c
   1f3a0:	str	r3, [sp, #136]	; 0x88
   1f3a4:	mov	r3, #0
   1f3a8:	str	r3, [sp, #128]	; 0x80
   1f3ac:	mvn	r3, #0
   1f3b0:	str	r3, [sp, #132]	; 0x84
   1f3b4:	add	r0, sp, #128	; 0x80
   1f3b8:	bl	18b50 <__assert_fail@plt+0x75f8>
   1f3bc:	mov	r0, r9
   1f3c0:	bl	18b84 <__assert_fail@plt+0x762c>
   1f3c4:	mov	r3, #12
   1f3c8:	str	r3, [sp, #28]
   1f3cc:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1f3d0:	ldr	r3, [r3, sl, lsl #3]
   1f3d4:	add	r3, r3, #1
   1f3d8:	cmp	fp, r3
   1f3dc:	addgt	r1, r4, r3, lsl #3
   1f3e0:	strgt	r2, [r4, r3, lsl #3]
   1f3e4:	mvngt	r3, #0
   1f3e8:	strgt	r3, [r1, #4]
   1f3ec:	ldr	r2, [r4, #4]
   1f3f0:	ldr	r3, [sp, #100]	; 0x64
   1f3f4:	cmp	r2, r3
   1f3f8:	beq	1f4b0 <__assert_fail@plt+0xdf58>
   1f3fc:	cmp	r9, #0
   1f400:	beq	1f418 <__assert_fail@plt+0xdec0>
   1f404:	mov	r1, sl
   1f408:	add	r0, sp, #104	; 0x68
   1f40c:	bl	159d0 <__assert_fail@plt+0x4478>
   1f410:	cmp	r0, #0
   1f414:	bne	1f4d0 <__assert_fail@plt+0xdf78>
   1f418:	ldr	r5, [sp, #352]	; 0x160
   1f41c:	mov	r7, sl
   1f420:	lsl	r8, sl, #3
   1f424:	ldr	r3, [r5]
   1f428:	add	r1, r3, r8
   1f42c:	ldrb	r2, [r1, #4]
   1f430:	tst	r2, #8
   1f434:	beq	1f700 <__assert_fail@plt+0xe1a8>
   1f438:	ldr	r3, [sp, #368]	; 0x170
   1f43c:	ldr	r2, [sp, #100]	; 0x64
   1f440:	ldr	r3, [r3, r2, lsl #2]
   1f444:	add	r3, r3, #4
   1f448:	str	r3, [sp, #20]
   1f44c:	add	r3, sl, sl, lsl #1
   1f450:	ldr	r5, [r5, #20]
   1f454:	add	r5, r5, r3, lsl #2
   1f458:	mov	r1, sl
   1f45c:	add	r0, sp, #104	; 0x68
   1f460:	bl	159d0 <__assert_fail@plt+0x4478>
   1f464:	cmp	r0, #0
   1f468:	beq	1f594 <__assert_fail@plt+0xe03c>
   1f46c:	ldr	r8, [r5, #4]
   1f470:	cmp	r8, #0
   1f474:	mvnle	sl, #0
   1f478:	ble	1fbbc <__assert_fail@plt+0xe664>
   1f47c:	ldr	r7, [r5, #8]
   1f480:	sub	r7, r7, #4
   1f484:	mvn	sl, #0
   1f488:	mov	r5, #0
   1f48c:	b	1f6d0 <__assert_fail@plt+0xe178>
   1f490:	str	r2, [r1, #4]
   1f494:	ldr	r2, [sp, #32]
   1f498:	mov	r1, r4
   1f49c:	ldr	r0, [sp, #16]
   1f4a0:	bl	11264 <memcpy@plt>
   1f4a4:	b	1f3ec <__assert_fail@plt+0xde94>
   1f4a8:	str	r2, [r1, #4]
   1f4ac:	b	1f3ec <__assert_fail@plt+0xde94>
   1f4b0:	ldr	r3, [sp, #364]	; 0x16c
   1f4b4:	cmp	sl, r3
   1f4b8:	bne	1f3fc <__assert_fail@plt+0xdea4>
   1f4bc:	cmp	r9, #0
   1f4c0:	beq	1f58c <__assert_fail@plt+0xe034>
   1f4c4:	ldr	r2, [sp, #36]	; 0x24
   1f4c8:	mov	r3, #0
   1f4cc:	b	1f4ec <__assert_fail@plt+0xdf94>
   1f4d0:	ldr	r2, [sp, #36]	; 0x24
   1f4d4:	mov	r3, #0
   1f4d8:	b	1f4ec <__assert_fail@plt+0xdf94>
   1f4dc:	add	r3, r3, #1
   1f4e0:	add	r2, r2, #8
   1f4e4:	cmp	fp, r3
   1f4e8:	beq	1f538 <__assert_fail@plt+0xdfe0>
   1f4ec:	ldr	r1, [r4, r3, lsl #3]
   1f4f0:	cmp	r1, #0
   1f4f4:	blt	1f4dc <__assert_fail@plt+0xdf84>
   1f4f8:	ldr	r1, [r2, #4]
   1f4fc:	cmn	r1, #1
   1f500:	bne	1f4dc <__assert_fail@plt+0xdf84>
   1f504:	add	r3, sp, #104	; 0x68
   1f508:	str	r3, [sp, #4]
   1f50c:	ldr	r3, [sp, #16]
   1f510:	str	r3, [sp]
   1f514:	mov	r3, r4
   1f518:	mov	r2, fp
   1f51c:	ldr	r1, [sp, #40]	; 0x28
   1f520:	mov	r0, r9
   1f524:	bl	19ca4 <__assert_fail@plt+0x874c>
   1f528:	subs	sl, r0, #0
   1f52c:	bge	1f418 <__assert_fail@plt+0xdec0>
   1f530:	ldr	fp, [sp, #12]
   1f534:	b	1f53c <__assert_fail@plt+0xdfe4>
   1f538:	ldr	fp, [sp, #12]
   1f53c:	ldr	r0, [sp, #112]	; 0x70
   1f540:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f544:	add	r0, sp, #128	; 0x80
   1f548:	bl	18b50 <__assert_fail@plt+0x75f8>
   1f54c:	mov	r0, r9
   1f550:	bl	18b84 <__assert_fail@plt+0x762c>
   1f554:	cmp	r0, #0
   1f558:	strne	r0, [sp, #28]
   1f55c:	bne	1fb30 <__assert_fail@plt+0xe5d8>
   1f560:	ldrb	r4, [sp, #344]	; 0x158
   1f564:	ldr	r7, [sp, #296]	; 0x128
   1f568:	ldr	r8, [sp, #280]	; 0x118
   1f56c:	ldr	r9, [sp, #300]	; 0x12c
   1f570:	ldr	ip, [sp, #404]	; 0x194
   1f574:	ldr	r1, [sp, #460]	; 0x1cc
   1f578:	mov	r3, r1
   1f57c:	add	r2, r1, #4
   1f580:	ldr	r0, [sp, #60]	; 0x3c
   1f584:	add	lr, r1, r0, lsl #3
   1f588:	b	1f990 <__assert_fail@plt+0xe438>
   1f58c:	ldr	fp, [sp, #12]
   1f590:	b	1f53c <__assert_fail@plt+0xdfe4>
   1f594:	mov	r1, sl
   1f598:	add	r0, sp, #104	; 0x68
   1f59c:	bl	18d64 <__assert_fail@plt+0x780c>
   1f5a0:	cmp	r0, #0
   1f5a4:	bne	1f46c <__assert_fail@plt+0xdf14>
   1f5a8:	ldr	fp, [sp, #12]
   1f5ac:	ldr	r0, [sp, #112]	; 0x70
   1f5b0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f5b4:	add	r0, sp, #128	; 0x80
   1f5b8:	bl	18b50 <__assert_fail@plt+0x75f8>
   1f5bc:	mov	r0, r9
   1f5c0:	bl	18b84 <__assert_fail@plt+0x762c>
   1f5c4:	mov	r3, #12
   1f5c8:	str	r3, [sp, #28]
   1f5cc:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1f5d0:	mov	r1, sl
   1f5d4:	add	r0, sp, #104	; 0x68
   1f5d8:	bl	159d0 <__assert_fail@plt+0x4478>
   1f5dc:	cmp	r0, #0
   1f5e0:	bne	1f930 <__assert_fail@plt+0xe3d8>
   1f5e4:	cmp	r9, #0
   1f5e8:	beq	1f798 <__assert_fail@plt+0xe240>
   1f5ec:	ldr	r7, [sp, #100]	; 0x64
   1f5f0:	ldr	r5, [r9]
   1f5f4:	add	r1, r5, #1
   1f5f8:	str	r1, [r9]
   1f5fc:	ldr	r3, [r9, #4]
   1f600:	cmp	r1, r3
   1f604:	bne	1f630 <__assert_fail@plt+0xe0d8>
   1f608:	add	r1, r1, r1, lsl #1
   1f60c:	lsl	r1, r1, #4
   1f610:	ldr	r0, [r9, #8]
   1f614:	bl	244f8 <__assert_fail@plt+0x12fa0>
   1f618:	cmp	r0, #0
   1f61c:	beq	1fbb8 <__assert_fail@plt+0xe660>
   1f620:	ldr	r3, [r9, #4]
   1f624:	lsl	r3, r3, #1
   1f628:	str	r3, [r9, #4]
   1f62c:	str	r0, [r9, #8]
   1f630:	add	r5, r5, r5, lsl #1
   1f634:	lsl	r8, r5, #3
   1f638:	ldr	r3, [r9, #8]
   1f63c:	str	r7, [r3, r5, lsl #3]
   1f640:	ldr	r3, [r9, #8]
   1f644:	add	r3, r3, r8
   1f648:	str	r6, [r3, #4]
   1f64c:	ldr	r5, [r9, #8]
   1f650:	add	r5, r5, r8
   1f654:	ldr	r0, [sp, #44]	; 0x2c
   1f658:	bl	244c8 <__assert_fail@plt+0x12f70>
   1f65c:	str	r0, [r5, #8]
   1f660:	ldr	r3, [r9, #8]
   1f664:	add	r3, r3, r8
   1f668:	ldr	r0, [r3, #8]
   1f66c:	cmp	r0, #0
   1f670:	beq	1fbb8 <__assert_fail@plt+0xe660>
   1f674:	ldr	r5, [sp, #32]
   1f678:	mov	r2, r5
   1f67c:	mov	r1, r4
   1f680:	bl	11264 <memcpy@plt>
   1f684:	ldr	r3, [r9, #8]
   1f688:	add	r3, r3, r8
   1f68c:	ldr	r0, [r3, #8]
   1f690:	mov	r2, r5
   1f694:	ldr	r1, [sp, #16]
   1f698:	add	r0, r0, r5
   1f69c:	bl	11264 <memcpy@plt>
   1f6a0:	ldr	r0, [r9, #8]
   1f6a4:	add	r0, r0, r8
   1f6a8:	add	r1, sp, #104	; 0x68
   1f6ac:	add	r0, r0, #12
   1f6b0:	bl	16e0c <__assert_fail@plt+0x58b4>
   1f6b4:	cmp	r0, #0
   1f6b8:	beq	1f798 <__assert_fail@plt+0xe240>
   1f6bc:	ldr	fp, [sp, #12]
   1f6c0:	b	1f5ac <__assert_fail@plt+0xe054>
   1f6c4:	add	r5, r5, #1
   1f6c8:	cmp	r8, r5
   1f6cc:	beq	1f798 <__assert_fail@plt+0xe240>
   1f6d0:	ldr	r6, [r7, #4]!
   1f6d4:	mov	r1, r6
   1f6d8:	ldr	r0, [sp, #20]
   1f6dc:	bl	159d0 <__assert_fail@plt+0x4478>
   1f6e0:	cmp	r0, #0
   1f6e4:	beq	1f6c4 <__assert_fail@plt+0xe16c>
   1f6e8:	cmn	sl, #1
   1f6ec:	bne	1f5d0 <__assert_fail@plt+0xe078>
   1f6f0:	mov	sl, r6
   1f6f4:	b	1f6c4 <__assert_fail@plt+0xe16c>
   1f6f8:	beq	feaca1a8 <optarg@@GLIBC_2.4+0xfea92fe8>
   1f6fc:	andeq	pc, r3, r0, lsl #30
   1f700:	ldrb	r1, [r1, #6]
   1f704:	tst	r1, #16
   1f708:	bne	1f824 <__assert_fail@plt+0xe2cc>
   1f70c:	cmp	r2, #4
   1f710:	bne	1f8a0 <__assert_fail@plt+0xe348>
   1f714:	ldr	r3, [r3, r8]
   1f718:	add	r3, r3, #1
   1f71c:	cmp	fp, r3
   1f720:	ble	1f84c <__assert_fail@plt+0xe2f4>
   1f724:	add	r2, r4, r3, lsl #3
   1f728:	ldr	r6, [r2, #4]
   1f72c:	ldr	r2, [r4, r3, lsl #3]
   1f730:	sub	r6, r6, r2
   1f734:	cmp	r9, #0
   1f738:	bne	1f8d4 <__assert_fail@plt+0xe37c>
   1f73c:	cmp	r6, #0
   1f740:	beq	1f858 <__assert_fail@plt+0xe300>
   1f744:	ldr	r3, [r5, #12]
   1f748:	ldr	sl, [r3, sl, lsl #2]
   1f74c:	ldr	r3, [sp, #100]	; 0x64
   1f750:	add	r6, r6, r3
   1f754:	str	r6, [sp, #100]	; 0x64
   1f758:	cmp	r9, #0
   1f75c:	beq	1f790 <__assert_fail@plt+0xe238>
   1f760:	ldr	r3, [sp, #360]	; 0x168
   1f764:	cmp	r6, r3
   1f768:	bgt	1feb0 <__assert_fail@plt+0xe958>
   1f76c:	ldr	r3, [sp, #368]	; 0x170
   1f770:	ldr	r0, [r3, r6, lsl #2]
   1f774:	cmp	r0, #0
   1f778:	beq	1feb8 <__assert_fail@plt+0xe960>
   1f77c:	mov	r1, sl
   1f780:	add	r0, r0, #4
   1f784:	bl	159d0 <__assert_fail@plt+0x4478>
   1f788:	cmp	r0, #0
   1f78c:	beq	1fec0 <__assert_fail@plt+0xe968>
   1f790:	mov	r3, #0
   1f794:	str	r3, [sp, #108]	; 0x6c
   1f798:	cmp	sl, #0
   1f79c:	blt	1fbbc <__assert_fail@plt+0xe664>
   1f7a0:	ldr	r2, [sp, #100]	; 0x64
   1f7a4:	ldr	r3, [r4, #4]
   1f7a8:	cmp	r2, r3
   1f7ac:	bgt	1f948 <__assert_fail@plt+0xe3f0>
   1f7b0:	lsl	r1, sl, #3
   1f7b4:	ldr	r3, [sp, #24]
   1f7b8:	ldr	r3, [r3]
   1f7bc:	add	r0, r3, r1
   1f7c0:	ldrb	ip, [r0, #4]
   1f7c4:	cmp	ip, #8
   1f7c8:	beq	1f3d0 <__assert_fail@plt+0xde78>
   1f7cc:	cmp	ip, #9
   1f7d0:	bne	1f3ec <__assert_fail@plt+0xde94>
   1f7d4:	ldr	r3, [r3, r1]
   1f7d8:	add	r3, r3, #1
   1f7dc:	cmp	fp, r3
   1f7e0:	ble	1f3ec <__assert_fail@plt+0xde94>
   1f7e4:	add	r1, r4, r3, lsl #3
   1f7e8:	ldr	ip, [r4, r3, lsl #3]
   1f7ec:	cmp	r2, ip
   1f7f0:	bgt	1f490 <__assert_fail@plt+0xdf38>
   1f7f4:	ldrb	r0, [r0, #6]
   1f7f8:	tst	r0, #8
   1f7fc:	beq	1f4a8 <__assert_fail@plt+0xdf50>
   1f800:	ldr	r0, [sp, #16]
   1f804:	ldr	r3, [r0, r3, lsl #3]
   1f808:	cmn	r3, #1
   1f80c:	beq	1f4a8 <__assert_fail@plt+0xdf50>
   1f810:	ldr	r2, [sp, #32]
   1f814:	mov	r1, r0
   1f818:	mov	r0, r4
   1f81c:	bl	11264 <memcpy@plt>
   1f820:	b	1f3ec <__assert_fail@plt+0xde94>
   1f824:	ldr	r3, [sp, #100]	; 0x64
   1f828:	add	r2, sp, #268	; 0x10c
   1f82c:	mov	r1, sl
   1f830:	mov	r0, r5
   1f834:	bl	1aab0 <__assert_fail@plt+0x9558>
   1f838:	subs	r6, r0, #0
   1f83c:	beq	1f8a0 <__assert_fail@plt+0xe348>
   1f840:	ldr	r3, [r5, #12]
   1f844:	ldr	sl, [r3, r7, lsl #2]
   1f848:	b	1f74c <__assert_fail@plt+0xe1f4>
   1f84c:	cmp	r9, #0
   1f850:	mvnne	sl, #0
   1f854:	bne	1f798 <__assert_fail@plt+0xe240>
   1f858:	mov	r1, sl
   1f85c:	add	r0, sp, #104	; 0x68
   1f860:	bl	18d64 <__assert_fail@plt+0x780c>
   1f864:	cmp	r0, #0
   1f868:	beq	1f940 <__assert_fail@plt+0xe3e8>
   1f86c:	ldr	r3, [r5, #20]
   1f870:	add	r2, r7, r7, lsl #1
   1f874:	add	r3, r3, r2, lsl #2
   1f878:	ldr	r3, [r3, #8]
   1f87c:	ldr	sl, [r3]
   1f880:	ldr	r3, [sp, #368]	; 0x170
   1f884:	ldr	r2, [sp, #100]	; 0x64
   1f888:	ldr	r0, [r3, r2, lsl #2]
   1f88c:	mov	r1, sl
   1f890:	add	r0, r0, #4
   1f894:	bl	159d0 <__assert_fail@plt+0x4478>
   1f898:	cmp	r0, #0
   1f89c:	bne	1f798 <__assert_fail@plt+0xe240>
   1f8a0:	ldr	r1, [r5]
   1f8a4:	ldr	r2, [sp, #100]	; 0x64
   1f8a8:	add	r1, r1, r8
   1f8ac:	add	r0, sp, #268	; 0x10c
   1f8b0:	bl	19790 <__assert_fail@plt+0x8238>
   1f8b4:	cmp	r0, #0
   1f8b8:	mvneq	sl, #0
   1f8bc:	beq	1fbbc <__assert_fail@plt+0xe664>
   1f8c0:	ldr	r3, [r5, #12]
   1f8c4:	ldr	sl, [r3, r7, lsl #2]
   1f8c8:	ldr	r6, [sp, #100]	; 0x64
   1f8cc:	add	r6, r6, #1
   1f8d0:	b	1f754 <__assert_fail@plt+0xe1fc>
   1f8d4:	add	r2, r4, r3, lsl #3
   1f8d8:	ldr	r0, [r4, r3, lsl #3]
   1f8dc:	cmn	r0, #1
   1f8e0:	beq	1fe98 <__assert_fail@plt+0xe940>
   1f8e4:	ldr	r3, [r2, #4]
   1f8e8:	cmn	r3, #1
   1f8ec:	beq	1fea0 <__assert_fail@plt+0xe948>
   1f8f0:	cmp	r6, #0
   1f8f4:	beq	1f858 <__assert_fail@plt+0xe300>
   1f8f8:	ldr	ip, [sp, #272]	; 0x110
   1f8fc:	ldr	r1, [sp, #100]	; 0x64
   1f900:	ldr	r3, [sp, #296]	; 0x128
   1f904:	sub	r3, r3, r1
   1f908:	cmp	r6, r3
   1f90c:	bgt	1fea8 <__assert_fail@plt+0xe950>
   1f910:	mov	r2, r6
   1f914:	add	r1, ip, r1
   1f918:	add	r0, ip, r0
   1f91c:	bl	112b8 <memcmp@plt>
   1f920:	cmp	r0, #0
   1f924:	beq	1f840 <__assert_fail@plt+0xe2e8>
   1f928:	mvn	sl, #0
   1f92c:	b	1fbbc <__assert_fail@plt+0xe664>
   1f930:	mov	sl, r6
   1f934:	b	1f798 <__assert_fail@plt+0xe240>
   1f938:	ldr	fp, [sp, #12]
   1f93c:	b	1f5ac <__assert_fail@plt+0xe054>
   1f940:	ldr	fp, [sp, #12]
   1f944:	b	1f5ac <__assert_fail@plt+0xe054>
   1f948:	ldr	fp, [sp, #12]
   1f94c:	ldr	r0, [sp, #112]	; 0x70
   1f950:	bl	13b40 <__assert_fail@plt+0x25e8>
   1f954:	add	r0, sp, #128	; 0x80
   1f958:	bl	18b50 <__assert_fail@plt+0x75f8>
   1f95c:	mov	r0, r9
   1f960:	bl	18b84 <__assert_fail@plt+0x762c>
   1f964:	b	1f554 <__assert_fail@plt+0xdffc>
   1f968:	ldr	r5, [r0, #-4]
   1f96c:	add	r5, r5, ip
   1f970:	str	r5, [r0, #-4]
   1f974:	ldr	r0, [r3, #4]
   1f978:	add	r0, r0, ip
   1f97c:	str	r0, [r3, #4]
   1f980:	add	r3, r3, #8
   1f984:	add	r2, r2, #8
   1f988:	cmp	r3, lr
   1f98c:	beq	1f9d0 <__assert_fail@plt+0xe478>
   1f990:	mov	r0, r2
   1f994:	ldr	r5, [r2, #-4]
   1f998:	cmn	r5, #1
   1f99c:	beq	1f980 <__assert_fail@plt+0xe428>
   1f9a0:	cmp	r4, #0
   1f9a4:	beq	1f968 <__assert_fail@plt+0xe410>
   1f9a8:	cmp	r5, r7
   1f9ac:	ldrne	r5, [r8, r5, lsl #2]
   1f9b0:	moveq	r5, r9
   1f9b4:	str	r5, [r2, #-4]
   1f9b8:	ldr	r5, [r3, #4]
   1f9bc:	cmp	r7, r5
   1f9c0:	ldrne	r5, [r8, r5, lsl #2]
   1f9c4:	moveq	r5, r9
   1f9c8:	str	r5, [r3, #4]
   1f9cc:	b	1f968 <__assert_fail@plt+0xe410>
   1f9d0:	ldr	r2, [sp, #64]	; 0x40
   1f9d4:	cmp	r2, #0
   1f9d8:	ble	1fa00 <__assert_fail@plt+0xe4a8>
   1f9dc:	ldr	r2, [sp, #460]	; 0x1cc
   1f9e0:	ldr	r0, [sp, #456]	; 0x1c8
   1f9e4:	add	r0, r2, r0, lsl #3
   1f9e8:	mvn	r2, #0
   1f9ec:	str	r2, [r3]
   1f9f0:	str	r2, [r3, #4]
   1f9f4:	add	r3, r3, #8
   1f9f8:	cmp	r0, r3
   1f9fc:	bne	1f9ec <__assert_fail@plt+0xe494>
   1fa00:	ldr	r3, [fp, #132]	; 0x84
   1fa04:	cmp	r3, #0
   1fa08:	beq	1fb30 <__assert_fail@plt+0xe5d8>
   1fa0c:	ldr	r3, [sp, #60]	; 0x3c
   1fa10:	sub	r0, r3, #1
   1fa14:	mov	r3, #0
   1fa18:	ldr	ip, [sp, #460]	; 0x1cc
   1fa1c:	b	1fa48 <__assert_fail@plt+0xe4f0>
   1fa20:	add	r2, r2, #1
   1fa24:	ldr	r2, [ip, r2, lsl #3]
   1fa28:	str	r2, [r1, #8]
   1fa2c:	ldr	r2, [fp, #132]	; 0x84
   1fa30:	ldr	r2, [r2, r3, lsl #2]
   1fa34:	add	r2, ip, r2, lsl #3
   1fa38:	ldr	r2, [r2, #12]
   1fa3c:	str	r2, [r1, #12]
   1fa40:	add	r3, r3, #1
   1fa44:	add	r1, r1, #8
   1fa48:	cmp	r0, r3
   1fa4c:	beq	1fb30 <__assert_fail@plt+0xe5d8>
   1fa50:	ldr	r2, [fp, #132]	; 0x84
   1fa54:	ldr	r2, [r2, r3, lsl #2]
   1fa58:	cmp	r3, r2
   1fa5c:	bne	1fa20 <__assert_fail@plt+0xe4c8>
   1fa60:	b	1fa40 <__assert_fail@plt+0xe4e8>
   1fa64:	mov	r3, #12
   1fa68:	str	r3, [sp, #28]
   1fa6c:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fa70:	mov	r3, #12
   1fa74:	str	r3, [sp, #28]
   1fa78:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fa7c:	mov	r3, #1
   1fa80:	str	r3, [sp, #28]
   1fa84:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fa88:	ldr	fp, [sp, #40]	; 0x28
   1fa8c:	mov	r3, #12
   1fa90:	str	r3, [sp, #28]
   1fa94:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fa98:	ldr	fp, [sp, #40]	; 0x28
   1fa9c:	str	r0, [sp, #28]
   1faa0:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1faa4:	ldr	fp, [sp, #40]	; 0x28
   1faa8:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1faac:	add	r0, sp, #268	; 0x10c
   1fab0:	bl	18aa4 <__assert_fail@plt+0x754c>
   1fab4:	ldr	r0, [sp, #400]	; 0x190
   1fab8:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fabc:	ldr	r0, [sp, #384]	; 0x180
   1fac0:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fac4:	b	1fb44 <__assert_fail@plt+0xe5ec>
   1fac8:	mov	r3, #1
   1facc:	str	r3, [sp, #28]
   1fad0:	b	1fb4c <__assert_fail@plt+0xe5f4>
   1fad4:	mov	r3, #1
   1fad8:	str	r3, [sp, #28]
   1fadc:	b	1fb4c <__assert_fail@plt+0xe5f4>
   1fae0:	mov	r3, #1
   1fae4:	str	r3, [sp, #28]
   1fae8:	b	1fb4c <__assert_fail@plt+0xe5f4>
   1faec:	ldr	r3, [sp, #36]	; 0x24
   1faf0:	str	r3, [sp, #272]	; 0x110
   1faf4:	ldr	r3, [fp, #92]	; 0x5c
   1faf8:	ldr	r2, [sp, #48]	; 0x30
   1fafc:	cmp	r3, #1
   1fb00:	movgt	r2, #0
   1fb04:	mov	r3, r2
   1fb08:	b	1e70c <__assert_fail@plt+0xd1b4>
   1fb0c:	mov	r3, #12
   1fb10:	str	r3, [sp, #28]
   1fb14:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fb18:	mov	r3, #0
   1fb1c:	str	r3, [sp, #104]	; 0x68
   1fb20:	b	1f0a8 <__assert_fail@plt+0xdb50>
   1fb24:	ldr	fp, [sp, #40]	; 0x28
   1fb28:	mov	r3, #12
   1fb2c:	str	r3, [sp, #28]
   1fb30:	ldr	r0, [sp, #368]	; 0x170
   1fb34:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fb38:	ldr	r3, [fp, #76]	; 0x4c
   1fb3c:	cmp	r3, #0
   1fb40:	bne	1faac <__assert_fail@plt+0xe554>
   1fb44:	add	r0, sp, #268	; 0x10c
   1fb48:	bl	188fc <__assert_fail@plt+0x73a4>
   1fb4c:	ldr	r0, [sp, #28]
   1fb50:	add	sp, sp, #412	; 0x19c
   1fb54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb58:	ldr	fp, [sp, #40]	; 0x28
   1fb5c:	mov	r3, #12
   1fb60:	str	r3, [sp, #28]
   1fb64:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fb68:	mov	r3, #0
   1fb6c:	ldr	r2, [sp, #460]	; 0x1cc
   1fb70:	str	r3, [r2]
   1fb74:	ldr	r3, [sp, #360]	; 0x168
   1fb78:	str	r3, [r2, #4]
   1fb7c:	b	1f560 <__assert_fail@plt+0xe008>
   1fb80:	ldr	r3, [sp, #24]
   1fb84:	ldr	r3, [r3]
   1fb88:	str	r3, [sp, #24]
   1fb8c:	mov	r9, #0
   1fb90:	str	r9, [sp, #116]	; 0x74
   1fb94:	mov	r3, #2
   1fb98:	str	r3, [sp, #120]	; 0x78
   1fb9c:	str	r9, [sp, #124]	; 0x7c
   1fba0:	str	r9, [sp, #128]	; 0x80
   1fba4:	mov	r3, #16
   1fba8:	str	r3, [sp, #132]	; 0x84
   1fbac:	add	r3, sp, #140	; 0x8c
   1fbb0:	str	r3, [sp, #136]	; 0x88
   1fbb4:	b	1f2d0 <__assert_fail@plt+0xdd78>
   1fbb8:	mvn	sl, #1
   1fbbc:	cmn	sl, #2
   1fbc0:	beq	1f938 <__assert_fail@plt+0xe3e0>
   1fbc4:	add	r3, sp, #104	; 0x68
   1fbc8:	str	r3, [sp, #4]
   1fbcc:	ldr	r3, [sp, #16]
   1fbd0:	str	r3, [sp]
   1fbd4:	mov	r3, r4
   1fbd8:	mov	r2, fp
   1fbdc:	ldr	r1, [sp, #40]	; 0x28
   1fbe0:	mov	r0, r9
   1fbe4:	bl	19ca4 <__assert_fail@plt+0x874c>
   1fbe8:	subs	sl, r0, #0
   1fbec:	bge	1f7a0 <__assert_fail@plt+0xe248>
   1fbf0:	ldr	fp, [sp, #12]
   1fbf4:	ldr	r0, [sp, #112]	; 0x70
   1fbf8:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fbfc:	add	r0, sp, #128	; 0x80
   1fc00:	bl	18b50 <__assert_fail@plt+0x75f8>
   1fc04:	mov	r0, r9
   1fc08:	bl	18b84 <__assert_fail@plt+0x762c>
   1fc0c:	mov	r3, #1
   1fc10:	str	r3, [sp, #28]
   1fc14:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fc18:	mov	r3, #12
   1fc1c:	str	r3, [sp, #28]
   1fc20:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fc24:	ldr	r3, [sp, #104]	; 0x68
   1fc28:	cmp	r3, #0
   1fc2c:	bne	1fdb0 <__assert_fail@plt+0xe858>
   1fc30:	ldr	r2, [sp, #20]
   1fc34:	cmp	r2, #0
   1fc38:	ldrne	r3, [r2]
   1fc3c:	ldrne	r1, [sp, #32]
   1fc40:	addne	r3, r3, r1
   1fc44:	strne	r3, [r2]
   1fc48:	cmn	sl, #1
   1fc4c:	beq	1fdf0 <__assert_fail@plt+0xe898>
   1fc50:	cmn	sl, #2
   1fc54:	beq	1fa88 <__assert_fail@plt+0xe530>
   1fc58:	str	sl, [sp, #360]	; 0x168
   1fc5c:	ldr	r3, [sp, #60]	; 0x3c
   1fc60:	cmp	r3, #1
   1fc64:	movls	fp, #0
   1fc68:	movhi	fp, #1
   1fc6c:	ldr	r3, [sp, #24]
   1fc70:	ldrb	r3, [r3, #28]
   1fc74:	eor	r3, r3, #16
   1fc78:	ands	r3, fp, r3, lsr #4
   1fc7c:	beq	1f13c <__assert_fail@plt+0xdbe4>
   1fc80:	mov	r2, sl
   1fc84:	ldr	r3, [sp, #368]	; 0x170
   1fc88:	ldr	r1, [r3, sl, lsl #2]
   1fc8c:	add	r0, sp, #268	; 0x10c
   1fc90:	bl	19bcc <__assert_fail@plt+0x8674>
   1fc94:	str	r0, [sp, #364]	; 0x16c
   1fc98:	ldr	r3, [sp, #40]	; 0x28
   1fc9c:	ldrb	r3, [r3, #88]	; 0x58
   1fca0:	tst	r3, #1
   1fca4:	bne	1fcb8 <__assert_fail@plt+0xe760>
   1fca8:	ldr	r3, [sp, #40]	; 0x28
   1fcac:	ldr	r3, [r3, #76]	; 0x4c
   1fcb0:	cmp	r3, #0
   1fcb4:	beq	1f360 <__assert_fail@plt+0xde08>
   1fcb8:	ldr	r9, [sp, #352]	; 0x160
   1fcbc:	ldr	r7, [sp, #364]	; 0x16c
   1fcc0:	cmn	sl, #-1073741822	; 0xc0000002
   1fcc4:	bhi	1fb58 <__assert_fail@plt+0xe600>
   1fcc8:	add	r4, sl, #1
   1fccc:	lsl	r4, r4, #2
   1fcd0:	mov	r0, r4
   1fcd4:	bl	244c8 <__assert_fail@plt+0x12f70>
   1fcd8:	subs	r5, r0, #0
   1fcdc:	beq	1fe60 <__assert_fail@plt+0xe908>
   1fce0:	ldr	r3, [r9, #76]	; 0x4c
   1fce4:	cmp	r3, #0
   1fce8:	beq	1f18c <__assert_fail@plt+0xdc34>
   1fcec:	mov	r0, r4
   1fcf0:	bl	244c8 <__assert_fail@plt+0x12f70>
   1fcf4:	subs	r6, r0, #0
   1fcf8:	beq	1fe60 <__assert_fail@plt+0xe908>
   1fcfc:	str	fp, [sp, #12]
   1fd00:	add	fp, sl, #1
   1fd04:	lsl	r4, fp, #2
   1fd08:	mov	r2, r4
   1fd0c:	mov	r1, #0
   1fd10:	mov	r0, r6
   1fd14:	bl	1145c <memset@plt>
   1fd18:	str	r5, [sp, #128]	; 0x80
   1fd1c:	str	r6, [sp, #132]	; 0x84
   1fd20:	str	r7, [sp, #136]	; 0x88
   1fd24:	str	sl, [sp, #140]	; 0x8c
   1fd28:	mov	r3, #0
   1fd2c:	str	r3, [sp, #144]	; 0x90
   1fd30:	str	r3, [sp, #148]	; 0x94
   1fd34:	str	r3, [sp, #152]	; 0x98
   1fd38:	add	r1, sp, #128	; 0x80
   1fd3c:	add	r0, sp, #268	; 0x10c
   1fd40:	bl	1e214 <__assert_fail@plt+0xccbc>
   1fd44:	mov	r8, r0
   1fd48:	ldr	r0, [sp, #152]	; 0x98
   1fd4c:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fd50:	cmp	r8, #0
   1fd54:	bne	1fdd8 <__assert_fail@plt+0xe880>
   1fd58:	ldr	r3, [r5]
   1fd5c:	cmp	r3, #0
   1fd60:	bne	1f158 <__assert_fail@plt+0xdc00>
   1fd64:	ldr	r3, [r6]
   1fd68:	cmp	r3, #0
   1fd6c:	bne	1f158 <__assert_fail@plt+0xdc00>
   1fd70:	sub	r4, r4, #4
   1fd74:	ldr	r3, [sp, #368]	; 0x170
   1fd78:	add	r3, r3, r4
   1fd7c:	subs	sl, sl, #1
   1fd80:	bmi	1fe84 <__assert_fail@plt+0xe92c>
   1fd84:	ldr	r1, [r3, #-4]!
   1fd88:	cmp	r1, #0
   1fd8c:	beq	1fd7c <__assert_fail@plt+0xe824>
   1fd90:	ldrb	r2, [r1, #52]	; 0x34
   1fd94:	tst	r2, #16
   1fd98:	beq	1fd7c <__assert_fail@plt+0xe824>
   1fd9c:	mov	r2, sl
   1fda0:	add	r0, sp, #268	; 0x10c
   1fda4:	bl	19bcc <__assert_fail@plt+0x8674>
   1fda8:	mov	r7, r0
   1fdac:	b	1fd00 <__assert_fail@plt+0xe7a8>
   1fdb0:	ldr	fp, [sp, #40]	; 0x28
   1fdb4:	b	1fb28 <__assert_fail@plt+0xe5d0>
   1fdb8:	mov	r2, sl
   1fdbc:	ldr	r3, [sp, #368]	; 0x170
   1fdc0:	ldr	r1, [r3, sl, lsl #2]
   1fdc4:	add	r0, sp, #268	; 0x10c
   1fdc8:	bl	19bcc <__assert_fail@plt+0x8674>
   1fdcc:	str	r0, [sp, #364]	; 0x16c
   1fdd0:	b	1fca8 <__assert_fail@plt+0xe750>
   1fdd4:	mov	r6, #0
   1fdd8:	mov	r0, r5
   1fddc:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fde0:	mov	r0, r6
   1fde4:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fde8:	cmp	r8, #1
   1fdec:	bne	1fe54 <__assert_fail@plt+0xe8fc>
   1fdf0:	add	r0, sp, #268	; 0x10c
   1fdf4:	bl	18aa4 <__assert_fail@plt+0x754c>
   1fdf8:	ldr	r3, [sp, #404]	; 0x194
   1fdfc:	ldr	r2, [sp, #84]	; 0x54
   1fe00:	add	r3, r2, r3
   1fe04:	str	r3, [sp, #404]	; 0x194
   1fe08:	ldr	r2, [sp, #44]	; 0x2c
   1fe0c:	cmp	r2, r3
   1fe10:	movge	r2, #0
   1fe14:	movlt	r2, #1
   1fe18:	ldr	r1, [sp, #56]	; 0x38
   1fe1c:	cmp	r1, r3
   1fe20:	movle	r3, r2
   1fe24:	orrgt	r3, r2, #1
   1fe28:	cmp	r3, #0
   1fe2c:	bne	1f350 <__assert_fail@plt+0xddf8>
   1fe30:	ldr	r3, [sp, #72]	; 0x48
   1fe34:	cmp	r3, #4
   1fe38:	ldrls	pc, [pc, r3, lsl #2]
   1fe3c:	b	1eb64 <__assert_fail@plt+0xd60c>
   1fe40:	andeq	lr, r1, r8, lsr #19
   1fe44:	andeq	lr, r1, r8, lsr #19
   1fe48:	andeq	lr, r1, r0, asr r9
   1fe4c:	andeq	lr, r1, r8, ror #17
   1fe50:	muleq	r1, r4, sl
   1fe54:	ldr	fp, [sp, #40]	; 0x28
   1fe58:	mov	r3, r8
   1fe5c:	b	1fe78 <__assert_fail@plt+0xe920>
   1fe60:	ldr	fp, [sp, #40]	; 0x28
   1fe64:	mov	r0, r5
   1fe68:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fe6c:	mov	r0, #0
   1fe70:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fe74:	mov	r3, #12
   1fe78:	str	r3, [sp, #28]
   1fe7c:	b	1fb30 <__assert_fail@plt+0xe5d8>
   1fe80:	mov	r6, #0
   1fe84:	mov	r0, r5
   1fe88:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fe8c:	mov	r0, r6
   1fe90:	bl	13b40 <__assert_fail@plt+0x25e8>
   1fe94:	b	1fdf0 <__assert_fail@plt+0xe898>
   1fe98:	mvn	sl, #0
   1fe9c:	b	1fbbc <__assert_fail@plt+0xe664>
   1fea0:	mvn	sl, #0
   1fea4:	b	1fbbc <__assert_fail@plt+0xe664>
   1fea8:	mvn	sl, #0
   1feac:	b	1fbbc <__assert_fail@plt+0xe664>
   1feb0:	mvn	sl, #0
   1feb4:	b	1fbbc <__assert_fail@plt+0xe664>
   1feb8:	mvn	sl, #0
   1febc:	b	1fbbc <__assert_fail@plt+0xe664>
   1fec0:	mvn	sl, #0
   1fec4:	b	1fbbc <__assert_fail@plt+0xe664>
   1fec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fecc:	sub	sp, sp, #156	; 0x9c
   1fed0:	mov	r9, r0
   1fed4:	mov	r4, r1
   1fed8:	mov	r8, r2
   1fedc:	str	r3, [sp, #24]
   1fee0:	ldr	sl, [sp, #196]	; 0xc4
   1fee4:	ldr	r3, [r1]
   1fee8:	str	r3, [sp, #20]
   1feec:	ldrb	r2, [r2, #4]
   1fef0:	sub	r3, r2, #1
   1fef4:	cmp	r3, #35	; 0x23
   1fef8:	ldrls	pc, [pc, r3, lsl #2]
   1fefc:	b	20d1c <__assert_fail@plt+0xf7c4>
   1ff00:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1ff04:	andeq	r1, r2, r8, ror #2
   1ff08:	andeq	r0, r2, ip, lsl sp
   1ff0c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ff10:	andeq	r0, r2, ip, lsr #24
   1ff14:	andeq	r0, r2, ip, lsl sp
   1ff18:	andeq	r0, r2, ip, lsl sp
   1ff1c:	andeq	r0, r2, r8, asr r0
   1ff20:	andeq	r0, r2, r4, lsr #19
   1ff24:	andeq	r1, r2, r8, ror #2
   1ff28:	andeq	r0, r2, r0, lsl #19
   1ff2c:	andeq	r0, r2, r4, asr #20
   1ff30:	andeq	r0, r2, ip, lsl sp
   1ff34:	andeq	r0, r2, ip, lsl sp
   1ff38:	andeq	r0, r2, ip, lsl sp
   1ff3c:	andeq	r0, r2, ip, lsl sp
   1ff40:	andeq	r0, r2, ip, lsl sp
   1ff44:	andeq	r0, r2, r0, lsl #19
   1ff48:	andeq	r0, r2, r0, lsl #19
   1ff4c:	andeq	r0, r2, r4, lsr r1
   1ff50:	andeq	r0, r2, ip, lsl sp
   1ff54:	andeq	r0, r2, ip, lsl sp
   1ff58:	andeq	r0, r2, r8, ror #18
   1ff5c:	andeq	r0, r2, ip, lsr #19
   1ff60:	andeq	r0, r2, ip, lsl sp
   1ff64:	andeq	r0, r2, ip, lsl sp
   1ff68:	andeq	r0, r2, ip, lsl sp
   1ff6c:	andeq	r0, r2, ip, lsl sp
   1ff70:	andeq	r0, r2, ip, lsl sp
   1ff74:	andeq	r0, r2, ip, lsl sp
   1ff78:	andeq	r0, r2, ip, lsl sp
   1ff7c:	andeq	r0, r2, ip, ror #24
   1ff80:	andeq	r0, r2, ip, ror #24
   1ff84:			; <UNDEFINED> instruction: 0x00020cbc
   1ff88:			; <UNDEFINED> instruction: 0x00020cbc
   1ff8c:	andeq	r0, r2, ip, lsl #26
   1ff90:	mov	r3, r8
   1ff94:	mov	r2, #0
   1ff98:	mov	r1, r2
   1ff9c:	ldr	r0, [sp, #20]
   1ffa0:	bl	165f8 <__assert_fail@plt+0x50a0>
   1ffa4:	subs	fp, r0, #0
   1ffa8:	moveq	r3, #12
   1ffac:	streq	r3, [sl]
   1ffb0:	beq	20fa0 <__assert_fail@plt+0xfa48>
   1ffb4:	ldr	r3, [sp, #20]
   1ffb8:	ldr	r3, [r3, #92]	; 0x5c
   1ffbc:	cmp	r3, #1
   1ffc0:	movgt	r6, #0
   1ffc4:	movgt	r5, #16
   1ffc8:	ble	209d8 <__assert_fail@plt+0xf480>
   1ffcc:	ldr	r3, [r9, #40]	; 0x28
   1ffd0:	ldr	r2, [r9, #56]	; 0x38
   1ffd4:	cmp	r2, r3
   1ffd8:	ble	209d8 <__assert_fail@plt+0xf480>
   1ffdc:	ldr	r2, [r9, #28]
   1ffe0:	cmp	r3, r2
   1ffe4:	beq	209d8 <__assert_fail@plt+0xf480>
   1ffe8:	ldr	r2, [r9, #8]
   1ffec:	ldr	r3, [r2, r3, lsl #2]
   1fff0:	cmn	r3, #1
   1fff4:	bne	209d8 <__assert_fail@plt+0xf480>
   1fff8:	ldr	r2, [sp, #24]
   1fffc:	mov	r1, r9
   20000:	mov	r0, r8
   20004:	bl	180f4 <__assert_fail@plt+0x6b9c>
   20008:	mov	r3, r8
   2000c:	mov	r2, r6
   20010:	mov	r1, r6
   20014:	ldr	r7, [sp, #20]
   20018:	mov	r0, r7
   2001c:	bl	165f8 <__assert_fail@plt+0x50a0>
   20020:	mov	r4, r0
   20024:	mov	r3, r5
   20028:	mov	r2, r0
   2002c:	mov	r1, fp
   20030:	mov	r0, r7
   20034:	bl	1676c <__assert_fail@plt+0x5214>
   20038:	mov	fp, r0
   2003c:	cmp	r0, #0
   20040:	cmpne	r4, #0
   20044:	bne	1ffcc <__assert_fail@plt+0xea74>
   20048:	mov	r3, #12
   2004c:	str	r3, [sl]
   20050:	mov	fp, #0
   20054:	b	20fa0 <__assert_fail@plt+0xfa48>
   20058:	ldr	r5, [r1, #24]
   2005c:	add	r3, r5, #1
   20060:	str	r3, [r1, #24]
   20064:	ldr	r6, [sp, #24]
   20068:	orr	r2, r6, #8388608	; 0x800000
   2006c:	mov	r1, r0
   20070:	mov	r0, r8
   20074:	bl	180f4 <__assert_fail@plt+0x6b9c>
   20078:	ldrb	r3, [r8, #4]
   2007c:	cmp	r3, #9
   20080:	beq	200e8 <__assert_fail@plt+0xeb90>
   20084:	str	sl, [sp, #4]
   20088:	ldr	r3, [sp, #192]	; 0xc0
   2008c:	add	r3, r3, #1
   20090:	str	r3, [sp]
   20094:	mov	r3, r6
   20098:	mov	r2, r8
   2009c:	mov	r1, r4
   200a0:	mov	r0, r9
   200a4:	bl	213d4 <__assert_fail@plt+0xfe7c>
   200a8:	ldr	r3, [sl]
   200ac:	cmp	r3, #0
   200b0:	beq	200bc <__assert_fail@plt+0xeb64>
   200b4:	mov	fp, #0
   200b8:	b	20fa0 <__assert_fail@plt+0xfa48>
   200bc:	ldrb	r3, [r8, #4]
   200c0:	cmp	r3, #9
   200c4:	beq	200ec <__assert_fail@plt+0xeb94>
   200c8:	cmp	r0, #0
   200cc:	beq	200dc <__assert_fail@plt+0xeb84>
   200d0:	mov	r2, #0
   200d4:	ldr	r1, [pc, #3880]	; 21004 <__assert_fail@plt+0xfaac>
   200d8:	bl	16408 <__assert_fail@plt+0x4eb0>
   200dc:	mov	r3, #8
   200e0:	str	r3, [sl]
   200e4:	b	200b4 <__assert_fail@plt+0xeb5c>
   200e8:	mov	r0, #0
   200ec:	cmp	r5, #8
   200f0:	bhi	20108 <__assert_fail@plt+0xebb0>
   200f4:	ldr	r1, [sp, #20]
   200f8:	ldr	r3, [r1, #84]	; 0x54
   200fc:	mov	r2, #1
   20100:	orr	r3, r3, r2, lsl r5
   20104:	str	r3, [r1, #84]	; 0x54
   20108:	mov	r3, #17
   2010c:	mov	r2, #0
   20110:	mov	r1, r0
   20114:	ldr	r0, [sp, #20]
   20118:	bl	1676c <__assert_fail@plt+0x5214>
   2011c:	subs	fp, r0, #0
   20120:	moveq	r3, #12
   20124:	streq	r3, [sl]
   20128:	beq	20fa0 <__assert_fail@plt+0xfa48>
   2012c:	str	r5, [fp, #20]
   20130:	b	209d8 <__assert_fail@plt+0xf480>
   20134:	mov	r3, #0
   20138:	str	r3, [sp, #60]	; 0x3c
   2013c:	mov	r1, #1
   20140:	mov	r0, #32
   20144:	bl	24478 <__assert_fail@plt+0x12f20>
   20148:	mov	r5, r0
   2014c:	mov	r1, #1
   20150:	mov	r0, #40	; 0x28
   20154:	bl	24478 <__assert_fail@plt+0x12f20>
   20158:	mov	r7, r0
   2015c:	cmp	r0, #0
   20160:	cmpne	r5, #0
   20164:	moveq	r3, #1
   20168:	movne	r3, #0
   2016c:	str	r3, [sp, #40]	; 0x28
   20170:	beq	201e0 <__assert_fail@plt+0xec88>
   20174:	ldr	r2, [sp, #24]
   20178:	mov	r1, r9
   2017c:	mov	r0, r8
   20180:	bl	15bc0 <__assert_fail@plt+0x4668>
   20184:	str	r0, [sp, #28]
   20188:	ldrb	r3, [r8, #4]
   2018c:	cmp	r3, #2
   20190:	streq	r3, [sl]
   20194:	beq	20328 <__assert_fail@plt+0xedd0>
   20198:	cmp	r3, #25
   2019c:	beq	201fc <__assert_fail@plt+0xeca4>
   201a0:	ldr	r3, [sp, #40]	; 0x28
   201a4:	str	r3, [sp, #44]	; 0x2c
   201a8:	ldrb	r3, [r8, #4]
   201ac:	cmp	r3, #21
   201b0:	moveq	r3, #1
   201b4:	strbeq	r3, [r8, #4]
   201b8:	mov	fp, #0
   201bc:	mov	r3, #1
   201c0:	str	fp, [sp, #36]	; 0x24
   201c4:	ldr	r2, [sp, #24]
   201c8:	lsr	r2, r2, #16
   201cc:	and	r2, r2, r3
   201d0:	str	r2, [sp, #52]	; 0x34
   201d4:	str	sl, [sp, #196]	; 0xc4
   201d8:	ldr	sl, [sp, #20]
   201dc:	b	205d8 <__assert_fail@plt+0xf080>
   201e0:	mov	r0, r5
   201e4:	bl	13b40 <__assert_fail@plt+0x25e8>
   201e8:	mov	r0, r7
   201ec:	bl	13b40 <__assert_fail@plt+0x25e8>
   201f0:	mov	r3, #12
   201f4:	str	r3, [sl]
   201f8:	b	20338 <__assert_fail@plt+0xede0>
   201fc:	ldrb	r3, [r7, #16]
   20200:	orr	r3, r3, #1
   20204:	strb	r3, [r7, #16]
   20208:	ldr	r3, [sp, #24]
   2020c:	tst	r3, #256	; 0x100
   20210:	ldrne	r3, [r5]
   20214:	orrne	r3, r3, #1024	; 0x400
   20218:	strne	r3, [r5]
   2021c:	ldr	r3, [r9, #40]	; 0x28
   20220:	ldr	r2, [sp, #28]
   20224:	add	r3, r3, r2
   20228:	str	r3, [r9, #40]	; 0x28
   2022c:	ldr	r2, [sp, #24]
   20230:	mov	r1, r9
   20234:	mov	r0, r8
   20238:	bl	15bc0 <__assert_fail@plt+0x4668>
   2023c:	str	r0, [sp, #28]
   20240:	ldrb	r3, [r8, #4]
   20244:	cmp	r3, #2
   20248:	streq	r3, [sl]
   2024c:	beq	20328 <__assert_fail@plt+0xedd0>
   20250:	mov	r3, #1
   20254:	str	r3, [sp, #44]	; 0x2c
   20258:	b	201a8 <__assert_fail@plt+0xec50>
   2025c:	ldr	sl, [sp, #196]	; 0xc4
   20260:	str	r0, [sl]
   20264:	b	20328 <__assert_fail@plt+0xedd0>
   20268:	ldr	sl, [sp, #196]	; 0xc4
   2026c:	mov	r3, #7
   20270:	str	r3, [sl]
   20274:	b	20328 <__assert_fail@plt+0xedd0>
   20278:	ldr	r3, [r9, #40]	; 0x28
   2027c:	ldr	r2, [sp, #28]
   20280:	add	r3, r3, r2
   20284:	str	r3, [r9, #40]	; 0x28
   20288:	ldr	r2, [sp, #24]
   2028c:	mov	r1, r9
   20290:	add	r0, sp, #80	; 0x50
   20294:	bl	15bc0 <__assert_fail@plt+0x4668>
   20298:	mov	r3, r0
   2029c:	ldrb	r2, [sp, #84]	; 0x54
   202a0:	cmp	r2, #2
   202a4:	beq	2034c <__assert_fail@plt+0xedf4>
   202a8:	cmp	r2, #21
   202ac:	beq	2035c <__assert_fail@plt+0xee04>
   202b0:	add	r2, sp, #120	; 0x78
   202b4:	str	r2, [sp, #76]	; 0x4c
   202b8:	mov	r2, #3
   202bc:	str	r2, [sp, #72]	; 0x48
   202c0:	mov	r2, #1
   202c4:	str	r2, [sp, #8]
   202c8:	ldr	r2, [sp, #24]
   202cc:	str	r2, [sp, #4]
   202d0:	str	sl, [sp]
   202d4:	add	r2, sp, #80	; 0x50
   202d8:	mov	r1, r9
   202dc:	add	r0, sp, #72	; 0x48
   202e0:	bl	16180 <__assert_fail@plt+0x4c28>
   202e4:	cmp	r0, #0
   202e8:	bne	21178 <__assert_fail@plt+0xfc20>
   202ec:	ldr	r2, [sp, #24]
   202f0:	mov	r1, r9
   202f4:	mov	r0, r8
   202f8:	bl	15bc0 <__assert_fail@plt+0x4668>
   202fc:	str	r0, [sp, #28]
   20300:	ldr	r6, [sp, #64]	; 0x40
   20304:	sub	r3, r6, #2
   20308:	bics	r3, r3, #2
   2030c:	beq	20594 <__assert_fail@plt+0xf03c>
   20310:	ldr	r4, [sp, #72]	; 0x48
   20314:	cmp	r4, #2
   20318:	bne	20378 <__assert_fail@plt+0xee20>
   2031c:	ldr	sl, [sp, #196]	; 0xc4
   20320:	mov	r3, #11
   20324:	str	r3, [sl]
   20328:	mov	r0, r5
   2032c:	bl	13b40 <__assert_fail@plt+0x25e8>
   20330:	mov	r0, r7
   20334:	bl	181b4 <__assert_fail@plt+0x6c5c>
   20338:	ldr	r3, [sl]
   2033c:	cmp	r3, #0
   20340:	bne	21170 <__assert_fail@plt+0xfc18>
   20344:	mov	fp, #0
   20348:	b	209d8 <__assert_fail@plt+0xf480>
   2034c:	ldr	sl, [sp, #196]	; 0xc4
   20350:	mov	r3, #7
   20354:	str	r3, [sl]
   20358:	b	20328 <__assert_fail@plt+0xedd0>
   2035c:	ldr	r3, [r9, #40]	; 0x28
   20360:	ldr	r2, [sp, #28]
   20364:	sub	r3, r3, r2
   20368:	str	r3, [r9, #40]	; 0x28
   2036c:	mov	r3, #1
   20370:	strb	r3, [r8, #4]
   20374:	b	2064c <__assert_fail@plt+0xf0f4>
   20378:	cmp	r4, #4
   2037c:	beq	21184 <__assert_fail@plt+0xfc2c>
   20380:	cmp	r6, #3
   20384:	beq	203b0 <__assert_fail@plt+0xee58>
   20388:	cmp	r4, #3
   2038c:	beq	2125c <__assert_fail@plt+0xfd04>
   20390:	cmp	r6, #0
   20394:	beq	203cc <__assert_fail@plt+0xee74>
   20398:	cmp	r6, #3
   2039c:	movne	r0, #0
   203a0:	bne	203d0 <__assert_fail@plt+0xee78>
   203a4:	ldr	r3, [sp, #68]	; 0x44
   203a8:	ldrb	r0, [r3]
   203ac:	b	203d0 <__assert_fail@plt+0xee78>
   203b0:	ldr	r0, [sp, #68]	; 0x44
   203b4:	bl	11414 <strlen@plt>
   203b8:	cmp	r0, #1
   203bc:	bls	21254 <__assert_fail@plt+0xfcfc>
   203c0:	ldr	sl, [sp, #196]	; 0xc4
   203c4:	mov	r3, #3
   203c8:	b	2059c <__assert_fail@plt+0xf044>
   203cc:	ldrb	r0, [sp, #68]	; 0x44
   203d0:	cmp	r4, #0
   203d4:	bne	204c4 <__assert_fail@plt+0xef6c>
   203d8:	ldrb	r3, [sp, #76]	; 0x4c
   203dc:	str	r3, [sp, #32]
   203e0:	cmp	r6, #0
   203e4:	cmpne	r6, #3
   203e8:	ldrne	r6, [sp, #68]	; 0x44
   203ec:	bne	20404 <__assert_fail@plt+0xeeac>
   203f0:	ldr	r3, [sl, #92]	; 0x5c
   203f4:	cmp	r3, #1
   203f8:	ble	204dc <__assert_fail@plt+0xef84>
   203fc:	bl	11468 <btowc@plt>
   20400:	mov	r6, r0
   20404:	ldr	r3, [sp, #72]	; 0x48
   20408:	cmp	r3, #3
   2040c:	cmpne	r3, #0
   20410:	bne	204f4 <__assert_fail@plt+0xef9c>
   20414:	ldr	r3, [sl, #92]	; 0x5c
   20418:	cmp	r3, #1
   2041c:	ble	204ec <__assert_fail@plt+0xef94>
   20420:	ldr	r0, [sp, #32]
   20424:	bl	11468 <btowc@plt>
   20428:	mov	r4, r0
   2042c:	cmn	r6, #1
   20430:	cmnne	r4, #1
   20434:	beq	21190 <__assert_fail@plt+0xfc38>
   20438:	ldr	r3, [sp, #52]	; 0x34
   2043c:	cmp	r4, r6
   20440:	movcs	r3, #0
   20444:	andcc	r3, r3, #1
   20448:	cmp	r3, #0
   2044c:	bne	2119c <__assert_fail@plt+0xfc44>
   20450:	ldr	r3, [sl, #92]	; 0x5c
   20454:	cmp	r3, #1
   20458:	ble	2052c <__assert_fail@plt+0xefd4>
   2045c:	ldr	r3, [r7, #32]
   20460:	cmp	r3, fp
   20464:	bne	2050c <__assert_fail@plt+0xefb4>
   20468:	lsl	fp, fp, #1
   2046c:	add	fp, fp, #1
   20470:	lsl	r3, fp, #2
   20474:	str	r3, [sp, #48]	; 0x30
   20478:	mov	r1, r3
   2047c:	ldr	r0, [r7, #4]
   20480:	bl	244f8 <__assert_fail@plt+0x12fa0>
   20484:	str	r0, [sp, #32]
   20488:	ldr	r1, [sp, #48]	; 0x30
   2048c:	ldr	r0, [r7, #8]
   20490:	bl	244f8 <__assert_fail@plt+0x12fa0>
   20494:	str	r0, [sp, #48]	; 0x30
   20498:	ldr	r3, [sp, #32]
   2049c:	cmp	r0, #0
   204a0:	cmpne	r3, #0
   204a4:	bne	204fc <__assert_fail@plt+0xefa4>
   204a8:	ldr	sl, [sp, #196]	; 0xc4
   204ac:	mov	r0, r3
   204b0:	bl	13b40 <__assert_fail@plt+0x25e8>
   204b4:	ldr	r0, [sp, #48]	; 0x30
   204b8:	bl	13b40 <__assert_fail@plt+0x25e8>
   204bc:	mov	r3, #12
   204c0:	b	20324 <__assert_fail@plt+0xedcc>
   204c4:	cmp	r4, #3
   204c8:	ldreq	r3, [sp, #76]	; 0x4c
   204cc:	ldrbeq	r3, [r3]
   204d0:	movne	r3, #0
   204d4:	str	r3, [sp, #32]
   204d8:	b	203e0 <__assert_fail@plt+0xee88>
   204dc:	uxtb	r6, r0
   204e0:	cmp	r4, #3
   204e4:	cmpne	r4, #0
   204e8:	bne	204f4 <__assert_fail@plt+0xef9c>
   204ec:	ldrb	r4, [sp, #32]
   204f0:	b	2042c <__assert_fail@plt+0xeed4>
   204f4:	ldr	r4, [sp, #76]	; 0x4c
   204f8:	b	2042c <__assert_fail@plt+0xeed4>
   204fc:	ldr	r3, [sp, #32]
   20500:	str	r3, [r7, #4]
   20504:	ldr	r3, [sp, #48]	; 0x30
   20508:	str	r3, [r7, #8]
   2050c:	ldr	r2, [r7, #32]
   20510:	ldr	r3, [r7, #4]
   20514:	str	r6, [r3, r2, lsl #2]
   20518:	ldr	r2, [r7, #8]
   2051c:	ldr	r3, [r7, #32]
   20520:	add	r1, r3, #1
   20524:	str	r1, [r7, #32]
   20528:	str	r4, [r2, r3, lsl #2]
   2052c:	mov	r1, #0
   20530:	mov	ip, #1
   20534:	b	20544 <__assert_fail@plt+0xefec>
   20538:	add	r1, r1, #1
   2053c:	cmp	r1, #256	; 0x100
   20540:	beq	211a8 <__assert_fail@plt+0xfc50>
   20544:	cmp	r1, r6
   20548:	movcc	r3, #0
   2054c:	movcs	r3, #1
   20550:	cmp	r1, r4
   20554:	movhi	r3, #0
   20558:	cmp	r3, #0
   2055c:	beq	20538 <__assert_fail@plt+0xefe0>
   20560:	add	r3, r1, #31
   20564:	cmp	r1, #0
   20568:	movge	r3, r1
   2056c:	asr	r3, r3, #5
   20570:	asr	r2, r1, #31
   20574:	lsr	r0, r2, #27
   20578:	add	r2, r1, r0
   2057c:	and	r2, r2, #31
   20580:	sub	r2, r2, r0
   20584:	ldr	r0, [r5, r3, lsl #2]
   20588:	orr	r2, r0, ip, lsl r2
   2058c:	str	r2, [r5, r3, lsl #2]
   20590:	b	20538 <__assert_fail@plt+0xefe0>
   20594:	ldr	sl, [sp, #196]	; 0xc4
   20598:	mov	r3, #11
   2059c:	str	r3, [sl]
   205a0:	b	20328 <__assert_fail@plt+0xedd0>
   205a4:	ldrb	r3, [sp, #68]	; 0x44
   205a8:	asr	r1, r3, #5
   205ac:	and	r3, r3, #31
   205b0:	ldr	r2, [r5, r1, lsl #2]
   205b4:	mov	r0, #1
   205b8:	orr	r3, r2, r0, lsl r3
   205bc:	str	r3, [r5, r1, lsl #2]
   205c0:	ldrb	r3, [r8, #4]
   205c4:	cmp	r3, #2
   205c8:	beq	20778 <__assert_fail@plt+0xf220>
   205cc:	cmp	r3, #21
   205d0:	beq	20788 <__assert_fail@plt+0xf230>
   205d4:	ldr	r3, [sp, #40]	; 0x28
   205d8:	add	r2, sp, #88	; 0x58
   205dc:	str	r2, [sp, #68]	; 0x44
   205e0:	mov	r2, #3
   205e4:	str	r2, [sp, #64]	; 0x40
   205e8:	str	r3, [sp, #8]
   205ec:	ldr	r3, [sp, #24]
   205f0:	str	r3, [sp, #4]
   205f4:	str	sl, [sp]
   205f8:	ldr	r3, [sp, #28]
   205fc:	mov	r2, r8
   20600:	mov	r1, r9
   20604:	add	r0, sp, #64	; 0x40
   20608:	bl	16180 <__assert_fail@plt+0x4c28>
   2060c:	cmp	r0, #0
   20610:	bne	2025c <__assert_fail@plt+0xed04>
   20614:	ldr	r2, [sp, #24]
   20618:	mov	r1, r9
   2061c:	mov	r0, r8
   20620:	bl	15bc0 <__assert_fail@plt+0x4668>
   20624:	str	r0, [sp, #28]
   20628:	ldr	r3, [sp, #64]	; 0x40
   2062c:	sub	r3, r3, #2
   20630:	bics	r3, r3, #2
   20634:	beq	2064c <__assert_fail@plt+0xf0f4>
   20638:	ldrb	r3, [r8, #4]
   2063c:	cmp	r3, #2
   20640:	beq	20268 <__assert_fail@plt+0xed10>
   20644:	cmp	r3, #22
   20648:	beq	20278 <__assert_fail@plt+0xed20>
   2064c:	ldr	r3, [sp, #64]	; 0x40
   20650:	cmp	r3, #4
   20654:	ldrls	pc, [pc, r3, lsl #2]
   20658:	b	20778 <__assert_fail@plt+0xf220>
   2065c:	andeq	r0, r2, r4, lsr #11
   20660:	andeq	r0, r2, r0, ror r6
   20664:	andeq	r0, r2, r4, asr #13
   20668:	andeq	r0, r2, r0, lsl #14
   2066c:	andeq	r0, r2, ip, lsr r7
   20670:	ldr	r3, [r7, #20]
   20674:	ldr	r2, [sp, #36]	; 0x24
   20678:	cmp	r3, r2
   2067c:	beq	2069c <__assert_fail@plt+0xf144>
   20680:	ldr	r2, [r7]
   20684:	ldr	r3, [r7, #20]
   20688:	add	r1, r3, #1
   2068c:	str	r1, [r7, #20]
   20690:	ldr	r1, [sp, #68]	; 0x44
   20694:	str	r1, [r2, r3, lsl #2]
   20698:	b	205c0 <__assert_fail@plt+0xf068>
   2069c:	lsl	r3, r2, #1
   206a0:	add	r3, r3, #1
   206a4:	str	r3, [sp, #36]	; 0x24
   206a8:	lsl	r1, r3, #2
   206ac:	ldr	r0, [r7]
   206b0:	bl	244f8 <__assert_fail@plt+0x12fa0>
   206b4:	cmp	r0, #0
   206b8:	beq	208e8 <__assert_fail@plt+0xf390>
   206bc:	str	r0, [r7]
   206c0:	b	20680 <__assert_fail@plt+0xf128>
   206c4:	ldr	r4, [sp, #68]	; 0x44
   206c8:	mov	r0, r4
   206cc:	bl	11414 <strlen@plt>
   206d0:	cmp	r0, #1
   206d4:	bne	211b8 <__assert_fail@plt+0xfc60>
   206d8:	ldrb	r3, [r4]
   206dc:	asr	r1, r3, #5
   206e0:	and	r3, r3, #31
   206e4:	ldr	r2, [r5, r1, lsl #2]
   206e8:	orr	r3, r2, r0, lsl r3
   206ec:	str	r3, [r5, r1, lsl #2]
   206f0:	mov	r3, #0
   206f4:	ldr	r2, [sp, #196]	; 0xc4
   206f8:	str	r3, [r2]
   206fc:	b	205c0 <__assert_fail@plt+0xf068>
   20700:	ldr	r4, [sp, #68]	; 0x44
   20704:	mov	r0, r4
   20708:	bl	11414 <strlen@plt>
   2070c:	cmp	r0, #1
   20710:	bne	211c8 <__assert_fail@plt+0xfc70>
   20714:	ldrb	r3, [r4]
   20718:	asr	r1, r3, #5
   2071c:	and	r3, r3, #31
   20720:	ldr	r2, [r5, r1, lsl #2]
   20724:	orr	r3, r2, r0, lsl r3
   20728:	str	r3, [r5, r1, lsl #2]
   2072c:	mov	r3, #0
   20730:	ldr	r2, [sp, #196]	; 0xc4
   20734:	str	r3, [r2]
   20738:	b	205c0 <__assert_fail@plt+0xf068>
   2073c:	ldr	r3, [sp, #24]
   20740:	str	r3, [sp, #4]
   20744:	ldr	r3, [sp, #68]	; 0x44
   20748:	str	r3, [sp]
   2074c:	add	r3, sp, #60	; 0x3c
   20750:	mov	r2, r7
   20754:	mov	r1, r5
   20758:	ldr	r0, [r9, #64]	; 0x40
   2075c:	bl	19d60 <__assert_fail@plt+0x8808>
   20760:	ldr	r3, [sp, #196]	; 0xc4
   20764:	str	r0, [r3]
   20768:	cmp	r0, #0
   2076c:	beq	205c0 <__assert_fail@plt+0xf068>
   20770:	mov	sl, r3
   20774:	b	20328 <__assert_fail@plt+0xedd0>
   20778:	ldr	sl, [sp, #196]	; 0xc4
   2077c:	mov	r3, #7
   20780:	str	r3, [sl]
   20784:	b	20328 <__assert_fail@plt+0xedd0>
   20788:	ldr	sl, [sp, #196]	; 0xc4
   2078c:	ldr	r3, [r9, #40]	; 0x28
   20790:	ldr	r2, [sp, #28]
   20794:	add	r3, r3, r2
   20798:	str	r3, [r9, #40]	; 0x28
   2079c:	ldr	r3, [sp, #44]	; 0x2c
   207a0:	cmp	r3, #0
   207a4:	beq	207c4 <__assert_fail@plt+0xf26c>
   207a8:	sub	r3, r5, #4
   207ac:	add	r1, r5, #28
   207b0:	ldr	r2, [r3, #4]
   207b4:	mvn	r2, r2
   207b8:	str	r2, [r3, #4]!
   207bc:	cmp	r1, r3
   207c0:	bne	207b0 <__assert_fail@plt+0xf258>
   207c4:	ldr	r3, [sp, #20]
   207c8:	ldr	ip, [r3, #92]	; 0x5c
   207cc:	cmp	ip, #1
   207d0:	ble	207fc <__assert_fail@plt+0xf2a4>
   207d4:	sub	r0, r5, #4
   207d8:	ldr	r1, [r3, #60]	; 0x3c
   207dc:	sub	r1, r1, #4
   207e0:	add	lr, r5, #28
   207e4:	ldr	r3, [r0, #4]
   207e8:	ldr	r2, [r1, #4]!
   207ec:	and	r3, r3, r2
   207f0:	str	r3, [r0, #4]!
   207f4:	cmp	r0, lr
   207f8:	bne	207e4 <__assert_fail@plt+0xf28c>
   207fc:	ldr	r3, [r7, #20]
   20800:	cmp	r3, #0
   20804:	bne	2084c <__assert_fail@plt+0xf2f4>
   20808:	ldr	r3, [r7, #24]
   2080c:	cmp	r3, #0
   20810:	bne	2084c <__assert_fail@plt+0xf2f4>
   20814:	ldr	r3, [r7, #28]
   20818:	cmp	r3, #0
   2081c:	bne	2084c <__assert_fail@plt+0xf2f4>
   20820:	ldr	r3, [r7, #32]
   20824:	cmp	r3, #0
   20828:	bne	2084c <__assert_fail@plt+0xf2f4>
   2082c:	cmp	ip, #1
   20830:	ble	208b4 <__assert_fail@plt+0xf35c>
   20834:	ldr	r3, [r7, #36]	; 0x24
   20838:	cmp	r3, #0
   2083c:	bne	2084c <__assert_fail@plt+0xf2f4>
   20840:	ldrb	r3, [r7, #16]
   20844:	tst	r3, #1
   20848:	beq	208b4 <__assert_fail@plt+0xf35c>
   2084c:	ldr	r0, [sp, #20]
   20850:	ldrb	r3, [r0, #88]	; 0x58
   20854:	orr	r3, r3, #2
   20858:	strb	r3, [r0, #88]	; 0x58
   2085c:	mov	r3, #6
   20860:	strb	r3, [sp, #124]	; 0x7c
   20864:	add	r3, sp, #152	; 0x98
   20868:	str	r7, [r3, #-32]!	; 0xffffffe0
   2086c:	mov	r2, #0
   20870:	mov	r1, r2
   20874:	bl	165f8 <__assert_fail@plt+0x50a0>
   20878:	subs	fp, r0, #0
   2087c:	beq	21218 <__assert_fail@plt+0xfcc0>
   20880:	ldr	r3, [r5]
   20884:	cmp	r3, #0
   20888:	bne	211d8 <__assert_fail@plt+0xfc80>
   2088c:	mov	r3, r5
   20890:	add	r2, r5, #28
   20894:	ldr	r1, [r3, #4]!
   20898:	cmp	r1, #0
   2089c:	bne	211d8 <__assert_fail@plt+0xfc80>
   208a0:	cmp	r3, r2
   208a4:	bne	20894 <__assert_fail@plt+0xf33c>
   208a8:	mov	r0, r5
   208ac:	bl	13b40 <__assert_fail@plt+0x25e8>
   208b0:	b	209d8 <__assert_fail@plt+0xf480>
   208b4:	mov	r0, r7
   208b8:	bl	181b4 <__assert_fail@plt+0x6c5c>
   208bc:	mov	r3, #3
   208c0:	strb	r3, [sp, #124]	; 0x7c
   208c4:	add	r3, sp, #152	; 0x98
   208c8:	str	r5, [r3, #-32]!	; 0xffffffe0
   208cc:	mov	r2, #0
   208d0:	mov	r1, r2
   208d4:	ldr	r0, [sp, #20]
   208d8:	bl	165f8 <__assert_fail@plt+0x50a0>
   208dc:	subs	fp, r0, #0
   208e0:	bne	209d8 <__assert_fail@plt+0xf480>
   208e4:	b	21218 <__assert_fail@plt+0xfcc0>
   208e8:	ldr	sl, [sp, #196]	; 0xc4
   208ec:	b	21218 <__assert_fail@plt+0xfcc0>
   208f0:	ldr	r2, [r8]
   208f4:	mov	r3, #1
   208f8:	lsl	r3, r3, r2
   208fc:	ldr	r2, [sp, #20]
   20900:	ldr	r2, [r2, #84]	; 0x54
   20904:	tst	r3, r2
   20908:	moveq	r3, #6
   2090c:	streq	r3, [sl]
   20910:	moveq	fp, #0
   20914:	beq	20fa0 <__assert_fail@plt+0xfa48>
   20918:	ldr	r0, [sp, #20]
   2091c:	ldr	r2, [r0, #80]	; 0x50
   20920:	orr	r3, r2, r3
   20924:	str	r3, [r0, #80]	; 0x50
   20928:	mov	r3, r8
   2092c:	mov	r2, #0
   20930:	mov	r1, r2
   20934:	bl	165f8 <__assert_fail@plt+0x50a0>
   20938:	subs	fp, r0, #0
   2093c:	moveq	r3, #12
   20940:	streq	r3, [sl]
   20944:	beq	20fa0 <__assert_fail@plt+0xfa48>
   20948:	ldr	r2, [sp, #20]
   2094c:	ldr	r3, [r2, #76]	; 0x4c
   20950:	add	r3, r3, #1
   20954:	str	r3, [r2, #76]	; 0x4c
   20958:	ldrb	r3, [r2, #88]	; 0x58
   2095c:	orr	r3, r3, #2
   20960:	strb	r3, [r2, #88]	; 0x58
   20964:	b	209d8 <__assert_fail@plt+0xf480>
   20968:	ldr	r3, [sp, #24]
   2096c:	tst	r3, #16777216	; 0x1000000
   20970:	movne	r3, #13
   20974:	strne	r3, [sl]
   20978:	movne	fp, #0
   2097c:	bne	20fa0 <__assert_fail@plt+0xfa48>
   20980:	ldr	r3, [sp, #24]
   20984:	tst	r3, #32
   20988:	movne	r3, #13
   2098c:	strne	r3, [sl]
   20990:	movne	fp, #0
   20994:	bne	20fa0 <__assert_fail@plt+0xfa48>
   20998:	ldr	r3, [sp, #24]
   2099c:	tst	r3, #16
   209a0:	bne	209ec <__assert_fail@plt+0xf494>
   209a4:	cmp	r2, #9
   209a8:	beq	20a28 <__assert_fail@plt+0xf4d0>
   209ac:	mov	r3, #1
   209b0:	strb	r3, [r8, #4]
   209b4:	mov	r3, r8
   209b8:	mov	r2, #0
   209bc:	mov	r1, r2
   209c0:	ldr	r0, [sp, #20]
   209c4:	bl	165f8 <__assert_fail@plt+0x50a0>
   209c8:	subs	fp, r0, #0
   209cc:	moveq	r3, #12
   209d0:	streq	r3, [sl]
   209d4:	beq	20fa0 <__assert_fail@plt+0xfa48>
   209d8:	ldr	r2, [sp, #24]
   209dc:	mov	r1, r9
   209e0:	mov	r0, r8
   209e4:	bl	180f4 <__assert_fail@plt+0x6b9c>
   209e8:	b	21030 <__assert_fail@plt+0xfad8>
   209ec:	mov	r5, r3
   209f0:	mov	r2, r3
   209f4:	mov	r1, r9
   209f8:	mov	r0, r8
   209fc:	bl	180f4 <__assert_fail@plt+0x6b9c>
   20a00:	str	sl, [sp, #4]
   20a04:	ldr	r3, [sp, #192]	; 0xc0
   20a08:	str	r3, [sp]
   20a0c:	mov	r3, r5
   20a10:	mov	r2, r8
   20a14:	mov	r1, r4
   20a18:	mov	r0, r9
   20a1c:	bl	1fec8 <__assert_fail@plt+0xe970>
   20a20:	mov	fp, r0
   20a24:	b	20fa0 <__assert_fail@plt+0xfa48>
   20a28:	ldr	r3, [sp, #24]
   20a2c:	tst	r3, #131072	; 0x20000
   20a30:	moveq	r3, #16
   20a34:	streq	r3, [sl]
   20a38:	moveq	fp, #0
   20a3c:	bne	209ac <__assert_fail@plt+0xf454>
   20a40:	b	20fa0 <__assert_fail@plt+0xfa48>
   20a44:	ldr	r2, [r8]
   20a48:	ldr	r3, [pc, #1464]	; 21008 <__assert_fail@plt+0xfab0>
   20a4c:	and	r3, r3, r2
   20a50:	cmp	r3, #0
   20a54:	beq	20a68 <__assert_fail@plt+0xf510>
   20a58:	ldr	r3, [sp, #20]
   20a5c:	ldrb	r3, [r3, #88]	; 0x58
   20a60:	tst	r3, #16
   20a64:	beq	20b1c <__assert_fail@plt+0xf5c4>
   20a68:	ldr	r3, [r8]
   20a6c:	sub	r2, r3, #256	; 0x100
   20a70:	bics	r2, r2, #256	; 0x100
   20a74:	bne	20c04 <__assert_fail@plt+0xf6ac>
   20a78:	cmp	r3, #256	; 0x100
   20a7c:	beq	20bd8 <__assert_fail@plt+0xf680>
   20a80:	mov	r3, #5
   20a84:	str	r3, [r8]
   20a88:	mov	r3, r8
   20a8c:	mov	r2, #0
   20a90:	mov	r1, r2
   20a94:	ldr	r0, [sp, #20]
   20a98:	bl	165f8 <__assert_fail@plt+0x50a0>
   20a9c:	mov	r4, r0
   20aa0:	mov	r3, #10
   20aa4:	str	r3, [r8]
   20aa8:	mov	r3, r8
   20aac:	mov	r2, #0
   20ab0:	mov	r1, r2
   20ab4:	ldr	r6, [sp, #20]
   20ab8:	mov	r0, r6
   20abc:	bl	165f8 <__assert_fail@plt+0x50a0>
   20ac0:	mov	r5, r0
   20ac4:	mov	r3, #10
   20ac8:	mov	r2, r0
   20acc:	mov	r1, r4
   20ad0:	mov	r0, r6
   20ad4:	bl	1676c <__assert_fail@plt+0x5214>
   20ad8:	cmp	r5, #0
   20adc:	cmpne	r4, #0
   20ae0:	moveq	r4, #1
   20ae4:	movne	r4, #0
   20ae8:	mov	fp, r0
   20aec:	cmp	r0, #0
   20af0:	orreq	r4, r4, #1
   20af4:	cmp	r4, #0
   20af8:	movne	r3, #12
   20afc:	strne	r3, [sl]
   20b00:	movne	fp, #0
   20b04:	bne	20fa0 <__assert_fail@plt+0xfa48>
   20b08:	ldr	r2, [sp, #24]
   20b0c:	mov	r1, r9
   20b10:	mov	r0, r8
   20b14:	bl	180f4 <__assert_fail@plt+0x6b9c>
   20b18:	b	20fa0 <__assert_fail@plt+0xfa48>
   20b1c:	ldr	r1, [sp, #20]
   20b20:	ldrb	r3, [r1, #88]	; 0x58
   20b24:	orr	r3, r3, #16
   20b28:	strb	r3, [r1, #88]	; 0x58
   20b2c:	tst	r3, #8
   20b30:	bne	21224 <__assert_fail@plt+0xfccc>
   20b34:	mov	r3, #0
   20b38:	str	r3, [r1, #96]	; 0x60
   20b3c:	ldr	r3, [pc, #1224]	; 2100c <__assert_fail@plt+0xfab4>
   20b40:	str	r3, [r1, #100]	; 0x64
   20b44:	mvn	r3, #2013265921	; 0x78000001
   20b48:	str	r3, [r1, #104]	; 0x68
   20b4c:	mvn	r3, #-134217727	; 0xf8000001
   20b50:	str	r3, [r1, #108]	; 0x6c
   20b54:	ldrb	r3, [r1, #88]	; 0x58
   20b58:	tst	r3, #4
   20b5c:	beq	21248 <__assert_fail@plt+0xfcf0>
   20b60:	add	r3, r1, #112	; 0x70
   20b64:	mov	r2, #0
   20b68:	str	r2, [r1, #112]	; 0x70
   20b6c:	str	r2, [r3, #4]
   20b70:	str	r2, [r3, #8]
   20b74:	str	r2, [r3, #12]
   20b78:	b	20a68 <__assert_fail@plt+0xf510>
   20b7c:	add	r4, r4, #32
   20b80:	add	r5, r5, #1
   20b84:	add	r7, r7, #64	; 0x40
   20b88:	add	lr, lr, #4
   20b8c:	cmp	r5, #7
   20b90:	bgt	20a68 <__assert_fail@plt+0xf510>
   20b94:	mov	ip, r7
   20b98:	mov	r1, #0
   20b9c:	ldr	r3, [r0]
   20ba0:	ldrh	r3, [r3, ip]
   20ba4:	lsr	r3, r3, #3
   20ba8:	add	r2, r4, r1
   20bac:	cmp	r2, #95	; 0x5f
   20bb0:	orreq	r3, r3, #1
   20bb4:	tst	r3, #1
   20bb8:	ldrne	r3, [lr]
   20bbc:	orrne	r3, r3, r6, lsl r1
   20bc0:	strne	r3, [lr]
   20bc4:	add	r1, r1, #1
   20bc8:	add	ip, ip, #2
   20bcc:	cmp	r1, #32
   20bd0:	bne	20b9c <__assert_fail@plt+0xf644>
   20bd4:	b	20b7c <__assert_fail@plt+0xf624>
   20bd8:	mov	r3, #6
   20bdc:	str	r3, [r8]
   20be0:	mov	r3, r8
   20be4:	mov	r2, #0
   20be8:	mov	r1, r2
   20bec:	ldr	r0, [sp, #20]
   20bf0:	bl	165f8 <__assert_fail@plt+0x50a0>
   20bf4:	mov	r4, r0
   20bf8:	mov	r3, #9
   20bfc:	str	r3, [r8]
   20c00:	b	20aa8 <__assert_fail@plt+0xf550>
   20c04:	mov	r3, r8
   20c08:	mov	r2, #0
   20c0c:	mov	r1, r2
   20c10:	ldr	r0, [sp, #20]
   20c14:	bl	165f8 <__assert_fail@plt+0x50a0>
   20c18:	subs	fp, r0, #0
   20c1c:	moveq	r3, #12
   20c20:	streq	r3, [sl]
   20c24:	bne	20b08 <__assert_fail@plt+0xf5b0>
   20c28:	b	20fa0 <__assert_fail@plt+0xfa48>
   20c2c:	mov	r3, r8
   20c30:	mov	r2, #0
   20c34:	mov	r1, r2
   20c38:	ldr	r0, [sp, #20]
   20c3c:	bl	165f8 <__assert_fail@plt+0x50a0>
   20c40:	subs	fp, r0, #0
   20c44:	moveq	r3, #12
   20c48:	streq	r3, [sl]
   20c4c:	beq	20fa0 <__assert_fail@plt+0xfa48>
   20c50:	ldr	r2, [sp, #20]
   20c54:	ldr	r3, [r2, #92]	; 0x5c
   20c58:	cmp	r3, #1
   20c5c:	ldrbgt	r3, [r2, #88]	; 0x58
   20c60:	orrgt	r3, r3, #2
   20c64:	strbgt	r3, [r2, #88]	; 0x58
   20c68:	b	209d8 <__assert_fail@plt+0xf480>
   20c6c:	str	sl, [sp, #4]
   20c70:	cmp	r2, #33	; 0x21
   20c74:	movne	r2, #0
   20c78:	moveq	r2, #1
   20c7c:	str	r2, [sp]
   20c80:	ldr	r3, [pc, #904]	; 21010 <__assert_fail@plt+0xfab8>
   20c84:	ldr	r2, [pc, #904]	; 21014 <__assert_fail@plt+0xfabc>
   20c88:	ldr	r1, [r0, #64]	; 0x40
   20c8c:	ldr	r0, [sp, #20]
   20c90:	bl	1a894 <__assert_fail@plt+0x933c>
   20c94:	ldr	r2, [sl]
   20c98:	mov	fp, r0
   20c9c:	adds	r3, r2, #0
   20ca0:	movne	r3, #1
   20ca4:	cmp	r0, #0
   20ca8:	movne	r3, #0
   20cac:	cmp	r3, #0
   20cb0:	beq	209d8 <__assert_fail@plt+0xf480>
   20cb4:	mov	fp, #0
   20cb8:	b	20fa0 <__assert_fail@plt+0xfa48>
   20cbc:	str	sl, [sp, #4]
   20cc0:	cmp	r2, #35	; 0x23
   20cc4:	movne	r2, #0
   20cc8:	moveq	r2, #1
   20ccc:	str	r2, [sp]
   20cd0:	ldr	r3, [pc, #832]	; 21018 <__assert_fail@plt+0xfac0>
   20cd4:	ldr	r2, [pc, #832]	; 2101c <__assert_fail@plt+0xfac4>
   20cd8:	ldr	r1, [r0, #64]	; 0x40
   20cdc:	ldr	r0, [sp, #20]
   20ce0:	bl	1a894 <__assert_fail@plt+0x933c>
   20ce4:	ldr	r2, [sl]
   20ce8:	mov	fp, r0
   20cec:	adds	r3, r2, #0
   20cf0:	movne	r3, #1
   20cf4:	cmp	r0, #0
   20cf8:	movne	r3, #0
   20cfc:	cmp	r3, #0
   20d00:	beq	209d8 <__assert_fail@plt+0xf480>
   20d04:	mov	fp, #0
   20d08:	b	20fa0 <__assert_fail@plt+0xfa48>
   20d0c:	mov	r3, #5
   20d10:	str	r3, [sl]
   20d14:	mov	fp, #0
   20d18:	b	20fa0 <__assert_fail@plt+0xfa48>
   20d1c:	ldr	r2, [sp, #24]
   20d20:	mov	r1, r8
   20d24:	mov	r0, r9
   20d28:	bl	18110 <__assert_fail@plt+0x6bb8>
   20d2c:	mov	r7, r0
   20d30:	cmn	r0, #1
   20d34:	beq	20d80 <__assert_fail@plt+0xf828>
   20d38:	cmn	r0, #2
   20d3c:	beq	20d58 <__assert_fail@plt+0xf800>
   20d40:	ldrb	r3, [r8, #4]
   20d44:	cmp	r3, #24
   20d48:	beq	20e5c <__assert_fail@plt+0xf904>
   20d4c:	cmp	r3, #1
   20d50:	moveq	r5, r0
   20d54:	beq	20d9c <__assert_fail@plt+0xf844>
   20d58:	ldr	r3, [sp, #24]
   20d5c:	tst	r3, #2097152	; 0x200000
   20d60:	bne	20db4 <__assert_fail@plt+0xf85c>
   20d64:	ldrb	r3, [r8, #4]
   20d68:	cmp	r3, #2
   20d6c:	bne	20e4c <__assert_fail@plt+0xf8f4>
   20d70:	mov	r3, #9
   20d74:	str	r3, [sl]
   20d78:	mov	r6, #0
   20d7c:	b	20f40 <__assert_fail@plt+0xf9e8>
   20d80:	ldrb	r3, [r8, #4]
   20d84:	cmp	r3, #1
   20d88:	bne	20dd4 <__assert_fail@plt+0xf87c>
   20d8c:	ldrb	r3, [r8]
   20d90:	cmp	r3, #44	; 0x2c
   20d94:	moveq	r5, #0
   20d98:	bne	20dd4 <__assert_fail@plt+0xf87c>
   20d9c:	ldrb	r3, [r8]
   20da0:	cmp	r3, #44	; 0x2c
   20da4:	beq	20de4 <__assert_fail@plt+0xf88c>
   20da8:	ldr	r3, [sp, #24]
   20dac:	tst	r3, #2097152	; 0x200000
   20db0:	beq	20e4c <__assert_fail@plt+0xf8f4>
   20db4:	str	r4, [r9, #40]	; 0x28
   20db8:	add	r3, sp, #120	; 0x78
   20dbc:	ldm	r3, {r0, r1}
   20dc0:	stm	r8, {r0, r1}
   20dc4:	mov	r3, #1
   20dc8:	strb	r3, [r8, #4]
   20dcc:	mov	r6, fp
   20dd0:	b	20f40 <__assert_fail@plt+0xf9e8>
   20dd4:	mov	r3, #10
   20dd8:	str	r3, [sl]
   20ddc:	mov	r6, #0
   20de0:	b	20f40 <__assert_fail@plt+0xf9e8>
   20de4:	ldr	r2, [sp, #24]
   20de8:	mov	r1, r8
   20dec:	mov	r0, r9
   20df0:	bl	18110 <__assert_fail@plt+0x6bb8>
   20df4:	mov	r7, r0
   20df8:	cmn	r5, #2
   20dfc:	cmnne	r0, #2
   20e00:	beq	20d58 <__assert_fail@plt+0xf800>
   20e04:	cmn	r0, #1
   20e08:	cmpne	r5, r0
   20e0c:	bgt	20e64 <__assert_fail@plt+0xf90c>
   20e10:	ldrb	r3, [r8, #4]
   20e14:	cmp	r3, #24
   20e18:	bne	20e64 <__assert_fail@plt+0xf90c>
   20e1c:	cmn	r7, #1
   20e20:	beq	20e74 <__assert_fail@plt+0xf91c>
   20e24:	ldr	r3, [pc, #500]	; 21020 <__assert_fail@plt+0xfac8>
   20e28:	cmp	r7, r3
   20e2c:	movle	r3, #0
   20e30:	movgt	r3, #1
   20e34:	cmp	r3, #0
   20e38:	movne	r3, #15
   20e3c:	strne	r3, [sl]
   20e40:	movne	r6, #0
   20e44:	beq	20e8c <__assert_fail@plt+0xf934>
   20e48:	b	20f40 <__assert_fail@plt+0xf9e8>
   20e4c:	mov	r3, #10
   20e50:	str	r3, [sl]
   20e54:	mov	r6, #0
   20e58:	b	20f40 <__assert_fail@plt+0xf9e8>
   20e5c:	mov	r5, r0
   20e60:	b	20e10 <__assert_fail@plt+0xf8b8>
   20e64:	mov	r3, #10
   20e68:	str	r3, [sl]
   20e6c:	mov	r6, #0
   20e70:	b	20f40 <__assert_fail@plt+0xf9e8>
   20e74:	ldr	r3, [pc, #420]	; 21020 <__assert_fail@plt+0xfac8>
   20e78:	cmp	r5, r3
   20e7c:	movle	r3, #0
   20e80:	movgt	r3, #1
   20e84:	b	20e34 <__assert_fail@plt+0xf8dc>
   20e88:	mov	r7, #1
   20e8c:	ldr	r2, [sp, #24]
   20e90:	mov	r1, r9
   20e94:	mov	r0, r8
   20e98:	bl	180f4 <__assert_fail@plt+0x6b9c>
   20e9c:	cmp	fp, #0
   20ea0:	beq	20fcc <__assert_fail@plt+0xfa74>
   20ea4:	orrs	r3, r5, r7
   20ea8:	bne	21094 <__assert_fail@plt+0xfb3c>
   20eac:	mov	r2, #0
   20eb0:	ldr	r1, [pc, #332]	; 21004 <__assert_fail@plt+0xfaac>
   20eb4:	mov	r0, fp
   20eb8:	bl	16408 <__assert_fail@plt+0x4eb0>
   20ebc:	mov	r6, #0
   20ec0:	b	20f40 <__assert_fail@plt+0xf9e8>
   20ec4:	cmp	r5, #1
   20ec8:	ble	20fac <__assert_fail@plt+0xfa54>
   20ecc:	str	fp, [sp, #28]
   20ed0:	mov	r4, fp
   20ed4:	mov	r6, #2
   20ed8:	ldr	r1, [sp, #20]
   20edc:	mov	r0, r4
   20ee0:	bl	166b8 <__assert_fail@plt+0x5160>
   20ee4:	mov	r4, r0
   20ee8:	mov	r3, #16
   20eec:	mov	r2, r0
   20ef0:	ldr	r1, [sp, #28]
   20ef4:	ldr	r0, [sp, #20]
   20ef8:	bl	1676c <__assert_fail@plt+0x5214>
   20efc:	str	r0, [sp, #28]
   20f00:	cmp	r0, #0
   20f04:	cmpne	r4, #0
   20f08:	beq	20f34 <__assert_fail@plt+0xf9dc>
   20f0c:	add	r6, r6, #1
   20f10:	cmp	r5, r6
   20f14:	bge	20ed8 <__assert_fail@plt+0xf980>
   20f18:	cmp	r5, r7
   20f1c:	beq	20fd4 <__assert_fail@plt+0xfa7c>
   20f20:	ldr	r1, [sp, #20]
   20f24:	mov	r0, r4
   20f28:	bl	166b8 <__assert_fail@plt+0x5160>
   20f2c:	subs	r4, r0, #0
   20f30:	bne	210a8 <__assert_fail@plt+0xfb50>
   20f34:	mov	r3, #12
   20f38:	str	r3, [sl]
   20f3c:	mov	r6, #0
   20f40:	ldr	r2, [sl]
   20f44:	adds	r3, r2, #0
   20f48:	movne	r3, #1
   20f4c:	cmp	r6, #0
   20f50:	movne	r3, #0
   20f54:	cmp	r3, #0
   20f58:	bne	20fe4 <__assert_fail@plt+0xfa8c>
   20f5c:	ldr	r3, [sp, #24]
   20f60:	tst	r3, #16777216	; 0x1000000
   20f64:	beq	2102c <__assert_fail@plt+0xfad4>
   20f68:	ldrb	r3, [r8, #4]
   20f6c:	mov	fp, r6
   20f70:	cmp	r3, #23
   20f74:	cmpne	r3, #11
   20f78:	bne	21030 <__assert_fail@plt+0xfad8>
   20f7c:	cmp	r6, #0
   20f80:	beq	20f94 <__assert_fail@plt+0xfa3c>
   20f84:	mov	r2, #0
   20f88:	ldr	r1, [pc, #116]	; 21004 <__assert_fail@plt+0xfaac>
   20f8c:	mov	r0, r6
   20f90:	bl	16408 <__assert_fail@plt+0x4eb0>
   20f94:	mov	r3, #13
   20f98:	str	r3, [sl]
   20f9c:	mov	fp, #0
   20fa0:	mov	r0, fp
   20fa4:	add	sp, sp, #156	; 0x9c
   20fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fac:	str	fp, [sp, #28]
   20fb0:	mov	r4, fp
   20fb4:	b	20f18 <__assert_fail@plt+0xf9c0>
   20fb8:	ldr	r2, [r4, #20]
   20fbc:	ldr	r1, [pc, #96]	; 21024 <__assert_fail@plt+0xfacc>
   20fc0:	mov	r0, r4
   20fc4:	bl	16408 <__assert_fail@plt+0x4eb0>
   20fc8:	b	210b4 <__assert_fail@plt+0xfb5c>
   20fcc:	mov	r6, fp
   20fd0:	b	20f40 <__assert_fail@plt+0xf9e8>
   20fd4:	ldr	r6, [sp, #28]
   20fd8:	b	20f40 <__assert_fail@plt+0xf9e8>
   20fdc:	mov	r6, fp
   20fe0:	b	20f40 <__assert_fail@plt+0xf9e8>
   20fe4:	cmp	fp, #0
   20fe8:	beq	20fa0 <__assert_fail@plt+0xfa48>
   20fec:	mov	r2, #0
   20ff0:	ldr	r1, [pc, #12]	; 21004 <__assert_fail@plt+0xfaac>
   20ff4:	mov	r0, fp
   20ff8:	bl	16408 <__assert_fail@plt+0x4eb0>
   20ffc:	mov	fp, #0
   21000:	b	20fa0 <__assert_fail@plt+0xfa48>
   21004:	andeq	r8, r1, r4, lsr #4
   21008:	andeq	r0, r0, pc, lsl #6
   2100c:	mvnseq	r0, #0
   21010:	muleq	r2, r0, r1
   21014:	andeq	r6, r2, r8, asr #2
   21018:	strdeq	r5, [r2], -ip
   2101c:	andeq	r6, r2, r8, asr r1
   21020:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   21024:	andeq	r5, r1, ip, asr sp
   21028:	addeq	r0, ip, r0, lsl #16
   2102c:	mov	fp, r6
   21030:	ldrb	r3, [r8, #4]
   21034:	cmp	r3, #23
   21038:	bhi	20fa0 <__assert_fail@plt+0xfa48>
   2103c:	cmp	r3, #18
   21040:	movne	r5, #0
   21044:	moveq	r5, #1
   21048:	ldr	r2, [pc, #-40]	; 21028 <__assert_fail@plt+0xfad0>
   2104c:	lsr	r2, r2, r3
   21050:	tst	r2, #1
   21054:	beq	20fa0 <__assert_fail@plt+0xfa48>
   21058:	ldr	r4, [r9, #40]	; 0x28
   2105c:	ldm	r8, {r0, r1}
   21060:	add	r2, sp, #120	; 0x78
   21064:	stm	r2, {r0, r1}
   21068:	cmp	r3, #23
   2106c:	beq	20d1c <__assert_fail@plt+0xf7c4>
   21070:	cmp	r3, #19
   21074:	beq	20e88 <__assert_fail@plt+0xf930>
   21078:	ldr	r2, [sp, #24]
   2107c:	mov	r1, r9
   21080:	mov	r0, r8
   21084:	bl	180f4 <__assert_fail@plt+0x6b9c>
   21088:	cmp	fp, #0
   2108c:	beq	20fdc <__assert_fail@plt+0xfa84>
   21090:	mvn	r7, #0
   21094:	cmp	r5, #0
   21098:	movle	r4, fp
   2109c:	movle	r3, #0
   210a0:	strle	r3, [sp, #28]
   210a4:	bgt	20ec4 <__assert_fail@plt+0xf96c>
   210a8:	ldrb	r3, [r4, #24]
   210ac:	cmp	r3, #17
   210b0:	beq	20fb8 <__assert_fail@plt+0xfa60>
   210b4:	cmn	r7, #1
   210b8:	moveq	r3, #11
   210bc:	movne	r3, #10
   210c0:	mov	r2, #0
   210c4:	mov	r1, r4
   210c8:	ldr	r0, [sp, #20]
   210cc:	bl	1676c <__assert_fail@plt+0x5214>
   210d0:	subs	r6, r0, #0
   210d4:	beq	20f34 <__assert_fail@plt+0xf9dc>
   210d8:	add	r5, r5, #2
   210dc:	cmp	r7, r5
   210e0:	blt	21140 <__assert_fail@plt+0xfbe8>
   210e4:	ldr	r1, [sp, #20]
   210e8:	mov	r0, r4
   210ec:	bl	166b8 <__assert_fail@plt+0x5160>
   210f0:	mov	r4, r0
   210f4:	mov	r3, #16
   210f8:	mov	r2, r0
   210fc:	mov	r1, r6
   21100:	ldr	r6, [sp, #20]
   21104:	mov	r0, r6
   21108:	bl	1676c <__assert_fail@plt+0x5214>
   2110c:	mov	r1, r0
   21110:	cmp	r0, #0
   21114:	cmpne	r4, #0
   21118:	beq	20f34 <__assert_fail@plt+0xf9dc>
   2111c:	mov	r3, #10
   21120:	mov	r2, #0
   21124:	mov	r0, r6
   21128:	bl	1676c <__assert_fail@plt+0x5214>
   2112c:	subs	r6, r0, #0
   21130:	beq	20f34 <__assert_fail@plt+0xf9dc>
   21134:	add	r5, r5, #1
   21138:	cmp	r7, r5
   2113c:	bge	210e4 <__assert_fail@plt+0xfb8c>
   21140:	ldr	r3, [sp, #28]
   21144:	cmp	r3, #0
   21148:	beq	20f5c <__assert_fail@plt+0xfa04>
   2114c:	mov	r3, #16
   21150:	mov	r2, r6
   21154:	ldr	r1, [sp, #28]
   21158:	ldr	r0, [sp, #20]
   2115c:	bl	1676c <__assert_fail@plt+0x5214>
   21160:	mov	r6, r0
   21164:	b	20f40 <__assert_fail@plt+0xf9e8>
   21168:	mov	fp, #0
   2116c:	b	20fa0 <__assert_fail@plt+0xfa48>
   21170:	mov	fp, #0
   21174:	b	20fa0 <__assert_fail@plt+0xfa48>
   21178:	ldr	sl, [sp, #196]	; 0xc4
   2117c:	str	r0, [sl]
   21180:	b	20328 <__assert_fail@plt+0xedd0>
   21184:	ldr	sl, [sp, #196]	; 0xc4
   21188:	mov	r3, #11
   2118c:	b	20324 <__assert_fail@plt+0xedcc>
   21190:	ldr	sl, [sp, #196]	; 0xc4
   21194:	mov	r3, #3
   21198:	b	20324 <__assert_fail@plt+0xedcc>
   2119c:	ldr	sl, [sp, #196]	; 0xc4
   211a0:	mov	r3, #11
   211a4:	b	20324 <__assert_fail@plt+0xedcc>
   211a8:	mov	r3, #0
   211ac:	ldr	r2, [sp, #196]	; 0xc4
   211b0:	str	r3, [r2]
   211b4:	b	205c0 <__assert_fail@plt+0xf068>
   211b8:	ldr	sl, [sp, #196]	; 0xc4
   211bc:	mov	r3, #3
   211c0:	str	r3, [sl]
   211c4:	b	20328 <__assert_fail@plt+0xedd0>
   211c8:	ldr	sl, [sp, #196]	; 0xc4
   211cc:	mov	r3, #3
   211d0:	str	r3, [sl]
   211d4:	b	20328 <__assert_fail@plt+0xedd0>
   211d8:	mov	r3, #3
   211dc:	strb	r3, [sp, #124]	; 0x7c
   211e0:	add	r3, sp, #152	; 0x98
   211e4:	str	r5, [r3, #-32]!	; 0xffffffe0
   211e8:	mov	r2, #0
   211ec:	mov	r1, r2
   211f0:	ldr	r0, [sp, #20]
   211f4:	bl	165f8 <__assert_fail@plt+0x50a0>
   211f8:	subs	r1, r0, #0
   211fc:	beq	21218 <__assert_fail@plt+0xfcc0>
   21200:	mov	r3, #10
   21204:	mov	r2, fp
   21208:	ldr	r0, [sp, #20]
   2120c:	bl	1676c <__assert_fail@plt+0x5214>
   21210:	subs	fp, r0, #0
   21214:	bne	209d8 <__assert_fail@plt+0xf480>
   21218:	mov	r3, #12
   2121c:	str	r3, [sl]
   21220:	b	20328 <__assert_fail@plt+0xedd0>
   21224:	mov	r4, #0
   21228:	mov	r5, r4
   2122c:	bl	113fc <__ctype_b_loc@plt>
   21230:	lsl	r7, r4, #1
   21234:	add	lr, r5, #24
   21238:	ldr	r3, [sp, #20]
   2123c:	add	lr, r3, lr, lsl #2
   21240:	mov	r6, #1
   21244:	b	20b94 <__assert_fail@plt+0xf63c>
   21248:	mov	r4, #128	; 0x80
   2124c:	mov	r5, #4
   21250:	b	2122c <__assert_fail@plt+0xfcd4>
   21254:	cmp	r4, #3
   21258:	bne	203a4 <__assert_fail@plt+0xee4c>
   2125c:	ldr	r0, [sp, #76]	; 0x4c
   21260:	bl	11414 <strlen@plt>
   21264:	cmp	r0, #1
   21268:	bls	20390 <__assert_fail@plt+0xee38>
   2126c:	ldr	sl, [sp, #196]	; 0xc4
   21270:	mov	r3, #3
   21274:	b	2059c <__assert_fail@plt+0xf044>
   21278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2127c:	sub	sp, sp, #20
   21280:	mov	fp, r0
   21284:	mov	r9, r1
   21288:	mov	r7, r2
   2128c:	mov	sl, r3
   21290:	ldr	r8, [sp, #56]	; 0x38
   21294:	ldr	r6, [sp, #60]	; 0x3c
   21298:	ldr	ip, [r1]
   2129c:	str	ip, [sp, #12]
   212a0:	str	r6, [sp, #4]
   212a4:	str	r8, [sp]
   212a8:	bl	1fec8 <__assert_fail@plt+0xe970>
   212ac:	ldr	r3, [r6]
   212b0:	mov	r4, r0
   212b4:	adds	r2, r3, #0
   212b8:	movne	r2, #1
   212bc:	cmp	r0, #0
   212c0:	movne	r2, #0
   212c4:	cmp	r2, #0
   212c8:	beq	2131c <__assert_fail@plt+0xfdc4>
   212cc:	mov	r4, #0
   212d0:	b	212f0 <__assert_fail@plt+0xfd98>
   212d4:	cmp	r4, #0
   212d8:	beq	212f0 <__assert_fail@plt+0xfd98>
   212dc:	mov	r2, #0
   212e0:	ldr	r1, [pc, #232]	; 213d0 <__assert_fail@plt+0xfe78>
   212e4:	mov	r0, r4
   212e8:	bl	16408 <__assert_fail@plt+0x4eb0>
   212ec:	mov	r4, #0
   212f0:	mov	r0, r4
   212f4:	add	sp, sp, #20
   212f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212fc:	mov	r3, #16
   21300:	mov	r2, r5
   21304:	mov	r1, r4
   21308:	ldr	r0, [sp, #12]
   2130c:	bl	1676c <__assert_fail@plt+0x5214>
   21310:	cmp	r0, #0
   21314:	beq	21398 <__assert_fail@plt+0xfe40>
   21318:	mov	r4, r0
   2131c:	ldrb	r3, [r7, #4]
   21320:	and	r2, r3, #247	; 0xf7
   21324:	cmp	r2, #2
   21328:	beq	212f0 <__assert_fail@plt+0xfd98>
   2132c:	subs	r3, r3, #9
   21330:	movne	r3, #1
   21334:	cmp	r8, #0
   21338:	orreq	r3, r3, #1
   2133c:	cmp	r3, #0
   21340:	beq	212f0 <__assert_fail@plt+0xfd98>
   21344:	str	r6, [sp, #4]
   21348:	str	r8, [sp]
   2134c:	mov	r3, sl
   21350:	mov	r2, r7
   21354:	mov	r1, r9
   21358:	mov	r0, fp
   2135c:	bl	1fec8 <__assert_fail@plt+0xe970>
   21360:	ldr	r3, [r6]
   21364:	mov	r5, r0
   21368:	adds	r2, r3, #0
   2136c:	movne	r2, #1
   21370:	cmp	r0, #0
   21374:	movne	r2, #0
   21378:	cmp	r2, #0
   2137c:	bne	212d4 <__assert_fail@plt+0xfd7c>
   21380:	cmp	r4, #0
   21384:	cmpne	r5, #0
   21388:	bne	212fc <__assert_fail@plt+0xfda4>
   2138c:	cmp	r4, #0
   21390:	moveq	r4, r5
   21394:	b	2131c <__assert_fail@plt+0xfdc4>
   21398:	mov	fp, r0
   2139c:	ldr	r7, [pc, #44]	; 213d0 <__assert_fail@plt+0xfe78>
   213a0:	mov	r2, #0
   213a4:	mov	r1, r7
   213a8:	mov	r0, r5
   213ac:	bl	16408 <__assert_fail@plt+0x4eb0>
   213b0:	mov	r2, #0
   213b4:	mov	r1, r7
   213b8:	mov	r0, r4
   213bc:	bl	16408 <__assert_fail@plt+0x4eb0>
   213c0:	mov	r3, #12
   213c4:	str	r3, [r6]
   213c8:	mov	r4, fp
   213cc:	b	212f0 <__assert_fail@plt+0xfd98>
   213d0:	andeq	r8, r1, r4, lsr #4
   213d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213d8:	sub	sp, sp, #28
   213dc:	str	r0, [sp, #12]
   213e0:	str	r1, [sp, #16]
   213e4:	mov	r4, r2
   213e8:	mov	r6, r3
   213ec:	str	r3, [sp, #20]
   213f0:	ldr	r9, [sp, #64]	; 0x40
   213f4:	ldr	r8, [sp, #68]	; 0x44
   213f8:	ldr	r5, [r1]
   213fc:	ldr	fp, [r5, #84]	; 0x54
   21400:	str	r8, [sp, #4]
   21404:	str	r9, [sp]
   21408:	bl	21278 <__assert_fail@plt+0xfd20>
   2140c:	ldr	r3, [r8]
   21410:	mov	r7, r0
   21414:	adds	r2, r3, #0
   21418:	movne	r2, #1
   2141c:	cmp	r0, #0
   21420:	movne	r2, #0
   21424:	cmp	r2, #0
   21428:	bne	21524 <__assert_fail@plt+0xffcc>
   2142c:	orr	sl, r6, #8388608	; 0x800000
   21430:	b	2149c <__assert_fail@plt+0xff44>
   21434:	ldr	r6, [r5, #84]	; 0x54
   21438:	str	fp, [r5, #84]	; 0x54
   2143c:	str	r8, [sp, #4]
   21440:	str	r9, [sp]
   21444:	ldr	r3, [sp, #20]
   21448:	mov	r2, r4
   2144c:	ldr	r1, [sp, #16]
   21450:	ldr	r0, [sp, #12]
   21454:	bl	21278 <__assert_fail@plt+0xfd20>
   21458:	ldr	r3, [r8]
   2145c:	mov	r2, r0
   21460:	adds	r1, r3, #0
   21464:	movne	r1, #1
   21468:	cmp	r0, #0
   2146c:	movne	r1, #0
   21470:	cmp	r1, #0
   21474:	bne	214e8 <__assert_fail@plt+0xff90>
   21478:	ldr	r3, [r5, #84]	; 0x54
   2147c:	orr	r6, r3, r6
   21480:	str	r6, [r5, #84]	; 0x54
   21484:	mov	r3, #10
   21488:	mov	r1, r7
   2148c:	mov	r0, r5
   21490:	bl	1676c <__assert_fail@plt+0x5214>
   21494:	subs	r7, r0, #0
   21498:	beq	21510 <__assert_fail@plt+0xffb8>
   2149c:	ldrb	r3, [r4, #4]
   214a0:	cmp	r3, #10
   214a4:	bne	21518 <__assert_fail@plt+0xffc0>
   214a8:	mov	r2, sl
   214ac:	ldr	r1, [sp, #12]
   214b0:	mov	r0, r4
   214b4:	bl	180f4 <__assert_fail@plt+0x6b9c>
   214b8:	ldrb	r2, [r4, #4]
   214bc:	and	r3, r2, #247	; 0xf7
   214c0:	cmp	r3, #2
   214c4:	beq	21508 <__assert_fail@plt+0xffb0>
   214c8:	clz	r3, r9
   214cc:	lsr	r3, r3, #5
   214d0:	cmp	r2, #9
   214d4:	orrne	r3, r3, #1
   214d8:	cmp	r3, #0
   214dc:	bne	21434 <__assert_fail@plt+0xfedc>
   214e0:	mov	r2, #0
   214e4:	b	21484 <__assert_fail@plt+0xff2c>
   214e8:	cmp	r7, #0
   214ec:	beq	21518 <__assert_fail@plt+0xffc0>
   214f0:	mov	r2, #0
   214f4:	ldr	r1, [pc, #48]	; 2152c <__assert_fail@plt+0xffd4>
   214f8:	mov	r0, r7
   214fc:	bl	16408 <__assert_fail@plt+0x4eb0>
   21500:	mov	r7, #0
   21504:	b	21518 <__assert_fail@plt+0xffc0>
   21508:	mov	r2, #0
   2150c:	b	21484 <__assert_fail@plt+0xff2c>
   21510:	mov	r3, #12
   21514:	str	r3, [r8]
   21518:	mov	r0, r7
   2151c:	add	sp, sp, #28
   21520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21524:	mov	r7, #0
   21528:	b	21518 <__assert_fail@plt+0xffc0>
   2152c:	andeq	r8, r1, r4, lsr #4
   21530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21534:	sub	sp, sp, #124	; 0x7c
   21538:	mov	sl, r0
   2153c:	str	r1, [sp, #12]
   21540:	mov	r9, r2
   21544:	mov	fp, r3
   21548:	mov	r2, #0
   2154c:	str	r2, [sp, #116]	; 0x74
   21550:	ldrb	r3, [r0, #28]
   21554:	str	fp, [r0, #12]
   21558:	str	r2, [r0, #8]
   2155c:	str	r2, [r0, #24]
   21560:	and	r3, r3, #144	; 0x90
   21564:	strb	r3, [r0, #28]
   21568:	ldr	r6, [r0]
   2156c:	ldr	r3, [r0, #4]
   21570:	cmp	r3, #159	; 0x9f
   21574:	bls	217d0 <__assert_fail@plt+0x10278>
   21578:	mov	r2, #160	; 0xa0
   2157c:	str	r2, [sl, #8]
   21580:	mov	r1, #0
   21584:	mov	r0, r6
   21588:	bl	1145c <memset@plt>
   2158c:	mov	r3, #31
   21590:	str	r3, [r6, #64]	; 0x40
   21594:	ldr	r3, [pc, #3044]	; 22180 <__assert_fail@plt+0x10c28>
   21598:	cmp	r9, r3
   2159c:	bhi	220b8 <__assert_fail@plt+0x10b60>
   215a0:	add	r0, r9, #1
   215a4:	str	r0, [r6, #4]
   215a8:	lsl	r0, r0, #3
   215ac:	bl	244c8 <__assert_fail@plt+0x12f70>
   215b0:	str	r0, [r6]
   215b4:	cmp	r9, #0
   215b8:	beq	217f4 <__assert_fail@plt+0x1029c>
   215bc:	mov	r4, #1
   215c0:	lsl	r4, r4, #1
   215c4:	cmp	r9, r4
   215c8:	bcs	215c0 <__assert_fail@plt+0x10068>
   215cc:	mov	r1, r4
   215d0:	mov	r0, #12
   215d4:	bl	24478 <__assert_fail@plt+0x12f20>
   215d8:	str	r0, [r6, #32]
   215dc:	sub	r4, r4, #1
   215e0:	str	r4, [r6, #68]	; 0x44
   215e4:	bl	11354 <__ctype_get_mb_cur_max@plt>
   215e8:	str	r0, [r6, #92]	; 0x5c
   215ec:	mov	r0, #14
   215f0:	bl	114e0 <nl_langinfo@plt>
   215f4:	ldrb	r3, [r0]
   215f8:	and	r3, r3, #223	; 0xdf
   215fc:	cmp	r3, #85	; 0x55
   21600:	bne	21650 <__assert_fail@plt+0x100f8>
   21604:	ldrb	r3, [r0, #1]
   21608:	and	r3, r3, #223	; 0xdf
   2160c:	cmp	r3, #84	; 0x54
   21610:	bne	21650 <__assert_fail@plt+0x100f8>
   21614:	ldrb	r3, [r0, #2]
   21618:	and	r3, r3, #223	; 0xdf
   2161c:	cmp	r3, #70	; 0x46
   21620:	bne	21650 <__assert_fail@plt+0x100f8>
   21624:	ldrb	r3, [r0, #3]
   21628:	cmp	r3, #45	; 0x2d
   2162c:	moveq	r3, #4
   21630:	movne	r3, #3
   21634:	ldr	r1, [pc, #2888]	; 22184 <__assert_fail@plt+0x10c2c>
   21638:	add	r0, r0, r3
   2163c:	bl	111f8 <strcmp@plt>
   21640:	cmp	r0, #0
   21644:	ldrbeq	r3, [r6, #88]	; 0x58
   21648:	orreq	r3, r3, #4
   2164c:	strbeq	r3, [r6, #88]	; 0x58
   21650:	ldrb	r3, [r6, #88]	; 0x58
   21654:	bic	r3, r3, #8
   21658:	strb	r3, [r6, #88]	; 0x58
   2165c:	ldr	r3, [r6, #92]	; 0x5c
   21660:	cmp	r3, #1
   21664:	ble	2167c <__assert_fail@plt+0x10124>
   21668:	ldrb	r3, [r6, #88]	; 0x58
   2166c:	tst	r3, #4
   21670:	beq	217fc <__assert_fail@plt+0x102a4>
   21674:	ldr	r3, [pc, #2828]	; 22188 <__assert_fail@plt+0x10c30>
   21678:	str	r3, [r6, #60]	; 0x3c
   2167c:	ldr	r3, [r6]
   21680:	cmp	r3, #0
   21684:	beq	220b8 <__assert_fail@plt+0x10b60>
   21688:	ldr	r3, [r6, #32]
   2168c:	cmp	r3, #0
   21690:	beq	220b8 <__assert_fail@plt+0x10b60>
   21694:	mov	r3, #0
   21698:	str	r3, [sp, #116]	; 0x74
   2169c:	mov	r3, #1
   216a0:	ldr	r2, [pc, #2788]	; 2218c <__assert_fail@plt+0x10c34>
   216a4:	cmp	r2, #0
   216a8:	moveq	r3, #0
   216ac:	mov	r2, #1
   216b0:	ldr	r1, [pc, #2776]	; 22190 <__assert_fail@plt+0x10c38>
   216b4:	cmp	r1, #0
   216b8:	moveq	r2, #0
   216bc:	orr	r3, r3, r2
   216c0:	tst	r3, #255	; 0xff
   216c4:	bne	21880 <__assert_fail@plt+0x10328>
   216c8:	mov	r7, r9
   216cc:	ldr	r5, [sl, #20]
   216d0:	ands	r8, fp, #4194304	; 0x400000
   216d4:	movne	r4, #1
   216d8:	moveq	r4, #0
   216dc:	mov	r2, #84	; 0x54
   216e0:	mov	r1, #0
   216e4:	add	r0, sp, #32
   216e8:	bl	1145c <memset@plt>
   216ec:	ldr	r3, [sp, #12]
   216f0:	str	r3, [sp, #32]
   216f4:	str	r9, [sp, #80]	; 0x50
   216f8:	str	r9, [sp, #76]	; 0x4c
   216fc:	str	r5, [sp, #96]	; 0x60
   21700:	strb	r4, [sp, #104]	; 0x68
   21704:	cmp	r5, #0
   21708:	orrne	r4, r4, #1
   2170c:	strb	r4, [sp, #107]	; 0x6b
   21710:	ldr	r3, [r6, #92]	; 0x5c
   21714:	str	r3, [sp, #112]	; 0x70
   21718:	ldrb	r3, [r6, #88]	; 0x58
   2171c:	lsr	r2, r3, #2
   21720:	and	r2, r2, #1
   21724:	strb	r2, [sp, #105]	; 0x69
   21728:	lsr	r3, r3, #3
   2172c:	and	r3, r3, #1
   21730:	strb	r3, [sp, #106]	; 0x6a
   21734:	str	r9, [sp, #88]	; 0x58
   21738:	str	r9, [sp, #84]	; 0x54
   2173c:	cmp	r9, #0
   21740:	ble	21758 <__assert_fail@plt+0x10200>
   21744:	add	r1, r9, #1
   21748:	add	r0, sp, #32
   2174c:	bl	164e4 <__assert_fail@plt+0x4f8c>
   21750:	cmp	r0, #0
   21754:	bne	217c8 <__assert_fail@plt+0x10270>
   21758:	ldrb	r3, [sp, #107]	; 0x6b
   2175c:	cmp	r3, #0
   21760:	ldrne	r3, [sp, #36]	; 0x24
   21764:	ldreq	r3, [sp, #12]
   21768:	str	r3, [sp, #36]	; 0x24
   2176c:	cmp	r8, #0
   21770:	beq	218b8 <__assert_fail@plt+0x10360>
   21774:	ldr	r3, [r6, #92]	; 0x5c
   21778:	cmp	r3, #1
   2177c:	ble	218ac <__assert_fail@plt+0x10354>
   21780:	add	r0, sp, #32
   21784:	bl	17014 <__assert_fail@plt+0x5abc>
   21788:	cmp	r0, #0
   2178c:	bne	217c8 <__assert_fail@plt+0x10270>
   21790:	ldr	r3, [sp, #64]	; 0x40
   21794:	cmp	r7, r3
   21798:	ble	218e0 <__assert_fail@plt+0x10388>
   2179c:	ldr	r1, [sp, #68]	; 0x44
   217a0:	ldr	r2, [r6, #92]	; 0x5c
   217a4:	ldr	r3, [sp, #60]	; 0x3c
   217a8:	add	r3, r3, r2
   217ac:	cmp	r1, r3
   217b0:	bgt	218e0 <__assert_fail@plt+0x10388>
   217b4:	lsl	r1, r1, #1
   217b8:	add	r0, sp, #32
   217bc:	bl	164e4 <__assert_fail@plt+0x4f8c>
   217c0:	cmp	r0, #0
   217c4:	beq	21780 <__assert_fail@plt+0x10228>
   217c8:	str	r0, [sp, #116]	; 0x74
   217cc:	b	22120 <__assert_fail@plt+0x10bc8>
   217d0:	mov	r1, #160	; 0xa0
   217d4:	mov	r0, r6
   217d8:	bl	244f8 <__assert_fail@plt+0x12fa0>
   217dc:	subs	r6, r0, #0
   217e0:	beq	220b0 <__assert_fail@plt+0x10b58>
   217e4:	mov	r3, #160	; 0xa0
   217e8:	str	r3, [sl, #4]
   217ec:	str	r6, [sl]
   217f0:	b	21578 <__assert_fail@plt+0x10020>
   217f4:	mov	r4, #1
   217f8:	b	215cc <__assert_fail@plt+0x10074>
   217fc:	mov	r1, #1
   21800:	mov	r0, #32
   21804:	bl	24478 <__assert_fail@plt+0x12f20>
   21808:	str	r0, [r6, #60]	; 0x3c
   2180c:	cmp	r0, #0
   21810:	beq	220b8 <__assert_fail@plt+0x10b60>
   21814:	mov	r7, #0
   21818:	mov	r8, #1
   2181c:	b	21874 <__assert_fail@plt+0x1031c>
   21820:	add	r5, r5, #1
   21824:	add	r4, r4, #1
   21828:	cmp	r5, #32
   2182c:	beq	21868 <__assert_fail@plt+0x10310>
   21830:	mov	r0, r4
   21834:	bl	11468 <btowc@plt>
   21838:	cmn	r0, #1
   2183c:	ldrne	r2, [r6, #60]	; 0x3c
   21840:	ldrne	r3, [r2, r7]
   21844:	orrne	r3, r3, r8, lsl r5
   21848:	strne	r3, [r2, r7]
   2184c:	bics	r3, r4, #127	; 0x7f
   21850:	bne	21820 <__assert_fail@plt+0x102c8>
   21854:	cmp	r0, r4
   21858:	ldrbne	r3, [r6, #88]	; 0x58
   2185c:	orrne	r3, r3, #8
   21860:	strbne	r3, [r6, #88]	; 0x58
   21864:	b	21820 <__assert_fail@plt+0x102c8>
   21868:	add	r7, r7, #4
   2186c:	cmp	r7, #32
   21870:	beq	2167c <__assert_fail@plt+0x10124>
   21874:	lsl	r4, r7, #3
   21878:	mov	r5, #0
   2187c:	b	21830 <__assert_fail@plt+0x102d8>
   21880:	mov	r1, #0
   21884:	add	r0, r6, #136	; 0x88
   21888:	bl	11270 <pthread_mutex_init@plt>
   2188c:	cmp	r0, #0
   21890:	movne	r3, #12
   21894:	strne	r3, [sp, #116]	; 0x74
   21898:	bne	220c0 <__assert_fail@plt+0x10b68>
   2189c:	ldr	r3, [sp, #116]	; 0x74
   218a0:	cmp	r3, #0
   218a4:	beq	216c8 <__assert_fail@plt+0x10170>
   218a8:	b	220c0 <__assert_fail@plt+0x10b68>
   218ac:	add	r0, sp, #32
   218b0:	bl	175d4 <__assert_fail@plt+0x607c>
   218b4:	b	218e0 <__assert_fail@plt+0x10388>
   218b8:	ldr	r3, [r6, #92]	; 0x5c
   218bc:	cmp	r3, #1
   218c0:	bgt	218d8 <__assert_fail@plt+0x10380>
   218c4:	cmp	r4, #0
   218c8:	beq	21b38 <__assert_fail@plt+0x105e0>
   218cc:	add	r0, sp, #32
   218d0:	bl	15908 <__assert_fail@plt+0x43b0>
   218d4:	b	218e0 <__assert_fail@plt+0x10388>
   218d8:	add	r0, sp, #32
   218dc:	bl	16ab0 <__assert_fail@plt+0x5558>
   218e0:	mov	r4, #0
   218e4:	str	r4, [sp, #116]	; 0x74
   218e8:	str	r4, [sl, #24]
   218ec:	ldr	r5, [sl]
   218f0:	str	fp, [r5, #128]	; 0x80
   218f4:	orr	r2, fp, #8388608	; 0x800000
   218f8:	add	r1, sp, #32
   218fc:	add	r0, sp, #20
   21900:	bl	180f4 <__assert_fail@plt+0x6b9c>
   21904:	add	r3, sp, #116	; 0x74
   21908:	str	r3, [sp, #4]
   2190c:	str	r4, [sp]
   21910:	mov	r3, fp
   21914:	add	r2, sp, #20
   21918:	mov	r1, sl
   2191c:	add	r0, sp, #32
   21920:	bl	213d4 <__assert_fail@plt+0xfe7c>
   21924:	mov	r7, r0
   21928:	ldr	r3, [sp, #116]	; 0x74
   2192c:	subs	r2, r3, r4
   21930:	movne	r2, #1
   21934:	cmp	r0, r4
   21938:	movne	r2, #0
   2193c:	cmp	r2, r4
   21940:	bne	220dc <__assert_fail@plt+0x10b84>
   21944:	mov	r3, #2
   21948:	mov	r2, #0
   2194c:	mov	r1, r2
   21950:	mov	r0, r5
   21954:	bl	1676c <__assert_fail@plt+0x5214>
   21958:	mov	r4, r0
   2195c:	cmp	r7, #0
   21960:	beq	21978 <__assert_fail@plt+0x10420>
   21964:	mov	r3, #16
   21968:	mov	r2, r4
   2196c:	mov	r1, r7
   21970:	mov	r0, r5
   21974:	bl	1676c <__assert_fail@plt+0x5214>
   21978:	cmp	r0, #0
   2197c:	cmpne	r4, #0
   21980:	moveq	r3, #12
   21984:	streq	r3, [sp, #116]	; 0x74
   21988:	beq	220dc <__assert_fail@plt+0x10b84>
   2198c:	str	r0, [r6, #52]	; 0x34
   21990:	cmp	r0, #0
   21994:	beq	22120 <__assert_fail@plt+0x10bc8>
   21998:	ldr	r4, [sl]
   2199c:	ldr	r0, [r4, #4]
   219a0:	lsl	r0, r0, #2
   219a4:	bl	244c8 <__assert_fail@plt+0x12f70>
   219a8:	str	r0, [r4, #12]
   219ac:	ldr	r0, [r4, #4]
   219b0:	lsl	r0, r0, #2
   219b4:	bl	244c8 <__assert_fail@plt+0x12f70>
   219b8:	str	r0, [r4, #16]
   219bc:	ldr	r0, [r4, #4]
   219c0:	add	r0, r0, r0, lsl #1
   219c4:	lsl	r0, r0, #2
   219c8:	bl	244c8 <__assert_fail@plt+0x12f70>
   219cc:	str	r0, [r4, #20]
   219d0:	ldr	r0, [r4, #4]
   219d4:	add	r0, r0, r0, lsl #1
   219d8:	lsl	r0, r0, #2
   219dc:	bl	244c8 <__assert_fail@plt+0x12f70>
   219e0:	str	r0, [r4, #24]
   219e4:	ldr	r3, [r4, #12]
   219e8:	cmp	r3, #0
   219ec:	beq	220e8 <__assert_fail@plt+0x10b90>
   219f0:	ldr	r3, [r4, #16]
   219f4:	cmp	r3, #0
   219f8:	beq	22118 <__assert_fail@plt+0x10bc0>
   219fc:	ldr	fp, [r4, #20]
   21a00:	cmp	r0, #0
   21a04:	cmpne	fp, #0
   21a08:	moveq	fp, #1
   21a0c:	movne	fp, #0
   21a10:	beq	220f0 <__assert_fail@plt+0x10b98>
   21a14:	ldr	r0, [sl, #24]
   21a18:	lsl	r0, r0, #2
   21a1c:	bl	244c8 <__assert_fail@plt+0x12f70>
   21a20:	str	r0, [r4, #132]	; 0x84
   21a24:	cmp	r0, #0
   21a28:	beq	21a98 <__assert_fail@plt+0x10540>
   21a2c:	ldr	r3, [sl, #24]
   21a30:	cmp	r3, #0
   21a34:	beq	21a54 <__assert_fail@plt+0x104fc>
   21a38:	mov	r3, #0
   21a3c:	ldr	r2, [r4, #132]	; 0x84
   21a40:	str	r3, [r2, r3, lsl #2]
   21a44:	add	r3, r3, #1
   21a48:	ldr	r2, [sl, #24]
   21a4c:	cmp	r3, r2
   21a50:	bcc	21a3c <__assert_fail@plt+0x104e4>
   21a54:	mov	r2, r4
   21a58:	ldr	r1, [pc, #1844]	; 22194 <__assert_fail@plt+0x10c3c>
   21a5c:	ldr	r0, [r4, #52]	; 0x34
   21a60:	bl	1647c <__assert_fail@plt+0x4f24>
   21a64:	ldr	r1, [sl, #24]
   21a68:	cmp	r1, #0
   21a6c:	beq	21b4c <__assert_fail@plt+0x105f4>
   21a70:	ldr	r0, [r4, #132]	; 0x84
   21a74:	ldr	r3, [r0]
   21a78:	cmp	r3, #0
   21a7c:	bne	21a98 <__assert_fail@plt+0x10540>
   21a80:	add	r3, r3, #1
   21a84:	cmp	r1, r3
   21a88:	bls	21b48 <__assert_fail@plt+0x105f0>
   21a8c:	ldr	r2, [r0, r3, lsl #2]
   21a90:	cmp	r2, r3
   21a94:	beq	21a80 <__assert_fail@plt+0x10528>
   21a98:	mov	r2, sl
   21a9c:	ldr	r1, [pc, #1780]	; 22198 <__assert_fail@plt+0x10c40>
   21aa0:	ldr	r0, [r4, #52]	; 0x34
   21aa4:	bl	16408 <__assert_fail@plt+0x4eb0>
   21aa8:	cmp	r0, #0
   21aac:	bne	22104 <__assert_fail@plt+0x10bac>
   21ab0:	mov	r2, r4
   21ab4:	ldr	r1, [pc, #1760]	; 2219c <__assert_fail@plt+0x10c44>
   21ab8:	ldr	r0, [r4, #52]	; 0x34
   21abc:	bl	16408 <__assert_fail@plt+0x4eb0>
   21ac0:	cmp	r0, #0
   21ac4:	bne	22104 <__assert_fail@plt+0x10bac>
   21ac8:	mov	r2, r4
   21acc:	ldr	r1, [pc, #1740]	; 221a0 <__assert_fail@plt+0x10c48>
   21ad0:	ldr	r0, [r4, #52]	; 0x34
   21ad4:	bl	1647c <__assert_fail@plt+0x4f24>
   21ad8:	mov	r2, r4
   21adc:	ldr	r1, [pc, #1728]	; 221a4 <__assert_fail@plt+0x10c4c>
   21ae0:	ldr	r0, [r4, #52]	; 0x34
   21ae4:	bl	1647c <__assert_fail@plt+0x4f24>
   21ae8:	cmp	r0, #0
   21aec:	bne	22104 <__assert_fail@plt+0x10bac>
   21af0:	mov	r5, fp
   21af4:	mov	r7, #0
   21af8:	add	r9, r7, r7, lsl #1
   21afc:	lsl	r9, r9, #2
   21b00:	ldr	r3, [r4, #24]
   21b04:	add	r3, r3, r9
   21b08:	ldr	r3, [r3, #4]
   21b0c:	cmp	r3, #0
   21b10:	beq	21b60 <__assert_fail@plt+0x10608>
   21b14:	add	r7, r7, #1
   21b18:	ldr	r3, [r4, #8]
   21b1c:	cmp	r3, r7
   21b20:	bne	21af8 <__assert_fail@plt+0x105a0>
   21b24:	cmp	r5, #0
   21b28:	beq	21ba0 <__assert_fail@plt+0x10648>
   21b2c:	mov	r5, fp
   21b30:	mov	r7, #0
   21b34:	b	21af8 <__assert_fail@plt+0x105a0>
   21b38:	ldr	r3, [sp, #68]	; 0x44
   21b3c:	str	r3, [sp, #60]	; 0x3c
   21b40:	str	r3, [sp, #64]	; 0x40
   21b44:	b	218e0 <__assert_fail@plt+0x10388>
   21b48:	bne	21a98 <__assert_fail@plt+0x10540>
   21b4c:	ldr	r0, [r4, #132]	; 0x84
   21b50:	bl	13b40 <__assert_fail@plt+0x25e8>
   21b54:	mov	r3, #0
   21b58:	str	r3, [r4, #132]	; 0x84
   21b5c:	b	21a98 <__assert_fail@plt+0x10540>
   21b60:	mov	r3, #1
   21b64:	mov	r2, r7
   21b68:	mov	r1, r4
   21b6c:	add	r0, sp, #20
   21b70:	bl	19450 <__assert_fail@plt+0x7ef8>
   21b74:	cmp	r0, #0
   21b78:	bne	2211c <__assert_fail@plt+0x10bc4>
   21b7c:	ldr	r3, [r4, #24]
   21b80:	add	r9, r3, r9
   21b84:	ldr	r3, [r9, #4]
   21b88:	cmp	r3, #0
   21b8c:	bne	21b14 <__assert_fail@plt+0x105bc>
   21b90:	ldr	r0, [sp, #28]
   21b94:	bl	13b40 <__assert_fail@plt+0x25e8>
   21b98:	mov	r5, #1
   21b9c:	b	21b14 <__assert_fail@plt+0x105bc>
   21ba0:	ldrb	r3, [sl, #28]
   21ba4:	tst	r3, #16
   21ba8:	beq	21d14 <__assert_fail@plt+0x107bc>
   21bac:	ldr	r3, [r4, #76]	; 0x4c
   21bb0:	cmp	r3, #0
   21bb4:	beq	21c98 <__assert_fail@plt+0x10740>
   21bb8:	ldr	r0, [r4, #8]
   21bbc:	add	r0, r0, r0, lsl #1
   21bc0:	lsl	r0, r0, #2
   21bc4:	bl	244c8 <__assert_fail@plt+0x12f70>
   21bc8:	str	r0, [r4, #28]
   21bcc:	cmp	r0, #0
   21bd0:	beq	220f8 <__assert_fail@plt+0x10ba0>
   21bd4:	ldr	r3, [r4, #8]
   21bd8:	cmp	r3, #0
   21bdc:	beq	2210c <__assert_fail@plt+0x10bb4>
   21be0:	mov	r3, #0
   21be4:	mov	r1, r3
   21be8:	mov	r2, r3
   21bec:	ldr	ip, [r4, #28]
   21bf0:	add	r0, ip, r3
   21bf4:	str	r2, [ip, r3]
   21bf8:	str	r2, [r0, #4]
   21bfc:	str	r2, [r0, #8]
   21c00:	add	r1, r1, #1
   21c04:	ldr	r0, [r4, #8]
   21c08:	add	r3, r3, #12
   21c0c:	cmp	r1, r0
   21c10:	bcc	21bec <__assert_fail@plt+0x10694>
   21c14:	cmp	r0, #0
   21c18:	beq	21c98 <__assert_fail@plt+0x10740>
   21c1c:	mov	fp, #0
   21c20:	str	r5, [sp, #12]
   21c24:	mov	r5, fp
   21c28:	ldr	r3, [r4, #24]
   21c2c:	add	r3, r3, fp
   21c30:	ldr	r9, [r3, #8]
   21c34:	ldr	r3, [r3, #4]
   21c38:	cmp	r3, #0
   21c3c:	ble	21c80 <__assert_fail@plt+0x10728>
   21c40:	sub	r9, r9, #4
   21c44:	mov	r7, #0
   21c48:	ldr	r0, [r9, #4]!
   21c4c:	add	r0, r0, r0, lsl #1
   21c50:	ldr	r3, [r4, #28]
   21c54:	mov	r1, r5
   21c58:	add	r0, r3, r0, lsl #2
   21c5c:	bl	16594 <__assert_fail@plt+0x503c>
   21c60:	cmp	r0, #0
   21c64:	beq	22100 <__assert_fail@plt+0x10ba8>
   21c68:	add	r7, r7, #1
   21c6c:	ldr	r3, [r4, #24]
   21c70:	add	r3, r3, fp
   21c74:	ldr	r3, [r3, #4]
   21c78:	cmp	r7, r3
   21c7c:	blt	21c48 <__assert_fail@plt+0x106f0>
   21c80:	add	r5, r5, #1
   21c84:	add	fp, fp, #12
   21c88:	ldr	r3, [r4, #8]
   21c8c:	cmp	r5, r3
   21c90:	bcc	21c28 <__assert_fail@plt+0x106d0>
   21c94:	ldr	r5, [sp, #12]
   21c98:	mov	r3, #0
   21c9c:	str	r3, [sp, #116]	; 0x74
   21ca0:	ldrb	r3, [r6, #88]	; 0x58
   21ca4:	clz	r8, r8
   21ca8:	lsr	r8, r8, #5
   21cac:	ands	r8, r8, r3, lsr #2
   21cb0:	beq	21cc0 <__assert_fail@plt+0x10768>
   21cb4:	ldr	r3, [sl, #20]
   21cb8:	cmp	r3, #0
   21cbc:	beq	21d30 <__assert_fail@plt+0x107d8>
   21cc0:	ldr	r3, [r6, #52]	; 0x34
   21cc4:	ldr	r3, [r3, #12]
   21cc8:	ldr	r1, [r3, #28]
   21ccc:	str	r1, [r6, #72]	; 0x48
   21cd0:	add	r1, r1, r1, lsl #1
   21cd4:	ldr	r3, [r6, #24]
   21cd8:	add	r1, r3, r1, lsl #2
   21cdc:	add	r0, sp, #20
   21ce0:	bl	16e0c <__assert_fail@plt+0x58b4>
   21ce4:	mov	r5, r0
   21ce8:	str	r0, [sp, #16]
   21cec:	cmp	r0, #0
   21cf0:	bne	21fc4 <__assert_fail@plt+0x10a6c>
   21cf4:	ldr	r3, [r6, #76]	; 0x4c
   21cf8:	cmp	r3, #0
   21cfc:	ble	21f80 <__assert_fail@plt+0x10a28>
   21d00:	ldr	lr, [sp, #24]
   21d04:	cmp	lr, #0
   21d08:	ble	21f80 <__assert_fail@plt+0x10a28>
   21d0c:	mov	r4, #0
   21d10:	b	21f28 <__assert_fail@plt+0x109d0>
   21d14:	ldr	r3, [sl, #24]
   21d18:	cmp	r3, #0
   21d1c:	beq	21bac <__assert_fail@plt+0x10654>
   21d20:	ldrb	r3, [r4, #88]	; 0x58
   21d24:	tst	r3, #1
   21d28:	bne	21bb8 <__assert_fail@plt+0x10660>
   21d2c:	b	21bac <__assert_fail@plt+0x10654>
   21d30:	ldr	r3, [r6, #8]
   21d34:	cmp	r3, #0
   21d38:	beq	21eb0 <__assert_fail@plt+0x10958>
   21d3c:	ldr	ip, [r6]
   21d40:	mov	lr, ip
   21d44:	mov	r0, r3
   21d48:	mov	r3, r5
   21d4c:	mov	r2, #0
   21d50:	b	21d68 <__assert_fail@plt+0x10810>
   21d54:	mov	r3, r8
   21d58:	add	r2, r2, #1
   21d5c:	add	lr, lr, #8
   21d60:	cmp	r2, r0
   21d64:	beq	21e28 <__assert_fail@plt+0x108d0>
   21d68:	ldrb	r1, [lr, #4]
   21d6c:	sub	r1, r1, #1
   21d70:	cmp	r1, #11
   21d74:	ldrls	pc, [pc, r1, lsl #2]
   21d78:	b	21e24 <__assert_fail@plt+0x108cc>
   21d7c:	andeq	r1, r2, r4, ror #27
   21d80:	andeq	r1, r2, r8, asr sp
   21d84:	andeq	r1, r2, ip, lsr #27
   21d88:	andeq	r1, r2, r8, asr sp
   21d8c:	andeq	r1, r2, r4, asr sp
   21d90:	andeq	r1, r2, r0, asr #25
   21d94:	andeq	r1, r2, r4, lsr #28
   21d98:	andeq	r1, r2, r8, asr sp
   21d9c:	andeq	r1, r2, r8, asr sp
   21da0:	andeq	r1, r2, r8, asr sp
   21da4:	andeq	r1, r2, r8, asr sp
   21da8:	strdeq	r1, [r2], -r4
   21dac:	ldr	r1, [ip, r2, lsl #3]
   21db0:	ldr	r4, [r1, #16]
   21db4:	cmp	r4, #0
   21db8:	bne	21cc0 <__assert_fail@plt+0x10768>
   21dbc:	ldr	r4, [r1, #20]
   21dc0:	cmp	r4, #0
   21dc4:	bne	21cc0 <__assert_fail@plt+0x10768>
   21dc8:	ldr	r4, [r1, #24]
   21dcc:	cmp	r4, #0
   21dd0:	bne	21cc0 <__assert_fail@plt+0x10768>
   21dd4:	ldr	r1, [r1, #28]
   21dd8:	cmp	r1, #0
   21ddc:	beq	21d58 <__assert_fail@plt+0x10800>
   21de0:	b	21cc0 <__assert_fail@plt+0x10768>
   21de4:	ldrb	r1, [ip, r2, lsl #3]
   21de8:	lsrs	r1, r1, #7
   21dec:	movne	r5, r8
   21df0:	b	21d58 <__assert_fail@plt+0x10800>
   21df4:	ldr	r1, [ip, r2, lsl #3]
   21df8:	cmp	r1, #32
   21dfc:	beq	21d58 <__assert_fail@plt+0x10800>
   21e00:	bls	21e18 <__assert_fail@plt+0x108c0>
   21e04:	cmp	r1, #64	; 0x40
   21e08:	beq	21d58 <__assert_fail@plt+0x10800>
   21e0c:	cmp	r1, #128	; 0x80
   21e10:	beq	21d58 <__assert_fail@plt+0x10800>
   21e14:	b	21cc0 <__assert_fail@plt+0x10768>
   21e18:	cmp	r1, #16
   21e1c:	beq	21d58 <__assert_fail@plt+0x10800>
   21e20:	b	21cc0 <__assert_fail@plt+0x10768>
   21e24:	bl	11534 <abort@plt>
   21e28:	orr	r5, r5, r3
   21e2c:	tst	r5, #255	; 0xff
   21e30:	beq	21e6c <__assert_fail@plt+0x10914>
   21e34:	mov	r2, #0
   21e38:	mov	r4, #7
   21e3c:	lsl	ip, r2, #3
   21e40:	ldr	lr, [r6]
   21e44:	add	r1, lr, ip
   21e48:	ldrb	r0, [r1, #4]
   21e4c:	cmp	r0, #1
   21e50:	beq	21e98 <__assert_fail@plt+0x10940>
   21e54:	cmp	r0, #5
   21e58:	strbeq	r4, [r1, #4]
   21e5c:	add	r2, r2, #1
   21e60:	ldr	r1, [r6, #8]
   21e64:	cmp	r2, r1
   21e68:	bcc	21e3c <__assert_fail@plt+0x108e4>
   21e6c:	mov	r2, #1
   21e70:	str	r2, [r6, #92]	; 0x5c
   21e74:	ldrb	r2, [r6, #88]	; 0x58
   21e78:	ldr	r1, [r6, #76]	; 0x4c
   21e7c:	cmp	r1, #0
   21e80:	orrgt	r3, r3, #1
   21e84:	and	r3, r3, #1
   21e88:	and	r2, r2, #249	; 0xf9
   21e8c:	orr	r3, r2, r3, lsl #1
   21e90:	strb	r3, [r6, #88]	; 0x58
   21e94:	b	21cc0 <__assert_fail@plt+0x10768>
   21e98:	ldrsb	r0, [lr, ip]
   21e9c:	cmp	r0, #0
   21ea0:	ldrblt	r0, [r1, #6]
   21ea4:	biclt	r0, r0, #32
   21ea8:	strblt	r0, [r1, #6]
   21eac:	b	21e5c <__assert_fail@plt+0x10904>
   21eb0:	mov	r3, r5
   21eb4:	b	21e6c <__assert_fail@plt+0x10914>
   21eb8:	add	r3, r3, #1
   21ebc:	cmp	lr, r3
   21ec0:	beq	21f18 <__assert_fail@plt+0x109c0>
   21ec4:	ldr	r1, [r2, #4]!
   21ec8:	add	r0, ip, r1, lsl #3
   21ecc:	ldrb	r0, [r0, #4]
   21ed0:	cmp	r0, #9
   21ed4:	bne	21eb8 <__assert_fail@plt+0x10960>
   21ed8:	ldr	r0, [ip, r1, lsl #3]
   21edc:	ldr	r1, [r7]
   21ee0:	cmp	r0, r1
   21ee4:	bne	21eb8 <__assert_fail@plt+0x10960>
   21ee8:	cmp	lr, r3
   21eec:	beq	21f18 <__assert_fail@plt+0x109c0>
   21ef0:	ldr	r3, [r6, #20]
   21ef4:	add	r8, r8, r8, lsl #1
   21ef8:	add	r8, r3, r8, lsl #2
   21efc:	ldr	r3, [r8, #8]
   21f00:	ldr	r7, [r3]
   21f04:	mov	r1, r7
   21f08:	add	r0, sp, #20
   21f0c:	bl	159d0 <__assert_fail@plt+0x4478>
   21f10:	cmp	r0, #0
   21f14:	beq	21f5c <__assert_fail@plt+0x10a04>
   21f18:	add	r4, r4, #1
   21f1c:	ldr	lr, [sp, #24]
   21f20:	cmp	lr, r4
   21f24:	ble	21f80 <__assert_fail@plt+0x10a28>
   21f28:	ldr	r2, [sp, #28]
   21f2c:	ldr	ip, [r6]
   21f30:	ldr	r8, [r2, r4, lsl #2]
   21f34:	add	r7, ip, r8, lsl #3
   21f38:	ldrb	r3, [r7, #4]
   21f3c:	cmp	r3, #4
   21f40:	bne	21f18 <__assert_fail@plt+0x109c0>
   21f44:	cmp	lr, #0
   21f48:	subgt	r2, r2, #4
   21f4c:	movgt	r3, #0
   21f50:	bgt	21ec4 <__assert_fail@plt+0x1096c>
   21f54:	mov	r3, #0
   21f58:	b	21ee8 <__assert_fail@plt+0x10990>
   21f5c:	add	r7, r7, r7, lsl #1
   21f60:	ldr	r1, [r6, #24]
   21f64:	add	r1, r1, r7, lsl #2
   21f68:	add	r0, sp, #20
   21f6c:	bl	192a8 <__assert_fail@plt+0x7d50>
   21f70:	cmp	r0, #0
   21f74:	bne	2205c <__assert_fail@plt+0x10b04>
   21f78:	mov	r4, #0
   21f7c:	b	21f18 <__assert_fail@plt+0x109c0>
   21f80:	mov	r3, #0
   21f84:	add	r2, sp, #20
   21f88:	mov	r1, r6
   21f8c:	add	r0, sp, #16
   21f90:	bl	185c4 <__assert_fail@plt+0x706c>
   21f94:	str	r0, [r6, #36]	; 0x24
   21f98:	cmp	r0, #0
   21f9c:	ldreq	r5, [sp, #16]
   21fa0:	beq	21fc4 <__assert_fail@plt+0x10a6c>
   21fa4:	ldrsb	r3, [r0, #52]	; 0x34
   21fa8:	cmp	r3, #0
   21fac:	strge	r0, [r6, #48]	; 0x30
   21fb0:	strge	r0, [r6, #44]	; 0x2c
   21fb4:	strge	r0, [r6, #40]	; 0x28
   21fb8:	blt	21ff0 <__assert_fail@plt+0x10a98>
   21fbc:	ldr	r0, [sp, #28]
   21fc0:	bl	13b40 <__assert_fail@plt+0x25e8>
   21fc4:	str	r5, [sp, #116]	; 0x74
   21fc8:	mov	r0, sl
   21fcc:	bl	188b0 <__assert_fail@plt+0x7358>
   21fd0:	add	r0, sp, #32
   21fd4:	bl	188fc <__assert_fail@plt+0x73a4>
   21fd8:	ldr	r3, [sp, #116]	; 0x74
   21fdc:	cmp	r3, #0
   21fe0:	bne	22064 <__assert_fail@plt+0x10b0c>
   21fe4:	ldr	r0, [sp, #116]	; 0x74
   21fe8:	add	sp, sp, #124	; 0x7c
   21fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ff0:	mov	r3, #1
   21ff4:	add	r2, sp, #20
   21ff8:	mov	r1, r6
   21ffc:	add	r0, sp, #16
   22000:	bl	185c4 <__assert_fail@plt+0x706c>
   22004:	str	r0, [r6, #40]	; 0x28
   22008:	mov	r3, #2
   2200c:	add	r2, sp, #20
   22010:	mov	r1, r6
   22014:	add	r0, sp, #16
   22018:	bl	185c4 <__assert_fail@plt+0x706c>
   2201c:	str	r0, [r6, #44]	; 0x2c
   22020:	mov	r3, #6
   22024:	add	r2, sp, #20
   22028:	mov	r1, r6
   2202c:	add	r0, sp, #16
   22030:	bl	185c4 <__assert_fail@plt+0x706c>
   22034:	str	r0, [r6, #48]	; 0x30
   22038:	ldr	r3, [r6, #40]	; 0x28
   2203c:	cmp	r3, #0
   22040:	beq	22054 <__assert_fail@plt+0x10afc>
   22044:	ldr	r3, [r6, #44]	; 0x2c
   22048:	cmp	r0, #0
   2204c:	cmpne	r3, #0
   22050:	bne	21fbc <__assert_fail@plt+0x10a64>
   22054:	ldr	r5, [sp, #16]
   22058:	b	21fc4 <__assert_fail@plt+0x10a6c>
   2205c:	mov	r5, r0
   22060:	b	21fc4 <__assert_fail@plt+0x10a6c>
   22064:	mov	r3, #1
   22068:	ldr	r2, [pc, #288]	; 22190 <__assert_fail@plt+0x10c38>
   2206c:	cmp	r2, #0
   22070:	moveq	r3, #0
   22074:	mov	r2, #1
   22078:	ldr	r1, [pc, #268]	; 2218c <__assert_fail@plt+0x10c34>
   2207c:	cmp	r1, #0
   22080:	moveq	r2, #0
   22084:	orr	r3, r3, r2
   22088:	tst	r3, #255	; 0xff
   2208c:	beq	22098 <__assert_fail@plt+0x10b40>
   22090:	add	r0, r6, #136	; 0x88
   22094:	bl	11210 <pthread_mutex_destroy@plt>
   22098:	mov	r0, r6
   2209c:	bl	1892c <__assert_fail@plt+0x73d4>
   220a0:	mov	r3, #0
   220a4:	str	r3, [sl]
   220a8:	str	r3, [sl, #4]
   220ac:	b	21fe4 <__assert_fail@plt+0x10a8c>
   220b0:	mov	r0, #12
   220b4:	b	21fe8 <__assert_fail@plt+0x10a90>
   220b8:	mov	r3, #12
   220bc:	str	r3, [sp, #116]	; 0x74
   220c0:	mov	r0, r6
   220c4:	bl	1892c <__assert_fail@plt+0x73d4>
   220c8:	mov	r3, #0
   220cc:	str	r3, [sl]
   220d0:	str	r3, [sl, #4]
   220d4:	ldr	r0, [sp, #116]	; 0x74
   220d8:	b	21fe8 <__assert_fail@plt+0x10a90>
   220dc:	mov	r3, #0
   220e0:	str	r3, [r6, #52]	; 0x34
   220e4:	b	22120 <__assert_fail@plt+0x10bc8>
   220e8:	mov	r0, #12
   220ec:	b	22104 <__assert_fail@plt+0x10bac>
   220f0:	mov	r0, #12
   220f4:	b	22104 <__assert_fail@plt+0x10bac>
   220f8:	mov	r0, #12
   220fc:	b	22104 <__assert_fail@plt+0x10bac>
   22100:	mov	r0, #12
   22104:	str	r0, [sp, #116]	; 0x74
   22108:	b	22120 <__assert_fail@plt+0x10bc8>
   2210c:	mov	r3, #0
   22110:	str	r3, [sp, #116]	; 0x74
   22114:	b	21ca0 <__assert_fail@plt+0x10748>
   22118:	mov	r0, #12
   2211c:	str	r0, [sp, #116]	; 0x74
   22120:	mov	r0, sl
   22124:	bl	188b0 <__assert_fail@plt+0x7358>
   22128:	add	r0, sp, #32
   2212c:	bl	188fc <__assert_fail@plt+0x73a4>
   22130:	mov	r3, #1
   22134:	ldr	r2, [pc, #80]	; 2218c <__assert_fail@plt+0x10c34>
   22138:	cmp	r2, #0
   2213c:	moveq	r3, #0
   22140:	mov	r2, #1
   22144:	ldr	r1, [pc, #68]	; 22190 <__assert_fail@plt+0x10c38>
   22148:	cmp	r1, #0
   2214c:	moveq	r2, #0
   22150:	orr	r3, r3, r2
   22154:	tst	r3, #255	; 0xff
   22158:	beq	22164 <__assert_fail@plt+0x10c0c>
   2215c:	add	r0, r6, #136	; 0x88
   22160:	bl	11210 <pthread_mutex_destroy@plt>
   22164:	mov	r0, r6
   22168:	bl	1892c <__assert_fail@plt+0x73d4>
   2216c:	mov	r3, #0
   22170:	str	r3, [sl]
   22174:	str	r3, [sl, #4]
   22178:	ldr	r0, [sp, #116]	; 0x74
   2217c:	b	21fe8 <__assert_fail@plt+0x10a90>
   22180:	beq	feaccc2c <optarg@@GLIBC_2.4+0xfea95a6c>
   22184:	muleq	r2, r4, r1
   22188:	andeq	r5, r2, ip, asr #30
	...
   22194:			; <UNDEFINED> instruction: 0x00015abc
   22198:			; <UNDEFINED> instruction: 0x000168b0
   2219c:	andeq	r8, r1, r4, lsr #8
   221a0:	andeq	r5, r1, r8, asr fp
   221a4:	andeq	r8, r1, r8, ror #23
   221a8:	push	{r4, lr}
   221ac:	mov	ip, r2
   221b0:	ldr	r3, [pc, #96]	; 22218 <__assert_fail@plt+0x10cc0>
   221b4:	ldr	r3, [r3]
   221b8:	lsr	lr, r3, #21
   221bc:	ldrb	r2, [r2, #28]
   221c0:	and	lr, lr, #16
   221c4:	and	r2, r2, #239	; 0xef
   221c8:	orr	r2, r2, lr
   221cc:	orr	r2, r2, #128	; 0x80
   221d0:	strb	r2, [ip, #28]
   221d4:	mov	r2, r1
   221d8:	mov	r1, r0
   221dc:	mov	r0, ip
   221e0:	bl	21530 <__assert_fail@plt+0xffd8>
   221e4:	cmp	r0, #0
   221e8:	beq	22210 <__assert_fail@plt+0x10cb8>
   221ec:	ldr	r3, [pc, #40]	; 2221c <__assert_fail@plt+0x10cc4>
   221f0:	add	r1, r3, #32
   221f4:	add	r3, r3, r0, lsl #2
   221f8:	ldr	r3, [r3, #416]	; 0x1a0
   221fc:	mov	r2, #5
   22200:	add	r1, r1, r3
   22204:	mov	r0, #0
   22208:	bl	112d0 <dcgettext@plt>
   2220c:	pop	{r4, pc}
   22210:	mov	r0, #0
   22214:	pop	{r4, pc}
   22218:	strdeq	r7, [r3], -r4
   2221c:	andeq	r5, r2, ip, asr #30
   22220:	ldr	r3, [pc, #12]	; 22234 <__assert_fail@plt+0x10cdc>
   22224:	ldr	r2, [r3]
   22228:	str	r0, [r3]
   2222c:	mov	r0, r2
   22230:	bx	lr
   22234:	strdeq	r7, [r3], -r4
   22238:	push	{r4, r5, r6, lr}
   2223c:	mov	r4, r0
   22240:	ldr	r5, [r0]
   22244:	ldr	r6, [r0, #16]
   22248:	mov	r2, #256	; 0x100
   2224c:	mov	r1, #0
   22250:	mov	r0, r6
   22254:	bl	1145c <memset@plt>
   22258:	mov	r2, r6
   2225c:	ldr	r1, [r5, #36]	; 0x24
   22260:	mov	r0, r4
   22264:	bl	1c16c <__assert_fail@plt+0xac14>
   22268:	ldr	r1, [r5, #40]	; 0x28
   2226c:	ldr	r3, [r5, #36]	; 0x24
   22270:	cmp	r3, r1
   22274:	beq	22284 <__assert_fail@plt+0x10d2c>
   22278:	mov	r2, r6
   2227c:	mov	r0, r4
   22280:	bl	1c16c <__assert_fail@plt+0xac14>
   22284:	ldr	r1, [r5, #44]	; 0x2c
   22288:	ldr	r3, [r5, #36]	; 0x24
   2228c:	cmp	r3, r1
   22290:	beq	222a0 <__assert_fail@plt+0x10d48>
   22294:	mov	r2, r6
   22298:	mov	r0, r4
   2229c:	bl	1c16c <__assert_fail@plt+0xac14>
   222a0:	ldr	r1, [r5, #48]	; 0x30
   222a4:	ldr	r3, [r5, #36]	; 0x24
   222a8:	cmp	r3, r1
   222ac:	beq	222bc <__assert_fail@plt+0x10d64>
   222b0:	mov	r2, r6
   222b4:	mov	r0, r4
   222b8:	bl	1c16c <__assert_fail@plt+0xac14>
   222bc:	ldrb	r3, [r4, #28]
   222c0:	orr	r3, r3, #8
   222c4:	strb	r3, [r4, #28]
   222c8:	mov	r0, #0
   222cc:	pop	{r4, r5, r6, pc}
   222d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222d4:	sub	sp, sp, #44	; 0x2c
   222d8:	ldr	ip, [sp, #80]	; 0x50
   222dc:	ldr	r4, [sp, #88]	; 0x58
   222e0:	ldr	fp, [r0]
   222e4:	add	r7, r3, ip
   222e8:	cmp	r3, r2
   222ec:	movle	lr, #0
   222f0:	movgt	lr, #1
   222f4:	orrs	lr, lr, r3, lsr #31
   222f8:	bne	22658 <__assert_fail@plt+0x11100>
   222fc:	cmp	r7, r2
   22300:	bgt	22450 <__assert_fail@plt+0x10ef8>
   22304:	cmp	ip, #0
   22308:	cmpge	r3, r7
   2230c:	bgt	22458 <__assert_fail@plt+0x10f00>
   22310:	cmp	r7, #0
   22314:	blt	22460 <__assert_fail@plt+0x10f08>
   22318:	cmp	r3, r7
   2231c:	movgt	lr, #0
   22320:	movle	lr, #1
   22324:	and	ip, lr, ip, lsr #31
   22328:	cmp	ip, #0
   2232c:	movne	r7, #0
   22330:	mov	r8, #1
   22334:	ldr	ip, [pc, #812]	; 22668 <__assert_fail@plt+0x11110>
   22338:	cmp	ip, #0
   2233c:	moveq	r8, #0
   22340:	mov	ip, #1
   22344:	ldr	lr, [pc, #800]	; 2266c <__assert_fail@plt+0x11114>
   22348:	cmp	lr, #0
   2234c:	moveq	ip, #0
   22350:	str	r3, [sp, #24]
   22354:	str	r2, [sp, #32]
   22358:	str	r1, [sp, #28]
   2235c:	mov	r6, r0
   22360:	orr	r8, r8, ip
   22364:	ands	r8, r8, #255	; 0xff
   22368:	beq	22374 <__assert_fail@plt+0x10e1c>
   2236c:	add	r0, fp, #136	; 0x88
   22370:	bl	1124c <pthread_mutex_lock@plt>
   22374:	ldrb	r3, [r6, #28]
   22378:	lsl	r2, r3, #26
   2237c:	and	sl, r3, #64	; 0x40
   22380:	cmp	sl, #0
   22384:	movne	sl, #2
   22388:	moveq	sl, #0
   2238c:	orr	sl, sl, r2, lsr #31
   22390:	ldr	r2, [sp, #24]
   22394:	cmp	r7, r2
   22398:	ble	223b0 <__assert_fail@plt+0x10e58>
   2239c:	ldr	r2, [r6, #16]
   223a0:	cmp	r2, #0
   223a4:	beq	223b0 <__assert_fail@plt+0x10e58>
   223a8:	tst	r3, #8
   223ac:	beq	22468 <__assert_fail@plt+0x10f10>
   223b0:	ldrb	r3, [r6, #28]
   223b4:	tst	r3, #16
   223b8:	bne	2249c <__assert_fail@plt+0x10f44>
   223bc:	cmp	r4, #0
   223c0:	beq	224a8 <__assert_fail@plt+0x10f50>
   223c4:	and	r3, r3, #6
   223c8:	cmp	r3, #4
   223cc:	beq	22474 <__assert_fail@plt+0x10f1c>
   223d0:	ldr	r5, [r6, #24]
   223d4:	add	r5, r5, #1
   223d8:	str	r5, [sp, #36]	; 0x24
   223dc:	lsl	r0, r5, #3
   223e0:	bl	244c8 <__assert_fail@plt+0x12f70>
   223e4:	subs	r9, r0, #0
   223e8:	beq	22650 <__assert_fail@plt+0x110f8>
   223ec:	str	sl, [sp, #16]
   223f0:	str	r9, [sp, #12]
   223f4:	str	r5, [sp, #8]
   223f8:	ldr	r3, [sp, #84]	; 0x54
   223fc:	str	r3, [sp, #4]
   22400:	str	r7, [sp]
   22404:	ldr	r3, [sp, #24]
   22408:	ldr	r2, [sp, #32]
   2240c:	ldr	r1, [sp, #28]
   22410:	mov	r0, r6
   22414:	bl	1e4e4 <__assert_fail@plt+0xcf8c>
   22418:	cmp	r0, #0
   2241c:	beq	224b0 <__assert_fail@plt+0x10f58>
   22420:	cmp	r0, #1
   22424:	mvneq	r4, #0
   22428:	mvnne	r4, #1
   2242c:	mov	r0, r9
   22430:	bl	13b40 <__assert_fail@plt+0x25e8>
   22434:	cmp	r8, #0
   22438:	beq	22444 <__assert_fail@plt+0x10eec>
   2243c:	add	r0, fp, #136	; 0x88
   22440:	bl	11198 <pthread_mutex_unlock@plt>
   22444:	mov	r0, r4
   22448:	add	sp, sp, #44	; 0x2c
   2244c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22450:	mov	r7, r2
   22454:	b	22330 <__assert_fail@plt+0x10dd8>
   22458:	mov	r7, r2
   2245c:	b	22330 <__assert_fail@plt+0x10dd8>
   22460:	mov	r7, #0
   22464:	b	22330 <__assert_fail@plt+0x10dd8>
   22468:	mov	r0, r6
   2246c:	bl	22238 <__assert_fail@plt+0x10ce0>
   22470:	b	223b0 <__assert_fail@plt+0x10e58>
   22474:	ldr	r3, [r4]
   22478:	ldr	r2, [r6, #24]
   2247c:	cmp	r3, r2
   22480:	bhi	223d0 <__assert_fail@plt+0x10e78>
   22484:	cmp	r3, #0
   22488:	movgt	r5, r3
   2248c:	movle	r5, #1
   22490:	cmp	r3, #0
   22494:	movle	r4, #0
   22498:	b	223d8 <__assert_fail@plt+0x10e80>
   2249c:	mov	r5, #1
   224a0:	mov	r4, #0
   224a4:	b	223d8 <__assert_fail@plt+0x10e80>
   224a8:	mov	r5, #1
   224ac:	b	223d8 <__assert_fail@plt+0x10e80>
   224b0:	cmp	r4, #0
   224b4:	beq	2256c <__assert_fail@plt+0x11014>
   224b8:	ldrb	sl, [r6, #28]
   224bc:	lsr	sl, sl, #1
   224c0:	add	r7, r5, #1
   224c4:	ands	sl, sl, #3
   224c8:	beq	22580 <__assert_fail@plt+0x11028>
   224cc:	cmp	sl, #1
   224d0:	movne	sl, #2
   224d4:	beq	225c4 <__assert_fail@plt+0x1106c>
   224d8:	cmp	r5, #0
   224dc:	ble	22628 <__assert_fail@plt+0x110d0>
   224e0:	mov	r2, r9
   224e4:	ldr	r3, [sp, #36]	; 0x24
   224e8:	lsl	ip, r3, #2
   224ec:	mov	r3, #0
   224f0:	ldr	r0, [r9, r3, lsl #1]
   224f4:	ldr	r1, [r4, #4]
   224f8:	str	r0, [r1, r3]
   224fc:	ldr	r0, [r2, #4]
   22500:	ldr	r1, [r4, #8]
   22504:	str	r0, [r1, r3]
   22508:	add	r3, r3, #4
   2250c:	add	r2, r2, #8
   22510:	cmp	ip, r3
   22514:	bne	224f0 <__assert_fail@plt+0x10f98>
   22518:	ldr	r3, [r4]
   2251c:	cmp	r3, r5
   22520:	bls	22550 <__assert_fail@plt+0x10ff8>
   22524:	lsl	r3, r5, #2
   22528:	mvn	r2, #0
   2252c:	ldr	r1, [r4, #4]
   22530:	ldr	r0, [r4, #8]
   22534:	str	r2, [r0, r3]
   22538:	str	r2, [r1, r3]
   2253c:	add	r5, r5, #1
   22540:	add	r3, r3, #4
   22544:	ldr	r1, [r4]
   22548:	cmp	r5, r1
   2254c:	bcc	2252c <__assert_fail@plt+0x10fd4>
   22550:	ldrb	r3, [r6, #28]
   22554:	and	sl, sl, #3
   22558:	bic	r3, r3, #6
   2255c:	orr	sl, r3, sl, lsl #1
   22560:	strb	sl, [r6, #28]
   22564:	tst	sl, #6
   22568:	beq	22660 <__assert_fail@plt+0x11108>
   2256c:	ldrb	r3, [sp, #92]	; 0x5c
   22570:	cmp	r3, #0
   22574:	bne	22640 <__assert_fail@plt+0x110e8>
   22578:	ldr	r4, [r9]
   2257c:	b	2242c <__assert_fail@plt+0x10ed4>
   22580:	lsl	sl, r7, #2
   22584:	mov	r0, sl
   22588:	bl	244c8 <__assert_fail@plt+0x12f70>
   2258c:	str	r0, [r4, #4]
   22590:	cmp	r0, #0
   22594:	beq	22630 <__assert_fail@plt+0x110d8>
   22598:	mov	r0, sl
   2259c:	bl	244c8 <__assert_fail@plt+0x12f70>
   225a0:	str	r0, [r4, #8]
   225a4:	cmp	r0, #0
   225a8:	strne	r7, [r4]
   225ac:	movne	sl, #1
   225b0:	bne	224d8 <__assert_fail@plt+0x10f80>
   225b4:	ldr	r0, [r4, #4]
   225b8:	bl	13b40 <__assert_fail@plt+0x25e8>
   225bc:	mov	sl, #0
   225c0:	b	22550 <__assert_fail@plt+0x10ff8>
   225c4:	ldr	r3, [r4]
   225c8:	cmp	r3, r7
   225cc:	bcs	224d8 <__assert_fail@plt+0x10f80>
   225d0:	lsl	r3, r7, #2
   225d4:	str	r3, [sp, #32]
   225d8:	mov	r1, r3
   225dc:	ldr	r0, [r4, #4]
   225e0:	bl	244f8 <__assert_fail@plt+0x12fa0>
   225e4:	subs	r2, r0, #0
   225e8:	str	r2, [sp, #28]
   225ec:	beq	22638 <__assert_fail@plt+0x110e0>
   225f0:	ldr	r1, [sp, #32]
   225f4:	ldr	r0, [r4, #8]
   225f8:	bl	244f8 <__assert_fail@plt+0x12fa0>
   225fc:	cmp	r0, #0
   22600:	beq	22618 <__assert_fail@plt+0x110c0>
   22604:	ldr	r3, [sp, #28]
   22608:	str	r3, [r4, #4]
   2260c:	str	r0, [r4, #8]
   22610:	str	r7, [r4]
   22614:	b	224d8 <__assert_fail@plt+0x10f80>
   22618:	ldr	r0, [sp, #28]
   2261c:	bl	13b40 <__assert_fail@plt+0x25e8>
   22620:	mov	sl, #0
   22624:	b	22550 <__assert_fail@plt+0x10ff8>
   22628:	mov	r5, #0
   2262c:	b	22518 <__assert_fail@plt+0x10fc0>
   22630:	mov	sl, #0
   22634:	b	22550 <__assert_fail@plt+0x10ff8>
   22638:	mov	sl, #0
   2263c:	b	22550 <__assert_fail@plt+0x10ff8>
   22640:	ldr	r4, [r9, #4]
   22644:	ldr	r3, [sp, #24]
   22648:	sub	r4, r4, r3
   2264c:	b	2242c <__assert_fail@plt+0x10ed4>
   22650:	mvn	r4, #1
   22654:	b	22434 <__assert_fail@plt+0x10edc>
   22658:	mvn	r4, #0
   2265c:	b	22444 <__assert_fail@plt+0x10eec>
   22660:	mvn	r4, #1
   22664:	b	2242c <__assert_fail@plt+0x10ed4>
	...
   22670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22674:	sub	sp, sp, #20
   22678:	mov	r5, r2
   2267c:	mov	r7, r3
   22680:	ldr	r4, [sp, #56]	; 0x38
   22684:	ldr	r6, [sp, #72]	; 0x48
   22688:	lsr	r3, r4, #31
   2268c:	orr	r3, r3, r2, lsr #31
   22690:	orrs	r2, r3, r6, lsr #31
   22694:	bne	2279c <__assert_fail@plt+0x11244>
   22698:	mov	r8, r0
   2269c:	mov	r9, r1
   226a0:	cmp	r4, #0
   226a4:	blt	2271c <__assert_fail@plt+0x111c4>
   226a8:	cmp	r3, #0
   226ac:	bne	22730 <__assert_fail@plt+0x111d8>
   226b0:	mvn	r3, #-2147483648	; 0x80000000
   226b4:	sub	r3, r3, r4
   226b8:	cmp	r5, r3
   226bc:	movle	r3, #0
   226c0:	movgt	r3, #1
   226c4:	cmp	r3, #0
   226c8:	mvnne	r4, #1
   226cc:	bne	22790 <__assert_fail@plt+0x11238>
   226d0:	add	fp, r5, r4
   226d4:	cmp	r4, #0
   226d8:	ble	22744 <__assert_fail@plt+0x111ec>
   226dc:	cmp	r5, #0
   226e0:	ble	22750 <__assert_fail@plt+0x111f8>
   226e4:	mov	r0, fp
   226e8:	bl	244c8 <__assert_fail@plt+0x12f70>
   226ec:	subs	sl, r0, #0
   226f0:	beq	227a4 <__assert_fail@plt+0x1124c>
   226f4:	mov	r2, r5
   226f8:	mov	r1, r9
   226fc:	mov	r0, sl
   22700:	bl	11264 <memcpy@plt>
   22704:	mov	r2, r4
   22708:	mov	r1, r7
   2270c:	add	r0, sl, r5
   22710:	bl	11264 <memcpy@plt>
   22714:	mov	r7, sl
   22718:	b	22754 <__assert_fail@plt+0x111fc>
   2271c:	rsb	r3, r4, #-2147483648	; 0x80000000
   22720:	cmp	r5, r3
   22724:	movge	r3, #0
   22728:	movlt	r3, #1
   2272c:	b	226c4 <__assert_fail@plt+0x1116c>
   22730:	rsb	r3, r5, #-2147483648	; 0x80000000
   22734:	cmp	r4, r3
   22738:	movge	r3, #0
   2273c:	movlt	r3, #1
   22740:	b	226c4 <__assert_fail@plt+0x1116c>
   22744:	mov	r7, r9
   22748:	mov	sl, #0
   2274c:	b	22754 <__assert_fail@plt+0x111fc>
   22750:	mov	sl, #0
   22754:	ldrb	r3, [sp, #76]	; 0x4c
   22758:	str	r3, [sp, #12]
   2275c:	ldr	r3, [sp, #68]	; 0x44
   22760:	str	r3, [sp, #8]
   22764:	str	r6, [sp, #4]
   22768:	ldr	r3, [sp, #64]	; 0x40
   2276c:	str	r3, [sp]
   22770:	ldr	r3, [sp, #60]	; 0x3c
   22774:	mov	r2, fp
   22778:	mov	r1, r7
   2277c:	mov	r0, r8
   22780:	bl	222d0 <__assert_fail@plt+0x10d78>
   22784:	mov	r4, r0
   22788:	mov	r0, sl
   2278c:	bl	13b40 <__assert_fail@plt+0x25e8>
   22790:	mov	r0, r4
   22794:	add	sp, sp, #20
   22798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2279c:	mvn	r4, #1
   227a0:	b	22790 <__assert_fail@plt+0x11238>
   227a4:	mvn	r4, #1
   227a8:	b	22790 <__assert_fail@plt+0x11238>
   227ac:	push	{r4, r5, r6, r7, r8, lr}
   227b0:	mov	r4, r0
   227b4:	mov	r7, r1
   227b8:	mov	r5, r2
   227bc:	and	r2, r2, #1
   227c0:	ldr	r3, [pc, #228]	; 228ac <__assert_fail@plt+0x11354>
   227c4:	ldr	r6, [pc, #228]	; 228b0 <__assert_fail@plt+0x11358>
   227c8:	cmp	r2, #0
   227cc:	moveq	r6, r3
   227d0:	mov	r3, #0
   227d4:	str	r3, [r0]
   227d8:	str	r3, [r0, #4]
   227dc:	str	r3, [r0, #8]
   227e0:	mov	r0, #256	; 0x100
   227e4:	bl	244c8 <__assert_fail@plt+0x12f70>
   227e8:	str	r0, [r4, #16]
   227ec:	cmp	r0, #0
   227f0:	beq	228a4 <__assert_fail@plt+0x1134c>
   227f4:	and	r3, r5, #2
   227f8:	cmp	r3, #0
   227fc:	movne	r3, #4194304	; 0x400000
   22800:	moveq	r3, #0
   22804:	orr	r6, r6, r3
   22808:	tst	r5, #4
   2280c:	bicne	r6, r6, #64	; 0x40
   22810:	orrne	r6, r6, #256	; 0x100
   22814:	ldrbne	r3, [r4, #28]
   22818:	orrne	r3, r3, #128	; 0x80
   2281c:	ldrbeq	r3, [r4, #28]
   22820:	biceq	r3, r3, #128	; 0x80
   22824:	strb	r3, [r4, #28]
   22828:	lsl	r5, r5, #1
   2282c:	ldrb	r3, [r4, #28]
   22830:	bic	r3, r3, #16
   22834:	and	r5, r5, #16
   22838:	orr	r5, r5, r3
   2283c:	strb	r5, [r4, #28]
   22840:	mov	r3, #0
   22844:	str	r3, [r4, #20]
   22848:	mov	r0, r7
   2284c:	bl	11414 <strlen@plt>
   22850:	mov	r3, r6
   22854:	mov	r2, r0
   22858:	mov	r1, r7
   2285c:	mov	r0, r4
   22860:	bl	21530 <__assert_fail@plt+0xffd8>
   22864:	mov	r5, r0
   22868:	cmp	r0, #16
   2286c:	beq	22888 <__assert_fail@plt+0x11330>
   22870:	cmp	r0, #0
   22874:	bne	2288c <__assert_fail@plt+0x11334>
   22878:	mov	r0, r4
   2287c:	bl	22238 <__assert_fail@plt+0x10ce0>
   22880:	mov	r0, #0
   22884:	pop	{r4, r5, r6, r7, r8, pc}
   22888:	mov	r5, #8
   2288c:	ldr	r0, [r4, #16]
   22890:	bl	13b40 <__assert_fail@plt+0x25e8>
   22894:	mov	r3, #0
   22898:	str	r3, [r4, #16]
   2289c:	mov	r0, r5
   228a0:	pop	{r4, r5, r6, r7, r8, pc}
   228a4:	mov	r0, #12
   228a8:	pop	{r4, r5, r6, r7, r8, pc}
   228ac:	smlabteq	r1, r6, r2, r0
   228b0:	strdeq	fp, [r3], -ip
   228b4:	push	{r4, r5, r6, r7, r8, lr}
   228b8:	cmp	r0, #16
   228bc:	bhi	22924 <__assert_fail@plt+0x113cc>
   228c0:	mov	r6, r2
   228c4:	mov	r4, r3
   228c8:	ldr	r3, [pc, #88]	; 22928 <__assert_fail@plt+0x113d0>
   228cc:	add	r1, r3, #32
   228d0:	add	r3, r3, r0, lsl #2
   228d4:	ldr	r3, [r3, #416]	; 0x1a0
   228d8:	mov	r2, #5
   228dc:	add	r1, r1, r3
   228e0:	mov	r0, #0
   228e4:	bl	112d0 <dcgettext@plt>
   228e8:	mov	r7, r0
   228ec:	bl	11414 <strlen@plt>
   228f0:	add	r5, r0, #1
   228f4:	cmp	r4, #0
   228f8:	beq	2291c <__assert_fail@plt+0x113c4>
   228fc:	cmp	r5, r4
   22900:	subhi	r2, r4, #1
   22904:	movhi	r3, #0
   22908:	strbhi	r3, [r6, r2]
   2290c:	movls	r2, r5
   22910:	mov	r1, r7
   22914:	mov	r0, r6
   22918:	bl	11264 <memcpy@plt>
   2291c:	mov	r0, r5
   22920:	pop	{r4, r5, r6, r7, r8, pc}
   22924:	bl	11534 <abort@plt>
   22928:	andeq	r5, r2, ip, asr #30
   2292c:	push	{r4, r5, r6, lr}
   22930:	mov	r4, r0
   22934:	ldr	r5, [r0]
   22938:	cmp	r5, #0
   2293c:	beq	2297c <__assert_fail@plt+0x11424>
   22940:	mov	r3, #1
   22944:	ldr	r2, [pc, #88]	; 229a4 <__assert_fail@plt+0x1144c>
   22948:	cmp	r2, #0
   2294c:	moveq	r3, #0
   22950:	mov	r2, #1
   22954:	ldr	r1, [pc, #76]	; 229a8 <__assert_fail@plt+0x11450>
   22958:	cmp	r1, #0
   2295c:	moveq	r2, #0
   22960:	orr	r3, r3, r2
   22964:	tst	r3, #255	; 0xff
   22968:	beq	22974 <__assert_fail@plt+0x1141c>
   2296c:	add	r0, r5, #136	; 0x88
   22970:	bl	11210 <pthread_mutex_destroy@plt>
   22974:	mov	r0, r5
   22978:	bl	1892c <__assert_fail@plt+0x73d4>
   2297c:	mov	r5, #0
   22980:	str	r5, [r4]
   22984:	str	r5, [r4, #4]
   22988:	ldr	r0, [r4, #16]
   2298c:	bl	13b40 <__assert_fail@plt+0x25e8>
   22990:	str	r5, [r4, #16]
   22994:	ldr	r0, [r4, #20]
   22998:	bl	13b40 <__assert_fail@plt+0x25e8>
   2299c:	str	r5, [r4, #20]
   229a0:	pop	{r4, r5, r6, pc}
	...
   229ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229b0:	sub	sp, sp, #36	; 0x24
   229b4:	ldr	r4, [sp, #72]	; 0x48
   229b8:	bics	ip, r4, #7
   229bc:	movne	r0, #2
   229c0:	beq	229cc <__assert_fail@plt+0x11474>
   229c4:	add	sp, sp, #36	; 0x24
   229c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229cc:	mov	r7, r3
   229d0:	mov	r8, r2
   229d4:	str	r1, [sp, #28]
   229d8:	mov	r5, r0
   229dc:	ands	fp, r4, #4
   229e0:	beq	22a80 <__assert_fail@plt+0x11528>
   229e4:	ldr	fp, [r3]
   229e8:	ldr	r9, [r3, #4]
   229ec:	ldr	sl, [r5]
   229f0:	mov	r6, #1
   229f4:	ldr	r3, [pc, #148]	; 22a90 <__assert_fail@plt+0x11538>
   229f8:	cmp	r3, #0
   229fc:	moveq	r6, #0
   22a00:	mov	r3, #1
   22a04:	ldr	r2, [pc, #136]	; 22a94 <__assert_fail@plt+0x1153c>
   22a08:	cmp	r2, #0
   22a0c:	moveq	r3, #0
   22a10:	orr	r6, r6, r3
   22a14:	ands	r6, r6, #255	; 0xff
   22a18:	beq	22a24 <__assert_fail@plt+0x114cc>
   22a1c:	add	r0, sl, #136	; 0x88
   22a20:	bl	1124c <pthread_mutex_lock@plt>
   22a24:	ldrb	r3, [r5, #28]
   22a28:	tst	r3, #16
   22a2c:	str	r4, [sp, #16]
   22a30:	movne	r3, #0
   22a34:	strne	r3, [sp, #12]
   22a38:	strne	r3, [sp, #8]
   22a3c:	streq	r7, [sp, #12]
   22a40:	streq	r8, [sp, #8]
   22a44:	str	r9, [sp, #4]
   22a48:	str	r9, [sp]
   22a4c:	mov	r3, fp
   22a50:	mov	r2, r9
   22a54:	ldr	r1, [sp, #28]
   22a58:	mov	r0, r5
   22a5c:	bl	1e4e4 <__assert_fail@plt+0xcf8c>
   22a60:	mov	r4, r0
   22a64:	cmp	r6, #0
   22a68:	beq	22a74 <__assert_fail@plt+0x1151c>
   22a6c:	add	r0, sl, #136	; 0x88
   22a70:	bl	11198 <pthread_mutex_unlock@plt>
   22a74:	adds	r0, r4, #0
   22a78:	movne	r0, #1
   22a7c:	b	229c4 <__assert_fail@plt+0x1146c>
   22a80:	ldr	r0, [sp, #28]
   22a84:	bl	11414 <strlen@plt>
   22a88:	mov	r9, r0
   22a8c:	b	229ec <__assert_fail@plt+0x11494>
	...
   22a98:	push	{lr}		; (str lr, [sp, #-4]!)
   22a9c:	sub	sp, sp, #20
   22aa0:	mov	ip, #1
   22aa4:	str	ip, [sp, #12]
   22aa8:	ldr	ip, [sp, #24]
   22aac:	str	ip, [sp, #8]
   22ab0:	str	r2, [sp, #4]
   22ab4:	mov	ip, #0
   22ab8:	str	ip, [sp]
   22abc:	bl	222d0 <__assert_fail@plt+0x10d78>
   22ac0:	add	sp, sp, #20
   22ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   22ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   22acc:	sub	sp, sp, #20
   22ad0:	mov	ip, #0
   22ad4:	str	ip, [sp, #12]
   22ad8:	ldr	ip, [sp, #28]
   22adc:	str	ip, [sp, #8]
   22ae0:	str	r2, [sp, #4]
   22ae4:	ldr	ip, [sp, #24]
   22ae8:	str	ip, [sp]
   22aec:	bl	222d0 <__assert_fail@plt+0x10d78>
   22af0:	add	sp, sp, #20
   22af4:	pop	{pc}		; (ldr pc, [sp], #4)
   22af8:	push	{lr}		; (str lr, [sp, #-4]!)
   22afc:	sub	sp, sp, #28
   22b00:	mov	ip, #1
   22b04:	str	ip, [sp, #20]
   22b08:	ldr	ip, [sp, #44]	; 0x2c
   22b0c:	str	ip, [sp, #16]
   22b10:	ldr	ip, [sp, #40]	; 0x28
   22b14:	str	ip, [sp, #12]
   22b18:	mov	ip, #0
   22b1c:	str	ip, [sp, #8]
   22b20:	ldr	ip, [sp, #36]	; 0x24
   22b24:	str	ip, [sp, #4]
   22b28:	ldr	ip, [sp, #32]
   22b2c:	str	ip, [sp]
   22b30:	bl	22670 <__assert_fail@plt+0x11118>
   22b34:	add	sp, sp, #28
   22b38:	pop	{pc}		; (ldr pc, [sp], #4)
   22b3c:	push	{lr}		; (str lr, [sp, #-4]!)
   22b40:	sub	sp, sp, #28
   22b44:	mov	ip, #0
   22b48:	str	ip, [sp, #20]
   22b4c:	ldr	ip, [sp, #48]	; 0x30
   22b50:	str	ip, [sp, #16]
   22b54:	ldr	ip, [sp, #44]	; 0x2c
   22b58:	str	ip, [sp, #12]
   22b5c:	ldr	ip, [sp, #40]	; 0x28
   22b60:	str	ip, [sp, #8]
   22b64:	ldr	ip, [sp, #36]	; 0x24
   22b68:	str	ip, [sp, #4]
   22b6c:	ldr	ip, [sp, #32]
   22b70:	str	ip, [sp]
   22b74:	bl	22670 <__assert_fail@plt+0x11118>
   22b78:	add	sp, sp, #28
   22b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   22b80:	cmp	r2, #0
   22b84:	bne	22ba8 <__assert_fail@plt+0x11650>
   22b88:	ldrb	r3, [r0, #28]
   22b8c:	bic	r3, r3, #6
   22b90:	strb	r3, [r0, #28]
   22b94:	mov	r3, #0
   22b98:	str	r3, [r1]
   22b9c:	str	r3, [r1, #8]
   22ba0:	str	r3, [r1, #4]
   22ba4:	bx	lr
   22ba8:	ldrb	ip, [r0, #28]
   22bac:	bic	ip, ip, #4
   22bb0:	orr	ip, ip, #2
   22bb4:	strb	ip, [r0, #28]
   22bb8:	str	r2, [r1]
   22bbc:	str	r3, [r1, #4]
   22bc0:	ldr	r3, [sp]
   22bc4:	str	r3, [r1, #8]
   22bc8:	bx	lr
   22bcc:	push	{r4, r5, r6, r7, r8, lr}
   22bd0:	mov	r8, r0
   22bd4:	mov	r7, r1
   22bd8:	mov	r4, r2
   22bdc:	ldr	r5, [pc, #88]	; 22c3c <__assert_fail@plt+0x116e4>
   22be0:	b	22be8 <__assert_fail@plt+0x11690>
   22be4:	mov	r4, r5
   22be8:	mov	r2, r4
   22bec:	mov	r1, r7
   22bf0:	mov	r0, r8
   22bf4:	bl	11204 <read@plt>
   22bf8:	subs	r6, r0, #0
   22bfc:	bge	22c34 <__assert_fail@plt+0x116dc>
   22c00:	bl	1142c <__errno_location@plt>
   22c04:	ldr	r3, [r0]
   22c08:	cmp	r3, #4
   22c0c:	beq	22be8 <__assert_fail@plt+0x11690>
   22c10:	cmp	r4, r5
   22c14:	movls	r4, #0
   22c18:	movhi	r4, #1
   22c1c:	cmp	r3, #22
   22c20:	movne	r4, #0
   22c24:	cmp	r4, #0
   22c28:	bne	22be4 <__assert_fail@plt+0x1168c>
   22c2c:	mov	r0, r6
   22c30:	pop	{r4, r5, r6, r7, r8, pc}
   22c34:	mov	r0, r6
   22c38:	pop	{r4, r5, r6, r7, r8, pc}
   22c3c:	svcvc	0x00f00000	; IMB
   22c40:	push	{r4, lr}
   22c44:	mov	r2, #3
   22c48:	mov	r1, #0
   22c4c:	bl	2468c <__assert_fail@plt+0x13134>
   22c50:	pop	{r4, pc}
   22c54:	push	{r4, r5, r6, lr}
   22c58:	sub	sp, sp, #32
   22c5c:	mov	r4, r0
   22c60:	ldr	r5, [sp, #48]	; 0x30
   22c64:	ldr	r6, [sp, #52]	; 0x34
   22c68:	cmp	r1, #0
   22c6c:	beq	22d24 <__assert_fail@plt+0x117cc>
   22c70:	str	r3, [sp, #4]
   22c74:	str	r2, [sp]
   22c78:	mov	r3, r1
   22c7c:	ldr	r2, [pc, #940]	; 23030 <__assert_fail@plt+0x11ad8>
   22c80:	mov	r1, #1
   22c84:	bl	1148c <__fprintf_chk@plt>
   22c88:	mov	r2, #5
   22c8c:	ldr	r1, [pc, #928]	; 23034 <__assert_fail@plt+0x11adc>
   22c90:	mov	r0, #0
   22c94:	bl	112d0 <dcgettext@plt>
   22c98:	ldr	r3, [pc, #920]	; 23038 <__assert_fail@plt+0x11ae0>
   22c9c:	str	r3, [sp]
   22ca0:	mov	r3, r0
   22ca4:	ldr	r2, [pc, #912]	; 2303c <__assert_fail@plt+0x11ae4>
   22ca8:	mov	r1, #1
   22cac:	mov	r0, r4
   22cb0:	bl	1148c <__fprintf_chk@plt>
   22cb4:	mov	r1, r4
   22cb8:	mov	r0, #10
   22cbc:	bl	112c4 <fputc_unlocked@plt>
   22cc0:	mov	r2, #5
   22cc4:	ldr	r1, [pc, #884]	; 23040 <__assert_fail@plt+0x11ae8>
   22cc8:	mov	r0, #0
   22ccc:	bl	112d0 <dcgettext@plt>
   22cd0:	ldr	r3, [pc, #876]	; 23044 <__assert_fail@plt+0x11aec>
   22cd4:	mov	r2, r0
   22cd8:	mov	r1, #1
   22cdc:	mov	r0, r4
   22ce0:	bl	1148c <__fprintf_chk@plt>
   22ce4:	mov	r1, r4
   22ce8:	mov	r0, #10
   22cec:	bl	112c4 <fputc_unlocked@plt>
   22cf0:	cmp	r6, #9
   22cf4:	ldrls	pc, [pc, r6, lsl #2]
   22cf8:	b	22fc8 <__assert_fail@plt+0x11a70>
   22cfc:	andeq	r2, r2, r0, ror #26
   22d00:	andeq	r2, r2, ip, lsr sp
   22d04:	andeq	r2, r2, r8, ror #26
   22d08:	muleq	r2, r8, sp
   22d0c:	ldrdeq	r2, [r2], -r0
   22d10:	andeq	r2, r2, r0, lsl lr
   22d14:	andeq	r2, r2, r8, asr lr
   22d18:	andeq	r2, r2, r8, lsr #29
   22d1c:	andeq	r2, r2, r0, lsl #30
   22d20:	andeq	r2, r2, r0, ror #30
   22d24:	str	r3, [sp]
   22d28:	mov	r3, r2
   22d2c:	ldr	r2, [pc, #788]	; 23048 <__assert_fail@plt+0x11af0>
   22d30:	mov	r1, #1
   22d34:	bl	1148c <__fprintf_chk@plt>
   22d38:	b	22c88 <__assert_fail@plt+0x11730>
   22d3c:	mov	r2, #5
   22d40:	ldr	r1, [pc, #772]	; 2304c <__assert_fail@plt+0x11af4>
   22d44:	mov	r0, #0
   22d48:	bl	112d0 <dcgettext@plt>
   22d4c:	ldr	r3, [r5]
   22d50:	mov	r2, r0
   22d54:	mov	r1, #1
   22d58:	mov	r0, r4
   22d5c:	bl	1148c <__fprintf_chk@plt>
   22d60:	add	sp, sp, #32
   22d64:	pop	{r4, r5, r6, pc}
   22d68:	mov	r2, #5
   22d6c:	ldr	r1, [pc, #732]	; 23050 <__assert_fail@plt+0x11af8>
   22d70:	mov	r0, #0
   22d74:	bl	112d0 <dcgettext@plt>
   22d78:	ldr	r3, [r5]
   22d7c:	ldr	r2, [r5, #4]
   22d80:	str	r2, [sp]
   22d84:	mov	r2, r0
   22d88:	mov	r1, #1
   22d8c:	mov	r0, r4
   22d90:	bl	1148c <__fprintf_chk@plt>
   22d94:	b	22d60 <__assert_fail@plt+0x11808>
   22d98:	mov	r2, #5
   22d9c:	ldr	r1, [pc, #688]	; 23054 <__assert_fail@plt+0x11afc>
   22da0:	mov	r0, #0
   22da4:	bl	112d0 <dcgettext@plt>
   22da8:	ldr	r3, [r5]
   22dac:	ldr	r2, [r5, #8]
   22db0:	str	r2, [sp, #4]
   22db4:	ldr	r2, [r5, #4]
   22db8:	str	r2, [sp]
   22dbc:	mov	r2, r0
   22dc0:	mov	r1, #1
   22dc4:	mov	r0, r4
   22dc8:	bl	1148c <__fprintf_chk@plt>
   22dcc:	b	22d60 <__assert_fail@plt+0x11808>
   22dd0:	mov	r2, #5
   22dd4:	ldr	r1, [pc, #636]	; 23058 <__assert_fail@plt+0x11b00>
   22dd8:	mov	r0, #0
   22ddc:	bl	112d0 <dcgettext@plt>
   22de0:	ldr	r3, [r5]
   22de4:	ldr	r2, [r5, #12]
   22de8:	str	r2, [sp, #8]
   22dec:	ldr	r2, [r5, #8]
   22df0:	str	r2, [sp, #4]
   22df4:	ldr	r2, [r5, #4]
   22df8:	str	r2, [sp]
   22dfc:	mov	r2, r0
   22e00:	mov	r1, #1
   22e04:	mov	r0, r4
   22e08:	bl	1148c <__fprintf_chk@plt>
   22e0c:	b	22d60 <__assert_fail@plt+0x11808>
   22e10:	mov	r2, #5
   22e14:	ldr	r1, [pc, #576]	; 2305c <__assert_fail@plt+0x11b04>
   22e18:	mov	r0, #0
   22e1c:	bl	112d0 <dcgettext@plt>
   22e20:	ldr	r3, [r5]
   22e24:	ldr	r2, [r5, #16]
   22e28:	str	r2, [sp, #12]
   22e2c:	ldr	r2, [r5, #12]
   22e30:	str	r2, [sp, #8]
   22e34:	ldr	r2, [r5, #8]
   22e38:	str	r2, [sp, #4]
   22e3c:	ldr	r2, [r5, #4]
   22e40:	str	r2, [sp]
   22e44:	mov	r2, r0
   22e48:	mov	r1, #1
   22e4c:	mov	r0, r4
   22e50:	bl	1148c <__fprintf_chk@plt>
   22e54:	b	22d60 <__assert_fail@plt+0x11808>
   22e58:	mov	r2, #5
   22e5c:	ldr	r1, [pc, #508]	; 23060 <__assert_fail@plt+0x11b08>
   22e60:	mov	r0, #0
   22e64:	bl	112d0 <dcgettext@plt>
   22e68:	ldr	r3, [r5]
   22e6c:	ldr	r2, [r5, #20]
   22e70:	str	r2, [sp, #16]
   22e74:	ldr	r2, [r5, #16]
   22e78:	str	r2, [sp, #12]
   22e7c:	ldr	r2, [r5, #12]
   22e80:	str	r2, [sp, #8]
   22e84:	ldr	r2, [r5, #8]
   22e88:	str	r2, [sp, #4]
   22e8c:	ldr	r2, [r5, #4]
   22e90:	str	r2, [sp]
   22e94:	mov	r2, r0
   22e98:	mov	r1, #1
   22e9c:	mov	r0, r4
   22ea0:	bl	1148c <__fprintf_chk@plt>
   22ea4:	b	22d60 <__assert_fail@plt+0x11808>
   22ea8:	mov	r2, #5
   22eac:	ldr	r1, [pc, #432]	; 23064 <__assert_fail@plt+0x11b0c>
   22eb0:	mov	r0, #0
   22eb4:	bl	112d0 <dcgettext@plt>
   22eb8:	ldr	r3, [r5]
   22ebc:	ldr	r2, [r5, #24]
   22ec0:	str	r2, [sp, #20]
   22ec4:	ldr	r2, [r5, #20]
   22ec8:	str	r2, [sp, #16]
   22ecc:	ldr	r2, [r5, #16]
   22ed0:	str	r2, [sp, #12]
   22ed4:	ldr	r2, [r5, #12]
   22ed8:	str	r2, [sp, #8]
   22edc:	ldr	r2, [r5, #8]
   22ee0:	str	r2, [sp, #4]
   22ee4:	ldr	r2, [r5, #4]
   22ee8:	str	r2, [sp]
   22eec:	mov	r2, r0
   22ef0:	mov	r1, #1
   22ef4:	mov	r0, r4
   22ef8:	bl	1148c <__fprintf_chk@plt>
   22efc:	b	22d60 <__assert_fail@plt+0x11808>
   22f00:	mov	r2, #5
   22f04:	ldr	r1, [pc, #348]	; 23068 <__assert_fail@plt+0x11b10>
   22f08:	mov	r0, #0
   22f0c:	bl	112d0 <dcgettext@plt>
   22f10:	ldr	r3, [r5]
   22f14:	ldr	r2, [r5, #28]
   22f18:	str	r2, [sp, #24]
   22f1c:	ldr	r2, [r5, #24]
   22f20:	str	r2, [sp, #20]
   22f24:	ldr	r2, [r5, #20]
   22f28:	str	r2, [sp, #16]
   22f2c:	ldr	r2, [r5, #16]
   22f30:	str	r2, [sp, #12]
   22f34:	ldr	r2, [r5, #12]
   22f38:	str	r2, [sp, #8]
   22f3c:	ldr	r2, [r5, #8]
   22f40:	str	r2, [sp, #4]
   22f44:	ldr	r2, [r5, #4]
   22f48:	str	r2, [sp]
   22f4c:	mov	r2, r0
   22f50:	mov	r1, #1
   22f54:	mov	r0, r4
   22f58:	bl	1148c <__fprintf_chk@plt>
   22f5c:	b	22d60 <__assert_fail@plt+0x11808>
   22f60:	mov	r2, #5
   22f64:	ldr	r1, [pc, #256]	; 2306c <__assert_fail@plt+0x11b14>
   22f68:	mov	r0, #0
   22f6c:	bl	112d0 <dcgettext@plt>
   22f70:	ldr	r3, [r5]
   22f74:	ldr	r2, [r5, #32]
   22f78:	str	r2, [sp, #28]
   22f7c:	ldr	r2, [r5, #28]
   22f80:	str	r2, [sp, #24]
   22f84:	ldr	r2, [r5, #24]
   22f88:	str	r2, [sp, #20]
   22f8c:	ldr	r2, [r5, #20]
   22f90:	str	r2, [sp, #16]
   22f94:	ldr	r2, [r5, #16]
   22f98:	str	r2, [sp, #12]
   22f9c:	ldr	r2, [r5, #12]
   22fa0:	str	r2, [sp, #8]
   22fa4:	ldr	r2, [r5, #8]
   22fa8:	str	r2, [sp, #4]
   22fac:	ldr	r2, [r5, #4]
   22fb0:	str	r2, [sp]
   22fb4:	mov	r2, r0
   22fb8:	mov	r1, #1
   22fbc:	mov	r0, r4
   22fc0:	bl	1148c <__fprintf_chk@plt>
   22fc4:	b	22d60 <__assert_fail@plt+0x11808>
   22fc8:	mov	r2, #5
   22fcc:	ldr	r1, [pc, #156]	; 23070 <__assert_fail@plt+0x11b18>
   22fd0:	mov	r0, #0
   22fd4:	bl	112d0 <dcgettext@plt>
   22fd8:	ldr	r3, [r5]
   22fdc:	ldr	r2, [r5, #32]
   22fe0:	str	r2, [sp, #28]
   22fe4:	ldr	r2, [r5, #28]
   22fe8:	str	r2, [sp, #24]
   22fec:	ldr	r2, [r5, #24]
   22ff0:	str	r2, [sp, #20]
   22ff4:	ldr	r2, [r5, #20]
   22ff8:	str	r2, [sp, #16]
   22ffc:	ldr	r2, [r5, #16]
   23000:	str	r2, [sp, #12]
   23004:	ldr	r2, [r5, #12]
   23008:	str	r2, [sp, #8]
   2300c:	ldr	r2, [r5, #8]
   23010:	str	r2, [sp, #4]
   23014:	ldr	r2, [r5, #4]
   23018:	str	r2, [sp]
   2301c:	mov	r2, r0
   23020:	mov	r1, #1
   23024:	mov	r0, r4
   23028:	bl	1148c <__fprintf_chk@plt>
   2302c:	b	22d60 <__assert_fail@plt+0x11808>
   23030:	muleq	r2, r8, r1
   23034:	andeq	r6, r2, ip, lsr #3
   23038:	andeq	r0, r0, r6, ror #15
   2303c:	andeq	r6, r2, r4, lsl #9
   23040:			; <UNDEFINED> instruction: 0x000261b0
   23044:	andeq	r6, r2, ip, asr r2
   23048:	andeq	r6, r2, r4, lsr #3
   2304c:	andeq	r6, r2, r0, lsl #5
   23050:	muleq	r2, r0, r2
   23054:	andeq	r6, r2, r8, lsr #5
   23058:	andeq	r6, r2, r4, asr #5
   2305c:	andeq	r6, r2, r4, ror #5
   23060:	andeq	r6, r2, r8, lsl #6
   23064:	andeq	r6, r2, r0, lsr r3
   23068:	andeq	r6, r2, ip, asr r3
   2306c:	andeq	r6, r2, ip, lsl #7
   23070:	andeq	r6, r2, r0, asr #7
   23074:	push	{r4, r5, lr}
   23078:	sub	sp, sp, #12
   2307c:	ldr	r5, [sp, #24]
   23080:	ldr	ip, [r5]
   23084:	cmp	ip, #0
   23088:	beq	230b8 <__assert_fail@plt+0x11b60>
   2308c:	mov	lr, r5
   23090:	mov	ip, #0
   23094:	add	ip, ip, #1
   23098:	ldr	r4, [lr, #4]!
   2309c:	cmp	r4, #0
   230a0:	bne	23094 <__assert_fail@plt+0x11b3c>
   230a4:	str	ip, [sp, #4]
   230a8:	str	r5, [sp]
   230ac:	bl	22c54 <__assert_fail@plt+0x116fc>
   230b0:	add	sp, sp, #12
   230b4:	pop	{r4, r5, pc}
   230b8:	mov	ip, #0
   230bc:	b	230a4 <__assert_fail@plt+0x11b4c>
   230c0:	push	{r4, r5, lr}
   230c4:	sub	sp, sp, #52	; 0x34
   230c8:	ldr	r4, [sp, #64]	; 0x40
   230cc:	sub	r4, r4, #4
   230d0:	add	r5, sp, #4
   230d4:	mov	ip, #0
   230d8:	ldr	lr, [r4, #4]!
   230dc:	str	lr, [r5, #4]!
   230e0:	cmp	lr, #0
   230e4:	beq	230f4 <__assert_fail@plt+0x11b9c>
   230e8:	add	ip, ip, #1
   230ec:	cmp	ip, #10
   230f0:	bne	230d8 <__assert_fail@plt+0x11b80>
   230f4:	str	ip, [sp, #4]
   230f8:	add	ip, sp, #8
   230fc:	str	ip, [sp]
   23100:	bl	22c54 <__assert_fail@plt+0x116fc>
   23104:	add	sp, sp, #52	; 0x34
   23108:	pop	{r4, r5, pc}
   2310c:	push	{r3}		; (str r3, [sp, #-4]!)
   23110:	push	{lr}		; (str lr, [sp, #-4]!)
   23114:	sub	sp, sp, #16
   23118:	add	r3, sp, #24
   2311c:	str	r3, [sp, #12]
   23120:	str	r3, [sp]
   23124:	ldr	r3, [sp, #20]
   23128:	bl	230c0 <__assert_fail@plt+0x11b68>
   2312c:	add	sp, sp, #16
   23130:	pop	{lr}		; (ldr lr, [sp], #4)
   23134:	add	sp, sp, #4
   23138:	bx	lr
   2313c:	push	{r4, lr}
   23140:	ldr	r3, [pc, #112]	; 231b8 <__assert_fail@plt+0x11c60>
   23144:	ldr	r1, [r3]
   23148:	mov	r0, #10
   2314c:	bl	112c4 <fputc_unlocked@plt>
   23150:	mov	r2, #5
   23154:	ldr	r1, [pc, #96]	; 231bc <__assert_fail@plt+0x11c64>
   23158:	mov	r0, #0
   2315c:	bl	112d0 <dcgettext@plt>
   23160:	ldr	r2, [pc, #88]	; 231c0 <__assert_fail@plt+0x11c68>
   23164:	mov	r1, r0
   23168:	mov	r0, #1
   2316c:	bl	11474 <__printf_chk@plt>
   23170:	mov	r2, #5
   23174:	ldr	r1, [pc, #72]	; 231c4 <__assert_fail@plt+0x11c6c>
   23178:	mov	r0, #0
   2317c:	bl	112d0 <dcgettext@plt>
   23180:	ldr	r3, [pc, #64]	; 231c8 <__assert_fail@plt+0x11c70>
   23184:	ldr	r2, [pc, #64]	; 231cc <__assert_fail@plt+0x11c74>
   23188:	mov	r1, r0
   2318c:	mov	r0, #1
   23190:	bl	11474 <__printf_chk@plt>
   23194:	mov	r2, #5
   23198:	ldr	r1, [pc, #48]	; 231d0 <__assert_fail@plt+0x11c78>
   2319c:	mov	r0, #0
   231a0:	bl	112d0 <dcgettext@plt>
   231a4:	ldr	r2, [pc, #40]	; 231d4 <__assert_fail@plt+0x11c7c>
   231a8:	mov	r1, r0
   231ac:	mov	r0, #1
   231b0:	bl	11474 <__printf_chk@plt>
   231b4:	pop	{r4, pc}
   231b8:			; <UNDEFINED> instruction: 0x000371bc
   231bc:	strdeq	r6, [r2], -ip
   231c0:	andeq	r6, r2, r0, lsl r4
   231c4:	andeq	r6, r2, r8, lsr #8
   231c8:	andeq	r5, r2, r8, lsl #18
   231cc:	andeq	r5, r2, r0, lsr r9
   231d0:	andeq	r6, r2, ip, lsr r4
   231d4:	andeq	r6, r2, r4, ror #8
   231d8:	push	{r4, lr}
   231dc:	bl	244c8 <__assert_fail@plt+0x12f70>
   231e0:	cmp	r0, #0
   231e4:	popne	{r4, pc}
   231e8:	bl	11d98 <__assert_fail@plt+0x840>
   231ec:	push	{r4, lr}
   231f0:	bl	244c8 <__assert_fail@plt+0x12f70>
   231f4:	cmp	r0, #0
   231f8:	popne	{r4, pc}
   231fc:	bl	11d98 <__assert_fail@plt+0x840>
   23200:	push	{r4, lr}
   23204:	bl	231d8 <__assert_fail@plt+0x11c80>
   23208:	pop	{r4, pc}
   2320c:	push	{r4, r5, r6, lr}
   23210:	mov	r5, r0
   23214:	mov	r4, r1
   23218:	bl	244f8 <__assert_fail@plt+0x12fa0>
   2321c:	cmp	r0, #0
   23220:	popne	{r4, r5, r6, pc}
   23224:	adds	r4, r4, #0
   23228:	movne	r4, #1
   2322c:	cmp	r5, #0
   23230:	orreq	r4, r4, #1
   23234:	cmp	r4, #0
   23238:	popeq	{r4, r5, r6, pc}
   2323c:	bl	11d98 <__assert_fail@plt+0x840>
   23240:	push	{r4, lr}
   23244:	cmp	r1, #0
   23248:	orreq	r1, r1, #1
   2324c:	bl	244f8 <__assert_fail@plt+0x12fa0>
   23250:	cmp	r0, #0
   23254:	popne	{r4, pc}
   23258:	bl	11d98 <__assert_fail@plt+0x840>
   2325c:	push	{r4, r5, r6, lr}
   23260:	mov	r6, r0
   23264:	mov	r5, r1
   23268:	mov	r4, r2
   2326c:	bl	24970 <__assert_fail@plt+0x13418>
   23270:	cmp	r0, #0
   23274:	popne	{r4, r5, r6, pc}
   23278:	cmp	r6, #0
   2327c:	beq	2328c <__assert_fail@plt+0x11d34>
   23280:	cmp	r5, #0
   23284:	cmpne	r4, #0
   23288:	popeq	{r4, r5, r6, pc}
   2328c:	bl	11d98 <__assert_fail@plt+0x840>
   23290:	push	{r4, lr}
   23294:	bl	2325c <__assert_fail@plt+0x11d04>
   23298:	pop	{r4, pc}
   2329c:	push	{r4, lr}
   232a0:	mov	ip, r1
   232a4:	mov	r3, r2
   232a8:	cmp	r2, #0
   232ac:	cmpne	r1, #0
   232b0:	moveq	r3, #1
   232b4:	moveq	ip, r3
   232b8:	mov	r2, r3
   232bc:	mov	r1, ip
   232c0:	bl	24970 <__assert_fail@plt+0x13418>
   232c4:	cmp	r0, #0
   232c8:	popne	{r4, pc}
   232cc:	bl	11d98 <__assert_fail@plt+0x840>
   232d0:	push	{r4, lr}
   232d4:	mov	r2, r1
   232d8:	mov	r1, r0
   232dc:	mov	r0, #0
   232e0:	bl	2325c <__assert_fail@plt+0x11d04>
   232e4:	pop	{r4, pc}
   232e8:	push	{r4, lr}
   232ec:	mov	r2, r1
   232f0:	mov	r1, r0
   232f4:	mov	r0, #0
   232f8:	bl	2329c <__assert_fail@plt+0x11d44>
   232fc:	pop	{r4, pc}
   23300:	push	{r4, r5, r6, r7, r8, lr}
   23304:	mov	r5, r1
   23308:	mov	r6, r2
   2330c:	ldr	r4, [r1]
   23310:	subs	r7, r0, #0
   23314:	beq	23330 <__assert_fail@plt+0x11dd8>
   23318:	lsr	r2, r4, #1
   2331c:	add	r3, r2, #1
   23320:	mvn	r3, r3
   23324:	cmp	r4, r3
   23328:	bls	23354 <__assert_fail@plt+0x11dfc>
   2332c:	bl	11d98 <__assert_fail@plt+0x840>
   23330:	cmp	r4, #0
   23334:	bne	2335c <__assert_fail@plt+0x11e04>
   23338:	mov	r1, r2
   2333c:	mov	r0, #64	; 0x40
   23340:	bl	24ac4 <__assert_fail@plt+0x1356c>
   23344:	cmp	r0, #0
   23348:	movne	r4, r0
   2334c:	addeq	r4, r0, #1
   23350:	b	2335c <__assert_fail@plt+0x11e04>
   23354:	add	r4, r4, #1
   23358:	add	r4, r4, r2
   2335c:	mov	r2, r6
   23360:	mov	r1, r4
   23364:	mov	r0, r7
   23368:	bl	2325c <__assert_fail@plt+0x11d04>
   2336c:	str	r4, [r5]
   23370:	pop	{r4, r5, r6, r7, r8, pc}
   23374:	push	{r4, lr}
   23378:	mov	r2, #1
   2337c:	bl	23300 <__assert_fail@plt+0x11da8>
   23380:	pop	{r4, pc}
   23384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23388:	sub	sp, sp, #12
   2338c:	mov	fp, r0
   23390:	mov	sl, r1
   23394:	mov	r9, r2
   23398:	mov	r7, r3
   2339c:	ldr	r6, [sp, #48]	; 0x30
   233a0:	ldr	r5, [r1]
   233a4:	asrs	r4, r5, #1
   233a8:	bmi	23504 <__assert_fail@plt+0x11fac>
   233ac:	cmp	r5, #0
   233b0:	blt	23518 <__assert_fail@plt+0x11fc0>
   233b4:	mvn	r3, #-2147483648	; 0x80000000
   233b8:	sub	r3, r3, r4
   233bc:	cmp	r5, r3
   233c0:	movle	r3, #0
   233c4:	movgt	r3, #1
   233c8:	cmp	r3, #0
   233cc:	addeq	r4, r4, r5
   233d0:	mvnne	r4, #-2147483648	; 0x80000000
   233d4:	mvn	r8, r7
   233d8:	lsr	r8, r8, #31
   233dc:	cmp	r7, r4
   233e0:	movge	r3, #0
   233e4:	andlt	r3, r8, #1
   233e8:	cmp	r3, #0
   233ec:	movne	r4, r7
   233f0:	cmp	r6, #0
   233f4:	blt	2352c <__assert_fail@plt+0x11fd4>
   233f8:	cmp	r6, #0
   233fc:	beq	235d8 <__assert_fail@plt+0x12080>
   23400:	cmp	r4, #0
   23404:	blt	23588 <__assert_fail@plt+0x12030>
   23408:	mov	r1, r6
   2340c:	mvn	r0, #-2147483648	; 0x80000000
   23410:	bl	24cd0 <__assert_fail@plt+0x13778>
   23414:	cmp	r0, r4
   23418:	movge	r0, #0
   2341c:	movlt	r0, #1
   23420:	cmp	r0, #0
   23424:	mvnne	r3, #-2147483648	; 0x80000000
   23428:	strne	r3, [sp, #4]
   2342c:	beq	235c0 <__assert_fail@plt+0x12068>
   23430:	mov	r1, r6
   23434:	ldr	r0, [sp, #4]
   23438:	bl	24cd0 <__assert_fail@plt+0x13778>
   2343c:	mov	r4, r0
   23440:	mov	r1, r6
   23444:	ldr	r0, [sp, #4]
   23448:	bl	24ef0 <__assert_fail@plt+0x13998>
   2344c:	ldr	r3, [sp, #4]
   23450:	sub	r1, r3, r1
   23454:	cmp	fp, #0
   23458:	moveq	r3, #0
   2345c:	streq	r3, [sl]
   23460:	sub	r3, r4, r5
   23464:	cmp	r3, r9
   23468:	bge	234f0 <__assert_fail@plt+0x11f98>
   2346c:	cmp	r9, #0
   23470:	blt	235e4 <__assert_fail@plt+0x1208c>
   23474:	cmp	r5, #0
   23478:	blt	235f8 <__assert_fail@plt+0x120a0>
   2347c:	mvn	r3, #-2147483648	; 0x80000000
   23480:	sub	r3, r3, r9
   23484:	cmp	r5, r3
   23488:	movle	r3, #0
   2348c:	movgt	r3, #1
   23490:	cmp	r3, #0
   23494:	bne	236a0 <__assert_fail@plt+0x12148>
   23498:	add	r5, r5, r9
   2349c:	mov	r4, r5
   234a0:	cmp	r7, r5
   234a4:	movge	r7, #0
   234a8:	andlt	r7, r8, #1
   234ac:	cmp	r7, #0
   234b0:	bne	236a0 <__assert_fail@plt+0x12148>
   234b4:	cmp	r6, #0
   234b8:	blt	2360c <__assert_fail@plt+0x120b4>
   234bc:	cmp	r6, #0
   234c0:	beq	234ec <__assert_fail@plt+0x11f94>
   234c4:	cmp	r5, #0
   234c8:	blt	23668 <__assert_fail@plt+0x12110>
   234cc:	mov	r1, r6
   234d0:	mvn	r0, #-2147483648	; 0x80000000
   234d4:	bl	24cd0 <__assert_fail@plt+0x13778>
   234d8:	cmp	r5, r0
   234dc:	movle	r0, #0
   234e0:	movgt	r0, #1
   234e4:	cmp	r0, #0
   234e8:	bne	236a0 <__assert_fail@plt+0x12148>
   234ec:	mul	r1, r5, r6
   234f0:	mov	r0, fp
   234f4:	bl	2320c <__assert_fail@plt+0x11cb4>
   234f8:	str	r4, [sl]
   234fc:	add	sp, sp, #12
   23500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23504:	rsb	r3, r4, #-2147483648	; 0x80000000
   23508:	cmp	r5, r3
   2350c:	movge	r3, #0
   23510:	movlt	r3, #1
   23514:	b	233c8 <__assert_fail@plt+0x11e70>
   23518:	rsb	r3, r5, #-2147483648	; 0x80000000
   2351c:	cmp	r4, r3
   23520:	movge	r3, #0
   23524:	movlt	r3, #1
   23528:	b	233c8 <__assert_fail@plt+0x11e70>
   2352c:	cmp	r4, #0
   23530:	blt	23558 <__assert_fail@plt+0x12000>
   23534:	cmn	r6, #1
   23538:	beq	23574 <__assert_fail@plt+0x1201c>
   2353c:	mov	r1, r6
   23540:	mov	r0, #-2147483648	; 0x80000000
   23544:	bl	24cd0 <__assert_fail@plt+0x13778>
   23548:	cmp	r0, r4
   2354c:	movge	r0, #0
   23550:	movlt	r0, #1
   23554:	b	23420 <__assert_fail@plt+0x11ec8>
   23558:	mov	r1, r6
   2355c:	mvn	r0, #-2147483648	; 0x80000000
   23560:	bl	24cd0 <__assert_fail@plt+0x13778>
   23564:	cmp	r0, r4
   23568:	movle	r0, #0
   2356c:	movgt	r0, #1
   23570:	b	23420 <__assert_fail@plt+0x11ec8>
   23574:	add	r0, r4, #-2147483648	; 0x80000000
   23578:	cmp	r0, #0
   2357c:	movle	r0, #0
   23580:	movgt	r0, #1
   23584:	b	23420 <__assert_fail@plt+0x11ec8>
   23588:	cmn	r4, #1
   2358c:	beq	235ac <__assert_fail@plt+0x12054>
   23590:	mov	r1, r4
   23594:	mov	r0, #-2147483648	; 0x80000000
   23598:	bl	24cd0 <__assert_fail@plt+0x13778>
   2359c:	cmp	r6, r0
   235a0:	movle	r0, #0
   235a4:	movgt	r0, #1
   235a8:	b	23420 <__assert_fail@plt+0x11ec8>
   235ac:	add	r0, r6, #-2147483648	; 0x80000000
   235b0:	cmp	r0, #0
   235b4:	movle	r0, #0
   235b8:	movgt	r0, #1
   235bc:	b	23420 <__assert_fail@plt+0x11ec8>
   235c0:	mul	r1, r6, r4
   235c4:	cmp	r1, #63	; 0x3f
   235c8:	movle	r3, #64	; 0x40
   235cc:	strle	r3, [sp, #4]
   235d0:	bgt	23454 <__assert_fail@plt+0x11efc>
   235d4:	b	23430 <__assert_fail@plt+0x11ed8>
   235d8:	mov	r3, #64	; 0x40
   235dc:	str	r3, [sp, #4]
   235e0:	b	23430 <__assert_fail@plt+0x11ed8>
   235e4:	rsb	r3, r9, #-2147483648	; 0x80000000
   235e8:	cmp	r5, r3
   235ec:	movge	r3, #0
   235f0:	movlt	r3, #1
   235f4:	b	23490 <__assert_fail@plt+0x11f38>
   235f8:	rsb	r3, r5, #-2147483648	; 0x80000000
   235fc:	cmp	r9, r3
   23600:	movge	r3, #0
   23604:	movlt	r3, #1
   23608:	b	23490 <__assert_fail@plt+0x11f38>
   2360c:	cmp	r5, #0
   23610:	blt	23638 <__assert_fail@plt+0x120e0>
   23614:	cmn	r6, #1
   23618:	beq	23654 <__assert_fail@plt+0x120fc>
   2361c:	mov	r1, r6
   23620:	mov	r0, #-2147483648	; 0x80000000
   23624:	bl	24cd0 <__assert_fail@plt+0x13778>
   23628:	cmp	r5, r0
   2362c:	movle	r0, #0
   23630:	movgt	r0, #1
   23634:	b	234e4 <__assert_fail@plt+0x11f8c>
   23638:	mov	r1, r6
   2363c:	mvn	r0, #-2147483648	; 0x80000000
   23640:	bl	24cd0 <__assert_fail@plt+0x13778>
   23644:	cmp	r5, r0
   23648:	movge	r0, #0
   2364c:	movlt	r0, #1
   23650:	b	234e4 <__assert_fail@plt+0x11f8c>
   23654:	add	r0, r5, #-2147483648	; 0x80000000
   23658:	cmp	r0, #0
   2365c:	movle	r0, #0
   23660:	movgt	r0, #1
   23664:	b	234e4 <__assert_fail@plt+0x11f8c>
   23668:	cmn	r5, #1
   2366c:	beq	2368c <__assert_fail@plt+0x12134>
   23670:	mov	r1, r5
   23674:	mov	r0, #-2147483648	; 0x80000000
   23678:	bl	24cd0 <__assert_fail@plt+0x13778>
   2367c:	cmp	r6, r0
   23680:	movle	r0, #0
   23684:	movgt	r0, #1
   23688:	b	234e4 <__assert_fail@plt+0x11f8c>
   2368c:	add	r0, r6, #-2147483648	; 0x80000000
   23690:	cmp	r0, #0
   23694:	movle	r0, #0
   23698:	movgt	r0, #1
   2369c:	b	234e4 <__assert_fail@plt+0x11f8c>
   236a0:	bl	11d98 <__assert_fail@plt+0x840>
   236a4:	push	{r4, lr}
   236a8:	bl	24478 <__assert_fail@plt+0x12f20>
   236ac:	cmp	r0, #0
   236b0:	popne	{r4, pc}
   236b4:	bl	11d98 <__assert_fail@plt+0x840>
   236b8:	push	{r4, lr}
   236bc:	mov	r1, #1
   236c0:	bl	236a4 <__assert_fail@plt+0x1214c>
   236c4:	pop	{r4, pc}
   236c8:	push	{r4, lr}
   236cc:	bl	24478 <__assert_fail@plt+0x12f20>
   236d0:	cmp	r0, #0
   236d4:	popne	{r4, pc}
   236d8:	bl	11d98 <__assert_fail@plt+0x840>
   236dc:	push	{r4, lr}
   236e0:	mov	r1, #1
   236e4:	bl	236c8 <__assert_fail@plt+0x12170>
   236e8:	pop	{r4, pc}
   236ec:	push	{r4, r5, r6, lr}
   236f0:	mov	r5, r0
   236f4:	mov	r4, r1
   236f8:	mov	r0, r1
   236fc:	bl	231d8 <__assert_fail@plt+0x11c80>
   23700:	mov	r2, r4
   23704:	mov	r1, r5
   23708:	bl	11264 <memcpy@plt>
   2370c:	pop	{r4, r5, r6, pc}
   23710:	push	{r4, r5, r6, lr}
   23714:	mov	r5, r0
   23718:	mov	r4, r1
   2371c:	mov	r0, r1
   23720:	bl	231ec <__assert_fail@plt+0x11c94>
   23724:	mov	r2, r4
   23728:	mov	r1, r5
   2372c:	bl	11264 <memcpy@plt>
   23730:	pop	{r4, r5, r6, pc}
   23734:	push	{r4, r5, r6, lr}
   23738:	mov	r5, r0
   2373c:	mov	r4, r1
   23740:	add	r0, r1, #1
   23744:	bl	231ec <__assert_fail@plt+0x11c94>
   23748:	mov	r2, #0
   2374c:	strb	r2, [r0, r4]
   23750:	mov	r2, r4
   23754:	mov	r1, r5
   23758:	bl	11264 <memcpy@plt>
   2375c:	pop	{r4, r5, r6, pc}
   23760:	push	{r4, lr}
   23764:	mov	r4, r0
   23768:	bl	11414 <strlen@plt>
   2376c:	add	r1, r0, #1
   23770:	mov	r0, r4
   23774:	bl	236ec <__assert_fail@plt+0x12194>
   23778:	pop	{r4, pc}
   2377c:	push	{r4, r5, r6, r7, lr}
   23780:	sub	sp, sp, #20
   23784:	mov	r7, r0
   23788:	mov	r4, r2
   2378c:	mov	r5, r3
   23790:	ldr	r6, [sp, #56]	; 0x38
   23794:	ldr	r3, [sp, #48]	; 0x30
   23798:	str	r3, [sp]
   2379c:	add	r3, sp, #8
   237a0:	mov	r2, r1
   237a4:	mov	r1, #0
   237a8:	bl	23acc <__assert_fail@plt+0x12574>
   237ac:	cmp	r0, #0
   237b0:	bne	2384c <__assert_fail@plt+0x122f4>
   237b4:	ldrd	r0, [sp, #8]
   237b8:	ldrd	r2, [sp, #40]	; 0x28
   237bc:	cmp	r2, r0
   237c0:	sbcs	r3, r3, r1
   237c4:	movlt	r3, #1
   237c8:	movge	r3, #0
   237cc:	cmp	r0, r4
   237d0:	sbcs	r2, r1, r5
   237d4:	orrlt	r3, r3, #1
   237d8:	cmp	r3, #0
   237dc:	beq	238c4 <__assert_fail@plt+0x1236c>
   237e0:	cmp	r0, #1073741824	; 0x40000000
   237e4:	sbcs	r3, r1, #0
   237e8:	blt	23818 <__assert_fail@plt+0x122c0>
   237ec:	bl	1142c <__errno_location@plt>
   237f0:	mov	r3, #75	; 0x4b
   237f4:	str	r3, [r0]
   237f8:	cmp	r6, #0
   237fc:	bne	238b8 <__assert_fail@plt+0x12360>
   23800:	mov	r6, #1
   23804:	bl	1142c <__errno_location@plt>
   23808:	ldr	r4, [r0]
   2380c:	cmp	r4, #22
   23810:	moveq	r4, #0
   23814:	b	23888 <__assert_fail@plt+0x12330>
   23818:	mov	r2, #-1073741824	; 0xc0000000
   2381c:	mvn	r3, #0
   23820:	cmp	r0, r2
   23824:	sbcs	r3, r1, r3
   23828:	bge	2383c <__assert_fail@plt+0x122e4>
   2382c:	bl	1142c <__errno_location@plt>
   23830:	mov	r3, #75	; 0x4b
   23834:	str	r3, [r0]
   23838:	b	237f8 <__assert_fail@plt+0x122a0>
   2383c:	bl	1142c <__errno_location@plt>
   23840:	mov	r3, #34	; 0x22
   23844:	str	r3, [r0]
   23848:	b	237f8 <__assert_fail@plt+0x122a0>
   2384c:	cmp	r0, #1
   23850:	beq	23868 <__assert_fail@plt+0x12310>
   23854:	cmp	r0, #3
   23858:	beq	238a8 <__assert_fail@plt+0x12350>
   2385c:	cmp	r6, #0
   23860:	moveq	r6, #1
   23864:	b	23804 <__assert_fail@plt+0x122ac>
   23868:	bl	1142c <__errno_location@plt>
   2386c:	mov	r3, #75	; 0x4b
   23870:	str	r3, [r0]
   23874:	cmp	r6, #0
   23878:	bne	23804 <__assert_fail@plt+0x122ac>
   2387c:	bl	1142c <__errno_location@plt>
   23880:	ldr	r4, [r0]
   23884:	mov	r6, #1
   23888:	mov	r0, r7
   2388c:	bl	15864 <__assert_fail@plt+0x430c>
   23890:	str	r0, [sp]
   23894:	ldr	r3, [sp, #52]	; 0x34
   23898:	ldr	r2, [pc, #44]	; 238cc <__assert_fail@plt+0x12374>
   2389c:	mov	r1, r4
   238a0:	mov	r0, r6
   238a4:	bl	11384 <error@plt>
   238a8:	bl	1142c <__errno_location@plt>
   238ac:	mov	r3, #0
   238b0:	str	r3, [r0]
   238b4:	b	23874 <__assert_fail@plt+0x1231c>
   238b8:	bl	1142c <__errno_location@plt>
   238bc:	ldr	r4, [r0]
   238c0:	b	23888 <__assert_fail@plt+0x12330>
   238c4:	add	sp, sp, #20
   238c8:	pop	{r4, r5, r6, r7, pc}
   238cc:	andeq	r5, r2, r0, lsr lr
   238d0:	push	{r4, r5, lr}
   238d4:	sub	sp, sp, #28
   238d8:	ldr	r1, [sp, #56]	; 0x38
   238dc:	str	r1, [sp, #16]
   238e0:	ldr	r1, [sp, #52]	; 0x34
   238e4:	str	r1, [sp, #12]
   238e8:	ldr	r1, [sp, #48]	; 0x30
   238ec:	str	r1, [sp, #8]
   238f0:	ldrd	r4, [sp, #40]	; 0x28
   238f4:	strd	r4, [sp]
   238f8:	mov	r1, #10
   238fc:	bl	2377c <__assert_fail@plt+0x12224>
   23900:	add	sp, sp, #28
   23904:	pop	{r4, r5, pc}
   23908:	push	{r4, r5, r6, r7, r8, lr}
   2390c:	mov	r5, r0
   23910:	subs	r4, r1, #0
   23914:	blt	23970 <__assert_fail@plt+0x12418>
   23918:	cmp	r4, #0
   2391c:	beq	239e4 <__assert_fail@plt+0x1248c>
   23920:	ldrd	r6, [r0]
   23924:	cmp	r6, #0
   23928:	sbcs	r3, r7, #0
   2392c:	blt	23a28 <__assert_fail@plt+0x124d0>
   23930:	mov	r2, r4
   23934:	asr	r3, r4, #31
   23938:	mvn	r0, #0
   2393c:	mvn	r1, #-2147483648	; 0x80000000
   23940:	bl	24f10 <__assert_fail@plt+0x139b8>
   23944:	cmp	r0, r6
   23948:	sbcs	r3, r1, r7
   2394c:	movlt	r3, #1
   23950:	movge	r3, #0
   23954:	cmp	r3, #0
   23958:	mvnne	r2, #0
   2395c:	mvnne	r3, #-2147483648	; 0x80000000
   23960:	beq	239e4 <__assert_fail@plt+0x1248c>
   23964:	strd	r2, [r5]
   23968:	mov	r0, #1
   2396c:	pop	{r4, r5, r6, r7, r8, pc}
   23970:	ldrd	r6, [r0]
   23974:	cmp	r6, #0
   23978:	sbcs	r3, r7, #0
   2397c:	blt	239b0 <__assert_fail@plt+0x12458>
   23980:	cmn	r4, #1
   23984:	beq	23a0c <__assert_fail@plt+0x124b4>
   23988:	mov	r2, r4
   2398c:	asr	r3, r4, #31
   23990:	mov	r0, #0
   23994:	mov	r1, #-2147483648	; 0x80000000
   23998:	bl	24f10 <__assert_fail@plt+0x139b8>
   2399c:	cmp	r0, r6
   239a0:	sbcs	r3, r1, r7
   239a4:	movlt	r3, #1
   239a8:	movge	r3, #0
   239ac:	b	23954 <__assert_fail@plt+0x123fc>
   239b0:	mov	r2, r4
   239b4:	asr	r3, r4, #31
   239b8:	mvn	r0, #0
   239bc:	mvn	r1, #-2147483648	; 0x80000000
   239c0:	bl	24f10 <__assert_fail@plt+0x139b8>
   239c4:	cmp	r6, r0
   239c8:	sbcs	r3, r7, r1
   239cc:	movlt	r3, #1
   239d0:	movge	r3, #0
   239d4:	cmp	r3, #0
   239d8:	movne	r2, #0
   239dc:	movne	r3, #-2147483648	; 0x80000000
   239e0:	bne	23964 <__assert_fail@plt+0x1240c>
   239e4:	asr	r3, r4, #31
   239e8:	ldr	r1, [r5, #4]
   239ec:	ldr	r2, [r5]
   239f0:	mul	r3, r3, r2
   239f4:	mla	r1, r4, r1, r3
   239f8:	umull	r2, r3, r2, r4
   239fc:	add	r3, r1, r3
   23a00:	strd	r2, [r5]
   23a04:	mov	r0, #0
   23a08:	pop	{r4, r5, r6, r7, r8, pc}
   23a0c:	adds	r6, r6, #0
   23a10:	adc	r7, r7, #-2147483648	; 0x80000000
   23a14:	cmp	r6, #1
   23a18:	sbcs	r3, r7, #0
   23a1c:	movge	r3, #1
   23a20:	movlt	r3, #0
   23a24:	b	23954 <__assert_fail@plt+0x123fc>
   23a28:	mvn	r2, #0
   23a2c:	mvn	r3, #0
   23a30:	cmp	r7, r3
   23a34:	cmpeq	r6, r2
   23a38:	beq	23a6c <__assert_fail@plt+0x12514>
   23a3c:	mov	r2, r6
   23a40:	mov	r3, r7
   23a44:	mov	r0, #0
   23a48:	mov	r1, #-2147483648	; 0x80000000
   23a4c:	bl	24f10 <__assert_fail@plt+0x139b8>
   23a50:	mov	r2, r4
   23a54:	asr	r3, r4, #31
   23a58:	cmp	r0, r4
   23a5c:	sbcs	r3, r1, r3
   23a60:	movlt	r3, #1
   23a64:	movge	r3, #0
   23a68:	b	239d4 <__assert_fail@plt+0x1247c>
   23a6c:	asr	r3, r4, #31
   23a70:	adds	r2, r4, #0
   23a74:	adc	r3, r3, #-2147483648	; 0x80000000
   23a78:	cmp	r2, #1
   23a7c:	sbcs	r3, r3, #0
   23a80:	movge	r3, #1
   23a84:	movlt	r3, #0
   23a88:	b	239d4 <__assert_fail@plt+0x1247c>
   23a8c:	push	{r4, r5, r6, r7, r8, lr}
   23a90:	subs	r4, r2, #0
   23a94:	beq	23ac4 <__assert_fail@plt+0x1256c>
   23a98:	mov	r7, r1
   23a9c:	mov	r6, r0
   23aa0:	mov	r5, #0
   23aa4:	mov	r1, r7
   23aa8:	mov	r0, r6
   23aac:	bl	23908 <__assert_fail@plt+0x123b0>
   23ab0:	orr	r5, r5, r0
   23ab4:	subs	r4, r4, #1
   23ab8:	bne	23aa4 <__assert_fail@plt+0x1254c>
   23abc:	mov	r0, r5
   23ac0:	pop	{r4, r5, r6, r7, r8, pc}
   23ac4:	mov	r5, #0
   23ac8:	b	23abc <__assert_fail@plt+0x12564>
   23acc:	push	{r4, r5, r6, r7, r8, lr}
   23ad0:	sub	sp, sp, #16
   23ad4:	cmp	r2, #36	; 0x24
   23ad8:	bhi	23b44 <__assert_fail@plt+0x125ec>
   23adc:	mov	r6, r0
   23ae0:	mov	r4, r1
   23ae4:	mov	r5, r2
   23ae8:	mov	r8, r3
   23aec:	cmp	r1, #0
   23af0:	addeq	r4, sp, #12
   23af4:	bl	1142c <__errno_location@plt>
   23af8:	mov	r7, r0
   23afc:	mov	r3, #0
   23b00:	str	r3, [r0]
   23b04:	mov	r2, r5
   23b08:	mov	r1, r4
   23b0c:	mov	r0, r6
   23b10:	bl	114f8 <__strtoll_internal@plt>
   23b14:	strd	r0, [sp]
   23b18:	ldr	r5, [r4]
   23b1c:	cmp	r6, r5
   23b20:	beq	23b58 <__assert_fail@plt+0x12600>
   23b24:	ldr	r3, [r7]
   23b28:	cmp	r3, #0
   23b2c:	beq	23ba0 <__assert_fail@plt+0x12648>
   23b30:	cmp	r3, #34	; 0x22
   23b34:	moveq	r6, #1
   23b38:	beq	23ba4 <__assert_fail@plt+0x1264c>
   23b3c:	mov	r6, #4
   23b40:	b	23ef8 <__assert_fail@plt+0x129a0>
   23b44:	ldr	r3, [pc, #952]	; 23f04 <__assert_fail@plt+0x129ac>
   23b48:	mov	r2, #85	; 0x55
   23b4c:	ldr	r1, [pc, #948]	; 23f08 <__assert_fail@plt+0x129b0>
   23b50:	ldr	r0, [pc, #948]	; 23f0c <__assert_fail@plt+0x129b4>
   23b54:	bl	11558 <__assert_fail@plt>
   23b58:	ldr	r3, [sp, #40]	; 0x28
   23b5c:	cmp	r3, #0
   23b60:	moveq	r6, #4
   23b64:	beq	23ef8 <__assert_fail@plt+0x129a0>
   23b68:	ldrb	r1, [r5]
   23b6c:	cmp	r1, #0
   23b70:	moveq	r6, #4
   23b74:	beq	23ef8 <__assert_fail@plt+0x129a0>
   23b78:	mov	r0, r3
   23b7c:	bl	11420 <strchr@plt>
   23b80:	cmp	r0, #0
   23b84:	moveq	r6, #4
   23b88:	beq	23ef8 <__assert_fail@plt+0x129a0>
   23b8c:	mov	r2, #1
   23b90:	mov	r3, #0
   23b94:	strd	r2, [sp]
   23b98:	mov	r6, #0
   23b9c:	b	23bb0 <__assert_fail@plt+0x12658>
   23ba0:	mov	r6, #0
   23ba4:	ldr	r3, [sp, #40]	; 0x28
   23ba8:	cmp	r3, #0
   23bac:	beq	23ca0 <__assert_fail@plt+0x12748>
   23bb0:	ldrb	r7, [r5]
   23bb4:	cmp	r7, #0
   23bb8:	beq	23ef0 <__assert_fail@plt+0x12998>
   23bbc:	mov	r1, r7
   23bc0:	ldr	r0, [sp, #40]	; 0x28
   23bc4:	bl	11420 <strchr@plt>
   23bc8:	cmp	r0, #0
   23bcc:	beq	23ca8 <__assert_fail@plt+0x12750>
   23bd0:	sub	r3, r7, #69	; 0x45
   23bd4:	cmp	r3, #47	; 0x2f
   23bd8:	ldrls	pc, [pc, r3, lsl #2]
   23bdc:	b	23d14 <__assert_fail@plt+0x127bc>
   23be0:			; <UNDEFINED> instruction: 0x00023cb8
   23be4:	andeq	r3, r2, r4, lsl sp
   23be8:			; <UNDEFINED> instruction: 0x00023cb8
   23bec:	andeq	r3, r2, r4, lsl sp
   23bf0:	andeq	r3, r2, r4, lsl sp
   23bf4:	andeq	r3, r2, r4, lsl sp
   23bf8:			; <UNDEFINED> instruction: 0x00023cb8
   23bfc:	andeq	r3, r2, r4, lsl sp
   23c00:			; <UNDEFINED> instruction: 0x00023cb8
   23c04:	andeq	r3, r2, r4, lsl sp
   23c08:	andeq	r3, r2, r4, lsl sp
   23c0c:			; <UNDEFINED> instruction: 0x00023cb8
   23c10:	andeq	r3, r2, r4, lsl sp
   23c14:	andeq	r3, r2, r4, lsl sp
   23c18:	andeq	r3, r2, r4, lsl sp
   23c1c:			; <UNDEFINED> instruction: 0x00023cb8
   23c20:	andeq	r3, r2, r4, lsl sp
   23c24:	andeq	r3, r2, r4, lsl sp
   23c28:	andeq	r3, r2, r4, lsl sp
   23c2c:	andeq	r3, r2, r4, lsl sp
   23c30:			; <UNDEFINED> instruction: 0x00023cb8
   23c34:			; <UNDEFINED> instruction: 0x00023cb8
   23c38:	andeq	r3, r2, r4, lsl sp
   23c3c:	andeq	r3, r2, r4, lsl sp
   23c40:	andeq	r3, r2, r4, lsl sp
   23c44:	andeq	r3, r2, r4, lsl sp
   23c48:	andeq	r3, r2, r4, lsl sp
   23c4c:	andeq	r3, r2, r4, lsl sp
   23c50:	andeq	r3, r2, r4, lsl sp
   23c54:	andeq	r3, r2, r4, lsl sp
   23c58:	andeq	r3, r2, r4, lsl sp
   23c5c:	andeq	r3, r2, r4, lsl sp
   23c60:	andeq	r3, r2, r4, lsl sp
   23c64:	andeq	r3, r2, r4, lsl sp
   23c68:			; <UNDEFINED> instruction: 0x00023cb8
   23c6c:	andeq	r3, r2, r4, lsl sp
   23c70:	andeq	r3, r2, r4, lsl sp
   23c74:	andeq	r3, r2, r4, lsl sp
   23c78:			; <UNDEFINED> instruction: 0x00023cb8
   23c7c:	andeq	r3, r2, r4, lsl sp
   23c80:			; <UNDEFINED> instruction: 0x00023cb8
   23c84:	andeq	r3, r2, r4, lsl sp
   23c88:	andeq	r3, r2, r4, lsl sp
   23c8c:	andeq	r3, r2, r4, lsl sp
   23c90:	andeq	r3, r2, r4, lsl sp
   23c94:	andeq	r3, r2, r4, lsl sp
   23c98:	andeq	r3, r2, r4, lsl sp
   23c9c:			; <UNDEFINED> instruction: 0x00023cb8
   23ca0:	strd	r0, [r8]
   23ca4:	b	23ef8 <__assert_fail@plt+0x129a0>
   23ca8:	ldrd	r2, [sp]
   23cac:	strd	r2, [r8]
   23cb0:	orr	r6, r6, #2
   23cb4:	b	23ef8 <__assert_fail@plt+0x129a0>
   23cb8:	mov	r1, #48	; 0x30
   23cbc:	ldr	r0, [sp, #40]	; 0x28
   23cc0:	bl	11420 <strchr@plt>
   23cc4:	cmp	r0, #0
   23cc8:	beq	23e04 <__assert_fail@plt+0x128ac>
   23ccc:	ldrb	r3, [r5, #1]
   23cd0:	cmp	r3, #68	; 0x44
   23cd4:	beq	23cf0 <__assert_fail@plt+0x12798>
   23cd8:	cmp	r3, #105	; 0x69
   23cdc:	beq	23cfc <__assert_fail@plt+0x127a4>
   23ce0:	cmp	r3, #66	; 0x42
   23ce4:	movne	r5, #1
   23ce8:	movne	r1, #1024	; 0x400
   23cec:	bne	23d1c <__assert_fail@plt+0x127c4>
   23cf0:	mov	r5, #2
   23cf4:	mov	r1, #1000	; 0x3e8
   23cf8:	b	23d1c <__assert_fail@plt+0x127c4>
   23cfc:	ldrb	r5, [r5, #2]
   23d00:	cmp	r5, #66	; 0x42
   23d04:	movne	r5, #1
   23d08:	moveq	r5, #3
   23d0c:	mov	r1, #1024	; 0x400
   23d10:	b	23d1c <__assert_fail@plt+0x127c4>
   23d14:	mov	r5, #1
   23d18:	mov	r1, #1024	; 0x400
   23d1c:	sub	r7, r7, #66	; 0x42
   23d20:	cmp	r7, #53	; 0x35
   23d24:	ldrls	pc, [pc, r7, lsl #2]
   23d28:	b	23ec0 <__assert_fail@plt+0x12968>
   23d2c:	andeq	r3, r2, r0, lsr #28
   23d30:	andeq	r3, r2, r0, asr #29
   23d34:	andeq	r3, r2, r0, asr #29
   23d38:	andeq	r3, r2, r0, lsr lr
   23d3c:	andeq	r3, r2, r0, asr #29
   23d40:	andeq	r3, r2, r0, asr #28
   23d44:	andeq	r3, r2, r0, asr #29
   23d48:	andeq	r3, r2, r0, asr #29
   23d4c:	andeq	r3, r2, r0, asr #29
   23d50:	andeq	r3, r2, r0, asr lr
   23d54:	andeq	r3, r2, r0, asr #29
   23d58:	andeq	r3, r2, r0, ror #28
   23d5c:	andeq	r3, r2, r0, asr #29
   23d60:	andeq	r3, r2, r0, asr #29
   23d64:	andeq	r3, r2, r0, ror lr
   23d68:	andeq	r3, r2, r0, asr #29
   23d6c:	andeq	r3, r2, r0, asr #29
   23d70:	andeq	r3, r2, r0, asr #29
   23d74:	andeq	r3, r2, r0, lsl #29
   23d78:	andeq	r3, r2, r0, asr #29
   23d7c:	andeq	r3, r2, r0, asr #29
   23d80:	andeq	r3, r2, r0, asr #29
   23d84:	andeq	r3, r2, r0, asr #29
   23d88:	andeq	r3, r2, r0, lsr #29
   23d8c:			; <UNDEFINED> instruction: 0x00023eb0
   23d90:	andeq	r3, r2, r0, asr #29
   23d94:	andeq	r3, r2, r0, asr #29
   23d98:	andeq	r3, r2, r0, asr #29
   23d9c:	andeq	r3, r2, r0, asr #29
   23da0:	andeq	r3, r2, r0, asr #29
   23da4:	andeq	r3, r2, r0, asr #29
   23da8:	andeq	r3, r2, r0, asr #29
   23dac:	andeq	r3, r2, r0, lsl lr
   23db0:	ldrdeq	r3, [r2], -r0
   23db4:	andeq	r3, r2, r0, asr #29
   23db8:	andeq	r3, r2, r0, asr #29
   23dbc:	andeq	r3, r2, r0, asr #29
   23dc0:	andeq	r3, r2, r0, asr #28
   23dc4:	andeq	r3, r2, r0, asr #29
   23dc8:	andeq	r3, r2, r0, asr #29
   23dcc:	andeq	r3, r2, r0, asr #29
   23dd0:	andeq	r3, r2, r0, asr lr
   23dd4:	andeq	r3, r2, r0, asr #29
   23dd8:	andeq	r3, r2, r0, ror #28
   23ddc:	andeq	r3, r2, r0, asr #29
   23de0:	andeq	r3, r2, r0, asr #29
   23de4:	andeq	r3, r2, r0, asr #29
   23de8:	andeq	r3, r2, r0, asr #29
   23dec:	andeq	r3, r2, r0, asr #29
   23df0:	andeq	r3, r2, r0, asr #29
   23df4:	andeq	r3, r2, r0, lsl #29
   23df8:	andeq	r3, r2, r0, asr #29
   23dfc:	andeq	r3, r2, r0, asr #29
   23e00:	muleq	r2, r0, lr
   23e04:	mov	r5, #1
   23e08:	mov	r1, #1024	; 0x400
   23e0c:	b	23d1c <__assert_fail@plt+0x127c4>
   23e10:	mov	r1, #512	; 0x200
   23e14:	mov	r0, sp
   23e18:	bl	23908 <__assert_fail@plt+0x123b0>
   23e1c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e20:	mov	r1, #1024	; 0x400
   23e24:	mov	r0, sp
   23e28:	bl	23908 <__assert_fail@plt+0x123b0>
   23e2c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e30:	mov	r2, #6
   23e34:	mov	r0, sp
   23e38:	bl	23a8c <__assert_fail@plt+0x12534>
   23e3c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e40:	mov	r2, #3
   23e44:	mov	r0, sp
   23e48:	bl	23a8c <__assert_fail@plt+0x12534>
   23e4c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e50:	mov	r2, #1
   23e54:	mov	r0, sp
   23e58:	bl	23a8c <__assert_fail@plt+0x12534>
   23e5c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e60:	mov	r2, #2
   23e64:	mov	r0, sp
   23e68:	bl	23a8c <__assert_fail@plt+0x12534>
   23e6c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e70:	mov	r2, #5
   23e74:	mov	r0, sp
   23e78:	bl	23a8c <__assert_fail@plt+0x12534>
   23e7c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e80:	mov	r2, #4
   23e84:	mov	r0, sp
   23e88:	bl	23a8c <__assert_fail@plt+0x12534>
   23e8c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23e90:	mov	r1, #2
   23e94:	mov	r0, sp
   23e98:	bl	23908 <__assert_fail@plt+0x123b0>
   23e9c:	b	23ed4 <__assert_fail@plt+0x1297c>
   23ea0:	mov	r2, #8
   23ea4:	mov	r0, sp
   23ea8:	bl	23a8c <__assert_fail@plt+0x12534>
   23eac:	b	23ed4 <__assert_fail@plt+0x1297c>
   23eb0:	mov	r2, #7
   23eb4:	mov	r0, sp
   23eb8:	bl	23a8c <__assert_fail@plt+0x12534>
   23ebc:	b	23ed4 <__assert_fail@plt+0x1297c>
   23ec0:	ldrd	r2, [sp]
   23ec4:	strd	r2, [r8]
   23ec8:	orr	r6, r6, #2
   23ecc:	b	23ef8 <__assert_fail@plt+0x129a0>
   23ed0:	mov	r0, #0
   23ed4:	orr	r6, r6, r0
   23ed8:	ldr	r3, [r4]
   23edc:	add	r2, r3, r5
   23ee0:	str	r2, [r4]
   23ee4:	ldrb	r3, [r3, r5]
   23ee8:	cmp	r3, #0
   23eec:	orrne	r6, r6, #2
   23ef0:	ldrd	r2, [sp]
   23ef4:	strd	r2, [r8]
   23ef8:	mov	r0, r6
   23efc:	add	sp, sp, #16
   23f00:	pop	{r4, r5, r6, r7, r8, pc}
   23f04:			; <UNDEFINED> instruction: 0x000264b4
   23f08:	andeq	r6, r2, r0, asr #9
   23f0c:	ldrdeq	r6, [r2], -r0
   23f10:	push	{r4, r5, r6, lr}
   23f14:	mov	r5, r0
   23f18:	subs	r4, r1, #0
   23f1c:	blt	23f70 <__assert_fail@plt+0x12a18>
   23f20:	cmp	r4, #0
   23f24:	moveq	r3, #0
   23f28:	beq	23f54 <__assert_fail@plt+0x129fc>
   23f2c:	mov	r2, r4
   23f30:	asr	r3, r4, #31
   23f34:	mvn	r0, #0
   23f38:	mvn	r1, #0
   23f3c:	bl	24fe4 <__assert_fail@plt+0x13a8c>
   23f40:	ldrd	r2, [r5]
   23f44:	cmp	r1, r3
   23f48:	cmpeq	r0, r2
   23f4c:	movcc	r3, #1
   23f50:	movcs	r3, #0
   23f54:	cmp	r3, #0
   23f58:	beq	23f90 <__assert_fail@plt+0x12a38>
   23f5c:	mvn	r2, #0
   23f60:	mvn	r3, #0
   23f64:	strd	r2, [r5]
   23f68:	mov	r0, #1
   23f6c:	pop	{r4, r5, r6, pc}
   23f70:	mov	r1, r4
   23f74:	mov	r0, #0
   23f78:	bl	24cd0 <__assert_fail@plt+0x13778>
   23f7c:	ldrd	r2, [r5]
   23f80:	orrs	r3, r2, r3
   23f84:	movne	r3, #1
   23f88:	moveq	r3, #0
   23f8c:	b	23f54 <__assert_fail@plt+0x129fc>
   23f90:	asr	r3, r4, #31
   23f94:	ldr	r1, [r5, #4]
   23f98:	ldr	r2, [r5]
   23f9c:	mul	r3, r3, r2
   23fa0:	mla	r1, r4, r1, r3
   23fa4:	umull	r2, r3, r2, r4
   23fa8:	add	r3, r1, r3
   23fac:	strd	r2, [r5]
   23fb0:	mov	r0, #0
   23fb4:	pop	{r4, r5, r6, pc}
   23fb8:	push	{r4, r5, r6, r7, r8, lr}
   23fbc:	subs	r4, r2, #0
   23fc0:	beq	23ff0 <__assert_fail@plt+0x12a98>
   23fc4:	mov	r7, r1
   23fc8:	mov	r6, r0
   23fcc:	mov	r5, #0
   23fd0:	mov	r1, r7
   23fd4:	mov	r0, r6
   23fd8:	bl	23f10 <__assert_fail@plt+0x129b8>
   23fdc:	orr	r5, r5, r0
   23fe0:	subs	r4, r4, #1
   23fe4:	bne	23fd0 <__assert_fail@plt+0x12a78>
   23fe8:	mov	r0, r5
   23fec:	pop	{r4, r5, r6, r7, r8, pc}
   23ff0:	mov	r5, #0
   23ff4:	b	23fe8 <__assert_fail@plt+0x12a90>
   23ff8:	push	{r4, r5, r6, r7, r8, r9, lr}
   23ffc:	sub	sp, sp, #20
   24000:	cmp	r2, #36	; 0x24
   24004:	bhi	24044 <__assert_fail@plt+0x12aec>
   24008:	mov	r5, r0
   2400c:	mov	r6, r1
   24010:	mov	r7, r2
   24014:	mov	r9, r3
   24018:	cmp	r1, #0
   2401c:	addeq	r6, sp, #12
   24020:	bl	1142c <__errno_location@plt>
   24024:	mov	r8, r0
   24028:	mov	r3, #0
   2402c:	str	r3, [r0]
   24030:	ldrb	r4, [r5]
   24034:	bl	113fc <__ctype_b_loc@plt>
   24038:	ldr	r1, [r0]
   2403c:	mov	r2, r5
   24040:	b	2405c <__assert_fail@plt+0x12b04>
   24044:	ldr	r3, [pc, #1056]	; 2446c <__assert_fail@plt+0x12f14>
   24048:	mov	r2, #85	; 0x55
   2404c:	ldr	r1, [pc, #1052]	; 24470 <__assert_fail@plt+0x12f18>
   24050:	ldr	r0, [pc, #1052]	; 24474 <__assert_fail@plt+0x12f1c>
   24054:	bl	11558 <__assert_fail@plt>
   24058:	ldrb	r4, [r2, #1]!
   2405c:	lsl	r3, r4, #1
   24060:	ldrh	r3, [r1, r3]
   24064:	tst	r3, #8192	; 0x2000
   24068:	bne	24058 <__assert_fail@plt+0x12b00>
   2406c:	cmp	r4, #45	; 0x2d
   24070:	moveq	r4, #4
   24074:	bne	24084 <__assert_fail@plt+0x12b2c>
   24078:	mov	r0, r4
   2407c:	add	sp, sp, #20
   24080:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24084:	mov	r3, #0
   24088:	mov	r2, r7
   2408c:	mov	r1, r6
   24090:	mov	r0, r5
   24094:	bl	1127c <__strtoull_internal@plt>
   24098:	strd	r0, [sp]
   2409c:	ldr	r7, [r6]
   240a0:	cmp	r5, r7
   240a4:	beq	240c8 <__assert_fail@plt+0x12b70>
   240a8:	ldr	r3, [r8]
   240ac:	cmp	r3, #0
   240b0:	beq	24110 <__assert_fail@plt+0x12bb8>
   240b4:	cmp	r3, #34	; 0x22
   240b8:	moveq	r4, #1
   240bc:	beq	24114 <__assert_fail@plt+0x12bbc>
   240c0:	mov	r4, #4
   240c4:	b	24078 <__assert_fail@plt+0x12b20>
   240c8:	ldr	r3, [sp, #48]	; 0x30
   240cc:	cmp	r3, #0
   240d0:	moveq	r4, #4
   240d4:	beq	24078 <__assert_fail@plt+0x12b20>
   240d8:	ldrb	r1, [r7]
   240dc:	cmp	r1, #0
   240e0:	moveq	r4, #4
   240e4:	beq	24078 <__assert_fail@plt+0x12b20>
   240e8:	mov	r0, r3
   240ec:	bl	11420 <strchr@plt>
   240f0:	cmp	r0, #0
   240f4:	moveq	r4, #4
   240f8:	beq	24078 <__assert_fail@plt+0x12b20>
   240fc:	mov	r2, #1
   24100:	mov	r3, #0
   24104:	strd	r2, [sp]
   24108:	mov	r4, #0
   2410c:	b	24120 <__assert_fail@plt+0x12bc8>
   24110:	mov	r4, #0
   24114:	ldr	r3, [sp, #48]	; 0x30
   24118:	cmp	r3, #0
   2411c:	beq	24210 <__assert_fail@plt+0x12cb8>
   24120:	ldrb	r5, [r7]
   24124:	cmp	r5, #0
   24128:	beq	243a8 <__assert_fail@plt+0x12e50>
   2412c:	mov	r1, r5
   24130:	ldr	r0, [sp, #48]	; 0x30
   24134:	bl	11420 <strchr@plt>
   24138:	cmp	r0, #0
   2413c:	beq	24218 <__assert_fail@plt+0x12cc0>
   24140:	sub	r3, r5, #69	; 0x45
   24144:	cmp	r3, #47	; 0x2f
   24148:	ldrls	pc, [pc, r3, lsl #2]
   2414c:	b	24284 <__assert_fail@plt+0x12d2c>
   24150:	andeq	r4, r2, r8, lsr #4
   24154:	andeq	r4, r2, r4, lsl #5
   24158:	andeq	r4, r2, r8, lsr #4
   2415c:	andeq	r4, r2, r4, lsl #5
   24160:	andeq	r4, r2, r4, lsl #5
   24164:	andeq	r4, r2, r4, lsl #5
   24168:	andeq	r4, r2, r8, lsr #4
   2416c:	andeq	r4, r2, r4, lsl #5
   24170:	andeq	r4, r2, r8, lsr #4
   24174:	andeq	r4, r2, r4, lsl #5
   24178:	andeq	r4, r2, r4, lsl #5
   2417c:	andeq	r4, r2, r8, lsr #4
   24180:	andeq	r4, r2, r4, lsl #5
   24184:	andeq	r4, r2, r4, lsl #5
   24188:	andeq	r4, r2, r4, lsl #5
   2418c:	andeq	r4, r2, r8, lsr #4
   24190:	andeq	r4, r2, r4, lsl #5
   24194:	andeq	r4, r2, r4, lsl #5
   24198:	andeq	r4, r2, r4, lsl #5
   2419c:	andeq	r4, r2, r4, lsl #5
   241a0:	andeq	r4, r2, r8, lsr #4
   241a4:	andeq	r4, r2, r8, lsr #4
   241a8:	andeq	r4, r2, r4, lsl #5
   241ac:	andeq	r4, r2, r4, lsl #5
   241b0:	andeq	r4, r2, r4, lsl #5
   241b4:	andeq	r4, r2, r4, lsl #5
   241b8:	andeq	r4, r2, r4, lsl #5
   241bc:	andeq	r4, r2, r4, lsl #5
   241c0:	andeq	r4, r2, r4, lsl #5
   241c4:	andeq	r4, r2, r4, lsl #5
   241c8:	andeq	r4, r2, r4, lsl #5
   241cc:	andeq	r4, r2, r4, lsl #5
   241d0:	andeq	r4, r2, r4, lsl #5
   241d4:	andeq	r4, r2, r4, lsl #5
   241d8:	andeq	r4, r2, r8, lsr #4
   241dc:	andeq	r4, r2, r4, lsl #5
   241e0:	andeq	r4, r2, r4, lsl #5
   241e4:	andeq	r4, r2, r4, lsl #5
   241e8:	andeq	r4, r2, r8, lsr #4
   241ec:	andeq	r4, r2, r4, lsl #5
   241f0:	andeq	r4, r2, r8, lsr #4
   241f4:	andeq	r4, r2, r4, lsl #5
   241f8:	andeq	r4, r2, r4, lsl #5
   241fc:	andeq	r4, r2, r4, lsl #5
   24200:	andeq	r4, r2, r4, lsl #5
   24204:	andeq	r4, r2, r4, lsl #5
   24208:	andeq	r4, r2, r4, lsl #5
   2420c:	andeq	r4, r2, r8, lsr #4
   24210:	strd	r0, [r9]
   24214:	b	24078 <__assert_fail@plt+0x12b20>
   24218:	ldrd	r2, [sp]
   2421c:	strd	r2, [r9]
   24220:	orr	r4, r4, #2
   24224:	b	24078 <__assert_fail@plt+0x12b20>
   24228:	mov	r1, #48	; 0x30
   2422c:	ldr	r0, [sp, #48]	; 0x30
   24230:	bl	11420 <strchr@plt>
   24234:	cmp	r0, #0
   24238:	beq	24374 <__assert_fail@plt+0x12e1c>
   2423c:	ldrb	r3, [r7, #1]
   24240:	cmp	r3, #68	; 0x44
   24244:	beq	24260 <__assert_fail@plt+0x12d08>
   24248:	cmp	r3, #105	; 0x69
   2424c:	beq	2426c <__assert_fail@plt+0x12d14>
   24250:	cmp	r3, #66	; 0x42
   24254:	movne	r7, #1
   24258:	movne	r1, #1024	; 0x400
   2425c:	bne	2428c <__assert_fail@plt+0x12d34>
   24260:	mov	r7, #2
   24264:	mov	r1, #1000	; 0x3e8
   24268:	b	2428c <__assert_fail@plt+0x12d34>
   2426c:	ldrb	r7, [r7, #2]
   24270:	cmp	r7, #66	; 0x42
   24274:	movne	r7, #1
   24278:	moveq	r7, #3
   2427c:	mov	r1, #1024	; 0x400
   24280:	b	2428c <__assert_fail@plt+0x12d34>
   24284:	mov	r7, #1
   24288:	mov	r1, #1024	; 0x400
   2428c:	sub	r5, r5, #66	; 0x42
   24290:	cmp	r5, #53	; 0x35
   24294:	ldrls	pc, [pc, r5, lsl #2]
   24298:	b	24454 <__assert_fail@plt+0x12efc>
   2429c:			; <UNDEFINED> instruction: 0x000243b4
   242a0:	andeq	r4, r2, r4, asr r4
   242a4:	andeq	r4, r2, r4, asr r4
   242a8:	andeq	r4, r2, r4, asr #7
   242ac:	andeq	r4, r2, r4, asr r4
   242b0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   242b4:	andeq	r4, r2, r4, asr r4
   242b8:	andeq	r4, r2, r4, asr r4
   242bc:	andeq	r4, r2, r4, asr r4
   242c0:	andeq	r4, r2, r4, ror #7
   242c4:	andeq	r4, r2, r4, asr r4
   242c8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   242cc:	andeq	r4, r2, r4, asr r4
   242d0:	andeq	r4, r2, r4, asr r4
   242d4:	andeq	r4, r2, r4, lsl #8
   242d8:	andeq	r4, r2, r4, asr r4
   242dc:	andeq	r4, r2, r4, asr r4
   242e0:	andeq	r4, r2, r4, asr r4
   242e4:	andeq	r4, r2, r4, lsl r4
   242e8:	andeq	r4, r2, r4, asr r4
   242ec:	andeq	r4, r2, r4, asr r4
   242f0:	andeq	r4, r2, r4, asr r4
   242f4:	andeq	r4, r2, r4, asr r4
   242f8:	andeq	r4, r2, r4, lsr r4
   242fc:	andeq	r4, r2, r4, asr #8
   24300:	andeq	r4, r2, r4, asr r4
   24304:	andeq	r4, r2, r4, asr r4
   24308:	andeq	r4, r2, r4, asr r4
   2430c:	andeq	r4, r2, r4, asr r4
   24310:	andeq	r4, r2, r4, asr r4
   24314:	andeq	r4, r2, r4, asr r4
   24318:	andeq	r4, r2, r4, asr r4
   2431c:	andeq	r4, r2, r0, lsl #7
   24320:	andeq	r4, r2, r4, ror #8
   24324:	andeq	r4, r2, r4, asr r4
   24328:	andeq	r4, r2, r4, asr r4
   2432c:	andeq	r4, r2, r4, asr r4
   24330:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24334:	andeq	r4, r2, r4, asr r4
   24338:	andeq	r4, r2, r4, asr r4
   2433c:	andeq	r4, r2, r4, asr r4
   24340:	andeq	r4, r2, r4, ror #7
   24344:	andeq	r4, r2, r4, asr r4
   24348:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2434c:	andeq	r4, r2, r4, asr r4
   24350:	andeq	r4, r2, r4, asr r4
   24354:	andeq	r4, r2, r4, asr r4
   24358:	andeq	r4, r2, r4, asr r4
   2435c:	andeq	r4, r2, r4, asr r4
   24360:	andeq	r4, r2, r4, asr r4
   24364:	andeq	r4, r2, r4, lsl r4
   24368:	andeq	r4, r2, r4, asr r4
   2436c:	andeq	r4, r2, r4, asr r4
   24370:	andeq	r4, r2, r4, lsr #8
   24374:	mov	r7, #1
   24378:	mov	r1, #1024	; 0x400
   2437c:	b	2428c <__assert_fail@plt+0x12d34>
   24380:	mov	r1, #512	; 0x200
   24384:	mov	r0, sp
   24388:	bl	23f10 <__assert_fail@plt+0x129b8>
   2438c:	orr	r4, r4, r0
   24390:	ldr	r3, [r6]
   24394:	add	r2, r3, r7
   24398:	str	r2, [r6]
   2439c:	ldrb	r3, [r3, r7]
   243a0:	cmp	r3, #0
   243a4:	orrne	r4, r4, #2
   243a8:	ldrd	r2, [sp]
   243ac:	strd	r2, [r9]
   243b0:	b	24078 <__assert_fail@plt+0x12b20>
   243b4:	mov	r1, #1024	; 0x400
   243b8:	mov	r0, sp
   243bc:	bl	23f10 <__assert_fail@plt+0x129b8>
   243c0:	b	2438c <__assert_fail@plt+0x12e34>
   243c4:	mov	r2, #6
   243c8:	mov	r0, sp
   243cc:	bl	23fb8 <__assert_fail@plt+0x12a60>
   243d0:	b	2438c <__assert_fail@plt+0x12e34>
   243d4:	mov	r2, #3
   243d8:	mov	r0, sp
   243dc:	bl	23fb8 <__assert_fail@plt+0x12a60>
   243e0:	b	2438c <__assert_fail@plt+0x12e34>
   243e4:	mov	r2, #1
   243e8:	mov	r0, sp
   243ec:	bl	23fb8 <__assert_fail@plt+0x12a60>
   243f0:	b	2438c <__assert_fail@plt+0x12e34>
   243f4:	mov	r2, #2
   243f8:	mov	r0, sp
   243fc:	bl	23fb8 <__assert_fail@plt+0x12a60>
   24400:	b	2438c <__assert_fail@plt+0x12e34>
   24404:	mov	r2, #5
   24408:	mov	r0, sp
   2440c:	bl	23fb8 <__assert_fail@plt+0x12a60>
   24410:	b	2438c <__assert_fail@plt+0x12e34>
   24414:	mov	r2, #4
   24418:	mov	r0, sp
   2441c:	bl	23fb8 <__assert_fail@plt+0x12a60>
   24420:	b	2438c <__assert_fail@plt+0x12e34>
   24424:	mov	r1, #2
   24428:	mov	r0, sp
   2442c:	bl	23f10 <__assert_fail@plt+0x129b8>
   24430:	b	2438c <__assert_fail@plt+0x12e34>
   24434:	mov	r2, #8
   24438:	mov	r0, sp
   2443c:	bl	23fb8 <__assert_fail@plt+0x12a60>
   24440:	b	2438c <__assert_fail@plt+0x12e34>
   24444:	mov	r2, #7
   24448:	mov	r0, sp
   2444c:	bl	23fb8 <__assert_fail@plt+0x12a60>
   24450:	b	2438c <__assert_fail@plt+0x12e34>
   24454:	ldrd	r2, [sp]
   24458:	strd	r2, [r9]
   2445c:	orr	r4, r4, #2
   24460:	b	24078 <__assert_fail@plt+0x12b20>
   24464:	mov	r0, #0
   24468:	b	2438c <__assert_fail@plt+0x12e34>
   2446c:	strdeq	r6, [r2], -r8
   24470:	andeq	r6, r2, r0, asr #9
   24474:	ldrdeq	r6, [r2], -r0
   24478:	push	{r4, lr}
   2447c:	mov	r2, r0
   24480:	mov	r3, r1
   24484:	cmp	r1, #0
   24488:	cmpne	r0, #0
   2448c:	moveq	r3, #1
   24490:	moveq	r2, r3
   24494:	umull	r0, r1, r2, r3
   24498:	cmp	r0, #0
   2449c:	cmpge	r1, #0
   244a0:	bne	244b4 <__assert_fail@plt+0x12f5c>
   244a4:	mov	r1, r3
   244a8:	mov	r0, r2
   244ac:	bl	111b0 <calloc@plt>
   244b0:	pop	{r4, pc}
   244b4:	bl	1142c <__errno_location@plt>
   244b8:	mov	r3, #12
   244bc:	str	r3, [r0]
   244c0:	mov	r0, #0
   244c4:	pop	{r4, pc}
   244c8:	push	{r4, lr}
   244cc:	cmp	r0, #0
   244d0:	moveq	r0, #1
   244d4:	cmp	r0, #0
   244d8:	blt	244e4 <__assert_fail@plt+0x12f8c>
   244dc:	bl	1139c <malloc@plt>
   244e0:	pop	{r4, pc}
   244e4:	bl	1142c <__errno_location@plt>
   244e8:	mov	r3, #12
   244ec:	str	r3, [r0]
   244f0:	mov	r0, #0
   244f4:	pop	{r4, pc}
   244f8:	push	{r4, lr}
   244fc:	cmp	r0, #0
   24500:	beq	2451c <__assert_fail@plt+0x12fc4>
   24504:	cmp	r1, #0
   24508:	beq	24528 <__assert_fail@plt+0x12fd0>
   2450c:	cmp	r1, #0
   24510:	blt	24534 <__assert_fail@plt+0x12fdc>
   24514:	bl	112f4 <realloc@plt>
   24518:	pop	{r4, pc}
   2451c:	mov	r0, r1
   24520:	bl	244c8 <__assert_fail@plt+0x12f70>
   24524:	pop	{r4, pc}
   24528:	bl	13b40 <__assert_fail@plt+0x25e8>
   2452c:	mov	r0, #0
   24530:	pop	{r4, pc}
   24534:	bl	1142c <__errno_location@plt>
   24538:	mov	r3, #12
   2453c:	str	r3, [r0]
   24540:	mov	r0, #0
   24544:	pop	{r4, pc}
   24548:	push	{r4, r5, r6, lr}
   2454c:	mov	r5, r0
   24550:	bl	1136c <__fpending@plt>
   24554:	mov	r6, r0
   24558:	ldr	r4, [r5]
   2455c:	and	r4, r4, #32
   24560:	mov	r0, r5
   24564:	bl	13934 <__assert_fail@plt+0x23dc>
   24568:	cmp	r4, #0
   2456c:	bne	24594 <__assert_fail@plt+0x1303c>
   24570:	cmp	r0, #0
   24574:	popeq	{r4, r5, r6, pc}
   24578:	cmp	r6, #0
   2457c:	bne	245b0 <__assert_fail@plt+0x13058>
   24580:	bl	1142c <__errno_location@plt>
   24584:	ldr	r0, [r0]
   24588:	subs	r0, r0, #9
   2458c:	mvnne	r0, #0
   24590:	pop	{r4, r5, r6, pc}
   24594:	cmp	r0, #0
   24598:	bne	245b8 <__assert_fail@plt+0x13060>
   2459c:	bl	1142c <__errno_location@plt>
   245a0:	mov	r3, #0
   245a4:	str	r3, [r0]
   245a8:	mvn	r0, #0
   245ac:	pop	{r4, r5, r6, pc}
   245b0:	mvn	r0, #0
   245b4:	pop	{r4, r5, r6, pc}
   245b8:	mvn	r0, #0
   245bc:	pop	{r4, r5, r6, pc}
   245c0:	ldr	ip, [r0, #4]
   245c4:	cmp	ip, r1
   245c8:	bcs	24610 <__assert_fail@plt+0x130b8>
   245cc:	push	{r4, r5, r6, r7, r8, lr}
   245d0:	mov	r6, r3
   245d4:	mov	r7, r2
   245d8:	mov	r5, r1
   245dc:	mov	r4, r0
   245e0:	cmp	r3, #0
   245e4:	beq	2461c <__assert_fail@plt+0x130c4>
   245e8:	mov	r1, r3
   245ec:	mvn	r0, #0
   245f0:	bl	24ac4 <__assert_fail@plt+0x1356c>
   245f4:	cmp	r5, r0
   245f8:	bls	2461c <__assert_fail@plt+0x130c4>
   245fc:	bl	1142c <__errno_location@plt>
   24600:	mov	r3, #12
   24604:	str	r3, [r0]
   24608:	mov	r0, #0
   2460c:	pop	{r4, r5, r6, r7, r8, pc}
   24610:	str	r1, [r0]
   24614:	mov	r0, #1
   24618:	bx	lr
   2461c:	mul	r1, r6, r5
   24620:	ldr	r0, [r4, #8]
   24624:	cmp	r0, r7
   24628:	beq	2464c <__assert_fail@plt+0x130f4>
   2462c:	bl	244f8 <__assert_fail@plt+0x12fa0>
   24630:	subs	r7, r0, #0
   24634:	beq	24684 <__assert_fail@plt+0x1312c>
   24638:	str	r7, [r4, #8]
   2463c:	str	r5, [r4, #4]
   24640:	str	r5, [r4]
   24644:	mov	r0, #1
   24648:	pop	{r4, r5, r6, r7, r8, pc}
   2464c:	mov	r0, r1
   24650:	bl	244c8 <__assert_fail@plt+0x12f70>
   24654:	subs	r7, r0, #0
   24658:	beq	2467c <__assert_fail@plt+0x13124>
   2465c:	ldr	r1, [r4, #8]
   24660:	cmp	r1, #0
   24664:	beq	24638 <__assert_fail@plt+0x130e0>
   24668:	ldr	r2, [r4]
   2466c:	mul	r2, r2, r6
   24670:	mov	r0, r7
   24674:	bl	11264 <memcpy@plt>
   24678:	b	24638 <__assert_fail@plt+0x130e0>
   2467c:	mov	r0, #0
   24680:	pop	{r4, r5, r6, r7, r8, pc}
   24684:	mov	r0, #0
   24688:	pop	{r4, r5, r6, r7, r8, pc}
   2468c:	push	{r1, r2, r3}
   24690:	push	{r4, r5, r6, lr}
   24694:	sub	sp, sp, #12
   24698:	mov	r5, r0
   2469c:	ldr	r1, [sp, #28]
   246a0:	add	r3, sp, #32
   246a4:	str	r3, [sp, #4]
   246a8:	cmp	r1, #0
   246ac:	beq	246f4 <__assert_fail@plt+0x1319c>
   246b0:	ldr	r3, [pc, #540]	; 248d4 <__assert_fail@plt+0x1337c>
   246b4:	cmp	r1, r3
   246b8:	beq	24724 <__assert_fail@plt+0x131cc>
   246bc:	cmp	r1, #11
   246c0:	beq	248c4 <__assert_fail@plt+0x1336c>
   246c4:	bgt	24850 <__assert_fail@plt+0x132f8>
   246c8:	cmp	r1, #3
   246cc:	beq	248c4 <__assert_fail@plt+0x1336c>
   246d0:	ble	24810 <__assert_fail@plt+0x132b8>
   246d4:	cmp	r1, #8
   246d8:	beq	24830 <__assert_fail@plt+0x132d8>
   246dc:	ble	24828 <__assert_fail@plt+0x132d0>
   246e0:	cmp	r1, #9
   246e4:	beq	248c4 <__assert_fail@plt+0x1336c>
   246e8:	cmp	r1, #10
   246ec:	bne	24888 <__assert_fail@plt+0x13330>
   246f0:	b	24830 <__assert_fail@plt+0x132d8>
   246f4:	ldr	r3, [sp, #4]
   246f8:	add	r2, r3, #4
   246fc:	str	r2, [sp, #4]
   24700:	ldr	r2, [r3]
   24704:	mov	r1, #0
   24708:	bl	114b0 <fcntl64@plt>
   2470c:	mov	r4, r0
   24710:	mov	r0, r4
   24714:	add	sp, sp, #12
   24718:	pop	{r4, r5, r6, lr}
   2471c:	add	sp, sp, #12
   24720:	bx	lr
   24724:	ldr	r3, [sp, #4]
   24728:	add	r2, r3, #4
   2472c:	str	r2, [sp, #4]
   24730:	ldr	r6, [r3]
   24734:	ldr	r3, [pc, #412]	; 248d8 <__assert_fail@plt+0x13380>
   24738:	ldr	r3, [r3]
   2473c:	cmp	r3, #0
   24740:	blt	247a0 <__assert_fail@plt+0x13248>
   24744:	mov	r2, r6
   24748:	ldr	r1, [pc, #388]	; 248d4 <__assert_fail@plt+0x1337c>
   2474c:	bl	114b0 <fcntl64@plt>
   24750:	subs	r4, r0, #0
   24754:	blt	24768 <__assert_fail@plt+0x13210>
   24758:	mov	r2, #1
   2475c:	ldr	r3, [pc, #372]	; 248d8 <__assert_fail@plt+0x13380>
   24760:	str	r2, [r3]
   24764:	b	24710 <__assert_fail@plt+0x131b8>
   24768:	bl	1142c <__errno_location@plt>
   2476c:	ldr	r3, [r0]
   24770:	cmp	r3, #22
   24774:	bne	24758 <__assert_fail@plt+0x13200>
   24778:	mov	r2, r6
   2477c:	mov	r1, #0
   24780:	mov	r0, r5
   24784:	bl	114b0 <fcntl64@plt>
   24788:	subs	r4, r0, #0
   2478c:	blt	24710 <__assert_fail@plt+0x131b8>
   24790:	mvn	r2, #0
   24794:	ldr	r3, [pc, #316]	; 248d8 <__assert_fail@plt+0x13380>
   24798:	str	r2, [r3]
   2479c:	b	247c4 <__assert_fail@plt+0x1326c>
   247a0:	mov	r2, r6
   247a4:	mov	r1, #0
   247a8:	bl	114b0 <fcntl64@plt>
   247ac:	subs	r4, r0, #0
   247b0:	blt	24710 <__assert_fail@plt+0x131b8>
   247b4:	ldr	r3, [pc, #284]	; 248d8 <__assert_fail@plt+0x13380>
   247b8:	ldr	r3, [r3]
   247bc:	cmn	r3, #1
   247c0:	bne	24710 <__assert_fail@plt+0x131b8>
   247c4:	mov	r1, #1
   247c8:	mov	r0, r4
   247cc:	bl	114b0 <fcntl64@plt>
   247d0:	subs	r2, r0, #0
   247d4:	blt	247f0 <__assert_fail@plt+0x13298>
   247d8:	orr	r2, r2, #1
   247dc:	mov	r1, #2
   247e0:	mov	r0, r4
   247e4:	bl	114b0 <fcntl64@plt>
   247e8:	cmn	r0, #1
   247ec:	bne	24710 <__assert_fail@plt+0x131b8>
   247f0:	bl	1142c <__errno_location@plt>
   247f4:	mov	r5, r0
   247f8:	ldr	r6, [r0]
   247fc:	mov	r0, r4
   24800:	bl	11540 <close@plt>
   24804:	str	r6, [r5]
   24808:	mvn	r4, #0
   2480c:	b	24710 <__assert_fail@plt+0x131b8>
   24810:	cmp	r1, #1
   24814:	beq	248c4 <__assert_fail@plt+0x1336c>
   24818:	bgt	24830 <__assert_fail@plt+0x132d8>
   2481c:	cmp	r1, #0
   24820:	bne	24888 <__assert_fail@plt+0x13330>
   24824:	b	24830 <__assert_fail@plt+0x132d8>
   24828:	cmp	r1, #4
   2482c:	bne	24888 <__assert_fail@plt+0x13330>
   24830:	ldr	r3, [sp, #4]
   24834:	add	r2, r3, #4
   24838:	str	r2, [sp, #4]
   2483c:	ldr	r2, [r3]
   24840:	mov	r0, r5
   24844:	bl	114b0 <fcntl64@plt>
   24848:	mov	r4, r0
   2484c:	b	24710 <__assert_fail@plt+0x131b8>
   24850:	ldr	r3, [pc, #132]	; 248dc <__assert_fail@plt+0x13384>
   24854:	cmp	r1, r3
   24858:	bgt	248a8 <__assert_fail@plt+0x13350>
   2485c:	sub	r3, r3, #1
   24860:	cmp	r1, r3
   24864:	bge	24830 <__assert_fail@plt+0x132d8>
   24868:	sub	r3, r3, #5
   2486c:	cmp	r1, r3
   24870:	beq	248c4 <__assert_fail@plt+0x1336c>
   24874:	add	r3, r3, #1
   24878:	cmp	r1, r3
   2487c:	beq	24830 <__assert_fail@plt+0x132d8>
   24880:	cmp	r1, #1024	; 0x400
   24884:	beq	24830 <__assert_fail@plt+0x132d8>
   24888:	ldr	r3, [sp, #4]
   2488c:	add	r2, r3, #4
   24890:	str	r2, [sp, #4]
   24894:	ldr	r2, [r3]
   24898:	mov	r0, r5
   2489c:	bl	114b0 <fcntl64@plt>
   248a0:	mov	r4, r0
   248a4:	b	24710 <__assert_fail@plt+0x131b8>
   248a8:	ldr	r3, [pc, #48]	; 248e0 <__assert_fail@plt+0x13388>
   248ac:	cmp	r1, r3
   248b0:	beq	24830 <__assert_fail@plt+0x132d8>
   248b4:	blt	248c4 <__assert_fail@plt+0x1336c>
   248b8:	add	r3, r3, #1
   248bc:	cmp	r1, r3
   248c0:	bne	24888 <__assert_fail@plt+0x13330>
   248c4:	mov	r0, r5
   248c8:	bl	114b0 <fcntl64@plt>
   248cc:	mov	r4, r0
   248d0:	b	24710 <__assert_fail@plt+0x131b8>
   248d4:	andeq	r0, r0, r6, lsl #8
   248d8:	strdeq	r7, [r3], -r8
   248dc:	andeq	r0, r0, r7, lsl #8
   248e0:	andeq	r0, r0, r9, lsl #8
   248e4:	push	{r4, lr}
   248e8:	mov	r0, #14
   248ec:	bl	114e0 <nl_langinfo@plt>
   248f0:	cmp	r0, #0
   248f4:	beq	2490c <__assert_fail@plt+0x133b4>
   248f8:	ldrb	r2, [r0]
   248fc:	ldr	r3, [pc, #16]	; 24914 <__assert_fail@plt+0x133bc>
   24900:	cmp	r2, #0
   24904:	moveq	r0, r3
   24908:	pop	{r4, pc}
   2490c:	ldr	r0, [pc]	; 24914 <__assert_fail@plt+0x133bc>
   24910:	pop	{r4, pc}
   24914:	andeq	r6, r2, r4, lsl #10
   24918:	push	{r4, r5, r6, r7, lr}
   2491c:	sub	sp, sp, #12
   24920:	mov	r7, r1
   24924:	mov	r5, r2
   24928:	subs	r6, r0, #0
   2492c:	addeq	r6, sp, #4
   24930:	mov	r0, r6
   24934:	bl	11378 <mbrtowc@plt>
   24938:	mov	r4, r0
   2493c:	cmp	r5, #0
   24940:	cmnne	r0, #3
   24944:	bhi	24954 <__assert_fail@plt+0x133fc>
   24948:	mov	r0, r4
   2494c:	add	sp, sp, #12
   24950:	pop	{r4, r5, r6, r7, pc}
   24954:	mov	r0, #0
   24958:	bl	249bc <__assert_fail@plt+0x13464>
   2495c:	cmp	r0, #0
   24960:	ldrbeq	r3, [r7]
   24964:	streq	r3, [r6]
   24968:	moveq	r4, #1
   2496c:	b	24948 <__assert_fail@plt+0x133f0>
   24970:	push	{r4, r5, r6, lr}
   24974:	mov	r6, r0
   24978:	mov	r5, r1
   2497c:	subs	r4, r2, #0
   24980:	beq	249ac <__assert_fail@plt+0x13454>
   24984:	mov	r1, r4
   24988:	mvn	r0, #0
   2498c:	bl	24ac4 <__assert_fail@plt+0x1356c>
   24990:	cmp	r0, r5
   24994:	bcs	249ac <__assert_fail@plt+0x13454>
   24998:	bl	1142c <__errno_location@plt>
   2499c:	mov	r3, #12
   249a0:	str	r3, [r0]
   249a4:	mov	r0, #0
   249a8:	pop	{r4, r5, r6, pc}
   249ac:	mul	r1, r5, r4
   249b0:	mov	r0, r6
   249b4:	bl	244f8 <__assert_fail@plt+0x12fa0>
   249b8:	pop	{r4, r5, r6, pc}
   249bc:	push	{lr}		; (str lr, [sp, #-4]!)
   249c0:	sub	sp, sp, #268	; 0x10c
   249c4:	ldr	r2, [pc, #68]	; 24a10 <__assert_fail@plt+0x134b8>
   249c8:	add	r1, sp, #4
   249cc:	bl	24a1c <__assert_fail@plt+0x134c4>
   249d0:	cmp	r0, #0
   249d4:	movne	r0, #0
   249d8:	bne	24a08 <__assert_fail@plt+0x134b0>
   249dc:	ldr	r1, [pc, #48]	; 24a14 <__assert_fail@plt+0x134bc>
   249e0:	add	r0, sp, #4
   249e4:	bl	111f8 <strcmp@plt>
   249e8:	cmp	r0, #0
   249ec:	moveq	r0, #0
   249f0:	beq	24a08 <__assert_fail@plt+0x134b0>
   249f4:	ldr	r1, [pc, #28]	; 24a18 <__assert_fail@plt+0x134c0>
   249f8:	add	r0, sp, #4
   249fc:	bl	111f8 <strcmp@plt>
   24a00:	adds	r0, r0, #0
   24a04:	movne	r0, #1
   24a08:	add	sp, sp, #268	; 0x10c
   24a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   24a10:	andeq	r0, r0, r1, lsl #2
   24a14:	andeq	r6, r2, ip, lsl #10
   24a18:	andeq	r6, r2, r0, lsl r5
   24a1c:	push	{r4, r5, r6, lr}
   24a20:	mov	r6, r1
   24a24:	mov	r4, r2
   24a28:	mov	r1, #0
   24a2c:	bl	114bc <setlocale@plt>
   24a30:	subs	r5, r0, #0
   24a34:	beq	24a58 <__assert_fail@plt+0x13500>
   24a38:	mov	r0, r5
   24a3c:	bl	11414 <strlen@plt>
   24a40:	cmp	r4, r0
   24a44:	bhi	24a70 <__assert_fail@plt+0x13518>
   24a48:	cmp	r4, #0
   24a4c:	bne	24a88 <__assert_fail@plt+0x13530>
   24a50:	mov	r0, #34	; 0x22
   24a54:	pop	{r4, r5, r6, pc}
   24a58:	cmp	r4, #0
   24a5c:	beq	24aac <__assert_fail@plt+0x13554>
   24a60:	mov	r3, #0
   24a64:	strb	r3, [r6]
   24a68:	mov	r0, #22
   24a6c:	pop	{r4, r5, r6, pc}
   24a70:	add	r2, r0, #1
   24a74:	mov	r1, r5
   24a78:	mov	r0, r6
   24a7c:	bl	11264 <memcpy@plt>
   24a80:	mov	r0, #0
   24a84:	pop	{r4, r5, r6, pc}
   24a88:	sub	r4, r4, #1
   24a8c:	mov	r2, r4
   24a90:	mov	r1, r5
   24a94:	mov	r0, r6
   24a98:	bl	11264 <memcpy@plt>
   24a9c:	mov	r3, #0
   24aa0:	strb	r3, [r6, r4]
   24aa4:	mov	r0, #34	; 0x22
   24aa8:	pop	{r4, r5, r6, pc}
   24aac:	mov	r0, #22
   24ab0:	pop	{r4, r5, r6, pc}
   24ab4:	push	{r4, lr}
   24ab8:	mov	r1, #0
   24abc:	bl	114bc <setlocale@plt>
   24ac0:	pop	{r4, pc}
   24ac4:	subs	r2, r1, #1
   24ac8:	bxeq	lr
   24acc:	bcc	24ca4 <__assert_fail@plt+0x1374c>
   24ad0:	cmp	r0, r1
   24ad4:	bls	24c88 <__assert_fail@plt+0x13730>
   24ad8:	tst	r1, r2
   24adc:	beq	24c94 <__assert_fail@plt+0x1373c>
   24ae0:	clz	r3, r0
   24ae4:	clz	r2, r1
   24ae8:	sub	r3, r2, r3
   24aec:	rsbs	r3, r3, #31
   24af0:	addne	r3, r3, r3, lsl #1
   24af4:	mov	r2, #0
   24af8:	addne	pc, pc, r3, lsl #2
   24afc:	nop			; (mov r0, r0)
   24b00:	cmp	r0, r1, lsl #31
   24b04:	adc	r2, r2, r2
   24b08:	subcs	r0, r0, r1, lsl #31
   24b0c:	cmp	r0, r1, lsl #30
   24b10:	adc	r2, r2, r2
   24b14:	subcs	r0, r0, r1, lsl #30
   24b18:	cmp	r0, r1, lsl #29
   24b1c:	adc	r2, r2, r2
   24b20:	subcs	r0, r0, r1, lsl #29
   24b24:	cmp	r0, r1, lsl #28
   24b28:	adc	r2, r2, r2
   24b2c:	subcs	r0, r0, r1, lsl #28
   24b30:	cmp	r0, r1, lsl #27
   24b34:	adc	r2, r2, r2
   24b38:	subcs	r0, r0, r1, lsl #27
   24b3c:	cmp	r0, r1, lsl #26
   24b40:	adc	r2, r2, r2
   24b44:	subcs	r0, r0, r1, lsl #26
   24b48:	cmp	r0, r1, lsl #25
   24b4c:	adc	r2, r2, r2
   24b50:	subcs	r0, r0, r1, lsl #25
   24b54:	cmp	r0, r1, lsl #24
   24b58:	adc	r2, r2, r2
   24b5c:	subcs	r0, r0, r1, lsl #24
   24b60:	cmp	r0, r1, lsl #23
   24b64:	adc	r2, r2, r2
   24b68:	subcs	r0, r0, r1, lsl #23
   24b6c:	cmp	r0, r1, lsl #22
   24b70:	adc	r2, r2, r2
   24b74:	subcs	r0, r0, r1, lsl #22
   24b78:	cmp	r0, r1, lsl #21
   24b7c:	adc	r2, r2, r2
   24b80:	subcs	r0, r0, r1, lsl #21
   24b84:	cmp	r0, r1, lsl #20
   24b88:	adc	r2, r2, r2
   24b8c:	subcs	r0, r0, r1, lsl #20
   24b90:	cmp	r0, r1, lsl #19
   24b94:	adc	r2, r2, r2
   24b98:	subcs	r0, r0, r1, lsl #19
   24b9c:	cmp	r0, r1, lsl #18
   24ba0:	adc	r2, r2, r2
   24ba4:	subcs	r0, r0, r1, lsl #18
   24ba8:	cmp	r0, r1, lsl #17
   24bac:	adc	r2, r2, r2
   24bb0:	subcs	r0, r0, r1, lsl #17
   24bb4:	cmp	r0, r1, lsl #16
   24bb8:	adc	r2, r2, r2
   24bbc:	subcs	r0, r0, r1, lsl #16
   24bc0:	cmp	r0, r1, lsl #15
   24bc4:	adc	r2, r2, r2
   24bc8:	subcs	r0, r0, r1, lsl #15
   24bcc:	cmp	r0, r1, lsl #14
   24bd0:	adc	r2, r2, r2
   24bd4:	subcs	r0, r0, r1, lsl #14
   24bd8:	cmp	r0, r1, lsl #13
   24bdc:	adc	r2, r2, r2
   24be0:	subcs	r0, r0, r1, lsl #13
   24be4:	cmp	r0, r1, lsl #12
   24be8:	adc	r2, r2, r2
   24bec:	subcs	r0, r0, r1, lsl #12
   24bf0:	cmp	r0, r1, lsl #11
   24bf4:	adc	r2, r2, r2
   24bf8:	subcs	r0, r0, r1, lsl #11
   24bfc:	cmp	r0, r1, lsl #10
   24c00:	adc	r2, r2, r2
   24c04:	subcs	r0, r0, r1, lsl #10
   24c08:	cmp	r0, r1, lsl #9
   24c0c:	adc	r2, r2, r2
   24c10:	subcs	r0, r0, r1, lsl #9
   24c14:	cmp	r0, r1, lsl #8
   24c18:	adc	r2, r2, r2
   24c1c:	subcs	r0, r0, r1, lsl #8
   24c20:	cmp	r0, r1, lsl #7
   24c24:	adc	r2, r2, r2
   24c28:	subcs	r0, r0, r1, lsl #7
   24c2c:	cmp	r0, r1, lsl #6
   24c30:	adc	r2, r2, r2
   24c34:	subcs	r0, r0, r1, lsl #6
   24c38:	cmp	r0, r1, lsl #5
   24c3c:	adc	r2, r2, r2
   24c40:	subcs	r0, r0, r1, lsl #5
   24c44:	cmp	r0, r1, lsl #4
   24c48:	adc	r2, r2, r2
   24c4c:	subcs	r0, r0, r1, lsl #4
   24c50:	cmp	r0, r1, lsl #3
   24c54:	adc	r2, r2, r2
   24c58:	subcs	r0, r0, r1, lsl #3
   24c5c:	cmp	r0, r1, lsl #2
   24c60:	adc	r2, r2, r2
   24c64:	subcs	r0, r0, r1, lsl #2
   24c68:	cmp	r0, r1, lsl #1
   24c6c:	adc	r2, r2, r2
   24c70:	subcs	r0, r0, r1, lsl #1
   24c74:	cmp	r0, r1
   24c78:	adc	r2, r2, r2
   24c7c:	subcs	r0, r0, r1
   24c80:	mov	r0, r2
   24c84:	bx	lr
   24c88:	moveq	r0, #1
   24c8c:	movne	r0, #0
   24c90:	bx	lr
   24c94:	clz	r2, r1
   24c98:	rsb	r2, r2, #31
   24c9c:	lsr	r0, r0, r2
   24ca0:	bx	lr
   24ca4:	cmp	r0, #0
   24ca8:	mvnne	r0, #0
   24cac:	b	25020 <__assert_fail@plt+0x13ac8>
   24cb0:	cmp	r1, #0
   24cb4:	beq	24ca4 <__assert_fail@plt+0x1374c>
   24cb8:	push	{r0, r1, lr}
   24cbc:	bl	24ac4 <__assert_fail@plt+0x1356c>
   24cc0:	pop	{r1, r2, lr}
   24cc4:	mul	r3, r2, r0
   24cc8:	sub	r1, r1, r3
   24ccc:	bx	lr
   24cd0:	cmp	r1, #0
   24cd4:	beq	24ee0 <__assert_fail@plt+0x13988>
   24cd8:	eor	ip, r0, r1
   24cdc:	rsbmi	r1, r1, #0
   24ce0:	subs	r2, r1, #1
   24ce4:	beq	24eac <__assert_fail@plt+0x13954>
   24ce8:	movs	r3, r0
   24cec:	rsbmi	r3, r0, #0
   24cf0:	cmp	r3, r1
   24cf4:	bls	24eb8 <__assert_fail@plt+0x13960>
   24cf8:	tst	r1, r2
   24cfc:	beq	24ec8 <__assert_fail@plt+0x13970>
   24d00:	clz	r2, r3
   24d04:	clz	r0, r1
   24d08:	sub	r2, r0, r2
   24d0c:	rsbs	r2, r2, #31
   24d10:	addne	r2, r2, r2, lsl #1
   24d14:	mov	r0, #0
   24d18:	addne	pc, pc, r2, lsl #2
   24d1c:	nop			; (mov r0, r0)
   24d20:	cmp	r3, r1, lsl #31
   24d24:	adc	r0, r0, r0
   24d28:	subcs	r3, r3, r1, lsl #31
   24d2c:	cmp	r3, r1, lsl #30
   24d30:	adc	r0, r0, r0
   24d34:	subcs	r3, r3, r1, lsl #30
   24d38:	cmp	r3, r1, lsl #29
   24d3c:	adc	r0, r0, r0
   24d40:	subcs	r3, r3, r1, lsl #29
   24d44:	cmp	r3, r1, lsl #28
   24d48:	adc	r0, r0, r0
   24d4c:	subcs	r3, r3, r1, lsl #28
   24d50:	cmp	r3, r1, lsl #27
   24d54:	adc	r0, r0, r0
   24d58:	subcs	r3, r3, r1, lsl #27
   24d5c:	cmp	r3, r1, lsl #26
   24d60:	adc	r0, r0, r0
   24d64:	subcs	r3, r3, r1, lsl #26
   24d68:	cmp	r3, r1, lsl #25
   24d6c:	adc	r0, r0, r0
   24d70:	subcs	r3, r3, r1, lsl #25
   24d74:	cmp	r3, r1, lsl #24
   24d78:	adc	r0, r0, r0
   24d7c:	subcs	r3, r3, r1, lsl #24
   24d80:	cmp	r3, r1, lsl #23
   24d84:	adc	r0, r0, r0
   24d88:	subcs	r3, r3, r1, lsl #23
   24d8c:	cmp	r3, r1, lsl #22
   24d90:	adc	r0, r0, r0
   24d94:	subcs	r3, r3, r1, lsl #22
   24d98:	cmp	r3, r1, lsl #21
   24d9c:	adc	r0, r0, r0
   24da0:	subcs	r3, r3, r1, lsl #21
   24da4:	cmp	r3, r1, lsl #20
   24da8:	adc	r0, r0, r0
   24dac:	subcs	r3, r3, r1, lsl #20
   24db0:	cmp	r3, r1, lsl #19
   24db4:	adc	r0, r0, r0
   24db8:	subcs	r3, r3, r1, lsl #19
   24dbc:	cmp	r3, r1, lsl #18
   24dc0:	adc	r0, r0, r0
   24dc4:	subcs	r3, r3, r1, lsl #18
   24dc8:	cmp	r3, r1, lsl #17
   24dcc:	adc	r0, r0, r0
   24dd0:	subcs	r3, r3, r1, lsl #17
   24dd4:	cmp	r3, r1, lsl #16
   24dd8:	adc	r0, r0, r0
   24ddc:	subcs	r3, r3, r1, lsl #16
   24de0:	cmp	r3, r1, lsl #15
   24de4:	adc	r0, r0, r0
   24de8:	subcs	r3, r3, r1, lsl #15
   24dec:	cmp	r3, r1, lsl #14
   24df0:	adc	r0, r0, r0
   24df4:	subcs	r3, r3, r1, lsl #14
   24df8:	cmp	r3, r1, lsl #13
   24dfc:	adc	r0, r0, r0
   24e00:	subcs	r3, r3, r1, lsl #13
   24e04:	cmp	r3, r1, lsl #12
   24e08:	adc	r0, r0, r0
   24e0c:	subcs	r3, r3, r1, lsl #12
   24e10:	cmp	r3, r1, lsl #11
   24e14:	adc	r0, r0, r0
   24e18:	subcs	r3, r3, r1, lsl #11
   24e1c:	cmp	r3, r1, lsl #10
   24e20:	adc	r0, r0, r0
   24e24:	subcs	r3, r3, r1, lsl #10
   24e28:	cmp	r3, r1, lsl #9
   24e2c:	adc	r0, r0, r0
   24e30:	subcs	r3, r3, r1, lsl #9
   24e34:	cmp	r3, r1, lsl #8
   24e38:	adc	r0, r0, r0
   24e3c:	subcs	r3, r3, r1, lsl #8
   24e40:	cmp	r3, r1, lsl #7
   24e44:	adc	r0, r0, r0
   24e48:	subcs	r3, r3, r1, lsl #7
   24e4c:	cmp	r3, r1, lsl #6
   24e50:	adc	r0, r0, r0
   24e54:	subcs	r3, r3, r1, lsl #6
   24e58:	cmp	r3, r1, lsl #5
   24e5c:	adc	r0, r0, r0
   24e60:	subcs	r3, r3, r1, lsl #5
   24e64:	cmp	r3, r1, lsl #4
   24e68:	adc	r0, r0, r0
   24e6c:	subcs	r3, r3, r1, lsl #4
   24e70:	cmp	r3, r1, lsl #3
   24e74:	adc	r0, r0, r0
   24e78:	subcs	r3, r3, r1, lsl #3
   24e7c:	cmp	r3, r1, lsl #2
   24e80:	adc	r0, r0, r0
   24e84:	subcs	r3, r3, r1, lsl #2
   24e88:	cmp	r3, r1, lsl #1
   24e8c:	adc	r0, r0, r0
   24e90:	subcs	r3, r3, r1, lsl #1
   24e94:	cmp	r3, r1
   24e98:	adc	r0, r0, r0
   24e9c:	subcs	r3, r3, r1
   24ea0:	cmp	ip, #0
   24ea4:	rsbmi	r0, r0, #0
   24ea8:	bx	lr
   24eac:	teq	ip, r0
   24eb0:	rsbmi	r0, r0, #0
   24eb4:	bx	lr
   24eb8:	movcc	r0, #0
   24ebc:	asreq	r0, ip, #31
   24ec0:	orreq	r0, r0, #1
   24ec4:	bx	lr
   24ec8:	clz	r2, r1
   24ecc:	rsb	r2, r2, #31
   24ed0:	cmp	ip, #0
   24ed4:	lsr	r0, r3, r2
   24ed8:	rsbmi	r0, r0, #0
   24edc:	bx	lr
   24ee0:	cmp	r0, #0
   24ee4:	mvngt	r0, #-2147483648	; 0x80000000
   24ee8:	movlt	r0, #-2147483648	; 0x80000000
   24eec:	b	25020 <__assert_fail@plt+0x13ac8>
   24ef0:	cmp	r1, #0
   24ef4:	beq	24ee0 <__assert_fail@plt+0x13988>
   24ef8:	push	{r0, r1, lr}
   24efc:	bl	24cd8 <__assert_fail@plt+0x13780>
   24f00:	pop	{r1, r2, lr}
   24f04:	mul	r3, r2, r0
   24f08:	sub	r1, r1, r3
   24f0c:	bx	lr
   24f10:	cmp	r3, #0
   24f14:	cmpeq	r2, #0
   24f18:	bne	24f3c <__assert_fail@plt+0x139e4>
   24f1c:	cmp	r1, #0
   24f20:	movlt	r1, #-2147483648	; 0x80000000
   24f24:	movlt	r0, #0
   24f28:	blt	24f38 <__assert_fail@plt+0x139e0>
   24f2c:	cmpeq	r0, #0
   24f30:	mvnne	r1, #-2147483648	; 0x80000000
   24f34:	mvnne	r0, #0
   24f38:	b	25020 <__assert_fail@plt+0x13ac8>
   24f3c:	sub	sp, sp, #8
   24f40:	push	{sp, lr}
   24f44:	cmp	r1, #0
   24f48:	blt	24f68 <__assert_fail@plt+0x13a10>
   24f4c:	cmp	r3, #0
   24f50:	blt	24f9c <__assert_fail@plt+0x13a44>
   24f54:	bl	25030 <__assert_fail@plt+0x13ad8>
   24f58:	ldr	lr, [sp, #4]
   24f5c:	add	sp, sp, #8
   24f60:	pop	{r2, r3}
   24f64:	bx	lr
   24f68:	rsbs	r0, r0, #0
   24f6c:	sbc	r1, r1, r1, lsl #1
   24f70:	cmp	r3, #0
   24f74:	blt	24fc0 <__assert_fail@plt+0x13a68>
   24f78:	bl	25030 <__assert_fail@plt+0x13ad8>
   24f7c:	ldr	lr, [sp, #4]
   24f80:	add	sp, sp, #8
   24f84:	pop	{r2, r3}
   24f88:	rsbs	r0, r0, #0
   24f8c:	sbc	r1, r1, r1, lsl #1
   24f90:	rsbs	r2, r2, #0
   24f94:	sbc	r3, r3, r3, lsl #1
   24f98:	bx	lr
   24f9c:	rsbs	r2, r2, #0
   24fa0:	sbc	r3, r3, r3, lsl #1
   24fa4:	bl	25030 <__assert_fail@plt+0x13ad8>
   24fa8:	ldr	lr, [sp, #4]
   24fac:	add	sp, sp, #8
   24fb0:	pop	{r2, r3}
   24fb4:	rsbs	r0, r0, #0
   24fb8:	sbc	r1, r1, r1, lsl #1
   24fbc:	bx	lr
   24fc0:	rsbs	r2, r2, #0
   24fc4:	sbc	r3, r3, r3, lsl #1
   24fc8:	bl	25030 <__assert_fail@plt+0x13ad8>
   24fcc:	ldr	lr, [sp, #4]
   24fd0:	add	sp, sp, #8
   24fd4:	pop	{r2, r3}
   24fd8:	rsbs	r2, r2, #0
   24fdc:	sbc	r3, r3, r3, lsl #1
   24fe0:	bx	lr
   24fe4:	cmp	r3, #0
   24fe8:	cmpeq	r2, #0
   24fec:	bne	25004 <__assert_fail@plt+0x13aac>
   24ff0:	cmp	r1, #0
   24ff4:	cmpeq	r0, #0
   24ff8:	mvnne	r1, #0
   24ffc:	mvnne	r0, #0
   25000:	b	25020 <__assert_fail@plt+0x13ac8>
   25004:	sub	sp, sp, #8
   25008:	push	{sp, lr}
   2500c:	bl	25030 <__assert_fail@plt+0x13ad8>
   25010:	ldr	lr, [sp, #4]
   25014:	add	sp, sp, #8
   25018:	pop	{r2, r3}
   2501c:	bx	lr
   25020:	push	{r1, lr}
   25024:	mov	r0, #8
   25028:	bl	111d4 <raise@plt>
   2502c:	pop	{r1, pc}
   25030:	cmp	r1, r3
   25034:	push	{r4, r5, r6, r7, r8, r9, lr}
   25038:	cmpeq	r0, r2
   2503c:	mov	r4, r0
   25040:	mov	r5, r1
   25044:	ldr	r9, [sp, #28]
   25048:	movcc	r0, #0
   2504c:	movcc	r1, #0
   25050:	bcc	25148 <__assert_fail@plt+0x13bf0>
   25054:	cmp	r3, #0
   25058:	clzeq	ip, r2
   2505c:	clzne	ip, r3
   25060:	addeq	ip, ip, #32
   25064:	cmp	r5, #0
   25068:	clzeq	r1, r4
   2506c:	addeq	r1, r1, #32
   25070:	clzne	r1, r5
   25074:	sub	ip, ip, r1
   25078:	sub	lr, ip, #32
   2507c:	lsl	r7, r3, ip
   25080:	rsb	r8, ip, #32
   25084:	orr	r7, r7, r2, lsl lr
   25088:	orr	r7, r7, r2, lsr r8
   2508c:	lsl	r6, r2, ip
   25090:	cmp	r5, r7
   25094:	cmpeq	r4, r6
   25098:	movcc	r0, #0
   2509c:	movcc	r1, #0
   250a0:	bcc	250bc <__assert_fail@plt+0x13b64>
   250a4:	mov	r3, #1
   250a8:	subs	r4, r4, r6
   250ac:	lsl	r1, r3, lr
   250b0:	lsl	r0, r3, ip
   250b4:	orr	r1, r1, r3, lsr r8
   250b8:	sbc	r5, r5, r7
   250bc:	cmp	ip, #0
   250c0:	beq	25148 <__assert_fail@plt+0x13bf0>
   250c4:	lsrs	r3, r7, #1
   250c8:	rrx	r2, r6
   250cc:	mov	r6, ip
   250d0:	b	250f4 <__assert_fail@plt+0x13b9c>
   250d4:	subs	r4, r4, r2
   250d8:	sbc	r5, r5, r3
   250dc:	adds	r4, r4, r4
   250e0:	adc	r5, r5, r5
   250e4:	adds	r4, r4, #1
   250e8:	adc	r5, r5, #0
   250ec:	subs	r6, r6, #1
   250f0:	beq	25110 <__assert_fail@plt+0x13bb8>
   250f4:	cmp	r5, r3
   250f8:	cmpeq	r4, r2
   250fc:	bcs	250d4 <__assert_fail@plt+0x13b7c>
   25100:	adds	r4, r4, r4
   25104:	adc	r5, r5, r5
   25108:	subs	r6, r6, #1
   2510c:	bne	250f4 <__assert_fail@plt+0x13b9c>
   25110:	lsr	r6, r4, ip
   25114:	lsr	r7, r5, ip
   25118:	orr	r6, r6, r5, lsl r8
   2511c:	adds	r2, r0, r4
   25120:	orr	r6, r6, r5, lsr lr
   25124:	adc	r3, r1, r5
   25128:	lsl	r1, r7, ip
   2512c:	orr	r1, r1, r6, lsl lr
   25130:	lsl	r0, r6, ip
   25134:	orr	r1, r1, r6, lsr r8
   25138:	subs	r0, r2, r0
   2513c:	mov	r4, r6
   25140:	mov	r5, r7
   25144:	sbc	r1, r3, r1
   25148:	cmp	r9, #0
   2514c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   25150:	strd	r4, [r9]
   25154:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25158:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2515c:	mov	r7, r0
   25160:	ldr	r6, [pc, #72]	; 251b0 <__assert_fail@plt+0x13c58>
   25164:	ldr	r5, [pc, #72]	; 251b4 <__assert_fail@plt+0x13c5c>
   25168:	add	r6, pc, r6
   2516c:	add	r5, pc, r5
   25170:	sub	r6, r6, r5
   25174:	mov	r8, r1
   25178:	mov	r9, r2
   2517c:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   25180:	asrs	r6, r6, #2
   25184:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25188:	mov	r4, #0
   2518c:	add	r4, r4, #1
   25190:	ldr	r3, [r5], #4
   25194:	mov	r2, r9
   25198:	mov	r1, r8
   2519c:	mov	r0, r7
   251a0:	blx	r3
   251a4:	cmp	r6, r4
   251a8:	bne	2518c <__assert_fail@plt+0x13c34>
   251ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   251b0:	andeq	r1, r1, r0, lsr #27
   251b4:	muleq	r1, r8, sp
   251b8:	bx	lr
   251bc:	ldr	r3, [pc, #12]	; 251d0 <__assert_fail@plt+0x13c78>
   251c0:	mov	r1, #0
   251c4:	add	r3, pc, r3
   251c8:	ldr	r2, [r3]
   251cc:	b	11450 <__cxa_atexit@plt>
   251d0:	andeq	r1, r1, ip, lsl #31

Disassembly of section .fini:

000251d4 <.fini>:
   251d4:	push	{r3, lr}
   251d8:	pop	{r3, pc}
