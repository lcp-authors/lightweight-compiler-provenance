
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c68 <.init>:
   10c68:	push	{r3, lr}
   10c6c:	bl	10ed4 <__assert_fail@plt+0x48>
   10c70:	pop	{r3, pc}

Disassembly of section .plt:

00010c74 <calloc@plt-0x14>:
   10c74:	push	{lr}		; (str lr, [sp, #-4]!)
   10c78:	ldr	lr, [pc, #4]	; 10c84 <calloc@plt-0x4>
   10c7c:	add	lr, pc, lr
   10c80:	ldr	pc, [lr, #8]!
   10c84:	andeq	r4, r1, ip, ror r3

00010c88 <calloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #892]!	; 0x37c

00010c94 <strtol@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #884]!	; 0x374

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #876]!	; 0x36c

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #868]!	; 0x364

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #860]!	; 0x35c

00010cc4 <ferror@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #852]!	; 0x354

00010cd0 <_exit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #844]!	; 0x34c

00010cdc <memcpy@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #836]!	; 0x344

00010ce8 <mbsinit@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #828]!	; 0x33c

00010cf4 <dcgettext@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #820]!	; 0x334

00010d00 <realloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #812]!	; 0x32c

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #804]!	; 0x324

00010d18 <fwrite@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #796]!	; 0x31c

00010d24 <lseek64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #788]!	; 0x314

00010d30 <__ctype_get_mb_cur_max@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #780]!	; 0x30c

00010d3c <__fpending@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #772]!	; 0x304

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #764]!	; 0x2fc

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #748]!	; 0x2ec

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #740]!	; 0x2e4

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #732]!	; 0x2dc

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #716]!	; 0x2cc

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #708]!	; 0x2c4

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #700]!	; 0x2bc

00010db4 <bcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dcc <fprintf@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #668]!	; 0x29c

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #660]!	; 0x294

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #652]!	; 0x28c

00010dfc <fileno@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #644]!	; 0x284

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #636]!	; 0x27c

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #628]!	; 0x274

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #620]!	; 0x26c

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #612]!	; 0x264

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #604]!	; 0x25c

00010e44 <fputc@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #596]!	; 0x254

00010e50 <putc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #588]!	; 0x24c

00010e5c <getdelim@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #580]!	; 0x244

00010e68 <fputs@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #572]!	; 0x23c

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #564]!	; 0x234

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #556]!	; 0x22c

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #548]!	; 0x224

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d6c <__libc_start_main@plt>
   10ec4:	bl	10e80 <abort@plt>
   10ec8:	andeq	r4, r1, r0, ror #1
   10ecc:	andeq	r0, r1, r8, lsl #31
   10ed0:	andeq	r4, r1, r0, lsl #1
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d84 <__gmon_start__@plt>
   10ef0:	andeq	r4, r1, ip, lsl r1
   10ef4:	strheq	r0, [r0], -ip
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x8c>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x90>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x94>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r5, r2, r0, lsl r1
   10f1c:	andeq	r5, r2, r0, lsl r1
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc4>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xcc>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r5, r2, r0, lsl r1
   10f54:	andeq	r5, r2, r0, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf4>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r5, r2, r4, lsr r1
   10f84:	b	10f24 <__assert_fail@plt+0x98>
   10f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f8c:	add	fp, sp, #28
   10f90:	sub	sp, sp, #28
   10f94:	mov	r4, r0
   10f98:	ldr	r0, [r1]
   10f9c:	mov	r6, r1
   10fa0:	cmp	r0, #0
   10fa4:	movweq	r0, #16648	; 0x4108
   10fa8:	movteq	r0, #1
   10fac:	bl	117e4 <__assert_fail@plt+0x958>
   10fb0:	movw	r0, #5884	; 0x16fc
   10fb4:	movt	r0, #1
   10fb8:	bl	140e4 <__assert_fail@plt+0x3258>
   10fbc:	cmp	r0, #0
   10fc0:	bne	11480 <__assert_fail@plt+0x5f4>
   10fc4:	movw	r0, #1026	; 0x402
   10fc8:	str	r0, [sp, #16]
   10fcc:	movw	r0, #1026	; 0x402
   10fd0:	bl	137bc <__assert_fail@plt+0x2930>
   10fd4:	str	r0, [sp, #20]
   10fd8:	movw	r0, #1026	; 0x402
   10fdc:	bl	137bc <__assert_fail@plt+0x2930>
   10fe0:	mov	r1, #0
   10fe4:	movw	r2, #16690	; 0x4132
   10fe8:	movw	r3, #17176	; 0x4318
   10fec:	mov	r5, r0
   10ff0:	mov	r9, #0
   10ff4:	strb	r1, [r0]
   10ff8:	mov	r0, #10
   10ffc:	movt	r2, #1
   11000:	movt	r3, #1
   11004:	str	r0, [sp, #12]
   11008:	mov	r0, #0
   1100c:	str	r0, [sp, #8]
   11010:	str	r1, [sp]
   11014:	mov	r0, r4
   11018:	mov	r1, r6
   1101c:	mov	sl, r4
   11020:	mov	r7, r6
   11024:	mov	r4, r2
   11028:	mov	r8, r3
   1102c:	bl	10d90 <getopt_long@plt>
   11030:	cmp	r0, #82	; 0x52
   11034:	ble	110ec <__assert_fail@plt+0x260>
   11038:	movw	r6, #20784	; 0x5130
   1103c:	cmp	r0, #83	; 0x53
   11040:	movt	r6, #2
   11044:	bne	11120 <__assert_fail@plt+0x294>
   11048:	ldr	r9, [r6]
   1104c:	bl	10dd8 <__errno_location@plt>
   11050:	mov	r1, r0
   11054:	mov	r0, #0
   11058:	mov	r2, #10
   1105c:	str	r9, [sp, #4]
   11060:	str	r0, [r1]
   11064:	str	r1, [sp, #8]
   11068:	mov	r0, r9
   1106c:	add	r1, sp, #24
   11070:	bl	10c94 <strtol@plt>
   11074:	cmp	r0, #0
   11078:	beq	110a4 <__assert_fail@plt+0x218>
   1107c:	add	r1, r0, #-2147483647	; 0x80000001
   11080:	mov	r2, r4
   11084:	mov	r3, r8
   11088:	cmp	r1, #1
   1108c:	bhi	110bc <__assert_fail@plt+0x230>
   11090:	ldr	r1, [sp, #8]
   11094:	ldr	r1, [r1]
   11098:	cmp	r1, #0
   1109c:	beq	110bc <__assert_fail@plt+0x230>
   110a0:	b	113f4 <__assert_fail@plt+0x568>
   110a4:	ldr	r2, [r6]
   110a8:	ldr	r1, [sp, #24]
   110ac:	mov	r3, r8
   110b0:	cmp	r1, r2
   110b4:	mov	r2, r4
   110b8:	beq	11410 <__assert_fail@plt+0x584>
   110bc:	ldr	r8, [sp, #24]
   110c0:	ldrb	r1, [r8]
   110c4:	cmp	r1, #0
   110c8:	bne	11434 <__assert_fail@plt+0x5a8>
   110cc:	mov	r4, sl
   110d0:	mov	r6, r7
   110d4:	mov	r9, #1
   110d8:	cmp	r0, #2
   110dc:	mov	r1, #0
   110e0:	str	r0, [sp, #8]
   110e4:	bcc	11010 <__assert_fail@plt+0x184>
   110e8:	b	11458 <__assert_fail@plt+0x5cc>
   110ec:	cmn	r0, #1
   110f0:	beq	11138 <__assert_fail@plt+0x2ac>
   110f4:	cmp	r0, #48	; 0x30
   110f8:	ldr	r0, [sp, #8]
   110fc:	bne	114d0 <__assert_fail@plt+0x644>
   11100:	mov	r1, #0
   11104:	mov	r2, r4
   11108:	mov	r3, r8
   1110c:	mov	r4, sl
   11110:	mov	r6, r7
   11114:	str	r1, [sp, #12]
   11118:	mov	r1, #0
   1111c:	b	1100c <__assert_fail@plt+0x180>
   11120:	cmp	r0, #118	; 0x76
   11124:	bne	113ac <__assert_fail@plt+0x520>
   11128:	movw	r0, #16648	; 0x4108
   1112c:	movt	r0, #1
   11130:	bl	115c0 <__assert_fail@plt+0x734>
   11134:	b	1139c <__assert_fail@plt+0x510>
   11138:	movw	r0, #20760	; 0x5118
   1113c:	ldr	r1, [sp, #8]
   11140:	movt	r0, #2
   11144:	ldr	r0, [r0]
   11148:	cmp	r0, sl
   1114c:	bne	114ac <__assert_fail@plt+0x620>
   11150:	movw	r4, #20780	; 0x512c
   11154:	cmp	r9, #0
   11158:	movt	r4, #2
   1115c:	beq	11184 <__assert_fail@plt+0x2f8>
   11160:	cmp	r1, #0
   11164:	ldr	r1, [r4]
   11168:	mov	r0, #49	; 0x31
   1116c:	movweq	r0, #48	; 0x30
   11170:	bl	10e44 <fputc@plt>
   11174:	ldr	r1, [r4]
   11178:	mov	r0, #0
   1117c:	bl	10e44 <fputc@plt>
   11180:	b	111a4 <__assert_fail@plt+0x318>
   11184:	ldr	r3, [r4]
   11188:	movw	r0, #17240	; 0x4358
   1118c:	mov	r1, #1
   11190:	mov	r2, #10
   11194:	movt	r0, #1
   11198:	bl	10d18 <fwrite@plt>
   1119c:	cmp	r0, #10
   111a0:	bne	114d8 <__assert_fail@plt+0x64c>
   111a4:	movw	r0, #20776	; 0x5128
   111a8:	ldr	r4, [sp, #12]
   111ac:	add	r1, sp, #16
   111b0:	movt	r0, #2
   111b4:	ldr	r3, [r0]
   111b8:	add	r0, sp, #20
   111bc:	mov	r2, r4
   111c0:	bl	10e5c <getdelim@plt>
   111c4:	mov	r1, r0
   111c8:	ldr	r0, [sp, #20]
   111cc:	cmp	r1, #1
   111d0:	blt	1138c <__assert_fail@plt+0x500>
   111d4:	movw	sl, #1026	; 0x402
   111d8:	mov	r7, #0
   111dc:	sub	r1, r1, #1
   111e0:	ldrb	r2, [r0, r1]
   111e4:	cmp	r4, r2
   111e8:	bne	111f8 <__assert_fail@plt+0x36c>
   111ec:	mov	r2, #0
   111f0:	strb	r2, [r0, r1]
   111f4:	b	1121c <__assert_fail@plt+0x390>
   111f8:	movw	r1, #16796	; 0x419c
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10cf4 <dcgettext@plt>
   1120c:	mov	r2, r0
   11210:	mov	r0, #0
   11214:	mov	r1, #0
   11218:	bl	10d54 <error@plt>
   1121c:	ldrb	r2, [r5]
   11220:	mov	r1, r5
   11224:	cmp	r2, #0
   11228:	beq	1127c <__assert_fail@plt+0x3f0>
   1122c:	ldr	r0, [sp, #20]
   11230:	ldrb	r1, [r0]
   11234:	cmp	r2, r1
   11238:	mov	r1, r5
   1123c:	bne	1127c <__assert_fail@plt+0x3f0>
   11240:	mov	r1, #1
   11244:	cmn	r1, #-2147483647	; 0x80000001
   11248:	beq	11274 <__assert_fail@plt+0x3e8>
   1124c:	ldrb	r3, [r5, r1]
   11250:	add	r2, r1, #1
   11254:	cmp	r3, #0
   11258:	beq	1126c <__assert_fail@plt+0x3e0>
   1125c:	ldrb	r1, [r0, r1]
   11260:	cmp	r3, r1
   11264:	mov	r1, r2
   11268:	beq	11244 <__assert_fail@plt+0x3b8>
   1126c:	add	r0, r5, r2
   11270:	b	11278 <__assert_fail@plt+0x3ec>
   11274:	add	r0, r5, r1
   11278:	sub	r1, r0, #1
   1127c:	sub	r8, r1, r5
   11280:	mov	r1, #0
   11284:	movw	r4, #20780	; 0x512c
   11288:	sub	r6, r8, r7
   1128c:	movt	r4, #2
   11290:	add	r0, r6, #32768	; 0x8000
   11294:	cmp	r1, r0, lsr #16
   11298:	rsbne	r6, r7, #0
   1129c:	movwne	r8, #0
   112a0:	cmp	r9, #0
   112a4:	bne	1130c <__assert_fail@plt+0x480>
   112a8:	ldr	r1, [r4]
   112ac:	add	r0, r6, #127	; 0x7f
   112b0:	cmp	r0, #255	; 0xff
   112b4:	bcc	112fc <__assert_fail@plt+0x470>
   112b8:	mov	r0, #128	; 0x80
   112bc:	bl	10e50 <putc@plt>
   112c0:	cmn	r0, #1
   112c4:	beq	113a8 <__assert_fail@plt+0x51c>
   112c8:	cmp	r6, #32768	; 0x8000
   112cc:	bge	113bc <__assert_fail@plt+0x530>
   112d0:	cmn	r6, #32768	; 0x8000
   112d4:	blt	113d4 <__assert_fail@plt+0x548>
   112d8:	ldr	r7, [r4]
   112dc:	asr	r0, r6, #8
   112e0:	mov	r1, r7
   112e4:	bl	10e50 <putc@plt>
   112e8:	cmn	r0, #1
   112ec:	beq	113a8 <__assert_fail@plt+0x51c>
   112f0:	mov	r0, r6
   112f4:	mov	r1, r7
   112f8:	b	11300 <__assert_fail@plt+0x474>
   112fc:	mov	r0, r6
   11300:	bl	10e50 <putc@plt>
   11304:	cmn	r0, #1
   11308:	beq	113a8 <__assert_fail@plt+0x51c>
   1130c:	ldr	r0, [sp, #20]
   11310:	ldr	r1, [r4]
   11314:	add	r0, r0, r8
   11318:	bl	10e68 <fputs@plt>
   1131c:	cmn	r0, #1
   11320:	beq	113a8 <__assert_fail@plt+0x51c>
   11324:	ldr	r1, [r4]
   11328:	mov	r0, #0
   1132c:	bl	10e50 <putc@plt>
   11330:	cmn	r0, #1
   11334:	beq	113a8 <__assert_fail@plt+0x51c>
   11338:	movw	r0, #20776	; 0x5128
   1133c:	ldr	r4, [sp, #12]
   11340:	ldr	r6, [sp, #20]
   11344:	ldr	r7, [sp, #16]
   11348:	add	r1, sp, #16
   1134c:	str	r5, [sp, #20]
   11350:	str	sl, [sp, #16]
   11354:	movt	r0, #2
   11358:	ldr	r3, [r0]
   1135c:	add	r0, sp, #20
   11360:	mov	r2, r4
   11364:	bl	10e5c <getdelim@plt>
   11368:	mov	r1, r0
   1136c:	ldr	r0, [sp, #20]
   11370:	mov	sl, r7
   11374:	mov	r9, #0
   11378:	mov	r5, r6
   1137c:	mov	r7, r8
   11380:	cmp	r1, #0
   11384:	bgt	111dc <__assert_fail@plt+0x350>
   11388:	b	11390 <__assert_fail@plt+0x504>
   1138c:	mov	r6, r5
   11390:	bl	13cdc <__assert_fail@plt+0x2e50>
   11394:	mov	r0, r6
   11398:	bl	13cdc <__assert_fail@plt+0x2e50>
   1139c:	mov	r0, #0
   113a0:	sub	sp, fp, #28
   113a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a8:	bl	1158c <__assert_fail@plt+0x700>
   113ac:	cmp	r0, #104	; 0x68
   113b0:	bne	114d0 <__assert_fail@plt+0x644>
   113b4:	mov	r0, #0
   113b8:	bl	114ec <__assert_fail@plt+0x660>
   113bc:	movw	r0, #17111	; 0x42d7
   113c0:	movw	r1, #17125	; 0x42e5
   113c4:	movw	r3, #17134	; 0x42ee
   113c8:	mov	r2, #104	; 0x68
   113cc:	movt	r0, #1
   113d0:	b	113e8 <__assert_fail@plt+0x55c>
   113d4:	movw	r0, #17161	; 0x4309
   113d8:	movw	r1, #17125	; 0x42e5
   113dc:	movw	r3, #17134	; 0x42ee
   113e0:	mov	r2, #105	; 0x69
   113e4:	movt	r0, #1
   113e8:	movt	r1, #1
   113ec:	movt	r3, #1
   113f0:	bl	10e8c <__assert_fail@plt>
   113f4:	movw	r1, #16918	; 0x4216
   113f8:	mov	r0, #0
   113fc:	mov	r2, #5
   11400:	movt	r1, #1
   11404:	bl	10cf4 <dcgettext@plt>
   11408:	mov	r2, r0
   1140c:	b	11450 <__assert_fail@plt+0x5c4>
   11410:	movw	r1, #16859	; 0x41db
   11414:	mov	r0, #0
   11418:	mov	r2, #5
   1141c:	movt	r1, #1
   11420:	bl	10cf4 <dcgettext@plt>
   11424:	mov	r2, r0
   11428:	mov	r0, #1
   1142c:	mov	r1, #0
   11430:	bl	10d54 <error@plt>
   11434:	movw	r1, #16970	; 0x424a
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10cf4 <dcgettext@plt>
   11448:	mov	r2, r0
   1144c:	str	r8, [sp]
   11450:	ldr	r3, [sp, #4]
   11454:	b	11474 <__assert_fail@plt+0x5e8>
   11458:	movw	r1, #16696	; 0x4138
   1145c:	mov	r0, #0
   11460:	mov	r2, #5
   11464:	movt	r1, #1
   11468:	bl	10cf4 <dcgettext@plt>
   1146c:	ldr	r3, [sp, #8]
   11470:	mov	r2, r0
   11474:	mov	r0, #1
   11478:	mov	r1, #0
   1147c:	bl	10d54 <error@plt>
   11480:	bl	10dd8 <__errno_location@plt>
   11484:	ldr	r4, [r0]
   11488:	movw	r1, #16655	; 0x410f
   1148c:	movt	r1, #1
   11490:	mov	r0, #0
   11494:	mov	r2, #5
   11498:	bl	10cf4 <dcgettext@plt>
   1149c:	mov	r2, r0
   114a0:	mov	r0, #1
   114a4:	mov	r1, r4
   114a8:	bl	10d54 <error@plt>
   114ac:	movw	r1, #16739	; 0x4163
   114b0:	mov	r0, #0
   114b4:	mov	r2, #5
   114b8:	movt	r1, #1
   114bc:	bl	10cf4 <dcgettext@plt>
   114c0:	mov	r2, r0
   114c4:	mov	r0, #0
   114c8:	mov	r1, #0
   114cc:	bl	10d54 <error@plt>
   114d0:	mov	r0, #1
   114d4:	bl	114ec <__assert_fail@plt+0x660>
   114d8:	bl	10dd8 <__errno_location@plt>
   114dc:	ldr	r4, [r0]
   114e0:	movw	r1, #16761	; 0x4179
   114e4:	movt	r1, #1
   114e8:	b	11490 <__assert_fail@plt+0x604>
   114ec:	push	{fp, lr}
   114f0:	mov	fp, sp
   114f4:	cmp	r0, #0
   114f8:	bne	11548 <__assert_fail@plt+0x6bc>
   114fc:	movw	r5, #20780	; 0x512c
   11500:	movw	r1, #17053	; 0x429d
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r5, #2
   11510:	movt	r1, #1
   11514:	ldr	r4, [r5]
   11518:	bl	10cf4 <dcgettext@plt>
   1151c:	movw	r6, #20800	; 0x5140
   11520:	mov	r1, r0
   11524:	mov	r0, r4
   11528:	movt	r6, #2
   1152c:	ldr	r2, [r6]
   11530:	bl	10dcc <fprintf@plt>
   11534:	ldr	r0, [r5]
   11538:	ldr	r1, [r6]
   1153c:	bl	11670 <__assert_fail@plt+0x7e4>
   11540:	mov	r0, #0
   11544:	bl	10da8 <exit@plt>
   11548:	mov	r4, r0
   1154c:	movw	r0, #20768	; 0x5120
   11550:	movw	r1, #17014	; 0x4276
   11554:	mov	r2, #5
   11558:	movt	r0, #2
   1155c:	movt	r1, #1
   11560:	ldr	r5, [r0]
   11564:	mov	r0, #0
   11568:	bl	10cf4 <dcgettext@plt>
   1156c:	mov	r1, r0
   11570:	movw	r0, #20800	; 0x5140
   11574:	movt	r0, #2
   11578:	ldr	r2, [r0]
   1157c:	mov	r0, r5
   11580:	bl	10dcc <fprintf@plt>
   11584:	mov	r0, r4
   11588:	bl	10da8 <exit@plt>
   1158c:	push	{fp, lr}
   11590:	mov	fp, sp
   11594:	bl	10dd8 <__errno_location@plt>
   11598:	movw	r1, #17099	; 0x42cb
   1159c:	ldr	r4, [r0]
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	10cf4 <dcgettext@plt>
   115b0:	mov	r2, r0
   115b4:	mov	r0, #1
   115b8:	mov	r1, r4
   115bc:	bl	10d54 <error@plt>
   115c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   115c4:	add	fp, sp, #24
   115c8:	sub	sp, sp, #16
   115cc:	mov	r8, r0
   115d0:	movw	r0, #20768	; 0x5120
   115d4:	movt	r0, #2
   115d8:	ldr	r0, [r0]
   115dc:	bl	13c80 <__assert_fail@plt+0x2df4>
   115e0:	movw	r0, #20780	; 0x512c
   115e4:	movw	r1, #17278	; 0x437e
   115e8:	mov	r2, #5
   115ec:	mov	r9, #0
   115f0:	movt	r0, #2
   115f4:	movt	r1, #1
   115f8:	ldr	r6, [r0]
   115fc:	movw	r0, #20680	; 0x50c8
   11600:	movt	r0, #2
   11604:	ldr	r5, [r0]
   11608:	mov	r0, #0
   1160c:	bl	10cf4 <dcgettext@plt>
   11610:	movw	r1, #17293	; 0x438d
   11614:	mov	r7, r0
   11618:	mov	r0, #0
   1161c:	mov	r2, #5
   11620:	movt	r1, #1
   11624:	bl	10cf4 <dcgettext@plt>
   11628:	movw	r1, #17308	; 0x439c
   1162c:	mov	r4, r0
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	10cf4 <dcgettext@plt>
   11640:	movw	r2, #17264	; 0x4370
   11644:	str	r0, [sp, #8]
   11648:	mov	r0, r6
   1164c:	mov	r1, r8
   11650:	mov	r3, r5
   11654:	str	r7, [sp]
   11658:	str	r4, [sp, #4]
   1165c:	str	r9, [sp, #12]
   11660:	movt	r2, #1
   11664:	bl	136cc <__assert_fail@plt+0x2840>
   11668:	sub	sp, fp, #24
   1166c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11670:	push	{r4, r5, fp, lr}
   11674:	add	fp, sp, #8
   11678:	sub	sp, sp, #16
   1167c:	mov	r4, r1
   11680:	movw	r1, #17321	; 0x43a9
   11684:	mov	r5, r0
   11688:	mov	r0, #0
   1168c:	mov	r2, #5
   11690:	movt	r1, #1
   11694:	bl	10cf4 <dcgettext@plt>
   11698:	movw	r2, #17566	; 0x449e
   1169c:	movw	r3, #17264	; 0x4370
   116a0:	mov	r1, r0
   116a4:	movw	r0, #17613	; 0x44cd
   116a8:	movt	r2, #1
   116ac:	movt	r0, #1
   116b0:	movt	r3, #1
   116b4:	str	r2, [sp, #4]
   116b8:	movw	r2, #17527	; 0x4477
   116bc:	str	r3, [sp]
   116c0:	str	r0, [sp, #8]
   116c4:	mov	r0, r5
   116c8:	mov	r3, r4
   116cc:	movt	r2, #1
   116d0:	bl	10dcc <fprintf@plt>
   116d4:	sub	sp, fp, #8
   116d8:	pop	{r4, r5, fp, pc}
   116dc:	movw	r1, #20792	; 0x5138
   116e0:	movt	r1, #2
   116e4:	str	r0, [r1]
   116e8:	bx	lr
   116ec:	movw	r1, #20796	; 0x513c
   116f0:	movt	r1, #2
   116f4:	strb	r0, [r1]
   116f8:	bx	lr
   116fc:	push	{r4, r5, r6, sl, fp, lr}
   11700:	add	fp, sp, #16
   11704:	sub	sp, sp, #8
   11708:	movw	r0, #20780	; 0x512c
   1170c:	movt	r0, #2
   11710:	ldr	r0, [r0]
   11714:	bl	13ec8 <__assert_fail@plt+0x303c>
   11718:	cmp	r0, #0
   1171c:	beq	11744 <__assert_fail@plt+0x8b8>
   11720:	movw	r0, #20796	; 0x513c
   11724:	movt	r0, #2
   11728:	ldrb	r0, [r0]
   1172c:	cmp	r0, #0
   11730:	beq	11764 <__assert_fail@plt+0x8d8>
   11734:	bl	10dd8 <__errno_location@plt>
   11738:	ldr	r0, [r0]
   1173c:	cmp	r0, #32
   11740:	bne	11764 <__assert_fail@plt+0x8d8>
   11744:	movw	r0, #20768	; 0x5120
   11748:	movt	r0, #2
   1174c:	ldr	r0, [r0]
   11750:	bl	13ec8 <__assert_fail@plt+0x303c>
   11754:	cmp	r0, #0
   11758:	subeq	sp, fp, #16
   1175c:	popeq	{r4, r5, r6, sl, fp, pc}
   11760:	b	117d4 <__assert_fail@plt+0x948>
   11764:	movw	r1, #17099	; 0x42cb
   11768:	mov	r0, #0
   1176c:	mov	r2, #5
   11770:	movt	r1, #1
   11774:	bl	10cf4 <dcgettext@plt>
   11778:	mov	r4, r0
   1177c:	movw	r0, #20792	; 0x5138
   11780:	movt	r0, #2
   11784:	ldr	r6, [r0]
   11788:	bl	10dd8 <__errno_location@plt>
   1178c:	ldr	r5, [r0]
   11790:	cmp	r6, #0
   11794:	bne	117b0 <__assert_fail@plt+0x924>
   11798:	movw	r2, #17639	; 0x44e7
   1179c:	mov	r0, #0
   117a0:	mov	r1, r5
   117a4:	mov	r3, r4
   117a8:	movt	r2, #1
   117ac:	b	117d0 <__assert_fail@plt+0x944>
   117b0:	mov	r0, r6
   117b4:	bl	12f90 <__assert_fail@plt+0x2104>
   117b8:	movw	r2, #17635	; 0x44e3
   117bc:	mov	r3, r0
   117c0:	str	r4, [sp]
   117c4:	mov	r0, #0
   117c8:	mov	r1, r5
   117cc:	movt	r2, #1
   117d0:	bl	10d54 <error@plt>
   117d4:	movw	r0, #20684	; 0x50cc
   117d8:	movt	r0, #2
   117dc:	ldr	r0, [r0]
   117e0:	bl	10cd0 <_exit@plt>
   117e4:	push	{r4, r5, fp, lr}
   117e8:	add	fp, sp, #8
   117ec:	cmp	r0, #0
   117f0:	beq	11884 <__assert_fail@plt+0x9f8>
   117f4:	mov	r1, #47	; 0x2f
   117f8:	mov	r4, r0
   117fc:	bl	10e2c <strrchr@plt>
   11800:	cmp	r0, #0
   11804:	mov	r5, r4
   11808:	addne	r5, r0, #1
   1180c:	sub	r0, r5, r4
   11810:	cmp	r0, #7
   11814:	blt	11868 <__assert_fail@plt+0x9dc>
   11818:	movw	r1, #17698	; 0x4522
   1181c:	sub	r0, r5, #7
   11820:	mov	r2, #7
   11824:	movt	r1, #1
   11828:	bl	10e74 <strncmp@plt>
   1182c:	cmp	r0, #0
   11830:	bne	11868 <__assert_fail@plt+0x9dc>
   11834:	movw	r1, #17706	; 0x452a
   11838:	mov	r0, r5
   1183c:	mov	r2, #3
   11840:	movt	r1, #1
   11844:	bl	10e74 <strncmp@plt>
   11848:	cmp	r0, #0
   1184c:	beq	11858 <__assert_fail@plt+0x9cc>
   11850:	mov	r4, r5
   11854:	b	11868 <__assert_fail@plt+0x9dc>
   11858:	movw	r0, #20752	; 0x5110
   1185c:	add	r4, r5, #3
   11860:	movt	r0, #2
   11864:	str	r4, [r0]
   11868:	movw	r0, #20756	; 0x5114
   1186c:	movt	r0, #2
   11870:	str	r4, [r0]
   11874:	movw	r0, #20800	; 0x5140
   11878:	movt	r0, #2
   1187c:	str	r4, [r0]
   11880:	pop	{r4, r5, fp, pc}
   11884:	movw	r0, #20768	; 0x5120
   11888:	movt	r0, #2
   1188c:	ldr	r1, [r0]
   11890:	movw	r0, #17642	; 0x44ea
   11894:	movt	r0, #1
   11898:	bl	10e68 <fputs@plt>
   1189c:	bl	10e80 <abort@plt>
   118a0:	push	{r4, r5, r6, sl, fp, lr}
   118a4:	add	fp, sp, #16
   118a8:	mov	r4, r0
   118ac:	movw	r0, #20808	; 0x5148
   118b0:	movt	r0, #2
   118b4:	cmp	r4, #0
   118b8:	moveq	r4, r0
   118bc:	bl	10dd8 <__errno_location@plt>
   118c0:	ldr	r6, [r0]
   118c4:	mov	r5, r0
   118c8:	mov	r0, r4
   118cc:	mov	r1, #48	; 0x30
   118d0:	bl	13b0c <__assert_fail@plt+0x2c80>
   118d4:	str	r6, [r5]
   118d8:	pop	{r4, r5, r6, sl, fp, pc}
   118dc:	movw	r1, #20808	; 0x5148
   118e0:	cmp	r0, #0
   118e4:	movt	r1, #2
   118e8:	movne	r1, r0
   118ec:	ldr	r0, [r1]
   118f0:	bx	lr
   118f4:	movw	r2, #20808	; 0x5148
   118f8:	cmp	r0, #0
   118fc:	movt	r2, #2
   11900:	movne	r2, r0
   11904:	str	r1, [r2]
   11908:	bx	lr
   1190c:	movw	r3, #20808	; 0x5148
   11910:	cmp	r0, #0
   11914:	and	r2, r2, #1
   11918:	movt	r3, #2
   1191c:	movne	r3, r0
   11920:	ubfx	r0, r1, #5, #3
   11924:	and	r1, r1, #31
   11928:	add	ip, r3, r0, lsl #2
   1192c:	mov	r0, #1
   11930:	ldr	r3, [ip, #8]
   11934:	and	r0, r0, r3, lsr r1
   11938:	eor	r2, r0, r2
   1193c:	eor	r1, r3, r2, lsl r1
   11940:	str	r1, [ip, #8]
   11944:	bx	lr
   11948:	movw	r2, #20808	; 0x5148
   1194c:	cmp	r0, #0
   11950:	movt	r2, #2
   11954:	movne	r2, r0
   11958:	ldr	r0, [r2, #4]
   1195c:	str	r1, [r2, #4]
   11960:	bx	lr
   11964:	push	{fp, lr}
   11968:	mov	fp, sp
   1196c:	movw	r3, #20808	; 0x5148
   11970:	cmp	r0, #0
   11974:	movt	r3, #2
   11978:	movne	r3, r0
   1197c:	cmp	r1, #0
   11980:	mov	r0, #10
   11984:	cmpne	r2, #0
   11988:	str	r0, [r3]
   1198c:	bne	11994 <__assert_fail@plt+0xb08>
   11990:	bl	10e80 <abort@plt>
   11994:	str	r1, [r3, #40]	; 0x28
   11998:	str	r2, [r3, #44]	; 0x2c
   1199c:	pop	{fp, pc}
   119a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a4:	add	fp, sp, #28
   119a8:	sub	sp, sp, #20
   119ac:	mov	r7, r0
   119b0:	ldr	r0, [fp, #8]
   119b4:	movw	r5, #20808	; 0x5148
   119b8:	mov	r8, r3
   119bc:	mov	r9, r2
   119c0:	mov	sl, r1
   119c4:	movt	r5, #2
   119c8:	cmp	r0, #0
   119cc:	movne	r5, r0
   119d0:	bl	10dd8 <__errno_location@plt>
   119d4:	ldr	r2, [r5, #40]	; 0x28
   119d8:	ldr	r3, [r5, #44]	; 0x2c
   119dc:	mov	r4, r0
   119e0:	ldm	r5, {r0, r1}
   119e4:	add	r5, r5, #8
   119e8:	ldr	r6, [r4]
   119ec:	stm	sp, {r0, r1, r5}
   119f0:	mov	r0, r7
   119f4:	mov	r1, sl
   119f8:	str	r2, [sp, #12]
   119fc:	str	r3, [sp, #16]
   11a00:	mov	r2, r9
   11a04:	mov	r3, r8
   11a08:	bl	11a18 <__assert_fail@plt+0xb8c>
   11a0c:	str	r6, [r4]
   11a10:	sub	sp, fp, #28
   11a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a1c:	add	fp, sp, #28
   11a20:	sub	sp, sp, #156	; 0x9c
   11a24:	mov	r5, r0
   11a28:	add	r0, r2, #1
   11a2c:	mov	r6, r1
   11a30:	mov	sl, r3
   11a34:	str	r2, [fp, #-80]	; 0xffffffb0
   11a38:	str	r0, [sp, #72]	; 0x48
   11a3c:	ldr	r0, [fp, #12]
   11a40:	and	r1, r0, #1
   11a44:	str	r1, [sp, #32]
   11a48:	and	r1, r0, #4
   11a4c:	str	r1, [sp, #28]
   11a50:	ubfx	r9, r0, #1, #1
   11a54:	bl	10d30 <__ctype_get_mb_cur_max@plt>
   11a58:	str	r0, [sp, #40]	; 0x28
   11a5c:	ldr	r0, [fp, #24]
   11a60:	ldr	r7, [fp, #8]
   11a64:	mov	r1, #0
   11a68:	mov	lr, #0
   11a6c:	str	r5, [fp, #-84]	; 0xffffffac
   11a70:	str	r1, [sp, #60]	; 0x3c
   11a74:	mov	r1, #1
   11a78:	str	r1, [fp, #-48]	; 0xffffffd0
   11a7c:	str	r0, [sp, #80]	; 0x50
   11a80:	ldr	r0, [fp, #20]
   11a84:	str	r0, [sp, #76]	; 0x4c
   11a88:	mov	r0, #0
   11a8c:	str	r0, [sp, #56]	; 0x38
   11a90:	mov	r0, #0
   11a94:	str	r0, [fp, #-88]	; 0xffffffa8
   11a98:	mov	r0, #0
   11a9c:	str	r0, [fp, #-72]	; 0xffffffb8
   11aa0:	mov	r0, #0
   11aa4:	cmp	r7, #10
   11aa8:	bhi	12a84 <__assert_fail@plt+0x1bf8>
   11aac:	add	r1, pc, #24
   11ab0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11ab4:	mov	ip, r6
   11ab8:	mov	r8, #0
   11abc:	mov	r2, #1
   11ac0:	mov	r6, #0
   11ac4:	mov	r3, sl
   11ac8:	ldr	pc, [r1, r7, lsl #2]
   11acc:			; <UNDEFINED> instruction: 0x00011bb8
   11ad0:	andeq	r1, r1, ip, lsl #24
   11ad4:	andeq	r1, r1, ip, asr #23
   11ad8:			; <UNDEFINED> instruction: 0x00011bb0
   11adc:	andeq	r1, r1, r0, lsl #24
   11ae0:	andeq	r1, r1, r4, lsr ip
   11ae4:	ldrdeq	r1, [r1], -ip
   11ae8:			; <UNDEFINED> instruction: 0x00011cb8
   11aec:	strdeq	r1, [r1], -r8
   11af0:	strdeq	r1, [r1], -r8
   11af4:	andeq	r1, r1, r8, lsr fp
   11af8:	movw	r0, #17788	; 0x457c
   11afc:	mov	r1, r7
   11b00:	mov	r6, r5
   11b04:	mov	r4, ip
   11b08:	mov	r5, lr
   11b0c:	movt	r0, #1
   11b10:	bl	131e8 <__assert_fail@plt+0x235c>
   11b14:	str	r0, [sp, #76]	; 0x4c
   11b18:	movw	r0, #17790	; 0x457e
   11b1c:	mov	r1, r7
   11b20:	movt	r0, #1
   11b24:	bl	131e8 <__assert_fail@plt+0x235c>
   11b28:	mov	lr, r5
   11b2c:	mov	r5, r6
   11b30:	mov	ip, r4
   11b34:	str	r0, [sp, #80]	; 0x50
   11b38:	mov	r8, #0
   11b3c:	tst	r9, #1
   11b40:	str	lr, [sp, #44]	; 0x2c
   11b44:	bne	11b7c <__assert_fail@plt+0xcf0>
   11b48:	ldr	r0, [sp, #76]	; 0x4c
   11b4c:	ldrb	r0, [r0]
   11b50:	cmp	r0, #0
   11b54:	beq	11b7c <__assert_fail@plt+0xcf0>
   11b58:	ldr	r1, [sp, #76]	; 0x4c
   11b5c:	mov	r8, #0
   11b60:	add	r1, r1, #1
   11b64:	cmp	r8, ip
   11b68:	strbcc	r0, [r5, r8]
   11b6c:	ldrb	r0, [r1, r8]
   11b70:	add	r8, r8, #1
   11b74:	cmp	r0, #0
   11b78:	bne	11b64 <__assert_fail@plt+0xcd8>
   11b7c:	ldr	r6, [sp, #80]	; 0x50
   11b80:	mov	r4, ip
   11b84:	mov	r0, r6
   11b88:	bl	10dc0 <strlen@plt>
   11b8c:	mov	ip, r4
   11b90:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11b94:	ldr	lr, [sp, #44]	; 0x2c
   11b98:	str	r6, [fp, #-88]	; 0xffffffa8
   11b9c:	str	r0, [fp, #-72]	; 0xffffffb8
   11ba0:	mov	r2, #1
   11ba4:	mov	r6, r9
   11ba8:	mov	r3, sl
   11bac:	b	11cb8 <__assert_fail@plt+0xe2c>
   11bb0:	mov	r0, #1
   11bb4:	b	11c0c <__assert_fail@plt+0xd80>
   11bb8:	mov	r7, #0
   11bbc:	mov	r8, #0
   11bc0:	mov	r2, r0
   11bc4:	mov	r6, #0
   11bc8:	b	11cb8 <__assert_fail@plt+0xe2c>
   11bcc:	tst	r9, #1
   11bd0:	bne	11c0c <__assert_fail@plt+0xd80>
   11bd4:	mov	r2, r0
   11bd8:	b	11c64 <__assert_fail@plt+0xdd8>
   11bdc:	mov	r0, #1
   11be0:	mov	r8, #0
   11be4:	mov	r7, #5
   11be8:	mov	r2, #1
   11bec:	str	r0, [fp, #-72]	; 0xffffffb8
   11bf0:	movw	r0, #17786	; 0x457a
   11bf4:	movt	r0, #1
   11bf8:	str	r0, [fp, #-88]	; 0xffffffa8
   11bfc:	b	11c2c <__assert_fail@plt+0xda0>
   11c00:	mov	r2, #1
   11c04:	tst	r9, #1
   11c08:	beq	11c64 <__assert_fail@plt+0xdd8>
   11c0c:	mov	r1, #1
   11c10:	mov	r8, #0
   11c14:	mov	r7, #2
   11c18:	mov	r2, r0
   11c1c:	str	r1, [fp, #-72]	; 0xffffffb8
   11c20:	movw	r1, #17790	; 0x457e
   11c24:	movt	r1, #1
   11c28:	str	r1, [fp, #-88]	; 0xffffffa8
   11c2c:	mov	r6, #1
   11c30:	b	11cb8 <__assert_fail@plt+0xe2c>
   11c34:	tst	r9, #1
   11c38:	beq	11c88 <__assert_fail@plt+0xdfc>
   11c3c:	mov	r0, #1
   11c40:	mov	r8, #0
   11c44:	mov	r2, #1
   11c48:	mov	r6, #1
   11c4c:	mov	r7, #5
   11c50:	str	r0, [fp, #-72]	; 0xffffffb8
   11c54:	movw	r0, #17786	; 0x457a
   11c58:	movt	r0, #1
   11c5c:	str	r0, [fp, #-88]	; 0xffffffa8
   11c60:	b	11cb8 <__assert_fail@plt+0xe2c>
   11c64:	cmp	ip, #0
   11c68:	mov	r8, #1
   11c6c:	mov	r6, #0
   11c70:	mov	r7, #2
   11c74:	movne	r0, #39	; 0x27
   11c78:	strbne	r0, [r5]
   11c7c:	movw	r0, #17790	; 0x457e
   11c80:	movt	r0, #1
   11c84:	b	11cac <__assert_fail@plt+0xe20>
   11c88:	cmp	ip, #0
   11c8c:	mov	r8, #1
   11c90:	mov	r2, #1
   11c94:	mov	r7, #5
   11c98:	mov	r6, #0
   11c9c:	movne	r0, #34	; 0x22
   11ca0:	strbne	r0, [r5]
   11ca4:	movw	r0, #17786	; 0x457a
   11ca8:	movt	r0, #1
   11cac:	str	r0, [fp, #-88]	; 0xffffffa8
   11cb0:	mov	r0, #1
   11cb4:	str	r0, [fp, #-72]	; 0xffffffb8
   11cb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11cbc:	str	r7, [fp, #-68]	; 0xffffffbc
   11cc0:	str	r6, [fp, #-76]	; 0xffffffb4
   11cc4:	str	r2, [sp, #84]	; 0x54
   11cc8:	cmp	r0, #0
   11ccc:	movwne	r0, #1
   11cd0:	and	r1, r0, r6
   11cd4:	and	r1, r2, r1
   11cd8:	str	r1, [sp, #48]	; 0x30
   11cdc:	sub	r1, r7, #2
   11ce0:	clz	r1, r1
   11ce4:	lsr	r1, r1, #5
   11ce8:	and	r1, r1, r6
   11cec:	str	r1, [sp, #64]	; 0x40
   11cf0:	subs	r1, r7, #2
   11cf4:	eor	r7, r6, #1
   11cf8:	movwne	r1, #1
   11cfc:	str	r7, [sp, #92]	; 0x5c
   11d00:	orr	r7, r1, r7
   11d04:	and	r1, r1, r2
   11d08:	and	r0, r0, r1
   11d0c:	str	r7, [sp, #68]	; 0x44
   11d10:	mov	r7, #0
   11d14:	str	r0, [fp, #-60]	; 0xffffffc4
   11d18:	orr	r0, r1, r6
   11d1c:	ldr	r1, [fp, #16]
   11d20:	eor	r0, r0, #1
   11d24:	clz	r1, r1
   11d28:	lsr	r1, r1, #5
   11d2c:	orr	r0, r1, r0
   11d30:	str	r0, [fp, #-64]	; 0xffffffc0
   11d34:	eor	r0, r2, #1
   11d38:	str	r0, [sp, #52]	; 0x34
   11d3c:	cmn	r3, #1
   11d40:	beq	11d50 <__assert_fail@plt+0xec4>
   11d44:	cmp	r7, r3
   11d48:	bne	11d5c <__assert_fail@plt+0xed0>
   11d4c:	b	128b8 <__assert_fail@plt+0x1a2c>
   11d50:	ldrb	r0, [r4, r7]
   11d54:	cmp	r0, #0
   11d58:	beq	128c0 <__assert_fail@plt+0x1a34>
   11d5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d60:	cmp	r0, #0
   11d64:	beq	11dac <__assert_fail@plt+0xf20>
   11d68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d6c:	add	r5, r7, r0
   11d70:	cmp	r0, #2
   11d74:	bcc	11dc0 <__assert_fail@plt+0xf34>
   11d78:	mov	r0, #0
   11d7c:	cmn	r3, #1
   11d80:	str	r0, [fp, #-56]	; 0xffffffc8
   11d84:	bne	11dc8 <__assert_fail@plt+0xf3c>
   11d88:	mov	r0, r4
   11d8c:	mov	r4, ip
   11d90:	mov	r6, lr
   11d94:	bl	10dc0 <strlen@plt>
   11d98:	mov	ip, r4
   11d9c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11da0:	mov	lr, r6
   11da4:	mov	r3, r0
   11da8:	b	11dc8 <__assert_fail@plt+0xf3c>
   11dac:	mov	r0, #0
   11db0:	mov	sl, r3
   11db4:	str	r0, [fp, #-56]	; 0xffffffc8
   11db8:	mov	r0, #0
   11dbc:	b	11e34 <__assert_fail@plt+0xfa8>
   11dc0:	mov	r0, #0
   11dc4:	str	r0, [fp, #-56]	; 0xffffffc8
   11dc8:	cmp	r5, r3
   11dcc:	bls	11de0 <__assert_fail@plt+0xf54>
   11dd0:	ldr	r5, [fp, #-84]	; 0xffffffac
   11dd4:	mov	r0, #0
   11dd8:	mov	sl, r3
   11ddc:	b	11e34 <__assert_fail@plt+0xfa8>
   11de0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11de4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11de8:	add	r0, r4, r7
   11dec:	mov	r5, lr
   11df0:	mov	r6, ip
   11df4:	mov	sl, r3
   11df8:	bl	10db4 <bcmp@plt>
   11dfc:	ldr	r2, [sp, #92]	; 0x5c
   11e00:	cmp	r0, #0
   11e04:	ldr	r3, [fp, #-84]	; 0xffffffac
   11e08:	mov	r1, r0
   11e0c:	movwne	r1, #1
   11e10:	orr	r1, r1, r2
   11e14:	tst	r1, #1
   11e18:	beq	12944 <__assert_fail@plt+0x1ab8>
   11e1c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11e20:	clz	r0, r0
   11e24:	mov	lr, r5
   11e28:	mov	ip, r6
   11e2c:	mov	r5, r3
   11e30:	lsr	r0, r0, #5
   11e34:	str	r0, [fp, #-52]	; 0xffffffcc
   11e38:	ldrb	r6, [r4, r7]
   11e3c:	cmp	r6, #126	; 0x7e
   11e40:	bhi	12368 <__assert_fail@plt+0x14dc>
   11e44:	add	r3, pc, #16
   11e48:	mov	r9, #1
   11e4c:	mov	r2, #110	; 0x6e
   11e50:	mov	r0, #97	; 0x61
   11e54:	mov	r1, #0
   11e58:	ldr	pc, [r3, r6, lsl #2]
   11e5c:	andeq	r2, r1, ip, asr #3
   11e60:	andeq	r2, r1, r8, ror #6
   11e64:	andeq	r2, r1, r8, ror #6
   11e68:	andeq	r2, r1, r8, ror #6
   11e6c:	andeq	r2, r1, r8, ror #6
   11e70:	andeq	r2, r1, r8, ror #6
   11e74:	andeq	r2, r1, r8, ror #6
   11e78:	andeq	r2, r1, r8, ror #7
   11e7c:	andeq	r2, r1, ip, lsr #3
   11e80:	andeq	r2, r1, r4, lsr #3
   11e84:			; <UNDEFINED> instruction: 0x000121b8
   11e88:	ldrdeq	r2, [r1], -r0
   11e8c:	muleq	r1, ip, r1
   11e90:			; <UNDEFINED> instruction: 0x000121b4
   11e94:	andeq	r2, r1, r8, ror #6
   11e98:	andeq	r2, r1, r8, ror #6
   11e9c:	andeq	r2, r1, r8, ror #6
   11ea0:	andeq	r2, r1, r8, ror #6
   11ea4:	andeq	r2, r1, r8, ror #6
   11ea8:	andeq	r2, r1, r8, ror #6
   11eac:	andeq	r2, r1, r8, ror #6
   11eb0:	andeq	r2, r1, r8, ror #6
   11eb4:	andeq	r2, r1, r8, ror #6
   11eb8:	andeq	r2, r1, r8, ror #6
   11ebc:	andeq	r2, r1, r8, ror #6
   11ec0:	andeq	r2, r1, r8, ror #6
   11ec4:	andeq	r2, r1, r8, ror #6
   11ec8:	andeq	r2, r1, r8, ror #6
   11ecc:	andeq	r2, r1, r8, ror #6
   11ed0:	andeq	r2, r1, r8, ror #6
   11ed4:	andeq	r2, r1, r8, ror #6
   11ed8:	andeq	r2, r1, r8, ror #6
   11edc:	andeq	r2, r1, ip, asr #2
   11ee0:	andeq	r2, r1, r0, asr r1
   11ee4:	andeq	r2, r1, r0, asr r1
   11ee8:	andeq	r2, r1, r4, lsr r1
   11eec:	andeq	r2, r1, r0, asr r1
   11ef0:	andeq	r2, r1, r8, asr r0
   11ef4:	andeq	r2, r1, r0, asr r1
   11ef8:	ldrdeq	r2, [r1], -r8
   11efc:	andeq	r2, r1, r0, asr r1
   11f00:	andeq	r2, r1, r0, asr r1
   11f04:	andeq	r2, r1, r0, asr r1
   11f08:	andeq	r2, r1, r8, asr r0
   11f0c:	andeq	r2, r1, r8, asr r0
   11f10:	andeq	r2, r1, r8, asr r0
   11f14:	andeq	r2, r1, r8, asr r0
   11f18:	andeq	r2, r1, r8, asr r0
   11f1c:	andeq	r2, r1, r8, asr r0
   11f20:	andeq	r2, r1, r8, asr r0
   11f24:	andeq	r2, r1, r8, asr r0
   11f28:	andeq	r2, r1, r8, asr r0
   11f2c:	andeq	r2, r1, r8, asr r0
   11f30:	andeq	r2, r1, r8, asr r0
   11f34:	andeq	r2, r1, r8, asr r0
   11f38:	andeq	r2, r1, r8, asr r0
   11f3c:	andeq	r2, r1, r8, asr r0
   11f40:	andeq	r2, r1, r8, asr r0
   11f44:	andeq	r2, r1, r8, asr r0
   11f48:	andeq	r2, r1, r0, asr r1
   11f4c:	andeq	r2, r1, r0, asr r1
   11f50:	andeq	r2, r1, r0, asr r1
   11f54:	andeq	r2, r1, r0, asr r1
   11f58:	andeq	r2, r1, r4, lsr #5
   11f5c:	andeq	r2, r1, r8, ror #6
   11f60:	andeq	r2, r1, r8, asr r0
   11f64:	andeq	r2, r1, r8, asr r0
   11f68:	andeq	r2, r1, r8, asr r0
   11f6c:	andeq	r2, r1, r8, asr r0
   11f70:	andeq	r2, r1, r8, asr r0
   11f74:	andeq	r2, r1, r8, asr r0
   11f78:	andeq	r2, r1, r8, asr r0
   11f7c:	andeq	r2, r1, r8, asr r0
   11f80:	andeq	r2, r1, r8, asr r0
   11f84:	andeq	r2, r1, r8, asr r0
   11f88:	andeq	r2, r1, r8, asr r0
   11f8c:	andeq	r2, r1, r8, asr r0
   11f90:	andeq	r2, r1, r8, asr r0
   11f94:	andeq	r2, r1, r8, asr r0
   11f98:	andeq	r2, r1, r8, asr r0
   11f9c:	andeq	r2, r1, r8, asr r0
   11fa0:	andeq	r2, r1, r8, asr r0
   11fa4:	andeq	r2, r1, r8, asr r0
   11fa8:	andeq	r2, r1, r8, asr r0
   11fac:	andeq	r2, r1, r8, asr r0
   11fb0:	andeq	r2, r1, r8, asr r0
   11fb4:	andeq	r2, r1, r8, asr r0
   11fb8:	andeq	r2, r1, r8, asr r0
   11fbc:	andeq	r2, r1, r8, asr r0
   11fc0:	andeq	r2, r1, r8, asr r0
   11fc4:	andeq	r2, r1, r8, asr r0
   11fc8:	andeq	r2, r1, r0, asr r1
   11fcc:	andeq	r2, r1, r8, ror r1
   11fd0:	andeq	r2, r1, r8, asr r0
   11fd4:	andeq	r2, r1, r0, asr r1
   11fd8:	andeq	r2, r1, r8, asr r0
   11fdc:	andeq	r2, r1, r0, asr r1
   11fe0:	andeq	r2, r1, r8, asr r0
   11fe4:	andeq	r2, r1, r8, asr r0
   11fe8:	andeq	r2, r1, r8, asr r0
   11fec:	andeq	r2, r1, r8, asr r0
   11ff0:	andeq	r2, r1, r8, asr r0
   11ff4:	andeq	r2, r1, r8, asr r0
   11ff8:	andeq	r2, r1, r8, asr r0
   11ffc:	andeq	r2, r1, r8, asr r0
   12000:	andeq	r2, r1, r8, asr r0
   12004:	andeq	r2, r1, r8, asr r0
   12008:	andeq	r2, r1, r8, asr r0
   1200c:	andeq	r2, r1, r8, asr r0
   12010:	andeq	r2, r1, r8, asr r0
   12014:	andeq	r2, r1, r8, asr r0
   12018:	andeq	r2, r1, r8, asr r0
   1201c:	andeq	r2, r1, r8, asr r0
   12020:	andeq	r2, r1, r8, asr r0
   12024:	andeq	r2, r1, r8, asr r0
   12028:	andeq	r2, r1, r8, asr r0
   1202c:	andeq	r2, r1, r8, asr r0
   12030:	andeq	r2, r1, r8, asr r0
   12034:	andeq	r2, r1, r8, asr r0
   12038:	andeq	r2, r1, r8, asr r0
   1203c:	andeq	r2, r1, r8, asr r0
   12040:	andeq	r2, r1, r8, asr r0
   12044:	andeq	r2, r1, r8, asr r0
   12048:	andeq	r2, r1, ip, lsl #2
   1204c:	andeq	r2, r1, r0, asr r1
   12050:	andeq	r2, r1, ip, lsl #2
   12054:	andeq	r2, r1, r4, lsr r1
   12058:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1205c:	tst	r0, #1
   12060:	bne	1208c <__assert_fail@plt+0x1200>
   12064:	ldr	r1, [fp, #16]
   12068:	ubfx	r0, r6, #5, #3
   1206c:	mov	r2, #1
   12070:	ldr	r0, [r1, r0, lsl #2]
   12074:	and	r1, r6, #31
   12078:	tst	r0, r2, lsl r1
   1207c:	beq	1208c <__assert_fail@plt+0x1200>
   12080:	mov	r0, r6
   12084:	mov	r1, r9
   12088:	b	120a0 <__assert_fail@plt+0x1214>
   1208c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12090:	mov	r1, r9
   12094:	cmp	r0, #0
   12098:	mov	r0, r6
   1209c:	beq	127ec <__assert_fail@plt+0x1960>
   120a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   120a4:	tst	r2, #1
   120a8:	bne	12988 <__assert_fail@plt+0x1afc>
   120ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   120b0:	subs	r2, r2, #2
   120b4:	movwne	r2, #1
   120b8:	orr	r2, r2, lr
   120bc:	tst	r2, #1
   120c0:	bne	120f8 <__assert_fail@plt+0x126c>
   120c4:	cmp	r8, ip
   120c8:	mov	lr, #1
   120cc:	movcc	r2, #39	; 0x27
   120d0:	strbcc	r2, [r5, r8]
   120d4:	add	r2, r8, #1
   120d8:	cmp	r2, ip
   120dc:	movcc	r3, #36	; 0x24
   120e0:	strbcc	r3, [r5, r2]
   120e4:	add	r2, r8, #2
   120e8:	add	r8, r8, #3
   120ec:	cmp	r2, ip
   120f0:	movcc	r3, #39	; 0x27
   120f4:	strbcc	r3, [r5, r2]
   120f8:	cmp	r8, ip
   120fc:	movcc	r2, #92	; 0x5c
   12100:	strbcc	r2, [r5, r8]
   12104:	add	r8, r8, #1
   12108:	b	1282c <__assert_fail@plt+0x19a0>
   1210c:	cmp	sl, #1
   12110:	beq	12134 <__assert_fail@plt+0x12a8>
   12114:	mov	r9, #0
   12118:	cmn	sl, #1
   1211c:	bne	12140 <__assert_fail@plt+0x12b4>
   12120:	ldrb	r0, [r4, #1]
   12124:	cmp	r0, #0
   12128:	beq	12134 <__assert_fail@plt+0x12a8>
   1212c:	mvn	sl, #0
   12130:	b	12140 <__assert_fail@plt+0x12b4>
   12134:	mov	r9, #0
   12138:	cmp	r7, #0
   1213c:	beq	1214c <__assert_fail@plt+0x12c0>
   12140:	mov	r0, #0
   12144:	str	r0, [fp, #-56]	; 0xffffffc8
   12148:	b	12058 <__assert_fail@plt+0x11cc>
   1214c:	mov	r1, #1
   12150:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12154:	cmp	r0, #2
   12158:	bne	12170 <__assert_fail@plt+0x12e4>
   1215c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12160:	mov	r9, r1
   12164:	tst	r0, #1
   12168:	beq	12058 <__assert_fail@plt+0x11cc>
   1216c:	b	12988 <__assert_fail@plt+0x1afc>
   12170:	mov	r9, r1
   12174:	b	12058 <__assert_fail@plt+0x11cc>
   12178:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1217c:	cmp	r0, #2
   12180:	bne	123c4 <__assert_fail@plt+0x1538>
   12184:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12188:	tst	r0, #1
   1218c:	bne	12988 <__assert_fail@plt+0x1afc>
   12190:	mov	r0, #0
   12194:	str	r0, [fp, #-56]	; 0xffffffc8
   12198:	b	123dc <__assert_fail@plt+0x1550>
   1219c:	mov	r0, #102	; 0x66
   121a0:	b	123e8 <__assert_fail@plt+0x155c>
   121a4:	mov	r2, #116	; 0x74
   121a8:	b	121b8 <__assert_fail@plt+0x132c>
   121ac:	mov	r0, #98	; 0x62
   121b0:	b	123e8 <__assert_fail@plt+0x155c>
   121b4:	mov	r2, #114	; 0x72
   121b8:	ldr	r0, [sp, #68]	; 0x44
   121bc:	tst	r0, #1
   121c0:	mov	r0, r2
   121c4:	bne	123e8 <__assert_fail@plt+0x155c>
   121c8:	b	12988 <__assert_fail@plt+0x1afc>
   121cc:	ldr	r0, [sp, #84]	; 0x54
   121d0:	tst	r0, #1
   121d4:	beq	12408 <__assert_fail@plt+0x157c>
   121d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121dc:	tst	r0, #1
   121e0:	bne	12a74 <__assert_fail@plt+0x1be8>
   121e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121e8:	mov	r2, sl
   121ec:	subs	r0, r0, #2
   121f0:	movwne	r0, #1
   121f4:	orr	r0, r0, lr
   121f8:	tst	r0, #1
   121fc:	bne	12234 <__assert_fail@plt+0x13a8>
   12200:	cmp	r8, ip
   12204:	mov	lr, #1
   12208:	movcc	r0, #39	; 0x27
   1220c:	strbcc	r0, [r5, r8]
   12210:	add	r0, r8, #1
   12214:	cmp	r0, ip
   12218:	movcc	r1, #36	; 0x24
   1221c:	strbcc	r1, [r5, r0]
   12220:	add	r0, r8, #2
   12224:	add	r8, r8, #3
   12228:	cmp	r0, ip
   1222c:	movcc	r1, #39	; 0x27
   12230:	strbcc	r1, [r5, r0]
   12234:	mov	r1, #1
   12238:	cmp	r8, ip
   1223c:	mov	r9, #0
   12240:	mov	r6, #48	; 0x30
   12244:	str	r1, [fp, #-56]	; 0xffffffc8
   12248:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1224c:	movcc	r0, #92	; 0x5c
   12250:	strbcc	r0, [r5, r8]
   12254:	add	r0, r8, #1
   12258:	cmp	r1, #2
   1225c:	beq	12564 <__assert_fail@plt+0x16d8>
   12260:	add	r1, r7, #1
   12264:	cmp	r1, r2
   12268:	bcs	12564 <__assert_fail@plt+0x16d8>
   1226c:	ldrb	r1, [r4, r1]
   12270:	sub	r1, r1, #48	; 0x30
   12274:	uxtb	r1, r1
   12278:	cmp	r1, #9
   1227c:	bhi	12564 <__assert_fail@plt+0x16d8>
   12280:	cmp	r0, ip
   12284:	movcc	r1, #48	; 0x30
   12288:	strbcc	r1, [r5, r0]
   1228c:	add	r0, r8, #2
   12290:	add	r8, r8, #3
   12294:	cmp	r0, ip
   12298:	movcc	r1, #48	; 0x30
   1229c:	strbcc	r1, [r5, r0]
   122a0:	b	12058 <__assert_fail@plt+0x11cc>
   122a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122a8:	mov	r6, #63	; 0x3f
   122ac:	cmp	r0, #5
   122b0:	beq	1256c <__assert_fail@plt+0x16e0>
   122b4:	mov	r1, #0
   122b8:	cmp	r0, #2
   122bc:	str	r1, [fp, #-56]	; 0xffffffc8
   122c0:	bne	12620 <__assert_fail@plt+0x1794>
   122c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122c8:	mov	r9, #0
   122cc:	b	12164 <__assert_fail@plt+0x12d8>
   122d0:	mov	r0, #118	; 0x76
   122d4:	b	123e8 <__assert_fail@plt+0x155c>
   122d8:	mov	r0, #1
   122dc:	mov	r6, #39	; 0x27
   122e0:	str	r0, [sp, #60]	; 0x3c
   122e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122e8:	cmp	r0, #2
   122ec:	bne	12360 <__assert_fail@plt+0x14d4>
   122f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122f4:	tst	r0, #1
   122f8:	bne	12988 <__assert_fail@plt+0x1afc>
   122fc:	ldr	r2, [sp, #56]	; 0x38
   12300:	clz	r1, ip
   12304:	mov	lr, #0
   12308:	lsr	r1, r1, #5
   1230c:	cmp	r2, #0
   12310:	mov	r0, r2
   12314:	movwne	r0, #1
   12318:	orrs	r0, r0, r1
   1231c:	moveq	r2, ip
   12320:	moveq	ip, r0
   12324:	cmp	r8, ip
   12328:	str	r2, [sp, #56]	; 0x38
   1232c:	movcc	r0, #39	; 0x27
   12330:	strbcc	r0, [r5, r8]
   12334:	add	r0, r8, #1
   12338:	cmp	r0, ip
   1233c:	movcc	r1, #92	; 0x5c
   12340:	strbcc	r1, [r5, r0]
   12344:	add	r0, r8, #2
   12348:	add	r8, r8, #3
   1234c:	cmp	r0, ip
   12350:	movcc	r1, #39	; 0x27
   12354:	strbcc	r1, [r5, r0]
   12358:	mov	r0, #0
   1235c:	str	r0, [fp, #-56]	; 0xffffffc8
   12360:	mov	r9, #1
   12364:	b	12058 <__assert_fail@plt+0x11cc>
   12368:	ldr	r0, [sp, #40]	; 0x28
   1236c:	str	lr, [sp, #44]	; 0x2c
   12370:	str	ip, [sp, #88]	; 0x58
   12374:	cmp	r0, #1
   12378:	bne	12428 <__assert_fail@plt+0x159c>
   1237c:	str	sl, [sp, #36]	; 0x24
   12380:	bl	10d9c <__ctype_b_loc@plt>
   12384:	ldr	r0, [r0]
   12388:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1238c:	mov	r1, #1
   12390:	add	r0, r0, r6, lsl #1
   12394:	ldrb	r0, [r0, #1]
   12398:	ubfx	r9, r0, #6, #1
   1239c:	ldr	r0, [sp, #52]	; 0x34
   123a0:	ldr	lr, [sp, #44]	; 0x2c
   123a4:	cmp	r1, #1
   123a8:	orr	r3, r9, r0
   123ac:	bhi	12628 <__assert_fail@plt+0x179c>
   123b0:	tst	r3, #1
   123b4:	beq	12628 <__assert_fail@plt+0x179c>
   123b8:	ldr	sl, [sp, #36]	; 0x24
   123bc:	ldr	ip, [sp, #88]	; 0x58
   123c0:	b	12058 <__assert_fail@plt+0x11cc>
   123c4:	ldr	r1, [sp, #48]	; 0x30
   123c8:	mov	r0, #0
   123cc:	str	r0, [fp, #-56]	; 0xffffffc8
   123d0:	mov	r0, #92	; 0x5c
   123d4:	cmp	r1, #0
   123d8:	beq	123e8 <__assert_fail@plt+0x155c>
   123dc:	mov	r6, #92	; 0x5c
   123e0:	mov	r9, #0
   123e4:	b	127ec <__assert_fail@plt+0x1960>
   123e8:	mov	r1, #0
   123ec:	mov	r9, #0
   123f0:	str	r1, [fp, #-56]	; 0xffffffc8
   123f4:	ldr	r1, [sp, #84]	; 0x54
   123f8:	tst	r1, #1
   123fc:	mov	r1, #0
   12400:	beq	12058 <__assert_fail@plt+0x11cc>
   12404:	b	120a0 <__assert_fail@plt+0x1214>
   12408:	ldr	r0, [sp, #32]
   1240c:	mov	r6, #0
   12410:	mov	r9, #0
   12414:	cmp	r0, #0
   12418:	mov	r0, #0
   1241c:	str	r0, [fp, #-56]	; 0xffffffc8
   12420:	beq	12058 <__assert_fail@plt+0x11cc>
   12424:	b	12844 <__assert_fail@plt+0x19b8>
   12428:	mov	r0, #0
   1242c:	cmn	sl, #1
   12430:	sub	r3, fp, #40	; 0x28
   12434:	str	r0, [fp, #-36]	; 0xffffffdc
   12438:	str	r0, [fp, #-40]	; 0xffffffd8
   1243c:	bne	12454 <__assert_fail@plt+0x15c8>
   12440:	mov	r0, r4
   12444:	bl	10dc0 <strlen@plt>
   12448:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1244c:	sub	r3, fp, #40	; 0x28
   12450:	mov	sl, r0
   12454:	ldr	r0, [sp, #72]	; 0x48
   12458:	mov	r9, #1
   1245c:	mov	r1, #0
   12460:	str	sl, [sp, #36]	; 0x24
   12464:	add	r0, r0, r7
   12468:	str	r0, [sp, #20]
   1246c:	add	r0, r1, r7
   12470:	str	r1, [sp, #24]
   12474:	add	r1, r4, r0
   12478:	mov	r4, r0
   1247c:	sub	r2, sl, r0
   12480:	sub	r0, fp, #44	; 0x2c
   12484:	bl	13dd8 <__assert_fail@plt+0x2f4c>
   12488:	cmp	r0, #0
   1248c:	beq	12898 <__assert_fail@plt+0x1a0c>
   12490:	cmn	r0, #1
   12494:	beq	12850 <__assert_fail@plt+0x19c4>
   12498:	ldr	r2, [sp, #36]	; 0x24
   1249c:	cmn	r0, #2
   124a0:	beq	12858 <__assert_fail@plt+0x19cc>
   124a4:	ldr	r2, [sp, #64]	; 0x40
   124a8:	ldr	ip, [sp, #88]	; 0x58
   124ac:	ldr	r4, [sp, #84]	; 0x54
   124b0:	ldr	lr, [fp, #-48]	; 0xffffffd0
   124b4:	cmp	r0, #2
   124b8:	mov	r1, #0
   124bc:	movwcc	r1, #1
   124c0:	eor	r2, r2, #1
   124c4:	orrs	r1, r2, r1
   124c8:	bne	12518 <__assert_fail@plt+0x168c>
   124cc:	ldr	r1, [sp, #24]
   124d0:	ldr	r2, [sp, #20]
   124d4:	add	r1, r2, r1
   124d8:	sub	r2, r0, #1
   124dc:	ldrb	r3, [r1]
   124e0:	sub	r5, r3, #94	; 0x5e
   124e4:	cmp	r5, #30
   124e8:	bhi	12500 <__assert_fail@plt+0x1674>
   124ec:	mov	r4, #1
   124f0:	mov	sl, #1073741829	; 0x40000005
   124f4:	tst	sl, r4, lsl r5
   124f8:	ldr	r4, [sp, #84]	; 0x54
   124fc:	bne	12960 <__assert_fail@plt+0x1ad4>
   12500:	sub	r3, r3, #91	; 0x5b
   12504:	cmp	r3, #2
   12508:	bcc	12960 <__assert_fail@plt+0x1ad4>
   1250c:	add	r1, r1, #1
   12510:	subs	r2, r2, #1
   12514:	bne	124dc <__assert_fail@plt+0x1650>
   12518:	ldr	r5, [sp, #24]
   1251c:	str	lr, [fp, #-48]	; 0xffffffd0
   12520:	add	r5, r0, r5
   12524:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12528:	bl	10d0c <iswprint@plt>
   1252c:	cmp	r0, #0
   12530:	sub	r4, fp, #40	; 0x28
   12534:	movwne	r0, #1
   12538:	and	r9, r9, r0
   1253c:	mov	r0, r4
   12540:	bl	10ce8 <mbsinit@plt>
   12544:	mov	r1, r5
   12548:	mov	r3, r4
   1254c:	ldr	sl, [sp, #36]	; 0x24
   12550:	ldr	r5, [fp, #-84]	; 0xffffffac
   12554:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12558:	cmp	r0, #0
   1255c:	beq	1246c <__assert_fail@plt+0x15e0>
   12560:	b	1239c <__assert_fail@plt+0x1510>
   12564:	mov	r8, r0
   12568:	b	12058 <__assert_fail@plt+0x11cc>
   1256c:	mov	r0, #0
   12570:	str	r0, [fp, #-56]	; 0xffffffc8
   12574:	ldr	r0, [sp, #28]
   12578:	cmp	r0, #0
   1257c:	beq	12620 <__assert_fail@plt+0x1794>
   12580:	add	r0, r7, #2
   12584:	mov	r1, sl
   12588:	cmp	r0, sl
   1258c:	bcs	12620 <__assert_fail@plt+0x1794>
   12590:	add	r1, r7, r4
   12594:	ldrb	r1, [r1, #1]
   12598:	cmp	r1, #63	; 0x3f
   1259c:	bne	12620 <__assert_fail@plt+0x1794>
   125a0:	ldrb	r9, [r4, r0]
   125a4:	sub	r2, r9, #33	; 0x21
   125a8:	cmp	r2, #29
   125ac:	bhi	12620 <__assert_fail@plt+0x1794>
   125b0:	mov	r1, r4
   125b4:	movw	r4, #20929	; 0x51c1
   125b8:	mov	r3, #1
   125bc:	movt	r4, #14336	; 0x3800
   125c0:	tst	r4, r3, lsl r2
   125c4:	beq	128ac <__assert_fail@plt+0x1a20>
   125c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   125cc:	tst	r2, #1
   125d0:	bne	12a7c <__assert_fail@plt+0x1bf0>
   125d4:	cmp	r8, ip
   125d8:	mov	r4, r1
   125dc:	mov	r7, r0
   125e0:	mov	r6, r9
   125e4:	movcc	r2, #63	; 0x3f
   125e8:	strbcc	r2, [r5, r8]
   125ec:	add	r2, r8, #1
   125f0:	cmp	r2, ip
   125f4:	movcc	r3, #34	; 0x22
   125f8:	strbcc	r3, [r5, r2]
   125fc:	add	r2, r8, #2
   12600:	cmp	r2, ip
   12604:	movcc	r3, #34	; 0x22
   12608:	strbcc	r3, [r5, r2]
   1260c:	add	r2, r8, #3
   12610:	add	r8, r8, #4
   12614:	cmp	r2, ip
   12618:	movcc	r3, #63	; 0x3f
   1261c:	strbcc	r3, [r5, r2]
   12620:	mov	r9, #0
   12624:	b	12058 <__assert_fail@plt+0x11cc>
   12628:	ldr	sl, [sp, #36]	; 0x24
   1262c:	add	r0, r1, r7
   12630:	mov	r2, #0
   12634:	str	r3, [sp, #24]
   12638:	str	r0, [fp, #-56]	; 0xffffffc8
   1263c:	tst	r3, #1
   12640:	beq	1266c <__assert_fail@plt+0x17e0>
   12644:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12648:	tst	r0, #1
   1264c:	beq	12734 <__assert_fail@plt+0x18a8>
   12650:	ldr	r1, [sp, #88]	; 0x58
   12654:	mov	r0, r3
   12658:	cmp	r8, r1
   1265c:	movcc	r1, #92	; 0x5c
   12660:	strbcc	r1, [r5, r8]
   12664:	add	r8, r8, #1
   12668:	b	12738 <__assert_fail@plt+0x18ac>
   1266c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12670:	tst	r1, #1
   12674:	bne	12984 <__assert_fail@plt+0x1af8>
   12678:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1267c:	subs	r2, r1, #2
   12680:	movwne	r2, #1
   12684:	orr	r2, r2, lr
   12688:	tst	r2, #1
   1268c:	bne	126d0 <__assert_fail@plt+0x1844>
   12690:	ldr	r1, [sp, #88]	; 0x58
   12694:	add	r2, r8, #1
   12698:	mov	lr, #1
   1269c:	cmp	r8, r1
   126a0:	movcc	r1, #39	; 0x27
   126a4:	strbcc	r1, [r5, r8]
   126a8:	ldr	r1, [sp, #88]	; 0x58
   126ac:	cmp	r2, r1
   126b0:	movcc	r1, #36	; 0x24
   126b4:	strbcc	r1, [r5, r2]
   126b8:	ldr	r1, [sp, #88]	; 0x58
   126bc:	add	r2, r8, #2
   126c0:	add	r8, r8, #3
   126c4:	cmp	r2, r1
   126c8:	movcc	r1, #39	; 0x27
   126cc:	strbcc	r1, [r5, r2]
   126d0:	ldr	r1, [sp, #88]	; 0x58
   126d4:	add	r2, r8, #1
   126d8:	mov	r0, r3
   126dc:	cmp	r8, r1
   126e0:	movcc	r1, #92	; 0x5c
   126e4:	strbcc	r1, [r5, r8]
   126e8:	ldr	r1, [sp, #88]	; 0x58
   126ec:	cmp	r2, r1
   126f0:	bcs	12704 <__assert_fail@plt+0x1878>
   126f4:	uxtb	r3, r6
   126f8:	mov	r1, #48	; 0x30
   126fc:	orr	r3, r1, r3, lsr #6
   12700:	strb	r3, [r5, r2]
   12704:	ldr	r1, [sp, #88]	; 0x58
   12708:	add	r2, r8, #2
   1270c:	add	r8, r8, #3
   12710:	cmp	r2, r1
   12714:	lsrcc	r3, r6, #3
   12718:	movcc	r1, #6
   1271c:	bficc	r3, r1, #3, #29
   12720:	mov	r1, #6
   12724:	bfi	r6, r1, #3, #29
   12728:	strbcc	r3, [r5, r2]
   1272c:	mov	r2, #1
   12730:	b	12740 <__assert_fail@plt+0x18b4>
   12734:	mov	r0, r3
   12738:	mov	r1, #0
   1273c:	str	r1, [fp, #-52]	; 0xffffffcc
   12740:	mov	ip, r2
   12744:	and	r1, r2, #1
   12748:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1274c:	add	r3, r7, #1
   12750:	cmp	r2, r3
   12754:	bls	127dc <__assert_fail@plt+0x1950>
   12758:	cmp	r1, #0
   1275c:	mvn	r5, lr
   12760:	movwne	r1, #1
   12764:	orr	r5, r5, r1
   12768:	tst	r5, #1
   1276c:	bne	127b0 <__assert_fail@plt+0x1924>
   12770:	ldr	r1, [sp, #88]	; 0x58
   12774:	ldr	r5, [fp, #-84]	; 0xffffffac
   12778:	mov	r2, r4
   1277c:	ldr	r4, [sp, #88]	; 0x58
   12780:	ldr	r0, [sp, #24]
   12784:	mov	lr, #0
   12788:	cmp	r8, r1
   1278c:	movcc	r1, #39	; 0x27
   12790:	strbcc	r1, [r5, r8]
   12794:	add	r1, r8, #1
   12798:	add	r8, r8, #2
   1279c:	cmp	r1, r4
   127a0:	movcc	r4, #39	; 0x27
   127a4:	strbcc	r4, [r5, r1]
   127a8:	mov	r4, r2
   127ac:	b	127b4 <__assert_fail@plt+0x1928>
   127b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   127b4:	ldr	r1, [sp, #88]	; 0x58
   127b8:	mov	r2, ip
   127bc:	cmp	r8, r1
   127c0:	ldr	r1, [sp, #72]	; 0x48
   127c4:	strbcc	r6, [r5, r8]
   127c8:	add	r8, r8, #1
   127cc:	ldrb	r6, [r1, r7]
   127d0:	mov	r7, r3
   127d4:	mov	r3, r0
   127d8:	b	1263c <__assert_fail@plt+0x17b0>
   127dc:	ldr	ip, [sp, #88]	; 0x58
   127e0:	cmp	r1, #0
   127e4:	movwne	r1, #1
   127e8:	str	r1, [fp, #-56]	; 0xffffffc8
   127ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   127f0:	cmp	r0, #0
   127f4:	bne	12824 <__assert_fail@plt+0x1998>
   127f8:	tst	lr, #1
   127fc:	beq	12824 <__assert_fail@plt+0x1998>
   12800:	cmp	r8, ip
   12804:	mov	lr, #0
   12808:	movcc	r0, #39	; 0x27
   1280c:	strbcc	r0, [r5, r8]
   12810:	add	r0, r8, #1
   12814:	add	r8, r8, #2
   12818:	cmp	r0, ip
   1281c:	movcc	r1, #39	; 0x27
   12820:	strbcc	r1, [r5, r0]
   12824:	mov	r1, r9
   12828:	mov	r0, r6
   1282c:	cmp	r8, ip
   12830:	strbcc	r0, [r5, r8]
   12834:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12838:	add	r8, r8, #1
   1283c:	and	r0, r0, r1
   12840:	str	r0, [fp, #-48]	; 0xffffffd0
   12844:	mov	r3, sl
   12848:	add	r7, r7, #1
   1284c:	b	11d3c <__assert_fail@plt+0xeb0>
   12850:	mov	r9, #0
   12854:	b	12898 <__assert_fail@plt+0x1a0c>
   12858:	mov	r9, #0
   1285c:	cmp	r2, r4
   12860:	bls	12898 <__assert_fail@plt+0x1a0c>
   12864:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12868:	ldr	r1, [sp, #24]
   1286c:	add	r0, r4, r7
   12870:	mov	r3, r1
   12874:	ldrb	r1, [r0, r1]
   12878:	cmp	r1, #0
   1287c:	beq	128a4 <__assert_fail@plt+0x1a18>
   12880:	add	r3, r3, #1
   12884:	add	r1, r7, r3
   12888:	cmp	r1, r2
   1288c:	mov	r1, r3
   12890:	bcc	12870 <__assert_fail@plt+0x19e4>
   12894:	b	1239c <__assert_fail@plt+0x1510>
   12898:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1289c:	ldr	r1, [sp, #24]
   128a0:	b	1239c <__assert_fail@plt+0x1510>
   128a4:	mov	r1, r3
   128a8:	b	1239c <__assert_fail@plt+0x1510>
   128ac:	mov	r9, #0
   128b0:	mov	r4, r1
   128b4:	b	12058 <__assert_fail@plt+0x11cc>
   128b8:	mov	sl, r7
   128bc:	b	128c4 <__assert_fail@plt+0x1a38>
   128c0:	mvn	sl, #0
   128c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128cc:	eor	r0, r1, #2
   128d0:	orr	r0, r0, r8
   128d4:	clz	r0, r0
   128d8:	lsr	r0, r0, #5
   128dc:	tst	r2, r0
   128e0:	bne	12988 <__assert_fail@plt+0x1afc>
   128e4:	subs	r0, r1, #2
   128e8:	movwne	r0, #1
   128ec:	orr	r0, r2, r0
   128f0:	tst	r0, #1
   128f4:	ldreq	r0, [sp, #60]	; 0x3c
   128f8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   128fc:	eoreq	r0, r0, #1
   12900:	tsteq	r0, #1
   12904:	bne	12a1c <__assert_fail@plt+0x1b90>
   12908:	tst	r1, #1
   1290c:	bne	129e8 <__assert_fail@plt+0x1b5c>
   12910:	ldr	r6, [sp, #56]	; 0x38
   12914:	mov	r9, #0
   12918:	cmp	r6, #0
   1291c:	beq	12a14 <__assert_fail@plt+0x1b88>
   12920:	ldr	r0, [sp, #84]	; 0x54
   12924:	mov	r1, #0
   12928:	mov	r7, #2
   1292c:	cmp	ip, #0
   12930:	str	r1, [fp, #-48]	; 0xffffffd0
   12934:	mov	r1, #0
   12938:	str	r1, [fp, #-76]	; 0xffffffb4
   1293c:	beq	11aa4 <__assert_fail@plt+0xc18>
   12940:	b	12a1c <__assert_fail@plt+0x1b90>
   12944:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12948:	ldr	r1, [fp, #12]
   1294c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12950:	mov	r5, r3
   12954:	mov	ip, r6
   12958:	mov	r3, sl
   1295c:	b	129ac <__assert_fail@plt+0x1b20>
   12960:	tst	r4, #1
   12964:	ldr	r5, [fp, #-84]	; 0xffffffac
   12968:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1296c:	ldr	r1, [fp, #12]
   12970:	ldr	r3, [sp, #36]	; 0x24
   12974:	mov	r0, #2
   12978:	movwne	r0, #4
   1297c:	mov	r2, r0
   12980:	b	129ac <__assert_fail@plt+0x1b20>
   12984:	ldr	ip, [sp, #88]	; 0x58
   12988:	ldr	r1, [sp, #84]	; 0x54
   1298c:	mov	r0, #2
   12990:	tst	r1, #1
   12994:	movwne	r0, #4
   12998:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1299c:	ldr	r1, [fp, #12]
   129a0:	mov	r3, sl
   129a4:	cmp	r2, #2
   129a8:	moveq	r2, r0
   129ac:	mov	r0, #0
   129b0:	bic	r1, r1, #2
   129b4:	str	r2, [sp]
   129b8:	mov	r2, r4
   129bc:	str	r0, [sp, #8]
   129c0:	ldr	r0, [sp, #76]	; 0x4c
   129c4:	str	r1, [sp, #4]
   129c8:	mov	r1, ip
   129cc:	str	r0, [sp, #12]
   129d0:	ldr	r0, [sp, #80]	; 0x50
   129d4:	str	r0, [sp, #16]
   129d8:	mov	r0, r5
   129dc:	bl	11a18 <__assert_fail@plt+0xb8c>
   129e0:	mov	r8, r0
   129e4:	b	12a68 <__assert_fail@plt+0x1bdc>
   129e8:	mov	r0, #5
   129ec:	ldr	r1, [sp, #56]	; 0x38
   129f0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   129f4:	mov	r3, sl
   129f8:	str	r0, [sp]
   129fc:	ldr	r0, [fp, #12]
   12a00:	str	r0, [sp, #4]
   12a04:	ldr	r0, [fp, #16]
   12a08:	str	r0, [sp, #8]
   12a0c:	ldr	r0, [sp, #76]	; 0x4c
   12a10:	b	129cc <__assert_fail@plt+0x1b40>
   12a14:	mov	r0, #0
   12a18:	str	r0, [fp, #-76]	; 0xffffffb4
   12a1c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12a20:	cmp	r1, #0
   12a24:	beq	12a5c <__assert_fail@plt+0x1bd0>
   12a28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a2c:	tst	r0, #1
   12a30:	bne	12a5c <__assert_fail@plt+0x1bd0>
   12a34:	ldrb	r0, [r1]
   12a38:	cmp	r0, #0
   12a3c:	beq	12a5c <__assert_fail@plt+0x1bd0>
   12a40:	add	r1, r1, #1
   12a44:	cmp	r8, ip
   12a48:	strbcc	r0, [r5, r8]
   12a4c:	add	r8, r8, #1
   12a50:	ldrb	r0, [r1], #1
   12a54:	cmp	r0, #0
   12a58:	bne	12a44 <__assert_fail@plt+0x1bb8>
   12a5c:	cmp	r8, ip
   12a60:	movcc	r0, #0
   12a64:	strbcc	r0, [r5, r8]
   12a68:	mov	r0, r8
   12a6c:	sub	sp, fp, #28
   12a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a74:	mov	r0, #4
   12a78:	b	12998 <__assert_fail@plt+0x1b0c>
   12a7c:	mov	r4, r1
   12a80:	b	12988 <__assert_fail@plt+0x1afc>
   12a84:	bl	10e80 <abort@plt>
   12a88:	mov	r3, r2
   12a8c:	mov	r2, #0
   12a90:	b	12a94 <__assert_fail@plt+0x1c08>
   12a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a98:	add	fp, sp, #28
   12a9c:	sub	sp, sp, #36	; 0x24
   12aa0:	movw	r8, #20808	; 0x5148
   12aa4:	cmp	r3, #0
   12aa8:	mov	r4, r2
   12aac:	str	r2, [sp, #24]
   12ab0:	mov	r5, r1
   12ab4:	mov	r6, r0
   12ab8:	str	r0, [sp, #20]
   12abc:	movt	r8, #2
   12ac0:	movne	r8, r3
   12ac4:	bl	10dd8 <__errno_location@plt>
   12ac8:	str	r0, [sp, #28]
   12acc:	ldr	r1, [r8, #40]	; 0x28
   12ad0:	ldr	r2, [r8, #44]	; 0x2c
   12ad4:	ldr	r7, [r0]
   12ad8:	cmp	r4, #0
   12adc:	add	sl, r8, #8
   12ae0:	mov	r0, #0
   12ae4:	ldm	r8, {r3, r9}
   12ae8:	orreq	r9, r9, #1
   12aec:	stm	sp, {r3, r9, sl}
   12af0:	str	r1, [sp, #12]
   12af4:	str	r2, [sp, #16]
   12af8:	mov	r1, #0
   12afc:	mov	r2, r6
   12b00:	mov	r3, r5
   12b04:	str	r7, [sp, #32]
   12b08:	mov	r7, r5
   12b0c:	bl	11a18 <__assert_fail@plt+0xb8c>
   12b10:	add	r4, r0, #1
   12b14:	mov	r5, r0
   12b18:	mov	r0, r4
   12b1c:	bl	137ec <__assert_fail@plt+0x2960>
   12b20:	mov	r6, r0
   12b24:	ldr	r0, [r8]
   12b28:	ldr	r2, [r8, #44]	; 0x2c
   12b2c:	ldr	r1, [r8, #40]	; 0x28
   12b30:	mov	r3, r7
   12b34:	stm	sp, {r0, r9, sl}
   12b38:	str	r2, [sp, #16]
   12b3c:	ldr	r2, [sp, #20]
   12b40:	str	r1, [sp, #12]
   12b44:	mov	r0, r6
   12b48:	mov	r1, r4
   12b4c:	bl	11a18 <__assert_fail@plt+0xb8c>
   12b50:	ldr	r0, [sp, #24]
   12b54:	ldr	r1, [sp, #32]
   12b58:	ldr	r2, [sp, #28]
   12b5c:	cmp	r0, #0
   12b60:	str	r1, [r2]
   12b64:	strne	r5, [r0]
   12b68:	mov	r0, r6
   12b6c:	sub	sp, fp, #28
   12b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b78:	add	fp, sp, #24
   12b7c:	movw	r5, #20692	; 0x50d4
   12b80:	movw	r8, #20688	; 0x50d0
   12b84:	movt	r5, #2
   12b88:	movt	r8, #2
   12b8c:	ldr	r0, [r5]
   12b90:	ldr	r4, [r8]
   12b94:	cmp	r0, #2
   12b98:	blt	12bc4 <__assert_fail@plt+0x1d38>
   12b9c:	add	r7, r4, #12
   12ba0:	mov	r6, #0
   12ba4:	ldr	r0, [r7, r6, lsl #3]
   12ba8:	bl	13cdc <__assert_fail@plt+0x2e50>
   12bac:	ldr	r1, [r5]
   12bb0:	add	r2, r6, #2
   12bb4:	add	r0, r6, #1
   12bb8:	mov	r6, r0
   12bbc:	cmp	r2, r1
   12bc0:	blt	12ba4 <__assert_fail@plt+0x1d18>
   12bc4:	ldr	r0, [r4, #4]
   12bc8:	movw	r9, #20856	; 0x5178
   12bcc:	movw	r7, #20696	; 0x50d8
   12bd0:	movt	r9, #2
   12bd4:	movt	r7, #2
   12bd8:	cmp	r0, r9
   12bdc:	beq	12bec <__assert_fail@plt+0x1d60>
   12be0:	bl	13cdc <__assert_fail@plt+0x2e50>
   12be4:	mov	r0, #256	; 0x100
   12be8:	stm	r7, {r0, r9}
   12bec:	cmp	r4, r7
   12bf0:	beq	12c00 <__assert_fail@plt+0x1d74>
   12bf4:	mov	r0, r4
   12bf8:	bl	13cdc <__assert_fail@plt+0x2e50>
   12bfc:	str	r7, [r8]
   12c00:	mov	r0, #1
   12c04:	str	r0, [r5]
   12c08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c0c:	movw	r3, #20808	; 0x5148
   12c10:	mvn	r2, #0
   12c14:	movt	r3, #2
   12c18:	b	12c1c <__assert_fail@plt+0x1d90>
   12c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c20:	add	fp, sp, #28
   12c24:	sub	sp, sp, #44	; 0x2c
   12c28:	mov	r7, r3
   12c2c:	str	r2, [sp, #36]	; 0x24
   12c30:	str	r1, [sp, #32]
   12c34:	mov	r5, r0
   12c38:	bl	10dd8 <__errno_location@plt>
   12c3c:	cmp	r5, #0
   12c40:	bmi	12db0 <__assert_fail@plt+0x1f24>
   12c44:	cmn	r5, #-2147483647	; 0x80000001
   12c48:	beq	12db0 <__assert_fail@plt+0x1f24>
   12c4c:	movw	r8, #20692	; 0x50d4
   12c50:	movw	r4, #20688	; 0x50d0
   12c54:	str	r0, [sp, #28]
   12c58:	ldr	r0, [r0]
   12c5c:	movt	r8, #2
   12c60:	movt	r4, #2
   12c64:	ldr	r1, [r8]
   12c68:	ldr	r6, [r4]
   12c6c:	str	r0, [sp, #24]
   12c70:	cmp	r1, r5
   12c74:	ble	12c80 <__assert_fail@plt+0x1df4>
   12c78:	mov	sl, r6
   12c7c:	b	12cec <__assert_fail@plt+0x1e60>
   12c80:	movw	r9, #20696	; 0x50d8
   12c84:	mov	r0, #8
   12c88:	str	r1, [fp, #-32]	; 0xffffffe0
   12c8c:	sub	r1, r5, r1
   12c90:	mvn	r3, #-2147483648	; 0x80000000
   12c94:	movt	r9, #2
   12c98:	str	r0, [sp]
   12c9c:	add	r2, r1, #1
   12ca0:	sub	r1, fp, #32
   12ca4:	subs	r0, r6, r9
   12ca8:	movne	r0, r6
   12cac:	bl	1391c <__assert_fail@plt+0x2a90>
   12cb0:	mov	sl, r0
   12cb4:	cmp	r6, r9
   12cb8:	str	r0, [r4]
   12cbc:	bne	12cc8 <__assert_fail@plt+0x1e3c>
   12cc0:	ldrd	r0, [r9]
   12cc4:	stm	sl, {r0, r1}
   12cc8:	ldr	r1, [r8]
   12ccc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12cd0:	add	r0, sl, r1, lsl #3
   12cd4:	sub	r1, r2, r1
   12cd8:	lsl	r2, r1, #3
   12cdc:	mov	r1, #0
   12ce0:	bl	10df0 <memset@plt>
   12ce4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ce8:	str	r0, [r8]
   12cec:	mov	r9, sl
   12cf0:	ldm	r7, {r0, r1}
   12cf4:	orr	r8, r1, #1
   12cf8:	add	r1, r7, #8
   12cfc:	ldr	r2, [r7, #40]	; 0x28
   12d00:	ldr	r3, [r7, #44]	; 0x2c
   12d04:	ldr	r6, [r9, r5, lsl #3]!
   12d08:	str	r1, [sp, #20]
   12d0c:	ldr	r4, [r9, #4]!
   12d10:	stm	sp, {r0, r8}
   12d14:	add	r0, sp, #8
   12d18:	stm	r0, {r1, r2, r3}
   12d1c:	ldr	r2, [sp, #32]
   12d20:	ldr	r3, [sp, #36]	; 0x24
   12d24:	mov	r1, r6
   12d28:	mov	r0, r4
   12d2c:	bl	11a18 <__assert_fail@plt+0xb8c>
   12d30:	cmp	r6, r0
   12d34:	bhi	12d98 <__assert_fail@plt+0x1f0c>
   12d38:	add	r6, r0, #1
   12d3c:	movw	r0, #20856	; 0x5178
   12d40:	movt	r0, #2
   12d44:	str	r6, [sl, r5, lsl #3]
   12d48:	cmp	r4, r0
   12d4c:	beq	12d58 <__assert_fail@plt+0x1ecc>
   12d50:	mov	r0, r4
   12d54:	bl	13cdc <__assert_fail@plt+0x2e50>
   12d58:	mov	r0, r6
   12d5c:	bl	137ec <__assert_fail@plt+0x2960>
   12d60:	str	r0, [r9]
   12d64:	mov	r4, r0
   12d68:	add	r3, sp, #8
   12d6c:	ldr	r0, [r7]
   12d70:	ldr	r1, [r7, #40]	; 0x28
   12d74:	ldr	r2, [r7, #44]	; 0x2c
   12d78:	stm	sp, {r0, r8}
   12d7c:	ldr	r0, [sp, #20]
   12d80:	stm	r3, {r0, r1, r2}
   12d84:	ldr	r2, [sp, #32]
   12d88:	ldr	r3, [sp, #36]	; 0x24
   12d8c:	mov	r0, r4
   12d90:	mov	r1, r6
   12d94:	bl	11a18 <__assert_fail@plt+0xb8c>
   12d98:	ldr	r0, [sp, #28]
   12d9c:	ldr	r1, [sp, #24]
   12da0:	str	r1, [r0]
   12da4:	mov	r0, r4
   12da8:	sub	sp, fp, #28
   12dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12db0:	bl	10e80 <abort@plt>
   12db4:	movw	r3, #20808	; 0x5148
   12db8:	movt	r3, #2
   12dbc:	b	12c1c <__assert_fail@plt+0x1d90>
   12dc0:	movw	r3, #20808	; 0x5148
   12dc4:	mov	r1, r0
   12dc8:	mov	r0, #0
   12dcc:	mvn	r2, #0
   12dd0:	movt	r3, #2
   12dd4:	b	12c1c <__assert_fail@plt+0x1d90>
   12dd8:	movw	r3, #20808	; 0x5148
   12ddc:	mov	r2, r1
   12de0:	mov	r1, r0
   12de4:	mov	r0, #0
   12de8:	movt	r3, #2
   12dec:	b	12c1c <__assert_fail@plt+0x1d90>
   12df0:	push	{fp, lr}
   12df4:	mov	fp, sp
   12df8:	sub	sp, sp, #48	; 0x30
   12dfc:	vmov.i32	q8, #0	; 0x00000000
   12e00:	mov	ip, #32
   12e04:	mov	r3, sp
   12e08:	mov	lr, r2
   12e0c:	cmp	r1, #10
   12e10:	add	r2, r3, #16
   12e14:	vst1.64	{d16-d17}, [r3], ip
   12e18:	vst1.64	{d16-d17}, [r2]
   12e1c:	vst1.64	{d16-d17}, [r3]
   12e20:	beq	12e40 <__assert_fail@plt+0x1fb4>
   12e24:	str	r1, [sp]
   12e28:	mov	r3, sp
   12e2c:	mov	r1, lr
   12e30:	mvn	r2, #0
   12e34:	bl	12c1c <__assert_fail@plt+0x1d90>
   12e38:	mov	sp, fp
   12e3c:	pop	{fp, pc}
   12e40:	bl	10e80 <abort@plt>
   12e44:	push	{r4, sl, fp, lr}
   12e48:	add	fp, sp, #8
   12e4c:	sub	sp, sp, #48	; 0x30
   12e50:	vmov.i32	q8, #0	; 0x00000000
   12e54:	mov	ip, r3
   12e58:	mov	r3, sp
   12e5c:	mov	lr, #32
   12e60:	cmp	r1, #10
   12e64:	add	r4, r3, #16
   12e68:	vst1.64	{d16-d17}, [r3], lr
   12e6c:	vst1.64	{d16-d17}, [r4]
   12e70:	vst1.64	{d16-d17}, [r3]
   12e74:	beq	12e94 <__assert_fail@plt+0x2008>
   12e78:	str	r1, [sp]
   12e7c:	mov	r1, r2
   12e80:	mov	r3, sp
   12e84:	mov	r2, ip
   12e88:	bl	12c1c <__assert_fail@plt+0x1d90>
   12e8c:	sub	sp, fp, #8
   12e90:	pop	{r4, sl, fp, pc}
   12e94:	bl	10e80 <abort@plt>
   12e98:	mov	r2, r1
   12e9c:	mov	r1, r0
   12ea0:	mov	r0, #0
   12ea4:	b	12df0 <__assert_fail@plt+0x1f64>
   12ea8:	mov	r3, r2
   12eac:	mov	r2, r1
   12eb0:	mov	r1, r0
   12eb4:	mov	r0, #0
   12eb8:	b	12e44 <__assert_fail@plt+0x1fb8>
   12ebc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ec0:	add	fp, sp, #24
   12ec4:	sub	sp, sp, #48	; 0x30
   12ec8:	movw	r8, #20808	; 0x5148
   12ecc:	mov	lr, r0
   12ed0:	mov	r3, sp
   12ed4:	mov	ip, r1
   12ed8:	movt	r8, #2
   12edc:	mov	r1, r3
   12ee0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12ee4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12ee8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12eec:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12ef0:	ubfx	r0, r2, #5, #3
   12ef4:	and	r2, r2, #31
   12ef8:	mov	r4, #1
   12efc:	add	r0, r3, r0, lsl #2
   12f00:	ldr	r1, [r0, #8]
   12f04:	bic	r4, r4, r1, lsr r2
   12f08:	eor	r1, r1, r4, lsl r2
   12f0c:	mov	r2, ip
   12f10:	str	r1, [r0, #8]
   12f14:	mov	r0, #0
   12f18:	mov	r1, lr
   12f1c:	bl	12c1c <__assert_fail@plt+0x1d90>
   12f20:	sub	sp, fp, #24
   12f24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f2c:	add	fp, sp, #24
   12f30:	sub	sp, sp, #48	; 0x30
   12f34:	movw	lr, #20808	; 0x5148
   12f38:	mov	ip, r0
   12f3c:	mov	r3, sp
   12f40:	movt	lr, #2
   12f44:	mov	r2, r3
   12f48:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12f4c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12f50:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12f54:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12f58:	ubfx	r0, r1, #5, #3
   12f5c:	and	r1, r1, #31
   12f60:	mov	r7, #1
   12f64:	add	r0, r3, r0, lsl #2
   12f68:	ldr	r2, [r0, #8]
   12f6c:	bic	r7, r7, r2, lsr r1
   12f70:	eor	r1, r2, r7, lsl r1
   12f74:	mvn	r2, #0
   12f78:	str	r1, [r0, #8]
   12f7c:	mov	r0, #0
   12f80:	mov	r1, ip
   12f84:	bl	12c1c <__assert_fail@plt+0x1d90>
   12f88:	sub	sp, fp, #24
   12f8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f90:	push	{r4, r5, r6, r7, fp, lr}
   12f94:	add	fp, sp, #16
   12f98:	sub	sp, sp, #48	; 0x30
   12f9c:	movw	lr, #20808	; 0x5148
   12fa0:	mov	ip, r0
   12fa4:	mov	r3, sp
   12fa8:	movt	lr, #2
   12fac:	mov	r2, r3
   12fb0:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   12fb4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   12fb8:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   12fbc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   12fc0:	mov	r1, ip
   12fc4:	mvn	r2, #0
   12fc8:	ldr	r0, [sp, #12]
   12fcc:	orr	r0, r0, #67108864	; 0x4000000
   12fd0:	str	r0, [sp, #12]
   12fd4:	mov	r0, #0
   12fd8:	bl	12c1c <__assert_fail@plt+0x1d90>
   12fdc:	sub	sp, fp, #16
   12fe0:	pop	{r4, r5, r6, r7, fp, pc}
   12fe4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12fe8:	add	fp, sp, #24
   12fec:	sub	sp, sp, #48	; 0x30
   12ff0:	movw	r8, #20808	; 0x5148
   12ff4:	mov	ip, r1
   12ff8:	mov	lr, r0
   12ffc:	mov	r3, sp
   13000:	movt	r8, #2
   13004:	mov	r2, r3
   13008:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1300c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13010:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13014:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13018:	mov	r1, lr
   1301c:	mov	r2, ip
   13020:	ldr	r0, [sp, #12]
   13024:	orr	r0, r0, #67108864	; 0x4000000
   13028:	str	r0, [sp, #12]
   1302c:	mov	r0, #0
   13030:	bl	12c1c <__assert_fail@plt+0x1d90>
   13034:	sub	sp, fp, #24
   13038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1303c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13040:	add	fp, sp, #24
   13044:	sub	sp, sp, #96	; 0x60
   13048:	vmov.i32	q8, #0	; 0x00000000
   1304c:	mov	lr, sp
   13050:	mov	ip, r2
   13054:	cmp	r1, #10
   13058:	add	r3, lr, #16
   1305c:	mov	r2, lr
   13060:	vst1.64	{d16-d17}, [r3]
   13064:	mov	r3, #28
   13068:	vst1.64	{d16-d17}, [r2], r3
   1306c:	vst1.32	{d16-d17}, [r2]
   13070:	beq	130b0 <__assert_fail@plt+0x2224>
   13074:	str	r1, [sp, #48]	; 0x30
   13078:	add	r3, sp, #48	; 0x30
   1307c:	ldm	lr!, {r2, r4, r5, r6, r7}
   13080:	add	r1, r3, #4
   13084:	stmia	r1!, {r2, r4, r5, r6, r7}
   13088:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1308c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13090:	mvn	r2, #0
   13094:	ldr	r1, [sp, #60]	; 0x3c
   13098:	orr	r1, r1, #67108864	; 0x4000000
   1309c:	str	r1, [sp, #60]	; 0x3c
   130a0:	mov	r1, ip
   130a4:	bl	12c1c <__assert_fail@plt+0x1d90>
   130a8:	sub	sp, fp, #24
   130ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130b0:	bl	10e80 <abort@plt>
   130b4:	push	{fp, lr}
   130b8:	mov	fp, sp
   130bc:	sub	sp, sp, #8
   130c0:	mvn	ip, #0
   130c4:	str	ip, [sp]
   130c8:	bl	130d4 <__assert_fail@plt+0x2248>
   130cc:	mov	sp, fp
   130d0:	pop	{fp, pc}
   130d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130d8:	add	fp, sp, #24
   130dc:	sub	sp, sp, #48	; 0x30
   130e0:	movw	ip, #20808	; 0x5148
   130e4:	mov	lr, r3
   130e8:	mov	r3, sp
   130ec:	cmp	r1, #0
   130f0:	movt	ip, #2
   130f4:	cmpne	r2, #0
   130f8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   130fc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13100:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13104:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13108:	mov	r3, #10
   1310c:	str	r3, [sp]
   13110:	bne	13118 <__assert_fail@plt+0x228c>
   13114:	bl	10e80 <abort@plt>
   13118:	ldr	ip, [fp, #8]
   1311c:	str	r2, [sp, #44]	; 0x2c
   13120:	str	r1, [sp, #40]	; 0x28
   13124:	mov	r3, sp
   13128:	mov	r1, lr
   1312c:	mov	r2, ip
   13130:	bl	12c1c <__assert_fail@plt+0x1d90>
   13134:	sub	sp, fp, #24
   13138:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1313c:	push	{fp, lr}
   13140:	mov	fp, sp
   13144:	sub	sp, sp, #8
   13148:	mov	r3, r2
   1314c:	mov	r2, r1
   13150:	mov	r1, r0
   13154:	mvn	r0, #0
   13158:	str	r0, [sp]
   1315c:	mov	r0, #0
   13160:	bl	130d4 <__assert_fail@plt+0x2248>
   13164:	mov	sp, fp
   13168:	pop	{fp, pc}
   1316c:	push	{fp, lr}
   13170:	mov	fp, sp
   13174:	sub	sp, sp, #8
   13178:	mov	ip, r2
   1317c:	mov	r2, r1
   13180:	mov	r1, r0
   13184:	str	r3, [sp]
   13188:	mov	r0, #0
   1318c:	mov	r3, ip
   13190:	bl	130d4 <__assert_fail@plt+0x2248>
   13194:	mov	sp, fp
   13198:	pop	{fp, pc}
   1319c:	movw	r3, #20704	; 0x50e0
   131a0:	movt	r3, #2
   131a4:	b	12c1c <__assert_fail@plt+0x1d90>
   131a8:	movw	r3, #20704	; 0x50e0
   131ac:	mov	r2, r1
   131b0:	mov	r1, r0
   131b4:	mov	r0, #0
   131b8:	movt	r3, #2
   131bc:	b	12c1c <__assert_fail@plt+0x1d90>
   131c0:	movw	r3, #20704	; 0x50e0
   131c4:	mvn	r2, #0
   131c8:	movt	r3, #2
   131cc:	b	12c1c <__assert_fail@plt+0x1d90>
   131d0:	movw	r3, #20704	; 0x50e0
   131d4:	mov	r1, r0
   131d8:	mov	r0, #0
   131dc:	mvn	r2, #0
   131e0:	movt	r3, #2
   131e4:	b	12c1c <__assert_fail@plt+0x1d90>
   131e8:	push	{r4, r5, fp, lr}
   131ec:	add	fp, sp, #8
   131f0:	mov	r5, r0
   131f4:	mov	r4, r1
   131f8:	mov	r0, #0
   131fc:	mov	r2, #5
   13200:	mov	r1, r5
   13204:	bl	10cf4 <dcgettext@plt>
   13208:	cmp	r0, r5
   1320c:	popne	{r4, r5, fp, pc}
   13210:	bl	13fb4 <__assert_fail@plt+0x3128>
   13214:	ldrb	r1, [r0]
   13218:	and	r1, r1, #223	; 0xdf
   1321c:	cmp	r1, #71	; 0x47
   13220:	beq	13288 <__assert_fail@plt+0x23fc>
   13224:	cmp	r1, #85	; 0x55
   13228:	bne	132e0 <__assert_fail@plt+0x2454>
   1322c:	ldrb	r1, [r0, #1]
   13230:	and	r1, r1, #223	; 0xdf
   13234:	cmp	r1, #84	; 0x54
   13238:	bne	132e0 <__assert_fail@plt+0x2454>
   1323c:	ldrb	r1, [r0, #2]
   13240:	and	r1, r1, #223	; 0xdf
   13244:	cmp	r1, #70	; 0x46
   13248:	bne	132e0 <__assert_fail@plt+0x2454>
   1324c:	ldrb	r1, [r0, #3]
   13250:	cmp	r1, #45	; 0x2d
   13254:	bne	132e0 <__assert_fail@plt+0x2454>
   13258:	ldrb	r1, [r0, #4]
   1325c:	cmp	r1, #56	; 0x38
   13260:	bne	132e0 <__assert_fail@plt+0x2454>
   13264:	ldrb	r0, [r0, #5]
   13268:	cmp	r0, #0
   1326c:	bne	132e0 <__assert_fail@plt+0x2454>
   13270:	ldrb	r1, [r5]
   13274:	movw	r2, #17792	; 0x4580
   13278:	movw	r0, #17796	; 0x4584
   1327c:	movt	r2, #1
   13280:	movt	r0, #1
   13284:	b	13310 <__assert_fail@plt+0x2484>
   13288:	ldrb	r1, [r0, #1]
   1328c:	and	r1, r1, #223	; 0xdf
   13290:	cmp	r1, #66	; 0x42
   13294:	bne	132e0 <__assert_fail@plt+0x2454>
   13298:	ldrb	r1, [r0, #2]
   1329c:	cmp	r1, #49	; 0x31
   132a0:	bne	132e0 <__assert_fail@plt+0x2454>
   132a4:	ldrb	r1, [r0, #3]
   132a8:	cmp	r1, #56	; 0x38
   132ac:	bne	132e0 <__assert_fail@plt+0x2454>
   132b0:	ldrb	r1, [r0, #4]
   132b4:	cmp	r1, #48	; 0x30
   132b8:	bne	132e0 <__assert_fail@plt+0x2454>
   132bc:	ldrb	r1, [r0, #5]
   132c0:	cmp	r1, #51	; 0x33
   132c4:	bne	132e0 <__assert_fail@plt+0x2454>
   132c8:	ldrb	r1, [r0, #6]
   132cc:	cmp	r1, #48	; 0x30
   132d0:	bne	132e0 <__assert_fail@plt+0x2454>
   132d4:	ldrb	r0, [r0, #7]
   132d8:	cmp	r0, #0
   132dc:	beq	132fc <__assert_fail@plt+0x2470>
   132e0:	movw	r1, #17786	; 0x457a
   132e4:	movw	r0, #17790	; 0x457e
   132e8:	cmp	r4, #9
   132ec:	movt	r1, #1
   132f0:	movt	r0, #1
   132f4:	moveq	r0, r1
   132f8:	pop	{r4, r5, fp, pc}
   132fc:	ldrb	r1, [r5]
   13300:	movw	r2, #17800	; 0x4588
   13304:	movw	r0, #17804	; 0x458c
   13308:	movt	r2, #1
   1330c:	movt	r0, #1
   13310:	cmp	r1, #96	; 0x60
   13314:	moveq	r0, r2
   13318:	pop	{r4, r5, fp, pc}
   1331c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13320:	add	fp, sp, #24
   13324:	sub	sp, sp, #32
   13328:	ldr	r7, [fp, #12]
   1332c:	ldr	r6, [fp, #8]
   13330:	mov	r4, r2
   13334:	mov	r5, r0
   13338:	cmp	r1, #0
   1333c:	beq	1335c <__assert_fail@plt+0x24d0>
   13340:	mov	r2, r1
   13344:	movw	r1, #17892	; 0x45e4
   13348:	str	r3, [sp]
   1334c:	mov	r0, r5
   13350:	mov	r3, r4
   13354:	movt	r1, #1
   13358:	b	1336c <__assert_fail@plt+0x24e0>
   1335c:	movw	r1, #17904	; 0x45f0
   13360:	mov	r0, r5
   13364:	mov	r2, r4
   13368:	movt	r1, #1
   1336c:	bl	10dcc <fprintf@plt>
   13370:	movw	r1, #17911	; 0x45f7
   13374:	mov	r0, #0
   13378:	mov	r2, #5
   1337c:	movt	r1, #1
   13380:	bl	10cf4 <dcgettext@plt>
   13384:	movw	r1, #18607	; 0x48af
   13388:	mov	r2, r0
   1338c:	mov	r0, r5
   13390:	movw	r3, #2022	; 0x7e6
   13394:	movt	r1, #1
   13398:	bl	10dcc <fprintf@plt>
   1339c:	movw	r4, #17525	; 0x4475
   133a0:	mov	r1, r5
   133a4:	movt	r4, #1
   133a8:	mov	r0, r4
   133ac:	bl	10e68 <fputs@plt>
   133b0:	movw	r1, #17915	; 0x45fb
   133b4:	mov	r0, #0
   133b8:	mov	r2, #5
   133bc:	movt	r1, #1
   133c0:	bl	10cf4 <dcgettext@plt>
   133c4:	movw	r2, #18086	; 0x46a6
   133c8:	mov	r1, r0
   133cc:	mov	r0, r5
   133d0:	movt	r2, #1
   133d4:	bl	10dcc <fprintf@plt>
   133d8:	mov	r0, r4
   133dc:	mov	r1, r5
   133e0:	bl	10e68 <fputs@plt>
   133e4:	cmp	r7, #9
   133e8:	bhi	13448 <__assert_fail@plt+0x25bc>
   133ec:	add	r0, pc, #0
   133f0:	ldr	pc, [r0, r7, lsl #2]
   133f4:	andeq	r3, r1, r8, lsr r6
   133f8:	andeq	r3, r1, ip, lsl r4
   133fc:	andeq	r3, r1, r4, asr r4
   13400:	andeq	r3, r1, r0, lsl #9
   13404:	andeq	r3, r1, r8, lsr #9
   13408:	ldrdeq	r3, [r1], -r4
   1340c:	andeq	r3, r1, r8, lsl #10
   13410:	andeq	r3, r1, r8, asr #10
   13414:	andeq	r3, r1, r4, ror #11
   13418:	andeq	r3, r1, ip, lsl #11
   1341c:	movw	r1, #18120	; 0x46c8
   13420:	mov	r0, #0
   13424:	mov	r2, #5
   13428:	movt	r1, #1
   1342c:	bl	10cf4 <dcgettext@plt>
   13430:	ldr	r2, [r6]
   13434:	mov	r1, r0
   13438:	mov	r0, r5
   1343c:	sub	sp, fp, #24
   13440:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13444:	b	10dcc <fprintf@plt>
   13448:	movw	r1, #18439	; 0x4807
   1344c:	movt	r1, #1
   13450:	b	13594 <__assert_fail@plt+0x2708>
   13454:	movw	r1, #18136	; 0x46d8
   13458:	mov	r0, #0
   1345c:	mov	r2, #5
   13460:	movt	r1, #1
   13464:	bl	10cf4 <dcgettext@plt>
   13468:	ldm	r6, {r2, r3}
   1346c:	mov	r1, r0
   13470:	mov	r0, r5
   13474:	sub	sp, fp, #24
   13478:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1347c:	b	10dcc <fprintf@plt>
   13480:	movw	r1, #18159	; 0x46ef
   13484:	mov	r0, #0
   13488:	mov	r2, #5
   1348c:	movt	r1, #1
   13490:	bl	10cf4 <dcgettext@plt>
   13494:	mov	r1, r0
   13498:	ldr	r0, [r6, #8]
   1349c:	ldm	r6, {r2, r3}
   134a0:	str	r0, [sp]
   134a4:	b	13540 <__assert_fail@plt+0x26b4>
   134a8:	movw	r1, #18187	; 0x470b
   134ac:	mov	r0, #0
   134b0:	mov	r2, #5
   134b4:	movt	r1, #1
   134b8:	bl	10cf4 <dcgettext@plt>
   134bc:	mov	r1, r0
   134c0:	ldr	r0, [r6, #8]
   134c4:	ldm	r6, {r2, r3}
   134c8:	ldr	r7, [r6, #12]
   134cc:	stm	sp, {r0, r7}
   134d0:	b	13540 <__assert_fail@plt+0x26b4>
   134d4:	movw	r1, #18219	; 0x472b
   134d8:	mov	r0, #0
   134dc:	mov	r2, #5
   134e0:	movt	r1, #1
   134e4:	bl	10cf4 <dcgettext@plt>
   134e8:	mov	r1, r0
   134ec:	ldm	r6, {r2, r3}
   134f0:	ldr	r0, [r6, #8]
   134f4:	ldr	r7, [r6, #12]
   134f8:	ldr	r6, [r6, #16]
   134fc:	stm	sp, {r0, r7}
   13500:	str	r6, [sp, #8]
   13504:	b	13540 <__assert_fail@plt+0x26b4>
   13508:	movw	r1, #18255	; 0x474f
   1350c:	mov	r0, #0
   13510:	mov	r2, #5
   13514:	movt	r1, #1
   13518:	bl	10cf4 <dcgettext@plt>
   1351c:	mov	r1, r0
   13520:	ldm	r6, {r2, r3}
   13524:	ldr	r0, [r6, #8]
   13528:	ldr	r7, [r6, #12]
   1352c:	ldr	r4, [r6, #16]
   13530:	ldr	r6, [r6, #20]
   13534:	stm	sp, {r0, r7}
   13538:	str	r4, [sp, #8]
   1353c:	str	r6, [sp, #12]
   13540:	mov	r0, r5
   13544:	b	13634 <__assert_fail@plt+0x27a8>
   13548:	movw	r1, #18295	; 0x4777
   1354c:	mov	r0, #0
   13550:	mov	r2, #5
   13554:	movt	r1, #1
   13558:	bl	10cf4 <dcgettext@plt>
   1355c:	mov	ip, r0
   13560:	ldm	r6, {r2, r3}
   13564:	ldr	r0, [r6, #8]
   13568:	ldr	r7, [r6, #12]
   1356c:	ldr	r4, [r6, #16]
   13570:	ldr	r1, [r6, #20]
   13574:	ldr	r6, [r6, #24]
   13578:	stm	sp, {r0, r7}
   1357c:	str	r4, [sp, #8]
   13580:	str	r1, [sp, #12]
   13584:	str	r6, [sp, #16]
   13588:	b	1362c <__assert_fail@plt+0x27a0>
   1358c:	movw	r1, #18387	; 0x47d3
   13590:	movt	r1, #1
   13594:	mov	r0, #0
   13598:	mov	r2, #5
   1359c:	bl	10cf4 <dcgettext@plt>
   135a0:	mov	ip, r0
   135a4:	ldr	r2, [r6]
   135a8:	ldr	r3, [r6, #4]
   135ac:	ldr	r0, [r6, #8]
   135b0:	ldr	r7, [r6, #12]
   135b4:	ldr	r4, [r6, #16]
   135b8:	ldr	r1, [r6, #20]
   135bc:	ldr	lr, [r6, #24]
   135c0:	ldr	r8, [r6, #28]
   135c4:	ldr	r6, [r6, #32]
   135c8:	stm	sp, {r0, r7}
   135cc:	str	r4, [sp, #8]
   135d0:	str	r1, [sp, #12]
   135d4:	str	lr, [sp, #16]
   135d8:	str	r8, [sp, #20]
   135dc:	str	r6, [sp, #24]
   135e0:	b	1362c <__assert_fail@plt+0x27a0>
   135e4:	movw	r1, #18339	; 0x47a3
   135e8:	mov	r0, #0
   135ec:	mov	r2, #5
   135f0:	movt	r1, #1
   135f4:	bl	10cf4 <dcgettext@plt>
   135f8:	mov	ip, r0
   135fc:	ldm	r6, {r2, r3}
   13600:	ldr	r0, [r6, #8]
   13604:	ldr	r7, [r6, #12]
   13608:	ldr	r4, [r6, #16]
   1360c:	ldr	r1, [r6, #20]
   13610:	ldr	lr, [r6, #24]
   13614:	ldr	r6, [r6, #28]
   13618:	stm	sp, {r0, r7}
   1361c:	str	r4, [sp, #8]
   13620:	str	r1, [sp, #12]
   13624:	str	lr, [sp, #16]
   13628:	str	r6, [sp, #20]
   1362c:	mov	r0, r5
   13630:	mov	r1, ip
   13634:	bl	10dcc <fprintf@plt>
   13638:	sub	sp, fp, #24
   1363c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13640:	push	{r4, sl, fp, lr}
   13644:	add	fp, sp, #8
   13648:	sub	sp, sp, #8
   1364c:	ldr	ip, [fp, #8]
   13650:	mov	lr, #0
   13654:	ldr	r4, [ip, lr, lsl #2]
   13658:	add	lr, lr, #1
   1365c:	cmp	r4, #0
   13660:	bne	13654 <__assert_fail@plt+0x27c8>
   13664:	sub	r4, lr, #1
   13668:	str	ip, [sp]
   1366c:	str	r4, [sp, #4]
   13670:	bl	1331c <__assert_fail@plt+0x2490>
   13674:	sub	sp, fp, #8
   13678:	pop	{r4, sl, fp, pc}
   1367c:	push	{r4, r5, fp, lr}
   13680:	add	fp, sp, #8
   13684:	sub	sp, sp, #48	; 0x30
   13688:	ldr	r4, [fp, #8]
   1368c:	mov	ip, #0
   13690:	add	lr, sp, #8
   13694:	ldr	r5, [r4]
   13698:	cmp	r5, #0
   1369c:	str	r5, [lr, ip, lsl #2]
   136a0:	beq	136b8 <__assert_fail@plt+0x282c>
   136a4:	add	ip, ip, #1
   136a8:	add	r4, r4, #4
   136ac:	cmp	ip, #10
   136b0:	bne	13694 <__assert_fail@plt+0x2808>
   136b4:	mov	ip, #10
   136b8:	str	lr, [sp]
   136bc:	str	ip, [sp, #4]
   136c0:	bl	1331c <__assert_fail@plt+0x2490>
   136c4:	sub	sp, fp, #8
   136c8:	pop	{r4, r5, fp, pc}
   136cc:	push	{fp, lr}
   136d0:	mov	fp, sp
   136d4:	sub	sp, sp, #8
   136d8:	add	ip, fp, #8
   136dc:	str	ip, [sp, #4]
   136e0:	str	ip, [sp]
   136e4:	bl	1367c <__assert_fail@plt+0x27f0>
   136e8:	mov	sp, fp
   136ec:	pop	{fp, pc}
   136f0:	push	{fp, lr}
   136f4:	mov	fp, sp
   136f8:	movw	r0, #20780	; 0x512c
   136fc:	movt	r0, #2
   13700:	ldr	r1, [r0]
   13704:	movw	r0, #17525	; 0x4475
   13708:	movt	r0, #1
   1370c:	bl	10e68 <fputs@plt>
   13710:	movw	r1, #18499	; 0x4843
   13714:	mov	r0, #0
   13718:	mov	r2, #5
   1371c:	movt	r1, #1
   13720:	bl	10cf4 <dcgettext@plt>
   13724:	movw	r1, #17613	; 0x44cd
   13728:	movt	r1, #1
   1372c:	bl	10ca0 <printf@plt>
   13730:	movw	r1, #18519	; 0x4857
   13734:	mov	r0, #0
   13738:	mov	r2, #5
   1373c:	movt	r1, #1
   13740:	bl	10cf4 <dcgettext@plt>
   13744:	movw	r1, #17264	; 0x4370
   13748:	movw	r2, #17527	; 0x4477
   1374c:	movt	r1, #1
   13750:	movt	r2, #1
   13754:	bl	10ca0 <printf@plt>
   13758:	movw	r1, #18539	; 0x486b
   1375c:	mov	r0, #0
   13760:	mov	r2, #5
   13764:	movt	r1, #1
   13768:	bl	10cf4 <dcgettext@plt>
   1376c:	movw	r1, #18578	; 0x4892
   13770:	movt	r1, #1
   13774:	pop	{fp, lr}
   13778:	b	10ca0 <printf@plt>
   1377c:	b	13780 <__assert_fail@plt+0x28f4>
   13780:	push	{r4, r5, r6, sl, fp, lr}
   13784:	add	fp, sp, #16
   13788:	mov	r4, r2
   1378c:	mov	r5, r1
   13790:	mov	r6, r0
   13794:	bl	13e8c <__assert_fail@plt+0x3000>
   13798:	cmp	r0, #0
   1379c:	popne	{r4, r5, r6, sl, fp, pc}
   137a0:	cmp	r6, #0
   137a4:	beq	137b8 <__assert_fail@plt+0x292c>
   137a8:	cmp	r5, #0
   137ac:	cmpne	r4, #0
   137b0:	bne	137b8 <__assert_fail@plt+0x292c>
   137b4:	pop	{r4, r5, r6, sl, fp, pc}
   137b8:	bl	13be8 <__assert_fail@plt+0x2d5c>
   137bc:	push	{fp, lr}
   137c0:	mov	fp, sp
   137c4:	bl	13da8 <__assert_fail@plt+0x2f1c>
   137c8:	cmp	r0, #0
   137cc:	popne	{fp, pc}
   137d0:	bl	13be8 <__assert_fail@plt+0x2d5c>
   137d4:	push	{fp, lr}
   137d8:	mov	fp, sp
   137dc:	bl	13da8 <__assert_fail@plt+0x2f1c>
   137e0:	cmp	r0, #0
   137e4:	popne	{fp, pc}
   137e8:	bl	13be8 <__assert_fail@plt+0x2d5c>
   137ec:	push	{fp, lr}
   137f0:	mov	fp, sp
   137f4:	bl	13da8 <__assert_fail@plt+0x2f1c>
   137f8:	cmp	r0, #0
   137fc:	popne	{fp, pc}
   13800:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13804:	push	{r4, r5, fp, lr}
   13808:	add	fp, sp, #8
   1380c:	mov	r4, r1
   13810:	mov	r5, r0
   13814:	bl	13e3c <__assert_fail@plt+0x2fb0>
   13818:	cmp	r0, #0
   1381c:	popne	{r4, r5, fp, pc}
   13820:	cmp	r5, #0
   13824:	beq	13834 <__assert_fail@plt+0x29a8>
   13828:	cmp	r4, #0
   1382c:	bne	13834 <__assert_fail@plt+0x29a8>
   13830:	pop	{r4, r5, fp, pc}
   13834:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13838:	push	{fp, lr}
   1383c:	mov	fp, sp
   13840:	cmp	r1, #0
   13844:	orreq	r1, r1, #1
   13848:	bl	13e3c <__assert_fail@plt+0x2fb0>
   1384c:	cmp	r0, #0
   13850:	popne	{fp, pc}
   13854:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13858:	push	{fp, lr}
   1385c:	mov	fp, sp
   13860:	clz	r3, r2
   13864:	lsr	ip, r3, #5
   13868:	clz	r3, r1
   1386c:	lsr	r3, r3, #5
   13870:	orrs	r3, r3, ip
   13874:	movwne	r1, #1
   13878:	movwne	r2, #1
   1387c:	bl	13e8c <__assert_fail@plt+0x3000>
   13880:	cmp	r0, #0
   13884:	popne	{fp, pc}
   13888:	bl	13be8 <__assert_fail@plt+0x2d5c>
   1388c:	push	{fp, lr}
   13890:	mov	fp, sp
   13894:	mov	r2, r1
   13898:	mov	r1, r0
   1389c:	mov	r0, #0
   138a0:	bl	13e8c <__assert_fail@plt+0x3000>
   138a4:	cmp	r0, #0
   138a8:	popne	{fp, pc}
   138ac:	bl	13be8 <__assert_fail@plt+0x2d5c>
   138b0:	mov	r2, r1
   138b4:	mov	r1, r0
   138b8:	mov	r0, #0
   138bc:	b	13858 <__assert_fail@plt+0x29cc>
   138c0:	mov	r2, #1
   138c4:	b	138c8 <__assert_fail@plt+0x2a3c>
   138c8:	push	{r4, r5, fp, lr}
   138cc:	add	fp, sp, #8
   138d0:	ldr	r5, [r1]
   138d4:	mov	r4, r1
   138d8:	cmp	r0, #0
   138dc:	beq	138f4 <__assert_fail@plt+0x2a68>
   138e0:	mov	r1, #1
   138e4:	add	r1, r1, r5, lsr #1
   138e8:	adds	r5, r5, r1
   138ec:	bcc	1390c <__assert_fail@plt+0x2a80>
   138f0:	bl	13be8 <__assert_fail@plt+0x2d5c>
   138f4:	cmp	r5, #0
   138f8:	bne	1390c <__assert_fail@plt+0x2a80>
   138fc:	mov	r1, #64	; 0x40
   13900:	cmp	r2, #64	; 0x40
   13904:	udiv	r5, r1, r2
   13908:	addhi	r5, r5, #1
   1390c:	mov	r1, r5
   13910:	bl	13780 <__assert_fail@plt+0x28f4>
   13914:	str	r5, [r4]
   13918:	pop	{r4, r5, fp, pc}
   1391c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13920:	add	fp, sp, #24
   13924:	ldr	r6, [r1]
   13928:	mov	r8, r1
   1392c:	ldr	r4, [fp, #8]
   13930:	add	r1, r6, r6, asr #1
   13934:	cmp	r1, r6
   13938:	mvnvs	r1, #-2147483648	; 0x80000000
   1393c:	cmp	r1, r3
   13940:	mov	r5, r1
   13944:	movgt	r5, r3
   13948:	cmn	r3, #1
   1394c:	movle	r5, r1
   13950:	cmn	r4, #1
   13954:	ble	13974 <__assert_fail@plt+0x2ae8>
   13958:	cmp	r4, #0
   1395c:	beq	139c8 <__assert_fail@plt+0x2b3c>
   13960:	cmn	r5, #1
   13964:	ble	1399c <__assert_fail@plt+0x2b10>
   13968:	mvn	r7, #-2147483648	; 0x80000000
   1396c:	udiv	r1, r7, r4
   13970:	b	13990 <__assert_fail@plt+0x2b04>
   13974:	cmn	r5, #1
   13978:	ble	139b8 <__assert_fail@plt+0x2b2c>
   1397c:	cmn	r4, #1
   13980:	beq	139c8 <__assert_fail@plt+0x2b3c>
   13984:	mov	r1, #-2147483648	; 0x80000000
   13988:	mvn	r7, #-2147483648	; 0x80000000
   1398c:	sdiv	r1, r1, r4
   13990:	cmp	r1, r5
   13994:	bge	139c8 <__assert_fail@plt+0x2b3c>
   13998:	b	139d8 <__assert_fail@plt+0x2b4c>
   1399c:	beq	139c8 <__assert_fail@plt+0x2b3c>
   139a0:	mov	r1, #-2147483648	; 0x80000000
   139a4:	mvn	r7, #-2147483648	; 0x80000000
   139a8:	sdiv	r1, r1, r5
   139ac:	cmp	r1, r4
   139b0:	bge	139c8 <__assert_fail@plt+0x2b3c>
   139b4:	b	139d8 <__assert_fail@plt+0x2b4c>
   139b8:	mvn	r7, #-2147483648	; 0x80000000
   139bc:	sdiv	r1, r7, r4
   139c0:	cmp	r5, r1
   139c4:	blt	139d8 <__assert_fail@plt+0x2b4c>
   139c8:	mul	r1, r5, r4
   139cc:	mov	r7, #64	; 0x40
   139d0:	cmp	r1, #63	; 0x3f
   139d4:	bgt	139e0 <__assert_fail@plt+0x2b54>
   139d8:	sdiv	r5, r7, r4
   139dc:	mul	r1, r5, r4
   139e0:	cmp	r0, #0
   139e4:	moveq	r7, #0
   139e8:	streq	r7, [r8]
   139ec:	sub	r7, r5, r6
   139f0:	cmp	r7, r2
   139f4:	bge	13a98 <__assert_fail@plt+0x2c0c>
   139f8:	add	r5, r6, r2
   139fc:	mov	r2, #0
   13a00:	mov	r1, #0
   13a04:	cmp	r5, r3
   13a08:	movwgt	r2, #1
   13a0c:	cmn	r3, #1
   13a10:	movwgt	r1, #1
   13a14:	cmp	r5, r6
   13a18:	bvs	13a80 <__assert_fail@plt+0x2bf4>
   13a1c:	ands	r1, r1, r2
   13a20:	bne	13a80 <__assert_fail@plt+0x2bf4>
   13a24:	cmn	r4, #1
   13a28:	ble	13a48 <__assert_fail@plt+0x2bbc>
   13a2c:	cmp	r4, #0
   13a30:	beq	13a94 <__assert_fail@plt+0x2c08>
   13a34:	cmn	r5, #1
   13a38:	ble	13a6c <__assert_fail@plt+0x2be0>
   13a3c:	mvn	r1, #-2147483648	; 0x80000000
   13a40:	udiv	r1, r1, r4
   13a44:	b	13a60 <__assert_fail@plt+0x2bd4>
   13a48:	cmn	r5, #1
   13a4c:	ble	13a84 <__assert_fail@plt+0x2bf8>
   13a50:	cmn	r4, #1
   13a54:	beq	13a94 <__assert_fail@plt+0x2c08>
   13a58:	mov	r1, #-2147483648	; 0x80000000
   13a5c:	sdiv	r1, r1, r4
   13a60:	cmp	r1, r5
   13a64:	bge	13a94 <__assert_fail@plt+0x2c08>
   13a68:	b	13a80 <__assert_fail@plt+0x2bf4>
   13a6c:	beq	13a94 <__assert_fail@plt+0x2c08>
   13a70:	mov	r1, #-2147483648	; 0x80000000
   13a74:	sdiv	r1, r1, r5
   13a78:	cmp	r1, r4
   13a7c:	bge	13a94 <__assert_fail@plt+0x2c08>
   13a80:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13a84:	mvn	r1, #-2147483648	; 0x80000000
   13a88:	sdiv	r1, r1, r4
   13a8c:	cmp	r5, r1
   13a90:	blt	13a80 <__assert_fail@plt+0x2bf4>
   13a94:	mul	r1, r5, r4
   13a98:	bl	13804 <__assert_fail@plt+0x2978>
   13a9c:	str	r5, [r8]
   13aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13aa4:	push	{fp, lr}
   13aa8:	mov	fp, sp
   13aac:	mov	r1, #1
   13ab0:	bl	13c2c <__assert_fail@plt+0x2da0>
   13ab4:	cmp	r0, #0
   13ab8:	popne	{fp, pc}
   13abc:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13ac0:	push	{fp, lr}
   13ac4:	mov	fp, sp
   13ac8:	bl	13c2c <__assert_fail@plt+0x2da0>
   13acc:	cmp	r0, #0
   13ad0:	popne	{fp, pc}
   13ad4:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13ad8:	push	{fp, lr}
   13adc:	mov	fp, sp
   13ae0:	mov	r1, #1
   13ae4:	bl	13c2c <__assert_fail@plt+0x2da0>
   13ae8:	cmp	r0, #0
   13aec:	popne	{fp, pc}
   13af0:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13af4:	push	{fp, lr}
   13af8:	mov	fp, sp
   13afc:	bl	13c2c <__assert_fail@plt+0x2da0>
   13b00:	cmp	r0, #0
   13b04:	popne	{fp, pc}
   13b08:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13b0c:	push	{r4, r5, fp, lr}
   13b10:	add	fp, sp, #8
   13b14:	mov	r5, r0
   13b18:	mov	r0, r1
   13b1c:	mov	r4, r1
   13b20:	bl	13da8 <__assert_fail@plt+0x2f1c>
   13b24:	cmp	r0, #0
   13b28:	beq	13b3c <__assert_fail@plt+0x2cb0>
   13b2c:	mov	r1, r5
   13b30:	mov	r2, r4
   13b34:	pop	{r4, r5, fp, lr}
   13b38:	b	10cdc <memcpy@plt>
   13b3c:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13b40:	push	{r4, r5, fp, lr}
   13b44:	add	fp, sp, #8
   13b48:	mov	r5, r0
   13b4c:	mov	r0, r1
   13b50:	mov	r4, r1
   13b54:	bl	13da8 <__assert_fail@plt+0x2f1c>
   13b58:	cmp	r0, #0
   13b5c:	beq	13b70 <__assert_fail@plt+0x2ce4>
   13b60:	mov	r1, r5
   13b64:	mov	r2, r4
   13b68:	pop	{r4, r5, fp, lr}
   13b6c:	b	10cdc <memcpy@plt>
   13b70:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13b74:	push	{r4, r5, fp, lr}
   13b78:	add	fp, sp, #8
   13b7c:	mov	r5, r0
   13b80:	add	r0, r1, #1
   13b84:	mov	r4, r1
   13b88:	bl	13da8 <__assert_fail@plt+0x2f1c>
   13b8c:	cmp	r0, #0
   13b90:	beq	13bac <__assert_fail@plt+0x2d20>
   13b94:	mov	r1, #0
   13b98:	mov	r2, r4
   13b9c:	strb	r1, [r0, r4]
   13ba0:	mov	r1, r5
   13ba4:	pop	{r4, r5, fp, lr}
   13ba8:	b	10cdc <memcpy@plt>
   13bac:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13bb0:	push	{r4, r5, fp, lr}
   13bb4:	add	fp, sp, #8
   13bb8:	mov	r4, r0
   13bbc:	bl	10dc0 <strlen@plt>
   13bc0:	add	r5, r0, #1
   13bc4:	mov	r0, r5
   13bc8:	bl	13da8 <__assert_fail@plt+0x2f1c>
   13bcc:	cmp	r0, #0
   13bd0:	beq	13be4 <__assert_fail@plt+0x2d58>
   13bd4:	mov	r1, r4
   13bd8:	mov	r2, r5
   13bdc:	pop	{r4, r5, fp, lr}
   13be0:	b	10cdc <memcpy@plt>
   13be4:	bl	13be8 <__assert_fail@plt+0x2d5c>
   13be8:	push	{fp, lr}
   13bec:	mov	fp, sp
   13bf0:	movw	r0, #20684	; 0x50cc
   13bf4:	movw	r1, #18654	; 0x48de
   13bf8:	mov	r2, #5
   13bfc:	movt	r0, #2
   13c00:	movt	r1, #1
   13c04:	ldr	r4, [r0]
   13c08:	mov	r0, #0
   13c0c:	bl	10cf4 <dcgettext@plt>
   13c10:	movw	r2, #17639	; 0x44e7
   13c14:	mov	r3, r0
   13c18:	mov	r0, r4
   13c1c:	mov	r1, #0
   13c20:	movt	r2, #1
   13c24:	bl	10d54 <error@plt>
   13c28:	bl	10e80 <abort@plt>
   13c2c:	clz	r2, r1
   13c30:	clz	r3, r0
   13c34:	lsr	r2, r2, #5
   13c38:	lsr	r3, r3, #5
   13c3c:	orrs	r2, r3, r2
   13c40:	movwne	r1, #1
   13c44:	movwne	r0, #1
   13c48:	cmp	r1, #0
   13c4c:	beq	13c7c <__assert_fail@plt+0x2df0>
   13c50:	mvn	r2, #-2147483648	; 0x80000000
   13c54:	udiv	r2, r2, r1
   13c58:	cmp	r2, r0
   13c5c:	bcs	13c7c <__assert_fail@plt+0x2df0>
   13c60:	push	{fp, lr}
   13c64:	mov	fp, sp
   13c68:	bl	10dd8 <__errno_location@plt>
   13c6c:	mov	r1, #12
   13c70:	str	r1, [r0]
   13c74:	mov	r0, #0
   13c78:	pop	{fp, pc}
   13c7c:	b	10c88 <calloc@plt>
   13c80:	push	{r4, sl, fp, lr}
   13c84:	add	fp, sp, #8
   13c88:	sub	sp, sp, #8
   13c8c:	mov	r4, r0
   13c90:	cmp	r0, #0
   13c94:	beq	13ccc <__assert_fail@plt+0x2e40>
   13c98:	mov	r0, r4
   13c9c:	bl	10d78 <__freading@plt>
   13ca0:	cmp	r0, #0
   13ca4:	beq	13ccc <__assert_fail@plt+0x2e40>
   13ca8:	ldrb	r0, [r4, #1]
   13cac:	tst	r0, #1
   13cb0:	beq	13ccc <__assert_fail@plt+0x2e40>
   13cb4:	mov	r0, #1
   13cb8:	mov	r2, #0
   13cbc:	mov	r3, #0
   13cc0:	str	r0, [sp]
   13cc4:	mov	r0, r4
   13cc8:	bl	13d04 <__assert_fail@plt+0x2e78>
   13ccc:	mov	r0, r4
   13cd0:	sub	sp, fp, #8
   13cd4:	pop	{r4, sl, fp, lr}
   13cd8:	b	10cac <fflush@plt>
   13cdc:	push	{r4, r5, r6, sl, fp, lr}
   13ce0:	add	fp, sp, #16
   13ce4:	mov	r4, r0
   13ce8:	bl	10dd8 <__errno_location@plt>
   13cec:	ldr	r6, [r0]
   13cf0:	mov	r5, r0
   13cf4:	mov	r0, r4
   13cf8:	bl	10cb8 <free@plt>
   13cfc:	str	r6, [r5]
   13d00:	pop	{r4, r5, r6, sl, fp, pc}
   13d04:	push	{r4, r5, r6, r7, fp, lr}
   13d08:	add	fp, sp, #16
   13d0c:	sub	sp, sp, #8
   13d10:	mov	r4, r0
   13d14:	ldr	r0, [r0, #4]
   13d18:	mov	r5, r3
   13d1c:	mov	r6, r2
   13d20:	ldr	r1, [r4, #8]
   13d24:	cmp	r1, r0
   13d28:	bne	13d44 <__assert_fail@plt+0x2eb8>
   13d2c:	ldrd	r0, [r4, #16]
   13d30:	cmp	r1, r0
   13d34:	bne	13d44 <__assert_fail@plt+0x2eb8>
   13d38:	ldr	r0, [r4, #36]	; 0x24
   13d3c:	cmp	r0, #0
   13d40:	beq	13d5c <__assert_fail@plt+0x2ed0>
   13d44:	mov	r0, r4
   13d48:	mov	r2, r6
   13d4c:	mov	r3, r5
   13d50:	sub	sp, fp, #16
   13d54:	pop	{r4, r5, r6, r7, fp, lr}
   13d58:	b	10e14 <fseeko64@plt>
   13d5c:	ldr	r7, [fp, #8]
   13d60:	mov	r0, r4
   13d64:	bl	10dfc <fileno@plt>
   13d68:	mov	r2, r6
   13d6c:	mov	r3, r5
   13d70:	str	r7, [sp]
   13d74:	bl	10d24 <lseek64@plt>
   13d78:	and	r2, r0, r1
   13d7c:	cmn	r2, #1
   13d80:	beq	13d9c <__assert_fail@plt+0x2f10>
   13d84:	strd	r0, [r4, #80]	; 0x50
   13d88:	ldr	r0, [r4]
   13d8c:	bic	r0, r0, #16
   13d90:	str	r0, [r4]
   13d94:	mov	r0, #0
   13d98:	b	13da0 <__assert_fail@plt+0x2f14>
   13d9c:	mvn	r0, #0
   13da0:	sub	sp, fp, #16
   13da4:	pop	{r4, r5, r6, r7, fp, pc}
   13da8:	cmp	r0, #0
   13dac:	movweq	r0, #1
   13db0:	cmn	r0, #1
   13db4:	ble	13dbc <__assert_fail@plt+0x2f30>
   13db8:	b	10d60 <malloc@plt>
   13dbc:	push	{fp, lr}
   13dc0:	mov	fp, sp
   13dc4:	bl	10dd8 <__errno_location@plt>
   13dc8:	mov	r1, #12
   13dcc:	str	r1, [r0]
   13dd0:	mov	r0, #0
   13dd4:	pop	{fp, pc}
   13dd8:	push	{r4, r5, r6, r7, fp, lr}
   13ddc:	add	fp, sp, #16
   13de0:	sub	sp, sp, #8
   13de4:	cmp	r0, #0
   13de8:	add	r5, sp, #4
   13dec:	mov	r7, r2
   13df0:	mov	r4, r1
   13df4:	movne	r5, r0
   13df8:	mov	r0, r5
   13dfc:	bl	10d48 <mbrtowc@plt>
   13e00:	mov	r6, r0
   13e04:	cmp	r7, #0
   13e08:	beq	13e30 <__assert_fail@plt+0x2fa4>
   13e0c:	cmn	r6, #2
   13e10:	bcc	13e30 <__assert_fail@plt+0x2fa4>
   13e14:	mov	r0, #0
   13e18:	bl	13f48 <__assert_fail@plt+0x30bc>
   13e1c:	cmp	r0, #0
   13e20:	bne	13e30 <__assert_fail@plt+0x2fa4>
   13e24:	ldrb	r0, [r4]
   13e28:	mov	r6, #1
   13e2c:	str	r0, [r5]
   13e30:	mov	r0, r6
   13e34:	sub	sp, fp, #16
   13e38:	pop	{r4, r5, r6, r7, fp, pc}
   13e3c:	push	{fp, lr}
   13e40:	mov	fp, sp
   13e44:	cmp	r0, #0
   13e48:	beq	13e64 <__assert_fail@plt+0x2fd8>
   13e4c:	cmp	r1, #0
   13e50:	beq	13e70 <__assert_fail@plt+0x2fe4>
   13e54:	cmn	r1, #1
   13e58:	ble	13e78 <__assert_fail@plt+0x2fec>
   13e5c:	pop	{fp, lr}
   13e60:	b	10d00 <realloc@plt>
   13e64:	mov	r0, r1
   13e68:	pop	{fp, lr}
   13e6c:	b	13da8 <__assert_fail@plt+0x2f1c>
   13e70:	bl	13cdc <__assert_fail@plt+0x2e50>
   13e74:	b	13e84 <__assert_fail@plt+0x2ff8>
   13e78:	bl	10dd8 <__errno_location@plt>
   13e7c:	mov	r1, #12
   13e80:	str	r1, [r0]
   13e84:	mov	r0, #0
   13e88:	pop	{fp, pc}
   13e8c:	cmp	r2, #0
   13e90:	beq	13ec0 <__assert_fail@plt+0x3034>
   13e94:	mvn	r3, #0
   13e98:	udiv	r3, r3, r2
   13e9c:	cmp	r3, r1
   13ea0:	bcs	13ec0 <__assert_fail@plt+0x3034>
   13ea4:	push	{fp, lr}
   13ea8:	mov	fp, sp
   13eac:	bl	10dd8 <__errno_location@plt>
   13eb0:	mov	r1, #12
   13eb4:	str	r1, [r0]
   13eb8:	mov	r0, #0
   13ebc:	pop	{fp, pc}
   13ec0:	mul	r1, r2, r1
   13ec4:	b	13e3c <__assert_fail@plt+0x2fb0>
   13ec8:	push	{r4, r5, r6, sl, fp, lr}
   13ecc:	add	fp, sp, #16
   13ed0:	mov	r4, r0
   13ed4:	bl	10d3c <__fpending@plt>
   13ed8:	mov	r5, r0
   13edc:	mov	r0, r4
   13ee0:	bl	10cc4 <ferror@plt>
   13ee4:	mov	r6, r0
   13ee8:	mov	r0, r4
   13eec:	bl	10e08 <fclose@plt>
   13ef0:	cmp	r6, #0
   13ef4:	beq	13f14 <__assert_fail@plt+0x3088>
   13ef8:	mvn	r4, #0
   13efc:	cmp	r0, #0
   13f00:	bne	13f40 <__assert_fail@plt+0x30b4>
   13f04:	bl	10dd8 <__errno_location@plt>
   13f08:	mov	r1, #0
   13f0c:	str	r1, [r0]
   13f10:	b	13f40 <__assert_fail@plt+0x30b4>
   13f14:	cmp	r0, #0
   13f18:	mov	r4, r0
   13f1c:	mvnne	r4, #0
   13f20:	cmp	r5, #0
   13f24:	bne	13f40 <__assert_fail@plt+0x30b4>
   13f28:	cmp	r0, #0
   13f2c:	beq	13f40 <__assert_fail@plt+0x30b4>
   13f30:	bl	10dd8 <__errno_location@plt>
   13f34:	ldr	r0, [r0]
   13f38:	subs	r4, r0, #9
   13f3c:	mvnne	r4, #0
   13f40:	mov	r0, r4
   13f44:	pop	{r4, r5, r6, sl, fp, pc}
   13f48:	push	{r4, sl, fp, lr}
   13f4c:	add	fp, sp, #8
   13f50:	sub	sp, sp, #264	; 0x108
   13f54:	add	r1, sp, #7
   13f58:	movw	r2, #257	; 0x101
   13f5c:	bl	13fec <__assert_fail@plt+0x3160>
   13f60:	mov	r4, #0
   13f64:	cmp	r0, #0
   13f68:	bne	13fa8 <__assert_fail@plt+0x311c>
   13f6c:	movw	r1, #18671	; 0x48ef
   13f70:	add	r0, sp, #7
   13f74:	mov	r2, #2
   13f78:	movt	r1, #1
   13f7c:	bl	10db4 <bcmp@plt>
   13f80:	cmp	r0, #0
   13f84:	beq	13fa8 <__assert_fail@plt+0x311c>
   13f88:	movw	r1, #18673	; 0x48f1
   13f8c:	add	r0, sp, #7
   13f90:	mov	r2, #6
   13f94:	movt	r1, #1
   13f98:	bl	10db4 <bcmp@plt>
   13f9c:	cmp	r0, #0
   13fa0:	mov	r4, r0
   13fa4:	movwne	r4, #1
   13fa8:	mov	r0, r4
   13fac:	sub	sp, fp, #8
   13fb0:	pop	{r4, sl, fp, pc}
   13fb4:	push	{fp, lr}
   13fb8:	mov	fp, sp
   13fbc:	mov	r0, #14
   13fc0:	bl	10e38 <nl_langinfo@plt>
   13fc4:	movw	r1, #17526	; 0x4476
   13fc8:	cmp	r0, #0
   13fcc:	movt	r1, #1
   13fd0:	movne	r1, r0
   13fd4:	movw	r0, #18679	; 0x48f7
   13fd8:	ldrb	r2, [r1]
   13fdc:	movt	r0, #1
   13fe0:	cmp	r2, #0
   13fe4:	movne	r0, r1
   13fe8:	pop	{fp, pc}
   13fec:	push	{r4, r5, r6, r7, fp, lr}
   13ff0:	add	fp, sp, #16
   13ff4:	mov	r4, r1
   13ff8:	mov	r1, #0
   13ffc:	mov	r6, r2
   14000:	bl	10e20 <setlocale@plt>
   14004:	cmp	r0, #0
   14008:	beq	14034 <__assert_fail@plt+0x31a8>
   1400c:	mov	r7, r0
   14010:	bl	10dc0 <strlen@plt>
   14014:	cmp	r0, r6
   14018:	bcs	14048 <__assert_fail@plt+0x31bc>
   1401c:	add	r2, r0, #1
   14020:	mov	r0, r4
   14024:	mov	r1, r7
   14028:	bl	10cdc <memcpy@plt>
   1402c:	mov	r5, #0
   14030:	b	14070 <__assert_fail@plt+0x31e4>
   14034:	cmp	r6, #0
   14038:	mov	r5, #22
   1403c:	movne	r0, #0
   14040:	strbne	r0, [r4]
   14044:	b	14070 <__assert_fail@plt+0x31e4>
   14048:	mov	r5, #34	; 0x22
   1404c:	cmp	r6, #0
   14050:	beq	14070 <__assert_fail@plt+0x31e4>
   14054:	sub	r6, r6, #1
   14058:	mov	r0, r4
   1405c:	mov	r1, r7
   14060:	mov	r2, r6
   14064:	bl	10cdc <memcpy@plt>
   14068:	mov	r0, #0
   1406c:	strb	r0, [r4, r6]
   14070:	mov	r0, r5
   14074:	pop	{r4, r5, r6, r7, fp, pc}
   14078:	mov	r1, #0
   1407c:	b	10e20 <setlocale@plt>
   14080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14084:	mov	r7, r0
   14088:	ldr	r6, [pc, #72]	; 140d8 <__assert_fail@plt+0x324c>
   1408c:	ldr	r5, [pc, #72]	; 140dc <__assert_fail@plt+0x3250>
   14090:	add	r6, pc, r6
   14094:	add	r5, pc, r5
   14098:	sub	r6, r6, r5
   1409c:	mov	r8, r1
   140a0:	mov	r9, r2
   140a4:	bl	10c68 <calloc@plt-0x20>
   140a8:	asrs	r6, r6, #2
   140ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   140b0:	mov	r4, #0
   140b4:	add	r4, r4, #1
   140b8:	ldr	r3, [r5], #4
   140bc:	mov	r2, r9
   140c0:	mov	r1, r8
   140c4:	mov	r0, r7
   140c8:	blx	r3
   140cc:	cmp	r6, r4
   140d0:	bne	140b4 <__assert_fail@plt+0x3228>
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140d8:	andeq	r0, r1, r4, ror lr
   140dc:	andeq	r0, r1, ip, ror #28
   140e0:	bx	lr
   140e4:	ldr	r3, [pc, #12]	; 140f8 <__assert_fail@plt+0x326c>
   140e8:	mov	r1, #0
   140ec:	add	r3, pc, r3
   140f0:	ldr	r2, [r3]
   140f4:	b	10de4 <__cxa_atexit@plt>
   140f8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

Disassembly of section .fini:

000140fc <.fini>:
   140fc:	push	{r3, lr}
   14100:	pop	{r3, pc}
