
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010ea0 <.init>:
   10ea0:	push	{r3, lr}
   10ea4:	bl	1119c <__assert_fail@plt+0x48>
   10ea8:	pop	{r3, pc}

Disassembly of section .plt:

00010eac <calloc@plt-0x14>:
   10eac:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb0:	ldr	lr, [pc, #4]	; 10ebc <calloc@plt-0x4>
   10eb4:	add	lr, pc, lr
   10eb8:	ldr	pc, [lr, #8]!
   10ebc:	andeq	r8, r1, r4, asr #2

00010ec0 <calloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #324]!	; 0x144

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #316]!	; 0x13c

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #308]!	; 0x134

00010ee4 <strcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #300]!	; 0x12c

00010ef0 <strtol@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #292]!	; 0x124

00010efc <posix_fadvise64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #284]!	; 0x11c

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #276]!	; 0x114

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #268]!	; 0x10c

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #260]!	; 0x104

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #252]!	; 0xfc

00010f38 <__strtoull_internal@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #244]!	; 0xf4

00010f44 <mbsinit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #236]!	; 0xec

00010f50 <fwrite_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #228]!	; 0xe4

00010f5c <dcgettext@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #220]!	; 0xdc

00010f68 <dup2@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #212]!	; 0xd4

00010f74 <realloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #204]!	; 0xcc

00010f80 <textdomain@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #196]!	; 0xc4

00010f8c <iswprint@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #188]!	; 0xbc

00010f98 <fwrite@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #180]!	; 0xb4

00010fa4 <lseek64@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #172]!	; 0xac

00010fb0 <__ctype_get_mb_cur_max@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #164]!	; 0xa4

00010fbc <__fpending@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #156]!	; 0x9c

00010fc8 <mbrtowc@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #148]!	; 0x94

00010fd4 <error@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #140]!	; 0x8c

00010fe0 <open64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #132]!	; 0x84

00010fec <getenv@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #124]!	; 0x7c

00010ff8 <malloc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #116]!	; 0x74

00011004 <__libc_start_main@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #108]!	; 0x6c

00011010 <__freading@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #100]!	; 0x64

0001101c <__ctype_toupper_loc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #92]!	; 0x5c

00011028 <__gmon_start__@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #84]!	; 0x54

00011034 <freopen64@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #76]!	; 0x4c

00011040 <getopt_long@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #68]!	; 0x44

0001104c <__ctype_b_loc@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #60]!	; 0x3c

00011058 <exit@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #52]!	; 0x34

00011064 <bcmp@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #44]!	; 0x2c

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #36]!	; 0x24

0001107c <strchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #28]!

00011088 <__errno_location@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #20]!

00011094 <__cxa_atexit@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #12]!

000110a0 <memset@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #4]!

000110ac <__printf_chk@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4092]!	; 0xffc

000110b8 <fileno@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4084]!	; 0xff4

000110c4 <__fprintf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4076]!	; 0xfec

000110d0 <fclose@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110dc <fseeko64@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110e8 <__uflow@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f4 <__overflow@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4044]!	; 0xfcc

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4036]!	; 0xfc4

0001110c <strrchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4028]!	; 0xfbc

00011118 <nl_langinfo@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #4020]!	; 0xfb4

00011124 <bindtextdomain@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #4012]!	; 0xfac

00011130 <strncmp@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #4004]!	; 0xfa4

0001113c <abort@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3996]!	; 0xf9c

00011148 <close@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3988]!	; 0xf94

00011154 <__assert_fail@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3980]!	; 0xf8c

Disassembly of section .text:

00011160 <.text>:
   11160:	mov	fp, #0
   11164:	mov	lr, #0
   11168:	pop	{r1}		; (ldr r1, [sp], #4)
   1116c:	mov	r2, sp
   11170:	push	{r2}		; (str r2, [sp, #-4]!)
   11174:	push	{r0}		; (str r0, [sp, #-4]!)
   11178:	ldr	ip, [pc, #16]	; 11190 <__assert_fail@plt+0x3c>
   1117c:	push	{ip}		; (str ip, [sp, #-4]!)
   11180:	ldr	r0, [pc, #12]	; 11194 <__assert_fail@plt+0x40>
   11184:	ldr	r3, [pc, #12]	; 11198 <__assert_fail@plt+0x44>
   11188:	bl	11004 <__libc_start_main@plt>
   1118c:	bl	1113c <abort@plt>
   11190:	andeq	r7, r1, r0, asr r4
   11194:	andeq	r1, r1, ip, lsr #11
   11198:	strdeq	r7, [r1], -r0
   1119c:	ldr	r3, [pc, #20]	; 111b8 <__assert_fail@plt+0x64>
   111a0:	ldr	r2, [pc, #20]	; 111bc <__assert_fail@plt+0x68>
   111a4:	add	r3, pc, r3
   111a8:	ldr	r2, [r3, r2]
   111ac:	cmp	r2, #0
   111b0:	bxeq	lr
   111b4:	b	11028 <__gmon_start__@plt>
   111b8:	andeq	r7, r1, r4, asr lr
   111bc:	andeq	r0, r0, ip, ror #1
   111c0:	ldr	r0, [pc, #24]	; 111e0 <__assert_fail@plt+0x8c>
   111c4:	ldr	r3, [pc, #24]	; 111e4 <__assert_fail@plt+0x90>
   111c8:	cmp	r3, r0
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0x94>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r9, r2, r8, asr #2
   111e4:	andeq	r9, r2, r8, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	ldr	r0, [pc, #36]	; 11218 <__assert_fail@plt+0xc4>
   111f0:	ldr	r1, [pc, #36]	; 1121c <__assert_fail@plt+0xc8>
   111f4:	sub	r1, r1, r0
   111f8:	asr	r1, r1, #2
   111fc:	add	r1, r1, r1, lsr #31
   11200:	asrs	r1, r1, #1
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0xcc>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	r9, r2, r8, asr #2
   1121c:	andeq	r9, r2, r8, asr #2
   11220:	andeq	r0, r0, r0
   11224:	push	{r4, lr}
   11228:	ldr	r4, [pc, #24]	; 11248 <__assert_fail@plt+0xf4>
   1122c:	ldrb	r3, [r4]
   11230:	cmp	r3, #0
   11234:	popne	{r4, pc}
   11238:	bl	111c0 <__assert_fail@plt+0x6c>
   1123c:	mov	r3, #1
   11240:	strb	r3, [r4]
   11244:	pop	{r4, pc}
   11248:	andeq	r9, r2, ip, ror #2
   1124c:	b	111ec <__assert_fail@plt+0x98>
   11250:	push	{fp, lr}
   11254:	mov	fp, sp
   11258:	sub	sp, sp, #56	; 0x38
   1125c:	mov	r4, r0
   11260:	cmp	r0, #0
   11264:	bne	11568 <__assert_fail@plt+0x414>
   11268:	movw	r1, #29859	; 0x74a3
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10f5c <dcgettext@plt>
   1127c:	mov	r1, r0
   11280:	movw	r0, #37268	; 0x9194
   11284:	movt	r0, #2
   11288:	ldr	r2, [r0]
   1128c:	mov	r0, #1
   11290:	bl	110ac <__printf_chk@plt>
   11294:	movw	r1, #29899	; 0x74cb
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f5c <dcgettext@plt>
   112a8:	movw	r7, #37220	; 0x9164
   112ac:	movt	r7, #2
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ecc <fputs_unlocked@plt>
   112b8:	movw	r1, #31759	; 0x7c0f
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f5c <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ecc <fputs_unlocked@plt>
   112d4:	movw	r1, #30072	; 0x7578
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f5c <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ecc <fputs_unlocked@plt>
   112f0:	movw	r1, #30210	; 0x7602
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f5c <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ecc <fputs_unlocked@plt>
   1130c:	movw	r1, #30455	; 0x76f7
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f5c <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ecc <fputs_unlocked@plt>
   11328:	movw	r1, #30515	; 0x7733
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f5c <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ecc <fputs_unlocked@plt>
   11344:	movw	r1, #30667	; 0x77cb
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f5c <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ecc <fputs_unlocked@plt>
   11360:	movw	r1, #30845	; 0x787d
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	movt	r1, #1
   11370:	bl	10f5c <dcgettext@plt>
   11374:	ldr	r1, [r7]
   11378:	bl	10ecc <fputs_unlocked@plt>
   1137c:	movw	r1, #30909	; 0x78bd
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10f5c <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10ecc <fputs_unlocked@plt>
   11398:	movw	r1, #30977	; 0x7901
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10f5c <dcgettext@plt>
   113ac:	ldr	r1, [r7]
   113b0:	bl	10ecc <fputs_unlocked@plt>
   113b4:	movw	r1, #31022	; 0x792e
   113b8:	mov	r0, #0
   113bc:	mov	r2, #5
   113c0:	movt	r1, #1
   113c4:	bl	10f5c <dcgettext@plt>
   113c8:	ldr	r1, [r7]
   113cc:	bl	10ecc <fputs_unlocked@plt>
   113d0:	movw	r1, #31076	; 0x7964
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f5c <dcgettext@plt>
   113e4:	ldr	r1, [r7]
   113e8:	bl	10ecc <fputs_unlocked@plt>
   113ec:	movw	r1, #31196	; 0x79dc
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	movt	r1, #1
   113fc:	bl	10f5c <dcgettext@plt>
   11400:	ldr	r1, [r7]
   11404:	bl	10ecc <fputs_unlocked@plt>
   11408:	movw	r0, #32576	; 0x7f40
   1140c:	mov	r2, #48	; 0x30
   11410:	mov	r6, sp
   11414:	movw	r5, #31339	; 0x7a6b
   11418:	movt	r0, #1
   1141c:	movt	r5, #1
   11420:	add	r1, r0, #32
   11424:	add	r3, r0, #16
   11428:	vld1.64	{d18-d19}, [r0], r2
   1142c:	vld1.64	{d16-d17}, [r1]
   11430:	vld1.64	{d20-d21}, [r3]
   11434:	vldr	d22, [r0]
   11438:	add	r1, r6, #32
   1143c:	add	r0, r6, #16
   11440:	vst1.64	{d16-d17}, [r1]
   11444:	movw	r1, #31834	; 0x7c5a
   11448:	vst1.64	{d20-d21}, [r0]
   1144c:	mov	r0, r6
   11450:	movt	r1, #1
   11454:	vst1.64	{d18-d19}, [r0], r2
   11458:	vstr	d22, [r0]
   1145c:	mov	r0, r5
   11460:	bl	10ee4 <strcmp@plt>
   11464:	cmp	r0, #0
   11468:	ldrne	r1, [r6, #8]!
   1146c:	cmpne	r1, #0
   11470:	bne	1145c <__assert_fail@plt+0x308>
   11474:	movw	r1, #31929	; 0x7cb9
   11478:	ldr	r6, [r6, #4]
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	movt	r1, #1
   11488:	bl	10f5c <dcgettext@plt>
   1148c:	movw	r2, #31548	; 0x7b3c
   11490:	movw	r3, #31952	; 0x7cd0
   11494:	mov	r1, r0
   11498:	mov	r0, #1
   1149c:	movt	r2, #1
   114a0:	movt	r3, #1
   114a4:	bl	110ac <__printf_chk@plt>
   114a8:	cmp	r6, #0
   114ac:	mov	r0, #5
   114b0:	mov	r1, #0
   114b4:	moveq	r6, r5
   114b8:	bl	11100 <setlocale@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	114f8 <__assert_fail@plt+0x3a4>
   114c4:	movw	r1, #31992	; 0x7cf8
   114c8:	mov	r2, #3
   114cc:	movt	r1, #1
   114d0:	bl	11130 <strncmp@plt>
   114d4:	cmp	r0, #0
   114d8:	beq	114f8 <__assert_fail@plt+0x3a4>
   114dc:	movw	r1, #31996	; 0x7cfc
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	10f5c <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	10ecc <fputs_unlocked@plt>
   114f8:	movw	r1, #32067	; 0x7d43
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	10f5c <dcgettext@plt>
   1150c:	movw	r2, #31952	; 0x7cd0
   11510:	mov	r1, r0
   11514:	mov	r0, #1
   11518:	mov	r3, r5
   1151c:	movt	r2, #1
   11520:	bl	110ac <__printf_chk@plt>
   11524:	movw	r1, #32094	; 0x7d5e
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	10f5c <dcgettext@plt>
   11538:	mov	r1, r0
   1153c:	movw	r0, #31862	; 0x7c76
   11540:	movw	r3, #32144	; 0x7d90
   11544:	cmp	r6, r5
   11548:	mov	r2, r6
   1154c:	movt	r0, #1
   11550:	movt	r3, #1
   11554:	moveq	r3, r0
   11558:	mov	r0, #1
   1155c:	bl	110ac <__printf_chk@plt>
   11560:	mov	r0, r4
   11564:	bl	11058 <exit@plt>
   11568:	movw	r0, #37208	; 0x9158
   1156c:	movw	r1, #29820	; 0x747c
   11570:	mov	r2, #5
   11574:	movt	r0, #2
   11578:	movt	r1, #1
   1157c:	ldr	r5, [r0]
   11580:	mov	r0, #0
   11584:	bl	10f5c <dcgettext@plt>
   11588:	mov	r2, r0
   1158c:	movw	r0, #37268	; 0x9194
   11590:	mov	r1, #1
   11594:	movt	r0, #2
   11598:	ldr	r3, [r0]
   1159c:	mov	r0, r5
   115a0:	bl	110c4 <__fprintf_chk@plt>
   115a4:	mov	r0, r4
   115a8:	bl	11058 <exit@plt>
   115ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b0:	add	fp, sp, #28
   115b4:	sub	sp, sp, #84	; 0x54
   115b8:	mov	r5, r0
   115bc:	movw	r0, #31344	; 0x7a70
   115c0:	mov	r4, r1
   115c4:	movt	r0, #1
   115c8:	bl	10fec <getenv@plt>
   115cc:	mov	r6, r0
   115d0:	movw	r0, #32841	; 0x8049
   115d4:	movt	r0, #1
   115d8:	str	r0, [sp, #52]	; 0x34
   115dc:	str	r0, [sp, #56]	; 0x38
   115e0:	ldr	r0, [r4]
   115e4:	bl	1366c <__assert_fail@plt+0x2518>
   115e8:	movw	r1, #32144	; 0x7d90
   115ec:	mov	r0, #6
   115f0:	movt	r1, #1
   115f4:	bl	11100 <setlocale@plt>
   115f8:	movw	r7, #31552	; 0x7b40
   115fc:	movw	r1, #31360	; 0x7a80
   11600:	movt	r7, #1
   11604:	movt	r1, #1
   11608:	mov	r0, r7
   1160c:	bl	11124 <bindtextdomain@plt>
   11610:	mov	r0, r7
   11614:	bl	10f80 <textdomain@plt>
   11618:	movw	r0, #11836	; 0x2e3c
   1161c:	movt	r0, #1
   11620:	bl	17454 <__assert_fail@plt+0x6300>
   11624:	movw	r1, #37232	; 0x9170
   11628:	mvn	r0, #0
   1162c:	mov	r2, #0
   11630:	mov	r7, #10
   11634:	mov	sl, #0
   11638:	mov	r8, #0
   1163c:	movt	r1, #2
   11640:	str	r2, [r1, #8]
   11644:	str	r2, [r1, #12]
   11648:	str	r0, [r1, #16]
   1164c:	mov	r0, #1
   11650:	str	r2, [r1, #20]
   11654:	strb	r0, [r1, #4]
   11658:	movw	r0, #257	; 0x101
   1165c:	strb	r2, [r1, #2]
   11660:	strh	r0, [r1]
   11664:	mov	r0, #0
   11668:	mov	r1, #0
   1166c:	str	r1, [sp, #48]	; 0x30
   11670:	b	1168c <__assert_fail@plt+0x538>
   11674:	mov	r1, #0
   11678:	str	r1, [r3, #12]
   1167c:	sub	r1, r0, #48	; 0x30
   11680:	str	r1, [r3, #12]
   11684:	mov	sl, #1
   11688:	mov	r7, r9
   1168c:	cmp	r8, #0
   11690:	mov	r1, r8
   11694:	mov	r9, r7
   11698:	mov	r2, r6
   1169c:	movwne	r1, #1
   116a0:	cmp	r6, #0
   116a4:	movwne	r2, #1
   116a8:	cmn	r0, #1
   116ac:	beq	11914 <__assert_fail@plt+0x7c0>
   116b0:	ands	r1, r2, r1
   116b4:	bne	11914 <__assert_fail@plt+0x7c0>
   116b8:	movw	r2, #31384	; 0x7a98
   116bc:	movw	r3, #32304	; 0x7e30
   116c0:	mov	r7, #0
   116c4:	mov	r0, r5
   116c8:	mov	r1, r4
   116cc:	movt	r2, #1
   116d0:	movt	r3, #1
   116d4:	str	r7, [sp]
   116d8:	bl	11040 <getopt_long@plt>
   116dc:	add	r1, r0, #3
   116e0:	cmp	r1, #125	; 0x7d
   116e4:	bhi	11968 <__assert_fail@plt+0x814>
   116e8:	add	r2, pc, #0
   116ec:	ldr	pc, [r2, r1, lsl #2]
   116f0:	andeq	r2, r1, ip, lsr #14
   116f4:	andeq	r2, r1, r0, lsl #15
   116f8:	andeq	r1, r1, r4, lsl r9
   116fc:	andeq	r2, r1, r4, ror #13
   11700:	andeq	r1, r1, ip, lsr fp
   11704:	andeq	r2, r1, r4, ror #13
   11708:	andeq	r2, r1, r4, ror #13
   1170c:	andeq	r2, r1, r4, ror #13
   11710:	andeq	r2, r1, r4, ror #13
   11714:	andeq	r2, r1, r4, ror #13
   11718:	andeq	r2, r1, r4, ror #13
   1171c:	andeq	r2, r1, r4, ror #13
   11720:	andeq	r2, r1, r4, ror #13
   11724:	andeq	r2, r1, r4, ror #13
   11728:	andeq	r2, r1, r4, ror #13
   1172c:	andeq	r2, r1, r4, ror #13
   11730:	andeq	r2, r1, r4, ror #13
   11734:	andeq	r2, r1, r4, ror #13
   11738:	andeq	r2, r1, r4, ror #13
   1173c:	andeq	r2, r1, r4, ror #13
   11740:	andeq	r2, r1, r4, ror #13
   11744:	andeq	r2, r1, r4, ror #13
   11748:	andeq	r2, r1, r4, ror #13
   1174c:	andeq	r2, r1, r4, ror #13
   11750:	andeq	r2, r1, r4, ror #13
   11754:	andeq	r2, r1, r4, ror #13
   11758:	andeq	r2, r1, r4, ror #13
   1175c:	andeq	r2, r1, r4, ror #13
   11760:	andeq	r2, r1, r4, ror #13
   11764:	andeq	r2, r1, r4, ror #13
   11768:	andeq	r2, r1, r4, ror #13
   1176c:	andeq	r2, r1, r4, ror #13
   11770:	andeq	r2, r1, r4, ror #13
   11774:	andeq	r2, r1, r4, ror #13
   11778:	andeq	r2, r1, r4, ror #13
   1177c:	andeq	r2, r1, r4, ror #13
   11780:	andeq	r2, r1, r4, ror #13
   11784:	andeq	r2, r1, r4, ror #13
   11788:	andeq	r2, r1, r4, ror #13
   1178c:	andeq	r2, r1, r4, ror #13
   11790:	andeq	r2, r1, r4, ror #13
   11794:	andeq	r2, r1, r4, ror #13
   11798:	andeq	r2, r1, r4, ror #13
   1179c:	andeq	r2, r1, r4, ror #13
   117a0:	andeq	r2, r1, r4, ror #13
   117a4:	andeq	r2, r1, r4, ror #13
   117a8:	andeq	r2, r1, r4, ror #13
   117ac:	andeq	r2, r1, r4, ror #13
   117b0:	andeq	r2, r1, r4, ror #13
   117b4:	andeq	r2, r1, r4, ror #13
   117b8:	andeq	r2, r1, r4, ror #13
   117bc:	andeq	r1, r1, r8, ror #17
   117c0:	andeq	r1, r1, r8, ror #17
   117c4:	andeq	r1, r1, r8, ror #17
   117c8:	andeq	r1, r1, r8, ror #17
   117cc:	andeq	r1, r1, r8, ror #17
   117d0:	andeq	r1, r1, r8, ror #17
   117d4:	andeq	r1, r1, r8, ror #17
   117d8:	andeq	r1, r1, r8, ror #17
   117dc:	andeq	r1, r1, r8, ror #17
   117e0:	andeq	r1, r1, r8, ror #17
   117e4:	andeq	r2, r1, r4, ror #13
   117e8:	andeq	r2, r1, r4, ror #13
   117ec:	andeq	r2, r1, r4, ror #13
   117f0:	andeq	r2, r1, r4, ror #13
   117f4:	andeq	r2, r1, r4, ror #13
   117f8:	andeq	r2, r1, r4, ror #13
   117fc:	andeq	r2, r1, r4, ror #13
   11800:	andeq	r2, r1, r4, ror #13
   11804:	andeq	r2, r1, r4, ror #13
   11808:	andeq	r2, r1, r4, ror #13
   1180c:	ldrdeq	r1, [r1], -r8
   11810:	andeq	r2, r1, r4, ror #13
   11814:	andeq	r2, r1, r4, ror #13
   11818:	andeq	r2, r1, r4, ror #13
   1181c:	andeq	r2, r1, r4, ror #13
   11820:	andeq	r2, r1, r4, ror #13
   11824:	andeq	r2, r1, r4, ror #13
   11828:	andeq	r2, r1, r4, ror #13
   1182c:	andeq	r2, r1, r4, ror #13
   11830:	andeq	r2, r1, r4, ror #13
   11834:	andeq	r2, r1, r4, ror #13
   11838:	andeq	r2, r1, r4, ror #13
   1183c:	andeq	r2, r1, r4, ror #13
   11840:	andeq	r2, r1, r4, ror #13
   11844:	andeq	r2, r1, r4, ror #13
   11848:	andeq	r2, r1, r4, ror #13
   1184c:	andeq	r2, r1, r4, ror #13
   11850:	andeq	r2, r1, r4, ror #13
   11854:	andeq	r2, r1, r4, ror #13
   11858:	andeq	r2, r1, r4, ror #13
   1185c:	andeq	r2, r1, r4, ror #13
   11860:	andeq	r2, r1, r4, ror #13
   11864:	andeq	r2, r1, r4, ror #13
   11868:	andeq	r2, r1, r4, ror #13
   1186c:	andeq	r2, r1, r4, ror #13
   11870:	andeq	r2, r1, r4, ror #13
   11874:	andeq	r2, r1, r4, ror #13
   11878:	andeq	r2, r1, r4, ror #13
   1187c:	andeq	r2, r1, r4, ror #13
   11880:	andeq	r2, r1, r4, ror #13
   11884:	andeq	r2, r1, r4, ror #13
   11888:			; <UNDEFINED> instruction: 0x00011ab4
   1188c:	strdeq	r1, [r1], -r4
   11890:	andeq	r2, r1, r4, ror #13
   11894:	andeq	r1, r1, ip, asr #20
   11898:	andeq	r2, r1, r4, ror #13
   1189c:	andeq	r2, r1, r4, ror #13
   118a0:	andeq	r1, r1, ip, ror ip
   118a4:	andeq	r2, r1, r4, ror #13
   118a8:	andeq	r2, r1, r4, ror #13
   118ac:	andeq	r2, r1, r4, ror #13
   118b0:	andeq	r2, r1, r4, ror #13
   118b4:	andeq	r2, r1, r4, ror #13
   118b8:	andeq	r2, r1, r4, ror #13
   118bc:	andeq	r2, r1, r4, ror #13
   118c0:	andeq	r2, r1, r4, ror #13
   118c4:	andeq	r2, r1, r4, ror #13
   118c8:	ldrdeq	r1, [r1], -r8
   118cc:	andeq	r2, r1, r4, ror #13
   118d0:	ldrdeq	r1, [r1], -r0
   118d4:	andeq	r2, r1, r4, ror #13
   118d8:	andeq	r1, r1, r8, lsl ip
   118dc:	andeq	r2, r1, r4, ror #13
   118e0:	andeq	r2, r1, r4, ror #13
   118e4:	andeq	r1, r1, ip, lsl #13
   118e8:	movw	r3, #37232	; 0x9170
   118ec:	cmp	sl, #2
   118f0:	movt	r3, #2
   118f4:	beq	11674 <__assert_fail@plt+0x520>
   118f8:	ldr	r2, [r3, #12]
   118fc:	movw	r1, #39321	; 0x9999
   11900:	movt	r1, #6553	; 0x1999
   11904:	cmp	r2, r1
   11908:	bls	11950 <__assert_fail@plt+0x7fc>
   1190c:	mvn	r1, #0
   11910:	b	11680 <__assert_fail@plt+0x52c>
   11914:	movw	r7, #37200	; 0x9150
   11918:	movt	r7, #2
   1191c:	ldr	r1, [r7]
   11920:	cmp	r1, r5
   11924:	bge	11ce8 <__assert_fail@plt+0xb94>
   11928:	cmp	r8, #2
   1192c:	beq	126ec <__assert_fail@plt+0x1598>
   11930:	add	r2, r1, #1
   11934:	str	r2, [r7]
   11938:	add	r2, sp, #52	; 0x34
   1193c:	mov	r7, r9
   11940:	ldr	r1, [r4, r1, lsl #2]
   11944:	str	r1, [r2, r8, lsl #2]
   11948:	add	r8, r8, #1
   1194c:	b	1168c <__assert_fail@plt+0x538>
   11950:	add	r1, r2, r2, lsl #2
   11954:	add	r1, r0, r1, lsl #1
   11958:	sub	r1, r1, #48	; 0x30
   1195c:	cmp	r1, r2
   11960:	mvncc	r1, #0
   11964:	b	11680 <__assert_fail@plt+0x52c>
   11968:	cmp	r0, #256	; 0x100
   1196c:	bne	126e4 <__assert_fail@plt+0x1590>
   11970:	movw	r0, #37224	; 0x9168
   11974:	movt	r0, #2
   11978:	ldr	r1, [r0]
   1197c:	cmp	r1, #0
   11980:	beq	11cb8 <__assert_fail@plt+0xb64>
   11984:	movw	r0, #37116	; 0x90fc
   11988:	movw	r7, #32540	; 0x7f1c
   1198c:	mov	r2, #4
   11990:	movt	r0, #2
   11994:	str	r2, [sp]
   11998:	movw	r2, #32556	; 0x7f2c
   1199c:	movt	r7, #1
   119a0:	movt	r2, #1
   119a4:	ldr	r0, [r0]
   119a8:	mov	r3, r7
   119ac:	str	r0, [sp, #4]
   119b0:	mov	r0, #1
   119b4:	str	r0, [sp, #8]
   119b8:	movw	r0, #31440	; 0x7ad0
   119bc:	movt	r0, #1
   119c0:	bl	12c68 <__assert_fail@plt+0x1b14>
   119c4:	ldr	r0, [r7, r0, lsl #2]
   119c8:	movw	r1, #37232	; 0x9170
   119cc:	movt	r1, #2
   119d0:	str	r0, [r1, #24]
   119d4:	b	11cc8 <__assert_fail@plt+0xb74>
   119d8:	movw	r7, #37232	; 0x9170
   119dc:	mov	r0, #256	; 0x100
   119e0:	movt	r7, #2
   119e4:	strh	r0, [r7, #1]
   119e8:	movw	r0, #37224	; 0x9168
   119ec:	movt	r0, #2
   119f0:	ldr	r1, [r0]
   119f4:	cmp	r1, #0
   119f8:	beq	11c98 <__assert_fail@plt+0xb44>
   119fc:	movw	r0, #37116	; 0x90fc
   11a00:	movw	r7, #32512	; 0x7f00
   11a04:	mov	r2, #4
   11a08:	movt	r0, #2
   11a0c:	str	r2, [sp]
   11a10:	movw	r2, #32524	; 0x7f0c
   11a14:	movt	r7, #1
   11a18:	movt	r2, #1
   11a1c:	ldr	r0, [r0]
   11a20:	mov	r3, r7
   11a24:	str	r0, [sp, #4]
   11a28:	mov	r0, #1
   11a2c:	str	r0, [sp, #8]
   11a30:	movw	r0, #31425	; 0x7ac1
   11a34:	movt	r0, #1
   11a38:	bl	12c68 <__assert_fail@plt+0x1b14>
   11a3c:	ldr	r0, [r7, r0, lsl #2]
   11a40:	movw	r2, #37232	; 0x9170
   11a44:	movt	r2, #2
   11a48:	b	11ca0 <__assert_fail@plt+0xb4c>
   11a4c:	movw	r0, #37224	; 0x9168
   11a50:	mov	r1, #0
   11a54:	mov	r2, #10
   11a58:	sub	r3, fp, #40	; 0x28
   11a5c:	movt	r0, #2
   11a60:	ldr	sl, [r0]
   11a64:	movw	r0, #32144	; 0x7d90
   11a68:	movt	r0, #1
   11a6c:	str	r0, [sp]
   11a70:	mov	r0, sl
   11a74:	bl	16288 <__assert_fail@plt+0x5134>
   11a78:	cmp	r0, #2
   11a7c:	bcs	12788 <__assert_fail@plt+0x1634>
   11a80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a84:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11a88:	mvn	r3, #0
   11a8c:	mov	sl, #2
   11a90:	mov	r7, r9
   11a94:	subs	r2, r0, r3
   11a98:	sbcs	r1, r1, #0
   11a9c:	movw	r1, #37232	; 0x9170
   11aa0:	movt	r1, #2
   11aa4:	movcs	r0, r3
   11aa8:	str	r0, [r1, #12]
   11aac:	mov	r0, #102	; 0x66
   11ab0:	b	1168c <__assert_fail@plt+0x538>
   11ab4:	movw	r0, #37232	; 0x9170
   11ab8:	mov	r1, #0
   11abc:	mov	r7, r9
   11ac0:	movt	r0, #2
   11ac4:	strb	r1, [r0, #4]
   11ac8:	mov	r0, #1
   11acc:	str	r0, [sp, #48]	; 0x30
   11ad0:	mov	r0, #99	; 0x63
   11ad4:	b	1168c <__assert_fail@plt+0x538>
   11ad8:	movw	r0, #37224	; 0x9168
   11adc:	mov	r1, #0
   11ae0:	mov	r2, #10
   11ae4:	sub	r3, fp, #40	; 0x28
   11ae8:	movt	r0, #2
   11aec:	ldr	r7, [r0]
   11af0:	movw	r0, #32144	; 0x7d90
   11af4:	movt	r0, #1
   11af8:	str	r0, [sp]
   11afc:	mov	r0, r7
   11b00:	bl	16288 <__assert_fail@plt+0x5134>
   11b04:	cmp	r0, #2
   11b08:	bcs	127b8 <__assert_fail@plt+0x1664>
   11b0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b10:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b14:	mvn	r3, #0
   11b18:	mov	r7, r9
   11b1c:	subs	r2, r0, r3
   11b20:	sbcs	r1, r1, #0
   11b24:	movw	r1, #37232	; 0x9170
   11b28:	movt	r1, #2
   11b2c:	movcs	r0, r3
   11b30:	str	r0, [r1, #8]
   11b34:	mov	r0, #115	; 0x73
   11b38:	b	1168c <__assert_fail@plt+0x538>
   11b3c:	movw	r0, #37224	; 0x9168
   11b40:	movt	r0, #2
   11b44:	ldr	r0, [r0]
   11b48:	ldrb	r0, [r0]
   11b4c:	cmp	r0, #43	; 0x2b
   11b50:	bne	11ba4 <__assert_fail@plt+0xa50>
   11b54:	bl	13610 <__assert_fail@plt+0x24bc>
   11b58:	movw	r1, #62032	; 0xf250
   11b5c:	movt	r1, #65532	; 0xfffc
   11b60:	add	r0, r0, r1
   11b64:	cmp	r0, #696	; 0x2b8
   11b68:	bls	11ba4 <__assert_fail@plt+0xa50>
   11b6c:	movw	r0, #37224	; 0x9168
   11b70:	movw	r1, #32144	; 0x7d90
   11b74:	mov	r2, #10
   11b78:	sub	r3, fp, #40	; 0x28
   11b7c:	movt	r0, #2
   11b80:	movt	r1, #1
   11b84:	ldr	r0, [r0]
   11b88:	str	r1, [sp]
   11b8c:	mov	r1, #0
   11b90:	bl	16288 <__assert_fail@plt+0x5134>
   11b94:	cmp	r0, #0
   11b98:	ldreq	r0, [fp, #-36]	; 0xffffffdc
   11b9c:	cmpeq	r0, #0
   11ba0:	beq	11cd4 <__assert_fail@plt+0xb80>
   11ba4:	cmp	r8, #2
   11ba8:	beq	127c4 <__assert_fail@plt+0x1670>
   11bac:	movw	r0, #37224	; 0x9168
   11bb0:	add	r1, sp, #52	; 0x34
   11bb4:	movt	r0, #2
   11bb8:	ldr	r0, [r0]
   11bbc:	str	r0, [r1, r8, lsl #2]
   11bc0:	add	r8, r8, #1
   11bc4:	mov	r0, #1
   11bc8:	mov	r7, r9
   11bcc:	b	1168c <__assert_fail@plt+0x538>
   11bd0:	movw	r0, #37232	; 0x9170
   11bd4:	mov	r1, #0
   11bd8:	mov	r7, r9
   11bdc:	movt	r0, #2
   11be0:	strb	r1, [r0]
   11be4:	mov	r0, #1
   11be8:	str	r0, [sp, #48]	; 0x30
   11bec:	mov	r0, #117	; 0x75
   11bf0:	b	1168c <__assert_fail@plt+0x538>
   11bf4:	movw	r0, #37232	; 0x9170
   11bf8:	mov	r1, #0
   11bfc:	mov	r7, r9
   11c00:	movt	r0, #2
   11c04:	strb	r1, [r0, #1]
   11c08:	mov	r0, #1
   11c0c:	str	r0, [sp, #48]	; 0x30
   11c10:	mov	r0, #100	; 0x64
   11c14:	b	1168c <__assert_fail@plt+0x538>
   11c18:	movw	r0, #37224	; 0x9168
   11c1c:	mov	r1, #0
   11c20:	mov	r2, #10
   11c24:	sub	r3, fp, #40	; 0x28
   11c28:	movt	r0, #2
   11c2c:	ldr	r7, [r0]
   11c30:	movw	r0, #32144	; 0x7d90
   11c34:	movt	r0, #1
   11c38:	str	r0, [sp]
   11c3c:	mov	r0, r7
   11c40:	bl	16288 <__assert_fail@plt+0x5134>
   11c44:	cmp	r0, #2
   11c48:	bcs	12808 <__assert_fail@plt+0x16b4>
   11c4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c50:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11c54:	mvn	r3, #0
   11c58:	mov	r7, r9
   11c5c:	subs	r2, r0, r3
   11c60:	sbcs	r1, r1, #0
   11c64:	movw	r1, #37232	; 0x9170
   11c68:	movt	r1, #2
   11c6c:	movcs	r0, r3
   11c70:	str	r0, [r1, #16]
   11c74:	mov	r0, #119	; 0x77
   11c78:	b	1168c <__assert_fail@plt+0x538>
   11c7c:	movw	r0, #37232	; 0x9170
   11c80:	mov	r1, #1
   11c84:	mov	r7, r9
   11c88:	movt	r0, #2
   11c8c:	strb	r1, [r0, #5]
   11c90:	mov	r0, #105	; 0x69
   11c94:	b	1168c <__assert_fail@plt+0x538>
   11c98:	mov	r2, r7
   11c9c:	mov	r0, #0
   11ca0:	str	r0, [r2, #20]
   11ca4:	mov	r0, #1
   11ca8:	mov	r7, r9
   11cac:	str	r0, [sp, #48]	; 0x30
   11cb0:	mov	r0, #68	; 0x44
   11cb4:	b	1168c <__assert_fail@plt+0x538>
   11cb8:	movw	r0, #37232	; 0x9170
   11cbc:	mov	r1, #3
   11cc0:	movt	r0, #2
   11cc4:	str	r1, [r0, #24]
   11cc8:	mov	r0, #256	; 0x100
   11ccc:	mov	r7, r9
   11cd0:	b	1168c <__assert_fail@plt+0x538>
   11cd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11cd8:	movw	r1, #37232	; 0x9170
   11cdc:	movt	r1, #2
   11ce0:	str	r0, [r1, #8]
   11ce4:	b	11bc4 <__assert_fail@plt+0xa70>
   11ce8:	movw	r7, #37232	; 0x9170
   11cec:	movt	r7, #2
   11cf0:	ldr	r0, [r7, #24]
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d0c <__assert_fail@plt+0xbb8>
   11cfc:	ldr	r1, [sp, #48]	; 0x30
   11d00:	eor	r1, r1, #1
   11d04:	tst	r1, #1
   11d08:	beq	12838 <__assert_fail@plt+0x16e4>
   11d0c:	ldrb	r1, [r7, #4]
   11d10:	cmp	r0, #0
   11d14:	beq	11d20 <__assert_fail@plt+0xbcc>
   11d18:	cmp	r1, #0
   11d1c:	beq	12844 <__assert_fail@plt+0x16f0>
   11d20:	cmp	r1, #0
   11d24:	bne	11d34 <__assert_fail@plt+0xbe0>
   11d28:	ldrb	r0, [r7, #2]
   11d2c:	cmp	r0, #1
   11d30:	beq	128b0 <__assert_fail@plt+0x175c>
   11d34:	ldr	r5, [sp, #52]	; 0x34
   11d38:	movw	r1, #32841	; 0x8049
   11d3c:	ldr	r4, [sp, #56]	; 0x38
   11d40:	movt	r1, #1
   11d44:	mov	r0, r5
   11d48:	bl	10ee4 <strcmp@plt>
   11d4c:	movw	r8, #37216	; 0x9160
   11d50:	cmp	r0, #0
   11d54:	movt	r8, #2
   11d58:	beq	11d78 <__assert_fail@plt+0xc24>
   11d5c:	ldr	r2, [r8]
   11d60:	movw	r1, #32747	; 0x7feb
   11d64:	mov	r0, r5
   11d68:	movt	r1, #1
   11d6c:	bl	13088 <__assert_fail@plt+0x1f34>
   11d70:	cmp	r0, #0
   11d74:	beq	12850 <__assert_fail@plt+0x16fc>
   11d78:	movw	r1, #32841	; 0x8049
   11d7c:	mov	r0, r4
   11d80:	movt	r1, #1
   11d84:	bl	10ee4 <strcmp@plt>
   11d88:	cmp	r0, #0
   11d8c:	beq	11db4 <__assert_fail@plt+0xc60>
   11d90:	movw	r0, #37220	; 0x9164
   11d94:	movw	r1, #32275	; 0x7e13
   11d98:	movt	r0, #2
   11d9c:	movt	r1, #1
   11da0:	ldr	r2, [r0]
   11da4:	mov	r0, r4
   11da8:	bl	13088 <__assert_fail@plt+0x1f34>
   11dac:	cmp	r0, #0
   11db0:	beq	12880 <__assert_fail@plt+0x172c>
   11db4:	ldr	r0, [r8]
   11db8:	mov	r1, #2
   11dbc:	str	r5, [sp, #16]
   11dc0:	bl	12f2c <__assert_fail@plt+0x1dd8>
   11dc4:	sub	r4, fp, #40	; 0x28
   11dc8:	mov	r0, r4
   11dcc:	bl	1339c <__assert_fail@plt+0x2248>
   11dd0:	sub	r5, fp, #52	; 0x34
   11dd4:	mov	r0, r5
   11dd8:	bl	1339c <__assert_fail@plt+0x2248>
   11ddc:	ldrb	r0, [r7, #1]
   11de0:	cmp	r0, #1
   11de4:	bne	11e38 <__assert_fail@plt+0xce4>
   11de8:	ldrb	r0, [r7]
   11dec:	cmp	r0, #1
   11df0:	bne	11e38 <__assert_fail@plt+0xce4>
   11df4:	ldrb	r0, [r7, #4]
   11df8:	cmp	r0, #0
   11dfc:	beq	11e38 <__assert_fail@plt+0xce4>
   11e00:	ldr	r1, [r8]
   11e04:	mov	r2, #0
   11e08:	str	r5, [sp, #44]	; 0x2c
   11e0c:	str	r2, [sp, #32]
   11e10:	ldrb	r0, [r1]
   11e14:	tst	r0, #16
   11e18:	bne	1218c <__assert_fail@plt+0x1038>
   11e1c:	uxtb	r0, r9
   11e20:	mov	r6, #0
   11e24:	sub	sl, fp, #40	; 0x28
   11e28:	str	r0, [sp, #28]
   11e2c:	mov	r0, #0
   11e30:	str	r0, [sp, #32]
   11e34:	b	11fac <__assert_fail@plt+0xe58>
   11e38:	ldr	r1, [r8]
   11e3c:	str	r4, [sp, #48]	; 0x30
   11e40:	uxtb	r2, r9
   11e44:	sub	r4, fp, #52	; 0x34
   11e48:	mov	r0, r4
   11e4c:	str	r2, [sp, #24]
   11e50:	bl	134b0 <__assert_fail@plt+0x235c>
   11e54:	cmp	r0, #0
   11e58:	beq	12610 <__assert_fail@plt+0x14bc>
   11e5c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11e60:	ldr	r7, [fp, #-44]	; 0xffffffd4
   11e64:	mov	r6, #0
   11e68:	subs	r5, r0, #1
   11e6c:	str	r0, [sp, #44]	; 0x2c
   11e70:	beq	1220c <__assert_fail@plt+0x10b8>
   11e74:	movw	r0, #37232	; 0x9170
   11e78:	movt	r0, #2
   11e7c:	ldr	sl, [r0, #12]
   11e80:	cmp	sl, #0
   11e84:	beq	1220c <__assert_fail@plt+0x10b8>
   11e88:	mov	r6, #0
   11e8c:	mov	r8, #0
   11e90:	cmp	r6, r5
   11e94:	bcs	11ed4 <__assert_fail@plt+0xd80>
   11e98:	bl	1104c <__ctype_b_loc@plt>
   11e9c:	ldr	r0, [r0]
   11ea0:	ldrb	r1, [r7, r6]
   11ea4:	cmp	r1, #10
   11ea8:	bne	11ec4 <__assert_fail@plt+0xd70>
   11eac:	add	r6, r6, #1
   11eb0:	cmp	r5, r6
   11eb4:	beq	12208 <__assert_fail@plt+0x10b4>
   11eb8:	ldrb	r1, [r7, r6]
   11ebc:	cmp	r1, #10
   11ec0:	beq	11eac <__assert_fail@plt+0xd58>
   11ec4:	add	r1, r0, r1, lsl #1
   11ec8:	ldrh	r1, [r1]
   11ecc:	ands	r1, r1, #1
   11ed0:	bne	11eac <__assert_fail@plt+0xd58>
   11ed4:	cmp	r6, r5
   11ed8:	bcs	11f10 <__assert_fail@plt+0xdbc>
   11edc:	bl	1104c <__ctype_b_loc@plt>
   11ee0:	ldr	r0, [r0]
   11ee4:	ldrb	r1, [r7, r6]
   11ee8:	cmp	r1, #10
   11eec:	beq	11f10 <__assert_fail@plt+0xdbc>
   11ef0:	add	r1, r0, r1, lsl #1
   11ef4:	ldrh	r1, [r1]
   11ef8:	ands	r1, r1, #1
   11efc:	bne	11f10 <__assert_fail@plt+0xdbc>
   11f00:	add	r6, r6, #1
   11f04:	cmp	r5, r6
   11f08:	bne	11ee4 <__assert_fail@plt+0xd90>
   11f0c:	b	12208 <__assert_fail@plt+0x10b4>
   11f10:	add	r8, r8, #1
   11f14:	cmp	r8, sl
   11f18:	bcs	1220c <__assert_fail@plt+0x10b8>
   11f1c:	cmp	r5, r6
   11f20:	bhi	11e90 <__assert_fail@plt+0xd3c>
   11f24:	b	1220c <__assert_fail@plt+0x10b8>
   11f28:	cmp	r0, #1
   11f2c:	cmpne	r0, #4
   11f30:	bne	12158 <__assert_fail@plt+0x1004>
   11f34:	movw	r0, #37220	; 0x9164
   11f38:	movt	r0, #2
   11f3c:	ldr	r0, [r0]
   11f40:	ldr	r1, [r0, #20]
   11f44:	ldr	r2, [r0, #24]
   11f48:	cmp	r1, r2
   11f4c:	bcs	1217c <__assert_fail@plt+0x1028>
   11f50:	add	r2, r1, #1
   11f54:	str	r2, [r0, #20]
   11f58:	strb	r9, [r1]
   11f5c:	movw	r0, #37220	; 0x9164
   11f60:	ldr	r2, [sl, #4]
   11f64:	mov	r1, #1
   11f68:	movt	r0, #2
   11f6c:	str	r1, [sp, #32]
   11f70:	mov	r1, #1
   11f74:	ldr	r3, [r0]
   11f78:	ldr	r0, [sl, #8]
   11f7c:	bl	10f50 <fwrite_unlocked@plt>
   11f80:	mov	r0, sl
   11f84:	ldr	sl, [sp, #44]	; 0x2c
   11f88:	mov	r6, r4
   11f8c:	str	r8, [sp, #36]	; 0x24
   11f90:	str	r0, [sp, #44]	; 0x2c
   11f94:	movw	r8, #37216	; 0x9160
   11f98:	movt	r8, #2
   11f9c:	ldr	r1, [r8]
   11fa0:	ldrb	r0, [r1]
   11fa4:	tst	r0, #16
   11fa8:	bne	1218c <__assert_fail@plt+0x1038>
   11fac:	ldr	r2, [sp, #28]
   11fb0:	mov	r0, sl
   11fb4:	bl	134b0 <__assert_fail@plt+0x235c>
   11fb8:	cmp	r0, #0
   11fbc:	beq	1218c <__assert_fail@plt+0x1038>
   11fc0:	ldr	r5, [sl, #4]
   11fc4:	ldr	r4, [sl, #8]
   11fc8:	str	r6, [sp, #48]	; 0x30
   11fcc:	mov	r6, #0
   11fd0:	subs	r7, r5, #1
   11fd4:	beq	12098 <__assert_fail@plt+0xf44>
   11fd8:	movw	r0, #37232	; 0x9170
   11fdc:	movt	r0, #2
   11fe0:	ldr	r0, [r0, #12]
   11fe4:	cmp	r0, #0
   11fe8:	str	r0, [sp, #40]	; 0x28
   11fec:	beq	12098 <__assert_fail@plt+0xf44>
   11ff0:	mov	r6, #0
   11ff4:	mov	r8, #0
   11ff8:	cmp	r6, r7
   11ffc:	bcs	1203c <__assert_fail@plt+0xee8>
   12000:	bl	1104c <__ctype_b_loc@plt>
   12004:	ldr	r0, [r0]
   12008:	ldrb	r1, [r4, r6]
   1200c:	cmp	r1, #10
   12010:	bne	1202c <__assert_fail@plt+0xed8>
   12014:	add	r6, r6, #1
   12018:	cmp	r7, r6
   1201c:	beq	12094 <__assert_fail@plt+0xf40>
   12020:	ldrb	r1, [r4, r6]
   12024:	cmp	r1, #10
   12028:	beq	12014 <__assert_fail@plt+0xec0>
   1202c:	add	r1, r0, r1, lsl #1
   12030:	ldrh	r1, [r1]
   12034:	ands	r1, r1, #1
   12038:	bne	12014 <__assert_fail@plt+0xec0>
   1203c:	cmp	r6, r7
   12040:	bcs	12078 <__assert_fail@plt+0xf24>
   12044:	bl	1104c <__ctype_b_loc@plt>
   12048:	ldr	r0, [r0]
   1204c:	ldrb	r1, [r4, r6]
   12050:	cmp	r1, #10
   12054:	beq	12078 <__assert_fail@plt+0xf24>
   12058:	add	r1, r0, r1, lsl #1
   1205c:	ldrh	r1, [r1]
   12060:	ands	r1, r1, #1
   12064:	bne	12078 <__assert_fail@plt+0xf24>
   12068:	add	r6, r6, #1
   1206c:	cmp	r7, r6
   12070:	bne	1204c <__assert_fail@plt+0xef8>
   12074:	b	12094 <__assert_fail@plt+0xf40>
   12078:	ldr	r0, [sp, #40]	; 0x28
   1207c:	add	r8, r8, #1
   12080:	cmp	r8, r0
   12084:	bcs	12098 <__assert_fail@plt+0xf44>
   12088:	cmp	r7, r6
   1208c:	bhi	11ff8 <__assert_fail@plt+0xea4>
   12090:	b	12098 <__assert_fail@plt+0xf44>
   12094:	mov	r6, r7
   12098:	sub	r1, r7, r6
   1209c:	movw	r7, #37232	; 0x9170
   120a0:	add	r0, r5, r4
   120a4:	mov	r5, #1
   120a8:	movt	r7, #2
   120ac:	ldr	r2, [r7, #8]
   120b0:	cmp	r2, r1
   120b4:	movcc	r1, r2
   120b8:	add	r1, r1, r6
   120bc:	ldr	r6, [sp, #48]	; 0x30
   120c0:	add	r4, r4, r1
   120c4:	mvn	r1, r4
   120c8:	add	r8, r0, r1
   120cc:	cmp	r6, #0
   120d0:	beq	12130 <__assert_fail@plt+0xfdc>
   120d4:	ldr	r2, [r7, #16]
   120d8:	ldr	r0, [sp, #36]	; 0x24
   120dc:	ldrb	r1, [r7, #5]
   120e0:	cmp	r2, r0
   120e4:	movcc	r0, r2
   120e8:	cmp	r2, r8
   120ec:	movcs	r2, r8
   120f0:	cmp	r1, #1
   120f4:	bne	12110 <__assert_fail@plt+0xfbc>
   120f8:	cmp	r2, r0
   120fc:	bne	12130 <__assert_fail@plt+0xfdc>
   12100:	mov	r0, r4
   12104:	mov	r1, r6
   12108:	bl	135bc <__assert_fail@plt+0x2468>
   1210c:	b	12124 <__assert_fail@plt+0xfd0>
   12110:	cmp	r2, r0
   12114:	bne	12130 <__assert_fail@plt+0xfdc>
   12118:	mov	r0, r4
   1211c:	mov	r1, r6
   12120:	bl	11064 <bcmp@plt>
   12124:	cmp	r0, #0
   12128:	mov	r5, r0
   1212c:	movwne	r5, #1
   12130:	ldr	r0, [r7, #24]
   12134:	cmp	r5, #0
   12138:	cmpne	r0, #0
   1213c:	bne	11f28 <__assert_fail@plt+0xdd4>
   12140:	clz	r0, r0
   12144:	mvn	r1, r5
   12148:	lsr	r0, r0, #5
   1214c:	tst	r1, r0
   12150:	beq	11f5c <__assert_fail@plt+0xe08>
   12154:	b	11f94 <__assert_fail@plt+0xe40>
   12158:	ldr	r1, [sp, #32]
   1215c:	orr	r0, r0, #1
   12160:	subs	r0, r0, #3
   12164:	movwne	r0, #1
   12168:	mvn	r1, r1
   1216c:	orr	r0, r1, r0
   12170:	tst	r0, #1
   12174:	beq	11f34 <__assert_fail@plt+0xde0>
   12178:	b	11f5c <__assert_fail@plt+0xe08>
   1217c:	ldr	r1, [sp, #28]
   12180:	bl	110f4 <__overflow@plt>
   12184:	ldr	r0, [r7, #24]
   12188:	b	12140 <__assert_fail@plt+0xfec>
   1218c:	ldr	r0, [r7, #24]
   12190:	cmp	r0, #4
   12194:	cmpne	r0, #2
   12198:	bne	12610 <__assert_fail@plt+0x14bc>
   1219c:	ldr	r0, [sp, #32]
   121a0:	tst	r0, #1
   121a4:	beq	12610 <__assert_fail@plt+0x14bc>
   121a8:	movw	r0, #37220	; 0x9164
   121ac:	movt	r0, #2
   121b0:	ldr	r0, [r0]
   121b4:	ldr	r1, [r0, #20]
   121b8:	ldr	r2, [r0, #24]
   121bc:	cmp	r1, r2
   121c0:	bcs	126c8 <__assert_fail@plt+0x1574>
   121c4:	add	r2, r1, #1
   121c8:	str	r2, [r0, #20]
   121cc:	strb	r9, [r1]
   121d0:	ldr	r0, [r8]
   121d4:	ldrb	r1, [r0]
   121d8:	tst	r1, #32
   121dc:	bne	12620 <__assert_fail@plt+0x14cc>
   121e0:	bl	12f68 <__assert_fail@plt+0x1e14>
   121e4:	cmp	r0, #0
   121e8:	bne	12620 <__assert_fail@plt+0x14cc>
   121ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   121f0:	bl	13060 <__assert_fail@plt+0x1f0c>
   121f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   121f8:	bl	13060 <__assert_fail@plt+0x1f0c>
   121fc:	mov	r0, #0
   12200:	sub	sp, fp, #28
   12204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12208:	mov	r6, r5
   1220c:	sub	r0, r5, r6
   12210:	movw	r5, #37232	; 0x9170
   12214:	movw	r8, #37216	; 0x9160
   12218:	movt	r5, #2
   1221c:	movt	r8, #2
   12220:	ldr	r1, [r5, #8]
   12224:	cmp	r1, r0
   12228:	movcc	r0, r1
   1222c:	ldr	r1, [r8]
   12230:	ldrb	r2, [r1]
   12234:	tst	r2, #16
   12238:	bne	12658 <__assert_fail@plt+0x1504>
   1223c:	add	r0, r0, r6
   12240:	mov	sl, #0
   12244:	add	r2, r7, r0
   12248:	ldr	r0, [sp, #44]	; 0x2c
   1224c:	str	r2, [sp, #28]
   12250:	mvn	r2, r2
   12254:	add	r0, r0, r7
   12258:	add	r0, r0, r2
   1225c:	str	r0, [sp, #36]	; 0x24
   12260:	mov	r0, #0
   12264:	str	r0, [sp, #40]	; 0x28
   12268:	mov	r0, #1
   1226c:	str	r0, [sp, #20]
   12270:	sub	r0, fp, #52	; 0x34
   12274:	str	r0, [sp, #44]	; 0x2c
   12278:	b	122e0 <__assert_fail@plt+0x118c>
   1227c:	movw	r0, #37220	; 0x9164
   12280:	mov	r1, #1
   12284:	movt	r0, #2
   12288:	ldr	r3, [r0]
   1228c:	ldr	r0, [sp, #44]	; 0x2c
   12290:	ldr	r2, [r0, #4]
   12294:	ldr	r0, [r0, #8]
   12298:	bl	10f50 <fwrite_unlocked@plt>
   1229c:	ldr	r0, [sp, #44]	; 0x2c
   122a0:	cmp	r4, #0
   122a4:	ldr	r4, [sp, #48]	; 0x30
   122a8:	str	r6, [sp, #36]	; 0x24
   122ac:	movwne	r5, #0
   122b0:	movwne	sl, #0
   122b4:	str	r5, [sp, #40]	; 0x28
   122b8:	str	r0, [sp, #48]	; 0x30
   122bc:	ldr	r0, [sp, #32]
   122c0:	str	r4, [sp, #44]	; 0x2c
   122c4:	str	r0, [sp, #28]
   122c8:	ldr	r1, [r8]
   122cc:	movw	r5, #37232	; 0x9170
   122d0:	movt	r5, #2
   122d4:	ldrb	r0, [r1]
   122d8:	tst	r0, #16
   122dc:	bne	125f8 <__assert_fail@plt+0x14a4>
   122e0:	ldr	r4, [sp, #48]	; 0x30
   122e4:	ldr	r2, [sp, #24]
   122e8:	mov	r0, r4
   122ec:	bl	134b0 <__assert_fail@plt+0x235c>
   122f0:	cmp	r0, #0
   122f4:	beq	125e4 <__assert_fail@plt+0x1490>
   122f8:	ldr	r6, [r4, #4]
   122fc:	ldr	r4, [r4, #8]
   12300:	mov	r7, #0
   12304:	subs	r5, r6, #1
   12308:	beq	123cc <__assert_fail@plt+0x1278>
   1230c:	movw	r0, #37232	; 0x9170
   12310:	movt	r0, #2
   12314:	ldr	r0, [r0, #12]
   12318:	cmp	r0, #0
   1231c:	str	r0, [sp, #32]
   12320:	beq	123cc <__assert_fail@plt+0x1278>
   12324:	mov	r7, #0
   12328:	mov	r8, #0
   1232c:	cmp	r7, r5
   12330:	bcs	12370 <__assert_fail@plt+0x121c>
   12334:	bl	1104c <__ctype_b_loc@plt>
   12338:	ldr	r0, [r0]
   1233c:	ldrb	r1, [r4, r7]
   12340:	cmp	r1, #10
   12344:	bne	12360 <__assert_fail@plt+0x120c>
   12348:	add	r7, r7, #1
   1234c:	cmp	r5, r7
   12350:	beq	123c8 <__assert_fail@plt+0x1274>
   12354:	ldrb	r1, [r4, r7]
   12358:	cmp	r1, #10
   1235c:	beq	12348 <__assert_fail@plt+0x11f4>
   12360:	add	r1, r0, r1, lsl #1
   12364:	ldrh	r1, [r1]
   12368:	ands	r1, r1, #1
   1236c:	bne	12348 <__assert_fail@plt+0x11f4>
   12370:	cmp	r7, r5
   12374:	bcs	123ac <__assert_fail@plt+0x1258>
   12378:	bl	1104c <__ctype_b_loc@plt>
   1237c:	ldr	r0, [r0]
   12380:	ldrb	r1, [r4, r7]
   12384:	cmp	r1, #10
   12388:	beq	123ac <__assert_fail@plt+0x1258>
   1238c:	add	r1, r0, r1, lsl #1
   12390:	ldrh	r1, [r1]
   12394:	ands	r1, r1, #1
   12398:	bne	123ac <__assert_fail@plt+0x1258>
   1239c:	add	r7, r7, #1
   123a0:	cmp	r5, r7
   123a4:	bne	12380 <__assert_fail@plt+0x122c>
   123a8:	b	123c8 <__assert_fail@plt+0x1274>
   123ac:	ldr	r0, [sp, #32]
   123b0:	add	r8, r8, #1
   123b4:	cmp	r8, r0
   123b8:	bcs	123cc <__assert_fail@plt+0x1278>
   123bc:	cmp	r5, r7
   123c0:	bhi	1232c <__assert_fail@plt+0x11d8>
   123c4:	b	123cc <__assert_fail@plt+0x1278>
   123c8:	mov	r7, r5
   123cc:	movw	r2, #37232	; 0x9170
   123d0:	sub	r1, r5, r7
   123d4:	add	r0, r6, r4
   123d8:	movt	r2, #2
   123dc:	mov	r3, r2
   123e0:	ldr	r2, [r2, #8]
   123e4:	cmp	r2, r1
   123e8:	movcc	r1, r2
   123ec:	add	r1, r1, r7
   123f0:	add	r7, r4, r1
   123f4:	mov	r4, #1
   123f8:	mvn	r1, r7
   123fc:	add	r6, r0, r1
   12400:	ldr	r0, [r3, #16]
   12404:	ldr	r1, [sp, #36]	; 0x24
   12408:	mov	r2, r6
   1240c:	cmp	r0, r6
   12410:	movcc	r2, r0
   12414:	cmp	r0, r1
   12418:	movcs	r0, r1
   1241c:	ldrb	r1, [r3, #5]
   12420:	cmp	r1, #1
   12424:	bne	12444 <__assert_fail@plt+0x12f0>
   12428:	ldr	r5, [sp, #40]	; 0x28
   1242c:	cmp	r2, r0
   12430:	bne	12468 <__assert_fail@plt+0x1314>
   12434:	ldr	r1, [sp, #28]
   12438:	mov	r0, r7
   1243c:	bl	135bc <__assert_fail@plt+0x2468>
   12440:	b	1245c <__assert_fail@plt+0x1308>
   12444:	ldr	r5, [sp, #40]	; 0x28
   12448:	cmp	r2, r0
   1244c:	bne	12468 <__assert_fail@plt+0x1314>
   12450:	ldr	r1, [sp, #28]
   12454:	mov	r0, r7
   12458:	bl	11064 <bcmp@plt>
   1245c:	cmp	r0, #0
   12460:	mov	r4, r0
   12464:	movwne	r4, #1
   12468:	str	r7, [sp, #32]
   1246c:	mvn	r7, #1
   12470:	mvn	r3, #0
   12474:	eor	r2, r4, #1
   12478:	movw	r8, #37216	; 0x9160
   1247c:	adds	r0, r7, #1
   12480:	movt	r8, #2
   12484:	adc	r1, r3, #0
   12488:	adds	r5, r5, r2
   1248c:	adc	sl, sl, #0
   12490:	eor	r0, r5, r0
   12494:	eor	r1, sl, r1
   12498:	orrs	r0, r0, r1
   1249c:	movw	r0, #37232	; 0x9170
   124a0:	movt	r0, #2
   124a4:	moveq	sl, r3
   124a8:	moveq	r5, r7
   124ac:	ldr	r0, [r0, #20]
   124b0:	cmp	r0, #0
   124b4:	beq	124f8 <__assert_fail@plt+0x13a4>
   124b8:	cmp	r4, #0
   124bc:	beq	12504 <__assert_fail@plt+0x13b0>
   124c0:	ldr	r1, [sp, #20]
   124c4:	orr	r0, r5, sl
   124c8:	clz	r0, r0
   124cc:	lsr	r0, r0, #5
   124d0:	and	r1, r1, r0
   124d4:	str	r1, [sp, #20]
   124d8:	orrs	r0, r5, sl
   124dc:	bne	12570 <__assert_fail@plt+0x141c>
   124e0:	movw	r0, #37232	; 0x9170
   124e4:	movt	r0, #2
   124e8:	ldrb	r0, [r0, #1]
   124ec:	cmp	r0, #0
   124f0:	beq	1229c <__assert_fail@plt+0x1148>
   124f4:	b	125a8 <__assert_fail@plt+0x1454>
   124f8:	cmp	r4, #0
   124fc:	beq	12554 <__assert_fail@plt+0x1400>
   12500:	b	12568 <__assert_fail@plt+0x1414>
   12504:	eor	r1, r5, #1
   12508:	orrs	r1, r1, sl
   1250c:	bne	12554 <__assert_fail@plt+0x1400>
   12510:	cmp	r0, #1
   12514:	beq	1252c <__assert_fail@plt+0x13d8>
   12518:	cmp	r0, #2
   1251c:	bne	12554 <__assert_fail@plt+0x1400>
   12520:	ldr	r0, [sp, #20]
   12524:	tst	r0, #1
   12528:	bne	12554 <__assert_fail@plt+0x1400>
   1252c:	movw	r0, #37220	; 0x9164
   12530:	movt	r0, #2
   12534:	ldr	r0, [r0]
   12538:	ldr	r1, [r0, #20]
   1253c:	ldr	r2, [r0, #24]
   12540:	cmp	r1, r2
   12544:	bcs	125d8 <__assert_fail@plt+0x1484>
   12548:	add	r2, r1, #1
   1254c:	str	r2, [r0, #20]
   12550:	strb	r9, [r1]
   12554:	movw	r0, #37232	; 0x9170
   12558:	movt	r0, #2
   1255c:	ldrb	r0, [r0, #2]
   12560:	cmp	r0, #1
   12564:	bne	12590 <__assert_fail@plt+0x143c>
   12568:	orrs	r0, r5, sl
   1256c:	beq	124e0 <__assert_fail@plt+0x138c>
   12570:	movw	r0, #37232	; 0x9170
   12574:	cmp	r4, #0
   12578:	movt	r0, #2
   1257c:	beq	1259c <__assert_fail@plt+0x1448>
   12580:	ldrb	r0, [r0]
   12584:	cmp	r0, #0
   12588:	beq	1229c <__assert_fail@plt+0x1148>
   1258c:	b	125a8 <__assert_fail@plt+0x1454>
   12590:	ldr	r4, [sp, #44]	; 0x2c
   12594:	str	r5, [sp, #40]	; 0x28
   12598:	b	122c8 <__assert_fail@plt+0x1174>
   1259c:	ldrb	r0, [r0, #2]
   125a0:	cmp	r0, #1
   125a4:	bne	1229c <__assert_fail@plt+0x1148>
   125a8:	movw	r0, #37232	; 0x9170
   125ac:	movt	r0, #2
   125b0:	ldrb	r0, [r0, #4]
   125b4:	cmp	r0, #0
   125b8:	bne	1227c <__assert_fail@plt+0x1128>
   125bc:	movw	r1, #32294	; 0x7e26
   125c0:	adds	r2, r5, #1
   125c4:	mov	r0, #1
   125c8:	movt	r1, #1
   125cc:	adc	r3, sl, #0
   125d0:	bl	110ac <__printf_chk@plt>
   125d4:	b	1227c <__assert_fail@plt+0x1128>
   125d8:	ldr	r1, [sp, #24]
   125dc:	bl	110f4 <__overflow@plt>
   125e0:	b	12554 <__assert_fail@plt+0x1400>
   125e4:	ldr	r0, [r8]
   125e8:	ldr	r4, [sp, #44]	; 0x2c
   125ec:	ldrb	r0, [r0]
   125f0:	tst	r0, #32
   125f4:	bne	12610 <__assert_fail@plt+0x14bc>
   125f8:	ldr	r0, [sp, #40]	; 0x28
   125fc:	orrs	r0, r0, sl
   12600:	beq	12658 <__assert_fail@plt+0x1504>
   12604:	ldrb	r0, [r5]
   12608:	cmp	r0, #1
   1260c:	beq	12670 <__assert_fail@plt+0x151c>
   12610:	ldr	r0, [r8]
   12614:	ldrb	r1, [r0]
   12618:	tst	r1, #32
   1261c:	beq	121e0 <__assert_fail@plt+0x108c>
   12620:	movw	r1, #32277	; 0x7e15
   12624:	mov	r0, #0
   12628:	mov	r2, #5
   1262c:	movt	r1, #1
   12630:	bl	10f5c <dcgettext@plt>
   12634:	ldr	r1, [sp, #16]
   12638:	mov	r4, r0
   1263c:	mov	r0, #4
   12640:	bl	15108 <__assert_fail@plt+0x3fb4>
   12644:	mov	r3, r0
   12648:	mov	r0, #1
   1264c:	mov	r1, #0
   12650:	mov	r2, r4
   12654:	bl	10fd4 <error@plt>
   12658:	ldrb	r0, [r5, #1]
   1265c:	mov	r1, #0
   12660:	mov	sl, #0
   12664:	str	r1, [sp, #40]	; 0x28
   12668:	cmp	r0, #0
   1266c:	beq	12610 <__assert_fail@plt+0x14bc>
   12670:	ldrb	r0, [r5, #4]
   12674:	cmp	r0, #0
   12678:	bne	12698 <__assert_fail@plt+0x1544>
   1267c:	ldr	r0, [sp, #40]	; 0x28
   12680:	movw	r1, #32294	; 0x7e26
   12684:	movt	r1, #1
   12688:	adds	r2, r0, #1
   1268c:	mov	r0, #1
   12690:	adc	r3, sl, #0
   12694:	bl	110ac <__printf_chk@plt>
   12698:	movw	r0, #37220	; 0x9164
   1269c:	ldr	r2, [r4, #4]
   126a0:	mov	r1, #1
   126a4:	movt	r0, #2
   126a8:	ldr	r3, [r0]
   126ac:	ldr	r0, [r4, #8]
   126b0:	bl	10f50 <fwrite_unlocked@plt>
   126b4:	ldr	r0, [r8]
   126b8:	ldrb	r1, [r0]
   126bc:	tst	r1, #32
   126c0:	beq	121e0 <__assert_fail@plt+0x108c>
   126c4:	b	12620 <__assert_fail@plt+0x14cc>
   126c8:	uxtb	r1, r9
   126cc:	bl	110f4 <__overflow@plt>
   126d0:	ldr	r0, [r8]
   126d4:	ldrb	r1, [r0]
   126d8:	tst	r1, #32
   126dc:	beq	121e0 <__assert_fail@plt+0x108c>
   126e0:	b	12620 <__assert_fail@plt+0x14cc>
   126e4:	mov	r0, #1
   126e8:	bl	11250 <__assert_fail@plt+0xfc>
   126ec:	movw	r1, #31408	; 0x7ab0
   126f0:	mov	r0, #0
   126f4:	mov	r2, #5
   126f8:	movt	r1, #1
   126fc:	bl	10f5c <dcgettext@plt>
   12700:	mov	r5, r0
   12704:	ldr	r0, [r7]
   12708:	ldr	r0, [r4, r0, lsl #2]
   1270c:	bl	15630 <__assert_fail@plt+0x44dc>
   12710:	mov	r3, r0
   12714:	mov	r0, #0
   12718:	mov	r1, #0
   1271c:	mov	r2, r5
   12720:	bl	10fd4 <error@plt>
   12724:	mov	r0, #1
   12728:	bl	11250 <__assert_fail@plt+0xfc>
   1272c:	movw	r0, #37112	; 0x90f8
   12730:	movw	r2, #31582	; 0x7b5e
   12734:	mov	r1, #0
   12738:	movw	r7, #31562	; 0x7b4a
   1273c:	movt	r0, #2
   12740:	movt	r2, #1
   12744:	str	r1, [sp, #8]
   12748:	movw	r1, #31339	; 0x7a6b
   1274c:	movt	r7, #1
   12750:	movt	r1, #1
   12754:	ldr	r3, [r0]
   12758:	movw	r0, #37220	; 0x9164
   1275c:	str	r2, [sp, #4]
   12760:	movw	r2, #31548	; 0x7b3c
   12764:	str	r7, [sp]
   12768:	movt	r0, #2
   1276c:	movt	r2, #1
   12770:	ldr	r0, [r0]
   12774:	bl	15ad4 <__assert_fail@plt+0x4980>
   12778:	mov	r0, #0
   1277c:	bl	11058 <exit@plt>
   12780:	mov	r0, #0
   12784:	bl	11250 <__assert_fail@plt+0xfc>
   12788:	movw	r1, #31448	; 0x7ad8
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	movt	r1, #1
   12798:	bl	10f5c <dcgettext@plt>
   1279c:	movw	r2, #32268	; 0x7e0c
   127a0:	str	r0, [sp]
   127a4:	mov	r0, #1
   127a8:	mov	r1, #0
   127ac:	mov	r3, sl
   127b0:	movt	r2, #1
   127b4:	bl	10fd4 <error@plt>
   127b8:	movw	r1, #31481	; 0x7af9
   127bc:	movt	r1, #1
   127c0:	b	12810 <__assert_fail@plt+0x16bc>
   127c4:	movw	r1, #31408	; 0x7ab0
   127c8:	mov	r0, #0
   127cc:	mov	r2, #5
   127d0:	movt	r1, #1
   127d4:	bl	10f5c <dcgettext@plt>
   127d8:	mov	r4, r0
   127dc:	movw	r0, #37224	; 0x9168
   127e0:	movt	r0, #2
   127e4:	ldr	r0, [r0]
   127e8:	bl	15630 <__assert_fail@plt+0x44dc>
   127ec:	mov	r3, r0
   127f0:	mov	r0, #0
   127f4:	mov	r1, #0
   127f8:	mov	r2, r4
   127fc:	bl	10fd4 <error@plt>
   12800:	mov	r0, #1
   12804:	bl	11250 <__assert_fail@plt+0xfc>
   12808:	movw	r1, #31513	; 0x7b19
   1280c:	movt	r1, #1
   12810:	mov	r0, #0
   12814:	mov	r2, #5
   12818:	bl	10f5c <dcgettext@plt>
   1281c:	movw	r2, #32268	; 0x7e0c
   12820:	str	r0, [sp]
   12824:	mov	r0, #1
   12828:	mov	r1, #0
   1282c:	mov	r3, r7
   12830:	movt	r2, #1
   12834:	bl	10fd4 <error@plt>
   12838:	movw	r1, #31598	; 0x7b6e
   1283c:	movt	r1, #1
   12840:	b	128b8 <__assert_fail@plt+0x1764>
   12844:	movw	r1, #31645	; 0x7b9d
   12848:	movt	r1, #1
   1284c:	b	128b8 <__assert_fail@plt+0x1764>
   12850:	bl	11088 <__errno_location@plt>
   12854:	ldr	r4, [r0]
   12858:	mov	r0, #0
   1285c:	mov	r1, #3
   12860:	mov	r2, r5
   12864:	bl	15384 <__assert_fail@plt+0x4230>
   12868:	movw	r2, #32734	; 0x7fde
   1286c:	mov	r3, r0
   12870:	mov	r0, #1
   12874:	mov	r1, r4
   12878:	movt	r2, #1
   1287c:	bl	10fd4 <error@plt>
   12880:	bl	11088 <__errno_location@plt>
   12884:	ldr	r5, [r0]
   12888:	mov	r0, #0
   1288c:	mov	r1, #3
   12890:	mov	r2, r4
   12894:	bl	15384 <__assert_fail@plt+0x4230>
   12898:	movw	r2, #32734	; 0x7fde
   1289c:	mov	r3, r0
   128a0:	mov	r0, #1
   128a4:	mov	r1, r5
   128a8:	movt	r2, #1
   128ac:	bl	10fd4 <error@plt>
   128b0:	movw	r1, #31696	; 0x7bd0
   128b4:	movt	r1, #1
   128b8:	mov	r0, #0
   128bc:	mov	r2, #5
   128c0:	bl	10f5c <dcgettext@plt>
   128c4:	mov	r2, r0
   128c8:	mov	r0, #0
   128cc:	mov	r1, #0
   128d0:	bl	10fd4 <error@plt>
   128d4:	mov	r0, #1
   128d8:	bl	11250 <__assert_fail@plt+0xfc>
   128dc:	mov	r0, #1
   128e0:	b	11250 <__assert_fail@plt+0xfc>
   128e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128e8:	add	fp, sp, #28
   128ec:	sub	sp, sp, #12
   128f0:	mov	r4, r3
   128f4:	mov	r9, r2
   128f8:	mov	r7, r1
   128fc:	mov	r8, r0
   12900:	bl	11070 <strlen@plt>
   12904:	ldr	r6, [r7]
   12908:	cmp	r6, #0
   1290c:	beq	129b8 <__assert_fail@plt+0x1864>
   12910:	mov	r5, r0
   12914:	cmp	r9, #0
   12918:	beq	129c8 <__assert_fail@plt+0x1874>
   1291c:	add	r0, r7, #4
   12920:	mvn	sl, #0
   12924:	mov	r7, #0
   12928:	str	r9, [sp]
   1292c:	str	r0, [sp, #8]
   12930:	mov	r0, #0
   12934:	str	r0, [sp, #4]
   12938:	mov	r0, r9
   1293c:	b	12980 <__assert_fail@plt+0x182c>
   12940:	ldr	r0, [sp]
   12944:	mov	r1, r9
   12948:	mov	r2, r4
   1294c:	mla	r0, sl, r4, r0
   12950:	bl	11064 <bcmp@plt>
   12954:	ldr	r1, [sp, #4]
   12958:	cmp	r0, #0
   1295c:	movwne	r0, #1
   12960:	orr	r1, r1, r0
   12964:	str	r1, [sp, #4]
   12968:	ldr	r0, [sp, #8]
   1296c:	add	r9, r9, r4
   12970:	ldr	r6, [r0, r7, lsl #2]
   12974:	add	r7, r7, #1
   12978:	cmp	r6, #0
   1297c:	beq	12a3c <__assert_fail@plt+0x18e8>
   12980:	mov	r0, r6
   12984:	mov	r1, r8
   12988:	mov	r2, r5
   1298c:	bl	11130 <strncmp@plt>
   12990:	cmp	r0, #0
   12994:	bne	12968 <__assert_fail@plt+0x1814>
   12998:	mov	r0, r6
   1299c:	bl	11070 <strlen@plt>
   129a0:	cmp	r0, r5
   129a4:	beq	129bc <__assert_fail@plt+0x1868>
   129a8:	cmn	sl, #1
   129ac:	bne	12940 <__assert_fail@plt+0x17ec>
   129b0:	mov	sl, r7
   129b4:	b	12968 <__assert_fail@plt+0x1814>
   129b8:	mvn	r7, #0
   129bc:	mov	r0, r7
   129c0:	sub	sp, fp, #28
   129c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c8:	add	r4, r7, #4
   129cc:	mov	r0, #0
   129d0:	mvn	r9, #0
   129d4:	mvn	sl, #0
   129d8:	mov	r7, #0
   129dc:	str	r0, [sp, #4]
   129e0:	b	12a10 <__assert_fail@plt+0x18bc>
   129e4:	ldr	r1, [sp, #4]
   129e8:	subs	r0, sl, r9
   129ec:	movwne	r0, #1
   129f0:	cmn	sl, #1
   129f4:	moveq	sl, r7
   129f8:	orr	r1, r1, r0
   129fc:	str	r1, [sp, #4]
   12a00:	ldr	r6, [r4, r7, lsl #2]
   12a04:	add	r7, r7, #1
   12a08:	cmp	r6, #0
   12a0c:	beq	12a3c <__assert_fail@plt+0x18e8>
   12a10:	mov	r0, r6
   12a14:	mov	r1, r8
   12a18:	mov	r2, r5
   12a1c:	bl	11130 <strncmp@plt>
   12a20:	cmp	r0, #0
   12a24:	bne	12a00 <__assert_fail@plt+0x18ac>
   12a28:	mov	r0, r6
   12a2c:	bl	11070 <strlen@plt>
   12a30:	cmp	r0, r5
   12a34:	bne	129e4 <__assert_fail@plt+0x1890>
   12a38:	b	129bc <__assert_fail@plt+0x1868>
   12a3c:	ldr	r0, [sp, #4]
   12a40:	tst	r0, #1
   12a44:	mvnne	sl, #1
   12a48:	mov	r0, sl
   12a4c:	sub	sp, fp, #28
   12a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a54:	push	{r4, r5, r6, r7, fp, lr}
   12a58:	add	fp, sp, #16
   12a5c:	mov	r5, r0
   12a60:	ldr	r0, [r1]
   12a64:	mvn	r4, #0
   12a68:	cmp	r0, #0
   12a6c:	beq	12a98 <__assert_fail@plt+0x1944>
   12a70:	add	r7, r1, #4
   12a74:	mov	r6, #0
   12a78:	mov	r1, r5
   12a7c:	bl	10ee4 <strcmp@plt>
   12a80:	cmp	r0, #0
   12a84:	beq	12aa0 <__assert_fail@plt+0x194c>
   12a88:	ldr	r0, [r7, r6, lsl #2]
   12a8c:	add	r6, r6, #1
   12a90:	cmp	r0, #0
   12a94:	bne	12a78 <__assert_fail@plt+0x1924>
   12a98:	mov	r0, r4
   12a9c:	pop	{r4, r5, r6, r7, fp, pc}
   12aa0:	mov	r0, r6
   12aa4:	pop	{r4, r5, r6, r7, fp, pc}
   12aa8:	push	{r4, r5, r6, sl, fp, lr}
   12aac:	add	fp, sp, #16
   12ab0:	sub	sp, sp, #8
   12ab4:	mov	r5, r0
   12ab8:	movw	r0, #32647	; 0x7f87
   12abc:	mov	r4, r1
   12ac0:	movw	r1, #32674	; 0x7fa2
   12ac4:	cmn	r2, #1
   12ac8:	mov	r2, #5
   12acc:	movt	r0, #1
   12ad0:	movt	r1, #1
   12ad4:	moveq	r1, r0
   12ad8:	mov	r0, #0
   12adc:	bl	10f5c <dcgettext@plt>
   12ae0:	mov	r6, r0
   12ae4:	mov	r0, #0
   12ae8:	mov	r1, #8
   12aec:	mov	r2, r4
   12af0:	bl	15060 <__assert_fail@plt+0x3f0c>
   12af4:	mov	r4, r0
   12af8:	mov	r0, #1
   12afc:	mov	r1, r5
   12b00:	bl	15620 <__assert_fail@plt+0x44cc>
   12b04:	str	r0, [sp]
   12b08:	mov	r0, #0
   12b0c:	mov	r1, #0
   12b10:	mov	r2, r6
   12b14:	mov	r3, r4
   12b18:	bl	10fd4 <error@plt>
   12b1c:	sub	sp, fp, #16
   12b20:	pop	{r4, r5, r6, sl, fp, pc}
   12b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b28:	add	fp, sp, #28
   12b2c:	sub	sp, sp, #4
   12b30:	mov	sl, r1
   12b34:	movw	r1, #32703	; 0x7fbf
   12b38:	mov	r4, r2
   12b3c:	mov	r6, r0
   12b40:	mov	r0, #0
   12b44:	mov	r2, #5
   12b48:	mov	r8, #0
   12b4c:	movt	r1, #1
   12b50:	bl	10f5c <dcgettext@plt>
   12b54:	movw	r1, #37208	; 0x9158
   12b58:	movt	r1, #2
   12b5c:	ldr	r1, [r1]
   12b60:	bl	10ecc <fputs_unlocked@plt>
   12b64:	ldr	r7, [r6]
   12b68:	cmp	r7, #0
   12b6c:	beq	12c28 <__assert_fail@plt+0x1ad4>
   12b70:	add	r0, r6, #4
   12b74:	mov	r9, #0
   12b78:	mov	r6, #0
   12b7c:	str	r0, [sp]
   12b80:	cmp	r9, #0
   12b84:	bne	12bdc <__assert_fail@plt+0x1a88>
   12b88:	mov	r5, #0
   12b8c:	movw	r0, #37208	; 0x9158
   12b90:	movt	r0, #2
   12b94:	ldr	r6, [r0]
   12b98:	mov	r0, r7
   12b9c:	bl	15630 <__assert_fail@plt+0x44dc>
   12ba0:	movw	r2, #32724	; 0x7fd4
   12ba4:	mov	r3, r0
   12ba8:	mov	r0, r6
   12bac:	mov	r1, #1
   12bb0:	movt	r2, #1
   12bb4:	bl	110c4 <__fprintf_chk@plt>
   12bb8:	add	r6, sl, r5
   12bbc:	ldr	r0, [sp]
   12bc0:	add	r8, r8, r4
   12bc4:	ldr	r7, [r0, -r9, lsl #2]
   12bc8:	sub	r9, r9, #1
   12bcc:	cmp	r7, #0
   12bd0:	beq	12c28 <__assert_fail@plt+0x1ad4>
   12bd4:	cmp	r9, #0
   12bd8:	beq	12b88 <__assert_fail@plt+0x1a34>
   12bdc:	add	r1, sl, r8
   12be0:	mov	r0, r6
   12be4:	mov	r2, r4
   12be8:	bl	11064 <bcmp@plt>
   12bec:	cmp	r0, #0
   12bf0:	mov	r5, r8
   12bf4:	bne	12b8c <__assert_fail@plt+0x1a38>
   12bf8:	movw	r0, #37208	; 0x9158
   12bfc:	movt	r0, #2
   12c00:	ldr	r5, [r0]
   12c04:	mov	r0, r7
   12c08:	bl	15630 <__assert_fail@plt+0x44dc>
   12c0c:	movw	r2, #32732	; 0x7fdc
   12c10:	mov	r3, r0
   12c14:	mov	r0, r5
   12c18:	mov	r1, #1
   12c1c:	movt	r2, #1
   12c20:	bl	110c4 <__fprintf_chk@plt>
   12c24:	b	12bbc <__assert_fail@plt+0x1a68>
   12c28:	movw	r0, #37208	; 0x9158
   12c2c:	movt	r0, #2
   12c30:	ldr	r0, [r0]
   12c34:	ldr	r1, [r0, #20]
   12c38:	ldr	r2, [r0, #24]
   12c3c:	cmp	r1, r2
   12c40:	addcc	r2, r1, #1
   12c44:	strcc	r2, [r0, #20]
   12c48:	movcc	r0, #10
   12c4c:	strbcc	r0, [r1]
   12c50:	subcc	sp, fp, #28
   12c54:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c58:	mov	r1, #10
   12c5c:	sub	sp, fp, #28
   12c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c64:	b	110f4 <__overflow@plt>
   12c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c6c:	add	fp, sp, #28
   12c70:	sub	sp, sp, #12
   12c74:	mov	sl, r0
   12c78:	ldr	r0, [fp, #16]
   12c7c:	ldr	r9, [fp, #8]
   12c80:	mov	r5, r3
   12c84:	mov	r8, r2
   12c88:	mov	r6, r1
   12c8c:	cmp	r0, #0
   12c90:	beq	12cc0 <__assert_fail@plt+0x1b6c>
   12c94:	mov	r0, r6
   12c98:	mov	r1, r8
   12c9c:	mov	r2, r5
   12ca0:	mov	r3, r9
   12ca4:	bl	128e4 <__assert_fail@plt+0x1790>
   12ca8:	mov	r4, r0
   12cac:	cmn	r4, #1
   12cb0:	ble	12d10 <__assert_fail@plt+0x1bbc>
   12cb4:	mov	r0, r4
   12cb8:	sub	sp, fp, #28
   12cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc0:	ldr	r0, [r8]
   12cc4:	movw	r7, #32647	; 0x7f87
   12cc8:	str	r5, [sp, #8]
   12ccc:	movt	r7, #1
   12cd0:	cmp	r0, #0
   12cd4:	beq	12d28 <__assert_fail@plt+0x1bd4>
   12cd8:	add	r5, r8, #4
   12cdc:	mov	r4, #0
   12ce0:	mov	r1, r6
   12ce4:	bl	10ee4 <strcmp@plt>
   12ce8:	cmp	r0, #0
   12cec:	beq	12d04 <__assert_fail@plt+0x1bb0>
   12cf0:	ldr	r0, [r5, r4, lsl #2]
   12cf4:	add	r4, r4, #1
   12cf8:	cmp	r0, #0
   12cfc:	bne	12ce0 <__assert_fail@plt+0x1b8c>
   12d00:	b	12d28 <__assert_fail@plt+0x1bd4>
   12d04:	ldr	r5, [sp, #8]
   12d08:	cmn	r4, #1
   12d0c:	bgt	12cb4 <__assert_fail@plt+0x1b60>
   12d10:	movw	r0, #32647	; 0x7f87
   12d14:	movw	r7, #32674	; 0x7fa2
   12d18:	str	r5, [sp, #8]
   12d1c:	movt	r0, #1
   12d20:	movt	r7, #1
   12d24:	moveq	r7, r0
   12d28:	ldr	r5, [fp, #12]
   12d2c:	mov	r0, #0
   12d30:	mov	r1, r7
   12d34:	mov	r2, #5
   12d38:	bl	10f5c <dcgettext@plt>
   12d3c:	mov	r4, r0
   12d40:	mov	r0, #0
   12d44:	mov	r1, #8
   12d48:	mov	r2, r6
   12d4c:	bl	15060 <__assert_fail@plt+0x3f0c>
   12d50:	mov	r6, r0
   12d54:	mov	r0, #1
   12d58:	mov	r1, sl
   12d5c:	bl	15620 <__assert_fail@plt+0x44cc>
   12d60:	str	r0, [sp]
   12d64:	mov	r0, #0
   12d68:	mov	r1, #0
   12d6c:	mov	r2, r4
   12d70:	mov	r3, r6
   12d74:	bl	10fd4 <error@plt>
   12d78:	ldr	r1, [sp, #8]
   12d7c:	mov	r0, r8
   12d80:	mov	r2, r9
   12d84:	bl	12b24 <__assert_fail@plt+0x19d0>
   12d88:	blx	r5
   12d8c:	mvn	r4, #0
   12d90:	mov	r0, r4
   12d94:	sub	sp, fp, #28
   12d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12da0:	add	fp, sp, #24
   12da4:	ldr	r6, [r1]
   12da8:	cmp	r6, #0
   12dac:	beq	12e10 <__assert_fail@plt+0x1cbc>
   12db0:	mov	r8, r1
   12db4:	mov	r7, r2
   12db8:	mov	r1, r2
   12dbc:	mov	r2, r3
   12dc0:	mov	r4, r3
   12dc4:	mov	r9, r0
   12dc8:	bl	11064 <bcmp@plt>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12e08 <__assert_fail@plt+0x1cb4>
   12dd4:	add	r7, r7, r4
   12dd8:	add	r5, r8, #4
   12ddc:	ldr	r6, [r5]
   12de0:	cmp	r6, #0
   12de4:	beq	12e10 <__assert_fail@plt+0x1cbc>
   12de8:	mov	r0, r9
   12dec:	mov	r1, r7
   12df0:	mov	r2, r4
   12df4:	bl	11064 <bcmp@plt>
   12df8:	add	r7, r7, r4
   12dfc:	add	r5, r5, #4
   12e00:	cmp	r0, #0
   12e04:	bne	12ddc <__assert_fail@plt+0x1c88>
   12e08:	mov	r0, r6
   12e0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e10:	mov	r6, #0
   12e14:	mov	r0, r6
   12e18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e1c:	movw	r1, #37260	; 0x918c
   12e20:	movt	r1, #2
   12e24:	str	r0, [r1, #4]
   12e28:	bx	lr
   12e2c:	movw	r1, #37260	; 0x918c
   12e30:	movt	r1, #2
   12e34:	strb	r0, [r1]
   12e38:	bx	lr
   12e3c:	push	{r4, r5, r6, sl, fp, lr}
   12e40:	add	fp, sp, #16
   12e44:	sub	sp, sp, #8
   12e48:	movw	r0, #37220	; 0x9164
   12e4c:	movt	r0, #2
   12e50:	ldr	r0, [r0]
   12e54:	bl	17014 <__assert_fail@plt+0x5ec0>
   12e58:	cmp	r0, #0
   12e5c:	beq	12e84 <__assert_fail@plt+0x1d30>
   12e60:	movw	r5, #37260	; 0x918c
   12e64:	movt	r5, #2
   12e68:	ldrb	r0, [r5]
   12e6c:	cmp	r0, #0
   12e70:	beq	12eb0 <__assert_fail@plt+0x1d5c>
   12e74:	bl	11088 <__errno_location@plt>
   12e78:	ldr	r0, [r0]
   12e7c:	cmp	r0, #32
   12e80:	bne	12eb0 <__assert_fail@plt+0x1d5c>
   12e84:	movw	r0, #37208	; 0x9158
   12e88:	movt	r0, #2
   12e8c:	ldr	r0, [r0]
   12e90:	bl	17014 <__assert_fail@plt+0x5ec0>
   12e94:	cmp	r0, #0
   12e98:	subeq	sp, fp, #16
   12e9c:	popeq	{r4, r5, r6, sl, fp, pc}
   12ea0:	movw	r0, #37120	; 0x9100
   12ea4:	movt	r0, #2
   12ea8:	ldr	r0, [r0]
   12eac:	bl	10f20 <_exit@plt>
   12eb0:	movw	r1, #32737	; 0x7fe1
   12eb4:	mov	r0, #0
   12eb8:	mov	r2, #5
   12ebc:	movt	r1, #1
   12ec0:	bl	10f5c <dcgettext@plt>
   12ec4:	ldr	r6, [r5, #4]
   12ec8:	mov	r4, r0
   12ecc:	bl	11088 <__errno_location@plt>
   12ed0:	ldr	r5, [r0]
   12ed4:	cmp	r6, #0
   12ed8:	bne	12ef4 <__assert_fail@plt+0x1da0>
   12edc:	movw	r2, #32734	; 0x7fde
   12ee0:	mov	r0, #0
   12ee4:	mov	r1, r5
   12ee8:	mov	r3, r4
   12eec:	movt	r2, #1
   12ef0:	b	12f14 <__assert_fail@plt+0x1dc0>
   12ef4:	mov	r0, r6
   12ef8:	bl	152a8 <__assert_fail@plt+0x4154>
   12efc:	movw	r2, #32268	; 0x7e0c
   12f00:	mov	r3, r0
   12f04:	str	r4, [sp]
   12f08:	mov	r0, #0
   12f0c:	mov	r1, r5
   12f10:	movt	r2, #1
   12f14:	bl	10fd4 <error@plt>
   12f18:	movw	r0, #37120	; 0x9100
   12f1c:	movt	r0, #2
   12f20:	ldr	r0, [r0]
   12f24:	bl	10f20 <_exit@plt>
   12f28:	b	10efc <posix_fadvise64@plt>
   12f2c:	cmp	r0, #0
   12f30:	bxeq	lr
   12f34:	push	{r4, sl, fp, lr}
   12f38:	add	fp, sp, #8
   12f3c:	sub	sp, sp, #16
   12f40:	mov	r4, r1
   12f44:	bl	110b8 <fileno@plt>
   12f48:	mov	r1, #0
   12f4c:	mov	r2, #0
   12f50:	mov	r3, #0
   12f54:	str	r1, [sp]
   12f58:	stmib	sp, {r1, r4}
   12f5c:	bl	10efc <posix_fadvise64@plt>
   12f60:	sub	sp, fp, #8
   12f64:	pop	{r4, sl, fp, pc}
   12f68:	push	{r4, r5, r6, sl, fp, lr}
   12f6c:	add	fp, sp, #16
   12f70:	sub	sp, sp, #8
   12f74:	mov	r4, r0
   12f78:	bl	110b8 <fileno@plt>
   12f7c:	cmn	r0, #1
   12f80:	ble	12ff4 <__assert_fail@plt+0x1ea0>
   12f84:	mov	r0, r4
   12f88:	bl	11010 <__freading@plt>
   12f8c:	cmp	r0, #0
   12f90:	beq	12fbc <__assert_fail@plt+0x1e68>
   12f94:	mov	r0, r4
   12f98:	bl	110b8 <fileno@plt>
   12f9c:	mov	r1, #1
   12fa0:	mov	r2, #0
   12fa4:	mov	r3, #0
   12fa8:	str	r1, [sp]
   12fac:	bl	10fa4 <lseek64@plt>
   12fb0:	and	r0, r0, r1
   12fb4:	cmn	r0, #1
   12fb8:	beq	12ff4 <__assert_fail@plt+0x1ea0>
   12fbc:	mov	r0, r4
   12fc0:	bl	13004 <__assert_fail@plt+0x1eb0>
   12fc4:	cmp	r0, #0
   12fc8:	beq	12ff4 <__assert_fail@plt+0x1ea0>
   12fcc:	bl	11088 <__errno_location@plt>
   12fd0:	ldr	r6, [r0]
   12fd4:	mov	r5, r0
   12fd8:	mov	r0, r4
   12fdc:	bl	110d0 <fclose@plt>
   12fe0:	cmp	r6, #0
   12fe4:	strne	r6, [r5]
   12fe8:	mvnne	r0, #0
   12fec:	sub	sp, fp, #16
   12ff0:	pop	{r4, r5, r6, sl, fp, pc}
   12ff4:	mov	r0, r4
   12ff8:	sub	sp, fp, #16
   12ffc:	pop	{r4, r5, r6, sl, fp, lr}
   13000:	b	110d0 <fclose@plt>
   13004:	push	{r4, sl, fp, lr}
   13008:	add	fp, sp, #8
   1300c:	sub	sp, sp, #8
   13010:	mov	r4, r0
   13014:	cmp	r0, #0
   13018:	beq	13050 <__assert_fail@plt+0x1efc>
   1301c:	mov	r0, r4
   13020:	bl	11010 <__freading@plt>
   13024:	cmp	r0, #0
   13028:	beq	13050 <__assert_fail@plt+0x1efc>
   1302c:	ldrb	r0, [r4, #1]
   13030:	tst	r0, #1
   13034:	beq	13050 <__assert_fail@plt+0x1efc>
   13038:	mov	r0, #1
   1303c:	mov	r2, #0
   13040:	mov	r3, #0
   13044:	str	r0, [sp]
   13048:	mov	r0, r4
   1304c:	bl	132f4 <__assert_fail@plt+0x21a0>
   13050:	mov	r0, r4
   13054:	sub	sp, fp, #8
   13058:	pop	{r4, sl, fp, lr}
   1305c:	b	10f08 <fflush@plt>
   13060:	push	{r4, r5, r6, sl, fp, lr}
   13064:	add	fp, sp, #16
   13068:	mov	r4, r0
   1306c:	bl	11088 <__errno_location@plt>
   13070:	ldr	r6, [r0]
   13074:	mov	r5, r0
   13078:	mov	r0, r4
   1307c:	bl	10f14 <free@plt>
   13080:	str	r6, [r5]
   13084:	pop	{r4, r5, r6, sl, fp, pc}
   13088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1308c:	add	fp, sp, #28
   13090:	sub	sp, sp, #4
   13094:	mov	r5, r0
   13098:	mov	r0, r2
   1309c:	mov	r4, r2
   130a0:	mov	r9, r1
   130a4:	bl	110b8 <fileno@plt>
   130a8:	mov	r7, #0
   130ac:	cmp	r0, #0
   130b0:	beq	130f0 <__assert_fail@plt+0x1f9c>
   130b4:	cmp	r0, #1
   130b8:	beq	130fc <__assert_fail@plt+0x1fa8>
   130bc:	cmp	r0, #2
   130c0:	beq	130d8 <__assert_fail@plt+0x1f84>
   130c4:	mov	r0, #2
   130c8:	mov	r1, #2
   130cc:	bl	10f68 <dup2@plt>
   130d0:	subs	r7, r0, #2
   130d4:	movwne	r7, #1
   130d8:	mov	r0, #1
   130dc:	mov	r1, #1
   130e0:	bl	10f68 <dup2@plt>
   130e4:	subs	r6, r0, #1
   130e8:	movwne	r6, #1
   130ec:	b	13100 <__assert_fail@plt+0x1fac>
   130f0:	mov	r6, #0
   130f4:	mov	r8, #0
   130f8:	b	131c8 <__assert_fail@plt+0x2074>
   130fc:	mov	r6, #0
   13100:	mov	r0, #0
   13104:	mov	r1, #0
   13108:	mov	sl, #0
   1310c:	bl	10f68 <dup2@plt>
   13110:	cmp	r0, #0
   13114:	mov	r8, #0
   13118:	beq	13158 <__assert_fail@plt+0x2004>
   1311c:	movw	r0, #32749	; 0x7fed
   13120:	mov	r1, #0
   13124:	movt	r0, #1
   13128:	bl	10fe0 <open64@plt>
   1312c:	cmp	r0, #0
   13130:	beq	13154 <__assert_fail@plt+0x2000>
   13134:	cmn	r0, #1
   13138:	ble	13278 <__assert_fail@plt+0x2124>
   1313c:	bl	11148 <close@plt>
   13140:	bl	11088 <__errno_location@plt>
   13144:	mov	r4, r0
   13148:	mov	r0, #9
   1314c:	str	r0, [r4]
   13150:	b	13280 <__assert_fail@plt+0x212c>
   13154:	mov	r8, #1
   13158:	cmp	r6, #0
   1315c:	beq	1317c <__assert_fail@plt+0x2028>
   13160:	movw	r0, #32749	; 0x7fed
   13164:	mov	r1, #0
   13168:	movt	r0, #1
   1316c:	bl	10fe0 <open64@plt>
   13170:	mov	sl, #1
   13174:	cmp	r0, #1
   13178:	bne	13248 <__assert_fail@plt+0x20f4>
   1317c:	cmp	r7, #0
   13180:	beq	131c0 <__assert_fail@plt+0x206c>
   13184:	movw	r0, #32749	; 0x7fed
   13188:	mov	r1, #0
   1318c:	movt	r0, #1
   13190:	bl	10fe0 <open64@plt>
   13194:	mov	r7, #1
   13198:	cmp	r0, #2
   1319c:	beq	131c4 <__assert_fail@plt+0x2070>
   131a0:	cmn	r0, #1
   131a4:	ble	132d0 <__assert_fail@plt+0x217c>
   131a8:	bl	11148 <close@plt>
   131ac:	bl	11088 <__errno_location@plt>
   131b0:	mov	r4, r0
   131b4:	mov	r0, #9
   131b8:	str	r0, [r4]
   131bc:	b	132d8 <__assert_fail@plt+0x2184>
   131c0:	mov	r7, #0
   131c4:	mov	r6, sl
   131c8:	mov	r0, r5
   131cc:	mov	r1, r9
   131d0:	mov	r2, r4
   131d4:	bl	11034 <freopen64@plt>
   131d8:	mov	r5, r0
   131dc:	bl	11088 <__errno_location@plt>
   131e0:	ldr	r9, [r0]
   131e4:	mov	r4, r0
   131e8:	cmp	r7, #0
   131ec:	beq	131f8 <__assert_fail@plt+0x20a4>
   131f0:	mov	r0, #2
   131f4:	bl	11148 <close@plt>
   131f8:	cmp	r6, #0
   131fc:	beq	13208 <__assert_fail@plt+0x20b4>
   13200:	mov	r0, #1
   13204:	bl	11148 <close@plt>
   13208:	cmp	r8, #0
   1320c:	beq	1322c <__assert_fail@plt+0x20d8>
   13210:	mov	r0, #0
   13214:	bl	11148 <close@plt>
   13218:	cmp	r5, #0
   1321c:	beq	13234 <__assert_fail@plt+0x20e0>
   13220:	mov	r0, r5
   13224:	sub	sp, fp, #28
   13228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1322c:	cmp	r5, #0
   13230:	bne	13220 <__assert_fail@plt+0x20cc>
   13234:	mov	r5, #0
   13238:	str	r9, [r4]
   1323c:	mov	r0, r5
   13240:	sub	sp, fp, #28
   13244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13248:	cmn	r0, #1
   1324c:	ble	13298 <__assert_fail@plt+0x2144>
   13250:	bl	11148 <close@plt>
   13254:	bl	11088 <__errno_location@plt>
   13258:	mov	r4, r0
   1325c:	mov	r0, #9
   13260:	str	r0, [r4]
   13264:	ldr	r9, [r4]
   13268:	mov	r5, #0
   1326c:	cmp	r7, #0
   13270:	beq	13200 <__assert_fail@plt+0x20ac>
   13274:	b	132b0 <__assert_fail@plt+0x215c>
   13278:	bl	11088 <__errno_location@plt>
   1327c:	mov	r4, r0
   13280:	ldr	r9, [r4]
   13284:	mov	r8, #1
   13288:	mov	r5, #0
   1328c:	cmp	r7, #0
   13290:	bne	131f0 <__assert_fail@plt+0x209c>
   13294:	b	131f8 <__assert_fail@plt+0x20a4>
   13298:	bl	11088 <__errno_location@plt>
   1329c:	mov	r4, r0
   132a0:	ldr	r9, [r4]
   132a4:	mov	r5, #0
   132a8:	cmp	r7, #0
   132ac:	beq	13200 <__assert_fail@plt+0x20ac>
   132b0:	mov	r0, #2
   132b4:	bl	11148 <close@plt>
   132b8:	mov	r0, #1
   132bc:	bl	11148 <close@plt>
   132c0:	mov	r5, #0
   132c4:	cmp	r8, #0
   132c8:	beq	13234 <__assert_fail@plt+0x20e0>
   132cc:	b	13210 <__assert_fail@plt+0x20bc>
   132d0:	bl	11088 <__errno_location@plt>
   132d4:	mov	r4, r0
   132d8:	ldr	r9, [r4]
   132dc:	mov	r0, #2
   132e0:	bl	11148 <close@plt>
   132e4:	mov	r5, #0
   132e8:	cmp	sl, #0
   132ec:	bne	13200 <__assert_fail@plt+0x20ac>
   132f0:	b	13208 <__assert_fail@plt+0x20b4>
   132f4:	push	{r4, r5, r6, r7, fp, lr}
   132f8:	add	fp, sp, #16
   132fc:	sub	sp, sp, #8
   13300:	mov	r4, r0
   13304:	ldr	r0, [r0, #4]
   13308:	mov	r5, r3
   1330c:	mov	r6, r2
   13310:	ldr	r1, [r4, #8]
   13314:	cmp	r1, r0
   13318:	bne	13334 <__assert_fail@plt+0x21e0>
   1331c:	ldrd	r0, [r4, #16]
   13320:	cmp	r1, r0
   13324:	bne	13334 <__assert_fail@plt+0x21e0>
   13328:	ldr	r0, [r4, #36]	; 0x24
   1332c:	cmp	r0, #0
   13330:	beq	1334c <__assert_fail@plt+0x21f8>
   13334:	mov	r0, r4
   13338:	mov	r2, r6
   1333c:	mov	r3, r5
   13340:	sub	sp, fp, #16
   13344:	pop	{r4, r5, r6, r7, fp, lr}
   13348:	b	110dc <fseeko64@plt>
   1334c:	ldr	r7, [fp, #8]
   13350:	mov	r0, r4
   13354:	bl	110b8 <fileno@plt>
   13358:	mov	r2, r6
   1335c:	mov	r3, r5
   13360:	str	r7, [sp]
   13364:	bl	10fa4 <lseek64@plt>
   13368:	and	r2, r0, r1
   1336c:	cmn	r2, #1
   13370:	beq	13390 <__assert_fail@plt+0x223c>
   13374:	strd	r0, [r4, #80]	; 0x50
   13378:	ldr	r0, [r4]
   1337c:	bic	r0, r0, #16
   13380:	str	r0, [r4]
   13384:	mov	r0, #0
   13388:	sub	sp, fp, #16
   1338c:	pop	{r4, r5, r6, r7, fp, pc}
   13390:	mvn	r0, #0
   13394:	sub	sp, fp, #16
   13398:	pop	{r4, r5, r6, r7, fp, pc}
   1339c:	mov	r1, #0
   133a0:	str	r1, [r0]
   133a4:	str	r1, [r0, #4]
   133a8:	str	r1, [r0, #8]
   133ac:	bx	lr
   133b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b4:	add	fp, sp, #28
   133b8:	sub	sp, sp, #4
   133bc:	mov	r9, r0
   133c0:	ldrb	r0, [r1]
   133c4:	tst	r0, #16
   133c8:	bne	134a0 <__assert_fail@plt+0x234c>
   133cc:	ldr	r4, [r9, #8]
   133d0:	ldr	r0, [r9]
   133d4:	mov	r5, r1
   133d8:	mov	r8, #1
   133dc:	add	sl, r4, r0
   133e0:	mov	r6, r4
   133e4:	ldmib	r5, {r0, r1}
   133e8:	cmp	r0, r1
   133ec:	bcc	1340c <__assert_fail@plt+0x22b8>
   133f0:	b	13454 <__assert_fail@plt+0x2300>
   133f4:	strb	r7, [r6], #1
   133f8:	cmp	r7, #10
   133fc:	beq	1348c <__assert_fail@plt+0x2338>
   13400:	ldmib	r5, {r0, r1}
   13404:	cmp	r0, r1
   13408:	bcs	13454 <__assert_fail@plt+0x2300>
   1340c:	add	r1, r0, #1
   13410:	str	r1, [r5, #4]
   13414:	ldrb	r7, [r0]
   13418:	cmp	r6, sl
   1341c:	bne	133f4 <__assert_fail@plt+0x22a0>
   13420:	ldr	r6, [r9]
   13424:	mov	r0, r4
   13428:	mov	r1, r9
   1342c:	mov	r2, #1
   13430:	mvn	r3, #0
   13434:	str	r8, [sp]
   13438:	bl	15f38 <__assert_fail@plt+0x4de4>
   1343c:	str	r0, [r9, #8]
   13440:	mov	r4, r0
   13444:	add	r6, r0, r6
   13448:	ldr	r0, [r9]
   1344c:	add	sl, r4, r0
   13450:	b	133f4 <__assert_fail@plt+0x22a0>
   13454:	mov	r0, r5
   13458:	bl	110e8 <__uflow@plt>
   1345c:	mov	r7, r0
   13460:	cmn	r0, #1
   13464:	bne	13418 <__assert_fail@plt+0x22c4>
   13468:	cmp	r6, r4
   1346c:	beq	134a0 <__assert_fail@plt+0x234c>
   13470:	ldrb	r0, [r5]
   13474:	tst	r0, #32
   13478:	bne	134a0 <__assert_fail@plt+0x234c>
   1347c:	ldrb	r0, [r6, #-1]
   13480:	mov	r7, #10
   13484:	cmp	r0, #10
   13488:	bne	13418 <__assert_fail@plt+0x22c4>
   1348c:	sub	r0, r6, r4
   13490:	str	r0, [r9, #4]
   13494:	mov	r0, r9
   13498:	sub	sp, fp, #28
   1349c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a0:	mov	r9, #0
   134a4:	mov	r0, r9
   134a8:	sub	sp, fp, #28
   134ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b4:	add	fp, sp, #28
   134b8:	sub	sp, sp, #4
   134bc:	mov	sl, r0
   134c0:	ldrb	r0, [r1]
   134c4:	tst	r0, #16
   134c8:	bne	135a4 <__assert_fail@plt+0x2450>
   134cc:	ldr	r4, [sl, #8]
   134d0:	ldr	r0, [sl]
   134d4:	mov	r8, r2
   134d8:	mov	r6, r1
   134dc:	add	r9, r4, r0
   134e0:	mov	r7, r4
   134e4:	ldmib	r6, {r0, r1}
   134e8:	cmp	r0, r1
   134ec:	bcc	1350c <__assert_fail@plt+0x23b8>
   134f0:	b	13558 <__assert_fail@plt+0x2404>
   134f4:	strb	r5, [r7], #1
   134f8:	cmp	r5, r8
   134fc:	beq	13590 <__assert_fail@plt+0x243c>
   13500:	ldmib	r6, {r0, r1}
   13504:	cmp	r0, r1
   13508:	bcs	13558 <__assert_fail@plt+0x2404>
   1350c:	add	r1, r0, #1
   13510:	str	r1, [r6, #4]
   13514:	ldrb	r5, [r0]
   13518:	cmp	r7, r9
   1351c:	bne	134f4 <__assert_fail@plt+0x23a0>
   13520:	ldr	r7, [sl]
   13524:	mov	r0, #1
   13528:	mov	r1, sl
   1352c:	mov	r2, #1
   13530:	mvn	r3, #0
   13534:	str	r0, [sp]
   13538:	mov	r0, r4
   1353c:	bl	15f38 <__assert_fail@plt+0x4de4>
   13540:	str	r0, [sl, #8]
   13544:	mov	r4, r0
   13548:	add	r7, r0, r7
   1354c:	ldr	r0, [sl]
   13550:	add	r9, r4, r0
   13554:	b	134f4 <__assert_fail@plt+0x23a0>
   13558:	mov	r0, r6
   1355c:	bl	110e8 <__uflow@plt>
   13560:	mov	r5, r0
   13564:	cmn	r0, #1
   13568:	bne	13518 <__assert_fail@plt+0x23c4>
   1356c:	cmp	r7, r4
   13570:	beq	135a4 <__assert_fail@plt+0x2450>
   13574:	ldrb	r0, [r6]
   13578:	tst	r0, #32
   1357c:	bne	135a4 <__assert_fail@plt+0x2450>
   13580:	ldrb	r0, [r7, #-1]
   13584:	mov	r5, r8
   13588:	cmp	r0, r8
   1358c:	bne	13518 <__assert_fail@plt+0x23c4>
   13590:	sub	r0, r7, r4
   13594:	str	r0, [sl, #4]
   13598:	mov	r0, sl
   1359c:	sub	sp, fp, #28
   135a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a4:	mov	sl, #0
   135a8:	mov	r0, sl
   135ac:	sub	sp, fp, #28
   135b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135b4:	ldr	r0, [r0, #8]
   135b8:	b	13060 <__assert_fail@plt+0x1f0c>
   135bc:	push	{r4, r5, r6, sl, fp, lr}
   135c0:	add	fp, sp, #16
   135c4:	cmp	r2, #0
   135c8:	beq	13608 <__assert_fail@plt+0x24b4>
   135cc:	mov	r4, r2
   135d0:	mov	r5, r1
   135d4:	mov	r6, r0
   135d8:	bl	1101c <__ctype_toupper_loc@plt>
   135dc:	ldr	r1, [r0]
   135e0:	ldrb	r0, [r5]
   135e4:	ldrb	r2, [r6]
   135e8:	ldr	r0, [r1, r0, lsl #2]
   135ec:	ldr	r2, [r1, r2, lsl #2]
   135f0:	subs	r0, r2, r0
   135f4:	bne	1360c <__assert_fail@plt+0x24b8>
   135f8:	add	r6, r6, #1
   135fc:	add	r5, r5, #1
   13600:	subs	r4, r4, #1
   13604:	bne	135e0 <__assert_fail@plt+0x248c>
   13608:	mov	r0, #0
   1360c:	pop	{r4, r5, r6, sl, fp, pc}
   13610:	push	{r4, sl, fp, lr}
   13614:	add	fp, sp, #8
   13618:	sub	sp, sp, #8
   1361c:	movw	r0, #32759	; 0x7ff7
   13620:	movt	r0, #1
   13624:	bl	10fec <getenv@plt>
   13628:	movw	r4, #4201	; 0x1069
   1362c:	cmp	r0, #0
   13630:	movt	r4, #3
   13634:	beq	13660 <__assert_fail@plt+0x250c>
   13638:	ldrb	r1, [r0]
   1363c:	cmp	r1, #0
   13640:	beq	13660 <__assert_fail@plt+0x250c>
   13644:	add	r1, sp, #4
   13648:	mov	r2, #10
   1364c:	bl	10ef0 <strtol@plt>
   13650:	ldr	r1, [sp, #4]
   13654:	ldrb	r1, [r1]
   13658:	cmp	r1, #0
   1365c:	moveq	r4, r0
   13660:	mov	r0, r4
   13664:	sub	sp, fp, #8
   13668:	pop	{r4, sl, fp, pc}
   1366c:	push	{r4, r5, fp, lr}
   13670:	add	fp, sp, #8
   13674:	cmp	r0, #0
   13678:	beq	1370c <__assert_fail@plt+0x25b8>
   1367c:	mov	r1, #47	; 0x2f
   13680:	mov	r4, r0
   13684:	bl	1110c <strrchr@plt>
   13688:	cmp	r0, #0
   1368c:	mov	r5, r4
   13690:	addne	r5, r0, #1
   13694:	sub	r0, r5, r4
   13698:	cmp	r0, #7
   1369c:	blt	136f0 <__assert_fail@plt+0x259c>
   136a0:	movw	r1, #32831	; 0x803f
   136a4:	sub	r0, r5, #7
   136a8:	mov	r2, #7
   136ac:	movt	r1, #1
   136b0:	bl	11130 <strncmp@plt>
   136b4:	cmp	r0, #0
   136b8:	bne	136f0 <__assert_fail@plt+0x259c>
   136bc:	movw	r1, #32839	; 0x8047
   136c0:	mov	r0, r5
   136c4:	mov	r2, #3
   136c8:	movt	r1, #1
   136cc:	bl	11130 <strncmp@plt>
   136d0:	cmp	r0, #0
   136d4:	beq	136e0 <__assert_fail@plt+0x258c>
   136d8:	mov	r4, r5
   136dc:	b	136f0 <__assert_fail@plt+0x259c>
   136e0:	movw	r0, #37192	; 0x9148
   136e4:	add	r4, r5, #3
   136e8:	movt	r0, #2
   136ec:	str	r4, [r0]
   136f0:	movw	r0, #37196	; 0x914c
   136f4:	movt	r0, #2
   136f8:	str	r4, [r0]
   136fc:	movw	r0, #37268	; 0x9194
   13700:	movt	r0, #2
   13704:	str	r4, [r0]
   13708:	pop	{r4, r5, fp, pc}
   1370c:	movw	r0, #37208	; 0x9158
   13710:	mov	r1, #55	; 0x37
   13714:	mov	r2, #1
   13718:	movt	r0, #2
   1371c:	ldr	r3, [r0]
   13720:	movw	r0, #32775	; 0x8007
   13724:	movt	r0, #1
   13728:	bl	10f98 <fwrite@plt>
   1372c:	bl	1113c <abort@plt>
   13730:	push	{r4, r5, r6, sl, fp, lr}
   13734:	add	fp, sp, #16
   13738:	mov	r4, r0
   1373c:	movw	r0, #37272	; 0x9198
   13740:	movt	r0, #2
   13744:	cmp	r4, #0
   13748:	moveq	r4, r0
   1374c:	bl	11088 <__errno_location@plt>
   13750:	ldr	r6, [r0]
   13754:	mov	r5, r0
   13758:	mov	r0, r4
   1375c:	mov	r1, #48	; 0x30
   13760:	bl	16168 <__assert_fail@plt+0x5014>
   13764:	str	r6, [r5]
   13768:	pop	{r4, r5, r6, sl, fp, pc}
   1376c:	movw	r1, #37272	; 0x9198
   13770:	cmp	r0, #0
   13774:	movt	r1, #2
   13778:	movne	r1, r0
   1377c:	ldr	r0, [r1]
   13780:	bx	lr
   13784:	movw	r2, #37272	; 0x9198
   13788:	cmp	r0, #0
   1378c:	movt	r2, #2
   13790:	movne	r2, r0
   13794:	str	r1, [r2]
   13798:	bx	lr
   1379c:	movw	r3, #37272	; 0x9198
   137a0:	cmp	r0, #0
   137a4:	and	r2, r2, #1
   137a8:	movt	r3, #2
   137ac:	movne	r3, r0
   137b0:	ubfx	r0, r1, #5, #3
   137b4:	and	r1, r1, #31
   137b8:	add	ip, r3, r0, lsl #2
   137bc:	mov	r0, #1
   137c0:	ldr	r3, [ip, #8]
   137c4:	and	r0, r0, r3, lsr r1
   137c8:	eor	r2, r0, r2
   137cc:	eor	r1, r3, r2, lsl r1
   137d0:	str	r1, [ip, #8]
   137d4:	bx	lr
   137d8:	movw	r2, #37272	; 0x9198
   137dc:	cmp	r0, #0
   137e0:	movt	r2, #2
   137e4:	movne	r2, r0
   137e8:	ldr	r0, [r2, #4]
   137ec:	str	r1, [r2, #4]
   137f0:	bx	lr
   137f4:	push	{fp, lr}
   137f8:	mov	fp, sp
   137fc:	movw	r3, #37272	; 0x9198
   13800:	cmp	r0, #0
   13804:	movt	r3, #2
   13808:	movne	r3, r0
   1380c:	cmp	r1, #0
   13810:	mov	r0, #10
   13814:	cmpne	r2, #0
   13818:	str	r0, [r3]
   1381c:	bne	13824 <__assert_fail@plt+0x26d0>
   13820:	bl	1113c <abort@plt>
   13824:	str	r1, [r3, #40]	; 0x28
   13828:	str	r2, [r3, #44]	; 0x2c
   1382c:	pop	{fp, pc}
   13830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13834:	add	fp, sp, #28
   13838:	sub	sp, sp, #20
   1383c:	mov	r7, r0
   13840:	ldr	r0, [fp, #8]
   13844:	movw	r5, #37272	; 0x9198
   13848:	mov	r8, r3
   1384c:	mov	r9, r2
   13850:	mov	sl, r1
   13854:	movt	r5, #2
   13858:	cmp	r0, #0
   1385c:	movne	r5, r0
   13860:	bl	11088 <__errno_location@plt>
   13864:	ldr	r2, [r5, #40]	; 0x28
   13868:	ldr	r3, [r5, #44]	; 0x2c
   1386c:	mov	r4, r0
   13870:	ldm	r5, {r0, r1}
   13874:	add	r5, r5, #8
   13878:	ldr	r6, [r4]
   1387c:	stm	sp, {r0, r1, r5}
   13880:	mov	r0, r7
   13884:	mov	r1, sl
   13888:	str	r2, [sp, #12]
   1388c:	str	r3, [sp, #16]
   13890:	mov	r2, r9
   13894:	mov	r3, r8
   13898:	bl	138a8 <__assert_fail@plt+0x2754>
   1389c:	str	r6, [r4]
   138a0:	sub	sp, fp, #28
   138a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138ac:	add	fp, sp, #28
   138b0:	sub	sp, sp, #156	; 0x9c
   138b4:	str	r0, [fp, #-84]	; 0xffffffac
   138b8:	add	r0, r2, #1
   138bc:	mov	r6, r1
   138c0:	mov	r7, r3
   138c4:	str	r2, [fp, #-80]	; 0xffffffb0
   138c8:	str	r0, [sp, #80]	; 0x50
   138cc:	ldr	r0, [fp, #12]
   138d0:	and	r1, r0, #1
   138d4:	str	r1, [sp, #36]	; 0x24
   138d8:	and	r1, r0, #4
   138dc:	str	r1, [sp, #32]
   138e0:	ubfx	r8, r0, #1, #1
   138e4:	bl	10fb0 <__ctype_get_mb_cur_max@plt>
   138e8:	str	r0, [sp, #40]	; 0x28
   138ec:	ldr	r0, [fp, #24]
   138f0:	ldr	r4, [fp, #8]
   138f4:	mov	r1, #0
   138f8:	str	r1, [fp, #-52]	; 0xffffffcc
   138fc:	mov	r1, #0
   13900:	str	r1, [sp, #60]	; 0x3c
   13904:	mov	r1, #1
   13908:	str	r1, [sp, #84]	; 0x54
   1390c:	str	r0, [sp, #76]	; 0x4c
   13910:	ldr	r0, [fp, #20]
   13914:	str	r0, [sp, #72]	; 0x48
   13918:	mov	r0, #0
   1391c:	str	r0, [sp, #56]	; 0x38
   13920:	mov	r0, #0
   13924:	str	r0, [fp, #-88]	; 0xffffffa8
   13928:	mov	r0, #0
   1392c:	str	r0, [fp, #-72]	; 0xffffffb8
   13930:	mov	r0, #0
   13934:	cmp	r4, #10
   13938:	bhi	14c54 <__assert_fail@plt+0x3b00>
   1393c:	add	r1, pc, #24
   13940:	ldr	ip, [fp, #-84]	; 0xffffffac
   13944:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13948:	mov	r5, r6
   1394c:	mov	r9, #0
   13950:	mov	r2, #1
   13954:	mov	r3, #0
   13958:	ldr	pc, [r1, r4, lsl #2]
   1395c:	andeq	r3, r1, r4, lsr #20
   13960:	andeq	r3, r1, r0, ror #20
   13964:	andeq	r3, r1, r4, lsr sl
   13968:	andeq	r3, r1, ip, lsl sl
   1396c:	andeq	r3, r1, r4, asr sl
   13970:			; <UNDEFINED> instruction: 0x00013ab8
   13974:	andeq	r3, r1, r4, asr #20
   13978:	andeq	r3, r1, r0, lsr sp
   1397c:	andeq	r3, r1, r8, lsl #19
   13980:	andeq	r3, r1, r8, lsl #19
   13984:	andeq	r3, r1, r0, asr #23
   13988:	movw	r6, #32921	; 0x8099
   1398c:	mov	r0, #0
   13990:	mov	r2, #5
   13994:	movt	r6, #1
   13998:	mov	r1, r6
   1399c:	bl	10f5c <dcgettext@plt>
   139a0:	cmp	r0, r6
   139a4:	str	r0, [sp, #72]	; 0x48
   139a8:	bne	13b98 <__assert_fail@plt+0x2a44>
   139ac:	bl	17098 <__assert_fail@plt+0x5f44>
   139b0:	ldrb	r1, [r0]
   139b4:	and	r1, r1, #223	; 0xdf
   139b8:	cmp	r1, #71	; 0x47
   139bc:	beq	13b18 <__assert_fail@plt+0x29c4>
   139c0:	cmp	r1, #85	; 0x55
   139c4:	bne	13b7c <__assert_fail@plt+0x2a28>
   139c8:	ldrb	r1, [r0, #1]
   139cc:	and	r1, r1, #223	; 0xdf
   139d0:	cmp	r1, #84	; 0x54
   139d4:	bne	13b7c <__assert_fail@plt+0x2a28>
   139d8:	ldrb	r1, [r0, #2]
   139dc:	and	r1, r1, #223	; 0xdf
   139e0:	cmp	r1, #70	; 0x46
   139e4:	bne	13b7c <__assert_fail@plt+0x2a28>
   139e8:	ldrb	r1, [r0, #3]
   139ec:	cmp	r1, #45	; 0x2d
   139f0:	bne	13b7c <__assert_fail@plt+0x2a28>
   139f4:	ldrb	r1, [r0, #4]
   139f8:	cmp	r1, #56	; 0x38
   139fc:	bne	13b7c <__assert_fail@plt+0x2a28>
   13a00:	ldrb	r0, [r0, #5]
   13a04:	cmp	r0, #0
   13a08:	movw	r0, #32925	; 0x809d
   13a0c:	movt	r0, #1
   13a10:	str	r0, [sp, #72]	; 0x48
   13a14:	bne	13b7c <__assert_fail@plt+0x2a28>
   13a18:	b	13b98 <__assert_fail@plt+0x2a44>
   13a1c:	mov	r0, #1
   13a20:	b	13a60 <__assert_fail@plt+0x290c>
   13a24:	mov	r4, #0
   13a28:	mov	r9, #0
   13a2c:	mov	r2, r0
   13a30:	b	13ab0 <__assert_fail@plt+0x295c>
   13a34:	tst	r8, #1
   13a38:	bne	13a60 <__assert_fail@plt+0x290c>
   13a3c:	mov	r2, r0
   13a40:	b	13a88 <__assert_fail@plt+0x2934>
   13a44:	mov	r0, #1
   13a48:	mov	r9, #0
   13a4c:	mov	r4, #5
   13a50:	b	13acc <__assert_fail@plt+0x2978>
   13a54:	mov	r2, #1
   13a58:	tst	r8, #1
   13a5c:	beq	13a88 <__assert_fail@plt+0x2934>
   13a60:	mov	r1, #1
   13a64:	mov	r9, #0
   13a68:	mov	r4, #2
   13a6c:	mov	r2, r0
   13a70:	mov	r3, #1
   13a74:	str	r1, [fp, #-72]	; 0xffffffb8
   13a78:	movw	r1, #32923	; 0x809b
   13a7c:	movt	r1, #1
   13a80:	str	r1, [fp, #-88]	; 0xffffffa8
   13a84:	b	13d30 <__assert_fail@plt+0x2bdc>
   13a88:	cmp	r5, #0
   13a8c:	mov	r9, #1
   13a90:	mov	r4, #2
   13a94:	movne	r0, #39	; 0x27
   13a98:	strbne	r0, [ip]
   13a9c:	movw	r0, #32923	; 0x809b
   13aa0:	movt	r0, #1
   13aa4:	str	r0, [fp, #-88]	; 0xffffffa8
   13aa8:	mov	r0, #1
   13aac:	str	r0, [fp, #-72]	; 0xffffffb8
   13ab0:	mov	r3, #0
   13ab4:	b	13d30 <__assert_fail@plt+0x2bdc>
   13ab8:	mov	r4, #5
   13abc:	tst	r8, #1
   13ac0:	beq	13ae8 <__assert_fail@plt+0x2994>
   13ac4:	mov	r0, #1
   13ac8:	mov	r9, #0
   13acc:	str	r0, [fp, #-72]	; 0xffffffb8
   13ad0:	movw	r0, #32919	; 0x8097
   13ad4:	mov	r2, #1
   13ad8:	mov	r3, #1
   13adc:	movt	r0, #1
   13ae0:	str	r0, [fp, #-88]	; 0xffffffa8
   13ae4:	b	13d30 <__assert_fail@plt+0x2bdc>
   13ae8:	cmp	r5, #0
   13aec:	mov	r3, #0
   13af0:	mov	r9, #1
   13af4:	mov	r2, #1
   13af8:	movne	r0, #34	; 0x22
   13afc:	strbne	r0, [ip]
   13b00:	movw	r0, #32919	; 0x8097
   13b04:	movt	r0, #1
   13b08:	str	r0, [fp, #-88]	; 0xffffffa8
   13b0c:	mov	r0, #1
   13b10:	str	r0, [fp, #-72]	; 0xffffffb8
   13b14:	b	13d30 <__assert_fail@plt+0x2bdc>
   13b18:	ldrb	r1, [r0, #1]
   13b1c:	and	r1, r1, #223	; 0xdf
   13b20:	cmp	r1, #66	; 0x42
   13b24:	bne	13b7c <__assert_fail@plt+0x2a28>
   13b28:	ldrb	r1, [r0, #2]
   13b2c:	cmp	r1, #49	; 0x31
   13b30:	bne	13b7c <__assert_fail@plt+0x2a28>
   13b34:	ldrb	r1, [r0, #3]
   13b38:	cmp	r1, #56	; 0x38
   13b3c:	bne	13b7c <__assert_fail@plt+0x2a28>
   13b40:	ldrb	r1, [r0, #4]
   13b44:	cmp	r1, #48	; 0x30
   13b48:	bne	13b7c <__assert_fail@plt+0x2a28>
   13b4c:	ldrb	r1, [r0, #5]
   13b50:	cmp	r1, #51	; 0x33
   13b54:	bne	13b7c <__assert_fail@plt+0x2a28>
   13b58:	ldrb	r1, [r0, #6]
   13b5c:	cmp	r1, #48	; 0x30
   13b60:	bne	13b7c <__assert_fail@plt+0x2a28>
   13b64:	ldrb	r0, [r0, #7]
   13b68:	cmp	r0, #0
   13b6c:	movw	r0, #32933	; 0x80a5
   13b70:	movt	r0, #1
   13b74:	str	r0, [sp, #72]	; 0x48
   13b78:	beq	13b98 <__assert_fail@plt+0x2a44>
   13b7c:	movw	r1, #32919	; 0x8097
   13b80:	movw	r0, #32923	; 0x809b
   13b84:	cmp	r4, #9
   13b88:	movt	r1, #1
   13b8c:	movt	r0, #1
   13b90:	moveq	r0, r1
   13b94:	str	r0, [sp, #72]	; 0x48
   13b98:	movw	r6, #32923	; 0x809b
   13b9c:	mov	r0, #0
   13ba0:	mov	r2, #5
   13ba4:	movt	r6, #1
   13ba8:	mov	r1, r6
   13bac:	bl	10f5c <dcgettext@plt>
   13bb0:	cmp	r0, r6
   13bb4:	str	r0, [sp, #76]	; 0x4c
   13bb8:	beq	13c04 <__assert_fail@plt+0x2ab0>
   13bbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bc0:	mov	r9, #0
   13bc4:	tst	r8, #1
   13bc8:	bne	13d0c <__assert_fail@plt+0x2bb8>
   13bcc:	ldr	r0, [sp, #72]	; 0x48
   13bd0:	ldrb	r0, [r0]
   13bd4:	cmp	r0, #0
   13bd8:	beq	13d0c <__assert_fail@plt+0x2bb8>
   13bdc:	ldr	r1, [sp, #72]	; 0x48
   13be0:	mov	r9, #0
   13be4:	add	r1, r1, #1
   13be8:	cmp	r9, r5
   13bec:	strbcc	r0, [ip, r9]
   13bf0:	ldrb	r0, [r1, r9]
   13bf4:	add	r9, r9, #1
   13bf8:	cmp	r0, #0
   13bfc:	bne	13be8 <__assert_fail@plt+0x2a94>
   13c00:	b	13d0c <__assert_fail@plt+0x2bb8>
   13c04:	bl	17098 <__assert_fail@plt+0x5f44>
   13c08:	ldrb	r1, [r0]
   13c0c:	and	r1, r1, #223	; 0xdf
   13c10:	cmp	r1, #71	; 0x47
   13c14:	beq	13c84 <__assert_fail@plt+0x2b30>
   13c18:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c1c:	cmp	r1, #85	; 0x55
   13c20:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c24:	ldrb	r1, [r0, #1]
   13c28:	and	r1, r1, #223	; 0xdf
   13c2c:	cmp	r1, #84	; 0x54
   13c30:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c34:	ldrb	r1, [r0, #2]
   13c38:	and	r1, r1, #223	; 0xdf
   13c3c:	cmp	r1, #70	; 0x46
   13c40:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c44:	ldrb	r1, [r0, #3]
   13c48:	cmp	r1, #45	; 0x2d
   13c4c:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c50:	ldrb	r1, [r0, #4]
   13c54:	cmp	r1, #56	; 0x38
   13c58:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c5c:	ldrb	r0, [r0, #5]
   13c60:	cmp	r0, #0
   13c64:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c68:	movw	r0, #32929	; 0x80a1
   13c6c:	movt	r0, #1
   13c70:	str	r0, [sp, #76]	; 0x4c
   13c74:	mov	r9, #0
   13c78:	tst	r8, #1
   13c7c:	beq	13bcc <__assert_fail@plt+0x2a78>
   13c80:	b	13d0c <__assert_fail@plt+0x2bb8>
   13c84:	ldrb	r1, [r0, #1]
   13c88:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c8c:	and	r1, r1, #223	; 0xdf
   13c90:	cmp	r1, #66	; 0x42
   13c94:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13c98:	ldrb	r1, [r0, #2]
   13c9c:	cmp	r1, #49	; 0x31
   13ca0:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13ca4:	ldrb	r1, [r0, #3]
   13ca8:	cmp	r1, #56	; 0x38
   13cac:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13cb0:	ldrb	r1, [r0, #4]
   13cb4:	cmp	r1, #48	; 0x30
   13cb8:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13cbc:	ldrb	r1, [r0, #5]
   13cc0:	cmp	r1, #51	; 0x33
   13cc4:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13cc8:	ldrb	r1, [r0, #6]
   13ccc:	cmp	r1, #48	; 0x30
   13cd0:	bne	13ce0 <__assert_fail@plt+0x2b8c>
   13cd4:	ldrb	r0, [r0, #7]
   13cd8:	cmp	r0, #0
   13cdc:	beq	14af4 <__assert_fail@plt+0x39a0>
   13ce0:	movw	r0, #32923	; 0x809b
   13ce4:	cmp	r4, #9
   13ce8:	movt	r0, #1
   13cec:	mov	r1, r0
   13cf0:	movw	r0, #32919	; 0x8097
   13cf4:	movt	r0, #1
   13cf8:	moveq	r1, r0
   13cfc:	str	r1, [sp, #76]	; 0x4c
   13d00:	mov	r9, #0
   13d04:	tst	r8, #1
   13d08:	beq	13bcc <__assert_fail@plt+0x2a78>
   13d0c:	ldr	r6, [sp, #76]	; 0x4c
   13d10:	mov	r0, r6
   13d14:	bl	11070 <strlen@plt>
   13d18:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d1c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13d20:	str	r0, [fp, #-72]	; 0xffffffb8
   13d24:	str	r6, [fp, #-88]	; 0xffffffa8
   13d28:	mov	r2, #1
   13d2c:	mov	r3, r8
   13d30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d34:	str	r4, [fp, #-64]	; 0xffffffc0
   13d38:	mov	sl, #0
   13d3c:	str	r3, [fp, #-76]	; 0xffffffb4
   13d40:	str	r2, [sp, #88]	; 0x58
   13d44:	cmp	r0, #0
   13d48:	movwne	r0, #1
   13d4c:	and	r1, r0, r3
   13d50:	and	r1, r2, r1
   13d54:	str	r1, [sp, #48]	; 0x30
   13d58:	sub	r1, r4, #2
   13d5c:	clz	r1, r1
   13d60:	lsr	r1, r1, #5
   13d64:	and	r1, r1, r3
   13d68:	str	r1, [sp, #44]	; 0x2c
   13d6c:	subs	r1, r4, #2
   13d70:	eor	r4, r3, #1
   13d74:	movwne	r1, #1
   13d78:	str	r4, [sp, #92]	; 0x5c
   13d7c:	orr	r4, r1, r4
   13d80:	and	r1, r1, r2
   13d84:	and	r0, r0, r1
   13d88:	str	r4, [sp, #64]	; 0x40
   13d8c:	ldr	r4, [sp, #84]	; 0x54
   13d90:	str	r0, [fp, #-60]	; 0xffffffc4
   13d94:	orr	r0, r1, r3
   13d98:	ldr	r1, [fp, #16]
   13d9c:	eor	r0, r0, #1
   13da0:	clz	r1, r1
   13da4:	lsr	r1, r1, #5
   13da8:	orr	r0, r1, r0
   13dac:	str	r0, [fp, #-68]	; 0xffffffbc
   13db0:	eor	r0, r2, #1
   13db4:	str	r0, [sp, #52]	; 0x34
   13db8:	cmn	r7, #1
   13dbc:	beq	13dcc <__assert_fail@plt+0x2c78>
   13dc0:	cmp	sl, r7
   13dc4:	bne	13dd8 <__assert_fail@plt+0x2c84>
   13dc8:	b	14a6c <__assert_fail@plt+0x3918>
   13dcc:	ldrb	r0, [lr, sl]
   13dd0:	cmp	r0, #0
   13dd4:	beq	14a74 <__assert_fail@plt+0x3920>
   13dd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13ddc:	cmp	r0, #0
   13de0:	beq	13e40 <__assert_fail@plt+0x2cec>
   13de4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13de8:	mov	r6, r5
   13dec:	add	r5, sl, r0
   13df0:	cmp	r0, #2
   13df4:	bcc	13e60 <__assert_fail@plt+0x2d0c>
   13df8:	mov	r0, #0
   13dfc:	cmn	r7, #1
   13e00:	str	r0, [fp, #-56]	; 0xffffffc8
   13e04:	bne	13e1c <__assert_fail@plt+0x2cc8>
   13e08:	mov	r0, lr
   13e0c:	bl	11070 <strlen@plt>
   13e10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13e14:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e18:	mov	r7, r0
   13e1c:	cmp	r5, r7
   13e20:	bls	13e70 <__assert_fail@plt+0x2d1c>
   13e24:	mov	r0, #0
   13e28:	mov	r5, r6
   13e2c:	str	r0, [fp, #-48]	; 0xffffffd0
   13e30:	ldrb	r6, [lr, sl]
   13e34:	cmp	r6, #126	; 0x7e
   13e38:	bls	13ec0 <__assert_fail@plt+0x2d6c>
   13e3c:	b	1441c <__assert_fail@plt+0x32c8>
   13e40:	mov	r0, #0
   13e44:	str	r0, [fp, #-56]	; 0xffffffc8
   13e48:	mov	r0, #0
   13e4c:	str	r0, [fp, #-48]	; 0xffffffd0
   13e50:	ldrb	r6, [lr, sl]
   13e54:	cmp	r6, #126	; 0x7e
   13e58:	bls	13ec0 <__assert_fail@plt+0x2d6c>
   13e5c:	b	1441c <__assert_fail@plt+0x32c8>
   13e60:	mov	r0, #0
   13e64:	str	r0, [fp, #-56]	; 0xffffffc8
   13e68:	cmp	r5, r7
   13e6c:	bhi	13e24 <__assert_fail@plt+0x2cd0>
   13e70:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13e74:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13e78:	add	r0, lr, sl
   13e7c:	bl	11064 <bcmp@plt>
   13e80:	ldr	r2, [sp, #92]	; 0x5c
   13e84:	cmp	r0, #0
   13e88:	mov	r1, r0
   13e8c:	mov	r5, r6
   13e90:	movwne	r1, #1
   13e94:	orr	r1, r1, r2
   13e98:	tst	r1, #1
   13e9c:	beq	14b34 <__assert_fail@plt+0x39e0>
   13ea0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ea4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ea8:	clz	r0, r0
   13eac:	lsr	r0, r0, #5
   13eb0:	str	r0, [fp, #-48]	; 0xffffffd0
   13eb4:	ldrb	r6, [lr, sl]
   13eb8:	cmp	r6, #126	; 0x7e
   13ebc:	bhi	1441c <__assert_fail@plt+0x32c8>
   13ec0:	add	r3, pc, #16
   13ec4:	mov	r8, #1
   13ec8:	mov	r2, #110	; 0x6e
   13ecc:	mov	r0, #97	; 0x61
   13ed0:	mov	r1, #0
   13ed4:	ldr	pc, [r3, r6, lsl #2]
   13ed8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13edc:	andeq	r4, r1, ip, lsl r4
   13ee0:	andeq	r4, r1, ip, lsl r4
   13ee4:	andeq	r4, r1, ip, lsl r4
   13ee8:	andeq	r4, r1, ip, lsl r4
   13eec:	andeq	r4, r1, ip, lsl r4
   13ef0:	andeq	r4, r1, ip, lsl r4
   13ef4:	ldrdeq	r4, [r1], -r0
   13ef8:			; <UNDEFINED> instruction: 0x000141b4
   13efc:	andeq	r4, r1, ip, lsr #3
   13f00:	andeq	r4, r1, r0, asr #3
   13f04:	strdeq	r4, [r1], -r0
   13f08:	andeq	r4, r1, r4, lsr #3
   13f0c:			; <UNDEFINED> instruction: 0x000141bc
   13f10:	andeq	r4, r1, ip, lsl r4
   13f14:	andeq	r4, r1, ip, lsl r4
   13f18:	andeq	r4, r1, ip, lsl r4
   13f1c:	andeq	r4, r1, ip, lsl r4
   13f20:	andeq	r4, r1, ip, lsl r4
   13f24:	andeq	r4, r1, ip, lsl r4
   13f28:	andeq	r4, r1, ip, lsl r4
   13f2c:	andeq	r4, r1, ip, lsl r4
   13f30:	andeq	r4, r1, ip, lsl r4
   13f34:	andeq	r4, r1, ip, lsl r4
   13f38:	andeq	r4, r1, ip, lsl r4
   13f3c:	andeq	r4, r1, ip, lsl r4
   13f40:	andeq	r4, r1, ip, lsl r4
   13f44:	andeq	r4, r1, ip, lsl r4
   13f48:	andeq	r4, r1, ip, lsl r4
   13f4c:	andeq	r4, r1, ip, lsl r4
   13f50:	andeq	r4, r1, ip, lsl r4
   13f54:	andeq	r4, r1, ip, lsl r4
   13f58:	andeq	r4, r1, r8, asr #2
   13f5c:	andeq	r4, r1, ip, asr #2
   13f60:	andeq	r4, r1, ip, asr #2
   13f64:	andeq	r4, r1, ip, lsr r1
   13f68:	andeq	r4, r1, ip, asr #2
   13f6c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f70:	andeq	r4, r1, ip, asr #2
   13f74:	strdeq	r4, [r1], -r8
   13f78:	andeq	r4, r1, ip, asr #2
   13f7c:	andeq	r4, r1, ip, asr #2
   13f80:	andeq	r4, r1, ip, asr #2
   13f84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f8c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f90:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f98:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f9c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fa0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fa4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fa8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fb0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fb4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fb8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fbc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fc0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fc4:	andeq	r4, r1, ip, asr #2
   13fc8:	andeq	r4, r1, ip, asr #2
   13fcc:	andeq	r4, r1, ip, asr #2
   13fd0:	andeq	r4, r1, ip, asr #2
   13fd4:			; <UNDEFINED> instruction: 0x000142bc
   13fd8:	andeq	r4, r1, ip, lsl r4
   13fdc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fe0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fe4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fe8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ff0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ff4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ff8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ffc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14000:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14004:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14008:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1400c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14010:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14014:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14018:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1401c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14020:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14024:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14028:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1402c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14030:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14034:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14038:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1403c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14040:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14044:	andeq	r4, r1, ip, asr #2
   14048:	andeq	r4, r1, r0, lsl #3
   1404c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14050:	andeq	r4, r1, ip, asr #2
   14054:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14058:	andeq	r4, r1, ip, asr #2
   1405c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14060:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14064:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14068:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1406c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14070:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14074:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14078:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1407c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14080:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14084:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14088:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1408c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14090:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14094:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14098:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1409c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c4:	andeq	r4, r1, r4, lsl r1
   140c8:	andeq	r4, r1, ip, asr #2
   140cc:	andeq	r4, r1, r4, lsl r1
   140d0:	andeq	r4, r1, ip, lsr r1
   140d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   140d8:	tst	r0, #1
   140dc:	bne	14394 <__assert_fail@plt+0x3240>
   140e0:	ldr	r1, [fp, #16]
   140e4:	ubfx	r0, r6, #5, #3
   140e8:	mov	r2, #1
   140ec:	ldr	r0, [r1, r0, lsl #2]
   140f0:	and	r1, r6, #31
   140f4:	tst	r0, r2, lsl r1
   140f8:	beq	14394 <__assert_fail@plt+0x3240>
   140fc:	mov	r0, r6
   14100:	mov	r1, r8
   14104:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14108:	tst	r2, #1
   1410c:	beq	143b4 <__assert_fail@plt+0x3260>
   14110:	b	14b10 <__assert_fail@plt+0x39bc>
   14114:	cmp	r7, #1
   14118:	beq	1413c <__assert_fail@plt+0x2fe8>
   1411c:	mov	r8, #0
   14120:	cmn	r7, #1
   14124:	bne	14380 <__assert_fail@plt+0x322c>
   14128:	ldrb	r0, [lr, #1]
   1412c:	cmp	r0, #0
   14130:	beq	1413c <__assert_fail@plt+0x2fe8>
   14134:	mvn	r7, #0
   14138:	b	14380 <__assert_fail@plt+0x322c>
   1413c:	mov	r8, #0
   14140:	cmp	sl, #0
   14144:	bne	14380 <__assert_fail@plt+0x322c>
   14148:	mov	r1, #1
   1414c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14150:	cmp	r0, #2
   14154:	bne	1416c <__assert_fail@plt+0x3018>
   14158:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1415c:	mov	r8, r1
   14160:	tst	r0, #1
   14164:	beq	140d4 <__assert_fail@plt+0x2f80>
   14168:	b	14b10 <__assert_fail@plt+0x39bc>
   1416c:	mov	r8, r1
   14170:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14174:	tst	r0, #1
   14178:	beq	140e0 <__assert_fail@plt+0x2f8c>
   1417c:	b	14394 <__assert_fail@plt+0x3240>
   14180:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14184:	cmp	r0, #2
   14188:	bne	14448 <__assert_fail@plt+0x32f4>
   1418c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14190:	tst	r0, #1
   14194:	bne	14b10 <__assert_fail@plt+0x39bc>
   14198:	mov	r0, #0
   1419c:	str	r0, [fp, #-56]	; 0xffffffc8
   141a0:	b	14460 <__assert_fail@plt+0x330c>
   141a4:	mov	r0, #102	; 0x66
   141a8:	b	144d0 <__assert_fail@plt+0x337c>
   141ac:	mov	r2, #116	; 0x74
   141b0:	b	141c0 <__assert_fail@plt+0x306c>
   141b4:	mov	r0, #98	; 0x62
   141b8:	b	144d0 <__assert_fail@plt+0x337c>
   141bc:	mov	r2, #114	; 0x72
   141c0:	ldr	r0, [sp, #64]	; 0x40
   141c4:	tst	r0, #1
   141c8:	mov	r0, r2
   141cc:	bne	144d0 <__assert_fail@plt+0x337c>
   141d0:	b	14b10 <__assert_fail@plt+0x39bc>
   141d4:	ldr	r0, [sp, #88]	; 0x58
   141d8:	tst	r0, #1
   141dc:	beq	144f0 <__assert_fail@plt+0x339c>
   141e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   141e4:	tst	r0, #1
   141e8:	bne	14c4c <__assert_fail@plt+0x3af8>
   141ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   141f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   141f4:	subs	r0, r0, #2
   141f8:	movwne	r0, #1
   141fc:	orr	r0, r0, r1
   14200:	tst	r0, #1
   14204:	bne	14240 <__assert_fail@plt+0x30ec>
   14208:	cmp	r9, r5
   1420c:	movcc	r0, #39	; 0x27
   14210:	strbcc	r0, [ip, r9]
   14214:	add	r0, r9, #1
   14218:	cmp	r0, r5
   1421c:	movcc	r1, #36	; 0x24
   14220:	strbcc	r1, [ip, r0]
   14224:	add	r0, r9, #2
   14228:	add	r9, r9, #3
   1422c:	cmp	r0, r5
   14230:	movcc	r1, #39	; 0x27
   14234:	strbcc	r1, [ip, r0]
   14238:	mov	r0, #1
   1423c:	str	r0, [fp, #-52]	; 0xffffffcc
   14240:	mov	r1, #1
   14244:	cmp	r9, r5
   14248:	mov	r8, #0
   1424c:	mov	r6, #48	; 0x30
   14250:	str	r1, [fp, #-56]	; 0xffffffc8
   14254:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14258:	movcc	r0, #92	; 0x5c
   1425c:	strbcc	r0, [ip, r9]
   14260:	add	r0, r9, #1
   14264:	cmp	r1, #2
   14268:	beq	146bc <__assert_fail@plt+0x3568>
   1426c:	add	r1, sl, #1
   14270:	cmp	r1, r7
   14274:	bcs	146bc <__assert_fail@plt+0x3568>
   14278:	ldrb	r1, [lr, r1]
   1427c:	sub	r1, r1, #48	; 0x30
   14280:	uxtb	r1, r1
   14284:	cmp	r1, #9
   14288:	bhi	146bc <__assert_fail@plt+0x3568>
   1428c:	cmp	r0, r5
   14290:	movcc	r1, #48	; 0x30
   14294:	strbcc	r1, [ip, r0]
   14298:	add	r0, r9, #2
   1429c:	add	r9, r9, #3
   142a0:	cmp	r0, r5
   142a4:	movcc	r1, #48	; 0x30
   142a8:	strbcc	r1, [ip, r0]
   142ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142b0:	tst	r0, #1
   142b4:	beq	140e0 <__assert_fail@plt+0x2f8c>
   142b8:	b	14394 <__assert_fail@plt+0x3240>
   142bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   142c0:	mov	r6, #63	; 0x3f
   142c4:	cmp	r0, #5
   142c8:	beq	146d0 <__assert_fail@plt+0x357c>
   142cc:	mov	r1, #0
   142d0:	cmp	r0, #2
   142d4:	str	r1, [fp, #-56]	; 0xffffffc8
   142d8:	bne	14798 <__assert_fail@plt+0x3644>
   142dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142e0:	mov	r8, #0
   142e4:	tst	r0, #1
   142e8:	beq	140d4 <__assert_fail@plt+0x2f80>
   142ec:	b	14b10 <__assert_fail@plt+0x39bc>
   142f0:	mov	r0, #118	; 0x76
   142f4:	b	144d0 <__assert_fail@plt+0x337c>
   142f8:	mov	r0, #1
   142fc:	mov	r6, #39	; 0x27
   14300:	str	r0, [sp, #60]	; 0x3c
   14304:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14308:	cmp	r0, #2
   1430c:	bne	14510 <__assert_fail@plt+0x33bc>
   14310:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14314:	tst	r0, #1
   14318:	bne	14b10 <__assert_fail@plt+0x39bc>
   1431c:	ldr	r2, [sp, #56]	; 0x38
   14320:	clz	r1, r5
   14324:	mov	r8, #1
   14328:	lsr	r1, r1, #5
   1432c:	cmp	r2, #0
   14330:	mov	r0, r2
   14334:	movwne	r0, #1
   14338:	orrs	r0, r0, r1
   1433c:	moveq	r2, r5
   14340:	moveq	r5, r0
   14344:	cmp	r9, r5
   14348:	str	r2, [sp, #56]	; 0x38
   1434c:	movcc	r0, #39	; 0x27
   14350:	strbcc	r0, [ip, r9]
   14354:	add	r0, r9, #1
   14358:	cmp	r0, r5
   1435c:	movcc	r1, #92	; 0x5c
   14360:	strbcc	r1, [ip, r0]
   14364:	add	r0, r9, #2
   14368:	add	r9, r9, #3
   1436c:	cmp	r0, r5
   14370:	movcc	r1, #39	; 0x27
   14374:	strbcc	r1, [ip, r0]
   14378:	mov	r0, #0
   1437c:	str	r0, [fp, #-52]	; 0xffffffcc
   14380:	mov	r0, #0
   14384:	str	r0, [fp, #-56]	; 0xffffffc8
   14388:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1438c:	tst	r0, #1
   14390:	beq	140e0 <__assert_fail@plt+0x2f8c>
   14394:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14398:	mov	r1, r8
   1439c:	cmp	r0, #0
   143a0:	mov	r0, r6
   143a4:	beq	14468 <__assert_fail@plt+0x3314>
   143a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   143ac:	tst	r2, #1
   143b0:	bne	14b10 <__assert_fail@plt+0x39bc>
   143b4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   143b8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   143bc:	subs	r2, r2, #2
   143c0:	movwne	r2, #1
   143c4:	orr	r2, r2, r3
   143c8:	tst	r2, #1
   143cc:	bne	14408 <__assert_fail@plt+0x32b4>
   143d0:	cmp	r9, r5
   143d4:	movcc	r2, #39	; 0x27
   143d8:	strbcc	r2, [ip, r9]
   143dc:	add	r2, r9, #1
   143e0:	cmp	r2, r5
   143e4:	movcc	r3, #36	; 0x24
   143e8:	strbcc	r3, [ip, r2]
   143ec:	add	r2, r9, #2
   143f0:	add	r9, r9, #3
   143f4:	cmp	r2, r5
   143f8:	movcc	r3, #39	; 0x27
   143fc:	strbcc	r3, [ip, r2]
   14400:	mov	r2, #1
   14404:	str	r2, [fp, #-52]	; 0xffffffcc
   14408:	cmp	r9, r5
   1440c:	movcc	r2, #92	; 0x5c
   14410:	strbcc	r2, [ip, r9]
   14414:	add	r9, r9, #1
   14418:	b	144b0 <__assert_fail@plt+0x335c>
   1441c:	ldr	r0, [sp, #40]	; 0x28
   14420:	cmp	r0, #1
   14424:	bne	14524 <__assert_fail@plt+0x33d0>
   14428:	bl	1104c <__ctype_b_loc@plt>
   1442c:	ldr	r0, [r0]
   14430:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14434:	mov	r1, #1
   14438:	add	r0, r0, r6, lsl #1
   1443c:	ldrb	r0, [r0, #1]
   14440:	ubfx	r8, r0, #6, #1
   14444:	b	1487c <__assert_fail@plt+0x3728>
   14448:	ldr	r1, [sp, #48]	; 0x30
   1444c:	mov	r0, #0
   14450:	str	r0, [fp, #-56]	; 0xffffffc8
   14454:	mov	r0, #92	; 0x5c
   14458:	cmp	r1, #0
   1445c:	beq	144d0 <__assert_fail@plt+0x337c>
   14460:	mov	r6, #92	; 0x5c
   14464:	mov	r8, #0
   14468:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1446c:	cmp	r0, #0
   14470:	bne	144a8 <__assert_fail@plt+0x3354>
   14474:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14478:	tst	r0, #1
   1447c:	beq	144a8 <__assert_fail@plt+0x3354>
   14480:	cmp	r9, r5
   14484:	movcc	r0, #39	; 0x27
   14488:	strbcc	r0, [ip, r9]
   1448c:	add	r0, r9, #1
   14490:	add	r9, r9, #2
   14494:	cmp	r0, r5
   14498:	movcc	r1, #39	; 0x27
   1449c:	strbcc	r1, [ip, r0]
   144a0:	mov	r0, #0
   144a4:	str	r0, [fp, #-52]	; 0xffffffcc
   144a8:	mov	r1, r8
   144ac:	mov	r0, r6
   144b0:	cmp	r9, r5
   144b4:	and	r4, r4, r1
   144b8:	strbcc	r0, [ip, r9]
   144bc:	add	r9, r9, #1
   144c0:	add	sl, sl, #1
   144c4:	cmn	r7, #1
   144c8:	bne	13dc0 <__assert_fail@plt+0x2c6c>
   144cc:	b	13dcc <__assert_fail@plt+0x2c78>
   144d0:	mov	r1, #0
   144d4:	mov	r8, #0
   144d8:	str	r1, [fp, #-56]	; 0xffffffc8
   144dc:	ldr	r1, [sp, #88]	; 0x58
   144e0:	tst	r1, #1
   144e4:	mov	r1, #0
   144e8:	beq	140d4 <__assert_fail@plt+0x2f80>
   144ec:	b	143a8 <__assert_fail@plt+0x3254>
   144f0:	ldr	r0, [sp, #36]	; 0x24
   144f4:	mov	r6, #0
   144f8:	mov	r8, #0
   144fc:	cmp	r0, #0
   14500:	mov	r0, #0
   14504:	str	r0, [fp, #-56]	; 0xffffffc8
   14508:	bne	144c0 <__assert_fail@plt+0x336c>
   1450c:	b	140d4 <__assert_fail@plt+0x2f80>
   14510:	mov	r8, #1
   14514:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14518:	tst	r0, #1
   1451c:	beq	140e0 <__assert_fail@plt+0x2f8c>
   14520:	b	14394 <__assert_fail@plt+0x3240>
   14524:	mov	r0, #0
   14528:	cmn	r7, #1
   1452c:	str	r0, [fp, #-36]	; 0xffffffdc
   14530:	str	r0, [fp, #-40]	; 0xffffffd8
   14534:	bne	14548 <__assert_fail@plt+0x33f4>
   14538:	mov	r0, lr
   1453c:	bl	11070 <strlen@plt>
   14540:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14544:	mov	r7, r0
   14548:	ldr	r0, [sp, #44]	; 0x2c
   1454c:	str	r4, [sp, #84]	; 0x54
   14550:	str	r5, [sp, #28]
   14554:	cmp	r0, #0
   14558:	beq	147ac <__assert_fail@plt+0x3658>
   1455c:	ldr	r0, [sp, #80]	; 0x50
   14560:	mov	r8, #1
   14564:	mov	r5, #0
   14568:	add	r0, r0, sl
   1456c:	str	r0, [sp, #24]
   14570:	sub	r0, fp, #40	; 0x28
   14574:	mov	r3, r0
   14578:	b	145b4 <__assert_fail@plt+0x3460>
   1457c:	ldr	r5, [sp, #68]	; 0x44
   14580:	add	r5, r0, r5
   14584:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14588:	bl	10f8c <iswprint@plt>
   1458c:	cmp	r0, #0
   14590:	sub	r4, fp, #40	; 0x28
   14594:	movwne	r0, #1
   14598:	and	r8, r8, r0
   1459c:	mov	r0, r4
   145a0:	bl	10f44 <mbsinit@plt>
   145a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   145a8:	mov	r3, r4
   145ac:	cmp	r0, #0
   145b0:	bne	14870 <__assert_fail@plt+0x371c>
   145b4:	str	r5, [sp, #68]	; 0x44
   145b8:	add	r5, r5, sl
   145bc:	sub	r0, fp, #44	; 0x2c
   145c0:	add	r1, lr, r5
   145c4:	sub	r2, r7, r5
   145c8:	bl	170d0 <__assert_fail@plt+0x5f7c>
   145cc:	cmn	r0, #2
   145d0:	beq	14830 <__assert_fail@plt+0x36dc>
   145d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   145d8:	cmn	r0, #1
   145dc:	beq	14824 <__assert_fail@plt+0x36d0>
   145e0:	cmp	r0, #0
   145e4:	beq	14828 <__assert_fail@plt+0x36d4>
   145e8:	cmp	r0, #2
   145ec:	bcc	1457c <__assert_fail@plt+0x3428>
   145f0:	ldr	r1, [sp, #68]	; 0x44
   145f4:	ldr	r2, [sp, #24]
   145f8:	add	r1, r2, r1
   145fc:	sub	r2, r0, #1
   14600:	ldrb	r3, [r1]
   14604:	sub	r3, r3, #91	; 0x5b
   14608:	cmp	r3, #33	; 0x21
   1460c:	bls	1462c <__assert_fail@plt+0x34d8>
   14610:	add	r1, r1, #1
   14614:	subs	r2, r2, #1
   14618:	beq	1457c <__assert_fail@plt+0x3428>
   1461c:	ldrb	r3, [r1]
   14620:	sub	r3, r3, #91	; 0x5b
   14624:	cmp	r3, #33	; 0x21
   14628:	bhi	14610 <__assert_fail@plt+0x34bc>
   1462c:	add	r5, pc, #0
   14630:	ldr	pc, [r5, r3, lsl #2]
   14634:	andeq	r4, r1, r8, asr #22
   14638:	andeq	r4, r1, r8, asr #22
   1463c:	andeq	r4, r1, r0, lsl r6
   14640:	andeq	r4, r1, r8, asr #22
   14644:	andeq	r4, r1, r0, lsl r6
   14648:	andeq	r4, r1, r8, asr #22
   1464c:	andeq	r4, r1, r0, lsl r6
   14650:	andeq	r4, r1, r0, lsl r6
   14654:	andeq	r4, r1, r0, lsl r6
   14658:	andeq	r4, r1, r0, lsl r6
   1465c:	andeq	r4, r1, r0, lsl r6
   14660:	andeq	r4, r1, r0, lsl r6
   14664:	andeq	r4, r1, r0, lsl r6
   14668:	andeq	r4, r1, r0, lsl r6
   1466c:	andeq	r4, r1, r0, lsl r6
   14670:	andeq	r4, r1, r0, lsl r6
   14674:	andeq	r4, r1, r0, lsl r6
   14678:	andeq	r4, r1, r0, lsl r6
   1467c:	andeq	r4, r1, r0, lsl r6
   14680:	andeq	r4, r1, r0, lsl r6
   14684:	andeq	r4, r1, r0, lsl r6
   14688:	andeq	r4, r1, r0, lsl r6
   1468c:	andeq	r4, r1, r0, lsl r6
   14690:	andeq	r4, r1, r0, lsl r6
   14694:	andeq	r4, r1, r0, lsl r6
   14698:	andeq	r4, r1, r0, lsl r6
   1469c:	andeq	r4, r1, r0, lsl r6
   146a0:	andeq	r4, r1, r0, lsl r6
   146a4:	andeq	r4, r1, r0, lsl r6
   146a8:	andeq	r4, r1, r0, lsl r6
   146ac:	andeq	r4, r1, r0, lsl r6
   146b0:	andeq	r4, r1, r0, lsl r6
   146b4:	andeq	r4, r1, r0, lsl r6
   146b8:	andeq	r4, r1, r8, asr #22
   146bc:	mov	r9, r0
   146c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   146c4:	tst	r0, #1
   146c8:	beq	140e0 <__assert_fail@plt+0x2f8c>
   146cc:	b	14394 <__assert_fail@plt+0x3240>
   146d0:	mov	r0, #0
   146d4:	str	r0, [fp, #-56]	; 0xffffffc8
   146d8:	ldr	r0, [sp, #32]
   146dc:	cmp	r0, #0
   146e0:	beq	14798 <__assert_fail@plt+0x3644>
   146e4:	add	r0, sl, #2
   146e8:	mov	r1, r7
   146ec:	cmp	r0, r7
   146f0:	bcs	14798 <__assert_fail@plt+0x3644>
   146f4:	add	r1, sl, lr
   146f8:	ldrb	r1, [r1, #1]
   146fc:	cmp	r1, #63	; 0x3f
   14700:	bne	14798 <__assert_fail@plt+0x3644>
   14704:	ldrb	r8, [lr, r0]
   14708:	sub	r2, r8, #33	; 0x21
   1470c:	cmp	r2, #29
   14710:	bhi	14798 <__assert_fail@plt+0x3644>
   14714:	mov	r1, r4
   14718:	movw	r4, #20929	; 0x51c1
   1471c:	mov	r3, #1
   14720:	movt	r4, #14336	; 0x3800
   14724:	tst	r4, r3, lsl r2
   14728:	beq	14a54 <__assert_fail@plt+0x3900>
   1472c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14730:	tst	r2, #1
   14734:	bne	14b10 <__assert_fail@plt+0x39bc>
   14738:	cmp	r9, r5
   1473c:	mov	r6, r8
   14740:	mov	r4, r1
   14744:	mov	sl, r0
   14748:	mov	r8, #0
   1474c:	movcc	r2, #63	; 0x3f
   14750:	strbcc	r2, [ip, r9]
   14754:	add	r2, r9, #1
   14758:	cmp	r2, r5
   1475c:	movcc	r3, #34	; 0x22
   14760:	strbcc	r3, [ip, r2]
   14764:	add	r2, r9, #2
   14768:	cmp	r2, r5
   1476c:	movcc	r3, #34	; 0x22
   14770:	strbcc	r3, [ip, r2]
   14774:	add	r2, r9, #3
   14778:	add	r9, r9, #4
   1477c:	cmp	r2, r5
   14780:	movcc	r3, #63	; 0x3f
   14784:	strbcc	r3, [ip, r2]
   14788:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1478c:	tst	r0, #1
   14790:	beq	140e0 <__assert_fail@plt+0x2f8c>
   14794:	b	14394 <__assert_fail@plt+0x3240>
   14798:	mov	r8, #0
   1479c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   147a0:	tst	r0, #1
   147a4:	beq	140e0 <__assert_fail@plt+0x2f8c>
   147a8:	b	14394 <__assert_fail@plt+0x3240>
   147ac:	mov	r8, #1
   147b0:	mov	r5, #0
   147b4:	sub	r4, fp, #40	; 0x28
   147b8:	str	r5, [sp, #68]	; 0x44
   147bc:	add	r5, r5, sl
   147c0:	sub	r0, fp, #44	; 0x2c
   147c4:	mov	r3, r4
   147c8:	add	r1, lr, r5
   147cc:	sub	r2, r7, r5
   147d0:	bl	170d0 <__assert_fail@plt+0x5f7c>
   147d4:	cmn	r0, #2
   147d8:	beq	14830 <__assert_fail@plt+0x36dc>
   147dc:	cmn	r0, #1
   147e0:	beq	14824 <__assert_fail@plt+0x36d0>
   147e4:	ldr	r5, [sp, #68]	; 0x44
   147e8:	cmp	r0, #0
   147ec:	beq	1486c <__assert_fail@plt+0x3718>
   147f0:	add	r5, r0, r5
   147f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   147f8:	bl	10f8c <iswprint@plt>
   147fc:	cmp	r0, #0
   14800:	sub	r4, fp, #40	; 0x28
   14804:	movwne	r0, #1
   14808:	and	r8, r8, r0
   1480c:	mov	r0, r4
   14810:	bl	10f44 <mbsinit@plt>
   14814:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14818:	cmp	r0, #0
   1481c:	beq	147b8 <__assert_fail@plt+0x3664>
   14820:	b	14870 <__assert_fail@plt+0x371c>
   14824:	mov	r8, #0
   14828:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1482c:	b	14864 <__assert_fail@plt+0x3710>
   14830:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14834:	mov	r8, #0
   14838:	cmp	r5, r7
   1483c:	bcs	14864 <__assert_fail@plt+0x3710>
   14840:	ldrb	r0, [lr, r5]
   14844:	cmp	r0, #0
   14848:	beq	14864 <__assert_fail@plt+0x3710>
   1484c:	ldr	r0, [sp, #68]	; 0x44
   14850:	add	r0, r0, #1
   14854:	add	r5, r0, sl
   14858:	str	r0, [sp, #68]	; 0x44
   1485c:	cmp	r5, r7
   14860:	bcc	14840 <__assert_fail@plt+0x36ec>
   14864:	ldr	r5, [sp, #68]	; 0x44
   14868:	b	14870 <__assert_fail@plt+0x371c>
   1486c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14870:	mov	r1, r5
   14874:	ldr	r5, [sp, #28]
   14878:	ldr	r4, [sp, #84]	; 0x54
   1487c:	ldr	r0, [sp, #52]	; 0x34
   14880:	ldr	ip, [fp, #-84]	; 0xffffffac
   14884:	cmp	r1, #1
   14888:	orr	r2, r8, r0
   1488c:	mov	r0, r1
   14890:	bhi	1489c <__assert_fail@plt+0x3748>
   14894:	tst	r2, #1
   14898:	bne	140d4 <__assert_fail@plt+0x2f80>
   1489c:	add	r0, r0, sl
   148a0:	str	r2, [sp, #84]	; 0x54
   148a4:	str	r0, [fp, #-56]	; 0xffffffc8
   148a8:	mov	r0, #0
   148ac:	tst	r2, #1
   148b0:	bne	14990 <__assert_fail@plt+0x383c>
   148b4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   148b8:	tst	r1, #1
   148bc:	bne	14b10 <__assert_fail@plt+0x39bc>
   148c0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   148c4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   148c8:	subs	r2, r1, #2
   148cc:	movwne	r2, #1
   148d0:	orr	r2, r2, r0
   148d4:	tst	r2, #1
   148d8:	bne	14914 <__assert_fail@plt+0x37c0>
   148dc:	cmp	r9, r5
   148e0:	add	r2, r9, #1
   148e4:	mov	r0, #1
   148e8:	movcc	r1, #39	; 0x27
   148ec:	str	r0, [fp, #-52]	; 0xffffffcc
   148f0:	strbcc	r1, [ip, r9]
   148f4:	cmp	r2, r5
   148f8:	movcc	r1, #36	; 0x24
   148fc:	strbcc	r1, [ip, r2]
   14900:	add	r2, r9, #2
   14904:	add	r9, r9, #3
   14908:	cmp	r2, r5
   1490c:	movcc	r1, #39	; 0x27
   14910:	strbcc	r1, [ip, r2]
   14914:	cmp	r9, r5
   14918:	add	r2, r9, #1
   1491c:	movcc	r1, #92	; 0x5c
   14920:	strbcc	r1, [ip, r9]
   14924:	cmp	r2, r5
   14928:	bcs	1493c <__assert_fail@plt+0x37e8>
   1492c:	uxtb	r3, r6
   14930:	mov	r1, #48	; 0x30
   14934:	orr	r3, r1, r3, lsr #6
   14938:	strb	r3, [ip, r2]
   1493c:	add	r2, r9, #2
   14940:	add	r9, r9, #3
   14944:	cmp	r2, r5
   14948:	lsrcc	r3, r6, #3
   1494c:	movcc	r1, #6
   14950:	bficc	r3, r1, #3, #29
   14954:	mov	r1, #6
   14958:	bfi	r6, r1, #3, #29
   1495c:	strbcc	r3, [ip, r2]
   14960:	mov	r2, #1
   14964:	b	149c4 <__assert_fail@plt+0x3870>
   14968:	ldr	r1, [sp, #80]	; 0x50
   1496c:	cmp	r9, r2
   14970:	mov	r5, r2
   14974:	ldr	r2, [sp, #84]	; 0x54
   14978:	strbcc	r6, [ip, r9]
   1497c:	add	r9, r9, #1
   14980:	ldrb	r6, [r1, sl]
   14984:	mov	sl, r3
   14988:	tst	r2, #1
   1498c:	beq	148b4 <__assert_fail@plt+0x3760>
   14990:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14994:	tst	r1, #1
   14998:	beq	149b8 <__assert_fail@plt+0x3864>
   1499c:	cmp	r9, r5
   149a0:	mov	r2, r0
   149a4:	movcc	r1, #92	; 0x5c
   149a8:	strbcc	r1, [ip, r9]
   149ac:	add	r9, r9, #1
   149b0:	mov	r1, #0
   149b4:	b	149c0 <__assert_fail@plt+0x386c>
   149b8:	mov	r1, #0
   149bc:	mov	r2, r0
   149c0:	str	r1, [fp, #-48]	; 0xffffffd0
   149c4:	mov	r0, r2
   149c8:	and	r1, r2, #1
   149cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149d0:	add	r3, sl, #1
   149d4:	cmp	r2, r3
   149d8:	bls	14a38 <__assert_fail@plt+0x38e4>
   149dc:	mov	r2, r5
   149e0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   149e4:	cmp	r1, #0
   149e8:	movwne	r1, #1
   149ec:	mvn	r5, r5
   149f0:	orr	r5, r5, r1
   149f4:	tst	r5, #1
   149f8:	bne	14968 <__assert_fail@plt+0x3814>
   149fc:	cmp	r9, r2
   14a00:	movcc	r5, r4
   14a04:	movcc	r4, #39	; 0x27
   14a08:	strbcc	r4, [ip, r9]
   14a0c:	movcc	r4, r5
   14a10:	add	r5, r9, #1
   14a14:	add	r9, r9, #2
   14a18:	cmp	r5, r2
   14a1c:	movcc	r1, r4
   14a20:	movcc	r4, #39	; 0x27
   14a24:	strbcc	r4, [ip, r5]
   14a28:	movcc	r4, r1
   14a2c:	mov	r1, #0
   14a30:	str	r1, [fp, #-52]	; 0xffffffcc
   14a34:	b	14968 <__assert_fail@plt+0x3814>
   14a38:	cmp	r1, #0
   14a3c:	movwne	r1, #1
   14a40:	str	r1, [fp, #-56]	; 0xffffffc8
   14a44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a48:	cmp	r0, #0
   14a4c:	beq	14474 <__assert_fail@plt+0x3320>
   14a50:	b	144a8 <__assert_fail@plt+0x3354>
   14a54:	mov	r8, #0
   14a58:	mov	r4, r1
   14a5c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14a60:	tst	r0, #1
   14a64:	beq	140e0 <__assert_fail@plt+0x2f8c>
   14a68:	b	14394 <__assert_fail@plt+0x3240>
   14a6c:	mov	r7, sl
   14a70:	b	14a78 <__assert_fail@plt+0x3924>
   14a74:	mvn	r7, #0
   14a78:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14a7c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14a80:	ldr	r2, [sp, #88]	; 0x58
   14a84:	eor	r0, r1, #2
   14a88:	orr	r0, r0, r9
   14a8c:	clz	r0, r0
   14a90:	lsr	r0, r0, #5
   14a94:	tst	r3, r0
   14a98:	bne	14b10 <__assert_fail@plt+0x39bc>
   14a9c:	subs	r0, r1, #2
   14aa0:	movwne	r0, #1
   14aa4:	orr	r0, r3, r0
   14aa8:	tst	r0, #1
   14aac:	ldreq	r0, [sp, #60]	; 0x3c
   14ab0:	eoreq	r0, r0, #1
   14ab4:	tsteq	r0, #1
   14ab8:	bne	14bec <__assert_fail@plt+0x3a98>
   14abc:	tst	r4, #1
   14ac0:	bne	14bb0 <__assert_fail@plt+0x3a5c>
   14ac4:	ldr	r6, [sp, #56]	; 0x38
   14ac8:	mov	r8, #0
   14acc:	cmp	r6, #0
   14ad0:	beq	14be8 <__assert_fail@plt+0x3a94>
   14ad4:	mov	r1, #0
   14ad8:	mov	r4, #2
   14adc:	cmp	r5, #0
   14ae0:	mov	r0, r2
   14ae4:	mov	r3, #0
   14ae8:	str	r1, [sp, #84]	; 0x54
   14aec:	beq	13934 <__assert_fail@plt+0x27e0>
   14af0:	b	14bec <__assert_fail@plt+0x3a98>
   14af4:	movw	r0, #32937	; 0x80a9
   14af8:	movt	r0, #1
   14afc:	str	r0, [sp, #76]	; 0x4c
   14b00:	mov	r9, #0
   14b04:	tst	r8, #1
   14b08:	beq	13bcc <__assert_fail@plt+0x2a78>
   14b0c:	b	13d0c <__assert_fail@plt+0x2bb8>
   14b10:	ldr	r1, [sp, #88]	; 0x58
   14b14:	mov	r0, #2
   14b18:	tst	r1, #1
   14b1c:	movwne	r0, #4
   14b20:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14b24:	ldr	r1, [fp, #12]
   14b28:	cmp	r2, #2
   14b2c:	moveq	r2, r0
   14b30:	b	14b68 <__assert_fail@plt+0x3a14>
   14b34:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14b3c:	ldr	r1, [fp, #12]
   14b40:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14b44:	b	14b68 <__assert_fail@plt+0x3a14>
   14b48:	ldr	r1, [sp, #88]	; 0x58
   14b4c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14b50:	ldr	r5, [sp, #28]
   14b54:	mov	r0, #2
   14b58:	tst	r1, #1
   14b5c:	ldr	r1, [fp, #12]
   14b60:	movwne	r0, #4
   14b64:	mov	r2, r0
   14b68:	mov	r0, #0
   14b6c:	bic	r1, r1, #2
   14b70:	str	r2, [sp]
   14b74:	mov	r2, lr
   14b78:	str	r0, [sp, #8]
   14b7c:	ldr	r0, [sp, #72]	; 0x48
   14b80:	str	r1, [sp, #4]
   14b84:	mov	r1, r5
   14b88:	str	r0, [sp, #12]
   14b8c:	ldr	r0, [sp, #76]	; 0x4c
   14b90:	str	r0, [sp, #16]
   14b94:	mov	r0, ip
   14b98:	mov	r3, r7
   14b9c:	bl	138a8 <__assert_fail@plt+0x2754>
   14ba0:	mov	r9, r0
   14ba4:	mov	r0, r9
   14ba8:	sub	sp, fp, #28
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bb0:	mov	r0, #5
   14bb4:	ldr	r1, [sp, #56]	; 0x38
   14bb8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14bbc:	str	r0, [sp]
   14bc0:	ldr	r0, [fp, #12]
   14bc4:	str	r0, [sp, #4]
   14bc8:	ldr	r0, [fp, #16]
   14bcc:	str	r0, [sp, #8]
   14bd0:	ldr	r0, [sp, #72]	; 0x48
   14bd4:	str	r0, [sp, #12]
   14bd8:	ldr	r0, [sp, #76]	; 0x4c
   14bdc:	str	r0, [sp, #16]
   14be0:	ldr	r0, [fp, #-84]	; 0xffffffac
   14be4:	b	14b98 <__assert_fail@plt+0x3a44>
   14be8:	mov	r3, #0
   14bec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14bf0:	cmp	r1, #0
   14bf4:	beq	14c30 <__assert_fail@plt+0x3adc>
   14bf8:	ldr	r2, [fp, #-84]	; 0xffffffac
   14bfc:	tst	r3, #1
   14c00:	bne	14c34 <__assert_fail@plt+0x3ae0>
   14c04:	ldrb	r0, [r1]
   14c08:	cmp	r0, #0
   14c0c:	beq	14c34 <__assert_fail@plt+0x3ae0>
   14c10:	add	r1, r1, #1
   14c14:	cmp	r9, r5
   14c18:	strbcc	r0, [r2, r9]
   14c1c:	add	r9, r9, #1
   14c20:	ldrb	r0, [r1], #1
   14c24:	cmp	r0, #0
   14c28:	bne	14c14 <__assert_fail@plt+0x3ac0>
   14c2c:	b	14c34 <__assert_fail@plt+0x3ae0>
   14c30:	ldr	r2, [fp, #-84]	; 0xffffffac
   14c34:	cmp	r9, r5
   14c38:	movcc	r0, #0
   14c3c:	strbcc	r0, [r2, r9]
   14c40:	mov	r0, r9
   14c44:	sub	sp, fp, #28
   14c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c4c:	mov	r0, #4
   14c50:	b	14b20 <__assert_fail@plt+0x39cc>
   14c54:	bl	1113c <abort@plt>
   14c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c5c:	add	fp, sp, #28
   14c60:	sub	sp, sp, #28
   14c64:	movw	r5, #37272	; 0x9198
   14c68:	cmp	r2, #0
   14c6c:	mov	r4, r1
   14c70:	mov	r7, r0
   14c74:	str	r0, [sp, #20]
   14c78:	movt	r5, #2
   14c7c:	movne	r5, r2
   14c80:	bl	11088 <__errno_location@plt>
   14c84:	mov	sl, r0
   14c88:	ldr	r2, [r5, #40]	; 0x28
   14c8c:	ldr	r3, [r5, #44]	; 0x2c
   14c90:	ldm	r5, {r0, r1}
   14c94:	orr	r8, r1, #1
   14c98:	add	r9, r5, #8
   14c9c:	mov	r1, #0
   14ca0:	ldr	r6, [sl]
   14ca4:	stm	sp, {r0, r8, r9}
   14ca8:	mov	r0, #0
   14cac:	str	r2, [sp, #12]
   14cb0:	str	r3, [sp, #16]
   14cb4:	mov	r2, r7
   14cb8:	mov	r3, r4
   14cbc:	str	r6, [sp, #24]
   14cc0:	mov	r6, r4
   14cc4:	bl	138a8 <__assert_fail@plt+0x2754>
   14cc8:	add	r7, r0, #1
   14ccc:	mov	r0, r7
   14cd0:	bl	15d38 <__assert_fail@plt+0x4be4>
   14cd4:	mov	r4, r0
   14cd8:	ldr	r0, [r5]
   14cdc:	ldr	r2, [r5, #44]	; 0x2c
   14ce0:	ldr	r1, [r5, #40]	; 0x28
   14ce4:	mov	r3, r6
   14ce8:	stm	sp, {r0, r8, r9}
   14cec:	str	r2, [sp, #16]
   14cf0:	ldr	r2, [sp, #20]
   14cf4:	str	r1, [sp, #12]
   14cf8:	mov	r0, r4
   14cfc:	mov	r1, r7
   14d00:	bl	138a8 <__assert_fail@plt+0x2754>
   14d04:	ldr	r0, [sp, #24]
   14d08:	str	r0, [sl]
   14d0c:	mov	r0, r4
   14d10:	sub	sp, fp, #28
   14d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d1c:	add	fp, sp, #28
   14d20:	sub	sp, sp, #36	; 0x24
   14d24:	movw	r8, #37272	; 0x9198
   14d28:	cmp	r3, #0
   14d2c:	mov	r4, r2
   14d30:	str	r2, [sp, #24]
   14d34:	mov	r5, r1
   14d38:	mov	r6, r0
   14d3c:	str	r0, [sp, #20]
   14d40:	movt	r8, #2
   14d44:	movne	r8, r3
   14d48:	bl	11088 <__errno_location@plt>
   14d4c:	str	r0, [sp, #28]
   14d50:	ldr	r1, [r8, #40]	; 0x28
   14d54:	ldr	r2, [r8, #44]	; 0x2c
   14d58:	ldr	r7, [r0]
   14d5c:	cmp	r4, #0
   14d60:	add	sl, r8, #8
   14d64:	mov	r0, #0
   14d68:	ldm	r8, {r3, r9}
   14d6c:	orreq	r9, r9, #1
   14d70:	stm	sp, {r3, r9, sl}
   14d74:	str	r1, [sp, #12]
   14d78:	str	r2, [sp, #16]
   14d7c:	mov	r1, #0
   14d80:	mov	r2, r6
   14d84:	mov	r3, r5
   14d88:	str	r7, [sp, #32]
   14d8c:	mov	r7, r5
   14d90:	bl	138a8 <__assert_fail@plt+0x2754>
   14d94:	add	r4, r0, #1
   14d98:	mov	r5, r0
   14d9c:	mov	r0, r4
   14da0:	bl	15d38 <__assert_fail@plt+0x4be4>
   14da4:	mov	r6, r0
   14da8:	ldr	r0, [r8]
   14dac:	ldr	r2, [r8, #44]	; 0x2c
   14db0:	ldr	r1, [r8, #40]	; 0x28
   14db4:	mov	r3, r7
   14db8:	stm	sp, {r0, r9, sl}
   14dbc:	str	r2, [sp, #16]
   14dc0:	ldr	r2, [sp, #20]
   14dc4:	str	r1, [sp, #12]
   14dc8:	mov	r0, r6
   14dcc:	mov	r1, r4
   14dd0:	bl	138a8 <__assert_fail@plt+0x2754>
   14dd4:	ldr	r0, [sp, #24]
   14dd8:	ldr	r1, [sp, #32]
   14ddc:	ldr	r2, [sp, #28]
   14de0:	cmp	r0, #0
   14de4:	str	r1, [r2]
   14de8:	strne	r5, [r0]
   14dec:	mov	r0, r6
   14df0:	sub	sp, fp, #28
   14df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df8:	push	{r4, r5, r6, r7, fp, lr}
   14dfc:	add	fp, sp, #16
   14e00:	movw	r4, #37176	; 0x9138
   14e04:	movt	r4, #2
   14e08:	ldrd	r6, [r4]
   14e0c:	cmp	r7, #2
   14e10:	blt	14e3c <__assert_fail@plt+0x3ce8>
   14e14:	add	r5, r6, #12
   14e18:	mov	r7, #0
   14e1c:	ldr	r0, [r5, r7, lsl #3]
   14e20:	bl	13060 <__assert_fail@plt+0x1f0c>
   14e24:	ldr	r1, [r4, #4]
   14e28:	add	r2, r7, #2
   14e2c:	add	r0, r7, #1
   14e30:	mov	r7, r0
   14e34:	cmp	r2, r1
   14e38:	blt	14e1c <__assert_fail@plt+0x3cc8>
   14e3c:	ldr	r0, [r6, #4]
   14e40:	movw	r5, #37320	; 0x91c8
   14e44:	movt	r5, #2
   14e48:	cmp	r0, r5
   14e4c:	beq	14e60 <__assert_fail@plt+0x3d0c>
   14e50:	bl	13060 <__assert_fail@plt+0x1f0c>
   14e54:	mov	r0, #256	; 0x100
   14e58:	str	r0, [r4, #8]
   14e5c:	str	r5, [r4, #12]
   14e60:	add	r5, r4, #8
   14e64:	cmp	r6, r5
   14e68:	beq	14e78 <__assert_fail@plt+0x3d24>
   14e6c:	mov	r0, r6
   14e70:	bl	13060 <__assert_fail@plt+0x1f0c>
   14e74:	str	r5, [r4]
   14e78:	mov	r0, #1
   14e7c:	str	r0, [r4, #4]
   14e80:	pop	{r4, r5, r6, r7, fp, pc}
   14e84:	movw	r3, #37272	; 0x9198
   14e88:	mvn	r2, #0
   14e8c:	movt	r3, #2
   14e90:	b	14e94 <__assert_fail@plt+0x3d40>
   14e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e98:	add	fp, sp, #28
   14e9c:	sub	sp, sp, #44	; 0x2c
   14ea0:	mov	r7, r3
   14ea4:	str	r2, [sp, #36]	; 0x24
   14ea8:	str	r1, [sp, #32]
   14eac:	mov	r5, r0
   14eb0:	bl	11088 <__errno_location@plt>
   14eb4:	cmp	r5, #0
   14eb8:	bmi	15020 <__assert_fail@plt+0x3ecc>
   14ebc:	cmn	r5, #-2147483647	; 0x80000001
   14ec0:	beq	15020 <__assert_fail@plt+0x3ecc>
   14ec4:	movw	r8, #37176	; 0x9138
   14ec8:	mov	r4, r0
   14ecc:	ldr	r0, [r0]
   14ed0:	movt	r8, #2
   14ed4:	str	r4, [sp, #28]
   14ed8:	ldr	r1, [r8, #4]
   14edc:	ldr	r6, [r8]
   14ee0:	str	r0, [sp, #24]
   14ee4:	cmp	r1, r5
   14ee8:	ble	14ef4 <__assert_fail@plt+0x3da0>
   14eec:	mov	sl, r6
   14ef0:	b	14f5c <__assert_fail@plt+0x3e08>
   14ef4:	mov	r0, #8
   14ef8:	add	r9, r8, #8
   14efc:	str	r1, [fp, #-32]	; 0xffffffe0
   14f00:	sub	r1, r5, r1
   14f04:	mvn	r3, #-2147483648	; 0x80000000
   14f08:	str	r0, [sp]
   14f0c:	subs	r0, r6, r9
   14f10:	add	r2, r1, #1
   14f14:	sub	r1, fp, #32
   14f18:	movne	r0, r6
   14f1c:	bl	15f38 <__assert_fail@plt+0x4de4>
   14f20:	mov	sl, r0
   14f24:	cmp	r6, r9
   14f28:	str	r0, [r8]
   14f2c:	bne	14f38 <__assert_fail@plt+0x3de4>
   14f30:	ldrd	r0, [r8, #8]
   14f34:	stm	sl, {r0, r1}
   14f38:	ldr	r1, [r8, #4]
   14f3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14f40:	add	r0, sl, r1, lsl #3
   14f44:	sub	r1, r2, r1
   14f48:	lsl	r2, r1, #3
   14f4c:	mov	r1, #0
   14f50:	bl	110a0 <memset@plt>
   14f54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14f58:	str	r0, [r8, #4]
   14f5c:	mov	r9, sl
   14f60:	ldm	r7, {r0, r1}
   14f64:	orr	r8, r1, #1
   14f68:	add	r1, r7, #8
   14f6c:	ldr	r2, [r7, #40]	; 0x28
   14f70:	ldr	r3, [r7, #44]	; 0x2c
   14f74:	ldr	r6, [r9, r5, lsl #3]!
   14f78:	str	r1, [sp, #20]
   14f7c:	ldr	r4, [r9, #4]!
   14f80:	stm	sp, {r0, r8}
   14f84:	add	r0, sp, #8
   14f88:	stm	r0, {r1, r2, r3}
   14f8c:	ldr	r2, [sp, #32]
   14f90:	ldr	r3, [sp, #36]	; 0x24
   14f94:	mov	r1, r6
   14f98:	mov	r0, r4
   14f9c:	bl	138a8 <__assert_fail@plt+0x2754>
   14fa0:	cmp	r6, r0
   14fa4:	bhi	15008 <__assert_fail@plt+0x3eb4>
   14fa8:	add	r6, r0, #1
   14fac:	movw	r0, #37320	; 0x91c8
   14fb0:	movt	r0, #2
   14fb4:	str	r6, [sl, r5, lsl #3]
   14fb8:	cmp	r4, r0
   14fbc:	beq	14fc8 <__assert_fail@plt+0x3e74>
   14fc0:	mov	r0, r4
   14fc4:	bl	13060 <__assert_fail@plt+0x1f0c>
   14fc8:	mov	r0, r6
   14fcc:	bl	15d38 <__assert_fail@plt+0x4be4>
   14fd0:	str	r0, [r9]
   14fd4:	mov	r4, r0
   14fd8:	add	r3, sp, #8
   14fdc:	ldr	r0, [r7]
   14fe0:	ldr	r1, [r7, #40]	; 0x28
   14fe4:	ldr	r2, [r7, #44]	; 0x2c
   14fe8:	stm	sp, {r0, r8}
   14fec:	ldr	r0, [sp, #20]
   14ff0:	stm	r3, {r0, r1, r2}
   14ff4:	ldr	r2, [sp, #32]
   14ff8:	ldr	r3, [sp, #36]	; 0x24
   14ffc:	mov	r0, r4
   15000:	mov	r1, r6
   15004:	bl	138a8 <__assert_fail@plt+0x2754>
   15008:	ldr	r1, [sp, #24]
   1500c:	ldr	r0, [sp, #28]
   15010:	str	r1, [r0]
   15014:	mov	r0, r4
   15018:	sub	sp, fp, #28
   1501c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15020:	bl	1113c <abort@plt>
   15024:	movw	r3, #37272	; 0x9198
   15028:	movt	r3, #2
   1502c:	b	14e94 <__assert_fail@plt+0x3d40>
   15030:	movw	r3, #37272	; 0x9198
   15034:	mov	r1, r0
   15038:	mov	r0, #0
   1503c:	mvn	r2, #0
   15040:	movt	r3, #2
   15044:	b	14e94 <__assert_fail@plt+0x3d40>
   15048:	movw	r3, #37272	; 0x9198
   1504c:	mov	r2, r1
   15050:	mov	r1, r0
   15054:	mov	r0, #0
   15058:	movt	r3, #2
   1505c:	b	14e94 <__assert_fail@plt+0x3d40>
   15060:	push	{fp, lr}
   15064:	mov	fp, sp
   15068:	sub	sp, sp, #48	; 0x30
   1506c:	vmov.i32	q8, #0	; 0x00000000
   15070:	mov	ip, #32
   15074:	mov	r3, sp
   15078:	mov	lr, r2
   1507c:	cmp	r1, #10
   15080:	add	r2, r3, #16
   15084:	vst1.64	{d16-d17}, [r3], ip
   15088:	vst1.64	{d16-d17}, [r2]
   1508c:	vst1.64	{d16-d17}, [r3]
   15090:	beq	150b0 <__assert_fail@plt+0x3f5c>
   15094:	str	r1, [sp]
   15098:	mov	r3, sp
   1509c:	mov	r1, lr
   150a0:	mvn	r2, #0
   150a4:	bl	14e94 <__assert_fail@plt+0x3d40>
   150a8:	mov	sp, fp
   150ac:	pop	{fp, pc}
   150b0:	bl	1113c <abort@plt>
   150b4:	push	{r4, sl, fp, lr}
   150b8:	add	fp, sp, #8
   150bc:	sub	sp, sp, #48	; 0x30
   150c0:	vmov.i32	q8, #0	; 0x00000000
   150c4:	mov	ip, r3
   150c8:	mov	r3, sp
   150cc:	mov	lr, #32
   150d0:	cmp	r1, #10
   150d4:	add	r4, r3, #16
   150d8:	vst1.64	{d16-d17}, [r3], lr
   150dc:	vst1.64	{d16-d17}, [r4]
   150e0:	vst1.64	{d16-d17}, [r3]
   150e4:	beq	15104 <__assert_fail@plt+0x3fb0>
   150e8:	str	r1, [sp]
   150ec:	mov	r1, r2
   150f0:	mov	r3, sp
   150f4:	mov	r2, ip
   150f8:	bl	14e94 <__assert_fail@plt+0x3d40>
   150fc:	sub	sp, fp, #8
   15100:	pop	{r4, sl, fp, pc}
   15104:	bl	1113c <abort@plt>
   15108:	push	{fp, lr}
   1510c:	mov	fp, sp
   15110:	sub	sp, sp, #48	; 0x30
   15114:	vmov.i32	q8, #0	; 0x00000000
   15118:	mov	r3, sp
   1511c:	mov	ip, #32
   15120:	cmp	r0, #10
   15124:	add	r2, r3, #16
   15128:	vst1.64	{d16-d17}, [r3], ip
   1512c:	vst1.64	{d16-d17}, [r2]
   15130:	vst1.64	{d16-d17}, [r3]
   15134:	beq	15154 <__assert_fail@plt+0x4000>
   15138:	str	r0, [sp]
   1513c:	mov	r3, sp
   15140:	mov	r0, #0
   15144:	mvn	r2, #0
   15148:	bl	14e94 <__assert_fail@plt+0x3d40>
   1514c:	mov	sp, fp
   15150:	pop	{fp, pc}
   15154:	bl	1113c <abort@plt>
   15158:	push	{fp, lr}
   1515c:	mov	fp, sp
   15160:	sub	sp, sp, #48	; 0x30
   15164:	vmov.i32	q8, #0	; 0x00000000
   15168:	mov	r3, sp
   1516c:	mov	ip, #32
   15170:	cmp	r0, #10
   15174:	add	lr, r3, #16
   15178:	vst1.64	{d16-d17}, [r3], ip
   1517c:	vst1.64	{d16-d17}, [lr]
   15180:	vst1.64	{d16-d17}, [r3]
   15184:	beq	151a0 <__assert_fail@plt+0x404c>
   15188:	str	r0, [sp]
   1518c:	mov	r3, sp
   15190:	mov	r0, #0
   15194:	bl	14e94 <__assert_fail@plt+0x3d40>
   15198:	mov	sp, fp
   1519c:	pop	{fp, pc}
   151a0:	bl	1113c <abort@plt>
   151a4:	push	{r4, sl, fp, lr}
   151a8:	add	fp, sp, #8
   151ac:	sub	sp, sp, #48	; 0x30
   151b0:	mov	lr, r0
   151b4:	movw	r0, #37272	; 0x9198
   151b8:	mov	ip, r1
   151bc:	mov	r1, #32
   151c0:	mov	r4, #1
   151c4:	movt	r0, #2
   151c8:	add	r3, r0, #16
   151cc:	vld1.64	{d16-d17}, [r0], r1
   151d0:	vld1.64	{d20-d21}, [r0]
   151d4:	vld1.64	{d18-d19}, [r3]
   151d8:	mov	r3, sp
   151dc:	add	r0, r3, #32
   151e0:	add	r1, r3, #16
   151e4:	vst1.64	{d20-d21}, [r0]
   151e8:	mov	r0, #28
   151ec:	vst1.64	{d18-d19}, [r1]
   151f0:	mov	r1, r3
   151f4:	and	r0, r0, r2, lsr #3
   151f8:	and	r2, r2, #31
   151fc:	vst1.64	{d16-d17}, [r1], r0
   15200:	ldr	r0, [r1, #8]
   15204:	bic	r4, r4, r0, lsr r2
   15208:	eor	r0, r0, r4, lsl r2
   1520c:	mov	r2, ip
   15210:	str	r0, [r1, #8]
   15214:	mov	r0, #0
   15218:	mov	r1, lr
   1521c:	bl	14e94 <__assert_fail@plt+0x3d40>
   15220:	sub	sp, fp, #8
   15224:	pop	{r4, sl, fp, pc}
   15228:	push	{fp, lr}
   1522c:	mov	fp, sp
   15230:	sub	sp, sp, #48	; 0x30
   15234:	mov	ip, r0
   15238:	movw	r0, #37272	; 0x9198
   1523c:	mov	r2, #32
   15240:	movt	r0, #2
   15244:	add	r3, r0, #16
   15248:	vld1.64	{d16-d17}, [r0], r2
   1524c:	vld1.64	{d20-d21}, [r0]
   15250:	vld1.64	{d18-d19}, [r3]
   15254:	mov	r3, sp
   15258:	add	r0, r3, #32
   1525c:	add	r2, r3, #16
   15260:	vst1.64	{d20-d21}, [r0]
   15264:	mov	r0, #28
   15268:	vst1.64	{d18-d19}, [r2]
   1526c:	mov	r2, r3
   15270:	and	r0, r0, r1, lsr #3
   15274:	and	r1, r1, #31
   15278:	vst1.64	{d16-d17}, [r2], r0
   1527c:	mov	r0, #1
   15280:	ldr	lr, [r2, #8]
   15284:	bic	r0, r0, lr, lsr r1
   15288:	eor	r0, lr, r0, lsl r1
   1528c:	mov	r1, ip
   15290:	str	r0, [r2, #8]
   15294:	mov	r0, #0
   15298:	mvn	r2, #0
   1529c:	bl	14e94 <__assert_fail@plt+0x3d40>
   152a0:	mov	sp, fp
   152a4:	pop	{fp, pc}
   152a8:	push	{fp, lr}
   152ac:	mov	fp, sp
   152b0:	sub	sp, sp, #48	; 0x30
   152b4:	mov	r1, r0
   152b8:	movw	r0, #37272	; 0x9198
   152bc:	mov	r3, #32
   152c0:	movt	r0, #2
   152c4:	add	r2, r0, #16
   152c8:	vld1.64	{d16-d17}, [r0], r3
   152cc:	mov	r3, sp
   152d0:	vld1.64	{d18-d19}, [r2]
   152d4:	vld1.64	{d20-d21}, [r0]
   152d8:	add	r2, r3, #16
   152dc:	add	r0, r3, #32
   152e0:	vst1.64	{d18-d19}, [r2]
   152e4:	vst1.64	{d20-d21}, [r0]
   152e8:	mov	r0, #12
   152ec:	mov	r2, r3
   152f0:	vst1.64	{d16-d17}, [r2], r0
   152f4:	ldr	r0, [r2]
   152f8:	orr	r0, r0, #67108864	; 0x4000000
   152fc:	str	r0, [r2]
   15300:	mov	r0, #0
   15304:	mvn	r2, #0
   15308:	bl	14e94 <__assert_fail@plt+0x3d40>
   1530c:	mov	sp, fp
   15310:	pop	{fp, pc}
   15314:	push	{fp, lr}
   15318:	mov	fp, sp
   1531c:	sub	sp, sp, #48	; 0x30
   15320:	mov	ip, r1
   15324:	mov	r1, r0
   15328:	movw	r0, #37272	; 0x9198
   1532c:	mov	r2, #32
   15330:	movt	r0, #2
   15334:	add	r3, r0, #16
   15338:	vld1.64	{d16-d17}, [r0], r2
   1533c:	vld1.64	{d18-d19}, [r3]
   15340:	vld1.64	{d20-d21}, [r0]
   15344:	mov	r3, sp
   15348:	add	r2, r3, #16
   1534c:	add	r0, r3, #32
   15350:	vst1.64	{d18-d19}, [r2]
   15354:	vst1.64	{d20-d21}, [r0]
   15358:	mov	r0, #12
   1535c:	mov	r2, r3
   15360:	vst1.64	{d16-d17}, [r2], r0
   15364:	ldr	r0, [r2]
   15368:	orr	r0, r0, #67108864	; 0x4000000
   1536c:	str	r0, [r2]
   15370:	mov	r0, #0
   15374:	mov	r2, ip
   15378:	bl	14e94 <__assert_fail@plt+0x3d40>
   1537c:	mov	sp, fp
   15380:	pop	{fp, pc}
   15384:	push	{r4, sl, fp, lr}
   15388:	add	fp, sp, #8
   1538c:	sub	sp, sp, #96	; 0x60
   15390:	vmov.i32	q8, #0	; 0x00000000
   15394:	mov	ip, r2
   15398:	mov	r2, sp
   1539c:	mov	r4, #28
   153a0:	cmp	r1, #10
   153a4:	mov	r3, r2
   153a8:	add	lr, r2, #16
   153ac:	vst1.64	{d16-d17}, [r3], r4
   153b0:	vst1.64	{d16-d17}, [lr]
   153b4:	vst1.32	{d16-d17}, [r3]
   153b8:	beq	15408 <__assert_fail@plt+0x42b4>
   153bc:	vld1.64	{d16-d17}, [r2], r4
   153c0:	vld1.64	{d18-d19}, [lr]
   153c4:	add	r3, sp, #48	; 0x30
   153c8:	vld1.32	{d20-d21}, [r2]
   153cc:	add	r2, r3, #20
   153d0:	add	r4, r3, #4
   153d4:	vst1.32	{d18-d19}, [r2]
   153d8:	add	r2, r3, #32
   153dc:	vst1.32	{d16-d17}, [r4]
   153e0:	vst1.32	{d20-d21}, [r2]
   153e4:	str	r1, [sp, #48]	; 0x30
   153e8:	mvn	r2, #0
   153ec:	ldr	r1, [sp, #60]	; 0x3c
   153f0:	orr	r1, r1, #67108864	; 0x4000000
   153f4:	str	r1, [sp, #60]	; 0x3c
   153f8:	mov	r1, ip
   153fc:	bl	14e94 <__assert_fail@plt+0x3d40>
   15400:	sub	sp, fp, #8
   15404:	pop	{r4, sl, fp, pc}
   15408:	bl	1113c <abort@plt>
   1540c:	push	{r4, r5, r6, sl, fp, lr}
   15410:	add	fp, sp, #16
   15414:	sub	sp, sp, #48	; 0x30
   15418:	mov	ip, r3
   1541c:	movw	r3, #37272	; 0x9198
   15420:	mov	r6, #32
   15424:	cmp	r1, #0
   15428:	mov	r4, sp
   1542c:	movt	r3, #2
   15430:	cmpne	r2, #0
   15434:	add	r5, r4, #16
   15438:	add	lr, r3, #16
   1543c:	vld1.64	{d16-d17}, [r3], r6
   15440:	vld1.64	{d18-d19}, [lr]
   15444:	vld1.64	{d20-d21}, [r3]
   15448:	mov	r3, #10
   1544c:	vst1.64	{d16-d17}, [r4], r6
   15450:	vst1.64	{d18-d19}, [r5]
   15454:	vst1.64	{d20-d21}, [r4]
   15458:	str	r3, [sp]
   1545c:	bne	15464 <__assert_fail@plt+0x4310>
   15460:	bl	1113c <abort@plt>
   15464:	str	r2, [sp, #44]	; 0x2c
   15468:	str	r1, [sp, #40]	; 0x28
   1546c:	mov	r3, sp
   15470:	mov	r1, ip
   15474:	mvn	r2, #0
   15478:	bl	14e94 <__assert_fail@plt+0x3d40>
   1547c:	sub	sp, fp, #16
   15480:	pop	{r4, r5, r6, sl, fp, pc}
   15484:	push	{r4, r5, r6, sl, fp, lr}
   15488:	add	fp, sp, #16
   1548c:	sub	sp, sp, #48	; 0x30
   15490:	mov	lr, r3
   15494:	movw	r3, #37272	; 0x9198
   15498:	mov	r6, #32
   1549c:	cmp	r1, #0
   154a0:	mov	r4, sp
   154a4:	movt	r3, #2
   154a8:	cmpne	r2, #0
   154ac:	add	r5, r4, #16
   154b0:	add	ip, r3, #16
   154b4:	vld1.64	{d16-d17}, [r3], r6
   154b8:	vld1.64	{d18-d19}, [ip]
   154bc:	vld1.64	{d20-d21}, [r3]
   154c0:	mov	r3, #10
   154c4:	vst1.64	{d16-d17}, [r4], r6
   154c8:	vst1.64	{d18-d19}, [r5]
   154cc:	vst1.64	{d20-d21}, [r4]
   154d0:	str	r3, [sp]
   154d4:	bne	154dc <__assert_fail@plt+0x4388>
   154d8:	bl	1113c <abort@plt>
   154dc:	ldr	ip, [fp, #8]
   154e0:	str	r2, [sp, #44]	; 0x2c
   154e4:	str	r1, [sp, #40]	; 0x28
   154e8:	mov	r3, sp
   154ec:	mov	r1, lr
   154f0:	mov	r2, ip
   154f4:	bl	14e94 <__assert_fail@plt+0x3d40>
   154f8:	sub	sp, fp, #16
   154fc:	pop	{r4, r5, r6, sl, fp, pc}
   15500:	push	{r4, sl, fp, lr}
   15504:	add	fp, sp, #8
   15508:	sub	sp, sp, #48	; 0x30
   1550c:	movw	r3, #37272	; 0x9198
   15510:	mov	lr, #32
   15514:	mov	ip, r2
   15518:	cmp	r0, #0
   1551c:	movt	r3, #2
   15520:	cmpne	r1, #0
   15524:	add	r2, r3, #16
   15528:	vld1.64	{d16-d17}, [r3], lr
   1552c:	vld1.64	{d20-d21}, [r3]
   15530:	vld1.64	{d18-d19}, [r2]
   15534:	mov	r2, sp
   15538:	add	r4, r2, #16
   1553c:	vst1.64	{d16-d17}, [r2], lr
   15540:	vst1.64	{d20-d21}, [r2]
   15544:	mov	r2, #10
   15548:	vst1.64	{d18-d19}, [r4]
   1554c:	str	r2, [sp]
   15550:	bne	15558 <__assert_fail@plt+0x4404>
   15554:	bl	1113c <abort@plt>
   15558:	str	r1, [sp, #44]	; 0x2c
   1555c:	str	r0, [sp, #40]	; 0x28
   15560:	mov	r3, sp
   15564:	mov	r0, #0
   15568:	mov	r1, ip
   1556c:	mvn	r2, #0
   15570:	bl	14e94 <__assert_fail@plt+0x3d40>
   15574:	sub	sp, fp, #8
   15578:	pop	{r4, sl, fp, pc}
   1557c:	push	{r4, r5, fp, lr}
   15580:	add	fp, sp, #8
   15584:	sub	sp, sp, #48	; 0x30
   15588:	mov	ip, r3
   1558c:	movw	r3, #37272	; 0x9198
   15590:	mov	r4, #32
   15594:	mov	lr, r2
   15598:	cmp	r0, #0
   1559c:	movt	r3, #2
   155a0:	cmpne	r1, #0
   155a4:	add	r2, r3, #16
   155a8:	vld1.64	{d16-d17}, [r3], r4
   155ac:	vld1.64	{d20-d21}, [r3]
   155b0:	vld1.64	{d18-d19}, [r2]
   155b4:	mov	r2, sp
   155b8:	add	r5, r2, #16
   155bc:	vst1.64	{d16-d17}, [r2], r4
   155c0:	vst1.64	{d20-d21}, [r2]
   155c4:	mov	r2, #10
   155c8:	vst1.64	{d18-d19}, [r5]
   155cc:	str	r2, [sp]
   155d0:	bne	155d8 <__assert_fail@plt+0x4484>
   155d4:	bl	1113c <abort@plt>
   155d8:	str	r1, [sp, #44]	; 0x2c
   155dc:	str	r0, [sp, #40]	; 0x28
   155e0:	mov	r3, sp
   155e4:	mov	r0, #0
   155e8:	mov	r1, lr
   155ec:	mov	r2, ip
   155f0:	bl	14e94 <__assert_fail@plt+0x3d40>
   155f4:	sub	sp, fp, #8
   155f8:	pop	{r4, r5, fp, pc}
   155fc:	movw	r3, #37128	; 0x9108
   15600:	movt	r3, #2
   15604:	b	14e94 <__assert_fail@plt+0x3d40>
   15608:	movw	r3, #37128	; 0x9108
   1560c:	mov	r2, r1
   15610:	mov	r1, r0
   15614:	mov	r0, #0
   15618:	movt	r3, #2
   1561c:	b	14e94 <__assert_fail@plt+0x3d40>
   15620:	movw	r3, #37128	; 0x9108
   15624:	mvn	r2, #0
   15628:	movt	r3, #2
   1562c:	b	14e94 <__assert_fail@plt+0x3d40>
   15630:	movw	r3, #37128	; 0x9108
   15634:	mov	r1, r0
   15638:	mov	r0, #0
   1563c:	mvn	r2, #0
   15640:	movt	r3, #2
   15644:	b	14e94 <__assert_fail@plt+0x3d40>
   15648:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1564c:	add	fp, sp, #24
   15650:	sub	sp, sp, #32
   15654:	ldr	r6, [fp, #12]
   15658:	ldr	r7, [fp, #8]
   1565c:	mov	r4, r2
   15660:	mov	r8, r0
   15664:	cmp	r1, #0
   15668:	beq	15690 <__assert_fail@plt+0x453c>
   1566c:	movw	r2, #33024	; 0x8100
   15670:	mov	r5, r1
   15674:	str	r3, [sp, #4]
   15678:	str	r4, [sp]
   1567c:	mov	r0, r8
   15680:	mov	r1, #1
   15684:	movt	r2, #1
   15688:	mov	r3, r5
   1568c:	b	156a8 <__assert_fail@plt+0x4554>
   15690:	movw	r2, #33036	; 0x810c
   15694:	str	r3, [sp]
   15698:	mov	r0, r8
   1569c:	mov	r1, #1
   156a0:	mov	r3, r4
   156a4:	movt	r2, #1
   156a8:	bl	110c4 <__fprintf_chk@plt>
   156ac:	movw	r1, #33043	; 0x8113
   156b0:	mov	r0, #0
   156b4:	mov	r2, #5
   156b8:	movt	r1, #1
   156bc:	bl	10f5c <dcgettext@plt>
   156c0:	movw	r2, #33761	; 0x83e1
   156c4:	mov	r3, r0
   156c8:	movw	r0, #2022	; 0x7e6
   156cc:	mov	r1, #1
   156d0:	movt	r2, #1
   156d4:	str	r0, [sp]
   156d8:	mov	r0, r8
   156dc:	bl	110c4 <__fprintf_chk@plt>
   156e0:	movw	r4, #32143	; 0x7d8f
   156e4:	mov	r1, r8
   156e8:	movt	r4, #1
   156ec:	mov	r0, r4
   156f0:	bl	10ecc <fputs_unlocked@plt>
   156f4:	movw	r1, #33047	; 0x8117
   156f8:	mov	r0, #0
   156fc:	mov	r2, #5
   15700:	movt	r1, #1
   15704:	bl	10f5c <dcgettext@plt>
   15708:	movw	r3, #33218	; 0x81c2
   1570c:	mov	r2, r0
   15710:	mov	r0, r8
   15714:	mov	r1, #1
   15718:	movt	r3, #1
   1571c:	bl	110c4 <__fprintf_chk@plt>
   15720:	mov	r0, r4
   15724:	mov	r1, r8
   15728:	bl	10ecc <fputs_unlocked@plt>
   1572c:	cmp	r6, #9
   15730:	bhi	1576c <__assert_fail@plt+0x4618>
   15734:	add	r0, pc, #0
   15738:	ldr	pc, [r0, r6, lsl #2]
   1573c:	andeq	r5, r1, r4, ror #14
   15740:	andeq	r5, r1, r8, ror r7
   15744:	andeq	r5, r1, r8, lsr #15
   15748:	ldrdeq	r5, [r1], -r0
   1574c:	strdeq	r5, [r1], -r8
   15750:	andeq	r5, r1, r0, lsr #16
   15754:	andeq	r5, r1, r8, asr #16
   15758:	andeq	r5, r1, r0, lsl #17
   1575c:	andeq	r5, r1, r8, lsr #18
   15760:	ldrdeq	r5, [r1], -r0
   15764:	sub	sp, fp, #24
   15768:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1576c:	movw	r1, #33571	; 0x8323
   15770:	movt	r1, #1
   15774:	b	158d8 <__assert_fail@plt+0x4784>
   15778:	movw	r1, #33252	; 0x81e4
   1577c:	mov	r0, #0
   15780:	mov	r2, #5
   15784:	movt	r1, #1
   15788:	bl	10f5c <dcgettext@plt>
   1578c:	ldr	r3, [r7]
   15790:	mov	r2, r0
   15794:	mov	r0, r8
   15798:	mov	r1, #1
   1579c:	sub	sp, fp, #24
   157a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   157a4:	b	110c4 <__fprintf_chk@plt>
   157a8:	movw	r1, #33268	; 0x81f4
   157ac:	mov	r0, #0
   157b0:	mov	r2, #5
   157b4:	movt	r1, #1
   157b8:	bl	10f5c <dcgettext@plt>
   157bc:	mov	r2, r0
   157c0:	ldr	r3, [r7]
   157c4:	ldr	r0, [r7, #4]
   157c8:	str	r0, [sp]
   157cc:	b	158bc <__assert_fail@plt+0x4768>
   157d0:	movw	r1, #33291	; 0x820b
   157d4:	mov	r0, #0
   157d8:	mov	r2, #5
   157dc:	movt	r1, #1
   157e0:	bl	10f5c <dcgettext@plt>
   157e4:	mov	r2, r0
   157e8:	ldr	r3, [r7]
   157ec:	ldmib	r7, {r0, r1}
   157f0:	stm	sp, {r0, r1}
   157f4:	b	158bc <__assert_fail@plt+0x4768>
   157f8:	movw	r1, #33319	; 0x8227
   157fc:	mov	r0, #0
   15800:	mov	r2, #5
   15804:	movt	r1, #1
   15808:	bl	10f5c <dcgettext@plt>
   1580c:	ldr	r3, [r7]
   15810:	mov	r2, r0
   15814:	ldmib	r7, {r0, r1, r7}
   15818:	stm	sp, {r0, r1, r7}
   1581c:	b	158bc <__assert_fail@plt+0x4768>
   15820:	movw	r1, #33351	; 0x8247
   15824:	mov	r0, #0
   15828:	mov	r2, #5
   1582c:	movt	r1, #1
   15830:	bl	10f5c <dcgettext@plt>
   15834:	ldr	r3, [r7]
   15838:	mov	r2, r0
   1583c:	ldmib	r7, {r0, r1, r6, r7}
   15840:	stm	sp, {r0, r1, r6, r7}
   15844:	b	158bc <__assert_fail@plt+0x4768>
   15848:	movw	r1, #33387	; 0x826b
   1584c:	mov	r0, #0
   15850:	mov	r2, #5
   15854:	movt	r1, #1
   15858:	bl	10f5c <dcgettext@plt>
   1585c:	mov	r2, r0
   15860:	ldr	r3, [r7]
   15864:	ldmib	r7, {r0, r1, r6}
   15868:	ldr	r5, [r7, #16]
   1586c:	ldr	r7, [r7, #20]
   15870:	stm	sp, {r0, r1, r6}
   15874:	str	r5, [sp, #12]
   15878:	str	r7, [sp, #16]
   1587c:	b	158bc <__assert_fail@plt+0x4768>
   15880:	movw	r1, #33427	; 0x8293
   15884:	mov	r0, #0
   15888:	mov	r2, #5
   1588c:	movt	r1, #1
   15890:	bl	10f5c <dcgettext@plt>
   15894:	mov	r2, r0
   15898:	ldr	r3, [r7]
   1589c:	ldmib	r7, {r0, r1, r6}
   158a0:	ldr	r5, [r7, #16]
   158a4:	ldr	r4, [r7, #20]
   158a8:	ldr	r7, [r7, #24]
   158ac:	stm	sp, {r0, r1, r6}
   158b0:	str	r5, [sp, #12]
   158b4:	str	r4, [sp, #16]
   158b8:	str	r7, [sp, #20]
   158bc:	mov	r0, r8
   158c0:	mov	r1, #1
   158c4:	bl	110c4 <__fprintf_chk@plt>
   158c8:	sub	sp, fp, #24
   158cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158d0:	movw	r1, #33519	; 0x82ef
   158d4:	movt	r1, #1
   158d8:	mov	r0, #0
   158dc:	mov	r2, #5
   158e0:	bl	10f5c <dcgettext@plt>
   158e4:	mov	ip, r0
   158e8:	ldr	r3, [r7]
   158ec:	ldr	r0, [r7, #4]
   158f0:	ldr	r1, [r7, #8]
   158f4:	ldr	r6, [r7, #12]
   158f8:	ldr	r5, [r7, #16]
   158fc:	ldr	r4, [r7, #20]
   15900:	ldr	r2, [r7, #24]
   15904:	ldr	lr, [r7, #28]
   15908:	ldr	r7, [r7, #32]
   1590c:	stm	sp, {r0, r1, r6}
   15910:	str	r5, [sp, #12]
   15914:	str	r4, [sp, #16]
   15918:	str	r2, [sp, #20]
   1591c:	str	lr, [sp, #24]
   15920:	str	r7, [sp, #28]
   15924:	b	1596c <__assert_fail@plt+0x4818>
   15928:	movw	r1, #33471	; 0x82bf
   1592c:	mov	r0, #0
   15930:	mov	r2, #5
   15934:	movt	r1, #1
   15938:	bl	10f5c <dcgettext@plt>
   1593c:	mov	ip, r0
   15940:	ldr	r3, [r7]
   15944:	ldmib	r7, {r0, r1, r6}
   15948:	ldr	r5, [r7, #16]
   1594c:	ldr	r4, [r7, #20]
   15950:	ldr	r2, [r7, #24]
   15954:	ldr	r7, [r7, #28]
   15958:	stm	sp, {r0, r1, r6}
   1595c:	str	r5, [sp, #12]
   15960:	str	r4, [sp, #16]
   15964:	str	r2, [sp, #20]
   15968:	str	r7, [sp, #24]
   1596c:	mov	r0, r8
   15970:	mov	r1, #1
   15974:	mov	r2, ip
   15978:	bl	110c4 <__fprintf_chk@plt>
   1597c:	sub	sp, fp, #24
   15980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15984:	push	{r4, sl, fp, lr}
   15988:	add	fp, sp, #8
   1598c:	sub	sp, sp, #8
   15990:	ldr	ip, [fp, #8]
   15994:	mov	lr, #0
   15998:	ldr	r4, [ip, lr, lsl #2]
   1599c:	add	lr, lr, #1
   159a0:	cmp	r4, #0
   159a4:	bne	15998 <__assert_fail@plt+0x4844>
   159a8:	sub	r4, lr, #1
   159ac:	str	ip, [sp]
   159b0:	str	r4, [sp, #4]
   159b4:	bl	15648 <__assert_fail@plt+0x44f4>
   159b8:	sub	sp, fp, #8
   159bc:	pop	{r4, sl, fp, pc}
   159c0:	push	{fp, lr}
   159c4:	mov	fp, sp
   159c8:	sub	sp, sp, #48	; 0x30
   159cc:	ldr	ip, [fp, #8]
   159d0:	ldr	lr, [ip]
   159d4:	cmp	lr, #0
   159d8:	str	lr, [sp, #8]
   159dc:	beq	15a78 <__assert_fail@plt+0x4924>
   159e0:	ldr	lr, [ip, #4]
   159e4:	cmp	lr, #0
   159e8:	str	lr, [sp, #12]
   159ec:	beq	15a80 <__assert_fail@plt+0x492c>
   159f0:	ldr	lr, [ip, #8]
   159f4:	cmp	lr, #0
   159f8:	str	lr, [sp, #16]
   159fc:	beq	15a88 <__assert_fail@plt+0x4934>
   15a00:	ldr	lr, [ip, #12]
   15a04:	cmp	lr, #0
   15a08:	str	lr, [sp, #20]
   15a0c:	beq	15a90 <__assert_fail@plt+0x493c>
   15a10:	ldr	lr, [ip, #16]
   15a14:	cmp	lr, #0
   15a18:	str	lr, [sp, #24]
   15a1c:	beq	15a98 <__assert_fail@plt+0x4944>
   15a20:	ldr	lr, [ip, #20]
   15a24:	cmp	lr, #0
   15a28:	str	lr, [sp, #28]
   15a2c:	beq	15aa0 <__assert_fail@plt+0x494c>
   15a30:	ldr	lr, [ip, #24]
   15a34:	cmp	lr, #0
   15a38:	str	lr, [sp, #32]
   15a3c:	beq	15aa8 <__assert_fail@plt+0x4954>
   15a40:	ldr	lr, [ip, #28]
   15a44:	cmp	lr, #0
   15a48:	str	lr, [sp, #36]	; 0x24
   15a4c:	beq	15ab0 <__assert_fail@plt+0x495c>
   15a50:	ldr	lr, [ip, #32]
   15a54:	cmp	lr, #0
   15a58:	str	lr, [sp, #40]	; 0x28
   15a5c:	beq	15ab8 <__assert_fail@plt+0x4964>
   15a60:	ldr	lr, [ip, #36]	; 0x24
   15a64:	mov	ip, #10
   15a68:	cmp	lr, #0
   15a6c:	str	lr, [sp, #44]	; 0x2c
   15a70:	movweq	ip, #9
   15a74:	b	15abc <__assert_fail@plt+0x4968>
   15a78:	mov	ip, #0
   15a7c:	b	15abc <__assert_fail@plt+0x4968>
   15a80:	mov	ip, #1
   15a84:	b	15abc <__assert_fail@plt+0x4968>
   15a88:	mov	ip, #2
   15a8c:	b	15abc <__assert_fail@plt+0x4968>
   15a90:	mov	ip, #3
   15a94:	b	15abc <__assert_fail@plt+0x4968>
   15a98:	mov	ip, #4
   15a9c:	b	15abc <__assert_fail@plt+0x4968>
   15aa0:	mov	ip, #5
   15aa4:	b	15abc <__assert_fail@plt+0x4968>
   15aa8:	mov	ip, #6
   15aac:	b	15abc <__assert_fail@plt+0x4968>
   15ab0:	mov	ip, #7
   15ab4:	b	15abc <__assert_fail@plt+0x4968>
   15ab8:	mov	ip, #8
   15abc:	add	lr, sp, #8
   15ac0:	str	ip, [sp, #4]
   15ac4:	str	lr, [sp]
   15ac8:	bl	15648 <__assert_fail@plt+0x44f4>
   15acc:	mov	sp, fp
   15ad0:	pop	{fp, pc}
   15ad4:	push	{fp, lr}
   15ad8:	mov	fp, sp
   15adc:	sub	sp, sp, #56	; 0x38
   15ae0:	add	ip, fp, #8
   15ae4:	str	ip, [sp, #12]
   15ae8:	ldr	lr, [fp, #8]
   15aec:	cmp	lr, #0
   15af0:	str	lr, [sp, #16]
   15af4:	beq	15b90 <__assert_fail@plt+0x4a3c>
   15af8:	ldr	lr, [ip, #4]
   15afc:	cmp	lr, #0
   15b00:	str	lr, [sp, #20]
   15b04:	beq	15b98 <__assert_fail@plt+0x4a44>
   15b08:	ldr	lr, [ip, #8]
   15b0c:	cmp	lr, #0
   15b10:	str	lr, [sp, #24]
   15b14:	beq	15ba0 <__assert_fail@plt+0x4a4c>
   15b18:	ldr	lr, [ip, #12]
   15b1c:	cmp	lr, #0
   15b20:	str	lr, [sp, #28]
   15b24:	beq	15ba8 <__assert_fail@plt+0x4a54>
   15b28:	ldr	lr, [ip, #16]
   15b2c:	cmp	lr, #0
   15b30:	str	lr, [sp, #32]
   15b34:	beq	15bb0 <__assert_fail@plt+0x4a5c>
   15b38:	ldr	lr, [ip, #20]
   15b3c:	cmp	lr, #0
   15b40:	str	lr, [sp, #36]	; 0x24
   15b44:	beq	15bb8 <__assert_fail@plt+0x4a64>
   15b48:	ldr	lr, [ip, #24]
   15b4c:	cmp	lr, #0
   15b50:	str	lr, [sp, #40]	; 0x28
   15b54:	beq	15bc0 <__assert_fail@plt+0x4a6c>
   15b58:	ldr	lr, [ip, #28]
   15b5c:	cmp	lr, #0
   15b60:	str	lr, [sp, #44]	; 0x2c
   15b64:	beq	15bc8 <__assert_fail@plt+0x4a74>
   15b68:	ldr	lr, [ip, #32]
   15b6c:	cmp	lr, #0
   15b70:	str	lr, [sp, #48]	; 0x30
   15b74:	beq	15bd0 <__assert_fail@plt+0x4a7c>
   15b78:	ldr	lr, [ip, #36]	; 0x24
   15b7c:	mov	ip, #10
   15b80:	cmp	lr, #0
   15b84:	str	lr, [sp, #52]	; 0x34
   15b88:	movweq	ip, #9
   15b8c:	b	15bd4 <__assert_fail@plt+0x4a80>
   15b90:	mov	ip, #0
   15b94:	b	15bd4 <__assert_fail@plt+0x4a80>
   15b98:	mov	ip, #1
   15b9c:	b	15bd4 <__assert_fail@plt+0x4a80>
   15ba0:	mov	ip, #2
   15ba4:	b	15bd4 <__assert_fail@plt+0x4a80>
   15ba8:	mov	ip, #3
   15bac:	b	15bd4 <__assert_fail@plt+0x4a80>
   15bb0:	mov	ip, #4
   15bb4:	b	15bd4 <__assert_fail@plt+0x4a80>
   15bb8:	mov	ip, #5
   15bbc:	b	15bd4 <__assert_fail@plt+0x4a80>
   15bc0:	mov	ip, #6
   15bc4:	b	15bd4 <__assert_fail@plt+0x4a80>
   15bc8:	mov	ip, #7
   15bcc:	b	15bd4 <__assert_fail@plt+0x4a80>
   15bd0:	mov	ip, #8
   15bd4:	add	lr, sp, #16
   15bd8:	str	ip, [sp, #4]
   15bdc:	str	lr, [sp]
   15be0:	bl	15648 <__assert_fail@plt+0x44f4>
   15be4:	mov	sp, fp
   15be8:	pop	{fp, pc}
   15bec:	push	{fp, lr}
   15bf0:	mov	fp, sp
   15bf4:	movw	r0, #37220	; 0x9164
   15bf8:	movt	r0, #2
   15bfc:	ldr	r1, [r0]
   15c00:	movw	r0, #32143	; 0x7d8f
   15c04:	movt	r0, #1
   15c08:	bl	10ecc <fputs_unlocked@plt>
   15c0c:	movw	r1, #33631	; 0x835f
   15c10:	mov	r0, #0
   15c14:	mov	r2, #5
   15c18:	movt	r1, #1
   15c1c:	bl	10f5c <dcgettext@plt>
   15c20:	movw	r2, #33651	; 0x8373
   15c24:	mov	r1, r0
   15c28:	mov	r0, #1
   15c2c:	movt	r2, #1
   15c30:	bl	110ac <__printf_chk@plt>
   15c34:	movw	r1, #33673	; 0x8389
   15c38:	mov	r0, #0
   15c3c:	mov	r2, #5
   15c40:	movt	r1, #1
   15c44:	bl	10f5c <dcgettext@plt>
   15c48:	movw	r2, #31548	; 0x7b3c
   15c4c:	movw	r3, #31952	; 0x7cd0
   15c50:	mov	r1, r0
   15c54:	mov	r0, #1
   15c58:	movt	r2, #1
   15c5c:	movt	r3, #1
   15c60:	bl	110ac <__printf_chk@plt>
   15c64:	movw	r1, #33693	; 0x839d
   15c68:	mov	r0, #0
   15c6c:	mov	r2, #5
   15c70:	movt	r1, #1
   15c74:	bl	10f5c <dcgettext@plt>
   15c78:	movw	r2, #33732	; 0x83c4
   15c7c:	mov	r1, r0
   15c80:	mov	r0, #1
   15c84:	movt	r2, #1
   15c88:	pop	{fp, lr}
   15c8c:	b	110ac <__printf_chk@plt>
   15c90:	push	{r4, r5, r6, sl, fp, lr}
   15c94:	add	fp, sp, #16
   15c98:	mov	r4, r2
   15c9c:	mov	r5, r1
   15ca0:	mov	r6, r0
   15ca4:	bl	17134 <__assert_fail@plt+0x5fe0>
   15ca8:	cmp	r0, #0
   15cac:	popne	{r4, r5, r6, sl, fp, pc}
   15cb0:	cmp	r6, #0
   15cb4:	beq	15cc8 <__assert_fail@plt+0x4b74>
   15cb8:	cmp	r5, #0
   15cbc:	cmpne	r4, #0
   15cc0:	bne	15cc8 <__assert_fail@plt+0x4b74>
   15cc4:	pop	{r4, r5, r6, sl, fp, pc}
   15cc8:	bl	16244 <__assert_fail@plt+0x50f0>
   15ccc:	push	{r4, r5, r6, sl, fp, lr}
   15cd0:	add	fp, sp, #16
   15cd4:	mov	r4, r2
   15cd8:	mov	r5, r1
   15cdc:	mov	r6, r0
   15ce0:	bl	17134 <__assert_fail@plt+0x5fe0>
   15ce4:	cmp	r0, #0
   15ce8:	popne	{r4, r5, r6, sl, fp, pc}
   15cec:	cmp	r6, #0
   15cf0:	beq	15d04 <__assert_fail@plt+0x4bb0>
   15cf4:	cmp	r5, #0
   15cf8:	cmpne	r4, #0
   15cfc:	bne	15d04 <__assert_fail@plt+0x4bb0>
   15d00:	pop	{r4, r5, r6, sl, fp, pc}
   15d04:	bl	16244 <__assert_fail@plt+0x50f0>
   15d08:	push	{fp, lr}
   15d0c:	mov	fp, sp
   15d10:	bl	16f90 <__assert_fail@plt+0x5e3c>
   15d14:	cmp	r0, #0
   15d18:	popne	{fp, pc}
   15d1c:	bl	16244 <__assert_fail@plt+0x50f0>
   15d20:	push	{fp, lr}
   15d24:	mov	fp, sp
   15d28:	bl	16f90 <__assert_fail@plt+0x5e3c>
   15d2c:	cmp	r0, #0
   15d30:	popne	{fp, pc}
   15d34:	bl	16244 <__assert_fail@plt+0x50f0>
   15d38:	push	{fp, lr}
   15d3c:	mov	fp, sp
   15d40:	bl	16f90 <__assert_fail@plt+0x5e3c>
   15d44:	cmp	r0, #0
   15d48:	popne	{fp, pc}
   15d4c:	bl	16244 <__assert_fail@plt+0x50f0>
   15d50:	push	{r4, r5, fp, lr}
   15d54:	add	fp, sp, #8
   15d58:	mov	r4, r1
   15d5c:	mov	r5, r0
   15d60:	bl	16fc0 <__assert_fail@plt+0x5e6c>
   15d64:	cmp	r0, #0
   15d68:	popne	{r4, r5, fp, pc}
   15d6c:	cmp	r5, #0
   15d70:	beq	15d80 <__assert_fail@plt+0x4c2c>
   15d74:	cmp	r4, #0
   15d78:	bne	15d80 <__assert_fail@plt+0x4c2c>
   15d7c:	pop	{r4, r5, fp, pc}
   15d80:	bl	16244 <__assert_fail@plt+0x50f0>
   15d84:	push	{fp, lr}
   15d88:	mov	fp, sp
   15d8c:	cmp	r1, #0
   15d90:	orreq	r1, r1, #1
   15d94:	bl	16fc0 <__assert_fail@plt+0x5e6c>
   15d98:	cmp	r0, #0
   15d9c:	popne	{fp, pc}
   15da0:	bl	16244 <__assert_fail@plt+0x50f0>
   15da4:	push	{fp, lr}
   15da8:	mov	fp, sp
   15dac:	clz	r3, r2
   15db0:	lsr	ip, r3, #5
   15db4:	clz	r3, r1
   15db8:	lsr	r3, r3, #5
   15dbc:	orrs	r3, r3, ip
   15dc0:	movwne	r1, #1
   15dc4:	movwne	r2, #1
   15dc8:	bl	17134 <__assert_fail@plt+0x5fe0>
   15dcc:	cmp	r0, #0
   15dd0:	popne	{fp, pc}
   15dd4:	bl	16244 <__assert_fail@plt+0x50f0>
   15dd8:	push	{fp, lr}
   15ddc:	mov	fp, sp
   15de0:	mov	r2, r1
   15de4:	mov	r1, r0
   15de8:	mov	r0, #0
   15dec:	bl	17134 <__assert_fail@plt+0x5fe0>
   15df0:	cmp	r0, #0
   15df4:	popne	{fp, pc}
   15df8:	bl	16244 <__assert_fail@plt+0x50f0>
   15dfc:	push	{fp, lr}
   15e00:	mov	fp, sp
   15e04:	mov	r2, r1
   15e08:	mov	r1, r0
   15e0c:	clz	r0, r2
   15e10:	clz	r3, r1
   15e14:	lsr	r0, r0, #5
   15e18:	lsr	r3, r3, #5
   15e1c:	orrs	r0, r3, r0
   15e20:	mov	r0, #0
   15e24:	movwne	r1, #1
   15e28:	movwne	r2, #1
   15e2c:	bl	17134 <__assert_fail@plt+0x5fe0>
   15e30:	cmp	r0, #0
   15e34:	popne	{fp, pc}
   15e38:	bl	16244 <__assert_fail@plt+0x50f0>
   15e3c:	push	{r4, r5, r6, sl, fp, lr}
   15e40:	add	fp, sp, #16
   15e44:	ldr	r5, [r1]
   15e48:	mov	r4, r1
   15e4c:	mov	r6, r0
   15e50:	cmp	r0, #0
   15e54:	beq	15e6c <__assert_fail@plt+0x4d18>
   15e58:	mov	r0, #1
   15e5c:	add	r0, r0, r5, lsr #1
   15e60:	adds	r5, r5, r0
   15e64:	bcc	15e74 <__assert_fail@plt+0x4d20>
   15e68:	b	15eb0 <__assert_fail@plt+0x4d5c>
   15e6c:	cmp	r5, #0
   15e70:	movweq	r5, #64	; 0x40
   15e74:	mov	r0, r6
   15e78:	mov	r1, r5
   15e7c:	mov	r2, #1
   15e80:	bl	17134 <__assert_fail@plt+0x5fe0>
   15e84:	cmp	r5, #0
   15e88:	mov	r1, r5
   15e8c:	movwne	r1, #1
   15e90:	cmp	r0, #0
   15e94:	bne	15ea8 <__assert_fail@plt+0x4d54>
   15e98:	clz	r2, r6
   15e9c:	lsr	r2, r2, #5
   15ea0:	orrs	r1, r2, r1
   15ea4:	bne	15eb0 <__assert_fail@plt+0x4d5c>
   15ea8:	str	r5, [r4]
   15eac:	pop	{r4, r5, r6, sl, fp, pc}
   15eb0:	bl	16244 <__assert_fail@plt+0x50f0>
   15eb4:	push	{r4, r5, r6, r7, fp, lr}
   15eb8:	add	fp, sp, #16
   15ebc:	ldr	r5, [r1]
   15ec0:	mov	r6, r2
   15ec4:	mov	r4, r1
   15ec8:	mov	r7, r0
   15ecc:	cmp	r0, #0
   15ed0:	beq	15ee8 <__assert_fail@plt+0x4d94>
   15ed4:	mov	r0, #1
   15ed8:	add	r0, r0, r5, lsr #1
   15edc:	adds	r5, r5, r0
   15ee0:	bcc	15f00 <__assert_fail@plt+0x4dac>
   15ee4:	b	15f34 <__assert_fail@plt+0x4de0>
   15ee8:	cmp	r5, #0
   15eec:	bne	15f00 <__assert_fail@plt+0x4dac>
   15ef0:	mov	r0, #64	; 0x40
   15ef4:	cmp	r6, #64	; 0x40
   15ef8:	udiv	r5, r0, r6
   15efc:	addhi	r5, r5, #1
   15f00:	mov	r0, r7
   15f04:	mov	r1, r5
   15f08:	mov	r2, r6
   15f0c:	bl	17134 <__assert_fail@plt+0x5fe0>
   15f10:	cmp	r0, #0
   15f14:	bne	15f2c <__assert_fail@plt+0x4dd8>
   15f18:	cmp	r7, #0
   15f1c:	beq	15f34 <__assert_fail@plt+0x4de0>
   15f20:	cmp	r6, #0
   15f24:	cmpne	r5, #0
   15f28:	bne	15f34 <__assert_fail@plt+0x4de0>
   15f2c:	str	r5, [r4]
   15f30:	pop	{r4, r5, r6, r7, fp, pc}
   15f34:	bl	16244 <__assert_fail@plt+0x50f0>
   15f38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f3c:	add	fp, sp, #24
   15f40:	mov	r8, r1
   15f44:	ldr	r1, [r1]
   15f48:	mov	r5, r0
   15f4c:	add	r0, r1, r1, asr #1
   15f50:	cmp	r0, r1
   15f54:	mvnvs	r0, #-2147483648	; 0x80000000
   15f58:	cmp	r0, r3
   15f5c:	mov	r7, r0
   15f60:	movgt	r7, r3
   15f64:	cmn	r3, #1
   15f68:	movle	r7, r0
   15f6c:	ldr	r0, [fp, #8]
   15f70:	cmn	r0, #1
   15f74:	ble	15f9c <__assert_fail@plt+0x4e48>
   15f78:	cmp	r0, #0
   15f7c:	beq	15ff0 <__assert_fail@plt+0x4e9c>
   15f80:	cmn	r7, #1
   15f84:	ble	15fc4 <__assert_fail@plt+0x4e70>
   15f88:	mvn	r4, #-2147483648	; 0x80000000
   15f8c:	udiv	r6, r4, r0
   15f90:	cmp	r6, r7
   15f94:	bge	15ff0 <__assert_fail@plt+0x4e9c>
   15f98:	b	16000 <__assert_fail@plt+0x4eac>
   15f9c:	cmn	r7, #1
   15fa0:	ble	15fe0 <__assert_fail@plt+0x4e8c>
   15fa4:	cmn	r0, #1
   15fa8:	beq	15ff0 <__assert_fail@plt+0x4e9c>
   15fac:	mov	r6, #-2147483648	; 0x80000000
   15fb0:	mvn	r4, #-2147483648	; 0x80000000
   15fb4:	sdiv	r6, r6, r0
   15fb8:	cmp	r6, r7
   15fbc:	bge	15ff0 <__assert_fail@plt+0x4e9c>
   15fc0:	b	16000 <__assert_fail@plt+0x4eac>
   15fc4:	beq	15ff0 <__assert_fail@plt+0x4e9c>
   15fc8:	mov	r6, #-2147483648	; 0x80000000
   15fcc:	mvn	r4, #-2147483648	; 0x80000000
   15fd0:	sdiv	r6, r6, r7
   15fd4:	cmp	r6, r0
   15fd8:	bge	15ff0 <__assert_fail@plt+0x4e9c>
   15fdc:	b	16000 <__assert_fail@plt+0x4eac>
   15fe0:	mvn	r4, #-2147483648	; 0x80000000
   15fe4:	sdiv	r6, r4, r0
   15fe8:	cmp	r7, r6
   15fec:	blt	16000 <__assert_fail@plt+0x4eac>
   15ff0:	mul	r6, r7, r0
   15ff4:	mov	r4, #64	; 0x40
   15ff8:	cmp	r6, #63	; 0x3f
   15ffc:	bgt	16008 <__assert_fail@plt+0x4eb4>
   16000:	sdiv	r7, r4, r0
   16004:	mul	r6, r7, r0
   16008:	cmp	r5, #0
   1600c:	moveq	r4, #0
   16010:	streq	r4, [r8]
   16014:	sub	r4, r7, r1
   16018:	cmp	r4, r2
   1601c:	bge	160c8 <__assert_fail@plt+0x4f74>
   16020:	add	r7, r1, r2
   16024:	mov	r6, #0
   16028:	mov	r2, #0
   1602c:	cmp	r7, r3
   16030:	movwgt	r6, #1
   16034:	cmn	r3, #1
   16038:	movwgt	r2, #1
   1603c:	cmp	r7, r1
   16040:	bvs	160fc <__assert_fail@plt+0x4fa8>
   16044:	ands	r1, r2, r6
   16048:	bne	160fc <__assert_fail@plt+0x4fa8>
   1604c:	cmn	r0, #1
   16050:	ble	16078 <__assert_fail@plt+0x4f24>
   16054:	cmp	r0, #0
   16058:	beq	160c4 <__assert_fail@plt+0x4f70>
   1605c:	cmn	r7, #1
   16060:	ble	1609c <__assert_fail@plt+0x4f48>
   16064:	mvn	r1, #-2147483648	; 0x80000000
   16068:	udiv	r1, r1, r0
   1606c:	cmp	r1, r7
   16070:	bge	160c4 <__assert_fail@plt+0x4f70>
   16074:	b	160fc <__assert_fail@plt+0x4fa8>
   16078:	cmn	r7, #1
   1607c:	ble	160b4 <__assert_fail@plt+0x4f60>
   16080:	cmn	r0, #1
   16084:	beq	160c4 <__assert_fail@plt+0x4f70>
   16088:	mov	r1, #-2147483648	; 0x80000000
   1608c:	sdiv	r1, r1, r0
   16090:	cmp	r1, r7
   16094:	bge	160c4 <__assert_fail@plt+0x4f70>
   16098:	b	160fc <__assert_fail@plt+0x4fa8>
   1609c:	beq	160c4 <__assert_fail@plt+0x4f70>
   160a0:	mov	r1, #-2147483648	; 0x80000000
   160a4:	sdiv	r1, r1, r7
   160a8:	cmp	r1, r0
   160ac:	bge	160c4 <__assert_fail@plt+0x4f70>
   160b0:	b	160fc <__assert_fail@plt+0x4fa8>
   160b4:	mvn	r1, #-2147483648	; 0x80000000
   160b8:	sdiv	r1, r1, r0
   160bc:	cmp	r7, r1
   160c0:	blt	160fc <__assert_fail@plt+0x4fa8>
   160c4:	mul	r6, r7, r0
   160c8:	mov	r0, r5
   160cc:	mov	r1, r6
   160d0:	bl	16fc0 <__assert_fail@plt+0x5e6c>
   160d4:	cmp	r6, #0
   160d8:	movwne	r6, #1
   160dc:	cmp	r0, #0
   160e0:	bne	160f4 <__assert_fail@plt+0x4fa0>
   160e4:	clz	r1, r5
   160e8:	lsr	r1, r1, #5
   160ec:	orrs	r1, r1, r6
   160f0:	bne	160fc <__assert_fail@plt+0x4fa8>
   160f4:	str	r7, [r8]
   160f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160fc:	bl	16244 <__assert_fail@plt+0x50f0>
   16100:	push	{fp, lr}
   16104:	mov	fp, sp
   16108:	mov	r1, #1
   1610c:	bl	16f3c <__assert_fail@plt+0x5de8>
   16110:	cmp	r0, #0
   16114:	popne	{fp, pc}
   16118:	bl	16244 <__assert_fail@plt+0x50f0>
   1611c:	push	{fp, lr}
   16120:	mov	fp, sp
   16124:	bl	16f3c <__assert_fail@plt+0x5de8>
   16128:	cmp	r0, #0
   1612c:	popne	{fp, pc}
   16130:	bl	16244 <__assert_fail@plt+0x50f0>
   16134:	push	{fp, lr}
   16138:	mov	fp, sp
   1613c:	mov	r1, #1
   16140:	bl	16f3c <__assert_fail@plt+0x5de8>
   16144:	cmp	r0, #0
   16148:	popne	{fp, pc}
   1614c:	bl	16244 <__assert_fail@plt+0x50f0>
   16150:	push	{fp, lr}
   16154:	mov	fp, sp
   16158:	bl	16f3c <__assert_fail@plt+0x5de8>
   1615c:	cmp	r0, #0
   16160:	popne	{fp, pc}
   16164:	bl	16244 <__assert_fail@plt+0x50f0>
   16168:	push	{r4, r5, fp, lr}
   1616c:	add	fp, sp, #8
   16170:	mov	r5, r0
   16174:	mov	r0, r1
   16178:	mov	r4, r1
   1617c:	bl	16f90 <__assert_fail@plt+0x5e3c>
   16180:	cmp	r0, #0
   16184:	beq	16198 <__assert_fail@plt+0x5044>
   16188:	mov	r1, r5
   1618c:	mov	r2, r4
   16190:	pop	{r4, r5, fp, lr}
   16194:	b	10f2c <memcpy@plt>
   16198:	bl	16244 <__assert_fail@plt+0x50f0>
   1619c:	push	{r4, r5, fp, lr}
   161a0:	add	fp, sp, #8
   161a4:	mov	r5, r0
   161a8:	mov	r0, r1
   161ac:	mov	r4, r1
   161b0:	bl	16f90 <__assert_fail@plt+0x5e3c>
   161b4:	cmp	r0, #0
   161b8:	beq	161cc <__assert_fail@plt+0x5078>
   161bc:	mov	r1, r5
   161c0:	mov	r2, r4
   161c4:	pop	{r4, r5, fp, lr}
   161c8:	b	10f2c <memcpy@plt>
   161cc:	bl	16244 <__assert_fail@plt+0x50f0>
   161d0:	push	{r4, r5, fp, lr}
   161d4:	add	fp, sp, #8
   161d8:	mov	r5, r0
   161dc:	add	r0, r1, #1
   161e0:	mov	r4, r1
   161e4:	bl	16f90 <__assert_fail@plt+0x5e3c>
   161e8:	cmp	r0, #0
   161ec:	beq	16208 <__assert_fail@plt+0x50b4>
   161f0:	mov	r1, #0
   161f4:	mov	r2, r4
   161f8:	strb	r1, [r0, r4]
   161fc:	mov	r1, r5
   16200:	pop	{r4, r5, fp, lr}
   16204:	b	10f2c <memcpy@plt>
   16208:	bl	16244 <__assert_fail@plt+0x50f0>
   1620c:	push	{r4, r5, fp, lr}
   16210:	add	fp, sp, #8
   16214:	mov	r4, r0
   16218:	bl	11070 <strlen@plt>
   1621c:	add	r5, r0, #1
   16220:	mov	r0, r5
   16224:	bl	16f90 <__assert_fail@plt+0x5e3c>
   16228:	cmp	r0, #0
   1622c:	beq	16240 <__assert_fail@plt+0x50ec>
   16230:	mov	r1, r4
   16234:	mov	r2, r5
   16238:	pop	{r4, r5, fp, lr}
   1623c:	b	10f2c <memcpy@plt>
   16240:	bl	16244 <__assert_fail@plt+0x50f0>
   16244:	push	{fp, lr}
   16248:	mov	fp, sp
   1624c:	movw	r0, #37120	; 0x9100
   16250:	movw	r1, #33808	; 0x8410
   16254:	mov	r2, #5
   16258:	movt	r0, #2
   1625c:	movt	r1, #1
   16260:	ldr	r4, [r0]
   16264:	mov	r0, #0
   16268:	bl	10f5c <dcgettext@plt>
   1626c:	movw	r2, #32734	; 0x7fde
   16270:	mov	r3, r0
   16274:	mov	r0, r4
   16278:	mov	r1, #0
   1627c:	movt	r2, #1
   16280:	bl	10fd4 <error@plt>
   16284:	bl	1113c <abort@plt>
   16288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1628c:	add	fp, sp, #28
   16290:	sub	sp, sp, #44	; 0x2c
   16294:	cmp	r2, #37	; 0x25
   16298:	bcs	16f1c <__assert_fail@plt+0x5dc8>
   1629c:	ldr	sl, [fp, #8]
   162a0:	mov	r6, r2
   162a4:	mov	r7, r1
   162a8:	mov	r4, r0
   162ac:	str	r3, [sp, #36]	; 0x24
   162b0:	bl	11088 <__errno_location@plt>
   162b4:	mov	r5, r0
   162b8:	mov	r0, #0
   162bc:	str	r0, [r5]
   162c0:	bl	1104c <__ctype_b_loc@plt>
   162c4:	ldr	r1, [r0]
   162c8:	mov	r2, r4
   162cc:	ldrb	r0, [r2], #1
   162d0:	add	r3, r1, r0, lsl #1
   162d4:	ldrb	r3, [r3, #1]
   162d8:	tst	r3, #32
   162dc:	bne	162cc <__assert_fail@plt+0x5178>
   162e0:	cmp	r7, #0
   162e4:	sub	r9, fp, #32
   162e8:	mov	r8, #4
   162ec:	movne	r9, r7
   162f0:	cmp	r0, #45	; 0x2d
   162f4:	beq	166b4 <__assert_fail@plt+0x5560>
   162f8:	mov	r0, r4
   162fc:	mov	r1, r9
   16300:	mov	r2, r6
   16304:	mov	r3, #0
   16308:	bl	10f38 <__strtoull_internal@plt>
   1630c:	mov	r7, r1
   16310:	ldr	r1, [r9]
   16314:	cmp	r1, r4
   16318:	beq	16350 <__assert_fail@plt+0x51fc>
   1631c:	mov	r6, r0
   16320:	ldr	r0, [r5]
   16324:	cmp	r0, #0
   16328:	beq	1666c <__assert_fail@plt+0x5518>
   1632c:	cmp	r0, #34	; 0x22
   16330:	bne	166b4 <__assert_fail@plt+0x5560>
   16334:	mov	r8, #1
   16338:	cmp	sl, #0
   1633c:	beq	16f08 <__assert_fail@plt+0x5db4>
   16340:	ldrb	r4, [r1]
   16344:	cmp	r4, #0
   16348:	bne	16394 <__assert_fail@plt+0x5240>
   1634c:	b	16f08 <__assert_fail@plt+0x5db4>
   16350:	cmp	sl, #0
   16354:	beq	166b4 <__assert_fail@plt+0x5560>
   16358:	mov	r5, r1
   1635c:	ldrb	r1, [r4]
   16360:	cmp	r1, #0
   16364:	beq	166b4 <__assert_fail@plt+0x5560>
   16368:	mov	r0, sl
   1636c:	bl	1107c <strchr@plt>
   16370:	cmp	r0, #0
   16374:	beq	166b4 <__assert_fail@plt+0x5560>
   16378:	mov	r1, r5
   1637c:	mov	r8, #0
   16380:	mov	r6, #1
   16384:	mov	r7, #0
   16388:	ldrb	r4, [r1]
   1638c:	cmp	r4, #0
   16390:	beq	16f08 <__assert_fail@plt+0x5db4>
   16394:	str	r1, [sp, #32]
   16398:	mov	r0, sl
   1639c:	mov	r1, r4
   163a0:	bl	1107c <strchr@plt>
   163a4:	cmp	r0, #0
   163a8:	beq	166a8 <__assert_fail@plt+0x5554>
   163ac:	sub	r0, r4, #69	; 0x45
   163b0:	mov	r1, #1
   163b4:	mov	r3, #0
   163b8:	mov	r5, #1024	; 0x400
   163bc:	cmp	r0, #47	; 0x2f
   163c0:	str	r1, [sp, #28]
   163c4:	bhi	164c8 <__assert_fail@plt+0x5374>
   163c8:	add	r1, pc, #0
   163cc:	ldr	pc, [r1, r0, lsl #2]
   163d0:	muleq	r1, r0, r4
   163d4:	andeq	r6, r1, r8, asr #9
   163d8:	muleq	r1, r0, r4
   163dc:	andeq	r6, r1, r8, asr #9
   163e0:	andeq	r6, r1, r8, asr #9
   163e4:	andeq	r6, r1, r8, asr #9
   163e8:	muleq	r1, r0, r4
   163ec:	andeq	r6, r1, r8, asr #9
   163f0:	muleq	r1, r0, r4
   163f4:	andeq	r6, r1, r8, asr #9
   163f8:	andeq	r6, r1, r8, asr #9
   163fc:	muleq	r1, r0, r4
   16400:	andeq	r6, r1, r8, asr #9
   16404:	andeq	r6, r1, r8, asr #9
   16408:	andeq	r6, r1, r8, asr #9
   1640c:	muleq	r1, r0, r4
   16410:	andeq	r6, r1, r8, asr #9
   16414:	andeq	r6, r1, r8, asr #9
   16418:	andeq	r6, r1, r8, asr #9
   1641c:	andeq	r6, r1, r8, asr #9
   16420:	muleq	r1, r0, r4
   16424:	muleq	r1, r0, r4
   16428:	andeq	r6, r1, r8, asr #9
   1642c:	andeq	r6, r1, r8, asr #9
   16430:	andeq	r6, r1, r8, asr #9
   16434:	andeq	r6, r1, r8, asr #9
   16438:	andeq	r6, r1, r8, asr #9
   1643c:	andeq	r6, r1, r8, asr #9
   16440:	andeq	r6, r1, r8, asr #9
   16444:	andeq	r6, r1, r8, asr #9
   16448:	andeq	r6, r1, r8, asr #9
   1644c:	andeq	r6, r1, r8, asr #9
   16450:	andeq	r6, r1, r8, asr #9
   16454:	andeq	r6, r1, r8, asr #9
   16458:	muleq	r1, r0, r4
   1645c:	andeq	r6, r1, r8, asr #9
   16460:	andeq	r6, r1, r8, asr #9
   16464:	andeq	r6, r1, r8, asr #9
   16468:	muleq	r1, r0, r4
   1646c:	andeq	r6, r1, r8, asr #9
   16470:	muleq	r1, r0, r4
   16474:	andeq	r6, r1, r8, asr #9
   16478:	andeq	r6, r1, r8, asr #9
   1647c:	andeq	r6, r1, r8, asr #9
   16480:	andeq	r6, r1, r8, asr #9
   16484:	andeq	r6, r1, r8, asr #9
   16488:	andeq	r6, r1, r8, asr #9
   1648c:	muleq	r1, r0, r4
   16490:	mov	r0, sl
   16494:	mov	r1, #48	; 0x30
   16498:	bl	1107c <strchr@plt>
   1649c:	cmp	r0, #0
   164a0:	beq	164c4 <__assert_fail@plt+0x5370>
   164a4:	ldr	r1, [sp, #32]
   164a8:	ldrb	r0, [r1, #1]
   164ac:	cmp	r0, #66	; 0x42
   164b0:	cmpne	r0, #68	; 0x44
   164b4:	bne	1667c <__assert_fail@plt+0x5528>
   164b8:	mov	r5, #1000	; 0x3e8
   164bc:	mov	r0, #2
   164c0:	str	r0, [sp, #28]
   164c4:	mov	r3, #0
   164c8:	sub	r0, r4, #66	; 0x42
   164cc:	cmp	r0, #53	; 0x35
   164d0:	bhi	166a8 <__assert_fail@plt+0x5554>
   164d4:	add	r1, pc, #0
   164d8:	ldr	pc, [r1, r0, lsl #2]
   164dc:	andeq	r6, r1, r8, lsl sl
   164e0:	andeq	r6, r1, r8, lsr #13
   164e4:	andeq	r6, r1, r8, lsr #13
   164e8:	andeq	r6, r1, r0, asr #20
   164ec:	andeq	r6, r1, r8, lsr #13
   164f0:			; <UNDEFINED> instruction: 0x000165b4
   164f4:	andeq	r6, r1, r8, lsr #13
   164f8:	andeq	r6, r1, r8, lsr #13
   164fc:	andeq	r6, r1, r8, lsr #13
   16500:	andeq	r6, r1, r0, asr #13
   16504:	andeq	r6, r1, r8, lsr #13
   16508:	andeq	r6, r1, r8, lsl #14
   1650c:	andeq	r6, r1, r8, lsr #13
   16510:	andeq	r6, r1, r8, lsr #13
   16514:	muleq	r1, r4, fp
   16518:	andeq	r6, r1, r8, lsr #13
   1651c:	andeq	r6, r1, r8, lsr #13
   16520:	andeq	r6, r1, r8, lsr #13
   16524:	muleq	r1, r4, r7
   16528:	andeq	r6, r1, r8, lsr #13
   1652c:	andeq	r6, r1, r8, lsr #13
   16530:	andeq	r6, r1, r8, lsr #13
   16534:	andeq	r6, r1, r8, lsr #13
   16538:			; <UNDEFINED> instruction: 0x00016cbc
   1653c:	andeq	r6, r1, ip, ror r8
   16540:	andeq	r6, r1, r8, lsr #13
   16544:	andeq	r6, r1, r8, lsr #13
   16548:	andeq	r6, r1, r8, lsr #13
   1654c:	andeq	r6, r1, r8, lsr #13
   16550:	andeq	r6, r1, r8, lsr #13
   16554:	andeq	r6, r1, r8, lsr #13
   16558:	andeq	r6, r1, r8, lsr #13
   1655c:	muleq	r1, r0, lr
   16560:	andeq	r6, r1, r8, ror #29
   16564:	andeq	r6, r1, r8, lsr #13
   16568:	andeq	r6, r1, r8, lsr #13
   1656c:	andeq	r6, r1, r8, lsr #13
   16570:			; <UNDEFINED> instruction: 0x000165b4
   16574:	andeq	r6, r1, r8, lsr #13
   16578:	andeq	r6, r1, r8, lsr #13
   1657c:	andeq	r6, r1, r8, lsr #13
   16580:	andeq	r6, r1, r0, asr #13
   16584:	andeq	r6, r1, r8, lsr #13
   16588:	andeq	r6, r1, r8, lsl #14
   1658c:	andeq	r6, r1, r8, lsr #13
   16590:	andeq	r6, r1, r8, lsr #13
   16594:	andeq	r6, r1, r8, lsr #13
   16598:	andeq	r6, r1, r8, lsr #13
   1659c:	andeq	r6, r1, r8, lsr #13
   165a0:	andeq	r6, r1, r8, lsr #13
   165a4:	muleq	r1, r4, r7
   165a8:	andeq	r6, r1, r8, lsr #13
   165ac:	andeq	r6, r1, r8, lsr #13
   165b0:	andeq	r6, r1, r4, asr #29
   165b4:	mvn	r0, #0
   165b8:	mvn	r1, #0
   165bc:	mov	r2, r5
   165c0:	mov	sl, r3
   165c4:	bl	1727c <__assert_fail@plt+0x6128>
   165c8:	subs	r3, r0, r6
   165cc:	umull	r4, r2, r6, r5
   165d0:	mov	lr, #0
   165d4:	str	r1, [sp, #20]
   165d8:	sbcs	r3, r1, r7
   165dc:	movwcc	lr, #1
   165e0:	mla	ip, r6, sl, r2
   165e4:	mov	r2, r1
   165e8:	mov	r2, #0
   165ec:	cmp	lr, #0
   165f0:	mla	r7, r7, r5, ip
   165f4:	mvnne	r4, #0
   165f8:	mvnne	r7, #0
   165fc:	subs	r6, r0, r4
   16600:	sbcs	r6, r1, r7
   16604:	umull	r3, r6, r4, r5
   16608:	movwcc	r2, #1
   1660c:	cmp	r2, #0
   16610:	mvnne	r3, #0
   16614:	cmp	r2, #0
   16618:	str	r6, [sp, #16]
   1661c:	umull	r6, ip, r3, r5
   16620:	mla	r1, r3, sl, ip
   16624:	ldr	ip, [sp, #16]
   16628:	str	r1, [sp, #12]
   1662c:	mla	r4, r4, sl, ip
   16630:	mla	r4, r7, r5, r4
   16634:	mvnne	r4, #0
   16638:	subs	r0, r0, r3
   1663c:	ldr	r0, [sp, #20]
   16640:	ldr	r7, [sp, #12]
   16644:	sbcs	r0, r0, r4
   16648:	mov	r0, #0
   1664c:	mla	r7, r4, r5, r7
   16650:	movwcc	r0, #1
   16654:	cmp	r0, #0
   16658:	mov	r1, r0
   1665c:	orr	r0, lr, r2
   16660:	mvnne	r7, #0
   16664:	mvnne	r6, #0
   16668:	b	16cb4 <__assert_fail@plt+0x5b60>
   1666c:	mov	r8, r0
   16670:	cmp	sl, #0
   16674:	bne	16340 <__assert_fail@plt+0x51ec>
   16678:	b	16f08 <__assert_fail@plt+0x5db4>
   1667c:	cmp	r0, #105	; 0x69
   16680:	mov	r3, #0
   16684:	bne	164c8 <__assert_fail@plt+0x5374>
   16688:	ldrb	r0, [r1, #2]
   1668c:	mov	r1, #1
   16690:	cmp	r0, #66	; 0x42
   16694:	movweq	r1, #3
   16698:	str	r1, [sp, #28]
   1669c:	sub	r0, r4, #66	; 0x42
   166a0:	cmp	r0, #53	; 0x35
   166a4:	bls	164d4 <__assert_fail@plt+0x5380>
   166a8:	ldr	r0, [sp, #36]	; 0x24
   166ac:	orr	r8, r8, #2
   166b0:	strd	r6, [r0]
   166b4:	mov	r0, r8
   166b8:	sub	sp, fp, #28
   166bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c0:	mvn	r0, #0
   166c4:	mvn	r1, #0
   166c8:	mov	r2, r5
   166cc:	mov	r4, r3
   166d0:	bl	1727c <__assert_fail@plt+0x6128>
   166d4:	subs	r0, r0, r6
   166d8:	mov	r2, #0
   166dc:	sbcs	r0, r1, r7
   166e0:	umull	r0, r1, r6, r5
   166e4:	movwcc	r2, #1
   166e8:	cmp	r2, #0
   166ec:	mla	r1, r6, r4, r1
   166f0:	mov	r3, r2
   166f4:	mvnne	r0, #0
   166f8:	mla	r7, r7, r5, r1
   166fc:	mvnne	r7, #0
   16700:	mov	r6, r0
   16704:	b	16ee8 <__assert_fail@plt+0x5d94>
   16708:	mvn	r0, #0
   1670c:	mvn	r1, #0
   16710:	mov	r2, r5
   16714:	str	r3, [sp, #24]
   16718:	bl	1727c <__assert_fail@plt+0x6128>
   1671c:	subs	r3, r0, r6
   16720:	mov	ip, r0
   16724:	umull	r4, r0, r6, r5
   16728:	mov	sl, #0
   1672c:	sbcs	r3, r1, r7
   16730:	mov	r3, #0
   16734:	movwcc	r3, #1
   16738:	cmp	r3, #0
   1673c:	str	r0, [sp, #20]
   16740:	ldr	r0, [sp, #24]
   16744:	mvnne	r4, #0
   16748:	cmp	r3, #0
   1674c:	umull	lr, r2, r4, r5
   16750:	mla	r2, r4, r0, r2
   16754:	str	r2, [sp, #16]
   16758:	ldr	r2, [sp, #20]
   1675c:	mla	r6, r6, r0, r2
   16760:	ldr	r0, [sp, #16]
   16764:	mla	r6, r7, r5, r6
   16768:	mvnne	r6, #0
   1676c:	mla	r7, r6, r5, r0
   16770:	subs	r0, ip, r4
   16774:	sbcs	r0, r1, r6
   16778:	movwcc	sl, #1
   1677c:	cmp	sl, #0
   16780:	orr	r3, r3, sl
   16784:	mvnne	lr, #0
   16788:	mvnne	r7, #0
   1678c:	mov	r6, lr
   16790:	b	16ee8 <__assert_fail@plt+0x5d94>
   16794:	mvn	r0, #0
   16798:	mvn	r1, #0
   1679c:	mov	r2, r5
   167a0:	mov	sl, r3
   167a4:	bl	1727c <__assert_fail@plt+0x6128>
   167a8:	subs	r3, r0, r6
   167ac:	mov	ip, r1
   167b0:	umull	r2, lr, r6, r5
   167b4:	str	r0, [sp, #20]
   167b8:	sbcs	r3, r1, r7
   167bc:	mov	r1, #0
   167c0:	str	ip, [sp, #16]
   167c4:	movwcc	r1, #1
   167c8:	mla	r6, r6, sl, lr
   167cc:	mov	lr, #0
   167d0:	cmp	r1, #0
   167d4:	mla	r7, r7, r5, r6
   167d8:	mvnne	r2, #0
   167dc:	cmp	r1, #0
   167e0:	umull	r3, r4, r2, r5
   167e4:	mvnne	r7, #0
   167e8:	mla	r4, r2, sl, r4
   167ec:	subs	r2, r0, r2
   167f0:	sbcs	r2, ip, r7
   167f4:	mla	r4, r7, r5, r4
   167f8:	mov	r2, #0
   167fc:	movwcc	lr, #1
   16800:	cmp	lr, #0
   16804:	mvnne	r3, #0
   16808:	mvnne	r4, #0
   1680c:	subs	r7, r0, r3
   16810:	mov	r0, r5
   16814:	sbcs	r7, ip, r4
   16818:	umull	r5, r7, r3, r5
   1681c:	movwcc	r2, #1
   16820:	cmp	r2, #0
   16824:	mla	r3, r3, sl, r7
   16828:	mvnne	r5, #0
   1682c:	cmp	r2, #0
   16830:	mla	r3, r4, r0, r3
   16834:	umull	r6, ip, r5, r0
   16838:	mvnne	r3, #0
   1683c:	mla	ip, r5, sl, ip
   16840:	mla	r7, r3, r0, ip
   16844:	ldr	r0, [sp, #20]
   16848:	subs	r0, r0, r5
   1684c:	ldr	r0, [sp, #16]
   16850:	sbcs	r0, r0, r3
   16854:	mov	r0, #0
   16858:	movwcc	r0, #1
   1685c:	cmp	r0, #0
   16860:	mov	r3, r0
   16864:	orr	r0, r1, lr
   16868:	orr	r0, r0, r2
   1686c:	mvnne	r7, #0
   16870:	mvnne	r6, #0
   16874:	orr	r3, r0, r3
   16878:	b	16ee8 <__assert_fail@plt+0x5d94>
   1687c:	mvn	r0, #0
   16880:	mvn	r1, #0
   16884:	mov	r2, r5
   16888:	mov	r4, r3
   1688c:	str	r3, [sp, #24]
   16890:	bl	1727c <__assert_fail@plt+0x6128>
   16894:	umull	r3, r2, r6, r5
   16898:	mla	r2, r6, r4, r2
   1689c:	subs	r6, r0, r6
   168a0:	sbcs	r6, r1, r7
   168a4:	mov	r6, #0
   168a8:	mla	r2, r7, r5, r2
   168ac:	mov	r7, #0
   168b0:	movwcc	r6, #1
   168b4:	cmp	r6, #0
   168b8:	str	r6, [sp, #20]
   168bc:	mvnne	r3, #0
   168c0:	mvnne	r2, #0
   168c4:	subs	r4, r0, r3
   168c8:	umull	r6, ip, r3, r5
   168cc:	sbcs	r4, r1, r2
   168d0:	ldr	r4, [sp, #24]
   168d4:	movwcc	r7, #1
   168d8:	cmp	r7, #0
   168dc:	mov	lr, r7
   168e0:	str	r7, [sp, #16]
   168e4:	mvnne	r6, #0
   168e8:	cmp	lr, #0
   168ec:	mov	lr, #0
   168f0:	umull	sl, r7, r6, r5
   168f4:	mla	r3, r3, r4, ip
   168f8:	mla	r2, r2, r5, r3
   168fc:	mvnne	r2, #0
   16900:	subs	r3, r0, r6
   16904:	mla	r7, r6, r4, r7
   16908:	mov	r4, r0
   1690c:	mov	r0, #0
   16910:	mla	r7, r2, r5, r7
   16914:	sbcs	r2, r1, r2
   16918:	mov	r3, r4
   1691c:	movwcc	r0, #1
   16920:	str	r3, [sp, #4]
   16924:	cmp	r0, #0
   16928:	str	r0, [sp, #12]
   1692c:	mov	r0, r1
   16930:	mvnne	sl, #0
   16934:	mvnne	r7, #0
   16938:	str	r0, [sp, #8]
   1693c:	subs	r2, r4, sl
   16940:	ldr	r4, [sp, #24]
   16944:	sbcs	r2, r1, r7
   16948:	umull	r6, r2, sl, r5
   1694c:	movwcc	lr, #1
   16950:	cmp	lr, #0
   16954:	mvnne	r6, #0
   16958:	mla	r2, sl, r4, r2
   1695c:	cmp	lr, #0
   16960:	umull	r1, ip, r6, r5
   16964:	mla	r2, r7, r5, r2
   16968:	mvnne	r2, #0
   1696c:	mla	ip, r6, r4, ip
   16970:	subs	r6, r3, r6
   16974:	mla	r7, r2, r5, ip
   16978:	sbcs	r2, r0, r2
   1697c:	mov	ip, #0
   16980:	mov	r2, #0
   16984:	movwcc	ip, #1
   16988:	cmp	ip, #0
   1698c:	mvnne	r1, #0
   16990:	mvnne	r7, #0
   16994:	subs	r6, r3, r1
   16998:	ldr	r3, [sp, #24]
   1699c:	sbcs	r6, r0, r7
   169a0:	umull	r0, sl, r1, r5
   169a4:	movwcc	r2, #1
   169a8:	cmp	r2, #0
   169ac:	mvnne	r0, #0
   169b0:	mla	r1, r1, r3, sl
   169b4:	cmp	r2, #0
   169b8:	umull	r6, r4, r0, r5
   169bc:	mla	r1, r7, r5, r1
   169c0:	mvnne	r1, #0
   169c4:	mla	r4, r0, r3, r4
   169c8:	ldr	r3, [sp, #4]
   169cc:	mla	r7, r1, r5, r4
   169d0:	ldr	r5, [sp, #16]
   169d4:	subs	r0, r3, r0
   169d8:	ldr	r0, [sp, #8]
   169dc:	sbcs	r0, r0, r1
   169e0:	mov	r0, #0
   169e4:	movwcc	r0, #1
   169e8:	cmp	r0, #0
   169ec:	mov	r1, r0
   169f0:	ldr	r0, [sp, #20]
   169f4:	mvnne	r7, #0
   169f8:	mvnne	r6, #0
   169fc:	orr	r0, r0, r5
   16a00:	ldr	r5, [sp, #12]
   16a04:	orr	r0, r0, r5
   16a08:	orr	r0, r0, lr
   16a0c:	orr	r0, r0, ip
   16a10:	orr	r0, r0, r2
   16a14:	b	16e84 <__assert_fail@plt+0x5d30>
   16a18:	mov	r1, #0
   16a1c:	lsl	r2, r7, #10
   16a20:	lsl	r0, r6, #10
   16a24:	lsr	r3, r7, #22
   16a28:	cmp	r1, r7, lsr #22
   16a2c:	orr	r2, r2, r6, lsr #22
   16a30:	mvnne	r0, #0
   16a34:	movwne	r3, #1
   16a38:	cmp	r1, r7, lsr #22
   16a3c:	b	16eb4 <__assert_fail@plt+0x5d60>
   16a40:	mvn	r0, #0
   16a44:	mvn	r1, #0
   16a48:	mov	r2, r5
   16a4c:	mov	sl, r3
   16a50:	bl	1727c <__assert_fail@plt+0x6128>
   16a54:	subs	r2, r0, r6
   16a58:	mov	ip, r0
   16a5c:	mov	r0, #0
   16a60:	sbcs	r2, r1, r7
   16a64:	umull	r4, r2, r6, r5
   16a68:	movwcc	r0, #1
   16a6c:	cmp	r0, #0
   16a70:	mla	r2, r6, sl, r2
   16a74:	str	r0, [sp, #20]
   16a78:	mvnne	r4, #0
   16a7c:	cmp	r0, #0
   16a80:	mla	r2, r7, r5, r2
   16a84:	mov	r0, #0
   16a88:	umull	lr, r3, r4, r5
   16a8c:	mvnne	r2, #0
   16a90:	mla	r3, r4, sl, r3
   16a94:	mla	r6, r2, r5, r3
   16a98:	subs	r3, ip, r4
   16a9c:	mov	r3, r1
   16aa0:	sbcs	r2, r1, r2
   16aa4:	str	r3, [sp, #8]
   16aa8:	movwcc	r0, #1
   16aac:	cmp	r0, #0
   16ab0:	str	r0, [sp, #16]
   16ab4:	mov	r0, ip
   16ab8:	mvnne	lr, #0
   16abc:	mvnne	r6, #0
   16ac0:	str	r0, [sp, #12]
   16ac4:	subs	r2, ip, lr
   16ac8:	umull	r7, r4, lr, r5
   16acc:	sbcs	r2, r1, r6
   16ad0:	mov	r2, #0
   16ad4:	movwcc	r2, #1
   16ad8:	mla	r4, lr, sl, r4
   16adc:	cmp	r2, #0
   16ae0:	mla	r6, r6, r5, r4
   16ae4:	mov	r4, #0
   16ae8:	mvnne	r7, #0
   16aec:	cmp	r2, #0
   16af0:	umull	r1, ip, r7, r5
   16af4:	mvnne	r6, #0
   16af8:	mla	ip, r7, sl, ip
   16afc:	subs	r7, r0, r7
   16b00:	sbcs	r7, r3, r6
   16b04:	mla	lr, r6, r5, ip
   16b08:	mov	ip, #0
   16b0c:	movwcc	ip, #1
   16b10:	cmp	ip, #0
   16b14:	mvnne	r1, #0
   16b18:	mvnne	lr, #0
   16b1c:	subs	r7, r0, r1
   16b20:	sbcs	r7, r3, lr
   16b24:	umull	r0, r7, r1, r5
   16b28:	movwcc	r4, #1
   16b2c:	cmp	r4, #0
   16b30:	mla	r1, r1, sl, r7
   16b34:	mvnne	r0, #0
   16b38:	cmp	r4, #0
   16b3c:	mla	r1, lr, r5, r1
   16b40:	umull	r6, r3, r0, r5
   16b44:	mvnne	r1, #0
   16b48:	mla	r3, r0, sl, r3
   16b4c:	mla	r7, r1, r5, r3
   16b50:	ldr	r3, [sp, #12]
   16b54:	subs	r0, r3, r0
   16b58:	ldr	r0, [sp, #8]
   16b5c:	ldr	r3, [sp, #16]
   16b60:	sbcs	r0, r0, r1
   16b64:	mov	r0, #0
   16b68:	movwcc	r0, #1
   16b6c:	cmp	r0, #0
   16b70:	mov	r1, r0
   16b74:	ldr	r0, [sp, #20]
   16b78:	mvnne	r7, #0
   16b7c:	mvnne	r6, #0
   16b80:	orr	r0, r0, r3
   16b84:	orr	r0, r0, r2
   16b88:	orr	r0, r0, ip
   16b8c:	orr	r0, r0, r4
   16b90:	b	16cb4 <__assert_fail@plt+0x5b60>
   16b94:	mvn	r0, #0
   16b98:	mvn	r1, #0
   16b9c:	mov	r2, r5
   16ba0:	mov	sl, r3
   16ba4:	bl	1727c <__assert_fail@plt+0x6128>
   16ba8:	umull	r3, r2, r6, r5
   16bac:	mov	lr, r1
   16bb0:	mov	r1, r0
   16bb4:	mla	r2, r6, sl, r2
   16bb8:	subs	r6, r0, r6
   16bbc:	mov	r0, #0
   16bc0:	sbcs	r6, lr, r7
   16bc4:	mla	r2, r7, r5, r2
   16bc8:	movwcc	r0, #1
   16bcc:	cmp	r0, #0
   16bd0:	str	r0, [sp, #20]
   16bd4:	mov	r0, r1
   16bd8:	mvnne	r3, #0
   16bdc:	mvnne	r2, #0
   16be0:	str	r0, [sp, #16]
   16be4:	subs	r4, r1, r3
   16be8:	umull	r7, ip, r3, r5
   16bec:	sbcs	r4, lr, r2
   16bf0:	mov	r4, #0
   16bf4:	movwcc	r4, #1
   16bf8:	mla	r3, r3, sl, ip
   16bfc:	mov	ip, #0
   16c00:	cmp	r4, #0
   16c04:	mla	r2, r2, r5, r3
   16c08:	mvnne	r7, #0
   16c0c:	cmp	r4, #0
   16c10:	umull	r1, r6, r7, r5
   16c14:	mvnne	r2, #0
   16c18:	mla	r6, r7, sl, r6
   16c1c:	mla	r3, r2, r5, r6
   16c20:	subs	r6, r0, r7
   16c24:	sbcs	r2, lr, r2
   16c28:	mov	r2, #0
   16c2c:	movwcc	ip, #1
   16c30:	cmp	ip, #0
   16c34:	mvnne	r1, #0
   16c38:	mvnne	r3, #0
   16c3c:	subs	r6, r0, r1
   16c40:	sbcs	r6, lr, r3
   16c44:	umull	r0, r6, r1, r5
   16c48:	movwcc	r2, #1
   16c4c:	cmp	r2, #0
   16c50:	mvnne	r0, #0
   16c54:	cmp	r2, #0
   16c58:	str	r6, [sp, #12]
   16c5c:	umull	r6, r7, r0, r5
   16c60:	mla	r7, r0, sl, r7
   16c64:	str	r7, [sp, #8]
   16c68:	ldr	r7, [sp, #12]
   16c6c:	mla	r1, r1, sl, r7
   16c70:	mla	r1, r3, r5, r1
   16c74:	ldr	r3, [sp, #8]
   16c78:	mvnne	r1, #0
   16c7c:	mla	r7, r1, r5, r3
   16c80:	ldr	r3, [sp, #16]
   16c84:	subs	r0, r3, r0
   16c88:	sbcs	r0, lr, r1
   16c8c:	mov	r0, #0
   16c90:	movwcc	r0, #1
   16c94:	cmp	r0, #0
   16c98:	mov	r1, r0
   16c9c:	ldr	r0, [sp, #20]
   16ca0:	mvnne	r7, #0
   16ca4:	mvnne	r6, #0
   16ca8:	orr	r0, r0, r4
   16cac:	orr	r0, r0, ip
   16cb0:	orr	r0, r0, r2
   16cb4:	orr	r3, r0, r1
   16cb8:	b	16ee8 <__assert_fail@plt+0x5d94>
   16cbc:	mvn	r0, #0
   16cc0:	mvn	r1, #0
   16cc4:	mov	r2, r5
   16cc8:	mov	sl, r3
   16ccc:	bl	1727c <__assert_fail@plt+0x6128>
   16cd0:	mov	ip, r1
   16cd4:	subs	r1, r0, r6
   16cd8:	umull	r3, lr, r6, r5
   16cdc:	mov	r2, r5
   16ce0:	sbcs	r1, ip, r7
   16ce4:	mov	r1, #0
   16ce8:	str	ip, [sp, #4]
   16cec:	movwcc	r1, #1
   16cf0:	mla	r6, r6, sl, lr
   16cf4:	cmp	r1, #0
   16cf8:	mla	r7, r7, r2, r6
   16cfc:	str	r1, [sp, #20]
   16d00:	mvnne	r3, #0
   16d04:	cmp	r1, #0
   16d08:	mov	r1, r0
   16d0c:	umull	r4, r5, r3, r5
   16d10:	mvnne	r7, #0
   16d14:	mov	lr, r1
   16d18:	mla	r5, r3, sl, r5
   16d1c:	subs	r3, r0, r3
   16d20:	sbcs	r0, ip, r7
   16d24:	mov	r0, #0
   16d28:	mla	r5, r7, r2, r5
   16d2c:	movwcc	r0, #1
   16d30:	cmp	r0, #0
   16d34:	str	r0, [sp, #16]
   16d38:	mvnne	r4, #0
   16d3c:	mvnne	r5, #0
   16d40:	subs	r0, r1, r4
   16d44:	mov	r1, #0
   16d48:	sbcs	r0, ip, r5
   16d4c:	umull	r3, r0, r4, r2
   16d50:	movwcc	r1, #1
   16d54:	cmp	r1, #0
   16d58:	mla	r0, r4, sl, r0
   16d5c:	mov	r4, lr
   16d60:	str	r1, [sp, #12]
   16d64:	mvnne	r3, #0
   16d68:	cmp	r1, #0
   16d6c:	mla	r0, r5, r2, r0
   16d70:	str	r4, [sp]
   16d74:	umull	r7, r6, r3, r2
   16d78:	mvnne	r0, #0
   16d7c:	mla	r6, r3, sl, r6
   16d80:	subs	r3, lr, r3
   16d84:	mov	r3, #0
   16d88:	mla	r5, r0, r2, r6
   16d8c:	sbcs	r0, ip, r0
   16d90:	mov	r0, #0
   16d94:	movwcc	r0, #1
   16d98:	cmp	r0, #0
   16d9c:	str	r0, [sp, #8]
   16da0:	mvnne	r7, #0
   16da4:	mvnne	r5, #0
   16da8:	subs	r0, lr, r7
   16dac:	sbcs	r0, ip, r5
   16db0:	umull	r6, r0, r7, r2
   16db4:	movwcc	r3, #1
   16db8:	cmp	r3, #0
   16dbc:	mla	r7, r7, sl, r0
   16dc0:	mov	r0, ip
   16dc4:	mvnne	r6, #0
   16dc8:	cmp	r3, #0
   16dcc:	mla	r7, r5, r2, r7
   16dd0:	mov	r5, #0
   16dd4:	umull	r1, lr, r6, r2
   16dd8:	mvnne	r7, #0
   16ddc:	mla	lr, r6, sl, lr
   16de0:	subs	r6, r4, r6
   16de4:	mla	lr, r7, r2, lr
   16de8:	sbcs	r7, ip, r7
   16dec:	mov	ip, #0
   16df0:	movwcc	ip, #1
   16df4:	cmp	ip, #0
   16df8:	mvnne	r1, #0
   16dfc:	mvnne	lr, #0
   16e00:	subs	r7, r4, r1
   16e04:	sbcs	r7, r0, lr
   16e08:	umull	r0, r7, r1, r2
   16e0c:	movwcc	r5, #1
   16e10:	cmp	r5, #0
   16e14:	mla	r1, r1, sl, r7
   16e18:	mvnne	r0, #0
   16e1c:	cmp	r5, #0
   16e20:	mla	r1, lr, r2, r1
   16e24:	umull	r6, r4, r0, r2
   16e28:	mvnne	r1, #0
   16e2c:	mla	r4, r0, sl, r4
   16e30:	mla	r7, r1, r2, r4
   16e34:	ldr	r2, [sp]
   16e38:	subs	r0, r2, r0
   16e3c:	ldr	r0, [sp, #4]
   16e40:	ldr	r2, [sp, #16]
   16e44:	sbcs	r0, r0, r1
   16e48:	mov	r0, #0
   16e4c:	movwcc	r0, #1
   16e50:	cmp	r0, #0
   16e54:	mov	r1, r0
   16e58:	ldr	r0, [sp, #20]
   16e5c:	mvnne	r7, #0
   16e60:	mvnne	r6, #0
   16e64:	orr	r0, r0, r2
   16e68:	ldr	r2, [sp, #12]
   16e6c:	orr	r0, r0, r2
   16e70:	ldr	r2, [sp, #8]
   16e74:	orr	r0, r0, r2
   16e78:	orr	r0, r0, r3
   16e7c:	orr	r0, r0, ip
   16e80:	orr	r0, r0, r5
   16e84:	orr	r0, r0, r1
   16e88:	and	r3, r0, #1
   16e8c:	b	16ee8 <__assert_fail@plt+0x5d94>
   16e90:	mov	r1, #0
   16e94:	lsl	r2, r7, #9
   16e98:	lsl	r0, r6, #9
   16e9c:	lsr	r3, r7, #23
   16ea0:	cmp	r1, r7, lsr #23
   16ea4:	orr	r2, r2, r6, lsr #23
   16ea8:	mvnne	r0, #0
   16eac:	movwne	r3, #1
   16eb0:	cmp	r1, r7, lsr #23
   16eb4:	mvnne	r2, #0
   16eb8:	mov	r6, r0
   16ebc:	mov	r7, r2
   16ec0:	b	16ee8 <__assert_fail@plt+0x5d94>
   16ec4:	lsl	r1, r7, #1
   16ec8:	cmp	r7, #0
   16ecc:	lsl	r0, r6, #1
   16ed0:	lsr	r3, r7, #31
   16ed4:	orr	r1, r1, r6, lsr #31
   16ed8:	mvnmi	r0, #0
   16edc:	mvnmi	r1, #0
   16ee0:	mov	r6, r0
   16ee4:	mov	r7, r1
   16ee8:	ldr	r1, [sp, #32]
   16eec:	ldr	r2, [sp, #28]
   16ef0:	orr	r8, r3, r8
   16ef4:	add	r0, r1, r2
   16ef8:	str	r0, [r9]
   16efc:	ldrb	r0, [r1, r2]
   16f00:	cmp	r0, #0
   16f04:	orrne	r8, r8, #2
   16f08:	ldr	r0, [sp, #36]	; 0x24
   16f0c:	strd	r6, [r0]
   16f10:	mov	r0, r8
   16f14:	sub	sp, fp, #28
   16f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f1c:	movw	r0, #33825	; 0x8421
   16f20:	movw	r1, #33863	; 0x8447
   16f24:	movw	r3, #33879	; 0x8457
   16f28:	mov	r2, #85	; 0x55
   16f2c:	movt	r0, #1
   16f30:	movt	r1, #1
   16f34:	movt	r3, #1
   16f38:	bl	11154 <__assert_fail@plt>
   16f3c:	clz	r2, r1
   16f40:	clz	r3, r0
   16f44:	lsr	r2, r2, #5
   16f48:	lsr	r3, r3, #5
   16f4c:	orrs	r2, r3, r2
   16f50:	movwne	r1, #1
   16f54:	movwne	r0, #1
   16f58:	cmp	r1, #0
   16f5c:	beq	16f8c <__assert_fail@plt+0x5e38>
   16f60:	mvn	r2, #-2147483648	; 0x80000000
   16f64:	udiv	r2, r2, r1
   16f68:	cmp	r2, r0
   16f6c:	bcs	16f8c <__assert_fail@plt+0x5e38>
   16f70:	push	{fp, lr}
   16f74:	mov	fp, sp
   16f78:	bl	11088 <__errno_location@plt>
   16f7c:	mov	r1, #12
   16f80:	str	r1, [r0]
   16f84:	mov	r0, #0
   16f88:	pop	{fp, pc}
   16f8c:	b	10ec0 <calloc@plt>
   16f90:	cmp	r0, #0
   16f94:	movweq	r0, #1
   16f98:	cmn	r0, #1
   16f9c:	ble	16fa4 <__assert_fail@plt+0x5e50>
   16fa0:	b	10ff8 <malloc@plt>
   16fa4:	push	{fp, lr}
   16fa8:	mov	fp, sp
   16fac:	bl	11088 <__errno_location@plt>
   16fb0:	mov	r1, #12
   16fb4:	str	r1, [r0]
   16fb8:	mov	r0, #0
   16fbc:	pop	{fp, pc}
   16fc0:	push	{fp, lr}
   16fc4:	mov	fp, sp
   16fc8:	cmp	r0, #0
   16fcc:	beq	16fe8 <__assert_fail@plt+0x5e94>
   16fd0:	cmp	r1, #0
   16fd4:	beq	16ff4 <__assert_fail@plt+0x5ea0>
   16fd8:	cmn	r1, #1
   16fdc:	ble	17000 <__assert_fail@plt+0x5eac>
   16fe0:	pop	{fp, lr}
   16fe4:	b	10f74 <realloc@plt>
   16fe8:	mov	r0, r1
   16fec:	pop	{fp, lr}
   16ff0:	b	16f90 <__assert_fail@plt+0x5e3c>
   16ff4:	bl	13060 <__assert_fail@plt+0x1f0c>
   16ff8:	mov	r0, #0
   16ffc:	pop	{fp, pc}
   17000:	bl	11088 <__errno_location@plt>
   17004:	mov	r1, #12
   17008:	str	r1, [r0]
   1700c:	mov	r0, #0
   17010:	pop	{fp, pc}
   17014:	push	{r4, r5, r6, sl, fp, lr}
   17018:	add	fp, sp, #16
   1701c:	mov	r4, r0
   17020:	bl	10fbc <__fpending@plt>
   17024:	ldr	r6, [r4]
   17028:	mov	r5, r0
   1702c:	mov	r0, r4
   17030:	bl	12f68 <__assert_fail@plt+0x1e14>
   17034:	tst	r6, #32
   17038:	bne	17070 <__assert_fail@plt+0x5f1c>
   1703c:	cmp	r0, #0
   17040:	mov	r4, r0
   17044:	mvnne	r4, #0
   17048:	cmp	r5, #0
   1704c:	bne	1707c <__assert_fail@plt+0x5f28>
   17050:	cmp	r0, #0
   17054:	beq	1707c <__assert_fail@plt+0x5f28>
   17058:	bl	11088 <__errno_location@plt>
   1705c:	ldr	r0, [r0]
   17060:	subs	r4, r0, #9
   17064:	mvnne	r4, #0
   17068:	mov	r0, r4
   1706c:	pop	{r4, r5, r6, sl, fp, pc}
   17070:	mvn	r4, #0
   17074:	cmp	r0, #0
   17078:	beq	17084 <__assert_fail@plt+0x5f30>
   1707c:	mov	r0, r4
   17080:	pop	{r4, r5, r6, sl, fp, pc}
   17084:	bl	11088 <__errno_location@plt>
   17088:	mov	r1, #0
   1708c:	str	r1, [r0]
   17090:	mov	r0, r4
   17094:	pop	{r4, r5, r6, sl, fp, pc}
   17098:	push	{fp, lr}
   1709c:	mov	fp, sp
   170a0:	mov	r0, #14
   170a4:	bl	11118 <nl_langinfo@plt>
   170a8:	movw	r1, #32144	; 0x7d90
   170ac:	cmp	r0, #0
   170b0:	movt	r1, #1
   170b4:	movne	r1, r0
   170b8:	movw	r0, #33958	; 0x84a6
   170bc:	ldrb	r2, [r1]
   170c0:	movt	r0, #1
   170c4:	cmp	r2, #0
   170c8:	movne	r0, r1
   170cc:	pop	{fp, pc}
   170d0:	push	{r4, r5, r6, r7, fp, lr}
   170d4:	add	fp, sp, #16
   170d8:	sub	sp, sp, #8
   170dc:	cmp	r0, #0
   170e0:	add	r5, sp, #4
   170e4:	mov	r7, r2
   170e8:	mov	r4, r1
   170ec:	movne	r5, r0
   170f0:	mov	r0, r5
   170f4:	bl	10fc8 <mbrtowc@plt>
   170f8:	mov	r6, r0
   170fc:	cmp	r7, #0
   17100:	beq	17128 <__assert_fail@plt+0x5fd4>
   17104:	cmn	r6, #2
   17108:	bcc	17128 <__assert_fail@plt+0x5fd4>
   1710c:	mov	r0, #0
   17110:	bl	17170 <__assert_fail@plt+0x601c>
   17114:	cmp	r0, #0
   17118:	bne	17128 <__assert_fail@plt+0x5fd4>
   1711c:	ldrb	r0, [r4]
   17120:	mov	r6, #1
   17124:	str	r0, [r5]
   17128:	mov	r0, r6
   1712c:	sub	sp, fp, #16
   17130:	pop	{r4, r5, r6, r7, fp, pc}
   17134:	cmp	r2, #0
   17138:	beq	17168 <__assert_fail@plt+0x6014>
   1713c:	mvn	r3, #0
   17140:	udiv	r3, r3, r2
   17144:	cmp	r3, r1
   17148:	bcs	17168 <__assert_fail@plt+0x6014>
   1714c:	push	{fp, lr}
   17150:	mov	fp, sp
   17154:	bl	11088 <__errno_location@plt>
   17158:	mov	r1, #12
   1715c:	str	r1, [r0]
   17160:	mov	r0, #0
   17164:	pop	{fp, pc}
   17168:	mul	r1, r2, r1
   1716c:	b	16fc0 <__assert_fail@plt+0x5e6c>
   17170:	push	{r4, sl, fp, lr}
   17174:	add	fp, sp, #8
   17178:	sub	sp, sp, #264	; 0x108
   1717c:	add	r1, sp, #7
   17180:	movw	r2, #257	; 0x101
   17184:	bl	171dc <__assert_fail@plt+0x6088>
   17188:	mov	r4, #0
   1718c:	cmp	r0, #0
   17190:	bne	171d0 <__assert_fail@plt+0x607c>
   17194:	movw	r1, #33964	; 0x84ac
   17198:	add	r0, sp, #7
   1719c:	mov	r2, #2
   171a0:	movt	r1, #1
   171a4:	bl	11064 <bcmp@plt>
   171a8:	cmp	r0, #0
   171ac:	beq	171d0 <__assert_fail@plt+0x607c>
   171b0:	movw	r1, #33966	; 0x84ae
   171b4:	add	r0, sp, #7
   171b8:	mov	r2, #6
   171bc:	movt	r1, #1
   171c0:	bl	11064 <bcmp@plt>
   171c4:	cmp	r0, #0
   171c8:	mov	r4, r0
   171cc:	movwne	r4, #1
   171d0:	mov	r0, r4
   171d4:	sub	sp, fp, #8
   171d8:	pop	{r4, sl, fp, pc}
   171dc:	push	{r4, r5, r6, r7, fp, lr}
   171e0:	add	fp, sp, #16
   171e4:	mov	r4, r1
   171e8:	mov	r1, #0
   171ec:	mov	r6, r2
   171f0:	bl	11100 <setlocale@plt>
   171f4:	cmp	r0, #0
   171f8:	beq	17228 <__assert_fail@plt+0x60d4>
   171fc:	mov	r7, r0
   17200:	bl	11070 <strlen@plt>
   17204:	cmp	r0, r6
   17208:	bcs	17244 <__assert_fail@plt+0x60f0>
   1720c:	add	r2, r0, #1
   17210:	mov	r0, r4
   17214:	mov	r1, r7
   17218:	bl	10f2c <memcpy@plt>
   1721c:	mov	r5, #0
   17220:	mov	r0, r5
   17224:	pop	{r4, r5, r6, r7, fp, pc}
   17228:	mov	r5, #22
   1722c:	cmp	r6, #0
   17230:	beq	1726c <__assert_fail@plt+0x6118>
   17234:	mov	r0, #0
   17238:	strb	r0, [r4]
   1723c:	mov	r0, r5
   17240:	pop	{r4, r5, r6, r7, fp, pc}
   17244:	mov	r5, #34	; 0x22
   17248:	cmp	r6, #0
   1724c:	beq	1726c <__assert_fail@plt+0x6118>
   17250:	sub	r6, r6, #1
   17254:	mov	r0, r4
   17258:	mov	r1, r7
   1725c:	mov	r2, r6
   17260:	bl	10f2c <memcpy@plt>
   17264:	mov	r0, #0
   17268:	strb	r0, [r4, r6]
   1726c:	mov	r0, r5
   17270:	pop	{r4, r5, r6, r7, fp, pc}
   17274:	mov	r1, #0
   17278:	b	11100 <setlocale@plt>
   1727c:	cmp	r3, #0
   17280:	cmpeq	r2, #0
   17284:	bne	1729c <__assert_fail@plt+0x6148>
   17288:	cmp	r1, #0
   1728c:	cmpeq	r0, #0
   17290:	mvnne	r1, #0
   17294:	mvnne	r0, #0
   17298:	b	172b8 <__assert_fail@plt+0x6164>
   1729c:	sub	sp, sp, #8
   172a0:	push	{sp, lr}
   172a4:	bl	172c8 <__assert_fail@plt+0x6174>
   172a8:	ldr	lr, [sp, #4]
   172ac:	add	sp, sp, #8
   172b0:	pop	{r2, r3}
   172b4:	bx	lr
   172b8:	push	{r1, lr}
   172bc:	mov	r0, #8
   172c0:	bl	10ed8 <raise@plt>
   172c4:	pop	{r1, pc}
   172c8:	cmp	r1, r3
   172cc:	cmpeq	r0, r2
   172d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d4:	mov	r4, r0
   172d8:	movcc	r0, #0
   172dc:	mov	r5, r1
   172e0:	ldr	lr, [sp, #36]	; 0x24
   172e4:	movcc	r1, r0
   172e8:	bcc	173e4 <__assert_fail@plt+0x6290>
   172ec:	cmp	r3, #0
   172f0:	clzeq	ip, r2
   172f4:	clzne	ip, r3
   172f8:	addeq	ip, ip, #32
   172fc:	cmp	r5, #0
   17300:	clzeq	r1, r4
   17304:	addeq	r1, r1, #32
   17308:	clzne	r1, r5
   1730c:	sub	ip, ip, r1
   17310:	sub	sl, ip, #32
   17314:	lsl	r9, r3, ip
   17318:	rsb	fp, ip, #32
   1731c:	orr	r9, r9, r2, lsl sl
   17320:	orr	r9, r9, r2, lsr fp
   17324:	lsl	r8, r2, ip
   17328:	cmp	r5, r9
   1732c:	cmpeq	r4, r8
   17330:	movcc	r0, #0
   17334:	movcc	r1, r0
   17338:	bcc	17354 <__assert_fail@plt+0x6200>
   1733c:	mov	r0, #1
   17340:	subs	r4, r4, r8
   17344:	lsl	r1, r0, sl
   17348:	orr	r1, r1, r0, lsr fp
   1734c:	lsl	r0, r0, ip
   17350:	sbc	r5, r5, r9
   17354:	cmp	ip, #0
   17358:	beq	173e4 <__assert_fail@plt+0x6290>
   1735c:	lsr	r6, r8, #1
   17360:	orr	r6, r6, r9, lsl #31
   17364:	lsr	r7, r9, #1
   17368:	mov	r2, ip
   1736c:	b	17390 <__assert_fail@plt+0x623c>
   17370:	subs	r3, r4, r6
   17374:	sbc	r8, r5, r7
   17378:	adds	r3, r3, r3
   1737c:	adc	r8, r8, r8
   17380:	adds	r4, r3, #1
   17384:	adc	r5, r8, #0
   17388:	subs	r2, r2, #1
   1738c:	beq	173ac <__assert_fail@plt+0x6258>
   17390:	cmp	r5, r7
   17394:	cmpeq	r4, r6
   17398:	bcs	17370 <__assert_fail@plt+0x621c>
   1739c:	adds	r4, r4, r4
   173a0:	adc	r5, r5, r5
   173a4:	subs	r2, r2, #1
   173a8:	bne	17390 <__assert_fail@plt+0x623c>
   173ac:	lsr	r3, r4, ip
   173b0:	orr	r3, r3, r5, lsl fp
   173b4:	lsr	r2, r5, ip
   173b8:	orr	r3, r3, r5, lsr sl
   173bc:	adds	r0, r0, r4
   173c0:	mov	r4, r3
   173c4:	lsl	r3, r2, ip
   173c8:	orr	r3, r3, r4, lsl sl
   173cc:	lsl	ip, r4, ip
   173d0:	orr	r3, r3, r4, lsr fp
   173d4:	adc	r1, r1, r5
   173d8:	subs	r0, r0, ip
   173dc:	mov	r5, r2
   173e0:	sbc	r1, r1, r3
   173e4:	cmp	lr, #0
   173e8:	strdne	r4, [lr]
   173ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173f4:	mov	r7, r0
   173f8:	ldr	r6, [pc, #72]	; 17448 <__assert_fail@plt+0x62f4>
   173fc:	ldr	r5, [pc, #72]	; 1744c <__assert_fail@plt+0x62f8>
   17400:	add	r6, pc, r6
   17404:	add	r5, pc, r5
   17408:	sub	r6, r6, r5
   1740c:	mov	r8, r1
   17410:	mov	r9, r2
   17414:	bl	10ea0 <calloc@plt-0x20>
   17418:	asrs	r6, r6, #2
   1741c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17420:	mov	r4, #0
   17424:	add	r4, r4, #1
   17428:	ldr	r3, [r5], #4
   1742c:	mov	r2, r9
   17430:	mov	r1, r8
   17434:	mov	r0, r7
   17438:	blx	r3
   1743c:	cmp	r6, r4
   17440:	bne	17424 <__assert_fail@plt+0x62d0>
   17444:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17448:	andeq	r1, r1, r4, lsl #22
   1744c:	strdeq	r1, [r1], -ip
   17450:	bx	lr
   17454:	ldr	r3, [pc, #12]	; 17468 <__assert_fail@plt+0x6314>
   17458:	mov	r1, #0
   1745c:	add	r3, pc, r3
   17460:	ldr	r2, [r3]
   17464:	b	11094 <__cxa_atexit@plt>
   17468:	muleq	r1, r0, ip

Disassembly of section .fini:

0001746c <.fini>:
   1746c:	push	{r3, lr}
   17470:	pop	{r3, pc}
