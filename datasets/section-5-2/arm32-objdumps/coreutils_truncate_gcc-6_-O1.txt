
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c14 <.init>:
   10c14:	push	{r3, lr}
   10c18:	bl	10ed4 <__assert_fail@plt+0x48>
   10c1c:	pop	{r3, pc}

Disassembly of section .plt:

00010c20 <calloc@plt-0x14>:
   10c20:	push	{lr}		; (str lr, [sp, #-4]!)
   10c24:	ldr	lr, [pc, #4]	; 10c30 <calloc@plt-0x4>
   10c28:	add	lr, pc, lr
   10c2c:	ldr	pc, [lr, #8]!
   10c30:	ldrdeq	r6, [r1], -r0

00010c34 <calloc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c40 <fputs_unlocked@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #968]!	; 0x3c8

00010c4c <raise@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #960]!	; 0x3c0

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #952]!	; 0x3b8

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #936]!	; 0x3a8

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #928]!	; 0x3a0

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #920]!	; 0x398

00010c94 <mbsinit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #912]!	; 0x390

00010ca0 <ftruncate64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #904]!	; 0x388

00010cac <memcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #896]!	; 0x380

00010cb8 <fputc_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #888]!	; 0x378

00010cc4 <dcgettext@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #880]!	; 0x370

00010cd0 <realloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #872]!	; 0x368

00010cdc <textdomain@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #864]!	; 0x360

00010ce8 <iswprint@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #856]!	; 0x358

00010cf4 <__fxstat64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #848]!	; 0x350

00010d00 <fwrite@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #840]!	; 0x348

00010d0c <lseek64@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #832]!	; 0x340

00010d18 <__ctype_get_mb_cur_max@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #824]!	; 0x338

00010d24 <__fpending@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #816]!	; 0x330

00010d30 <mbrtowc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #808]!	; 0x328

00010d3c <error@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #800]!	; 0x320

00010d48 <open64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #792]!	; 0x318

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #784]!	; 0x310

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #776]!	; 0x308

00010d6c <__freading@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #768]!	; 0x300

00010d78 <__gmon_start__@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #760]!	; 0x2f8

00010d84 <getopt_long@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d90 <__ctype_b_loc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #744]!	; 0x2e8

00010d9c <exit@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #736]!	; 0x2e0

00010da8 <strlen@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #728]!	; 0x2d8

00010db4 <strchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00010dc0 <__errno_location@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00010dcc <__cxa_atexit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd8 <memset@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #696]!	; 0x2b8

00010de4 <__printf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #688]!	; 0x2b0

00010df0 <fileno@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dfc <__fprintf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #672]!	; 0x2a0

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #664]!	; 0x298

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #656]!	; 0x290

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #648]!	; 0x288

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #640]!	; 0x280

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #632]!	; 0x278

00010e44 <__strtoll_internal@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #624]!	; 0x270

00010e50 <bindtextdomain@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #616]!	; 0x268

00010e5c <__xstat64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #608]!	; 0x260

00010e68 <strncmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #600]!	; 0x258

00010e74 <abort@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #592]!	; 0x250

00010e80 <close@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #584]!	; 0x248

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d60 <__libc_start_main@plt>
   10ec4:	bl	10e74 <abort@plt>
   10ec8:	andeq	r5, r1, r0, lsl #24
   10ecc:	andeq	r1, r1, r4, ror r3
   10ed0:	andeq	r5, r1, r0, lsr #23
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d78 <__gmon_start__@plt>
   10ef0:	andeq	r6, r1, ip, lsl r1
   10ef4:	ldrdeq	r0, [r0], -r8
   10ef8:	ldr	r3, [pc, #28]	; 10f1c <__assert_fail@plt+0x90>
   10efc:	ldr	r0, [pc, #28]	; 10f20 <__assert_fail@plt+0x94>
   10f00:	sub	r3, r3, r0
   10f04:	cmp	r3, #6
   10f08:	bxls	lr
   10f0c:	ldr	r3, [pc, #16]	; 10f24 <__assert_fail@plt+0x98>
   10f10:	cmp	r3, #0
   10f14:	bxeq	lr
   10f18:	bx	r3
   10f1c:	andeq	r7, r2, pc, lsr #2
   10f20:	andeq	r7, r2, ip, lsr #2
   10f24:	andeq	r0, r0, r0
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	ldr	r0, [pc, #36]	; 10f58 <__assert_fail@plt+0xcc>
   10f30:	sub	r1, r1, r0
   10f34:	asr	r1, r1, #2
   10f38:	add	r1, r1, r1, lsr #31
   10f3c:	asrs	r1, r1, #1
   10f40:	bxeq	lr
   10f44:	ldr	r3, [pc, #16]	; 10f5c <__assert_fail@plt+0xd0>
   10f48:	cmp	r3, #0
   10f4c:	bxeq	lr
   10f50:	bx	r3
   10f54:	andeq	r7, r2, ip, lsr #2
   10f58:	andeq	r7, r2, ip, lsr #2
   10f5c:	andeq	r0, r0, r0
   10f60:	push	{r4, lr}
   10f64:	ldr	r4, [pc, #24]	; 10f84 <__assert_fail@plt+0xf8>
   10f68:	ldrb	r3, [r4]
   10f6c:	cmp	r3, #0
   10f70:	popne	{r4, pc}
   10f74:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f78:	mov	r3, #1
   10f7c:	strb	r3, [r4]
   10f80:	pop	{r4, pc}
   10f84:	andeq	r7, r2, ip, asr #2
   10f88:	ldr	r0, [pc, #40]	; 10fb8 <__assert_fail@plt+0x12c>
   10f8c:	ldr	r3, [r0]
   10f90:	cmp	r3, #0
   10f94:	bne	10f9c <__assert_fail@plt+0x110>
   10f98:	b	10f28 <__assert_fail@plt+0x9c>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <__assert_fail@plt+0x130>
   10fa0:	cmp	r3, #0
   10fa4:	beq	10f98 <__assert_fail@plt+0x10c>
   10fa8:	push	{r4, lr}
   10fac:	blx	r3
   10fb0:	pop	{r4, lr}
   10fb4:	b	10f28 <__assert_fail@plt+0x9c>
   10fb8:	andeq	r6, r2, r4, lsl pc
   10fbc:	andeq	r0, r0, r0
   10fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fc4:	sub	sp, sp, #60	; 0x3c
   10fc8:	subs	r6, r0, #0
   10fcc:	beq	11008 <__assert_fail@plt+0x17c>
   10fd0:	ldr	r3, [pc, #824]	; 11310 <__assert_fail@plt+0x484>
   10fd4:	ldr	r4, [r3]
   10fd8:	mov	r2, #5
   10fdc:	ldr	r1, [pc, #816]	; 11314 <__assert_fail@plt+0x488>
   10fe0:	mov	r0, #0
   10fe4:	bl	10cc4 <dcgettext@plt>
   10fe8:	ldr	r3, [pc, #808]	; 11318 <__assert_fail@plt+0x48c>
   10fec:	ldr	r3, [r3]
   10ff0:	mov	r2, r0
   10ff4:	mov	r1, #1
   10ff8:	mov	r0, r4
   10ffc:	bl	10dfc <__fprintf_chk@plt>
   11000:	mov	r0, r6
   11004:	bl	10d9c <exit@plt>
   11008:	mov	r2, #5
   1100c:	ldr	r1, [pc, #776]	; 1131c <__assert_fail@plt+0x490>
   11010:	mov	r0, #0
   11014:	bl	10cc4 <dcgettext@plt>
   11018:	ldr	r3, [pc, #760]	; 11318 <__assert_fail@plt+0x48c>
   1101c:	ldr	r2, [r3]
   11020:	mov	r1, r0
   11024:	mov	r0, #1
   11028:	bl	10de4 <__printf_chk@plt>
   1102c:	mov	r2, #5
   11030:	ldr	r1, [pc, #744]	; 11320 <__assert_fail@plt+0x494>
   11034:	mov	r0, #0
   11038:	bl	10cc4 <dcgettext@plt>
   1103c:	ldr	r4, [pc, #736]	; 11324 <__assert_fail@plt+0x498>
   11040:	ldr	r1, [r4]
   11044:	bl	10c40 <fputs_unlocked@plt>
   11048:	mov	r2, #5
   1104c:	ldr	r1, [pc, #724]	; 11328 <__assert_fail@plt+0x49c>
   11050:	mov	r0, #0
   11054:	bl	10cc4 <dcgettext@plt>
   11058:	ldr	r1, [r4]
   1105c:	bl	10c40 <fputs_unlocked@plt>
   11060:	mov	r2, #5
   11064:	ldr	r1, [pc, #704]	; 1132c <__assert_fail@plt+0x4a0>
   11068:	mov	r0, #0
   1106c:	bl	10cc4 <dcgettext@plt>
   11070:	ldr	r1, [r4]
   11074:	bl	10c40 <fputs_unlocked@plt>
   11078:	mov	r2, #5
   1107c:	ldr	r1, [pc, #684]	; 11330 <__assert_fail@plt+0x4a4>
   11080:	mov	r0, #0
   11084:	bl	10cc4 <dcgettext@plt>
   11088:	ldr	r1, [r4]
   1108c:	bl	10c40 <fputs_unlocked@plt>
   11090:	mov	r2, #5
   11094:	ldr	r1, [pc, #664]	; 11334 <__assert_fail@plt+0x4a8>
   11098:	mov	r0, #0
   1109c:	bl	10cc4 <dcgettext@plt>
   110a0:	ldr	r1, [r4]
   110a4:	bl	10c40 <fputs_unlocked@plt>
   110a8:	mov	r2, #5
   110ac:	ldr	r1, [pc, #644]	; 11338 <__assert_fail@plt+0x4ac>
   110b0:	mov	r0, #0
   110b4:	bl	10cc4 <dcgettext@plt>
   110b8:	ldr	r1, [r4]
   110bc:	bl	10c40 <fputs_unlocked@plt>
   110c0:	mov	r2, #5
   110c4:	ldr	r1, [pc, #624]	; 1133c <__assert_fail@plt+0x4b0>
   110c8:	mov	r0, #0
   110cc:	bl	10cc4 <dcgettext@plt>
   110d0:	ldr	r1, [r4]
   110d4:	bl	10c40 <fputs_unlocked@plt>
   110d8:	mov	r2, #5
   110dc:	ldr	r1, [pc, #604]	; 11340 <__assert_fail@plt+0x4b4>
   110e0:	mov	r0, #0
   110e4:	bl	10cc4 <dcgettext@plt>
   110e8:	ldr	r1, [r4]
   110ec:	bl	10c40 <fputs_unlocked@plt>
   110f0:	mov	r2, #5
   110f4:	ldr	r1, [pc, #584]	; 11344 <__assert_fail@plt+0x4b8>
   110f8:	mov	r0, #0
   110fc:	bl	10cc4 <dcgettext@plt>
   11100:	ldr	r1, [r4]
   11104:	bl	10c40 <fputs_unlocked@plt>
   11108:	mov	ip, sp
   1110c:	ldr	lr, [pc, #564]	; 11348 <__assert_fail@plt+0x4bc>
   11110:	ldm	lr!, {r0, r1, r2, r3}
   11114:	stmia	ip!, {r0, r1, r2, r3}
   11118:	ldm	lr!, {r0, r1, r2, r3}
   1111c:	stmia	ip!, {r0, r1, r2, r3}
   11120:	ldm	lr!, {r0, r1, r2, r3}
   11124:	stmia	ip!, {r0, r1, r2, r3}
   11128:	ldm	lr, {r0, r1}
   1112c:	stm	ip, {r0, r1}
   11130:	ldr	r1, [sp]
   11134:	cmp	r1, #0
   11138:	moveq	r4, sp
   1113c:	beq	11164 <__assert_fail@plt+0x2d8>
   11140:	mov	r4, sp
   11144:	ldr	r5, [pc, #512]	; 1134c <__assert_fail@plt+0x4c0>
   11148:	mov	r0, r5
   1114c:	bl	10c58 <strcmp@plt>
   11150:	cmp	r0, #0
   11154:	beq	11164 <__assert_fail@plt+0x2d8>
   11158:	ldr	r1, [r4, #8]!
   1115c:	cmp	r1, #0
   11160:	bne	11148 <__assert_fail@plt+0x2bc>
   11164:	ldr	r4, [r4, #4]
   11168:	cmp	r4, #0
   1116c:	beq	11280 <__assert_fail@plt+0x3f4>
   11170:	mov	r2, #5
   11174:	ldr	r1, [pc, #468]	; 11350 <__assert_fail@plt+0x4c4>
   11178:	mov	r0, #0
   1117c:	bl	10cc4 <dcgettext@plt>
   11180:	ldr	r3, [pc, #460]	; 11354 <__assert_fail@plt+0x4c8>
   11184:	ldr	r2, [pc, #460]	; 11358 <__assert_fail@plt+0x4cc>
   11188:	mov	r1, r0
   1118c:	mov	r0, #1
   11190:	bl	10de4 <__printf_chk@plt>
   11194:	mov	r1, #0
   11198:	mov	r0, #5
   1119c:	bl	10e20 <setlocale@plt>
   111a0:	cmp	r0, #0
   111a4:	beq	111bc <__assert_fail@plt+0x330>
   111a8:	mov	r2, #3
   111ac:	ldr	r1, [pc, #424]	; 1135c <__assert_fail@plt+0x4d0>
   111b0:	bl	10e68 <strncmp@plt>
   111b4:	cmp	r0, #0
   111b8:	bne	1121c <__assert_fail@plt+0x390>
   111bc:	mov	r2, #5
   111c0:	ldr	r1, [pc, #408]	; 11360 <__assert_fail@plt+0x4d4>
   111c4:	mov	r0, #0
   111c8:	bl	10cc4 <dcgettext@plt>
   111cc:	ldr	r5, [pc, #376]	; 1134c <__assert_fail@plt+0x4c0>
   111d0:	mov	r3, r5
   111d4:	ldr	r2, [pc, #376]	; 11354 <__assert_fail@plt+0x4c8>
   111d8:	mov	r1, r0
   111dc:	mov	r0, #1
   111e0:	bl	10de4 <__printf_chk@plt>
   111e4:	mov	r2, #5
   111e8:	ldr	r1, [pc, #372]	; 11364 <__assert_fail@plt+0x4d8>
   111ec:	mov	r0, #0
   111f0:	bl	10cc4 <dcgettext@plt>
   111f4:	mov	r1, r0
   111f8:	ldr	r2, [pc, #360]	; 11368 <__assert_fail@plt+0x4dc>
   111fc:	ldr	r3, [pc, #360]	; 1136c <__assert_fail@plt+0x4e0>
   11200:	cmp	r4, r5
   11204:	movne	r3, r2
   11208:	mov	r2, r4
   1120c:	mov	r0, #1
   11210:	bl	10de4 <__printf_chk@plt>
   11214:	b	11000 <__assert_fail@plt+0x174>
   11218:	ldr	r4, [pc, #300]	; 1134c <__assert_fail@plt+0x4c0>
   1121c:	mov	r2, #5
   11220:	ldr	r1, [pc, #328]	; 11370 <__assert_fail@plt+0x4e4>
   11224:	mov	r0, #0
   11228:	bl	10cc4 <dcgettext@plt>
   1122c:	ldr	r3, [pc, #240]	; 11324 <__assert_fail@plt+0x498>
   11230:	ldr	r1, [r3]
   11234:	bl	10c40 <fputs_unlocked@plt>
   11238:	b	111bc <__assert_fail@plt+0x330>
   1123c:	mov	r2, #5
   11240:	ldr	r1, [pc, #280]	; 11360 <__assert_fail@plt+0x4d4>
   11244:	mov	r0, #0
   11248:	bl	10cc4 <dcgettext@plt>
   1124c:	ldr	r4, [pc, #248]	; 1134c <__assert_fail@plt+0x4c0>
   11250:	mov	r3, r4
   11254:	ldr	r2, [pc, #248]	; 11354 <__assert_fail@plt+0x4c8>
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	bl	10de4 <__printf_chk@plt>
   11264:	mov	r2, #5
   11268:	ldr	r1, [pc, #244]	; 11364 <__assert_fail@plt+0x4d8>
   1126c:	mov	r0, #0
   11270:	bl	10cc4 <dcgettext@plt>
   11274:	mov	r1, r0
   11278:	ldr	r3, [pc, #236]	; 1136c <__assert_fail@plt+0x4e0>
   1127c:	b	11208 <__assert_fail@plt+0x37c>
   11280:	mov	r2, #5
   11284:	ldr	r1, [pc, #196]	; 11350 <__assert_fail@plt+0x4c4>
   11288:	mov	r0, #0
   1128c:	bl	10cc4 <dcgettext@plt>
   11290:	ldr	r3, [pc, #188]	; 11354 <__assert_fail@plt+0x4c8>
   11294:	ldr	r2, [pc, #188]	; 11358 <__assert_fail@plt+0x4cc>
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	bl	10de4 <__printf_chk@plt>
   112a4:	mov	r1, #0
   112a8:	mov	r0, #5
   112ac:	bl	10e20 <setlocale@plt>
   112b0:	cmp	r0, #0
   112b4:	beq	1123c <__assert_fail@plt+0x3b0>
   112b8:	mov	r2, #3
   112bc:	ldr	r1, [pc, #152]	; 1135c <__assert_fail@plt+0x4d0>
   112c0:	bl	10e68 <strncmp@plt>
   112c4:	cmp	r0, #0
   112c8:	bne	11218 <__assert_fail@plt+0x38c>
   112cc:	mov	r2, #5
   112d0:	ldr	r1, [pc, #136]	; 11360 <__assert_fail@plt+0x4d4>
   112d4:	mov	r0, #0
   112d8:	bl	10cc4 <dcgettext@plt>
   112dc:	ldr	r4, [pc, #104]	; 1134c <__assert_fail@plt+0x4c0>
   112e0:	mov	r3, r4
   112e4:	ldr	r2, [pc, #104]	; 11354 <__assert_fail@plt+0x4c8>
   112e8:	mov	r1, r0
   112ec:	mov	r0, #1
   112f0:	bl	10de4 <__printf_chk@plt>
   112f4:	mov	r2, #5
   112f8:	ldr	r1, [pc, #100]	; 11364 <__assert_fail@plt+0x4d8>
   112fc:	mov	r0, #0
   11300:	bl	10cc4 <dcgettext@plt>
   11304:	mov	r1, r0
   11308:	ldr	r3, [pc, #92]	; 1136c <__assert_fail@plt+0x4e0>
   1130c:	b	11208 <__assert_fail@plt+0x37c>
   11310:	andeq	r7, r2, r0, asr #2
   11314:	ldrdeq	r5, [r1], -ip
   11318:	andeq	r7, r2, r0, ror #2
   1131c:	andeq	r5, r1, r4, lsl #26
   11320:	andeq	r5, r1, r4, lsr #26
   11324:	andeq	r7, r2, r4, asr #2
   11328:	andeq	r5, r1, r8, lsr lr
   1132c:	andeq	r5, r1, r4, lsl #29
   11330:			; <UNDEFINED> instruction: 0x00015eb8
   11334:	andeq	r5, r1, r8, lsl #30
   11338:	andeq	r5, r1, r8, ror pc
   1133c:	andeq	r5, r1, r8, lsr #31
   11340:	andeq	r5, r1, r0, ror #31
   11344:	strheq	r6, [r1], -r4
   11348:	andeq	r5, r1, r8, lsr #24
   1134c:	ldrdeq	r5, [r1], -r0
   11350:	andeq	r6, r1, r4, ror r1
   11354:	andeq	r6, r1, ip, lsl #3
   11358:			; <UNDEFINED> instruction: 0x000161b4
   1135c:	andeq	r6, r1, r4, asr #3
   11360:	andeq	r6, r1, r0, lsl r2
   11364:	andeq	r6, r1, ip, lsr #4
   11368:	andeq	r5, r1, r0, lsr #26
   1136c:	andeq	r6, r1, r8, lsr #9
   11370:	andeq	r6, r1, r8, asr #3
   11374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11378:	sub	sp, sp, #188	; 0xbc
   1137c:	mov	r7, r0
   11380:	mov	r6, r1
   11384:	ldr	r0, [r1]
   11388:	bl	121b4 <__assert_fail@plt+0x1328>
   1138c:	ldr	r1, [pc, #3192]	; 1200c <__assert_fail@plt+0x1180>
   11390:	mov	r0, #6
   11394:	bl	10e20 <setlocale@plt>
   11398:	ldr	r4, [pc, #3184]	; 12010 <__assert_fail@plt+0x1184>
   1139c:	ldr	r1, [pc, #3184]	; 12014 <__assert_fail@plt+0x1188>
   113a0:	mov	r0, r4
   113a4:	bl	10e50 <bindtextdomain@plt>
   113a8:	mov	r0, r4
   113ac:	bl	10cdc <textdomain@plt>
   113b0:	ldr	r0, [pc, #3168]	; 12018 <__assert_fail@plt+0x118c>
   113b4:	bl	15c04 <__assert_fail@plt+0x4d78>
   113b8:	mov	fp, #0
   113bc:	mov	r2, #0
   113c0:	mov	r3, #0
   113c4:	strd	r2, [sp, #24]
   113c8:	mov	r4, fp
   113cc:	ldr	r9, [pc, #3144]	; 1201c <__assert_fail@plt+0x1190>
   113d0:	ldr	r8, [pc, #3144]	; 12020 <__assert_fail@plt+0x1194>
   113d4:	ldr	sl, [pc, #3144]	; 12024 <__assert_fail@plt+0x1198>
   113d8:	ldr	r5, [pc, #3144]	; 12028 <__assert_fail@plt+0x119c>
   113dc:	mov	r3, #0
   113e0:	str	r3, [sp]
   113e4:	mov	r3, r9
   113e8:	mov	r2, r8
   113ec:	mov	r1, r6
   113f0:	mov	r0, r7
   113f4:	bl	10d84 <getopt_long@plt>
   113f8:	cmn	r0, #1
   113fc:	beq	11664 <__assert_fail@plt+0x7d8>
   11400:	cmp	r0, #99	; 0x63
   11404:	beq	1144c <__assert_fail@plt+0x5c0>
   11408:	ble	1142c <__assert_fail@plt+0x5a0>
   1140c:	cmp	r0, #114	; 0x72
   11410:	beq	11464 <__assert_fail@plt+0x5d8>
   11414:	cmp	r0, #115	; 0x73
   11418:	beq	11444 <__assert_fail@plt+0x5b8>
   1141c:	cmp	r0, #111	; 0x6f
   11420:	beq	11458 <__assert_fail@plt+0x5cc>
   11424:	mov	r0, #1
   11428:	bl	10fc0 <__assert_fail@plt+0x134>
   1142c:	cmn	r0, #3
   11430:	beq	11630 <__assert_fail@plt+0x7a4>
   11434:	cmn	r0, #2
   11438:	bne	11424 <__assert_fail@plt+0x598>
   1143c:	mov	r0, #0
   11440:	bl	10fc0 <__assert_fail@plt+0x134>
   11444:	bl	10d90 <__ctype_b_loc@plt>
   11448:	b	11478 <__assert_fail@plt+0x5ec>
   1144c:	mov	r3, #1
   11450:	strb	r3, [sl]
   11454:	b	113dc <__assert_fail@plt+0x550>
   11458:	mov	r3, #1
   1145c:	strb	r3, [sl, #1]
   11460:	b	113dc <__assert_fail@plt+0x550>
   11464:	ldr	r3, [r5]
   11468:	str	r3, [sl, #4]
   1146c:	b	113dc <__assert_fail@plt+0x550>
   11470:	add	r3, r3, #1
   11474:	str	r3, [r5]
   11478:	ldr	r3, [r5]
   1147c:	ldrb	r2, [r3]
   11480:	ldr	ip, [r0]
   11484:	lsl	r1, r2, #1
   11488:	ldrh	r1, [ip, r1]
   1148c:	tst	r1, #8192	; 0x2000
   11490:	bne	11470 <__assert_fail@plt+0x5e4>
   11494:	cmp	r2, #47	; 0x2f
   11498:	beq	1157c <__assert_fail@plt+0x6f0>
   1149c:	bls	114bc <__assert_fail@plt+0x630>
   114a0:	cmp	r2, #60	; 0x3c
   114a4:	beq	1156c <__assert_fail@plt+0x6e0>
   114a8:	cmp	r2, #62	; 0x3e
   114ac:	addeq	r3, r3, #1
   114b0:	streq	r3, [r5]
   114b4:	moveq	fp, #2
   114b8:	b	114cc <__assert_fail@plt+0x640>
   114bc:	cmp	r2, #37	; 0x25
   114c0:	addeq	r3, r3, #1
   114c4:	streq	r3, [r5]
   114c8:	moveq	fp, #5
   114cc:	ldr	r4, [r5]
   114d0:	ldrb	r3, [r4]
   114d4:	ldr	r1, [r0]
   114d8:	lsl	r2, r3, #1
   114dc:	ldrh	r2, [r1, r2]
   114e0:	tst	r2, #8192	; 0x2000
   114e4:	beq	11508 <__assert_fail@plt+0x67c>
   114e8:	add	r4, r4, #1
   114ec:	str	r4, [r5]
   114f0:	ldrb	r3, [r4]
   114f4:	ldr	r1, [r0]
   114f8:	lsl	r2, r3, #1
   114fc:	ldrh	r2, [r1, r2]
   11500:	tst	r2, #8192	; 0x2000
   11504:	bne	114e8 <__assert_fail@plt+0x65c>
   11508:	sub	r3, r3, #43	; 0x2b
   1150c:	tst	r3, #253	; 0xfd
   11510:	bne	115b4 <__assert_fail@plt+0x728>
   11514:	cmp	fp, #0
   11518:	bne	1158c <__assert_fail@plt+0x700>
   1151c:	mov	r2, #5
   11520:	ldr	r1, [pc, #2820]	; 1202c <__assert_fail@plt+0x11a0>
   11524:	mov	r0, #0
   11528:	bl	10cc4 <dcgettext@plt>
   1152c:	mov	r3, #0
   11530:	str	r3, [sp, #16]
   11534:	str	r0, [sp, #12]
   11538:	ldr	r3, [pc, #2800]	; 12030 <__assert_fail@plt+0x11a4>
   1153c:	str	r3, [sp, #8]
   11540:	mvn	r2, #0
   11544:	mvn	r3, #-2147483648	; 0x80000000
   11548:	strd	r2, [sp]
   1154c:	mov	r2, #0
   11550:	mov	r3, #-2147483648	; 0x80000000
   11554:	mov	r0, r4
   11558:	bl	149d4 <__assert_fail@plt+0x3b48>
   1155c:	strd	r0, [sp, #24]
   11560:	mov	fp, #1
   11564:	mov	r4, fp
   11568:	b	113dc <__assert_fail@plt+0x550>
   1156c:	add	r3, r3, #1
   11570:	str	r3, [r5]
   11574:	mov	fp, #3
   11578:	b	114cc <__assert_fail@plt+0x640>
   1157c:	add	r3, r3, #1
   11580:	str	r3, [r5]
   11584:	mov	fp, #4
   11588:	b	114cc <__assert_fail@plt+0x640>
   1158c:	mov	r2, #5
   11590:	ldr	r1, [pc, #2716]	; 12034 <__assert_fail@plt+0x11a8>
   11594:	mov	r0, #0
   11598:	bl	10cc4 <dcgettext@plt>
   1159c:	mov	r2, r0
   115a0:	mov	r1, #0
   115a4:	mov	r0, r1
   115a8:	bl	10d3c <error@plt>
   115ac:	mov	r0, #1
   115b0:	bl	10fc0 <__assert_fail@plt+0x134>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #2668]	; 1202c <__assert_fail@plt+0x11a0>
   115bc:	mov	r0, #0
   115c0:	bl	10cc4 <dcgettext@plt>
   115c4:	mov	r3, #0
   115c8:	str	r3, [sp, #16]
   115cc:	str	r0, [sp, #12]
   115d0:	ldr	r3, [pc, #2648]	; 12030 <__assert_fail@plt+0x11a4>
   115d4:	str	r3, [sp, #8]
   115d8:	mvn	r2, #0
   115dc:	mvn	r3, #-2147483648	; 0x80000000
   115e0:	strd	r2, [sp]
   115e4:	mov	r2, #0
   115e8:	mov	r3, #-2147483648	; 0x80000000
   115ec:	mov	r0, r4
   115f0:	bl	149d4 <__assert_fail@plt+0x3b48>
   115f4:	strd	r0, [sp, #24]
   115f8:	sub	r3, fp, #4
   115fc:	orr	r2, r0, r1
   11600:	cmp	r3, #1
   11604:	cmpls	r2, #0
   11608:	movne	r4, #1
   1160c:	bne	113dc <__assert_fail@plt+0x550>
   11610:	mov	r2, #5
   11614:	ldr	r1, [pc, #2588]	; 12038 <__assert_fail@plt+0x11ac>
   11618:	mov	r0, #0
   1161c:	bl	10cc4 <dcgettext@plt>
   11620:	mov	r2, r0
   11624:	mov	r1, #0
   11628:	mov	r0, #1
   1162c:	bl	10d3c <error@plt>
   11630:	mov	r4, #0
   11634:	str	r4, [sp, #4]
   11638:	ldr	r3, [pc, #2556]	; 1203c <__assert_fail@plt+0x11b0>
   1163c:	str	r3, [sp]
   11640:	ldr	r3, [pc, #2552]	; 12040 <__assert_fail@plt+0x11b4>
   11644:	ldr	r3, [r3]
   11648:	ldr	r2, [pc, #2548]	; 12044 <__assert_fail@plt+0x11b8>
   1164c:	ldr	r1, [pc, #2548]	; 12048 <__assert_fail@plt+0x11bc>
   11650:	ldr	r0, [pc, #2548]	; 1204c <__assert_fail@plt+0x11c0>
   11654:	ldr	r0, [r0]
   11658:	bl	141d0 <__assert_fail@plt+0x3344>
   1165c:	mov	r0, r4
   11660:	bl	10d9c <exit@plt>
   11664:	ldr	r3, [pc, #2532]	; 12050 <__assert_fail@plt+0x11c4>
   11668:	ldr	r3, [r3]
   1166c:	lsl	r5, r3, #2
   11670:	sub	r7, r7, r3
   11674:	ldr	r3, [pc, #2472]	; 12024 <__assert_fail@plt+0x1198>
   11678:	ldr	r8, [r3, #4]
   1167c:	cmp	r8, #0
   11680:	moveq	r3, r4
   11684:	orrne	r3, r4, #1
   11688:	str	r3, [sp, #52]	; 0x34
   1168c:	cmp	r3, #0
   11690:	beq	1175c <__assert_fail@plt+0x8d0>
   11694:	cmp	r8, #0
   11698:	beq	11fe8 <__assert_fail@plt+0x115c>
   1169c:	cmp	fp, #0
   116a0:	movne	r3, #0
   116a4:	andeq	r3, r4, #1
   116a8:	cmp	r3, #0
   116ac:	bne	117ac <__assert_fail@plt+0x920>
   116b0:	ldr	r3, [pc, #2412]	; 12024 <__assert_fail@plt+0x1198>
   116b4:	ldrb	r3, [r3, #1]
   116b8:	eor	r3, r3, #1
   116bc:	orrs	r3, r4, r3
   116c0:	beq	117fc <__assert_fail@plt+0x970>
   116c4:	cmp	r7, #0
   116c8:	ble	1184c <__assert_fail@plt+0x9c0>
   116cc:	add	r2, sp, #80	; 0x50
   116d0:	mov	r1, r8
   116d4:	mov	r0, #3
   116d8:	bl	10e5c <__xstat64@plt>
   116dc:	cmp	r0, #0
   116e0:	bne	11874 <__assert_fail@plt+0x9e8>
   116e4:	ldr	r3, [sp, #96]	; 0x60
   116e8:	and	r3, r3, #53248	; 0xd000
   116ec:	cmp	r3, #32768	; 0x8000
   116f0:	bne	118b0 <__assert_fail@plt+0xa24>
   116f4:	ldrd	r8, [sp, #128]	; 0x80
   116f8:	cmp	r8, #0
   116fc:	sbcs	r3, r9, #0
   11700:	blt	11910 <__assert_fail@plt+0xa84>
   11704:	cmp	r4, #0
   11708:	beq	11950 <__assert_fail@plt+0xac4>
   1170c:	strd	r8, [sp, #56]	; 0x38
   11710:	ldrd	r8, [sp, #24]
   11714:	strd	r8, [sp, #24]
   11718:	ldr	r3, [pc, #2308]	; 12024 <__assert_fail@plt+0x1198>
   1171c:	ldrb	r1, [r3]
   11720:	ldr	r3, [pc, #2348]	; 12054 <__assert_fail@plt+0x11c8>
   11724:	ldr	r2, [pc, #2348]	; 12058 <__assert_fail@plt+0x11cc>
   11728:	cmp	r1, #0
   1172c:	moveq	r2, r3
   11730:	str	r2, [sp, #48]	; 0x30
   11734:	sub	r5, r5, #4
   11738:	add	r9, r6, r5
   1173c:	mov	r3, #0
   11740:	str	r3, [sp, #36]	; 0x24
   11744:	ldr	r6, [pc, #2264]	; 12024 <__assert_fail@plt+0x1198>
   11748:	ldrd	r2, [sp, #24]
   1174c:	adds	r2, r2, #0
   11750:	adc	r3, r3, #-2147483648	; 0x80000000
   11754:	strd	r2, [sp, #72]	; 0x48
   11758:	b	119c0 <__assert_fail@plt+0xb34>
   1175c:	mov	r2, #5
   11760:	ldr	r1, [pc, #2292]	; 1205c <__assert_fail@plt+0x11d0>
   11764:	mov	r0, #0
   11768:	bl	10cc4 <dcgettext@plt>
   1176c:	mov	r4, r0
   11770:	ldr	r1, [pc, #2280]	; 12060 <__assert_fail@plt+0x11d4>
   11774:	mov	r0, #0
   11778:	bl	13cf4 <__assert_fail@plt+0x2e68>
   1177c:	mov	r5, r0
   11780:	ldr	r1, [pc, #2268]	; 12064 <__assert_fail@plt+0x11d8>
   11784:	mov	r0, #1
   11788:	bl	13cf4 <__assert_fail@plt+0x2e68>
   1178c:	str	r0, [sp]
   11790:	mov	r3, r5
   11794:	mov	r2, r4
   11798:	mov	r1, #0
   1179c:	mov	r0, r1
   117a0:	bl	10d3c <error@plt>
   117a4:	mov	r0, #1
   117a8:	bl	10fc0 <__assert_fail@plt+0x134>
   117ac:	mov	r2, #5
   117b0:	ldr	r1, [pc, #2224]	; 12068 <__assert_fail@plt+0x11dc>
   117b4:	mov	r0, #0
   117b8:	bl	10cc4 <dcgettext@plt>
   117bc:	mov	r4, r0
   117c0:	ldr	r1, [pc, #2200]	; 12060 <__assert_fail@plt+0x11d4>
   117c4:	mov	r0, #0
   117c8:	bl	13cf4 <__assert_fail@plt+0x2e68>
   117cc:	mov	r5, r0
   117d0:	ldr	r1, [pc, #2188]	; 12064 <__assert_fail@plt+0x11d8>
   117d4:	mov	r0, #1
   117d8:	bl	13cf4 <__assert_fail@plt+0x2e68>
   117dc:	str	r0, [sp]
   117e0:	mov	r3, r5
   117e4:	mov	r2, r4
   117e8:	mov	r1, #0
   117ec:	mov	r0, r1
   117f0:	bl	10d3c <error@plt>
   117f4:	mov	r0, #1
   117f8:	bl	10fc0 <__assert_fail@plt+0x134>
   117fc:	mov	r2, #5
   11800:	ldr	r1, [pc, #2148]	; 1206c <__assert_fail@plt+0x11e0>
   11804:	mov	r0, #0
   11808:	bl	10cc4 <dcgettext@plt>
   1180c:	mov	r4, r0
   11810:	ldr	r1, [pc, #2136]	; 12070 <__assert_fail@plt+0x11e4>
   11814:	mov	r0, #0
   11818:	bl	13cf4 <__assert_fail@plt+0x2e68>
   1181c:	mov	r5, r0
   11820:	ldr	r1, [pc, #2104]	; 12060 <__assert_fail@plt+0x11d4>
   11824:	mov	r0, #1
   11828:	bl	13cf4 <__assert_fail@plt+0x2e68>
   1182c:	str	r0, [sp]
   11830:	mov	r3, r5
   11834:	mov	r2, r4
   11838:	mov	r1, #0
   1183c:	mov	r0, r1
   11840:	bl	10d3c <error@plt>
   11844:	mov	r0, #1
   11848:	bl	10fc0 <__assert_fail@plt+0x134>
   1184c:	mov	r2, #5
   11850:	ldr	r1, [pc, #2076]	; 12074 <__assert_fail@plt+0x11e8>
   11854:	mov	r0, #0
   11858:	bl	10cc4 <dcgettext@plt>
   1185c:	mov	r2, r0
   11860:	mov	r1, #0
   11864:	mov	r0, r1
   11868:	bl	10d3c <error@plt>
   1186c:	mov	r0, #1
   11870:	bl	10fc0 <__assert_fail@plt+0x134>
   11874:	bl	10dc0 <__errno_location@plt>
   11878:	ldr	r4, [r0]
   1187c:	mov	r2, #5
   11880:	ldr	r1, [pc, #2032]	; 12078 <__assert_fail@plt+0x11ec>
   11884:	mov	r0, #0
   11888:	bl	10cc4 <dcgettext@plt>
   1188c:	mov	r5, r0
   11890:	mov	r1, r8
   11894:	mov	r0, #4
   11898:	bl	13ad0 <__assert_fail@plt+0x2c44>
   1189c:	mov	r3, r0
   118a0:	mov	r2, r5
   118a4:	mov	r1, r4
   118a8:	mov	r0, #1
   118ac:	bl	10d3c <error@plt>
   118b0:	mov	r1, #0
   118b4:	mov	r0, r8
   118b8:	bl	10d48 <open64@plt>
   118bc:	subs	r7, r0, #0
   118c0:	blt	11910 <__assert_fail@plt+0xa84>
   118c4:	mov	r3, #2
   118c8:	str	r3, [sp]
   118cc:	mov	r2, #0
   118d0:	mov	r3, #0
   118d4:	mov	r0, r7
   118d8:	bl	10d0c <lseek64@plt>
   118dc:	mov	r8, r0
   118e0:	mov	r9, r1
   118e4:	bl	10dc0 <__errno_location@plt>
   118e8:	mov	sl, r0
   118ec:	ldr	r3, [r0]
   118f0:	str	r3, [sp, #36]	; 0x24
   118f4:	mov	r0, r7
   118f8:	bl	10e80 <close@plt>
   118fc:	cmp	r8, #0
   11900:	sbcs	r3, r9, #0
   11904:	bge	11704 <__assert_fail@plt+0x878>
   11908:	ldr	r3, [sp, #36]	; 0x24
   1190c:	str	r3, [sl]
   11910:	bl	10dc0 <__errno_location@plt>
   11914:	ldr	r4, [r0]
   11918:	mov	r2, #5
   1191c:	ldr	r1, [pc, #1880]	; 1207c <__assert_fail@plt+0x11f0>
   11920:	mov	r0, #0
   11924:	bl	10cc4 <dcgettext@plt>
   11928:	mov	r5, r0
   1192c:	ldr	r3, [pc, #1776]	; 12024 <__assert_fail@plt+0x1198>
   11930:	ldr	r1, [r3, #4]
   11934:	mov	r0, #4
   11938:	bl	13ad0 <__assert_fail@plt+0x2c44>
   1193c:	mov	r3, r0
   11940:	mov	r2, r5
   11944:	mov	r1, r4
   11948:	mov	r0, #1
   1194c:	bl	10d3c <error@plt>
   11950:	mvn	r2, #0
   11954:	mvn	r3, #0
   11958:	strd	r2, [sp, #56]	; 0x38
   1195c:	b	11714 <__assert_fail@plt+0x888>
   11960:	ldrb	r3, [r6]
   11964:	cmp	r3, #0
   11968:	beq	1197c <__assert_fail@plt+0xaf0>
   1196c:	bl	10dc0 <__errno_location@plt>
   11970:	ldr	r3, [r0]
   11974:	cmp	r3, #2
   11978:	beq	119c0 <__assert_fail@plt+0xb34>
   1197c:	bl	10dc0 <__errno_location@plt>
   11980:	ldr	r5, [r0]
   11984:	mov	r2, #5
   11988:	ldr	r1, [pc, #1776]	; 12080 <__assert_fail@plt+0x11f4>
   1198c:	mov	r0, #0
   11990:	bl	10cc4 <dcgettext@plt>
   11994:	mov	r7, r0
   11998:	mov	r1, r4
   1199c:	mov	r0, #4
   119a0:	bl	13ad0 <__assert_fail@plt+0x2c44>
   119a4:	mov	r3, r0
   119a8:	mov	r2, r7
   119ac:	mov	r1, r5
   119b0:	mov	r0, #0
   119b4:	bl	10d3c <error@plt>
   119b8:	ldr	r3, [sp, #52]	; 0x34
   119bc:	str	r3, [sp, #36]	; 0x24
   119c0:	ldr	r4, [r9, #4]!
   119c4:	cmp	r4, #0
   119c8:	beq	12000 <__assert_fail@plt+0x1174>
   119cc:	ldr	r2, [pc, #1712]	; 12084 <__assert_fail@plt+0x11f8>
   119d0:	ldr	r1, [sp, #48]	; 0x30
   119d4:	mov	r0, r4
   119d8:	bl	10d48 <open64@plt>
   119dc:	subs	sl, r0, #0
   119e0:	blt	11960 <__assert_fail@plt+0xad4>
   119e4:	ldrb	r3, [r6, #1]
   119e8:	cmp	r3, #0
   119ec:	bne	11f5c <__assert_fail@plt+0x10d0>
   119f0:	ldr	r3, [sp, #60]	; 0x3c
   119f4:	lsr	r3, r3, #31
   119f8:	cmp	fp, #0
   119fc:	moveq	r3, #0
   11a00:	andne	r3, r3, #1
   11a04:	cmp	r3, #0
   11a08:	bne	11fc4 <__assert_fail@plt+0x1138>
   11a0c:	ldrd	r2, [sp, #24]
   11a10:	strd	r2, [sp, #40]	; 0x28
   11a14:	cmp	fp, #0
   11a18:	beq	11e6c <__assert_fail@plt+0xfe0>
   11a1c:	ldrd	r2, [sp, #56]	; 0x38
   11a20:	cmp	r2, #0
   11a24:	sbcs	r3, r3, #0
   11a28:	blt	11c9c <__assert_fail@plt+0xe10>
   11a2c:	ldrd	r2, [sp, #56]	; 0x38
   11a30:	strd	r2, [sp, #64]	; 0x40
   11a34:	cmp	fp, #2
   11a38:	beq	11d70 <__assert_fail@plt+0xee4>
   11a3c:	cmp	fp, #3
   11a40:	beq	11d88 <__assert_fail@plt+0xefc>
   11a44:	cmp	fp, #4
   11a48:	beq	11da0 <__assert_fail@plt+0xf14>
   11a4c:	cmp	fp, #5
   11a50:	beq	11dc0 <__assert_fail@plt+0xf34>
   11a54:	ldrd	r2, [sp, #40]	; 0x28
   11a58:	cmp	r2, #0
   11a5c:	sbcs	r3, r3, #0
   11a60:	blt	11de8 <__assert_fail@plt+0xf5c>
   11a64:	ldrd	r2, [sp, #64]	; 0x40
   11a68:	cmp	r2, #0
   11a6c:	sbcs	r3, r3, #0
   11a70:	blt	11e24 <__assert_fail@plt+0xf98>
   11a74:	mvn	r2, #0
   11a78:	mvn	r3, #-2147483648	; 0x80000000
   11a7c:	ldrd	r0, [sp, #40]	; 0x28
   11a80:	subs	r0, r2, r0
   11a84:	sbc	r1, r3, r1
   11a88:	mov	r2, r0
   11a8c:	mov	r3, r1
   11a90:	ldrd	r0, [sp, #64]	; 0x40
   11a94:	cmp	r2, r0
   11a98:	sbcs	r3, r3, r1
   11a9c:	movlt	r3, #1
   11aa0:	movge	r3, #0
   11aa4:	cmp	r3, #0
   11aa8:	beq	11e58 <__assert_fail@plt+0xfcc>
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #1488]	; 12088 <__assert_fail@plt+0x11fc>
   11ab4:	mov	r0, #0
   11ab8:	bl	10cc4 <dcgettext@plt>
   11abc:	mov	r5, r0
   11ac0:	mov	r1, r4
   11ac4:	mov	r0, #4
   11ac8:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11acc:	mov	r3, r0
   11ad0:	mov	r2, r5
   11ad4:	mov	r1, #0
   11ad8:	mov	r0, r1
   11adc:	bl	10d3c <error@plt>
   11ae0:	mov	r5, #0
   11ae4:	b	11ea4 <__assert_fail@plt+0x1018>
   11ae8:	bl	10dc0 <__errno_location@plt>
   11aec:	ldr	r5, [r0]
   11af0:	mov	r2, #5
   11af4:	ldr	r1, [pc, #1424]	; 1208c <__assert_fail@plt+0x1200>
   11af8:	mov	r0, #0
   11afc:	bl	10cc4 <dcgettext@plt>
   11b00:	mov	r7, r0
   11b04:	mov	r1, r4
   11b08:	mov	r0, #4
   11b0c:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11b10:	mov	r3, r0
   11b14:	mov	r2, r7
   11b18:	mov	r1, r5
   11b1c:	mov	r0, #0
   11b20:	bl	10d3c <error@plt>
   11b24:	mov	r5, #0
   11b28:	b	11ea4 <__assert_fail@plt+0x1018>
   11b2c:	ldrd	r2, [sp, #24]
   11b30:	cmp	r2, #0
   11b34:	sbcs	r3, r3, #0
   11b38:	blt	11b70 <__assert_fail@plt+0xce4>
   11b3c:	cmn	r5, #1
   11b40:	beq	11b9c <__assert_fail@plt+0xd10>
   11b44:	mov	r2, r5
   11b48:	asr	r3, r5, #31
   11b4c:	mov	r0, #0
   11b50:	mov	r1, #-2147483648	; 0x80000000
   11b54:	bl	15994 <__assert_fail@plt+0x4b08>
   11b58:	ldrd	r2, [sp, #24]
   11b5c:	cmp	r0, r2
   11b60:	sbcs	r3, r1, r3
   11b64:	movlt	r3, #1
   11b68:	movge	r3, #0
   11b6c:	b	11bec <__assert_fail@plt+0xd60>
   11b70:	mov	r2, r5
   11b74:	asr	r3, r5, #31
   11b78:	mvn	r0, #0
   11b7c:	mvn	r1, #-2147483648	; 0x80000000
   11b80:	bl	15994 <__assert_fail@plt+0x4b08>
   11b84:	ldrd	r2, [sp, #24]
   11b88:	cmp	r2, r0
   11b8c:	sbcs	r3, r3, r1
   11b90:	movlt	r3, #1
   11b94:	movge	r3, #0
   11b98:	b	11bec <__assert_fail@plt+0xd60>
   11b9c:	ldrd	r2, [sp, #72]	; 0x48
   11ba0:	cmp	r2, #1
   11ba4:	sbcs	r3, r3, #0
   11ba8:	movge	r3, #1
   11bac:	movlt	r3, #0
   11bb0:	b	11bec <__assert_fail@plt+0xd60>
   11bb4:	ldrd	r2, [sp, #24]
   11bb8:	cmp	r2, #0
   11bbc:	sbcs	r3, r3, #0
   11bc0:	blt	11c3c <__assert_fail@plt+0xdb0>
   11bc4:	mov	r2, r5
   11bc8:	asr	r3, r5, #31
   11bcc:	mvn	r0, #0
   11bd0:	mvn	r1, #-2147483648	; 0x80000000
   11bd4:	bl	15994 <__assert_fail@plt+0x4b08>
   11bd8:	ldrd	r2, [sp, #24]
   11bdc:	cmp	r0, r2
   11be0:	sbcs	r3, r1, r3
   11be4:	movlt	r3, #1
   11be8:	movge	r3, #0
   11bec:	cmp	r3, #0
   11bf0:	beq	11f9c <__assert_fail@plt+0x1110>
   11bf4:	mov	r2, #5
   11bf8:	ldr	r1, [pc, #1168]	; 12090 <__assert_fail@plt+0x1204>
   11bfc:	mov	r0, #0
   11c00:	bl	10cc4 <dcgettext@plt>
   11c04:	mov	r7, r0
   11c08:	mov	r1, r4
   11c0c:	mov	r0, #4
   11c10:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11c14:	str	r0, [sp, #12]
   11c18:	str	r5, [sp, #8]
   11c1c:	ldrd	r2, [sp, #24]
   11c20:	strd	r2, [sp]
   11c24:	mov	r2, r7
   11c28:	mov	r1, #0
   11c2c:	mov	r0, r1
   11c30:	bl	10d3c <error@plt>
   11c34:	mov	r5, #0
   11c38:	b	11ea4 <__assert_fail@plt+0x1018>
   11c3c:	ldrd	r2, [sp, #24]
   11c40:	mvn	r0, #0
   11c44:	mvn	r1, #0
   11c48:	cmp	r3, r1
   11c4c:	cmpeq	r2, r0
   11c50:	beq	11c7c <__assert_fail@plt+0xdf0>
   11c54:	ldrd	r2, [sp, #24]
   11c58:	mov	r0, #0
   11c5c:	mov	r1, #-2147483648	; 0x80000000
   11c60:	bl	15994 <__assert_fail@plt+0x4b08>
   11c64:	asr	r3, r5, #31
   11c68:	cmp	r0, r5
   11c6c:	sbcs	r3, r1, r3
   11c70:	movlt	r3, #1
   11c74:	movge	r3, #0
   11c78:	b	11bec <__assert_fail@plt+0xd60>
   11c7c:	asr	r3, r5, #31
   11c80:	adds	r2, r5, #0
   11c84:	adc	r3, r3, #-2147483648	; 0x80000000
   11c88:	cmp	r2, #1
   11c8c:	sbcs	r3, r3, #0
   11c90:	movge	r3, #1
   11c94:	movlt	r3, #0
   11c98:	b	11bec <__assert_fail@plt+0xd60>
   11c9c:	ldr	r3, [sp, #96]	; 0x60
   11ca0:	and	r3, r3, #53248	; 0xd000
   11ca4:	cmp	r3, #32768	; 0x8000
   11ca8:	bne	11cfc <__assert_fail@plt+0xe70>
   11cac:	ldrd	r2, [sp, #128]	; 0x80
   11cb0:	strd	r2, [sp, #64]	; 0x40
   11cb4:	cmp	r2, #0
   11cb8:	sbcs	r3, r3, #0
   11cbc:	bge	11a34 <__assert_fail@plt+0xba8>
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #968]	; 12094 <__assert_fail@plt+0x1208>
   11cc8:	mov	r0, #0
   11ccc:	bl	10cc4 <dcgettext@plt>
   11cd0:	mov	r5, r0
   11cd4:	mov	r1, r4
   11cd8:	mov	r0, #4
   11cdc:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11ce0:	mov	r3, r0
   11ce4:	mov	r2, r5
   11ce8:	mov	r1, #0
   11cec:	mov	r0, r1
   11cf0:	bl	10d3c <error@plt>
   11cf4:	mov	r5, #0
   11cf8:	b	11ea4 <__assert_fail@plt+0x1018>
   11cfc:	mov	r3, #2
   11d00:	str	r3, [sp]
   11d04:	mov	r2, #0
   11d08:	mov	r3, #0
   11d0c:	mov	r0, sl
   11d10:	bl	10d0c <lseek64@plt>
   11d14:	mov	r2, r0
   11d18:	mov	r3, r1
   11d1c:	strd	r2, [sp, #64]	; 0x40
   11d20:	cmp	r0, #0
   11d24:	sbcs	r3, r3, #0
   11d28:	bge	11a34 <__assert_fail@plt+0xba8>
   11d2c:	bl	10dc0 <__errno_location@plt>
   11d30:	ldr	r5, [r0]
   11d34:	mov	r2, #5
   11d38:	ldr	r1, [pc, #828]	; 1207c <__assert_fail@plt+0x11f0>
   11d3c:	mov	r0, #0
   11d40:	bl	10cc4 <dcgettext@plt>
   11d44:	mov	r7, r0
   11d48:	mov	r1, r4
   11d4c:	mov	r0, #4
   11d50:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11d54:	mov	r3, r0
   11d58:	mov	r2, r7
   11d5c:	mov	r1, r5
   11d60:	mov	r0, #0
   11d64:	bl	10d3c <error@plt>
   11d68:	mov	r5, #0
   11d6c:	b	11ea4 <__assert_fail@plt+0x1018>
   11d70:	ldrd	r0, [sp, #40]	; 0x28
   11d74:	ldrd	r2, [sp, #64]	; 0x40
   11d78:	cmp	r0, r2
   11d7c:	sbcs	r1, r1, r3
   11d80:	strdlt	r2, [sp, #40]	; 0x28
   11d84:	b	11e6c <__assert_fail@plt+0xfe0>
   11d88:	ldrd	r2, [sp, #64]	; 0x40
   11d8c:	ldrd	r0, [sp, #40]	; 0x28
   11d90:	cmp	r2, r0
   11d94:	sbcs	r1, r3, r1
   11d98:	strdlt	r2, [sp, #40]	; 0x28
   11d9c:	b	11e6c <__assert_fail@plt+0xfe0>
   11da0:	ldrd	r2, [sp, #40]	; 0x28
   11da4:	ldrd	r0, [sp, #64]	; 0x40
   11da8:	bl	15994 <__assert_fail@plt+0x4b08>
   11dac:	ldrd	r0, [sp, #64]	; 0x40
   11db0:	subs	r0, r0, r2
   11db4:	sbc	r1, r1, r3
   11db8:	strd	r0, [sp, #40]	; 0x28
   11dbc:	b	11e6c <__assert_fail@plt+0xfe0>
   11dc0:	ldrd	r2, [sp, #40]	; 0x28
   11dc4:	ldrd	r0, [sp, #64]	; 0x40
   11dc8:	bl	15994 <__assert_fail@plt+0x4b08>
   11dcc:	orrs	r1, r2, r3
   11dd0:	beq	11e1c <__assert_fail@plt+0xf90>
   11dd4:	ldrd	r0, [sp, #40]	; 0x28
   11dd8:	subs	r0, r0, r2
   11ddc:	sbc	r1, r1, r3
   11de0:	strd	r0, [sp, #40]	; 0x28
   11de4:	b	11a54 <__assert_fail@plt+0xbc8>
   11de8:	mov	r2, #0
   11dec:	mov	r3, #-2147483648	; 0x80000000
   11df0:	ldrd	r0, [sp, #40]	; 0x28
   11df4:	subs	r0, r2, r0
   11df8:	sbc	r1, r3, r1
   11dfc:	mov	r2, r0
   11e00:	mov	r3, r1
   11e04:	ldrd	r0, [sp, #64]	; 0x40
   11e08:	cmp	r0, r2
   11e0c:	sbcs	r3, r1, r3
   11e10:	movlt	r3, #1
   11e14:	movge	r3, #0
   11e18:	b	11aa4 <__assert_fail@plt+0xc18>
   11e1c:	strd	r2, [sp, #40]	; 0x28
   11e20:	b	11a64 <__assert_fail@plt+0xbd8>
   11e24:	mov	r2, #0
   11e28:	mov	r3, #-2147483648	; 0x80000000
   11e2c:	ldrd	r0, [sp, #64]	; 0x40
   11e30:	subs	r0, r2, r0
   11e34:	sbc	r1, r3, r1
   11e38:	mov	r2, r0
   11e3c:	mov	r3, r1
   11e40:	ldrd	r0, [sp, #40]	; 0x28
   11e44:	cmp	r0, r2
   11e48:	sbcs	r3, r1, r3
   11e4c:	movlt	r3, #1
   11e50:	movge	r3, #0
   11e54:	b	11aa4 <__assert_fail@plt+0xc18>
   11e58:	ldrd	r2, [sp, #64]	; 0x40
   11e5c:	ldrd	r0, [sp, #40]	; 0x28
   11e60:	adds	r2, r2, r0
   11e64:	adc	r3, r3, r1
   11e68:	strd	r2, [sp, #40]	; 0x28
   11e6c:	ldrd	r2, [sp, #40]	; 0x28
   11e70:	mov	r7, r2
   11e74:	mov	r5, r3
   11e78:	cmp	r2, #0
   11e7c:	sbcs	r3, r3, #0
   11e80:	movlt	r7, #0
   11e84:	movlt	r5, r7
   11e88:	mov	r2, r7
   11e8c:	mov	r3, r5
   11e90:	mov	r0, sl
   11e94:	bl	10ca0 <ftruncate64@plt>
   11e98:	cmp	r0, #0
   11e9c:	ldreq	r5, [sp, #52]	; 0x34
   11ea0:	bne	11ec8 <__assert_fail@plt+0x103c>
   11ea4:	mov	r0, sl
   11ea8:	bl	10e80 <close@plt>
   11eac:	cmp	r0, #0
   11eb0:	bne	11f14 <__assert_fail@plt+0x1088>
   11eb4:	eor	r5, r5, #1
   11eb8:	ldr	r3, [sp, #36]	; 0x24
   11ebc:	orr	r3, r3, r5
   11ec0:	str	r3, [sp, #36]	; 0x24
   11ec4:	b	119c0 <__assert_fail@plt+0xb34>
   11ec8:	bl	10dc0 <__errno_location@plt>
   11ecc:	ldr	r8, [r0]
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #444]	; 12098 <__assert_fail@plt+0x120c>
   11ed8:	mov	r0, #0
   11edc:	bl	10cc4 <dcgettext@plt>
   11ee0:	str	r0, [sp, #40]	; 0x28
   11ee4:	mov	r1, r4
   11ee8:	mov	r0, #4
   11eec:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11ef0:	str	r7, [sp]
   11ef4:	str	r5, [sp, #4]
   11ef8:	mov	r3, r0
   11efc:	ldr	r2, [sp, #40]	; 0x28
   11f00:	mov	r1, r8
   11f04:	mov	r0, #0
   11f08:	bl	10d3c <error@plt>
   11f0c:	mov	r5, #0
   11f10:	b	11ea4 <__assert_fail@plt+0x1018>
   11f14:	bl	10dc0 <__errno_location@plt>
   11f18:	ldr	r5, [r0]
   11f1c:	mov	r2, #5
   11f20:	ldr	r1, [pc, #372]	; 1209c <__assert_fail@plt+0x1210>
   11f24:	mov	r0, #0
   11f28:	bl	10cc4 <dcgettext@plt>
   11f2c:	mov	r7, r0
   11f30:	mov	r1, r4
   11f34:	mov	r0, #4
   11f38:	bl	13ad0 <__assert_fail@plt+0x2c44>
   11f3c:	mov	r3, r0
   11f40:	mov	r2, r7
   11f44:	mov	r1, r5
   11f48:	mov	r0, #0
   11f4c:	bl	10d3c <error@plt>
   11f50:	ldr	r3, [sp, #52]	; 0x34
   11f54:	str	r3, [sp, #36]	; 0x24
   11f58:	b	119c0 <__assert_fail@plt+0xb34>
   11f5c:	add	r2, sp, #80	; 0x50
   11f60:	mov	r1, sl
   11f64:	mov	r0, #3
   11f68:	bl	10cf4 <__fxstat64@plt>
   11f6c:	cmp	r0, #0
   11f70:	bne	11ae8 <__assert_fail@plt+0xc5c>
   11f74:	ldr	r5, [sp, #136]	; 0x88
   11f78:	sub	r3, r5, #1
   11f7c:	cmn	r3, #-536870911	; 0xe0000001
   11f80:	movhi	r5, #512	; 0x200
   11f84:	bhi	11bb4 <__assert_fail@plt+0xd28>
   11f88:	cmp	r5, #0
   11f8c:	blt	11b2c <__assert_fail@plt+0xca0>
   11f90:	cmp	r5, #0
   11f94:	moveq	r5, #0
   11f98:	bne	11bb4 <__assert_fail@plt+0xd28>
   11f9c:	asr	r1, r5, #31
   11fa0:	ldr	r3, [sp, #28]
   11fa4:	mul	r3, r5, r3
   11fa8:	ldr	r2, [sp, #24]
   11fac:	mla	r3, r2, r1, r3
   11fb0:	umull	r0, r1, r5, r2
   11fb4:	strd	r0, [sp, #40]	; 0x28
   11fb8:	add	r3, r3, r1
   11fbc:	str	r3, [sp, #44]	; 0x2c
   11fc0:	b	11a14 <__assert_fail@plt+0xb88>
   11fc4:	add	r2, sp, #80	; 0x50
   11fc8:	mov	r1, sl
   11fcc:	mov	r0, #3
   11fd0:	bl	10cf4 <__fxstat64@plt>
   11fd4:	cmp	r0, #0
   11fd8:	bne	11ae8 <__assert_fail@plt+0xc5c>
   11fdc:	ldrd	r2, [sp, #24]
   11fe0:	strd	r2, [sp, #40]	; 0x28
   11fe4:	b	11a14 <__assert_fail@plt+0xb88>
   11fe8:	cmp	r7, #0
   11fec:	ble	1184c <__assert_fail@plt+0x9c0>
   11ff0:	mvn	r2, #0
   11ff4:	mvn	r3, #0
   11ff8:	strd	r2, [sp, #56]	; 0x38
   11ffc:	b	11718 <__assert_fail@plt+0x88c>
   12000:	ldr	r0, [sp, #36]	; 0x24
   12004:	add	sp, sp, #188	; 0xbc
   12008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1200c:	andeq	r5, r1, r0, lsr #26
   12010:			; <UNDEFINED> instruction: 0x000161b8
   12014:	andeq	r6, r1, r0, ror #4
   12018:	andeq	r2, r1, r0, asr #1
   1201c:	andeq	r5, r1, r0, ror #24
   12020:	andeq	r6, r1, r4, ror #5
   12024:	andeq	r7, r2, r0, asr r1
   12028:	andeq	r7, r2, r8, asr #2
   1202c:	andeq	r6, r1, r0, lsr #5
   12030:			; <UNDEFINED> instruction: 0x000162b0
   12034:	andeq	r6, r1, r8, ror r2
   12038:	andeq	r6, r1, r0, asr #5
   1203c:	ldrdeq	r6, [r1], -r4
   12040:	andeq	r7, r2, r4, ror #1
   12044:			; <UNDEFINED> instruction: 0x000161b4
   12048:	ldrdeq	r5, [r1], -r0
   1204c:	andeq	r7, r2, r4, asr #2
   12050:	andeq	r7, r2, r8, lsr r1
   12054:	andeq	r0, r0, r1, asr #16
   12058:	andeq	r0, r0, r1, lsl #16
   1205c:	andeq	r6, r1, ip, ror #5
   12060:	andeq	r6, r1, r0, lsl r3
   12064:	andeq	r6, r1, r8, lsl r3
   12068:	andeq	r6, r1, r4, lsr #6
   1206c:	andeq	r6, r1, ip, asr #6
   12070:	andeq	r6, r1, ip, ror #6
   12074:	andeq	r6, r1, r8, ror r3
   12078:	muleq	r1, r0, r3
   1207c:	andeq	r6, r1, r0, lsr #7
   12080:			; <UNDEFINED> instruction: 0x000163bc
   12084:			; <UNDEFINED> instruction: 0x000001b6
   12088:	andeq	r6, r1, r4, asr #8
   1208c:	ldrdeq	r6, [r1], -r8
   12090:	andeq	r6, r1, r8, ror #7
   12094:	andeq	r6, r1, r8, lsl r4
   12098:	andeq	r6, r1, r8, ror #8
   1209c:	andeq	r6, r1, ip, lsl #9
   120a0:	ldr	r3, [pc, #4]	; 120ac <__assert_fail@plt+0x1220>
   120a4:	str	r0, [r3]
   120a8:	bx	lr
   120ac:	andeq	r7, r2, r8, asr r1
   120b0:	ldr	r3, [pc, #4]	; 120bc <__assert_fail@plt+0x1230>
   120b4:	strb	r0, [r3, #4]
   120b8:	bx	lr
   120bc:	andeq	r7, r2, r8, asr r1
   120c0:	push	{r4, r5, r6, lr}
   120c4:	sub	sp, sp, #8
   120c8:	ldr	r3, [pc, #200]	; 12198 <__assert_fail@plt+0x130c>
   120cc:	ldr	r0, [r3]
   120d0:	bl	150e4 <__assert_fail@plt+0x4258>
   120d4:	cmp	r0, #0
   120d8:	beq	120fc <__assert_fail@plt+0x1270>
   120dc:	ldr	r3, [pc, #184]	; 1219c <__assert_fail@plt+0x1310>
   120e0:	ldrb	r3, [r3, #4]
   120e4:	cmp	r3, #0
   120e8:	beq	12118 <__assert_fail@plt+0x128c>
   120ec:	bl	10dc0 <__errno_location@plt>
   120f0:	ldr	r3, [r0]
   120f4:	cmp	r3, #32
   120f8:	bne	12118 <__assert_fail@plt+0x128c>
   120fc:	ldr	r3, [pc, #156]	; 121a0 <__assert_fail@plt+0x1314>
   12100:	ldr	r0, [r3]
   12104:	bl	150e4 <__assert_fail@plt+0x4258>
   12108:	cmp	r0, #0
   1210c:	bne	1218c <__assert_fail@plt+0x1300>
   12110:	add	sp, sp, #8
   12114:	pop	{r4, r5, r6, pc}
   12118:	mov	r2, #5
   1211c:	ldr	r1, [pc, #128]	; 121a4 <__assert_fail@plt+0x1318>
   12120:	mov	r0, #0
   12124:	bl	10cc4 <dcgettext@plt>
   12128:	mov	r4, r0
   1212c:	ldr	r3, [pc, #104]	; 1219c <__assert_fail@plt+0x1310>
   12130:	ldr	r5, [r3]
   12134:	cmp	r5, #0
   12138:	beq	12170 <__assert_fail@plt+0x12e4>
   1213c:	bl	10dc0 <__errno_location@plt>
   12140:	ldr	r6, [r0]
   12144:	mov	r0, r5
   12148:	bl	13b7c <__assert_fail@plt+0x2cf0>
   1214c:	str	r4, [sp]
   12150:	mov	r3, r0
   12154:	ldr	r2, [pc, #76]	; 121a8 <__assert_fail@plt+0x131c>
   12158:	mov	r1, r6
   1215c:	mov	r0, #0
   12160:	bl	10d3c <error@plt>
   12164:	ldr	r3, [pc, #64]	; 121ac <__assert_fail@plt+0x1320>
   12168:	ldr	r0, [r3]
   1216c:	bl	10c7c <_exit@plt>
   12170:	bl	10dc0 <__errno_location@plt>
   12174:	mov	r3, r4
   12178:	ldr	r2, [pc, #48]	; 121b0 <__assert_fail@plt+0x1324>
   1217c:	ldr	r1, [r0]
   12180:	mov	r0, #0
   12184:	bl	10d3c <error@plt>
   12188:	b	12164 <__assert_fail@plt+0x12d8>
   1218c:	ldr	r3, [pc, #24]	; 121ac <__assert_fail@plt+0x1320>
   12190:	ldr	r0, [r3]
   12194:	bl	10c7c <_exit@plt>
   12198:	andeq	r7, r2, r4, asr #2
   1219c:	andeq	r7, r2, r8, asr r1
   121a0:	andeq	r7, r2, r0, asr #2
   121a4:	andeq	r6, r1, r8, asr r5
   121a8:	andeq	r6, r1, r4, ror #10
   121ac:	andeq	r7, r2, r8, ror #1
   121b0:	andeq	r6, r1, r8, ror #10
   121b4:	push	{r4, r5, r6, lr}
   121b8:	subs	r4, r0, #0
   121bc:	beq	12234 <__assert_fail@plt+0x13a8>
   121c0:	mov	r1, #47	; 0x2f
   121c4:	mov	r0, r4
   121c8:	bl	10e2c <strrchr@plt>
   121cc:	cmp	r0, #0
   121d0:	addne	r5, r0, #1
   121d4:	moveq	r5, r4
   121d8:	sub	r3, r5, r4
   121dc:	cmp	r3, #6
   121e0:	ble	12220 <__assert_fail@plt+0x1394>
   121e4:	mov	r2, #7
   121e8:	ldr	r1, [pc, #96]	; 12250 <__assert_fail@plt+0x13c4>
   121ec:	sub	r0, r5, #7
   121f0:	bl	10e68 <strncmp@plt>
   121f4:	cmp	r0, #0
   121f8:	bne	12220 <__assert_fail@plt+0x1394>
   121fc:	mov	r2, #3
   12200:	ldr	r1, [pc, #76]	; 12254 <__assert_fail@plt+0x13c8>
   12204:	mov	r0, r5
   12208:	bl	10e68 <strncmp@plt>
   1220c:	cmp	r0, #0
   12210:	addeq	r4, r5, #3
   12214:	ldreq	r3, [pc, #60]	; 12258 <__assert_fail@plt+0x13cc>
   12218:	streq	r4, [r3]
   1221c:	movne	r4, r5
   12220:	ldr	r3, [pc, #52]	; 1225c <__assert_fail@plt+0x13d0>
   12224:	str	r4, [r3]
   12228:	ldr	r3, [pc, #48]	; 12260 <__assert_fail@plt+0x13d4>
   1222c:	str	r4, [r3]
   12230:	pop	{r4, r5, r6, pc}
   12234:	ldr	r3, [pc, #40]	; 12264 <__assert_fail@plt+0x13d8>
   12238:	ldr	r3, [r3]
   1223c:	mov	r2, #55	; 0x37
   12240:	mov	r1, #1
   12244:	ldr	r0, [pc, #28]	; 12268 <__assert_fail@plt+0x13dc>
   12248:	bl	10d00 <fwrite@plt>
   1224c:	bl	10e74 <abort@plt>
   12250:	andeq	r6, r1, r4, lsr #11
   12254:	andeq	r6, r1, ip, lsr #11
   12258:	andeq	r7, r2, r0, lsr r1
   1225c:	andeq	r7, r2, r0, ror #2
   12260:	andeq	r7, r2, r4, lsr r1
   12264:	andeq	r7, r2, r0, asr #2
   12268:	andeq	r6, r1, ip, ror #10
   1226c:	push	{r4, r5, r6, lr}
   12270:	mov	r5, r0
   12274:	mov	r4, r1
   12278:	mov	r2, #48	; 0x30
   1227c:	mov	r1, #0
   12280:	bl	10dd8 <memset@plt>
   12284:	cmp	r4, #10
   12288:	beq	12298 <__assert_fail@plt+0x140c>
   1228c:	str	r4, [r5]
   12290:	mov	r0, r5
   12294:	pop	{r4, r5, r6, pc}
   12298:	bl	10e74 <abort@plt>
   1229c:	push	{r4, r5, r6, lr}
   122a0:	mov	r4, r0
   122a4:	mov	r5, r1
   122a8:	mov	r2, #5
   122ac:	mov	r1, r0
   122b0:	mov	r0, #0
   122b4:	bl	10cc4 <dcgettext@plt>
   122b8:	cmp	r4, r0
   122bc:	popne	{r4, r5, r6, pc}
   122c0:	bl	15368 <__assert_fail@plt+0x44dc>
   122c4:	ldrb	r3, [r0]
   122c8:	bic	r3, r3, #32
   122cc:	cmp	r3, #85	; 0x55
   122d0:	beq	1234c <__assert_fail@plt+0x14c0>
   122d4:	cmp	r3, #71	; 0x47
   122d8:	bne	123a8 <__assert_fail@plt+0x151c>
   122dc:	ldrb	r3, [r0, #1]
   122e0:	bic	r3, r3, #32
   122e4:	cmp	r3, #66	; 0x42
   122e8:	bne	123a8 <__assert_fail@plt+0x151c>
   122ec:	ldrb	r3, [r0, #2]
   122f0:	cmp	r3, #49	; 0x31
   122f4:	bne	123a8 <__assert_fail@plt+0x151c>
   122f8:	ldrb	r3, [r0, #3]
   122fc:	cmp	r3, #56	; 0x38
   12300:	bne	123a8 <__assert_fail@plt+0x151c>
   12304:	ldrb	r3, [r0, #4]
   12308:	cmp	r3, #48	; 0x30
   1230c:	bne	123a8 <__assert_fail@plt+0x151c>
   12310:	ldrb	r3, [r0, #5]
   12314:	cmp	r3, #51	; 0x33
   12318:	bne	123a8 <__assert_fail@plt+0x151c>
   1231c:	ldrb	r3, [r0, #6]
   12320:	cmp	r3, #48	; 0x30
   12324:	bne	123a8 <__assert_fail@plt+0x151c>
   12328:	ldrb	r3, [r0, #7]
   1232c:	cmp	r3, #0
   12330:	bne	123a8 <__assert_fail@plt+0x151c>
   12334:	ldrb	r2, [r4]
   12338:	ldr	r3, [pc, #124]	; 123bc <__assert_fail@plt+0x1530>
   1233c:	ldr	r0, [pc, #124]	; 123c0 <__assert_fail@plt+0x1534>
   12340:	cmp	r2, #96	; 0x60
   12344:	movne	r0, r3
   12348:	pop	{r4, r5, r6, pc}
   1234c:	ldrb	r3, [r0, #1]
   12350:	bic	r3, r3, #32
   12354:	cmp	r3, #84	; 0x54
   12358:	bne	123a8 <__assert_fail@plt+0x151c>
   1235c:	ldrb	r3, [r0, #2]
   12360:	bic	r3, r3, #32
   12364:	cmp	r3, #70	; 0x46
   12368:	bne	123a8 <__assert_fail@plt+0x151c>
   1236c:	ldrb	r3, [r0, #3]
   12370:	cmp	r3, #45	; 0x2d
   12374:	bne	123a8 <__assert_fail@plt+0x151c>
   12378:	ldrb	r3, [r0, #4]
   1237c:	cmp	r3, #56	; 0x38
   12380:	bne	123a8 <__assert_fail@plt+0x151c>
   12384:	ldrb	r3, [r0, #5]
   12388:	cmp	r3, #0
   1238c:	bne	123a8 <__assert_fail@plt+0x151c>
   12390:	ldrb	r2, [r4]
   12394:	ldr	r3, [pc, #40]	; 123c4 <__assert_fail@plt+0x1538>
   12398:	ldr	r0, [pc, #40]	; 123c8 <__assert_fail@plt+0x153c>
   1239c:	cmp	r2, #96	; 0x60
   123a0:	movne	r0, r3
   123a4:	pop	{r4, r5, r6, pc}
   123a8:	ldr	r3, [pc, #28]	; 123cc <__assert_fail@plt+0x1540>
   123ac:	ldr	r0, [pc, #28]	; 123d0 <__assert_fail@plt+0x1544>
   123b0:	cmp	r5, #9
   123b4:	movne	r0, r3
   123b8:	pop	{r4, r5, r6, pc}
   123bc:	andeq	r6, r1, r8, lsl #12
   123c0:	andeq	r6, r1, r4, lsl r6
   123c4:	andeq	r6, r1, r4, lsl #12
   123c8:	andeq	r6, r1, r8, lsl r6
   123cc:	andeq	r6, r1, ip, lsl #12
   123d0:	andeq	r6, r1, r0, lsl r6
   123d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d8:	sub	sp, sp, #116	; 0x74
   123dc:	str	r0, [sp, #36]	; 0x24
   123e0:	mov	sl, r1
   123e4:	str	r2, [sp, #52]	; 0x34
   123e8:	str	r3, [sp, #28]
   123ec:	ldr	r8, [sp, #152]	; 0x98
   123f0:	bl	10d18 <__ctype_get_mb_cur_max@plt>
   123f4:	str	r0, [sp, #84]	; 0x54
   123f8:	ldr	r3, [sp, #156]	; 0x9c
   123fc:	lsr	r3, r3, #1
   12400:	and	r3, r3, #1
   12404:	str	r3, [sp, #32]
   12408:	mov	r3, #1
   1240c:	str	r3, [sp, #40]	; 0x28
   12410:	mov	r3, #0
   12414:	str	r3, [sp, #80]	; 0x50
   12418:	str	r3, [sp, #44]	; 0x2c
   1241c:	str	r3, [sp, #48]	; 0x30
   12420:	str	r3, [sp, #60]	; 0x3c
   12424:	str	r3, [sp, #72]	; 0x48
   12428:	str	r3, [sp, #76]	; 0x4c
   1242c:	mov	r7, sl
   12430:	mov	sl, r8
   12434:	cmp	sl, #10
   12438:	ldrls	pc, [pc, sl, lsl #2]
   1243c:	b	125f4 <__assert_fail@plt+0x1768>
   12440:	andeq	r2, r1, r4, lsr #9
   12444:	andeq	r2, r1, r4, ror r4
   12448:	ldrdeq	r2, [r1], -r0
   1244c:	andeq	r2, r1, ip, ror #8
   12450:	andeq	r2, r1, r4, lsl #11
   12454:			; <UNDEFINED> instruction: 0x000124b4
   12458:	andeq	r3, r1, r0, lsr #10
   1245c:	strdeq	r2, [r1], -r8
   12460:	strdeq	r2, [r1], -r0
   12464:	strdeq	r2, [r1], -r0
   12468:	strdeq	r2, [r1], -r0
   1246c:	mov	r3, #1
   12470:	str	r3, [sp, #48]	; 0x30
   12474:	mov	r3, #1
   12478:	str	r3, [sp, #32]
   1247c:	str	r3, [sp, #60]	; 0x3c
   12480:	ldr	r3, [pc, #4068]	; 1346c <__assert_fail@plt+0x25e0>
   12484:	str	r3, [sp, #72]	; 0x48
   12488:	mov	fp, #0
   1248c:	mov	sl, #2
   12490:	mov	r6, #0
   12494:	ldr	r3, [sp, #48]	; 0x30
   12498:	eor	r3, r3, #1
   1249c:	str	r3, [sp, #68]	; 0x44
   124a0:	b	12d88 <__assert_fail@plt+0x1efc>
   124a4:	mov	r3, #0
   124a8:	str	r3, [sp, #32]
   124ac:	mov	fp, r3
   124b0:	b	12490 <__assert_fail@plt+0x1604>
   124b4:	ldr	r3, [sp, #32]
   124b8:	cmp	r3, #0
   124bc:	bne	12610 <__assert_fail@plt+0x1784>
   124c0:	cmp	r7, #0
   124c4:	beq	12630 <__assert_fail@plt+0x17a4>
   124c8:	ldr	r3, [sp, #36]	; 0x24
   124cc:	mov	r2, #34	; 0x22
   124d0:	strb	r2, [r3]
   124d4:	mov	r3, #1
   124d8:	str	r3, [sp, #48]	; 0x30
   124dc:	str	r3, [sp, #60]	; 0x3c
   124e0:	ldr	r3, [pc, #3980]	; 13474 <__assert_fail@plt+0x25e8>
   124e4:	str	r3, [sp, #72]	; 0x48
   124e8:	mov	fp, #1
   124ec:	b	12490 <__assert_fail@plt+0x1604>
   124f0:	cmp	sl, #10
   124f4:	beq	12518 <__assert_fail@plt+0x168c>
   124f8:	mov	r1, sl
   124fc:	ldr	r0, [pc, #3948]	; 13470 <__assert_fail@plt+0x25e4>
   12500:	bl	1229c <__assert_fail@plt+0x1410>
   12504:	str	r0, [sp, #164]	; 0xa4
   12508:	mov	r1, sl
   1250c:	ldr	r0, [pc, #3928]	; 1346c <__assert_fail@plt+0x25e0>
   12510:	bl	1229c <__assert_fail@plt+0x1410>
   12514:	str	r0, [sp, #168]	; 0xa8
   12518:	ldr	r3, [sp, #32]
   1251c:	cmp	r3, #0
   12520:	movne	fp, #0
   12524:	bne	1255c <__assert_fail@plt+0x16d0>
   12528:	ldr	r3, [sp, #164]	; 0xa4
   1252c:	ldrb	r3, [r3]
   12530:	cmp	r3, #0
   12534:	beq	1257c <__assert_fail@plt+0x16f0>
   12538:	ldr	r2, [sp, #164]	; 0xa4
   1253c:	mov	fp, #0
   12540:	ldr	r1, [sp, #36]	; 0x24
   12544:	cmp	r7, fp
   12548:	strbhi	r3, [r1, fp]
   1254c:	add	fp, fp, #1
   12550:	ldrb	r3, [r2, #1]!
   12554:	cmp	r3, #0
   12558:	bne	12544 <__assert_fail@plt+0x16b8>
   1255c:	ldr	r0, [sp, #168]	; 0xa8
   12560:	bl	10da8 <strlen@plt>
   12564:	str	r0, [sp, #60]	; 0x3c
   12568:	ldr	r3, [sp, #168]	; 0xa8
   1256c:	str	r3, [sp, #72]	; 0x48
   12570:	mov	r3, #1
   12574:	str	r3, [sp, #48]	; 0x30
   12578:	b	12490 <__assert_fail@plt+0x1604>
   1257c:	mov	fp, #0
   12580:	b	1255c <__assert_fail@plt+0x16d0>
   12584:	ldr	r3, [sp, #32]
   12588:	cmp	r3, #0
   1258c:	bne	1264c <__assert_fail@plt+0x17c0>
   12590:	mov	r3, #1
   12594:	str	r3, [sp, #48]	; 0x30
   12598:	cmp	r7, #0
   1259c:	beq	12668 <__assert_fail@plt+0x17dc>
   125a0:	ldr	r3, [sp, #36]	; 0x24
   125a4:	mov	r2, #39	; 0x27
   125a8:	strb	r2, [r3]
   125ac:	mov	r3, #0
   125b0:	str	r3, [sp, #32]
   125b4:	mov	r3, #1
   125b8:	str	r3, [sp, #60]	; 0x3c
   125bc:	ldr	r3, [pc, #3752]	; 1346c <__assert_fail@plt+0x25e0>
   125c0:	str	r3, [sp, #72]	; 0x48
   125c4:	mov	fp, #1
   125c8:	mov	sl, #2
   125cc:	b	12490 <__assert_fail@plt+0x1604>
   125d0:	ldr	r3, [sp, #32]
   125d4:	cmp	r3, #0
   125d8:	beq	12598 <__assert_fail@plt+0x170c>
   125dc:	mov	r3, #1
   125e0:	str	r3, [sp, #60]	; 0x3c
   125e4:	ldr	r3, [pc, #3712]	; 1346c <__assert_fail@plt+0x25e0>
   125e8:	str	r3, [sp, #72]	; 0x48
   125ec:	mov	fp, #0
   125f0:	b	12490 <__assert_fail@plt+0x1604>
   125f4:	bl	10e74 <abort@plt>
   125f8:	mov	r3, #0
   125fc:	str	r3, [sp, #32]
   12600:	mov	r3, #1
   12604:	str	r3, [sp, #48]	; 0x30
   12608:	mov	fp, #0
   1260c:	b	12490 <__assert_fail@plt+0x1604>
   12610:	ldr	r3, [sp, #32]
   12614:	str	r3, [sp, #48]	; 0x30
   12618:	mov	r3, #1
   1261c:	str	r3, [sp, #60]	; 0x3c
   12620:	ldr	r3, [pc, #3660]	; 13474 <__assert_fail@plt+0x25e8>
   12624:	str	r3, [sp, #72]	; 0x48
   12628:	mov	fp, #0
   1262c:	b	12490 <__assert_fail@plt+0x1604>
   12630:	mov	r3, #1
   12634:	str	r3, [sp, #48]	; 0x30
   12638:	str	r3, [sp, #60]	; 0x3c
   1263c:	ldr	r3, [pc, #3632]	; 13474 <__assert_fail@plt+0x25e8>
   12640:	str	r3, [sp, #72]	; 0x48
   12644:	mov	fp, #1
   12648:	b	12490 <__assert_fail@plt+0x1604>
   1264c:	mov	r3, #1
   12650:	str	r3, [sp, #60]	; 0x3c
   12654:	ldr	r3, [pc, #3600]	; 1346c <__assert_fail@plt+0x25e0>
   12658:	str	r3, [sp, #72]	; 0x48
   1265c:	mov	fp, #0
   12660:	mov	sl, #2
   12664:	b	12490 <__assert_fail@plt+0x1604>
   12668:	mov	r3, #0
   1266c:	str	r3, [sp, #32]
   12670:	mov	r3, #1
   12674:	str	r3, [sp, #60]	; 0x3c
   12678:	ldr	r3, [pc, #3564]	; 1346c <__assert_fail@plt+0x25e0>
   1267c:	str	r3, [sp, #72]	; 0x48
   12680:	mov	fp, #1
   12684:	mov	sl, #2
   12688:	b	12490 <__assert_fail@plt+0x1604>
   1268c:	mov	r3, #0
   12690:	str	r3, [sp, #56]	; 0x38
   12694:	ldr	r3, [sp, #52]	; 0x34
   12698:	add	r2, r3, r6
   1269c:	str	r2, [sp, #64]	; 0x40
   126a0:	ldrb	r4, [r3, r6]
   126a4:	cmp	r4, #126	; 0x7e
   126a8:	ldrls	pc, [pc, r4, lsl #2]
   126ac:	b	12ee8 <__assert_fail@plt+0x205c>
   126b0:	andeq	r2, r1, r8, asr #17
   126b4:	andeq	r2, r1, r8, ror #29
   126b8:	andeq	r2, r1, r8, ror #29
   126bc:	andeq	r2, r1, r8, ror #29
   126c0:	andeq	r2, r1, r8, ror #29
   126c4:	andeq	r2, r1, r8, ror #29
   126c8:	andeq	r2, r1, r8, ror #29
   126cc:	andeq	r2, r1, r4, lsr #24
   126d0:	andeq	r2, r1, r0, asr #17
   126d4:	ldrdeq	r2, [r1], -ip
   126d8:	ldrdeq	r2, [r1], -r4
   126dc:	andeq	r2, r1, r4, asr #22
   126e0:	andeq	r2, r1, ip, lsr fp
   126e4:			; <UNDEFINED> instruction: 0x000128b8
   126e8:	andeq	r2, r1, r8, ror #29
   126ec:	andeq	r2, r1, r8, ror #29
   126f0:	andeq	r2, r1, r8, ror #29
   126f4:	andeq	r2, r1, r8, ror #29
   126f8:	andeq	r2, r1, r8, ror #29
   126fc:	andeq	r2, r1, r8, ror #29
   12700:	andeq	r2, r1, r8, ror #29
   12704:	andeq	r2, r1, r8, ror #29
   12708:	andeq	r2, r1, r8, ror #29
   1270c:	andeq	r2, r1, r8, ror #29
   12710:	andeq	r2, r1, r8, ror #29
   12714:	andeq	r2, r1, r8, ror #29
   12718:	andeq	r2, r1, r8, ror #29
   1271c:	andeq	r2, r1, r8, ror #29
   12720:	andeq	r2, r1, r8, ror #29
   12724:	andeq	r2, r1, r8, ror #29
   12728:	andeq	r2, r1, r8, ror #29
   1272c:	andeq	r2, r1, r8, ror #29
   12730:	andeq	r2, r1, r8, ror ip
   12734:	andeq	r2, r1, r4, ror ip
   12738:	andeq	r2, r1, r4, ror ip
   1273c:	andeq	r2, r1, ip, asr #24
   12740:	andeq	r2, r1, r4, ror ip
   12744:			; <UNDEFINED> instruction: 0x000132bc
   12748:	andeq	r2, r1, r4, ror ip
   1274c:	andeq	r2, r1, ip, asr #28
   12750:	andeq	r2, r1, r4, ror ip
   12754:	andeq	r2, r1, r4, ror ip
   12758:	andeq	r2, r1, r4, ror ip
   1275c:			; <UNDEFINED> instruction: 0x000132bc
   12760:			; <UNDEFINED> instruction: 0x000132bc
   12764:			; <UNDEFINED> instruction: 0x000132bc
   12768:			; <UNDEFINED> instruction: 0x000132bc
   1276c:			; <UNDEFINED> instruction: 0x000132bc
   12770:			; <UNDEFINED> instruction: 0x000132bc
   12774:			; <UNDEFINED> instruction: 0x000132bc
   12778:			; <UNDEFINED> instruction: 0x000132bc
   1277c:			; <UNDEFINED> instruction: 0x000132bc
   12780:			; <UNDEFINED> instruction: 0x000132bc
   12784:			; <UNDEFINED> instruction: 0x000132bc
   12788:			; <UNDEFINED> instruction: 0x000132bc
   1278c:			; <UNDEFINED> instruction: 0x000132bc
   12790:			; <UNDEFINED> instruction: 0x000132bc
   12794:			; <UNDEFINED> instruction: 0x000132bc
   12798:			; <UNDEFINED> instruction: 0x000132bc
   1279c:	andeq	r2, r1, r4, ror ip
   127a0:	andeq	r2, r1, r4, ror ip
   127a4:	andeq	r2, r1, r4, ror ip
   127a8:	andeq	r2, r1, r4, ror ip
   127ac:	ldrdeq	r2, [r1], -r0
   127b0:	andeq	r2, r1, r8, ror #29
   127b4:			; <UNDEFINED> instruction: 0x000132bc
   127b8:			; <UNDEFINED> instruction: 0x000132bc
   127bc:			; <UNDEFINED> instruction: 0x000132bc
   127c0:			; <UNDEFINED> instruction: 0x000132bc
   127c4:			; <UNDEFINED> instruction: 0x000132bc
   127c8:			; <UNDEFINED> instruction: 0x000132bc
   127cc:			; <UNDEFINED> instruction: 0x000132bc
   127d0:			; <UNDEFINED> instruction: 0x000132bc
   127d4:			; <UNDEFINED> instruction: 0x000132bc
   127d8:			; <UNDEFINED> instruction: 0x000132bc
   127dc:			; <UNDEFINED> instruction: 0x000132bc
   127e0:			; <UNDEFINED> instruction: 0x000132bc
   127e4:			; <UNDEFINED> instruction: 0x000132bc
   127e8:			; <UNDEFINED> instruction: 0x000132bc
   127ec:			; <UNDEFINED> instruction: 0x000132bc
   127f0:			; <UNDEFINED> instruction: 0x000132bc
   127f4:			; <UNDEFINED> instruction: 0x000132bc
   127f8:			; <UNDEFINED> instruction: 0x000132bc
   127fc:			; <UNDEFINED> instruction: 0x000132bc
   12800:			; <UNDEFINED> instruction: 0x000132bc
   12804:			; <UNDEFINED> instruction: 0x000132bc
   12808:			; <UNDEFINED> instruction: 0x000132bc
   1280c:			; <UNDEFINED> instruction: 0x000132bc
   12810:			; <UNDEFINED> instruction: 0x000132bc
   12814:			; <UNDEFINED> instruction: 0x000132bc
   12818:			; <UNDEFINED> instruction: 0x000132bc
   1281c:	andeq	r2, r1, r4, ror ip
   12820:	andeq	r2, r1, ip, asr #22
   12824:			; <UNDEFINED> instruction: 0x000132bc
   12828:	andeq	r2, r1, r4, ror ip
   1282c:			; <UNDEFINED> instruction: 0x000132bc
   12830:	andeq	r2, r1, r4, ror ip
   12834:			; <UNDEFINED> instruction: 0x000132bc
   12838:			; <UNDEFINED> instruction: 0x000132bc
   1283c:			; <UNDEFINED> instruction: 0x000132bc
   12840:			; <UNDEFINED> instruction: 0x000132bc
   12844:			; <UNDEFINED> instruction: 0x000132bc
   12848:			; <UNDEFINED> instruction: 0x000132bc
   1284c:			; <UNDEFINED> instruction: 0x000132bc
   12850:			; <UNDEFINED> instruction: 0x000132bc
   12854:			; <UNDEFINED> instruction: 0x000132bc
   12858:			; <UNDEFINED> instruction: 0x000132bc
   1285c:			; <UNDEFINED> instruction: 0x000132bc
   12860:			; <UNDEFINED> instruction: 0x000132bc
   12864:			; <UNDEFINED> instruction: 0x000132bc
   12868:			; <UNDEFINED> instruction: 0x000132bc
   1286c:			; <UNDEFINED> instruction: 0x000132bc
   12870:			; <UNDEFINED> instruction: 0x000132bc
   12874:			; <UNDEFINED> instruction: 0x000132bc
   12878:			; <UNDEFINED> instruction: 0x000132bc
   1287c:			; <UNDEFINED> instruction: 0x000132bc
   12880:			; <UNDEFINED> instruction: 0x000132bc
   12884:			; <UNDEFINED> instruction: 0x000132bc
   12888:			; <UNDEFINED> instruction: 0x000132bc
   1288c:			; <UNDEFINED> instruction: 0x000132bc
   12890:			; <UNDEFINED> instruction: 0x000132bc
   12894:			; <UNDEFINED> instruction: 0x000132bc
   12898:			; <UNDEFINED> instruction: 0x000132bc
   1289c:	andeq	r2, r1, ip, lsr #24
   128a0:	andeq	r2, r1, r4, ror ip
   128a4:	andeq	r2, r1, ip, lsr #24
   128a8:	andeq	r2, r1, ip, asr #24
   128ac:	mov	r3, #0
   128b0:	str	r3, [sp, #56]	; 0x38
   128b4:	b	12694 <__assert_fail@plt+0x1808>
   128b8:	mov	r3, #114	; 0x72
   128bc:	b	12be0 <__assert_fail@plt+0x1d54>
   128c0:	mov	r3, #98	; 0x62
   128c4:	b	12bf8 <__assert_fail@plt+0x1d6c>
   128c8:	ldr	r3, [sp, #48]	; 0x30
   128cc:	cmp	r3, #0
   128d0:	beq	129b8 <__assert_fail@plt+0x1b2c>
   128d4:	ldr	r3, [sp, #32]
   128d8:	cmp	r3, #0
   128dc:	bne	13440 <__assert_fail@plt+0x25b4>
   128e0:	ldr	r3, [sp, #44]	; 0x2c
   128e4:	eor	r3, r3, #1
   128e8:	cmp	sl, #2
   128ec:	movne	r3, #0
   128f0:	andeq	r3, r3, #1
   128f4:	cmp	r3, #0
   128f8:	moveq	r2, fp
   128fc:	beq	12940 <__assert_fail@plt+0x1ab4>
   12900:	cmp	r7, fp
   12904:	ldrhi	r2, [sp, #36]	; 0x24
   12908:	movhi	r1, #39	; 0x27
   1290c:	strbhi	r1, [r2, fp]
   12910:	add	r2, fp, #1
   12914:	cmp	r7, r2
   12918:	ldrhi	r1, [sp, #36]	; 0x24
   1291c:	movhi	r0, #36	; 0x24
   12920:	strbhi	r0, [r1, r2]
   12924:	add	r2, fp, #2
   12928:	cmp	r7, r2
   1292c:	ldrhi	r1, [sp, #36]	; 0x24
   12930:	movhi	r0, #39	; 0x27
   12934:	strbhi	r0, [r1, r2]
   12938:	add	r2, fp, #3
   1293c:	str	r3, [sp, #44]	; 0x2c
   12940:	cmp	r7, r2
   12944:	ldrhi	r3, [sp, #36]	; 0x24
   12948:	movhi	r1, #92	; 0x5c
   1294c:	strbhi	r1, [r3, r2]
   12950:	add	fp, r2, #1
   12954:	cmp	r5, #0
   12958:	beq	132c4 <__assert_fail@plt+0x2438>
   1295c:	add	r3, r6, #1
   12960:	ldr	r1, [sp, #28]
   12964:	cmp	r1, r3
   12968:	bls	132d4 <__assert_fail@plt+0x2448>
   1296c:	ldr	r1, [sp, #52]	; 0x34
   12970:	ldrb	r3, [r1, r3]
   12974:	sub	r3, r3, #48	; 0x30
   12978:	uxtb	r3, r3
   1297c:	cmp	r3, #9
   12980:	bhi	132e0 <__assert_fail@plt+0x2454>
   12984:	cmp	r7, fp
   12988:	movhi	r3, #48	; 0x30
   1298c:	ldrhi	r1, [sp, #36]	; 0x24
   12990:	strbhi	r3, [r1, fp]
   12994:	add	r3, r2, #2
   12998:	cmp	r7, r3
   1299c:	movhi	r1, #48	; 0x30
   129a0:	ldrhi	r0, [sp, #36]	; 0x24
   129a4:	strbhi	r1, [r0, r3]
   129a8:	add	fp, r2, #3
   129ac:	ldr	r8, [sp, #32]
   129b0:	mov	r4, #48	; 0x30
   129b4:	b	12c90 <__assert_fail@plt+0x1e04>
   129b8:	ldr	r3, [sp, #156]	; 0x9c
   129bc:	tst	r3, #1
   129c0:	bne	12d84 <__assert_fail@plt+0x1ef8>
   129c4:	ldr	r5, [sp, #48]	; 0x30
   129c8:	mov	r8, r5
   129cc:	b	12c90 <__assert_fail@plt+0x1e04>
   129d0:	cmp	sl, #2
   129d4:	beq	129ec <__assert_fail@plt+0x1b60>
   129d8:	cmp	sl, #5
   129dc:	beq	12a04 <__assert_fail@plt+0x1b78>
   129e0:	mov	r8, #0
   129e4:	mov	r5, r8
   129e8:	b	12c90 <__assert_fail@plt+0x1e04>
   129ec:	ldr	r3, [sp, #32]
   129f0:	cmp	r3, #0
   129f4:	bne	13454 <__assert_fail@plt+0x25c8>
   129f8:	mov	r8, r3
   129fc:	mov	r5, r3
   12a00:	b	12c90 <__assert_fail@plt+0x1e04>
   12a04:	ldr	r3, [sp, #156]	; 0x9c
   12a08:	tst	r3, #4
   12a0c:	beq	132ec <__assert_fail@plt+0x2460>
   12a10:	add	r3, r6, #2
   12a14:	ldr	r2, [sp, #28]
   12a18:	cmp	r2, r3
   12a1c:	bls	132f8 <__assert_fail@plt+0x246c>
   12a20:	ldr	r2, [sp, #52]	; 0x34
   12a24:	add	r2, r2, r6
   12a28:	ldrb	r2, [r2, #1]
   12a2c:	cmp	r2, #63	; 0x3f
   12a30:	movne	r8, #0
   12a34:	movne	r5, r8
   12a38:	bne	12c90 <__assert_fail@plt+0x1e04>
   12a3c:	ldr	r2, [sp, #52]	; 0x34
   12a40:	ldrb	r2, [r2, r3]
   12a44:	sub	r1, r2, #33	; 0x21
   12a48:	cmp	r1, #29
   12a4c:	ldrls	pc, [pc, r1, lsl #2]
   12a50:	b	13304 <__assert_fail@plt+0x2478>
   12a54:	andeq	r2, r1, ip, asr #21
   12a58:	andeq	r3, r1, r4, lsl #6
   12a5c:	andeq	r3, r1, r4, lsl #6
   12a60:	andeq	r3, r1, r4, lsl #6
   12a64:	andeq	r3, r1, r4, lsl #6
   12a68:	andeq	r3, r1, r4, lsl #6
   12a6c:	andeq	r2, r1, ip, asr #21
   12a70:	andeq	r2, r1, ip, asr #21
   12a74:	andeq	r2, r1, ip, asr #21
   12a78:	andeq	r3, r1, r4, lsl #6
   12a7c:	andeq	r3, r1, r4, lsl #6
   12a80:	andeq	r3, r1, r4, lsl #6
   12a84:	andeq	r2, r1, ip, asr #21
   12a88:	andeq	r3, r1, r4, lsl #6
   12a8c:	andeq	r2, r1, ip, asr #21
   12a90:	andeq	r3, r1, r4, lsl #6
   12a94:	andeq	r3, r1, r4, lsl #6
   12a98:	andeq	r3, r1, r4, lsl #6
   12a9c:	andeq	r3, r1, r4, lsl #6
   12aa0:	andeq	r3, r1, r4, lsl #6
   12aa4:	andeq	r3, r1, r4, lsl #6
   12aa8:	andeq	r3, r1, r4, lsl #6
   12aac:	andeq	r3, r1, r4, lsl #6
   12ab0:	andeq	r3, r1, r4, lsl #6
   12ab4:	andeq	r3, r1, r4, lsl #6
   12ab8:	andeq	r3, r1, r4, lsl #6
   12abc:	andeq	r3, r1, r4, lsl #6
   12ac0:	andeq	r2, r1, ip, asr #21
   12ac4:	andeq	r2, r1, ip, asr #21
   12ac8:	andeq	r2, r1, ip, asr #21
   12acc:	ldr	r1, [sp, #32]
   12ad0:	cmp	r1, #0
   12ad4:	bne	13514 <__assert_fail@plt+0x2688>
   12ad8:	cmp	r7, fp
   12adc:	movhi	r1, #63	; 0x3f
   12ae0:	ldrhi	r0, [sp, #36]	; 0x24
   12ae4:	strbhi	r1, [r0, fp]
   12ae8:	add	r1, fp, #1
   12aec:	cmp	r7, r1
   12af0:	ldrhi	r0, [sp, #36]	; 0x24
   12af4:	movhi	ip, #34	; 0x22
   12af8:	strbhi	ip, [r0, r1]
   12afc:	add	r1, fp, #2
   12b00:	cmp	r7, r1
   12b04:	ldrhi	r0, [sp, #36]	; 0x24
   12b08:	movhi	ip, #34	; 0x22
   12b0c:	strbhi	ip, [r0, r1]
   12b10:	add	r1, fp, #3
   12b14:	cmp	r7, r1
   12b18:	movhi	r0, #63	; 0x3f
   12b1c:	ldrhi	ip, [sp, #36]	; 0x24
   12b20:	strbhi	r0, [ip, r1]
   12b24:	add	fp, fp, #4
   12b28:	ldr	r5, [sp, #32]
   12b2c:	mov	r8, r5
   12b30:	mov	r4, r2
   12b34:	mov	r6, r3
   12b38:	b	12c90 <__assert_fail@plt+0x1e04>
   12b3c:	mov	r3, #102	; 0x66
   12b40:	b	12bf8 <__assert_fail@plt+0x1d6c>
   12b44:	mov	r3, #118	; 0x76
   12b48:	b	12bf8 <__assert_fail@plt+0x1d6c>
   12b4c:	cmp	sl, #2
   12b50:	beq	12bbc <__assert_fail@plt+0x1d30>
   12b54:	ldr	r3, [sp, #48]	; 0x30
   12b58:	ldr	r2, [sp, #32]
   12b5c:	and	r3, r3, r2
   12b60:	tst	r9, r3
   12b64:	moveq	r3, r4
   12b68:	beq	12bf8 <__assert_fail@plt+0x1d6c>
   12b6c:	mov	r8, #0
   12b70:	mov	r5, r8
   12b74:	eor	r5, r5, #1
   12b78:	ldr	r3, [sp, #44]	; 0x2c
   12b7c:	and	r5, r5, r3
   12b80:	tst	r5, #255	; 0xff
   12b84:	beq	12d64 <__assert_fail@plt+0x1ed8>
   12b88:	cmp	r7, fp
   12b8c:	ldrhi	r3, [sp, #36]	; 0x24
   12b90:	movhi	r2, #39	; 0x27
   12b94:	strbhi	r2, [r3, fp]
   12b98:	add	r3, fp, #1
   12b9c:	cmp	r7, r3
   12ba0:	ldrhi	r2, [sp, #36]	; 0x24
   12ba4:	movhi	r1, #39	; 0x27
   12ba8:	strbhi	r1, [r2, r3]
   12bac:	add	fp, fp, #2
   12bb0:	mov	r3, #0
   12bb4:	str	r3, [sp, #44]	; 0x2c
   12bb8:	b	12d64 <__assert_fail@plt+0x1ed8>
   12bbc:	ldr	r3, [sp, #32]
   12bc0:	cmp	r3, #0
   12bc4:	bne	13460 <__assert_fail@plt+0x25d4>
   12bc8:	mov	r8, r3
   12bcc:	mov	r5, r3
   12bd0:	b	12b74 <__assert_fail@plt+0x1ce8>
   12bd4:	mov	r3, #110	; 0x6e
   12bd8:	b	12be0 <__assert_fail@plt+0x1d54>
   12bdc:	mov	r3, #116	; 0x74
   12be0:	ldr	r2, [sp, #32]
   12be4:	cmp	sl, #2
   12be8:	movne	r2, #0
   12bec:	andeq	r2, r2, #1
   12bf0:	cmp	r2, #0
   12bf4:	bne	12c18 <__assert_fail@plt+0x1d8c>
   12bf8:	ldr	r2, [sp, #48]	; 0x30
   12bfc:	cmp	r2, #0
   12c00:	moveq	r8, r2
   12c04:	moveq	r5, r2
   12c08:	beq	12c90 <__assert_fail@plt+0x1e04>
   12c0c:	mov	r4, r3
   12c10:	mov	r8, #0
   12c14:	b	12ce8 <__assert_fail@plt+0x1e5c>
   12c18:	mov	r8, sl
   12c1c:	mov	sl, r7
   12c20:	b	1348c <__assert_fail@plt+0x2600>
   12c24:	mov	r3, #97	; 0x61
   12c28:	b	12bf8 <__assert_fail@plt+0x1d6c>
   12c2c:	ldr	r3, [sp, #28]
   12c30:	cmn	r3, #1
   12c34:	beq	12c60 <__assert_fail@plt+0x1dd4>
   12c38:	ldr	r3, [sp, #28]
   12c3c:	subs	r3, r3, #1
   12c40:	movne	r3, #1
   12c44:	cmp	r3, #0
   12c48:	bne	13310 <__assert_fail@plt+0x2484>
   12c4c:	cmp	r6, #0
   12c50:	beq	12c78 <__assert_fail@plt+0x1dec>
   12c54:	mov	r8, #0
   12c58:	mov	r5, r8
   12c5c:	b	12c90 <__assert_fail@plt+0x1e04>
   12c60:	ldr	r3, [sp, #52]	; 0x34
   12c64:	ldrb	r3, [r3, #1]
   12c68:	adds	r3, r3, #0
   12c6c:	movne	r3, #1
   12c70:	b	12c44 <__assert_fail@plt+0x1db8>
   12c74:	mov	r8, #0
   12c78:	ldr	r5, [sp, #32]
   12c7c:	cmp	sl, #2
   12c80:	movne	r5, #0
   12c84:	andeq	r5, r5, #1
   12c88:	cmp	r5, #0
   12c8c:	bne	12e40 <__assert_fail@plt+0x1fb4>
   12c90:	ldr	r3, [sp, #68]	; 0x44
   12c94:	cmp	sl, #2
   12c98:	orreq	r3, r3, #1
   12c9c:	eor	r3, r3, #1
   12ca0:	ldr	r2, [sp, #32]
   12ca4:	orr	r3, r2, r3
   12ca8:	tst	r3, #255	; 0xff
   12cac:	beq	12cdc <__assert_fail@plt+0x1e50>
   12cb0:	ldr	r3, [sp, #160]	; 0xa0
   12cb4:	cmp	r3, #0
   12cb8:	beq	12cdc <__assert_fail@plt+0x1e50>
   12cbc:	lsr	r2, r4, #5
   12cc0:	uxtb	r2, r2
   12cc4:	and	r3, r4, #31
   12cc8:	ldr	r1, [sp, #160]	; 0xa0
   12ccc:	ldr	r2, [r1, r2, lsl #2]
   12cd0:	lsr	r3, r2, r3
   12cd4:	tst	r3, #1
   12cd8:	bne	12ce8 <__assert_fail@plt+0x1e5c>
   12cdc:	ldr	r3, [sp, #56]	; 0x38
   12ce0:	cmp	r3, #0
   12ce4:	beq	12b74 <__assert_fail@plt+0x1ce8>
   12ce8:	ldr	r3, [sp, #32]
   12cec:	cmp	r3, #0
   12cf0:	bne	134fc <__assert_fail@plt+0x2670>
   12cf4:	ldr	r3, [sp, #44]	; 0x2c
   12cf8:	eor	r3, r3, #1
   12cfc:	cmp	sl, #2
   12d00:	movne	r3, #0
   12d04:	andeq	r3, r3, #1
   12d08:	cmp	r3, #0
   12d0c:	beq	12d50 <__assert_fail@plt+0x1ec4>
   12d10:	cmp	r7, fp
   12d14:	ldrhi	r2, [sp, #36]	; 0x24
   12d18:	movhi	r1, #39	; 0x27
   12d1c:	strbhi	r1, [r2, fp]
   12d20:	add	r2, fp, #1
   12d24:	cmp	r7, r2
   12d28:	ldrhi	r1, [sp, #36]	; 0x24
   12d2c:	movhi	r0, #36	; 0x24
   12d30:	strbhi	r0, [r1, r2]
   12d34:	add	r2, fp, #2
   12d38:	cmp	r7, r2
   12d3c:	ldrhi	r1, [sp, #36]	; 0x24
   12d40:	movhi	r0, #39	; 0x27
   12d44:	strbhi	r0, [r1, r2]
   12d48:	add	fp, fp, #3
   12d4c:	str	r3, [sp, #44]	; 0x2c
   12d50:	cmp	r7, fp
   12d54:	ldrhi	r3, [sp, #36]	; 0x24
   12d58:	movhi	r2, #92	; 0x5c
   12d5c:	strbhi	r2, [r3, fp]
   12d60:	add	fp, fp, #1
   12d64:	cmp	fp, r7
   12d68:	ldrcc	r3, [sp, #36]	; 0x24
   12d6c:	strbcc	r4, [r3, fp]
   12d70:	add	fp, fp, #1
   12d74:	ldr	r3, [sp, #40]	; 0x28
   12d78:	cmp	r8, #0
   12d7c:	moveq	r3, #0
   12d80:	str	r3, [sp, #40]	; 0x28
   12d84:	add	r6, r6, #1
   12d88:	ldr	r3, [sp, #28]
   12d8c:	cmn	r3, #1
   12d90:	beq	1331c <__assert_fail@plt+0x2490>
   12d94:	ldr	r3, [sp, #28]
   12d98:	subs	r8, r3, r6
   12d9c:	movne	r8, #1
   12da0:	cmp	r8, #0
   12da4:	beq	13330 <__assert_fail@plt+0x24a4>
   12da8:	ldr	r5, [sp, #48]	; 0x30
   12dac:	cmp	sl, #2
   12db0:	moveq	r5, #0
   12db4:	andne	r5, r5, #1
   12db8:	ldr	r3, [sp, #60]	; 0x3c
   12dbc:	adds	r9, r3, #0
   12dc0:	movne	r9, #1
   12dc4:	ands	r2, r5, r9
   12dc8:	str	r2, [sp, #56]	; 0x38
   12dcc:	beq	12694 <__assert_fail@plt+0x1808>
   12dd0:	add	r4, r6, r3
   12dd4:	ldr	r2, [sp, #28]
   12dd8:	cmp	r3, #1
   12ddc:	movls	r3, #0
   12de0:	movhi	r3, #1
   12de4:	cmn	r2, #1
   12de8:	movne	r3, #0
   12dec:	cmp	r3, #0
   12df0:	beq	12e00 <__assert_fail@plt+0x1f74>
   12df4:	ldr	r0, [sp, #52]	; 0x34
   12df8:	bl	10da8 <strlen@plt>
   12dfc:	str	r0, [sp, #28]
   12e00:	ldr	r3, [sp, #28]
   12e04:	cmp	r3, r4
   12e08:	bcc	1268c <__assert_fail@plt+0x1800>
   12e0c:	ldr	r2, [sp, #60]	; 0x3c
   12e10:	ldr	r1, [sp, #72]	; 0x48
   12e14:	ldr	r3, [sp, #52]	; 0x34
   12e18:	add	r0, r3, r6
   12e1c:	bl	10cac <memcmp@plt>
   12e20:	cmp	r0, #0
   12e24:	bne	128ac <__assert_fail@plt+0x1a20>
   12e28:	ldr	r3, [sp, #32]
   12e2c:	cmp	r3, #0
   12e30:	beq	12694 <__assert_fail@plt+0x1808>
   12e34:	mov	r8, sl
   12e38:	mov	sl, r7
   12e3c:	b	1348c <__assert_fail@plt+0x2600>
   12e40:	mov	r8, sl
   12e44:	mov	sl, r7
   12e48:	b	1348c <__assert_fail@plt+0x2600>
   12e4c:	cmp	sl, #2
   12e50:	strne	r8, [sp, #80]	; 0x50
   12e54:	movne	r5, #0
   12e58:	bne	12c90 <__assert_fail@plt+0x1e04>
   12e5c:	ldr	r3, [sp, #32]
   12e60:	cmp	r3, #0
   12e64:	bne	13478 <__assert_fail@plt+0x25ec>
   12e68:	ldr	r2, [sp, #76]	; 0x4c
   12e6c:	adds	r3, r7, #0
   12e70:	movne	r3, #1
   12e74:	cmp	r2, #0
   12e78:	movne	r3, #0
   12e7c:	cmp	r3, #0
   12e80:	movne	r3, #0
   12e84:	bne	12eb4 <__assert_fail@plt+0x2028>
   12e88:	cmp	r7, fp
   12e8c:	ldrhi	r3, [sp, #36]	; 0x24
   12e90:	movhi	r2, #39	; 0x27
   12e94:	strbhi	r2, [r3, fp]
   12e98:	add	r3, fp, #1
   12e9c:	cmp	r7, r3
   12ea0:	ldrhi	r2, [sp, #36]	; 0x24
   12ea4:	movhi	r1, #92	; 0x5c
   12ea8:	strbhi	r1, [r2, r3]
   12eac:	mov	r3, r7
   12eb0:	ldr	r7, [sp, #76]	; 0x4c
   12eb4:	add	r2, fp, #2
   12eb8:	cmp	r2, r3
   12ebc:	ldrcc	r1, [sp, #36]	; 0x24
   12ec0:	movcc	r0, #39	; 0x27
   12ec4:	strbcc	r0, [r1, r2]
   12ec8:	add	fp, fp, #3
   12ecc:	ldr	r2, [sp, #32]
   12ed0:	mov	r5, r2
   12ed4:	str	r8, [sp, #80]	; 0x50
   12ed8:	str	r2, [sp, #44]	; 0x2c
   12edc:	str	r7, [sp, #76]	; 0x4c
   12ee0:	mov	r7, r3
   12ee4:	b	12c90 <__assert_fail@plt+0x1e04>
   12ee8:	ldr	r5, [sp, #84]	; 0x54
   12eec:	cmp	r5, #1
   12ef0:	beq	12f20 <__assert_fail@plt+0x2094>
   12ef4:	mov	r3, #0
   12ef8:	str	r3, [sp, #104]	; 0x68
   12efc:	str	r3, [sp, #108]	; 0x6c
   12f00:	ldr	r3, [sp, #28]
   12f04:	cmn	r3, #1
   12f08:	beq	12f54 <__assert_fail@plt+0x20c8>
   12f0c:	mov	r3, #0
   12f10:	str	r4, [sp, #88]	; 0x58
   12f14:	str	fp, [sp, #92]	; 0x5c
   12f18:	mov	fp, r3
   12f1c:	b	1307c <__assert_fail@plt+0x21f0>
   12f20:	bl	10d90 <__ctype_b_loc@plt>
   12f24:	ldr	r2, [r0]
   12f28:	lsl	r3, r4, #1
   12f2c:	ldrh	r8, [r2, r3]
   12f30:	lsr	r8, r8, #14
   12f34:	and	r8, r8, #1
   12f38:	mov	r2, r5
   12f3c:	eor	r5, r8, #1
   12f40:	ldr	r3, [sp, #48]	; 0x30
   12f44:	and	r5, r5, r3
   12f48:	ands	r5, r5, #255	; 0xff
   12f4c:	beq	12c90 <__assert_fail@plt+0x1e04>
   12f50:	b	13114 <__assert_fail@plt+0x2288>
   12f54:	ldr	r0, [sp, #52]	; 0x34
   12f58:	bl	10da8 <strlen@plt>
   12f5c:	str	r0, [sp, #28]
   12f60:	b	12f0c <__assert_fail@plt+0x2080>
   12f64:	mov	r2, fp
   12f68:	mov	r1, r4
   12f6c:	ldr	r4, [sp, #88]	; 0x58
   12f70:	ldr	fp, [sp, #92]	; 0x5c
   12f74:	ldr	r0, [sp, #28]
   12f78:	cmp	r0, r5
   12f7c:	bls	13148 <__assert_fail@plt+0x22bc>
   12f80:	ldrb	r3, [r1]
   12f84:	cmp	r3, #0
   12f88:	beq	13150 <__assert_fail@plt+0x22c4>
   12f8c:	mov	r3, r1
   12f90:	add	r2, r2, #1
   12f94:	add	r1, r6, r2
   12f98:	cmp	r0, r1
   12f9c:	bls	13158 <__assert_fail@plt+0x22cc>
   12fa0:	ldrb	r1, [r3, #1]!
   12fa4:	cmp	r1, #0
   12fa8:	bne	12f90 <__assert_fail@plt+0x2104>
   12fac:	mov	r8, #0
   12fb0:	b	1310c <__assert_fail@plt+0x2280>
   12fb4:	cmp	r4, r5
   12fb8:	beq	13058 <__assert_fail@plt+0x21cc>
   12fbc:	ldrb	r3, [r4, #1]!
   12fc0:	sub	r3, r3, #91	; 0x5b
   12fc4:	cmp	r3, #33	; 0x21
   12fc8:	ldrls	pc, [pc, r3, lsl #2]
   12fcc:	b	12fb4 <__assert_fail@plt+0x2128>
   12fd0:	andeq	r3, r1, r4, lsl #9
   12fd4:	andeq	r3, r1, r4, lsl #9
   12fd8:			; <UNDEFINED> instruction: 0x00012fb4
   12fdc:	andeq	r3, r1, r4, lsl #9
   12fe0:			; <UNDEFINED> instruction: 0x00012fb4
   12fe4:	andeq	r3, r1, r4, lsl #9
   12fe8:			; <UNDEFINED> instruction: 0x00012fb4
   12fec:			; <UNDEFINED> instruction: 0x00012fb4
   12ff0:			; <UNDEFINED> instruction: 0x00012fb4
   12ff4:			; <UNDEFINED> instruction: 0x00012fb4
   12ff8:			; <UNDEFINED> instruction: 0x00012fb4
   12ffc:			; <UNDEFINED> instruction: 0x00012fb4
   13000:			; <UNDEFINED> instruction: 0x00012fb4
   13004:			; <UNDEFINED> instruction: 0x00012fb4
   13008:			; <UNDEFINED> instruction: 0x00012fb4
   1300c:			; <UNDEFINED> instruction: 0x00012fb4
   13010:			; <UNDEFINED> instruction: 0x00012fb4
   13014:			; <UNDEFINED> instruction: 0x00012fb4
   13018:			; <UNDEFINED> instruction: 0x00012fb4
   1301c:			; <UNDEFINED> instruction: 0x00012fb4
   13020:			; <UNDEFINED> instruction: 0x00012fb4
   13024:			; <UNDEFINED> instruction: 0x00012fb4
   13028:			; <UNDEFINED> instruction: 0x00012fb4
   1302c:			; <UNDEFINED> instruction: 0x00012fb4
   13030:			; <UNDEFINED> instruction: 0x00012fb4
   13034:			; <UNDEFINED> instruction: 0x00012fb4
   13038:			; <UNDEFINED> instruction: 0x00012fb4
   1303c:			; <UNDEFINED> instruction: 0x00012fb4
   13040:			; <UNDEFINED> instruction: 0x00012fb4
   13044:			; <UNDEFINED> instruction: 0x00012fb4
   13048:			; <UNDEFINED> instruction: 0x00012fb4
   1304c:			; <UNDEFINED> instruction: 0x00012fb4
   13050:			; <UNDEFINED> instruction: 0x00012fb4
   13054:	andeq	r3, r1, r4, lsl #9
   13058:	ldr	r0, [sp, #100]	; 0x64
   1305c:	bl	10ce8 <iswprint@plt>
   13060:	cmp	r0, #0
   13064:	moveq	r8, #0
   13068:	add	fp, fp, r9
   1306c:	add	r0, sp, #104	; 0x68
   13070:	bl	10c94 <mbsinit@plt>
   13074:	cmp	r0, #0
   13078:	bne	130ec <__assert_fail@plt+0x2260>
   1307c:	add	r5, r6, fp
   13080:	ldr	r3, [sp, #52]	; 0x34
   13084:	add	r4, r3, r5
   13088:	add	r3, sp, #104	; 0x68
   1308c:	ldr	r2, [sp, #28]
   13090:	sub	r2, r2, r5
   13094:	mov	r1, r4
   13098:	add	r0, sp, #100	; 0x64
   1309c:	bl	1539c <__assert_fail@plt+0x4510>
   130a0:	subs	r9, r0, #0
   130a4:	beq	13160 <__assert_fail@plt+0x22d4>
   130a8:	cmn	r9, #1
   130ac:	beq	130fc <__assert_fail@plt+0x2270>
   130b0:	cmn	r9, #2
   130b4:	beq	12f64 <__assert_fail@plt+0x20d8>
   130b8:	ldr	r3, [sp, #32]
   130bc:	cmp	sl, #2
   130c0:	movne	r3, #0
   130c4:	andeq	r3, r3, #1
   130c8:	cmp	r3, #0
   130cc:	beq	13058 <__assert_fail@plt+0x21cc>
   130d0:	cmp	r9, #1
   130d4:	bls	13058 <__assert_fail@plt+0x21cc>
   130d8:	sub	r3, r9, #1
   130dc:	add	r5, r3, r5
   130e0:	ldr	r3, [sp, #52]	; 0x34
   130e4:	add	r5, r3, r5
   130e8:	b	12fbc <__assert_fail@plt+0x2130>
   130ec:	ldr	r4, [sp, #88]	; 0x58
   130f0:	mov	r2, fp
   130f4:	ldr	fp, [sp, #92]	; 0x5c
   130f8:	b	1310c <__assert_fail@plt+0x2280>
   130fc:	ldr	r4, [sp, #88]	; 0x58
   13100:	mov	r2, fp
   13104:	ldr	fp, [sp, #92]	; 0x5c
   13108:	mov	r8, #0
   1310c:	cmp	r2, #1
   13110:	bls	12f3c <__assert_fail@plt+0x20b0>
   13114:	add	r1, r6, r2
   13118:	ldr	ip, [sp, #64]	; 0x40
   1311c:	mov	r5, #0
   13120:	eor	r3, r8, #1
   13124:	ldr	r2, [sp, #48]	; 0x30
   13128:	and	r3, r3, r2
   1312c:	uxtb	r3, r3
   13130:	ldr	r9, [sp, #32]
   13134:	ldr	lr, [sp, #44]	; 0x2c
   13138:	ldr	r2, [sp, #56]	; 0x38
   1313c:	str	r8, [sp, #56]	; 0x38
   13140:	ldr	r0, [sp, #36]	; 0x24
   13144:	b	131e0 <__assert_fail@plt+0x2354>
   13148:	mov	r8, #0
   1314c:	b	1310c <__assert_fail@plt+0x2280>
   13150:	mov	r8, #0
   13154:	b	1310c <__assert_fail@plt+0x2280>
   13158:	mov	r8, #0
   1315c:	b	1310c <__assert_fail@plt+0x2280>
   13160:	ldr	r4, [sp, #88]	; 0x58
   13164:	mov	r2, fp
   13168:	ldr	fp, [sp, #92]	; 0x5c
   1316c:	b	1310c <__assert_fail@plt+0x2280>
   13170:	cmp	r2, #0
   13174:	beq	13188 <__assert_fail@plt+0x22fc>
   13178:	cmp	r7, fp
   1317c:	movhi	r2, #92	; 0x5c
   13180:	strbhi	r2, [r0, fp]
   13184:	add	fp, fp, #1
   13188:	add	r8, r6, #1
   1318c:	cmp	r1, r8
   13190:	bls	13298 <__assert_fail@plt+0x240c>
   13194:	eor	r2, r5, #1
   13198:	and	r2, r2, lr
   1319c:	ands	r2, r2, #255	; 0xff
   131a0:	beq	132b4 <__assert_fail@plt+0x2428>
   131a4:	cmp	r7, fp
   131a8:	movhi	r2, #39	; 0x27
   131ac:	strbhi	r2, [r0, fp]
   131b0:	add	r2, fp, #1
   131b4:	cmp	r7, r2
   131b8:	movhi	lr, #39	; 0x27
   131bc:	strbhi	lr, [r0, r2]
   131c0:	add	fp, fp, #2
   131c4:	mov	r6, r8
   131c8:	mov	r2, r3
   131cc:	mov	lr, r3
   131d0:	cmp	r7, fp
   131d4:	strbhi	r4, [r0, fp]
   131d8:	add	fp, fp, #1
   131dc:	ldrb	r4, [ip, #1]!
   131e0:	cmp	r3, #0
   131e4:	beq	13170 <__assert_fail@plt+0x22e4>
   131e8:	cmp	r9, #0
   131ec:	bne	134f0 <__assert_fail@plt+0x2664>
   131f0:	eor	r5, lr, #1
   131f4:	cmp	sl, #2
   131f8:	movne	r5, #0
   131fc:	andeq	r5, r5, #1
   13200:	cmp	r5, #0
   13204:	beq	1323c <__assert_fail@plt+0x23b0>
   13208:	cmp	r7, fp
   1320c:	movhi	lr, #39	; 0x27
   13210:	strbhi	lr, [r0, fp]
   13214:	add	lr, fp, #1
   13218:	cmp	r7, lr
   1321c:	movhi	r8, #36	; 0x24
   13220:	strbhi	r8, [r0, lr]
   13224:	add	lr, fp, #2
   13228:	cmp	r7, lr
   1322c:	movhi	r8, #39	; 0x27
   13230:	strbhi	r8, [r0, lr]
   13234:	add	fp, fp, #3
   13238:	mov	lr, r5
   1323c:	cmp	r7, fp
   13240:	movhi	r5, #92	; 0x5c
   13244:	strbhi	r5, [r0, fp]
   13248:	add	r5, fp, #1
   1324c:	cmp	r7, r5
   13250:	lsrhi	r8, r4, #6
   13254:	addhi	r8, r8, #48	; 0x30
   13258:	strbhi	r8, [r0, r5]
   1325c:	add	r8, fp, #2
   13260:	cmp	r7, r8
   13264:	lsrhi	r5, r4, #3
   13268:	andhi	r5, r5, #7
   1326c:	addhi	r5, r5, #48	; 0x30
   13270:	strbhi	r5, [r0, r8]
   13274:	add	fp, fp, #3
   13278:	and	r4, r4, #7
   1327c:	add	r4, r4, #48	; 0x30
   13280:	add	r5, r6, #1
   13284:	cmp	r1, r5
   13288:	bls	132a4 <__assert_fail@plt+0x2418>
   1328c:	mov	r6, r5
   13290:	mov	r5, r3
   13294:	b	131d0 <__assert_fail@plt+0x2344>
   13298:	str	lr, [sp, #44]	; 0x2c
   1329c:	ldr	r8, [sp, #56]	; 0x38
   132a0:	b	12b74 <__assert_fail@plt+0x1ce8>
   132a4:	str	lr, [sp, #44]	; 0x2c
   132a8:	ldr	r8, [sp, #56]	; 0x38
   132ac:	mov	r5, r3
   132b0:	b	12b74 <__assert_fail@plt+0x1ce8>
   132b4:	mov	r6, r8
   132b8:	b	131d0 <__assert_fail@plt+0x2344>
   132bc:	mov	r5, #0
   132c0:	b	12c90 <__assert_fail@plt+0x1e04>
   132c4:	mov	r8, r5
   132c8:	ldr	r5, [sp, #48]	; 0x30
   132cc:	mov	r4, #48	; 0x30
   132d0:	b	12c90 <__assert_fail@plt+0x1e04>
   132d4:	ldr	r8, [sp, #32]
   132d8:	mov	r4, #48	; 0x30
   132dc:	b	12c90 <__assert_fail@plt+0x1e04>
   132e0:	ldr	r8, [sp, #32]
   132e4:	mov	r4, #48	; 0x30
   132e8:	b	12c90 <__assert_fail@plt+0x1e04>
   132ec:	mov	r8, #0
   132f0:	mov	r5, r8
   132f4:	b	12c90 <__assert_fail@plt+0x1e04>
   132f8:	mov	r8, #0
   132fc:	mov	r5, r8
   13300:	b	12c90 <__assert_fail@plt+0x1e04>
   13304:	mov	r8, #0
   13308:	mov	r5, r8
   1330c:	b	12c90 <__assert_fail@plt+0x1e04>
   13310:	mov	r8, #0
   13314:	mov	r5, r8
   13318:	b	12c90 <__assert_fail@plt+0x1e04>
   1331c:	ldr	r3, [sp, #52]	; 0x34
   13320:	ldrb	r8, [r3, r6]
   13324:	adds	r8, r8, #0
   13328:	movne	r8, #1
   1332c:	b	12da0 <__assert_fail@plt+0x1f14>
   13330:	cmp	sl, #2
   13334:	movne	r3, #0
   13338:	moveq	r3, #1
   1333c:	ldr	r1, [sp, #32]
   13340:	mov	r2, r1
   13344:	and	r2, r2, r3
   13348:	cmp	fp, #0
   1334c:	movne	r2, #0
   13350:	andeq	r2, r2, #1
   13354:	cmp	r2, #0
   13358:	bne	13508 <__assert_fail@plt+0x267c>
   1335c:	eor	r2, r1, #1
   13360:	and	r3, r3, r2
   13364:	ldr	r1, [sp, #80]	; 0x50
   13368:	tst	r1, r3
   1336c:	beq	133e4 <__assert_fail@plt+0x2558>
   13370:	ldr	r3, [sp, #40]	; 0x28
   13374:	cmp	r3, #0
   13378:	bne	133a0 <__assert_fail@plt+0x2514>
   1337c:	ldr	r1, [sp, #76]	; 0x4c
   13380:	clz	r3, r7
   13384:	lsr	r3, r3, #5
   13388:	cmp	r1, #0
   1338c:	moveq	r3, #0
   13390:	cmp	r3, #0
   13394:	beq	133e4 <__assert_fail@plt+0x2558>
   13398:	ldr	r7, [sp, #76]	; 0x4c
   1339c:	b	12434 <__assert_fail@plt+0x15a8>
   133a0:	ldr	r3, [sp, #168]	; 0xa8
   133a4:	str	r3, [sp, #16]
   133a8:	ldr	r3, [sp, #164]	; 0xa4
   133ac:	str	r3, [sp, #12]
   133b0:	ldr	r3, [sp, #160]	; 0xa0
   133b4:	str	r3, [sp, #8]
   133b8:	ldr	r3, [sp, #156]	; 0x9c
   133bc:	str	r3, [sp, #4]
   133c0:	mov	r3, #5
   133c4:	str	r3, [sp]
   133c8:	ldr	r3, [sp, #28]
   133cc:	ldr	r2, [sp, #52]	; 0x34
   133d0:	ldr	r1, [sp, #76]	; 0x4c
   133d4:	ldr	r0, [sp, #36]	; 0x24
   133d8:	bl	123d4 <__assert_fail@plt+0x1548>
   133dc:	mov	fp, r0
   133e0:	b	134e4 <__assert_fail@plt+0x2658>
   133e4:	mov	sl, r7
   133e8:	ldr	r3, [sp, #72]	; 0x48
   133ec:	cmp	r3, #0
   133f0:	moveq	r2, #0
   133f4:	andne	r2, r2, #1
   133f8:	cmp	r2, #0
   133fc:	beq	1342c <__assert_fail@plt+0x25a0>
   13400:	mov	r2, r3
   13404:	ldrb	r3, [r3]
   13408:	cmp	r3, #0
   1340c:	beq	1342c <__assert_fail@plt+0x25a0>
   13410:	ldr	r1, [sp, #36]	; 0x24
   13414:	cmp	sl, fp
   13418:	strbhi	r3, [r1, fp]
   1341c:	add	fp, fp, #1
   13420:	ldrb	r3, [r2, #1]!
   13424:	cmp	r3, #0
   13428:	bne	13414 <__assert_fail@plt+0x2588>
   1342c:	cmp	sl, fp
   13430:	movhi	r3, #0
   13434:	ldrhi	r2, [sp, #36]	; 0x24
   13438:	strbhi	r3, [r2, fp]
   1343c:	b	134e4 <__assert_fail@plt+0x2658>
   13440:	mov	r8, sl
   13444:	mov	sl, r7
   13448:	ldr	r3, [sp, #32]
   1344c:	str	r3, [sp, #48]	; 0x30
   13450:	b	1348c <__assert_fail@plt+0x2600>
   13454:	mov	r8, sl
   13458:	mov	sl, r7
   1345c:	b	1348c <__assert_fail@plt+0x2600>
   13460:	mov	r8, sl
   13464:	mov	sl, r7
   13468:	b	1348c <__assert_fail@plt+0x2600>
   1346c:	andeq	r6, r1, ip, lsl #12
   13470:	andeq	r6, r1, ip, lsl r6
   13474:	andeq	r6, r1, r0, lsl r6
   13478:	mov	r8, sl
   1347c:	mov	sl, r7
   13480:	b	1348c <__assert_fail@plt+0x2600>
   13484:	mov	r8, sl
   13488:	mov	sl, r7
   1348c:	ldr	r3, [sp, #48]	; 0x30
   13490:	cmp	r8, #2
   13494:	movne	r3, #0
   13498:	andeq	r3, r3, #1
   1349c:	cmp	r3, #0
   134a0:	movne	r8, #4
   134a4:	ldr	r3, [sp, #168]	; 0xa8
   134a8:	str	r3, [sp, #16]
   134ac:	ldr	r3, [sp, #164]	; 0xa4
   134b0:	str	r3, [sp, #12]
   134b4:	mov	r3, #0
   134b8:	str	r3, [sp, #8]
   134bc:	ldr	r3, [sp, #156]	; 0x9c
   134c0:	bic	r3, r3, #2
   134c4:	str	r3, [sp, #4]
   134c8:	str	r8, [sp]
   134cc:	ldr	r3, [sp, #28]
   134d0:	ldr	r2, [sp, #52]	; 0x34
   134d4:	mov	r1, sl
   134d8:	ldr	r0, [sp, #36]	; 0x24
   134dc:	bl	123d4 <__assert_fail@plt+0x1548>
   134e0:	mov	fp, r0
   134e4:	mov	r0, fp
   134e8:	add	sp, sp, #116	; 0x74
   134ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f0:	mov	r8, sl
   134f4:	mov	sl, r7
   134f8:	b	1348c <__assert_fail@plt+0x2600>
   134fc:	mov	r8, sl
   13500:	mov	sl, r7
   13504:	b	1348c <__assert_fail@plt+0x2600>
   13508:	mov	r8, sl
   1350c:	mov	sl, r7
   13510:	b	1348c <__assert_fail@plt+0x2600>
   13514:	mov	r8, sl
   13518:	mov	sl, r7
   1351c:	b	134a4 <__assert_fail@plt+0x2618>
   13520:	mov	r3, #1
   13524:	str	r3, [sp, #32]
   13528:	str	r3, [sp, #48]	; 0x30
   1352c:	str	r3, [sp, #60]	; 0x3c
   13530:	ldr	r3, [pc, #-196]	; 13474 <__assert_fail@plt+0x25e8>
   13534:	str	r3, [sp, #72]	; 0x48
   13538:	mov	fp, #0
   1353c:	mov	sl, #5
   13540:	b	12490 <__assert_fail@plt+0x1604>
   13544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13548:	sub	sp, sp, #52	; 0x34
   1354c:	mov	r5, r0
   13550:	str	r1, [sp, #24]
   13554:	str	r2, [sp, #28]
   13558:	mov	r4, r3
   1355c:	bl	10dc0 <__errno_location@plt>
   13560:	str	r0, [sp, #32]
   13564:	ldr	r3, [r0]
   13568:	str	r3, [sp, #36]	; 0x24
   1356c:	ldr	r3, [pc, #396]	; 13700 <__assert_fail@plt+0x2874>
   13570:	ldr	r6, [r3]
   13574:	cmn	r5, #-2147483647	; 0x80000001
   13578:	movne	r3, #0
   1357c:	moveq	r3, #1
   13580:	orrs	r3, r3, r5, lsr #31
   13584:	bne	136c4 <__assert_fail@plt+0x2838>
   13588:	ldr	r3, [pc, #368]	; 13700 <__assert_fail@plt+0x2874>
   1358c:	ldr	r2, [r3, #4]
   13590:	cmp	r5, r2
   13594:	blt	135fc <__assert_fail@plt+0x2770>
   13598:	str	r2, [sp, #44]	; 0x2c
   1359c:	add	r3, r3, #8
   135a0:	cmp	r6, r3
   135a4:	beq	136c8 <__assert_fail@plt+0x283c>
   135a8:	sub	r2, r5, r2
   135ac:	mov	r3, #8
   135b0:	str	r3, [sp]
   135b4:	mvn	r3, #-2147483648	; 0x80000000
   135b8:	add	r2, r2, #1
   135bc:	add	r1, sp, #44	; 0x2c
   135c0:	mov	r0, r6
   135c4:	bl	14448 <__assert_fail@plt+0x35bc>
   135c8:	mov	r6, r0
   135cc:	ldr	r3, [pc, #300]	; 13700 <__assert_fail@plt+0x2874>
   135d0:	str	r0, [r3]
   135d4:	ldr	r7, [pc, #292]	; 13700 <__assert_fail@plt+0x2874>
   135d8:	ldr	r0, [r7, #4]
   135dc:	ldr	r2, [sp, #44]	; 0x2c
   135e0:	sub	r2, r2, r0
   135e4:	lsl	r2, r2, #3
   135e8:	mov	r1, #0
   135ec:	add	r0, r6, r0, lsl #3
   135f0:	bl	10dd8 <memset@plt>
   135f4:	ldr	r3, [sp, #44]	; 0x2c
   135f8:	str	r3, [r7, #4]
   135fc:	add	fp, r6, r5, lsl #3
   13600:	ldr	r8, [r6, r5, lsl #3]
   13604:	ldr	r7, [fp, #4]
   13608:	ldr	r9, [r4, #4]
   1360c:	orr	r9, r9, #1
   13610:	add	sl, r4, #8
   13614:	ldr	r3, [r4, #44]	; 0x2c
   13618:	str	r3, [sp, #16]
   1361c:	ldr	r3, [r4, #40]	; 0x28
   13620:	str	r3, [sp, #12]
   13624:	str	sl, [sp, #8]
   13628:	str	r9, [sp, #4]
   1362c:	ldr	r3, [r4]
   13630:	str	r3, [sp]
   13634:	ldr	r3, [sp, #28]
   13638:	ldr	r2, [sp, #24]
   1363c:	mov	r1, r8
   13640:	mov	r0, r7
   13644:	bl	123d4 <__assert_fail@plt+0x1548>
   13648:	cmp	r8, r0
   1364c:	bhi	136ac <__assert_fail@plt+0x2820>
   13650:	add	r8, r0, #1
   13654:	str	r8, [r6, r5, lsl #3]
   13658:	ldr	r3, [pc, #164]	; 13704 <__assert_fail@plt+0x2878>
   1365c:	cmp	r7, r3
   13660:	beq	1366c <__assert_fail@plt+0x27e0>
   13664:	mov	r0, r7
   13668:	bl	15268 <__assert_fail@plt+0x43dc>
   1366c:	mov	r0, r8
   13670:	bl	142c4 <__assert_fail@plt+0x3438>
   13674:	mov	r7, r0
   13678:	str	r0, [fp, #4]
   1367c:	ldr	r3, [r4, #44]	; 0x2c
   13680:	str	r3, [sp, #16]
   13684:	ldr	r3, [r4, #40]	; 0x28
   13688:	str	r3, [sp, #12]
   1368c:	str	sl, [sp, #8]
   13690:	str	r9, [sp, #4]
   13694:	ldr	r3, [r4]
   13698:	str	r3, [sp]
   1369c:	ldr	r3, [sp, #28]
   136a0:	ldr	r2, [sp, #24]
   136a4:	mov	r1, r8
   136a8:	bl	123d4 <__assert_fail@plt+0x1548>
   136ac:	ldr	r3, [sp, #32]
   136b0:	ldr	r2, [sp, #36]	; 0x24
   136b4:	str	r2, [r3]
   136b8:	mov	r0, r7
   136bc:	add	sp, sp, #52	; 0x34
   136c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c4:	bl	10e74 <abort@plt>
   136c8:	sub	r2, r5, r2
   136cc:	mov	r3, #8
   136d0:	str	r3, [sp]
   136d4:	mvn	r3, #-2147483648	; 0x80000000
   136d8:	add	r2, r2, #1
   136dc:	add	r1, sp, #44	; 0x2c
   136e0:	mov	r0, #0
   136e4:	bl	14448 <__assert_fail@plt+0x35bc>
   136e8:	mov	r6, r0
   136ec:	ldr	r3, [pc, #12]	; 13700 <__assert_fail@plt+0x2874>
   136f0:	str	r0, [r3], #8
   136f4:	ldm	r3, {r0, r1}
   136f8:	stm	r6, {r0, r1}
   136fc:	b	135d4 <__assert_fail@plt+0x2748>
   13700:	andeq	r7, r2, ip, ror #1
   13704:	andeq	r7, r2, r4, ror #2
   13708:	push	{r4, r5, r6, lr}
   1370c:	mov	r4, r0
   13710:	bl	10dc0 <__errno_location@plt>
   13714:	mov	r5, r0
   13718:	ldr	r6, [r0]
   1371c:	cmp	r4, #0
   13720:	ldr	r3, [pc, #20]	; 1373c <__assert_fail@plt+0x28b0>
   13724:	moveq	r4, r3
   13728:	mov	r1, #48	; 0x30
   1372c:	mov	r0, r4
   13730:	bl	147b0 <__assert_fail@plt+0x3924>
   13734:	str	r6, [r5]
   13738:	pop	{r4, r5, r6, pc}
   1373c:	andeq	r7, r2, r4, ror #4
   13740:	subs	r3, r0, #0
   13744:	ldr	r2, [pc, #8]	; 13754 <__assert_fail@plt+0x28c8>
   13748:	moveq	r3, r2
   1374c:	ldr	r0, [r3]
   13750:	bx	lr
   13754:	andeq	r7, r2, r4, ror #4
   13758:	subs	r3, r0, #0
   1375c:	ldr	r2, [pc, #8]	; 1376c <__assert_fail@plt+0x28e0>
   13760:	moveq	r3, r2
   13764:	str	r1, [r3]
   13768:	bx	lr
   1376c:	andeq	r7, r2, r4, ror #4
   13770:	push	{lr}		; (str lr, [sp, #-4]!)
   13774:	subs	r3, r0, #0
   13778:	ldr	r0, [pc, #44]	; 137ac <__assert_fail@plt+0x2920>
   1377c:	moveq	r3, r0
   13780:	add	r3, r3, #8
   13784:	lsr	lr, r1, #5
   13788:	and	r1, r1, #31
   1378c:	ldr	ip, [r3, lr, lsl #2]
   13790:	lsr	r0, ip, r1
   13794:	eor	r2, r2, r0
   13798:	and	r2, r2, #1
   1379c:	eor	r1, ip, r2, lsl r1
   137a0:	str	r1, [r3, lr, lsl #2]
   137a4:	and	r0, r0, #1
   137a8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ac:	andeq	r7, r2, r4, ror #4
   137b0:	subs	r3, r0, #0
   137b4:	ldr	r2, [pc, #12]	; 137c8 <__assert_fail@plt+0x293c>
   137b8:	moveq	r3, r2
   137bc:	ldr	r0, [r3, #4]
   137c0:	str	r1, [r3, #4]
   137c4:	bx	lr
   137c8:	andeq	r7, r2, r4, ror #4
   137cc:	subs	r3, r0, #0
   137d0:	ldr	r0, [pc, #40]	; 13800 <__assert_fail@plt+0x2974>
   137d4:	moveq	r3, r0
   137d8:	mov	r0, #10
   137dc:	str	r0, [r3]
   137e0:	cmp	r2, #0
   137e4:	cmpne	r1, #0
   137e8:	beq	137f8 <__assert_fail@plt+0x296c>
   137ec:	str	r1, [r3, #40]	; 0x28
   137f0:	str	r2, [r3, #44]	; 0x2c
   137f4:	bx	lr
   137f8:	push	{r4, lr}
   137fc:	bl	10e74 <abort@plt>
   13800:	andeq	r7, r2, r4, ror #4
   13804:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13808:	sub	sp, sp, #24
   1380c:	mov	r7, r0
   13810:	mov	r8, r1
   13814:	mov	r9, r2
   13818:	mov	sl, r3
   1381c:	ldr	r4, [sp, #56]	; 0x38
   13820:	cmp	r4, #0
   13824:	ldr	r3, [pc, #84]	; 13880 <__assert_fail@plt+0x29f4>
   13828:	moveq	r4, r3
   1382c:	bl	10dc0 <__errno_location@plt>
   13830:	mov	r5, r0
   13834:	ldr	r6, [r0]
   13838:	ldr	r3, [r4, #44]	; 0x2c
   1383c:	str	r3, [sp, #16]
   13840:	ldr	r3, [r4, #40]	; 0x28
   13844:	str	r3, [sp, #12]
   13848:	add	r3, r4, #8
   1384c:	str	r3, [sp, #8]
   13850:	ldr	r3, [r4, #4]
   13854:	str	r3, [sp, #4]
   13858:	ldr	r3, [r4]
   1385c:	str	r3, [sp]
   13860:	mov	r3, sl
   13864:	mov	r2, r9
   13868:	mov	r1, r8
   1386c:	mov	r0, r7
   13870:	bl	123d4 <__assert_fail@plt+0x1548>
   13874:	str	r6, [r5]
   13878:	add	sp, sp, #24
   1387c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13880:	andeq	r7, r2, r4, ror #4
   13884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13888:	sub	sp, sp, #44	; 0x2c
   1388c:	str	r0, [sp, #28]
   13890:	str	r1, [sp, #32]
   13894:	mov	r6, r2
   13898:	subs	r4, r3, #0
   1389c:	ldr	r3, [pc, #172]	; 13950 <__assert_fail@plt+0x2ac4>
   138a0:	moveq	r4, r3
   138a4:	bl	10dc0 <__errno_location@plt>
   138a8:	mov	r7, r0
   138ac:	ldr	fp, [r0]
   138b0:	ldr	r5, [r4, #4]
   138b4:	cmp	r6, #0
   138b8:	orreq	r5, r5, #1
   138bc:	add	r9, r4, #8
   138c0:	ldr	r3, [r4, #44]	; 0x2c
   138c4:	str	r3, [sp, #16]
   138c8:	ldr	r3, [r4, #40]	; 0x28
   138cc:	str	r3, [sp, #12]
   138d0:	str	r9, [sp, #8]
   138d4:	str	r5, [sp, #4]
   138d8:	ldr	r3, [r4]
   138dc:	str	r3, [sp]
   138e0:	ldr	r3, [sp, #32]
   138e4:	ldr	r2, [sp, #28]
   138e8:	mov	r1, #0
   138ec:	mov	r0, r1
   138f0:	bl	123d4 <__assert_fail@plt+0x1548>
   138f4:	mov	sl, r0
   138f8:	add	r8, r0, #1
   138fc:	mov	r0, r8
   13900:	bl	142c4 <__assert_fail@plt+0x3438>
   13904:	str	r0, [sp, #36]	; 0x24
   13908:	ldr	r3, [r4, #44]	; 0x2c
   1390c:	str	r3, [sp, #16]
   13910:	ldr	r3, [r4, #40]	; 0x28
   13914:	str	r3, [sp, #12]
   13918:	str	r9, [sp, #8]
   1391c:	str	r5, [sp, #4]
   13920:	ldr	r3, [r4]
   13924:	str	r3, [sp]
   13928:	ldr	r3, [sp, #32]
   1392c:	ldr	r2, [sp, #28]
   13930:	mov	r1, r8
   13934:	bl	123d4 <__assert_fail@plt+0x1548>
   13938:	str	fp, [r7]
   1393c:	cmp	r6, #0
   13940:	strne	sl, [r6]
   13944:	ldr	r0, [sp, #36]	; 0x24
   13948:	add	sp, sp, #44	; 0x2c
   1394c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13950:	andeq	r7, r2, r4, ror #4
   13954:	push	{r4, lr}
   13958:	mov	r3, r2
   1395c:	mov	r2, #0
   13960:	bl	13884 <__assert_fail@plt+0x29f8>
   13964:	pop	{r4, pc}
   13968:	push	{r4, r5, r6, r7, r8, lr}
   1396c:	ldr	r3, [pc, #140]	; 13a00 <__assert_fail@plt+0x2b74>
   13970:	ldr	r7, [r3]
   13974:	ldr	r3, [r3, #4]
   13978:	cmp	r3, #1
   1397c:	ble	139a8 <__assert_fail@plt+0x2b1c>
   13980:	mov	r5, r7
   13984:	mov	r4, #1
   13988:	ldr	r6, [pc, #112]	; 13a00 <__assert_fail@plt+0x2b74>
   1398c:	ldr	r0, [r5, #12]
   13990:	bl	15268 <__assert_fail@plt+0x43dc>
   13994:	add	r4, r4, #1
   13998:	add	r5, r5, #8
   1399c:	ldr	r3, [r6, #4]
   139a0:	cmp	r3, r4
   139a4:	bgt	1398c <__assert_fail@plt+0x2b00>
   139a8:	ldr	r0, [r7, #4]
   139ac:	ldr	r3, [pc, #80]	; 13a04 <__assert_fail@plt+0x2b78>
   139b0:	cmp	r0, r3
   139b4:	beq	139d0 <__assert_fail@plt+0x2b44>
   139b8:	bl	15268 <__assert_fail@plt+0x43dc>
   139bc:	ldr	r3, [pc, #60]	; 13a00 <__assert_fail@plt+0x2b74>
   139c0:	mov	r2, #256	; 0x100
   139c4:	str	r2, [r3, #8]
   139c8:	ldr	r2, [pc, #52]	; 13a04 <__assert_fail@plt+0x2b78>
   139cc:	str	r2, [r3, #12]
   139d0:	ldr	r3, [pc, #48]	; 13a08 <__assert_fail@plt+0x2b7c>
   139d4:	cmp	r7, r3
   139d8:	beq	139f0 <__assert_fail@plt+0x2b64>
   139dc:	mov	r0, r7
   139e0:	bl	15268 <__assert_fail@plt+0x43dc>
   139e4:	ldr	r3, [pc, #20]	; 13a00 <__assert_fail@plt+0x2b74>
   139e8:	add	r2, r3, #8
   139ec:	str	r2, [r3]
   139f0:	mov	r2, #1
   139f4:	ldr	r3, [pc, #4]	; 13a00 <__assert_fail@plt+0x2b74>
   139f8:	str	r2, [r3, #4]
   139fc:	pop	{r4, r5, r6, r7, r8, pc}
   13a00:	andeq	r7, r2, ip, ror #1
   13a04:	andeq	r7, r2, r4, ror #2
   13a08:	strdeq	r7, [r2], -r4
   13a0c:	push	{r4, lr}
   13a10:	ldr	r3, [pc, #8]	; 13a20 <__assert_fail@plt+0x2b94>
   13a14:	mvn	r2, #0
   13a18:	bl	13544 <__assert_fail@plt+0x26b8>
   13a1c:	pop	{r4, pc}
   13a20:	andeq	r7, r2, r4, ror #4
   13a24:	push	{r4, lr}
   13a28:	ldr	r3, [pc, #4]	; 13a34 <__assert_fail@plt+0x2ba8>
   13a2c:	bl	13544 <__assert_fail@plt+0x26b8>
   13a30:	pop	{r4, pc}
   13a34:	andeq	r7, r2, r4, ror #4
   13a38:	push	{r4, lr}
   13a3c:	mov	r1, r0
   13a40:	mov	r0, #0
   13a44:	bl	13a0c <__assert_fail@plt+0x2b80>
   13a48:	pop	{r4, pc}
   13a4c:	push	{r4, lr}
   13a50:	mov	r2, r1
   13a54:	mov	r1, r0
   13a58:	mov	r0, #0
   13a5c:	bl	13a24 <__assert_fail@plt+0x2b98>
   13a60:	pop	{r4, pc}
   13a64:	push	{r4, r5, lr}
   13a68:	sub	sp, sp, #52	; 0x34
   13a6c:	mov	r4, r0
   13a70:	mov	r5, r2
   13a74:	mov	r0, sp
   13a78:	bl	1226c <__assert_fail@plt+0x13e0>
   13a7c:	mov	r3, sp
   13a80:	mvn	r2, #0
   13a84:	mov	r1, r5
   13a88:	mov	r0, r4
   13a8c:	bl	13544 <__assert_fail@plt+0x26b8>
   13a90:	add	sp, sp, #52	; 0x34
   13a94:	pop	{r4, r5, pc}
   13a98:	push	{r4, r5, r6, lr}
   13a9c:	sub	sp, sp, #48	; 0x30
   13aa0:	mov	r4, r0
   13aa4:	mov	r5, r2
   13aa8:	mov	r6, r3
   13aac:	mov	r0, sp
   13ab0:	bl	1226c <__assert_fail@plt+0x13e0>
   13ab4:	mov	r3, sp
   13ab8:	mov	r2, r6
   13abc:	mov	r1, r5
   13ac0:	mov	r0, r4
   13ac4:	bl	13544 <__assert_fail@plt+0x26b8>
   13ac8:	add	sp, sp, #48	; 0x30
   13acc:	pop	{r4, r5, r6, pc}
   13ad0:	push	{r4, lr}
   13ad4:	mov	r2, r1
   13ad8:	mov	r1, r0
   13adc:	mov	r0, #0
   13ae0:	bl	13a64 <__assert_fail@plt+0x2bd8>
   13ae4:	pop	{r4, pc}
   13ae8:	push	{r4, lr}
   13aec:	mov	r3, r2
   13af0:	mov	r2, r1
   13af4:	mov	r1, r0
   13af8:	mov	r0, #0
   13afc:	bl	13a98 <__assert_fail@plt+0x2c0c>
   13b00:	pop	{r4, pc}
   13b04:	push	{r4, r5, r6, lr}
   13b08:	sub	sp, sp, #48	; 0x30
   13b0c:	mov	r4, r0
   13b10:	mov	r5, r1
   13b14:	mov	r6, r2
   13b18:	mov	ip, sp
   13b1c:	ldr	lr, [pc, #64]	; 13b64 <__assert_fail@plt+0x2cd8>
   13b20:	ldm	lr!, {r0, r1, r2, r3}
   13b24:	stmia	ip!, {r0, r1, r2, r3}
   13b28:	ldm	lr!, {r0, r1, r2, r3}
   13b2c:	stmia	ip!, {r0, r1, r2, r3}
   13b30:	ldm	lr, {r0, r1, r2, r3}
   13b34:	stm	ip, {r0, r1, r2, r3}
   13b38:	mov	r2, #1
   13b3c:	mov	r1, r6
   13b40:	mov	r0, sp
   13b44:	bl	13770 <__assert_fail@plt+0x28e4>
   13b48:	mov	r3, sp
   13b4c:	mov	r2, r5
   13b50:	mov	r1, r4
   13b54:	mov	r0, #0
   13b58:	bl	13544 <__assert_fail@plt+0x26b8>
   13b5c:	add	sp, sp, #48	; 0x30
   13b60:	pop	{r4, r5, r6, pc}
   13b64:	andeq	r7, r2, r4, ror #4
   13b68:	push	{r4, lr}
   13b6c:	mov	r2, r1
   13b70:	mvn	r1, #0
   13b74:	bl	13b04 <__assert_fail@plt+0x2c78>
   13b78:	pop	{r4, pc}
   13b7c:	push	{r4, lr}
   13b80:	mov	r1, #58	; 0x3a
   13b84:	bl	13b68 <__assert_fail@plt+0x2cdc>
   13b88:	pop	{r4, pc}
   13b8c:	push	{r4, lr}
   13b90:	mov	r2, #58	; 0x3a
   13b94:	bl	13b04 <__assert_fail@plt+0x2c78>
   13b98:	pop	{r4, pc}
   13b9c:	push	{r4, r5, lr}
   13ba0:	sub	sp, sp, #100	; 0x64
   13ba4:	mov	r4, r0
   13ba8:	mov	r5, r2
   13bac:	mov	r0, sp
   13bb0:	bl	1226c <__assert_fail@plt+0x13e0>
   13bb4:	add	lr, sp, #48	; 0x30
   13bb8:	mov	ip, sp
   13bbc:	ldm	ip!, {r0, r1, r2, r3}
   13bc0:	stmia	lr!, {r0, r1, r2, r3}
   13bc4:	ldm	ip!, {r0, r1, r2, r3}
   13bc8:	stmia	lr!, {r0, r1, r2, r3}
   13bcc:	ldm	ip, {r0, r1, r2, r3}
   13bd0:	stm	lr, {r0, r1, r2, r3}
   13bd4:	mov	r2, #1
   13bd8:	mov	r1, #58	; 0x3a
   13bdc:	add	r0, sp, #48	; 0x30
   13be0:	bl	13770 <__assert_fail@plt+0x28e4>
   13be4:	add	r3, sp, #48	; 0x30
   13be8:	mvn	r2, #0
   13bec:	mov	r1, r5
   13bf0:	mov	r0, r4
   13bf4:	bl	13544 <__assert_fail@plt+0x26b8>
   13bf8:	add	sp, sp, #100	; 0x64
   13bfc:	pop	{r4, r5, pc}
   13c00:	push	{r4, r5, r6, r7, lr}
   13c04:	sub	sp, sp, #52	; 0x34
   13c08:	mov	r4, r0
   13c0c:	mov	r6, r1
   13c10:	mov	r7, r2
   13c14:	mov	r5, r3
   13c18:	mov	ip, sp
   13c1c:	ldr	lr, [pc, #64]	; 13c64 <__assert_fail@plt+0x2dd8>
   13c20:	ldm	lr!, {r0, r1, r2, r3}
   13c24:	stmia	ip!, {r0, r1, r2, r3}
   13c28:	ldm	lr!, {r0, r1, r2, r3}
   13c2c:	stmia	ip!, {r0, r1, r2, r3}
   13c30:	ldm	lr, {r0, r1, r2, r3}
   13c34:	stm	ip, {r0, r1, r2, r3}
   13c38:	mov	r2, r7
   13c3c:	mov	r1, r6
   13c40:	mov	r0, sp
   13c44:	bl	137cc <__assert_fail@plt+0x2940>
   13c48:	mov	r3, sp
   13c4c:	ldr	r2, [sp, #72]	; 0x48
   13c50:	mov	r1, r5
   13c54:	mov	r0, r4
   13c58:	bl	13544 <__assert_fail@plt+0x26b8>
   13c5c:	add	sp, sp, #52	; 0x34
   13c60:	pop	{r4, r5, r6, r7, pc}
   13c64:	andeq	r7, r2, r4, ror #4
   13c68:	push	{lr}		; (str lr, [sp, #-4]!)
   13c6c:	sub	sp, sp, #12
   13c70:	mvn	ip, #0
   13c74:	str	ip, [sp]
   13c78:	bl	13c00 <__assert_fail@plt+0x2d74>
   13c7c:	add	sp, sp, #12
   13c80:	pop	{pc}		; (ldr pc, [sp], #4)
   13c84:	push	{r4, lr}
   13c88:	mov	r3, r2
   13c8c:	mov	r2, r1
   13c90:	mov	r1, r0
   13c94:	mov	r0, #0
   13c98:	bl	13c68 <__assert_fail@plt+0x2ddc>
   13c9c:	pop	{r4, pc}
   13ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ca4:	sub	sp, sp, #12
   13ca8:	str	r3, [sp]
   13cac:	mov	r3, r2
   13cb0:	mov	r2, r1
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, #0
   13cbc:	bl	13c00 <__assert_fail@plt+0x2d74>
   13cc0:	add	sp, sp, #12
   13cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc8:	push	{r4, lr}
   13ccc:	ldr	r3, [pc, #4]	; 13cd8 <__assert_fail@plt+0x2e4c>
   13cd0:	bl	13544 <__assert_fail@plt+0x26b8>
   13cd4:	pop	{r4, pc}
   13cd8:	strdeq	r7, [r2], -ip
   13cdc:	push	{r4, lr}
   13ce0:	mov	r2, r1
   13ce4:	mov	r1, r0
   13ce8:	mov	r0, #0
   13cec:	bl	13cc8 <__assert_fail@plt+0x2e3c>
   13cf0:	pop	{r4, pc}
   13cf4:	push	{r4, lr}
   13cf8:	mvn	r2, #0
   13cfc:	bl	13cc8 <__assert_fail@plt+0x2e3c>
   13d00:	pop	{r4, pc}
   13d04:	push	{r4, lr}
   13d08:	mov	r1, r0
   13d0c:	mov	r0, #0
   13d10:	bl	13cf4 <__assert_fail@plt+0x2e68>
   13d14:	pop	{r4, pc}
   13d18:	push	{r4, r5, r6, lr}
   13d1c:	sub	sp, sp, #32
   13d20:	mov	r4, r0
   13d24:	ldr	r5, [sp, #48]	; 0x30
   13d28:	ldr	r6, [sp, #52]	; 0x34
   13d2c:	cmp	r1, #0
   13d30:	beq	13de8 <__assert_fail@plt+0x2f5c>
   13d34:	str	r3, [sp, #4]
   13d38:	str	r2, [sp]
   13d3c:	mov	r3, r1
   13d40:	ldr	r2, [pc, #940]	; 140f4 <__assert_fail@plt+0x3268>
   13d44:	mov	r1, #1
   13d48:	bl	10dfc <__fprintf_chk@plt>
   13d4c:	mov	r2, #5
   13d50:	ldr	r1, [pc, #928]	; 140f8 <__assert_fail@plt+0x326c>
   13d54:	mov	r0, #0
   13d58:	bl	10cc4 <dcgettext@plt>
   13d5c:	ldr	r3, [pc, #920]	; 140fc <__assert_fail@plt+0x3270>
   13d60:	str	r3, [sp]
   13d64:	mov	r3, r0
   13d68:	ldr	r2, [pc, #912]	; 14100 <__assert_fail@plt+0x3274>
   13d6c:	mov	r1, #1
   13d70:	mov	r0, r4
   13d74:	bl	10dfc <__fprintf_chk@plt>
   13d78:	mov	r1, r4
   13d7c:	mov	r0, #10
   13d80:	bl	10cb8 <fputc_unlocked@plt>
   13d84:	mov	r2, #5
   13d88:	ldr	r1, [pc, #884]	; 14104 <__assert_fail@plt+0x3278>
   13d8c:	mov	r0, #0
   13d90:	bl	10cc4 <dcgettext@plt>
   13d94:	ldr	r3, [pc, #876]	; 14108 <__assert_fail@plt+0x327c>
   13d98:	mov	r2, r0
   13d9c:	mov	r1, #1
   13da0:	mov	r0, r4
   13da4:	bl	10dfc <__fprintf_chk@plt>
   13da8:	mov	r1, r4
   13dac:	mov	r0, #10
   13db0:	bl	10cb8 <fputc_unlocked@plt>
   13db4:	cmp	r6, #9
   13db8:	ldrls	pc, [pc, r6, lsl #2]
   13dbc:	b	1408c <__assert_fail@plt+0x3200>
   13dc0:	andeq	r3, r1, r4, lsr #28
   13dc4:	andeq	r3, r1, r0, lsl #28
   13dc8:	andeq	r3, r1, ip, lsr #28
   13dcc:	andeq	r3, r1, ip, asr lr
   13dd0:	muleq	r1, r4, lr
   13dd4:	ldrdeq	r3, [r1], -r4
   13dd8:	andeq	r3, r1, ip, lsl pc
   13ddc:	andeq	r3, r1, ip, ror #30
   13de0:	andeq	r3, r1, r4, asr #31
   13de4:	andeq	r4, r1, r4, lsr #32
   13de8:	str	r3, [sp]
   13dec:	mov	r3, r2
   13df0:	ldr	r2, [pc, #788]	; 1410c <__assert_fail@plt+0x3280>
   13df4:	mov	r1, #1
   13df8:	bl	10dfc <__fprintf_chk@plt>
   13dfc:	b	13d4c <__assert_fail@plt+0x2ec0>
   13e00:	mov	r2, #5
   13e04:	ldr	r1, [pc, #772]	; 14110 <__assert_fail@plt+0x3284>
   13e08:	mov	r0, #0
   13e0c:	bl	10cc4 <dcgettext@plt>
   13e10:	ldr	r3, [r5]
   13e14:	mov	r2, r0
   13e18:	mov	r1, #1
   13e1c:	mov	r0, r4
   13e20:	bl	10dfc <__fprintf_chk@plt>
   13e24:	add	sp, sp, #32
   13e28:	pop	{r4, r5, r6, pc}
   13e2c:	mov	r2, #5
   13e30:	ldr	r1, [pc, #732]	; 14114 <__assert_fail@plt+0x3288>
   13e34:	mov	r0, #0
   13e38:	bl	10cc4 <dcgettext@plt>
   13e3c:	ldr	r3, [r5]
   13e40:	ldr	r2, [r5, #4]
   13e44:	str	r2, [sp]
   13e48:	mov	r2, r0
   13e4c:	mov	r1, #1
   13e50:	mov	r0, r4
   13e54:	bl	10dfc <__fprintf_chk@plt>
   13e58:	b	13e24 <__assert_fail@plt+0x2f98>
   13e5c:	mov	r2, #5
   13e60:	ldr	r1, [pc, #688]	; 14118 <__assert_fail@plt+0x328c>
   13e64:	mov	r0, #0
   13e68:	bl	10cc4 <dcgettext@plt>
   13e6c:	ldr	r3, [r5]
   13e70:	ldr	r2, [r5, #8]
   13e74:	str	r2, [sp, #4]
   13e78:	ldr	r2, [r5, #4]
   13e7c:	str	r2, [sp]
   13e80:	mov	r2, r0
   13e84:	mov	r1, #1
   13e88:	mov	r0, r4
   13e8c:	bl	10dfc <__fprintf_chk@plt>
   13e90:	b	13e24 <__assert_fail@plt+0x2f98>
   13e94:	mov	r2, #5
   13e98:	ldr	r1, [pc, #636]	; 1411c <__assert_fail@plt+0x3290>
   13e9c:	mov	r0, #0
   13ea0:	bl	10cc4 <dcgettext@plt>
   13ea4:	ldr	r3, [r5]
   13ea8:	ldr	r2, [r5, #12]
   13eac:	str	r2, [sp, #8]
   13eb0:	ldr	r2, [r5, #8]
   13eb4:	str	r2, [sp, #4]
   13eb8:	ldr	r2, [r5, #4]
   13ebc:	str	r2, [sp]
   13ec0:	mov	r2, r0
   13ec4:	mov	r1, #1
   13ec8:	mov	r0, r4
   13ecc:	bl	10dfc <__fprintf_chk@plt>
   13ed0:	b	13e24 <__assert_fail@plt+0x2f98>
   13ed4:	mov	r2, #5
   13ed8:	ldr	r1, [pc, #576]	; 14120 <__assert_fail@plt+0x3294>
   13edc:	mov	r0, #0
   13ee0:	bl	10cc4 <dcgettext@plt>
   13ee4:	ldr	r3, [r5]
   13ee8:	ldr	r2, [r5, #16]
   13eec:	str	r2, [sp, #12]
   13ef0:	ldr	r2, [r5, #12]
   13ef4:	str	r2, [sp, #8]
   13ef8:	ldr	r2, [r5, #8]
   13efc:	str	r2, [sp, #4]
   13f00:	ldr	r2, [r5, #4]
   13f04:	str	r2, [sp]
   13f08:	mov	r2, r0
   13f0c:	mov	r1, #1
   13f10:	mov	r0, r4
   13f14:	bl	10dfc <__fprintf_chk@plt>
   13f18:	b	13e24 <__assert_fail@plt+0x2f98>
   13f1c:	mov	r2, #5
   13f20:	ldr	r1, [pc, #508]	; 14124 <__assert_fail@plt+0x3298>
   13f24:	mov	r0, #0
   13f28:	bl	10cc4 <dcgettext@plt>
   13f2c:	ldr	r3, [r5]
   13f30:	ldr	r2, [r5, #20]
   13f34:	str	r2, [sp, #16]
   13f38:	ldr	r2, [r5, #16]
   13f3c:	str	r2, [sp, #12]
   13f40:	ldr	r2, [r5, #12]
   13f44:	str	r2, [sp, #8]
   13f48:	ldr	r2, [r5, #8]
   13f4c:	str	r2, [sp, #4]
   13f50:	ldr	r2, [r5, #4]
   13f54:	str	r2, [sp]
   13f58:	mov	r2, r0
   13f5c:	mov	r1, #1
   13f60:	mov	r0, r4
   13f64:	bl	10dfc <__fprintf_chk@plt>
   13f68:	b	13e24 <__assert_fail@plt+0x2f98>
   13f6c:	mov	r2, #5
   13f70:	ldr	r1, [pc, #432]	; 14128 <__assert_fail@plt+0x329c>
   13f74:	mov	r0, #0
   13f78:	bl	10cc4 <dcgettext@plt>
   13f7c:	ldr	r3, [r5]
   13f80:	ldr	r2, [r5, #24]
   13f84:	str	r2, [sp, #20]
   13f88:	ldr	r2, [r5, #20]
   13f8c:	str	r2, [sp, #16]
   13f90:	ldr	r2, [r5, #16]
   13f94:	str	r2, [sp, #12]
   13f98:	ldr	r2, [r5, #12]
   13f9c:	str	r2, [sp, #8]
   13fa0:	ldr	r2, [r5, #8]
   13fa4:	str	r2, [sp, #4]
   13fa8:	ldr	r2, [r5, #4]
   13fac:	str	r2, [sp]
   13fb0:	mov	r2, r0
   13fb4:	mov	r1, #1
   13fb8:	mov	r0, r4
   13fbc:	bl	10dfc <__fprintf_chk@plt>
   13fc0:	b	13e24 <__assert_fail@plt+0x2f98>
   13fc4:	mov	r2, #5
   13fc8:	ldr	r1, [pc, #348]	; 1412c <__assert_fail@plt+0x32a0>
   13fcc:	mov	r0, #0
   13fd0:	bl	10cc4 <dcgettext@plt>
   13fd4:	ldr	r3, [r5]
   13fd8:	ldr	r2, [r5, #28]
   13fdc:	str	r2, [sp, #24]
   13fe0:	ldr	r2, [r5, #24]
   13fe4:	str	r2, [sp, #20]
   13fe8:	ldr	r2, [r5, #20]
   13fec:	str	r2, [sp, #16]
   13ff0:	ldr	r2, [r5, #16]
   13ff4:	str	r2, [sp, #12]
   13ff8:	ldr	r2, [r5, #12]
   13ffc:	str	r2, [sp, #8]
   14000:	ldr	r2, [r5, #8]
   14004:	str	r2, [sp, #4]
   14008:	ldr	r2, [r5, #4]
   1400c:	str	r2, [sp]
   14010:	mov	r2, r0
   14014:	mov	r1, #1
   14018:	mov	r0, r4
   1401c:	bl	10dfc <__fprintf_chk@plt>
   14020:	b	13e24 <__assert_fail@plt+0x2f98>
   14024:	mov	r2, #5
   14028:	ldr	r1, [pc, #256]	; 14130 <__assert_fail@plt+0x32a4>
   1402c:	mov	r0, #0
   14030:	bl	10cc4 <dcgettext@plt>
   14034:	ldr	r3, [r5]
   14038:	ldr	r2, [r5, #32]
   1403c:	str	r2, [sp, #28]
   14040:	ldr	r2, [r5, #28]
   14044:	str	r2, [sp, #24]
   14048:	ldr	r2, [r5, #24]
   1404c:	str	r2, [sp, #20]
   14050:	ldr	r2, [r5, #20]
   14054:	str	r2, [sp, #16]
   14058:	ldr	r2, [r5, #16]
   1405c:	str	r2, [sp, #12]
   14060:	ldr	r2, [r5, #12]
   14064:	str	r2, [sp, #8]
   14068:	ldr	r2, [r5, #8]
   1406c:	str	r2, [sp, #4]
   14070:	ldr	r2, [r5, #4]
   14074:	str	r2, [sp]
   14078:	mov	r2, r0
   1407c:	mov	r1, #1
   14080:	mov	r0, r4
   14084:	bl	10dfc <__fprintf_chk@plt>
   14088:	b	13e24 <__assert_fail@plt+0x2f98>
   1408c:	mov	r2, #5
   14090:	ldr	r1, [pc, #156]	; 14134 <__assert_fail@plt+0x32a8>
   14094:	mov	r0, #0
   14098:	bl	10cc4 <dcgettext@plt>
   1409c:	ldr	r3, [r5]
   140a0:	ldr	r2, [r5, #32]
   140a4:	str	r2, [sp, #28]
   140a8:	ldr	r2, [r5, #28]
   140ac:	str	r2, [sp, #24]
   140b0:	ldr	r2, [r5, #24]
   140b4:	str	r2, [sp, #20]
   140b8:	ldr	r2, [r5, #20]
   140bc:	str	r2, [sp, #16]
   140c0:	ldr	r2, [r5, #16]
   140c4:	str	r2, [sp, #12]
   140c8:	ldr	r2, [r5, #12]
   140cc:	str	r2, [sp, #8]
   140d0:	ldr	r2, [r5, #8]
   140d4:	str	r2, [sp, #4]
   140d8:	ldr	r2, [r5, #4]
   140dc:	str	r2, [sp]
   140e0:	mov	r2, r0
   140e4:	mov	r1, #1
   140e8:	mov	r0, r4
   140ec:	bl	10dfc <__fprintf_chk@plt>
   140f0:	b	13e24 <__assert_fail@plt+0x2f98>
   140f4:	andeq	r6, r1, r4, lsl #13
   140f8:	muleq	r1, r8, r6
   140fc:	andeq	r0, r0, r6, ror #15
   14100:	andeq	r6, r1, r0, ror r9
   14104:	muleq	r1, ip, r6
   14108:	andeq	r6, r1, r8, asr #14
   1410c:	muleq	r1, r0, r6
   14110:	andeq	r6, r1, ip, ror #14
   14114:	andeq	r6, r1, ip, ror r7
   14118:	muleq	r1, r4, r7
   1411c:			; <UNDEFINED> instruction: 0x000167b0
   14120:	ldrdeq	r6, [r1], -r0
   14124:	strdeq	r6, [r1], -r4
   14128:	andeq	r6, r1, ip, lsl r8
   1412c:	andeq	r6, r1, r8, asr #16
   14130:	andeq	r6, r1, r8, ror r8
   14134:	andeq	r6, r1, ip, lsr #17
   14138:	push	{r4, r5, lr}
   1413c:	sub	sp, sp, #12
   14140:	ldr	r5, [sp, #24]
   14144:	ldr	ip, [r5]
   14148:	cmp	ip, #0
   1414c:	beq	1417c <__assert_fail@plt+0x32f0>
   14150:	mov	lr, r5
   14154:	mov	ip, #0
   14158:	add	ip, ip, #1
   1415c:	ldr	r4, [lr, #4]!
   14160:	cmp	r4, #0
   14164:	bne	14158 <__assert_fail@plt+0x32cc>
   14168:	str	ip, [sp, #4]
   1416c:	str	r5, [sp]
   14170:	bl	13d18 <__assert_fail@plt+0x2e8c>
   14174:	add	sp, sp, #12
   14178:	pop	{r4, r5, pc}
   1417c:	mov	ip, #0
   14180:	b	14168 <__assert_fail@plt+0x32dc>
   14184:	push	{r4, r5, lr}
   14188:	sub	sp, sp, #52	; 0x34
   1418c:	ldr	r4, [sp, #64]	; 0x40
   14190:	sub	r4, r4, #4
   14194:	add	r5, sp, #4
   14198:	mov	ip, #0
   1419c:	ldr	lr, [r4, #4]!
   141a0:	str	lr, [r5, #4]!
   141a4:	cmp	lr, #0
   141a8:	beq	141b8 <__assert_fail@plt+0x332c>
   141ac:	add	ip, ip, #1
   141b0:	cmp	ip, #10
   141b4:	bne	1419c <__assert_fail@plt+0x3310>
   141b8:	str	ip, [sp, #4]
   141bc:	add	ip, sp, #8
   141c0:	str	ip, [sp]
   141c4:	bl	13d18 <__assert_fail@plt+0x2e8c>
   141c8:	add	sp, sp, #52	; 0x34
   141cc:	pop	{r4, r5, pc}
   141d0:	push	{r3}		; (str r3, [sp, #-4]!)
   141d4:	push	{lr}		; (str lr, [sp, #-4]!)
   141d8:	sub	sp, sp, #16
   141dc:	add	r3, sp, #24
   141e0:	str	r3, [sp, #12]
   141e4:	str	r3, [sp]
   141e8:	ldr	r3, [sp, #20]
   141ec:	bl	14184 <__assert_fail@plt+0x32f8>
   141f0:	add	sp, sp, #16
   141f4:	pop	{lr}		; (ldr lr, [sp], #4)
   141f8:	add	sp, sp, #4
   141fc:	bx	lr
   14200:	push	{r4, lr}
   14204:	ldr	r3, [pc, #112]	; 1427c <__assert_fail@plt+0x33f0>
   14208:	ldr	r1, [r3]
   1420c:	mov	r0, #10
   14210:	bl	10cb8 <fputc_unlocked@plt>
   14214:	mov	r2, #5
   14218:	ldr	r1, [pc, #96]	; 14280 <__assert_fail@plt+0x33f4>
   1421c:	mov	r0, #0
   14220:	bl	10cc4 <dcgettext@plt>
   14224:	ldr	r2, [pc, #88]	; 14284 <__assert_fail@plt+0x33f8>
   14228:	mov	r1, r0
   1422c:	mov	r0, #1
   14230:	bl	10de4 <__printf_chk@plt>
   14234:	mov	r2, #5
   14238:	ldr	r1, [pc, #72]	; 14288 <__assert_fail@plt+0x33fc>
   1423c:	mov	r0, #0
   14240:	bl	10cc4 <dcgettext@plt>
   14244:	ldr	r3, [pc, #64]	; 1428c <__assert_fail@plt+0x3400>
   14248:	ldr	r2, [pc, #64]	; 14290 <__assert_fail@plt+0x3404>
   1424c:	mov	r1, r0
   14250:	mov	r0, #1
   14254:	bl	10de4 <__printf_chk@plt>
   14258:	mov	r2, #5
   1425c:	ldr	r1, [pc, #48]	; 14294 <__assert_fail@plt+0x3408>
   14260:	mov	r0, #0
   14264:	bl	10cc4 <dcgettext@plt>
   14268:	ldr	r2, [pc, #40]	; 14298 <__assert_fail@plt+0x340c>
   1426c:	mov	r1, r0
   14270:	mov	r0, #1
   14274:	bl	10de4 <__printf_chk@plt>
   14278:	pop	{r4, pc}
   1427c:	andeq	r7, r2, r4, asr #2
   14280:	andeq	r6, r1, r8, ror #17
   14284:	strdeq	r6, [r1], -ip
   14288:	andeq	r6, r1, r4, lsl r9
   1428c:	andeq	r6, r1, ip, lsl #3
   14290:			; <UNDEFINED> instruction: 0x000161b4
   14294:	andeq	r6, r1, r8, lsr #18
   14298:	andeq	r6, r1, r0, asr r9
   1429c:	push	{r4, lr}
   142a0:	bl	15064 <__assert_fail@plt+0x41d8>
   142a4:	cmp	r0, #0
   142a8:	popne	{r4, pc}
   142ac:	bl	14840 <__assert_fail@plt+0x39b4>
   142b0:	push	{r4, lr}
   142b4:	bl	15064 <__assert_fail@plt+0x41d8>
   142b8:	cmp	r0, #0
   142bc:	popne	{r4, pc}
   142c0:	bl	14840 <__assert_fail@plt+0x39b4>
   142c4:	push	{r4, lr}
   142c8:	bl	1429c <__assert_fail@plt+0x3410>
   142cc:	pop	{r4, pc}
   142d0:	push	{r4, r5, r6, lr}
   142d4:	mov	r5, r0
   142d8:	mov	r4, r1
   142dc:	bl	15094 <__assert_fail@plt+0x4208>
   142e0:	cmp	r0, #0
   142e4:	popne	{r4, r5, r6, pc}
   142e8:	adds	r4, r4, #0
   142ec:	movne	r4, #1
   142f0:	cmp	r5, #0
   142f4:	orreq	r4, r4, #1
   142f8:	cmp	r4, #0
   142fc:	popeq	{r4, r5, r6, pc}
   14300:	bl	14840 <__assert_fail@plt+0x39b4>
   14304:	push	{r4, lr}
   14308:	cmp	r1, #0
   1430c:	orreq	r1, r1, #1
   14310:	bl	15094 <__assert_fail@plt+0x4208>
   14314:	cmp	r0, #0
   14318:	popne	{r4, pc}
   1431c:	bl	14840 <__assert_fail@plt+0x39b4>
   14320:	push	{r4, r5, r6, lr}
   14324:	mov	r6, r0
   14328:	mov	r5, r1
   1432c:	mov	r4, r2
   14330:	bl	153f4 <__assert_fail@plt+0x4568>
   14334:	cmp	r0, #0
   14338:	popne	{r4, r5, r6, pc}
   1433c:	cmp	r6, #0
   14340:	beq	14350 <__assert_fail@plt+0x34c4>
   14344:	cmp	r5, #0
   14348:	cmpne	r4, #0
   1434c:	popeq	{r4, r5, r6, pc}
   14350:	bl	14840 <__assert_fail@plt+0x39b4>
   14354:	push	{r4, lr}
   14358:	bl	14320 <__assert_fail@plt+0x3494>
   1435c:	pop	{r4, pc}
   14360:	push	{r4, lr}
   14364:	mov	ip, r1
   14368:	mov	r3, r2
   1436c:	cmp	r2, #0
   14370:	cmpne	r1, #0
   14374:	moveq	r3, #1
   14378:	moveq	ip, r3
   1437c:	mov	r2, r3
   14380:	mov	r1, ip
   14384:	bl	153f4 <__assert_fail@plt+0x4568>
   14388:	cmp	r0, #0
   1438c:	popne	{r4, pc}
   14390:	bl	14840 <__assert_fail@plt+0x39b4>
   14394:	push	{r4, lr}
   14398:	mov	r2, r1
   1439c:	mov	r1, r0
   143a0:	mov	r0, #0
   143a4:	bl	14320 <__assert_fail@plt+0x3494>
   143a8:	pop	{r4, pc}
   143ac:	push	{r4, lr}
   143b0:	mov	r2, r1
   143b4:	mov	r1, r0
   143b8:	mov	r0, #0
   143bc:	bl	14360 <__assert_fail@plt+0x34d4>
   143c0:	pop	{r4, pc}
   143c4:	push	{r4, r5, r6, r7, r8, lr}
   143c8:	mov	r5, r1
   143cc:	mov	r6, r2
   143d0:	ldr	r4, [r1]
   143d4:	subs	r7, r0, #0
   143d8:	beq	143f4 <__assert_fail@plt+0x3568>
   143dc:	lsr	r2, r4, #1
   143e0:	add	r3, r2, #1
   143e4:	mvn	r3, r3
   143e8:	cmp	r4, r3
   143ec:	bls	14418 <__assert_fail@plt+0x358c>
   143f0:	bl	14840 <__assert_fail@plt+0x39b4>
   143f4:	cmp	r4, #0
   143f8:	bne	14420 <__assert_fail@plt+0x3594>
   143fc:	mov	r1, r2
   14400:	mov	r0, #64	; 0x40
   14404:	bl	15548 <__assert_fail@plt+0x46bc>
   14408:	cmp	r0, #0
   1440c:	movne	r4, r0
   14410:	addeq	r4, r0, #1
   14414:	b	14420 <__assert_fail@plt+0x3594>
   14418:	add	r4, r4, #1
   1441c:	add	r4, r4, r2
   14420:	mov	r2, r6
   14424:	mov	r1, r4
   14428:	mov	r0, r7
   1442c:	bl	14320 <__assert_fail@plt+0x3494>
   14430:	str	r4, [r5]
   14434:	pop	{r4, r5, r6, r7, r8, pc}
   14438:	push	{r4, lr}
   1443c:	mov	r2, #1
   14440:	bl	143c4 <__assert_fail@plt+0x3538>
   14444:	pop	{r4, pc}
   14448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1444c:	sub	sp, sp, #12
   14450:	mov	fp, r0
   14454:	mov	sl, r1
   14458:	mov	r9, r2
   1445c:	mov	r7, r3
   14460:	ldr	r6, [sp, #48]	; 0x30
   14464:	ldr	r5, [r1]
   14468:	asrs	r4, r5, #1
   1446c:	bmi	145c8 <__assert_fail@plt+0x373c>
   14470:	cmp	r5, #0
   14474:	blt	145dc <__assert_fail@plt+0x3750>
   14478:	mvn	r3, #-2147483648	; 0x80000000
   1447c:	sub	r3, r3, r4
   14480:	cmp	r5, r3
   14484:	movle	r3, #0
   14488:	movgt	r3, #1
   1448c:	cmp	r3, #0
   14490:	addeq	r4, r4, r5
   14494:	mvnne	r4, #-2147483648	; 0x80000000
   14498:	mvn	r8, r7
   1449c:	lsr	r8, r8, #31
   144a0:	cmp	r7, r4
   144a4:	movge	r3, #0
   144a8:	andlt	r3, r8, #1
   144ac:	cmp	r3, #0
   144b0:	movne	r4, r7
   144b4:	cmp	r6, #0
   144b8:	blt	145f0 <__assert_fail@plt+0x3764>
   144bc:	cmp	r6, #0
   144c0:	beq	1469c <__assert_fail@plt+0x3810>
   144c4:	cmp	r4, #0
   144c8:	blt	1464c <__assert_fail@plt+0x37c0>
   144cc:	mov	r1, r6
   144d0:	mvn	r0, #-2147483648	; 0x80000000
   144d4:	bl	15754 <__assert_fail@plt+0x48c8>
   144d8:	cmp	r0, r4
   144dc:	movge	r0, #0
   144e0:	movlt	r0, #1
   144e4:	cmp	r0, #0
   144e8:	mvnne	r3, #-2147483648	; 0x80000000
   144ec:	strne	r3, [sp, #4]
   144f0:	beq	14684 <__assert_fail@plt+0x37f8>
   144f4:	mov	r1, r6
   144f8:	ldr	r0, [sp, #4]
   144fc:	bl	15754 <__assert_fail@plt+0x48c8>
   14500:	mov	r4, r0
   14504:	mov	r1, r6
   14508:	ldr	r0, [sp, #4]
   1450c:	bl	15974 <__assert_fail@plt+0x4ae8>
   14510:	ldr	r3, [sp, #4]
   14514:	sub	r1, r3, r1
   14518:	cmp	fp, #0
   1451c:	moveq	r3, #0
   14520:	streq	r3, [sl]
   14524:	sub	r3, r4, r5
   14528:	cmp	r3, r9
   1452c:	bge	145b4 <__assert_fail@plt+0x3728>
   14530:	cmp	r9, #0
   14534:	blt	146a8 <__assert_fail@plt+0x381c>
   14538:	cmp	r5, #0
   1453c:	blt	146bc <__assert_fail@plt+0x3830>
   14540:	mvn	r3, #-2147483648	; 0x80000000
   14544:	sub	r3, r3, r9
   14548:	cmp	r5, r3
   1454c:	movle	r3, #0
   14550:	movgt	r3, #1
   14554:	cmp	r3, #0
   14558:	bne	14764 <__assert_fail@plt+0x38d8>
   1455c:	add	r5, r5, r9
   14560:	mov	r4, r5
   14564:	cmp	r7, r5
   14568:	movge	r7, #0
   1456c:	andlt	r7, r8, #1
   14570:	cmp	r7, #0
   14574:	bne	14764 <__assert_fail@plt+0x38d8>
   14578:	cmp	r6, #0
   1457c:	blt	146d0 <__assert_fail@plt+0x3844>
   14580:	cmp	r6, #0
   14584:	beq	145b0 <__assert_fail@plt+0x3724>
   14588:	cmp	r5, #0
   1458c:	blt	1472c <__assert_fail@plt+0x38a0>
   14590:	mov	r1, r6
   14594:	mvn	r0, #-2147483648	; 0x80000000
   14598:	bl	15754 <__assert_fail@plt+0x48c8>
   1459c:	cmp	r5, r0
   145a0:	movle	r0, #0
   145a4:	movgt	r0, #1
   145a8:	cmp	r0, #0
   145ac:	bne	14764 <__assert_fail@plt+0x38d8>
   145b0:	mul	r1, r5, r6
   145b4:	mov	r0, fp
   145b8:	bl	142d0 <__assert_fail@plt+0x3444>
   145bc:	str	r4, [sl]
   145c0:	add	sp, sp, #12
   145c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c8:	rsb	r3, r4, #-2147483648	; 0x80000000
   145cc:	cmp	r5, r3
   145d0:	movge	r3, #0
   145d4:	movlt	r3, #1
   145d8:	b	1448c <__assert_fail@plt+0x3600>
   145dc:	rsb	r3, r5, #-2147483648	; 0x80000000
   145e0:	cmp	r4, r3
   145e4:	movge	r3, #0
   145e8:	movlt	r3, #1
   145ec:	b	1448c <__assert_fail@plt+0x3600>
   145f0:	cmp	r4, #0
   145f4:	blt	1461c <__assert_fail@plt+0x3790>
   145f8:	cmn	r6, #1
   145fc:	beq	14638 <__assert_fail@plt+0x37ac>
   14600:	mov	r1, r6
   14604:	mov	r0, #-2147483648	; 0x80000000
   14608:	bl	15754 <__assert_fail@plt+0x48c8>
   1460c:	cmp	r0, r4
   14610:	movge	r0, #0
   14614:	movlt	r0, #1
   14618:	b	144e4 <__assert_fail@plt+0x3658>
   1461c:	mov	r1, r6
   14620:	mvn	r0, #-2147483648	; 0x80000000
   14624:	bl	15754 <__assert_fail@plt+0x48c8>
   14628:	cmp	r0, r4
   1462c:	movle	r0, #0
   14630:	movgt	r0, #1
   14634:	b	144e4 <__assert_fail@plt+0x3658>
   14638:	add	r0, r4, #-2147483648	; 0x80000000
   1463c:	cmp	r0, #0
   14640:	movle	r0, #0
   14644:	movgt	r0, #1
   14648:	b	144e4 <__assert_fail@plt+0x3658>
   1464c:	cmn	r4, #1
   14650:	beq	14670 <__assert_fail@plt+0x37e4>
   14654:	mov	r1, r4
   14658:	mov	r0, #-2147483648	; 0x80000000
   1465c:	bl	15754 <__assert_fail@plt+0x48c8>
   14660:	cmp	r6, r0
   14664:	movle	r0, #0
   14668:	movgt	r0, #1
   1466c:	b	144e4 <__assert_fail@plt+0x3658>
   14670:	add	r0, r6, #-2147483648	; 0x80000000
   14674:	cmp	r0, #0
   14678:	movle	r0, #0
   1467c:	movgt	r0, #1
   14680:	b	144e4 <__assert_fail@plt+0x3658>
   14684:	mul	r1, r6, r4
   14688:	cmp	r1, #63	; 0x3f
   1468c:	movle	r3, #64	; 0x40
   14690:	strle	r3, [sp, #4]
   14694:	bgt	14518 <__assert_fail@plt+0x368c>
   14698:	b	144f4 <__assert_fail@plt+0x3668>
   1469c:	mov	r3, #64	; 0x40
   146a0:	str	r3, [sp, #4]
   146a4:	b	144f4 <__assert_fail@plt+0x3668>
   146a8:	rsb	r3, r9, #-2147483648	; 0x80000000
   146ac:	cmp	r5, r3
   146b0:	movge	r3, #0
   146b4:	movlt	r3, #1
   146b8:	b	14554 <__assert_fail@plt+0x36c8>
   146bc:	rsb	r3, r5, #-2147483648	; 0x80000000
   146c0:	cmp	r9, r3
   146c4:	movge	r3, #0
   146c8:	movlt	r3, #1
   146cc:	b	14554 <__assert_fail@plt+0x36c8>
   146d0:	cmp	r5, #0
   146d4:	blt	146fc <__assert_fail@plt+0x3870>
   146d8:	cmn	r6, #1
   146dc:	beq	14718 <__assert_fail@plt+0x388c>
   146e0:	mov	r1, r6
   146e4:	mov	r0, #-2147483648	; 0x80000000
   146e8:	bl	15754 <__assert_fail@plt+0x48c8>
   146ec:	cmp	r5, r0
   146f0:	movle	r0, #0
   146f4:	movgt	r0, #1
   146f8:	b	145a8 <__assert_fail@plt+0x371c>
   146fc:	mov	r1, r6
   14700:	mvn	r0, #-2147483648	; 0x80000000
   14704:	bl	15754 <__assert_fail@plt+0x48c8>
   14708:	cmp	r5, r0
   1470c:	movge	r0, #0
   14710:	movlt	r0, #1
   14714:	b	145a8 <__assert_fail@plt+0x371c>
   14718:	add	r0, r5, #-2147483648	; 0x80000000
   1471c:	cmp	r0, #0
   14720:	movle	r0, #0
   14724:	movgt	r0, #1
   14728:	b	145a8 <__assert_fail@plt+0x371c>
   1472c:	cmn	r5, #1
   14730:	beq	14750 <__assert_fail@plt+0x38c4>
   14734:	mov	r1, r5
   14738:	mov	r0, #-2147483648	; 0x80000000
   1473c:	bl	15754 <__assert_fail@plt+0x48c8>
   14740:	cmp	r6, r0
   14744:	movle	r0, #0
   14748:	movgt	r0, #1
   1474c:	b	145a8 <__assert_fail@plt+0x371c>
   14750:	add	r0, r6, #-2147483648	; 0x80000000
   14754:	cmp	r0, #0
   14758:	movle	r0, #0
   1475c:	movgt	r0, #1
   14760:	b	145a8 <__assert_fail@plt+0x371c>
   14764:	bl	14840 <__assert_fail@plt+0x39b4>
   14768:	push	{r4, lr}
   1476c:	bl	15014 <__assert_fail@plt+0x4188>
   14770:	cmp	r0, #0
   14774:	popne	{r4, pc}
   14778:	bl	14840 <__assert_fail@plt+0x39b4>
   1477c:	push	{r4, lr}
   14780:	mov	r1, #1
   14784:	bl	14768 <__assert_fail@plt+0x38dc>
   14788:	pop	{r4, pc}
   1478c:	push	{r4, lr}
   14790:	bl	15014 <__assert_fail@plt+0x4188>
   14794:	cmp	r0, #0
   14798:	popne	{r4, pc}
   1479c:	bl	14840 <__assert_fail@plt+0x39b4>
   147a0:	push	{r4, lr}
   147a4:	mov	r1, #1
   147a8:	bl	1478c <__assert_fail@plt+0x3900>
   147ac:	pop	{r4, pc}
   147b0:	push	{r4, r5, r6, lr}
   147b4:	mov	r5, r0
   147b8:	mov	r4, r1
   147bc:	mov	r0, r1
   147c0:	bl	1429c <__assert_fail@plt+0x3410>
   147c4:	mov	r2, r4
   147c8:	mov	r1, r5
   147cc:	bl	10c88 <memcpy@plt>
   147d0:	pop	{r4, r5, r6, pc}
   147d4:	push	{r4, r5, r6, lr}
   147d8:	mov	r5, r0
   147dc:	mov	r4, r1
   147e0:	mov	r0, r1
   147e4:	bl	142b0 <__assert_fail@plt+0x3424>
   147e8:	mov	r2, r4
   147ec:	mov	r1, r5
   147f0:	bl	10c88 <memcpy@plt>
   147f4:	pop	{r4, r5, r6, pc}
   147f8:	push	{r4, r5, r6, lr}
   147fc:	mov	r5, r0
   14800:	mov	r4, r1
   14804:	add	r0, r1, #1
   14808:	bl	142b0 <__assert_fail@plt+0x3424>
   1480c:	mov	r2, #0
   14810:	strb	r2, [r0, r4]
   14814:	mov	r2, r4
   14818:	mov	r1, r5
   1481c:	bl	10c88 <memcpy@plt>
   14820:	pop	{r4, r5, r6, pc}
   14824:	push	{r4, lr}
   14828:	mov	r4, r0
   1482c:	bl	10da8 <strlen@plt>
   14830:	add	r1, r0, #1
   14834:	mov	r0, r4
   14838:	bl	147b0 <__assert_fail@plt+0x3924>
   1483c:	pop	{r4, pc}
   14840:	push	{r4, lr}
   14844:	ldr	r3, [pc, #40]	; 14874 <__assert_fail@plt+0x39e8>
   14848:	ldr	r4, [r3]
   1484c:	mov	r2, #5
   14850:	ldr	r1, [pc, #32]	; 14878 <__assert_fail@plt+0x39ec>
   14854:	mov	r0, #0
   14858:	bl	10cc4 <dcgettext@plt>
   1485c:	mov	r3, r0
   14860:	ldr	r2, [pc, #20]	; 1487c <__assert_fail@plt+0x39f0>
   14864:	mov	r1, #0
   14868:	mov	r0, r4
   1486c:	bl	10d3c <error@plt>
   14870:	bl	10e74 <abort@plt>
   14874:	andeq	r7, r2, r8, ror #1
   14878:	andeq	r6, r1, r0, lsr #19
   1487c:	andeq	r6, r1, r8, ror #10
   14880:	push	{r4, r5, r6, r7, lr}
   14884:	sub	sp, sp, #20
   14888:	mov	r7, r0
   1488c:	mov	r4, r2
   14890:	mov	r5, r3
   14894:	ldr	r6, [sp, #56]	; 0x38
   14898:	ldr	r3, [sp, #48]	; 0x30
   1489c:	str	r3, [sp]
   148a0:	add	r3, sp, #8
   148a4:	mov	r2, r1
   148a8:	mov	r1, #0
   148ac:	bl	14bd0 <__assert_fail@plt+0x3d44>
   148b0:	cmp	r0, #0
   148b4:	bne	14950 <__assert_fail@plt+0x3ac4>
   148b8:	ldrd	r0, [sp, #8]
   148bc:	ldrd	r2, [sp, #40]	; 0x28
   148c0:	cmp	r2, r0
   148c4:	sbcs	r3, r3, r1
   148c8:	movlt	r3, #1
   148cc:	movge	r3, #0
   148d0:	cmp	r0, r4
   148d4:	sbcs	r2, r1, r5
   148d8:	orrlt	r3, r3, #1
   148dc:	cmp	r3, #0
   148e0:	beq	149c8 <__assert_fail@plt+0x3b3c>
   148e4:	cmp	r0, #1073741824	; 0x40000000
   148e8:	sbcs	r3, r1, #0
   148ec:	blt	1491c <__assert_fail@plt+0x3a90>
   148f0:	bl	10dc0 <__errno_location@plt>
   148f4:	mov	r3, #75	; 0x4b
   148f8:	str	r3, [r0]
   148fc:	cmp	r6, #0
   14900:	bne	149bc <__assert_fail@plt+0x3b30>
   14904:	mov	r6, #1
   14908:	bl	10dc0 <__errno_location@plt>
   1490c:	ldr	r4, [r0]
   14910:	cmp	r4, #22
   14914:	moveq	r4, #0
   14918:	b	1498c <__assert_fail@plt+0x3b00>
   1491c:	mov	r2, #-1073741824	; 0xc0000000
   14920:	mvn	r3, #0
   14924:	cmp	r0, r2
   14928:	sbcs	r3, r1, r3
   1492c:	bge	14940 <__assert_fail@plt+0x3ab4>
   14930:	bl	10dc0 <__errno_location@plt>
   14934:	mov	r3, #75	; 0x4b
   14938:	str	r3, [r0]
   1493c:	b	148fc <__assert_fail@plt+0x3a70>
   14940:	bl	10dc0 <__errno_location@plt>
   14944:	mov	r3, #34	; 0x22
   14948:	str	r3, [r0]
   1494c:	b	148fc <__assert_fail@plt+0x3a70>
   14950:	cmp	r0, #1
   14954:	beq	1496c <__assert_fail@plt+0x3ae0>
   14958:	cmp	r0, #3
   1495c:	beq	149ac <__assert_fail@plt+0x3b20>
   14960:	cmp	r6, #0
   14964:	moveq	r6, #1
   14968:	b	14908 <__assert_fail@plt+0x3a7c>
   1496c:	bl	10dc0 <__errno_location@plt>
   14970:	mov	r3, #75	; 0x4b
   14974:	str	r3, [r0]
   14978:	cmp	r6, #0
   1497c:	bne	14908 <__assert_fail@plt+0x3a7c>
   14980:	bl	10dc0 <__errno_location@plt>
   14984:	ldr	r4, [r0]
   14988:	mov	r6, #1
   1498c:	mov	r0, r7
   14990:	bl	13d04 <__assert_fail@plt+0x2e78>
   14994:	str	r0, [sp]
   14998:	ldr	r3, [sp, #52]	; 0x34
   1499c:	ldr	r2, [pc, #44]	; 149d0 <__assert_fail@plt+0x3b44>
   149a0:	mov	r1, r4
   149a4:	mov	r0, r6
   149a8:	bl	10d3c <error@plt>
   149ac:	bl	10dc0 <__errno_location@plt>
   149b0:	mov	r3, #0
   149b4:	str	r3, [r0]
   149b8:	b	14978 <__assert_fail@plt+0x3aec>
   149bc:	bl	10dc0 <__errno_location@plt>
   149c0:	ldr	r4, [r0]
   149c4:	b	1498c <__assert_fail@plt+0x3b00>
   149c8:	add	sp, sp, #20
   149cc:	pop	{r4, r5, r6, r7, pc}
   149d0:	andeq	r6, r1, r4, ror #10
   149d4:	push	{r4, r5, lr}
   149d8:	sub	sp, sp, #28
   149dc:	ldr	r1, [sp, #56]	; 0x38
   149e0:	str	r1, [sp, #16]
   149e4:	ldr	r1, [sp, #52]	; 0x34
   149e8:	str	r1, [sp, #12]
   149ec:	ldr	r1, [sp, #48]	; 0x30
   149f0:	str	r1, [sp, #8]
   149f4:	ldrd	r4, [sp, #40]	; 0x28
   149f8:	strd	r4, [sp]
   149fc:	mov	r1, #10
   14a00:	bl	14880 <__assert_fail@plt+0x39f4>
   14a04:	add	sp, sp, #28
   14a08:	pop	{r4, r5, pc}
   14a0c:	push	{r4, r5, r6, r7, r8, lr}
   14a10:	mov	r5, r0
   14a14:	subs	r4, r1, #0
   14a18:	blt	14a74 <__assert_fail@plt+0x3be8>
   14a1c:	cmp	r4, #0
   14a20:	beq	14ae8 <__assert_fail@plt+0x3c5c>
   14a24:	ldrd	r6, [r0]
   14a28:	cmp	r6, #0
   14a2c:	sbcs	r3, r7, #0
   14a30:	blt	14b2c <__assert_fail@plt+0x3ca0>
   14a34:	mov	r2, r4
   14a38:	asr	r3, r4, #31
   14a3c:	mvn	r0, #0
   14a40:	mvn	r1, #-2147483648	; 0x80000000
   14a44:	bl	15994 <__assert_fail@plt+0x4b08>
   14a48:	cmp	r0, r6
   14a4c:	sbcs	r3, r1, r7
   14a50:	movlt	r3, #1
   14a54:	movge	r3, #0
   14a58:	cmp	r3, #0
   14a5c:	mvnne	r2, #0
   14a60:	mvnne	r3, #-2147483648	; 0x80000000
   14a64:	beq	14ae8 <__assert_fail@plt+0x3c5c>
   14a68:	strd	r2, [r5]
   14a6c:	mov	r0, #1
   14a70:	pop	{r4, r5, r6, r7, r8, pc}
   14a74:	ldrd	r6, [r0]
   14a78:	cmp	r6, #0
   14a7c:	sbcs	r3, r7, #0
   14a80:	blt	14ab4 <__assert_fail@plt+0x3c28>
   14a84:	cmn	r4, #1
   14a88:	beq	14b10 <__assert_fail@plt+0x3c84>
   14a8c:	mov	r2, r4
   14a90:	asr	r3, r4, #31
   14a94:	mov	r0, #0
   14a98:	mov	r1, #-2147483648	; 0x80000000
   14a9c:	bl	15994 <__assert_fail@plt+0x4b08>
   14aa0:	cmp	r0, r6
   14aa4:	sbcs	r3, r1, r7
   14aa8:	movlt	r3, #1
   14aac:	movge	r3, #0
   14ab0:	b	14a58 <__assert_fail@plt+0x3bcc>
   14ab4:	mov	r2, r4
   14ab8:	asr	r3, r4, #31
   14abc:	mvn	r0, #0
   14ac0:	mvn	r1, #-2147483648	; 0x80000000
   14ac4:	bl	15994 <__assert_fail@plt+0x4b08>
   14ac8:	cmp	r6, r0
   14acc:	sbcs	r3, r7, r1
   14ad0:	movlt	r3, #1
   14ad4:	movge	r3, #0
   14ad8:	cmp	r3, #0
   14adc:	movne	r2, #0
   14ae0:	movne	r3, #-2147483648	; 0x80000000
   14ae4:	bne	14a68 <__assert_fail@plt+0x3bdc>
   14ae8:	asr	r3, r4, #31
   14aec:	ldr	r1, [r5, #4]
   14af0:	ldr	r2, [r5]
   14af4:	mul	r3, r3, r2
   14af8:	mla	r1, r4, r1, r3
   14afc:	umull	r2, r3, r2, r4
   14b00:	add	r3, r1, r3
   14b04:	strd	r2, [r5]
   14b08:	mov	r0, #0
   14b0c:	pop	{r4, r5, r6, r7, r8, pc}
   14b10:	adds	r6, r6, #0
   14b14:	adc	r7, r7, #-2147483648	; 0x80000000
   14b18:	cmp	r6, #1
   14b1c:	sbcs	r3, r7, #0
   14b20:	movge	r3, #1
   14b24:	movlt	r3, #0
   14b28:	b	14a58 <__assert_fail@plt+0x3bcc>
   14b2c:	mvn	r2, #0
   14b30:	mvn	r3, #0
   14b34:	cmp	r7, r3
   14b38:	cmpeq	r6, r2
   14b3c:	beq	14b70 <__assert_fail@plt+0x3ce4>
   14b40:	mov	r2, r6
   14b44:	mov	r3, r7
   14b48:	mov	r0, #0
   14b4c:	mov	r1, #-2147483648	; 0x80000000
   14b50:	bl	15994 <__assert_fail@plt+0x4b08>
   14b54:	mov	r2, r4
   14b58:	asr	r3, r4, #31
   14b5c:	cmp	r0, r4
   14b60:	sbcs	r3, r1, r3
   14b64:	movlt	r3, #1
   14b68:	movge	r3, #0
   14b6c:	b	14ad8 <__assert_fail@plt+0x3c4c>
   14b70:	asr	r3, r4, #31
   14b74:	adds	r2, r4, #0
   14b78:	adc	r3, r3, #-2147483648	; 0x80000000
   14b7c:	cmp	r2, #1
   14b80:	sbcs	r3, r3, #0
   14b84:	movge	r3, #1
   14b88:	movlt	r3, #0
   14b8c:	b	14ad8 <__assert_fail@plt+0x3c4c>
   14b90:	push	{r4, r5, r6, r7, r8, lr}
   14b94:	subs	r4, r2, #0
   14b98:	beq	14bc8 <__assert_fail@plt+0x3d3c>
   14b9c:	mov	r7, r1
   14ba0:	mov	r6, r0
   14ba4:	mov	r5, #0
   14ba8:	mov	r1, r7
   14bac:	mov	r0, r6
   14bb0:	bl	14a0c <__assert_fail@plt+0x3b80>
   14bb4:	orr	r5, r5, r0
   14bb8:	subs	r4, r4, #1
   14bbc:	bne	14ba8 <__assert_fail@plt+0x3d1c>
   14bc0:	mov	r0, r5
   14bc4:	pop	{r4, r5, r6, r7, r8, pc}
   14bc8:	mov	r5, #0
   14bcc:	b	14bc0 <__assert_fail@plt+0x3d34>
   14bd0:	push	{r4, r5, r6, r7, r8, lr}
   14bd4:	sub	sp, sp, #16
   14bd8:	cmp	r2, #36	; 0x24
   14bdc:	bhi	14c48 <__assert_fail@plt+0x3dbc>
   14be0:	mov	r6, r0
   14be4:	mov	r4, r1
   14be8:	mov	r5, r2
   14bec:	mov	r8, r3
   14bf0:	cmp	r1, #0
   14bf4:	addeq	r4, sp, #12
   14bf8:	bl	10dc0 <__errno_location@plt>
   14bfc:	mov	r7, r0
   14c00:	mov	r3, #0
   14c04:	str	r3, [r0]
   14c08:	mov	r2, r5
   14c0c:	mov	r1, r4
   14c10:	mov	r0, r6
   14c14:	bl	10e44 <__strtoll_internal@plt>
   14c18:	strd	r0, [sp]
   14c1c:	ldr	r5, [r4]
   14c20:	cmp	r6, r5
   14c24:	beq	14c5c <__assert_fail@plt+0x3dd0>
   14c28:	ldr	r3, [r7]
   14c2c:	cmp	r3, #0
   14c30:	beq	14ca4 <__assert_fail@plt+0x3e18>
   14c34:	cmp	r3, #34	; 0x22
   14c38:	moveq	r6, #1
   14c3c:	beq	14ca8 <__assert_fail@plt+0x3e1c>
   14c40:	mov	r6, #4
   14c44:	b	14ffc <__assert_fail@plt+0x4170>
   14c48:	ldr	r3, [pc, #952]	; 15008 <__assert_fail@plt+0x417c>
   14c4c:	mov	r2, #85	; 0x55
   14c50:	ldr	r1, [pc, #948]	; 1500c <__assert_fail@plt+0x4180>
   14c54:	ldr	r0, [pc, #948]	; 15010 <__assert_fail@plt+0x4184>
   14c58:	bl	10e8c <__assert_fail@plt>
   14c5c:	ldr	r3, [sp, #40]	; 0x28
   14c60:	cmp	r3, #0
   14c64:	moveq	r6, #4
   14c68:	beq	14ffc <__assert_fail@plt+0x4170>
   14c6c:	ldrb	r1, [r5]
   14c70:	cmp	r1, #0
   14c74:	moveq	r6, #4
   14c78:	beq	14ffc <__assert_fail@plt+0x4170>
   14c7c:	mov	r0, r3
   14c80:	bl	10db4 <strchr@plt>
   14c84:	cmp	r0, #0
   14c88:	moveq	r6, #4
   14c8c:	beq	14ffc <__assert_fail@plt+0x4170>
   14c90:	mov	r2, #1
   14c94:	mov	r3, #0
   14c98:	strd	r2, [sp]
   14c9c:	mov	r6, #0
   14ca0:	b	14cb4 <__assert_fail@plt+0x3e28>
   14ca4:	mov	r6, #0
   14ca8:	ldr	r3, [sp, #40]	; 0x28
   14cac:	cmp	r3, #0
   14cb0:	beq	14da4 <__assert_fail@plt+0x3f18>
   14cb4:	ldrb	r7, [r5]
   14cb8:	cmp	r7, #0
   14cbc:	beq	14ff4 <__assert_fail@plt+0x4168>
   14cc0:	mov	r1, r7
   14cc4:	ldr	r0, [sp, #40]	; 0x28
   14cc8:	bl	10db4 <strchr@plt>
   14ccc:	cmp	r0, #0
   14cd0:	beq	14dac <__assert_fail@plt+0x3f20>
   14cd4:	sub	r3, r7, #69	; 0x45
   14cd8:	cmp	r3, #47	; 0x2f
   14cdc:	ldrls	pc, [pc, r3, lsl #2]
   14ce0:	b	14e18 <__assert_fail@plt+0x3f8c>
   14ce4:			; <UNDEFINED> instruction: 0x00014dbc
   14ce8:	andeq	r4, r1, r8, lsl lr
   14cec:			; <UNDEFINED> instruction: 0x00014dbc
   14cf0:	andeq	r4, r1, r8, lsl lr
   14cf4:	andeq	r4, r1, r8, lsl lr
   14cf8:	andeq	r4, r1, r8, lsl lr
   14cfc:			; <UNDEFINED> instruction: 0x00014dbc
   14d00:	andeq	r4, r1, r8, lsl lr
   14d04:			; <UNDEFINED> instruction: 0x00014dbc
   14d08:	andeq	r4, r1, r8, lsl lr
   14d0c:	andeq	r4, r1, r8, lsl lr
   14d10:			; <UNDEFINED> instruction: 0x00014dbc
   14d14:	andeq	r4, r1, r8, lsl lr
   14d18:	andeq	r4, r1, r8, lsl lr
   14d1c:	andeq	r4, r1, r8, lsl lr
   14d20:			; <UNDEFINED> instruction: 0x00014dbc
   14d24:	andeq	r4, r1, r8, lsl lr
   14d28:	andeq	r4, r1, r8, lsl lr
   14d2c:	andeq	r4, r1, r8, lsl lr
   14d30:	andeq	r4, r1, r8, lsl lr
   14d34:			; <UNDEFINED> instruction: 0x00014dbc
   14d38:			; <UNDEFINED> instruction: 0x00014dbc
   14d3c:	andeq	r4, r1, r8, lsl lr
   14d40:	andeq	r4, r1, r8, lsl lr
   14d44:	andeq	r4, r1, r8, lsl lr
   14d48:	andeq	r4, r1, r8, lsl lr
   14d4c:	andeq	r4, r1, r8, lsl lr
   14d50:	andeq	r4, r1, r8, lsl lr
   14d54:	andeq	r4, r1, r8, lsl lr
   14d58:	andeq	r4, r1, r8, lsl lr
   14d5c:	andeq	r4, r1, r8, lsl lr
   14d60:	andeq	r4, r1, r8, lsl lr
   14d64:	andeq	r4, r1, r8, lsl lr
   14d68:	andeq	r4, r1, r8, lsl lr
   14d6c:			; <UNDEFINED> instruction: 0x00014dbc
   14d70:	andeq	r4, r1, r8, lsl lr
   14d74:	andeq	r4, r1, r8, lsl lr
   14d78:	andeq	r4, r1, r8, lsl lr
   14d7c:			; <UNDEFINED> instruction: 0x00014dbc
   14d80:	andeq	r4, r1, r8, lsl lr
   14d84:			; <UNDEFINED> instruction: 0x00014dbc
   14d88:	andeq	r4, r1, r8, lsl lr
   14d8c:	andeq	r4, r1, r8, lsl lr
   14d90:	andeq	r4, r1, r8, lsl lr
   14d94:	andeq	r4, r1, r8, lsl lr
   14d98:	andeq	r4, r1, r8, lsl lr
   14d9c:	andeq	r4, r1, r8, lsl lr
   14da0:			; <UNDEFINED> instruction: 0x00014dbc
   14da4:	strd	r0, [r8]
   14da8:	b	14ffc <__assert_fail@plt+0x4170>
   14dac:	ldrd	r2, [sp]
   14db0:	strd	r2, [r8]
   14db4:	orr	r6, r6, #2
   14db8:	b	14ffc <__assert_fail@plt+0x4170>
   14dbc:	mov	r1, #48	; 0x30
   14dc0:	ldr	r0, [sp, #40]	; 0x28
   14dc4:	bl	10db4 <strchr@plt>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14f08 <__assert_fail@plt+0x407c>
   14dd0:	ldrb	r3, [r5, #1]
   14dd4:	cmp	r3, #68	; 0x44
   14dd8:	beq	14df4 <__assert_fail@plt+0x3f68>
   14ddc:	cmp	r3, #105	; 0x69
   14de0:	beq	14e00 <__assert_fail@plt+0x3f74>
   14de4:	cmp	r3, #66	; 0x42
   14de8:	movne	r5, #1
   14dec:	movne	r1, #1024	; 0x400
   14df0:	bne	14e20 <__assert_fail@plt+0x3f94>
   14df4:	mov	r5, #2
   14df8:	mov	r1, #1000	; 0x3e8
   14dfc:	b	14e20 <__assert_fail@plt+0x3f94>
   14e00:	ldrb	r5, [r5, #2]
   14e04:	cmp	r5, #66	; 0x42
   14e08:	movne	r5, #1
   14e0c:	moveq	r5, #3
   14e10:	mov	r1, #1024	; 0x400
   14e14:	b	14e20 <__assert_fail@plt+0x3f94>
   14e18:	mov	r5, #1
   14e1c:	mov	r1, #1024	; 0x400
   14e20:	sub	r7, r7, #66	; 0x42
   14e24:	cmp	r7, #53	; 0x35
   14e28:	ldrls	pc, [pc, r7, lsl #2]
   14e2c:	b	14fc4 <__assert_fail@plt+0x4138>
   14e30:	andeq	r4, r1, r4, lsr #30
   14e34:	andeq	r4, r1, r4, asr #31
   14e38:	andeq	r4, r1, r4, asr #31
   14e3c:	andeq	r4, r1, r4, lsr pc
   14e40:	andeq	r4, r1, r4, asr #31
   14e44:	andeq	r4, r1, r4, asr #30
   14e48:	andeq	r4, r1, r4, asr #31
   14e4c:	andeq	r4, r1, r4, asr #31
   14e50:	andeq	r4, r1, r4, asr #31
   14e54:	andeq	r4, r1, r4, asr pc
   14e58:	andeq	r4, r1, r4, asr #31
   14e5c:	andeq	r4, r1, r4, ror #30
   14e60:	andeq	r4, r1, r4, asr #31
   14e64:	andeq	r4, r1, r4, asr #31
   14e68:	andeq	r4, r1, r4, ror pc
   14e6c:	andeq	r4, r1, r4, asr #31
   14e70:	andeq	r4, r1, r4, asr #31
   14e74:	andeq	r4, r1, r4, asr #31
   14e78:	andeq	r4, r1, r4, lsl #31
   14e7c:	andeq	r4, r1, r4, asr #31
   14e80:	andeq	r4, r1, r4, asr #31
   14e84:	andeq	r4, r1, r4, asr #31
   14e88:	andeq	r4, r1, r4, asr #31
   14e8c:	andeq	r4, r1, r4, lsr #31
   14e90:			; <UNDEFINED> instruction: 0x00014fb4
   14e94:	andeq	r4, r1, r4, asr #31
   14e98:	andeq	r4, r1, r4, asr #31
   14e9c:	andeq	r4, r1, r4, asr #31
   14ea0:	andeq	r4, r1, r4, asr #31
   14ea4:	andeq	r4, r1, r4, asr #31
   14ea8:	andeq	r4, r1, r4, asr #31
   14eac:	andeq	r4, r1, r4, asr #31
   14eb0:	andeq	r4, r1, r4, lsl pc
   14eb4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eb8:	andeq	r4, r1, r4, asr #31
   14ebc:	andeq	r4, r1, r4, asr #31
   14ec0:	andeq	r4, r1, r4, asr #31
   14ec4:	andeq	r4, r1, r4, asr #30
   14ec8:	andeq	r4, r1, r4, asr #31
   14ecc:	andeq	r4, r1, r4, asr #31
   14ed0:	andeq	r4, r1, r4, asr #31
   14ed4:	andeq	r4, r1, r4, asr pc
   14ed8:	andeq	r4, r1, r4, asr #31
   14edc:	andeq	r4, r1, r4, ror #30
   14ee0:	andeq	r4, r1, r4, asr #31
   14ee4:	andeq	r4, r1, r4, asr #31
   14ee8:	andeq	r4, r1, r4, asr #31
   14eec:	andeq	r4, r1, r4, asr #31
   14ef0:	andeq	r4, r1, r4, asr #31
   14ef4:	andeq	r4, r1, r4, asr #31
   14ef8:	andeq	r4, r1, r4, lsl #31
   14efc:	andeq	r4, r1, r4, asr #31
   14f00:	andeq	r4, r1, r4, asr #31
   14f04:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14f08:	mov	r5, #1
   14f0c:	mov	r1, #1024	; 0x400
   14f10:	b	14e20 <__assert_fail@plt+0x3f94>
   14f14:	mov	r1, #512	; 0x200
   14f18:	mov	r0, sp
   14f1c:	bl	14a0c <__assert_fail@plt+0x3b80>
   14f20:	b	14fd8 <__assert_fail@plt+0x414c>
   14f24:	mov	r1, #1024	; 0x400
   14f28:	mov	r0, sp
   14f2c:	bl	14a0c <__assert_fail@plt+0x3b80>
   14f30:	b	14fd8 <__assert_fail@plt+0x414c>
   14f34:	mov	r2, #6
   14f38:	mov	r0, sp
   14f3c:	bl	14b90 <__assert_fail@plt+0x3d04>
   14f40:	b	14fd8 <__assert_fail@plt+0x414c>
   14f44:	mov	r2, #3
   14f48:	mov	r0, sp
   14f4c:	bl	14b90 <__assert_fail@plt+0x3d04>
   14f50:	b	14fd8 <__assert_fail@plt+0x414c>
   14f54:	mov	r2, #1
   14f58:	mov	r0, sp
   14f5c:	bl	14b90 <__assert_fail@plt+0x3d04>
   14f60:	b	14fd8 <__assert_fail@plt+0x414c>
   14f64:	mov	r2, #2
   14f68:	mov	r0, sp
   14f6c:	bl	14b90 <__assert_fail@plt+0x3d04>
   14f70:	b	14fd8 <__assert_fail@plt+0x414c>
   14f74:	mov	r2, #5
   14f78:	mov	r0, sp
   14f7c:	bl	14b90 <__assert_fail@plt+0x3d04>
   14f80:	b	14fd8 <__assert_fail@plt+0x414c>
   14f84:	mov	r2, #4
   14f88:	mov	r0, sp
   14f8c:	bl	14b90 <__assert_fail@plt+0x3d04>
   14f90:	b	14fd8 <__assert_fail@plt+0x414c>
   14f94:	mov	r1, #2
   14f98:	mov	r0, sp
   14f9c:	bl	14a0c <__assert_fail@plt+0x3b80>
   14fa0:	b	14fd8 <__assert_fail@plt+0x414c>
   14fa4:	mov	r2, #8
   14fa8:	mov	r0, sp
   14fac:	bl	14b90 <__assert_fail@plt+0x3d04>
   14fb0:	b	14fd8 <__assert_fail@plt+0x414c>
   14fb4:	mov	r2, #7
   14fb8:	mov	r0, sp
   14fbc:	bl	14b90 <__assert_fail@plt+0x3d04>
   14fc0:	b	14fd8 <__assert_fail@plt+0x414c>
   14fc4:	ldrd	r2, [sp]
   14fc8:	strd	r2, [r8]
   14fcc:	orr	r6, r6, #2
   14fd0:	b	14ffc <__assert_fail@plt+0x4170>
   14fd4:	mov	r0, #0
   14fd8:	orr	r6, r6, r0
   14fdc:	ldr	r3, [r4]
   14fe0:	add	r2, r3, r5
   14fe4:	str	r2, [r4]
   14fe8:	ldrb	r3, [r3, r5]
   14fec:	cmp	r3, #0
   14ff0:	orrne	r6, r6, #2
   14ff4:	ldrd	r2, [sp]
   14ff8:	strd	r2, [r8]
   14ffc:	mov	r0, r6
   15000:	add	sp, sp, #16
   15004:	pop	{r4, r5, r6, r7, r8, pc}
   15008:			; <UNDEFINED> instruction: 0x000169b4
   1500c:	andeq	r6, r1, r0, asr #19
   15010:	ldrdeq	r6, [r1], -r0
   15014:	push	{r4, lr}
   15018:	mov	r2, r0
   1501c:	mov	r3, r1
   15020:	cmp	r1, #0
   15024:	cmpne	r0, #0
   15028:	moveq	r3, #1
   1502c:	moveq	r2, r3
   15030:	umull	r0, r1, r2, r3
   15034:	cmp	r0, #0
   15038:	cmpge	r1, #0
   1503c:	bne	15050 <__assert_fail@plt+0x41c4>
   15040:	mov	r1, r3
   15044:	mov	r0, r2
   15048:	bl	10c34 <calloc@plt>
   1504c:	pop	{r4, pc}
   15050:	bl	10dc0 <__errno_location@plt>
   15054:	mov	r3, #12
   15058:	str	r3, [r0]
   1505c:	mov	r0, #0
   15060:	pop	{r4, pc}
   15064:	push	{r4, lr}
   15068:	cmp	r0, #0
   1506c:	moveq	r0, #1
   15070:	cmp	r0, #0
   15074:	blt	15080 <__assert_fail@plt+0x41f4>
   15078:	bl	10d54 <malloc@plt>
   1507c:	pop	{r4, pc}
   15080:	bl	10dc0 <__errno_location@plt>
   15084:	mov	r3, #12
   15088:	str	r3, [r0]
   1508c:	mov	r0, #0
   15090:	pop	{r4, pc}
   15094:	push	{r4, lr}
   15098:	cmp	r0, #0
   1509c:	beq	150b8 <__assert_fail@plt+0x422c>
   150a0:	cmp	r1, #0
   150a4:	beq	150c4 <__assert_fail@plt+0x4238>
   150a8:	cmp	r1, #0
   150ac:	blt	150d0 <__assert_fail@plt+0x4244>
   150b0:	bl	10cd0 <realloc@plt>
   150b4:	pop	{r4, pc}
   150b8:	mov	r0, r1
   150bc:	bl	15064 <__assert_fail@plt+0x41d8>
   150c0:	pop	{r4, pc}
   150c4:	bl	15268 <__assert_fail@plt+0x43dc>
   150c8:	mov	r0, #0
   150cc:	pop	{r4, pc}
   150d0:	bl	10dc0 <__errno_location@plt>
   150d4:	mov	r3, #12
   150d8:	str	r3, [r0]
   150dc:	mov	r0, #0
   150e0:	pop	{r4, pc}
   150e4:	push	{r4, r5, r6, lr}
   150e8:	mov	r5, r0
   150ec:	bl	10d24 <__fpending@plt>
   150f0:	mov	r6, r0
   150f4:	ldr	r4, [r5]
   150f8:	and	r4, r4, #32
   150fc:	mov	r0, r5
   15100:	bl	1515c <__assert_fail@plt+0x42d0>
   15104:	cmp	r4, #0
   15108:	bne	15130 <__assert_fail@plt+0x42a4>
   1510c:	cmp	r0, #0
   15110:	popeq	{r4, r5, r6, pc}
   15114:	cmp	r6, #0
   15118:	bne	1514c <__assert_fail@plt+0x42c0>
   1511c:	bl	10dc0 <__errno_location@plt>
   15120:	ldr	r0, [r0]
   15124:	subs	r0, r0, #9
   15128:	mvnne	r0, #0
   1512c:	pop	{r4, r5, r6, pc}
   15130:	cmp	r0, #0
   15134:	bne	15154 <__assert_fail@plt+0x42c8>
   15138:	bl	10dc0 <__errno_location@plt>
   1513c:	mov	r3, #0
   15140:	str	r3, [r0]
   15144:	mvn	r0, #0
   15148:	pop	{r4, r5, r6, pc}
   1514c:	mvn	r0, #0
   15150:	pop	{r4, r5, r6, pc}
   15154:	mvn	r0, #0
   15158:	pop	{r4, r5, r6, pc}
   1515c:	push	{r4, r5, r6, lr}
   15160:	sub	sp, sp, #8
   15164:	mov	r4, r0
   15168:	bl	10df0 <fileno@plt>
   1516c:	cmp	r0, #0
   15170:	blt	151e8 <__assert_fail@plt+0x435c>
   15174:	mov	r0, r4
   15178:	bl	10d6c <__freading@plt>
   1517c:	cmp	r0, #0
   15180:	beq	151b4 <__assert_fail@plt+0x4328>
   15184:	mov	r0, r4
   15188:	bl	10df0 <fileno@plt>
   1518c:	mov	r3, #1
   15190:	str	r3, [sp]
   15194:	mov	r2, #0
   15198:	mov	r3, #0
   1519c:	bl	10d0c <lseek64@plt>
   151a0:	mvn	r2, #0
   151a4:	mvn	r3, #0
   151a8:	cmp	r1, r3
   151ac:	cmpeq	r0, r2
   151b0:	beq	151f4 <__assert_fail@plt+0x4368>
   151b4:	mov	r0, r4
   151b8:	bl	15204 <__assert_fail@plt+0x4378>
   151bc:	cmp	r0, #0
   151c0:	beq	151f4 <__assert_fail@plt+0x4368>
   151c4:	bl	10dc0 <__errno_location@plt>
   151c8:	mov	r5, r0
   151cc:	ldr	r6, [r0]
   151d0:	mov	r0, r4
   151d4:	bl	10e08 <fclose@plt>
   151d8:	cmp	r6, #0
   151dc:	strne	r6, [r5]
   151e0:	mvnne	r0, #0
   151e4:	b	151fc <__assert_fail@plt+0x4370>
   151e8:	mov	r0, r4
   151ec:	bl	10e08 <fclose@plt>
   151f0:	b	151fc <__assert_fail@plt+0x4370>
   151f4:	mov	r0, r4
   151f8:	bl	10e08 <fclose@plt>
   151fc:	add	sp, sp, #8
   15200:	pop	{r4, r5, r6, pc}
   15204:	push	{r4, lr}
   15208:	sub	sp, sp, #8
   1520c:	subs	r4, r0, #0
   15210:	beq	15224 <__assert_fail@plt+0x4398>
   15214:	mov	r0, r4
   15218:	bl	10d6c <__freading@plt>
   1521c:	cmp	r0, #0
   15220:	bne	15234 <__assert_fail@plt+0x43a8>
   15224:	mov	r0, r4
   15228:	bl	10c64 <fflush@plt>
   1522c:	add	sp, sp, #8
   15230:	pop	{r4, pc}
   15234:	ldr	r3, [r4]
   15238:	tst	r3, #256	; 0x100
   1523c:	bne	1524c <__assert_fail@plt+0x43c0>
   15240:	mov	r0, r4
   15244:	bl	10c64 <fflush@plt>
   15248:	b	1522c <__assert_fail@plt+0x43a0>
   1524c:	mov	r3, #1
   15250:	str	r3, [sp]
   15254:	mov	r2, #0
   15258:	mov	r3, #0
   1525c:	mov	r0, r4
   15260:	bl	152c0 <__assert_fail@plt+0x4434>
   15264:	b	15240 <__assert_fail@plt+0x43b4>
   15268:	push	{r4, r5, lr}
   1526c:	sub	sp, sp, #12
   15270:	mov	r5, r0
   15274:	bl	10dc0 <__errno_location@plt>
   15278:	mov	r4, r0
   1527c:	ldr	r3, [r0]
   15280:	str	r3, [sp]
   15284:	str	r3, [sp, #4]
   15288:	mov	r3, #0
   1528c:	str	r3, [r0]
   15290:	mov	r0, r5
   15294:	bl	10c70 <free@plt>
   15298:	ldr	r3, [r4]
   1529c:	cmp	r3, #0
   152a0:	moveq	r3, #4
   152a4:	movne	r3, #0
   152a8:	add	r2, sp, #8
   152ac:	add	r3, r2, r3
   152b0:	ldr	r3, [r3, #-8]
   152b4:	str	r3, [r4]
   152b8:	add	sp, sp, #12
   152bc:	pop	{r4, r5, pc}
   152c0:	push	{r4, r5, r6, r7, lr}
   152c4:	sub	sp, sp, #12
   152c8:	mov	r4, r0
   152cc:	mov	r6, r2
   152d0:	mov	r7, r3
   152d4:	ldr	r5, [sp, #32]
   152d8:	ldr	r2, [r0, #8]
   152dc:	ldr	r3, [r0, #4]
   152e0:	cmp	r2, r3
   152e4:	beq	15304 <__assert_fail@plt+0x4478>
   152e8:	str	r5, [sp]
   152ec:	mov	r2, r6
   152f0:	mov	r3, r7
   152f4:	mov	r0, r4
   152f8:	bl	10e14 <fseeko64@plt>
   152fc:	add	sp, sp, #12
   15300:	pop	{r4, r5, r6, r7, pc}
   15304:	ldr	r2, [r0, #20]
   15308:	ldr	r3, [r0, #16]
   1530c:	cmp	r2, r3
   15310:	bne	152e8 <__assert_fail@plt+0x445c>
   15314:	ldr	r3, [r0, #36]	; 0x24
   15318:	cmp	r3, #0
   1531c:	bne	152e8 <__assert_fail@plt+0x445c>
   15320:	bl	10df0 <fileno@plt>
   15324:	str	r5, [sp]
   15328:	mov	r2, r6
   1532c:	mov	r3, r7
   15330:	bl	10d0c <lseek64@plt>
   15334:	mvn	r2, #0
   15338:	mvn	r3, #0
   1533c:	cmp	r1, r3
   15340:	cmpeq	r0, r2
   15344:	beq	15360 <__assert_fail@plt+0x44d4>
   15348:	ldr	r3, [r4]
   1534c:	bic	r3, r3, #16
   15350:	str	r3, [r4]
   15354:	strd	r0, [r4, #80]	; 0x50
   15358:	mov	r0, #0
   1535c:	b	152fc <__assert_fail@plt+0x4470>
   15360:	mvn	r0, #0
   15364:	b	152fc <__assert_fail@plt+0x4470>
   15368:	push	{r4, lr}
   1536c:	mov	r0, #14
   15370:	bl	10e38 <nl_langinfo@plt>
   15374:	cmp	r0, #0
   15378:	beq	15390 <__assert_fail@plt+0x4504>
   1537c:	ldrb	r2, [r0]
   15380:	ldr	r3, [pc, #16]	; 15398 <__assert_fail@plt+0x450c>
   15384:	cmp	r2, #0
   15388:	moveq	r0, r3
   1538c:	pop	{r4, pc}
   15390:	ldr	r0, [pc]	; 15398 <__assert_fail@plt+0x450c>
   15394:	pop	{r4, pc}
   15398:	strdeq	r6, [r1], -r8
   1539c:	push	{r4, r5, r6, r7, lr}
   153a0:	sub	sp, sp, #12
   153a4:	mov	r7, r1
   153a8:	mov	r5, r2
   153ac:	subs	r6, r0, #0
   153b0:	addeq	r6, sp, #4
   153b4:	mov	r0, r6
   153b8:	bl	10d30 <mbrtowc@plt>
   153bc:	mov	r4, r0
   153c0:	cmp	r5, #0
   153c4:	cmnne	r0, #3
   153c8:	bhi	153d8 <__assert_fail@plt+0x454c>
   153cc:	mov	r0, r4
   153d0:	add	sp, sp, #12
   153d4:	pop	{r4, r5, r6, r7, pc}
   153d8:	mov	r0, #0
   153dc:	bl	15440 <__assert_fail@plt+0x45b4>
   153e0:	cmp	r0, #0
   153e4:	ldrbeq	r3, [r7]
   153e8:	streq	r3, [r6]
   153ec:	moveq	r4, #1
   153f0:	b	153cc <__assert_fail@plt+0x4540>
   153f4:	push	{r4, r5, r6, lr}
   153f8:	mov	r6, r0
   153fc:	mov	r5, r1
   15400:	subs	r4, r2, #0
   15404:	beq	15430 <__assert_fail@plt+0x45a4>
   15408:	mov	r1, r4
   1540c:	mvn	r0, #0
   15410:	bl	15548 <__assert_fail@plt+0x46bc>
   15414:	cmp	r0, r5
   15418:	bcs	15430 <__assert_fail@plt+0x45a4>
   1541c:	bl	10dc0 <__errno_location@plt>
   15420:	mov	r3, #12
   15424:	str	r3, [r0]
   15428:	mov	r0, #0
   1542c:	pop	{r4, r5, r6, pc}
   15430:	mul	r1, r5, r4
   15434:	mov	r0, r6
   15438:	bl	15094 <__assert_fail@plt+0x4208>
   1543c:	pop	{r4, r5, r6, pc}
   15440:	push	{lr}		; (str lr, [sp, #-4]!)
   15444:	sub	sp, sp, #268	; 0x10c
   15448:	ldr	r2, [pc, #68]	; 15494 <__assert_fail@plt+0x4608>
   1544c:	add	r1, sp, #4
   15450:	bl	154a0 <__assert_fail@plt+0x4614>
   15454:	cmp	r0, #0
   15458:	movne	r0, #0
   1545c:	bne	1548c <__assert_fail@plt+0x4600>
   15460:	ldr	r1, [pc, #48]	; 15498 <__assert_fail@plt+0x460c>
   15464:	add	r0, sp, #4
   15468:	bl	10c58 <strcmp@plt>
   1546c:	cmp	r0, #0
   15470:	moveq	r0, #0
   15474:	beq	1548c <__assert_fail@plt+0x4600>
   15478:	ldr	r1, [pc, #28]	; 1549c <__assert_fail@plt+0x4610>
   1547c:	add	r0, sp, #4
   15480:	bl	10c58 <strcmp@plt>
   15484:	adds	r0, r0, #0
   15488:	movne	r0, #1
   1548c:	add	sp, sp, #268	; 0x10c
   15490:	pop	{pc}		; (ldr pc, [sp], #4)
   15494:	andeq	r0, r0, r1, lsl #2
   15498:	andeq	r6, r1, r0, lsl #20
   1549c:	andeq	r6, r1, r4, lsl #20
   154a0:	push	{r4, r5, r6, lr}
   154a4:	mov	r6, r1
   154a8:	mov	r4, r2
   154ac:	mov	r1, #0
   154b0:	bl	10e20 <setlocale@plt>
   154b4:	subs	r5, r0, #0
   154b8:	beq	154dc <__assert_fail@plt+0x4650>
   154bc:	mov	r0, r5
   154c0:	bl	10da8 <strlen@plt>
   154c4:	cmp	r4, r0
   154c8:	bhi	154f4 <__assert_fail@plt+0x4668>
   154cc:	cmp	r4, #0
   154d0:	bne	1550c <__assert_fail@plt+0x4680>
   154d4:	mov	r0, #34	; 0x22
   154d8:	pop	{r4, r5, r6, pc}
   154dc:	cmp	r4, #0
   154e0:	beq	15530 <__assert_fail@plt+0x46a4>
   154e4:	mov	r3, #0
   154e8:	strb	r3, [r6]
   154ec:	mov	r0, #22
   154f0:	pop	{r4, r5, r6, pc}
   154f4:	add	r2, r0, #1
   154f8:	mov	r1, r5
   154fc:	mov	r0, r6
   15500:	bl	10c88 <memcpy@plt>
   15504:	mov	r0, #0
   15508:	pop	{r4, r5, r6, pc}
   1550c:	sub	r4, r4, #1
   15510:	mov	r2, r4
   15514:	mov	r1, r5
   15518:	mov	r0, r6
   1551c:	bl	10c88 <memcpy@plt>
   15520:	mov	r3, #0
   15524:	strb	r3, [r6, r4]
   15528:	mov	r0, #34	; 0x22
   1552c:	pop	{r4, r5, r6, pc}
   15530:	mov	r0, #22
   15534:	pop	{r4, r5, r6, pc}
   15538:	push	{r4, lr}
   1553c:	mov	r1, #0
   15540:	bl	10e20 <setlocale@plt>
   15544:	pop	{r4, pc}
   15548:	subs	r2, r1, #1
   1554c:	bxeq	lr
   15550:	bcc	15728 <__assert_fail@plt+0x489c>
   15554:	cmp	r0, r1
   15558:	bls	1570c <__assert_fail@plt+0x4880>
   1555c:	tst	r1, r2
   15560:	beq	15718 <__assert_fail@plt+0x488c>
   15564:	clz	r3, r0
   15568:	clz	r2, r1
   1556c:	sub	r3, r2, r3
   15570:	rsbs	r3, r3, #31
   15574:	addne	r3, r3, r3, lsl #1
   15578:	mov	r2, #0
   1557c:	addne	pc, pc, r3, lsl #2
   15580:	nop			; (mov r0, r0)
   15584:	cmp	r0, r1, lsl #31
   15588:	adc	r2, r2, r2
   1558c:	subcs	r0, r0, r1, lsl #31
   15590:	cmp	r0, r1, lsl #30
   15594:	adc	r2, r2, r2
   15598:	subcs	r0, r0, r1, lsl #30
   1559c:	cmp	r0, r1, lsl #29
   155a0:	adc	r2, r2, r2
   155a4:	subcs	r0, r0, r1, lsl #29
   155a8:	cmp	r0, r1, lsl #28
   155ac:	adc	r2, r2, r2
   155b0:	subcs	r0, r0, r1, lsl #28
   155b4:	cmp	r0, r1, lsl #27
   155b8:	adc	r2, r2, r2
   155bc:	subcs	r0, r0, r1, lsl #27
   155c0:	cmp	r0, r1, lsl #26
   155c4:	adc	r2, r2, r2
   155c8:	subcs	r0, r0, r1, lsl #26
   155cc:	cmp	r0, r1, lsl #25
   155d0:	adc	r2, r2, r2
   155d4:	subcs	r0, r0, r1, lsl #25
   155d8:	cmp	r0, r1, lsl #24
   155dc:	adc	r2, r2, r2
   155e0:	subcs	r0, r0, r1, lsl #24
   155e4:	cmp	r0, r1, lsl #23
   155e8:	adc	r2, r2, r2
   155ec:	subcs	r0, r0, r1, lsl #23
   155f0:	cmp	r0, r1, lsl #22
   155f4:	adc	r2, r2, r2
   155f8:	subcs	r0, r0, r1, lsl #22
   155fc:	cmp	r0, r1, lsl #21
   15600:	adc	r2, r2, r2
   15604:	subcs	r0, r0, r1, lsl #21
   15608:	cmp	r0, r1, lsl #20
   1560c:	adc	r2, r2, r2
   15610:	subcs	r0, r0, r1, lsl #20
   15614:	cmp	r0, r1, lsl #19
   15618:	adc	r2, r2, r2
   1561c:	subcs	r0, r0, r1, lsl #19
   15620:	cmp	r0, r1, lsl #18
   15624:	adc	r2, r2, r2
   15628:	subcs	r0, r0, r1, lsl #18
   1562c:	cmp	r0, r1, lsl #17
   15630:	adc	r2, r2, r2
   15634:	subcs	r0, r0, r1, lsl #17
   15638:	cmp	r0, r1, lsl #16
   1563c:	adc	r2, r2, r2
   15640:	subcs	r0, r0, r1, lsl #16
   15644:	cmp	r0, r1, lsl #15
   15648:	adc	r2, r2, r2
   1564c:	subcs	r0, r0, r1, lsl #15
   15650:	cmp	r0, r1, lsl #14
   15654:	adc	r2, r2, r2
   15658:	subcs	r0, r0, r1, lsl #14
   1565c:	cmp	r0, r1, lsl #13
   15660:	adc	r2, r2, r2
   15664:	subcs	r0, r0, r1, lsl #13
   15668:	cmp	r0, r1, lsl #12
   1566c:	adc	r2, r2, r2
   15670:	subcs	r0, r0, r1, lsl #12
   15674:	cmp	r0, r1, lsl #11
   15678:	adc	r2, r2, r2
   1567c:	subcs	r0, r0, r1, lsl #11
   15680:	cmp	r0, r1, lsl #10
   15684:	adc	r2, r2, r2
   15688:	subcs	r0, r0, r1, lsl #10
   1568c:	cmp	r0, r1, lsl #9
   15690:	adc	r2, r2, r2
   15694:	subcs	r0, r0, r1, lsl #9
   15698:	cmp	r0, r1, lsl #8
   1569c:	adc	r2, r2, r2
   156a0:	subcs	r0, r0, r1, lsl #8
   156a4:	cmp	r0, r1, lsl #7
   156a8:	adc	r2, r2, r2
   156ac:	subcs	r0, r0, r1, lsl #7
   156b0:	cmp	r0, r1, lsl #6
   156b4:	adc	r2, r2, r2
   156b8:	subcs	r0, r0, r1, lsl #6
   156bc:	cmp	r0, r1, lsl #5
   156c0:	adc	r2, r2, r2
   156c4:	subcs	r0, r0, r1, lsl #5
   156c8:	cmp	r0, r1, lsl #4
   156cc:	adc	r2, r2, r2
   156d0:	subcs	r0, r0, r1, lsl #4
   156d4:	cmp	r0, r1, lsl #3
   156d8:	adc	r2, r2, r2
   156dc:	subcs	r0, r0, r1, lsl #3
   156e0:	cmp	r0, r1, lsl #2
   156e4:	adc	r2, r2, r2
   156e8:	subcs	r0, r0, r1, lsl #2
   156ec:	cmp	r0, r1, lsl #1
   156f0:	adc	r2, r2, r2
   156f4:	subcs	r0, r0, r1, lsl #1
   156f8:	cmp	r0, r1
   156fc:	adc	r2, r2, r2
   15700:	subcs	r0, r0, r1
   15704:	mov	r0, r2
   15708:	bx	lr
   1570c:	moveq	r0, #1
   15710:	movne	r0, #0
   15714:	bx	lr
   15718:	clz	r2, r1
   1571c:	rsb	r2, r2, #31
   15720:	lsr	r0, r0, r2
   15724:	bx	lr
   15728:	cmp	r0, #0
   1572c:	mvnne	r0, #0
   15730:	b	15a68 <__assert_fail@plt+0x4bdc>
   15734:	cmp	r1, #0
   15738:	beq	15728 <__assert_fail@plt+0x489c>
   1573c:	push	{r0, r1, lr}
   15740:	bl	15548 <__assert_fail@plt+0x46bc>
   15744:	pop	{r1, r2, lr}
   15748:	mul	r3, r2, r0
   1574c:	sub	r1, r1, r3
   15750:	bx	lr
   15754:	cmp	r1, #0
   15758:	beq	15964 <__assert_fail@plt+0x4ad8>
   1575c:	eor	ip, r0, r1
   15760:	rsbmi	r1, r1, #0
   15764:	subs	r2, r1, #1
   15768:	beq	15930 <__assert_fail@plt+0x4aa4>
   1576c:	movs	r3, r0
   15770:	rsbmi	r3, r0, #0
   15774:	cmp	r3, r1
   15778:	bls	1593c <__assert_fail@plt+0x4ab0>
   1577c:	tst	r1, r2
   15780:	beq	1594c <__assert_fail@plt+0x4ac0>
   15784:	clz	r2, r3
   15788:	clz	r0, r1
   1578c:	sub	r2, r0, r2
   15790:	rsbs	r2, r2, #31
   15794:	addne	r2, r2, r2, lsl #1
   15798:	mov	r0, #0
   1579c:	addne	pc, pc, r2, lsl #2
   157a0:	nop			; (mov r0, r0)
   157a4:	cmp	r3, r1, lsl #31
   157a8:	adc	r0, r0, r0
   157ac:	subcs	r3, r3, r1, lsl #31
   157b0:	cmp	r3, r1, lsl #30
   157b4:	adc	r0, r0, r0
   157b8:	subcs	r3, r3, r1, lsl #30
   157bc:	cmp	r3, r1, lsl #29
   157c0:	adc	r0, r0, r0
   157c4:	subcs	r3, r3, r1, lsl #29
   157c8:	cmp	r3, r1, lsl #28
   157cc:	adc	r0, r0, r0
   157d0:	subcs	r3, r3, r1, lsl #28
   157d4:	cmp	r3, r1, lsl #27
   157d8:	adc	r0, r0, r0
   157dc:	subcs	r3, r3, r1, lsl #27
   157e0:	cmp	r3, r1, lsl #26
   157e4:	adc	r0, r0, r0
   157e8:	subcs	r3, r3, r1, lsl #26
   157ec:	cmp	r3, r1, lsl #25
   157f0:	adc	r0, r0, r0
   157f4:	subcs	r3, r3, r1, lsl #25
   157f8:	cmp	r3, r1, lsl #24
   157fc:	adc	r0, r0, r0
   15800:	subcs	r3, r3, r1, lsl #24
   15804:	cmp	r3, r1, lsl #23
   15808:	adc	r0, r0, r0
   1580c:	subcs	r3, r3, r1, lsl #23
   15810:	cmp	r3, r1, lsl #22
   15814:	adc	r0, r0, r0
   15818:	subcs	r3, r3, r1, lsl #22
   1581c:	cmp	r3, r1, lsl #21
   15820:	adc	r0, r0, r0
   15824:	subcs	r3, r3, r1, lsl #21
   15828:	cmp	r3, r1, lsl #20
   1582c:	adc	r0, r0, r0
   15830:	subcs	r3, r3, r1, lsl #20
   15834:	cmp	r3, r1, lsl #19
   15838:	adc	r0, r0, r0
   1583c:	subcs	r3, r3, r1, lsl #19
   15840:	cmp	r3, r1, lsl #18
   15844:	adc	r0, r0, r0
   15848:	subcs	r3, r3, r1, lsl #18
   1584c:	cmp	r3, r1, lsl #17
   15850:	adc	r0, r0, r0
   15854:	subcs	r3, r3, r1, lsl #17
   15858:	cmp	r3, r1, lsl #16
   1585c:	adc	r0, r0, r0
   15860:	subcs	r3, r3, r1, lsl #16
   15864:	cmp	r3, r1, lsl #15
   15868:	adc	r0, r0, r0
   1586c:	subcs	r3, r3, r1, lsl #15
   15870:	cmp	r3, r1, lsl #14
   15874:	adc	r0, r0, r0
   15878:	subcs	r3, r3, r1, lsl #14
   1587c:	cmp	r3, r1, lsl #13
   15880:	adc	r0, r0, r0
   15884:	subcs	r3, r3, r1, lsl #13
   15888:	cmp	r3, r1, lsl #12
   1588c:	adc	r0, r0, r0
   15890:	subcs	r3, r3, r1, lsl #12
   15894:	cmp	r3, r1, lsl #11
   15898:	adc	r0, r0, r0
   1589c:	subcs	r3, r3, r1, lsl #11
   158a0:	cmp	r3, r1, lsl #10
   158a4:	adc	r0, r0, r0
   158a8:	subcs	r3, r3, r1, lsl #10
   158ac:	cmp	r3, r1, lsl #9
   158b0:	adc	r0, r0, r0
   158b4:	subcs	r3, r3, r1, lsl #9
   158b8:	cmp	r3, r1, lsl #8
   158bc:	adc	r0, r0, r0
   158c0:	subcs	r3, r3, r1, lsl #8
   158c4:	cmp	r3, r1, lsl #7
   158c8:	adc	r0, r0, r0
   158cc:	subcs	r3, r3, r1, lsl #7
   158d0:	cmp	r3, r1, lsl #6
   158d4:	adc	r0, r0, r0
   158d8:	subcs	r3, r3, r1, lsl #6
   158dc:	cmp	r3, r1, lsl #5
   158e0:	adc	r0, r0, r0
   158e4:	subcs	r3, r3, r1, lsl #5
   158e8:	cmp	r3, r1, lsl #4
   158ec:	adc	r0, r0, r0
   158f0:	subcs	r3, r3, r1, lsl #4
   158f4:	cmp	r3, r1, lsl #3
   158f8:	adc	r0, r0, r0
   158fc:	subcs	r3, r3, r1, lsl #3
   15900:	cmp	r3, r1, lsl #2
   15904:	adc	r0, r0, r0
   15908:	subcs	r3, r3, r1, lsl #2
   1590c:	cmp	r3, r1, lsl #1
   15910:	adc	r0, r0, r0
   15914:	subcs	r3, r3, r1, lsl #1
   15918:	cmp	r3, r1
   1591c:	adc	r0, r0, r0
   15920:	subcs	r3, r3, r1
   15924:	cmp	ip, #0
   15928:	rsbmi	r0, r0, #0
   1592c:	bx	lr
   15930:	teq	ip, r0
   15934:	rsbmi	r0, r0, #0
   15938:	bx	lr
   1593c:	movcc	r0, #0
   15940:	asreq	r0, ip, #31
   15944:	orreq	r0, r0, #1
   15948:	bx	lr
   1594c:	clz	r2, r1
   15950:	rsb	r2, r2, #31
   15954:	cmp	ip, #0
   15958:	lsr	r0, r3, r2
   1595c:	rsbmi	r0, r0, #0
   15960:	bx	lr
   15964:	cmp	r0, #0
   15968:	mvngt	r0, #-2147483648	; 0x80000000
   1596c:	movlt	r0, #-2147483648	; 0x80000000
   15970:	b	15a68 <__assert_fail@plt+0x4bdc>
   15974:	cmp	r1, #0
   15978:	beq	15964 <__assert_fail@plt+0x4ad8>
   1597c:	push	{r0, r1, lr}
   15980:	bl	1575c <__assert_fail@plt+0x48d0>
   15984:	pop	{r1, r2, lr}
   15988:	mul	r3, r2, r0
   1598c:	sub	r1, r1, r3
   15990:	bx	lr
   15994:	cmp	r3, #0
   15998:	cmpeq	r2, #0
   1599c:	bne	159c0 <__assert_fail@plt+0x4b34>
   159a0:	cmp	r1, #0
   159a4:	movlt	r1, #-2147483648	; 0x80000000
   159a8:	movlt	r0, #0
   159ac:	blt	159bc <__assert_fail@plt+0x4b30>
   159b0:	cmpeq	r0, #0
   159b4:	mvnne	r1, #-2147483648	; 0x80000000
   159b8:	mvnne	r0, #0
   159bc:	b	15a68 <__assert_fail@plt+0x4bdc>
   159c0:	sub	sp, sp, #8
   159c4:	push	{sp, lr}
   159c8:	cmp	r1, #0
   159cc:	blt	159ec <__assert_fail@plt+0x4b60>
   159d0:	cmp	r3, #0
   159d4:	blt	15a20 <__assert_fail@plt+0x4b94>
   159d8:	bl	15a78 <__assert_fail@plt+0x4bec>
   159dc:	ldr	lr, [sp, #4]
   159e0:	add	sp, sp, #8
   159e4:	pop	{r2, r3}
   159e8:	bx	lr
   159ec:	rsbs	r0, r0, #0
   159f0:	sbc	r1, r1, r1, lsl #1
   159f4:	cmp	r3, #0
   159f8:	blt	15a44 <__assert_fail@plt+0x4bb8>
   159fc:	bl	15a78 <__assert_fail@plt+0x4bec>
   15a00:	ldr	lr, [sp, #4]
   15a04:	add	sp, sp, #8
   15a08:	pop	{r2, r3}
   15a0c:	rsbs	r0, r0, #0
   15a10:	sbc	r1, r1, r1, lsl #1
   15a14:	rsbs	r2, r2, #0
   15a18:	sbc	r3, r3, r3, lsl #1
   15a1c:	bx	lr
   15a20:	rsbs	r2, r2, #0
   15a24:	sbc	r3, r3, r3, lsl #1
   15a28:	bl	15a78 <__assert_fail@plt+0x4bec>
   15a2c:	ldr	lr, [sp, #4]
   15a30:	add	sp, sp, #8
   15a34:	pop	{r2, r3}
   15a38:	rsbs	r0, r0, #0
   15a3c:	sbc	r1, r1, r1, lsl #1
   15a40:	bx	lr
   15a44:	rsbs	r2, r2, #0
   15a48:	sbc	r3, r3, r3, lsl #1
   15a4c:	bl	15a78 <__assert_fail@plt+0x4bec>
   15a50:	ldr	lr, [sp, #4]
   15a54:	add	sp, sp, #8
   15a58:	pop	{r2, r3}
   15a5c:	rsbs	r2, r2, #0
   15a60:	sbc	r3, r3, r3, lsl #1
   15a64:	bx	lr
   15a68:	push	{r1, lr}
   15a6c:	mov	r0, #8
   15a70:	bl	10c4c <raise@plt>
   15a74:	pop	{r1, pc}
   15a78:	cmp	r1, r3
   15a7c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15a80:	cmpeq	r0, r2
   15a84:	mov	r4, r0
   15a88:	mov	r5, r1
   15a8c:	ldr	r9, [sp, #28]
   15a90:	movcc	r0, #0
   15a94:	movcc	r1, #0
   15a98:	bcc	15b90 <__assert_fail@plt+0x4d04>
   15a9c:	cmp	r3, #0
   15aa0:	clzeq	ip, r2
   15aa4:	clzne	ip, r3
   15aa8:	addeq	ip, ip, #32
   15aac:	cmp	r5, #0
   15ab0:	clzeq	r1, r4
   15ab4:	addeq	r1, r1, #32
   15ab8:	clzne	r1, r5
   15abc:	sub	ip, ip, r1
   15ac0:	sub	lr, ip, #32
   15ac4:	lsl	r7, r3, ip
   15ac8:	rsb	r8, ip, #32
   15acc:	orr	r7, r7, r2, lsl lr
   15ad0:	orr	r7, r7, r2, lsr r8
   15ad4:	lsl	r6, r2, ip
   15ad8:	cmp	r5, r7
   15adc:	cmpeq	r4, r6
   15ae0:	movcc	r0, #0
   15ae4:	movcc	r1, #0
   15ae8:	bcc	15b04 <__assert_fail@plt+0x4c78>
   15aec:	mov	r3, #1
   15af0:	subs	r4, r4, r6
   15af4:	lsl	r1, r3, lr
   15af8:	lsl	r0, r3, ip
   15afc:	orr	r1, r1, r3, lsr r8
   15b00:	sbc	r5, r5, r7
   15b04:	cmp	ip, #0
   15b08:	beq	15b90 <__assert_fail@plt+0x4d04>
   15b0c:	lsrs	r3, r7, #1
   15b10:	rrx	r2, r6
   15b14:	mov	r6, ip
   15b18:	b	15b3c <__assert_fail@plt+0x4cb0>
   15b1c:	subs	r4, r4, r2
   15b20:	sbc	r5, r5, r3
   15b24:	adds	r4, r4, r4
   15b28:	adc	r5, r5, r5
   15b2c:	adds	r4, r4, #1
   15b30:	adc	r5, r5, #0
   15b34:	subs	r6, r6, #1
   15b38:	beq	15b58 <__assert_fail@plt+0x4ccc>
   15b3c:	cmp	r5, r3
   15b40:	cmpeq	r4, r2
   15b44:	bcs	15b1c <__assert_fail@plt+0x4c90>
   15b48:	adds	r4, r4, r4
   15b4c:	adc	r5, r5, r5
   15b50:	subs	r6, r6, #1
   15b54:	bne	15b3c <__assert_fail@plt+0x4cb0>
   15b58:	lsr	r6, r4, ip
   15b5c:	lsr	r7, r5, ip
   15b60:	orr	r6, r6, r5, lsl r8
   15b64:	adds	r2, r0, r4
   15b68:	orr	r6, r6, r5, lsr lr
   15b6c:	adc	r3, r1, r5
   15b70:	lsl	r1, r7, ip
   15b74:	orr	r1, r1, r6, lsl lr
   15b78:	lsl	r0, r6, ip
   15b7c:	orr	r1, r1, r6, lsr r8
   15b80:	subs	r0, r2, r0
   15b84:	mov	r4, r6
   15b88:	mov	r5, r7
   15b8c:	sbc	r1, r3, r1
   15b90:	cmp	r9, #0
   15b94:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15b98:	strd	r4, [r9]
   15b9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ba0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ba4:	mov	r7, r0
   15ba8:	ldr	r6, [pc, #72]	; 15bf8 <__assert_fail@plt+0x4d6c>
   15bac:	ldr	r5, [pc, #72]	; 15bfc <__assert_fail@plt+0x4d70>
   15bb0:	add	r6, pc, r6
   15bb4:	add	r5, pc, r5
   15bb8:	sub	r6, r6, r5
   15bbc:	mov	r8, r1
   15bc0:	mov	r9, r2
   15bc4:	bl	10c14 <calloc@plt-0x20>
   15bc8:	asrs	r6, r6, #2
   15bcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bd0:	mov	r4, #0
   15bd4:	add	r4, r4, #1
   15bd8:	ldr	r3, [r5], #4
   15bdc:	mov	r2, r9
   15be0:	mov	r1, r8
   15be4:	mov	r0, r7
   15be8:	blx	r3
   15bec:	cmp	r6, r4
   15bf0:	bne	15bd4 <__assert_fail@plt+0x4d48>
   15bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bf8:	andeq	r1, r1, r8, asr r3
   15bfc:	andeq	r1, r1, r0, asr r3
   15c00:	bx	lr
   15c04:	ldr	r3, [pc, #12]	; 15c18 <__assert_fail@plt+0x4d8c>
   15c08:	mov	r1, #0
   15c0c:	add	r3, pc, r3
   15c10:	ldr	r2, [r3]
   15c14:	b	10dcc <__cxa_atexit@plt>
   15c18:	andeq	r1, r1, ip, asr #9

Disassembly of section .fini:

00015c1c <.fini>:
   15c1c:	push	{r3, lr}
   15c20:	pop	{r3, pc}
