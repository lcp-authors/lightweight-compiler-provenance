
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cd4 <.init>:
   10cd4:	push	{r3, lr}
   10cd8:	bl	11f74 <__assert_fail@plt+0xfec>
   10cdc:	pop	{r3, pc}

Disassembly of section .plt:

00010ce0 <calloc@plt-0x14>:
   10ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce4:	ldr	lr, [pc, #4]	; 10cf0 <calloc@plt-0x4>
   10ce8:	add	lr, pc, lr
   10cec:	ldr	pc, [lr, #8]!
   10cf0:	andeq	r6, r1, r0, lsl r3

00010cf4 <calloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #784]!	; 0x310

00010d00 <fputs_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #776]!	; 0x308

00010d0c <raise@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #768]!	; 0x300

00010d18 <strcmp@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #760]!	; 0x2f8

00010d24 <read@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d30 <fflush@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #744]!	; 0x2e8

00010d3c <free@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #736]!	; 0x2e0

00010d48 <_exit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #728]!	; 0x2d8

00010d54 <memcpy@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d60 <mbsinit@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #712]!	; 0x2c8

00010d6c <fwrite_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #704]!	; 0x2c0

00010d78 <memcmp@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #696]!	; 0x2b8

00010d84 <fputc_unlocked@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #688]!	; 0x2b0

00010d90 <dcgettext@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #680]!	; 0x2a8

00010d9c <realloc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #672]!	; 0x2a0

00010da8 <textdomain@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #664]!	; 0x298

00010db4 <rawmemchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #656]!	; 0x290

00010dc0 <iswprint@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #648]!	; 0x288

00010dcc <__fxstat64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #640]!	; 0x280

00010dd8 <lseek64@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #632]!	; 0x278

00010de4 <__ctype_get_mb_cur_max@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #624]!	; 0x270

00010df0 <__fpending@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #616]!	; 0x268

00010dfc <ferror_unlocked@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #608]!	; 0x260

00010e08 <mbrtowc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #600]!	; 0x258

00010e14 <error@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #592]!	; 0x250

00010e20 <open64@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #584]!	; 0x248

00010e2c <malloc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #576]!	; 0x240

00010e38 <__libc_start_main@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #568]!	; 0x238

00010e44 <__freading@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #560]!	; 0x230

00010e50 <__gmon_start__@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #552]!	; 0x228

00010e5c <getopt_long@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #544]!	; 0x220

00010e68 <__ctype_b_loc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #536]!	; 0x218

00010e74 <exit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #528]!	; 0x210

00010e80 <strlen@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #520]!	; 0x208

00010e8c <strchr@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #512]!	; 0x200

00010e98 <memrchr@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ea4 <__errno_location@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb0 <__cxa_atexit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #488]!	; 0x1e8

00010ebc <memset@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec8 <__printf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #472]!	; 0x1d8

00010ed4 <fileno@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee0 <strtoumax@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #456]!	; 0x1c8

00010eec <__fprintf_chk@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef8 <memchr@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #440]!	; 0x1b8

00010f04 <fclose@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #432]!	; 0x1b0

00010f10 <fseeko64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #424]!	; 0x1a8

00010f1c <setlocale@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #416]!	; 0x1a0

00010f28 <strrchr@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #408]!	; 0x198

00010f34 <nl_langinfo@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #400]!	; 0x190

00010f40 <clearerr_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #392]!	; 0x188

00010f4c <bindtextdomain@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #384]!	; 0x180

00010f58 <fputs@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #376]!	; 0x178

00010f64 <strncmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #368]!	; 0x170

00010f70 <abort@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #360]!	; 0x168

00010f7c <close@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #352]!	; 0x160

00010f88 <__assert_fail@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #344]!	; 0x158

Disassembly of section .text:

00010f94 <.text>:
   10f94:	push	{r4, lr}
   10f98:	bl	10ea4 <__errno_location@plt>
   10f9c:	mov	r3, #12
   10fa0:	str	r3, [r0]
   10fa4:	mov	r0, #0
   10fa8:	pop	{r4, pc}
   10fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb0:	mov	r7, r0
   10fb4:	sub	sp, sp, #244	; 0xf4
   10fb8:	mov	r5, r1
   10fbc:	mov	r4, #0
   10fc0:	ldr	r0, [r1]
   10fc4:	bl	12da0 <__assert_fail@plt+0x1e18>
   10fc8:	ldr	r1, [pc, #3828]	; 11ec4 <__assert_fail@plt+0xf3c>
   10fcc:	mov	r0, #6
   10fd0:	bl	10f1c <setlocale@plt>
   10fd4:	ldr	r6, [pc, #3820]	; 11ec8 <__assert_fail@plt+0xf40>
   10fd8:	ldr	r1, [pc, #3820]	; 11ecc <__assert_fail@plt+0xf44>
   10fdc:	ldr	r0, [pc, #3820]	; 11ed0 <__assert_fail@plt+0xf48>
   10fe0:	bl	10f4c <bindtextdomain@plt>
   10fe4:	ldr	r0, [pc, #3812]	; 11ed0 <__assert_fail@plt+0xf48>
   10fe8:	bl	10da8 <textdomain@plt>
   10fec:	ldr	r0, [pc, #3808]	; 11ed4 <__assert_fail@plt+0xf4c>
   10ff0:	bl	15864 <__assert_fail@plt+0x48dc>
   10ff4:	mov	r3, #10
   10ff8:	cmp	r7, #1
   10ffc:	strb	r3, [r6]
   11000:	strb	r4, [r6, #1]
   11004:	strb	r4, [r6, #2]
   11008:	ble	1137c <__assert_fail@plt+0x3f4>
   1100c:	ldr	r1, [r5, #4]
   11010:	ldrb	r3, [r1]
   11014:	cmp	r3, #45	; 0x2d
   11018:	bne	1137c <__assert_fail@plt+0x3f4>
   1101c:	ldrb	r3, [r1, #1]
   11020:	sub	r3, r3, #48	; 0x30
   11024:	cmp	r3, #9
   11028:	bhi	1137c <__assert_fail@plt+0x3f4>
   1102c:	add	r1, r1, #1
   11030:	mov	r3, r1
   11034:	ldrb	r2, [r3, #1]!
   11038:	sub	r2, r2, #48	; 0x30
   1103c:	cmp	r2, #9
   11040:	bls	11034 <__assert_fail@plt+0xac>
   11044:	mov	r0, #0
   11048:	mov	lr, #1
   1104c:	mov	r9, r3
   11050:	mov	ip, #10
   11054:	mov	r2, r0
   11058:	mov	r4, r0
   1105c:	str	lr, [sp, #24]
   11060:	mov	r8, r9
   11064:	ldrb	lr, [r9], #1
   11068:	cmp	lr, #0
   1106c:	bne	110b4 <__assert_fail@plt+0x12c>
   11070:	cmp	r0, #0
   11074:	strb	r2, [r3]
   11078:	sub	r7, r7, #1
   1107c:	ldr	r0, [sp, #24]
   11080:	strbne	ip, [r6]
   11084:	cmp	r2, #0
   11088:	movne	r2, #0
   1108c:	strbne	r2, [r3, #1]
   11090:	bl	12028 <__assert_fail@plt+0x10a0>
   11094:	ldr	r3, [r5]
   11098:	strd	r0, [sp, #16]
   1109c:	str	r3, [r5, #4]!
   110a0:	mov	r3, #0
   110a4:	ldr	sl, [pc, #3628]	; 11ed8 <__assert_fail@plt+0xf50>
   110a8:	ldr	r8, [pc, #3628]	; 11edc <__assert_fail@plt+0xf54>
   110ac:	str	r3, [sp, #48]	; 0x30
   110b0:	b	11244 <__assert_fail@plt+0x2bc>
   110b4:	sub	sl, lr, #98	; 0x62
   110b8:	cmp	sl, #24
   110bc:	ldrls	pc, [pc, sl, lsl #2]
   110c0:	b	11154 <__assert_fail@plt+0x1cc>
   110c4:	andeq	r1, r1, r8, lsr #2
   110c8:	andeq	r1, r1, r8, lsl #3
   110cc:	andeq	r1, r1, r4, asr r1
   110d0:	andeq	r1, r1, r4, asr r1
   110d4:	andeq	r1, r1, r4, asr r1
   110d8:	andeq	r1, r1, r4, asr r1
   110dc:	andeq	r1, r1, r4, asr r1
   110e0:	andeq	r1, r1, r4, asr r1
   110e4:	andeq	r1, r1, r4, asr r1
   110e8:	andeq	r1, r1, r8, lsr #2
   110ec:	muleq	r1, r4, r1
   110f0:	andeq	r1, r1, r8, lsr #2
   110f4:	andeq	r1, r1, r4, asr r1
   110f8:	andeq	r1, r1, r4, asr r1
   110fc:	andeq	r1, r1, r4, asr r1
   11100:	andeq	r1, r1, r8, lsr r1
   11104:	andeq	r1, r1, r4, asr r1
   11108:	andeq	r1, r1, r4, asr r1
   1110c:	andeq	r1, r1, r4, asr r1
   11110:	andeq	r1, r1, r4, asr r1
   11114:	andeq	r1, r1, r0, asr #2
   11118:	andeq	r1, r1, r4, asr r1
   1111c:	andeq	r1, r1, r4, asr r1
   11120:	andeq	r1, r1, r4, asr r1
   11124:	andeq	r1, r1, r8, asr #2
   11128:	mov	r2, lr
   1112c:	mov	lr, #0
   11130:	str	lr, [sp, #24]
   11134:	b	11060 <__assert_fail@plt+0xd8>
   11138:	mov	r4, #2
   1113c:	b	11060 <__assert_fail@plt+0xd8>
   11140:	mov	r4, #1
   11144:	b	11060 <__assert_fail@plt+0xd8>
   11148:	mov	r0, #1
   1114c:	mov	ip, #0
   11150:	b	11060 <__assert_fail@plt+0xd8>
   11154:	cmp	r0, #0
   11158:	mov	r2, #5
   1115c:	ldr	r1, [pc, #3452]	; 11ee0 <__assert_fail@plt+0xf58>
   11160:	mov	r0, #0
   11164:	strbne	ip, [r6]
   11168:	bl	10d90 <dcgettext@plt>
   1116c:	ldrb	r3, [r8]
   11170:	mov	r1, #0
   11174:	mov	r2, r0
   11178:	mov	r0, r1
   1117c:	bl	10e14 <error@plt>
   11180:	mov	r0, #1
   11184:	b	11378 <__assert_fail@plt+0x3f0>
   11188:	mov	r2, #0
   1118c:	str	r2, [sp, #24]
   11190:	b	11060 <__assert_fail@plt+0xd8>
   11194:	mov	lr, #1
   11198:	b	11130 <__assert_fail@plt+0x1a8>
   1119c:	cmp	fp, #110	; 0x6e
   111a0:	beq	11334 <__assert_fail@plt+0x3ac>
   111a4:	bgt	111f4 <__assert_fail@plt+0x26c>
   111a8:	cmn	fp, #2
   111ac:	beq	11374 <__assert_fail@plt+0x3ec>
   111b0:	cmp	fp, #99	; 0x63
   111b4:	beq	112f8 <__assert_fail@plt+0x370>
   111b8:	cmn	fp, #3
   111bc:	bne	11208 <__assert_fail@plt+0x280>
   111c0:	ldr	r3, [pc, #3356]	; 11ee4 <__assert_fail@plt+0xf5c>
   111c4:	ldr	r0, [pc, #3356]	; 11ee8 <__assert_fail@plt+0xf60>
   111c8:	ldr	r2, [pc, #3356]	; 11eec <__assert_fail@plt+0xf64>
   111cc:	stmib	sp, {r3, r9}
   111d0:	ldr	r3, [pc, #3352]	; 11ef0 <__assert_fail@plt+0xf68>
   111d4:	ldr	r1, [pc, #3352]	; 11ef4 <__assert_fail@plt+0xf6c>
   111d8:	str	r3, [sp]
   111dc:	ldr	r3, [pc, #3348]	; 11ef8 <__assert_fail@plt+0xf70>
   111e0:	ldr	r0, [r0]
   111e4:	ldr	r3, [r3]
   111e8:	bl	14858 <__assert_fail@plt+0x38d0>
   111ec:	mov	r0, r9
   111f0:	bl	10e74 <exit@plt>
   111f4:	cmp	fp, #118	; 0x76
   111f8:	beq	11394 <__assert_fail@plt+0x40c>
   111fc:	bgt	1122c <__assert_fail@plt+0x2a4>
   11200:	cmp	fp, #113	; 0x71
   11204:	beq	1139c <__assert_fail@plt+0x414>
   11208:	sub	r3, fp, #48	; 0x30
   1120c:	cmp	r3, #9
   11210:	bhi	11180 <__assert_fail@plt+0x1f8>
   11214:	mov	r2, #5
   11218:	ldr	r1, [pc, #3264]	; 11ee0 <__assert_fail@plt+0xf58>
   1121c:	mov	r0, #0
   11220:	bl	10d90 <dcgettext@plt>
   11224:	mov	r3, fp
   11228:	b	11170 <__assert_fail@plt+0x1e8>
   1122c:	cmp	fp, #122	; 0x7a
   11230:	beq	1136c <__assert_fail@plt+0x3e4>
   11234:	cmp	fp, #256	; 0x100
   11238:	bne	11208 <__assert_fail@plt+0x280>
   1123c:	mov	r3, #1
   11240:	strb	r3, [r6, #3]
   11244:	mov	r9, #0
   11248:	mov	r3, sl
   1124c:	ldr	r2, [pc, #3240]	; 11efc <__assert_fail@plt+0xf74>
   11250:	mov	r1, r5
   11254:	mov	r0, r7
   11258:	str	r9, [sp]
   1125c:	bl	10e5c <getopt_long@plt>
   11260:	cmn	r0, #1
   11264:	mov	fp, r0
   11268:	bne	1119c <__assert_fail@plt+0x214>
   1126c:	cmp	r4, #1
   11270:	ldr	r2, [pc, #3208]	; 11f00 <__assert_fail@plt+0xf78>
   11274:	beq	11290 <__assert_fail@plt+0x308>
   11278:	cmp	r4, r9
   1127c:	bne	11298 <__assert_fail@plt+0x310>
   11280:	ldr	r1, [r2]
   11284:	sub	r3, r7, #1
   11288:	cmp	r3, r1
   1128c:	ble	11298 <__assert_fail@plt+0x310>
   11290:	mov	r3, #1
   11294:	strb	r3, [r6, #2]
   11298:	ldr	r3, [sp, #24]
   1129c:	ldr	r1, [sp, #48]	; 0x30
   112a0:	eor	r3, r3, #1
   112a4:	tst	r1, r3
   112a8:	beq	113a4 <__assert_fail@plt+0x41c>
   112ac:	ldrd	r0, [sp, #16]
   112b0:	cmp	r0, #0
   112b4:	sbcs	r3, r1, #0
   112b8:	bge	113a4 <__assert_fail@plt+0x41c>
   112bc:	mov	r2, #5
   112c0:	ldr	r1, [pc, #3132]	; 11f04 <__assert_fail@plt+0xf7c>
   112c4:	mov	r0, #0
   112c8:	bl	10d90 <dcgettext@plt>
   112cc:	mov	r4, r0
   112d0:	add	r2, sp, #136	; 0x88
   112d4:	ldrd	r0, [sp, #16]
   112d8:	bl	12d38 <__assert_fail@plt+0x1db0>
   112dc:	bl	143a0 <__assert_fail@plt+0x3418>
   112e0:	mov	r3, r4
   112e4:	ldr	r2, [pc, #3100]	; 11f08 <__assert_fail@plt+0xf80>
   112e8:	mov	r1, #75	; 0x4b
   112ec:	str	r0, [sp]
   112f0:	mov	r0, #1
   112f4:	bl	10e14 <error@plt>
   112f8:	ldr	r3, [r8]
   112fc:	mov	r0, #0
   11300:	ldrb	r2, [r3]
   11304:	cmp	r2, #45	; 0x2d
   11308:	addeq	r3, r3, #1
   1130c:	moveq	r2, #1
   11310:	movne	r2, #0
   11314:	streq	r3, [r8]
   11318:	ldr	r1, [r8]
   1131c:	str	r2, [sp, #48]	; 0x30
   11320:	bl	12028 <__assert_fail@plt+0x10a0>
   11324:	mov	r3, #0
   11328:	strd	r0, [sp, #16]
   1132c:	str	r3, [sp, #24]
   11330:	b	11244 <__assert_fail@plt+0x2bc>
   11334:	ldr	r3, [r8]
   11338:	mov	r0, #1
   1133c:	ldrb	r2, [r3]
   11340:	cmp	r2, #45	; 0x2d
   11344:	addeq	r3, r3, #1
   11348:	moveq	r2, #1
   1134c:	movne	r2, #0
   11350:	streq	r3, [r8]
   11354:	ldr	r1, [r8]
   11358:	str	r2, [sp, #48]	; 0x30
   1135c:	bl	12028 <__assert_fail@plt+0x10a0>
   11360:	mov	r3, #1
   11364:	strd	r0, [sp, #16]
   11368:	b	1132c <__assert_fail@plt+0x3a4>
   1136c:	strb	r9, [r6]
   11370:	b	11244 <__assert_fail@plt+0x2bc>
   11374:	mov	r0, r9
   11378:	bl	127f4 <__assert_fail@plt+0x186c>
   1137c:	mov	r3, #1
   11380:	mov	r2, #10
   11384:	str	r3, [sp, #24]
   11388:	mov	r3, #0
   1138c:	strd	r2, [sp, #16]
   11390:	b	110a0 <__assert_fail@plt+0x118>
   11394:	mov	r4, #1
   11398:	b	11244 <__assert_fail@plt+0x2bc>
   1139c:	mov	r4, #2
   113a0:	b	11244 <__assert_fail@plt+0x2bc>
   113a4:	ldr	r3, [r2]
   113a8:	ldr	r2, [sp, #16]
   113ac:	cmp	r3, r7
   113b0:	addlt	r5, r5, r3, lsl #2
   113b4:	ldr	r3, [sp, #16]
   113b8:	ldrge	r5, [pc, #2892]	; 11f0c <__assert_fail@plt+0xf84>
   113bc:	str	r3, [sp, #52]	; 0x34
   113c0:	ubfx	r3, r3, #0, #13
   113c4:	str	r3, [sp, #76]	; 0x4c
   113c8:	rsb	r3, r3, #8192	; 0x2000
   113cc:	str	r3, [sp, #68]	; 0x44
   113d0:	add	r3, r3, r2
   113d4:	lsr	r3, r3, #13
   113d8:	str	r3, [sp, #80]	; 0x50
   113dc:	add	r3, r3, #1
   113e0:	str	r3, [sp, #64]	; 0x40
   113e4:	lsr	r3, r3, #1
   113e8:	str	r3, [sp, #104]	; 0x68
   113ec:	sub	r3, r5, #4
   113f0:	str	r3, [sp, #88]	; 0x58
   113f4:	mov	r3, #1
   113f8:	str	r3, [sp, #72]	; 0x48
   113fc:	adds	r3, r2, #8192	; 0x2000
   11400:	str	r3, [sp, #96]	; 0x60
   11404:	ldr	r3, [sp, #20]
   11408:	adc	r3, r3, #0
   1140c:	str	r3, [sp, #100]	; 0x64
   11410:	ldr	r3, [sp, #88]	; 0x58
   11414:	ldr	r5, [r3, #4]!
   11418:	cmp	r5, #0
   1141c:	str	r3, [sp, #88]	; 0x58
   11420:	bne	11458 <__assert_fail@plt+0x4d0>
   11424:	ldr	r3, [pc, #2716]	; 11ec8 <__assert_fail@plt+0xf40>
   11428:	ldrb	r3, [r3, #1]
   1142c:	cmp	r3, #0
   11430:	beq	11eb4 <__assert_fail@plt+0xf2c>
   11434:	mov	r0, r5
   11438:	bl	10f7c <close@plt>
   1143c:	cmp	r0, #0
   11440:	bge	11eb4 <__assert_fail@plt+0xf2c>
   11444:	bl	10ea4 <__errno_location@plt>
   11448:	ldr	r2, [pc, #2752]	; 11f10 <__assert_fail@plt+0xf88>
   1144c:	ldr	r1, [r0]
   11450:	mov	r0, #1
   11454:	bl	10e14 <error@plt>
   11458:	ldr	r1, [pc, #2736]	; 11f10 <__assert_fail@plt+0xf88>
   1145c:	mov	r0, r5
   11460:	bl	10d18 <strcmp@plt>
   11464:	subs	r3, r0, #0
   11468:	str	r3, [sp, #84]	; 0x54
   1146c:	bne	11564 <__assert_fail@plt+0x5dc>
   11470:	ldr	r2, [pc, #2640]	; 11ec8 <__assert_fail@plt+0xf40>
   11474:	mov	r3, #1
   11478:	ldr	r1, [pc, #2708]	; 11f14 <__assert_fail@plt+0xf8c>
   1147c:	strb	r3, [r2, #1]
   11480:	mov	r2, #5
   11484:	bl	10d90 <dcgettext@plt>
   11488:	ldr	r3, [sp, #84]	; 0x54
   1148c:	mov	r5, r0
   11490:	str	r3, [sp, #28]
   11494:	ldr	r3, [pc, #2604]	; 11ec8 <__assert_fail@plt+0xf40>
   11498:	ldrb	r3, [r3, #2]
   1149c:	cmp	r3, #0
   114a0:	beq	114d4 <__assert_fail@plt+0x54c>
   114a4:	ldr	r4, [pc, #2668]	; 11f18 <__assert_fail@plt+0xf90>
   114a8:	mov	r3, r5
   114ac:	ldr	r1, [pc, #2664]	; 11f1c <__assert_fail@plt+0xf94>
   114b0:	ldr	r2, [pc, #2572]	; 11ec4 <__assert_fail@plt+0xf3c>
   114b4:	ldrb	r0, [r4]
   114b8:	cmp	r0, #0
   114bc:	mov	r0, #1
   114c0:	moveq	r2, r1
   114c4:	ldr	r1, [pc, #2644]	; 11f20 <__assert_fail@plt+0xf98>
   114c8:	bl	10ec8 <__printf_chk@plt>
   114cc:	mov	r3, #0
   114d0:	strb	r3, [r4]
   114d4:	ldr	r3, [sp, #48]	; 0x30
   114d8:	cmp	r3, #0
   114dc:	beq	11e78 <__assert_fail@plt+0xef0>
   114e0:	add	r1, sp, #136	; 0x88
   114e4:	ldr	r0, [sp, #28]
   114e8:	bl	1587c <__assert_fail@plt+0x48f4>
   114ec:	cmp	r0, #0
   114f0:	beq	115cc <__assert_fail@plt+0x644>
   114f4:	bl	10ea4 <__errno_location@plt>
   114f8:	ldr	r4, [r0]
   114fc:	mov	r2, #5
   11500:	mov	r0, #0
   11504:	ldr	r1, [pc, #2584]	; 11f24 <__assert_fail@plt+0xf9c>
   11508:	bl	10d90 <dcgettext@plt>
   1150c:	mov	r6, r0
   11510:	mov	r1, r5
   11514:	mov	r0, #4
   11518:	bl	141bc <__assert_fail@plt+0x3234>
   1151c:	mov	r3, r0
   11520:	mov	r2, r6
   11524:	mov	r1, r4
   11528:	mov	r0, #0
   1152c:	bl	10e14 <error@plt>
   11530:	mov	r4, #0
   11534:	ldr	r3, [sp, #84]	; 0x54
   11538:	cmp	r3, #0
   1153c:	beq	115bc <__assert_fail@plt+0x634>
   11540:	ldr	r0, [sp, #28]
   11544:	bl	10f7c <close@plt>
   11548:	cmp	r0, #0
   1154c:	beq	115bc <__assert_fail@plt+0x634>
   11550:	bl	10ea4 <__errno_location@plt>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #2504]	; 11f28 <__assert_fail@plt+0xfa0>
   1155c:	ldr	r4, [r0]
   11560:	b	1158c <__assert_fail@plt+0x604>
   11564:	mov	r1, #0
   11568:	mov	r0, r5
   1156c:	bl	10e20 <open64@plt>
   11570:	subs	r3, r0, #0
   11574:	str	r3, [sp, #28]
   11578:	bge	11494 <__assert_fail@plt+0x50c>
   1157c:	bl	10ea4 <__errno_location@plt>
   11580:	ldr	r1, [pc, #2468]	; 11f2c <__assert_fail@plt+0xfa4>
   11584:	mov	r2, #5
   11588:	ldr	r4, [r0]
   1158c:	mov	r0, #0
   11590:	bl	10d90 <dcgettext@plt>
   11594:	mov	r6, r0
   11598:	mov	r1, r5
   1159c:	mov	r0, #4
   115a0:	bl	141bc <__assert_fail@plt+0x3234>
   115a4:	mov	r3, r0
   115a8:	mov	r1, r4
   115ac:	mov	r2, r6
   115b0:	mov	r0, #0
   115b4:	mov	r4, #0
   115b8:	bl	10e14 <error@plt>
   115bc:	ldr	r3, [sp, #72]	; 0x48
   115c0:	and	r3, r3, r4
   115c4:	str	r3, [sp, #72]	; 0x48
   115c8:	b	11410 <__assert_fail@plt+0x488>
   115cc:	ldr	r3, [pc, #2292]	; 11ec8 <__assert_fail@plt+0xf40>
   115d0:	ldrb	r3, [r3, #3]
   115d4:	cmp	r3, #0
   115d8:	bne	116fc <__assert_fail@plt+0x774>
   115dc:	ldr	r3, [sp, #152]	; 0x98
   115e0:	and	r3, r3, #53248	; 0xd000
   115e4:	cmp	r3, #32768	; 0x8000
   115e8:	bne	116fc <__assert_fail@plt+0x774>
   115ec:	mov	r3, #1
   115f0:	mov	r2, #0
   115f4:	ldr	r0, [sp, #28]
   115f8:	stm	sp, {r3, r5}
   115fc:	mov	r3, #0
   11600:	bl	12090 <__assert_fail@plt+0x1108>
   11604:	mov	r3, r1
   11608:	cmp	r0, #0
   1160c:	strd	r0, [sp, #32]
   11610:	sbcs	r3, r3, #0
   11614:	blt	11530 <__assert_fail@plt+0x5a8>
   11618:	ldr	r1, [sp, #32]
   1161c:	ldr	r0, [sp, #36]	; 0x24
   11620:	ldrd	r2, [sp, #184]	; 0xb8
   11624:	and	r4, r1, r0
   11628:	ldr	r1, [pc, #2200]	; 11ec8 <__assert_fail@plt+0xf40>
   1162c:	cmn	r4, #1
   11630:	movne	r4, #0
   11634:	moveq	r4, #1
   11638:	ldrb	r0, [r1, #3]
   1163c:	ldr	r1, [sp, #24]
   11640:	orr	r4, r4, r0
   11644:	cmp	r1, #0
   11648:	beq	11a10 <__assert_fail@plt+0xa88>
   1164c:	cmp	r4, #0
   11650:	bne	11674 <__assert_fail@plt+0x6ec>
   11654:	ldr	r0, [sp, #192]	; 0xc0
   11658:	sub	r1, r0, #1
   1165c:	cmp	r1, #536870912	; 0x20000000
   11660:	movcs	r0, #512	; 0x200
   11664:	asr	r1, r0, #31
   11668:	cmp	r0, r2
   1166c:	sbcs	r1, r1, r3
   11670:	blt	119d8 <__assert_fail@plt+0xa50>
   11674:	ldrd	r2, [sp, #32]
   11678:	movw	r0, #8208	; 0x2010
   1167c:	mov	r4, #0
   11680:	mov	sl, r4
   11684:	strd	r2, [sp, #40]	; 0x28
   11688:	bl	14920 <__assert_fail@plt+0x3998>
   1168c:	add	r3, r0, #8192	; 0x2000
   11690:	mov	r8, r0
   11694:	movw	r0, #8208	; 0x2010
   11698:	mov	r7, r8
   1169c:	str	r4, [r3, #4]
   116a0:	str	r4, [r3, #8]
   116a4:	str	r4, [r3, #12]
   116a8:	bl	14920 <__assert_fail@plt+0x3998>
   116ac:	mov	r6, r0
   116b0:	mov	r2, #8192	; 0x2000
   116b4:	mov	r1, r6
   116b8:	ldr	r0, [sp, #28]
   116bc:	bl	143ac <__assert_fail@plt+0x3424>
   116c0:	sub	r3, r0, #1
   116c4:	mov	fp, r0
   116c8:	cmn	r3, #3
   116cc:	bhi	11820 <__assert_fail@plt+0x898>
   116d0:	ldrd	r2, [sp, #16]
   116d4:	orrs	r3, r2, r3
   116d8:	bne	1170c <__assert_fail@plt+0x784>
   116dc:	ldrd	r2, [sp, #40]	; 0x28
   116e0:	mov	r1, r0
   116e4:	mov	r0, r6
   116e8:	adds	r2, r2, fp
   116ec:	adc	r3, r3, #0
   116f0:	strd	r2, [sp, #40]	; 0x28
   116f4:	bl	1213c <__assert_fail@plt+0x11b4>
   116f8:	b	116b0 <__assert_fail@plt+0x728>
   116fc:	mvn	r2, #0
   11700:	mvn	r3, #0
   11704:	strd	r2, [sp, #32]
   11708:	b	11618 <__assert_fail@plt+0x690>
   1170c:	ldr	r3, [pc, #1972]	; 11ec8 <__assert_fail@plt+0xf40>
   11710:	add	r9, r6, #8192	; 0x2000
   11714:	add	r2, r6, r0
   11718:	mov	r0, r6
   1171c:	str	fp, [r9, #4]
   11720:	str	sl, [r9, #8]
   11724:	str	sl, [r9, #12]
   11728:	ldrb	r3, [r3]
   1172c:	strb	r3, [r6, fp]
   11730:	mov	fp, r9
   11734:	mov	r1, r3
   11738:	str	r3, [sp, #92]	; 0x5c
   1173c:	str	r2, [sp, #108]	; 0x6c
   11740:	bl	10db4 <rawmemchr@plt>
   11744:	ldr	r1, [fp, #8]
   11748:	ldr	r2, [sp, #108]	; 0x6c
   1174c:	ldr	r3, [sp, #92]	; 0x5c
   11750:	cmp	r2, r0
   11754:	bhi	117a4 <__assert_fail@plt+0x81c>
   11758:	add	fp, r8, #8192	; 0x2000
   1175c:	ldr	r2, [r9, #4]
   11760:	add	r4, r4, r1
   11764:	ldr	r0, [fp, #4]
   11768:	add	r3, r2, r0
   1176c:	cmp	r3, #8192	; 0x2000
   11770:	bcs	117b4 <__assert_fail@plt+0x82c>
   11774:	mov	r1, r6
   11778:	add	r0, r8, r0
   1177c:	bl	10d54 <memcpy@plt>
   11780:	ldr	r2, [r9, #4]
   11784:	ldr	r3, [fp, #4]
   11788:	add	r3, r3, r2
   1178c:	ldr	r2, [r9, #8]
   11790:	str	r3, [fp, #4]
   11794:	ldr	r3, [fp, #8]
   11798:	add	r3, r3, r2
   1179c:	str	r3, [fp, #8]
   117a0:	b	116b0 <__assert_fail@plt+0x728>
   117a4:	add	r1, r1, #1
   117a8:	add	r0, r0, #1
   117ac:	str	r1, [fp, #8]
   117b0:	b	11734 <__assert_fail@plt+0x7ac>
   117b4:	add	r9, r7, #8192	; 0x2000
   117b8:	ldrd	r0, [sp, #16]
   117bc:	mov	r3, #0
   117c0:	ldr	r2, [r9, #8]
   117c4:	str	r6, [fp, #12]
   117c8:	cmp	r1, r3
   117cc:	sub	r2, r4, r2
   117d0:	cmpeq	r0, r2
   117d4:	bcs	1180c <__assert_fail@plt+0x884>
   117d8:	ldr	r1, [r9, #4]
   117dc:	mov	r0, r7
   117e0:	mov	r8, r6
   117e4:	mov	r6, r7
   117e8:	ldrd	r2, [sp, #40]	; 0x28
   117ec:	adds	r2, r2, r1
   117f0:	adc	r3, r3, #0
   117f4:	strd	r2, [sp, #40]	; 0x28
   117f8:	bl	1213c <__assert_fail@plt+0x11b4>
   117fc:	ldr	r3, [r9, #8]
   11800:	ldr	r7, [r9, #12]
   11804:	sub	r4, r4, r3
   11808:	b	116b0 <__assert_fail@plt+0x728>
   1180c:	movw	r0, #8208	; 0x2010
   11810:	mov	r8, r6
   11814:	bl	14920 <__assert_fail@plt+0x3998>
   11818:	mov	r6, r0
   1181c:	b	116b0 <__assert_fail@plt+0x728>
   11820:	mov	r0, r6
   11824:	bl	12bc0 <__assert_fail@plt+0x1c38>
   11828:	cmn	fp, #1
   1182c:	bne	118b4 <__assert_fail@plt+0x92c>
   11830:	bl	10ea4 <__errno_location@plt>
   11834:	ldr	r4, [r0]
   11838:	mov	r2, #5
   1183c:	mov	r0, #0
   11840:	ldr	r1, [pc, #1768]	; 11f30 <__assert_fail@plt+0xfa8>
   11844:	bl	10d90 <dcgettext@plt>
   11848:	mov	r6, r0
   1184c:	mov	r1, r5
   11850:	mov	r0, #4
   11854:	bl	141bc <__assert_fail@plt+0x3234>
   11858:	mov	r3, r0
   1185c:	mov	r1, r4
   11860:	mov	r2, r6
   11864:	mov	r0, #0
   11868:	mov	r4, #0
   1186c:	bl	10e14 <error@plt>
   11870:	cmp	r7, #0
   11874:	bne	119c0 <__assert_fail@plt+0xa38>
   11878:	ldrd	r0, [sp, #32]
   1187c:	mvn	r3, #0
   11880:	mvn	r2, #0
   11884:	cmp	r1, r3
   11888:	cmpeq	r0, r2
   1188c:	strne	r7, [sp]
   11890:	strne	r5, [sp, #4]
   11894:	beq	11534 <__assert_fail@plt+0x5ac>
   11898:	ldr	r0, [sp, #28]
   1189c:	ldrd	r2, [sp, #40]	; 0x28
   118a0:	bl	12090 <__assert_fail@plt+0x1108>
   118a4:	cmp	r0, #0
   118a8:	sbcs	r3, r1, #0
   118ac:	bge	11534 <__assert_fail@plt+0x5ac>
   118b0:	b	11530 <__assert_fail@plt+0x5a8>
   118b4:	add	r3, r8, #8192	; 0x2000
   118b8:	ldr	r2, [r3, #4]
   118bc:	cmp	r2, #0
   118c0:	beq	118ec <__assert_fail@plt+0x964>
   118c4:	add	r8, r8, r2
   118c8:	ldr	r2, [pc, #1528]	; 11ec8 <__assert_fail@plt+0xf40>
   118cc:	ldrb	r1, [r8, #-1]
   118d0:	ldrb	r2, [r2]
   118d4:	cmp	r1, r2
   118d8:	beq	118ec <__assert_fail@plt+0x964>
   118dc:	ldr	r2, [r3, #8]
   118e0:	add	r4, r4, #1
   118e4:	add	r2, r2, #1
   118e8:	str	r2, [r3, #8]
   118ec:	mov	r8, r7
   118f0:	b	1191c <__assert_fail@plt+0x994>
   118f4:	ldr	r1, [r6, #4]
   118f8:	mov	r0, r8
   118fc:	ldrd	r2, [sp, #40]	; 0x28
   11900:	adds	r2, r2, r1
   11904:	adc	r3, r3, #0
   11908:	strd	r2, [sp, #40]	; 0x28
   1190c:	bl	1213c <__assert_fail@plt+0x11b4>
   11910:	ldr	r3, [r6, #8]
   11914:	ldr	r8, [r6, #12]
   11918:	sub	r4, r4, r3
   1191c:	add	r6, r8, #8192	; 0x2000
   11920:	ldrd	r0, [sp, #16]
   11924:	mov	r3, #0
   11928:	ldr	r2, [r6, #8]
   1192c:	cmp	r1, r3
   11930:	sub	r2, r4, r2
   11934:	cmpeq	r0, r2
   11938:	bcc	118f4 <__assert_fail@plt+0x96c>
   1193c:	mov	r3, #0
   11940:	cmp	r1, r3
   11944:	cmpeq	r0, r4
   11948:	bcs	119a0 <__assert_fail@plt+0xa18>
   1194c:	ldr	r3, [sp, #52]	; 0x34
   11950:	mov	r0, r8
   11954:	ldr	r9, [r6, #4]
   11958:	sub	r4, r4, r3
   1195c:	ldr	r3, [pc, #1380]	; 11ec8 <__assert_fail@plt+0xf40>
   11960:	add	r9, r8, r9
   11964:	ldrb	sl, [r3]
   11968:	cmp	r4, #0
   1196c:	beq	11984 <__assert_fail@plt+0x9fc>
   11970:	sub	r2, r9, r0
   11974:	mov	r1, sl
   11978:	bl	10ef8 <memchr@plt>
   1197c:	cmp	r0, #0
   11980:	bne	119a8 <__assert_fail@plt+0xa20>
   11984:	ldrd	r2, [sp, #40]	; 0x28
   11988:	sub	r1, r0, r8
   1198c:	mov	r0, r8
   11990:	adds	r2, r2, r1
   11994:	adc	r3, r3, r1, asr #31
   11998:	strd	r2, [sp, #40]	; 0x28
   1199c:	bl	1213c <__assert_fail@plt+0x11b4>
   119a0:	ldr	r4, [sp, #24]
   119a4:	b	11870 <__assert_fail@plt+0x8e8>
   119a8:	ldr	r3, [r6, #8]
   119ac:	add	r0, r0, #1
   119b0:	sub	r4, r4, #1
   119b4:	add	r3, r3, #1
   119b8:	str	r3, [r6, #8]
   119bc:	b	11968 <__assert_fail@plt+0x9e0>
   119c0:	add	r3, r7, #8192	; 0x2000
   119c4:	mov	r0, r7
   119c8:	ldr	r6, [r3, #12]
   119cc:	bl	12bc0 <__assert_fail@plt+0x1c38>
   119d0:	mov	r7, r6
   119d4:	b	11870 <__assert_fail@plt+0x8e8>
   119d8:	ldrd	r0, [sp, #32]
   119dc:	cmp	r0, r2
   119e0:	sbcs	r1, r1, r3
   119e4:	movge	r0, #1
   119e8:	bge	11a08 <__assert_fail@plt+0xa80>
   119ec:	strd	r2, [sp, #8]
   119f0:	mov	r0, r5
   119f4:	ldr	r1, [sp, #28]
   119f8:	ldrd	r2, [sp, #32]
   119fc:	strd	r2, [sp]
   11a00:	ldrd	r2, [sp, #16]
   11a04:	bl	12500 <__assert_fail@plt+0x1578>
   11a08:	and	r4, r0, #1
   11a0c:	b	11534 <__assert_fail@plt+0x5ac>
   11a10:	cmp	r4, #0
   11a14:	bne	11a38 <__assert_fail@plt+0xab0>
   11a18:	ldr	r0, [sp, #192]	; 0xc0
   11a1c:	sub	r1, r0, #1
   11a20:	cmp	r1, #536870912	; 0x20000000
   11a24:	movcs	r0, #512	; 0x200
   11a28:	asr	r1, r0, #31
   11a2c:	cmp	r0, r2
   11a30:	sbcs	r1, r1, r3
   11a34:	blt	11e00 <__assert_fail@plt+0xe78>
   11a38:	ldrd	r2, [sp, #32]
   11a3c:	ldrd	r0, [sp, #96]	; 0x60
   11a40:	strd	r2, [sp, #40]	; 0x28
   11a44:	mov	r3, #0
   11a48:	mvn	r2, #0
   11a4c:	cmp	r1, r3
   11a50:	cmpeq	r0, r2
   11a54:	bls	11a8c <__assert_fail@plt+0xb04>
   11a58:	mov	r2, #5
   11a5c:	ldr	r1, [pc, #1232]	; 11f34 <__assert_fail@plt+0xfac>
   11a60:	mov	r0, #0
   11a64:	bl	10d90 <dcgettext@plt>
   11a68:	mov	r4, r0
   11a6c:	add	r2, sp, #112	; 0x70
   11a70:	ldrd	r0, [sp, #16]
   11a74:	bl	12d38 <__assert_fail@plt+0x1db0>
   11a78:	mov	r3, r0
   11a7c:	mov	r2, r4
   11a80:	mov	r1, #0
   11a84:	mov	r0, #1
   11a88:	bl	10e14 <error@plt>
   11a8c:	ldr	r3, [sp, #52]	; 0x34
   11a90:	cmp	r3, #1048576	; 0x100000
   11a94:	bhi	11ce8 <__assert_fail@plt+0xd60>
   11a98:	add	r7, r3, #8192	; 0x2000
   11a9c:	mov	r0, #2
   11aa0:	mov	r1, r7
   11aa4:	mov	r8, #0
   11aa8:	bl	149e0 <__assert_fail@plt+0x3a58>
   11aac:	ldr	r4, [sp, #48]	; 0x30
   11ab0:	add	r3, r0, r7
   11ab4:	mov	r9, r0
   11ab8:	str	r0, [sp, #112]	; 0x70
   11abc:	str	r3, [sp, #116]	; 0x74
   11ac0:	add	r3, sp, #240	; 0xf0
   11ac4:	mov	r2, r7
   11ac8:	ldr	r0, [sp, #28]
   11acc:	add	r3, r3, r8, lsl #2
   11ad0:	ldr	sl, [r3, #-128]	; 0xffffff80
   11ad4:	mov	r1, sl
   11ad8:	bl	12c10 <__assert_fail@plt+0x1c88>
   11adc:	cmp	r7, r0
   11ae0:	mov	fp, r0
   11ae4:	bls	11b84 <__assert_fail@plt+0xbfc>
   11ae8:	bl	10ea4 <__errno_location@plt>
   11aec:	ldr	r6, [r0]
   11af0:	cmp	r6, #0
   11af4:	beq	11b5c <__assert_fail@plt+0xbd4>
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #1068]	; 11f30 <__assert_fail@plt+0xfa8>
   11b00:	mov	r0, #0
   11b04:	bl	10d90 <dcgettext@plt>
   11b08:	mov	r4, r0
   11b0c:	mov	r1, r5
   11b10:	mov	r0, #4
   11b14:	bl	141bc <__assert_fail@plt+0x3234>
   11b18:	mov	r3, r0
   11b1c:	mov	r2, r4
   11b20:	mov	r1, r6
   11b24:	mov	r0, #0
   11b28:	mov	r4, #0
   11b2c:	bl	10e14 <error@plt>
   11b30:	mov	r0, r9
   11b34:	bl	12bc0 <__assert_fail@plt+0x1c38>
   11b38:	ldrd	r0, [sp, #32]
   11b3c:	mvn	r3, #0
   11b40:	mvn	r2, #0
   11b44:	cmp	r1, r3
   11b48:	cmpeq	r0, r2
   11b4c:	beq	11534 <__assert_fail@plt+0x5ac>
   11b50:	mov	r3, #0
   11b54:	stm	sp, {r3, r5}
   11b58:	b	11898 <__assert_fail@plt+0x910>
   11b5c:	ldr	r3, [sp, #52]	; 0x34
   11b60:	cmp	r3, fp
   11b64:	bcc	11ea4 <__assert_fail@plt+0xf1c>
   11b68:	cmp	r4, #0
   11b6c:	subeq	r6, r3, fp
   11b70:	beq	11eac <__assert_fail@plt+0xf24>
   11b74:	cmp	r4, #0
   11b78:	eor	r8, r8, #1
   11b7c:	beq	11ac0 <__assert_fail@plt+0xb38>
   11b80:	b	11b30 <__assert_fail@plt+0xba8>
   11b84:	cmp	r4, #0
   11b88:	movne	r4, #0
   11b8c:	bne	11bc4 <__assert_fail@plt+0xc3c>
   11b90:	mov	r6, r4
   11b94:	ldr	r3, [sp, #52]	; 0x34
   11b98:	sub	r1, r3, r6
   11b9c:	ldrd	r2, [sp, #40]	; 0x28
   11ba0:	adds	r2, r2, r1
   11ba4:	adc	r3, r3, #0
   11ba8:	strd	r2, [sp, #40]	; 0x28
   11bac:	eor	r3, r8, #1
   11bb0:	add	r2, sp, #240	; 0xf0
   11bb4:	add	r3, r2, r3, lsl #2
   11bb8:	ldr	r0, [r3, #-128]	; 0xffffff80
   11bbc:	add	r0, r0, #8192	; 0x2000
   11bc0:	bl	1213c <__assert_fail@plt+0x11b4>
   11bc4:	ldr	r3, [sp, #52]	; 0x34
   11bc8:	cmp	r3, fp
   11bcc:	bcs	11b74 <__assert_fail@plt+0xbec>
   11bd0:	ldr	r3, [sp, #52]	; 0x34
   11bd4:	mov	r0, sl
   11bd8:	sub	r1, fp, r3
   11bdc:	ldrd	r2, [sp, #40]	; 0x28
   11be0:	adds	r2, r2, r1
   11be4:	adc	r3, r3, #0
   11be8:	strd	r2, [sp, #40]	; 0x28
   11bec:	bl	1213c <__assert_fail@plt+0x11b4>
   11bf0:	b	11b74 <__assert_fail@plt+0xbec>
   11bf4:	cmp	r9, sl
   11bf8:	mov	r3, sl
   11bfc:	bne	11c30 <__assert_fail@plt+0xca8>
   11c00:	cmp	r9, #0
   11c04:	bne	11d04 <__assert_fail@plt+0xd7c>
   11c08:	ldr	r3, [sp, #64]	; 0x40
   11c0c:	cmp	r3, #16
   11c10:	movcc	r9, r3
   11c14:	movcs	r9, #16
   11c18:	mov	r0, r6
   11c1c:	mov	r2, #4
   11c20:	mov	r1, r9
   11c24:	bl	14994 <__assert_fail@plt+0x3a0c>
   11c28:	mov	r6, r0
   11c2c:	mov	r3, sl
   11c30:	cmp	r7, #0
   11c34:	mov	sl, r8
   11c38:	add	r4, r6, r3, lsl #2
   11c3c:	bne	11c5c <__assert_fail@plt+0xcd4>
   11c40:	mov	r0, #8192	; 0x2000
   11c44:	str	r3, [sp, #92]	; 0x5c
   11c48:	bl	14920 <__assert_fail@plt+0x3998>
   11c4c:	ldr	r3, [sp, #92]	; 0x5c
   11c50:	add	r2, r3, #1
   11c54:	str	r0, [r6, r3, lsl #2]
   11c58:	str	r2, [sp, #92]	; 0x5c
   11c5c:	mov	r2, #8192	; 0x2000
   11c60:	ldr	r1, [r4]
   11c64:	str	r3, [sp, #108]	; 0x6c
   11c68:	ldr	r0, [sp, #28]
   11c6c:	bl	12c10 <__assert_fail@plt+0x1c88>
   11c70:	cmp	r0, #8192	; 0x2000
   11c74:	mov	fp, r0
   11c78:	ldr	r3, [sp, #108]	; 0x6c
   11c7c:	bcs	11d18 <__assert_fail@plt+0xd90>
   11c80:	bl	10ea4 <__errno_location@plt>
   11c84:	ldr	r4, [r0]
   11c88:	ldr	r3, [sp, #108]	; 0x6c
   11c8c:	cmp	r4, #0
   11c90:	beq	11dbc <__assert_fail@plt+0xe34>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #656]	; 11f30 <__assert_fail@plt+0xfa8>
   11c9c:	mov	r0, #0
   11ca0:	bl	10d90 <dcgettext@plt>
   11ca4:	mov	r7, r0
   11ca8:	mov	r1, r5
   11cac:	mov	r0, #4
   11cb0:	bl	141bc <__assert_fail@plt+0x3234>
   11cb4:	mov	r3, r0
   11cb8:	mov	r1, r4
   11cbc:	mov	r2, r7
   11cc0:	mov	r0, #0
   11cc4:	mov	r4, #0
   11cc8:	bl	10e14 <error@plt>
   11ccc:	ldr	r3, [sp, #92]	; 0x5c
   11cd0:	mov	r7, r6
   11cd4:	add	fp, r6, r3, lsl #2
   11cd8:	cmp	r7, fp
   11cdc:	bne	11df4 <__assert_fail@plt+0xe6c>
   11ce0:	mov	r0, r6
   11ce4:	b	11b34 <__assert_fail@plt+0xbac>
   11ce8:	mov	r7, #0
   11cec:	mov	r8, #1
   11cf0:	mov	r6, r7
   11cf4:	mov	r9, r7
   11cf8:	mov	sl, r7
   11cfc:	str	r7, [sp, #92]	; 0x5c
   11d00:	b	11c00 <__assert_fail@plt+0xc78>
   11d04:	ldr	r3, [sp, #104]	; 0x68
   11d08:	cmp	r3, r9
   11d0c:	lslcs	r9, r9, #1
   11d10:	ldrcc	r9, [sp, #64]	; 0x40
   11d14:	b	11c18 <__assert_fail@plt+0xc90>
   11d18:	mov	r4, #0
   11d1c:	ldr	r2, [sp, #80]	; 0x50
   11d20:	cmp	r2, r3
   11d24:	orreq	r7, r7, #1
   11d28:	cmp	r7, #0
   11d2c:	beq	11d4c <__assert_fail@plt+0xdc4>
   11d30:	ldrd	r2, [sp, #40]	; 0x28
   11d34:	mov	r1, fp
   11d38:	ldr	r0, [r6, r8, lsl #2]
   11d3c:	adds	r2, r2, fp
   11d40:	adc	r3, r3, #0
   11d44:	strd	r2, [sp, #40]	; 0x28
   11d48:	bl	1213c <__assert_fail@plt+0x11b4>
   11d4c:	ldr	r3, [sp, #64]	; 0x40
   11d50:	add	r8, r8, #1
   11d54:	cmp	r4, #0
   11d58:	ldr	r2, [sp, #64]	; 0x40
   11d5c:	udiv	r3, r8, r3
   11d60:	mls	r8, r2, r3, r8
   11d64:	beq	11bf4 <__assert_fail@plt+0xc6c>
   11d68:	cmp	r7, #0
   11d6c:	beq	11dc4 <__assert_fail@plt+0xe3c>
   11d70:	ldrd	r2, [sp, #40]	; 0x28
   11d74:	rsb	r1, fp, #8192	; 0x2000
   11d78:	ldr	r0, [sp, #68]	; 0x44
   11d7c:	adds	r2, r2, r0
   11d80:	ldr	r0, [r6, sl, lsl #2]
   11d84:	adc	r3, r3, #0
   11d88:	strd	r2, [sp, #40]	; 0x28
   11d8c:	ldr	r3, [sp, #68]	; 0x44
   11d90:	add	r0, r0, fp
   11d94:	cmp	r3, r1
   11d98:	movcc	r1, r3
   11d9c:	bcc	11db0 <__assert_fail@plt+0xe28>
   11da0:	bl	1213c <__assert_fail@plt+0x11b4>
   11da4:	ldr	r3, [sp, #76]	; 0x4c
   11da8:	ldr	r0, [r6, r8, lsl #2]
   11dac:	sub	r1, fp, r3
   11db0:	bl	1213c <__assert_fail@plt+0x11b4>
   11db4:	mov	r4, r7
   11db8:	b	11ccc <__assert_fail@plt+0xd44>
   11dbc:	ldr	r4, [sp, #48]	; 0x30
   11dc0:	b	11d1c <__assert_fail@plt+0xd94>
   11dc4:	ldr	r3, [sp, #80]	; 0x50
   11dc8:	cmp	r3, sl
   11dcc:	bne	11ccc <__assert_fail@plt+0xd44>
   11dd0:	ldr	r3, [sp, #76]	; 0x4c
   11dd4:	ldr	r0, [r6, r8, lsl #2]
   11dd8:	sub	r1, fp, r3
   11ddc:	ldrd	r2, [sp, #40]	; 0x28
   11de0:	adds	r2, r2, r1
   11de4:	adc	r3, r3, #0
   11de8:	strd	r2, [sp, #40]	; 0x28
   11dec:	bl	1213c <__assert_fail@plt+0x11b4>
   11df0:	b	11ccc <__assert_fail@plt+0xd44>
   11df4:	ldr	r0, [r7], #4
   11df8:	bl	12bc0 <__assert_fail@plt+0x1c38>
   11dfc:	b	11cd8 <__assert_fail@plt+0xd50>
   11e00:	ldr	r1, [sp, #32]
   11e04:	subs	r1, r2, r1
   11e08:	str	r1, [sp, #56]	; 0x38
   11e0c:	ldr	r1, [sp, #36]	; 0x24
   11e10:	sbc	r3, r3, r1
   11e14:	str	r3, [sp, #60]	; 0x3c
   11e18:	ldrd	r2, [sp, #56]	; 0x38
   11e1c:	cmp	r2, #0
   11e20:	sbcs	r3, r3, #0
   11e24:	blt	11e3c <__assert_fail@plt+0xeb4>
   11e28:	ldrd	r2, [sp, #16]
   11e2c:	ldrd	r0, [sp, #56]	; 0x38
   11e30:	cmp	r3, r1
   11e34:	cmpeq	r2, r0
   11e38:	bcc	11e44 <__assert_fail@plt+0xebc>
   11e3c:	ldr	r4, [sp, #48]	; 0x30
   11e40:	b	11534 <__assert_fail@plt+0x5ac>
   11e44:	ldr	r2, [sp, #16]
   11e48:	ldr	r1, [sp, #20]
   11e4c:	ldr	r3, [sp, #56]	; 0x38
   11e50:	ldr	r0, [sp, #28]
   11e54:	subs	r2, r3, r2
   11e58:	ldr	r3, [sp, #60]	; 0x3c
   11e5c:	sbc	r3, r3, r1
   11e60:	bl	121b4 <__assert_fail@plt+0x122c>
   11e64:	cmp	r0, #0
   11e68:	beq	11e3c <__assert_fail@plt+0xeb4>
   11e6c:	mov	r1, r5
   11e70:	bl	1246c <__assert_fail@plt+0x14e4>
   11e74:	b	11534 <__assert_fail@plt+0x5ac>
   11e78:	ldr	r3, [sp, #24]
   11e7c:	mov	r0, r5
   11e80:	ldr	r1, [sp, #28]
   11e84:	cmp	r3, #0
   11e88:	ldrd	r2, [sp, #16]
   11e8c:	beq	11e9c <__assert_fail@plt+0xf14>
   11e90:	bl	12248 <__assert_fail@plt+0x12c0>
   11e94:	mov	r4, r0
   11e98:	b	11534 <__assert_fail@plt+0x5ac>
   11e9c:	bl	123a0 <__assert_fail@plt+0x1418>
   11ea0:	b	11e94 <__assert_fail@plt+0xf0c>
   11ea4:	cmp	r4, #0
   11ea8:	bne	11bd0 <__assert_fail@plt+0xc48>
   11eac:	ldr	r4, [sp, #48]	; 0x30
   11eb0:	b	11b94 <__assert_fail@plt+0xc0c>
   11eb4:	ldr	r3, [sp, #72]	; 0x48
   11eb8:	eor	r0, r3, #1
   11ebc:	add	sp, sp, #244	; 0xf4
   11ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ec4:	andeq	r6, r1, r9
   11ec8:	andeq	r7, r2, r5, ror #2
   11ecc:	andeq	r6, r1, sl
   11ed0:	andeq	r5, r1, r7, ror #30
   11ed4:	andeq	r2, r1, ip, ror #21
   11ed8:	ldrdeq	r5, [r1], -r8
   11edc:	andeq	r7, r2, r0, ror #2
   11ee0:	andeq	r6, r1, r2, lsr #32
   11ee4:	andeq	r6, r1, r0, asr #32
   11ee8:	andeq	r7, r2, ip, asr r1
   11eec:	andeq	r5, r1, r3, ror #30
   11ef0:	andeq	r6, r1, sp, asr #32
   11ef4:	andeq	r5, r1, r7, asr #20
   11ef8:	strdeq	r7, [r2], -ip
   11efc:	andeq	r6, r1, sp, asr r0
   11f00:	andeq	r7, r2, r0, asr r1
   11f04:	muleq	r1, r0, r9
   11f08:	andeq	r6, r1, pc, rrx
   11f0c:	ldrdeq	r5, [r1], -r0
   11f10:	strdeq	r6, [r1], -r4
   11f14:	andeq	r6, r1, r6, ror r0
   11f18:	strdeq	r7, [r2], -r8
   11f1c:	andeq	r6, r1, r8
   11f20:	andeq	r6, r1, r0, lsr #1
   11f24:	andeq	r6, r1, lr, lsr #1
   11f28:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11f2c:	andeq	r6, r1, r5, lsl #1
   11f30:	andeq	r5, r1, r9, lsl sl
   11f34:	strheq	r6, [r1], -lr
   11f38:	mov	fp, #0
   11f3c:	mov	lr, #0
   11f40:	pop	{r1}		; (ldr r1, [sp], #4)
   11f44:	mov	r2, sp
   11f48:	push	{r2}		; (str r2, [sp, #-4]!)
   11f4c:	push	{r0}		; (str r0, [sp, #-4]!)
   11f50:	ldr	ip, [pc, #16]	; 11f68 <__assert_fail@plt+0xfe0>
   11f54:	push	{ip}		; (str ip, [sp, #-4]!)
   11f58:	ldr	r0, [pc, #12]	; 11f6c <__assert_fail@plt+0xfe4>
   11f5c:	ldr	r3, [pc, #12]	; 11f70 <__assert_fail@plt+0xfe8>
   11f60:	bl	10e38 <__libc_start_main@plt>
   11f64:	bl	10f70 <abort@plt>
   11f68:	andeq	r5, r1, r0, ror #16
   11f6c:	andeq	r0, r1, ip, lsr #31
   11f70:	andeq	r5, r1, r0, lsl #16
   11f74:	ldr	r3, [pc, #20]	; 11f90 <__assert_fail@plt+0x1008>
   11f78:	ldr	r2, [pc, #20]	; 11f94 <__assert_fail@plt+0x100c>
   11f7c:	add	r3, pc, r3
   11f80:	ldr	r2, [r3, r2]
   11f84:	cmp	r2, #0
   11f88:	bxeq	lr
   11f8c:	b	10e50 <__gmon_start__@plt>
   11f90:	andeq	r5, r1, ip, ror r0
   11f94:	andeq	r0, r0, ip, ror #1
   11f98:	ldr	r0, [pc, #24]	; 11fb8 <__assert_fail@plt+0x1030>
   11f9c:	ldr	r3, [pc, #24]	; 11fbc <__assert_fail@plt+0x1034>
   11fa0:	cmp	r3, r0
   11fa4:	bxeq	lr
   11fa8:	ldr	r3, [pc, #16]	; 11fc0 <__assert_fail@plt+0x1038>
   11fac:	cmp	r3, #0
   11fb0:	bxeq	lr
   11fb4:	bx	r3
   11fb8:	andeq	r7, r2, r4, asr #2
   11fbc:	andeq	r7, r2, r4, asr #2
   11fc0:	andeq	r0, r0, r0
   11fc4:	ldr	r0, [pc, #36]	; 11ff0 <__assert_fail@plt+0x1068>
   11fc8:	ldr	r1, [pc, #36]	; 11ff4 <__assert_fail@plt+0x106c>
   11fcc:	sub	r1, r1, r0
   11fd0:	asr	r1, r1, #2
   11fd4:	add	r1, r1, r1, lsr #31
   11fd8:	asrs	r1, r1, #1
   11fdc:	bxeq	lr
   11fe0:	ldr	r3, [pc, #16]	; 11ff8 <__assert_fail@plt+0x1070>
   11fe4:	cmp	r3, #0
   11fe8:	bxeq	lr
   11fec:	bx	r3
   11ff0:	andeq	r7, r2, r4, asr #2
   11ff4:	andeq	r7, r2, r4, asr #2
   11ff8:	andeq	r0, r0, r0
   11ffc:	push	{r4, lr}
   12000:	ldr	r4, [pc, #24]	; 12020 <__assert_fail@plt+0x1098>
   12004:	ldrb	r3, [r4]
   12008:	cmp	r3, #0
   1200c:	popne	{r4, pc}
   12010:	bl	11f98 <__assert_fail@plt+0x1010>
   12014:	mov	r3, #1
   12018:	strb	r3, [r4]
   1201c:	pop	{r4, pc}
   12020:	andeq	r7, r2, r4, ror #2
   12024:	b	11fc4 <__assert_fail@plt+0x103c>
   12028:	cmp	r0, #0
   1202c:	push	{r4, lr}
   12030:	mov	r2, #5
   12034:	sub	sp, sp, #24
   12038:	mov	r4, r1
   1203c:	movne	r0, #0
   12040:	ldrne	r1, [pc, #60]	; 12084 <__assert_fail@plt+0x10fc>
   12044:	ldreq	r1, [pc, #60]	; 12088 <__assert_fail@plt+0x1100>
   12048:	bl	10d90 <dcgettext@plt>
   1204c:	mov	r3, #0
   12050:	mvn	r2, #0
   12054:	str	r0, [sp, #12]
   12058:	mov	r0, r4
   1205c:	str	r3, [sp, #16]
   12060:	ldr	r3, [pc, #36]	; 1208c <__assert_fail@plt+0x1104>
   12064:	str	r3, [sp, #8]
   12068:	mvn	r3, #0
   1206c:	strd	r2, [sp]
   12070:	mov	r2, #0
   12074:	mov	r3, #0
   12078:	bl	14d0c <__assert_fail@plt+0x3d84>
   1207c:	add	sp, sp, #24
   12080:	pop	{r4, pc}
   12084:	andeq	r5, r1, r8, ror r9
   12088:	muleq	r1, r0, r9
   1208c:	andeq	r5, r1, r8, lsr #19
   12090:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12094:	sub	sp, sp, #32
   12098:	mov	r9, r3
   1209c:	mov	r8, r2
   120a0:	ldr	r6, [sp, #64]	; 0x40
   120a4:	str	r6, [sp]
   120a8:	bl	10dd8 <lseek64@plt>
   120ac:	cmp	r0, #0
   120b0:	mov	r4, r0
   120b4:	sbcs	r3, r1, #0
   120b8:	mov	r5, r1
   120bc:	bge	12124 <__assert_fail@plt+0x119c>
   120c0:	bl	10ea4 <__errno_location@plt>
   120c4:	ldr	r3, [pc, #104]	; 12134 <__assert_fail@plt+0x11ac>
   120c8:	cmp	r6, #0
   120cc:	mov	r2, #5
   120d0:	ldr	r1, [pc, #96]	; 12138 <__assert_fail@plt+0x11b0>
   120d4:	ldr	r7, [r0]
   120d8:	mov	r0, #0
   120dc:	movne	r1, r3
   120e0:	bl	10d90 <dcgettext@plt>
   120e4:	mov	r6, r0
   120e8:	mov	r1, #3
   120ec:	ldr	r2, [sp, #68]	; 0x44
   120f0:	mov	r0, #0
   120f4:	bl	14260 <__assert_fail@plt+0x32d8>
   120f8:	mov	sl, r0
   120fc:	add	r2, sp, #8
   12100:	mov	r1, r9
   12104:	mov	r0, r8
   12108:	bl	12c70 <__assert_fail@plt+0x1ce8>
   1210c:	mov	r3, sl
   12110:	mov	r2, r6
   12114:	str	r0, [sp]
   12118:	mov	r1, r7
   1211c:	mov	r0, #0
   12120:	bl	10e14 <error@plt>
   12124:	mov	r0, r4
   12128:	mov	r1, r5
   1212c:	add	sp, sp, #32
   12130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12134:	ldrdeq	r5, [r1], -r2
   12138:			; <UNDEFINED> instruction: 0x000159b5
   1213c:	push	{r4, r5, r6, lr}
   12140:	subs	r4, r1, #0
   12144:	popeq	{r4, r5, r6, pc}
   12148:	mov	r2, r4
   1214c:	mov	r1, #1
   12150:	ldr	r5, [pc, #80]	; 121a8 <__assert_fail@plt+0x1220>
   12154:	ldr	r3, [r5]
   12158:	bl	10d6c <fwrite_unlocked@plt>
   1215c:	cmp	r0, r4
   12160:	popcs	{r4, r5, r6, pc}
   12164:	ldr	r0, [r5]
   12168:	bl	10f40 <clearerr_unlocked@plt>
   1216c:	bl	10ea4 <__errno_location@plt>
   12170:	ldr	r4, [r0]
   12174:	mov	r2, #5
   12178:	mov	r0, #0
   1217c:	ldr	r1, [pc, #40]	; 121ac <__assert_fail@plt+0x1224>
   12180:	bl	10d90 <dcgettext@plt>
   12184:	mov	r5, r0
   12188:	ldr	r1, [pc, #32]	; 121b0 <__assert_fail@plt+0x1228>
   1218c:	mov	r0, #4
   12190:	bl	141bc <__assert_fail@plt+0x3234>
   12194:	mov	r3, r0
   12198:	mov	r2, r5
   1219c:	mov	r1, r4
   121a0:	mov	r0, #1
   121a4:	bl	10e14 <error@plt>
   121a8:	andeq	r7, r2, ip, asr r1
   121ac:	strdeq	r5, [r1], -r8
   121b0:	andeq	r5, r1, r9, lsl #20
   121b4:	push	{r4, r5, r6, r7, lr}
   121b8:	sub	sp, sp, #8192	; 0x2000
   121bc:	mov	r5, r0
   121c0:	sub	sp, sp, #4
   121c4:	mov	r6, r2
   121c8:	mov	r7, r3
   121cc:	cmp	r7, #0
   121d0:	mov	r2, r6
   121d4:	cmpeq	r6, #8192	; 0x2000
   121d8:	mov	r1, sp
   121dc:	movhi	r2, #8192	; 0x2000
   121e0:	mov	r0, r5
   121e4:	bl	143ac <__assert_fail@plt+0x3424>
   121e8:	cmn	r0, #1
   121ec:	mov	r1, r0
   121f0:	beq	12238 <__assert_fail@plt+0x12b0>
   121f4:	subs	r6, r6, r0
   121f8:	sbc	r7, r7, #0
   121fc:	orrs	r3, r6, r7
   12200:	movne	r4, #1
   12204:	moveq	r4, #0
   12208:	cmp	r0, #0
   1220c:	movne	r4, #0
   12210:	cmp	r4, #0
   12214:	bne	12240 <__assert_fail@plt+0x12b8>
   12218:	mov	r0, sp
   1221c:	bl	1213c <__assert_fail@plt+0x11b4>
   12220:	orrs	r3, r6, r7
   12224:	bne	121cc <__assert_fail@plt+0x1244>
   12228:	mov	r0, r4
   1222c:	add	sp, sp, #8192	; 0x2000
   12230:	add	sp, sp, #4
   12234:	pop	{r4, r5, r6, r7, pc}
   12238:	mov	r0, #1
   1223c:	b	1222c <__assert_fail@plt+0x12a4>
   12240:	mov	r0, #2
   12244:	b	1222c <__assert_fail@plt+0x12a4>
   12248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1224c:	sub	sp, sp, #8256	; 0x2040
   12250:	mov	sl, r0
   12254:	sub	sp, sp, #52	; 0x34
   12258:	mov	r9, r1
   1225c:	mov	r6, r2
   12260:	mov	r7, r3
   12264:	ldr	fp, [pc, #300]	; 12398 <__assert_fail@plt+0x1410>
   12268:	orrs	r3, r6, r7
   1226c:	beq	122dc <__assert_fail@plt+0x1354>
   12270:	mov	r2, #8192	; 0x2000
   12274:	add	r1, sp, #112	; 0x70
   12278:	mov	r0, r9
   1227c:	bl	143ac <__assert_fail@plt+0x3424>
   12280:	cmn	r0, #1
   12284:	bne	122d4 <__assert_fail@plt+0x134c>
   12288:	bl	10ea4 <__errno_location@plt>
   1228c:	ldr	r4, [r0]
   12290:	mov	r2, #5
   12294:	mov	r0, #0
   12298:	ldr	r1, [pc, #252]	; 1239c <__assert_fail@plt+0x1414>
   1229c:	bl	10d90 <dcgettext@plt>
   122a0:	mov	r5, r0
   122a4:	mov	r1, sl
   122a8:	mov	r0, #4
   122ac:	bl	141bc <__assert_fail@plt+0x3234>
   122b0:	mov	r3, r0
   122b4:	mov	r2, r5
   122b8:	mov	r0, #0
   122bc:	mov	r1, r4
   122c0:	bl	10e14 <error@plt>
   122c4:	mov	r0, #0
   122c8:	add	sp, sp, #8256	; 0x2040
   122cc:	add	sp, sp, #52	; 0x34
   122d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122d4:	cmp	r0, #0
   122d8:	bne	122e4 <__assert_fail@plt+0x135c>
   122dc:	mov	r0, #1
   122e0:	b	122c8 <__assert_fail@plt+0x1340>
   122e4:	ldrb	r2, [fp]
   122e8:	add	r3, sp, #112	; 0x70
   122ec:	mov	r8, #0
   122f0:	add	r8, r8, #1
   122f4:	ldrb	r1, [r3], #1
   122f8:	cmp	r1, r2
   122fc:	bne	1238c <__assert_fail@plt+0x1404>
   12300:	subs	r6, r6, #1
   12304:	sbc	r7, r7, #0
   12308:	orrs	r1, r6, r7
   1230c:	bne	1238c <__assert_fail@plt+0x1404>
   12310:	sub	r0, r0, r8
   12314:	mov	r3, #1
   12318:	rsbs	r4, r0, #0
   1231c:	mov	r0, r9
   12320:	sbc	r5, r5, r5
   12324:	mov	r2, r4
   12328:	str	r3, [sp]
   1232c:	mov	r3, r5
   12330:	bl	10dd8 <lseek64@plt>
   12334:	cmp	r0, #0
   12338:	sbcs	r3, r1, #0
   1233c:	bge	1237c <__assert_fail@plt+0x13f4>
   12340:	add	r1, sp, #8
   12344:	mov	r0, r9
   12348:	bl	1587c <__assert_fail@plt+0x48f4>
   1234c:	cmp	r0, #0
   12350:	bne	12364 <__assert_fail@plt+0x13dc>
   12354:	ldr	r3, [sp, #24]
   12358:	and	r3, r3, #61440	; 0xf000
   1235c:	cmp	r3, #32768	; 0x8000
   12360:	bne	1237c <__assert_fail@plt+0x13f4>
   12364:	mov	r3, #1
   12368:	mov	r2, r4
   1236c:	mov	r0, r9
   12370:	stm	sp, {r3, sl}
   12374:	mov	r3, r5
   12378:	bl	12090 <__assert_fail@plt+0x1108>
   1237c:	mov	r1, r8
   12380:	add	r0, sp, #112	; 0x70
   12384:	bl	1213c <__assert_fail@plt+0x11b4>
   12388:	b	12268 <__assert_fail@plt+0x12e0>
   1238c:	cmp	r0, r8
   12390:	bne	122f0 <__assert_fail@plt+0x1368>
   12394:	b	1237c <__assert_fail@plt+0x13f4>
   12398:	andeq	r7, r2, r5, ror #2
   1239c:	andeq	r5, r1, r9, lsl sl
   123a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   123a4:	sub	sp, sp, #8192	; 0x2000
   123a8:	mov	r8, r0
   123ac:	sub	sp, sp, #4
   123b0:	mov	r9, r1
   123b4:	mov	r4, r2
   123b8:	mov	r5, r3
   123bc:	mov	r6, #8192	; 0x2000
   123c0:	orrs	r3, r4, r5
   123c4:	beq	12448 <__assert_fail@plt+0x14c0>
   123c8:	mov	r3, #0
   123cc:	mov	r1, sp
   123d0:	cmp	r3, r5
   123d4:	mov	r0, r9
   123d8:	cmpeq	r6, r4
   123dc:	movhi	r6, r4
   123e0:	mov	r2, r6
   123e4:	bl	143ac <__assert_fail@plt+0x3424>
   123e8:	cmn	r0, #1
   123ec:	mov	r7, r0
   123f0:	bne	12440 <__assert_fail@plt+0x14b8>
   123f4:	bl	10ea4 <__errno_location@plt>
   123f8:	ldr	r4, [r0]
   123fc:	mov	r2, #5
   12400:	mov	r0, #0
   12404:	ldr	r1, [pc, #92]	; 12468 <__assert_fail@plt+0x14e0>
   12408:	bl	10d90 <dcgettext@plt>
   1240c:	mov	r5, r0
   12410:	mov	r1, r8
   12414:	mov	r0, #4
   12418:	bl	141bc <__assert_fail@plt+0x3234>
   1241c:	mov	r3, r0
   12420:	mov	r2, r5
   12424:	mov	r0, #0
   12428:	mov	r1, r4
   1242c:	bl	10e14 <error@plt>
   12430:	mov	r0, #0
   12434:	add	sp, sp, #8192	; 0x2000
   12438:	add	sp, sp, #4
   1243c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12440:	cmp	r0, #0
   12444:	bne	12450 <__assert_fail@plt+0x14c8>
   12448:	mov	r0, #1
   1244c:	b	12434 <__assert_fail@plt+0x14ac>
   12450:	mov	r1, r0
   12454:	mov	r0, sp
   12458:	bl	1213c <__assert_fail@plt+0x11b4>
   1245c:	subs	r4, r4, r7
   12460:	sbc	r5, r5, #0
   12464:	b	123c0 <__assert_fail@plt+0x1438>
   12468:	andeq	r5, r1, r9, lsl sl
   1246c:	cmp	r0, #1
   12470:	push	{r4, r5, r6, lr}
   12474:	mov	r4, r1
   12478:	beq	12488 <__assert_fail@plt+0x1500>
   1247c:	cmp	r0, #2
   12480:	beq	124c8 <__assert_fail@plt+0x1540>
   12484:	bl	10f70 <abort@plt>
   12488:	bl	10ea4 <__errno_location@plt>
   1248c:	ldr	r1, [pc, #100]	; 124f8 <__assert_fail@plt+0x1570>
   12490:	mov	r2, #5
   12494:	ldr	r5, [r0]
   12498:	mov	r0, #0
   1249c:	bl	10d90 <dcgettext@plt>
   124a0:	mov	r6, r0
   124a4:	mov	r1, r4
   124a8:	mov	r0, #4
   124ac:	bl	141bc <__assert_fail@plt+0x3234>
   124b0:	mov	r3, r0
   124b4:	mov	r2, r6
   124b8:	mov	r1, r5
   124bc:	mov	r0, #0
   124c0:	pop	{r4, r5, r6, lr}
   124c4:	b	10e14 <error@plt>
   124c8:	bl	10ea4 <__errno_location@plt>
   124cc:	mov	r2, #5
   124d0:	ldr	r1, [pc, #36]	; 124fc <__assert_fail@plt+0x1574>
   124d4:	ldr	r5, [r0]
   124d8:	mov	r0, #0
   124dc:	bl	10d90 <dcgettext@plt>
   124e0:	mov	r6, r0
   124e4:	mov	r2, r4
   124e8:	mov	r1, #3
   124ec:	mov	r0, #0
   124f0:	bl	14260 <__assert_fail@plt+0x32d8>
   124f4:	b	124b0 <__assert_fail@plt+0x1528>
   124f8:	andeq	r5, r1, r9, lsl sl
   124fc:	andeq	r5, r1, sl, lsr #20
   12500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	sub	sp, sp, #8192	; 0x2000
   12508:	mov	r8, r0
   1250c:	sub	sp, sp, #20
   12510:	mov	r9, r1
   12514:	strd	r2, [sp, #8]
   12518:	add	r3, sp, #8256	; 0x2040
   1251c:	ldrd	r4, [r3]
   12520:	add	r3, sp, #8192	; 0x2000
   12524:	add	r3, r3, #56	; 0x38
   12528:	ldr	r3, [r3]
   1252c:	subs	r0, r4, r3
   12530:	add	r3, sp, #8192	; 0x2000
   12534:	add	r3, r3, #60	; 0x3c
   12538:	ubfx	r2, r0, #0, #13
   1253c:	ldr	r3, [r3]
   12540:	sbc	r1, r5, r3
   12544:	cmp	r2, #0
   12548:	and	r3, r1, #-2147483648	; 0x80000000
   1254c:	sbcs	r1, r3, #0
   12550:	bge	12564 <__assert_fail@plt+0x15dc>
   12554:	subs	r2, r2, #1
   12558:	mvn	r1, r2, lsl #19
   1255c:	mvn	r1, r1, lsr #19
   12560:	adds	r2, r1, #1
   12564:	cmp	r2, #0
   12568:	mov	r6, #0
   1256c:	movne	r7, r2
   12570:	moveq	r7, #8192	; 0x2000
   12574:	subs	r2, r4, r7
   12578:	mov	r0, r9
   1257c:	stm	sp, {r6, r8}
   12580:	sbc	r3, r5, #0
   12584:	mov	r4, r2
   12588:	mov	r5, r3
   1258c:	bl	12090 <__assert_fail@plt+0x1108>
   12590:	cmp	r0, #0
   12594:	sbcs	r3, r1, #0
   12598:	bge	125b0 <__assert_fail@plt+0x1628>
   1259c:	mov	r6, #0
   125a0:	mov	r0, r6
   125a4:	add	sp, sp, #8192	; 0x2000
   125a8:	add	sp, sp, #20
   125ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b0:	mov	r2, r7
   125b4:	add	r1, sp, #16
   125b8:	mov	r0, r9
   125bc:	bl	143ac <__assert_fail@plt+0x3424>
   125c0:	cmn	r0, #1
   125c4:	mov	r7, r0
   125c8:	bne	1260c <__assert_fail@plt+0x1684>
   125cc:	bl	10ea4 <__errno_location@plt>
   125d0:	ldr	r4, [r0]
   125d4:	mov	r2, #5
   125d8:	mov	r0, r6
   125dc:	ldr	r1, [pc, #520]	; 127ec <__assert_fail@plt+0x1864>
   125e0:	bl	10d90 <dcgettext@plt>
   125e4:	mov	r5, r0
   125e8:	mov	r1, r8
   125ec:	mov	r0, #4
   125f0:	bl	141bc <__assert_fail@plt+0x3234>
   125f4:	mov	r3, r0
   125f8:	mov	r2, r5
   125fc:	mov	r1, r4
   12600:	mov	r0, r6
   12604:	bl	10e14 <error@plt>
   12608:	b	125a0 <__assert_fail@plt+0x1618>
   1260c:	ldr	r3, [sp, #8]
   12610:	ldr	r2, [sp, #12]
   12614:	orrs	r3, r3, r2
   12618:	movne	r3, #1
   1261c:	moveq	r3, #0
   12620:	cmp	r0, #0
   12624:	moveq	r3, #0
   12628:	cmp	r3, #0
   1262c:	beq	1268c <__assert_fail@plt+0x1704>
   12630:	add	r3, sp, #16
   12634:	add	r3, r3, r0
   12638:	ldrb	r2, [r3, #-1]
   1263c:	ldr	r3, [pc, #428]	; 127f0 <__assert_fail@plt+0x1868>
   12640:	ldrb	r3, [r3]
   12644:	cmp	r2, r3
   12648:	beq	1268c <__assert_fail@plt+0x1704>
   1264c:	ldr	r3, [sp, #8]
   12650:	subs	sl, r3, #1
   12654:	ldr	r3, [sp, #12]
   12658:	sbc	fp, r3, #0
   1265c:	ldr	r3, [pc, #396]	; 127f0 <__assert_fail@plt+0x1868>
   12660:	ldrb	r6, [r3]
   12664:	cmp	r7, #0
   12668:	bne	12694 <__assert_fail@plt+0x170c>
   1266c:	add	r3, sp, #8192	; 0x2000
   12670:	add	r3, r3, #56	; 0x38
   12674:	ldrd	r2, [r3]
   12678:	cmp	r5, r3
   1267c:	cmpeq	r4, r2
   12680:	bne	12794 <__assert_fail@plt+0x180c>
   12684:	mov	r6, #1
   12688:	b	125a0 <__assert_fail@plt+0x1618>
   1268c:	ldrd	sl, [sp, #8]
   12690:	b	1265c <__assert_fail@plt+0x16d4>
   12694:	ldrd	r2, [sp, #8]
   12698:	orrs	r3, r2, r3
   1269c:	subeq	r7, r7, #1
   126a0:	beq	126c4 <__assert_fail@plt+0x173c>
   126a4:	mov	r2, r7
   126a8:	mov	r1, r6
   126ac:	add	r0, sp, #16
   126b0:	bl	10e98 <memrchr@plt>
   126b4:	cmp	r0, #0
   126b8:	beq	1266c <__assert_fail@plt+0x16e4>
   126bc:	add	r3, sp, #16
   126c0:	sub	r7, r0, r3
   126c4:	subs	r2, sl, #1
   126c8:	sbc	r3, fp, #0
   126cc:	orrs	r1, sl, fp
   126d0:	bne	12788 <__assert_fail@plt+0x1800>
   126d4:	add	r3, sp, #8192	; 0x2000
   126d8:	add	r3, r3, #56	; 0x38
   126dc:	ldrd	r2, [r3]
   126e0:	cmp	r2, r4
   126e4:	sbcs	r3, r3, r5
   126e8:	bge	12750 <__assert_fail@plt+0x17c8>
   126ec:	mov	r6, #0
   126f0:	add	r3, sp, #8192	; 0x2000
   126f4:	add	r3, r3, #56	; 0x38
   126f8:	mov	r0, r9
   126fc:	stm	sp, {r6, r8}
   12700:	ldrd	r2, [r3]
   12704:	bl	12090 <__assert_fail@plt+0x1108>
   12708:	cmp	r0, #0
   1270c:	sbcs	r3, r1, #0
   12710:	blt	1259c <__assert_fail@plt+0x1614>
   12714:	add	r3, sp, #8192	; 0x2000
   12718:	mov	r0, r9
   1271c:	add	r3, r3, #56	; 0x38
   12720:	ldr	r3, [r3]
   12724:	subs	r2, r4, r3
   12728:	add	r3, sp, #8192	; 0x2000
   1272c:	add	r3, r3, #60	; 0x3c
   12730:	ldr	r3, [r3]
   12734:	sbc	r3, r5, r3
   12738:	bl	121b4 <__assert_fail@plt+0x122c>
   1273c:	cmp	r0, r6
   12740:	beq	12750 <__assert_fail@plt+0x17c8>
   12744:	mov	r1, r8
   12748:	bl	1246c <__assert_fail@plt+0x14e4>
   1274c:	b	125a0 <__assert_fail@plt+0x1618>
   12750:	add	r1, r7, #1
   12754:	add	r0, sp, #16
   12758:	bl	1213c <__assert_fail@plt+0x11b4>
   1275c:	adds	r4, r4, r7
   12760:	mov	r3, #0
   12764:	adc	r5, r5, #0
   12768:	adds	r2, r4, #1
   1276c:	mov	r0, r9
   12770:	stm	sp, {r3, r8}
   12774:	adc	r3, r5, r3
   12778:	bl	12090 <__assert_fail@plt+0x1108>
   1277c:	mvn	r6, r1
   12780:	lsr	r6, r6, #31
   12784:	b	125a0 <__assert_fail@plt+0x1618>
   12788:	mov	sl, r2
   1278c:	mov	fp, r3
   12790:	b	12664 <__assert_fail@plt+0x16dc>
   12794:	subs	r3, r4, #8192	; 0x2000
   12798:	mov	r6, #0
   1279c:	mov	r4, r3
   127a0:	mov	r0, r9
   127a4:	sbc	r3, r5, #0
   127a8:	mov	r2, r4
   127ac:	stm	sp, {r6, r8}
   127b0:	mov	r5, r3
   127b4:	bl	12090 <__assert_fail@plt+0x1108>
   127b8:	cmp	r0, #0
   127bc:	sbcs	r3, r1, #0
   127c0:	blt	1259c <__assert_fail@plt+0x1614>
   127c4:	mov	r2, #8192	; 0x2000
   127c8:	add	r1, sp, #16
   127cc:	mov	r0, r9
   127d0:	bl	143ac <__assert_fail@plt+0x3424>
   127d4:	cmn	r0, #1
   127d8:	mov	r7, r0
   127dc:	beq	125cc <__assert_fail@plt+0x1644>
   127e0:	cmp	r0, #0
   127e4:	bne	1265c <__assert_fail@plt+0x16d4>
   127e8:	b	12684 <__assert_fail@plt+0x16fc>
   127ec:	andeq	r5, r1, r9, lsl sl
   127f0:	andeq	r7, r2, r5, ror #2
   127f4:	subs	r4, r0, #0
   127f8:	push	{r7, lr}
   127fc:	sub	sp, sp, #56	; 0x38
   12800:	ldr	r5, [pc, #608]	; 12a68 <__assert_fail@plt+0x1ae0>
   12804:	beq	1283c <__assert_fail@plt+0x18b4>
   12808:	mov	r2, #5
   1280c:	mov	r0, #0
   12810:	ldr	r3, [pc, #596]	; 12a6c <__assert_fail@plt+0x1ae4>
   12814:	ldr	r1, [pc, #596]	; 12a70 <__assert_fail@plt+0x1ae8>
   12818:	ldr	r6, [r3]
   1281c:	bl	10d90 <dcgettext@plt>
   12820:	mov	r2, r0
   12824:	mov	r1, #1
   12828:	ldr	r3, [r5]
   1282c:	mov	r0, r6
   12830:	bl	10eec <__fprintf_chk@plt>
   12834:	mov	r0, r4
   12838:	bl	10e74 <exit@plt>
   1283c:	mov	r2, #5
   12840:	ldr	r1, [pc, #556]	; 12a74 <__assert_fail@plt+0x1aec>
   12844:	mov	r6, sp
   12848:	bl	10d90 <dcgettext@plt>
   1284c:	mov	r1, r0
   12850:	mov	r0, #1
   12854:	ldr	r2, [r5]
   12858:	bl	10ec8 <__printf_chk@plt>
   1285c:	ldr	r5, [pc, #532]	; 12a78 <__assert_fail@plt+0x1af0>
   12860:	mov	r2, #5
   12864:	mov	r0, r4
   12868:	ldr	r1, [pc, #524]	; 12a7c <__assert_fail@plt+0x1af4>
   1286c:	bl	10d90 <dcgettext@plt>
   12870:	mov	r1, r0
   12874:	mov	r2, #10
   12878:	ldr	r7, [pc, #512]	; 12a80 <__assert_fail@plt+0x1af8>
   1287c:	mov	r0, #1
   12880:	bl	10ec8 <__printf_chk@plt>
   12884:	mov	r2, #5
   12888:	ldr	r1, [pc, #500]	; 12a84 <__assert_fail@plt+0x1afc>
   1288c:	mov	r0, r4
   12890:	bl	10d90 <dcgettext@plt>
   12894:	ldr	r1, [r5]
   12898:	bl	10d00 <fputs_unlocked@plt>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #480]	; 12a88 <__assert_fail@plt+0x1b00>
   128a4:	mov	r0, r4
   128a8:	bl	10d90 <dcgettext@plt>
   128ac:	ldr	r1, [r5]
   128b0:	bl	10d00 <fputs_unlocked@plt>
   128b4:	mov	r2, #5
   128b8:	ldr	r1, [pc, #460]	; 12a8c <__assert_fail@plt+0x1b04>
   128bc:	mov	r0, r4
   128c0:	bl	10d90 <dcgettext@plt>
   128c4:	mov	r1, r0
   128c8:	mov	r2, #10
   128cc:	mov	r0, #1
   128d0:	bl	10ec8 <__printf_chk@plt>
   128d4:	mov	r2, #5
   128d8:	ldr	r1, [pc, #432]	; 12a90 <__assert_fail@plt+0x1b08>
   128dc:	mov	r0, r4
   128e0:	bl	10d90 <dcgettext@plt>
   128e4:	ldr	r1, [r5]
   128e8:	bl	10d00 <fputs_unlocked@plt>
   128ec:	mov	r2, #5
   128f0:	ldr	r1, [pc, #412]	; 12a94 <__assert_fail@plt+0x1b0c>
   128f4:	mov	r0, r4
   128f8:	bl	10d90 <dcgettext@plt>
   128fc:	ldr	r1, [r5]
   12900:	bl	10d00 <fputs_unlocked@plt>
   12904:	mov	r2, #5
   12908:	ldr	r1, [pc, #392]	; 12a98 <__assert_fail@plt+0x1b10>
   1290c:	mov	r0, r4
   12910:	bl	10d90 <dcgettext@plt>
   12914:	ldr	r1, [r5]
   12918:	bl	10d00 <fputs_unlocked@plt>
   1291c:	mov	r2, #5
   12920:	ldr	r1, [pc, #372]	; 12a9c <__assert_fail@plt+0x1b14>
   12924:	mov	r0, r4
   12928:	bl	10d90 <dcgettext@plt>
   1292c:	ldr	r1, [r5]
   12930:	bl	10d00 <fputs_unlocked@plt>
   12934:	mov	r2, #5
   12938:	ldr	r1, [pc, #352]	; 12aa0 <__assert_fail@plt+0x1b18>
   1293c:	mov	r0, r4
   12940:	bl	10d90 <dcgettext@plt>
   12944:	ldr	r1, [r5]
   12948:	bl	10d00 <fputs_unlocked@plt>
   1294c:	ldr	lr, [pc, #336]	; 12aa4 <__assert_fail@plt+0x1b1c>
   12950:	mov	ip, sp
   12954:	ldm	lr!, {r0, r1, r2, r3}
   12958:	stmia	ip!, {r0, r1, r2, r3}
   1295c:	ldm	lr!, {r0, r1, r2, r3}
   12960:	stmia	ip!, {r0, r1, r2, r3}
   12964:	ldm	lr!, {r0, r1, r2, r3}
   12968:	stmia	ip!, {r0, r1, r2, r3}
   1296c:	ldm	lr, {r0, r1}
   12970:	stm	ip, {r0, r1}
   12974:	ldr	r1, [r6]
   12978:	cmp	r1, #0
   1297c:	bne	12a20 <__assert_fail@plt+0x1a98>
   12980:	ldr	r6, [r6, #4]
   12984:	mov	r2, #5
   12988:	mov	r0, #0
   1298c:	ldr	r7, [pc, #236]	; 12a80 <__assert_fail@plt+0x1af8>
   12990:	ldr	r1, [pc, #272]	; 12aa8 <__assert_fail@plt+0x1b20>
   12994:	cmp	r6, #0
   12998:	moveq	r6, r7
   1299c:	bl	10d90 <dcgettext@plt>
   129a0:	mov	r1, r0
   129a4:	ldr	r3, [pc, #256]	; 12aac <__assert_fail@plt+0x1b24>
   129a8:	mov	r0, #1
   129ac:	ldr	r2, [pc, #252]	; 12ab0 <__assert_fail@plt+0x1b28>
   129b0:	bl	10ec8 <__printf_chk@plt>
   129b4:	mov	r1, #0
   129b8:	mov	r0, #5
   129bc:	bl	10f1c <setlocale@plt>
   129c0:	cmp	r0, #0
   129c4:	bne	12a38 <__assert_fail@plt+0x1ab0>
   129c8:	mov	r2, #5
   129cc:	ldr	r1, [pc, #224]	; 12ab4 <__assert_fail@plt+0x1b2c>
   129d0:	mov	r0, #0
   129d4:	bl	10d90 <dcgettext@plt>
   129d8:	mov	r1, r0
   129dc:	ldr	r3, [pc, #156]	; 12a80 <__assert_fail@plt+0x1af8>
   129e0:	mov	r0, #1
   129e4:	ldr	r2, [pc, #192]	; 12aac <__assert_fail@plt+0x1b24>
   129e8:	bl	10ec8 <__printf_chk@plt>
   129ec:	mov	r2, #5
   129f0:	ldr	r1, [pc, #192]	; 12ab8 <__assert_fail@plt+0x1b30>
   129f4:	mov	r0, #0
   129f8:	bl	10d90 <dcgettext@plt>
   129fc:	ldr	r2, [pc, #184]	; 12abc <__assert_fail@plt+0x1b34>
   12a00:	cmp	r6, r7
   12a04:	mov	r1, r0
   12a08:	mov	r0, #1
   12a0c:	ldr	r3, [pc, #172]	; 12ac0 <__assert_fail@plt+0x1b38>
   12a10:	moveq	r3, r2
   12a14:	mov	r2, r6
   12a18:	bl	10ec8 <__printf_chk@plt>
   12a1c:	b	12834 <__assert_fail@plt+0x18ac>
   12a20:	mov	r0, r7
   12a24:	bl	10d18 <strcmp@plt>
   12a28:	cmp	r0, #0
   12a2c:	beq	12980 <__assert_fail@plt+0x19f8>
   12a30:	add	r6, r6, #8
   12a34:	b	12974 <__assert_fail@plt+0x19ec>
   12a38:	mov	r2, #3
   12a3c:	ldr	r1, [pc, #128]	; 12ac4 <__assert_fail@plt+0x1b3c>
   12a40:	bl	10f64 <strncmp@plt>
   12a44:	cmp	r0, #0
   12a48:	beq	129c8 <__assert_fail@plt+0x1a40>
   12a4c:	mov	r2, #5
   12a50:	ldr	r1, [pc, #112]	; 12ac8 <__assert_fail@plt+0x1b40>
   12a54:	mov	r0, #0
   12a58:	bl	10d90 <dcgettext@plt>
   12a5c:	ldr	r1, [r5]
   12a60:	bl	10d00 <fputs_unlocked@plt>
   12a64:	b	129c8 <__assert_fail@plt+0x1a40>
   12a68:	andeq	r7, r2, r4, ror r1
   12a6c:	andeq	r7, r2, r8, asr r1
   12a70:	andeq	r5, r1, ip, asr #20
   12a74:	andeq	r5, r1, r3, ror sl
   12a78:	andeq	r7, r2, ip, asr r1
   12a7c:	muleq	r1, r4, sl
   12a80:	andeq	r5, r1, r7, asr #20
   12a84:	andeq	r5, r1, r9, lsl fp
   12a88:	andeq	r5, r1, r1, asr fp
   12a8c:	muleq	r1, ip, fp
   12a90:	andeq	r5, r1, sl, lsr #26
   12a94:	andeq	r5, r1, lr, lsr #27
   12a98:	andeq	r5, r1, sp, ror #27
   12a9c:	andeq	r5, r1, sl, lsl lr
   12aa0:	andeq	r5, r1, r0, asr lr
   12aa4:	muleq	r1, r8, r8
   12aa8:	andeq	r5, r1, r4, lsr #30
   12aac:	andeq	r5, r1, fp, lsr pc
   12ab0:	andeq	r5, r1, r3, ror #30
   12ab4:			; <UNDEFINED> instruction: 0x00015fbc
   12ab8:	ldrdeq	r5, [r1], -r7
   12abc:	andeq	r6, r1, lr, lsl #2
   12ac0:	andeq	r6, r1, r9
   12ac4:	andeq	r5, r1, r1, ror pc
   12ac8:	andeq	r5, r1, r5, ror pc
   12acc:	ldr	r3, [pc, #4]	; 12ad8 <__assert_fail@plt+0x1b50>
   12ad0:	str	r0, [r3]
   12ad4:	bx	lr
   12ad8:	andeq	r7, r2, ip, ror #2
   12adc:	ldr	r3, [pc, #4]	; 12ae8 <__assert_fail@plt+0x1b60>
   12ae0:	strb	r0, [r3, #4]
   12ae4:	bx	lr
   12ae8:	andeq	r7, r2, ip, ror #2
   12aec:	ldr	r3, [pc, #176]	; 12ba4 <__assert_fail@plt+0x1c1c>
   12af0:	push	{r0, r1, r4, r5, r6, lr}
   12af4:	ldr	r0, [r3]
   12af8:	bl	15200 <__assert_fail@plt+0x4278>
   12afc:	cmp	r0, #0
   12b00:	beq	12b88 <__assert_fail@plt+0x1c00>
   12b04:	ldr	r4, [pc, #156]	; 12ba8 <__assert_fail@plt+0x1c20>
   12b08:	bl	10ea4 <__errno_location@plt>
   12b0c:	mov	r5, r0
   12b10:	ldrb	r6, [r4, #4]
   12b14:	cmp	r6, #0
   12b18:	beq	12b28 <__assert_fail@plt+0x1ba0>
   12b1c:	ldr	r3, [r0]
   12b20:	cmp	r3, #32
   12b24:	beq	12b88 <__assert_fail@plt+0x1c00>
   12b28:	mov	r2, #5
   12b2c:	ldr	r1, [pc, #120]	; 12bac <__assert_fail@plt+0x1c24>
   12b30:	mov	r0, #0
   12b34:	bl	10d90 <dcgettext@plt>
   12b38:	mov	r6, r0
   12b3c:	ldr	r0, [r4]
   12b40:	cmp	r0, #0
   12b44:	beq	12b74 <__assert_fail@plt+0x1bec>
   12b48:	ldr	r4, [r5]
   12b4c:	bl	14250 <__assert_fail@plt+0x32c8>
   12b50:	mov	r3, r0
   12b54:	ldr	r2, [pc, #84]	; 12bb0 <__assert_fail@plt+0x1c28>
   12b58:	mov	r0, #0
   12b5c:	str	r6, [sp]
   12b60:	mov	r1, r4
   12b64:	bl	10e14 <error@plt>
   12b68:	ldr	r3, [pc, #68]	; 12bb4 <__assert_fail@plt+0x1c2c>
   12b6c:	ldr	r0, [r3]
   12b70:	bl	10d48 <_exit@plt>
   12b74:	mov	r3, r6
   12b78:	ldr	r2, [pc, #56]	; 12bb8 <__assert_fail@plt+0x1c30>
   12b7c:	ldr	r1, [r5]
   12b80:	bl	10e14 <error@plt>
   12b84:	b	12b68 <__assert_fail@plt+0x1be0>
   12b88:	ldr	r3, [pc, #44]	; 12bbc <__assert_fail@plt+0x1c34>
   12b8c:	ldr	r0, [r3]
   12b90:	bl	15200 <__assert_fail@plt+0x4278>
   12b94:	cmp	r0, #0
   12b98:	bne	12b68 <__assert_fail@plt+0x1be0>
   12b9c:	add	sp, sp, #8
   12ba0:	pop	{r4, r5, r6, pc}
   12ba4:	andeq	r7, r2, ip, asr r1
   12ba8:	andeq	r7, r2, ip, ror #2
   12bac:	andeq	r6, r1, r6, lsr #3
   12bb0:	andeq	r6, r1, pc, rrx
   12bb4:	andeq	r7, r2, r0, lsl #2
   12bb8:	andeq	r6, r1, r3, ror r0
   12bbc:	andeq	r7, r2, r8, asr r1
   12bc0:	push	{r0, r1, r2, r4, r5, lr}
   12bc4:	mov	r5, r0
   12bc8:	bl	10ea4 <__errno_location@plt>
   12bcc:	mov	r4, r0
   12bd0:	mov	r0, r5
   12bd4:	ldr	r3, [r4]
   12bd8:	str	r3, [sp]
   12bdc:	str	r3, [sp, #4]
   12be0:	mov	r3, #0
   12be4:	str	r3, [r4]
   12be8:	bl	10d3c <free@plt>
   12bec:	ldr	r3, [r4]
   12bf0:	add	r2, sp, #8
   12bf4:	clz	r3, r3
   12bf8:	lsr	r3, r3, #5
   12bfc:	add	r3, r2, r3, lsl #2
   12c00:	ldr	r3, [r3, #-8]
   12c04:	str	r3, [r4]
   12c08:	add	sp, sp, #12
   12c0c:	pop	{r4, r5, pc}
   12c10:	push	{r4, r5, r6, r7, r8, lr}
   12c14:	mov	r8, r0
   12c18:	mov	r7, r1
   12c1c:	mov	r5, r2
   12c20:	mov	r6, #0
   12c24:	cmp	r5, #0
   12c28:	beq	12c58 <__assert_fail@plt+0x1cd0>
   12c2c:	mov	r2, r5
   12c30:	mov	r1, r7
   12c34:	mov	r0, r8
   12c38:	bl	143ac <__assert_fail@plt+0x3424>
   12c3c:	cmn	r0, #1
   12c40:	mov	r4, r0
   12c44:	beq	12c58 <__assert_fail@plt+0x1cd0>
   12c48:	cmp	r0, #0
   12c4c:	bne	12c60 <__assert_fail@plt+0x1cd8>
   12c50:	bl	10ea4 <__errno_location@plt>
   12c54:	str	r4, [r0]
   12c58:	mov	r0, r6
   12c5c:	pop	{r4, r5, r6, r7, r8, pc}
   12c60:	add	r6, r6, r0
   12c64:	add	r7, r7, r0
   12c68:	sub	r5, r5, r0
   12c6c:	b	12c24 <__assert_fail@plt+0x1c9c>
   12c70:	mov	r3, #0
   12c74:	cmp	r0, #0
   12c78:	push	{r4, r5, r6, r7, r8, lr}
   12c7c:	mov	r4, r0
   12c80:	mov	r5, r1
   12c84:	add	r6, r2, #20
   12c88:	strb	r3, [r2, #20]
   12c8c:	sbcs	r3, r1, #0
   12c90:	bge	12cf4 <__assert_fail@plt+0x1d6c>
   12c94:	mov	r0, r4
   12c98:	mov	r1, r5
   12c9c:	mov	r2, #10
   12ca0:	mov	r3, #0
   12ca4:	bl	155b8 <__assert_fail@plt+0x4630>
   12ca8:	rsb	r2, r2, #48	; 0x30
   12cac:	mov	r3, #0
   12cb0:	mov	r0, r4
   12cb4:	mov	r1, r5
   12cb8:	strb	r2, [r6, #-1]
   12cbc:	mov	r2, #10
   12cc0:	sub	r7, r6, #1
   12cc4:	bl	155b8 <__assert_fail@plt+0x4630>
   12cc8:	mov	r4, r0
   12ccc:	mov	r5, r1
   12cd0:	orrs	r3, r4, r5
   12cd4:	bne	12cec <__assert_fail@plt+0x1d64>
   12cd8:	mov	r3, #45	; 0x2d
   12cdc:	sub	r6, r6, #2
   12ce0:	strb	r3, [r7, #-1]
   12ce4:	mov	r0, r6
   12ce8:	pop	{r4, r5, r6, r7, r8, pc}
   12cec:	mov	r6, r7
   12cf0:	b	12c94 <__assert_fail@plt+0x1d0c>
   12cf4:	mov	r0, r4
   12cf8:	mov	r1, r5
   12cfc:	mov	r2, #10
   12d00:	mov	r3, #0
   12d04:	bl	155b8 <__assert_fail@plt+0x4630>
   12d08:	add	r2, r2, #48	; 0x30
   12d0c:	mov	r3, #0
   12d10:	mov	r0, r4
   12d14:	mov	r1, r5
   12d18:	strb	r2, [r6, #-1]!
   12d1c:	mov	r2, #10
   12d20:	bl	155b8 <__assert_fail@plt+0x4630>
   12d24:	mov	r4, r0
   12d28:	mov	r5, r1
   12d2c:	orrs	r3, r4, r5
   12d30:	bne	12cf4 <__assert_fail@plt+0x1d6c>
   12d34:	b	12ce4 <__assert_fail@plt+0x1d5c>
   12d38:	push	{r4, r5, r6, lr}
   12d3c:	mov	r3, #0
   12d40:	mov	r4, r0
   12d44:	mov	r5, r1
   12d48:	add	r6, r2, #20
   12d4c:	strb	r3, [r2, #20]
   12d50:	mov	r2, #10
   12d54:	mov	r3, #0
   12d58:	mov	r0, r4
   12d5c:	mov	r1, r5
   12d60:	bl	1568c <__assert_fail@plt+0x4704>
   12d64:	add	r2, r2, #48	; 0x30
   12d68:	mov	r3, #0
   12d6c:	mov	r0, r4
   12d70:	mov	r1, r5
   12d74:	strb	r2, [r6, #-1]!
   12d78:	mov	r2, #10
   12d7c:	bl	1568c <__assert_fail@plt+0x4704>
   12d80:	cmp	r5, #0
   12d84:	cmpeq	r4, #9
   12d88:	bhi	12d94 <__assert_fail@plt+0x1e0c>
   12d8c:	mov	r0, r6
   12d90:	pop	{r4, r5, r6, pc}
   12d94:	mov	r4, r0
   12d98:	mov	r5, r1
   12d9c:	b	12d50 <__assert_fail@plt+0x1dc8>
   12da0:	push	{r4, r5, r6, lr}
   12da4:	subs	r4, r0, #0
   12da8:	bne	12dc0 <__assert_fail@plt+0x1e38>
   12dac:	ldr	r3, [pc, #124]	; 12e30 <__assert_fail@plt+0x1ea8>
   12db0:	ldr	r0, [pc, #124]	; 12e34 <__assert_fail@plt+0x1eac>
   12db4:	ldr	r1, [r3]
   12db8:	bl	10f58 <fputs@plt>
   12dbc:	bl	10f70 <abort@plt>
   12dc0:	mov	r1, #47	; 0x2f
   12dc4:	bl	10f28 <strrchr@plt>
   12dc8:	subs	r6, r0, #0
   12dcc:	beq	12e1c <__assert_fail@plt+0x1e94>
   12dd0:	add	r5, r6, #1
   12dd4:	sub	r3, r5, r4
   12dd8:	cmp	r3, #6
   12ddc:	ble	12e1c <__assert_fail@plt+0x1e94>
   12de0:	mov	r2, #7
   12de4:	ldr	r1, [pc, #76]	; 12e38 <__assert_fail@plt+0x1eb0>
   12de8:	sub	r0, r6, #6
   12dec:	bl	10f64 <strncmp@plt>
   12df0:	cmp	r0, #0
   12df4:	bne	12e1c <__assert_fail@plt+0x1e94>
   12df8:	mov	r2, #3
   12dfc:	ldr	r1, [pc, #56]	; 12e3c <__assert_fail@plt+0x1eb4>
   12e00:	mov	r0, r5
   12e04:	bl	10f64 <strncmp@plt>
   12e08:	cmp	r0, #0
   12e0c:	ldreq	r3, [pc, #44]	; 12e40 <__assert_fail@plt+0x1eb8>
   12e10:	addeq	r4, r6, #4
   12e14:	movne	r4, r5
   12e18:	streq	r4, [r3]
   12e1c:	ldr	r3, [pc, #32]	; 12e44 <__assert_fail@plt+0x1ebc>
   12e20:	str	r4, [r3]
   12e24:	ldr	r3, [pc, #28]	; 12e48 <__assert_fail@plt+0x1ec0>
   12e28:	str	r4, [r3]
   12e2c:	pop	{r4, r5, r6, pc}
   12e30:	andeq	r7, r2, r8, asr r1
   12e34:			; <UNDEFINED> instruction: 0x000161b2
   12e38:	andeq	r6, r1, sl, ror #3
   12e3c:	strdeq	r6, [r1], -r2
   12e40:	andeq	r7, r2, r8, asr #2
   12e44:	andeq	r7, r2, r4, ror r1
   12e48:	andeq	r7, r2, ip, asr #2
   12e4c:	push	{r4, lr}
   12e50:	mov	r2, #48	; 0x30
   12e54:	mov	r4, r1
   12e58:	mov	r1, #0
   12e5c:	bl	10ebc <memset@plt>
   12e60:	cmp	r4, #10
   12e64:	bne	12e6c <__assert_fail@plt+0x1ee4>
   12e68:	bl	10f70 <abort@plt>
   12e6c:	str	r4, [r0]
   12e70:	pop	{r4, pc}
   12e74:	push	{r4, r5, r6, lr}
   12e78:	mov	r2, #5
   12e7c:	mov	r6, r0
   12e80:	mov	r5, r1
   12e84:	mov	r1, r0
   12e88:	mov	r0, #0
   12e8c:	bl	10d90 <dcgettext@plt>
   12e90:	cmp	r6, r0
   12e94:	mov	r4, r0
   12e98:	bne	12f08 <__assert_fail@plt+0x1f80>
   12e9c:	bl	15428 <__assert_fail@plt+0x44a0>
   12ea0:	ldrb	r3, [r0]
   12ea4:	bic	r3, r3, #32
   12ea8:	cmp	r3, #85	; 0x55
   12eac:	bne	12f10 <__assert_fail@plt+0x1f88>
   12eb0:	ldrb	r3, [r0, #1]
   12eb4:	bic	r3, r3, #32
   12eb8:	cmp	r3, #84	; 0x54
   12ebc:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12ec0:	ldrb	r3, [r0, #2]
   12ec4:	bic	r3, r3, #32
   12ec8:	cmp	r3, #70	; 0x46
   12ecc:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12ed0:	ldrb	r3, [r0, #3]
   12ed4:	cmp	r3, #45	; 0x2d
   12ed8:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12edc:	ldrb	r3, [r0, #4]
   12ee0:	cmp	r3, #56	; 0x38
   12ee4:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12ee8:	ldrb	r3, [r0, #5]
   12eec:	cmp	r3, #0
   12ef0:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12ef4:	ldrb	r2, [r4]
   12ef8:	ldr	r3, [pc, #144]	; 12f90 <__assert_fail@plt+0x2008>
   12efc:	ldr	r4, [pc, #144]	; 12f94 <__assert_fail@plt+0x200c>
   12f00:	cmp	r2, #96	; 0x60
   12f04:	movne	r4, r3
   12f08:	mov	r0, r4
   12f0c:	pop	{r4, r5, r6, pc}
   12f10:	cmp	r3, #71	; 0x47
   12f14:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f18:	ldrb	r3, [r0, #1]
   12f1c:	bic	r3, r3, #32
   12f20:	cmp	r3, #66	; 0x42
   12f24:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f28:	ldrb	r3, [r0, #2]
   12f2c:	cmp	r3, #49	; 0x31
   12f30:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f34:	ldrb	r3, [r0, #3]
   12f38:	cmp	r3, #56	; 0x38
   12f3c:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f40:	ldrb	r3, [r0, #4]
   12f44:	cmp	r3, #48	; 0x30
   12f48:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f4c:	ldrb	r3, [r0, #5]
   12f50:	cmp	r3, #51	; 0x33
   12f54:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f58:	ldrb	r3, [r0, #6]
   12f5c:	cmp	r3, #48	; 0x30
   12f60:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f64:	ldrb	r3, [r0, #7]
   12f68:	cmp	r3, #0
   12f6c:	bne	12f80 <__assert_fail@plt+0x1ff8>
   12f70:	ldrb	r2, [r4]
   12f74:	ldr	r3, [pc, #28]	; 12f98 <__assert_fail@plt+0x2010>
   12f78:	ldr	r4, [pc, #28]	; 12f9c <__assert_fail@plt+0x2014>
   12f7c:	b	12f00 <__assert_fail@plt+0x1f78>
   12f80:	ldr	r4, [pc, #24]	; 12fa0 <__assert_fail@plt+0x2018>
   12f84:	cmp	r5, #9
   12f88:	ldr	r3, [pc, #20]	; 12fa4 <__assert_fail@plt+0x201c>
   12f8c:	b	12f04 <__assert_fail@plt+0x1f7c>
   12f90:	andeq	r6, r1, lr, asr #4
   12f94:	andeq	r6, r1, r9, asr r2
   12f98:	andeq	r6, r1, r2, asr r2
   12f9c:	andeq	r6, r1, r5, asr r2
   12fa0:	andeq	r6, r1, ip, asr #4
   12fa4:	andeq	r6, r1, sp, asr r2
   12fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fac:	sub	sp, sp, #108	; 0x6c
   12fb0:	mov	r8, r0
   12fb4:	mov	r5, r1
   12fb8:	mov	r6, #0
   12fbc:	str	r3, [sp, #40]	; 0x28
   12fc0:	str	r2, [sp, #48]	; 0x30
   12fc4:	ldr	sl, [sp, #144]	; 0x90
   12fc8:	bl	10de4 <__ctype_get_mb_cur_max@plt>
   12fcc:	ldr	r3, [sp, #148]	; 0x94
   12fd0:	str	r6, [sp, #24]
   12fd4:	str	r6, [sp, #32]
   12fd8:	str	r6, [sp, #44]	; 0x2c
   12fdc:	str	r6, [sp, #52]	; 0x34
   12fe0:	ubfx	r7, r3, #1, #1
   12fe4:	mov	r3, #1
   12fe8:	str	r6, [sp, #60]	; 0x3c
   12fec:	str	r3, [sp, #72]	; 0x48
   12ff0:	str	r0, [sp, #76]	; 0x4c
   12ff4:	cmp	sl, #10
   12ff8:	ldrls	pc, [pc, sl, lsl #2]
   12ffc:	b	13240 <__assert_fail@plt+0x22b8>
   13000:	andeq	r3, r1, ip, lsr #32
   13004:	andeq	r3, r1, r8, asr r2
   13008:	ldrdeq	r3, [r1], -ip
   1300c:	strdeq	r3, [r1], -r4
   13010:	andeq	r3, r1, r4, asr #3
   13014:	andeq	r3, r1, ip, lsl r1
   13018:	strdeq	r3, [r1], -ip
   1301c:	andeq	r3, r1, r4, asr #4
   13020:	andeq	r3, r1, ip, asr #2
   13024:	andeq	r3, r1, ip, asr #2
   13028:	andeq	r3, r1, ip, asr #2
   1302c:	mov	r4, sl
   13030:	mov	r7, #0
   13034:	mov	r9, r5
   13038:	mov	r3, #0
   1303c:	str	r6, [sp, #68]	; 0x44
   13040:	str	r3, [sp, #28]
   13044:	ldr	r3, [sp, #40]	; 0x28
   13048:	cmn	r3, #1
   1304c:	bne	13bec <__assert_fail@plt+0x2c64>
   13050:	ldr	r2, [sp, #28]
   13054:	ldr	r3, [sp, #48]	; 0x30
   13058:	ldrb	r3, [r3, r2]
   1305c:	adds	r3, r3, #0
   13060:	movne	r3, #1
   13064:	str	r3, [sp, #36]	; 0x24
   13068:	ldr	r3, [sp, #36]	; 0x24
   1306c:	cmp	r3, #0
   13070:	bne	1327c <__assert_fail@plt+0x22f4>
   13074:	sub	r3, sl, #2
   13078:	cmp	r4, #0
   1307c:	clz	r3, r3
   13080:	movne	r2, #0
   13084:	lsr	r3, r3, #5
   13088:	andeq	r2, r3, r7
   1308c:	cmp	r2, #0
   13090:	bne	13440 <__assert_fail@plt+0x24b8>
   13094:	eor	r7, r7, #1
   13098:	ands	r3, r3, r7
   1309c:	beq	13c64 <__assert_fail@plt+0x2cdc>
   130a0:	ldr	r2, [sp, #68]	; 0x44
   130a4:	cmp	r2, #0
   130a8:	beq	13c2c <__assert_fail@plt+0x2ca4>
   130ac:	ldr	r3, [sp, #72]	; 0x48
   130b0:	cmp	r3, #0
   130b4:	beq	13c00 <__assert_fail@plt+0x2c78>
   130b8:	ldr	r2, [sp, #48]	; 0x30
   130bc:	ldr	r3, [sp, #160]	; 0xa0
   130c0:	ldr	r1, [sp, #60]	; 0x3c
   130c4:	str	r3, [sp, #16]
   130c8:	ldr	r3, [sp, #156]	; 0x9c
   130cc:	str	r3, [sp, #12]
   130d0:	ldr	r3, [sp, #152]	; 0x98
   130d4:	str	r3, [sp, #8]
   130d8:	ldr	r3, [sp, #148]	; 0x94
   130dc:	str	r3, [sp, #4]
   130e0:	mov	r3, #5
   130e4:	str	r3, [sp]
   130e8:	ldr	r3, [sp, #40]	; 0x28
   130ec:	mov	r0, r8
   130f0:	bl	12fa8 <__assert_fail@plt+0x2020>
   130f4:	mov	r4, r0
   130f8:	b	13c58 <__assert_fail@plt+0x2cd0>
   130fc:	ldr	r3, [pc, #2948]	; 13c88 <__assert_fail@plt+0x2d00>
   13100:	mov	r7, #1
   13104:	mov	r4, #0
   13108:	mov	sl, #5
   1310c:	str	r7, [sp, #24]
   13110:	str	r7, [sp, #32]
   13114:	str	r3, [sp, #44]	; 0x2c
   13118:	b	13034 <__assert_fail@plt+0x20ac>
   1311c:	cmp	r7, #0
   13120:	bne	13264 <__assert_fail@plt+0x22dc>
   13124:	cmp	r5, #0
   13128:	mov	r4, #1
   1312c:	movne	r3, #34	; 0x22
   13130:	strbne	r3, [r8]
   13134:	mov	r3, #1
   13138:	str	r3, [sp, #24]
   1313c:	str	r3, [sp, #32]
   13140:	ldr	r3, [pc, #2880]	; 13c88 <__assert_fail@plt+0x2d00>
   13144:	str	r3, [sp, #44]	; 0x2c
   13148:	b	13034 <__assert_fail@plt+0x20ac>
   1314c:	cmp	sl, #10
   13150:	beq	13174 <__assert_fail@plt+0x21ec>
   13154:	mov	r1, sl
   13158:	ldr	r0, [pc, #2860]	; 13c8c <__assert_fail@plt+0x2d04>
   1315c:	bl	12e74 <__assert_fail@plt+0x1eec>
   13160:	mov	r1, sl
   13164:	str	r0, [sp, #156]	; 0x9c
   13168:	ldr	r0, [pc, #2848]	; 13c90 <__assert_fail@plt+0x2d08>
   1316c:	bl	12e74 <__assert_fail@plt+0x1eec>
   13170:	str	r0, [sp, #160]	; 0xa0
   13174:	cmp	r7, #0
   13178:	moveq	r4, r7
   1317c:	beq	13194 <__assert_fail@plt+0x220c>
   13180:	mov	r4, #0
   13184:	b	131a4 <__assert_fail@plt+0x221c>
   13188:	cmp	r5, r4
   1318c:	strbhi	r3, [r8, r4]
   13190:	add	r4, r4, #1
   13194:	ldr	r3, [sp, #156]	; 0x9c
   13198:	ldrb	r3, [r3, r4]
   1319c:	cmp	r3, #0
   131a0:	bne	13188 <__assert_fail@plt+0x2200>
   131a4:	ldr	r0, [sp, #160]	; 0xa0
   131a8:	bl	10e80 <strlen@plt>
   131ac:	ldr	r3, [sp, #160]	; 0xa0
   131b0:	str	r0, [sp, #32]
   131b4:	str	r3, [sp, #44]	; 0x2c
   131b8:	mov	r3, #1
   131bc:	str	r3, [sp, #24]
   131c0:	b	13034 <__assert_fail@plt+0x20ac>
   131c4:	mov	r3, #1
   131c8:	cmp	r7, #0
   131cc:	streq	r3, [sp, #24]
   131d0:	beq	13214 <__assert_fail@plt+0x228c>
   131d4:	str	r3, [sp, #32]
   131d8:	b	13200 <__assert_fail@plt+0x2278>
   131dc:	cmp	r7, #0
   131e0:	beq	13214 <__assert_fail@plt+0x228c>
   131e4:	mov	r3, #1
   131e8:	str	r3, [sp, #32]
   131ec:	ldr	r3, [pc, #2716]	; 13c90 <__assert_fail@plt+0x2d08>
   131f0:	b	13274 <__assert_fail@plt+0x22ec>
   131f4:	mov	r7, #1
   131f8:	str	r7, [sp, #24]
   131fc:	str	r7, [sp, #32]
   13200:	ldr	r3, [pc, #2696]	; 13c90 <__assert_fail@plt+0x2d08>
   13204:	mov	r4, #0
   13208:	str	r3, [sp, #44]	; 0x2c
   1320c:	mov	sl, #2
   13210:	b	13034 <__assert_fail@plt+0x20ac>
   13214:	cmp	r5, #0
   13218:	movne	r3, #39	; 0x27
   1321c:	movne	r7, #0
   13220:	strbne	r3, [r8]
   13224:	moveq	r7, r5
   13228:	mov	r3, #1
   1322c:	mov	r4, #1
   13230:	str	r3, [sp, #32]
   13234:	ldr	r3, [pc, #2644]	; 13c90 <__assert_fail@plt+0x2d08>
   13238:	str	r3, [sp, #44]	; 0x2c
   1323c:	b	1320c <__assert_fail@plt+0x2284>
   13240:	bl	10f70 <abort@plt>
   13244:	mov	r3, #1
   13248:	mov	r7, #0
   1324c:	str	r3, [sp, #24]
   13250:	mov	r4, #0
   13254:	b	13034 <__assert_fail@plt+0x20ac>
   13258:	mov	r7, #1
   1325c:	str	sl, [sp, #32]
   13260:	b	13200 <__assert_fail@plt+0x2278>
   13264:	mov	r3, #1
   13268:	str	r7, [sp, #24]
   1326c:	str	r3, [sp, #32]
   13270:	ldr	r3, [pc, #2576]	; 13c88 <__assert_fail@plt+0x2d00>
   13274:	str	r3, [sp, #44]	; 0x2c
   13278:	b	13250 <__assert_fail@plt+0x22c8>
   1327c:	ldr	fp, [sp, #24]
   13280:	ldr	r3, [sp, #32]
   13284:	cmp	sl, #2
   13288:	moveq	fp, #0
   1328c:	andne	fp, fp, #1
   13290:	adds	r5, r3, #0
   13294:	movne	r5, #1
   13298:	ands	r3, fp, r5
   1329c:	str	r3, [sp, #64]	; 0x40
   132a0:	beq	13370 <__assert_fail@plt+0x23e8>
   132a4:	ldr	r3, [sp, #28]
   132a8:	ldr	r2, [sp, #32]
   132ac:	cmp	r2, #1
   132b0:	add	r6, r3, r2
   132b4:	mov	r3, r2
   132b8:	ldr	r2, [sp, #40]	; 0x28
   132bc:	movls	r3, #0
   132c0:	movhi	r3, #1
   132c4:	cmn	r2, #1
   132c8:	movne	r3, #0
   132cc:	cmp	r3, #0
   132d0:	beq	132e0 <__assert_fail@plt+0x2358>
   132d4:	ldr	r0, [sp, #48]	; 0x30
   132d8:	bl	10e80 <strlen@plt>
   132dc:	str	r0, [sp, #40]	; 0x28
   132e0:	ldr	r3, [sp, #40]	; 0x28
   132e4:	cmp	r6, r3
   132e8:	bhi	13368 <__assert_fail@plt+0x23e0>
   132ec:	ldr	r0, [sp, #28]
   132f0:	ldr	r2, [sp, #32]
   132f4:	ldr	r3, [sp, #48]	; 0x30
   132f8:	ldr	r1, [sp, #44]	; 0x2c
   132fc:	add	r0, r3, r0
   13300:	bl	10d78 <memcmp@plt>
   13304:	cmp	r0, #0
   13308:	bne	13368 <__assert_fail@plt+0x23e0>
   1330c:	cmp	r7, #0
   13310:	beq	13370 <__assert_fail@plt+0x23e8>
   13314:	str	r7, [sp, #24]
   13318:	ldr	r3, [sp, #24]
   1331c:	mov	r1, r9
   13320:	ldr	r2, [sp, #48]	; 0x30
   13324:	cmp	sl, #2
   13328:	movne	r3, #0
   1332c:	andeq	r3, r3, #1
   13330:	cmp	r3, #0
   13334:	ldr	r3, [sp, #160]	; 0xa0
   13338:	movne	sl, #4
   1333c:	str	sl, [sp]
   13340:	str	r3, [sp, #16]
   13344:	ldr	r3, [sp, #156]	; 0x9c
   13348:	str	r3, [sp, #12]
   1334c:	mov	r3, #0
   13350:	str	r3, [sp, #8]
   13354:	ldr	r3, [sp, #148]	; 0x94
   13358:	bic	r3, r3, #2
   1335c:	str	r3, [sp, #4]
   13360:	ldr	r3, [sp, #40]	; 0x28
   13364:	b	130ec <__assert_fail@plt+0x2164>
   13368:	mov	r3, #0
   1336c:	str	r3, [sp, #64]	; 0x40
   13370:	ldr	r2, [sp, #28]
   13374:	ldr	r3, [sp, #48]	; 0x30
   13378:	add	r3, r3, r2
   1337c:	str	r3, [sp, #80]	; 0x50
   13380:	ldr	r3, [sp, #48]	; 0x30
   13384:	ldrb	r6, [r3, r2]
   13388:	cmp	r6, #58	; 0x3a
   1338c:	bhi	134f0 <__assert_fail@plt+0x2568>
   13390:	cmp	r6, #43	; 0x2b
   13394:	bcs	136b0 <__assert_fail@plt+0x2728>
   13398:	cmp	r6, #32
   1339c:	beq	13704 <__assert_fail@plt+0x277c>
   133a0:	bhi	13448 <__assert_fail@plt+0x24c0>
   133a4:	cmp	r6, #9
   133a8:	beq	138ac <__assert_fail@plt+0x2924>
   133ac:	bhi	1340c <__assert_fail@plt+0x2484>
   133b0:	cmp	r6, #7
   133b4:	beq	138bc <__assert_fail@plt+0x2934>
   133b8:	bhi	138d8 <__assert_fail@plt+0x2950>
   133bc:	cmp	r6, #0
   133c0:	beq	13720 <__assert_fail@plt+0x2798>
   133c4:	ldr	r3, [sp, #76]	; 0x4c
   133c8:	cmp	r3, #1
   133cc:	bne	13924 <__assert_fail@plt+0x299c>
   133d0:	bl	10e68 <__ctype_b_loc@plt>
   133d4:	ldr	r2, [r0]
   133d8:	sxth	r3, r6
   133dc:	lsl	r3, r3, #1
   133e0:	ldrh	r5, [r2, r3]
   133e4:	ldr	r3, [sp, #76]	; 0x4c
   133e8:	ubfx	r5, r5, #14, #1
   133ec:	str	r3, [sp, #56]	; 0x38
   133f0:	ldr	r3, [sp, #24]
   133f4:	eor	fp, r5, #1
   133f8:	and	fp, fp, r3
   133fc:	ands	fp, fp, #255	; 0xff
   13400:	beq	135e0 <__assert_fail@plt+0x2658>
   13404:	mov	r5, #0
   13408:	b	139d0 <__assert_fail@plt+0x2a48>
   1340c:	cmp	r6, #11
   13410:	beq	138e0 <__assert_fail@plt+0x2958>
   13414:	bcc	138b4 <__assert_fail@plt+0x292c>
   13418:	cmp	r6, #12
   1341c:	beq	138e8 <__assert_fail@plt+0x2960>
   13420:	cmp	r6, #13
   13424:	moveq	r3, #114	; 0x72
   13428:	bne	133c4 <__assert_fail@plt+0x243c>
   1342c:	cmp	sl, #2
   13430:	movne	r2, #0
   13434:	andeq	r2, r7, #1
   13438:	cmp	r2, #0
   1343c:	beq	138c0 <__assert_fail@plt+0x2938>
   13440:	mov	sl, #2
   13444:	b	13318 <__assert_fail@plt+0x2390>
   13448:	cmp	r6, #37	; 0x25
   1344c:	beq	136b0 <__assert_fail@plt+0x2728>
   13450:	bhi	13464 <__assert_fail@plt+0x24dc>
   13454:	cmp	r6, #35	; 0x23
   13458:	beq	136f8 <__assert_fail@plt+0x2770>
   1345c:	mov	r5, #0
   13460:	b	13708 <__assert_fail@plt+0x2780>
   13464:	cmp	r6, #39	; 0x27
   13468:	bne	1345c <__assert_fail@plt+0x24d4>
   1346c:	cmp	sl, #2
   13470:	ldrne	r5, [sp, #36]	; 0x24
   13474:	movne	r3, r5
   13478:	strne	r3, [sp, #68]	; 0x44
   1347c:	bne	137fc <__assert_fail@plt+0x2874>
   13480:	cmp	r7, #0
   13484:	bne	13318 <__assert_fail@plt+0x2390>
   13488:	ldr	r3, [sp, #60]	; 0x3c
   1348c:	cmp	r9, #0
   13490:	clz	r3, r3
   13494:	lsr	r3, r3, #5
   13498:	moveq	r3, #0
   1349c:	cmp	r3, #0
   134a0:	strne	r9, [sp, #60]	; 0x3c
   134a4:	movne	r9, #0
   134a8:	bne	134b8 <__assert_fail@plt+0x2530>
   134ac:	cmp	r9, r4
   134b0:	movhi	r3, #39	; 0x27
   134b4:	strbhi	r3, [r8, r4]
   134b8:	add	r3, r4, #1
   134bc:	ldr	r5, [sp, #36]	; 0x24
   134c0:	mov	fp, #0
   134c4:	cmp	r3, r9
   134c8:	movcc	r2, #92	; 0x5c
   134cc:	str	fp, [sp, #52]	; 0x34
   134d0:	strbcc	r2, [r8, r3]
   134d4:	add	r3, r4, #2
   134d8:	add	r4, r4, #3
   134dc:	cmp	r3, r9
   134e0:	str	r5, [sp, #68]	; 0x44
   134e4:	movcc	r2, #39	; 0x27
   134e8:	strbcc	r2, [r8, r3]
   134ec:	b	135e0 <__assert_fail@plt+0x2658>
   134f0:	cmp	r6, #94	; 0x5e
   134f4:	beq	1345c <__assert_fail@plt+0x24d4>
   134f8:	bhi	136b8 <__assert_fail@plt+0x2730>
   134fc:	cmp	r6, #90	; 0x5a
   13500:	bhi	136a4 <__assert_fail@plt+0x271c>
   13504:	cmp	r6, #65	; 0x41
   13508:	bcs	136b0 <__assert_fail@plt+0x2728>
   1350c:	cmp	r6, #62	; 0x3e
   13510:	bls	1345c <__assert_fail@plt+0x24d4>
   13514:	cmp	r6, #63	; 0x3f
   13518:	bne	133c4 <__assert_fail@plt+0x243c>
   1351c:	cmp	sl, #2
   13520:	beq	13804 <__assert_fail@plt+0x287c>
   13524:	cmp	sl, #5
   13528:	movne	fp, #0
   1352c:	bne	13bd4 <__assert_fail@plt+0x2c4c>
   13530:	ldr	r3, [sp, #148]	; 0x94
   13534:	tst	r3, #4
   13538:	beq	1380c <__assert_fail@plt+0x2884>
   1353c:	ldr	r3, [sp, #28]
   13540:	add	r2, r3, #2
   13544:	ldr	r3, [sp, #40]	; 0x28
   13548:	cmp	r2, r3
   1354c:	bcs	1380c <__assert_fail@plt+0x2884>
   13550:	ldr	r1, [sp, #28]
   13554:	ldr	r3, [sp, #48]	; 0x30
   13558:	add	r3, r3, r1
   1355c:	ldrb	r1, [r3, #1]
   13560:	cmp	r1, #63	; 0x3f
   13564:	bne	1380c <__assert_fail@plt+0x2884>
   13568:	ldr	r3, [sp, #48]	; 0x30
   1356c:	ldrb	r6, [r3, r2]
   13570:	sub	r3, r6, #33	; 0x21
   13574:	uxtb	r3, r3
   13578:	cmp	r3, #29
   1357c:	bhi	13bdc <__assert_fail@plt+0x2c54>
   13580:	ldr	r0, [pc, #1804]	; 13c94 <__assert_fail@plt+0x2d0c>
   13584:	mov	r5, #1
   13588:	ands	r5, r0, r5, lsl r3
   1358c:	beq	13be4 <__assert_fail@plt+0x2c5c>
   13590:	cmp	r7, #0
   13594:	bne	13318 <__assert_fail@plt+0x2390>
   13598:	cmp	r9, r4
   1359c:	add	r3, r4, #1
   135a0:	str	r2, [sp, #28]
   135a4:	mov	r5, #0
   135a8:	strbhi	r1, [r8, r4]
   135ac:	cmp	r9, r3
   135b0:	mov	fp, r5
   135b4:	movhi	r1, #34	; 0x22
   135b8:	strbhi	r1, [r8, r3]
   135bc:	add	r3, r4, #2
   135c0:	cmp	r9, r3
   135c4:	movhi	r1, #34	; 0x22
   135c8:	strbhi	r1, [r8, r3]
   135cc:	add	r3, r4, #3
   135d0:	add	r4, r4, #4
   135d4:	cmp	r9, r3
   135d8:	movhi	r1, #63	; 0x3f
   135dc:	strbhi	r1, [r8, r3]
   135e0:	ldr	r3, [sp, #24]
   135e4:	eor	r3, r3, #1
   135e8:	cmp	sl, #2
   135ec:	orreq	r3, r3, #1
   135f0:	eor	r3, r3, #1
   135f4:	orr	r3, r7, r3
   135f8:	tst	r3, #255	; 0xff
   135fc:	beq	13628 <__assert_fail@plt+0x26a0>
   13600:	ldr	r3, [sp, #152]	; 0x98
   13604:	cmp	r3, #0
   13608:	beq	13628 <__assert_fail@plt+0x26a0>
   1360c:	ldr	r1, [sp, #152]	; 0x98
   13610:	ubfx	r2, r6, #5, #8
   13614:	and	r3, r6, #31
   13618:	ldr	r2, [r1, r2, lsl #2]
   1361c:	lsr	r3, r2, r3
   13620:	tst	r3, #1
   13624:	bne	13634 <__assert_fail@plt+0x26ac>
   13628:	ldr	r3, [sp, #64]	; 0x40
   1362c:	cmp	r3, #0
   13630:	beq	1382c <__assert_fail@plt+0x28a4>
   13634:	sub	r3, sl, #2
   13638:	cmp	r7, #0
   1363c:	clz	r3, r3
   13640:	lsr	r3, r3, #5
   13644:	bne	13318 <__assert_fail@plt+0x2390>
   13648:	ldr	r2, [sp, #52]	; 0x34
   1364c:	eor	r2, r2, #1
   13650:	ands	r3, r3, r2
   13654:	beq	1368c <__assert_fail@plt+0x2704>
   13658:	cmp	r9, r4
   1365c:	str	r3, [sp, #52]	; 0x34
   13660:	movhi	r2, #39	; 0x27
   13664:	strbhi	r2, [r8, r4]
   13668:	add	r2, r4, #1
   1366c:	cmp	r9, r2
   13670:	movhi	r1, #36	; 0x24
   13674:	strbhi	r1, [r8, r2]
   13678:	add	r2, r4, #2
   1367c:	add	r4, r4, #3
   13680:	cmp	r9, r2
   13684:	movhi	r1, #39	; 0x27
   13688:	strbhi	r1, [r8, r2]
   1368c:	cmp	r9, r4
   13690:	ldr	fp, [sp, #36]	; 0x24
   13694:	movhi	r3, #92	; 0x5c
   13698:	strbhi	r3, [r8, r4]
   1369c:	add	r4, r4, #1
   136a0:	b	1382c <__assert_fail@plt+0x28a4>
   136a4:	cmp	r6, #92	; 0x5c
   136a8:	beq	13814 <__assert_fail@plt+0x288c>
   136ac:	bls	1345c <__assert_fail@plt+0x24d4>
   136b0:	ldr	r5, [sp, #36]	; 0x24
   136b4:	b	137fc <__assert_fail@plt+0x2874>
   136b8:	cmp	r6, #122	; 0x7a
   136bc:	bhi	136dc <__assert_fail@plt+0x2754>
   136c0:	cmp	r6, #97	; 0x61
   136c4:	bcs	136b0 <__assert_fail@plt+0x2728>
   136c8:	cmp	r6, #95	; 0x5f
   136cc:	beq	136b0 <__assert_fail@plt+0x2728>
   136d0:	cmp	r6, #96	; 0x60
   136d4:	bne	133c4 <__assert_fail@plt+0x243c>
   136d8:	b	1345c <__assert_fail@plt+0x24d4>
   136dc:	cmp	r6, #124	; 0x7c
   136e0:	beq	1345c <__assert_fail@plt+0x24d4>
   136e4:	bcc	138f0 <__assert_fail@plt+0x2968>
   136e8:	cmp	r6, #125	; 0x7d
   136ec:	beq	138f0 <__assert_fail@plt+0x2968>
   136f0:	cmp	r6, #126	; 0x7e
   136f4:	bne	133c4 <__assert_fail@plt+0x243c>
   136f8:	ldr	r3, [sp, #28]
   136fc:	cmp	r3, #0
   13700:	bne	1380c <__assert_fail@plt+0x2884>
   13704:	ldr	r5, [sp, #36]	; 0x24
   13708:	cmp	sl, #2
   1370c:	movne	fp, #0
   13710:	andeq	fp, r7, #1
   13714:	cmp	fp, #0
   13718:	beq	135e0 <__assert_fail@plt+0x2658>
   1371c:	b	13440 <__assert_fail@plt+0x24b8>
   13720:	ldr	r3, [sp, #24]
   13724:	cmp	r3, #0
   13728:	beq	137f0 <__assert_fail@plt+0x2868>
   1372c:	sub	r2, sl, #2
   13730:	cmp	r7, #0
   13734:	clz	r2, r2
   13738:	lsr	r2, r2, #5
   1373c:	bne	13314 <__assert_fail@plt+0x238c>
   13740:	ldr	r3, [sp, #52]	; 0x34
   13744:	eor	r3, r3, #1
   13748:	ands	r2, r2, r3
   1374c:	moveq	r3, r4
   13750:	beq	13788 <__assert_fail@plt+0x2800>
   13754:	cmp	r9, r4
   13758:	str	r2, [sp, #52]	; 0x34
   1375c:	movhi	r3, #39	; 0x27
   13760:	strbhi	r3, [r8, r4]
   13764:	add	r3, r4, #1
   13768:	cmp	r9, r3
   1376c:	movhi	r1, #36	; 0x24
   13770:	strbhi	r1, [r8, r3]
   13774:	add	r3, r4, #2
   13778:	cmp	r9, r3
   1377c:	movhi	r1, #39	; 0x27
   13780:	strbhi	r1, [r8, r3]
   13784:	add	r3, r4, #3
   13788:	cmp	r9, r3
   1378c:	add	r4, r3, #1
   13790:	movhi	r2, #92	; 0x5c
   13794:	strbhi	r2, [r8, r3]
   13798:	cmp	fp, #0
   1379c:	beq	13bc4 <__assert_fail@plt+0x2c3c>
   137a0:	ldr	r2, [sp, #28]
   137a4:	ldr	r1, [sp, #40]	; 0x28
   137a8:	add	r2, r2, #1
   137ac:	cmp	r2, r1
   137b0:	bcs	137e8 <__assert_fail@plt+0x2860>
   137b4:	ldr	r1, [sp, #48]	; 0x30
   137b8:	mov	r6, #48	; 0x30
   137bc:	ldrb	r2, [r1, r2]
   137c0:	sub	r2, r2, #48	; 0x30
   137c4:	cmp	r2, #9
   137c8:	bhi	13bd4 <__assert_fail@plt+0x2c4c>
   137cc:	cmp	r9, r4
   137d0:	add	r2, r3, #2
   137d4:	strbhi	r6, [r8, r4]
   137d8:	cmp	r9, r2
   137dc:	add	r4, r3, #3
   137e0:	movhi	r1, #48	; 0x30
   137e4:	strbhi	r1, [r8, r2]
   137e8:	mov	r5, #0
   137ec:	b	13bcc <__assert_fail@plt+0x2c44>
   137f0:	ldr	r3, [sp, #148]	; 0x94
   137f4:	ands	r5, r3, #1
   137f8:	bne	13880 <__assert_fail@plt+0x28f8>
   137fc:	mov	fp, #0
   13800:	b	135e0 <__assert_fail@plt+0x2658>
   13804:	cmp	r7, #0
   13808:	bne	13318 <__assert_fail@plt+0x2390>
   1380c:	mov	r5, #0
   13810:	b	137fc <__assert_fail@plt+0x2874>
   13814:	cmp	sl, #2
   13818:	bne	1388c <__assert_fail@plt+0x2904>
   1381c:	cmp	r7, #0
   13820:	bne	13318 <__assert_fail@plt+0x2390>
   13824:	mov	r5, r7
   13828:	mov	fp, r7
   1382c:	ldr	r3, [sp, #52]	; 0x34
   13830:	eor	fp, fp, #1
   13834:	tst	r3, fp
   13838:	beq	13864 <__assert_fail@plt+0x28dc>
   1383c:	cmp	r9, r4
   13840:	movhi	r3, #39	; 0x27
   13844:	strbhi	r3, [r8, r4]
   13848:	add	r3, r4, #1
   1384c:	add	r4, r4, #2
   13850:	cmp	r9, r3
   13854:	movhi	r2, #39	; 0x27
   13858:	strbhi	r2, [r8, r3]
   1385c:	mov	r3, #0
   13860:	str	r3, [sp, #52]	; 0x34
   13864:	cmp	r9, r4
   13868:	ldr	r3, [sp, #72]	; 0x48
   1386c:	strbhi	r6, [r8, r4]
   13870:	cmp	r5, #0
   13874:	add	r4, r4, #1
   13878:	moveq	r3, #0
   1387c:	str	r3, [sp, #72]	; 0x48
   13880:	ldr	r3, [sp, #28]
   13884:	add	r3, r3, #1
   13888:	b	13040 <__assert_fail@plt+0x20b8>
   1388c:	ldr	r3, [sp, #24]
   13890:	and	r3, r3, r7
   13894:	tst	r5, r3
   13898:	moveq	r3, r6
   1389c:	beq	1342c <__assert_fail@plt+0x24a4>
   138a0:	mov	fp, #0
   138a4:	mov	r5, fp
   138a8:	b	1382c <__assert_fail@plt+0x28a4>
   138ac:	mov	r3, #116	; 0x74
   138b0:	b	1342c <__assert_fail@plt+0x24a4>
   138b4:	mov	r3, #110	; 0x6e
   138b8:	b	1342c <__assert_fail@plt+0x24a4>
   138bc:	mov	r3, #97	; 0x61
   138c0:	ldr	r2, [sp, #24]
   138c4:	cmp	r2, #0
   138c8:	beq	1380c <__assert_fail@plt+0x2884>
   138cc:	mov	r6, r3
   138d0:	mov	r5, #0
   138d4:	b	13634 <__assert_fail@plt+0x26ac>
   138d8:	mov	r3, #98	; 0x62
   138dc:	b	138c0 <__assert_fail@plt+0x2938>
   138e0:	mov	r3, #118	; 0x76
   138e4:	b	138c0 <__assert_fail@plt+0x2938>
   138e8:	mov	r3, #102	; 0x66
   138ec:	b	138c0 <__assert_fail@plt+0x2938>
   138f0:	ldr	r3, [sp, #40]	; 0x28
   138f4:	cmn	r3, #1
   138f8:	bne	13918 <__assert_fail@plt+0x2990>
   138fc:	ldr	r3, [sp, #48]	; 0x30
   13900:	ldrb	r3, [r3, #1]
   13904:	adds	r3, r3, #0
   13908:	movne	r3, #1
   1390c:	cmp	r3, #0
   13910:	bne	1380c <__assert_fail@plt+0x2884>
   13914:	b	136f8 <__assert_fail@plt+0x2770>
   13918:	ldr	r3, [sp, #40]	; 0x28
   1391c:	subs	r3, r3, #1
   13920:	b	13908 <__assert_fail@plt+0x2980>
   13924:	mov	r3, #0
   13928:	mov	r2, #0
   1392c:	strd	r2, [sp, #96]	; 0x60
   13930:	ldr	r3, [sp, #40]	; 0x28
   13934:	cmn	r3, #1
   13938:	bne	13948 <__assert_fail@plt+0x29c0>
   1393c:	ldr	r0, [sp, #48]	; 0x30
   13940:	bl	10e80 <strlen@plt>
   13944:	str	r0, [sp, #40]	; 0x28
   13948:	ldr	r5, [sp, #36]	; 0x24
   1394c:	mov	r3, #0
   13950:	str	r3, [sp, #56]	; 0x38
   13954:	ldr	r3, [sp, #28]
   13958:	add	r0, sp, #92	; 0x5c
   1395c:	ldr	r1, [sp, #40]	; 0x28
   13960:	ldr	r2, [sp, #56]	; 0x38
   13964:	add	r2, r3, r2
   13968:	ldr	r3, [sp, #48]	; 0x30
   1396c:	add	fp, r3, r2
   13970:	sub	r2, r1, r2
   13974:	add	r3, sp, #96	; 0x60
   13978:	mov	r1, fp
   1397c:	bl	1545c <__assert_fail@plt+0x44d4>
   13980:	subs	r2, r0, #0
   13984:	beq	139c4 <__assert_fail@plt+0x2a3c>
   13988:	cmn	r2, #1
   1398c:	beq	13b98 <__assert_fail@plt+0x2c10>
   13990:	cmn	r2, #2
   13994:	bne	13b08 <__assert_fail@plt+0x2b80>
   13998:	ldr	r3, [sp, #28]
   1399c:	ldr	r2, [sp, #56]	; 0x38
   139a0:	add	r3, r3, r2
   139a4:	ldr	r2, [sp, #40]	; 0x28
   139a8:	cmp	r2, r3
   139ac:	bls	13b98 <__assert_fail@plt+0x2c10>
   139b0:	ldr	r2, [sp, #56]	; 0x38
   139b4:	ldr	r3, [sp, #80]	; 0x50
   139b8:	ldrb	r5, [r3, r2]
   139bc:	cmp	r5, #0
   139c0:	bne	13af8 <__assert_fail@plt+0x2b70>
   139c4:	ldr	r3, [sp, #56]	; 0x38
   139c8:	cmp	r3, #1
   139cc:	bls	133f0 <__assert_fail@plt+0x2468>
   139d0:	ldr	r3, [sp, #28]
   139d4:	mov	fp, #0
   139d8:	mov	ip, #92	; 0x5c
   139dc:	ldr	r2, [sp, #56]	; 0x38
   139e0:	add	r3, r3, r2
   139e4:	ldr	r2, [sp, #24]
   139e8:	str	r3, [sp, #36]	; 0x24
   139ec:	eor	r3, r5, #1
   139f0:	and	r3, r3, r2
   139f4:	mov	r2, #39	; 0x27
   139f8:	uxtb	r3, r3
   139fc:	cmp	r3, #0
   13a00:	beq	13ba0 <__assert_fail@plt+0x2c18>
   13a04:	sub	r0, sl, #2
   13a08:	cmp	r7, #0
   13a0c:	clz	r0, r0
   13a10:	lsr	r0, r0, #5
   13a14:	bne	13314 <__assert_fail@plt+0x238c>
   13a18:	ldr	r1, [sp, #52]	; 0x34
   13a1c:	eor	r1, r1, #1
   13a20:	ands	r1, r0, r1
   13a24:	beq	13a54 <__assert_fail@plt+0x2acc>
   13a28:	cmp	r9, r4
   13a2c:	add	r0, r4, #1
   13a30:	str	r1, [sp, #52]	; 0x34
   13a34:	strbhi	r2, [r8, r4]
   13a38:	cmp	r9, r0
   13a3c:	movhi	lr, #36	; 0x24
   13a40:	strbhi	lr, [r8, r0]
   13a44:	add	r0, r4, #2
   13a48:	add	r4, r4, #3
   13a4c:	cmp	r9, r0
   13a50:	strbhi	r2, [r8, r0]
   13a54:	cmp	r9, r4
   13a58:	add	r0, r4, #1
   13a5c:	mov	fp, r3
   13a60:	strbhi	ip, [r8, r4]
   13a64:	cmp	r9, r0
   13a68:	lsrhi	r1, r6, #6
   13a6c:	addhi	r1, r1, #48	; 0x30
   13a70:	strbhi	r1, [r8, r0]
   13a74:	add	r0, r4, #2
   13a78:	add	r4, r4, #3
   13a7c:	cmp	r9, r0
   13a80:	ubfxhi	r1, r6, #3, #3
   13a84:	and	r6, r6, #7
   13a88:	add	r6, r6, #48	; 0x30
   13a8c:	addhi	r1, r1, #48	; 0x30
   13a90:	strbhi	r1, [r8, r0]
   13a94:	eor	r0, fp, #1
   13a98:	ldr	r1, [sp, #28]
   13a9c:	ldr	lr, [sp, #52]	; 0x34
   13aa0:	add	r1, r1, #1
   13aa4:	and	r0, r0, lr
   13aa8:	ldr	lr, [sp, #36]	; 0x24
   13aac:	cmp	r1, lr
   13ab0:	bcs	1382c <__assert_fail@plt+0x28a4>
   13ab4:	cmp	r0, #0
   13ab8:	beq	13adc <__assert_fail@plt+0x2b54>
   13abc:	cmp	r9, r4
   13ac0:	add	r0, r4, #1
   13ac4:	strbhi	r2, [r8, r4]
   13ac8:	cmp	r9, r0
   13acc:	add	r4, r4, #2
   13ad0:	strbhi	r2, [r8, r0]
   13ad4:	mov	r0, #0
   13ad8:	str	r0, [sp, #52]	; 0x34
   13adc:	ldr	r0, [sp, #48]	; 0x30
   13ae0:	cmp	r9, r4
   13ae4:	str	r1, [sp, #28]
   13ae8:	strbhi	r6, [r8, r4]
   13aec:	add	r4, r4, #1
   13af0:	ldrb	r6, [r0, r1]
   13af4:	b	139fc <__assert_fail@plt+0x2a74>
   13af8:	ldr	r3, [sp, #56]	; 0x38
   13afc:	add	r3, r3, #1
   13b00:	str	r3, [sp, #56]	; 0x38
   13b04:	b	13998 <__assert_fail@plt+0x2a10>
   13b08:	cmp	sl, #2
   13b0c:	movne	r3, #0
   13b10:	andeq	r3, r7, #1
   13b14:	cmp	r3, #0
   13b18:	movne	r1, #1
   13b1c:	bne	13b78 <__assert_fail@plt+0x2bf0>
   13b20:	ldr	r0, [sp, #92]	; 0x5c
   13b24:	str	r2, [sp, #84]	; 0x54
   13b28:	bl	10dc0 <iswprint@plt>
   13b2c:	ldr	r3, [sp, #56]	; 0x38
   13b30:	cmp	r0, #0
   13b34:	add	r0, sp, #96	; 0x60
   13b38:	moveq	r5, #0
   13b3c:	ldr	r2, [sp, #84]	; 0x54
   13b40:	add	r3, r3, r2
   13b44:	str	r3, [sp, #56]	; 0x38
   13b48:	bl	10d60 <mbsinit@plt>
   13b4c:	cmp	r0, #0
   13b50:	beq	13954 <__assert_fail@plt+0x29cc>
   13b54:	b	139c4 <__assert_fail@plt+0x2a3c>
   13b58:	ldrb	r3, [fp, #1]!
   13b5c:	cmp	r3, #94	; 0x5e
   13b60:	beq	13440 <__assert_fail@plt+0x24b8>
   13b64:	bhi	13b84 <__assert_fail@plt+0x2bfc>
   13b68:	sub	r3, r3, #91	; 0x5b
   13b6c:	cmp	r3, #1
   13b70:	bls	13440 <__assert_fail@plt+0x24b8>
   13b74:	add	r1, r1, #1
   13b78:	cmp	r1, r2
   13b7c:	bne	13b58 <__assert_fail@plt+0x2bd0>
   13b80:	b	13b20 <__assert_fail@plt+0x2b98>
   13b84:	cmp	r3, #96	; 0x60
   13b88:	beq	13440 <__assert_fail@plt+0x24b8>
   13b8c:	cmp	r3, #124	; 0x7c
   13b90:	bne	13b74 <__assert_fail@plt+0x2bec>
   13b94:	b	13440 <__assert_fail@plt+0x24b8>
   13b98:	mov	r5, #0
   13b9c:	b	139c4 <__assert_fail@plt+0x2a3c>
   13ba0:	ldr	r1, [sp, #64]	; 0x40
   13ba4:	cmp	r1, #0
   13ba8:	beq	13a94 <__assert_fail@plt+0x2b0c>
   13bac:	cmp	r9, r4
   13bb0:	mov	r1, #0
   13bb4:	strbhi	ip, [r8, r4]
   13bb8:	add	r4, r4, #1
   13bbc:	str	r1, [sp, #64]	; 0x40
   13bc0:	b	13a94 <__assert_fail@plt+0x2b0c>
   13bc4:	mov	r5, fp
   13bc8:	ldr	fp, [sp, #24]
   13bcc:	mov	r6, #48	; 0x30
   13bd0:	b	135e0 <__assert_fail@plt+0x2658>
   13bd4:	mov	r5, #0
   13bd8:	b	135e0 <__assert_fail@plt+0x2658>
   13bdc:	mov	r6, r1
   13be0:	b	1380c <__assert_fail@plt+0x2884>
   13be4:	mov	r6, r1
   13be8:	b	137fc <__assert_fail@plt+0x2874>
   13bec:	ldr	r2, [sp, #28]
   13bf0:	ldr	r3, [sp, #40]	; 0x28
   13bf4:	subs	r3, r3, r2
   13bf8:	movne	r3, #1
   13bfc:	b	13064 <__assert_fail@plt+0x20dc>
   13c00:	ldr	r3, [sp, #60]	; 0x3c
   13c04:	mov	sl, #2
   13c08:	ldr	r7, [sp, #72]	; 0x48
   13c0c:	adds	r6, r3, #0
   13c10:	mov	r5, r3
   13c14:	movne	r6, #1
   13c18:	cmp	r9, #0
   13c1c:	movne	r6, #0
   13c20:	cmp	r6, #0
   13c24:	bne	12ff4 <__assert_fail@plt+0x206c>
   13c28:	ldr	r3, [sp, #68]	; 0x44
   13c2c:	ldr	r2, [sp, #44]	; 0x2c
   13c30:	cmp	r2, #0
   13c34:	moveq	r3, #0
   13c38:	andne	r3, r3, #1
   13c3c:	cmp	r3, #0
   13c40:	movne	r3, r2
   13c44:	subne	r3, r3, #1
   13c48:	bne	13c78 <__assert_fail@plt+0x2cf0>
   13c4c:	cmp	r9, r4
   13c50:	movhi	r3, #0
   13c54:	strbhi	r3, [r8, r4]
   13c58:	mov	r0, r4
   13c5c:	add	sp, sp, #108	; 0x6c
   13c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c64:	mov	r3, r7
   13c68:	b	13c2c <__assert_fail@plt+0x2ca4>
   13c6c:	cmp	r9, r4
   13c70:	strbhi	r2, [r8, r4]
   13c74:	add	r4, r4, #1
   13c78:	ldrb	r2, [r3, #1]!
   13c7c:	cmp	r2, #0
   13c80:	bne	13c6c <__assert_fail@plt+0x2ce4>
   13c84:	b	13c4c <__assert_fail@plt+0x2cc4>
   13c88:	andeq	r6, r1, ip, asr #4
   13c8c:	andeq	r6, r1, pc, asr r2
   13c90:	andeq	r6, r1, sp, asr r2
   13c94:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c9c:	sub	sp, sp, #52	; 0x34
   13ca0:	mov	r6, r0
   13ca4:	mov	r5, r3
   13ca8:	mov	r8, r1
   13cac:	mov	r9, r2
   13cb0:	bl	10ea4 <__errno_location@plt>
   13cb4:	ldr	r3, [r0]
   13cb8:	cmn	r6, #-2147483647	; 0x80000001
   13cbc:	str	r0, [sp, #24]
   13cc0:	ldr	r7, [pc, #368]	; 13e38 <__assert_fail@plt+0x2eb0>
   13cc4:	str	r3, [sp, #32]
   13cc8:	movne	r3, #0
   13ccc:	moveq	r3, #1
   13cd0:	orrs	r3, r3, r6, lsr #31
   13cd4:	ldr	r4, [r7]
   13cd8:	beq	13ce0 <__assert_fail@plt+0x2d58>
   13cdc:	bl	10f70 <abort@plt>
   13ce0:	ldr	r2, [r7, #4]
   13ce4:	cmp	r2, r6
   13ce8:	bgt	13d58 <__assert_fail@plt+0x2dd0>
   13cec:	add	sl, r7, #8
   13cf0:	mov	r3, #8
   13cf4:	cmp	r4, sl
   13cf8:	add	r1, sp, #44	; 0x2c
   13cfc:	str	r2, [sp, #44]	; 0x2c
   13d00:	sub	r2, r6, r2
   13d04:	movne	r0, r4
   13d08:	moveq	r0, #0
   13d0c:	add	r2, r2, #1
   13d10:	str	r3, [sp]
   13d14:	mvn	r3, #-2147483648	; 0x80000000
   13d18:	bl	14a58 <__assert_fail@plt+0x3ad0>
   13d1c:	cmp	r4, sl
   13d20:	mov	fp, r0
   13d24:	str	r0, [r7]
   13d28:	ldmeq	r4, {r0, r1}
   13d2c:	mov	r4, fp
   13d30:	ldr	r2, [sp, #44]	; 0x2c
   13d34:	stmeq	fp, {r0, r1}
   13d38:	mov	r1, #0
   13d3c:	ldr	r0, [r7, #4]
   13d40:	sub	r2, r2, r0
   13d44:	add	r0, fp, r0, lsl #3
   13d48:	lsl	r2, r2, #3
   13d4c:	bl	10ebc <memset@plt>
   13d50:	ldr	r3, [sp, #44]	; 0x2c
   13d54:	str	r3, [r7, #4]
   13d58:	ldr	r3, [r5, #4]
   13d5c:	add	sl, r4, r6, lsl #3
   13d60:	mov	r2, r8
   13d64:	ldr	fp, [r4, r6, lsl #3]
   13d68:	ldr	r7, [sl, #4]
   13d6c:	orr	r3, r3, #1
   13d70:	str	r3, [sp, #28]
   13d74:	add	r3, r5, #8
   13d78:	mov	r1, fp
   13d7c:	str	r3, [sp, #36]	; 0x24
   13d80:	mov	r0, r7
   13d84:	ldr	r3, [r5, #44]	; 0x2c
   13d88:	str	r3, [sp, #16]
   13d8c:	ldr	r3, [r5, #40]	; 0x28
   13d90:	str	r3, [sp, #12]
   13d94:	add	r3, r5, #8
   13d98:	str	r3, [sp, #8]
   13d9c:	ldr	r3, [sp, #28]
   13da0:	str	r3, [sp, #4]
   13da4:	ldr	r3, [r5]
   13da8:	str	r3, [sp]
   13dac:	mov	r3, r9
   13db0:	bl	12fa8 <__assert_fail@plt+0x2020>
   13db4:	cmp	fp, r0
   13db8:	bhi	13e20 <__assert_fail@plt+0x2e98>
   13dbc:	ldr	r3, [pc, #120]	; 13e3c <__assert_fail@plt+0x2eb4>
   13dc0:	add	fp, r0, #1
   13dc4:	str	fp, [r4, r6, lsl #3]
   13dc8:	cmp	r7, r3
   13dcc:	beq	13dd8 <__assert_fail@plt+0x2e50>
   13dd0:	mov	r0, r7
   13dd4:	bl	12bc0 <__assert_fail@plt+0x1c38>
   13dd8:	mov	r0, fp
   13ddc:	bl	14948 <__assert_fail@plt+0x39c0>
   13de0:	ldr	r3, [r5, #44]	; 0x2c
   13de4:	mov	r2, r8
   13de8:	mov	r1, fp
   13dec:	str	r0, [sl, #4]
   13df0:	mov	r7, r0
   13df4:	str	r3, [sp, #16]
   13df8:	ldr	r3, [r5, #40]	; 0x28
   13dfc:	str	r3, [sp, #12]
   13e00:	add	r3, r5, #8
   13e04:	str	r3, [sp, #8]
   13e08:	ldr	r3, [sp, #28]
   13e0c:	str	r3, [sp, #4]
   13e10:	ldr	r3, [r5]
   13e14:	str	r3, [sp]
   13e18:	mov	r3, r9
   13e1c:	bl	12fa8 <__assert_fail@plt+0x2020>
   13e20:	ldr	r3, [sp, #24]
   13e24:	mov	r0, r7
   13e28:	ldr	r2, [sp, #32]
   13e2c:	str	r2, [r3]
   13e30:	add	sp, sp, #52	; 0x34
   13e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e38:	andeq	r7, r2, r4, lsl #2
   13e3c:	andeq	r7, r2, r8, ror r1
   13e40:	push	{r4, r5, r6, lr}
   13e44:	mov	r5, r0
   13e48:	bl	10ea4 <__errno_location@plt>
   13e4c:	mov	r4, r0
   13e50:	cmp	r5, #0
   13e54:	ldr	r0, [pc, #20]	; 13e70 <__assert_fail@plt+0x2ee8>
   13e58:	mov	r1, #48	; 0x30
   13e5c:	movne	r0, r5
   13e60:	ldr	r6, [r4]
   13e64:	bl	14b48 <__assert_fail@plt+0x3bc0>
   13e68:	str	r6, [r4]
   13e6c:	pop	{r4, r5, r6, pc}
   13e70:	andeq	r7, r2, r8, ror r2
   13e74:	ldr	r3, [pc, #12]	; 13e88 <__assert_fail@plt+0x2f00>
   13e78:	cmp	r0, #0
   13e7c:	moveq	r0, r3
   13e80:	ldr	r0, [r0]
   13e84:	bx	lr
   13e88:	andeq	r7, r2, r8, ror r2
   13e8c:	ldr	r3, [pc, #12]	; 13ea0 <__assert_fail@plt+0x2f18>
   13e90:	cmp	r0, #0
   13e94:	moveq	r0, r3
   13e98:	str	r1, [r0]
   13e9c:	bx	lr
   13ea0:	andeq	r7, r2, r8, ror r2
   13ea4:	ldr	r3, [pc, #52]	; 13ee0 <__assert_fail@plt+0x2f58>
   13ea8:	cmp	r0, #0
   13eac:	push	{lr}		; (str lr, [sp, #-4]!)
   13eb0:	lsr	lr, r1, #5
   13eb4:	and	r1, r1, #31
   13eb8:	moveq	r0, r3
   13ebc:	add	r3, r0, #8
   13ec0:	ldr	ip, [r3, lr, lsl #2]
   13ec4:	lsr	r0, ip, r1
   13ec8:	eor	r2, r2, r0
   13ecc:	and	r0, r0, #1
   13ed0:	and	r2, r2, #1
   13ed4:	eor	r1, ip, r2, lsl r1
   13ed8:	str	r1, [r3, lr, lsl #2]
   13edc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee0:	andeq	r7, r2, r8, ror r2
   13ee4:	ldr	r3, [pc, #16]	; 13efc <__assert_fail@plt+0x2f74>
   13ee8:	cmp	r0, #0
   13eec:	movne	r3, r0
   13ef0:	ldr	r0, [r3, #4]
   13ef4:	str	r1, [r3, #4]
   13ef8:	bx	lr
   13efc:	andeq	r7, r2, r8, ror r2
   13f00:	ldr	r3, [pc, #44]	; 13f34 <__assert_fail@plt+0x2fac>
   13f04:	cmp	r0, #0
   13f08:	moveq	r0, r3
   13f0c:	mov	r3, #10
   13f10:	cmp	r2, #0
   13f14:	cmpne	r1, #0
   13f18:	str	r3, [r0]
   13f1c:	bne	13f28 <__assert_fail@plt+0x2fa0>
   13f20:	push	{r4, lr}
   13f24:	bl	10f70 <abort@plt>
   13f28:	str	r1, [r0, #40]	; 0x28
   13f2c:	str	r2, [r0, #44]	; 0x2c
   13f30:	bx	lr
   13f34:	andeq	r7, r2, r8, ror r2
   13f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f3c:	sub	sp, sp, #24
   13f40:	mov	sl, r3
   13f44:	mov	r7, r0
   13f48:	mov	r8, r1
   13f4c:	mov	r9, r2
   13f50:	ldr	r4, [sp, #56]	; 0x38
   13f54:	ldr	r3, [pc, #88]	; 13fb4 <__assert_fail@plt+0x302c>
   13f58:	cmp	r4, #0
   13f5c:	moveq	r4, r3
   13f60:	bl	10ea4 <__errno_location@plt>
   13f64:	ldr	r3, [r4, #44]	; 0x2c
   13f68:	mov	r5, r0
   13f6c:	mov	r2, r9
   13f70:	mov	r1, r8
   13f74:	mov	r0, r7
   13f78:	ldr	r6, [r5]
   13f7c:	str	r3, [sp, #16]
   13f80:	ldr	r3, [r4, #40]	; 0x28
   13f84:	str	r3, [sp, #12]
   13f88:	add	r3, r4, #8
   13f8c:	str	r3, [sp, #8]
   13f90:	ldr	r3, [r4, #4]
   13f94:	str	r3, [sp, #4]
   13f98:	ldr	r3, [r4]
   13f9c:	str	r3, [sp]
   13fa0:	mov	r3, sl
   13fa4:	bl	12fa8 <__assert_fail@plt+0x2020>
   13fa8:	str	r6, [r5]
   13fac:	add	sp, sp, #24
   13fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fb4:	andeq	r7, r2, r8, ror r2
   13fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fbc:	cmp	r3, #0
   13fc0:	sub	sp, sp, #44	; 0x2c
   13fc4:	mov	r6, r2
   13fc8:	mov	sl, r1
   13fcc:	mov	r9, r0
   13fd0:	ldr	r4, [pc, #176]	; 14088 <__assert_fail@plt+0x3100>
   13fd4:	movne	r4, r3
   13fd8:	bl	10ea4 <__errno_location@plt>
   13fdc:	ldr	r3, [r0]
   13fe0:	mov	r1, #0
   13fe4:	mov	r2, r9
   13fe8:	mov	r8, r0
   13fec:	mov	r0, r1
   13ff0:	ldr	r5, [r4, #4]
   13ff4:	add	fp, r4, #8
   13ff8:	str	r3, [sp, #28]
   13ffc:	ldr	r3, [r4, #44]	; 0x2c
   14000:	cmp	r6, #0
   14004:	orreq	r5, r5, #1
   14008:	str	r3, [sp, #16]
   1400c:	ldr	r3, [r4, #40]	; 0x28
   14010:	stmib	sp, {r5, fp}
   14014:	str	r3, [sp, #12]
   14018:	ldr	r3, [r4]
   1401c:	str	r3, [sp]
   14020:	mov	r3, sl
   14024:	bl	12fa8 <__assert_fail@plt+0x2020>
   14028:	add	r1, r0, #1
   1402c:	mov	r7, r0
   14030:	mov	r0, r1
   14034:	str	r1, [sp, #36]	; 0x24
   14038:	bl	14948 <__assert_fail@plt+0x39c0>
   1403c:	ldr	r3, [r4, #44]	; 0x2c
   14040:	mov	r2, r9
   14044:	ldr	r1, [sp, #36]	; 0x24
   14048:	str	r3, [sp, #16]
   1404c:	ldr	r3, [r4, #40]	; 0x28
   14050:	stmib	sp, {r5, fp}
   14054:	str	r0, [sp, #32]
   14058:	str	r3, [sp, #12]
   1405c:	ldr	r3, [r4]
   14060:	str	r3, [sp]
   14064:	mov	r3, sl
   14068:	bl	12fa8 <__assert_fail@plt+0x2020>
   1406c:	ldr	r3, [sp, #28]
   14070:	cmp	r6, #0
   14074:	ldr	r0, [sp, #32]
   14078:	str	r3, [r8]
   1407c:	strne	r7, [r6]
   14080:	add	sp, sp, #44	; 0x2c
   14084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14088:	andeq	r7, r2, r8, ror r2
   1408c:	mov	r3, r2
   14090:	mov	r2, #0
   14094:	b	13fb8 <__assert_fail@plt+0x3030>
   14098:	push	{r4, r5, r6, r7, r8, lr}
   1409c:	mov	r6, #1
   140a0:	ldr	r4, [pc, #100]	; 1410c <__assert_fail@plt+0x3184>
   140a4:	ldr	r5, [r4]
   140a8:	add	r7, r5, #4
   140ac:	ldr	r3, [r4, #4]
   140b0:	cmp	r3, r6
   140b4:	bgt	140fc <__assert_fail@plt+0x3174>
   140b8:	ldr	r6, [pc, #80]	; 14110 <__assert_fail@plt+0x3188>
   140bc:	ldr	r0, [r5, #4]
   140c0:	cmp	r0, r6
   140c4:	beq	140d8 <__assert_fail@plt+0x3150>
   140c8:	bl	12bc0 <__assert_fail@plt+0x1c38>
   140cc:	mov	r3, #256	; 0x100
   140d0:	str	r3, [r4, #8]
   140d4:	str	r6, [r4, #12]
   140d8:	ldr	r6, [pc, #52]	; 14114 <__assert_fail@plt+0x318c>
   140dc:	cmp	r5, r6
   140e0:	beq	140f0 <__assert_fail@plt+0x3168>
   140e4:	mov	r0, r5
   140e8:	bl	12bc0 <__assert_fail@plt+0x1c38>
   140ec:	str	r6, [r4]
   140f0:	mov	r3, #1
   140f4:	str	r3, [r4, #4]
   140f8:	pop	{r4, r5, r6, r7, r8, pc}
   140fc:	ldr	r0, [r7, r6, lsl #3]
   14100:	add	r6, r6, #1
   14104:	bl	12bc0 <__assert_fail@plt+0x1c38>
   14108:	b	140ac <__assert_fail@plt+0x3124>
   1410c:	andeq	r7, r2, r4, lsl #2
   14110:	andeq	r7, r2, r8, ror r1
   14114:	andeq	r7, r2, ip, lsl #2
   14118:	ldr	r3, [pc, #4]	; 14124 <__assert_fail@plt+0x319c>
   1411c:	mvn	r2, #0
   14120:	b	13c98 <__assert_fail@plt+0x2d10>
   14124:	andeq	r7, r2, r8, ror r2
   14128:	ldr	r3, [pc]	; 14130 <__assert_fail@plt+0x31a8>
   1412c:	b	13c98 <__assert_fail@plt+0x2d10>
   14130:	andeq	r7, r2, r8, ror r2
   14134:	mov	r1, r0
   14138:	mov	r0, #0
   1413c:	b	14118 <__assert_fail@plt+0x3190>
   14140:	mov	r2, r1
   14144:	mov	r1, r0
   14148:	mov	r0, #0
   1414c:	b	14128 <__assert_fail@plt+0x31a0>
   14150:	push	{r4, r5, lr}
   14154:	sub	sp, sp, #52	; 0x34
   14158:	mov	r5, r2
   1415c:	mov	r4, r0
   14160:	mov	r0, sp
   14164:	bl	12e4c <__assert_fail@plt+0x1ec4>
   14168:	mov	r3, sp
   1416c:	mvn	r2, #0
   14170:	mov	r1, r5
   14174:	mov	r0, r4
   14178:	bl	13c98 <__assert_fail@plt+0x2d10>
   1417c:	add	sp, sp, #52	; 0x34
   14180:	pop	{r4, r5, pc}
   14184:	push	{r4, r5, r6, lr}
   14188:	sub	sp, sp, #48	; 0x30
   1418c:	mov	r5, r2
   14190:	mov	r6, r3
   14194:	mov	r4, r0
   14198:	mov	r0, sp
   1419c:	bl	12e4c <__assert_fail@plt+0x1ec4>
   141a0:	mov	r3, sp
   141a4:	mov	r2, r6
   141a8:	mov	r1, r5
   141ac:	mov	r0, r4
   141b0:	bl	13c98 <__assert_fail@plt+0x2d10>
   141b4:	add	sp, sp, #48	; 0x30
   141b8:	pop	{r4, r5, r6, pc}
   141bc:	mov	r2, r1
   141c0:	mov	r1, r0
   141c4:	mov	r0, #0
   141c8:	b	14150 <__assert_fail@plt+0x31c8>
   141cc:	mov	r3, r2
   141d0:	mov	r2, r1
   141d4:	mov	r1, r0
   141d8:	mov	r0, #0
   141dc:	b	14184 <__assert_fail@plt+0x31fc>
   141e0:	push	{r4, r5, r6, lr}
   141e4:	mov	r4, r0
   141e8:	mov	r5, r1
   141ec:	mov	r6, r2
   141f0:	sub	sp, sp, #48	; 0x30
   141f4:	mov	ip, sp
   141f8:	ldr	lr, [pc, #64]	; 14240 <__assert_fail@plt+0x32b8>
   141fc:	ldm	lr!, {r0, r1, r2, r3}
   14200:	stmia	ip!, {r0, r1, r2, r3}
   14204:	ldm	lr!, {r0, r1, r2, r3}
   14208:	stmia	ip!, {r0, r1, r2, r3}
   1420c:	ldm	lr, {r0, r1, r2, r3}
   14210:	stm	ip, {r0, r1, r2, r3}
   14214:	mov	r1, r6
   14218:	mov	r2, #1
   1421c:	mov	r0, sp
   14220:	bl	13ea4 <__assert_fail@plt+0x2f1c>
   14224:	mov	r3, sp
   14228:	mov	r2, r5
   1422c:	mov	r1, r4
   14230:	mov	r0, #0
   14234:	bl	13c98 <__assert_fail@plt+0x2d10>
   14238:	add	sp, sp, #48	; 0x30
   1423c:	pop	{r4, r5, r6, pc}
   14240:	andeq	r7, r2, r8, ror r2
   14244:	mov	r2, r1
   14248:	mvn	r1, #0
   1424c:	b	141e0 <__assert_fail@plt+0x3258>
   14250:	mov	r1, #58	; 0x3a
   14254:	b	14244 <__assert_fail@plt+0x32bc>
   14258:	mov	r2, #58	; 0x3a
   1425c:	b	141e0 <__assert_fail@plt+0x3258>
   14260:	push	{r4, r5, lr}
   14264:	sub	sp, sp, #100	; 0x64
   14268:	mov	r4, r0
   1426c:	mov	r0, sp
   14270:	mov	r5, r2
   14274:	bl	12e4c <__assert_fail@plt+0x1ec4>
   14278:	mov	ip, sp
   1427c:	add	lr, sp, #48	; 0x30
   14280:	ldm	ip!, {r0, r1, r2, r3}
   14284:	stmia	lr!, {r0, r1, r2, r3}
   14288:	ldm	ip!, {r0, r1, r2, r3}
   1428c:	stmia	lr!, {r0, r1, r2, r3}
   14290:	ldm	ip, {r0, r1, r2, r3}
   14294:	stm	lr, {r0, r1, r2, r3}
   14298:	mov	r2, #1
   1429c:	mov	r1, #58	; 0x3a
   142a0:	add	r0, sp, #48	; 0x30
   142a4:	bl	13ea4 <__assert_fail@plt+0x2f1c>
   142a8:	add	r3, sp, #48	; 0x30
   142ac:	mvn	r2, #0
   142b0:	mov	r1, r5
   142b4:	mov	r0, r4
   142b8:	bl	13c98 <__assert_fail@plt+0x2d10>
   142bc:	add	sp, sp, #100	; 0x64
   142c0:	pop	{r4, r5, pc}
   142c4:	push	{r4, r5, r6, r7, lr}
   142c8:	mov	r4, r0
   142cc:	mov	r6, r1
   142d0:	mov	r7, r2
   142d4:	mov	r5, r3
   142d8:	sub	sp, sp, #52	; 0x34
   142dc:	ldr	lr, [pc, #68]	; 14328 <__assert_fail@plt+0x33a0>
   142e0:	mov	ip, sp
   142e4:	ldm	lr!, {r0, r1, r2, r3}
   142e8:	stmia	ip!, {r0, r1, r2, r3}
   142ec:	ldm	lr!, {r0, r1, r2, r3}
   142f0:	stmia	ip!, {r0, r1, r2, r3}
   142f4:	ldm	lr, {r0, r1, r2, r3}
   142f8:	stm	ip, {r0, r1, r2, r3}
   142fc:	mov	r2, r7
   14300:	mov	r1, r6
   14304:	mov	r0, sp
   14308:	bl	13f00 <__assert_fail@plt+0x2f78>
   1430c:	ldr	r2, [sp, #72]	; 0x48
   14310:	mov	r3, sp
   14314:	mov	r1, r5
   14318:	mov	r0, r4
   1431c:	bl	13c98 <__assert_fail@plt+0x2d10>
   14320:	add	sp, sp, #52	; 0x34
   14324:	pop	{r4, r5, r6, r7, pc}
   14328:	andeq	r7, r2, r8, ror r2
   1432c:	mvn	ip, #0
   14330:	push	{r0, r1, r2, lr}
   14334:	str	ip, [sp]
   14338:	bl	142c4 <__assert_fail@plt+0x333c>
   1433c:	add	sp, sp, #12
   14340:	pop	{pc}		; (ldr pc, [sp], #4)
   14344:	mov	r3, r2
   14348:	mov	r2, r1
   1434c:	mov	r1, r0
   14350:	mov	r0, #0
   14354:	b	1432c <__assert_fail@plt+0x33a4>
   14358:	push	{r0, r1, r2, lr}
   1435c:	str	r3, [sp]
   14360:	mov	r3, r2
   14364:	mov	r2, r1
   14368:	mov	r1, r0
   1436c:	mov	r0, #0
   14370:	bl	142c4 <__assert_fail@plt+0x333c>
   14374:	add	sp, sp, #12
   14378:	pop	{pc}		; (ldr pc, [sp], #4)
   1437c:	ldr	r3, [pc]	; 14384 <__assert_fail@plt+0x33fc>
   14380:	b	13c98 <__assert_fail@plt+0x2d10>
   14384:	andeq	r7, r2, r4, lsl r1
   14388:	mov	r2, r1
   1438c:	mov	r1, r0
   14390:	mov	r0, #0
   14394:	b	1437c <__assert_fail@plt+0x33f4>
   14398:	mvn	r2, #0
   1439c:	b	1437c <__assert_fail@plt+0x33f4>
   143a0:	mov	r1, r0
   143a4:	mov	r0, #0
   143a8:	b	14398 <__assert_fail@plt+0x3410>
   143ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143b0:	mov	r7, r0
   143b4:	mov	r8, r1
   143b8:	mov	r9, r2
   143bc:	ldr	r5, [pc, #80]	; 14414 <__assert_fail@plt+0x348c>
   143c0:	mov	r2, r9
   143c4:	mov	r1, r8
   143c8:	mov	r0, r7
   143cc:	bl	10d24 <read@plt>
   143d0:	subs	r6, r0, #0
   143d4:	bge	14404 <__assert_fail@plt+0x347c>
   143d8:	bl	10ea4 <__errno_location@plt>
   143dc:	ldr	r3, [r0]
   143e0:	cmp	r3, #4
   143e4:	beq	143c0 <__assert_fail@plt+0x3438>
   143e8:	cmp	r9, r5
   143ec:	movls	r4, #0
   143f0:	movhi	r4, #1
   143f4:	cmp	r3, #22
   143f8:	movne	r4, #0
   143fc:	cmp	r4, #0
   14400:	bne	1440c <__assert_fail@plt+0x3484>
   14404:	mov	r0, r6
   14408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1440c:	mov	r9, r5
   14410:	b	143c0 <__assert_fail@plt+0x3438>
   14414:	svcvc	0x00f00000	; IMB
   14418:	push	{r4, r5, r6, lr}
   1441c:	cmp	r1, #0
   14420:	sub	sp, sp, #32
   14424:	mov	r5, r0
   14428:	ldr	r4, [sp, #48]	; 0x30
   1442c:	ldr	r6, [sp, #52]	; 0x34
   14430:	beq	144e4 <__assert_fail@plt+0x355c>
   14434:	strd	r2, [sp]
   14438:	mov	r3, r1
   1443c:	mov	r1, #1
   14440:	ldr	r2, [pc, #856]	; 147a0 <__assert_fail@plt+0x3818>
   14444:	bl	10eec <__fprintf_chk@plt>
   14448:	mov	r2, #5
   1444c:	ldr	r1, [pc, #848]	; 147a4 <__assert_fail@plt+0x381c>
   14450:	mov	r0, #0
   14454:	bl	10d90 <dcgettext@plt>
   14458:	movw	r3, #2022	; 0x7e6
   1445c:	ldr	r2, [pc, #836]	; 147a8 <__assert_fail@plt+0x3820>
   14460:	mov	r1, #1
   14464:	str	r3, [sp]
   14468:	mov	r3, r0
   1446c:	mov	r0, r5
   14470:	bl	10eec <__fprintf_chk@plt>
   14474:	mov	r1, r5
   14478:	mov	r0, #10
   1447c:	bl	10d84 <fputc_unlocked@plt>
   14480:	mov	r2, #5
   14484:	ldr	r1, [pc, #800]	; 147ac <__assert_fail@plt+0x3824>
   14488:	mov	r0, #0
   1448c:	bl	10d90 <dcgettext@plt>
   14490:	mov	r2, r0
   14494:	mov	r1, #1
   14498:	ldr	r3, [pc, #784]	; 147b0 <__assert_fail@plt+0x3828>
   1449c:	mov	r0, r5
   144a0:	bl	10eec <__fprintf_chk@plt>
   144a4:	mov	r1, r5
   144a8:	mov	r0, #10
   144ac:	bl	10d84 <fputc_unlocked@plt>
   144b0:	cmp	r6, #9
   144b4:	ldrls	pc, [pc, r6, lsl #2]
   144b8:	b	14794 <__assert_fail@plt+0x380c>
   144bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144c0:	strdeq	r4, [r1], -ip
   144c4:	andeq	r4, r1, r8, lsr #10
   144c8:	andeq	r4, r1, ip, asr r5
   144cc:	muleq	r1, r8, r5
   144d0:	ldrdeq	r4, [r1], -ip
   144d4:	andeq	r4, r1, r4, lsr #12
   144d8:	andeq	r4, r1, r4, ror r6
   144dc:	andeq	r4, r1, ip, asr #13
   144e0:	andeq	r4, r1, ip, lsr #14
   144e4:	mov	r1, #1
   144e8:	str	r3, [sp]
   144ec:	mov	r3, r2
   144f0:	ldr	r2, [pc, #700]	; 147b4 <__assert_fail@plt+0x382c>
   144f4:	bl	10eec <__fprintf_chk@plt>
   144f8:	b	14448 <__assert_fail@plt+0x34c0>
   144fc:	mov	r2, #5
   14500:	ldr	r1, [pc, #688]	; 147b8 <__assert_fail@plt+0x3830>
   14504:	mov	r0, #0
   14508:	bl	10d90 <dcgettext@plt>
   1450c:	ldr	r3, [r4]
   14510:	mov	r2, r0
   14514:	mov	r1, #1
   14518:	mov	r0, r5
   1451c:	add	sp, sp, #32
   14520:	pop	{r4, r5, r6, lr}
   14524:	b	10eec <__fprintf_chk@plt>
   14528:	mov	r2, #5
   1452c:	ldr	r1, [pc, #648]	; 147bc <__assert_fail@plt+0x3834>
   14530:	mov	r0, #0
   14534:	bl	10d90 <dcgettext@plt>
   14538:	ldr	r3, [r4, #4]
   1453c:	mov	r2, r0
   14540:	mov	r1, #1
   14544:	mov	r0, r5
   14548:	str	r3, [sp, #48]	; 0x30
   1454c:	ldr	r3, [r4]
   14550:	add	sp, sp, #32
   14554:	pop	{r4, r5, r6, lr}
   14558:	b	10eec <__fprintf_chk@plt>
   1455c:	mov	r2, #5
   14560:	ldr	r1, [pc, #600]	; 147c0 <__assert_fail@plt+0x3838>
   14564:	mov	r0, #0
   14568:	bl	10d90 <dcgettext@plt>
   1456c:	ldr	r3, [r4, #8]
   14570:	mov	r2, r0
   14574:	mov	r1, #1
   14578:	mov	r0, r5
   1457c:	str	r3, [sp, #52]	; 0x34
   14580:	ldr	r3, [r4, #4]
   14584:	str	r3, [sp, #48]	; 0x30
   14588:	ldr	r3, [r4]
   1458c:	add	sp, sp, #32
   14590:	pop	{r4, r5, r6, lr}
   14594:	b	10eec <__fprintf_chk@plt>
   14598:	mov	r2, #5
   1459c:	ldr	r1, [pc, #544]	; 147c4 <__assert_fail@plt+0x383c>
   145a0:	mov	r0, #0
   145a4:	bl	10d90 <dcgettext@plt>
   145a8:	ldr	r3, [r4, #12]
   145ac:	mov	r2, r0
   145b0:	mov	r1, #1
   145b4:	mov	r0, r5
   145b8:	str	r3, [sp, #8]
   145bc:	ldr	r3, [r4, #8]
   145c0:	str	r3, [sp, #4]
   145c4:	ldr	r3, [r4, #4]
   145c8:	str	r3, [sp]
   145cc:	ldr	r3, [r4]
   145d0:	bl	10eec <__fprintf_chk@plt>
   145d4:	add	sp, sp, #32
   145d8:	pop	{r4, r5, r6, pc}
   145dc:	mov	r2, #5
   145e0:	ldr	r1, [pc, #480]	; 147c8 <__assert_fail@plt+0x3840>
   145e4:	mov	r0, #0
   145e8:	bl	10d90 <dcgettext@plt>
   145ec:	ldr	r3, [r4, #16]
   145f0:	mov	r2, r0
   145f4:	mov	r1, #1
   145f8:	mov	r0, r5
   145fc:	str	r3, [sp, #12]
   14600:	ldr	r3, [r4, #12]
   14604:	str	r3, [sp, #8]
   14608:	ldr	r3, [r4, #8]
   1460c:	str	r3, [sp, #4]
   14610:	ldr	r3, [r4, #4]
   14614:	str	r3, [sp]
   14618:	ldr	r3, [r4]
   1461c:	bl	10eec <__fprintf_chk@plt>
   14620:	b	145d4 <__assert_fail@plt+0x364c>
   14624:	mov	r2, #5
   14628:	ldr	r1, [pc, #412]	; 147cc <__assert_fail@plt+0x3844>
   1462c:	mov	r0, #0
   14630:	bl	10d90 <dcgettext@plt>
   14634:	ldr	r3, [r4, #20]
   14638:	mov	r2, r0
   1463c:	mov	r1, #1
   14640:	mov	r0, r5
   14644:	str	r3, [sp, #16]
   14648:	ldr	r3, [r4, #16]
   1464c:	str	r3, [sp, #12]
   14650:	ldr	r3, [r4, #12]
   14654:	str	r3, [sp, #8]
   14658:	ldr	r3, [r4, #8]
   1465c:	str	r3, [sp, #4]
   14660:	ldr	r3, [r4, #4]
   14664:	str	r3, [sp]
   14668:	ldr	r3, [r4]
   1466c:	bl	10eec <__fprintf_chk@plt>
   14670:	b	145d4 <__assert_fail@plt+0x364c>
   14674:	mov	r2, #5
   14678:	ldr	r1, [pc, #336]	; 147d0 <__assert_fail@plt+0x3848>
   1467c:	mov	r0, #0
   14680:	bl	10d90 <dcgettext@plt>
   14684:	ldr	r3, [r4, #24]
   14688:	mov	r2, r0
   1468c:	mov	r1, #1
   14690:	mov	r0, r5
   14694:	str	r3, [sp, #20]
   14698:	ldr	r3, [r4, #20]
   1469c:	str	r3, [sp, #16]
   146a0:	ldr	r3, [r4, #16]
   146a4:	str	r3, [sp, #12]
   146a8:	ldr	r3, [r4, #12]
   146ac:	str	r3, [sp, #8]
   146b0:	ldr	r3, [r4, #8]
   146b4:	str	r3, [sp, #4]
   146b8:	ldr	r3, [r4, #4]
   146bc:	str	r3, [sp]
   146c0:	ldr	r3, [r4]
   146c4:	bl	10eec <__fprintf_chk@plt>
   146c8:	b	145d4 <__assert_fail@plt+0x364c>
   146cc:	mov	r2, #5
   146d0:	ldr	r1, [pc, #252]	; 147d4 <__assert_fail@plt+0x384c>
   146d4:	mov	r0, #0
   146d8:	bl	10d90 <dcgettext@plt>
   146dc:	ldr	r3, [r4, #28]
   146e0:	mov	r2, r0
   146e4:	mov	r1, #1
   146e8:	mov	r0, r5
   146ec:	str	r3, [sp, #24]
   146f0:	ldr	r3, [r4, #24]
   146f4:	str	r3, [sp, #20]
   146f8:	ldr	r3, [r4, #20]
   146fc:	str	r3, [sp, #16]
   14700:	ldr	r3, [r4, #16]
   14704:	str	r3, [sp, #12]
   14708:	ldr	r3, [r4, #12]
   1470c:	str	r3, [sp, #8]
   14710:	ldr	r3, [r4, #8]
   14714:	str	r3, [sp, #4]
   14718:	ldr	r3, [r4, #4]
   1471c:	str	r3, [sp]
   14720:	ldr	r3, [r4]
   14724:	bl	10eec <__fprintf_chk@plt>
   14728:	b	145d4 <__assert_fail@plt+0x364c>
   1472c:	ldr	r1, [pc, #164]	; 147d8 <__assert_fail@plt+0x3850>
   14730:	mov	r2, #5
   14734:	mov	r0, #0
   14738:	bl	10d90 <dcgettext@plt>
   1473c:	ldr	r3, [r4, #32]
   14740:	mov	r2, r0
   14744:	mov	r1, #1
   14748:	mov	r0, r5
   1474c:	str	r3, [sp, #28]
   14750:	ldr	r3, [r4, #28]
   14754:	str	r3, [sp, #24]
   14758:	ldr	r3, [r4, #24]
   1475c:	str	r3, [sp, #20]
   14760:	ldr	r3, [r4, #20]
   14764:	str	r3, [sp, #16]
   14768:	ldr	r3, [r4, #16]
   1476c:	str	r3, [sp, #12]
   14770:	ldr	r3, [r4, #12]
   14774:	str	r3, [sp, #8]
   14778:	ldr	r3, [r4, #8]
   1477c:	str	r3, [sp, #4]
   14780:	ldr	r3, [r4, #4]
   14784:	str	r3, [sp]
   14788:	ldr	r3, [r4]
   1478c:	bl	10eec <__fprintf_chk@plt>
   14790:	b	145d4 <__assert_fail@plt+0x364c>
   14794:	mov	r2, #5
   14798:	ldr	r1, [pc, #60]	; 147dc <__assert_fail@plt+0x3854>
   1479c:	b	14734 <__assert_fail@plt+0x37ac>
   147a0:	andeq	r6, r1, sp, lsr #5
   147a4:	andeq	r6, r1, r0, asr #5
   147a8:	andeq	r6, r1, lr, lsl #11
   147ac:	andeq	r6, r1, r4, asr #5
   147b0:	andeq	r6, r1, pc, ror #6
   147b4:			; <UNDEFINED> instruction: 0x000162b9
   147b8:	muleq	r1, r1, r3
   147bc:	andeq	r6, r1, r1, lsr #7
   147c0:			; <UNDEFINED> instruction: 0x000163b8
   147c4:	ldrdeq	r6, [r1], -r4
   147c8:	strdeq	r6, [r1], -r4
   147cc:	andeq	r6, r1, r8, lsl r4
   147d0:	andeq	r6, r1, r0, asr #8
   147d4:	andeq	r6, r1, ip, ror #8
   147d8:	muleq	r1, ip, r4
   147dc:	ldrdeq	r6, [r1], -r0
   147e0:	push	{r0, r1, r4, lr}
   147e4:	mov	ip, #0
   147e8:	ldr	lr, [sp, #16]
   147ec:	ldr	r4, [lr, ip, lsl #2]
   147f0:	cmp	r4, #0
   147f4:	bne	1480c <__assert_fail@plt+0x3884>
   147f8:	str	lr, [sp]
   147fc:	str	ip, [sp, #4]
   14800:	bl	14418 <__assert_fail@plt+0x3490>
   14804:	add	sp, sp, #8
   14808:	pop	{r4, pc}
   1480c:	add	ip, ip, #1
   14810:	b	147ec <__assert_fail@plt+0x3864>
   14814:	push	{r4, r5, r6, lr}
   14818:	sub	sp, sp, #48	; 0x30
   1481c:	mov	ip, #0
   14820:	add	lr, sp, #8
   14824:	mov	r5, lr
   14828:	ldr	r6, [sp, #64]	; 0x40
   1482c:	ldr	r4, [r6, ip, lsl #2]
   14830:	cmp	r4, #0
   14834:	str	r4, [lr], #4
   14838:	beq	14848 <__assert_fail@plt+0x38c0>
   1483c:	add	ip, ip, #1
   14840:	cmp	ip, #10
   14844:	bne	1482c <__assert_fail@plt+0x38a4>
   14848:	stm	sp, {r5, ip}
   1484c:	bl	14418 <__assert_fail@plt+0x3490>
   14850:	add	sp, sp, #48	; 0x30
   14854:	pop	{r4, r5, r6, pc}
   14858:	push	{r3}		; (str r3, [sp, #-4]!)
   1485c:	push	{r0, r1, r2, r3, lr}
   14860:	add	r3, sp, #24
   14864:	str	r3, [sp]
   14868:	str	r3, [sp, #12]
   1486c:	ldr	r3, [sp, #20]
   14870:	bl	14814 <__assert_fail@plt+0x388c>
   14874:	add	sp, sp, #16
   14878:	pop	{lr}		; (ldr lr, [sp], #4)
   1487c:	add	sp, sp, #4
   14880:	bx	lr
   14884:	ldr	r3, [pc, #116]	; 14900 <__assert_fail@plt+0x3978>
   14888:	mov	r0, #10
   1488c:	push	{r4, lr}
   14890:	ldr	r1, [r3]
   14894:	bl	10d84 <fputc_unlocked@plt>
   14898:	mov	r2, #5
   1489c:	ldr	r1, [pc, #96]	; 14904 <__assert_fail@plt+0x397c>
   148a0:	mov	r0, #0
   148a4:	bl	10d90 <dcgettext@plt>
   148a8:	mov	r1, r0
   148ac:	ldr	r2, [pc, #84]	; 14908 <__assert_fail@plt+0x3980>
   148b0:	mov	r0, #1
   148b4:	bl	10ec8 <__printf_chk@plt>
   148b8:	mov	r2, #5
   148bc:	ldr	r1, [pc, #72]	; 1490c <__assert_fail@plt+0x3984>
   148c0:	mov	r0, #0
   148c4:	bl	10d90 <dcgettext@plt>
   148c8:	mov	r1, r0
   148cc:	ldr	r3, [pc, #60]	; 14910 <__assert_fail@plt+0x3988>
   148d0:	mov	r0, #1
   148d4:	ldr	r2, [pc, #56]	; 14914 <__assert_fail@plt+0x398c>
   148d8:	bl	10ec8 <__printf_chk@plt>
   148dc:	mov	r2, #5
   148e0:	ldr	r1, [pc, #48]	; 14918 <__assert_fail@plt+0x3990>
   148e4:	mov	r0, #0
   148e8:	bl	10d90 <dcgettext@plt>
   148ec:	mov	r1, r0
   148f0:	ldr	r2, [pc, #36]	; 1491c <__assert_fail@plt+0x3994>
   148f4:	mov	r0, #1
   148f8:	pop	{r4, lr}
   148fc:	b	10ec8 <__printf_chk@plt>
   14900:	andeq	r7, r2, ip, asr r1
   14904:	andeq	r6, r1, ip, lsl #10
   14908:	andeq	r6, r1, r0, lsr #10
   1490c:	andeq	r6, r1, r6, lsr r5
   14910:	andeq	r5, r1, fp, lsr pc
   14914:	andeq	r5, r1, r3, ror #30
   14918:	andeq	r6, r1, sl, asr #10
   1491c:	andeq	r6, r1, r1, ror r5
   14920:	push	{r4, lr}
   14924:	bl	15190 <__assert_fail@plt+0x4208>
   14928:	cmp	r0, #0
   1492c:	popne	{r4, pc}
   14930:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14934:	push	{r4, lr}
   14938:	bl	15190 <__assert_fail@plt+0x4208>
   1493c:	cmp	r0, #0
   14940:	popne	{r4, pc}
   14944:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14948:	b	14920 <__assert_fail@plt+0x3998>
   1494c:	push	{r4, r5, r6, lr}
   14950:	mov	r5, r0
   14954:	mov	r4, r1
   14958:	bl	151bc <__assert_fail@plt+0x4234>
   1495c:	cmp	r0, #0
   14960:	popne	{r4, r5, r6, pc}
   14964:	adds	r4, r4, #0
   14968:	movne	r4, #1
   1496c:	cmp	r5, #0
   14970:	moveq	r4, #1
   14974:	cmp	r4, #0
   14978:	popeq	{r4, r5, r6, pc}
   1497c:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14980:	push	{r4, lr}
   14984:	bl	15404 <__assert_fail@plt+0x447c>
   14988:	cmp	r0, #0
   1498c:	popne	{r4, pc}
   14990:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14994:	push	{r4, r5, r6, lr}
   14998:	mov	r6, r0
   1499c:	mov	r5, r1
   149a0:	mov	r4, r2
   149a4:	bl	154ac <__assert_fail@plt+0x4524>
   149a8:	cmp	r0, #0
   149ac:	popne	{r4, r5, r6, pc}
   149b0:	cmp	r6, #0
   149b4:	beq	149c4 <__assert_fail@plt+0x3a3c>
   149b8:	cmp	r5, #0
   149bc:	cmpne	r4, #0
   149c0:	popeq	{r4, r5, r6, pc}
   149c4:	bl	14bd8 <__assert_fail@plt+0x3c50>
   149c8:	b	14994 <__assert_fail@plt+0x3a0c>
   149cc:	push	{r4, lr}
   149d0:	bl	15414 <__assert_fail@plt+0x448c>
   149d4:	cmp	r0, #0
   149d8:	popne	{r4, pc}
   149dc:	bl	14bd8 <__assert_fail@plt+0x3c50>
   149e0:	mov	r2, r1
   149e4:	mov	r1, r0
   149e8:	mov	r0, #0
   149ec:	b	14994 <__assert_fail@plt+0x3a0c>
   149f0:	mov	r2, r1
   149f4:	mov	r1, r0
   149f8:	mov	r0, #0
   149fc:	b	149cc <__assert_fail@plt+0x3a44>
   14a00:	cmp	r0, #0
   14a04:	push	{r4, r5, r6, lr}
   14a08:	mov	r5, r1
   14a0c:	ldr	r4, [r1]
   14a10:	bne	14a3c <__assert_fail@plt+0x3ab4>
   14a14:	cmp	r4, #0
   14a18:	bne	14a2c <__assert_fail@plt+0x3aa4>
   14a1c:	mov	r4, #64	; 0x40
   14a20:	udiv	r4, r4, r2
   14a24:	cmp	r2, #64	; 0x40
   14a28:	addhi	r4, r4, #1
   14a2c:	mov	r1, r4
   14a30:	bl	14994 <__assert_fail@plt+0x3a0c>
   14a34:	str	r4, [r5]
   14a38:	pop	{r4, r5, r6, pc}
   14a3c:	lsr	r3, r4, #1
   14a40:	add	r3, r3, #1
   14a44:	adds	r4, r4, r3
   14a48:	bcc	14a2c <__assert_fail@plt+0x3aa4>
   14a4c:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14a50:	mov	r2, #1
   14a54:	b	14a00 <__assert_fail@plt+0x3a78>
   14a58:	ldr	ip, [r1]
   14a5c:	push	{r4, r5, r6, r7, r8, lr}
   14a60:	mov	r5, r1
   14a64:	mvn	r8, r3
   14a68:	lsr	r8, r8, #31
   14a6c:	ldr	lr, [sp, #24]
   14a70:	asr	r1, ip, #1
   14a74:	adds	r4, ip, r1
   14a78:	mvnvs	r4, #-2147483648	; 0x80000000
   14a7c:	cmp	r3, r4
   14a80:	movge	r1, #0
   14a84:	andlt	r1, r8, #1
   14a88:	cmp	r1, #0
   14a8c:	movne	r4, r3
   14a90:	smull	r6, r7, r4, lr
   14a94:	cmp	r7, r6, asr #31
   14a98:	bne	14ab0 <__assert_fail@plt+0x3b28>
   14a9c:	cmp	r6, #63	; 0x3f
   14aa0:	mov	r1, r6
   14aa4:	bgt	14ac0 <__assert_fail@plt+0x3b38>
   14aa8:	mov	r1, #64	; 0x40
   14aac:	b	14ab4 <__assert_fail@plt+0x3b2c>
   14ab0:	mvn	r1, #-2147483648	; 0x80000000
   14ab4:	sdiv	r4, r1, lr
   14ab8:	mls	r6, lr, r4, r1
   14abc:	sub	r1, r1, r6
   14ac0:	cmp	r0, #0
   14ac4:	sub	r6, r4, ip
   14ac8:	streq	r0, [r5]
   14acc:	cmp	r6, r2
   14ad0:	bge	14b04 <__assert_fail@plt+0x3b7c>
   14ad4:	adds	r4, ip, r2
   14ad8:	bvs	14b00 <__assert_fail@plt+0x3b78>
   14adc:	cmp	r4, r3
   14ae0:	movle	r3, #0
   14ae4:	andgt	r3, r8, #1
   14ae8:	cmp	r3, #0
   14aec:	bne	14b00 <__assert_fail@plt+0x3b78>
   14af0:	smull	r2, r3, r4, lr
   14af4:	cmp	r3, r2, asr #31
   14af8:	mov	r1, r2
   14afc:	beq	14b04 <__assert_fail@plt+0x3b7c>
   14b00:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14b04:	bl	1494c <__assert_fail@plt+0x39c4>
   14b08:	str	r4, [r5]
   14b0c:	pop	{r4, r5, r6, r7, r8, pc}
   14b10:	push	{r4, lr}
   14b14:	bl	1513c <__assert_fail@plt+0x41b4>
   14b18:	cmp	r0, #0
   14b1c:	popne	{r4, pc}
   14b20:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14b24:	mov	r1, #1
   14b28:	b	14b10 <__assert_fail@plt+0x3b88>
   14b2c:	push	{r4, lr}
   14b30:	bl	1513c <__assert_fail@plt+0x41b4>
   14b34:	cmp	r0, #0
   14b38:	popne	{r4, pc}
   14b3c:	bl	14bd8 <__assert_fail@plt+0x3c50>
   14b40:	mov	r1, #1
   14b44:	b	14b2c <__assert_fail@plt+0x3ba4>
   14b48:	push	{r4, r5, r6, lr}
   14b4c:	mov	r4, r1
   14b50:	mov	r5, r0
   14b54:	mov	r0, r1
   14b58:	bl	14920 <__assert_fail@plt+0x3998>
   14b5c:	mov	r2, r4
   14b60:	mov	r1, r5
   14b64:	pop	{r4, r5, r6, lr}
   14b68:	b	10d54 <memcpy@plt>
   14b6c:	push	{r4, r5, r6, lr}
   14b70:	mov	r4, r1
   14b74:	mov	r5, r0
   14b78:	mov	r0, r1
   14b7c:	bl	14934 <__assert_fail@plt+0x39ac>
   14b80:	mov	r2, r4
   14b84:	mov	r1, r5
   14b88:	pop	{r4, r5, r6, lr}
   14b8c:	b	10d54 <memcpy@plt>
   14b90:	push	{r4, r5, r6, lr}
   14b94:	mov	r5, r0
   14b98:	add	r0, r1, #1
   14b9c:	mov	r4, r1
   14ba0:	bl	14934 <__assert_fail@plt+0x39ac>
   14ba4:	mov	r2, #0
   14ba8:	mov	r1, r5
   14bac:	strb	r2, [r0, r4]
   14bb0:	mov	r2, r4
   14bb4:	pop	{r4, r5, r6, lr}
   14bb8:	b	10d54 <memcpy@plt>
   14bbc:	push	{r4, lr}
   14bc0:	mov	r4, r0
   14bc4:	bl	10e80 <strlen@plt>
   14bc8:	add	r1, r0, #1
   14bcc:	mov	r0, r4
   14bd0:	pop	{r4, lr}
   14bd4:	b	14b48 <__assert_fail@plt+0x3bc0>
   14bd8:	ldr	r3, [pc, #44]	; 14c0c <__assert_fail@plt+0x3c84>
   14bdc:	mov	r2, #5
   14be0:	mov	r0, #0
   14be4:	push	{r4, lr}
   14be8:	ldr	r1, [pc, #32]	; 14c10 <__assert_fail@plt+0x3c88>
   14bec:	ldr	r4, [r3]
   14bf0:	bl	10d90 <dcgettext@plt>
   14bf4:	mov	r3, r0
   14bf8:	ldr	r2, [pc, #20]	; 14c14 <__assert_fail@plt+0x3c8c>
   14bfc:	mov	r1, #0
   14c00:	mov	r0, r4
   14c04:	bl	10e14 <error@plt>
   14c08:	bl	10f70 <abort@plt>
   14c0c:	andeq	r7, r2, r0, lsl #2
   14c10:			; <UNDEFINED> instruction: 0x000165bd
   14c14:	andeq	r6, r1, r3, ror r0
   14c18:	push	{r4, r5, r6, r7, r8, r9, lr}
   14c1c:	sub	sp, sp, #20
   14c20:	mov	r9, r3
   14c24:	mov	r8, r2
   14c28:	mov	r2, r1
   14c2c:	mov	r1, #0
   14c30:	mov	r7, r0
   14c34:	ldr	r3, [sp, #56]	; 0x38
   14c38:	ldr	r6, [sp, #64]	; 0x40
   14c3c:	str	r3, [sp]
   14c40:	add	r3, sp, #8
   14c44:	bl	14da8 <__assert_fail@plt+0x3e20>
   14c48:	subs	r4, r0, #0
   14c4c:	bne	14cdc <__assert_fail@plt+0x3d54>
   14c50:	ldrd	r4, [sp, #8]
   14c54:	ldrd	r2, [sp, #48]	; 0x30
   14c58:	cmp	r5, r9
   14c5c:	cmpeq	r4, r8
   14c60:	movcc	r1, #1
   14c64:	movcs	r1, #0
   14c68:	cmp	r5, r3
   14c6c:	cmpeq	r4, r2
   14c70:	movls	r3, r1
   14c74:	orrhi	r3, r1, #1
   14c78:	cmp	r3, #0
   14c7c:	beq	14cf8 <__assert_fail@plt+0x3d70>
   14c80:	bl	10ea4 <__errno_location@plt>
   14c84:	mov	r3, #0
   14c88:	mvn	r2, #-1073741824	; 0xc0000000
   14c8c:	cmp	r5, r3
   14c90:	cmpeq	r4, r2
   14c94:	movls	r3, #34	; 0x22
   14c98:	bls	14ca0 <__assert_fail@plt+0x3d18>
   14c9c:	mov	r3, #75	; 0x4b
   14ca0:	str	r3, [r0]
   14ca4:	cmp	r6, #0
   14ca8:	moveq	r6, #1
   14cac:	bl	10ea4 <__errno_location@plt>
   14cb0:	ldr	r4, [r0]
   14cb4:	mov	r0, r7
   14cb8:	cmp	r4, #22
   14cbc:	moveq	r4, #0
   14cc0:	bl	143a0 <__assert_fail@plt+0x3418>
   14cc4:	ldr	r2, [pc, #60]	; 14d08 <__assert_fail@plt+0x3d80>
   14cc8:	mov	r1, r4
   14ccc:	str	r0, [sp]
   14cd0:	mov	r0, r6
   14cd4:	ldr	r3, [sp, #60]	; 0x3c
   14cd8:	bl	10e14 <error@plt>
   14cdc:	bl	10ea4 <__errno_location@plt>
   14ce0:	cmp	r4, #1
   14ce4:	beq	14c9c <__assert_fail@plt+0x3d14>
   14ce8:	cmp	r4, #3
   14cec:	bne	14ca4 <__assert_fail@plt+0x3d1c>
   14cf0:	mov	r3, #0
   14cf4:	b	14ca0 <__assert_fail@plt+0x3d18>
   14cf8:	mov	r0, r4
   14cfc:	mov	r1, r5
   14d00:	add	sp, sp, #20
   14d04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d08:	andeq	r6, r1, pc, rrx
   14d0c:	mov	r1, #10
   14d10:	b	14c18 <__assert_fail@plt+0x3c90>
   14d14:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d18:	mov	ip, r0
   14d1c:	asr	fp, r1, #31
   14d20:	mov	r0, #0
   14d24:	mov	lr, r0
   14d28:	subs	r2, r2, #1
   14d2c:	bcs	14d38 <__assert_fail@plt+0x3db0>
   14d30:	add	sp, sp, #12
   14d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d38:	ldrd	r8, [ip]
   14d3c:	mov	r3, #0
   14d40:	cmp	r9, r3
   14d44:	umulleq	r8, r9, r8, r1
   14d48:	moveq	r6, r8
   14d4c:	moveq	r4, r9
   14d50:	beq	14d88 <__assert_fail@plt+0x3e00>
   14d54:	umull	r4, r5, r8, r1
   14d58:	strd	r4, [sp]
   14d5c:	mov	r5, lr
   14d60:	ldr	r4, [sp, #4]
   14d64:	umlal	r4, r5, r9, r1
   14d68:	cmp	r5, #0
   14d6c:	ldrne	r3, [sp, #4]
   14d70:	mulne	r4, r1, r9
   14d74:	ldreq	r6, [sp]
   14d78:	mlane	r4, r8, fp, r4
   14d7c:	ldrne	r6, [sp]
   14d80:	addne	r4, r4, r3
   14d84:	movne	r3, #1
   14d88:	cmp	r3, #0
   14d8c:	mvnne	r6, #0
   14d90:	movne	r3, #1
   14d94:	movne	r4, r6
   14d98:	orr	r0, r0, r3
   14d9c:	str	r6, [ip]
   14da0:	str	r4, [ip, #4]
   14da4:	b	14d28 <__assert_fail@plt+0x3da0>
   14da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dac:	cmp	r2, #36	; 0x24
   14db0:	sub	sp, sp, #20
   14db4:	ldr	r5, [sp, #56]	; 0x38
   14db8:	bls	14dd0 <__assert_fail@plt+0x3e48>
   14dbc:	ldr	r3, [pc, #876]	; 15130 <__assert_fail@plt+0x41a8>
   14dc0:	mov	r2, #85	; 0x55
   14dc4:	ldr	r1, [pc, #872]	; 15134 <__assert_fail@plt+0x41ac>
   14dc8:	ldr	r0, [pc, #872]	; 15138 <__assert_fail@plt+0x41b0>
   14dcc:	bl	10f88 <__assert_fail@plt>
   14dd0:	cmp	r1, #0
   14dd4:	mov	r6, r1
   14dd8:	mov	r8, r0
   14ddc:	mov	fp, r2
   14de0:	mov	r7, r3
   14de4:	addeq	r6, sp, #4
   14de8:	bl	10ea4 <__errno_location@plt>
   14dec:	mov	r3, #0
   14df0:	mov	sl, r0
   14df4:	str	r3, [r0]
   14df8:	bl	10e68 <__ctype_b_loc@plt>
   14dfc:	ldrb	r9, [r8]
   14e00:	mov	r3, r8
   14e04:	ldr	r1, [r0]
   14e08:	lsl	r2, r9, #1
   14e0c:	ldrh	r4, [r1, r2]
   14e10:	ands	r4, r4, #8192	; 0x2000
   14e14:	bne	14e30 <__assert_fail@plt+0x3ea8>
   14e18:	cmp	r9, #45	; 0x2d
   14e1c:	bne	14e38 <__assert_fail@plt+0x3eb0>
   14e20:	mov	r4, #4
   14e24:	mov	r0, r4
   14e28:	add	sp, sp, #20
   14e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e30:	ldrb	r9, [r3, #1]!
   14e34:	b	14e08 <__assert_fail@plt+0x3e80>
   14e38:	mov	r2, fp
   14e3c:	mov	r1, r6
   14e40:	mov	r0, r8
   14e44:	bl	10ee0 <strtoumax@plt>
   14e48:	ldr	r9, [r6]
   14e4c:	strd	r0, [sp, #8]
   14e50:	cmp	r9, r8
   14e54:	bne	14eb8 <__assert_fail@plt+0x3f30>
   14e58:	cmp	r5, #0
   14e5c:	beq	14e20 <__assert_fail@plt+0x3e98>
   14e60:	ldrb	r1, [r8]
   14e64:	cmp	r1, #0
   14e68:	beq	14e20 <__assert_fail@plt+0x3e98>
   14e6c:	mov	r0, r5
   14e70:	bl	10e8c <strchr@plt>
   14e74:	cmp	r0, #0
   14e78:	movne	r2, #1
   14e7c:	movne	r3, #0
   14e80:	strdne	r2, [sp, #8]
   14e84:	beq	14e20 <__assert_fail@plt+0x3e98>
   14e88:	ldrb	r8, [r9]
   14e8c:	cmp	r8, #0
   14e90:	beq	150e8 <__assert_fail@plt+0x4160>
   14e94:	mov	r1, r8
   14e98:	mov	r0, r5
   14e9c:	bl	10e8c <strchr@plt>
   14ea0:	cmp	r0, #0
   14ea4:	bne	14ee0 <__assert_fail@plt+0x3f58>
   14ea8:	ldrd	r2, [sp, #8]
   14eac:	orr	r4, r4, #2
   14eb0:	strd	r2, [r7]
   14eb4:	b	14e24 <__assert_fail@plt+0x3e9c>
   14eb8:	ldr	r4, [sl]
   14ebc:	cmp	r4, #0
   14ec0:	beq	14ed0 <__assert_fail@plt+0x3f48>
   14ec4:	cmp	r4, #34	; 0x22
   14ec8:	bne	14e20 <__assert_fail@plt+0x3e98>
   14ecc:	mov	r4, #1
   14ed0:	cmp	r5, #0
   14ed4:	strdeq	r0, [r7]
   14ed8:	bne	14e88 <__assert_fail@plt+0x3f00>
   14edc:	b	14e24 <__assert_fail@plt+0x3e9c>
   14ee0:	cmp	r8, #84	; 0x54
   14ee4:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14ee8:	bhi	14f20 <__assert_fail@plt+0x3f98>
   14eec:	cmp	r8, #75	; 0x4b
   14ef0:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14ef4:	bhi	14f10 <__assert_fail@plt+0x3f88>
   14ef8:	cmp	r8, #69	; 0x45
   14efc:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14f00:	cmp	r8, #71	; 0x47
   14f04:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14f08:	mov	r5, #1
   14f0c:	b	14ff0 <__assert_fail@plt+0x4068>
   14f10:	cmp	r8, #77	; 0x4d
   14f14:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14f18:	cmp	r8, #80	; 0x50
   14f1c:	b	14f04 <__assert_fail@plt+0x3f7c>
   14f20:	cmp	r8, #103	; 0x67
   14f24:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14f28:	bhi	14fc8 <__assert_fail@plt+0x4040>
   14f2c:	sub	r3, r8, #89	; 0x59
   14f30:	cmp	r3, #1
   14f34:	bhi	14f08 <__assert_fail@plt+0x3f80>
   14f38:	mov	r1, #48	; 0x30
   14f3c:	mov	r0, r5
   14f40:	bl	10e8c <strchr@plt>
   14f44:	cmp	r0, #0
   14f48:	beq	14f08 <__assert_fail@plt+0x3f80>
   14f4c:	ldrb	r3, [r9, #1]
   14f50:	cmp	r3, #68	; 0x44
   14f54:	moveq	r5, #2
   14f58:	moveq	r1, #1000	; 0x3e8
   14f5c:	beq	14f7c <__assert_fail@plt+0x3ff4>
   14f60:	cmp	r3, #105	; 0x69
   14f64:	beq	14fe0 <__assert_fail@plt+0x4058>
   14f68:	cmp	r3, #66	; 0x42
   14f6c:	moveq	r5, #2
   14f70:	movne	r5, #1
   14f74:	moveq	r1, #1000	; 0x3e8
   14f78:	movne	r1, #1024	; 0x400
   14f7c:	cmp	r8, #89	; 0x59
   14f80:	beq	15118 <__assert_fail@plt+0x4190>
   14f84:	bhi	15018 <__assert_fail@plt+0x4090>
   14f88:	cmp	r8, #75	; 0x4b
   14f8c:	beq	15058 <__assert_fail@plt+0x40d0>
   14f90:	bhi	14ff8 <__assert_fail@plt+0x4070>
   14f94:	cmp	r8, #69	; 0x45
   14f98:	beq	150f4 <__assert_fail@plt+0x416c>
   14f9c:	cmp	r8, #71	; 0x47
   14fa0:	beq	15100 <__assert_fail@plt+0x4178>
   14fa4:	cmp	r8, #66	; 0x42
   14fa8:	bne	14ea8 <__assert_fail@plt+0x3f20>
   14fac:	ldr	r3, [sp, #8]
   14fb0:	ldr	r1, [sp, #12]
   14fb4:	lsl	r2, r1, #10
   14fb8:	lsr	r0, r1, #22
   14fbc:	orr	r2, r2, r3, lsr #22
   14fc0:	lsl	r3, r3, #10
   14fc4:	b	150a4 <__assert_fail@plt+0x411c>
   14fc8:	cmp	r8, #109	; 0x6d
   14fcc:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14fd0:	cmp	r8, #116	; 0x74
   14fd4:	beq	14f38 <__assert_fail@plt+0x3fb0>
   14fd8:	cmp	r8, #107	; 0x6b
   14fdc:	b	14f04 <__assert_fail@plt+0x3f7c>
   14fe0:	ldrb	r3, [r9, #2]
   14fe4:	cmp	r3, #66	; 0x42
   14fe8:	movne	r5, #1
   14fec:	moveq	r5, #3
   14ff0:	mov	r1, #1024	; 0x400
   14ff4:	b	14f7c <__assert_fail@plt+0x3ff4>
   14ff8:	cmp	r8, #80	; 0x50
   14ffc:	beq	15108 <__assert_fail@plt+0x4180>
   15000:	cmp	r8, #84	; 0x54
   15004:	beq	15110 <__assert_fail@plt+0x4188>
   15008:	cmp	r8, #77	; 0x4d
   1500c:	bne	14ea8 <__assert_fail@plt+0x3f20>
   15010:	mov	r2, #2
   15014:	b	150f8 <__assert_fail@plt+0x4170>
   15018:	cmp	r8, #103	; 0x67
   1501c:	beq	15100 <__assert_fail@plt+0x4178>
   15020:	bhi	15044 <__assert_fail@plt+0x40bc>
   15024:	cmp	r8, #98	; 0x62
   15028:	beq	1508c <__assert_fail@plt+0x4104>
   1502c:	cmp	r8, #99	; 0x63
   15030:	beq	15128 <__assert_fail@plt+0x41a0>
   15034:	cmp	r8, #90	; 0x5a
   15038:	bne	14ea8 <__assert_fail@plt+0x3f20>
   1503c:	mov	r2, #7
   15040:	b	150f8 <__assert_fail@plt+0x4170>
   15044:	cmp	r8, #109	; 0x6d
   15048:	beq	15010 <__assert_fail@plt+0x4088>
   1504c:	bhi	15060 <__assert_fail@plt+0x40d8>
   15050:	cmp	r8, #107	; 0x6b
   15054:	bne	14ea8 <__assert_fail@plt+0x3f20>
   15058:	mov	r2, #1
   1505c:	b	150f8 <__assert_fail@plt+0x4170>
   15060:	cmp	r8, #116	; 0x74
   15064:	beq	15110 <__assert_fail@plt+0x4188>
   15068:	cmp	r8, #119	; 0x77
   1506c:	bne	14ea8 <__assert_fail@plt+0x3f20>
   15070:	ldr	r3, [sp, #8]
   15074:	ldr	r2, [sp, #12]
   15078:	ldr	r0, [sp, #12]
   1507c:	adds	r3, r3, r3
   15080:	adc	r2, r2, r2
   15084:	lsr	r0, r0, #31
   15088:	b	150a4 <__assert_fail@plt+0x411c>
   1508c:	ldr	r3, [sp, #8]
   15090:	ldr	r1, [sp, #12]
   15094:	lsl	r2, r1, #9
   15098:	lsr	r0, r1, #23
   1509c:	orr	r2, r2, r3, lsr #23
   150a0:	lsl	r3, r3, #9
   150a4:	adds	r0, r0, #0
   150a8:	movne	r0, #1
   150ac:	cmp	r0, #0
   150b0:	streq	r3, [sp, #8]
   150b4:	streq	r2, [sp, #12]
   150b8:	beq	150cc <__assert_fail@plt+0x4144>
   150bc:	mvn	r2, #0
   150c0:	mvn	r3, #0
   150c4:	mov	r0, #1
   150c8:	strd	r2, [sp, #8]
   150cc:	ldr	r3, [r6]
   150d0:	orr	r4, r4, r0
   150d4:	add	r2, r3, r5
   150d8:	str	r2, [r6]
   150dc:	ldrb	r3, [r3, r5]
   150e0:	cmp	r3, #0
   150e4:	orrne	r4, r4, #2
   150e8:	ldrd	r2, [sp, #8]
   150ec:	strd	r2, [r7]
   150f0:	b	14e24 <__assert_fail@plt+0x3e9c>
   150f4:	mov	r2, #6
   150f8:	add	r0, sp, #8
   150fc:	b	15120 <__assert_fail@plt+0x4198>
   15100:	mov	r2, #3
   15104:	b	150f8 <__assert_fail@plt+0x4170>
   15108:	mov	r2, #5
   1510c:	b	150f8 <__assert_fail@plt+0x4170>
   15110:	mov	r2, #4
   15114:	b	150f8 <__assert_fail@plt+0x4170>
   15118:	mov	r2, #8
   1511c:	add	r0, sp, r2
   15120:	bl	14d14 <__assert_fail@plt+0x3d8c>
   15124:	b	150cc <__assert_fail@plt+0x4144>
   15128:	mov	r0, #0
   1512c:	b	150cc <__assert_fail@plt+0x4144>
   15130:	andeq	r6, r1, lr, asr #11
   15134:	ldrdeq	r6, [r1], -r9
   15138:	andeq	r6, r1, r7, ror #11
   1513c:	cmp	r1, #0
   15140:	cmpne	r0, #0
   15144:	beq	1517c <__assert_fail@plt+0x41f4>
   15148:	push	{r4, r5, r6, lr}
   1514c:	umull	r4, r5, r0, r1
   15150:	adds	r3, r5, #0
   15154:	movne	r3, #1
   15158:	cmp	r4, #0
   1515c:	blt	15168 <__assert_fail@plt+0x41e0>
   15160:	cmp	r3, #0
   15164:	beq	15188 <__assert_fail@plt+0x4200>
   15168:	bl	10ea4 <__errno_location@plt>
   1516c:	mov	r3, #12
   15170:	str	r3, [r0]
   15174:	mov	r0, #0
   15178:	pop	{r4, r5, r6, pc}
   1517c:	mov	r1, #1
   15180:	mov	r0, r1
   15184:	b	10cf4 <calloc@plt>
   15188:	pop	{r4, r5, r6, lr}
   1518c:	b	15184 <__assert_fail@plt+0x41fc>
   15190:	cmp	r0, #0
   15194:	beq	151b4 <__assert_fail@plt+0x422c>
   15198:	bge	151b8 <__assert_fail@plt+0x4230>
   1519c:	push	{r4, lr}
   151a0:	bl	10ea4 <__errno_location@plt>
   151a4:	mov	r3, #12
   151a8:	str	r3, [r0]
   151ac:	mov	r0, #0
   151b0:	pop	{r4, pc}
   151b4:	mov	r0, #1
   151b8:	b	10e2c <malloc@plt>
   151bc:	cmp	r0, #0
   151c0:	bne	151cc <__assert_fail@plt+0x4244>
   151c4:	mov	r0, r1
   151c8:	b	15190 <__assert_fail@plt+0x4208>
   151cc:	cmp	r1, #0
   151d0:	push	{r4, lr}
   151d4:	bne	151e4 <__assert_fail@plt+0x425c>
   151d8:	bl	12bc0 <__assert_fail@plt+0x1c38>
   151dc:	mov	r0, #0
   151e0:	pop	{r4, pc}
   151e4:	blt	151f0 <__assert_fail@plt+0x4268>
   151e8:	pop	{r4, lr}
   151ec:	b	10d9c <realloc@plt>
   151f0:	bl	10ea4 <__errno_location@plt>
   151f4:	mov	r3, #12
   151f8:	str	r3, [r0]
   151fc:	b	151dc <__assert_fail@plt+0x4254>
   15200:	push	{r4, r5, r6, lr}
   15204:	mov	r4, r0
   15208:	bl	10df0 <__fpending@plt>
   1520c:	mov	r5, r0
   15210:	mov	r0, r4
   15214:	bl	10dfc <ferror_unlocked@plt>
   15218:	mov	r6, r0
   1521c:	mov	r0, r4
   15220:	bl	15270 <__assert_fail@plt+0x42e8>
   15224:	cmp	r6, #0
   15228:	mov	r4, r0
   1522c:	bne	15258 <__assert_fail@plt+0x42d0>
   15230:	cmp	r0, #0
   15234:	beq	15250 <__assert_fail@plt+0x42c8>
   15238:	cmp	r5, #0
   1523c:	bne	15268 <__assert_fail@plt+0x42e0>
   15240:	bl	10ea4 <__errno_location@plt>
   15244:	ldr	r4, [r0]
   15248:	subs	r4, r4, #9
   1524c:	mvnne	r4, #0
   15250:	mov	r0, r4
   15254:	pop	{r4, r5, r6, pc}
   15258:	cmp	r0, #0
   1525c:	bne	15268 <__assert_fail@plt+0x42e0>
   15260:	bl	10ea4 <__errno_location@plt>
   15264:	str	r4, [r0]
   15268:	mvn	r4, #0
   1526c:	b	15250 <__assert_fail@plt+0x42c8>
   15270:	push	{r0, r1, r2, r4, r5, lr}
   15274:	mov	r4, r0
   15278:	bl	10ed4 <fileno@plt>
   1527c:	cmp	r0, #0
   15280:	mov	r0, r4
   15284:	bge	15294 <__assert_fail@plt+0x430c>
   15288:	add	sp, sp, #12
   1528c:	pop	{r4, r5, lr}
   15290:	b	10f04 <fclose@plt>
   15294:	bl	10e44 <__freading@plt>
   15298:	cmp	r0, #0
   1529c:	bne	152d8 <__assert_fail@plt+0x4350>
   152a0:	mov	r0, r4
   152a4:	bl	15318 <__assert_fail@plt+0x4390>
   152a8:	cmp	r0, #0
   152ac:	bne	1530c <__assert_fail@plt+0x4384>
   152b0:	mov	r5, #0
   152b4:	mov	r0, r4
   152b8:	bl	10f04 <fclose@plt>
   152bc:	cmp	r5, #0
   152c0:	beq	152d0 <__assert_fail@plt+0x4348>
   152c4:	bl	10ea4 <__errno_location@plt>
   152c8:	str	r5, [r0]
   152cc:	mvn	r0, #0
   152d0:	add	sp, sp, #12
   152d4:	pop	{r4, r5, pc}
   152d8:	mov	r0, r4
   152dc:	bl	10ed4 <fileno@plt>
   152e0:	mov	r3, #1
   152e4:	mov	r2, #0
   152e8:	str	r3, [sp]
   152ec:	mov	r3, #0
   152f0:	bl	10dd8 <lseek64@plt>
   152f4:	mvn	r3, #0
   152f8:	mvn	r2, #0
   152fc:	cmp	r1, r3
   15300:	cmpeq	r0, r2
   15304:	bne	152a0 <__assert_fail@plt+0x4318>
   15308:	b	152b0 <__assert_fail@plt+0x4328>
   1530c:	bl	10ea4 <__errno_location@plt>
   15310:	ldr	r5, [r0]
   15314:	b	152b4 <__assert_fail@plt+0x432c>
   15318:	push	{r0, r1, r4, lr}
   1531c:	subs	r4, r0, #0
   15320:	bne	15334 <__assert_fail@plt+0x43ac>
   15324:	mov	r0, r4
   15328:	add	sp, sp, #8
   1532c:	pop	{r4, lr}
   15330:	b	10d30 <fflush@plt>
   15334:	bl	10e44 <__freading@plt>
   15338:	cmp	r0, #0
   1533c:	beq	15324 <__assert_fail@plt+0x439c>
   15340:	ldr	r3, [r4]
   15344:	tst	r3, #256	; 0x100
   15348:	beq	15324 <__assert_fail@plt+0x439c>
   1534c:	mov	r3, #1
   15350:	mov	r2, #0
   15354:	mov	r0, r4
   15358:	str	r3, [sp]
   1535c:	mov	r3, #0
   15360:	bl	15368 <__assert_fail@plt+0x43e0>
   15364:	b	15324 <__assert_fail@plt+0x439c>
   15368:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1536c:	mov	r4, r0
   15370:	ldmib	r0, {ip, lr}
   15374:	ldr	r8, [sp, #32]
   15378:	cmp	lr, ip
   1537c:	bne	153ec <__assert_fail@plt+0x4464>
   15380:	ldr	ip, [r0, #16]
   15384:	ldr	lr, [r0, #20]
   15388:	cmp	lr, ip
   1538c:	bne	153ec <__assert_fail@plt+0x4464>
   15390:	ldr	r5, [r0, #36]	; 0x24
   15394:	cmp	r5, #0
   15398:	bne	153ec <__assert_fail@plt+0x4464>
   1539c:	mov	r6, r2
   153a0:	mov	r7, r3
   153a4:	bl	10ed4 <fileno@plt>
   153a8:	mov	r2, r6
   153ac:	mov	r3, r7
   153b0:	str	r8, [sp]
   153b4:	bl	10dd8 <lseek64@plt>
   153b8:	mvn	r3, #0
   153bc:	mvn	r2, #0
   153c0:	cmp	r1, r3
   153c4:	cmpeq	r0, r2
   153c8:	mvneq	r0, #0
   153cc:	beq	153e4 <__assert_fail@plt+0x445c>
   153d0:	ldr	r3, [r4]
   153d4:	strd	r0, [r4, #80]	; 0x50
   153d8:	mov	r0, r5
   153dc:	bic	r3, r3, #16
   153e0:	str	r3, [r4]
   153e4:	add	sp, sp, #8
   153e8:	pop	{r4, r5, r6, r7, r8, pc}
   153ec:	mov	r0, r4
   153f0:	str	r8, [sp, #32]
   153f4:	add	sp, sp, #8
   153f8:	pop	{r4, r5, r6, r7, r8, lr}
   153fc:	b	10f10 <fseeko64@plt>
   15400:	b	15190 <__assert_fail@plt+0x4208>
   15404:	cmp	r1, #0
   15408:	orreq	r1, r1, #1
   1540c:	b	151bc <__assert_fail@plt+0x4234>
   15410:	b	1513c <__assert_fail@plt+0x41b4>
   15414:	cmp	r2, #0
   15418:	cmpne	r1, #0
   1541c:	moveq	r2, #1
   15420:	moveq	r1, r2
   15424:	b	154ac <__assert_fail@plt+0x4524>
   15428:	push	{r4, lr}
   1542c:	mov	r0, #14
   15430:	bl	10f34 <nl_langinfo@plt>
   15434:	cmp	r0, #0
   15438:	beq	15450 <__assert_fail@plt+0x44c8>
   1543c:	ldrb	r2, [r0]
   15440:	ldr	r3, [pc, #16]	; 15458 <__assert_fail@plt+0x44d0>
   15444:	cmp	r2, #0
   15448:	moveq	r0, r3
   1544c:	pop	{r4, pc}
   15450:	ldr	r0, [pc]	; 15458 <__assert_fail@plt+0x44d0>
   15454:	pop	{r4, pc}
   15458:	andeq	r6, r1, sp, lsl #12
   1545c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15460:	subs	r5, r0, #0
   15464:	mov	r7, r2
   15468:	addeq	r5, sp, #4
   1546c:	mov	r6, r1
   15470:	mov	r0, r5
   15474:	bl	10e08 <mbrtowc@plt>
   15478:	cmp	r7, #0
   1547c:	cmnne	r0, #3
   15480:	mov	r4, r0
   15484:	bls	154a0 <__assert_fail@plt+0x4518>
   15488:	mov	r0, #0
   1548c:	bl	154d8 <__assert_fail@plt+0x4550>
   15490:	cmp	r0, #0
   15494:	ldrbeq	r3, [r6]
   15498:	moveq	r4, #1
   1549c:	streq	r3, [r5]
   154a0:	mov	r0, r4
   154a4:	add	sp, sp, #12
   154a8:	pop	{r4, r5, r6, r7, pc}
   154ac:	umull	r2, r3, r1, r2
   154b0:	cmp	r3, #0
   154b4:	bne	154c0 <__assert_fail@plt+0x4538>
   154b8:	mov	r1, r2
   154bc:	b	151bc <__assert_fail@plt+0x4234>
   154c0:	push	{r4, lr}
   154c4:	bl	10ea4 <__errno_location@plt>
   154c8:	mov	r3, #12
   154cc:	str	r3, [r0]
   154d0:	mov	r0, #0
   154d4:	pop	{r4, pc}
   154d8:	push	{lr}		; (str lr, [sp, #-4]!)
   154dc:	sub	sp, sp, #268	; 0x10c
   154e0:	movw	r2, #257	; 0x101
   154e4:	add	r1, sp, #4
   154e8:	bl	15534 <__assert_fail@plt+0x45ac>
   154ec:	cmp	r0, #0
   154f0:	movne	r0, #0
   154f4:	bne	15524 <__assert_fail@plt+0x459c>
   154f8:	ldr	r1, [pc, #44]	; 1552c <__assert_fail@plt+0x45a4>
   154fc:	add	r0, sp, #4
   15500:	bl	10d18 <strcmp@plt>
   15504:	cmp	r0, #0
   15508:	beq	15520 <__assert_fail@plt+0x4598>
   1550c:	ldr	r1, [pc, #28]	; 15530 <__assert_fail@plt+0x45a8>
   15510:	add	r0, sp, #4
   15514:	bl	10d18 <strcmp@plt>
   15518:	adds	r0, r0, #0
   1551c:	movne	r0, #1
   15520:	and	r0, r0, #1
   15524:	add	sp, sp, #268	; 0x10c
   15528:	pop	{pc}		; (ldr pc, [sp], #4)
   1552c:	andeq	r6, r1, r3, lsl r6
   15530:	andeq	r6, r1, r5, lsl r6
   15534:	push	{r4, r5, r6, lr}
   15538:	mov	r5, r1
   1553c:	mov	r1, #0
   15540:	mov	r4, r2
   15544:	bl	10f1c <setlocale@plt>
   15548:	subs	r6, r0, #0
   1554c:	bne	15560 <__assert_fail@plt+0x45d8>
   15550:	cmp	r4, #0
   15554:	mov	r0, #22
   15558:	strbne	r6, [r5]
   1555c:	pop	{r4, r5, r6, pc}
   15560:	bl	10e80 <strlen@plt>
   15564:	cmp	r4, r0
   15568:	bls	15584 <__assert_fail@plt+0x45fc>
   1556c:	add	r2, r0, #1
   15570:	mov	r1, r6
   15574:	mov	r0, r5
   15578:	bl	10d54 <memcpy@plt>
   1557c:	mov	r0, #0
   15580:	pop	{r4, r5, r6, pc}
   15584:	cmp	r4, #0
   15588:	beq	155a8 <__assert_fail@plt+0x4620>
   1558c:	sub	r4, r4, #1
   15590:	mov	r1, r6
   15594:	mov	r2, r4
   15598:	mov	r0, r5
   1559c:	bl	10d54 <memcpy@plt>
   155a0:	mov	r3, #0
   155a4:	strb	r3, [r5, r4]
   155a8:	mov	r0, #34	; 0x22
   155ac:	pop	{r4, r5, r6, pc}
   155b0:	mov	r1, #0
   155b4:	b	10f1c <setlocale@plt>
   155b8:	cmp	r3, #0
   155bc:	cmpeq	r2, #0
   155c0:	bne	155e4 <__assert_fail@plt+0x465c>
   155c4:	cmp	r1, #0
   155c8:	movlt	r1, #-2147483648	; 0x80000000
   155cc:	movlt	r0, #0
   155d0:	blt	155e0 <__assert_fail@plt+0x4658>
   155d4:	cmpeq	r0, #0
   155d8:	mvnne	r1, #-2147483648	; 0x80000000
   155dc:	mvnne	r0, #0
   155e0:	b	156c8 <__assert_fail@plt+0x4740>
   155e4:	sub	sp, sp, #8
   155e8:	push	{sp, lr}
   155ec:	cmp	r1, #0
   155f0:	blt	15610 <__assert_fail@plt+0x4688>
   155f4:	cmp	r3, #0
   155f8:	blt	15644 <__assert_fail@plt+0x46bc>
   155fc:	bl	156d8 <__assert_fail@plt+0x4750>
   15600:	ldr	lr, [sp, #4]
   15604:	add	sp, sp, #8
   15608:	pop	{r2, r3}
   1560c:	bx	lr
   15610:	rsbs	r0, r0, #0
   15614:	sbc	r1, r1, r1, lsl #1
   15618:	cmp	r3, #0
   1561c:	blt	15668 <__assert_fail@plt+0x46e0>
   15620:	bl	156d8 <__assert_fail@plt+0x4750>
   15624:	ldr	lr, [sp, #4]
   15628:	add	sp, sp, #8
   1562c:	pop	{r2, r3}
   15630:	rsbs	r0, r0, #0
   15634:	sbc	r1, r1, r1, lsl #1
   15638:	rsbs	r2, r2, #0
   1563c:	sbc	r3, r3, r3, lsl #1
   15640:	bx	lr
   15644:	rsbs	r2, r2, #0
   15648:	sbc	r3, r3, r3, lsl #1
   1564c:	bl	156d8 <__assert_fail@plt+0x4750>
   15650:	ldr	lr, [sp, #4]
   15654:	add	sp, sp, #8
   15658:	pop	{r2, r3}
   1565c:	rsbs	r0, r0, #0
   15660:	sbc	r1, r1, r1, lsl #1
   15664:	bx	lr
   15668:	rsbs	r2, r2, #0
   1566c:	sbc	r3, r3, r3, lsl #1
   15670:	bl	156d8 <__assert_fail@plt+0x4750>
   15674:	ldr	lr, [sp, #4]
   15678:	add	sp, sp, #8
   1567c:	pop	{r2, r3}
   15680:	rsbs	r2, r2, #0
   15684:	sbc	r3, r3, r3, lsl #1
   15688:	bx	lr
   1568c:	cmp	r3, #0
   15690:	cmpeq	r2, #0
   15694:	bne	156ac <__assert_fail@plt+0x4724>
   15698:	cmp	r1, #0
   1569c:	cmpeq	r0, #0
   156a0:	mvnne	r1, #0
   156a4:	mvnne	r0, #0
   156a8:	b	156c8 <__assert_fail@plt+0x4740>
   156ac:	sub	sp, sp, #8
   156b0:	push	{sp, lr}
   156b4:	bl	156d8 <__assert_fail@plt+0x4750>
   156b8:	ldr	lr, [sp, #4]
   156bc:	add	sp, sp, #8
   156c0:	pop	{r2, r3}
   156c4:	bx	lr
   156c8:	push	{r1, lr}
   156cc:	mov	r0, #8
   156d0:	bl	10d0c <raise@plt>
   156d4:	pop	{r1, pc}
   156d8:	cmp	r1, r3
   156dc:	cmpeq	r0, r2
   156e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156e4:	mov	r4, r0
   156e8:	movcc	r0, #0
   156ec:	mov	r5, r1
   156f0:	ldr	lr, [sp, #36]	; 0x24
   156f4:	movcc	r1, r0
   156f8:	bcc	157f4 <__assert_fail@plt+0x486c>
   156fc:	cmp	r3, #0
   15700:	clzeq	ip, r2
   15704:	clzne	ip, r3
   15708:	addeq	ip, ip, #32
   1570c:	cmp	r5, #0
   15710:	clzeq	r1, r4
   15714:	addeq	r1, r1, #32
   15718:	clzne	r1, r5
   1571c:	sub	ip, ip, r1
   15720:	sub	sl, ip, #32
   15724:	lsl	r9, r3, ip
   15728:	rsb	fp, ip, #32
   1572c:	orr	r9, r9, r2, lsl sl
   15730:	orr	r9, r9, r2, lsr fp
   15734:	lsl	r8, r2, ip
   15738:	cmp	r5, r9
   1573c:	cmpeq	r4, r8
   15740:	movcc	r0, #0
   15744:	movcc	r1, r0
   15748:	bcc	15764 <__assert_fail@plt+0x47dc>
   1574c:	mov	r0, #1
   15750:	subs	r4, r4, r8
   15754:	lsl	r1, r0, sl
   15758:	orr	r1, r1, r0, lsr fp
   1575c:	lsl	r0, r0, ip
   15760:	sbc	r5, r5, r9
   15764:	cmp	ip, #0
   15768:	beq	157f4 <__assert_fail@plt+0x486c>
   1576c:	lsr	r6, r8, #1
   15770:	orr	r6, r6, r9, lsl #31
   15774:	lsr	r7, r9, #1
   15778:	mov	r2, ip
   1577c:	b	157a0 <__assert_fail@plt+0x4818>
   15780:	subs	r3, r4, r6
   15784:	sbc	r8, r5, r7
   15788:	adds	r3, r3, r3
   1578c:	adc	r8, r8, r8
   15790:	adds	r4, r3, #1
   15794:	adc	r5, r8, #0
   15798:	subs	r2, r2, #1
   1579c:	beq	157bc <__assert_fail@plt+0x4834>
   157a0:	cmp	r5, r7
   157a4:	cmpeq	r4, r6
   157a8:	bcs	15780 <__assert_fail@plt+0x47f8>
   157ac:	adds	r4, r4, r4
   157b0:	adc	r5, r5, r5
   157b4:	subs	r2, r2, #1
   157b8:	bne	157a0 <__assert_fail@plt+0x4818>
   157bc:	lsr	r3, r4, ip
   157c0:	orr	r3, r3, r5, lsl fp
   157c4:	lsr	r2, r5, ip
   157c8:	orr	r3, r3, r5, lsr sl
   157cc:	adds	r0, r0, r4
   157d0:	mov	r4, r3
   157d4:	lsl	r3, r2, ip
   157d8:	orr	r3, r3, r4, lsl sl
   157dc:	lsl	ip, r4, ip
   157e0:	orr	r3, r3, r4, lsr fp
   157e4:	adc	r1, r1, r5
   157e8:	subs	r0, r0, ip
   157ec:	mov	r5, r2
   157f0:	sbc	r1, r1, r3
   157f4:	cmp	lr, #0
   157f8:	strdne	r4, [lr]
   157fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15804:	mov	r7, r0
   15808:	ldr	r6, [pc, #72]	; 15858 <__assert_fail@plt+0x48d0>
   1580c:	ldr	r5, [pc, #72]	; 1585c <__assert_fail@plt+0x48d4>
   15810:	add	r6, pc, r6
   15814:	add	r5, pc, r5
   15818:	sub	r6, r6, r5
   1581c:	mov	r8, r1
   15820:	mov	r9, r2
   15824:	bl	10cd4 <calloc@plt-0x20>
   15828:	asrs	r6, r6, #2
   1582c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15830:	mov	r4, #0
   15834:	add	r4, r4, #1
   15838:	ldr	r3, [r5], #4
   1583c:	mov	r2, r9
   15840:	mov	r1, r8
   15844:	mov	r0, r7
   15848:	blx	r3
   1584c:	cmp	r6, r4
   15850:	bne	15834 <__assert_fail@plt+0x48ac>
   15854:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15858:	strdeq	r1, [r1], -ip
   1585c:	strdeq	r1, [r1], -r4
   15860:	bx	lr
   15864:	ldr	r3, [pc, #12]	; 15878 <__assert_fail@plt+0x48f0>
   15868:	mov	r1, #0
   1586c:	add	r3, pc, r3
   15870:	ldr	r2, [r3]
   15874:	b	10eb0 <__cxa_atexit@plt>
   15878:	andeq	r1, r1, r0, lsl #17
   1587c:	mov	r2, r1
   15880:	mov	r1, r0
   15884:	mov	r0, #3
   15888:	b	10dcc <__fxstat64@plt>

Disassembly of section .fini:

0001588c <.fini>:
   1588c:	push	{r3, lr}
   15890:	pop	{r3, pc}
