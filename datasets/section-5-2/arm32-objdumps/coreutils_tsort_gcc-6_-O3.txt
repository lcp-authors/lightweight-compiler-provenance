
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	1160c <__assert_fail@plt+0x770>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r9, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #102400	; 0x19000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #102400	; 0x19000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <raise@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #102400	; 0x19000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <strcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #102400	; 0x19000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <posix_fadvise64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #102400	; 0x19000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <fflush@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #102400	; 0x19000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <free@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #102400	; 0x19000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <_exit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #102400	; 0x19000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <memcpy@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #102400	; 0x19000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <mbsinit@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #102400	; 0x19000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <memcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #102400	; 0x19000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <fputc_unlocked@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #102400	; 0x19000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <dcgettext@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #102400	; 0x19000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <dup2@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <realloc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <textdomain@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <iswprint@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <fwrite@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <lseek64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <__ctype_get_mb_cur_max@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <__fpending@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <mbrtowc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <error@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <open64@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <puts@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <malloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <__libc_start_main@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__freading@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__gmon_start__@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <freopen64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <getopt_long@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <__ctype_b_loc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <strlen@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <__errno_location@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <__cxa_atexit@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <memset@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <__printf_chk@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <fileno@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <__fprintf_chk@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <fclose@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <fseeko64@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <__uflow@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <setlocale@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

00010e54 <strrchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #608]!	; 0x260

00010e60 <nl_langinfo@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #600]!	; 0x258

00010e6c <bindtextdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #592]!	; 0x250

00010e78 <strncmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #584]!	; 0x248

00010e84 <abort@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #576]!	; 0x240

00010e90 <close@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #568]!	; 0x238

00010e9c <__assert_fail@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #560]!	; 0x230

Disassembly of section .text:

00010ea8 <.text>:
   10ea8:	push	{r7, fp, lr}
   10eac:	mov	r5, r0
   10eb0:	sub	sp, sp, #60	; 0x3c
   10eb4:	ldr	r0, [r1]
   10eb8:	mov	r4, r1
   10ebc:	bl	12e88 <__assert_fail@plt+0x1fec>
   10ec0:	ldr	r1, [pc, #1680]	; 11558 <__assert_fail@plt+0x6bc>
   10ec4:	mov	r0, #6
   10ec8:	bl	10e48 <setlocale@plt>
   10ecc:	ldr	r1, [pc, #1672]	; 1155c <__assert_fail@plt+0x6c0>
   10ed0:	ldr	r0, [pc, #1672]	; 11560 <__assert_fail@plt+0x6c4>
   10ed4:	bl	10e6c <bindtextdomain@plt>
   10ed8:	ldr	r0, [pc, #1664]	; 11560 <__assert_fail@plt+0x6c4>
   10edc:	bl	10cf8 <textdomain@plt>
   10ee0:	ldr	r0, [pc, #1660]	; 11564 <__assert_fail@plt+0x6c8>
   10ee4:	bl	18aa8 <__assert_fail@plt+0x7c0c>
   10ee8:	ldr	r1, [pc, #1656]	; 11568 <__assert_fail@plt+0x6cc>
   10eec:	ldr	r2, [pc, #1656]	; 1156c <__assert_fail@plt+0x6d0>
   10ef0:	ldr	r3, [pc, #1656]	; 11570 <__assert_fail@plt+0x6d4>
   10ef4:	ldr	r1, [r1]
   10ef8:	ldr	r8, [pc, #1652]	; 11574 <__assert_fail@plt+0x6d8>
   10efc:	mov	r7, #1
   10f00:	mov	r6, #0
   10f04:	str	r1, [sp]
   10f08:	str	r2, [sp, #12]
   10f0c:	str	r3, [sp, #8]
   10f10:	ldr	r2, [pc, #1632]	; 11578 <__assert_fail@plt+0x6dc>
   10f14:	ldr	r3, [pc, #1632]	; 1157c <__assert_fail@plt+0x6e0>
   10f18:	mov	r1, r4
   10f1c:	mov	r0, r5
   10f20:	str	r6, [sp, #16]
   10f24:	str	r7, [sp, #4]
   10f28:	bl	12db0 <__assert_fail@plt+0x1f14>
   10f2c:	ldr	r3, [r8]
   10f30:	sub	r2, r5, r3
   10f34:	cmp	r2, r7
   10f38:	ble	10f7c <__assert_fail@plt+0xe0>
   10f3c:	mov	r2, #5
   10f40:	ldr	r1, [pc, #1592]	; 11580 <__assert_fail@plt+0x6e4>
   10f44:	mov	r0, r6
   10f48:	bl	10cd4 <dcgettext@plt>
   10f4c:	ldr	r3, [r8]
   10f50:	add	r3, r3, r7
   10f54:	mov	r5, r0
   10f58:	ldr	r0, [r4, r3, lsl #2]
   10f5c:	bl	16d54 <__assert_fail@plt+0x5eb8>
   10f60:	mov	r2, r5
   10f64:	mov	r1, r6
   10f68:	mov	r3, r0
   10f6c:	mov	r0, r6
   10f70:	bl	10d4c <error@plt>
   10f74:	mov	r0, r7
   10f78:	bl	11890 <__assert_fail@plt+0x9f4>
   10f7c:	cmp	r5, r3
   10f80:	beq	11330 <__assert_fail@plt+0x494>
   10f84:	ldr	r3, [r4, r3, lsl #2]
   10f88:	ldr	r1, [pc, #1524]	; 11584 <__assert_fail@plt+0x6e8>
   10f8c:	mov	r0, r3
   10f90:	str	r3, [sp, #40]	; 0x28
   10f94:	bl	10c68 <strcmp@plt>
   10f98:	mov	r4, r0
   10f9c:	str	r0, [sp, #44]	; 0x2c
   10fa0:	mov	r0, #28
   10fa4:	bl	18160 <__assert_fail@plt+0x72c4>
   10fa8:	ldr	r3, [pc, #1496]	; 11588 <__assert_fail@plt+0x6ec>
   10fac:	cmp	r4, #0
   10fb0:	str	r3, [sp, #32]
   10fb4:	str	r0, [sp, #36]	; 0x24
   10fb8:	beq	10fd4 <__assert_fail@plt+0x138>
   10fbc:	ldr	r1, [pc, #1480]	; 1158c <__assert_fail@plt+0x6f0>
   10fc0:	ldr	r0, [sp, #40]	; 0x28
   10fc4:	ldr	r2, [r3]
   10fc8:	bl	12a44 <__assert_fail@plt+0x1ba8>
   10fcc:	subs	r4, r0, #0
   10fd0:	beq	11504 <__assert_fail@plt+0x668>
   10fd4:	ldr	r3, [sp, #32]
   10fd8:	mov	r1, #2
   10fdc:	ldr	r0, [r3]
   10fe0:	bl	128b8 <__assert_fail@plt+0x1a1c>
   10fe4:	add	r0, sp, #48	; 0x30
   10fe8:	bl	16ed4 <__assert_fail@plt+0x6038>
   10fec:	mov	r8, #1
   10ff0:	mvn	r9, #0
   10ff4:	mov	r3, #0
   10ff8:	str	r3, [sp, #24]
   10ffc:	ldr	r0, [sp, #32]
   11000:	add	r3, sp, #48	; 0x30
   11004:	mov	r2, #3
   11008:	ldr	r1, [pc, #1408]	; 11590 <__assert_fail@plt+0x6f4>
   1100c:	ldr	r0, [r0]
   11010:	bl	16ee4 <__assert_fail@plt+0x6048>
   11014:	cmn	r0, #1
   11018:	beq	112d8 <__assert_fail@plt+0x43c>
   1101c:	cmp	r0, #0
   11020:	beq	1131c <__assert_fail@plt+0x480>
   11024:	ldr	r3, [sp, #36]	; 0x24
   11028:	ldr	r5, [sp, #52]	; 0x34
   1102c:	ldr	sl, [r3, #8]
   11030:	cmp	sl, #0
   11034:	beq	11290 <__assert_fail@plt+0x3f4>
   11038:	cmp	r5, #0
   1103c:	beq	11368 <__assert_fail@plt+0x4cc>
   11040:	mov	r6, r3
   11044:	mov	r4, sl
   11048:	b	11070 <__assert_fail@plt+0x1d4>
   1104c:	ldmib	sl, {r2, r3}
   11050:	movlt	r3, r2
   11054:	cmp	r3, #0
   11058:	beq	110a0 <__assert_fail@plt+0x204>
   1105c:	ldrsb	r2, [r3, #12]
   11060:	cmp	r2, #0
   11064:	movne	r6, sl
   11068:	movne	r4, r3
   1106c:	mov	sl, r3
   11070:	ldr	r1, [sl]
   11074:	cmp	r1, #0
   11078:	beq	11368 <__assert_fail@plt+0x4cc>
   1107c:	mov	r0, r5
   11080:	bl	10c68 <strcmp@plt>
   11084:	cmp	r0, #0
   11088:	bne	1104c <__assert_fail@plt+0x1b0>
   1108c:	ldr	r3, [sp, #24]
   11090:	cmp	r3, #0
   11094:	bne	11208 <__assert_fail@plt+0x36c>
   11098:	str	sl, [sp, #24]
   1109c:	b	10ffc <__assert_fail@plt+0x160>
   110a0:	mov	fp, r0
   110a4:	mov	r0, #28
   110a8:	bl	18160 <__assert_fail@plt+0x72c4>
   110ac:	mov	r7, r0
   110b0:	mov	r0, r5
   110b4:	bl	1825c <__assert_fail@plt+0x73c0>
   110b8:	cmp	fp, #0
   110bc:	str	r0, [r7]
   110c0:	ldr	r1, [r4]
   110c4:	strlt	r7, [sl, #4]
   110c8:	strge	r7, [sl, #8]
   110cc:	cmp	r1, #0
   110d0:	beq	11544 <__assert_fail@plt+0x6a8>
   110d4:	mov	r0, r5
   110d8:	bl	10c68 <strcmp@plt>
   110dc:	cmp	r0, #0
   110e0:	beq	11544 <__assert_fail@plt+0x6a8>
   110e4:	ldmib	r4, {r3, sl}
   110e8:	strlt	r9, [sp, #28]
   110ec:	strge	r8, [sp, #28]
   110f0:	movlt	sl, r3
   110f4:	cmp	sl, r7
   110f8:	beq	1115c <__assert_fail@plt+0x2c0>
   110fc:	cmp	sl, #0
   11100:	beq	11354 <__assert_fail@plt+0x4b8>
   11104:	ldr	r1, [sl]
   11108:	cmp	r1, #0
   1110c:	beq	11354 <__assert_fail@plt+0x4b8>
   11110:	mov	fp, sl
   11114:	b	11130 <__assert_fail@plt+0x294>
   11118:	cmp	r3, #0
   1111c:	beq	11354 <__assert_fail@plt+0x4b8>
   11120:	ldr	r1, [r3]
   11124:	cmp	r1, #0
   11128:	beq	11354 <__assert_fail@plt+0x4b8>
   1112c:	mov	fp, r3
   11130:	mov	r0, r5
   11134:	bl	10c68 <strcmp@plt>
   11138:	cmp	r0, #0
   1113c:	beq	11354 <__assert_fail@plt+0x4b8>
   11140:	ldmib	fp, {r2, r3}
   11144:	movge	r2, r8
   11148:	movlt	r3, r2
   1114c:	movlt	r2, r9
   11150:	cmp	r3, r7
   11154:	strb	r2, [fp, #12]
   11158:	bne	11118 <__assert_fail@plt+0x27c>
   1115c:	ldrsb	r3, [r4, #12]
   11160:	cmp	r3, #0
   11164:	beq	11248 <__assert_fail@plt+0x3ac>
   11168:	ldr	r2, [sp, #28]
   1116c:	rsb	r2, r2, #0
   11170:	cmp	r3, r2
   11174:	beq	11248 <__assert_fail@plt+0x3ac>
   11178:	ldrsb	r3, [sl, #12]
   1117c:	ldr	r1, [sp, #28]
   11180:	cmp	r3, r1
   11184:	mov	r3, r1
   11188:	beq	1125c <__assert_fail@plt+0x3c0>
   1118c:	cmp	r1, #0
   11190:	ldmib	sl, {r1, r3}
   11194:	blt	112bc <__assert_fail@plt+0x420>
   11198:	ldr	r0, [r1, #8]
   1119c:	mov	r3, r1
   111a0:	str	r0, [sl, #4]
   111a4:	ldr	r0, [r1, #4]
   111a8:	str	sl, [r1, #8]
   111ac:	str	r0, [r4, #8]
   111b0:	str	r4, [r1, #4]
   111b4:	mov	r1, #0
   111b8:	strb	r1, [r4, #12]
   111bc:	strb	r1, [sl, #12]
   111c0:	ldrsb	r1, [r3, #12]
   111c4:	ldr	r0, [sp, #28]
   111c8:	cmp	r1, r0
   111cc:	strbeq	r2, [r4, #12]
   111d0:	beq	111e0 <__assert_fail@plt+0x344>
   111d4:	cmp	r2, r1
   111d8:	ldrbeq	r2, [sp, #28]
   111dc:	strbeq	r2, [sl, #12]
   111e0:	mov	r2, #0
   111e4:	strb	r2, [r3, #12]
   111e8:	ldr	r2, [r6, #8]
   111ec:	mov	sl, r7
   111f0:	cmp	r4, r2
   111f4:	streq	r3, [r6, #8]
   111f8:	strne	r3, [r6, #4]
   111fc:	ldr	r3, [sp, #24]
   11200:	cmp	r3, #0
   11204:	beq	11098 <__assert_fail@plt+0x1fc>
   11208:	ldr	r1, [sl]
   1120c:	ldr	r0, [r3]
   11210:	bl	10c68 <strcmp@plt>
   11214:	cmp	r0, #0
   11218:	beq	10fec <__assert_fail@plt+0x150>
   1121c:	ldr	r3, [sl, #16]
   11220:	mov	r0, #8
   11224:	add	r3, r3, #1
   11228:	str	r3, [sl, #16]
   1122c:	bl	17c4c <__assert_fail@plt+0x6db0>
   11230:	ldr	r2, [sp, #24]
   11234:	ldr	r3, [r2, #24]
   11238:	str	sl, [r0]
   1123c:	str	r3, [r0, #4]
   11240:	str	r0, [r2, #24]
   11244:	b	10fec <__assert_fail@plt+0x150>
   11248:	ldr	r2, [sp, #28]
   1124c:	mov	sl, r7
   11250:	add	r3, r3, r2
   11254:	strb	r3, [r4, #12]
   11258:	b	1108c <__assert_fail@plt+0x1f0>
   1125c:	cmn	r1, #1
   11260:	mov	r2, #0
   11264:	ldreq	r3, [sl, #8]
   11268:	ldrne	r3, [sl, #4]
   1126c:	streq	r3, [r4, #4]
   11270:	strne	r3, [r4, #8]
   11274:	mov	r3, #0
   11278:	strb	r3, [sl, #12]
   1127c:	streq	r4, [sl, #8]
   11280:	strne	r4, [sl, #4]
   11284:	mov	r3, sl
   11288:	strb	r2, [r4, #12]
   1128c:	b	111e8 <__assert_fail@plt+0x34c>
   11290:	mov	r0, #28
   11294:	bl	18160 <__assert_fail@plt+0x72c4>
   11298:	cmp	r5, #0
   1129c:	mov	sl, r0
   112a0:	beq	112b0 <__assert_fail@plt+0x414>
   112a4:	mov	r0, r5
   112a8:	bl	1825c <__assert_fail@plt+0x73c0>
   112ac:	str	r0, [sl]
   112b0:	ldr	r3, [sp, #36]	; 0x24
   112b4:	str	sl, [r3, #8]
   112b8:	b	1108c <__assert_fail@plt+0x1f0>
   112bc:	ldr	r1, [r3, #4]
   112c0:	str	r1, [sl, #8]
   112c4:	ldr	r1, [r3, #8]
   112c8:	str	sl, [r3, #4]
   112cc:	str	r1, [r4, #4]
   112d0:	str	r4, [r3, #8]
   112d4:	b	111b4 <__assert_fail@plt+0x318>
   112d8:	ldr	r3, [sp, #24]
   112dc:	cmp	r3, #0
   112e0:	beq	1137c <__assert_fail@plt+0x4e0>
   112e4:	mov	r2, #5
   112e8:	ldr	r1, [pc, #676]	; 11594 <__assert_fail@plt+0x6f8>
   112ec:	mov	r0, #0
   112f0:	bl	10cd4 <dcgettext@plt>
   112f4:	ldr	r2, [sp, #40]	; 0x28
   112f8:	mov	r1, #3
   112fc:	mov	r4, r0
   11300:	mov	r0, #0
   11304:	bl	15e60 <__assert_fail@plt+0x4fc4>
   11308:	mov	r2, r4
   1130c:	mov	r1, #0
   11310:	mov	r3, r0
   11314:	mov	r0, #1
   11318:	bl	10d4c <error@plt>
   1131c:	ldr	r3, [pc, #628]	; 11598 <__assert_fail@plt+0x6fc>
   11320:	ldr	r2, [pc, #628]	; 1159c <__assert_fail@plt+0x700>
   11324:	ldr	r1, [pc, #628]	; 115a0 <__assert_fail@plt+0x704>
   11328:	ldr	r0, [pc, #628]	; 115a4 <__assert_fail@plt+0x708>
   1132c:	bl	10e9c <__assert_fail@plt>
   11330:	mov	r0, #28
   11334:	str	r6, [sp, #44]	; 0x2c
   11338:	bl	18160 <__assert_fail@plt+0x72c4>
   1133c:	ldr	r3, [pc, #576]	; 11584 <__assert_fail@plt+0x6e8>
   11340:	str	r3, [sp, #40]	; 0x28
   11344:	ldr	r3, [pc, #572]	; 11588 <__assert_fail@plt+0x6ec>
   11348:	str	r3, [sp, #32]
   1134c:	str	r0, [sp, #36]	; 0x24
   11350:	b	10fd4 <__assert_fail@plt+0x138>
   11354:	ldr	r3, [pc, #588]	; 115a8 <__assert_fail@plt+0x70c>
   11358:	mov	r2, #177	; 0xb1
   1135c:	ldr	r1, [pc, #572]	; 115a0 <__assert_fail@plt+0x704>
   11360:	ldr	r0, [pc, #580]	; 115ac <__assert_fail@plt+0x710>
   11364:	bl	10e9c <__assert_fail@plt>
   11368:	ldr	r3, [pc, #568]	; 115a8 <__assert_fail@plt+0x70c>
   1136c:	mov	r2, #140	; 0x8c
   11370:	ldr	r1, [pc, #552]	; 115a0 <__assert_fail@plt+0x704>
   11374:	ldr	r0, [pc, #564]	; 115b0 <__assert_fail@plt+0x714>
   11378:	bl	10e9c <__assert_fail@plt>
   1137c:	ldr	r3, [sp, #36]	; 0x24
   11380:	ldr	r7, [r3, #8]
   11384:	cmp	r7, #0
   11388:	beq	11398 <__assert_fail@plt+0x4fc>
   1138c:	ldr	r1, [pc, #544]	; 115b4 <__assert_fail@plt+0x718>
   11390:	mov	r0, r7
   11394:	bl	12204 <__assert_fail@plt+0x1368>
   11398:	mov	r8, #1
   1139c:	ldr	r5, [pc, #532]	; 115b8 <__assert_fail@plt+0x71c>
   113a0:	ldr	r9, [pc, #532]	; 115bc <__assert_fail@plt+0x720>
   113a4:	mov	r4, r8
   113a8:	mov	r6, #0
   113ac:	ldr	ip, [r5]
   113b0:	cmp	ip, #0
   113b4:	beq	1144c <__assert_fail@plt+0x5b0>
   113b8:	cmp	r7, #0
   113bc:	beq	113c8 <__assert_fail@plt+0x52c>
   113c0:	mov	r0, r7
   113c4:	bl	11b74 <__assert_fail@plt+0xcd8>
   113c8:	ldr	r3, [r5, #4]
   113cc:	cmp	r3, #0
   113d0:	beq	11498 <__assert_fail@plt+0x5fc>
   113d4:	ldr	r0, [r3]
   113d8:	ldr	sl, [r3, #24]
   113dc:	bl	10d64 <puts@plt>
   113e0:	ldm	r5, {ip, lr}
   113e4:	cmp	sl, #0
   113e8:	movne	r0, r6
   113ec:	sub	ip, ip, #1
   113f0:	str	ip, [r5]
   113f4:	strb	r4, [lr, #13]
   113f8:	ldrne	r1, [r5, #8]
   113fc:	beq	11434 <__assert_fail@plt+0x598>
   11400:	ldr	r2, [sl]
   11404:	ldr	sl, [sl, #4]
   11408:	ldr	r3, [r2, #16]
   1140c:	sub	r3, r3, #1
   11410:	cmp	r3, #0
   11414:	str	r3, [r2, #16]
   11418:	moveq	r0, r4
   1141c:	streq	r2, [r1, #20]
   11420:	moveq	r1, r2
   11424:	cmp	sl, #0
   11428:	bne	11400 <__assert_fail@plt+0x564>
   1142c:	cmp	r0, #0
   11430:	strne	r1, [r5, #8]
   11434:	ldr	r3, [lr, #20]
   11438:	cmp	r3, #0
   1143c:	str	r3, [r5, #4]
   11440:	bne	113d4 <__assert_fail@plt+0x538>
   11444:	cmp	ip, #0
   11448:	bne	11498 <__assert_fail@plt+0x5fc>
   1144c:	ldr	r3, [sp, #32]
   11450:	ldr	r0, [r3]
   11454:	bl	128ec <__assert_fail@plt+0x1a50>
   11458:	cmp	r0, #0
   1145c:	beq	114f8 <__assert_fail@plt+0x65c>
   11460:	bl	10ddc <__errno_location@plt>
   11464:	ldr	r3, [sp, #44]	; 0x2c
   11468:	cmp	r3, #0
   1146c:	ldr	r4, [r0]
   11470:	bne	11530 <__assert_fail@plt+0x694>
   11474:	mov	r0, r3
   11478:	mov	r2, #5
   1147c:	ldr	r1, [pc, #316]	; 115c0 <__assert_fail@plt+0x724>
   11480:	bl	10cd4 <dcgettext@plt>
   11484:	mov	r3, r0
   11488:	mov	r1, r4
   1148c:	ldr	r2, [pc, #304]	; 115c4 <__assert_fail@plt+0x728>
   11490:	mov	r0, #1
   11494:	bl	10d4c <error@plt>
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #292]	; 115c8 <__assert_fail@plt+0x72c>
   114a0:	mov	r0, r6
   114a4:	bl	10cd4 <dcgettext@plt>
   114a8:	ldr	r2, [sp, #40]	; 0x28
   114ac:	mov	r1, #3
   114b0:	mov	r8, r0
   114b4:	mov	r0, r6
   114b8:	bl	15e60 <__assert_fail@plt+0x4fc4>
   114bc:	mov	r2, r8
   114c0:	mov	r1, r6
   114c4:	mov	r8, r6
   114c8:	mov	r3, r0
   114cc:	mov	r0, #0
   114d0:	bl	10d4c <error@plt>
   114d4:	cmp	r7, #0
   114d8:	beq	114e8 <__assert_fail@plt+0x64c>
   114dc:	mov	r1, r9
   114e0:	mov	r0, r7
   114e4:	bl	12204 <__assert_fail@plt+0x1368>
   114e8:	ldr	r3, [r5, #12]
   114ec:	cmp	r3, #0
   114f0:	bne	114d4 <__assert_fail@plt+0x638>
   114f4:	b	113ac <__assert_fail@plt+0x510>
   114f8:	eor	r0, r8, #1
   114fc:	uxtb	r0, r0
   11500:	bl	10dc4 <exit@plt>
   11504:	bl	10ddc <__errno_location@plt>
   11508:	ldr	r2, [sp, #40]	; 0x28
   1150c:	mov	r1, #3
   11510:	ldr	r5, [r0]
   11514:	mov	r0, r4
   11518:	bl	15e60 <__assert_fail@plt+0x4fc4>
   1151c:	mov	r1, r5
   11520:	ldr	r2, [pc, #156]	; 115c4 <__assert_fail@plt+0x728>
   11524:	mov	r3, r0
   11528:	mov	r0, r7
   1152c:	bl	10d4c <error@plt>
   11530:	ldr	r2, [sp, #40]	; 0x28
   11534:	mov	r1, #3
   11538:	mov	r0, #0
   1153c:	bl	15e60 <__assert_fail@plt+0x4fc4>
   11540:	b	11484 <__assert_fail@plt+0x5e8>
   11544:	ldr	r3, [pc, #92]	; 115a8 <__assert_fail@plt+0x70c>
   11548:	mov	r2, #163	; 0xa3
   1154c:	ldr	r1, [pc, #76]	; 115a0 <__assert_fail@plt+0x704>
   11550:	ldr	r0, [pc, #116]	; 115cc <__assert_fail@plt+0x730>
   11554:	bl	10e9c <__assert_fail@plt>
   11558:	andeq	r8, r1, r0, lsl ip
   1155c:	andeq	r8, r1, ip, lsr sp
   11560:	muleq	r1, r0, ip
   11564:	andeq	r2, r1, r8, asr #15
   11568:	andeq	sl, r2, r4, ror #1
   1156c:	andeq	r8, r1, r4, asr sp
   11570:	muleq	r1, r0, r8
   11574:	andeq	sl, r2, r8, lsr r1
   11578:	andeq	r8, r1, r8, lsl fp
   1157c:	andeq	r8, r1, ip, lsl #25
   11580:	andeq	r8, r1, r4, ror #26
   11584:	andeq	r8, r1, r8, lsr sp
   11588:	andeq	sl, r2, r8, asr #2
   1158c:	andeq	r8, r1, r8, ror sp
   11590:	andeq	r8, r1, ip, ror sp
   11594:	andeq	r8, r1, r4, lsl #28
   11598:	andeq	r8, r1, r4, lsl #22
   1159c:	andeq	r0, r0, sl, asr #3
   115a0:	andeq	r8, r1, r0, lsl #27
   115a4:	andeq	r8, r1, ip, lsl #27
   115a8:	andeq	r8, r1, ip, lsl #22
   115ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   115b0:	muleq	r1, r8, sp
   115b4:	strdeq	r1, [r1], -r8
   115b8:	andeq	sl, r2, r8, asr r1
   115bc:	andeq	r1, r1, r4, asr r7
   115c0:	andeq	r8, r1, ip, asr #28
   115c4:	andeq	r8, r1, r8, ror #29
   115c8:	andeq	r8, r1, r0, lsr lr
   115cc:	andeq	r8, r1, ip, lsr #27
   115d0:	mov	fp, #0
   115d4:	mov	lr, #0
   115d8:	pop	{r1}		; (ldr r1, [sp], #4)
   115dc:	mov	r2, sp
   115e0:	push	{r2}		; (str r2, [sp, #-4]!)
   115e4:	push	{r0}		; (str r0, [sp, #-4]!)
   115e8:	ldr	ip, [pc, #16]	; 11600 <__assert_fail@plt+0x764>
   115ec:	push	{ip}		; (str ip, [sp, #-4]!)
   115f0:	ldr	r0, [pc, #12]	; 11604 <__assert_fail@plt+0x768>
   115f4:	ldr	r3, [pc, #12]	; 11608 <__assert_fail@plt+0x76c>
   115f8:	bl	10d7c <__libc_start_main@plt>
   115fc:	bl	10e84 <abort@plt>
   11600:	andeq	r8, r1, r4, lsr #21
   11604:	andeq	r0, r1, r8, lsr #29
   11608:	andeq	r8, r1, r4, asr #20
   1160c:	ldr	r3, [pc, #20]	; 11628 <__assert_fail@plt+0x78c>
   11610:	ldr	r2, [pc, #20]	; 1162c <__assert_fail@plt+0x790>
   11614:	add	r3, pc, r3
   11618:	ldr	r2, [r3, r2]
   1161c:	cmp	r2, #0
   11620:	bxeq	lr
   11624:	b	10d94 <__gmon_start__@plt>
   11628:	andeq	r8, r1, r4, ror #19
   1162c:	ldrdeq	r0, [r0], -r8
   11630:	ldr	r3, [pc, #28]	; 11654 <__assert_fail@plt+0x7b8>
   11634:	ldr	r0, [pc, #28]	; 11658 <__assert_fail@plt+0x7bc>
   11638:	sub	r3, r3, r0
   1163c:	cmp	r3, #6
   11640:	bxls	lr
   11644:	ldr	r3, [pc, #16]	; 1165c <__assert_fail@plt+0x7c0>
   11648:	cmp	r3, #0
   1164c:	bxeq	lr
   11650:	bx	r3
   11654:	andeq	sl, r2, pc, lsr #2
   11658:	andeq	sl, r2, ip, lsr #2
   1165c:	andeq	r0, r0, r0
   11660:	ldr	r1, [pc, #36]	; 1168c <__assert_fail@plt+0x7f0>
   11664:	ldr	r0, [pc, #36]	; 11690 <__assert_fail@plt+0x7f4>
   11668:	sub	r1, r1, r0
   1166c:	asr	r1, r1, #2
   11670:	add	r1, r1, r1, lsr #31
   11674:	asrs	r1, r1, #1
   11678:	bxeq	lr
   1167c:	ldr	r3, [pc, #16]	; 11694 <__assert_fail@plt+0x7f8>
   11680:	cmp	r3, #0
   11684:	bxeq	lr
   11688:	bx	r3
   1168c:	andeq	sl, r2, ip, lsr #2
   11690:	andeq	sl, r2, ip, lsr #2
   11694:	andeq	r0, r0, r0
   11698:	push	{r4, lr}
   1169c:	ldr	r4, [pc, #24]	; 116bc <__assert_fail@plt+0x820>
   116a0:	ldrb	r3, [r4]
   116a4:	cmp	r3, #0
   116a8:	popne	{r4, pc}
   116ac:	bl	11630 <__assert_fail@plt+0x794>
   116b0:	mov	r3, #1
   116b4:	strb	r3, [r4]
   116b8:	pop	{r4, pc}
   116bc:	andeq	sl, r2, r4, asr r1
   116c0:	ldr	r0, [pc, #40]	; 116f0 <__assert_fail@plt+0x854>
   116c4:	ldr	r3, [r0]
   116c8:	cmp	r3, #0
   116cc:	bne	116d4 <__assert_fail@plt+0x838>
   116d0:	b	11660 <__assert_fail@plt+0x7c4>
   116d4:	ldr	r3, [pc, #24]	; 116f4 <__assert_fail@plt+0x858>
   116d8:	cmp	r3, #0
   116dc:	beq	116d0 <__assert_fail@plt+0x834>
   116e0:	push	{r4, lr}
   116e4:	blx	r3
   116e8:	pop	{r4, lr}
   116ec:	b	11660 <__assert_fail@plt+0x7c4>
   116f0:	andeq	r9, r2, r4, lsl pc
   116f4:	andeq	r0, r0, r0
   116f8:	ldr	r2, [pc, #16]	; 11710 <__assert_fail@plt+0x874>
   116fc:	mov	r0, #0
   11700:	ldr	r3, [r2]
   11704:	add	r3, r3, #1
   11708:	str	r3, [r2]
   1170c:	bx	lr
   11710:	andeq	sl, r2, r8, asr r1
   11714:	ldr	r3, [r0, #16]
   11718:	cmp	r3, #0
   1171c:	bne	11748 <__assert_fail@plt+0x8ac>
   11720:	ldrb	r3, [r0, #13]
   11724:	cmp	r3, #0
   11728:	bne	11748 <__assert_fail@plt+0x8ac>
   1172c:	ldr	r3, [pc, #28]	; 11750 <__assert_fail@plt+0x8b4>
   11730:	ldr	r2, [r3, #4]
   11734:	cmp	r2, #0
   11738:	streq	r0, [r3, #4]
   1173c:	ldrne	r2, [r3, #8]
   11740:	str	r0, [r3, #8]
   11744:	strne	r0, [r2, #20]
   11748:	mov	r0, #0
   1174c:	bx	lr
   11750:	andeq	sl, r2, r8, asr r1
   11754:	ldr	r3, [r0, #16]
   11758:	cmp	r3, #0
   1175c:	beq	117b8 <__assert_fail@plt+0x91c>
   11760:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11764:	ldr	r6, [pc, #284]	; 11888 <__assert_fail@plt+0x9ec>
   11768:	ldr	ip, [r6, #12]
   1176c:	cmp	ip, #0
   11770:	beq	11864 <__assert_fail@plt+0x9c8>
   11774:	ldr	r2, [r0, #24]
   11778:	cmp	r2, #0
   1177c:	beq	11880 <__assert_fail@plt+0x9e4>
   11780:	ldr	r3, [r2]
   11784:	cmp	ip, r3
   11788:	addeq	r4, r0, #24
   1178c:	bne	117a4 <__assert_fail@plt+0x908>
   11790:	b	117c4 <__assert_fail@plt+0x928>
   11794:	ldr	r1, [r3]
   11798:	cmp	ip, r1
   1179c:	beq	117c0 <__assert_fail@plt+0x924>
   117a0:	mov	r2, r3
   117a4:	ldr	r3, [r2, #4]
   117a8:	cmp	r3, #0
   117ac:	bne	11794 <__assert_fail@plt+0x8f8>
   117b0:	mov	r0, r3
   117b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   117b8:	mov	r0, r3
   117bc:	bx	lr
   117c0:	add	r4, r2, #4
   117c4:	ldr	r3, [r0, #20]
   117c8:	cmp	r3, #0
   117cc:	beq	11870 <__assert_fail@plt+0x9d4>
   117d0:	mov	r7, r0
   117d4:	ldr	r9, [pc, #176]	; 1188c <__assert_fail@plt+0x9f0>
   117d8:	mov	r8, #0
   117dc:	b	117f0 <__assert_fail@plt+0x954>
   117e0:	subs	ip, r5, #0
   117e4:	str	r8, [r3, #20]
   117e8:	str	r5, [r6, #12]
   117ec:	beq	1185c <__assert_fail@plt+0x9c0>
   117f0:	ldr	r3, [ip]
   117f4:	mov	r2, r9
   117f8:	mov	r1, r8
   117fc:	mov	r0, #0
   11800:	ldr	r5, [ip, #20]
   11804:	bl	10d4c <error@plt>
   11808:	ldr	r3, [r6, #12]
   1180c:	cmp	r7, r3
   11810:	bne	117e0 <__assert_fail@plt+0x944>
   11814:	ldr	r3, [r4]
   11818:	mov	r0, r3
   1181c:	ldr	r2, [r3]
   11820:	ldr	r1, [r3, #4]
   11824:	ldr	r3, [r2, #16]
   11828:	sub	r3, r3, #1
   1182c:	str	r3, [r2, #16]
   11830:	str	r1, [r4]
   11834:	bl	129ec <__assert_fail@plt+0x1b50>
   11838:	ldr	r3, [r6, #12]
   1183c:	cmp	r3, #0
   11840:	movne	r1, #0
   11844:	beq	1185c <__assert_fail@plt+0x9c0>
   11848:	ldr	r2, [r3, #20]
   1184c:	str	r1, [r3, #20]
   11850:	subs	r3, r2, #0
   11854:	bne	11848 <__assert_fail@plt+0x9ac>
   11858:	str	r3, [r6, #12]
   1185c:	mov	r0, #1
   11860:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11864:	str	r0, [r6, #12]
   11868:	mov	r0, ip
   1186c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11870:	str	ip, [r0, #20]
   11874:	str	r0, [r6, #12]
   11878:	mov	r0, r3
   1187c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11880:	mov	r0, r2
   11884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11888:	andeq	sl, r2, r8, asr r1
   1188c:	andeq	r8, r1, r8, ror #29
   11890:	subs	r6, r0, #0
   11894:	push	{r7, lr}
   11898:	sub	sp, sp, #56	; 0x38
   1189c:	beq	118d8 <__assert_fail@plt+0xa3c>
   118a0:	ldr	r3, [pc, #636]	; 11b24 <__assert_fail@plt+0xc88>
   118a4:	mov	r2, #5
   118a8:	ldr	r1, [pc, #632]	; 11b28 <__assert_fail@plt+0xc8c>
   118ac:	mov	r0, #0
   118b0:	ldr	r4, [r3]
   118b4:	bl	10cd4 <dcgettext@plt>
   118b8:	ldr	r3, [pc, #620]	; 11b2c <__assert_fail@plt+0xc90>
   118bc:	mov	r1, #1
   118c0:	ldr	r3, [r3]
   118c4:	mov	r2, r0
   118c8:	mov	r0, r4
   118cc:	bl	10e18 <__fprintf_chk@plt>
   118d0:	mov	r0, r6
   118d4:	bl	10dc4 <exit@plt>
   118d8:	mov	r2, #5
   118dc:	ldr	r1, [pc, #588]	; 11b30 <__assert_fail@plt+0xc94>
   118e0:	bl	10cd4 <dcgettext@plt>
   118e4:	ldr	r3, [pc, #576]	; 11b2c <__assert_fail@plt+0xc90>
   118e8:	ldr	r7, [pc, #580]	; 11b34 <__assert_fail@plt+0xc98>
   118ec:	ldr	r4, [pc, #580]	; 11b38 <__assert_fail@plt+0xc9c>
   118f0:	ldr	r2, [r3]
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	bl	10e00 <__printf_chk@plt>
   11900:	mov	r2, #5
   11904:	ldr	r1, [pc, #560]	; 11b3c <__assert_fail@plt+0xca0>
   11908:	mov	r0, r6
   1190c:	bl	10cd4 <dcgettext@plt>
   11910:	ldr	r1, [r7]
   11914:	bl	10c50 <fputs_unlocked@plt>
   11918:	mov	r2, #5
   1191c:	ldr	r1, [pc, #540]	; 11b40 <__assert_fail@plt+0xca4>
   11920:	mov	r0, r6
   11924:	bl	10cd4 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	10c50 <fputs_unlocked@plt>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #520]	; 11b44 <__assert_fail@plt+0xca8>
   11938:	mov	r0, r6
   1193c:	bl	10cd4 <dcgettext@plt>
   11940:	ldr	r1, [r7]
   11944:	bl	10c50 <fputs_unlocked@plt>
   11948:	mov	r2, #5
   1194c:	ldr	r1, [pc, #500]	; 11b48 <__assert_fail@plt+0xcac>
   11950:	mov	r0, r6
   11954:	bl	10cd4 <dcgettext@plt>
   11958:	ldr	r1, [r7]
   1195c:	bl	10c50 <fputs_unlocked@plt>
   11960:	ldm	r4!, {r0, r1, r2, r3}
   11964:	mov	lr, sp
   11968:	stmia	lr!, {r0, r1, r2, r3}
   1196c:	ldm	r4!, {r0, r1, r2, r3}
   11970:	ldr	ip, [sp]
   11974:	stmia	lr!, {r0, r1, r2, r3}
   11978:	cmp	ip, #0
   1197c:	ldm	r4!, {r0, r1, r2, r3}
   11980:	stmia	lr!, {r0, r1, r2, r3}
   11984:	ldm	r4, {r0, r1}
   11988:	moveq	r4, sp
   1198c:	stm	lr, {r0, r1}
   11990:	beq	119c0 <__assert_fail@plt+0xb24>
   11994:	ldr	r5, [pc, #432]	; 11b4c <__assert_fail@plt+0xcb0>
   11998:	mov	r4, sp
   1199c:	b	119ac <__assert_fail@plt+0xb10>
   119a0:	ldr	ip, [r4, #8]!
   119a4:	cmp	ip, #0
   119a8:	beq	119c0 <__assert_fail@plt+0xb24>
   119ac:	mov	r1, ip
   119b0:	mov	r0, r5
   119b4:	bl	10c68 <strcmp@plt>
   119b8:	cmp	r0, #0
   119bc:	bne	119a0 <__assert_fail@plt+0xb04>
   119c0:	ldr	r4, [r4, #4]
   119c4:	mov	r2, #5
   119c8:	cmp	r4, #0
   119cc:	ldr	r1, [pc, #380]	; 11b50 <__assert_fail@plt+0xcb4>
   119d0:	beq	11a78 <__assert_fail@plt+0xbdc>
   119d4:	mov	r0, #0
   119d8:	bl	10cd4 <dcgettext@plt>
   119dc:	ldr	r3, [pc, #368]	; 11b54 <__assert_fail@plt+0xcb8>
   119e0:	ldr	r2, [pc, #368]	; 11b58 <__assert_fail@plt+0xcbc>
   119e4:	mov	r1, r0
   119e8:	mov	r0, #1
   119ec:	bl	10e00 <__printf_chk@plt>
   119f0:	mov	r1, #0
   119f4:	mov	r0, #5
   119f8:	bl	10e48 <setlocale@plt>
   119fc:	cmp	r0, #0
   11a00:	ldreq	r5, [pc, #324]	; 11b4c <__assert_fail@plt+0xcb0>
   11a04:	beq	11a20 <__assert_fail@plt+0xb84>
   11a08:	mov	r2, #3
   11a0c:	ldr	r1, [pc, #328]	; 11b5c <__assert_fail@plt+0xcc0>
   11a10:	bl	10e78 <strncmp@plt>
   11a14:	ldr	r5, [pc, #304]	; 11b4c <__assert_fail@plt+0xcb0>
   11a18:	cmp	r0, #0
   11a1c:	bne	11b08 <__assert_fail@plt+0xc6c>
   11a20:	mov	r2, #5
   11a24:	ldr	r1, [pc, #308]	; 11b60 <__assert_fail@plt+0xcc4>
   11a28:	mov	r0, #0
   11a2c:	bl	10cd4 <dcgettext@plt>
   11a30:	ldr	r3, [pc, #276]	; 11b4c <__assert_fail@plt+0xcb0>
   11a34:	ldr	r2, [pc, #280]	; 11b54 <__assert_fail@plt+0xcb8>
   11a38:	mov	r1, r0
   11a3c:	mov	r0, #1
   11a40:	bl	10e00 <__printf_chk@plt>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #276]	; 11b64 <__assert_fail@plt+0xcc8>
   11a4c:	mov	r0, #0
   11a50:	bl	10cd4 <dcgettext@plt>
   11a54:	ldr	r2, [pc, #268]	; 11b68 <__assert_fail@plt+0xccc>
   11a58:	cmp	r4, r5
   11a5c:	ldr	r3, [pc, #264]	; 11b6c <__assert_fail@plt+0xcd0>
   11a60:	movne	r3, r2
   11a64:	mov	r1, r0
   11a68:	mov	r2, r4
   11a6c:	mov	r0, #1
   11a70:	bl	10e00 <__printf_chk@plt>
   11a74:	b	118d0 <__assert_fail@plt+0xa34>
   11a78:	mov	r0, r4
   11a7c:	bl	10cd4 <dcgettext@plt>
   11a80:	ldr	r3, [pc, #204]	; 11b54 <__assert_fail@plt+0xcb8>
   11a84:	ldr	r2, [pc, #204]	; 11b58 <__assert_fail@plt+0xcbc>
   11a88:	mov	r1, r0
   11a8c:	mov	r0, #1
   11a90:	bl	10e00 <__printf_chk@plt>
   11a94:	mov	r1, r4
   11a98:	mov	r0, #5
   11a9c:	bl	10e48 <setlocale@plt>
   11aa0:	cmp	r0, #0
   11aa4:	beq	11abc <__assert_fail@plt+0xc20>
   11aa8:	mov	r2, #3
   11aac:	ldr	r1, [pc, #168]	; 11b5c <__assert_fail@plt+0xcc0>
   11ab0:	bl	10e78 <strncmp@plt>
   11ab4:	cmp	r0, #0
   11ab8:	bne	11b00 <__assert_fail@plt+0xc64>
   11abc:	mov	r2, #5
   11ac0:	ldr	r1, [pc, #152]	; 11b60 <__assert_fail@plt+0xcc4>
   11ac4:	mov	r0, #0
   11ac8:	bl	10cd4 <dcgettext@plt>
   11acc:	ldr	r3, [pc, #120]	; 11b4c <__assert_fail@plt+0xcb0>
   11ad0:	ldr	r2, [pc, #124]	; 11b54 <__assert_fail@plt+0xcb8>
   11ad4:	mov	r4, r3
   11ad8:	mov	r1, r0
   11adc:	mov	r0, #1
   11ae0:	bl	10e00 <__printf_chk@plt>
   11ae4:	ldr	r1, [pc, #120]	; 11b64 <__assert_fail@plt+0xcc8>
   11ae8:	mov	r2, #5
   11aec:	mov	r0, #0
   11af0:	bl	10cd4 <dcgettext@plt>
   11af4:	ldr	r3, [pc, #112]	; 11b6c <__assert_fail@plt+0xcd0>
   11af8:	mov	r1, r0
   11afc:	b	11a68 <__assert_fail@plt+0xbcc>
   11b00:	ldr	r5, [pc, #68]	; 11b4c <__assert_fail@plt+0xcb0>
   11b04:	mov	r4, r5
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #92]	; 11b70 <__assert_fail@plt+0xcd4>
   11b10:	mov	r0, #0
   11b14:	bl	10cd4 <dcgettext@plt>
   11b18:	ldr	r1, [r7]
   11b1c:	bl	10c50 <fputs_unlocked@plt>
   11b20:	b	11a20 <__assert_fail@plt+0xb84>
   11b24:	andeq	sl, r2, r0, asr #2
   11b28:	andeq	r8, r1, r0, lsr #22
   11b2c:	andeq	sl, r2, r0, ror r1
   11b30:	andeq	r8, r1, r8, asr #22
   11b34:	andeq	sl, r2, ip, asr #2
   11b38:	andeq	r8, r1, ip, asr #21
   11b3c:	andeq	r8, r1, ip, lsr #23
   11b40:	andeq	r8, r1, r8, asr #24
   11b44:	andeq	r8, r1, r4, ror #23
   11b48:	andeq	r8, r1, r4, lsl ip
   11b4c:	andeq	r8, r1, r8, lsl fp
   11b50:	andeq	r8, r1, ip, asr #24
   11b54:	andeq	r8, r1, r4, ror #24
   11b58:	andeq	r8, r1, ip, lsl #25
   11b5c:	muleq	r1, ip, ip
   11b60:	andeq	r8, r1, r8, ror #25
   11b64:	andeq	r8, r1, r4, lsl #26
   11b68:	andeq	r8, r1, r0, lsl ip
   11b6c:	andeq	r8, r1, r4, ror #28
   11b70:	andeq	r8, r1, r0, lsr #25
   11b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b78:	mov	r6, r0
   11b7c:	ldr	r4, [pc, #1660]	; 12200 <__assert_fail@plt+0x1364>
   11b80:	sub	sp, sp, #12
   11b84:	ldr	r5, [r6, #4]
   11b88:	cmp	r5, #0
   11b8c:	beq	11f08 <__assert_fail@plt+0x106c>
   11b90:	ldr	r7, [r5, #4]
   11b94:	cmp	r7, #0
   11b98:	beq	11f24 <__assert_fail@plt+0x1088>
   11b9c:	ldr	r8, [r7, #4]
   11ba0:	cmp	r8, #0
   11ba4:	beq	11f40 <__assert_fail@plt+0x10a4>
   11ba8:	ldr	r9, [r8, #4]
   11bac:	cmp	r9, #0
   11bb0:	beq	11f5c <__assert_fail@plt+0x10c0>
   11bb4:	ldr	sl, [r9, #4]
   11bb8:	cmp	sl, #0
   11bbc:	beq	11eec <__assert_fail@plt+0x1050>
   11bc0:	ldr	fp, [sl, #4]
   11bc4:	cmp	fp, #0
   11bc8:	beq	11f78 <__assert_fail@plt+0x10dc>
   11bcc:	ldr	r3, [fp, #4]
   11bd0:	cmp	r3, #0
   11bd4:	beq	11f94 <__assert_fail@plt+0x10f8>
   11bd8:	ldr	r0, [r3, #4]
   11bdc:	cmp	r0, #0
   11be0:	beq	11fd0 <__assert_fail@plt+0x1134>
   11be4:	str	r3, [sp, #4]
   11be8:	bl	11b74 <__assert_fail@plt+0xcd8>
   11bec:	ldr	r3, [sp, #4]
   11bf0:	cmp	r0, #0
   11bf4:	bne	11ee0 <__assert_fail@plt+0x1044>
   11bf8:	ldr	r2, [r3, #16]
   11bfc:	ldr	r0, [r3, #8]
   11c00:	cmp	r2, #0
   11c04:	bne	11c2c <__assert_fail@plt+0xd90>
   11c08:	ldrb	r2, [r3, #13]
   11c0c:	cmp	r2, #0
   11c10:	bne	11c2c <__assert_fail@plt+0xd90>
   11c14:	ldr	r2, [r4, #4]
   11c18:	cmp	r2, #0
   11c1c:	streq	r3, [r4, #4]
   11c20:	ldrne	r2, [r4, #8]
   11c24:	str	r3, [r4, #8]
   11c28:	strne	r3, [r2, #20]
   11c2c:	cmp	r0, #0
   11c30:	beq	11c40 <__assert_fail@plt+0xda4>
   11c34:	bl	11b74 <__assert_fail@plt+0xcd8>
   11c38:	cmp	r0, #0
   11c3c:	bne	11ee0 <__assert_fail@plt+0x1044>
   11c40:	ldr	r3, [fp, #16]
   11c44:	ldr	r0, [fp, #8]
   11c48:	cmp	r3, #0
   11c4c:	bne	11c74 <__assert_fail@plt+0xdd8>
   11c50:	ldrb	r3, [fp, #13]
   11c54:	cmp	r3, #0
   11c58:	bne	11c74 <__assert_fail@plt+0xdd8>
   11c5c:	ldr	r3, [r4, #4]
   11c60:	cmp	r3, #0
   11c64:	streq	fp, [r4, #4]
   11c68:	ldrne	r3, [r4, #8]
   11c6c:	str	fp, [r4, #8]
   11c70:	strne	fp, [r3, #20]
   11c74:	cmp	r0, #0
   11c78:	beq	11c88 <__assert_fail@plt+0xdec>
   11c7c:	bl	11b74 <__assert_fail@plt+0xcd8>
   11c80:	cmp	r0, #0
   11c84:	bne	11ee0 <__assert_fail@plt+0x1044>
   11c88:	ldr	r3, [sl, #16]
   11c8c:	ldr	r0, [sl, #8]
   11c90:	cmp	r3, #0
   11c94:	bne	11cbc <__assert_fail@plt+0xe20>
   11c98:	ldrb	r3, [sl, #13]
   11c9c:	cmp	r3, #0
   11ca0:	bne	11cbc <__assert_fail@plt+0xe20>
   11ca4:	ldr	r3, [r4, #4]
   11ca8:	cmp	r3, #0
   11cac:	streq	sl, [r4, #4]
   11cb0:	ldrne	r3, [r4, #8]
   11cb4:	str	sl, [r4, #8]
   11cb8:	strne	sl, [r3, #20]
   11cbc:	cmp	r0, #0
   11cc0:	beq	11cd0 <__assert_fail@plt+0xe34>
   11cc4:	bl	11b74 <__assert_fail@plt+0xcd8>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11ee0 <__assert_fail@plt+0x1044>
   11cd0:	ldr	r3, [r9, #16]
   11cd4:	ldr	r0, [r9, #8]
   11cd8:	cmp	r3, #0
   11cdc:	bne	11d04 <__assert_fail@plt+0xe68>
   11ce0:	ldrb	r3, [r9, #13]
   11ce4:	cmp	r3, #0
   11ce8:	bne	11d04 <__assert_fail@plt+0xe68>
   11cec:	ldr	r3, [r4, #4]
   11cf0:	cmp	r3, #0
   11cf4:	streq	r9, [r4, #4]
   11cf8:	ldrne	r3, [r4, #8]
   11cfc:	str	r9, [r4, #8]
   11d00:	strne	r9, [r3, #20]
   11d04:	cmp	r0, #0
   11d08:	beq	11d18 <__assert_fail@plt+0xe7c>
   11d0c:	bl	11b74 <__assert_fail@plt+0xcd8>
   11d10:	cmp	r0, #0
   11d14:	bne	11ee0 <__assert_fail@plt+0x1044>
   11d18:	ldr	r3, [r8, #16]
   11d1c:	ldr	r0, [r8, #8]
   11d20:	cmp	r3, #0
   11d24:	bne	11d4c <__assert_fail@plt+0xeb0>
   11d28:	ldrb	r3, [r8, #13]
   11d2c:	cmp	r3, #0
   11d30:	bne	11d4c <__assert_fail@plt+0xeb0>
   11d34:	ldr	r3, [r4, #4]
   11d38:	cmp	r3, #0
   11d3c:	streq	r8, [r4, #4]
   11d40:	ldrne	r3, [r4, #8]
   11d44:	str	r8, [r4, #8]
   11d48:	strne	r8, [r3, #20]
   11d4c:	cmp	r0, #0
   11d50:	beq	11d60 <__assert_fail@plt+0xec4>
   11d54:	bl	11b74 <__assert_fail@plt+0xcd8>
   11d58:	cmp	r0, #0
   11d5c:	bne	11ee0 <__assert_fail@plt+0x1044>
   11d60:	ldr	r3, [r7, #16]
   11d64:	ldr	r0, [r7, #8]
   11d68:	cmp	r3, #0
   11d6c:	bne	11d94 <__assert_fail@plt+0xef8>
   11d70:	ldrb	r3, [r7, #13]
   11d74:	cmp	r3, #0
   11d78:	bne	11d94 <__assert_fail@plt+0xef8>
   11d7c:	ldr	r3, [r4, #4]
   11d80:	cmp	r3, #0
   11d84:	streq	r7, [r4, #4]
   11d88:	ldrne	r3, [r4, #8]
   11d8c:	str	r7, [r4, #8]
   11d90:	strne	r7, [r3, #20]
   11d94:	cmp	r0, #0
   11d98:	beq	11da8 <__assert_fail@plt+0xf0c>
   11d9c:	bl	11b74 <__assert_fail@plt+0xcd8>
   11da0:	cmp	r0, #0
   11da4:	bne	11ee0 <__assert_fail@plt+0x1044>
   11da8:	ldr	r3, [r5, #16]
   11dac:	ldr	r7, [r5, #8]
   11db0:	cmp	r3, #0
   11db4:	bne	11ddc <__assert_fail@plt+0xf40>
   11db8:	ldrb	r3, [r5, #13]
   11dbc:	cmp	r3, #0
   11dc0:	bne	11ddc <__assert_fail@plt+0xf40>
   11dc4:	ldr	r3, [r4, #4]
   11dc8:	cmp	r3, #0
   11dcc:	streq	r5, [r4, #4]
   11dd0:	ldrne	r3, [r4, #8]
   11dd4:	str	r5, [r4, #8]
   11dd8:	strne	r5, [r3, #20]
   11ddc:	cmp	r7, #0
   11de0:	beq	11e44 <__assert_fail@plt+0xfa8>
   11de4:	ldr	r0, [r7, #4]
   11de8:	cmp	r0, #0
   11dec:	beq	1201c <__assert_fail@plt+0x1180>
   11df0:	bl	11b74 <__assert_fail@plt+0xcd8>
   11df4:	cmp	r0, #0
   11df8:	bne	11ee0 <__assert_fail@plt+0x1044>
   11dfc:	ldr	r3, [r7, #16]
   11e00:	ldr	r0, [r7, #8]
   11e04:	cmp	r3, #0
   11e08:	bne	11e30 <__assert_fail@plt+0xf94>
   11e0c:	ldrb	r3, [r7, #13]
   11e10:	cmp	r3, #0
   11e14:	bne	11e30 <__assert_fail@plt+0xf94>
   11e18:	ldr	r3, [r4, #4]
   11e1c:	cmp	r3, #0
   11e20:	streq	r7, [r4, #4]
   11e24:	ldrne	r3, [r4, #8]
   11e28:	str	r7, [r4, #8]
   11e2c:	strne	r7, [r3, #20]
   11e30:	cmp	r0, #0
   11e34:	beq	11e44 <__assert_fail@plt+0xfa8>
   11e38:	bl	11b74 <__assert_fail@plt+0xcd8>
   11e3c:	cmp	r0, #0
   11e40:	bne	11ee0 <__assert_fail@plt+0x1044>
   11e44:	ldr	r3, [r6, #16]
   11e48:	ldr	r5, [r6, #8]
   11e4c:	cmp	r3, #0
   11e50:	bne	11e78 <__assert_fail@plt+0xfdc>
   11e54:	ldrb	r3, [r6, #13]
   11e58:	cmp	r3, #0
   11e5c:	bne	11e78 <__assert_fail@plt+0xfdc>
   11e60:	ldr	r3, [r4, #4]
   11e64:	cmp	r3, #0
   11e68:	streq	r6, [r4, #4]
   11e6c:	ldrne	r3, [r4, #8]
   11e70:	str	r6, [r4, #8]
   11e74:	strne	r6, [r3, #20]
   11e78:	cmp	r5, #0
   11e7c:	beq	11ed4 <__assert_fail@plt+0x1038>
   11e80:	ldr	r0, [r5, #4]
   11e84:	cmp	r0, #0
   11e88:	beq	11fb0 <__assert_fail@plt+0x1114>
   11e8c:	bl	11b74 <__assert_fail@plt+0xcd8>
   11e90:	cmp	r0, #0
   11e94:	bne	11ee0 <__assert_fail@plt+0x1044>
   11e98:	ldr	r3, [r5, #16]
   11e9c:	cmp	r3, #0
   11ea0:	ldr	r3, [r5, #8]
   11ea4:	bne	11ecc <__assert_fail@plt+0x1030>
   11ea8:	ldrb	r2, [r5, #13]
   11eac:	cmp	r2, #0
   11eb0:	bne	11ecc <__assert_fail@plt+0x1030>
   11eb4:	ldr	r2, [r4, #4]
   11eb8:	cmp	r2, #0
   11ebc:	streq	r5, [r4, #4]
   11ec0:	ldrne	r2, [r4, #8]
   11ec4:	str	r5, [r4, #8]
   11ec8:	strne	r5, [r2, #20]
   11ecc:	subs	r6, r3, #0
   11ed0:	bne	11b84 <__assert_fail@plt+0xce8>
   11ed4:	mov	r0, #0
   11ed8:	add	sp, sp, #12
   11edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ee0:	mov	r0, #1
   11ee4:	add	sp, sp, #12
   11ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eec:	ldr	r0, [r9, #8]
   11ef0:	ldr	r3, [r9, #16]
   11ef4:	cmp	r0, #0
   11ef8:	beq	12108 <__assert_fail@plt+0x126c>
   11efc:	cmp	r3, #0
   11f00:	beq	11ce0 <__assert_fail@plt+0xe44>
   11f04:	b	11d0c <__assert_fail@plt+0xe70>
   11f08:	ldr	r5, [r6, #8]
   11f0c:	ldr	r3, [r6, #16]
   11f10:	cmp	r5, #0
   11f14:	beq	12044 <__assert_fail@plt+0x11a8>
   11f18:	cmp	r3, #0
   11f1c:	beq	11e54 <__assert_fail@plt+0xfb8>
   11f20:	b	11e80 <__assert_fail@plt+0xfe4>
   11f24:	ldr	r7, [r5, #8]
   11f28:	ldr	r3, [r5, #16]
   11f2c:	cmp	r7, #0
   11f30:	beq	12078 <__assert_fail@plt+0x11dc>
   11f34:	cmp	r3, #0
   11f38:	beq	11db8 <__assert_fail@plt+0xf1c>
   11f3c:	b	11de4 <__assert_fail@plt+0xf48>
   11f40:	ldr	r0, [r7, #8]
   11f44:	ldr	r3, [r7, #16]
   11f48:	cmp	r0, #0
   11f4c:	beq	120a8 <__assert_fail@plt+0x120c>
   11f50:	cmp	r3, #0
   11f54:	beq	11d70 <__assert_fail@plt+0xed4>
   11f58:	b	11d9c <__assert_fail@plt+0xf00>
   11f5c:	ldr	r0, [r8, #8]
   11f60:	ldr	r3, [r8, #16]
   11f64:	cmp	r0, #0
   11f68:	beq	120d8 <__assert_fail@plt+0x123c>
   11f6c:	cmp	r3, #0
   11f70:	beq	11d28 <__assert_fail@plt+0xe8c>
   11f74:	b	11d54 <__assert_fail@plt+0xeb8>
   11f78:	ldr	r0, [sl, #8]
   11f7c:	ldr	r3, [sl, #16]
   11f80:	cmp	r0, #0
   11f84:	beq	12138 <__assert_fail@plt+0x129c>
   11f88:	cmp	r3, #0
   11f8c:	beq	11c98 <__assert_fail@plt+0xdfc>
   11f90:	b	11cc4 <__assert_fail@plt+0xe28>
   11f94:	ldr	r0, [fp, #8]
   11f98:	ldr	r3, [fp, #16]
   11f9c:	cmp	r0, #0
   11fa0:	beq	12168 <__assert_fail@plt+0x12cc>
   11fa4:	cmp	r3, #0
   11fa8:	beq	11c50 <__assert_fail@plt+0xdb4>
   11fac:	b	11c7c <__assert_fail@plt+0xde0>
   11fb0:	ldr	r3, [r5, #8]
   11fb4:	cmp	r3, #0
   11fb8:	mov	r6, r3
   11fbc:	beq	12198 <__assert_fail@plt+0x12fc>
   11fc0:	ldr	r2, [r5, #16]
   11fc4:	cmp	r2, #0
   11fc8:	beq	11ea8 <__assert_fail@plt+0x100c>
   11fcc:	b	11b84 <__assert_fail@plt+0xce8>
   11fd0:	ldr	r0, [r3, #8]
   11fd4:	ldr	r2, [r3, #16]
   11fd8:	cmp	r0, #0
   11fdc:	beq	11fec <__assert_fail@plt+0x1150>
   11fe0:	cmp	r2, #0
   11fe4:	beq	11c08 <__assert_fail@plt+0xd6c>
   11fe8:	b	11c34 <__assert_fail@plt+0xd98>
   11fec:	cmp	r2, #0
   11ff0:	bne	11c40 <__assert_fail@plt+0xda4>
   11ff4:	ldrb	r2, [r3, #13]
   11ff8:	cmp	r2, #0
   11ffc:	bne	11c40 <__assert_fail@plt+0xda4>
   12000:	ldr	r2, [r4, #4]
   12004:	cmp	r2, #0
   12008:	streq	r3, [r4, #4]
   1200c:	ldrne	r2, [r4, #8]
   12010:	str	r3, [r4, #8]
   12014:	strne	r3, [r2, #20]
   12018:	b	11c40 <__assert_fail@plt+0xda4>
   1201c:	ldr	r0, [r7, #8]
   12020:	ldr	r3, [r7, #16]
   12024:	cmp	r0, #0
   12028:	beq	121d0 <__assert_fail@plt+0x1334>
   1202c:	cmp	r3, #0
   12030:	bne	11e38 <__assert_fail@plt+0xf9c>
   12034:	ldrb	r3, [r7, #13]
   12038:	cmp	r3, #0
   1203c:	beq	11e18 <__assert_fail@plt+0xf7c>
   12040:	b	11e38 <__assert_fail@plt+0xf9c>
   12044:	cmp	r3, #0
   12048:	bne	11ed4 <__assert_fail@plt+0x1038>
   1204c:	ldrb	r0, [r6, #13]
   12050:	cmp	r0, #0
   12054:	bne	11ed4 <__assert_fail@plt+0x1038>
   12058:	ldr	r3, [pc, #416]	; 12200 <__assert_fail@plt+0x1364>
   1205c:	ldr	r2, [r3, #4]
   12060:	cmp	r2, #0
   12064:	streq	r6, [r3, #4]
   12068:	ldrne	r2, [r3, #8]
   1206c:	str	r6, [r3, #8]
   12070:	strne	r6, [r2, #20]
   12074:	b	11ee4 <__assert_fail@plt+0x1048>
   12078:	cmp	r3, #0
   1207c:	bne	11e44 <__assert_fail@plt+0xfa8>
   12080:	ldrb	r3, [r5, #13]
   12084:	cmp	r3, #0
   12088:	bne	11e44 <__assert_fail@plt+0xfa8>
   1208c:	ldr	r3, [r4, #4]
   12090:	cmp	r3, #0
   12094:	streq	r5, [r4, #4]
   12098:	ldrne	r3, [r4, #8]
   1209c:	str	r5, [r4, #8]
   120a0:	strne	r5, [r3, #20]
   120a4:	b	11e44 <__assert_fail@plt+0xfa8>
   120a8:	cmp	r3, #0
   120ac:	bne	11da8 <__assert_fail@plt+0xf0c>
   120b0:	ldrb	r3, [r7, #13]
   120b4:	cmp	r3, #0
   120b8:	bne	11da8 <__assert_fail@plt+0xf0c>
   120bc:	ldr	r3, [r4, #4]
   120c0:	cmp	r3, #0
   120c4:	streq	r7, [r4, #4]
   120c8:	ldrne	r3, [r4, #8]
   120cc:	str	r7, [r4, #8]
   120d0:	strne	r7, [r3, #20]
   120d4:	b	11da8 <__assert_fail@plt+0xf0c>
   120d8:	cmp	r3, #0
   120dc:	bne	11d60 <__assert_fail@plt+0xec4>
   120e0:	ldrb	r3, [r8, #13]
   120e4:	cmp	r3, #0
   120e8:	bne	11d60 <__assert_fail@plt+0xec4>
   120ec:	ldr	r3, [r4, #4]
   120f0:	cmp	r3, #0
   120f4:	streq	r8, [r4, #4]
   120f8:	ldrne	r3, [r4, #8]
   120fc:	str	r8, [r4, #8]
   12100:	strne	r8, [r3, #20]
   12104:	b	11d60 <__assert_fail@plt+0xec4>
   12108:	cmp	r3, #0
   1210c:	bne	11d18 <__assert_fail@plt+0xe7c>
   12110:	ldrb	r3, [r9, #13]
   12114:	cmp	r3, #0
   12118:	bne	11d18 <__assert_fail@plt+0xe7c>
   1211c:	ldr	r3, [r4, #4]
   12120:	cmp	r3, #0
   12124:	streq	r9, [r4, #4]
   12128:	ldrne	r3, [r4, #8]
   1212c:	str	r9, [r4, #8]
   12130:	strne	r9, [r3, #20]
   12134:	b	11d18 <__assert_fail@plt+0xe7c>
   12138:	cmp	r3, #0
   1213c:	bne	11cd0 <__assert_fail@plt+0xe34>
   12140:	ldrb	r3, [sl, #13]
   12144:	cmp	r3, #0
   12148:	bne	11cd0 <__assert_fail@plt+0xe34>
   1214c:	ldr	r3, [r4, #4]
   12150:	cmp	r3, #0
   12154:	streq	sl, [r4, #4]
   12158:	ldrne	r3, [r4, #8]
   1215c:	str	sl, [r4, #8]
   12160:	strne	sl, [r3, #20]
   12164:	b	11cd0 <__assert_fail@plt+0xe34>
   12168:	cmp	r3, #0
   1216c:	bne	11c88 <__assert_fail@plt+0xdec>
   12170:	ldrb	r3, [fp, #13]
   12174:	cmp	r3, #0
   12178:	bne	11c88 <__assert_fail@plt+0xdec>
   1217c:	ldr	r3, [r4, #4]
   12180:	cmp	r3, #0
   12184:	streq	fp, [r4, #4]
   12188:	ldrne	r3, [r4, #8]
   1218c:	str	fp, [r4, #8]
   12190:	strne	fp, [r3, #20]
   12194:	b	11c88 <__assert_fail@plt+0xdec>
   12198:	ldr	r3, [r5, #16]
   1219c:	cmp	r3, #0
   121a0:	bne	11ed4 <__assert_fail@plt+0x1038>
   121a4:	ldrb	r0, [r5, #13]
   121a8:	cmp	r0, #0
   121ac:	bne	11ed4 <__assert_fail@plt+0x1038>
   121b0:	ldr	r3, [pc, #72]	; 12200 <__assert_fail@plt+0x1364>
   121b4:	ldr	r2, [r3, #4]
   121b8:	cmp	r2, #0
   121bc:	streq	r5, [r3, #4]
   121c0:	ldrne	r2, [r3, #8]
   121c4:	str	r5, [r3, #8]
   121c8:	strne	r5, [r2, #20]
   121cc:	b	11ee4 <__assert_fail@plt+0x1048>
   121d0:	cmp	r3, #0
   121d4:	bne	11e44 <__assert_fail@plt+0xfa8>
   121d8:	ldrb	r3, [r7, #13]
   121dc:	cmp	r3, #0
   121e0:	bne	11e44 <__assert_fail@plt+0xfa8>
   121e4:	ldr	r3, [r4, #4]
   121e8:	cmp	r3, #0
   121ec:	streq	r7, [r4, #4]
   121f0:	ldrne	r3, [r4, #8]
   121f4:	str	r7, [r4, #8]
   121f8:	strne	r7, [r3, #20]
   121fc:	b	11e44 <__assert_fail@plt+0xfa8>
   12200:	andeq	sl, r2, r8, asr r1
   12204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12208:	mov	r6, r0
   1220c:	sub	sp, sp, #12
   12210:	ldr	r5, [r6, #4]
   12214:	mov	r4, r1
   12218:	cmp	r5, #0
   1221c:	beq	12554 <__assert_fail@plt+0x16b8>
   12220:	ldr	r7, [r5, #4]
   12224:	cmp	r7, #0
   12228:	beq	12600 <__assert_fail@plt+0x1764>
   1222c:	ldr	r8, [r7, #4]
   12230:	cmp	r8, #0
   12234:	beq	125c0 <__assert_fail@plt+0x1724>
   12238:	ldr	r9, [r8, #4]
   1223c:	cmp	r9, #0
   12240:	beq	125e0 <__assert_fail@plt+0x1744>
   12244:	ldr	sl, [r9, #4]
   12248:	cmp	sl, #0
   1224c:	beq	125a0 <__assert_fail@plt+0x1704>
   12250:	ldr	fp, [sl, #4]
   12254:	cmp	fp, #0
   12258:	beq	12618 <__assert_fail@plt+0x177c>
   1225c:	ldr	r3, [fp, #4]
   12260:	cmp	r3, #0
   12264:	beq	12638 <__assert_fail@plt+0x179c>
   12268:	ldr	r2, [r3, #4]
   1226c:	cmp	r2, #0
   12270:	beq	12574 <__assert_fail@plt+0x16d8>
   12274:	ldr	r0, [r2, #4]
   12278:	cmp	r0, #0
   1227c:	beq	1270c <__assert_fail@plt+0x1870>
   12280:	mov	r1, r4
   12284:	str	r2, [sp, #4]
   12288:	str	r3, [sp]
   1228c:	bl	12204 <__assert_fail@plt+0x1368>
   12290:	cmp	r0, #0
   12294:	bne	12590 <__assert_fail@plt+0x16f4>
   12298:	ldr	r2, [sp, #4]
   1229c:	mov	r0, r2
   122a0:	blx	r4
   122a4:	ldr	r2, [sp, #4]
   122a8:	ldr	r3, [sp]
   122ac:	cmp	r0, #0
   122b0:	bne	12590 <__assert_fail@plt+0x16f4>
   122b4:	ldr	r0, [r2, #8]
   122b8:	cmp	r0, #0
   122bc:	beq	12658 <__assert_fail@plt+0x17bc>
   122c0:	mov	r1, r4
   122c4:	str	r3, [sp]
   122c8:	bl	12204 <__assert_fail@plt+0x1368>
   122cc:	ldr	r3, [sp]
   122d0:	cmp	r0, #0
   122d4:	bne	12590 <__assert_fail@plt+0x16f4>
   122d8:	mov	r0, r3
   122dc:	str	r3, [sp]
   122e0:	blx	r4
   122e4:	cmp	r0, #0
   122e8:	bne	12590 <__assert_fail@plt+0x16f4>
   122ec:	ldr	r3, [sp]
   122f0:	ldr	r0, [r3, #8]
   122f4:	cmp	r0, #0
   122f8:	beq	12644 <__assert_fail@plt+0x17a8>
   122fc:	mov	r1, r4
   12300:	bl	12204 <__assert_fail@plt+0x1368>
   12304:	cmp	r0, #0
   12308:	bne	12590 <__assert_fail@plt+0x16f4>
   1230c:	mov	r0, fp
   12310:	blx	r4
   12314:	cmp	r0, #0
   12318:	bne	12590 <__assert_fail@plt+0x16f4>
   1231c:	ldr	r0, [fp, #8]
   12320:	cmp	r0, #0
   12324:	beq	12624 <__assert_fail@plt+0x1788>
   12328:	mov	r1, r4
   1232c:	bl	12204 <__assert_fail@plt+0x1368>
   12330:	cmp	r0, #0
   12334:	bne	12590 <__assert_fail@plt+0x16f4>
   12338:	mov	r0, sl
   1233c:	blx	r4
   12340:	cmp	r0, #0
   12344:	bne	12590 <__assert_fail@plt+0x16f4>
   12348:	ldr	r0, [sl, #8]
   1234c:	cmp	r0, #0
   12350:	beq	125ac <__assert_fail@plt+0x1710>
   12354:	mov	r1, r4
   12358:	bl	12204 <__assert_fail@plt+0x1368>
   1235c:	cmp	r0, #0
   12360:	bne	12590 <__assert_fail@plt+0x16f4>
   12364:	mov	r0, r9
   12368:	blx	r4
   1236c:	cmp	r0, #0
   12370:	bne	12590 <__assert_fail@plt+0x16f4>
   12374:	ldr	r0, [r9, #8]
   12378:	cmp	r0, #0
   1237c:	beq	125ec <__assert_fail@plt+0x1750>
   12380:	mov	r1, r4
   12384:	bl	12204 <__assert_fail@plt+0x1368>
   12388:	cmp	r0, #0
   1238c:	bne	12590 <__assert_fail@plt+0x16f4>
   12390:	mov	r0, r8
   12394:	blx	r4
   12398:	cmp	r0, #0
   1239c:	bne	12590 <__assert_fail@plt+0x16f4>
   123a0:	ldr	r0, [r8, #8]
   123a4:	cmp	r0, #0
   123a8:	beq	125cc <__assert_fail@plt+0x1730>
   123ac:	mov	r1, r4
   123b0:	bl	12204 <__assert_fail@plt+0x1368>
   123b4:	cmp	r0, #0
   123b8:	bne	12590 <__assert_fail@plt+0x16f4>
   123bc:	mov	r0, r7
   123c0:	blx	r4
   123c4:	cmp	r0, #0
   123c8:	bne	12590 <__assert_fail@plt+0x16f4>
   123cc:	ldr	r7, [r7, #8]
   123d0:	cmp	r7, #0
   123d4:	beq	12420 <__assert_fail@plt+0x1584>
   123d8:	ldr	r0, [r7, #4]
   123dc:	cmp	r0, #0
   123e0:	beq	12738 <__assert_fail@plt+0x189c>
   123e4:	mov	r1, r4
   123e8:	bl	12204 <__assert_fail@plt+0x1368>
   123ec:	cmp	r0, #0
   123f0:	bne	12590 <__assert_fail@plt+0x16f4>
   123f4:	mov	r0, r7
   123f8:	blx	r4
   123fc:	cmp	r0, #0
   12400:	bne	12590 <__assert_fail@plt+0x16f4>
   12404:	ldr	r0, [r7, #8]
   12408:	cmp	r0, #0
   1240c:	beq	12420 <__assert_fail@plt+0x1584>
   12410:	mov	r1, r4
   12414:	bl	12204 <__assert_fail@plt+0x1368>
   12418:	cmp	r0, #0
   1241c:	bne	12590 <__assert_fail@plt+0x16f4>
   12420:	mov	r0, r5
   12424:	blx	r4
   12428:	cmp	r0, #0
   1242c:	bne	12590 <__assert_fail@plt+0x16f4>
   12430:	ldr	r5, [r5, #8]
   12434:	cmp	r5, #0
   12438:	beq	12484 <__assert_fail@plt+0x15e8>
   1243c:	ldr	r0, [r5, #4]
   12440:	cmp	r0, #0
   12444:	beq	126ec <__assert_fail@plt+0x1850>
   12448:	mov	r1, r4
   1244c:	bl	12204 <__assert_fail@plt+0x1368>
   12450:	cmp	r0, #0
   12454:	bne	12590 <__assert_fail@plt+0x16f4>
   12458:	mov	r0, r5
   1245c:	blx	r4
   12460:	cmp	r0, #0
   12464:	bne	12590 <__assert_fail@plt+0x16f4>
   12468:	ldr	r0, [r5, #8]
   1246c:	cmp	r0, #0
   12470:	beq	12484 <__assert_fail@plt+0x15e8>
   12474:	mov	r1, r4
   12478:	bl	12204 <__assert_fail@plt+0x1368>
   1247c:	cmp	r0, #0
   12480:	bne	12590 <__assert_fail@plt+0x16f4>
   12484:	mov	r0, r6
   12488:	blx	r4
   1248c:	subs	r5, r0, #0
   12490:	bne	12590 <__assert_fail@plt+0x16f4>
   12494:	ldr	r6, [r6, #8]
   12498:	cmp	r6, #0
   1249c:	beq	12594 <__assert_fail@plt+0x16f8>
   124a0:	ldr	r7, [r6, #4]
   124a4:	cmp	r7, #0
   124a8:	beq	12674 <__assert_fail@plt+0x17d8>
   124ac:	ldr	r8, [r7, #4]
   124b0:	cmp	r8, #0
   124b4:	beq	126cc <__assert_fail@plt+0x1830>
   124b8:	ldr	r0, [r8, #4]
   124bc:	cmp	r0, #0
   124c0:	beq	12758 <__assert_fail@plt+0x18bc>
   124c4:	mov	r1, r4
   124c8:	bl	12204 <__assert_fail@plt+0x1368>
   124cc:	cmp	r0, #0
   124d0:	bne	12590 <__assert_fail@plt+0x16f4>
   124d4:	mov	r0, r8
   124d8:	blx	r4
   124dc:	cmp	r0, #0
   124e0:	bne	12590 <__assert_fail@plt+0x16f4>
   124e4:	ldr	r0, [r8, #8]
   124e8:	cmp	r0, #0
   124ec:	beq	12500 <__assert_fail@plt+0x1664>
   124f0:	mov	r1, r4
   124f4:	bl	12204 <__assert_fail@plt+0x1368>
   124f8:	cmp	r0, #0
   124fc:	bne	12590 <__assert_fail@plt+0x16f4>
   12500:	mov	r0, r7
   12504:	blx	r4
   12508:	cmp	r0, #0
   1250c:	bne	12590 <__assert_fail@plt+0x16f4>
   12510:	ldr	r0, [r7, #8]
   12514:	cmp	r0, #0
   12518:	beq	1252c <__assert_fail@plt+0x1690>
   1251c:	mov	r1, r4
   12520:	bl	12204 <__assert_fail@plt+0x1368>
   12524:	cmp	r0, #0
   12528:	bne	12590 <__assert_fail@plt+0x16f4>
   1252c:	mov	r0, r6
   12530:	blx	r4
   12534:	cmp	r0, #0
   12538:	bne	12590 <__assert_fail@plt+0x16f4>
   1253c:	ldr	r6, [r6, #8]
   12540:	cmp	r6, #0
   12544:	beq	12594 <__assert_fail@plt+0x16f8>
   12548:	ldr	r5, [r6, #4]
   1254c:	cmp	r5, #0
   12550:	bne	12220 <__assert_fail@plt+0x1384>
   12554:	ldr	r3, [r6, #8]
   12558:	cmp	r3, #0
   1255c:	bne	12484 <__assert_fail@plt+0x15e8>
   12560:	mov	r0, r6
   12564:	mov	r3, r4
   12568:	add	sp, sp, #12
   1256c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12570:	bx	r3
   12574:	ldr	r2, [r3, #8]
   12578:	cmp	r2, #0
   1257c:	bne	12658 <__assert_fail@plt+0x17bc>
   12580:	mov	r0, r3
   12584:	blx	r4
   12588:	cmp	r0, #0
   1258c:	beq	1230c <__assert_fail@plt+0x1470>
   12590:	mov	r5, #1
   12594:	mov	r0, r5
   12598:	add	sp, sp, #12
   1259c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125a0:	ldr	r3, [r9, #8]
   125a4:	cmp	r3, #0
   125a8:	beq	12778 <__assert_fail@plt+0x18dc>
   125ac:	mov	r0, r9
   125b0:	blx	r4
   125b4:	cmp	r0, #0
   125b8:	beq	12374 <__assert_fail@plt+0x14d8>
   125bc:	b	12590 <__assert_fail@plt+0x16f4>
   125c0:	ldr	r3, [r7, #8]
   125c4:	cmp	r3, #0
   125c8:	beq	12684 <__assert_fail@plt+0x17e8>
   125cc:	mov	r0, r7
   125d0:	blx	r4
   125d4:	cmp	r0, #0
   125d8:	beq	123cc <__assert_fail@plt+0x1530>
   125dc:	b	12590 <__assert_fail@plt+0x16f4>
   125e0:	ldr	r3, [r8, #8]
   125e4:	cmp	r3, #0
   125e8:	beq	12690 <__assert_fail@plt+0x17f4>
   125ec:	mov	r0, r8
   125f0:	blx	r4
   125f4:	cmp	r0, #0
   125f8:	beq	123a0 <__assert_fail@plt+0x1504>
   125fc:	b	12590 <__assert_fail@plt+0x16f4>
   12600:	ldr	r3, [r5, #8]
   12604:	cmp	r3, #0
   12608:	bne	12420 <__assert_fail@plt+0x1584>
   1260c:	mov	r0, r5
   12610:	blx	r4
   12614:	b	1247c <__assert_fail@plt+0x15e0>
   12618:	ldr	r3, [sl, #8]
   1261c:	cmp	r3, #0
   12620:	beq	126a4 <__assert_fail@plt+0x1808>
   12624:	mov	r0, sl
   12628:	blx	r4
   1262c:	cmp	r0, #0
   12630:	beq	12348 <__assert_fail@plt+0x14ac>
   12634:	b	12590 <__assert_fail@plt+0x16f4>
   12638:	ldr	r3, [fp, #8]
   1263c:	cmp	r3, #0
   12640:	beq	126b8 <__assert_fail@plt+0x181c>
   12644:	mov	r0, fp
   12648:	blx	r4
   1264c:	cmp	r0, #0
   12650:	beq	1231c <__assert_fail@plt+0x1480>
   12654:	b	12590 <__assert_fail@plt+0x16f4>
   12658:	mov	r0, r3
   1265c:	str	r3, [sp]
   12660:	blx	r4
   12664:	ldr	r3, [sp]
   12668:	cmp	r0, #0
   1266c:	beq	122f0 <__assert_fail@plt+0x1454>
   12670:	b	12590 <__assert_fail@plt+0x16f4>
   12674:	ldr	r3, [r6, #8]
   12678:	cmp	r3, #0
   1267c:	bne	1252c <__assert_fail@plt+0x1690>
   12680:	b	12560 <__assert_fail@plt+0x16c4>
   12684:	mov	r0, r7
   12688:	blx	r4
   1268c:	b	12418 <__assert_fail@plt+0x157c>
   12690:	mov	r0, r8
   12694:	blx	r4
   12698:	cmp	r0, #0
   1269c:	beq	123bc <__assert_fail@plt+0x1520>
   126a0:	b	12590 <__assert_fail@plt+0x16f4>
   126a4:	mov	r0, sl
   126a8:	blx	r4
   126ac:	cmp	r0, #0
   126b0:	beq	12364 <__assert_fail@plt+0x14c8>
   126b4:	b	12590 <__assert_fail@plt+0x16f4>
   126b8:	mov	r0, fp
   126bc:	blx	r4
   126c0:	cmp	r0, #0
   126c4:	beq	12338 <__assert_fail@plt+0x149c>
   126c8:	b	12590 <__assert_fail@plt+0x16f4>
   126cc:	ldr	r3, [r7, #8]
   126d0:	cmp	r3, #0
   126d4:	bne	12500 <__assert_fail@plt+0x1664>
   126d8:	mov	r0, r7
   126dc:	blx	r4
   126e0:	cmp	r0, #0
   126e4:	beq	1252c <__assert_fail@plt+0x1690>
   126e8:	b	12590 <__assert_fail@plt+0x16f4>
   126ec:	ldr	r3, [r5, #8]
   126f0:	cmp	r3, #0
   126f4:	bne	12458 <__assert_fail@plt+0x15bc>
   126f8:	mov	r0, r5
   126fc:	blx	r4
   12700:	cmp	r0, #0
   12704:	beq	12484 <__assert_fail@plt+0x15e8>
   12708:	b	12590 <__assert_fail@plt+0x16f4>
   1270c:	ldr	r1, [r2, #8]
   12710:	cmp	r1, #0
   12714:	beq	1278c <__assert_fail@plt+0x18f0>
   12718:	mov	r0, r2
   1271c:	str	r3, [sp, #4]
   12720:	str	r2, [sp]
   12724:	blx	r4
   12728:	ldm	sp, {r2, r3}
   1272c:	cmp	r0, #0
   12730:	beq	122b4 <__assert_fail@plt+0x1418>
   12734:	b	12590 <__assert_fail@plt+0x16f4>
   12738:	ldr	r3, [r7, #8]
   1273c:	cmp	r3, #0
   12740:	bne	123f4 <__assert_fail@plt+0x1558>
   12744:	mov	r0, r7
   12748:	blx	r4
   1274c:	cmp	r0, #0
   12750:	beq	12420 <__assert_fail@plt+0x1584>
   12754:	b	12590 <__assert_fail@plt+0x16f4>
   12758:	ldr	r3, [r8, #8]
   1275c:	cmp	r3, #0
   12760:	bne	124d4 <__assert_fail@plt+0x1638>
   12764:	mov	r0, r8
   12768:	blx	r4
   1276c:	cmp	r0, #0
   12770:	beq	12500 <__assert_fail@plt+0x1664>
   12774:	b	12590 <__assert_fail@plt+0x16f4>
   12778:	mov	r0, r9
   1277c:	blx	r4
   12780:	cmp	r0, #0
   12784:	beq	12390 <__assert_fail@plt+0x14f4>
   12788:	b	12590 <__assert_fail@plt+0x16f4>
   1278c:	mov	r0, r2
   12790:	str	r3, [sp]
   12794:	blx	r4
   12798:	ldr	r3, [sp]
   1279c:	cmp	r0, #0
   127a0:	beq	122d8 <__assert_fail@plt+0x143c>
   127a4:	b	12590 <__assert_fail@plt+0x16f4>
   127a8:	ldr	r3, [pc, #4]	; 127b4 <__assert_fail@plt+0x1918>
   127ac:	str	r0, [r3]
   127b0:	bx	lr
   127b4:	andeq	sl, r2, r8, ror #2
   127b8:	ldr	r3, [pc, #4]	; 127c4 <__assert_fail@plt+0x1928>
   127bc:	strb	r0, [r3, #4]
   127c0:	bx	lr
   127c4:	andeq	sl, r2, r8, ror #2
   127c8:	ldr	r3, [pc, #192]	; 12890 <__assert_fail@plt+0x19f4>
   127cc:	push	{r4, r5, r6, lr}
   127d0:	sub	sp, sp, #8
   127d4:	ldr	r0, [r3]
   127d8:	bl	183a4 <__assert_fail@plt+0x7508>
   127dc:	cmp	r0, #0
   127e0:	beq	12804 <__assert_fail@plt+0x1968>
   127e4:	ldr	r4, [pc, #168]	; 12894 <__assert_fail@plt+0x19f8>
   127e8:	ldrb	r3, [r4, #4]
   127ec:	cmp	r3, #0
   127f0:	beq	12820 <__assert_fail@plt+0x1984>
   127f4:	bl	10ddc <__errno_location@plt>
   127f8:	ldr	r3, [r0]
   127fc:	cmp	r3, #32
   12800:	bne	12820 <__assert_fail@plt+0x1984>
   12804:	ldr	r3, [pc, #140]	; 12898 <__assert_fail@plt+0x19fc>
   12808:	ldr	r0, [r3]
   1280c:	bl	183a4 <__assert_fail@plt+0x7508>
   12810:	cmp	r0, #0
   12814:	bne	12868 <__assert_fail@plt+0x19cc>
   12818:	add	sp, sp, #8
   1281c:	pop	{r4, r5, r6, pc}
   12820:	mov	r2, #5
   12824:	ldr	r1, [pc, #112]	; 1289c <__assert_fail@plt+0x1a00>
   12828:	mov	r0, #0
   1282c:	bl	10cd4 <dcgettext@plt>
   12830:	ldr	r4, [r4]
   12834:	cmp	r4, #0
   12838:	mov	r5, r0
   1283c:	beq	12874 <__assert_fail@plt+0x19d8>
   12840:	bl	10ddc <__errno_location@plt>
   12844:	ldr	r6, [r0]
   12848:	mov	r0, r4
   1284c:	bl	15af4 <__assert_fail@plt+0x4c58>
   12850:	mov	r1, r6
   12854:	str	r5, [sp]
   12858:	ldr	r2, [pc, #64]	; 128a0 <__assert_fail@plt+0x1a04>
   1285c:	mov	r3, r0
   12860:	mov	r0, #0
   12864:	bl	10d4c <error@plt>
   12868:	ldr	r3, [pc, #52]	; 128a4 <__assert_fail@plt+0x1a08>
   1286c:	ldr	r0, [r3]
   12870:	bl	10c98 <_exit@plt>
   12874:	bl	10ddc <__errno_location@plt>
   12878:	mov	r3, r5
   1287c:	ldr	r2, [pc, #36]	; 128a8 <__assert_fail@plt+0x1a0c>
   12880:	ldr	r1, [r0]
   12884:	mov	r0, r4
   12888:	bl	10d4c <error@plt>
   1288c:	b	12868 <__assert_fail@plt+0x19cc>
   12890:	andeq	sl, r2, ip, asr #2
   12894:	andeq	sl, r2, r8, ror #2
   12898:	andeq	sl, r2, r0, asr #2
   1289c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   128a0:	andeq	r8, r1, r4, ror #29
   128a4:	andeq	sl, r2, r8, ror #1
   128a8:	andeq	r8, r1, r8, ror #29
   128ac:	push	{r4, r5}
   128b0:	pop	{r4, r5}
   128b4:	b	10c74 <posix_fadvise64@plt>
   128b8:	cmp	r0, #0
   128bc:	bxeq	lr
   128c0:	push	{r4, lr}
   128c4:	sub	sp, sp, #16
   128c8:	mov	r4, r1
   128cc:	bl	10e0c <fileno@plt>
   128d0:	mov	r2, #0
   128d4:	mov	r3, #0
   128d8:	str	r4, [sp, #8]
   128dc:	strd	r2, [sp]
   128e0:	bl	10c74 <posix_fadvise64@plt>
   128e4:	add	sp, sp, #16
   128e8:	pop	{r4, pc}
   128ec:	push	{r4, r5, lr}
   128f0:	sub	sp, sp, #12
   128f4:	mov	r4, r0
   128f8:	bl	10e0c <fileno@plt>
   128fc:	cmp	r0, #0
   12900:	mov	r0, r4
   12904:	blt	12980 <__assert_fail@plt+0x1ae4>
   12908:	bl	10d88 <__freading@plt>
   1290c:	cmp	r0, #0
   12910:	bne	1294c <__assert_fail@plt+0x1ab0>
   12914:	mov	r0, r4
   12918:	bl	1298c <__assert_fail@plt+0x1af0>
   1291c:	cmp	r0, #0
   12920:	beq	1297c <__assert_fail@plt+0x1ae0>
   12924:	bl	10ddc <__errno_location@plt>
   12928:	mov	r5, r0
   1292c:	mov	r0, r4
   12930:	ldr	r4, [r5]
   12934:	bl	10e24 <fclose@plt>
   12938:	cmp	r4, #0
   1293c:	mvnne	r0, #0
   12940:	strne	r4, [r5]
   12944:	add	sp, sp, #12
   12948:	pop	{r4, r5, pc}
   1294c:	mov	r0, r4
   12950:	bl	10e0c <fileno@plt>
   12954:	mov	r3, #1
   12958:	str	r3, [sp]
   1295c:	mov	r2, #0
   12960:	mov	r3, #0
   12964:	bl	10d1c <lseek64@plt>
   12968:	mvn	r3, #0
   1296c:	mvn	r2, #0
   12970:	cmp	r1, r3
   12974:	cmpeq	r0, r2
   12978:	bne	12914 <__assert_fail@plt+0x1a78>
   1297c:	mov	r0, r4
   12980:	add	sp, sp, #12
   12984:	pop	{r4, r5, lr}
   12988:	b	10e24 <fclose@plt>
   1298c:	push	{r4, lr}
   12990:	subs	r4, r0, #0
   12994:	sub	sp, sp, #8
   12998:	beq	129b4 <__assert_fail@plt+0x1b18>
   1299c:	bl	10d88 <__freading@plt>
   129a0:	cmp	r0, #0
   129a4:	beq	129b4 <__assert_fail@plt+0x1b18>
   129a8:	ldr	r3, [r4]
   129ac:	tst	r3, #256	; 0x100
   129b0:	bne	129c4 <__assert_fail@plt+0x1b28>
   129b4:	mov	r0, r4
   129b8:	add	sp, sp, #8
   129bc:	pop	{r4, lr}
   129c0:	b	10c80 <fflush@plt>
   129c4:	mov	r3, #1
   129c8:	str	r3, [sp]
   129cc:	mov	r2, #0
   129d0:	mov	r3, #0
   129d4:	mov	r0, r4
   129d8:	bl	12c58 <__assert_fail@plt+0x1dbc>
   129dc:	mov	r0, r4
   129e0:	add	sp, sp, #8
   129e4:	pop	{r4, lr}
   129e8:	b	10c80 <fflush@plt>
   129ec:	push	{r4, r5, lr}
   129f0:	sub	sp, sp, #12
   129f4:	mov	r5, r0
   129f8:	bl	10ddc <__errno_location@plt>
   129fc:	mov	r2, #0
   12a00:	mov	r4, r0
   12a04:	ldr	r3, [r0]
   12a08:	str	r2, [r4]
   12a0c:	mov	r0, r5
   12a10:	str	r3, [sp]
   12a14:	str	r3, [sp, #4]
   12a18:	bl	10c8c <free@plt>
   12a1c:	ldr	r3, [r4]
   12a20:	add	r2, sp, #8
   12a24:	cmp	r3, #0
   12a28:	moveq	r3, #4
   12a2c:	movne	r3, #0
   12a30:	add	r3, r2, r3
   12a34:	ldr	r3, [r3, #-8]
   12a38:	str	r3, [r4]
   12a3c:	add	sp, sp, #12
   12a40:	pop	{r4, r5, pc}
   12a44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a48:	mov	r6, r0
   12a4c:	mov	r0, r2
   12a50:	mov	r5, r2
   12a54:	mov	r7, r1
   12a58:	bl	10e0c <fileno@plt>
   12a5c:	cmp	r0, #1
   12a60:	beq	12bec <__assert_fail@plt+0x1d50>
   12a64:	cmp	r0, #2
   12a68:	beq	12be4 <__assert_fail@plt+0x1d48>
   12a6c:	cmp	r0, #0
   12a70:	beq	12aec <__assert_fail@plt+0x1c50>
   12a74:	mov	r1, #2
   12a78:	mov	r0, r1
   12a7c:	bl	10ce0 <dup2@plt>
   12a80:	subs	r4, r0, #2
   12a84:	movne	r4, #1
   12a88:	mov	r1, #1
   12a8c:	mov	r0, r1
   12a90:	bl	10ce0 <dup2@plt>
   12a94:	mov	r1, #0
   12a98:	subs	r9, r0, #1
   12a9c:	mov	r0, r1
   12aa0:	movne	r9, #1
   12aa4:	bl	10ce0 <dup2@plt>
   12aa8:	subs	r8, r0, #0
   12aac:	beq	12b40 <__assert_fail@plt+0x1ca4>
   12ab0:	mov	r1, #0
   12ab4:	ldr	r0, [pc, #408]	; 12c54 <__assert_fail@plt+0x1db8>
   12ab8:	bl	10d58 <open64@plt>
   12abc:	cmp	r0, #0
   12ac0:	moveq	r8, #1
   12ac4:	beq	12b40 <__assert_fail@plt+0x1ca4>
   12ac8:	blt	12c14 <__assert_fail@plt+0x1d78>
   12acc:	bl	10e90 <close@plt>
   12ad0:	bl	10ddc <__errno_location@plt>
   12ad4:	mov	r7, #9
   12ad8:	mov	r8, #1
   12adc:	mov	r5, #0
   12ae0:	mov	r6, r0
   12ae4:	str	r7, [r0]
   12ae8:	b	12b18 <__assert_fail@plt+0x1c7c>
   12aec:	mov	r4, r0
   12af0:	mov	r9, r0
   12af4:	mov	r8, r0
   12af8:	mov	r2, r5
   12afc:	mov	r1, r7
   12b00:	mov	r0, r6
   12b04:	bl	10da0 <freopen64@plt>
   12b08:	mov	r5, r0
   12b0c:	bl	10ddc <__errno_location@plt>
   12b10:	ldr	r7, [r0]
   12b14:	mov	r6, r0
   12b18:	cmp	r4, #0
   12b1c:	bne	12b84 <__assert_fail@plt+0x1ce8>
   12b20:	cmp	r9, #0
   12b24:	bne	12bd8 <__assert_fail@plt+0x1d3c>
   12b28:	cmp	r8, #0
   12b2c:	bne	12b90 <__assert_fail@plt+0x1cf4>
   12b30:	cmp	r5, #0
   12b34:	streq	r7, [r6]
   12b38:	mov	r0, r5
   12b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b40:	cmp	r9, #0
   12b44:	bne	12b9c <__assert_fail@plt+0x1d00>
   12b48:	cmp	r4, #0
   12b4c:	beq	12af8 <__assert_fail@plt+0x1c5c>
   12b50:	mov	r1, #0
   12b54:	ldr	r0, [pc, #248]	; 12c54 <__assert_fail@plt+0x1db8>
   12b58:	bl	10d58 <open64@plt>
   12b5c:	cmp	r0, #2
   12b60:	beq	12af8 <__assert_fail@plt+0x1c5c>
   12b64:	cmp	r0, #0
   12b68:	blt	12c3c <__assert_fail@plt+0x1da0>
   12b6c:	bl	10e90 <close@plt>
   12b70:	bl	10ddc <__errno_location@plt>
   12b74:	mov	r7, #9
   12b78:	mov	r6, r0
   12b7c:	str	r7, [r0]
   12b80:	mov	r5, #0
   12b84:	mov	r0, #2
   12b88:	bl	10e90 <close@plt>
   12b8c:	b	12b20 <__assert_fail@plt+0x1c84>
   12b90:	mov	r0, #0
   12b94:	bl	10e90 <close@plt>
   12b98:	b	12b30 <__assert_fail@plt+0x1c94>
   12b9c:	mov	r1, #0
   12ba0:	ldr	r0, [pc, #172]	; 12c54 <__assert_fail@plt+0x1db8>
   12ba4:	bl	10d58 <open64@plt>
   12ba8:	cmp	r0, #1
   12bac:	beq	12b48 <__assert_fail@plt+0x1cac>
   12bb0:	cmp	r0, #0
   12bb4:	blt	12c2c <__assert_fail@plt+0x1d90>
   12bb8:	bl	10e90 <close@plt>
   12bbc:	bl	10ddc <__errno_location@plt>
   12bc0:	mov	r7, #9
   12bc4:	mov	r6, r0
   12bc8:	str	r7, [r0]
   12bcc:	cmp	r4, #0
   12bd0:	bne	12c4c <__assert_fail@plt+0x1db0>
   12bd4:	mov	r5, r4
   12bd8:	mov	r0, #1
   12bdc:	bl	10e90 <close@plt>
   12be0:	b	12b28 <__assert_fail@plt+0x1c8c>
   12be4:	mov	r4, #0
   12be8:	b	12a88 <__assert_fail@plt+0x1bec>
   12bec:	mov	r1, #0
   12bf0:	mov	r0, r1
   12bf4:	bl	10ce0 <dup2@plt>
   12bf8:	subs	r4, r0, #0
   12bfc:	moveq	r9, r4
   12c00:	moveq	r8, r4
   12c04:	beq	12af8 <__assert_fail@plt+0x1c5c>
   12c08:	mov	r4, #0
   12c0c:	mov	r9, r4
   12c10:	b	12ab0 <__assert_fail@plt+0x1c14>
   12c14:	bl	10ddc <__errno_location@plt>
   12c18:	mov	r8, #1
   12c1c:	mov	r5, #0
   12c20:	mov	r6, r0
   12c24:	ldr	r7, [r0]
   12c28:	b	12b18 <__assert_fail@plt+0x1c7c>
   12c2c:	bl	10ddc <__errno_location@plt>
   12c30:	mov	r6, r0
   12c34:	ldr	r7, [r0]
   12c38:	b	12bcc <__assert_fail@plt+0x1d30>
   12c3c:	bl	10ddc <__errno_location@plt>
   12c40:	mov	r6, r0
   12c44:	ldr	r7, [r0]
   12c48:	b	12b80 <__assert_fail@plt+0x1ce4>
   12c4c:	mov	r9, r4
   12c50:	b	12b80 <__assert_fail@plt+0x1ce4>
   12c54:	andeq	r8, r1, ip, ror #29
   12c58:	push	{r4, r5, r6, r7, r8, lr}
   12c5c:	sub	sp, sp, #8
   12c60:	ldmib	r0, {ip, lr}
   12c64:	mov	r4, r0
   12c68:	ldr	r5, [sp, #32]
   12c6c:	cmp	lr, ip
   12c70:	beq	12c88 <__assert_fail@plt+0x1dec>
   12c74:	str	r5, [sp, #32]
   12c78:	mov	r0, r4
   12c7c:	add	sp, sp, #8
   12c80:	pop	{r4, r5, r6, r7, r8, lr}
   12c84:	b	10e30 <fseeko64@plt>
   12c88:	ldr	lr, [r0, #20]
   12c8c:	ldr	ip, [r0, #16]
   12c90:	cmp	lr, ip
   12c94:	bne	12c74 <__assert_fail@plt+0x1dd8>
   12c98:	ldr	r8, [r0, #36]	; 0x24
   12c9c:	cmp	r8, #0
   12ca0:	bne	12c74 <__assert_fail@plt+0x1dd8>
   12ca4:	mov	r6, r2
   12ca8:	mov	r7, r3
   12cac:	bl	10e0c <fileno@plt>
   12cb0:	mov	r2, r6
   12cb4:	mov	r3, r7
   12cb8:	str	r5, [sp]
   12cbc:	bl	10d1c <lseek64@plt>
   12cc0:	mvn	r3, #0
   12cc4:	mvn	r2, #0
   12cc8:	cmp	r1, r3
   12ccc:	cmpeq	r0, r2
   12cd0:	beq	12cf0 <__assert_fail@plt+0x1e54>
   12cd4:	ldr	r3, [r4]
   12cd8:	strd	r0, [r4, #80]	; 0x50
   12cdc:	mov	r0, r8
   12ce0:	bic	r3, r3, #16
   12ce4:	str	r3, [r4]
   12ce8:	add	sp, sp, #8
   12cec:	pop	{r4, r5, r6, r7, r8, pc}
   12cf0:	mvn	r0, #0
   12cf4:	b	12ce8 <__assert_fail@plt+0x1e4c>
   12cf8:	push	{r4, r5, r6, r7, r8, lr}
   12cfc:	cmp	r0, #2
   12d00:	ldr	r4, [pc, #148]	; 12d9c <__assert_fail@plt+0x1f00>
   12d04:	mov	r5, #0
   12d08:	sub	sp, sp, #16
   12d0c:	ldr	r6, [r4]
   12d10:	str	r5, [r4]
   12d14:	beq	12d30 <__assert_fail@plt+0x1e94>
   12d18:	ldr	r3, [pc, #128]	; 12da0 <__assert_fail@plt+0x1f04>
   12d1c:	mov	r2, #0
   12d20:	str	r6, [r4]
   12d24:	str	r2, [r3]
   12d28:	add	sp, sp, #16
   12d2c:	pop	{r4, r5, r6, r7, r8, pc}
   12d30:	mov	r8, r3
   12d34:	mov	r7, r2
   12d38:	str	r5, [sp]
   12d3c:	ldr	r3, [pc, #96]	; 12da4 <__assert_fail@plt+0x1f08>
   12d40:	ldr	r2, [pc, #96]	; 12da8 <__assert_fail@plt+0x1f0c>
   12d44:	bl	10dac <getopt_long@plt>
   12d48:	cmn	r0, #1
   12d4c:	beq	12d18 <__assert_fail@plt+0x1e7c>
   12d50:	cmp	r0, #104	; 0x68
   12d54:	beq	12d8c <__assert_fail@plt+0x1ef0>
   12d58:	cmp	r0, #118	; 0x76
   12d5c:	bne	12d18 <__assert_fail@plt+0x1e7c>
   12d60:	ldr	r3, [pc, #68]	; 12dac <__assert_fail@plt+0x1f10>
   12d64:	add	ip, sp, #48	; 0x30
   12d68:	mov	r2, r8
   12d6c:	ldr	r0, [r3]
   12d70:	mov	r1, r7
   12d74:	str	ip, [sp]
   12d78:	ldr	r3, [sp, #40]	; 0x28
   12d7c:	str	ip, [sp, #12]
   12d80:	bl	175e8 <__assert_fail@plt+0x674c>
   12d84:	mov	r0, r5
   12d88:	bl	10dc4 <exit@plt>
   12d8c:	mov	r0, r5
   12d90:	ldr	r3, [sp, #44]	; 0x2c
   12d94:	blx	r3
   12d98:	b	12d18 <__assert_fail@plt+0x1e7c>
   12d9c:	andeq	sl, r2, r0, asr r1
   12da0:	andeq	sl, r2, r8, lsr r1
   12da4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12da8:	andeq	r8, r1, r8, lsr #30
   12dac:	andeq	sl, r2, ip, asr #2
   12db0:	push	{r4, r5, r6, r7, r8, lr}
   12db4:	sub	sp, sp, #16
   12db8:	ldr	r5, [pc, #176]	; 12e70 <__assert_fail@plt+0x1fd4>
   12dbc:	ldrb	r8, [sp, #44]	; 0x2c
   12dc0:	ldr	r4, [pc, #172]	; 12e74 <__assert_fail@plt+0x1fd8>
   12dc4:	ldr	lr, [pc, #172]	; 12e78 <__assert_fail@plt+0x1fdc>
   12dc8:	cmp	r8, #0
   12dcc:	mov	r6, r2
   12dd0:	movne	r2, r5
   12dd4:	mov	r5, #0
   12dd8:	mov	ip, #1
   12ddc:	moveq	r2, lr
   12de0:	mov	r7, r3
   12de4:	str	r5, [sp]
   12de8:	ldr	r3, [pc, #140]	; 12e7c <__assert_fail@plt+0x1fe0>
   12dec:	ldr	r8, [r4]
   12df0:	str	ip, [r4]
   12df4:	bl	10dac <getopt_long@plt>
   12df8:	cmn	r0, #1
   12dfc:	beq	12e4c <__assert_fail@plt+0x1fb0>
   12e00:	cmp	r0, #104	; 0x68
   12e04:	beq	12e58 <__assert_fail@plt+0x1fbc>
   12e08:	cmp	r0, #118	; 0x76
   12e0c:	bne	12e3c <__assert_fail@plt+0x1fa0>
   12e10:	ldr	r3, [pc, #104]	; 12e80 <__assert_fail@plt+0x1fe4>
   12e14:	add	ip, sp, #52	; 0x34
   12e18:	mov	r2, r7
   12e1c:	ldr	r0, [r3]
   12e20:	mov	r1, r6
   12e24:	str	ip, [sp]
   12e28:	ldr	r3, [sp, #40]	; 0x28
   12e2c:	str	ip, [sp, #12]
   12e30:	bl	175e8 <__assert_fail@plt+0x674c>
   12e34:	mov	r0, r5
   12e38:	bl	10dc4 <exit@plt>
   12e3c:	ldr	r3, [pc, #64]	; 12e84 <__assert_fail@plt+0x1fe8>
   12e40:	ldr	r0, [r3]
   12e44:	ldr	r3, [sp, #48]	; 0x30
   12e48:	blx	r3
   12e4c:	str	r8, [r4]
   12e50:	add	sp, sp, #16
   12e54:	pop	{r4, r5, r6, r7, r8, pc}
   12e58:	mov	r0, r5
   12e5c:	ldr	r3, [sp, #48]	; 0x30
   12e60:	blx	r3
   12e64:	str	r8, [r4]
   12e68:	add	sp, sp, #16
   12e6c:	pop	{r4, r5, r6, r7, r8, pc}
   12e70:	andeq	r8, r1, r0, lsl ip
   12e74:	andeq	sl, r2, r0, asr r1
   12e78:	andeq	r8, r1, r8, lsr #30
   12e7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12e80:	andeq	sl, r2, ip, asr #2
   12e84:	andeq	sl, r2, r8, ror #1
   12e88:	push	{r4, r5, r6, lr}
   12e8c:	subs	r4, r0, #0
   12e90:	beq	12f04 <__assert_fail@plt+0x2068>
   12e94:	mov	r1, #47	; 0x2f
   12e98:	bl	10e54 <strrchr@plt>
   12e9c:	subs	r5, r0, #0
   12ea0:	beq	12ef0 <__assert_fail@plt+0x2054>
   12ea4:	add	r6, r5, #1
   12ea8:	sub	r3, r6, r4
   12eac:	cmp	r3, #6
   12eb0:	ble	12ef0 <__assert_fail@plt+0x2054>
   12eb4:	mov	r2, #7
   12eb8:	ldr	r1, [pc, #96]	; 12f20 <__assert_fail@plt+0x2084>
   12ebc:	sub	r0, r5, #6
   12ec0:	bl	10e78 <strncmp@plt>
   12ec4:	cmp	r0, #0
   12ec8:	bne	12ef0 <__assert_fail@plt+0x2054>
   12ecc:	mov	r2, #3
   12ed0:	ldr	r1, [pc, #76]	; 12f24 <__assert_fail@plt+0x2088>
   12ed4:	mov	r0, r6
   12ed8:	bl	10e78 <strncmp@plt>
   12edc:	cmp	r0, #0
   12ee0:	movne	r4, r6
   12ee4:	ldreq	r3, [pc, #60]	; 12f28 <__assert_fail@plt+0x208c>
   12ee8:	addeq	r4, r5, #4
   12eec:	streq	r4, [r3]
   12ef0:	ldr	r2, [pc, #52]	; 12f2c <__assert_fail@plt+0x2090>
   12ef4:	ldr	r3, [pc, #52]	; 12f30 <__assert_fail@plt+0x2094>
   12ef8:	str	r4, [r2]
   12efc:	str	r4, [r3]
   12f00:	pop	{r4, r5, r6, pc}
   12f04:	ldr	r3, [pc, #40]	; 12f34 <__assert_fail@plt+0x2098>
   12f08:	mov	r2, #55	; 0x37
   12f0c:	mov	r1, #1
   12f10:	ldr	r3, [r3]
   12f14:	ldr	r0, [pc, #28]	; 12f38 <__assert_fail@plt+0x209c>
   12f18:	bl	10d10 <fwrite@plt>
   12f1c:	bl	10e84 <abort@plt>
   12f20:	andeq	r8, r1, r4, ror pc
   12f24:	andeq	r8, r1, ip, ror pc
   12f28:	andeq	sl, r2, r0, lsr r1
   12f2c:	andeq	sl, r2, r0, ror r1
   12f30:	andeq	sl, r2, r4, lsr r1
   12f34:	andeq	sl, r2, r0, asr #2
   12f38:	andeq	r8, r1, ip, lsr pc
   12f3c:	push	{r4, r5, r6, lr}
   12f40:	mov	r4, r0
   12f44:	mov	r5, r1
   12f48:	bl	18420 <__assert_fail@plt+0x7584>
   12f4c:	ldrb	r3, [r0]
   12f50:	bic	r3, r3, #32
   12f54:	cmp	r3, #85	; 0x55
   12f58:	bne	12fb8 <__assert_fail@plt+0x211c>
   12f5c:	ldrb	r3, [r0, #1]
   12f60:	bic	r3, r3, #32
   12f64:	cmp	r3, #84	; 0x54
   12f68:	bne	12ff4 <__assert_fail@plt+0x2158>
   12f6c:	ldrb	r3, [r0, #2]
   12f70:	bic	r3, r3, #32
   12f74:	cmp	r3, #70	; 0x46
   12f78:	bne	12ff4 <__assert_fail@plt+0x2158>
   12f7c:	ldrb	r3, [r0, #3]
   12f80:	cmp	r3, #45	; 0x2d
   12f84:	bne	12ff4 <__assert_fail@plt+0x2158>
   12f88:	ldrb	r3, [r0, #4]
   12f8c:	cmp	r3, #56	; 0x38
   12f90:	bne	12ff4 <__assert_fail@plt+0x2158>
   12f94:	ldrb	r3, [r0, #5]
   12f98:	cmp	r3, #0
   12f9c:	bne	12ff4 <__assert_fail@plt+0x2158>
   12fa0:	ldrb	r2, [r4]
   12fa4:	ldr	r3, [pc, #152]	; 13044 <__assert_fail@plt+0x21a8>
   12fa8:	ldr	r0, [pc, #152]	; 13048 <__assert_fail@plt+0x21ac>
   12fac:	cmp	r2, #96	; 0x60
   12fb0:	movne	r0, r3
   12fb4:	pop	{r4, r5, r6, pc}
   12fb8:	cmp	r3, #71	; 0x47
   12fbc:	bne	12ff4 <__assert_fail@plt+0x2158>
   12fc0:	ldrb	r3, [r0, #1]
   12fc4:	bic	r3, r3, #32
   12fc8:	cmp	r3, #66	; 0x42
   12fcc:	bne	12ff4 <__assert_fail@plt+0x2158>
   12fd0:	ldrb	r3, [r0, #2]
   12fd4:	cmp	r3, #49	; 0x31
   12fd8:	bne	12ff4 <__assert_fail@plt+0x2158>
   12fdc:	ldrb	r3, [r0, #3]
   12fe0:	cmp	r3, #56	; 0x38
   12fe4:	bne	12ff4 <__assert_fail@plt+0x2158>
   12fe8:	ldrb	r3, [r0, #4]
   12fec:	cmp	r3, #48	; 0x30
   12ff0:	beq	13008 <__assert_fail@plt+0x216c>
   12ff4:	ldr	r3, [pc, #80]	; 1304c <__assert_fail@plt+0x21b0>
   12ff8:	cmp	r5, #9
   12ffc:	ldr	r0, [pc, #76]	; 13050 <__assert_fail@plt+0x21b4>
   13000:	movne	r0, r3
   13004:	pop	{r4, r5, r6, pc}
   13008:	ldrb	r3, [r0, #5]
   1300c:	cmp	r3, #51	; 0x33
   13010:	bne	12ff4 <__assert_fail@plt+0x2158>
   13014:	ldrb	r3, [r0, #6]
   13018:	cmp	r3, #48	; 0x30
   1301c:	bne	12ff4 <__assert_fail@plt+0x2158>
   13020:	ldrb	r3, [r0, #7]
   13024:	cmp	r3, #0
   13028:	bne	12ff4 <__assert_fail@plt+0x2158>
   1302c:	ldrb	r2, [r4]
   13030:	ldr	r3, [pc, #28]	; 13054 <__assert_fail@plt+0x21b8>
   13034:	ldr	r0, [pc, #28]	; 13058 <__assert_fail@plt+0x21bc>
   13038:	cmp	r2, #96	; 0x60
   1303c:	movne	r0, r3
   13040:	pop	{r4, r5, r6, pc}
   13044:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13048:	ldrdeq	r8, [r1], -r4
   1304c:	andeq	r8, r1, r8, ror #31
   13050:	andeq	r8, r1, r4, ror #31
   13054:	andeq	r8, r1, r0, ror #31
   13058:	ldrdeq	r8, [r1], -ip
   1305c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13060:	sub	sp, sp, #140	; 0x8c
   13064:	mov	r9, r1
   13068:	str	r3, [sp, #24]
   1306c:	mov	r3, #1
   13070:	mov	sl, r0
   13074:	str	r2, [sp, #44]	; 0x2c
   13078:	str	r3, [sp, #28]
   1307c:	bl	10d28 <__ctype_get_mb_cur_max@plt>
   13080:	ldr	r3, [sp, #180]	; 0xb4
   13084:	mov	fp, r9
   13088:	mov	r9, sl
   1308c:	lsr	r3, r3, #1
   13090:	and	r3, r3, #1
   13094:	str	r3, [sp, #40]	; 0x28
   13098:	ldr	r3, [sp, #180]	; 0xb4
   1309c:	mov	r2, #0
   130a0:	and	r3, r3, #4
   130a4:	str	r3, [sp, #100]	; 0x64
   130a8:	ldr	r3, [sp, #180]	; 0xb4
   130ac:	str	r2, [sp, #76]	; 0x4c
   130b0:	and	r3, r3, #1
   130b4:	str	r3, [sp, #96]	; 0x60
   130b8:	str	r2, [sp, #36]	; 0x24
   130bc:	str	r2, [sp, #56]	; 0x38
   130c0:	str	r2, [sp, #68]	; 0x44
   130c4:	str	r2, [sp, #72]	; 0x48
   130c8:	str	r2, [sp, #84]	; 0x54
   130cc:	str	r0, [sp, #80]	; 0x50
   130d0:	ldr	r3, [sp, #176]	; 0xb0
   130d4:	cmp	r3, #10
   130d8:	ldrls	pc, [pc, r3, lsl #2]
   130dc:	b	142b4 <__assert_fail@plt+0x3418>
   130e0:	andeq	r3, r1, ip, lsl #2
   130e4:	andeq	r3, r1, ip, lsr #8
   130e8:	andeq	r3, r1, r4, lsl #11
   130ec:	andeq	r3, r1, r0, ror #8
   130f0:	ldrdeq	r3, [r1], -r8
   130f4:			; <UNDEFINED> instruction: 0x000135b8
   130f8:	andeq	r3, r1, r0, lsl #9
   130fc:	andeq	r3, r1, r4, lsr #9
   13100:	andeq	r3, r1, ip, asr #9
   13104:	andeq	r3, r1, ip, asr #9
   13108:	andeq	r3, r1, ip, asr #9
   1310c:	mov	r3, #0
   13110:	ldr	r1, [sp, #56]	; 0x38
   13114:	ldr	r2, [sp, #176]	; 0xb0
   13118:	ldr	lr, [sp, #176]	; 0xb0
   1311c:	mov	r8, r3
   13120:	mov	ip, r3
   13124:	str	r3, [sp, #40]	; 0x28
   13128:	mov	r3, r1
   1312c:	cmp	r2, #2
   13130:	moveq	r3, #0
   13134:	andne	r3, r3, #1
   13138:	mov	r0, r3
   1313c:	str	r3, [sp, #92]	; 0x5c
   13140:	ldr	r3, [sp, #68]	; 0x44
   13144:	sub	lr, lr, #2
   13148:	adds	r2, r3, #0
   1314c:	movne	r2, #1
   13150:	and	r3, r1, ip
   13154:	and	r3, r2, r3
   13158:	clz	lr, lr
   1315c:	str	r3, [sp, #88]	; 0x58
   13160:	lsr	lr, lr, #5
   13164:	mov	r3, ip
   13168:	and	r3, r3, lr
   1316c:	mov	sl, #0
   13170:	and	r0, r2, r0
   13174:	str	r3, [sp, #64]	; 0x40
   13178:	eor	r3, r1, #1
   1317c:	str	lr, [sp, #52]	; 0x34
   13180:	str	r0, [sp, #48]	; 0x30
   13184:	str	r3, [sp, #60]	; 0x3c
   13188:	ldr	r3, [sp, #24]
   1318c:	cmn	r3, #1
   13190:	beq	136c0 <__assert_fail@plt+0x2824>
   13194:	subs	r7, r3, sl
   13198:	movne	r7, #1
   1319c:	cmp	r7, #0
   131a0:	beq	136d8 <__assert_fail@plt+0x283c>
   131a4:	ldr	r3, [sp, #48]	; 0x30
   131a8:	cmp	r3, #0
   131ac:	beq	13a44 <__assert_fail@plt+0x2ba8>
   131b0:	ldr	r2, [sp, #68]	; 0x44
   131b4:	ldr	r1, [sp, #24]
   131b8:	cmp	r2, #1
   131bc:	mov	r3, r2
   131c0:	movls	r3, #0
   131c4:	movhi	r3, #1
   131c8:	cmn	r1, #1
   131cc:	movne	r3, #0
   131d0:	cmp	r3, #0
   131d4:	add	r4, sl, r2
   131d8:	beq	131e8 <__assert_fail@plt+0x234c>
   131dc:	ldr	r0, [sp, #44]	; 0x2c
   131e0:	bl	10dd0 <strlen@plt>
   131e4:	str	r0, [sp, #24]
   131e8:	ldr	r3, [sp, #24]
   131ec:	cmp	r3, r4
   131f0:	ldr	r3, [sp, #44]	; 0x2c
   131f4:	add	r5, r3, sl
   131f8:	bcc	13a4c <__assert_fail@plt+0x2bb0>
   131fc:	mov	r0, r5
   13200:	ldr	r2, [sp, #68]	; 0x44
   13204:	ldr	r1, [sp, #72]	; 0x48
   13208:	bl	10cbc <memcmp@plt>
   1320c:	cmp	r0, #0
   13210:	bne	13a4c <__assert_fail@plt+0x2bb0>
   13214:	ldr	r3, [sp, #40]	; 0x28
   13218:	cmp	r3, #0
   1321c:	bne	14408 <__assert_fail@plt+0x356c>
   13220:	ldrb	r4, [r5]
   13224:	cmp	r4, #126	; 0x7e
   13228:	ldrls	pc, [pc, r4, lsl #2]
   1322c:	b	14344 <__assert_fail@plt+0x34a8>
   13230:	andeq	r3, r1, r4, lsl #18
   13234:	andeq	r4, r1, r4, asr #6
   13238:	andeq	r4, r1, r4, asr #6
   1323c:	andeq	r4, r1, r4, asr #6
   13240:	andeq	r4, r1, r4, asr #6
   13244:	andeq	r4, r1, r4, asr #6
   13248:	andeq	r4, r1, r4, asr #6
   1324c:	strdeq	r3, [r1], -r0
   13250:	ldrdeq	r3, [r1], -ip
   13254:			; <UNDEFINED> instruction: 0x000138b8
   13258:	muleq	r1, r8, r8
   1325c:	andeq	r3, r1, r8, asr #17
   13260:	andeq	r3, r1, r0, lsl #16
   13264:	andeq	r3, r1, r4, lsr sl
   13268:	andeq	r4, r1, r4, asr #6
   1326c:	andeq	r4, r1, r4, asr #6
   13270:	andeq	r4, r1, r4, asr #6
   13274:	andeq	r4, r1, r4, asr #6
   13278:	andeq	r4, r1, r4, asr #6
   1327c:	andeq	r4, r1, r4, asr #6
   13280:	andeq	r4, r1, r4, asr #6
   13284:	andeq	r4, r1, r4, asr #6
   13288:	andeq	r4, r1, r4, asr #6
   1328c:	andeq	r4, r1, r4, asr #6
   13290:	andeq	r4, r1, r4, asr #6
   13294:	andeq	r4, r1, r4, asr #6
   13298:	andeq	r4, r1, r4, asr #6
   1329c:	andeq	r4, r1, r4, asr #6
   132a0:	andeq	r4, r1, r4, asr #6
   132a4:	andeq	r4, r1, r4, asr #6
   132a8:	andeq	r4, r1, r4, asr #6
   132ac:	andeq	r4, r1, r4, asr #6
   132b0:	andeq	r3, r1, r4, lsr #20
   132b4:	andeq	r3, r1, r4, lsl #20
   132b8:	andeq	r3, r1, r4, lsl #20
   132bc:	andeq	r3, r1, r4, ror #19
   132c0:	andeq	r3, r1, r4, lsl #20
   132c4:	strdeq	r3, [r1], -r0
   132c8:	andeq	r3, r1, r4, lsl #20
   132cc:	andeq	r3, r1, ip, asr #15
   132d0:	andeq	r3, r1, r4, lsl #20
   132d4:	andeq	r3, r1, r4, lsl #20
   132d8:	andeq	r3, r1, r4, lsl #20
   132dc:	strdeq	r3, [r1], -r0
   132e0:	strdeq	r3, [r1], -r0
   132e4:	strdeq	r3, [r1], -r0
   132e8:	strdeq	r3, [r1], -r0
   132ec:	strdeq	r3, [r1], -r0
   132f0:	strdeq	r3, [r1], -r0
   132f4:	strdeq	r3, [r1], -r0
   132f8:	strdeq	r3, [r1], -r0
   132fc:	strdeq	r3, [r1], -r0
   13300:	strdeq	r3, [r1], -r0
   13304:	strdeq	r3, [r1], -r0
   13308:	strdeq	r3, [r1], -r0
   1330c:	strdeq	r3, [r1], -r0
   13310:	strdeq	r3, [r1], -r0
   13314:	strdeq	r3, [r1], -r0
   13318:	strdeq	r3, [r1], -r0
   1331c:	andeq	r3, r1, r4, lsl #20
   13320:	andeq	r3, r1, r4, lsl #20
   13324:	andeq	r3, r1, r4, lsl #20
   13328:	andeq	r3, r1, r4, lsl #20
   1332c:	andeq	r3, r1, ip, ror r7
   13330:	andeq	r4, r1, r4, asr #6
   13334:	strdeq	r3, [r1], -r0
   13338:	strdeq	r3, [r1], -r0
   1333c:	strdeq	r3, [r1], -r0
   13340:	strdeq	r3, [r1], -r0
   13344:	strdeq	r3, [r1], -r0
   13348:	strdeq	r3, [r1], -r0
   1334c:	strdeq	r3, [r1], -r0
   13350:	strdeq	r3, [r1], -r0
   13354:	strdeq	r3, [r1], -r0
   13358:	strdeq	r3, [r1], -r0
   1335c:	strdeq	r3, [r1], -r0
   13360:	strdeq	r3, [r1], -r0
   13364:	strdeq	r3, [r1], -r0
   13368:	strdeq	r3, [r1], -r0
   1336c:	strdeq	r3, [r1], -r0
   13370:	strdeq	r3, [r1], -r0
   13374:	strdeq	r3, [r1], -r0
   13378:	strdeq	r3, [r1], -r0
   1337c:	strdeq	r3, [r1], -r0
   13380:	strdeq	r3, [r1], -r0
   13384:	strdeq	r3, [r1], -r0
   13388:	strdeq	r3, [r1], -r0
   1338c:	strdeq	r3, [r1], -r0
   13390:	strdeq	r3, [r1], -r0
   13394:	strdeq	r3, [r1], -r0
   13398:	strdeq	r3, [r1], -r0
   1339c:	andeq	r3, r1, r4, lsl #20
   133a0:	andeq	r3, r1, r8, asr #14
   133a4:	strdeq	r3, [r1], -r0
   133a8:	andeq	r3, r1, r4, lsl #20
   133ac:	strdeq	r3, [r1], -r0
   133b0:	andeq	r3, r1, r4, lsl #20
   133b4:	strdeq	r3, [r1], -r0
   133b8:	strdeq	r3, [r1], -r0
   133bc:	strdeq	r3, [r1], -r0
   133c0:	strdeq	r3, [r1], -r0
   133c4:	strdeq	r3, [r1], -r0
   133c8:	strdeq	r3, [r1], -r0
   133cc:	strdeq	r3, [r1], -r0
   133d0:	strdeq	r3, [r1], -r0
   133d4:	strdeq	r3, [r1], -r0
   133d8:	strdeq	r3, [r1], -r0
   133dc:	strdeq	r3, [r1], -r0
   133e0:	strdeq	r3, [r1], -r0
   133e4:	strdeq	r3, [r1], -r0
   133e8:	strdeq	r3, [r1], -r0
   133ec:	strdeq	r3, [r1], -r0
   133f0:	strdeq	r3, [r1], -r0
   133f4:	strdeq	r3, [r1], -r0
   133f8:	strdeq	r3, [r1], -r0
   133fc:	strdeq	r3, [r1], -r0
   13400:	strdeq	r3, [r1], -r0
   13404:	strdeq	r3, [r1], -r0
   13408:	strdeq	r3, [r1], -r0
   1340c:	strdeq	r3, [r1], -r0
   13410:	strdeq	r3, [r1], -r0
   13414:	strdeq	r3, [r1], -r0
   13418:	strdeq	r3, [r1], -r0
   1341c:	andeq	r3, r1, r0, lsl #12
   13420:	andeq	r3, r1, r4, lsl #20
   13424:	andeq	r3, r1, r0, lsl #12
   13428:	andeq	r3, r1, r4, ror #19
   1342c:	mov	r3, #1
   13430:	str	r3, [sp, #40]	; 0x28
   13434:	str	r3, [sp, #68]	; 0x44
   13438:	mov	r8, #0
   1343c:	ldr	r3, [pc, #4056]	; 1441c <__assert_fail@plt+0x3580>
   13440:	str	r3, [sp, #72]	; 0x48
   13444:	mov	r3, #2
   13448:	str	r3, [sp, #176]	; 0xb0
   1344c:	ldr	r1, [sp, #56]	; 0x38
   13450:	mov	r2, r3
   13454:	ldr	ip, [sp, #40]	; 0x28
   13458:	mov	lr, r3
   1345c:	b	13128 <__assert_fail@plt+0x228c>
   13460:	mov	r3, #1
   13464:	str	r3, [sp, #56]	; 0x38
   13468:	str	r3, [sp, #68]	; 0x44
   1346c:	str	r3, [sp, #40]	; 0x28
   13470:	ldr	r3, [pc, #4004]	; 1441c <__assert_fail@plt+0x3580>
   13474:	mov	r8, #0
   13478:	str	r3, [sp, #72]	; 0x48
   1347c:	b	13444 <__assert_fail@plt+0x25a8>
   13480:	mov	r3, #1
   13484:	str	r3, [sp, #56]	; 0x38
   13488:	str	r3, [sp, #68]	; 0x44
   1348c:	str	r3, [sp, #40]	; 0x28
   13490:	ldr	r3, [pc, #3976]	; 14420 <__assert_fail@plt+0x3584>
   13494:	mov	r8, #0
   13498:	str	r3, [sp, #72]	; 0x48
   1349c:	mov	r3, #5
   134a0:	b	13448 <__assert_fail@plt+0x25ac>
   134a4:	mov	r3, #0
   134a8:	str	r3, [sp, #40]	; 0x28
   134ac:	mov	r3, #1
   134b0:	str	r3, [sp, #56]	; 0x38
   134b4:	mov	r8, #0
   134b8:	mov	r1, r3
   134bc:	ldr	r2, [sp, #176]	; 0xb0
   134c0:	ldr	ip, [sp, #40]	; 0x28
   134c4:	ldr	lr, [sp, #176]	; 0xb0
   134c8:	b	13128 <__assert_fail@plt+0x228c>
   134cc:	ldr	r3, [sp, #176]	; 0xb0
   134d0:	cmp	r3, #10
   134d4:	beq	13518 <__assert_fail@plt+0x267c>
   134d8:	mov	r2, #5
   134dc:	ldr	r1, [pc, #3904]	; 14424 <__assert_fail@plt+0x3588>
   134e0:	mov	r0, #0
   134e4:	bl	10cd4 <dcgettext@plt>
   134e8:	ldr	r2, [pc, #3892]	; 14424 <__assert_fail@plt+0x3588>
   134ec:	cmp	r0, r2
   134f0:	str	r0, [sp, #188]	; 0xbc
   134f4:	beq	145b0 <__assert_fail@plt+0x3714>
   134f8:	mov	r2, #5
   134fc:	ldr	r1, [pc, #3864]	; 1441c <__assert_fail@plt+0x3580>
   13500:	mov	r0, #0
   13504:	bl	10cd4 <dcgettext@plt>
   13508:	ldr	r2, [pc, #3852]	; 1441c <__assert_fail@plt+0x3580>
   1350c:	cmp	r0, r2
   13510:	str	r0, [sp, #192]	; 0xc0
   13514:	beq	145a0 <__assert_fail@plt+0x3704>
   13518:	ldr	r8, [sp, #40]	; 0x28
   1351c:	cmp	r8, #0
   13520:	movne	r8, #0
   13524:	bne	13554 <__assert_fail@plt+0x26b8>
   13528:	ldr	r3, [sp, #188]	; 0xbc
   1352c:	ldrb	r3, [r3]
   13530:	cmp	r3, #0
   13534:	beq	13554 <__assert_fail@plt+0x26b8>
   13538:	ldr	r2, [sp, #188]	; 0xbc
   1353c:	cmp	fp, r8
   13540:	strbhi	r3, [r9, r8]
   13544:	ldrb	r3, [r2, #1]!
   13548:	add	r8, r8, #1
   1354c:	cmp	r3, #0
   13550:	bne	1353c <__assert_fail@plt+0x26a0>
   13554:	ldr	r0, [sp, #192]	; 0xc0
   13558:	bl	10dd0 <strlen@plt>
   1355c:	ldr	r3, [sp, #192]	; 0xc0
   13560:	ldr	r2, [sp, #176]	; 0xb0
   13564:	str	r3, [sp, #72]	; 0x48
   13568:	mov	r3, #1
   1356c:	str	r3, [sp, #56]	; 0x38
   13570:	mov	r1, r3
   13574:	ldr	ip, [sp, #40]	; 0x28
   13578:	ldr	lr, [sp, #176]	; 0xb0
   1357c:	str	r0, [sp, #68]	; 0x44
   13580:	b	13128 <__assert_fail@plt+0x228c>
   13584:	ldr	r3, [sp, #40]	; 0x28
   13588:	cmp	r3, #0
   1358c:	beq	14234 <__assert_fail@plt+0x3398>
   13590:	mov	r3, #1
   13594:	str	r3, [sp, #68]	; 0x44
   13598:	ldr	r3, [pc, #3708]	; 1441c <__assert_fail@plt+0x3580>
   1359c:	str	r3, [sp, #72]	; 0x48
   135a0:	mov	r8, #0
   135a4:	ldr	r1, [sp, #56]	; 0x38
   135a8:	ldr	r2, [sp, #176]	; 0xb0
   135ac:	ldr	ip, [sp, #40]	; 0x28
   135b0:	ldr	lr, [sp, #176]	; 0xb0
   135b4:	b	13128 <__assert_fail@plt+0x228c>
   135b8:	ldr	r3, [sp, #40]	; 0x28
   135bc:	cmp	r3, #0
   135c0:	beq	142b8 <__assert_fail@plt+0x341c>
   135c4:	str	r3, [sp, #56]	; 0x38
   135c8:	mov	r3, #1
   135cc:	str	r3, [sp, #68]	; 0x44
   135d0:	ldr	r3, [pc, #3656]	; 14420 <__assert_fail@plt+0x3584>
   135d4:	b	1359c <__assert_fail@plt+0x2700>
   135d8:	ldr	r3, [sp, #40]	; 0x28
   135dc:	cmp	r3, #0
   135e0:	mov	r3, #1
   135e4:	streq	r3, [sp, #56]	; 0x38
   135e8:	beq	14234 <__assert_fail@plt+0x3398>
   135ec:	str	r3, [sp, #68]	; 0x44
   135f0:	ldr	r3, [pc, #3620]	; 1441c <__assert_fail@plt+0x3580>
   135f4:	mov	r8, #0
   135f8:	str	r3, [sp, #72]	; 0x48
   135fc:	b	13444 <__assert_fail@plt+0x25a8>
   13600:	ldr	r3, [sp, #24]
   13604:	ldr	r6, [sp, #48]	; 0x30
   13608:	cmn	r3, #1
   1360c:	beq	13c68 <__assert_fail@plt+0x2dcc>
   13610:	subs	r3, r3, #1
   13614:	movne	r3, #1
   13618:	cmp	r3, #0
   1361c:	beq	139e8 <__assert_fail@plt+0x2b4c>
   13620:	ldr	r1, [sp, #52]	; 0x34
   13624:	mov	r7, r3
   13628:	mov	r3, #0
   1362c:	str	r3, [sp, #32]
   13630:	ldr	r3, [sp, #60]	; 0x3c
   13634:	orr	r2, r1, r3
   13638:	ldr	r3, [sp, #40]	; 0x28
   1363c:	eor	r2, r2, #1
   13640:	orr	r2, r3, r2
   13644:	tst	r2, #255	; 0xff
   13648:	bne	13f6c <__assert_fail@plt+0x30d0>
   1364c:	cmp	r6, #0
   13650:	bne	1382c <__assert_fail@plt+0x2990>
   13654:	ldr	r3, [sp, #36]	; 0x24
   13658:	add	sl, sl, #1
   1365c:	and	r3, r3, r7
   13660:	uxtb	r6, r3
   13664:	cmp	r6, #0
   13668:	beq	13694 <__assert_fail@plt+0x27f8>
   1366c:	cmp	fp, r8
   13670:	movhi	r3, #39	; 0x27
   13674:	strbhi	r3, [r9, r8]
   13678:	add	r3, r8, #1
   1367c:	cmp	fp, r3
   13680:	movhi	r2, #39	; 0x27
   13684:	add	r8, r8, #2
   13688:	strbhi	r2, [r9, r3]
   1368c:	mov	r3, #0
   13690:	str	r3, [sp, #36]	; 0x24
   13694:	ldr	r2, [sp, #32]
   13698:	cmp	r8, fp
   1369c:	ldr	r3, [sp, #28]
   136a0:	strbcc	r4, [r9, r8]
   136a4:	cmp	r2, #0
   136a8:	moveq	r3, #0
   136ac:	str	r3, [sp, #28]
   136b0:	ldr	r3, [sp, #24]
   136b4:	add	r8, r8, #1
   136b8:	cmn	r3, #1
   136bc:	bne	13194 <__assert_fail@plt+0x22f8>
   136c0:	ldr	r3, [sp, #44]	; 0x2c
   136c4:	ldrb	r3, [r3, sl]
   136c8:	adds	r7, r3, #0
   136cc:	movne	r7, #1
   136d0:	cmp	r7, #0
   136d4:	bne	131a4 <__assert_fail@plt+0x2308>
   136d8:	ldr	r3, [sp, #64]	; 0x40
   136dc:	cmp	r8, #0
   136e0:	movne	r3, #0
   136e4:	andeq	r3, r3, #1
   136e8:	cmp	r3, #0
   136ec:	str	r3, [sp, #64]	; 0x40
   136f0:	bne	14194 <__assert_fail@plt+0x32f8>
   136f4:	ldr	r3, [sp, #40]	; 0x28
   136f8:	ldr	r2, [sp, #52]	; 0x34
   136fc:	eor	r3, r3, #1
   13700:	ands	r2, r2, r3
   13704:	beq	145c0 <__assert_fail@plt+0x3724>
   13708:	ldr	r3, [sp, #76]	; 0x4c
   1370c:	cmp	r3, #0
   13710:	beq	14590 <__assert_fail@plt+0x36f4>
   13714:	ldr	r3, [sp, #28]
   13718:	cmp	r3, #0
   1371c:	bne	1454c <__assert_fail@plt+0x36b0>
   13720:	ldr	r2, [sp, #84]	; 0x54
   13724:	clz	r3, fp
   13728:	cmp	r2, #0
   1372c:	lsr	r3, r3, #5
   13730:	moveq	r3, #0
   13734:	cmp	r3, #0
   13738:	beq	144ec <__assert_fail@plt+0x3650>
   1373c:	mov	fp, r2
   13740:	str	r3, [sp, #76]	; 0x4c
   13744:	b	130d0 <__assert_fail@plt+0x2234>
   13748:	ldr	r3, [sp, #176]	; 0xb0
   1374c:	ldr	r6, [sp, #48]	; 0x30
   13750:	cmp	r3, #2
   13754:	beq	13c8c <__assert_fail@plt+0x2df0>
   13758:	ldr	r3, [sp, #88]	; 0x58
   1375c:	cmp	r3, #0
   13760:	beq	14210 <__assert_fail@plt+0x3374>
   13764:	mov	r3, #0
   13768:	add	sl, sl, #1
   1376c:	ldr	r6, [sp, #36]	; 0x24
   13770:	str	r3, [sp, #32]
   13774:	mov	r4, #92	; 0x5c
   13778:	b	13664 <__assert_fail@plt+0x27c8>
   1377c:	ldr	r3, [sp, #176]	; 0xb0
   13780:	ldr	r6, [sp, #48]	; 0x30
   13784:	cmp	r3, #2
   13788:	beq	13cbc <__assert_fail@plt+0x2e20>
   1378c:	cmp	r3, #5
   13790:	bne	14220 <__assert_fail@plt+0x3384>
   13794:	ldr	r3, [sp, #100]	; 0x64
   13798:	cmp	r3, #0
   1379c:	beq	14284 <__assert_fail@plt+0x33e8>
   137a0:	ldr	r2, [sp, #24]
   137a4:	add	r3, sl, #2
   137a8:	cmp	r2, r3
   137ac:	bls	137bc <__assert_fail@plt+0x2920>
   137b0:	ldrb	r4, [r5, #1]
   137b4:	cmp	r4, #63	; 0x3f
   137b8:	beq	1442c <__assert_fail@plt+0x3590>
   137bc:	mov	r1, #0
   137c0:	str	r1, [sp, #32]
   137c4:	mov	r4, #63	; 0x3f
   137c8:	b	13630 <__assert_fail@plt+0x2794>
   137cc:	ldr	r3, [sp, #176]	; 0xb0
   137d0:	ldr	r6, [sp, #48]	; 0x30
   137d4:	cmp	r3, #2
   137d8:	beq	13ce8 <__assert_fail@plt+0x2e4c>
   137dc:	str	r7, [sp, #32]
   137e0:	str	r7, [sp, #76]	; 0x4c
   137e4:	mov	r1, #0
   137e8:	mov	r4, #39	; 0x27
   137ec:	b	13630 <__assert_fail@plt+0x2794>
   137f0:	ldr	r6, [sp, #48]	; 0x30
   137f4:	ldr	r1, [sp, #52]	; 0x34
   137f8:	str	r7, [sp, #32]
   137fc:	b	13630 <__assert_fail@plt+0x2794>
   13800:	ldr	r6, [sp, #48]	; 0x30
   13804:	ldr	r1, [sp, #52]	; 0x34
   13808:	mov	r4, #12
   1380c:	mov	r3, #102	; 0x66
   13810:	ldr	r2, [sp, #56]	; 0x38
   13814:	cmp	r2, #0
   13818:	streq	r2, [sp, #32]
   1381c:	beq	13630 <__assert_fail@plt+0x2794>
   13820:	mov	r4, r3
   13824:	mov	r3, #0
   13828:	str	r3, [sp, #32]
   1382c:	ldr	r3, [sp, #40]	; 0x28
   13830:	cmp	r3, #0
   13834:	bne	13fa4 <__assert_fail@plt+0x3108>
   13838:	ldr	r3, [sp, #36]	; 0x24
   1383c:	eor	r3, r3, #1
   13840:	and	r3, r3, r1
   13844:	ands	r3, r3, #255	; 0xff
   13848:	beq	13880 <__assert_fail@plt+0x29e4>
   1384c:	cmp	fp, r8
   13850:	movhi	r2, #39	; 0x27
   13854:	strbhi	r2, [r9, r8]
   13858:	add	r2, r8, #1
   1385c:	cmp	fp, r2
   13860:	movhi	r1, #36	; 0x24
   13864:	strbhi	r1, [r9, r2]
   13868:	add	r2, r8, #2
   1386c:	cmp	fp, r2
   13870:	add	r8, r8, #3
   13874:	movhi	r1, #39	; 0x27
   13878:	strbhi	r1, [r9, r2]
   1387c:	str	r3, [sp, #36]	; 0x24
   13880:	cmp	fp, r8
   13884:	movhi	r3, #92	; 0x5c
   13888:	strbhi	r3, [r9, r8]
   1388c:	add	sl, sl, #1
   13890:	add	r8, r8, #1
   13894:	b	13694 <__assert_fail@plt+0x27f8>
   13898:	ldr	r6, [sp, #48]	; 0x30
   1389c:	mov	r4, #10
   138a0:	mov	r3, #110	; 0x6e
   138a4:	ldr	r2, [sp, #64]	; 0x40
   138a8:	cmp	r2, #0
   138ac:	bne	1432c <__assert_fail@plt+0x3490>
   138b0:	ldr	r1, [sp, #52]	; 0x34
   138b4:	b	13810 <__assert_fail@plt+0x2974>
   138b8:	ldr	r6, [sp, #48]	; 0x30
   138bc:	ldr	r1, [sp, #52]	; 0x34
   138c0:	mov	r3, #116	; 0x74
   138c4:	b	13810 <__assert_fail@plt+0x2974>
   138c8:	ldr	r6, [sp, #48]	; 0x30
   138cc:	ldr	r1, [sp, #52]	; 0x34
   138d0:	mov	r4, #11
   138d4:	mov	r3, #118	; 0x76
   138d8:	b	13810 <__assert_fail@plt+0x2974>
   138dc:	ldr	r6, [sp, #48]	; 0x30
   138e0:	ldr	r1, [sp, #52]	; 0x34
   138e4:	mov	r4, #8
   138e8:	mov	r3, #98	; 0x62
   138ec:	b	13810 <__assert_fail@plt+0x2974>
   138f0:	ldr	r6, [sp, #48]	; 0x30
   138f4:	ldr	r1, [sp, #52]	; 0x34
   138f8:	mov	r4, #7
   138fc:	mov	r3, #97	; 0x61
   13900:	b	13810 <__assert_fail@plt+0x2974>
   13904:	ldr	r3, [sp, #56]	; 0x38
   13908:	ldr	r6, [sp, #48]	; 0x30
   1390c:	cmp	r3, #0
   13910:	beq	13dd4 <__assert_fail@plt+0x2f38>
   13914:	ldr	r3, [sp, #40]	; 0x28
   13918:	cmp	r3, #0
   1391c:	bne	14408 <__assert_fail@plt+0x356c>
   13920:	ldr	r3, [sp, #36]	; 0x24
   13924:	ldr	r2, [sp, #52]	; 0x34
   13928:	eor	r3, r3, #1
   1392c:	ands	r3, r2, r3
   13930:	moveq	r2, r8
   13934:	beq	1396c <__assert_fail@plt+0x2ad0>
   13938:	cmp	fp, r8
   1393c:	movhi	r2, #39	; 0x27
   13940:	strbhi	r2, [r9, r8]
   13944:	add	r2, r8, #1
   13948:	cmp	fp, r2
   1394c:	movhi	r1, #36	; 0x24
   13950:	strbhi	r1, [r9, r2]
   13954:	add	r2, r8, #2
   13958:	cmp	fp, r2
   1395c:	movhi	r1, #39	; 0x27
   13960:	strbhi	r1, [r9, r2]
   13964:	add	r2, r8, #3
   13968:	str	r3, [sp, #36]	; 0x24
   1396c:	cmp	fp, r2
   13970:	movhi	r3, #92	; 0x5c
   13974:	strbhi	r3, [r9, r2]
   13978:	ldr	r3, [sp, #92]	; 0x5c
   1397c:	add	r8, r2, #1
   13980:	cmp	r3, #0
   13984:	beq	14308 <__assert_fail@plt+0x346c>
   13988:	ldr	r1, [sp, #24]
   1398c:	add	r3, sl, #1
   13990:	cmp	r1, r3
   13994:	bls	139cc <__assert_fail@plt+0x2b30>
   13998:	ldr	r1, [sp, #44]	; 0x2c
   1399c:	ldrb	r3, [r1, r3]
   139a0:	sub	r3, r3, #48	; 0x30
   139a4:	cmp	r3, #9
   139a8:	bhi	139cc <__assert_fail@plt+0x2b30>
   139ac:	cmp	fp, r8
   139b0:	movhi	r3, #48	; 0x30
   139b4:	strbhi	r3, [r9, r8]
   139b8:	add	r3, r2, #2
   139bc:	cmp	fp, r3
   139c0:	add	r8, r2, #3
   139c4:	movhi	r1, #48	; 0x30
   139c8:	strbhi	r1, [r9, r3]
   139cc:	ldr	r3, [sp, #40]	; 0x28
   139d0:	ldr	r1, [sp, #52]	; 0x34
   139d4:	mov	r7, r3
   139d8:	str	r3, [sp, #32]
   139dc:	mov	r4, #48	; 0x30
   139e0:	b	13630 <__assert_fail@plt+0x2794>
   139e4:	ldr	r6, [sp, #48]	; 0x30
   139e8:	cmp	sl, #0
   139ec:	streq	r7, [sp, #32]
   139f0:	beq	13a10 <__assert_fail@plt+0x2b74>
   139f4:	mov	r3, #0
   139f8:	ldr	r1, [sp, #52]	; 0x34
   139fc:	str	r3, [sp, #32]
   13a00:	b	13630 <__assert_fail@plt+0x2794>
   13a04:	ldr	r6, [sp, #48]	; 0x30
   13a08:	mov	r3, #0
   13a0c:	str	r3, [sp, #32]
   13a10:	ldr	r3, [sp, #64]	; 0x40
   13a14:	cmp	r3, #0
   13a18:	bne	14194 <__assert_fail@plt+0x32f8>
   13a1c:	ldr	r1, [sp, #52]	; 0x34
   13a20:	b	13630 <__assert_fail@plt+0x2794>
   13a24:	ldr	r3, [sp, #48]	; 0x30
   13a28:	mov	r6, r3
   13a2c:	str	r3, [sp, #32]
   13a30:	b	13a10 <__assert_fail@plt+0x2b74>
   13a34:	ldr	r6, [sp, #48]	; 0x30
   13a38:	mov	r4, #13
   13a3c:	mov	r3, #114	; 0x72
   13a40:	b	138a4 <__assert_fail@plt+0x2a08>
   13a44:	ldr	r3, [sp, #44]	; 0x2c
   13a48:	add	r5, r3, sl
   13a4c:	ldrb	r4, [r5]
   13a50:	cmp	r4, #126	; 0x7e
   13a54:	ldrls	pc, [pc, r4, lsl #2]
   13a58:	b	13df4 <__assert_fail@plt+0x2f58>
   13a5c:	andeq	r3, r1, r4, asr #27
   13a60:	strdeq	r3, [r1], -r4
   13a64:	strdeq	r3, [r1], -r4
   13a68:	strdeq	r3, [r1], -r4
   13a6c:	strdeq	r3, [r1], -r4
   13a70:	strdeq	r3, [r1], -r4
   13a74:	strdeq	r3, [r1], -r4
   13a78:			; <UNDEFINED> instruction: 0x00013dbc
   13a7c:			; <UNDEFINED> instruction: 0x00013db4
   13a80:	andeq	r3, r1, r8, lsr #27
   13a84:	andeq	r3, r1, r0, lsr #27
   13a88:	muleq	r1, r8, sp
   13a8c:	muleq	r1, r0, sp
   13a90:	andeq	r3, r1, r8, lsl #27
   13a94:	strdeq	r3, [r1], -r4
   13a98:	strdeq	r3, [r1], -r4
   13a9c:	strdeq	r3, [r1], -r4
   13aa0:	strdeq	r3, [r1], -r4
   13aa4:	strdeq	r3, [r1], -r4
   13aa8:	strdeq	r3, [r1], -r4
   13aac:	strdeq	r3, [r1], -r4
   13ab0:	strdeq	r3, [r1], -r4
   13ab4:	strdeq	r3, [r1], -r4
   13ab8:	strdeq	r3, [r1], -r4
   13abc:	strdeq	r3, [r1], -r4
   13ac0:	strdeq	r3, [r1], -r4
   13ac4:	strdeq	r3, [r1], -r4
   13ac8:	strdeq	r3, [r1], -r4
   13acc:	strdeq	r3, [r1], -r4
   13ad0:	strdeq	r3, [r1], -r4
   13ad4:	strdeq	r3, [r1], -r4
   13ad8:	strdeq	r3, [r1], -r4
   13adc:	andeq	r3, r1, ip, ror sp
   13ae0:	andeq	r3, r1, r4, ror sp
   13ae4:	andeq	r3, r1, r4, ror sp
   13ae8:	andeq	r3, r1, ip, ror #26
   13aec:	andeq	r3, r1, r4, ror sp
   13af0:	andeq	r3, r1, r4, ror #26
   13af4:	andeq	r3, r1, r4, ror sp
   13af8:	ldrdeq	r3, [r1], -r8
   13afc:	andeq	r3, r1, r4, ror sp
   13b00:	andeq	r3, r1, r4, ror sp
   13b04:	andeq	r3, r1, r4, ror sp
   13b08:	andeq	r3, r1, r4, ror #26
   13b0c:	andeq	r3, r1, r4, ror #26
   13b10:	andeq	r3, r1, r4, ror #26
   13b14:	andeq	r3, r1, r4, ror #26
   13b18:	andeq	r3, r1, r4, ror #26
   13b1c:	andeq	r3, r1, r4, ror #26
   13b20:	andeq	r3, r1, r4, ror #26
   13b24:	andeq	r3, r1, r4, ror #26
   13b28:	andeq	r3, r1, r4, ror #26
   13b2c:	andeq	r3, r1, r4, ror #26
   13b30:	andeq	r3, r1, r4, ror #26
   13b34:	andeq	r3, r1, r4, ror #26
   13b38:	andeq	r3, r1, r4, ror #26
   13b3c:	andeq	r3, r1, r4, ror #26
   13b40:	andeq	r3, r1, r4, ror #26
   13b44:	andeq	r3, r1, r4, ror #26
   13b48:	andeq	r3, r1, r4, ror sp
   13b4c:	andeq	r3, r1, r4, ror sp
   13b50:	andeq	r3, r1, r4, ror sp
   13b54:	andeq	r3, r1, r4, ror sp
   13b58:	andeq	r3, r1, ip, lsr #25
   13b5c:	strdeq	r3, [r1], -r4
   13b60:	andeq	r3, r1, r4, ror #26
   13b64:	andeq	r3, r1, r4, ror #26
   13b68:	andeq	r3, r1, r4, ror #26
   13b6c:	andeq	r3, r1, r4, ror #26
   13b70:	andeq	r3, r1, r4, ror #26
   13b74:	andeq	r3, r1, r4, ror #26
   13b78:	andeq	r3, r1, r4, ror #26
   13b7c:	andeq	r3, r1, r4, ror #26
   13b80:	andeq	r3, r1, r4, ror #26
   13b84:	andeq	r3, r1, r4, ror #26
   13b88:	andeq	r3, r1, r4, ror #26
   13b8c:	andeq	r3, r1, r4, ror #26
   13b90:	andeq	r3, r1, r4, ror #26
   13b94:	andeq	r3, r1, r4, ror #26
   13b98:	andeq	r3, r1, r4, ror #26
   13b9c:	andeq	r3, r1, r4, ror #26
   13ba0:	andeq	r3, r1, r4, ror #26
   13ba4:	andeq	r3, r1, r4, ror #26
   13ba8:	andeq	r3, r1, r4, ror #26
   13bac:	andeq	r3, r1, r4, ror #26
   13bb0:	andeq	r3, r1, r4, ror #26
   13bb4:	andeq	r3, r1, r4, ror #26
   13bb8:	andeq	r3, r1, r4, ror #26
   13bbc:	andeq	r3, r1, r4, ror #26
   13bc0:	andeq	r3, r1, r4, ror #26
   13bc4:	andeq	r3, r1, r4, ror #26
   13bc8:	andeq	r3, r1, r4, ror sp
   13bcc:	andeq	r3, r1, ip, ror ip
   13bd0:	andeq	r3, r1, r4, ror #26
   13bd4:	andeq	r3, r1, r4, ror sp
   13bd8:	andeq	r3, r1, r4, ror #26
   13bdc:	andeq	r3, r1, r4, ror sp
   13be0:	andeq	r3, r1, r4, ror #26
   13be4:	andeq	r3, r1, r4, ror #26
   13be8:	andeq	r3, r1, r4, ror #26
   13bec:	andeq	r3, r1, r4, ror #26
   13bf0:	andeq	r3, r1, r4, ror #26
   13bf4:	andeq	r3, r1, r4, ror #26
   13bf8:	andeq	r3, r1, r4, ror #26
   13bfc:	andeq	r3, r1, r4, ror #26
   13c00:	andeq	r3, r1, r4, ror #26
   13c04:	andeq	r3, r1, r4, ror #26
   13c08:	andeq	r3, r1, r4, ror #26
   13c0c:	andeq	r3, r1, r4, ror #26
   13c10:	andeq	r3, r1, r4, ror #26
   13c14:	andeq	r3, r1, r4, ror #26
   13c18:	andeq	r3, r1, r4, ror #26
   13c1c:	andeq	r3, r1, r4, ror #26
   13c20:	andeq	r3, r1, r4, ror #26
   13c24:	andeq	r3, r1, r4, ror #26
   13c28:	andeq	r3, r1, r4, ror #26
   13c2c:	andeq	r3, r1, r4, ror #26
   13c30:	andeq	r3, r1, r4, ror #26
   13c34:	andeq	r3, r1, r4, ror #26
   13c38:	andeq	r3, r1, r4, ror #26
   13c3c:	andeq	r3, r1, r4, ror #26
   13c40:	andeq	r3, r1, r4, ror #26
   13c44:	andeq	r3, r1, r4, ror #26
   13c48:	andeq	r3, r1, r8, asr ip
   13c4c:	andeq	r3, r1, r4, ror sp
   13c50:	andeq	r3, r1, r8, asr ip
   13c54:	andeq	r3, r1, ip, ror #26
   13c58:	ldr	r3, [sp, #24]
   13c5c:	mov	r6, #0
   13c60:	cmn	r3, #1
   13c64:	bne	13610 <__assert_fail@plt+0x2774>
   13c68:	ldr	r3, [sp, #44]	; 0x2c
   13c6c:	ldrb	r3, [r3, #1]
   13c70:	adds	r3, r3, #0
   13c74:	movne	r3, #1
   13c78:	b	13618 <__assert_fail@plt+0x277c>
   13c7c:	ldr	r3, [sp, #176]	; 0xb0
   13c80:	mov	r6, #0
   13c84:	cmp	r3, #2
   13c88:	bne	13758 <__assert_fail@plt+0x28bc>
   13c8c:	ldr	r3, [sp, #64]	; 0x40
   13c90:	cmp	r3, #0
   13c94:	bne	144cc <__assert_fail@plt+0x3630>
   13c98:	add	sl, sl, #1
   13c9c:	ldr	r6, [sp, #36]	; 0x24
   13ca0:	str	r3, [sp, #32]
   13ca4:	mov	r4, #92	; 0x5c
   13ca8:	b	13664 <__assert_fail@plt+0x27c8>
   13cac:	ldr	r3, [sp, #176]	; 0xb0
   13cb0:	mov	r6, #0
   13cb4:	cmp	r3, #2
   13cb8:	bne	1378c <__assert_fail@plt+0x28f0>
   13cbc:	ldr	r3, [sp, #40]	; 0x28
   13cc0:	cmp	r3, #0
   13cc4:	bne	13fa8 <__assert_fail@plt+0x310c>
   13cc8:	mov	r1, r7
   13ccc:	str	r3, [sp, #32]
   13cd0:	mov	r4, #63	; 0x3f
   13cd4:	b	13630 <__assert_fail@plt+0x2794>
   13cd8:	ldr	r3, [sp, #176]	; 0xb0
   13cdc:	mov	r6, #0
   13ce0:	cmp	r3, #2
   13ce4:	bne	137dc <__assert_fail@plt+0x2940>
   13ce8:	ldr	r3, [sp, #64]	; 0x40
   13cec:	cmp	r3, #0
   13cf0:	bne	144cc <__assert_fail@plt+0x3630>
   13cf4:	ldr	r2, [sp, #84]	; 0x54
   13cf8:	adds	r3, fp, #0
   13cfc:	movne	r3, #1
   13d00:	cmp	r2, #0
   13d04:	movne	r3, #0
   13d08:	cmp	r3, #0
   13d0c:	strne	fp, [sp, #84]	; 0x54
   13d10:	movne	fp, #0
   13d14:	bne	13d44 <__assert_fail@plt+0x2ea8>
   13d18:	cmp	fp, r8
   13d1c:	movhi	r3, #39	; 0x27
   13d20:	strbhi	r3, [r9, r8]
   13d24:	add	r3, r8, #1
   13d28:	cmp	fp, r3
   13d2c:	movhi	r2, #92	; 0x5c
   13d30:	strbhi	r2, [r9, r3]
   13d34:	add	r3, r8, #2
   13d38:	cmp	fp, r3
   13d3c:	movhi	r2, #39	; 0x27
   13d40:	strbhi	r2, [r9, r3]
   13d44:	ldr	r3, [sp, #64]	; 0x40
   13d48:	add	r8, r8, #3
   13d4c:	mov	r1, r7
   13d50:	str	r7, [sp, #32]
   13d54:	str	r7, [sp, #76]	; 0x4c
   13d58:	str	r3, [sp, #36]	; 0x24
   13d5c:	mov	r4, #39	; 0x27
   13d60:	b	13630 <__assert_fail@plt+0x2794>
   13d64:	mov	r6, #0
   13d68:	b	137f4 <__assert_fail@plt+0x2958>
   13d6c:	mov	r6, #0
   13d70:	b	139e8 <__assert_fail@plt+0x2b4c>
   13d74:	mov	r6, #0
   13d78:	b	13a08 <__assert_fail@plt+0x2b6c>
   13d7c:	str	r7, [sp, #32]
   13d80:	mov	r6, #0
   13d84:	b	13a10 <__assert_fail@plt+0x2b74>
   13d88:	mov	r6, #0
   13d8c:	b	13a38 <__assert_fail@plt+0x2b9c>
   13d90:	mov	r6, #0
   13d94:	b	13804 <__assert_fail@plt+0x2968>
   13d98:	mov	r6, #0
   13d9c:	b	138cc <__assert_fail@plt+0x2a30>
   13da0:	mov	r6, #0
   13da4:	b	1389c <__assert_fail@plt+0x2a00>
   13da8:	mov	r6, #0
   13dac:	mov	r3, #116	; 0x74
   13db0:	b	138a4 <__assert_fail@plt+0x2a08>
   13db4:	mov	r6, #0
   13db8:	b	138e0 <__assert_fail@plt+0x2a44>
   13dbc:	mov	r6, #0
   13dc0:	b	138f4 <__assert_fail@plt+0x2a58>
   13dc4:	ldr	r3, [sp, #56]	; 0x38
   13dc8:	mov	r6, #0
   13dcc:	cmp	r3, #0
   13dd0:	bne	13914 <__assert_fail@plt+0x2a78>
   13dd4:	ldr	r3, [sp, #96]	; 0x60
   13dd8:	cmp	r3, #0
   13ddc:	addne	sl, sl, #1
   13de0:	bne	13188 <__assert_fail@plt+0x22ec>
   13de4:	ldr	r1, [sp, #52]	; 0x34
   13de8:	str	r3, [sp, #32]
   13dec:	mov	r4, r3
   13df0:	b	13630 <__assert_fail@plt+0x2794>
   13df4:	mov	r6, #0
   13df8:	ldr	r3, [sp, #80]	; 0x50
   13dfc:	cmp	r3, #1
   13e00:	bne	13ff0 <__assert_fail@plt+0x3154>
   13e04:	bl	10db8 <__ctype_b_loc@plt>
   13e08:	ldr	r2, [sp, #80]	; 0x50
   13e0c:	sxth	r3, r4
   13e10:	mov	r1, r2
   13e14:	lsl	r3, r3, #1
   13e18:	ldr	r2, [r0]
   13e1c:	ldrh	r3, [r2, r3]
   13e20:	and	r3, r3, #16384	; 0x4000
   13e24:	cmp	r3, #0
   13e28:	movne	r3, #1
   13e2c:	moveq	r3, #0
   13e30:	str	r3, [sp, #32]
   13e34:	moveq	r3, #1
   13e38:	movne	r3, #0
   13e3c:	ldr	r2, [sp, #56]	; 0x38
   13e40:	and	r3, r3, r2
   13e44:	ands	r3, r3, #255	; 0xff
   13e48:	beq	13a1c <__assert_fail@plt+0x2b80>
   13e4c:	add	r1, sl, r1
   13e50:	mov	r0, #0
   13e54:	ldr	r7, [sp, #40]	; 0x28
   13e58:	ldr	r2, [sp, #36]	; 0x24
   13e5c:	ldr	lr, [sp, #52]	; 0x34
   13e60:	b	13f10 <__assert_fail@plt+0x3074>
   13e64:	cmp	r7, #0
   13e68:	bne	14264 <__assert_fail@plt+0x33c8>
   13e6c:	eor	r0, r2, #1
   13e70:	ands	r0, lr, r0
   13e74:	beq	13eac <__assert_fail@plt+0x3010>
   13e78:	cmp	fp, r8
   13e7c:	movhi	r2, #39	; 0x27
   13e80:	strbhi	r2, [r9, r8]
   13e84:	add	r2, r8, #1
   13e88:	cmp	fp, r2
   13e8c:	movhi	ip, #36	; 0x24
   13e90:	strbhi	ip, [r9, r2]
   13e94:	add	r2, r8, #2
   13e98:	cmp	fp, r2
   13e9c:	movhi	ip, #39	; 0x27
   13ea0:	strbhi	ip, [r9, r2]
   13ea4:	add	r8, r8, #3
   13ea8:	mov	r2, r0
   13eac:	cmp	fp, r8
   13eb0:	movhi	r0, #92	; 0x5c
   13eb4:	strbhi	r0, [r9, r8]
   13eb8:	add	r0, r8, #1
   13ebc:	cmp	fp, r0
   13ec0:	lsrhi	ip, r4, #6
   13ec4:	addhi	ip, ip, #48	; 0x30
   13ec8:	strbhi	ip, [r9, r0]
   13ecc:	add	ip, r8, #2
   13ed0:	cmp	fp, ip
   13ed4:	lsrhi	r0, r4, #3
   13ed8:	andhi	r0, r0, #7
   13edc:	addhi	r0, r0, #48	; 0x30
   13ee0:	add	sl, sl, #1
   13ee4:	strbhi	r0, [r9, ip]
   13ee8:	and	r4, r4, #7
   13eec:	cmp	sl, r1
   13ef0:	add	r4, r4, #48	; 0x30
   13ef4:	add	r8, r8, #3
   13ef8:	bcs	1427c <__assert_fail@plt+0x33e0>
   13efc:	mov	r0, r3
   13f00:	cmp	fp, r8
   13f04:	strbhi	r4, [r9, r8]
   13f08:	ldrb	r4, [r5, #1]!
   13f0c:	add	r8, r8, #1
   13f10:	cmp	r3, #0
   13f14:	bne	13e64 <__assert_fail@plt+0x2fc8>
   13f18:	cmp	r6, #0
   13f1c:	bne	13fc0 <__assert_fail@plt+0x3124>
   13f20:	eor	r6, r0, #1
   13f24:	and	r6, r6, r2
   13f28:	add	sl, sl, #1
   13f2c:	cmp	r1, sl
   13f30:	uxtb	r6, r6
   13f34:	bls	13fe8 <__assert_fail@plt+0x314c>
   13f38:	cmp	r6, #0
   13f3c:	beq	13f00 <__assert_fail@plt+0x3064>
   13f40:	cmp	fp, r8
   13f44:	movhi	r2, #39	; 0x27
   13f48:	strbhi	r2, [r9, r8]
   13f4c:	add	r2, r8, #1
   13f50:	cmp	fp, r2
   13f54:	movhi	ip, #39	; 0x27
   13f58:	strbhi	ip, [r9, r2]
   13f5c:	add	r8, r8, #2
   13f60:	mov	r6, r3
   13f64:	mov	r2, r3
   13f68:	b	13f00 <__assert_fail@plt+0x3064>
   13f6c:	ldr	r3, [sp, #184]	; 0xb8
   13f70:	cmp	r3, #0
   13f74:	beq	1364c <__assert_fail@plt+0x27b0>
   13f78:	lsr	r2, r4, #5
   13f7c:	mov	r0, r3
   13f80:	uxtb	r2, r2
   13f84:	and	r3, r4, #31
   13f88:	ldr	r2, [r0, r2, lsl #2]
   13f8c:	lsr	r3, r2, r3
   13f90:	tst	r3, #1
   13f94:	beq	1364c <__assert_fail@plt+0x27b0>
   13f98:	ldr	r3, [sp, #40]	; 0x28
   13f9c:	cmp	r3, #0
   13fa0:	beq	13838 <__assert_fail@plt+0x299c>
   13fa4:	mov	r3, r1
   13fa8:	str	r3, [sp, #64]	; 0x40
   13fac:	mov	sl, r9
   13fb0:	ldr	r3, [sp, #56]	; 0x38
   13fb4:	mov	r9, fp
   13fb8:	ldr	r2, [sp, #64]	; 0x40
   13fbc:	b	141ac <__assert_fail@plt+0x3310>
   13fc0:	cmp	fp, r8
   13fc4:	eor	r6, r0, #1
   13fc8:	movhi	ip, #92	; 0x5c
   13fcc:	and	r6, r6, r2
   13fd0:	add	sl, sl, #1
   13fd4:	strbhi	ip, [r9, r8]
   13fd8:	cmp	r1, sl
   13fdc:	add	r8, r8, #1
   13fe0:	uxtb	r6, r6
   13fe4:	bhi	13f38 <__assert_fail@plt+0x309c>
   13fe8:	str	r2, [sp, #36]	; 0x24
   13fec:	b	13664 <__assert_fail@plt+0x27c8>
   13ff0:	ldr	r3, [sp, #24]
   13ff4:	cmn	r3, #1
   13ff8:	mov	r3, #0
   13ffc:	str	r3, [sp, #128]	; 0x80
   14000:	str	r3, [sp, #132]	; 0x84
   14004:	beq	142f8 <__assert_fail@plt+0x345c>
   14008:	mov	r2, r7
   1400c:	mov	r3, #0
   14010:	str	r7, [sp, #104]	; 0x68
   14014:	str	r5, [sp, #116]	; 0x74
   14018:	mov	r7, r3
   1401c:	mov	r5, r2
   14020:	str	r4, [sp, #32]
   14024:	str	r6, [sp, #108]	; 0x6c
   14028:	str	r8, [sp, #112]	; 0x70
   1402c:	ldr	r3, [sp, #44]	; 0x2c
   14030:	add	r6, sl, r7
   14034:	add	r4, r3, r6
   14038:	ldr	r3, [sp, #24]
   1403c:	mov	r1, r4
   14040:	sub	r2, r3, r6
   14044:	add	r0, sp, #124	; 0x7c
   14048:	add	r3, sp, #128	; 0x80
   1404c:	bl	18454 <__assert_fail@plt+0x75b8>
   14050:	subs	r8, r0, #0
   14054:	beq	143dc <__assert_fail@plt+0x3540>
   14058:	cmn	r8, #1
   1405c:	beq	143b4 <__assert_fail@plt+0x3518>
   14060:	cmn	r8, #2
   14064:	beq	1434c <__assert_fail@plt+0x34b0>
   14068:	ldr	r3, [sp, #64]	; 0x40
   1406c:	cmp	r3, #0
   14070:	beq	14130 <__assert_fail@plt+0x3294>
   14074:	cmp	r8, #1
   14078:	beq	14130 <__assert_fail@plt+0x3294>
   1407c:	sub	r3, r8, #1
   14080:	add	r6, r3, r6
   14084:	ldr	r3, [sp, #44]	; 0x2c
   14088:	add	r6, r3, r6
   1408c:	ldrb	r3, [r4, #1]!
   14090:	sub	r3, r3, #91	; 0x5b
   14094:	cmp	r3, #33	; 0x21
   14098:	ldrls	pc, [pc, r3, lsl #2]
   1409c:	b	14128 <__assert_fail@plt+0x328c>
   140a0:	muleq	r1, r4, r1
   140a4:	muleq	r1, r4, r1
   140a8:	andeq	r4, r1, r8, lsr #2
   140ac:	muleq	r1, r4, r1
   140b0:	andeq	r4, r1, r8, lsr #2
   140b4:	muleq	r1, r4, r1
   140b8:	andeq	r4, r1, r8, lsr #2
   140bc:	andeq	r4, r1, r8, lsr #2
   140c0:	andeq	r4, r1, r8, lsr #2
   140c4:	andeq	r4, r1, r8, lsr #2
   140c8:	andeq	r4, r1, r8, lsr #2
   140cc:	andeq	r4, r1, r8, lsr #2
   140d0:	andeq	r4, r1, r8, lsr #2
   140d4:	andeq	r4, r1, r8, lsr #2
   140d8:	andeq	r4, r1, r8, lsr #2
   140dc:	andeq	r4, r1, r8, lsr #2
   140e0:	andeq	r4, r1, r8, lsr #2
   140e4:	andeq	r4, r1, r8, lsr #2
   140e8:	andeq	r4, r1, r8, lsr #2
   140ec:	andeq	r4, r1, r8, lsr #2
   140f0:	andeq	r4, r1, r8, lsr #2
   140f4:	andeq	r4, r1, r8, lsr #2
   140f8:	andeq	r4, r1, r8, lsr #2
   140fc:	andeq	r4, r1, r8, lsr #2
   14100:	andeq	r4, r1, r8, lsr #2
   14104:	andeq	r4, r1, r8, lsr #2
   14108:	andeq	r4, r1, r8, lsr #2
   1410c:	andeq	r4, r1, r8, lsr #2
   14110:	andeq	r4, r1, r8, lsr #2
   14114:	andeq	r4, r1, r8, lsr #2
   14118:	andeq	r4, r1, r8, lsr #2
   1411c:	andeq	r4, r1, r8, lsr #2
   14120:	andeq	r4, r1, r8, lsr #2
   14124:	muleq	r1, r4, r1
   14128:	cmp	r6, r4
   1412c:	bne	1408c <__assert_fail@plt+0x31f0>
   14130:	ldr	r0, [sp, #124]	; 0x7c
   14134:	bl	10d04 <iswprint@plt>
   14138:	add	r7, r7, r8
   1413c:	cmp	r0, #0
   14140:	add	r0, sp, #128	; 0x80
   14144:	moveq	r5, #0
   14148:	bl	10cb0 <mbsinit@plt>
   1414c:	cmp	r0, #0
   14150:	beq	1402c <__assert_fail@plt+0x3190>
   14154:	ldr	r4, [sp, #32]
   14158:	str	r5, [sp, #32]
   1415c:	ldr	r3, [sp, #32]
   14160:	mov	r1, r7
   14164:	eor	r3, r3, #1
   14168:	ldr	r7, [sp, #104]	; 0x68
   1416c:	ldr	r6, [sp, #108]	; 0x6c
   14170:	ldr	r8, [sp, #112]	; 0x70
   14174:	ldr	r5, [sp, #116]	; 0x74
   14178:	uxtb	r3, r3
   1417c:	cmp	r1, #1
   14180:	bls	13e3c <__assert_fail@plt+0x2fa0>
   14184:	ldr	r2, [sp, #56]	; 0x38
   14188:	and	r3, r3, r2
   1418c:	uxtb	r3, r3
   14190:	b	13e4c <__assert_fail@plt+0x2fb0>
   14194:	mov	r3, #2
   14198:	str	r3, [sp, #176]	; 0xb0
   1419c:	ldr	r2, [sp, #64]	; 0x40
   141a0:	ldr	r3, [sp, #56]	; 0x38
   141a4:	mov	sl, r9
   141a8:	mov	r9, fp
   141ac:	and	r3, r3, r2
   141b0:	tst	r3, #255	; 0xff
   141b4:	ldr	r3, [sp, #176]	; 0xb0
   141b8:	movne	r3, #4
   141bc:	str	r3, [sp, #176]	; 0xb0
   141c0:	ldr	r3, [sp, #180]	; 0xb4
   141c4:	mov	ip, #0
   141c8:	bic	r3, r3, #2
   141cc:	str	r3, [sp, #4]
   141d0:	ldr	r3, [sp, #192]	; 0xc0
   141d4:	ldr	r2, [sp, #44]	; 0x2c
   141d8:	str	r3, [sp, #16]
   141dc:	ldr	r3, [sp, #188]	; 0xbc
   141e0:	mov	r1, r9
   141e4:	str	r3, [sp, #12]
   141e8:	ldr	r3, [sp, #176]	; 0xb0
   141ec:	mov	r0, sl
   141f0:	str	r3, [sp]
   141f4:	str	ip, [sp, #8]
   141f8:	ldr	r3, [sp, #24]
   141fc:	bl	1305c <__assert_fail@plt+0x21c0>
   14200:	mov	fp, r0
   14204:	mov	r0, fp
   14208:	add	sp, sp, #140	; 0x8c
   1420c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14210:	mov	r4, #92	; 0x5c
   14214:	mov	r1, #0
   14218:	mov	r3, r4
   1421c:	b	13810 <__assert_fail@plt+0x2974>
   14220:	mov	r3, #0
   14224:	ldr	r1, [sp, #52]	; 0x34
   14228:	str	r3, [sp, #32]
   1422c:	mov	r4, #63	; 0x3f
   14230:	b	13630 <__assert_fail@plt+0x2794>
   14234:	cmp	fp, #0
   14238:	beq	14294 <__assert_fail@plt+0x33f8>
   1423c:	mov	r3, #39	; 0x27
   14240:	strb	r3, [r9]
   14244:	mov	r3, #0
   14248:	str	r3, [sp, #40]	; 0x28
   1424c:	mov	r3, #1
   14250:	str	r3, [sp, #68]	; 0x44
   14254:	ldr	r3, [pc, #448]	; 1441c <__assert_fail@plt+0x3580>
   14258:	mov	r8, #1
   1425c:	str	r3, [sp, #72]	; 0x48
   14260:	b	13444 <__assert_fail@plt+0x25a8>
   14264:	ldr	r3, [sp, #40]	; 0x28
   14268:	mov	sl, r9
   1426c:	str	r3, [sp, #56]	; 0x38
   14270:	mov	r9, fp
   14274:	ldr	r2, [sp, #64]	; 0x40
   14278:	b	141ac <__assert_fail@plt+0x3310>
   1427c:	str	r2, [sp, #36]	; 0x24
   14280:	b	13694 <__assert_fail@plt+0x27f8>
   14284:	mov	r1, #0
   14288:	str	r3, [sp, #32]
   1428c:	mov	r4, #63	; 0x3f
   14290:	b	13630 <__assert_fail@plt+0x2794>
   14294:	ldr	r3, [pc, #384]	; 1441c <__assert_fail@plt+0x3580>
   14298:	str	r3, [sp, #72]	; 0x48
   1429c:	mov	r3, #0
   142a0:	str	r3, [sp, #40]	; 0x28
   142a4:	mov	r3, #1
   142a8:	str	r3, [sp, #68]	; 0x44
   142ac:	mov	r8, r3
   142b0:	b	13444 <__assert_fail@plt+0x25a8>
   142b4:	bl	10e84 <abort@plt>
   142b8:	cmp	fp, #0
   142bc:	beq	1431c <__assert_fail@plt+0x3480>
   142c0:	mov	r2, #1
   142c4:	mov	r3, #34	; 0x22
   142c8:	strb	r3, [r9]
   142cc:	mov	r8, r2
   142d0:	mov	r3, r2
   142d4:	str	r2, [sp, #68]	; 0x44
   142d8:	str	r3, [sp, #56]	; 0x38
   142dc:	ldr	r3, [pc, #316]	; 14420 <__assert_fail@plt+0x3584>
   142e0:	ldr	r1, [sp, #56]	; 0x38
   142e4:	str	r3, [sp, #72]	; 0x48
   142e8:	ldr	r2, [sp, #176]	; 0xb0
   142ec:	ldr	ip, [sp, #40]	; 0x28
   142f0:	ldr	lr, [sp, #176]	; 0xb0
   142f4:	b	13128 <__assert_fail@plt+0x228c>
   142f8:	ldr	r0, [sp, #44]	; 0x2c
   142fc:	bl	10dd0 <strlen@plt>
   14300:	str	r0, [sp, #24]
   14304:	b	14008 <__assert_fail@plt+0x316c>
   14308:	mov	r7, #0
   1430c:	ldr	r1, [sp, #52]	; 0x34
   14310:	str	r3, [sp, #32]
   14314:	mov	r4, #48	; 0x30
   14318:	b	13630 <__assert_fail@plt+0x2794>
   1431c:	mov	r3, #1
   14320:	str	r3, [sp, #68]	; 0x44
   14324:	mov	r8, r3
   14328:	b	142d8 <__assert_fail@plt+0x343c>
   1432c:	mov	r3, #2
   14330:	mov	sl, r9
   14334:	str	r3, [sp, #176]	; 0xb0
   14338:	mov	r9, fp
   1433c:	ldr	r3, [sp, #56]	; 0x38
   14340:	b	141ac <__assert_fail@plt+0x3310>
   14344:	ldr	r6, [sp, #48]	; 0x30
   14348:	b	13df8 <__assert_fail@plt+0x2f5c>
   1434c:	ldr	r0, [sp, #24]
   14350:	mov	ip, r6
   14354:	cmp	r0, ip
   14358:	mov	r1, r7
   1435c:	mov	r2, r4
   14360:	ldr	r7, [sp, #104]	; 0x68
   14364:	ldr	r4, [sp, #32]
   14368:	ldr	r6, [sp, #108]	; 0x6c
   1436c:	ldr	r8, [sp, #112]	; 0x70
   14370:	ldr	r5, [sp, #116]	; 0x74
   14374:	bls	143a4 <__assert_fail@plt+0x3508>
   14378:	ldrb	r3, [r2]
   1437c:	cmp	r3, #0
   14380:	bne	14394 <__assert_fail@plt+0x34f8>
   14384:	b	144b4 <__assert_fail@plt+0x3618>
   14388:	ldrb	r3, [r2, #1]!
   1438c:	cmp	r3, #0
   14390:	beq	144b4 <__assert_fail@plt+0x3618>
   14394:	add	r1, r1, #1
   14398:	add	r3, sl, r1
   1439c:	cmp	r0, r3
   143a0:	bhi	14388 <__assert_fail@plt+0x34ec>
   143a4:	mov	r2, #0
   143a8:	mov	r3, r7
   143ac:	str	r2, [sp, #32]
   143b0:	b	1417c <__assert_fail@plt+0x32e0>
   143b4:	mov	r1, r7
   143b8:	ldr	r7, [sp, #104]	; 0x68
   143bc:	mov	r2, #0
   143c0:	ldr	r4, [sp, #32]
   143c4:	ldr	r6, [sp, #108]	; 0x6c
   143c8:	ldr	r8, [sp, #112]	; 0x70
   143cc:	ldr	r5, [sp, #116]	; 0x74
   143d0:	mov	r3, r7
   143d4:	str	r2, [sp, #32]
   143d8:	b	1417c <__assert_fail@plt+0x32e0>
   143dc:	mov	r3, r5
   143e0:	eor	r3, r3, #1
   143e4:	ldr	r4, [sp, #32]
   143e8:	mov	r1, r7
   143ec:	str	r5, [sp, #32]
   143f0:	ldr	r7, [sp, #104]	; 0x68
   143f4:	ldr	r6, [sp, #108]	; 0x6c
   143f8:	ldr	r8, [sp, #112]	; 0x70
   143fc:	ldr	r5, [sp, #116]	; 0x74
   14400:	uxtb	r3, r3
   14404:	b	1417c <__assert_fail@plt+0x32e0>
   14408:	mov	sl, r9
   1440c:	str	r3, [sp, #56]	; 0x38
   14410:	mov	r9, fp
   14414:	ldr	r2, [sp, #64]	; 0x40
   14418:	b	141ac <__assert_fail@plt+0x3310>
   1441c:	andeq	r8, r1, r8, ror #31
   14420:	andeq	r8, r1, r4, ror #31
   14424:	andeq	r8, r1, ip, ror #31
   14428:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1442c:	ldr	r2, [sp, #44]	; 0x2c
   14430:	ldrb	r1, [r2, r3]
   14434:	sub	r2, r1, #33	; 0x21
   14438:	uxtb	r2, r2
   1443c:	cmp	r2, #29
   14440:	bhi	144c0 <__assert_fail@plt+0x3624>
   14444:	ldr	r0, [pc, #-36]	; 14428 <__assert_fail@plt+0x358c>
   14448:	mov	ip, #1
   1444c:	ands	r2, r0, ip, lsl r2
   14450:	beq	144e0 <__assert_fail@plt+0x3644>
   14454:	ldr	r2, [sp, #40]	; 0x28
   14458:	cmp	r2, #0
   1445c:	bne	145d4 <__assert_fail@plt+0x3738>
   14460:	add	r2, r8, #1
   14464:	cmp	fp, r8
   14468:	strbhi	r4, [r9, r8]
   1446c:	cmp	fp, r2
   14470:	movhi	r0, #34	; 0x22
   14474:	strbhi	r0, [r9, r2]
   14478:	add	r2, r8, #2
   1447c:	cmp	fp, r2
   14480:	movhi	r0, #34	; 0x22
   14484:	strbhi	r0, [r9, r2]
   14488:	add	r2, r8, #3
   1448c:	cmp	fp, r2
   14490:	mov	sl, r3
   14494:	ldr	r3, [sp, #40]	; 0x28
   14498:	movhi	r0, #63	; 0x3f
   1449c:	mov	r4, r1
   144a0:	strbhi	r0, [r9, r2]
   144a4:	add	r8, r8, #4
   144a8:	mov	r1, r3
   144ac:	str	r3, [sp, #32]
   144b0:	b	13630 <__assert_fail@plt+0x2794>
   144b4:	str	r3, [sp, #32]
   144b8:	mov	r3, r7
   144bc:	b	1417c <__assert_fail@plt+0x32e0>
   144c0:	mov	r1, #0
   144c4:	str	r1, [sp, #32]
   144c8:	b	13630 <__assert_fail@plt+0x2794>
   144cc:	mov	sl, r9
   144d0:	ldr	r3, [sp, #56]	; 0x38
   144d4:	mov	r9, fp
   144d8:	ldr	r2, [sp, #64]	; 0x40
   144dc:	b	141ac <__assert_fail@plt+0x3310>
   144e0:	str	r2, [sp, #32]
   144e4:	mov	r1, #0
   144e8:	b	13630 <__assert_fail@plt+0x2794>
   144ec:	ldr	r2, [sp, #76]	; 0x4c
   144f0:	mov	sl, r9
   144f4:	mov	r9, fp
   144f8:	mov	fp, r8
   144fc:	ldr	r1, [sp, #72]	; 0x48
   14500:	cmp	r1, #0
   14504:	moveq	r3, #0
   14508:	andne	r3, r2, #1
   1450c:	cmp	r3, #0
   14510:	beq	1453c <__assert_fail@plt+0x36a0>
   14514:	ldrb	r3, [r1]
   14518:	cmp	r3, #0
   1451c:	beq	1453c <__assert_fail@plt+0x36a0>
   14520:	mov	r2, r1
   14524:	cmp	r9, fp
   14528:	strbhi	r3, [sl, fp]
   1452c:	ldrb	r3, [r2, #1]!
   14530:	add	fp, fp, #1
   14534:	cmp	r3, #0
   14538:	bne	14524 <__assert_fail@plt+0x3688>
   1453c:	cmp	r9, fp
   14540:	movhi	r3, #0
   14544:	strbhi	r3, [sl, fp]
   14548:	b	14204 <__assert_fail@plt+0x3368>
   1454c:	ldr	r3, [sp, #192]	; 0xc0
   14550:	mov	ip, #5
   14554:	str	r3, [sp, #16]
   14558:	ldr	r3, [sp, #188]	; 0xbc
   1455c:	ldr	r2, [sp, #44]	; 0x2c
   14560:	str	r3, [sp, #12]
   14564:	ldr	r3, [sp, #184]	; 0xb8
   14568:	ldr	r1, [sp, #84]	; 0x54
   1456c:	str	r3, [sp, #8]
   14570:	ldr	r3, [sp, #180]	; 0xb4
   14574:	mov	r0, r9
   14578:	str	r3, [sp, #4]
   1457c:	str	ip, [sp]
   14580:	ldr	r3, [sp, #24]
   14584:	bl	1305c <__assert_fail@plt+0x21c0>
   14588:	mov	fp, r0
   1458c:	b	14204 <__assert_fail@plt+0x3368>
   14590:	mov	sl, r9
   14594:	mov	r9, fp
   14598:	mov	fp, r8
   1459c:	b	144fc <__assert_fail@plt+0x3660>
   145a0:	ldr	r1, [sp, #176]	; 0xb0
   145a4:	bl	12f3c <__assert_fail@plt+0x20a0>
   145a8:	str	r0, [sp, #192]	; 0xc0
   145ac:	b	13518 <__assert_fail@plt+0x267c>
   145b0:	ldr	r1, [sp, #176]	; 0xb0
   145b4:	bl	12f3c <__assert_fail@plt+0x20a0>
   145b8:	str	r0, [sp, #188]	; 0xbc
   145bc:	b	134f8 <__assert_fail@plt+0x265c>
   145c0:	mov	sl, r9
   145c4:	mov	r2, r3
   145c8:	mov	r9, fp
   145cc:	mov	fp, r8
   145d0:	b	144fc <__assert_fail@plt+0x3660>
   145d4:	mov	sl, r9
   145d8:	mov	r9, fp
   145dc:	b	141c0 <__assert_fail@plt+0x3324>
   145e0:	push	{r4, r5, r6, lr}
   145e4:	mov	r5, r0
   145e8:	bl	10ddc <__errno_location@plt>
   145ec:	cmp	r5, #0
   145f0:	mov	r1, #48	; 0x30
   145f4:	mov	r4, r0
   145f8:	ldr	r0, [pc, #16]	; 14610 <__assert_fail@plt+0x3774>
   145fc:	ldr	r6, [r4]
   14600:	movne	r0, r5
   14604:	bl	181b8 <__assert_fail@plt+0x731c>
   14608:	str	r6, [r4]
   1460c:	pop	{r4, r5, r6, pc}
   14610:	andeq	sl, r2, r4, ror r1
   14614:	ldr	r3, [pc, #12]	; 14628 <__assert_fail@plt+0x378c>
   14618:	cmp	r0, #0
   1461c:	moveq	r0, r3
   14620:	ldr	r0, [r0]
   14624:	bx	lr
   14628:	andeq	sl, r2, r4, ror r1
   1462c:	ldr	r3, [pc, #12]	; 14640 <__assert_fail@plt+0x37a4>
   14630:	cmp	r0, #0
   14634:	moveq	r0, r3
   14638:	str	r1, [r0]
   1463c:	bx	lr
   14640:	andeq	sl, r2, r4, ror r1
   14644:	ldr	r3, [pc, #52]	; 14680 <__assert_fail@plt+0x37e4>
   14648:	cmp	r0, #0
   1464c:	moveq	r0, r3
   14650:	add	r3, r0, #8
   14654:	push	{lr}		; (str lr, [sp, #-4]!)
   14658:	lsr	lr, r1, #5
   1465c:	and	r1, r1, #31
   14660:	ldr	ip, [r3, lr, lsl #2]
   14664:	lsr	r0, ip, r1
   14668:	eor	r2, r2, r0
   1466c:	and	r2, r2, #1
   14670:	and	r0, r0, #1
   14674:	eor	r1, ip, r2, lsl r1
   14678:	str	r1, [r3, lr, lsl #2]
   1467c:	pop	{pc}		; (ldr pc, [sp], #4)
   14680:	andeq	sl, r2, r4, ror r1
   14684:	ldr	r3, [pc, #16]	; 1469c <__assert_fail@plt+0x3800>
   14688:	cmp	r0, #0
   1468c:	movne	r3, r0
   14690:	ldr	r0, [r3, #4]
   14694:	str	r1, [r3, #4]
   14698:	bx	lr
   1469c:	andeq	sl, r2, r4, ror r1
   146a0:	ldr	r3, [pc, #44]	; 146d4 <__assert_fail@plt+0x3838>
   146a4:	cmp	r0, #0
   146a8:	moveq	r0, r3
   146ac:	mov	ip, #10
   146b0:	cmp	r2, #0
   146b4:	cmpne	r1, #0
   146b8:	str	ip, [r0]
   146bc:	beq	146cc <__assert_fail@plt+0x3830>
   146c0:	str	r1, [r0, #40]	; 0x28
   146c4:	str	r2, [r0, #44]	; 0x2c
   146c8:	bx	lr
   146cc:	push	{r4, lr}
   146d0:	bl	10e84 <abort@plt>
   146d4:	andeq	sl, r2, r4, ror r1
   146d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146dc:	sub	sp, sp, #24
   146e0:	ldr	ip, [pc, #108]	; 14754 <__assert_fail@plt+0x38b8>
   146e4:	ldr	r4, [sp, #56]	; 0x38
   146e8:	mov	r9, r2
   146ec:	cmp	r4, #0
   146f0:	moveq	r4, ip
   146f4:	mov	sl, r3
   146f8:	mov	r7, r0
   146fc:	mov	r8, r1
   14700:	bl	10ddc <__errno_location@plt>
   14704:	ldr	r3, [r4, #44]	; 0x2c
   14708:	mov	r1, r8
   1470c:	ldr	r6, [r0]
   14710:	str	r3, [sp, #16]
   14714:	ldr	r2, [r4, #40]	; 0x28
   14718:	add	r3, r4, #8
   1471c:	str	r3, [sp, #8]
   14720:	str	r2, [sp, #12]
   14724:	ldr	r2, [r4, #4]
   14728:	mov	r5, r0
   1472c:	str	r2, [sp, #4]
   14730:	ldr	ip, [r4]
   14734:	mov	r3, sl
   14738:	mov	r2, r9
   1473c:	mov	r0, r7
   14740:	str	ip, [sp]
   14744:	bl	1305c <__assert_fail@plt+0x21c0>
   14748:	str	r6, [r5]
   1474c:	add	sp, sp, #24
   14750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14754:	andeq	sl, r2, r4, ror r1
   14758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1475c:	cmp	r2, #0
   14760:	sub	sp, sp, #36	; 0x24
   14764:	ldr	r4, [pc, #164]	; 14810 <__assert_fail@plt+0x3974>
   14768:	mov	r8, r1
   1476c:	movne	r4, r2
   14770:	mov	r7, r0
   14774:	bl	10ddc <__errno_location@plt>
   14778:	ldr	r3, [r4, #44]	; 0x2c
   1477c:	ldr	r5, [r4, #4]
   14780:	add	r9, r4, #8
   14784:	orr	r5, r5, #1
   14788:	mov	r1, #0
   1478c:	mov	r2, r7
   14790:	ldr	fp, [r0]
   14794:	str	r3, [sp, #16]
   14798:	ldr	r3, [r4, #40]	; 0x28
   1479c:	stmib	sp, {r5, r9}
   147a0:	str	r3, [sp, #12]
   147a4:	ldr	r3, [r4]
   147a8:	mov	r6, r0
   147ac:	str	r3, [sp]
   147b0:	mov	r0, r1
   147b4:	mov	r3, r8
   147b8:	bl	1305c <__assert_fail@plt+0x21c0>
   147bc:	add	r1, r0, #1
   147c0:	mov	r0, r1
   147c4:	str	r1, [sp, #28]
   147c8:	bl	17c74 <__assert_fail@plt+0x6dd8>
   147cc:	ldr	r3, [r4, #44]	; 0x2c
   147d0:	ldr	r1, [sp, #28]
   147d4:	str	r3, [sp, #16]
   147d8:	ldr	r3, [r4, #40]	; 0x28
   147dc:	str	r5, [sp, #4]
   147e0:	str	r3, [sp, #12]
   147e4:	str	r9, [sp, #8]
   147e8:	ldr	ip, [r4]
   147ec:	mov	r3, r8
   147f0:	mov	r2, r7
   147f4:	str	ip, [sp]
   147f8:	mov	sl, r0
   147fc:	bl	1305c <__assert_fail@plt+0x21c0>
   14800:	mov	r0, sl
   14804:	str	fp, [r6]
   14808:	add	sp, sp, #36	; 0x24
   1480c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14810:	andeq	sl, r2, r4, ror r1
   14814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14818:	cmp	r3, #0
   1481c:	sub	sp, sp, #44	; 0x2c
   14820:	ldr	r4, [pc, #192]	; 148e8 <__assert_fail@plt+0x3a4c>
   14824:	mov	r6, r2
   14828:	movne	r4, r3
   1482c:	mov	r9, r1
   14830:	mov	r8, r0
   14834:	bl	10ddc <__errno_location@plt>
   14838:	ldr	r3, [r4, #44]	; 0x2c
   1483c:	ldr	r5, [r4, #4]
   14840:	add	sl, r4, #8
   14844:	cmp	r6, #0
   14848:	orreq	r5, r5, #1
   1484c:	mov	r1, #0
   14850:	ldr	r2, [r0]
   14854:	str	r3, [sp, #16]
   14858:	ldr	r3, [r4, #40]	; 0x28
   1485c:	stmib	sp, {r5, sl}
   14860:	str	r3, [sp, #12]
   14864:	ldr	r3, [r4]
   14868:	mov	r7, r0
   1486c:	str	r2, [sp, #28]
   14870:	str	r3, [sp]
   14874:	mov	r2, r8
   14878:	mov	r3, r9
   1487c:	mov	r0, r1
   14880:	bl	1305c <__assert_fail@plt+0x21c0>
   14884:	add	r1, r0, #1
   14888:	mov	fp, r0
   1488c:	mov	r0, r1
   14890:	str	r1, [sp, #36]	; 0x24
   14894:	bl	17c74 <__assert_fail@plt+0x6dd8>
   14898:	ldr	r3, [r4, #44]	; 0x2c
   1489c:	mov	r2, r8
   148a0:	str	r3, [sp, #16]
   148a4:	ldr	r3, [r4, #40]	; 0x28
   148a8:	str	r5, [sp, #4]
   148ac:	str	r3, [sp, #12]
   148b0:	str	sl, [sp, #8]
   148b4:	ldr	ip, [r4]
   148b8:	ldr	r1, [sp, #36]	; 0x24
   148bc:	mov	r3, r9
   148c0:	str	ip, [sp]
   148c4:	str	r0, [sp, #32]
   148c8:	bl	1305c <__assert_fail@plt+0x21c0>
   148cc:	ldr	r2, [sp, #28]
   148d0:	cmp	r6, #0
   148d4:	str	r2, [r7]
   148d8:	ldr	r0, [sp, #32]
   148dc:	strne	fp, [r6]
   148e0:	add	sp, sp, #44	; 0x2c
   148e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e8:	andeq	sl, r2, r4, ror r1
   148ec:	push	{r4, r5, r6, r7, r8, lr}
   148f0:	ldr	r6, [pc, #116]	; 1496c <__assert_fail@plt+0x3ad0>
   148f4:	ldr	r3, [r6, #4]
   148f8:	ldr	r7, [r6]
   148fc:	cmp	r3, #1
   14900:	movgt	r5, r7
   14904:	movgt	r4, #1
   14908:	ble	14928 <__assert_fail@plt+0x3a8c>
   1490c:	ldr	r0, [r5, #12]
   14910:	bl	129ec <__assert_fail@plt+0x1b50>
   14914:	ldr	r3, [r6, #4]
   14918:	add	r4, r4, #1
   1491c:	cmp	r3, r4
   14920:	add	r5, r5, #8
   14924:	bgt	1490c <__assert_fail@plt+0x3a70>
   14928:	ldr	r0, [r7, #4]
   1492c:	ldr	r4, [pc, #60]	; 14970 <__assert_fail@plt+0x3ad4>
   14930:	cmp	r0, r4
   14934:	beq	14948 <__assert_fail@plt+0x3aac>
   14938:	bl	129ec <__assert_fail@plt+0x1b50>
   1493c:	mov	r3, #256	; 0x100
   14940:	str	r4, [r6, #12]
   14944:	str	r3, [r6, #8]
   14948:	ldr	r4, [pc, #36]	; 14974 <__assert_fail@plt+0x3ad8>
   1494c:	cmp	r7, r4
   14950:	beq	14960 <__assert_fail@plt+0x3ac4>
   14954:	mov	r0, r7
   14958:	bl	129ec <__assert_fail@plt+0x1b50>
   1495c:	str	r4, [r6]
   14960:	mov	r3, #1
   14964:	str	r3, [r6, #4]
   14968:	pop	{r4, r5, r6, r7, r8, pc}
   1496c:	andeq	sl, r2, ip, ror #1
   14970:	andeq	sl, r2, r4, lsr #3
   14974:	strdeq	sl, [r2], -r4
   14978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1497c:	sub	sp, sp, #44	; 0x2c
   14980:	mov	r5, r0
   14984:	mov	sl, r1
   14988:	bl	10ddc <__errno_location@plt>
   1498c:	ldr	r4, [pc, #400]	; 14b24 <__assert_fail@plt+0x3c88>
   14990:	cmn	r5, #-2147483647	; 0x80000001
   14994:	ldr	r6, [r4]
   14998:	mov	r8, r0
   1499c:	movne	r0, #0
   149a0:	moveq	r0, #1
   149a4:	ldr	r3, [r8]
   149a8:	orrs	r0, r0, r5, lsr #31
   149ac:	str	r3, [sp, #24]
   149b0:	bne	14b20 <__assert_fail@plt+0x3c84>
   149b4:	ldr	r2, [r4, #4]
   149b8:	cmp	r5, r2
   149bc:	blt	14a1c <__assert_fail@plt+0x3b80>
   149c0:	add	r7, r4, #8
   149c4:	cmp	r6, r7
   149c8:	str	r2, [sp, #36]	; 0x24
   149cc:	beq	14af0 <__assert_fail@plt+0x3c54>
   149d0:	mov	r3, #8
   149d4:	sub	r2, r5, r2
   149d8:	mov	r0, r6
   149dc:	str	r3, [sp]
   149e0:	add	r2, r2, #1
   149e4:	mvn	r3, #-2147483648	; 0x80000000
   149e8:	add	r1, sp, #36	; 0x24
   149ec:	bl	17e90 <__assert_fail@plt+0x6ff4>
   149f0:	mov	r6, r0
   149f4:	str	r0, [r4]
   149f8:	ldr	r0, [r4, #4]
   149fc:	ldr	r2, [sp, #36]	; 0x24
   14a00:	mov	r1, #0
   14a04:	sub	r2, r2, r0
   14a08:	add	r0, r6, r0, lsl #3
   14a0c:	lsl	r2, r2, #3
   14a10:	bl	10df4 <memset@plt>
   14a14:	ldr	r3, [sp, #36]	; 0x24
   14a18:	str	r3, [r4, #4]
   14a1c:	ldr	r4, [pc, #260]	; 14b28 <__assert_fail@plt+0x3c8c>
   14a20:	add	fp, r6, r5, lsl #3
   14a24:	ldr	r9, [r6, r5, lsl #3]
   14a28:	ldr	r0, [r4, #4]
   14a2c:	ldr	r3, [r4]
   14a30:	ldr	r7, [fp, #4]
   14a34:	ldr	r1, [r4, #44]	; 0x2c
   14a38:	ldr	r2, [r4, #40]	; 0x28
   14a3c:	orr	r0, r0, #1
   14a40:	str	r3, [sp]
   14a44:	add	r3, r4, #8
   14a48:	str	r0, [sp, #28]
   14a4c:	str	r0, [sp, #4]
   14a50:	str	r1, [sp, #16]
   14a54:	str	r2, [sp, #12]
   14a58:	str	r3, [sp, #8]
   14a5c:	mov	r0, r7
   14a60:	mov	r1, r9
   14a64:	mvn	r3, #0
   14a68:	mov	r2, sl
   14a6c:	bl	1305c <__assert_fail@plt+0x21c0>
   14a70:	cmp	r9, r0
   14a74:	bhi	14adc <__assert_fail@plt+0x3c40>
   14a78:	add	r3, r4, #48	; 0x30
   14a7c:	add	r9, r0, #1
   14a80:	cmp	r7, r3
   14a84:	str	r9, [r6, r5, lsl #3]
   14a88:	beq	14a94 <__assert_fail@plt+0x3bf8>
   14a8c:	mov	r0, r7
   14a90:	bl	129ec <__assert_fail@plt+0x1b50>
   14a94:	mov	r0, r9
   14a98:	bl	17c74 <__assert_fail@plt+0x6dd8>
   14a9c:	ldr	ip, [r4, #44]	; 0x2c
   14aa0:	ldr	r3, [r4]
   14aa4:	ldr	lr, [r4, #40]	; 0x28
   14aa8:	ldr	r4, [pc, #124]	; 14b2c <__assert_fail@plt+0x3c90>
   14aac:	mov	r2, sl
   14ab0:	mov	r1, r9
   14ab4:	str	r0, [fp, #4]
   14ab8:	str	r4, [sp, #8]
   14abc:	ldr	r4, [sp, #28]
   14ac0:	str	r3, [sp]
   14ac4:	str	r4, [sp, #4]
   14ac8:	str	ip, [sp, #16]
   14acc:	str	lr, [sp, #12]
   14ad0:	mvn	r3, #0
   14ad4:	mov	r7, r0
   14ad8:	bl	1305c <__assert_fail@plt+0x21c0>
   14adc:	ldr	r3, [sp, #24]
   14ae0:	mov	r0, r7
   14ae4:	str	r3, [r8]
   14ae8:	add	sp, sp, #44	; 0x2c
   14aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14af0:	mov	r3, #8
   14af4:	sub	r2, r5, r2
   14af8:	str	r3, [sp]
   14afc:	add	r1, sp, #36	; 0x24
   14b00:	add	r2, r2, #1
   14b04:	mvn	r3, #-2147483648	; 0x80000000
   14b08:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14b0c:	mov	r6, r0
   14b10:	ldm	r7, {r0, r1}
   14b14:	str	r6, [r4]
   14b18:	stm	r6, {r0, r1}
   14b1c:	b	149f8 <__assert_fail@plt+0x3b5c>
   14b20:	bl	10e84 <abort@plt>
   14b24:	andeq	sl, r2, ip, ror #1
   14b28:	andeq	sl, r2, r4, ror r1
   14b2c:	andeq	sl, r2, ip, ror r1
   14b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b34:	sub	sp, sp, #52	; 0x34
   14b38:	mov	r5, r0
   14b3c:	mov	sl, r1
   14b40:	mov	fp, r2
   14b44:	bl	10ddc <__errno_location@plt>
   14b48:	ldr	r4, [pc, #408]	; 14ce8 <__assert_fail@plt+0x3e4c>
   14b4c:	cmn	r5, #-2147483647	; 0x80000001
   14b50:	ldr	r6, [r4]
   14b54:	mov	r8, r0
   14b58:	movne	r0, #0
   14b5c:	moveq	r0, #1
   14b60:	ldr	r3, [r8]
   14b64:	orrs	r0, r0, r5, lsr #31
   14b68:	str	r3, [sp, #28]
   14b6c:	bne	14ce4 <__assert_fail@plt+0x3e48>
   14b70:	ldr	r2, [r4, #4]
   14b74:	cmp	r5, r2
   14b78:	blt	14bd8 <__assert_fail@plt+0x3d3c>
   14b7c:	add	r7, r4, #8
   14b80:	cmp	r6, r7
   14b84:	str	r2, [sp, #44]	; 0x2c
   14b88:	beq	14cb4 <__assert_fail@plt+0x3e18>
   14b8c:	mov	r3, #8
   14b90:	sub	r2, r5, r2
   14b94:	mov	r0, r6
   14b98:	str	r3, [sp]
   14b9c:	add	r2, r2, #1
   14ba0:	mvn	r3, #-2147483648	; 0x80000000
   14ba4:	add	r1, sp, #44	; 0x2c
   14ba8:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14bac:	mov	r6, r0
   14bb0:	str	r0, [r4]
   14bb4:	ldr	r0, [r4, #4]
   14bb8:	ldr	r2, [sp, #44]	; 0x2c
   14bbc:	mov	r1, #0
   14bc0:	sub	r2, r2, r0
   14bc4:	add	r0, r6, r0, lsl #3
   14bc8:	lsl	r2, r2, #3
   14bcc:	bl	10df4 <memset@plt>
   14bd0:	ldr	r3, [sp, #44]	; 0x2c
   14bd4:	str	r3, [r4, #4]
   14bd8:	ldr	r4, [pc, #268]	; 14cec <__assert_fail@plt+0x3e50>
   14bdc:	add	r3, r6, r5, lsl #3
   14be0:	str	r3, [sp, #32]
   14be4:	ldr	r7, [r3, #4]
   14be8:	ldr	r0, [r4, #4]
   14bec:	ldr	r3, [r4]
   14bf0:	ldr	r9, [r6, r5, lsl #3]
   14bf4:	ldr	r1, [r4, #44]	; 0x2c
   14bf8:	ldr	r2, [r4, #40]	; 0x28
   14bfc:	orr	r0, r0, #1
   14c00:	str	r3, [sp]
   14c04:	add	r3, r4, #8
   14c08:	str	r0, [sp, #36]	; 0x24
   14c0c:	str	r0, [sp, #4]
   14c10:	str	r1, [sp, #16]
   14c14:	str	r2, [sp, #12]
   14c18:	str	r3, [sp, #8]
   14c1c:	mov	r0, r7
   14c20:	mov	r1, r9
   14c24:	mov	r3, fp
   14c28:	mov	r2, sl
   14c2c:	bl	1305c <__assert_fail@plt+0x21c0>
   14c30:	cmp	r9, r0
   14c34:	bhi	14ca0 <__assert_fail@plt+0x3e04>
   14c38:	add	r3, r4, #48	; 0x30
   14c3c:	add	r9, r0, #1
   14c40:	cmp	r7, r3
   14c44:	str	r9, [r6, r5, lsl #3]
   14c48:	beq	14c54 <__assert_fail@plt+0x3db8>
   14c4c:	mov	r0, r7
   14c50:	bl	129ec <__assert_fail@plt+0x1b50>
   14c54:	mov	r0, r9
   14c58:	bl	17c74 <__assert_fail@plt+0x6dd8>
   14c5c:	ldr	ip, [sp, #32]
   14c60:	ldr	lr, [r4, #44]	; 0x2c
   14c64:	ldr	r5, [r4, #40]	; 0x28
   14c68:	mov	r3, fp
   14c6c:	mov	r2, sl
   14c70:	mov	r1, r9
   14c74:	str	r0, [ip, #4]
   14c78:	ldr	ip, [r4]
   14c7c:	ldr	r4, [pc, #108]	; 14cf0 <__assert_fail@plt+0x3e54>
   14c80:	str	lr, [sp, #16]
   14c84:	str	r4, [sp, #8]
   14c88:	ldr	r4, [sp, #36]	; 0x24
   14c8c:	str	r5, [sp, #12]
   14c90:	str	r4, [sp, #4]
   14c94:	str	ip, [sp]
   14c98:	mov	r7, r0
   14c9c:	bl	1305c <__assert_fail@plt+0x21c0>
   14ca0:	ldr	r3, [sp, #28]
   14ca4:	mov	r0, r7
   14ca8:	str	r3, [r8]
   14cac:	add	sp, sp, #52	; 0x34
   14cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb4:	mov	r3, #8
   14cb8:	sub	r2, r5, r2
   14cbc:	str	r3, [sp]
   14cc0:	add	r1, sp, #44	; 0x2c
   14cc4:	add	r2, r2, #1
   14cc8:	mvn	r3, #-2147483648	; 0x80000000
   14ccc:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14cd0:	mov	r6, r0
   14cd4:	ldm	r7, {r0, r1}
   14cd8:	str	r6, [r4]
   14cdc:	stm	r6, {r0, r1}
   14ce0:	b	14bb4 <__assert_fail@plt+0x3d18>
   14ce4:	bl	10e84 <abort@plt>
   14ce8:	andeq	sl, r2, ip, ror #1
   14cec:	andeq	sl, r2, r4, ror r1
   14cf0:	andeq	sl, r2, ip, ror r1
   14cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cf8:	sub	sp, sp, #44	; 0x2c
   14cfc:	mov	sl, r0
   14d00:	bl	10ddc <__errno_location@plt>
   14d04:	ldr	r4, [pc, #352]	; 14e6c <__assert_fail@plt+0x3fd0>
   14d08:	ldr	r2, [r4, #4]
   14d0c:	ldr	r5, [r4]
   14d10:	cmp	r2, #0
   14d14:	ldr	r3, [r0]
   14d18:	mov	r8, r0
   14d1c:	str	r3, [sp, #28]
   14d20:	bgt	14d7c <__assert_fail@plt+0x3ee0>
   14d24:	add	r6, r4, #8
   14d28:	cmp	r5, r6
   14d2c:	str	r2, [sp, #36]	; 0x24
   14d30:	beq	14e3c <__assert_fail@plt+0x3fa0>
   14d34:	mov	r3, #8
   14d38:	mov	r0, r5
   14d3c:	str	r3, [sp]
   14d40:	rsb	r2, r2, #1
   14d44:	mvn	r3, #-2147483648	; 0x80000000
   14d48:	add	r1, sp, #36	; 0x24
   14d4c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14d50:	mov	r5, r0
   14d54:	str	r0, [r4]
   14d58:	ldr	r0, [r4, #4]
   14d5c:	ldr	r2, [sp, #36]	; 0x24
   14d60:	mov	r1, #0
   14d64:	sub	r2, r2, r0
   14d68:	add	r0, r5, r0, lsl #3
   14d6c:	lsl	r2, r2, #3
   14d70:	bl	10df4 <memset@plt>
   14d74:	ldr	r3, [sp, #36]	; 0x24
   14d78:	str	r3, [r4, #4]
   14d7c:	ldr	r4, [pc, #236]	; 14e70 <__assert_fail@plt+0x3fd4>
   14d80:	ldr	r9, [r5]
   14d84:	ldr	r6, [r5, #4]
   14d88:	ldr	r7, [r4, #4]
   14d8c:	ldr	r1, [r4, #44]	; 0x2c
   14d90:	ldr	r2, [r4, #40]	; 0x28
   14d94:	ldr	r3, [r4]
   14d98:	orr	r7, r7, #1
   14d9c:	add	fp, r4, #8
   14da0:	str	r1, [sp, #16]
   14da4:	str	r2, [sp, #12]
   14da8:	str	r3, [sp]
   14dac:	str	r7, [sp, #4]
   14db0:	str	fp, [sp, #8]
   14db4:	mov	r1, r9
   14db8:	mov	r0, r6
   14dbc:	mvn	r3, #0
   14dc0:	mov	r2, sl
   14dc4:	bl	1305c <__assert_fail@plt+0x21c0>
   14dc8:	cmp	r9, r0
   14dcc:	bhi	14e28 <__assert_fail@plt+0x3f8c>
   14dd0:	add	r3, r4, #48	; 0x30
   14dd4:	add	r9, r0, #1
   14dd8:	cmp	r6, r3
   14ddc:	str	r9, [r5]
   14de0:	beq	14dec <__assert_fail@plt+0x3f50>
   14de4:	mov	r0, r6
   14de8:	bl	129ec <__assert_fail@plt+0x1b50>
   14dec:	mov	r0, r9
   14df0:	bl	17c74 <__assert_fail@plt+0x6dd8>
   14df4:	ldr	ip, [r4, #44]	; 0x2c
   14df8:	ldr	r3, [r4]
   14dfc:	ldr	lr, [r4, #40]	; 0x28
   14e00:	mov	r2, sl
   14e04:	mov	r1, r9
   14e08:	str	r0, [r5, #4]
   14e0c:	str	r3, [sp]
   14e10:	stmib	sp, {r7, fp}
   14e14:	str	ip, [sp, #16]
   14e18:	str	lr, [sp, #12]
   14e1c:	mvn	r3, #0
   14e20:	mov	r6, r0
   14e24:	bl	1305c <__assert_fail@plt+0x21c0>
   14e28:	ldr	r3, [sp, #28]
   14e2c:	mov	r0, r6
   14e30:	str	r3, [r8]
   14e34:	add	sp, sp, #44	; 0x2c
   14e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e3c:	mov	r3, #8
   14e40:	str	r3, [sp]
   14e44:	add	r1, sp, #36	; 0x24
   14e48:	rsb	r2, r2, #1
   14e4c:	mvn	r3, #-2147483648	; 0x80000000
   14e50:	mov	r0, #0
   14e54:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14e58:	mov	r5, r0
   14e5c:	ldm	r6, {r0, r1}
   14e60:	str	r5, [r4]
   14e64:	stm	r5, {r0, r1}
   14e68:	b	14d58 <__assert_fail@plt+0x3ebc>
   14e6c:	andeq	sl, r2, ip, ror #1
   14e70:	andeq	sl, r2, r4, ror r1
   14e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e78:	sub	sp, sp, #44	; 0x2c
   14e7c:	mov	r9, r0
   14e80:	mov	sl, r1
   14e84:	bl	10ddc <__errno_location@plt>
   14e88:	ldr	r4, [pc, #364]	; 14ffc <__assert_fail@plt+0x4160>
   14e8c:	ldr	r2, [r4, #4]
   14e90:	ldr	r5, [r4]
   14e94:	cmp	r2, #0
   14e98:	ldr	r3, [r0]
   14e9c:	mov	r7, r0
   14ea0:	str	r3, [sp, #24]
   14ea4:	bgt	14f00 <__assert_fail@plt+0x4064>
   14ea8:	add	r6, r4, #8
   14eac:	cmp	r5, r6
   14eb0:	str	r2, [sp, #36]	; 0x24
   14eb4:	beq	14fcc <__assert_fail@plt+0x4130>
   14eb8:	mov	r3, #8
   14ebc:	mov	r0, r5
   14ec0:	str	r3, [sp]
   14ec4:	rsb	r2, r2, #1
   14ec8:	mvn	r3, #-2147483648	; 0x80000000
   14ecc:	add	r1, sp, #36	; 0x24
   14ed0:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14ed4:	mov	r5, r0
   14ed8:	str	r0, [r4]
   14edc:	ldr	r0, [r4, #4]
   14ee0:	ldr	r2, [sp, #36]	; 0x24
   14ee4:	mov	r1, #0
   14ee8:	sub	r2, r2, r0
   14eec:	add	r0, r5, r0, lsl #3
   14ef0:	lsl	r2, r2, #3
   14ef4:	bl	10df4 <memset@plt>
   14ef8:	ldr	r3, [sp, #36]	; 0x24
   14efc:	str	r3, [r4, #4]
   14f00:	ldr	r4, [pc, #248]	; 15000 <__assert_fail@plt+0x4164>
   14f04:	ldr	r8, [r5]
   14f08:	ldr	r6, [r5, #4]
   14f0c:	ldr	r0, [r4, #4]
   14f10:	ldr	r1, [r4, #44]	; 0x2c
   14f14:	ldr	r2, [r4, #40]	; 0x28
   14f18:	ldr	r3, [r4]
   14f1c:	orr	r0, r0, #1
   14f20:	add	fp, r4, #8
   14f24:	str	r0, [sp, #28]
   14f28:	str	r0, [sp, #4]
   14f2c:	str	r1, [sp, #16]
   14f30:	str	r2, [sp, #12]
   14f34:	str	r3, [sp]
   14f38:	str	fp, [sp, #8]
   14f3c:	mov	r1, r8
   14f40:	mov	r0, r6
   14f44:	mov	r3, sl
   14f48:	mov	r2, r9
   14f4c:	bl	1305c <__assert_fail@plt+0x21c0>
   14f50:	cmp	r8, r0
   14f54:	bhi	14fb8 <__assert_fail@plt+0x411c>
   14f58:	add	r3, r4, #48	; 0x30
   14f5c:	add	r8, r0, #1
   14f60:	cmp	r6, r3
   14f64:	str	r8, [r5]
   14f68:	beq	14f74 <__assert_fail@plt+0x40d8>
   14f6c:	mov	r0, r6
   14f70:	bl	129ec <__assert_fail@plt+0x1b50>
   14f74:	mov	r0, r8
   14f78:	bl	17c74 <__assert_fail@plt+0x6dd8>
   14f7c:	ldr	lr, [r4, #44]	; 0x2c
   14f80:	ldr	ip, [r4]
   14f84:	mov	r3, sl
   14f88:	mov	r2, r9
   14f8c:	mov	r1, r8
   14f90:	str	r0, [r5, #4]
   14f94:	ldr	r5, [r4, #40]	; 0x28
   14f98:	ldr	r4, [sp, #28]
   14f9c:	str	fp, [sp, #8]
   14fa0:	str	r4, [sp, #4]
   14fa4:	str	lr, [sp, #16]
   14fa8:	str	r5, [sp, #12]
   14fac:	str	ip, [sp]
   14fb0:	mov	r6, r0
   14fb4:	bl	1305c <__assert_fail@plt+0x21c0>
   14fb8:	ldr	r3, [sp, #24]
   14fbc:	mov	r0, r6
   14fc0:	str	r3, [r7]
   14fc4:	add	sp, sp, #44	; 0x2c
   14fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fcc:	mov	r3, #8
   14fd0:	str	r3, [sp]
   14fd4:	add	r1, sp, #36	; 0x24
   14fd8:	rsb	r2, r2, #1
   14fdc:	mvn	r3, #-2147483648	; 0x80000000
   14fe0:	mov	r0, #0
   14fe4:	bl	17e90 <__assert_fail@plt+0x6ff4>
   14fe8:	mov	r5, r0
   14fec:	ldm	r6, {r0, r1}
   14ff0:	str	r5, [r4]
   14ff4:	stm	r5, {r0, r1}
   14ff8:	b	14edc <__assert_fail@plt+0x4040>
   14ffc:	andeq	sl, r2, ip, ror #1
   15000:	andeq	sl, r2, r4, ror r1
   15004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15008:	sub	sp, sp, #132	; 0x84
   1500c:	mov	r5, r1
   15010:	mov	r4, r0
   15014:	mov	r9, r2
   15018:	add	r0, sp, #80	; 0x50
   1501c:	mov	r2, #48	; 0x30
   15020:	mov	r1, #0
   15024:	bl	10df4 <memset@plt>
   15028:	cmp	r5, #10
   1502c:	beq	151e4 <__assert_fail@plt+0x4348>
   15030:	add	lr, sp, #80	; 0x50
   15034:	str	r5, [sp, #80]	; 0x50
   15038:	ldm	lr!, {r0, r1, r2, r3}
   1503c:	add	ip, sp, #32
   15040:	ldr	r6, [pc, #416]	; 151e8 <__assert_fail@plt+0x434c>
   15044:	stmia	ip!, {r0, r1, r2, r3}
   15048:	ldm	lr!, {r0, r1, r2, r3}
   1504c:	stmia	ip!, {r0, r1, r2, r3}
   15050:	ldm	lr, {r0, r1, r2, r3}
   15054:	stm	ip, {r0, r1, r2, r3}
   15058:	bl	10ddc <__errno_location@plt>
   1505c:	cmn	r4, #-2147483647	; 0x80000001
   15060:	ldr	r5, [r6]
   15064:	mov	r7, r0
   15068:	movne	r0, #0
   1506c:	moveq	r0, #1
   15070:	ldr	r3, [r7]
   15074:	orrs	r0, r0, r4, lsr #31
   15078:	str	r3, [sp, #24]
   1507c:	bne	151e4 <__assert_fail@plt+0x4348>
   15080:	ldr	r2, [r6, #4]
   15084:	cmp	r4, r2
   15088:	blt	150e8 <__assert_fail@plt+0x424c>
   1508c:	add	r8, r6, #8
   15090:	cmp	r5, r8
   15094:	str	r2, [sp, #80]	; 0x50
   15098:	beq	151b4 <__assert_fail@plt+0x4318>
   1509c:	mov	r3, #8
   150a0:	sub	r2, r4, r2
   150a4:	mov	r0, r5
   150a8:	str	r3, [sp]
   150ac:	add	r2, r2, #1
   150b0:	add	r1, sp, #80	; 0x50
   150b4:	mvn	r3, #-2147483648	; 0x80000000
   150b8:	bl	17e90 <__assert_fail@plt+0x6ff4>
   150bc:	mov	r5, r0
   150c0:	str	r0, [r6]
   150c4:	ldr	r0, [r6, #4]
   150c8:	ldr	r2, [sp, #80]	; 0x50
   150cc:	mov	r1, #0
   150d0:	sub	r2, r2, r0
   150d4:	add	r0, r5, r0, lsl #3
   150d8:	lsl	r2, r2, #3
   150dc:	bl	10df4 <memset@plt>
   150e0:	ldr	r3, [sp, #80]	; 0x50
   150e4:	str	r3, [r6, #4]
   150e8:	add	fp, r5, r4, lsl #3
   150ec:	ldr	r1, [sp, #36]	; 0x24
   150f0:	ldr	r8, [r5, r4, lsl #3]
   150f4:	ldr	r6, [fp, #4]
   150f8:	ldr	r2, [sp, #72]	; 0x48
   150fc:	ldr	r3, [sp, #32]
   15100:	ldr	ip, [sp, #76]	; 0x4c
   15104:	orr	r1, r1, #1
   15108:	add	sl, sp, #40	; 0x28
   1510c:	str	r1, [sp, #28]
   15110:	str	r1, [sp, #4]
   15114:	str	r2, [sp, #12]
   15118:	str	r3, [sp]
   1511c:	mov	r0, r6
   15120:	mov	r1, r8
   15124:	str	ip, [sp, #16]
   15128:	str	sl, [sp, #8]
   1512c:	mvn	r3, #0
   15130:	mov	r2, r9
   15134:	bl	1305c <__assert_fail@plt+0x21c0>
   15138:	cmp	r8, r0
   1513c:	bhi	151a0 <__assert_fail@plt+0x4304>
   15140:	ldr	r3, [pc, #164]	; 151ec <__assert_fail@plt+0x4350>
   15144:	add	r8, r0, #1
   15148:	cmp	r6, r3
   1514c:	str	r8, [r5, r4, lsl #3]
   15150:	beq	1515c <__assert_fail@plt+0x42c0>
   15154:	mov	r0, r6
   15158:	bl	129ec <__assert_fail@plt+0x1b50>
   1515c:	mov	r0, r8
   15160:	bl	17c74 <__assert_fail@plt+0x6dd8>
   15164:	ldr	lr, [sp, #76]	; 0x4c
   15168:	ldr	r3, [sp, #32]
   1516c:	ldr	ip, [sp, #72]	; 0x48
   15170:	ldr	r4, [sp, #28]
   15174:	mov	r2, r9
   15178:	mov	r1, r8
   1517c:	str	r0, [fp, #4]
   15180:	str	r3, [sp]
   15184:	str	sl, [sp, #8]
   15188:	str	r4, [sp, #4]
   1518c:	str	lr, [sp, #16]
   15190:	str	ip, [sp, #12]
   15194:	mvn	r3, #0
   15198:	mov	r6, r0
   1519c:	bl	1305c <__assert_fail@plt+0x21c0>
   151a0:	ldr	r3, [sp, #24]
   151a4:	mov	r0, r6
   151a8:	str	r3, [r7]
   151ac:	add	sp, sp, #132	; 0x84
   151b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151b4:	mov	r3, #8
   151b8:	sub	r2, r4, r2
   151bc:	add	r1, sp, #80	; 0x50
   151c0:	str	r3, [sp]
   151c4:	add	r2, r2, #1
   151c8:	mvn	r3, #-2147483648	; 0x80000000
   151cc:	bl	17e90 <__assert_fail@plt+0x6ff4>
   151d0:	mov	r5, r0
   151d4:	ldm	r8, {r0, r1}
   151d8:	str	r5, [r6]
   151dc:	stm	r5, {r0, r1}
   151e0:	b	150c4 <__assert_fail@plt+0x4228>
   151e4:	bl	10e84 <abort@plt>
   151e8:	andeq	sl, r2, ip, ror #1
   151ec:	andeq	sl, r2, r4, lsr #3
   151f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151f4:	sub	sp, sp, #132	; 0x84
   151f8:	mov	r5, r1
   151fc:	mov	r4, r0
   15200:	mov	r9, r2
   15204:	add	r0, sp, #80	; 0x50
   15208:	mov	r2, #48	; 0x30
   1520c:	mov	r1, #0
   15210:	mov	sl, r3
   15214:	bl	10df4 <memset@plt>
   15218:	cmp	r5, #10
   1521c:	beq	153d8 <__assert_fail@plt+0x453c>
   15220:	add	lr, sp, #80	; 0x50
   15224:	str	r5, [sp, #80]	; 0x50
   15228:	ldm	lr!, {r0, r1, r2, r3}
   1522c:	add	ip, sp, #32
   15230:	ldr	r6, [pc, #420]	; 153dc <__assert_fail@plt+0x4540>
   15234:	stmia	ip!, {r0, r1, r2, r3}
   15238:	ldm	lr!, {r0, r1, r2, r3}
   1523c:	stmia	ip!, {r0, r1, r2, r3}
   15240:	ldm	lr, {r0, r1, r2, r3}
   15244:	stm	ip, {r0, r1, r2, r3}
   15248:	bl	10ddc <__errno_location@plt>
   1524c:	cmn	r4, #-2147483647	; 0x80000001
   15250:	ldr	r5, [r6]
   15254:	mov	r7, r0
   15258:	movne	r0, #0
   1525c:	moveq	r0, #1
   15260:	ldr	r3, [r7]
   15264:	orrs	r0, r0, r4, lsr #31
   15268:	str	r3, [sp, #24]
   1526c:	bne	153d8 <__assert_fail@plt+0x453c>
   15270:	ldr	r2, [r6, #4]
   15274:	cmp	r4, r2
   15278:	blt	152d8 <__assert_fail@plt+0x443c>
   1527c:	add	r8, r6, #8
   15280:	cmp	r5, r8
   15284:	str	r2, [sp, #80]	; 0x50
   15288:	beq	153a8 <__assert_fail@plt+0x450c>
   1528c:	mov	r3, #8
   15290:	sub	r2, r4, r2
   15294:	mov	r0, r5
   15298:	str	r3, [sp]
   1529c:	add	r2, r2, #1
   152a0:	add	r1, sp, #80	; 0x50
   152a4:	mvn	r3, #-2147483648	; 0x80000000
   152a8:	bl	17e90 <__assert_fail@plt+0x6ff4>
   152ac:	mov	r5, r0
   152b0:	str	r0, [r6]
   152b4:	ldr	r0, [r6, #4]
   152b8:	ldr	r2, [sp, #80]	; 0x50
   152bc:	mov	r1, #0
   152c0:	sub	r2, r2, r0
   152c4:	add	r0, r5, r0, lsl #3
   152c8:	lsl	r2, r2, #3
   152cc:	bl	10df4 <memset@plt>
   152d0:	ldr	r3, [sp, #80]	; 0x50
   152d4:	str	r3, [r6, #4]
   152d8:	add	fp, r5, r4, lsl #3
   152dc:	ldr	r3, [sp, #32]
   152e0:	ldr	r1, [sp, #36]	; 0x24
   152e4:	ldr	r8, [r5, r4, lsl #3]
   152e8:	ldr	r6, [fp, #4]
   152ec:	ldr	r2, [sp, #72]	; 0x48
   152f0:	ldr	ip, [sp, #76]	; 0x4c
   152f4:	orr	r1, r1, #1
   152f8:	str	r3, [sp]
   152fc:	add	r3, sp, #40	; 0x28
   15300:	str	r1, [sp, #28]
   15304:	str	r1, [sp, #4]
   15308:	str	r2, [sp, #12]
   1530c:	str	r3, [sp, #8]
   15310:	mov	r0, r6
   15314:	mov	r1, r8
   15318:	str	ip, [sp, #16]
   1531c:	mov	r3, sl
   15320:	mov	r2, r9
   15324:	bl	1305c <__assert_fail@plt+0x21c0>
   15328:	cmp	r8, r0
   1532c:	bhi	15394 <__assert_fail@plt+0x44f8>
   15330:	ldr	r3, [pc, #168]	; 153e0 <__assert_fail@plt+0x4544>
   15334:	add	r8, r0, #1
   15338:	cmp	r6, r3
   1533c:	str	r8, [r5, r4, lsl #3]
   15340:	beq	1534c <__assert_fail@plt+0x44b0>
   15344:	mov	r0, r6
   15348:	bl	129ec <__assert_fail@plt+0x1b50>
   1534c:	mov	r0, r8
   15350:	bl	17c74 <__assert_fail@plt+0x6dd8>
   15354:	add	lr, sp, #40	; 0x28
   15358:	ldr	ip, [sp, #76]	; 0x4c
   1535c:	ldr	r4, [sp, #72]	; 0x48
   15360:	ldr	r5, [sp, #28]
   15364:	mov	r3, sl
   15368:	mov	r2, r9
   1536c:	mov	r1, r8
   15370:	str	r0, [fp, #4]
   15374:	str	lr, [sp, #8]
   15378:	ldr	lr, [sp, #32]
   1537c:	str	r5, [sp, #4]
   15380:	str	ip, [sp, #16]
   15384:	str	r4, [sp, #12]
   15388:	str	lr, [sp]
   1538c:	mov	r6, r0
   15390:	bl	1305c <__assert_fail@plt+0x21c0>
   15394:	ldr	r3, [sp, #24]
   15398:	mov	r0, r6
   1539c:	str	r3, [r7]
   153a0:	add	sp, sp, #132	; 0x84
   153a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a8:	mov	r3, #8
   153ac:	sub	r2, r4, r2
   153b0:	add	r1, sp, #80	; 0x50
   153b4:	str	r3, [sp]
   153b8:	add	r2, r2, #1
   153bc:	mvn	r3, #-2147483648	; 0x80000000
   153c0:	bl	17e90 <__assert_fail@plt+0x6ff4>
   153c4:	mov	r5, r0
   153c8:	ldm	r8, {r0, r1}
   153cc:	str	r5, [r6]
   153d0:	stm	r5, {r0, r1}
   153d4:	b	152b4 <__assert_fail@plt+0x4418>
   153d8:	bl	10e84 <abort@plt>
   153dc:	andeq	sl, r2, ip, ror #1
   153e0:	andeq	sl, r2, r4, lsr #3
   153e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153e8:	sub	sp, sp, #124	; 0x7c
   153ec:	mov	r4, r0
   153f0:	mov	r9, r1
   153f4:	add	r0, sp, #72	; 0x48
   153f8:	mov	r2, #48	; 0x30
   153fc:	mov	r1, #0
   15400:	bl	10df4 <memset@plt>
   15404:	cmp	r4, #10
   15408:	beq	15594 <__assert_fail@plt+0x46f8>
   1540c:	add	lr, sp, #72	; 0x48
   15410:	str	r4, [sp, #72]	; 0x48
   15414:	ldm	lr!, {r0, r1, r2, r3}
   15418:	add	ip, sp, #24
   1541c:	ldr	r5, [pc, #372]	; 15598 <__assert_fail@plt+0x46fc>
   15420:	stmia	ip!, {r0, r1, r2, r3}
   15424:	ldm	lr!, {r0, r1, r2, r3}
   15428:	stmia	ip!, {r0, r1, r2, r3}
   1542c:	ldm	lr, {r0, r1, r2, r3}
   15430:	stm	ip, {r0, r1, r2, r3}
   15434:	bl	10ddc <__errno_location@plt>
   15438:	ldr	r2, [r5, #4]
   1543c:	ldr	r4, [r5]
   15440:	cmp	r2, #0
   15444:	mov	r7, r0
   15448:	ldr	fp, [r0]
   1544c:	bgt	154a8 <__assert_fail@plt+0x460c>
   15450:	add	r6, r5, #8
   15454:	cmp	r4, r6
   15458:	str	r2, [sp, #72]	; 0x48
   1545c:	beq	15564 <__assert_fail@plt+0x46c8>
   15460:	mov	r3, #8
   15464:	mov	r0, r4
   15468:	str	r3, [sp]
   1546c:	rsb	r2, r2, #1
   15470:	add	r1, sp, #72	; 0x48
   15474:	mvn	r3, #-2147483648	; 0x80000000
   15478:	bl	17e90 <__assert_fail@plt+0x6ff4>
   1547c:	mov	r4, r0
   15480:	str	r0, [r5]
   15484:	ldr	r0, [r5, #4]
   15488:	ldr	r2, [sp, #72]	; 0x48
   1548c:	mov	r1, #0
   15490:	sub	r2, r2, r0
   15494:	add	r0, r4, r0, lsl #3
   15498:	lsl	r2, r2, #3
   1549c:	bl	10df4 <memset@plt>
   154a0:	ldr	r3, [sp, #72]	; 0x48
   154a4:	str	r3, [r5, #4]
   154a8:	ldr	r6, [sp, #28]
   154ac:	ldr	r8, [r4]
   154b0:	ldr	r5, [r4, #4]
   154b4:	ldr	r2, [sp, #64]	; 0x40
   154b8:	ldr	r3, [sp, #24]
   154bc:	ldr	ip, [sp, #68]	; 0x44
   154c0:	orr	r6, r6, #1
   154c4:	add	sl, sp, #32
   154c8:	str	r2, [sp, #12]
   154cc:	str	r3, [sp]
   154d0:	str	r6, [sp, #4]
   154d4:	mov	r1, r8
   154d8:	mov	r0, r5
   154dc:	str	ip, [sp, #16]
   154e0:	str	sl, [sp, #8]
   154e4:	mvn	r3, #0
   154e8:	mov	r2, r9
   154ec:	bl	1305c <__assert_fail@plt+0x21c0>
   154f0:	cmp	r8, r0
   154f4:	bhi	15554 <__assert_fail@plt+0x46b8>
   154f8:	ldr	r3, [pc, #156]	; 1559c <__assert_fail@plt+0x4700>
   154fc:	add	r8, r0, #1
   15500:	cmp	r5, r3
   15504:	str	r8, [r4]
   15508:	beq	15514 <__assert_fail@plt+0x4678>
   1550c:	mov	r0, r5
   15510:	bl	129ec <__assert_fail@plt+0x1b50>
   15514:	mov	r0, r8
   15518:	bl	17c74 <__assert_fail@plt+0x6dd8>
   1551c:	ldr	lr, [sp, #68]	; 0x44
   15520:	ldr	r3, [sp, #24]
   15524:	ldr	ip, [sp, #64]	; 0x40
   15528:	mov	r2, r9
   1552c:	mov	r1, r8
   15530:	str	r0, [r4, #4]
   15534:	str	r3, [sp]
   15538:	str	sl, [sp, #8]
   1553c:	str	r6, [sp, #4]
   15540:	str	lr, [sp, #16]
   15544:	str	ip, [sp, #12]
   15548:	mvn	r3, #0
   1554c:	mov	r5, r0
   15550:	bl	1305c <__assert_fail@plt+0x21c0>
   15554:	mov	r0, r5
   15558:	str	fp, [r7]
   1555c:	add	sp, sp, #124	; 0x7c
   15560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15564:	mov	r3, #8
   15568:	add	r1, sp, #72	; 0x48
   1556c:	str	r3, [sp]
   15570:	rsb	r2, r2, #1
   15574:	mvn	r3, #-2147483648	; 0x80000000
   15578:	mov	r0, #0
   1557c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15580:	mov	r4, r0
   15584:	ldm	r6, {r0, r1}
   15588:	str	r4, [r5]
   1558c:	stm	r4, {r0, r1}
   15590:	b	15484 <__assert_fail@plt+0x45e8>
   15594:	bl	10e84 <abort@plt>
   15598:	andeq	sl, r2, ip, ror #1
   1559c:	andeq	sl, r2, r4, lsr #3
   155a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a4:	sub	sp, sp, #132	; 0x84
   155a8:	mov	r4, r0
   155ac:	mov	r9, r1
   155b0:	mov	sl, r2
   155b4:	add	r0, sp, #80	; 0x50
   155b8:	mov	r2, #48	; 0x30
   155bc:	mov	r1, #0
   155c0:	bl	10df4 <memset@plt>
   155c4:	cmp	r4, #10
   155c8:	beq	1575c <__assert_fail@plt+0x48c0>
   155cc:	add	lr, sp, #80	; 0x50
   155d0:	str	r4, [sp, #80]	; 0x50
   155d4:	ldm	lr!, {r0, r1, r2, r3}
   155d8:	add	ip, sp, #32
   155dc:	ldr	r5, [pc, #380]	; 15760 <__assert_fail@plt+0x48c4>
   155e0:	stmia	ip!, {r0, r1, r2, r3}
   155e4:	ldm	lr!, {r0, r1, r2, r3}
   155e8:	stmia	ip!, {r0, r1, r2, r3}
   155ec:	ldm	lr, {r0, r1, r2, r3}
   155f0:	stm	ip, {r0, r1, r2, r3}
   155f4:	bl	10ddc <__errno_location@plt>
   155f8:	ldr	r2, [r5, #4]
   155fc:	ldr	r4, [r5]
   15600:	cmp	r2, #0
   15604:	ldr	r3, [r0]
   15608:	mov	r7, r0
   1560c:	str	r3, [sp, #28]
   15610:	bgt	1566c <__assert_fail@plt+0x47d0>
   15614:	add	r6, r5, #8
   15618:	cmp	r4, r6
   1561c:	str	r2, [sp, #80]	; 0x50
   15620:	beq	1572c <__assert_fail@plt+0x4890>
   15624:	mov	r3, #8
   15628:	mov	r0, r4
   1562c:	str	r3, [sp]
   15630:	rsb	r2, r2, #1
   15634:	add	r1, sp, #80	; 0x50
   15638:	mvn	r3, #-2147483648	; 0x80000000
   1563c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15640:	mov	r4, r0
   15644:	str	r0, [r5]
   15648:	ldr	r0, [r5, #4]
   1564c:	ldr	r2, [sp, #80]	; 0x50
   15650:	mov	r1, #0
   15654:	sub	r2, r2, r0
   15658:	add	r0, r4, r0, lsl #3
   1565c:	lsl	r2, r2, #3
   15660:	bl	10df4 <memset@plt>
   15664:	ldr	r3, [sp, #80]	; 0x50
   15668:	str	r3, [r5, #4]
   1566c:	ldr	r6, [sp, #36]	; 0x24
   15670:	ldr	r8, [r4]
   15674:	ldr	r5, [r4, #4]
   15678:	ldr	r2, [sp, #72]	; 0x48
   1567c:	ldr	r3, [sp, #32]
   15680:	ldr	ip, [sp, #76]	; 0x4c
   15684:	orr	r6, r6, #1
   15688:	add	fp, sp, #40	; 0x28
   1568c:	str	r2, [sp, #12]
   15690:	str	r3, [sp]
   15694:	str	r6, [sp, #4]
   15698:	mov	r1, r8
   1569c:	mov	r0, r5
   156a0:	str	ip, [sp, #16]
   156a4:	str	fp, [sp, #8]
   156a8:	mov	r3, sl
   156ac:	mov	r2, r9
   156b0:	bl	1305c <__assert_fail@plt+0x21c0>
   156b4:	cmp	r8, r0
   156b8:	bhi	15718 <__assert_fail@plt+0x487c>
   156bc:	ldr	r3, [pc, #160]	; 15764 <__assert_fail@plt+0x48c8>
   156c0:	add	r8, r0, #1
   156c4:	cmp	r5, r3
   156c8:	str	r8, [r4]
   156cc:	beq	156d8 <__assert_fail@plt+0x483c>
   156d0:	mov	r0, r5
   156d4:	bl	129ec <__assert_fail@plt+0x1b50>
   156d8:	mov	r0, r8
   156dc:	bl	17c74 <__assert_fail@plt+0x6dd8>
   156e0:	ldr	ip, [sp, #76]	; 0x4c
   156e4:	ldr	lr, [sp, #32]
   156e8:	mov	r3, sl
   156ec:	mov	r2, r9
   156f0:	mov	r1, r8
   156f4:	str	r0, [r4, #4]
   156f8:	ldr	r4, [sp, #72]	; 0x48
   156fc:	str	fp, [sp, #8]
   15700:	str	r6, [sp, #4]
   15704:	str	ip, [sp, #16]
   15708:	str	r4, [sp, #12]
   1570c:	str	lr, [sp]
   15710:	mov	r5, r0
   15714:	bl	1305c <__assert_fail@plt+0x21c0>
   15718:	ldr	r3, [sp, #28]
   1571c:	mov	r0, r5
   15720:	str	r3, [r7]
   15724:	add	sp, sp, #132	; 0x84
   15728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1572c:	mov	r3, #8
   15730:	add	r1, sp, #80	; 0x50
   15734:	str	r3, [sp]
   15738:	rsb	r2, r2, #1
   1573c:	mvn	r3, #-2147483648	; 0x80000000
   15740:	mov	r0, #0
   15744:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15748:	mov	r4, r0
   1574c:	ldm	r6, {r0, r1}
   15750:	str	r4, [r5]
   15754:	stm	r4, {r0, r1}
   15758:	b	15648 <__assert_fail@plt+0x47ac>
   1575c:	bl	10e84 <abort@plt>
   15760:	andeq	sl, r2, ip, ror #1
   15764:	andeq	sl, r2, r4, lsr #3
   15768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1576c:	mov	r4, r2
   15770:	ldr	lr, [pc, #432]	; 15928 <__assert_fail@plt+0x4a8c>
   15774:	mov	sl, r0
   15778:	mov	fp, r1
   1577c:	ldm	lr!, {r0, r1, r2, r3}
   15780:	sub	sp, sp, #92	; 0x5c
   15784:	add	ip, sp, #40	; 0x28
   15788:	lsr	r7, r4, #5
   1578c:	stmia	ip!, {r0, r1, r2, r3}
   15790:	add	r6, sp, #48	; 0x30
   15794:	ldm	lr!, {r0, r1, r2, r3}
   15798:	and	r4, r4, #31
   1579c:	ldr	r5, [pc, #392]	; 1592c <__assert_fail@plt+0x4a90>
   157a0:	stmia	ip!, {r0, r1, r2, r3}
   157a4:	ldm	lr, {r0, r1, r2, r3}
   157a8:	stm	ip, {r0, r1, r2, r3}
   157ac:	ldr	r2, [r6, r7, lsl #2]
   157b0:	lsr	r3, r2, r4
   157b4:	eor	r3, r3, #1
   157b8:	and	r3, r3, #1
   157bc:	eor	r4, r2, r3, lsl r4
   157c0:	str	r4, [r6, r7, lsl #2]
   157c4:	bl	10ddc <__errno_location@plt>
   157c8:	ldr	r2, [r5, #4]
   157cc:	ldr	r4, [r5]
   157d0:	cmp	r2, #0
   157d4:	ldr	r3, [r0]
   157d8:	mov	r8, r0
   157dc:	str	r3, [sp, #28]
   157e0:	bgt	1583c <__assert_fail@plt+0x49a0>
   157e4:	add	r7, r5, #8
   157e8:	cmp	r4, r7
   157ec:	str	r2, [sp, #36]	; 0x24
   157f0:	beq	158f8 <__assert_fail@plt+0x4a5c>
   157f4:	mov	r3, #8
   157f8:	mov	r0, r4
   157fc:	str	r3, [sp]
   15800:	rsb	r2, r2, #1
   15804:	mvn	r3, #-2147483648	; 0x80000000
   15808:	add	r1, sp, #36	; 0x24
   1580c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15810:	mov	r4, r0
   15814:	str	r0, [r5]
   15818:	ldr	r0, [r5, #4]
   1581c:	ldr	r2, [sp, #36]	; 0x24
   15820:	mov	r1, #0
   15824:	sub	r2, r2, r0
   15828:	add	r0, r4, r0, lsl #3
   1582c:	lsl	r2, r2, #3
   15830:	bl	10df4 <memset@plt>
   15834:	ldr	r3, [sp, #36]	; 0x24
   15838:	str	r3, [r5, #4]
   1583c:	ldr	r7, [sp, #44]	; 0x2c
   15840:	ldr	r9, [r4]
   15844:	ldr	r5, [r4, #4]
   15848:	ldr	r2, [sp, #80]	; 0x50
   1584c:	ldr	r3, [sp, #40]	; 0x28
   15850:	ldr	ip, [sp, #84]	; 0x54
   15854:	orr	r7, r7, #1
   15858:	str	r2, [sp, #12]
   1585c:	str	r3, [sp]
   15860:	str	r7, [sp, #4]
   15864:	str	r6, [sp, #8]
   15868:	mov	r1, r9
   1586c:	mov	r0, r5
   15870:	str	ip, [sp, #16]
   15874:	mov	r3, fp
   15878:	mov	r2, sl
   1587c:	bl	1305c <__assert_fail@plt+0x21c0>
   15880:	cmp	r9, r0
   15884:	bhi	158e4 <__assert_fail@plt+0x4a48>
   15888:	ldr	r3, [pc, #160]	; 15930 <__assert_fail@plt+0x4a94>
   1588c:	add	r9, r0, #1
   15890:	cmp	r5, r3
   15894:	str	r9, [r4]
   15898:	beq	158a4 <__assert_fail@plt+0x4a08>
   1589c:	mov	r0, r5
   158a0:	bl	129ec <__assert_fail@plt+0x1b50>
   158a4:	mov	r0, r9
   158a8:	bl	17c74 <__assert_fail@plt+0x6dd8>
   158ac:	ldr	ip, [sp, #84]	; 0x54
   158b0:	ldr	lr, [sp, #40]	; 0x28
   158b4:	mov	r3, fp
   158b8:	mov	r2, sl
   158bc:	mov	r1, r9
   158c0:	str	r0, [r4, #4]
   158c4:	ldr	r4, [sp, #80]	; 0x50
   158c8:	str	r6, [sp, #8]
   158cc:	str	r7, [sp, #4]
   158d0:	str	ip, [sp, #16]
   158d4:	str	r4, [sp, #12]
   158d8:	str	lr, [sp]
   158dc:	mov	r5, r0
   158e0:	bl	1305c <__assert_fail@plt+0x21c0>
   158e4:	ldr	r3, [sp, #28]
   158e8:	mov	r0, r5
   158ec:	str	r3, [r8]
   158f0:	add	sp, sp, #92	; 0x5c
   158f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f8:	mov	r3, #8
   158fc:	str	r3, [sp]
   15900:	add	r1, sp, #36	; 0x24
   15904:	rsb	r2, r2, #1
   15908:	mvn	r3, #-2147483648	; 0x80000000
   1590c:	mov	r0, #0
   15910:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15914:	mov	r4, r0
   15918:	ldm	r7, {r0, r1}
   1591c:	str	r4, [r5]
   15920:	stm	r4, {r0, r1}
   15924:	b	15818 <__assert_fail@plt+0x497c>
   15928:	andeq	sl, r2, r4, ror r1
   1592c:	andeq	sl, r2, ip, ror #1
   15930:	andeq	sl, r2, r4, lsr #3
   15934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15938:	mov	r4, r1
   1593c:	ldr	lr, [pc, #420]	; 15ae8 <__assert_fail@plt+0x4c4c>
   15940:	mov	r6, r0
   15944:	sub	sp, sp, #84	; 0x54
   15948:	ldm	lr!, {r0, r1, r2, r3}
   1594c:	add	ip, sp, #32
   15950:	lsr	r8, r4, #5
   15954:	add	r5, sp, #40	; 0x28
   15958:	stmia	ip!, {r0, r1, r2, r3}
   1595c:	and	r4, r4, #31
   15960:	ldm	lr!, {r0, r1, r2, r3}
   15964:	ldr	r7, [pc, #384]	; 15aec <__assert_fail@plt+0x4c50>
   15968:	stmia	ip!, {r0, r1, r2, r3}
   1596c:	ldm	lr, {r0, r1, r2, r3}
   15970:	stm	ip, {r0, r1, r2, r3}
   15974:	ldr	r2, [r5, r8, lsl #2]
   15978:	lsr	r3, r2, r4
   1597c:	eor	r3, r3, #1
   15980:	and	r3, r3, #1
   15984:	eor	r4, r2, r3, lsl r4
   15988:	str	r4, [r5, r8, lsl #2]
   1598c:	bl	10ddc <__errno_location@plt>
   15990:	ldr	r2, [r7, #4]
   15994:	ldr	r4, [r7]
   15998:	cmp	r2, #0
   1599c:	mov	r9, r0
   159a0:	ldr	sl, [r0]
   159a4:	bgt	15a00 <__assert_fail@plt+0x4b64>
   159a8:	add	r8, r7, #8
   159ac:	cmp	r4, r8
   159b0:	str	r2, [sp, #28]
   159b4:	beq	15ab8 <__assert_fail@plt+0x4c1c>
   159b8:	mov	r3, #8
   159bc:	mov	r0, r4
   159c0:	str	r3, [sp]
   159c4:	rsb	r2, r2, #1
   159c8:	mvn	r3, #-2147483648	; 0x80000000
   159cc:	add	r1, sp, #28
   159d0:	bl	17e90 <__assert_fail@plt+0x6ff4>
   159d4:	mov	r4, r0
   159d8:	str	r0, [r7]
   159dc:	ldr	r0, [r7, #4]
   159e0:	ldr	r2, [sp, #28]
   159e4:	mov	r1, #0
   159e8:	sub	r2, r2, r0
   159ec:	add	r0, r4, r0, lsl #3
   159f0:	lsl	r2, r2, #3
   159f4:	bl	10df4 <memset@plt>
   159f8:	ldr	r3, [sp, #28]
   159fc:	str	r3, [r7, #4]
   15a00:	ldr	r8, [sp, #36]	; 0x24
   15a04:	ldr	fp, [r4]
   15a08:	ldr	r7, [r4, #4]
   15a0c:	ldr	r2, [sp, #72]	; 0x48
   15a10:	ldr	r3, [sp, #32]
   15a14:	ldr	ip, [sp, #76]	; 0x4c
   15a18:	orr	r8, r8, #1
   15a1c:	str	r2, [sp, #12]
   15a20:	str	r3, [sp]
   15a24:	str	r8, [sp, #4]
   15a28:	str	r5, [sp, #8]
   15a2c:	mov	r1, fp
   15a30:	mov	r0, r7
   15a34:	str	ip, [sp, #16]
   15a38:	mvn	r3, #0
   15a3c:	mov	r2, r6
   15a40:	bl	1305c <__assert_fail@plt+0x21c0>
   15a44:	cmp	fp, r0
   15a48:	bhi	15aa8 <__assert_fail@plt+0x4c0c>
   15a4c:	ldr	r3, [pc, #156]	; 15af0 <__assert_fail@plt+0x4c54>
   15a50:	add	fp, r0, #1
   15a54:	cmp	r7, r3
   15a58:	str	fp, [r4]
   15a5c:	beq	15a68 <__assert_fail@plt+0x4bcc>
   15a60:	mov	r0, r7
   15a64:	bl	129ec <__assert_fail@plt+0x1b50>
   15a68:	mov	r0, fp
   15a6c:	bl	17c74 <__assert_fail@plt+0x6dd8>
   15a70:	ldr	lr, [sp, #76]	; 0x4c
   15a74:	ldr	r3, [sp, #32]
   15a78:	ldr	ip, [sp, #72]	; 0x48
   15a7c:	mov	r2, r6
   15a80:	mov	r1, fp
   15a84:	str	r0, [r4, #4]
   15a88:	str	r3, [sp]
   15a8c:	str	r5, [sp, #8]
   15a90:	str	r8, [sp, #4]
   15a94:	str	lr, [sp, #16]
   15a98:	str	ip, [sp, #12]
   15a9c:	mvn	r3, #0
   15aa0:	mov	r7, r0
   15aa4:	bl	1305c <__assert_fail@plt+0x21c0>
   15aa8:	mov	r0, r7
   15aac:	str	sl, [r9]
   15ab0:	add	sp, sp, #84	; 0x54
   15ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab8:	mov	r3, #8
   15abc:	str	r3, [sp]
   15ac0:	add	r1, sp, #28
   15ac4:	rsb	r2, r2, #1
   15ac8:	mvn	r3, #-2147483648	; 0x80000000
   15acc:	mov	r0, #0
   15ad0:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15ad4:	mov	r4, r0
   15ad8:	ldm	r8, {r0, r1}
   15adc:	str	r4, [r7]
   15ae0:	stm	r4, {r0, r1}
   15ae4:	b	159dc <__assert_fail@plt+0x4b40>
   15ae8:	andeq	sl, r2, r4, ror r1
   15aec:	andeq	sl, r2, ip, ror #1
   15af0:	andeq	sl, r2, r4, lsr #3
   15af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af8:	mov	r6, r0
   15afc:	ldr	lr, [pc, #404]	; 15c98 <__assert_fail@plt+0x4dfc>
   15b00:	sub	sp, sp, #84	; 0x54
   15b04:	add	ip, sp, #32
   15b08:	ldm	lr!, {r0, r1, r2, r3}
   15b0c:	ldr	r5, [pc, #392]	; 15c9c <__assert_fail@plt+0x4e00>
   15b10:	stmia	ip!, {r0, r1, r2, r3}
   15b14:	ldm	lr!, {r0, r1, r2, r3}
   15b18:	ldr	r4, [sp, #44]	; 0x2c
   15b1c:	stmia	ip!, {r0, r1, r2, r3}
   15b20:	ldm	lr, {r0, r1, r2, r3}
   15b24:	mvn	lr, r4
   15b28:	and	lr, lr, #67108864	; 0x4000000
   15b2c:	eor	lr, lr, r4
   15b30:	stm	ip, {r0, r1, r2, r3}
   15b34:	str	lr, [sp, #44]	; 0x2c
   15b38:	bl	10ddc <__errno_location@plt>
   15b3c:	ldr	r2, [r5, #4]
   15b40:	ldr	r4, [r5]
   15b44:	cmp	r2, #0
   15b48:	mov	r8, r0
   15b4c:	ldr	sl, [r0]
   15b50:	bgt	15bac <__assert_fail@plt+0x4d10>
   15b54:	add	r7, r5, #8
   15b58:	cmp	r4, r7
   15b5c:	str	r2, [sp, #28]
   15b60:	beq	15c68 <__assert_fail@plt+0x4dcc>
   15b64:	mov	r3, #8
   15b68:	mov	r0, r4
   15b6c:	str	r3, [sp]
   15b70:	rsb	r2, r2, #1
   15b74:	mvn	r3, #-2147483648	; 0x80000000
   15b78:	add	r1, sp, #28
   15b7c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15b80:	mov	r4, r0
   15b84:	str	r0, [r5]
   15b88:	ldr	r0, [r5, #4]
   15b8c:	ldr	r2, [sp, #28]
   15b90:	mov	r1, #0
   15b94:	sub	r2, r2, r0
   15b98:	add	r0, r4, r0, lsl #3
   15b9c:	lsl	r2, r2, #3
   15ba0:	bl	10df4 <memset@plt>
   15ba4:	ldr	r3, [sp, #28]
   15ba8:	str	r3, [r5, #4]
   15bac:	ldr	r7, [sp, #36]	; 0x24
   15bb0:	ldr	r9, [r4]
   15bb4:	ldr	r5, [r4, #4]
   15bb8:	ldr	r2, [sp, #72]	; 0x48
   15bbc:	ldr	r3, [sp, #32]
   15bc0:	ldr	ip, [sp, #76]	; 0x4c
   15bc4:	orr	r7, r7, #1
   15bc8:	add	fp, sp, #40	; 0x28
   15bcc:	str	r2, [sp, #12]
   15bd0:	str	r3, [sp]
   15bd4:	str	r7, [sp, #4]
   15bd8:	mov	r1, r9
   15bdc:	mov	r0, r5
   15be0:	str	ip, [sp, #16]
   15be4:	str	fp, [sp, #8]
   15be8:	mvn	r3, #0
   15bec:	mov	r2, r6
   15bf0:	bl	1305c <__assert_fail@plt+0x21c0>
   15bf4:	cmp	r9, r0
   15bf8:	bhi	15c58 <__assert_fail@plt+0x4dbc>
   15bfc:	ldr	r3, [pc, #156]	; 15ca0 <__assert_fail@plt+0x4e04>
   15c00:	add	r9, r0, #1
   15c04:	cmp	r5, r3
   15c08:	str	r9, [r4]
   15c0c:	beq	15c18 <__assert_fail@plt+0x4d7c>
   15c10:	mov	r0, r5
   15c14:	bl	129ec <__assert_fail@plt+0x1b50>
   15c18:	mov	r0, r9
   15c1c:	bl	17c74 <__assert_fail@plt+0x6dd8>
   15c20:	ldr	lr, [sp, #76]	; 0x4c
   15c24:	ldr	r3, [sp, #32]
   15c28:	ldr	ip, [sp, #72]	; 0x48
   15c2c:	mov	r2, r6
   15c30:	mov	r1, r9
   15c34:	str	r0, [r4, #4]
   15c38:	str	r3, [sp]
   15c3c:	str	fp, [sp, #8]
   15c40:	str	r7, [sp, #4]
   15c44:	str	lr, [sp, #16]
   15c48:	str	ip, [sp, #12]
   15c4c:	mvn	r3, #0
   15c50:	mov	r5, r0
   15c54:	bl	1305c <__assert_fail@plt+0x21c0>
   15c58:	mov	r0, r5
   15c5c:	str	sl, [r8]
   15c60:	add	sp, sp, #84	; 0x54
   15c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c68:	mov	r3, #8
   15c6c:	str	r3, [sp]
   15c70:	add	r1, sp, #28
   15c74:	rsb	r2, r2, #1
   15c78:	mvn	r3, #-2147483648	; 0x80000000
   15c7c:	mov	r0, #0
   15c80:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15c84:	mov	r4, r0
   15c88:	ldm	r7, {r0, r1}
   15c8c:	str	r4, [r5]
   15c90:	stm	r4, {r0, r1}
   15c94:	b	15b88 <__assert_fail@plt+0x4cec>
   15c98:	andeq	sl, r2, r4, ror r1
   15c9c:	andeq	sl, r2, ip, ror #1
   15ca0:	andeq	sl, r2, r4, lsr #3
   15ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ca8:	mov	r9, r0
   15cac:	ldr	lr, [pc, #416]	; 15e54 <__assert_fail@plt+0x4fb8>
   15cb0:	mov	sl, r1
   15cb4:	sub	sp, sp, #92	; 0x5c
   15cb8:	ldm	lr!, {r0, r1, r2, r3}
   15cbc:	add	ip, sp, #40	; 0x28
   15cc0:	ldr	r5, [pc, #400]	; 15e58 <__assert_fail@plt+0x4fbc>
   15cc4:	stmia	ip!, {r0, r1, r2, r3}
   15cc8:	ldm	lr!, {r0, r1, r2, r3}
   15ccc:	ldr	r4, [sp, #52]	; 0x34
   15cd0:	stmia	ip!, {r0, r1, r2, r3}
   15cd4:	ldm	lr, {r0, r1, r2, r3}
   15cd8:	mvn	lr, r4
   15cdc:	and	lr, lr, #67108864	; 0x4000000
   15ce0:	eor	lr, lr, r4
   15ce4:	stm	ip, {r0, r1, r2, r3}
   15ce8:	str	lr, [sp, #52]	; 0x34
   15cec:	bl	10ddc <__errno_location@plt>
   15cf0:	ldr	r2, [r5, #4]
   15cf4:	ldr	r4, [r5]
   15cf8:	cmp	r2, #0
   15cfc:	ldr	r3, [r0]
   15d00:	mov	r7, r0
   15d04:	str	r3, [sp, #28]
   15d08:	bgt	15d64 <__assert_fail@plt+0x4ec8>
   15d0c:	add	r6, r5, #8
   15d10:	cmp	r4, r6
   15d14:	str	r2, [sp, #36]	; 0x24
   15d18:	beq	15e24 <__assert_fail@plt+0x4f88>
   15d1c:	mov	r3, #8
   15d20:	mov	r0, r4
   15d24:	str	r3, [sp]
   15d28:	rsb	r2, r2, #1
   15d2c:	mvn	r3, #-2147483648	; 0x80000000
   15d30:	add	r1, sp, #36	; 0x24
   15d34:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15d38:	mov	r4, r0
   15d3c:	str	r0, [r5]
   15d40:	ldr	r0, [r5, #4]
   15d44:	ldr	r2, [sp, #36]	; 0x24
   15d48:	mov	r1, #0
   15d4c:	sub	r2, r2, r0
   15d50:	add	r0, r4, r0, lsl #3
   15d54:	lsl	r2, r2, #3
   15d58:	bl	10df4 <memset@plt>
   15d5c:	ldr	r3, [sp, #36]	; 0x24
   15d60:	str	r3, [r5, #4]
   15d64:	ldr	r6, [sp, #44]	; 0x2c
   15d68:	ldr	r8, [r4]
   15d6c:	ldr	r5, [r4, #4]
   15d70:	ldr	r2, [sp, #80]	; 0x50
   15d74:	ldr	r3, [sp, #40]	; 0x28
   15d78:	ldr	ip, [sp, #84]	; 0x54
   15d7c:	orr	r6, r6, #1
   15d80:	add	fp, sp, #48	; 0x30
   15d84:	str	r2, [sp, #12]
   15d88:	str	r3, [sp]
   15d8c:	str	r6, [sp, #4]
   15d90:	mov	r1, r8
   15d94:	mov	r0, r5
   15d98:	str	ip, [sp, #16]
   15d9c:	str	fp, [sp, #8]
   15da0:	mov	r3, sl
   15da4:	mov	r2, r9
   15da8:	bl	1305c <__assert_fail@plt+0x21c0>
   15dac:	cmp	r8, r0
   15db0:	bhi	15e10 <__assert_fail@plt+0x4f74>
   15db4:	ldr	r3, [pc, #160]	; 15e5c <__assert_fail@plt+0x4fc0>
   15db8:	add	r8, r0, #1
   15dbc:	cmp	r5, r3
   15dc0:	str	r8, [r4]
   15dc4:	beq	15dd0 <__assert_fail@plt+0x4f34>
   15dc8:	mov	r0, r5
   15dcc:	bl	129ec <__assert_fail@plt+0x1b50>
   15dd0:	mov	r0, r8
   15dd4:	bl	17c74 <__assert_fail@plt+0x6dd8>
   15dd8:	ldr	ip, [sp, #84]	; 0x54
   15ddc:	ldr	lr, [sp, #40]	; 0x28
   15de0:	mov	r3, sl
   15de4:	mov	r2, r9
   15de8:	mov	r1, r8
   15dec:	str	r0, [r4, #4]
   15df0:	ldr	r4, [sp, #80]	; 0x50
   15df4:	str	fp, [sp, #8]
   15df8:	str	r6, [sp, #4]
   15dfc:	str	ip, [sp, #16]
   15e00:	str	r4, [sp, #12]
   15e04:	str	lr, [sp]
   15e08:	mov	r5, r0
   15e0c:	bl	1305c <__assert_fail@plt+0x21c0>
   15e10:	ldr	r3, [sp, #28]
   15e14:	mov	r0, r5
   15e18:	str	r3, [r7]
   15e1c:	add	sp, sp, #92	; 0x5c
   15e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e24:	mov	r3, #8
   15e28:	str	r3, [sp]
   15e2c:	add	r1, sp, #36	; 0x24
   15e30:	rsb	r2, r2, #1
   15e34:	mvn	r3, #-2147483648	; 0x80000000
   15e38:	mov	r0, #0
   15e3c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15e40:	mov	r4, r0
   15e44:	ldm	r6, {r0, r1}
   15e48:	str	r4, [r5]
   15e4c:	stm	r4, {r0, r1}
   15e50:	b	15d40 <__assert_fail@plt+0x4ea4>
   15e54:	andeq	sl, r2, r4, ror r1
   15e58:	andeq	sl, r2, ip, ror #1
   15e5c:	andeq	sl, r2, r4, lsr #3
   15e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e64:	sub	sp, sp, #180	; 0xb4
   15e68:	mov	r6, r1
   15e6c:	mov	r4, r0
   15e70:	mov	r9, r2
   15e74:	add	r0, sp, #80	; 0x50
   15e78:	mov	r2, #48	; 0x30
   15e7c:	mov	r1, #0
   15e80:	bl	10df4 <memset@plt>
   15e84:	cmp	r6, #10
   15e88:	beq	16068 <__assert_fail@plt+0x51cc>
   15e8c:	add	r5, sp, #80	; 0x50
   15e90:	str	r6, [sp, #80]	; 0x50
   15e94:	ldm	r5!, {r0, r1, r2, r3}
   15e98:	add	ip, sp, #128	; 0x80
   15e9c:	mov	r7, ip
   15ea0:	add	lr, sp, #32
   15ea4:	stmia	ip!, {r0, r1, r2, r3}
   15ea8:	mov	r8, #67108864	; 0x4000000
   15eac:	ldm	r5!, {r0, r1, r2, r3}
   15eb0:	ldr	r6, [pc, #436]	; 1606c <__assert_fail@plt+0x51d0>
   15eb4:	stmia	ip!, {r0, r1, r2, r3}
   15eb8:	ldm	r5, {r0, r1, r2, r3}
   15ebc:	stm	ip, {r0, r1, r2, r3}
   15ec0:	ldm	r7!, {r0, r1, r2, r3}
   15ec4:	stmia	lr!, {r0, r1, r2, r3}
   15ec8:	ldm	r7!, {r0, r1, r2, r3}
   15ecc:	str	r8, [sp, #44]	; 0x2c
   15ed0:	stmia	lr!, {r0, r1, r2, r3}
   15ed4:	ldm	ip, {r0, r1, r2, r3}
   15ed8:	stm	lr, {r0, r1, r2, r3}
   15edc:	bl	10ddc <__errno_location@plt>
   15ee0:	cmn	r4, #-2147483647	; 0x80000001
   15ee4:	ldr	r5, [r6]
   15ee8:	mov	r7, r0
   15eec:	movne	r0, #0
   15ef0:	moveq	r0, #1
   15ef4:	ldr	r3, [r7]
   15ef8:	orrs	r0, r0, r4, lsr #31
   15efc:	str	r3, [sp, #24]
   15f00:	bne	16068 <__assert_fail@plt+0x51cc>
   15f04:	ldr	r2, [r6, #4]
   15f08:	cmp	r4, r2
   15f0c:	blt	15f6c <__assert_fail@plt+0x50d0>
   15f10:	add	r8, r6, #8
   15f14:	cmp	r5, r8
   15f18:	str	r2, [sp, #80]	; 0x50
   15f1c:	beq	16038 <__assert_fail@plt+0x519c>
   15f20:	mov	r3, #8
   15f24:	sub	r2, r4, r2
   15f28:	mov	r0, r5
   15f2c:	str	r3, [sp]
   15f30:	add	r2, r2, #1
   15f34:	add	r1, sp, #80	; 0x50
   15f38:	mvn	r3, #-2147483648	; 0x80000000
   15f3c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   15f40:	mov	r5, r0
   15f44:	str	r0, [r6]
   15f48:	ldr	r0, [r6, #4]
   15f4c:	ldr	r2, [sp, #80]	; 0x50
   15f50:	mov	r1, #0
   15f54:	sub	r2, r2, r0
   15f58:	add	r0, r5, r0, lsl #3
   15f5c:	lsl	r2, r2, #3
   15f60:	bl	10df4 <memset@plt>
   15f64:	ldr	r3, [sp, #80]	; 0x50
   15f68:	str	r3, [r6, #4]
   15f6c:	add	fp, r5, r4, lsl #3
   15f70:	ldr	r1, [sp, #36]	; 0x24
   15f74:	ldr	r8, [r5, r4, lsl #3]
   15f78:	ldr	r6, [fp, #4]
   15f7c:	ldr	r2, [sp, #72]	; 0x48
   15f80:	ldr	r3, [sp, #32]
   15f84:	ldr	ip, [sp, #76]	; 0x4c
   15f88:	orr	r1, r1, #1
   15f8c:	add	sl, sp, #40	; 0x28
   15f90:	str	r1, [sp, #28]
   15f94:	str	r1, [sp, #4]
   15f98:	str	r2, [sp, #12]
   15f9c:	str	r3, [sp]
   15fa0:	mov	r0, r6
   15fa4:	mov	r1, r8
   15fa8:	str	ip, [sp, #16]
   15fac:	str	sl, [sp, #8]
   15fb0:	mvn	r3, #0
   15fb4:	mov	r2, r9
   15fb8:	bl	1305c <__assert_fail@plt+0x21c0>
   15fbc:	cmp	r8, r0
   15fc0:	bhi	16024 <__assert_fail@plt+0x5188>
   15fc4:	ldr	r3, [pc, #164]	; 16070 <__assert_fail@plt+0x51d4>
   15fc8:	add	r8, r0, #1
   15fcc:	cmp	r6, r3
   15fd0:	str	r8, [r5, r4, lsl #3]
   15fd4:	beq	15fe0 <__assert_fail@plt+0x5144>
   15fd8:	mov	r0, r6
   15fdc:	bl	129ec <__assert_fail@plt+0x1b50>
   15fe0:	mov	r0, r8
   15fe4:	bl	17c74 <__assert_fail@plt+0x6dd8>
   15fe8:	ldr	lr, [sp, #76]	; 0x4c
   15fec:	ldr	r3, [sp, #32]
   15ff0:	ldr	ip, [sp, #72]	; 0x48
   15ff4:	ldr	r4, [sp, #28]
   15ff8:	mov	r2, r9
   15ffc:	mov	r1, r8
   16000:	str	r0, [fp, #4]
   16004:	str	r3, [sp]
   16008:	str	sl, [sp, #8]
   1600c:	str	r4, [sp, #4]
   16010:	str	lr, [sp, #16]
   16014:	str	ip, [sp, #12]
   16018:	mvn	r3, #0
   1601c:	mov	r6, r0
   16020:	bl	1305c <__assert_fail@plt+0x21c0>
   16024:	ldr	r3, [sp, #24]
   16028:	mov	r0, r6
   1602c:	str	r3, [r7]
   16030:	add	sp, sp, #180	; 0xb4
   16034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16038:	mov	r3, #8
   1603c:	sub	r2, r4, r2
   16040:	add	r1, sp, #80	; 0x50
   16044:	str	r3, [sp]
   16048:	add	r2, r2, #1
   1604c:	mvn	r3, #-2147483648	; 0x80000000
   16050:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16054:	mov	r5, r0
   16058:	ldm	r8, {r0, r1}
   1605c:	str	r5, [r6]
   16060:	stm	r5, {r0, r1}
   16064:	b	15f48 <__assert_fail@plt+0x50ac>
   16068:	bl	10e84 <abort@plt>
   1606c:	andeq	sl, r2, ip, ror #1
   16070:	andeq	sl, r2, r4, lsr #3
   16074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16078:	mov	r7, r1
   1607c:	ldr	lr, [pc, #492]	; 16270 <__assert_fail@plt+0x53d4>
   16080:	mov	r8, r2
   16084:	mov	r4, r0
   16088:	mov	fp, r3
   1608c:	ldm	lr!, {r0, r1, r2, r3}
   16090:	sub	sp, sp, #100	; 0x64
   16094:	add	ip, sp, #48	; 0x30
   16098:	mov	sl, #10
   1609c:	stmia	ip!, {r0, r1, r2, r3}
   160a0:	cmp	r8, #0
   160a4:	cmpne	r7, #0
   160a8:	ldm	lr!, {r0, r1, r2, r3}
   160ac:	str	sl, [sp, #48]	; 0x30
   160b0:	stmia	ip!, {r0, r1, r2, r3}
   160b4:	ldm	lr, {r0, r1, r2, r3}
   160b8:	stm	ip, {r0, r1, r2, r3}
   160bc:	beq	1626c <__assert_fail@plt+0x53d0>
   160c0:	str	r7, [sp, #88]	; 0x58
   160c4:	str	r8, [sp, #92]	; 0x5c
   160c8:	bl	10ddc <__errno_location@plt>
   160cc:	ldr	r6, [pc, #416]	; 16274 <__assert_fail@plt+0x53d8>
   160d0:	cmn	r4, #-2147483647	; 0x80000001
   160d4:	ldr	r5, [r6]
   160d8:	mov	r9, r0
   160dc:	movne	r0, #0
   160e0:	moveq	r0, #1
   160e4:	ldr	r3, [r9]
   160e8:	orrs	r0, r0, r4, lsr #31
   160ec:	str	r3, [sp, #28]
   160f0:	bne	1626c <__assert_fail@plt+0x53d0>
   160f4:	ldr	r2, [r6, #4]
   160f8:	cmp	r4, r2
   160fc:	movlt	r3, sl
   16100:	blt	1616c <__assert_fail@plt+0x52d0>
   16104:	add	r7, r6, #8
   16108:	cmp	r5, r7
   1610c:	str	r2, [sp, #44]	; 0x2c
   16110:	beq	1623c <__assert_fail@plt+0x53a0>
   16114:	mov	r3, #8
   16118:	sub	r2, r4, r2
   1611c:	mov	r0, r5
   16120:	str	r3, [sp]
   16124:	add	r2, r2, #1
   16128:	mvn	r3, #-2147483648	; 0x80000000
   1612c:	add	r1, sp, #44	; 0x2c
   16130:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16134:	mov	r5, r0
   16138:	str	r0, [r6]
   1613c:	ldr	r0, [r6, #4]
   16140:	ldr	r2, [sp, #44]	; 0x2c
   16144:	mov	r1, #0
   16148:	sub	r2, r2, r0
   1614c:	add	r0, r5, r0, lsl #3
   16150:	lsl	r2, r2, #3
   16154:	bl	10df4 <memset@plt>
   16158:	ldr	r3, [sp, #48]	; 0x30
   1615c:	ldr	r7, [sp, #88]	; 0x58
   16160:	ldr	r8, [sp, #92]	; 0x5c
   16164:	ldr	r2, [sp, #44]	; 0x2c
   16168:	str	r2, [r6, #4]
   1616c:	add	r2, r5, r4, lsl #3
   16170:	mov	r1, r2
   16174:	str	r2, [sp, #32]
   16178:	ldr	r2, [sp, #52]	; 0x34
   1617c:	ldr	r6, [r1, #4]
   16180:	ldr	sl, [r5, r4, lsl #3]
   16184:	orr	r2, r2, #1
   16188:	str	r3, [sp]
   1618c:	add	r3, sp, #56	; 0x38
   16190:	str	r2, [sp, #36]	; 0x24
   16194:	str	r2, [sp, #4]
   16198:	str	r3, [sp, #8]
   1619c:	mov	r0, r6
   161a0:	str	r8, [sp, #16]
   161a4:	str	r7, [sp, #12]
   161a8:	mov	r1, sl
   161ac:	mvn	r3, #0
   161b0:	mov	r2, fp
   161b4:	bl	1305c <__assert_fail@plt+0x21c0>
   161b8:	cmp	sl, r0
   161bc:	bhi	16228 <__assert_fail@plt+0x538c>
   161c0:	ldr	r3, [pc, #176]	; 16278 <__assert_fail@plt+0x53dc>
   161c4:	add	r7, r0, #1
   161c8:	cmp	r6, r3
   161cc:	str	r7, [r5, r4, lsl #3]
   161d0:	beq	161dc <__assert_fail@plt+0x5340>
   161d4:	mov	r0, r6
   161d8:	bl	129ec <__assert_fail@plt+0x1b50>
   161dc:	mov	r0, r7
   161e0:	bl	17c74 <__assert_fail@plt+0x6dd8>
   161e4:	ldr	r3, [sp, #32]
   161e8:	ldr	lr, [sp, #92]	; 0x5c
   161ec:	ldr	ip, [sp, #88]	; 0x58
   161f0:	ldr	r4, [sp, #36]	; 0x24
   161f4:	mov	r2, fp
   161f8:	mov	r1, r7
   161fc:	str	r0, [r3, #4]
   16200:	add	r3, sp, #56	; 0x38
   16204:	str	r3, [sp, #8]
   16208:	ldr	r3, [sp, #48]	; 0x30
   1620c:	str	r4, [sp, #4]
   16210:	str	r3, [sp]
   16214:	str	lr, [sp, #16]
   16218:	str	ip, [sp, #12]
   1621c:	mvn	r3, #0
   16220:	mov	r6, r0
   16224:	bl	1305c <__assert_fail@plt+0x21c0>
   16228:	ldr	r3, [sp, #28]
   1622c:	mov	r0, r6
   16230:	str	r3, [r9]
   16234:	add	sp, sp, #100	; 0x64
   16238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1623c:	mov	r3, #8
   16240:	sub	r2, r4, r2
   16244:	str	r3, [sp]
   16248:	add	r1, sp, #44	; 0x2c
   1624c:	add	r2, r2, #1
   16250:	mvn	r3, #-2147483648	; 0x80000000
   16254:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16258:	mov	r5, r0
   1625c:	ldm	r7, {r0, r1}
   16260:	str	r5, [r6]
   16264:	stm	r5, {r0, r1}
   16268:	b	1613c <__assert_fail@plt+0x52a0>
   1626c:	bl	10e84 <abort@plt>
   16270:	andeq	sl, r2, r4, ror r1
   16274:	andeq	sl, r2, ip, ror #1
   16278:	andeq	sl, r2, r4, lsr #3
   1627c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16280:	mov	r7, r1
   16284:	ldr	lr, [pc, #492]	; 16478 <__assert_fail@plt+0x55dc>
   16288:	mov	r8, r2
   1628c:	mov	r4, r0
   16290:	mov	fp, r3
   16294:	ldm	lr!, {r0, r1, r2, r3}
   16298:	sub	sp, sp, #100	; 0x64
   1629c:	add	ip, sp, #48	; 0x30
   162a0:	mov	sl, #10
   162a4:	stmia	ip!, {r0, r1, r2, r3}
   162a8:	cmp	r8, #0
   162ac:	cmpne	r7, #0
   162b0:	ldm	lr!, {r0, r1, r2, r3}
   162b4:	str	sl, [sp, #48]	; 0x30
   162b8:	stmia	ip!, {r0, r1, r2, r3}
   162bc:	ldm	lr, {r0, r1, r2, r3}
   162c0:	stm	ip, {r0, r1, r2, r3}
   162c4:	beq	16474 <__assert_fail@plt+0x55d8>
   162c8:	str	r7, [sp, #88]	; 0x58
   162cc:	str	r8, [sp, #92]	; 0x5c
   162d0:	bl	10ddc <__errno_location@plt>
   162d4:	ldr	r6, [pc, #416]	; 1647c <__assert_fail@plt+0x55e0>
   162d8:	cmn	r4, #-2147483647	; 0x80000001
   162dc:	ldr	r5, [r6]
   162e0:	mov	r9, r0
   162e4:	movne	r0, #0
   162e8:	moveq	r0, #1
   162ec:	ldr	r3, [r9]
   162f0:	orrs	r0, r0, r4, lsr #31
   162f4:	str	r3, [sp, #28]
   162f8:	bne	16474 <__assert_fail@plt+0x55d8>
   162fc:	ldr	r2, [r6, #4]
   16300:	cmp	r4, r2
   16304:	movlt	r3, sl
   16308:	blt	16374 <__assert_fail@plt+0x54d8>
   1630c:	add	r7, r6, #8
   16310:	cmp	r5, r7
   16314:	str	r2, [sp, #44]	; 0x2c
   16318:	beq	16444 <__assert_fail@plt+0x55a8>
   1631c:	mov	r3, #8
   16320:	sub	r2, r4, r2
   16324:	mov	r0, r5
   16328:	str	r3, [sp]
   1632c:	add	r2, r2, #1
   16330:	mvn	r3, #-2147483648	; 0x80000000
   16334:	add	r1, sp, #44	; 0x2c
   16338:	bl	17e90 <__assert_fail@plt+0x6ff4>
   1633c:	mov	r5, r0
   16340:	str	r0, [r6]
   16344:	ldr	r0, [r6, #4]
   16348:	ldr	r2, [sp, #44]	; 0x2c
   1634c:	mov	r1, #0
   16350:	sub	r2, r2, r0
   16354:	add	r0, r5, r0, lsl #3
   16358:	lsl	r2, r2, #3
   1635c:	bl	10df4 <memset@plt>
   16360:	ldr	r3, [sp, #48]	; 0x30
   16364:	ldr	r7, [sp, #88]	; 0x58
   16368:	ldr	r8, [sp, #92]	; 0x5c
   1636c:	ldr	r2, [sp, #44]	; 0x2c
   16370:	str	r2, [r6, #4]
   16374:	add	r2, r5, r4, lsl #3
   16378:	mov	r1, r2
   1637c:	str	r2, [sp, #32]
   16380:	ldr	r2, [sp, #52]	; 0x34
   16384:	ldr	r6, [r1, #4]
   16388:	ldr	sl, [r5, r4, lsl #3]
   1638c:	orr	r2, r2, #1
   16390:	str	r3, [sp]
   16394:	add	r3, sp, #56	; 0x38
   16398:	str	r2, [sp, #36]	; 0x24
   1639c:	str	r2, [sp, #4]
   163a0:	str	r3, [sp, #8]
   163a4:	mov	r0, r6
   163a8:	str	r8, [sp, #16]
   163ac:	str	r7, [sp, #12]
   163b0:	mov	r1, sl
   163b4:	ldr	r3, [sp, #136]	; 0x88
   163b8:	mov	r2, fp
   163bc:	bl	1305c <__assert_fail@plt+0x21c0>
   163c0:	cmp	sl, r0
   163c4:	bhi	16430 <__assert_fail@plt+0x5594>
   163c8:	ldr	r3, [pc, #176]	; 16480 <__assert_fail@plt+0x55e4>
   163cc:	add	r7, r0, #1
   163d0:	cmp	r6, r3
   163d4:	str	r7, [r5, r4, lsl #3]
   163d8:	beq	163e4 <__assert_fail@plt+0x5548>
   163dc:	mov	r0, r6
   163e0:	bl	129ec <__assert_fail@plt+0x1b50>
   163e4:	mov	r0, r7
   163e8:	bl	17c74 <__assert_fail@plt+0x6dd8>
   163ec:	ldr	r3, [sp, #32]
   163f0:	ldr	lr, [sp, #92]	; 0x5c
   163f4:	ldr	ip, [sp, #88]	; 0x58
   163f8:	ldr	r4, [sp, #36]	; 0x24
   163fc:	mov	r2, fp
   16400:	mov	r1, r7
   16404:	str	r0, [r3, #4]
   16408:	add	r3, sp, #56	; 0x38
   1640c:	str	r3, [sp, #8]
   16410:	ldr	r3, [sp, #48]	; 0x30
   16414:	str	r4, [sp, #4]
   16418:	str	r3, [sp]
   1641c:	str	lr, [sp, #16]
   16420:	str	ip, [sp, #12]
   16424:	ldr	r3, [sp, #136]	; 0x88
   16428:	mov	r6, r0
   1642c:	bl	1305c <__assert_fail@plt+0x21c0>
   16430:	ldr	r3, [sp, #28]
   16434:	mov	r0, r6
   16438:	str	r3, [r9]
   1643c:	add	sp, sp, #100	; 0x64
   16440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16444:	mov	r3, #8
   16448:	sub	r2, r4, r2
   1644c:	str	r3, [sp]
   16450:	add	r1, sp, #44	; 0x2c
   16454:	add	r2, r2, #1
   16458:	mvn	r3, #-2147483648	; 0x80000000
   1645c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16460:	mov	r5, r0
   16464:	ldm	r7, {r0, r1}
   16468:	str	r5, [r6]
   1646c:	stm	r5, {r0, r1}
   16470:	b	16344 <__assert_fail@plt+0x54a8>
   16474:	bl	10e84 <abort@plt>
   16478:	andeq	sl, r2, r4, ror r1
   1647c:	andeq	sl, r2, ip, ror #1
   16480:	andeq	sl, r2, r4, lsr #3
   16484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16488:	mov	r5, r0
   1648c:	ldr	lr, [pc, #452]	; 16658 <__assert_fail@plt+0x57bc>
   16490:	mov	r6, r1
   16494:	mov	sl, r2
   16498:	ldm	lr!, {r0, r1, r2, r3}
   1649c:	sub	sp, sp, #92	; 0x5c
   164a0:	add	ip, sp, #40	; 0x28
   164a4:	cmp	r6, #0
   164a8:	cmpne	r5, #0
   164ac:	stmia	ip!, {r0, r1, r2, r3}
   164b0:	mov	r9, #10
   164b4:	ldm	lr!, {r0, r1, r2, r3}
   164b8:	moveq	fp, #1
   164bc:	movne	fp, #0
   164c0:	str	r9, [sp, #40]	; 0x28
   164c4:	stmia	ip!, {r0, r1, r2, r3}
   164c8:	ldm	lr, {r0, r1, r2, r3}
   164cc:	stm	ip, {r0, r1, r2, r3}
   164d0:	beq	16654 <__assert_fail@plt+0x57b8>
   164d4:	str	r5, [sp, #80]	; 0x50
   164d8:	str	r6, [sp, #84]	; 0x54
   164dc:	bl	10ddc <__errno_location@plt>
   164e0:	ldr	r7, [pc, #372]	; 1665c <__assert_fail@plt+0x57c0>
   164e4:	ldr	r2, [r7, #4]
   164e8:	ldr	r4, [r7]
   164ec:	cmp	r2, #0
   164f0:	ldr	r3, [r0]
   164f4:	mov	r8, r0
   164f8:	str	r3, [sp, #24]
   164fc:	movgt	r3, r9
   16500:	bgt	16568 <__assert_fail@plt+0x56cc>
   16504:	add	r5, r7, #8
   16508:	cmp	r4, r5
   1650c:	str	r2, [sp, #36]	; 0x24
   16510:	beq	16624 <__assert_fail@plt+0x5788>
   16514:	mov	r3, #8
   16518:	mov	r0, r4
   1651c:	str	r3, [sp]
   16520:	rsb	r2, r2, #1
   16524:	mvn	r3, #-2147483648	; 0x80000000
   16528:	add	r1, sp, #36	; 0x24
   1652c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16530:	mov	r4, r0
   16534:	str	r0, [r7]
   16538:	ldr	r0, [r7, #4]
   1653c:	ldr	r2, [sp, #36]	; 0x24
   16540:	mov	r1, #0
   16544:	sub	r2, r2, r0
   16548:	add	r0, r4, r0, lsl #3
   1654c:	lsl	r2, r2, #3
   16550:	bl	10df4 <memset@plt>
   16554:	ldr	r3, [sp, #40]	; 0x28
   16558:	ldr	r5, [sp, #80]	; 0x50
   1655c:	ldr	r6, [sp, #84]	; 0x54
   16560:	ldr	r2, [sp, #36]	; 0x24
   16564:	str	r2, [r7, #4]
   16568:	ldr	r2, [sp, #44]	; 0x2c
   1656c:	ldr	r9, [r4]
   16570:	ldr	r7, [r4, #4]
   16574:	orr	r2, r2, #1
   16578:	add	fp, sp, #48	; 0x30
   1657c:	str	r2, [sp, #28]
   16580:	str	r2, [sp, #4]
   16584:	str	r3, [sp]
   16588:	str	r6, [sp, #16]
   1658c:	str	r5, [sp, #12]
   16590:	mov	r1, r9
   16594:	mov	r0, r7
   16598:	str	fp, [sp, #8]
   1659c:	mvn	r3, #0
   165a0:	mov	r2, sl
   165a4:	bl	1305c <__assert_fail@plt+0x21c0>
   165a8:	cmp	r9, r0
   165ac:	bhi	16610 <__assert_fail@plt+0x5774>
   165b0:	ldr	r3, [pc, #168]	; 16660 <__assert_fail@plt+0x57c4>
   165b4:	add	r5, r0, #1
   165b8:	cmp	r7, r3
   165bc:	str	r5, [r4]
   165c0:	beq	165cc <__assert_fail@plt+0x5730>
   165c4:	mov	r0, r7
   165c8:	bl	129ec <__assert_fail@plt+0x1b50>
   165cc:	mov	r0, r5
   165d0:	bl	17c74 <__assert_fail@plt+0x6dd8>
   165d4:	ldr	lr, [sp, #84]	; 0x54
   165d8:	ldr	r3, [sp, #40]	; 0x28
   165dc:	ldr	ip, [sp, #80]	; 0x50
   165e0:	mov	r2, sl
   165e4:	mov	r1, r5
   165e8:	str	r0, [r4, #4]
   165ec:	ldr	r4, [sp, #28]
   165f0:	str	r3, [sp]
   165f4:	str	fp, [sp, #8]
   165f8:	str	r4, [sp, #4]
   165fc:	str	lr, [sp, #16]
   16600:	str	ip, [sp, #12]
   16604:	mvn	r3, #0
   16608:	mov	r7, r0
   1660c:	bl	1305c <__assert_fail@plt+0x21c0>
   16610:	ldr	r3, [sp, #24]
   16614:	mov	r0, r7
   16618:	str	r3, [r8]
   1661c:	add	sp, sp, #92	; 0x5c
   16620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16624:	mov	r3, #8
   16628:	str	r3, [sp]
   1662c:	add	r1, sp, #36	; 0x24
   16630:	rsb	r2, r2, #1
   16634:	mov	r0, fp
   16638:	mvn	r3, #-2147483648	; 0x80000000
   1663c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16640:	mov	r4, r0
   16644:	ldm	r5, {r0, r1}
   16648:	str	r4, [r7]
   1664c:	stm	r4, {r0, r1}
   16650:	b	16538 <__assert_fail@plt+0x569c>
   16654:	bl	10e84 <abort@plt>
   16658:	andeq	sl, r2, r4, ror r1
   1665c:	andeq	sl, r2, ip, ror #1
   16660:	andeq	sl, r2, r4, lsr #3
   16664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16668:	mov	r5, r0
   1666c:	ldr	lr, [pc, #464]	; 16844 <__assert_fail@plt+0x59a8>
   16670:	mov	r6, r1
   16674:	mov	sl, r2
   16678:	mov	fp, r3
   1667c:	ldm	lr!, {r0, r1, r2, r3}
   16680:	sub	sp, sp, #92	; 0x5c
   16684:	add	ip, sp, #40	; 0x28
   16688:	cmp	r6, #0
   1668c:	cmpne	r5, #0
   16690:	stmia	ip!, {r0, r1, r2, r3}
   16694:	moveq	r4, #1
   16698:	ldm	lr!, {r0, r1, r2, r3}
   1669c:	movne	r4, #0
   166a0:	mov	r9, #10
   166a4:	str	r4, [sp, #28]
   166a8:	stmia	ip!, {r0, r1, r2, r3}
   166ac:	ldm	lr, {r0, r1, r2, r3}
   166b0:	str	r9, [sp, #40]	; 0x28
   166b4:	stm	ip, {r0, r1, r2, r3}
   166b8:	beq	16840 <__assert_fail@plt+0x59a4>
   166bc:	str	r5, [sp, #80]	; 0x50
   166c0:	str	r6, [sp, #84]	; 0x54
   166c4:	bl	10ddc <__errno_location@plt>
   166c8:	ldr	r7, [pc, #376]	; 16848 <__assert_fail@plt+0x59ac>
   166cc:	ldr	r2, [r7, #4]
   166d0:	ldr	r4, [r7]
   166d4:	cmp	r2, #0
   166d8:	ldr	r3, [r0]
   166dc:	mov	r8, r0
   166e0:	str	r3, [sp, #24]
   166e4:	movgt	r3, r9
   166e8:	bgt	16750 <__assert_fail@plt+0x58b4>
   166ec:	add	r5, r7, #8
   166f0:	cmp	r4, r5
   166f4:	str	r2, [sp, #36]	; 0x24
   166f8:	beq	16810 <__assert_fail@plt+0x5974>
   166fc:	mov	r3, #8
   16700:	mov	r0, r4
   16704:	str	r3, [sp]
   16708:	rsb	r2, r2, #1
   1670c:	mvn	r3, #-2147483648	; 0x80000000
   16710:	add	r1, sp, #36	; 0x24
   16714:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16718:	mov	r4, r0
   1671c:	str	r0, [r7]
   16720:	ldr	r0, [r7, #4]
   16724:	ldr	r2, [sp, #36]	; 0x24
   16728:	mov	r1, #0
   1672c:	sub	r2, r2, r0
   16730:	add	r0, r4, r0, lsl #3
   16734:	lsl	r2, r2, #3
   16738:	bl	10df4 <memset@plt>
   1673c:	ldr	r3, [sp, #40]	; 0x28
   16740:	ldr	r5, [sp, #80]	; 0x50
   16744:	ldr	r6, [sp, #84]	; 0x54
   16748:	ldr	r2, [sp, #36]	; 0x24
   1674c:	str	r2, [r7, #4]
   16750:	ldr	r2, [sp, #44]	; 0x2c
   16754:	ldr	r9, [r4]
   16758:	ldr	r7, [r4, #4]
   1675c:	orr	r2, r2, #1
   16760:	str	r3, [sp]
   16764:	add	r3, sp, #48	; 0x30
   16768:	str	r2, [sp, #28]
   1676c:	str	r2, [sp, #4]
   16770:	str	r3, [sp, #8]
   16774:	str	r6, [sp, #16]
   16778:	str	r5, [sp, #12]
   1677c:	mov	r1, r9
   16780:	mov	r0, r7
   16784:	mov	r3, fp
   16788:	mov	r2, sl
   1678c:	bl	1305c <__assert_fail@plt+0x21c0>
   16790:	cmp	r9, r0
   16794:	bhi	167fc <__assert_fail@plt+0x5960>
   16798:	ldr	r3, [pc, #172]	; 1684c <__assert_fail@plt+0x59b0>
   1679c:	add	r5, r0, #1
   167a0:	cmp	r7, r3
   167a4:	str	r5, [r4]
   167a8:	beq	167b4 <__assert_fail@plt+0x5918>
   167ac:	mov	r0, r7
   167b0:	bl	129ec <__assert_fail@plt+0x1b50>
   167b4:	mov	r0, r5
   167b8:	bl	17c74 <__assert_fail@plt+0x6dd8>
   167bc:	add	lr, sp, #48	; 0x30
   167c0:	ldr	ip, [sp, #84]	; 0x54
   167c4:	mov	r1, r5
   167c8:	ldr	r5, [sp, #28]
   167cc:	mov	r3, fp
   167d0:	mov	r2, sl
   167d4:	str	r0, [r4, #4]
   167d8:	ldr	r4, [sp, #80]	; 0x50
   167dc:	str	lr, [sp, #8]
   167e0:	ldr	lr, [sp, #40]	; 0x28
   167e4:	str	r5, [sp, #4]
   167e8:	str	ip, [sp, #16]
   167ec:	str	r4, [sp, #12]
   167f0:	str	lr, [sp]
   167f4:	mov	r7, r0
   167f8:	bl	1305c <__assert_fail@plt+0x21c0>
   167fc:	ldr	r3, [sp, #24]
   16800:	mov	r0, r7
   16804:	str	r3, [r8]
   16808:	add	sp, sp, #92	; 0x5c
   1680c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16810:	mov	r3, #8
   16814:	str	r3, [sp]
   16818:	add	r1, sp, #36	; 0x24
   1681c:	rsb	r2, r2, #1
   16820:	ldr	r0, [sp, #28]
   16824:	mvn	r3, #-2147483648	; 0x80000000
   16828:	bl	17e90 <__assert_fail@plt+0x6ff4>
   1682c:	mov	r4, r0
   16830:	ldm	r5, {r0, r1}
   16834:	str	r4, [r7]
   16838:	stm	r4, {r0, r1}
   1683c:	b	16720 <__assert_fail@plt+0x5884>
   16840:	bl	10e84 <abort@plt>
   16844:	andeq	sl, r2, r4, ror r1
   16848:	andeq	sl, r2, ip, ror #1
   1684c:	andeq	sl, r2, r4, lsr #3
   16850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16854:	sub	sp, sp, #52	; 0x34
   16858:	mov	r5, r0
   1685c:	mov	sl, r1
   16860:	mov	fp, r2
   16864:	bl	10ddc <__errno_location@plt>
   16868:	ldr	r4, [pc, #404]	; 16a04 <__assert_fail@plt+0x5b68>
   1686c:	cmn	r5, #-2147483647	; 0x80000001
   16870:	ldr	r6, [r4]
   16874:	mov	r8, r0
   16878:	movne	r0, #0
   1687c:	moveq	r0, #1
   16880:	ldr	r3, [r8]
   16884:	orrs	r0, r0, r5, lsr #31
   16888:	str	r3, [sp, #28]
   1688c:	bne	16a00 <__assert_fail@plt+0x5b64>
   16890:	ldr	r2, [r4, #4]
   16894:	cmp	r5, r2
   16898:	blt	168f8 <__assert_fail@plt+0x5a5c>
   1689c:	add	r7, r4, #8
   168a0:	cmp	r6, r7
   168a4:	str	r2, [sp, #44]	; 0x2c
   168a8:	beq	169d0 <__assert_fail@plt+0x5b34>
   168ac:	mov	r3, #8
   168b0:	sub	r2, r5, r2
   168b4:	mov	r0, r6
   168b8:	str	r3, [sp]
   168bc:	add	r2, r2, #1
   168c0:	mvn	r3, #-2147483648	; 0x80000000
   168c4:	add	r1, sp, #44	; 0x2c
   168c8:	bl	17e90 <__assert_fail@plt+0x6ff4>
   168cc:	mov	r6, r0
   168d0:	str	r0, [r4]
   168d4:	ldr	r0, [r4, #4]
   168d8:	ldr	r2, [sp, #44]	; 0x2c
   168dc:	mov	r1, #0
   168e0:	sub	r2, r2, r0
   168e4:	add	r0, r6, r0, lsl #3
   168e8:	lsl	r2, r2, #3
   168ec:	bl	10df4 <memset@plt>
   168f0:	ldr	r3, [sp, #44]	; 0x2c
   168f4:	str	r3, [r4, #4]
   168f8:	ldr	r2, [r4, #56]	; 0x38
   168fc:	add	r3, r6, r5, lsl #3
   16900:	ldr	r1, [r4, #20]
   16904:	ldr	r7, [r3, #4]
   16908:	ldr	r9, [r6, r5, lsl #3]
   1690c:	ldr	ip, [r4, #60]	; 0x3c
   16910:	str	r3, [sp, #32]
   16914:	ldr	r3, [r4, #16]
   16918:	str	r2, [sp, #12]
   1691c:	ldr	r2, [pc, #228]	; 16a08 <__assert_fail@plt+0x5b6c>
   16920:	orr	r1, r1, #1
   16924:	str	r1, [sp, #36]	; 0x24
   16928:	str	r1, [sp, #4]
   1692c:	str	r2, [sp, #8]
   16930:	str	r3, [sp]
   16934:	mov	r0, r7
   16938:	mov	r1, r9
   1693c:	str	ip, [sp, #16]
   16940:	mov	r3, fp
   16944:	mov	r2, sl
   16948:	bl	1305c <__assert_fail@plt+0x21c0>
   1694c:	cmp	r9, r0
   16950:	bhi	169bc <__assert_fail@plt+0x5b20>
   16954:	ldr	r3, [pc, #176]	; 16a0c <__assert_fail@plt+0x5b70>
   16958:	add	r9, r0, #1
   1695c:	cmp	r7, r3
   16960:	str	r9, [r6, r5, lsl #3]
   16964:	beq	16970 <__assert_fail@plt+0x5ad4>
   16968:	mov	r0, r7
   1696c:	bl	129ec <__assert_fail@plt+0x1b50>
   16970:	mov	r0, r9
   16974:	bl	17c74 <__assert_fail@plt+0x6dd8>
   16978:	ldr	ip, [sp, #32]
   1697c:	ldr	lr, [r4, #60]	; 0x3c
   16980:	ldr	r5, [r4, #56]	; 0x38
   16984:	mov	r3, fp
   16988:	mov	r2, sl
   1698c:	mov	r1, r9
   16990:	str	r0, [ip, #4]
   16994:	ldr	ip, [r4, #16]
   16998:	ldr	r4, [pc, #104]	; 16a08 <__assert_fail@plt+0x5b6c>
   1699c:	str	lr, [sp, #16]
   169a0:	str	r4, [sp, #8]
   169a4:	ldr	r4, [sp, #36]	; 0x24
   169a8:	str	r5, [sp, #12]
   169ac:	str	r4, [sp, #4]
   169b0:	str	ip, [sp]
   169b4:	mov	r7, r0
   169b8:	bl	1305c <__assert_fail@plt+0x21c0>
   169bc:	ldr	r3, [sp, #28]
   169c0:	mov	r0, r7
   169c4:	str	r3, [r8]
   169c8:	add	sp, sp, #52	; 0x34
   169cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d0:	mov	r3, #8
   169d4:	sub	r2, r5, r2
   169d8:	str	r3, [sp]
   169dc:	add	r1, sp, #44	; 0x2c
   169e0:	add	r2, r2, #1
   169e4:	mvn	r3, #-2147483648	; 0x80000000
   169e8:	bl	17e90 <__assert_fail@plt+0x6ff4>
   169ec:	mov	r6, r0
   169f0:	ldm	r7, {r0, r1}
   169f4:	str	r6, [r4]
   169f8:	stm	r6, {r0, r1}
   169fc:	b	168d4 <__assert_fail@plt+0x5a38>
   16a00:	bl	10e84 <abort@plt>
   16a04:	andeq	sl, r2, ip, ror #1
   16a08:	andeq	sl, r2, r4, lsl #2
   16a0c:	andeq	sl, r2, r4, lsr #3
   16a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a14:	sub	sp, sp, #44	; 0x2c
   16a18:	mov	r9, r0
   16a1c:	mov	sl, r1
   16a20:	bl	10ddc <__errno_location@plt>
   16a24:	ldr	r4, [pc, #360]	; 16b94 <__assert_fail@plt+0x5cf8>
   16a28:	ldr	r2, [r4, #4]
   16a2c:	ldr	r5, [r4]
   16a30:	cmp	r2, #0
   16a34:	ldr	r3, [r0]
   16a38:	mov	r7, r0
   16a3c:	str	r3, [sp, #24]
   16a40:	bgt	16a9c <__assert_fail@plt+0x5c00>
   16a44:	add	r6, r4, #8
   16a48:	cmp	r5, r6
   16a4c:	str	r2, [sp, #36]	; 0x24
   16a50:	beq	16b64 <__assert_fail@plt+0x5cc8>
   16a54:	mov	r3, #8
   16a58:	mov	r0, r5
   16a5c:	str	r3, [sp]
   16a60:	rsb	r2, r2, #1
   16a64:	mvn	r3, #-2147483648	; 0x80000000
   16a68:	add	r1, sp, #36	; 0x24
   16a6c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16a70:	mov	r5, r0
   16a74:	str	r0, [r4]
   16a78:	ldr	r0, [r4, #4]
   16a7c:	ldr	r2, [sp, #36]	; 0x24
   16a80:	mov	r1, #0
   16a84:	sub	r2, r2, r0
   16a88:	add	r0, r5, r0, lsl #3
   16a8c:	lsl	r2, r2, #3
   16a90:	bl	10df4 <memset@plt>
   16a94:	ldr	r3, [sp, #36]	; 0x24
   16a98:	str	r3, [r4, #4]
   16a9c:	ldr	r1, [r4, #20]
   16aa0:	ldr	r8, [r5]
   16aa4:	ldr	r6, [r5, #4]
   16aa8:	ldr	r2, [r4, #56]	; 0x38
   16aac:	ldr	r3, [r4, #16]
   16ab0:	ldr	ip, [r4, #60]	; 0x3c
   16ab4:	ldr	fp, [pc, #220]	; 16b98 <__assert_fail@plt+0x5cfc>
   16ab8:	orr	r1, r1, #1
   16abc:	str	r1, [sp, #28]
   16ac0:	str	r1, [sp, #4]
   16ac4:	str	r2, [sp, #12]
   16ac8:	str	r3, [sp]
   16acc:	mov	r1, r8
   16ad0:	mov	r0, r6
   16ad4:	str	ip, [sp, #16]
   16ad8:	str	fp, [sp, #8]
   16adc:	mov	r3, sl
   16ae0:	mov	r2, r9
   16ae4:	bl	1305c <__assert_fail@plt+0x21c0>
   16ae8:	cmp	r8, r0
   16aec:	bhi	16b50 <__assert_fail@plt+0x5cb4>
   16af0:	ldr	r3, [pc, #164]	; 16b9c <__assert_fail@plt+0x5d00>
   16af4:	add	r8, r0, #1
   16af8:	cmp	r6, r3
   16afc:	str	r8, [r5]
   16b00:	beq	16b0c <__assert_fail@plt+0x5c70>
   16b04:	mov	r0, r6
   16b08:	bl	129ec <__assert_fail@plt+0x1b50>
   16b0c:	mov	r0, r8
   16b10:	bl	17c74 <__assert_fail@plt+0x6dd8>
   16b14:	ldr	lr, [r4, #60]	; 0x3c
   16b18:	ldr	ip, [r4, #16]
   16b1c:	mov	r3, sl
   16b20:	mov	r2, r9
   16b24:	mov	r1, r8
   16b28:	str	r0, [r5, #4]
   16b2c:	ldr	r5, [r4, #56]	; 0x38
   16b30:	ldr	r4, [sp, #28]
   16b34:	str	fp, [sp, #8]
   16b38:	str	r4, [sp, #4]
   16b3c:	str	lr, [sp, #16]
   16b40:	str	r5, [sp, #12]
   16b44:	str	ip, [sp]
   16b48:	mov	r6, r0
   16b4c:	bl	1305c <__assert_fail@plt+0x21c0>
   16b50:	ldr	r3, [sp, #24]
   16b54:	mov	r0, r6
   16b58:	str	r3, [r7]
   16b5c:	add	sp, sp, #44	; 0x2c
   16b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b64:	mov	r3, #8
   16b68:	str	r3, [sp]
   16b6c:	add	r1, sp, #36	; 0x24
   16b70:	rsb	r2, r2, #1
   16b74:	mvn	r3, #-2147483648	; 0x80000000
   16b78:	mov	r0, #0
   16b7c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16b80:	mov	r5, r0
   16b84:	ldm	r6, {r0, r1}
   16b88:	str	r5, [r4]
   16b8c:	stm	r5, {r0, r1}
   16b90:	b	16a78 <__assert_fail@plt+0x5bdc>
   16b94:	andeq	sl, r2, ip, ror #1
   16b98:	andeq	sl, r2, r4, lsl #2
   16b9c:	andeq	sl, r2, r4, lsr #3
   16ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba4:	sub	sp, sp, #44	; 0x2c
   16ba8:	mov	r5, r0
   16bac:	mov	sl, r1
   16bb0:	bl	10ddc <__errno_location@plt>
   16bb4:	ldr	r4, [pc, #396]	; 16d48 <__assert_fail@plt+0x5eac>
   16bb8:	cmn	r5, #-2147483647	; 0x80000001
   16bbc:	ldr	r6, [r4]
   16bc0:	mov	r8, r0
   16bc4:	movne	r0, #0
   16bc8:	moveq	r0, #1
   16bcc:	ldr	r3, [r8]
   16bd0:	orrs	r0, r0, r5, lsr #31
   16bd4:	str	r3, [sp, #24]
   16bd8:	bne	16d44 <__assert_fail@plt+0x5ea8>
   16bdc:	ldr	r2, [r4, #4]
   16be0:	cmp	r5, r2
   16be4:	blt	16c44 <__assert_fail@plt+0x5da8>
   16be8:	add	r7, r4, #8
   16bec:	cmp	r6, r7
   16bf0:	str	r2, [sp, #36]	; 0x24
   16bf4:	beq	16d14 <__assert_fail@plt+0x5e78>
   16bf8:	mov	r3, #8
   16bfc:	sub	r2, r5, r2
   16c00:	mov	r0, r6
   16c04:	str	r3, [sp]
   16c08:	add	r2, r2, #1
   16c0c:	mvn	r3, #-2147483648	; 0x80000000
   16c10:	add	r1, sp, #36	; 0x24
   16c14:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16c18:	mov	r6, r0
   16c1c:	str	r0, [r4]
   16c20:	ldr	r0, [r4, #4]
   16c24:	ldr	r2, [sp, #36]	; 0x24
   16c28:	mov	r1, #0
   16c2c:	sub	r2, r2, r0
   16c30:	add	r0, r6, r0, lsl #3
   16c34:	lsl	r2, r2, #3
   16c38:	bl	10df4 <memset@plt>
   16c3c:	ldr	r3, [sp, #36]	; 0x24
   16c40:	str	r3, [r4, #4]
   16c44:	ldr	r2, [r4, #56]	; 0x38
   16c48:	add	fp, r6, r5, lsl #3
   16c4c:	ldr	r1, [r4, #20]
   16c50:	ldr	r9, [r6, r5, lsl #3]
   16c54:	ldr	r7, [fp, #4]
   16c58:	ldr	r3, [r4, #16]
   16c5c:	ldr	ip, [r4, #60]	; 0x3c
   16c60:	str	r2, [sp, #12]
   16c64:	ldr	r2, [pc, #224]	; 16d4c <__assert_fail@plt+0x5eb0>
   16c68:	orr	r1, r1, #1
   16c6c:	str	r1, [sp, #28]
   16c70:	str	r1, [sp, #4]
   16c74:	str	r2, [sp, #8]
   16c78:	str	r3, [sp]
   16c7c:	mov	r0, r7
   16c80:	mov	r1, r9
   16c84:	str	ip, [sp, #16]
   16c88:	mvn	r3, #0
   16c8c:	mov	r2, sl
   16c90:	bl	1305c <__assert_fail@plt+0x21c0>
   16c94:	cmp	r9, r0
   16c98:	bhi	16d00 <__assert_fail@plt+0x5e64>
   16c9c:	ldr	r3, [pc, #172]	; 16d50 <__assert_fail@plt+0x5eb4>
   16ca0:	add	r9, r0, #1
   16ca4:	cmp	r7, r3
   16ca8:	str	r9, [r6, r5, lsl #3]
   16cac:	beq	16cb8 <__assert_fail@plt+0x5e1c>
   16cb0:	mov	r0, r7
   16cb4:	bl	129ec <__assert_fail@plt+0x1b50>
   16cb8:	mov	r0, r9
   16cbc:	bl	17c74 <__assert_fail@plt+0x6dd8>
   16cc0:	ldr	ip, [r4, #60]	; 0x3c
   16cc4:	ldr	r3, [r4, #16]
   16cc8:	ldr	lr, [r4, #56]	; 0x38
   16ccc:	ldr	r4, [pc, #120]	; 16d4c <__assert_fail@plt+0x5eb0>
   16cd0:	mov	r2, sl
   16cd4:	mov	r1, r9
   16cd8:	str	r0, [fp, #4]
   16cdc:	str	r4, [sp, #8]
   16ce0:	ldr	r4, [sp, #28]
   16ce4:	str	r3, [sp]
   16ce8:	str	r4, [sp, #4]
   16cec:	str	ip, [sp, #16]
   16cf0:	str	lr, [sp, #12]
   16cf4:	mvn	r3, #0
   16cf8:	mov	r7, r0
   16cfc:	bl	1305c <__assert_fail@plt+0x21c0>
   16d00:	ldr	r3, [sp, #24]
   16d04:	mov	r0, r7
   16d08:	str	r3, [r8]
   16d0c:	add	sp, sp, #44	; 0x2c
   16d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d14:	mov	r3, #8
   16d18:	sub	r2, r5, r2
   16d1c:	str	r3, [sp]
   16d20:	add	r1, sp, #36	; 0x24
   16d24:	add	r2, r2, #1
   16d28:	mvn	r3, #-2147483648	; 0x80000000
   16d2c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16d30:	mov	r6, r0
   16d34:	ldm	r7, {r0, r1}
   16d38:	str	r6, [r4]
   16d3c:	stm	r6, {r0, r1}
   16d40:	b	16c20 <__assert_fail@plt+0x5d84>
   16d44:	bl	10e84 <abort@plt>
   16d48:	andeq	sl, r2, ip, ror #1
   16d4c:	andeq	sl, r2, r4, lsl #2
   16d50:	andeq	sl, r2, r4, lsr #3
   16d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d58:	sub	sp, sp, #44	; 0x2c
   16d5c:	mov	sl, r0
   16d60:	bl	10ddc <__errno_location@plt>
   16d64:	ldr	r4, [pc, #348]	; 16ec8 <__assert_fail@plt+0x602c>
   16d68:	ldr	r2, [r4, #4]
   16d6c:	ldr	r5, [r4]
   16d70:	cmp	r2, #0
   16d74:	ldr	r3, [r0]
   16d78:	mov	r8, r0
   16d7c:	str	r3, [sp, #28]
   16d80:	bgt	16ddc <__assert_fail@plt+0x5f40>
   16d84:	add	r6, r4, #8
   16d88:	cmp	r5, r6
   16d8c:	str	r2, [sp, #36]	; 0x24
   16d90:	beq	16e98 <__assert_fail@plt+0x5ffc>
   16d94:	mov	r3, #8
   16d98:	mov	r0, r5
   16d9c:	str	r3, [sp]
   16da0:	rsb	r2, r2, #1
   16da4:	mvn	r3, #-2147483648	; 0x80000000
   16da8:	add	r1, sp, #36	; 0x24
   16dac:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16db0:	mov	r5, r0
   16db4:	str	r0, [r4]
   16db8:	ldr	r0, [r4, #4]
   16dbc:	ldr	r2, [sp, #36]	; 0x24
   16dc0:	mov	r1, #0
   16dc4:	sub	r2, r2, r0
   16dc8:	add	r0, r5, r0, lsl #3
   16dcc:	lsl	r2, r2, #3
   16dd0:	bl	10df4 <memset@plt>
   16dd4:	ldr	r3, [sp, #36]	; 0x24
   16dd8:	str	r3, [r4, #4]
   16ddc:	ldr	r7, [r4, #20]
   16de0:	ldr	r9, [r5]
   16de4:	ldr	r6, [r5, #4]
   16de8:	ldr	r2, [r4, #56]	; 0x38
   16dec:	ldr	r3, [r4, #16]
   16df0:	ldr	ip, [r4, #60]	; 0x3c
   16df4:	ldr	fp, [pc, #208]	; 16ecc <__assert_fail@plt+0x6030>
   16df8:	orr	r7, r7, #1
   16dfc:	str	r2, [sp, #12]
   16e00:	str	r3, [sp]
   16e04:	str	r7, [sp, #4]
   16e08:	mov	r1, r9
   16e0c:	mov	r0, r6
   16e10:	str	ip, [sp, #16]
   16e14:	str	fp, [sp, #8]
   16e18:	mvn	r3, #0
   16e1c:	mov	r2, sl
   16e20:	bl	1305c <__assert_fail@plt+0x21c0>
   16e24:	cmp	r9, r0
   16e28:	bhi	16e84 <__assert_fail@plt+0x5fe8>
   16e2c:	ldr	r3, [pc, #156]	; 16ed0 <__assert_fail@plt+0x6034>
   16e30:	add	r9, r0, #1
   16e34:	cmp	r6, r3
   16e38:	str	r9, [r5]
   16e3c:	beq	16e48 <__assert_fail@plt+0x5fac>
   16e40:	mov	r0, r6
   16e44:	bl	129ec <__assert_fail@plt+0x1b50>
   16e48:	mov	r0, r9
   16e4c:	bl	17c74 <__assert_fail@plt+0x6dd8>
   16e50:	ldr	ip, [r4, #60]	; 0x3c
   16e54:	ldr	r3, [r4, #16]
   16e58:	ldr	lr, [r4, #56]	; 0x38
   16e5c:	mov	r2, sl
   16e60:	mov	r1, r9
   16e64:	str	r0, [r5, #4]
   16e68:	str	r3, [sp]
   16e6c:	stmib	sp, {r7, fp}
   16e70:	str	ip, [sp, #16]
   16e74:	str	lr, [sp, #12]
   16e78:	mvn	r3, #0
   16e7c:	mov	r6, r0
   16e80:	bl	1305c <__assert_fail@plt+0x21c0>
   16e84:	ldr	r3, [sp, #28]
   16e88:	mov	r0, r6
   16e8c:	str	r3, [r8]
   16e90:	add	sp, sp, #44	; 0x2c
   16e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e98:	mov	r3, #8
   16e9c:	str	r3, [sp]
   16ea0:	add	r1, sp, #36	; 0x24
   16ea4:	rsb	r2, r2, #1
   16ea8:	mvn	r3, #-2147483648	; 0x80000000
   16eac:	mov	r0, #0
   16eb0:	bl	17e90 <__assert_fail@plt+0x6ff4>
   16eb4:	mov	r5, r0
   16eb8:	ldm	r6, {r0, r1}
   16ebc:	str	r5, [r4]
   16ec0:	stm	r5, {r0, r1}
   16ec4:	b	16db8 <__assert_fail@plt+0x5f1c>
   16ec8:	andeq	sl, r2, ip, ror #1
   16ecc:	andeq	sl, r2, r4, lsl #2
   16ed0:	andeq	sl, r2, r4, lsr #3
   16ed4:	mov	r3, #0
   16ed8:	str	r3, [r0]
   16edc:	str	r3, [r0, #4]
   16ee0:	bx	lr
   16ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ee8:	sub	sp, sp, #52	; 0x34
   16eec:	add	r4, sp, #16
   16ef0:	mov	r7, r2
   16ef4:	mov	r6, r1
   16ef8:	mov	r2, #32
   16efc:	mov	r1, #0
   16f00:	mov	r5, r0
   16f04:	mov	r0, r4
   16f08:	mov	r8, r3
   16f0c:	bl	10df4 <memset@plt>
   16f10:	cmp	r7, #0
   16f14:	movne	r1, r6
   16f18:	movne	lr, #1
   16f1c:	addne	r2, r1, r7
   16f20:	beq	16f44 <__assert_fail@plt+0x60a8>
   16f24:	ldrb	r3, [r1], #1
   16f28:	and	ip, r3, #31
   16f2c:	lsr	r3, r3, #5
   16f30:	cmp	r2, r1
   16f34:	ldr	r0, [r4, r3, lsl #2]
   16f38:	orr	r0, r0, lr, lsl ip
   16f3c:	str	r0, [r4, r3, lsl #2]
   16f40:	bne	16f24 <__assert_fail@plt+0x6088>
   16f44:	ldr	r3, [r5, #4]
   16f48:	ldr	r2, [r5, #8]
   16f4c:	cmp	r3, r2
   16f50:	bcs	170b4 <__assert_fail@plt+0x6218>
   16f54:	add	r2, r3, #1
   16f58:	str	r2, [r5, #4]
   16f5c:	ldrb	r4, [r3]
   16f60:	lsr	r3, r4, #5
   16f64:	add	r2, sp, #48	; 0x30
   16f68:	add	r3, r2, r3, lsl #2
   16f6c:	and	r1, r4, #31
   16f70:	ldr	r2, [r3, #-32]	; 0xffffffe0
   16f74:	lsr	r3, r2, r1
   16f78:	tst	r3, #1
   16f7c:	bne	16fa4 <__assert_fail@plt+0x6108>
   16f80:	b	16fd0 <__assert_fail@plt+0x6134>
   16f84:	lsr	r2, r4, #5
   16f88:	add	r1, sp, #48	; 0x30
   16f8c:	add	r2, r1, r2, lsl #2
   16f90:	and	r3, r4, #31
   16f94:	ldr	r2, [r2, #-32]	; 0xffffffe0
   16f98:	lsr	r3, r2, r3
   16f9c:	tst	r3, #1
   16fa0:	beq	16fd0 <__assert_fail@plt+0x6134>
   16fa4:	ldr	r3, [r5, #4]
   16fa8:	ldr	r2, [r5, #8]
   16fac:	add	r1, r3, #1
   16fb0:	cmp	r3, r2
   16fb4:	strcc	r1, [r5, #4]
   16fb8:	ldrbcc	r4, [r3]
   16fbc:	bcc	16f84 <__assert_fail@plt+0x60e8>
   16fc0:	mov	r0, r5
   16fc4:	bl	10e3c <__uflow@plt>
   16fc8:	subs	r4, r0, #0
   16fcc:	bge	16f84 <__assert_fail@plt+0x60e8>
   16fd0:	ldr	r3, [r8]
   16fd4:	add	r7, sp, #48	; 0x30
   16fd8:	ldr	fp, [r8, #4]
   16fdc:	str	r3, [r7, #-36]!	; 0xffffffdc
   16fe0:	mov	r6, #0
   16fe4:	mov	sl, #1
   16fe8:	mvn	r9, #0
   16fec:	b	1703c <__assert_fail@plt+0x61a0>
   16ff0:	lsr	r3, r4, #5
   16ff4:	add	r1, sp, #48	; 0x30
   16ff8:	cmp	r4, #0
   16ffc:	and	r2, r4, #31
   17000:	add	r3, r1, r3, lsl #2
   17004:	blt	17088 <__assert_fail@plt+0x61ec>
   17008:	ldr	r3, [r3, #-32]	; 0xffffffe0
   1700c:	lsr	r3, r3, r2
   17010:	tst	r3, #1
   17014:	bne	17088 <__assert_fail@plt+0x61ec>
   17018:	strb	r4, [fp, r6]
   1701c:	ldr	r3, [r5, #4]
   17020:	ldr	r2, [r5, #8]
   17024:	add	r1, r3, #1
   17028:	cmp	r3, r2
   1702c:	strcc	r1, [r5, #4]
   17030:	ldrbcc	r4, [r3]
   17034:	bcs	17078 <__assert_fail@plt+0x61dc>
   17038:	add	r6, r6, #1
   1703c:	clz	r3, r6
   17040:	lsr	r3, r3, #5
   17044:	ands	r3, r3, r4, lsr #31
   17048:	bne	170a8 <__assert_fail@plt+0x620c>
   1704c:	ldr	r3, [sp, #12]
   17050:	cmp	r6, r3
   17054:	bne	16ff0 <__assert_fail@plt+0x6154>
   17058:	mov	r0, fp
   1705c:	str	sl, [sp]
   17060:	mov	r3, r9
   17064:	mov	r2, #1
   17068:	mov	r1, r7
   1706c:	bl	17e90 <__assert_fail@plt+0x6ff4>
   17070:	mov	fp, r0
   17074:	b	16ff0 <__assert_fail@plt+0x6154>
   17078:	mov	r0, r5
   1707c:	bl	10e3c <__uflow@plt>
   17080:	mov	r4, r0
   17084:	b	17038 <__assert_fail@plt+0x619c>
   17088:	mov	r3, #0
   1708c:	strb	r3, [fp, r6]
   17090:	ldr	r3, [sp, #12]
   17094:	mov	r0, r6
   17098:	str	fp, [r8, #4]
   1709c:	str	r3, [r8]
   170a0:	add	sp, sp, #52	; 0x34
   170a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a8:	mvn	r0, #0
   170ac:	add	sp, sp, #52	; 0x34
   170b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170b4:	mov	r0, r5
   170b8:	bl	10e3c <__uflow@plt>
   170bc:	subs	r4, r0, #0
   170c0:	bge	16f60 <__assert_fail@plt+0x60c4>
   170c4:	b	16fd0 <__assert_fail@plt+0x6134>
   170c8:	cmp	r1, #0
   170cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170d0:	mov	fp, r3
   170d4:	sub	sp, sp, #36	; 0x24
   170d8:	moveq	r3, #64	; 0x40
   170dc:	mov	sl, r0
   170e0:	addne	r0, r1, #1
   170e4:	movne	r3, r0
   170e8:	moveq	r0, r3
   170ec:	mov	r1, #4
   170f0:	str	r3, [sp, #20]
   170f4:	str	r2, [sp, #12]
   170f8:	bl	17d30 <__assert_fail@plt+0x6e94>
   170fc:	mov	r1, #4
   17100:	mov	r9, #1
   17104:	mov	r7, r0
   17108:	ldr	r0, [sp, #20]
   1710c:	bl	17d30 <__assert_fail@plt+0x6e94>
   17110:	mov	r3, #0
   17114:	mov	r4, r3
   17118:	str	r3, [sp, #24]
   1711c:	str	r3, [sp, #28]
   17120:	mov	r8, r0
   17124:	b	17154 <__assert_fail@plt+0x62b8>
   17128:	cmn	r5, #1
   1712c:	mov	r1, r9
   17130:	mov	r0, r6
   17134:	beq	171c0 <__assert_fail@plt+0x6324>
   17138:	bl	17d30 <__assert_fail@plt+0x6e94>
   1713c:	str	r5, [r8, r4, lsl #2]
   17140:	mov	r2, r6
   17144:	ldr	r1, [sp, #28]
   17148:	bl	10ca4 <memcpy@plt>
   1714c:	str	r0, [r7, r4, lsl #2]
   17150:	add	r4, r4, #1
   17154:	add	r3, sp, #24
   17158:	mov	r2, fp
   1715c:	ldr	r1, [sp, #12]
   17160:	mov	r0, sl
   17164:	bl	16ee4 <__assert_fail@plt+0x6048>
   17168:	ldr	r3, [sp, #20]
   1716c:	cmp	r4, r3
   17170:	mov	r5, r0
   17174:	add	r6, r0, #1
   17178:	blt	17128 <__assert_fail@plt+0x628c>
   1717c:	mov	r3, #4
   17180:	str	r3, [sp]
   17184:	mov	r0, r7
   17188:	mvn	r3, #0
   1718c:	mov	r2, r9
   17190:	add	r1, sp, #20
   17194:	bl	17e90 <__assert_fail@plt+0x6ff4>
   17198:	ldr	r1, [sp, #20]
   1719c:	mov	r2, #4
   171a0:	mov	r7, r0
   171a4:	mov	r0, r8
   171a8:	bl	17cd8 <__assert_fail@plt+0x6e3c>
   171ac:	cmn	r5, #1
   171b0:	mov	r1, r9
   171b4:	mov	r8, r0
   171b8:	mov	r0, r6
   171bc:	bne	17138 <__assert_fail@plt+0x629c>
   171c0:	mov	r3, #0
   171c4:	str	r3, [r7, r4, lsl #2]
   171c8:	ldr	r0, [sp, #28]
   171cc:	str	r3, [r8, r4, lsl #2]
   171d0:	bl	129ec <__assert_fail@plt+0x1b50>
   171d4:	ldr	r3, [sp, #76]	; 0x4c
   171d8:	cmp	r3, #0
   171dc:	ldr	r3, [sp, #72]	; 0x48
   171e0:	str	r7, [r3]
   171e4:	ldrne	r3, [sp, #76]	; 0x4c
   171e8:	strne	r8, [r3]
   171ec:	beq	171fc <__assert_fail@plt+0x6360>
   171f0:	mov	r0, r4
   171f4:	add	sp, sp, #36	; 0x24
   171f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171fc:	mov	r0, r8
   17200:	bl	129ec <__assert_fail@plt+0x1b50>
   17204:	mov	r0, r4
   17208:	add	sp, sp, #36	; 0x24
   1720c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17210:	push	{r4, r5, r6, lr}
   17214:	sub	sp, sp, #32
   17218:	cmp	r1, #0
   1721c:	mov	r4, r0
   17220:	ldr	r5, [sp, #48]	; 0x30
   17224:	ldr	r6, [sp, #52]	; 0x34
   17228:	beq	17540 <__assert_fail@plt+0x66a4>
   1722c:	stm	sp, {r2, r3}
   17230:	mov	r3, r1
   17234:	ldr	r2, [pc, #808]	; 17564 <__assert_fail@plt+0x66c8>
   17238:	mov	r1, #1
   1723c:	bl	10e18 <__fprintf_chk@plt>
   17240:	mov	r2, #5
   17244:	ldr	r1, [pc, #796]	; 17568 <__assert_fail@plt+0x66cc>
   17248:	mov	r0, #0
   1724c:	bl	10cd4 <dcgettext@plt>
   17250:	ldr	r3, [pc, #788]	; 1756c <__assert_fail@plt+0x66d0>
   17254:	ldr	r2, [pc, #788]	; 17570 <__assert_fail@plt+0x66d4>
   17258:	str	r3, [sp]
   1725c:	mov	r1, #1
   17260:	mov	r3, r0
   17264:	mov	r0, r4
   17268:	bl	10e18 <__fprintf_chk@plt>
   1726c:	mov	r1, r4
   17270:	mov	r0, #10
   17274:	bl	10cc8 <fputc_unlocked@plt>
   17278:	mov	r2, #5
   1727c:	ldr	r1, [pc, #752]	; 17574 <__assert_fail@plt+0x66d8>
   17280:	mov	r0, #0
   17284:	bl	10cd4 <dcgettext@plt>
   17288:	mov	r1, #1
   1728c:	ldr	r3, [pc, #740]	; 17578 <__assert_fail@plt+0x66dc>
   17290:	mov	r2, r0
   17294:	mov	r0, r4
   17298:	bl	10e18 <__fprintf_chk@plt>
   1729c:	mov	r1, r4
   172a0:	mov	r0, #10
   172a4:	bl	10cc8 <fputc_unlocked@plt>
   172a8:	cmp	r6, #9
   172ac:	ldrls	pc, [pc, r6, lsl #2]
   172b0:	b	17558 <__assert_fail@plt+0x66bc>
   172b4:	andeq	r7, r1, r8, lsr r3
   172b8:	andeq	r7, r1, r0, asr #6
   172bc:	andeq	r7, r1, ip, ror #6
   172c0:	andeq	r7, r1, r0, lsr #7
   172c4:	ldrdeq	r7, [r1], -ip
   172c8:	andeq	r7, r1, r8, lsl r4
   172cc:	andeq	r7, r1, r4, asr r4
   172d0:	muleq	r1, r8, r4
   172d4:	andeq	r7, r1, r8, ror #9
   172d8:	ldrdeq	r7, [r1], -ip
   172dc:	ldr	r1, [pc, #664]	; 1757c <__assert_fail@plt+0x66e0>
   172e0:	mov	r2, #5
   172e4:	mov	r0, #0
   172e8:	bl	10cd4 <dcgettext@plt>
   172ec:	ldr	ip, [r5, #32]
   172f0:	ldr	r1, [r5, #28]
   172f4:	ldr	r2, [r5, #24]
   172f8:	ldr	r3, [r5]
   172fc:	ldr	r6, [r5, #20]
   17300:	str	ip, [sp, #28]
   17304:	ldr	lr, [r5, #16]
   17308:	str	r1, [sp, #24]
   1730c:	ldr	ip, [r5, #12]
   17310:	str	r2, [sp, #20]
   17314:	ldr	r1, [r5, #8]
   17318:	ldr	r2, [r5, #4]
   1731c:	str	r6, [sp, #16]
   17320:	stmib	sp, {r1, ip, lr}
   17324:	mov	r1, #1
   17328:	str	r2, [sp]
   1732c:	mov	r2, r0
   17330:	mov	r0, r4
   17334:	bl	10e18 <__fprintf_chk@plt>
   17338:	add	sp, sp, #32
   1733c:	pop	{r4, r5, r6, pc}
   17340:	mov	r2, #5
   17344:	ldr	r1, [pc, #564]	; 17580 <__assert_fail@plt+0x66e4>
   17348:	mov	r0, #0
   1734c:	bl	10cd4 <dcgettext@plt>
   17350:	ldr	r3, [r5]
   17354:	mov	r1, #1
   17358:	mov	r2, r0
   1735c:	mov	r0, r4
   17360:	add	sp, sp, #32
   17364:	pop	{r4, r5, r6, lr}
   17368:	b	10e18 <__fprintf_chk@plt>
   1736c:	mov	r2, #5
   17370:	ldr	r1, [pc, #524]	; 17584 <__assert_fail@plt+0x66e8>
   17374:	mov	r0, #0
   17378:	bl	10cd4 <dcgettext@plt>
   1737c:	ldr	r2, [r5, #4]
   17380:	ldr	r3, [r5]
   17384:	mov	r1, #1
   17388:	str	r2, [sp, #48]	; 0x30
   1738c:	mov	r2, r0
   17390:	mov	r0, r4
   17394:	add	sp, sp, #32
   17398:	pop	{r4, r5, r6, lr}
   1739c:	b	10e18 <__fprintf_chk@plt>
   173a0:	mov	r2, #5
   173a4:	ldr	r1, [pc, #476]	; 17588 <__assert_fail@plt+0x66ec>
   173a8:	mov	r0, #0
   173ac:	bl	10cd4 <dcgettext@plt>
   173b0:	ldr	r1, [r5, #8]
   173b4:	ldr	r2, [r5, #4]
   173b8:	ldr	r3, [r5]
   173bc:	str	r1, [sp, #52]	; 0x34
   173c0:	str	r2, [sp, #48]	; 0x30
   173c4:	mov	r1, #1
   173c8:	mov	r2, r0
   173cc:	mov	r0, r4
   173d0:	add	sp, sp, #32
   173d4:	pop	{r4, r5, r6, lr}
   173d8:	b	10e18 <__fprintf_chk@plt>
   173dc:	mov	r2, #5
   173e0:	ldr	r1, [pc, #420]	; 1758c <__assert_fail@plt+0x66f0>
   173e4:	mov	r0, #0
   173e8:	bl	10cd4 <dcgettext@plt>
   173ec:	ldr	r1, [r5, #8]
   173f0:	ldr	ip, [r5, #12]
   173f4:	ldr	r2, [r5, #4]
   173f8:	ldr	r3, [r5]
   173fc:	stmib	sp, {r1, ip}
   17400:	str	r2, [sp]
   17404:	mov	r1, #1
   17408:	mov	r2, r0
   1740c:	mov	r0, r4
   17410:	bl	10e18 <__fprintf_chk@plt>
   17414:	b	17338 <__assert_fail@plt+0x649c>
   17418:	mov	r2, #5
   1741c:	ldr	r1, [pc, #364]	; 17590 <__assert_fail@plt+0x66f4>
   17420:	mov	r0, #0
   17424:	bl	10cd4 <dcgettext@plt>
   17428:	add	r1, r5, #8
   1742c:	ldr	r2, [r5, #4]
   17430:	ldm	r1, {r1, ip, lr}
   17434:	ldr	r3, [r5]
   17438:	str	r2, [sp]
   1743c:	stmib	sp, {r1, ip, lr}
   17440:	mov	r1, #1
   17444:	mov	r2, r0
   17448:	mov	r0, r4
   1744c:	bl	10e18 <__fprintf_chk@plt>
   17450:	b	17338 <__assert_fail@plt+0x649c>
   17454:	mov	r2, #5
   17458:	ldr	r1, [pc, #308]	; 17594 <__assert_fail@plt+0x66f8>
   1745c:	mov	r0, #0
   17460:	bl	10cd4 <dcgettext@plt>
   17464:	add	r1, r5, #8
   17468:	ldr	r2, [r5, #4]
   1746c:	ldm	r1, {r1, ip, lr}
   17470:	ldr	r6, [r5, #20]
   17474:	ldr	r3, [r5]
   17478:	stmib	sp, {r1, ip, lr}
   1747c:	mov	r1, #1
   17480:	str	r2, [sp]
   17484:	str	r6, [sp, #16]
   17488:	mov	r2, r0
   1748c:	mov	r0, r4
   17490:	bl	10e18 <__fprintf_chk@plt>
   17494:	b	17338 <__assert_fail@plt+0x649c>
   17498:	mov	r2, #5
   1749c:	ldr	r1, [pc, #244]	; 17598 <__assert_fail@plt+0x66fc>
   174a0:	mov	r0, #0
   174a4:	bl	10cd4 <dcgettext@plt>
   174a8:	ldr	r2, [r5, #24]
   174ac:	ldr	r3, [r5]
   174b0:	ldr	r6, [r5, #20]
   174b4:	ldr	lr, [r5, #16]
   174b8:	ldr	ip, [r5, #12]
   174bc:	str	r2, [sp, #20]
   174c0:	ldr	r1, [r5, #8]
   174c4:	ldr	r2, [r5, #4]
   174c8:	str	r6, [sp, #16]
   174cc:	stmib	sp, {r1, ip, lr}
   174d0:	mov	r1, #1
   174d4:	str	r2, [sp]
   174d8:	mov	r2, r0
   174dc:	mov	r0, r4
   174e0:	bl	10e18 <__fprintf_chk@plt>
   174e4:	b	17338 <__assert_fail@plt+0x649c>
   174e8:	mov	r2, #5
   174ec:	ldr	r1, [pc, #168]	; 1759c <__assert_fail@plt+0x6700>
   174f0:	mov	r0, #0
   174f4:	bl	10cd4 <dcgettext@plt>
   174f8:	ldr	r1, [r5, #28]
   174fc:	ldr	r2, [r5, #24]
   17500:	ldr	r3, [r5]
   17504:	ldr	r6, [r5, #20]
   17508:	ldr	lr, [r5, #16]
   1750c:	str	r1, [sp, #24]
   17510:	ldr	ip, [r5, #12]
   17514:	str	r2, [sp, #20]
   17518:	ldr	r1, [r5, #8]
   1751c:	ldr	r2, [r5, #4]
   17520:	str	r6, [sp, #16]
   17524:	stmib	sp, {r1, ip, lr}
   17528:	mov	r1, #1
   1752c:	str	r2, [sp]
   17530:	mov	r2, r0
   17534:	mov	r0, r4
   17538:	bl	10e18 <__fprintf_chk@plt>
   1753c:	b	17338 <__assert_fail@plt+0x649c>
   17540:	str	r3, [sp]
   17544:	mov	r1, #1
   17548:	mov	r3, r2
   1754c:	ldr	r2, [pc, #76]	; 175a0 <__assert_fail@plt+0x6704>
   17550:	bl	10e18 <__fprintf_chk@plt>
   17554:	b	17240 <__assert_fail@plt+0x63a4>
   17558:	mov	r2, #5
   1755c:	ldr	r1, [pc, #64]	; 175a4 <__assert_fail@plt+0x6708>
   17560:	b	172e4 <__assert_fail@plt+0x6448>
   17564:	andeq	r9, r1, r8, asr r0
   17568:	andeq	r9, r1, ip, rrx
   1756c:	andeq	r0, r0, r6, ror #15
   17570:	andeq	r9, r1, r4, asr #6
   17574:	andeq	r9, r1, r0, ror r0
   17578:	andeq	r9, r1, ip, lsl r1
   1757c:	andeq	r9, r1, ip, asr #4
   17580:	andeq	r9, r1, r0, asr #2
   17584:	andeq	r9, r1, r0, asr r1
   17588:	andeq	r9, r1, r8, ror #2
   1758c:	andeq	r9, r1, r4, lsl #3
   17590:	andeq	r9, r1, r4, lsr #3
   17594:	andeq	r9, r1, r8, asr #3
   17598:	strdeq	r9, [r1], -r0
   1759c:	andeq	r9, r1, ip, lsl r2
   175a0:	andeq	r9, r1, r4, rrx
   175a4:	andeq	r9, r1, r0, lsl #5
   175a8:	push	{r4, r5, lr}
   175ac:	sub	sp, sp, #12
   175b0:	ldr	r5, [sp, #24]
   175b4:	ldr	ip, [r5]
   175b8:	cmp	ip, #0
   175bc:	beq	175d8 <__assert_fail@plt+0x673c>
   175c0:	mov	lr, r5
   175c4:	mov	ip, #0
   175c8:	ldr	r4, [lr, #4]!
   175cc:	add	ip, ip, #1
   175d0:	cmp	r4, #0
   175d4:	bne	175c8 <__assert_fail@plt+0x672c>
   175d8:	stm	sp, {r5, ip}
   175dc:	bl	17210 <__assert_fail@plt+0x6374>
   175e0:	add	sp, sp, #12
   175e4:	pop	{r4, r5, pc}
   175e8:	push	{r4, r5, lr}
   175ec:	sub	sp, sp, #76	; 0x4c
   175f0:	mov	r5, r0
   175f4:	ldr	ip, [sp, #88]	; 0x58
   175f8:	ldr	r0, [ip]
   175fc:	cmp	r0, #0
   17600:	str	r0, [sp, #32]
   17604:	beq	179d8 <__assert_fail@plt+0x6b3c>
   17608:	ldr	r0, [ip, #4]
   1760c:	cmp	r0, #0
   17610:	str	r0, [sp, #36]	; 0x24
   17614:	beq	179e0 <__assert_fail@plt+0x6b44>
   17618:	ldr	r0, [ip, #8]
   1761c:	cmp	r0, #0
   17620:	str	r0, [sp, #40]	; 0x28
   17624:	beq	179e8 <__assert_fail@plt+0x6b4c>
   17628:	ldr	r0, [ip, #12]
   1762c:	cmp	r0, #0
   17630:	str	r0, [sp, #44]	; 0x2c
   17634:	beq	179f0 <__assert_fail@plt+0x6b54>
   17638:	ldr	r0, [ip, #16]
   1763c:	cmp	r0, #0
   17640:	str	r0, [sp, #48]	; 0x30
   17644:	beq	179f8 <__assert_fail@plt+0x6b5c>
   17648:	ldr	r0, [ip, #20]
   1764c:	cmp	r0, #0
   17650:	str	r0, [sp, #52]	; 0x34
   17654:	beq	17a00 <__assert_fail@plt+0x6b64>
   17658:	ldr	r0, [ip, #24]
   1765c:	cmp	r0, #0
   17660:	str	r0, [sp, #56]	; 0x38
   17664:	beq	17a08 <__assert_fail@plt+0x6b6c>
   17668:	ldr	r0, [ip, #28]
   1766c:	cmp	r0, #0
   17670:	str	r0, [sp, #60]	; 0x3c
   17674:	beq	17a10 <__assert_fail@plt+0x6b74>
   17678:	ldr	r0, [ip, #32]
   1767c:	cmp	r0, #0
   17680:	str	r0, [sp, #64]	; 0x40
   17684:	beq	17a18 <__assert_fail@plt+0x6b7c>
   17688:	ldr	r0, [ip, #36]	; 0x24
   1768c:	cmp	r0, #0
   17690:	movne	r4, #10
   17694:	moveq	r4, #9
   17698:	cmp	r1, #0
   1769c:	beq	179b0 <__assert_fail@plt+0x6b14>
   176a0:	stm	sp, {r2, r3}
   176a4:	mov	r0, r5
   176a8:	mov	r3, r1
   176ac:	ldr	r2, [pc, #876]	; 17a20 <__assert_fail@plt+0x6b84>
   176b0:	mov	r1, #1
   176b4:	bl	10e18 <__fprintf_chk@plt>
   176b8:	mov	r2, #5
   176bc:	ldr	r1, [pc, #864]	; 17a24 <__assert_fail@plt+0x6b88>
   176c0:	mov	r0, #0
   176c4:	bl	10cd4 <dcgettext@plt>
   176c8:	ldr	r3, [pc, #856]	; 17a28 <__assert_fail@plt+0x6b8c>
   176cc:	ldr	r2, [pc, #856]	; 17a2c <__assert_fail@plt+0x6b90>
   176d0:	str	r3, [sp]
   176d4:	mov	r1, #1
   176d8:	mov	r3, r0
   176dc:	mov	r0, r5
   176e0:	bl	10e18 <__fprintf_chk@plt>
   176e4:	mov	r1, r5
   176e8:	mov	r0, #10
   176ec:	bl	10cc8 <fputc_unlocked@plt>
   176f0:	mov	r2, #5
   176f4:	ldr	r1, [pc, #820]	; 17a30 <__assert_fail@plt+0x6b94>
   176f8:	mov	r0, #0
   176fc:	bl	10cd4 <dcgettext@plt>
   17700:	mov	r1, #1
   17704:	ldr	r3, [pc, #808]	; 17a34 <__assert_fail@plt+0x6b98>
   17708:	mov	r2, r0
   1770c:	mov	r0, r5
   17710:	bl	10e18 <__fprintf_chk@plt>
   17714:	mov	r1, r5
   17718:	mov	r0, #10
   1771c:	bl	10cc8 <fputc_unlocked@plt>
   17720:	cmp	r4, #9
   17724:	ldrls	pc, [pc, r4, lsl #2]
   17728:	b	179cc <__assert_fail@plt+0x6b30>
   1772c:			; <UNDEFINED> instruction: 0x000177b0
   17730:			; <UNDEFINED> instruction: 0x000177b8
   17734:	andeq	r7, r1, r4, ror #15
   17738:	andeq	r7, r1, r8, lsl r8
   1773c:	andeq	r7, r1, r0, asr r8
   17740:	andeq	r7, r1, ip, lsl #17
   17744:	andeq	r7, r1, r8, asr #17
   17748:	andeq	r7, r1, ip, lsl #18
   1774c:	andeq	r7, r1, r8, asr r9
   17750:	andeq	r7, r1, r4, asr r7
   17754:	ldr	r1, [pc, #732]	; 17a38 <__assert_fail@plt+0x6b9c>
   17758:	mov	r2, #5
   1775c:	mov	r0, #0
   17760:	bl	10cd4 <dcgettext@plt>
   17764:	ldr	ip, [sp, #64]	; 0x40
   17768:	ldr	r1, [sp, #60]	; 0x3c
   1776c:	ldr	r2, [sp, #56]	; 0x38
   17770:	ldr	lr, [sp, #48]	; 0x30
   17774:	str	ip, [sp, #28]
   17778:	str	r1, [sp, #24]
   1777c:	ldr	ip, [sp, #44]	; 0x2c
   17780:	ldr	r1, [sp, #40]	; 0x28
   17784:	ldr	r4, [sp, #52]	; 0x34
   17788:	str	r2, [sp, #20]
   1778c:	ldr	r2, [sp, #36]	; 0x24
   17790:	stmib	sp, {r1, ip, lr}
   17794:	mov	r1, #1
   17798:	str	r2, [sp]
   1779c:	ldr	r3, [sp, #32]
   177a0:	str	r4, [sp, #16]
   177a4:	mov	r2, r0
   177a8:	mov	r0, r5
   177ac:	bl	10e18 <__fprintf_chk@plt>
   177b0:	add	sp, sp, #76	; 0x4c
   177b4:	pop	{r4, r5, pc}
   177b8:	mov	r2, #5
   177bc:	ldr	r1, [pc, #632]	; 17a3c <__assert_fail@plt+0x6ba0>
   177c0:	mov	r0, #0
   177c4:	bl	10cd4 <dcgettext@plt>
   177c8:	ldr	r3, [sp, #32]
   177cc:	mov	r1, #1
   177d0:	mov	r2, r0
   177d4:	mov	r0, r5
   177d8:	add	sp, sp, #76	; 0x4c
   177dc:	pop	{r4, r5, lr}
   177e0:	b	10e18 <__fprintf_chk@plt>
   177e4:	mov	r2, #5
   177e8:	ldr	r1, [pc, #592]	; 17a40 <__assert_fail@plt+0x6ba4>
   177ec:	mov	r0, #0
   177f0:	bl	10cd4 <dcgettext@plt>
   177f4:	ldr	r2, [sp, #36]	; 0x24
   177f8:	ldr	r3, [sp, #32]
   177fc:	str	r2, [sp, #88]	; 0x58
   17800:	mov	r1, #1
   17804:	mov	r2, r0
   17808:	mov	r0, r5
   1780c:	add	sp, sp, #76	; 0x4c
   17810:	pop	{r4, r5, lr}
   17814:	b	10e18 <__fprintf_chk@plt>
   17818:	mov	r2, #5
   1781c:	ldr	r1, [pc, #544]	; 17a44 <__assert_fail@plt+0x6ba8>
   17820:	mov	r0, #0
   17824:	bl	10cd4 <dcgettext@plt>
   17828:	ldr	r1, [sp, #40]	; 0x28
   1782c:	ldr	r2, [sp, #36]	; 0x24
   17830:	str	r1, [sp, #4]
   17834:	str	r2, [sp]
   17838:	ldr	r3, [sp, #32]
   1783c:	mov	r1, #1
   17840:	mov	r2, r0
   17844:	mov	r0, r5
   17848:	bl	10e18 <__fprintf_chk@plt>
   1784c:	b	177b0 <__assert_fail@plt+0x6914>
   17850:	mov	r2, #5
   17854:	ldr	r1, [pc, #492]	; 17a48 <__assert_fail@plt+0x6bac>
   17858:	mov	r0, #0
   1785c:	bl	10cd4 <dcgettext@plt>
   17860:	ldr	r1, [sp, #40]	; 0x28
   17864:	ldr	ip, [sp, #44]	; 0x2c
   17868:	ldr	r2, [sp, #36]	; 0x24
   1786c:	ldr	r3, [sp, #32]
   17870:	stmib	sp, {r1, ip}
   17874:	str	r2, [sp]
   17878:	mov	r1, #1
   1787c:	mov	r2, r0
   17880:	mov	r0, r5
   17884:	bl	10e18 <__fprintf_chk@plt>
   17888:	b	177b0 <__assert_fail@plt+0x6914>
   1788c:	mov	r2, #5
   17890:	ldr	r1, [pc, #436]	; 17a4c <__assert_fail@plt+0x6bb0>
   17894:	mov	r0, #0
   17898:	bl	10cd4 <dcgettext@plt>
   1789c:	add	r1, sp, #40	; 0x28
   178a0:	ldr	r2, [sp, #36]	; 0x24
   178a4:	ldm	r1, {r1, ip, lr}
   178a8:	ldr	r3, [sp, #32]
   178ac:	str	r2, [sp]
   178b0:	stmib	sp, {r1, ip, lr}
   178b4:	mov	r1, #1
   178b8:	mov	r2, r0
   178bc:	mov	r0, r5
   178c0:	bl	10e18 <__fprintf_chk@plt>
   178c4:	b	177b0 <__assert_fail@plt+0x6914>
   178c8:	mov	r2, #5
   178cc:	ldr	r1, [pc, #380]	; 17a50 <__assert_fail@plt+0x6bb4>
   178d0:	mov	r0, #0
   178d4:	bl	10cd4 <dcgettext@plt>
   178d8:	add	r1, sp, #40	; 0x28
   178dc:	ldr	r2, [sp, #36]	; 0x24
   178e0:	ldm	r1, {r1, ip, lr}
   178e4:	ldr	r4, [sp, #52]	; 0x34
   178e8:	str	r2, [sp]
   178ec:	stmib	sp, {r1, ip, lr}
   178f0:	mov	r1, #1
   178f4:	ldr	r3, [sp, #32]
   178f8:	str	r4, [sp, #16]
   178fc:	mov	r2, r0
   17900:	mov	r0, r5
   17904:	bl	10e18 <__fprintf_chk@plt>
   17908:	b	177b0 <__assert_fail@plt+0x6914>
   1790c:	mov	r2, #5
   17910:	ldr	r1, [pc, #316]	; 17a54 <__assert_fail@plt+0x6bb8>
   17914:	mov	r0, #0
   17918:	bl	10cd4 <dcgettext@plt>
   1791c:	add	r1, sp, #40	; 0x28
   17920:	ldr	r2, [sp, #56]	; 0x38
   17924:	ldm	r1, {r1, ip, lr}
   17928:	ldr	r4, [sp, #52]	; 0x34
   1792c:	str	r2, [sp, #20]
   17930:	ldr	r2, [sp, #36]	; 0x24
   17934:	stmib	sp, {r1, ip, lr}
   17938:	mov	r1, #1
   1793c:	str	r2, [sp]
   17940:	ldr	r3, [sp, #32]
   17944:	str	r4, [sp, #16]
   17948:	mov	r2, r0
   1794c:	mov	r0, r5
   17950:	bl	10e18 <__fprintf_chk@plt>
   17954:	b	177b0 <__assert_fail@plt+0x6914>
   17958:	mov	r2, #5
   1795c:	ldr	r1, [pc, #244]	; 17a58 <__assert_fail@plt+0x6bbc>
   17960:	mov	r0, #0
   17964:	bl	10cd4 <dcgettext@plt>
   17968:	ldr	r1, [sp, #60]	; 0x3c
   1796c:	ldr	r2, [sp, #56]	; 0x38
   17970:	ldr	lr, [sp, #48]	; 0x30
   17974:	ldr	ip, [sp, #44]	; 0x2c
   17978:	str	r1, [sp, #24]
   1797c:	ldr	r1, [sp, #40]	; 0x28
   17980:	ldr	r4, [sp, #52]	; 0x34
   17984:	str	r2, [sp, #20]
   17988:	ldr	r2, [sp, #36]	; 0x24
   1798c:	stmib	sp, {r1, ip, lr}
   17990:	mov	r1, #1
   17994:	str	r2, [sp]
   17998:	ldr	r3, [sp, #32]
   1799c:	str	r4, [sp, #16]
   179a0:	mov	r2, r0
   179a4:	mov	r0, r5
   179a8:	bl	10e18 <__fprintf_chk@plt>
   179ac:	b	177b0 <__assert_fail@plt+0x6914>
   179b0:	str	r3, [sp]
   179b4:	mov	r1, #1
   179b8:	mov	r3, r2
   179bc:	mov	r0, r5
   179c0:	ldr	r2, [pc, #148]	; 17a5c <__assert_fail@plt+0x6bc0>
   179c4:	bl	10e18 <__fprintf_chk@plt>
   179c8:	b	176b8 <__assert_fail@plt+0x681c>
   179cc:	mov	r2, #5
   179d0:	ldr	r1, [pc, #136]	; 17a60 <__assert_fail@plt+0x6bc4>
   179d4:	b	1775c <__assert_fail@plt+0x68c0>
   179d8:	mov	r4, r0
   179dc:	b	17698 <__assert_fail@plt+0x67fc>
   179e0:	mov	r4, #1
   179e4:	b	17698 <__assert_fail@plt+0x67fc>
   179e8:	mov	r4, #2
   179ec:	b	17698 <__assert_fail@plt+0x67fc>
   179f0:	mov	r4, #3
   179f4:	b	17698 <__assert_fail@plt+0x67fc>
   179f8:	mov	r4, #4
   179fc:	b	17698 <__assert_fail@plt+0x67fc>
   17a00:	mov	r4, #5
   17a04:	b	17698 <__assert_fail@plt+0x67fc>
   17a08:	mov	r4, #6
   17a0c:	b	17698 <__assert_fail@plt+0x67fc>
   17a10:	mov	r4, #7
   17a14:	b	17698 <__assert_fail@plt+0x67fc>
   17a18:	mov	r4, #8
   17a1c:	b	17698 <__assert_fail@plt+0x67fc>
   17a20:	andeq	r9, r1, r8, asr r0
   17a24:	andeq	r9, r1, ip, rrx
   17a28:	andeq	r0, r0, r6, ror #15
   17a2c:	andeq	r9, r1, r4, asr #6
   17a30:	andeq	r9, r1, r0, ror r0
   17a34:	andeq	r9, r1, ip, lsl r1
   17a38:	andeq	r9, r1, ip, asr #4
   17a3c:	andeq	r9, r1, r0, asr #2
   17a40:	andeq	r9, r1, r0, asr r1
   17a44:	andeq	r9, r1, r8, ror #2
   17a48:	andeq	r9, r1, r4, lsl #3
   17a4c:	andeq	r9, r1, r4, lsr #3
   17a50:	andeq	r9, r1, r8, asr #3
   17a54:	strdeq	r9, [r1], -r0
   17a58:	andeq	r9, r1, ip, lsl r2
   17a5c:	andeq	r9, r1, r4, rrx
   17a60:	andeq	r9, r1, r0, lsl #5
   17a64:	push	{r3}		; (str r3, [sp, #-4]!)
   17a68:	push	{lr}		; (str lr, [sp, #-4]!)
   17a6c:	sub	sp, sp, #56	; 0x38
   17a70:	add	r3, sp, #64	; 0x40
   17a74:	ldr	ip, [sp, #64]	; 0x40
   17a78:	str	r3, [sp, #12]
   17a7c:	cmp	ip, #0
   17a80:	str	ip, [sp, #16]
   17a84:	beq	17b1c <__assert_fail@plt+0x6c80>
   17a88:	ldr	ip, [sp, #68]	; 0x44
   17a8c:	cmp	ip, #0
   17a90:	str	ip, [sp, #20]
   17a94:	beq	17b3c <__assert_fail@plt+0x6ca0>
   17a98:	ldr	ip, [sp, #72]	; 0x48
   17a9c:	cmp	ip, #0
   17aa0:	str	ip, [sp, #24]
   17aa4:	beq	17b44 <__assert_fail@plt+0x6ca8>
   17aa8:	ldr	ip, [sp, #76]	; 0x4c
   17aac:	cmp	ip, #0
   17ab0:	str	ip, [sp, #28]
   17ab4:	beq	17b4c <__assert_fail@plt+0x6cb0>
   17ab8:	ldr	ip, [sp, #80]	; 0x50
   17abc:	cmp	ip, #0
   17ac0:	str	ip, [sp, #32]
   17ac4:	beq	17b54 <__assert_fail@plt+0x6cb8>
   17ac8:	ldr	ip, [sp, #84]	; 0x54
   17acc:	cmp	ip, #0
   17ad0:	str	ip, [sp, #36]	; 0x24
   17ad4:	beq	17b5c <__assert_fail@plt+0x6cc0>
   17ad8:	ldr	ip, [sp, #88]	; 0x58
   17adc:	cmp	ip, #0
   17ae0:	str	ip, [sp, #40]	; 0x28
   17ae4:	beq	17b64 <__assert_fail@plt+0x6cc8>
   17ae8:	ldr	ip, [sp, #92]	; 0x5c
   17aec:	cmp	ip, #0
   17af0:	str	ip, [sp, #44]	; 0x2c
   17af4:	beq	17b6c <__assert_fail@plt+0x6cd0>
   17af8:	ldr	ip, [sp, #96]	; 0x60
   17afc:	cmp	ip, #0
   17b00:	str	ip, [sp, #48]	; 0x30
   17b04:	beq	17b74 <__assert_fail@plt+0x6cd8>
   17b08:	ldr	ip, [sp, #100]	; 0x64
   17b0c:	cmp	ip, #0
   17b10:	str	ip, [sp, #52]	; 0x34
   17b14:	movne	ip, #10
   17b18:	moveq	ip, #9
   17b1c:	add	r3, sp, #16
   17b20:	stm	sp, {r3, ip}
   17b24:	ldr	r3, [sp, #60]	; 0x3c
   17b28:	bl	17210 <__assert_fail@plt+0x6374>
   17b2c:	add	sp, sp, #56	; 0x38
   17b30:	pop	{lr}		; (ldr lr, [sp], #4)
   17b34:	add	sp, sp, #4
   17b38:	bx	lr
   17b3c:	mov	ip, #1
   17b40:	b	17b1c <__assert_fail@plt+0x6c80>
   17b44:	mov	ip, #2
   17b48:	b	17b1c <__assert_fail@plt+0x6c80>
   17b4c:	mov	ip, #3
   17b50:	b	17b1c <__assert_fail@plt+0x6c80>
   17b54:	mov	ip, #4
   17b58:	b	17b1c <__assert_fail@plt+0x6c80>
   17b5c:	mov	ip, #5
   17b60:	b	17b1c <__assert_fail@plt+0x6c80>
   17b64:	mov	ip, #6
   17b68:	b	17b1c <__assert_fail@plt+0x6c80>
   17b6c:	mov	ip, #7
   17b70:	b	17b1c <__assert_fail@plt+0x6c80>
   17b74:	mov	ip, #8
   17b78:	b	17b1c <__assert_fail@plt+0x6c80>
   17b7c:	ldr	r3, [pc, #116]	; 17bf8 <__assert_fail@plt+0x6d5c>
   17b80:	push	{r4, lr}
   17b84:	mov	r0, #10
   17b88:	ldr	r1, [r3]
   17b8c:	bl	10cc8 <fputc_unlocked@plt>
   17b90:	mov	r2, #5
   17b94:	ldr	r1, [pc, #96]	; 17bfc <__assert_fail@plt+0x6d60>
   17b98:	mov	r0, #0
   17b9c:	bl	10cd4 <dcgettext@plt>
   17ba0:	ldr	r2, [pc, #88]	; 17c00 <__assert_fail@plt+0x6d64>
   17ba4:	mov	r1, r0
   17ba8:	mov	r0, #1
   17bac:	bl	10e00 <__printf_chk@plt>
   17bb0:	mov	r2, #5
   17bb4:	ldr	r1, [pc, #72]	; 17c04 <__assert_fail@plt+0x6d68>
   17bb8:	mov	r0, #0
   17bbc:	bl	10cd4 <dcgettext@plt>
   17bc0:	ldr	r3, [pc, #64]	; 17c08 <__assert_fail@plt+0x6d6c>
   17bc4:	ldr	r2, [pc, #64]	; 17c0c <__assert_fail@plt+0x6d70>
   17bc8:	mov	r1, r0
   17bcc:	mov	r0, #1
   17bd0:	bl	10e00 <__printf_chk@plt>
   17bd4:	mov	r2, #5
   17bd8:	ldr	r1, [pc, #48]	; 17c10 <__assert_fail@plt+0x6d74>
   17bdc:	mov	r0, #0
   17be0:	bl	10cd4 <dcgettext@plt>
   17be4:	ldr	r2, [pc, #40]	; 17c14 <__assert_fail@plt+0x6d78>
   17be8:	pop	{r4, lr}
   17bec:	mov	r1, r0
   17bf0:	mov	r0, #1
   17bf4:	b	10e00 <__printf_chk@plt>
   17bf8:	andeq	sl, r2, ip, asr #2
   17bfc:			; <UNDEFINED> instruction: 0x000192bc
   17c00:	ldrdeq	r9, [r1], -r0
   17c04:	andeq	r9, r1, r8, ror #5
   17c08:	andeq	r8, r1, r4, ror #24
   17c0c:	andeq	r8, r1, ip, lsl #25
   17c10:	strdeq	r9, [r1], -ip
   17c14:	andeq	r9, r1, r4, lsr #6
   17c18:	push	{r4, r5, r6, lr}
   17c1c:	mov	r6, r0
   17c20:	mov	r5, r1
   17c24:	mov	r4, r2
   17c28:	bl	184a8 <__assert_fail@plt+0x760c>
   17c2c:	cmp	r0, #0
   17c30:	popne	{r4, r5, r6, pc}
   17c34:	cmp	r6, #0
   17c38:	beq	17c48 <__assert_fail@plt+0x6dac>
   17c3c:	cmp	r5, #0
   17c40:	cmpne	r4, #0
   17c44:	popeq	{r4, r5, r6, pc}
   17c48:	bl	18294 <__assert_fail@plt+0x73f8>
   17c4c:	push	{r4, lr}
   17c50:	bl	1831c <__assert_fail@plt+0x7480>
   17c54:	cmp	r0, #0
   17c58:	popne	{r4, pc}
   17c5c:	bl	18294 <__assert_fail@plt+0x73f8>
   17c60:	push	{r4, lr}
   17c64:	bl	1831c <__assert_fail@plt+0x7480>
   17c68:	cmp	r0, #0
   17c6c:	popne	{r4, pc}
   17c70:	bl	18294 <__assert_fail@plt+0x73f8>
   17c74:	push	{r4, lr}
   17c78:	bl	1831c <__assert_fail@plt+0x7480>
   17c7c:	cmp	r0, #0
   17c80:	popne	{r4, pc}
   17c84:	bl	18294 <__assert_fail@plt+0x73f8>
   17c88:	push	{r4, r5, r6, lr}
   17c8c:	mov	r5, r0
   17c90:	mov	r4, r1
   17c94:	bl	18348 <__assert_fail@plt+0x74ac>
   17c98:	cmp	r0, #0
   17c9c:	popne	{r4, r5, r6, pc}
   17ca0:	adds	r4, r4, #0
   17ca4:	movne	r4, #1
   17ca8:	cmp	r5, #0
   17cac:	orreq	r4, r4, #1
   17cb0:	cmp	r4, #0
   17cb4:	popeq	{r4, r5, r6, pc}
   17cb8:	bl	18294 <__assert_fail@plt+0x73f8>
   17cbc:	push	{r4, lr}
   17cc0:	cmp	r1, #0
   17cc4:	orreq	r1, r1, #1
   17cc8:	bl	18348 <__assert_fail@plt+0x74ac>
   17ccc:	cmp	r0, #0
   17cd0:	popne	{r4, pc}
   17cd4:	bl	18294 <__assert_fail@plt+0x73f8>
   17cd8:	push	{r4, r5, r6, lr}
   17cdc:	mov	r6, r0
   17ce0:	mov	r5, r1
   17ce4:	mov	r4, r2
   17ce8:	bl	184a8 <__assert_fail@plt+0x760c>
   17cec:	cmp	r0, #0
   17cf0:	popne	{r4, r5, r6, pc}
   17cf4:	cmp	r6, #0
   17cf8:	beq	17d08 <__assert_fail@plt+0x6e6c>
   17cfc:	cmp	r5, #0
   17d00:	cmpne	r4, #0
   17d04:	popeq	{r4, r5, r6, pc}
   17d08:	bl	18294 <__assert_fail@plt+0x73f8>
   17d0c:	cmp	r2, #0
   17d10:	cmpne	r1, #0
   17d14:	moveq	r2, #1
   17d18:	moveq	r1, r2
   17d1c:	push	{r4, lr}
   17d20:	bl	184a8 <__assert_fail@plt+0x760c>
   17d24:	cmp	r0, #0
   17d28:	popne	{r4, pc}
   17d2c:	bl	18294 <__assert_fail@plt+0x73f8>
   17d30:	push	{r4, lr}
   17d34:	mov	r2, r1
   17d38:	mov	r1, r0
   17d3c:	mov	r0, #0
   17d40:	bl	184a8 <__assert_fail@plt+0x760c>
   17d44:	cmp	r0, #0
   17d48:	popne	{r4, pc}
   17d4c:	bl	18294 <__assert_fail@plt+0x73f8>
   17d50:	cmp	r1, #0
   17d54:	cmpne	r0, #0
   17d58:	moveq	r2, #1
   17d5c:	movne	r2, r1
   17d60:	moveq	r1, r2
   17d64:	movne	r1, r0
   17d68:	push	{r4, lr}
   17d6c:	mov	r0, #0
   17d70:	bl	184a8 <__assert_fail@plt+0x760c>
   17d74:	cmp	r0, #0
   17d78:	popne	{r4, pc}
   17d7c:	bl	18294 <__assert_fail@plt+0x73f8>
   17d80:	cmp	r0, #0
   17d84:	push	{r4, r5, r6, lr}
   17d88:	mov	r5, r1
   17d8c:	ldr	r4, [r1]
   17d90:	beq	17dcc <__assert_fail@plt+0x6f30>
   17d94:	lsr	r2, r4, #1
   17d98:	add	r3, r2, #1
   17d9c:	mvn	r3, r3
   17da0:	cmp	r4, r3
   17da4:	bhi	17de8 <__assert_fail@plt+0x6f4c>
   17da8:	add	r4, r4, #1
   17dac:	add	r4, r4, r2
   17db0:	mov	r1, r4
   17db4:	mov	r2, #1
   17db8:	bl	184a8 <__assert_fail@plt+0x760c>
   17dbc:	cmp	r0, #0
   17dc0:	beq	17dec <__assert_fail@plt+0x6f50>
   17dc4:	str	r4, [r5]
   17dc8:	pop	{r4, r5, r6, pc}
   17dcc:	cmp	r4, #0
   17dd0:	moveq	r4, #64	; 0x40
   17dd4:	mov	r1, r4
   17dd8:	mov	r2, #1
   17ddc:	bl	184a8 <__assert_fail@plt+0x760c>
   17de0:	cmp	r0, #0
   17de4:	bne	17dc4 <__assert_fail@plt+0x6f28>
   17de8:	bl	18294 <__assert_fail@plt+0x73f8>
   17dec:	cmp	r4, #0
   17df0:	bne	17de8 <__assert_fail@plt+0x6f4c>
   17df4:	str	r4, [r5]
   17df8:	pop	{r4, r5, r6, pc}
   17dfc:	cmp	r0, #0
   17e00:	push	{r4, r5, r6, lr}
   17e04:	mov	r5, r1
   17e08:	ldr	r4, [r1]
   17e0c:	mov	r6, r2
   17e10:	beq	17e54 <__assert_fail@plt+0x6fb8>
   17e14:	lsr	r1, r4, #1
   17e18:	add	r3, r1, #1
   17e1c:	mvn	r3, r3
   17e20:	cmp	r4, r3
   17e24:	bhi	17e8c <__assert_fail@plt+0x6ff0>
   17e28:	add	r4, r4, #1
   17e2c:	add	r4, r4, r1
   17e30:	mov	r1, r4
   17e34:	bl	184a8 <__assert_fail@plt+0x760c>
   17e38:	cmp	r0, #0
   17e3c:	bne	17e4c <__assert_fail@plt+0x6fb0>
   17e40:	cmp	r4, #0
   17e44:	cmpne	r6, #0
   17e48:	bne	17e8c <__assert_fail@plt+0x6ff0>
   17e4c:	str	r4, [r5]
   17e50:	pop	{r4, r5, r6, pc}
   17e54:	cmp	r4, #0
   17e58:	bne	17e74 <__assert_fail@plt+0x6fd8>
   17e5c:	mov	r1, r2
   17e60:	mov	r0, #64	; 0x40
   17e64:	bl	185e8 <__assert_fail@plt+0x774c>
   17e68:	cmp	r0, #0
   17e6c:	movne	r4, r0
   17e70:	addeq	r4, r0, #1
   17e74:	mov	r2, r6
   17e78:	mov	r1, r4
   17e7c:	mov	r0, #0
   17e80:	bl	184a8 <__assert_fail@plt+0x760c>
   17e84:	cmp	r0, #0
   17e88:	bne	17e4c <__assert_fail@plt+0x6fb0>
   17e8c:	bl	18294 <__assert_fail@plt+0x73f8>
   17e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e94:	sub	sp, sp, #12
   17e98:	ldr	r6, [r1]
   17e9c:	mov	r8, r1
   17ea0:	mov	r9, r0
   17ea4:	asrs	r4, r6, #1
   17ea8:	mov	sl, r2
   17eac:	mov	fp, r3
   17eb0:	ldr	r7, [sp, #48]	; 0x30
   17eb4:	bmi	18030 <__assert_fail@plt+0x7194>
   17eb8:	mvn	r1, #-2147483648	; 0x80000000
   17ebc:	sub	r1, r1, r4
   17ec0:	cmp	r6, r1
   17ec4:	movle	r1, #0
   17ec8:	movgt	r1, #1
   17ecc:	mvn	r3, fp
   17ed0:	cmp	r1, #0
   17ed4:	addeq	r4, r4, r6
   17ed8:	mvnne	r4, #-2147483648	; 0x80000000
   17edc:	lsr	r3, r3, #31
   17ee0:	cmp	fp, r4
   17ee4:	movge	r2, #0
   17ee8:	andlt	r2, r3, #1
   17eec:	cmp	r2, #0
   17ef0:	beq	17fe0 <__assert_fail@plt+0x7144>
   17ef4:	cmp	r7, #0
   17ef8:	blt	180c8 <__assert_fail@plt+0x722c>
   17efc:	bne	180c0 <__assert_fail@plt+0x7224>
   17f00:	mov	r5, #64	; 0x40
   17f04:	mov	r1, r7
   17f08:	mov	r0, r5
   17f0c:	str	r3, [sp, #4]
   17f10:	bl	187f4 <__assert_fail@plt+0x7958>
   17f14:	mov	r1, r7
   17f18:	mov	r4, r0
   17f1c:	mov	r0, r5
   17f20:	bl	18a14 <__assert_fail@plt+0x7b78>
   17f24:	ldr	r3, [sp, #4]
   17f28:	sub	r5, r5, r1
   17f2c:	cmp	r9, #0
   17f30:	sub	r2, r4, r6
   17f34:	streq	r9, [r8]
   17f38:	cmp	r2, sl
   17f3c:	bge	17fc0 <__assert_fail@plt+0x7124>
   17f40:	cmp	sl, #0
   17f44:	blt	18060 <__assert_fail@plt+0x71c4>
   17f48:	cmp	r6, #0
   17f4c:	blt	17f6c <__assert_fail@plt+0x70d0>
   17f50:	mvn	r2, #-2147483648	; 0x80000000
   17f54:	sub	r2, r2, sl
   17f58:	cmp	r6, r2
   17f5c:	movle	r2, #0
   17f60:	movgt	r2, #1
   17f64:	cmp	r2, #0
   17f68:	bne	1805c <__assert_fail@plt+0x71c0>
   17f6c:	add	r6, r6, sl
   17f70:	cmp	fp, r6
   17f74:	movge	r3, #0
   17f78:	andlt	r3, r3, #1
   17f7c:	cmp	r3, #0
   17f80:	mov	r4, r6
   17f84:	bne	1805c <__assert_fail@plt+0x71c0>
   17f88:	cmp	r7, #0
   17f8c:	blt	18074 <__assert_fail@plt+0x71d8>
   17f90:	beq	17fbc <__assert_fail@plt+0x7120>
   17f94:	cmp	r6, #0
   17f98:	blt	18118 <__assert_fail@plt+0x727c>
   17f9c:	mov	r1, r7
   17fa0:	mvn	r0, #-2147483648	; 0x80000000
   17fa4:	bl	187f4 <__assert_fail@plt+0x7958>
   17fa8:	cmp	r6, r0
   17fac:	movle	r0, #0
   17fb0:	movgt	r0, #1
   17fb4:	cmp	r0, #0
   17fb8:	bne	1805c <__assert_fail@plt+0x71c0>
   17fbc:	mul	r5, r6, r7
   17fc0:	mov	r1, r5
   17fc4:	mov	r0, r9
   17fc8:	bl	18348 <__assert_fail@plt+0x74ac>
   17fcc:	cmp	r0, #0
   17fd0:	beq	18044 <__assert_fail@plt+0x71a8>
   17fd4:	str	r4, [r8]
   17fd8:	add	sp, sp, #12
   17fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fe0:	cmp	r7, #0
   17fe4:	blt	180a0 <__assert_fail@plt+0x7204>
   17fe8:	beq	17f00 <__assert_fail@plt+0x7064>
   17fec:	cmp	r4, #0
   17ff0:	blt	180d0 <__assert_fail@plt+0x7234>
   17ff4:	mov	r1, r7
   17ff8:	mvn	r0, #-2147483648	; 0x80000000
   17ffc:	str	r3, [sp, #4]
   18000:	bl	187f4 <__assert_fail@plt+0x7958>
   18004:	ldr	r3, [sp, #4]
   18008:	cmp	r0, r4
   1800c:	movge	r0, #0
   18010:	movlt	r0, #1
   18014:	cmp	r0, #0
   18018:	mvnne	r5, #-2147483648	; 0x80000000
   1801c:	bne	17f04 <__assert_fail@plt+0x7068>
   18020:	mul	r5, r7, r4
   18024:	cmp	r5, #63	; 0x3f
   18028:	bgt	17f2c <__assert_fail@plt+0x7090>
   1802c:	b	17f00 <__assert_fail@plt+0x7064>
   18030:	rsb	r1, r4, #-2147483648	; 0x80000000
   18034:	cmp	r6, r1
   18038:	movge	r1, #0
   1803c:	movlt	r1, #1
   18040:	b	17ecc <__assert_fail@plt+0x7030>
   18044:	adds	r5, r5, #0
   18048:	movne	r5, #1
   1804c:	cmp	r9, #0
   18050:	orreq	r5, r5, #1
   18054:	cmp	r5, #0
   18058:	beq	17fd4 <__assert_fail@plt+0x7138>
   1805c:	bl	18294 <__assert_fail@plt+0x73f8>
   18060:	rsb	r2, sl, #-2147483648	; 0x80000000
   18064:	cmp	r6, r2
   18068:	movge	r2, #0
   1806c:	movlt	r2, #1
   18070:	b	17f64 <__assert_fail@plt+0x70c8>
   18074:	cmp	r6, #0
   18078:	blt	180fc <__assert_fail@plt+0x7260>
   1807c:	cmn	r7, #1
   18080:	beq	17fbc <__assert_fail@plt+0x7120>
   18084:	mov	r1, r7
   18088:	mov	r0, #-2147483648	; 0x80000000
   1808c:	bl	187f4 <__assert_fail@plt+0x7958>
   18090:	cmp	r6, r0
   18094:	movle	r0, #0
   18098:	movgt	r0, #1
   1809c:	b	17fb4 <__assert_fail@plt+0x7118>
   180a0:	cmp	r4, #0
   180a4:	blt	1813c <__assert_fail@plt+0x72a0>
   180a8:	cmn	r7, #1
   180ac:	beq	18020 <__assert_fail@plt+0x7184>
   180b0:	str	r3, [sp, #4]
   180b4:	mov	r1, r7
   180b8:	mov	r0, #-2147483648	; 0x80000000
   180bc:	b	18000 <__assert_fail@plt+0x7164>
   180c0:	mov	r4, fp
   180c4:	b	17ff4 <__assert_fail@plt+0x7158>
   180c8:	mov	r4, fp
   180cc:	b	180a8 <__assert_fail@plt+0x720c>
   180d0:	cmn	r4, #1
   180d4:	beq	18020 <__assert_fail@plt+0x7184>
   180d8:	mov	r1, r4
   180dc:	mov	r0, #-2147483648	; 0x80000000
   180e0:	str	r3, [sp, #4]
   180e4:	bl	187f4 <__assert_fail@plt+0x7958>
   180e8:	ldr	r3, [sp, #4]
   180ec:	cmp	r7, r0
   180f0:	movle	r0, #0
   180f4:	movgt	r0, #1
   180f8:	b	18014 <__assert_fail@plt+0x7178>
   180fc:	mov	r1, r7
   18100:	mvn	r0, #-2147483648	; 0x80000000
   18104:	bl	187f4 <__assert_fail@plt+0x7958>
   18108:	cmp	r6, r0
   1810c:	movge	r0, #0
   18110:	movlt	r0, #1
   18114:	b	17fb4 <__assert_fail@plt+0x7118>
   18118:	cmn	r6, #1
   1811c:	beq	17fbc <__assert_fail@plt+0x7120>
   18120:	mov	r1, r6
   18124:	mov	r0, #-2147483648	; 0x80000000
   18128:	bl	187f4 <__assert_fail@plt+0x7958>
   1812c:	cmp	r7, r0
   18130:	movle	r0, #0
   18134:	movgt	r0, #1
   18138:	b	17fb4 <__assert_fail@plt+0x7118>
   1813c:	mov	r1, r7
   18140:	mvn	r0, #-2147483648	; 0x80000000
   18144:	str	r3, [sp, #4]
   18148:	bl	187f4 <__assert_fail@plt+0x7958>
   1814c:	ldr	r3, [sp, #4]
   18150:	cmp	r0, r4
   18154:	movle	r0, #0
   18158:	movgt	r0, #1
   1815c:	b	18014 <__assert_fail@plt+0x7178>
   18160:	push	{r4, lr}
   18164:	mov	r1, #1
   18168:	bl	182d4 <__assert_fail@plt+0x7438>
   1816c:	cmp	r0, #0
   18170:	popne	{r4, pc}
   18174:	bl	18294 <__assert_fail@plt+0x73f8>
   18178:	push	{r4, lr}
   1817c:	mov	r1, #1
   18180:	bl	182d4 <__assert_fail@plt+0x7438>
   18184:	cmp	r0, #0
   18188:	popne	{r4, pc}
   1818c:	bl	18294 <__assert_fail@plt+0x73f8>
   18190:	push	{r4, lr}
   18194:	bl	182d4 <__assert_fail@plt+0x7438>
   18198:	cmp	r0, #0
   1819c:	popne	{r4, pc}
   181a0:	bl	18294 <__assert_fail@plt+0x73f8>
   181a4:	push	{r4, lr}
   181a8:	bl	182d4 <__assert_fail@plt+0x7438>
   181ac:	cmp	r0, #0
   181b0:	popne	{r4, pc}
   181b4:	bl	18294 <__assert_fail@plt+0x73f8>
   181b8:	push	{r4, r5, r6, lr}
   181bc:	mov	r6, r0
   181c0:	mov	r0, r1
   181c4:	mov	r4, r1
   181c8:	bl	1831c <__assert_fail@plt+0x7480>
   181cc:	subs	r5, r0, #0
   181d0:	beq	181e8 <__assert_fail@plt+0x734c>
   181d4:	mov	r2, r4
   181d8:	mov	r1, r6
   181dc:	bl	10ca4 <memcpy@plt>
   181e0:	mov	r0, r5
   181e4:	pop	{r4, r5, r6, pc}
   181e8:	bl	18294 <__assert_fail@plt+0x73f8>
   181ec:	push	{r4, r5, r6, lr}
   181f0:	mov	r6, r0
   181f4:	mov	r0, r1
   181f8:	mov	r4, r1
   181fc:	bl	1831c <__assert_fail@plt+0x7480>
   18200:	subs	r5, r0, #0
   18204:	beq	1821c <__assert_fail@plt+0x7380>
   18208:	mov	r2, r4
   1820c:	mov	r1, r6
   18210:	bl	10ca4 <memcpy@plt>
   18214:	mov	r0, r5
   18218:	pop	{r4, r5, r6, pc}
   1821c:	bl	18294 <__assert_fail@plt+0x73f8>
   18220:	push	{r4, r5, r6, lr}
   18224:	mov	r6, r0
   18228:	add	r0, r1, #1
   1822c:	mov	r4, r1
   18230:	bl	1831c <__assert_fail@plt+0x7480>
   18234:	subs	r5, r0, #0
   18238:	beq	18258 <__assert_fail@plt+0x73bc>
   1823c:	mov	r3, #0
   18240:	mov	r1, r6
   18244:	strb	r3, [r5, r4]
   18248:	mov	r2, r4
   1824c:	bl	10ca4 <memcpy@plt>
   18250:	mov	r0, r5
   18254:	pop	{r4, r5, r6, pc}
   18258:	bl	18294 <__assert_fail@plt+0x73f8>
   1825c:	push	{r4, r5, r6, lr}
   18260:	mov	r6, r0
   18264:	bl	10dd0 <strlen@plt>
   18268:	add	r4, r0, #1
   1826c:	mov	r0, r4
   18270:	bl	1831c <__assert_fail@plt+0x7480>
   18274:	subs	r5, r0, #0
   18278:	beq	18290 <__assert_fail@plt+0x73f4>
   1827c:	mov	r2, r4
   18280:	mov	r1, r6
   18284:	bl	10ca4 <memcpy@plt>
   18288:	mov	r0, r5
   1828c:	pop	{r4, r5, r6, pc}
   18290:	bl	18294 <__assert_fail@plt+0x73f8>
   18294:	ldr	r3, [pc, #44]	; 182c8 <__assert_fail@plt+0x742c>
   18298:	push	{r4, lr}
   1829c:	mov	r2, #5
   182a0:	ldr	r1, [pc, #36]	; 182cc <__assert_fail@plt+0x7430>
   182a4:	mov	r0, #0
   182a8:	ldr	r4, [r3]
   182ac:	bl	10cd4 <dcgettext@plt>
   182b0:	ldr	r2, [pc, #24]	; 182d0 <__assert_fail@plt+0x7434>
   182b4:	mov	r1, #0
   182b8:	mov	r3, r0
   182bc:	mov	r0, r4
   182c0:	bl	10d4c <error@plt>
   182c4:	bl	10e84 <abort@plt>
   182c8:	andeq	sl, r2, r8, ror #1
   182cc:	andeq	r9, r1, r4, ror r3
   182d0:	andeq	r8, r1, r8, ror #29
   182d4:	cmp	r1, #0
   182d8:	cmpne	r0, #0
   182dc:	moveq	r1, #1
   182e0:	moveq	r0, r1
   182e4:	umull	r2, r3, r0, r1
   182e8:	adds	r3, r3, #0
   182ec:	movne	r3, #1
   182f0:	cmp	r2, #0
   182f4:	blt	18304 <__assert_fail@plt+0x7468>
   182f8:	cmp	r3, #0
   182fc:	bne	18304 <__assert_fail@plt+0x7468>
   18300:	b	10c44 <calloc@plt>
   18304:	push	{r4, lr}
   18308:	bl	10ddc <__errno_location@plt>
   1830c:	mov	r3, #12
   18310:	str	r3, [r0]
   18314:	mov	r0, #0
   18318:	pop	{r4, pc}
   1831c:	cmp	r0, #0
   18320:	moveq	r0, #1
   18324:	cmp	r0, #0
   18328:	blt	18330 <__assert_fail@plt+0x7494>
   1832c:	b	10d70 <malloc@plt>
   18330:	push	{r4, lr}
   18334:	bl	10ddc <__errno_location@plt>
   18338:	mov	r3, #12
   1833c:	str	r3, [r0]
   18340:	mov	r0, #0
   18344:	pop	{r4, pc}
   18348:	cmp	r0, #0
   1834c:	beq	18370 <__assert_fail@plt+0x74d4>
   18350:	cmp	r1, #0
   18354:	push	{lr}		; (str lr, [sp, #-4]!)
   18358:	sub	sp, sp, #12
   1835c:	beq	18378 <__assert_fail@plt+0x74dc>
   18360:	blt	18390 <__assert_fail@plt+0x74f4>
   18364:	add	sp, sp, #12
   18368:	pop	{lr}		; (ldr lr, [sp], #4)
   1836c:	b	10cec <realloc@plt>
   18370:	mov	r0, r1
   18374:	b	1831c <__assert_fail@plt+0x7480>
   18378:	str	r1, [sp, #4]
   1837c:	bl	129ec <__assert_fail@plt+0x1b50>
   18380:	ldr	r3, [sp, #4]
   18384:	mov	r0, r3
   18388:	add	sp, sp, #12
   1838c:	pop	{pc}		; (ldr pc, [sp], #4)
   18390:	bl	10ddc <__errno_location@plt>
   18394:	mov	r2, #12
   18398:	mov	r3, #0
   1839c:	str	r2, [r0]
   183a0:	b	18384 <__assert_fail@plt+0x74e8>
   183a4:	push	{r4, r5, r6, lr}
   183a8:	mov	r4, r0
   183ac:	bl	10d34 <__fpending@plt>
   183b0:	ldr	r5, [r4]
   183b4:	and	r5, r5, #32
   183b8:	mov	r6, r0
   183bc:	mov	r0, r4
   183c0:	bl	128ec <__assert_fail@plt+0x1a50>
   183c4:	cmp	r5, #0
   183c8:	mov	r4, r0
   183cc:	bne	183ec <__assert_fail@plt+0x7550>
   183d0:	cmp	r0, #0
   183d4:	beq	183e4 <__assert_fail@plt+0x7548>
   183d8:	cmp	r6, #0
   183dc:	beq	18408 <__assert_fail@plt+0x756c>
   183e0:	mvn	r4, #0
   183e4:	mov	r0, r4
   183e8:	pop	{r4, r5, r6, pc}
   183ec:	cmp	r0, #0
   183f0:	bne	183e0 <__assert_fail@plt+0x7544>
   183f4:	bl	10ddc <__errno_location@plt>
   183f8:	str	r4, [r0]
   183fc:	mvn	r4, #0
   18400:	mov	r0, r4
   18404:	pop	{r4, r5, r6, pc}
   18408:	bl	10ddc <__errno_location@plt>
   1840c:	ldr	r4, [r0]
   18410:	subs	r4, r4, #9
   18414:	mvnne	r4, #0
   18418:	mov	r0, r4
   1841c:	pop	{r4, r5, r6, pc}
   18420:	push	{r4, lr}
   18424:	mov	r0, #14
   18428:	bl	10e60 <nl_langinfo@plt>
   1842c:	cmp	r0, #0
   18430:	beq	18448 <__assert_fail@plt+0x75ac>
   18434:	ldrb	r2, [r0]
   18438:	ldr	r3, [pc, #16]	; 18450 <__assert_fail@plt+0x75b4>
   1843c:	cmp	r2, #0
   18440:	moveq	r0, r3
   18444:	pop	{r4, pc}
   18448:	ldr	r0, [pc]	; 18450 <__assert_fail@plt+0x75b4>
   1844c:	pop	{r4, pc}
   18450:	andeq	r9, r1, r8, lsl #7
   18454:	push	{r4, r5, r6, r7, lr}
   18458:	subs	r6, r0, #0
   1845c:	sub	sp, sp, #12
   18460:	addeq	r6, sp, #4
   18464:	mov	r0, r6
   18468:	mov	r5, r2
   1846c:	mov	r7, r1
   18470:	bl	10d40 <mbrtowc@plt>
   18474:	cmp	r5, #0
   18478:	cmnne	r0, #3
   1847c:	mov	r4, r0
   18480:	bls	1849c <__assert_fail@plt+0x7600>
   18484:	mov	r0, #0
   18488:	bl	184f4 <__assert_fail@plt+0x7658>
   1848c:	cmp	r0, #0
   18490:	moveq	r4, #1
   18494:	ldrbeq	r3, [r7]
   18498:	streq	r3, [r6]
   1849c:	mov	r0, r4
   184a0:	add	sp, sp, #12
   184a4:	pop	{r4, r5, r6, r7, pc}
   184a8:	push	{r4, r5, r6, lr}
   184ac:	subs	r4, r2, #0
   184b0:	mov	r6, r0
   184b4:	mov	r5, r1
   184b8:	beq	184e4 <__assert_fail@plt+0x7648>
   184bc:	mov	r1, r4
   184c0:	mvn	r0, #0
   184c4:	bl	185e8 <__assert_fail@plt+0x774c>
   184c8:	cmp	r0, r5
   184cc:	bcs	184e4 <__assert_fail@plt+0x7648>
   184d0:	bl	10ddc <__errno_location@plt>
   184d4:	mov	r3, #12
   184d8:	str	r3, [r0]
   184dc:	mov	r0, #0
   184e0:	pop	{r4, r5, r6, pc}
   184e4:	mul	r1, r5, r4
   184e8:	mov	r0, r6
   184ec:	pop	{r4, r5, r6, lr}
   184f0:	b	18348 <__assert_fail@plt+0x74ac>
   184f4:	push	{lr}		; (str lr, [sp, #-4]!)
   184f8:	sub	sp, sp, #268	; 0x10c
   184fc:	add	r1, sp, #4
   18500:	ldr	r2, [pc, #60]	; 18544 <__assert_fail@plt+0x76a8>
   18504:	bl	18550 <__assert_fail@plt+0x76b4>
   18508:	cmp	r0, #0
   1850c:	movne	r0, #0
   18510:	bne	1853c <__assert_fail@plt+0x76a0>
   18514:	ldr	r1, [pc, #44]	; 18548 <__assert_fail@plt+0x76ac>
   18518:	add	r0, sp, #4
   1851c:	bl	10c68 <strcmp@plt>
   18520:	cmp	r0, #0
   18524:	beq	1853c <__assert_fail@plt+0x76a0>
   18528:	add	r0, sp, #4
   1852c:	ldr	r1, [pc, #24]	; 1854c <__assert_fail@plt+0x76b0>
   18530:	bl	10c68 <strcmp@plt>
   18534:	adds	r0, r0, #0
   18538:	movne	r0, #1
   1853c:	add	sp, sp, #268	; 0x10c
   18540:	pop	{pc}		; (ldr pc, [sp], #4)
   18544:	andeq	r0, r0, r1, lsl #2
   18548:	muleq	r1, r0, r3
   1854c:	muleq	r1, r4, r3
   18550:	push	{r4, r5, r6, lr}
   18554:	mov	r5, r1
   18558:	mov	r1, #0
   1855c:	mov	r4, r2
   18560:	bl	10e48 <setlocale@plt>
   18564:	subs	r6, r0, #0
   18568:	beq	185c4 <__assert_fail@plt+0x7728>
   1856c:	bl	10dd0 <strlen@plt>
   18570:	cmp	r4, r0
   18574:	bhi	185ac <__assert_fail@plt+0x7710>
   18578:	cmp	r4, #0
   1857c:	bne	18588 <__assert_fail@plt+0x76ec>
   18580:	mov	r0, #34	; 0x22
   18584:	pop	{r4, r5, r6, pc}
   18588:	sub	r4, r4, #1
   1858c:	mov	r1, r6
   18590:	mov	r2, r4
   18594:	mov	r0, r5
   18598:	bl	10ca4 <memcpy@plt>
   1859c:	mov	r3, #0
   185a0:	strb	r3, [r5, r4]
   185a4:	mov	r0, #34	; 0x22
   185a8:	pop	{r4, r5, r6, pc}
   185ac:	add	r2, r0, #1
   185b0:	mov	r1, r6
   185b4:	mov	r0, r5
   185b8:	bl	10ca4 <memcpy@plt>
   185bc:	mov	r0, #0
   185c0:	pop	{r4, r5, r6, pc}
   185c4:	cmp	r4, #0
   185c8:	beq	185d8 <__assert_fail@plt+0x773c>
   185cc:	strb	r6, [r5]
   185d0:	mov	r0, #22
   185d4:	pop	{r4, r5, r6, pc}
   185d8:	mov	r0, #22
   185dc:	pop	{r4, r5, r6, pc}
   185e0:	mov	r1, #0
   185e4:	b	10e48 <setlocale@plt>
   185e8:	subs	r2, r1, #1
   185ec:	bxeq	lr
   185f0:	bcc	187c8 <__assert_fail@plt+0x792c>
   185f4:	cmp	r0, r1
   185f8:	bls	187ac <__assert_fail@plt+0x7910>
   185fc:	tst	r1, r2
   18600:	beq	187b8 <__assert_fail@plt+0x791c>
   18604:	clz	r3, r0
   18608:	clz	r2, r1
   1860c:	sub	r3, r2, r3
   18610:	rsbs	r3, r3, #31
   18614:	addne	r3, r3, r3, lsl #1
   18618:	mov	r2, #0
   1861c:	addne	pc, pc, r3, lsl #2
   18620:	nop			; (mov r0, r0)
   18624:	cmp	r0, r1, lsl #31
   18628:	adc	r2, r2, r2
   1862c:	subcs	r0, r0, r1, lsl #31
   18630:	cmp	r0, r1, lsl #30
   18634:	adc	r2, r2, r2
   18638:	subcs	r0, r0, r1, lsl #30
   1863c:	cmp	r0, r1, lsl #29
   18640:	adc	r2, r2, r2
   18644:	subcs	r0, r0, r1, lsl #29
   18648:	cmp	r0, r1, lsl #28
   1864c:	adc	r2, r2, r2
   18650:	subcs	r0, r0, r1, lsl #28
   18654:	cmp	r0, r1, lsl #27
   18658:	adc	r2, r2, r2
   1865c:	subcs	r0, r0, r1, lsl #27
   18660:	cmp	r0, r1, lsl #26
   18664:	adc	r2, r2, r2
   18668:	subcs	r0, r0, r1, lsl #26
   1866c:	cmp	r0, r1, lsl #25
   18670:	adc	r2, r2, r2
   18674:	subcs	r0, r0, r1, lsl #25
   18678:	cmp	r0, r1, lsl #24
   1867c:	adc	r2, r2, r2
   18680:	subcs	r0, r0, r1, lsl #24
   18684:	cmp	r0, r1, lsl #23
   18688:	adc	r2, r2, r2
   1868c:	subcs	r0, r0, r1, lsl #23
   18690:	cmp	r0, r1, lsl #22
   18694:	adc	r2, r2, r2
   18698:	subcs	r0, r0, r1, lsl #22
   1869c:	cmp	r0, r1, lsl #21
   186a0:	adc	r2, r2, r2
   186a4:	subcs	r0, r0, r1, lsl #21
   186a8:	cmp	r0, r1, lsl #20
   186ac:	adc	r2, r2, r2
   186b0:	subcs	r0, r0, r1, lsl #20
   186b4:	cmp	r0, r1, lsl #19
   186b8:	adc	r2, r2, r2
   186bc:	subcs	r0, r0, r1, lsl #19
   186c0:	cmp	r0, r1, lsl #18
   186c4:	adc	r2, r2, r2
   186c8:	subcs	r0, r0, r1, lsl #18
   186cc:	cmp	r0, r1, lsl #17
   186d0:	adc	r2, r2, r2
   186d4:	subcs	r0, r0, r1, lsl #17
   186d8:	cmp	r0, r1, lsl #16
   186dc:	adc	r2, r2, r2
   186e0:	subcs	r0, r0, r1, lsl #16
   186e4:	cmp	r0, r1, lsl #15
   186e8:	adc	r2, r2, r2
   186ec:	subcs	r0, r0, r1, lsl #15
   186f0:	cmp	r0, r1, lsl #14
   186f4:	adc	r2, r2, r2
   186f8:	subcs	r0, r0, r1, lsl #14
   186fc:	cmp	r0, r1, lsl #13
   18700:	adc	r2, r2, r2
   18704:	subcs	r0, r0, r1, lsl #13
   18708:	cmp	r0, r1, lsl #12
   1870c:	adc	r2, r2, r2
   18710:	subcs	r0, r0, r1, lsl #12
   18714:	cmp	r0, r1, lsl #11
   18718:	adc	r2, r2, r2
   1871c:	subcs	r0, r0, r1, lsl #11
   18720:	cmp	r0, r1, lsl #10
   18724:	adc	r2, r2, r2
   18728:	subcs	r0, r0, r1, lsl #10
   1872c:	cmp	r0, r1, lsl #9
   18730:	adc	r2, r2, r2
   18734:	subcs	r0, r0, r1, lsl #9
   18738:	cmp	r0, r1, lsl #8
   1873c:	adc	r2, r2, r2
   18740:	subcs	r0, r0, r1, lsl #8
   18744:	cmp	r0, r1, lsl #7
   18748:	adc	r2, r2, r2
   1874c:	subcs	r0, r0, r1, lsl #7
   18750:	cmp	r0, r1, lsl #6
   18754:	adc	r2, r2, r2
   18758:	subcs	r0, r0, r1, lsl #6
   1875c:	cmp	r0, r1, lsl #5
   18760:	adc	r2, r2, r2
   18764:	subcs	r0, r0, r1, lsl #5
   18768:	cmp	r0, r1, lsl #4
   1876c:	adc	r2, r2, r2
   18770:	subcs	r0, r0, r1, lsl #4
   18774:	cmp	r0, r1, lsl #3
   18778:	adc	r2, r2, r2
   1877c:	subcs	r0, r0, r1, lsl #3
   18780:	cmp	r0, r1, lsl #2
   18784:	adc	r2, r2, r2
   18788:	subcs	r0, r0, r1, lsl #2
   1878c:	cmp	r0, r1, lsl #1
   18790:	adc	r2, r2, r2
   18794:	subcs	r0, r0, r1, lsl #1
   18798:	cmp	r0, r1
   1879c:	adc	r2, r2, r2
   187a0:	subcs	r0, r0, r1
   187a4:	mov	r0, r2
   187a8:	bx	lr
   187ac:	moveq	r0, #1
   187b0:	movne	r0, #0
   187b4:	bx	lr
   187b8:	clz	r2, r1
   187bc:	rsb	r2, r2, #31
   187c0:	lsr	r0, r0, r2
   187c4:	bx	lr
   187c8:	cmp	r0, #0
   187cc:	mvnne	r0, #0
   187d0:	b	18a34 <__assert_fail@plt+0x7b98>
   187d4:	cmp	r1, #0
   187d8:	beq	187c8 <__assert_fail@plt+0x792c>
   187dc:	push	{r0, r1, lr}
   187e0:	bl	185e8 <__assert_fail@plt+0x774c>
   187e4:	pop	{r1, r2, lr}
   187e8:	mul	r3, r2, r0
   187ec:	sub	r1, r1, r3
   187f0:	bx	lr
   187f4:	cmp	r1, #0
   187f8:	beq	18a04 <__assert_fail@plt+0x7b68>
   187fc:	eor	ip, r0, r1
   18800:	rsbmi	r1, r1, #0
   18804:	subs	r2, r1, #1
   18808:	beq	189d0 <__assert_fail@plt+0x7b34>
   1880c:	movs	r3, r0
   18810:	rsbmi	r3, r0, #0
   18814:	cmp	r3, r1
   18818:	bls	189dc <__assert_fail@plt+0x7b40>
   1881c:	tst	r1, r2
   18820:	beq	189ec <__assert_fail@plt+0x7b50>
   18824:	clz	r2, r3
   18828:	clz	r0, r1
   1882c:	sub	r2, r0, r2
   18830:	rsbs	r2, r2, #31
   18834:	addne	r2, r2, r2, lsl #1
   18838:	mov	r0, #0
   1883c:	addne	pc, pc, r2, lsl #2
   18840:	nop			; (mov r0, r0)
   18844:	cmp	r3, r1, lsl #31
   18848:	adc	r0, r0, r0
   1884c:	subcs	r3, r3, r1, lsl #31
   18850:	cmp	r3, r1, lsl #30
   18854:	adc	r0, r0, r0
   18858:	subcs	r3, r3, r1, lsl #30
   1885c:	cmp	r3, r1, lsl #29
   18860:	adc	r0, r0, r0
   18864:	subcs	r3, r3, r1, lsl #29
   18868:	cmp	r3, r1, lsl #28
   1886c:	adc	r0, r0, r0
   18870:	subcs	r3, r3, r1, lsl #28
   18874:	cmp	r3, r1, lsl #27
   18878:	adc	r0, r0, r0
   1887c:	subcs	r3, r3, r1, lsl #27
   18880:	cmp	r3, r1, lsl #26
   18884:	adc	r0, r0, r0
   18888:	subcs	r3, r3, r1, lsl #26
   1888c:	cmp	r3, r1, lsl #25
   18890:	adc	r0, r0, r0
   18894:	subcs	r3, r3, r1, lsl #25
   18898:	cmp	r3, r1, lsl #24
   1889c:	adc	r0, r0, r0
   188a0:	subcs	r3, r3, r1, lsl #24
   188a4:	cmp	r3, r1, lsl #23
   188a8:	adc	r0, r0, r0
   188ac:	subcs	r3, r3, r1, lsl #23
   188b0:	cmp	r3, r1, lsl #22
   188b4:	adc	r0, r0, r0
   188b8:	subcs	r3, r3, r1, lsl #22
   188bc:	cmp	r3, r1, lsl #21
   188c0:	adc	r0, r0, r0
   188c4:	subcs	r3, r3, r1, lsl #21
   188c8:	cmp	r3, r1, lsl #20
   188cc:	adc	r0, r0, r0
   188d0:	subcs	r3, r3, r1, lsl #20
   188d4:	cmp	r3, r1, lsl #19
   188d8:	adc	r0, r0, r0
   188dc:	subcs	r3, r3, r1, lsl #19
   188e0:	cmp	r3, r1, lsl #18
   188e4:	adc	r0, r0, r0
   188e8:	subcs	r3, r3, r1, lsl #18
   188ec:	cmp	r3, r1, lsl #17
   188f0:	adc	r0, r0, r0
   188f4:	subcs	r3, r3, r1, lsl #17
   188f8:	cmp	r3, r1, lsl #16
   188fc:	adc	r0, r0, r0
   18900:	subcs	r3, r3, r1, lsl #16
   18904:	cmp	r3, r1, lsl #15
   18908:	adc	r0, r0, r0
   1890c:	subcs	r3, r3, r1, lsl #15
   18910:	cmp	r3, r1, lsl #14
   18914:	adc	r0, r0, r0
   18918:	subcs	r3, r3, r1, lsl #14
   1891c:	cmp	r3, r1, lsl #13
   18920:	adc	r0, r0, r0
   18924:	subcs	r3, r3, r1, lsl #13
   18928:	cmp	r3, r1, lsl #12
   1892c:	adc	r0, r0, r0
   18930:	subcs	r3, r3, r1, lsl #12
   18934:	cmp	r3, r1, lsl #11
   18938:	adc	r0, r0, r0
   1893c:	subcs	r3, r3, r1, lsl #11
   18940:	cmp	r3, r1, lsl #10
   18944:	adc	r0, r0, r0
   18948:	subcs	r3, r3, r1, lsl #10
   1894c:	cmp	r3, r1, lsl #9
   18950:	adc	r0, r0, r0
   18954:	subcs	r3, r3, r1, lsl #9
   18958:	cmp	r3, r1, lsl #8
   1895c:	adc	r0, r0, r0
   18960:	subcs	r3, r3, r1, lsl #8
   18964:	cmp	r3, r1, lsl #7
   18968:	adc	r0, r0, r0
   1896c:	subcs	r3, r3, r1, lsl #7
   18970:	cmp	r3, r1, lsl #6
   18974:	adc	r0, r0, r0
   18978:	subcs	r3, r3, r1, lsl #6
   1897c:	cmp	r3, r1, lsl #5
   18980:	adc	r0, r0, r0
   18984:	subcs	r3, r3, r1, lsl #5
   18988:	cmp	r3, r1, lsl #4
   1898c:	adc	r0, r0, r0
   18990:	subcs	r3, r3, r1, lsl #4
   18994:	cmp	r3, r1, lsl #3
   18998:	adc	r0, r0, r0
   1899c:	subcs	r3, r3, r1, lsl #3
   189a0:	cmp	r3, r1, lsl #2
   189a4:	adc	r0, r0, r0
   189a8:	subcs	r3, r3, r1, lsl #2
   189ac:	cmp	r3, r1, lsl #1
   189b0:	adc	r0, r0, r0
   189b4:	subcs	r3, r3, r1, lsl #1
   189b8:	cmp	r3, r1
   189bc:	adc	r0, r0, r0
   189c0:	subcs	r3, r3, r1
   189c4:	cmp	ip, #0
   189c8:	rsbmi	r0, r0, #0
   189cc:	bx	lr
   189d0:	teq	ip, r0
   189d4:	rsbmi	r0, r0, #0
   189d8:	bx	lr
   189dc:	movcc	r0, #0
   189e0:	asreq	r0, ip, #31
   189e4:	orreq	r0, r0, #1
   189e8:	bx	lr
   189ec:	clz	r2, r1
   189f0:	rsb	r2, r2, #31
   189f4:	cmp	ip, #0
   189f8:	lsr	r0, r3, r2
   189fc:	rsbmi	r0, r0, #0
   18a00:	bx	lr
   18a04:	cmp	r0, #0
   18a08:	mvngt	r0, #-2147483648	; 0x80000000
   18a0c:	movlt	r0, #-2147483648	; 0x80000000
   18a10:	b	18a34 <__assert_fail@plt+0x7b98>
   18a14:	cmp	r1, #0
   18a18:	beq	18a04 <__assert_fail@plt+0x7b68>
   18a1c:	push	{r0, r1, lr}
   18a20:	bl	187fc <__assert_fail@plt+0x7960>
   18a24:	pop	{r1, r2, lr}
   18a28:	mul	r3, r2, r0
   18a2c:	sub	r1, r1, r3
   18a30:	bx	lr
   18a34:	push	{r1, lr}
   18a38:	mov	r0, #8
   18a3c:	bl	10c5c <raise@plt>
   18a40:	pop	{r1, pc}
   18a44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18a48:	mov	r7, r0
   18a4c:	ldr	r6, [pc, #72]	; 18a9c <__assert_fail@plt+0x7c00>
   18a50:	ldr	r5, [pc, #72]	; 18aa0 <__assert_fail@plt+0x7c04>
   18a54:	add	r6, pc, r6
   18a58:	add	r5, pc, r5
   18a5c:	sub	r6, r6, r5
   18a60:	mov	r8, r1
   18a64:	mov	r9, r2
   18a68:	bl	10c24 <calloc@plt-0x20>
   18a6c:	asrs	r6, r6, #2
   18a70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a74:	mov	r4, #0
   18a78:	add	r4, r4, #1
   18a7c:	ldr	r3, [r5], #4
   18a80:	mov	r2, r9
   18a84:	mov	r1, r8
   18a88:	mov	r0, r7
   18a8c:	blx	r3
   18a90:	cmp	r6, r4
   18a94:	bne	18a78 <__assert_fail@plt+0x7bdc>
   18a98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a9c:			; <UNDEFINED> instruction: 0x000114b4
   18aa0:	andeq	r1, r1, ip, lsr #9
   18aa4:	bx	lr
   18aa8:	ldr	r3, [pc, #12]	; 18abc <__assert_fail@plt+0x7c20>
   18aac:	mov	r1, #0
   18ab0:	add	r3, pc, r3
   18ab4:	ldr	r2, [r3]
   18ab8:	b	10de8 <__cxa_atexit@plt>
   18abc:	andeq	r1, r1, r8, lsr #12

Disassembly of section .fini:

00018ac0 <.fini>:
   18ac0:	push	{r3, lr}
   18ac4:	pop	{r3, pc}
