
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	1118c <__assert_fail@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <calloc@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <calloc@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	r6, r1, r4, asr r1

00010eb0 <calloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <fputs_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <raise@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <strcmp@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <fflush@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <free@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <execvp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <mbsinit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <dcgettext@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <realloc@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <textdomain@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <iswprint@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <readlink@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <lseek64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <__ctype_get_mb_cur_max@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <__fpending@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <ferror_unlocked@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <mbrtowc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <error@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <__asprintf_chk@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <getenv@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <malloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <__libc_start_main@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__freading@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <__gmon_start__@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <getopt_long@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <__ctype_b_loc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <exit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <strlen@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <strchr@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <__errno_location@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <__cxa_atexit@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <memset@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <__printf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <fileno@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <strtoumax@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <__fprintf_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #28]!

00011090 <access@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #20]!

0001109c <fclose@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <fseeko64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <strtok@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <setlocale@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <putenv@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <toupper@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <strrchr@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <nl_langinfo@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <bindtextdomain@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <__xstat64@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <fputs@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strncmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <abort@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <__mempcpy_chk@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <__assert_fail@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

Disassembly of section .text:

00011150 <.text>:
   11150:	mov	fp, #0
   11154:	mov	lr, #0
   11158:	pop	{r1}		; (ldr r1, [sp], #4)
   1115c:	mov	r2, sp
   11160:	push	{r2}		; (str r2, [sp, #-4]!)
   11164:	push	{r0}		; (str r0, [sp, #-4]!)
   11168:	ldr	ip, [pc, #16]	; 11180 <__assert_fail@plt+0x3c>
   1116c:	push	{ip}		; (str ip, [sp, #-4]!)
   11170:	ldr	r0, [pc, #12]	; 11184 <__assert_fail@plt+0x40>
   11174:	ldr	r3, [pc, #12]	; 11188 <__assert_fail@plt+0x44>
   11178:	bl	10fdc <__libc_start_main@plt>
   1117c:	bl	1112c <abort@plt>
   11180:	andeq	r5, r1, r4, lsr r3
   11184:	andeq	r1, r1, ip, lsl #10
   11188:	ldrdeq	r5, [r1], -r4
   1118c:	ldr	r3, [pc, #20]	; 111a8 <__assert_fail@plt+0x64>
   11190:	ldr	r2, [pc, #20]	; 111ac <__assert_fail@plt+0x68>
   11194:	add	r3, pc, r3
   11198:	ldr	r2, [r3, r2]
   1119c:	cmp	r2, #0
   111a0:	bxeq	lr
   111a4:	b	10ff4 <__gmon_start__@plt>
   111a8:	andeq	r5, r1, r4, ror #28
   111ac:	andeq	r0, r0, ip, ror #1
   111b0:	ldr	r0, [pc, #24]	; 111d0 <__assert_fail@plt+0x8c>
   111b4:	ldr	r3, [pc, #24]	; 111d4 <__assert_fail@plt+0x90>
   111b8:	cmp	r3, r0
   111bc:	bxeq	lr
   111c0:	ldr	r3, [pc, #16]	; 111d8 <__assert_fail@plt+0x94>
   111c4:	cmp	r3, #0
   111c8:	bxeq	lr
   111cc:	bx	r3
   111d0:	andeq	r7, r2, r0, asr #2
   111d4:	andeq	r7, r2, r0, asr #2
   111d8:	andeq	r0, r0, r0
   111dc:	ldr	r0, [pc, #36]	; 11208 <__assert_fail@plt+0xc4>
   111e0:	ldr	r1, [pc, #36]	; 1120c <__assert_fail@plt+0xc8>
   111e4:	sub	r1, r1, r0
   111e8:	asr	r1, r1, #2
   111ec:	add	r1, r1, r1, lsr #31
   111f0:	asrs	r1, r1, #1
   111f4:	bxeq	lr
   111f8:	ldr	r3, [pc, #16]	; 11210 <__assert_fail@plt+0xcc>
   111fc:	cmp	r3, #0
   11200:	bxeq	lr
   11204:	bx	r3
   11208:	andeq	r7, r2, r0, asr #2
   1120c:	andeq	r7, r2, r0, asr #2
   11210:	andeq	r0, r0, r0
   11214:	push	{r4, lr}
   11218:	ldr	r4, [pc, #24]	; 11238 <__assert_fail@plt+0xf4>
   1121c:	ldrb	r3, [r4]
   11220:	cmp	r3, #0
   11224:	popne	{r4, pc}
   11228:	bl	111b0 <__assert_fail@plt+0x6c>
   1122c:	mov	r3, #1
   11230:	strb	r3, [r4]
   11234:	pop	{r4, pc}
   11238:	andeq	r7, r2, ip, asr r1
   1123c:	b	111dc <__assert_fail@plt+0x98>
   11240:	push	{fp, lr}
   11244:	mov	fp, sp
   11248:	sub	sp, sp, #56	; 0x38
   1124c:	mov	r8, r0
   11250:	cmp	r0, #0
   11254:	bne	114cc <__assert_fail@plt+0x388>
   11258:	movw	r1, #21395	; 0x5393
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	movt	r1, #1
   11268:	bl	10f34 <dcgettext@plt>
   1126c:	mov	r1, r0
   11270:	movw	r0, #29072	; 0x7190
   11274:	movt	r0, #2
   11278:	ldr	r2, [r0]
   1127c:	mov	r0, #1
   11280:	bl	11060 <__printf_chk@plt>
   11284:	movw	r1, #21424	; 0x53b0
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10f34 <dcgettext@plt>
   11298:	movw	r9, #29012	; 0x7154
   1129c:	movt	r9, #2
   112a0:	ldr	r1, [r9]
   112a4:	bl	10ebc <fputs_unlocked@plt>
   112a8:	movw	r1, #22756	; 0x58e4
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	movt	r1, #1
   112b8:	bl	10f34 <dcgettext@plt>
   112bc:	ldr	r1, [r9]
   112c0:	bl	10ebc <fputs_unlocked@plt>
   112c4:	movw	r1, #21499	; 0x53fb
   112c8:	mov	r0, #0
   112cc:	mov	r2, #5
   112d0:	movt	r1, #1
   112d4:	bl	10f34 <dcgettext@plt>
   112d8:	ldr	r1, [r9]
   112dc:	bl	10ebc <fputs_unlocked@plt>
   112e0:	movw	r1, #21681	; 0x54b1
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	movt	r1, #1
   112f0:	bl	10f34 <dcgettext@plt>
   112f4:	ldr	r1, [r9]
   112f8:	bl	10ebc <fputs_unlocked@plt>
   112fc:	movw	r1, #21726	; 0x54de
   11300:	mov	r0, #0
   11304:	mov	r2, #5
   11308:	movt	r1, #1
   1130c:	bl	10f34 <dcgettext@plt>
   11310:	ldr	r1, [r9]
   11314:	bl	10ebc <fputs_unlocked@plt>
   11318:	movw	r1, #21780	; 0x5514
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10f34 <dcgettext@plt>
   1132c:	ldr	r1, [r9]
   11330:	bl	10ebc <fputs_unlocked@plt>
   11334:	movw	r1, #21889	; 0x5581
   11338:	mov	r0, #0
   1133c:	mov	r2, #5
   11340:	movt	r1, #1
   11344:	bl	10f34 <dcgettext@plt>
   11348:	ldr	r1, [r9]
   1134c:	bl	10ebc <fputs_unlocked@plt>
   11350:	movw	r1, #21951	; 0x55bf
   11354:	mov	r0, #0
   11358:	mov	r2, #5
   1135c:	movt	r1, #1
   11360:	bl	10f34 <dcgettext@plt>
   11364:	ldr	r1, [r9]
   11368:	bl	10ebc <fputs_unlocked@plt>
   1136c:	movw	r1, #22263	; 0x56f7
   11370:	mov	r0, #0
   11374:	mov	r2, #5
   11378:	movt	r1, #1
   1137c:	bl	10f34 <dcgettext@plt>
   11380:	ldr	r1, [r9]
   11384:	bl	10ebc <fputs_unlocked@plt>
   11388:	movw	r0, #23456	; 0x5ba0
   1138c:	mov	r6, sp
   11390:	movt	r0, #1
   11394:	mov	r1, r6
   11398:	ldm	r0!, {r2, r3, r4, r5}
   1139c:	stmia	r1!, {r2, r3, r4, r5}
   113a0:	ldm	r0!, {r2, r3, r4, r5, r7}
   113a4:	stmia	r1!, {r2, r3, r4, r5, r7}
   113a8:	ldm	r0, {r2, r3, r4, r5, r7}
   113ac:	stm	r1, {r2, r3, r4, r5, r7}
   113b0:	movw	r1, #22831	; 0x592f
   113b4:	movw	r5, #22530	; 0x5802
   113b8:	movt	r1, #1
   113bc:	movt	r5, #1
   113c0:	mov	r0, r5
   113c4:	bl	10ed4 <strcmp@plt>
   113c8:	cmp	r0, #0
   113cc:	ldrne	r1, [r6, #8]!
   113d0:	cmpne	r1, #0
   113d4:	bne	113c0 <__assert_fail@plt+0x27c>
   113d8:	ldr	r6, [r6, #4]
   113dc:	movw	r1, #22926	; 0x598e
   113e0:	mov	r0, #0
   113e4:	mov	r2, #5
   113e8:	movt	r1, #1
   113ec:	bl	10f34 <dcgettext@plt>
   113f0:	movw	r2, #22621	; 0x585d
   113f4:	movw	r3, #22949	; 0x59a5
   113f8:	mov	r1, r0
   113fc:	mov	r0, #1
   11400:	movt	r2, #1
   11404:	movt	r3, #1
   11408:	bl	11060 <__printf_chk@plt>
   1140c:	cmp	r6, #0
   11410:	mov	r0, #5
   11414:	mov	r1, #0
   11418:	moveq	r6, r5
   1141c:	bl	110c0 <setlocale@plt>
   11420:	cmp	r0, #0
   11424:	beq	1145c <__assert_fail@plt+0x318>
   11428:	movw	r1, #22989	; 0x59cd
   1142c:	mov	r2, #3
   11430:	movt	r1, #1
   11434:	bl	11120 <strncmp@plt>
   11438:	cmp	r0, #0
   1143c:	beq	1145c <__assert_fail@plt+0x318>
   11440:	movw	r1, #22993	; 0x59d1
   11444:	mov	r0, #0
   11448:	mov	r2, #5
   1144c:	movt	r1, #1
   11450:	bl	10f34 <dcgettext@plt>
   11454:	ldr	r1, [r9]
   11458:	bl	10ebc <fputs_unlocked@plt>
   1145c:	movw	r1, #23064	; 0x5a18
   11460:	mov	r0, #0
   11464:	mov	r2, #5
   11468:	movt	r1, #1
   1146c:	bl	10f34 <dcgettext@plt>
   11470:	movw	r2, #22949	; 0x59a5
   11474:	mov	r1, r0
   11478:	mov	r0, #1
   1147c:	mov	r3, r5
   11480:	movt	r2, #1
   11484:	bl	11060 <__printf_chk@plt>
   11488:	movw	r1, #23091	; 0x5a33
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	10f34 <dcgettext@plt>
   1149c:	movw	r3, #23141	; 0x5a65
   114a0:	mov	r1, r0
   114a4:	movw	r0, #22859	; 0x594b
   114a8:	cmp	r6, r5
   114ac:	mov	r2, r6
   114b0:	movt	r0, #1
   114b4:	movt	r3, #1
   114b8:	moveq	r3, r0
   114bc:	mov	r0, #1
   114c0:	bl	11060 <__printf_chk@plt>
   114c4:	mov	r0, r8
   114c8:	bl	11018 <exit@plt>
   114cc:	movw	r0, #29008	; 0x7150
   114d0:	movw	r1, #21356	; 0x536c
   114d4:	mov	r2, #5
   114d8:	movt	r0, #2
   114dc:	movt	r1, #1
   114e0:	ldr	r5, [r0]
   114e4:	mov	r0, #0
   114e8:	bl	10f34 <dcgettext@plt>
   114ec:	mov	r2, r0
   114f0:	movw	r0, #29072	; 0x7190
   114f4:	mov	r1, #1
   114f8:	movt	r0, #2
   114fc:	ldr	r3, [r0]
   11500:	mov	r0, r5
   11504:	bl	11084 <__fprintf_chk@plt>
   11508:	b	114c4 <__assert_fail@plt+0x380>
   1150c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11510:	add	fp, sp, #28
   11514:	sub	sp, sp, #148	; 0x94
   11518:	mov	r5, r0
   1151c:	ldr	r0, [r1]
   11520:	mov	r4, r1
   11524:	bl	11ea8 <__assert_fail@plt+0xd64>
   11528:	movw	r1, #23141	; 0x5a65
   1152c:	mov	r0, #6
   11530:	movt	r1, #1
   11534:	bl	110c0 <setlocale@plt>
   11538:	movw	r6, #22625	; 0x5861
   1153c:	movw	r1, #22537	; 0x5809
   11540:	movt	r6, #1
   11544:	movt	r1, #1
   11548:	mov	r0, r6
   1154c:	bl	110fc <bindtextdomain@plt>
   11550:	mov	r0, r6
   11554:	bl	10f4c <textdomain@plt>
   11558:	movw	r0, #28924	; 0x70fc
   1155c:	mov	r1, #125	; 0x7d
   11560:	movt	r0, #2
   11564:	str	r1, [r0]
   11568:	movw	r0, #7084	; 0x1bac
   1156c:	movt	r0, #1
   11570:	bl	15338 <__assert_fail@plt+0x41f4>
   11574:	movw	r8, #29024	; 0x7160
   11578:	movw	r9, #29016	; 0x7158
   1157c:	mov	sl, #0
   11580:	movt	r8, #2
   11584:	movt	r9, #2
   11588:	b	11668 <__assert_fail@plt+0x524>
   1158c:	cmp	r0, #101	; 0x65
   11590:	beq	115a4 <__assert_fail@plt+0x460>
   11594:	cmp	r0, #111	; 0x6f
   11598:	bne	115ac <__assert_fail@plt+0x468>
   1159c:	mov	r1, #1
   115a0:	b	115b8 <__assert_fail@plt+0x474>
   115a4:	mov	r1, #2
   115a8:	b	115b8 <__assert_fail@plt+0x474>
   115ac:	cmp	r0, #105	; 0x69
   115b0:	bne	11b54 <__assert_fail@plt+0xa10>
   115b4:	mov	r1, #0
   115b8:	ldr	r6, [r9]
   115bc:	add	r7, r1, r1, lsl #1
   115c0:	add	r1, r8, r7, lsl #2
   115c4:	str	r0, [r1, #4]
   115c8:	ldrb	r2, [r6]
   115cc:	sub	r3, r2, #9
   115d0:	cmp	r3, #5
   115d4:	bcs	115e4 <__assert_fail@plt+0x4a0>
   115d8:	add	r6, r6, #1
   115dc:	str	r6, [r9]
   115e0:	b	115c8 <__assert_fail@plt+0x484>
   115e4:	cmp	r2, #32
   115e8:	beq	115d8 <__assert_fail@plt+0x494>
   115ec:	str	r6, [r1, #8]
   115f0:	cmp	r0, #105	; 0x69
   115f4:	ldrbeq	r0, [r6]
   115f8:	cmpeq	r0, #76	; 0x4c
   115fc:	beq	11b04 <__assert_fail@plt+0x9c0>
   11600:	movw	r1, #23184	; 0x5a90
   11604:	mov	r0, r6
   11608:	movt	r1, #1
   1160c:	bl	10ed4 <strcmp@plt>
   11610:	cmp	r0, #0
   11614:	beq	11668 <__assert_fail@plt+0x524>
   11618:	movw	r0, #23168	; 0x5a80
   1161c:	mov	r1, #0
   11620:	mov	r2, #10
   11624:	add	r3, sp, #24
   11628:	movt	r0, #1
   1162c:	str	r0, [sp]
   11630:	mov	r0, r6
   11634:	bl	14368 <__assert_fail@plt+0x3224>
   11638:	ldr	r1, [sp, #28]
   1163c:	cmp	r1, #0
   11640:	mov	r1, r0
   11644:	movwne	r1, #1
   11648:	cmp	r0, #0
   1164c:	movne	r1, r0
   11650:	cmp	r1, #0
   11654:	bne	11b10 <__assert_fail@plt+0x9cc>
   11658:	ldr	r6, [sp, #24]
   1165c:	bl	1103c <__errno_location@plt>
   11660:	str	sl, [r0]
   11664:	str	r6, [r8, r7, lsl #2]
   11668:	movw	r2, #22561	; 0x5821
   1166c:	movw	r3, #23360	; 0x5b40
   11670:	mov	r0, r5
   11674:	mov	r1, r4
   11678:	str	sl, [sp]
   1167c:	movt	r2, #1
   11680:	movt	r3, #1
   11684:	bl	11000 <getopt_long@plt>
   11688:	cmp	r0, #100	; 0x64
   1168c:	bgt	1158c <__assert_fail@plt+0x448>
   11690:	cmn	r0, #1
   11694:	bne	11aa4 <__assert_fail@plt+0x960>
   11698:	movw	r0, #29000	; 0x7148
   1169c:	movt	r0, #2
   116a0:	ldr	r0, [r0]
   116a4:	cmp	r0, r5
   116a8:	bge	11b24 <__assert_fail@plt+0x9e0>
   116ac:	add	r0, r4, r0, lsl #2
   116b0:	movw	r7, #23186	; 0x5a92
   116b4:	movw	r4, #23195	; 0x5a9b
   116b8:	add	r6, r8, #4
   116bc:	movw	r8, #23179	; 0x5a8b
   116c0:	add	r5, sp, #24
   116c4:	mov	sl, #0
   116c8:	str	r0, [sp, #20]
   116cc:	movt	r8, #1
   116d0:	movt	r7, #1
   116d4:	movt	r4, #1
   116d8:	mov	r0, #0
   116dc:	ldr	r1, [r6, #4]
   116e0:	cmp	r1, #0
   116e4:	beq	11754 <__assert_fail@plt+0x610>
   116e8:	ldr	r0, [r6]
   116ec:	ldrb	r9, [r1]
   116f0:	bl	110d8 <toupper@plt>
   116f4:	cmp	r9, #76	; 0x4c
   116f8:	bne	11710 <__assert_fail@plt+0x5cc>
   116fc:	str	r0, [sp]
   11700:	mov	r0, r5
   11704:	mov	r1, #1
   11708:	mov	r2, r8
   1170c:	b	11730 <__assert_fail@plt+0x5ec>
   11710:	ldr	r1, [r6, #-4]
   11714:	str	r0, [sp]
   11718:	mov	r0, r5
   1171c:	mov	r2, r4
   11720:	str	r1, [sp, #8]
   11724:	mov	r1, #0
   11728:	str	r1, [sp, #12]
   1172c:	mov	r1, #1
   11730:	mov	r3, r7
   11734:	bl	10fb8 <__asprintf_chk@plt>
   11738:	cmn	r0, #1
   1173c:	ble	11a2c <__assert_fail@plt+0x8e8>
   11740:	ldr	r0, [sp, #24]
   11744:	bl	110cc <putenv@plt>
   11748:	cmp	r0, #0
   1174c:	bne	11a30 <__assert_fail@plt+0x8ec>
   11750:	mov	r0, #1
   11754:	add	sl, sl, #1
   11758:	add	r6, r6, #12
   1175c:	cmp	sl, #3
   11760:	bcc	116dc <__assert_fail@plt+0x598>
   11764:	tst	r0, #1
   11768:	beq	11b30 <__assert_fail@plt+0x9ec>
   1176c:	movw	r0, #29072	; 0x7190
   11770:	mov	r1, #47	; 0x2f
   11774:	movt	r0, #2
   11778:	ldr	r6, [r0]
   1177c:	mov	r0, r6
   11780:	bl	11030 <strchr@plt>
   11784:	cmp	r0, #0
   11788:	beq	117a8 <__assert_fail@plt+0x664>
   1178c:	mov	r0, r6
   11790:	bl	11c94 <__assert_fail@plt+0xb50>
   11794:	mov	r4, r0
   11798:	movw	r0, #29060	; 0x7184
   1179c:	movt	r0, #2
   117a0:	str	r4, [r0]
   117a4:	b	117ec <__assert_fail@plt+0x6a8>
   117a8:	movw	r0, #23246	; 0x5ace
   117ac:	movt	r0, #1
   117b0:	bl	14334 <__assert_fail@plt+0x31f0>
   117b4:	cmp	r0, #0
   117b8:	beq	1197c <__assert_fail@plt+0x838>
   117bc:	mov	r5, r0
   117c0:	bl	11c94 <__assert_fail@plt+0xb50>
   117c4:	movw	r1, #29060	; 0x7184
   117c8:	movt	r1, #2
   117cc:	str	r0, [r1]
   117d0:	mov	r0, r5
   117d4:	bl	11e80 <__assert_fail@plt+0xd3c>
   117d8:	movw	r0, #29060	; 0x7184
   117dc:	movt	r0, #2
   117e0:	ldr	r4, [r0]
   117e4:	cmp	r4, #0
   117e8:	beq	119f4 <__assert_fail@plt+0x8b0>
   117ec:	movw	r0, #23266	; 0x5ae2
   117f0:	movt	r0, #1
   117f4:	bl	10fc4 <getenv@plt>
   117f8:	mov	r9, r0
   117fc:	movw	r0, #23277	; 0x5aed
   11800:	movt	r0, #1
   11804:	str	r0, [fp, #-36]	; 0xffffffdc
   11808:	mov	r0, #0
   1180c:	str	r4, [fp, #-40]	; 0xffffffd8
   11810:	str	r0, [fp, #-32]	; 0xffffffe0
   11814:	ldrb	r0, [r4]
   11818:	cmp	r0, #0
   1181c:	beq	1189c <__assert_fail@plt+0x758>
   11820:	movw	sl, #23306	; 0x5b0a
   11824:	movw	r7, #23319	; 0x5b17
   11828:	sub	r0, fp, #40	; 0x28
   1182c:	sub	r8, fp, #44	; 0x2c
   11830:	add	r5, sp, #24
   11834:	add	r6, r0, #4
   11838:	movt	sl, #1
   1183c:	movt	r7, #1
   11840:	mov	r0, r8
   11844:	mov	r1, #1
   11848:	mov	r2, r7
   1184c:	mov	r3, r4
   11850:	str	sl, [sp]
   11854:	bl	10fb8 <__asprintf_chk@plt>
   11858:	cmn	r0, #1
   1185c:	ble	11a2c <__assert_fail@plt+0x8e8>
   11860:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11864:	mov	r1, r5
   11868:	bl	15350 <__assert_fail@plt+0x420c>
   1186c:	mov	r1, r0
   11870:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11874:	cmp	r1, #0
   11878:	beq	118ac <__assert_fail@plt+0x768>
   1187c:	bl	11e80 <__assert_fail@plt+0xd3c>
   11880:	ldr	r0, [r6]
   11884:	cmp	r0, #0
   11888:	beq	11a6c <__assert_fail@plt+0x928>
   1188c:	ldr	r4, [r6], #4
   11890:	ldrb	r0, [r4]
   11894:	cmp	r0, #0
   11898:	bne	11840 <__assert_fail@plt+0x6fc>
   1189c:	movw	r0, #23306	; 0x5b0a
   118a0:	movt	r0, #1
   118a4:	bl	142b0 <__assert_fail@plt+0x316c>
   118a8:	str	r0, [fp, #-44]	; 0xffffffd4
   118ac:	cmp	r9, #0
   118b0:	beq	118cc <__assert_fail@plt+0x788>
   118b4:	movw	r2, #23343	; 0x5b2f
   118b8:	str	r0, [sp, #4]
   118bc:	str	r9, [sp]
   118c0:	add	r0, sp, #24
   118c4:	movt	r2, #1
   118c8:	b	118dc <__assert_fail@plt+0x798>
   118cc:	movw	r2, #23352	; 0x5b38
   118d0:	str	r0, [sp]
   118d4:	add	r0, sp, #24
   118d8:	movt	r2, #1
   118dc:	movw	r3, #23266	; 0x5ae2
   118e0:	mov	r1, #1
   118e4:	movt	r3, #1
   118e8:	bl	10fb8 <__asprintf_chk@plt>
   118ec:	cmn	r0, #1
   118f0:	ble	11a2c <__assert_fail@plt+0x8e8>
   118f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   118f8:	bl	11e80 <__assert_fail@plt+0xd3c>
   118fc:	ldr	r0, [sp, #24]
   11900:	bl	110cc <putenv@plt>
   11904:	cmp	r0, #0
   11908:	bne	11a30 <__assert_fail@plt+0x8ec>
   1190c:	movw	r0, #29060	; 0x7184
   11910:	movt	r0, #2
   11914:	ldr	r0, [r0]
   11918:	bl	11e80 <__assert_fail@plt+0xd3c>
   1191c:	ldr	r6, [sp, #20]
   11920:	ldr	r0, [r6]
   11924:	mov	r1, r6
   11928:	bl	10f10 <execvp@plt>
   1192c:	bl	1103c <__errno_location@plt>
   11930:	ldr	r4, [r0]
   11934:	movw	r1, #22731	; 0x58cb
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	movt	r1, #1
   11944:	bl	10f34 <dcgettext@plt>
   11948:	mov	r5, r0
   1194c:	ldr	r0, [r6]
   11950:	bl	138ac <__assert_fail@plt+0x2768>
   11954:	mov	r3, r0
   11958:	mov	r0, #0
   1195c:	mov	r1, r4
   11960:	mov	r2, r5
   11964:	bl	10fac <error@plt>
   11968:	mov	r0, #126	; 0x7e
   1196c:	cmp	r4, #2
   11970:	movweq	r0, #127	; 0x7f
   11974:	sub	sp, fp, #28
   11978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1197c:	movw	r0, #23261	; 0x5add
   11980:	movt	r0, #1
   11984:	bl	10fc4 <getenv@plt>
   11988:	cmp	r0, #0
   1198c:	beq	11a04 <__assert_fail@plt+0x8c0>
   11990:	bl	142b0 <__assert_fail@plt+0x316c>
   11994:	movw	r1, #22567	; 0x5827
   11998:	mov	r5, r0
   1199c:	movt	r1, #1
   119a0:	bl	110b4 <strtok@plt>
   119a4:	cmp	r0, #0
   119a8:	beq	117d0 <__assert_fail@plt+0x68c>
   119ac:	movw	r4, #22567	; 0x5827
   119b0:	movt	r4, #1
   119b4:	mov	r1, r6
   119b8:	mov	r2, #0
   119bc:	bl	11d88 <__assert_fail@plt+0xc44>
   119c0:	mov	r1, #1
   119c4:	mov	r7, r0
   119c8:	bl	11090 <access@plt>
   119cc:	cmp	r0, #0
   119d0:	beq	11a0c <__assert_fail@plt+0x8c8>
   119d4:	mov	r0, r7
   119d8:	bl	11e80 <__assert_fail@plt+0xd3c>
   119dc:	mov	r0, #0
   119e0:	mov	r1, r4
   119e4:	bl	110b4 <strtok@plt>
   119e8:	cmp	r0, #0
   119ec:	bne	119b4 <__assert_fail@plt+0x870>
   119f0:	b	117d0 <__assert_fail@plt+0x68c>
   119f4:	movw	r0, #22706	; 0x58b2
   119f8:	movt	r0, #1
   119fc:	bl	142b0 <__assert_fail@plt+0x316c>
   11a00:	b	11794 <__assert_fail@plt+0x650>
   11a04:	mov	r5, #0
   11a08:	b	117d0 <__assert_fail@plt+0x68c>
   11a0c:	mov	r0, r7
   11a10:	bl	11c94 <__assert_fail@plt+0xb50>
   11a14:	movw	r1, #29060	; 0x7184
   11a18:	movt	r1, #2
   11a1c:	str	r0, [r1]
   11a20:	mov	r0, r7
   11a24:	bl	11e80 <__assert_fail@plt+0xd3c>
   11a28:	b	117d0 <__assert_fail@plt+0x68c>
   11a2c:	bl	142f0 <__assert_fail@plt+0x31ac>
   11a30:	bl	1103c <__errno_location@plt>
   11a34:	ldr	r4, [r0]
   11a38:	movw	r1, #23205	; 0x5aa5
   11a3c:	mov	r0, #0
   11a40:	mov	r2, #5
   11a44:	movt	r1, #1
   11a48:	bl	10f34 <dcgettext@plt>
   11a4c:	mov	r5, r0
   11a50:	ldr	r0, [sp, #24]
   11a54:	bl	138ac <__assert_fail@plt+0x2768>
   11a58:	mov	r3, r0
   11a5c:	mov	r0, #125	; 0x7d
   11a60:	mov	r1, r4
   11a64:	mov	r2, r5
   11a68:	bl	10fac <error@plt>
   11a6c:	movw	r1, #23325	; 0x5b1d
   11a70:	mov	r0, #0
   11a74:	mov	r2, #5
   11a78:	movt	r1, #1
   11a7c:	bl	10f34 <dcgettext@plt>
   11a80:	mov	r4, r0
   11a84:	movw	r0, #23306	; 0x5b0a
   11a88:	movt	r0, #1
   11a8c:	bl	138ac <__assert_fail@plt+0x2768>
   11a90:	mov	r3, r0
   11a94:	mov	r0, #125	; 0x7d
   11a98:	mov	r1, #0
   11a9c:	mov	r2, r4
   11aa0:	bl	10fac <error@plt>
   11aa4:	cmn	r0, #3
   11aa8:	bne	11af4 <__assert_fail@plt+0x9b0>
   11aac:	movw	r0, #28920	; 0x70f8
   11ab0:	movw	r2, #22635	; 0x586b
   11ab4:	mov	r1, #0
   11ab8:	movt	r0, #2
   11abc:	movt	r2, #1
   11ac0:	str	r1, [sp, #4]
   11ac4:	movw	r1, #22530	; 0x5802
   11ac8:	ldr	r3, [r0]
   11acc:	movw	r0, #29012	; 0x7154
   11ad0:	str	r2, [sp]
   11ad4:	movw	r2, #22621	; 0x585d
   11ad8:	movt	r1, #1
   11adc:	movt	r0, #2
   11ae0:	movt	r2, #1
   11ae4:	ldr	r0, [r0]
   11ae8:	bl	13d98 <__assert_fail@plt+0x2c54>
   11aec:	mov	r0, #0
   11af0:	bl	11018 <exit@plt>
   11af4:	cmn	r0, #2
   11af8:	bne	11b54 <__assert_fail@plt+0xa10>
   11afc:	mov	r0, #0
   11b00:	bl	11240 <__assert_fail@plt+0xfc>
   11b04:	movw	r1, #22569	; 0x5829
   11b08:	movt	r1, #1
   11b0c:	b	11b38 <__assert_fail@plt+0x9f4>
   11b10:	cmp	r1, #1
   11b14:	bne	11b5c <__assert_fail@plt+0xa18>
   11b18:	mov	r4, #75	; 0x4b
   11b1c:	bl	1103c <__errno_location@plt>
   11b20:	b	11b64 <__assert_fail@plt+0xa20>
   11b24:	movw	r1, #22649	; 0x5879
   11b28:	movt	r1, #1
   11b2c:	b	11b38 <__assert_fail@plt+0x9f4>
   11b30:	movw	r1, #22665	; 0x5889
   11b34:	movt	r1, #1
   11b38:	mov	r0, #0
   11b3c:	mov	r2, #5
   11b40:	bl	10f34 <dcgettext@plt>
   11b44:	mov	r2, r0
   11b48:	mov	r0, #0
   11b4c:	mov	r1, #0
   11b50:	bl	10fac <error@plt>
   11b54:	mov	r0, #125	; 0x7d
   11b58:	bl	11240 <__assert_fail@plt+0xfc>
   11b5c:	bl	1103c <__errno_location@plt>
   11b60:	ldr	r4, [r0]
   11b64:	str	r4, [r0]
   11b68:	movw	r1, #22605	; 0x584d
   11b6c:	mov	r2, #5
   11b70:	ldr	r4, [r0]
   11b74:	movt	r1, #1
   11b78:	mov	r0, #0
   11b7c:	bl	10f34 <dcgettext@plt>
   11b80:	mov	r5, r0
   11b84:	ldr	r0, [r9]
   11b88:	b	11a54 <__assert_fail@plt+0x910>
   11b8c:	movw	r1, #29064	; 0x7188
   11b90:	movt	r1, #2
   11b94:	str	r0, [r1]
   11b98:	bx	lr
   11b9c:	movw	r1, #29068	; 0x718c
   11ba0:	movt	r1, #2
   11ba4:	strb	r0, [r1]
   11ba8:	bx	lr
   11bac:	push	{r4, r5, r6, sl, fp, lr}
   11bb0:	add	fp, sp, #16
   11bb4:	sub	sp, sp, #8
   11bb8:	movw	r0, #29012	; 0x7154
   11bbc:	movt	r0, #2
   11bc0:	ldr	r0, [r0]
   11bc4:	bl	14d78 <__assert_fail@plt+0x3c34>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11bf4 <__assert_fail@plt+0xab0>
   11bd0:	movw	r0, #29068	; 0x718c
   11bd4:	movt	r0, #2
   11bd8:	ldrb	r0, [r0]
   11bdc:	cmp	r0, #0
   11be0:	beq	11c14 <__assert_fail@plt+0xad0>
   11be4:	bl	1103c <__errno_location@plt>
   11be8:	ldr	r0, [r0]
   11bec:	cmp	r0, #32
   11bf0:	bne	11c14 <__assert_fail@plt+0xad0>
   11bf4:	movw	r0, #29008	; 0x7150
   11bf8:	movt	r0, #2
   11bfc:	ldr	r0, [r0]
   11c00:	bl	14d78 <__assert_fail@plt+0x3c34>
   11c04:	cmp	r0, #0
   11c08:	subeq	sp, fp, #16
   11c0c:	popeq	{r4, r5, r6, sl, fp, pc}
   11c10:	b	11c84 <__assert_fail@plt+0xb40>
   11c14:	movw	r1, #23527	; 0x5be7
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	movt	r1, #1
   11c24:	bl	10f34 <dcgettext@plt>
   11c28:	mov	r4, r0
   11c2c:	movw	r0, #29064	; 0x7188
   11c30:	movt	r0, #2
   11c34:	ldr	r6, [r0]
   11c38:	bl	1103c <__errno_location@plt>
   11c3c:	ldr	r5, [r0]
   11c40:	cmp	r6, #0
   11c44:	bne	11c60 <__assert_fail@plt+0xb1c>
   11c48:	movw	r2, #23543	; 0x5bf7
   11c4c:	mov	r0, #0
   11c50:	mov	r1, r5
   11c54:	mov	r3, r4
   11c58:	movt	r2, #1
   11c5c:	b	11c80 <__assert_fail@plt+0xb3c>
   11c60:	mov	r0, r6
   11c64:	bl	1366c <__assert_fail@plt+0x2528>
   11c68:	movw	r2, #23539	; 0x5bf3
   11c6c:	mov	r3, r0
   11c70:	str	r4, [sp]
   11c74:	mov	r0, #0
   11c78:	mov	r1, r5
   11c7c:	movt	r2, #1
   11c80:	bl	10fac <error@plt>
   11c84:	movw	r0, #28924	; 0x70fc
   11c88:	movt	r0, #2
   11c8c:	ldr	r0, [r0]
   11c90:	bl	10ef8 <_exit@plt>
   11c94:	push	{fp, lr}
   11c98:	mov	fp, sp
   11c9c:	bl	11cf4 <__assert_fail@plt+0xbb0>
   11ca0:	cmp	r0, #0
   11ca4:	popne	{fp, pc}
   11ca8:	bl	142f0 <__assert_fail@plt+0x31ac>
   11cac:	push	{r4, r5, r6, sl, fp, lr}
   11cb0:	add	fp, sp, #16
   11cb4:	mov	r5, r0
   11cb8:	mov	r4, r0
   11cbc:	ldrb	r6, [r5], #-1
   11cc0:	bl	14b54 <__assert_fail@plt+0x3a10>
   11cc4:	sub	r2, r0, r4
   11cc8:	sub	r0, r6, #47	; 0x2f
   11ccc:	clz	r0, r0
   11cd0:	lsr	r1, r0, #5
   11cd4:	mov	r0, r2
   11cd8:	cmp	r2, r1
   11cdc:	popls	{r4, r5, r6, sl, fp, pc}
   11ce0:	ldrb	r3, [r5, r0]
   11ce4:	sub	r2, r0, #1
   11ce8:	cmp	r3, #47	; 0x2f
   11cec:	beq	11cd4 <__assert_fail@plt+0xb90>
   11cf0:	pop	{r4, r5, r6, sl, fp, pc}
   11cf4:	push	{r4, r5, r6, sl, fp, lr}
   11cf8:	add	fp, sp, #16
   11cfc:	mov	r6, r0
   11d00:	mov	r4, r0
   11d04:	ldrb	r5, [r6], #-1
   11d08:	bl	14b54 <__assert_fail@plt+0x3a10>
   11d0c:	sub	r1, r0, r4
   11d10:	sub	r0, r5, #47	; 0x2f
   11d14:	clz	r0, r0
   11d18:	lsr	r0, r0, #5
   11d1c:	mov	r5, r1
   11d20:	cmp	r1, r0
   11d24:	bls	11d38 <__assert_fail@plt+0xbf4>
   11d28:	ldrb	r2, [r6, r5]
   11d2c:	sub	r1, r5, #1
   11d30:	cmp	r2, #47	; 0x2f
   11d34:	beq	11d1c <__assert_fail@plt+0xbd8>
   11d38:	cmp	r5, #0
   11d3c:	mov	r0, r5
   11d40:	addeq	r0, r0, #1
   11d44:	add	r0, r0, #1
   11d48:	bl	14a74 <__assert_fail@plt+0x3930>
   11d4c:	mov	r6, r0
   11d50:	cmp	r0, #0
   11d54:	beq	11d80 <__assert_fail@plt+0xc3c>
   11d58:	mov	r0, r6
   11d5c:	mov	r1, r4
   11d60:	mov	r2, r5
   11d64:	bl	10f04 <memcpy@plt>
   11d68:	cmp	r5, #0
   11d6c:	moveq	r0, #46	; 0x2e
   11d70:	moveq	r5, #1
   11d74:	strbeq	r0, [r6]
   11d78:	mov	r0, #0
   11d7c:	strb	r0, [r6, r5]
   11d80:	mov	r0, r6
   11d84:	pop	{r4, r5, r6, sl, fp, pc}
   11d88:	push	{fp, lr}
   11d8c:	mov	fp, sp
   11d90:	bl	11da0 <__assert_fail@plt+0xc5c>
   11d94:	cmp	r0, #0
   11d98:	popne	{fp, pc}
   11d9c:	bl	142f0 <__assert_fail@plt+0x31ac>
   11da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da4:	add	fp, sp, #28
   11da8:	push	{r2}		; (str r2, [sp, #-4]!)
   11dac:	mov	sl, r1
   11db0:	mov	r7, r0
   11db4:	bl	14b54 <__assert_fail@plt+0x3a10>
   11db8:	sub	r4, r0, r7
   11dbc:	bl	14b9c <__assert_fail@plt+0x3a58>
   11dc0:	mov	r6, r0
   11dc4:	add	r5, r4, r0
   11dc8:	mov	r0, sl
   11dcc:	bl	11024 <strlen@plt>
   11dd0:	mov	r9, r0
   11dd4:	cmp	r6, #0
   11dd8:	beq	11e00 <__assert_fail@plt+0xcbc>
   11ddc:	add	r0, r7, r5
   11de0:	mov	r4, #0
   11de4:	ldrb	r0, [r0, #-1]
   11de8:	cmp	r0, #47	; 0x2f
   11dec:	beq	11e10 <__assert_fail@plt+0xccc>
   11df0:	ldrb	r0, [sl]
   11df4:	subs	r4, r0, #47	; 0x2f
   11df8:	movwne	r4, #47	; 0x2f
   11dfc:	b	11e10 <__assert_fail@plt+0xccc>
   11e00:	ldrb	r0, [sl]
   11e04:	mov	r4, #0
   11e08:	cmp	r0, #47	; 0x2f
   11e0c:	movweq	r4, #46	; 0x2e
   11e10:	uxtb	r8, r4
   11e14:	add	r0, r9, r5
   11e18:	cmp	r8, #0
   11e1c:	movwne	r8, #1
   11e20:	add	r0, r0, r8
   11e24:	add	r0, r0, #1
   11e28:	bl	14a74 <__assert_fail@plt+0x3930>
   11e2c:	mov	r6, r0
   11e30:	cmp	r0, #0
   11e34:	beq	11e74 <__assert_fail@plt+0xd30>
   11e38:	mov	r0, r6
   11e3c:	mov	r1, r7
   11e40:	mov	r2, r5
   11e44:	mvn	r3, #0
   11e48:	bl	11138 <__mempcpy_chk@plt>
   11e4c:	ldr	r1, [sp]
   11e50:	strb	r4, [r0], r8
   11e54:	mov	r2, r9
   11e58:	mvn	r3, #0
   11e5c:	cmp	r1, #0
   11e60:	strne	r0, [r1]
   11e64:	mov	r1, sl
   11e68:	bl	11138 <__mempcpy_chk@plt>
   11e6c:	mov	r1, #0
   11e70:	strb	r1, [r0]
   11e74:	mov	r0, r6
   11e78:	sub	sp, fp, #28
   11e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e80:	push	{r4, r5, r6, sl, fp, lr}
   11e84:	add	fp, sp, #16
   11e88:	mov	r4, r0
   11e8c:	bl	1103c <__errno_location@plt>
   11e90:	ldr	r6, [r0]
   11e94:	mov	r5, r0
   11e98:	mov	r0, r4
   11e9c:	bl	10eec <free@plt>
   11ea0:	str	r6, [r5]
   11ea4:	pop	{r4, r5, r6, sl, fp, pc}
   11ea8:	push	{r4, r5, fp, lr}
   11eac:	add	fp, sp, #8
   11eb0:	cmp	r0, #0
   11eb4:	beq	11f48 <__assert_fail@plt+0xe04>
   11eb8:	mov	r1, #47	; 0x2f
   11ebc:	mov	r4, r0
   11ec0:	bl	110e4 <strrchr@plt>
   11ec4:	cmp	r0, #0
   11ec8:	mov	r5, r4
   11ecc:	addne	r5, r0, #1
   11ed0:	sub	r0, r5, r4
   11ed4:	cmp	r0, #7
   11ed8:	blt	11f2c <__assert_fail@plt+0xde8>
   11edc:	movw	r1, #23602	; 0x5c32
   11ee0:	sub	r0, r5, #7
   11ee4:	mov	r2, #7
   11ee8:	movt	r1, #1
   11eec:	bl	11120 <strncmp@plt>
   11ef0:	cmp	r0, #0
   11ef4:	bne	11f2c <__assert_fail@plt+0xde8>
   11ef8:	movw	r1, #23610	; 0x5c3a
   11efc:	mov	r0, r5
   11f00:	mov	r2, #3
   11f04:	movt	r1, #1
   11f08:	bl	11120 <strncmp@plt>
   11f0c:	cmp	r0, #0
   11f10:	beq	11f1c <__assert_fail@plt+0xdd8>
   11f14:	mov	r4, r5
   11f18:	b	11f2c <__assert_fail@plt+0xde8>
   11f1c:	movw	r0, #28992	; 0x7140
   11f20:	add	r4, r5, #3
   11f24:	movt	r0, #2
   11f28:	str	r4, [r0]
   11f2c:	movw	r0, #28996	; 0x7144
   11f30:	movt	r0, #2
   11f34:	str	r4, [r0]
   11f38:	movw	r0, #29072	; 0x7190
   11f3c:	movt	r0, #2
   11f40:	str	r4, [r0]
   11f44:	pop	{r4, r5, fp, pc}
   11f48:	movw	r0, #29008	; 0x7150
   11f4c:	movt	r0, #2
   11f50:	ldr	r1, [r0]
   11f54:	movw	r0, #23546	; 0x5bfa
   11f58:	movt	r0, #1
   11f5c:	bl	11114 <fputs@plt>
   11f60:	bl	1112c <abort@plt>
   11f64:	push	{r4, r5, r6, sl, fp, lr}
   11f68:	add	fp, sp, #16
   11f6c:	mov	r4, r0
   11f70:	movw	r0, #29080	; 0x7198
   11f74:	movt	r0, #2
   11f78:	cmp	r4, #0
   11f7c:	moveq	r4, r0
   11f80:	bl	1103c <__errno_location@plt>
   11f84:	ldr	r6, [r0]
   11f88:	mov	r5, r0
   11f8c:	mov	r0, r4
   11f90:	mov	r1, #48	; 0x30
   11f94:	bl	141f0 <__assert_fail@plt+0x30ac>
   11f98:	str	r6, [r5]
   11f9c:	pop	{r4, r5, r6, sl, fp, pc}
   11fa0:	movw	r1, #29080	; 0x7198
   11fa4:	cmp	r0, #0
   11fa8:	movt	r1, #2
   11fac:	movne	r1, r0
   11fb0:	ldr	r0, [r1]
   11fb4:	bx	lr
   11fb8:	movw	r2, #29080	; 0x7198
   11fbc:	cmp	r0, #0
   11fc0:	movt	r2, #2
   11fc4:	movne	r2, r0
   11fc8:	str	r1, [r2]
   11fcc:	bx	lr
   11fd0:	movw	r3, #29080	; 0x7198
   11fd4:	cmp	r0, #0
   11fd8:	movt	r3, #2
   11fdc:	movne	r3, r0
   11fe0:	ubfx	r0, r1, #5, #3
   11fe4:	and	r1, r1, #31
   11fe8:	add	r0, r3, r0, lsl #2
   11fec:	ldr	r3, [r0, #8]
   11ff0:	eor	r2, r2, r3, lsr r1
   11ff4:	and	r2, r2, #1
   11ff8:	eor	r2, r3, r2, lsl r1
   11ffc:	str	r2, [r0, #8]
   12000:	mov	r0, #1
   12004:	and	r0, r0, r3, lsr r1
   12008:	bx	lr
   1200c:	movw	r2, #29080	; 0x7198
   12010:	cmp	r0, #0
   12014:	movt	r2, #2
   12018:	movne	r2, r0
   1201c:	ldr	r0, [r2, #4]
   12020:	str	r1, [r2, #4]
   12024:	bx	lr
   12028:	movw	r3, #29080	; 0x7198
   1202c:	cmp	r0, #0
   12030:	movt	r3, #2
   12034:	movne	r3, r0
   12038:	cmp	r1, #0
   1203c:	mov	r0, #10
   12040:	cmpne	r2, #0
   12044:	str	r0, [r3]
   12048:	bne	12058 <__assert_fail@plt+0xf14>
   1204c:	push	{fp, lr}
   12050:	mov	fp, sp
   12054:	bl	1112c <abort@plt>
   12058:	str	r1, [r3, #40]	; 0x28
   1205c:	str	r2, [r3, #44]	; 0x2c
   12060:	bx	lr
   12064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12068:	add	fp, sp, #28
   1206c:	sub	sp, sp, #20
   12070:	mov	r7, r0
   12074:	ldr	r0, [fp, #8]
   12078:	movw	r5, #29080	; 0x7198
   1207c:	mov	r8, r3
   12080:	mov	r9, r2
   12084:	mov	sl, r1
   12088:	movt	r5, #2
   1208c:	cmp	r0, #0
   12090:	movne	r5, r0
   12094:	bl	1103c <__errno_location@plt>
   12098:	mov	r4, r0
   1209c:	ldm	r5, {r0, r1}
   120a0:	ldr	r2, [r5, #40]	; 0x28
   120a4:	ldr	r3, [r5, #44]	; 0x2c
   120a8:	add	r5, r5, #8
   120ac:	ldr	r6, [r4]
   120b0:	stm	sp, {r0, r1, r5}
   120b4:	str	r2, [sp, #12]
   120b8:	str	r3, [sp, #16]
   120bc:	mov	r0, r7
   120c0:	mov	r1, sl
   120c4:	mov	r2, r9
   120c8:	mov	r3, r8
   120cc:	bl	120dc <__assert_fail@plt+0xf98>
   120d0:	str	r6, [r4]
   120d4:	sub	sp, fp, #28
   120d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120e0:	add	fp, sp, #28
   120e4:	sub	sp, sp, #156	; 0x9c
   120e8:	str	r0, [fp, #-56]	; 0xffffffc8
   120ec:	ldr	r0, [fp, #12]
   120f0:	mov	r4, r1
   120f4:	str	r3, [sp, #80]	; 0x50
   120f8:	str	r2, [fp, #-84]	; 0xffffffac
   120fc:	and	r1, r0, #4
   12100:	str	r1, [sp, #24]
   12104:	and	r1, r0, #1
   12108:	str	r1, [sp, #28]
   1210c:	ubfx	r7, r0, #1, #1
   12110:	bl	10f7c <__ctype_get_mb_cur_max@plt>
   12114:	str	r0, [sp, #32]
   12118:	ldr	r0, [fp, #24]
   1211c:	ldr	r9, [fp, #8]
   12120:	mov	r2, #0
   12124:	mov	r1, #0
   12128:	mov	r5, #0
   1212c:	str	r2, [sp, #52]	; 0x34
   12130:	mov	r2, #1
   12134:	str	r0, [sp, #72]	; 0x48
   12138:	ldr	r0, [fp, #20]
   1213c:	str	r0, [sp, #64]	; 0x40
   12140:	mov	r0, #0
   12144:	str	r0, [sp, #92]	; 0x5c
   12148:	mov	r0, #0
   1214c:	str	r0, [fp, #-76]	; 0xffffffb4
   12150:	mov	r0, #0
   12154:	cmp	r9, #10
   12158:	str	r1, [sp, #68]	; 0x44
   1215c:	bhi	1315c <__assert_fail@plt+0x2018>
   12160:	add	r1, pc, #28
   12164:	ldr	ip, [fp, #-84]	; 0xffffffac
   12168:	ldr	lr, [sp, #80]	; 0x50
   1216c:	mov	r6, r4
   12170:	mov	r8, #0
   12174:	mov	r3, #1
   12178:	mov	sl, #0
   1217c:	mov	r4, r2
   12180:	ldr	pc, [r1, r9, lsl #2]
   12184:	andeq	r2, r1, r4, asr r2
   12188:	muleq	r1, r0, r2
   1218c:	andeq	r2, r1, r4, ror #4
   12190:	andeq	r2, r1, ip, asr #4
   12194:	andeq	r2, r1, r4, lsl #5
   12198:	ldrdeq	r2, [r1], -ip
   1219c:	andeq	r2, r1, r4, ror r2
   121a0:	andeq	r2, r1, ip, lsr r3
   121a4:			; <UNDEFINED> instruction: 0x000121b0
   121a8:			; <UNDEFINED> instruction: 0x000121b0
   121ac:	ldrdeq	r2, [r1], -r8
   121b0:	movw	r0, #23692	; 0x5c8c
   121b4:	mov	r1, r9
   121b8:	movt	r0, #1
   121bc:	bl	138c4 <__assert_fail@plt+0x2780>
   121c0:	str	r0, [sp, #64]	; 0x40
   121c4:	movw	r0, #23694	; 0x5c8e
   121c8:	mov	r1, r9
   121cc:	movt	r0, #1
   121d0:	bl	138c4 <__assert_fail@plt+0x2780>
   121d4:	str	r0, [sp, #72]	; 0x48
   121d8:	mov	r8, #0
   121dc:	mov	sl, r7
   121e0:	tst	r7, #1
   121e4:	str	r5, [fp, #-48]	; 0xffffffd0
   121e8:	bne	12224 <__assert_fail@plt+0x10e0>
   121ec:	ldr	r0, [sp, #64]	; 0x40
   121f0:	ldrb	r0, [r0]
   121f4:	cmp	r0, #0
   121f8:	beq	12224 <__assert_fail@plt+0x10e0>
   121fc:	ldr	r1, [sp, #64]	; 0x40
   12200:	mov	r8, #0
   12204:	add	r1, r1, #1
   12208:	cmp	r8, r6
   1220c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12210:	strbcc	r0, [r2, r8]
   12214:	ldrb	r0, [r1, r8]
   12218:	add	r8, r8, #1
   1221c:	cmp	r0, #0
   12220:	bne	12208 <__assert_fail@plt+0x10c4>
   12224:	ldr	r7, [sp, #72]	; 0x48
   12228:	mov	r0, r7
   1222c:	bl	11024 <strlen@plt>
   12230:	ldr	ip, [fp, #-84]	; 0xffffffac
   12234:	ldr	lr, [sp, #80]	; 0x50
   12238:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1223c:	str	r0, [fp, #-76]	; 0xffffffb4
   12240:	str	r7, [sp, #92]	; 0x5c
   12244:	mov	r3, #1
   12248:	b	1233c <__assert_fail@plt+0x11f8>
   1224c:	mov	r0, #1
   12250:	b	12290 <__assert_fail@plt+0x114c>
   12254:	mov	r9, #0
   12258:	mov	r8, #0
   1225c:	mov	r3, r0
   12260:	b	12338 <__assert_fail@plt+0x11f4>
   12264:	tst	r7, #1
   12268:	bne	12290 <__assert_fail@plt+0x114c>
   1226c:	mov	r3, r0
   12270:	b	122b8 <__assert_fail@plt+0x1174>
   12274:	mov	r0, #1
   12278:	mov	r8, #0
   1227c:	mov	r9, #5
   12280:	b	122f0 <__assert_fail@plt+0x11ac>
   12284:	mov	r3, #1
   12288:	tst	r7, #1
   1228c:	beq	122b8 <__assert_fail@plt+0x1174>
   12290:	mov	r1, #1
   12294:	mov	r8, #0
   12298:	mov	r9, #2
   1229c:	mov	r3, r0
   122a0:	mov	sl, #1
   122a4:	str	r1, [fp, #-76]	; 0xffffffb4
   122a8:	movw	r1, #23694	; 0x5c8e
   122ac:	movt	r1, #1
   122b0:	str	r1, [sp, #92]	; 0x5c
   122b4:	b	1233c <__assert_fail@plt+0x11f8>
   122b8:	cmp	r6, #0
   122bc:	mov	r8, #1
   122c0:	mov	r9, #2
   122c4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   122c8:	movne	r0, #39	; 0x27
   122cc:	strbne	r0, [r1]
   122d0:	movw	r0, #23694	; 0x5c8e
   122d4:	movt	r0, #1
   122d8:	b	1232c <__assert_fail@plt+0x11e8>
   122dc:	mov	r9, #5
   122e0:	tst	r7, #1
   122e4:	beq	1230c <__assert_fail@plt+0x11c8>
   122e8:	mov	r0, #1
   122ec:	mov	r8, #0
   122f0:	str	r0, [fp, #-76]	; 0xffffffb4
   122f4:	movw	r0, #23690	; 0x5c8a
   122f8:	mov	r3, #1
   122fc:	mov	sl, #1
   12300:	movt	r0, #1
   12304:	str	r0, [sp, #92]	; 0x5c
   12308:	b	1233c <__assert_fail@plt+0x11f8>
   1230c:	cmp	r6, #0
   12310:	mov	r8, #1
   12314:	mov	r3, #1
   12318:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   1231c:	movne	r0, #34	; 0x22
   12320:	strbne	r0, [r1]
   12324:	movw	r0, #23690	; 0x5c8a
   12328:	movt	r0, #1
   1232c:	str	r0, [sp, #92]	; 0x5c
   12330:	mov	r0, #1
   12334:	str	r0, [fp, #-76]	; 0xffffffb4
   12338:	mov	sl, #0
   1233c:	ldr	r0, [fp, #16]
   12340:	mov	r7, #0
   12344:	str	r9, [fp, #-64]	; 0xffffffc0
   12348:	str	sl, [fp, #-72]	; 0xffffffb8
   1234c:	str	r3, [sp, #84]	; 0x54
   12350:	cmp	r0, #0
   12354:	movwne	r0, #1
   12358:	and	r0, r0, sl
   1235c:	str	r0, [fp, #-88]	; 0xffffffa8
   12360:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12364:	cmp	r0, #0
   12368:	movwne	r0, #1
   1236c:	subs	r2, r9, #2
   12370:	and	r1, r0, sl
   12374:	str	r2, [fp, #-80]	; 0xffffffb0
   12378:	and	r1, r3, r1
   1237c:	str	r1, [sp, #44]	; 0x2c
   12380:	clz	r1, r2
   12384:	lsr	r1, r1, #5
   12388:	and	r1, r1, sl
   1238c:	str	r1, [sp, #56]	; 0x38
   12390:	mov	r1, r2
   12394:	eor	r2, sl, #1
   12398:	movwne	r1, #1
   1239c:	str	r2, [sp, #88]	; 0x58
   123a0:	orr	r2, r1, r2
   123a4:	and	r1, r1, r3
   123a8:	and	r0, r0, r1
   123ac:	str	r2, [sp, #60]	; 0x3c
   123b0:	str	r1, [fp, #-68]	; 0xffffffbc
   123b4:	str	r0, [fp, #-60]	; 0xffffffc4
   123b8:	eor	r0, r3, #1
   123bc:	str	r0, [sp, #48]	; 0x30
   123c0:	cmn	lr, #1
   123c4:	beq	123d4 <__assert_fail@plt+0x1290>
   123c8:	cmp	r7, lr
   123cc:	bne	123e0 <__assert_fail@plt+0x129c>
   123d0:	b	12f8c <__assert_fail@plt+0x1e48>
   123d4:	ldrb	r0, [ip, r7]
   123d8:	cmp	r0, #0
   123dc:	beq	12f94 <__assert_fail@plt+0x1e50>
   123e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   123e4:	mov	r9, #0
   123e8:	str	r5, [fp, #-48]	; 0xffffffd0
   123ec:	str	r6, [fp, #-52]	; 0xffffffcc
   123f0:	cmp	r0, #0
   123f4:	beq	12434 <__assert_fail@plt+0x12f0>
   123f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   123fc:	mov	r5, r4
   12400:	add	r4, r7, r0
   12404:	cmp	r0, #2
   12408:	bcc	12424 <__assert_fail@plt+0x12e0>
   1240c:	cmn	lr, #1
   12410:	bne	12424 <__assert_fail@plt+0x12e0>
   12414:	mov	r0, ip
   12418:	bl	11024 <strlen@plt>
   1241c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12420:	mov	lr, r0
   12424:	cmp	r4, lr
   12428:	bls	1243c <__assert_fail@plt+0x12f8>
   1242c:	mov	r6, #0
   12430:	b	1247c <__assert_fail@plt+0x1338>
   12434:	mov	r6, #0
   12438:	b	12480 <__assert_fail@plt+0x133c>
   1243c:	ldr	r1, [sp, #92]	; 0x5c
   12440:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12444:	add	r0, ip, r7
   12448:	mov	r4, lr
   1244c:	bl	10f28 <memcmp@plt>
   12450:	ldr	r2, [sp, #88]	; 0x58
   12454:	cmp	r0, #0
   12458:	mov	r1, r0
   1245c:	movwne	r1, #1
   12460:	orr	r1, r1, r2
   12464:	tst	r1, #1
   12468:	beq	13028 <__assert_fail@plt+0x1ee4>
   1246c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12470:	clz	r0, r0
   12474:	mov	lr, r4
   12478:	lsr	r6, r0, #5
   1247c:	mov	r4, r5
   12480:	ldrb	r5, [ip, r7]
   12484:	cmp	r5, #126	; 0x7e
   12488:	bhi	12850 <__assert_fail@plt+0x170c>
   1248c:	add	r3, pc, #16
   12490:	mov	sl, #1
   12494:	mov	r2, #110	; 0x6e
   12498:	mov	r0, #97	; 0x61
   1249c:	mov	r1, #0
   124a0:	ldr	pc, [r3, r5, lsl #2]
   124a4:	andeq	r2, r1, r4, lsr r7
   124a8:	andeq	r2, r1, r0, asr r8
   124ac:	andeq	r2, r1, r0, asr r8
   124b0:	andeq	r2, r1, r0, asr r8
   124b4:	andeq	r2, r1, r0, asr r8
   124b8:	andeq	r2, r1, r0, asr r8
   124bc:	andeq	r2, r1, r0, asr r8
   124c0:	strdeq	r2, [r1], -r4
   124c4:	andeq	r2, r1, r4, lsl r7
   124c8:	andeq	r2, r1, ip, lsl #14
   124cc:	andeq	r2, r1, r0, lsr #14
   124d0:	andeq	r2, r1, r4, lsr #15
   124d4:	andeq	r2, r1, r4, lsl #14
   124d8:	andeq	r2, r1, ip, lsl r7
   124dc:	andeq	r2, r1, r0, asr r8
   124e0:	andeq	r2, r1, r0, asr r8
   124e4:	andeq	r2, r1, r0, asr r8
   124e8:	andeq	r2, r1, r0, asr r8
   124ec:	andeq	r2, r1, r0, asr r8
   124f0:	andeq	r2, r1, r0, asr r8
   124f4:	andeq	r2, r1, r0, asr r8
   124f8:	andeq	r2, r1, r0, asr r8
   124fc:	andeq	r2, r1, r0, asr r8
   12500:	andeq	r2, r1, r0, asr r8
   12504:	andeq	r2, r1, r0, asr r8
   12508:	andeq	r2, r1, r0, asr r8
   1250c:	andeq	r2, r1, r0, asr r8
   12510:	andeq	r2, r1, r0, asr r8
   12514:	andeq	r2, r1, r0, asr r8
   12518:	andeq	r2, r1, r0, asr r8
   1251c:	andeq	r2, r1, r0, asr r8
   12520:	andeq	r2, r1, r0, asr r8
   12524:			; <UNDEFINED> instruction: 0x000128b4
   12528:			; <UNDEFINED> instruction: 0x000128b8
   1252c:			; <UNDEFINED> instruction: 0x000128b8
   12530:			; <UNDEFINED> instruction: 0x000126b4
   12534:			; <UNDEFINED> instruction: 0x000128b8
   12538:	andeq	r2, r1, r0, lsr #13
   1253c:			; <UNDEFINED> instruction: 0x000128b8
   12540:	andeq	r2, r1, ip, lsr #15
   12544:			; <UNDEFINED> instruction: 0x000128b8
   12548:			; <UNDEFINED> instruction: 0x000128b8
   1254c:			; <UNDEFINED> instruction: 0x000128b8
   12550:	andeq	r2, r1, r0, lsr #13
   12554:	andeq	r2, r1, r0, lsr #13
   12558:	andeq	r2, r1, r0, lsr #13
   1255c:	andeq	r2, r1, r0, lsr #13
   12560:	andeq	r2, r1, r0, lsr #13
   12564:	andeq	r2, r1, r0, lsr #13
   12568:	andeq	r2, r1, r0, lsr #13
   1256c:	andeq	r2, r1, r0, lsr #13
   12570:	andeq	r2, r1, r0, lsr #13
   12574:	andeq	r2, r1, r0, lsr #13
   12578:	andeq	r2, r1, r0, lsr #13
   1257c:	andeq	r2, r1, r0, lsr #13
   12580:	andeq	r2, r1, r0, lsr #13
   12584:	andeq	r2, r1, r0, lsr #13
   12588:	andeq	r2, r1, r0, lsr #13
   1258c:	andeq	r2, r1, r0, lsr #13
   12590:			; <UNDEFINED> instruction: 0x000128b8
   12594:			; <UNDEFINED> instruction: 0x000128b8
   12598:			; <UNDEFINED> instruction: 0x000128b8
   1259c:			; <UNDEFINED> instruction: 0x000128b8
   125a0:	andeq	r2, r1, r8, ror r7
   125a4:	andeq	r2, r1, r0, asr r8
   125a8:	andeq	r2, r1, r0, lsr #13
   125ac:	andeq	r2, r1, r0, lsr #13
   125b0:	andeq	r2, r1, r0, lsr #13
   125b4:	andeq	r2, r1, r0, lsr #13
   125b8:	andeq	r2, r1, r0, lsr #13
   125bc:	andeq	r2, r1, r0, lsr #13
   125c0:	andeq	r2, r1, r0, lsr #13
   125c4:	andeq	r2, r1, r0, lsr #13
   125c8:	andeq	r2, r1, r0, lsr #13
   125cc:	andeq	r2, r1, r0, lsr #13
   125d0:	andeq	r2, r1, r0, lsr #13
   125d4:	andeq	r2, r1, r0, lsr #13
   125d8:	andeq	r2, r1, r0, lsr #13
   125dc:	andeq	r2, r1, r0, lsr #13
   125e0:	andeq	r2, r1, r0, lsr #13
   125e4:	andeq	r2, r1, r0, lsr #13
   125e8:	andeq	r2, r1, r0, lsr #13
   125ec:	andeq	r2, r1, r0, lsr #13
   125f0:	andeq	r2, r1, r0, lsr #13
   125f4:	andeq	r2, r1, r0, lsr #13
   125f8:	andeq	r2, r1, r0, lsr #13
   125fc:	andeq	r2, r1, r0, lsr #13
   12600:	andeq	r2, r1, r0, lsr #13
   12604:	andeq	r2, r1, r0, lsr #13
   12608:	andeq	r2, r1, r0, lsr #13
   1260c:	andeq	r2, r1, r0, lsr #13
   12610:			; <UNDEFINED> instruction: 0x000128b8
   12614:	andeq	r2, r1, r0, ror #13
   12618:	andeq	r2, r1, r0, lsr #13
   1261c:			; <UNDEFINED> instruction: 0x000128b8
   12620:	andeq	r2, r1, r0, lsr #13
   12624:			; <UNDEFINED> instruction: 0x000128b8
   12628:	andeq	r2, r1, r0, lsr #13
   1262c:	andeq	r2, r1, r0, lsr #13
   12630:	andeq	r2, r1, r0, lsr #13
   12634:	andeq	r2, r1, r0, lsr #13
   12638:	andeq	r2, r1, r0, lsr #13
   1263c:	andeq	r2, r1, r0, lsr #13
   12640:	andeq	r2, r1, r0, lsr #13
   12644:	andeq	r2, r1, r0, lsr #13
   12648:	andeq	r2, r1, r0, lsr #13
   1264c:	andeq	r2, r1, r0, lsr #13
   12650:	andeq	r2, r1, r0, lsr #13
   12654:	andeq	r2, r1, r0, lsr #13
   12658:	andeq	r2, r1, r0, lsr #13
   1265c:	andeq	r2, r1, r0, lsr #13
   12660:	andeq	r2, r1, r0, lsr #13
   12664:	andeq	r2, r1, r0, lsr #13
   12668:	andeq	r2, r1, r0, lsr #13
   1266c:	andeq	r2, r1, r0, lsr #13
   12670:	andeq	r2, r1, r0, lsr #13
   12674:	andeq	r2, r1, r0, lsr #13
   12678:	andeq	r2, r1, r0, lsr #13
   1267c:	andeq	r2, r1, r0, lsr #13
   12680:	andeq	r2, r1, r0, lsr #13
   12684:	andeq	r2, r1, r0, lsr #13
   12688:	andeq	r2, r1, r0, lsr #13
   1268c:	andeq	r2, r1, r0, lsr #13
   12690:	andeq	r2, r1, r4, asr #13
   12694:			; <UNDEFINED> instruction: 0x000128b8
   12698:	andeq	r2, r1, r4, asr #13
   1269c:			; <UNDEFINED> instruction: 0x000126b4
   126a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126a4:	cmp	r0, #0
   126a8:	beq	12908 <__assert_fail@plt+0x17c4>
   126ac:	ldr	r0, [fp, #16]
   126b0:	b	1290c <__assert_fail@plt+0x17c8>
   126b4:	mov	sl, #0
   126b8:	cmp	r7, #0
   126bc:	bne	12b24 <__assert_fail@plt+0x19e0>
   126c0:	b	128b4 <__assert_fail@plt+0x1770>
   126c4:	mov	sl, #0
   126c8:	cmn	lr, #1
   126cc:	beq	128a0 <__assert_fail@plt+0x175c>
   126d0:	cmp	r7, #0
   126d4:	cmpeq	lr, #1
   126d8:	bne	12b24 <__assert_fail@plt+0x19e0>
   126dc:	b	128b4 <__assert_fail@plt+0x1770>
   126e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126e4:	cmp	r0, #2
   126e8:	bne	128d8 <__assert_fail@plt+0x1794>
   126ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   126f0:	tst	r0, #1
   126f4:	bne	13044 <__assert_fail@plt+0x1f00>
   126f8:	mov	r9, #0
   126fc:	mov	r0, #92	; 0x5c
   12700:	b	128ec <__assert_fail@plt+0x17a8>
   12704:	mov	r0, #102	; 0x66
   12708:	b	128f4 <__assert_fail@plt+0x17b0>
   1270c:	mov	r2, #116	; 0x74
   12710:	b	12720 <__assert_fail@plt+0x15dc>
   12714:	mov	r0, #98	; 0x62
   12718:	b	128f4 <__assert_fail@plt+0x17b0>
   1271c:	mov	r2, #114	; 0x72
   12720:	ldr	r0, [sp, #60]	; 0x3c
   12724:	tst	r0, #1
   12728:	mov	r0, r2
   1272c:	bne	128f4 <__assert_fail@plt+0x17b0>
   12730:	b	13044 <__assert_fail@plt+0x1f00>
   12734:	ldr	r0, [sp, #84]	; 0x54
   12738:	tst	r0, #1
   1273c:	beq	129e0 <__assert_fail@plt+0x189c>
   12740:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12744:	tst	r0, #1
   12748:	bne	1314c <__assert_fail@plt+0x2008>
   1274c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12750:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12754:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12758:	cmp	r0, #2
   1275c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12760:	movwne	r0, #1
   12764:	orr	r0, r0, r3
   12768:	tst	r0, #1
   1276c:	beq	12e60 <__assert_fail@plt+0x1d1c>
   12770:	mov	r0, r8
   12774:	b	12ea0 <__assert_fail@plt+0x1d5c>
   12778:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1277c:	mov	r9, #0
   12780:	mov	r5, #63	; 0x3f
   12784:	cmp	r0, #5
   12788:	beq	12b2c <__assert_fail@plt+0x19e8>
   1278c:	cmp	r0, #2
   12790:	bne	12bec <__assert_fail@plt+0x1aa8>
   12794:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12798:	tst	r0, #1
   1279c:	beq	12bf0 <__assert_fail@plt+0x1aac>
   127a0:	b	13044 <__assert_fail@plt+0x1f00>
   127a4:	mov	r0, #118	; 0x76
   127a8:	b	128f4 <__assert_fail@plt+0x17b0>
   127ac:	mov	r0, #1
   127b0:	mov	r5, #39	; 0x27
   127b4:	str	r0, [sp, #52]	; 0x34
   127b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127bc:	cmp	r0, #2
   127c0:	bne	12848 <__assert_fail@plt+0x1704>
   127c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127c8:	tst	r0, #1
   127cc:	bne	13044 <__assert_fail@plt+0x1f00>
   127d0:	ldr	r3, [sp, #68]	; 0x44
   127d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   127d8:	mov	r9, #0
   127dc:	clz	r1, r2
   127e0:	cmp	r3, #0
   127e4:	mov	r0, r3
   127e8:	movwne	r0, #1
   127ec:	lsr	r1, r1, #5
   127f0:	orrs	r0, r0, r1
   127f4:	moveq	r3, r2
   127f8:	moveq	r2, r0
   127fc:	cmp	r8, r2
   12800:	str	r3, [sp, #68]	; 0x44
   12804:	str	r2, [fp, #-52]	; 0xffffffcc
   12808:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1280c:	movcc	r0, #39	; 0x27
   12810:	strbcc	r0, [r1, r8]
   12814:	add	r0, r8, #1
   12818:	cmp	r0, r2
   1281c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12820:	movcc	r1, #92	; 0x5c
   12824:	strbcc	r1, [r3, r0]
   12828:	add	r0, r8, #2
   1282c:	add	r8, r8, #3
   12830:	cmp	r0, r2
   12834:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12838:	movcc	r1, #39	; 0x27
   1283c:	strbcc	r1, [r2, r0]
   12840:	mov	r0, #0
   12844:	str	r0, [fp, #-48]	; 0xffffffd0
   12848:	mov	sl, #1
   1284c:	b	126a0 <__assert_fail@plt+0x155c>
   12850:	ldr	r0, [sp, #32]
   12854:	cmp	r0, #1
   12858:	bne	12a04 <__assert_fail@plt+0x18c0>
   1285c:	str	lr, [sp, #80]	; 0x50
   12860:	bl	1100c <__ctype_b_loc@plt>
   12864:	ldr	r0, [r0]
   12868:	ldr	ip, [fp, #-84]	; 0xffffffac
   1286c:	mov	r1, #1
   12870:	add	r0, r0, r5, lsl #1
   12874:	ldrb	r0, [r0, #1]
   12878:	ubfx	sl, r0, #6, #1
   1287c:	ldr	r0, [sp, #48]	; 0x30
   12880:	mov	r2, r1
   12884:	cmp	r1, #1
   12888:	orr	r0, sl, r0
   1288c:	bhi	12bf8 <__assert_fail@plt+0x1ab4>
   12890:	tst	r0, #1
   12894:	beq	12bf8 <__assert_fail@plt+0x1ab4>
   12898:	ldr	lr, [sp, #80]	; 0x50
   1289c:	b	126a0 <__assert_fail@plt+0x155c>
   128a0:	cmp	r7, #0
   128a4:	bne	12b20 <__assert_fail@plt+0x19dc>
   128a8:	ldrb	r0, [ip, #1]
   128ac:	cmp	r0, #0
   128b0:	bne	12b20 <__assert_fail@plt+0x19dc>
   128b4:	mov	r1, #1
   128b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128bc:	cmp	r0, #2
   128c0:	bne	128d0 <__assert_fail@plt+0x178c>
   128c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128c8:	tst	r0, #1
   128cc:	bne	13044 <__assert_fail@plt+0x1f00>
   128d0:	mov	sl, r1
   128d4:	b	126a0 <__assert_fail@plt+0x155c>
   128d8:	ldr	r1, [sp, #44]	; 0x2c
   128dc:	mov	r9, #0
   128e0:	mov	r0, #92	; 0x5c
   128e4:	cmp	r1, #0
   128e8:	beq	128f4 <__assert_fail@plt+0x17b0>
   128ec:	mov	sl, #0
   128f0:	b	12e0c <__assert_fail@plt+0x1cc8>
   128f4:	ldr	r1, [sp, #84]	; 0x54
   128f8:	mov	sl, #0
   128fc:	mov	r9, #0
   12900:	tst	r1, #1
   12904:	bne	12940 <__assert_fail@plt+0x17fc>
   12908:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1290c:	cmp	r0, #0
   12910:	mov	r0, r5
   12914:	beq	12938 <__assert_fail@plt+0x17f4>
   12918:	ldr	r1, [fp, #16]
   1291c:	ubfx	r0, r5, #5, #3
   12920:	mov	r2, #1
   12924:	ldr	r0, [r1, r0, lsl #2]
   12928:	and	r1, r5, #31
   1292c:	tst	r0, r2, lsl r1
   12930:	mov	r0, r5
   12934:	bne	12940 <__assert_fail@plt+0x17fc>
   12938:	cmp	r6, #0
   1293c:	beq	12e0c <__assert_fail@plt+0x1cc8>
   12940:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12944:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12948:	tst	r1, #1
   1294c:	bne	13020 <__assert_fail@plt+0x1edc>
   12950:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12954:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12958:	cmp	r1, #2
   1295c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12960:	movwne	r1, #1
   12964:	orr	r1, r1, r5
   12968:	tst	r1, #1
   1296c:	bne	129b0 <__assert_fail@plt+0x186c>
   12970:	cmp	r8, r6
   12974:	mov	r5, #1
   12978:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1297c:	movcc	r1, #39	; 0x27
   12980:	strbcc	r1, [r2, r8]
   12984:	add	r1, r8, #1
   12988:	cmp	r1, r6
   1298c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12990:	movcc	r2, #36	; 0x24
   12994:	strbcc	r2, [r3, r1]
   12998:	add	r1, r8, #2
   1299c:	add	r8, r8, #3
   129a0:	cmp	r1, r6
   129a4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   129a8:	movcc	r2, #39	; 0x27
   129ac:	strbcc	r2, [r3, r1]
   129b0:	cmp	r8, r6
   129b4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   129b8:	movcc	r1, #92	; 0x5c
   129bc:	strbcc	r1, [r2, r8]
   129c0:	add	r8, r8, #1
   129c4:	cmp	r8, r6
   129c8:	and	r4, r4, sl
   129cc:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   129d0:	strbcc	r0, [r1, r8]
   129d4:	add	r8, r8, #1
   129d8:	add	r7, r7, #1
   129dc:	b	123c0 <__assert_fail@plt+0x127c>
   129e0:	ldr	r0, [sp, #28]
   129e4:	mov	sl, #0
   129e8:	mov	r9, #0
   129ec:	mov	r5, #0
   129f0:	cmp	r0, #0
   129f4:	beq	12908 <__assert_fail@plt+0x17c4>
   129f8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a00:	b	129d8 <__assert_fail@plt+0x1894>
   12a04:	mov	r0, #0
   12a08:	cmn	lr, #1
   12a0c:	str	r6, [sp, #76]	; 0x4c
   12a10:	str	r4, [sp, #20]
   12a14:	str	r0, [fp, #-36]	; 0xffffffdc
   12a18:	str	r0, [fp, #-40]	; 0xffffffd8
   12a1c:	bne	12a30 <__assert_fail@plt+0x18ec>
   12a20:	mov	r0, ip
   12a24:	bl	11024 <strlen@plt>
   12a28:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a2c:	mov	lr, r0
   12a30:	add	r0, ip, r7
   12a34:	mov	sl, #1
   12a38:	mov	r6, #0
   12a3c:	sub	r4, fp, #40	; 0x28
   12a40:	str	lr, [sp, #80]	; 0x50
   12a44:	str	r0, [sp, #36]	; 0x24
   12a48:	str	r6, [sp, #40]	; 0x28
   12a4c:	add	r6, r6, r7
   12a50:	sub	r0, fp, #44	; 0x2c
   12a54:	mov	r3, r4
   12a58:	add	r1, ip, r6
   12a5c:	sub	r2, lr, r6
   12a60:	bl	14fcc <__assert_fail@plt+0x3e88>
   12a64:	cmp	r0, #0
   12a68:	beq	12f74 <__assert_fail@plt+0x1e30>
   12a6c:	cmn	r0, #1
   12a70:	beq	12f34 <__assert_fail@plt+0x1df0>
   12a74:	ldr	lr, [sp, #80]	; 0x50
   12a78:	cmn	r0, #2
   12a7c:	beq	12f3c <__assert_fail@plt+0x1df8>
   12a80:	ldr	r2, [sp, #56]	; 0x38
   12a84:	cmp	r0, #2
   12a88:	mov	r1, #0
   12a8c:	movwcc	r1, #1
   12a90:	eor	r2, r2, #1
   12a94:	orrs	r1, r2, r1
   12a98:	bne	12ae4 <__assert_fail@plt+0x19a0>
   12a9c:	ldr	r1, [sp, #40]	; 0x28
   12aa0:	ldr	r2, [sp, #36]	; 0x24
   12aa4:	add	ip, r2, r1
   12aa8:	mov	r2, #1
   12aac:	ldrb	r3, [ip, r2]
   12ab0:	sub	r6, r3, #94	; 0x5e
   12ab4:	cmp	r6, #30
   12ab8:	bhi	12acc <__assert_fail@plt+0x1988>
   12abc:	mov	r4, #1
   12ac0:	mov	r1, #1073741829	; 0x40000005
   12ac4:	tst	r1, r4, lsl r6
   12ac8:	bne	13040 <__assert_fail@plt+0x1efc>
   12acc:	sub	r3, r3, #91	; 0x5b
   12ad0:	cmp	r3, #2
   12ad4:	bcc	13040 <__assert_fail@plt+0x1efc>
   12ad8:	add	r2, r2, #1
   12adc:	cmp	r2, r0
   12ae0:	bcc	12aac <__assert_fail@plt+0x1968>
   12ae4:	ldr	r6, [sp, #40]	; 0x28
   12ae8:	add	r6, r0, r6
   12aec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12af0:	bl	10f58 <iswprint@plt>
   12af4:	cmp	r0, #0
   12af8:	sub	r4, fp, #40	; 0x28
   12afc:	movwne	r0, #1
   12b00:	and	sl, sl, r0
   12b04:	mov	r0, r4
   12b08:	bl	10f1c <mbsinit@plt>
   12b0c:	ldr	lr, [sp, #80]	; 0x50
   12b10:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b14:	cmp	r0, #0
   12b18:	beq	12a48 <__assert_fail@plt+0x1904>
   12b1c:	b	12f7c <__assert_fail@plt+0x1e38>
   12b20:	mvn	lr, #0
   12b24:	mov	r9, #0
   12b28:	b	126a0 <__assert_fail@plt+0x155c>
   12b2c:	ldr	r0, [sp, #24]
   12b30:	cmp	r0, #0
   12b34:	beq	12bec <__assert_fail@plt+0x1aa8>
   12b38:	add	r0, r7, #2
   12b3c:	cmp	r0, lr
   12b40:	bcs	12bec <__assert_fail@plt+0x1aa8>
   12b44:	add	r1, ip, r7
   12b48:	ldrb	r1, [r1, #1]
   12b4c:	cmp	r1, #63	; 0x3f
   12b50:	bne	12bec <__assert_fail@plt+0x1aa8>
   12b54:	ldrb	r5, [ip, r0]
   12b58:	sub	r1, r5, #33	; 0x21
   12b5c:	cmp	r1, #29
   12b60:	bhi	12bec <__assert_fail@plt+0x1aa8>
   12b64:	movw	r3, #20929	; 0x51c1
   12b68:	mov	r2, #1
   12b6c:	movt	r3, #14336	; 0x3800
   12b70:	tst	r3, r2, lsl r1
   12b74:	beq	12bec <__assert_fail@plt+0x1aa8>
   12b78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b7c:	tst	r1, #1
   12b80:	bne	13154 <__assert_fail@plt+0x2010>
   12b84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12b88:	mov	r7, r0
   12b8c:	cmp	r8, r1
   12b90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12b94:	movcc	r1, #63	; 0x3f
   12b98:	strbcc	r1, [r2, r8]
   12b9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12ba0:	add	r1, r8, #1
   12ba4:	cmp	r1, r2
   12ba8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12bac:	movcc	r2, #34	; 0x22
   12bb0:	strbcc	r2, [r3, r1]
   12bb4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12bb8:	add	r1, r8, #2
   12bbc:	cmp	r1, r2
   12bc0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12bc4:	movcc	r2, #34	; 0x22
   12bc8:	strbcc	r2, [r3, r1]
   12bcc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12bd0:	add	r1, r8, #3
   12bd4:	add	r8, r8, #4
   12bd8:	cmp	r1, r2
   12bdc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12be0:	movcc	r2, #63	; 0x3f
   12be4:	strbcc	r2, [r3, r1]
   12be8:	b	12bf0 <__assert_fail@plt+0x1aac>
   12bec:	mov	r5, #63	; 0x3f
   12bf0:	mov	sl, #0
   12bf4:	b	126a0 <__assert_fail@plt+0x155c>
   12bf8:	str	r0, [sp, #40]	; 0x28
   12bfc:	add	r0, r2, r7
   12c00:	str	r6, [sp, #76]	; 0x4c
   12c04:	add	r1, r7, #1
   12c08:	ldr	lr, [sp, #80]	; 0x50
   12c0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12c10:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c14:	mov	r3, #0
   12c18:	str	r0, [sp, #36]	; 0x24
   12c1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c20:	b	12cb4 <__assert_fail@plt+0x1b70>
   12c24:	str	r0, [sp, #76]	; 0x4c
   12c28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c2c:	cmp	r9, #0
   12c30:	movwne	r9, #1
   12c34:	mvn	r7, r0
   12c38:	orr	r7, r7, r9
   12c3c:	tst	r7, #1
   12c40:	bne	12c90 <__assert_fail@plt+0x1b4c>
   12c44:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c48:	cmp	r8, r6
   12c4c:	bcs	12c64 <__assert_fail@plt+0x1b20>
   12c50:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12c54:	mov	r2, r4
   12c58:	mov	r4, #39	; 0x27
   12c5c:	strb	r4, [r7, r8]
   12c60:	mov	r4, r2
   12c64:	add	r7, r8, #1
   12c68:	cmp	r7, r6
   12c6c:	bcs	12c84 <__assert_fail@plt+0x1b40>
   12c70:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12c74:	mov	r2, r4
   12c78:	mov	r4, #39	; 0x27
   12c7c:	strb	r4, [r0, r7]
   12c80:	mov	r4, r2
   12c84:	add	r8, r8, #2
   12c88:	mov	r0, #0
   12c8c:	b	12c98 <__assert_fail@plt+0x1b54>
   12c90:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c98:	cmp	r8, r6
   12c9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12ca0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12ca4:	strbcc	r5, [r2, r8]
   12ca8:	add	r8, r8, #1
   12cac:	ldrb	r5, [ip, r1]
   12cb0:	add	r1, r1, #1
   12cb4:	ldr	r2, [sp, #40]	; 0x28
   12cb8:	tst	r2, #1
   12cbc:	beq	12cf8 <__assert_fail@plt+0x1bb4>
   12cc0:	ldr	r2, [sp, #76]	; 0x4c
   12cc4:	str	r0, [fp, #-48]	; 0xffffffd0
   12cc8:	tst	r2, #1
   12ccc:	beq	12cf0 <__assert_fail@plt+0x1bac>
   12cd0:	cmp	r8, r6
   12cd4:	bcs	12cec <__assert_fail@plt+0x1ba8>
   12cd8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12cdc:	mov	r2, r4
   12ce0:	mov	r4, #92	; 0x5c
   12ce4:	strb	r4, [r6, r8]
   12ce8:	mov	r4, r2
   12cec:	add	r8, r8, #1
   12cf0:	mov	r0, #0
   12cf4:	b	12dec <__assert_fail@plt+0x1ca8>
   12cf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12cfc:	tst	r2, #1
   12d00:	bne	1304c <__assert_fail@plt+0x1f08>
   12d04:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12d08:	cmp	r7, #2
   12d0c:	movwne	r3, #1
   12d10:	orr	r3, r3, r0
   12d14:	tst	r3, #1
   12d18:	bne	12d74 <__assert_fail@plt+0x1c30>
   12d1c:	cmp	r8, r6
   12d20:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d24:	movcc	r3, #39	; 0x27
   12d28:	strbcc	r3, [r2, r8]
   12d2c:	add	r3, r8, #1
   12d30:	cmp	r3, r6
   12d34:	bcs	12d4c <__assert_fail@plt+0x1c08>
   12d38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d3c:	mov	r7, r4
   12d40:	mov	r4, #36	; 0x24
   12d44:	strb	r4, [r2, r3]
   12d48:	mov	r4, r7
   12d4c:	add	r3, r8, #2
   12d50:	cmp	r3, r6
   12d54:	bcs	12d6c <__assert_fail@plt+0x1c28>
   12d58:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d5c:	mov	r7, r4
   12d60:	mov	r4, #39	; 0x27
   12d64:	strb	r4, [r2, r3]
   12d68:	mov	r4, r7
   12d6c:	add	r8, r8, #3
   12d70:	mov	r0, #1
   12d74:	cmp	r8, r6
   12d78:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d7c:	movcc	r3, #92	; 0x5c
   12d80:	strbcc	r3, [r2, r8]
   12d84:	add	r3, r8, #1
   12d88:	cmp	r3, r6
   12d8c:	bcs	12dac <__assert_fail@plt+0x1c68>
   12d90:	mov	r2, r4
   12d94:	and	r7, r5, #192	; 0xc0
   12d98:	mov	r4, #48	; 0x30
   12d9c:	orr	r7, r4, r7, lsr #6
   12da0:	mov	r4, r2
   12da4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12da8:	strb	r7, [r2, r3]
   12dac:	add	r3, r8, #2
   12db0:	cmp	r3, r6
   12db4:	bcs	12dd4 <__assert_fail@plt+0x1c90>
   12db8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12dbc:	mov	r6, r4
   12dc0:	lsr	r7, r5, #3
   12dc4:	mov	r4, #6
   12dc8:	bfi	r7, r4, #3, #29
   12dcc:	mov	r4, r6
   12dd0:	strb	r7, [r2, r3]
   12dd4:	str	r0, [fp, #-48]	; 0xffffffd0
   12dd8:	ldr	r0, [sp, #76]	; 0x4c
   12ddc:	mov	r3, #6
   12de0:	add	r8, r8, #3
   12de4:	bfi	r5, r3, #3, #29
   12de8:	mov	r3, #1
   12dec:	ldr	r2, [sp, #36]	; 0x24
   12df0:	and	r9, r3, #1
   12df4:	cmp	r2, r1
   12df8:	bhi	12c24 <__assert_fail@plt+0x1ae0>
   12dfc:	cmp	r9, #0
   12e00:	sub	r7, r1, #1
   12e04:	mov	r0, r5
   12e08:	movwne	r9, #1
   12e0c:	cmp	r9, #0
   12e10:	bne	12e54 <__assert_fail@plt+0x1d10>
   12e14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e18:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e1c:	tst	r5, #1
   12e20:	beq	129c4 <__assert_fail@plt+0x1880>
   12e24:	cmp	r8, r6
   12e28:	mov	r5, #0
   12e2c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e30:	movcc	r1, #39	; 0x27
   12e34:	strbcc	r1, [r2, r8]
   12e38:	add	r1, r8, #1
   12e3c:	add	r8, r8, #2
   12e40:	cmp	r1, r6
   12e44:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e48:	movcc	r2, #39	; 0x27
   12e4c:	strbcc	r2, [r3, r1]
   12e50:	b	129c4 <__assert_fail@plt+0x1880>
   12e54:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e58:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e5c:	b	129c4 <__assert_fail@plt+0x1880>
   12e60:	cmp	r8, r1
   12e64:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e68:	movcc	r0, #39	; 0x27
   12e6c:	strbcc	r0, [r2, r8]
   12e70:	add	r0, r8, #1
   12e74:	cmp	r0, r1
   12e78:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e7c:	movcc	r2, #36	; 0x24
   12e80:	strbcc	r2, [r3, r0]
   12e84:	add	r0, r8, #2
   12e88:	cmp	r0, r1
   12e8c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e90:	movcc	r2, #39	; 0x27
   12e94:	strbcc	r2, [r3, r0]
   12e98:	add	r0, r8, #3
   12e9c:	mov	r3, #1
   12ea0:	cmp	r0, r1
   12ea4:	add	r8, r0, #1
   12ea8:	str	r3, [fp, #-48]	; 0xffffffd0
   12eac:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12eb0:	movcc	r1, #92	; 0x5c
   12eb4:	strbcc	r1, [r2, r0]
   12eb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12ebc:	cmp	r1, #2
   12ec0:	beq	12f24 <__assert_fail@plt+0x1de0>
   12ec4:	add	r1, r7, #1
   12ec8:	mov	sl, #0
   12ecc:	mov	r9, #1
   12ed0:	mov	r5, #48	; 0x30
   12ed4:	cmp	r1, lr
   12ed8:	bcs	126a0 <__assert_fail@plt+0x155c>
   12edc:	ldrb	r1, [ip, r1]
   12ee0:	sub	r1, r1, #48	; 0x30
   12ee4:	uxtb	r1, r1
   12ee8:	cmp	r1, #9
   12eec:	bhi	126a0 <__assert_fail@plt+0x155c>
   12ef0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ef4:	cmp	r8, r1
   12ef8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12efc:	movcc	r1, #48	; 0x30
   12f00:	strbcc	r1, [r2, r8]
   12f04:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12f08:	add	r1, r0, #2
   12f0c:	add	r8, r0, #3
   12f10:	cmp	r1, r2
   12f14:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12f18:	movcc	r2, #48	; 0x30
   12f1c:	strbcc	r2, [r3, r1]
   12f20:	b	126a0 <__assert_fail@plt+0x155c>
   12f24:	mov	r0, #48	; 0x30
   12f28:	mov	r9, #1
   12f2c:	mov	sl, #0
   12f30:	b	12938 <__assert_fail@plt+0x17f4>
   12f34:	mov	sl, #0
   12f38:	b	12f74 <__assert_fail@plt+0x1e30>
   12f3c:	mov	sl, #0
   12f40:	cmp	lr, r6
   12f44:	bls	12f74 <__assert_fail@plt+0x1e30>
   12f48:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f4c:	ldr	r6, [sp, #40]	; 0x28
   12f50:	ldr	r0, [sp, #36]	; 0x24
   12f54:	ldrb	r0, [r0, r6]
   12f58:	cmp	r0, #0
   12f5c:	beq	12f7c <__assert_fail@plt+0x1e38>
   12f60:	add	r6, r6, #1
   12f64:	add	r0, r7, r6
   12f68:	cmp	r0, lr
   12f6c:	bcc	12f50 <__assert_fail@plt+0x1e0c>
   12f70:	b	12f7c <__assert_fail@plt+0x1e38>
   12f74:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f78:	ldr	r6, [sp, #40]	; 0x28
   12f7c:	mov	r1, r6
   12f80:	ldr	r4, [sp, #20]
   12f84:	ldr	r6, [sp, #76]	; 0x4c
   12f88:	b	1287c <__assert_fail@plt+0x1738>
   12f8c:	mov	lr, r7
   12f90:	b	12f98 <__assert_fail@plt+0x1e54>
   12f94:	mvn	lr, #0
   12f98:	ldr	r9, [fp, #-64]	; 0xffffffc0
   12f9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12fa0:	eor	r0, r9, #2
   12fa4:	orr	r0, r0, r8
   12fa8:	clz	r0, r0
   12fac:	lsr	r0, r0, #5
   12fb0:	tst	r1, r0
   12fb4:	bne	130b0 <__assert_fail@plt+0x1f6c>
   12fb8:	mov	r0, r1
   12fbc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12fc0:	cmp	r9, #2
   12fc4:	movwne	r1, #1
   12fc8:	orr	r0, r0, r1
   12fcc:	tst	r0, #1
   12fd0:	bne	130f0 <__assert_fail@plt+0x1fac>
   12fd4:	ldr	r0, [sp, #52]	; 0x34
   12fd8:	ldr	r1, [sp, #68]	; 0x44
   12fdc:	str	lr, [sp, #80]	; 0x50
   12fe0:	eor	r0, r0, #1
   12fe4:	tst	r0, #1
   12fe8:	bne	130f0 <__assert_fail@plt+0x1fac>
   12fec:	tst	r4, #1
   12ff0:	bne	130b8 <__assert_fail@plt+0x1f74>
   12ff4:	mov	r7, #0
   12ff8:	cmp	r1, #0
   12ffc:	beq	130e8 <__assert_fail@plt+0x1fa4>
   13000:	ldr	r0, [sp, #84]	; 0x54
   13004:	mov	r3, #0
   13008:	cmp	r6, #0
   1300c:	mov	r2, #0
   13010:	mov	r4, r1
   13014:	str	r3, [fp, #-72]	; 0xffffffb8
   13018:	beq	12154 <__assert_fail@plt+0x1010>
   1301c:	b	130f0 <__assert_fail@plt+0x1fac>
   13020:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13024:	b	1304c <__assert_fail@plt+0x1f08>
   13028:	ldr	ip, [fp, #-84]	; 0xffffffac
   1302c:	mov	r2, #1
   13030:	mov	lr, r4
   13034:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13038:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1303c:	b	13050 <__assert_fail@plt+0x1f0c>
   13040:	ldr	ip, [fp, #-84]	; 0xffffffac
   13044:	mov	r7, #2
   13048:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1304c:	ldr	r2, [sp, #84]	; 0x54
   13050:	mov	r0, #0
   13054:	ldr	r1, [fp, #12]
   13058:	tst	r2, #1
   1305c:	mov	r2, r7
   13060:	mov	r3, lr
   13064:	str	r0, [sp, #8]
   13068:	ldr	r0, [sp, #64]	; 0x40
   1306c:	movwne	r2, #4
   13070:	cmp	r7, #2
   13074:	movne	r2, r7
   13078:	str	r2, [sp]
   1307c:	mov	r2, ip
   13080:	bic	r1, r1, #2
   13084:	str	r0, [sp, #12]
   13088:	ldr	r0, [sp, #72]	; 0x48
   1308c:	str	r1, [sp, #4]
   13090:	mov	r1, r6
   13094:	str	r0, [sp, #16]
   13098:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1309c:	bl	120dc <__assert_fail@plt+0xf98>
   130a0:	mov	r8, r0
   130a4:	mov	r0, r8
   130a8:	sub	sp, fp, #28
   130ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b0:	mov	r7, #2
   130b4:	b	1304c <__assert_fail@plt+0x1f08>
   130b8:	mov	r0, #5
   130bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   130c0:	ldr	r3, [sp, #80]	; 0x50
   130c4:	str	r0, [sp]
   130c8:	ldr	r0, [fp, #12]
   130cc:	str	r0, [sp, #4]
   130d0:	ldr	r0, [fp, #16]
   130d4:	str	r0, [sp, #8]
   130d8:	ldr	r0, [sp, #64]	; 0x40
   130dc:	str	r0, [sp, #12]
   130e0:	ldr	r0, [sp, #72]	; 0x48
   130e4:	b	13094 <__assert_fail@plt+0x1f50>
   130e8:	mov	r0, #0
   130ec:	str	r0, [fp, #-72]	; 0xffffffb8
   130f0:	ldr	r1, [sp, #92]	; 0x5c
   130f4:	cmp	r1, #0
   130f8:	beq	13138 <__assert_fail@plt+0x1ff4>
   130fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13100:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13104:	tst	r0, #1
   13108:	bne	1313c <__assert_fail@plt+0x1ff8>
   1310c:	ldrb	r0, [r1]
   13110:	cmp	r0, #0
   13114:	beq	1313c <__assert_fail@plt+0x1ff8>
   13118:	add	r1, r1, #1
   1311c:	cmp	r8, r6
   13120:	strbcc	r0, [r2, r8]
   13124:	add	r8, r8, #1
   13128:	ldrb	r0, [r1], #1
   1312c:	cmp	r0, #0
   13130:	bne	1311c <__assert_fail@plt+0x1fd8>
   13134:	b	1313c <__assert_fail@plt+0x1ff8>
   13138:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1313c:	cmp	r8, r6
   13140:	movcc	r0, #0
   13144:	strbcc	r0, [r2, r8]
   13148:	b	130a4 <__assert_fail@plt+0x1f60>
   1314c:	mov	r2, #1
   13150:	b	13034 <__assert_fail@plt+0x1ef0>
   13154:	mov	r7, #5
   13158:	b	13048 <__assert_fail@plt+0x1f04>
   1315c:	bl	1112c <abort@plt>
   13160:	mov	r3, r2
   13164:	mov	r2, #0
   13168:	b	1316c <__assert_fail@plt+0x2028>
   1316c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13170:	add	fp, sp, #28
   13174:	sub	sp, sp, #36	; 0x24
   13178:	movw	r8, #29080	; 0x7198
   1317c:	cmp	r3, #0
   13180:	mov	r4, r2
   13184:	str	r2, [sp, #24]
   13188:	mov	r5, r1
   1318c:	mov	r6, r0
   13190:	str	r0, [sp, #20]
   13194:	movt	r8, #2
   13198:	movne	r8, r3
   1319c:	bl	1103c <__errno_location@plt>
   131a0:	str	r0, [sp, #28]
   131a4:	cmp	r4, #0
   131a8:	add	sl, r8, #8
   131ac:	ldm	r8, {r3, r9}
   131b0:	ldr	r7, [r0]
   131b4:	ldr	r1, [r8, #40]	; 0x28
   131b8:	ldr	r2, [r8, #44]	; 0x2c
   131bc:	mov	r0, #0
   131c0:	orreq	r9, r9, #1
   131c4:	str	r7, [sp, #32]
   131c8:	mov	r7, r5
   131cc:	stm	sp, {r3, r9, sl}
   131d0:	str	r1, [sp, #12]
   131d4:	str	r2, [sp, #16]
   131d8:	mov	r1, #0
   131dc:	mov	r2, r6
   131e0:	mov	r3, r5
   131e4:	bl	120dc <__assert_fail@plt+0xf98>
   131e8:	add	r4, r0, #1
   131ec:	mov	r5, r0
   131f0:	mov	r0, r4
   131f4:	bl	13ed0 <__assert_fail@plt+0x2d8c>
   131f8:	mov	r6, r0
   131fc:	ldr	r0, [r8]
   13200:	ldr	r2, [r8, #44]	; 0x2c
   13204:	ldr	r1, [r8, #40]	; 0x28
   13208:	mov	r3, r7
   1320c:	stm	sp, {r0, r9, sl}
   13210:	str	r2, [sp, #16]
   13214:	str	r1, [sp, #12]
   13218:	mov	r0, r6
   1321c:	mov	r1, r4
   13220:	ldr	r2, [sp, #20]
   13224:	bl	120dc <__assert_fail@plt+0xf98>
   13228:	ldr	r0, [sp, #24]
   1322c:	ldr	r1, [sp, #32]
   13230:	ldr	r2, [sp, #28]
   13234:	cmp	r0, #0
   13238:	str	r1, [r2]
   1323c:	strne	r5, [r0]
   13240:	mov	r0, r6
   13244:	sub	sp, fp, #28
   13248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1324c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13250:	add	fp, sp, #24
   13254:	movw	r5, #28932	; 0x7104
   13258:	movw	r8, #28928	; 0x7100
   1325c:	movt	r5, #2
   13260:	movt	r8, #2
   13264:	ldr	r0, [r5]
   13268:	ldr	r4, [r8]
   1326c:	cmp	r0, #2
   13270:	blt	1329c <__assert_fail@plt+0x2158>
   13274:	add	r7, r4, #12
   13278:	mov	r6, #0
   1327c:	ldr	r0, [r7, r6, lsl #3]
   13280:	bl	11e80 <__assert_fail@plt+0xd3c>
   13284:	ldr	r1, [r5]
   13288:	add	r2, r6, #2
   1328c:	add	r0, r6, #1
   13290:	mov	r6, r0
   13294:	cmp	r2, r1
   13298:	blt	1327c <__assert_fail@plt+0x2138>
   1329c:	ldr	r0, [r4, #4]
   132a0:	movw	r7, #29128	; 0x71c8
   132a4:	movt	r7, #2
   132a8:	cmp	r0, r7
   132ac:	beq	132c4 <__assert_fail@plt+0x2180>
   132b0:	bl	11e80 <__assert_fail@plt+0xd3c>
   132b4:	movw	r0, #28936	; 0x7108
   132b8:	mov	r6, #256	; 0x100
   132bc:	movt	r0, #2
   132c0:	strd	r6, [r0]
   132c4:	movw	r6, #28936	; 0x7108
   132c8:	movt	r6, #2
   132cc:	cmp	r4, r6
   132d0:	beq	132e0 <__assert_fail@plt+0x219c>
   132d4:	mov	r0, r4
   132d8:	bl	11e80 <__assert_fail@plt+0xd3c>
   132dc:	str	r6, [r8]
   132e0:	mov	r0, #1
   132e4:	str	r0, [r5]
   132e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132ec:	movw	r3, #29080	; 0x7198
   132f0:	mvn	r2, #0
   132f4:	movt	r3, #2
   132f8:	b	132fc <__assert_fail@plt+0x21b8>
   132fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13300:	add	fp, sp, #28
   13304:	sub	sp, sp, #44	; 0x2c
   13308:	mov	r7, r3
   1330c:	str	r2, [sp, #36]	; 0x24
   13310:	str	r1, [sp, #32]
   13314:	mov	r5, r0
   13318:	bl	1103c <__errno_location@plt>
   1331c:	cmp	r5, #0
   13320:	blt	1348c <__assert_fail@plt+0x2348>
   13324:	cmn	r5, #-2147483647	; 0x80000001
   13328:	beq	1348c <__assert_fail@plt+0x2348>
   1332c:	movw	r8, #28932	; 0x7104
   13330:	movw	r4, #28928	; 0x7100
   13334:	str	r0, [sp, #28]
   13338:	ldr	r0, [r0]
   1333c:	movt	r8, #2
   13340:	movt	r4, #2
   13344:	ldr	r1, [r8]
   13348:	ldr	r6, [r4]
   1334c:	str	r0, [sp, #24]
   13350:	cmp	r1, r5
   13354:	ble	13360 <__assert_fail@plt+0x221c>
   13358:	mov	sl, r6
   1335c:	b	133c8 <__assert_fail@plt+0x2284>
   13360:	movw	r9, #28936	; 0x7108
   13364:	mov	r0, #8
   13368:	add	r2, r5, #1
   1336c:	str	r1, [fp, #-32]	; 0xffffffe0
   13370:	mvn	r3, #-2147483648	; 0x80000000
   13374:	movt	r9, #2
   13378:	str	r0, [sp]
   1337c:	sub	r2, r2, r1
   13380:	sub	r1, fp, #32
   13384:	subs	r0, r6, r9
   13388:	movne	r0, r6
   1338c:	bl	14000 <__assert_fail@plt+0x2ebc>
   13390:	cmp	r6, r9
   13394:	mov	sl, r0
   13398:	str	r0, [r4]
   1339c:	ldrdeq	r0, [r9]
   133a0:	stmeq	sl, {r0, r1}
   133a4:	ldr	r1, [r8]
   133a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   133ac:	add	r0, sl, r1, lsl #3
   133b0:	sub	r1, r2, r1
   133b4:	lsl	r2, r1, #3
   133b8:	mov	r1, #0
   133bc:	bl	11054 <memset@plt>
   133c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   133c4:	str	r0, [r8]
   133c8:	mov	r9, sl
   133cc:	ldr	r6, [r9, r5, lsl #3]!
   133d0:	ldr	r4, [r9, #4]!
   133d4:	ldm	r7, {r0, r1}
   133d8:	ldr	r2, [r7, #40]	; 0x28
   133dc:	ldr	r3, [r7, #44]	; 0x2c
   133e0:	orr	r8, r1, #1
   133e4:	add	r1, r7, #8
   133e8:	stm	sp, {r0, r8}
   133ec:	add	r0, sp, #8
   133f0:	str	r1, [sp, #20]
   133f4:	stm	r0, {r1, r2, r3}
   133f8:	mov	r0, r4
   133fc:	mov	r1, r6
   13400:	ldr	r2, [sp, #32]
   13404:	ldr	r3, [sp, #36]	; 0x24
   13408:	bl	120dc <__assert_fail@plt+0xf98>
   1340c:	cmp	r6, r0
   13410:	bhi	13474 <__assert_fail@plt+0x2330>
   13414:	add	r6, r0, #1
   13418:	movw	r0, #29128	; 0x71c8
   1341c:	movt	r0, #2
   13420:	str	r6, [sl, r5, lsl #3]
   13424:	cmp	r4, r0
   13428:	beq	13434 <__assert_fail@plt+0x22f0>
   1342c:	mov	r0, r4
   13430:	bl	11e80 <__assert_fail@plt+0xd3c>
   13434:	mov	r0, r6
   13438:	bl	13ed0 <__assert_fail@plt+0x2d8c>
   1343c:	str	r0, [r9]
   13440:	mov	r4, r0
   13444:	add	r3, sp, #8
   13448:	ldr	r0, [r7]
   1344c:	ldr	r1, [r7, #40]	; 0x28
   13450:	ldr	r2, [r7, #44]	; 0x2c
   13454:	stm	sp, {r0, r8}
   13458:	ldr	r0, [sp, #20]
   1345c:	stm	r3, {r0, r1, r2}
   13460:	mov	r0, r4
   13464:	mov	r1, r6
   13468:	ldr	r2, [sp, #32]
   1346c:	ldr	r3, [sp, #36]	; 0x24
   13470:	bl	120dc <__assert_fail@plt+0xf98>
   13474:	ldr	r0, [sp, #28]
   13478:	ldr	r1, [sp, #24]
   1347c:	str	r1, [r0]
   13480:	mov	r0, r4
   13484:	sub	sp, fp, #28
   13488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348c:	bl	1112c <abort@plt>
   13490:	movw	r3, #29080	; 0x7198
   13494:	movt	r3, #2
   13498:	b	132fc <__assert_fail@plt+0x21b8>
   1349c:	movw	r3, #29080	; 0x7198
   134a0:	mov	r1, r0
   134a4:	mov	r0, #0
   134a8:	mvn	r2, #0
   134ac:	movt	r3, #2
   134b0:	b	132fc <__assert_fail@plt+0x21b8>
   134b4:	movw	r3, #29080	; 0x7198
   134b8:	mov	r2, r1
   134bc:	mov	r1, r0
   134c0:	mov	r0, #0
   134c4:	movt	r3, #2
   134c8:	b	132fc <__assert_fail@plt+0x21b8>
   134cc:	push	{fp, lr}
   134d0:	mov	fp, sp
   134d4:	sub	sp, sp, #48	; 0x30
   134d8:	vmov.i32	q8, #0	; 0x00000000
   134dc:	mov	ip, #32
   134e0:	mov	r3, sp
   134e4:	mov	lr, r2
   134e8:	cmp	r1, #10
   134ec:	add	r2, r3, #16
   134f0:	vst1.64	{d16-d17}, [r3], ip
   134f4:	vst1.64	{d16-d17}, [r3]
   134f8:	vst1.64	{d16-d17}, [r2]
   134fc:	beq	1351c <__assert_fail@plt+0x23d8>
   13500:	str	r1, [sp]
   13504:	mov	r3, sp
   13508:	mov	r1, lr
   1350c:	mvn	r2, #0
   13510:	bl	132fc <__assert_fail@plt+0x21b8>
   13514:	mov	sp, fp
   13518:	pop	{fp, pc}
   1351c:	bl	1112c <abort@plt>
   13520:	push	{r4, sl, fp, lr}
   13524:	add	fp, sp, #8
   13528:	sub	sp, sp, #48	; 0x30
   1352c:	mov	ip, r3
   13530:	mov	r3, sp
   13534:	vmov.i32	q8, #0	; 0x00000000
   13538:	mov	lr, #32
   1353c:	cmp	r1, #10
   13540:	add	r4, r3, #16
   13544:	vst1.64	{d16-d17}, [r3], lr
   13548:	vst1.64	{d16-d17}, [r3]
   1354c:	vst1.64	{d16-d17}, [r4]
   13550:	beq	13570 <__assert_fail@plt+0x242c>
   13554:	str	r1, [sp]
   13558:	mov	r1, r2
   1355c:	mov	r3, sp
   13560:	mov	r2, ip
   13564:	bl	132fc <__assert_fail@plt+0x21b8>
   13568:	sub	sp, fp, #8
   1356c:	pop	{r4, sl, fp, pc}
   13570:	bl	1112c <abort@plt>
   13574:	mov	r2, r1
   13578:	mov	r1, r0
   1357c:	mov	r0, #0
   13580:	b	134cc <__assert_fail@plt+0x2388>
   13584:	mov	r3, r2
   13588:	mov	r2, r1
   1358c:	mov	r1, r0
   13590:	mov	r0, #0
   13594:	b	13520 <__assert_fail@plt+0x23dc>
   13598:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1359c:	add	fp, sp, #24
   135a0:	sub	sp, sp, #48	; 0x30
   135a4:	movw	r8, #29080	; 0x7198
   135a8:	mov	lr, r0
   135ac:	mov	r3, sp
   135b0:	mov	ip, r1
   135b4:	movt	r8, #2
   135b8:	mov	r1, r3
   135bc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   135c0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   135c4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   135c8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   135cc:	ubfx	r0, r2, #5, #3
   135d0:	and	r2, r2, #31
   135d4:	mov	r4, #1
   135d8:	add	r0, r3, r0, lsl #2
   135dc:	ldr	r1, [r0, #8]
   135e0:	bic	r4, r4, r1, lsr r2
   135e4:	eor	r1, r1, r4, lsl r2
   135e8:	mov	r2, ip
   135ec:	str	r1, [r0, #8]
   135f0:	mov	r0, #0
   135f4:	mov	r1, lr
   135f8:	bl	132fc <__assert_fail@plt+0x21b8>
   135fc:	sub	sp, fp, #24
   13600:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13604:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13608:	add	fp, sp, #24
   1360c:	sub	sp, sp, #48	; 0x30
   13610:	movw	lr, #29080	; 0x7198
   13614:	mov	ip, r0
   13618:	mov	r3, sp
   1361c:	movt	lr, #2
   13620:	mov	r2, r3
   13624:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13628:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1362c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13630:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13634:	ubfx	r0, r1, #5, #3
   13638:	and	r1, r1, #31
   1363c:	mov	r7, #1
   13640:	add	r0, r3, r0, lsl #2
   13644:	ldr	r2, [r0, #8]
   13648:	bic	r7, r7, r2, lsr r1
   1364c:	eor	r1, r2, r7, lsl r1
   13650:	mvn	r2, #0
   13654:	str	r1, [r0, #8]
   13658:	mov	r0, #0
   1365c:	mov	r1, ip
   13660:	bl	132fc <__assert_fail@plt+0x21b8>
   13664:	sub	sp, fp, #24
   13668:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1366c:	push	{r4, r5, r6, r7, fp, lr}
   13670:	add	fp, sp, #16
   13674:	sub	sp, sp, #48	; 0x30
   13678:	movw	lr, #29080	; 0x7198
   1367c:	mov	ip, r0
   13680:	mov	r3, sp
   13684:	movt	lr, #2
   13688:	mov	r2, r3
   1368c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13690:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13694:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13698:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1369c:	mov	r1, ip
   136a0:	mvn	r2, #0
   136a4:	ldr	r0, [sp, #12]
   136a8:	orr	r0, r0, #67108864	; 0x4000000
   136ac:	str	r0, [sp, #12]
   136b0:	mov	r0, #0
   136b4:	bl	132fc <__assert_fail@plt+0x21b8>
   136b8:	sub	sp, fp, #16
   136bc:	pop	{r4, r5, r6, r7, fp, pc}
   136c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136c4:	add	fp, sp, #24
   136c8:	sub	sp, sp, #48	; 0x30
   136cc:	movw	r8, #29080	; 0x7198
   136d0:	mov	ip, r1
   136d4:	mov	lr, r0
   136d8:	mov	r3, sp
   136dc:	movt	r8, #2
   136e0:	mov	r2, r3
   136e4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   136e8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   136ec:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   136f0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   136f4:	mov	r1, lr
   136f8:	mov	r2, ip
   136fc:	ldr	r0, [sp, #12]
   13700:	orr	r0, r0, #67108864	; 0x4000000
   13704:	str	r0, [sp, #12]
   13708:	mov	r0, #0
   1370c:	bl	132fc <__assert_fail@plt+0x21b8>
   13710:	sub	sp, fp, #24
   13714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1371c:	add	fp, sp, #24
   13720:	sub	sp, sp, #96	; 0x60
   13724:	mov	lr, sp
   13728:	vmov.i32	q8, #0	; 0x00000000
   1372c:	mov	ip, r2
   13730:	cmp	r1, #10
   13734:	add	r3, lr, #16
   13738:	mov	r2, lr
   1373c:	vst1.64	{d16-d17}, [r3]
   13740:	mov	r3, #28
   13744:	vst1.64	{d16-d17}, [r2], r3
   13748:	vst1.32	{d16-d17}, [r2]
   1374c:	beq	1378c <__assert_fail@plt+0x2648>
   13750:	str	r1, [sp, #48]	; 0x30
   13754:	add	r3, sp, #48	; 0x30
   13758:	ldm	lr!, {r2, r4, r5, r6, r7}
   1375c:	add	r1, r3, #4
   13760:	stmia	r1!, {r2, r4, r5, r6, r7}
   13764:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13768:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1376c:	mvn	r2, #0
   13770:	ldr	r1, [sp, #60]	; 0x3c
   13774:	orr	r1, r1, #67108864	; 0x4000000
   13778:	str	r1, [sp, #60]	; 0x3c
   1377c:	mov	r1, ip
   13780:	bl	132fc <__assert_fail@plt+0x21b8>
   13784:	sub	sp, fp, #24
   13788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1378c:	bl	1112c <abort@plt>
   13790:	push	{fp, lr}
   13794:	mov	fp, sp
   13798:	sub	sp, sp, #8
   1379c:	mvn	ip, #0
   137a0:	str	ip, [sp]
   137a4:	bl	137b0 <__assert_fail@plt+0x266c>
   137a8:	mov	sp, fp
   137ac:	pop	{fp, pc}
   137b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137b4:	add	fp, sp, #24
   137b8:	sub	sp, sp, #48	; 0x30
   137bc:	movw	ip, #29080	; 0x7198
   137c0:	mov	lr, r3
   137c4:	mov	r3, sp
   137c8:	cmp	r1, #0
   137cc:	movt	ip, #2
   137d0:	cmpne	r2, #0
   137d4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   137d8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   137dc:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   137e0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   137e4:	mov	r3, #10
   137e8:	str	r3, [sp]
   137ec:	bne	137f4 <__assert_fail@plt+0x26b0>
   137f0:	bl	1112c <abort@plt>
   137f4:	ldr	ip, [fp, #8]
   137f8:	str	r2, [sp, #44]	; 0x2c
   137fc:	str	r1, [sp, #40]	; 0x28
   13800:	mov	r3, sp
   13804:	mov	r1, lr
   13808:	mov	r2, ip
   1380c:	bl	132fc <__assert_fail@plt+0x21b8>
   13810:	sub	sp, fp, #24
   13814:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13818:	push	{fp, lr}
   1381c:	mov	fp, sp
   13820:	sub	sp, sp, #8
   13824:	mov	r3, r2
   13828:	mov	r2, r1
   1382c:	mov	r1, r0
   13830:	mvn	r0, #0
   13834:	str	r0, [sp]
   13838:	mov	r0, #0
   1383c:	bl	137b0 <__assert_fail@plt+0x266c>
   13840:	mov	sp, fp
   13844:	pop	{fp, pc}
   13848:	push	{fp, lr}
   1384c:	mov	fp, sp
   13850:	sub	sp, sp, #8
   13854:	mov	ip, r2
   13858:	mov	r2, r1
   1385c:	mov	r1, r0
   13860:	str	r3, [sp]
   13864:	mov	r0, #0
   13868:	mov	r3, ip
   1386c:	bl	137b0 <__assert_fail@plt+0x266c>
   13870:	mov	sp, fp
   13874:	pop	{fp, pc}
   13878:	movw	r3, #28944	; 0x7110
   1387c:	movt	r3, #2
   13880:	b	132fc <__assert_fail@plt+0x21b8>
   13884:	movw	r3, #28944	; 0x7110
   13888:	mov	r2, r1
   1388c:	mov	r1, r0
   13890:	mov	r0, #0
   13894:	movt	r3, #2
   13898:	b	132fc <__assert_fail@plt+0x21b8>
   1389c:	movw	r3, #28944	; 0x7110
   138a0:	mvn	r2, #0
   138a4:	movt	r3, #2
   138a8:	b	132fc <__assert_fail@plt+0x21b8>
   138ac:	movw	r3, #28944	; 0x7110
   138b0:	mov	r1, r0
   138b4:	mov	r0, #0
   138b8:	mvn	r2, #0
   138bc:	movt	r3, #2
   138c0:	b	132fc <__assert_fail@plt+0x21b8>
   138c4:	push	{r4, r5, fp, lr}
   138c8:	add	fp, sp, #8
   138cc:	mov	r5, r0
   138d0:	mov	r4, r1
   138d4:	mov	r0, #0
   138d8:	mov	r2, #5
   138dc:	mov	r1, r5
   138e0:	bl	10f34 <dcgettext@plt>
   138e4:	cmp	r0, r5
   138e8:	popne	{r4, r5, fp, pc}
   138ec:	bl	14f94 <__assert_fail@plt+0x3e50>
   138f0:	ldrb	r1, [r0]
   138f4:	and	r1, r1, #223	; 0xdf
   138f8:	cmp	r1, #71	; 0x47
   138fc:	beq	13964 <__assert_fail@plt+0x2820>
   13900:	cmp	r1, #85	; 0x55
   13904:	bne	13988 <__assert_fail@plt+0x2844>
   13908:	ldrb	r1, [r0, #1]
   1390c:	and	r1, r1, #223	; 0xdf
   13910:	cmp	r1, #84	; 0x54
   13914:	bne	13988 <__assert_fail@plt+0x2844>
   13918:	ldrb	r1, [r0, #2]
   1391c:	and	r1, r1, #223	; 0xdf
   13920:	cmp	r1, #70	; 0x46
   13924:	ldrbeq	r1, [r0, #3]
   13928:	cmpeq	r1, #45	; 0x2d
   1392c:	bne	13988 <__assert_fail@plt+0x2844>
   13930:	ldrb	r1, [r0, #4]
   13934:	cmp	r1, #56	; 0x38
   13938:	ldrbeq	r0, [r0, #5]
   1393c:	cmpeq	r0, #0
   13940:	bne	13988 <__assert_fail@plt+0x2844>
   13944:	ldrb	r1, [r5]
   13948:	movw	r2, #23696	; 0x5c90
   1394c:	movw	r0, #23700	; 0x5c94
   13950:	movt	r2, #1
   13954:	movt	r0, #1
   13958:	cmp	r1, #96	; 0x60
   1395c:	moveq	r0, r2
   13960:	pop	{r4, r5, fp, pc}
   13964:	ldrb	r1, [r0, #1]
   13968:	and	r1, r1, #223	; 0xdf
   1396c:	cmp	r1, #66	; 0x42
   13970:	bne	13988 <__assert_fail@plt+0x2844>
   13974:	ldrb	r1, [r0, #2]
   13978:	cmp	r1, #49	; 0x31
   1397c:	ldrbeq	r1, [r0, #3]
   13980:	cmpeq	r1, #56	; 0x38
   13984:	beq	139a4 <__assert_fail@plt+0x2860>
   13988:	movw	r1, #23690	; 0x5c8a
   1398c:	movw	r0, #23694	; 0x5c8e
   13990:	cmp	r4, #9
   13994:	movt	r1, #1
   13998:	movt	r0, #1
   1399c:	moveq	r0, r1
   139a0:	pop	{r4, r5, fp, pc}
   139a4:	ldrb	r1, [r0, #4]
   139a8:	cmp	r1, #48	; 0x30
   139ac:	ldrbeq	r1, [r0, #5]
   139b0:	cmpeq	r1, #51	; 0x33
   139b4:	bne	13988 <__assert_fail@plt+0x2844>
   139b8:	ldrb	r1, [r0, #6]
   139bc:	cmp	r1, #48	; 0x30
   139c0:	ldrbeq	r0, [r0, #7]
   139c4:	cmpeq	r0, #0
   139c8:	bne	13988 <__assert_fail@plt+0x2844>
   139cc:	ldrb	r1, [r5]
   139d0:	movw	r2, #23704	; 0x5c98
   139d4:	movw	r0, #23708	; 0x5c9c
   139d8:	movt	r2, #1
   139dc:	movt	r0, #1
   139e0:	b	13958 <__assert_fail@plt+0x2814>
   139e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139e8:	add	fp, sp, #24
   139ec:	sub	sp, sp, #32
   139f0:	ldr	r6, [fp, #12]
   139f4:	ldr	r7, [fp, #8]
   139f8:	mov	r4, r2
   139fc:	mov	r8, r0
   13a00:	cmp	r1, #0
   13a04:	beq	13a2c <__assert_fail@plt+0x28e8>
   13a08:	movw	r2, #23796	; 0x5cf4
   13a0c:	mov	r5, r1
   13a10:	str	r3, [sp, #4]
   13a14:	str	r4, [sp]
   13a18:	mov	r0, r8
   13a1c:	mov	r1, #1
   13a20:	movt	r2, #1
   13a24:	mov	r3, r5
   13a28:	b	13a44 <__assert_fail@plt+0x2900>
   13a2c:	movw	r2, #23808	; 0x5d00
   13a30:	str	r3, [sp]
   13a34:	mov	r0, r8
   13a38:	mov	r1, #1
   13a3c:	mov	r3, r4
   13a40:	movt	r2, #1
   13a44:	bl	11084 <__fprintf_chk@plt>
   13a48:	movw	r1, #23815	; 0x5d07
   13a4c:	mov	r0, #0
   13a50:	mov	r2, #5
   13a54:	movt	r1, #1
   13a58:	bl	10f34 <dcgettext@plt>
   13a5c:	movw	r2, #24533	; 0x5fd5
   13a60:	mov	r3, r0
   13a64:	movw	r0, #2022	; 0x7e6
   13a68:	mov	r1, #1
   13a6c:	str	r0, [sp]
   13a70:	movt	r2, #1
   13a74:	mov	r0, r8
   13a78:	bl	11084 <__fprintf_chk@plt>
   13a7c:	movw	r4, #23140	; 0x5a64
   13a80:	mov	r1, r8
   13a84:	movt	r4, #1
   13a88:	mov	r0, r4
   13a8c:	bl	10ebc <fputs_unlocked@plt>
   13a90:	movw	r1, #23819	; 0x5d0b
   13a94:	mov	r0, #0
   13a98:	mov	r2, #5
   13a9c:	movt	r1, #1
   13aa0:	bl	10f34 <dcgettext@plt>
   13aa4:	movw	r3, #23990	; 0x5db6
   13aa8:	mov	r2, r0
   13aac:	mov	r0, r8
   13ab0:	mov	r1, #1
   13ab4:	movt	r3, #1
   13ab8:	bl	11084 <__fprintf_chk@plt>
   13abc:	mov	r0, r4
   13ac0:	mov	r1, r8
   13ac4:	bl	10ebc <fputs_unlocked@plt>
   13ac8:	cmp	r6, #9
   13acc:	bhi	13b30 <__assert_fail@plt+0x29ec>
   13ad0:	add	r0, pc, #0
   13ad4:	ldr	pc, [r0, r6, lsl #2]
   13ad8:	andeq	r3, r1, r8, lsl #26
   13adc:	andeq	r3, r1, r0, lsl #22
   13ae0:	andeq	r3, r1, ip, lsr fp
   13ae4:	andeq	r3, r1, r4, ror #22
   13ae8:	andeq	r3, r1, ip, lsl #23
   13aec:			; <UNDEFINED> instruction: 0x00013bb4
   13af0:	ldrdeq	r3, [r1], -ip
   13af4:	andeq	r3, r1, r4, lsl ip
   13af8:			; <UNDEFINED> instruction: 0x00013cb4
   13afc:	andeq	r3, r1, ip, asr ip
   13b00:	movw	r1, #24024	; 0x5dd8
   13b04:	mov	r0, #0
   13b08:	mov	r2, #5
   13b0c:	movt	r1, #1
   13b10:	bl	10f34 <dcgettext@plt>
   13b14:	ldr	r3, [r7]
   13b18:	mov	r2, r0
   13b1c:	mov	r0, r8
   13b20:	mov	r1, #1
   13b24:	sub	sp, fp, #24
   13b28:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b2c:	b	11084 <__fprintf_chk@plt>
   13b30:	movw	r1, #24343	; 0x5f17
   13b34:	movt	r1, #1
   13b38:	b	13c64 <__assert_fail@plt+0x2b20>
   13b3c:	movw	r1, #24040	; 0x5de8
   13b40:	mov	r0, #0
   13b44:	mov	r2, #5
   13b48:	movt	r1, #1
   13b4c:	bl	10f34 <dcgettext@plt>
   13b50:	mov	r2, r0
   13b54:	ldr	r3, [r7]
   13b58:	ldr	r0, [r7, #4]
   13b5c:	str	r0, [sp]
   13b60:	b	13c50 <__assert_fail@plt+0x2b0c>
   13b64:	movw	r1, #24063	; 0x5dff
   13b68:	mov	r0, #0
   13b6c:	mov	r2, #5
   13b70:	movt	r1, #1
   13b74:	bl	10f34 <dcgettext@plt>
   13b78:	ldr	r3, [r7]
   13b7c:	mov	r2, r0
   13b80:	ldmib	r7, {r0, r1}
   13b84:	stm	sp, {r0, r1}
   13b88:	b	13c50 <__assert_fail@plt+0x2b0c>
   13b8c:	movw	r1, #24091	; 0x5e1b
   13b90:	mov	r0, #0
   13b94:	mov	r2, #5
   13b98:	movt	r1, #1
   13b9c:	bl	10f34 <dcgettext@plt>
   13ba0:	ldr	r3, [r7]
   13ba4:	mov	r2, r0
   13ba8:	ldmib	r7, {r0, r1, r7}
   13bac:	stm	sp, {r0, r1, r7}
   13bb0:	b	13c50 <__assert_fail@plt+0x2b0c>
   13bb4:	movw	r1, #24123	; 0x5e3b
   13bb8:	mov	r0, #0
   13bbc:	mov	r2, #5
   13bc0:	movt	r1, #1
   13bc4:	bl	10f34 <dcgettext@plt>
   13bc8:	ldr	r3, [r7]
   13bcc:	mov	r2, r0
   13bd0:	ldmib	r7, {r0, r1, r6, r7}
   13bd4:	stm	sp, {r0, r1, r6, r7}
   13bd8:	b	13c50 <__assert_fail@plt+0x2b0c>
   13bdc:	movw	r1, #24159	; 0x5e5f
   13be0:	mov	r0, #0
   13be4:	mov	r2, #5
   13be8:	movt	r1, #1
   13bec:	bl	10f34 <dcgettext@plt>
   13bf0:	ldr	r3, [r7]
   13bf4:	mov	r2, r0
   13bf8:	ldmib	r7, {r0, r1, r6}
   13bfc:	ldr	r5, [r7, #16]
   13c00:	ldr	r7, [r7, #20]
   13c04:	stm	sp, {r0, r1, r6}
   13c08:	str	r5, [sp, #12]
   13c0c:	str	r7, [sp, #16]
   13c10:	b	13c50 <__assert_fail@plt+0x2b0c>
   13c14:	movw	r1, #24199	; 0x5e87
   13c18:	mov	r0, #0
   13c1c:	mov	r2, #5
   13c20:	movt	r1, #1
   13c24:	bl	10f34 <dcgettext@plt>
   13c28:	ldr	r3, [r7]
   13c2c:	mov	r2, r0
   13c30:	ldmib	r7, {r0, r1, r6}
   13c34:	ldr	r5, [r7, #16]
   13c38:	ldr	r4, [r7, #20]
   13c3c:	ldr	r7, [r7, #24]
   13c40:	stm	sp, {r0, r1, r6}
   13c44:	str	r5, [sp, #12]
   13c48:	str	r4, [sp, #16]
   13c4c:	str	r7, [sp, #20]
   13c50:	mov	r0, r8
   13c54:	mov	r1, #1
   13c58:	b	13d04 <__assert_fail@plt+0x2bc0>
   13c5c:	movw	r1, #24291	; 0x5ee3
   13c60:	movt	r1, #1
   13c64:	mov	r0, #0
   13c68:	mov	r2, #5
   13c6c:	bl	10f34 <dcgettext@plt>
   13c70:	mov	ip, r0
   13c74:	ldr	r3, [r7]
   13c78:	ldr	r0, [r7, #4]
   13c7c:	ldr	r1, [r7, #8]
   13c80:	ldr	r6, [r7, #12]
   13c84:	ldr	r5, [r7, #16]
   13c88:	ldr	r4, [r7, #20]
   13c8c:	ldr	r2, [r7, #24]
   13c90:	ldr	lr, [r7, #28]
   13c94:	ldr	r7, [r7, #32]
   13c98:	stm	sp, {r0, r1, r6}
   13c9c:	str	r5, [sp, #12]
   13ca0:	str	r4, [sp, #16]
   13ca4:	str	r2, [sp, #20]
   13ca8:	str	lr, [sp, #24]
   13cac:	str	r7, [sp, #28]
   13cb0:	b	13cf8 <__assert_fail@plt+0x2bb4>
   13cb4:	movw	r1, #24243	; 0x5eb3
   13cb8:	mov	r0, #0
   13cbc:	mov	r2, #5
   13cc0:	movt	r1, #1
   13cc4:	bl	10f34 <dcgettext@plt>
   13cc8:	mov	ip, r0
   13ccc:	ldr	r3, [r7]
   13cd0:	ldmib	r7, {r0, r1, r6}
   13cd4:	ldr	r5, [r7, #16]
   13cd8:	ldr	r4, [r7, #20]
   13cdc:	ldr	r2, [r7, #24]
   13ce0:	ldr	r7, [r7, #28]
   13ce4:	stm	sp, {r0, r1, r6}
   13ce8:	str	r5, [sp, #12]
   13cec:	str	r4, [sp, #16]
   13cf0:	str	r2, [sp, #20]
   13cf4:	str	r7, [sp, #24]
   13cf8:	mov	r0, r8
   13cfc:	mov	r1, #1
   13d00:	mov	r2, ip
   13d04:	bl	11084 <__fprintf_chk@plt>
   13d08:	sub	sp, fp, #24
   13d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d10:	push	{r4, sl, fp, lr}
   13d14:	add	fp, sp, #8
   13d18:	sub	sp, sp, #8
   13d1c:	ldr	ip, [fp, #8]
   13d20:	mov	lr, #0
   13d24:	ldr	r4, [ip, lr, lsl #2]
   13d28:	add	lr, lr, #1
   13d2c:	cmp	r4, #0
   13d30:	bne	13d24 <__assert_fail@plt+0x2be0>
   13d34:	sub	r4, lr, #1
   13d38:	str	ip, [sp]
   13d3c:	str	r4, [sp, #4]
   13d40:	bl	139e4 <__assert_fail@plt+0x28a0>
   13d44:	sub	sp, fp, #8
   13d48:	pop	{r4, sl, fp, pc}
   13d4c:	push	{r4, r5, fp, lr}
   13d50:	add	fp, sp, #8
   13d54:	sub	sp, sp, #48	; 0x30
   13d58:	ldr	r4, [fp, #8]
   13d5c:	mov	ip, #0
   13d60:	add	lr, sp, #8
   13d64:	ldr	r5, [r4]
   13d68:	cmp	r5, #0
   13d6c:	str	r5, [lr, ip, lsl #2]
   13d70:	beq	13d84 <__assert_fail@plt+0x2c40>
   13d74:	add	ip, ip, #1
   13d78:	add	r4, r4, #4
   13d7c:	cmp	ip, #10
   13d80:	bcc	13d64 <__assert_fail@plt+0x2c20>
   13d84:	str	lr, [sp]
   13d88:	str	ip, [sp, #4]
   13d8c:	bl	139e4 <__assert_fail@plt+0x28a0>
   13d90:	sub	sp, fp, #8
   13d94:	pop	{r4, r5, fp, pc}
   13d98:	push	{fp, lr}
   13d9c:	mov	fp, sp
   13da0:	sub	sp, sp, #8
   13da4:	add	ip, fp, #8
   13da8:	str	ip, [sp, #4]
   13dac:	str	ip, [sp]
   13db0:	bl	13d4c <__assert_fail@plt+0x2c08>
   13db4:	mov	sp, fp
   13db8:	pop	{fp, pc}
   13dbc:	push	{fp, lr}
   13dc0:	mov	fp, sp
   13dc4:	movw	r0, #29012	; 0x7154
   13dc8:	movt	r0, #2
   13dcc:	ldr	r1, [r0]
   13dd0:	movw	r0, #23140	; 0x5a64
   13dd4:	movt	r0, #1
   13dd8:	bl	10ebc <fputs_unlocked@plt>
   13ddc:	movw	r1, #24403	; 0x5f53
   13de0:	mov	r0, #0
   13de4:	mov	r2, #5
   13de8:	movt	r1, #1
   13dec:	bl	10f34 <dcgettext@plt>
   13df0:	movw	r2, #24423	; 0x5f67
   13df4:	mov	r1, r0
   13df8:	mov	r0, #1
   13dfc:	movt	r2, #1
   13e00:	bl	11060 <__printf_chk@plt>
   13e04:	movw	r1, #24445	; 0x5f7d
   13e08:	mov	r0, #0
   13e0c:	mov	r2, #5
   13e10:	movt	r1, #1
   13e14:	bl	10f34 <dcgettext@plt>
   13e18:	movw	r2, #22621	; 0x585d
   13e1c:	movw	r3, #22949	; 0x59a5
   13e20:	mov	r1, r0
   13e24:	mov	r0, #1
   13e28:	movt	r2, #1
   13e2c:	movt	r3, #1
   13e30:	bl	11060 <__printf_chk@plt>
   13e34:	movw	r1, #24465	; 0x5f91
   13e38:	mov	r0, #0
   13e3c:	mov	r2, #5
   13e40:	movt	r1, #1
   13e44:	bl	10f34 <dcgettext@plt>
   13e48:	movw	r2, #24504	; 0x5fb8
   13e4c:	mov	r1, r0
   13e50:	mov	r0, #1
   13e54:	movt	r2, #1
   13e58:	pop	{fp, lr}
   13e5c:	b	11060 <__printf_chk@plt>
   13e60:	b	13e64 <__assert_fail@plt+0x2d20>
   13e64:	push	{r4, r5, r6, sl, fp, lr}
   13e68:	add	fp, sp, #16
   13e6c:	mov	r4, r2
   13e70:	mov	r5, r1
   13e74:	mov	r6, r0
   13e78:	bl	1502c <__assert_fail@plt+0x3ee8>
   13e7c:	cmp	r0, #0
   13e80:	popne	{r4, r5, r6, sl, fp, pc}
   13e84:	cmp	r6, #0
   13e88:	beq	13e9c <__assert_fail@plt+0x2d58>
   13e8c:	cmp	r5, #0
   13e90:	cmpne	r4, #0
   13e94:	bne	13e9c <__assert_fail@plt+0x2d58>
   13e98:	pop	{r4, r5, r6, sl, fp, pc}
   13e9c:	bl	142f0 <__assert_fail@plt+0x31ac>
   13ea0:	push	{fp, lr}
   13ea4:	mov	fp, sp
   13ea8:	bl	14a74 <__assert_fail@plt+0x3930>
   13eac:	cmp	r0, #0
   13eb0:	popne	{fp, pc}
   13eb4:	bl	142f0 <__assert_fail@plt+0x31ac>
   13eb8:	push	{fp, lr}
   13ebc:	mov	fp, sp
   13ec0:	bl	14a74 <__assert_fail@plt+0x3930>
   13ec4:	cmp	r0, #0
   13ec8:	popne	{fp, pc}
   13ecc:	bl	142f0 <__assert_fail@plt+0x31ac>
   13ed0:	push	{fp, lr}
   13ed4:	mov	fp, sp
   13ed8:	bl	14a74 <__assert_fail@plt+0x3930>
   13edc:	cmp	r0, #0
   13ee0:	popne	{fp, pc}
   13ee4:	bl	142f0 <__assert_fail@plt+0x31ac>
   13ee8:	push	{r4, r5, fp, lr}
   13eec:	add	fp, sp, #8
   13ef0:	mov	r4, r1
   13ef4:	mov	r5, r0
   13ef8:	bl	14aa4 <__assert_fail@plt+0x3960>
   13efc:	cmp	r0, #0
   13f00:	popne	{r4, r5, fp, pc}
   13f04:	cmp	r5, #0
   13f08:	beq	13f18 <__assert_fail@plt+0x2dd4>
   13f0c:	cmp	r4, #0
   13f10:	bne	13f18 <__assert_fail@plt+0x2dd4>
   13f14:	pop	{r4, r5, fp, pc}
   13f18:	bl	142f0 <__assert_fail@plt+0x31ac>
   13f1c:	push	{fp, lr}
   13f20:	mov	fp, sp
   13f24:	cmp	r1, #0
   13f28:	orreq	r1, r1, #1
   13f2c:	bl	14aa4 <__assert_fail@plt+0x3960>
   13f30:	cmp	r0, #0
   13f34:	popne	{fp, pc}
   13f38:	bl	142f0 <__assert_fail@plt+0x31ac>
   13f3c:	push	{fp, lr}
   13f40:	mov	fp, sp
   13f44:	clz	r3, r2
   13f48:	lsr	ip, r3, #5
   13f4c:	clz	r3, r1
   13f50:	lsr	r3, r3, #5
   13f54:	orrs	r3, r3, ip
   13f58:	movwne	r1, #1
   13f5c:	movwne	r2, #1
   13f60:	bl	1502c <__assert_fail@plt+0x3ee8>
   13f64:	cmp	r0, #0
   13f68:	popne	{fp, pc}
   13f6c:	bl	142f0 <__assert_fail@plt+0x31ac>
   13f70:	push	{fp, lr}
   13f74:	mov	fp, sp
   13f78:	mov	r2, r1
   13f7c:	mov	r1, r0
   13f80:	mov	r0, #0
   13f84:	bl	1502c <__assert_fail@plt+0x3ee8>
   13f88:	cmp	r0, #0
   13f8c:	popne	{fp, pc}
   13f90:	bl	142f0 <__assert_fail@plt+0x31ac>
   13f94:	mov	r2, r1
   13f98:	mov	r1, r0
   13f9c:	mov	r0, #0
   13fa0:	b	13f3c <__assert_fail@plt+0x2df8>
   13fa4:	mov	r2, #1
   13fa8:	b	13fac <__assert_fail@plt+0x2e68>
   13fac:	push	{r4, r5, fp, lr}
   13fb0:	add	fp, sp, #8
   13fb4:	ldr	r5, [r1]
   13fb8:	mov	r4, r1
   13fbc:	cmp	r0, #0
   13fc0:	beq	13fd8 <__assert_fail@plt+0x2e94>
   13fc4:	mov	r1, #1
   13fc8:	add	r1, r1, r5, lsr #1
   13fcc:	adds	r5, r5, r1
   13fd0:	bcc	13ff0 <__assert_fail@plt+0x2eac>
   13fd4:	bl	142f0 <__assert_fail@plt+0x31ac>
   13fd8:	cmp	r5, #0
   13fdc:	bne	13ff0 <__assert_fail@plt+0x2eac>
   13fe0:	mov	r1, #64	; 0x40
   13fe4:	cmp	r2, #64	; 0x40
   13fe8:	udiv	r5, r1, r2
   13fec:	addhi	r5, r5, #1
   13ff0:	mov	r1, r5
   13ff4:	bl	13e64 <__assert_fail@plt+0x2d20>
   13ff8:	str	r5, [r4]
   13ffc:	pop	{r4, r5, fp, pc}
   14000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14004:	add	fp, sp, #24
   14008:	ldr	r6, [r1]
   1400c:	mov	r8, r1
   14010:	ldr	r4, [fp, #8]
   14014:	add	r1, r6, r6, asr #1
   14018:	cmp	r1, r6
   1401c:	mvnvs	r1, #-2147483648	; 0x80000000
   14020:	cmp	r1, r3
   14024:	mov	r5, r1
   14028:	movgt	r5, r3
   1402c:	cmn	r3, #1
   14030:	movle	r5, r1
   14034:	cmn	r4, #1
   14038:	ble	14058 <__assert_fail@plt+0x2f14>
   1403c:	cmp	r4, #0
   14040:	beq	140ac <__assert_fail@plt+0x2f68>
   14044:	cmn	r5, #1
   14048:	ble	14080 <__assert_fail@plt+0x2f3c>
   1404c:	mvn	r7, #-2147483648	; 0x80000000
   14050:	udiv	r1, r7, r4
   14054:	b	14074 <__assert_fail@plt+0x2f30>
   14058:	cmn	r5, #1
   1405c:	ble	1409c <__assert_fail@plt+0x2f58>
   14060:	cmn	r4, #1
   14064:	beq	140ac <__assert_fail@plt+0x2f68>
   14068:	mov	r1, #-2147483648	; 0x80000000
   1406c:	mvn	r7, #-2147483648	; 0x80000000
   14070:	sdiv	r1, r1, r4
   14074:	cmp	r1, r5
   14078:	bge	140ac <__assert_fail@plt+0x2f68>
   1407c:	b	140bc <__assert_fail@plt+0x2f78>
   14080:	beq	140ac <__assert_fail@plt+0x2f68>
   14084:	mov	r1, #-2147483648	; 0x80000000
   14088:	mvn	r7, #-2147483648	; 0x80000000
   1408c:	sdiv	r1, r1, r5
   14090:	cmp	r1, r4
   14094:	bge	140ac <__assert_fail@plt+0x2f68>
   14098:	b	140bc <__assert_fail@plt+0x2f78>
   1409c:	mvn	r7, #-2147483648	; 0x80000000
   140a0:	sdiv	r1, r7, r4
   140a4:	cmp	r5, r1
   140a8:	blt	140bc <__assert_fail@plt+0x2f78>
   140ac:	mul	r1, r5, r4
   140b0:	mov	r7, #64	; 0x40
   140b4:	cmp	r1, #63	; 0x3f
   140b8:	bgt	140c4 <__assert_fail@plt+0x2f80>
   140bc:	sdiv	r5, r7, r4
   140c0:	mul	r1, r5, r4
   140c4:	cmp	r0, #0
   140c8:	moveq	r7, #0
   140cc:	streq	r7, [r8]
   140d0:	sub	r7, r5, r6
   140d4:	cmp	r7, r2
   140d8:	bge	1417c <__assert_fail@plt+0x3038>
   140dc:	add	r5, r6, r2
   140e0:	mov	r2, #0
   140e4:	mov	r1, #0
   140e8:	cmp	r5, r3
   140ec:	movwgt	r2, #1
   140f0:	cmn	r3, #1
   140f4:	movwgt	r1, #1
   140f8:	cmp	r5, r6
   140fc:	bvs	14164 <__assert_fail@plt+0x3020>
   14100:	ands	r1, r1, r2
   14104:	bne	14164 <__assert_fail@plt+0x3020>
   14108:	cmn	r4, #1
   1410c:	ble	1412c <__assert_fail@plt+0x2fe8>
   14110:	cmp	r4, #0
   14114:	beq	14178 <__assert_fail@plt+0x3034>
   14118:	cmn	r5, #1
   1411c:	ble	14150 <__assert_fail@plt+0x300c>
   14120:	mvn	r1, #-2147483648	; 0x80000000
   14124:	udiv	r1, r1, r4
   14128:	b	14144 <__assert_fail@plt+0x3000>
   1412c:	cmn	r5, #1
   14130:	ble	14168 <__assert_fail@plt+0x3024>
   14134:	cmn	r4, #1
   14138:	beq	14178 <__assert_fail@plt+0x3034>
   1413c:	mov	r1, #-2147483648	; 0x80000000
   14140:	sdiv	r1, r1, r4
   14144:	cmp	r1, r5
   14148:	bge	14178 <__assert_fail@plt+0x3034>
   1414c:	b	14164 <__assert_fail@plt+0x3020>
   14150:	beq	14178 <__assert_fail@plt+0x3034>
   14154:	mov	r1, #-2147483648	; 0x80000000
   14158:	sdiv	r1, r1, r5
   1415c:	cmp	r1, r4
   14160:	bge	14178 <__assert_fail@plt+0x3034>
   14164:	bl	142f0 <__assert_fail@plt+0x31ac>
   14168:	mvn	r1, #-2147483648	; 0x80000000
   1416c:	sdiv	r1, r1, r4
   14170:	cmp	r5, r1
   14174:	blt	14164 <__assert_fail@plt+0x3020>
   14178:	mul	r1, r5, r4
   1417c:	bl	13ee8 <__assert_fail@plt+0x2da4>
   14180:	str	r5, [r8]
   14184:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14188:	push	{fp, lr}
   1418c:	mov	fp, sp
   14190:	mov	r1, #1
   14194:	bl	14a20 <__assert_fail@plt+0x38dc>
   14198:	cmp	r0, #0
   1419c:	popne	{fp, pc}
   141a0:	bl	142f0 <__assert_fail@plt+0x31ac>
   141a4:	push	{fp, lr}
   141a8:	mov	fp, sp
   141ac:	bl	14a20 <__assert_fail@plt+0x38dc>
   141b0:	cmp	r0, #0
   141b4:	popne	{fp, pc}
   141b8:	bl	142f0 <__assert_fail@plt+0x31ac>
   141bc:	push	{fp, lr}
   141c0:	mov	fp, sp
   141c4:	mov	r1, #1
   141c8:	bl	14a20 <__assert_fail@plt+0x38dc>
   141cc:	cmp	r0, #0
   141d0:	popne	{fp, pc}
   141d4:	bl	142f0 <__assert_fail@plt+0x31ac>
   141d8:	push	{fp, lr}
   141dc:	mov	fp, sp
   141e0:	bl	14a20 <__assert_fail@plt+0x38dc>
   141e4:	cmp	r0, #0
   141e8:	popne	{fp, pc}
   141ec:	bl	142f0 <__assert_fail@plt+0x31ac>
   141f0:	push	{r4, r5, r6, sl, fp, lr}
   141f4:	add	fp, sp, #16
   141f8:	mov	r5, r0
   141fc:	mov	r0, r1
   14200:	mov	r4, r1
   14204:	bl	14a74 <__assert_fail@plt+0x3930>
   14208:	cmp	r0, #0
   1420c:	beq	14228 <__assert_fail@plt+0x30e4>
   14210:	mov	r1, r5
   14214:	mov	r2, r4
   14218:	mov	r6, r0
   1421c:	bl	10f04 <memcpy@plt>
   14220:	mov	r0, r6
   14224:	pop	{r4, r5, r6, sl, fp, pc}
   14228:	bl	142f0 <__assert_fail@plt+0x31ac>
   1422c:	push	{r4, r5, r6, sl, fp, lr}
   14230:	add	fp, sp, #16
   14234:	mov	r5, r0
   14238:	mov	r0, r1
   1423c:	mov	r4, r1
   14240:	bl	14a74 <__assert_fail@plt+0x3930>
   14244:	cmp	r0, #0
   14248:	beq	14264 <__assert_fail@plt+0x3120>
   1424c:	mov	r1, r5
   14250:	mov	r2, r4
   14254:	mov	r6, r0
   14258:	bl	10f04 <memcpy@plt>
   1425c:	mov	r0, r6
   14260:	pop	{r4, r5, r6, sl, fp, pc}
   14264:	bl	142f0 <__assert_fail@plt+0x31ac>
   14268:	push	{r4, r5, r6, sl, fp, lr}
   1426c:	add	fp, sp, #16
   14270:	mov	r5, r0
   14274:	add	r0, r1, #1
   14278:	mov	r4, r1
   1427c:	bl	14a74 <__assert_fail@plt+0x3930>
   14280:	cmp	r0, #0
   14284:	beq	142ac <__assert_fail@plt+0x3168>
   14288:	mov	r6, r0
   1428c:	mov	r0, #0
   14290:	mov	r1, r5
   14294:	mov	r2, r4
   14298:	strb	r0, [r6, r4]
   1429c:	mov	r0, r6
   142a0:	bl	10f04 <memcpy@plt>
   142a4:	mov	r0, r6
   142a8:	pop	{r4, r5, r6, sl, fp, pc}
   142ac:	bl	142f0 <__assert_fail@plt+0x31ac>
   142b0:	push	{r4, r5, r6, sl, fp, lr}
   142b4:	add	fp, sp, #16
   142b8:	mov	r4, r0
   142bc:	bl	11024 <strlen@plt>
   142c0:	add	r5, r0, #1
   142c4:	mov	r0, r5
   142c8:	bl	14a74 <__assert_fail@plt+0x3930>
   142cc:	cmp	r0, #0
   142d0:	beq	142ec <__assert_fail@plt+0x31a8>
   142d4:	mov	r1, r4
   142d8:	mov	r2, r5
   142dc:	mov	r6, r0
   142e0:	bl	10f04 <memcpy@plt>
   142e4:	mov	r0, r6
   142e8:	pop	{r4, r5, r6, sl, fp, pc}
   142ec:	bl	142f0 <__assert_fail@plt+0x31ac>
   142f0:	push	{fp, lr}
   142f4:	mov	fp, sp
   142f8:	movw	r0, #28924	; 0x70fc
   142fc:	movw	r1, #24580	; 0x6004
   14300:	mov	r2, #5
   14304:	movt	r0, #2
   14308:	movt	r1, #1
   1430c:	ldr	r4, [r0]
   14310:	mov	r0, #0
   14314:	bl	10f34 <dcgettext@plt>
   14318:	movw	r2, #23543	; 0x5bf7
   1431c:	mov	r3, r0
   14320:	mov	r0, r4
   14324:	mov	r1, #0
   14328:	movt	r2, #1
   1432c:	bl	10fac <error@plt>
   14330:	bl	1112c <abort@plt>
   14334:	push	{r4, sl, fp, lr}
   14338:	add	fp, sp, #8
   1433c:	bl	14af4 <__assert_fail@plt+0x39b0>
   14340:	mov	r4, r0
   14344:	cmp	r0, #0
   14348:	bne	1435c <__assert_fail@plt+0x3218>
   1434c:	bl	1103c <__errno_location@plt>
   14350:	ldr	r0, [r0]
   14354:	cmp	r0, #12
   14358:	beq	14364 <__assert_fail@plt+0x3220>
   1435c:	mov	r0, r4
   14360:	pop	{r4, sl, fp, pc}
   14364:	bl	142f0 <__assert_fail@plt+0x31ac>
   14368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1436c:	add	fp, sp, #28
   14370:	sub	sp, sp, #20
   14374:	cmp	r2, #37	; 0x25
   14378:	bcs	14a00 <__assert_fail@plt+0x38bc>
   1437c:	mov	r8, r3
   14380:	mov	r5, r2
   14384:	mov	r6, r1
   14388:	mov	r4, r0
   1438c:	bl	1103c <__errno_location@plt>
   14390:	mov	r7, r0
   14394:	mov	r0, #0
   14398:	str	r0, [r7]
   1439c:	bl	1100c <__ctype_b_loc@plt>
   143a0:	ldr	r1, [r0]
   143a4:	mov	r2, r4
   143a8:	ldrb	r0, [r2], #1
   143ac:	add	r3, r1, r0, lsl #1
   143b0:	ldrb	r3, [r3, #1]
   143b4:	tst	r3, #32
   143b8:	bne	143a8 <__assert_fail@plt+0x3264>
   143bc:	add	sl, sp, #16
   143c0:	cmp	r6, #0
   143c4:	movne	sl, r6
   143c8:	mov	r6, #4
   143cc:	cmp	r0, #45	; 0x2d
   143d0:	beq	149f4 <__assert_fail@plt+0x38b0>
   143d4:	mov	r0, r4
   143d8:	mov	r1, sl
   143dc:	mov	r2, r5
   143e0:	str	r8, [sp, #12]
   143e4:	bl	11078 <strtoumax@plt>
   143e8:	ldr	r5, [sl]
   143ec:	cmp	r5, r4
   143f0:	beq	14418 <__assert_fail@plt+0x32d4>
   143f4:	mov	r8, r0
   143f8:	ldr	r0, [r7]
   143fc:	mov	r9, r1
   14400:	cmp	r0, #0
   14404:	beq	14448 <__assert_fail@plt+0x3304>
   14408:	cmp	r0, #34	; 0x22
   1440c:	bne	149f4 <__assert_fail@plt+0x38b0>
   14410:	mov	r6, #1
   14414:	b	1444c <__assert_fail@plt+0x3308>
   14418:	ldr	r0, [fp, #8]
   1441c:	cmp	r0, #0
   14420:	ldrbne	r1, [r4]
   14424:	cmpne	r1, #0
   14428:	beq	149f4 <__assert_fail@plt+0x38b0>
   1442c:	bl	11030 <strchr@plt>
   14430:	cmp	r0, #0
   14434:	beq	149f4 <__assert_fail@plt+0x38b0>
   14438:	mov	r6, #0
   1443c:	mov	r8, #1
   14440:	mov	r9, #0
   14444:	b	14458 <__assert_fail@plt+0x3314>
   14448:	mov	r6, r0
   1444c:	ldr	r0, [fp, #8]
   14450:	cmp	r0, #0
   14454:	beq	149ec <__assert_fail@plt+0x38a8>
   14458:	ldrb	r7, [r5]
   1445c:	cmp	r7, #0
   14460:	beq	149ec <__assert_fail@plt+0x38a8>
   14464:	ldr	r0, [fp, #8]
   14468:	mov	r1, r7
   1446c:	bl	11030 <strchr@plt>
   14470:	cmp	r0, #0
   14474:	beq	1457c <__assert_fail@plt+0x3438>
   14478:	sub	r0, r7, #69	; 0x45
   1447c:	mov	r1, #1
   14480:	mov	r3, #0
   14484:	mov	r4, #1024	; 0x400
   14488:	cmp	r0, #21
   1448c:	str	r1, [sp, #8]
   14490:	bhi	144a8 <__assert_fail@plt+0x3364>
   14494:	movw	r2, #35141	; 0x8945
   14498:	mov	r1, #1
   1449c:	movt	r2, #48	; 0x30
   144a0:	tst	r2, r1, lsl r0
   144a4:	bne	144c4 <__assert_fail@plt+0x3380>
   144a8:	sub	r0, r7, #103	; 0x67
   144ac:	cmp	r0, #13
   144b0:	bhi	144f8 <__assert_fail@plt+0x33b4>
   144b4:	mov	r1, #1
   144b8:	movw	r2, #8273	; 0x2051
   144bc:	tst	r2, r1, lsl r0
   144c0:	beq	144f8 <__assert_fail@plt+0x33b4>
   144c4:	ldr	r0, [fp, #8]
   144c8:	mov	r1, #48	; 0x30
   144cc:	bl	11030 <strchr@plt>
   144d0:	cmp	r0, #0
   144d4:	beq	144f4 <__assert_fail@plt+0x33b0>
   144d8:	ldrb	r0, [r5, #1]
   144dc:	cmp	r0, #66	; 0x42
   144e0:	cmpne	r0, #68	; 0x44
   144e4:	bne	1460c <__assert_fail@plt+0x34c8>
   144e8:	mov	r4, #1000	; 0x3e8
   144ec:	mov	r0, #2
   144f0:	str	r0, [sp, #8]
   144f4:	mov	r3, #0
   144f8:	cmp	r7, #89	; 0x59
   144fc:	stm	sp, {r5, r6}
   14500:	bgt	14588 <__assert_fail@plt+0x3444>
   14504:	sub	r0, r7, #66	; 0x42
   14508:	cmp	r0, #14
   1450c:	bhi	14630 <__assert_fail@plt+0x34ec>
   14510:	add	r1, pc, #0
   14514:	ldr	pc, [r1, r0, lsl #2]
   14518:	andeq	r4, r1, r4, asr r5
   1451c:	andeq	r4, r1, r0, ror #17
   14520:	andeq	r4, r1, r0, ror #17
   14524:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14528:	andeq	r4, r1, r0, ror #17
   1452c:	andeq	r4, r1, r4, ror #13
   14530:	andeq	r4, r1, r0, ror #17
   14534:	andeq	r4, r1, r0, ror #17
   14538:	andeq	r4, r1, r0, ror #17
   1453c:	andeq	r4, r1, r0, asr r7
   14540:	andeq	r4, r1, r0, ror #17
   14544:	muleq	r1, r4, r7
   14548:	andeq	r4, r1, r0, ror #17
   1454c:	andeq	r4, r1, r0, ror #17
   14550:	andeq	r4, r1, r0, ror #18
   14554:	mov	r1, #0
   14558:	lsl	r3, r9, #10
   1455c:	lsl	r0, r8, #10
   14560:	lsr	r2, r9, #22
   14564:	cmp	r1, r9, lsr #22
   14568:	orr	r3, r3, r8, lsr #22
   1456c:	mvnne	r0, #0
   14570:	movwne	r2, #1
   14574:	cmp	r1, r9, lsr #22
   14578:	b	145fc <__assert_fail@plt+0x34b8>
   1457c:	ldr	r0, [sp, #12]
   14580:	orr	r6, r6, #2
   14584:	b	149f0 <__assert_fail@plt+0x38ac>
   14588:	cmp	r7, #115	; 0x73
   1458c:	bgt	146ac <__assert_fail@plt+0x3568>
   14590:	sub	r0, r7, #98	; 0x62
   14594:	cmp	r0, #11
   14598:	bhi	1486c <__assert_fail@plt+0x3728>
   1459c:	add	r1, pc, #4
   145a0:	mov	r2, #0
   145a4:	ldr	pc, [r1, r0, lsl #2]
   145a8:	ldrdeq	r4, [r1], -r8
   145ac:	andeq	r4, r1, r8, asr #19
   145b0:	andeq	r4, r1, r0, ror #17
   145b4:	andeq	r4, r1, r0, ror #17
   145b8:	andeq	r4, r1, r0, ror #17
   145bc:	andeq	r4, r1, r4, ror #13
   145c0:	andeq	r4, r1, r0, ror #17
   145c4:	andeq	r4, r1, r0, ror #17
   145c8:	andeq	r4, r1, r0, ror #17
   145cc:	andeq	r4, r1, r0, asr r7
   145d0:	andeq	r4, r1, r0, ror #17
   145d4:	muleq	r1, r4, r7
   145d8:	mov	r1, #0
   145dc:	lsl	r3, r9, #9
   145e0:	lsl	r0, r8, #9
   145e4:	lsr	r2, r9, #23
   145e8:	cmp	r1, r9, lsr #23
   145ec:	orr	r3, r3, r8, lsr #23
   145f0:	mvnne	r0, #0
   145f4:	movwne	r2, #1
   145f8:	cmp	r1, r9, lsr #23
   145fc:	mvnne	r3, #0
   14600:	mov	r8, r0
   14604:	mov	r9, r3
   14608:	b	149c8 <__assert_fail@plt+0x3884>
   1460c:	cmp	r0, #105	; 0x69
   14610:	mov	r3, #0
   14614:	bne	144f8 <__assert_fail@plt+0x33b4>
   14618:	ldrb	r0, [r5, #2]
   1461c:	mov	r1, #1
   14620:	cmp	r0, #66	; 0x42
   14624:	movweq	r1, #3
   14628:	str	r1, [sp, #8]
   1462c:	b	144f8 <__assert_fail@plt+0x33b4>
   14630:	cmp	r7, #84	; 0x54
   14634:	beq	14800 <__assert_fail@plt+0x36bc>
   14638:	cmp	r7, #89	; 0x59
   1463c:	bne	148e0 <__assert_fail@plt+0x379c>
   14640:	mvn	r0, #0
   14644:	mvn	r1, #0
   14648:	mov	r2, r4
   1464c:	mov	r5, r3
   14650:	bl	15160 <__assert_fail@plt+0x401c>
   14654:	mov	ip, r5
   14658:	mvn	lr, #0
   1465c:	mov	r2, #0
   14660:	mvn	r3, #7
   14664:	mov	r5, r8
   14668:	mov	r7, r9
   1466c:	umull	r8, r6, r5, r4
   14670:	mvn	r9, #0
   14674:	mla	r6, r5, ip, r6
   14678:	subs	r5, r0, r5
   1467c:	sbcs	r5, r1, r7
   14680:	mov	r5, #0
   14684:	movwcc	r5, #1
   14688:	cmp	r5, #0
   1468c:	mlaeq	r9, r7, r4, r6
   14690:	movne	r8, lr
   14694:	orrne	r2, r2, #1
   14698:	adds	r3, r3, #1
   1469c:	mov	r5, r8
   146a0:	mov	r7, r9
   146a4:	bne	1466c <__assert_fail@plt+0x3528>
   146a8:	b	149c8 <__assert_fail@plt+0x3884>
   146ac:	cmp	r7, #116	; 0x74
   146b0:	beq	14800 <__assert_fail@plt+0x36bc>
   146b4:	cmp	r7, #119	; 0x77
   146b8:	bne	148e0 <__assert_fail@plt+0x379c>
   146bc:	lsl	r1, r9, #1
   146c0:	lsl	r0, r8, #1
   146c4:	cmp	r9, #0
   146c8:	lsr	r2, r9, #31
   146cc:	orr	r1, r1, r8, lsr #31
   146d0:	mvnlt	r0, #0
   146d4:	mvnlt	r1, #0
   146d8:	mov	r8, r0
   146dc:	mov	r9, r1
   146e0:	b	149c8 <__assert_fail@plt+0x3884>
   146e4:	mvn	r0, #0
   146e8:	mvn	r1, #0
   146ec:	mov	r2, r4
   146f0:	mov	r5, r3
   146f4:	bl	15160 <__assert_fail@plt+0x401c>
   146f8:	mov	ip, r5
   146fc:	mvn	lr, #0
   14700:	mov	r2, #0
   14704:	mvn	r3, #2
   14708:	mov	r6, r8
   1470c:	mov	r5, r9
   14710:	umull	r8, r7, r6, r4
   14714:	mvn	r9, #0
   14718:	mla	r7, r6, ip, r7
   1471c:	subs	r6, r0, r6
   14720:	sbcs	r6, r1, r5
   14724:	mov	r6, #0
   14728:	movwcc	r6, #1
   1472c:	cmp	r6, #0
   14730:	mlaeq	r9, r5, r4, r7
   14734:	movne	r8, lr
   14738:	orrne	r2, r2, #1
   1473c:	adds	r3, r3, #1
   14740:	mov	r6, r8
   14744:	mov	r5, r9
   14748:	bne	14710 <__assert_fail@plt+0x35cc>
   1474c:	b	149c8 <__assert_fail@plt+0x3884>
   14750:	mvn	r0, #0
   14754:	mvn	r1, #0
   14758:	mov	r2, r4
   1475c:	mov	r5, r3
   14760:	bl	15160 <__assert_fail@plt+0x401c>
   14764:	subs	r0, r0, r8
   14768:	mov	r2, #0
   1476c:	sbcs	r0, r1, r9
   14770:	movwcc	r2, #1
   14774:	umull	r0, r1, r8, r4
   14778:	mla	r1, r8, r5, r1
   1477c:	cmp	r2, #0
   14780:	mla	r9, r9, r4, r1
   14784:	mvnne	r0, #0
   14788:	mvnne	r9, #0
   1478c:	mov	r8, r0
   14790:	b	149c8 <__assert_fail@plt+0x3884>
   14794:	mvn	r0, #0
   14798:	mvn	r1, #0
   1479c:	mov	r2, r4
   147a0:	mov	r5, r3
   147a4:	bl	15160 <__assert_fail@plt+0x401c>
   147a8:	mov	ip, r5
   147ac:	mvn	lr, #0
   147b0:	mov	r2, #0
   147b4:	mvn	r3, #1
   147b8:	mov	r6, r8
   147bc:	mov	r5, r9
   147c0:	umull	r8, r7, r6, r4
   147c4:	mvn	r9, #0
   147c8:	mla	r7, r6, ip, r7
   147cc:	subs	r6, r0, r6
   147d0:	sbcs	r6, r1, r5
   147d4:	mov	r6, #0
   147d8:	movwcc	r6, #1
   147dc:	cmp	r6, #0
   147e0:	mlaeq	r9, r5, r4, r7
   147e4:	movne	r8, lr
   147e8:	orrne	r2, r2, #1
   147ec:	adds	r3, r3, #1
   147f0:	mov	r6, r8
   147f4:	mov	r5, r9
   147f8:	bne	147c0 <__assert_fail@plt+0x367c>
   147fc:	b	149c8 <__assert_fail@plt+0x3884>
   14800:	mvn	r0, #0
   14804:	mvn	r1, #0
   14808:	mov	r2, r4
   1480c:	mov	r5, r3
   14810:	bl	15160 <__assert_fail@plt+0x401c>
   14814:	mov	ip, r5
   14818:	mvn	lr, #0
   1481c:	mov	r2, #0
   14820:	mvn	r3, #3
   14824:	mov	r6, r8
   14828:	mov	r5, r9
   1482c:	umull	r8, r7, r6, r4
   14830:	mvn	r9, #0
   14834:	mla	r7, r6, ip, r7
   14838:	subs	r6, r0, r6
   1483c:	sbcs	r6, r1, r5
   14840:	mov	r6, #0
   14844:	movwcc	r6, #1
   14848:	cmp	r6, #0
   1484c:	mlaeq	r9, r5, r4, r7
   14850:	movne	r8, lr
   14854:	orrne	r2, r2, #1
   14858:	adds	r3, r3, #1
   1485c:	mov	r6, r8
   14860:	mov	r5, r9
   14864:	bne	1482c <__assert_fail@plt+0x36e8>
   14868:	b	149c8 <__assert_fail@plt+0x3884>
   1486c:	cmp	r7, #90	; 0x5a
   14870:	bne	148e0 <__assert_fail@plt+0x379c>
   14874:	mvn	r0, #0
   14878:	mvn	r1, #0
   1487c:	mov	r2, r4
   14880:	mov	r5, r3
   14884:	bl	15160 <__assert_fail@plt+0x401c>
   14888:	mov	ip, r5
   1488c:	mvn	lr, #0
   14890:	mov	r2, #0
   14894:	mvn	r3, #6
   14898:	mov	r5, r8
   1489c:	mov	r7, r9
   148a0:	umull	r8, r6, r5, r4
   148a4:	mvn	r9, #0
   148a8:	mla	r6, r5, ip, r6
   148ac:	subs	r5, r0, r5
   148b0:	sbcs	r5, r1, r7
   148b4:	mov	r5, #0
   148b8:	movwcc	r5, #1
   148bc:	cmp	r5, #0
   148c0:	mlaeq	r9, r7, r4, r6
   148c4:	movne	r8, lr
   148c8:	orrne	r2, r2, #1
   148cc:	adds	r3, r3, #1
   148d0:	mov	r5, r8
   148d4:	mov	r7, r9
   148d8:	bne	148a0 <__assert_fail@plt+0x375c>
   148dc:	b	149c8 <__assert_fail@plt+0x3884>
   148e0:	ldr	r0, [sp, #12]
   148e4:	strd	r8, [r0]
   148e8:	ldr	r6, [sp, #4]
   148ec:	orr	r6, r6, #2
   148f0:	b	149f4 <__assert_fail@plt+0x38b0>
   148f4:	mvn	r0, #0
   148f8:	mvn	r1, #0
   148fc:	mov	r2, r4
   14900:	mov	r5, r3
   14904:	bl	15160 <__assert_fail@plt+0x401c>
   14908:	mov	ip, r5
   1490c:	mvn	lr, #0
   14910:	mov	r2, #0
   14914:	mvn	r3, #5
   14918:	mov	r5, r8
   1491c:	mov	r7, r9
   14920:	umull	r8, r6, r5, r4
   14924:	mvn	r9, #0
   14928:	mla	r6, r5, ip, r6
   1492c:	subs	r5, r0, r5
   14930:	sbcs	r5, r1, r7
   14934:	mov	r5, #0
   14938:	movwcc	r5, #1
   1493c:	cmp	r5, #0
   14940:	mlaeq	r9, r7, r4, r6
   14944:	movne	r8, lr
   14948:	orrne	r2, r2, #1
   1494c:	adds	r3, r3, #1
   14950:	mov	r5, r8
   14954:	mov	r7, r9
   14958:	bne	14920 <__assert_fail@plt+0x37dc>
   1495c:	b	149c8 <__assert_fail@plt+0x3884>
   14960:	mvn	r0, #0
   14964:	mvn	r1, #0
   14968:	mov	r2, r4
   1496c:	mov	r5, r3
   14970:	bl	15160 <__assert_fail@plt+0x401c>
   14974:	mov	ip, r5
   14978:	mvn	lr, #0
   1497c:	mov	r2, #0
   14980:	mvn	r3, #4
   14984:	mov	r5, r8
   14988:	mov	r7, r9
   1498c:	umull	r8, r6, r5, r4
   14990:	mvn	r9, #0
   14994:	mla	r6, r5, ip, r6
   14998:	subs	r5, r0, r5
   1499c:	sbcs	r5, r1, r7
   149a0:	mov	r5, #0
   149a4:	movwcc	r5, #1
   149a8:	cmp	r5, #0
   149ac:	mlaeq	r9, r7, r4, r6
   149b0:	movne	r8, lr
   149b4:	orrne	r2, r2, #1
   149b8:	adds	r3, r3, #1
   149bc:	mov	r5, r8
   149c0:	mov	r7, r9
   149c4:	bne	1498c <__assert_fail@plt+0x3848>
   149c8:	ldr	r1, [sp]
   149cc:	ldr	r3, [sp, #8]
   149d0:	ldr	r6, [sp, #4]
   149d4:	add	r0, r1, r3
   149d8:	orr	r6, r2, r6
   149dc:	str	r0, [sl]
   149e0:	ldrb	r0, [r1, r3]
   149e4:	cmp	r0, #0
   149e8:	orrne	r6, r6, #2
   149ec:	ldr	r0, [sp, #12]
   149f0:	strd	r8, [r0]
   149f4:	mov	r0, r6
   149f8:	sub	sp, fp, #28
   149fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a00:	movw	r0, #24597	; 0x6015
   14a04:	movw	r1, #24635	; 0x603b
   14a08:	movw	r3, #24651	; 0x604b
   14a0c:	mov	r2, #85	; 0x55
   14a10:	movt	r0, #1
   14a14:	movt	r1, #1
   14a18:	movt	r3, #1
   14a1c:	bl	11144 <__assert_fail@plt>
   14a20:	clz	r2, r1
   14a24:	clz	r3, r0
   14a28:	lsr	r2, r2, #5
   14a2c:	lsr	r3, r3, #5
   14a30:	orrs	r2, r3, r2
   14a34:	movwne	r1, #1
   14a38:	movwne	r0, #1
   14a3c:	cmp	r1, #0
   14a40:	beq	14a70 <__assert_fail@plt+0x392c>
   14a44:	mvn	r2, #-2147483648	; 0x80000000
   14a48:	udiv	r2, r2, r1
   14a4c:	cmp	r2, r0
   14a50:	bcs	14a70 <__assert_fail@plt+0x392c>
   14a54:	push	{fp, lr}
   14a58:	mov	fp, sp
   14a5c:	bl	1103c <__errno_location@plt>
   14a60:	mov	r1, #12
   14a64:	str	r1, [r0]
   14a68:	mov	r0, #0
   14a6c:	pop	{fp, pc}
   14a70:	b	10eb0 <calloc@plt>
   14a74:	cmp	r0, #0
   14a78:	movweq	r0, #1
   14a7c:	cmn	r0, #1
   14a80:	ble	14a88 <__assert_fail@plt+0x3944>
   14a84:	b	10fd0 <malloc@plt>
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	bl	1103c <__errno_location@plt>
   14a94:	mov	r1, #12
   14a98:	str	r1, [r0]
   14a9c:	mov	r0, #0
   14aa0:	pop	{fp, pc}
   14aa4:	push	{fp, lr}
   14aa8:	mov	fp, sp
   14aac:	cmp	r0, #0
   14ab0:	beq	14acc <__assert_fail@plt+0x3988>
   14ab4:	cmp	r1, #0
   14ab8:	beq	14ad8 <__assert_fail@plt+0x3994>
   14abc:	cmn	r1, #1
   14ac0:	ble	14ae0 <__assert_fail@plt+0x399c>
   14ac4:	pop	{fp, lr}
   14ac8:	b	10f40 <realloc@plt>
   14acc:	mov	r0, r1
   14ad0:	pop	{fp, lr}
   14ad4:	b	14a74 <__assert_fail@plt+0x3930>
   14ad8:	bl	11e80 <__assert_fail@plt+0xd3c>
   14adc:	b	14aec <__assert_fail@plt+0x39a8>
   14ae0:	bl	1103c <__errno_location@plt>
   14ae4:	mov	r1, #12
   14ae8:	str	r1, [r0]
   14aec:	mov	r0, #0
   14af0:	pop	{fp, pc}
   14af4:	push	{fp, lr}
   14af8:	mov	fp, sp
   14afc:	sub	sp, sp, #8
   14b00:	mov	r1, r0
   14b04:	movw	r0, #19248	; 0x4b30
   14b08:	mov	r2, #0
   14b0c:	mov	r3, #0
   14b10:	movt	r0, #1
   14b14:	str	r2, [sp]
   14b18:	mov	r2, #0
   14b1c:	str	r0, [sp, #4]
   14b20:	mvn	r0, #99	; 0x63
   14b24:	bl	14bd4 <__assert_fail@plt+0x3a90>
   14b28:	mov	sp, fp
   14b2c:	pop	{fp, pc}
   14b30:	cmn	r0, #100	; 0x64
   14b34:	bne	14b48 <__assert_fail@plt+0x3a04>
   14b38:	mov	r0, r1
   14b3c:	mov	r1, r2
   14b40:	mov	r2, r3
   14b44:	b	10f64 <readlink@plt>
   14b48:	push	{fp, lr}
   14b4c:	mov	fp, sp
   14b50:	bl	1112c <abort@plt>
   14b54:	sub	r0, r0, #1
   14b58:	ldrb	r3, [r0, #1]!
   14b5c:	cmp	r3, #47	; 0x2f
   14b60:	beq	14b58 <__assert_fail@plt+0x3a14>
   14b64:	mov	r2, #0
   14b68:	mov	r1, r0
   14b6c:	uxtb	r3, r3
   14b70:	cmp	r3, #47	; 0x2f
   14b74:	beq	14b90 <__assert_fail@plt+0x3a4c>
   14b78:	cmp	r3, #0
   14b7c:	bxeq	lr
   14b80:	tst	r2, #1
   14b84:	mov	r2, #0
   14b88:	movne	r0, r1
   14b8c:	b	14b94 <__assert_fail@plt+0x3a50>
   14b90:	mov	r2, #1
   14b94:	ldrb	r3, [r1, #1]!
   14b98:	b	14b6c <__assert_fail@plt+0x3a28>
   14b9c:	push	{r4, sl, fp, lr}
   14ba0:	add	fp, sp, #8
   14ba4:	mov	r4, r0
   14ba8:	bl	11024 <strlen@plt>
   14bac:	mov	r1, r0
   14bb0:	sub	r2, r4, #1
   14bb4:	mov	r0, r1
   14bb8:	cmp	r1, #2
   14bbc:	popcc	{r4, sl, fp, pc}
   14bc0:	ldrb	r3, [r2, r0]
   14bc4:	sub	r1, r0, #1
   14bc8:	cmp	r3, #47	; 0x2f
   14bcc:	beq	14bb4 <__assert_fail@plt+0x3a70>
   14bd0:	pop	{r4, sl, fp, pc}
   14bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bd8:	add	fp, sp, #28
   14bdc:	sub	sp, sp, #4
   14be0:	sub	sp, sp, #1024	; 0x400
   14be4:	mov	r9, r0
   14be8:	mov	r5, r2
   14bec:	mov	r0, sp
   14bf0:	cmp	r2, #0
   14bf4:	mov	r4, r3
   14bf8:	ldr	sl, [fp, #12]
   14bfc:	movw	r7, #24736	; 0x60a0
   14c00:	mov	r8, r1
   14c04:	moveq	r5, r0
   14c08:	ldr	r0, [fp, #8]
   14c0c:	movweq	r4, #1024	; 0x400
   14c10:	movt	r7, #1
   14c14:	cmn	r4, #-2147483647	; 0x80000001
   14c18:	mov	r6, r5
   14c1c:	mvncs	r4, #-2147483648	; 0x80000000
   14c20:	cmp	r0, #0
   14c24:	movne	r7, r0
   14c28:	mov	r0, r9
   14c2c:	mov	r1, r8
   14c30:	mov	r2, r6
   14c34:	mov	r3, r4
   14c38:	blx	sl
   14c3c:	cmn	r0, #1
   14c40:	ble	14ca8 <__assert_fail@plt+0x3b64>
   14c44:	cmp	r0, r4
   14c48:	blt	14cd4 <__assert_fail@plt+0x3b90>
   14c4c:	cmp	r6, r5
   14c50:	beq	14c60 <__assert_fail@plt+0x3b1c>
   14c54:	ldr	r1, [r7, #8]
   14c58:	mov	r0, r6
   14c5c:	blx	r1
   14c60:	cmn	r4, #-1073741823	; 0xc0000001
   14c64:	bge	14d24 <__assert_fail@plt+0x3be0>
   14c68:	ldr	r1, [r7]
   14c6c:	mov	r0, #1
   14c70:	orr	r4, r0, r4, lsl #1
   14c74:	mov	r0, r4
   14c78:	blx	r1
   14c7c:	mov	r6, r0
   14c80:	cmp	r0, #0
   14c84:	bne	14c28 <__assert_fail@plt+0x3ae4>
   14c88:	ldr	r1, [r7, #12]
   14c8c:	cmp	r1, #0
   14c90:	beq	14c9c <__assert_fail@plt+0x3b58>
   14c94:	mov	r0, r4
   14c98:	blx	r1
   14c9c:	bl	1103c <__errno_location@plt>
   14ca0:	mov	r1, #12
   14ca4:	b	14d2c <__assert_fail@plt+0x3be8>
   14ca8:	mov	r4, #0
   14cac:	cmp	r6, r5
   14cb0:	beq	14d34 <__assert_fail@plt+0x3bf0>
   14cb4:	bl	1103c <__errno_location@plt>
   14cb8:	ldr	r1, [r7, #8]
   14cbc:	ldr	r8, [r0]
   14cc0:	mov	r5, r0
   14cc4:	mov	r0, r6
   14cc8:	blx	r1
   14ccc:	str	r8, [r5]
   14cd0:	b	14d34 <__assert_fail@plt+0x3bf0>
   14cd4:	mov	r1, #0
   14cd8:	add	r8, r0, #1
   14cdc:	strb	r1, [r6, r0]
   14ce0:	mov	r0, sp
   14ce4:	cmp	r6, r0
   14ce8:	beq	14d48 <__assert_fail@plt+0x3c04>
   14cec:	cmp	r6, r5
   14cf0:	beq	14d40 <__assert_fail@plt+0x3bfc>
   14cf4:	cmp	r8, r4
   14cf8:	bge	14d40 <__assert_fail@plt+0x3bfc>
   14cfc:	ldr	r2, [r7, #4]
   14d00:	cmp	r2, #0
   14d04:	beq	14d40 <__assert_fail@plt+0x3bfc>
   14d08:	mov	r0, r6
   14d0c:	mov	r1, r8
   14d10:	blx	r2
   14d14:	mov	r4, r0
   14d18:	cmp	r0, #0
   14d1c:	moveq	r4, r6
   14d20:	b	14d34 <__assert_fail@plt+0x3bf0>
   14d24:	bl	1103c <__errno_location@plt>
   14d28:	mov	r1, #36	; 0x24
   14d2c:	mov	r4, #0
   14d30:	str	r1, [r0]
   14d34:	mov	r0, r4
   14d38:	sub	sp, fp, #28
   14d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d40:	mov	r4, r6
   14d44:	b	14d34 <__assert_fail@plt+0x3bf0>
   14d48:	ldr	r1, [r7]
   14d4c:	mov	r0, r8
   14d50:	blx	r1
   14d54:	cmp	r0, #0
   14d58:	beq	14d70 <__assert_fail@plt+0x3c2c>
   14d5c:	mov	r1, sp
   14d60:	mov	r2, r8
   14d64:	mov	r4, r0
   14d68:	bl	10f04 <memcpy@plt>
   14d6c:	b	14d34 <__assert_fail@plt+0x3bf0>
   14d70:	mov	r4, r8
   14d74:	b	14c88 <__assert_fail@plt+0x3b44>
   14d78:	push	{r4, r5, r6, sl, fp, lr}
   14d7c:	add	fp, sp, #16
   14d80:	mov	r4, r0
   14d84:	bl	10f88 <__fpending@plt>
   14d88:	mov	r5, r0
   14d8c:	mov	r0, r4
   14d90:	bl	10f94 <ferror_unlocked@plt>
   14d94:	mov	r6, r0
   14d98:	mov	r0, r4
   14d9c:	bl	14df8 <__assert_fail@plt+0x3cb4>
   14da0:	cmp	r6, #0
   14da4:	beq	14dc4 <__assert_fail@plt+0x3c80>
   14da8:	mvn	r4, #0
   14dac:	cmp	r0, #0
   14db0:	bne	14df0 <__assert_fail@plt+0x3cac>
   14db4:	bl	1103c <__errno_location@plt>
   14db8:	mov	r1, #0
   14dbc:	str	r1, [r0]
   14dc0:	b	14df0 <__assert_fail@plt+0x3cac>
   14dc4:	cmp	r0, #0
   14dc8:	mov	r4, r0
   14dcc:	mvnne	r4, #0
   14dd0:	cmp	r5, #0
   14dd4:	bne	14df0 <__assert_fail@plt+0x3cac>
   14dd8:	cmp	r0, #0
   14ddc:	beq	14df0 <__assert_fail@plt+0x3cac>
   14de0:	bl	1103c <__errno_location@plt>
   14de4:	ldr	r0, [r0]
   14de8:	subs	r4, r0, #9
   14dec:	mvnne	r4, #0
   14df0:	mov	r0, r4
   14df4:	pop	{r4, r5, r6, sl, fp, pc}
   14df8:	push	{r4, r5, r6, sl, fp, lr}
   14dfc:	add	fp, sp, #16
   14e00:	sub	sp, sp, #8
   14e04:	mov	r4, r0
   14e08:	bl	1106c <fileno@plt>
   14e0c:	cmn	r0, #1
   14e10:	ble	14e84 <__assert_fail@plt+0x3d40>
   14e14:	mov	r0, r4
   14e18:	bl	10fe8 <__freading@plt>
   14e1c:	cmp	r0, #0
   14e20:	beq	14e4c <__assert_fail@plt+0x3d08>
   14e24:	mov	r0, r4
   14e28:	bl	1106c <fileno@plt>
   14e2c:	mov	r1, #1
   14e30:	mov	r2, #0
   14e34:	mov	r3, #0
   14e38:	str	r1, [sp]
   14e3c:	bl	10f70 <lseek64@plt>
   14e40:	and	r0, r0, r1
   14e44:	cmn	r0, #1
   14e48:	beq	14e84 <__assert_fail@plt+0x3d40>
   14e4c:	mov	r0, r4
   14e50:	bl	14e94 <__assert_fail@plt+0x3d50>
   14e54:	cmp	r0, #0
   14e58:	beq	14e84 <__assert_fail@plt+0x3d40>
   14e5c:	bl	1103c <__errno_location@plt>
   14e60:	ldr	r6, [r0]
   14e64:	mov	r5, r0
   14e68:	mov	r0, r4
   14e6c:	bl	1109c <fclose@plt>
   14e70:	cmp	r6, #0
   14e74:	strne	r6, [r5]
   14e78:	mvnne	r0, #0
   14e7c:	sub	sp, fp, #16
   14e80:	pop	{r4, r5, r6, sl, fp, pc}
   14e84:	mov	r0, r4
   14e88:	sub	sp, fp, #16
   14e8c:	pop	{r4, r5, r6, sl, fp, lr}
   14e90:	b	1109c <fclose@plt>
   14e94:	push	{r4, sl, fp, lr}
   14e98:	add	fp, sp, #8
   14e9c:	sub	sp, sp, #8
   14ea0:	mov	r4, r0
   14ea4:	cmp	r0, #0
   14ea8:	beq	14ec4 <__assert_fail@plt+0x3d80>
   14eac:	mov	r0, r4
   14eb0:	bl	10fe8 <__freading@plt>
   14eb4:	cmp	r0, #0
   14eb8:	ldrbne	r0, [r4, #1]
   14ebc:	tstne	r0, #1
   14ec0:	bne	14ed4 <__assert_fail@plt+0x3d90>
   14ec4:	mov	r0, r4
   14ec8:	sub	sp, fp, #8
   14ecc:	pop	{r4, sl, fp, lr}
   14ed0:	b	10ee0 <fflush@plt>
   14ed4:	mov	r0, #1
   14ed8:	mov	r2, #0
   14edc:	mov	r3, #0
   14ee0:	str	r0, [sp]
   14ee4:	mov	r0, r4
   14ee8:	bl	14ef0 <__assert_fail@plt+0x3dac>
   14eec:	b	14ec4 <__assert_fail@plt+0x3d80>
   14ef0:	push	{r4, r5, r6, r7, fp, lr}
   14ef4:	add	fp, sp, #16
   14ef8:	sub	sp, sp, #8
   14efc:	mov	r4, r0
   14f00:	ldr	r0, [r0, #4]
   14f04:	mov	r5, r3
   14f08:	mov	r6, r2
   14f0c:	ldr	r1, [r4, #8]
   14f10:	cmp	r1, r0
   14f14:	bne	14f30 <__assert_fail@plt+0x3dec>
   14f18:	ldrd	r0, [r4, #16]
   14f1c:	cmp	r1, r0
   14f20:	bne	14f30 <__assert_fail@plt+0x3dec>
   14f24:	ldr	r0, [r4, #36]	; 0x24
   14f28:	cmp	r0, #0
   14f2c:	beq	14f48 <__assert_fail@plt+0x3e04>
   14f30:	mov	r0, r4
   14f34:	mov	r2, r6
   14f38:	mov	r3, r5
   14f3c:	sub	sp, fp, #16
   14f40:	pop	{r4, r5, r6, r7, fp, lr}
   14f44:	b	110a8 <fseeko64@plt>
   14f48:	ldr	r7, [fp, #8]
   14f4c:	mov	r0, r4
   14f50:	bl	1106c <fileno@plt>
   14f54:	mov	r2, r6
   14f58:	mov	r3, r5
   14f5c:	str	r7, [sp]
   14f60:	bl	10f70 <lseek64@plt>
   14f64:	and	r2, r0, r1
   14f68:	cmn	r2, #1
   14f6c:	beq	14f88 <__assert_fail@plt+0x3e44>
   14f70:	strd	r0, [r4, #80]	; 0x50
   14f74:	ldr	r0, [r4]
   14f78:	bic	r0, r0, #16
   14f7c:	str	r0, [r4]
   14f80:	mov	r0, #0
   14f84:	b	14f8c <__assert_fail@plt+0x3e48>
   14f88:	mvn	r0, #0
   14f8c:	sub	sp, fp, #16
   14f90:	pop	{r4, r5, r6, r7, fp, pc}
   14f94:	push	{fp, lr}
   14f98:	mov	fp, sp
   14f9c:	mov	r0, #14
   14fa0:	bl	110f0 <nl_langinfo@plt>
   14fa4:	movw	r1, #23141	; 0x5a65
   14fa8:	cmp	r0, #0
   14fac:	movt	r1, #1
   14fb0:	movne	r1, r0
   14fb4:	movw	r0, #24730	; 0x609a
   14fb8:	ldrb	r2, [r1]
   14fbc:	movt	r0, #1
   14fc0:	cmp	r2, #0
   14fc4:	movne	r0, r1
   14fc8:	pop	{fp, pc}
   14fcc:	push	{r4, r5, r6, r7, fp, lr}
   14fd0:	add	fp, sp, #16
   14fd4:	sub	sp, sp, #8
   14fd8:	add	r5, sp, #4
   14fdc:	cmp	r0, #0
   14fe0:	mov	r7, r2
   14fe4:	mov	r4, r1
   14fe8:	movne	r5, r0
   14fec:	mov	r0, r5
   14ff0:	bl	10fa0 <mbrtowc@plt>
   14ff4:	mov	r6, r0
   14ff8:	cmp	r7, #0
   14ffc:	beq	15020 <__assert_fail@plt+0x3edc>
   15000:	cmn	r6, #2
   15004:	bcc	15020 <__assert_fail@plt+0x3edc>
   15008:	mov	r0, #0
   1500c:	bl	15068 <__assert_fail@plt+0x3f24>
   15010:	cmp	r0, #0
   15014:	ldrbeq	r0, [r4]
   15018:	moveq	r6, #1
   1501c:	streq	r0, [r5]
   15020:	mov	r0, r6
   15024:	sub	sp, fp, #16
   15028:	pop	{r4, r5, r6, r7, fp, pc}
   1502c:	cmp	r2, #0
   15030:	beq	15060 <__assert_fail@plt+0x3f1c>
   15034:	mvn	r3, #0
   15038:	udiv	r3, r3, r2
   1503c:	cmp	r3, r1
   15040:	bcs	15060 <__assert_fail@plt+0x3f1c>
   15044:	push	{fp, lr}
   15048:	mov	fp, sp
   1504c:	bl	1103c <__errno_location@plt>
   15050:	mov	r1, #12
   15054:	str	r1, [r0]
   15058:	mov	r0, #0
   1505c:	pop	{fp, pc}
   15060:	mul	r1, r2, r1
   15064:	b	14aa4 <__assert_fail@plt+0x3960>
   15068:	push	{r4, sl, fp, lr}
   1506c:	add	fp, sp, #8
   15070:	sub	sp, sp, #264	; 0x108
   15074:	add	r1, sp, #7
   15078:	movw	r2, #257	; 0x101
   1507c:	bl	150cc <__assert_fail@plt+0x3f88>
   15080:	mov	r4, #0
   15084:	cmp	r0, #0
   15088:	bne	150c0 <__assert_fail@plt+0x3f7c>
   1508c:	movw	r1, #24752	; 0x60b0
   15090:	add	r0, sp, #7
   15094:	movt	r1, #1
   15098:	bl	10ed4 <strcmp@plt>
   1509c:	cmp	r0, #0
   150a0:	beq	150c0 <__assert_fail@plt+0x3f7c>
   150a4:	movw	r1, #24754	; 0x60b2
   150a8:	add	r0, sp, #7
   150ac:	movt	r1, #1
   150b0:	bl	10ed4 <strcmp@plt>
   150b4:	mov	r4, r0
   150b8:	cmp	r0, #0
   150bc:	movwne	r4, #1
   150c0:	mov	r0, r4
   150c4:	sub	sp, fp, #8
   150c8:	pop	{r4, sl, fp, pc}
   150cc:	push	{r4, r5, r6, r7, fp, lr}
   150d0:	add	fp, sp, #16
   150d4:	mov	r4, r1
   150d8:	mov	r1, #0
   150dc:	mov	r6, r2
   150e0:	bl	110c0 <setlocale@plt>
   150e4:	cmp	r0, #0
   150e8:	beq	15114 <__assert_fail@plt+0x3fd0>
   150ec:	mov	r7, r0
   150f0:	bl	11024 <strlen@plt>
   150f4:	cmp	r0, r6
   150f8:	bcs	15128 <__assert_fail@plt+0x3fe4>
   150fc:	add	r2, r0, #1
   15100:	mov	r0, r4
   15104:	mov	r1, r7
   15108:	bl	10f04 <memcpy@plt>
   1510c:	mov	r5, #0
   15110:	b	15150 <__assert_fail@plt+0x400c>
   15114:	cmp	r6, #0
   15118:	mov	r5, #22
   1511c:	movne	r0, #0
   15120:	strbne	r0, [r4]
   15124:	b	15150 <__assert_fail@plt+0x400c>
   15128:	mov	r5, #34	; 0x22
   1512c:	cmp	r6, #0
   15130:	beq	15150 <__assert_fail@plt+0x400c>
   15134:	sub	r6, r6, #1
   15138:	mov	r0, r4
   1513c:	mov	r1, r7
   15140:	mov	r2, r6
   15144:	bl	10f04 <memcpy@plt>
   15148:	mov	r0, #0
   1514c:	strb	r0, [r4, r6]
   15150:	mov	r0, r5
   15154:	pop	{r4, r5, r6, r7, fp, pc}
   15158:	mov	r1, #0
   1515c:	b	110c0 <setlocale@plt>
   15160:	cmp	r3, #0
   15164:	cmpeq	r2, #0
   15168:	bne	15180 <__assert_fail@plt+0x403c>
   1516c:	cmp	r1, #0
   15170:	cmpeq	r0, #0
   15174:	mvnne	r1, #0
   15178:	mvnne	r0, #0
   1517c:	b	1519c <__assert_fail@plt+0x4058>
   15180:	sub	sp, sp, #8
   15184:	push	{sp, lr}
   15188:	bl	151ac <__assert_fail@plt+0x4068>
   1518c:	ldr	lr, [sp, #4]
   15190:	add	sp, sp, #8
   15194:	pop	{r2, r3}
   15198:	bx	lr
   1519c:	push	{r1, lr}
   151a0:	mov	r0, #8
   151a4:	bl	10ec8 <raise@plt>
   151a8:	pop	{r1, pc}
   151ac:	cmp	r1, r3
   151b0:	cmpeq	r0, r2
   151b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151b8:	mov	r4, r0
   151bc:	movcc	r0, #0
   151c0:	mov	r5, r1
   151c4:	ldr	lr, [sp, #36]	; 0x24
   151c8:	movcc	r1, r0
   151cc:	bcc	152c8 <__assert_fail@plt+0x4184>
   151d0:	cmp	r3, #0
   151d4:	clzeq	ip, r2
   151d8:	clzne	ip, r3
   151dc:	addeq	ip, ip, #32
   151e0:	cmp	r5, #0
   151e4:	clzeq	r1, r4
   151e8:	addeq	r1, r1, #32
   151ec:	clzne	r1, r5
   151f0:	sub	ip, ip, r1
   151f4:	sub	sl, ip, #32
   151f8:	lsl	r9, r3, ip
   151fc:	rsb	fp, ip, #32
   15200:	orr	r9, r9, r2, lsl sl
   15204:	orr	r9, r9, r2, lsr fp
   15208:	lsl	r8, r2, ip
   1520c:	cmp	r5, r9
   15210:	cmpeq	r4, r8
   15214:	movcc	r0, #0
   15218:	movcc	r1, r0
   1521c:	bcc	15238 <__assert_fail@plt+0x40f4>
   15220:	mov	r0, #1
   15224:	subs	r4, r4, r8
   15228:	lsl	r1, r0, sl
   1522c:	orr	r1, r1, r0, lsr fp
   15230:	lsl	r0, r0, ip
   15234:	sbc	r5, r5, r9
   15238:	cmp	ip, #0
   1523c:	beq	152c8 <__assert_fail@plt+0x4184>
   15240:	lsr	r6, r8, #1
   15244:	orr	r6, r6, r9, lsl #31
   15248:	lsr	r7, r9, #1
   1524c:	mov	r2, ip
   15250:	b	15274 <__assert_fail@plt+0x4130>
   15254:	subs	r3, r4, r6
   15258:	sbc	r8, r5, r7
   1525c:	adds	r3, r3, r3
   15260:	adc	r8, r8, r8
   15264:	adds	r4, r3, #1
   15268:	adc	r5, r8, #0
   1526c:	subs	r2, r2, #1
   15270:	beq	15290 <__assert_fail@plt+0x414c>
   15274:	cmp	r5, r7
   15278:	cmpeq	r4, r6
   1527c:	bcs	15254 <__assert_fail@plt+0x4110>
   15280:	adds	r4, r4, r4
   15284:	adc	r5, r5, r5
   15288:	subs	r2, r2, #1
   1528c:	bne	15274 <__assert_fail@plt+0x4130>
   15290:	lsr	r3, r4, ip
   15294:	orr	r3, r3, r5, lsl fp
   15298:	lsr	r2, r5, ip
   1529c:	orr	r3, r3, r5, lsr sl
   152a0:	adds	r0, r0, r4
   152a4:	mov	r4, r3
   152a8:	lsl	r3, r2, ip
   152ac:	orr	r3, r3, r4, lsl sl
   152b0:	lsl	ip, r4, ip
   152b4:	orr	r3, r3, r4, lsr fp
   152b8:	adc	r1, r1, r5
   152bc:	subs	r0, r0, ip
   152c0:	mov	r5, r2
   152c4:	sbc	r1, r1, r3
   152c8:	cmp	lr, #0
   152cc:	strdne	r4, [lr]
   152d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152d8:	mov	r7, r0
   152dc:	ldr	r6, [pc, #72]	; 1532c <__assert_fail@plt+0x41e8>
   152e0:	ldr	r5, [pc, #72]	; 15330 <__assert_fail@plt+0x41ec>
   152e4:	add	r6, pc, r6
   152e8:	add	r5, pc, r5
   152ec:	sub	r6, r6, r5
   152f0:	mov	r8, r1
   152f4:	mov	r9, r2
   152f8:	bl	10e90 <calloc@plt-0x20>
   152fc:	asrs	r6, r6, #2
   15300:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15304:	mov	r4, #0
   15308:	add	r4, r4, #1
   1530c:	ldr	r3, [r5], #4
   15310:	mov	r2, r9
   15314:	mov	r1, r8
   15318:	mov	r0, r7
   1531c:	blx	r3
   15320:	cmp	r6, r4
   15324:	bne	15308 <__assert_fail@plt+0x41c4>
   15328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1532c:	andeq	r1, r1, r0, lsr #24
   15330:	andeq	r1, r1, r8, lsl ip
   15334:	bx	lr
   15338:	ldr	r3, [pc, #12]	; 1534c <__assert_fail@plt+0x4208>
   1533c:	mov	r1, #0
   15340:	add	r3, pc, r3
   15344:	ldr	r2, [r3]
   15348:	b	11048 <__cxa_atexit@plt>
   1534c:	andeq	r1, r1, ip, lsr #27
   15350:	mov	r2, r1
   15354:	mov	r1, r0
   15358:	mov	r0, #3
   1535c:	b	11108 <__xstat64@plt>

Disassembly of section .fini:

00015360 <.fini>:
   15360:	push	{r3, lr}
   15364:	pop	{r3, pc}
