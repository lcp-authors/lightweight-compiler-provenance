
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010e34 <.init>:
   10e34:	push	{r3, lr}
   10e38:	bl	10f98 <_start@@Base+0x3c>
   10e3c:	pop	{r3, pc}

Disassembly of section .plt:

00010e40 <strcmp@plt-0x14>:
   10e40:	push	{lr}		; (str lr, [sp, #-4]!)
   10e44:	ldr	lr, [pc, #4]	; 10e50 <strcmp@plt-0x4>
   10e48:	add	lr, pc, lr
   10e4c:	ldr	pc, [lr, #8]!
   10e50:			; <UNDEFINED> instruction: 0x000141b0

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #20, 20	; 0x14000
   10e5c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e60 <printf@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #20, 20	; 0x14000
   10e68:	ldr	pc, [ip, #424]!	; 0x1a8

00010e6c <fopen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #20, 20	; 0x14000
   10e74:	ldr	pc, [ip, #416]!	; 0x1a0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #20, 20	; 0x14000
   10e80:	ldr	pc, [ip, #408]!	; 0x198

00010e84 <memcpy@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #400]!	; 0x190

00010e90 <ftell@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #392]!	; 0x188

00010e9c <rewind@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #384]!	; 0x180

00010ea8 <fwrite@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #376]!	; 0x178

00010eb4 <puts@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #368]!	; 0x170

00010ec0 <malloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #360]!	; 0x168

00010ecc <__libc_start_main@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #352]!	; 0x160

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #344]!	; 0x158

00010ee4 <exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #336]!	; 0x150

00010ef0 <fprintf@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #328]!	; 0x148

00010efc <posix_memalign@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #20, 20	; 0x14000
   10f04:	ldr	pc, [ip, #320]!	; 0x140

00010f08 <strncpy@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #20, 20	; 0x14000
   10f10:	ldr	pc, [ip, #312]!	; 0x138

00010f14 <fclose@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #20, 20	; 0x14000
   10f1c:	ldr	pc, [ip, #304]!	; 0x130

00010f20 <fputc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #20, 20	; 0x14000
   10f28:	ldr	pc, [ip, #296]!	; 0x128

00010f2c <fread_unlocked@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #20, 20	; 0x14000
   10f34:	ldr	pc, [ip, #288]!	; 0x120

00010f38 <fseek@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #20, 20	; 0x14000
   10f40:	ldr	pc, [ip, #280]!	; 0x118

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #20, 20	; 0x14000
   10f4c:	ldr	pc, [ip, #272]!	; 0x110

00010f50 <__assert_fail@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #20, 20	; 0x14000
   10f58:	ldr	pc, [ip, #264]!	; 0x108

Disassembly of section .text:

00010f5c <_start@@Base>:
   10f5c:	mov	fp, #0
   10f60:	mov	lr, #0
   10f64:	pop	{r1}		; (ldr r1, [sp], #4)
   10f68:	mov	r2, sp
   10f6c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f70:	push	{r0}		; (str r0, [sp, #-4]!)
   10f74:	ldr	ip, [pc, #16]	; 10f8c <_start@@Base+0x30>
   10f78:	push	{ip}		; (str ip, [sp, #-4]!)
   10f7c:	ldr	r0, [pc, #12]	; 10f90 <_start@@Base+0x34>
   10f80:	ldr	r3, [pc, #12]	; 10f94 <_start@@Base+0x38>
   10f84:	bl	10ecc <__libc_start_main@plt>
   10f88:	bl	10f44 <abort@plt>
   10f8c:	andeq	r3, r1, r4, ror #29
   10f90:			; <UNDEFINED> instruction: 0x000117b8
   10f94:	andeq	r3, r1, r4, lsl #29
   10f98:	ldr	r3, [pc, #20]	; 10fb4 <_start@@Base+0x58>
   10f9c:	ldr	r2, [pc, #20]	; 10fb8 <_start@@Base+0x5c>
   10fa0:	add	r3, pc, r3
   10fa4:	ldr	r2, [r3, r2]
   10fa8:	cmp	r2, #0
   10fac:	bxeq	lr
   10fb0:	b	10ed8 <__gmon_start__@plt>
   10fb4:	andeq	r4, r1, r8, asr r0
   10fb8:	andeq	r0, r0, r4, rrx
   10fbc:	ldr	r0, [pc, #24]	; 10fdc <_start@@Base+0x80>
   10fc0:	ldr	r3, [pc, #24]	; 10fe0 <_start@@Base+0x84>
   10fc4:	cmp	r3, r0
   10fc8:	bxeq	lr
   10fcc:	ldr	r3, [pc, #16]	; 10fe4 <_start@@Base+0x88>
   10fd0:	cmp	r3, #0
   10fd4:	bxeq	lr
   10fd8:	bx	r3
   10fdc:	andeq	r5, r2, r4, ror r0
   10fe0:	andeq	r5, r2, r4, ror r0
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldr	r0, [pc, #36]	; 11014 <_start@@Base+0xb8>
   10fec:	ldr	r1, [pc, #36]	; 11018 <_start@@Base+0xbc>
   10ff0:	sub	r1, r1, r0
   10ff4:	asr	r1, r1, #2
   10ff8:	add	r1, r1, r1, lsr #31
   10ffc:	asrs	r1, r1, #1
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <_start@@Base+0xc0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	r5, r2, r4, ror r0
   11018:	andeq	r5, r2, r4, ror r0
   1101c:	andeq	r0, r0, r0
   11020:	push	{r4, lr}
   11024:	ldr	r4, [pc, #24]	; 11044 <_start@@Base+0xe8>
   11028:	ldrb	r3, [r4]
   1102c:	cmp	r3, #0
   11030:	popne	{r4, pc}
   11034:	bl	10fbc <_start@@Base+0x60>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r4]
   11040:	pop	{r4, pc}
   11044:	andeq	r5, r2, ip, ror r0
   11048:	b	10fe8 <_start@@Base+0x8c>

0001104c <verify_monster@@Base>:
   1104c:	push	{r4, r5, r6, r7, fp, lr}
   11050:	add	fp, sp, #16
   11054:	cmp	r0, #0
   11058:	beq	110cc <verify_monster@@Base+0x80>
   1105c:	ldr	r1, [r0, #4]
   11060:	movw	r2, #20301	; 0x4f4d
   11064:	movt	r2, #21326	; 0x534e
   11068:	cmp	r1, r2
   1106c:	bne	110cc <verify_monster@@Base+0x80>
   11070:	ldr	r1, [r0]
   11074:	mov	r4, r0
   11078:	ldr	r1, [r4, r1]!
   1107c:	mov	r5, r4
   11080:	ldrh	r6, [r5, -r1]!
   11084:	cmp	r6, #9
   11088:	bls	110e0 <verify_monster@@Base+0x94>
   1108c:	ldrh	r1, [r5, #8]
   11090:	cmp	r1, #0
   11094:	beq	110e0 <verify_monster@@Base+0x94>
   11098:	add	r1, r4, r1
   1109c:	ldrh	r1, [r1]
   110a0:	cmp	r1, #80	; 0x50
   110a4:	bne	110e0 <verify_monster@@Base+0x94>
   110a8:	ldrh	r1, [r5, #4]
   110ac:	cmp	r1, #0
   110b0:	addsne	r1, r4, r1
   110b4:	bne	110f4 <verify_monster@@Base+0xa8>
   110b8:	movw	r0, #17280	; 0x4380
   110bc:	movt	r0, #1
   110c0:	bl	10eb4 <puts@plt>
   110c4:	mvn	r0, #0
   110c8:	pop	{r4, r5, r6, r7, fp, pc}
   110cc:	movw	r0, #17248	; 0x4360
   110d0:	movt	r0, #1
   110d4:	bl	10eb4 <puts@plt>
   110d8:	mvn	r0, #0
   110dc:	pop	{r4, r5, r6, r7, fp, pc}
   110e0:	movw	r0, #18112	; 0x46c0
   110e4:	movt	r0, #1
   110e8:	bl	10eb4 <puts@plt>
   110ec:	mvn	r0, #0
   110f0:	pop	{r4, r5, r6, r7, fp, pc}
   110f4:	sub	r0, r1, r0
   110f8:	tst	r0, #15
   110fc:	beq	11114 <verify_monster@@Base+0xc8>
   11100:	movw	r0, #18064	; 0x4690
   11104:	movt	r0, #1
   11108:	bl	10eb4 <puts@plt>
   1110c:	mvn	r0, #0
   11110:	pop	{r4, r5, r6, r7, fp, pc}
   11114:	vldr	s0, [r1]
   11118:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1111c:	vcmp.f32	s0, s2
   11120:	vmrs	APSR_nzcv, fpscr
   11124:	beq	1113c <verify_monster@@Base+0xf0>
   11128:	movw	r0, #18016	; 0x4660
   1112c:	movt	r0, #1
   11130:	bl	10eb4 <puts@plt>
   11134:	mvn	r0, #0
   11138:	pop	{r4, r5, r6, r7, fp, pc}
   1113c:	vldr	s0, [r1, #4]
   11140:	vmov.f32	s2, #0	; 0x40000000  2.0
   11144:	vcmp.f32	s0, s2
   11148:	vmrs	APSR_nzcv, fpscr
   1114c:	beq	11164 <verify_monster@@Base+0x118>
   11150:	movw	r0, #17968	; 0x4630
   11154:	movt	r0, #1
   11158:	bl	10eb4 <puts@plt>
   1115c:	mvn	r0, #0
   11160:	pop	{r4, r5, r6, r7, fp, pc}
   11164:	vldr	s0, [r1, #8]
   11168:	vmov.f32	s2, #8	; 0x40400000  3.0
   1116c:	vcmp.f32	s0, s2
   11170:	vmrs	APSR_nzcv, fpscr
   11174:	beq	1118c <verify_monster@@Base+0x140>
   11178:	movw	r0, #17920	; 0x4600
   1117c:	movt	r0, #1
   11180:	bl	10eb4 <puts@plt>
   11184:	mvn	r0, #0
   11188:	pop	{r4, r5, r6, r7, fp, pc}
   1118c:	vldr	d16, [r1, #16]
   11190:	vmov.f64	d17, #8	; 0x40400000  3.0
   11194:	vcmp.f64	d16, d17
   11198:	vmrs	APSR_nzcv, fpscr
   1119c:	beq	111b4 <verify_monster@@Base+0x168>
   111a0:	movw	r0, #17888	; 0x45e0
   111a4:	movt	r0, #1
   111a8:	bl	10eb4 <puts@plt>
   111ac:	mvn	r0, #0
   111b0:	pop	{r4, r5, r6, r7, fp, pc}
   111b4:	ldrb	r0, [r1, #24]
   111b8:	cmp	r0, #2
   111bc:	bne	111e8 <verify_monster@@Base+0x19c>
   111c0:	ldrh	r0, [r1, #26]
   111c4:	cmp	r0, #5
   111c8:	ldrbeq	r0, [r1, #28]
   111cc:	cmpeq	r0, #6
   111d0:	beq	111fc <verify_monster@@Base+0x1b0>
   111d4:	movw	r0, #17824	; 0x45a0
   111d8:	movt	r0, #1
   111dc:	bl	10eb4 <puts@plt>
   111e0:	mvn	r0, #0
   111e4:	pop	{r4, r5, r6, r7, fp, pc}
   111e8:	movw	r0, #17856	; 0x45c0
   111ec:	movt	r0, #1
   111f0:	bl	10eb4 <puts@plt>
   111f4:	mvn	r0, #0
   111f8:	pop	{r4, r5, r6, r7, fp, pc}
   111fc:	cmp	r6, #12
   11200:	bcc	116b8 <verify_monster@@Base+0x66c>
   11204:	ldrh	r1, [r5, #10]
   11208:	cmp	r1, #0
   1120c:	beq	116b8 <verify_monster@@Base+0x66c>
   11210:	mov	r0, r4
   11214:	ldr	r1, [r0, r1]!
   11218:	ldr	r1, [r0, r1]!
   1121c:	cmp	r1, #9
   11220:	bne	11250 <verify_monster@@Base+0x204>
   11224:	movw	r1, #16137	; 0x3f09
   11228:	add	r0, r0, #4
   1122c:	movt	r1, #1
   11230:	bl	10e54 <strcmp@plt>
   11234:	cmp	r0, #0
   11238:	beq	11264 <verify_monster@@Base+0x218>
   1123c:	movw	r0, #17312	; 0x43a0
   11240:	movt	r0, #1
   11244:	bl	10eb4 <puts@plt>
   11248:	mvn	r0, #0
   1124c:	pop	{r4, r5, r6, r7, fp, pc}
   11250:	movw	r0, #17792	; 0x4580
   11254:	movt	r0, #1
   11258:	bl	10eb4 <puts@plt>
   1125c:	mvn	r0, #0
   11260:	pop	{r4, r5, r6, r7, fp, pc}
   11264:	cmp	r6, #16
   11268:	bcc	11340 <verify_monster@@Base+0x2f4>
   1126c:	ldrh	r1, [r5, #14]
   11270:	cmp	r1, #0
   11274:	beq	11340 <verify_monster@@Base+0x2f4>
   11278:	mov	r0, r4
   1127c:	ldr	r1, [r0, r1]!
   11280:	ldr	r1, [r0, r1]!
   11284:	cmp	r1, #5
   11288:	bne	11340 <verify_monster@@Base+0x2f4>
   1128c:	add	r0, r0, #4
   11290:	mov	r1, #0
   11294:	ldrb	r2, [r0]
   11298:	cmp	r2, #0
   1129c:	bne	11354 <verify_monster@@Base+0x308>
   112a0:	ldrb	r2, [r0, #1]
   112a4:	mov	r1, #1
   112a8:	cmp	r2, #1
   112ac:	bne	11354 <verify_monster@@Base+0x308>
   112b0:	ldrb	r2, [r0, #2]
   112b4:	mov	r1, #2
   112b8:	cmp	r2, #2
   112bc:	bne	11354 <verify_monster@@Base+0x308>
   112c0:	ldrb	r2, [r0, #3]
   112c4:	mov	r1, #3
   112c8:	cmp	r2, #3
   112cc:	bne	11354 <verify_monster@@Base+0x308>
   112d0:	ldrb	r0, [r0, #4]
   112d4:	mov	r1, #4
   112d8:	cmp	r0, #4
   112dc:	bne	11354 <verify_monster@@Base+0x308>
   112e0:	cmp	r6, #25
   112e4:	bls	11368 <verify_monster@@Base+0x31c>
   112e8:	ldrh	r1, [r5, #24]
   112ec:	cmp	r1, #0
   112f0:	beq	11368 <verify_monster@@Base+0x31c>
   112f4:	mov	r0, r4
   112f8:	ldr	r1, [r0, r1]!
   112fc:	ldr	r1, [r0, r1]!
   11300:	cmp	r1, #2
   11304:	bne	1137c <verify_monster@@Base+0x330>
   11308:	add	r7, r0, #4
   1130c:	movw	r1, #16176	; 0x3f30
   11310:	ldr	r0, [r7]
   11314:	movt	r1, #1
   11318:	add	r0, r7, r0
   1131c:	add	r0, r0, #4
   11320:	bl	10e54 <strcmp@plt>
   11324:	cmp	r0, #0
   11328:	beq	11390 <verify_monster@@Base+0x344>
   1132c:	movw	r0, #17664	; 0x4500
   11330:	movt	r0, #1
   11334:	bl	10eb4 <puts@plt>
   11338:	mvn	r0, #0
   1133c:	pop	{r4, r5, r6, r7, fp, pc}
   11340:	movw	r0, #17760	; 0x4560
   11344:	movt	r0, #1
   11348:	bl	10eb4 <puts@plt>
   1134c:	mvn	r0, #0
   11350:	pop	{r4, r5, r6, r7, fp, pc}
   11354:	movw	r0, #16147	; 0x3f13
   11358:	movt	r0, #1
   1135c:	bl	10e60 <printf@plt>
   11360:	mvn	r0, #0
   11364:	pop	{r4, r5, r6, r7, fp, pc}
   11368:	movw	r0, #17344	; 0x43c0
   1136c:	movt	r0, #1
   11370:	bl	10eb4 <puts@plt>
   11374:	mvn	r0, #0
   11378:	pop	{r4, r5, r6, r7, fp, pc}
   1137c:	movw	r0, #17712	; 0x4530
   11380:	movt	r0, #1
   11384:	bl	10eb4 <puts@plt>
   11388:	mvn	r0, #0
   1138c:	pop	{r4, r5, r6, r7, fp, pc}
   11390:	ldr	r0, [r7, #4]!
   11394:	movw	r1, #16182	; 0x3f36
   11398:	movt	r1, #1
   1139c:	add	r0, r7, r0
   113a0:	add	r0, r0, #4
   113a4:	bl	10e54 <strcmp@plt>
   113a8:	cmp	r0, #0
   113ac:	beq	113c4 <verify_monster@@Base+0x378>
   113b0:	movw	r0, #17616	; 0x44d0
   113b4:	movt	r0, #1
   113b8:	bl	10eb4 <puts@plt>
   113bc:	mvn	r0, #0
   113c0:	pop	{r4, r5, r6, r7, fp, pc}
   113c4:	ldrh	r0, [r5, #18]
   113c8:	cmp	r0, #0
   113cc:	beq	11408 <verify_monster@@Base+0x3bc>
   113d0:	ldrb	r0, [r4, r0]
   113d4:	cmp	r0, #1
   113d8:	bne	11408 <verify_monster@@Base+0x3bc>
   113dc:	ldrh	r0, [r5, #20]
   113e0:	cmp	r0, #0
   113e4:	movne	r1, r4
   113e8:	ldrne	r0, [r1, r0]!
   113ec:	addsne	r0, r1, r0
   113f0:	bne	1141c <verify_monster@@Base+0x3d0>
   113f4:	movw	r0, #17376	; 0x43e0
   113f8:	movt	r0, #1
   113fc:	bl	10eb4 <puts@plt>
   11400:	mvn	r0, #0
   11404:	pop	{r4, r5, r6, r7, fp, pc}
   11408:	movw	r0, #17222	; 0x4346
   1140c:	movt	r0, #1
   11410:	bl	10eb4 <puts@plt>
   11414:	mvn	r0, #0
   11418:	pop	{r4, r5, r6, r7, fp, pc}
   1141c:	ldr	r2, [r0]
   11420:	mov	r1, r0
   11424:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   11428:	cmp	r2, #12
   1142c:	bcc	116b8 <verify_monster@@Base+0x66c>
   11430:	ldrh	r1, [r1, #10]
   11434:	cmp	r1, #0
   11438:	beq	116b8 <verify_monster@@Base+0x66c>
   1143c:	ldr	r1, [r0, r1]!
   11440:	add	r0, r0, r1
   11444:	movw	r1, #16188	; 0x3f3c
   11448:	add	r0, r0, #4
   1144c:	movt	r1, #1
   11450:	bl	10e54 <strcmp@plt>
   11454:	cmp	r0, #0
   11458:	beq	11470 <verify_monster@@Base+0x424>
   1145c:	movw	r0, #17584	; 0x44b0
   11460:	movt	r0, #1
   11464:	bl	10eb4 <puts@plt>
   11468:	mvn	r0, #0
   1146c:	pop	{r4, r5, r6, r7, fp, pc}
   11470:	ldrh	r1, [r5, #22]
   11474:	cmp	r1, #0
   11478:	beq	11654 <verify_monster@@Base+0x608>
   1147c:	mov	r0, r4
   11480:	ldr	r1, [r0, r1]!
   11484:	ldr	r1, [r0, r1]!
   11488:	cmp	r1, #2
   1148c:	bne	11654 <verify_monster@@Base+0x608>
   11490:	add	r0, r0, #4
   11494:	ldrh	r1, [r0]
   11498:	cmp	r1, #10
   1149c:	bne	11668 <verify_monster@@Base+0x61c>
   114a0:	ldrb	r1, [r0, #2]
   114a4:	cmp	r1, #20
   114a8:	bne	1167c <verify_monster@@Base+0x630>
   114ac:	ldrh	r1, [r0, #4]
   114b0:	cmp	r1, #30
   114b4:	bne	11690 <verify_monster@@Base+0x644>
   114b8:	ldrb	r0, [r0, #6]
   114bc:	cmp	r0, #40	; 0x28
   114c0:	bne	116a4 <verify_monster@@Base+0x658>
   114c4:	cmp	r6, #38	; 0x26
   114c8:	bcc	116d8 <verify_monster@@Base+0x68c>
   114cc:	ldrh	r0, [r5, #36]	; 0x24
   114d0:	cmp	r0, #0
   114d4:	beq	116d8 <verify_monster@@Base+0x68c>
   114d8:	ldr	r1, [r4, r0]
   114dc:	movw	r0, #51521	; 0xc941
   114e0:	movt	r0, #56697	; 0xdd79
   114e4:	cmp	r1, r0
   114e8:	bne	116d8 <verify_monster@@Base+0x68c>
   114ec:	cmp	r6, #40	; 0x28
   114f0:	bcc	116f8 <verify_monster@@Base+0x6ac>
   114f4:	ldrh	r1, [r5, #38]	; 0x26
   114f8:	cmp	r1, #0
   114fc:	beq	116f8 <verify_monster@@Base+0x6ac>
   11500:	ldr	r1, [r4, r1]
   11504:	cmp	r1, r0
   11508:	bne	116f8 <verify_monster@@Base+0x6ac>
   1150c:	cmp	r6, #42	; 0x2a
   11510:	bcc	11718 <verify_monster@@Base+0x6cc>
   11514:	ldrh	r0, [r5, #40]	; 0x28
   11518:	cmp	r0, #0
   1151c:	beq	11718 <verify_monster@@Base+0x6cc>
   11520:	mov	r1, r4
   11524:	ldr	r2, [r1, r0]!
   11528:	movw	r0, #37249	; 0x9181
   1152c:	movt	r0, #62075	; 0xf27b
   11530:	ldr	r3, [r1, #4]
   11534:	movw	r1, #32973	; 0x80cd
   11538:	eor	r2, r2, r0
   1153c:	movt	r1, #28175	; 0x6e0f
   11540:	eor	r3, r3, r1
   11544:	orrs	r2, r2, r3
   11548:	bne	11718 <verify_monster@@Base+0x6cc>
   1154c:	cmp	r6, #44	; 0x2c
   11550:	bcc	11738 <verify_monster@@Base+0x6ec>
   11554:	ldrh	r2, [r5, #42]	; 0x2a
   11558:	cmp	r2, #0
   1155c:	beq	11738 <verify_monster@@Base+0x6ec>
   11560:	mov	r3, r4
   11564:	ldr	r2, [r3, r2]!
   11568:	eor	r0, r2, r0
   1156c:	ldr	r2, [r3, #4]
   11570:	eor	r1, r2, r1
   11574:	orrs	r0, r0, r1
   11578:	bne	11738 <verify_monster@@Base+0x6ec>
   1157c:	cmp	r6, #46	; 0x2e
   11580:	bcc	11758 <verify_monster@@Base+0x70c>
   11584:	ldrh	r0, [r5, #44]	; 0x2c
   11588:	cmp	r0, #0
   1158c:	beq	11758 <verify_monster@@Base+0x70c>
   11590:	ldr	r1, [r4, r0]
   11594:	movw	r0, #42097	; 0xa471
   11598:	movt	r0, #36481	; 0x8e81
   1159c:	cmp	r1, r0
   115a0:	bne	11758 <verify_monster@@Base+0x70c>
   115a4:	cmp	r6, #48	; 0x30
   115a8:	bcc	11778 <verify_monster@@Base+0x72c>
   115ac:	ldrh	r1, [r5, #46]	; 0x2e
   115b0:	cmp	r1, #0
   115b4:	beq	11778 <verify_monster@@Base+0x72c>
   115b8:	ldr	r1, [r4, r1]
   115bc:	cmp	r1, r0
   115c0:	bne	11778 <verify_monster@@Base+0x72c>
   115c4:	cmp	r6, #50	; 0x32
   115c8:	bcc	11798 <verify_monster@@Base+0x74c>
   115cc:	ldrh	r0, [r5, #48]	; 0x30
   115d0:	cmp	r0, #0
   115d4:	beq	11798 <verify_monster@@Base+0x74c>
   115d8:	mov	r1, r4
   115dc:	ldr	r2, [r1, r0]!
   115e0:	movw	r0, #56817	; 0xddf1
   115e4:	movt	r0, #51047	; 0xc767
   115e8:	ldr	r3, [r1, #4]
   115ec:	movw	r1, #18652	; 0x48dc
   115f0:	eor	r2, r2, r0
   115f4:	movt	r1, #17401	; 0x43f9
   115f8:	eor	r3, r3, r1
   115fc:	orrs	r2, r2, r3
   11600:	bne	11798 <verify_monster@@Base+0x74c>
   11604:	cmp	r6, #52	; 0x34
   11608:	bcc	11634 <verify_monster@@Base+0x5e8>
   1160c:	ldrh	r2, [r5, #50]	; 0x32
   11610:	cmp	r2, #0
   11614:	beq	11634 <verify_monster@@Base+0x5e8>
   11618:	ldr	r2, [r4, r2]!
   1161c:	eor	r0, r2, r0
   11620:	ldr	r2, [r4, #4]
   11624:	eor	r1, r2, r1
   11628:	orrs	r0, r0, r1
   1162c:	mov	r0, #0
   11630:	popeq	{r4, r5, r6, r7, fp, pc}
   11634:	movw	r0, #16706	; 0x4142
   11638:	movw	r1, #16246	; 0x3f76
   1163c:	movw	r3, #16327	; 0x3fc7
   11640:	mov	r2, #155	; 0x9b
   11644:	movt	r0, #1
   11648:	movt	r1, #1
   1164c:	movt	r3, #1
   11650:	bl	10f50 <__assert_fail@plt>
   11654:	movw	r0, #17536	; 0x4480
   11658:	movt	r0, #1
   1165c:	bl	10eb4 <puts@plt>
   11660:	mvn	r0, #0
   11664:	pop	{r4, r5, r6, r7, fp, pc}
   11668:	movw	r0, #17504	; 0x4460
   1166c:	movt	r0, #1
   11670:	bl	10eb4 <puts@plt>
   11674:	mvn	r0, #0
   11678:	pop	{r4, r5, r6, r7, fp, pc}
   1167c:	movw	r0, #17472	; 0x4440
   11680:	movt	r0, #1
   11684:	bl	10eb4 <puts@plt>
   11688:	mvn	r0, #0
   1168c:	pop	{r4, r5, r6, r7, fp, pc}
   11690:	movw	r0, #17440	; 0x4420
   11694:	movt	r0, #1
   11698:	bl	10eb4 <puts@plt>
   1169c:	mvn	r0, #0
   116a0:	pop	{r4, r5, r6, r7, fp, pc}
   116a4:	movw	r0, #17408	; 0x4400
   116a8:	movt	r0, #1
   116ac:	bl	10eb4 <puts@plt>
   116b0:	mvn	r0, #0
   116b4:	pop	{r4, r5, r6, r7, fp, pc}
   116b8:	movw	r0, #17157	; 0x4305
   116bc:	movw	r1, #16978	; 0x4252
   116c0:	movw	r3, #17076	; 0x42b4
   116c4:	movw	r2, #699	; 0x2bb
   116c8:	movt	r0, #1
   116cc:	movt	r1, #1
   116d0:	movt	r3, #1
   116d4:	bl	10f50 <__assert_fail@plt>
   116d8:	movw	r0, #16193	; 0x3f41
   116dc:	movw	r1, #16246	; 0x3f76
   116e0:	movw	r3, #16327	; 0x3fc7
   116e4:	mov	r2, #148	; 0x94
   116e8:	movt	r0, #1
   116ec:	movt	r1, #1
   116f0:	movt	r3, #1
   116f4:	bl	10f50 <__assert_fail@plt>
   116f8:	movw	r0, #16354	; 0x3fe2
   116fc:	movw	r1, #16246	; 0x3f76
   11700:	movw	r3, #16327	; 0x3fc7
   11704:	mov	r2, #149	; 0x95
   11708:	movt	r0, #1
   1170c:	movt	r1, #1
   11710:	movt	r3, #1
   11714:	bl	10f50 <__assert_fail@plt>
   11718:	movw	r0, #16407	; 0x4017
   1171c:	movw	r1, #16246	; 0x3f76
   11720:	movw	r3, #16327	; 0x3fc7
   11724:	mov	r2, #150	; 0x96
   11728:	movt	r0, #1
   1172c:	movt	r1, #1
   11730:	movt	r3, #1
   11734:	bl	10f50 <__assert_fail@plt>
   11738:	movw	r0, #16470	; 0x4056
   1173c:	movw	r1, #16246	; 0x3f76
   11740:	movw	r3, #16327	; 0x3fc7
   11744:	mov	r2, #151	; 0x97
   11748:	movt	r0, #1
   1174c:	movt	r1, #1
   11750:	movt	r3, #1
   11754:	bl	10f50 <__assert_fail@plt>
   11758:	movw	r0, #16533	; 0x4095
   1175c:	movw	r1, #16246	; 0x3f76
   11760:	movw	r3, #16327	; 0x3fc7
   11764:	mov	r2, #152	; 0x98
   11768:	movt	r0, #1
   1176c:	movt	r1, #1
   11770:	movt	r3, #1
   11774:	bl	10f50 <__assert_fail@plt>
   11778:	movw	r0, #16588	; 0x40cc
   1177c:	movw	r1, #16246	; 0x3f76
   11780:	movw	r3, #16327	; 0x3fc7
   11784:	mov	r2, #153	; 0x99
   11788:	movt	r0, #1
   1178c:	movt	r1, #1
   11790:	movt	r3, #1
   11794:	bl	10f50 <__assert_fail@plt>
   11798:	movw	r0, #16642	; 0x4102
   1179c:	movw	r1, #16246	; 0x3f76
   117a0:	movw	r3, #16327	; 0x3fc7
   117a4:	mov	r2, #154	; 0x9a
   117a8:	movt	r0, #1
   117ac:	movt	r1, #1
   117b0:	movt	r3, #1
   117b4:	bl	10f50 <__assert_fail@plt>

000117b8 <main@@Base>:
   117b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117bc:	add	fp, sp, #28
   117c0:	sub	sp, sp, #20
   117c4:	sub	r2, r0, #1
   117c8:	cmp	r2, #2
   117cc:	bcs	11afc <main@@Base+0x344>
   117d0:	cmp	r0, #2
   117d4:	bne	117ec <main@@Base+0x34>
   117d8:	ldr	r0, [r1, #4]
   117dc:	movw	r1, #20592	; 0x5070
   117e0:	movt	r1, #2
   117e4:	str	r0, [r1]
   117e8:	b	117f8 <main@@Base+0x40>
   117ec:	movw	r0, #20592	; 0x5070
   117f0:	movt	r0, #2
   117f4:	ldr	r0, [r0]
   117f8:	movw	r1, #17190	; 0x4326
   117fc:	movt	r1, #1
   11800:	bl	10e6c <fopen@plt>
   11804:	mov	r8, #0
   11808:	cmp	r0, #0
   1180c:	beq	11ac0 <main@@Base+0x308>
   11810:	mov	r1, #0
   11814:	mov	r2, #2
   11818:	mov	r5, r0
   1181c:	mov	r7, #0
   11820:	bl	10f38 <fseek@plt>
   11824:	mov	r0, r5
   11828:	bl	10e90 <ftell@plt>
   1182c:	mov	r4, r0
   11830:	cmp	r0, #1024	; 0x400
   11834:	bhi	11ab4 <main@@Base+0x2fc>
   11838:	mov	r0, r5
   1183c:	bl	10e9c <rewind@plt>
   11840:	cmp	r4, #0
   11844:	mov	r0, r4
   11848:	movweq	r0, #1
   1184c:	bl	10ec0 <malloc@plt>
   11850:	cmp	r0, #0
   11854:	beq	11ab4 <main@@Base+0x2fc>
   11858:	mov	r6, r0
   1185c:	mov	r1, #0
   11860:	mov	r7, r1
   11864:	add	r0, r6, r1
   11868:	sub	r2, r4, r1
   1186c:	mov	r1, #1
   11870:	mov	r3, r5
   11874:	bl	10f2c <fread_unlocked@plt>
   11878:	add	r1, r0, r7
   1187c:	cmp	r0, #0
   11880:	bne	11860 <main@@Base+0xa8>
   11884:	mov	r0, r5
   11888:	bl	10f14 <fclose@plt>
   1188c:	cmp	r4, r7
   11890:	bne	1189c <main@@Base+0xe4>
   11894:	mov	r7, r6
   11898:	b	118a8 <main@@Base+0xf0>
   1189c:	mov	r0, r6
   118a0:	bl	10e78 <free@plt>
   118a4:	mov	r7, #0
   118a8:	add	r0, r4, #255	; 0xff
   118ac:	mov	r6, sp
   118b0:	mov	r1, #256	; 0x100
   118b4:	str	r8, [sp]
   118b8:	bic	r2, r0, #255	; 0xff
   118bc:	mov	r0, r6
   118c0:	bl	10efc <posix_memalign@plt>
   118c4:	ldr	r5, [sp]
   118c8:	cmp	r0, #0
   118cc:	cmpne	r5, #0
   118d0:	beq	118e4 <main@@Base+0x12c>
   118d4:	mov	r0, r5
   118d8:	bl	10e78 <free@plt>
   118dc:	mov	r5, #0
   118e0:	str	r5, [sp]
   118e4:	mov	r0, r5
   118e8:	mov	r1, r7
   118ec:	mov	r2, r4
   118f0:	bl	10e84 <memcpy@plt>
   118f4:	mov	r0, r7
   118f8:	bl	10e78 <free@plt>
   118fc:	movw	r9, #20600	; 0x5078
   11900:	cmp	r5, #0
   11904:	movt	r9, #2
   11908:	ldr	r7, [r9]
   1190c:	bne	1193c <main@@Base+0x184>
   11910:	movw	r0, #20592	; 0x5070
   11914:	movw	r1, #16834	; 0x41c2
   11918:	movt	r0, #2
   1191c:	movt	r1, #1
   11920:	ldr	r2, [r0]
   11924:	mov	r0, r7
   11928:	bl	10ef0 <fprintf@plt>
   1192c:	mvn	r4, #0
   11930:	mov	r0, r4
   11934:	sub	sp, fp, #28
   11938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1193c:	movw	r1, #17193	; 0x4329
   11940:	movw	r2, #16116	; 0x3ef4
   11944:	mov	r0, r7
   11948:	movt	r1, #1
   1194c:	movt	r2, #1
   11950:	bl	10ef0 <fprintf@plt>
   11954:	cmp	r4, #0
   11958:	beq	11a38 <main@@Base+0x280>
   1195c:	movw	sl, #17212	; 0x433c
   11960:	mov	r9, #0
   11964:	movt	sl, #1
   11968:	ands	r8, r9, #15
   1196c:	bne	119a4 <main@@Base+0x1ec>
   11970:	cmp	r9, #0
   11974:	beq	1198c <main@@Base+0x1d4>
   11978:	movw	r1, #17198	; 0x432e
   1197c:	mov	r0, r7
   11980:	mov	r2, r6
   11984:	movt	r1, #1
   11988:	bl	10ef0 <fprintf@plt>
   1198c:	movw	r1, #17204	; 0x4334
   11990:	mov	r0, r7
   11994:	mov	r2, r9
   11998:	movt	r1, #1
   1199c:	bl	10ef0 <fprintf@plt>
   119a0:	b	119b8 <main@@Base+0x200>
   119a4:	tst	r9, #7
   119a8:	bne	119b8 <main@@Base+0x200>
   119ac:	mov	r0, #32
   119b0:	mov	r1, r7
   119b4:	bl	10f20 <fputc@plt>
   119b8:	ldrb	r2, [r5, r9]
   119bc:	mov	r0, r7
   119c0:	mov	r1, sl
   119c4:	bl	10ef0 <fprintf@plt>
   119c8:	ldrb	r0, [r5, r9]
   119cc:	add	r9, r9, #1
   119d0:	sub	r1, r0, #32
   119d4:	uxtb	r1, r1
   119d8:	cmp	r1, #94	; 0x5e
   119dc:	mov	r1, #0
   119e0:	movwhi	r0, #46	; 0x2e
   119e4:	cmp	r4, r9
   119e8:	strb	r0, [r6, r8]
   119ec:	add	r0, r6, r8
   119f0:	strb	r1, [r0, #1]
   119f4:	bne	11968 <main@@Base+0x1b0>
   119f8:	movw	r9, #20600	; 0x5078
   119fc:	tst	r4, #15
   11a00:	movt	r9, #2
   11a04:	beq	11a38 <main@@Base+0x280>
   11a08:	movw	r8, #17218	; 0x4342
   11a0c:	add	r6, r4, #1
   11a10:	movt	r8, #1
   11a14:	mov	r0, r8
   11a18:	mov	r1, #3
   11a1c:	mov	r2, #1
   11a20:	mov	r3, r7
   11a24:	bl	10ea8 <fwrite@plt>
   11a28:	add	r0, r6, #1
   11a2c:	tst	r6, #15
   11a30:	mov	r6, r0
   11a34:	bne	11a14 <main@@Base+0x25c>
   11a38:	movw	r1, #17198	; 0x432e
   11a3c:	mov	r2, sp
   11a40:	mov	r0, r7
   11a44:	movt	r1, #1
   11a48:	bl	10ef0 <fprintf@plt>
   11a4c:	movw	r2, #16871	; 0x41e7
   11a50:	movw	r3, #6948	; 0x1b24
   11a54:	mov	r0, r5
   11a58:	mov	r1, r4
   11a5c:	movt	r2, #1
   11a60:	movt	r3, #1
   11a64:	bl	1310c <flatcc_verify_table_as_root@@Base>
   11a68:	cmp	r0, #0
   11a6c:	bne	11ac8 <main@@Base+0x310>
   11a70:	movw	r2, #16871	; 0x41e7
   11a74:	movw	r3, #6948	; 0x1b24
   11a78:	mov	r0, r5
   11a7c:	mov	r1, r4
   11a80:	movt	r2, #1
   11a84:	movt	r3, #1
   11a88:	bl	1310c <flatcc_verify_table_as_root@@Base>
   11a8c:	cmp	r0, #0
   11a90:	bne	11adc <main@@Base+0x324>
   11a94:	mov	r0, r5
   11a98:	bl	1104c <verify_monster@@Base>
   11a9c:	mov	r4, r0
   11aa0:	mov	r0, r5
   11aa4:	bl	10e78 <free@plt>
   11aa8:	mov	r0, r4
   11aac:	sub	sp, fp, #28
   11ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ab4:	mov	r0, r5
   11ab8:	bl	10f14 <fclose@plt>
   11abc:	b	118a8 <main@@Base+0xf0>
   11ac0:	mov	r4, #0
   11ac4:	b	118a4 <main@@Base+0xec>
   11ac8:	ldr	r3, [r9]
   11acc:	movw	r0, #16876	; 0x41ec
   11ad0:	mov	r1, #38	; 0x26
   11ad4:	movt	r0, #1
   11ad8:	b	11aec <main@@Base+0x334>
   11adc:	ldr	r3, [r9]
   11ae0:	movw	r0, #16915	; 0x4213
   11ae4:	mov	r1, #62	; 0x3e
   11ae8:	movt	r0, #1
   11aec:	mov	r2, #1
   11af0:	bl	10ea8 <fwrite@plt>
   11af4:	mvn	r4, #0
   11af8:	b	11aa0 <main@@Base+0x2e8>
   11afc:	movw	r0, #20600	; 0x5078
   11b00:	mov	r1, #63	; 0x3f
   11b04:	mov	r2, #1
   11b08:	movt	r0, #2
   11b0c:	ldr	r3, [r0]
   11b10:	movw	r0, #16770	; 0x4182
   11b14:	movt	r0, #1
   11b18:	bl	10ea8 <fwrite@plt>
   11b1c:	mov	r0, #1
   11b20:	bl	10ee4 <exit@plt>
   11b24:	push	{r4, r5, r6, r7, fp, lr}
   11b28:	add	fp, sp, #16
   11b2c:	sub	sp, sp, #8
   11b30:	mov	r1, #0
   11b34:	mov	r2, #32
   11b38:	mov	r3, #16
   11b3c:	mov	r4, r0
   11b40:	bl	124a8 <flatcc_verify_field@@Base>
   11b44:	cmp	r0, #0
   11b48:	bne	11f50 <main@@Base+0x798>
   11b4c:	mov	r0, r4
   11b50:	mov	r1, #2
   11b54:	mov	r2, #2
   11b58:	mov	r3, #2
   11b5c:	bl	124a8 <flatcc_verify_field@@Base>
   11b60:	cmp	r0, #0
   11b64:	bne	11f50 <main@@Base+0x798>
   11b68:	mov	r0, r4
   11b6c:	mov	r1, #1
   11b70:	mov	r2, #2
   11b74:	mov	r3, #2
   11b78:	bl	124a8 <flatcc_verify_field@@Base>
   11b7c:	cmp	r0, #0
   11b80:	bne	11f50 <main@@Base+0x798>
   11b84:	mov	r0, r4
   11b88:	mov	r1, #3
   11b8c:	mov	r2, #1
   11b90:	bl	1252c <flatcc_verify_string_field@@Base>
   11b94:	cmp	r0, #0
   11b98:	bne	11f50 <main@@Base+0x798>
   11b9c:	mov	r0, r4
   11ba0:	mov	r1, #6
   11ba4:	mov	r2, #1
   11ba8:	mov	r3, #1
   11bac:	mov	r5, #1
   11bb0:	bl	124a8 <flatcc_verify_field@@Base>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11f50 <main@@Base+0x798>
   11bbc:	mvn	r0, #0
   11bc0:	mov	r1, #5
   11bc4:	mov	r2, #0
   11bc8:	mov	r3, #1
   11bcc:	str	r5, [sp]
   11bd0:	str	r0, [sp, #4]
   11bd4:	mov	r0, r4
   11bd8:	bl	12610 <flatcc_verify_vector_field@@Base>
   11bdc:	cmp	r0, #0
   11be0:	bne	11f50 <main@@Base+0x798>
   11be4:	movw	r3, #6948	; 0x1b24
   11be8:	mov	r0, r4
   11bec:	mov	r1, #11
   11bf0:	mov	r2, #0
   11bf4:	movt	r3, #1
   11bf8:	bl	12a18 <flatcc_verify_table_vector_field@@Base>
   11bfc:	cmp	r0, #0
   11c00:	bne	11f50 <main@@Base+0x798>
   11c04:	mov	r0, r4
   11c08:	mov	r1, #10
   11c0c:	mov	r2, #0
   11c10:	bl	12708 <flatcc_verify_string_vector_field@@Base>
   11c14:	cmp	r0, #0
   11c18:	bne	11f50 <main@@Base+0x798>
   11c1c:	mov	r0, r4
   11c20:	mov	r1, #28
   11c24:	mov	r2, #0
   11c28:	bl	12708 <flatcc_verify_string_vector_field@@Base>
   11c2c:	cmp	r0, #0
   11c30:	bne	11f50 <main@@Base+0x798>
   11c34:	mvn	r0, #0
   11c38:	mov	r1, #1
   11c3c:	mov	r2, #0
   11c40:	mov	r3, #1
   11c44:	str	r1, [sp]
   11c48:	str	r0, [sp, #4]
   11c4c:	mov	r0, r4
   11c50:	mov	r1, #24
   11c54:	bl	12610 <flatcc_verify_vector_field@@Base>
   11c58:	cmp	r0, #0
   11c5c:	bne	11f50 <main@@Base+0x798>
   11c60:	mvn	r0, #-536870912	; 0xe0000000
   11c64:	mov	r1, #4
   11c68:	mov	r2, #0
   11c6c:	mov	r3, #8
   11c70:	str	r1, [sp]
   11c74:	str	r0, [sp, #4]
   11c78:	mov	r0, r4
   11c7c:	mov	r1, #29
   11c80:	bl	12610 <flatcc_verify_vector_field@@Base>
   11c84:	cmp	r0, #0
   11c88:	bne	11f50 <main@@Base+0x798>
   11c8c:	movw	r5, #6948	; 0x1b24
   11c90:	mov	r0, r4
   11c94:	mov	r1, #12
   11c98:	mov	r2, #0
   11c9c:	movt	r5, #1
   11ca0:	mov	r3, r5
   11ca4:	bl	128ac <flatcc_verify_table_field@@Base>
   11ca8:	cmp	r0, #0
   11cac:	bne	11f50 <main@@Base+0x798>
   11cb0:	movw	r3, #8056	; 0x1f78
   11cb4:	mov	r0, r4
   11cb8:	mov	r1, #8
   11cbc:	mov	r2, #0
   11cc0:	movt	r3, #1
   11cc4:	bl	13954 <flatcc_verify_union_field@@Base>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11f50 <main@@Base+0x798>
   11cd0:	mvn	r6, #-1073741824	; 0xc0000000
   11cd4:	mov	r7, #2
   11cd8:	mov	r0, r4
   11cdc:	mov	r1, #9
   11ce0:	mov	r2, #0
   11ce4:	mov	r3, #4
   11ce8:	str	r7, [sp]
   11cec:	str	r6, [sp, #4]
   11cf0:	bl	12610 <flatcc_verify_vector_field@@Base>
   11cf4:	cmp	r0, #0
   11cf8:	bne	11f50 <main@@Base+0x798>
   11cfc:	mov	r0, r4
   11d00:	mov	r1, #31
   11d04:	mov	r2, #0
   11d08:	mov	r3, #4
   11d0c:	str	r7, [sp]
   11d10:	str	r6, [sp, #4]
   11d14:	bl	12610 <flatcc_verify_vector_field@@Base>
   11d18:	cmp	r0, #0
   11d1c:	bne	11f50 <main@@Base+0x798>
   11d20:	mov	r0, #1
   11d24:	mov	r1, #13
   11d28:	mov	r2, #0
   11d2c:	mov	r3, #0
   11d30:	stm	sp, {r0, r5}
   11d34:	mov	r0, r4
   11d38:	bl	1361c <flatcc_verify_table_as_nested_root@@Base>
   11d3c:	cmp	r0, #0
   11d40:	bne	11f50 <main@@Base+0x798>
   11d44:	movw	r3, #8100	; 0x1fa4
   11d48:	mov	r0, r4
   11d4c:	mov	r1, #14
   11d50:	mov	r2, #0
   11d54:	movt	r3, #1
   11d58:	bl	128ac <flatcc_verify_table_field@@Base>
   11d5c:	cmp	r0, #0
   11d60:	bne	11f50 <main@@Base+0x798>
   11d64:	mov	r0, r4
   11d68:	mov	r1, #15
   11d6c:	mov	r2, #1
   11d70:	mov	r3, #1
   11d74:	bl	124a8 <flatcc_verify_field@@Base>
   11d78:	cmp	r0, #0
   11d7c:	bne	11f50 <main@@Base+0x798>
   11d80:	mov	r0, r4
   11d84:	mov	r1, #16
   11d88:	mov	r2, #4
   11d8c:	mov	r3, #4
   11d90:	bl	124a8 <flatcc_verify_field@@Base>
   11d94:	cmp	r0, #0
   11d98:	bne	11f50 <main@@Base+0x798>
   11d9c:	mov	r0, r4
   11da0:	mov	r1, #17
   11da4:	mov	r2, #4
   11da8:	mov	r3, #4
   11dac:	bl	124a8 <flatcc_verify_field@@Base>
   11db0:	cmp	r0, #0
   11db4:	bne	11f50 <main@@Base+0x798>
   11db8:	mov	r0, r4
   11dbc:	mov	r1, #18
   11dc0:	mov	r2, #8
   11dc4:	mov	r3, #8
   11dc8:	bl	124a8 <flatcc_verify_field@@Base>
   11dcc:	cmp	r0, #0
   11dd0:	bne	11f50 <main@@Base+0x798>
   11dd4:	mov	r0, r4
   11dd8:	mov	r1, #19
   11ddc:	mov	r2, #8
   11de0:	mov	r3, #8
   11de4:	bl	124a8 <flatcc_verify_field@@Base>
   11de8:	cmp	r0, #0
   11dec:	bne	11f50 <main@@Base+0x798>
   11df0:	mov	r0, r4
   11df4:	mov	r1, #20
   11df8:	mov	r2, #4
   11dfc:	mov	r3, #4
   11e00:	bl	124a8 <flatcc_verify_field@@Base>
   11e04:	cmp	r0, #0
   11e08:	bne	11f50 <main@@Base+0x798>
   11e0c:	mov	r0, r4
   11e10:	mov	r1, #21
   11e14:	mov	r2, #4
   11e18:	mov	r3, #4
   11e1c:	bl	124a8 <flatcc_verify_field@@Base>
   11e20:	cmp	r0, #0
   11e24:	bne	11f50 <main@@Base+0x798>
   11e28:	mov	r0, r4
   11e2c:	mov	r1, #22
   11e30:	mov	r2, #8
   11e34:	mov	r3, #8
   11e38:	bl	124a8 <flatcc_verify_field@@Base>
   11e3c:	cmp	r0, #0
   11e40:	bne	11f50 <main@@Base+0x798>
   11e44:	mov	r0, r4
   11e48:	mov	r1, #23
   11e4c:	mov	r2, #8
   11e50:	mov	r3, #8
   11e54:	bl	124a8 <flatcc_verify_field@@Base>
   11e58:	cmp	r0, #0
   11e5c:	bne	11f50 <main@@Base+0x798>
   11e60:	mov	r0, r4
   11e64:	mov	r1, #25
   11e68:	mov	r2, #4
   11e6c:	mov	r3, #4
   11e70:	bl	124a8 <flatcc_verify_field@@Base>
   11e74:	cmp	r0, #0
   11e78:	bne	11f50 <main@@Base+0x798>
   11e7c:	mov	r0, r4
   11e80:	mov	r1, #26
   11e84:	mov	r2, #4
   11e88:	mov	r3, #4
   11e8c:	bl	124a8 <flatcc_verify_field@@Base>
   11e90:	cmp	r0, #0
   11e94:	bne	11f50 <main@@Base+0x798>
   11e98:	mov	r0, r4
   11e9c:	mov	r1, #27
   11ea0:	mov	r2, #4
   11ea4:	mov	r3, #4
   11ea8:	bl	124a8 <flatcc_verify_field@@Base>
   11eac:	cmp	r0, #0
   11eb0:	bne	11f50 <main@@Base+0x798>
   11eb4:	mvn	r0, #0
   11eb8:	mov	r1, #1
   11ebc:	mov	r2, #0
   11ec0:	mov	r3, #1
   11ec4:	str	r1, [sp]
   11ec8:	str	r0, [sp, #4]
   11ecc:	mov	r0, r4
   11ed0:	mov	r1, #30
   11ed4:	bl	12610 <flatcc_verify_vector_field@@Base>
   11ed8:	cmp	r0, #0
   11edc:	bne	11f50 <main@@Base+0x798>
   11ee0:	mvn	r5, #-536870912	; 0xe0000000
   11ee4:	mov	r6, #8
   11ee8:	mov	r0, r4
   11eec:	mov	r1, #32
   11ef0:	mov	r2, #0
   11ef4:	mov	r3, #8
   11ef8:	str	r6, [sp]
   11efc:	str	r5, [sp, #4]
   11f00:	bl	12610 <flatcc_verify_vector_field@@Base>
   11f04:	cmp	r0, #0
   11f08:	bne	11f50 <main@@Base+0x798>
   11f0c:	mov	r0, r4
   11f10:	mov	r1, #33	; 0x21
   11f14:	mov	r2, #0
   11f18:	mov	r3, #8
   11f1c:	str	r6, [sp]
   11f20:	str	r5, [sp, #4]
   11f24:	bl	12610 <flatcc_verify_vector_field@@Base>
   11f28:	cmp	r0, #0
   11f2c:	bne	11f50 <main@@Base+0x798>
   11f30:	movw	r3, #8188	; 0x1ffc
   11f34:	mov	r0, r4
   11f38:	mov	r1, #34	; 0x22
   11f3c:	mov	r2, #0
   11f40:	movt	r3, #1
   11f44:	bl	128ac <flatcc_verify_table_field@@Base>
   11f48:	cmp	r0, #0
   11f4c:	beq	11f58 <main@@Base+0x7a0>
   11f50:	sub	sp, fp, #16
   11f54:	pop	{r4, r5, r6, r7, fp, pc}
   11f58:	movw	r3, #8196	; 0x2004
   11f5c:	mov	r0, r4
   11f60:	mov	r1, #35	; 0x23
   11f64:	mov	r2, #0
   11f68:	movt	r3, #1
   11f6c:	sub	sp, fp, #16
   11f70:	pop	{r4, r5, r6, r7, fp, lr}
   11f74:	b	128ac <flatcc_verify_table_field@@Base>
   11f78:	ldrb	r1, [r0, #12]
   11f7c:	sub	r1, r1, #1
   11f80:	uxtb	r2, r1
   11f84:	cmp	r2, #3
   11f88:	movhi	r0, #0
   11f8c:	bxhi	lr
   11f90:	movw	r2, #18160	; 0x46f0
   11f94:	sxtb	r1, r1
   11f98:	movt	r2, #1
   11f9c:	ldr	r1, [r2, r1, lsl #2]
   11fa0:	b	12d18 <flatcc_verify_union_table@@Base>
   11fa4:	push	{r4, sl, fp, lr}
   11fa8:	add	fp, sp, #8
   11fac:	mov	r1, #0
   11fb0:	mov	r2, #0
   11fb4:	mov	r4, r0
   11fb8:	bl	1252c <flatcc_verify_string_field@@Base>
   11fbc:	cmp	r0, #0
   11fc0:	popne	{r4, sl, fp, pc}
   11fc4:	mov	r0, r4
   11fc8:	mov	r1, #1
   11fcc:	mov	r2, #8
   11fd0:	mov	r3, #8
   11fd4:	bl	124a8 <flatcc_verify_field@@Base>
   11fd8:	cmp	r0, #0
   11fdc:	beq	11fe4 <main@@Base+0x82c>
   11fe0:	pop	{r4, sl, fp, pc}
   11fe4:	mov	r0, r4
   11fe8:	mov	r1, #2
   11fec:	mov	r2, #2
   11ff0:	mov	r3, #2
   11ff4:	pop	{r4, sl, fp, lr}
   11ff8:	b	124a8 <flatcc_verify_field@@Base>
   11ffc:	mov	r0, #0
   12000:	bx	lr
   12004:	push	{r4, r5, r6, sl, fp, lr}
   12008:	add	fp, sp, #16
   1200c:	sub	sp, sp, #8
   12010:	mvn	r5, #0
   12014:	mov	r6, #1
   12018:	mov	r1, #0
   1201c:	mov	r2, #0
   12020:	mov	r3, #1
   12024:	mov	r4, r0
   12028:	str	r6, [sp]
   1202c:	str	r5, [sp, #4]
   12030:	bl	12610 <flatcc_verify_vector_field@@Base>
   12034:	cmp	r0, #0
   12038:	bne	12060 <main@@Base+0x8a8>
   1203c:	mov	r0, r4
   12040:	mov	r1, #1
   12044:	mov	r2, #0
   12048:	mov	r3, #1
   1204c:	str	r6, [sp]
   12050:	str	r5, [sp, #4]
   12054:	bl	12610 <flatcc_verify_vector_field@@Base>
   12058:	cmp	r0, #0
   1205c:	beq	12068 <main@@Base+0x8b0>
   12060:	sub	sp, fp, #16
   12064:	pop	{r4, r5, r6, sl, fp, pc}
   12068:	movw	r0, #6948	; 0x1b24
   1206c:	mov	r1, #1
   12070:	mov	r2, #0
   12074:	mov	r3, #0
   12078:	movt	r0, #1
   1207c:	str	r1, [sp]
   12080:	mov	r1, #2
   12084:	str	r0, [sp, #4]
   12088:	mov	r0, r4
   1208c:	bl	1361c <flatcc_verify_table_as_nested_root@@Base>
   12090:	sub	sp, fp, #16
   12094:	pop	{r4, r5, r6, sl, fp, pc}
   12098:	push	{r4, sl, fp, lr}
   1209c:	add	fp, sp, #8
   120a0:	mov	r1, #0
   120a4:	mov	r2, #1
   120a8:	mov	r3, #1
   120ac:	mov	r4, r0
   120b0:	bl	124a8 <flatcc_verify_field@@Base>
   120b4:	cmp	r0, #0
   120b8:	bne	120f4 <main@@Base+0x93c>
   120bc:	mov	r0, r4
   120c0:	mov	r1, #1
   120c4:	mov	r2, #1
   120c8:	mov	r3, #1
   120cc:	bl	124a8 <flatcc_verify_field@@Base>
   120d0:	cmp	r0, #0
   120d4:	popne	{r4, sl, fp, pc}
   120d8:	mov	r0, r4
   120dc:	mov	r1, #2
   120e0:	mov	r2, #1
   120e4:	mov	r3, #1
   120e8:	bl	124a8 <flatcc_verify_field@@Base>
   120ec:	cmp	r0, #0
   120f0:	beq	120f8 <main@@Base+0x940>
   120f4:	pop	{r4, sl, fp, pc}
   120f8:	mov	r0, r4
   120fc:	mov	r1, #3
   12100:	mov	r2, #1
   12104:	mov	r3, #1
   12108:	pop	{r4, sl, fp, lr}
   1210c:	b	124a8 <flatcc_verify_field@@Base>
   12110:	mov	r0, #0
   12114:	bx	lr
   12118:	push	{r4, sl, fp, lr}
   1211c:	add	fp, sp, #8
   12120:	movw	r3, #8576	; 0x2180
   12124:	mov	r1, #0
   12128:	mov	r2, #0
   1212c:	mov	r4, r0
   12130:	movt	r3, #1
   12134:	bl	128ac <flatcc_verify_table_field@@Base>
   12138:	cmp	r0, #0
   1213c:	popne	{r4, sl, fp, pc}
   12140:	movw	r3, #8680	; 0x21e8
   12144:	mov	r0, r4
   12148:	mov	r1, #1
   1214c:	mov	r2, #0
   12150:	movt	r3, #1
   12154:	bl	128ac <flatcc_verify_table_field@@Base>
   12158:	cmp	r0, #0
   1215c:	beq	12164 <main@@Base+0x9ac>
   12160:	pop	{r4, sl, fp, pc}
   12164:	movw	r3, #8056	; 0x1f78
   12168:	mov	r0, r4
   1216c:	mov	r1, #3
   12170:	mov	r2, #0
   12174:	movt	r3, #1
   12178:	pop	{r4, sl, fp, lr}
   1217c:	b	13ad8 <flatcc_verify_union_vector_field@@Base>
   12180:	push	{r4, sl, fp, lr}
   12184:	add	fp, sp, #8
   12188:	movw	r3, #8848	; 0x2290
   1218c:	mov	r1, #0
   12190:	mov	r2, #0
   12194:	mov	r4, r0
   12198:	movt	r3, #1
   1219c:	bl	128ac <flatcc_verify_table_field@@Base>
   121a0:	cmp	r0, #0
   121a4:	popne	{r4, sl, fp, pc}
   121a8:	movw	r3, #9096	; 0x2388
   121ac:	mov	r0, r4
   121b0:	mov	r1, #1
   121b4:	mov	r2, #0
   121b8:	movt	r3, #1
   121bc:	bl	128ac <flatcc_verify_table_field@@Base>
   121c0:	cmp	r0, #0
   121c4:	beq	121cc <main@@Base+0xa14>
   121c8:	pop	{r4, sl, fp, pc}
   121cc:	movw	r3, #9156	; 0x23c4
   121d0:	mov	r0, r4
   121d4:	mov	r1, #2
   121d8:	mov	r2, #0
   121dc:	movt	r3, #1
   121e0:	pop	{r4, sl, fp, lr}
   121e4:	b	128ac <flatcc_verify_table_field@@Base>
   121e8:	push	{r4, sl, fp, lr}
   121ec:	add	fp, sp, #8
   121f0:	movw	r3, #9216	; 0x2400
   121f4:	mov	r1, #1
   121f8:	mov	r2, #0
   121fc:	mov	r4, r0
   12200:	movt	r3, #1
   12204:	bl	13954 <flatcc_verify_union_field@@Base>
   12208:	cmp	r0, #0
   1220c:	bne	12270 <main@@Base+0xab8>
   12210:	movw	r3, #9216	; 0x2400
   12214:	mov	r0, r4
   12218:	mov	r1, #3
   1221c:	mov	r2, #0
   12220:	movt	r3, #1
   12224:	bl	13954 <flatcc_verify_union_field@@Base>
   12228:	cmp	r0, #0
   1222c:	bne	12270 <main@@Base+0xab8>
   12230:	movw	r3, #9216	; 0x2400
   12234:	mov	r0, r4
   12238:	mov	r1, #5
   1223c:	mov	r2, #0
   12240:	movt	r3, #1
   12244:	bl	13954 <flatcc_verify_union_field@@Base>
   12248:	cmp	r0, #0
   1224c:	popne	{r4, sl, fp, pc}
   12250:	movw	r3, #9216	; 0x2400
   12254:	mov	r0, r4
   12258:	mov	r1, #7
   1225c:	mov	r2, #0
   12260:	movt	r3, #1
   12264:	bl	13954 <flatcc_verify_union_field@@Base>
   12268:	cmp	r0, #0
   1226c:	beq	12274 <main@@Base+0xabc>
   12270:	pop	{r4, sl, fp, pc}
   12274:	movw	r3, #9216	; 0x2400
   12278:	mov	r0, r4
   1227c:	mov	r1, #9
   12280:	mov	r2, #0
   12284:	movt	r3, #1
   12288:	pop	{r4, sl, fp, lr}
   1228c:	b	13ad8 <flatcc_verify_union_vector_field@@Base>
   12290:	push	{r4, sl, fp, lr}
   12294:	add	fp, sp, #8
   12298:	mov	r1, #0
   1229c:	mov	r2, #0
   122a0:	mov	r4, r0
   122a4:	bl	1252c <flatcc_verify_string_field@@Base>
   122a8:	cmp	r0, #0
   122ac:	bne	1236c <main@@Base+0xbb4>
   122b0:	mov	r0, r4
   122b4:	mov	r1, #1
   122b8:	mov	r2, #4
   122bc:	mov	r3, #4
   122c0:	bl	124a8 <flatcc_verify_field@@Base>
   122c4:	cmp	r0, #0
   122c8:	bne	1236c <main@@Base+0xbb4>
   122cc:	mov	r0, r4
   122d0:	mov	r1, #2
   122d4:	mov	r2, #0
   122d8:	bl	1252c <flatcc_verify_string_field@@Base>
   122dc:	cmp	r0, #0
   122e0:	bne	1236c <main@@Base+0xbb4>
   122e4:	mov	r0, r4
   122e8:	mov	r1, #3
   122ec:	mov	r2, #8
   122f0:	mov	r3, #8
   122f4:	bl	124a8 <flatcc_verify_field@@Base>
   122f8:	cmp	r0, #0
   122fc:	bne	1236c <main@@Base+0xbb4>
   12300:	mov	r0, r4
   12304:	mov	r1, #4
   12308:	mov	r2, #0
   1230c:	bl	1252c <flatcc_verify_string_field@@Base>
   12310:	cmp	r0, #0
   12314:	bne	1236c <main@@Base+0xbb4>
   12318:	mov	r0, r4
   1231c:	mov	r1, #5
   12320:	mov	r2, #8
   12324:	mov	r3, #8
   12328:	bl	124a8 <flatcc_verify_field@@Base>
   1232c:	cmp	r0, #0
   12330:	bne	1236c <main@@Base+0xbb4>
   12334:	mov	r0, r4
   12338:	mov	r1, #6
   1233c:	mov	r2, #4
   12340:	mov	r3, #4
   12344:	bl	124a8 <flatcc_verify_field@@Base>
   12348:	cmp	r0, #0
   1234c:	popne	{r4, sl, fp, pc}
   12350:	mov	r0, r4
   12354:	mov	r1, #7
   12358:	mov	r2, #8
   1235c:	mov	r3, #8
   12360:	bl	124a8 <flatcc_verify_field@@Base>
   12364:	cmp	r0, #0
   12368:	beq	12370 <main@@Base+0xbb8>
   1236c:	pop	{r4, sl, fp, pc}
   12370:	mov	r0, r4
   12374:	mov	r1, #8
   12378:	mov	r2, #4
   1237c:	mov	r3, #4
   12380:	pop	{r4, sl, fp, lr}
   12384:	b	124a8 <flatcc_verify_field@@Base>
   12388:	push	{r4, sl, fp, lr}
   1238c:	add	fp, sp, #8
   12390:	mov	r1, #0
   12394:	mov	r2, #8
   12398:	mov	r3, #8
   1239c:	mov	r4, r0
   123a0:	bl	124a8 <flatcc_verify_field@@Base>
   123a4:	cmp	r0, #0
   123a8:	popne	{r4, sl, fp, pc}
   123ac:	mov	r0, r4
   123b0:	mov	r1, #1
   123b4:	mov	r2, #4
   123b8:	mov	r3, #4
   123bc:	pop	{r4, sl, fp, lr}
   123c0:	b	124a8 <flatcc_verify_field@@Base>
   123c4:	push	{r4, sl, fp, lr}
   123c8:	add	fp, sp, #8
   123cc:	mov	r1, #0
   123d0:	mov	r2, #8
   123d4:	mov	r3, #8
   123d8:	mov	r4, r0
   123dc:	bl	124a8 <flatcc_verify_field@@Base>
   123e0:	cmp	r0, #0
   123e4:	popne	{r4, sl, fp, pc}
   123e8:	mov	r0, r4
   123ec:	mov	r1, #1
   123f0:	mov	r2, #4
   123f4:	mov	r3, #4
   123f8:	pop	{r4, sl, fp, lr}
   123fc:	b	124a8 <flatcc_verify_field@@Base>
   12400:	ldrb	r2, [r0, #12]
   12404:	sub	r1, r2, #2
   12408:	cmp	r1, #9
   1240c:	bhi	1244c <main@@Base+0xc94>
   12410:	add	r2, pc, #0
   12414:	ldr	pc, [r2, r1, lsl #2]
   12418:	andeq	r2, r1, r0, ror #8
   1241c:	andeq	r2, r1, r8, asr r4
   12420:	andeq	r2, r1, r8, asr r4
   12424:	andeq	r2, r1, r8, asr r4
   12428:	andeq	r2, r1, r8, asr r4
   1242c:	andeq	r2, r1, r8, asr r4
   12430:	andeq	r2, r1, ip, ror #8
   12434:	andeq	r2, r1, r0, asr #8
   12438:	andeq	r2, r1, r0, asr #8
   1243c:	andeq	r2, r1, r4, asr r4
   12440:	mov	r1, #4
   12444:	mov	r2, #4
   12448:	b	12e00 <flatcc_verify_union_struct@@Base>
   1244c:	cmp	r2, #255	; 0xff
   12450:	bne	12458 <main@@Base+0xca0>
   12454:	b	12e58 <flatcc_verify_union_string@@Base>
   12458:	mov	r0, #0
   1245c:	bx	lr
   12460:	movw	r1, #9336	; 0x2478
   12464:	movt	r1, #1
   12468:	b	12d18 <flatcc_verify_union_table@@Base>
   1246c:	mov	r1, #2
   12470:	mov	r2, #2
   12474:	b	12e00 <flatcc_verify_union_struct@@Base>
   12478:	mov	r1, #0
   1247c:	mov	r2, #4
   12480:	mov	r3, #4
   12484:	b	124a8 <flatcc_verify_field@@Base>

00012488 <flatcc_verify_error_string@@Base>:
   12488:	cmp	r0, #36	; 0x24
   1248c:	movwhi	r0, #19243	; 0x4b2b
   12490:	movthi	r0, #1
   12494:	bxhi	lr
   12498:	movw	r1, #19264	; 0x4b40
   1249c:	movt	r1, #1
   124a0:	ldr	r0, [r1, r0, lsl #2]
   124a4:	bx	lr

000124a8 <flatcc_verify_field@@Base>:
   124a8:	push	{r4, sl, fp, lr}
   124ac:	add	fp, sp, #8
   124b0:	ldrh	r4, [r0, #22]
   124b4:	mov	ip, #4
   124b8:	mov	lr, #0
   124bc:	add	r1, ip, r1, lsl #1
   124c0:	uxth	ip, r1
   124c4:	cmp	ip, r4
   124c8:	bcs	12524 <flatcc_verify_field@@Base+0x7c>
   124cc:	ldr	r4, [r0, #12]
   124d0:	uxtah	r1, r4, r1
   124d4:	ldrh	ip, [r1]
   124d8:	cmp	ip, #0
   124dc:	beq	12524 <flatcc_verify_field@@Base+0x7c>
   124e0:	add	r1, ip, r2
   124e4:	ldrh	r2, [r0, #20]
   124e8:	mov	lr, #13
   124ec:	cmp	r1, r2
   124f0:	bhi	12524 <flatcc_verify_field@@Base+0x7c>
   124f4:	ldr	r1, [r0]
   124f8:	mov	lr, #0
   124fc:	add	r2, r1, ip
   12500:	ldr	r1, [r0, #16]
   12504:	add	r4, r2, r1
   12508:	sub	r1, r3, #1
   1250c:	tst	r4, r1
   12510:	beq	12524 <flatcc_verify_field@@Base+0x7c>
   12514:	ldr	r0, [r0, #16]
   12518:	add	r0, r2, r0
   1251c:	ands	lr, r0, r1
   12520:	movwne	lr, #12
   12524:	mov	r0, lr
   12528:	pop	{r4, sl, fp, pc}

0001252c <flatcc_verify_string_field@@Base>:
   1252c:	push	{fp, lr}
   12530:	mov	fp, sp
   12534:	mov	lr, r2
   12538:	ldrh	r2, [r0, #22]
   1253c:	mov	r3, #4
   12540:	add	r1, r3, r1, lsl #1
   12544:	uxth	r3, r1
   12548:	cmp	r3, r2
   1254c:	bcs	125e8 <flatcc_verify_string_field@@Base+0xbc>
   12550:	ldr	r2, [r0, #12]
   12554:	uxtah	r1, r2, r1
   12558:	ldrh	r1, [r1]
   1255c:	cmp	r1, #0
   12560:	beq	125e8 <flatcc_verify_string_field@@Base+0xbc>
   12564:	ldrh	r2, [r0, #20]
   12568:	add	r3, r1, #4
   1256c:	mov	lr, #13
   12570:	cmp	r3, r2
   12574:	bhi	125e0 <flatcc_verify_string_field@@Base+0xb4>
   12578:	ldr	r2, [r0, #16]
   1257c:	mov	lr, #12
   12580:	add	r3, r2, r1
   12584:	tst	r3, #3
   12588:	bne	125e0 <flatcc_verify_string_field@@Base+0xb4>
   1258c:	cmp	r3, #0
   12590:	moveq	lr, #0
   12594:	moveq	r0, lr
   12598:	popeq	{fp, pc}
   1259c:	ldr	ip, [r0]
   125a0:	mov	lr, #17
   125a4:	ldr	r1, [ip, r3]
   125a8:	add	r1, r1, r3
   125ac:	tst	r1, #3
   125b0:	bne	125e0 <flatcc_verify_string_field@@Base+0xb4>
   125b4:	cmp	r1, r3
   125b8:	bls	125e0 <flatcc_verify_string_field@@Base+0xb4>
   125bc:	ldr	r3, [r0, #4]
   125c0:	add	r0, r1, #4
   125c4:	cmp	r3, r0
   125c8:	ldrcs	r1, [ip, r1]
   125cc:	subcs	r2, r3, r0
   125d0:	movcs	lr, #8
   125d4:	addcs	r3, r1, #1
   125d8:	cmpcs	r2, r3
   125dc:	bcs	125f8 <flatcc_verify_string_field@@Base+0xcc>
   125e0:	mov	r0, lr
   125e4:	pop	{fp, pc}
   125e8:	cmp	lr, #0
   125ec:	movwne	lr, #4
   125f0:	mov	r0, lr
   125f4:	pop	{fp, pc}
   125f8:	add	r0, ip, r0
   125fc:	ldrb	lr, [r0, r1]
   12600:	cmp	lr, #0
   12604:	movwne	lr, #7
   12608:	mov	r0, lr
   1260c:	pop	{fp, pc}

00012610 <flatcc_verify_vector_field@@Base>:
   12610:	push	{r4, r5, fp, lr}
   12614:	add	fp, sp, #8
   12618:	mov	r5, r2
   1261c:	ldrh	r2, [r0, #22]
   12620:	mov	r4, #4
   12624:	add	r1, r4, r1, lsl #1
   12628:	uxth	r4, r1
   1262c:	cmp	r4, r2
   12630:	bcs	126f8 <flatcc_verify_vector_field@@Base+0xe8>
   12634:	ldr	r2, [r0, #12]
   12638:	uxtah	r1, r2, r1
   1263c:	ldrh	r1, [r1]
   12640:	cmp	r1, #0
   12644:	beq	126f8 <flatcc_verify_vector_field@@Base+0xe8>
   12648:	ldrh	r2, [r0, #20]
   1264c:	add	r4, r1, #4
   12650:	mov	r5, #13
   12654:	cmp	r4, r2
   12658:	bhi	126f0 <flatcc_verify_vector_field@@Base+0xe0>
   1265c:	ldr	r2, [r0, #16]
   12660:	mov	r5, #12
   12664:	add	r1, r2, r1
   12668:	tst	r1, #3
   1266c:	bne	126f0 <flatcc_verify_vector_field@@Base+0xe0>
   12670:	cmp	r1, #0
   12674:	moveq	r5, #0
   12678:	moveq	r0, r5
   1267c:	popeq	{r4, r5, fp, pc}
   12680:	ldr	ip, [r0]
   12684:	ldr	r4, [fp, #8]
   12688:	mov	r5, #16
   1268c:	ldr	r2, [ip, r1]
   12690:	cmp	r4, #4
   12694:	movls	r4, #4
   12698:	add	lr, r2, r1
   1269c:	cmp	lr, r1
   126a0:	bls	126f0 <flatcc_verify_vector_field@@Base+0xe0>
   126a4:	ldr	r0, [r0, #4]
   126a8:	add	r1, lr, #4
   126ac:	cmp	r1, r0
   126b0:	bhi	126f0 <flatcc_verify_vector_field@@Base+0xe0>
   126b4:	sub	r2, r4, #1
   126b8:	orr	r2, r2, #3
   126bc:	tst	r1, r2
   126c0:	bne	126f0 <flatcc_verify_vector_field@@Base+0xe0>
   126c4:	ldr	r2, [fp, #12]
   126c8:	ldr	r1, [ip, lr]
   126cc:	mov	r5, #25
   126d0:	cmp	r1, r2
   126d4:	bhi	126f0 <flatcc_verify_vector_field@@Base+0xe0>
   126d8:	sub	r0, r0, #4
   126dc:	mul	r1, r1, r3
   126e0:	mov	r5, #0
   126e4:	sub	r0, r0, lr
   126e8:	cmp	r0, r1
   126ec:	movwcc	r5, #26
   126f0:	mov	r0, r5
   126f4:	pop	{r4, r5, fp, pc}
   126f8:	cmp	r5, #0
   126fc:	movwne	r5, #4
   12700:	mov	r0, r5
   12704:	pop	{r4, r5, fp, pc}

00012708 <flatcc_verify_string_vector_field@@Base>:
   12708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1270c:	add	fp, sp, #24
   12710:	ldrh	r7, [r0, #22]
   12714:	mov	r3, #4
   12718:	add	r1, r3, r1, lsl #1
   1271c:	uxth	r3, r1
   12720:	cmp	r3, r7
   12724:	bcs	1276c <flatcc_verify_string_vector_field@@Base+0x64>
   12728:	ldr	r3, [r0, #12]
   1272c:	uxtah	r1, r3, r1
   12730:	ldrh	r1, [r1]
   12734:	cmp	r1, #0
   12738:	beq	1276c <flatcc_verify_string_vector_field@@Base+0x64>
   1273c:	ldrh	r3, [r0, #20]
   12740:	add	r7, r1, #4
   12744:	mov	r2, #13
   12748:	cmp	r7, r3
   1274c:	bhi	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   12750:	ldr	r4, [r0, #16]
   12754:	mov	r2, #12
   12758:	add	r6, r4, r1
   1275c:	tst	r6, #3
   12760:	beq	1277c <flatcc_verify_string_vector_field@@Base+0x74>
   12764:	mov	r0, r2
   12768:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1276c:	cmp	r2, #0
   12770:	movwne	r2, #4
   12774:	mov	r0, r2
   12778:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1277c:	mov	r2, #0
   12780:	cmp	r6, #0
   12784:	beq	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   12788:	ldr	r5, [r0]
   1278c:	mov	r2, #16
   12790:	ldr	r7, [r5, r6]
   12794:	add	r3, r7, r6
   12798:	cmp	r3, r6
   1279c:	bls	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   127a0:	ldr	lr, [r0, #4]
   127a4:	add	r0, r3, #4
   127a8:	cmp	r0, lr
   127ac:	bhi	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   127b0:	ands	r0, r0, #3
   127b4:	bne	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   127b8:	ldr	ip, [r5, r3]
   127bc:	mov	r2, #25
   127c0:	cmn	ip, #-1073741823	; 0xc0000001
   127c4:	bhi	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   127c8:	sub	r0, lr, #4
   127cc:	mov	r2, #26
   127d0:	sub	r0, r0, r3
   127d4:	cmp	r0, ip, lsl #2
   127d8:	bcc	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   127dc:	cmp	ip, #0
   127e0:	mov	r2, #0
   127e4:	beq	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   127e8:	sub	r0, lr, #8
   127ec:	add	r9, r7, r4
   127f0:	sub	r0, r0, r1
   127f4:	sub	r0, r0, r7
   127f8:	sub	r8, r0, r4
   127fc:	add	r0, r5, r9
   12800:	mov	r5, #0
   12804:	rsb	r4, r0, #0
   12808:	sub	r0, r1, r4
   1280c:	add	r3, r1, r9
   12810:	mov	r2, #17
   12814:	ldr	r6, [r0, #4]
   12818:	add	r7, r3, r6
   1281c:	add	r0, r7, #4
   12820:	tst	r0, #3
   12824:	bne	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   12828:	add	r3, r3, #4
   1282c:	cmp	r0, r3
   12830:	bls	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   12834:	add	r0, r7, #8
   12838:	cmp	lr, r0
   1283c:	bcc	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   12840:	add	r0, r1, r6
   12844:	sub	r2, r8, r6
   12848:	sub	r0, r0, r4
   1284c:	ldr	r0, [r0, #4]
   12850:	add	r3, r0, #1
   12854:	cmp	r2, r3
   12858:	bcc	12894 <flatcc_verify_string_vector_field@@Base+0x18c>
   1285c:	add	r0, r6, r0
   12860:	add	r0, r1, r0
   12864:	sub	r0, r0, r4
   12868:	ldrb	r0, [r0, #8]
   1286c:	cmp	r0, #0
   12870:	bne	128a0 <flatcc_verify_string_vector_field@@Base+0x198>
   12874:	add	r5, r5, #1
   12878:	sub	r8, r8, #4
   1287c:	add	r9, r9, #4
   12880:	sub	r4, r4, #4
   12884:	mov	r2, #0
   12888:	cmp	r5, ip
   1288c:	bcc	12808 <flatcc_verify_string_vector_field@@Base+0x100>
   12890:	b	12764 <flatcc_verify_string_vector_field@@Base+0x5c>
   12894:	mov	r2, #8
   12898:	mov	r0, r2
   1289c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128a0:	mov	r2, #7
   128a4:	mov	r0, r2
   128a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000128ac <flatcc_verify_table_field@@Base>:
   128ac:	push	{r4, r5, r6, sl, fp, lr}
   128b0:	add	fp, sp, #16
   128b4:	sub	sp, sp, #24
   128b8:	ldrh	r5, [r0, #22]
   128bc:	mov	r6, #4
   128c0:	add	r1, r6, r1, lsl #1
   128c4:	uxth	r6, r1
   128c8:	cmp	r6, r5
   128cc:	bcs	129e4 <flatcc_verify_table_field@@Base+0x138>
   128d0:	ldr	r6, [r0, #12]
   128d4:	uxtah	r1, r6, r1
   128d8:	ldrh	r1, [r1]
   128dc:	cmp	r1, #0
   128e0:	beq	129e4 <flatcc_verify_table_field@@Base+0x138>
   128e4:	ldrh	r6, [r0, #20]
   128e8:	add	r5, r1, #4
   128ec:	mov	r2, #13
   128f0:	cmp	r5, r6
   128f4:	bhi	129ec <flatcc_verify_table_field@@Base+0x140>
   128f8:	ldr	r2, [r0, #16]
   128fc:	add	r4, r2, r1
   12900:	mov	r2, #12
   12904:	tst	r4, #3
   12908:	bne	129ec <flatcc_verify_table_field@@Base+0x140>
   1290c:	cmp	r4, #0
   12910:	beq	129f8 <flatcc_verify_table_field@@Base+0x14c>
   12914:	ldm	r0, {r1, ip}
   12918:	ldr	r2, [r0, #8]
   1291c:	ldr	r0, [r1, r4]
   12920:	subs	r2, r2, #1
   12924:	str	r2, [sp, #8]
   12928:	beq	12a08 <flatcc_verify_table_field@@Base+0x15c>
   1292c:	add	r0, r0, r4
   12930:	mov	r2, #15
   12934:	tst	r0, #3
   12938:	bne	129ec <flatcc_verify_table_field@@Base+0x140>
   1293c:	cmp	r0, r4
   12940:	bls	129ec <flatcc_verify_table_field@@Base+0x140>
   12944:	add	r6, r0, #4
   12948:	cmp	r6, ip
   1294c:	bhi	129ec <flatcc_verify_table_field@@Base+0x140>
   12950:	str	r0, [sp, #16]
   12954:	ldr	r2, [r1, r0]
   12958:	sub	r5, r0, r2
   1295c:	mov	r2, #29
   12960:	tst	r5, #-2147483647	; 0x80000001
   12964:	bne	129ec <flatcc_verify_table_field@@Base+0x140>
   12968:	add	r4, r5, #2
   1296c:	mov	r2, #27
   12970:	cmp	r4, ip
   12974:	bhi	129ec <flatcc_verify_table_field@@Base+0x140>
   12978:	mov	lr, r1
   1297c:	mov	r2, #30
   12980:	ldrh	r6, [lr, r5]!
   12984:	tst	r6, #1
   12988:	strh	r6, [sp, #22]
   1298c:	bne	129ec <flatcc_verify_table_field@@Base+0x140>
   12990:	add	r5, r5, r6
   12994:	cmp	r5, ip
   12998:	bhi	129ec <flatcc_verify_table_field@@Base+0x140>
   1299c:	mov	r2, #28
   129a0:	cmp	r6, #4
   129a4:	bcc	129ec <flatcc_verify_table_field@@Base+0x140>
   129a8:	add	r2, r1, r4
   129ac:	sub	r0, ip, r0
   129b0:	ldrh	r4, [r2]
   129b4:	mov	r2, #20
   129b8:	cmp	r0, r4
   129bc:	strh	r4, [sp, #20]
   129c0:	bcc	129ec <flatcc_verify_table_field@@Base+0x140>
   129c4:	mov	r0, sp
   129c8:	str	lr, [sp, #12]
   129cc:	stm	sp, {r1, ip}
   129d0:	blx	r3
   129d4:	mov	r2, r0
   129d8:	mov	r0, r2
   129dc:	sub	sp, fp, #16
   129e0:	pop	{r4, r5, r6, sl, fp, pc}
   129e4:	cmp	r2, #0
   129e8:	movwne	r2, #4
   129ec:	mov	r0, r2
   129f0:	sub	sp, fp, #16
   129f4:	pop	{r4, r5, r6, sl, fp, pc}
   129f8:	mov	r2, #0
   129fc:	mov	r0, r2
   12a00:	sub	sp, fp, #16
   12a04:	pop	{r4, r5, r6, sl, fp, pc}
   12a08:	mov	r2, #3
   12a0c:	mov	r0, r2
   12a10:	sub	sp, fp, #16
   12a14:	pop	{r4, r5, r6, sl, fp, pc}

00012a18 <flatcc_verify_table_vector_field@@Base>:
   12a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a1c:	add	fp, sp, #28
   12a20:	sub	sp, sp, #36	; 0x24
   12a24:	ldrh	r7, [r0, #22]
   12a28:	mov	r4, r3
   12a2c:	mov	r3, #4
   12a30:	add	r1, r3, r1, lsl #1
   12a34:	uxth	r3, r1
   12a38:	cmp	r3, r7
   12a3c:	bcs	12bfc <flatcc_verify_table_vector_field@@Base+0x1e4>
   12a40:	ldr	r3, [r0, #12]
   12a44:	uxtah	r1, r3, r1
   12a48:	ldrh	r1, [r1]
   12a4c:	cmp	r1, #0
   12a50:	beq	12bfc <flatcc_verify_table_vector_field@@Base+0x1e4>
   12a54:	ldrh	r3, [r0, #20]
   12a58:	add	r7, r1, #4
   12a5c:	mov	r2, #13
   12a60:	cmp	r7, r3
   12a64:	bhi	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12a68:	ldr	r3, [r0, #16]
   12a6c:	mov	r2, #12
   12a70:	add	r6, r3, r1
   12a74:	tst	r6, #3
   12a78:	bne	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12a7c:	mov	r2, #0
   12a80:	cmp	r6, #0
   12a84:	beq	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12a88:	ldr	r7, [r0, #8]
   12a8c:	cmp	r7, #1
   12a90:	blt	12c10 <flatcc_verify_table_vector_field@@Base+0x1f8>
   12a94:	ldr	sl, [r0]
   12a98:	mov	r2, #16
   12a9c:	ldr	ip, [sl, r6]
   12aa0:	add	r5, ip, r6
   12aa4:	cmp	r5, r6
   12aa8:	bls	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12aac:	ldr	r9, [r0, #4]
   12ab0:	add	r8, r5, #4
   12ab4:	cmp	r8, r9
   12ab8:	bhi	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12abc:	ands	r0, r8, #3
   12ac0:	bne	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12ac4:	ldr	lr, [sl, r5]
   12ac8:	mov	r2, #25
   12acc:	cmn	lr, #-1073741823	; 0xc0000001
   12ad0:	bhi	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12ad4:	sub	r0, r9, #4
   12ad8:	mov	r2, #26
   12adc:	sub	r6, r0, r5
   12ae0:	cmp	r6, lr, lsl #2
   12ae4:	bcc	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12ae8:	cmp	lr, #0
   12aec:	mov	r2, #0
   12af0:	beq	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12af4:	subs	r2, r7, #2
   12af8:	str	r2, [sp, #4]
   12afc:	beq	12cdc <flatcc_verify_table_vector_field@@Base+0x2c4>
   12b00:	sub	r0, r0, r1
   12b04:	sub	r0, r0, ip
   12b08:	sub	r5, r0, r3
   12b0c:	mov	r0, #0
   12b10:	str	r0, [sp, #8]
   12b14:	ldr	r2, [sl, r8]
   12b18:	ldr	r0, [sp, #4]
   12b1c:	str	r0, [sp, #20]
   12b20:	add	r0, r8, r2
   12b24:	add	ip, r0, #4
   12b28:	tst	r0, #3
   12b2c:	bne	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b30:	cmp	r0, r8
   12b34:	bls	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b38:	cmp	ip, r9
   12b3c:	bhi	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b40:	str	r0, [sp, #28]
   12b44:	add	r1, sl, r2
   12b48:	ldr	r7, [r1, r8]
   12b4c:	sub	r1, r2, r7
   12b50:	add	r3, r8, r1
   12b54:	tst	r3, #-2147483647	; 0x80000001
   12b58:	bne	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b5c:	add	r6, r3, #2
   12b60:	cmp	r6, r9
   12b64:	bhi	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b68:	add	r1, sl, r1
   12b6c:	add	r1, r1, r8
   12b70:	ldrh	r1, [r1]
   12b74:	cmp	r1, #4
   12b78:	strh	r1, [sp, #34]	; 0x22
   12b7c:	bcc	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b80:	ands	r6, r1, #1
   12b84:	bne	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b88:	add	r1, r2, r1
   12b8c:	sub	r1, r1, r7
   12b90:	add	r1, r8, r1
   12b94:	cmp	r1, r9
   12b98:	bhi	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12b9c:	add	r1, sl, r3
   12ba0:	sub	r2, r5, r2
   12ba4:	ldrh	r3, [r1, #2]
   12ba8:	cmp	r2, r3
   12bac:	strh	r3, [sp, #32]
   12bb0:	bcc	12c20 <flatcc_verify_table_vector_field@@Base+0x208>
   12bb4:	add	r0, sp, #12
   12bb8:	str	sl, [sp, #12]
   12bbc:	str	r1, [sp, #24]
   12bc0:	mov	r6, lr
   12bc4:	str	r9, [sp, #16]
   12bc8:	blx	r4
   12bcc:	cmp	r0, #0
   12bd0:	bne	12cf4 <flatcc_verify_table_vector_field@@Base+0x2dc>
   12bd4:	ldr	r0, [sp, #8]
   12bd8:	sub	r5, r5, #4
   12bdc:	add	r8, r8, #4
   12be0:	mov	r2, #0
   12be4:	mov	lr, r6
   12be8:	add	r0, r0, #1
   12bec:	cmp	r0, r6
   12bf0:	str	r0, [sp, #8]
   12bf4:	bcc	12b14 <flatcc_verify_table_vector_field@@Base+0xfc>
   12bf8:	b	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12bfc:	cmp	r2, #0
   12c00:	movwne	r2, #4
   12c04:	mov	r0, r2
   12c08:	sub	sp, fp, #28
   12c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c10:	mov	r2, #3
   12c14:	mov	r0, r2
   12c18:	sub	sp, fp, #28
   12c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c20:	ldr	r1, [sp, #4]
   12c24:	str	r1, [sp, #20]
   12c28:	mov	r2, #15
   12c2c:	tst	r0, #3
   12c30:	bne	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c34:	cmp	r0, r8
   12c38:	bls	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c3c:	cmp	ip, r9
   12c40:	bhi	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c44:	str	r0, [sp, #28]
   12c48:	mov	r2, #29
   12c4c:	ldr	r1, [sl, r0]
   12c50:	sub	r7, r0, r1
   12c54:	tst	r7, #-2147483647	; 0x80000001
   12c58:	bne	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c5c:	add	r3, r7, #2
   12c60:	mov	r2, #27
   12c64:	cmp	r3, r9
   12c68:	bhi	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c6c:	mov	r1, sl
   12c70:	mov	r2, #30
   12c74:	ldrh	r6, [r1, r7]!
   12c78:	tst	r6, #1
   12c7c:	strh	r6, [sp, #34]	; 0x22
   12c80:	bne	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c84:	add	r7, r7, r6
   12c88:	cmp	r7, r9
   12c8c:	bhi	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c90:	mov	r2, #28
   12c94:	cmp	r6, #4
   12c98:	bcc	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12c9c:	add	r2, sl, r3
   12ca0:	sub	r0, r9, r0
   12ca4:	ldrh	r3, [r2]
   12ca8:	mov	r2, #20
   12cac:	cmp	r0, r3
   12cb0:	strh	r3, [sp, #32]
   12cb4:	bcc	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12cb8:	add	r0, sp, #12
   12cbc:	str	sl, [sp, #12]
   12cc0:	str	r1, [sp, #24]
   12cc4:	str	r9, [sp, #16]
   12cc8:	blx	r4
   12ccc:	mov	r2, r0
   12cd0:	mov	r0, r2
   12cd4:	sub	sp, fp, #28
   12cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	mov	r0, #0
   12ce0:	mov	r2, #3
   12ce4:	str	r0, [sp, #20]
   12ce8:	mov	r0, r2
   12cec:	sub	sp, fp, #28
   12cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf4:	ldr	r0, [sl, r8]
   12cf8:	ldr	r1, [sp, #4]
   12cfc:	add	r0, r0, r8
   12d00:	str	r1, [sp, #20]
   12d04:	add	ip, r0, #4
   12d08:	mov	r2, #15
   12d0c:	tst	r0, #3
   12d10:	beq	12c34 <flatcc_verify_table_vector_field@@Base+0x21c>
   12d14:	b	12c04 <flatcc_verify_table_vector_field@@Base+0x1ec>

00012d18 <flatcc_verify_union_table@@Base>:
   12d18:	push	{r4, r5, r6, sl, fp, lr}
   12d1c:	add	fp, sp, #16
   12d20:	sub	sp, sp, #24
   12d24:	ldr	r5, [r0, #16]
   12d28:	ldr	r3, [r0, #20]
   12d2c:	ldr	ip, [r0]
   12d30:	ldr	r2, [r0, #4]
   12d34:	ldr	r0, [r0, #8]
   12d38:	subs	r0, r0, #1
   12d3c:	str	r0, [sp, #8]
   12d40:	moveq	r0, #3
   12d44:	subeq	sp, fp, #16
   12d48:	popeq	{r4, r5, r6, sl, fp, pc}
   12d4c:	add	r3, r3, r5
   12d50:	mov	r0, #15
   12d54:	tst	r3, #3
   12d58:	bne	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12d5c:	cmp	r3, r5
   12d60:	bls	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12d64:	add	r6, r3, #4
   12d68:	cmp	r6, r2
   12d6c:	bhi	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12d70:	str	r3, [sp, #16]
   12d74:	ldr	r0, [ip, r3]
   12d78:	sub	r5, r3, r0
   12d7c:	mov	r0, #29
   12d80:	tst	r5, #-2147483647	; 0x80000001
   12d84:	bne	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12d88:	add	r4, r5, #2
   12d8c:	mov	r0, #27
   12d90:	cmp	r4, r2
   12d94:	bhi	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12d98:	mov	lr, ip
   12d9c:	mov	r0, #30
   12da0:	ldrh	r6, [lr, r5]!
   12da4:	tst	r6, #1
   12da8:	strh	r6, [sp, #22]
   12dac:	bne	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12db0:	add	r5, r5, r6
   12db4:	cmp	r5, r2
   12db8:	bhi	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12dbc:	mov	r0, #28
   12dc0:	cmp	r6, #4
   12dc4:	bcc	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12dc8:	add	r0, ip, r4
   12dcc:	sub	r3, r2, r3
   12dd0:	ldrh	r4, [r0]
   12dd4:	mov	r0, #20
   12dd8:	cmp	r3, r4
   12ddc:	strh	r4, [sp, #20]
   12de0:	bcc	12df8 <flatcc_verify_union_table@@Base+0xe0>
   12de4:	mov	r0, sp
   12de8:	str	ip, [sp]
   12dec:	str	lr, [sp, #12]
   12df0:	str	r2, [sp, #4]
   12df4:	blx	r1
   12df8:	sub	sp, fp, #16
   12dfc:	pop	{r4, r5, r6, sl, fp, pc}

00012e00 <flatcc_verify_union_struct@@Base>:
   12e00:	push	{fp, lr}
   12e04:	mov	fp, sp
   12e08:	ldr	lr, [r0, #20]
   12e0c:	mov	r3, r0
   12e10:	mov	r0, #18
   12e14:	cmp	lr, #0
   12e18:	beq	12e54 <flatcc_verify_union_struct@@Base+0x54>
   12e1c:	ldr	ip, [r3, #4]
   12e20:	ldr	r3, [r3, #16]
   12e24:	add	r3, r3, lr
   12e28:	cmp	r3, ip
   12e2c:	bhi	12e54 <flatcc_verify_union_struct@@Base+0x54>
   12e30:	adds	r1, r3, r1
   12e34:	mov	r0, #10
   12e38:	bcs	12e54 <flatcc_verify_union_struct@@Base+0x54>
   12e3c:	mov	r0, #9
   12e40:	cmp	r1, ip
   12e44:	pophi	{fp, pc}
   12e48:	sub	r0, r2, #1
   12e4c:	ands	r0, r3, r0
   12e50:	movwne	r0, #11
   12e54:	pop	{fp, pc}

00012e58 <flatcc_verify_union_string@@Base>:
   12e58:	mov	r1, r0
   12e5c:	ldr	r3, [r0, #16]
   12e60:	ldr	r0, [r0, #20]
   12e64:	add	r2, r0, r3
   12e68:	mov	r0, #17
   12e6c:	tst	r2, #3
   12e70:	bne	12ec4 <flatcc_verify_union_string@@Base+0x6c>
   12e74:	cmp	r2, r3
   12e78:	bls	12ec4 <flatcc_verify_union_string@@Base+0x6c>
   12e7c:	ldr	r3, [r1, #4]
   12e80:	add	ip, r2, #4
   12e84:	cmp	r3, ip
   12e88:	bcc	12ec4 <flatcc_verify_union_string@@Base+0x6c>
   12e8c:	push	{fp, lr}
   12e90:	mov	fp, sp
   12e94:	ldr	r1, [r1]
   12e98:	sub	lr, r3, ip
   12e9c:	mov	r0, #8
   12ea0:	ldr	r2, [r1, r2]
   12ea4:	add	r3, r2, #1
   12ea8:	cmp	lr, r3
   12eac:	pop	{fp, lr}
   12eb0:	bxcc	lr
   12eb4:	add	r0, r1, ip
   12eb8:	ldrb	r0, [r0, r2]
   12ebc:	cmp	r0, #0
   12ec0:	movwne	r0, #7
   12ec4:	bx	lr

00012ec8 <flatcc_verify_buffer_header@@Base>:
   12ec8:	push	{r4, sl, fp, lr}
   12ecc:	add	fp, sp, #8
   12ed0:	sub	sp, sp, #8
   12ed4:	mov	r4, r0
   12ed8:	mov	r0, #5
   12edc:	tst	r4, #3
   12ee0:	bne	12f34 <flatcc_verify_buffer_header@@Base+0x6c>
   12ee4:	mov	r0, #6
   12ee8:	cmn	r1, #9
   12eec:	bhi	12f34 <flatcc_verify_buffer_header@@Base+0x6c>
   12ef0:	mov	r0, #1
   12ef4:	cmp	r1, #8
   12ef8:	bcc	12f34 <flatcc_verify_buffer_header@@Base+0x6c>
   12efc:	cmp	r2, #0
   12f00:	beq	12f3c <flatcc_verify_buffer_header@@Base+0x74>
   12f04:	mov	r0, #0
   12f08:	mov	r1, r2
   12f0c:	mov	r2, #4
   12f10:	str	r0, [sp, #4]
   12f14:	add	r0, sp, #4
   12f18:	bl	10f08 <strncpy@plt>
   12f1c:	ldr	r1, [sp, #4]
   12f20:	cmp	r1, #0
   12f24:	ldrne	r2, [r4, #4]
   12f28:	movne	r0, #2
   12f2c:	cmpne	r2, r1
   12f30:	moveq	r0, #0
   12f34:	sub	sp, fp, #8
   12f38:	pop	{r4, sl, fp, pc}
   12f3c:	mov	r0, #0
   12f40:	sub	sp, fp, #8
   12f44:	pop	{r4, sl, fp, pc}

00012f48 <flatcc_verify_typed_buffer_header@@Base>:
   12f48:	mov	r3, r0
   12f4c:	mov	r0, #5
   12f50:	tst	r3, #3
   12f54:	bne	12f88 <flatcc_verify_typed_buffer_header@@Base+0x40>
   12f58:	mov	r0, #6
   12f5c:	cmn	r1, #9
   12f60:	bhi	12f88 <flatcc_verify_typed_buffer_header@@Base+0x40>
   12f64:	mov	r0, #1
   12f68:	cmp	r1, #8
   12f6c:	bxcc	lr
   12f70:	cmp	r2, #0
   12f74:	beq	12f8c <flatcc_verify_typed_buffer_header@@Base+0x44>
   12f78:	ldr	r1, [r3, #4]
   12f7c:	mov	r0, #2
   12f80:	cmp	r1, r2
   12f84:	moveq	r0, #0
   12f88:	bx	lr
   12f8c:	mov	r0, #0
   12f90:	bx	lr

00012f94 <flatcc_verify_struct_as_root@@Base>:
   12f94:	push	{r4, r5, r6, r7, fp, lr}
   12f98:	add	fp, sp, #16
   12f9c:	sub	sp, sp, #8
   12fa0:	mov	r5, r0
   12fa4:	mov	r0, #5
   12fa8:	tst	r5, #3
   12fac:	bne	13044 <flatcc_verify_struct_as_root@@Base+0xb0>
   12fb0:	mov	r4, r1
   12fb4:	mov	r0, #6
   12fb8:	cmn	r1, #9
   12fbc:	bhi	13044 <flatcc_verify_struct_as_root@@Base+0xb0>
   12fc0:	mov	r0, #1
   12fc4:	cmp	r4, #8
   12fc8:	bcc	13044 <flatcc_verify_struct_as_root@@Base+0xb0>
   12fcc:	mov	r6, r3
   12fd0:	mov	r7, r2
   12fd4:	cmp	r2, #0
   12fd8:	beq	13008 <flatcc_verify_struct_as_root@@Base+0x74>
   12fdc:	mov	r0, #0
   12fe0:	mov	r1, r7
   12fe4:	mov	r2, #4
   12fe8:	str	r0, [sp]
   12fec:	mov	r0, sp
   12ff0:	bl	10f08 <strncpy@plt>
   12ff4:	ldr	r0, [sp]
   12ff8:	cmp	r0, #0
   12ffc:	ldrne	r1, [r5, #4]
   13000:	cmpne	r1, r0
   13004:	bne	1304c <flatcc_verify_struct_as_root@@Base+0xb8>
   13008:	ldr	r1, [r5]
   1300c:	mov	r0, #18
   13010:	sub	r2, r1, #1
   13014:	cmp	r2, r4
   13018:	bcs	13044 <flatcc_verify_struct_as_root@@Base+0xb0>
   1301c:	adds	r2, r1, r6
   13020:	mov	r0, #10
   13024:	bcs	13044 <flatcc_verify_struct_as_root@@Base+0xb0>
   13028:	mov	r0, #9
   1302c:	cmp	r2, r4
   13030:	bhi	13044 <flatcc_verify_struct_as_root@@Base+0xb0>
   13034:	ldr	r0, [fp, #8]
   13038:	sub	r0, r0, #1
   1303c:	ands	r0, r1, r0
   13040:	movwne	r0, #11
   13044:	sub	sp, fp, #16
   13048:	pop	{r4, r5, r6, r7, fp, pc}
   1304c:	mov	r0, #0
   13050:	mov	r1, r7
   13054:	mov	r2, #4
   13058:	str	r0, [sp, #4]
   1305c:	add	r0, sp, #4
   13060:	bl	10f08 <strncpy@plt>
   13064:	ldr	r1, [sp, #4]
   13068:	ldr	r0, [r5, #4]
   1306c:	subs	r0, r0, r1
   13070:	movwne	r0, #2
   13074:	cmp	r1, #0
   13078:	moveq	r0, r1
   1307c:	sub	sp, fp, #16
   13080:	pop	{r4, r5, r6, r7, fp, pc}

00013084 <flatcc_verify_struct_as_typed_root@@Base>:
   13084:	push	{fp, lr}
   13088:	mov	fp, sp
   1308c:	mov	ip, r0
   13090:	mov	r0, #5
   13094:	tst	ip, #3
   13098:	bne	13108 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   1309c:	mov	r0, #6
   130a0:	cmn	r1, #9
   130a4:	bhi	13108 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   130a8:	mov	r0, #1
   130ac:	cmp	r1, #8
   130b0:	bcc	13108 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   130b4:	cmp	r2, #0
   130b8:	beq	130cc <flatcc_verify_struct_as_typed_root@@Base+0x48>
   130bc:	ldr	lr, [ip, #4]
   130c0:	mov	r0, #2
   130c4:	cmp	lr, r2
   130c8:	bne	13108 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   130cc:	ldr	ip, [ip]
   130d0:	mov	r0, #18
   130d4:	sub	r2, ip, #1
   130d8:	cmp	r2, r1
   130dc:	bcs	13108 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   130e0:	adds	r3, ip, r3
   130e4:	mov	r0, #10
   130e8:	bcs	13108 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   130ec:	mov	r0, #9
   130f0:	cmp	r3, r1
   130f4:	pophi	{fp, pc}
   130f8:	ldr	r0, [fp, #8]
   130fc:	sub	r0, r0, #1
   13100:	ands	r0, ip, r0
   13104:	movwne	r0, #11
   13108:	pop	{fp, pc}

0001310c <flatcc_verify_table_as_root@@Base>:
   1310c:	push	{r4, r5, r6, r7, fp, lr}
   13110:	add	fp, sp, #16
   13114:	sub	sp, sp, #24
   13118:	mov	r4, r0
   1311c:	mov	r0, #5
   13120:	tst	r4, #3
   13124:	bne	13230 <flatcc_verify_table_as_root@@Base+0x124>
   13128:	mov	r6, r1
   1312c:	mov	r0, #6
   13130:	cmn	r1, #9
   13134:	bhi	13230 <flatcc_verify_table_as_root@@Base+0x124>
   13138:	mov	r0, #1
   1313c:	cmp	r6, #8
   13140:	bcc	13230 <flatcc_verify_table_as_root@@Base+0x124>
   13144:	mov	r5, r3
   13148:	mov	r7, r2
   1314c:	cmp	r2, #0
   13150:	beq	13180 <flatcc_verify_table_as_root@@Base+0x74>
   13154:	mov	r0, #0
   13158:	mov	r1, r7
   1315c:	mov	r2, #4
   13160:	str	r0, [sp]
   13164:	mov	r0, sp
   13168:	bl	10f08 <strncpy@plt>
   1316c:	ldr	r0, [sp]
   13170:	cmp	r0, #0
   13174:	ldrne	r1, [r4, #4]
   13178:	cmpne	r1, r0
   1317c:	bne	13238 <flatcc_verify_table_as_root@@Base+0x12c>
   13180:	ldr	r1, [r4]
   13184:	mov	r0, #99	; 0x63
   13188:	str	r0, [sp, #8]
   1318c:	mov	r0, #15
   13190:	tst	r1, #3
   13194:	bne	13230 <flatcc_verify_table_as_root@@Base+0x124>
   13198:	cmp	r1, #0
   1319c:	beq	13230 <flatcc_verify_table_as_root@@Base+0x124>
   131a0:	add	r2, r1, #4
   131a4:	cmp	r2, r6
   131a8:	bhi	13230 <flatcc_verify_table_as_root@@Base+0x124>
   131ac:	str	r1, [sp, #16]
   131b0:	ldr	r0, [r4, r1]
   131b4:	sub	r7, r1, r0
   131b8:	mov	r0, #29
   131bc:	tst	r7, #-2147483647	; 0x80000001
   131c0:	bne	13230 <flatcc_verify_table_as_root@@Base+0x124>
   131c4:	add	r3, r7, #2
   131c8:	mov	r0, #27
   131cc:	cmp	r3, r6
   131d0:	bhi	13230 <flatcc_verify_table_as_root@@Base+0x124>
   131d4:	mov	ip, r4
   131d8:	mov	r0, #30
   131dc:	ldrh	r2, [ip, r7]!
   131e0:	tst	r2, #1
   131e4:	strh	r2, [sp, #22]
   131e8:	bne	13230 <flatcc_verify_table_as_root@@Base+0x124>
   131ec:	add	r7, r7, r2
   131f0:	cmp	r7, r6
   131f4:	bhi	13230 <flatcc_verify_table_as_root@@Base+0x124>
   131f8:	mov	r0, #28
   131fc:	cmp	r2, #4
   13200:	bcc	13230 <flatcc_verify_table_as_root@@Base+0x124>
   13204:	add	r0, r4, r3
   13208:	sub	r1, r6, r1
   1320c:	ldrh	r2, [r0]
   13210:	mov	r0, #20
   13214:	cmp	r1, r2
   13218:	strh	r2, [sp, #20]
   1321c:	bcc	13230 <flatcc_verify_table_as_root@@Base+0x124>
   13220:	mov	r0, sp
   13224:	str	ip, [sp, #12]
   13228:	stm	sp, {r4, r6}
   1322c:	blx	r5
   13230:	sub	sp, fp, #16
   13234:	pop	{r4, r5, r6, r7, fp, pc}
   13238:	mov	r0, #0
   1323c:	mov	r1, r7
   13240:	mov	r2, #4
   13244:	str	r0, [sp]
   13248:	mov	r0, sp
   1324c:	bl	10f08 <strncpy@plt>
   13250:	ldr	r1, [sp]
   13254:	ldr	r0, [r4, #4]
   13258:	subs	r0, r0, r1
   1325c:	movwne	r0, #2
   13260:	cmp	r1, #0
   13264:	moveq	r0, r1
   13268:	sub	sp, fp, #16
   1326c:	pop	{r4, r5, r6, r7, fp, pc}

00013270 <flatcc_verify_table_as_typed_root@@Base>:
   13270:	push	{r4, r5, r6, sl, fp, lr}
   13274:	add	fp, sp, #16
   13278:	sub	sp, sp, #24
   1327c:	mov	ip, #5
   13280:	tst	r0, #3
   13284:	bne	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13288:	mov	ip, #6
   1328c:	cmn	r1, #9
   13290:	bhi	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13294:	mov	ip, #1
   13298:	cmp	r1, #8
   1329c:	bcc	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   132a0:	cmp	r2, #0
   132a4:	beq	132b8 <flatcc_verify_table_as_typed_root@@Base+0x48>
   132a8:	ldr	r6, [r0, #4]
   132ac:	mov	ip, #2
   132b0:	cmp	r6, r2
   132b4:	bne	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   132b8:	ldr	r2, [r0]
   132bc:	mov	r6, #99	; 0x63
   132c0:	mov	ip, #15
   132c4:	str	r6, [sp, #8]
   132c8:	tst	r2, #3
   132cc:	bne	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   132d0:	cmp	r2, #0
   132d4:	beq	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   132d8:	add	r6, r2, #4
   132dc:	cmp	r6, r1
   132e0:	bhi	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   132e4:	str	r2, [sp, #16]
   132e8:	mov	ip, #29
   132ec:	ldr	r6, [r0, r2]
   132f0:	sub	r5, r2, r6
   132f4:	tst	r5, #-2147483647	; 0x80000001
   132f8:	bne	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   132fc:	add	r4, r5, #2
   13300:	mov	ip, #27
   13304:	cmp	r4, r1
   13308:	bhi	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1330c:	mov	lr, r0
   13310:	mov	ip, #30
   13314:	ldrh	r6, [lr, r5]!
   13318:	tst	r6, #1
   1331c:	strh	r6, [sp, #22]
   13320:	bne	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13324:	add	r5, r5, r6
   13328:	cmp	r5, r1
   1332c:	bhi	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13330:	mov	ip, #28
   13334:	cmp	r6, #4
   13338:	bcc	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1333c:	add	r6, r0, r4
   13340:	sub	r2, r1, r2
   13344:	mov	ip, #20
   13348:	ldrh	r4, [r6]
   1334c:	cmp	r2, r4
   13350:	strh	r4, [sp, #20]
   13354:	bcc	1336c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13358:	str	lr, [sp, #12]
   1335c:	stm	sp, {r0, r1}
   13360:	mov	r0, sp
   13364:	blx	r3
   13368:	mov	ip, r0
   1336c:	mov	r0, ip
   13370:	sub	sp, fp, #16
   13374:	pop	{r4, r5, r6, sl, fp, pc}

00013378 <flatcc_verify_struct_as_nested_root@@Base>:
   13378:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1337c:	add	fp, sp, #24
   13380:	sub	sp, sp, #8
   13384:	ldrh	r6, [r0, #22]
   13388:	mov	r4, r3
   1338c:	mov	r3, #4
   13390:	ldr	r9, [fp, #12]
   13394:	add	r3, r3, r1, lsl #1
   13398:	uxth	r7, r3
   1339c:	cmp	r7, r6
   133a0:	bcs	13424 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   133a4:	ldr	r1, [r0, #12]
   133a8:	ldrh	r5, [r1, r7]!
   133ac:	cmp	r5, #0
   133b0:	beq	13424 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   133b4:	ldrh	r3, [r0, #20]
   133b8:	add	r7, r5, #4
   133bc:	cmp	r7, r3
   133c0:	bhi	1343c <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   133c4:	ldr	r3, [r0, #16]
   133c8:	add	r6, r3, r5
   133cc:	tst	r6, #3
   133d0:	bne	1343c <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   133d4:	cmp	r6, #0
   133d8:	beq	134f8 <flatcc_verify_struct_as_nested_root@@Base+0x180>
   133dc:	ldr	r3, [r0]
   133e0:	ldr	r7, [r3, r6]
   133e4:	add	r7, r7, r6
   133e8:	cmp	r7, r6
   133ec:	bls	1343c <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   133f0:	ldr	r6, [r0, #4]
   133f4:	add	r5, r7, #4
   133f8:	cmp	r5, r6
   133fc:	bhi	1343c <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   13400:	ands	r5, r5, #3
   13404:	bne	1343c <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   13408:	ldr	r3, [r3, r7]
   1340c:	sub	r6, r6, #4
   13410:	sub	r6, r6, r7
   13414:	mul	r3, r3, r9
   13418:	cmp	r6, r3
   1341c:	bcc	1343c <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   13420:	b	134f8 <flatcc_verify_struct_as_nested_root@@Base+0x180>
   13424:	cmp	r2, #0
   13428:	beq	134e4 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   1342c:	cmp	r7, r6
   13430:	bcs	134d0 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   13434:	ldr	r1, [r0, #12]
   13438:	uxtah	r1, r1, r3
   1343c:	ldrh	r1, [r1]
   13440:	cmp	r1, #0
   13444:	beq	134d0 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   13448:	ldrh	r3, [r0, #20]
   1344c:	add	r7, r1, #4
   13450:	mov	r2, #13
   13454:	cmp	r7, r3
   13458:	bhi	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   1345c:	ldr	r2, [r0, #16]
   13460:	add	r7, r2, r1
   13464:	mov	r2, #12
   13468:	tst	r7, #3
   1346c:	bne	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   13470:	cmp	r7, #0
   13474:	beq	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x258>
   13478:	ldr	r1, [r0]
   1347c:	ldr	r2, [r1, r7]
   13480:	add	r3, r2, r7
   13484:	mov	r2, #16
   13488:	cmp	r3, r7
   1348c:	bls	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   13490:	ldr	r0, [r0, #4]
   13494:	add	r7, r3, #4
   13498:	cmp	r7, r0
   1349c:	bhi	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   134a0:	ands	r7, r7, #3
   134a4:	bne	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   134a8:	ldr	r1, [r1, r3]
   134ac:	sub	r0, r0, #4
   134b0:	mov	r2, #0
   134b4:	sub	r0, r0, r3
   134b8:	mul	r1, r1, r9
   134bc:	cmp	r0, r1
   134c0:	movwcc	r2, #26
   134c4:	mov	r0, r2
   134c8:	sub	sp, fp, #24
   134cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   134d0:	cmp	r2, #0
   134d4:	movwne	r2, #4
   134d8:	mov	r0, r2
   134dc:	sub	sp, fp, #24
   134e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   134e4:	mov	r2, #0
   134e8:	cmp	r7, r6
   134ec:	bcs	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   134f0:	ldr	r1, [r0, #12]
   134f4:	uxtah	r1, r1, r3
   134f8:	ldrh	r1, [r1]
   134fc:	mov	r2, #0
   13500:	cmp	r1, #0
   13504:	ldrne	r3, [r0]
   13508:	ldrne	r0, [r0, #16]
   1350c:	addne	r0, r3, r0
   13510:	addsne	r0, r0, r1
   13514:	bne	13524 <flatcc_verify_struct_as_nested_root@@Base+0x1ac>
   13518:	mov	r0, r2
   1351c:	sub	sp, fp, #24
   13520:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13524:	ldr	r7, [r0]
   13528:	mov	r2, #5
   1352c:	ldr	r8, [r7, r0]!
   13530:	add	r6, r7, #4
   13534:	tst	r6, #3
   13538:	bne	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   1353c:	mov	r2, #6
   13540:	cmn	r8, #9
   13544:	bhi	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   13548:	mov	r2, #1
   1354c:	cmp	r8, #8
   13550:	bcc	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   13554:	cmp	r4, #0
   13558:	beq	13588 <flatcc_verify_struct_as_nested_root@@Base+0x210>
   1355c:	mov	r0, #0
   13560:	mov	r1, r4
   13564:	mov	r2, #4
   13568:	str	r0, [sp]
   1356c:	mov	r0, sp
   13570:	bl	10f08 <strncpy@plt>
   13574:	ldr	r0, [sp]
   13578:	cmp	r0, #0
   1357c:	ldrne	r1, [r7, #8]
   13580:	cmpne	r1, r0
   13584:	bne	135e0 <flatcc_verify_struct_as_nested_root@@Base+0x268>
   13588:	ldr	r0, [r6]
   1358c:	mov	r2, #18
   13590:	sub	r1, r0, #1
   13594:	cmp	r1, r8
   13598:	bcs	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   1359c:	ldr	r1, [fp, #8]
   135a0:	mov	r2, #10
   135a4:	adds	r1, r0, r1
   135a8:	bcs	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   135ac:	mov	r2, #9
   135b0:	cmp	r1, r8
   135b4:	bhi	13518 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   135b8:	sub	r1, r9, #1
   135bc:	ands	r2, r0, r1
   135c0:	movwne	r2, #11
   135c4:	mov	r0, r2
   135c8:	sub	sp, fp, #24
   135cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135d0:	mov	r2, #0
   135d4:	mov	r0, r2
   135d8:	sub	sp, fp, #24
   135dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135e0:	mov	r0, #0
   135e4:	mov	r1, r4
   135e8:	mov	r2, #4
   135ec:	str	r0, [sp, #4]
   135f0:	add	r0, sp, #4
   135f4:	bl	10f08 <strncpy@plt>
   135f8:	ldr	r0, [sp, #4]
   135fc:	ldr	r1, [r7, #8]
   13600:	subs	r2, r1, r0
   13604:	movwne	r2, #2
   13608:	cmp	r0, #0
   1360c:	moveq	r2, r0
   13610:	mov	r0, r2
   13614:	sub	sp, fp, #24
   13618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0001361c <flatcc_verify_table_as_nested_root@@Base>:
   1361c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13620:	add	fp, sp, #24
   13624:	sub	sp, sp, #24
   13628:	mov	r4, r0
   1362c:	mov	r0, #4
   13630:	ldr	ip, [fp, #8]
   13634:	mov	r5, r3
   13638:	ldrh	r6, [r4, #22]
   1363c:	add	r3, r0, r1, lsl #1
   13640:	uxth	r7, r3
   13644:	cmp	r7, r6
   13648:	bcs	136cc <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1364c:	ldr	r1, [r4, #12]
   13650:	ldrh	r0, [r1, r7]!
   13654:	cmp	r0, #0
   13658:	beq	136cc <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1365c:	ldrh	r3, [r4, #20]
   13660:	add	r7, r0, #4
   13664:	cmp	r7, r3
   13668:	bhi	136e4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1366c:	ldr	r3, [r4, #16]
   13670:	add	r0, r3, r0
   13674:	tst	r0, #3
   13678:	bne	136e4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1367c:	cmp	r0, #0
   13680:	beq	137a0 <flatcc_verify_table_as_nested_root@@Base+0x184>
   13684:	ldr	r3, [r4]
   13688:	ldr	r7, [r3, r0]
   1368c:	add	r7, r7, r0
   13690:	cmp	r7, r0
   13694:	bls	136e4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13698:	ldr	r0, [r4, #4]
   1369c:	add	r6, r7, #4
   136a0:	cmp	r6, r0
   136a4:	bhi	136e4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   136a8:	ands	r6, r6, #3
   136ac:	bne	136e4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   136b0:	ldr	r3, [r3, r7]
   136b4:	sub	r0, r0, #4
   136b8:	sub	r0, r0, r7
   136bc:	mul	r3, r3, ip
   136c0:	cmp	r0, r3
   136c4:	bcc	136e4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   136c8:	b	137a0 <flatcc_verify_table_as_nested_root@@Base+0x184>
   136cc:	cmp	r2, #0
   136d0:	beq	1378c <flatcc_verify_table_as_nested_root@@Base+0x170>
   136d4:	cmp	r7, r6
   136d8:	bcs	13778 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   136dc:	ldr	r0, [r4, #12]
   136e0:	uxtah	r1, r0, r3
   136e4:	ldrh	r0, [r1]
   136e8:	cmp	r0, #0
   136ec:	beq	13778 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   136f0:	ldrh	r1, [r4, #20]
   136f4:	add	r3, r0, #4
   136f8:	mov	r2, #13
   136fc:	cmp	r3, r1
   13700:	bhi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13704:	ldr	r1, [r4, #16]
   13708:	mov	r2, #12
   1370c:	add	r0, r1, r0
   13710:	tst	r0, #3
   13714:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13718:	cmp	r0, #0
   1371c:	beq	138fc <flatcc_verify_table_as_nested_root@@Base+0x2e0>
   13720:	ldr	r1, [r4]
   13724:	ldr	r2, [r1, r0]
   13728:	add	r3, r2, r0
   1372c:	mov	r2, #16
   13730:	cmp	r3, r0
   13734:	bls	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13738:	ldr	r0, [r4, #4]
   1373c:	add	r7, r3, #4
   13740:	cmp	r7, r0
   13744:	bhi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13748:	ands	r7, r7, #3
   1374c:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13750:	ldr	r1, [r1, r3]
   13754:	sub	r0, r0, #4
   13758:	mov	r2, #0
   1375c:	sub	r0, r0, r3
   13760:	mul	r1, r1, ip
   13764:	cmp	r0, r1
   13768:	movwcc	r2, #26
   1376c:	mov	r0, r2
   13770:	sub	sp, fp, #24
   13774:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13778:	cmp	r2, #0
   1377c:	movwne	r2, #4
   13780:	mov	r0, r2
   13784:	sub	sp, fp, #24
   13788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1378c:	mov	r2, #0
   13790:	cmp	r7, r6
   13794:	bcs	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13798:	ldr	r0, [r4, #12]
   1379c:	uxtah	r1, r0, r3
   137a0:	ldrh	r0, [r1]
   137a4:	mov	r2, #0
   137a8:	cmp	r0, #0
   137ac:	ldrne	r1, [r4]
   137b0:	ldrne	r3, [r4, #16]
   137b4:	addne	r1, r1, r3
   137b8:	addsne	r0, r1, r0
   137bc:	bne	137cc <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   137c0:	mov	r0, r2
   137c4:	sub	sp, fp, #24
   137c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137cc:	ldr	r6, [r0]
   137d0:	mov	r2, #5
   137d4:	ldr	r8, [r6, r0]!
   137d8:	add	r7, r6, #4
   137dc:	tst	r7, #3
   137e0:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   137e4:	mov	r2, #6
   137e8:	cmn	r8, #9
   137ec:	bhi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   137f0:	mov	r2, #1
   137f4:	cmp	r8, #8
   137f8:	bcc	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   137fc:	cmp	r5, #0
   13800:	beq	13830 <flatcc_verify_table_as_nested_root@@Base+0x214>
   13804:	mov	r0, #0
   13808:	mov	r1, r5
   1380c:	mov	r2, #4
   13810:	str	r0, [sp]
   13814:	mov	r0, sp
   13818:	bl	10f08 <strncpy@plt>
   1381c:	ldr	r0, [sp]
   13820:	cmp	r0, #0
   13824:	ldrne	r1, [r6, #8]
   13828:	cmpne	r1, r0
   1382c:	bne	1390c <flatcc_verify_table_as_nested_root@@Base+0x2f0>
   13830:	ldr	r1, [r4, #8]
   13834:	ldr	r0, [r7]
   13838:	subs	r1, r1, #1
   1383c:	str	r1, [sp, #8]
   13840:	beq	13944 <flatcc_verify_table_as_nested_root@@Base+0x328>
   13844:	mov	r2, #15
   13848:	tst	r0, #3
   1384c:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13850:	cmp	r0, #0
   13854:	beq	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13858:	add	r1, r0, #4
   1385c:	cmp	r1, r8
   13860:	bhi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   13864:	str	r0, [sp, #16]
   13868:	mov	r2, #29
   1386c:	ldr	r1, [r7, r0]
   13870:	sub	r6, r0, r1
   13874:	tst	r6, #-2147483647	; 0x80000001
   13878:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   1387c:	add	r3, r6, #2
   13880:	mov	r2, #27
   13884:	cmp	r3, r8
   13888:	bhi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   1388c:	mov	r1, r7
   13890:	mov	r2, #30
   13894:	ldrh	r5, [r1, r6]!
   13898:	tst	r5, #1
   1389c:	strh	r5, [sp, #22]
   138a0:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   138a4:	add	r6, r6, r5
   138a8:	cmp	r6, r8
   138ac:	bhi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   138b0:	mov	r2, #28
   138b4:	cmp	r5, #4
   138b8:	bcc	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   138bc:	add	r2, r7, r3
   138c0:	sub	r0, r8, r0
   138c4:	ldrh	r3, [r2]
   138c8:	mov	r2, #20
   138cc:	cmp	r0, r3
   138d0:	strh	r3, [sp, #20]
   138d4:	bcc	137c0 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   138d8:	ldr	r2, [fp, #12]
   138dc:	mov	r0, sp
   138e0:	str	r1, [sp, #12]
   138e4:	stm	sp, {r7, r8}
   138e8:	blx	r2
   138ec:	mov	r2, r0
   138f0:	mov	r0, r2
   138f4:	sub	sp, fp, #24
   138f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138fc:	mov	r2, #0
   13900:	mov	r0, r2
   13904:	sub	sp, fp, #24
   13908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1390c:	mov	r0, #0
   13910:	mov	r1, r5
   13914:	mov	r2, #4
   13918:	str	r0, [sp]
   1391c:	mov	r0, sp
   13920:	bl	10f08 <strncpy@plt>
   13924:	ldr	r1, [sp]
   13928:	ldr	r0, [r6, #8]
   1392c:	subs	r0, r0, r1
   13930:	movwne	r0, #2
   13934:	cmp	r1, #0
   13938:	moveq	r0, r1
   1393c:	sub	sp, fp, #24
   13940:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13944:	mov	r2, #3
   13948:	mov	r0, r2
   1394c:	sub	sp, fp, #24
   13950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013954 <flatcc_verify_union_field@@Base>:
   13954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13958:	add	fp, sp, #28
   1395c:	sub	sp, sp, #28
   13960:	ldrh	r4, [r0, #22]
   13964:	mov	r7, #2
   13968:	lsl	r5, r1, #1
   1396c:	add	r7, r7, r1, lsl #1
   13970:	uxth	r6, r7
   13974:	cmp	r6, r4
   13978:	bcs	13a74 <flatcc_verify_union_field@@Base+0x120>
   1397c:	ldr	r6, [r0, #12]
   13980:	uxtah	r1, r6, r7
   13984:	ldrh	ip, [r1]
   13988:	cmp	ip, #0
   1398c:	beq	13a74 <flatcc_verify_union_field@@Base+0x120>
   13990:	ldrh	r7, [r0, #20]
   13994:	mov	r1, #13
   13998:	cmp	ip, r7
   1399c:	bcs	13a9c <flatcc_verify_union_field@@Base+0x148>
   139a0:	add	r7, r5, #4
   139a4:	ldr	lr, [r0]
   139a8:	ldr	r9, [r0, #16]
   139ac:	mov	r1, #1
   139b0:	uxth	sl, r7
   139b4:	cmp	sl, r4
   139b8:	uxtahcc	r1, r6, r7
   139bc:	ldrhcc	r1, [r1]
   139c0:	add	r8, lr, r9
   139c4:	ldrb	r5, [r8, ip]
   139c8:	clzcc	r1, r1
   139cc:	lsrcc	r1, r1, #5
   139d0:	cmp	r1, #0
   139d4:	moveq	r1, #24
   139d8:	cmpeq	r5, #0
   139dc:	beq	13a9c <flatcc_verify_union_field@@Base+0x148>
   139e0:	mov	r1, #0
   139e4:	cmp	r5, #0
   139e8:	beq	13a9c <flatcc_verify_union_field@@Base+0x148>
   139ec:	cmp	sl, r4
   139f0:	bcs	13ac0 <flatcc_verify_union_field@@Base+0x16c>
   139f4:	uxtah	r1, r6, r7
   139f8:	ldrh	r4, [r1]
   139fc:	cmp	r4, #0
   13a00:	beq	13ac0 <flatcc_verify_union_field@@Base+0x16c>
   13a04:	ldrh	r1, [r0, #20]
   13a08:	add	r2, r4, #4
   13a0c:	cmp	r2, r1
   13a10:	mov	r1, #13
   13a14:	bhi	13a9c <flatcc_verify_union_field@@Base+0x148>
   13a18:	add	r2, r9, r4
   13a1c:	mov	r1, #12
   13a20:	tst	r2, #3
   13a24:	bne	13a9c <flatcc_verify_union_field@@Base+0x148>
   13a28:	cmp	r2, #0
   13a2c:	mov	r1, #0
   13a30:	beq	13a9c <flatcc_verify_union_field@@Base+0x148>
   13a34:	str	lr, [sp, #4]
   13a38:	ldr	r1, [r0, #4]
   13a3c:	ldr	r0, [r0, #8]
   13a40:	str	r1, [sp, #8]
   13a44:	str	r2, [sp, #20]
   13a48:	str	r0, [sp, #12]
   13a4c:	ldr	r0, [lr, r2]
   13a50:	str	r0, [sp, #24]
   13a54:	ldrb	r0, [r8, ip]
   13a58:	strb	r0, [sp, #16]
   13a5c:	add	r0, sp, #4
   13a60:	blx	r3
   13a64:	mov	r1, r0
   13a68:	mov	r0, r1
   13a6c:	sub	sp, fp, #28
   13a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a74:	add	r1, r5, #4
   13a78:	uxth	r3, r1
   13a7c:	cmp	r3, r4
   13a80:	bcs	13aa8 <flatcc_verify_union_field@@Base+0x154>
   13a84:	ldr	r0, [r0, #12]
   13a88:	uxtah	r0, r0, r1
   13a8c:	mov	r1, #23
   13a90:	ldrh	r0, [r0]
   13a94:	cmp	r0, #0
   13a98:	beq	13aa8 <flatcc_verify_union_field@@Base+0x154>
   13a9c:	mov	r0, r1
   13aa0:	sub	sp, fp, #28
   13aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa8:	cmp	r2, #0
   13aac:	movwne	r2, #21
   13ab0:	mov	r1, r2
   13ab4:	mov	r0, r1
   13ab8:	sub	sp, fp, #28
   13abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac0:	cmp	r2, #0
   13ac4:	movwne	r2, #4
   13ac8:	mov	r1, r2
   13acc:	mov	r0, r1
   13ad0:	sub	sp, fp, #28
   13ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013ad8 <flatcc_verify_union_vector_field@@Base>:
   13ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13adc:	add	fp, sp, #28
   13ae0:	sub	sp, sp, #28
   13ae4:	mov	r9, r3
   13ae8:	mov	r3, #2
   13aec:	lsl	lr, r1, #1
   13af0:	add	r6, r3, r1, lsl #1
   13af4:	ldrh	r3, [r0, #22]
   13af8:	uxth	r4, r6
   13afc:	cmp	r4, r3
   13b00:	bcs	13b18 <flatcc_verify_union_vector_field@@Base+0x40>
   13b04:	ldr	r7, [r0, #12]
   13b08:	mov	r1, r7
   13b0c:	ldrh	r5, [r1, r4]!
   13b10:	cmp	r5, #0
   13b14:	bne	13b64 <flatcc_verify_union_vector_field@@Base+0x8c>
   13b18:	add	r1, lr, #4
   13b1c:	uxth	r7, r1
   13b20:	cmp	r7, r3
   13b24:	bcs	13bd0 <flatcc_verify_union_vector_field@@Base+0xf8>
   13b28:	cmp	r2, #0
   13b2c:	beq	13b48 <flatcc_verify_union_vector_field@@Base+0x70>
   13b30:	ldr	r7, [r0, #12]
   13b34:	uxtah	r1, r7, r1
   13b38:	ldrh	r7, [r1]
   13b3c:	mov	r1, #22
   13b40:	cmp	r7, #0
   13b44:	beq	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13b48:	cmp	r4, r3
   13b4c:	bcs	13be0 <flatcc_verify_union_vector_field@@Base+0x108>
   13b50:	ldr	r7, [r0, #12]
   13b54:	mov	r1, r7
   13b58:	ldrh	r5, [r1, r4]!
   13b5c:	cmp	r5, #0
   13b60:	beq	13be0 <flatcc_verify_union_vector_field@@Base+0x108>
   13b64:	ldrh	r6, [r0, #20]
   13b68:	add	r4, r5, #4
   13b6c:	cmp	r4, r6
   13b70:	bhi	13bf8 <flatcc_verify_union_vector_field@@Base+0x120>
   13b74:	ldr	r6, [r0, #16]
   13b78:	add	r4, r6, r5
   13b7c:	tst	r4, #3
   13b80:	bne	13bf8 <flatcc_verify_union_vector_field@@Base+0x120>
   13b84:	cmp	r4, #0
   13b88:	beq	13c9c <flatcc_verify_union_vector_field@@Base+0x1c4>
   13b8c:	ldr	r6, [r0]
   13b90:	ldr	r5, [r6, r4]
   13b94:	add	r5, r5, r4
   13b98:	cmp	r5, r4
   13b9c:	bls	13bf8 <flatcc_verify_union_vector_field@@Base+0x120>
   13ba0:	ldr	ip, [r0, #4]
   13ba4:	add	r4, r5, #4
   13ba8:	cmp	r4, ip
   13bac:	bhi	13bf8 <flatcc_verify_union_vector_field@@Base+0x120>
   13bb0:	ands	r4, r4, #3
   13bb4:	bne	13bf8 <flatcc_verify_union_vector_field@@Base+0x120>
   13bb8:	ldr	r4, [r6, r5]
   13bbc:	sub	r6, ip, #4
   13bc0:	sub	r6, r6, r5
   13bc4:	cmp	r6, r4
   13bc8:	bcc	13bf8 <flatcc_verify_union_vector_field@@Base+0x120>
   13bcc:	b	13c9c <flatcc_verify_union_vector_field@@Base+0x1c4>
   13bd0:	mov	r1, #22
   13bd4:	cmp	r2, #0
   13bd8:	bne	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13bdc:	b	13b48 <flatcc_verify_union_vector_field@@Base+0x70>
   13be0:	cmp	r2, #0
   13be4:	beq	13c88 <flatcc_verify_union_vector_field@@Base+0x1b0>
   13be8:	cmp	r4, r3
   13bec:	bcs	13e04 <flatcc_verify_union_vector_field@@Base+0x32c>
   13bf0:	ldr	r1, [r0, #12]
   13bf4:	uxtah	r1, r1, r6
   13bf8:	ldrh	r3, [r1]
   13bfc:	cmp	r3, #0
   13c00:	beq	13e04 <flatcc_verify_union_vector_field@@Base+0x32c>
   13c04:	ldrh	r2, [r0, #20]
   13c08:	add	r7, r3, #4
   13c0c:	mov	r1, #13
   13c10:	cmp	r7, r2
   13c14:	bhi	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13c18:	ldr	r1, [r0, #16]
   13c1c:	add	r7, r1, r3
   13c20:	mov	r1, #12
   13c24:	tst	r7, #3
   13c28:	bne	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13c2c:	cmp	r7, #0
   13c30:	beq	13e1c <flatcc_verify_union_vector_field@@Base+0x344>
   13c34:	ldr	r2, [r0]
   13c38:	ldr	r1, [r2, r7]
   13c3c:	add	r3, r1, r7
   13c40:	mov	r1, #16
   13c44:	cmp	r3, r7
   13c48:	bls	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13c4c:	ldr	r0, [r0, #4]
   13c50:	add	r7, r3, #4
   13c54:	cmp	r7, r0
   13c58:	bhi	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13c5c:	ands	r7, r7, #3
   13c60:	bne	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13c64:	ldr	r2, [r2, r3]
   13c68:	sub	r0, r0, #4
   13c6c:	mov	r1, #0
   13c70:	sub	r0, r0, r3
   13c74:	cmp	r0, r2
   13c78:	movwcc	r1, #26
   13c7c:	mov	r0, r1
   13c80:	sub	sp, fp, #28
   13c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c88:	mov	r1, #0
   13c8c:	cmp	r4, r3
   13c90:	bcs	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13c94:	ldr	r7, [r0, #12]
   13c98:	uxtah	r1, r7, r6
   13c9c:	ldrh	r5, [r1]
   13ca0:	mov	r1, #0
   13ca4:	cmp	r5, #0
   13ca8:	ldrne	r8, [r0]
   13cac:	ldrne	r6, [r0, #16]
   13cb0:	addne	r4, r8, r6
   13cb4:	addsne	ip, r4, r5
   13cb8:	beq	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13cbc:	add	r1, lr, #4
   13cc0:	uxth	r5, r1
   13cc4:	cmp	r5, r3
   13cc8:	bcs	13e04 <flatcc_verify_union_vector_field@@Base+0x32c>
   13ccc:	uxtah	r1, r7, r1
   13cd0:	ldrh	r3, [r1]
   13cd4:	cmp	r3, #0
   13cd8:	beq	13e04 <flatcc_verify_union_vector_field@@Base+0x32c>
   13cdc:	ldrh	r2, [r0, #20]
   13ce0:	add	r7, r3, #4
   13ce4:	mov	r1, #13
   13ce8:	cmp	r7, r2
   13cec:	bhi	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13cf0:	add	r4, r6, r3
   13cf4:	mov	r1, #12
   13cf8:	tst	r4, #3
   13cfc:	bne	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d00:	cmp	r4, #0
   13d04:	mov	r1, #0
   13d08:	beq	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d0c:	ldr	r7, [r0, #8]
   13d10:	cmp	r7, #1
   13d14:	blt	13e2c <flatcc_verify_union_vector_field@@Base+0x354>
   13d18:	ldr	r2, [r8, r4]
   13d1c:	mov	r1, #16
   13d20:	add	r5, r2, r4
   13d24:	cmp	r5, r4
   13d28:	bls	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d2c:	ldr	r0, [r0, #4]
   13d30:	add	r4, r5, #4
   13d34:	cmp	r4, r0
   13d38:	bhi	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d3c:	ands	r4, r4, #3
   13d40:	bne	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d44:	ldr	r4, [r8, r5]
   13d48:	mov	r1, #25
   13d4c:	cmn	r4, #-1073741823	; 0xc0000001
   13d50:	bhi	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d54:	sub	r1, r0, #4
   13d58:	sub	r5, r1, r5
   13d5c:	mov	r1, #26
   13d60:	cmp	r5, r4, lsl #2
   13d64:	bcc	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d68:	ldr	r5, [ip]
   13d6c:	mov	r1, #34	; 0x22
   13d70:	ldr	sl, [r5, ip]!
   13d74:	cmp	r4, sl
   13d78:	bne	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13d7c:	cmp	sl, #0
   13d80:	sub	r1, r7, #1
   13d84:	str	r0, [sp, #8]
   13d88:	str	r8, [sp, #4]
   13d8c:	str	r1, [sp, #12]
   13d90:	beq	13e3c <flatcc_verify_union_vector_field@@Base+0x364>
   13d94:	add	r0, r2, r6
   13d98:	add	r7, r5, #4
   13d9c:	mov	r5, #0
   13da0:	add	r4, sp, #4
   13da4:	add	r0, r0, r3
   13da8:	add	r6, r0, #4
   13dac:	ldr	r1, [r8, r6]
   13db0:	ldrb	r0, [r7, r5]
   13db4:	cmp	r1, #0
   13db8:	beq	13de4 <flatcc_verify_union_vector_field@@Base+0x30c>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13e4c <flatcc_verify_union_vector_field@@Base+0x374>
   13dc4:	str	r6, [sp, #20]
   13dc8:	strb	r0, [sp, #16]
   13dcc:	mov	r0, r4
   13dd0:	str	r1, [sp, #24]
   13dd4:	blx	r9
   13dd8:	cmp	r0, #0
   13ddc:	beq	13dec <flatcc_verify_union_vector_field@@Base+0x314>
   13de0:	b	13e5c <flatcc_verify_union_vector_field@@Base+0x384>
   13de4:	cmp	r0, #0
   13de8:	bne	13e74 <flatcc_verify_union_vector_field@@Base+0x39c>
   13dec:	add	r5, r5, #1
   13df0:	add	r6, r6, #4
   13df4:	mov	r1, #0
   13df8:	cmp	r5, sl
   13dfc:	bcc	13dac <flatcc_verify_union_vector_field@@Base+0x2d4>
   13e00:	b	13e10 <flatcc_verify_union_vector_field@@Base+0x338>
   13e04:	cmp	r2, #0
   13e08:	movwne	r2, #4
   13e0c:	mov	r1, r2
   13e10:	mov	r0, r1
   13e14:	sub	sp, fp, #28
   13e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e1c:	mov	r1, #0
   13e20:	mov	r0, r1
   13e24:	sub	sp, fp, #28
   13e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e2c:	mov	r1, #3
   13e30:	mov	r0, r1
   13e34:	sub	sp, fp, #28
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e3c:	mov	r1, #0
   13e40:	mov	r0, r1
   13e44:	sub	sp, fp, #28
   13e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e4c:	mov	r1, #33	; 0x21
   13e50:	mov	r0, r1
   13e54:	sub	sp, fp, #28
   13e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e5c:	add	r0, sp, #4
   13e60:	blx	r9
   13e64:	mov	r1, r0
   13e68:	mov	r0, r1
   13e6c:	sub	sp, fp, #28
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	mov	r1, #32
   13e78:	mov	r0, r1
   13e7c:	sub	sp, fp, #28
   13e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013e84 <__libc_csu_init@@Base>:
   13e84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e88:	mov	r7, r0
   13e8c:	ldr	r6, [pc, #72]	; 13edc <__libc_csu_init@@Base+0x58>
   13e90:	ldr	r5, [pc, #72]	; 13ee0 <__libc_csu_init@@Base+0x5c>
   13e94:	add	r6, pc, r6
   13e98:	add	r5, pc, r5
   13e9c:	sub	r6, r6, r5
   13ea0:	mov	r8, r1
   13ea4:	mov	r9, r2
   13ea8:	bl	10e34 <strcmp@plt-0x20>
   13eac:	asrs	r6, r6, #2
   13eb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13eb4:	mov	r4, #0
   13eb8:	add	r4, r4, #1
   13ebc:	ldr	r3, [r5], #4
   13ec0:	mov	r2, r9
   13ec4:	mov	r1, r8
   13ec8:	mov	r0, r7
   13ecc:	blx	r3
   13ed0:	cmp	r6, r4
   13ed4:	bne	13eb8 <__libc_csu_init@@Base+0x34>
   13ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13edc:	andeq	r1, r1, r0, ror r0
   13ee0:	andeq	r1, r1, r8, rrx

00013ee4 <__libc_csu_fini@@Base>:
   13ee4:	bx	lr

Disassembly of section .fini:

00013ee8 <.fini>:
   13ee8:	push	{r3, lr}
   13eec:	pop	{r3, pc}
