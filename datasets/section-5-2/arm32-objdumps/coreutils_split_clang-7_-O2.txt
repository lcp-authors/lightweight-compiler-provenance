
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011358 <.init>:
   11358:	push	{r3, lr}
   1135c:	bl	1175c <__assert_fail@plt+0x48>
   11360:	pop	{r3, pc}

Disassembly of section .plt:

00011364 <fdopen@plt-0x14>:
   11364:	push	{lr}		; (str lr, [sp, #-4]!)
   11368:	ldr	lr, [pc, #4]	; 11374 <fdopen@plt-0x4>
   1136c:	add	lr, pc, lr
   11370:	ldr	pc, [lr, #8]!
   11374:	andeq	r9, r1, ip, lsl #25

00011378 <fdopen@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3212]!	; 0xc8c

00011384 <calloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3204]!	; 0xc84

00011390 <fputs_unlocked@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3196]!	; 0xc7c

0001139c <raise@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3188]!	; 0xc74

000113a8 <strcmp@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113b4 <strtol@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3172]!	; 0xc64

000113c0 <read@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113cc <fflush@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3156]!	; 0xc54

000113d8 <sigprocmask@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113e4 <memmove@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3140]!	; 0xc44

000113f0 <free@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113fc <_exit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3124]!	; 0xc34

00011408 <memcpy@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3116]!	; 0xc2c

00011414 <__strtoull_internal@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3108]!	; 0xc24

00011420 <mbsinit@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3100]!	; 0xc1c

0001142c <ftruncate64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3092]!	; 0xc14

00011438 <fwrite_unlocked@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3084]!	; 0xc0c

00011444 <memcmp@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3076]!	; 0xc04

00011450 <dcgettext@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3068]!	; 0xbfc

0001145c <dup2@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3060]!	; 0xbf4

00011468 <realloc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3052]!	; 0xbec

00011474 <textdomain@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011480 <rawmemchr@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3036]!	; 0xbdc

0001148c <iswprint@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3028]!	; 0xbd4

00011498 <__fxstat64@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114a4 <sigaction@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3012]!	; 0xbc4

000114b0 <fwrite@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114bc <lseek64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114c8 <waitpid@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #2988]!	; 0xbac

000114d4 <__ctype_get_mb_cur_max@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #2980]!	; 0xba4

000114e0 <strcpy@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114ec <__fpending@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #102400	; 0x19000
   114f4:	ldr	pc, [ip, #2964]!	; 0xb94

000114f8 <mbrtowc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #102400	; 0x19000
   11500:	ldr	pc, [ip, #2956]!	; 0xb8c

00011504 <error@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #102400	; 0x19000
   1150c:	ldr	pc, [ip, #2948]!	; 0xb84

00011510 <open64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #102400	; 0x19000
   11518:	ldr	pc, [ip, #2940]!	; 0xb7c

0001151c <getenv@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #102400	; 0x19000
   11524:	ldr	pc, [ip, #2932]!	; 0xb74

00011528 <malloc@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #102400	; 0x19000
   11530:	ldr	pc, [ip, #2924]!	; 0xb6c

00011534 <sigaddset@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #102400	; 0x19000
   1153c:	ldr	pc, [ip, #2916]!	; 0xb64

00011540 <__libc_start_main@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #102400	; 0x19000
   11548:	ldr	pc, [ip, #2908]!	; 0xb5c

0001154c <__freading@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #102400	; 0x19000
   11554:	ldr	pc, [ip, #2900]!	; 0xb54

00011558 <__gmon_start__@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #102400	; 0x19000
   11560:	ldr	pc, [ip, #2892]!	; 0xb4c

00011564 <getopt_long@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #102400	; 0x19000
   1156c:	ldr	pc, [ip, #2884]!	; 0xb44

00011570 <__ctype_b_loc@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #102400	; 0x19000
   11578:	ldr	pc, [ip, #2876]!	; 0xb3c

0001157c <exit@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #102400	; 0x19000
   11584:	ldr	pc, [ip, #2868]!	; 0xb34

00011588 <strlen@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #102400	; 0x19000
   11590:	ldr	pc, [ip, #2860]!	; 0xb2c

00011594 <__libc_current_sigrtmax@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #102400	; 0x19000
   1159c:	ldr	pc, [ip, #2852]!	; 0xb24

000115a0 <strchr@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #102400	; 0x19000
   115a8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115ac <setenv@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #102400	; 0x19000
   115b4:	ldr	pc, [ip, #2836]!	; 0xb14

000115b8 <memrchr@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #102400	; 0x19000
   115c0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115c4 <getpagesize@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #102400	; 0x19000
   115cc:	ldr	pc, [ip, #2820]!	; 0xb04

000115d0 <__errno_location@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #102400	; 0x19000
   115d8:	ldr	pc, [ip, #2812]!	; 0xafc

000115dc <__sprintf_chk@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #102400	; 0x19000
   115e4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115e8 <__cxa_atexit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #102400	; 0x19000
   115f0:	ldr	pc, [ip, #2796]!	; 0xaec

000115f4 <memset@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #102400	; 0x19000
   115fc:	ldr	pc, [ip, #2788]!	; 0xae4

00011600 <__printf_chk@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #102400	; 0x19000
   11608:	ldr	pc, [ip, #2780]!	; 0xadc

0001160c <write@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #102400	; 0x19000
   11614:	ldr	pc, [ip, #2772]!	; 0xad4

00011618 <fileno@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #102400	; 0x19000
   11620:	ldr	pc, [ip, #2764]!	; 0xacc

00011624 <__fprintf_chk@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #102400	; 0x19000
   1162c:	ldr	pc, [ip, #2756]!	; 0xac4

00011630 <memchr@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #102400	; 0x19000
   11638:	ldr	pc, [ip, #2748]!	; 0xabc

0001163c <fclose@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #102400	; 0x19000
   11644:	ldr	pc, [ip, #2740]!	; 0xab4

00011648 <pipe@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #102400	; 0x19000
   11650:	ldr	pc, [ip, #2732]!	; 0xaac

00011654 <fseeko64@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #102400	; 0x19000
   1165c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011660 <fcntl64@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #102400	; 0x19000
   11668:	ldr	pc, [ip, #2716]!	; 0xa9c

0001166c <setlocale@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #102400	; 0x19000
   11674:	ldr	pc, [ip, #2708]!	; 0xa94

00011678 <sigemptyset@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #102400	; 0x19000
   11680:	ldr	pc, [ip, #2700]!	; 0xa8c

00011684 <fork@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #102400	; 0x19000
   1168c:	ldr	pc, [ip, #2692]!	; 0xa84

00011690 <execl@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #102400	; 0x19000
   11698:	ldr	pc, [ip, #2684]!	; 0xa7c

0001169c <strrchr@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #102400	; 0x19000
   116a4:	ldr	pc, [ip, #2676]!	; 0xa74

000116a8 <nl_langinfo@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #102400	; 0x19000
   116b0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116b4 <clearerr_unlocked@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #102400	; 0x19000
   116bc:	ldr	pc, [ip, #2660]!	; 0xa64

000116c0 <bindtextdomain@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #102400	; 0x19000
   116c8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116cc <aligned_alloc@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #102400	; 0x19000
   116d4:	ldr	pc, [ip, #2644]!	; 0xa54

000116d8 <__libc_current_sigrtmin@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #102400	; 0x19000
   116e0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116e4 <strncmp@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #102400	; 0x19000
   116ec:	ldr	pc, [ip, #2628]!	; 0xa44

000116f0 <abort@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #102400	; 0x19000
   116f8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116fc <close@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #102400	; 0x19000
   11704:	ldr	pc, [ip, #2612]!	; 0xa34

00011708 <strspn@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #102400	; 0x19000
   11710:	ldr	pc, [ip, #2604]!	; 0xa2c

00011714 <__assert_fail@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #102400	; 0x19000
   1171c:	ldr	pc, [ip, #2596]!	; 0xa24

Disassembly of section .text:

00011720 <.text>:
   11720:	mov	fp, #0
   11724:	mov	lr, #0
   11728:	pop	{r1}		; (ldr r1, [sp], #4)
   1172c:	mov	r2, sp
   11730:	push	{r2}		; (str r2, [sp, #-4]!)
   11734:	push	{r0}		; (str r0, [sp, #-4]!)
   11738:	ldr	ip, [pc, #16]	; 11750 <__assert_fail@plt+0x3c>
   1173c:	push	{ip}		; (str ip, [sp, #-4]!)
   11740:	ldr	r0, [pc, #12]	; 11754 <__assert_fail@plt+0x40>
   11744:	ldr	r3, [pc, #12]	; 11758 <__assert_fail@plt+0x44>
   11748:	bl	11540 <__libc_start_main@plt>
   1174c:	bl	116f0 <abort@plt>
   11750:	ldrdeq	r9, [r1], -ip
   11754:	andeq	r1, r1, ip, lsl #22
   11758:	andeq	r9, r1, ip, ror r5
   1175c:	ldr	r3, [pc, #20]	; 11778 <__assert_fail@plt+0x64>
   11760:	ldr	r2, [pc, #20]	; 1177c <__assert_fail@plt+0x68>
   11764:	add	r3, pc, r3
   11768:	ldr	r2, [r3, r2]
   1176c:	cmp	r2, #0
   11770:	bxeq	lr
   11774:	b	11558 <__gmon_start__@plt>
   11778:	muleq	r1, r4, r8
   1177c:	andeq	r0, r0, r4, asr #2
   11780:	ldr	r0, [pc, #24]	; 117a0 <__assert_fail@plt+0x8c>
   11784:	ldr	r3, [pc, #24]	; 117a4 <__assert_fail@plt+0x90>
   11788:	cmp	r3, r0
   1178c:	bxeq	lr
   11790:	ldr	r3, [pc, #16]	; 117a8 <__assert_fail@plt+0x94>
   11794:	cmp	r3, #0
   11798:	bxeq	lr
   1179c:	bx	r3
   117a0:	andeq	fp, r2, ip, asr #6
   117a4:	andeq	fp, r2, ip, asr #6
   117a8:	andeq	r0, r0, r0
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0xc4>
   117b0:	ldr	r1, [pc, #36]	; 117dc <__assert_fail@plt+0xc8>
   117b4:	sub	r1, r1, r0
   117b8:	asr	r1, r1, #2
   117bc:	add	r1, r1, r1, lsr #31
   117c0:	asrs	r1, r1, #1
   117c4:	bxeq	lr
   117c8:	ldr	r3, [pc, #16]	; 117e0 <__assert_fail@plt+0xcc>
   117cc:	cmp	r3, #0
   117d0:	bxeq	lr
   117d4:	bx	r3
   117d8:	andeq	fp, r2, ip, asr #6
   117dc:	andeq	fp, r2, ip, asr #6
   117e0:	andeq	r0, r0, r0
   117e4:	push	{r4, lr}
   117e8:	ldr	r4, [pc, #24]	; 11808 <__assert_fail@plt+0xf4>
   117ec:	ldrb	r3, [r4]
   117f0:	cmp	r3, #0
   117f4:	popne	{r4, pc}
   117f8:	bl	11780 <__assert_fail@plt+0x6c>
   117fc:	mov	r3, #1
   11800:	strb	r3, [r4]
   11804:	pop	{r4, pc}
   11808:	andeq	fp, r2, ip, ror #6
   1180c:	b	117ac <__assert_fail@plt+0x98>
   11810:	push	{fp, lr}
   11814:	mov	fp, sp
   11818:	sub	sp, sp, #56	; 0x38
   1181c:	mov	r4, r0
   11820:	cmp	r0, #0
   11824:	bne	11ac8 <__assert_fail@plt+0x3b4>
   11828:	movw	r1, #38443	; 0x962b
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11450 <dcgettext@plt>
   1183c:	mov	r1, r0
   11840:	movw	r0, #46388	; 0xb534
   11844:	movt	r0, #2
   11848:	ldr	r2, [r0]
   1184c:	mov	r0, #1
   11850:	bl	11600 <__printf_chk@plt>
   11854:	movw	r1, #38482	; 0x9652
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11450 <dcgettext@plt>
   11868:	movw	r7, #45924	; 0xb364
   1186c:	movt	r7, #2
   11870:	ldr	r1, [r7]
   11874:	bl	11390 <fputs_unlocked@plt>
   11878:	movw	r1, #40999	; 0xa027
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #1
   11888:	bl	11450 <dcgettext@plt>
   1188c:	ldr	r1, [r7]
   11890:	bl	11390 <fputs_unlocked@plt>
   11894:	movw	r1, #41055	; 0xa05f
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	movt	r1, #1
   118a4:	bl	11450 <dcgettext@plt>
   118a8:	ldr	r1, [r7]
   118ac:	bl	11390 <fputs_unlocked@plt>
   118b0:	ldr	r5, [r7]
   118b4:	movw	r1, #38588	; 0x96bc
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	11450 <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	mov	r1, #1
   118d4:	mov	r3, #2
   118d8:	bl	11624 <__fprintf_chk@plt>
   118dc:	movw	r1, #39678	; 0x9afe
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11450 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	11390 <fputs_unlocked@plt>
   118f8:	movw	r1, #39791	; 0x9b6f
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11450 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	11390 <fputs_unlocked@plt>
   11914:	movw	r1, #39836	; 0x9b9c
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11450 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	11390 <fputs_unlocked@plt>
   11930:	movw	r1, #41130	; 0xa0aa
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	movt	r1, #1
   11940:	bl	11450 <dcgettext@plt>
   11944:	ldr	r1, [r7]
   11948:	bl	11390 <fputs_unlocked@plt>
   1194c:	movw	r1, #39890	; 0x9bd2
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	movt	r1, #1
   1195c:	bl	11450 <dcgettext@plt>
   11960:	ldr	r1, [r7]
   11964:	bl	11390 <fputs_unlocked@plt>
   11968:	movw	r0, #42960	; 0xa7d0
   1196c:	mov	r2, #48	; 0x30
   11970:	mov	r6, sp
   11974:	movw	r5, #40230	; 0x9d26
   11978:	movt	r0, #1
   1197c:	movt	r5, #1
   11980:	add	r1, r0, #32
   11984:	add	r3, r0, #16
   11988:	vld1.64	{d18-d19}, [r0], r2
   1198c:	vld1.64	{d16-d17}, [r1]
   11990:	vld1.64	{d20-d21}, [r3]
   11994:	add	r1, r6, #32
   11998:	vldr	d22, [r0]
   1199c:	add	r0, r6, #16
   119a0:	vst1.64	{d16-d17}, [r1]
   119a4:	movw	r1, #41342	; 0xa17e
   119a8:	vst1.64	{d20-d21}, [r0]
   119ac:	mov	r0, r6
   119b0:	vst1.64	{d18-d19}, [r0], r2
   119b4:	movt	r1, #1
   119b8:	vstr	d22, [r0]
   119bc:	mov	r0, r5
   119c0:	bl	113a8 <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	ldrne	r1, [r6, #8]!
   119cc:	cmpne	r1, #0
   119d0:	bne	119bc <__assert_fail@plt+0x2a8>
   119d4:	ldr	r6, [r6, #4]
   119d8:	movw	r1, #41437	; 0xa1dd
   119dc:	mov	r0, #0
   119e0:	mov	r2, #5
   119e4:	movt	r1, #1
   119e8:	bl	11450 <dcgettext@plt>
   119ec:	movw	r2, #40747	; 0x9f2b
   119f0:	movw	r3, #41460	; 0xa1f4
   119f4:	mov	r1, r0
   119f8:	mov	r0, #1
   119fc:	movt	r2, #1
   11a00:	movt	r3, #1
   11a04:	bl	11600 <__printf_chk@plt>
   11a08:	cmp	r6, #0
   11a0c:	mov	r0, #5
   11a10:	mov	r1, #0
   11a14:	moveq	r6, r5
   11a18:	bl	1166c <setlocale@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a58 <__assert_fail@plt+0x344>
   11a24:	movw	r1, #41500	; 0xa21c
   11a28:	mov	r2, #3
   11a2c:	movt	r1, #1
   11a30:	bl	116e4 <strncmp@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	11a58 <__assert_fail@plt+0x344>
   11a3c:	movw	r1, #41504	; 0xa220
   11a40:	mov	r0, #0
   11a44:	mov	r2, #5
   11a48:	movt	r1, #1
   11a4c:	bl	11450 <dcgettext@plt>
   11a50:	ldr	r1, [r7]
   11a54:	bl	11390 <fputs_unlocked@plt>
   11a58:	movw	r1, #41575	; 0xa267
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	11450 <dcgettext@plt>
   11a6c:	movw	r2, #41460	; 0xa1f4
   11a70:	mov	r1, r0
   11a74:	mov	r0, #1
   11a78:	mov	r3, r5
   11a7c:	movt	r2, #1
   11a80:	bl	11600 <__printf_chk@plt>
   11a84:	movw	r1, #41602	; 0xa282
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11450 <dcgettext@plt>
   11a98:	movw	r3, #39677	; 0x9afd
   11a9c:	mov	r1, r0
   11aa0:	movw	r0, #41370	; 0xa19a
   11aa4:	cmp	r6, r5
   11aa8:	mov	r2, r6
   11aac:	movt	r0, #1
   11ab0:	movt	r3, #1
   11ab4:	moveq	r3, r0
   11ab8:	mov	r0, #1
   11abc:	bl	11600 <__printf_chk@plt>
   11ac0:	mov	r0, r4
   11ac4:	bl	1157c <exit@plt>
   11ac8:	movw	r0, #45920	; 0xb360
   11acc:	movw	r1, #38404	; 0x9604
   11ad0:	mov	r2, #5
   11ad4:	movt	r0, #2
   11ad8:	movt	r1, #1
   11adc:	ldr	r5, [r0]
   11ae0:	mov	r0, #0
   11ae4:	bl	11450 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	movw	r0, #46388	; 0xb534
   11af0:	mov	r1, #1
   11af4:	movt	r0, #2
   11af8:	ldr	r3, [r0]
   11afc:	mov	r0, r5
   11b00:	bl	11624 <__fprintf_chk@plt>
   11b04:	mov	r0, r4
   11b08:	bl	1157c <exit@plt>
   11b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b10:	add	fp, sp, #28
   11b14:	sub	sp, sp, #252	; 0xfc
   11b18:	mov	r4, r1
   11b1c:	str	r0, [sp, #92]	; 0x5c
   11b20:	bl	115c4 <getpagesize@plt>
   11b24:	str	r0, [sp, #64]	; 0x40
   11b28:	ldr	r0, [r4]
   11b2c:	str	r4, [sp, #88]	; 0x58
   11b30:	bl	15408 <__assert_fail@plt+0x3cf4>
   11b34:	movw	r1, #39677	; 0x9afd
   11b38:	mov	r0, #6
   11b3c:	movt	r1, #1
   11b40:	bl	1166c <setlocale@plt>
   11b44:	movw	r4, #40751	; 0x9f2f
   11b48:	movw	r1, #40236	; 0x9d2c
   11b4c:	movt	r4, #1
   11b50:	movt	r1, #1
   11b54:	mov	r0, r4
   11b58:	bl	116c0 <bindtextdomain@plt>
   11b5c:	mov	r0, r4
   11b60:	bl	11474 <textdomain@plt>
   11b64:	movw	r0, #20444	; 0x4fdc
   11b68:	movt	r0, #1
   11b6c:	bl	195e0 <__assert_fail@plt+0x7ecc>
   11b70:	movw	r1, #45936	; 0xb370
   11b74:	movw	r0, #43097	; 0xa859
   11b78:	mov	r7, #0
   11b7c:	mov	sl, #0
   11b80:	mov	r9, #0
   11b84:	movt	r1, #2
   11b88:	movt	r0, #1
   11b8c:	str	r0, [r1]
   11b90:	movw	r1, #45940	; 0xb374
   11b94:	movw	r0, #40676	; 0x9ee4
   11b98:	movt	r1, #2
   11b9c:	movt	r0, #1
   11ba0:	str	r0, [r1]
   11ba4:	mov	r0, #0
   11ba8:	str	r0, [sp, #72]	; 0x48
   11bac:	mov	r0, #0
   11bb0:	str	r0, [sp, #68]	; 0x44
   11bb4:	mov	r0, #0
   11bb8:	str	r0, [sp, #80]	; 0x50
   11bbc:	mov	r0, #0
   11bc0:	b	11c38 <__assert_fail@plt+0x524>
   11bc4:	movw	r0, #45928	; 0xb368
   11bc8:	movw	r1, #40391	; 0x9dc7
   11bcc:	mov	r2, #5
   11bd0:	movt	r0, #2
   11bd4:	movt	r1, #1
   11bd8:	ldr	r4, [r0]
   11bdc:	mov	r0, #0
   11be0:	bl	11450 <dcgettext@plt>
   11be4:	movw	r2, #42672	; 0xa6b0
   11be8:	mvn	r1, #0
   11bec:	str	r0, [sp, #12]
   11bf0:	mov	r0, r4
   11bf4:	mov	r3, #0
   11bf8:	movt	r2, #1
   11bfc:	str	r1, [sp]
   11c00:	mov	r1, #0
   11c04:	str	r2, [sp, #8]
   11c08:	mov	r2, #1
   11c0c:	str	r1, [sp, #4]
   11c10:	str	r1, [sp, #16]
   11c14:	bl	1823c <__assert_fail@plt+0x6b28>
   11c18:	mov	r7, r0
   11c1c:	mov	sl, r1
   11c20:	mov	r0, #2
   11c24:	b	11c38 <__assert_fail@plt+0x524>
   11c28:	ldr	r0, [sp, #84]	; 0x54
   11c2c:	cmp	r0, #0
   11c30:	beq	11bc4 <__assert_fail@plt+0x4b0>
   11c34:	b	13c10 <__assert_fail@plt+0x24fc>
   11c38:	str	r0, [sp, #84]	; 0x54
   11c3c:	b	11c4c <__assert_fail@plt+0x538>
   11c40:	sub	r7, r4, #48	; 0x30
   11c44:	mov	r9, r6
   11c48:	asr	sl, r7, #31
   11c4c:	movw	r0, #45912	; 0xb358
   11c50:	ldr	r1, [sp, #88]	; 0x58
   11c54:	movw	r2, #40260	; 0x9d44
   11c58:	movw	r3, #42688	; 0xa6c0
   11c5c:	movt	r0, #2
   11c60:	movt	r2, #1
   11c64:	movt	r3, #1
   11c68:	ldr	r6, [r0]
   11c6c:	mov	r0, #0
   11c70:	str	r0, [sp]
   11c74:	ldr	r0, [sp, #92]	; 0x5c
   11c78:	bl	11564 <getopt_long@plt>
   11c7c:	cmp	r6, #0
   11c80:	mov	r4, r0
   11c84:	add	r0, r0, #3
   11c88:	movw	r1, #262	; 0x106
   11c8c:	movweq	r6, #1
   11c90:	cmp	r0, r1
   11c94:	bhi	13b34 <__assert_fail@plt+0x2420>
   11c98:	add	r1, pc, #0
   11c9c:	ldr	pc, [r1, r0, lsl #2]
   11ca0:	andeq	r3, r1, ip, lsr fp
   11ca4:	muleq	r1, r0, fp
   11ca8:	andeq	r2, r1, ip, lsr #12
   11cac:	andeq	r3, r1, r4, lsr fp
   11cb0:	andeq	r3, r1, r4, lsr fp
   11cb4:	andeq	r3, r1, r4, lsr fp
   11cb8:	andeq	r3, r1, r4, lsr fp
   11cbc:	andeq	r3, r1, r4, lsr fp
   11cc0:	andeq	r3, r1, r4, lsr fp
   11cc4:	andeq	r3, r1, r4, lsr fp
   11cc8:	andeq	r3, r1, r4, lsr fp
   11ccc:	andeq	r3, r1, r4, lsr fp
   11cd0:	andeq	r3, r1, r4, lsr fp
   11cd4:	andeq	r3, r1, r4, lsr fp
   11cd8:	andeq	r3, r1, r4, lsr fp
   11cdc:	andeq	r3, r1, r4, lsr fp
   11ce0:	andeq	r3, r1, r4, lsr fp
   11ce4:	andeq	r3, r1, r4, lsr fp
   11ce8:	andeq	r3, r1, r4, lsr fp
   11cec:	andeq	r3, r1, r4, lsr fp
   11cf0:	andeq	r3, r1, r4, lsr fp
   11cf4:	andeq	r3, r1, r4, lsr fp
   11cf8:	andeq	r3, r1, r4, lsr fp
   11cfc:	andeq	r3, r1, r4, lsr fp
   11d00:	andeq	r3, r1, r4, lsr fp
   11d04:	andeq	r3, r1, r4, lsr fp
   11d08:	andeq	r3, r1, r4, lsr fp
   11d0c:	andeq	r3, r1, r4, lsr fp
   11d10:	andeq	r3, r1, r4, lsr fp
   11d14:	andeq	r3, r1, r4, lsr fp
   11d18:	andeq	r3, r1, r4, lsr fp
   11d1c:	andeq	r3, r1, r4, lsr fp
   11d20:	andeq	r3, r1, r4, lsr fp
   11d24:	andeq	r3, r1, r4, lsr fp
   11d28:	andeq	r3, r1, r4, lsr fp
   11d2c:	andeq	r3, r1, r4, lsr fp
   11d30:	andeq	r3, r1, r4, lsr fp
   11d34:	andeq	r3, r1, r4, lsr fp
   11d38:	andeq	r3, r1, r4, lsr fp
   11d3c:	andeq	r3, r1, r4, lsr fp
   11d40:	andeq	r3, r1, r4, lsr fp
   11d44:	andeq	r3, r1, r4, lsr fp
   11d48:	andeq	r3, r1, r4, lsr fp
   11d4c:	andeq	r3, r1, r4, lsr fp
   11d50:	andeq	r3, r1, r4, lsr fp
   11d54:	andeq	r3, r1, r4, lsr fp
   11d58:	andeq	r3, r1, r4, lsr fp
   11d5c:	andeq	r3, r1, r4, lsr fp
   11d60:	andeq	r3, r1, r4, lsr fp
   11d64:	andeq	r3, r1, r4, lsr fp
   11d68:	andeq	r3, r1, r4, lsr fp
   11d6c:	strheq	r2, [r1], -ip
   11d70:	strheq	r2, [r1], -ip
   11d74:	strheq	r2, [r1], -ip
   11d78:	strheq	r2, [r1], -ip
   11d7c:	strheq	r2, [r1], -ip
   11d80:	strheq	r2, [r1], -ip
   11d84:	strheq	r2, [r1], -ip
   11d88:	strheq	r2, [r1], -ip
   11d8c:	strheq	r2, [r1], -ip
   11d90:	strheq	r2, [r1], -ip
   11d94:	andeq	r3, r1, r4, lsr fp
   11d98:	andeq	r3, r1, r4, lsr fp
   11d9c:	andeq	r3, r1, r4, lsr fp
   11da0:	andeq	r3, r1, r4, lsr fp
   11da4:	andeq	r3, r1, r4, lsr fp
   11da8:	andeq	r3, r1, r4, lsr fp
   11dac:	andeq	r3, r1, r4, lsr fp
   11db0:	andeq	r3, r1, r4, lsr fp
   11db4:	andeq	r3, r1, r4, lsr fp
   11db8:	andeq	r1, r1, r8, lsr #24
   11dbc:	andeq	r3, r1, r4, lsr fp
   11dc0:	andeq	r3, r1, r4, lsr fp
   11dc4:	andeq	r3, r1, r4, lsr fp
   11dc8:	andeq	r3, r1, r4, lsr fp
   11dcc:	andeq	r3, r1, r4, lsr fp
   11dd0:	andeq	r3, r1, r4, lsr fp
   11dd4:	andeq	r3, r1, r4, lsr fp
   11dd8:	andeq	r3, r1, r4, lsr fp
   11ddc:	andeq	r3, r1, r4, lsr fp
   11de0:	andeq	r3, r1, r4, lsr fp
   11de4:	andeq	r3, r1, r4, lsr fp
   11de8:	andeq	r3, r1, r4, lsr fp
   11dec:	andeq	r3, r1, r4, lsr fp
   11df0:	andeq	r3, r1, r4, lsr fp
   11df4:	andeq	r3, r1, r4, lsr fp
   11df8:	andeq	r3, r1, r4, lsr fp
   11dfc:	andeq	r3, r1, r4, lsr fp
   11e00:	andeq	r3, r1, r4, lsr fp
   11e04:	andeq	r3, r1, r4, lsr fp
   11e08:	andeq	r3, r1, r4, lsr fp
   11e0c:	andeq	r3, r1, r4, lsr fp
   11e10:	andeq	r3, r1, r4, lsr fp
   11e14:	andeq	r3, r1, r4, lsr fp
   11e18:	andeq	r3, r1, r4, lsr fp
   11e1c:	andeq	r3, r1, r4, lsr fp
   11e20:	andeq	r3, r1, r4, lsr fp
   11e24:	andeq	r3, r1, r4, lsr fp
   11e28:	andeq	r3, r1, r4, lsr fp
   11e2c:	andeq	r3, r1, r4, lsr fp
   11e30:	strdeq	r2, [r1], -r8
   11e34:	andeq	r2, r1, r8, lsl #5
   11e38:	andeq	r3, r1, r4, lsr fp
   11e3c:	andeq	r2, r1, ip, asr #2
   11e40:	andeq	r2, r1, ip, ror #3
   11e44:	andeq	r3, r1, r4, lsr fp
   11e48:	andeq	r3, r1, r4, lsr fp
   11e4c:	andeq	r3, r1, r4, lsr fp
   11e50:	andeq	r3, r1, r4, lsr fp
   11e54:	andeq	r3, r1, r4, lsr fp
   11e58:	andeq	r3, r1, r4, lsr fp
   11e5c:			; <UNDEFINED> instruction: 0x000125bc
   11e60:	andeq	r3, r1, r4, lsr fp
   11e64:	andeq	r2, r1, ip, lsl #6
   11e68:	andeq	r3, r1, r4, lsr fp
   11e6c:	andeq	r3, r1, r4, lsr fp
   11e70:	andeq	r3, r1, r4, lsr fp
   11e74:	andeq	r3, r1, r4, lsr fp
   11e78:	andeq	r3, r1, r4, lsr fp
   11e7c:	andeq	r2, r1, r4, asr #7
   11e80:	andeq	r2, r1, r4, ror #5
   11e84:	andeq	r3, r1, r4, lsr fp
   11e88:	andeq	r3, r1, r4, lsr fp
   11e8c:	andeq	r2, r1, ip, asr #2
   11e90:	andeq	r3, r1, r4, lsr fp
   11e94:	andeq	r3, r1, r4, lsr fp
   11e98:	andeq	r3, r1, r4, lsr fp
   11e9c:	andeq	r3, r1, r4, lsr fp
   11ea0:	andeq	r3, r1, r4, lsr fp
   11ea4:	andeq	r3, r1, r4, lsr fp
   11ea8:	andeq	r3, r1, r4, lsr fp
   11eac:	andeq	r3, r1, r4, lsr fp
   11eb0:	andeq	r3, r1, r4, lsr fp
   11eb4:	andeq	r3, r1, r4, lsr fp
   11eb8:	andeq	r3, r1, r4, lsr fp
   11ebc:	andeq	r3, r1, r4, lsr fp
   11ec0:	andeq	r3, r1, r4, lsr fp
   11ec4:	andeq	r3, r1, r4, lsr fp
   11ec8:	andeq	r3, r1, r4, lsr fp
   11ecc:	andeq	r3, r1, r4, lsr fp
   11ed0:	andeq	r3, r1, r4, lsr fp
   11ed4:	andeq	r3, r1, r4, lsr fp
   11ed8:	andeq	r3, r1, r4, lsr fp
   11edc:	andeq	r3, r1, r4, lsr fp
   11ee0:	andeq	r3, r1, r4, lsr fp
   11ee4:	andeq	r3, r1, r4, lsr fp
   11ee8:	andeq	r3, r1, r4, lsr fp
   11eec:	andeq	r3, r1, r4, lsr fp
   11ef0:	andeq	r3, r1, r4, lsr fp
   11ef4:	andeq	r3, r1, r4, lsr fp
   11ef8:	andeq	r3, r1, r4, lsr fp
   11efc:	andeq	r3, r1, r4, lsr fp
   11f00:	andeq	r3, r1, r4, lsr fp
   11f04:	andeq	r3, r1, r4, lsr fp
   11f08:	andeq	r3, r1, r4, lsr fp
   11f0c:	andeq	r3, r1, r4, lsr fp
   11f10:	andeq	r3, r1, r4, lsr fp
   11f14:	andeq	r3, r1, r4, lsr fp
   11f18:	andeq	r3, r1, r4, lsr fp
   11f1c:	andeq	r3, r1, r4, lsr fp
   11f20:	andeq	r3, r1, r4, lsr fp
   11f24:	andeq	r3, r1, r4, lsr fp
   11f28:	andeq	r3, r1, r4, lsr fp
   11f2c:	andeq	r3, r1, r4, lsr fp
   11f30:	andeq	r3, r1, r4, lsr fp
   11f34:	andeq	r3, r1, r4, lsr fp
   11f38:	andeq	r3, r1, r4, lsr fp
   11f3c:	andeq	r3, r1, r4, lsr fp
   11f40:	andeq	r3, r1, r4, lsr fp
   11f44:	andeq	r3, r1, r4, lsr fp
   11f48:	andeq	r3, r1, r4, lsr fp
   11f4c:	andeq	r3, r1, r4, lsr fp
   11f50:	andeq	r3, r1, r4, lsr fp
   11f54:	andeq	r3, r1, r4, lsr fp
   11f58:	andeq	r3, r1, r4, lsr fp
   11f5c:	andeq	r3, r1, r4, lsr fp
   11f60:	andeq	r3, r1, r4, lsr fp
   11f64:	andeq	r3, r1, r4, lsr fp
   11f68:	andeq	r3, r1, r4, lsr fp
   11f6c:	andeq	r3, r1, r4, lsr fp
   11f70:	andeq	r3, r1, r4, lsr fp
   11f74:	andeq	r3, r1, r4, lsr fp
   11f78:	andeq	r3, r1, r4, lsr fp
   11f7c:	andeq	r3, r1, r4, lsr fp
   11f80:	andeq	r3, r1, r4, lsr fp
   11f84:	andeq	r3, r1, r4, lsr fp
   11f88:	andeq	r3, r1, r4, lsr fp
   11f8c:	andeq	r3, r1, r4, lsr fp
   11f90:	andeq	r3, r1, r4, lsr fp
   11f94:	andeq	r3, r1, r4, lsr fp
   11f98:	andeq	r3, r1, r4, lsr fp
   11f9c:	andeq	r3, r1, r4, lsr fp
   11fa0:	andeq	r3, r1, r4, lsr fp
   11fa4:	andeq	r3, r1, r4, lsr fp
   11fa8:	andeq	r3, r1, r4, lsr fp
   11fac:	andeq	r3, r1, r4, lsr fp
   11fb0:	andeq	r3, r1, r4, lsr fp
   11fb4:	andeq	r3, r1, r4, lsr fp
   11fb8:	andeq	r3, r1, r4, lsr fp
   11fbc:	andeq	r3, r1, r4, lsr fp
   11fc0:	andeq	r3, r1, r4, lsr fp
   11fc4:	andeq	r3, r1, r4, lsr fp
   11fc8:	andeq	r3, r1, r4, lsr fp
   11fcc:	andeq	r3, r1, r4, lsr fp
   11fd0:	andeq	r3, r1, r4, lsr fp
   11fd4:	andeq	r3, r1, r4, lsr fp
   11fd8:	andeq	r3, r1, r4, lsr fp
   11fdc:	andeq	r3, r1, r4, lsr fp
   11fe0:	andeq	r3, r1, r4, lsr fp
   11fe4:	andeq	r3, r1, r4, lsr fp
   11fe8:	andeq	r3, r1, r4, lsr fp
   11fec:	andeq	r3, r1, r4, lsr fp
   11ff0:	andeq	r3, r1, r4, lsr fp
   11ff4:	andeq	r3, r1, r4, lsr fp
   11ff8:	andeq	r3, r1, r4, lsr fp
   11ffc:	andeq	r3, r1, r4, lsr fp
   12000:	andeq	r3, r1, r4, lsr fp
   12004:	andeq	r3, r1, r4, lsr fp
   12008:	andeq	r3, r1, r4, lsr fp
   1200c:	andeq	r3, r1, r4, lsr fp
   12010:	andeq	r3, r1, r4, lsr fp
   12014:	andeq	r3, r1, r4, lsr fp
   12018:	andeq	r3, r1, r4, lsr fp
   1201c:	andeq	r3, r1, r4, lsr fp
   12020:	andeq	r3, r1, r4, lsr fp
   12024:	andeq	r3, r1, r4, lsr fp
   12028:	andeq	r3, r1, r4, lsr fp
   1202c:	andeq	r3, r1, r4, lsr fp
   12030:	andeq	r3, r1, r4, lsr fp
   12034:	andeq	r3, r1, r4, lsr fp
   12038:	andeq	r3, r1, r4, lsr fp
   1203c:	andeq	r3, r1, r4, lsr fp
   12040:	andeq	r3, r1, r4, lsr fp
   12044:	andeq	r3, r1, r4, lsr fp
   12048:	andeq	r3, r1, r4, lsr fp
   1204c:	andeq	r3, r1, r4, lsr fp
   12050:	andeq	r3, r1, r4, lsr fp
   12054:	andeq	r3, r1, r4, lsr fp
   12058:	andeq	r3, r1, r4, lsr fp
   1205c:	andeq	r3, r1, r4, lsr fp
   12060:	andeq	r3, r1, r4, lsr fp
   12064:	andeq	r3, r1, r4, lsr fp
   12068:	andeq	r3, r1, r4, lsr fp
   1206c:	andeq	r3, r1, r4, lsr fp
   12070:	andeq	r3, r1, r4, lsr fp
   12074:	andeq	r3, r1, r4, lsr fp
   12078:	andeq	r3, r1, r4, lsr fp
   1207c:	andeq	r3, r1, r4, lsr fp
   12080:	andeq	r3, r1, r4, lsr fp
   12084:	andeq	r3, r1, r4, lsr fp
   12088:	andeq	r3, r1, r4, lsr fp
   1208c:	andeq	r3, r1, r4, lsr fp
   12090:	andeq	r3, r1, r4, lsr fp
   12094:	andeq	r3, r1, r4, lsr fp
   12098:	andeq	r3, r1, r4, lsr fp
   1209c:	andeq	r3, r1, r4, lsr fp
   120a0:	andeq	r3, r1, r4, lsr fp
   120a4:	andeq	r3, r1, r4, lsr fp
   120a8:	andeq	r3, r1, r4, lsr fp
   120ac:	strdeq	r2, [r1], -r8
   120b0:	andeq	r2, r1, r8, lsr #7
   120b4:	andeq	r2, r1, ip, lsr #8
   120b8:	andeq	r2, r1, ip, asr r2
   120bc:	ldr	r0, [sp, #84]	; 0x54
   120c0:	cmp	r0, #0
   120c4:	beq	120e0 <__assert_fail@plt+0x9cc>
   120c8:	orr	r0, r0, #4
   120cc:	mov	r5, r7
   120d0:	mov	r8, sl
   120d4:	cmp	r0, #4
   120d8:	beq	120f0 <__assert_fail@plt+0x9dc>
   120dc:	b	13c10 <__assert_fail@plt+0x24fc>
   120e0:	mov	r0, #4
   120e4:	mov	r5, #0
   120e8:	mov	r8, #0
   120ec:	str	r0, [sp, #84]	; 0x54
   120f0:	cmp	r9, #0
   120f4:	cmpne	r9, r6
   120f8:	bne	11c40 <__assert_fail@plt+0x52c>
   120fc:	movw	r0, #39321	; 0x9999
   12100:	movt	r0, #39321	; 0x9999
   12104:	subs	r0, r0, r5
   12108:	movw	r0, #39321	; 0x9999
   1210c:	movt	r0, #6553	; 0x1999
   12110:	sbcs	r0, r0, r8
   12114:	bcc	13bd0 <__assert_fail@plt+0x24bc>
   12118:	mov	r0, #10
   1211c:	add	r2, r8, r8, lsl #2
   12120:	mov	r9, r6
   12124:	umull	r0, r1, r5, r0
   12128:	add	r1, r1, r2, lsl #1
   1212c:	sub	r2, r4, #48	; 0x30
   12130:	adds	r7, r0, r2
   12134:	adc	r1, r1, r2, asr #31
   12138:	subs	r0, r7, r5
   1213c:	mov	sl, r1
   12140:	sbcs	r0, r1, r8
   12144:	bcs	11c4c <__assert_fail@plt+0x538>
   12148:	b	13bd0 <__assert_fail@plt+0x24bc>
   1214c:	movw	r6, #40616	; 0x9ea8
   12150:	movw	r0, #40605	; 0x9e9d
   12154:	cmp	r4, #100	; 0x64
   12158:	movt	r6, #1
   1215c:	movt	r0, #1
   12160:	moveq	r6, r0
   12164:	movw	r0, #45396	; 0xb154
   12168:	movt	r0, #2
   1216c:	str	r6, [r0]
   12170:	movw	r0, #45928	; 0xb368
   12174:	movt	r0, #2
   12178:	ldr	r5, [r0]
   1217c:	cmp	r5, #0
   12180:	beq	11c4c <__assert_fail@plt+0x538>
   12184:	mov	r0, r5
   12188:	bl	11588 <strlen@plt>
   1218c:	mov	r8, r0
   12190:	mov	r0, r5
   12194:	mov	r1, r6
   12198:	bl	11708 <strspn@plt>
   1219c:	cmp	r8, r0
   121a0:	bne	13c3c <__assert_fail@plt+0x2528>
   121a4:	ldrb	r0, [r5]
   121a8:	cmp	r0, #48	; 0x30
   121ac:	bne	121dc <__assert_fail@plt+0xac8>
   121b0:	movw	r2, #45928	; 0xb368
   121b4:	add	r0, r5, #1
   121b8:	movt	r2, #2
   121bc:	ldrb	r1, [r0]
   121c0:	cmp	r1, #0
   121c4:	beq	121d8 <__assert_fail@plt+0xac4>
   121c8:	str	r0, [r2]
   121cc:	ldrb	r1, [r0], #1
   121d0:	cmp	r1, #48	; 0x30
   121d4:	beq	121bc <__assert_fail@plt+0xaa8>
   121d8:	sub	r5, r0, #1
   121dc:	movw	r0, #45956	; 0xb384
   121e0:	movt	r0, #2
   121e4:	str	r5, [r0]
   121e8:	b	11c4c <__assert_fail@plt+0x538>
   121ec:	movw	r0, #45960	; 0xb388
   121f0:	movt	r0, #2
   121f4:	b	122ec <__assert_fail@plt+0xbd8>
   121f8:	movw	r0, #45928	; 0xb368
   121fc:	movw	r1, #40287	; 0x9d5f
   12200:	mov	r2, #5
   12204:	movt	r0, #2
   12208:	movt	r1, #1
   1220c:	ldr	r4, [r0]
   12210:	mov	r0, #0
   12214:	bl	11450 <dcgettext@plt>
   12218:	mvn	r1, #-1073741824	; 0xc0000000
   1221c:	mov	r2, #0
   12220:	str	r0, [sp, #12]
   12224:	mov	r0, r4
   12228:	mov	r3, #0
   1222c:	str	r1, [sp]
   12230:	movw	r1, #39677	; 0x9afd
   12234:	str	r2, [sp, #4]
   12238:	str	r2, [sp, #16]
   1223c:	mov	r2, #0
   12240:	movt	r1, #1
   12244:	str	r1, [sp, #8]
   12248:	bl	1823c <__assert_fail@plt+0x6b28>
   1224c:	movw	r1, #45944	; 0xb378
   12250:	movt	r1, #2
   12254:	str	r0, [r1]
   12258:	b	11c4c <__assert_fail@plt+0x538>
   1225c:	movw	r0, #45928	; 0xb368
   12260:	movt	r0, #2
   12264:	ldr	r4, [r0]
   12268:	mov	r0, r4
   1226c:	bl	14f38 <__assert_fail@plt+0x3824>
   12270:	cmp	r0, r4
   12274:	bne	13c58 <__assert_fail@plt+0x2544>
   12278:	movw	r0, #45948	; 0xb37c
   1227c:	movt	r0, #2
   12280:	str	r4, [r0]
   12284:	b	11c4c <__assert_fail@plt+0x538>
   12288:	ldr	r0, [sp, #84]	; 0x54
   1228c:	cmp	r0, #0
   12290:	bne	13c10 <__assert_fail@plt+0x24fc>
   12294:	movw	r0, #45928	; 0xb368
   12298:	movw	r1, #40391	; 0x9dc7
   1229c:	mov	r2, #5
   122a0:	movt	r0, #2
   122a4:	movt	r1, #1
   122a8:	ldr	r4, [r0]
   122ac:	mov	r0, #0
   122b0:	bl	11450 <dcgettext@plt>
   122b4:	mvn	r1, #0
   122b8:	str	r0, [sp, #12]
   122bc:	mov	r0, #0
   122c0:	str	r1, [sp]
   122c4:	mvn	r1, #-2147483648	; 0x80000000
   122c8:	str	r0, [sp, #16]
   122cc:	mov	r0, #1
   122d0:	str	r1, [sp, #4]
   122d4:	movw	r1, #42672	; 0xa6b0
   122d8:	str	r0, [sp, #84]	; 0x54
   122dc:	movt	r1, #1
   122e0:	b	1259c <__assert_fail@plt+0xe88>
   122e4:	movw	r0, #45952	; 0xb380
   122e8:	movt	r0, #2
   122ec:	mov	r1, #1
   122f0:	strb	r1, [r0]
   122f4:	b	11c4c <__assert_fail@plt+0x538>
   122f8:	movw	r1, #45968	; 0xb390
   122fc:	mov	r0, #1
   12300:	movt	r1, #2
   12304:	strb	r0, [r1]
   12308:	b	11c4c <__assert_fail@plt+0x538>
   1230c:	ldr	r0, [sp, #84]	; 0x54
   12310:	cmp	r0, #0
   12314:	bne	13c10 <__assert_fail@plt+0x24fc>
   12318:	bl	11570 <__ctype_b_loc@plt>
   1231c:	movw	r6, #45928	; 0xb368
   12320:	ldr	r1, [r0]
   12324:	movt	r6, #2
   12328:	ldr	r4, [r6]
   1232c:	ldrb	r2, [r4]
   12330:	add	r1, r1, r2, lsl #1
   12334:	ldrb	r1, [r1, #1]
   12338:	tst	r1, #32
   1233c:	beq	12364 <__assert_fail@plt+0xc50>
   12340:	add	r1, r4, #1
   12344:	str	r1, [r6]
   12348:	ldrb	r2, [r1], #1
   1234c:	ldr	r3, [r0]
   12350:	add	r2, r3, r2, lsl #1
   12354:	ldrb	r2, [r2, #1]
   12358:	tst	r2, #32
   1235c:	bne	12344 <__assert_fail@plt+0xc30>
   12360:	sub	r4, r1, #1
   12364:	movw	r1, #40439	; 0x9df7
   12368:	mov	r0, r4
   1236c:	mov	r2, #2
   12370:	movt	r1, #1
   12374:	bl	116e4 <strncmp@plt>
   12378:	cmp	r0, #0
   1237c:	beq	12488 <__assert_fail@plt+0xd74>
   12380:	movw	r1, #40442	; 0x9dfa
   12384:	mov	r0, r4
   12388:	mov	r2, #2
   1238c:	movt	r1, #1
   12390:	bl	116e4 <strncmp@plt>
   12394:	mov	r1, #5
   12398:	cmp	r0, #0
   1239c:	bne	12494 <__assert_fail@plt+0xd80>
   123a0:	mov	r1, #6
   123a4:	b	1248c <__assert_fail@plt+0xd78>
   123a8:	movw	r0, #45928	; 0xb368
   123ac:	movw	r1, #45964	; 0xb38c
   123b0:	movt	r0, #2
   123b4:	movt	r1, #2
   123b8:	ldr	r0, [r0]
   123bc:	str	r0, [r1]
   123c0:	b	11c4c <__assert_fail@plt+0x538>
   123c4:	movw	r0, #45928	; 0xb368
   123c8:	movt	r0, #2
   123cc:	ldr	r0, [r0]
   123d0:	ldrb	r1, [r0]
   123d4:	cmp	r1, #0
   123d8:	beq	13c9c <__assert_fail@plt+0x2588>
   123dc:	ldrb	r2, [r0, #1]
   123e0:	cmp	r2, #0
   123e4:	beq	12400 <__assert_fail@plt+0xcec>
   123e8:	movw	r1, #40493	; 0x9e2d
   123ec:	movt	r1, #1
   123f0:	bl	113a8 <strcmp@plt>
   123f4:	mov	r1, #0
   123f8:	cmp	r0, #0
   123fc:	bne	13ca8 <__assert_fail@plt+0x2594>
   12400:	movw	r0, #45392	; 0xb150
   12404:	movt	r0, #2
   12408:	ldr	r0, [r0]
   1240c:	cmp	r0, #0
   12410:	blt	1241c <__assert_fail@plt+0xd08>
   12414:	cmp	r0, r1
   12418:	bne	13ce4 <__assert_fail@plt+0x25d0>
   1241c:	movw	r0, #45392	; 0xb150
   12420:	movt	r0, #2
   12424:	str	r1, [r0]
   12428:	b	11c4c <__assert_fail@plt+0x538>
   1242c:	movw	r0, #45928	; 0xb368
   12430:	movw	r1, #40725	; 0x9f15
   12434:	mov	r2, #5
   12438:	movt	r0, #2
   1243c:	movt	r1, #1
   12440:	ldr	r4, [r0]
   12444:	mov	r0, #0
   12448:	bl	11450 <dcgettext@plt>
   1244c:	movw	r2, #42672	; 0xa6b0
   12450:	mvn	r1, #-2147483647	; 0x80000001
   12454:	str	r0, [sp, #12]
   12458:	mov	r0, r4
   1245c:	mov	r3, #0
   12460:	movt	r2, #1
   12464:	str	r1, [sp]
   12468:	mov	r1, #0
   1246c:	str	r2, [sp, #8]
   12470:	mov	r2, #1
   12474:	str	r1, [sp, #4]
   12478:	str	r1, [sp, #16]
   1247c:	bl	1823c <__assert_fail@plt+0x6b28>
   12480:	str	r0, [sp, #80]	; 0x50
   12484:	b	11c4c <__assert_fail@plt+0x538>
   12488:	mov	r1, #7
   1248c:	add	r4, r4, #2
   12490:	str	r4, [r6]
   12494:	str	r1, [sp, #84]	; 0x54
   12498:	mov	r0, r4
   1249c:	mov	r1, #47	; 0x2f
   124a0:	bl	115a0 <strchr@plt>
   124a4:	cmp	r0, #0
   124a8:	beq	12568 <__assert_fail@plt+0xe54>
   124ac:	movw	r1, #40445	; 0x9dfd
   124b0:	mov	r5, r0
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	movt	r1, #1
   124c0:	bl	11450 <dcgettext@plt>
   124c4:	mvn	r1, #0
   124c8:	str	r0, [sp, #12]
   124cc:	mov	r0, #0
   124d0:	mov	r2, #1
   124d4:	mov	r3, #0
   124d8:	str	r1, [sp]
   124dc:	str	r1, [sp, #4]
   124e0:	movw	r1, #39677	; 0x9afd
   124e4:	str	r0, [sp, #16]
   124e8:	add	r0, r5, #1
   124ec:	movt	r1, #1
   124f0:	str	r1, [sp, #8]
   124f4:	bl	1823c <__assert_fail@plt+0x6b28>
   124f8:	mov	r7, r0
   124fc:	ldr	r0, [r6]
   12500:	mov	sl, r1
   12504:	cmp	r0, r5
   12508:	beq	11c4c <__assert_fail@plt+0x538>
   1250c:	movw	r0, #45928	; 0xb368
   12510:	mov	r6, #0
   12514:	movw	r1, #41795	; 0xa343
   12518:	mov	r2, #5
   1251c:	strb	r6, [r5]
   12520:	movt	r0, #2
   12524:	movt	r1, #1
   12528:	ldr	r4, [r0]
   1252c:	mov	r0, #0
   12530:	bl	11450 <dcgettext@plt>
   12534:	movw	r1, #39677	; 0x9afd
   12538:	stm	sp, {r7, sl}
   1253c:	str	r0, [sp, #12]
   12540:	mov	r0, r4
   12544:	mov	r2, #1
   12548:	mov	r3, #0
   1254c:	str	r6, [sp, #16]
   12550:	movt	r1, #1
   12554:	str	r1, [sp, #8]
   12558:	bl	1823c <__assert_fail@plt+0x6b28>
   1255c:	str	r0, [sp, #72]	; 0x48
   12560:	str	r1, [sp, #68]	; 0x44
   12564:	b	11c4c <__assert_fail@plt+0x538>
   12568:	movw	r1, #40445	; 0x9dfd
   1256c:	mov	r0, #0
   12570:	mov	r2, #5
   12574:	movt	r1, #1
   12578:	bl	11450 <dcgettext@plt>
   1257c:	mvn	r1, #0
   12580:	str	r0, [sp, #12]
   12584:	mov	r0, #0
   12588:	str	r1, [sp]
   1258c:	str	r1, [sp, #4]
   12590:	movw	r1, #39677	; 0x9afd
   12594:	str	r0, [sp, #16]
   12598:	movt	r1, #1
   1259c:	str	r1, [sp, #8]
   125a0:	mov	r0, r4
   125a4:	mov	r2, #1
   125a8:	mov	r3, #0
   125ac:	bl	1823c <__assert_fail@plt+0x6b28>
   125b0:	mov	r7, r0
   125b4:	mov	sl, r1
   125b8:	b	11c4c <__assert_fail@plt+0x538>
   125bc:	ldr	r0, [sp, #84]	; 0x54
   125c0:	cmp	r0, #0
   125c4:	bne	13c10 <__assert_fail@plt+0x24fc>
   125c8:	movw	r0, #45928	; 0xb368
   125cc:	movw	r1, #40415	; 0x9ddf
   125d0:	mov	r2, #5
   125d4:	movt	r0, #2
   125d8:	movt	r1, #1
   125dc:	ldr	r4, [r0]
   125e0:	mov	r0, #0
   125e4:	bl	11450 <dcgettext@plt>
   125e8:	mvn	r1, #0
   125ec:	str	r0, [sp, #12]
   125f0:	mov	r0, #0
   125f4:	mov	r2, #1
   125f8:	mov	r3, #0
   125fc:	str	r1, [sp]
   12600:	str	r1, [sp, #4]
   12604:	movw	r1, #39677	; 0x9afd
   12608:	str	r0, [sp, #16]
   1260c:	mov	r0, r4
   12610:	movt	r1, #1
   12614:	str	r1, [sp, #8]
   12618:	bl	1823c <__assert_fail@plt+0x6b28>
   1261c:	mov	r7, r0
   12620:	mov	sl, r1
   12624:	mov	r0, #3
   12628:	b	11c38 <__assert_fail@plt+0x524>
   1262c:	ldr	r0, [sp, #72]	; 0x48
   12630:	ldr	r1, [sp, #68]	; 0x44
   12634:	orrs	r0, r0, r1
   12638:	str	r0, [sp, #76]	; 0x4c
   1263c:	beq	12654 <__assert_fail@plt+0xf40>
   12640:	movw	r0, #45964	; 0xb38c
   12644:	movt	r0, #2
   12648:	ldr	r0, [r0]
   1264c:	cmp	r0, #0
   12650:	bne	13d18 <__assert_fail@plt+0x2604>
   12654:	ldr	r3, [sp, #84]	; 0x54
   12658:	cmp	r3, #0
   1265c:	beq	126ac <__assert_fail@plt+0xf98>
   12660:	mov	r5, sl
   12664:	orrs	r0, r7, sl
   12668:	bne	126b8 <__assert_fail@plt+0xfa4>
   1266c:	movw	r1, #40415	; 0x9ddf
   12670:	mov	r0, #0
   12674:	mov	r2, #5
   12678:	movt	r1, #1
   1267c:	bl	11450 <dcgettext@plt>
   12680:	mov	r4, r0
   12684:	movw	r0, #40494	; 0x9e2e
   12688:	movt	r0, #1
   1268c:	bl	1703c <__assert_fail@plt+0x5928>
   12690:	movw	r2, #40853	; 0x9f95
   12694:	str	r0, [sp]
   12698:	mov	r0, #0
   1269c:	mov	r1, #0
   126a0:	mov	r3, r4
   126a4:	movt	r2, #1
   126a8:	b	13c90 <__assert_fail@plt+0x257c>
   126ac:	mov	r5, #0
   126b0:	mov	r7, #1000	; 0x3e8
   126b4:	mov	r3, #3
   126b8:	movw	r0, #45392	; 0xb150
   126bc:	movt	r0, #2
   126c0:	ldr	r0, [r0]
   126c4:	cmn	r0, #1
   126c8:	bgt	126dc <__assert_fail@plt+0xfc8>
   126cc:	movw	r1, #45392	; 0xb150
   126d0:	mov	r0, #10
   126d4:	movt	r1, #2
   126d8:	str	r0, [r1]
   126dc:	movw	r0, #45956	; 0xb384
   126e0:	sub	r8, r3, #5
   126e4:	str	r7, [sp, #100]	; 0x64
   126e8:	mov	r7, #0
   126ec:	mov	r6, #0
   126f0:	str	r3, [sp, #84]	; 0x54
   126f4:	str	r5, [sp, #96]	; 0x60
   126f8:	movt	r0, #2
   126fc:	ldr	r0, [r0]
   12700:	cmp	r0, #0
   12704:	movwne	r1, #46344	; 0xb508
   12708:	movne	r2, #1
   1270c:	movtne	r1, #2
   12710:	strbne	r2, [r1]
   12714:	cmp	r8, #2
   12718:	bhi	12810 <__assert_fail@plt+0x10fc>
   1271c:	ldr	r1, [sp, #100]	; 0x64
   12720:	subs	r6, r1, #1
   12724:	sbc	r7, r5, #0
   12728:	cmp	r0, #0
   1272c:	beq	12758 <__assert_fail@plt+0x1044>
   12730:	movw	r1, #39677	; 0x9afd
   12734:	add	r3, sp, #104	; 0x68
   12738:	mov	r2, #10
   1273c:	mov	r4, #0
   12740:	movt	r1, #1
   12744:	str	r1, [sp]
   12748:	mov	r1, #0
   1274c:	bl	18244 <__assert_fail@plt+0x6b30>
   12750:	cmp	r0, #0
   12754:	beq	12764 <__assert_fail@plt+0x1050>
   12758:	mov	r4, r6
   1275c:	mov	r5, r7
   12760:	b	127b0 <__assert_fail@plt+0x109c>
   12764:	ldr	r0, [sp, #104]	; 0x68
   12768:	ldr	r5, [sp, #100]	; 0x64
   1276c:	ldr	r1, [sp, #108]	; 0x6c
   12770:	ldr	r3, [sp, #96]	; 0x60
   12774:	subs	r2, r0, r5
   12778:	mvn	r5, r5
   1277c:	sbcs	r2, r1, r3
   12780:	mvn	r3, r3
   12784:	mov	r2, #0
   12788:	movwcc	r2, #1
   1278c:	subs	r5, r5, r0
   12790:	sbcs	r3, r3, r1
   12794:	movwcs	r4, #1
   12798:	and	r2, r4, r2
   1279c:	adds	r4, r6, r0
   127a0:	adc	r5, r7, r1
   127a4:	cmp	r2, #0
   127a8:	moveq	r5, r7
   127ac:	moveq	r4, r6
   127b0:	movw	r0, #45396	; 0xb154
   127b4:	movt	r0, #2
   127b8:	ldr	r0, [r0]
   127bc:	bl	11588 <strlen@plt>
   127c0:	mov	r9, r0
   127c4:	mov	r7, #0
   127c8:	mov	r6, #0
   127cc:	mov	r0, r4
   127d0:	mov	r1, r5
   127d4:	mov	r2, r9
   127d8:	mov	r3, #0
   127dc:	bl	19408 <__assert_fail@plt+0x7cf4>
   127e0:	adds	r7, r7, #1
   127e4:	adc	r6, r6, #0
   127e8:	subs	r2, r4, r9
   127ec:	mov	r4, r0
   127f0:	sbcs	r2, r5, #0
   127f4:	mov	r5, r1
   127f8:	bcs	127cc <__assert_fail@plt+0x10b8>
   127fc:	ldr	r5, [sp, #96]	; 0x60
   12800:	movw	r0, #46344	; 0xb508
   12804:	mov	r1, #1
   12808:	movt	r0, #2
   1280c:	strb	r1, [r0]
   12810:	movw	r1, #45944	; 0xb378
   12814:	movt	r1, #2
   12818:	ldr	r4, [r1]
   1281c:	cmp	r4, #0
   12820:	beq	12844 <__assert_fail@plt+0x1130>
   12824:	subs	r0, r4, r7
   12828:	rscs	r0, r6, #0
   1282c:	bcc	13da0 <__assert_fail@plt+0x268c>
   12830:	movw	r0, #46344	; 0xb508
   12834:	mov	r1, #1
   12838:	movt	r0, #2
   1283c:	strb	r1, [r0]
   12840:	b	12858 <__assert_fail@plt+0x1144>
   12844:	rsbs	r0, r7, #2
   12848:	rscs	r0, r6, #0
   1284c:	movcs	r7, #2
   12850:	mov	r4, r7
   12854:	str	r7, [r1]
   12858:	movw	r6, #45912	; 0xb358
   1285c:	ldr	r0, [sp, #92]	; 0x5c
   12860:	ldr	sl, [sp, #100]	; 0x64
   12864:	movt	r6, #2
   12868:	ldr	r1, [r6]
   1286c:	cmp	r1, r0
   12870:	bge	12894 <__assert_fail@plt+0x1180>
   12874:	ldr	r2, [sp, #88]	; 0x58
   12878:	add	r0, r1, #1
   1287c:	str	r0, [r6]
   12880:	ldr	r1, [r2, r1, lsl #2]
   12884:	movw	r2, #45936	; 0xb370
   12888:	movt	r2, #2
   1288c:	str	r1, [r2]
   12890:	b	12898 <__assert_fail@plt+0x1184>
   12894:	mov	r0, r1
   12898:	ldr	r1, [sp, #92]	; 0x5c
   1289c:	cmp	r0, r1
   128a0:	bge	128c4 <__assert_fail@plt+0x11b0>
   128a4:	ldr	r2, [sp, #88]	; 0x58
   128a8:	add	r1, r0, #1
   128ac:	str	r1, [r6]
   128b0:	ldr	r0, [r2, r0, lsl #2]
   128b4:	movw	r2, #45940	; 0xb374
   128b8:	movt	r2, #2
   128bc:	str	r0, [r2]
   128c0:	b	128c8 <__assert_fail@plt+0x11b4>
   128c4:	mov	r1, r0
   128c8:	ldr	r0, [sp, #92]	; 0x5c
   128cc:	cmp	r1, r0
   128d0:	blt	13d24 <__assert_fail@plt+0x2610>
   128d4:	movw	r0, #45956	; 0xb384
   128d8:	movt	r0, #2
   128dc:	ldr	r0, [r0]
   128e0:	cmp	r0, #0
   128e4:	beq	128f4 <__assert_fail@plt+0x11e0>
   128e8:	bl	11588 <strlen@plt>
   128ec:	cmp	r0, r4
   128f0:	bhi	13dc4 <__assert_fail@plt+0x26b0>
   128f4:	movw	r0, #45936	; 0xb370
   128f8:	movw	r1, #43097	; 0xa859
   128fc:	movt	r0, #2
   12900:	movt	r1, #1
   12904:	ldr	r4, [r0]
   12908:	mov	r0, r4
   1290c:	bl	113a8 <strcmp@plt>
   12910:	cmp	r0, #0
   12914:	beq	12934 <__assert_fail@plt+0x1220>
   12918:	mov	r0, #0
   1291c:	mov	r1, r4
   12920:	mov	r2, #0
   12924:	mov	r3, #0
   12928:	bl	151a8 <__assert_fail@plt+0x3a94>
   1292c:	cmn	r0, #1
   12930:	ble	13dd0 <__assert_fail@plt+0x26bc>
   12934:	movw	r9, #45976	; 0xb398
   12938:	mov	r0, #3
   1293c:	mov	r1, #0
   12940:	movt	r9, #2
   12944:	mov	r2, r9
   12948:	bl	11498 <__fxstat64@plt>
   1294c:	cmp	r0, #0
   12950:	bne	13b98 <__assert_fail@plt+0x2484>
   12954:	ldr	r1, [sp, #80]	; 0x50
   12958:	cmp	r1, #0
   1295c:	bne	12994 <__assert_fail@plt+0x1280>
   12960:	ldr	r0, [r9, #56]	; 0x38
   12964:	mov	r2, #0
   12968:	mov	r1, #0
   1296c:	cmp	r0, #536870913	; 0x20000001
   12970:	movwcc	r2, #1
   12974:	cmp	r0, #0
   12978:	movwgt	r1, #1
   1297c:	ands	r1, r1, r2
   12980:	mov	r1, r0
   12984:	moveq	r1, #512	; 0x200
   12988:	moveq	r1, #131072	; 0x20000
   1298c:	cmp	r0, #131072	; 0x20000
   12990:	movlt	r1, #131072	; 0x20000
   12994:	ldr	r0, [sp, #64]	; 0x40
   12998:	str	r1, [sp, #80]	; 0x50
   1299c:	add	r1, r1, #1
   129a0:	bl	17b14 <__assert_fail@plt+0x6400>
   129a4:	cmp	r8, #1
   129a8:	str	r0, [sp, #88]	; 0x58
   129ac:	bhi	12b48 <__assert_fail@plt+0x1434>
   129b0:	mov	r0, #1
   129b4:	mov	r2, #0
   129b8:	mov	r3, #0
   129bc:	mov	r4, #0
   129c0:	str	r0, [sp]
   129c4:	mov	r0, #0
   129c8:	bl	114bc <lseek64@plt>
   129cc:	cmp	r1, #0
   129d0:	blt	13e08 <__assert_fail@plt+0x26f4>
   129d4:	ldr	r2, [sp, #80]	; 0x50
   129d8:	mov	r8, r0
   129dc:	mov	r6, r1
   129e0:	mov	r7, #0
   129e4:	ldr	r0, [sp, #88]	; 0x58
   129e8:	sub	r2, r2, r4
   129ec:	add	r1, r0, r4
   129f0:	mov	r0, #0
   129f4:	bl	17174 <__assert_fail@plt+0x5a60>
   129f8:	cmp	r0, #0
   129fc:	beq	12b08 <__assert_fail@plt+0x13f4>
   12a00:	cmn	r0, #1
   12a04:	beq	13e1c <__assert_fail@plt+0x2708>
   12a08:	ldr	r2, [sp, #80]	; 0x50
   12a0c:	adds	r4, r4, r0
   12a10:	adc	r7, r7, #0
   12a14:	subs	r0, r4, r2
   12a18:	sbcs	r0, r7, #0
   12a1c:	bcc	129e4 <__assert_fail@plt+0x12d0>
   12a20:	ldrd	r0, [r9, #48]	; 0x30
   12a24:	orrs	r2, r0, r1
   12a28:	beq	13ef0 <__assert_fail@plt+0x27dc>
   12a2c:	ldr	r2, [r9, #16]
   12a30:	adds	r8, r4, r8
   12a34:	adc	sl, r7, r6
   12a38:	and	r2, r2, #53248	; 0xd000
   12a3c:	orr	r2, r2, #8192	; 0x2000
   12a40:	cmp	r2, #40960	; 0xa000
   12a44:	bne	12a54 <__assert_fail@plt+0x1340>
   12a48:	subs	r2, r0, r8
   12a4c:	sbcs	r2, r1, sl
   12a50:	bge	12adc <__assert_fail@plt+0x13c8>
   12a54:	mov	r0, #2
   12a58:	mov	r2, #0
   12a5c:	mov	r3, #0
   12a60:	str	r0, [sp]
   12a64:	mov	r0, #0
   12a68:	bl	114bc <lseek64@plt>
   12a6c:	cmp	r1, #0
   12a70:	blt	13e1c <__assert_fail@plt+0x2708>
   12a74:	mov	r2, r0
   12a78:	mov	r6, r1
   12a7c:	eor	r0, r0, r8
   12a80:	eor	r1, r1, sl
   12a84:	orrs	r0, r0, r1
   12a88:	mov	r1, sl
   12a8c:	mov	r0, r8
   12a90:	beq	12adc <__assert_fail@plt+0x13c8>
   12a94:	mov	r9, #0
   12a98:	str	r2, [sp, #92]	; 0x5c
   12a9c:	mov	r0, #0
   12aa0:	mov	r2, r8
   12aa4:	mov	r3, sl
   12aa8:	str	r9, [sp]
   12aac:	bl	114bc <lseek64@plt>
   12ab0:	ldr	r2, [sp, #92]	; 0x5c
   12ab4:	cmp	r1, #0
   12ab8:	blt	13e1c <__assert_fail@plt+0x2708>
   12abc:	subs	r0, r2, r8
   12ac0:	sbcs	r0, r6, sl
   12ac4:	movwlt	r9, #1
   12ac8:	cmp	r9, #0
   12acc:	movne	r6, sl
   12ad0:	movne	r2, r8
   12ad4:	mov	r0, r2
   12ad8:	mov	r1, r6
   12adc:	subs	r0, r0, r8
   12ae0:	sbc	r1, r1, sl
   12ae4:	adds	r4, r0, r4
   12ae8:	mvn	r0, #-2147483648	; 0x80000000
   12aec:	adc	r7, r1, r7
   12af0:	mvn	r1, r4
   12af4:	eor	r0, r7, r0
   12af8:	orrs	r0, r1, r0
   12afc:	beq	13ef0 <__assert_fail@plt+0x27dc>
   12b00:	cmn	r7, #1
   12b04:	ble	13e1c <__assert_fail@plt+0x2708>
   12b08:	cmn	r5, #1
   12b0c:	ble	13e68 <__assert_fail@plt+0x2754>
   12b10:	ldr	r6, [sp, #80]	; 0x50
   12b14:	ldr	sl, [sp, #100]	; 0x64
   12b18:	subs	r0, r4, r6
   12b1c:	sbcs	r0, r7, r6, asr #31
   12b20:	movlt	r6, r4
   12b24:	subs	r1, sl, r4
   12b28:	mov	r0, #0
   12b2c:	sbcs	r1, r5, r7
   12b30:	movwcc	r0, #1
   12b34:	cmp	r0, #0
   12b38:	moveq	r7, r5
   12b3c:	moveq	r4, sl
   12b40:	str	r4, [sp, #60]	; 0x3c
   12b44:	b	12b58 <__assert_fail@plt+0x1444>
   12b48:	mvn	r0, #0
   12b4c:	mvn	r7, #-2147483648	; 0x80000000
   12b50:	mvn	r6, #0
   12b54:	str	r0, [sp, #60]	; 0x3c
   12b58:	movw	r0, #45964	; 0xb38c
   12b5c:	ldr	r4, [sp, #84]	; 0x54
   12b60:	movt	r0, #2
   12b64:	ldr	r0, [r0]
   12b68:	cmp	r0, #0
   12b6c:	beq	12bc0 <__assert_fail@plt+0x14ac>
   12b70:	movw	r0, #46080	; 0xb400
   12b74:	movt	r0, #2
   12b78:	bl	11678 <sigemptyset@plt>
   12b7c:	add	r2, sp, #104	; 0x68
   12b80:	mov	r0, #13
   12b84:	mov	r1, #0
   12b88:	bl	114a4 <sigaction@plt>
   12b8c:	ldr	r0, [sp, #104]	; 0x68
   12b90:	cmp	r0, #1
   12b94:	beq	12ba8 <__assert_fail@plt+0x1494>
   12b98:	movw	r0, #46080	; 0xb400
   12b9c:	mov	r1, #13
   12ba0:	movt	r0, #2
   12ba4:	bl	11534 <sigaddset@plt>
   12ba8:	movw	r1, #46080	; 0xb400
   12bac:	movw	r2, #46208	; 0xb480
   12bb0:	mov	r0, #0
   12bb4:	movt	r1, #2
   12bb8:	movt	r2, #2
   12bbc:	bl	113d8 <sigprocmask@plt>
   12bc0:	sub	r0, r4, #1
   12bc4:	cmp	r0, #6
   12bc8:	bhi	13d4c <__assert_fail@plt+0x2638>
   12bcc:	add	r1, pc, #4
   12bd0:	ldr	r3, [sp, #80]	; 0x50
   12bd4:	ldr	pc, [r1, r0, lsl #2]
   12bd8:	ldrdeq	r2, [r1], -r4
   12bdc:	strdeq	r2, [r1], -r8
   12be0:	strdeq	r2, [r1], -r4
   12be4:	strdeq	r2, [r1], -r4
   12be8:	andeq	r3, r1, r4, lsr r1
   12bec:	andeq	r3, r1, r4, rrx
   12bf0:	andeq	r3, r1, r4, lsr #2
   12bf4:	mov	r4, #0
   12bf8:	mov	r9, #1
   12bfc:	mov	r7, #0
   12c00:	mov	r2, r3
   12c04:	ldr	sl, [sp, #88]	; 0x58
   12c08:	mov	r0, #0
   12c0c:	mov	r1, sl
   12c10:	bl	17174 <__assert_fail@plt+0x5a60>
   12c14:	cmn	r0, #1
   12c18:	beq	13b98 <__assert_fail@plt+0x2484>
   12c1c:	mov	r1, r0
   12c20:	movw	r0, #45392	; 0xb150
   12c24:	mov	r8, sl
   12c28:	movt	r0, #2
   12c2c:	str	r1, [sp, #92]	; 0x5c
   12c30:	ldr	r6, [r0]
   12c34:	mov	r0, sl
   12c38:	strb	r6, [r8, r1]!
   12c3c:	b	12c44 <__assert_fail@plt+0x1530>
   12c40:	mov	r0, r5
   12c44:	mov	r1, r6
   12c48:	bl	11480 <rawmemchr@plt>
   12c4c:	cmp	r0, r8
   12c50:	beq	12ca4 <__assert_fail@plt+0x1590>
   12c54:	add	r5, r0, #1
   12c58:	ldr	r0, [sp, #100]	; 0x64
   12c5c:	adds	r4, r4, #1
   12c60:	adc	r7, r7, #0
   12c64:	subs	r0, r4, r0
   12c68:	ldr	r0, [sp, #96]	; 0x60
   12c6c:	sbcs	r0, r7, r0
   12c70:	bcc	12c40 <__assert_fail@plt+0x152c>
   12c74:	sub	r2, r5, sl
   12c78:	and	r0, r9, #1
   12c7c:	mov	r1, sl
   12c80:	bl	14408 <__assert_fail@plt+0x2cf4>
   12c84:	movw	r0, #45392	; 0xb150
   12c88:	mov	r4, #0
   12c8c:	mov	r9, #1
   12c90:	mov	sl, r5
   12c94:	mov	r7, #0
   12c98:	movt	r0, #2
   12c9c:	ldr	r6, [r0]
   12ca0:	b	12c40 <__assert_fail@plt+0x152c>
   12ca4:	cmp	r8, sl
   12ca8:	beq	12cc0 <__assert_fail@plt+0x15ac>
   12cac:	sub	r2, r8, sl
   12cb0:	and	r0, r9, #1
   12cb4:	mov	r1, sl
   12cb8:	bl	14408 <__assert_fail@plt+0x2cf4>
   12cbc:	mov	r9, #0
   12cc0:	ldr	r0, [sp, #92]	; 0x5c
   12cc4:	ldr	r2, [sp, #80]	; 0x50
   12cc8:	cmp	r0, #0
   12ccc:	bne	12c04 <__assert_fail@plt+0x14f0>
   12cd0:	b	13aec <__assert_fail@plt+0x23d8>
   12cd4:	ldr	r2, [sp, #88]	; 0x58
   12cd8:	mov	r0, #0
   12cdc:	mov	r1, r5
   12ce0:	str	r0, [sp, #8]
   12ce4:	str	r0, [sp, #12]
   12ce8:	mvn	r0, #0
   12cec:	str	r0, [sp]
   12cf0:	mov	r0, sl
   12cf4:	b	135bc <__assert_fail@plt+0x1ea8>
   12cf8:	mvn	r0, r3
   12cfc:	mov	r6, #0
   12d00:	mov	r5, #0
   12d04:	mov	r7, #0
   12d08:	mov	r2, r3
   12d0c:	str	r0, [sp, #48]	; 0x30
   12d10:	mov	r0, #0
   12d14:	str	r0, [sp, #64]	; 0x40
   12d18:	mov	r0, #0
   12d1c:	str	r0, [sp, #60]	; 0x3c
   12d20:	mov	r0, #0
   12d24:	str	r0, [sp, #92]	; 0x5c
   12d28:	ldr	r8, [sp, #88]	; 0x58
   12d2c:	mov	r0, #0
   12d30:	mov	r1, r8
   12d34:	bl	17174 <__assert_fail@plt+0x5a60>
   12d38:	cmp	r0, #0
   12d3c:	beq	13030 <__assert_fail@plt+0x191c>
   12d40:	cmn	r0, #1
   12d44:	mov	sl, r0
   12d48:	str	r0, [sp, #44]	; 0x2c
   12d4c:	beq	13b98 <__assert_fail@plt+0x2484>
   12d50:	ldr	r0, [sp, #100]	; 0x64
   12d54:	ldr	r1, [sp, #92]	; 0x5c
   12d58:	subs	r0, r0, r1
   12d5c:	ldr	r1, [sp, #96]	; 0x60
   12d60:	sbc	r1, r1, r7
   12d64:	subs	r2, r0, r5
   12d68:	sbc	r1, r1, #0
   12d6c:	subs	r0, sl, r2
   12d70:	mov	r9, r2
   12d74:	str	r2, [sp, #72]	; 0x48
   12d78:	rscs	r0, r1, #0
   12d7c:	str	r1, [sp, #68]	; 0x44
   12d80:	add	r1, r8, r2
   12d84:	mov	r0, #0
   12d88:	sub	r1, r1, #1
   12d8c:	movwcc	r0, #1
   12d90:	cmp	r0, #0
   12d94:	movw	r0, #45392	; 0xb150
   12d98:	movwne	r1, #0
   12d9c:	movt	r0, #2
   12da0:	movne	r2, sl
   12da4:	movwne	r9, #0
   12da8:	str	r1, [sp, #84]	; 0x54
   12dac:	ldr	r1, [r0]
   12db0:	mov	r0, r8
   12db4:	bl	115b8 <memrchr@plt>
   12db8:	mov	r4, r0
   12dbc:	cmp	r5, #0
   12dc0:	beq	12e60 <__assert_fail@plt+0x174c>
   12dc4:	ldr	r0, [sp, #92]	; 0x5c
   12dc8:	orrs	r0, r0, r7
   12dcc:	beq	12dd8 <__assert_fail@plt+0x16c4>
   12dd0:	cmp	r4, #0
   12dd4:	beq	12e44 <__assert_fail@plt+0x1730>
   12dd8:	str	r8, [sp, #56]	; 0x38
   12ddc:	ldr	r8, [sp, #60]	; 0x3c
   12de0:	clz	r0, r0
   12de4:	mov	r2, r5
   12de8:	str	r6, [sp, #52]	; 0x34
   12dec:	lsr	r0, r0, #5
   12df0:	mov	r1, r8
   12df4:	bl	14408 <__assert_fail@plt+0x2cf4>
   12df8:	ldr	r0, [sp, #92]	; 0x5c
   12dfc:	ldr	r6, [sp, #80]	; 0x50
   12e00:	adds	r0, r0, r5
   12e04:	adc	r7, r7, #0
   12e08:	cmp	r5, r6
   12e0c:	str	r0, [sp, #92]	; 0x5c
   12e10:	str	r7, [sp, #76]	; 0x4c
   12e14:	bls	12e28 <__assert_fail@plt+0x1714>
   12e18:	mov	r0, r8
   12e1c:	mov	r1, r6
   12e20:	bl	17bec <__assert_fail@plt+0x64d8>
   12e24:	str	r0, [sp, #60]	; 0x3c
   12e28:	str	r6, [sp, #64]	; 0x40
   12e2c:	ldr	r8, [sp, #56]	; 0x38
   12e30:	ldr	r6, [sp, #52]	; 0x34
   12e34:	cmp	r4, #0
   12e38:	bne	12e6c <__assert_fail@plt+0x1758>
   12e3c:	ldr	r7, [sp, #76]	; 0x4c
   12e40:	mov	r5, #0
   12e44:	tst	r6, #1
   12e48:	ldr	r6, [sp, #84]	; 0x54
   12e4c:	mov	r4, #1
   12e50:	str	r5, [sp, #76]	; 0x4c
   12e54:	beq	12ed8 <__assert_fail@plt+0x17c4>
   12e58:	mov	r1, sl
   12e5c:	b	12f30 <__assert_fail@plt+0x181c>
   12e60:	str	r7, [sp, #76]	; 0x4c
   12e64:	cmp	r4, #0
   12e68:	beq	12e3c <__assert_fail@plt+0x1728>
   12e6c:	sub	r0, r4, r8
   12e70:	mov	r1, r8
   12e74:	ldr	r7, [sp, #92]	; 0x5c
   12e78:	ldr	r8, [sp, #76]	; 0x4c
   12e7c:	add	r5, r0, #1
   12e80:	mov	r2, r5
   12e84:	orr	r0, r7, r8
   12e88:	clz	r0, r0
   12e8c:	lsr	r0, r0, #5
   12e90:	bl	14408 <__assert_fail@plt+0x2cf4>
   12e94:	ldr	r2, [sp, #72]	; 0x48
   12e98:	ldr	r3, [sp, #68]	; 0x44
   12e9c:	ldr	r6, [sp, #84]	; 0x54
   12ea0:	mov	r1, sl
   12ea4:	subs	r0, sl, r2
   12ea8:	sub	sl, sl, r5
   12eac:	rscs	r0, r3, #0
   12eb0:	subcs	r9, r9, r5
   12eb4:	adds	r7, r7, r5
   12eb8:	mov	r0, #0
   12ebc:	str	r7, [sp, #92]	; 0x5c
   12ec0:	mov	r7, r8
   12ec4:	str	r0, [sp, #76]	; 0x4c
   12ec8:	adc	r7, r8, #0
   12ecc:	add	r8, r4, #1
   12ed0:	mov	r4, #1
   12ed4:	b	12f38 <__assert_fail@plt+0x1824>
   12ed8:	mov	r5, r8
   12edc:	ldr	r8, [sp, #92]	; 0x5c
   12ee0:	cmp	r6, #0
   12ee4:	mov	r4, sl
   12ee8:	movne	r4, r9
   12eec:	mov	r1, r5
   12ef0:	mov	r2, r4
   12ef4:	orr	r0, r8, r7
   12ef8:	clz	r0, r0
   12efc:	lsr	r0, r0, #5
   12f00:	bl	14408 <__assert_fail@plt+0x2cf4>
   12f04:	ldr	r6, [sp, #84]	; 0x54
   12f08:	adds	r8, r8, r4
   12f0c:	add	r5, r5, r4
   12f10:	mov	r1, sl
   12f14:	sub	sl, sl, r4
   12f18:	mov	r4, #0
   12f1c:	adc	r7, r7, #0
   12f20:	str	r8, [sp, #92]	; 0x5c
   12f24:	mov	r8, r5
   12f28:	cmp	r6, #0
   12f2c:	movwne	r9, #0
   12f30:	ldr	r2, [sp, #72]	; 0x48
   12f34:	ldr	r3, [sp, #68]	; 0x44
   12f38:	subs	r0, r1, r2
   12f3c:	mov	r1, sl
   12f40:	mov	r2, r9
   12f44:	rscs	r0, r3, #0
   12f48:	mov	r3, r6
   12f4c:	mov	r0, #0
   12f50:	movwcc	r0, #1
   12f54:	cmp	sl, #0
   12f58:	movwne	r1, #1
   12f5c:	cmp	r9, #0
   12f60:	movwne	r2, #1
   12f64:	cmp	r6, #0
   12f68:	movwne	r3, #1
   12f6c:	tst	r3, r2
   12f70:	andseq	r0, r0, r1
   12f74:	beq	12fc0 <__assert_fail@plt+0x18ac>
   12f78:	ldr	r0, [sp, #64]	; 0x40
   12f7c:	ldr	r1, [sp, #76]	; 0x4c
   12f80:	ldr	r2, [sp, #80]	; 0x50
   12f84:	cmp	r6, #0
   12f88:	moveq	r9, sl
   12f8c:	sub	r0, r0, r1
   12f90:	cmp	r0, r9
   12f94:	bcs	12fcc <__assert_fail@plt+0x18b8>
   12f98:	ldr	r0, [sp, #48]	; 0x30
   12f9c:	ldr	r1, [sp, #64]	; 0x40
   12fa0:	cmp	r1, r0
   12fa4:	ldr	r0, [sp, #60]	; 0x3c
   12fa8:	bhi	13d08 <__assert_fail@plt+0x25f4>
   12fac:	ldr	r1, [sp, #64]	; 0x40
   12fb0:	add	r1, r1, r2
   12fb4:	str	r1, [sp, #64]	; 0x40
   12fb8:	bl	17bec <__assert_fail@plt+0x64d8>
   12fbc:	b	12fd0 <__assert_fail@plt+0x18bc>
   12fc0:	ldr	r2, [sp, #80]	; 0x50
   12fc4:	ldr	r5, [sp, #76]	; 0x4c
   12fc8:	b	12ffc <__assert_fail@plt+0x18e8>
   12fcc:	ldr	r0, [sp, #60]	; 0x3c
   12fd0:	ldr	r5, [sp, #76]	; 0x4c
   12fd4:	str	r0, [sp, #60]	; 0x3c
   12fd8:	mov	r1, r8
   12fdc:	mov	r2, r9
   12fe0:	add	r0, r0, r5
   12fe4:	bl	11408 <memcpy@plt>
   12fe8:	ldr	r6, [sp, #84]	; 0x54
   12fec:	ldr	r2, [sp, #80]	; 0x50
   12ff0:	add	r8, r8, r9
   12ff4:	sub	sl, sl, r9
   12ff8:	add	r5, r9, r5
   12ffc:	ldr	r0, [sp, #92]	; 0x5c
   13000:	cmp	r6, #0
   13004:	movwne	r7, #0
   13008:	movwne	r0, #0
   1300c:	cmp	sl, #0
   13010:	str	r0, [sp, #92]	; 0x5c
   13014:	clz	r0, r6
   13018:	lsr	r0, r0, #5
   1301c:	and	r6, r4, r0
   13020:	bne	12d50 <__assert_fail@plt+0x163c>
   13024:	ldr	r0, [sp, #44]	; 0x2c
   13028:	cmp	r0, #0
   1302c:	bne	12d28 <__assert_fail@plt+0x1614>
   13030:	ldr	r4, [sp, #60]	; 0x3c
   13034:	cmp	r5, #0
   13038:	beq	13058 <__assert_fail@plt+0x1944>
   1303c:	ldr	r0, [sp, #92]	; 0x5c
   13040:	mov	r1, r4
   13044:	mov	r2, r5
   13048:	orr	r0, r0, r7
   1304c:	clz	r0, r0
   13050:	lsr	r0, r0, #5
   13054:	bl	14408 <__assert_fail@plt+0x2cf4>
   13058:	mov	r0, r4
   1305c:	bl	1526c <__assert_fail@plt+0x3b58>
   13060:	b	13aec <__assert_fail@plt+0x23d8>
   13064:	ldr	r2, [sp, #72]	; 0x48
   13068:	subs	r3, sl, #1
   1306c:	ldr	r0, [sp, #60]	; 0x3c
   13070:	sbc	r1, r5, #0
   13074:	subs	r2, sl, r2
   13078:	ldr	r2, [sp, #68]	; 0x44
   1307c:	sbcs	r2, r5, r2
   13080:	bcc	13eb0 <__assert_fail@plt+0x279c>
   13084:	subs	r2, r3, r0
   13088:	sbcs	r1, r1, r7
   1308c:	bcs	13eb0 <__assert_fail@plt+0x279c>
   13090:	mov	r1, r7
   13094:	mov	r2, sl
   13098:	mov	r3, r5
   1309c:	str	r7, [sp, #24]
   130a0:	bl	19408 <__assert_fail@plt+0x7cf4>
   130a4:	ldr	r7, [sp, #72]	; 0x48
   130a8:	subs	r5, r0, #1
   130ac:	mov	sl, #0
   130b0:	str	r0, [sp, #52]	; 0x34
   130b4:	str	r1, [sp, #48]	; 0x30
   130b8:	sbc	r9, r1, #0
   130bc:	subs	r2, r7, #2
   130c0:	ldr	r2, [sp, #68]	; 0x44
   130c4:	sbcs	r3, r2, #0
   130c8:	bcc	131f8 <__assert_fail@plt+0x1ae4>
   130cc:	subs	r3, r7, #1
   130d0:	sbc	r2, r2, #0
   130d4:	umull	r5, r7, r0, r3
   130d8:	mla	r0, r0, r2, r7
   130dc:	subs	r5, r5, #1
   130e0:	mov	r7, r3
   130e4:	str	r2, [sp, #44]	; 0x2c
   130e8:	mla	r1, r1, r3, r0
   130ec:	sbc	r4, r1, #0
   130f0:	subs	r0, r5, r6
   130f4:	sbcs	r0, r4, #0
   130f8:	bge	13694 <__assert_fail@plt+0x1f80>
   130fc:	ldr	r0, [sp, #88]	; 0x58
   13100:	sub	r6, r6, r5
   13104:	mov	r2, r6
   13108:	add	r1, r0, r5
   1310c:	bl	113e4 <memmove@plt>
   13110:	mov	lr, r4
   13114:	mov	ip, r5
   13118:	mov	r9, r4
   1311c:	mov	r3, r7
   13120:	b	136c8 <__assert_fail@plt+0x1fb4>
   13124:	ldr	r0, [sp, #76]	; 0x4c
   13128:	cmp	r0, #0
   1312c:	beq	13210 <__assert_fail@plt+0x1afc>
   13130:	b	13278 <__assert_fail@plt+0x1b64>
   13134:	ldr	r0, [sp, #76]	; 0x4c
   13138:	cmp	r0, #0
   1313c:	beq	13594 <__assert_fail@plt+0x1e80>
   13140:	ldr	r0, [sp, #72]	; 0x48
   13144:	subs	r1, r0, #1
   13148:	ldr	r0, [sp, #68]	; 0x44
   1314c:	str	r1, [sp, #100]	; 0x64
   13150:	sbc	r2, r0, #0
   13154:	subs	r0, r1, sl
   13158:	mov	r0, r2
   1315c:	str	r2, [sp, #92]	; 0x5c
   13160:	sbcs	r0, r2, r5
   13164:	ldr	r0, [sp, #60]	; 0x3c
   13168:	bcs	13ed0 <__assert_fail@plt+0x27bc>
   1316c:	mov	r9, r7
   13170:	subs	r1, r0, sl
   13174:	mov	r7, r5
   13178:	sbcs	r1, r9, r5
   1317c:	bcc	13ed0 <__assert_fail@plt+0x27bc>
   13180:	mov	r1, r9
   13184:	mov	r2, sl
   13188:	mov	r3, r7
   1318c:	str	r0, [sp, #60]	; 0x3c
   13190:	bl	19408 <__assert_fail@plt+0x7cf4>
   13194:	ldr	r5, [sp, #72]	; 0x48
   13198:	ldr	r4, [sp, #68]	; 0x44
   1319c:	eor	r3, r5, sl
   131a0:	eor	r7, r4, r7
   131a4:	umull	r8, r2, r0, r5
   131a8:	orrs	r3, r3, r7
   131ac:	mla	r2, r0, r4, r2
   131b0:	ldr	r3, [sp, #100]	; 0x64
   131b4:	mlane	r9, r1, r5, r2
   131b8:	ldr	r5, [sp, #92]	; 0x5c
   131bc:	mov	sl, r9
   131c0:	umull	r7, r2, r0, r3
   131c4:	mla	r0, r0, r5, r2
   131c8:	mla	r5, r1, r3, r0
   131cc:	ldr	r0, [sp, #60]	; 0x3c
   131d0:	moveq	r8, r0
   131d4:	subs	r0, r7, r6
   131d8:	sbcs	r0, r5, #0
   131dc:	bge	135c4 <__assert_fail@plt+0x1eb0>
   131e0:	ldr	r0, [sp, #88]	; 0x58
   131e4:	sub	r4, r6, r7
   131e8:	mov	r2, r4
   131ec:	add	r1, r0, r7
   131f0:	bl	113e4 <memmove@plt>
   131f4:	b	135e8 <__assert_fail@plt+0x1ed4>
   131f8:	mov	r0, #0
   131fc:	mov	r3, #1
   13200:	mov	ip, #0
   13204:	mov	lr, #0
   13208:	str	r0, [sp, #44]	; 0x2c
   1320c:	b	136c8 <__assert_fail@plt+0x1fb4>
   13210:	cmp	r5, #0
   13214:	bne	13d08 <__assert_fail@plt+0x25f4>
   13218:	mov	r0, sl
   1321c:	mov	r1, #16
   13220:	bl	17c74 <__assert_fail@plt+0x6560>
   13224:	ldr	r5, [sp, #96]	; 0x60
   13228:	movw	r8, #46340	; 0xb504
   1322c:	mov	r6, sl
   13230:	mov	sl, #0
   13234:	mvn	r9, #0
   13238:	mov	r4, r0
   1323c:	mov	r7, #0
   13240:	movt	r8, #2
   13244:	bl	1451c <__assert_fail@plt+0x2e08>
   13248:	ldr	r0, [r8]
   1324c:	bl	180c4 <__assert_fail@plt+0x69b0>
   13250:	mov	r1, r4
   13254:	str	r0, [r1, r7, lsl #4]!
   13258:	add	r7, r7, #1
   1325c:	subs	r0, r7, r6
   13260:	stmib	r1, {r9, sl}
   13264:	str	sl, [r1, #12]
   13268:	rscs	r0, r5, #0
   1326c:	bcc	13244 <__assert_fail@plt+0x1b30>
   13270:	mov	sl, r6
   13274:	str	r4, [sp, #48]	; 0x30
   13278:	mov	r0, #1
   1327c:	str	sl, [sp, #100]	; 0x64
   13280:	ldr	r6, [sp, #68]	; 0x44
   13284:	ldr	sl, [sp, #48]	; 0x30
   13288:	str	r0, [sp, #92]	; 0x5c
   1328c:	mov	r0, #0
   13290:	str	r0, [sp, #84]	; 0x54
   13294:	mov	r0, #0
   13298:	str	r0, [sp, #64]	; 0x40
   1329c:	mov	r0, #0
   132a0:	str	r0, [sp, #56]	; 0x38
   132a4:	mov	r0, #0
   132a8:	str	r0, [sp, #52]	; 0x34
   132ac:	mov	r0, #0
   132b0:	str	r0, [sp, #44]	; 0x2c
   132b4:	b	13558 <__assert_fail@plt+0x1e44>
   132b8:	cmn	r0, #1
   132bc:	beq	13b98 <__assert_fail@plt+0x2484>
   132c0:	ldr	r8, [sp, #88]	; 0x58
   132c4:	add	r5, r8, r0
   132c8:	str	r5, [sp, #60]	; 0x3c
   132cc:	movw	r0, #45392	; 0xb150
   132d0:	sub	r2, r5, r8
   132d4:	mov	r4, r8
   132d8:	movt	r0, #2
   132dc:	ldr	r1, [r0]
   132e0:	mov	r0, r8
   132e4:	bl	11630 <memchr@plt>
   132e8:	cmp	r0, #0
   132ec:	mov	r8, r5
   132f0:	mov	r7, r0
   132f4:	addne	r8, r0, #1
   132f8:	ldr	r0, [sp, #76]	; 0x4c
   132fc:	sub	r9, r8, r4
   13300:	cmp	r0, #0
   13304:	beq	13358 <__assert_fail@plt+0x1c44>
   13308:	ldr	r0, [sp, #72]	; 0x48
   1330c:	ldr	r1, [sp, #92]	; 0x5c
   13310:	ldr	r5, [sp, #96]	; 0x60
   13314:	eor	r0, r1, r0
   13318:	ldr	r1, [sp, #84]	; 0x54
   1331c:	eor	r1, r1, r6
   13320:	orrs	r0, r0, r1
   13324:	bne	134e8 <__assert_fail@plt+0x1dd4>
   13328:	movw	r0, #45952	; 0xb380
   1332c:	movt	r0, #2
   13330:	ldrb	r0, [r0]
   13334:	cmp	r0, #1
   13338:	bne	134c4 <__assert_fail@plt+0x1db0>
   1333c:	mov	r0, #1
   13340:	mov	r1, r4
   13344:	mov	r2, r9
   13348:	bl	15338 <__assert_fail@plt+0x3c24>
   1334c:	cmp	r0, r9
   13350:	beq	134e8 <__assert_fail@plt+0x1dd4>
   13354:	b	13d60 <__assert_fail@plt+0x264c>
   13358:	ldr	r5, [sp, #64]	; 0x40
   1335c:	ldr	r2, [sp, #100]	; 0x64
   13360:	mov	r0, sl
   13364:	mov	r1, r5
   13368:	bl	14dbc <__assert_fail@plt+0x36a8>
   1336c:	mov	r6, r0
   13370:	movw	r0, #45952	; 0xb380
   13374:	movt	r0, #2
   13378:	ldrb	r0, [r0]
   1337c:	cmp	r0, #1
   13380:	bne	133a4 <__assert_fail@plt+0x1c90>
   13384:	add	r0, sl, r5, lsl #4
   13388:	mov	r1, r4
   1338c:	mov	r2, r9
   13390:	ldr	r0, [r0, #4]
   13394:	bl	15338 <__assert_fail@plt+0x3c24>
   13398:	cmp	r0, r9
   1339c:	bne	133c4 <__assert_fail@plt+0x1cb0>
   133a0:	b	133e8 <__assert_fail@plt+0x1cd4>
   133a4:	add	r0, sl, r5, lsl #4
   133a8:	mov	r1, r9
   133ac:	mov	r2, #1
   133b0:	ldr	r3, [r0, #8]
   133b4:	mov	r0, r4
   133b8:	bl	11438 <fwrite_unlocked@plt>
   133bc:	cmp	r0, #1
   133c0:	beq	133e8 <__assert_fail@plt+0x1cd4>
   133c4:	bl	115d0 <__errno_location@plt>
   133c8:	ldr	r4, [r0]
   133cc:	cmp	r4, #32
   133d0:	bne	13d0c <__assert_fail@plt+0x25f8>
   133d4:	movw	r0, #45964	; 0xb38c
   133d8:	movt	r0, #2
   133dc:	ldr	r0, [r0]
   133e0:	cmp	r0, #0
   133e4:	beq	13d0c <__assert_fail@plt+0x25f8>
   133e8:	ldr	r4, [sp, #56]	; 0x38
   133ec:	orr	r4, r4, r6
   133f0:	bl	115d0 <__errno_location@plt>
   133f4:	mov	r9, r0
   133f8:	ldr	r0, [r0]
   133fc:	str	r4, [sp, #56]	; 0x38
   13400:	subs	r6, r0, #32
   13404:	movw	r0, #45964	; 0xb38c
   13408:	movt	r0, #2
   1340c:	movwne	r6, #1
   13410:	tst	r4, #1
   13414:	ldr	r5, [r0]
   13418:	beq	1344c <__assert_fail@plt+0x1d38>
   1341c:	ldr	r0, [sp, #64]	; 0x40
   13420:	add	sl, sl, r0, lsl #4
   13424:	mov	r4, sl
   13428:	ldr	r0, [r4, #8]!
   1342c:	bl	150c4 <__assert_fail@plt+0x39b0>
   13430:	cmp	r0, #0
   13434:	bne	13d80 <__assert_fail@plt+0x266c>
   13438:	mov	r0, #0
   1343c:	str	r0, [r4]
   13440:	mvn	r0, #1
   13444:	str	r0, [sl, #4]
   13448:	ldr	sl, [sp, #48]	; 0x30
   1344c:	ldr	r3, [sp, #52]	; 0x34
   13450:	clz	r0, r5
   13454:	cmp	r7, #0
   13458:	lsr	r0, r0, #5
   1345c:	orr	r0, r6, r0
   13460:	orr	r3, r3, r0
   13464:	beq	13544 <__assert_fail@plt+0x1e30>
   13468:	ldr	r0, [sp, #64]	; 0x40
   1346c:	ldr	r1, [sp, #100]	; 0x64
   13470:	ldr	r6, [sp, #68]	; 0x44
   13474:	ldr	r5, [sp, #60]	; 0x3c
   13478:	mov	r2, r0
   1347c:	add	r2, r0, #1
   13480:	mov	r0, r2
   13484:	str	r2, [sp, #64]	; 0x40
   13488:	eor	r0, r1, r2
   1348c:	ldr	r2, [sp, #96]	; 0x60
   13490:	orrs	r0, r0, r2
   13494:	bne	1354c <__assert_fail@plt+0x1e38>
   13498:	tst	r3, #1
   1349c:	beq	13a74 <__assert_fail@plt+0x2360>
   134a0:	mov	r0, #1
   134a4:	str	r0, [sp, #44]	; 0x2c
   134a8:	mov	r0, #0
   134ac:	str	r0, [sp, #64]	; 0x40
   134b0:	mov	r0, #0
   134b4:	str	r0, [sp, #52]	; 0x34
   134b8:	cmp	r8, r5
   134bc:	bne	132cc <__assert_fail@plt+0x1bb8>
   134c0:	b	13558 <__assert_fail@plt+0x1e44>
   134c4:	movw	r0, #45924	; 0xb364
   134c8:	mov	r1, r9
   134cc:	mov	r2, #1
   134d0:	movt	r0, #2
   134d4:	ldr	r3, [r0]
   134d8:	mov	r0, r4
   134dc:	bl	11438 <fwrite_unlocked@plt>
   134e0:	cmp	r0, #1
   134e4:	bne	13d50 <__assert_fail@plt+0x263c>
   134e8:	cmp	r7, #0
   134ec:	beq	13534 <__assert_fail@plt+0x1e20>
   134f0:	ldr	r3, [sp, #84]	; 0x54
   134f4:	ldr	r0, [sp, #100]	; 0x64
   134f8:	ldr	r2, [sp, #92]	; 0x5c
   134fc:	eor	r0, r2, r0
   13500:	eor	r1, r3, r5
   13504:	adds	r2, r2, #1
   13508:	ldr	r5, [sp, #60]	; 0x3c
   1350c:	orr	r0, r0, r1
   13510:	adc	r3, r3, #0
   13514:	cmp	r0, #0
   13518:	moveq	r3, r0
   1351c:	movweq	r2, #1
   13520:	str	r3, [sp, #84]	; 0x54
   13524:	str	r2, [sp, #92]	; 0x5c
   13528:	cmp	r8, r5
   1352c:	bne	132cc <__assert_fail@plt+0x1bb8>
   13530:	b	13558 <__assert_fail@plt+0x1e44>
   13534:	ldr	r5, [sp, #60]	; 0x3c
   13538:	cmp	r8, r5
   1353c:	bne	132cc <__assert_fail@plt+0x1bb8>
   13540:	b	13558 <__assert_fail@plt+0x1e44>
   13544:	ldr	r6, [sp, #68]	; 0x44
   13548:	ldr	r5, [sp, #60]	; 0x3c
   1354c:	str	r3, [sp, #52]	; 0x34
   13550:	cmp	r8, r5
   13554:	bne	132cc <__assert_fail@plt+0x1bb8>
   13558:	ldr	r1, [sp, #88]	; 0x58
   1355c:	ldr	r2, [sp, #80]	; 0x50
   13560:	mov	r0, #0
   13564:	bl	17174 <__assert_fail@plt+0x5a60>
   13568:	cmp	r0, #0
   1356c:	bne	132b8 <__assert_fail@plt+0x1ba4>
   13570:	ldr	r0, [sp, #76]	; 0x4c
   13574:	ldr	r5, [sp, #64]	; 0x40
   13578:	cmp	r0, #0
   1357c:	bne	13aec <__assert_fail@plt+0x23d8>
   13580:	ldr	r0, [sp, #44]	; 0x2c
   13584:	ldr	r1, [sp, #100]	; 0x64
   13588:	tst	r0, #1
   1358c:	movne	r5, r1
   13590:	b	13a78 <__assert_fail@plt+0x2364>
   13594:	ldr	r0, [sp, #60]	; 0x3c
   13598:	mov	r1, r7
   1359c:	mov	r2, sl
   135a0:	mov	r3, r5
   135a4:	bl	19408 <__assert_fail@plt+0x7cf4>
   135a8:	ldr	r2, [sp, #88]	; 0x58
   135ac:	ldr	r3, [sp, #80]	; 0x50
   135b0:	str	sl, [sp, #8]
   135b4:	str	r5, [sp, #12]
   135b8:	str	r6, [sp]
   135bc:	bl	13f00 <__assert_fail@plt+0x27ec>
   135c0:	b	13aec <__assert_fail@plt+0x23d8>
   135c4:	mov	r0, #1
   135c8:	subs	r2, r7, r6
   135cc:	str	r0, [sp]
   135d0:	sbc	r3, r5, #0
   135d4:	mov	r0, #0
   135d8:	bl	114bc <lseek64@plt>
   135dc:	mvn	r4, #0
   135e0:	cmn	r1, #1
   135e4:	ble	13b98 <__assert_fail@plt+0x2484>
   135e8:	subs	r0, r7, r8
   135ec:	sbcs	r0, r5, sl
   135f0:	bge	13aec <__assert_fail@plt+0x23d8>
   135f4:	mov	r9, sl
   135f8:	cmn	r4, #1
   135fc:	bne	1361c <__assert_fail@plt+0x1f08>
   13600:	ldr	r1, [sp, #88]	; 0x58
   13604:	ldr	r2, [sp, #80]	; 0x50
   13608:	mov	r0, #0
   1360c:	bl	17174 <__assert_fail@plt+0x5a60>
   13610:	mov	r4, r0
   13614:	cmn	r0, #1
   13618:	beq	13b98 <__assert_fail@plt+0x2484>
   1361c:	cmp	r4, #0
   13620:	beq	13aec <__assert_fail@plt+0x23d8>
   13624:	subs	r6, r8, r7
   13628:	mov	sl, r9
   1362c:	sbc	r0, r9, r5
   13630:	subs	r1, r4, r6
   13634:	ldr	r1, [sp, #88]	; 0x58
   13638:	rscs	r0, r0, #0
   1363c:	movlt	r6, r4
   13640:	mov	r0, #1
   13644:	mov	r2, r6
   13648:	bl	15338 <__assert_fail@plt+0x3c24>
   1364c:	cmp	r0, r6
   13650:	beq	13678 <__assert_fail@plt+0x1f64>
   13654:	bl	115d0 <__errno_location@plt>
   13658:	ldr	r4, [r0]
   1365c:	cmp	r4, #32
   13660:	bne	13d94 <__assert_fail@plt+0x2680>
   13664:	movw	r0, #45964	; 0xb38c
   13668:	movt	r0, #2
   1366c:	ldr	r0, [r0]
   13670:	cmp	r0, #0
   13674:	beq	13d94 <__assert_fail@plt+0x2680>
   13678:	adds	r7, r7, r6
   1367c:	mvn	r4, #0
   13680:	adc	r5, r5, #0
   13684:	subs	r0, r7, r8
   13688:	sbcs	r0, r5, sl
   1368c:	blt	135f8 <__assert_fail@plt+0x1ee4>
   13690:	b	13aec <__assert_fail@plt+0x23d8>
   13694:	mov	r0, #1
   13698:	subs	r2, r5, r6
   1369c:	str	r0, [sp]
   136a0:	sbc	r3, r4, #0
   136a4:	mov	r0, #0
   136a8:	bl	114bc <lseek64@plt>
   136ac:	mov	lr, r4
   136b0:	mov	ip, r5
   136b4:	mvn	r6, #0
   136b8:	cmn	r1, #1
   136bc:	mov	r9, r4
   136c0:	mov	r3, r7
   136c4:	ble	13b98 <__assert_fail@plt+0x2484>
   136c8:	ldr	r2, [sp, #60]	; 0x3c
   136cc:	ldr	r1, [sp, #24]
   136d0:	subs	r0, ip, r2
   136d4:	sbcs	r0, lr, r1
   136d8:	bge	13a24 <__assert_fail@plt+0x2310>
   136dc:	subs	r8, r2, #1
   136e0:	mov	sl, #0
   136e4:	mov	r7, #1
   136e8:	mov	r2, #0
   136ec:	sbc	r0, r1, #0
   136f0:	str	r0, [sp, #84]	; 0x54
   136f4:	cmn	r6, #1
   136f8:	bne	13748 <__assert_fail@plt+0x2034>
   136fc:	str	r2, [sp, #92]	; 0x5c
   13700:	ldr	r1, [sp, #88]	; 0x58
   13704:	ldr	r2, [sp, #80]	; 0x50
   13708:	mov	r0, #0
   1370c:	str	sl, [sp, #64]	; 0x40
   13710:	mov	sl, r7
   13714:	mov	r6, r3
   13718:	mov	r4, ip
   1371c:	mov	r7, lr
   13720:	bl	17174 <__assert_fail@plt+0x5a60>
   13724:	mov	lr, r7
   13728:	mov	r7, sl
   1372c:	ldr	r2, [sp, #92]	; 0x5c
   13730:	ldr	sl, [sp, #64]	; 0x40
   13734:	mov	r3, r6
   13738:	mov	ip, r4
   1373c:	mov	r6, r0
   13740:	cmn	r0, #1
   13744:	beq	13b98 <__assert_fail@plt+0x2484>
   13748:	cmp	r6, #0
   1374c:	beq	13a28 <__assert_fail@plt+0x2314>
   13750:	ldr	r0, [sp, #60]	; 0x3c
   13754:	str	r3, [sp, #64]	; 0x40
   13758:	subs	r3, r0, ip
   1375c:	ldr	r0, [sp, #24]
   13760:	sbc	r0, r0, lr
   13764:	subs	r1, r6, r3
   13768:	rscs	r0, r0, #0
   1376c:	movlt	r3, r6
   13770:	cmp	r3, #0
   13774:	beq	139f0 <__assert_fail@plt+0x22dc>
   13778:	ldr	r6, [sp, #88]	; 0x58
   1377c:	mov	r0, #0
   13780:	str	r0, [sp, #20]
   13784:	add	sl, r6, r3
   13788:	mov	r1, r6
   1378c:	str	sl, [sp, #56]	; 0x38
   13790:	subs	r0, r5, ip
   13794:	str	r7, [sp, #28]
   13798:	mov	r7, r1
   1379c:	str	ip, [sp, #36]	; 0x24
   137a0:	mov	r6, lr
   137a4:	str	r3, [sp, #32]
   137a8:	sbc	r1, r9, lr
   137ac:	rsbs	r2, r0, #0
   137b0:	rscs	r2, r1, #0
   137b4:	mov	r2, #0
   137b8:	movwlt	r2, #1
   137bc:	cmp	r2, #0
   137c0:	moveq	r1, r2
   137c4:	movne	r2, r0
   137c8:	subs	r0, r3, r2
   137cc:	rscs	r0, r1, #0
   137d0:	movw	r1, #45392	; 0xb150
   137d4:	movt	r1, #2
   137d8:	movlt	r2, r3
   137dc:	ldr	r1, [r1]
   137e0:	add	r0, r7, r2
   137e4:	sub	r2, r3, r2
   137e8:	bl	11630 <memchr@plt>
   137ec:	cmp	r0, #0
   137f0:	ldr	r3, [sp, #64]	; 0x40
   137f4:	ldr	r1, [sp, #68]	; 0x44
   137f8:	ldr	r2, [sp, #44]	; 0x2c
   137fc:	addne	sl, r0, #1
   13800:	movwne	r0, #1
   13804:	str	r0, [sp, #40]	; 0x28
   13808:	ldr	r0, [sp, #72]	; 0x48
   1380c:	sub	r4, sl, r7
   13810:	str	sl, [sp, #92]	; 0x5c
   13814:	eor	r1, r2, r1
   13818:	eor	r0, r3, r0
   1381c:	orrs	r0, r0, r1
   13820:	bne	13844 <__assert_fail@plt+0x2130>
   13824:	mov	r0, #1
   13828:	mov	r1, r7
   1382c:	mov	r2, r4
   13830:	bl	15338 <__assert_fail@plt+0x3c24>
   13834:	ldr	r3, [sp, #64]	; 0x40
   13838:	cmp	r0, r4
   1383c:	beq	13868 <__assert_fail@plt+0x2154>
   13840:	b	13d60 <__assert_fail@plt+0x264c>
   13844:	ldr	r0, [sp, #76]	; 0x4c
   13848:	cmp	r0, #0
   1384c:	bne	13868 <__assert_fail@plt+0x2154>
   13850:	ldr	r0, [sp, #28]
   13854:	mov	r1, r7
   13858:	mov	r2, r4
   1385c:	and	r0, r0, #1
   13860:	bl	14408 <__assert_fail@plt+0x2cf4>
   13864:	ldr	r3, [sp, #64]	; 0x40
   13868:	ldr	ip, [sp, #36]	; 0x24
   1386c:	ldr	r7, [sp, #40]	; 0x28
   13870:	mov	lr, r6
   13874:	str	r4, [sp, #28]
   13878:	adds	ip, ip, r4
   1387c:	eor	r1, r7, #1
   13880:	adc	lr, r6, #0
   13884:	subs	r0, r5, ip
   13888:	sbcs	r0, r9, lr
   1388c:	mov	r0, #0
   13890:	movwge	r0, #1
   13894:	tst	r0, r1
   13898:	bne	139b8 <__assert_fail@plt+0x22a4>
   1389c:	ldr	r2, [sp, #52]	; 0x34
   138a0:	ldr	r4, [sp, #48]	; 0x30
   138a4:	ldr	r6, [sp, #44]	; 0x2c
   138a8:	ldr	sl, [sp, #56]	; 0x38
   138ac:	ldr	r1, [sp, #92]	; 0x5c
   138b0:	cmp	r1, sl
   138b4:	tsteq	r7, #1
   138b8:	beq	139c4 <__assert_fail@plt+0x22b0>
   138bc:	ldr	r0, [sp, #76]	; 0x4c
   138c0:	adds	r3, r3, #1
   138c4:	adc	r6, r6, #0
   138c8:	cmp	r0, #0
   138cc:	beq	138e4 <__assert_fail@plt+0x21d0>
   138d0:	ldr	r0, [sp, #72]	; 0x48
   138d4:	subs	r0, r0, r3
   138d8:	ldr	r0, [sp, #68]	; 0x44
   138dc:	sbcs	r0, r0, r6
   138e0:	bcc	13aec <__assert_fail@plt+0x23d8>
   138e4:	ldr	r0, [sp, #100]	; 0x64
   138e8:	ldr	r1, [sp, #96]	; 0x60
   138ec:	adds	r5, r5, r2
   138f0:	adc	r9, r9, r4
   138f4:	eor	r0, r3, r0
   138f8:	eor	r1, r6, r1
   138fc:	orr	r0, r0, r1
   13900:	ldr	r1, [sp, #76]	; 0x4c
   13904:	cmp	r0, #0
   13908:	ldr	r0, [sp, #84]	; 0x54
   1390c:	moveq	r5, r8
   13910:	moveq	r9, r0
   13914:	subs	r0, r5, ip
   13918:	sbcs	r0, r9, lr
   1391c:	mov	r0, #0
   13920:	movwlt	r0, #1
   13924:	cmp	r1, #0
   13928:	and	r0, r7, r0
   1392c:	bne	1398c <__assert_fail@plt+0x2278>
   13930:	subs	r1, r5, ip
   13934:	sbcs	r1, r9, lr
   13938:	bge	1398c <__assert_fail@plt+0x2278>
   1393c:	mov	r0, #1
   13940:	mov	r1, #0
   13944:	mov	r2, #0
   13948:	str	r5, [sp, #64]	; 0x40
   1394c:	mov	r5, r9
   13950:	mov	r9, r8
   13954:	mov	sl, r3
   13958:	mov	r4, ip
   1395c:	mov	r8, lr
   13960:	bl	14408 <__assert_fail@plt+0x2cf4>
   13964:	mov	lr, r8
   13968:	mov	r8, r9
   1396c:	mov	r9, r5
   13970:	mov	ip, r4
   13974:	mov	r3, sl
   13978:	ldr	r5, [sp, #64]	; 0x40
   1397c:	ldr	sl, [sp, #56]	; 0x38
   13980:	ldr	r4, [sp, #48]	; 0x30
   13984:	ldr	r2, [sp, #52]	; 0x34
   13988:	mov	r0, r7
   1398c:	subs	r1, r5, ip
   13990:	mov	r7, r0
   13994:	sbcs	r1, r9, lr
   13998:	ldr	r1, [sp, #92]	; 0x5c
   1399c:	blt	138b0 <__assert_fail@plt+0x219c>
   139a0:	tst	r0, #1
   139a4:	mov	r7, r0
   139a8:	bne	138b0 <__assert_fail@plt+0x219c>
   139ac:	str	r6, [sp, #44]	; 0x2c
   139b0:	str	r3, [sp, #64]	; 0x40
   139b4:	b	139d4 <__assert_fail@plt+0x22c0>
   139b8:	ldr	sl, [sp, #56]	; 0x38
   139bc:	ldr	r1, [sp, #92]	; 0x5c
   139c0:	b	139d8 <__assert_fail@plt+0x22c4>
   139c4:	mov	r0, #1
   139c8:	str	r6, [sp, #44]	; 0x2c
   139cc:	str	r3, [sp, #64]	; 0x40
   139d0:	str	r0, [sp, #20]
   139d4:	ldr	r7, [sp, #40]	; 0x28
   139d8:	ldr	r3, [sp, #32]
   139dc:	ldr	r0, [sp, #28]
   139e0:	cmp	r1, sl
   139e4:	sub	r3, r3, r0
   139e8:	bne	13790 <__assert_fail@plt+0x207c>
   139ec:	b	139f8 <__assert_fail@plt+0x22e4>
   139f0:	mov	r0, #0
   139f4:	str	r0, [sp, #20]
   139f8:	ldr	r0, [sp, #20]
   139fc:	ldr	r3, [sp, #64]	; 0x40
   13a00:	mvn	r6, #0
   13a04:	mov	r2, #0
   13a08:	and	sl, r0, #1
   13a0c:	ldr	r0, [sp, #60]	; 0x3c
   13a10:	subs	r0, ip, r0
   13a14:	ldr	r0, [sp, #24]
   13a18:	sbcs	r0, lr, r0
   13a1c:	blt	136f4 <__assert_fail@plt+0x1fe0>
   13a20:	b	13a28 <__assert_fail@plt+0x2314>
   13a24:	mov	r2, #0
   13a28:	ldr	r0, [sp, #44]	; 0x2c
   13a2c:	adds	r4, r3, sl
   13a30:	adc	r5, r0, r2
   13a34:	ldr	r0, [sp, #76]	; 0x4c
   13a38:	cmp	r0, #0
   13a3c:	beq	13a5c <__assert_fail@plt+0x2348>
   13a40:	b	13aec <__assert_fail@plt+0x23d8>
   13a44:	mov	r0, #1
   13a48:	mov	r1, #0
   13a4c:	mov	r2, #0
   13a50:	bl	14408 <__assert_fail@plt+0x2cf4>
   13a54:	adds	r4, r4, #1
   13a58:	adc	r5, r5, #0
   13a5c:	ldr	r0, [sp, #100]	; 0x64
   13a60:	subs	r0, r0, r4
   13a64:	ldr	r0, [sp, #96]	; 0x60
   13a68:	sbcs	r0, r0, r5
   13a6c:	bcs	13a44 <__assert_fail@plt+0x2330>
   13a70:	b	13aec <__assert_fail@plt+0x23d8>
   13a74:	mov	r5, r1
   13a78:	ldr	r7, [sp, #100]	; 0x64
   13a7c:	mov	r4, #0
   13a80:	mvn	r8, #1
   13a84:	cmp	r4, r5
   13a88:	bcc	13ab0 <__assert_fail@plt+0x239c>
   13a8c:	movw	r0, #45960	; 0xb388
   13a90:	movt	r0, #2
   13a94:	ldrb	r0, [r0]
   13a98:	cmp	r0, #0
   13a9c:	bne	13ab0 <__assert_fail@plt+0x239c>
   13aa0:	mov	r0, sl
   13aa4:	mov	r1, r4
   13aa8:	mov	r2, r7
   13aac:	bl	14dbc <__assert_fail@plt+0x36a8>
   13ab0:	add	r6, sl, r4, lsl #4
   13ab4:	ldr	r1, [r6, #4]
   13ab8:	cmp	r1, #0
   13abc:	blt	13ad4 <__assert_fail@plt+0x23c0>
   13ac0:	mov	r2, sl
   13ac4:	ldr	r3, [r2, r4, lsl #4]!
   13ac8:	ldr	r0, [r2, #8]
   13acc:	ldr	r2, [r2, #12]
   13ad0:	bl	1417c <__assert_fail@plt+0x2a68>
   13ad4:	add	r4, r4, #1
   13ad8:	str	r8, [r6, #4]
   13adc:	subs	r0, r4, r7
   13ae0:	ldr	r0, [sp, #96]	; 0x60
   13ae4:	rscs	r0, r0, #0
   13ae8:	bcc	13a84 <__assert_fail@plt+0x2370>
   13aec:	mov	r0, #0
   13af0:	bl	116fc <close@plt>
   13af4:	cmp	r0, #0
   13af8:	bne	13b98 <__assert_fail@plt+0x2484>
   13afc:	movw	r0, #46340	; 0xb504
   13b00:	movt	r0, #2
   13b04:	ldr	r3, [r0]
   13b08:	movw	r0, #46336	; 0xb500
   13b0c:	movt	r0, #2
   13b10:	ldr	r2, [r0]
   13b14:	movw	r0, #45400	; 0xb158
   13b18:	movt	r0, #2
   13b1c:	ldr	r1, [r0]
   13b20:	mov	r0, #0
   13b24:	bl	1417c <__assert_fail@plt+0x2a68>
   13b28:	mov	r0, #0
   13b2c:	sub	sp, fp, #28
   13b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b34:	mov	r0, #1
   13b38:	bl	11810 <__assert_fail@plt+0xfc>
   13b3c:	movw	r0, #45404	; 0xb15c
   13b40:	movw	r2, #40779	; 0x9f4b
   13b44:	mov	r1, #0
   13b48:	movw	r7, #40761	; 0x9f39
   13b4c:	movt	r0, #2
   13b50:	movt	r2, #1
   13b54:	str	r1, [sp, #8]
   13b58:	movw	r1, #40230	; 0x9d26
   13b5c:	movt	r7, #1
   13b60:	ldr	r3, [r0]
   13b64:	movw	r0, #45924	; 0xb364
   13b68:	str	r2, [sp, #4]
   13b6c:	movw	r2, #40747	; 0x9f2b
   13b70:	movt	r1, #1
   13b74:	str	r7, [sp]
   13b78:	movt	r0, #2
   13b7c:	movt	r2, #1
   13b80:	ldr	r0, [r0]
   13b84:	bl	17958 <__assert_fail@plt+0x6244>
   13b88:	mov	r0, #0
   13b8c:	bl	1157c <exit@plt>
   13b90:	mov	r0, #0
   13b94:	bl	11810 <__assert_fail@plt+0xfc>
   13b98:	bl	115d0 <__errno_location@plt>
   13b9c:	ldr	r4, [r0]
   13ba0:	movw	r0, #45936	; 0xb370
   13ba4:	movt	r0, #2
   13ba8:	ldr	r2, [r0]
   13bac:	mov	r0, #0
   13bb0:	mov	r1, #3
   13bb4:	bl	16d90 <__assert_fail@plt+0x567c>
   13bb8:	movw	r2, #42634	; 0xa68a
   13bbc:	mov	r3, r0
   13bc0:	mov	r0, #1
   13bc4:	mov	r1, r4
   13bc8:	movt	r2, #1
   13bcc:	bl	11504 <error@plt>
   13bd0:	movw	r1, #40565	; 0x9e75
   13bd4:	mov	r0, #0
   13bd8:	mov	r2, #5
   13bdc:	movt	r1, #1
   13be0:	bl	11450 <dcgettext@plt>
   13be4:	mov	r6, r0
   13be8:	add	r2, sp, #104	; 0x68
   13bec:	mov	r0, r5
   13bf0:	mov	r1, r8
   13bf4:	bl	153ac <__assert_fail@plt+0x3c98>
   13bf8:	mov	r3, r0
   13bfc:	mov	r0, #1
   13c00:	mov	r1, #0
   13c04:	mov	r2, r6
   13c08:	str	r4, [sp]
   13c0c:	bl	11504 <error@plt>
   13c10:	movw	r1, #40357	; 0x9da5
   13c14:	movt	r1, #1
   13c18:	mov	r0, #0
   13c1c:	mov	r2, #5
   13c20:	bl	11450 <dcgettext@plt>
   13c24:	mov	r2, r0
   13c28:	mov	r0, #0
   13c2c:	mov	r1, #0
   13c30:	bl	11504 <error@plt>
   13c34:	mov	r0, #1
   13c38:	bl	11810 <__assert_fail@plt+0xfc>
   13c3c:	movw	r0, #40633	; 0x9eb9
   13c40:	movw	r1, #40678	; 0x9ee6
   13c44:	cmp	r4, #100	; 0x64
   13c48:	movt	r0, #1
   13c4c:	movt	r1, #1
   13c50:	moveq	r1, r0
   13c54:	b	13c60 <__assert_fail@plt+0x254c>
   13c58:	movw	r1, #40309	; 0x9d75
   13c5c:	movt	r1, #1
   13c60:	mov	r0, #0
   13c64:	mov	r2, #5
   13c68:	bl	11450 <dcgettext@plt>
   13c6c:	mov	r4, r0
   13c70:	movw	r0, #45928	; 0xb368
   13c74:	movt	r0, #2
   13c78:	ldr	r0, [r0]
   13c7c:	bl	1703c <__assert_fail@plt+0x5928>
   13c80:	mov	r3, r0
   13c84:	mov	r0, #0
   13c88:	mov	r1, #0
   13c8c:	mov	r2, r4
   13c90:	bl	11504 <error@plt>
   13c94:	mov	r0, #1
   13c98:	bl	11810 <__assert_fail@plt+0xfc>
   13c9c:	movw	r1, #40470	; 0x9e16
   13ca0:	movt	r1, #1
   13ca4:	b	13cec <__assert_fail@plt+0x25d8>
   13ca8:	movw	r1, #40496	; 0x9e30
   13cac:	mov	r0, #0
   13cb0:	mov	r2, #5
   13cb4:	movt	r1, #1
   13cb8:	bl	11450 <dcgettext@plt>
   13cbc:	mov	r4, r0
   13cc0:	movw	r0, #45928	; 0xb368
   13cc4:	movt	r0, #2
   13cc8:	ldr	r0, [r0]
   13ccc:	bl	1703c <__assert_fail@plt+0x5928>
   13cd0:	mov	r3, r0
   13cd4:	mov	r0, #1
   13cd8:	mov	r1, #0
   13cdc:	mov	r2, r4
   13ce0:	bl	11504 <error@plt>
   13ce4:	movw	r1, #40525	; 0x9e4d
   13ce8:	movt	r1, #1
   13cec:	mov	r0, #0
   13cf0:	mov	r2, #5
   13cf4:	bl	11450 <dcgettext@plt>
   13cf8:	mov	r2, r0
   13cfc:	mov	r0, #1
   13d00:	mov	r1, #0
   13d04:	bl	11504 <error@plt>
   13d08:	bl	18104 <__assert_fail@plt+0x69f0>
   13d0c:	ldr	r0, [sp, #64]	; 0x40
   13d10:	ldr	r2, [sl, r0, lsl #4]
   13d14:	b	13bac <__assert_fail@plt+0x2498>
   13d18:	movw	r1, #40799	; 0x9f5f
   13d1c:	movt	r1, #1
   13d20:	b	13c18 <__assert_fail@plt+0x2504>
   13d24:	movw	r1, #40860	; 0x9f9c
   13d28:	mov	r0, #0
   13d2c:	mov	r2, #5
   13d30:	movt	r1, #1
   13d34:	bl	11450 <dcgettext@plt>
   13d38:	mov	r4, r0
   13d3c:	ldr	r0, [r6]
   13d40:	ldr	r1, [sp, #88]	; 0x58
   13d44:	ldr	r0, [r1, r0, lsl #2]
   13d48:	b	13c7c <__assert_fail@plt+0x2568>
   13d4c:	bl	116f0 <abort@plt>
   13d50:	movw	r0, #45924	; 0xb364
   13d54:	movt	r0, #2
   13d58:	ldr	r0, [r0]
   13d5c:	bl	116b4 <clearerr_unlocked@plt>
   13d60:	bl	115d0 <__errno_location@plt>
   13d64:	ldr	r4, [r0]
   13d68:	movw	r1, #42514	; 0xa612
   13d6c:	mov	r0, #0
   13d70:	mov	r2, #5
   13d74:	movt	r1, #1
   13d78:	bl	11450 <dcgettext@plt>
   13d7c:	b	13bb8 <__assert_fail@plt+0x24a4>
   13d80:	ldr	r0, [sp, #48]	; 0x30
   13d84:	ldr	r1, [sp, #64]	; 0x40
   13d88:	ldr	r4, [r9]
   13d8c:	ldr	r2, [r0, r1, lsl #4]
   13d90:	b	13bac <__assert_fail@plt+0x2498>
   13d94:	movw	r2, #43097	; 0xa859
   13d98:	movt	r2, #1
   13d9c:	b	13bac <__assert_fail@plt+0x2498>
   13da0:	movw	r1, #41843	; 0xa373
   13da4:	mov	r0, #0
   13da8:	mov	r2, #5
   13dac:	movt	r1, #1
   13db0:	bl	11450 <dcgettext@plt>
   13db4:	mov	r2, r0
   13db8:	str	r7, [sp]
   13dbc:	str	r6, [sp, #4]
   13dc0:	b	13cfc <__assert_fail@plt+0x25e8>
   13dc4:	movw	r1, #40877	; 0x9fad
   13dc8:	movt	r1, #1
   13dcc:	b	13c18 <__assert_fail@plt+0x2504>
   13dd0:	bl	115d0 <__errno_location@plt>
   13dd4:	ldr	r4, [r0]
   13dd8:	movw	r1, #40941	; 0x9fed
   13ddc:	mov	r0, #0
   13de0:	mov	r2, #5
   13de4:	movt	r1, #1
   13de8:	bl	11450 <dcgettext@plt>
   13dec:	mov	r5, r0
   13df0:	movw	r0, #45936	; 0xb370
   13df4:	movt	r0, #2
   13df8:	ldr	r1, [r0]
   13dfc:	mov	r0, #4
   13e00:	bl	16b14 <__assert_fail@plt+0x5400>
   13e04:	b	13e54 <__assert_fail@plt+0x2740>
   13e08:	bl	115d0 <__errno_location@plt>
   13e0c:	ldr	r1, [r0]
   13e10:	cmp	r1, #29
   13e14:	moveq	r1, #0
   13e18:	streq	r1, [r0]
   13e1c:	bl	115d0 <__errno_location@plt>
   13e20:	ldr	r4, [r0]
   13e24:	movw	r1, #40968	; 0xa008
   13e28:	mov	r0, #0
   13e2c:	mov	r2, #5
   13e30:	movt	r1, #1
   13e34:	bl	11450 <dcgettext@plt>
   13e38:	mov	r5, r0
   13e3c:	movw	r0, #45936	; 0xb370
   13e40:	mov	r1, #3
   13e44:	movt	r0, #2
   13e48:	ldr	r2, [r0]
   13e4c:	mov	r0, #0
   13e50:	bl	16d90 <__assert_fail@plt+0x567c>
   13e54:	mov	r3, r0
   13e58:	mov	r0, #1
   13e5c:	mov	r1, r4
   13e60:	mov	r2, r5
   13e64:	bl	11504 <error@plt>
   13e68:	movw	r1, #40445	; 0x9dfd
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	movt	r1, #1
   13e78:	bl	11450 <dcgettext@plt>
   13e7c:	mov	r4, r0
   13e80:	ldr	r0, [sp, #100]	; 0x64
   13e84:	add	r2, sp, #104	; 0x68
   13e88:	mov	r1, r5
   13e8c:	bl	153ac <__assert_fail@plt+0x3c98>
   13e90:	bl	1703c <__assert_fail@plt+0x5928>
   13e94:	movw	r2, #40853	; 0x9f95
   13e98:	str	r0, [sp]
   13e9c:	mov	r0, #1
   13ea0:	mov	r1, #75	; 0x4b
   13ea4:	mov	r3, r4
   13ea8:	movt	r2, #1
   13eac:	bl	11504 <error@plt>
   13eb0:	movw	r0, #42330	; 0xa55a
   13eb4:	movw	r1, #41895	; 0xa3a7
   13eb8:	movw	r3, #42438	; 0xa5c6
   13ebc:	movw	r2, #867	; 0x363
   13ec0:	movt	r0, #1
   13ec4:	movt	r1, #1
   13ec8:	movt	r3, #1
   13ecc:	bl	11714 <__assert_fail@plt>
   13ed0:	movw	r0, #42325	; 0xa555
   13ed4:	movw	r1, #41895	; 0xa3a7
   13ed8:	movw	r3, #42360	; 0xa578
   13edc:	mov	r2, #996	; 0x3e4
   13ee0:	movt	r0, #1
   13ee4:	movt	r1, #1
   13ee8:	movt	r3, #1
   13eec:	bl	11714 <__assert_fail@plt>
   13ef0:	bl	115d0 <__errno_location@plt>
   13ef4:	mov	r1, #75	; 0x4b
   13ef8:	str	r1, [r0]
   13efc:	b	13e1c <__assert_fail@plt+0x2708>
   13f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f04:	add	fp, sp, #28
   13f08:	sub	sp, sp, #36	; 0x24
   13f0c:	str	r2, [sp, #12]
   13f10:	ldr	r2, [fp, #16]
   13f14:	mov	r7, r0
   13f18:	ldr	r0, [fp, #20]
   13f1c:	ldr	r6, [fp, #8]
   13f20:	str	r3, [sp, #8]
   13f24:	mov	r8, #0
   13f28:	mov	r4, #1
   13f2c:	mov	r5, #1
   13f30:	mov	r3, r1
   13f34:	mov	sl, #0
   13f38:	str	r1, [sp, #32]
   13f3c:	str	r7, [sp, #28]
   13f40:	subs	r2, r2, #1
   13f44:	sbc	r0, r0, #0
   13f48:	str	r2, [sp, #24]
   13f4c:	str	r0, [sp, #20]
   13f50:	cmn	r6, #1
   13f54:	beq	13f6c <__assert_fail@plt+0x2858>
   13f58:	ldr	r0, [sp, #8]
   13f5c:	cmp	r6, r0
   13f60:	mov	r0, #0
   13f64:	movwcc	r0, #1
   13f68:	b	13fe4 <__assert_fail@plt+0x28d0>
   13f6c:	tst	r5, #1
   13f70:	beq	13f7c <__assert_fail@plt+0x2868>
   13f74:	mov	r9, r3
   13f78:	b	13fbc <__assert_fail@plt+0x28a8>
   13f7c:	mov	r0, #1
   13f80:	mov	r2, r7
   13f84:	mov	r6, r3
   13f88:	str	r0, [sp]
   13f8c:	mov	r0, #0
   13f90:	bl	114bc <lseek64@plt>
   13f94:	and	r0, r0, r1
   13f98:	add	r1, r0, #1
   13f9c:	cmn	r0, #1
   13fa0:	ldr	r0, [sp, #32]
   13fa4:	movwne	r1, #1
   13fa8:	orr	r4, r4, r1
   13fac:	movne	r6, r0
   13fb0:	ldr	r0, [sp, #28]
   13fb4:	mov	r9, r6
   13fb8:	movne	r7, r0
   13fbc:	ldr	r1, [sp, #12]
   13fc0:	ldr	r2, [sp, #8]
   13fc4:	mov	r0, #0
   13fc8:	bl	17174 <__assert_fail@plt+0x5a60>
   13fcc:	cmn	r0, #1
   13fd0:	beq	14144 <__assert_fail@plt+0x2a30>
   13fd4:	mov	r6, r0
   13fd8:	clz	r0, r0
   13fdc:	mov	r3, r9
   13fe0:	lsr	r0, r0, #5
   13fe4:	str	r0, [sp, #16]
   13fe8:	subs	r0, r6, r7
   13fec:	rscs	r0, r3, #0
   13ff0:	bcs	14064 <__assert_fail@plt+0x2950>
   13ff4:	ldr	r9, [sp, #12]
   13ff8:	cmp	r6, #0
   13ffc:	beq	140ec <__assert_fail@plt+0x29d8>
   14000:	orr	r0, r4, r5
   14004:	mov	r5, #0
   14008:	tst	r0, #1
   1400c:	beq	1402c <__assert_fail@plt+0x2918>
   14010:	and	r0, r4, #1
   14014:	mov	r1, r9
   14018:	mov	r2, r6
   1401c:	mov	r5, r3
   14020:	bl	14408 <__assert_fail@plt+0x2cf4>
   14024:	mov	r3, r5
   14028:	mov	r5, r0
   1402c:	ldr	r9, [fp, #16]
   14030:	ldr	r1, [fp, #20]
   14034:	and	r0, r4, #1
   14038:	adds	r8, r8, r0
   1403c:	adc	sl, sl, #0
   14040:	eor	r0, r8, r9
   14044:	eor	r1, sl, r1
   14048:	orrs	r0, r0, r1
   1404c:	cmpeq	r5, #0
   14050:	beq	1413c <__assert_fail@plt+0x2a28>
   14054:	subs	r7, r7, r6
   14058:	mov	r4, #0
   1405c:	sbc	r3, r3, #0
   14060:	b	140f0 <__assert_fail@plt+0x29dc>
   14064:	ldr	r9, [sp, #12]
   14068:	tst	r4, #1
   1406c:	bne	1407c <__assert_fail@plt+0x2968>
   14070:	tst	r5, #1
   14074:	mov	r5, #0
   14078:	beq	14090 <__assert_fail@plt+0x297c>
   1407c:	and	r0, r4, #1
   14080:	mov	r1, r9
   14084:	mov	r2, r7
   14088:	bl	14408 <__assert_fail@plt+0x2cf4>
   1408c:	mov	r5, r0
   14090:	and	r0, r4, #1
   14094:	mov	r4, #0
   14098:	adds	r8, r8, r0
   1409c:	ldr	r0, [sp, #24]
   140a0:	adc	sl, sl, #0
   140a4:	subs	r0, r0, r8
   140a8:	ldr	r0, [sp, #20]
   140ac:	sbcs	r0, r0, sl
   140b0:	movwcs	r4, #1
   140b4:	cmp	r4, #0
   140b8:	cmpeq	r5, #0
   140bc:	beq	14104 <__assert_fail@plt+0x29f0>
   140c0:	add	r9, r9, r7
   140c4:	sub	r6, r6, r7
   140c8:	ldr	r7, [sp, #28]
   140cc:	subs	r0, r6, r7
   140d0:	ldr	r0, [sp, #32]
   140d4:	rscs	r0, r0, #0
   140d8:	bcs	14068 <__assert_fail@plt+0x2954>
   140dc:	ldr	r7, [sp, #28]
   140e0:	ldr	r3, [sp, #32]
   140e4:	cmp	r6, #0
   140e8:	bne	14000 <__assert_fail@plt+0x28ec>
   140ec:	ldr	r9, [fp, #16]
   140f0:	ldr	r0, [sp, #16]
   140f4:	mvn	r6, #0
   140f8:	cmp	r0, #0
   140fc:	beq	13f50 <__assert_fail@plt+0x283c>
   14100:	b	14108 <__assert_fail@plt+0x29f4>
   14104:	ldr	r9, [fp, #16]
   14108:	ldr	r4, [fp, #20]
   1410c:	subs	r0, r8, r9
   14110:	sbcs	r0, sl, r4
   14114:	bcs	1413c <__assert_fail@plt+0x2a28>
   14118:	mov	r0, #1
   1411c:	mov	r1, #0
   14120:	mov	r2, #0
   14124:	bl	14408 <__assert_fail@plt+0x2cf4>
   14128:	adds	r8, r8, #1
   1412c:	adc	sl, sl, #0
   14130:	subs	r0, r8, r9
   14134:	sbcs	r0, sl, r4
   14138:	bcc	14118 <__assert_fail@plt+0x2a04>
   1413c:	sub	sp, fp, #28
   14140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14144:	bl	115d0 <__errno_location@plt>
   14148:	ldr	r4, [r0]
   1414c:	movw	r0, #45936	; 0xb370
   14150:	mov	r1, #3
   14154:	movt	r0, #2
   14158:	ldr	r2, [r0]
   1415c:	mov	r0, #0
   14160:	bl	16d90 <__assert_fail@plt+0x567c>
   14164:	movw	r2, #42634	; 0xa68a
   14168:	mov	r3, r0
   1416c:	mov	r0, #1
   14170:	mov	r1, r4
   14174:	movt	r2, #1
   14178:	bl	11504 <error@plt>
   1417c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14180:	add	fp, sp, #24
   14184:	sub	sp, sp, #32
   14188:	mov	r8, r3
   1418c:	mov	r5, r2
   14190:	mov	r6, r1
   14194:	mov	r7, r0
   14198:	cmp	r0, #0
   1419c:	beq	141d4 <__assert_fail@plt+0x2ac0>
   141a0:	mov	r0, r7
   141a4:	bl	150c4 <__assert_fail@plt+0x39b0>
   141a8:	cmp	r0, #0
   141ac:	beq	141d4 <__assert_fail@plt+0x2ac0>
   141b0:	bl	115d0 <__errno_location@plt>
   141b4:	ldr	r4, [r0]
   141b8:	cmp	r4, #32
   141bc:	bne	143bc <__assert_fail@plt+0x2ca8>
   141c0:	movw	r0, #45964	; 0xb38c
   141c4:	movt	r0, #2
   141c8:	ldr	r0, [r0]
   141cc:	cmp	r0, #0
   141d0:	beq	143bc <__assert_fail@plt+0x2ca8>
   141d4:	cmp	r6, #0
   141d8:	blt	14230 <__assert_fail@plt+0x2b1c>
   141dc:	cmp	r7, #0
   141e0:	bne	141f4 <__assert_fail@plt+0x2ae0>
   141e4:	mov	r0, r6
   141e8:	bl	116fc <close@plt>
   141ec:	cmn	r0, #1
   141f0:	ble	143b4 <__assert_fail@plt+0x2ca0>
   141f4:	movw	r0, #46368	; 0xb520
   141f8:	movt	r0, #2
   141fc:	ldr	r1, [r0]
   14200:	cmp	r1, #0
   14204:	beq	14230 <__assert_fail@plt+0x2b1c>
   14208:	movw	r2, #46372	; 0xb524
   1420c:	mov	r3, #0
   14210:	movt	r2, #2
   14214:	ldr	r2, [r2]
   14218:	ldr	r7, [r2, r3, lsl #2]
   1421c:	cmp	r7, r6
   14220:	beq	14370 <__assert_fail@plt+0x2c5c>
   14224:	add	r3, r3, #1
   14228:	cmp	r3, r1
   1422c:	bcc	14218 <__assert_fail@plt+0x2b04>
   14230:	cmp	r5, #1
   14234:	blt	14368 <__assert_fail@plt+0x2c54>
   14238:	mov	r0, #0
   1423c:	add	r1, sp, #28
   14240:	mov	r2, #0
   14244:	str	r0, [sp, #28]
   14248:	mov	r0, r5
   1424c:	bl	114c8 <waitpid@plt>
   14250:	cmn	r0, #1
   14254:	bne	14268 <__assert_fail@plt+0x2b54>
   14258:	bl	115d0 <__errno_location@plt>
   1425c:	ldr	r4, [r0]
   14260:	cmp	r4, #10
   14264:	bne	143e4 <__assert_fail@plt+0x2cd0>
   14268:	ldr	r0, [sp, #28]
   1426c:	mov	r1, #16777216	; 0x1000000
   14270:	and	r5, r0, #127	; 0x7f
   14274:	add	r1, r1, r5, lsl #24
   14278:	cmp	r1, #33554432	; 0x2000000
   1427c:	blt	14304 <__assert_fail@plt+0x2bf0>
   14280:	cmp	r5, #13
   14284:	beq	14368 <__assert_fail@plt+0x2c54>
   14288:	add	r6, sp, #9
   1428c:	mov	r0, r5
   14290:	mov	r1, r6
   14294:	bl	173a8 <__assert_fail@plt+0x5c94>
   14298:	cmp	r0, #0
   1429c:	beq	142bc <__assert_fail@plt+0x2ba8>
   142a0:	movw	r3, #42554	; 0xa63a
   142a4:	add	r0, sp, #9
   142a8:	mov	r1, #1
   142ac:	mov	r2, #19
   142b0:	str	r5, [sp]
   142b4:	movt	r3, #1
   142b8:	bl	115dc <__sprintf_chk@plt>
   142bc:	movw	r1, #42557	; 0xa63d
   142c0:	mov	r0, #0
   142c4:	mov	r2, #5
   142c8:	movt	r1, #1
   142cc:	bl	11450 <dcgettext@plt>
   142d0:	mov	r4, r0
   142d4:	mov	r0, #0
   142d8:	mov	r1, #3
   142dc:	mov	r2, r8
   142e0:	bl	16d90 <__assert_fail@plt+0x567c>
   142e4:	mov	r3, r0
   142e8:	movw	r0, #45964	; 0xb38c
   142ec:	str	r6, [sp]
   142f0:	movt	r0, #2
   142f4:	ldr	r0, [r0]
   142f8:	str	r0, [sp, #4]
   142fc:	orr	r0, r5, #128	; 0x80
   14300:	b	1435c <__assert_fail@plt+0x2c48>
   14304:	cmp	r5, #0
   14308:	bne	1438c <__assert_fail@plt+0x2c78>
   1430c:	ubfx	r5, r0, #8, #8
   14310:	cmp	r5, #0
   14314:	beq	14368 <__assert_fail@plt+0x2c54>
   14318:	movw	r1, #42598	; 0xa666
   1431c:	mov	r0, #0
   14320:	mov	r2, #5
   14324:	movt	r1, #1
   14328:	bl	11450 <dcgettext@plt>
   1432c:	mov	r4, r0
   14330:	mov	r0, #0
   14334:	mov	r1, #3
   14338:	mov	r2, r8
   1433c:	bl	16d90 <__assert_fail@plt+0x567c>
   14340:	mov	r3, r0
   14344:	movw	r0, #45964	; 0xb38c
   14348:	str	r5, [sp]
   1434c:	movt	r0, #2
   14350:	ldr	r0, [r0]
   14354:	str	r0, [sp, #4]
   14358:	mov	r0, r5
   1435c:	mov	r1, #0
   14360:	mov	r2, r4
   14364:	bl	11504 <error@plt>
   14368:	sub	sp, fp, #24
   1436c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14370:	sub	r1, r1, #1
   14374:	str	r1, [r0]
   14378:	ldr	r0, [r2, r1, lsl #2]
   1437c:	str	r0, [r2, r3, lsl #2]
   14380:	cmp	r5, #1
   14384:	bge	14238 <__assert_fail@plt+0x2b24>
   14388:	b	14368 <__assert_fail@plt+0x2c54>
   1438c:	movw	r1, #42637	; 0xa68d
   14390:	mov	r0, #0
   14394:	mov	r2, #5
   14398:	movt	r1, #1
   1439c:	bl	11450 <dcgettext@plt>
   143a0:	ldr	r3, [sp, #28]
   143a4:	mov	r2, r0
   143a8:	mov	r0, #1
   143ac:	mov	r1, #0
   143b0:	bl	11504 <error@plt>
   143b4:	bl	115d0 <__errno_location@plt>
   143b8:	ldr	r4, [r0]
   143bc:	mov	r0, #0
   143c0:	mov	r1, #3
   143c4:	mov	r2, r8
   143c8:	bl	16d90 <__assert_fail@plt+0x567c>
   143cc:	movw	r2, #42634	; 0xa68a
   143d0:	mov	r3, r0
   143d4:	mov	r0, #1
   143d8:	mov	r1, r4
   143dc:	movt	r2, #1
   143e0:	bl	11504 <error@plt>
   143e4:	movw	r1, #42528	; 0xa620
   143e8:	mov	r0, #0
   143ec:	mov	r2, #5
   143f0:	movt	r1, #1
   143f4:	bl	11450 <dcgettext@plt>
   143f8:	mov	r2, r0
   143fc:	mov	r0, #1
   14400:	mov	r1, r4
   14404:	bl	11504 <error@plt>
   14408:	push	{r4, r5, r6, r7, fp, lr}
   1440c:	add	fp, sp, #16
   14410:	mov	r4, r2
   14414:	mov	r5, r1
   14418:	cmp	r0, #0
   1441c:	beq	14498 <__assert_fail@plt+0x2d84>
   14420:	cmp	r5, #0
   14424:	cmpeq	r4, #0
   14428:	bne	14444 <__assert_fail@plt+0x2d30>
   1442c:	movw	r0, #45960	; 0xb388
   14430:	movt	r0, #2
   14434:	ldrb	r1, [r0]
   14438:	mov	r0, #1
   1443c:	cmp	r1, #0
   14440:	popne	{r4, r5, r6, r7, fp, pc}
   14444:	movw	r6, #46340	; 0xb504
   14448:	movw	r0, #46336	; 0xb500
   1444c:	movw	r7, #45400	; 0xb158
   14450:	movt	r6, #2
   14454:	movt	r0, #2
   14458:	movt	r7, #2
   1445c:	ldr	r2, [r0]
   14460:	ldr	r3, [r6]
   14464:	ldr	r1, [r7]
   14468:	mov	r0, #0
   1446c:	bl	1417c <__assert_fail@plt+0x2a68>
   14470:	bl	1451c <__assert_fail@plt+0x2e08>
   14474:	ldr	r0, [r6]
   14478:	bl	148fc <__assert_fail@plt+0x31e8>
   1447c:	cmn	r0, #1
   14480:	str	r0, [r7]
   14484:	bgt	144a4 <__assert_fail@plt+0x2d90>
   14488:	bl	115d0 <__errno_location@plt>
   1448c:	ldr	r4, [r0]
   14490:	ldr	r2, [r6]
   14494:	b	144f8 <__assert_fail@plt+0x2de4>
   14498:	movw	r0, #45400	; 0xb158
   1449c:	movt	r0, #2
   144a0:	ldr	r0, [r0]
   144a4:	mov	r1, r5
   144a8:	mov	r2, r4
   144ac:	bl	15338 <__assert_fail@plt+0x3c24>
   144b0:	mov	r1, r0
   144b4:	mov	r0, #1
   144b8:	cmp	r1, r4
   144bc:	beq	144e8 <__assert_fail@plt+0x2dd4>
   144c0:	bl	115d0 <__errno_location@plt>
   144c4:	ldr	r4, [r0]
   144c8:	cmp	r4, #32
   144cc:	bne	144ec <__assert_fail@plt+0x2dd8>
   144d0:	movw	r0, #45964	; 0xb38c
   144d4:	movt	r0, #2
   144d8:	ldr	r1, [r0]
   144dc:	mov	r0, #0
   144e0:	cmp	r1, #0
   144e4:	beq	144ec <__assert_fail@plt+0x2dd8>
   144e8:	pop	{r4, r5, r6, r7, fp, pc}
   144ec:	movw	r0, #46340	; 0xb504
   144f0:	movt	r0, #2
   144f4:	ldr	r2, [r0]
   144f8:	mov	r0, #0
   144fc:	mov	r1, #3
   14500:	bl	16d90 <__assert_fail@plt+0x567c>
   14504:	movw	r2, #42634	; 0xa68a
   14508:	mov	r3, r0
   1450c:	mov	r0, #1
   14510:	mov	r1, r4
   14514:	movt	r2, #1
   14518:	bl	11504 <error@plt>
   1451c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14520:	add	fp, sp, #28
   14524:	sub	sp, sp, #4
   14528:	movw	r9, #46340	; 0xb504
   1452c:	movt	r9, #2
   14530:	ldr	sl, [r9]
   14534:	cmp	sl, #0
   14538:	beq	14618 <__assert_fail@plt+0x2f04>
   1453c:	movw	r0, #45944	; 0xb378
   14540:	movt	r0, #2
   14544:	ldr	r0, [r0]
   14548:	cmp	r0, #0
   1454c:	beq	145f4 <__assert_fail@plt+0x2ee0>
   14550:	movw	r7, #46344	; 0xb508
   14554:	movw	r1, #46364	; 0xb51c
   14558:	movw	r2, #45396	; 0xb154
   1455c:	movw	r3, #46348	; 0xb50c
   14560:	rsb	r4, r0, #1
   14564:	mov	r5, #0
   14568:	movt	r7, #2
   1456c:	movt	r1, #2
   14570:	movt	r2, #2
   14574:	movt	r3, #2
   14578:	ldrb	r7, [r7]
   1457c:	ldr	r1, [r1]
   14580:	ldr	r2, [r2]
   14584:	ldr	r3, [r3]
   14588:	eor	r7, r7, #1
   1458c:	mvn	r7, r7
   14590:	ldr	r6, [r3, -r4, lsl #2]
   14594:	cmp	r4, #0
   14598:	mov	r0, r4
   1459c:	movwne	r0, #1
   145a0:	orr	r0, r0, r7
   145a4:	tst	r0, #1
   145a8:	add	r6, r6, #1
   145ac:	str	r6, [r3, -r4, lsl #2]
   145b0:	bne	145c8 <__assert_fail@plt+0x2eb4>
   145b4:	ldr	r0, [r3]
   145b8:	add	r0, r2, r0
   145bc:	ldrb	r0, [r0, #1]
   145c0:	cmp	r0, #0
   145c4:	beq	14618 <__assert_fail@plt+0x2f04>
   145c8:	ldrb	r0, [r2, r6]
   145cc:	cmp	r0, #0
   145d0:	strb	r0, [r1, -r4]
   145d4:	bne	148d0 <__assert_fail@plt+0x31bc>
   145d8:	rsb	r0, r4, #0
   145dc:	str	r5, [r3, r0, lsl #2]
   145e0:	ldrb	r0, [r2]
   145e4:	strb	r0, [r1, -r4]
   145e8:	add	r4, r4, #1
   145ec:	cmp	r4, #1
   145f0:	bne	14590 <__assert_fail@plt+0x2e7c>
   145f4:	movw	r1, #41933	; 0xa3cd
   145f8:	mov	r0, #0
   145fc:	mov	r2, #5
   14600:	movt	r1, #1
   14604:	bl	11450 <dcgettext@plt>
   14608:	mov	r2, r0
   1460c:	mov	r0, #1
   14610:	mov	r1, #0
   14614:	bl	11504 <error@plt>
   14618:	movw	r8, #46356	; 0xb514
   1461c:	movt	r8, #2
   14620:	ldr	r7, [r8]
   14624:	cmp	r7, #0
   14628:	beq	14658 <__assert_fail@plt+0x2f44>
   1462c:	movw	r1, #45944	; 0xb378
   14630:	add	r0, r7, #2
   14634:	movt	r1, #2
   14638:	str	r0, [r8]
   1463c:	ldr	r2, [r1]
   14640:	add	r2, r2, #1
   14644:	str	r2, [r1]
   14648:	movw	r1, #46352	; 0xb510
   1464c:	movt	r1, #2
   14650:	ldr	r5, [r1]
   14654:	b	146bc <__assert_fail@plt+0x2fa8>
   14658:	movw	r0, #45940	; 0xb374
   1465c:	movt	r0, #2
   14660:	ldr	r0, [r0]
   14664:	bl	11588 <strlen@plt>
   14668:	mov	r5, r0
   1466c:	movw	r0, #46352	; 0xb510
   14670:	movt	r0, #2
   14674:	str	r5, [r0]
   14678:	movw	r0, #45948	; 0xb37c
   1467c:	movt	r0, #2
   14680:	ldr	r0, [r0]
   14684:	cmp	r0, #0
   14688:	beq	14694 <__assert_fail@plt+0x2f80>
   1468c:	bl	11588 <strlen@plt>
   14690:	b	14698 <__assert_fail@plt+0x2f84>
   14694:	mov	r0, #0
   14698:	movw	r1, #46360	; 0xb518
   1469c:	movt	r1, #2
   146a0:	str	r0, [r1]
   146a4:	movw	r1, #45944	; 0xb378
   146a8:	add	r0, r0, r5
   146ac:	movt	r1, #2
   146b0:	ldr	r1, [r1]
   146b4:	add	r0, r0, r1
   146b8:	str	r0, [r8]
   146bc:	add	r1, r0, #1
   146c0:	cmp	r1, r5
   146c4:	bcc	148d8 <__assert_fail@plt+0x31c4>
   146c8:	mov	r0, sl
   146cc:	bl	17bec <__assert_fail@plt+0x64d8>
   146d0:	mov	r4, r0
   146d4:	cmp	r7, #0
   146d8:	str	r0, [r9]
   146dc:	beq	1471c <__assert_fail@plt+0x3008>
   146e0:	movw	r1, #46348	; 0xb50c
   146e4:	movw	r0, #45396	; 0xb154
   146e8:	movw	r2, #46352	; 0xb510
   146ec:	movt	r1, #2
   146f0:	movt	r0, #2
   146f4:	movt	r2, #2
   146f8:	ldr	r1, [r1]
   146fc:	ldr	r0, [r0]
   14700:	ldr	r3, [r2]
   14704:	ldr	r1, [r1]
   14708:	add	r5, r3, #1
   1470c:	ldrb	r1, [r0, r1]
   14710:	strb	r1, [r4, r3]
   14714:	str	r5, [r2]
   14718:	b	1474c <__assert_fail@plt+0x3038>
   1471c:	movw	r0, #46352	; 0xb510
   14720:	movt	r0, #2
   14724:	ldr	r5, [r0]
   14728:	movw	r0, #45940	; 0xb374
   1472c:	movt	r0, #2
   14730:	ldr	r1, [r0]
   14734:	mov	r0, r4
   14738:	mov	r2, r5
   1473c:	bl	11408 <memcpy@plt>
   14740:	movw	r0, #45396	; 0xb154
   14744:	movt	r0, #2
   14748:	ldr	r0, [r0]
   1474c:	movw	r9, #46364	; 0xb51c
   14750:	movw	sl, #45944	; 0xb378
   14754:	add	r5, r4, r5
   14758:	movt	r9, #2
   1475c:	movt	sl, #2
   14760:	str	r5, [r9]
   14764:	ldr	r6, [sl]
   14768:	ldrb	r1, [r0]
   1476c:	mov	r0, r5
   14770:	mov	r2, r6
   14774:	bl	115f4 <memset@plt>
   14778:	movw	r0, #45948	; 0xb37c
   1477c:	movt	r0, #2
   14780:	ldr	r1, [r0]
   14784:	cmp	r1, #0
   14788:	beq	147a0 <__assert_fail@plt+0x308c>
   1478c:	movw	r2, #46360	; 0xb518
   14790:	add	r0, r5, r6
   14794:	movt	r2, #2
   14798:	ldr	r2, [r2]
   1479c:	bl	11408 <memcpy@plt>
   147a0:	ldr	r0, [r8]
   147a4:	mov	r1, #0
   147a8:	strb	r1, [r4, r0]
   147ac:	movw	r4, #46348	; 0xb50c
   147b0:	movt	r4, #2
   147b4:	ldr	r0, [r4]
   147b8:	bl	1526c <__assert_fail@plt+0x3b58>
   147bc:	ldr	r0, [sl]
   147c0:	mov	r1, #4
   147c4:	bl	17fb8 <__assert_fail@plt+0x68a4>
   147c8:	mov	r5, r0
   147cc:	str	r0, [r4]
   147d0:	movw	r0, #45956	; 0xb384
   147d4:	movt	r0, #2
   147d8:	ldr	r4, [r0]
   147dc:	cmp	r4, #0
   147e0:	beq	148d0 <__assert_fail@plt+0x31bc>
   147e4:	cmp	r7, #0
   147e8:	bne	148dc <__assert_fail@plt+0x31c8>
   147ec:	mov	r0, r4
   147f0:	bl	11588 <strlen@plt>
   147f4:	mov	r6, r0
   147f8:	ldr	r7, [sl]
   147fc:	ldr	r0, [r9]
   14800:	mov	r1, r4
   14804:	mov	r2, r6
   14808:	add	r0, r0, r7
   1480c:	sub	r0, r0, r6
   14810:	bl	11408 <memcpy@plt>
   14814:	cmp	r6, #0
   14818:	beq	148d0 <__assert_fail@plt+0x31bc>
   1481c:	add	ip, r5, r7, lsl #2
   14820:	cmp	r6, #4
   14824:	bcc	148b0 <__assert_fail@plt+0x319c>
   14828:	lsl	r1, r7, #2
   1482c:	add	r0, r4, r6
   14830:	add	r3, r5, r7, lsl #2
   14834:	sub	r1, r1, r6, lsl #2
   14838:	add	r1, r5, r1
   1483c:	cmp	r1, r0
   14840:	cmpcc	r4, r3
   14844:	bcc	148b0 <__assert_fail@plt+0x319c>
   14848:	and	r1, r6, #3
   1484c:	sub	r3, r3, #16
   14850:	vmov.i32	q8, #255	; 0x000000ff
   14854:	vmvn.i32	q9, #47	; 0x0000002f
   14858:	mvn	r5, #15
   1485c:	sub	r7, r1, r6
   14860:	sub	r2, r6, r1
   14864:	mov	r6, sp
   14868:	add	ip, ip, r7, lsl #2
   1486c:	sub	r7, r0, #4
   14870:	ldr	r0, [r7], #-4
   14874:	subs	r2, r2, #4
   14878:	str	r0, [sp]
   1487c:	vld1.32	{d20[0]}, [r6 :32]
   14880:	vmovl.u8	q10, d20
   14884:	vrev64.16	d20, d20
   14888:	vmovl.u16	q10, d20
   1488c:	vand	q10, q10, q8
   14890:	vadd.i32	q10, q10, q9
   14894:	vrev64.32	q10, q10
   14898:	vext.8	q10, q10, q10, #8
   1489c:	vst1.32	{d20-d21}, [r3], r5
   148a0:	bne	14870 <__assert_fail@plt+0x315c>
   148a4:	cmp	r1, #0
   148a8:	bne	148b4 <__assert_fail@plt+0x31a0>
   148ac:	b	148d0 <__assert_fail@plt+0x31bc>
   148b0:	mov	r1, r6
   148b4:	sub	r0, ip, #4
   148b8:	sub	r2, r4, #1
   148bc:	ldrb	r3, [r2, r1]
   148c0:	subs	r1, r1, #1
   148c4:	sub	r3, r3, #48	; 0x30
   148c8:	str	r3, [r0], #-4
   148cc:	bne	148bc <__assert_fail@plt+0x31a8>
   148d0:	sub	sp, fp, #28
   148d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d8:	bl	18104 <__assert_fail@plt+0x69f0>
   148dc:	movw	r0, #41887	; 0xa39f
   148e0:	movw	r1, #41895	; 0xa3a7
   148e4:	movw	r3, #41907	; 0xa3b3
   148e8:	movw	r2, #409	; 0x199
   148ec:	movt	r0, #1
   148f0:	movt	r1, #1
   148f4:	movt	r3, #1
   148f8:	bl	11714 <__assert_fail@plt>
   148fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14900:	add	fp, sp, #24
   14904:	sub	sp, sp, #112	; 0x70
   14908:	movw	r8, #45964	; 0xb38c
   1490c:	mov	r4, r0
   14910:	movt	r8, #2
   14914:	ldr	r0, [r8]
   14918:	cmp	r0, #0
   1491c:	beq	14a44 <__assert_fail@plt+0x3330>
   14920:	movw	r0, #42056	; 0xa448
   14924:	movt	r0, #1
   14928:	bl	1151c <getenv@plt>
   1492c:	mov	r6, r0
   14930:	movw	r0, #42070	; 0xa456
   14934:	mov	r1, r4
   14938:	mov	r2, #1
   1493c:	movt	r0, #1
   14940:	bl	115ac <setenv@plt>
   14944:	movw	r5, #42062	; 0xa44e
   14948:	cmp	r6, #0
   1494c:	movt	r5, #1
   14950:	movne	r5, r6
   14954:	cmp	r0, #0
   14958:	bne	14cf4 <__assert_fail@plt+0x35e0>
   1495c:	movw	r0, #45968	; 0xb390
   14960:	movt	r0, #2
   14964:	ldrb	r0, [r0]
   14968:	cmp	r0, #1
   1496c:	bne	149b8 <__assert_fail@plt+0x32a4>
   14970:	movw	r0, #45924	; 0xb364
   14974:	movw	r1, #42115	; 0xa483
   14978:	mov	r2, #5
   1497c:	movt	r0, #2
   14980:	movt	r1, #1
   14984:	ldr	r6, [r0]
   14988:	mov	r0, #0
   1498c:	bl	11450 <dcgettext@plt>
   14990:	mov	r7, r0
   14994:	mov	r0, #0
   14998:	mov	r1, #3
   1499c:	mov	r2, r4
   149a0:	bl	16d90 <__assert_fail@plt+0x567c>
   149a4:	mov	r3, r0
   149a8:	mov	r0, r6
   149ac:	mov	r1, #1
   149b0:	mov	r2, r7
   149b4:	bl	11624 <__fprintf_chk@plt>
   149b8:	add	r0, sp, #8
   149bc:	bl	11648 <pipe@plt>
   149c0:	cmp	r0, #0
   149c4:	bne	14d08 <__assert_fail@plt+0x35f4>
   149c8:	bl	11684 <fork@plt>
   149cc:	cmp	r0, #0
   149d0:	beq	14b6c <__assert_fail@plt+0x3458>
   149d4:	mov	r4, r0
   149d8:	cmn	r0, #1
   149dc:	beq	14d1c <__assert_fail@plt+0x3608>
   149e0:	ldr	r0, [sp, #8]
   149e4:	bl	116fc <close@plt>
   149e8:	cmp	r0, #0
   149ec:	bne	14d30 <__assert_fail@plt+0x361c>
   149f0:	movw	r0, #46336	; 0xb500
   149f4:	movt	r0, #2
   149f8:	str	r4, [r0]
   149fc:	movw	r4, #46368	; 0xb520
   14a00:	movw	r0, #46376	; 0xb528
   14a04:	movt	r0, #2
   14a08:	movt	r4, #2
   14a0c:	ldr	r1, [r4]
   14a10:	ldr	r0, [r0]
   14a14:	cmp	r1, r0
   14a18:	bne	14c40 <__assert_fail@plt+0x352c>
   14a1c:	movw	r5, #46372	; 0xb524
   14a20:	movw	r1, #46376	; 0xb528
   14a24:	mov	r2, #4
   14a28:	movt	r5, #2
   14a2c:	movt	r1, #2
   14a30:	ldr	r0, [r5]
   14a34:	bl	17d50 <__assert_fail@plt+0x663c>
   14a38:	ldr	r1, [r4]
   14a3c:	str	r0, [r5]
   14a40:	b	14c4c <__assert_fail@plt+0x3538>
   14a44:	movw	r0, #45968	; 0xb390
   14a48:	movt	r0, #2
   14a4c:	ldrb	r0, [r0]
   14a50:	cmp	r0, #1
   14a54:	bne	14a9c <__assert_fail@plt+0x3388>
   14a58:	movw	r0, #45924	; 0xb364
   14a5c:	movw	r1, #41964	; 0xa3ec
   14a60:	mov	r2, #5
   14a64:	movt	r0, #2
   14a68:	movt	r1, #1
   14a6c:	ldr	r5, [r0]
   14a70:	mov	r0, #0
   14a74:	bl	11450 <dcgettext@plt>
   14a78:	mov	r6, r0
   14a7c:	mov	r0, #4
   14a80:	mov	r1, r4
   14a84:	bl	16b14 <__assert_fail@plt+0x5400>
   14a88:	mov	r3, r0
   14a8c:	mov	r0, r5
   14a90:	mov	r1, #1
   14a94:	mov	r2, r6
   14a98:	bl	11624 <__fprintf_chk@plt>
   14a9c:	mov	r0, r4
   14aa0:	mov	r1, #65	; 0x41
   14aa4:	movw	r2, #438	; 0x1b6
   14aa8:	bl	15160 <__assert_fail@plt+0x3a4c>
   14aac:	mov	r5, r0
   14ab0:	cmp	r0, #0
   14ab4:	blt	14c60 <__assert_fail@plt+0x354c>
   14ab8:	add	r2, sp, #8
   14abc:	mov	r0, #3
   14ac0:	mov	r1, r5
   14ac4:	bl	11498 <__fxstat64@plt>
   14ac8:	cmp	r0, #0
   14acc:	bne	14d44 <__assert_fail@plt+0x3630>
   14ad0:	movw	r0, #45976	; 0xb398
   14ad4:	ldr	r1, [sp, #104]	; 0x68
   14ad8:	ldr	r7, [sp, #108]	; 0x6c
   14adc:	movt	r0, #2
   14ae0:	ldrd	r2, [r0, #96]	; 0x60
   14ae4:	eor	r3, r3, r7
   14ae8:	eor	r1, r2, r1
   14aec:	orrs	r1, r1, r3
   14af0:	bne	14b10 <__assert_fail@plt+0x33fc>
   14af4:	ldrd	r0, [r0]
   14af8:	ldr	r2, [sp, #8]
   14afc:	ldr	r3, [sp, #12]
   14b00:	eor	r1, r1, r3
   14b04:	eor	r0, r0, r2
   14b08:	orrs	r0, r0, r1
   14b0c:	beq	14d84 <__assert_fail@plt+0x3670>
   14b10:	mov	r0, r5
   14b14:	mov	r2, #0
   14b18:	mov	r3, #0
   14b1c:	bl	1142c <ftruncate64@plt>
   14b20:	cmp	r0, #0
   14b24:	beq	14c60 <__assert_fail@plt+0x354c>
   14b28:	ldr	r0, [sp, #24]
   14b2c:	and	r0, r0, #61440	; 0xf000
   14b30:	cmp	r0, #32768	; 0x8000
   14b34:	bne	14c60 <__assert_fail@plt+0x354c>
   14b38:	bl	115d0 <__errno_location@plt>
   14b3c:	ldr	r5, [r0]
   14b40:	movw	r1, #42035	; 0xa433
   14b44:	mov	r0, #0
   14b48:	mov	r2, #5
   14b4c:	movt	r1, #1
   14b50:	bl	11450 <dcgettext@plt>
   14b54:	mov	r6, r0
   14b58:	mov	r0, #0
   14b5c:	mov	r1, #3
   14b60:	mov	r2, r4
   14b64:	bl	16d90 <__assert_fail@plt+0x567c>
   14b68:	b	14d70 <__assert_fail@plt+0x365c>
   14b6c:	movw	r4, #46368	; 0xb520
   14b70:	movt	r4, #2
   14b74:	ldr	r0, [r4]
   14b78:	cmp	r0, #0
   14b7c:	beq	14bb0 <__assert_fail@plt+0x349c>
   14b80:	movw	r7, #46372	; 0xb524
   14b84:	mov	r6, #0
   14b88:	movt	r7, #2
   14b8c:	ldr	r0, [r7]
   14b90:	ldr	r0, [r0, r6, lsl #2]
   14b94:	bl	116fc <close@plt>
   14b98:	cmp	r0, #0
   14b9c:	bne	14c6c <__assert_fail@plt+0x3558>
   14ba0:	ldr	r0, [r4]
   14ba4:	add	r6, r6, #1
   14ba8:	cmp	r6, r0
   14bac:	bcc	14b8c <__assert_fail@plt+0x3478>
   14bb0:	ldr	r0, [sp, #12]
   14bb4:	bl	116fc <close@plt>
   14bb8:	cmp	r0, #0
   14bbc:	bne	14c80 <__assert_fail@plt+0x356c>
   14bc0:	ldr	r0, [sp, #8]
   14bc4:	cmp	r0, #0
   14bc8:	bne	14cac <__assert_fail@plt+0x3598>
   14bcc:	movw	r1, #46208	; 0xb480
   14bd0:	mov	r0, #2
   14bd4:	mov	r2, #0
   14bd8:	mov	r4, #0
   14bdc:	movt	r1, #2
   14be0:	bl	113d8 <sigprocmask@plt>
   14be4:	mov	r0, r5
   14be8:	bl	14f38 <__assert_fail@plt+0x3824>
   14bec:	ldr	r3, [r8]
   14bf0:	movw	r2, #42237	; 0xa4fd
   14bf4:	mov	r1, r0
   14bf8:	mov	r0, r5
   14bfc:	str	r4, [sp]
   14c00:	movt	r2, #1
   14c04:	bl	11690 <execl@plt>
   14c08:	bl	115d0 <__errno_location@plt>
   14c0c:	ldr	r4, [r0]
   14c10:	movw	r1, #42240	; 0xa500
   14c14:	mov	r0, #0
   14c18:	mov	r2, #5
   14c1c:	movt	r1, #1
   14c20:	bl	11450 <dcgettext@plt>
   14c24:	mov	r2, r0
   14c28:	ldr	r0, [r8]
   14c2c:	mov	r1, r4
   14c30:	mov	r3, r5
   14c34:	str	r0, [sp]
   14c38:	mov	r0, #1
   14c3c:	bl	11504 <error@plt>
   14c40:	movw	r0, #46372	; 0xb524
   14c44:	movt	r0, #2
   14c48:	ldr	r0, [r0]
   14c4c:	add	r2, r1, #1
   14c50:	str	r2, [r4]
   14c54:	ldr	r2, [sp, #12]
   14c58:	str	r2, [r0, r1, lsl #2]
   14c5c:	ldr	r5, [sp, #12]
   14c60:	mov	r0, r5
   14c64:	sub	sp, fp, #24
   14c68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c6c:	bl	115d0 <__errno_location@plt>
   14c70:	ldr	r4, [r0]
   14c74:	movw	r1, #42161	; 0xa4b1
   14c78:	movt	r1, #1
   14c7c:	b	14c90 <__assert_fail@plt+0x357c>
   14c80:	bl	115d0 <__errno_location@plt>
   14c84:	ldr	r4, [r0]
   14c88:	movw	r1, #42180	; 0xa4c4
   14c8c:	movt	r1, #1
   14c90:	mov	r0, #0
   14c94:	mov	r2, #5
   14c98:	bl	11450 <dcgettext@plt>
   14c9c:	mov	r2, r0
   14ca0:	mov	r0, #1
   14ca4:	mov	r1, r4
   14ca8:	bl	11504 <error@plt>
   14cac:	mov	r1, #0
   14cb0:	bl	1145c <dup2@plt>
   14cb4:	cmp	r0, #0
   14cb8:	bne	14ce0 <__assert_fail@plt+0x35cc>
   14cbc:	ldr	r0, [sp, #8]
   14cc0:	bl	116fc <close@plt>
   14cc4:	cmp	r0, #0
   14cc8:	beq	14bcc <__assert_fail@plt+0x34b8>
   14ccc:	bl	115d0 <__errno_location@plt>
   14cd0:	ldr	r4, [r0]
   14cd4:	movw	r1, #42218	; 0xa4ea
   14cd8:	movt	r1, #1
   14cdc:	b	14c90 <__assert_fail@plt+0x357c>
   14ce0:	bl	115d0 <__errno_location@plt>
   14ce4:	ldr	r4, [r0]
   14ce8:	movw	r1, #42200	; 0xa4d8
   14cec:	movt	r1, #1
   14cf0:	b	14c90 <__assert_fail@plt+0x357c>
   14cf4:	bl	115d0 <__errno_location@plt>
   14cf8:	ldr	r4, [r0]
   14cfc:	movw	r1, #42075	; 0xa45b
   14d00:	movt	r1, #1
   14d04:	b	14c90 <__assert_fail@plt+0x357c>
   14d08:	bl	115d0 <__errno_location@plt>
   14d0c:	ldr	r4, [r0]
   14d10:	movw	r1, #42139	; 0xa49b
   14d14:	movt	r1, #1
   14d18:	b	14c90 <__assert_fail@plt+0x357c>
   14d1c:	bl	115d0 <__errno_location@plt>
   14d20:	ldr	r4, [r0]
   14d24:	movw	r1, #42274	; 0xa522
   14d28:	movt	r1, #1
   14d2c:	b	14c90 <__assert_fail@plt+0x357c>
   14d30:	bl	115d0 <__errno_location@plt>
   14d34:	ldr	r4, [r0]
   14d38:	movw	r1, #42298	; 0xa53a
   14d3c:	movt	r1, #1
   14d40:	b	14c90 <__assert_fail@plt+0x357c>
   14d44:	bl	115d0 <__errno_location@plt>
   14d48:	ldr	r5, [r0]
   14d4c:	movw	r1, #41982	; 0xa3fe
   14d50:	mov	r0, #0
   14d54:	mov	r2, #5
   14d58:	movt	r1, #1
   14d5c:	bl	11450 <dcgettext@plt>
   14d60:	mov	r6, r0
   14d64:	mov	r0, #4
   14d68:	mov	r1, r4
   14d6c:	bl	16b14 <__assert_fail@plt+0x5400>
   14d70:	mov	r3, r0
   14d74:	mov	r0, #1
   14d78:	mov	r1, r5
   14d7c:	mov	r2, r6
   14d80:	bl	11504 <error@plt>
   14d84:	movw	r1, #42000	; 0xa410
   14d88:	mov	r0, #0
   14d8c:	mov	r2, #5
   14d90:	movt	r1, #1
   14d94:	bl	11450 <dcgettext@plt>
   14d98:	mov	r5, r0
   14d9c:	mov	r0, #4
   14da0:	mov	r1, r4
   14da4:	bl	16b14 <__assert_fail@plt+0x5400>
   14da8:	mov	r3, r0
   14dac:	mov	r0, #1
   14db0:	mov	r1, #0
   14db4:	mov	r2, r5
   14db8:	bl	11504 <error@plt>
   14dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dc0:	add	fp, sp, #28
   14dc4:	sub	sp, sp, #12
   14dc8:	mov	r4, r0
   14dcc:	add	r0, r0, r1, lsl #4
   14dd0:	mov	r5, r1
   14dd4:	mov	r9, #0
   14dd8:	mov	r7, r0
   14ddc:	ldr	r1, [r7, #4]!
   14de0:	cmn	r1, #1
   14de4:	bgt	14ef0 <__assert_fail@plt+0x37dc>
   14de8:	sub	r8, r2, #1
   14dec:	cmp	r5, #0
   14df0:	mov	r9, #0
   14df4:	str	r0, [sp, #4]
   14df8:	str	r7, [sp, #8]
   14dfc:	mov	r6, r8
   14e00:	subne	r6, r5, #1
   14e04:	b	14e24 <__assert_fail@plt+0x3710>
   14e08:	ldr	r7, [sp, #8]
   14e0c:	mov	r0, #0
   14e10:	str	r0, [sl]
   14e14:	mvn	r0, #1
   14e18:	str	r0, [r9]
   14e1c:	mov	r9, #1
   14e20:	ldr	r1, [r7]
   14e24:	ldr	r0, [r4, r5, lsl #4]
   14e28:	cmn	r1, #1
   14e2c:	beq	14e44 <__assert_fail@plt+0x3730>
   14e30:	movw	r1, #3073	; 0xc01
   14e34:	bl	15160 <__assert_fail@plt+0x3a4c>
   14e38:	cmn	r0, #1
   14e3c:	ble	14e50 <__assert_fail@plt+0x373c>
   14e40:	b	14eb8 <__assert_fail@plt+0x37a4>
   14e44:	bl	148fc <__assert_fail@plt+0x31e8>
   14e48:	cmn	r0, #1
   14e4c:	bgt	14eb8 <__assert_fail@plt+0x37a4>
   14e50:	bl	115d0 <__errno_location@plt>
   14e54:	ldr	r1, [r0]
   14e58:	mov	r7, r0
   14e5c:	sub	r0, r1, #23
   14e60:	cmp	r0, #1
   14e64:	bhi	14efc <__assert_fail@plt+0x37e8>
   14e68:	add	sl, r4, r6, lsl #4
   14e6c:	mov	r9, sl
   14e70:	ldr	r0, [r9, #4]!
   14e74:	cmn	r0, #1
   14e78:	bgt	14e98 <__assert_fail@plt+0x3784>
   14e7c:	cmp	r6, #0
   14e80:	mov	r0, r8
   14e84:	subne	r0, r6, #1
   14e88:	cmp	r0, r5
   14e8c:	mov	r6, r0
   14e90:	bne	14e68 <__assert_fail@plt+0x3754>
   14e94:	b	14efc <__assert_fail@plt+0x37e8>
   14e98:	ldr	r0, [sl, #8]!
   14e9c:	bl	150c4 <__assert_fail@plt+0x39b0>
   14ea0:	cmp	r0, #0
   14ea4:	beq	14e08 <__assert_fail@plt+0x36f4>
   14ea8:	ldr	r2, [r4, r6, lsl #4]
   14eac:	ldr	r4, [r7]
   14eb0:	mov	r0, #0
   14eb4:	b	14f08 <__assert_fail@plt+0x37f4>
   14eb8:	movw	r1, #42526	; 0xa61e
   14ebc:	str	r0, [r7]
   14ec0:	movt	r1, #1
   14ec4:	bl	11378 <fdopen@plt>
   14ec8:	ldr	r2, [sp, #4]
   14ecc:	cmp	r0, #0
   14ed0:	str	r0, [r2, #8]
   14ed4:	beq	14f28 <__assert_fail@plt+0x3814>
   14ed8:	movw	r0, #46336	; 0xb500
   14edc:	movt	r0, #2
   14ee0:	ldr	r1, [r0]
   14ee4:	str	r1, [r2, #12]
   14ee8:	mov	r1, #0
   14eec:	str	r1, [r0]
   14ef0:	and	r0, r9, #1
   14ef4:	sub	sp, fp, #28
   14ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14efc:	ldr	r2, [r4, r5, lsl #4]
   14f00:	mov	r0, #0
   14f04:	mov	r4, r1
   14f08:	mov	r1, #3
   14f0c:	bl	16d90 <__assert_fail@plt+0x567c>
   14f10:	movw	r2, #42634	; 0xa68a
   14f14:	mov	r3, r0
   14f18:	mov	r0, #1
   14f1c:	mov	r1, r4
   14f20:	movt	r2, #1
   14f24:	bl	11504 <error@plt>
   14f28:	bl	115d0 <__errno_location@plt>
   14f2c:	ldr	r2, [r4, r5, lsl #4]
   14f30:	ldr	r4, [r0]
   14f34:	b	14eb0 <__assert_fail@plt+0x379c>
   14f38:	sub	r0, r0, #1
   14f3c:	ldrb	r3, [r0, #1]!
   14f40:	cmp	r3, #47	; 0x2f
   14f44:	beq	14f3c <__assert_fail@plt+0x3828>
   14f48:	mov	r2, #0
   14f4c:	mov	r1, r0
   14f50:	b	14f6c <__assert_fail@plt+0x3858>
   14f54:	cmp	r3, #0
   14f58:	bxeq	lr
   14f5c:	tst	r2, #1
   14f60:	mov	r2, #0
   14f64:	movne	r0, r1
   14f68:	ldrb	r3, [r1, #1]!
   14f6c:	uxtb	r3, r3
   14f70:	cmp	r3, #47	; 0x2f
   14f74:	bne	14f54 <__assert_fail@plt+0x3840>
   14f78:	ldrb	r3, [r1, #1]!
   14f7c:	mov	r2, #1
   14f80:	b	14f6c <__assert_fail@plt+0x3858>
   14f84:	push	{r4, sl, fp, lr}
   14f88:	add	fp, sp, #8
   14f8c:	mov	r4, r0
   14f90:	bl	11588 <strlen@plt>
   14f94:	mov	r1, r0
   14f98:	sub	r2, r4, #1
   14f9c:	mov	r0, r1
   14fa0:	cmp	r1, #2
   14fa4:	popcc	{r4, sl, fp, pc}
   14fa8:	ldrb	r3, [r2, r0]
   14fac:	sub	r1, r0, #1
   14fb0:	cmp	r3, #47	; 0x2f
   14fb4:	beq	14f9c <__assert_fail@plt+0x3888>
   14fb8:	pop	{r4, sl, fp, pc}
   14fbc:	movw	r1, #46380	; 0xb52c
   14fc0:	movt	r1, #2
   14fc4:	str	r0, [r1]
   14fc8:	bx	lr
   14fcc:	movw	r1, #46384	; 0xb530
   14fd0:	movt	r1, #2
   14fd4:	strb	r0, [r1]
   14fd8:	bx	lr
   14fdc:	push	{r4, r5, r6, sl, fp, lr}
   14fe0:	add	fp, sp, #16
   14fe4:	sub	sp, sp, #8
   14fe8:	movw	r0, #45924	; 0xb364
   14fec:	movt	r0, #2
   14ff0:	ldr	r0, [r0]
   14ff4:	bl	18fbc <__assert_fail@plt+0x78a8>
   14ff8:	cmp	r0, #0
   14ffc:	beq	15024 <__assert_fail@plt+0x3910>
   15000:	movw	r0, #46384	; 0xb530
   15004:	movt	r0, #2
   15008:	ldrb	r0, [r0]
   1500c:	cmp	r0, #0
   15010:	beq	15044 <__assert_fail@plt+0x3930>
   15014:	bl	115d0 <__errno_location@plt>
   15018:	ldr	r0, [r0]
   1501c:	cmp	r0, #32
   15020:	bne	15044 <__assert_fail@plt+0x3930>
   15024:	movw	r0, #45920	; 0xb360
   15028:	movt	r0, #2
   1502c:	ldr	r0, [r0]
   15030:	bl	18fbc <__assert_fail@plt+0x78a8>
   15034:	cmp	r0, #0
   15038:	subeq	sp, fp, #16
   1503c:	popeq	{r4, r5, r6, sl, fp, pc}
   15040:	b	150b4 <__assert_fail@plt+0x39a0>
   15044:	movw	r1, #42514	; 0xa612
   15048:	mov	r0, #0
   1504c:	mov	r2, #5
   15050:	movt	r1, #1
   15054:	bl	11450 <dcgettext@plt>
   15058:	mov	r4, r0
   1505c:	movw	r0, #46380	; 0xb52c
   15060:	movt	r0, #2
   15064:	ldr	r6, [r0]
   15068:	bl	115d0 <__errno_location@plt>
   1506c:	ldr	r5, [r0]
   15070:	cmp	r6, #0
   15074:	bne	15090 <__assert_fail@plt+0x397c>
   15078:	movw	r2, #42634	; 0xa68a
   1507c:	mov	r0, #0
   15080:	mov	r1, r5
   15084:	mov	r3, r4
   15088:	movt	r2, #1
   1508c:	b	150b0 <__assert_fail@plt+0x399c>
   15090:	mov	r0, r6
   15094:	bl	16cb4 <__assert_fail@plt+0x55a0>
   15098:	movw	r2, #40853	; 0x9f95
   1509c:	mov	r3, r0
   150a0:	str	r4, [sp]
   150a4:	mov	r0, #0
   150a8:	mov	r1, r5
   150ac:	movt	r2, #1
   150b0:	bl	11504 <error@plt>
   150b4:	movw	r0, #45408	; 0xb160
   150b8:	movt	r0, #2
   150bc:	ldr	r0, [r0]
   150c0:	bl	113fc <_exit@plt>
   150c4:	push	{r4, r5, r6, sl, fp, lr}
   150c8:	add	fp, sp, #16
   150cc:	sub	sp, sp, #8
   150d0:	mov	r4, r0
   150d4:	bl	11618 <fileno@plt>
   150d8:	cmn	r0, #1
   150dc:	ble	15150 <__assert_fail@plt+0x3a3c>
   150e0:	mov	r0, r4
   150e4:	bl	1154c <__freading@plt>
   150e8:	cmp	r0, #0
   150ec:	beq	15118 <__assert_fail@plt+0x3a04>
   150f0:	mov	r0, r4
   150f4:	bl	11618 <fileno@plt>
   150f8:	mov	r1, #1
   150fc:	mov	r2, #0
   15100:	mov	r3, #0
   15104:	str	r1, [sp]
   15108:	bl	114bc <lseek64@plt>
   1510c:	and	r0, r0, r1
   15110:	cmn	r0, #1
   15114:	beq	15150 <__assert_fail@plt+0x3a3c>
   15118:	mov	r0, r4
   1511c:	bl	15210 <__assert_fail@plt+0x3afc>
   15120:	cmp	r0, #0
   15124:	beq	15150 <__assert_fail@plt+0x3a3c>
   15128:	bl	115d0 <__errno_location@plt>
   1512c:	ldr	r6, [r0]
   15130:	mov	r5, r0
   15134:	mov	r0, r4
   15138:	bl	1163c <fclose@plt>
   1513c:	cmp	r6, #0
   15140:	strne	r6, [r5]
   15144:	mvnne	r0, #0
   15148:	sub	sp, fp, #16
   1514c:	pop	{r4, r5, r6, sl, fp, pc}
   15150:	mov	r0, r4
   15154:	sub	sp, fp, #16
   15158:	pop	{r4, r5, r6, sl, fp, lr}
   1515c:	b	1163c <fclose@plt>
   15160:	sub	sp, sp, #8
   15164:	push	{fp, lr}
   15168:	mov	fp, sp
   1516c:	sub	sp, sp, #8
   15170:	str	r2, [fp, #8]
   15174:	mov	r2, #0
   15178:	tst	r1, #64	; 0x40
   1517c:	str	r3, [fp, #12]
   15180:	addne	r2, fp, #8
   15184:	orrne	r2, r2, #4
   15188:	strne	r2, [sp, #4]
   1518c:	ldrne	r2, [fp, #8]
   15190:	bl	11510 <open64@plt>
   15194:	bl	17490 <__assert_fail@plt+0x5d7c>
   15198:	mov	sp, fp
   1519c:	pop	{fp, lr}
   151a0:	add	sp, sp, #8
   151a4:	bx	lr
   151a8:	push	{r4, r5, r6, r7, fp, lr}
   151ac:	add	fp, sp, #16
   151b0:	mov	r5, r0
   151b4:	mov	r0, r1
   151b8:	mov	r1, r2
   151bc:	mov	r2, r3
   151c0:	bl	11510 <open64@plt>
   151c4:	mov	r4, r0
   151c8:	cmp	r0, r5
   151cc:	beq	15208 <__assert_fail@plt+0x3af4>
   151d0:	cmp	r4, #0
   151d4:	blt	15208 <__assert_fail@plt+0x3af4>
   151d8:	mov	r0, r4
   151dc:	mov	r1, r5
   151e0:	bl	1145c <dup2@plt>
   151e4:	mov	r5, r0
   151e8:	bl	115d0 <__errno_location@plt>
   151ec:	ldr	r7, [r0]
   151f0:	mov	r6, r0
   151f4:	mov	r0, r4
   151f8:	bl	116fc <close@plt>
   151fc:	mov	r0, r5
   15200:	str	r7, [r6]
   15204:	pop	{r4, r5, r6, r7, fp, pc}
   15208:	mov	r0, r4
   1520c:	pop	{r4, r5, r6, r7, fp, pc}
   15210:	push	{r4, sl, fp, lr}
   15214:	add	fp, sp, #8
   15218:	sub	sp, sp, #8
   1521c:	mov	r4, r0
   15220:	cmp	r0, #0
   15224:	beq	15240 <__assert_fail@plt+0x3b2c>
   15228:	mov	r0, r4
   1522c:	bl	1154c <__freading@plt>
   15230:	cmp	r0, #0
   15234:	ldrbne	r0, [r4, #1]
   15238:	tstne	r0, #1
   1523c:	bne	15250 <__assert_fail@plt+0x3b3c>
   15240:	mov	r0, r4
   15244:	sub	sp, fp, #8
   15248:	pop	{r4, sl, fp, lr}
   1524c:	b	113cc <fflush@plt>
   15250:	mov	r0, #1
   15254:	mov	r2, #0
   15258:	mov	r3, #0
   1525c:	str	r0, [sp]
   15260:	mov	r0, r4
   15264:	bl	15294 <__assert_fail@plt+0x3b80>
   15268:	b	15240 <__assert_fail@plt+0x3b2c>
   1526c:	push	{r4, r5, r6, sl, fp, lr}
   15270:	add	fp, sp, #16
   15274:	mov	r4, r0
   15278:	bl	115d0 <__errno_location@plt>
   1527c:	ldr	r6, [r0]
   15280:	mov	r5, r0
   15284:	mov	r0, r4
   15288:	bl	113f0 <free@plt>
   1528c:	str	r6, [r5]
   15290:	pop	{r4, r5, r6, sl, fp, pc}
   15294:	push	{r4, r5, r6, r7, fp, lr}
   15298:	add	fp, sp, #16
   1529c:	sub	sp, sp, #8
   152a0:	mov	r4, r0
   152a4:	ldr	r0, [r0, #4]
   152a8:	mov	r5, r3
   152ac:	mov	r6, r2
   152b0:	ldr	r1, [r4, #8]
   152b4:	cmp	r1, r0
   152b8:	bne	152d4 <__assert_fail@plt+0x3bc0>
   152bc:	ldrd	r0, [r4, #16]
   152c0:	cmp	r1, r0
   152c4:	bne	152d4 <__assert_fail@plt+0x3bc0>
   152c8:	ldr	r0, [r4, #36]	; 0x24
   152cc:	cmp	r0, #0
   152d0:	beq	152ec <__assert_fail@plt+0x3bd8>
   152d4:	mov	r0, r4
   152d8:	mov	r2, r6
   152dc:	mov	r3, r5
   152e0:	sub	sp, fp, #16
   152e4:	pop	{r4, r5, r6, r7, fp, lr}
   152e8:	b	11654 <fseeko64@plt>
   152ec:	ldr	r7, [fp, #8]
   152f0:	mov	r0, r4
   152f4:	bl	11618 <fileno@plt>
   152f8:	mov	r2, r6
   152fc:	mov	r3, r5
   15300:	str	r7, [sp]
   15304:	bl	114bc <lseek64@plt>
   15308:	and	r2, r0, r1
   1530c:	cmn	r2, #1
   15310:	mvneq	r0, #0
   15314:	subeq	sp, fp, #16
   15318:	popeq	{r4, r5, r6, r7, fp, pc}
   1531c:	strd	r0, [r4, #80]	; 0x50
   15320:	ldr	r0, [r4]
   15324:	bic	r0, r0, #16
   15328:	str	r0, [r4]
   1532c:	mov	r0, #0
   15330:	sub	sp, fp, #16
   15334:	pop	{r4, r5, r6, r7, fp, pc}
   15338:	push	{r4, r5, r6, r7, fp, lr}
   1533c:	add	fp, sp, #16
   15340:	cmp	r2, #0
   15344:	moveq	r4, #0
   15348:	moveq	r0, r4
   1534c:	popeq	{r4, r5, r6, r7, fp, pc}
   15350:	mov	r5, r2
   15354:	mov	r6, r1
   15358:	mov	r7, r0
   1535c:	mov	r4, #0
   15360:	mov	r0, r7
   15364:	mov	r1, r6
   15368:	mov	r2, r5
   1536c:	bl	171d8 <__assert_fail@plt+0x5ac4>
   15370:	cmn	r0, #1
   15374:	beq	15390 <__assert_fail@plt+0x3c7c>
   15378:	cmp	r0, #0
   1537c:	beq	15398 <__assert_fail@plt+0x3c84>
   15380:	subs	r5, r5, r0
   15384:	add	r6, r6, r0
   15388:	add	r4, r0, r4
   1538c:	bne	15360 <__assert_fail@plt+0x3c4c>
   15390:	mov	r0, r4
   15394:	pop	{r4, r5, r6, r7, fp, pc}
   15398:	bl	115d0 <__errno_location@plt>
   1539c:	mov	r1, #28
   153a0:	str	r1, [r0]
   153a4:	mov	r0, r4
   153a8:	pop	{r4, r5, r6, r7, fp, pc}
   153ac:	push	{r4, r5, r6, sl, fp, lr}
   153b0:	add	fp, sp, #16
   153b4:	mov	r5, r0
   153b8:	mov	r0, #0
   153bc:	mov	r4, r1
   153c0:	add	r6, r2, #19
   153c4:	strb	r0, [r2, #20]
   153c8:	mov	r0, r5
   153cc:	mov	r1, r4
   153d0:	mov	r2, #10
   153d4:	mov	r3, #0
   153d8:	bl	19408 <__assert_fail@plt+0x7cf4>
   153dc:	add	r2, r0, r0, lsl #2
   153e0:	sub	r2, r5, r2, lsl #1
   153e4:	orr	r2, r2, #48	; 0x30
   153e8:	strb	r2, [r6], #-1
   153ec:	rsbs	r2, r5, #9
   153f0:	mov	r5, r0
   153f4:	rscs	r2, r4, #0
   153f8:	mov	r4, r1
   153fc:	bcc	153c8 <__assert_fail@plt+0x3cb4>
   15400:	add	r0, r6, #1
   15404:	pop	{r4, r5, r6, sl, fp, pc}
   15408:	push	{r4, r5, fp, lr}
   1540c:	add	fp, sp, #8
   15410:	cmp	r0, #0
   15414:	beq	154a8 <__assert_fail@plt+0x3d94>
   15418:	mov	r1, #47	; 0x2f
   1541c:	mov	r4, r0
   15420:	bl	1169c <strrchr@plt>
   15424:	cmp	r0, #0
   15428:	mov	r5, r4
   1542c:	addne	r5, r0, #1
   15430:	sub	r0, r5, r4
   15434:	cmp	r0, #7
   15438:	blt	1548c <__assert_fail@plt+0x3d78>
   1543c:	movw	r1, #43087	; 0xa84f
   15440:	sub	r0, r5, #7
   15444:	mov	r2, #7
   15448:	movt	r1, #1
   1544c:	bl	116e4 <strncmp@plt>
   15450:	cmp	r0, #0
   15454:	bne	1548c <__assert_fail@plt+0x3d78>
   15458:	movw	r1, #43095	; 0xa857
   1545c:	mov	r0, r5
   15460:	mov	r2, #3
   15464:	movt	r1, #1
   15468:	bl	116e4 <strncmp@plt>
   1546c:	cmp	r0, #0
   15470:	beq	1547c <__assert_fail@plt+0x3d68>
   15474:	mov	r4, r5
   15478:	b	1548c <__assert_fail@plt+0x3d78>
   1547c:	movw	r0, #45904	; 0xb350
   15480:	add	r4, r5, #3
   15484:	movt	r0, #2
   15488:	str	r4, [r0]
   1548c:	movw	r0, #45908	; 0xb354
   15490:	movt	r0, #2
   15494:	str	r4, [r0]
   15498:	movw	r0, #46388	; 0xb534
   1549c:	movt	r0, #2
   154a0:	str	r4, [r0]
   154a4:	pop	{r4, r5, fp, pc}
   154a8:	movw	r0, #45920	; 0xb360
   154ac:	mov	r1, #55	; 0x37
   154b0:	mov	r2, #1
   154b4:	movt	r0, #2
   154b8:	ldr	r3, [r0]
   154bc:	movw	r0, #43031	; 0xa817
   154c0:	movt	r0, #1
   154c4:	bl	114b0 <fwrite@plt>
   154c8:	bl	116f0 <abort@plt>
   154cc:	push	{r4, r5, r6, sl, fp, lr}
   154d0:	add	fp, sp, #16
   154d4:	mov	r4, r0
   154d8:	movw	r0, #46392	; 0xb538
   154dc:	movt	r0, #2
   154e0:	cmp	r4, #0
   154e4:	moveq	r4, r0
   154e8:	bl	115d0 <__errno_location@plt>
   154ec:	ldr	r6, [r0]
   154f0:	mov	r5, r0
   154f4:	mov	r0, r4
   154f8:	mov	r1, #48	; 0x30
   154fc:	bl	18004 <__assert_fail@plt+0x68f0>
   15500:	str	r6, [r5]
   15504:	pop	{r4, r5, r6, sl, fp, pc}
   15508:	movw	r1, #46392	; 0xb538
   1550c:	cmp	r0, #0
   15510:	movt	r1, #2
   15514:	movne	r1, r0
   15518:	ldr	r0, [r1]
   1551c:	bx	lr
   15520:	movw	r2, #46392	; 0xb538
   15524:	cmp	r0, #0
   15528:	movt	r2, #2
   1552c:	movne	r2, r0
   15530:	str	r1, [r2]
   15534:	bx	lr
   15538:	movw	r3, #46392	; 0xb538
   1553c:	cmp	r0, #0
   15540:	movt	r3, #2
   15544:	movne	r3, r0
   15548:	ubfx	r0, r1, #5, #3
   1554c:	and	r1, r1, #31
   15550:	add	r0, r3, r0, lsl #2
   15554:	ldr	r3, [r0, #8]
   15558:	eor	r2, r2, r3, lsr r1
   1555c:	and	r2, r2, #1
   15560:	eor	r2, r3, r2, lsl r1
   15564:	str	r2, [r0, #8]
   15568:	mov	r0, #1
   1556c:	and	r0, r0, r3, lsr r1
   15570:	bx	lr
   15574:	movw	r2, #46392	; 0xb538
   15578:	cmp	r0, #0
   1557c:	movt	r2, #2
   15580:	movne	r2, r0
   15584:	ldr	r0, [r2, #4]
   15588:	str	r1, [r2, #4]
   1558c:	bx	lr
   15590:	movw	r3, #46392	; 0xb538
   15594:	cmp	r0, #0
   15598:	movt	r3, #2
   1559c:	movne	r3, r0
   155a0:	cmp	r1, #0
   155a4:	mov	r0, #10
   155a8:	cmpne	r2, #0
   155ac:	str	r0, [r3]
   155b0:	bne	155c0 <__assert_fail@plt+0x3eac>
   155b4:	push	{fp, lr}
   155b8:	mov	fp, sp
   155bc:	bl	116f0 <abort@plt>
   155c0:	str	r1, [r3, #40]	; 0x28
   155c4:	str	r2, [r3, #44]	; 0x2c
   155c8:	bx	lr
   155cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d0:	add	fp, sp, #28
   155d4:	sub	sp, sp, #20
   155d8:	mov	r7, r0
   155dc:	ldr	r0, [fp, #8]
   155e0:	movw	r5, #46392	; 0xb538
   155e4:	mov	r8, r3
   155e8:	mov	r9, r2
   155ec:	mov	sl, r1
   155f0:	movt	r5, #2
   155f4:	cmp	r0, #0
   155f8:	movne	r5, r0
   155fc:	bl	115d0 <__errno_location@plt>
   15600:	mov	r4, r0
   15604:	ldm	r5, {r0, r1}
   15608:	ldr	r2, [r5, #40]	; 0x28
   1560c:	ldr	r3, [r5, #44]	; 0x2c
   15610:	add	r5, r5, #8
   15614:	ldr	r6, [r4]
   15618:	stm	sp, {r0, r1, r5}
   1561c:	str	r2, [sp, #12]
   15620:	str	r3, [sp, #16]
   15624:	mov	r0, r7
   15628:	mov	r1, sl
   1562c:	mov	r2, r9
   15630:	mov	r3, r8
   15634:	bl	15644 <__assert_fail@plt+0x3f30>
   15638:	str	r6, [r4]
   1563c:	sub	sp, fp, #28
   15640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	add	fp, sp, #28
   1564c:	sub	sp, sp, #156	; 0x9c
   15650:	str	r0, [sp, #80]	; 0x50
   15654:	ldr	r0, [fp, #12]
   15658:	mov	r6, r1
   1565c:	mov	r9, r3
   15660:	str	r2, [fp, #-84]	; 0xffffffac
   15664:	and	r1, r0, #4
   15668:	str	r1, [sp, #32]
   1566c:	and	r1, r0, #1
   15670:	str	r1, [sp, #36]	; 0x24
   15674:	ubfx	r4, r0, #1, #1
   15678:	bl	114d4 <__ctype_get_mb_cur_max@plt>
   1567c:	str	r0, [sp, #40]	; 0x28
   15680:	ldr	r0, [fp, #24]
   15684:	ldr	r7, [fp, #8]
   15688:	mov	r1, #0
   1568c:	mov	r5, #1
   15690:	str	r1, [fp, #-56]	; 0xffffffc8
   15694:	mov	r1, #0
   15698:	str	r1, [sp, #60]	; 0x3c
   1569c:	str	r0, [sp, #76]	; 0x4c
   156a0:	ldr	r0, [fp, #20]
   156a4:	str	r0, [sp, #72]	; 0x48
   156a8:	mov	r0, #0
   156ac:	str	r0, [sp, #56]	; 0x38
   156b0:	mov	r0, #0
   156b4:	str	r0, [sp, #92]	; 0x5c
   156b8:	mov	r0, #0
   156bc:	str	r0, [fp, #-76]	; 0xffffffb4
   156c0:	mov	r0, #0
   156c4:	cmp	r7, #10
   156c8:	bhi	16648 <__assert_fail@plt+0x4f34>
   156cc:	add	r1, pc, #28
   156d0:	mov	sl, r6
   156d4:	ldr	r6, [sp, #80]	; 0x50
   156d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   156dc:	mov	r8, #0
   156e0:	mov	r2, #1
   156e4:	mov	r3, #0
   156e8:	mov	lr, r9
   156ec:	ldr	pc, [r1, r7, lsl #2]
   156f0:	ldrdeq	r5, [r1], -r4
   156f4:	andeq	r5, r1, r0, lsl #16
   156f8:	andeq	r5, r1, r4, asr #15
   156fc:			; <UNDEFINED> instruction: 0x000157bc
   15700:	strdeq	r5, [r1], -r4
   15704:	andeq	r5, r1, r8, asr #16
   15708:	andeq	r5, r1, r4, ror #15
   1570c:	andeq	r5, r1, r4, lsr #17
   15710:	andeq	r5, r1, ip, lsl r7
   15714:	andeq	r5, r1, ip, lsl r7
   15718:	andeq	r5, r1, r4, asr #14
   1571c:	movw	r0, #43175	; 0xa8a7
   15720:	mov	r1, r7
   15724:	movt	r0, #1
   15728:	bl	17054 <__assert_fail@plt+0x5940>
   1572c:	str	r0, [sp, #72]	; 0x48
   15730:	movw	r0, #43177	; 0xa8a9
   15734:	mov	r1, r7
   15738:	movt	r0, #1
   1573c:	bl	17054 <__assert_fail@plt+0x5940>
   15740:	str	r0, [sp, #76]	; 0x4c
   15744:	str	r5, [fp, #-48]	; 0xffffffd0
   15748:	mov	r8, #0
   1574c:	mov	r5, r7
   15750:	tst	r4, #1
   15754:	bne	1578c <__assert_fail@plt+0x4078>
   15758:	ldr	r0, [sp, #72]	; 0x48
   1575c:	ldrb	r0, [r0]
   15760:	cmp	r0, #0
   15764:	beq	1578c <__assert_fail@plt+0x4078>
   15768:	ldr	r1, [sp, #72]	; 0x48
   1576c:	mov	r8, #0
   15770:	add	r1, r1, #1
   15774:	cmp	r8, sl
   15778:	strbcc	r0, [r6, r8]
   1577c:	ldrb	r0, [r1, r8]
   15780:	add	r8, r8, #1
   15784:	cmp	r0, #0
   15788:	bne	15774 <__assert_fail@plt+0x4060>
   1578c:	ldr	r7, [sp, #76]	; 0x4c
   15790:	mov	r0, r7
   15794:	bl	11588 <strlen@plt>
   15798:	str	r7, [sp, #92]	; 0x5c
   1579c:	mov	r7, r5
   157a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   157a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   157a8:	str	r0, [fp, #-76]	; 0xffffffb4
   157ac:	mov	r2, #1
   157b0:	mov	r3, r4
   157b4:	mov	lr, r9
   157b8:	b	158a4 <__assert_fail@plt+0x4190>
   157bc:	mov	r0, #1
   157c0:	b	15800 <__assert_fail@plt+0x40ec>
   157c4:	tst	r4, #1
   157c8:	bne	15800 <__assert_fail@plt+0x40ec>
   157cc:	mov	r2, r0
   157d0:	b	15828 <__assert_fail@plt+0x4114>
   157d4:	mov	r7, #0
   157d8:	mov	r8, #0
   157dc:	mov	r2, r0
   157e0:	b	158a0 <__assert_fail@plt+0x418c>
   157e4:	mov	r0, #1
   157e8:	mov	r8, #0
   157ec:	mov	r7, #5
   157f0:	b	1585c <__assert_fail@plt+0x4148>
   157f4:	mov	r2, #1
   157f8:	tst	r4, #1
   157fc:	beq	15828 <__assert_fail@plt+0x4114>
   15800:	mov	r1, #1
   15804:	mov	r8, #0
   15808:	mov	r7, #2
   1580c:	mov	r2, r0
   15810:	mov	r3, #1
   15814:	str	r1, [fp, #-76]	; 0xffffffb4
   15818:	movw	r1, #43177	; 0xa8a9
   1581c:	movt	r1, #1
   15820:	str	r1, [sp, #92]	; 0x5c
   15824:	b	158a4 <__assert_fail@plt+0x4190>
   15828:	cmp	sl, #0
   1582c:	mov	r8, #1
   15830:	mov	r7, #2
   15834:	movne	r0, #39	; 0x27
   15838:	strbne	r0, [r6]
   1583c:	movw	r0, #43177	; 0xa8a9
   15840:	movt	r0, #1
   15844:	b	15894 <__assert_fail@plt+0x4180>
   15848:	mov	r7, #5
   1584c:	tst	r4, #1
   15850:	beq	15878 <__assert_fail@plt+0x4164>
   15854:	mov	r0, #1
   15858:	mov	r8, #0
   1585c:	str	r0, [fp, #-76]	; 0xffffffb4
   15860:	movw	r0, #42272	; 0xa520
   15864:	mov	r2, #1
   15868:	mov	r3, #1
   1586c:	movt	r0, #1
   15870:	str	r0, [sp, #92]	; 0x5c
   15874:	b	158a4 <__assert_fail@plt+0x4190>
   15878:	cmp	sl, #0
   1587c:	mov	r8, #1
   15880:	mov	r2, #1
   15884:	movne	r0, #34	; 0x22
   15888:	strbne	r0, [r6]
   1588c:	movw	r0, #42272	; 0xa520
   15890:	movt	r0, #1
   15894:	str	r0, [sp, #92]	; 0x5c
   15898:	mov	r0, #1
   1589c:	str	r0, [fp, #-76]	; 0xffffffb4
   158a0:	mov	r3, #0
   158a4:	ldr	r0, [fp, #16]
   158a8:	str	r3, [fp, #-72]	; 0xffffffb8
   158ac:	str	r7, [fp, #-64]	; 0xffffffc0
   158b0:	str	r2, [sp, #84]	; 0x54
   158b4:	cmp	r0, #0
   158b8:	movwne	r0, #1
   158bc:	and	r0, r0, r3
   158c0:	str	r0, [fp, #-88]	; 0xffffffa8
   158c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   158c8:	cmp	r0, #0
   158cc:	movwne	r0, #1
   158d0:	subs	r4, r7, #2
   158d4:	mov	r7, #0
   158d8:	and	r1, r0, r3
   158dc:	str	r4, [fp, #-80]	; 0xffffffb0
   158e0:	and	r1, r2, r1
   158e4:	str	r1, [sp, #48]	; 0x30
   158e8:	clz	r1, r4
   158ec:	lsr	r1, r1, #5
   158f0:	and	r1, r1, r3
   158f4:	eor	r3, r3, #1
   158f8:	str	r1, [sp, #64]	; 0x40
   158fc:	mov	r1, r4
   15900:	str	r3, [sp, #88]	; 0x58
   15904:	movwne	r1, #1
   15908:	orr	r3, r1, r3
   1590c:	and	r1, r1, r2
   15910:	and	r0, r0, r1
   15914:	str	r3, [sp, #68]	; 0x44
   15918:	str	r1, [fp, #-68]	; 0xffffffbc
   1591c:	str	r0, [fp, #-60]	; 0xffffffc4
   15920:	eor	r0, r2, #1
   15924:	str	r0, [sp, #52]	; 0x34
   15928:	cmn	lr, #1
   1592c:	beq	1593c <__assert_fail@plt+0x4228>
   15930:	cmp	r7, lr
   15934:	bne	15948 <__assert_fail@plt+0x4234>
   15938:	b	16470 <__assert_fail@plt+0x4d5c>
   1593c:	ldrb	r0, [ip, r7]
   15940:	cmp	r0, #0
   15944:	beq	16478 <__assert_fail@plt+0x4d64>
   15948:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1594c:	mov	r9, #0
   15950:	str	r5, [fp, #-48]	; 0xffffffd0
   15954:	cmp	r0, #0
   15958:	beq	1598c <__assert_fail@plt+0x4278>
   1595c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15960:	add	r4, r7, r0
   15964:	cmp	r0, #2
   15968:	bcc	15984 <__assert_fail@plt+0x4270>
   1596c:	cmn	lr, #1
   15970:	bne	15984 <__assert_fail@plt+0x4270>
   15974:	mov	r0, ip
   15978:	bl	11588 <strlen@plt>
   1597c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15980:	mov	lr, r0
   15984:	cmp	r4, lr
   15988:	bls	15994 <__assert_fail@plt+0x4280>
   1598c:	mov	r0, #0
   15990:	b	159d4 <__assert_fail@plt+0x42c0>
   15994:	ldr	r1, [sp, #92]	; 0x5c
   15998:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1599c:	add	r0, ip, r7
   159a0:	mov	r4, lr
   159a4:	bl	11444 <memcmp@plt>
   159a8:	ldr	r2, [sp, #88]	; 0x58
   159ac:	cmp	r0, #0
   159b0:	mov	r1, r0
   159b4:	movwne	r1, #1
   159b8:	orr	r1, r1, r2
   159bc:	tst	r1, #1
   159c0:	beq	16508 <__assert_fail@plt+0x4df4>
   159c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   159c8:	clz	r0, r0
   159cc:	mov	lr, r4
   159d0:	lsr	r0, r0, #5
   159d4:	str	r0, [fp, #-52]	; 0xffffffcc
   159d8:	ldrb	r5, [ip, r7]
   159dc:	cmp	r5, #126	; 0x7e
   159e0:	bhi	15d98 <__assert_fail@plt+0x4684>
   159e4:	add	r3, pc, #16
   159e8:	mov	r4, #1
   159ec:	mov	r2, #110	; 0x6e
   159f0:	mov	r0, #97	; 0x61
   159f4:	mov	r1, #0
   159f8:	ldr	pc, [r3, r5, lsl #2]
   159fc:	muleq	r1, r4, ip
   15a00:	muleq	r1, r8, sp
   15a04:	muleq	r1, r8, sp
   15a08:	muleq	r1, r8, sp
   15a0c:	muleq	r1, r8, sp
   15a10:	muleq	r1, r8, sp
   15a14:	muleq	r1, r8, sp
   15a18:	andeq	r5, r1, ip, asr #28
   15a1c:	andeq	r5, r1, r4, ror ip
   15a20:	andeq	r5, r1, ip, ror #24
   15a24:	andeq	r5, r1, r0, lsl #25
   15a28:	andeq	r5, r1, r0, lsl #26
   15a2c:	andeq	r5, r1, r4, ror #24
   15a30:	andeq	r5, r1, ip, ror ip
   15a34:	muleq	r1, r8, sp
   15a38:	muleq	r1, r8, sp
   15a3c:	muleq	r1, r8, sp
   15a40:	muleq	r1, r8, sp
   15a44:	muleq	r1, r8, sp
   15a48:	muleq	r1, r8, sp
   15a4c:	muleq	r1, r8, sp
   15a50:	muleq	r1, r8, sp
   15a54:	muleq	r1, r8, sp
   15a58:	muleq	r1, r8, sp
   15a5c:	muleq	r1, r8, sp
   15a60:	muleq	r1, r8, sp
   15a64:	muleq	r1, r8, sp
   15a68:	muleq	r1, r8, sp
   15a6c:	muleq	r1, r8, sp
   15a70:	muleq	r1, r8, sp
   15a74:	muleq	r1, r8, sp
   15a78:	muleq	r1, r8, sp
   15a7c:	andeq	r5, r1, r4, lsl #28
   15a80:	andeq	r5, r1, r8, lsl #28
   15a84:	andeq	r5, r1, r8, lsl #28
   15a88:	andeq	r5, r1, ip, lsl #24
   15a8c:	andeq	r5, r1, r8, lsl #28
   15a90:	strdeq	r5, [r1], -r8
   15a94:	andeq	r5, r1, r8, lsl #28
   15a98:	andeq	r5, r1, r8, lsl #26
   15a9c:	andeq	r5, r1, r8, lsl #28
   15aa0:	andeq	r5, r1, r8, lsl #28
   15aa4:	andeq	r5, r1, r8, lsl #28
   15aa8:	strdeq	r5, [r1], -r8
   15aac:	strdeq	r5, [r1], -r8
   15ab0:	strdeq	r5, [r1], -r8
   15ab4:	strdeq	r5, [r1], -r8
   15ab8:	strdeq	r5, [r1], -r8
   15abc:	strdeq	r5, [r1], -r8
   15ac0:	strdeq	r5, [r1], -r8
   15ac4:	strdeq	r5, [r1], -r8
   15ac8:	strdeq	r5, [r1], -r8
   15acc:	strdeq	r5, [r1], -r8
   15ad0:	strdeq	r5, [r1], -r8
   15ad4:	strdeq	r5, [r1], -r8
   15ad8:	strdeq	r5, [r1], -r8
   15adc:	strdeq	r5, [r1], -r8
   15ae0:	strdeq	r5, [r1], -r8
   15ae4:	strdeq	r5, [r1], -r8
   15ae8:	andeq	r5, r1, r8, lsl #28
   15aec:	andeq	r5, r1, r8, lsl #28
   15af0:	andeq	r5, r1, r8, lsl #28
   15af4:	andeq	r5, r1, r8, lsl #28
   15af8:	ldrdeq	r5, [r1], -r4
   15afc:	muleq	r1, r8, sp
   15b00:	strdeq	r5, [r1], -r8
   15b04:	strdeq	r5, [r1], -r8
   15b08:	strdeq	r5, [r1], -r8
   15b0c:	strdeq	r5, [r1], -r8
   15b10:	strdeq	r5, [r1], -r8
   15b14:	strdeq	r5, [r1], -r8
   15b18:	strdeq	r5, [r1], -r8
   15b1c:	strdeq	r5, [r1], -r8
   15b20:	strdeq	r5, [r1], -r8
   15b24:	strdeq	r5, [r1], -r8
   15b28:	strdeq	r5, [r1], -r8
   15b2c:	strdeq	r5, [r1], -r8
   15b30:	strdeq	r5, [r1], -r8
   15b34:	strdeq	r5, [r1], -r8
   15b38:	strdeq	r5, [r1], -r8
   15b3c:	strdeq	r5, [r1], -r8
   15b40:	strdeq	r5, [r1], -r8
   15b44:	strdeq	r5, [r1], -r8
   15b48:	strdeq	r5, [r1], -r8
   15b4c:	strdeq	r5, [r1], -r8
   15b50:	strdeq	r5, [r1], -r8
   15b54:	strdeq	r5, [r1], -r8
   15b58:	strdeq	r5, [r1], -r8
   15b5c:	strdeq	r5, [r1], -r8
   15b60:	strdeq	r5, [r1], -r8
   15b64:	strdeq	r5, [r1], -r8
   15b68:	andeq	r5, r1, r8, lsl #28
   15b6c:	andeq	r5, r1, r0, asr #24
   15b70:	strdeq	r5, [r1], -r8
   15b74:	andeq	r5, r1, r8, lsl #28
   15b78:	strdeq	r5, [r1], -r8
   15b7c:	andeq	r5, r1, r8, lsl #28
   15b80:	strdeq	r5, [r1], -r8
   15b84:	strdeq	r5, [r1], -r8
   15b88:	strdeq	r5, [r1], -r8
   15b8c:	strdeq	r5, [r1], -r8
   15b90:	strdeq	r5, [r1], -r8
   15b94:	strdeq	r5, [r1], -r8
   15b98:	strdeq	r5, [r1], -r8
   15b9c:	strdeq	r5, [r1], -r8
   15ba0:	strdeq	r5, [r1], -r8
   15ba4:	strdeq	r5, [r1], -r8
   15ba8:	strdeq	r5, [r1], -r8
   15bac:	strdeq	r5, [r1], -r8
   15bb0:	strdeq	r5, [r1], -r8
   15bb4:	strdeq	r5, [r1], -r8
   15bb8:	strdeq	r5, [r1], -r8
   15bbc:	strdeq	r5, [r1], -r8
   15bc0:	strdeq	r5, [r1], -r8
   15bc4:	strdeq	r5, [r1], -r8
   15bc8:	strdeq	r5, [r1], -r8
   15bcc:	strdeq	r5, [r1], -r8
   15bd0:	strdeq	r5, [r1], -r8
   15bd4:	strdeq	r5, [r1], -r8
   15bd8:	strdeq	r5, [r1], -r8
   15bdc:	strdeq	r5, [r1], -r8
   15be0:	strdeq	r5, [r1], -r8
   15be4:	strdeq	r5, [r1], -r8
   15be8:	andeq	r5, r1, r0, lsr #24
   15bec:	andeq	r5, r1, r8, lsl #28
   15bf0:	andeq	r5, r1, r0, lsr #24
   15bf4:	andeq	r5, r1, ip, lsl #24
   15bf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15bfc:	cmp	r0, #0
   15c00:	beq	15e60 <__assert_fail@plt+0x474c>
   15c04:	ldr	r0, [fp, #16]
   15c08:	b	15e64 <__assert_fail@plt+0x4750>
   15c0c:	mov	r4, #0
   15c10:	cmp	r7, #0
   15c14:	beq	15e04 <__assert_fail@plt+0x46f0>
   15c18:	mov	r9, #0
   15c1c:	b	15bf8 <__assert_fail@plt+0x44e4>
   15c20:	mov	r4, #0
   15c24:	cmn	lr, #1
   15c28:	beq	15de8 <__assert_fail@plt+0x46d4>
   15c2c:	cmp	r7, #0
   15c30:	bne	15c18 <__assert_fail@plt+0x4504>
   15c34:	cmp	lr, #1
   15c38:	beq	15e04 <__assert_fail@plt+0x46f0>
   15c3c:	b	15c18 <__assert_fail@plt+0x4504>
   15c40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c44:	cmp	r0, #2
   15c48:	bne	15e28 <__assert_fail@plt+0x4714>
   15c4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c50:	tst	r0, #1
   15c54:	bne	16524 <__assert_fail@plt+0x4e10>
   15c58:	mov	r9, #0
   15c5c:	mov	r0, #92	; 0x5c
   15c60:	b	15e3c <__assert_fail@plt+0x4728>
   15c64:	mov	r0, #102	; 0x66
   15c68:	b	15e4c <__assert_fail@plt+0x4738>
   15c6c:	mov	r2, #116	; 0x74
   15c70:	b	15c80 <__assert_fail@plt+0x456c>
   15c74:	mov	r0, #98	; 0x62
   15c78:	b	15e4c <__assert_fail@plt+0x4738>
   15c7c:	mov	r2, #114	; 0x72
   15c80:	ldr	r0, [sp, #68]	; 0x44
   15c84:	tst	r0, #1
   15c88:	mov	r0, r2
   15c8c:	bne	15e4c <__assert_fail@plt+0x4738>
   15c90:	b	16524 <__assert_fail@plt+0x4e10>
   15c94:	ldr	r0, [sp, #84]	; 0x54
   15c98:	tst	r0, #1
   15c9c:	beq	15f3c <__assert_fail@plt+0x4828>
   15ca0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15ca4:	tst	r0, #1
   15ca8:	bne	16634 <__assert_fail@plt+0x4f20>
   15cac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15cb0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15cb4:	cmp	r0, #2
   15cb8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15cbc:	movwne	r0, #1
   15cc0:	orr	r0, r0, r2
   15cc4:	tst	r0, #1
   15cc8:	beq	1630c <__assert_fail@plt+0x4bf8>
   15ccc:	mov	r0, r8
   15cd0:	b	16340 <__assert_fail@plt+0x4c2c>
   15cd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15cd8:	mov	r9, #0
   15cdc:	mov	r5, #63	; 0x3f
   15ce0:	cmp	r0, #5
   15ce4:	beq	160f0 <__assert_fail@plt+0x49dc>
   15ce8:	cmp	r0, #2
   15cec:	bne	16194 <__assert_fail@plt+0x4a80>
   15cf0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15cf4:	tst	r0, #1
   15cf8:	beq	16198 <__assert_fail@plt+0x4a84>
   15cfc:	b	16524 <__assert_fail@plt+0x4e10>
   15d00:	mov	r0, #118	; 0x76
   15d04:	b	15e4c <__assert_fail@plt+0x4738>
   15d08:	mov	r0, #1
   15d0c:	mov	r5, #39	; 0x27
   15d10:	str	r0, [sp, #60]	; 0x3c
   15d14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15d18:	cmp	r0, #2
   15d1c:	bne	15d90 <__assert_fail@plt+0x467c>
   15d20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d24:	tst	r0, #1
   15d28:	bne	16524 <__assert_fail@plt+0x4e10>
   15d2c:	ldr	r2, [sp, #56]	; 0x38
   15d30:	clz	r1, sl
   15d34:	mov	r9, #0
   15d38:	lsr	r1, r1, #5
   15d3c:	cmp	r2, #0
   15d40:	mov	r0, r2
   15d44:	movwne	r0, #1
   15d48:	orrs	r0, r0, r1
   15d4c:	moveq	r2, sl
   15d50:	moveq	sl, r0
   15d54:	cmp	r8, sl
   15d58:	str	r2, [sp, #56]	; 0x38
   15d5c:	movcc	r0, #39	; 0x27
   15d60:	strbcc	r0, [r6, r8]
   15d64:	add	r0, r8, #1
   15d68:	cmp	r0, sl
   15d6c:	movcc	r1, #92	; 0x5c
   15d70:	strbcc	r1, [r6, r0]
   15d74:	add	r0, r8, #2
   15d78:	add	r8, r8, #3
   15d7c:	cmp	r0, sl
   15d80:	movcc	r1, #39	; 0x27
   15d84:	strbcc	r1, [r6, r0]
   15d88:	mov	r0, #0
   15d8c:	str	r0, [fp, #-56]	; 0xffffffc8
   15d90:	mov	r4, #1
   15d94:	b	15bf8 <__assert_fail@plt+0x44e4>
   15d98:	ldr	r0, [sp, #40]	; 0x28
   15d9c:	cmp	r0, #1
   15da0:	bne	15f68 <__assert_fail@plt+0x4854>
   15da4:	str	lr, [sp, #28]
   15da8:	bl	11570 <__ctype_b_loc@plt>
   15dac:	ldr	r0, [r0]
   15db0:	ldr	ip, [fp, #-84]	; 0xffffffac
   15db4:	mov	r1, #1
   15db8:	add	r0, r0, r5, lsl #1
   15dbc:	ldrb	r0, [r0, #1]
   15dc0:	ubfx	r4, r0, #6, #1
   15dc4:	ldr	r0, [sp, #52]	; 0x34
   15dc8:	mov	r2, r1
   15dcc:	cmp	r1, #1
   15dd0:	orr	r0, r4, r0
   15dd4:	bhi	161a0 <__assert_fail@plt+0x4a8c>
   15dd8:	tst	r0, #1
   15ddc:	beq	161a0 <__assert_fail@plt+0x4a8c>
   15de0:	ldr	lr, [sp, #28]
   15de4:	b	15bf8 <__assert_fail@plt+0x44e4>
   15de8:	cmp	r7, #0
   15dec:	ldrbeq	r0, [ip, #1]
   15df0:	cmpeq	r0, #0
   15df4:	beq	15e04 <__assert_fail@plt+0x46f0>
   15df8:	mvn	lr, #0
   15dfc:	mov	r9, #0
   15e00:	b	15bf8 <__assert_fail@plt+0x44e4>
   15e04:	mov	r1, #1
   15e08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15e0c:	cmp	r0, #2
   15e10:	bne	15e20 <__assert_fail@plt+0x470c>
   15e14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15e18:	tst	r0, #1
   15e1c:	bne	16524 <__assert_fail@plt+0x4e10>
   15e20:	mov	r4, r1
   15e24:	b	15bf8 <__assert_fail@plt+0x44e4>
   15e28:	ldr	r1, [sp, #48]	; 0x30
   15e2c:	mov	r9, #0
   15e30:	mov	r0, #92	; 0x5c
   15e34:	cmp	r1, #0
   15e38:	beq	15e4c <__assert_fail@plt+0x4738>
   15e3c:	mov	r4, #0
   15e40:	cmp	r9, #0
   15e44:	beq	163d8 <__assert_fail@plt+0x4cc4>
   15e48:	b	16414 <__assert_fail@plt+0x4d00>
   15e4c:	ldr	r1, [sp, #84]	; 0x54
   15e50:	mov	r4, #0
   15e54:	mov	r9, #0
   15e58:	tst	r1, #1
   15e5c:	bne	15e9c <__assert_fail@plt+0x4788>
   15e60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15e64:	cmp	r0, #0
   15e68:	mov	r0, r5
   15e6c:	beq	15e90 <__assert_fail@plt+0x477c>
   15e70:	ldr	r1, [fp, #16]
   15e74:	ubfx	r0, r5, #5, #3
   15e78:	mov	r2, #1
   15e7c:	ldr	r0, [r1, r0, lsl #2]
   15e80:	and	r1, r5, #31
   15e84:	tst	r0, r2, lsl r1
   15e88:	mov	r0, r5
   15e8c:	bne	15e9c <__assert_fail@plt+0x4788>
   15e90:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15e94:	cmp	r1, #0
   15e98:	beq	163d0 <__assert_fail@plt+0x4cbc>
   15e9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15ea0:	tst	r1, #1
   15ea4:	bne	164fc <__assert_fail@plt+0x4de8>
   15ea8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15eac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15eb0:	cmp	r1, #2
   15eb4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15eb8:	movwne	r1, #1
   15ebc:	orr	r1, r1, r2
   15ec0:	tst	r1, #1
   15ec4:	beq	15ed0 <__assert_fail@plt+0x47bc>
   15ec8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15ecc:	b	15f0c <__assert_fail@plt+0x47f8>
   15ed0:	cmp	r8, sl
   15ed4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15ed8:	movcc	r1, #39	; 0x27
   15edc:	strbcc	r1, [r6, r8]
   15ee0:	add	r1, r8, #1
   15ee4:	cmp	r1, sl
   15ee8:	movcc	r2, #36	; 0x24
   15eec:	strbcc	r2, [r6, r1]
   15ef0:	add	r1, r8, #2
   15ef4:	add	r8, r8, #3
   15ef8:	cmp	r1, sl
   15efc:	movcc	r2, #39	; 0x27
   15f00:	strbcc	r2, [r6, r1]
   15f04:	mov	r1, #1
   15f08:	str	r1, [fp, #-56]	; 0xffffffc8
   15f0c:	cmp	r8, sl
   15f10:	movcc	r1, #92	; 0x5c
   15f14:	strbcc	r1, [r6, r8]
   15f18:	add	r8, r8, #1
   15f1c:	cmp	r8, sl
   15f20:	and	r5, r5, r4
   15f24:	add	r7, r7, #1
   15f28:	strbcc	r0, [r6, r8]
   15f2c:	add	r8, r8, #1
   15f30:	cmn	lr, #1
   15f34:	bne	15930 <__assert_fail@plt+0x421c>
   15f38:	b	1593c <__assert_fail@plt+0x4228>
   15f3c:	ldr	r0, [sp, #36]	; 0x24
   15f40:	mov	r4, #0
   15f44:	mov	r9, #0
   15f48:	mov	r5, #0
   15f4c:	cmp	r0, #0
   15f50:	beq	15e60 <__assert_fail@plt+0x474c>
   15f54:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15f58:	add	r7, r7, #1
   15f5c:	cmn	lr, #1
   15f60:	bne	15930 <__assert_fail@plt+0x421c>
   15f64:	b	1593c <__assert_fail@plt+0x4228>
   15f68:	mov	r0, #0
   15f6c:	cmn	lr, #1
   15f70:	str	r0, [fp, #-36]	; 0xffffffdc
   15f74:	str	r0, [fp, #-40]	; 0xffffffd8
   15f78:	bne	15f8c <__assert_fail@plt+0x4878>
   15f7c:	mov	r0, ip
   15f80:	bl	11588 <strlen@plt>
   15f84:	ldr	ip, [fp, #-84]	; 0xffffffac
   15f88:	mov	lr, r0
   15f8c:	add	r0, ip, r7
   15f90:	mov	r4, #1
   15f94:	mov	r6, #0
   15f98:	str	lr, [sp, #28]
   15f9c:	str	r0, [sp, #24]
   15fa0:	sub	r0, fp, #40	; 0x28
   15fa4:	mov	r3, r0
   15fa8:	str	r6, [sp, #44]	; 0x2c
   15fac:	add	r6, r6, r7
   15fb0:	sub	r0, fp, #44	; 0x2c
   15fb4:	add	r1, ip, r6
   15fb8:	sub	r2, lr, r6
   15fbc:	bl	19078 <__assert_fail@plt+0x7964>
   15fc0:	cmp	r0, #0
   15fc4:	beq	1645c <__assert_fail@plt+0x4d48>
   15fc8:	cmn	r0, #1
   15fcc:	beq	1641c <__assert_fail@plt+0x4d08>
   15fd0:	ldr	lr, [sp, #28]
   15fd4:	cmn	r0, #2
   15fd8:	beq	16424 <__assert_fail@plt+0x4d10>
   15fdc:	ldr	r2, [sp, #64]	; 0x40
   15fe0:	cmp	r0, #2
   15fe4:	mov	r1, #0
   15fe8:	movwcc	r1, #1
   15fec:	eor	r2, r2, #1
   15ff0:	orrs	r1, r2, r1
   15ff4:	bne	160b4 <__assert_fail@plt+0x49a0>
   15ff8:	ldr	r1, [sp, #44]	; 0x2c
   15ffc:	ldr	r2, [sp, #24]
   16000:	add	r1, r2, r1
   16004:	mov	r2, #1
   16008:	ldrb	r3, [r1, r2]
   1600c:	sub	r3, r3, #91	; 0x5b
   16010:	cmp	r3, #33	; 0x21
   16014:	bhi	160a8 <__assert_fail@plt+0x4994>
   16018:	add	r6, pc, #0
   1601c:	ldr	pc, [r6, r3, lsl #2]
   16020:	andeq	r6, r1, ip, lsl r5
   16024:	andeq	r6, r1, ip, lsl r5
   16028:	andeq	r6, r1, r8, lsr #1
   1602c:	andeq	r6, r1, ip, lsl r5
   16030:	andeq	r6, r1, r8, lsr #1
   16034:	andeq	r6, r1, ip, lsl r5
   16038:	andeq	r6, r1, r8, lsr #1
   1603c:	andeq	r6, r1, r8, lsr #1
   16040:	andeq	r6, r1, r8, lsr #1
   16044:	andeq	r6, r1, r8, lsr #1
   16048:	andeq	r6, r1, r8, lsr #1
   1604c:	andeq	r6, r1, r8, lsr #1
   16050:	andeq	r6, r1, r8, lsr #1
   16054:	andeq	r6, r1, r8, lsr #1
   16058:	andeq	r6, r1, r8, lsr #1
   1605c:	andeq	r6, r1, r8, lsr #1
   16060:	andeq	r6, r1, r8, lsr #1
   16064:	andeq	r6, r1, r8, lsr #1
   16068:	andeq	r6, r1, r8, lsr #1
   1606c:	andeq	r6, r1, r8, lsr #1
   16070:	andeq	r6, r1, r8, lsr #1
   16074:	andeq	r6, r1, r8, lsr #1
   16078:	andeq	r6, r1, r8, lsr #1
   1607c:	andeq	r6, r1, r8, lsr #1
   16080:	andeq	r6, r1, r8, lsr #1
   16084:	andeq	r6, r1, r8, lsr #1
   16088:	andeq	r6, r1, r8, lsr #1
   1608c:	andeq	r6, r1, r8, lsr #1
   16090:	andeq	r6, r1, r8, lsr #1
   16094:	andeq	r6, r1, r8, lsr #1
   16098:	andeq	r6, r1, r8, lsr #1
   1609c:	andeq	r6, r1, r8, lsr #1
   160a0:	andeq	r6, r1, r8, lsr #1
   160a4:	andeq	r6, r1, ip, lsl r5
   160a8:	add	r2, r2, #1
   160ac:	cmp	r2, r0
   160b0:	bcc	16008 <__assert_fail@plt+0x48f4>
   160b4:	ldr	r6, [sp, #44]	; 0x2c
   160b8:	add	r6, r0, r6
   160bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   160c0:	bl	1148c <iswprint@plt>
   160c4:	cmp	r0, #0
   160c8:	movwne	r0, #1
   160cc:	and	r4, r4, r0
   160d0:	sub	r0, fp, #40	; 0x28
   160d4:	bl	11420 <mbsinit@plt>
   160d8:	ldr	lr, [sp, #28]
   160dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   160e0:	sub	r3, fp, #40	; 0x28
   160e4:	cmp	r0, #0
   160e8:	beq	15fa8 <__assert_fail@plt+0x4894>
   160ec:	b	16464 <__assert_fail@plt+0x4d50>
   160f0:	ldr	r0, [sp, #32]
   160f4:	cmp	r0, #0
   160f8:	beq	16194 <__assert_fail@plt+0x4a80>
   160fc:	add	r0, r7, #2
   16100:	cmp	r0, lr
   16104:	bcs	16194 <__assert_fail@plt+0x4a80>
   16108:	add	r1, ip, r7
   1610c:	ldrb	r1, [r1, #1]
   16110:	cmp	r1, #63	; 0x3f
   16114:	bne	16194 <__assert_fail@plt+0x4a80>
   16118:	ldrb	r5, [ip, r0]
   1611c:	sub	r1, r5, #33	; 0x21
   16120:	cmp	r1, #29
   16124:	bhi	16194 <__assert_fail@plt+0x4a80>
   16128:	movw	r3, #20929	; 0x51c1
   1612c:	mov	r2, #1
   16130:	movt	r3, #14336	; 0x3800
   16134:	tst	r3, r2, lsl r1
   16138:	beq	16194 <__assert_fail@plt+0x4a80>
   1613c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16140:	tst	r1, #1
   16144:	bne	1663c <__assert_fail@plt+0x4f28>
   16148:	cmp	r8, sl
   1614c:	mov	r7, r0
   16150:	mov	r4, #0
   16154:	movcc	r1, #63	; 0x3f
   16158:	strbcc	r1, [r6, r8]
   1615c:	add	r1, r8, #1
   16160:	cmp	r1, sl
   16164:	movcc	r2, #34	; 0x22
   16168:	strbcc	r2, [r6, r1]
   1616c:	add	r1, r8, #2
   16170:	cmp	r1, sl
   16174:	movcc	r2, #34	; 0x22
   16178:	strbcc	r2, [r6, r1]
   1617c:	add	r1, r8, #3
   16180:	add	r8, r8, #4
   16184:	cmp	r1, sl
   16188:	movcc	r2, #63	; 0x3f
   1618c:	strbcc	r2, [r6, r1]
   16190:	b	15bf8 <__assert_fail@plt+0x44e4>
   16194:	mov	r5, #63	; 0x3f
   16198:	mov	r4, #0
   1619c:	b	15bf8 <__assert_fail@plt+0x44e4>
   161a0:	add	r1, r2, r7
   161a4:	ldr	lr, [sp, #28]
   161a8:	mov	r3, #0
   161ac:	str	r1, [sp, #44]	; 0x2c
   161b0:	add	r1, r7, #1
   161b4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   161b8:	tst	r0, #1
   161bc:	bne	16290 <__assert_fail@plt+0x4b7c>
   161c0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   161c4:	tst	r2, #1
   161c8:	bne	16584 <__assert_fail@plt+0x4e70>
   161cc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   161d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   161d4:	cmp	r7, #2
   161d8:	movwne	r3, #1
   161dc:	orr	r3, r3, r2
   161e0:	tst	r3, #1
   161e4:	bne	16220 <__assert_fail@plt+0x4b0c>
   161e8:	cmp	r8, sl
   161ec:	add	r3, r8, #1
   161f0:	movcc	r2, #39	; 0x27
   161f4:	strbcc	r2, [r6, r8]
   161f8:	cmp	r3, sl
   161fc:	movcc	r2, #36	; 0x24
   16200:	strbcc	r2, [r6, r3]
   16204:	add	r3, r8, #2
   16208:	add	r8, r8, #3
   1620c:	cmp	r3, sl
   16210:	movcc	r2, #39	; 0x27
   16214:	strbcc	r2, [r6, r3]
   16218:	mov	r2, #1
   1621c:	str	r2, [fp, #-56]	; 0xffffffc8
   16220:	cmp	r8, sl
   16224:	movcc	r3, #92	; 0x5c
   16228:	strbcc	r3, [r6, r8]
   1622c:	add	r3, r8, #1
   16230:	cmp	r3, sl
   16234:	andcc	r7, r5, #192	; 0xc0
   16238:	movcc	r2, #48	; 0x30
   1623c:	orrcc	r7, r2, r7, lsr #6
   16240:	strbcc	r7, [r6, r3]
   16244:	add	r3, r8, #2
   16248:	add	r8, r8, #3
   1624c:	cmp	r3, sl
   16250:	lsrcc	r7, r5, #3
   16254:	movcc	r2, #6
   16258:	bficc	r7, r2, #3, #29
   1625c:	mov	r2, #6
   16260:	strbcc	r7, [r6, r3]
   16264:	bfi	r5, r2, #3, #29
   16268:	mov	r3, #1
   1626c:	b	162b4 <__assert_fail@plt+0x4ba0>
   16270:	cmp	r8, sl
   16274:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16278:	strbcc	r5, [r6, r8]
   1627c:	add	r8, r8, #1
   16280:	ldrb	r5, [ip, r1]
   16284:	add	r1, r1, #1
   16288:	tst	r0, #1
   1628c:	beq	161c0 <__assert_fail@plt+0x4aac>
   16290:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16294:	tst	r2, #1
   16298:	beq	162ac <__assert_fail@plt+0x4b98>
   1629c:	cmp	r8, sl
   162a0:	movcc	r7, #92	; 0x5c
   162a4:	strbcc	r7, [r6, r8]
   162a8:	add	r8, r8, #1
   162ac:	mov	r2, #0
   162b0:	str	r2, [fp, #-52]	; 0xffffffcc
   162b4:	ldr	r2, [sp, #44]	; 0x2c
   162b8:	and	r9, r3, #1
   162bc:	cmp	r2, r1
   162c0:	bls	163c0 <__assert_fail@plt+0x4cac>
   162c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   162c8:	cmp	r9, #0
   162cc:	movwne	r9, #1
   162d0:	mvn	r7, r2
   162d4:	orr	r7, r7, r9
   162d8:	tst	r7, #1
   162dc:	bne	16270 <__assert_fail@plt+0x4b5c>
   162e0:	cmp	r8, sl
   162e4:	movcc	r7, #39	; 0x27
   162e8:	strbcc	r7, [r6, r8]
   162ec:	add	r7, r8, #1
   162f0:	add	r8, r8, #2
   162f4:	cmp	r7, sl
   162f8:	movcc	r2, #39	; 0x27
   162fc:	strbcc	r2, [r6, r7]
   16300:	mov	r2, #0
   16304:	str	r2, [fp, #-56]	; 0xffffffc8
   16308:	b	16270 <__assert_fail@plt+0x4b5c>
   1630c:	cmp	r8, sl
   16310:	mov	r2, #1
   16314:	movcc	r0, #39	; 0x27
   16318:	strbcc	r0, [r6, r8]
   1631c:	add	r0, r8, #1
   16320:	cmp	r0, sl
   16324:	movcc	r1, #36	; 0x24
   16328:	strbcc	r1, [r6, r0]
   1632c:	add	r0, r8, #2
   16330:	cmp	r0, sl
   16334:	movcc	r1, #39	; 0x27
   16338:	strbcc	r1, [r6, r0]
   1633c:	add	r0, r8, #3
   16340:	cmp	r0, sl
   16344:	add	r8, r0, #1
   16348:	str	r2, [fp, #-56]	; 0xffffffc8
   1634c:	movcc	r1, #92	; 0x5c
   16350:	strbcc	r1, [r6, r0]
   16354:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16358:	cmp	r1, #2
   1635c:	beq	163b0 <__assert_fail@plt+0x4c9c>
   16360:	add	r1, r7, #1
   16364:	mov	r4, #0
   16368:	mov	r9, #1
   1636c:	mov	r5, #48	; 0x30
   16370:	cmp	r1, lr
   16374:	bcs	15bf8 <__assert_fail@plt+0x44e4>
   16378:	ldrb	r1, [ip, r1]
   1637c:	sub	r1, r1, #48	; 0x30
   16380:	uxtb	r1, r1
   16384:	cmp	r1, #9
   16388:	bhi	15bf8 <__assert_fail@plt+0x44e4>
   1638c:	cmp	r8, sl
   16390:	movcc	r1, #48	; 0x30
   16394:	strbcc	r1, [r6, r8]
   16398:	add	r1, r0, #2
   1639c:	add	r8, r0, #3
   163a0:	cmp	r1, sl
   163a4:	movcc	r2, #48	; 0x30
   163a8:	strbcc	r2, [r6, r1]
   163ac:	b	15bf8 <__assert_fail@plt+0x44e4>
   163b0:	mov	r0, #48	; 0x30
   163b4:	mov	r9, #1
   163b8:	mov	r4, #0
   163bc:	b	15e90 <__assert_fail@plt+0x477c>
   163c0:	cmp	r9, #0
   163c4:	sub	r7, r1, #1
   163c8:	mov	r0, r5
   163cc:	movwne	r9, #1
   163d0:	cmp	r9, #0
   163d4:	bne	16414 <__assert_fail@plt+0x4d00>
   163d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   163dc:	tst	r1, #1
   163e0:	beq	16414 <__assert_fail@plt+0x4d00>
   163e4:	cmp	r8, sl
   163e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   163ec:	movcc	r1, #39	; 0x27
   163f0:	strbcc	r1, [r6, r8]
   163f4:	add	r1, r8, #1
   163f8:	add	r8, r8, #2
   163fc:	cmp	r1, sl
   16400:	movcc	r2, #39	; 0x27
   16404:	strbcc	r2, [r6, r1]
   16408:	mov	r1, #0
   1640c:	str	r1, [fp, #-56]	; 0xffffffc8
   16410:	b	15f1c <__assert_fail@plt+0x4808>
   16414:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16418:	b	15f1c <__assert_fail@plt+0x4808>
   1641c:	mov	r4, #0
   16420:	b	1645c <__assert_fail@plt+0x4d48>
   16424:	mov	r4, #0
   16428:	cmp	lr, r6
   1642c:	bls	1645c <__assert_fail@plt+0x4d48>
   16430:	ldr	ip, [fp, #-84]	; 0xffffffac
   16434:	ldr	r6, [sp, #44]	; 0x2c
   16438:	ldr	r0, [sp, #24]
   1643c:	ldrb	r0, [r0, r6]
   16440:	cmp	r0, #0
   16444:	beq	16464 <__assert_fail@plt+0x4d50>
   16448:	add	r6, r6, #1
   1644c:	add	r0, r7, r6
   16450:	cmp	r0, lr
   16454:	bcc	16438 <__assert_fail@plt+0x4d24>
   16458:	b	16464 <__assert_fail@plt+0x4d50>
   1645c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16460:	ldr	r6, [sp, #44]	; 0x2c
   16464:	mov	r1, r6
   16468:	ldr	r6, [sp, #80]	; 0x50
   1646c:	b	15dc4 <__assert_fail@plt+0x46b0>
   16470:	mov	lr, r7
   16474:	b	1647c <__assert_fail@plt+0x4d68>
   16478:	mvn	lr, #0
   1647c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16480:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16484:	eor	r0, r7, #2
   16488:	orr	r0, r0, r8
   1648c:	clz	r0, r0
   16490:	lsr	r0, r0, #5
   16494:	tst	r1, r0
   16498:	bne	16524 <__assert_fail@plt+0x4e10>
   1649c:	mov	r0, r1
   164a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   164a4:	cmp	r7, #2
   164a8:	movwne	r1, #1
   164ac:	orr	r0, r0, r1
   164b0:	tst	r0, #1
   164b4:	ldreq	r0, [sp, #60]	; 0x3c
   164b8:	eoreq	r0, r0, #1
   164bc:	tsteq	r0, #1
   164c0:	bne	165d0 <__assert_fail@plt+0x4ebc>
   164c4:	mov	r9, lr
   164c8:	tst	r5, #1
   164cc:	bne	1658c <__assert_fail@plt+0x4e78>
   164d0:	ldr	r6, [sp, #56]	; 0x38
   164d4:	mov	r4, #0
   164d8:	cmp	r6, #0
   164dc:	beq	165c8 <__assert_fail@plt+0x4eb4>
   164e0:	ldr	r0, [sp, #84]	; 0x54
   164e4:	mov	r1, #0
   164e8:	cmp	sl, #0
   164ec:	mov	r5, #0
   164f0:	str	r1, [fp, #-72]	; 0xffffffb8
   164f4:	beq	156c4 <__assert_fail@plt+0x3fb0>
   164f8:	b	165d0 <__assert_fail@plt+0x4ebc>
   164fc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16500:	ldr	r2, [sp, #84]	; 0x54
   16504:	b	1652c <__assert_fail@plt+0x4e18>
   16508:	ldr	ip, [fp, #-84]	; 0xffffffac
   1650c:	mov	r2, #1
   16510:	mov	lr, r4
   16514:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16518:	b	1652c <__assert_fail@plt+0x4e18>
   1651c:	ldr	r6, [sp, #80]	; 0x50
   16520:	ldr	ip, [fp, #-84]	; 0xffffffac
   16524:	ldr	r2, [sp, #84]	; 0x54
   16528:	mov	r7, #2
   1652c:	mov	r0, #0
   16530:	ldr	r1, [fp, #12]
   16534:	tst	r2, #1
   16538:	mov	r2, r7
   1653c:	mov	r3, lr
   16540:	str	r0, [sp, #8]
   16544:	ldr	r0, [sp, #72]	; 0x48
   16548:	movwne	r2, #4
   1654c:	cmp	r7, #2
   16550:	movne	r2, r7
   16554:	str	r2, [sp]
   16558:	mov	r2, ip
   1655c:	bic	r1, r1, #2
   16560:	str	r0, [sp, #12]
   16564:	ldr	r0, [sp, #76]	; 0x4c
   16568:	str	r1, [sp, #4]
   1656c:	mov	r1, sl
   16570:	str	r0, [sp, #16]
   16574:	mov	r0, r6
   16578:	bl	15644 <__assert_fail@plt+0x3f30>
   1657c:	mov	r8, r0
   16580:	b	16628 <__assert_fail@plt+0x4f14>
   16584:	ldr	r2, [sp, #84]	; 0x54
   16588:	b	1652c <__assert_fail@plt+0x4e18>
   1658c:	mov	r0, #5
   16590:	ldr	r1, [sp, #56]	; 0x38
   16594:	ldr	r2, [fp, #-84]	; 0xffffffac
   16598:	mov	r3, r9
   1659c:	str	r0, [sp]
   165a0:	ldr	r0, [fp, #12]
   165a4:	str	r0, [sp, #4]
   165a8:	ldr	r0, [fp, #16]
   165ac:	str	r0, [sp, #8]
   165b0:	ldr	r0, [sp, #72]	; 0x48
   165b4:	str	r0, [sp, #12]
   165b8:	ldr	r0, [sp, #76]	; 0x4c
   165bc:	str	r0, [sp, #16]
   165c0:	ldr	r0, [sp, #80]	; 0x50
   165c4:	b	16578 <__assert_fail@plt+0x4e64>
   165c8:	mov	r0, #0
   165cc:	str	r0, [fp, #-72]	; 0xffffffb8
   165d0:	ldr	r1, [sp, #92]	; 0x5c
   165d4:	cmp	r1, #0
   165d8:	beq	16618 <__assert_fail@plt+0x4f04>
   165dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165e0:	ldr	r2, [sp, #80]	; 0x50
   165e4:	tst	r0, #1
   165e8:	bne	1661c <__assert_fail@plt+0x4f08>
   165ec:	ldrb	r0, [r1]
   165f0:	cmp	r0, #0
   165f4:	beq	1661c <__assert_fail@plt+0x4f08>
   165f8:	add	r1, r1, #1
   165fc:	cmp	r8, sl
   16600:	strbcc	r0, [r2, r8]
   16604:	add	r8, r8, #1
   16608:	ldrb	r0, [r1], #1
   1660c:	cmp	r0, #0
   16610:	bne	165fc <__assert_fail@plt+0x4ee8>
   16614:	b	1661c <__assert_fail@plt+0x4f08>
   16618:	ldr	r2, [sp, #80]	; 0x50
   1661c:	cmp	r8, sl
   16620:	movcc	r0, #0
   16624:	strbcc	r0, [r2, r8]
   16628:	mov	r0, r8
   1662c:	sub	sp, fp, #28
   16630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16634:	mov	r2, #1
   16638:	b	16514 <__assert_fail@plt+0x4e00>
   1663c:	ldr	r2, [sp, #84]	; 0x54
   16640:	mov	r7, #5
   16644:	b	1652c <__assert_fail@plt+0x4e18>
   16648:	bl	116f0 <abort@plt>
   1664c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16650:	add	fp, sp, #28
   16654:	sub	sp, sp, #28
   16658:	movw	r5, #46392	; 0xb538
   1665c:	cmp	r2, #0
   16660:	mov	r4, r1
   16664:	mov	r7, r0
   16668:	str	r0, [sp, #20]
   1666c:	movt	r5, #2
   16670:	movne	r5, r2
   16674:	bl	115d0 <__errno_location@plt>
   16678:	mov	sl, r0
   1667c:	ldm	r5, {r0, r1}
   16680:	ldr	r2, [r5, #40]	; 0x28
   16684:	ldr	r3, [r5, #44]	; 0x2c
   16688:	add	r9, r5, #8
   1668c:	ldr	r6, [sl]
   16690:	orr	r8, r1, #1
   16694:	mov	r1, #0
   16698:	str	r6, [sp, #24]
   1669c:	stm	sp, {r0, r8, r9}
   166a0:	str	r2, [sp, #12]
   166a4:	str	r3, [sp, #16]
   166a8:	mov	r0, #0
   166ac:	mov	r2, r7
   166b0:	mov	r3, r4
   166b4:	mov	r6, r4
   166b8:	bl	15644 <__assert_fail@plt+0x3f30>
   166bc:	add	r7, r0, #1
   166c0:	mov	r0, r7
   166c4:	bl	17bd4 <__assert_fail@plt+0x64c0>
   166c8:	mov	r4, r0
   166cc:	ldr	r0, [r5]
   166d0:	ldr	r2, [r5, #44]	; 0x2c
   166d4:	ldr	r1, [r5, #40]	; 0x28
   166d8:	mov	r3, r6
   166dc:	stm	sp, {r0, r8, r9}
   166e0:	str	r2, [sp, #16]
   166e4:	str	r1, [sp, #12]
   166e8:	mov	r0, r4
   166ec:	mov	r1, r7
   166f0:	ldr	r2, [sp, #20]
   166f4:	bl	15644 <__assert_fail@plt+0x3f30>
   166f8:	ldr	r0, [sp, #24]
   166fc:	str	r0, [sl]
   16700:	mov	r0, r4
   16704:	sub	sp, fp, #28
   16708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1670c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16710:	add	fp, sp, #28
   16714:	sub	sp, sp, #36	; 0x24
   16718:	movw	r8, #46392	; 0xb538
   1671c:	cmp	r3, #0
   16720:	mov	r4, r2
   16724:	str	r2, [sp, #24]
   16728:	mov	r5, r1
   1672c:	mov	r6, r0
   16730:	str	r0, [sp, #20]
   16734:	movt	r8, #2
   16738:	movne	r8, r3
   1673c:	bl	115d0 <__errno_location@plt>
   16740:	str	r0, [sp, #28]
   16744:	cmp	r4, #0
   16748:	add	sl, r8, #8
   1674c:	ldm	r8, {r3, r9}
   16750:	ldr	r7, [r0]
   16754:	ldr	r1, [r8, #40]	; 0x28
   16758:	ldr	r2, [r8, #44]	; 0x2c
   1675c:	mov	r0, #0
   16760:	orreq	r9, r9, #1
   16764:	str	r7, [sp, #32]
   16768:	mov	r7, r5
   1676c:	stm	sp, {r3, r9, sl}
   16770:	str	r1, [sp, #12]
   16774:	str	r2, [sp, #16]
   16778:	mov	r1, #0
   1677c:	mov	r2, r6
   16780:	mov	r3, r5
   16784:	bl	15644 <__assert_fail@plt+0x3f30>
   16788:	add	r4, r0, #1
   1678c:	mov	r5, r0
   16790:	mov	r0, r4
   16794:	bl	17bd4 <__assert_fail@plt+0x64c0>
   16798:	mov	r6, r0
   1679c:	ldr	r0, [r8]
   167a0:	ldr	r2, [r8, #44]	; 0x2c
   167a4:	ldr	r1, [r8, #40]	; 0x28
   167a8:	mov	r3, r7
   167ac:	stm	sp, {r0, r9, sl}
   167b0:	str	r2, [sp, #16]
   167b4:	str	r1, [sp, #12]
   167b8:	mov	r0, r6
   167bc:	mov	r1, r4
   167c0:	ldr	r2, [sp, #20]
   167c4:	bl	15644 <__assert_fail@plt+0x3f30>
   167c8:	ldr	r0, [sp, #24]
   167cc:	ldr	r1, [sp, #32]
   167d0:	ldr	r2, [sp, #28]
   167d4:	cmp	r0, #0
   167d8:	str	r1, [r2]
   167dc:	strne	r5, [r0]
   167e0:	mov	r0, r6
   167e4:	sub	sp, fp, #28
   167e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167f0:	add	fp, sp, #24
   167f4:	movw	r5, #45420	; 0xb16c
   167f8:	movw	r8, #45416	; 0xb168
   167fc:	movt	r5, #2
   16800:	movt	r8, #2
   16804:	ldr	r0, [r5]
   16808:	ldr	r4, [r8]
   1680c:	cmp	r0, #2
   16810:	blt	1683c <__assert_fail@plt+0x5128>
   16814:	add	r7, r4, #12
   16818:	mov	r6, #0
   1681c:	ldr	r0, [r7, r6, lsl #3]
   16820:	bl	1526c <__assert_fail@plt+0x3b58>
   16824:	ldr	r1, [r5]
   16828:	add	r2, r6, #2
   1682c:	add	r0, r6, #1
   16830:	mov	r6, r0
   16834:	cmp	r2, r1
   16838:	blt	1681c <__assert_fail@plt+0x5108>
   1683c:	ldr	r0, [r4, #4]
   16840:	movw	r7, #46440	; 0xb568
   16844:	movt	r7, #2
   16848:	cmp	r0, r7
   1684c:	beq	16864 <__assert_fail@plt+0x5150>
   16850:	bl	1526c <__assert_fail@plt+0x3b58>
   16854:	movw	r0, #45424	; 0xb170
   16858:	mov	r6, #256	; 0x100
   1685c:	movt	r0, #2
   16860:	strd	r6, [r0]
   16864:	movw	r6, #45424	; 0xb170
   16868:	movt	r6, #2
   1686c:	cmp	r4, r6
   16870:	beq	16880 <__assert_fail@plt+0x516c>
   16874:	mov	r0, r4
   16878:	bl	1526c <__assert_fail@plt+0x3b58>
   1687c:	str	r6, [r8]
   16880:	mov	r0, #1
   16884:	str	r0, [r5]
   16888:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1688c:	movw	r3, #46392	; 0xb538
   16890:	mvn	r2, #0
   16894:	movt	r3, #2
   16898:	b	1689c <__assert_fail@plt+0x5188>
   1689c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a0:	add	fp, sp, #28
   168a4:	sub	sp, sp, #44	; 0x2c
   168a8:	mov	r7, r3
   168ac:	str	r2, [sp, #36]	; 0x24
   168b0:	str	r1, [sp, #32]
   168b4:	mov	r5, r0
   168b8:	bl	115d0 <__errno_location@plt>
   168bc:	cmp	r5, #0
   168c0:	blt	16a2c <__assert_fail@plt+0x5318>
   168c4:	cmn	r5, #-2147483647	; 0x80000001
   168c8:	beq	16a2c <__assert_fail@plt+0x5318>
   168cc:	movw	r8, #45420	; 0xb16c
   168d0:	movw	r4, #45416	; 0xb168
   168d4:	str	r0, [sp, #28]
   168d8:	ldr	r0, [r0]
   168dc:	movt	r8, #2
   168e0:	movt	r4, #2
   168e4:	ldr	r1, [r8]
   168e8:	ldr	r6, [r4]
   168ec:	str	r0, [sp, #24]
   168f0:	cmp	r1, r5
   168f4:	ble	16900 <__assert_fail@plt+0x51ec>
   168f8:	mov	sl, r6
   168fc:	b	16968 <__assert_fail@plt+0x5254>
   16900:	movw	r9, #45424	; 0xb170
   16904:	mov	r0, #8
   16908:	add	r2, r5, #1
   1690c:	str	r1, [fp, #-32]	; 0xffffffe0
   16910:	mvn	r3, #-2147483648	; 0x80000000
   16914:	movt	r9, #2
   16918:	str	r0, [sp]
   1691c:	sub	r2, r2, r1
   16920:	sub	r1, fp, #32
   16924:	subs	r0, r6, r9
   16928:	movne	r0, r6
   1692c:	bl	17dd4 <__assert_fail@plt+0x66c0>
   16930:	cmp	r6, r9
   16934:	mov	sl, r0
   16938:	str	r0, [r4]
   1693c:	ldrdeq	r0, [r9]
   16940:	stmeq	sl, {r0, r1}
   16944:	ldr	r1, [r8]
   16948:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1694c:	add	r0, sl, r1, lsl #3
   16950:	sub	r1, r2, r1
   16954:	lsl	r2, r1, #3
   16958:	mov	r1, #0
   1695c:	bl	115f4 <memset@plt>
   16960:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16964:	str	r0, [r8]
   16968:	mov	r9, sl
   1696c:	ldr	r6, [r9, r5, lsl #3]!
   16970:	ldr	r4, [r9, #4]!
   16974:	ldm	r7, {r0, r1}
   16978:	ldr	r2, [r7, #40]	; 0x28
   1697c:	ldr	r3, [r7, #44]	; 0x2c
   16980:	orr	r8, r1, #1
   16984:	add	r1, r7, #8
   16988:	stm	sp, {r0, r8}
   1698c:	add	r0, sp, #8
   16990:	str	r1, [sp, #20]
   16994:	stm	r0, {r1, r2, r3}
   16998:	mov	r0, r4
   1699c:	mov	r1, r6
   169a0:	ldr	r2, [sp, #32]
   169a4:	ldr	r3, [sp, #36]	; 0x24
   169a8:	bl	15644 <__assert_fail@plt+0x3f30>
   169ac:	cmp	r6, r0
   169b0:	bhi	16a14 <__assert_fail@plt+0x5300>
   169b4:	add	r6, r0, #1
   169b8:	movw	r0, #46440	; 0xb568
   169bc:	movt	r0, #2
   169c0:	str	r6, [sl, r5, lsl #3]
   169c4:	cmp	r4, r0
   169c8:	beq	169d4 <__assert_fail@plt+0x52c0>
   169cc:	mov	r0, r4
   169d0:	bl	1526c <__assert_fail@plt+0x3b58>
   169d4:	mov	r0, r6
   169d8:	bl	17bd4 <__assert_fail@plt+0x64c0>
   169dc:	str	r0, [r9]
   169e0:	mov	r4, r0
   169e4:	add	r3, sp, #8
   169e8:	ldr	r0, [r7]
   169ec:	ldr	r1, [r7, #40]	; 0x28
   169f0:	ldr	r2, [r7, #44]	; 0x2c
   169f4:	stm	sp, {r0, r8}
   169f8:	ldr	r0, [sp, #20]
   169fc:	stm	r3, {r0, r1, r2}
   16a00:	mov	r0, r4
   16a04:	mov	r1, r6
   16a08:	ldr	r2, [sp, #32]
   16a0c:	ldr	r3, [sp, #36]	; 0x24
   16a10:	bl	15644 <__assert_fail@plt+0x3f30>
   16a14:	ldr	r0, [sp, #28]
   16a18:	ldr	r1, [sp, #24]
   16a1c:	str	r1, [r0]
   16a20:	mov	r0, r4
   16a24:	sub	sp, fp, #28
   16a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a2c:	bl	116f0 <abort@plt>
   16a30:	movw	r3, #46392	; 0xb538
   16a34:	movt	r3, #2
   16a38:	b	1689c <__assert_fail@plt+0x5188>
   16a3c:	movw	r3, #46392	; 0xb538
   16a40:	mov	r1, r0
   16a44:	mov	r0, #0
   16a48:	mvn	r2, #0
   16a4c:	movt	r3, #2
   16a50:	b	1689c <__assert_fail@plt+0x5188>
   16a54:	movw	r3, #46392	; 0xb538
   16a58:	mov	r2, r1
   16a5c:	mov	r1, r0
   16a60:	mov	r0, #0
   16a64:	movt	r3, #2
   16a68:	b	1689c <__assert_fail@plt+0x5188>
   16a6c:	push	{fp, lr}
   16a70:	mov	fp, sp
   16a74:	sub	sp, sp, #48	; 0x30
   16a78:	vmov.i32	q8, #0	; 0x00000000
   16a7c:	mov	ip, #32
   16a80:	mov	r3, sp
   16a84:	mov	lr, r2
   16a88:	cmp	r1, #10
   16a8c:	add	r2, r3, #16
   16a90:	vst1.64	{d16-d17}, [r3], ip
   16a94:	vst1.64	{d16-d17}, [r3]
   16a98:	vst1.64	{d16-d17}, [r2]
   16a9c:	beq	16abc <__assert_fail@plt+0x53a8>
   16aa0:	str	r1, [sp]
   16aa4:	mov	r3, sp
   16aa8:	mov	r1, lr
   16aac:	mvn	r2, #0
   16ab0:	bl	1689c <__assert_fail@plt+0x5188>
   16ab4:	mov	sp, fp
   16ab8:	pop	{fp, pc}
   16abc:	bl	116f0 <abort@plt>
   16ac0:	push	{r4, sl, fp, lr}
   16ac4:	add	fp, sp, #8
   16ac8:	sub	sp, sp, #48	; 0x30
   16acc:	mov	ip, r3
   16ad0:	mov	r3, sp
   16ad4:	vmov.i32	q8, #0	; 0x00000000
   16ad8:	mov	lr, #32
   16adc:	cmp	r1, #10
   16ae0:	add	r4, r3, #16
   16ae4:	vst1.64	{d16-d17}, [r3], lr
   16ae8:	vst1.64	{d16-d17}, [r3]
   16aec:	vst1.64	{d16-d17}, [r4]
   16af0:	beq	16b10 <__assert_fail@plt+0x53fc>
   16af4:	str	r1, [sp]
   16af8:	mov	r1, r2
   16afc:	mov	r3, sp
   16b00:	mov	r2, ip
   16b04:	bl	1689c <__assert_fail@plt+0x5188>
   16b08:	sub	sp, fp, #8
   16b0c:	pop	{r4, sl, fp, pc}
   16b10:	bl	116f0 <abort@plt>
   16b14:	push	{fp, lr}
   16b18:	mov	fp, sp
   16b1c:	sub	sp, sp, #48	; 0x30
   16b20:	mov	r3, sp
   16b24:	vmov.i32	q8, #0	; 0x00000000
   16b28:	mov	ip, #32
   16b2c:	cmp	r0, #10
   16b30:	add	r2, r3, #16
   16b34:	vst1.64	{d16-d17}, [r3], ip
   16b38:	vst1.64	{d16-d17}, [r3]
   16b3c:	vst1.64	{d16-d17}, [r2]
   16b40:	beq	16b60 <__assert_fail@plt+0x544c>
   16b44:	str	r0, [sp]
   16b48:	mov	r3, sp
   16b4c:	mov	r0, #0
   16b50:	mvn	r2, #0
   16b54:	bl	1689c <__assert_fail@plt+0x5188>
   16b58:	mov	sp, fp
   16b5c:	pop	{fp, pc}
   16b60:	bl	116f0 <abort@plt>
   16b64:	push	{fp, lr}
   16b68:	mov	fp, sp
   16b6c:	sub	sp, sp, #48	; 0x30
   16b70:	mov	r3, sp
   16b74:	vmov.i32	q8, #0	; 0x00000000
   16b78:	mov	ip, #32
   16b7c:	cmp	r0, #10
   16b80:	add	lr, r3, #16
   16b84:	vst1.64	{d16-d17}, [r3], ip
   16b88:	vst1.64	{d16-d17}, [r3]
   16b8c:	vst1.64	{d16-d17}, [lr]
   16b90:	beq	16bac <__assert_fail@plt+0x5498>
   16b94:	str	r0, [sp]
   16b98:	mov	r3, sp
   16b9c:	mov	r0, #0
   16ba0:	bl	1689c <__assert_fail@plt+0x5188>
   16ba4:	mov	sp, fp
   16ba8:	pop	{fp, pc}
   16bac:	bl	116f0 <abort@plt>
   16bb0:	push	{r4, sl, fp, lr}
   16bb4:	add	fp, sp, #8
   16bb8:	sub	sp, sp, #48	; 0x30
   16bbc:	mov	lr, r0
   16bc0:	movw	r0, #46392	; 0xb538
   16bc4:	mov	r3, #32
   16bc8:	mov	ip, r1
   16bcc:	mov	r4, #1
   16bd0:	movt	r0, #2
   16bd4:	add	r1, r0, #16
   16bd8:	vld1.64	{d16-d17}, [r0], r3
   16bdc:	mov	r3, sp
   16be0:	vld1.64	{d18-d19}, [r1]
   16be4:	add	r1, r3, #16
   16be8:	vld1.64	{d20-d21}, [r0]
   16bec:	add	r0, r3, #32
   16bf0:	vst1.64	{d18-d19}, [r1]
   16bf4:	mov	r1, r3
   16bf8:	vst1.64	{d20-d21}, [r0]
   16bfc:	mov	r0, #28
   16c00:	and	r0, r0, r2, lsr #3
   16c04:	and	r2, r2, #31
   16c08:	vst1.64	{d16-d17}, [r1], r0
   16c0c:	ldr	r0, [r1, #8]
   16c10:	bic	r4, r4, r0, lsr r2
   16c14:	eor	r0, r0, r4, lsl r2
   16c18:	mov	r2, ip
   16c1c:	str	r0, [r1, #8]
   16c20:	mov	r0, #0
   16c24:	mov	r1, lr
   16c28:	bl	1689c <__assert_fail@plt+0x5188>
   16c2c:	sub	sp, fp, #8
   16c30:	pop	{r4, sl, fp, pc}
   16c34:	push	{fp, lr}
   16c38:	mov	fp, sp
   16c3c:	sub	sp, sp, #48	; 0x30
   16c40:	mov	ip, r0
   16c44:	movw	r0, #46392	; 0xb538
   16c48:	mov	r3, #32
   16c4c:	movt	r0, #2
   16c50:	add	r2, r0, #16
   16c54:	vld1.64	{d16-d17}, [r0], r3
   16c58:	mov	r3, sp
   16c5c:	vld1.64	{d18-d19}, [r2]
   16c60:	add	r2, r3, #16
   16c64:	vld1.64	{d20-d21}, [r0]
   16c68:	add	r0, r3, #32
   16c6c:	vst1.64	{d18-d19}, [r2]
   16c70:	mov	r2, r3
   16c74:	vst1.64	{d20-d21}, [r0]
   16c78:	mov	r0, #28
   16c7c:	and	r0, r0, r1, lsr #3
   16c80:	and	r1, r1, #31
   16c84:	vst1.64	{d16-d17}, [r2], r0
   16c88:	mov	r0, #1
   16c8c:	ldr	lr, [r2, #8]
   16c90:	bic	r0, r0, lr, lsr r1
   16c94:	eor	r0, lr, r0, lsl r1
   16c98:	mov	r1, ip
   16c9c:	str	r0, [r2, #8]
   16ca0:	mov	r0, #0
   16ca4:	mvn	r2, #0
   16ca8:	bl	1689c <__assert_fail@plt+0x5188>
   16cac:	mov	sp, fp
   16cb0:	pop	{fp, pc}
   16cb4:	push	{fp, lr}
   16cb8:	mov	fp, sp
   16cbc:	sub	sp, sp, #48	; 0x30
   16cc0:	movw	r2, #46392	; 0xb538
   16cc4:	mov	r3, #32
   16cc8:	mov	r1, r0
   16ccc:	movt	r2, #2
   16cd0:	add	r0, r2, #16
   16cd4:	vld1.64	{d16-d17}, [r2], r3
   16cd8:	mov	r3, sp
   16cdc:	vld1.64	{d18-d19}, [r0]
   16ce0:	add	r0, r3, #16
   16ce4:	vld1.64	{d20-d21}, [r2]
   16ce8:	mov	r2, r3
   16cec:	vst1.64	{d18-d19}, [r0]
   16cf0:	add	r0, r3, #32
   16cf4:	vst1.64	{d20-d21}, [r0]
   16cf8:	mov	r0, #12
   16cfc:	vst1.64	{d16-d17}, [r2], r0
   16d00:	ldr	r0, [r2]
   16d04:	orr	r0, r0, #67108864	; 0x4000000
   16d08:	str	r0, [r2]
   16d0c:	mov	r0, #0
   16d10:	mvn	r2, #0
   16d14:	bl	1689c <__assert_fail@plt+0x5188>
   16d18:	mov	sp, fp
   16d1c:	pop	{fp, pc}
   16d20:	push	{fp, lr}
   16d24:	mov	fp, sp
   16d28:	sub	sp, sp, #48	; 0x30
   16d2c:	mov	ip, r1
   16d30:	mov	r1, r0
   16d34:	movw	r0, #46392	; 0xb538
   16d38:	mov	r3, #32
   16d3c:	movt	r0, #2
   16d40:	add	r2, r0, #16
   16d44:	vld1.64	{d16-d17}, [r0], r3
   16d48:	mov	r3, sp
   16d4c:	vld1.64	{d18-d19}, [r2]
   16d50:	add	r2, r3, #16
   16d54:	vld1.64	{d20-d21}, [r0]
   16d58:	add	r0, r3, #32
   16d5c:	vst1.64	{d18-d19}, [r2]
   16d60:	mov	r2, r3
   16d64:	vst1.64	{d20-d21}, [r0]
   16d68:	mov	r0, #12
   16d6c:	vst1.64	{d16-d17}, [r2], r0
   16d70:	ldr	r0, [r2]
   16d74:	orr	r0, r0, #67108864	; 0x4000000
   16d78:	str	r0, [r2]
   16d7c:	mov	r0, #0
   16d80:	mov	r2, ip
   16d84:	bl	1689c <__assert_fail@plt+0x5188>
   16d88:	mov	sp, fp
   16d8c:	pop	{fp, pc}
   16d90:	push	{r4, sl, fp, lr}
   16d94:	add	fp, sp, #8
   16d98:	sub	sp, sp, #96	; 0x60
   16d9c:	mov	ip, r2
   16da0:	mov	r2, sp
   16da4:	vmov.i32	q8, #0	; 0x00000000
   16da8:	mov	r4, #28
   16dac:	cmp	r1, #10
   16db0:	mov	r3, r2
   16db4:	add	lr, r2, #16
   16db8:	vst1.64	{d16-d17}, [r3], r4
   16dbc:	vst1.64	{d16-d17}, [lr]
   16dc0:	vst1.32	{d16-d17}, [r3]
   16dc4:	beq	16e14 <__assert_fail@plt+0x5700>
   16dc8:	vld1.64	{d16-d17}, [r2], r4
   16dcc:	vld1.64	{d18-d19}, [lr]
   16dd0:	add	r3, sp, #48	; 0x30
   16dd4:	add	r4, r3, #4
   16dd8:	vld1.32	{d20-d21}, [r2]
   16ddc:	add	r2, r3, #20
   16de0:	vst1.32	{d16-d17}, [r4]
   16de4:	vst1.32	{d18-d19}, [r2]
   16de8:	add	r2, r3, #32
   16dec:	vst1.32	{d20-d21}, [r2]
   16df0:	str	r1, [sp, #48]	; 0x30
   16df4:	mvn	r2, #0
   16df8:	ldr	r1, [sp, #60]	; 0x3c
   16dfc:	orr	r1, r1, #67108864	; 0x4000000
   16e00:	str	r1, [sp, #60]	; 0x3c
   16e04:	mov	r1, ip
   16e08:	bl	1689c <__assert_fail@plt+0x5188>
   16e0c:	sub	sp, fp, #8
   16e10:	pop	{r4, sl, fp, pc}
   16e14:	bl	116f0 <abort@plt>
   16e18:	push	{r4, r5, fp, lr}
   16e1c:	add	fp, sp, #8
   16e20:	sub	sp, sp, #48	; 0x30
   16e24:	mov	ip, r3
   16e28:	movw	r3, #46392	; 0xb538
   16e2c:	mov	lr, #32
   16e30:	cmp	r1, #0
   16e34:	mov	r5, sp
   16e38:	movt	r3, #2
   16e3c:	cmpne	r2, #0
   16e40:	add	r4, r3, #16
   16e44:	vld1.64	{d16-d17}, [r3], lr
   16e48:	vld1.64	{d18-d19}, [r4]
   16e4c:	add	r4, r5, #16
   16e50:	vld1.64	{d20-d21}, [r3]
   16e54:	vst1.64	{d16-d17}, [r5], lr
   16e58:	mov	r3, #10
   16e5c:	vst1.64	{d18-d19}, [r4]
   16e60:	vst1.64	{d20-d21}, [r5]
   16e64:	str	r3, [sp]
   16e68:	bne	16e70 <__assert_fail@plt+0x575c>
   16e6c:	bl	116f0 <abort@plt>
   16e70:	str	r2, [sp, #44]	; 0x2c
   16e74:	str	r1, [sp, #40]	; 0x28
   16e78:	mov	r3, sp
   16e7c:	mov	r1, ip
   16e80:	mvn	r2, #0
   16e84:	bl	1689c <__assert_fail@plt+0x5188>
   16e88:	sub	sp, fp, #8
   16e8c:	pop	{r4, r5, fp, pc}
   16e90:	push	{r4, r5, fp, lr}
   16e94:	add	fp, sp, #8
   16e98:	sub	sp, sp, #48	; 0x30
   16e9c:	mov	lr, r3
   16ea0:	movw	r3, #46392	; 0xb538
   16ea4:	mov	ip, #32
   16ea8:	cmp	r1, #0
   16eac:	mov	r5, sp
   16eb0:	movt	r3, #2
   16eb4:	cmpne	r2, #0
   16eb8:	add	r4, r3, #16
   16ebc:	vld1.64	{d16-d17}, [r3], ip
   16ec0:	vld1.64	{d18-d19}, [r4]
   16ec4:	add	r4, r5, #16
   16ec8:	vld1.64	{d20-d21}, [r3]
   16ecc:	vst1.64	{d16-d17}, [r5], ip
   16ed0:	mov	r3, #10
   16ed4:	vst1.64	{d18-d19}, [r4]
   16ed8:	vst1.64	{d20-d21}, [r5]
   16edc:	str	r3, [sp]
   16ee0:	bne	16ee8 <__assert_fail@plt+0x57d4>
   16ee4:	bl	116f0 <abort@plt>
   16ee8:	ldr	ip, [fp, #8]
   16eec:	str	r2, [sp, #44]	; 0x2c
   16ef0:	str	r1, [sp, #40]	; 0x28
   16ef4:	mov	r3, sp
   16ef8:	mov	r1, lr
   16efc:	mov	r2, ip
   16f00:	bl	1689c <__assert_fail@plt+0x5188>
   16f04:	sub	sp, fp, #8
   16f08:	pop	{r4, r5, fp, pc}
   16f0c:	push	{r4, sl, fp, lr}
   16f10:	add	fp, sp, #8
   16f14:	sub	sp, sp, #48	; 0x30
   16f18:	mov	ip, r2
   16f1c:	movw	r2, #46392	; 0xb538
   16f20:	mov	lr, #32
   16f24:	cmp	r0, #0
   16f28:	mov	r4, sp
   16f2c:	movt	r2, #2
   16f30:	cmpne	r1, #0
   16f34:	add	r3, r2, #16
   16f38:	vld1.64	{d16-d17}, [r2], lr
   16f3c:	vld1.64	{d18-d19}, [r3]
   16f40:	add	r3, r4, #16
   16f44:	vld1.64	{d20-d21}, [r2]
   16f48:	vst1.64	{d16-d17}, [r4], lr
   16f4c:	mov	r2, #10
   16f50:	vst1.64	{d18-d19}, [r3]
   16f54:	vst1.64	{d20-d21}, [r4]
   16f58:	str	r2, [sp]
   16f5c:	bne	16f64 <__assert_fail@plt+0x5850>
   16f60:	bl	116f0 <abort@plt>
   16f64:	str	r1, [sp, #44]	; 0x2c
   16f68:	str	r0, [sp, #40]	; 0x28
   16f6c:	mov	r3, sp
   16f70:	mov	r0, #0
   16f74:	mov	r1, ip
   16f78:	mvn	r2, #0
   16f7c:	bl	1689c <__assert_fail@plt+0x5188>
   16f80:	sub	sp, fp, #8
   16f84:	pop	{r4, sl, fp, pc}
   16f88:	push	{r4, r5, fp, lr}
   16f8c:	add	fp, sp, #8
   16f90:	sub	sp, sp, #48	; 0x30
   16f94:	mov	lr, r2
   16f98:	movw	r2, #46392	; 0xb538
   16f9c:	mov	ip, r3
   16fa0:	mov	r3, #32
   16fa4:	cmp	r0, #0
   16fa8:	mov	r5, sp
   16fac:	movt	r2, #2
   16fb0:	cmpne	r1, #0
   16fb4:	add	r4, r2, #16
   16fb8:	vld1.64	{d16-d17}, [r2], r3
   16fbc:	vld1.64	{d18-d19}, [r4]
   16fc0:	add	r4, r5, #16
   16fc4:	vld1.64	{d20-d21}, [r2]
   16fc8:	vst1.64	{d16-d17}, [r5], r3
   16fcc:	mov	r2, #10
   16fd0:	vst1.64	{d18-d19}, [r4]
   16fd4:	vst1.64	{d20-d21}, [r5]
   16fd8:	str	r2, [sp]
   16fdc:	bne	16fe4 <__assert_fail@plt+0x58d0>
   16fe0:	bl	116f0 <abort@plt>
   16fe4:	str	r1, [sp, #44]	; 0x2c
   16fe8:	str	r0, [sp, #40]	; 0x28
   16fec:	mov	r3, sp
   16ff0:	mov	r0, #0
   16ff4:	mov	r1, lr
   16ff8:	mov	r2, ip
   16ffc:	bl	1689c <__assert_fail@plt+0x5188>
   17000:	sub	sp, fp, #8
   17004:	pop	{r4, r5, fp, pc}
   17008:	movw	r3, #45432	; 0xb178
   1700c:	movt	r3, #2
   17010:	b	1689c <__assert_fail@plt+0x5188>
   17014:	movw	r3, #45432	; 0xb178
   17018:	mov	r2, r1
   1701c:	mov	r1, r0
   17020:	mov	r0, #0
   17024:	movt	r3, #2
   17028:	b	1689c <__assert_fail@plt+0x5188>
   1702c:	movw	r3, #45432	; 0xb178
   17030:	mvn	r2, #0
   17034:	movt	r3, #2
   17038:	b	1689c <__assert_fail@plt+0x5188>
   1703c:	movw	r3, #45432	; 0xb178
   17040:	mov	r1, r0
   17044:	mov	r0, #0
   17048:	mvn	r2, #0
   1704c:	movt	r3, #2
   17050:	b	1689c <__assert_fail@plt+0x5188>
   17054:	push	{r4, r5, fp, lr}
   17058:	add	fp, sp, #8
   1705c:	mov	r5, r0
   17060:	mov	r4, r1
   17064:	mov	r0, #0
   17068:	mov	r2, #5
   1706c:	mov	r1, r5
   17070:	bl	11450 <dcgettext@plt>
   17074:	cmp	r0, r5
   17078:	popne	{r4, r5, fp, pc}
   1707c:	bl	19040 <__assert_fail@plt+0x792c>
   17080:	ldrb	r1, [r0]
   17084:	and	r1, r1, #223	; 0xdf
   17088:	cmp	r1, #71	; 0x47
   1708c:	beq	170f4 <__assert_fail@plt+0x59e0>
   17090:	cmp	r1, #85	; 0x55
   17094:	bne	17118 <__assert_fail@plt+0x5a04>
   17098:	ldrb	r1, [r0, #1]
   1709c:	and	r1, r1, #223	; 0xdf
   170a0:	cmp	r1, #84	; 0x54
   170a4:	bne	17118 <__assert_fail@plt+0x5a04>
   170a8:	ldrb	r1, [r0, #2]
   170ac:	and	r1, r1, #223	; 0xdf
   170b0:	cmp	r1, #70	; 0x46
   170b4:	ldrbeq	r1, [r0, #3]
   170b8:	cmpeq	r1, #45	; 0x2d
   170bc:	bne	17118 <__assert_fail@plt+0x5a04>
   170c0:	ldrb	r1, [r0, #4]
   170c4:	cmp	r1, #56	; 0x38
   170c8:	ldrbeq	r0, [r0, #5]
   170cc:	cmpeq	r0, #0
   170d0:	bne	17118 <__assert_fail@plt+0x5a04>
   170d4:	ldrb	r1, [r5]
   170d8:	movw	r2, #43179	; 0xa8ab
   170dc:	movw	r0, #43183	; 0xa8af
   170e0:	movt	r2, #1
   170e4:	movt	r0, #1
   170e8:	cmp	r1, #96	; 0x60
   170ec:	moveq	r0, r2
   170f0:	pop	{r4, r5, fp, pc}
   170f4:	ldrb	r1, [r0, #1]
   170f8:	and	r1, r1, #223	; 0xdf
   170fc:	cmp	r1, #66	; 0x42
   17100:	bne	17118 <__assert_fail@plt+0x5a04>
   17104:	ldrb	r1, [r0, #2]
   17108:	cmp	r1, #49	; 0x31
   1710c:	ldrbeq	r1, [r0, #3]
   17110:	cmpeq	r1, #56	; 0x38
   17114:	beq	17134 <__assert_fail@plt+0x5a20>
   17118:	movw	r1, #42272	; 0xa520
   1711c:	movw	r0, #43177	; 0xa8a9
   17120:	cmp	r4, #9
   17124:	movt	r1, #1
   17128:	movt	r0, #1
   1712c:	moveq	r0, r1
   17130:	pop	{r4, r5, fp, pc}
   17134:	ldrb	r1, [r0, #4]
   17138:	cmp	r1, #48	; 0x30
   1713c:	ldrbeq	r1, [r0, #5]
   17140:	cmpeq	r1, #51	; 0x33
   17144:	bne	17118 <__assert_fail@plt+0x5a04>
   17148:	ldrb	r1, [r0, #6]
   1714c:	cmp	r1, #48	; 0x30
   17150:	ldrbeq	r0, [r0, #7]
   17154:	cmpeq	r0, #0
   17158:	bne	17118 <__assert_fail@plt+0x5a04>
   1715c:	ldrb	r1, [r5]
   17160:	movw	r2, #43187	; 0xa8b3
   17164:	movw	r0, #43191	; 0xa8b7
   17168:	movt	r2, #1
   1716c:	movt	r0, #1
   17170:	b	170e8 <__assert_fail@plt+0x59d4>
   17174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17178:	add	fp, sp, #24
   1717c:	movw	r8, #0
   17180:	mov	r6, r2
   17184:	mov	r4, r1
   17188:	mov	r5, r0
   1718c:	movt	r8, #32752	; 0x7ff0
   17190:	mov	r0, r5
   17194:	mov	r1, r4
   17198:	mov	r2, r6
   1719c:	bl	113c0 <read@plt>
   171a0:	mov	r7, r0
   171a4:	cmn	r0, #1
   171a8:	bgt	171d0 <__assert_fail@plt+0x5abc>
   171ac:	bl	115d0 <__errno_location@plt>
   171b0:	ldr	r0, [r0]
   171b4:	cmp	r0, #4
   171b8:	beq	17190 <__assert_fail@plt+0x5a7c>
   171bc:	cmp	r6, r8
   171c0:	bls	171d0 <__assert_fail@plt+0x5abc>
   171c4:	cmp	r0, #22
   171c8:	mov	r6, r8
   171cc:	beq	17190 <__assert_fail@plt+0x5a7c>
   171d0:	mov	r0, r7
   171d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   171dc:	add	fp, sp, #24
   171e0:	movw	r8, #0
   171e4:	mov	r6, r2
   171e8:	mov	r4, r1
   171ec:	mov	r5, r0
   171f0:	movt	r8, #32752	; 0x7ff0
   171f4:	mov	r0, r5
   171f8:	mov	r1, r4
   171fc:	mov	r2, r6
   17200:	bl	1160c <write@plt>
   17204:	mov	r7, r0
   17208:	cmn	r0, #1
   1720c:	bgt	17234 <__assert_fail@plt+0x5b20>
   17210:	bl	115d0 <__errno_location@plt>
   17214:	ldr	r0, [r0]
   17218:	cmp	r0, #4
   1721c:	beq	171f4 <__assert_fail@plt+0x5ae0>
   17220:	cmp	r6, r8
   17224:	bls	17234 <__assert_fail@plt+0x5b20>
   17228:	cmp	r0, #22
   1722c:	mov	r6, r8
   17230:	beq	171f4 <__assert_fail@plt+0x5ae0>
   17234:	mov	r0, r7
   17238:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1723c:	push	{r4, r5, r6, r7, fp, lr}
   17240:	add	fp, sp, #16
   17244:	sub	sp, sp, #8
   17248:	mov	r5, r0
   1724c:	ldrb	r0, [r0]
   17250:	mov	r4, r1
   17254:	sub	r0, r0, #48	; 0x30
   17258:	cmp	r0, #10
   1725c:	bcs	1728c <__assert_fail@plt+0x5b78>
   17260:	add	r1, sp, #4
   17264:	mov	r0, r5
   17268:	mov	r2, #10
   1726c:	bl	113b4 <strtol@plt>
   17270:	cmp	r0, #64	; 0x40
   17274:	bgt	17394 <__assert_fail@plt+0x5c80>
   17278:	ldr	r1, [sp, #4]
   1727c:	ldrb	r1, [r1]
   17280:	cmp	r1, #0
   17284:	mvnne	r0, #0
   17288:	b	17398 <__assert_fail@plt+0x5c84>
   1728c:	movw	r0, #45480	; 0xb1a8
   17290:	mov	r7, #0
   17294:	movt	r0, #2
   17298:	add	r6, r0, #4
   1729c:	mov	r0, r6
   172a0:	mov	r1, r5
   172a4:	bl	113a8 <strcmp@plt>
   172a8:	cmp	r0, #0
   172ac:	beq	17350 <__assert_fail@plt+0x5c3c>
   172b0:	add	r7, r7, #1
   172b4:	add	r6, r6, #12
   172b8:	cmp	r7, #35	; 0x23
   172bc:	bcc	1729c <__assert_fail@plt+0x5b88>
   172c0:	bl	116d8 <__libc_current_sigrtmin@plt>
   172c4:	mov	r6, r0
   172c8:	bl	11594 <__libc_current_sigrtmax@plt>
   172cc:	mov	r7, r0
   172d0:	cmp	r6, #1
   172d4:	blt	172f4 <__assert_fail@plt+0x5be0>
   172d8:	movw	r1, #43280	; 0xa910
   172dc:	mov	r0, r5
   172e0:	mov	r2, #5
   172e4:	movt	r1, #1
   172e8:	bl	116e4 <strncmp@plt>
   172ec:	cmp	r0, #0
   172f0:	beq	17358 <__assert_fail@plt+0x5c44>
   172f4:	cmp	r7, #1
   172f8:	blt	17394 <__assert_fail@plt+0x5c80>
   172fc:	movw	r1, #43286	; 0xa916
   17300:	mov	r0, r5
   17304:	mov	r2, #5
   17308:	movt	r1, #1
   1730c:	bl	116e4 <strncmp@plt>
   17310:	cmp	r0, #0
   17314:	bne	17394 <__assert_fail@plt+0x5c80>
   17318:	add	r0, r5, #5
   1731c:	mov	r1, sp
   17320:	mov	r2, #10
   17324:	bl	113b4 <strtol@plt>
   17328:	ldr	r1, [sp]
   1732c:	ldrb	r1, [r1]
   17330:	cmp	r1, #0
   17334:	bne	17394 <__assert_fail@plt+0x5c80>
   17338:	sub	r1, r6, r7
   1733c:	cmp	r1, r0
   17340:	cmple	r0, #0
   17344:	bgt	17394 <__assert_fail@plt+0x5c80>
   17348:	add	r0, r0, r7
   1734c:	b	17398 <__assert_fail@plt+0x5c84>
   17350:	ldr	r0, [r6, #-4]
   17354:	b	17398 <__assert_fail@plt+0x5c84>
   17358:	add	r0, r5, #5
   1735c:	mov	r1, sp
   17360:	mov	r2, #10
   17364:	bl	113b4 <strtol@plt>
   17368:	sub	r1, r7, r6
   1736c:	cmp	r0, r1
   17370:	bgt	17394 <__assert_fail@plt+0x5c80>
   17374:	cmp	r0, #0
   17378:	blt	17394 <__assert_fail@plt+0x5c80>
   1737c:	ldr	r1, [sp]
   17380:	ldrb	r1, [r1]
   17384:	cmp	r1, #0
   17388:	bne	17394 <__assert_fail@plt+0x5c80>
   1738c:	add	r0, r0, r6
   17390:	b	17398 <__assert_fail@plt+0x5c84>
   17394:	mvn	r0, #0
   17398:	str	r0, [r4]
   1739c:	asr	r0, r0, #31
   173a0:	sub	sp, fp, #16
   173a4:	pop	{r4, r5, r6, r7, fp, pc}
   173a8:	push	{r4, r5, r6, r7, fp, lr}
   173ac:	add	fp, sp, #16
   173b0:	sub	sp, sp, #8
   173b4:	mov	r5, r0
   173b8:	movw	r0, #45480	; 0xb1a8
   173bc:	mov	r4, r1
   173c0:	movt	r0, #2
   173c4:	add	r1, r0, #4
   173c8:	mov	r0, #0
   173cc:	ldr	r2, [r1, #-4]
   173d0:	cmp	r2, r5
   173d4:	beq	17438 <__assert_fail@plt+0x5d24>
   173d8:	add	r0, r0, #1
   173dc:	add	r1, r1, #12
   173e0:	cmp	r0, #35	; 0x23
   173e4:	bcc	173cc <__assert_fail@plt+0x5cb8>
   173e8:	bl	116d8 <__libc_current_sigrtmin@plt>
   173ec:	mov	r7, r0
   173f0:	mvn	r6, #0
   173f4:	bl	11594 <__libc_current_sigrtmax@plt>
   173f8:	cmp	r7, r5
   173fc:	bgt	17484 <__assert_fail@plt+0x5d70>
   17400:	cmp	r0, r5
   17404:	blt	17484 <__assert_fail@plt+0x5d70>
   17408:	sub	r1, r0, r7
   1740c:	add	r1, r1, r1, lsr #31
   17410:	add	r1, r7, r1, asr #1
   17414:	cmp	r1, r5
   17418:	bge	17448 <__assert_fail@plt+0x5d34>
   1741c:	mov	r1, #88	; 0x58
   17420:	mov	r7, r0
   17424:	strh	r1, [r4, #4]
   17428:	movw	r1, #21586	; 0x5452
   1742c:	movt	r1, #16717	; 0x414d
   17430:	str	r1, [r4]
   17434:	b	1745c <__assert_fail@plt+0x5d48>
   17438:	mov	r0, r4
   1743c:	bl	114e0 <strcpy@plt>
   17440:	mov	r6, #0
   17444:	b	17484 <__assert_fail@plt+0x5d70>
   17448:	mov	r0, #78	; 0x4e
   1744c:	strh	r0, [r4, #4]
   17450:	movw	r0, #21586	; 0x5452
   17454:	movt	r0, #18765	; 0x494d
   17458:	str	r0, [r4]
   1745c:	subs	r0, r5, r7
   17460:	mov	r6, #0
   17464:	beq	17484 <__assert_fail@plt+0x5d70>
   17468:	movw	r3, #43292	; 0xa91c
   1746c:	str	r0, [sp]
   17470:	add	r0, r4, #5
   17474:	mov	r1, #1
   17478:	mvn	r2, #0
   1747c:	movt	r3, #1
   17480:	bl	115dc <__sprintf_chk@plt>
   17484:	mov	r0, r6
   17488:	sub	sp, fp, #16
   1748c:	pop	{r4, r5, r6, r7, fp, pc}
   17490:	push	{r4, r5, r6, r7, fp, lr}
   17494:	add	fp, sp, #16
   17498:	mov	r4, r0
   1749c:	cmp	r0, #2
   174a0:	movhi	r0, r4
   174a4:	pophi	{r4, r5, r6, r7, fp, pc}
   174a8:	mov	r0, r4
   174ac:	bl	19114 <__assert_fail@plt+0x7a00>
   174b0:	mov	r5, r0
   174b4:	bl	115d0 <__errno_location@plt>
   174b8:	ldr	r7, [r0]
   174bc:	mov	r6, r0
   174c0:	mov	r0, r4
   174c4:	bl	116fc <close@plt>
   174c8:	mov	r0, r5
   174cc:	str	r7, [r6]
   174d0:	pop	{r4, r5, r6, r7, fp, pc}
   174d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174d8:	add	fp, sp, #24
   174dc:	sub	sp, sp, #32
   174e0:	ldr	r6, [fp, #12]
   174e4:	ldr	r7, [fp, #8]
   174e8:	mov	r4, r2
   174ec:	mov	r8, r0
   174f0:	cmp	r1, #0
   174f4:	beq	1751c <__assert_fail@plt+0x5e08>
   174f8:	movw	r2, #43296	; 0xa920
   174fc:	mov	r5, r1
   17500:	str	r3, [sp, #4]
   17504:	str	r4, [sp]
   17508:	mov	r0, r8
   1750c:	mov	r1, #1
   17510:	movt	r2, #1
   17514:	mov	r3, r5
   17518:	b	17534 <__assert_fail@plt+0x5e20>
   1751c:	movw	r2, #43308	; 0xa92c
   17520:	str	r3, [sp]
   17524:	mov	r0, r8
   17528:	mov	r1, #1
   1752c:	mov	r3, r4
   17530:	movt	r2, #1
   17534:	bl	11624 <__fprintf_chk@plt>
   17538:	movw	r1, #43315	; 0xa933
   1753c:	mov	r0, #0
   17540:	mov	r2, #5
   17544:	movt	r1, #1
   17548:	bl	11450 <dcgettext@plt>
   1754c:	movw	r2, #44033	; 0xac01
   17550:	mov	r3, r0
   17554:	movw	r0, #2022	; 0x7e6
   17558:	mov	r1, #1
   1755c:	str	r0, [sp]
   17560:	movt	r2, #1
   17564:	mov	r0, r8
   17568:	bl	11624 <__fprintf_chk@plt>
   1756c:	movw	r4, #39676	; 0x9afc
   17570:	mov	r1, r8
   17574:	movt	r4, #1
   17578:	mov	r0, r4
   1757c:	bl	11390 <fputs_unlocked@plt>
   17580:	movw	r1, #43319	; 0xa937
   17584:	mov	r0, #0
   17588:	mov	r2, #5
   1758c:	movt	r1, #1
   17590:	bl	11450 <dcgettext@plt>
   17594:	movw	r3, #43490	; 0xa9e2
   17598:	mov	r2, r0
   1759c:	mov	r0, r8
   175a0:	mov	r1, #1
   175a4:	movt	r3, #1
   175a8:	bl	11624 <__fprintf_chk@plt>
   175ac:	mov	r0, r4
   175b0:	mov	r1, r8
   175b4:	bl	11390 <fputs_unlocked@plt>
   175b8:	cmp	r6, #9
   175bc:	bhi	175f8 <__assert_fail@plt+0x5ee4>
   175c0:	add	r0, pc, #0
   175c4:	ldr	pc, [r0, r6, lsl #2]
   175c8:	strdeq	r7, [r1], -r0
   175cc:	andeq	r7, r1, r4, lsl #12
   175d0:	andeq	r7, r1, r4, lsr r6
   175d4:	andeq	r7, r1, ip, asr r6
   175d8:	andeq	r7, r1, r4, lsl #13
   175dc:	andeq	r7, r1, ip, lsr #13
   175e0:	ldrdeq	r7, [r1], -r4
   175e4:	andeq	r7, r1, ip, lsl #14
   175e8:	andeq	r7, r1, ip, lsr #15
   175ec:	andeq	r7, r1, r4, asr r7
   175f0:	sub	sp, fp, #24
   175f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175f8:	movw	r1, #43843	; 0xab43
   175fc:	movt	r1, #1
   17600:	b	1775c <__assert_fail@plt+0x6048>
   17604:	movw	r1, #43524	; 0xaa04
   17608:	mov	r0, #0
   1760c:	mov	r2, #5
   17610:	movt	r1, #1
   17614:	bl	11450 <dcgettext@plt>
   17618:	ldr	r3, [r7]
   1761c:	mov	r2, r0
   17620:	mov	r0, r8
   17624:	mov	r1, #1
   17628:	sub	sp, fp, #24
   1762c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17630:	b	11624 <__fprintf_chk@plt>
   17634:	movw	r1, #43540	; 0xaa14
   17638:	mov	r0, #0
   1763c:	mov	r2, #5
   17640:	movt	r1, #1
   17644:	bl	11450 <dcgettext@plt>
   17648:	mov	r2, r0
   1764c:	ldr	r3, [r7]
   17650:	ldr	r0, [r7, #4]
   17654:	str	r0, [sp]
   17658:	b	17748 <__assert_fail@plt+0x6034>
   1765c:	movw	r1, #43563	; 0xaa2b
   17660:	mov	r0, #0
   17664:	mov	r2, #5
   17668:	movt	r1, #1
   1766c:	bl	11450 <dcgettext@plt>
   17670:	ldr	r3, [r7]
   17674:	mov	r2, r0
   17678:	ldmib	r7, {r0, r1}
   1767c:	stm	sp, {r0, r1}
   17680:	b	17748 <__assert_fail@plt+0x6034>
   17684:	movw	r1, #43591	; 0xaa47
   17688:	mov	r0, #0
   1768c:	mov	r2, #5
   17690:	movt	r1, #1
   17694:	bl	11450 <dcgettext@plt>
   17698:	ldr	r3, [r7]
   1769c:	mov	r2, r0
   176a0:	ldmib	r7, {r0, r1, r7}
   176a4:	stm	sp, {r0, r1, r7}
   176a8:	b	17748 <__assert_fail@plt+0x6034>
   176ac:	movw	r1, #43623	; 0xaa67
   176b0:	mov	r0, #0
   176b4:	mov	r2, #5
   176b8:	movt	r1, #1
   176bc:	bl	11450 <dcgettext@plt>
   176c0:	ldr	r3, [r7]
   176c4:	mov	r2, r0
   176c8:	ldmib	r7, {r0, r1, r6, r7}
   176cc:	stm	sp, {r0, r1, r6, r7}
   176d0:	b	17748 <__assert_fail@plt+0x6034>
   176d4:	movw	r1, #43659	; 0xaa8b
   176d8:	mov	r0, #0
   176dc:	mov	r2, #5
   176e0:	movt	r1, #1
   176e4:	bl	11450 <dcgettext@plt>
   176e8:	ldr	r3, [r7]
   176ec:	mov	r2, r0
   176f0:	ldmib	r7, {r0, r1, r6}
   176f4:	ldr	r5, [r7, #16]
   176f8:	ldr	r7, [r7, #20]
   176fc:	stm	sp, {r0, r1, r6}
   17700:	str	r5, [sp, #12]
   17704:	str	r7, [sp, #16]
   17708:	b	17748 <__assert_fail@plt+0x6034>
   1770c:	movw	r1, #43699	; 0xaab3
   17710:	mov	r0, #0
   17714:	mov	r2, #5
   17718:	movt	r1, #1
   1771c:	bl	11450 <dcgettext@plt>
   17720:	ldr	r3, [r7]
   17724:	mov	r2, r0
   17728:	ldmib	r7, {r0, r1, r6}
   1772c:	ldr	r5, [r7, #16]
   17730:	ldr	r4, [r7, #20]
   17734:	ldr	r7, [r7, #24]
   17738:	stm	sp, {r0, r1, r6}
   1773c:	str	r5, [sp, #12]
   17740:	str	r4, [sp, #16]
   17744:	str	r7, [sp, #20]
   17748:	mov	r0, r8
   1774c:	mov	r1, #1
   17750:	b	177fc <__assert_fail@plt+0x60e8>
   17754:	movw	r1, #43791	; 0xab0f
   17758:	movt	r1, #1
   1775c:	mov	r0, #0
   17760:	mov	r2, #5
   17764:	bl	11450 <dcgettext@plt>
   17768:	mov	ip, r0
   1776c:	ldr	r3, [r7]
   17770:	ldr	r0, [r7, #4]
   17774:	ldr	r1, [r7, #8]
   17778:	ldr	r6, [r7, #12]
   1777c:	ldr	r5, [r7, #16]
   17780:	ldr	r4, [r7, #20]
   17784:	ldr	r2, [r7, #24]
   17788:	ldr	lr, [r7, #28]
   1778c:	ldr	r7, [r7, #32]
   17790:	stm	sp, {r0, r1, r6}
   17794:	str	r5, [sp, #12]
   17798:	str	r4, [sp, #16]
   1779c:	str	r2, [sp, #20]
   177a0:	str	lr, [sp, #24]
   177a4:	str	r7, [sp, #28]
   177a8:	b	177f0 <__assert_fail@plt+0x60dc>
   177ac:	movw	r1, #43743	; 0xaadf
   177b0:	mov	r0, #0
   177b4:	mov	r2, #5
   177b8:	movt	r1, #1
   177bc:	bl	11450 <dcgettext@plt>
   177c0:	mov	ip, r0
   177c4:	ldr	r3, [r7]
   177c8:	ldmib	r7, {r0, r1, r6}
   177cc:	ldr	r5, [r7, #16]
   177d0:	ldr	r4, [r7, #20]
   177d4:	ldr	r2, [r7, #24]
   177d8:	ldr	r7, [r7, #28]
   177dc:	stm	sp, {r0, r1, r6}
   177e0:	str	r5, [sp, #12]
   177e4:	str	r4, [sp, #16]
   177e8:	str	r2, [sp, #20]
   177ec:	str	r7, [sp, #24]
   177f0:	mov	r0, r8
   177f4:	mov	r1, #1
   177f8:	mov	r2, ip
   177fc:	bl	11624 <__fprintf_chk@plt>
   17800:	sub	sp, fp, #24
   17804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17808:	push	{r4, sl, fp, lr}
   1780c:	add	fp, sp, #8
   17810:	sub	sp, sp, #8
   17814:	ldr	ip, [fp, #8]
   17818:	mov	lr, #0
   1781c:	ldr	r4, [ip, lr, lsl #2]
   17820:	add	lr, lr, #1
   17824:	cmp	r4, #0
   17828:	bne	1781c <__assert_fail@plt+0x6108>
   1782c:	sub	r4, lr, #1
   17830:	str	ip, [sp]
   17834:	str	r4, [sp, #4]
   17838:	bl	174d4 <__assert_fail@plt+0x5dc0>
   1783c:	sub	sp, fp, #8
   17840:	pop	{r4, sl, fp, pc}
   17844:	push	{fp, lr}
   17848:	mov	fp, sp
   1784c:	sub	sp, sp, #48	; 0x30
   17850:	ldr	ip, [fp, #8]
   17854:	ldr	lr, [ip]
   17858:	cmp	lr, #0
   1785c:	str	lr, [sp, #8]
   17860:	beq	178fc <__assert_fail@plt+0x61e8>
   17864:	ldr	lr, [ip, #4]
   17868:	cmp	lr, #0
   1786c:	str	lr, [sp, #12]
   17870:	beq	17904 <__assert_fail@plt+0x61f0>
   17874:	ldr	lr, [ip, #8]
   17878:	cmp	lr, #0
   1787c:	str	lr, [sp, #16]
   17880:	beq	1790c <__assert_fail@plt+0x61f8>
   17884:	ldr	lr, [ip, #12]
   17888:	cmp	lr, #0
   1788c:	str	lr, [sp, #20]
   17890:	beq	17914 <__assert_fail@plt+0x6200>
   17894:	ldr	lr, [ip, #16]
   17898:	cmp	lr, #0
   1789c:	str	lr, [sp, #24]
   178a0:	beq	1791c <__assert_fail@plt+0x6208>
   178a4:	ldr	lr, [ip, #20]
   178a8:	cmp	lr, #0
   178ac:	str	lr, [sp, #28]
   178b0:	beq	17924 <__assert_fail@plt+0x6210>
   178b4:	ldr	lr, [ip, #24]
   178b8:	cmp	lr, #0
   178bc:	str	lr, [sp, #32]
   178c0:	beq	1792c <__assert_fail@plt+0x6218>
   178c4:	ldr	lr, [ip, #28]
   178c8:	cmp	lr, #0
   178cc:	str	lr, [sp, #36]	; 0x24
   178d0:	beq	17934 <__assert_fail@plt+0x6220>
   178d4:	ldr	lr, [ip, #32]
   178d8:	cmp	lr, #0
   178dc:	str	lr, [sp, #40]	; 0x28
   178e0:	beq	1793c <__assert_fail@plt+0x6228>
   178e4:	ldr	lr, [ip, #36]	; 0x24
   178e8:	mov	ip, #10
   178ec:	cmp	lr, #0
   178f0:	str	lr, [sp, #44]	; 0x2c
   178f4:	movweq	ip, #9
   178f8:	b	17940 <__assert_fail@plt+0x622c>
   178fc:	mov	ip, #0
   17900:	b	17940 <__assert_fail@plt+0x622c>
   17904:	mov	ip, #1
   17908:	b	17940 <__assert_fail@plt+0x622c>
   1790c:	mov	ip, #2
   17910:	b	17940 <__assert_fail@plt+0x622c>
   17914:	mov	ip, #3
   17918:	b	17940 <__assert_fail@plt+0x622c>
   1791c:	mov	ip, #4
   17920:	b	17940 <__assert_fail@plt+0x622c>
   17924:	mov	ip, #5
   17928:	b	17940 <__assert_fail@plt+0x622c>
   1792c:	mov	ip, #6
   17930:	b	17940 <__assert_fail@plt+0x622c>
   17934:	mov	ip, #7
   17938:	b	17940 <__assert_fail@plt+0x622c>
   1793c:	mov	ip, #8
   17940:	add	lr, sp, #8
   17944:	str	ip, [sp, #4]
   17948:	str	lr, [sp]
   1794c:	bl	174d4 <__assert_fail@plt+0x5dc0>
   17950:	mov	sp, fp
   17954:	pop	{fp, pc}
   17958:	push	{fp, lr}
   1795c:	mov	fp, sp
   17960:	sub	sp, sp, #56	; 0x38
   17964:	add	ip, fp, #8
   17968:	str	ip, [sp, #12]
   1796c:	ldr	lr, [fp, #8]
   17970:	cmp	lr, #0
   17974:	str	lr, [sp, #16]
   17978:	beq	17a14 <__assert_fail@plt+0x6300>
   1797c:	ldr	lr, [ip, #4]
   17980:	cmp	lr, #0
   17984:	str	lr, [sp, #20]
   17988:	beq	17a1c <__assert_fail@plt+0x6308>
   1798c:	ldr	lr, [ip, #8]
   17990:	cmp	lr, #0
   17994:	str	lr, [sp, #24]
   17998:	beq	17a24 <__assert_fail@plt+0x6310>
   1799c:	ldr	lr, [ip, #12]
   179a0:	cmp	lr, #0
   179a4:	str	lr, [sp, #28]
   179a8:	beq	17a2c <__assert_fail@plt+0x6318>
   179ac:	ldr	lr, [ip, #16]
   179b0:	cmp	lr, #0
   179b4:	str	lr, [sp, #32]
   179b8:	beq	17a34 <__assert_fail@plt+0x6320>
   179bc:	ldr	lr, [ip, #20]
   179c0:	cmp	lr, #0
   179c4:	str	lr, [sp, #36]	; 0x24
   179c8:	beq	17a3c <__assert_fail@plt+0x6328>
   179cc:	ldr	lr, [ip, #24]
   179d0:	cmp	lr, #0
   179d4:	str	lr, [sp, #40]	; 0x28
   179d8:	beq	17a44 <__assert_fail@plt+0x6330>
   179dc:	ldr	lr, [ip, #28]
   179e0:	cmp	lr, #0
   179e4:	str	lr, [sp, #44]	; 0x2c
   179e8:	beq	17a4c <__assert_fail@plt+0x6338>
   179ec:	ldr	lr, [ip, #32]
   179f0:	cmp	lr, #0
   179f4:	str	lr, [sp, #48]	; 0x30
   179f8:	beq	17a54 <__assert_fail@plt+0x6340>
   179fc:	ldr	lr, [ip, #36]	; 0x24
   17a00:	mov	ip, #10
   17a04:	cmp	lr, #0
   17a08:	str	lr, [sp, #52]	; 0x34
   17a0c:	movweq	ip, #9
   17a10:	b	17a58 <__assert_fail@plt+0x6344>
   17a14:	mov	ip, #0
   17a18:	b	17a58 <__assert_fail@plt+0x6344>
   17a1c:	mov	ip, #1
   17a20:	b	17a58 <__assert_fail@plt+0x6344>
   17a24:	mov	ip, #2
   17a28:	b	17a58 <__assert_fail@plt+0x6344>
   17a2c:	mov	ip, #3
   17a30:	b	17a58 <__assert_fail@plt+0x6344>
   17a34:	mov	ip, #4
   17a38:	b	17a58 <__assert_fail@plt+0x6344>
   17a3c:	mov	ip, #5
   17a40:	b	17a58 <__assert_fail@plt+0x6344>
   17a44:	mov	ip, #6
   17a48:	b	17a58 <__assert_fail@plt+0x6344>
   17a4c:	mov	ip, #7
   17a50:	b	17a58 <__assert_fail@plt+0x6344>
   17a54:	mov	ip, #8
   17a58:	add	lr, sp, #16
   17a5c:	str	ip, [sp, #4]
   17a60:	str	lr, [sp]
   17a64:	bl	174d4 <__assert_fail@plt+0x5dc0>
   17a68:	mov	sp, fp
   17a6c:	pop	{fp, pc}
   17a70:	push	{fp, lr}
   17a74:	mov	fp, sp
   17a78:	movw	r0, #45924	; 0xb364
   17a7c:	movt	r0, #2
   17a80:	ldr	r1, [r0]
   17a84:	movw	r0, #39676	; 0x9afc
   17a88:	movt	r0, #1
   17a8c:	bl	11390 <fputs_unlocked@plt>
   17a90:	movw	r1, #43903	; 0xab7f
   17a94:	mov	r0, #0
   17a98:	mov	r2, #5
   17a9c:	movt	r1, #1
   17aa0:	bl	11450 <dcgettext@plt>
   17aa4:	movw	r2, #43923	; 0xab93
   17aa8:	mov	r1, r0
   17aac:	mov	r0, #1
   17ab0:	movt	r2, #1
   17ab4:	bl	11600 <__printf_chk@plt>
   17ab8:	movw	r1, #43945	; 0xaba9
   17abc:	mov	r0, #0
   17ac0:	mov	r2, #5
   17ac4:	movt	r1, #1
   17ac8:	bl	11450 <dcgettext@plt>
   17acc:	movw	r2, #40747	; 0x9f2b
   17ad0:	movw	r3, #41460	; 0xa1f4
   17ad4:	mov	r1, r0
   17ad8:	mov	r0, #1
   17adc:	movt	r2, #1
   17ae0:	movt	r3, #1
   17ae4:	bl	11600 <__printf_chk@plt>
   17ae8:	movw	r1, #43965	; 0xabbd
   17aec:	mov	r0, #0
   17af0:	mov	r2, #5
   17af4:	movt	r1, #1
   17af8:	bl	11450 <dcgettext@plt>
   17afc:	movw	r2, #44004	; 0xabe4
   17b00:	mov	r1, r0
   17b04:	mov	r0, #1
   17b08:	movt	r2, #1
   17b0c:	pop	{fp, lr}
   17b10:	b	11600 <__printf_chk@plt>
   17b14:	push	{fp, lr}
   17b18:	mov	fp, sp
   17b1c:	bl	116cc <aligned_alloc@plt>
   17b20:	cmp	r0, #0
   17b24:	popne	{fp, pc}
   17b28:	bl	18104 <__assert_fail@plt+0x69f0>
   17b2c:	push	{r4, r5, r6, sl, fp, lr}
   17b30:	add	fp, sp, #16
   17b34:	mov	r4, r2
   17b38:	mov	r5, r1
   17b3c:	mov	r6, r0
   17b40:	bl	190d8 <__assert_fail@plt+0x79c4>
   17b44:	cmp	r0, #0
   17b48:	popne	{r4, r5, r6, sl, fp, pc}
   17b4c:	cmp	r6, #0
   17b50:	beq	17b64 <__assert_fail@plt+0x6450>
   17b54:	cmp	r5, #0
   17b58:	cmpne	r4, #0
   17b5c:	bne	17b64 <__assert_fail@plt+0x6450>
   17b60:	pop	{r4, r5, r6, sl, fp, pc}
   17b64:	bl	18104 <__assert_fail@plt+0x69f0>
   17b68:	push	{r4, r5, r6, sl, fp, lr}
   17b6c:	add	fp, sp, #16
   17b70:	mov	r4, r2
   17b74:	mov	r5, r1
   17b78:	mov	r6, r0
   17b7c:	bl	190d8 <__assert_fail@plt+0x79c4>
   17b80:	cmp	r0, #0
   17b84:	popne	{r4, r5, r6, sl, fp, pc}
   17b88:	cmp	r6, #0
   17b8c:	beq	17ba0 <__assert_fail@plt+0x648c>
   17b90:	cmp	r5, #0
   17b94:	cmpne	r4, #0
   17b98:	bne	17ba0 <__assert_fail@plt+0x648c>
   17b9c:	pop	{r4, r5, r6, sl, fp, pc}
   17ba0:	bl	18104 <__assert_fail@plt+0x69f0>
   17ba4:	push	{fp, lr}
   17ba8:	mov	fp, sp
   17bac:	bl	18f38 <__assert_fail@plt+0x7824>
   17bb0:	cmp	r0, #0
   17bb4:	popne	{fp, pc}
   17bb8:	bl	18104 <__assert_fail@plt+0x69f0>
   17bbc:	push	{fp, lr}
   17bc0:	mov	fp, sp
   17bc4:	bl	18f38 <__assert_fail@plt+0x7824>
   17bc8:	cmp	r0, #0
   17bcc:	popne	{fp, pc}
   17bd0:	bl	18104 <__assert_fail@plt+0x69f0>
   17bd4:	push	{fp, lr}
   17bd8:	mov	fp, sp
   17bdc:	bl	18f38 <__assert_fail@plt+0x7824>
   17be0:	cmp	r0, #0
   17be4:	popne	{fp, pc}
   17be8:	bl	18104 <__assert_fail@plt+0x69f0>
   17bec:	push	{r4, r5, fp, lr}
   17bf0:	add	fp, sp, #8
   17bf4:	mov	r4, r1
   17bf8:	mov	r5, r0
   17bfc:	bl	18f68 <__assert_fail@plt+0x7854>
   17c00:	cmp	r0, #0
   17c04:	popne	{r4, r5, fp, pc}
   17c08:	cmp	r5, #0
   17c0c:	beq	17c1c <__assert_fail@plt+0x6508>
   17c10:	cmp	r4, #0
   17c14:	bne	17c1c <__assert_fail@plt+0x6508>
   17c18:	pop	{r4, r5, fp, pc}
   17c1c:	bl	18104 <__assert_fail@plt+0x69f0>
   17c20:	push	{fp, lr}
   17c24:	mov	fp, sp
   17c28:	cmp	r1, #0
   17c2c:	orreq	r1, r1, #1
   17c30:	bl	18f68 <__assert_fail@plt+0x7854>
   17c34:	cmp	r0, #0
   17c38:	popne	{fp, pc}
   17c3c:	bl	18104 <__assert_fail@plt+0x69f0>
   17c40:	push	{fp, lr}
   17c44:	mov	fp, sp
   17c48:	clz	r3, r2
   17c4c:	lsr	ip, r3, #5
   17c50:	clz	r3, r1
   17c54:	lsr	r3, r3, #5
   17c58:	orrs	r3, r3, ip
   17c5c:	movwne	r1, #1
   17c60:	movwne	r2, #1
   17c64:	bl	190d8 <__assert_fail@plt+0x79c4>
   17c68:	cmp	r0, #0
   17c6c:	popne	{fp, pc}
   17c70:	bl	18104 <__assert_fail@plt+0x69f0>
   17c74:	push	{fp, lr}
   17c78:	mov	fp, sp
   17c7c:	mov	r2, r1
   17c80:	mov	r1, r0
   17c84:	mov	r0, #0
   17c88:	bl	190d8 <__assert_fail@plt+0x79c4>
   17c8c:	cmp	r0, #0
   17c90:	popne	{fp, pc}
   17c94:	bl	18104 <__assert_fail@plt+0x69f0>
   17c98:	push	{fp, lr}
   17c9c:	mov	fp, sp
   17ca0:	mov	r2, r1
   17ca4:	mov	r1, r0
   17ca8:	clz	r0, r2
   17cac:	clz	r3, r1
   17cb0:	lsr	r0, r0, #5
   17cb4:	lsr	r3, r3, #5
   17cb8:	orrs	r0, r3, r0
   17cbc:	movwne	r1, #1
   17cc0:	movwne	r2, #1
   17cc4:	mov	r0, #0
   17cc8:	bl	190d8 <__assert_fail@plt+0x79c4>
   17ccc:	cmp	r0, #0
   17cd0:	popne	{fp, pc}
   17cd4:	bl	18104 <__assert_fail@plt+0x69f0>
   17cd8:	push	{r4, r5, r6, sl, fp, lr}
   17cdc:	add	fp, sp, #16
   17ce0:	ldr	r5, [r1]
   17ce4:	mov	r4, r1
   17ce8:	mov	r6, r0
   17cec:	cmp	r0, #0
   17cf0:	beq	17d08 <__assert_fail@plt+0x65f4>
   17cf4:	mov	r0, #1
   17cf8:	add	r0, r0, r5, lsr #1
   17cfc:	adds	r5, r5, r0
   17d00:	bcc	17d10 <__assert_fail@plt+0x65fc>
   17d04:	b	17d4c <__assert_fail@plt+0x6638>
   17d08:	cmp	r5, #0
   17d0c:	movweq	r5, #64	; 0x40
   17d10:	mov	r0, r6
   17d14:	mov	r1, r5
   17d18:	mov	r2, #1
   17d1c:	bl	190d8 <__assert_fail@plt+0x79c4>
   17d20:	cmp	r5, #0
   17d24:	mov	r1, r5
   17d28:	movwne	r1, #1
   17d2c:	cmp	r0, #0
   17d30:	bne	17d44 <__assert_fail@plt+0x6630>
   17d34:	clz	r2, r6
   17d38:	lsr	r2, r2, #5
   17d3c:	orrs	r1, r2, r1
   17d40:	bne	17d4c <__assert_fail@plt+0x6638>
   17d44:	str	r5, [r4]
   17d48:	pop	{r4, r5, r6, sl, fp, pc}
   17d4c:	bl	18104 <__assert_fail@plt+0x69f0>
   17d50:	push	{r4, r5, r6, r7, fp, lr}
   17d54:	add	fp, sp, #16
   17d58:	ldr	r5, [r1]
   17d5c:	mov	r6, r2
   17d60:	mov	r4, r1
   17d64:	mov	r7, r0
   17d68:	cmp	r0, #0
   17d6c:	beq	17d84 <__assert_fail@plt+0x6670>
   17d70:	mov	r0, #1
   17d74:	add	r0, r0, r5, lsr #1
   17d78:	adds	r5, r5, r0
   17d7c:	bcc	17d9c <__assert_fail@plt+0x6688>
   17d80:	b	17dd0 <__assert_fail@plt+0x66bc>
   17d84:	cmp	r5, #0
   17d88:	bne	17d9c <__assert_fail@plt+0x6688>
   17d8c:	mov	r0, #64	; 0x40
   17d90:	cmp	r6, #64	; 0x40
   17d94:	udiv	r5, r0, r6
   17d98:	addhi	r5, r5, #1
   17d9c:	mov	r0, r7
   17da0:	mov	r1, r5
   17da4:	mov	r2, r6
   17da8:	bl	190d8 <__assert_fail@plt+0x79c4>
   17dac:	cmp	r0, #0
   17db0:	bne	17dc8 <__assert_fail@plt+0x66b4>
   17db4:	cmp	r7, #0
   17db8:	beq	17dd0 <__assert_fail@plt+0x66bc>
   17dbc:	cmp	r6, #0
   17dc0:	cmpne	r5, #0
   17dc4:	bne	17dd0 <__assert_fail@plt+0x66bc>
   17dc8:	str	r5, [r4]
   17dcc:	pop	{r4, r5, r6, r7, fp, pc}
   17dd0:	bl	18104 <__assert_fail@plt+0x69f0>
   17dd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17dd8:	add	fp, sp, #24
   17ddc:	mov	r8, r1
   17de0:	ldr	r1, [r1]
   17de4:	mov	r5, r0
   17de8:	add	r0, r1, r1, asr #1
   17dec:	cmp	r0, r1
   17df0:	mvnvs	r0, #-2147483648	; 0x80000000
   17df4:	cmp	r0, r3
   17df8:	mov	r7, r0
   17dfc:	movgt	r7, r3
   17e00:	cmn	r3, #1
   17e04:	movle	r7, r0
   17e08:	ldr	r0, [fp, #8]
   17e0c:	cmn	r0, #1
   17e10:	ble	17e38 <__assert_fail@plt+0x6724>
   17e14:	cmp	r0, #0
   17e18:	beq	17e8c <__assert_fail@plt+0x6778>
   17e1c:	cmn	r7, #1
   17e20:	ble	17e60 <__assert_fail@plt+0x674c>
   17e24:	mvn	r4, #-2147483648	; 0x80000000
   17e28:	udiv	r6, r4, r0
   17e2c:	cmp	r6, r7
   17e30:	bge	17e8c <__assert_fail@plt+0x6778>
   17e34:	b	17e9c <__assert_fail@plt+0x6788>
   17e38:	cmn	r7, #1
   17e3c:	ble	17e7c <__assert_fail@plt+0x6768>
   17e40:	cmn	r0, #1
   17e44:	beq	17e8c <__assert_fail@plt+0x6778>
   17e48:	mov	r6, #-2147483648	; 0x80000000
   17e4c:	mvn	r4, #-2147483648	; 0x80000000
   17e50:	sdiv	r6, r6, r0
   17e54:	cmp	r6, r7
   17e58:	bge	17e8c <__assert_fail@plt+0x6778>
   17e5c:	b	17e9c <__assert_fail@plt+0x6788>
   17e60:	beq	17e8c <__assert_fail@plt+0x6778>
   17e64:	mov	r6, #-2147483648	; 0x80000000
   17e68:	mvn	r4, #-2147483648	; 0x80000000
   17e6c:	sdiv	r6, r6, r7
   17e70:	cmp	r6, r0
   17e74:	bge	17e8c <__assert_fail@plt+0x6778>
   17e78:	b	17e9c <__assert_fail@plt+0x6788>
   17e7c:	mvn	r4, #-2147483648	; 0x80000000
   17e80:	sdiv	r6, r4, r0
   17e84:	cmp	r7, r6
   17e88:	blt	17e9c <__assert_fail@plt+0x6788>
   17e8c:	mul	r6, r7, r0
   17e90:	mov	r4, #64	; 0x40
   17e94:	cmp	r6, #63	; 0x3f
   17e98:	bgt	17ea4 <__assert_fail@plt+0x6790>
   17e9c:	sdiv	r7, r4, r0
   17ea0:	mul	r6, r7, r0
   17ea4:	cmp	r5, #0
   17ea8:	moveq	r4, #0
   17eac:	streq	r4, [r8]
   17eb0:	sub	r4, r7, r1
   17eb4:	cmp	r4, r2
   17eb8:	bge	17f64 <__assert_fail@plt+0x6850>
   17ebc:	add	r7, r1, r2
   17ec0:	mov	r6, #0
   17ec4:	mov	r2, #0
   17ec8:	cmp	r7, r3
   17ecc:	movwgt	r6, #1
   17ed0:	cmn	r3, #1
   17ed4:	movwgt	r2, #1
   17ed8:	cmp	r7, r1
   17edc:	bvs	17f98 <__assert_fail@plt+0x6884>
   17ee0:	ands	r1, r2, r6
   17ee4:	bne	17f98 <__assert_fail@plt+0x6884>
   17ee8:	cmn	r0, #1
   17eec:	ble	17f14 <__assert_fail@plt+0x6800>
   17ef0:	cmp	r0, #0
   17ef4:	beq	17f60 <__assert_fail@plt+0x684c>
   17ef8:	cmn	r7, #1
   17efc:	ble	17f38 <__assert_fail@plt+0x6824>
   17f00:	mvn	r1, #-2147483648	; 0x80000000
   17f04:	udiv	r1, r1, r0
   17f08:	cmp	r1, r7
   17f0c:	bge	17f60 <__assert_fail@plt+0x684c>
   17f10:	b	17f98 <__assert_fail@plt+0x6884>
   17f14:	cmn	r7, #1
   17f18:	ble	17f50 <__assert_fail@plt+0x683c>
   17f1c:	cmn	r0, #1
   17f20:	beq	17f60 <__assert_fail@plt+0x684c>
   17f24:	mov	r1, #-2147483648	; 0x80000000
   17f28:	sdiv	r1, r1, r0
   17f2c:	cmp	r1, r7
   17f30:	bge	17f60 <__assert_fail@plt+0x684c>
   17f34:	b	17f98 <__assert_fail@plt+0x6884>
   17f38:	beq	17f60 <__assert_fail@plt+0x684c>
   17f3c:	mov	r1, #-2147483648	; 0x80000000
   17f40:	sdiv	r1, r1, r7
   17f44:	cmp	r1, r0
   17f48:	bge	17f60 <__assert_fail@plt+0x684c>
   17f4c:	b	17f98 <__assert_fail@plt+0x6884>
   17f50:	mvn	r1, #-2147483648	; 0x80000000
   17f54:	sdiv	r1, r1, r0
   17f58:	cmp	r7, r1
   17f5c:	blt	17f98 <__assert_fail@plt+0x6884>
   17f60:	mul	r6, r7, r0
   17f64:	mov	r0, r5
   17f68:	mov	r1, r6
   17f6c:	bl	18f68 <__assert_fail@plt+0x7854>
   17f70:	cmp	r6, #0
   17f74:	movwne	r6, #1
   17f78:	cmp	r0, #0
   17f7c:	bne	17f90 <__assert_fail@plt+0x687c>
   17f80:	clz	r1, r5
   17f84:	lsr	r1, r1, #5
   17f88:	orrs	r1, r1, r6
   17f8c:	bne	17f98 <__assert_fail@plt+0x6884>
   17f90:	str	r7, [r8]
   17f94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f98:	bl	18104 <__assert_fail@plt+0x69f0>
   17f9c:	push	{fp, lr}
   17fa0:	mov	fp, sp
   17fa4:	mov	r1, #1
   17fa8:	bl	18ee4 <__assert_fail@plt+0x77d0>
   17fac:	cmp	r0, #0
   17fb0:	popne	{fp, pc}
   17fb4:	bl	18104 <__assert_fail@plt+0x69f0>
   17fb8:	push	{fp, lr}
   17fbc:	mov	fp, sp
   17fc0:	bl	18ee4 <__assert_fail@plt+0x77d0>
   17fc4:	cmp	r0, #0
   17fc8:	popne	{fp, pc}
   17fcc:	bl	18104 <__assert_fail@plt+0x69f0>
   17fd0:	push	{fp, lr}
   17fd4:	mov	fp, sp
   17fd8:	mov	r1, #1
   17fdc:	bl	18ee4 <__assert_fail@plt+0x77d0>
   17fe0:	cmp	r0, #0
   17fe4:	popne	{fp, pc}
   17fe8:	bl	18104 <__assert_fail@plt+0x69f0>
   17fec:	push	{fp, lr}
   17ff0:	mov	fp, sp
   17ff4:	bl	18ee4 <__assert_fail@plt+0x77d0>
   17ff8:	cmp	r0, #0
   17ffc:	popne	{fp, pc}
   18000:	bl	18104 <__assert_fail@plt+0x69f0>
   18004:	push	{r4, r5, r6, sl, fp, lr}
   18008:	add	fp, sp, #16
   1800c:	mov	r5, r0
   18010:	mov	r0, r1
   18014:	mov	r4, r1
   18018:	bl	18f38 <__assert_fail@plt+0x7824>
   1801c:	cmp	r0, #0
   18020:	beq	1803c <__assert_fail@plt+0x6928>
   18024:	mov	r1, r5
   18028:	mov	r2, r4
   1802c:	mov	r6, r0
   18030:	bl	11408 <memcpy@plt>
   18034:	mov	r0, r6
   18038:	pop	{r4, r5, r6, sl, fp, pc}
   1803c:	bl	18104 <__assert_fail@plt+0x69f0>
   18040:	push	{r4, r5, r6, sl, fp, lr}
   18044:	add	fp, sp, #16
   18048:	mov	r5, r0
   1804c:	mov	r0, r1
   18050:	mov	r4, r1
   18054:	bl	18f38 <__assert_fail@plt+0x7824>
   18058:	cmp	r0, #0
   1805c:	beq	18078 <__assert_fail@plt+0x6964>
   18060:	mov	r1, r5
   18064:	mov	r2, r4
   18068:	mov	r6, r0
   1806c:	bl	11408 <memcpy@plt>
   18070:	mov	r0, r6
   18074:	pop	{r4, r5, r6, sl, fp, pc}
   18078:	bl	18104 <__assert_fail@plt+0x69f0>
   1807c:	push	{r4, r5, r6, sl, fp, lr}
   18080:	add	fp, sp, #16
   18084:	mov	r5, r0
   18088:	add	r0, r1, #1
   1808c:	mov	r4, r1
   18090:	bl	18f38 <__assert_fail@plt+0x7824>
   18094:	cmp	r0, #0
   18098:	beq	180c0 <__assert_fail@plt+0x69ac>
   1809c:	mov	r6, r0
   180a0:	mov	r0, #0
   180a4:	mov	r1, r5
   180a8:	mov	r2, r4
   180ac:	strb	r0, [r6, r4]
   180b0:	mov	r0, r6
   180b4:	bl	11408 <memcpy@plt>
   180b8:	mov	r0, r6
   180bc:	pop	{r4, r5, r6, sl, fp, pc}
   180c0:	bl	18104 <__assert_fail@plt+0x69f0>
   180c4:	push	{r4, r5, r6, sl, fp, lr}
   180c8:	add	fp, sp, #16
   180cc:	mov	r4, r0
   180d0:	bl	11588 <strlen@plt>
   180d4:	add	r5, r0, #1
   180d8:	mov	r0, r5
   180dc:	bl	18f38 <__assert_fail@plt+0x7824>
   180e0:	cmp	r0, #0
   180e4:	beq	18100 <__assert_fail@plt+0x69ec>
   180e8:	mov	r1, r4
   180ec:	mov	r2, r5
   180f0:	mov	r6, r0
   180f4:	bl	11408 <memcpy@plt>
   180f8:	mov	r0, r6
   180fc:	pop	{r4, r5, r6, sl, fp, pc}
   18100:	bl	18104 <__assert_fail@plt+0x69f0>
   18104:	push	{fp, lr}
   18108:	mov	fp, sp
   1810c:	movw	r0, #45408	; 0xb160
   18110:	movw	r1, #44080	; 0xac30
   18114:	mov	r2, #5
   18118:	movt	r0, #2
   1811c:	movt	r1, #1
   18120:	ldr	r4, [r0]
   18124:	mov	r0, #0
   18128:	bl	11450 <dcgettext@plt>
   1812c:	movw	r2, #42634	; 0xa68a
   18130:	mov	r3, r0
   18134:	mov	r0, r4
   18138:	mov	r1, #0
   1813c:	movt	r2, #1
   18140:	bl	11504 <error@plt>
   18144:	bl	116f0 <abort@plt>
   18148:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1814c:	add	fp, sp, #24
   18150:	sub	sp, sp, #16
   18154:	mov	r8, r0
   18158:	ldr	r0, [fp, #16]
   1815c:	mov	r5, r3
   18160:	mov	r6, r2
   18164:	mov	r2, r1
   18168:	add	r3, sp, #8
   1816c:	mov	r1, #0
   18170:	str	r0, [sp]
   18174:	mov	r0, r8
   18178:	bl	18244 <__assert_fail@plt+0x6b30>
   1817c:	cmp	r0, #0
   18180:	bne	1820c <__assert_fail@plt+0x6af8>
   18184:	ldr	r4, [sp, #8]
   18188:	ldr	r7, [sp, #12]
   1818c:	subs	r0, r4, r6
   18190:	sbcs	r0, r7, r5
   18194:	bcc	181b8 <__assert_fail@plt+0x6aa4>
   18198:	ldr	r1, [fp, #8]
   1819c:	ldr	r0, [fp, #12]
   181a0:	subs	r1, r1, r4
   181a4:	sbcs	r0, r0, r7
   181a8:	movcs	r0, r4
   181ac:	movcs	r1, r7
   181b0:	subcs	sp, fp, #24
   181b4:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   181b8:	bl	115d0 <__errno_location@plt>
   181bc:	subs	r1, r4, #1073741824	; 0x40000000
   181c0:	sbcs	r1, r7, #0
   181c4:	movcc	r1, #34	; 0x22
   181c8:	movcs	r1, #75	; 0x4b
   181cc:	str	r1, [r0]
   181d0:	ldr	r6, [r0]
   181d4:	ldr	r4, [fp, #24]
   181d8:	ldr	r5, [fp, #20]
   181dc:	mov	r0, r8
   181e0:	bl	1703c <__assert_fail@plt+0x5928>
   181e4:	subs	r1, r6, #22
   181e8:	movw	r2, #40853	; 0x9f95
   181ec:	str	r0, [sp]
   181f0:	mov	r3, r5
   181f4:	movne	r1, r6
   181f8:	cmp	r4, #0
   181fc:	movt	r2, #1
   18200:	movweq	r4, #1
   18204:	mov	r0, r4
   18208:	bl	11504 <error@plt>
   1820c:	cmp	r0, #1
   18210:	beq	18228 <__assert_fail@plt+0x6b14>
   18214:	cmp	r0, #3
   18218:	bne	18234 <__assert_fail@plt+0x6b20>
   1821c:	bl	115d0 <__errno_location@plt>
   18220:	mov	r1, #0
   18224:	b	181cc <__assert_fail@plt+0x6ab8>
   18228:	bl	115d0 <__errno_location@plt>
   1822c:	mov	r1, #75	; 0x4b
   18230:	b	181cc <__assert_fail@plt+0x6ab8>
   18234:	bl	115d0 <__errno_location@plt>
   18238:	b	181d0 <__assert_fail@plt+0x6abc>
   1823c:	mov	r1, #10
   18240:	b	18148 <__assert_fail@plt+0x6a34>
   18244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18248:	add	fp, sp, #28
   1824c:	sub	sp, sp, #44	; 0x2c
   18250:	cmp	r2, #37	; 0x25
   18254:	bcs	18ec4 <__assert_fail@plt+0x77b0>
   18258:	ldr	sl, [fp, #8]
   1825c:	mov	r6, r2
   18260:	mov	r7, r1
   18264:	mov	r4, r0
   18268:	str	r3, [sp, #36]	; 0x24
   1826c:	bl	115d0 <__errno_location@plt>
   18270:	mov	r5, r0
   18274:	mov	r0, #0
   18278:	str	r0, [r5]
   1827c:	bl	11570 <__ctype_b_loc@plt>
   18280:	ldr	r1, [r0]
   18284:	mov	r2, r4
   18288:	ldrb	r0, [r2], #1
   1828c:	add	r3, r1, r0, lsl #1
   18290:	ldrb	r3, [r3, #1]
   18294:	tst	r3, #32
   18298:	bne	18288 <__assert_fail@plt+0x6b74>
   1829c:	sub	r9, fp, #32
   182a0:	cmp	r7, #0
   182a4:	mov	r8, #4
   182a8:	movne	r9, r7
   182ac:	cmp	r0, #45	; 0x2d
   182b0:	beq	18eb8 <__assert_fail@plt+0x77a4>
   182b4:	mov	r0, r4
   182b8:	mov	r1, r9
   182bc:	mov	r2, r6
   182c0:	mov	r3, #0
   182c4:	bl	11414 <__strtoull_internal@plt>
   182c8:	mov	r7, r1
   182cc:	ldr	r1, [r9]
   182d0:	cmp	r1, r4
   182d4:	beq	18300 <__assert_fail@plt+0x6bec>
   182d8:	mov	r6, r0
   182dc:	ldr	r0, [r5]
   182e0:	cmp	r0, #0
   182e4:	beq	1833c <__assert_fail@plt+0x6c28>
   182e8:	cmp	r0, #34	; 0x22
   182ec:	bne	18eb8 <__assert_fail@plt+0x77a4>
   182f0:	mov	r8, #1
   182f4:	cmp	sl, #0
   182f8:	bne	18348 <__assert_fail@plt+0x6c34>
   182fc:	b	18eb0 <__assert_fail@plt+0x779c>
   18300:	cmp	sl, #0
   18304:	beq	18eb8 <__assert_fail@plt+0x77a4>
   18308:	mov	r5, r1
   1830c:	ldrb	r1, [r4]
   18310:	cmp	r1, #0
   18314:	beq	18eb8 <__assert_fail@plt+0x77a4>
   18318:	mov	r0, sl
   1831c:	bl	115a0 <strchr@plt>
   18320:	cmp	r0, #0
   18324:	beq	18eb8 <__assert_fail@plt+0x77a4>
   18328:	mov	r1, r5
   1832c:	mov	r8, #0
   18330:	mov	r6, #1
   18334:	mov	r7, #0
   18338:	b	18348 <__assert_fail@plt+0x6c34>
   1833c:	mov	r8, r0
   18340:	cmp	sl, #0
   18344:	beq	18eb0 <__assert_fail@plt+0x779c>
   18348:	ldrb	r4, [r1]
   1834c:	cmp	r4, #0
   18350:	beq	18eb0 <__assert_fail@plt+0x779c>
   18354:	str	r1, [sp, #32]
   18358:	mov	r0, sl
   1835c:	mov	r1, r4
   18360:	bl	115a0 <strchr@plt>
   18364:	cmp	r0, #0
   18368:	beq	18630 <__assert_fail@plt+0x6f1c>
   1836c:	sub	r0, r4, #69	; 0x45
   18370:	mov	r1, #1
   18374:	mov	r3, #0
   18378:	mov	r5, #1024	; 0x400
   1837c:	cmp	r0, #47	; 0x2f
   18380:	str	r1, [sp, #28]
   18384:	bhi	18488 <__assert_fail@plt+0x6d74>
   18388:	add	r1, pc, #0
   1838c:	ldr	pc, [r1, r0, lsl #2]
   18390:	andeq	r8, r1, r0, asr r4
   18394:	andeq	r8, r1, r8, lsl #9
   18398:	andeq	r8, r1, r0, asr r4
   1839c:	andeq	r8, r1, r8, lsl #9
   183a0:	andeq	r8, r1, r8, lsl #9
   183a4:	andeq	r8, r1, r8, lsl #9
   183a8:	andeq	r8, r1, r0, asr r4
   183ac:	andeq	r8, r1, r8, lsl #9
   183b0:	andeq	r8, r1, r0, asr r4
   183b4:	andeq	r8, r1, r8, lsl #9
   183b8:	andeq	r8, r1, r8, lsl #9
   183bc:	andeq	r8, r1, r0, asr r4
   183c0:	andeq	r8, r1, r8, lsl #9
   183c4:	andeq	r8, r1, r8, lsl #9
   183c8:	andeq	r8, r1, r8, lsl #9
   183cc:	andeq	r8, r1, r0, asr r4
   183d0:	andeq	r8, r1, r8, lsl #9
   183d4:	andeq	r8, r1, r8, lsl #9
   183d8:	andeq	r8, r1, r8, lsl #9
   183dc:	andeq	r8, r1, r8, lsl #9
   183e0:	andeq	r8, r1, r0, asr r4
   183e4:	andeq	r8, r1, r0, asr r4
   183e8:	andeq	r8, r1, r8, lsl #9
   183ec:	andeq	r8, r1, r8, lsl #9
   183f0:	andeq	r8, r1, r8, lsl #9
   183f4:	andeq	r8, r1, r8, lsl #9
   183f8:	andeq	r8, r1, r8, lsl #9
   183fc:	andeq	r8, r1, r8, lsl #9
   18400:	andeq	r8, r1, r8, lsl #9
   18404:	andeq	r8, r1, r8, lsl #9
   18408:	andeq	r8, r1, r8, lsl #9
   1840c:	andeq	r8, r1, r8, lsl #9
   18410:	andeq	r8, r1, r8, lsl #9
   18414:	andeq	r8, r1, r8, lsl #9
   18418:	andeq	r8, r1, r0, asr r4
   1841c:	andeq	r8, r1, r8, lsl #9
   18420:	andeq	r8, r1, r8, lsl #9
   18424:	andeq	r8, r1, r8, lsl #9
   18428:	andeq	r8, r1, r0, asr r4
   1842c:	andeq	r8, r1, r8, lsl #9
   18430:	andeq	r8, r1, r0, asr r4
   18434:	andeq	r8, r1, r8, lsl #9
   18438:	andeq	r8, r1, r8, lsl #9
   1843c:	andeq	r8, r1, r8, lsl #9
   18440:	andeq	r8, r1, r8, lsl #9
   18444:	andeq	r8, r1, r8, lsl #9
   18448:	andeq	r8, r1, r8, lsl #9
   1844c:	andeq	r8, r1, r0, asr r4
   18450:	mov	r0, sl
   18454:	mov	r1, #48	; 0x30
   18458:	bl	115a0 <strchr@plt>
   1845c:	cmp	r0, #0
   18460:	beq	18484 <__assert_fail@plt+0x6d70>
   18464:	ldr	r1, [sp, #32]
   18468:	ldrb	r0, [r1, #1]
   1846c:	cmp	r0, #66	; 0x42
   18470:	cmpne	r0, #68	; 0x44
   18474:	bne	1863c <__assert_fail@plt+0x6f28>
   18478:	mov	r5, #1000	; 0x3e8
   1847c:	mov	r0, #2
   18480:	str	r0, [sp, #28]
   18484:	mov	r3, #0
   18488:	sub	r0, r4, #66	; 0x42
   1848c:	cmp	r0, #53	; 0x35
   18490:	bhi	18630 <__assert_fail@plt+0x6f1c>
   18494:	add	r1, pc, #0
   18498:	ldr	pc, [r1, r0, lsl #2]
   1849c:			; <UNDEFINED> instruction: 0x000189b8
   184a0:	andeq	r8, r1, r0, lsr r6
   184a4:	andeq	r8, r1, r0, lsr r6
   184a8:	andeq	r8, r1, r0, ror #19
   184ac:	andeq	r8, r1, r0, lsr r6
   184b0:	andeq	r8, r1, r4, ror r5
   184b4:	andeq	r8, r1, r0, lsr r6
   184b8:	andeq	r8, r1, r0, lsr r6
   184bc:	andeq	r8, r1, r0, lsr r6
   184c0:	andeq	r8, r1, r0, ror #12
   184c4:	andeq	r8, r1, r0, lsr r6
   184c8:	andeq	r8, r1, r8, lsr #13
   184cc:	andeq	r8, r1, r0, lsr r6
   184d0:	andeq	r8, r1, r0, lsr r6
   184d4:	andeq	r8, r1, r8, lsr fp
   184d8:	andeq	r8, r1, r0, lsr r6
   184dc:	andeq	r8, r1, r0, lsr r6
   184e0:	andeq	r8, r1, r0, lsr r6
   184e4:	andeq	r8, r1, r4, lsr r7
   184e8:	andeq	r8, r1, r0, lsr r6
   184ec:	andeq	r8, r1, r0, lsr r6
   184f0:	andeq	r8, r1, r0, lsr r6
   184f4:	andeq	r8, r1, r0, lsr r6
   184f8:	andeq	r8, r1, r0, ror #24
   184fc:	andeq	r8, r1, ip, lsl r8
   18500:	andeq	r8, r1, r0, lsr r6
   18504:	andeq	r8, r1, r0, lsr r6
   18508:	andeq	r8, r1, r0, lsr r6
   1850c:	andeq	r8, r1, r0, lsr r6
   18510:	andeq	r8, r1, r0, lsr r6
   18514:	andeq	r8, r1, r0, lsr r6
   18518:	andeq	r8, r1, r0, lsr r6
   1851c:	andeq	r8, r1, r8, lsr lr
   18520:	muleq	r1, r0, lr
   18524:	andeq	r8, r1, r0, lsr r6
   18528:	andeq	r8, r1, r0, lsr r6
   1852c:	andeq	r8, r1, r0, lsr r6
   18530:	andeq	r8, r1, r4, ror r5
   18534:	andeq	r8, r1, r0, lsr r6
   18538:	andeq	r8, r1, r0, lsr r6
   1853c:	andeq	r8, r1, r0, lsr r6
   18540:	andeq	r8, r1, r0, ror #12
   18544:	andeq	r8, r1, r0, lsr r6
   18548:	andeq	r8, r1, r8, lsr #13
   1854c:	andeq	r8, r1, r0, lsr r6
   18550:	andeq	r8, r1, r0, lsr r6
   18554:	andeq	r8, r1, r0, lsr r6
   18558:	andeq	r8, r1, r0, lsr r6
   1855c:	andeq	r8, r1, r0, lsr r6
   18560:	andeq	r8, r1, r0, lsr r6
   18564:	andeq	r8, r1, r4, lsr r7
   18568:	andeq	r8, r1, r0, lsr r6
   1856c:	andeq	r8, r1, r0, lsr r6
   18570:	andeq	r8, r1, ip, ror #28
   18574:	mvn	r0, #0
   18578:	mvn	r1, #0
   1857c:	mov	r2, r5
   18580:	mov	sl, r3
   18584:	bl	19408 <__assert_fail@plt+0x7cf4>
   18588:	subs	r3, r0, r6
   1858c:	mov	lr, #0
   18590:	umull	r4, r2, r6, r5
   18594:	str	r1, [sp, #20]
   18598:	sbcs	r3, r1, r7
   1859c:	mla	ip, r6, sl, r2
   185a0:	mov	r2, r1
   185a4:	movwcc	lr, #1
   185a8:	mla	r7, r7, r5, ip
   185ac:	mov	r2, #0
   185b0:	cmp	lr, #0
   185b4:	mvnne	r4, #0
   185b8:	mvnne	r7, #0
   185bc:	subs	r6, r0, r4
   185c0:	sbcs	r6, r1, r7
   185c4:	movwcc	r2, #1
   185c8:	umull	r3, r6, r4, r5
   185cc:	cmp	r2, #0
   185d0:	str	r6, [sp, #16]
   185d4:	mvnne	r3, #0
   185d8:	cmp	r2, #0
   185dc:	umull	r6, ip, r3, r5
   185e0:	mla	r1, r3, sl, ip
   185e4:	ldr	ip, [sp, #16]
   185e8:	str	r1, [sp, #12]
   185ec:	mla	r4, r4, sl, ip
   185f0:	mla	r4, r7, r5, r4
   185f4:	ldr	r7, [sp, #12]
   185f8:	mvnne	r4, #0
   185fc:	subs	r0, r0, r3
   18600:	ldr	r0, [sp, #20]
   18604:	mla	r7, r4, r5, r7
   18608:	sbcs	r0, r0, r4
   1860c:	mov	r0, #0
   18610:	movwcc	r0, #1
   18614:	cmp	r0, #0
   18618:	mov	r1, r0
   1861c:	orr	r0, lr, r2
   18620:	mvnne	r7, #0
   18624:	mvnne	r6, #0
   18628:	orr	r3, r0, r1
   1862c:	b	18e90 <__assert_fail@plt+0x777c>
   18630:	ldr	r0, [sp, #36]	; 0x24
   18634:	orr	r8, r8, #2
   18638:	b	18eb4 <__assert_fail@plt+0x77a0>
   1863c:	cmp	r0, #105	; 0x69
   18640:	mov	r3, #0
   18644:	bne	18488 <__assert_fail@plt+0x6d74>
   18648:	ldrb	r0, [r1, #2]
   1864c:	mov	r1, #1
   18650:	cmp	r0, #66	; 0x42
   18654:	movweq	r1, #3
   18658:	str	r1, [sp, #28]
   1865c:	b	18488 <__assert_fail@plt+0x6d74>
   18660:	mvn	r0, #0
   18664:	mvn	r1, #0
   18668:	mov	r2, r5
   1866c:	mov	r4, r3
   18670:	bl	19408 <__assert_fail@plt+0x7cf4>
   18674:	subs	r0, r0, r6
   18678:	mov	r2, #0
   1867c:	sbcs	r0, r1, r7
   18680:	movwcc	r2, #1
   18684:	umull	r0, r1, r6, r5
   18688:	mla	r1, r6, r4, r1
   1868c:	cmp	r2, #0
   18690:	mov	r3, r2
   18694:	mla	r7, r7, r5, r1
   18698:	mvnne	r0, #0
   1869c:	mvnne	r7, #0
   186a0:	mov	r6, r0
   186a4:	b	18e90 <__assert_fail@plt+0x777c>
   186a8:	mvn	r0, #0
   186ac:	mvn	r1, #0
   186b0:	mov	r2, r5
   186b4:	str	r3, [sp, #24]
   186b8:	bl	19408 <__assert_fail@plt+0x7cf4>
   186bc:	subs	r3, r0, r6
   186c0:	mov	ip, r0
   186c4:	umull	r4, r0, r6, r5
   186c8:	mov	sl, #0
   186cc:	sbcs	r3, r1, r7
   186d0:	str	r0, [sp, #20]
   186d4:	ldr	r0, [sp, #24]
   186d8:	mov	r3, #0
   186dc:	movwcc	r3, #1
   186e0:	cmp	r3, #0
   186e4:	mvnne	r4, #0
   186e8:	cmp	r3, #0
   186ec:	umull	lr, r2, r4, r5
   186f0:	mla	r2, r4, r0, r2
   186f4:	str	r2, [sp, #16]
   186f8:	ldr	r2, [sp, #20]
   186fc:	mla	r6, r6, r0, r2
   18700:	ldr	r0, [sp, #16]
   18704:	mla	r6, r7, r5, r6
   18708:	mvnne	r6, #0
   1870c:	mla	r7, r6, r5, r0
   18710:	subs	r0, ip, r4
   18714:	sbcs	r0, r1, r6
   18718:	movwcc	sl, #1
   1871c:	cmp	sl, #0
   18720:	orr	r3, r3, sl
   18724:	mvnne	lr, #0
   18728:	mvnne	r7, #0
   1872c:	mov	r6, lr
   18730:	b	18e90 <__assert_fail@plt+0x777c>
   18734:	mvn	r0, #0
   18738:	mvn	r1, #0
   1873c:	mov	r2, r5
   18740:	mov	sl, r3
   18744:	bl	19408 <__assert_fail@plt+0x7cf4>
   18748:	subs	r3, r0, r6
   1874c:	mov	ip, r1
   18750:	umull	r2, lr, r6, r5
   18754:	str	r0, [sp, #20]
   18758:	sbcs	r3, r1, r7
   1875c:	mov	r1, #0
   18760:	mla	r6, r6, sl, lr
   18764:	mov	lr, #0
   18768:	str	ip, [sp, #16]
   1876c:	movwcc	r1, #1
   18770:	mla	r7, r7, r5, r6
   18774:	cmp	r1, #0
   18778:	mvnne	r2, #0
   1877c:	cmp	r1, #0
   18780:	umull	r3, r4, r2, r5
   18784:	mvnne	r7, #0
   18788:	mla	r4, r2, sl, r4
   1878c:	subs	r2, r0, r2
   18790:	sbcs	r2, ip, r7
   18794:	mla	r4, r7, r5, r4
   18798:	movwcc	lr, #1
   1879c:	mov	r2, #0
   187a0:	cmp	lr, #0
   187a4:	mvnne	r3, #0
   187a8:	mvnne	r4, #0
   187ac:	subs	r7, r0, r3
   187b0:	mov	r0, r5
   187b4:	sbcs	r7, ip, r4
   187b8:	movwcc	r2, #1
   187bc:	umull	r5, r7, r3, r5
   187c0:	cmp	r2, #0
   187c4:	mla	r3, r3, sl, r7
   187c8:	mvnne	r5, #0
   187cc:	mla	r3, r4, r0, r3
   187d0:	cmp	r2, #0
   187d4:	umull	r6, ip, r5, r0
   187d8:	mvnne	r3, #0
   187dc:	mla	ip, r5, sl, ip
   187e0:	mla	r7, r3, r0, ip
   187e4:	ldr	r0, [sp, #20]
   187e8:	subs	r0, r0, r5
   187ec:	ldr	r0, [sp, #16]
   187f0:	sbcs	r0, r0, r3
   187f4:	mov	r0, #0
   187f8:	movwcc	r0, #1
   187fc:	cmp	r0, #0
   18800:	mov	r3, r0
   18804:	orr	r0, r1, lr
   18808:	orr	r0, r0, r2
   1880c:	mvnne	r7, #0
   18810:	mvnne	r6, #0
   18814:	orr	r3, r0, r3
   18818:	b	18e90 <__assert_fail@plt+0x777c>
   1881c:	mvn	r0, #0
   18820:	mvn	r1, #0
   18824:	mov	r2, r5
   18828:	mov	r4, r3
   1882c:	str	r3, [sp, #24]
   18830:	bl	19408 <__assert_fail@plt+0x7cf4>
   18834:	umull	r3, r2, r6, r5
   18838:	mla	r2, r6, r4, r2
   1883c:	subs	r6, r0, r6
   18840:	sbcs	r6, r1, r7
   18844:	mla	ip, r7, r5, r2
   18848:	ldr	r2, [sp, #24]
   1884c:	mov	r6, #0
   18850:	movwcc	r6, #1
   18854:	cmp	r6, #0
   18858:	str	r6, [sp, #20]
   1885c:	mov	r6, #0
   18860:	mvnne	r3, #0
   18864:	mvnne	ip, #0
   18868:	subs	r4, r0, r3
   1886c:	umull	r7, lr, r3, r5
   18870:	sbcs	r4, r1, ip
   18874:	mla	r3, r3, r2, lr
   18878:	movwcc	r6, #1
   1887c:	cmp	r6, #0
   18880:	str	r6, [sp, #16]
   18884:	mvnne	r7, #0
   18888:	cmp	r6, #0
   1888c:	umull	sl, r4, r7, r5
   18890:	mla	r4, r7, r2, r4
   18894:	mla	r2, ip, r5, r3
   18898:	mov	ip, #0
   1889c:	mvnne	r2, #0
   188a0:	subs	r3, r0, r7
   188a4:	mla	r6, r2, r5, r4
   188a8:	mov	r4, r0
   188ac:	sbcs	r2, r1, r2
   188b0:	mov	r0, #0
   188b4:	movwcc	r0, #1
   188b8:	mov	r3, r4
   188bc:	cmp	r0, #0
   188c0:	str	r0, [sp, #12]
   188c4:	mov	r0, r1
   188c8:	str	r3, [sp, #4]
   188cc:	mvnne	sl, #0
   188d0:	mvnne	r6, #0
   188d4:	str	r0, [sp, #8]
   188d8:	subs	r2, r4, sl
   188dc:	ldr	r4, [sp, #24]
   188e0:	sbcs	r2, r1, r6
   188e4:	movwcc	ip, #1
   188e8:	umull	r7, r2, sl, r5
   188ec:	cmp	ip, #0
   188f0:	mla	r2, sl, r4, r2
   188f4:	mvnne	r7, #0
   188f8:	cmp	ip, #0
   188fc:	mov	sl, #0
   18900:	umull	r1, lr, r7, r5
   18904:	mla	r2, r6, r5, r2
   18908:	mvnne	r2, #0
   1890c:	mla	lr, r7, r4, lr
   18910:	subs	r6, r3, r7
   18914:	mla	lr, r2, r5, lr
   18918:	sbcs	r2, r0, r2
   1891c:	movwcc	sl, #1
   18920:	mov	r2, #0
   18924:	cmp	sl, #0
   18928:	mvnne	r1, #0
   1892c:	mvnne	lr, #0
   18930:	subs	r6, r3, r1
   18934:	ldr	r3, [sp, #24]
   18938:	sbcs	r6, r0, lr
   1893c:	umull	r0, r7, r1, r5
   18940:	movwcc	r2, #1
   18944:	cmp	r2, #0
   18948:	mvnne	r0, #0
   1894c:	mla	r1, r1, r3, r7
   18950:	cmp	r2, #0
   18954:	umull	r6, r4, r0, r5
   18958:	mla	r1, lr, r5, r1
   1895c:	mla	r4, r0, r3, r4
   18960:	ldr	r3, [sp, #4]
   18964:	mvnne	r1, #0
   18968:	mla	r7, r1, r5, r4
   1896c:	ldr	r5, [sp, #16]
   18970:	subs	r0, r3, r0
   18974:	ldr	r0, [sp, #8]
   18978:	sbcs	r0, r0, r1
   1897c:	mov	r0, #0
   18980:	movwcc	r0, #1
   18984:	cmp	r0, #0
   18988:	mov	r1, r0
   1898c:	ldr	r0, [sp, #20]
   18990:	mvnne	r7, #0
   18994:	mvnne	r6, #0
   18998:	orr	r0, r0, r5
   1899c:	ldr	r5, [sp, #12]
   189a0:	orr	r0, r0, r5
   189a4:	orr	r0, r0, ip
   189a8:	orr	r0, r0, sl
   189ac:	orr	r0, r0, r2
   189b0:	orr	r0, r0, r1
   189b4:	b	18e30 <__assert_fail@plt+0x771c>
   189b8:	mov	r1, #0
   189bc:	lsl	r2, r7, #10
   189c0:	lsl	r0, r6, #10
   189c4:	lsr	r3, r7, #22
   189c8:	cmp	r1, r7, lsr #22
   189cc:	orr	r2, r2, r6, lsr #22
   189d0:	mvnne	r0, #0
   189d4:	movwne	r3, #1
   189d8:	cmp	r1, r7, lsr #22
   189dc:	b	18e5c <__assert_fail@plt+0x7748>
   189e0:	mvn	r0, #0
   189e4:	mvn	r1, #0
   189e8:	mov	r2, r5
   189ec:	mov	sl, r3
   189f0:	bl	19408 <__assert_fail@plt+0x7cf4>
   189f4:	subs	r2, r0, r6
   189f8:	mov	ip, r0
   189fc:	mov	r0, #0
   18a00:	sbcs	r2, r1, r7
   18a04:	movwcc	r0, #1
   18a08:	umull	r4, r2, r6, r5
   18a0c:	cmp	r0, #0
   18a10:	mla	r2, r6, sl, r2
   18a14:	str	r0, [sp, #20]
   18a18:	mvnne	r4, #0
   18a1c:	cmp	r0, #0
   18a20:	mla	r2, r7, r5, r2
   18a24:	mov	r0, #0
   18a28:	umull	lr, r3, r4, r5
   18a2c:	mvnne	r2, #0
   18a30:	mla	r3, r4, sl, r3
   18a34:	mla	r6, r2, r5, r3
   18a38:	subs	r3, ip, r4
   18a3c:	sbcs	r2, r1, r2
   18a40:	mov	r3, r1
   18a44:	movwcc	r0, #1
   18a48:	str	r3, [sp, #8]
   18a4c:	cmp	r0, #0
   18a50:	str	r0, [sp, #16]
   18a54:	mov	r0, ip
   18a58:	mvnne	lr, #0
   18a5c:	mvnne	r6, #0
   18a60:	str	r0, [sp, #12]
   18a64:	subs	r2, ip, lr
   18a68:	umull	r7, r4, lr, r5
   18a6c:	sbcs	r2, r1, r6
   18a70:	mla	r4, lr, sl, r4
   18a74:	mov	r2, #0
   18a78:	mla	r6, r6, r5, r4
   18a7c:	mov	r4, #0
   18a80:	movwcc	r2, #1
   18a84:	cmp	r2, #0
   18a88:	mvnne	r7, #0
   18a8c:	cmp	r2, #0
   18a90:	umull	r1, ip, r7, r5
   18a94:	mvnne	r6, #0
   18a98:	mla	ip, r7, sl, ip
   18a9c:	subs	r7, r0, r7
   18aa0:	mla	lr, r6, r5, ip
   18aa4:	sbcs	r7, r3, r6
   18aa8:	mov	ip, #0
   18aac:	movwcc	ip, #1
   18ab0:	cmp	ip, #0
   18ab4:	mvnne	r1, #0
   18ab8:	mvnne	lr, #0
   18abc:	subs	r7, r0, r1
   18ac0:	sbcs	r7, r3, lr
   18ac4:	movwcc	r4, #1
   18ac8:	umull	r0, r7, r1, r5
   18acc:	cmp	r4, #0
   18ad0:	mla	r1, r1, sl, r7
   18ad4:	mvnne	r0, #0
   18ad8:	mla	r1, lr, r5, r1
   18adc:	cmp	r4, #0
   18ae0:	umull	r6, r3, r0, r5
   18ae4:	mvnne	r1, #0
   18ae8:	mla	r3, r0, sl, r3
   18aec:	mla	r7, r1, r5, r3
   18af0:	ldr	r3, [sp, #12]
   18af4:	subs	r0, r3, r0
   18af8:	ldr	r3, [sp, #16]
   18afc:	ldr	r0, [sp, #8]
   18b00:	sbcs	r0, r0, r1
   18b04:	mov	r0, #0
   18b08:	movwcc	r0, #1
   18b0c:	cmp	r0, #0
   18b10:	mov	r1, r0
   18b14:	ldr	r0, [sp, #20]
   18b18:	mvnne	r7, #0
   18b1c:	mvnne	r6, #0
   18b20:	orr	r0, r0, r3
   18b24:	orr	r0, r0, r2
   18b28:	orr	r0, r0, ip
   18b2c:	orr	r0, r0, r4
   18b30:	orr	r3, r0, r1
   18b34:	b	18e90 <__assert_fail@plt+0x777c>
   18b38:	mvn	r0, #0
   18b3c:	mvn	r1, #0
   18b40:	mov	r2, r5
   18b44:	mov	sl, r3
   18b48:	bl	19408 <__assert_fail@plt+0x7cf4>
   18b4c:	umull	r3, r2, r6, r5
   18b50:	mov	lr, r1
   18b54:	mov	r1, r0
   18b58:	mla	r2, r6, sl, r2
   18b5c:	subs	r6, r0, r6
   18b60:	mov	r0, #0
   18b64:	sbcs	r6, lr, r7
   18b68:	mla	r2, r7, r5, r2
   18b6c:	movwcc	r0, #1
   18b70:	cmp	r0, #0
   18b74:	str	r0, [sp, #20]
   18b78:	mov	r0, r1
   18b7c:	mvnne	r3, #0
   18b80:	mvnne	r2, #0
   18b84:	str	r0, [sp, #16]
   18b88:	subs	r4, r1, r3
   18b8c:	umull	r7, ip, r3, r5
   18b90:	sbcs	r4, lr, r2
   18b94:	mla	r3, r3, sl, ip
   18b98:	mov	ip, #0
   18b9c:	mov	r4, #0
   18ba0:	mla	r2, r2, r5, r3
   18ba4:	movwcc	r4, #1
   18ba8:	cmp	r4, #0
   18bac:	mvnne	r7, #0
   18bb0:	cmp	r4, #0
   18bb4:	umull	r1, r6, r7, r5
   18bb8:	mvnne	r2, #0
   18bbc:	mla	r6, r7, sl, r6
   18bc0:	mla	r3, r2, r5, r6
   18bc4:	subs	r6, r0, r7
   18bc8:	sbcs	r2, lr, r2
   18bcc:	movwcc	ip, #1
   18bd0:	mov	r2, #0
   18bd4:	cmp	ip, #0
   18bd8:	mvnne	r1, #0
   18bdc:	mvnne	r3, #0
   18be0:	subs	r6, r0, r1
   18be4:	sbcs	r6, lr, r3
   18be8:	movwcc	r2, #1
   18bec:	umull	r0, r6, r1, r5
   18bf0:	cmp	r2, #0
   18bf4:	str	r6, [sp, #12]
   18bf8:	mvnne	r0, #0
   18bfc:	cmp	r2, #0
   18c00:	umull	r6, r7, r0, r5
   18c04:	mla	r7, r0, sl, r7
   18c08:	str	r7, [sp, #8]
   18c0c:	ldr	r7, [sp, #12]
   18c10:	mla	r1, r1, sl, r7
   18c14:	mla	r1, r3, r5, r1
   18c18:	ldr	r3, [sp, #8]
   18c1c:	mvnne	r1, #0
   18c20:	mla	r7, r1, r5, r3
   18c24:	ldr	r3, [sp, #16]
   18c28:	subs	r0, r3, r0
   18c2c:	sbcs	r0, lr, r1
   18c30:	mov	r0, #0
   18c34:	movwcc	r0, #1
   18c38:	cmp	r0, #0
   18c3c:	mov	r1, r0
   18c40:	ldr	r0, [sp, #20]
   18c44:	mvnne	r7, #0
   18c48:	mvnne	r6, #0
   18c4c:	orr	r0, r0, r4
   18c50:	orr	r0, r0, ip
   18c54:	orr	r0, r0, r2
   18c58:	orr	r3, r0, r1
   18c5c:	b	18e90 <__assert_fail@plt+0x777c>
   18c60:	mvn	r0, #0
   18c64:	mvn	r1, #0
   18c68:	mov	r2, r5
   18c6c:	mov	sl, r3
   18c70:	bl	19408 <__assert_fail@plt+0x7cf4>
   18c74:	mov	lr, r0
   18c78:	subs	r0, r0, r6
   18c7c:	mov	r2, #0
   18c80:	mov	ip, r1
   18c84:	str	sl, [sp, #24]
   18c88:	sbcs	r0, r1, r7
   18c8c:	umull	r3, r1, r6, r5
   18c90:	str	lr, [sp, #4]
   18c94:	movwcc	r2, #1
   18c98:	mla	r6, r6, sl, r1
   18c9c:	mov	r1, #0
   18ca0:	cmp	r2, #0
   18ca4:	mla	r7, r7, r5, r6
   18ca8:	str	r2, [sp, #20]
   18cac:	mvnne	r3, #0
   18cb0:	cmp	r2, #0
   18cb4:	mov	r2, #0
   18cb8:	umull	r0, r4, r3, r5
   18cbc:	mvnne	r7, #0
   18cc0:	mla	r4, r3, sl, r4
   18cc4:	subs	r3, lr, r3
   18cc8:	sbcs	r3, ip, r7
   18ccc:	mla	r4, r7, r5, r4
   18cd0:	movwcc	r1, #1
   18cd4:	cmp	r1, #0
   18cd8:	str	r1, [sp, #16]
   18cdc:	mvnne	r0, #0
   18ce0:	mvnne	r4, #0
   18ce4:	subs	r3, lr, r0
   18ce8:	sbcs	r3, ip, r4
   18cec:	movwcc	r2, #1
   18cf0:	umull	r6, r3, r0, r5
   18cf4:	cmp	r2, #0
   18cf8:	mla	r0, r0, sl, r3
   18cfc:	str	r2, [sp, #12]
   18d00:	mvnne	r6, #0
   18d04:	mla	r0, r4, r5, r0
   18d08:	cmp	r2, #0
   18d0c:	ldr	r4, [sp, #24]
   18d10:	umull	r1, r7, r6, r5
   18d14:	mvnne	r0, #0
   18d18:	subs	r3, lr, r6
   18d1c:	mla	r7, r6, sl, r7
   18d20:	mov	r3, ip
   18d24:	mla	r7, r0, r5, r7
   18d28:	sbcs	r0, ip, r0
   18d2c:	str	r3, [sp]
   18d30:	mov	r0, #0
   18d34:	movwcc	r0, #1
   18d38:	cmp	r0, #0
   18d3c:	str	r0, [sp, #8]
   18d40:	mvnne	r1, #0
   18d44:	mvnne	r7, #0
   18d48:	subs	r0, lr, r1
   18d4c:	sbcs	r0, ip, r7
   18d50:	mov	ip, #0
   18d54:	movwcc	ip, #1
   18d58:	umull	r6, r0, r1, r5
   18d5c:	cmp	ip, #0
   18d60:	mla	r1, r1, r4, r0
   18d64:	mov	r0, lr
   18d68:	mvnne	r6, #0
   18d6c:	mla	r1, r7, r5, r1
   18d70:	cmp	ip, #0
   18d74:	umull	r2, sl, r6, r5
   18d78:	mvnne	r1, #0
   18d7c:	mla	sl, r6, r4, sl
   18d80:	subs	r6, lr, r6
   18d84:	mov	lr, #0
   18d88:	mla	r7, r1, r5, sl
   18d8c:	sbcs	r1, r3, r1
   18d90:	movwcc	lr, #1
   18d94:	ldr	r1, [sp, #24]
   18d98:	cmp	lr, #0
   18d9c:	mvnne	r2, #0
   18da0:	mvnne	r7, #0
   18da4:	subs	r6, r0, r2
   18da8:	umull	r0, sl, r2, r5
   18dac:	sbcs	r6, r3, r7
   18db0:	mov	r3, #0
   18db4:	mla	r2, r2, r1, sl
   18db8:	movwcc	r3, #1
   18dbc:	mla	r2, r7, r5, r2
   18dc0:	cmp	r3, #0
   18dc4:	mvnne	r0, #0
   18dc8:	cmp	r3, #0
   18dcc:	umull	r6, r4, r0, r5
   18dd0:	mvnne	r2, #0
   18dd4:	mla	r4, r0, r1, r4
   18dd8:	ldr	r1, [sp, #4]
   18ddc:	mla	r7, r2, r5, r4
   18de0:	ldr	r5, [sp, #16]
   18de4:	subs	r0, r1, r0
   18de8:	ldr	r0, [sp]
   18dec:	sbcs	r0, r0, r2
   18df0:	mov	r0, #0
   18df4:	movwcc	r0, #1
   18df8:	cmp	r0, #0
   18dfc:	mov	r2, r0
   18e00:	ldr	r0, [sp, #20]
   18e04:	mvnne	r7, #0
   18e08:	mvnne	r6, #0
   18e0c:	orr	r0, r0, r5
   18e10:	ldr	r5, [sp, #12]
   18e14:	orr	r0, r0, r5
   18e18:	ldr	r5, [sp, #8]
   18e1c:	orr	r0, r0, r5
   18e20:	orr	r0, r0, ip
   18e24:	orr	r0, r0, lr
   18e28:	orr	r0, r0, r3
   18e2c:	orr	r0, r0, r2
   18e30:	and	r3, r0, #1
   18e34:	b	18e90 <__assert_fail@plt+0x777c>
   18e38:	mov	r1, #0
   18e3c:	lsl	r2, r7, #9
   18e40:	lsl	r0, r6, #9
   18e44:	lsr	r3, r7, #23
   18e48:	cmp	r1, r7, lsr #23
   18e4c:	orr	r2, r2, r6, lsr #23
   18e50:	mvnne	r0, #0
   18e54:	movwne	r3, #1
   18e58:	cmp	r1, r7, lsr #23
   18e5c:	mvnne	r2, #0
   18e60:	mov	r6, r0
   18e64:	mov	r7, r2
   18e68:	b	18e90 <__assert_fail@plt+0x777c>
   18e6c:	lsl	r1, r7, #1
   18e70:	lsl	r0, r6, #1
   18e74:	cmp	r7, #0
   18e78:	lsr	r3, r7, #31
   18e7c:	orr	r1, r1, r6, lsr #31
   18e80:	mvnlt	r0, #0
   18e84:	mvnlt	r1, #0
   18e88:	mov	r6, r0
   18e8c:	mov	r7, r1
   18e90:	ldr	r1, [sp, #32]
   18e94:	ldr	r2, [sp, #28]
   18e98:	orr	r8, r3, r8
   18e9c:	add	r0, r1, r2
   18ea0:	str	r0, [r9]
   18ea4:	ldrb	r0, [r1, r2]
   18ea8:	cmp	r0, #0
   18eac:	orrne	r8, r8, #2
   18eb0:	ldr	r0, [sp, #36]	; 0x24
   18eb4:	strd	r6, [r0]
   18eb8:	mov	r0, r8
   18ebc:	sub	sp, fp, #28
   18ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ec4:	movw	r0, #44097	; 0xac41
   18ec8:	movw	r1, #44135	; 0xac67
   18ecc:	movw	r3, #44151	; 0xac77
   18ed0:	mov	r2, #85	; 0x55
   18ed4:	movt	r0, #1
   18ed8:	movt	r1, #1
   18edc:	movt	r3, #1
   18ee0:	bl	11714 <__assert_fail@plt>
   18ee4:	clz	r2, r1
   18ee8:	clz	r3, r0
   18eec:	lsr	r2, r2, #5
   18ef0:	lsr	r3, r3, #5
   18ef4:	orrs	r2, r3, r2
   18ef8:	movwne	r1, #1
   18efc:	movwne	r0, #1
   18f00:	cmp	r1, #0
   18f04:	beq	18f34 <__assert_fail@plt+0x7820>
   18f08:	mvn	r2, #-2147483648	; 0x80000000
   18f0c:	udiv	r2, r2, r1
   18f10:	cmp	r2, r0
   18f14:	bcs	18f34 <__assert_fail@plt+0x7820>
   18f18:	push	{fp, lr}
   18f1c:	mov	fp, sp
   18f20:	bl	115d0 <__errno_location@plt>
   18f24:	mov	r1, #12
   18f28:	str	r1, [r0]
   18f2c:	mov	r0, #0
   18f30:	pop	{fp, pc}
   18f34:	b	11384 <calloc@plt>
   18f38:	cmp	r0, #0
   18f3c:	movweq	r0, #1
   18f40:	cmn	r0, #1
   18f44:	ble	18f4c <__assert_fail@plt+0x7838>
   18f48:	b	11528 <malloc@plt>
   18f4c:	push	{fp, lr}
   18f50:	mov	fp, sp
   18f54:	bl	115d0 <__errno_location@plt>
   18f58:	mov	r1, #12
   18f5c:	str	r1, [r0]
   18f60:	mov	r0, #0
   18f64:	pop	{fp, pc}
   18f68:	push	{fp, lr}
   18f6c:	mov	fp, sp
   18f70:	cmp	r0, #0
   18f74:	beq	18f90 <__assert_fail@plt+0x787c>
   18f78:	cmp	r1, #0
   18f7c:	beq	18f9c <__assert_fail@plt+0x7888>
   18f80:	cmn	r1, #1
   18f84:	ble	18fa8 <__assert_fail@plt+0x7894>
   18f88:	pop	{fp, lr}
   18f8c:	b	11468 <realloc@plt>
   18f90:	mov	r0, r1
   18f94:	pop	{fp, lr}
   18f98:	b	18f38 <__assert_fail@plt+0x7824>
   18f9c:	bl	1526c <__assert_fail@plt+0x3b58>
   18fa0:	mov	r0, #0
   18fa4:	pop	{fp, pc}
   18fa8:	bl	115d0 <__errno_location@plt>
   18fac:	mov	r1, #12
   18fb0:	str	r1, [r0]
   18fb4:	mov	r0, #0
   18fb8:	pop	{fp, pc}
   18fbc:	push	{r4, r5, r6, sl, fp, lr}
   18fc0:	add	fp, sp, #16
   18fc4:	mov	r4, r0
   18fc8:	bl	114ec <__fpending@plt>
   18fcc:	ldr	r6, [r4]
   18fd0:	mov	r5, r0
   18fd4:	mov	r0, r4
   18fd8:	bl	150c4 <__assert_fail@plt+0x39b0>
   18fdc:	tst	r6, #32
   18fe0:	bne	19018 <__assert_fail@plt+0x7904>
   18fe4:	cmp	r0, #0
   18fe8:	mov	r4, r0
   18fec:	mvnne	r4, #0
   18ff0:	cmp	r5, #0
   18ff4:	bne	19024 <__assert_fail@plt+0x7910>
   18ff8:	cmp	r0, #0
   18ffc:	beq	19024 <__assert_fail@plt+0x7910>
   19000:	bl	115d0 <__errno_location@plt>
   19004:	ldr	r0, [r0]
   19008:	subs	r4, r0, #9
   1900c:	mvnne	r4, #0
   19010:	mov	r0, r4
   19014:	pop	{r4, r5, r6, sl, fp, pc}
   19018:	mvn	r4, #0
   1901c:	cmp	r0, #0
   19020:	beq	1902c <__assert_fail@plt+0x7918>
   19024:	mov	r0, r4
   19028:	pop	{r4, r5, r6, sl, fp, pc}
   1902c:	bl	115d0 <__errno_location@plt>
   19030:	mov	r1, #0
   19034:	str	r1, [r0]
   19038:	mov	r0, r4
   1903c:	pop	{r4, r5, r6, sl, fp, pc}
   19040:	push	{fp, lr}
   19044:	mov	fp, sp
   19048:	mov	r0, #14
   1904c:	bl	116a8 <nl_langinfo@plt>
   19050:	movw	r1, #39677	; 0x9afd
   19054:	cmp	r0, #0
   19058:	movt	r1, #1
   1905c:	movne	r1, r0
   19060:	movw	r0, #44230	; 0xacc6
   19064:	ldrb	r2, [r1]
   19068:	movt	r0, #1
   1906c:	cmp	r2, #0
   19070:	movne	r0, r1
   19074:	pop	{fp, pc}
   19078:	push	{r4, r5, r6, r7, fp, lr}
   1907c:	add	fp, sp, #16
   19080:	sub	sp, sp, #8
   19084:	add	r5, sp, #4
   19088:	cmp	r0, #0
   1908c:	mov	r7, r2
   19090:	mov	r4, r1
   19094:	movne	r5, r0
   19098:	mov	r0, r5
   1909c:	bl	114f8 <mbrtowc@plt>
   190a0:	mov	r6, r0
   190a4:	cmp	r7, #0
   190a8:	beq	190cc <__assert_fail@plt+0x79b8>
   190ac:	cmn	r6, #2
   190b0:	bcc	190cc <__assert_fail@plt+0x79b8>
   190b4:	mov	r0, #0
   190b8:	bl	19300 <__assert_fail@plt+0x7bec>
   190bc:	cmp	r0, #0
   190c0:	ldrbeq	r0, [r4]
   190c4:	moveq	r6, #1
   190c8:	streq	r0, [r5]
   190cc:	mov	r0, r6
   190d0:	sub	sp, fp, #16
   190d4:	pop	{r4, r5, r6, r7, fp, pc}
   190d8:	cmp	r2, #0
   190dc:	beq	1910c <__assert_fail@plt+0x79f8>
   190e0:	mvn	r3, #0
   190e4:	udiv	r3, r3, r2
   190e8:	cmp	r3, r1
   190ec:	bcs	1910c <__assert_fail@plt+0x79f8>
   190f0:	push	{fp, lr}
   190f4:	mov	fp, sp
   190f8:	bl	115d0 <__errno_location@plt>
   190fc:	mov	r1, #12
   19100:	str	r1, [r0]
   19104:	mov	r0, #0
   19108:	pop	{fp, pc}
   1910c:	mul	r1, r2, r1
   19110:	b	18f68 <__assert_fail@plt+0x7854>
   19114:	mov	r1, #0
   19118:	mov	r2, #3
   1911c:	b	19120 <__assert_fail@plt+0x7a0c>
   19120:	sub	sp, sp, #8
   19124:	push	{r4, r5, r6, r7, fp, lr}
   19128:	add	fp, sp, #16
   1912c:	sub	sp, sp, #8
   19130:	mov	r5, r0
   19134:	add	r0, fp, #8
   19138:	cmp	r1, #11
   1913c:	str	r3, [fp, #12]
   19140:	str	r2, [fp, #8]
   19144:	str	r0, [sp, #4]
   19148:	bhi	19184 <__assert_fail@plt+0x7a70>
   1914c:	mov	r0, #1
   19150:	movw	r2, #1300	; 0x514
   19154:	tst	r2, r0, lsl r1
   19158:	bne	19244 <__assert_fail@plt+0x7b30>
   1915c:	movw	r2, #2570	; 0xa0a
   19160:	tst	r2, r0, lsl r1
   19164:	bne	191ac <__assert_fail@plt+0x7a98>
   19168:	cmp	r1, #0
   1916c:	bne	19184 <__assert_fail@plt+0x7a70>
   19170:	ldr	r0, [sp, #4]
   19174:	add	r1, r0, #4
   19178:	str	r1, [sp, #4]
   1917c:	mov	r1, #0
   19180:	b	19250 <__assert_fail@plt+0x7b3c>
   19184:	sub	r0, r1, #1024	; 0x400
   19188:	cmp	r0, #10
   1918c:	bhi	19244 <__assert_fail@plt+0x7b30>
   19190:	mov	r2, #1
   19194:	movw	r3, #645	; 0x285
   19198:	tst	r3, r2, lsl r0
   1919c:	bne	19244 <__assert_fail@plt+0x7b30>
   191a0:	movw	r3, #1282	; 0x502
   191a4:	tst	r3, r2, lsl r0
   191a8:	beq	191b8 <__assert_fail@plt+0x7aa4>
   191ac:	mov	r0, r5
   191b0:	bl	11660 <fcntl64@plt>
   191b4:	b	1925c <__assert_fail@plt+0x7b48>
   191b8:	cmp	r0, #6
   191bc:	bne	19244 <__assert_fail@plt+0x7b30>
   191c0:	ldr	r0, [sp, #4]
   191c4:	movw	r7, #46696	; 0xb668
   191c8:	movt	r7, #2
   191cc:	add	r1, r0, #4
   191d0:	str	r1, [sp, #4]
   191d4:	ldr	r6, [r0]
   191d8:	ldr	r0, [r7]
   191dc:	cmp	r0, #0
   191e0:	blt	19280 <__assert_fail@plt+0x7b6c>
   191e4:	mov	r0, r5
   191e8:	movw	r1, #1030	; 0x406
   191ec:	mov	r2, r6
   191f0:	bl	11660 <fcntl64@plt>
   191f4:	mov	r4, r0
   191f8:	cmn	r0, #1
   191fc:	bgt	19274 <__assert_fail@plt+0x7b60>
   19200:	bl	115d0 <__errno_location@plt>
   19204:	ldr	r0, [r0]
   19208:	cmp	r0, #22
   1920c:	bne	19274 <__assert_fail@plt+0x7b60>
   19210:	mov	r0, r5
   19214:	mov	r1, #0
   19218:	mov	r2, r6
   1921c:	bl	11660 <fcntl64@plt>
   19220:	mov	r4, r0
   19224:	cmp	r0, #0
   19228:	blt	19260 <__assert_fail@plt+0x7b4c>
   1922c:	mvn	r0, #0
   19230:	str	r0, [r7]
   19234:	mov	r0, #1
   19238:	cmp	r0, #0
   1923c:	bne	192ac <__assert_fail@plt+0x7b98>
   19240:	b	19260 <__assert_fail@plt+0x7b4c>
   19244:	ldr	r0, [sp, #4]
   19248:	add	r2, r0, #4
   1924c:	str	r2, [sp, #4]
   19250:	ldr	r2, [r0]
   19254:	mov	r0, r5
   19258:	bl	11660 <fcntl64@plt>
   1925c:	mov	r4, r0
   19260:	mov	r0, r4
   19264:	sub	sp, fp, #16
   19268:	pop	{r4, r5, r6, r7, fp, lr}
   1926c:	add	sp, sp, #8
   19270:	bx	lr
   19274:	mov	r0, #1
   19278:	str	r0, [r7]
   1927c:	b	19260 <__assert_fail@plt+0x7b4c>
   19280:	mov	r0, r5
   19284:	mov	r1, #0
   19288:	mov	r2, r6
   1928c:	bl	11660 <fcntl64@plt>
   19290:	mov	r4, r0
   19294:	ldr	r0, [r7]
   19298:	add	r0, r0, #1
   1929c:	clz	r0, r0
   192a0:	lsr	r0, r0, #5
   192a4:	cmp	r0, #0
   192a8:	beq	19260 <__assert_fail@plt+0x7b4c>
   192ac:	cmp	r4, #0
   192b0:	blt	19260 <__assert_fail@plt+0x7b4c>
   192b4:	mov	r0, r4
   192b8:	mov	r1, #1
   192bc:	bl	11660 <fcntl64@plt>
   192c0:	cmp	r0, #0
   192c4:	blt	192e0 <__assert_fail@plt+0x7bcc>
   192c8:	orr	r2, r0, #1
   192cc:	mov	r0, r4
   192d0:	mov	r1, #2
   192d4:	bl	11660 <fcntl64@plt>
   192d8:	cmn	r0, #1
   192dc:	bne	19260 <__assert_fail@plt+0x7b4c>
   192e0:	bl	115d0 <__errno_location@plt>
   192e4:	ldr	r6, [r0]
   192e8:	mov	r5, r0
   192ec:	mov	r0, r4
   192f0:	bl	116fc <close@plt>
   192f4:	str	r6, [r5]
   192f8:	mvn	r4, #0
   192fc:	b	19260 <__assert_fail@plt+0x7b4c>
   19300:	push	{r4, sl, fp, lr}
   19304:	add	fp, sp, #8
   19308:	sub	sp, sp, #264	; 0x108
   1930c:	add	r1, sp, #7
   19310:	movw	r2, #257	; 0x101
   19314:	bl	19364 <__assert_fail@plt+0x7c50>
   19318:	mov	r4, #0
   1931c:	cmp	r0, #0
   19320:	bne	19358 <__assert_fail@plt+0x7c44>
   19324:	movw	r1, #44236	; 0xaccc
   19328:	add	r0, sp, #7
   1932c:	movt	r1, #1
   19330:	bl	113a8 <strcmp@plt>
   19334:	cmp	r0, #0
   19338:	beq	19358 <__assert_fail@plt+0x7c44>
   1933c:	movw	r1, #44238	; 0xacce
   19340:	add	r0, sp, #7
   19344:	movt	r1, #1
   19348:	bl	113a8 <strcmp@plt>
   1934c:	mov	r4, r0
   19350:	cmp	r0, #0
   19354:	movwne	r4, #1
   19358:	mov	r0, r4
   1935c:	sub	sp, fp, #8
   19360:	pop	{r4, sl, fp, pc}
   19364:	push	{r4, r5, r6, r7, fp, lr}
   19368:	add	fp, sp, #16
   1936c:	mov	r4, r1
   19370:	mov	r1, #0
   19374:	mov	r6, r2
   19378:	bl	1166c <setlocale@plt>
   1937c:	cmp	r0, #0
   19380:	beq	193b0 <__assert_fail@plt+0x7c9c>
   19384:	mov	r7, r0
   19388:	bl	11588 <strlen@plt>
   1938c:	cmp	r0, r6
   19390:	bcs	193d0 <__assert_fail@plt+0x7cbc>
   19394:	add	r2, r0, #1
   19398:	mov	r0, r4
   1939c:	mov	r1, r7
   193a0:	bl	11408 <memcpy@plt>
   193a4:	mov	r5, #0
   193a8:	mov	r0, r5
   193ac:	pop	{r4, r5, r6, r7, fp, pc}
   193b0:	cmp	r6, #0
   193b4:	mov	r5, #22
   193b8:	movne	r0, #0
   193bc:	strbne	r0, [r4]
   193c0:	movne	r0, r5
   193c4:	popne	{r4, r5, r6, r7, fp, pc}
   193c8:	mov	r0, r5
   193cc:	pop	{r4, r5, r6, r7, fp, pc}
   193d0:	mov	r5, #34	; 0x22
   193d4:	cmp	r6, #0
   193d8:	beq	193f8 <__assert_fail@plt+0x7ce4>
   193dc:	sub	r6, r6, #1
   193e0:	mov	r0, r4
   193e4:	mov	r1, r7
   193e8:	mov	r2, r6
   193ec:	bl	11408 <memcpy@plt>
   193f0:	mov	r0, #0
   193f4:	strb	r0, [r4, r6]
   193f8:	mov	r0, r5
   193fc:	pop	{r4, r5, r6, r7, fp, pc}
   19400:	mov	r1, #0
   19404:	b	1166c <setlocale@plt>
   19408:	cmp	r3, #0
   1940c:	cmpeq	r2, #0
   19410:	bne	19428 <__assert_fail@plt+0x7d14>
   19414:	cmp	r1, #0
   19418:	cmpeq	r0, #0
   1941c:	mvnne	r1, #0
   19420:	mvnne	r0, #0
   19424:	b	19444 <__assert_fail@plt+0x7d30>
   19428:	sub	sp, sp, #8
   1942c:	push	{sp, lr}
   19430:	bl	19454 <__assert_fail@plt+0x7d40>
   19434:	ldr	lr, [sp, #4]
   19438:	add	sp, sp, #8
   1943c:	pop	{r2, r3}
   19440:	bx	lr
   19444:	push	{r1, lr}
   19448:	mov	r0, #8
   1944c:	bl	1139c <raise@plt>
   19450:	pop	{r1, pc}
   19454:	cmp	r1, r3
   19458:	cmpeq	r0, r2
   1945c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19460:	mov	r4, r0
   19464:	movcc	r0, #0
   19468:	mov	r5, r1
   1946c:	ldr	lr, [sp, #36]	; 0x24
   19470:	movcc	r1, r0
   19474:	bcc	19570 <__assert_fail@plt+0x7e5c>
   19478:	cmp	r3, #0
   1947c:	clzeq	ip, r2
   19480:	clzne	ip, r3
   19484:	addeq	ip, ip, #32
   19488:	cmp	r5, #0
   1948c:	clzeq	r1, r4
   19490:	addeq	r1, r1, #32
   19494:	clzne	r1, r5
   19498:	sub	ip, ip, r1
   1949c:	sub	sl, ip, #32
   194a0:	lsl	r9, r3, ip
   194a4:	rsb	fp, ip, #32
   194a8:	orr	r9, r9, r2, lsl sl
   194ac:	orr	r9, r9, r2, lsr fp
   194b0:	lsl	r8, r2, ip
   194b4:	cmp	r5, r9
   194b8:	cmpeq	r4, r8
   194bc:	movcc	r0, #0
   194c0:	movcc	r1, r0
   194c4:	bcc	194e0 <__assert_fail@plt+0x7dcc>
   194c8:	mov	r0, #1
   194cc:	subs	r4, r4, r8
   194d0:	lsl	r1, r0, sl
   194d4:	orr	r1, r1, r0, lsr fp
   194d8:	lsl	r0, r0, ip
   194dc:	sbc	r5, r5, r9
   194e0:	cmp	ip, #0
   194e4:	beq	19570 <__assert_fail@plt+0x7e5c>
   194e8:	lsr	r6, r8, #1
   194ec:	orr	r6, r6, r9, lsl #31
   194f0:	lsr	r7, r9, #1
   194f4:	mov	r2, ip
   194f8:	b	1951c <__assert_fail@plt+0x7e08>
   194fc:	subs	r3, r4, r6
   19500:	sbc	r8, r5, r7
   19504:	adds	r3, r3, r3
   19508:	adc	r8, r8, r8
   1950c:	adds	r4, r3, #1
   19510:	adc	r5, r8, #0
   19514:	subs	r2, r2, #1
   19518:	beq	19538 <__assert_fail@plt+0x7e24>
   1951c:	cmp	r5, r7
   19520:	cmpeq	r4, r6
   19524:	bcs	194fc <__assert_fail@plt+0x7de8>
   19528:	adds	r4, r4, r4
   1952c:	adc	r5, r5, r5
   19530:	subs	r2, r2, #1
   19534:	bne	1951c <__assert_fail@plt+0x7e08>
   19538:	lsr	r3, r4, ip
   1953c:	orr	r3, r3, r5, lsl fp
   19540:	lsr	r2, r5, ip
   19544:	orr	r3, r3, r5, lsr sl
   19548:	adds	r0, r0, r4
   1954c:	mov	r4, r3
   19550:	lsl	r3, r2, ip
   19554:	orr	r3, r3, r4, lsl sl
   19558:	lsl	ip, r4, ip
   1955c:	orr	r3, r3, r4, lsr fp
   19560:	adc	r1, r1, r5
   19564:	subs	r0, r0, ip
   19568:	mov	r5, r2
   1956c:	sbc	r1, r1, r3
   19570:	cmp	lr, #0
   19574:	strdne	r4, [lr]
   19578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1957c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19580:	mov	r7, r0
   19584:	ldr	r6, [pc, #72]	; 195d4 <__assert_fail@plt+0x7ec0>
   19588:	ldr	r5, [pc, #72]	; 195d8 <__assert_fail@plt+0x7ec4>
   1958c:	add	r6, pc, r6
   19590:	add	r5, pc, r5
   19594:	sub	r6, r6, r5
   19598:	mov	r8, r1
   1959c:	mov	r9, r2
   195a0:	bl	11358 <fdopen@plt-0x20>
   195a4:	asrs	r6, r6, #2
   195a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   195ac:	mov	r4, #0
   195b0:	add	r4, r4, #1
   195b4:	ldr	r3, [r5], #4
   195b8:	mov	r2, r9
   195bc:	mov	r1, r8
   195c0:	mov	r0, r7
   195c4:	blx	r3
   195c8:	cmp	r6, r4
   195cc:	bne	195b0 <__assert_fail@plt+0x7e9c>
   195d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195d4:	andeq	r1, r1, r8, ror r9
   195d8:	andeq	r1, r1, r0, ror r9
   195dc:	bx	lr
   195e0:	ldr	r3, [pc, #12]	; 195f4 <__assert_fail@plt+0x7ee0>
   195e4:	mov	r1, #0
   195e8:	add	r3, pc, r3
   195ec:	ldr	r2, [r3]
   195f0:	b	115e8 <__cxa_atexit@plt>
   195f4:	andeq	r1, r1, ip, asr fp

Disassembly of section .fini:

000195f8 <.fini>:
   195f8:	push	{r3, lr}
   195fc:	pop	{r3, pc}
