
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	113e8 <__assert_fail@plt+0x48>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <calloc@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <calloc@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	r6, r1, ip, asr #30

000110b8 <calloc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <endgrent@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <getpwnam@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <getpwuid@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <fflush@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <free@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <execvp@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <__strtoull_internal@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <mbsinit@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <dcgettext@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <realloc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <textdomain@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <chdir@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <iswprint@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <setgroups@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <fwrite@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <lseek64@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <__ctype_get_mb_cur_max@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <chroot@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <__fpending@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <mbrtowc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <error@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <getenv@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <setgid@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <malloc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <__libc_start_main@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <__freading@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__gmon_start__@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <getopt_long@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <__ctype_b_loc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <exit@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <bcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <strtoul@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <strlen@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <strchr@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <__cxa_atexit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <getgrouplist@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <memset@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <strtok@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <endpwent@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <setuid@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <getgroups@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <canonicalize_file_name@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <strncmp@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <abort@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <getgrgid@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <getgrnam@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <__assert_fail@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

Disassembly of section .text:

000113ac <.text>:
   113ac:	mov	fp, #0
   113b0:	mov	lr, #0
   113b4:	pop	{r1}		; (ldr r1, [sp], #4)
   113b8:	mov	r2, sp
   113bc:	push	{r2}		; (str r2, [sp, #-4]!)
   113c0:	push	{r0}		; (str r0, [sp, #-4]!)
   113c4:	ldr	ip, [pc, #16]	; 113dc <__assert_fail@plt+0x3c>
   113c8:	push	{ip}		; (str ip, [sp, #-4]!)
   113cc:	ldr	r0, [pc, #12]	; 113e0 <__assert_fail@plt+0x40>
   113d0:	ldr	r3, [pc, #12]	; 113e4 <__assert_fail@plt+0x44>
   113d4:	bl	11220 <__libc_start_main@plt>
   113d8:	bl	1137c <abort@plt>
   113dc:	andeq	r6, r1, r4, ror #26
   113e0:	andeq	r1, r1, r0, ror r7
   113e4:	andeq	r6, r1, r4, lsl #26
   113e8:	ldr	r3, [pc, #20]	; 11404 <__assert_fail@plt+0x64>
   113ec:	ldr	r2, [pc, #20]	; 11408 <__assert_fail@plt+0x68>
   113f0:	add	r3, pc, r3
   113f4:	ldr	r2, [r3, r2]
   113f8:	cmp	r2, #0
   113fc:	bxeq	lr
   11400:	b	11238 <__gmon_start__@plt>
   11404:	andeq	r6, r1, r8, lsl #24
   11408:	andeq	r0, r0, r8, lsl #2
   1140c:	ldr	r0, [pc, #24]	; 1142c <__assert_fail@plt+0x8c>
   11410:	ldr	r3, [pc, #24]	; 11430 <__assert_fail@plt+0x90>
   11414:	cmp	r3, r0
   11418:	bxeq	lr
   1141c:	ldr	r3, [pc, #16]	; 11434 <__assert_fail@plt+0x94>
   11420:	cmp	r3, #0
   11424:	bxeq	lr
   11428:	bx	r3
   1142c:	andeq	r8, r2, r0, ror #2
   11430:	andeq	r8, r2, r0, ror #2
   11434:	andeq	r0, r0, r0
   11438:	ldr	r0, [pc, #36]	; 11464 <__assert_fail@plt+0xc4>
   1143c:	ldr	r1, [pc, #36]	; 11468 <__assert_fail@plt+0xc8>
   11440:	sub	r1, r1, r0
   11444:	asr	r1, r1, #2
   11448:	add	r1, r1, r1, lsr #31
   1144c:	asrs	r1, r1, #1
   11450:	bxeq	lr
   11454:	ldr	r3, [pc, #16]	; 1146c <__assert_fail@plt+0xcc>
   11458:	cmp	r3, #0
   1145c:	bxeq	lr
   11460:	bx	r3
   11464:	andeq	r8, r2, r0, ror #2
   11468:	andeq	r8, r2, r0, ror #2
   1146c:	andeq	r0, r0, r0
   11470:	push	{r4, lr}
   11474:	ldr	r4, [pc, #24]	; 11494 <__assert_fail@plt+0xf4>
   11478:	ldrb	r3, [r4]
   1147c:	cmp	r3, #0
   11480:	popne	{r4, pc}
   11484:	bl	1140c <__assert_fail@plt+0x6c>
   11488:	mov	r3, #1
   1148c:	strb	r3, [r4]
   11490:	pop	{r4, pc}
   11494:	andeq	r8, r2, ip, ror r1
   11498:	b	11438 <__assert_fail@plt+0x98>
   1149c:	push	{fp, lr}
   114a0:	mov	fp, sp
   114a4:	sub	sp, sp, #56	; 0x38
   114a8:	mov	r4, r0
   114ac:	cmp	r0, #0
   114b0:	bne	1172c <__assert_fail@plt+0x38c>
   114b4:	movw	r1, #28083	; 0x6db3
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	11160 <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r0, #33160	; 0x8188
   114d0:	movt	r0, #2
   114d4:	ldr	r2, [r0]
   114d8:	mov	r0, #1
   114dc:	mov	r3, r2
   114e0:	bl	112c8 <__printf_chk@plt>
   114e4:	movw	r1, #28147	; 0x6df3
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	11160 <dcgettext@plt>
   114f8:	movw	r7, #33140	; 0x8174
   114fc:	movt	r7, #2
   11500:	ldr	r1, [r7]
   11504:	bl	110d0 <fputs_unlocked@plt>
   11508:	movw	r1, #28197	; 0x6e25
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r1, #1
   11518:	bl	11160 <dcgettext@plt>
   1151c:	ldr	r1, [r7]
   11520:	bl	110d0 <fputs_unlocked@plt>
   11524:	movw	r1, #28271	; 0x6e6f
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	11160 <dcgettext@plt>
   11538:	ldr	r1, [r7]
   1153c:	bl	110d0 <fputs_unlocked@plt>
   11540:	movw	r1, #28344	; 0x6eb8
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	movt	r1, #1
   11550:	bl	11160 <dcgettext@plt>
   11554:	movw	r1, #30571	; 0x776b
   11558:	mov	r5, r0
   1155c:	mov	r0, #4
   11560:	movt	r1, #1
   11564:	bl	138d0 <__assert_fail@plt+0x2530>
   11568:	mov	r2, r0
   1156c:	mov	r0, #1
   11570:	mov	r1, r5
   11574:	bl	112c8 <__printf_chk@plt>
   11578:	movw	r1, #28412	; 0x6efc
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	movt	r1, #1
   11588:	bl	11160 <dcgettext@plt>
   1158c:	ldr	r1, [r7]
   11590:	bl	110d0 <fputs_unlocked@plt>
   11594:	movw	r1, #28457	; 0x6f29
   11598:	mov	r0, #0
   1159c:	mov	r2, #5
   115a0:	movt	r1, #1
   115a4:	bl	11160 <dcgettext@plt>
   115a8:	ldr	r1, [r7]
   115ac:	bl	110d0 <fputs_unlocked@plt>
   115b0:	movw	r1, #28511	; 0x6f5f
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	movt	r1, #1
   115c0:	bl	11160 <dcgettext@plt>
   115c4:	ldr	r1, [r7]
   115c8:	bl	110d0 <fputs_unlocked@plt>
   115cc:	movw	r0, #29456	; 0x7310
   115d0:	mov	r2, #48	; 0x30
   115d4:	mov	r6, sp
   115d8:	movw	r5, #28580	; 0x6fa4
   115dc:	movt	r0, #1
   115e0:	movt	r5, #1
   115e4:	add	r1, r0, #32
   115e8:	add	r3, r0, #16
   115ec:	vld1.64	{d18-d19}, [r0], r2
   115f0:	vld1.64	{d16-d17}, [r1]
   115f4:	vld1.64	{d20-d21}, [r3]
   115f8:	vldr	d22, [r0]
   115fc:	add	r1, r6, #32
   11600:	add	r0, r6, #16
   11604:	vst1.64	{d16-d17}, [r1]
   11608:	movw	r1, #28974	; 0x712e
   1160c:	vst1.64	{d20-d21}, [r0]
   11610:	mov	r0, r6
   11614:	movt	r1, #1
   11618:	vst1.64	{d18-d19}, [r0], r2
   1161c:	vstr	d22, [r0]
   11620:	mov	r0, r5
   11624:	bl	110f4 <strcmp@plt>
   11628:	cmp	r0, #0
   1162c:	ldrne	r1, [r6, #8]!
   11630:	cmpne	r1, #0
   11634:	bne	11620 <__assert_fail@plt+0x280>
   11638:	movw	r1, #29069	; 0x718d
   1163c:	ldr	r6, [r6, #4]
   11640:	mov	r0, #0
   11644:	mov	r2, #5
   11648:	movt	r1, #1
   1164c:	bl	11160 <dcgettext@plt>
   11650:	movw	r2, #28613	; 0x6fc5
   11654:	movw	r3, #29092	; 0x71a4
   11658:	mov	r1, r0
   1165c:	mov	r0, #1
   11660:	movt	r2, #1
   11664:	movt	r3, #1
   11668:	bl	112c8 <__printf_chk@plt>
   1166c:	cmp	r6, #0
   11670:	mov	r0, #5
   11674:	mov	r1, #0
   11678:	moveq	r6, r5
   1167c:	bl	11310 <setlocale@plt>
   11680:	cmp	r0, #0
   11684:	beq	116bc <__assert_fail@plt+0x31c>
   11688:	movw	r1, #29132	; 0x71cc
   1168c:	mov	r2, #3
   11690:	movt	r1, #1
   11694:	bl	11370 <strncmp@plt>
   11698:	cmp	r0, #0
   1169c:	beq	116bc <__assert_fail@plt+0x31c>
   116a0:	movw	r1, #29136	; 0x71d0
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	11160 <dcgettext@plt>
   116b4:	ldr	r1, [r7]
   116b8:	bl	110d0 <fputs_unlocked@plt>
   116bc:	movw	r1, #29207	; 0x7217
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	movt	r1, #1
   116cc:	bl	11160 <dcgettext@plt>
   116d0:	movw	r2, #29092	; 0x71a4
   116d4:	mov	r1, r0
   116d8:	mov	r0, #1
   116dc:	mov	r3, r5
   116e0:	movt	r2, #1
   116e4:	bl	112c8 <__printf_chk@plt>
   116e8:	movw	r1, #29234	; 0x7232
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11160 <dcgettext@plt>
   116fc:	mov	r1, r0
   11700:	movw	r0, #29002	; 0x714a
   11704:	movw	r3, #28196	; 0x6e24
   11708:	cmp	r6, r5
   1170c:	mov	r2, r6
   11710:	movt	r0, #1
   11714:	movt	r3, #1
   11718:	moveq	r3, r0
   1171c:	mov	r0, #1
   11720:	bl	112c8 <__printf_chk@plt>
   11724:	mov	r0, r4
   11728:	bl	1125c <exit@plt>
   1172c:	movw	r0, #33136	; 0x8170
   11730:	movw	r1, #28044	; 0x6d8c
   11734:	mov	r2, #5
   11738:	movt	r0, #2
   1173c:	movt	r1, #1
   11740:	ldr	r5, [r0]
   11744:	mov	r0, #0
   11748:	bl	11160 <dcgettext@plt>
   1174c:	mov	r2, r0
   11750:	movw	r0, #33160	; 0x8188
   11754:	mov	r1, #1
   11758:	movt	r0, #2
   1175c:	ldr	r3, [r0]
   11760:	mov	r0, r5
   11764:	bl	112e0 <__fprintf_chk@plt>
   11768:	mov	r0, r4
   1176c:	bl	1125c <exit@plt>
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11774:	add	fp, sp, #28
   11778:	sub	sp, sp, #36	; 0x24
   1177c:	mov	r8, #0
   11780:	mov	r6, r0
   11784:	mvn	r0, #0
   11788:	mov	r4, r1
   1178c:	str	r0, [sp, #32]
   11790:	str	r0, [sp, #28]
   11794:	str	r8, [sp, #24]
   11798:	str	r8, [sp, #20]
   1179c:	ldr	r0, [r1]
   117a0:	bl	121a4 <__assert_fail@plt+0xe04>
   117a4:	movw	r1, #28196	; 0x6e24
   117a8:	mov	r0, #6
   117ac:	movt	r1, #1
   117b0:	bl	11310 <setlocale@plt>
   117b4:	movw	r5, #28617	; 0x6fc9
   117b8:	movw	r1, #28587	; 0x6fab
   117bc:	movt	r5, #1
   117c0:	movt	r1, #1
   117c4:	mov	r0, r5
   117c8:	bl	11364 <bindtextdomain@plt>
   117cc:	mov	r0, r5
   117d0:	bl	11178 <textdomain@plt>
   117d4:	movw	r0, #33052	; 0x811c
   117d8:	mov	r1, #125	; 0x7d
   117dc:	movt	r0, #2
   117e0:	str	r1, [r0]
   117e4:	movw	r0, #8340	; 0x2094
   117e8:	movt	r0, #1
   117ec:	bl	16d68 <__assert_fail@plt+0x59c8>
   117f0:	movw	r5, #28611	; 0x6fc3
   117f4:	movw	r7, #29360	; 0x72b0
   117f8:	mov	r0, #0
   117fc:	mov	r9, #0
   11800:	mov	sl, #0
   11804:	movt	r5, #1
   11808:	movt	r7, #1
   1180c:	str	r0, [sp, #12]
   11810:	mov	r0, r6
   11814:	mov	r1, r4
   11818:	mov	r2, r5
   1181c:	mov	r3, r7
   11820:	str	r8, [sp]
   11824:	bl	11244 <getopt_long@plt>
   11828:	cmp	r0, #255	; 0xff
   1182c:	ble	1189c <__assert_fail@plt+0x4fc>
   11830:	cmp	r0, #256	; 0x100
   11834:	beq	11850 <__assert_fail@plt+0x4b0>
   11838:	movw	r1, #258	; 0x102
   1183c:	cmp	r0, r1
   11840:	bne	11860 <__assert_fail@plt+0x4c0>
   11844:	mov	r0, #1
   11848:	str	r0, [sp, #12]
   1184c:	b	11810 <__assert_fail@plt+0x470>
   11850:	movw	r0, #33144	; 0x8178
   11854:	movt	r0, #2
   11858:	ldr	r9, [r0]
   1185c:	b	11810 <__assert_fail@plt+0x470>
   11860:	movw	r1, #257	; 0x101
   11864:	cmp	r0, r1
   11868:	bne	11cfc <__assert_fail@plt+0x95c>
   1186c:	movw	r0, #33144	; 0x8178
   11870:	movt	r0, #2
   11874:	ldr	sl, [r0]
   11878:	mov	r0, sl
   1187c:	bl	11280 <strlen@plt>
   11880:	cmp	r0, #0
   11884:	beq	11810 <__assert_fail@plt+0x470>
   11888:	sub	r0, r0, #1
   1188c:	ldrb	r1, [sl, r0]
   11890:	cmp	r1, #58	; 0x3a
   11894:	strbeq	r8, [sl, r0]
   11898:	b	11810 <__assert_fail@plt+0x470>
   1189c:	cmn	r0, #1
   118a0:	bne	11c9c <__assert_fail@plt+0x8fc>
   118a4:	movw	r0, #33128	; 0x8168
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	cmp	r0, r6
   118b4:	bge	11d04 <__assert_fail@plt+0x964>
   118b8:	ldr	r8, [r4, r0, lsl #2]
   118bc:	mov	r0, r8
   118c0:	bl	11358 <canonicalize_file_name@plt>
   118c4:	mov	r7, r0
   118c8:	cmp	r0, #0
   118cc:	beq	118ec <__assert_fail@plt+0x54c>
   118d0:	movw	r0, #30571	; 0x776b
   118d4:	mov	r1, r7
   118d8:	movt	r0, #1
   118dc:	bl	110f4 <strcmp@plt>
   118e0:	clz	r0, r0
   118e4:	lsr	r5, r0, #5
   118e8:	b	118f0 <__assert_fail@plt+0x550>
   118ec:	mov	r5, #0
   118f0:	mov	r0, r7
   118f4:	bl	1217c <__assert_fail@plt+0xddc>
   118f8:	cmp	r5, #0
   118fc:	bne	11910 <__assert_fail@plt+0x570>
   11900:	ldr	r0, [sp, #12]
   11904:	eor	r0, r0, #1
   11908:	tst	r0, #1
   1190c:	beq	11d30 <__assert_fail@plt+0x990>
   11910:	mov	r7, #0
   11914:	cmp	r5, #0
   11918:	bne	119e0 <__assert_fail@plt+0x640>
   1191c:	cmp	sl, #0
   11920:	beq	11940 <__assert_fail@plt+0x5a0>
   11924:	mov	r0, #0
   11928:	add	r1, sp, #32
   1192c:	add	r2, sp, #28
   11930:	mov	r3, #0
   11934:	str	r0, [sp]
   11938:	mov	r0, sl
   1193c:	bl	13f44 <__assert_fail@plt+0x2ba4>
   11940:	ldr	r0, [sp, #32]
   11944:	cmn	r0, #1
   11948:	beq	119b4 <__assert_fail@plt+0x614>
   1194c:	cmp	r9, #0
   11950:	ldrne	r1, [sp, #28]
   11954:	movne	r7, #0
   11958:	cmnne	r1, #1
   1195c:	bne	119c0 <__assert_fail@plt+0x620>
   11960:	bl	11100 <getpwuid@plt>
   11964:	cmp	r0, #0
   11968:	beq	119b4 <__assert_fail@plt+0x614>
   1196c:	ldr	r1, [sp, #28]
   11970:	cmn	r1, #1
   11974:	bne	11980 <__assert_fail@plt+0x5e0>
   11978:	ldr	r1, [r0, #12]
   1197c:	str	r1, [sp, #28]
   11980:	ldr	r7, [r0]
   11984:	cmp	r9, #0
   11988:	bne	119c0 <__assert_fail@plt+0x620>
   1198c:	cmp	r7, #0
   11990:	ldrne	r1, [sp, #28]
   11994:	cmnne	r1, #1
   11998:	beq	119e0 <__assert_fail@plt+0x640>
   1199c:	add	r2, sp, #24
   119a0:	mov	r0, r7
   119a4:	bl	14f28 <__assert_fail@plt+0x3b88>
   119a8:	cmp	r0, #1
   119ac:	strge	r0, [sp, #20]
   119b0:	b	119e0 <__assert_fail@plt+0x640>
   119b4:	mov	r7, #0
   119b8:	cmp	r9, #0
   119bc:	beq	1198c <__assert_fail@plt+0x5ec>
   119c0:	ldrb	r0, [r9]
   119c4:	cmp	r0, #0
   119c8:	beq	119e0 <__assert_fail@plt+0x640>
   119cc:	add	r1, sp, #24
   119d0:	add	r2, sp, #20
   119d4:	mov	r0, r9
   119d8:	mov	r3, #0
   119dc:	bl	11e4c <__assert_fail@plt+0xaac>
   119e0:	mov	r0, r8
   119e4:	bl	111cc <chroot@plt>
   119e8:	cmp	r0, #0
   119ec:	bne	11d74 <__assert_fail@plt+0x9d4>
   119f0:	ldr	r0, [sp, #12]
   119f4:	tst	r0, #1
   119f8:	bne	11a10 <__assert_fail@plt+0x670>
   119fc:	movw	r0, #30571	; 0x776b
   11a00:	movt	r0, #1
   11a04:	bl	11184 <chdir@plt>
   11a08:	cmp	r0, #0
   11a0c:	bne	11df0 <__assert_fail@plt+0xa50>
   11a10:	movw	r0, #33128	; 0x8168
   11a14:	movt	r0, #2
   11a18:	ldr	r0, [r0]
   11a1c:	add	r0, r0, #1
   11a20:	cmp	r0, r6
   11a24:	bne	11a68 <__assert_fail@plt+0x6c8>
   11a28:	movw	r0, #28780	; 0x706c
   11a2c:	movt	r0, #1
   11a30:	bl	111fc <getenv@plt>
   11a34:	movw	r2, #28794	; 0x707a
   11a38:	movw	r3, #28786	; 0x7072
   11a3c:	cmp	r0, #0
   11a40:	mov	r1, #0
   11a44:	movt	r2, #1
   11a48:	movt	r3, #1
   11a4c:	movne	r3, r0
   11a50:	str	r3, [r4]
   11a54:	str	r2, [r4, #4]
   11a58:	str	r1, [r4, #8]
   11a5c:	cmp	sl, #0
   11a60:	bne	11a74 <__assert_fail@plt+0x6d4>
   11a64:	b	11ad0 <__assert_fail@plt+0x730>
   11a68:	add	r4, r4, r0, lsl #2
   11a6c:	cmp	sl, #0
   11a70:	beq	11ad0 <__assert_fail@plt+0x730>
   11a74:	mov	r0, #0
   11a78:	add	r1, sp, #32
   11a7c:	add	r2, sp, #28
   11a80:	mov	r3, #0
   11a84:	str	r0, [sp]
   11a88:	mov	r0, sl
   11a8c:	bl	13f44 <__assert_fail@plt+0x2ba4>
   11a90:	cmp	r0, #0
   11a94:	beq	11ad0 <__assert_fail@plt+0x730>
   11a98:	mov	r5, r0
   11a9c:	ldr	r0, [sp, #32]
   11aa0:	cmn	r0, #1
   11aa4:	bne	11adc <__assert_fail@plt+0x73c>
   11aa8:	ldr	r0, [sp, #28]
   11aac:	cmn	r0, #1
   11ab0:	bne	11b2c <__assert_fail@plt+0x78c>
   11ab4:	bl	11298 <__errno_location@plt>
   11ab8:	ldr	r1, [r0]
   11abc:	movw	r2, #29543	; 0x7367
   11ac0:	mov	r0, #125	; 0x7d
   11ac4:	mov	r3, r5
   11ac8:	movt	r2, #1
   11acc:	bl	111f0 <error@plt>
   11ad0:	ldr	r0, [sp, #32]
   11ad4:	cmn	r0, #1
   11ad8:	beq	11b2c <__assert_fail@plt+0x78c>
   11adc:	cmp	r9, #0
   11ae0:	ldrne	r1, [sp, #28]
   11ae4:	cmnne	r1, #1
   11ae8:	bne	11b14 <__assert_fail@plt+0x774>
   11aec:	bl	11100 <getpwuid@plt>
   11af0:	ldr	r1, [sp, #28]
   11af4:	cmp	r0, #0
   11af8:	beq	11b24 <__assert_fail@plt+0x784>
   11afc:	cmn	r1, #1
   11b00:	bne	11b0c <__assert_fail@plt+0x76c>
   11b04:	ldr	r1, [r0, #12]
   11b08:	str	r1, [sp, #28]
   11b0c:	ldr	r7, [r0]
   11b10:	b	11b2c <__assert_fail@plt+0x78c>
   11b14:	ldr	r5, [sp, #24]
   11b18:	mov	r0, #0
   11b1c:	str	r0, [sp, #16]
   11b20:	b	11b40 <__assert_fail@plt+0x7a0>
   11b24:	cmn	r1, #1
   11b28:	beq	11e1c <__assert_fail@plt+0xa7c>
   11b2c:	ldr	r5, [sp, #24]
   11b30:	mov	r0, #0
   11b34:	cmp	r9, #0
   11b38:	str	r0, [sp, #16]
   11b3c:	beq	11b88 <__assert_fail@plt+0x7e8>
   11b40:	ldrb	r0, [r9]
   11b44:	cmp	r0, #0
   11b48:	beq	11bac <__assert_fail@plt+0x80c>
   11b4c:	ldr	r0, [sp, #20]
   11b50:	add	r1, sp, #16
   11b54:	add	r2, sp, #20
   11b58:	clz	r0, r0
   11b5c:	lsr	r3, r0, #5
   11b60:	mov	r0, r9
   11b64:	bl	11e4c <__assert_fail@plt+0xaac>
   11b68:	cmp	r0, #0
   11b6c:	beq	11ba8 <__assert_fail@plt+0x808>
   11b70:	ldr	r0, [sp, #20]
   11b74:	cmp	r0, #0
   11b78:	bne	11bac <__assert_fail@plt+0x80c>
   11b7c:	mov	r0, #125	; 0x7d
   11b80:	sub	sp, fp, #28
   11b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b88:	cmp	r7, #0
   11b8c:	ldrne	r1, [sp, #28]
   11b90:	cmnne	r1, #1
   11b94:	bne	11c5c <__assert_fail@plt+0x8bc>
   11b98:	ldr	r0, [sp, #32]
   11b9c:	cmn	r0, #1
   11ba0:	bne	11bac <__assert_fail@plt+0x80c>
   11ba4:	b	11bc0 <__assert_fail@plt+0x820>
   11ba8:	ldr	r5, [sp, #16]
   11bac:	ldr	r0, [sp, #20]
   11bb0:	mov	r1, r5
   11bb4:	bl	1119c <setgroups@plt>
   11bb8:	cmp	r0, #0
   11bbc:	bne	11db4 <__assert_fail@plt+0xa14>
   11bc0:	ldr	r0, [sp, #16]
   11bc4:	bl	1217c <__assert_fail@plt+0xddc>
   11bc8:	ldr	r0, [sp, #24]
   11bcc:	bl	1217c <__assert_fail@plt+0xddc>
   11bd0:	ldr	r0, [sp, #28]
   11bd4:	cmn	r0, #1
   11bd8:	beq	11be8 <__assert_fail@plt+0x848>
   11bdc:	bl	11208 <setgid@plt>
   11be0:	cmp	r0, #0
   11be4:	bne	11dc8 <__assert_fail@plt+0xa28>
   11be8:	ldr	r0, [sp, #32]
   11bec:	cmn	r0, #1
   11bf0:	beq	11c00 <__assert_fail@plt+0x860>
   11bf4:	bl	11340 <setuid@plt>
   11bf8:	cmp	r0, #0
   11bfc:	bne	11ddc <__assert_fail@plt+0xa3c>
   11c00:	ldr	r0, [r4]
   11c04:	mov	r1, r4
   11c08:	bl	1113c <execvp@plt>
   11c0c:	bl	11298 <__errno_location@plt>
   11c10:	movw	r1, #28949	; 0x7115
   11c14:	ldr	r5, [r0]
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	movt	r1, #1
   11c24:	bl	11160 <dcgettext@plt>
   11c28:	mov	r6, r0
   11c2c:	ldr	r0, [r4]
   11c30:	bl	13df8 <__assert_fail@plt+0x2a58>
   11c34:	mov	r3, r0
   11c38:	mov	r0, #0
   11c3c:	mov	r1, r5
   11c40:	mov	r2, r6
   11c44:	bl	111f0 <error@plt>
   11c48:	cmp	r5, #2
   11c4c:	mov	r0, #126	; 0x7e
   11c50:	movweq	r0, #127	; 0x7f
   11c54:	sub	sp, fp, #28
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c5c:	add	r2, sp, #16
   11c60:	mov	r0, r7
   11c64:	bl	14f28 <__assert_fail@plt+0x3b88>
   11c68:	cmp	r0, #0
   11c6c:	ble	11c7c <__assert_fail@plt+0x8dc>
   11c70:	ldr	r5, [sp, #16]
   11c74:	str	r0, [sp, #20]
   11c78:	b	11b98 <__assert_fail@plt+0x7f8>
   11c7c:	ldr	r0, [sp, #20]
   11c80:	cmp	r0, #0
   11c84:	bne	11b98 <__assert_fail@plt+0x7f8>
   11c88:	bl	11298 <__errno_location@plt>
   11c8c:	ldr	r4, [r0]
   11c90:	movw	r1, #28836	; 0x70a4
   11c94:	movt	r1, #1
   11c98:	b	11e00 <__assert_fail@plt+0xa60>
   11c9c:	cmn	r0, #3
   11ca0:	bne	11cec <__assert_fail@plt+0x94c>
   11ca4:	movw	r0, #33048	; 0x8118
   11ca8:	movw	r2, #28627	; 0x6fd3
   11cac:	mov	r1, #0
   11cb0:	movt	r0, #2
   11cb4:	movt	r2, #1
   11cb8:	str	r1, [sp, #4]
   11cbc:	movw	r1, #28580	; 0x6fa4
   11cc0:	movt	r1, #1
   11cc4:	ldr	r3, [r0]
   11cc8:	movw	r0, #33140	; 0x8174
   11ccc:	str	r2, [sp]
   11cd0:	movw	r2, #28613	; 0x6fc5
   11cd4:	movt	r0, #2
   11cd8:	movt	r2, #1
   11cdc:	ldr	r0, [r0]
   11ce0:	bl	14774 <__assert_fail@plt+0x33d4>
   11ce4:	mov	r0, #0
   11ce8:	bl	1125c <exit@plt>
   11cec:	cmn	r0, #2
   11cf0:	bne	11cfc <__assert_fail@plt+0x95c>
   11cf4:	mov	r0, #0
   11cf8:	bl	1149c <__assert_fail@plt+0xfc>
   11cfc:	mov	r0, #125	; 0x7d
   11d00:	bl	1149c <__assert_fail@plt+0xfc>
   11d04:	movw	r1, #28642	; 0x6fe2
   11d08:	mov	r0, #0
   11d0c:	mov	r2, #5
   11d10:	movt	r1, #1
   11d14:	bl	11160 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	mov	r0, #0
   11d20:	mov	r1, #0
   11d24:	bl	111f0 <error@plt>
   11d28:	mov	r0, #125	; 0x7d
   11d2c:	bl	1149c <__assert_fail@plt+0xfc>
   11d30:	movw	r1, #28658	; 0x6ff2
   11d34:	mov	r0, #0
   11d38:	mov	r2, #5
   11d3c:	movt	r1, #1
   11d40:	bl	11160 <dcgettext@plt>
   11d44:	movw	r1, #30571	; 0x776b
   11d48:	mov	r4, r0
   11d4c:	mov	r0, #4
   11d50:	movt	r1, #1
   11d54:	bl	138d0 <__assert_fail@plt+0x2530>
   11d58:	mov	r3, r0
   11d5c:	mov	r0, #0
   11d60:	mov	r1, #0
   11d64:	mov	r2, r4
   11d68:	bl	111f0 <error@plt>
   11d6c:	mov	r0, #125	; 0x7d
   11d70:	bl	1149c <__assert_fail@plt+0xfc>
   11d74:	bl	11298 <__errno_location@plt>
   11d78:	movw	r1, #28714	; 0x702a
   11d7c:	ldr	r4, [r0]
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	11160 <dcgettext@plt>
   11d90:	mov	r6, r0
   11d94:	mov	r0, #4
   11d98:	mov	r1, r8
   11d9c:	bl	138d0 <__assert_fail@plt+0x2530>
   11da0:	mov	r3, r0
   11da4:	mov	r0, #125	; 0x7d
   11da8:	mov	r1, r4
   11dac:	mov	r2, r6
   11db0:	bl	111f0 <error@plt>
   11db4:	bl	11298 <__errno_location@plt>
   11db8:	ldr	r4, [r0]
   11dbc:	movw	r1, #28870	; 0x70c6
   11dc0:	movt	r1, #1
   11dc4:	b	11e00 <__assert_fail@plt+0xa60>
   11dc8:	bl	11298 <__errno_location@plt>
   11dcc:	ldr	r4, [r0]
   11dd0:	movw	r1, #28904	; 0x70e8
   11dd4:	movt	r1, #1
   11dd8:	b	11e00 <__assert_fail@plt+0xa60>
   11ddc:	bl	11298 <__errno_location@plt>
   11de0:	ldr	r4, [r0]
   11de4:	movw	r1, #28927	; 0x70ff
   11de8:	movt	r1, #1
   11dec:	b	11e00 <__assert_fail@plt+0xa60>
   11df0:	bl	11298 <__errno_location@plt>
   11df4:	ldr	r4, [r0]
   11df8:	movw	r1, #28749	; 0x704d
   11dfc:	movt	r1, #1
   11e00:	mov	r0, #0
   11e04:	mov	r2, #5
   11e08:	bl	11160 <dcgettext@plt>
   11e0c:	mov	r2, r0
   11e10:	mov	r0, #125	; 0x7d
   11e14:	mov	r1, r4
   11e18:	bl	111f0 <error@plt>
   11e1c:	bl	11298 <__errno_location@plt>
   11e20:	movw	r1, #28797	; 0x707d
   11e24:	ldr	r4, [r0]
   11e28:	mov	r0, #0
   11e2c:	mov	r2, #5
   11e30:	movt	r1, #1
   11e34:	bl	11160 <dcgettext@plt>
   11e38:	ldr	r3, [sp, #32]
   11e3c:	mov	r2, r0
   11e40:	mov	r0, #125	; 0x7d
   11e44:	mov	r1, r4
   11e48:	bl	111f0 <error@plt>
   11e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e50:	add	fp, sp, #28
   11e54:	sub	sp, sp, #36	; 0x24
   11e58:	mov	r8, #0
   11e5c:	str	r3, [sp, #20]
   11e60:	str	r2, [sp, #4]
   11e64:	str	r1, [sp, #12]
   11e68:	str	r0, [sp, #8]
   11e6c:	str	r8, [sp, #32]
   11e70:	bl	14eac <__assert_fail@plt+0x3b0c>
   11e74:	movw	r1, #29318	; 0x7286
   11e78:	str	r0, [sp, #16]
   11e7c:	movt	r1, #1
   11e80:	bl	11304 <strtok@plt>
   11e84:	cmp	r0, #0
   11e88:	beq	11fe0 <__assert_fail@plt+0xc40>
   11e8c:	movw	r7, #28196	; 0x6e24
   11e90:	mov	r4, r0
   11e94:	mov	r6, #0
   11e98:	add	r5, sp, #24
   11e9c:	mov	sl, #0
   11ea0:	mov	r9, #0
   11ea4:	mov	r8, #0
   11ea8:	movt	r7, #1
   11eac:	b	11ed8 <__assert_fail@plt+0xb38>
   11eb0:	ldr	r0, [sp, #24]
   11eb4:	str	r0, [r9, r8, lsl #2]
   11eb8:	add	r8, r8, #1
   11ebc:	movw	r1, #29318	; 0x7286
   11ec0:	mov	r0, #0
   11ec4:	movt	r1, #1
   11ec8:	bl	11304 <strtok@plt>
   11ecc:	mov	r4, r0
   11ed0:	cmp	r0, #0
   11ed4:	beq	11fe8 <__assert_fail@plt+0xc48>
   11ed8:	mov	r0, r4
   11edc:	mov	r1, #0
   11ee0:	mov	r2, #10
   11ee4:	mov	r3, r5
   11ee8:	str	r7, [sp]
   11eec:	bl	15788 <__assert_fail@plt+0x43e8>
   11ef0:	cmp	r0, #0
   11ef4:	ldreq	r0, [sp, #28]
   11ef8:	cmpeq	r0, #0
   11efc:	beq	11f20 <__assert_fail@plt+0xb80>
   11f00:	mov	r0, r4
   11f04:	bl	11394 <getgrnam@plt>
   11f08:	cmp	r0, #0
   11f0c:	beq	11f7c <__assert_fail@plt+0xbdc>
   11f10:	ldr	r0, [r0, #8]
   11f14:	str	r6, [sp, #28]
   11f18:	str	r0, [sp, #24]
   11f1c:	b	11f58 <__assert_fail@plt+0xbb8>
   11f20:	sub	r4, r4, #1
   11f24:	bl	11250 <__ctype_b_loc@plt>
   11f28:	ldr	r0, [r0]
   11f2c:	ldrb	r1, [r4, #1]!
   11f30:	add	r2, r0, r1, lsl #1
   11f34:	ldrb	r2, [r2, #1]
   11f38:	tst	r2, #32
   11f3c:	bne	11f2c <__assert_fail@plt+0xb8c>
   11f40:	cmp	r1, #43	; 0x2b
   11f44:	beq	11f58 <__assert_fail@plt+0xbb8>
   11f48:	mov	r0, r4
   11f4c:	bl	11394 <getgrnam@plt>
   11f50:	cmp	r0, #0
   11f54:	bne	11f10 <__assert_fail@plt+0xb70>
   11f58:	ldr	r0, [sp, #32]
   11f5c:	cmp	r8, r0
   11f60:	bne	11eb0 <__assert_fail@plt+0xb10>
   11f64:	mov	r0, r9
   11f68:	add	r1, sp, #32
   11f6c:	mov	r2, #4
   11f70:	bl	14b54 <__assert_fail@plt+0x37b4>
   11f74:	mov	r9, r0
   11f78:	b	11eb0 <__assert_fail@plt+0xb10>
   11f7c:	ldr	r0, [sp, #20]
   11f80:	cmp	r0, #0
   11f84:	beq	12034 <__assert_fail@plt+0xc94>
   11f88:	bl	11298 <__errno_location@plt>
   11f8c:	movw	r1, #29320	; 0x7288
   11f90:	mov	sl, r5
   11f94:	mov	r5, r7
   11f98:	ldr	r7, [r0]
   11f9c:	mov	r0, #0
   11fa0:	mov	r2, #5
   11fa4:	movt	r1, #1
   11fa8:	bl	11160 <dcgettext@plt>
   11fac:	mov	r6, r0
   11fb0:	mov	r0, r4
   11fb4:	bl	13df8 <__assert_fail@plt+0x2a58>
   11fb8:	mov	r3, r0
   11fbc:	mov	r1, r7
   11fc0:	mov	r2, r6
   11fc4:	mov	r0, #0
   11fc8:	mov	r7, r5
   11fcc:	mov	r5, sl
   11fd0:	mov	r6, #0
   11fd4:	bl	111f0 <error@plt>
   11fd8:	mvn	sl, #0
   11fdc:	b	11ebc <__assert_fail@plt+0xb1c>
   11fe0:	mov	r9, #0
   11fe4:	mov	sl, #0
   11fe8:	orrs	r0, sl, r8
   11fec:	mvneq	sl, #0
   11ff0:	bne	12044 <__assert_fail@plt+0xca4>
   11ff4:	ldr	r0, [sp, #20]
   11ff8:	cmp	r0, #0
   11ffc:	beq	12044 <__assert_fail@plt+0xca4>
   12000:	movw	r1, #29337	; 0x7299
   12004:	mov	r0, #0
   12008:	mov	r2, #5
   1200c:	movt	r1, #1
   12010:	bl	11160 <dcgettext@plt>
   12014:	mov	r4, r0
   12018:	ldr	r0, [sp, #8]
   1201c:	bl	13df8 <__assert_fail@plt+0x2a58>
   12020:	mov	r3, r0
   12024:	mov	r0, #0
   12028:	mov	r1, #0
   1202c:	mov	r2, r4
   12030:	bl	111f0 <error@plt>
   12034:	ldr	r0, [sp, #12]
   12038:	mvn	sl, #0
   1203c:	str	r9, [r0]
   12040:	b	12060 <__assert_fail@plt+0xcc0>
   12044:	ldr	r0, [sp, #12]
   12048:	cmp	sl, #0
   1204c:	str	r9, [r0]
   12050:	bne	12060 <__assert_fail@plt+0xcc0>
   12054:	ldr	r0, [sp, #4]
   12058:	mov	sl, #0
   1205c:	str	r8, [r0]
   12060:	ldr	r0, [sp, #16]
   12064:	bl	1217c <__assert_fail@plt+0xddc>
   12068:	mov	r0, sl
   1206c:	sub	sp, fp, #28
   12070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12074:	movw	r1, #33152	; 0x8180
   12078:	movt	r1, #2
   1207c:	str	r0, [r1]
   12080:	bx	lr
   12084:	movw	r1, #33156	; 0x8184
   12088:	movt	r1, #2
   1208c:	strb	r0, [r1]
   12090:	bx	lr
   12094:	push	{r4, r5, r6, sl, fp, lr}
   12098:	add	fp, sp, #16
   1209c:	sub	sp, sp, #8
   120a0:	movw	r0, #33140	; 0x8174
   120a4:	movt	r0, #2
   120a8:	ldr	r0, [r0]
   120ac:	bl	16500 <__assert_fail@plt+0x5160>
   120b0:	cmp	r0, #0
   120b4:	beq	120dc <__assert_fail@plt+0xd3c>
   120b8:	movw	r0, #33156	; 0x8184
   120bc:	movt	r0, #2
   120c0:	ldrb	r0, [r0]
   120c4:	cmp	r0, #0
   120c8:	beq	120fc <__assert_fail@plt+0xd5c>
   120cc:	bl	11298 <__errno_location@plt>
   120d0:	ldr	r0, [r0]
   120d4:	cmp	r0, #32
   120d8:	bne	120fc <__assert_fail@plt+0xd5c>
   120dc:	movw	r0, #33136	; 0x8170
   120e0:	movt	r0, #2
   120e4:	ldr	r0, [r0]
   120e8:	bl	16500 <__assert_fail@plt+0x5160>
   120ec:	cmp	r0, #0
   120f0:	subeq	sp, fp, #16
   120f4:	popeq	{r4, r5, r6, sl, fp, pc}
   120f8:	b	1216c <__assert_fail@plt+0xdcc>
   120fc:	movw	r1, #29527	; 0x7357
   12100:	mov	r0, #0
   12104:	mov	r2, #5
   12108:	movt	r1, #1
   1210c:	bl	11160 <dcgettext@plt>
   12110:	mov	r4, r0
   12114:	movw	r0, #33152	; 0x8180
   12118:	movt	r0, #2
   1211c:	ldr	r6, [r0]
   12120:	bl	11298 <__errno_location@plt>
   12124:	ldr	r5, [r0]
   12128:	cmp	r6, #0
   1212c:	bne	12148 <__assert_fail@plt+0xda8>
   12130:	movw	r2, #29543	; 0x7367
   12134:	mov	r0, #0
   12138:	mov	r1, r5
   1213c:	mov	r3, r4
   12140:	movt	r2, #1
   12144:	b	12168 <__assert_fail@plt+0xdc8>
   12148:	mov	r0, r6
   1214c:	bl	13a70 <__assert_fail@plt+0x26d0>
   12150:	movw	r2, #29539	; 0x7363
   12154:	mov	r3, r0
   12158:	str	r4, [sp]
   1215c:	mov	r0, #0
   12160:	mov	r1, r5
   12164:	movt	r2, #1
   12168:	bl	111f0 <error@plt>
   1216c:	movw	r0, #33052	; 0x811c
   12170:	movt	r0, #2
   12174:	ldr	r0, [r0]
   12178:	bl	11124 <_exit@plt>
   1217c:	push	{r4, r5, r6, sl, fp, lr}
   12180:	add	fp, sp, #16
   12184:	mov	r4, r0
   12188:	bl	11298 <__errno_location@plt>
   1218c:	ldr	r6, [r0]
   12190:	mov	r5, r0
   12194:	mov	r0, r4
   12198:	bl	11118 <free@plt>
   1219c:	str	r6, [r5]
   121a0:	pop	{r4, r5, r6, sl, fp, pc}
   121a4:	push	{r4, r5, fp, lr}
   121a8:	add	fp, sp, #8
   121ac:	cmp	r0, #0
   121b0:	beq	12244 <__assert_fail@plt+0xea4>
   121b4:	mov	r1, #47	; 0x2f
   121b8:	mov	r4, r0
   121bc:	bl	11328 <strrchr@plt>
   121c0:	cmp	r0, #0
   121c4:	mov	r5, r4
   121c8:	addne	r5, r0, #1
   121cc:	sub	r0, r5, r4
   121d0:	cmp	r0, #7
   121d4:	blt	12228 <__assert_fail@plt+0xe88>
   121d8:	movw	r1, #29602	; 0x73a2
   121dc:	sub	r0, r5, #7
   121e0:	mov	r2, #7
   121e4:	movt	r1, #1
   121e8:	bl	11370 <strncmp@plt>
   121ec:	cmp	r0, #0
   121f0:	bne	12228 <__assert_fail@plt+0xe88>
   121f4:	movw	r1, #29610	; 0x73aa
   121f8:	mov	r0, r5
   121fc:	mov	r2, #3
   12200:	movt	r1, #1
   12204:	bl	11370 <strncmp@plt>
   12208:	cmp	r0, #0
   1220c:	beq	12218 <__assert_fail@plt+0xe78>
   12210:	mov	r4, r5
   12214:	b	12228 <__assert_fail@plt+0xe88>
   12218:	movw	r0, #33120	; 0x8160
   1221c:	add	r4, r5, #3
   12220:	movt	r0, #2
   12224:	str	r4, [r0]
   12228:	movw	r0, #33124	; 0x8164
   1222c:	movt	r0, #2
   12230:	str	r4, [r0]
   12234:	movw	r0, #33160	; 0x8188
   12238:	movt	r0, #2
   1223c:	str	r4, [r0]
   12240:	pop	{r4, r5, fp, pc}
   12244:	movw	r0, #33136	; 0x8170
   12248:	mov	r1, #55	; 0x37
   1224c:	mov	r2, #1
   12250:	movt	r0, #2
   12254:	ldr	r3, [r0]
   12258:	movw	r0, #29546	; 0x736a
   1225c:	movt	r0, #1
   12260:	bl	111a8 <fwrite@plt>
   12264:	bl	1137c <abort@plt>
   12268:	push	{r4, r5, r6, sl, fp, lr}
   1226c:	add	fp, sp, #16
   12270:	mov	r4, r0
   12274:	movw	r0, #33168	; 0x8190
   12278:	movt	r0, #2
   1227c:	cmp	r4, #0
   12280:	moveq	r4, r0
   12284:	bl	11298 <__errno_location@plt>
   12288:	ldr	r6, [r0]
   1228c:	mov	r5, r0
   12290:	mov	r0, r4
   12294:	mov	r1, #48	; 0x30
   12298:	bl	14e08 <__assert_fail@plt+0x3a68>
   1229c:	str	r6, [r5]
   122a0:	pop	{r4, r5, r6, sl, fp, pc}
   122a4:	movw	r1, #33168	; 0x8190
   122a8:	cmp	r0, #0
   122ac:	movt	r1, #2
   122b0:	movne	r1, r0
   122b4:	ldr	r0, [r1]
   122b8:	bx	lr
   122bc:	movw	r2, #33168	; 0x8190
   122c0:	cmp	r0, #0
   122c4:	movt	r2, #2
   122c8:	movne	r2, r0
   122cc:	str	r1, [r2]
   122d0:	bx	lr
   122d4:	movw	r3, #33168	; 0x8190
   122d8:	cmp	r0, #0
   122dc:	and	r2, r2, #1
   122e0:	movt	r3, #2
   122e4:	movne	r3, r0
   122e8:	ubfx	r0, r1, #5, #3
   122ec:	and	r1, r1, #31
   122f0:	add	ip, r3, r0, lsl #2
   122f4:	mov	r0, #1
   122f8:	ldr	r3, [ip, #8]
   122fc:	and	r0, r0, r3, lsr r1
   12300:	eor	r2, r0, r2
   12304:	eor	r1, r3, r2, lsl r1
   12308:	str	r1, [ip, #8]
   1230c:	bx	lr
   12310:	movw	r2, #33168	; 0x8190
   12314:	cmp	r0, #0
   12318:	movt	r2, #2
   1231c:	movne	r2, r0
   12320:	ldr	r0, [r2, #4]
   12324:	str	r1, [r2, #4]
   12328:	bx	lr
   1232c:	push	{fp, lr}
   12330:	mov	fp, sp
   12334:	movw	r3, #33168	; 0x8190
   12338:	cmp	r0, #0
   1233c:	movt	r3, #2
   12340:	movne	r3, r0
   12344:	cmp	r1, #0
   12348:	mov	r0, #10
   1234c:	cmpne	r2, #0
   12350:	str	r0, [r3]
   12354:	bne	1235c <__assert_fail@plt+0xfbc>
   12358:	bl	1137c <abort@plt>
   1235c:	str	r1, [r3, #40]	; 0x28
   12360:	str	r2, [r3, #44]	; 0x2c
   12364:	pop	{fp, pc}
   12368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1236c:	add	fp, sp, #28
   12370:	sub	sp, sp, #20
   12374:	mov	r7, r0
   12378:	ldr	r0, [fp, #8]
   1237c:	movw	r5, #33168	; 0x8190
   12380:	mov	r8, r3
   12384:	mov	r9, r2
   12388:	mov	sl, r1
   1238c:	movt	r5, #2
   12390:	cmp	r0, #0
   12394:	movne	r5, r0
   12398:	bl	11298 <__errno_location@plt>
   1239c:	ldr	r2, [r5, #40]	; 0x28
   123a0:	ldr	r3, [r5, #44]	; 0x2c
   123a4:	mov	r4, r0
   123a8:	ldm	r5, {r0, r1}
   123ac:	add	r5, r5, #8
   123b0:	ldr	r6, [r4]
   123b4:	stm	sp, {r0, r1, r5}
   123b8:	mov	r0, r7
   123bc:	mov	r1, sl
   123c0:	str	r2, [sp, #12]
   123c4:	str	r3, [sp, #16]
   123c8:	mov	r2, r9
   123cc:	mov	r3, r8
   123d0:	bl	123e0 <__assert_fail@plt+0x1040>
   123d4:	str	r6, [r4]
   123d8:	sub	sp, fp, #28
   123dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e4:	add	fp, sp, #28
   123e8:	sub	sp, sp, #156	; 0x9c
   123ec:	mov	r5, r0
   123f0:	add	r0, r2, #1
   123f4:	mov	r6, r1
   123f8:	mov	sl, r3
   123fc:	str	r2, [fp, #-80]	; 0xffffffb0
   12400:	str	r0, [sp, #72]	; 0x48
   12404:	ldr	r0, [fp, #12]
   12408:	and	r1, r0, #1
   1240c:	str	r1, [sp, #36]	; 0x24
   12410:	and	r1, r0, #4
   12414:	str	r1, [sp, #32]
   12418:	ubfx	r9, r0, #1, #1
   1241c:	bl	111c0 <__ctype_get_mb_cur_max@plt>
   12420:	str	r0, [sp, #40]	; 0x28
   12424:	ldr	r0, [fp, #24]
   12428:	ldr	r7, [fp, #8]
   1242c:	mov	r1, #0
   12430:	str	r5, [fp, #-84]	; 0xffffffac
   12434:	str	r1, [fp, #-56]	; 0xffffffc8
   12438:	mov	r1, #0
   1243c:	str	r1, [sp, #60]	; 0x3c
   12440:	mov	r1, #1
   12444:	str	r1, [fp, #-48]	; 0xffffffd0
   12448:	str	r0, [sp, #80]	; 0x50
   1244c:	ldr	r0, [fp, #20]
   12450:	str	r0, [sp, #76]	; 0x4c
   12454:	mov	r0, #0
   12458:	str	r0, [sp, #56]	; 0x38
   1245c:	mov	r0, #0
   12460:	str	r0, [fp, #-88]	; 0xffffffa8
   12464:	mov	r0, #0
   12468:	str	r0, [fp, #-72]	; 0xffffffb8
   1246c:	mov	r0, #0
   12470:	cmp	r7, #10
   12474:	bhi	13408 <__assert_fail@plt+0x2068>
   12478:	add	r1, pc, #24
   1247c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12480:	mov	r4, r6
   12484:	mov	r8, #0
   12488:	mov	r2, #1
   1248c:	mov	r3, #0
   12490:	mov	lr, sl
   12494:	ldr	pc, [r1, r7, lsl #2]
   12498:	andeq	r2, r1, ip, asr r5
   1249c:			; <UNDEFINED> instruction: 0x000125b0
   124a0:	andeq	r2, r1, r0, ror r5
   124a4:	andeq	r2, r1, r4, asr r5
   124a8:	andeq	r2, r1, r4, lsr #11
   124ac:	ldrdeq	r2, [r1], -r8
   124b0:	andeq	r2, r1, r0, lsl #11
   124b4:	andeq	r2, r1, ip, asr r6
   124b8:	andeq	r2, r1, r4, asr #9
   124bc:	andeq	r2, r1, r4, asr #9
   124c0:	andeq	r2, r1, ip, ror #9
   124c4:	movw	r0, #29692	; 0x73fc
   124c8:	mov	r1, r7
   124cc:	movt	r0, #1
   124d0:	bl	13e10 <__assert_fail@plt+0x2a70>
   124d4:	str	r0, [sp, #76]	; 0x4c
   124d8:	movw	r0, #29694	; 0x73fe
   124dc:	mov	r1, r7
   124e0:	movt	r0, #1
   124e4:	bl	13e10 <__assert_fail@plt+0x2a70>
   124e8:	str	r0, [sp, #80]	; 0x50
   124ec:	mov	r8, #0
   124f0:	tst	r9, #1
   124f4:	bne	1252c <__assert_fail@plt+0x118c>
   124f8:	ldr	r0, [sp, #76]	; 0x4c
   124fc:	ldrb	r0, [r0]
   12500:	cmp	r0, #0
   12504:	beq	1252c <__assert_fail@plt+0x118c>
   12508:	ldr	r1, [sp, #76]	; 0x4c
   1250c:	mov	r8, #0
   12510:	add	r1, r1, #1
   12514:	cmp	r8, r4
   12518:	strbcc	r0, [r5, r8]
   1251c:	ldrb	r0, [r1, r8]
   12520:	add	r8, r8, #1
   12524:	cmp	r0, #0
   12528:	bne	12514 <__assert_fail@plt+0x1174>
   1252c:	ldr	r6, [sp, #80]	; 0x50
   12530:	mov	r0, r6
   12534:	bl	11280 <strlen@plt>
   12538:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1253c:	str	r0, [fp, #-72]	; 0xffffffb8
   12540:	str	r6, [fp, #-88]	; 0xffffffa8
   12544:	mov	r2, #1
   12548:	mov	r3, r9
   1254c:	mov	lr, sl
   12550:	b	1265c <__assert_fail@plt+0x12bc>
   12554:	mov	r0, #1
   12558:	b	125b0 <__assert_fail@plt+0x1210>
   1255c:	mov	r7, #0
   12560:	mov	r8, #0
   12564:	mov	r2, r0
   12568:	mov	r3, #0
   1256c:	b	1265c <__assert_fail@plt+0x12bc>
   12570:	tst	r9, #1
   12574:	bne	125b0 <__assert_fail@plt+0x1210>
   12578:	mov	r2, r0
   1257c:	b	12608 <__assert_fail@plt+0x1268>
   12580:	mov	r0, #1
   12584:	mov	r8, #0
   12588:	mov	r7, #5
   1258c:	mov	r2, #1
   12590:	str	r0, [fp, #-72]	; 0xffffffb8
   12594:	movw	r0, #29690	; 0x73fa
   12598:	movt	r0, #1
   1259c:	str	r0, [fp, #-88]	; 0xffffffa8
   125a0:	b	125d0 <__assert_fail@plt+0x1230>
   125a4:	mov	r2, #1
   125a8:	tst	r9, #1
   125ac:	beq	12608 <__assert_fail@plt+0x1268>
   125b0:	mov	r1, #1
   125b4:	mov	r8, #0
   125b8:	mov	r7, #2
   125bc:	mov	r2, r0
   125c0:	str	r1, [fp, #-72]	; 0xffffffb8
   125c4:	movw	r1, #29694	; 0x73fe
   125c8:	movt	r1, #1
   125cc:	str	r1, [fp, #-88]	; 0xffffffa8
   125d0:	mov	r3, #1
   125d4:	b	1265c <__assert_fail@plt+0x12bc>
   125d8:	tst	r9, #1
   125dc:	beq	1262c <__assert_fail@plt+0x128c>
   125e0:	mov	r0, #1
   125e4:	mov	r8, #0
   125e8:	mov	r2, #1
   125ec:	mov	r3, #1
   125f0:	mov	r7, #5
   125f4:	str	r0, [fp, #-72]	; 0xffffffb8
   125f8:	movw	r0, #29690	; 0x73fa
   125fc:	movt	r0, #1
   12600:	str	r0, [fp, #-88]	; 0xffffffa8
   12604:	b	1265c <__assert_fail@plt+0x12bc>
   12608:	cmp	r4, #0
   1260c:	mov	r8, #1
   12610:	mov	r3, #0
   12614:	mov	r7, #2
   12618:	movne	r0, #39	; 0x27
   1261c:	strbne	r0, [r5]
   12620:	movw	r0, #29694	; 0x73fe
   12624:	movt	r0, #1
   12628:	b	12650 <__assert_fail@plt+0x12b0>
   1262c:	cmp	r4, #0
   12630:	mov	r8, #1
   12634:	mov	r2, #1
   12638:	mov	r7, #5
   1263c:	mov	r3, #0
   12640:	movne	r0, #34	; 0x22
   12644:	strbne	r0, [r5]
   12648:	movw	r0, #29690	; 0x73fa
   1264c:	movt	r0, #1
   12650:	str	r0, [fp, #-88]	; 0xffffffa8
   12654:	mov	r0, #1
   12658:	str	r0, [fp, #-72]	; 0xffffffb8
   1265c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12660:	eor	r6, r3, #1
   12664:	str	r7, [fp, #-68]	; 0xffffffbc
   12668:	str	r3, [fp, #-76]	; 0xffffffb4
   1266c:	str	r2, [sp, #84]	; 0x54
   12670:	str	r6, [sp, #92]	; 0x5c
   12674:	cmp	r0, #0
   12678:	movwne	r0, #1
   1267c:	and	r1, r0, r3
   12680:	and	r1, r2, r1
   12684:	str	r1, [sp, #48]	; 0x30
   12688:	sub	r1, r7, #2
   1268c:	clz	r1, r1
   12690:	lsr	r1, r1, #5
   12694:	and	r1, r1, r3
   12698:	str	r1, [sp, #64]	; 0x40
   1269c:	subs	r1, r7, #2
   126a0:	mov	r7, #0
   126a4:	movwne	r1, #1
   126a8:	orr	r6, r1, r6
   126ac:	and	r1, r1, r2
   126b0:	and	r0, r0, r1
   126b4:	str	r6, [sp, #68]	; 0x44
   126b8:	str	r0, [fp, #-60]	; 0xffffffc4
   126bc:	orr	r0, r1, r3
   126c0:	ldr	r1, [fp, #16]
   126c4:	eor	r0, r0, #1
   126c8:	clz	r1, r1
   126cc:	lsr	r1, r1, #5
   126d0:	orr	r0, r1, r0
   126d4:	str	r0, [fp, #-64]	; 0xffffffc0
   126d8:	eor	r0, r2, #1
   126dc:	str	r0, [sp, #52]	; 0x34
   126e0:	cmn	lr, #1
   126e4:	beq	126f4 <__assert_fail@plt+0x1354>
   126e8:	cmp	r7, lr
   126ec:	bne	12700 <__assert_fail@plt+0x1360>
   126f0:	b	13248 <__assert_fail@plt+0x1ea8>
   126f4:	ldrb	r0, [ip, r7]
   126f8:	cmp	r0, #0
   126fc:	beq	13250 <__assert_fail@plt+0x1eb0>
   12700:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12704:	mov	sl, #0
   12708:	cmp	r0, #0
   1270c:	beq	12744 <__assert_fail@plt+0x13a4>
   12710:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12714:	add	r5, r7, r0
   12718:	cmp	r0, #2
   1271c:	bcc	12738 <__assert_fail@plt+0x1398>
   12720:	cmn	lr, #1
   12724:	bne	12738 <__assert_fail@plt+0x1398>
   12728:	mov	r0, ip
   1272c:	bl	11280 <strlen@plt>
   12730:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12734:	mov	lr, r0
   12738:	cmp	r5, lr
   1273c:	bls	1274c <__assert_fail@plt+0x13ac>
   12740:	ldr	r5, [fp, #-84]	; 0xffffffac
   12744:	mov	r0, #0
   12748:	b	12798 <__assert_fail@plt+0x13f8>
   1274c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12750:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12754:	add	r0, ip, r7
   12758:	mov	r6, r4
   1275c:	mov	r4, lr
   12760:	bl	11268 <bcmp@plt>
   12764:	ldr	r2, [sp, #92]	; 0x5c
   12768:	cmp	r0, #0
   1276c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12770:	mov	r1, r0
   12774:	movwne	r1, #1
   12778:	orr	r1, r1, r2
   1277c:	tst	r1, #1
   12780:	beq	132d8 <__assert_fail@plt+0x1f38>
   12784:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12788:	clz	r0, r0
   1278c:	mov	lr, r4
   12790:	mov	r4, r6
   12794:	lsr	r0, r0, #5
   12798:	str	r0, [fp, #-52]	; 0xffffffcc
   1279c:	ldrb	r6, [ip, r7]
   127a0:	cmp	r6, #126	; 0x7e
   127a4:	bhi	12cd4 <__assert_fail@plt+0x1934>
   127a8:	add	r3, pc, #16
   127ac:	mov	r9, #1
   127b0:	mov	r2, #110	; 0x6e
   127b4:	mov	r0, #97	; 0x61
   127b8:	mov	r1, #0
   127bc:	ldr	pc, [r3, r6, lsl #2]
   127c0:	andeq	r2, r1, r4, lsr fp
   127c4:	ldrdeq	r2, [r1], -r4
   127c8:	ldrdeq	r2, [r1], -r4
   127cc:	ldrdeq	r2, [r1], -r4
   127d0:	ldrdeq	r2, [r1], -r4
   127d4:	ldrdeq	r2, [r1], -r4
   127d8:	ldrdeq	r2, [r1], -r4
   127dc:			; <UNDEFINED> instruction: 0x00012db0
   127e0:	andeq	r2, r1, r4, lsl fp
   127e4:	andeq	r2, r1, ip, lsl #22
   127e8:	andeq	r2, r1, r0, lsr #22
   127ec:	andeq	r2, r1, ip, lsr ip
   127f0:	andeq	r2, r1, r4, lsl #22
   127f4:	andeq	r2, r1, ip, lsl fp
   127f8:	ldrdeq	r2, [r1], -r4
   127fc:	ldrdeq	r2, [r1], -r4
   12800:	ldrdeq	r2, [r1], -r4
   12804:	ldrdeq	r2, [r1], -r4
   12808:	ldrdeq	r2, [r1], -r4
   1280c:	ldrdeq	r2, [r1], -r4
   12810:	ldrdeq	r2, [r1], -r4
   12814:	ldrdeq	r2, [r1], -r4
   12818:	ldrdeq	r2, [r1], -r4
   1281c:	ldrdeq	r2, [r1], -r4
   12820:	ldrdeq	r2, [r1], -r4
   12824:	ldrdeq	r2, [r1], -r4
   12828:	ldrdeq	r2, [r1], -r4
   1282c:	ldrdeq	r2, [r1], -r4
   12830:	ldrdeq	r2, [r1], -r4
   12834:	ldrdeq	r2, [r1], -r4
   12838:	ldrdeq	r2, [r1], -r4
   1283c:	ldrdeq	r2, [r1], -r4
   12840:			; <UNDEFINED> instruction: 0x00012ab8
   12844:			; <UNDEFINED> instruction: 0x00012abc
   12848:			; <UNDEFINED> instruction: 0x00012abc
   1284c:	andeq	r2, r1, r4, lsr #21
   12850:			; <UNDEFINED> instruction: 0x00012abc
   12854:			; <UNDEFINED> instruction: 0x000129bc
   12858:			; <UNDEFINED> instruction: 0x00012abc
   1285c:	andeq	r2, r1, r4, asr #24
   12860:			; <UNDEFINED> instruction: 0x00012abc
   12864:			; <UNDEFINED> instruction: 0x00012abc
   12868:			; <UNDEFINED> instruction: 0x00012abc
   1286c:			; <UNDEFINED> instruction: 0x000129bc
   12870:			; <UNDEFINED> instruction: 0x000129bc
   12874:			; <UNDEFINED> instruction: 0x000129bc
   12878:			; <UNDEFINED> instruction: 0x000129bc
   1287c:			; <UNDEFINED> instruction: 0x000129bc
   12880:			; <UNDEFINED> instruction: 0x000129bc
   12884:			; <UNDEFINED> instruction: 0x000129bc
   12888:			; <UNDEFINED> instruction: 0x000129bc
   1288c:			; <UNDEFINED> instruction: 0x000129bc
   12890:			; <UNDEFINED> instruction: 0x000129bc
   12894:			; <UNDEFINED> instruction: 0x000129bc
   12898:			; <UNDEFINED> instruction: 0x000129bc
   1289c:			; <UNDEFINED> instruction: 0x000129bc
   128a0:			; <UNDEFINED> instruction: 0x000129bc
   128a4:			; <UNDEFINED> instruction: 0x000129bc
   128a8:			; <UNDEFINED> instruction: 0x000129bc
   128ac:			; <UNDEFINED> instruction: 0x00012abc
   128b0:			; <UNDEFINED> instruction: 0x00012abc
   128b4:			; <UNDEFINED> instruction: 0x00012abc
   128b8:			; <UNDEFINED> instruction: 0x00012abc
   128bc:	andeq	r2, r1, ip, lsl #24
   128c0:	ldrdeq	r2, [r1], -r4
   128c4:			; <UNDEFINED> instruction: 0x000129bc
   128c8:			; <UNDEFINED> instruction: 0x000129bc
   128cc:			; <UNDEFINED> instruction: 0x000129bc
   128d0:			; <UNDEFINED> instruction: 0x000129bc
   128d4:			; <UNDEFINED> instruction: 0x000129bc
   128d8:			; <UNDEFINED> instruction: 0x000129bc
   128dc:			; <UNDEFINED> instruction: 0x000129bc
   128e0:			; <UNDEFINED> instruction: 0x000129bc
   128e4:			; <UNDEFINED> instruction: 0x000129bc
   128e8:			; <UNDEFINED> instruction: 0x000129bc
   128ec:			; <UNDEFINED> instruction: 0x000129bc
   128f0:			; <UNDEFINED> instruction: 0x000129bc
   128f4:			; <UNDEFINED> instruction: 0x000129bc
   128f8:			; <UNDEFINED> instruction: 0x000129bc
   128fc:			; <UNDEFINED> instruction: 0x000129bc
   12900:			; <UNDEFINED> instruction: 0x000129bc
   12904:			; <UNDEFINED> instruction: 0x000129bc
   12908:			; <UNDEFINED> instruction: 0x000129bc
   1290c:			; <UNDEFINED> instruction: 0x000129bc
   12910:			; <UNDEFINED> instruction: 0x000129bc
   12914:			; <UNDEFINED> instruction: 0x000129bc
   12918:			; <UNDEFINED> instruction: 0x000129bc
   1291c:			; <UNDEFINED> instruction: 0x000129bc
   12920:			; <UNDEFINED> instruction: 0x000129bc
   12924:			; <UNDEFINED> instruction: 0x000129bc
   12928:			; <UNDEFINED> instruction: 0x000129bc
   1292c:			; <UNDEFINED> instruction: 0x00012abc
   12930:	andeq	r2, r1, r4, ror #21
   12934:			; <UNDEFINED> instruction: 0x000129bc
   12938:			; <UNDEFINED> instruction: 0x00012abc
   1293c:			; <UNDEFINED> instruction: 0x000129bc
   12940:			; <UNDEFINED> instruction: 0x00012abc
   12944:			; <UNDEFINED> instruction: 0x000129bc
   12948:			; <UNDEFINED> instruction: 0x000129bc
   1294c:			; <UNDEFINED> instruction: 0x000129bc
   12950:			; <UNDEFINED> instruction: 0x000129bc
   12954:			; <UNDEFINED> instruction: 0x000129bc
   12958:			; <UNDEFINED> instruction: 0x000129bc
   1295c:			; <UNDEFINED> instruction: 0x000129bc
   12960:			; <UNDEFINED> instruction: 0x000129bc
   12964:			; <UNDEFINED> instruction: 0x000129bc
   12968:			; <UNDEFINED> instruction: 0x000129bc
   1296c:			; <UNDEFINED> instruction: 0x000129bc
   12970:			; <UNDEFINED> instruction: 0x000129bc
   12974:			; <UNDEFINED> instruction: 0x000129bc
   12978:			; <UNDEFINED> instruction: 0x000129bc
   1297c:			; <UNDEFINED> instruction: 0x000129bc
   12980:			; <UNDEFINED> instruction: 0x000129bc
   12984:			; <UNDEFINED> instruction: 0x000129bc
   12988:			; <UNDEFINED> instruction: 0x000129bc
   1298c:			; <UNDEFINED> instruction: 0x000129bc
   12990:			; <UNDEFINED> instruction: 0x000129bc
   12994:			; <UNDEFINED> instruction: 0x000129bc
   12998:			; <UNDEFINED> instruction: 0x000129bc
   1299c:			; <UNDEFINED> instruction: 0x000129bc
   129a0:			; <UNDEFINED> instruction: 0x000129bc
   129a4:			; <UNDEFINED> instruction: 0x000129bc
   129a8:			; <UNDEFINED> instruction: 0x000129bc
   129ac:	andeq	r2, r1, r8, ror sl
   129b0:			; <UNDEFINED> instruction: 0x00012abc
   129b4:	andeq	r2, r1, r8, ror sl
   129b8:	andeq	r2, r1, r4, lsr #21
   129bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129c0:	tst	r0, #1
   129c4:	bne	129f0 <__assert_fail@plt+0x1650>
   129c8:	ldr	r1, [fp, #16]
   129cc:	ubfx	r0, r6, #5, #3
   129d0:	mov	r2, #1
   129d4:	ldr	r0, [r1, r0, lsl #2]
   129d8:	and	r1, r6, #31
   129dc:	tst	r0, r2, lsl r1
   129e0:	beq	129f0 <__assert_fail@plt+0x1650>
   129e4:	mov	r0, r6
   129e8:	mov	r1, r9
   129ec:	b	12a04 <__assert_fail@plt+0x1664>
   129f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   129f4:	mov	r1, r9
   129f8:	cmp	r0, #0
   129fc:	mov	r0, r6
   12a00:	beq	12d44 <__assert_fail@plt+0x19a4>
   12a04:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12a08:	tst	r2, #1
   12a0c:	bne	13314 <__assert_fail@plt+0x1f74>
   12a10:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12a14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12a18:	subs	r2, r2, #2
   12a1c:	movwne	r2, #1
   12a20:	orr	r2, r2, r3
   12a24:	tst	r2, #1
   12a28:	bne	12a64 <__assert_fail@plt+0x16c4>
   12a2c:	cmp	r8, r4
   12a30:	movcc	r2, #39	; 0x27
   12a34:	strbcc	r2, [r5, r8]
   12a38:	add	r2, r8, #1
   12a3c:	cmp	r2, r4
   12a40:	movcc	r3, #36	; 0x24
   12a44:	strbcc	r3, [r5, r2]
   12a48:	add	r2, r8, #2
   12a4c:	add	r8, r8, #3
   12a50:	cmp	r2, r4
   12a54:	movcc	r3, #39	; 0x27
   12a58:	strbcc	r3, [r5, r2]
   12a5c:	mov	r2, #1
   12a60:	str	r2, [fp, #-56]	; 0xffffffc8
   12a64:	cmp	r8, r4
   12a68:	movcc	r2, #92	; 0x5c
   12a6c:	strbcc	r2, [r5, r8]
   12a70:	add	r8, r8, #1
   12a74:	b	12d88 <__assert_fail@plt+0x19e8>
   12a78:	cmp	lr, #1
   12a7c:	beq	12aa4 <__assert_fail@plt+0x1704>
   12a80:	mov	r9, #0
   12a84:	cmn	lr, #1
   12a88:	bne	12ab0 <__assert_fail@plt+0x1710>
   12a8c:	ldrb	r0, [ip, #1]
   12a90:	cmp	r0, #0
   12a94:	beq	12aa4 <__assert_fail@plt+0x1704>
   12a98:	mvn	lr, #0
   12a9c:	mov	sl, #0
   12aa0:	b	129bc <__assert_fail@plt+0x161c>
   12aa4:	mov	r9, #0
   12aa8:	cmp	r7, #0
   12aac:	beq	12ab8 <__assert_fail@plt+0x1718>
   12ab0:	mov	sl, #0
   12ab4:	b	129bc <__assert_fail@plt+0x161c>
   12ab8:	mov	r1, #1
   12abc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ac0:	cmp	r0, #2
   12ac4:	bne	12adc <__assert_fail@plt+0x173c>
   12ac8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12acc:	mov	r9, r1
   12ad0:	tst	r0, #1
   12ad4:	beq	129bc <__assert_fail@plt+0x161c>
   12ad8:	b	13314 <__assert_fail@plt+0x1f74>
   12adc:	mov	r9, r1
   12ae0:	b	129bc <__assert_fail@plt+0x161c>
   12ae4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ae8:	cmp	r0, #2
   12aec:	bne	12d28 <__assert_fail@plt+0x1988>
   12af0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12af4:	tst	r0, #1
   12af8:	bne	13314 <__assert_fail@plt+0x1f74>
   12afc:	mov	sl, #0
   12b00:	b	12d3c <__assert_fail@plt+0x199c>
   12b04:	mov	r0, #102	; 0x66
   12b08:	b	12db0 <__assert_fail@plt+0x1a10>
   12b0c:	mov	r2, #116	; 0x74
   12b10:	b	12b20 <__assert_fail@plt+0x1780>
   12b14:	mov	r0, #98	; 0x62
   12b18:	b	12db0 <__assert_fail@plt+0x1a10>
   12b1c:	mov	r2, #114	; 0x72
   12b20:	ldr	r0, [sp, #68]	; 0x44
   12b24:	tst	r0, #1
   12b28:	mov	r0, r2
   12b2c:	bne	12db0 <__assert_fail@plt+0x1a10>
   12b30:	b	13314 <__assert_fail@plt+0x1f74>
   12b34:	ldr	r0, [sp, #84]	; 0x54
   12b38:	tst	r0, #1
   12b3c:	beq	12dcc <__assert_fail@plt+0x1a2c>
   12b40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b44:	tst	r0, #1
   12b48:	bne	13400 <__assert_fail@plt+0x2060>
   12b4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b50:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12b54:	subs	r0, r0, #2
   12b58:	movwne	r0, #1
   12b5c:	orr	r0, r0, r1
   12b60:	tst	r0, #1
   12b64:	bne	12ba0 <__assert_fail@plt+0x1800>
   12b68:	cmp	r8, r4
   12b6c:	movcc	r0, #39	; 0x27
   12b70:	strbcc	r0, [r5, r8]
   12b74:	add	r0, r8, #1
   12b78:	cmp	r0, r4
   12b7c:	movcc	r1, #36	; 0x24
   12b80:	strbcc	r1, [r5, r0]
   12b84:	add	r0, r8, #2
   12b88:	add	r8, r8, #3
   12b8c:	cmp	r0, r4
   12b90:	movcc	r1, #39	; 0x27
   12b94:	strbcc	r1, [r5, r0]
   12b98:	mov	r0, #1
   12b9c:	str	r0, [fp, #-56]	; 0xffffffc8
   12ba0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12ba4:	cmp	r8, r4
   12ba8:	mov	r9, #0
   12bac:	mov	sl, #1
   12bb0:	mov	r6, #48	; 0x30
   12bb4:	movcc	r0, #92	; 0x5c
   12bb8:	strbcc	r0, [r5, r8]
   12bbc:	add	r0, r8, #1
   12bc0:	cmp	r1, #2
   12bc4:	beq	12f94 <__assert_fail@plt+0x1bf4>
   12bc8:	add	r1, r7, #1
   12bcc:	cmp	r1, lr
   12bd0:	bcs	12f94 <__assert_fail@plt+0x1bf4>
   12bd4:	ldrb	r1, [ip, r1]
   12bd8:	sub	r1, r1, #48	; 0x30
   12bdc:	uxtb	r1, r1
   12be0:	cmp	r1, #9
   12be4:	bhi	12f94 <__assert_fail@plt+0x1bf4>
   12be8:	cmp	r0, r4
   12bec:	movcc	r1, #48	; 0x30
   12bf0:	strbcc	r1, [r5, r0]
   12bf4:	add	r0, r8, #2
   12bf8:	add	r8, r8, #3
   12bfc:	cmp	r0, r4
   12c00:	movcc	r1, #48	; 0x30
   12c04:	strbcc	r1, [r5, r0]
   12c08:	b	129bc <__assert_fail@plt+0x161c>
   12c0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c10:	mov	sl, #0
   12c14:	mov	r6, #63	; 0x3f
   12c18:	cmp	r0, #5
   12c1c:	beq	12f9c <__assert_fail@plt+0x1bfc>
   12c20:	cmp	r0, #2
   12c24:	bne	13044 <__assert_fail@plt+0x1ca4>
   12c28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c2c:	mov	r9, #0
   12c30:	tst	r0, #1
   12c34:	beq	129bc <__assert_fail@plt+0x161c>
   12c38:	b	13314 <__assert_fail@plt+0x1f74>
   12c3c:	mov	r0, #118	; 0x76
   12c40:	b	12db0 <__assert_fail@plt+0x1a10>
   12c44:	mov	r0, #1
   12c48:	mov	r6, #39	; 0x27
   12c4c:	str	r0, [sp, #60]	; 0x3c
   12c50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c54:	cmp	r0, #2
   12c58:	bne	12de8 <__assert_fail@plt+0x1a48>
   12c5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c60:	tst	r0, #1
   12c64:	bne	13314 <__assert_fail@plt+0x1f74>
   12c68:	ldr	r2, [sp, #56]	; 0x38
   12c6c:	clz	r1, r4
   12c70:	mov	sl, #0
   12c74:	mov	r9, #1
   12c78:	lsr	r1, r1, #5
   12c7c:	cmp	r2, #0
   12c80:	mov	r0, r2
   12c84:	movwne	r0, #1
   12c88:	orrs	r0, r0, r1
   12c8c:	moveq	r2, r4
   12c90:	moveq	r4, r0
   12c94:	cmp	r8, r4
   12c98:	str	r2, [sp, #56]	; 0x38
   12c9c:	movcc	r0, #39	; 0x27
   12ca0:	strbcc	r0, [r5, r8]
   12ca4:	add	r0, r8, #1
   12ca8:	cmp	r0, r4
   12cac:	movcc	r1, #92	; 0x5c
   12cb0:	strbcc	r1, [r5, r0]
   12cb4:	add	r0, r8, #2
   12cb8:	add	r8, r8, #3
   12cbc:	cmp	r0, r4
   12cc0:	movcc	r1, #39	; 0x27
   12cc4:	strbcc	r1, [r5, r0]
   12cc8:	mov	r0, #0
   12ccc:	str	r0, [fp, #-56]	; 0xffffffc8
   12cd0:	b	129bc <__assert_fail@plt+0x161c>
   12cd4:	ldr	r0, [sp, #40]	; 0x28
   12cd8:	str	r4, [sp, #88]	; 0x58
   12cdc:	cmp	r0, #1
   12ce0:	bne	12df0 <__assert_fail@plt+0x1a50>
   12ce4:	str	lr, [sp, #28]
   12ce8:	bl	11250 <__ctype_b_loc@plt>
   12cec:	ldr	r0, [r0]
   12cf0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12cf4:	mov	r2, #1
   12cf8:	add	r0, r0, r6, lsl #1
   12cfc:	ldrb	r0, [r0, #1]
   12d00:	ubfx	r9, r0, #6, #1
   12d04:	ldr	r0, [sp, #52]	; 0x34
   12d08:	cmp	r2, #1
   12d0c:	orr	r0, r9, r0
   12d10:	bhi	1304c <__assert_fail@plt+0x1cac>
   12d14:	tst	r0, #1
   12d18:	beq	1304c <__assert_fail@plt+0x1cac>
   12d1c:	ldr	lr, [sp, #28]
   12d20:	ldr	r4, [sp, #88]	; 0x58
   12d24:	b	129bc <__assert_fail@plt+0x161c>
   12d28:	ldr	r1, [sp, #48]	; 0x30
   12d2c:	mov	sl, #0
   12d30:	mov	r0, #92	; 0x5c
   12d34:	cmp	r1, #0
   12d38:	beq	12db0 <__assert_fail@plt+0x1a10>
   12d3c:	mov	r6, #92	; 0x5c
   12d40:	mov	r9, #0
   12d44:	cmp	sl, #0
   12d48:	bne	12d80 <__assert_fail@plt+0x19e0>
   12d4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d50:	tst	r0, #1
   12d54:	beq	12d80 <__assert_fail@plt+0x19e0>
   12d58:	cmp	r8, r4
   12d5c:	movcc	r0, #39	; 0x27
   12d60:	strbcc	r0, [r5, r8]
   12d64:	add	r0, r8, #1
   12d68:	add	r8, r8, #2
   12d6c:	cmp	r0, r4
   12d70:	movcc	r1, #39	; 0x27
   12d74:	strbcc	r1, [r5, r0]
   12d78:	mov	r0, #0
   12d7c:	str	r0, [fp, #-56]	; 0xffffffc8
   12d80:	mov	r1, r9
   12d84:	mov	r0, r6
   12d88:	cmp	r8, r4
   12d8c:	strbcc	r0, [r5, r8]
   12d90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12d94:	add	r8, r8, #1
   12d98:	and	r0, r0, r1
   12d9c:	str	r0, [fp, #-48]	; 0xffffffd0
   12da0:	add	r7, r7, #1
   12da4:	cmn	lr, #1
   12da8:	bne	126e8 <__assert_fail@plt+0x1348>
   12dac:	b	126f4 <__assert_fail@plt+0x1354>
   12db0:	ldr	r1, [sp, #84]	; 0x54
   12db4:	mov	sl, #0
   12db8:	mov	r9, #0
   12dbc:	tst	r1, #1
   12dc0:	mov	r1, #0
   12dc4:	beq	129bc <__assert_fail@plt+0x161c>
   12dc8:	b	12a04 <__assert_fail@plt+0x1664>
   12dcc:	ldr	r0, [sp, #36]	; 0x24
   12dd0:	mov	r6, #0
   12dd4:	mov	sl, #0
   12dd8:	mov	r9, #0
   12ddc:	cmp	r0, #0
   12de0:	beq	129bc <__assert_fail@plt+0x161c>
   12de4:	b	12da0 <__assert_fail@plt+0x1a00>
   12de8:	mov	r9, #1
   12dec:	b	129bc <__assert_fail@plt+0x161c>
   12df0:	mov	r0, #0
   12df4:	cmn	lr, #1
   12df8:	sub	r4, fp, #40	; 0x28
   12dfc:	str	r0, [fp, #-36]	; 0xffffffdc
   12e00:	str	r0, [fp, #-40]	; 0xffffffd8
   12e04:	bne	12e18 <__assert_fail@plt+0x1a78>
   12e08:	mov	r0, ip
   12e0c:	bl	11280 <strlen@plt>
   12e10:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e14:	mov	lr, r0
   12e18:	ldr	r0, [sp, #72]	; 0x48
   12e1c:	mov	r9, #1
   12e20:	mov	r2, #0
   12e24:	str	lr, [sp, #28]
   12e28:	add	r0, r0, r7
   12e2c:	str	r0, [sp, #20]
   12e30:	b	12e74 <__assert_fail@plt+0x1ad4>
   12e34:	ldr	r5, [sp, #44]	; 0x2c
   12e38:	add	r5, r0, r5
   12e3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12e40:	bl	11190 <iswprint@plt>
   12e44:	cmp	r0, #0
   12e48:	sub	r4, fp, #40	; 0x28
   12e4c:	movwne	r0, #1
   12e50:	and	r9, r9, r0
   12e54:	mov	r0, r4
   12e58:	bl	11154 <mbsinit@plt>
   12e5c:	mov	r2, r5
   12e60:	ldr	lr, [sp, #28]
   12e64:	ldr	r5, [fp, #-84]	; 0xffffffac
   12e68:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e6c:	cmp	r0, #0
   12e70:	bne	12d04 <__assert_fail@plt+0x1964>
   12e74:	add	r0, r2, r7
   12e78:	str	r2, [sp, #44]	; 0x2c
   12e7c:	mov	r3, r4
   12e80:	add	r1, ip, r0
   12e84:	str	r0, [sp, #24]
   12e88:	sub	r2, lr, r0
   12e8c:	sub	r0, fp, #44	; 0x2c
   12e90:	bl	167b8 <__assert_fail@plt+0x5418>
   12e94:	cmp	r0, #0
   12e98:	beq	1323c <__assert_fail@plt+0x1e9c>
   12e9c:	cmn	r0, #1
   12ea0:	beq	131f8 <__assert_fail@plt+0x1e58>
   12ea4:	ldr	lr, [sp, #28]
   12ea8:	cmn	r0, #2
   12eac:	beq	13200 <__assert_fail@plt+0x1e60>
   12eb0:	ldr	r2, [sp, #64]	; 0x40
   12eb4:	ldr	r4, [sp, #88]	; 0x58
   12eb8:	ldr	ip, [sp, #84]	; 0x54
   12ebc:	cmp	r0, #2
   12ec0:	mov	r1, #0
   12ec4:	movwcc	r1, #1
   12ec8:	eor	r2, r2, #1
   12ecc:	orrs	r1, r2, r1
   12ed0:	bne	12e34 <__assert_fail@plt+0x1a94>
   12ed4:	ldr	r1, [sp, #44]	; 0x2c
   12ed8:	ldr	r2, [sp, #20]
   12edc:	add	r1, r2, r1
   12ee0:	sub	r2, r0, #1
   12ee4:	b	12ef4 <__assert_fail@plt+0x1b54>
   12ee8:	add	r1, r1, #1
   12eec:	subs	r2, r2, #1
   12ef0:	beq	12e34 <__assert_fail@plt+0x1a94>
   12ef4:	ldrb	r3, [r1]
   12ef8:	sub	r3, r3, #91	; 0x5b
   12efc:	cmp	r3, #33	; 0x21
   12f00:	bhi	12ee8 <__assert_fail@plt+0x1b48>
   12f04:	add	r5, pc, #0
   12f08:	ldr	pc, [r5, r3, lsl #2]
   12f0c:	strdeq	r3, [r1], -r0
   12f10:	strdeq	r3, [r1], -r0
   12f14:	andeq	r2, r1, r8, ror #29
   12f18:	strdeq	r3, [r1], -r0
   12f1c:	andeq	r2, r1, r8, ror #29
   12f20:	strdeq	r3, [r1], -r0
   12f24:	andeq	r2, r1, r8, ror #29
   12f28:	andeq	r2, r1, r8, ror #29
   12f2c:	andeq	r2, r1, r8, ror #29
   12f30:	andeq	r2, r1, r8, ror #29
   12f34:	andeq	r2, r1, r8, ror #29
   12f38:	andeq	r2, r1, r8, ror #29
   12f3c:	andeq	r2, r1, r8, ror #29
   12f40:	andeq	r2, r1, r8, ror #29
   12f44:	andeq	r2, r1, r8, ror #29
   12f48:	andeq	r2, r1, r8, ror #29
   12f4c:	andeq	r2, r1, r8, ror #29
   12f50:	andeq	r2, r1, r8, ror #29
   12f54:	andeq	r2, r1, r8, ror #29
   12f58:	andeq	r2, r1, r8, ror #29
   12f5c:	andeq	r2, r1, r8, ror #29
   12f60:	andeq	r2, r1, r8, ror #29
   12f64:	andeq	r2, r1, r8, ror #29
   12f68:	andeq	r2, r1, r8, ror #29
   12f6c:	andeq	r2, r1, r8, ror #29
   12f70:	andeq	r2, r1, r8, ror #29
   12f74:	andeq	r2, r1, r8, ror #29
   12f78:	andeq	r2, r1, r8, ror #29
   12f7c:	andeq	r2, r1, r8, ror #29
   12f80:	andeq	r2, r1, r8, ror #29
   12f84:	andeq	r2, r1, r8, ror #29
   12f88:	andeq	r2, r1, r8, ror #29
   12f8c:	andeq	r2, r1, r8, ror #29
   12f90:	strdeq	r3, [r1], -r0
   12f94:	mov	r8, r0
   12f98:	b	129bc <__assert_fail@plt+0x161c>
   12f9c:	ldr	r0, [sp, #32]
   12fa0:	cmp	r0, #0
   12fa4:	beq	13044 <__assert_fail@plt+0x1ca4>
   12fa8:	add	r0, r7, #2
   12fac:	cmp	r0, lr
   12fb0:	bcs	13044 <__assert_fail@plt+0x1ca4>
   12fb4:	add	r1, r7, ip
   12fb8:	ldrb	r1, [r1, #1]
   12fbc:	cmp	r1, #63	; 0x3f
   12fc0:	bne	13044 <__assert_fail@plt+0x1ca4>
   12fc4:	ldrb	r9, [ip, r0]
   12fc8:	sub	r2, r9, #33	; 0x21
   12fcc:	cmp	r2, #29
   12fd0:	bhi	13044 <__assert_fail@plt+0x1ca4>
   12fd4:	movw	r1, #20929	; 0x51c1
   12fd8:	mov	r3, #1
   12fdc:	movt	r1, #14336	; 0x3800
   12fe0:	tst	r1, r3, lsl r2
   12fe4:	beq	13044 <__assert_fail@plt+0x1ca4>
   12fe8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fec:	tst	r1, #1
   12ff0:	bne	13314 <__assert_fail@plt+0x1f74>
   12ff4:	cmp	r8, r4
   12ff8:	add	r2, r8, #1
   12ffc:	mov	r6, r9
   13000:	mov	r7, r0
   13004:	mov	r9, #0
   13008:	movcc	r1, #63	; 0x3f
   1300c:	strbcc	r1, [r5, r8]
   13010:	cmp	r2, r4
   13014:	movcc	r1, #34	; 0x22
   13018:	strbcc	r1, [r5, r2]
   1301c:	add	r2, r8, #2
   13020:	cmp	r2, r4
   13024:	movcc	r1, #34	; 0x22
   13028:	strbcc	r1, [r5, r2]
   1302c:	add	r2, r8, #3
   13030:	add	r8, r8, #4
   13034:	cmp	r2, r4
   13038:	movcc	r1, #63	; 0x3f
   1303c:	strbcc	r1, [r5, r2]
   13040:	b	129bc <__assert_fail@plt+0x161c>
   13044:	mov	r9, #0
   13048:	b	129bc <__assert_fail@plt+0x161c>
   1304c:	ldr	lr, [sp, #28]
   13050:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13054:	add	r1, r2, r7
   13058:	mov	r2, #0
   1305c:	str	r1, [sp, #44]	; 0x2c
   13060:	tst	r0, #1
   13064:	bne	13180 <__assert_fail@plt+0x1de0>
   13068:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1306c:	tst	r1, #1
   13070:	bne	13310 <__assert_fail@plt+0x1f70>
   13074:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13078:	subs	r2, r1, #2
   1307c:	movwne	r2, #1
   13080:	orr	r2, r2, r4
   13084:	tst	r2, #1
   13088:	bne	130cc <__assert_fail@plt+0x1d2c>
   1308c:	ldr	r1, [sp, #88]	; 0x58
   13090:	add	r2, r8, #1
   13094:	mov	r4, #1
   13098:	cmp	r8, r1
   1309c:	movcc	r1, #39	; 0x27
   130a0:	strbcc	r1, [r5, r8]
   130a4:	ldr	r1, [sp, #88]	; 0x58
   130a8:	cmp	r2, r1
   130ac:	movcc	r1, #36	; 0x24
   130b0:	strbcc	r1, [r5, r2]
   130b4:	ldr	r1, [sp, #88]	; 0x58
   130b8:	add	r2, r8, #2
   130bc:	add	r8, r8, #3
   130c0:	cmp	r2, r1
   130c4:	movcc	r1, #39	; 0x27
   130c8:	strbcc	r1, [r5, r2]
   130cc:	ldr	r1, [sp, #88]	; 0x58
   130d0:	add	r2, r8, #1
   130d4:	cmp	r8, r1
   130d8:	movcc	r1, #92	; 0x5c
   130dc:	strbcc	r1, [r5, r8]
   130e0:	ldr	r1, [sp, #88]	; 0x58
   130e4:	cmp	r2, r1
   130e8:	bcs	130fc <__assert_fail@plt+0x1d5c>
   130ec:	uxtb	r3, r6
   130f0:	mov	r1, #48	; 0x30
   130f4:	orr	r3, r1, r3, lsr #6
   130f8:	strb	r3, [r5, r2]
   130fc:	ldr	r1, [sp, #88]	; 0x58
   13100:	add	r2, r8, #2
   13104:	add	r8, r8, #3
   13108:	cmp	r2, r1
   1310c:	lsrcc	r3, r6, #3
   13110:	movcc	r1, #6
   13114:	bficc	r3, r1, #3, #29
   13118:	mov	r1, #6
   1311c:	bfi	r6, r1, #3, #29
   13120:	strbcc	r3, [r5, r2]
   13124:	mov	r2, #1
   13128:	b	131a8 <__assert_fail@plt+0x1e08>
   1312c:	ldr	r1, [sp, #88]	; 0x58
   13130:	ldr	r5, [fp, #-84]	; 0xffffffac
   13134:	ldr	r4, [sp, #88]	; 0x58
   13138:	cmp	r8, r1
   1313c:	movcc	r1, #39	; 0x27
   13140:	strbcc	r1, [r5, r8]
   13144:	add	r1, r8, #1
   13148:	add	r8, r8, #2
   1314c:	cmp	r1, r4
   13150:	movcc	r4, #39	; 0x27
   13154:	strbcc	r4, [r5, r1]
   13158:	mov	r4, #0
   1315c:	ldr	r1, [sp, #88]	; 0x58
   13160:	cmp	r8, r1
   13164:	ldr	r1, [sp, #72]	; 0x48
   13168:	strbcc	r6, [r5, r8]
   1316c:	add	r8, r8, #1
   13170:	ldrb	r6, [r1, r7]
   13174:	mov	r7, r3
   13178:	tst	r0, #1
   1317c:	beq	13068 <__assert_fail@plt+0x1cc8>
   13180:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13184:	tst	r1, #1
   13188:	beq	131a0 <__assert_fail@plt+0x1e00>
   1318c:	ldr	r1, [sp, #88]	; 0x58
   13190:	cmp	r8, r1
   13194:	movcc	r1, #92	; 0x5c
   13198:	strbcc	r1, [r5, r8]
   1319c:	add	r8, r8, #1
   131a0:	mov	r1, #0
   131a4:	str	r1, [fp, #-52]	; 0xffffffcc
   131a8:	ldr	r1, [sp, #44]	; 0x2c
   131ac:	add	r3, r7, #1
   131b0:	and	sl, r2, #1
   131b4:	cmp	r1, r3
   131b8:	bls	131dc <__assert_fail@plt+0x1e3c>
   131bc:	cmp	sl, #0
   131c0:	mvn	r5, r4
   131c4:	movwne	sl, #1
   131c8:	orr	r5, r5, sl
   131cc:	tst	r5, #1
   131d0:	beq	1312c <__assert_fail@plt+0x1d8c>
   131d4:	ldr	r5, [fp, #-84]	; 0xffffffac
   131d8:	b	1315c <__assert_fail@plt+0x1dbc>
   131dc:	str	r4, [fp, #-56]	; 0xffffffc8
   131e0:	ldr	r4, [sp, #88]	; 0x58
   131e4:	cmp	sl, #0
   131e8:	movwne	sl, #1
   131ec:	cmp	sl, #0
   131f0:	beq	12d4c <__assert_fail@plt+0x19ac>
   131f4:	b	12d80 <__assert_fail@plt+0x19e0>
   131f8:	mov	r9, #0
   131fc:	b	1323c <__assert_fail@plt+0x1e9c>
   13200:	ldr	r0, [sp, #24]
   13204:	mov	r9, #0
   13208:	cmp	lr, r0
   1320c:	bls	1323c <__assert_fail@plt+0x1e9c>
   13210:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13214:	ldr	r2, [sp, #44]	; 0x2c
   13218:	add	r0, ip, r7
   1321c:	ldrb	r1, [r0, r2]
   13220:	cmp	r1, #0
   13224:	beq	12d04 <__assert_fail@plt+0x1964>
   13228:	add	r2, r2, #1
   1322c:	add	r1, r7, r2
   13230:	cmp	r1, lr
   13234:	bcc	1321c <__assert_fail@plt+0x1e7c>
   13238:	b	12d04 <__assert_fail@plt+0x1964>
   1323c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13240:	ldr	r2, [sp, #44]	; 0x2c
   13244:	b	12d04 <__assert_fail@plt+0x1964>
   13248:	mov	lr, r7
   1324c:	b	13254 <__assert_fail@plt+0x1eb4>
   13250:	mvn	lr, #0
   13254:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13258:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1325c:	eor	r0, r1, #2
   13260:	orr	r0, r0, r8
   13264:	clz	r0, r0
   13268:	lsr	r0, r0, #5
   1326c:	tst	r2, r0
   13270:	bne	13314 <__assert_fail@plt+0x1f74>
   13274:	subs	r0, r1, #2
   13278:	movwne	r0, #1
   1327c:	orr	r0, r2, r0
   13280:	tst	r0, #1
   13284:	ldreq	r0, [sp, #60]	; 0x3c
   13288:	eoreq	r0, r0, #1
   1328c:	tsteq	r0, #1
   13290:	bne	133a8 <__assert_fail@plt+0x2008>
   13294:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13298:	mov	sl, lr
   1329c:	tst	r0, #1
   132a0:	bne	13374 <__assert_fail@plt+0x1fd4>
   132a4:	ldr	r6, [sp, #56]	; 0x38
   132a8:	mov	r9, #0
   132ac:	cmp	r6, #0
   132b0:	beq	133a0 <__assert_fail@plt+0x2000>
   132b4:	ldr	r0, [sp, #84]	; 0x54
   132b8:	mov	r1, #0
   132bc:	mov	r7, #2
   132c0:	cmp	r4, #0
   132c4:	str	r1, [fp, #-48]	; 0xffffffd0
   132c8:	mov	r1, #0
   132cc:	str	r1, [fp, #-76]	; 0xffffffb4
   132d0:	beq	12470 <__assert_fail@plt+0x10d0>
   132d4:	b	133a8 <__assert_fail@plt+0x2008>
   132d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132dc:	ldr	r1, [fp, #12]
   132e0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   132e4:	mov	lr, r4
   132e8:	mov	r4, r6
   132ec:	b	13334 <__assert_fail@plt+0x1f94>
   132f0:	tst	ip, #1
   132f4:	ldr	r5, [fp, #-84]	; 0xffffffac
   132f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132fc:	ldr	r1, [fp, #12]
   13300:	mov	r0, #2
   13304:	movwne	r0, #4
   13308:	mov	r2, r0
   1330c:	b	13334 <__assert_fail@plt+0x1f94>
   13310:	ldr	r4, [sp, #88]	; 0x58
   13314:	ldr	r1, [sp, #84]	; 0x54
   13318:	mov	r0, #2
   1331c:	tst	r1, #1
   13320:	movwne	r0, #4
   13324:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13328:	ldr	r1, [fp, #12]
   1332c:	cmp	r2, #2
   13330:	moveq	r2, r0
   13334:	mov	r0, #0
   13338:	bic	r1, r1, #2
   1333c:	str	r2, [sp]
   13340:	mov	r2, ip
   13344:	mov	r3, lr
   13348:	str	r0, [sp, #8]
   1334c:	ldr	r0, [sp, #76]	; 0x4c
   13350:	str	r1, [sp, #4]
   13354:	mov	r1, r4
   13358:	str	r0, [sp, #12]
   1335c:	ldr	r0, [sp, #80]	; 0x50
   13360:	str	r0, [sp, #16]
   13364:	mov	r0, r5
   13368:	bl	123e0 <__assert_fail@plt+0x1040>
   1336c:	mov	r8, r0
   13370:	b	133f4 <__assert_fail@plt+0x2054>
   13374:	mov	r0, #5
   13378:	ldr	r1, [sp, #56]	; 0x38
   1337c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13380:	mov	r3, sl
   13384:	str	r0, [sp]
   13388:	ldr	r0, [fp, #12]
   1338c:	str	r0, [sp, #4]
   13390:	ldr	r0, [fp, #16]
   13394:	str	r0, [sp, #8]
   13398:	ldr	r0, [sp, #76]	; 0x4c
   1339c:	b	13358 <__assert_fail@plt+0x1fb8>
   133a0:	mov	r0, #0
   133a4:	str	r0, [fp, #-76]	; 0xffffffb4
   133a8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   133ac:	cmp	r1, #0
   133b0:	beq	133e8 <__assert_fail@plt+0x2048>
   133b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133b8:	tst	r0, #1
   133bc:	bne	133e8 <__assert_fail@plt+0x2048>
   133c0:	ldrb	r0, [r1]
   133c4:	cmp	r0, #0
   133c8:	beq	133e8 <__assert_fail@plt+0x2048>
   133cc:	add	r1, r1, #1
   133d0:	cmp	r8, r4
   133d4:	strbcc	r0, [r5, r8]
   133d8:	add	r8, r8, #1
   133dc:	ldrb	r0, [r1], #1
   133e0:	cmp	r0, #0
   133e4:	bne	133d0 <__assert_fail@plt+0x2030>
   133e8:	cmp	r8, r4
   133ec:	movcc	r0, #0
   133f0:	strbcc	r0, [r5, r8]
   133f4:	mov	r0, r8
   133f8:	sub	sp, fp, #28
   133fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13400:	mov	r0, #4
   13404:	b	13324 <__assert_fail@plt+0x1f84>
   13408:	bl	1137c <abort@plt>
   1340c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13410:	add	fp, sp, #28
   13414:	sub	sp, sp, #28
   13418:	movw	r5, #33168	; 0x8190
   1341c:	cmp	r2, #0
   13420:	mov	r4, r1
   13424:	mov	r7, r0
   13428:	str	r0, [sp, #20]
   1342c:	movt	r5, #2
   13430:	movne	r5, r2
   13434:	bl	11298 <__errno_location@plt>
   13438:	mov	sl, r0
   1343c:	ldr	r2, [r5, #40]	; 0x28
   13440:	ldr	r3, [r5, #44]	; 0x2c
   13444:	ldm	r5, {r0, r1}
   13448:	orr	r8, r1, #1
   1344c:	add	r9, r5, #8
   13450:	mov	r1, #0
   13454:	ldr	r6, [sl]
   13458:	stm	sp, {r0, r8, r9}
   1345c:	mov	r0, #0
   13460:	str	r2, [sp, #12]
   13464:	str	r3, [sp, #16]
   13468:	mov	r2, r7
   1346c:	mov	r3, r4
   13470:	str	r6, [sp, #24]
   13474:	mov	r6, r4
   13478:	bl	123e0 <__assert_fail@plt+0x1040>
   1347c:	add	r7, r0, #1
   13480:	mov	r0, r7
   13484:	bl	149d8 <__assert_fail@plt+0x3638>
   13488:	mov	r4, r0
   1348c:	ldr	r0, [r5]
   13490:	ldr	r2, [r5, #44]	; 0x2c
   13494:	ldr	r1, [r5, #40]	; 0x28
   13498:	mov	r3, r6
   1349c:	stm	sp, {r0, r8, r9}
   134a0:	str	r2, [sp, #16]
   134a4:	ldr	r2, [sp, #20]
   134a8:	str	r1, [sp, #12]
   134ac:	mov	r0, r4
   134b0:	mov	r1, r7
   134b4:	bl	123e0 <__assert_fail@plt+0x1040>
   134b8:	ldr	r0, [sp, #24]
   134bc:	str	r0, [sl]
   134c0:	mov	r0, r4
   134c4:	sub	sp, fp, #28
   134c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d0:	add	fp, sp, #28
   134d4:	sub	sp, sp, #36	; 0x24
   134d8:	movw	r8, #33168	; 0x8190
   134dc:	cmp	r3, #0
   134e0:	mov	r4, r2
   134e4:	str	r2, [sp, #24]
   134e8:	mov	r5, r1
   134ec:	mov	r6, r0
   134f0:	str	r0, [sp, #20]
   134f4:	movt	r8, #2
   134f8:	movne	r8, r3
   134fc:	bl	11298 <__errno_location@plt>
   13500:	str	r0, [sp, #28]
   13504:	ldr	r1, [r8, #40]	; 0x28
   13508:	ldr	r2, [r8, #44]	; 0x2c
   1350c:	ldr	r7, [r0]
   13510:	cmp	r4, #0
   13514:	add	sl, r8, #8
   13518:	mov	r0, #0
   1351c:	ldm	r8, {r3, r9}
   13520:	orreq	r9, r9, #1
   13524:	stm	sp, {r3, r9, sl}
   13528:	str	r1, [sp, #12]
   1352c:	str	r2, [sp, #16]
   13530:	mov	r1, #0
   13534:	mov	r2, r6
   13538:	mov	r3, r5
   1353c:	str	r7, [sp, #32]
   13540:	mov	r7, r5
   13544:	bl	123e0 <__assert_fail@plt+0x1040>
   13548:	add	r4, r0, #1
   1354c:	mov	r5, r0
   13550:	mov	r0, r4
   13554:	bl	149d8 <__assert_fail@plt+0x3638>
   13558:	mov	r6, r0
   1355c:	ldr	r0, [r8]
   13560:	ldr	r2, [r8, #44]	; 0x2c
   13564:	ldr	r1, [r8, #40]	; 0x28
   13568:	mov	r3, r7
   1356c:	stm	sp, {r0, r9, sl}
   13570:	str	r2, [sp, #16]
   13574:	ldr	r2, [sp, #20]
   13578:	str	r1, [sp, #12]
   1357c:	mov	r0, r6
   13580:	mov	r1, r4
   13584:	bl	123e0 <__assert_fail@plt+0x1040>
   13588:	ldr	r0, [sp, #24]
   1358c:	ldr	r1, [sp, #32]
   13590:	ldr	r2, [sp, #28]
   13594:	cmp	r0, #0
   13598:	str	r1, [r2]
   1359c:	strne	r5, [r0]
   135a0:	mov	r0, r6
   135a4:	sub	sp, fp, #28
   135a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135b0:	add	fp, sp, #24
   135b4:	movw	r5, #33060	; 0x8124
   135b8:	movw	r8, #33056	; 0x8120
   135bc:	movt	r5, #2
   135c0:	movt	r8, #2
   135c4:	ldr	r0, [r5]
   135c8:	ldr	r4, [r8]
   135cc:	cmp	r0, #2
   135d0:	blt	135fc <__assert_fail@plt+0x225c>
   135d4:	add	r7, r4, #12
   135d8:	mov	r6, #0
   135dc:	ldr	r0, [r7, r6, lsl #3]
   135e0:	bl	1217c <__assert_fail@plt+0xddc>
   135e4:	ldr	r1, [r5]
   135e8:	add	r2, r6, #2
   135ec:	add	r0, r6, #1
   135f0:	mov	r6, r0
   135f4:	cmp	r2, r1
   135f8:	blt	135dc <__assert_fail@plt+0x223c>
   135fc:	ldr	r0, [r4, #4]
   13600:	movw	r9, #33216	; 0x81c0
   13604:	movw	r7, #33064	; 0x8128
   13608:	movt	r9, #2
   1360c:	movt	r7, #2
   13610:	cmp	r0, r9
   13614:	beq	13624 <__assert_fail@plt+0x2284>
   13618:	bl	1217c <__assert_fail@plt+0xddc>
   1361c:	mov	r0, #256	; 0x100
   13620:	stm	r7, {r0, r9}
   13624:	cmp	r4, r7
   13628:	beq	13638 <__assert_fail@plt+0x2298>
   1362c:	mov	r0, r4
   13630:	bl	1217c <__assert_fail@plt+0xddc>
   13634:	str	r7, [r8]
   13638:	mov	r0, #1
   1363c:	str	r0, [r5]
   13640:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13644:	movw	r3, #33168	; 0x8190
   13648:	mvn	r2, #0
   1364c:	movt	r3, #2
   13650:	b	13654 <__assert_fail@plt+0x22b4>
   13654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13658:	add	fp, sp, #28
   1365c:	sub	sp, sp, #44	; 0x2c
   13660:	mov	r7, r3
   13664:	str	r2, [sp, #36]	; 0x24
   13668:	str	r1, [sp, #32]
   1366c:	mov	r5, r0
   13670:	bl	11298 <__errno_location@plt>
   13674:	cmp	r5, #0
   13678:	bmi	137e8 <__assert_fail@plt+0x2448>
   1367c:	cmn	r5, #-2147483647	; 0x80000001
   13680:	beq	137e8 <__assert_fail@plt+0x2448>
   13684:	movw	r8, #33060	; 0x8124
   13688:	movw	r4, #33056	; 0x8120
   1368c:	str	r0, [sp, #28]
   13690:	ldr	r0, [r0]
   13694:	movt	r8, #2
   13698:	movt	r4, #2
   1369c:	ldr	r1, [r8]
   136a0:	ldr	r6, [r4]
   136a4:	str	r0, [sp, #24]
   136a8:	cmp	r1, r5
   136ac:	ble	136b8 <__assert_fail@plt+0x2318>
   136b0:	mov	sl, r6
   136b4:	b	13724 <__assert_fail@plt+0x2384>
   136b8:	movw	r9, #33064	; 0x8128
   136bc:	mov	r0, #8
   136c0:	str	r1, [fp, #-32]	; 0xffffffe0
   136c4:	sub	r1, r5, r1
   136c8:	mvn	r3, #-2147483648	; 0x80000000
   136cc:	movt	r9, #2
   136d0:	str	r0, [sp]
   136d4:	add	r2, r1, #1
   136d8:	sub	r1, fp, #32
   136dc:	subs	r0, r6, r9
   136e0:	movne	r0, r6
   136e4:	bl	14bd8 <__assert_fail@plt+0x3838>
   136e8:	mov	sl, r0
   136ec:	cmp	r6, r9
   136f0:	str	r0, [r4]
   136f4:	bne	13700 <__assert_fail@plt+0x2360>
   136f8:	ldrd	r0, [r9]
   136fc:	stm	sl, {r0, r1}
   13700:	ldr	r1, [r8]
   13704:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13708:	add	r0, sl, r1, lsl #3
   1370c:	sub	r1, r2, r1
   13710:	lsl	r2, r1, #3
   13714:	mov	r1, #0
   13718:	bl	112bc <memset@plt>
   1371c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13720:	str	r0, [r8]
   13724:	mov	r9, sl
   13728:	ldm	r7, {r0, r1}
   1372c:	orr	r8, r1, #1
   13730:	add	r1, r7, #8
   13734:	ldr	r2, [r7, #40]	; 0x28
   13738:	ldr	r3, [r7, #44]	; 0x2c
   1373c:	ldr	r6, [r9, r5, lsl #3]!
   13740:	str	r1, [sp, #20]
   13744:	ldr	r4, [r9, #4]!
   13748:	stm	sp, {r0, r8}
   1374c:	add	r0, sp, #8
   13750:	stm	r0, {r1, r2, r3}
   13754:	ldr	r2, [sp, #32]
   13758:	ldr	r3, [sp, #36]	; 0x24
   1375c:	mov	r1, r6
   13760:	mov	r0, r4
   13764:	bl	123e0 <__assert_fail@plt+0x1040>
   13768:	cmp	r6, r0
   1376c:	bhi	137d0 <__assert_fail@plt+0x2430>
   13770:	add	r6, r0, #1
   13774:	movw	r0, #33216	; 0x81c0
   13778:	movt	r0, #2
   1377c:	str	r6, [sl, r5, lsl #3]
   13780:	cmp	r4, r0
   13784:	beq	13790 <__assert_fail@plt+0x23f0>
   13788:	mov	r0, r4
   1378c:	bl	1217c <__assert_fail@plt+0xddc>
   13790:	mov	r0, r6
   13794:	bl	149d8 <__assert_fail@plt+0x3638>
   13798:	str	r0, [r9]
   1379c:	mov	r4, r0
   137a0:	add	r3, sp, #8
   137a4:	ldr	r0, [r7]
   137a8:	ldr	r1, [r7, #40]	; 0x28
   137ac:	ldr	r2, [r7, #44]	; 0x2c
   137b0:	stm	sp, {r0, r8}
   137b4:	ldr	r0, [sp, #20]
   137b8:	stm	r3, {r0, r1, r2}
   137bc:	ldr	r2, [sp, #32]
   137c0:	ldr	r3, [sp, #36]	; 0x24
   137c4:	mov	r0, r4
   137c8:	mov	r1, r6
   137cc:	bl	123e0 <__assert_fail@plt+0x1040>
   137d0:	ldr	r0, [sp, #28]
   137d4:	ldr	r1, [sp, #24]
   137d8:	str	r1, [r0]
   137dc:	mov	r0, r4
   137e0:	sub	sp, fp, #28
   137e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e8:	bl	1137c <abort@plt>
   137ec:	movw	r3, #33168	; 0x8190
   137f0:	movt	r3, #2
   137f4:	b	13654 <__assert_fail@plt+0x22b4>
   137f8:	movw	r3, #33168	; 0x8190
   137fc:	mov	r1, r0
   13800:	mov	r0, #0
   13804:	mvn	r2, #0
   13808:	movt	r3, #2
   1380c:	b	13654 <__assert_fail@plt+0x22b4>
   13810:	movw	r3, #33168	; 0x8190
   13814:	mov	r2, r1
   13818:	mov	r1, r0
   1381c:	mov	r0, #0
   13820:	movt	r3, #2
   13824:	b	13654 <__assert_fail@plt+0x22b4>
   13828:	push	{fp, lr}
   1382c:	mov	fp, sp
   13830:	sub	sp, sp, #48	; 0x30
   13834:	vmov.i32	q8, #0	; 0x00000000
   13838:	mov	ip, #32
   1383c:	mov	r3, sp
   13840:	mov	lr, r2
   13844:	cmp	r1, #10
   13848:	add	r2, r3, #16
   1384c:	vst1.64	{d16-d17}, [r3], ip
   13850:	vst1.64	{d16-d17}, [r2]
   13854:	vst1.64	{d16-d17}, [r3]
   13858:	beq	13878 <__assert_fail@plt+0x24d8>
   1385c:	str	r1, [sp]
   13860:	mov	r3, sp
   13864:	mov	r1, lr
   13868:	mvn	r2, #0
   1386c:	bl	13654 <__assert_fail@plt+0x22b4>
   13870:	mov	sp, fp
   13874:	pop	{fp, pc}
   13878:	bl	1137c <abort@plt>
   1387c:	push	{r4, sl, fp, lr}
   13880:	add	fp, sp, #8
   13884:	sub	sp, sp, #48	; 0x30
   13888:	vmov.i32	q8, #0	; 0x00000000
   1388c:	mov	ip, r3
   13890:	mov	r3, sp
   13894:	mov	lr, #32
   13898:	cmp	r1, #10
   1389c:	add	r4, r3, #16
   138a0:	vst1.64	{d16-d17}, [r3], lr
   138a4:	vst1.64	{d16-d17}, [r4]
   138a8:	vst1.64	{d16-d17}, [r3]
   138ac:	beq	138cc <__assert_fail@plt+0x252c>
   138b0:	str	r1, [sp]
   138b4:	mov	r1, r2
   138b8:	mov	r3, sp
   138bc:	mov	r2, ip
   138c0:	bl	13654 <__assert_fail@plt+0x22b4>
   138c4:	sub	sp, fp, #8
   138c8:	pop	{r4, sl, fp, pc}
   138cc:	bl	1137c <abort@plt>
   138d0:	push	{fp, lr}
   138d4:	mov	fp, sp
   138d8:	sub	sp, sp, #48	; 0x30
   138dc:	vmov.i32	q8, #0	; 0x00000000
   138e0:	mov	r3, sp
   138e4:	mov	ip, #32
   138e8:	cmp	r0, #10
   138ec:	add	r2, r3, #16
   138f0:	vst1.64	{d16-d17}, [r3], ip
   138f4:	vst1.64	{d16-d17}, [r2]
   138f8:	vst1.64	{d16-d17}, [r3]
   138fc:	beq	1391c <__assert_fail@plt+0x257c>
   13900:	str	r0, [sp]
   13904:	mov	r3, sp
   13908:	mov	r0, #0
   1390c:	mvn	r2, #0
   13910:	bl	13654 <__assert_fail@plt+0x22b4>
   13914:	mov	sp, fp
   13918:	pop	{fp, pc}
   1391c:	bl	1137c <abort@plt>
   13920:	push	{fp, lr}
   13924:	mov	fp, sp
   13928:	sub	sp, sp, #48	; 0x30
   1392c:	vmov.i32	q8, #0	; 0x00000000
   13930:	mov	r3, sp
   13934:	mov	ip, #32
   13938:	cmp	r0, #10
   1393c:	add	lr, r3, #16
   13940:	vst1.64	{d16-d17}, [r3], ip
   13944:	vst1.64	{d16-d17}, [lr]
   13948:	vst1.64	{d16-d17}, [r3]
   1394c:	beq	13968 <__assert_fail@plt+0x25c8>
   13950:	str	r0, [sp]
   13954:	mov	r3, sp
   13958:	mov	r0, #0
   1395c:	bl	13654 <__assert_fail@plt+0x22b4>
   13960:	mov	sp, fp
   13964:	pop	{fp, pc}
   13968:	bl	1137c <abort@plt>
   1396c:	push	{r4, sl, fp, lr}
   13970:	add	fp, sp, #8
   13974:	sub	sp, sp, #48	; 0x30
   13978:	mov	lr, r0
   1397c:	movw	r0, #33168	; 0x8190
   13980:	mov	ip, r1
   13984:	mov	r1, #32
   13988:	mov	r4, #1
   1398c:	movt	r0, #2
   13990:	add	r3, r0, #16
   13994:	vld1.64	{d16-d17}, [r0], r1
   13998:	vld1.64	{d20-d21}, [r0]
   1399c:	vld1.64	{d18-d19}, [r3]
   139a0:	mov	r3, sp
   139a4:	add	r0, r3, #32
   139a8:	add	r1, r3, #16
   139ac:	vst1.64	{d20-d21}, [r0]
   139b0:	mov	r0, #28
   139b4:	vst1.64	{d18-d19}, [r1]
   139b8:	mov	r1, r3
   139bc:	and	r0, r0, r2, lsr #3
   139c0:	and	r2, r2, #31
   139c4:	vst1.64	{d16-d17}, [r1], r0
   139c8:	ldr	r0, [r1, #8]
   139cc:	bic	r4, r4, r0, lsr r2
   139d0:	eor	r0, r0, r4, lsl r2
   139d4:	mov	r2, ip
   139d8:	str	r0, [r1, #8]
   139dc:	mov	r0, #0
   139e0:	mov	r1, lr
   139e4:	bl	13654 <__assert_fail@plt+0x22b4>
   139e8:	sub	sp, fp, #8
   139ec:	pop	{r4, sl, fp, pc}
   139f0:	push	{fp, lr}
   139f4:	mov	fp, sp
   139f8:	sub	sp, sp, #48	; 0x30
   139fc:	mov	ip, r0
   13a00:	movw	r0, #33168	; 0x8190
   13a04:	mov	r2, #32
   13a08:	movt	r0, #2
   13a0c:	add	r3, r0, #16
   13a10:	vld1.64	{d16-d17}, [r0], r2
   13a14:	vld1.64	{d20-d21}, [r0]
   13a18:	vld1.64	{d18-d19}, [r3]
   13a1c:	mov	r3, sp
   13a20:	add	r0, r3, #32
   13a24:	add	r2, r3, #16
   13a28:	vst1.64	{d20-d21}, [r0]
   13a2c:	mov	r0, #28
   13a30:	vst1.64	{d18-d19}, [r2]
   13a34:	mov	r2, r3
   13a38:	and	r0, r0, r1, lsr #3
   13a3c:	and	r1, r1, #31
   13a40:	vst1.64	{d16-d17}, [r2], r0
   13a44:	mov	r0, #1
   13a48:	ldr	lr, [r2, #8]
   13a4c:	bic	r0, r0, lr, lsr r1
   13a50:	eor	r0, lr, r0, lsl r1
   13a54:	mov	r1, ip
   13a58:	str	r0, [r2, #8]
   13a5c:	mov	r0, #0
   13a60:	mvn	r2, #0
   13a64:	bl	13654 <__assert_fail@plt+0x22b4>
   13a68:	mov	sp, fp
   13a6c:	pop	{fp, pc}
   13a70:	push	{fp, lr}
   13a74:	mov	fp, sp
   13a78:	sub	sp, sp, #48	; 0x30
   13a7c:	mov	r1, r0
   13a80:	movw	r0, #33168	; 0x8190
   13a84:	mov	r3, #32
   13a88:	movt	r0, #2
   13a8c:	add	r2, r0, #16
   13a90:	vld1.64	{d16-d17}, [r0], r3
   13a94:	mov	r3, sp
   13a98:	vld1.64	{d18-d19}, [r2]
   13a9c:	vld1.64	{d20-d21}, [r0]
   13aa0:	add	r2, r3, #16
   13aa4:	add	r0, r3, #32
   13aa8:	vst1.64	{d18-d19}, [r2]
   13aac:	vst1.64	{d20-d21}, [r0]
   13ab0:	mov	r0, #12
   13ab4:	mov	r2, r3
   13ab8:	vst1.64	{d16-d17}, [r2], r0
   13abc:	ldr	r0, [r2]
   13ac0:	orr	r0, r0, #67108864	; 0x4000000
   13ac4:	str	r0, [r2]
   13ac8:	mov	r0, #0
   13acc:	mvn	r2, #0
   13ad0:	bl	13654 <__assert_fail@plt+0x22b4>
   13ad4:	mov	sp, fp
   13ad8:	pop	{fp, pc}
   13adc:	push	{fp, lr}
   13ae0:	mov	fp, sp
   13ae4:	sub	sp, sp, #48	; 0x30
   13ae8:	mov	ip, r1
   13aec:	mov	r1, r0
   13af0:	movw	r0, #33168	; 0x8190
   13af4:	mov	r2, #32
   13af8:	movt	r0, #2
   13afc:	add	r3, r0, #16
   13b00:	vld1.64	{d16-d17}, [r0], r2
   13b04:	vld1.64	{d18-d19}, [r3]
   13b08:	vld1.64	{d20-d21}, [r0]
   13b0c:	mov	r3, sp
   13b10:	add	r2, r3, #16
   13b14:	add	r0, r3, #32
   13b18:	vst1.64	{d18-d19}, [r2]
   13b1c:	vst1.64	{d20-d21}, [r0]
   13b20:	mov	r0, #12
   13b24:	mov	r2, r3
   13b28:	vst1.64	{d16-d17}, [r2], r0
   13b2c:	ldr	r0, [r2]
   13b30:	orr	r0, r0, #67108864	; 0x4000000
   13b34:	str	r0, [r2]
   13b38:	mov	r0, #0
   13b3c:	mov	r2, ip
   13b40:	bl	13654 <__assert_fail@plt+0x22b4>
   13b44:	mov	sp, fp
   13b48:	pop	{fp, pc}
   13b4c:	push	{r4, sl, fp, lr}
   13b50:	add	fp, sp, #8
   13b54:	sub	sp, sp, #96	; 0x60
   13b58:	vmov.i32	q8, #0	; 0x00000000
   13b5c:	mov	ip, r2
   13b60:	mov	r2, sp
   13b64:	mov	r4, #28
   13b68:	cmp	r1, #10
   13b6c:	mov	r3, r2
   13b70:	add	lr, r2, #16
   13b74:	vst1.64	{d16-d17}, [r3], r4
   13b78:	vst1.64	{d16-d17}, [lr]
   13b7c:	vst1.32	{d16-d17}, [r3]
   13b80:	beq	13bd0 <__assert_fail@plt+0x2830>
   13b84:	vld1.64	{d16-d17}, [r2], r4
   13b88:	vld1.64	{d18-d19}, [lr]
   13b8c:	add	r3, sp, #48	; 0x30
   13b90:	vld1.32	{d20-d21}, [r2]
   13b94:	add	r2, r3, #20
   13b98:	add	r4, r3, #4
   13b9c:	vst1.32	{d18-d19}, [r2]
   13ba0:	add	r2, r3, #32
   13ba4:	vst1.32	{d16-d17}, [r4]
   13ba8:	vst1.32	{d20-d21}, [r2]
   13bac:	str	r1, [sp, #48]	; 0x30
   13bb0:	mvn	r2, #0
   13bb4:	ldr	r1, [sp, #60]	; 0x3c
   13bb8:	orr	r1, r1, #67108864	; 0x4000000
   13bbc:	str	r1, [sp, #60]	; 0x3c
   13bc0:	mov	r1, ip
   13bc4:	bl	13654 <__assert_fail@plt+0x22b4>
   13bc8:	sub	sp, fp, #8
   13bcc:	pop	{r4, sl, fp, pc}
   13bd0:	bl	1137c <abort@plt>
   13bd4:	push	{r4, r5, r6, sl, fp, lr}
   13bd8:	add	fp, sp, #16
   13bdc:	sub	sp, sp, #48	; 0x30
   13be0:	mov	ip, r3
   13be4:	movw	r3, #33168	; 0x8190
   13be8:	mov	r6, #32
   13bec:	cmp	r1, #0
   13bf0:	mov	r4, sp
   13bf4:	movt	r3, #2
   13bf8:	cmpne	r2, #0
   13bfc:	add	r5, r4, #16
   13c00:	add	lr, r3, #16
   13c04:	vld1.64	{d16-d17}, [r3], r6
   13c08:	vld1.64	{d18-d19}, [lr]
   13c0c:	vld1.64	{d20-d21}, [r3]
   13c10:	mov	r3, #10
   13c14:	vst1.64	{d16-d17}, [r4], r6
   13c18:	vst1.64	{d18-d19}, [r5]
   13c1c:	vst1.64	{d20-d21}, [r4]
   13c20:	str	r3, [sp]
   13c24:	bne	13c2c <__assert_fail@plt+0x288c>
   13c28:	bl	1137c <abort@plt>
   13c2c:	str	r2, [sp, #44]	; 0x2c
   13c30:	str	r1, [sp, #40]	; 0x28
   13c34:	mov	r3, sp
   13c38:	mov	r1, ip
   13c3c:	mvn	r2, #0
   13c40:	bl	13654 <__assert_fail@plt+0x22b4>
   13c44:	sub	sp, fp, #16
   13c48:	pop	{r4, r5, r6, sl, fp, pc}
   13c4c:	push	{r4, r5, r6, sl, fp, lr}
   13c50:	add	fp, sp, #16
   13c54:	sub	sp, sp, #48	; 0x30
   13c58:	mov	lr, r3
   13c5c:	movw	r3, #33168	; 0x8190
   13c60:	mov	r6, #32
   13c64:	cmp	r1, #0
   13c68:	mov	r4, sp
   13c6c:	movt	r3, #2
   13c70:	cmpne	r2, #0
   13c74:	add	r5, r4, #16
   13c78:	add	ip, r3, #16
   13c7c:	vld1.64	{d16-d17}, [r3], r6
   13c80:	vld1.64	{d18-d19}, [ip]
   13c84:	vld1.64	{d20-d21}, [r3]
   13c88:	mov	r3, #10
   13c8c:	vst1.64	{d16-d17}, [r4], r6
   13c90:	vst1.64	{d18-d19}, [r5]
   13c94:	vst1.64	{d20-d21}, [r4]
   13c98:	str	r3, [sp]
   13c9c:	bne	13ca4 <__assert_fail@plt+0x2904>
   13ca0:	bl	1137c <abort@plt>
   13ca4:	ldr	ip, [fp, #8]
   13ca8:	str	r2, [sp, #44]	; 0x2c
   13cac:	str	r1, [sp, #40]	; 0x28
   13cb0:	mov	r3, sp
   13cb4:	mov	r1, lr
   13cb8:	mov	r2, ip
   13cbc:	bl	13654 <__assert_fail@plt+0x22b4>
   13cc0:	sub	sp, fp, #16
   13cc4:	pop	{r4, r5, r6, sl, fp, pc}
   13cc8:	push	{r4, sl, fp, lr}
   13ccc:	add	fp, sp, #8
   13cd0:	sub	sp, sp, #48	; 0x30
   13cd4:	movw	r3, #33168	; 0x8190
   13cd8:	mov	lr, #32
   13cdc:	mov	ip, r2
   13ce0:	cmp	r0, #0
   13ce4:	movt	r3, #2
   13ce8:	cmpne	r1, #0
   13cec:	add	r2, r3, #16
   13cf0:	vld1.64	{d16-d17}, [r3], lr
   13cf4:	vld1.64	{d20-d21}, [r3]
   13cf8:	vld1.64	{d18-d19}, [r2]
   13cfc:	mov	r2, sp
   13d00:	add	r4, r2, #16
   13d04:	vst1.64	{d16-d17}, [r2], lr
   13d08:	vst1.64	{d20-d21}, [r2]
   13d0c:	mov	r2, #10
   13d10:	vst1.64	{d18-d19}, [r4]
   13d14:	str	r2, [sp]
   13d18:	bne	13d20 <__assert_fail@plt+0x2980>
   13d1c:	bl	1137c <abort@plt>
   13d20:	str	r1, [sp, #44]	; 0x2c
   13d24:	str	r0, [sp, #40]	; 0x28
   13d28:	mov	r3, sp
   13d2c:	mov	r0, #0
   13d30:	mov	r1, ip
   13d34:	mvn	r2, #0
   13d38:	bl	13654 <__assert_fail@plt+0x22b4>
   13d3c:	sub	sp, fp, #8
   13d40:	pop	{r4, sl, fp, pc}
   13d44:	push	{r4, r5, fp, lr}
   13d48:	add	fp, sp, #8
   13d4c:	sub	sp, sp, #48	; 0x30
   13d50:	mov	ip, r3
   13d54:	movw	r3, #33168	; 0x8190
   13d58:	mov	r4, #32
   13d5c:	mov	lr, r2
   13d60:	cmp	r0, #0
   13d64:	movt	r3, #2
   13d68:	cmpne	r1, #0
   13d6c:	add	r2, r3, #16
   13d70:	vld1.64	{d16-d17}, [r3], r4
   13d74:	vld1.64	{d20-d21}, [r3]
   13d78:	vld1.64	{d18-d19}, [r2]
   13d7c:	mov	r2, sp
   13d80:	add	r5, r2, #16
   13d84:	vst1.64	{d16-d17}, [r2], r4
   13d88:	vst1.64	{d20-d21}, [r2]
   13d8c:	mov	r2, #10
   13d90:	vst1.64	{d18-d19}, [r5]
   13d94:	str	r2, [sp]
   13d98:	bne	13da0 <__assert_fail@plt+0x2a00>
   13d9c:	bl	1137c <abort@plt>
   13da0:	str	r1, [sp, #44]	; 0x2c
   13da4:	str	r0, [sp, #40]	; 0x28
   13da8:	mov	r3, sp
   13dac:	mov	r0, #0
   13db0:	mov	r1, lr
   13db4:	mov	r2, ip
   13db8:	bl	13654 <__assert_fail@plt+0x22b4>
   13dbc:	sub	sp, fp, #8
   13dc0:	pop	{r4, r5, fp, pc}
   13dc4:	movw	r3, #33072	; 0x8130
   13dc8:	movt	r3, #2
   13dcc:	b	13654 <__assert_fail@plt+0x22b4>
   13dd0:	movw	r3, #33072	; 0x8130
   13dd4:	mov	r2, r1
   13dd8:	mov	r1, r0
   13ddc:	mov	r0, #0
   13de0:	movt	r3, #2
   13de4:	b	13654 <__assert_fail@plt+0x22b4>
   13de8:	movw	r3, #33072	; 0x8130
   13dec:	mvn	r2, #0
   13df0:	movt	r3, #2
   13df4:	b	13654 <__assert_fail@plt+0x22b4>
   13df8:	movw	r3, #33072	; 0x8130
   13dfc:	mov	r1, r0
   13e00:	mov	r0, #0
   13e04:	mvn	r2, #0
   13e08:	movt	r3, #2
   13e0c:	b	13654 <__assert_fail@plt+0x22b4>
   13e10:	push	{r4, r5, fp, lr}
   13e14:	add	fp, sp, #8
   13e18:	mov	r5, r0
   13e1c:	mov	r4, r1
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	mov	r1, r5
   13e2c:	bl	11160 <dcgettext@plt>
   13e30:	cmp	r0, r5
   13e34:	popne	{r4, r5, fp, pc}
   13e38:	bl	16780 <__assert_fail@plt+0x53e0>
   13e3c:	ldrb	r1, [r0]
   13e40:	and	r1, r1, #223	; 0xdf
   13e44:	cmp	r1, #71	; 0x47
   13e48:	beq	13eb0 <__assert_fail@plt+0x2b10>
   13e4c:	cmp	r1, #85	; 0x55
   13e50:	bne	13f08 <__assert_fail@plt+0x2b68>
   13e54:	ldrb	r1, [r0, #1]
   13e58:	and	r1, r1, #223	; 0xdf
   13e5c:	cmp	r1, #84	; 0x54
   13e60:	bne	13f08 <__assert_fail@plt+0x2b68>
   13e64:	ldrb	r1, [r0, #2]
   13e68:	and	r1, r1, #223	; 0xdf
   13e6c:	cmp	r1, #70	; 0x46
   13e70:	bne	13f08 <__assert_fail@plt+0x2b68>
   13e74:	ldrb	r1, [r0, #3]
   13e78:	cmp	r1, #45	; 0x2d
   13e7c:	bne	13f08 <__assert_fail@plt+0x2b68>
   13e80:	ldrb	r1, [r0, #4]
   13e84:	cmp	r1, #56	; 0x38
   13e88:	bne	13f08 <__assert_fail@plt+0x2b68>
   13e8c:	ldrb	r0, [r0, #5]
   13e90:	cmp	r0, #0
   13e94:	bne	13f08 <__assert_fail@plt+0x2b68>
   13e98:	ldrb	r1, [r5]
   13e9c:	movw	r2, #29696	; 0x7400
   13ea0:	movw	r0, #29700	; 0x7404
   13ea4:	movt	r2, #1
   13ea8:	movt	r0, #1
   13eac:	b	13f38 <__assert_fail@plt+0x2b98>
   13eb0:	ldrb	r1, [r0, #1]
   13eb4:	and	r1, r1, #223	; 0xdf
   13eb8:	cmp	r1, #66	; 0x42
   13ebc:	bne	13f08 <__assert_fail@plt+0x2b68>
   13ec0:	ldrb	r1, [r0, #2]
   13ec4:	cmp	r1, #49	; 0x31
   13ec8:	bne	13f08 <__assert_fail@plt+0x2b68>
   13ecc:	ldrb	r1, [r0, #3]
   13ed0:	cmp	r1, #56	; 0x38
   13ed4:	bne	13f08 <__assert_fail@plt+0x2b68>
   13ed8:	ldrb	r1, [r0, #4]
   13edc:	cmp	r1, #48	; 0x30
   13ee0:	bne	13f08 <__assert_fail@plt+0x2b68>
   13ee4:	ldrb	r1, [r0, #5]
   13ee8:	cmp	r1, #51	; 0x33
   13eec:	bne	13f08 <__assert_fail@plt+0x2b68>
   13ef0:	ldrb	r1, [r0, #6]
   13ef4:	cmp	r1, #48	; 0x30
   13ef8:	bne	13f08 <__assert_fail@plt+0x2b68>
   13efc:	ldrb	r0, [r0, #7]
   13f00:	cmp	r0, #0
   13f04:	beq	13f24 <__assert_fail@plt+0x2b84>
   13f08:	movw	r1, #29690	; 0x73fa
   13f0c:	movw	r0, #29694	; 0x73fe
   13f10:	cmp	r4, #9
   13f14:	movt	r1, #1
   13f18:	movt	r0, #1
   13f1c:	moveq	r0, r1
   13f20:	pop	{r4, r5, fp, pc}
   13f24:	ldrb	r1, [r5]
   13f28:	movw	r2, #29704	; 0x7408
   13f2c:	movw	r0, #29708	; 0x740c
   13f30:	movt	r2, #1
   13f34:	movt	r0, #1
   13f38:	cmp	r1, #96	; 0x60
   13f3c:	moveq	r0, r2
   13f40:	pop	{r4, r5, fp, pc}
   13f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f48:	add	fp, sp, #28
   13f4c:	sub	sp, sp, #12
   13f50:	ldr	sl, [fp, #8]
   13f54:	mov	r9, r3
   13f58:	mov	r4, r2
   13f5c:	mov	r8, r1
   13f60:	mov	r7, r0
   13f64:	cmp	r2, #0
   13f68:	beq	13f80 <__assert_fail@plt+0x2be0>
   13f6c:	mov	r0, r7
   13f70:	mov	r1, #58	; 0x3a
   13f74:	bl	1128c <strchr@plt>
   13f78:	mov	r6, r0
   13f7c:	b	13f84 <__assert_fail@plt+0x2be4>
   13f80:	mov	r6, #0
   13f84:	mov	r0, r7
   13f88:	mov	r1, r6
   13f8c:	mov	r2, r8
   13f90:	mov	r3, r4
   13f94:	stm	sp, {r9, sl}
   13f98:	bl	14000 <__assert_fail@plt+0x2c60>
   13f9c:	mov	r5, r0
   13fa0:	cmp	r4, #0
   13fa4:	beq	13ff4 <__assert_fail@plt+0x2c54>
   13fa8:	cmp	r6, #0
   13fac:	bne	13ff4 <__assert_fail@plt+0x2c54>
   13fb0:	cmp	r5, #0
   13fb4:	beq	13ff4 <__assert_fail@plt+0x2c54>
   13fb8:	mov	r0, r7
   13fbc:	mov	r1, #46	; 0x2e
   13fc0:	bl	1128c <strchr@plt>
   13fc4:	cmp	r0, #0
   13fc8:	beq	13ff4 <__assert_fail@plt+0x2c54>
   13fcc:	mov	r1, r0
   13fd0:	mov	r0, r7
   13fd4:	mov	r2, r8
   13fd8:	mov	r3, r4
   13fdc:	stm	sp, {r9, sl}
   13fe0:	bl	14000 <__assert_fail@plt+0x2c60>
   13fe4:	cmp	r0, #0
   13fe8:	movne	r0, r5
   13fec:	sub	sp, fp, #28
   13ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff4:	mov	r0, r5
   13ff8:	sub	sp, fp, #28
   13ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14004:	add	fp, sp, #28
   14008:	sub	sp, sp, #36	; 0x24
   1400c:	mov	sl, r3
   14010:	mov	r9, r2
   14014:	ldr	r3, [r2]
   14018:	ldr	r2, [fp, #8]
   1401c:	mov	r4, r1
   14020:	cmp	sl, #0
   14024:	beq	14030 <__assert_fail@plt+0x2c90>
   14028:	ldr	r1, [sl]
   1402c:	b	14034 <__assert_fail@plt+0x2c94>
   14030:	mvn	r1, #0
   14034:	ldr	r8, [fp, #12]
   14038:	cmp	r2, #0
   1403c:	str	r1, [sp, #8]
   14040:	str	r3, [sp, #4]
   14044:	movne	r1, #0
   14048:	strne	r1, [r2]
   1404c:	cmp	r8, #0
   14050:	movne	r1, #0
   14054:	strne	r1, [r8]
   14058:	cmp	r4, #0
   1405c:	beq	14090 <__assert_fail@plt+0x2cf0>
   14060:	subs	r5, r4, r0
   14064:	beq	14120 <__assert_fail@plt+0x2d80>
   14068:	add	r1, r5, #1
   1406c:	bl	14e3c <__assert_fail@plt+0x3a9c>
   14070:	mov	r7, r0
   14074:	mov	r0, #0
   14078:	mov	r6, r4
   1407c:	strb	r0, [r7, r5]
   14080:	ldrb	r0, [r6, #1]!
   14084:	cmp	r0, #0
   14088:	moveq	r6, r0
   1408c:	b	140a8 <__assert_fail@plt+0x2d08>
   14090:	ldrb	r1, [r0]
   14094:	cmp	r1, #0
   14098:	beq	14238 <__assert_fail@plt+0x2e98>
   1409c:	bl	14eac <__assert_fail@plt+0x3b0c>
   140a0:	mov	r7, r0
   140a4:	mov	r6, #0
   140a8:	ldrb	r0, [r7]
   140ac:	cmp	r0, #43	; 0x2b
   140b0:	beq	14100 <__assert_fail@plt+0x2d60>
   140b4:	mov	r0, r7
   140b8:	bl	110e8 <getpwnam@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	14100 <__assert_fail@plt+0x2d60>
   140c4:	ldr	r1, [r0, #8]
   140c8:	mov	r5, #0
   140cc:	cmp	r4, #0
   140d0:	str	r1, [sp, #4]
   140d4:	beq	14244 <__assert_fail@plt+0x2ea4>
   140d8:	cmp	r6, #0
   140dc:	bne	14244 <__assert_fail@plt+0x2ea4>
   140e0:	ldr	r4, [r0, #12]
   140e4:	mov	r0, r4
   140e8:	bl	11388 <getgrgid@plt>
   140ec:	cmp	r0, #0
   140f0:	str	r4, [sp, #8]
   140f4:	beq	1424c <__assert_fail@plt+0x2eac>
   140f8:	ldr	r0, [r0]
   140fc:	b	1425c <__assert_fail@plt+0x2ebc>
   14100:	cmp	r4, #0
   14104:	beq	141dc <__assert_fail@plt+0x2e3c>
   14108:	cmp	r6, #0
   1410c:	bne	141dc <__assert_fail@plt+0x2e3c>
   14110:	movw	r5, #29823	; 0x747f
   14114:	mov	r4, #0
   14118:	movt	r5, #1
   1411c:	b	14268 <__assert_fail@plt+0x2ec8>
   14120:	ldrb	r0, [r4, #1]!
   14124:	mov	r7, #0
   14128:	mov	r5, #0
   1412c:	cmp	r0, #0
   14130:	moveq	r4, r0
   14134:	mov	r6, r4
   14138:	mov	r4, #0
   1413c:	cmp	r6, #0
   14140:	beq	14274 <__assert_fail@plt+0x2ed4>
   14144:	cmp	r5, #0
   14148:	bne	14274 <__assert_fail@plt+0x2ed4>
   1414c:	ldrb	r0, [r6]
   14150:	cmp	r0, #43	; 0x2b
   14154:	beq	14174 <__assert_fail@plt+0x2dd4>
   14158:	mov	r0, r6
   1415c:	bl	11394 <getgrnam@plt>
   14160:	cmp	r0, #0
   14164:	beq	14174 <__assert_fail@plt+0x2dd4>
   14168:	ldr	r0, [r0, #8]
   1416c:	mov	r5, #0
   14170:	b	141c4 <__assert_fail@plt+0x2e24>
   14174:	movw	r0, #28196	; 0x6e24
   14178:	add	r3, sp, #12
   1417c:	mov	r1, #0
   14180:	mov	r2, #10
   14184:	movt	r0, #1
   14188:	str	r0, [sp]
   1418c:	mov	r0, r6
   14190:	bl	14f5c <__assert_fail@plt+0x3bbc>
   14194:	ldr	r1, [sp, #12]
   14198:	mvn	r2, #0
   1419c:	clz	r0, r0
   141a0:	movw	r5, #29809	; 0x7471
   141a4:	lsr	r0, r0, #5
   141a8:	movt	r5, #1
   141ac:	subs	r2, r1, r2
   141b0:	movwne	r2, #1
   141b4:	ands	r0, r0, r2
   141b8:	ldr	r0, [sp, #8]
   141bc:	movne	r0, r1
   141c0:	movwne	r5, #0
   141c4:	str	r0, [sp, #8]
   141c8:	bl	110c4 <endgrent@plt>
   141cc:	mov	r0, r6
   141d0:	bl	14eac <__assert_fail@plt+0x3b0c>
   141d4:	mov	r4, r0
   141d8:	b	14274 <__assert_fail@plt+0x2ed4>
   141dc:	movw	r0, #28196	; 0x6e24
   141e0:	add	r3, sp, #12
   141e4:	mov	r1, #0
   141e8:	mov	r2, #10
   141ec:	mov	r4, #0
   141f0:	movt	r0, #1
   141f4:	str	r0, [sp]
   141f8:	mov	r0, r7
   141fc:	bl	14f5c <__assert_fail@plt+0x3bbc>
   14200:	ldr	r1, [sp, #12]
   14204:	mvn	r2, #0
   14208:	clz	r0, r0
   1420c:	movw	r5, #29796	; 0x7464
   14210:	lsr	r0, r0, #5
   14214:	movt	r5, #1
   14218:	subs	r2, r1, r2
   1421c:	movwne	r2, #1
   14220:	ands	r0, r0, r2
   14224:	ldr	r0, [sp, #4]
   14228:	movne	r0, r1
   1422c:	movwne	r5, #0
   14230:	str	r0, [sp, #4]
   14234:	b	14268 <__assert_fail@plt+0x2ec8>
   14238:	mov	r4, #0
   1423c:	mov	r7, #0
   14240:	b	14280 <__assert_fail@plt+0x2ee0>
   14244:	mov	r4, #0
   14248:	b	14268 <__assert_fail@plt+0x2ec8>
   1424c:	add	r2, sp, #12
   14250:	mov	r0, r4
   14254:	mov	r1, #0
   14258:	bl	16724 <__assert_fail@plt+0x5384>
   1425c:	bl	14eac <__assert_fail@plt+0x3b0c>
   14260:	mov	r4, r0
   14264:	bl	110c4 <endgrent@plt>
   14268:	bl	1131c <endpwent@plt>
   1426c:	cmp	r6, #0
   14270:	bne	14144 <__assert_fail@plt+0x2da4>
   14274:	mov	r6, #0
   14278:	cmp	r5, #0
   1427c:	bne	142bc <__assert_fail@plt+0x2f1c>
   14280:	ldr	r0, [sp, #4]
   14284:	cmp	sl, #0
   14288:	mov	r6, #1
   1428c:	str	r0, [r9]
   14290:	ldrne	r0, [sp, #8]
   14294:	strne	r0, [sl]
   14298:	ldr	r0, [fp, #8]
   1429c:	cmp	r0, #0
   142a0:	strne	r7, [r0]
   142a4:	movne	r7, #0
   142a8:	cmp	r8, #0
   142ac:	moveq	r5, #0
   142b0:	strne	r4, [r8]
   142b4:	movne	r5, #0
   142b8:	movne	r4, #0
   142bc:	mov	r0, r7
   142c0:	bl	1217c <__assert_fail@plt+0xddc>
   142c4:	mov	r0, r4
   142c8:	bl	1217c <__assert_fail@plt+0xddc>
   142cc:	mov	r0, #0
   142d0:	cmp	r6, #0
   142d4:	bne	142e8 <__assert_fail@plt+0x2f48>
   142d8:	mov	r0, #0
   142dc:	mov	r1, r5
   142e0:	mov	r2, #5
   142e4:	bl	11160 <dcgettext@plt>
   142e8:	sub	sp, fp, #28
   142ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142f4:	add	fp, sp, #24
   142f8:	sub	sp, sp, #32
   142fc:	ldr	r6, [fp, #12]
   14300:	ldr	r7, [fp, #8]
   14304:	mov	r4, r2
   14308:	mov	r8, r0
   1430c:	cmp	r1, #0
   14310:	beq	14338 <__assert_fail@plt+0x2f98>
   14314:	movw	r2, #29836	; 0x748c
   14318:	mov	r5, r1
   1431c:	str	r3, [sp, #4]
   14320:	str	r4, [sp]
   14324:	mov	r0, r8
   14328:	mov	r1, #1
   1432c:	movt	r2, #1
   14330:	mov	r3, r5
   14334:	b	14350 <__assert_fail@plt+0x2fb0>
   14338:	movw	r2, #29848	; 0x7498
   1433c:	str	r3, [sp]
   14340:	mov	r0, r8
   14344:	mov	r1, #1
   14348:	mov	r3, r4
   1434c:	movt	r2, #1
   14350:	bl	112e0 <__fprintf_chk@plt>
   14354:	movw	r1, #29855	; 0x749f
   14358:	mov	r0, #0
   1435c:	mov	r2, #5
   14360:	movt	r1, #1
   14364:	bl	11160 <dcgettext@plt>
   14368:	movw	r2, #30573	; 0x776d
   1436c:	mov	r3, r0
   14370:	movw	r0, #2022	; 0x7e6
   14374:	mov	r1, #1
   14378:	movt	r2, #1
   1437c:	str	r0, [sp]
   14380:	mov	r0, r8
   14384:	bl	112e0 <__fprintf_chk@plt>
   14388:	movw	r4, #28195	; 0x6e23
   1438c:	mov	r1, r8
   14390:	movt	r4, #1
   14394:	mov	r0, r4
   14398:	bl	110d0 <fputs_unlocked@plt>
   1439c:	movw	r1, #29859	; 0x74a3
   143a0:	mov	r0, #0
   143a4:	mov	r2, #5
   143a8:	movt	r1, #1
   143ac:	bl	11160 <dcgettext@plt>
   143b0:	movw	r3, #30030	; 0x754e
   143b4:	mov	r2, r0
   143b8:	mov	r0, r8
   143bc:	mov	r1, #1
   143c0:	movt	r3, #1
   143c4:	bl	112e0 <__fprintf_chk@plt>
   143c8:	mov	r0, r4
   143cc:	mov	r1, r8
   143d0:	bl	110d0 <fputs_unlocked@plt>
   143d4:	cmp	r6, #9
   143d8:	bhi	14414 <__assert_fail@plt+0x3074>
   143dc:	add	r0, pc, #0
   143e0:	ldr	pc, [r0, r6, lsl #2]
   143e4:	andeq	r4, r1, ip, lsl #8
   143e8:	andeq	r4, r1, r0, lsr #8
   143ec:	andeq	r4, r1, r0, asr r4
   143f0:	andeq	r4, r1, r8, ror r4
   143f4:	andeq	r4, r1, r0, lsr #9
   143f8:	andeq	r4, r1, r8, asr #9
   143fc:	strdeq	r4, [r1], -r0
   14400:	andeq	r4, r1, r8, lsr #10
   14404:	andeq	r4, r1, r8, asr #11
   14408:	andeq	r4, r1, r0, ror r5
   1440c:	sub	sp, fp, #24
   14410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14414:	movw	r1, #30383	; 0x76af
   14418:	movt	r1, #1
   1441c:	b	14578 <__assert_fail@plt+0x31d8>
   14420:	movw	r1, #30064	; 0x7570
   14424:	mov	r0, #0
   14428:	mov	r2, #5
   1442c:	movt	r1, #1
   14430:	bl	11160 <dcgettext@plt>
   14434:	ldr	r3, [r7]
   14438:	mov	r2, r0
   1443c:	mov	r0, r8
   14440:	mov	r1, #1
   14444:	sub	sp, fp, #24
   14448:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1444c:	b	112e0 <__fprintf_chk@plt>
   14450:	movw	r1, #30080	; 0x7580
   14454:	mov	r0, #0
   14458:	mov	r2, #5
   1445c:	movt	r1, #1
   14460:	bl	11160 <dcgettext@plt>
   14464:	mov	r2, r0
   14468:	ldr	r3, [r7]
   1446c:	ldr	r0, [r7, #4]
   14470:	str	r0, [sp]
   14474:	b	14564 <__assert_fail@plt+0x31c4>
   14478:	movw	r1, #30103	; 0x7597
   1447c:	mov	r0, #0
   14480:	mov	r2, #5
   14484:	movt	r1, #1
   14488:	bl	11160 <dcgettext@plt>
   1448c:	mov	r2, r0
   14490:	ldr	r3, [r7]
   14494:	ldmib	r7, {r0, r1}
   14498:	stm	sp, {r0, r1}
   1449c:	b	14564 <__assert_fail@plt+0x31c4>
   144a0:	movw	r1, #30131	; 0x75b3
   144a4:	mov	r0, #0
   144a8:	mov	r2, #5
   144ac:	movt	r1, #1
   144b0:	bl	11160 <dcgettext@plt>
   144b4:	ldr	r3, [r7]
   144b8:	mov	r2, r0
   144bc:	ldmib	r7, {r0, r1, r7}
   144c0:	stm	sp, {r0, r1, r7}
   144c4:	b	14564 <__assert_fail@plt+0x31c4>
   144c8:	movw	r1, #30163	; 0x75d3
   144cc:	mov	r0, #0
   144d0:	mov	r2, #5
   144d4:	movt	r1, #1
   144d8:	bl	11160 <dcgettext@plt>
   144dc:	ldr	r3, [r7]
   144e0:	mov	r2, r0
   144e4:	ldmib	r7, {r0, r1, r6, r7}
   144e8:	stm	sp, {r0, r1, r6, r7}
   144ec:	b	14564 <__assert_fail@plt+0x31c4>
   144f0:	movw	r1, #30199	; 0x75f7
   144f4:	mov	r0, #0
   144f8:	mov	r2, #5
   144fc:	movt	r1, #1
   14500:	bl	11160 <dcgettext@plt>
   14504:	mov	r2, r0
   14508:	ldr	r3, [r7]
   1450c:	ldmib	r7, {r0, r1, r6}
   14510:	ldr	r5, [r7, #16]
   14514:	ldr	r7, [r7, #20]
   14518:	stm	sp, {r0, r1, r6}
   1451c:	str	r5, [sp, #12]
   14520:	str	r7, [sp, #16]
   14524:	b	14564 <__assert_fail@plt+0x31c4>
   14528:	movw	r1, #30239	; 0x761f
   1452c:	mov	r0, #0
   14530:	mov	r2, #5
   14534:	movt	r1, #1
   14538:	bl	11160 <dcgettext@plt>
   1453c:	mov	r2, r0
   14540:	ldr	r3, [r7]
   14544:	ldmib	r7, {r0, r1, r6}
   14548:	ldr	r5, [r7, #16]
   1454c:	ldr	r4, [r7, #20]
   14550:	ldr	r7, [r7, #24]
   14554:	stm	sp, {r0, r1, r6}
   14558:	str	r5, [sp, #12]
   1455c:	str	r4, [sp, #16]
   14560:	str	r7, [sp, #20]
   14564:	mov	r0, r8
   14568:	mov	r1, #1
   1456c:	b	14618 <__assert_fail@plt+0x3278>
   14570:	movw	r1, #30331	; 0x767b
   14574:	movt	r1, #1
   14578:	mov	r0, #0
   1457c:	mov	r2, #5
   14580:	bl	11160 <dcgettext@plt>
   14584:	mov	ip, r0
   14588:	ldr	r3, [r7]
   1458c:	ldr	r0, [r7, #4]
   14590:	ldr	r1, [r7, #8]
   14594:	ldr	r6, [r7, #12]
   14598:	ldr	r5, [r7, #16]
   1459c:	ldr	r4, [r7, #20]
   145a0:	ldr	r2, [r7, #24]
   145a4:	ldr	lr, [r7, #28]
   145a8:	ldr	r7, [r7, #32]
   145ac:	stm	sp, {r0, r1, r6}
   145b0:	str	r5, [sp, #12]
   145b4:	str	r4, [sp, #16]
   145b8:	str	r2, [sp, #20]
   145bc:	str	lr, [sp, #24]
   145c0:	str	r7, [sp, #28]
   145c4:	b	1460c <__assert_fail@plt+0x326c>
   145c8:	movw	r1, #30283	; 0x764b
   145cc:	mov	r0, #0
   145d0:	mov	r2, #5
   145d4:	movt	r1, #1
   145d8:	bl	11160 <dcgettext@plt>
   145dc:	mov	ip, r0
   145e0:	ldr	r3, [r7]
   145e4:	ldmib	r7, {r0, r1, r6}
   145e8:	ldr	r5, [r7, #16]
   145ec:	ldr	r4, [r7, #20]
   145f0:	ldr	r2, [r7, #24]
   145f4:	ldr	r7, [r7, #28]
   145f8:	stm	sp, {r0, r1, r6}
   145fc:	str	r5, [sp, #12]
   14600:	str	r4, [sp, #16]
   14604:	str	r2, [sp, #20]
   14608:	str	r7, [sp, #24]
   1460c:	mov	r0, r8
   14610:	mov	r1, #1
   14614:	mov	r2, ip
   14618:	bl	112e0 <__fprintf_chk@plt>
   1461c:	sub	sp, fp, #24
   14620:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14624:	push	{r4, sl, fp, lr}
   14628:	add	fp, sp, #8
   1462c:	sub	sp, sp, #8
   14630:	ldr	ip, [fp, #8]
   14634:	mov	lr, #0
   14638:	ldr	r4, [ip, lr, lsl #2]
   1463c:	add	lr, lr, #1
   14640:	cmp	r4, #0
   14644:	bne	14638 <__assert_fail@plt+0x3298>
   14648:	sub	r4, lr, #1
   1464c:	str	ip, [sp]
   14650:	str	r4, [sp, #4]
   14654:	bl	142f0 <__assert_fail@plt+0x2f50>
   14658:	sub	sp, fp, #8
   1465c:	pop	{r4, sl, fp, pc}
   14660:	push	{fp, lr}
   14664:	mov	fp, sp
   14668:	sub	sp, sp, #48	; 0x30
   1466c:	ldr	ip, [fp, #8]
   14670:	ldr	lr, [ip]
   14674:	cmp	lr, #0
   14678:	str	lr, [sp, #8]
   1467c:	beq	14718 <__assert_fail@plt+0x3378>
   14680:	ldr	lr, [ip, #4]
   14684:	cmp	lr, #0
   14688:	str	lr, [sp, #12]
   1468c:	beq	14720 <__assert_fail@plt+0x3380>
   14690:	ldr	lr, [ip, #8]
   14694:	cmp	lr, #0
   14698:	str	lr, [sp, #16]
   1469c:	beq	14728 <__assert_fail@plt+0x3388>
   146a0:	ldr	lr, [ip, #12]
   146a4:	cmp	lr, #0
   146a8:	str	lr, [sp, #20]
   146ac:	beq	14730 <__assert_fail@plt+0x3390>
   146b0:	ldr	lr, [ip, #16]
   146b4:	cmp	lr, #0
   146b8:	str	lr, [sp, #24]
   146bc:	beq	14738 <__assert_fail@plt+0x3398>
   146c0:	ldr	lr, [ip, #20]
   146c4:	cmp	lr, #0
   146c8:	str	lr, [sp, #28]
   146cc:	beq	14740 <__assert_fail@plt+0x33a0>
   146d0:	ldr	lr, [ip, #24]
   146d4:	cmp	lr, #0
   146d8:	str	lr, [sp, #32]
   146dc:	beq	14748 <__assert_fail@plt+0x33a8>
   146e0:	ldr	lr, [ip, #28]
   146e4:	cmp	lr, #0
   146e8:	str	lr, [sp, #36]	; 0x24
   146ec:	beq	14750 <__assert_fail@plt+0x33b0>
   146f0:	ldr	lr, [ip, #32]
   146f4:	cmp	lr, #0
   146f8:	str	lr, [sp, #40]	; 0x28
   146fc:	beq	14758 <__assert_fail@plt+0x33b8>
   14700:	ldr	lr, [ip, #36]	; 0x24
   14704:	mov	ip, #10
   14708:	cmp	lr, #0
   1470c:	str	lr, [sp, #44]	; 0x2c
   14710:	movweq	ip, #9
   14714:	b	1475c <__assert_fail@plt+0x33bc>
   14718:	mov	ip, #0
   1471c:	b	1475c <__assert_fail@plt+0x33bc>
   14720:	mov	ip, #1
   14724:	b	1475c <__assert_fail@plt+0x33bc>
   14728:	mov	ip, #2
   1472c:	b	1475c <__assert_fail@plt+0x33bc>
   14730:	mov	ip, #3
   14734:	b	1475c <__assert_fail@plt+0x33bc>
   14738:	mov	ip, #4
   1473c:	b	1475c <__assert_fail@plt+0x33bc>
   14740:	mov	ip, #5
   14744:	b	1475c <__assert_fail@plt+0x33bc>
   14748:	mov	ip, #6
   1474c:	b	1475c <__assert_fail@plt+0x33bc>
   14750:	mov	ip, #7
   14754:	b	1475c <__assert_fail@plt+0x33bc>
   14758:	mov	ip, #8
   1475c:	add	lr, sp, #8
   14760:	str	ip, [sp, #4]
   14764:	str	lr, [sp]
   14768:	bl	142f0 <__assert_fail@plt+0x2f50>
   1476c:	mov	sp, fp
   14770:	pop	{fp, pc}
   14774:	push	{fp, lr}
   14778:	mov	fp, sp
   1477c:	sub	sp, sp, #56	; 0x38
   14780:	add	ip, fp, #8
   14784:	str	ip, [sp, #12]
   14788:	ldr	lr, [fp, #8]
   1478c:	cmp	lr, #0
   14790:	str	lr, [sp, #16]
   14794:	beq	14830 <__assert_fail@plt+0x3490>
   14798:	ldr	lr, [ip, #4]
   1479c:	cmp	lr, #0
   147a0:	str	lr, [sp, #20]
   147a4:	beq	14838 <__assert_fail@plt+0x3498>
   147a8:	ldr	lr, [ip, #8]
   147ac:	cmp	lr, #0
   147b0:	str	lr, [sp, #24]
   147b4:	beq	14840 <__assert_fail@plt+0x34a0>
   147b8:	ldr	lr, [ip, #12]
   147bc:	cmp	lr, #0
   147c0:	str	lr, [sp, #28]
   147c4:	beq	14848 <__assert_fail@plt+0x34a8>
   147c8:	ldr	lr, [ip, #16]
   147cc:	cmp	lr, #0
   147d0:	str	lr, [sp, #32]
   147d4:	beq	14850 <__assert_fail@plt+0x34b0>
   147d8:	ldr	lr, [ip, #20]
   147dc:	cmp	lr, #0
   147e0:	str	lr, [sp, #36]	; 0x24
   147e4:	beq	14858 <__assert_fail@plt+0x34b8>
   147e8:	ldr	lr, [ip, #24]
   147ec:	cmp	lr, #0
   147f0:	str	lr, [sp, #40]	; 0x28
   147f4:	beq	14860 <__assert_fail@plt+0x34c0>
   147f8:	ldr	lr, [ip, #28]
   147fc:	cmp	lr, #0
   14800:	str	lr, [sp, #44]	; 0x2c
   14804:	beq	14868 <__assert_fail@plt+0x34c8>
   14808:	ldr	lr, [ip, #32]
   1480c:	cmp	lr, #0
   14810:	str	lr, [sp, #48]	; 0x30
   14814:	beq	14870 <__assert_fail@plt+0x34d0>
   14818:	ldr	lr, [ip, #36]	; 0x24
   1481c:	mov	ip, #10
   14820:	cmp	lr, #0
   14824:	str	lr, [sp, #52]	; 0x34
   14828:	movweq	ip, #9
   1482c:	b	14874 <__assert_fail@plt+0x34d4>
   14830:	mov	ip, #0
   14834:	b	14874 <__assert_fail@plt+0x34d4>
   14838:	mov	ip, #1
   1483c:	b	14874 <__assert_fail@plt+0x34d4>
   14840:	mov	ip, #2
   14844:	b	14874 <__assert_fail@plt+0x34d4>
   14848:	mov	ip, #3
   1484c:	b	14874 <__assert_fail@plt+0x34d4>
   14850:	mov	ip, #4
   14854:	b	14874 <__assert_fail@plt+0x34d4>
   14858:	mov	ip, #5
   1485c:	b	14874 <__assert_fail@plt+0x34d4>
   14860:	mov	ip, #6
   14864:	b	14874 <__assert_fail@plt+0x34d4>
   14868:	mov	ip, #7
   1486c:	b	14874 <__assert_fail@plt+0x34d4>
   14870:	mov	ip, #8
   14874:	add	lr, sp, #16
   14878:	str	ip, [sp, #4]
   1487c:	str	lr, [sp]
   14880:	bl	142f0 <__assert_fail@plt+0x2f50>
   14884:	mov	sp, fp
   14888:	pop	{fp, pc}
   1488c:	push	{fp, lr}
   14890:	mov	fp, sp
   14894:	movw	r0, #33140	; 0x8174
   14898:	movt	r0, #2
   1489c:	ldr	r1, [r0]
   148a0:	movw	r0, #28195	; 0x6e23
   148a4:	movt	r0, #1
   148a8:	bl	110d0 <fputs_unlocked@plt>
   148ac:	movw	r1, #30443	; 0x76eb
   148b0:	mov	r0, #0
   148b4:	mov	r2, #5
   148b8:	movt	r1, #1
   148bc:	bl	11160 <dcgettext@plt>
   148c0:	movw	r2, #30463	; 0x76ff
   148c4:	mov	r1, r0
   148c8:	mov	r0, #1
   148cc:	movt	r2, #1
   148d0:	bl	112c8 <__printf_chk@plt>
   148d4:	movw	r1, #30485	; 0x7715
   148d8:	mov	r0, #0
   148dc:	mov	r2, #5
   148e0:	movt	r1, #1
   148e4:	bl	11160 <dcgettext@plt>
   148e8:	movw	r2, #28613	; 0x6fc5
   148ec:	movw	r3, #29092	; 0x71a4
   148f0:	mov	r1, r0
   148f4:	mov	r0, #1
   148f8:	movt	r2, #1
   148fc:	movt	r3, #1
   14900:	bl	112c8 <__printf_chk@plt>
   14904:	movw	r1, #30505	; 0x7729
   14908:	mov	r0, #0
   1490c:	mov	r2, #5
   14910:	movt	r1, #1
   14914:	bl	11160 <dcgettext@plt>
   14918:	movw	r2, #30544	; 0x7750
   1491c:	mov	r1, r0
   14920:	mov	r0, #1
   14924:	movt	r2, #1
   14928:	pop	{fp, lr}
   1492c:	b	112c8 <__printf_chk@plt>
   14930:	push	{r4, r5, r6, sl, fp, lr}
   14934:	add	fp, sp, #16
   14938:	mov	r4, r2
   1493c:	mov	r5, r1
   14940:	mov	r6, r0
   14944:	bl	16a48 <__assert_fail@plt+0x56a8>
   14948:	cmp	r0, #0
   1494c:	popne	{r4, r5, r6, sl, fp, pc}
   14950:	cmp	r6, #0
   14954:	beq	14968 <__assert_fail@plt+0x35c8>
   14958:	cmp	r5, #0
   1495c:	cmpne	r4, #0
   14960:	bne	14968 <__assert_fail@plt+0x35c8>
   14964:	pop	{r4, r5, r6, sl, fp, pc}
   14968:	bl	14ee4 <__assert_fail@plt+0x3b44>
   1496c:	push	{r4, r5, r6, sl, fp, lr}
   14970:	add	fp, sp, #16
   14974:	mov	r4, r2
   14978:	mov	r5, r1
   1497c:	mov	r6, r0
   14980:	bl	16a48 <__assert_fail@plt+0x56a8>
   14984:	cmp	r0, #0
   14988:	popne	{r4, r5, r6, sl, fp, pc}
   1498c:	cmp	r6, #0
   14990:	beq	149a4 <__assert_fail@plt+0x3604>
   14994:	cmp	r5, #0
   14998:	cmpne	r4, #0
   1499c:	bne	149a4 <__assert_fail@plt+0x3604>
   149a0:	pop	{r4, r5, r6, sl, fp, pc}
   149a4:	bl	14ee4 <__assert_fail@plt+0x3b44>
   149a8:	push	{fp, lr}
   149ac:	mov	fp, sp
   149b0:	bl	1647c <__assert_fail@plt+0x50dc>
   149b4:	cmp	r0, #0
   149b8:	popne	{fp, pc}
   149bc:	bl	14ee4 <__assert_fail@plt+0x3b44>
   149c0:	push	{fp, lr}
   149c4:	mov	fp, sp
   149c8:	bl	1647c <__assert_fail@plt+0x50dc>
   149cc:	cmp	r0, #0
   149d0:	popne	{fp, pc}
   149d4:	bl	14ee4 <__assert_fail@plt+0x3b44>
   149d8:	push	{fp, lr}
   149dc:	mov	fp, sp
   149e0:	bl	1647c <__assert_fail@plt+0x50dc>
   149e4:	cmp	r0, #0
   149e8:	popne	{fp, pc}
   149ec:	bl	14ee4 <__assert_fail@plt+0x3b44>
   149f0:	push	{r4, r5, fp, lr}
   149f4:	add	fp, sp, #8
   149f8:	mov	r4, r1
   149fc:	mov	r5, r0
   14a00:	bl	164ac <__assert_fail@plt+0x510c>
   14a04:	cmp	r0, #0
   14a08:	popne	{r4, r5, fp, pc}
   14a0c:	cmp	r5, #0
   14a10:	beq	14a20 <__assert_fail@plt+0x3680>
   14a14:	cmp	r4, #0
   14a18:	bne	14a20 <__assert_fail@plt+0x3680>
   14a1c:	pop	{r4, r5, fp, pc}
   14a20:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14a24:	push	{fp, lr}
   14a28:	mov	fp, sp
   14a2c:	cmp	r1, #0
   14a30:	orreq	r1, r1, #1
   14a34:	bl	164ac <__assert_fail@plt+0x510c>
   14a38:	cmp	r0, #0
   14a3c:	popne	{fp, pc}
   14a40:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14a44:	push	{fp, lr}
   14a48:	mov	fp, sp
   14a4c:	clz	r3, r2
   14a50:	lsr	ip, r3, #5
   14a54:	clz	r3, r1
   14a58:	lsr	r3, r3, #5
   14a5c:	orrs	r3, r3, ip
   14a60:	movwne	r1, #1
   14a64:	movwne	r2, #1
   14a68:	bl	16a48 <__assert_fail@plt+0x56a8>
   14a6c:	cmp	r0, #0
   14a70:	popne	{fp, pc}
   14a74:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14a78:	push	{fp, lr}
   14a7c:	mov	fp, sp
   14a80:	mov	r2, r1
   14a84:	mov	r1, r0
   14a88:	mov	r0, #0
   14a8c:	bl	16a48 <__assert_fail@plt+0x56a8>
   14a90:	cmp	r0, #0
   14a94:	popne	{fp, pc}
   14a98:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14a9c:	push	{fp, lr}
   14aa0:	mov	fp, sp
   14aa4:	mov	r2, r1
   14aa8:	mov	r1, r0
   14aac:	clz	r0, r2
   14ab0:	clz	r3, r1
   14ab4:	lsr	r0, r0, #5
   14ab8:	lsr	r3, r3, #5
   14abc:	orrs	r0, r3, r0
   14ac0:	mov	r0, #0
   14ac4:	movwne	r1, #1
   14ac8:	movwne	r2, #1
   14acc:	bl	16a48 <__assert_fail@plt+0x56a8>
   14ad0:	cmp	r0, #0
   14ad4:	popne	{fp, pc}
   14ad8:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14adc:	push	{r4, r5, r6, sl, fp, lr}
   14ae0:	add	fp, sp, #16
   14ae4:	ldr	r5, [r1]
   14ae8:	mov	r4, r1
   14aec:	mov	r6, r0
   14af0:	cmp	r0, #0
   14af4:	beq	14b0c <__assert_fail@plt+0x376c>
   14af8:	mov	r0, #1
   14afc:	add	r0, r0, r5, lsr #1
   14b00:	adds	r5, r5, r0
   14b04:	bcc	14b14 <__assert_fail@plt+0x3774>
   14b08:	b	14b50 <__assert_fail@plt+0x37b0>
   14b0c:	cmp	r5, #0
   14b10:	movweq	r5, #64	; 0x40
   14b14:	mov	r0, r6
   14b18:	mov	r1, r5
   14b1c:	mov	r2, #1
   14b20:	bl	16a48 <__assert_fail@plt+0x56a8>
   14b24:	cmp	r5, #0
   14b28:	mov	r1, r5
   14b2c:	movwne	r1, #1
   14b30:	cmp	r0, #0
   14b34:	bne	14b48 <__assert_fail@plt+0x37a8>
   14b38:	clz	r2, r6
   14b3c:	lsr	r2, r2, #5
   14b40:	orrs	r1, r2, r1
   14b44:	bne	14b50 <__assert_fail@plt+0x37b0>
   14b48:	str	r5, [r4]
   14b4c:	pop	{r4, r5, r6, sl, fp, pc}
   14b50:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14b54:	push	{r4, r5, r6, r7, fp, lr}
   14b58:	add	fp, sp, #16
   14b5c:	ldr	r5, [r1]
   14b60:	mov	r6, r2
   14b64:	mov	r4, r1
   14b68:	mov	r7, r0
   14b6c:	cmp	r0, #0
   14b70:	beq	14b88 <__assert_fail@plt+0x37e8>
   14b74:	mov	r0, #1
   14b78:	add	r0, r0, r5, lsr #1
   14b7c:	adds	r5, r5, r0
   14b80:	bcc	14ba0 <__assert_fail@plt+0x3800>
   14b84:	b	14bd4 <__assert_fail@plt+0x3834>
   14b88:	cmp	r5, #0
   14b8c:	bne	14ba0 <__assert_fail@plt+0x3800>
   14b90:	mov	r0, #64	; 0x40
   14b94:	cmp	r6, #64	; 0x40
   14b98:	udiv	r5, r0, r6
   14b9c:	addhi	r5, r5, #1
   14ba0:	mov	r0, r7
   14ba4:	mov	r1, r5
   14ba8:	mov	r2, r6
   14bac:	bl	16a48 <__assert_fail@plt+0x56a8>
   14bb0:	cmp	r0, #0
   14bb4:	bne	14bcc <__assert_fail@plt+0x382c>
   14bb8:	cmp	r7, #0
   14bbc:	beq	14bd4 <__assert_fail@plt+0x3834>
   14bc0:	cmp	r6, #0
   14bc4:	cmpne	r5, #0
   14bc8:	bne	14bd4 <__assert_fail@plt+0x3834>
   14bcc:	str	r5, [r4]
   14bd0:	pop	{r4, r5, r6, r7, fp, pc}
   14bd4:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14bd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bdc:	add	fp, sp, #24
   14be0:	mov	r8, r1
   14be4:	ldr	r1, [r1]
   14be8:	mov	r5, r0
   14bec:	add	r0, r1, r1, asr #1
   14bf0:	cmp	r0, r1
   14bf4:	mvnvs	r0, #-2147483648	; 0x80000000
   14bf8:	cmp	r0, r3
   14bfc:	mov	r7, r0
   14c00:	movgt	r7, r3
   14c04:	cmn	r3, #1
   14c08:	movle	r7, r0
   14c0c:	ldr	r0, [fp, #8]
   14c10:	cmn	r0, #1
   14c14:	ble	14c3c <__assert_fail@plt+0x389c>
   14c18:	cmp	r0, #0
   14c1c:	beq	14c90 <__assert_fail@plt+0x38f0>
   14c20:	cmn	r7, #1
   14c24:	ble	14c64 <__assert_fail@plt+0x38c4>
   14c28:	mvn	r4, #-2147483648	; 0x80000000
   14c2c:	udiv	r6, r4, r0
   14c30:	cmp	r6, r7
   14c34:	bge	14c90 <__assert_fail@plt+0x38f0>
   14c38:	b	14ca0 <__assert_fail@plt+0x3900>
   14c3c:	cmn	r7, #1
   14c40:	ble	14c80 <__assert_fail@plt+0x38e0>
   14c44:	cmn	r0, #1
   14c48:	beq	14c90 <__assert_fail@plt+0x38f0>
   14c4c:	mov	r6, #-2147483648	; 0x80000000
   14c50:	mvn	r4, #-2147483648	; 0x80000000
   14c54:	sdiv	r6, r6, r0
   14c58:	cmp	r6, r7
   14c5c:	bge	14c90 <__assert_fail@plt+0x38f0>
   14c60:	b	14ca0 <__assert_fail@plt+0x3900>
   14c64:	beq	14c90 <__assert_fail@plt+0x38f0>
   14c68:	mov	r6, #-2147483648	; 0x80000000
   14c6c:	mvn	r4, #-2147483648	; 0x80000000
   14c70:	sdiv	r6, r6, r7
   14c74:	cmp	r6, r0
   14c78:	bge	14c90 <__assert_fail@plt+0x38f0>
   14c7c:	b	14ca0 <__assert_fail@plt+0x3900>
   14c80:	mvn	r4, #-2147483648	; 0x80000000
   14c84:	sdiv	r6, r4, r0
   14c88:	cmp	r7, r6
   14c8c:	blt	14ca0 <__assert_fail@plt+0x3900>
   14c90:	mul	r6, r7, r0
   14c94:	mov	r4, #64	; 0x40
   14c98:	cmp	r6, #63	; 0x3f
   14c9c:	bgt	14ca8 <__assert_fail@plt+0x3908>
   14ca0:	sdiv	r7, r4, r0
   14ca4:	mul	r6, r7, r0
   14ca8:	cmp	r5, #0
   14cac:	moveq	r4, #0
   14cb0:	streq	r4, [r8]
   14cb4:	sub	r4, r7, r1
   14cb8:	cmp	r4, r2
   14cbc:	bge	14d68 <__assert_fail@plt+0x39c8>
   14cc0:	add	r7, r1, r2
   14cc4:	mov	r6, #0
   14cc8:	mov	r2, #0
   14ccc:	cmp	r7, r3
   14cd0:	movwgt	r6, #1
   14cd4:	cmn	r3, #1
   14cd8:	movwgt	r2, #1
   14cdc:	cmp	r7, r1
   14ce0:	bvs	14d9c <__assert_fail@plt+0x39fc>
   14ce4:	ands	r1, r2, r6
   14ce8:	bne	14d9c <__assert_fail@plt+0x39fc>
   14cec:	cmn	r0, #1
   14cf0:	ble	14d18 <__assert_fail@plt+0x3978>
   14cf4:	cmp	r0, #0
   14cf8:	beq	14d64 <__assert_fail@plt+0x39c4>
   14cfc:	cmn	r7, #1
   14d00:	ble	14d3c <__assert_fail@plt+0x399c>
   14d04:	mvn	r1, #-2147483648	; 0x80000000
   14d08:	udiv	r1, r1, r0
   14d0c:	cmp	r1, r7
   14d10:	bge	14d64 <__assert_fail@plt+0x39c4>
   14d14:	b	14d9c <__assert_fail@plt+0x39fc>
   14d18:	cmn	r7, #1
   14d1c:	ble	14d54 <__assert_fail@plt+0x39b4>
   14d20:	cmn	r0, #1
   14d24:	beq	14d64 <__assert_fail@plt+0x39c4>
   14d28:	mov	r1, #-2147483648	; 0x80000000
   14d2c:	sdiv	r1, r1, r0
   14d30:	cmp	r1, r7
   14d34:	bge	14d64 <__assert_fail@plt+0x39c4>
   14d38:	b	14d9c <__assert_fail@plt+0x39fc>
   14d3c:	beq	14d64 <__assert_fail@plt+0x39c4>
   14d40:	mov	r1, #-2147483648	; 0x80000000
   14d44:	sdiv	r1, r1, r7
   14d48:	cmp	r1, r0
   14d4c:	bge	14d64 <__assert_fail@plt+0x39c4>
   14d50:	b	14d9c <__assert_fail@plt+0x39fc>
   14d54:	mvn	r1, #-2147483648	; 0x80000000
   14d58:	sdiv	r1, r1, r0
   14d5c:	cmp	r7, r1
   14d60:	blt	14d9c <__assert_fail@plt+0x39fc>
   14d64:	mul	r6, r7, r0
   14d68:	mov	r0, r5
   14d6c:	mov	r1, r6
   14d70:	bl	164ac <__assert_fail@plt+0x510c>
   14d74:	cmp	r6, #0
   14d78:	movwne	r6, #1
   14d7c:	cmp	r0, #0
   14d80:	bne	14d94 <__assert_fail@plt+0x39f4>
   14d84:	clz	r1, r5
   14d88:	lsr	r1, r1, #5
   14d8c:	orrs	r1, r1, r6
   14d90:	bne	14d9c <__assert_fail@plt+0x39fc>
   14d94:	str	r7, [r8]
   14d98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d9c:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14da0:	push	{fp, lr}
   14da4:	mov	fp, sp
   14da8:	mov	r1, #1
   14dac:	bl	16428 <__assert_fail@plt+0x5088>
   14db0:	cmp	r0, #0
   14db4:	popne	{fp, pc}
   14db8:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14dbc:	push	{fp, lr}
   14dc0:	mov	fp, sp
   14dc4:	bl	16428 <__assert_fail@plt+0x5088>
   14dc8:	cmp	r0, #0
   14dcc:	popne	{fp, pc}
   14dd0:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14dd4:	push	{fp, lr}
   14dd8:	mov	fp, sp
   14ddc:	mov	r1, #1
   14de0:	bl	16428 <__assert_fail@plt+0x5088>
   14de4:	cmp	r0, #0
   14de8:	popne	{fp, pc}
   14dec:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14df0:	push	{fp, lr}
   14df4:	mov	fp, sp
   14df8:	bl	16428 <__assert_fail@plt+0x5088>
   14dfc:	cmp	r0, #0
   14e00:	popne	{fp, pc}
   14e04:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14e08:	push	{r4, r5, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	mov	r5, r0
   14e14:	mov	r0, r1
   14e18:	mov	r4, r1
   14e1c:	bl	1647c <__assert_fail@plt+0x50dc>
   14e20:	cmp	r0, #0
   14e24:	beq	14e38 <__assert_fail@plt+0x3a98>
   14e28:	mov	r1, r5
   14e2c:	mov	r2, r4
   14e30:	pop	{r4, r5, fp, lr}
   14e34:	b	11130 <memcpy@plt>
   14e38:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14e3c:	push	{r4, r5, fp, lr}
   14e40:	add	fp, sp, #8
   14e44:	mov	r5, r0
   14e48:	mov	r0, r1
   14e4c:	mov	r4, r1
   14e50:	bl	1647c <__assert_fail@plt+0x50dc>
   14e54:	cmp	r0, #0
   14e58:	beq	14e6c <__assert_fail@plt+0x3acc>
   14e5c:	mov	r1, r5
   14e60:	mov	r2, r4
   14e64:	pop	{r4, r5, fp, lr}
   14e68:	b	11130 <memcpy@plt>
   14e6c:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14e70:	push	{r4, r5, fp, lr}
   14e74:	add	fp, sp, #8
   14e78:	mov	r5, r0
   14e7c:	add	r0, r1, #1
   14e80:	mov	r4, r1
   14e84:	bl	1647c <__assert_fail@plt+0x50dc>
   14e88:	cmp	r0, #0
   14e8c:	beq	14ea8 <__assert_fail@plt+0x3b08>
   14e90:	mov	r1, #0
   14e94:	mov	r2, r4
   14e98:	strb	r1, [r0, r4]
   14e9c:	mov	r1, r5
   14ea0:	pop	{r4, r5, fp, lr}
   14ea4:	b	11130 <memcpy@plt>
   14ea8:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14eac:	push	{r4, r5, fp, lr}
   14eb0:	add	fp, sp, #8
   14eb4:	mov	r4, r0
   14eb8:	bl	11280 <strlen@plt>
   14ebc:	add	r5, r0, #1
   14ec0:	mov	r0, r5
   14ec4:	bl	1647c <__assert_fail@plt+0x50dc>
   14ec8:	cmp	r0, #0
   14ecc:	beq	14ee0 <__assert_fail@plt+0x3b40>
   14ed0:	mov	r1, r4
   14ed4:	mov	r2, r5
   14ed8:	pop	{r4, r5, fp, lr}
   14edc:	b	11130 <memcpy@plt>
   14ee0:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14ee4:	push	{fp, lr}
   14ee8:	mov	fp, sp
   14eec:	movw	r0, #33052	; 0x811c
   14ef0:	movw	r1, #30620	; 0x779c
   14ef4:	mov	r2, #5
   14ef8:	movt	r0, #2
   14efc:	movt	r1, #1
   14f00:	ldr	r4, [r0]
   14f04:	mov	r0, #0
   14f08:	bl	11160 <dcgettext@plt>
   14f0c:	movw	r2, #29543	; 0x7367
   14f10:	mov	r3, r0
   14f14:	mov	r0, r4
   14f18:	mov	r1, #0
   14f1c:	movt	r2, #1
   14f20:	bl	111f0 <error@plt>
   14f24:	bl	1137c <abort@plt>
   14f28:	push	{r4, sl, fp, lr}
   14f2c:	add	fp, sp, #8
   14f30:	bl	1681c <__assert_fail@plt+0x547c>
   14f34:	mov	r4, r0
   14f38:	cmn	r0, #1
   14f3c:	bne	14f50 <__assert_fail@plt+0x3bb0>
   14f40:	bl	11298 <__errno_location@plt>
   14f44:	ldr	r0, [r0]
   14f48:	cmp	r0, #12
   14f4c:	beq	14f58 <__assert_fail@plt+0x3bb8>
   14f50:	mov	r0, r4
   14f54:	pop	{r4, sl, fp, pc}
   14f58:	bl	14ee4 <__assert_fail@plt+0x3b44>
   14f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f60:	add	fp, sp, #28
   14f64:	sub	sp, sp, #20
   14f68:	cmp	r2, #37	; 0x25
   14f6c:	bcs	15768 <__assert_fail@plt+0x43c8>
   14f70:	ldr	r9, [fp, #8]
   14f74:	mov	r5, r2
   14f78:	mov	r4, r1
   14f7c:	mov	r7, r0
   14f80:	str	r3, [sp, #12]
   14f84:	bl	11298 <__errno_location@plt>
   14f88:	mov	r8, r0
   14f8c:	mov	r0, #0
   14f90:	str	r0, [r8]
   14f94:	bl	11250 <__ctype_b_loc@plt>
   14f98:	ldr	r1, [r0]
   14f9c:	mov	r2, r7
   14fa0:	ldrb	r0, [r2], #1
   14fa4:	add	r3, r1, r0, lsl #1
   14fa8:	ldrb	r3, [r3, #1]
   14fac:	tst	r3, #32
   14fb0:	bne	14fa0 <__assert_fail@plt+0x3c00>
   14fb4:	cmp	r4, #0
   14fb8:	add	r6, sp, #16
   14fbc:	mov	sl, #4
   14fc0:	movne	r6, r4
   14fc4:	cmp	r0, #45	; 0x2d
   14fc8:	beq	15628 <__assert_fail@plt+0x4288>
   14fcc:	mov	r0, r7
   14fd0:	mov	r1, r6
   14fd4:	mov	r2, r5
   14fd8:	bl	11274 <strtoul@plt>
   14fdc:	ldr	r5, [r6]
   14fe0:	cmp	r5, r7
   14fe4:	beq	15010 <__assert_fail@plt+0x3c70>
   14fe8:	mov	r4, r0
   14fec:	ldr	r0, [r8]
   14ff0:	cmp	r0, #0
   14ff4:	beq	15040 <__assert_fail@plt+0x3ca0>
   14ff8:	cmp	r0, #34	; 0x22
   14ffc:	bne	15628 <__assert_fail@plt+0x4288>
   15000:	mov	sl, #1
   15004:	cmp	r9, #0
   15008:	bne	1504c <__assert_fail@plt+0x3cac>
   1500c:	b	15620 <__assert_fail@plt+0x4280>
   15010:	cmp	r9, #0
   15014:	beq	15628 <__assert_fail@plt+0x4288>
   15018:	ldrb	r1, [r7]
   1501c:	cmp	r1, #0
   15020:	beq	15628 <__assert_fail@plt+0x4288>
   15024:	mov	r0, r9
   15028:	bl	1128c <strchr@plt>
   1502c:	cmp	r0, #0
   15030:	beq	15628 <__assert_fail@plt+0x4288>
   15034:	mov	r4, #1
   15038:	mov	sl, #0
   1503c:	b	1504c <__assert_fail@plt+0x3cac>
   15040:	mov	sl, r0
   15044:	cmp	r9, #0
   15048:	beq	15620 <__assert_fail@plt+0x4280>
   1504c:	ldrb	r7, [r5]
   15050:	cmp	r7, #0
   15054:	beq	15620 <__assert_fail@plt+0x4280>
   15058:	mov	r0, r9
   1505c:	mov	r1, r7
   15060:	bl	1128c <strchr@plt>
   15064:	cmp	r0, #0
   15068:	beq	152e4 <__assert_fail@plt+0x3f44>
   1506c:	sub	r0, r7, #69	; 0x45
   15070:	mov	lr, #1
   15074:	mov	r8, #1024	; 0x400
   15078:	cmp	r0, #47	; 0x2f
   1507c:	bhi	15198 <__assert_fail@plt+0x3df8>
   15080:	add	r1, pc, #0
   15084:	ldr	pc, [r1, r0, lsl #2]
   15088:	andeq	r5, r1, r8, asr #2
   1508c:	muleq	r1, r8, r1
   15090:	andeq	r5, r1, r8, asr #2
   15094:	muleq	r1, r8, r1
   15098:	muleq	r1, r8, r1
   1509c:	muleq	r1, r8, r1
   150a0:	andeq	r5, r1, r8, asr #2
   150a4:	muleq	r1, r8, r1
   150a8:	andeq	r5, r1, r8, asr #2
   150ac:	muleq	r1, r8, r1
   150b0:	muleq	r1, r8, r1
   150b4:	andeq	r5, r1, r8, asr #2
   150b8:	muleq	r1, r8, r1
   150bc:	muleq	r1, r8, r1
   150c0:	muleq	r1, r8, r1
   150c4:	andeq	r5, r1, r8, asr #2
   150c8:	muleq	r1, r8, r1
   150cc:	muleq	r1, r8, r1
   150d0:	muleq	r1, r8, r1
   150d4:	muleq	r1, r8, r1
   150d8:	andeq	r5, r1, r8, asr #2
   150dc:	andeq	r5, r1, r8, asr #2
   150e0:	muleq	r1, r8, r1
   150e4:	muleq	r1, r8, r1
   150e8:	muleq	r1, r8, r1
   150ec:	muleq	r1, r8, r1
   150f0:	muleq	r1, r8, r1
   150f4:	muleq	r1, r8, r1
   150f8:	muleq	r1, r8, r1
   150fc:	muleq	r1, r8, r1
   15100:	muleq	r1, r8, r1
   15104:	muleq	r1, r8, r1
   15108:	muleq	r1, r8, r1
   1510c:	muleq	r1, r8, r1
   15110:	andeq	r5, r1, r8, asr #2
   15114:	muleq	r1, r8, r1
   15118:	muleq	r1, r8, r1
   1511c:	muleq	r1, r8, r1
   15120:	andeq	r5, r1, r8, asr #2
   15124:	muleq	r1, r8, r1
   15128:	andeq	r5, r1, r8, asr #2
   1512c:	muleq	r1, r8, r1
   15130:	muleq	r1, r8, r1
   15134:	muleq	r1, r8, r1
   15138:	muleq	r1, r8, r1
   1513c:	muleq	r1, r8, r1
   15140:	muleq	r1, r8, r1
   15144:	andeq	r5, r1, r8, asr #2
   15148:	mov	r0, r9
   1514c:	mov	r1, #48	; 0x30
   15150:	bl	1128c <strchr@plt>
   15154:	cmp	r0, #0
   15158:	beq	15194 <__assert_fail@plt+0x3df4>
   1515c:	ldrb	r0, [r5, #1]
   15160:	cmp	r0, #66	; 0x42
   15164:	cmpne	r0, #68	; 0x44
   15168:	bne	15178 <__assert_fail@plt+0x3dd8>
   1516c:	mov	lr, #2
   15170:	mov	r8, #1000	; 0x3e8
   15174:	b	15198 <__assert_fail@plt+0x3df8>
   15178:	cmp	r0, #105	; 0x69
   1517c:	bne	15194 <__assert_fail@plt+0x3df4>
   15180:	ldrb	r0, [r5, #2]
   15184:	mov	lr, #1
   15188:	cmp	r0, #66	; 0x42
   1518c:	movweq	lr, #3
   15190:	b	15198 <__assert_fail@plt+0x3df8>
   15194:	mov	lr, #1
   15198:	sub	r1, r7, #66	; 0x42
   1519c:	cmp	r1, #53	; 0x35
   151a0:	bhi	152e4 <__assert_fail@plt+0x3f44>
   151a4:	add	r2, pc, #4
   151a8:	mov	r0, #0
   151ac:	ldr	pc, [r2, r1, lsl #2]
   151b0:	muleq	r1, ip, r4
   151b4:	andeq	r5, r1, r4, ror #5
   151b8:	andeq	r5, r1, r4, ror #5
   151bc:			; <UNDEFINED> instruction: 0x000154b8
   151c0:	andeq	r5, r1, r4, ror #5
   151c4:	andeq	r5, r1, r8, lsl #5
   151c8:	andeq	r5, r1, r4, ror #5
   151cc:	andeq	r5, r1, r4, ror #5
   151d0:	andeq	r5, r1, r4, ror #5
   151d4:	strdeq	r5, [r1], -r0
   151d8:	andeq	r5, r1, r4, ror #5
   151dc:	andeq	r5, r1, r4, lsl r3
   151e0:	andeq	r5, r1, r4, ror #5
   151e4:	andeq	r5, r1, r4, ror #5
   151e8:	andeq	r5, r1, r0, ror r5
   151ec:	andeq	r5, r1, r4, ror #5
   151f0:	andeq	r5, r1, r4, ror #5
   151f4:	andeq	r5, r1, r4, ror #5
   151f8:	andeq	r5, r1, r4, asr r3
   151fc:	andeq	r5, r1, r4, ror #5
   15200:	andeq	r5, r1, r4, ror #5
   15204:	andeq	r5, r1, r4, ror #5
   15208:	andeq	r5, r1, r4, ror #5
   1520c:	andeq	r5, r1, r4, lsr r6
   15210:	andeq	r5, r1, r8, asr #7
   15214:	andeq	r5, r1, r4, ror #5
   15218:	andeq	r5, r1, r4, ror #5
   1521c:	andeq	r5, r1, r4, ror #5
   15220:	andeq	r5, r1, r4, ror #5
   15224:	andeq	r5, r1, r4, ror #5
   15228:	andeq	r5, r1, r4, ror #5
   1522c:	andeq	r5, r1, r4, ror #5
   15230:	andeq	r5, r1, ip, lsr #14
   15234:	andeq	r5, r1, r8, lsl #12
   15238:	andeq	r5, r1, r4, ror #5
   1523c:	andeq	r5, r1, r4, ror #5
   15240:	andeq	r5, r1, r4, ror #5
   15244:	andeq	r5, r1, r8, lsl #5
   15248:	andeq	r5, r1, r4, ror #5
   1524c:	andeq	r5, r1, r4, ror #5
   15250:	andeq	r5, r1, r4, ror #5
   15254:	strdeq	r5, [r1], -r0
   15258:	andeq	r5, r1, r4, ror #5
   1525c:	andeq	r5, r1, r4, lsl r3
   15260:	andeq	r5, r1, r4, ror #5
   15264:	andeq	r5, r1, r4, ror #5
   15268:	andeq	r5, r1, r4, ror #5
   1526c:	andeq	r5, r1, r4, ror #5
   15270:	andeq	r5, r1, r4, ror #5
   15274:	andeq	r5, r1, r4, ror #5
   15278:	andeq	r5, r1, r4, asr r3
   1527c:	andeq	r5, r1, r4, ror #5
   15280:	andeq	r5, r1, r4, ror #5
   15284:	andeq	r5, r1, r0, asr r7
   15288:	mvn	r0, #0
   1528c:	mul	r1, r4, r8
   15290:	mov	r7, #0
   15294:	udiv	r0, r0, r8
   15298:	cmp	r0, r4
   1529c:	mvncc	r1, #0
   152a0:	cmp	r0, r1
   152a4:	mul	r2, r1, r8
   152a8:	mvncc	r2, #0
   152ac:	cmp	r0, r2
   152b0:	mul	r3, r2, r8
   152b4:	mov	r2, #0
   152b8:	mvncc	r3, #0
   152bc:	movwcc	r7, #1
   152c0:	cmp	r0, r1
   152c4:	mov	r1, #0
   152c8:	movwcc	r1, #1
   152cc:	cmp	r0, r4
   152d0:	mov	r4, r3
   152d4:	movwcc	r2, #1
   152d8:	orr	r0, r2, r1
   152dc:	orr	r0, r0, r7
   152e0:	b	15608 <__assert_fail@plt+0x4268>
   152e4:	ldr	r0, [sp, #12]
   152e8:	orr	sl, sl, #2
   152ec:	b	15624 <__assert_fail@plt+0x4284>
   152f0:	mvn	r0, #0
   152f4:	mul	r1, r4, r8
   152f8:	udiv	r0, r0, r8
   152fc:	cmp	r0, r4
   15300:	mov	r0, #0
   15304:	mvncc	r1, #0
   15308:	movwcc	r0, #1
   1530c:	mov	r4, r1
   15310:	b	15608 <__assert_fail@plt+0x4268>
   15314:	mvn	r0, #0
   15318:	mul	r1, r4, r8
   1531c:	mov	r3, #0
   15320:	udiv	r0, r0, r8
   15324:	cmp	r0, r4
   15328:	mvncc	r1, #0
   1532c:	cmp	r0, r1
   15330:	mul	r2, r1, r8
   15334:	mov	r1, #0
   15338:	mvncc	r2, #0
   1533c:	movwcc	r3, #1
   15340:	cmp	r0, r4
   15344:	movwcc	r1, #1
   15348:	mov	r4, r2
   1534c:	orr	r0, r1, r3
   15350:	b	15608 <__assert_fail@plt+0x4268>
   15354:	mvn	r0, #0
   15358:	mul	r1, r4, r8
   1535c:	mov	r7, #0
   15360:	udiv	r0, r0, r8
   15364:	cmp	r0, r4
   15368:	mvncc	r1, #0
   1536c:	cmp	r0, r1
   15370:	mul	r2, r1, r8
   15374:	mvncc	r2, #0
   15378:	cmp	r0, r2
   1537c:	mul	r3, r2, r8
   15380:	mvncc	r3, #0
   15384:	cmp	r0, r3
   15388:	mul	ip, r3, r8
   1538c:	mov	r3, #0
   15390:	mvncc	ip, #0
   15394:	movwcc	r7, #1
   15398:	cmp	r0, r2
   1539c:	mov	r2, #0
   153a0:	movwcc	r2, #1
   153a4:	cmp	r0, r1
   153a8:	mov	r1, #0
   153ac:	movwcc	r1, #1
   153b0:	cmp	r0, r4
   153b4:	movwcc	r3, #1
   153b8:	orr	r0, r3, r1
   153bc:	orr	r0, r0, r2
   153c0:	orr	r0, r0, r7
   153c4:	b	15604 <__assert_fail@plt+0x4264>
   153c8:	mvn	r0, #0
   153cc:	str	lr, [sp, #8]
   153d0:	mul	lr, r4, r8
   153d4:	udiv	r0, r0, r8
   153d8:	cmp	r0, r4
   153dc:	mvncc	lr, #0
   153e0:	cmp	r0, lr
   153e4:	mul	r9, lr, r8
   153e8:	mvncc	r9, #0
   153ec:	cmp	r0, r9
   153f0:	mul	r7, r9, r8
   153f4:	mvncc	r7, #0
   153f8:	cmp	r0, r7
   153fc:	mul	r3, r7, r8
   15400:	mvncc	r3, #0
   15404:	cmp	r0, r3
   15408:	mul	r1, r3, r8
   1540c:	mvncc	r1, #0
   15410:	cmp	r0, r1
   15414:	mul	r2, r1, r8
   15418:	mvncc	r2, #0
   1541c:	cmp	r0, r2
   15420:	mul	ip, r2, r8
   15424:	mov	r8, #0
   15428:	mov	r2, #0
   1542c:	mvncc	ip, #0
   15430:	movwcc	r8, #1
   15434:	cmp	r0, r1
   15438:	mov	r1, #0
   1543c:	movwcc	r1, #1
   15440:	cmp	r0, r3
   15444:	mov	r3, #0
   15448:	movwcc	r3, #1
   1544c:	cmp	r0, r7
   15450:	mov	r7, #0
   15454:	movwcc	r7, #1
   15458:	cmp	r0, r9
   1545c:	mov	r9, #0
   15460:	movwcc	r9, #1
   15464:	cmp	r0, lr
   15468:	mov	lr, #0
   1546c:	movwcc	lr, #1
   15470:	cmp	r0, r4
   15474:	movwcc	r2, #1
   15478:	orr	r0, r2, lr
   1547c:	ldr	lr, [sp, #8]
   15480:	orr	r0, r0, r9
   15484:	orr	r0, r0, r7
   15488:	orr	r0, r0, r3
   1548c:	orr	r0, r0, r1
   15490:	orr	r0, r0, r8
   15494:	and	r0, r0, #1
   15498:	b	15604 <__assert_fail@plt+0x4264>
   1549c:	mov	r1, #0
   154a0:	lsr	r0, r4, #22
   154a4:	cmp	r1, r4, lsr #22
   154a8:	lsl	r4, r4, #10
   154ac:	movwne	r0, #1
   154b0:	mvnne	r4, #0
   154b4:	b	15608 <__assert_fail@plt+0x4268>
   154b8:	mvn	r0, #0
   154bc:	mul	ip, r4, r8
   154c0:	str	lr, [sp, #8]
   154c4:	mov	r9, #0
   154c8:	udiv	r0, r0, r8
   154cc:	cmp	r0, r4
   154d0:	mvncc	ip, #0
   154d4:	cmp	r0, ip
   154d8:	mul	r2, ip, r8
   154dc:	mvncc	r2, #0
   154e0:	cmp	r0, r2
   154e4:	mul	r3, r2, r8
   154e8:	mvncc	r3, #0
   154ec:	cmp	r0, r3
   154f0:	mul	r7, r3, r8
   154f4:	mvncc	r7, #0
   154f8:	cmp	r0, r7
   154fc:	mul	r1, r7, r8
   15500:	mvncc	r1, #0
   15504:	cmp	r0, r1
   15508:	mul	lr, r1, r8
   1550c:	mov	r8, #0
   15510:	mov	r1, #0
   15514:	mvncc	lr, #0
   15518:	movwcc	r8, #1
   1551c:	cmp	r0, r7
   15520:	mov	r7, #0
   15524:	movwcc	r7, #1
   15528:	cmp	r0, r3
   1552c:	mov	r3, #0
   15530:	movwcc	r3, #1
   15534:	cmp	r0, r2
   15538:	mov	r2, #0
   1553c:	movwcc	r2, #1
   15540:	cmp	r0, ip
   15544:	movwcc	r1, #1
   15548:	cmp	r0, r4
   1554c:	mov	r4, lr
   15550:	ldr	lr, [sp, #8]
   15554:	movwcc	r9, #1
   15558:	orr	r0, r9, r1
   1555c:	orr	r0, r0, r2
   15560:	orr	r0, r0, r3
   15564:	orr	r0, r0, r7
   15568:	orr	r0, r0, r8
   1556c:	b	15608 <__assert_fail@plt+0x4268>
   15570:	mvn	r0, #0
   15574:	mul	r1, r4, r8
   15578:	udiv	r0, r0, r8
   1557c:	cmp	r0, r4
   15580:	mvncc	r1, #0
   15584:	cmp	r0, r1
   15588:	mul	r2, r1, r8
   1558c:	mvncc	r2, #0
   15590:	cmp	r0, r2
   15594:	mul	r3, r2, r8
   15598:	mvncc	r3, #0
   1559c:	cmp	r0, r3
   155a0:	mul	r7, r3, r8
   155a4:	mvncc	r7, #0
   155a8:	cmp	r0, r7
   155ac:	mul	ip, r7, r8
   155b0:	mov	r8, lr
   155b4:	mov	lr, #0
   155b8:	mov	r7, #0
   155bc:	mvncc	ip, #0
   155c0:	movwcc	lr, #1
   155c4:	cmp	r0, r3
   155c8:	mov	r3, #0
   155cc:	movwcc	r3, #1
   155d0:	cmp	r0, r2
   155d4:	mov	r2, #0
   155d8:	movwcc	r2, #1
   155dc:	cmp	r0, r1
   155e0:	mov	r1, #0
   155e4:	movwcc	r1, #1
   155e8:	cmp	r0, r4
   155ec:	movwcc	r7, #1
   155f0:	orr	r0, r7, r1
   155f4:	orr	r0, r0, r2
   155f8:	orr	r0, r0, r3
   155fc:	orr	r0, r0, lr
   15600:	mov	lr, r8
   15604:	mov	r4, ip
   15608:	add	r1, r5, lr
   1560c:	orr	sl, r0, sl
   15610:	str	r1, [r6]
   15614:	ldrb	r1, [r5, lr]
   15618:	cmp	r1, #0
   1561c:	orrne	sl, sl, #2
   15620:	ldr	r0, [sp, #12]
   15624:	str	r4, [r0]
   15628:	mov	r0, sl
   1562c:	sub	sp, fp, #28
   15630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15634:	mvn	r0, #0
   15638:	str	lr, [sp, #8]
   1563c:	mul	lr, r4, r8
   15640:	udiv	r0, r0, r8
   15644:	cmp	r0, r4
   15648:	mvncc	lr, #0
   1564c:	cmp	r0, lr
   15650:	mul	r9, lr, r8
   15654:	mvncc	r9, #0
   15658:	cmp	r0, r9
   1565c:	mul	r7, r9, r8
   15660:	mvncc	r7, #0
   15664:	cmp	r0, r7
   15668:	mul	r3, r7, r8
   1566c:	mvncc	r3, #0
   15670:	cmp	r0, r3
   15674:	mul	r1, r3, r8
   15678:	mvncc	r1, #0
   1567c:	cmp	r0, r1
   15680:	mul	r2, r1, r8
   15684:	mvncc	r2, #0
   15688:	cmp	r0, r2
   1568c:	mul	ip, r2, r8
   15690:	mvncc	ip, #0
   15694:	cmp	r0, ip
   15698:	mul	r8, ip, r8
   1569c:	mov	ip, #0
   156a0:	mvncc	r8, #0
   156a4:	str	r8, [sp, #4]
   156a8:	mov	r8, #0
   156ac:	movwcc	r8, #1
   156b0:	cmp	r0, r2
   156b4:	mov	r2, #0
   156b8:	movwcc	r2, #1
   156bc:	cmp	r0, r1
   156c0:	mov	r1, #0
   156c4:	movwcc	r1, #1
   156c8:	cmp	r0, r3
   156cc:	mov	r3, #0
   156d0:	movwcc	r3, #1
   156d4:	cmp	r0, r7
   156d8:	mov	r7, #0
   156dc:	movwcc	r7, #1
   156e0:	cmp	r0, r9
   156e4:	mov	r9, #0
   156e8:	movwcc	r9, #1
   156ec:	cmp	r0, lr
   156f0:	mov	lr, #0
   156f4:	movwcc	lr, #1
   156f8:	cmp	r0, r4
   156fc:	ldr	r4, [sp, #4]
   15700:	movwcc	ip, #1
   15704:	orr	r0, ip, lr
   15708:	ldr	lr, [sp, #8]
   1570c:	orr	r0, r0, r9
   15710:	orr	r0, r0, r7
   15714:	orr	r0, r0, r3
   15718:	orr	r0, r0, r1
   1571c:	orr	r0, r0, r2
   15720:	orr	r0, r0, r8
   15724:	and	r0, r0, #1
   15728:	b	15608 <__assert_fail@plt+0x4268>
   1572c:	movw	r0, #65535	; 0xffff
   15730:	movt	r0, #63	; 0x3f
   15734:	orr	r1, r0, #4194304	; 0x400000
   15738:	mov	r0, #0
   1573c:	cmp	r4, r1
   15740:	lsl	r4, r4, #9
   15744:	movwhi	r0, #1
   15748:	mvnhi	r4, #0
   1574c:	b	15608 <__assert_fail@plt+0x4268>
   15750:	cmp	r4, #0
   15754:	lsl	r1, r4, #1
   15758:	lsr	r0, r4, #31
   1575c:	mvnmi	r1, #0
   15760:	mov	r4, r1
   15764:	b	15608 <__assert_fail@plt+0x4268>
   15768:	movw	r0, #30637	; 0x77ad
   1576c:	movw	r1, #30675	; 0x77d3
   15770:	movw	r3, #30691	; 0x77e3
   15774:	mov	r2, #85	; 0x55
   15778:	movt	r0, #1
   1577c:	movt	r1, #1
   15780:	movt	r3, #1
   15784:	bl	113a0 <__assert_fail@plt>
   15788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1578c:	add	fp, sp, #28
   15790:	sub	sp, sp, #44	; 0x2c
   15794:	cmp	r2, #37	; 0x25
   15798:	bcs	16408 <__assert_fail@plt+0x5068>
   1579c:	ldr	sl, [fp, #8]
   157a0:	mov	r6, r2
   157a4:	mov	r7, r1
   157a8:	mov	r4, r0
   157ac:	str	r3, [sp, #36]	; 0x24
   157b0:	bl	11298 <__errno_location@plt>
   157b4:	mov	r5, r0
   157b8:	mov	r0, #0
   157bc:	str	r0, [r5]
   157c0:	bl	11250 <__ctype_b_loc@plt>
   157c4:	ldr	r1, [r0]
   157c8:	mov	r2, r4
   157cc:	ldrb	r0, [r2], #1
   157d0:	add	r3, r1, r0, lsl #1
   157d4:	ldrb	r3, [r3, #1]
   157d8:	tst	r3, #32
   157dc:	bne	157cc <__assert_fail@plt+0x442c>
   157e0:	cmp	r7, #0
   157e4:	sub	r9, fp, #32
   157e8:	mov	r8, #4
   157ec:	movne	r9, r7
   157f0:	cmp	r0, #45	; 0x2d
   157f4:	beq	163fc <__assert_fail@plt+0x505c>
   157f8:	mov	r0, r4
   157fc:	mov	r1, r9
   15800:	mov	r2, r6
   15804:	mov	r3, #0
   15808:	bl	11148 <__strtoull_internal@plt>
   1580c:	mov	r7, r1
   15810:	ldr	r1, [r9]
   15814:	cmp	r1, r4
   15818:	beq	15844 <__assert_fail@plt+0x44a4>
   1581c:	mov	r6, r0
   15820:	ldr	r0, [r5]
   15824:	cmp	r0, #0
   15828:	beq	15880 <__assert_fail@plt+0x44e0>
   1582c:	cmp	r0, #34	; 0x22
   15830:	bne	163fc <__assert_fail@plt+0x505c>
   15834:	mov	r8, #1
   15838:	cmp	sl, #0
   1583c:	bne	1588c <__assert_fail@plt+0x44ec>
   15840:	b	163f4 <__assert_fail@plt+0x5054>
   15844:	cmp	sl, #0
   15848:	beq	163fc <__assert_fail@plt+0x505c>
   1584c:	mov	r5, r1
   15850:	ldrb	r1, [r4]
   15854:	cmp	r1, #0
   15858:	beq	163fc <__assert_fail@plt+0x505c>
   1585c:	mov	r0, sl
   15860:	bl	1128c <strchr@plt>
   15864:	cmp	r0, #0
   15868:	beq	163fc <__assert_fail@plt+0x505c>
   1586c:	mov	r1, r5
   15870:	mov	r8, #0
   15874:	mov	r6, #1
   15878:	mov	r7, #0
   1587c:	b	1588c <__assert_fail@plt+0x44ec>
   15880:	mov	r8, r0
   15884:	cmp	sl, #0
   15888:	beq	163f4 <__assert_fail@plt+0x5054>
   1588c:	ldrb	r4, [r1]
   15890:	cmp	r4, #0
   15894:	beq	163f4 <__assert_fail@plt+0x5054>
   15898:	str	r1, [sp, #32]
   1589c:	mov	r0, sl
   158a0:	mov	r1, r4
   158a4:	bl	1128c <strchr@plt>
   158a8:	cmp	r0, #0
   158ac:	beq	15b74 <__assert_fail@plt+0x47d4>
   158b0:	sub	r0, r4, #69	; 0x45
   158b4:	mov	r1, #1
   158b8:	mov	r3, #0
   158bc:	mov	r5, #1024	; 0x400
   158c0:	cmp	r0, #47	; 0x2f
   158c4:	str	r1, [sp, #28]
   158c8:	bhi	159cc <__assert_fail@plt+0x462c>
   158cc:	add	r1, pc, #0
   158d0:	ldr	pc, [r1, r0, lsl #2]
   158d4:	muleq	r1, r4, r9
   158d8:	andeq	r5, r1, ip, asr #19
   158dc:	muleq	r1, r4, r9
   158e0:	andeq	r5, r1, ip, asr #19
   158e4:	andeq	r5, r1, ip, asr #19
   158e8:	andeq	r5, r1, ip, asr #19
   158ec:	muleq	r1, r4, r9
   158f0:	andeq	r5, r1, ip, asr #19
   158f4:	muleq	r1, r4, r9
   158f8:	andeq	r5, r1, ip, asr #19
   158fc:	andeq	r5, r1, ip, asr #19
   15900:	muleq	r1, r4, r9
   15904:	andeq	r5, r1, ip, asr #19
   15908:	andeq	r5, r1, ip, asr #19
   1590c:	andeq	r5, r1, ip, asr #19
   15910:	muleq	r1, r4, r9
   15914:	andeq	r5, r1, ip, asr #19
   15918:	andeq	r5, r1, ip, asr #19
   1591c:	andeq	r5, r1, ip, asr #19
   15920:	andeq	r5, r1, ip, asr #19
   15924:	muleq	r1, r4, r9
   15928:	muleq	r1, r4, r9
   1592c:	andeq	r5, r1, ip, asr #19
   15930:	andeq	r5, r1, ip, asr #19
   15934:	andeq	r5, r1, ip, asr #19
   15938:	andeq	r5, r1, ip, asr #19
   1593c:	andeq	r5, r1, ip, asr #19
   15940:	andeq	r5, r1, ip, asr #19
   15944:	andeq	r5, r1, ip, asr #19
   15948:	andeq	r5, r1, ip, asr #19
   1594c:	andeq	r5, r1, ip, asr #19
   15950:	andeq	r5, r1, ip, asr #19
   15954:	andeq	r5, r1, ip, asr #19
   15958:	andeq	r5, r1, ip, asr #19
   1595c:	muleq	r1, r4, r9
   15960:	andeq	r5, r1, ip, asr #19
   15964:	andeq	r5, r1, ip, asr #19
   15968:	andeq	r5, r1, ip, asr #19
   1596c:	muleq	r1, r4, r9
   15970:	andeq	r5, r1, ip, asr #19
   15974:	muleq	r1, r4, r9
   15978:	andeq	r5, r1, ip, asr #19
   1597c:	andeq	r5, r1, ip, asr #19
   15980:	andeq	r5, r1, ip, asr #19
   15984:	andeq	r5, r1, ip, asr #19
   15988:	andeq	r5, r1, ip, asr #19
   1598c:	andeq	r5, r1, ip, asr #19
   15990:	muleq	r1, r4, r9
   15994:	mov	r0, sl
   15998:	mov	r1, #48	; 0x30
   1599c:	bl	1128c <strchr@plt>
   159a0:	cmp	r0, #0
   159a4:	beq	159c8 <__assert_fail@plt+0x4628>
   159a8:	ldr	r1, [sp, #32]
   159ac:	ldrb	r0, [r1, #1]
   159b0:	cmp	r0, #66	; 0x42
   159b4:	cmpne	r0, #68	; 0x44
   159b8:	bne	15b80 <__assert_fail@plt+0x47e0>
   159bc:	mov	r5, #1000	; 0x3e8
   159c0:	mov	r0, #2
   159c4:	str	r0, [sp, #28]
   159c8:	mov	r3, #0
   159cc:	sub	r0, r4, #66	; 0x42
   159d0:	cmp	r0, #53	; 0x35
   159d4:	bhi	15b74 <__assert_fail@plt+0x47d4>
   159d8:	add	r1, pc, #0
   159dc:	ldr	pc, [r1, r0, lsl #2]
   159e0:	strdeq	r5, [r1], -ip
   159e4:	andeq	r5, r1, r4, ror fp
   159e8:	andeq	r5, r1, r4, ror fp
   159ec:	andeq	r5, r1, r4, lsr #30
   159f0:	andeq	r5, r1, r4, ror fp
   159f4:			; <UNDEFINED> instruction: 0x00015ab8
   159f8:	andeq	r5, r1, r4, ror fp
   159fc:	andeq	r5, r1, r4, ror fp
   15a00:	andeq	r5, r1, r4, ror fp
   15a04:	andeq	r5, r1, r4, lsr #23
   15a08:	andeq	r5, r1, r4, ror fp
   15a0c:	andeq	r5, r1, ip, ror #23
   15a10:	andeq	r5, r1, r4, ror fp
   15a14:	andeq	r5, r1, r4, ror fp
   15a18:	andeq	r6, r1, ip, ror r0
   15a1c:	andeq	r5, r1, r4, ror fp
   15a20:	andeq	r5, r1, r4, ror fp
   15a24:	andeq	r5, r1, r4, ror fp
   15a28:	andeq	r5, r1, r8, ror ip
   15a2c:	andeq	r5, r1, r4, ror fp
   15a30:	andeq	r5, r1, r4, ror fp
   15a34:	andeq	r5, r1, r4, ror fp
   15a38:	andeq	r5, r1, r4, ror fp
   15a3c:	andeq	r6, r1, r4, lsr #3
   15a40:	andeq	r5, r1, r0, ror #26
   15a44:	andeq	r5, r1, r4, ror fp
   15a48:	andeq	r5, r1, r4, ror fp
   15a4c:	andeq	r5, r1, r4, ror fp
   15a50:	andeq	r5, r1, r4, ror fp
   15a54:	andeq	r5, r1, r4, ror fp
   15a58:	andeq	r5, r1, r4, ror fp
   15a5c:	andeq	r5, r1, r4, ror fp
   15a60:	andeq	r6, r1, ip, ror r3
   15a64:	ldrdeq	r6, [r1], -r4
   15a68:	andeq	r5, r1, r4, ror fp
   15a6c:	andeq	r5, r1, r4, ror fp
   15a70:	andeq	r5, r1, r4, ror fp
   15a74:			; <UNDEFINED> instruction: 0x00015ab8
   15a78:	andeq	r5, r1, r4, ror fp
   15a7c:	andeq	r5, r1, r4, ror fp
   15a80:	andeq	r5, r1, r4, ror fp
   15a84:	andeq	r5, r1, r4, lsr #23
   15a88:	andeq	r5, r1, r4, ror fp
   15a8c:	andeq	r5, r1, ip, ror #23
   15a90:	andeq	r5, r1, r4, ror fp
   15a94:	andeq	r5, r1, r4, ror fp
   15a98:	andeq	r5, r1, r4, ror fp
   15a9c:	andeq	r5, r1, r4, ror fp
   15aa0:	andeq	r5, r1, r4, ror fp
   15aa4:	andeq	r5, r1, r4, ror fp
   15aa8:	andeq	r5, r1, r8, ror ip
   15aac:	andeq	r5, r1, r4, ror fp
   15ab0:	andeq	r5, r1, r4, ror fp
   15ab4:			; <UNDEFINED> instruction: 0x000163b0
   15ab8:	mvn	r0, #0
   15abc:	mvn	r1, #0
   15ac0:	mov	r2, r5
   15ac4:	mov	sl, r3
   15ac8:	bl	16b90 <__assert_fail@plt+0x57f0>
   15acc:	subs	r3, r0, r6
   15ad0:	umull	r4, r2, r6, r5
   15ad4:	mov	lr, #0
   15ad8:	str	r1, [sp, #20]
   15adc:	sbcs	r3, r1, r7
   15ae0:	movwcc	lr, #1
   15ae4:	mla	ip, r6, sl, r2
   15ae8:	mov	r2, r1
   15aec:	mov	r2, #0
   15af0:	cmp	lr, #0
   15af4:	mla	r7, r7, r5, ip
   15af8:	mvnne	r4, #0
   15afc:	mvnne	r7, #0
   15b00:	subs	r6, r0, r4
   15b04:	sbcs	r6, r1, r7
   15b08:	umull	r3, r6, r4, r5
   15b0c:	movwcc	r2, #1
   15b10:	cmp	r2, #0
   15b14:	mvnne	r3, #0
   15b18:	cmp	r2, #0
   15b1c:	str	r6, [sp, #16]
   15b20:	umull	r6, ip, r3, r5
   15b24:	mla	r1, r3, sl, ip
   15b28:	ldr	ip, [sp, #16]
   15b2c:	str	r1, [sp, #12]
   15b30:	mla	r4, r4, sl, ip
   15b34:	mla	r4, r7, r5, r4
   15b38:	mvnne	r4, #0
   15b3c:	subs	r0, r0, r3
   15b40:	ldr	r0, [sp, #20]
   15b44:	ldr	r7, [sp, #12]
   15b48:	sbcs	r0, r0, r4
   15b4c:	mov	r0, #0
   15b50:	mla	r7, r4, r5, r7
   15b54:	movwcc	r0, #1
   15b58:	cmp	r0, #0
   15b5c:	mov	r1, r0
   15b60:	orr	r0, lr, r2
   15b64:	mvnne	r7, #0
   15b68:	mvnne	r6, #0
   15b6c:	orr	r3, r0, r1
   15b70:	b	163d4 <__assert_fail@plt+0x5034>
   15b74:	ldr	r0, [sp, #36]	; 0x24
   15b78:	orr	r8, r8, #2
   15b7c:	b	163f8 <__assert_fail@plt+0x5058>
   15b80:	cmp	r0, #105	; 0x69
   15b84:	mov	r3, #0
   15b88:	bne	159cc <__assert_fail@plt+0x462c>
   15b8c:	ldrb	r0, [r1, #2]
   15b90:	mov	r1, #1
   15b94:	cmp	r0, #66	; 0x42
   15b98:	movweq	r1, #3
   15b9c:	str	r1, [sp, #28]
   15ba0:	b	159cc <__assert_fail@plt+0x462c>
   15ba4:	mvn	r0, #0
   15ba8:	mvn	r1, #0
   15bac:	mov	r2, r5
   15bb0:	mov	r4, r3
   15bb4:	bl	16b90 <__assert_fail@plt+0x57f0>
   15bb8:	subs	r0, r0, r6
   15bbc:	mov	r2, #0
   15bc0:	sbcs	r0, r1, r7
   15bc4:	umull	r0, r1, r6, r5
   15bc8:	movwcc	r2, #1
   15bcc:	cmp	r2, #0
   15bd0:	mla	r1, r6, r4, r1
   15bd4:	mov	r3, r2
   15bd8:	mvnne	r0, #0
   15bdc:	mla	r7, r7, r5, r1
   15be0:	mvnne	r7, #0
   15be4:	mov	r6, r0
   15be8:	b	163d4 <__assert_fail@plt+0x5034>
   15bec:	mvn	r0, #0
   15bf0:	mvn	r1, #0
   15bf4:	mov	r2, r5
   15bf8:	str	r3, [sp, #24]
   15bfc:	bl	16b90 <__assert_fail@plt+0x57f0>
   15c00:	subs	r3, r0, r6
   15c04:	mov	ip, r0
   15c08:	umull	r4, r0, r6, r5
   15c0c:	mov	sl, #0
   15c10:	sbcs	r3, r1, r7
   15c14:	mov	r3, #0
   15c18:	movwcc	r3, #1
   15c1c:	cmp	r3, #0
   15c20:	str	r0, [sp, #20]
   15c24:	ldr	r0, [sp, #24]
   15c28:	mvnne	r4, #0
   15c2c:	cmp	r3, #0
   15c30:	umull	lr, r2, r4, r5
   15c34:	mla	r2, r4, r0, r2
   15c38:	str	r2, [sp, #16]
   15c3c:	ldr	r2, [sp, #20]
   15c40:	mla	r6, r6, r0, r2
   15c44:	ldr	r0, [sp, #16]
   15c48:	mla	r6, r7, r5, r6
   15c4c:	mvnne	r6, #0
   15c50:	mla	r7, r6, r5, r0
   15c54:	subs	r0, ip, r4
   15c58:	sbcs	r0, r1, r6
   15c5c:	movwcc	sl, #1
   15c60:	cmp	sl, #0
   15c64:	orr	r3, r3, sl
   15c68:	mvnne	lr, #0
   15c6c:	mvnne	r7, #0
   15c70:	mov	r6, lr
   15c74:	b	163d4 <__assert_fail@plt+0x5034>
   15c78:	mvn	r0, #0
   15c7c:	mvn	r1, #0
   15c80:	mov	r2, r5
   15c84:	mov	sl, r3
   15c88:	bl	16b90 <__assert_fail@plt+0x57f0>
   15c8c:	subs	r3, r0, r6
   15c90:	mov	ip, r1
   15c94:	umull	r2, lr, r6, r5
   15c98:	str	r0, [sp, #20]
   15c9c:	sbcs	r3, r1, r7
   15ca0:	mov	r1, #0
   15ca4:	str	ip, [sp, #16]
   15ca8:	movwcc	r1, #1
   15cac:	mla	r6, r6, sl, lr
   15cb0:	mov	lr, #0
   15cb4:	cmp	r1, #0
   15cb8:	mla	r7, r7, r5, r6
   15cbc:	mvnne	r2, #0
   15cc0:	cmp	r1, #0
   15cc4:	umull	r3, r4, r2, r5
   15cc8:	mvnne	r7, #0
   15ccc:	mla	r4, r2, sl, r4
   15cd0:	subs	r2, r0, r2
   15cd4:	sbcs	r2, ip, r7
   15cd8:	mla	r4, r7, r5, r4
   15cdc:	mov	r2, #0
   15ce0:	movwcc	lr, #1
   15ce4:	cmp	lr, #0
   15ce8:	mvnne	r3, #0
   15cec:	mvnne	r4, #0
   15cf0:	subs	r7, r0, r3
   15cf4:	mov	r0, r5
   15cf8:	sbcs	r7, ip, r4
   15cfc:	umull	r5, r7, r3, r5
   15d00:	movwcc	r2, #1
   15d04:	cmp	r2, #0
   15d08:	mla	r3, r3, sl, r7
   15d0c:	mvnne	r5, #0
   15d10:	cmp	r2, #0
   15d14:	mla	r3, r4, r0, r3
   15d18:	umull	r6, ip, r5, r0
   15d1c:	mvnne	r3, #0
   15d20:	mla	ip, r5, sl, ip
   15d24:	mla	r7, r3, r0, ip
   15d28:	ldr	r0, [sp, #20]
   15d2c:	subs	r0, r0, r5
   15d30:	ldr	r0, [sp, #16]
   15d34:	sbcs	r0, r0, r3
   15d38:	mov	r0, #0
   15d3c:	movwcc	r0, #1
   15d40:	cmp	r0, #0
   15d44:	mov	r3, r0
   15d48:	orr	r0, r1, lr
   15d4c:	orr	r0, r0, r2
   15d50:	mvnne	r7, #0
   15d54:	mvnne	r6, #0
   15d58:	orr	r3, r0, r3
   15d5c:	b	163d4 <__assert_fail@plt+0x5034>
   15d60:	mvn	r0, #0
   15d64:	mvn	r1, #0
   15d68:	mov	r2, r5
   15d6c:	mov	r4, r3
   15d70:	str	r3, [sp, #24]
   15d74:	bl	16b90 <__assert_fail@plt+0x57f0>
   15d78:	umull	r3, r2, r6, r5
   15d7c:	mla	r2, r6, r4, r2
   15d80:	subs	r6, r0, r6
   15d84:	sbcs	r6, r1, r7
   15d88:	mov	r6, #0
   15d8c:	mla	ip, r7, r5, r2
   15d90:	ldr	r2, [sp, #24]
   15d94:	movwcc	r6, #1
   15d98:	cmp	r6, #0
   15d9c:	str	r6, [sp, #20]
   15da0:	mov	r6, #0
   15da4:	mvnne	r3, #0
   15da8:	mvnne	ip, #0
   15dac:	subs	r4, r0, r3
   15db0:	umull	r7, lr, r3, r5
   15db4:	sbcs	r4, r1, ip
   15db8:	movwcc	r6, #1
   15dbc:	mla	r3, r3, r2, lr
   15dc0:	cmp	r6, #0
   15dc4:	str	r6, [sp, #16]
   15dc8:	mvnne	r7, #0
   15dcc:	cmp	r6, #0
   15dd0:	umull	sl, r4, r7, r5
   15dd4:	mla	r4, r7, r2, r4
   15dd8:	mla	r2, ip, r5, r3
   15ddc:	mvnne	r2, #0
   15de0:	subs	r3, r0, r7
   15de4:	mov	ip, #0
   15de8:	mla	r6, r2, r5, r4
   15dec:	sbcs	r2, r1, r2
   15df0:	mov	r4, r0
   15df4:	mov	r0, #0
   15df8:	movwcc	r0, #1
   15dfc:	mov	r3, r4
   15e00:	cmp	r0, #0
   15e04:	str	r0, [sp, #12]
   15e08:	mov	r0, r1
   15e0c:	str	r3, [sp, #4]
   15e10:	mvnne	sl, #0
   15e14:	mvnne	r6, #0
   15e18:	str	r0, [sp, #8]
   15e1c:	subs	r2, r4, sl
   15e20:	ldr	r4, [sp, #24]
   15e24:	sbcs	r2, r1, r6
   15e28:	umull	r7, r2, sl, r5
   15e2c:	movwcc	ip, #1
   15e30:	cmp	ip, #0
   15e34:	mvnne	r7, #0
   15e38:	mla	r2, sl, r4, r2
   15e3c:	cmp	ip, #0
   15e40:	mov	sl, #0
   15e44:	umull	r1, lr, r7, r5
   15e48:	mla	r2, r6, r5, r2
   15e4c:	mvnne	r2, #0
   15e50:	subs	r6, r3, r7
   15e54:	mla	lr, r7, r4, lr
   15e58:	mla	lr, r2, r5, lr
   15e5c:	sbcs	r2, r0, r2
   15e60:	mov	r2, #0
   15e64:	movwcc	sl, #1
   15e68:	cmp	sl, #0
   15e6c:	mvnne	r1, #0
   15e70:	mvnne	lr, #0
   15e74:	subs	r6, r3, r1
   15e78:	ldr	r3, [sp, #24]
   15e7c:	sbcs	r6, r0, lr
   15e80:	umull	r0, r7, r1, r5
   15e84:	movwcc	r2, #1
   15e88:	cmp	r2, #0
   15e8c:	mvnne	r0, #0
   15e90:	mla	r1, r1, r3, r7
   15e94:	cmp	r2, #0
   15e98:	umull	r6, r4, r0, r5
   15e9c:	mla	r1, lr, r5, r1
   15ea0:	mvnne	r1, #0
   15ea4:	mla	r4, r0, r3, r4
   15ea8:	ldr	r3, [sp, #4]
   15eac:	mla	r7, r1, r5, r4
   15eb0:	ldr	r5, [sp, #16]
   15eb4:	subs	r0, r3, r0
   15eb8:	ldr	r0, [sp, #8]
   15ebc:	sbcs	r0, r0, r1
   15ec0:	mov	r0, #0
   15ec4:	movwcc	r0, #1
   15ec8:	cmp	r0, #0
   15ecc:	mov	r1, r0
   15ed0:	ldr	r0, [sp, #20]
   15ed4:	mvnne	r7, #0
   15ed8:	mvnne	r6, #0
   15edc:	orr	r0, r0, r5
   15ee0:	ldr	r5, [sp, #12]
   15ee4:	orr	r0, r0, r5
   15ee8:	orr	r0, r0, ip
   15eec:	orr	r0, r0, sl
   15ef0:	orr	r0, r0, r2
   15ef4:	orr	r0, r0, r1
   15ef8:	b	16374 <__assert_fail@plt+0x4fd4>
   15efc:	mov	r1, #0
   15f00:	lsl	r2, r7, #10
   15f04:	lsl	r0, r6, #10
   15f08:	lsr	r3, r7, #22
   15f0c:	cmp	r1, r7, lsr #22
   15f10:	orr	r2, r2, r6, lsr #22
   15f14:	mvnne	r0, #0
   15f18:	movwne	r3, #1
   15f1c:	cmp	r1, r7, lsr #22
   15f20:	b	163a0 <__assert_fail@plt+0x5000>
   15f24:	mvn	r0, #0
   15f28:	mvn	r1, #0
   15f2c:	mov	r2, r5
   15f30:	mov	sl, r3
   15f34:	bl	16b90 <__assert_fail@plt+0x57f0>
   15f38:	subs	r2, r0, r6
   15f3c:	mov	ip, r0
   15f40:	mov	r0, #0
   15f44:	sbcs	r2, r1, r7
   15f48:	umull	r4, r2, r6, r5
   15f4c:	movwcc	r0, #1
   15f50:	cmp	r0, #0
   15f54:	mla	r2, r6, sl, r2
   15f58:	str	r0, [sp, #20]
   15f5c:	mvnne	r4, #0
   15f60:	cmp	r0, #0
   15f64:	mla	r2, r7, r5, r2
   15f68:	mov	r0, #0
   15f6c:	umull	lr, r3, r4, r5
   15f70:	mvnne	r2, #0
   15f74:	mla	r3, r4, sl, r3
   15f78:	mla	r6, r2, r5, r3
   15f7c:	subs	r3, ip, r4
   15f80:	mov	r3, r1
   15f84:	sbcs	r2, r1, r2
   15f88:	str	r3, [sp, #8]
   15f8c:	movwcc	r0, #1
   15f90:	cmp	r0, #0
   15f94:	str	r0, [sp, #16]
   15f98:	mov	r0, ip
   15f9c:	mvnne	lr, #0
   15fa0:	mvnne	r6, #0
   15fa4:	str	r0, [sp, #12]
   15fa8:	subs	r2, ip, lr
   15fac:	umull	r7, r4, lr, r5
   15fb0:	sbcs	r2, r1, r6
   15fb4:	mov	r2, #0
   15fb8:	movwcc	r2, #1
   15fbc:	mla	r4, lr, sl, r4
   15fc0:	cmp	r2, #0
   15fc4:	mla	r6, r6, r5, r4
   15fc8:	mov	r4, #0
   15fcc:	mvnne	r7, #0
   15fd0:	cmp	r2, #0
   15fd4:	umull	r1, ip, r7, r5
   15fd8:	mvnne	r6, #0
   15fdc:	mla	ip, r7, sl, ip
   15fe0:	subs	r7, r0, r7
   15fe4:	sbcs	r7, r3, r6
   15fe8:	mla	lr, r6, r5, ip
   15fec:	mov	ip, #0
   15ff0:	movwcc	ip, #1
   15ff4:	cmp	ip, #0
   15ff8:	mvnne	r1, #0
   15ffc:	mvnne	lr, #0
   16000:	subs	r7, r0, r1
   16004:	sbcs	r7, r3, lr
   16008:	umull	r0, r7, r1, r5
   1600c:	movwcc	r4, #1
   16010:	cmp	r4, #0
   16014:	mla	r1, r1, sl, r7
   16018:	mvnne	r0, #0
   1601c:	cmp	r4, #0
   16020:	mla	r1, lr, r5, r1
   16024:	umull	r6, r3, r0, r5
   16028:	mvnne	r1, #0
   1602c:	mla	r3, r0, sl, r3
   16030:	mla	r7, r1, r5, r3
   16034:	ldr	r3, [sp, #12]
   16038:	subs	r0, r3, r0
   1603c:	ldr	r0, [sp, #8]
   16040:	ldr	r3, [sp, #16]
   16044:	sbcs	r0, r0, r1
   16048:	mov	r0, #0
   1604c:	movwcc	r0, #1
   16050:	cmp	r0, #0
   16054:	mov	r1, r0
   16058:	ldr	r0, [sp, #20]
   1605c:	mvnne	r7, #0
   16060:	mvnne	r6, #0
   16064:	orr	r0, r0, r3
   16068:	orr	r0, r0, r2
   1606c:	orr	r0, r0, ip
   16070:	orr	r0, r0, r4
   16074:	orr	r3, r0, r1
   16078:	b	163d4 <__assert_fail@plt+0x5034>
   1607c:	mvn	r0, #0
   16080:	mvn	r1, #0
   16084:	mov	r2, r5
   16088:	mov	sl, r3
   1608c:	bl	16b90 <__assert_fail@plt+0x57f0>
   16090:	umull	r3, r2, r6, r5
   16094:	mov	lr, r1
   16098:	mov	r1, r0
   1609c:	mla	r2, r6, sl, r2
   160a0:	subs	r6, r0, r6
   160a4:	mov	r0, #0
   160a8:	sbcs	r6, lr, r7
   160ac:	mla	r2, r7, r5, r2
   160b0:	movwcc	r0, #1
   160b4:	cmp	r0, #0
   160b8:	str	r0, [sp, #20]
   160bc:	mov	r0, r1
   160c0:	mvnne	r3, #0
   160c4:	mvnne	r2, #0
   160c8:	str	r0, [sp, #16]
   160cc:	subs	r4, r1, r3
   160d0:	umull	r7, ip, r3, r5
   160d4:	sbcs	r4, lr, r2
   160d8:	mov	r4, #0
   160dc:	movwcc	r4, #1
   160e0:	mla	r3, r3, sl, ip
   160e4:	mov	ip, #0
   160e8:	cmp	r4, #0
   160ec:	mla	r2, r2, r5, r3
   160f0:	mvnne	r7, #0
   160f4:	cmp	r4, #0
   160f8:	umull	r1, r6, r7, r5
   160fc:	mvnne	r2, #0
   16100:	mla	r6, r7, sl, r6
   16104:	mla	r3, r2, r5, r6
   16108:	subs	r6, r0, r7
   1610c:	sbcs	r2, lr, r2
   16110:	mov	r2, #0
   16114:	movwcc	ip, #1
   16118:	cmp	ip, #0
   1611c:	mvnne	r1, #0
   16120:	mvnne	r3, #0
   16124:	subs	r6, r0, r1
   16128:	sbcs	r6, lr, r3
   1612c:	umull	r0, r6, r1, r5
   16130:	movwcc	r2, #1
   16134:	cmp	r2, #0
   16138:	mvnne	r0, #0
   1613c:	cmp	r2, #0
   16140:	str	r6, [sp, #12]
   16144:	umull	r6, r7, r0, r5
   16148:	mla	r7, r0, sl, r7
   1614c:	str	r7, [sp, #8]
   16150:	ldr	r7, [sp, #12]
   16154:	mla	r1, r1, sl, r7
   16158:	mla	r1, r3, r5, r1
   1615c:	ldr	r3, [sp, #8]
   16160:	mvnne	r1, #0
   16164:	mla	r7, r1, r5, r3
   16168:	ldr	r3, [sp, #16]
   1616c:	subs	r0, r3, r0
   16170:	sbcs	r0, lr, r1
   16174:	mov	r0, #0
   16178:	movwcc	r0, #1
   1617c:	cmp	r0, #0
   16180:	mov	r1, r0
   16184:	ldr	r0, [sp, #20]
   16188:	mvnne	r7, #0
   1618c:	mvnne	r6, #0
   16190:	orr	r0, r0, r4
   16194:	orr	r0, r0, ip
   16198:	orr	r0, r0, r2
   1619c:	orr	r3, r0, r1
   161a0:	b	163d4 <__assert_fail@plt+0x5034>
   161a4:	mvn	r0, #0
   161a8:	mvn	r1, #0
   161ac:	mov	r2, r5
   161b0:	mov	sl, r3
   161b4:	bl	16b90 <__assert_fail@plt+0x57f0>
   161b8:	mov	lr, r0
   161bc:	subs	r0, r0, r6
   161c0:	mov	r2, #0
   161c4:	mov	ip, r1
   161c8:	str	sl, [sp, #24]
   161cc:	sbcs	r0, r1, r7
   161d0:	umull	r3, r1, r6, r5
   161d4:	str	lr, [sp, #4]
   161d8:	movwcc	r2, #1
   161dc:	cmp	r2, #0
   161e0:	mla	r6, r6, sl, r1
   161e4:	mov	r1, #0
   161e8:	str	r2, [sp, #20]
   161ec:	mvnne	r3, #0
   161f0:	cmp	r2, #0
   161f4:	mla	r7, r7, r5, r6
   161f8:	mov	r2, #0
   161fc:	umull	r0, r4, r3, r5
   16200:	mvnne	r7, #0
   16204:	mla	r4, r3, sl, r4
   16208:	subs	r3, lr, r3
   1620c:	sbcs	r3, ip, r7
   16210:	mla	r4, r7, r5, r4
   16214:	movwcc	r1, #1
   16218:	cmp	r1, #0
   1621c:	str	r1, [sp, #16]
   16220:	mvnne	r0, #0
   16224:	mvnne	r4, #0
   16228:	subs	r3, lr, r0
   1622c:	sbcs	r3, ip, r4
   16230:	umull	r6, r3, r0, r5
   16234:	movwcc	r2, #1
   16238:	cmp	r2, #0
   1623c:	mla	r0, r0, sl, r3
   16240:	str	r2, [sp, #12]
   16244:	mvnne	r6, #0
   16248:	cmp	r2, #0
   1624c:	mla	r0, r4, r5, r0
   16250:	ldr	r4, [sp, #24]
   16254:	umull	r1, r7, r6, r5
   16258:	mvnne	r0, #0
   1625c:	subs	r3, lr, r6
   16260:	mov	r3, ip
   16264:	str	r3, [sp]
   16268:	mla	r7, r6, sl, r7
   1626c:	mla	r7, r0, r5, r7
   16270:	sbcs	r0, ip, r0
   16274:	mov	r0, #0
   16278:	movwcc	r0, #1
   1627c:	cmp	r0, #0
   16280:	str	r0, [sp, #8]
   16284:	mvnne	r1, #0
   16288:	mvnne	r7, #0
   1628c:	subs	r0, lr, r1
   16290:	sbcs	r0, ip, r7
   16294:	mov	ip, #0
   16298:	umull	r6, r0, r1, r5
   1629c:	movwcc	ip, #1
   162a0:	cmp	ip, #0
   162a4:	mla	r1, r1, r4, r0
   162a8:	mov	r0, lr
   162ac:	mvnne	r6, #0
   162b0:	cmp	ip, #0
   162b4:	mla	r1, r7, r5, r1
   162b8:	umull	r2, sl, r6, r5
   162bc:	mvnne	r1, #0
   162c0:	mla	sl, r6, r4, sl
   162c4:	subs	r6, lr, r6
   162c8:	mov	lr, #0
   162cc:	mla	r7, r1, r5, sl
   162d0:	sbcs	r1, r3, r1
   162d4:	ldr	r1, [sp, #24]
   162d8:	movwcc	lr, #1
   162dc:	cmp	lr, #0
   162e0:	mvnne	r2, #0
   162e4:	mvnne	r7, #0
   162e8:	subs	r6, r0, r2
   162ec:	umull	r0, sl, r2, r5
   162f0:	sbcs	r6, r3, r7
   162f4:	mov	r3, #0
   162f8:	movwcc	r3, #1
   162fc:	mla	r2, r2, r1, sl
   16300:	cmp	r3, #0
   16304:	mla	r2, r7, r5, r2
   16308:	mvnne	r0, #0
   1630c:	cmp	r3, #0
   16310:	umull	r6, r4, r0, r5
   16314:	mvnne	r2, #0
   16318:	mla	r4, r0, r1, r4
   1631c:	ldr	r1, [sp, #4]
   16320:	mla	r7, r2, r5, r4
   16324:	ldr	r5, [sp, #16]
   16328:	subs	r0, r1, r0
   1632c:	ldr	r0, [sp]
   16330:	sbcs	r0, r0, r2
   16334:	mov	r0, #0
   16338:	movwcc	r0, #1
   1633c:	cmp	r0, #0
   16340:	mov	r2, r0
   16344:	ldr	r0, [sp, #20]
   16348:	mvnne	r7, #0
   1634c:	mvnne	r6, #0
   16350:	orr	r0, r0, r5
   16354:	ldr	r5, [sp, #12]
   16358:	orr	r0, r0, r5
   1635c:	ldr	r5, [sp, #8]
   16360:	orr	r0, r0, r5
   16364:	orr	r0, r0, ip
   16368:	orr	r0, r0, lr
   1636c:	orr	r0, r0, r3
   16370:	orr	r0, r0, r2
   16374:	and	r3, r0, #1
   16378:	b	163d4 <__assert_fail@plt+0x5034>
   1637c:	mov	r1, #0
   16380:	lsl	r2, r7, #9
   16384:	lsl	r0, r6, #9
   16388:	lsr	r3, r7, #23
   1638c:	cmp	r1, r7, lsr #23
   16390:	orr	r2, r2, r6, lsr #23
   16394:	mvnne	r0, #0
   16398:	movwne	r3, #1
   1639c:	cmp	r1, r7, lsr #23
   163a0:	mvnne	r2, #0
   163a4:	mov	r6, r0
   163a8:	mov	r7, r2
   163ac:	b	163d4 <__assert_fail@plt+0x5034>
   163b0:	lsl	r1, r7, #1
   163b4:	cmp	r7, #0
   163b8:	lsl	r0, r6, #1
   163bc:	lsr	r3, r7, #31
   163c0:	orr	r1, r1, r6, lsr #31
   163c4:	mvnmi	r0, #0
   163c8:	mvnmi	r1, #0
   163cc:	mov	r6, r0
   163d0:	mov	r7, r1
   163d4:	ldr	r1, [sp, #32]
   163d8:	ldr	r2, [sp, #28]
   163dc:	orr	r8, r3, r8
   163e0:	add	r0, r1, r2
   163e4:	str	r0, [r9]
   163e8:	ldrb	r0, [r1, r2]
   163ec:	cmp	r0, #0
   163f0:	orrne	r8, r8, #2
   163f4:	ldr	r0, [sp, #36]	; 0x24
   163f8:	strd	r6, [r0]
   163fc:	mov	r0, r8
   16400:	sub	sp, fp, #28
   16404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16408:	movw	r0, #30637	; 0x77ad
   1640c:	movw	r1, #30675	; 0x77d3
   16410:	movw	r3, #30772	; 0x7834
   16414:	mov	r2, #85	; 0x55
   16418:	movt	r0, #1
   1641c:	movt	r1, #1
   16420:	movt	r3, #1
   16424:	bl	113a0 <__assert_fail@plt>
   16428:	clz	r2, r1
   1642c:	clz	r3, r0
   16430:	lsr	r2, r2, #5
   16434:	lsr	r3, r3, #5
   16438:	orrs	r2, r3, r2
   1643c:	movwne	r1, #1
   16440:	movwne	r0, #1
   16444:	cmp	r1, #0
   16448:	beq	16478 <__assert_fail@plt+0x50d8>
   1644c:	mvn	r2, #-2147483648	; 0x80000000
   16450:	udiv	r2, r2, r1
   16454:	cmp	r2, r0
   16458:	bcs	16478 <__assert_fail@plt+0x50d8>
   1645c:	push	{fp, lr}
   16460:	mov	fp, sp
   16464:	bl	11298 <__errno_location@plt>
   16468:	mov	r1, #12
   1646c:	str	r1, [r0]
   16470:	mov	r0, #0
   16474:	pop	{fp, pc}
   16478:	b	110b8 <calloc@plt>
   1647c:	cmp	r0, #0
   16480:	movweq	r0, #1
   16484:	cmn	r0, #1
   16488:	ble	16490 <__assert_fail@plt+0x50f0>
   1648c:	b	11214 <malloc@plt>
   16490:	push	{fp, lr}
   16494:	mov	fp, sp
   16498:	bl	11298 <__errno_location@plt>
   1649c:	mov	r1, #12
   164a0:	str	r1, [r0]
   164a4:	mov	r0, #0
   164a8:	pop	{fp, pc}
   164ac:	push	{fp, lr}
   164b0:	mov	fp, sp
   164b4:	cmp	r0, #0
   164b8:	beq	164d4 <__assert_fail@plt+0x5134>
   164bc:	cmp	r1, #0
   164c0:	beq	164e0 <__assert_fail@plt+0x5140>
   164c4:	cmn	r1, #1
   164c8:	ble	164ec <__assert_fail@plt+0x514c>
   164cc:	pop	{fp, lr}
   164d0:	b	1116c <realloc@plt>
   164d4:	mov	r0, r1
   164d8:	pop	{fp, lr}
   164dc:	b	1647c <__assert_fail@plt+0x50dc>
   164e0:	bl	1217c <__assert_fail@plt+0xddc>
   164e4:	mov	r0, #0
   164e8:	pop	{fp, pc}
   164ec:	bl	11298 <__errno_location@plt>
   164f0:	mov	r1, #12
   164f4:	str	r1, [r0]
   164f8:	mov	r0, #0
   164fc:	pop	{fp, pc}
   16500:	push	{r4, r5, r6, sl, fp, lr}
   16504:	add	fp, sp, #16
   16508:	mov	r4, r0
   1650c:	bl	111d8 <__fpending@plt>
   16510:	ldr	r6, [r4]
   16514:	mov	r5, r0
   16518:	mov	r0, r4
   1651c:	bl	16584 <__assert_fail@plt+0x51e4>
   16520:	tst	r6, #32
   16524:	bne	1655c <__assert_fail@plt+0x51bc>
   16528:	cmp	r0, #0
   1652c:	mov	r4, r0
   16530:	mvnne	r4, #0
   16534:	cmp	r5, #0
   16538:	bne	16568 <__assert_fail@plt+0x51c8>
   1653c:	cmp	r0, #0
   16540:	beq	16568 <__assert_fail@plt+0x51c8>
   16544:	bl	11298 <__errno_location@plt>
   16548:	ldr	r0, [r0]
   1654c:	subs	r4, r0, #9
   16550:	mvnne	r4, #0
   16554:	mov	r0, r4
   16558:	pop	{r4, r5, r6, sl, fp, pc}
   1655c:	mvn	r4, #0
   16560:	cmp	r0, #0
   16564:	beq	16570 <__assert_fail@plt+0x51d0>
   16568:	mov	r0, r4
   1656c:	pop	{r4, r5, r6, sl, fp, pc}
   16570:	bl	11298 <__errno_location@plt>
   16574:	mov	r1, #0
   16578:	str	r1, [r0]
   1657c:	mov	r0, r4
   16580:	pop	{r4, r5, r6, sl, fp, pc}
   16584:	push	{r4, r5, r6, sl, fp, lr}
   16588:	add	fp, sp, #16
   1658c:	sub	sp, sp, #8
   16590:	mov	r4, r0
   16594:	bl	112d4 <fileno@plt>
   16598:	cmn	r0, #1
   1659c:	ble	16610 <__assert_fail@plt+0x5270>
   165a0:	mov	r0, r4
   165a4:	bl	1122c <__freading@plt>
   165a8:	cmp	r0, #0
   165ac:	beq	165d8 <__assert_fail@plt+0x5238>
   165b0:	mov	r0, r4
   165b4:	bl	112d4 <fileno@plt>
   165b8:	mov	r1, #1
   165bc:	mov	r2, #0
   165c0:	mov	r3, #0
   165c4:	str	r1, [sp]
   165c8:	bl	111b4 <lseek64@plt>
   165cc:	and	r0, r0, r1
   165d0:	cmn	r0, #1
   165d4:	beq	16610 <__assert_fail@plt+0x5270>
   165d8:	mov	r0, r4
   165dc:	bl	16620 <__assert_fail@plt+0x5280>
   165e0:	cmp	r0, #0
   165e4:	beq	16610 <__assert_fail@plt+0x5270>
   165e8:	bl	11298 <__errno_location@plt>
   165ec:	ldr	r6, [r0]
   165f0:	mov	r5, r0
   165f4:	mov	r0, r4
   165f8:	bl	112ec <fclose@plt>
   165fc:	cmp	r6, #0
   16600:	strne	r6, [r5]
   16604:	mvnne	r0, #0
   16608:	sub	sp, fp, #16
   1660c:	pop	{r4, r5, r6, sl, fp, pc}
   16610:	mov	r0, r4
   16614:	sub	sp, fp, #16
   16618:	pop	{r4, r5, r6, sl, fp, lr}
   1661c:	b	112ec <fclose@plt>
   16620:	push	{r4, sl, fp, lr}
   16624:	add	fp, sp, #8
   16628:	sub	sp, sp, #8
   1662c:	mov	r4, r0
   16630:	cmp	r0, #0
   16634:	beq	1666c <__assert_fail@plt+0x52cc>
   16638:	mov	r0, r4
   1663c:	bl	1122c <__freading@plt>
   16640:	cmp	r0, #0
   16644:	beq	1666c <__assert_fail@plt+0x52cc>
   16648:	ldrb	r0, [r4, #1]
   1664c:	tst	r0, #1
   16650:	beq	1666c <__assert_fail@plt+0x52cc>
   16654:	mov	r0, #1
   16658:	mov	r2, #0
   1665c:	mov	r3, #0
   16660:	str	r0, [sp]
   16664:	mov	r0, r4
   16668:	bl	1667c <__assert_fail@plt+0x52dc>
   1666c:	mov	r0, r4
   16670:	sub	sp, fp, #8
   16674:	pop	{r4, sl, fp, lr}
   16678:	b	1110c <fflush@plt>
   1667c:	push	{r4, r5, r6, r7, fp, lr}
   16680:	add	fp, sp, #16
   16684:	sub	sp, sp, #8
   16688:	mov	r4, r0
   1668c:	ldr	r0, [r0, #4]
   16690:	mov	r5, r3
   16694:	mov	r6, r2
   16698:	ldr	r1, [r4, #8]
   1669c:	cmp	r1, r0
   166a0:	bne	166bc <__assert_fail@plt+0x531c>
   166a4:	ldrd	r0, [r4, #16]
   166a8:	cmp	r1, r0
   166ac:	bne	166bc <__assert_fail@plt+0x531c>
   166b0:	ldr	r0, [r4, #36]	; 0x24
   166b4:	cmp	r0, #0
   166b8:	beq	166d4 <__assert_fail@plt+0x5334>
   166bc:	mov	r0, r4
   166c0:	mov	r2, r6
   166c4:	mov	r3, r5
   166c8:	sub	sp, fp, #16
   166cc:	pop	{r4, r5, r6, r7, fp, lr}
   166d0:	b	112f8 <fseeko64@plt>
   166d4:	ldr	r7, [fp, #8]
   166d8:	mov	r0, r4
   166dc:	bl	112d4 <fileno@plt>
   166e0:	mov	r2, r6
   166e4:	mov	r3, r5
   166e8:	str	r7, [sp]
   166ec:	bl	111b4 <lseek64@plt>
   166f0:	and	r2, r0, r1
   166f4:	cmn	r2, #1
   166f8:	beq	16718 <__assert_fail@plt+0x5378>
   166fc:	strd	r0, [r4, #80]	; 0x50
   16700:	ldr	r0, [r4]
   16704:	bic	r0, r0, #16
   16708:	str	r0, [r4]
   1670c:	mov	r0, #0
   16710:	sub	sp, fp, #16
   16714:	pop	{r4, r5, r6, r7, fp, pc}
   16718:	mvn	r0, #0
   1671c:	sub	sp, fp, #16
   16720:	pop	{r4, r5, r6, r7, fp, pc}
   16724:	push	{r4, r5, r6, sl, fp, lr}
   16728:	add	fp, sp, #16
   1672c:	mov	r5, r0
   16730:	mov	r0, #0
   16734:	mov	r4, r1
   16738:	add	r6, r2, #19
   1673c:	strb	r0, [r2, #20]
   16740:	mov	r0, r5
   16744:	mov	r1, r4
   16748:	mov	r2, #10
   1674c:	mov	r3, #0
   16750:	bl	16b90 <__assert_fail@plt+0x57f0>
   16754:	add	r2, r0, r0, lsl #2
   16758:	sub	r2, r5, r2, lsl #1
   1675c:	orr	r2, r2, #48	; 0x30
   16760:	strb	r2, [r6], #-1
   16764:	rsbs	r2, r5, #9
   16768:	mov	r5, r0
   1676c:	rscs	r2, r4, #0
   16770:	mov	r4, r1
   16774:	bcc	16740 <__assert_fail@plt+0x53a0>
   16778:	add	r0, r6, #1
   1677c:	pop	{r4, r5, r6, sl, fp, pc}
   16780:	push	{fp, lr}
   16784:	mov	fp, sp
   16788:	mov	r0, #14
   1678c:	bl	11334 <nl_langinfo@plt>
   16790:	movw	r1, #28196	; 0x6e24
   16794:	cmp	r0, #0
   16798:	movt	r1, #1
   1679c:	movne	r1, r0
   167a0:	movw	r0, #30851	; 0x7883
   167a4:	ldrb	r2, [r1]
   167a8:	movt	r0, #1
   167ac:	cmp	r2, #0
   167b0:	movne	r0, r1
   167b4:	pop	{fp, pc}
   167b8:	push	{r4, r5, r6, r7, fp, lr}
   167bc:	add	fp, sp, #16
   167c0:	sub	sp, sp, #8
   167c4:	cmp	r0, #0
   167c8:	add	r5, sp, #4
   167cc:	mov	r7, r2
   167d0:	mov	r4, r1
   167d4:	movne	r5, r0
   167d8:	mov	r0, r5
   167dc:	bl	111e4 <mbrtowc@plt>
   167e0:	mov	r6, r0
   167e4:	cmp	r7, #0
   167e8:	beq	16810 <__assert_fail@plt+0x5470>
   167ec:	cmn	r6, #2
   167f0:	bcc	16810 <__assert_fail@plt+0x5470>
   167f4:	mov	r0, #0
   167f8:	bl	16a84 <__assert_fail@plt+0x56e4>
   167fc:	cmp	r0, #0
   16800:	bne	16810 <__assert_fail@plt+0x5470>
   16804:	ldrb	r0, [r4]
   16808:	mov	r6, #1
   1680c:	str	r0, [r5]
   16810:	mov	r0, r6
   16814:	sub	sp, fp, #16
   16818:	pop	{r4, r5, r6, r7, fp, pc}
   1681c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16820:	add	fp, sp, #28
   16824:	sub	sp, sp, #12
   16828:	mov	sl, r2
   1682c:	mov	r6, r1
   16830:	cmp	r0, #0
   16834:	beq	168c8 <__assert_fail@plt+0x5528>
   16838:	mov	r7, r0
   1683c:	mov	r8, #10
   16840:	mov	r0, #0
   16844:	mov	r1, #40	; 0x28
   16848:	str	r8, [sp, #8]
   1684c:	bl	164ac <__assert_fail@plt+0x510c>
   16850:	mvn	r9, #0
   16854:	cmp	r0, #0
   16858:	beq	16a3c <__assert_fail@plt+0x569c>
   1685c:	str	sl, [sp, #4]
   16860:	mov	r5, r0
   16864:	add	sl, sp, #8
   16868:	mov	r0, r7
   1686c:	mov	r1, r6
   16870:	mov	r2, r5
   16874:	mov	r3, sl
   16878:	bl	112b0 <getgrouplist@plt>
   1687c:	mov	r4, r0
   16880:	ldr	r0, [sp, #8]
   16884:	cmn	r4, #1
   16888:	bgt	16898 <__assert_fail@plt+0x54f8>
   1688c:	cmp	r8, r0
   16890:	lsleq	r0, r8, #1
   16894:	streq	r0, [sp, #8]
   16898:	cmp	r0, #536870912	; 0x20000000
   1689c:	bcs	16950 <__assert_fail@plt+0x55b0>
   168a0:	lsl	r1, r0, #2
   168a4:	mov	r0, r5
   168a8:	bl	164ac <__assert_fail@plt+0x510c>
   168ac:	cmp	r0, #0
   168b0:	beq	1695c <__assert_fail@plt+0x55bc>
   168b4:	cmn	r4, #1
   168b8:	bgt	16968 <__assert_fail@plt+0x55c8>
   168bc:	ldr	r8, [sp, #8]
   168c0:	mov	r5, r0
   168c4:	b	16868 <__assert_fail@plt+0x54c8>
   168c8:	mov	r0, #0
   168cc:	mov	r1, #0
   168d0:	bl	1134c <getgroups@plt>
   168d4:	cmn	r0, #1
   168d8:	str	r0, [sp, #8]
   168dc:	ble	16910 <__assert_fail@plt+0x5570>
   168e0:	mov	r4, r0
   168e4:	cmn	r6, #1
   168e8:	bne	16978 <__assert_fail@plt+0x55d8>
   168ec:	cmp	r4, #0
   168f0:	beq	16978 <__assert_fail@plt+0x55d8>
   168f4:	cmp	r4, #536870912	; 0x20000000
   168f8:	bcc	16988 <__assert_fail@plt+0x55e8>
   168fc:	bl	11298 <__errno_location@plt>
   16900:	mov	r1, #12
   16904:	mvn	r9, #0
   16908:	str	r1, [r0]
   1690c:	b	16a3c <__assert_fail@plt+0x569c>
   16910:	bl	11298 <__errno_location@plt>
   16914:	ldr	r0, [r0]
   16918:	mvn	r9, #0
   1691c:	cmp	r0, #38	; 0x26
   16920:	bne	16a3c <__assert_fail@plt+0x569c>
   16924:	mov	r0, #0
   16928:	mov	r1, #4
   1692c:	bl	164ac <__assert_fail@plt+0x510c>
   16930:	cmp	r0, #0
   16934:	beq	16a3c <__assert_fail@plt+0x569c>
   16938:	str	r0, [sl]
   1693c:	str	r6, [r0]
   16940:	mvn	r0, #0
   16944:	subs	r9, r6, r0
   16948:	movwne	r9, #1
   1694c:	b	16a3c <__assert_fail@plt+0x569c>
   16950:	bl	11298 <__errno_location@plt>
   16954:	mov	r1, #12
   16958:	str	r1, [r0]
   1695c:	mov	r0, r5
   16960:	bl	1217c <__assert_fail@plt+0xddc>
   16964:	b	16a3c <__assert_fail@plt+0x569c>
   16968:	ldr	r1, [sp, #4]
   1696c:	str	r0, [r1]
   16970:	ldr	r9, [sp, #8]
   16974:	b	16a3c <__assert_fail@plt+0x569c>
   16978:	add	r4, r4, #1
   1697c:	str	r4, [sp, #8]
   16980:	cmp	r4, #536870912	; 0x20000000
   16984:	bcs	168fc <__assert_fail@plt+0x555c>
   16988:	lsl	r1, r4, #2
   1698c:	mov	r0, #0
   16990:	bl	164ac <__assert_fail@plt+0x510c>
   16994:	cmp	r0, #0
   16998:	beq	16a24 <__assert_fail@plt+0x5684>
   1699c:	mvn	r9, #0
   169a0:	mov	r7, r0
   169a4:	subs	r1, r6, r9
   169a8:	movwne	r1, #1
   169ac:	sub	r0, r4, r1
   169b0:	add	r1, r7, r1, lsl #2
   169b4:	bl	1134c <getgroups@plt>
   169b8:	cmn	r0, #1
   169bc:	ble	16a34 <__assert_fail@plt+0x5694>
   169c0:	cmn	r6, #1
   169c4:	addne	r0, r0, #1
   169c8:	strne	r6, [r7]
   169cc:	str	r7, [sl]
   169d0:	cmp	r0, #2
   169d4:	blt	16a2c <__assert_fail@plt+0x568c>
   169d8:	mov	r2, r7
   169dc:	add	r1, r7, r0, lsl #2
   169e0:	ldr	r6, [r2], #4
   169e4:	cmp	r1, r2
   169e8:	bls	16a2c <__assert_fail@plt+0x568c>
   169ec:	mov	r3, r6
   169f0:	mov	r9, r0
   169f4:	b	16a0c <__assert_fail@plt+0x566c>
   169f8:	str	r0, [r7, #4]!
   169fc:	mov	r3, r0
   16a00:	add	r2, r2, #4
   16a04:	cmp	r2, r1
   16a08:	bcs	16a3c <__assert_fail@plt+0x569c>
   16a0c:	ldr	r0, [r2]
   16a10:	cmp	r0, r6
   16a14:	cmpne	r0, r3
   16a18:	bne	169f8 <__assert_fail@plt+0x5658>
   16a1c:	sub	r9, r9, #1
   16a20:	b	16a00 <__assert_fail@plt+0x5660>
   16a24:	mvn	r9, #0
   16a28:	b	16a3c <__assert_fail@plt+0x569c>
   16a2c:	mov	r9, r0
   16a30:	b	16a3c <__assert_fail@plt+0x569c>
   16a34:	mov	r0, r7
   16a38:	bl	1217c <__assert_fail@plt+0xddc>
   16a3c:	mov	r0, r9
   16a40:	sub	sp, fp, #28
   16a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a48:	cmp	r2, #0
   16a4c:	beq	16a7c <__assert_fail@plt+0x56dc>
   16a50:	mvn	r3, #0
   16a54:	udiv	r3, r3, r2
   16a58:	cmp	r3, r1
   16a5c:	bcs	16a7c <__assert_fail@plt+0x56dc>
   16a60:	push	{fp, lr}
   16a64:	mov	fp, sp
   16a68:	bl	11298 <__errno_location@plt>
   16a6c:	mov	r1, #12
   16a70:	str	r1, [r0]
   16a74:	mov	r0, #0
   16a78:	pop	{fp, pc}
   16a7c:	mul	r1, r2, r1
   16a80:	b	164ac <__assert_fail@plt+0x510c>
   16a84:	push	{r4, sl, fp, lr}
   16a88:	add	fp, sp, #8
   16a8c:	sub	sp, sp, #264	; 0x108
   16a90:	add	r1, sp, #7
   16a94:	movw	r2, #257	; 0x101
   16a98:	bl	16af0 <__assert_fail@plt+0x5750>
   16a9c:	mov	r4, #0
   16aa0:	cmp	r0, #0
   16aa4:	bne	16ae4 <__assert_fail@plt+0x5744>
   16aa8:	movw	r1, #30857	; 0x7889
   16aac:	add	r0, sp, #7
   16ab0:	mov	r2, #2
   16ab4:	movt	r1, #1
   16ab8:	bl	11268 <bcmp@plt>
   16abc:	cmp	r0, #0
   16ac0:	beq	16ae4 <__assert_fail@plt+0x5744>
   16ac4:	movw	r1, #30859	; 0x788b
   16ac8:	add	r0, sp, #7
   16acc:	mov	r2, #6
   16ad0:	movt	r1, #1
   16ad4:	bl	11268 <bcmp@plt>
   16ad8:	cmp	r0, #0
   16adc:	mov	r4, r0
   16ae0:	movwne	r4, #1
   16ae4:	mov	r0, r4
   16ae8:	sub	sp, fp, #8
   16aec:	pop	{r4, sl, fp, pc}
   16af0:	push	{r4, r5, r6, r7, fp, lr}
   16af4:	add	fp, sp, #16
   16af8:	mov	r4, r1
   16afc:	mov	r1, #0
   16b00:	mov	r6, r2
   16b04:	bl	11310 <setlocale@plt>
   16b08:	cmp	r0, #0
   16b0c:	beq	16b3c <__assert_fail@plt+0x579c>
   16b10:	mov	r7, r0
   16b14:	bl	11280 <strlen@plt>
   16b18:	cmp	r0, r6
   16b1c:	bcs	16b58 <__assert_fail@plt+0x57b8>
   16b20:	add	r2, r0, #1
   16b24:	mov	r0, r4
   16b28:	mov	r1, r7
   16b2c:	bl	11130 <memcpy@plt>
   16b30:	mov	r5, #0
   16b34:	mov	r0, r5
   16b38:	pop	{r4, r5, r6, r7, fp, pc}
   16b3c:	mov	r5, #22
   16b40:	cmp	r6, #0
   16b44:	beq	16b80 <__assert_fail@plt+0x57e0>
   16b48:	mov	r0, #0
   16b4c:	strb	r0, [r4]
   16b50:	mov	r0, r5
   16b54:	pop	{r4, r5, r6, r7, fp, pc}
   16b58:	mov	r5, #34	; 0x22
   16b5c:	cmp	r6, #0
   16b60:	beq	16b80 <__assert_fail@plt+0x57e0>
   16b64:	sub	r6, r6, #1
   16b68:	mov	r0, r4
   16b6c:	mov	r1, r7
   16b70:	mov	r2, r6
   16b74:	bl	11130 <memcpy@plt>
   16b78:	mov	r0, #0
   16b7c:	strb	r0, [r4, r6]
   16b80:	mov	r0, r5
   16b84:	pop	{r4, r5, r6, r7, fp, pc}
   16b88:	mov	r1, #0
   16b8c:	b	11310 <setlocale@plt>
   16b90:	cmp	r3, #0
   16b94:	cmpeq	r2, #0
   16b98:	bne	16bb0 <__assert_fail@plt+0x5810>
   16b9c:	cmp	r1, #0
   16ba0:	cmpeq	r0, #0
   16ba4:	mvnne	r1, #0
   16ba8:	mvnne	r0, #0
   16bac:	b	16bcc <__assert_fail@plt+0x582c>
   16bb0:	sub	sp, sp, #8
   16bb4:	push	{sp, lr}
   16bb8:	bl	16bdc <__assert_fail@plt+0x583c>
   16bbc:	ldr	lr, [sp, #4]
   16bc0:	add	sp, sp, #8
   16bc4:	pop	{r2, r3}
   16bc8:	bx	lr
   16bcc:	push	{r1, lr}
   16bd0:	mov	r0, #8
   16bd4:	bl	110dc <raise@plt>
   16bd8:	pop	{r1, pc}
   16bdc:	cmp	r1, r3
   16be0:	cmpeq	r0, r2
   16be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16be8:	mov	r4, r0
   16bec:	movcc	r0, #0
   16bf0:	mov	r5, r1
   16bf4:	ldr	lr, [sp, #36]	; 0x24
   16bf8:	movcc	r1, r0
   16bfc:	bcc	16cf8 <__assert_fail@plt+0x5958>
   16c00:	cmp	r3, #0
   16c04:	clzeq	ip, r2
   16c08:	clzne	ip, r3
   16c0c:	addeq	ip, ip, #32
   16c10:	cmp	r5, #0
   16c14:	clzeq	r1, r4
   16c18:	addeq	r1, r1, #32
   16c1c:	clzne	r1, r5
   16c20:	sub	ip, ip, r1
   16c24:	sub	sl, ip, #32
   16c28:	lsl	r9, r3, ip
   16c2c:	rsb	fp, ip, #32
   16c30:	orr	r9, r9, r2, lsl sl
   16c34:	orr	r9, r9, r2, lsr fp
   16c38:	lsl	r8, r2, ip
   16c3c:	cmp	r5, r9
   16c40:	cmpeq	r4, r8
   16c44:	movcc	r0, #0
   16c48:	movcc	r1, r0
   16c4c:	bcc	16c68 <__assert_fail@plt+0x58c8>
   16c50:	mov	r0, #1
   16c54:	subs	r4, r4, r8
   16c58:	lsl	r1, r0, sl
   16c5c:	orr	r1, r1, r0, lsr fp
   16c60:	lsl	r0, r0, ip
   16c64:	sbc	r5, r5, r9
   16c68:	cmp	ip, #0
   16c6c:	beq	16cf8 <__assert_fail@plt+0x5958>
   16c70:	lsr	r6, r8, #1
   16c74:	orr	r6, r6, r9, lsl #31
   16c78:	lsr	r7, r9, #1
   16c7c:	mov	r2, ip
   16c80:	b	16ca4 <__assert_fail@plt+0x5904>
   16c84:	subs	r3, r4, r6
   16c88:	sbc	r8, r5, r7
   16c8c:	adds	r3, r3, r3
   16c90:	adc	r8, r8, r8
   16c94:	adds	r4, r3, #1
   16c98:	adc	r5, r8, #0
   16c9c:	subs	r2, r2, #1
   16ca0:	beq	16cc0 <__assert_fail@plt+0x5920>
   16ca4:	cmp	r5, r7
   16ca8:	cmpeq	r4, r6
   16cac:	bcs	16c84 <__assert_fail@plt+0x58e4>
   16cb0:	adds	r4, r4, r4
   16cb4:	adc	r5, r5, r5
   16cb8:	subs	r2, r2, #1
   16cbc:	bne	16ca4 <__assert_fail@plt+0x5904>
   16cc0:	lsr	r3, r4, ip
   16cc4:	orr	r3, r3, r5, lsl fp
   16cc8:	lsr	r2, r5, ip
   16ccc:	orr	r3, r3, r5, lsr sl
   16cd0:	adds	r0, r0, r4
   16cd4:	mov	r4, r3
   16cd8:	lsl	r3, r2, ip
   16cdc:	orr	r3, r3, r4, lsl sl
   16ce0:	lsl	ip, r4, ip
   16ce4:	orr	r3, r3, r4, lsr fp
   16ce8:	adc	r1, r1, r5
   16cec:	subs	r0, r0, ip
   16cf0:	mov	r5, r2
   16cf4:	sbc	r1, r1, r3
   16cf8:	cmp	lr, #0
   16cfc:	strdne	r4, [lr]
   16d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d08:	mov	r7, r0
   16d0c:	ldr	r6, [pc, #72]	; 16d5c <__assert_fail@plt+0x59bc>
   16d10:	ldr	r5, [pc, #72]	; 16d60 <__assert_fail@plt+0x59c0>
   16d14:	add	r6, pc, r6
   16d18:	add	r5, pc, r5
   16d1c:	sub	r6, r6, r5
   16d20:	mov	r8, r1
   16d24:	mov	r9, r2
   16d28:	bl	11098 <calloc@plt-0x20>
   16d2c:	asrs	r6, r6, #2
   16d30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d34:	mov	r4, #0
   16d38:	add	r4, r4, #1
   16d3c:	ldr	r3, [r5], #4
   16d40:	mov	r2, r9
   16d44:	mov	r1, r8
   16d48:	mov	r0, r7
   16d4c:	blx	r3
   16d50:	cmp	r6, r4
   16d54:	bne	16d38 <__assert_fail@plt+0x5998>
   16d58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d5c:	strdeq	r1, [r1], -r0
   16d60:	andeq	r1, r1, r8, ror #3
   16d64:	bx	lr
   16d68:	ldr	r3, [pc, #12]	; 16d7c <__assert_fail@plt+0x59dc>
   16d6c:	mov	r1, #0
   16d70:	add	r3, pc, r3
   16d74:	ldr	r2, [r3]
   16d78:	b	112a4 <__cxa_atexit@plt>
   16d7c:	muleq	r1, ip, r3

Disassembly of section .fini:

00016d80 <.fini>:
   16d80:	push	{r3, lr}
   16d84:	pop	{r3, pc}
