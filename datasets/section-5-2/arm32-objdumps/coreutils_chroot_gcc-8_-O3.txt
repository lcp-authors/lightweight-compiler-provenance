
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	118d0 <__assert_fail@plt+0x728>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <calloc@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <calloc@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	r9, r1, r0, asr r1

00010eb4 <calloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <endgrent@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <getpwnam@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <getpwuid@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <execvp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <__strtoull_internal@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <mbsinit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <fputc_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <dcgettext@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <chdir@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <iswprint@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <setgroups@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <fwrite@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <chroot@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <__fpending@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <getenv@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <setgid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <malloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <__libc_start_main@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <__freading@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__ctype_b_loc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <strtoul@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #32]!

00011088 <strlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #24]!

00011094 <strchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <getgrouplist@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <memset@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #24, 20	; 0x18000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__printf_chk@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #24, 20	; 0x18000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <fileno@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #24, 20	; 0x18000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <__fprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #24, 20	; 0x18000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <fclose@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #24, 20	; 0x18000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <fseeko64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #24, 20	; 0x18000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strtok@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #24, 20	; 0x18000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <setlocale@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #24, 20	; 0x18000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <endpwent@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #24, 20	; 0x18000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #24, 20	; 0x18000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #24, 20	; 0x18000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #24, 20	; 0x18000
   11150:	ldr	pc, [ip, #3992]!	; 0xf98

00011154 <getgroups@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #24, 20	; 0x18000
   1115c:	ldr	pc, [ip, #3984]!	; 0xf90

00011160 <canonicalize_file_name@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3976]!	; 0xf88

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3968]!	; 0xf80

00011178 <strncmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3960]!	; 0xf78

00011184 <abort@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3952]!	; 0xf70

00011190 <getgrgid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #24, 20	; 0x18000
   11198:	ldr	pc, [ip, #3944]!	; 0xf68

0001119c <getgrnam@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #24, 20	; 0x18000
   111a4:	ldr	pc, [ip, #3936]!	; 0xf60

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #24, 20	; 0x18000
   111b0:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b4 <.text>:
   111b4:	mov	r3, #0
   111b8:	mvn	r2, #0
   111bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111c0:	strd	r6, [sp, #8]
   111c4:	mov	r5, r3
   111c8:	mov	r7, r1
   111cc:	strd	r8, [sp, #16]
   111d0:	mov	r8, r0
   111d4:	movw	r6, #36452	; 0x8e64
   111d8:	movt	r6, #1
   111dc:	strd	sl, [sp, #24]
   111e0:	mov	fp, r3
   111e4:	str	lr, [sp, #32]
   111e8:	sub	sp, sp, #44	; 0x2c
   111ec:	movw	r9, #41336	; 0xa178
   111f0:	movt	r9, #2
   111f4:	ldr	r0, [r1]
   111f8:	str	r3, [sp, #12]
   111fc:	str	r2, [sp, #20]
   11200:	strd	r2, [sp, #24]
   11204:	str	r3, [sp, #32]
   11208:	bl	120fc <__assert_fail@plt+0xf54>
   1120c:	movw	r1, #36164	; 0x8d44
   11210:	movt	r1, #1
   11214:	ldr	sl, [pc, #1652]	; 11890 <__assert_fail@plt+0x6e8>
   11218:	mov	r0, #6
   1121c:	bl	11118 <setlocale@plt>
   11220:	movw	r1, #36412	; 0x8e3c
   11224:	movt	r1, #1
   11228:	movw	r0, #36236	; 0x8d8c
   1122c:	movt	r0, #1
   11230:	bl	1116c <bindtextdomain@plt>
   11234:	movw	r0, #36236	; 0x8d8c
   11238:	movt	r0, #1
   1123c:	bl	10f8c <textdomain@plt>
   11240:	movw	r3, #41244	; 0xa11c
   11244:	movt	r3, #2
   11248:	mov	r2, #125	; 0x7d
   1124c:	movw	r0, #8112	; 0x1fb0
   11250:	movt	r0, #1
   11254:	str	r2, [r3]
   11258:	bl	18a28 <__assert_fail@plt+0x7880>
   1125c:	mov	r4, #0
   11260:	mov	r3, sl
   11264:	mov	r2, r6
   11268:	mov	r1, r7
   1126c:	mov	r0, r8
   11270:	str	r4, [sp]
   11274:	bl	11058 <getopt_long@plt>
   11278:	cmn	r0, #1
   1127c:	beq	11338 <__assert_fail@plt+0x190>
   11280:	cmp	r0, #256	; 0x100
   11284:	beq	1132c <__assert_fail@plt+0x184>
   11288:	ble	112c0 <__assert_fail@plt+0x118>
   1128c:	movw	r3, #257	; 0x101
   11290:	cmp	r0, r3
   11294:	bne	11308 <__assert_fail@plt+0x160>
   11298:	ldr	fp, [r9]
   1129c:	mov	r0, fp
   112a0:	bl	11088 <strlen@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	1125c <__assert_fail@plt+0xb4>
   112ac:	sub	r0, r0, #1
   112b0:	ldrb	r3, [fp, r0]
   112b4:	cmp	r3, #58	; 0x3a
   112b8:	strbeq	r4, [fp, r0]
   112bc:	b	1125c <__assert_fail@plt+0xb4>
   112c0:	cmn	r0, #3
   112c4:	bne	1131c <__assert_fail@plt+0x174>
   112c8:	movw	r2, #36436	; 0x8e54
   112cc:	movt	r2, #1
   112d0:	movw	r3, #41240	; 0xa118
   112d4:	movt	r3, #2
   112d8:	movw	r0, #41332	; 0xa174
   112dc:	movt	r0, #2
   112e0:	stm	sp, {r2, r4}
   112e4:	movw	r1, #35604	; 0x8b14
   112e8:	movt	r1, #1
   112ec:	ldr	r0, [r0]
   112f0:	movw	r2, #36232	; 0x8d88
   112f4:	movt	r2, #1
   112f8:	ldr	r3, [r3]
   112fc:	bl	16530 <__assert_fail@plt+0x5388>
   11300:	mov	r0, r4
   11304:	bl	11070 <exit@plt>
   11308:	movw	r3, #258	; 0x102
   1130c:	cmp	r0, r3
   11310:	bne	11824 <__assert_fail@plt+0x67c>
   11314:	mov	r5, #1
   11318:	b	1125c <__assert_fail@plt+0xb4>
   1131c:	cmn	r0, #2
   11320:	bne	11824 <__assert_fail@plt+0x67c>
   11324:	mov	r0, r4
   11328:	bl	11be8 <__assert_fail@plt+0xa40>
   1132c:	ldr	r3, [r9]
   11330:	str	r3, [sp, #12]
   11334:	b	1125c <__assert_fail@plt+0xb4>
   11338:	movw	r6, #41320	; 0xa168
   1133c:	movt	r6, #2
   11340:	ldr	r3, [r6]
   11344:	cmp	r3, r8
   11348:	bge	11800 <__assert_fail@plt+0x658>
   1134c:	ldr	r4, [r7, r3, lsl #2]
   11350:	mov	r0, r4
   11354:	bl	11160 <canonicalize_file_name@plt>
   11358:	subs	r9, r0, #0
   1135c:	beq	11410 <__assert_fail@plt+0x268>
   11360:	movw	r0, #35988	; 0x8c94
   11364:	movt	r0, #1
   11368:	mov	r1, r9
   1136c:	bl	10ef0 <strcmp@plt>
   11370:	cmp	r0, #0
   11374:	bne	11410 <__assert_fail@plt+0x268>
   11378:	mov	r0, r9
   1137c:	bl	1209c <__assert_fail@plt+0xef4>
   11380:	mov	r0, r4
   11384:	bl	10fe0 <chroot@plt>
   11388:	cmp	r0, #0
   1138c:	bne	116e8 <__assert_fail@plt+0x540>
   11390:	cmp	r5, #0
   11394:	movne	r5, r0
   11398:	beq	11488 <__assert_fail@plt+0x2e0>
   1139c:	ldr	r3, [r6]
   113a0:	add	r3, r3, #1
   113a4:	cmp	r3, r8
   113a8:	addne	r7, r7, r3, lsl #2
   113ac:	beq	116b4 <__assert_fail@plt+0x50c>
   113b0:	cmp	fp, #0
   113b4:	beq	114c8 <__assert_fail@plt+0x320>
   113b8:	mov	r1, #0
   113bc:	mov	r0, fp
   113c0:	mov	r3, r1
   113c4:	add	r2, sp, #24
   113c8:	str	r1, [sp]
   113cc:	add	r1, sp, #20
   113d0:	bl	15f18 <__assert_fail@plt+0x4d70>
   113d4:	subs	r4, r0, #0
   113d8:	beq	114c8 <__assert_fail@plt+0x320>
   113dc:	ldr	r0, [sp, #20]
   113e0:	cmn	r0, #1
   113e4:	bne	114d4 <__assert_fail@plt+0x32c>
   113e8:	ldr	r3, [sp, #24]
   113ec:	cmn	r3, #1
   113f0:	bne	115e8 <__assert_fail@plt+0x440>
   113f4:	bl	110a0 <__errno_location@plt>
   113f8:	movw	r2, #36984	; 0x9078
   113fc:	movt	r2, #1
   11400:	ldr	r1, [r0]
   11404:	mov	r3, r4
   11408:	mov	r0, #125	; 0x7d
   1140c:	bl	11004 <error@plt>
   11410:	mov	r0, r9
   11414:	bl	1209c <__assert_fail@plt+0xef4>
   11418:	cmp	r5, #0
   1141c:	bne	11840 <__assert_fail@plt+0x698>
   11420:	cmp	fp, #0
   11424:	beq	11440 <__assert_fail@plt+0x298>
   11428:	mov	r3, r5
   1142c:	add	r2, sp, #24
   11430:	str	r5, [sp]
   11434:	add	r1, sp, #20
   11438:	mov	r0, fp
   1143c:	bl	15f18 <__assert_fail@plt+0x4d70>
   11440:	ldr	r0, [sp, #20]
   11444:	cmn	r0, #1
   11448:	beq	11658 <__assert_fail@plt+0x4b0>
   1144c:	ldr	r3, [sp, #12]
   11450:	cmp	r3, #0
   11454:	beq	117e0 <__assert_fail@plt+0x638>
   11458:	ldr	r3, [sp, #24]
   1145c:	cmn	r3, #1
   11460:	beq	11780 <__assert_fail@plt+0x5d8>
   11464:	mov	r5, #0
   11468:	ldr	r3, [sp, #12]
   1146c:	ldrb	r3, [r3]
   11470:	cmp	r3, #0
   11474:	bne	11730 <__assert_fail@plt+0x588>
   11478:	mov	r0, r4
   1147c:	bl	10fe0 <chroot@plt>
   11480:	cmp	r0, #0
   11484:	bne	116e8 <__assert_fail@plt+0x540>
   11488:	movw	r0, #35988	; 0x8c94
   1148c:	movt	r0, #1
   11490:	bl	10f98 <chdir@plt>
   11494:	cmp	r0, #0
   11498:	beq	1139c <__assert_fail@plt+0x1f4>
   1149c:	bl	110a0 <__errno_location@plt>
   114a0:	ldr	r4, [r0]
   114a4:	movw	r1, #36564	; 0x8ed4
   114a8:	movt	r1, #1
   114ac:	mov	r2, #5
   114b0:	mov	r0, #0
   114b4:	bl	10f74 <dcgettext@plt>
   114b8:	mov	r2, r0
   114bc:	mov	r1, r4
   114c0:	mov	r0, #125	; 0x7d
   114c4:	bl	11004 <error@plt>
   114c8:	ldr	r0, [sp, #20]
   114cc:	cmn	r0, #1
   114d0:	beq	115e8 <__assert_fail@plt+0x440>
   114d4:	ldr	r3, [sp, #12]
   114d8:	cmp	r3, #0
   114dc:	beq	115c8 <__assert_fail@plt+0x420>
   114e0:	ldr	r3, [sp, #24]
   114e4:	cmn	r3, #1
   114e8:	movne	r3, #0
   114ec:	ldrne	r4, [sp, #28]
   114f0:	strne	r3, [sp, #36]	; 0x24
   114f4:	beq	115c8 <__assert_fail@plt+0x420>
   114f8:	ldr	r3, [sp, #12]
   114fc:	ldrb	r3, [r3]
   11500:	cmp	r3, #0
   11504:	bne	11620 <__assert_fail@plt+0x478>
   11508:	mov	r1, r4
   1150c:	ldr	r0, [sp, #32]
   11510:	bl	10fb0 <setgroups@plt>
   11514:	cmp	r0, #0
   11518:	bne	1182c <__assert_fail@plt+0x684>
   1151c:	ldr	r0, [sp, #36]	; 0x24
   11520:	bl	1209c <__assert_fail@plt+0xef4>
   11524:	ldr	r0, [sp, #28]
   11528:	bl	1209c <__assert_fail@plt+0xef4>
   1152c:	bl	110a0 <__errno_location@plt>
   11530:	ldr	r4, [sp, #24]
   11534:	mov	r5, r0
   11538:	cmn	r4, #1
   1153c:	bne	11694 <__assert_fail@plt+0x4ec>
   11540:	ldr	r0, [sp, #20]
   11544:	cmn	r0, #1
   11548:	beq	11558 <__assert_fail@plt+0x3b0>
   1154c:	bl	11148 <setuid@plt>
   11550:	cmp	r0, #0
   11554:	bne	11884 <__assert_fail@plt+0x6dc>
   11558:	mov	r1, r7
   1155c:	ldr	r0, [r7]
   11560:	bl	10f38 <execvp@plt>
   11564:	ldr	r4, [r5]
   11568:	mov	r2, #5
   1156c:	movw	r1, #36768	; 0x8fa0
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	cmp	r4, #2
   1157c:	moveq	r5, #127	; 0x7f
   11580:	movne	r5, #126	; 0x7e
   11584:	bl	10f74 <dcgettext@plt>
   11588:	mov	r6, r0
   1158c:	ldr	r0, [r7]
   11590:	bl	15a6c <__assert_fail@plt+0x48c4>
   11594:	mov	r3, r0
   11598:	mov	r2, r6
   1159c:	mov	r1, r4
   115a0:	mov	r0, #0
   115a4:	bl	11004 <error@plt>
   115a8:	mov	r0, r5
   115ac:	add	sp, sp, #44	; 0x2c
   115b0:	ldrd	r4, [sp]
   115b4:	ldrd	r6, [sp, #8]
   115b8:	ldrd	r8, [sp, #16]
   115bc:	ldrd	sl, [sp, #24]
   115c0:	add	sp, sp, #32
   115c4:	pop	{pc}		; (ldr pc, [sp], #4)
   115c8:	bl	10efc <getpwuid@plt>
   115cc:	subs	r4, r0, #0
   115d0:	ldr	r3, [sp, #24]
   115d4:	beq	11748 <__assert_fail@plt+0x5a0>
   115d8:	cmn	r3, #1
   115dc:	ldr	r5, [r4]
   115e0:	ldreq	r3, [r4, #12]
   115e4:	streq	r3, [sp, #24]
   115e8:	ldr	r2, [sp, #12]
   115ec:	mov	r3, #0
   115f0:	str	r3, [sp, #36]	; 0x24
   115f4:	ldr	r4, [sp, #28]
   115f8:	cmp	r2, r3
   115fc:	bne	114f8 <__assert_fail@plt+0x350>
   11600:	ldr	r1, [sp, #24]
   11604:	cmp	r5, #0
   11608:	cmnne	r1, #1
   1160c:	bne	117a4 <__assert_fail@plt+0x5fc>
   11610:	ldr	r3, [sp, #20]
   11614:	cmn	r3, #1
   11618:	beq	1151c <__assert_fail@plt+0x374>
   1161c:	b	11508 <__assert_fail@plt+0x360>
   11620:	add	r2, sp, #32
   11624:	add	r1, sp, #36	; 0x24
   11628:	ldr	r0, [sp, #12]
   1162c:	ldr	r3, [sp, #32]
   11630:	clz	r3, r3
   11634:	lsr	r3, r3, #5
   11638:	bl	11984 <__assert_fail@plt+0x7dc>
   1163c:	cmp	r0, #0
   11640:	beq	11728 <__assert_fail@plt+0x580>
   11644:	ldr	r3, [sp, #32]
   11648:	cmp	r3, #0
   1164c:	bne	11508 <__assert_fail@plt+0x360>
   11650:	mov	r5, #125	; 0x7d
   11654:	b	115a8 <__assert_fail@plt+0x400>
   11658:	mov	r5, #0
   1165c:	ldr	r3, [sp, #12]
   11660:	cmp	r3, #0
   11664:	bne	11468 <__assert_fail@plt+0x2c0>
   11668:	ldr	r1, [sp, #24]
   1166c:	cmn	r1, #1
   11670:	beq	11478 <__assert_fail@plt+0x2d0>
   11674:	cmp	r5, #0
   11678:	beq	117f8 <__assert_fail@plt+0x650>
   1167c:	add	r2, sp, #28
   11680:	mov	r0, r5
   11684:	bl	16d3c <__assert_fail@plt+0x5b94>
   11688:	cmp	r0, #0
   1168c:	strgt	r0, [sp, #32]
   11690:	b	11478 <__assert_fail@plt+0x2d0>
   11694:	mov	r0, r4
   11698:	bl	1101c <setgid@plt>
   1169c:	cmp	r0, #0
   116a0:	movwne	r1, #36720	; 0x8f70
   116a4:	movtne	r1, #1
   116a8:	beq	11540 <__assert_fail@plt+0x398>
   116ac:	ldr	r4, [r5]
   116b0:	b	114ac <__assert_fail@plt+0x304>
   116b4:	movw	r0, #36596	; 0x8ef4
   116b8:	movt	r0, #1
   116bc:	bl	11010 <getenv@plt>
   116c0:	cmp	r0, #0
   116c4:	movw	r3, #36404	; 0x8e34
   116c8:	movt	r3, #1
   116cc:	mov	r2, #0
   116d0:	moveq	r0, r3
   116d4:	movw	r3, #36604	; 0x8efc
   116d8:	movt	r3, #1
   116dc:	stm	r7, {r0, r3}
   116e0:	str	r2, [r7, #8]
   116e4:	b	113b0 <__assert_fail@plt+0x208>
   116e8:	bl	110a0 <__errno_location@plt>
   116ec:	ldr	r5, [r0]
   116f0:	mov	r2, #5
   116f4:	movw	r1, #36528	; 0x8eb0
   116f8:	movt	r1, #1
   116fc:	mov	r0, #0
   11700:	bl	10f74 <dcgettext@plt>
   11704:	mov	r6, r0
   11708:	mov	r1, r4
   1170c:	mov	r0, #4
   11710:	bl	14740 <__assert_fail@plt+0x3598>
   11714:	mov	r3, r0
   11718:	mov	r2, r6
   1171c:	mov	r1, r5
   11720:	mov	r0, #125	; 0x7d
   11724:	bl	11004 <error@plt>
   11728:	ldr	r4, [sp, #36]	; 0x24
   1172c:	b	11508 <__assert_fail@plt+0x360>
   11730:	mov	r3, #0
   11734:	add	r2, sp, #32
   11738:	ldr	r0, [sp, #12]
   1173c:	add	r1, sp, #28
   11740:	bl	11984 <__assert_fail@plt+0x7dc>
   11744:	b	11478 <__assert_fail@plt+0x2d0>
   11748:	cmn	r3, #1
   1174c:	bne	115e8 <__assert_fail@plt+0x440>
   11750:	bl	110a0 <__errno_location@plt>
   11754:	ldr	r5, [r0]
   11758:	mov	r2, #5
   1175c:	movw	r1, #36608	; 0x8f00
   11760:	movt	r1, #1
   11764:	mov	r0, r4
   11768:	bl	10f74 <dcgettext@plt>
   1176c:	mov	r2, r0
   11770:	mov	r0, #125	; 0x7d
   11774:	ldr	r3, [sp, #20]
   11778:	mov	r1, r5
   1177c:	bl	11004 <error@plt>
   11780:	bl	10efc <getpwuid@plt>
   11784:	subs	r5, r0, #0
   11788:	beq	11464 <__assert_fail@plt+0x2bc>
   1178c:	ldr	r3, [sp, #24]
   11790:	cmn	r3, #1
   11794:	ldreq	r3, [r5, #12]
   11798:	ldr	r5, [r5]
   1179c:	streq	r3, [sp, #24]
   117a0:	b	1165c <__assert_fail@plt+0x4b4>
   117a4:	mov	r0, r5
   117a8:	add	r2, sp, #36	; 0x24
   117ac:	bl	16d3c <__assert_fail@plt+0x5b94>
   117b0:	cmp	r0, #0
   117b4:	ldrgt	r4, [sp, #36]	; 0x24
   117b8:	strgt	r0, [sp, #32]
   117bc:	bgt	11610 <__assert_fail@plt+0x468>
   117c0:	ldr	r3, [sp, #32]
   117c4:	cmp	r3, #0
   117c8:	bne	11610 <__assert_fail@plt+0x468>
   117cc:	bl	110a0 <__errno_location@plt>
   117d0:	movw	r1, #36648	; 0x8f28
   117d4:	movt	r1, #1
   117d8:	ldr	r4, [r0]
   117dc:	b	114ac <__assert_fail@plt+0x304>
   117e0:	bl	10efc <getpwuid@plt>
   117e4:	subs	r5, r0, #0
   117e8:	bne	1178c <__assert_fail@plt+0x5e4>
   117ec:	ldr	r3, [sp, #24]
   117f0:	cmn	r3, #1
   117f4:	beq	11478 <__assert_fail@plt+0x2d0>
   117f8:	mov	r5, #0
   117fc:	b	11478 <__assert_fail@plt+0x2d0>
   11800:	mov	r2, #5
   11804:	movw	r1, #36456	; 0x8e68
   11808:	movt	r1, #1
   1180c:	mov	r0, r4
   11810:	bl	10f74 <dcgettext@plt>
   11814:	mov	r2, r0
   11818:	mov	r1, r4
   1181c:	mov	r0, r4
   11820:	bl	11004 <error@plt>
   11824:	mov	r0, #125	; 0x7d
   11828:	bl	11be8 <__assert_fail@plt+0xa40>
   1182c:	bl	110a0 <__errno_location@plt>
   11830:	movw	r1, #36684	; 0x8f4c
   11834:	movt	r1, #1
   11838:	ldr	r4, [r0]
   1183c:	b	114ac <__assert_fail@plt+0x304>
   11840:	mov	r2, #5
   11844:	movw	r1, #36472	; 0x8e78
   11848:	movt	r1, #1
   1184c:	mov	r0, #0
   11850:	bl	10f74 <dcgettext@plt>
   11854:	mov	r4, r0
   11858:	movw	r1, #35988	; 0x8c94
   1185c:	movt	r1, #1
   11860:	mov	r0, #4
   11864:	bl	14740 <__assert_fail@plt+0x3598>
   11868:	mov	r1, #0
   1186c:	mov	r3, r0
   11870:	mov	r2, r4
   11874:	mov	r0, r1
   11878:	bl	11004 <error@plt>
   1187c:	mov	r0, #125	; 0x7d
   11880:	bl	11be8 <__assert_fail@plt+0xa40>
   11884:	movw	r1, #36744	; 0x8f88
   11888:	movt	r1, #1
   1188c:	b	116ac <__assert_fail@plt+0x504>
   11890:	andeq	r8, r1, r4, lsl #21
   11894:	mov	fp, #0
   11898:	mov	lr, #0
   1189c:	pop	{r1}		; (ldr r1, [sp], #4)
   118a0:	mov	r2, sp
   118a4:	push	{r2}		; (str r2, [sp, #-4]!)
   118a8:	push	{r0}		; (str r0, [sp, #-4]!)
   118ac:	ldr	ip, [pc, #16]	; 118c4 <__assert_fail@plt+0x71c>
   118b0:	push	{ip}		; (str ip, [sp, #-4]!)
   118b4:	ldr	r0, [pc, #12]	; 118c8 <__assert_fail@plt+0x720>
   118b8:	ldr	r3, [pc, #12]	; 118cc <__assert_fail@plt+0x724>
   118bc:	bl	11034 <__libc_start_main@plt>
   118c0:	bl	11184 <abort@plt>
   118c4:	andeq	r8, r1, r4, lsr #20
   118c8:			; <UNDEFINED> instruction: 0x000111b4
   118cc:	andeq	r8, r1, r4, asr #19
   118d0:	ldr	r3, [pc, #20]	; 118ec <__assert_fail@plt+0x744>
   118d4:	ldr	r2, [pc, #20]	; 118f0 <__assert_fail@plt+0x748>
   118d8:	add	r3, pc, r3
   118dc:	ldr	r2, [r3, r2]
   118e0:	cmp	r2, #0
   118e4:	bxeq	lr
   118e8:	b	1104c <__gmon_start__@plt>
   118ec:	andeq	r8, r1, r0, lsr #14
   118f0:	andeq	r0, r0, ip, lsl #2
   118f4:	ldr	r0, [pc, #24]	; 11914 <__assert_fail@plt+0x76c>
   118f8:	ldr	r3, [pc, #24]	; 11918 <__assert_fail@plt+0x770>
   118fc:	cmp	r3, r0
   11900:	bxeq	lr
   11904:	ldr	r3, [pc, #16]	; 1191c <__assert_fail@plt+0x774>
   11908:	cmp	r3, #0
   1190c:	bxeq	lr
   11910:	bx	r3
   11914:	andeq	sl, r2, r0, ror #2
   11918:	andeq	sl, r2, r0, ror #2
   1191c:	andeq	r0, r0, r0
   11920:	ldr	r0, [pc, #36]	; 1194c <__assert_fail@plt+0x7a4>
   11924:	ldr	r1, [pc, #36]	; 11950 <__assert_fail@plt+0x7a8>
   11928:	sub	r1, r1, r0
   1192c:	asr	r1, r1, #2
   11930:	add	r1, r1, r1, lsr #31
   11934:	asrs	r1, r1, #1
   11938:	bxeq	lr
   1193c:	ldr	r3, [pc, #16]	; 11954 <__assert_fail@plt+0x7ac>
   11940:	cmp	r3, #0
   11944:	bxeq	lr
   11948:	bx	r3
   1194c:	andeq	sl, r2, r0, ror #2
   11950:	andeq	sl, r2, r0, ror #2
   11954:	andeq	r0, r0, r0
   11958:	push	{r4, lr}
   1195c:	ldr	r4, [pc, #24]	; 1197c <__assert_fail@plt+0x7d4>
   11960:	ldrb	r3, [r4]
   11964:	cmp	r3, #0
   11968:	popne	{r4, pc}
   1196c:	bl	118f4 <__assert_fail@plt+0x74c>
   11970:	mov	r3, #1
   11974:	strb	r3, [r4]
   11978:	pop	{r4, pc}
   1197c:	andeq	sl, r2, ip, ror r1
   11980:	b	11920 <__assert_fail@plt+0x778>
   11984:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11988:	strd	r6, [sp, #8]
   1198c:	mov	r6, #0
   11990:	strd	r8, [sp, #16]
   11994:	strd	sl, [sp, #24]
   11998:	str	lr, [sp, #32]
   1199c:	sub	sp, sp, #60	; 0x3c
   119a0:	str	r1, [sp, #12]
   119a4:	str	r3, [sp, #20]
   119a8:	str	r2, [sp, #24]
   119ac:	str	r0, [sp, #28]
   119b0:	str	r6, [sp, #44]	; 0x2c
   119b4:	bl	16cac <__assert_fail@plt+0x5b04>
   119b8:	movw	r1, #35556	; 0x8ae4
   119bc:	movt	r1, #1
   119c0:	str	r0, [sp, #16]
   119c4:	bl	1110c <strtok@plt>
   119c8:	subs	r4, r0, #0
   119cc:	beq	11b98 <__assert_fail@plt+0x9f0>
   119d0:	movw	r7, #36164	; 0x8d44
   119d4:	movt	r7, #1
   119d8:	movw	fp, #35560	; 0x8ae8
   119dc:	movt	fp, #1
   119e0:	movw	r9, #35556	; 0x8ae4
   119e4:	movt	r9, #1
   119e8:	mov	r5, r6
   119ec:	mov	r8, r6
   119f0:	add	r3, sp, #48	; 0x30
   119f4:	mov	r2, #10
   119f8:	str	r7, [sp]
   119fc:	mov	r1, #0
   11a00:	mov	r0, r4
   11a04:	bl	172dc <__assert_fail@plt+0x6134>
   11a08:	cmp	r0, #0
   11a0c:	bne	11a28 <__assert_fail@plt+0x880>
   11a10:	ldrd	r2, [sp, #48]	; 0x30
   11a14:	mov	r1, #0
   11a18:	mvn	r0, #0
   11a1c:	cmp	r3, r1
   11a20:	cmpeq	r2, r0
   11a24:	bls	11ad8 <__assert_fail@plt+0x930>
   11a28:	mov	r0, r4
   11a2c:	bl	1119c <getgrnam@plt>
   11a30:	subs	sl, r0, #0
   11a34:	beq	11a98 <__assert_fail@plt+0x8f0>
   11a38:	ldr	r3, [sl, #8]
   11a3c:	mov	r2, #0
   11a40:	str	r3, [sp, #48]	; 0x30
   11a44:	str	r2, [sp, #52]	; 0x34
   11a48:	ldr	r3, [sp, #44]	; 0x2c
   11a4c:	cmp	r3, r5
   11a50:	beq	11b34 <__assert_fail@plt+0x98c>
   11a54:	ldr	r3, [sp, #48]	; 0x30
   11a58:	str	r3, [r8, r5, lsl #2]
   11a5c:	add	r5, r5, #1
   11a60:	mov	r1, r9
   11a64:	mov	r0, #0
   11a68:	bl	1110c <strtok@plt>
   11a6c:	subs	r4, r0, #0
   11a70:	bne	119f0 <__assert_fail@plt+0x848>
   11a74:	orrs	r3, r5, r6
   11a78:	beq	11b94 <__assert_fail@plt+0x9ec>
   11a7c:	ldr	r3, [sp, #12]
   11a80:	cmp	r6, #0
   11a84:	mvnne	r6, #0
   11a88:	str	r8, [r3]
   11a8c:	ldreq	r3, [sp, #24]
   11a90:	streq	r5, [r3]
   11a94:	b	11ab0 <__assert_fail@plt+0x908>
   11a98:	ldr	r3, [sp, #20]
   11a9c:	cmp	r3, #0
   11aa0:	bne	11b4c <__assert_fail@plt+0x9a4>
   11aa4:	ldr	r3, [sp, #12]
   11aa8:	mvn	r6, #0
   11aac:	str	r8, [r3]
   11ab0:	ldr	r0, [sp, #16]
   11ab4:	bl	1209c <__assert_fail@plt+0xef4>
   11ab8:	mov	r0, r6
   11abc:	add	sp, sp, #60	; 0x3c
   11ac0:	ldrd	r4, [sp]
   11ac4:	ldrd	r6, [sp, #8]
   11ac8:	ldrd	r8, [sp, #16]
   11acc:	ldrd	sl, [sp, #24]
   11ad0:	add	sp, sp, #32
   11ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ad8:	bl	11064 <__ctype_b_loc@plt>
   11adc:	ldrb	r3, [r4]
   11ae0:	ldr	r1, [r0]
   11ae4:	lsl	r2, r3, #1
   11ae8:	ldrh	r2, [r1, r2]
   11aec:	tst	r2, #8192	; 0x2000
   11af0:	beq	11b08 <__assert_fail@plt+0x960>
   11af4:	ldrb	r3, [r4, #1]!
   11af8:	lsl	r2, r3, #1
   11afc:	ldrh	r2, [r1, r2]
   11b00:	tst	r2, #8192	; 0x2000
   11b04:	bne	11af4 <__assert_fail@plt+0x94c>
   11b08:	cmp	r3, #43	; 0x2b
   11b0c:	beq	11a48 <__assert_fail@plt+0x8a0>
   11b10:	mov	r0, r4
   11b14:	bl	1119c <getgrnam@plt>
   11b18:	cmp	r0, #0
   11b1c:	beq	11a48 <__assert_fail@plt+0x8a0>
   11b20:	ldr	r3, [r0, #8]
   11b24:	mov	r2, #0
   11b28:	str	r3, [sp, #48]	; 0x30
   11b2c:	str	r2, [sp, #52]	; 0x34
   11b30:	b	11a48 <__assert_fail@plt+0x8a0>
   11b34:	mov	r0, r8
   11b38:	mov	r2, #4
   11b3c:	add	r1, sp, #44	; 0x2c
   11b40:	bl	16994 <__assert_fail@plt+0x57ec>
   11b44:	mov	r8, r0
   11b48:	b	11a54 <__assert_fail@plt+0x8ac>
   11b4c:	bl	110a0 <__errno_location@plt>
   11b50:	ldr	r3, [r0]
   11b54:	mov	r1, fp
   11b58:	mov	r2, #5
   11b5c:	mov	r0, sl
   11b60:	mvn	r6, #0
   11b64:	str	r3, [sp, #32]
   11b68:	bl	10f74 <dcgettext@plt>
   11b6c:	mov	r2, r0
   11b70:	mov	r0, r4
   11b74:	str	r2, [sp, #36]	; 0x24
   11b78:	bl	15a6c <__assert_fail@plt+0x48c4>
   11b7c:	mov	r3, r0
   11b80:	mov	r0, sl
   11b84:	ldr	r1, [sp, #32]
   11b88:	ldr	r2, [sp, #36]	; 0x24
   11b8c:	bl	11004 <error@plt>
   11b90:	b	11a60 <__assert_fail@plt+0x8b8>
   11b94:	mov	r4, r8
   11b98:	ldr	r3, [sp, #20]
   11b9c:	cmp	r3, #0
   11ba0:	beq	11bd8 <__assert_fail@plt+0xa30>
   11ba4:	mov	r2, #5
   11ba8:	movw	r1, #35580	; 0x8afc
   11bac:	movt	r1, #1
   11bb0:	mov	r0, #0
   11bb4:	bl	10f74 <dcgettext@plt>
   11bb8:	mov	r5, r0
   11bbc:	ldr	r0, [sp, #28]
   11bc0:	bl	15a6c <__assert_fail@plt+0x48c4>
   11bc4:	mov	r1, #0
   11bc8:	mov	r3, r0
   11bcc:	mov	r2, r5
   11bd0:	mov	r0, r1
   11bd4:	bl	11004 <error@plt>
   11bd8:	ldr	r3, [sp, #12]
   11bdc:	mvn	r6, #0
   11be0:	str	r4, [r3]
   11be4:	b	11ab0 <__assert_fail@plt+0x908>
   11be8:	subs	r6, r0, #0
   11bec:	str	r7, [sp, #-8]!
   11bf0:	str	lr, [sp, #4]
   11bf4:	sub	sp, sp, #56	; 0x38
   11bf8:	beq	11c40 <__assert_fail@plt+0xa98>
   11bfc:	movw	r3, #41328	; 0xa170
   11c00:	movt	r3, #2
   11c04:	ldr	r4, [r3]
   11c08:	mov	r2, #5
   11c0c:	movw	r1, #35612	; 0x8b1c
   11c10:	movt	r1, #1
   11c14:	mov	r0, #0
   11c18:	bl	10f74 <dcgettext@plt>
   11c1c:	movw	r3, #41352	; 0xa188
   11c20:	movt	r3, #2
   11c24:	mov	r2, r0
   11c28:	mov	r1, #1
   11c2c:	ldr	r3, [r3]
   11c30:	mov	r0, r4
   11c34:	bl	110e8 <__fprintf_chk@plt>
   11c38:	mov	r0, r6
   11c3c:	bl	11070 <exit@plt>
   11c40:	mov	r2, #5
   11c44:	movw	r1, #35652	; 0x8b44
   11c48:	movt	r1, #1
   11c4c:	movw	r7, #41332	; 0xa174
   11c50:	movt	r7, #2
   11c54:	bl	10f74 <dcgettext@plt>
   11c58:	movw	r3, #41352	; 0xa188
   11c5c:	movt	r3, #2
   11c60:	ldr	r3, [r3]
   11c64:	mov	r1, r0
   11c68:	mov	r0, #1
   11c6c:	mov	r2, r3
   11c70:	bl	110d0 <__printf_chk@plt>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #35716	; 0x8b84
   11c7c:	movt	r1, #1
   11c80:	mov	r0, r6
   11c84:	bl	10f74 <dcgettext@plt>
   11c88:	ldr	r1, [r7]
   11c8c:	bl	10ecc <fputs_unlocked@plt>
   11c90:	mov	r2, #5
   11c94:	movw	r1, #35768	; 0x8bb8
   11c98:	movt	r1, #1
   11c9c:	mov	r0, r6
   11ca0:	bl	10f74 <dcgettext@plt>
   11ca4:	ldr	r1, [r7]
   11ca8:	bl	10ecc <fputs_unlocked@plt>
   11cac:	mov	r2, #5
   11cb0:	movw	r1, #35844	; 0x8c04
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, r6
   11cbc:	bl	10f74 <dcgettext@plt>
   11cc0:	ldr	r1, [r7]
   11cc4:	bl	10ecc <fputs_unlocked@plt>
   11cc8:	mov	r2, #5
   11ccc:	movw	r1, #35920	; 0x8c50
   11cd0:	movt	r1, #1
   11cd4:	mov	r0, r6
   11cd8:	bl	10f74 <dcgettext@plt>
   11cdc:	mov	r4, r0
   11ce0:	movw	r1, #35988	; 0x8c94
   11ce4:	movt	r1, #1
   11ce8:	mov	r0, #4
   11cec:	bl	14740 <__assert_fail@plt+0x3598>
   11cf0:	mov	r2, r0
   11cf4:	mov	r1, r4
   11cf8:	mov	r0, #1
   11cfc:	bl	110d0 <__printf_chk@plt>
   11d00:	mov	r2, #5
   11d04:	movw	r1, #35992	; 0x8c98
   11d08:	movt	r1, #1
   11d0c:	mov	r0, r6
   11d10:	bl	10f74 <dcgettext@plt>
   11d14:	ldr	r1, [r7]
   11d18:	bl	10ecc <fputs_unlocked@plt>
   11d1c:	mov	r2, #5
   11d20:	movw	r1, #36040	; 0x8cc8
   11d24:	movt	r1, #1
   11d28:	mov	r0, r6
   11d2c:	bl	10f74 <dcgettext@plt>
   11d30:	ldr	r1, [r7]
   11d34:	bl	10ecc <fputs_unlocked@plt>
   11d38:	mov	r2, #5
   11d3c:	movw	r1, #36096	; 0x8d00
   11d40:	movt	r1, #1
   11d44:	mov	r0, r6
   11d48:	bl	10f74 <dcgettext@plt>
   11d4c:	ldr	r1, [r7]
   11d50:	bl	10ecc <fputs_unlocked@plt>
   11d54:	movw	lr, #35404	; 0x8a4c
   11d58:	movt	lr, #1
   11d5c:	ldr	ip, [lr]
   11d60:	ldr	r4, [lr, #4]
   11d64:	ldrd	r8, [lr, #8]
   11d68:	subs	r1, ip, #0
   11d6c:	str	ip, [sp]
   11d70:	ldrd	r2, [lr, #16]
   11d74:	str	r4, [sp, #4]
   11d78:	ldrd	r4, [lr, #24]
   11d7c:	strd	r8, [sp, #8]
   11d80:	ldrd	r8, [lr, #32]
   11d84:	strd	r2, [sp, #16]
   11d88:	ldrd	r2, [lr, #40]	; 0x28
   11d8c:	strd	r4, [sp, #24]
   11d90:	ldrd	r4, [lr, #48]	; 0x30
   11d94:	strd	r8, [sp, #32]
   11d98:	strd	r2, [sp, #40]	; 0x28
   11d9c:	strd	r4, [sp, #48]	; 0x30
   11da0:	movwne	r5, #35604	; 0x8b14
   11da4:	mov	r4, sp
   11da8:	movtne	r5, #1
   11dac:	bne	11ea4 <__assert_fail@plt+0xcfc>
   11db0:	ldr	r4, [r4, #4]
   11db4:	movw	r1, #36168	; 0x8d48
   11db8:	movt	r1, #1
   11dbc:	mov	r2, #5
   11dc0:	cmp	r4, #0
   11dc4:	beq	11eb8 <__assert_fail@plt+0xd10>
   11dc8:	mov	r0, #0
   11dcc:	bl	10f74 <dcgettext@plt>
   11dd0:	mov	r1, r0
   11dd4:	movw	r3, #36192	; 0x8d60
   11dd8:	movt	r3, #1
   11ddc:	movw	r2, #36232	; 0x8d88
   11de0:	movt	r2, #1
   11de4:	mov	r0, #1
   11de8:	bl	110d0 <__printf_chk@plt>
   11dec:	mov	r1, #0
   11df0:	mov	r0, #5
   11df4:	bl	11118 <setlocale@plt>
   11df8:	cmp	r0, #0
   11dfc:	movweq	r5, #35604	; 0x8b14
   11e00:	movteq	r5, #1
   11e04:	beq	11e28 <__assert_fail@plt+0xc80>
   11e08:	movw	r1, #36248	; 0x8d98
   11e0c:	movt	r1, #1
   11e10:	mov	r2, #3
   11e14:	movw	r5, #35604	; 0x8b14
   11e18:	movt	r5, #1
   11e1c:	bl	11178 <strncmp@plt>
   11e20:	cmp	r0, #0
   11e24:	bne	11f70 <__assert_fail@plt+0xdc8>
   11e28:	mov	r2, #5
   11e2c:	movw	r1, #36324	; 0x8de4
   11e30:	movt	r1, #1
   11e34:	mov	r0, #0
   11e38:	bl	10f74 <dcgettext@plt>
   11e3c:	mov	r1, r0
   11e40:	movw	r3, #35604	; 0x8b14
   11e44:	movt	r3, #1
   11e48:	movw	r2, #36192	; 0x8d60
   11e4c:	movt	r2, #1
   11e50:	mov	r0, #1
   11e54:	bl	110d0 <__printf_chk@plt>
   11e58:	mov	r2, #5
   11e5c:	movw	r1, #36352	; 0x8e00
   11e60:	movt	r1, #1
   11e64:	mov	r0, #0
   11e68:	bl	10f74 <dcgettext@plt>
   11e6c:	movw	r2, #36804	; 0x8fc4
   11e70:	movt	r2, #1
   11e74:	cmp	r4, r5
   11e78:	movw	r3, #36164	; 0x8d44
   11e7c:	movt	r3, #1
   11e80:	mov	r1, r0
   11e84:	moveq	r3, r2
   11e88:	mov	r2, r4
   11e8c:	mov	r0, #1
   11e90:	bl	110d0 <__printf_chk@plt>
   11e94:	b	11c38 <__assert_fail@plt+0xa90>
   11e98:	ldr	r1, [r4, #8]!
   11e9c:	cmp	r1, #0
   11ea0:	beq	11db0 <__assert_fail@plt+0xc08>
   11ea4:	mov	r0, r5
   11ea8:	bl	10ef0 <strcmp@plt>
   11eac:	cmp	r0, #0
   11eb0:	bne	11e98 <__assert_fail@plt+0xcf0>
   11eb4:	b	11db0 <__assert_fail@plt+0xc08>
   11eb8:	mov	r0, r4
   11ebc:	bl	10f74 <dcgettext@plt>
   11ec0:	mov	r1, r0
   11ec4:	movw	r3, #36192	; 0x8d60
   11ec8:	movt	r3, #1
   11ecc:	movw	r2, #36232	; 0x8d88
   11ed0:	movt	r2, #1
   11ed4:	mov	r0, #1
   11ed8:	bl	110d0 <__printf_chk@plt>
   11edc:	mov	r1, r4
   11ee0:	mov	r0, #5
   11ee4:	bl	11118 <setlocale@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	11f08 <__assert_fail@plt+0xd60>
   11ef0:	movw	r1, #36248	; 0x8d98
   11ef4:	movt	r1, #1
   11ef8:	mov	r2, #3
   11efc:	bl	11178 <strncmp@plt>
   11f00:	cmp	r0, #0
   11f04:	bne	11f64 <__assert_fail@plt+0xdbc>
   11f08:	mov	r2, #5
   11f0c:	movw	r1, #36324	; 0x8de4
   11f10:	movt	r1, #1
   11f14:	mov	r0, #0
   11f18:	bl	10f74 <dcgettext@plt>
   11f1c:	mov	r1, r0
   11f20:	movw	r3, #35604	; 0x8b14
   11f24:	movt	r3, #1
   11f28:	movw	r2, #36192	; 0x8d60
   11f2c:	movt	r2, #1
   11f30:	mov	r0, #1
   11f34:	bl	110d0 <__printf_chk@plt>
   11f38:	movw	r1, #36352	; 0x8e00
   11f3c:	movt	r1, #1
   11f40:	mov	r2, #5
   11f44:	mov	r0, #0
   11f48:	bl	10f74 <dcgettext@plt>
   11f4c:	movw	r4, #35604	; 0x8b14
   11f50:	movt	r4, #1
   11f54:	movw	r3, #36804	; 0x8fc4
   11f58:	movt	r3, #1
   11f5c:	mov	r1, r0
   11f60:	b	11e88 <__assert_fail@plt+0xce0>
   11f64:	movw	r5, #35604	; 0x8b14
   11f68:	movt	r5, #1
   11f6c:	mov	r4, r5
   11f70:	mov	r2, #5
   11f74:	movw	r1, #36252	; 0x8d9c
   11f78:	movt	r1, #1
   11f7c:	mov	r0, #0
   11f80:	bl	10f74 <dcgettext@plt>
   11f84:	ldr	r1, [r7]
   11f88:	bl	10ecc <fputs_unlocked@plt>
   11f8c:	b	11e28 <__assert_fail@plt+0xc80>
   11f90:	movw	r3, #41344	; 0xa180
   11f94:	movt	r3, #2
   11f98:	str	r0, [r3]
   11f9c:	bx	lr
   11fa0:	movw	r3, #41344	; 0xa180
   11fa4:	movt	r3, #2
   11fa8:	strb	r0, [r3, #4]
   11fac:	bx	lr
   11fb0:	movw	r3, #41332	; 0xa174
   11fb4:	movt	r3, #2
   11fb8:	strd	r4, [sp, #-16]!
   11fbc:	ldr	r0, [r3]
   11fc0:	str	r6, [sp, #8]
   11fc4:	str	lr, [sp, #12]
   11fc8:	sub	sp, sp, #8
   11fcc:	bl	18140 <__assert_fail@plt+0x6f98>
   11fd0:	cmp	r0, #0
   11fd4:	beq	12000 <__assert_fail@plt+0xe58>
   11fd8:	movw	r4, #41344	; 0xa180
   11fdc:	movt	r4, #2
   11fe0:	ldrb	r6, [r4, #4]
   11fe4:	bl	110a0 <__errno_location@plt>
   11fe8:	mov	r5, r0
   11fec:	cmp	r6, #0
   11ff0:	beq	1202c <__assert_fail@plt+0xe84>
   11ff4:	ldr	r3, [r0]
   11ff8:	cmp	r3, #32
   11ffc:	bne	1202c <__assert_fail@plt+0xe84>
   12000:	movw	r3, #41328	; 0xa170
   12004:	movt	r3, #2
   12008:	ldr	r0, [r3]
   1200c:	bl	18140 <__assert_fail@plt+0x6f98>
   12010:	cmp	r0, #0
   12014:	bne	12074 <__assert_fail@plt+0xecc>
   12018:	add	sp, sp, #8
   1201c:	ldrd	r4, [sp]
   12020:	ldr	r6, [sp, #8]
   12024:	add	sp, sp, #12
   12028:	pop	{pc}		; (ldr pc, [sp], #4)
   1202c:	movw	r1, #36968	; 0x9068
   12030:	movt	r1, #1
   12034:	mov	r2, #5
   12038:	mov	r0, #0
   1203c:	bl	10f74 <dcgettext@plt>
   12040:	mov	r6, r0
   12044:	ldr	r0, [r4]
   12048:	cmp	r0, #0
   1204c:	beq	12084 <__assert_fail@plt+0xedc>
   12050:	ldr	r4, [r5]
   12054:	bl	14ef0 <__assert_fail@plt+0x3d48>
   12058:	mov	r3, r0
   1205c:	movw	r2, #36980	; 0x9074
   12060:	movt	r2, #1
   12064:	mov	r0, #0
   12068:	str	r6, [sp]
   1206c:	mov	r1, r4
   12070:	bl	11004 <error@plt>
   12074:	movw	r3, #41244	; 0xa11c
   12078:	movt	r3, #2
   1207c:	ldr	r0, [r3]
   12080:	bl	10f20 <_exit@plt>
   12084:	mov	r3, r6
   12088:	movw	r2, #36984	; 0x9078
   1208c:	movt	r2, #1
   12090:	ldr	r1, [r5]
   12094:	bl	11004 <error@plt>
   12098:	b	12074 <__assert_fail@plt+0xecc>
   1209c:	strd	r4, [sp, #-12]!
   120a0:	mov	r5, r0
   120a4:	str	lr, [sp, #8]
   120a8:	sub	sp, sp, #12
   120ac:	bl	110a0 <__errno_location@plt>
   120b0:	mov	r4, r0
   120b4:	mov	r2, #0
   120b8:	ldr	r3, [r4]
   120bc:	mov	r0, r5
   120c0:	str	r2, [r4]
   120c4:	str	r3, [sp]
   120c8:	str	r3, [sp, #4]
   120cc:	bl	10f14 <free@plt>
   120d0:	ldr	r3, [r4]
   120d4:	add	r2, sp, #8
   120d8:	clz	r3, r3
   120dc:	lsr	r3, r3, #5
   120e0:	add	r3, r2, r3, lsl #2
   120e4:	ldr	r3, [r3, #-8]
   120e8:	str	r3, [r4]
   120ec:	add	sp, sp, #12
   120f0:	ldrd	r4, [sp]
   120f4:	add	sp, sp, #8
   120f8:	pop	{pc}		; (ldr pc, [sp], #4)
   120fc:	strd	r4, [sp, #-16]!
   12100:	subs	r4, r0, #0
   12104:	str	r6, [sp, #8]
   12108:	str	lr, [sp, #12]
   1210c:	beq	121a4 <__assert_fail@plt+0xffc>
   12110:	mov	r1, #47	; 0x2f
   12114:	bl	11130 <strrchr@plt>
   12118:	subs	r5, r0, #0
   1211c:	beq	1217c <__assert_fail@plt+0xfd4>
   12120:	add	r6, r5, #1
   12124:	sub	r3, r6, r4
   12128:	cmp	r3, #6
   1212c:	ble	1217c <__assert_fail@plt+0xfd4>
   12130:	movw	r1, #37044	; 0x90b4
   12134:	movt	r1, #1
   12138:	mov	r2, #7
   1213c:	sub	r0, r5, #6
   12140:	bl	11178 <strncmp@plt>
   12144:	cmp	r0, #0
   12148:	bne	1217c <__assert_fail@plt+0xfd4>
   1214c:	movw	r1, #37052	; 0x90bc
   12150:	movt	r1, #1
   12154:	mov	r2, #3
   12158:	mov	r0, r6
   1215c:	bl	11178 <strncmp@plt>
   12160:	cmp	r0, #0
   12164:	movne	r4, r6
   12168:	bne	1217c <__assert_fail@plt+0xfd4>
   1216c:	add	r4, r5, #4
   12170:	movw	r3, #41312	; 0xa160
   12174:	movt	r3, #2
   12178:	str	r4, [r3]
   1217c:	movw	r2, #41352	; 0xa188
   12180:	movt	r2, #2
   12184:	ldr	r6, [sp, #8]
   12188:	movw	r3, #41316	; 0xa164
   1218c:	movt	r3, #2
   12190:	str	r4, [r2]
   12194:	str	r4, [r3]
   12198:	ldrd	r4, [sp]
   1219c:	add	sp, sp, #12
   121a0:	pop	{pc}		; (ldr pc, [sp], #4)
   121a4:	movw	r3, #41328	; 0xa170
   121a8:	movt	r3, #2
   121ac:	movw	r0, #36988	; 0x907c
   121b0:	movt	r0, #1
   121b4:	ldr	r3, [r3]
   121b8:	mov	r2, #55	; 0x37
   121bc:	mov	r1, #1
   121c0:	bl	10fbc <fwrite@plt>
   121c4:	bl	11184 <abort@plt>
   121c8:	mov	r2, #5
   121cc:	strd	r4, [sp, #-16]!
   121d0:	mov	r5, r0
   121d4:	str	r6, [sp, #8]
   121d8:	mov	r6, r1
   121dc:	mov	r1, r0
   121e0:	mov	r0, #0
   121e4:	str	lr, [sp, #12]
   121e8:	bl	10f74 <dcgettext@plt>
   121ec:	cmp	r5, r0
   121f0:	mov	r4, r0
   121f4:	beq	1220c <__assert_fail@plt+0x1064>
   121f8:	mov	r0, r4
   121fc:	ldrd	r4, [sp]
   12200:	ldr	r6, [sp, #8]
   12204:	add	sp, sp, #12
   12208:	pop	{pc}		; (ldr pc, [sp], #4)
   1220c:	bl	18424 <__assert_fail@plt+0x727c>
   12210:	ldrb	r3, [r0]
   12214:	bic	r3, r3, #32
   12218:	cmp	r3, #85	; 0x55
   1221c:	bne	12284 <__assert_fail@plt+0x10dc>
   12220:	ldrb	r3, [r0, #1]
   12224:	bic	r3, r3, #32
   12228:	cmp	r3, #84	; 0x54
   1222c:	bne	12304 <__assert_fail@plt+0x115c>
   12230:	ldrb	r3, [r0, #2]
   12234:	bic	r3, r3, #32
   12238:	cmp	r3, #70	; 0x46
   1223c:	bne	12304 <__assert_fail@plt+0x115c>
   12240:	ldrb	r3, [r0, #3]
   12244:	cmp	r3, #45	; 0x2d
   12248:	bne	12304 <__assert_fail@plt+0x115c>
   1224c:	ldrb	r3, [r0, #4]
   12250:	cmp	r3, #56	; 0x38
   12254:	bne	12304 <__assert_fail@plt+0x115c>
   12258:	ldrb	r3, [r0, #5]
   1225c:	cmp	r3, #0
   12260:	bne	12304 <__assert_fail@plt+0x115c>
   12264:	ldrb	r2, [r4]
   12268:	movw	r3, #37144	; 0x9118
   1226c:	movt	r3, #1
   12270:	movw	r4, #37156	; 0x9124
   12274:	movt	r4, #1
   12278:	cmp	r2, #96	; 0x60
   1227c:	movne	r4, r3
   12280:	b	121f8 <__assert_fail@plt+0x1050>
   12284:	cmp	r3, #71	; 0x47
   12288:	bne	12304 <__assert_fail@plt+0x115c>
   1228c:	ldrb	r3, [r0, #1]
   12290:	bic	r3, r3, #32
   12294:	cmp	r3, #66	; 0x42
   12298:	bne	12304 <__assert_fail@plt+0x115c>
   1229c:	ldrb	r3, [r0, #2]
   122a0:	cmp	r3, #49	; 0x31
   122a4:	bne	12304 <__assert_fail@plt+0x115c>
   122a8:	ldrb	r3, [r0, #3]
   122ac:	cmp	r3, #56	; 0x38
   122b0:	bne	12304 <__assert_fail@plt+0x115c>
   122b4:	ldrb	r3, [r0, #4]
   122b8:	cmp	r3, #48	; 0x30
   122bc:	bne	12304 <__assert_fail@plt+0x115c>
   122c0:	ldrb	r3, [r0, #5]
   122c4:	cmp	r3, #51	; 0x33
   122c8:	bne	12304 <__assert_fail@plt+0x115c>
   122cc:	ldrb	r3, [r0, #6]
   122d0:	cmp	r3, #48	; 0x30
   122d4:	bne	12304 <__assert_fail@plt+0x115c>
   122d8:	ldrb	r3, [r0, #7]
   122dc:	cmp	r3, #0
   122e0:	bne	12304 <__assert_fail@plt+0x115c>
   122e4:	ldrb	r2, [r4]
   122e8:	movw	r3, #37148	; 0x911c
   122ec:	movt	r3, #1
   122f0:	movw	r4, #37152	; 0x9120
   122f4:	movt	r4, #1
   122f8:	cmp	r2, #96	; 0x60
   122fc:	movne	r4, r3
   12300:	b	121f8 <__assert_fail@plt+0x1050>
   12304:	movw	r3, #37160	; 0x9128
   12308:	movt	r3, #1
   1230c:	cmp	r6, #9
   12310:	movw	r4, #37140	; 0x9114
   12314:	movt	r4, #1
   12318:	movne	r4, r3
   1231c:	b	121f8 <__assert_fail@plt+0x1050>
   12320:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12324:	strd	r6, [sp, #8]
   12328:	strd	r8, [sp, #16]
   1232c:	mov	r8, r3
   12330:	strd	sl, [sp, #24]
   12334:	mov	fp, r0
   12338:	mov	sl, r1
   1233c:	str	lr, [sp, #32]
   12340:	sub	sp, sp, #140	; 0x8c
   12344:	ldr	r3, [sp, #180]	; 0xb4
   12348:	str	r2, [sp, #28]
   1234c:	and	r4, r3, #2
   12350:	ubfx	r3, r3, #1, #1
   12354:	str	r3, [sp, #44]	; 0x2c
   12358:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   1235c:	ldr	r3, [sp, #176]	; 0xb0
   12360:	str	r0, [sp, #76]	; 0x4c
   12364:	cmp	r3, #10
   12368:	ldrls	pc, [pc, r3, lsl #2]
   1236c:	b	13d08 <__assert_fail@plt+0x2b60>
   12370:	strdeq	r2, [r1], -r0
   12374:	andeq	r2, r1, ip, lsl #18
   12378:	andeq	r2, r1, r8, lsl #29
   1237c:	andeq	r2, r1, r8, ror r9
   12380:	strdeq	r2, [r1], -r8
   12384:	andeq	r2, r1, r4, ror r7
   12388:	andeq	r2, r1, ip, asr #16
   1238c:			; <UNDEFINED> instruction: 0x000128b4
   12390:	muleq	r1, ip, r3
   12394:	muleq	r1, ip, r3
   12398:	muleq	r1, ip, r3
   1239c:	ldr	r3, [sp, #176]	; 0xb0
   123a0:	cmp	r3, #10
   123a4:	beq	123d0 <__assert_fail@plt+0x1228>
   123a8:	mov	r1, r3
   123ac:	movw	r0, #37164	; 0x912c
   123b0:	movt	r0, #1
   123b4:	bl	121c8 <__assert_fail@plt+0x1020>
   123b8:	str	r0, [sp, #188]	; 0xbc
   123bc:	movw	r0, #37160	; 0x9128
   123c0:	movt	r0, #1
   123c4:	ldr	r1, [sp, #176]	; 0xb0
   123c8:	bl	121c8 <__assert_fail@plt+0x1020>
   123cc:	str	r0, [sp, #192]	; 0xc0
   123d0:	cmp	r4, #0
   123d4:	movne	r4, #0
   123d8:	beq	13a94 <__assert_fail@plt+0x28ec>
   123dc:	mov	r5, #0
   123e0:	ldr	r0, [sp, #192]	; 0xc0
   123e4:	mov	r9, r5
   123e8:	str	r5, [sp, #64]	; 0x40
   123ec:	bl	11088 <strlen@plt>
   123f0:	mov	r3, #1
   123f4:	ldr	r2, [sp, #44]	; 0x2c
   123f8:	cmp	r0, r5
   123fc:	moveq	r2, r5
   12400:	str	r3, [sp, #32]
   12404:	str	r3, [sp, #48]	; 0x30
   12408:	str	r5, [sp, #52]	; 0x34
   1240c:	str	r3, [sp, #60]	; 0x3c
   12410:	ldr	r3, [sp, #180]	; 0xb4
   12414:	str	r0, [sp, #56]	; 0x38
   12418:	str	r5, [sp, #68]	; 0x44
   1241c:	str	r5, [sp, #80]	; 0x50
   12420:	str	r5, [sp, #84]	; 0x54
   12424:	and	r3, r3, #1
   12428:	str	r2, [sp, #88]	; 0x58
   1242c:	str	r3, [sp, #92]	; 0x5c
   12430:	ldr	r3, [sp, #180]	; 0xb4
   12434:	and	r3, r3, #4
   12438:	str	r3, [sp, #96]	; 0x60
   1243c:	ldr	r3, [sp, #192]	; 0xc0
   12440:	str	r3, [sp, #72]	; 0x48
   12444:	mov	r3, fp
   12448:	mov	r7, #0
   1244c:	mov	fp, r9
   12450:	mov	r9, r3
   12454:	cmn	r8, #1
   12458:	beq	12a5c <__assert_fail@plt+0x18b4>
   1245c:	subs	r6, r8, r7
   12460:	movne	r6, #1
   12464:	cmp	r6, #0
   12468:	beq	12a74 <__assert_fail@plt+0x18cc>
   1246c:	ldr	r0, [sp, #28]
   12470:	ldr	r3, [sp, #48]	; 0x30
   12474:	cmp	r3, #0
   12478:	add	r3, r0, r7
   1247c:	str	r3, [sp, #36]	; 0x24
   12480:	beq	12f00 <__assert_fail@plt+0x1d58>
   12484:	ldr	r2, [sp, #56]	; 0x38
   12488:	cmp	r2, #0
   1248c:	beq	13400 <__assert_fail@plt+0x2258>
   12490:	cmp	r2, #1
   12494:	mov	r3, r2
   12498:	movls	r3, #0
   1249c:	movhi	r3, #1
   124a0:	cmn	r8, #1
   124a4:	add	r5, r7, r2
   124a8:	movne	r3, #0
   124ac:	cmp	r3, #0
   124b0:	beq	124bc <__assert_fail@plt+0x1314>
   124b4:	bl	11088 <strlen@plt>
   124b8:	mov	r8, r0
   124bc:	cmp	r5, r8
   124c0:	bhi	13400 <__assert_fail@plt+0x2258>
   124c4:	ldr	r0, [sp, #36]	; 0x24
   124c8:	ldr	r2, [sp, #56]	; 0x38
   124cc:	ldr	r1, [sp, #72]	; 0x48
   124d0:	bl	10f5c <memcmp@plt>
   124d4:	cmp	r0, #0
   124d8:	bne	13400 <__assert_fail@plt+0x2258>
   124dc:	ldr	r3, [sp, #44]	; 0x2c
   124e0:	cmp	r3, #0
   124e4:	bne	13bac <__assert_fail@plt+0x2a04>
   124e8:	ldr	r3, [sp, #36]	; 0x24
   124ec:	ldrb	r5, [r3]
   124f0:	cmp	r5, #126	; 0x7e
   124f4:	ldrls	pc, [pc, r5, lsl #2]
   124f8:	b	13994 <__assert_fail@plt+0x27ec>
   124fc:	ldrdeq	r2, [r1], -r0
   12500:	muleq	r1, r4, r9
   12504:	muleq	r1, r4, r9
   12508:	muleq	r1, r4, r9
   1250c:	muleq	r1, r4, r9
   12510:	muleq	r1, r4, r9
   12514:	muleq	r1, r4, r9
   12518:	andeq	r2, r1, r8, lsr #22
   1251c:	andeq	r2, r1, r0, lsr #22
   12520:	andeq	r2, r1, r0, lsr fp
   12524:			; <UNDEFINED> instruction: 0x00012cb4
   12528:	andeq	r2, r1, r4, lsr #25
   1252c:	andeq	r2, r1, ip, asr #19
   12530:	andeq	r2, r1, r0, lsl #25
   12534:	muleq	r1, r4, r9
   12538:	muleq	r1, r4, r9
   1253c:	muleq	r1, r4, r9
   12540:	muleq	r1, r4, r9
   12544:	muleq	r1, r4, r9
   12548:	muleq	r1, r4, r9
   1254c:	muleq	r1, r4, r9
   12550:	muleq	r1, r4, r9
   12554:	muleq	r1, r4, r9
   12558:	muleq	r1, r4, r9
   1255c:	muleq	r1, r4, r9
   12560:	muleq	r1, r4, r9
   12564:	muleq	r1, r4, r9
   12568:	muleq	r1, r4, r9
   1256c:	muleq	r1, r4, r9
   12570:	muleq	r1, r4, r9
   12574:	muleq	r1, r4, r9
   12578:	muleq	r1, r4, r9
   1257c:	andeq	r2, r1, ip, lsr #26
   12580:	andeq	r2, r1, r0, lsr #26
   12584:	andeq	r2, r1, r0, lsr #26
   12588:	andeq	r2, r1, r4, lsl sp
   1258c:	andeq	r2, r1, r0, lsr #26
   12590:	strdeq	r2, [r1], -r8
   12594:	andeq	r2, r1, r0, lsr #26
   12598:	andeq	r2, r1, r8, ror #28
   1259c:	andeq	r2, r1, r0, lsr #26
   125a0:	andeq	r2, r1, r0, lsr #26
   125a4:	andeq	r2, r1, r0, lsr #26
   125a8:	strdeq	r2, [r1], -r8
   125ac:	strdeq	r2, [r1], -r8
   125b0:	strdeq	r2, [r1], -r8
   125b4:	strdeq	r2, [r1], -r8
   125b8:	strdeq	r2, [r1], -r8
   125bc:	strdeq	r2, [r1], -r8
   125c0:	strdeq	r2, [r1], -r8
   125c4:	strdeq	r2, [r1], -r8
   125c8:	strdeq	r2, [r1], -r8
   125cc:	strdeq	r2, [r1], -r8
   125d0:	strdeq	r2, [r1], -r8
   125d4:	strdeq	r2, [r1], -r8
   125d8:	strdeq	r2, [r1], -r8
   125dc:	strdeq	r2, [r1], -r8
   125e0:	strdeq	r2, [r1], -r8
   125e4:	strdeq	r2, [r1], -r8
   125e8:	andeq	r2, r1, r0, lsr #26
   125ec:	andeq	r2, r1, r0, lsr #26
   125f0:	andeq	r2, r1, r0, lsr #26
   125f4:	andeq	r2, r1, r0, lsr #26
   125f8:	andeq	r2, r1, r8, lsl lr
   125fc:	muleq	r1, r4, r9
   12600:	strdeq	r2, [r1], -r8
   12604:	strdeq	r2, [r1], -r8
   12608:	strdeq	r2, [r1], -r8
   1260c:	strdeq	r2, [r1], -r8
   12610:	strdeq	r2, [r1], -r8
   12614:	strdeq	r2, [r1], -r8
   12618:	strdeq	r2, [r1], -r8
   1261c:	strdeq	r2, [r1], -r8
   12620:	strdeq	r2, [r1], -r8
   12624:	strdeq	r2, [r1], -r8
   12628:	strdeq	r2, [r1], -r8
   1262c:	strdeq	r2, [r1], -r8
   12630:	strdeq	r2, [r1], -r8
   12634:	strdeq	r2, [r1], -r8
   12638:	strdeq	r2, [r1], -r8
   1263c:	strdeq	r2, [r1], -r8
   12640:	strdeq	r2, [r1], -r8
   12644:	strdeq	r2, [r1], -r8
   12648:	strdeq	r2, [r1], -r8
   1264c:	strdeq	r2, [r1], -r8
   12650:	strdeq	r2, [r1], -r8
   12654:	strdeq	r2, [r1], -r8
   12658:	strdeq	r2, [r1], -r8
   1265c:	strdeq	r2, [r1], -r8
   12660:	strdeq	r2, [r1], -r8
   12664:	strdeq	r2, [r1], -r8
   12668:	andeq	r2, r1, r0, lsr #26
   1266c:			; <UNDEFINED> instruction: 0x00012dbc
   12670:	strdeq	r2, [r1], -r8
   12674:	andeq	r2, r1, r0, lsr #26
   12678:	strdeq	r2, [r1], -r8
   1267c:	andeq	r2, r1, r0, lsr #26
   12680:	strdeq	r2, [r1], -r8
   12684:	strdeq	r2, [r1], -r8
   12688:	strdeq	r2, [r1], -r8
   1268c:	strdeq	r2, [r1], -r8
   12690:	strdeq	r2, [r1], -r8
   12694:	strdeq	r2, [r1], -r8
   12698:	strdeq	r2, [r1], -r8
   1269c:	strdeq	r2, [r1], -r8
   126a0:	strdeq	r2, [r1], -r8
   126a4:	strdeq	r2, [r1], -r8
   126a8:	strdeq	r2, [r1], -r8
   126ac:	strdeq	r2, [r1], -r8
   126b0:	strdeq	r2, [r1], -r8
   126b4:	strdeq	r2, [r1], -r8
   126b8:	strdeq	r2, [r1], -r8
   126bc:	strdeq	r2, [r1], -r8
   126c0:	strdeq	r2, [r1], -r8
   126c4:	strdeq	r2, [r1], -r8
   126c8:	strdeq	r2, [r1], -r8
   126cc:	strdeq	r2, [r1], -r8
   126d0:	strdeq	r2, [r1], -r8
   126d4:	strdeq	r2, [r1], -r8
   126d8:	strdeq	r2, [r1], -r8
   126dc:	strdeq	r2, [r1], -r8
   126e0:	strdeq	r2, [r1], -r8
   126e4:	strdeq	r2, [r1], -r8
   126e8:	andeq	r2, r1, r8, asr #25
   126ec:	andeq	r2, r1, r0, lsr #26
   126f0:	andeq	r2, r1, r8, asr #25
   126f4:	andeq	r2, r1, r4, lsl sp
   126f8:	ldr	r3, [sp, #180]	; 0xb4
   126fc:	cmp	r4, #0
   12700:	and	r3, r3, #1
   12704:	str	r3, [sp, #92]	; 0x5c
   12708:	ldr	r3, [sp, #180]	; 0xb4
   1270c:	and	r3, r3, #4
   12710:	str	r3, [sp, #96]	; 0x60
   12714:	moveq	r3, #1
   12718:	streq	r3, [sp, #60]	; 0x3c
   1271c:	beq	12eac <__assert_fail@plt+0x1d04>
   12720:	mov	r3, #0
   12724:	mov	r2, #1
   12728:	mov	r4, r3
   1272c:	mov	r9, r3
   12730:	str	r2, [sp, #32]
   12734:	str	r2, [sp, #44]	; 0x2c
   12738:	str	r3, [sp, #48]	; 0x30
   1273c:	str	r2, [sp, #52]	; 0x34
   12740:	str	r2, [sp, #56]	; 0x38
   12744:	str	r3, [sp, #60]	; 0x3c
   12748:	str	r2, [sp, #64]	; 0x40
   1274c:	str	r2, [sp, #68]	; 0x44
   12750:	str	r3, [sp, #80]	; 0x50
   12754:	str	r3, [sp, #84]	; 0x54
   12758:	str	r3, [sp, #88]	; 0x58
   1275c:	movw	r3, #37160	; 0x9128
   12760:	movt	r3, #1
   12764:	str	r3, [sp, #72]	; 0x48
   12768:	mov	r3, #2
   1276c:	str	r3, [sp, #176]	; 0xb0
   12770:	b	12444 <__assert_fail@plt+0x129c>
   12774:	ldr	r3, [sp, #180]	; 0xb4
   12778:	cmp	r4, #0
   1277c:	and	r3, r3, #1
   12780:	str	r3, [sp, #92]	; 0x5c
   12784:	ldr	r3, [sp, #180]	; 0xb4
   12788:	and	r3, r3, #4
   1278c:	str	r3, [sp, #96]	; 0x60
   12790:	bne	13b64 <__assert_fail@plt+0x29bc>
   12794:	cmp	sl, #0
   12798:	beq	13910 <__assert_fail@plt+0x2768>
   1279c:	mov	r3, #34	; 0x22
   127a0:	mov	r2, r4
   127a4:	mov	r1, #1
   127a8:	mov	r9, r2
   127ac:	strb	r3, [fp]
   127b0:	movw	r3, #37140	; 0x9114
   127b4:	movt	r3, #1
   127b8:	mov	r4, r1
   127bc:	str	r1, [sp, #32]
   127c0:	str	r2, [sp, #44]	; 0x2c
   127c4:	str	r1, [sp, #48]	; 0x30
   127c8:	str	r2, [sp, #52]	; 0x34
   127cc:	str	r1, [sp, #56]	; 0x38
   127d0:	str	r1, [sp, #60]	; 0x3c
   127d4:	str	r2, [sp, #64]	; 0x40
   127d8:	str	r2, [sp, #68]	; 0x44
   127dc:	str	r3, [sp, #72]	; 0x48
   127e0:	str	r2, [sp, #80]	; 0x50
   127e4:	str	r2, [sp, #84]	; 0x54
   127e8:	str	r2, [sp, #88]	; 0x58
   127ec:	b	12444 <__assert_fail@plt+0x129c>
   127f0:	mov	r3, #0
   127f4:	mov	r2, #1
   127f8:	mov	r9, r3
   127fc:	str	r2, [sp, #32]
   12800:	str	r3, [sp, #44]	; 0x2c
   12804:	str	r3, [sp, #48]	; 0x30
   12808:	str	r3, [sp, #52]	; 0x34
   1280c:	str	r3, [sp, #60]	; 0x3c
   12810:	strd	r2, [sp, #64]	; 0x40
   12814:	str	r3, [sp, #72]	; 0x48
   12818:	str	r3, [sp, #80]	; 0x50
   1281c:	str	r3, [sp, #88]	; 0x58
   12820:	ldr	r3, [sp, #180]	; 0xb4
   12824:	and	r3, r3, r2
   12828:	str	r3, [sp, #92]	; 0x5c
   1282c:	ldr	r3, [sp, #180]	; 0xb4
   12830:	and	r3, r3, #4
   12834:	str	r3, [sp, #96]	; 0x60
   12838:	ldr	r3, [sp, #176]	; 0xb0
   1283c:	mov	r4, r3
   12840:	str	r3, [sp, #56]	; 0x38
   12844:	str	r3, [sp, #84]	; 0x54
   12848:	b	12444 <__assert_fail@plt+0x129c>
   1284c:	mov	r3, #1
   12850:	mov	r4, #0
   12854:	mov	r9, r4
   12858:	str	r3, [sp, #32]
   1285c:	str	r3, [sp, #44]	; 0x2c
   12860:	str	r3, [sp, #48]	; 0x30
   12864:	str	r4, [sp, #52]	; 0x34
   12868:	str	r3, [sp, #56]	; 0x38
   1286c:	str	r3, [sp, #60]	; 0x3c
   12870:	str	r3, [sp, #88]	; 0x58
   12874:	movw	r3, #37140	; 0x9114
   12878:	movt	r3, #1
   1287c:	str	r4, [sp, #64]	; 0x40
   12880:	str	r4, [sp, #68]	; 0x44
   12884:	str	r3, [sp, #72]	; 0x48
   12888:	ldr	r3, [sp, #180]	; 0xb4
   1288c:	str	r4, [sp, #80]	; 0x50
   12890:	str	r4, [sp, #84]	; 0x54
   12894:	and	r3, r3, #1
   12898:	str	r3, [sp, #92]	; 0x5c
   1289c:	ldr	r3, [sp, #180]	; 0xb4
   128a0:	and	r3, r3, #4
   128a4:	str	r3, [sp, #96]	; 0x60
   128a8:	mov	r3, #5
   128ac:	str	r3, [sp, #176]	; 0xb0
   128b0:	b	12444 <__assert_fail@plt+0x129c>
   128b4:	mov	r3, #1
   128b8:	mov	r4, #0
   128bc:	mov	r9, r4
   128c0:	str	r3, [sp, #32]
   128c4:	str	r4, [sp, #44]	; 0x2c
   128c8:	str	r3, [sp, #48]	; 0x30
   128cc:	str	r3, [sp, #60]	; 0x3c
   128d0:	ldr	r3, [sp, #180]	; 0xb4
   128d4:	str	r4, [sp, #52]	; 0x34
   128d8:	str	r4, [sp, #56]	; 0x38
   128dc:	str	r4, [sp, #64]	; 0x40
   128e0:	str	r4, [sp, #68]	; 0x44
   128e4:	and	r3, r3, #1
   128e8:	str	r4, [sp, #72]	; 0x48
   128ec:	str	r4, [sp, #80]	; 0x50
   128f0:	str	r4, [sp, #84]	; 0x54
   128f4:	str	r3, [sp, #92]	; 0x5c
   128f8:	ldr	r3, [sp, #180]	; 0xb4
   128fc:	str	r4, [sp, #88]	; 0x58
   12900:	and	r3, r3, #4
   12904:	str	r3, [sp, #96]	; 0x60
   12908:	b	12444 <__assert_fail@plt+0x129c>
   1290c:	mov	r3, #0
   12910:	mov	r2, #1
   12914:	ldr	r1, [sp, #176]	; 0xb0
   12918:	mov	r4, r3
   1291c:	mov	r9, r3
   12920:	movw	r3, #37160	; 0x9128
   12924:	movt	r3, #1
   12928:	str	r2, [sp, #32]
   1292c:	str	r2, [sp, #44]	; 0x2c
   12930:	str	r4, [sp, #48]	; 0x30
   12934:	strd	r2, [sp, #68]	; 0x44
   12938:	ldr	r3, [sp, #180]	; 0xb4
   1293c:	str	r2, [sp, #52]	; 0x34
   12940:	str	r1, [sp, #56]	; 0x38
   12944:	str	r4, [sp, #60]	; 0x3c
   12948:	str	r2, [sp, #64]	; 0x40
   1294c:	and	r3, r3, r2
   12950:	str	r4, [sp, #80]	; 0x50
   12954:	str	r4, [sp, #84]	; 0x54
   12958:	str	r4, [sp, #88]	; 0x58
   1295c:	str	r3, [sp, #92]	; 0x5c
   12960:	ldr	r3, [sp, #180]	; 0xb4
   12964:	and	r3, r3, #4
   12968:	str	r3, [sp, #96]	; 0x60
   1296c:	mov	r3, #2
   12970:	str	r3, [sp, #176]	; 0xb0
   12974:	b	12444 <__assert_fail@plt+0x129c>
   12978:	mov	r3, #1
   1297c:	mov	r2, #0
   12980:	mov	r4, r2
   12984:	mov	r9, r2
   12988:	str	r3, [sp, #32]
   1298c:	str	r3, [sp, #44]	; 0x2c
   12990:	str	r2, [sp, #48]	; 0x30
   12994:	str	r3, [sp, #52]	; 0x34
   12998:	str	r3, [sp, #56]	; 0x38
   1299c:	str	r3, [sp, #60]	; 0x3c
   129a0:	str	r3, [sp, #64]	; 0x40
   129a4:	str	r3, [sp, #68]	; 0x44
   129a8:	str	r3, [sp, #88]	; 0x58
   129ac:	movw	r3, #37160	; 0x9128
   129b0:	movt	r3, #1
   129b4:	str	r3, [sp, #72]	; 0x48
   129b8:	ldr	r3, [sp, #180]	; 0xb4
   129bc:	str	r2, [sp, #80]	; 0x50
   129c0:	str	r2, [sp, #84]	; 0x54
   129c4:	and	r3, r3, #1
   129c8:	b	1295c <__assert_fail@plt+0x17b4>
   129cc:	mov	r5, #102	; 0x66
   129d0:	mov	r6, #0
   129d4:	ldr	r3, [sp, #44]	; 0x2c
   129d8:	cmp	r3, #0
   129dc:	bne	1388c <__assert_fail@plt+0x26e4>
   129e0:	ldr	r2, [sp, #52]	; 0x34
   129e4:	eor	r3, fp, #1
   129e8:	ands	r3, r2, r3
   129ec:	beq	12a24 <__assert_fail@plt+0x187c>
   129f0:	cmp	sl, r4
   129f4:	mov	fp, r3
   129f8:	movhi	r2, #39	; 0x27
   129fc:	strbhi	r2, [r9, r4]
   12a00:	add	r2, r4, #1
   12a04:	cmp	sl, r2
   12a08:	movhi	r1, #36	; 0x24
   12a0c:	strbhi	r1, [r9, r2]
   12a10:	add	r2, r4, #2
   12a14:	add	r4, r4, #3
   12a18:	cmp	sl, r2
   12a1c:	movhi	r1, #39	; 0x27
   12a20:	strbhi	r1, [r9, r2]
   12a24:	cmp	sl, r4
   12a28:	add	r7, r7, #1
   12a2c:	movhi	r3, #92	; 0x5c
   12a30:	strbhi	r3, [r9, r4]
   12a34:	add	r4, r4, #1
   12a38:	cmp	r4, sl
   12a3c:	ldr	r3, [sp, #32]
   12a40:	strbcc	r5, [r9, r4]
   12a44:	cmp	r6, #0
   12a48:	add	r4, r4, #1
   12a4c:	moveq	r3, #0
   12a50:	cmn	r8, #1
   12a54:	str	r3, [sp, #32]
   12a58:	bne	1245c <__assert_fail@plt+0x12b4>
   12a5c:	ldr	r3, [sp, #28]
   12a60:	ldrb	r6, [r3, r7]
   12a64:	adds	r6, r6, #0
   12a68:	movne	r6, #1
   12a6c:	cmp	r6, #0
   12a70:	bne	1246c <__assert_fail@plt+0x12c4>
   12a74:	mov	r3, r9
   12a78:	mov	r9, fp
   12a7c:	mov	fp, r3
   12a80:	ldr	r3, [sp, #68]	; 0x44
   12a84:	cmp	r4, #0
   12a88:	movne	r3, #0
   12a8c:	cmp	r3, #0
   12a90:	bne	13c84 <__assert_fail@plt+0x2adc>
   12a94:	ldr	r3, [sp, #44]	; 0x2c
   12a98:	ldr	r2, [sp, #52]	; 0x34
   12a9c:	eor	r3, r3, #1
   12aa0:	ands	r2, r3, r2
   12aa4:	beq	13bbc <__assert_fail@plt+0x2a14>
   12aa8:	ldr	r3, [sp, #80]	; 0x50
   12aac:	cmp	r3, #0
   12ab0:	beq	13bc0 <__assert_fail@plt+0x2a18>
   12ab4:	ldr	r3, [sp, #32]
   12ab8:	cmp	r3, #0
   12abc:	bne	13c34 <__assert_fail@plt+0x2a8c>
   12ac0:	ldr	r3, [sp, #84]	; 0x54
   12ac4:	adds	r3, r3, #0
   12ac8:	movne	r3, #1
   12acc:	cmp	sl, #0
   12ad0:	movne	r3, #0
   12ad4:	cmp	r3, #0
   12ad8:	ldreq	r2, [sp, #80]	; 0x50
   12adc:	beq	13bc0 <__assert_fail@plt+0x2a18>
   12ae0:	ldr	r2, [sp, #84]	; 0x54
   12ae4:	mov	sl, r2
   12ae8:	mov	r0, #0
   12aec:	mov	r4, #1
   12af0:	mov	r1, #39	; 0x27
   12af4:	str	r0, [sp, #44]	; 0x2c
   12af8:	strb	r1, [fp]
   12afc:	str	r0, [sp, #48]	; 0x30
   12b00:	str	r4, [sp, #52]	; 0x34
   12b04:	str	r4, [sp, #56]	; 0x38
   12b08:	str	r4, [sp, #64]	; 0x40
   12b0c:	str	r0, [sp, #68]	; 0x44
   12b10:	str	r3, [sp, #80]	; 0x50
   12b14:	str	r2, [sp, #84]	; 0x54
   12b18:	str	r0, [sp, #88]	; 0x58
   12b1c:	b	1275c <__assert_fail@plt+0x15b4>
   12b20:	mov	r5, #98	; 0x62
   12b24:	b	129d0 <__assert_fail@plt+0x1828>
   12b28:	mov	r5, #97	; 0x61
   12b2c:	b	129d0 <__assert_fail@plt+0x1828>
   12b30:	ldr	r3, [sp, #48]	; 0x30
   12b34:	str	r3, [sp, #40]	; 0x28
   12b38:	mov	r3, #116	; 0x74
   12b3c:	ldr	r2, [sp, #68]	; 0x44
   12b40:	cmp	r2, #0
   12b44:	bne	12d40 <__assert_fail@plt+0x1b98>
   12b48:	ldr	r2, [sp, #60]	; 0x3c
   12b4c:	cmp	r2, #0
   12b50:	bne	12c9c <__assert_fail@plt+0x1af4>
   12b54:	ldr	r3, [sp, #44]	; 0x2c
   12b58:	mov	r6, #0
   12b5c:	cmp	r3, #0
   12b60:	beq	12d0c <__assert_fail@plt+0x1b64>
   12b64:	mov	r3, fp
   12b68:	ldr	r2, [sp, #184]	; 0xb8
   12b6c:	cmp	r2, #0
   12b70:	beq	12b90 <__assert_fail@plt+0x19e8>
   12b74:	ubfx	r1, r5, #5, #8
   12b78:	mov	r0, r2
   12b7c:	and	r2, r5, #31
   12b80:	ldr	r1, [r0, r1, lsl #2]
   12b84:	lsr	r2, r1, r2
   12b88:	tst	r2, #1
   12b8c:	bne	129d4 <__assert_fail@plt+0x182c>
   12b90:	ldr	r2, [sp, #40]	; 0x28
   12b94:	cmp	r2, #0
   12b98:	addeq	r7, r7, #1
   12b9c:	bne	129d4 <__assert_fail@plt+0x182c>
   12ba0:	cmp	r3, #0
   12ba4:	beq	12a38 <__assert_fail@plt+0x1890>
   12ba8:	cmp	sl, r4
   12bac:	mov	fp, #0
   12bb0:	movhi	r3, #39	; 0x27
   12bb4:	strbhi	r3, [r9, r4]
   12bb8:	add	r3, r4, #1
   12bbc:	add	r4, r4, #2
   12bc0:	cmp	sl, r3
   12bc4:	movhi	r2, #39	; 0x27
   12bc8:	strbhi	r2, [r9, r3]
   12bcc:	b	12a38 <__assert_fail@plt+0x1890>
   12bd0:	ldr	r3, [sp, #48]	; 0x30
   12bd4:	str	r3, [sp, #40]	; 0x28
   12bd8:	eor	r3, fp, #1
   12bdc:	ldr	r2, [sp, #52]	; 0x34
   12be0:	ands	r2, r2, r3
   12be4:	beq	138a4 <__assert_fail@plt+0x26fc>
   12be8:	cmp	sl, r4
   12bec:	movhi	r3, #39	; 0x27
   12bf0:	strbhi	r3, [r9, r4]
   12bf4:	add	r3, r4, #1
   12bf8:	cmp	sl, r3
   12bfc:	movhi	r1, #36	; 0x24
   12c00:	strbhi	r1, [r9, r3]
   12c04:	add	r3, r4, #2
   12c08:	cmp	sl, r3
   12c0c:	movhi	r1, #39	; 0x27
   12c10:	strbhi	r1, [r9, r3]
   12c14:	add	r3, r4, #3
   12c18:	cmp	sl, r3
   12c1c:	bls	138f0 <__assert_fail@plt+0x2748>
   12c20:	mov	r4, r3
   12c24:	mov	r3, #92	; 0x5c
   12c28:	mov	fp, r2
   12c2c:	mov	r2, r4
   12c30:	strb	r3, [r9, r4]
   12c34:	ldr	r3, [sp, #176]	; 0xb0
   12c38:	add	r4, r4, #1
   12c3c:	cmp	r3, #2
   12c40:	beq	13958 <__assert_fail@plt+0x27b0>
   12c44:	add	r3, r7, #1
   12c48:	cmp	r3, r8
   12c4c:	bcs	12c64 <__assert_fail@plt+0x1abc>
   12c50:	ldr	r1, [sp, #28]
   12c54:	ldrb	r3, [r1, r3]
   12c58:	sub	r3, r3, #48	; 0x30
   12c5c:	cmp	r3, #9
   12c60:	bls	13968 <__assert_fail@plt+0x27c0>
   12c64:	mov	r3, #0
   12c68:	mov	r5, #48	; 0x30
   12c6c:	ldr	r6, [sp, #64]	; 0x40
   12c70:	cmp	r6, #0
   12c74:	beq	12b68 <__assert_fail@plt+0x19c0>
   12c78:	mov	r6, #0
   12c7c:	b	12b90 <__assert_fail@plt+0x19e8>
   12c80:	ldr	r3, [sp, #48]	; 0x30
   12c84:	str	r3, [sp, #40]	; 0x28
   12c88:	ldr	r2, [sp, #60]	; 0x3c
   12c8c:	mov	r5, #13
   12c90:	mov	r3, #114	; 0x72
   12c94:	cmp	r2, #0
   12c98:	beq	12b54 <__assert_fail@plt+0x19ac>
   12c9c:	mov	r5, r3
   12ca0:	b	129d0 <__assert_fail@plt+0x1828>
   12ca4:	ldr	r3, [sp, #48]	; 0x30
   12ca8:	str	r3, [sp, #40]	; 0x28
   12cac:	mov	r3, #118	; 0x76
   12cb0:	b	12b48 <__assert_fail@plt+0x19a0>
   12cb4:	ldr	r3, [sp, #48]	; 0x30
   12cb8:	str	r3, [sp, #40]	; 0x28
   12cbc:	mov	r5, #10
   12cc0:	mov	r3, #110	; 0x6e
   12cc4:	b	12b48 <__assert_fail@plt+0x19a0>
   12cc8:	ldr	r3, [sp, #48]	; 0x30
   12ccc:	cmn	r8, #1
   12cd0:	str	r3, [sp, #40]	; 0x28
   12cd4:	beq	1311c <__assert_fail@plt+0x1f74>
   12cd8:	subs	r3, r8, #1
   12cdc:	movne	r3, #1
   12ce0:	cmp	r3, #0
   12ce4:	bne	12cf0 <__assert_fail@plt+0x1b48>
   12ce8:	cmp	r7, #0
   12cec:	beq	12d34 <__assert_fail@plt+0x1b8c>
   12cf0:	mov	r6, #0
   12cf4:	ldr	r3, [sp, #64]	; 0x40
   12cf8:	cmp	r3, #0
   12cfc:	beq	12b64 <__assert_fail@plt+0x19bc>
   12d00:	ldr	r3, [sp, #44]	; 0x2c
   12d04:	cmp	r3, #0
   12d08:	bne	12b64 <__assert_fail@plt+0x19bc>
   12d0c:	mov	r3, fp
   12d10:	b	12b90 <__assert_fail@plt+0x19e8>
   12d14:	ldr	r3, [sp, #48]	; 0x30
   12d18:	str	r3, [sp, #40]	; 0x28
   12d1c:	b	12ce8 <__assert_fail@plt+0x1b40>
   12d20:	ldr	r3, [sp, #48]	; 0x30
   12d24:	str	r3, [sp, #40]	; 0x28
   12d28:	b	12cf0 <__assert_fail@plt+0x1b48>
   12d2c:	ldr	r6, [sp, #48]	; 0x30
   12d30:	str	r6, [sp, #40]	; 0x28
   12d34:	ldr	r3, [sp, #68]	; 0x44
   12d38:	cmp	r3, #0
   12d3c:	beq	12cf4 <__assert_fail@plt+0x1b4c>
   12d40:	mov	r3, #2
   12d44:	mov	fp, r9
   12d48:	str	r3, [sp, #176]	; 0xb0
   12d4c:	ldr	r3, [sp, #60]	; 0x3c
   12d50:	cmp	r3, #0
   12d54:	ldr	r3, [sp, #176]	; 0xb0
   12d58:	movne	r3, #4
   12d5c:	str	r3, [sp, #176]	; 0xb0
   12d60:	mov	lr, #0
   12d64:	mov	r0, fp
   12d68:	ldr	r2, [sp, #28]
   12d6c:	ldr	r3, [sp, #180]	; 0xb4
   12d70:	ldr	r1, [sp, #188]	; 0xbc
   12d74:	bic	ip, r3, #2
   12d78:	ldr	r3, [sp, #176]	; 0xb0
   12d7c:	stm	sp, {r3, ip, lr}
   12d80:	mov	r3, r8
   12d84:	ldr	ip, [sp, #192]	; 0xc0
   12d88:	str	r1, [sp, #12]
   12d8c:	mov	r1, sl
   12d90:	str	ip, [sp, #16]
   12d94:	bl	12320 <__assert_fail@plt+0x1178>
   12d98:	mov	r4, r0
   12d9c:	mov	r0, r4
   12da0:	add	sp, sp, #140	; 0x8c
   12da4:	ldrd	r4, [sp]
   12da8:	ldrd	r6, [sp, #8]
   12dac:	ldrd	r8, [sp, #16]
   12db0:	ldrd	sl, [sp, #24]
   12db4:	add	sp, sp, #32
   12db8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dbc:	ldr	r3, [sp, #48]	; 0x30
   12dc0:	str	r3, [sp, #40]	; 0x28
   12dc4:	ldr	r3, [sp, #176]	; 0xb0
   12dc8:	cmp	r3, #2
   12dcc:	beq	13144 <__assert_fail@plt+0x1f9c>
   12dd0:	ldr	r3, [sp, #88]	; 0x58
   12dd4:	cmp	r3, #0
   12dd8:	moveq	r5, #92	; 0x5c
   12ddc:	moveq	r3, r5
   12de0:	beq	12b48 <__assert_fail@plt+0x19a0>
   12de4:	add	r7, r7, #1
   12de8:	mov	r3, fp
   12dec:	mov	r6, #0
   12df0:	mov	r5, #92	; 0x5c
   12df4:	b	12ba0 <__assert_fail@plt+0x19f8>
   12df8:	ldr	r3, [sp, #64]	; 0x40
   12dfc:	cmp	r3, #0
   12e00:	bne	13c78 <__assert_fail@plt+0x2ad0>
   12e04:	ldr	r2, [sp, #48]	; 0x30
   12e08:	mov	r3, fp
   12e0c:	mov	r6, r2
   12e10:	str	r2, [sp, #40]	; 0x28
   12e14:	b	12b68 <__assert_fail@plt+0x19c0>
   12e18:	ldr	r3, [sp, #176]	; 0xb0
   12e1c:	cmp	r3, #2
   12e20:	beq	13bb4 <__assert_fail@plt+0x2a0c>
   12e24:	cmp	r3, #5
   12e28:	ldr	r3, [sp, #48]	; 0x30
   12e2c:	str	r3, [sp, #40]	; 0x28
   12e30:	bne	12e5c <__assert_fail@plt+0x1cb4>
   12e34:	ldr	r3, [sp, #96]	; 0x60
   12e38:	cmp	r3, #0
   12e3c:	beq	138b8 <__assert_fail@plt+0x2710>
   12e40:	add	r3, r7, #2
   12e44:	cmp	r3, r8
   12e48:	bcs	12e5c <__assert_fail@plt+0x1cb4>
   12e4c:	ldr	r2, [sp, #36]	; 0x24
   12e50:	ldrb	r5, [r2, #1]
   12e54:	cmp	r5, #63	; 0x3f
   12e58:	beq	139a0 <__assert_fail@plt+0x27f8>
   12e5c:	mov	r6, #0
   12e60:	mov	r5, #63	; 0x3f
   12e64:	b	12cf4 <__assert_fail@plt+0x1b4c>
   12e68:	ldr	r3, [sp, #176]	; 0xb0
   12e6c:	cmp	r3, #2
   12e70:	ldr	r3, [sp, #48]	; 0x30
   12e74:	beq	1365c <__assert_fail@plt+0x24b4>
   12e78:	mov	r5, #39	; 0x27
   12e7c:	str	r3, [sp, #40]	; 0x28
   12e80:	str	r6, [sp, #80]	; 0x50
   12e84:	b	12cf4 <__assert_fail@plt+0x1b4c>
   12e88:	ldr	r3, [sp, #180]	; 0xb4
   12e8c:	cmp	r4, #0
   12e90:	and	r3, r3, #1
   12e94:	str	r3, [sp, #92]	; 0x5c
   12e98:	ldr	r3, [sp, #180]	; 0xb4
   12e9c:	and	r3, r3, #4
   12ea0:	str	r3, [sp, #96]	; 0x60
   12ea4:	bne	13cc4 <__assert_fail@plt+0x2b1c>
   12ea8:	str	r4, [sp, #60]	; 0x3c
   12eac:	cmp	sl, #0
   12eb0:	bne	13ca8 <__assert_fail@plt+0x2b00>
   12eb4:	mov	r3, #1
   12eb8:	movw	r2, #37160	; 0x9128
   12ebc:	movt	r2, #1
   12ec0:	mov	r4, r3
   12ec4:	mov	r3, #2
   12ec8:	mov	r9, sl
   12ecc:	str	r4, [sp, #32]
   12ed0:	str	sl, [sp, #44]	; 0x2c
   12ed4:	str	sl, [sp, #48]	; 0x30
   12ed8:	str	r4, [sp, #52]	; 0x34
   12edc:	str	r4, [sp, #56]	; 0x38
   12ee0:	str	r4, [sp, #64]	; 0x40
   12ee4:	str	sl, [sp, #68]	; 0x44
   12ee8:	str	r2, [sp, #72]	; 0x48
   12eec:	str	sl, [sp, #80]	; 0x50
   12ef0:	str	sl, [sp, #84]	; 0x54
   12ef4:	str	sl, [sp, #88]	; 0x58
   12ef8:	str	r3, [sp, #176]	; 0xb0
   12efc:	b	12444 <__assert_fail@plt+0x129c>
   12f00:	ldrb	r5, [r0, r7]
   12f04:	cmp	r5, #126	; 0x7e
   12f08:	ldrls	pc, [pc, r5, lsl #2]
   12f0c:	b	13270 <__assert_fail@plt+0x20c8>
   12f10:	andeq	r3, r1, ip, lsr r2
   12f14:	andeq	r3, r1, r0, ror r2
   12f18:	andeq	r3, r1, r0, ror r2
   12f1c:	andeq	r3, r1, r0, ror r2
   12f20:	andeq	r3, r1, r0, ror r2
   12f24:	andeq	r3, r1, r0, ror r2
   12f28:	andeq	r3, r1, r0, ror r2
   12f2c:	andeq	r3, r1, ip, lsr #4
   12f30:	andeq	r3, r1, ip, lsl r2
   12f34:	andeq	r3, r1, r0, lsr #3
   12f38:	andeq	r3, r1, ip, lsl #4
   12f3c:	andeq	r3, r1, r0, lsl #3
   12f40:	andeq	r3, r1, r0, ror #4
   12f44:	andeq	r3, r1, ip, ror #3
   12f48:	andeq	r3, r1, r0, ror r2
   12f4c:	andeq	r3, r1, r0, ror r2
   12f50:	andeq	r3, r1, r0, ror r2
   12f54:	andeq	r3, r1, r0, ror r2
   12f58:	andeq	r3, r1, r0, ror r2
   12f5c:	andeq	r3, r1, r0, ror r2
   12f60:	andeq	r3, r1, r0, ror r2
   12f64:	andeq	r3, r1, r0, ror r2
   12f68:	andeq	r3, r1, r0, ror r2
   12f6c:	andeq	r3, r1, r0, ror r2
   12f70:	andeq	r3, r1, r0, ror r2
   12f74:	andeq	r3, r1, r0, ror r2
   12f78:	andeq	r3, r1, r0, ror r2
   12f7c:	andeq	r3, r1, r0, ror r2
   12f80:	andeq	r3, r1, r0, ror r2
   12f84:	andeq	r3, r1, r0, ror r2
   12f88:	andeq	r3, r1, r0, ror r2
   12f8c:	andeq	r3, r1, r0, ror r2
   12f90:	muleq	r1, r4, r1
   12f94:	strdeq	r3, [r1], -ip
   12f98:	strdeq	r3, [r1], -ip
   12f9c:	andeq	r3, r1, r4, ror r1
   12fa0:	strdeq	r3, [r1], -ip
   12fa4:	andeq	r3, r1, r8, ror #2
   12fa8:	strdeq	r3, [r1], -ip
   12fac:	ldrdeq	r3, [r1], -r8
   12fb0:	strdeq	r3, [r1], -ip
   12fb4:	strdeq	r3, [r1], -ip
   12fb8:	strdeq	r3, [r1], -ip
   12fbc:	andeq	r3, r1, r8, ror #2
   12fc0:	andeq	r3, r1, r8, ror #2
   12fc4:	andeq	r3, r1, r8, ror #2
   12fc8:	andeq	r3, r1, r8, ror #2
   12fcc:	andeq	r3, r1, r8, ror #2
   12fd0:	andeq	r3, r1, r8, ror #2
   12fd4:	andeq	r3, r1, r8, ror #2
   12fd8:	andeq	r3, r1, r8, ror #2
   12fdc:	andeq	r3, r1, r8, ror #2
   12fe0:	andeq	r3, r1, r8, ror #2
   12fe4:	andeq	r3, r1, r8, ror #2
   12fe8:	andeq	r3, r1, r8, ror #2
   12fec:	andeq	r3, r1, r8, ror #2
   12ff0:	andeq	r3, r1, r8, ror #2
   12ff4:	andeq	r3, r1, r8, ror #2
   12ff8:	andeq	r3, r1, r8, ror #2
   12ffc:	strdeq	r3, [r1], -ip
   13000:	strdeq	r3, [r1], -ip
   13004:	strdeq	r3, [r1], -ip
   13008:	strdeq	r3, [r1], -ip
   1300c:			; <UNDEFINED> instruction: 0x000131b0
   13010:	andeq	r3, r1, r0, ror r2
   13014:	andeq	r3, r1, r8, ror #2
   13018:	andeq	r3, r1, r8, ror #2
   1301c:	andeq	r3, r1, r8, ror #2
   13020:	andeq	r3, r1, r8, ror #2
   13024:	andeq	r3, r1, r8, ror #2
   13028:	andeq	r3, r1, r8, ror #2
   1302c:	andeq	r3, r1, r8, ror #2
   13030:	andeq	r3, r1, r8, ror #2
   13034:	andeq	r3, r1, r8, ror #2
   13038:	andeq	r3, r1, r8, ror #2
   1303c:	andeq	r3, r1, r8, ror #2
   13040:	andeq	r3, r1, r8, ror #2
   13044:	andeq	r3, r1, r8, ror #2
   13048:	andeq	r3, r1, r8, ror #2
   1304c:	andeq	r3, r1, r8, ror #2
   13050:	andeq	r3, r1, r8, ror #2
   13054:	andeq	r3, r1, r8, ror #2
   13058:	andeq	r3, r1, r8, ror #2
   1305c:	andeq	r3, r1, r8, ror #2
   13060:	andeq	r3, r1, r8, ror #2
   13064:	andeq	r3, r1, r8, ror #2
   13068:	andeq	r3, r1, r8, ror #2
   1306c:	andeq	r3, r1, r8, ror #2
   13070:	andeq	r3, r1, r8, ror #2
   13074:	andeq	r3, r1, r8, ror #2
   13078:	andeq	r3, r1, r8, ror #2
   1307c:	strdeq	r3, [r1], -ip
   13080:	andeq	r3, r1, r0, lsr r1
   13084:	andeq	r3, r1, r8, ror #2
   13088:	strdeq	r3, [r1], -ip
   1308c:	andeq	r3, r1, r8, ror #2
   13090:	strdeq	r3, [r1], -ip
   13094:	andeq	r3, r1, r8, ror #2
   13098:	andeq	r3, r1, r8, ror #2
   1309c:	andeq	r3, r1, r8, ror #2
   130a0:	andeq	r3, r1, r8, ror #2
   130a4:	andeq	r3, r1, r8, ror #2
   130a8:	andeq	r3, r1, r8, ror #2
   130ac:	andeq	r3, r1, r8, ror #2
   130b0:	andeq	r3, r1, r8, ror #2
   130b4:	andeq	r3, r1, r8, ror #2
   130b8:	andeq	r3, r1, r8, ror #2
   130bc:	andeq	r3, r1, r8, ror #2
   130c0:	andeq	r3, r1, r8, ror #2
   130c4:	andeq	r3, r1, r8, ror #2
   130c8:	andeq	r3, r1, r8, ror #2
   130cc:	andeq	r3, r1, r8, ror #2
   130d0:	andeq	r3, r1, r8, ror #2
   130d4:	andeq	r3, r1, r8, ror #2
   130d8:	andeq	r3, r1, r8, ror #2
   130dc:	andeq	r3, r1, r8, ror #2
   130e0:	andeq	r3, r1, r8, ror #2
   130e4:	andeq	r3, r1, r8, ror #2
   130e8:	andeq	r3, r1, r8, ror #2
   130ec:	andeq	r3, r1, r8, ror #2
   130f0:	andeq	r3, r1, r8, ror #2
   130f4:	andeq	r3, r1, r8, ror #2
   130f8:	andeq	r3, r1, r8, ror #2
   130fc:	andeq	r3, r1, ip, lsl #2
   13100:	strdeq	r3, [r1], -ip
   13104:	andeq	r3, r1, ip, lsl #2
   13108:	andeq	r3, r1, r4, ror r1
   1310c:	mov	r3, #0
   13110:	cmn	r8, #1
   13114:	str	r3, [sp, #40]	; 0x28
   13118:	bne	12cd8 <__assert_fail@plt+0x1b30>
   1311c:	ldr	r3, [sp, #28]
   13120:	ldrb	r3, [r3, #1]
   13124:	adds	r3, r3, #0
   13128:	movne	r3, #1
   1312c:	b	12ce0 <__assert_fail@plt+0x1b38>
   13130:	mov	r3, #0
   13134:	str	r3, [sp, #40]	; 0x28
   13138:	ldr	r3, [sp, #176]	; 0xb0
   1313c:	cmp	r3, #2
   13140:	bne	12dd0 <__assert_fail@plt+0x1c28>
   13144:	ldr	r3, [sp, #44]	; 0x2c
   13148:	cmp	r3, #0
   1314c:	bne	13a8c <__assert_fail@plt+0x28e4>
   13150:	mov	r6, r3
   13154:	add	r7, r7, #1
   13158:	mov	r3, fp
   1315c:	mov	r5, #92	; 0x5c
   13160:	b	12ba0 <__assert_fail@plt+0x19f8>
   13164:	ldr	r6, [sp, #48]	; 0x30
   13168:	mov	r3, #0
   1316c:	str	r3, [sp, #40]	; 0x28
   13170:	b	12cf4 <__assert_fail@plt+0x1b4c>
   13174:	mov	r3, #0
   13178:	str	r3, [sp, #40]	; 0x28
   1317c:	b	12ce8 <__assert_fail@plt+0x1b40>
   13180:	mov	r3, #0
   13184:	str	r3, [sp, #40]	; 0x28
   13188:	mov	r3, #118	; 0x76
   1318c:	b	12b48 <__assert_fail@plt+0x19a0>
   13190:	ldr	r6, [sp, #48]	; 0x30
   13194:	mov	r3, #0
   13198:	str	r3, [sp, #40]	; 0x28
   1319c:	b	12d34 <__assert_fail@plt+0x1b8c>
   131a0:	mov	r3, #0
   131a4:	str	r3, [sp, #40]	; 0x28
   131a8:	mov	r3, #116	; 0x74
   131ac:	b	12b3c <__assert_fail@plt+0x1994>
   131b0:	ldr	r3, [sp, #176]	; 0xb0
   131b4:	cmp	r3, #2
   131b8:	beq	136c8 <__assert_fail@plt+0x2520>
   131bc:	cmp	r3, #5
   131c0:	mov	r3, #0
   131c4:	str	r3, [sp, #40]	; 0x28
   131c8:	beq	12e34 <__assert_fail@plt+0x1c8c>
   131cc:	mov	r6, #0
   131d0:	mov	r5, #63	; 0x3f
   131d4:	b	12cf4 <__assert_fail@plt+0x1b4c>
   131d8:	ldr	r3, [sp, #176]	; 0xb0
   131dc:	cmp	r3, #2
   131e0:	beq	13650 <__assert_fail@plt+0x24a8>
   131e4:	mov	r3, #0
   131e8:	b	12e78 <__assert_fail@plt+0x1cd0>
   131ec:	mov	r3, #0
   131f0:	str	r3, [sp, #40]	; 0x28
   131f4:	mov	r3, #114	; 0x72
   131f8:	b	12b3c <__assert_fail@plt+0x1994>
   131fc:	mov	r3, #0
   13200:	mov	r6, r3
   13204:	str	r3, [sp, #40]	; 0x28
   13208:	b	12d34 <__assert_fail@plt+0x1b8c>
   1320c:	mov	r3, #0
   13210:	str	r3, [sp, #40]	; 0x28
   13214:	mov	r3, #110	; 0x6e
   13218:	b	12b3c <__assert_fail@plt+0x1994>
   1321c:	mov	r3, #0
   13220:	str	r3, [sp, #40]	; 0x28
   13224:	mov	r3, #98	; 0x62
   13228:	b	12b48 <__assert_fail@plt+0x19a0>
   1322c:	mov	r3, #0
   13230:	str	r3, [sp, #40]	; 0x28
   13234:	mov	r3, #97	; 0x61
   13238:	b	12b48 <__assert_fail@plt+0x19a0>
   1323c:	ldr	r3, [sp, #60]	; 0x3c
   13240:	cmp	r3, #0
   13244:	bne	13634 <__assert_fail@plt+0x248c>
   13248:	ldr	r3, [sp, #92]	; 0x5c
   1324c:	cmp	r3, #0
   13250:	addne	r7, r7, #1
   13254:	bne	12454 <__assert_fail@plt+0x12ac>
   13258:	str	r3, [sp, #40]	; 0x28
   1325c:	b	12b54 <__assert_fail@plt+0x19ac>
   13260:	mov	r3, #0
   13264:	str	r3, [sp, #40]	; 0x28
   13268:	mov	r3, #102	; 0x66
   1326c:	b	12b48 <__assert_fail@plt+0x19a0>
   13270:	mov	r3, #0
   13274:	str	r3, [sp, #40]	; 0x28
   13278:	ldr	r3, [sp, #76]	; 0x4c
   1327c:	cmp	r3, #1
   13280:	bne	136e8 <__assert_fail@plt+0x2540>
   13284:	bl	11064 <__ctype_b_loc@plt>
   13288:	ldr	r2, [r0]
   1328c:	sxth	r3, r5
   13290:	lsl	r3, r3, #1
   13294:	ldr	r1, [sp, #76]	; 0x4c
   13298:	ldrh	r3, [r2, r3]
   1329c:	mov	r0, r1
   132a0:	and	r3, r3, #16384	; 0x4000
   132a4:	cmp	r3, #0
   132a8:	ldr	r3, [sp, #60]	; 0x3c
   132ac:	movne	r6, #1
   132b0:	moveq	r6, #0
   132b4:	movne	r2, #0
   132b8:	andeq	r2, r3, #1
   132bc:	cmp	r2, #0
   132c0:	beq	12cf4 <__assert_fail@plt+0x1b4c>
   132c4:	ldr	r2, [sp, #60]	; 0x3c
   132c8:	mov	r6, #0
   132cc:	add	r1, r0, r7
   132d0:	mov	ip, #39	; 0x27
   132d4:	str	r6, [sp, #100]	; 0x64
   132d8:	mov	r0, #0
   132dc:	ldr	lr, [sp, #36]	; 0x24
   132e0:	str	r8, [sp, #36]	; 0x24
   132e4:	ldr	r6, [sp, #40]	; 0x28
   132e8:	ldr	r8, [sp, #44]	; 0x2c
   132ec:	b	1339c <__assert_fail@plt+0x21f4>
   132f0:	cmp	r8, #0
   132f4:	bne	138d0 <__assert_fail@plt+0x2728>
   132f8:	ldr	r0, [sp, #52]	; 0x34
   132fc:	eor	r3, fp, #1
   13300:	ands	r3, r0, r3
   13304:	beq	13334 <__assert_fail@plt+0x218c>
   13308:	cmp	sl, r4
   1330c:	add	r0, r4, #1
   13310:	strbhi	ip, [r9, r4]
   13314:	cmp	sl, r0
   13318:	movhi	fp, #36	; 0x24
   1331c:	strbhi	fp, [r9, r0]
   13320:	add	r0, r4, #2
   13324:	mov	fp, r3
   13328:	cmp	sl, r0
   1332c:	add	r4, r4, #3
   13330:	strbhi	ip, [r9, r0]
   13334:	cmp	sl, r4
   13338:	movhi	r3, #92	; 0x5c
   1333c:	strbhi	r3, [r9, r4]
   13340:	add	r3, r4, #1
   13344:	cmp	sl, r3
   13348:	bls	13358 <__assert_fail@plt+0x21b0>
   1334c:	lsr	r0, r5, #6
   13350:	add	r0, r0, #48	; 0x30
   13354:	strb	r0, [r9, r3]
   13358:	add	r3, r4, #2
   1335c:	cmp	sl, r3
   13360:	bls	13370 <__assert_fail@plt+0x21c8>
   13364:	ubfx	r0, r5, #3, #3
   13368:	add	r0, r0, #48	; 0x30
   1336c:	strb	r0, [r9, r3]
   13370:	add	r7, r7, #1
   13374:	and	r5, r5, #7
   13378:	cmp	r1, r7
   1337c:	add	r5, r5, #48	; 0x30
   13380:	add	r4, r4, #3
   13384:	bls	138e4 <__assert_fail@plt+0x273c>
   13388:	mov	r0, r2
   1338c:	cmp	sl, r4
   13390:	strbhi	r5, [r9, r4]
   13394:	add	r4, r4, #1
   13398:	ldrb	r5, [lr, #1]!
   1339c:	cmp	r2, #0
   133a0:	bne	132f0 <__assert_fail@plt+0x2148>
   133a4:	eor	r3, r0, #1
   133a8:	cmp	r6, #0
   133ac:	and	r3, r3, fp
   133b0:	uxtb	r3, r3
   133b4:	beq	133c8 <__assert_fail@plt+0x2220>
   133b8:	cmp	sl, r4
   133bc:	movhi	r6, #92	; 0x5c
   133c0:	strbhi	r6, [r9, r4]
   133c4:	add	r4, r4, #1
   133c8:	add	r7, r7, #1
   133cc:	cmp	r7, r1
   133d0:	bcs	138c4 <__assert_fail@plt+0x271c>
   133d4:	cmp	r3, #0
   133d8:	beq	13908 <__assert_fail@plt+0x2760>
   133dc:	cmp	sl, r4
   133e0:	add	r3, r4, #1
   133e4:	mov	r6, #0
   133e8:	strbhi	ip, [r9, r4]
   133ec:	cmp	sl, r3
   133f0:	add	r4, r4, #2
   133f4:	mov	fp, r6
   133f8:	strbhi	ip, [r9, r3]
   133fc:	b	1338c <__assert_fail@plt+0x21e4>
   13400:	ldr	r3, [sp, #36]	; 0x24
   13404:	ldrb	r5, [r3]
   13408:	cmp	r5, #126	; 0x7e
   1340c:	ldrls	pc, [pc, r5, lsl #2]
   13410:	b	13270 <__assert_fail@plt+0x20c8>
   13414:	andeq	r3, r1, r4, lsr r6
   13418:	andeq	r3, r1, r0, ror r2
   1341c:	andeq	r3, r1, r0, ror r2
   13420:	andeq	r3, r1, r0, ror r2
   13424:	andeq	r3, r1, r0, ror r2
   13428:	andeq	r3, r1, r0, ror r2
   1342c:	andeq	r3, r1, r0, ror r2
   13430:	andeq	r2, r1, r8, lsr #22
   13434:	andeq	r2, r1, r0, lsr #22
   13438:	andeq	r3, r1, r0, lsr #3
   1343c:	andeq	r3, r1, r8, lsr #12
   13440:	andeq	r3, r1, r0, lsl #3
   13444:	andeq	r2, r1, ip, asr #19
   13448:	andeq	r3, r1, ip, lsl r6
   1344c:	andeq	r3, r1, r0, ror r2
   13450:	andeq	r3, r1, r0, ror r2
   13454:	andeq	r3, r1, r0, ror r2
   13458:	andeq	r3, r1, r0, ror r2
   1345c:	andeq	r3, r1, r0, ror r2
   13460:	andeq	r3, r1, r0, ror r2
   13464:	andeq	r3, r1, r0, ror r2
   13468:	andeq	r3, r1, r0, ror r2
   1346c:	andeq	r3, r1, r0, ror r2
   13470:	andeq	r3, r1, r0, ror r2
   13474:	andeq	r3, r1, r0, ror r2
   13478:	andeq	r3, r1, r0, ror r2
   1347c:	andeq	r3, r1, r0, ror r2
   13480:	andeq	r3, r1, r0, ror r2
   13484:	andeq	r3, r1, r0, ror r2
   13488:	andeq	r3, r1, r0, ror r2
   1348c:	andeq	r3, r1, r0, ror r2
   13490:	andeq	r3, r1, r0, ror r2
   13494:	muleq	r1, r0, r1
   13498:	andeq	r3, r1, r0, lsl r6
   1349c:	andeq	r3, r1, r0, lsl r6
   134a0:	andeq	r3, r1, r4, ror r1
   134a4:	andeq	r3, r1, r0, lsl r6
   134a8:	andeq	r3, r1, r4, ror #2
   134ac:	andeq	r3, r1, r0, lsl r6
   134b0:	ldrdeq	r3, [r1], -r8
   134b4:	andeq	r3, r1, r0, lsl r6
   134b8:	andeq	r3, r1, r0, lsl r6
   134bc:	andeq	r3, r1, r0, lsl r6
   134c0:	andeq	r3, r1, r4, ror #2
   134c4:	andeq	r3, r1, r4, ror #2
   134c8:	andeq	r3, r1, r4, ror #2
   134cc:	andeq	r3, r1, r4, ror #2
   134d0:	andeq	r3, r1, r4, ror #2
   134d4:	andeq	r3, r1, r4, ror #2
   134d8:	andeq	r3, r1, r4, ror #2
   134dc:	andeq	r3, r1, r4, ror #2
   134e0:	andeq	r3, r1, r4, ror #2
   134e4:	andeq	r3, r1, r4, ror #2
   134e8:	andeq	r3, r1, r4, ror #2
   134ec:	andeq	r3, r1, r4, ror #2
   134f0:	andeq	r3, r1, r4, ror #2
   134f4:	andeq	r3, r1, r4, ror #2
   134f8:	andeq	r3, r1, r4, ror #2
   134fc:	andeq	r3, r1, r4, ror #2
   13500:	andeq	r3, r1, r0, lsl r6
   13504:	andeq	r3, r1, r0, lsl r6
   13508:	andeq	r3, r1, r0, lsl r6
   1350c:	andeq	r3, r1, r0, lsl r6
   13510:			; <UNDEFINED> instruction: 0x000131b0
   13514:	andeq	r3, r1, r0, ror r2
   13518:	andeq	r3, r1, r4, ror #2
   1351c:	andeq	r3, r1, r4, ror #2
   13520:	andeq	r3, r1, r4, ror #2
   13524:	andeq	r3, r1, r4, ror #2
   13528:	andeq	r3, r1, r4, ror #2
   1352c:	andeq	r3, r1, r4, ror #2
   13530:	andeq	r3, r1, r4, ror #2
   13534:	andeq	r3, r1, r4, ror #2
   13538:	andeq	r3, r1, r4, ror #2
   1353c:	andeq	r3, r1, r4, ror #2
   13540:	andeq	r3, r1, r4, ror #2
   13544:	andeq	r3, r1, r4, ror #2
   13548:	andeq	r3, r1, r4, ror #2
   1354c:	andeq	r3, r1, r4, ror #2
   13550:	andeq	r3, r1, r4, ror #2
   13554:	andeq	r3, r1, r4, ror #2
   13558:	andeq	r3, r1, r4, ror #2
   1355c:	andeq	r3, r1, r4, ror #2
   13560:	andeq	r3, r1, r4, ror #2
   13564:	andeq	r3, r1, r4, ror #2
   13568:	andeq	r3, r1, r4, ror #2
   1356c:	andeq	r3, r1, r4, ror #2
   13570:	andeq	r3, r1, r4, ror #2
   13574:	andeq	r3, r1, r4, ror #2
   13578:	andeq	r3, r1, r4, ror #2
   1357c:	andeq	r3, r1, r4, ror #2
   13580:	andeq	r3, r1, r0, lsl r6
   13584:	andeq	r3, r1, r0, lsr r1
   13588:	andeq	r3, r1, r4, ror #2
   1358c:	andeq	r3, r1, r0, lsl r6
   13590:	andeq	r3, r1, r4, ror #2
   13594:	andeq	r3, r1, r0, lsl r6
   13598:	andeq	r3, r1, r4, ror #2
   1359c:	andeq	r3, r1, r4, ror #2
   135a0:	andeq	r3, r1, r4, ror #2
   135a4:	andeq	r3, r1, r4, ror #2
   135a8:	andeq	r3, r1, r4, ror #2
   135ac:	andeq	r3, r1, r4, ror #2
   135b0:	andeq	r3, r1, r4, ror #2
   135b4:	andeq	r3, r1, r4, ror #2
   135b8:	andeq	r3, r1, r4, ror #2
   135bc:	andeq	r3, r1, r4, ror #2
   135c0:	andeq	r3, r1, r4, ror #2
   135c4:	andeq	r3, r1, r4, ror #2
   135c8:	andeq	r3, r1, r4, ror #2
   135cc:	andeq	r3, r1, r4, ror #2
   135d0:	andeq	r3, r1, r4, ror #2
   135d4:	andeq	r3, r1, r4, ror #2
   135d8:	andeq	r3, r1, r4, ror #2
   135dc:	andeq	r3, r1, r4, ror #2
   135e0:	andeq	r3, r1, r4, ror #2
   135e4:	andeq	r3, r1, r4, ror #2
   135e8:	andeq	r3, r1, r4, ror #2
   135ec:	andeq	r3, r1, r4, ror #2
   135f0:	andeq	r3, r1, r4, ror #2
   135f4:	andeq	r3, r1, r4, ror #2
   135f8:	andeq	r3, r1, r4, ror #2
   135fc:	andeq	r3, r1, r4, ror #2
   13600:	andeq	r3, r1, ip, lsl #2
   13604:	andeq	r3, r1, r0, lsl r6
   13608:	andeq	r3, r1, ip, lsl #2
   1360c:	andeq	r3, r1, r4, ror r1
   13610:	mov	r3, #0
   13614:	str	r3, [sp, #40]	; 0x28
   13618:	b	12cf0 <__assert_fail@plt+0x1b48>
   1361c:	mov	r3, #0
   13620:	str	r3, [sp, #40]	; 0x28
   13624:	b	12c88 <__assert_fail@plt+0x1ae0>
   13628:	mov	r3, #0
   1362c:	str	r3, [sp, #40]	; 0x28
   13630:	b	12cbc <__assert_fail@plt+0x1b14>
   13634:	ldr	r3, [sp, #44]	; 0x2c
   13638:	cmp	r3, #0
   1363c:	beq	12bd4 <__assert_fail@plt+0x1a2c>
   13640:	ldr	r3, [sp, #52]	; 0x34
   13644:	mov	fp, r9
   13648:	str	r3, [sp, #60]	; 0x3c
   1364c:	b	12d4c <__assert_fail@plt+0x1ba4>
   13650:	ldr	r3, [sp, #44]	; 0x2c
   13654:	cmp	r3, #0
   13658:	bne	13a8c <__assert_fail@plt+0x28e4>
   1365c:	str	r3, [sp, #40]	; 0x28
   13660:	cmp	sl, #0
   13664:	ldr	r3, [sp, #84]	; 0x54
   13668:	clz	r3, r3
   1366c:	lsr	r3, r3, #5
   13670:	moveq	r3, #0
   13674:	cmp	r3, #0
   13678:	strne	sl, [sp, #84]	; 0x54
   1367c:	movne	sl, #0
   13680:	bne	136b0 <__assert_fail@plt+0x2508>
   13684:	cmp	sl, r4
   13688:	movhi	r3, #39	; 0x27
   1368c:	strbhi	r3, [r9, r4]
   13690:	add	r3, r4, #1
   13694:	cmp	sl, r3
   13698:	movhi	r2, #92	; 0x5c
   1369c:	strbhi	r2, [r9, r3]
   136a0:	add	r3, r4, #2
   136a4:	cmp	sl, r3
   136a8:	movhi	r2, #39	; 0x27
   136ac:	strbhi	r2, [r9, r3]
   136b0:	mov	r3, #0
   136b4:	add	r4, r4, #3
   136b8:	str	r6, [sp, #80]	; 0x50
   136bc:	mov	fp, r3
   136c0:	mov	r5, #39	; 0x27
   136c4:	b	12b90 <__assert_fail@plt+0x19e8>
   136c8:	ldr	r3, [sp, #44]	; 0x2c
   136cc:	cmp	r3, #0
   136d0:	bne	13a8c <__assert_fail@plt+0x28e4>
   136d4:	mov	r6, #0
   136d8:	mov	r5, #63	; 0x3f
   136dc:	str	r3, [sp, #40]	; 0x28
   136e0:	mov	r3, fp
   136e4:	b	12b90 <__assert_fail@plt+0x19e8>
   136e8:	mov	r2, #0
   136ec:	mov	r3, #0
   136f0:	cmn	r8, #1
   136f4:	strd	r2, [sp, #128]	; 0x80
   136f8:	bne	13708 <__assert_fail@plt+0x2560>
   136fc:	ldr	r0, [sp, #28]
   13700:	bl	11088 <strlen@plt>
   13704:	mov	r8, r0
   13708:	str	r9, [sp, #100]	; 0x64
   1370c:	mov	r3, #0
   13710:	strd	sl, [sp, #104]	; 0x68
   13714:	ldr	sl, [sp, #28]
   13718:	str	r5, [sp, #112]	; 0x70
   1371c:	mov	r5, r3
   13720:	ldr	r9, [sp, #68]	; 0x44
   13724:	str	r4, [sp, #116]	; 0x74
   13728:	add	r4, r7, r5
   1372c:	add	r3, sp, #128	; 0x80
   13730:	add	fp, sl, r4
   13734:	sub	r2, r8, r4
   13738:	mov	r1, fp
   1373c:	add	r0, sp, #124	; 0x7c
   13740:	bl	18470 <__assert_fail@plt+0x72c8>
   13744:	subs	r1, r0, #0
   13748:	beq	13788 <__assert_fail@plt+0x25e0>
   1374c:	cmn	r1, #1
   13750:	beq	13ae0 <__assert_fail@plt+0x2938>
   13754:	cmn	r1, #2
   13758:	beq	13b00 <__assert_fail@plt+0x2958>
   1375c:	cmp	r9, #0
   13760:	bne	137b8 <__assert_fail@plt+0x2610>
   13764:	ldr	r0, [sp, #124]	; 0x7c
   13768:	add	r5, r5, r1
   1376c:	bl	10fa4 <iswprint@plt>
   13770:	cmp	r0, #0
   13774:	add	r0, sp, #128	; 0x80
   13778:	moveq	r6, #0
   1377c:	bl	10f50 <mbsinit@plt>
   13780:	cmp	r0, #0
   13784:	beq	13728 <__assert_fail@plt+0x2580>
   13788:	ldr	r3, [sp, #60]	; 0x3c
   1378c:	add	r9, sp, #100	; 0x64
   13790:	mov	r0, r5
   13794:	ldm	r9, {r9, sl, fp}
   13798:	eor	r2, r6, #1
   1379c:	ldr	r5, [sp, #112]	; 0x70
   137a0:	and	r2, r2, r3
   137a4:	uxtb	r2, r2
   137a8:	ldr	r4, [sp, #116]	; 0x74
   137ac:	cmp	r0, #1
   137b0:	bhi	132cc <__assert_fail@plt+0x2124>
   137b4:	b	132bc <__assert_fail@plt+0x2114>
   137b8:	cmp	r1, #1
   137bc:	beq	13764 <__assert_fail@plt+0x25bc>
   137c0:	add	r2, r4, #1
   137c4:	add	r3, sl, r1
   137c8:	add	r2, sl, r2
   137cc:	add	r4, r3, r4
   137d0:	ldrb	r3, [r2], #1
   137d4:	sub	r3, r3, #91	; 0x5b
   137d8:	cmp	r3, #33	; 0x21
   137dc:	ldrls	pc, [pc, r3, lsl #2]
   137e0:	b	1386c <__assert_fail@plt+0x26c4>
   137e4:	andeq	r3, r1, r8, ror r8
   137e8:	andeq	r3, r1, r8, ror r8
   137ec:	andeq	r3, r1, ip, ror #16
   137f0:	andeq	r3, r1, r8, ror r8
   137f4:	andeq	r3, r1, ip, ror #16
   137f8:	andeq	r3, r1, r8, ror r8
   137fc:	andeq	r3, r1, ip, ror #16
   13800:	andeq	r3, r1, ip, ror #16
   13804:	andeq	r3, r1, ip, ror #16
   13808:	andeq	r3, r1, ip, ror #16
   1380c:	andeq	r3, r1, ip, ror #16
   13810:	andeq	r3, r1, ip, ror #16
   13814:	andeq	r3, r1, ip, ror #16
   13818:	andeq	r3, r1, ip, ror #16
   1381c:	andeq	r3, r1, ip, ror #16
   13820:	andeq	r3, r1, ip, ror #16
   13824:	andeq	r3, r1, ip, ror #16
   13828:	andeq	r3, r1, ip, ror #16
   1382c:	andeq	r3, r1, ip, ror #16
   13830:	andeq	r3, r1, ip, ror #16
   13834:	andeq	r3, r1, ip, ror #16
   13838:	andeq	r3, r1, ip, ror #16
   1383c:	andeq	r3, r1, ip, ror #16
   13840:	andeq	r3, r1, ip, ror #16
   13844:	andeq	r3, r1, ip, ror #16
   13848:	andeq	r3, r1, ip, ror #16
   1384c:	andeq	r3, r1, ip, ror #16
   13850:	andeq	r3, r1, ip, ror #16
   13854:	andeq	r3, r1, ip, ror #16
   13858:	andeq	r3, r1, ip, ror #16
   1385c:	andeq	r3, r1, ip, ror #16
   13860:	andeq	r3, r1, ip, ror #16
   13864:	andeq	r3, r1, ip, ror #16
   13868:	andeq	r3, r1, r8, ror r8
   1386c:	cmp	r4, r2
   13870:	bne	137d0 <__assert_fail@plt+0x2628>
   13874:	b	13764 <__assert_fail@plt+0x25bc>
   13878:	mov	r3, #2
   1387c:	ldr	fp, [sp, #100]	; 0x64
   13880:	str	r3, [sp, #176]	; 0xb0
   13884:	ldr	sl, [sp, #104]	; 0x68
   13888:	b	12d4c <__assert_fail@plt+0x1ba4>
   1388c:	ldr	r2, [sp, #52]	; 0x34
   13890:	mov	fp, r9
   13894:	ldr	r3, [sp, #60]	; 0x3c
   13898:	and	r3, r3, r2
   1389c:	str	r3, [sp, #60]	; 0x3c
   138a0:	b	12d4c <__assert_fail@plt+0x1ba4>
   138a4:	cmp	sl, r4
   138a8:	movhi	r2, fp
   138ac:	bhi	12c24 <__assert_fail@plt+0x1a7c>
   138b0:	mov	r2, r4
   138b4:	b	12c34 <__assert_fail@plt+0x1a8c>
   138b8:	mov	r6, r3
   138bc:	mov	r5, #63	; 0x3f
   138c0:	b	12cf4 <__assert_fail@plt+0x1b4c>
   138c4:	ldr	r8, [sp, #36]	; 0x24
   138c8:	ldr	r6, [sp, #100]	; 0x64
   138cc:	b	12ba0 <__assert_fail@plt+0x19f8>
   138d0:	mov	fp, r9
   138d4:	ldr	r8, [sp, #36]	; 0x24
   138d8:	ldr	r3, [sp, #52]	; 0x34
   138dc:	str	r3, [sp, #60]	; 0x3c
   138e0:	b	12d4c <__assert_fail@plt+0x1ba4>
   138e4:	ldr	r8, [sp, #36]	; 0x24
   138e8:	ldr	r6, [sp, #100]	; 0x64
   138ec:	b	12a38 <__assert_fail@plt+0x1890>
   138f0:	mov	r3, #0
   138f4:	add	r4, r4, #4
   138f8:	mov	fp, r2
   138fc:	mov	r6, r3
   13900:	mov	r5, #48	; 0x30
   13904:	b	12b90 <__assert_fail@plt+0x19e8>
   13908:	mov	r6, r3
   1390c:	b	1338c <__assert_fail@plt+0x21e4>
   13910:	mov	r3, #1
   13914:	movw	r2, #37140	; 0x9114
   13918:	movt	r2, #1
   1391c:	mov	r4, r3
   13920:	mov	r9, sl
   13924:	str	r3, [sp, #32]
   13928:	str	sl, [sp, #44]	; 0x2c
   1392c:	str	r3, [sp, #48]	; 0x30
   13930:	str	sl, [sp, #52]	; 0x34
   13934:	str	r3, [sp, #56]	; 0x38
   13938:	str	r3, [sp, #60]	; 0x3c
   1393c:	str	sl, [sp, #64]	; 0x40
   13940:	str	sl, [sp, #68]	; 0x44
   13944:	str	r2, [sp, #72]	; 0x48
   13948:	str	sl, [sp, #80]	; 0x50
   1394c:	str	sl, [sp, #84]	; 0x54
   13950:	str	sl, [sp, #88]	; 0x58
   13954:	b	12444 <__assert_fail@plt+0x129c>
   13958:	mov	r3, #0
   1395c:	mov	r5, #48	; 0x30
   13960:	mov	r6, r3
   13964:	b	12b90 <__assert_fail@plt+0x19e8>
   13968:	cmp	sl, r4
   1396c:	mov	r5, #48	; 0x30
   13970:	movhi	r3, #48	; 0x30
   13974:	strbhi	r3, [r9, r4]
   13978:	add	r3, r2, #2
   1397c:	add	r4, r2, #3
   13980:	cmp	sl, r3
   13984:	movhi	r1, #48	; 0x30
   13988:	strbhi	r1, [r9, r3]
   1398c:	mov	r3, #0
   13990:	b	12c6c <__assert_fail@plt+0x1ac4>
   13994:	ldr	r3, [sp, #48]	; 0x30
   13998:	str	r3, [sp, #40]	; 0x28
   1399c:	b	13278 <__assert_fail@plt+0x20d0>
   139a0:	ldr	r2, [sp, #28]
   139a4:	ldrb	r2, [r2, r3]
   139a8:	sub	r1, r2, #33	; 0x21
   139ac:	cmp	r1, #29
   139b0:	ldrls	pc, [pc, r1, lsl #2]
   139b4:	b	12cf0 <__assert_fail@plt+0x1b48>
   139b8:	andeq	r3, r1, r0, lsr sl
   139bc:	strdeq	r2, [r1], -r0
   139c0:	strdeq	r2, [r1], -r0
   139c4:	strdeq	r2, [r1], -r0
   139c8:	strdeq	r2, [r1], -r0
   139cc:	strdeq	r2, [r1], -r0
   139d0:	andeq	r3, r1, r0, lsr sl
   139d4:	andeq	r3, r1, r0, lsr sl
   139d8:	andeq	r3, r1, r0, lsr sl
   139dc:	strdeq	r2, [r1], -r0
   139e0:	strdeq	r2, [r1], -r0
   139e4:	strdeq	r2, [r1], -r0
   139e8:	andeq	r3, r1, r0, lsr sl
   139ec:	strdeq	r2, [r1], -r0
   139f0:	andeq	r3, r1, r0, lsr sl
   139f4:	strdeq	r2, [r1], -r0
   139f8:	strdeq	r2, [r1], -r0
   139fc:	strdeq	r2, [r1], -r0
   13a00:	strdeq	r2, [r1], -r0
   13a04:	strdeq	r2, [r1], -r0
   13a08:	strdeq	r2, [r1], -r0
   13a0c:	strdeq	r2, [r1], -r0
   13a10:	strdeq	r2, [r1], -r0
   13a14:	strdeq	r2, [r1], -r0
   13a18:	strdeq	r2, [r1], -r0
   13a1c:	strdeq	r2, [r1], -r0
   13a20:	strdeq	r2, [r1], -r0
   13a24:	andeq	r3, r1, r0, lsr sl
   13a28:	andeq	r3, r1, r0, lsr sl
   13a2c:	andeq	r3, r1, r0, lsr sl
   13a30:	ldr	r1, [sp, #44]	; 0x2c
   13a34:	cmp	r1, #0
   13a38:	bne	13c98 <__assert_fail@plt+0x2af0>
   13a3c:	cmp	sl, r4
   13a40:	mov	r7, r3
   13a44:	movhi	r1, #63	; 0x3f
   13a48:	mov	r5, r2
   13a4c:	mov	r3, fp
   13a50:	strbhi	r1, [r9, r4]
   13a54:	add	r1, r4, #1
   13a58:	cmp	sl, r1
   13a5c:	movhi	r0, #34	; 0x22
   13a60:	strbhi	r0, [r9, r1]
   13a64:	add	r1, r4, #2
   13a68:	cmp	sl, r1
   13a6c:	movhi	r0, #34	; 0x22
   13a70:	strbhi	r0, [r9, r1]
   13a74:	add	r1, r4, #3
   13a78:	add	r4, r4, #4
   13a7c:	cmp	sl, r1
   13a80:	movhi	r0, #63	; 0x3f
   13a84:	strbhi	r0, [r9, r1]
   13a88:	b	12c6c <__assert_fail@plt+0x1ac4>
   13a8c:	mov	fp, r9
   13a90:	b	12d4c <__assert_fail@plt+0x1ba4>
   13a94:	ldr	r3, [sp, #188]	; 0xbc
   13a98:	ldrb	r3, [r3]
   13a9c:	cmp	r3, #0
   13aa0:	beq	123dc <__assert_fail@plt+0x1234>
   13aa4:	ldr	r2, [sp, #188]	; 0xbc
   13aa8:	cmp	sl, r4
   13aac:	bls	13acc <__assert_fail@plt+0x2924>
   13ab0:	strb	r3, [fp, r4]
   13ab4:	add	r4, r4, #1
   13ab8:	ldrb	r3, [r2, #1]!
   13abc:	cmp	r3, #0
   13ac0:	beq	123dc <__assert_fail@plt+0x1234>
   13ac4:	cmp	sl, r4
   13ac8:	bhi	13ab0 <__assert_fail@plt+0x2908>
   13acc:	ldrb	r3, [r2, #1]!
   13ad0:	add	r4, r4, #1
   13ad4:	cmp	r3, #0
   13ad8:	bne	13aa8 <__assert_fail@plt+0x2900>
   13adc:	b	123dc <__assert_fail@plt+0x1234>
   13ae0:	add	r9, sp, #100	; 0x64
   13ae4:	mov	r0, r5
   13ae8:	ldr	r2, [sp, #60]	; 0x3c
   13aec:	mov	r6, #0
   13af0:	ldm	r9, {r9, sl, fp}
   13af4:	ldr	r5, [sp, #112]	; 0x70
   13af8:	ldr	r4, [sp, #116]	; 0x74
   13afc:	b	137ac <__assert_fail@plt+0x2604>
   13b00:	cmp	r4, r8
   13b04:	add	r9, sp, #100	; 0x64
   13b08:	mov	r1, r4
   13b0c:	mov	r2, fp
   13b10:	ldm	r9, {r9, sl, fp}
   13b14:	mov	r3, r5
   13b18:	mov	r0, r5
   13b1c:	ldr	r5, [sp, #112]	; 0x70
   13b20:	ldr	r4, [sp, #116]	; 0x74
   13b24:	bcs	13b58 <__assert_fail@plt+0x29b0>
   13b28:	ldrb	r6, [r2]
   13b2c:	cmp	r6, #0
   13b30:	bne	13b44 <__assert_fail@plt+0x299c>
   13b34:	b	13c90 <__assert_fail@plt+0x2ae8>
   13b38:	ldrb	r6, [r2, #1]!
   13b3c:	cmp	r6, #0
   13b40:	beq	13c28 <__assert_fail@plt+0x2a80>
   13b44:	add	r3, r3, #1
   13b48:	add	r1, r7, r3
   13b4c:	cmp	r8, r1
   13b50:	bhi	13b38 <__assert_fail@plt+0x2990>
   13b54:	mov	r0, r3
   13b58:	mov	r6, #0
   13b5c:	ldr	r2, [sp, #60]	; 0x3c
   13b60:	b	137ac <__assert_fail@plt+0x2604>
   13b64:	mov	r3, #1
   13b68:	mov	r4, #0
   13b6c:	mov	r9, r4
   13b70:	str	r3, [sp, #32]
   13b74:	str	r3, [sp, #44]	; 0x2c
   13b78:	str	r3, [sp, #48]	; 0x30
   13b7c:	str	r4, [sp, #52]	; 0x34
   13b80:	str	r3, [sp, #56]	; 0x38
   13b84:	str	r3, [sp, #60]	; 0x3c
   13b88:	str	r3, [sp, #88]	; 0x58
   13b8c:	movw	r3, #37140	; 0x9114
   13b90:	movt	r3, #1
   13b94:	str	r4, [sp, #64]	; 0x40
   13b98:	str	r4, [sp, #68]	; 0x44
   13b9c:	str	r3, [sp, #72]	; 0x48
   13ba0:	str	r4, [sp, #80]	; 0x50
   13ba4:	str	r4, [sp, #84]	; 0x54
   13ba8:	b	12444 <__assert_fail@plt+0x129c>
   13bac:	mov	fp, r9
   13bb0:	b	12d60 <__assert_fail@plt+0x1bb8>
   13bb4:	ldr	r3, [sp, #48]	; 0x30
   13bb8:	b	136d4 <__assert_fail@plt+0x252c>
   13bbc:	mov	r2, r3
   13bc0:	ldr	r3, [sp, #72]	; 0x48
   13bc4:	cmp	r3, #0
   13bc8:	moveq	r2, #0
   13bcc:	andne	r2, r2, #1
   13bd0:	cmp	r2, #0
   13bd4:	beq	13c04 <__assert_fail@plt+0x2a5c>
   13bd8:	mov	r2, r3
   13bdc:	ldrb	r3, [r3]
   13be0:	cmp	r3, #0
   13be4:	beq	13c04 <__assert_fail@plt+0x2a5c>
   13be8:	cmp	sl, r4
   13bec:	bls	13c14 <__assert_fail@plt+0x2a6c>
   13bf0:	strb	r3, [fp, r4]
   13bf4:	add	r4, r4, #1
   13bf8:	ldrb	r3, [r2, #1]!
   13bfc:	cmp	r3, #0
   13c00:	bne	13be8 <__assert_fail@plt+0x2a40>
   13c04:	cmp	sl, r4
   13c08:	movhi	r3, #0
   13c0c:	strbhi	r3, [fp, r4]
   13c10:	b	12d9c <__assert_fail@plt+0x1bf4>
   13c14:	ldrb	r3, [r2, #1]!
   13c18:	add	r4, r4, #1
   13c1c:	cmp	r3, #0
   13c20:	bne	13be8 <__assert_fail@plt+0x2a40>
   13c24:	b	13c04 <__assert_fail@plt+0x2a5c>
   13c28:	mov	r0, r3
   13c2c:	ldr	r2, [sp, #60]	; 0x3c
   13c30:	b	137ac <__assert_fail@plt+0x2604>
   13c34:	mov	ip, #5
   13c38:	mov	r3, r8
   13c3c:	ldr	r1, [sp, #84]	; 0x54
   13c40:	str	ip, [sp]
   13c44:	ldr	r2, [sp, #180]	; 0xb4
   13c48:	ldr	ip, [sp, #188]	; 0xbc
   13c4c:	ldr	r0, [sp, #184]	; 0xb8
   13c50:	str	r2, [sp, #4]
   13c54:	ldr	r2, [sp, #28]
   13c58:	str	ip, [sp, #12]
   13c5c:	ldr	ip, [sp, #192]	; 0xc0
   13c60:	str	r0, [sp, #8]
   13c64:	mov	r0, fp
   13c68:	str	ip, [sp, #16]
   13c6c:	bl	12320 <__assert_fail@plt+0x1178>
   13c70:	mov	r4, r0
   13c74:	b	12d9c <__assert_fail@plt+0x1bf4>
   13c78:	mov	r6, r3
   13c7c:	str	r3, [sp, #40]	; 0x28
   13c80:	b	12d0c <__assert_fail@plt+0x1b64>
   13c84:	mov	r3, #2
   13c88:	str	r3, [sp, #176]	; 0xb0
   13c8c:	b	12d4c <__assert_fail@plt+0x1ba4>
   13c90:	ldr	r2, [sp, #60]	; 0x3c
   13c94:	b	137ac <__assert_fail@plt+0x2604>
   13c98:	mov	r3, #5
   13c9c:	mov	fp, r9
   13ca0:	str	r3, [sp, #176]	; 0xb0
   13ca4:	b	12d60 <__assert_fail@plt+0x1bb8>
   13ca8:	mov	r1, #1
   13cac:	mov	r9, #0
   13cb0:	mov	r3, r9
   13cb4:	mov	r2, r9
   13cb8:	str	r1, [sp, #32]
   13cbc:	str	sl, [sp, #84]	; 0x54
   13cc0:	b	12ae8 <__assert_fail@plt+0x1940>
   13cc4:	mov	r3, #0
   13cc8:	mov	r2, #1
   13ccc:	mov	r9, r3
   13cd0:	mov	r4, r3
   13cd4:	str	r2, [sp, #32]
   13cd8:	strd	r2, [sp, #44]	; 0x2c
   13cdc:	strd	r2, [sp, #56]	; 0x38
   13ce0:	str	r3, [sp, #80]	; 0x50
   13ce4:	str	r3, [sp, #84]	; 0x54
   13ce8:	str	r3, [sp, #88]	; 0x58
   13cec:	movw	r3, #37160	; 0x9128
   13cf0:	movt	r3, #1
   13cf4:	str	r2, [sp, #52]	; 0x34
   13cf8:	str	r2, [sp, #64]	; 0x40
   13cfc:	str	r2, [sp, #68]	; 0x44
   13d00:	str	r3, [sp, #72]	; 0x48
   13d04:	b	12444 <__assert_fail@plt+0x129c>
   13d08:	bl	11184 <abort@plt>
   13d0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d10:	mov	r4, r0
   13d14:	mov	r5, r3
   13d18:	strd	r6, [sp, #8]
   13d1c:	movw	r7, #41248	; 0xa120
   13d20:	movt	r7, #2
   13d24:	strd	r8, [sp, #16]
   13d28:	strd	sl, [sp, #24]
   13d2c:	mov	sl, r1
   13d30:	mov	fp, r2
   13d34:	str	lr, [sp, #32]
   13d38:	sub	sp, sp, #60	; 0x3c
   13d3c:	bl	110a0 <__errno_location@plt>
   13d40:	mov	r8, r0
   13d44:	cmn	r4, #-2147483647	; 0x80000001
   13d48:	ldr	r6, [r7]
   13d4c:	movne	r0, #0
   13d50:	moveq	r0, #1
   13d54:	ldr	r3, [r8]
   13d58:	orrs	r0, r0, r4, lsr #31
   13d5c:	str	r3, [sp, #28]
   13d60:	bne	13ef0 <__assert_fail@plt+0x2d48>
   13d64:	ldr	r3, [r7, #4]
   13d68:	cmp	r3, r4
   13d6c:	bgt	13dcc <__assert_fail@plt+0x2c24>
   13d70:	add	r1, r7, #8
   13d74:	sub	r2, r4, r3
   13d78:	str	r3, [sp, #52]	; 0x34
   13d7c:	cmp	r6, r1
   13d80:	add	r2, r2, #1
   13d84:	beq	13ec8 <__assert_fail@plt+0x2d20>
   13d88:	mov	r1, #8
   13d8c:	mov	r0, r6
   13d90:	mvn	r3, #-2147483648	; 0x80000000
   13d94:	str	r1, [sp]
   13d98:	add	r1, sp, #52	; 0x34
   13d9c:	bl	16a2c <__assert_fail@plt+0x5884>
   13da0:	mov	r6, r0
   13da4:	str	r0, [r7]
   13da8:	ldr	r0, [r7, #4]
   13dac:	mov	r1, #0
   13db0:	ldr	r2, [sp, #52]	; 0x34
   13db4:	sub	r2, r2, r0
   13db8:	add	r0, r6, r0, lsl #3
   13dbc:	lsl	r2, r2, #3
   13dc0:	bl	110c4 <memset@plt>
   13dc4:	ldr	r3, [sp, #52]	; 0x34
   13dc8:	str	r3, [r7, #4]
   13dcc:	ldr	r1, [r5, #4]
   13dd0:	add	r0, r6, r4, lsl #3
   13dd4:	add	ip, r5, #8
   13dd8:	mov	r3, fp
   13ddc:	mov	r2, sl
   13de0:	ldr	r7, [r0, #4]
   13de4:	str	r0, [sp, #36]	; 0x24
   13de8:	str	ip, [sp, #40]	; 0x28
   13dec:	orr	r0, r1, #1
   13df0:	ldr	r9, [r6, r4, lsl #3]
   13df4:	str	ip, [sp, #8]
   13df8:	ldr	lr, [r5, #44]	; 0x2c
   13dfc:	str	r0, [sp, #4]
   13e00:	ldr	ip, [r5]
   13e04:	mov	r1, r9
   13e08:	str	ip, [sp, #32]
   13e0c:	ldr	ip, [r5, #40]	; 0x28
   13e10:	str	ip, [sp, #12]
   13e14:	ldr	ip, [sp, #32]
   13e18:	str	lr, [sp, #16]
   13e1c:	str	r0, [sp, #44]	; 0x2c
   13e20:	mov	r0, r7
   13e24:	str	ip, [sp]
   13e28:	bl	12320 <__assert_fail@plt+0x1178>
   13e2c:	cmp	r9, r0
   13e30:	bhi	13ea0 <__assert_fail@plt+0x2cf8>
   13e34:	add	r9, r0, #1
   13e38:	movw	r3, #41356	; 0xa18c
   13e3c:	movt	r3, #2
   13e40:	cmp	r7, r3
   13e44:	str	r9, [r6, r4, lsl #3]
   13e48:	beq	13e54 <__assert_fail@plt+0x2cac>
   13e4c:	mov	r0, r7
   13e50:	bl	1209c <__assert_fail@plt+0xef4>
   13e54:	mov	r0, r9
   13e58:	bl	16788 <__assert_fail@plt+0x55e0>
   13e5c:	ldr	ip, [r5]
   13e60:	mov	r3, fp
   13e64:	mov	r2, sl
   13e68:	mov	r1, r9
   13e6c:	mov	r7, r0
   13e70:	ldr	lr, [sp, #36]	; 0x24
   13e74:	ldr	r4, [r5, #40]	; 0x28
   13e78:	str	r0, [lr, #4]
   13e7c:	ldr	lr, [r5, #44]	; 0x2c
   13e80:	str	ip, [sp]
   13e84:	ldr	ip, [sp, #44]	; 0x2c
   13e88:	str	ip, [sp, #4]
   13e8c:	ldr	ip, [sp, #40]	; 0x28
   13e90:	str	r4, [sp, #12]
   13e94:	str	lr, [sp, #16]
   13e98:	str	ip, [sp, #8]
   13e9c:	bl	12320 <__assert_fail@plt+0x1178>
   13ea0:	ldr	r3, [sp, #28]
   13ea4:	mov	r0, r7
   13ea8:	str	r3, [r8]
   13eac:	add	sp, sp, #60	; 0x3c
   13eb0:	ldrd	r4, [sp]
   13eb4:	ldrd	r6, [sp, #8]
   13eb8:	ldrd	r8, [sp, #16]
   13ebc:	ldrd	sl, [sp, #24]
   13ec0:	add	sp, sp, #32
   13ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec8:	mov	r1, #8
   13ecc:	mvn	r3, #-2147483648	; 0x80000000
   13ed0:	str	r1, [sp]
   13ed4:	add	r1, sp, #52	; 0x34
   13ed8:	bl	16a2c <__assert_fail@plt+0x5884>
   13edc:	ldrd	r2, [r7, #8]
   13ee0:	mov	r6, r0
   13ee4:	str	r0, [r7]
   13ee8:	strd	r2, [r0]
   13eec:	b	13da8 <__assert_fail@plt+0x2c00>
   13ef0:	bl	11184 <abort@plt>
   13ef4:	strd	r4, [sp, #-16]!
   13ef8:	mov	r5, r0
   13efc:	str	r6, [sp, #8]
   13f00:	str	lr, [sp, #12]
   13f04:	bl	110a0 <__errno_location@plt>
   13f08:	mov	r4, r0
   13f0c:	cmp	r5, #0
   13f10:	ldr	r0, [pc, #32]	; 13f38 <__assert_fail@plt+0x2d90>
   13f14:	mov	r1, #48	; 0x30
   13f18:	movne	r0, r5
   13f1c:	ldr	r6, [r4]
   13f20:	bl	16bcc <__assert_fail@plt+0x5a24>
   13f24:	str	r6, [r4]
   13f28:	ldrd	r4, [sp]
   13f2c:	ldr	r6, [sp, #8]
   13f30:	add	sp, sp, #12
   13f34:	pop	{pc}		; (ldr pc, [sp], #4)
   13f38:	andeq	sl, r2, ip, lsl #5
   13f3c:	ldr	r3, [pc, #12]	; 13f50 <__assert_fail@plt+0x2da8>
   13f40:	cmp	r0, #0
   13f44:	moveq	r0, r3
   13f48:	ldr	r0, [r0]
   13f4c:	bx	lr
   13f50:	andeq	sl, r2, ip, lsl #5
   13f54:	ldr	r3, [pc, #12]	; 13f68 <__assert_fail@plt+0x2dc0>
   13f58:	cmp	r0, #0
   13f5c:	moveq	r0, r3
   13f60:	str	r1, [r0]
   13f64:	bx	lr
   13f68:	andeq	sl, r2, ip, lsl #5
   13f6c:	ldr	r3, [pc, #52]	; 13fa8 <__assert_fail@plt+0x2e00>
   13f70:	cmp	r0, #0
   13f74:	push	{lr}		; (str lr, [sp, #-4]!)
   13f78:	lsr	lr, r1, #5
   13f7c:	and	r1, r1, #31
   13f80:	moveq	r0, r3
   13f84:	add	r3, r0, #8
   13f88:	ldr	ip, [r3, lr, lsl #2]
   13f8c:	lsr	r0, ip, r1
   13f90:	eor	r2, r2, r0
   13f94:	and	r0, r0, #1
   13f98:	and	r2, r2, #1
   13f9c:	eor	r1, ip, r2, lsl r1
   13fa0:	str	r1, [r3, lr, lsl #2]
   13fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fa8:	andeq	sl, r2, ip, lsl #5
   13fac:	ldr	r3, [pc, #16]	; 13fc4 <__assert_fail@plt+0x2e1c>
   13fb0:	cmp	r0, #0
   13fb4:	movne	r3, r0
   13fb8:	ldr	r0, [r3, #4]
   13fbc:	str	r1, [r3, #4]
   13fc0:	bx	lr
   13fc4:	andeq	sl, r2, ip, lsl #5
   13fc8:	ldr	r3, [pc, #48]	; 14000 <__assert_fail@plt+0x2e58>
   13fcc:	cmp	r0, #0
   13fd0:	mov	ip, #10
   13fd4:	moveq	r0, r3
   13fd8:	cmp	r2, #0
   13fdc:	cmpne	r1, #0
   13fe0:	str	ip, [r0]
   13fe4:	beq	13ff4 <__assert_fail@plt+0x2e4c>
   13fe8:	str	r1, [r0, #40]	; 0x28
   13fec:	str	r2, [r0, #44]	; 0x2c
   13ff0:	bx	lr
   13ff4:	str	r4, [sp, #-8]!
   13ff8:	str	lr, [sp, #4]
   13ffc:	bl	11184 <abort@plt>
   14000:	andeq	sl, r2, ip, lsl #5
   14004:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14008:	strd	r6, [sp, #8]
   1400c:	mov	r7, r0
   14010:	mov	r6, r1
   14014:	strd	r8, [sp, #16]
   14018:	mov	r8, r2
   1401c:	mov	r9, r3
   14020:	str	lr, [sp, #24]
   14024:	sub	sp, sp, #28
   14028:	ldr	r4, [sp, #56]	; 0x38
   1402c:	ldr	ip, [pc, #104]	; 1409c <__assert_fail@plt+0x2ef4>
   14030:	cmp	r4, #0
   14034:	moveq	r4, ip
   14038:	bl	110a0 <__errno_location@plt>
   1403c:	ldr	ip, [r4, #44]	; 0x2c
   14040:	mov	r5, r0
   14044:	mov	r1, r6
   14048:	add	lr, r4, #8
   1404c:	mov	r3, r9
   14050:	ldr	r6, [r5]
   14054:	mov	r2, r8
   14058:	mov	r0, r7
   1405c:	str	ip, [sp, #16]
   14060:	ldr	ip, [r4, #40]	; 0x28
   14064:	str	lr, [sp, #8]
   14068:	str	ip, [sp, #12]
   1406c:	ldr	ip, [r4, #4]
   14070:	str	ip, [sp, #4]
   14074:	ldr	ip, [r4]
   14078:	str	ip, [sp]
   1407c:	bl	12320 <__assert_fail@plt+0x1178>
   14080:	str	r6, [r5]
   14084:	add	sp, sp, #28
   14088:	ldrd	r4, [sp]
   1408c:	ldrd	r6, [sp, #8]
   14090:	ldrd	r8, [sp, #16]
   14094:	add	sp, sp, #24
   14098:	pop	{pc}		; (ldr pc, [sp], #4)
   1409c:	andeq	sl, r2, ip, lsl #5
   140a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140a4:	cmp	r2, #0
   140a8:	ldr	r4, [pc, #192]	; 14170 <__assert_fail@plt+0x2fc8>
   140ac:	movne	r4, r2
   140b0:	strd	r6, [sp, #8]
   140b4:	strd	r8, [sp, #16]
   140b8:	mov	r9, r1
   140bc:	mov	r8, r0
   140c0:	strd	sl, [sp, #24]
   140c4:	str	lr, [sp, #32]
   140c8:	sub	sp, sp, #36	; 0x24
   140cc:	bl	110a0 <__errno_location@plt>
   140d0:	ldr	r5, [r4, #4]
   140d4:	mov	r6, r0
   140d8:	add	r7, r4, #8
   140dc:	mov	r1, #0
   140e0:	mov	r3, r9
   140e4:	ldr	ip, [r4, #44]	; 0x2c
   140e8:	mov	r2, r8
   140ec:	mov	r0, r1
   140f0:	ldr	sl, [r6]
   140f4:	orr	r5, r5, #1
   140f8:	str	ip, [sp, #16]
   140fc:	ldr	ip, [r4, #40]	; 0x28
   14100:	stmib	sp, {r5, r7, ip}
   14104:	ldr	ip, [r4]
   14108:	str	ip, [sp]
   1410c:	bl	12320 <__assert_fail@plt+0x1178>
   14110:	add	r1, r0, #1
   14114:	mov	r0, r1
   14118:	str	r1, [sp, #28]
   1411c:	bl	16788 <__assert_fail@plt+0x55e0>
   14120:	ldr	ip, [r4, #44]	; 0x2c
   14124:	mov	fp, r0
   14128:	mov	r3, r9
   1412c:	mov	r2, r8
   14130:	ldr	r1, [sp, #28]
   14134:	str	ip, [sp, #16]
   14138:	ldr	ip, [r4, #40]	; 0x28
   1413c:	stmib	sp, {r5, r7, ip}
   14140:	ldr	ip, [r4]
   14144:	str	ip, [sp]
   14148:	bl	12320 <__assert_fail@plt+0x1178>
   1414c:	mov	r0, fp
   14150:	str	sl, [r6]
   14154:	add	sp, sp, #36	; 0x24
   14158:	ldrd	r4, [sp]
   1415c:	ldrd	r6, [sp, #8]
   14160:	ldrd	r8, [sp, #16]
   14164:	ldrd	sl, [sp, #24]
   14168:	add	sp, sp, #32
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	andeq	sl, r2, ip, lsl #5
   14174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14178:	cmp	r3, #0
   1417c:	ldr	r4, [pc, #220]	; 14260 <__assert_fail@plt+0x30b8>
   14180:	movne	r4, r3
   14184:	strd	r6, [sp, #8]
   14188:	mov	r6, r2
   1418c:	strd	r8, [sp, #16]
   14190:	mov	r9, r0
   14194:	strd	sl, [sp, #24]
   14198:	mov	sl, r1
   1419c:	str	lr, [sp, #32]
   141a0:	sub	sp, sp, #44	; 0x2c
   141a4:	bl	110a0 <__errno_location@plt>
   141a8:	ldr	r5, [r4, #4]
   141ac:	mov	r7, r0
   141b0:	mov	r1, #0
   141b4:	add	r8, r4, #8
   141b8:	mov	r3, sl
   141bc:	ldr	ip, [r4, #44]	; 0x2c
   141c0:	mov	r2, r9
   141c4:	mov	r0, r1
   141c8:	ldr	lr, [r7]
   141cc:	cmp	r6, r1
   141d0:	orreq	r5, r5, #1
   141d4:	str	ip, [sp, #16]
   141d8:	ldr	ip, [r4, #40]	; 0x28
   141dc:	stmib	sp, {r5, r8, ip}
   141e0:	ldr	ip, [r4]
   141e4:	str	lr, [sp, #28]
   141e8:	str	ip, [sp]
   141ec:	bl	12320 <__assert_fail@plt+0x1178>
   141f0:	add	r1, r0, #1
   141f4:	mov	fp, r0
   141f8:	mov	r0, r1
   141fc:	str	r1, [sp, #36]	; 0x24
   14200:	bl	16788 <__assert_fail@plt+0x55e0>
   14204:	ldr	ip, [r4, #44]	; 0x2c
   14208:	mov	r3, sl
   1420c:	mov	r2, r9
   14210:	ldr	r1, [sp, #36]	; 0x24
   14214:	str	ip, [sp, #16]
   14218:	ldr	ip, [r4, #40]	; 0x28
   1421c:	str	r0, [sp, #32]
   14220:	stmib	sp, {r5, r8, ip}
   14224:	ldr	ip, [r4]
   14228:	str	ip, [sp]
   1422c:	bl	12320 <__assert_fail@plt+0x1178>
   14230:	ldr	lr, [sp, #28]
   14234:	cmp	r6, #0
   14238:	ldr	r0, [sp, #32]
   1423c:	str	lr, [r7]
   14240:	strne	fp, [r6]
   14244:	add	sp, sp, #44	; 0x2c
   14248:	ldrd	r4, [sp]
   1424c:	ldrd	r6, [sp, #8]
   14250:	ldrd	r8, [sp, #16]
   14254:	ldrd	sl, [sp, #24]
   14258:	add	sp, sp, #32
   1425c:	pop	{pc}		; (ldr pc, [sp], #4)
   14260:	andeq	sl, r2, ip, lsl #5
   14264:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14268:	movw	r5, #41248	; 0xa120
   1426c:	movt	r5, #2
   14270:	ldr	r3, [r5, #4]
   14274:	strd	r6, [sp, #8]
   14278:	str	r8, [sp, #16]
   1427c:	str	lr, [sp, #20]
   14280:	ldr	r7, [r5]
   14284:	cmp	r3, #1
   14288:	ble	142ac <__assert_fail@plt+0x3104>
   1428c:	mov	r4, #1
   14290:	add	r6, r7, #4
   14294:	ldr	r0, [r6, r4, lsl #3]
   14298:	add	r4, r4, #1
   1429c:	bl	1209c <__assert_fail@plt+0xef4>
   142a0:	ldr	r3, [r5, #4]
   142a4:	cmp	r3, r4
   142a8:	bgt	14294 <__assert_fail@plt+0x30ec>
   142ac:	ldr	r0, [r7, #4]
   142b0:	movw	r4, #41356	; 0xa18c
   142b4:	movt	r4, #2
   142b8:	cmp	r0, r4
   142bc:	beq	142d0 <__assert_fail@plt+0x3128>
   142c0:	bl	1209c <__assert_fail@plt+0xef4>
   142c4:	mov	r3, #256	; 0x100
   142c8:	str	r3, [r5, #8]
   142cc:	str	r4, [r5, #12]
   142d0:	ldr	r4, [pc, #44]	; 14304 <__assert_fail@plt+0x315c>
   142d4:	cmp	r7, r4
   142d8:	beq	142e8 <__assert_fail@plt+0x3140>
   142dc:	mov	r0, r7
   142e0:	bl	1209c <__assert_fail@plt+0xef4>
   142e4:	str	r4, [r5]
   142e8:	mov	r3, #1
   142ec:	ldrd	r6, [sp, #8]
   142f0:	str	r3, [r5, #4]
   142f4:	ldrd	r4, [sp]
   142f8:	ldr	r8, [sp, #16]
   142fc:	add	sp, sp, #20
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	andeq	sl, r2, r8, lsr #2
   14308:	ldr	r3, [pc, #4]	; 14314 <__assert_fail@plt+0x316c>
   1430c:	mvn	r2, #0
   14310:	b	13d0c <__assert_fail@plt+0x2b64>
   14314:	andeq	sl, r2, ip, lsl #5
   14318:	ldr	r3, [pc]	; 14320 <__assert_fail@plt+0x3178>
   1431c:	b	13d0c <__assert_fail@plt+0x2b64>
   14320:	andeq	sl, r2, ip, lsl #5
   14324:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14328:	movw	r4, #41248	; 0xa120
   1432c:	movt	r4, #2
   14330:	strd	r6, [sp, #8]
   14334:	strd	r8, [sp, #16]
   14338:	strd	sl, [sp, #24]
   1433c:	mov	sl, r0
   14340:	str	lr, [sp, #32]
   14344:	sub	sp, sp, #44	; 0x2c
   14348:	bl	110a0 <__errno_location@plt>
   1434c:	ldr	r3, [r0]
   14350:	mov	r8, r0
   14354:	ldr	r2, [r4, #4]
   14358:	ldr	r5, [r4]
   1435c:	str	r3, [sp, #28]
   14360:	cmp	r2, #0
   14364:	bgt	143c0 <__assert_fail@plt+0x3218>
   14368:	add	r3, r4, #8
   1436c:	str	r2, [sp, #36]	; 0x24
   14370:	rsb	r2, r2, #1
   14374:	cmp	r5, r3
   14378:	beq	1448c <__assert_fail@plt+0x32e4>
   1437c:	mov	r1, #8
   14380:	mov	r0, r5
   14384:	mvn	r3, #-2147483648	; 0x80000000
   14388:	str	r1, [sp]
   1438c:	add	r1, sp, #36	; 0x24
   14390:	bl	16a2c <__assert_fail@plt+0x5884>
   14394:	mov	r5, r0
   14398:	str	r0, [r4]
   1439c:	ldr	r0, [r4, #4]
   143a0:	mov	r1, #0
   143a4:	ldr	r2, [sp, #36]	; 0x24
   143a8:	sub	r2, r2, r0
   143ac:	add	r0, r5, r0, lsl #3
   143b0:	lsl	r2, r2, #3
   143b4:	bl	110c4 <memset@plt>
   143b8:	ldr	r3, [sp, #36]	; 0x24
   143bc:	str	r3, [r4, #4]
   143c0:	movw	r4, #41356	; 0xa18c
   143c4:	movt	r4, #2
   143c8:	ldr	r9, [r5]
   143cc:	add	fp, r4, #264	; 0x108
   143d0:	mvn	r3, #0
   143d4:	ldr	r7, [r4, #260]	; 0x104
   143d8:	mov	r2, sl
   143dc:	ldr	r6, [r5, #4]
   143e0:	str	fp, [sp, #8]
   143e4:	mov	r1, r9
   143e8:	ldr	ip, [r4, #256]	; 0x100
   143ec:	orr	r7, r7, #1
   143f0:	ldr	lr, [r4, #300]	; 0x12c
   143f4:	mov	r0, r6
   143f8:	str	ip, [sp]
   143fc:	str	r7, [sp, #4]
   14400:	str	lr, [sp, #16]
   14404:	ldr	ip, [r4, #296]	; 0x128
   14408:	str	ip, [sp, #12]
   1440c:	bl	12320 <__assert_fail@plt+0x1178>
   14410:	cmp	r9, r0
   14414:	bhi	14464 <__assert_fail@plt+0x32bc>
   14418:	add	r9, r0, #1
   1441c:	cmp	r6, r4
   14420:	str	r9, [r5]
   14424:	beq	14430 <__assert_fail@plt+0x3288>
   14428:	mov	r0, r6
   1442c:	bl	1209c <__assert_fail@plt+0xef4>
   14430:	mov	r0, r9
   14434:	bl	16788 <__assert_fail@plt+0x55e0>
   14438:	ldr	r3, [r4, #256]	; 0x100
   1443c:	mov	r2, sl
   14440:	mov	r1, r9
   14444:	mov	r6, r0
   14448:	ldr	lr, [r4, #296]	; 0x128
   1444c:	ldr	ip, [r4, #300]	; 0x12c
   14450:	str	r0, [r5, #4]
   14454:	stm	sp, {r3, r7, fp, lr}
   14458:	mvn	r3, #0
   1445c:	str	ip, [sp, #16]
   14460:	bl	12320 <__assert_fail@plt+0x1178>
   14464:	ldr	r3, [sp, #28]
   14468:	mov	r0, r6
   1446c:	str	r3, [r8]
   14470:	add	sp, sp, #44	; 0x2c
   14474:	ldrd	r4, [sp]
   14478:	ldrd	r6, [sp, #8]
   1447c:	ldrd	r8, [sp, #16]
   14480:	ldrd	sl, [sp, #24]
   14484:	add	sp, sp, #32
   14488:	pop	{pc}		; (ldr pc, [sp], #4)
   1448c:	mov	r0, #8
   14490:	mvn	r3, #-2147483648	; 0x80000000
   14494:	add	r1, sp, #36	; 0x24
   14498:	str	r0, [sp]
   1449c:	mov	r0, #0
   144a0:	bl	16a2c <__assert_fail@plt+0x5884>
   144a4:	ldrd	r2, [r4, #8]
   144a8:	mov	r5, r0
   144ac:	str	r0, [r4]
   144b0:	strd	r2, [r0]
   144b4:	b	1439c <__assert_fail@plt+0x31f4>
   144b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144bc:	movw	r4, #41248	; 0xa120
   144c0:	movt	r4, #2
   144c4:	strd	r6, [sp, #8]
   144c8:	strd	r8, [sp, #16]
   144cc:	strd	sl, [sp, #24]
   144d0:	mov	sl, r0
   144d4:	mov	fp, r1
   144d8:	str	lr, [sp, #32]
   144dc:	sub	sp, sp, #44	; 0x2c
   144e0:	bl	110a0 <__errno_location@plt>
   144e4:	ldr	r3, [r0]
   144e8:	mov	r8, r0
   144ec:	ldr	r2, [r4, #4]
   144f0:	ldr	r5, [r4]
   144f4:	str	r3, [sp, #28]
   144f8:	cmp	r2, #0
   144fc:	bgt	14558 <__assert_fail@plt+0x33b0>
   14500:	add	r3, r4, #8
   14504:	str	r2, [sp, #36]	; 0x24
   14508:	rsb	r2, r2, #1
   1450c:	cmp	r5, r3
   14510:	beq	14634 <__assert_fail@plt+0x348c>
   14514:	mov	r1, #8
   14518:	mov	r0, r5
   1451c:	mvn	r3, #-2147483648	; 0x80000000
   14520:	str	r1, [sp]
   14524:	add	r1, sp, #36	; 0x24
   14528:	bl	16a2c <__assert_fail@plt+0x5884>
   1452c:	mov	r5, r0
   14530:	str	r0, [r4]
   14534:	ldr	r0, [r4, #4]
   14538:	mov	r1, #0
   1453c:	ldr	r2, [sp, #36]	; 0x24
   14540:	sub	r2, r2, r0
   14544:	add	r0, r5, r0, lsl #3
   14548:	lsl	r2, r2, #3
   1454c:	bl	110c4 <memset@plt>
   14550:	ldr	r3, [sp, #36]	; 0x24
   14554:	str	r3, [r4, #4]
   14558:	movw	r4, #41356	; 0xa18c
   1455c:	movt	r4, #2
   14560:	ldr	r9, [r5]
   14564:	add	r0, r4, #264	; 0x108
   14568:	mov	r3, fp
   1456c:	ldr	r7, [r4, #260]	; 0x104
   14570:	mov	r2, sl
   14574:	ldr	r6, [r5, #4]
   14578:	str	r0, [sp, #8]
   1457c:	mov	r1, r9
   14580:	ldr	ip, [r4, #256]	; 0x100
   14584:	orr	r7, r7, #1
   14588:	ldr	lr, [r4, #300]	; 0x12c
   1458c:	mov	r0, r6
   14590:	str	ip, [sp]
   14594:	str	r7, [sp, #4]
   14598:	str	lr, [sp, #16]
   1459c:	ldr	ip, [r4, #296]	; 0x128
   145a0:	str	ip, [sp, #12]
   145a4:	bl	12320 <__assert_fail@plt+0x1178>
   145a8:	cmp	r9, r0
   145ac:	bhi	1460c <__assert_fail@plt+0x3464>
   145b0:	add	r9, r0, #1
   145b4:	cmp	r6, r4
   145b8:	str	r9, [r5]
   145bc:	beq	145c8 <__assert_fail@plt+0x3420>
   145c0:	mov	r0, r6
   145c4:	bl	1209c <__assert_fail@plt+0xef4>
   145c8:	mov	r0, r9
   145cc:	bl	16788 <__assert_fail@plt+0x55e0>
   145d0:	ldr	ip, [r4, #256]	; 0x100
   145d4:	mov	r1, r9
   145d8:	mov	r3, fp
   145dc:	mov	r2, sl
   145e0:	mov	r6, r0
   145e4:	ldr	r9, [r4, #296]	; 0x128
   145e8:	ldr	lr, [r4, #300]	; 0x12c
   145ec:	str	r0, [r5, #4]
   145f0:	str	ip, [sp]
   145f4:	ldr	ip, [pc, #100]	; 14660 <__assert_fail@plt+0x34b8>
   145f8:	str	r7, [sp, #4]
   145fc:	str	ip, [sp, #8]
   14600:	str	r9, [sp, #12]
   14604:	str	lr, [sp, #16]
   14608:	bl	12320 <__assert_fail@plt+0x1178>
   1460c:	ldr	r3, [sp, #28]
   14610:	mov	r0, r6
   14614:	str	r3, [r8]
   14618:	add	sp, sp, #44	; 0x2c
   1461c:	ldrd	r4, [sp]
   14620:	ldrd	r6, [sp, #8]
   14624:	ldrd	r8, [sp, #16]
   14628:	ldrd	sl, [sp, #24]
   1462c:	add	sp, sp, #32
   14630:	pop	{pc}		; (ldr pc, [sp], #4)
   14634:	mov	r0, #8
   14638:	mvn	r3, #-2147483648	; 0x80000000
   1463c:	add	r1, sp, #36	; 0x24
   14640:	str	r0, [sp]
   14644:	mov	r0, #0
   14648:	bl	16a2c <__assert_fail@plt+0x5884>
   1464c:	ldrd	r2, [r4, #8]
   14650:	mov	r5, r0
   14654:	str	r0, [r4]
   14658:	strd	r2, [r0]
   1465c:	b	14534 <__assert_fail@plt+0x338c>
   14660:	muleq	r2, r4, r2
   14664:	strd	r4, [sp, #-20]!	; 0xffffffec
   14668:	mov	r4, #0
   1466c:	mov	r5, #0
   14670:	strd	r6, [sp, #8]
   14674:	cmp	r1, #10
   14678:	str	lr, [sp, #16]
   1467c:	sub	sp, sp, #100	; 0x64
   14680:	strd	r4, [sp, #48]	; 0x30
   14684:	beq	146cc <__assert_fail@plt+0x3524>
   14688:	mov	r3, sp
   1468c:	strd	r4, [sp, #8]
   14690:	str	r1, [sp, #48]	; 0x30
   14694:	mov	r1, r2
   14698:	mvn	r2, #0
   1469c:	ldrd	r6, [sp, #48]	; 0x30
   146a0:	strd	r6, [sp]
   146a4:	strd	r4, [sp, #16]
   146a8:	strd	r4, [sp, #24]
   146ac:	strd	r4, [sp, #32]
   146b0:	strd	r4, [sp, #40]	; 0x28
   146b4:	bl	13d0c <__assert_fail@plt+0x2b64>
   146b8:	add	sp, sp, #100	; 0x64
   146bc:	ldrd	r4, [sp]
   146c0:	ldrd	r6, [sp, #8]
   146c4:	add	sp, sp, #16
   146c8:	pop	{pc}		; (ldr pc, [sp], #4)
   146cc:	bl	11184 <abort@plt>
   146d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   146d4:	mov	r4, #0
   146d8:	mov	r5, #0
   146dc:	strd	r6, [sp, #8]
   146e0:	cmp	r1, #10
   146e4:	str	lr, [sp, #16]
   146e8:	sub	sp, sp, #100	; 0x64
   146ec:	strd	r4, [sp, #48]	; 0x30
   146f0:	beq	1473c <__assert_fail@plt+0x3594>
   146f4:	mov	ip, r2
   146f8:	mov	r2, r3
   146fc:	strd	r4, [sp, #8]
   14700:	str	r1, [sp, #48]	; 0x30
   14704:	mov	r3, sp
   14708:	mov	r1, ip
   1470c:	ldrd	r6, [sp, #48]	; 0x30
   14710:	strd	r6, [sp]
   14714:	strd	r4, [sp, #16]
   14718:	strd	r4, [sp, #24]
   1471c:	strd	r4, [sp, #32]
   14720:	strd	r4, [sp, #40]	; 0x28
   14724:	bl	13d0c <__assert_fail@plt+0x2b64>
   14728:	add	sp, sp, #100	; 0x64
   1472c:	ldrd	r4, [sp]
   14730:	ldrd	r6, [sp, #8]
   14734:	add	sp, sp, #16
   14738:	pop	{pc}		; (ldr pc, [sp], #4)
   1473c:	bl	11184 <abort@plt>
   14740:	mov	r2, #0
   14744:	mov	r3, #0
   14748:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1474c:	strd	r6, [sp, #8]
   14750:	cmp	r0, #10
   14754:	strd	r8, [sp, #16]
   14758:	strd	sl, [sp, #24]
   1475c:	str	lr, [sp, #32]
   14760:	sub	sp, sp, #124	; 0x7c
   14764:	strd	r2, [sp, #72]	; 0x48
   14768:	strd	r2, [sp, #80]	; 0x50
   1476c:	strd	r2, [sp, #88]	; 0x58
   14770:	strd	r2, [sp, #96]	; 0x60
   14774:	strd	r2, [sp, #104]	; 0x68
   14778:	strd	r2, [sp, #112]	; 0x70
   1477c:	beq	14920 <__assert_fail@plt+0x3778>
   14780:	mov	r6, r1
   14784:	movw	r4, #41248	; 0xa120
   14788:	movt	r4, #2
   1478c:	str	r0, [sp, #72]	; 0x48
   14790:	ldrd	r0, [sp, #72]	; 0x48
   14794:	strd	r0, [sp, #24]
   14798:	strd	r2, [sp, #32]
   1479c:	strd	r2, [sp, #40]	; 0x28
   147a0:	strd	r2, [sp, #48]	; 0x30
   147a4:	strd	r2, [sp, #56]	; 0x38
   147a8:	strd	r2, [sp, #64]	; 0x40
   147ac:	bl	110a0 <__errno_location@plt>
   147b0:	mov	r8, r0
   147b4:	ldr	r5, [r4]
   147b8:	ldr	r2, [r4, #4]
   147bc:	ldr	r9, [r0]
   147c0:	cmp	r2, #0
   147c4:	bgt	14820 <__assert_fail@plt+0x3678>
   147c8:	add	r3, r4, #8
   147cc:	str	r2, [sp, #72]	; 0x48
   147d0:	rsb	r2, r2, #1
   147d4:	cmp	r5, r3
   147d8:	beq	148f4 <__assert_fail@plt+0x374c>
   147dc:	mov	r3, #8
   147e0:	mov	r0, r5
   147e4:	add	r1, sp, #72	; 0x48
   147e8:	str	r3, [sp]
   147ec:	mvn	r3, #-2147483648	; 0x80000000
   147f0:	bl	16a2c <__assert_fail@plt+0x5884>
   147f4:	mov	r5, r0
   147f8:	str	r0, [r4]
   147fc:	ldr	r0, [r4, #4]
   14800:	mov	r1, #0
   14804:	ldr	r2, [sp, #72]	; 0x48
   14808:	sub	r2, r2, r0
   1480c:	add	r0, r5, r0, lsl #3
   14810:	lsl	r2, r2, #3
   14814:	bl	110c4 <memset@plt>
   14818:	ldr	r3, [sp, #72]	; 0x48
   1481c:	str	r3, [r4, #4]
   14820:	ldr	sl, [r5]
   14824:	add	r0, sp, #32
   14828:	mvn	r3, #0
   1482c:	mov	r2, r6
   14830:	ldr	r7, [sp, #28]
   14834:	ldr	r4, [r5, #4]
   14838:	mov	r1, sl
   1483c:	str	r0, [sp, #8]
   14840:	ldr	lr, [sp, #24]
   14844:	orr	r7, r7, #1
   14848:	ldr	ip, [sp, #64]	; 0x40
   1484c:	mov	r0, r4
   14850:	ldr	fp, [sp, #68]	; 0x44
   14854:	str	lr, [sp]
   14858:	str	r7, [sp, #4]
   1485c:	str	ip, [sp, #12]
   14860:	str	fp, [sp, #16]
   14864:	bl	12320 <__assert_fail@plt+0x1178>
   14868:	cmp	sl, r0
   1486c:	bhi	148d0 <__assert_fail@plt+0x3728>
   14870:	add	sl, r0, #1
   14874:	movw	r3, #41356	; 0xa18c
   14878:	movt	r3, #2
   1487c:	cmp	r4, r3
   14880:	str	sl, [r5]
   14884:	beq	14890 <__assert_fail@plt+0x36e8>
   14888:	mov	r0, r4
   1488c:	bl	1209c <__assert_fail@plt+0xef4>
   14890:	mov	r0, sl
   14894:	bl	16788 <__assert_fail@plt+0x55e0>
   14898:	ldr	r3, [sp, #24]
   1489c:	mov	r2, r6
   148a0:	mov	r1, sl
   148a4:	mov	r4, r0
   148a8:	ldr	lr, [sp, #64]	; 0x40
   148ac:	ldr	ip, [sp, #68]	; 0x44
   148b0:	str	r0, [r5, #4]
   148b4:	add	r5, sp, #32
   148b8:	stm	sp, {r3, r7}
   148bc:	mvn	r3, #0
   148c0:	str	r5, [sp, #8]
   148c4:	str	lr, [sp, #12]
   148c8:	str	ip, [sp, #16]
   148cc:	bl	12320 <__assert_fail@plt+0x1178>
   148d0:	mov	r0, r4
   148d4:	str	r9, [r8]
   148d8:	add	sp, sp, #124	; 0x7c
   148dc:	ldrd	r4, [sp]
   148e0:	ldrd	r6, [sp, #8]
   148e4:	ldrd	r8, [sp, #16]
   148e8:	ldrd	sl, [sp, #24]
   148ec:	add	sp, sp, #32
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	mov	r0, #8
   148f8:	mvn	r3, #-2147483648	; 0x80000000
   148fc:	add	r1, sp, #72	; 0x48
   14900:	str	r0, [sp]
   14904:	mov	r0, #0
   14908:	bl	16a2c <__assert_fail@plt+0x5884>
   1490c:	ldrd	r2, [r4, #8]
   14910:	mov	r5, r0
   14914:	str	r0, [r4]
   14918:	strd	r2, [r0]
   1491c:	b	147fc <__assert_fail@plt+0x3654>
   14920:	bl	11184 <abort@plt>
   14924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14928:	cmp	r0, #10
   1492c:	strd	r6, [sp, #8]
   14930:	mov	r6, #0
   14934:	mov	r7, #0
   14938:	strd	r8, [sp, #16]
   1493c:	strd	sl, [sp, #24]
   14940:	str	lr, [sp, #32]
   14944:	sub	sp, sp, #124	; 0x7c
   14948:	strd	r6, [sp, #72]	; 0x48
   1494c:	strd	r6, [sp, #80]	; 0x50
   14950:	strd	r6, [sp, #88]	; 0x58
   14954:	strd	r6, [sp, #96]	; 0x60
   14958:	strd	r6, [sp, #104]	; 0x68
   1495c:	strd	r6, [sp, #112]	; 0x70
   14960:	beq	14b0c <__assert_fail@plt+0x3964>
   14964:	mov	sl, r2
   14968:	movw	r5, #41248	; 0xa120
   1496c:	movt	r5, #2
   14970:	str	r0, [sp, #72]	; 0x48
   14974:	mov	r9, r1
   14978:	ldrd	r2, [sp, #72]	; 0x48
   1497c:	strd	r2, [sp, #24]
   14980:	strd	r6, [sp, #32]
   14984:	strd	r6, [sp, #40]	; 0x28
   14988:	strd	r6, [sp, #48]	; 0x30
   1498c:	strd	r6, [sp, #56]	; 0x38
   14990:	strd	r6, [sp, #64]	; 0x40
   14994:	bl	110a0 <__errno_location@plt>
   14998:	mov	r7, r0
   1499c:	ldr	r4, [r5]
   149a0:	ldr	r2, [r5, #4]
   149a4:	ldr	fp, [r0]
   149a8:	cmp	r2, #0
   149ac:	bgt	14a08 <__assert_fail@plt+0x3860>
   149b0:	add	r3, r5, #8
   149b4:	str	r2, [sp, #72]	; 0x48
   149b8:	rsb	r2, r2, #1
   149bc:	cmp	r4, r3
   149c0:	beq	14ae0 <__assert_fail@plt+0x3938>
   149c4:	mov	r3, #8
   149c8:	mov	r0, r4
   149cc:	add	r1, sp, #72	; 0x48
   149d0:	str	r3, [sp]
   149d4:	mvn	r3, #-2147483648	; 0x80000000
   149d8:	bl	16a2c <__assert_fail@plt+0x5884>
   149dc:	mov	r4, r0
   149e0:	str	r0, [r5]
   149e4:	ldr	r0, [r5, #4]
   149e8:	mov	r1, #0
   149ec:	ldr	r2, [sp, #72]	; 0x48
   149f0:	sub	r2, r2, r0
   149f4:	add	r0, r4, r0, lsl #3
   149f8:	lsl	r2, r2, #3
   149fc:	bl	110c4 <memset@plt>
   14a00:	ldr	r3, [sp, #72]	; 0x48
   14a04:	str	r3, [r5, #4]
   14a08:	ldr	ip, [sp, #24]
   14a0c:	add	r0, sp, #32
   14a10:	mov	r3, sl
   14a14:	mov	r2, r9
   14a18:	ldr	r6, [sp, #28]
   14a1c:	ldr	r8, [r4]
   14a20:	ldr	r5, [r4, #4]
   14a24:	str	ip, [sp]
   14a28:	orr	r6, r6, #1
   14a2c:	ldr	ip, [sp, #64]	; 0x40
   14a30:	mov	r1, r8
   14a34:	str	r6, [sp, #4]
   14a38:	ldr	lr, [sp, #68]	; 0x44
   14a3c:	str	r0, [sp, #8]
   14a40:	mov	r0, r5
   14a44:	str	ip, [sp, #12]
   14a48:	str	lr, [sp, #16]
   14a4c:	bl	12320 <__assert_fail@plt+0x1178>
   14a50:	cmp	r8, r0
   14a54:	bhi	14abc <__assert_fail@plt+0x3914>
   14a58:	add	r8, r0, #1
   14a5c:	movw	r3, #41356	; 0xa18c
   14a60:	movt	r3, #2
   14a64:	cmp	r5, r3
   14a68:	str	r8, [r4]
   14a6c:	beq	14a78 <__assert_fail@plt+0x38d0>
   14a70:	mov	r0, r5
   14a74:	bl	1209c <__assert_fail@plt+0xef4>
   14a78:	mov	r0, r8
   14a7c:	bl	16788 <__assert_fail@plt+0x55e0>
   14a80:	ldr	lr, [sp, #24]
   14a84:	mov	r1, r8
   14a88:	mov	r3, sl
   14a8c:	mov	r2, r9
   14a90:	mov	r5, r0
   14a94:	ldr	r8, [sp, #64]	; 0x40
   14a98:	ldr	ip, [sp, #68]	; 0x44
   14a9c:	str	r0, [r4, #4]
   14aa0:	str	lr, [sp]
   14aa4:	add	lr, sp, #32
   14aa8:	str	r6, [sp, #4]
   14aac:	str	lr, [sp, #8]
   14ab0:	str	r8, [sp, #12]
   14ab4:	str	ip, [sp, #16]
   14ab8:	bl	12320 <__assert_fail@plt+0x1178>
   14abc:	mov	r0, r5
   14ac0:	str	fp, [r7]
   14ac4:	add	sp, sp, #124	; 0x7c
   14ac8:	ldrd	r4, [sp]
   14acc:	ldrd	r6, [sp, #8]
   14ad0:	ldrd	r8, [sp, #16]
   14ad4:	ldrd	sl, [sp, #24]
   14ad8:	add	sp, sp, #32
   14adc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae0:	mov	r0, #8
   14ae4:	mvn	r3, #-2147483648	; 0x80000000
   14ae8:	add	r1, sp, #72	; 0x48
   14aec:	str	r0, [sp]
   14af0:	mov	r0, #0
   14af4:	bl	16a2c <__assert_fail@plt+0x5884>
   14af8:	ldrd	r2, [r5, #8]
   14afc:	mov	r4, r0
   14b00:	str	r0, [r5]
   14b04:	strd	r2, [r0]
   14b08:	b	149e4 <__assert_fail@plt+0x383c>
   14b0c:	bl	11184 <abort@plt>
   14b10:	ldr	r3, [pc, #492]	; 14d04 <__assert_fail@plt+0x3b5c>
   14b14:	lsr	ip, r2, #5
   14b18:	and	r2, r2, #31
   14b1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b20:	movw	r5, #41248	; 0xa120
   14b24:	movt	r5, #2
   14b28:	strd	r6, [sp, #8]
   14b2c:	strd	r8, [sp, #16]
   14b30:	strd	sl, [sp, #24]
   14b34:	mov	sl, r0
   14b38:	mov	fp, r1
   14b3c:	ldrd	r0, [r3]
   14b40:	str	lr, [sp, #32]
   14b44:	sub	sp, sp, #92	; 0x5c
   14b48:	ldrd	r8, [r3, #8]
   14b4c:	add	r6, sp, #48	; 0x30
   14b50:	strd	r0, [sp, #40]	; 0x28
   14b54:	ldrd	r0, [r3, #16]
   14b58:	strd	r8, [sp, #48]	; 0x30
   14b5c:	ldrd	r8, [r3, #24]
   14b60:	strd	r0, [sp, #56]	; 0x38
   14b64:	ldrd	r0, [r3, #32]
   14b68:	strd	r8, [sp, #64]	; 0x40
   14b6c:	ldrd	r8, [r3, #40]	; 0x28
   14b70:	strd	r0, [sp, #72]	; 0x48
   14b74:	strd	r8, [sp, #80]	; 0x50
   14b78:	ldr	r3, [r6, ip, lsl #2]
   14b7c:	mvn	r1, r3, lsr r2
   14b80:	and	r1, r1, #1
   14b84:	eor	r2, r3, r1, lsl r2
   14b88:	str	r2, [r6, ip, lsl #2]
   14b8c:	bl	110a0 <__errno_location@plt>
   14b90:	ldr	r3, [r0]
   14b94:	mov	r8, r0
   14b98:	ldr	r2, [r5, #4]
   14b9c:	ldr	r4, [r5]
   14ba0:	str	r3, [sp, #28]
   14ba4:	cmp	r2, #0
   14ba8:	bgt	14c04 <__assert_fail@plt+0x3a5c>
   14bac:	add	r3, r5, #8
   14bb0:	str	r2, [sp, #36]	; 0x24
   14bb4:	rsb	r2, r2, #1
   14bb8:	cmp	r4, r3
   14bbc:	beq	14cd8 <__assert_fail@plt+0x3b30>
   14bc0:	mov	r1, #8
   14bc4:	mov	r0, r4
   14bc8:	mvn	r3, #-2147483648	; 0x80000000
   14bcc:	str	r1, [sp]
   14bd0:	add	r1, sp, #36	; 0x24
   14bd4:	bl	16a2c <__assert_fail@plt+0x5884>
   14bd8:	mov	r4, r0
   14bdc:	str	r0, [r5]
   14be0:	ldr	r0, [r5, #4]
   14be4:	mov	r1, #0
   14be8:	ldr	r2, [sp, #36]	; 0x24
   14bec:	sub	r2, r2, r0
   14bf0:	add	r0, r4, r0, lsl #3
   14bf4:	lsl	r2, r2, #3
   14bf8:	bl	110c4 <memset@plt>
   14bfc:	ldr	r3, [sp, #36]	; 0x24
   14c00:	str	r3, [r5, #4]
   14c04:	ldr	ip, [sp, #40]	; 0x28
   14c08:	mov	r3, fp
   14c0c:	mov	r2, sl
   14c10:	ldr	r7, [sp, #44]	; 0x2c
   14c14:	ldr	r9, [r4]
   14c18:	ldr	r5, [r4, #4]
   14c1c:	str	ip, [sp]
   14c20:	orr	r7, r7, #1
   14c24:	ldr	ip, [sp, #80]	; 0x50
   14c28:	mov	r1, r9
   14c2c:	str	r7, [sp, #4]
   14c30:	ldr	lr, [sp, #84]	; 0x54
   14c34:	mov	r0, r5
   14c38:	str	r6, [sp, #8]
   14c3c:	str	ip, [sp, #12]
   14c40:	str	lr, [sp, #16]
   14c44:	bl	12320 <__assert_fail@plt+0x1178>
   14c48:	cmp	r9, r0
   14c4c:	bhi	14cb0 <__assert_fail@plt+0x3b08>
   14c50:	add	r9, r0, #1
   14c54:	movw	r3, #41356	; 0xa18c
   14c58:	movt	r3, #2
   14c5c:	cmp	r5, r3
   14c60:	str	r9, [r4]
   14c64:	beq	14c70 <__assert_fail@plt+0x3ac8>
   14c68:	mov	r0, r5
   14c6c:	bl	1209c <__assert_fail@plt+0xef4>
   14c70:	mov	r0, r9
   14c74:	bl	16788 <__assert_fail@plt+0x55e0>
   14c78:	mov	r1, r9
   14c7c:	ldr	ip, [sp, #40]	; 0x28
   14c80:	mov	r3, fp
   14c84:	mov	r2, sl
   14c88:	mov	r5, r0
   14c8c:	ldr	r9, [sp, #80]	; 0x50
   14c90:	ldr	lr, [sp, #84]	; 0x54
   14c94:	str	r0, [r4, #4]
   14c98:	str	ip, [sp]
   14c9c:	str	r7, [sp, #4]
   14ca0:	str	r6, [sp, #8]
   14ca4:	str	r9, [sp, #12]
   14ca8:	str	lr, [sp, #16]
   14cac:	bl	12320 <__assert_fail@plt+0x1178>
   14cb0:	ldr	r3, [sp, #28]
   14cb4:	mov	r0, r5
   14cb8:	str	r3, [r8]
   14cbc:	add	sp, sp, #92	; 0x5c
   14cc0:	ldrd	r4, [sp]
   14cc4:	ldrd	r6, [sp, #8]
   14cc8:	ldrd	r8, [sp, #16]
   14ccc:	ldrd	sl, [sp, #24]
   14cd0:	add	sp, sp, #32
   14cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd8:	mov	r0, #8
   14cdc:	mvn	r3, #-2147483648	; 0x80000000
   14ce0:	add	r1, sp, #36	; 0x24
   14ce4:	str	r0, [sp]
   14ce8:	mov	r0, #0
   14cec:	bl	16a2c <__assert_fail@plt+0x5884>
   14cf0:	ldrd	r2, [r5, #8]
   14cf4:	mov	r4, r0
   14cf8:	str	r0, [r5]
   14cfc:	strd	r2, [r0]
   14d00:	b	14be0 <__assert_fail@plt+0x3a38>
   14d04:	andeq	sl, r2, ip, lsl #5
   14d08:	ldr	ip, [pc, #476]	; 14eec <__assert_fail@plt+0x3d44>
   14d0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d10:	movw	r4, #41248	; 0xa120
   14d14:	movt	r4, #2
   14d18:	ldrd	r2, [ip, #8]
   14d1c:	strd	r6, [sp, #8]
   14d20:	lsr	r7, r1, #5
   14d24:	mov	r6, r0
   14d28:	strd	r8, [sp, #16]
   14d2c:	str	lr, [sp, #32]
   14d30:	and	lr, r1, #31
   14d34:	ldrd	r0, [ip]
   14d38:	strd	sl, [sp, #24]
   14d3c:	sub	sp, sp, #84	; 0x54
   14d40:	add	r5, sp, #40	; 0x28
   14d44:	strd	r0, [sp, #32]
   14d48:	strd	r2, [sp, #40]	; 0x28
   14d4c:	ldrd	r0, [ip, #16]
   14d50:	ldrd	r2, [ip, #24]
   14d54:	strd	r0, [sp, #48]	; 0x30
   14d58:	ldrd	r0, [ip, #32]
   14d5c:	strd	r2, [sp, #56]	; 0x38
   14d60:	ldrd	r2, [ip, #40]	; 0x28
   14d64:	strd	r0, [sp, #64]	; 0x40
   14d68:	strd	r2, [sp, #72]	; 0x48
   14d6c:	ldr	r1, [r5, r7, lsl #2]
   14d70:	mvn	r3, r1, lsr lr
   14d74:	and	r3, r3, #1
   14d78:	eor	r1, r1, r3, lsl lr
   14d7c:	str	r1, [r5, r7, lsl #2]
   14d80:	bl	110a0 <__errno_location@plt>
   14d84:	mov	r9, r0
   14d88:	ldr	sl, [r0]
   14d8c:	ldr	r2, [r4, #4]
   14d90:	ldr	r7, [r4]
   14d94:	cmp	r2, #0
   14d98:	bgt	14df4 <__assert_fail@plt+0x3c4c>
   14d9c:	add	r3, r4, #8
   14da0:	str	r2, [sp, #28]
   14da4:	rsb	r2, r2, #1
   14da8:	cmp	r7, r3
   14dac:	beq	14ec0 <__assert_fail@plt+0x3d18>
   14db0:	mov	r1, #8
   14db4:	mov	r0, r7
   14db8:	mvn	r3, #-2147483648	; 0x80000000
   14dbc:	str	r1, [sp]
   14dc0:	add	r1, sp, #28
   14dc4:	bl	16a2c <__assert_fail@plt+0x5884>
   14dc8:	mov	r7, r0
   14dcc:	str	r0, [r4]
   14dd0:	ldr	r0, [r4, #4]
   14dd4:	mov	r1, #0
   14dd8:	ldr	r2, [sp, #28]
   14ddc:	sub	r2, r2, r0
   14de0:	add	r0, r7, r0, lsl #3
   14de4:	lsl	r2, r2, #3
   14de8:	bl	110c4 <memset@plt>
   14dec:	ldr	r3, [sp, #28]
   14df0:	str	r3, [r4, #4]
   14df4:	ldr	ip, [sp, #32]
   14df8:	mvn	r3, #0
   14dfc:	mov	r2, r6
   14e00:	ldr	r8, [sp, #36]	; 0x24
   14e04:	ldr	fp, [r7]
   14e08:	ldr	r4, [r7, #4]
   14e0c:	str	ip, [sp]
   14e10:	orr	r8, r8, #1
   14e14:	ldr	ip, [sp, #72]	; 0x48
   14e18:	mov	r1, fp
   14e1c:	str	r8, [sp, #4]
   14e20:	ldr	lr, [sp, #76]	; 0x4c
   14e24:	mov	r0, r4
   14e28:	str	r5, [sp, #8]
   14e2c:	str	ip, [sp, #12]
   14e30:	str	lr, [sp, #16]
   14e34:	bl	12320 <__assert_fail@plt+0x1178>
   14e38:	cmp	fp, r0
   14e3c:	bhi	14e9c <__assert_fail@plt+0x3cf4>
   14e40:	add	fp, r0, #1
   14e44:	movw	r3, #41356	; 0xa18c
   14e48:	movt	r3, #2
   14e4c:	cmp	r4, r3
   14e50:	str	fp, [r7]
   14e54:	beq	14e60 <__assert_fail@plt+0x3cb8>
   14e58:	mov	r0, r4
   14e5c:	bl	1209c <__assert_fail@plt+0xef4>
   14e60:	mov	r0, fp
   14e64:	bl	16788 <__assert_fail@plt+0x55e0>
   14e68:	ldr	r3, [sp, #32]
   14e6c:	mov	r2, r6
   14e70:	mov	r1, fp
   14e74:	mov	r4, r0
   14e78:	ldr	lr, [sp, #72]	; 0x48
   14e7c:	ldr	ip, [sp, #76]	; 0x4c
   14e80:	str	r0, [r7, #4]
   14e84:	stm	sp, {r3, r8}
   14e88:	mvn	r3, #0
   14e8c:	str	r5, [sp, #8]
   14e90:	str	lr, [sp, #12]
   14e94:	str	ip, [sp, #16]
   14e98:	bl	12320 <__assert_fail@plt+0x1178>
   14e9c:	mov	r0, r4
   14ea0:	str	sl, [r9]
   14ea4:	add	sp, sp, #84	; 0x54
   14ea8:	ldrd	r4, [sp]
   14eac:	ldrd	r6, [sp, #8]
   14eb0:	ldrd	r8, [sp, #16]
   14eb4:	ldrd	sl, [sp, #24]
   14eb8:	add	sp, sp, #32
   14ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec0:	mov	r0, #8
   14ec4:	mvn	r3, #-2147483648	; 0x80000000
   14ec8:	add	r1, sp, #28
   14ecc:	str	r0, [sp]
   14ed0:	mov	r0, #0
   14ed4:	bl	16a2c <__assert_fail@plt+0x5884>
   14ed8:	ldrd	r2, [r4, #8]
   14edc:	mov	r7, r0
   14ee0:	str	r0, [r4]
   14ee4:	strd	r2, [r0]
   14ee8:	b	14dd0 <__assert_fail@plt+0x3c28>
   14eec:	andeq	sl, r2, ip, lsl #5
   14ef0:	ldr	ip, [pc, #472]	; 150d0 <__assert_fail@plt+0x3f28>
   14ef4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14ef8:	mov	r5, r0
   14efc:	movw	r4, #41248	; 0xa120
   14f00:	movt	r4, #2
   14f04:	ldrd	r2, [ip]
   14f08:	ldrd	r0, [ip, #8]
   14f0c:	strd	r6, [sp, #8]
   14f10:	strd	r8, [sp, #16]
   14f14:	strd	sl, [sp, #24]
   14f18:	str	lr, [sp, #32]
   14f1c:	sub	sp, sp, #84	; 0x54
   14f20:	strd	r2, [sp, #32]
   14f24:	strd	r0, [sp, #40]	; 0x28
   14f28:	ldr	r6, [sp, #44]	; 0x2c
   14f2c:	ldrd	r2, [ip, #16]
   14f30:	ldrd	r0, [ip, #24]
   14f34:	mvn	lr, r6
   14f38:	and	lr, lr, #67108864	; 0x4000000
   14f3c:	eor	lr, lr, r6
   14f40:	ldrd	r6, [ip, #40]	; 0x28
   14f44:	strd	r2, [sp, #48]	; 0x30
   14f48:	ldrd	r2, [ip, #32]
   14f4c:	str	lr, [sp, #44]	; 0x2c
   14f50:	strd	r0, [sp, #56]	; 0x38
   14f54:	strd	r2, [sp, #64]	; 0x40
   14f58:	strd	r6, [sp, #72]	; 0x48
   14f5c:	bl	110a0 <__errno_location@plt>
   14f60:	mov	r8, r0
   14f64:	ldr	r9, [r0]
   14f68:	ldr	r2, [r4, #4]
   14f6c:	ldr	r6, [r4]
   14f70:	cmp	r2, #0
   14f74:	bgt	14fd0 <__assert_fail@plt+0x3e28>
   14f78:	add	r3, r4, #8
   14f7c:	str	r2, [sp, #28]
   14f80:	rsb	r2, r2, #1
   14f84:	cmp	r6, r3
   14f88:	beq	150a4 <__assert_fail@plt+0x3efc>
   14f8c:	mov	r1, #8
   14f90:	mov	r0, r6
   14f94:	mvn	r3, #-2147483648	; 0x80000000
   14f98:	str	r1, [sp]
   14f9c:	add	r1, sp, #28
   14fa0:	bl	16a2c <__assert_fail@plt+0x5884>
   14fa4:	mov	r6, r0
   14fa8:	str	r0, [r4]
   14fac:	ldr	r0, [r4, #4]
   14fb0:	mov	r1, #0
   14fb4:	ldr	r2, [sp, #28]
   14fb8:	sub	r2, r2, r0
   14fbc:	add	r0, r6, r0, lsl #3
   14fc0:	lsl	r2, r2, #3
   14fc4:	bl	110c4 <memset@plt>
   14fc8:	ldr	r3, [sp, #28]
   14fcc:	str	r3, [r4, #4]
   14fd0:	ldr	sl, [r6]
   14fd4:	add	r0, sp, #40	; 0x28
   14fd8:	mvn	r3, #0
   14fdc:	mov	r2, r5
   14fe0:	ldr	r7, [sp, #36]	; 0x24
   14fe4:	ldr	r4, [r6, #4]
   14fe8:	mov	r1, sl
   14fec:	str	r0, [sp, #8]
   14ff0:	ldr	lr, [sp, #32]
   14ff4:	orr	r7, r7, #1
   14ff8:	ldr	ip, [sp, #72]	; 0x48
   14ffc:	mov	r0, r4
   15000:	ldr	fp, [sp, #76]	; 0x4c
   15004:	str	lr, [sp]
   15008:	str	r7, [sp, #4]
   1500c:	str	ip, [sp, #12]
   15010:	str	fp, [sp, #16]
   15014:	bl	12320 <__assert_fail@plt+0x1178>
   15018:	cmp	sl, r0
   1501c:	bhi	15080 <__assert_fail@plt+0x3ed8>
   15020:	add	sl, r0, #1
   15024:	movw	r3, #41356	; 0xa18c
   15028:	movt	r3, #2
   1502c:	cmp	r4, r3
   15030:	str	sl, [r6]
   15034:	beq	15040 <__assert_fail@plt+0x3e98>
   15038:	mov	r0, r4
   1503c:	bl	1209c <__assert_fail@plt+0xef4>
   15040:	mov	r0, sl
   15044:	bl	16788 <__assert_fail@plt+0x55e0>
   15048:	ldr	r3, [sp, #32]
   1504c:	mov	r2, r5
   15050:	add	r5, sp, #40	; 0x28
   15054:	mov	r1, sl
   15058:	mov	r4, r0
   1505c:	ldr	lr, [sp, #72]	; 0x48
   15060:	ldr	ip, [sp, #76]	; 0x4c
   15064:	str	r0, [r6, #4]
   15068:	stm	sp, {r3, r7}
   1506c:	mvn	r3, #0
   15070:	str	r5, [sp, #8]
   15074:	str	lr, [sp, #12]
   15078:	str	ip, [sp, #16]
   1507c:	bl	12320 <__assert_fail@plt+0x1178>
   15080:	mov	r0, r4
   15084:	str	r9, [r8]
   15088:	add	sp, sp, #84	; 0x54
   1508c:	ldrd	r4, [sp]
   15090:	ldrd	r6, [sp, #8]
   15094:	ldrd	r8, [sp, #16]
   15098:	ldrd	sl, [sp, #24]
   1509c:	add	sp, sp, #32
   150a0:	pop	{pc}		; (ldr pc, [sp], #4)
   150a4:	mov	r0, #8
   150a8:	mvn	r3, #-2147483648	; 0x80000000
   150ac:	add	r1, sp, #28
   150b0:	str	r0, [sp]
   150b4:	mov	r0, #0
   150b8:	bl	16a2c <__assert_fail@plt+0x5884>
   150bc:	ldrd	r2, [r4, #8]
   150c0:	mov	r6, r0
   150c4:	str	r0, [r4]
   150c8:	strd	r2, [r0]
   150cc:	b	14fac <__assert_fail@plt+0x3e04>
   150d0:	andeq	sl, r2, ip, lsl #5
   150d4:	ldr	ip, [pc, #480]	; 152bc <__assert_fail@plt+0x4114>
   150d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150dc:	mov	r5, r0
   150e0:	movw	r4, #41248	; 0xa120
   150e4:	movt	r4, #2
   150e8:	ldrd	r2, [ip]
   150ec:	strd	r6, [sp, #8]
   150f0:	mov	r6, r1
   150f4:	ldrd	r0, [ip, #8]
   150f8:	strd	r8, [sp, #16]
   150fc:	strd	sl, [sp, #24]
   15100:	str	lr, [sp, #32]
   15104:	sub	sp, sp, #84	; 0x54
   15108:	ldrd	r8, [ip, #40]	; 0x28
   1510c:	strd	r2, [sp, #32]
   15110:	strd	r0, [sp, #40]	; 0x28
   15114:	ldrd	r2, [ip, #16]
   15118:	ldr	r7, [sp, #44]	; 0x2c
   1511c:	ldrd	r0, [ip, #24]
   15120:	strd	r2, [sp, #48]	; 0x30
   15124:	ldrd	r2, [ip, #32]
   15128:	mvn	lr, r7
   1512c:	and	lr, lr, #67108864	; 0x4000000
   15130:	eor	lr, lr, r7
   15134:	str	lr, [sp, #44]	; 0x2c
   15138:	strd	r0, [sp, #56]	; 0x38
   1513c:	strd	r2, [sp, #64]	; 0x40
   15140:	strd	r8, [sp, #72]	; 0x48
   15144:	bl	110a0 <__errno_location@plt>
   15148:	mov	r9, r0
   1514c:	ldr	sl, [r0]
   15150:	ldr	r2, [r4, #4]
   15154:	ldr	r7, [r4]
   15158:	cmp	r2, #0
   1515c:	bgt	151b8 <__assert_fail@plt+0x4010>
   15160:	add	r3, r4, #8
   15164:	str	r2, [sp, #28]
   15168:	rsb	r2, r2, #1
   1516c:	cmp	r7, r3
   15170:	beq	15290 <__assert_fail@plt+0x40e8>
   15174:	mov	r1, #8
   15178:	mov	r0, r7
   1517c:	mvn	r3, #-2147483648	; 0x80000000
   15180:	str	r1, [sp]
   15184:	add	r1, sp, #28
   15188:	bl	16a2c <__assert_fail@plt+0x5884>
   1518c:	mov	r7, r0
   15190:	str	r0, [r4]
   15194:	ldr	r0, [r4, #4]
   15198:	mov	r1, #0
   1519c:	ldr	r2, [sp, #28]
   151a0:	sub	r2, r2, r0
   151a4:	add	r0, r7, r0, lsl #3
   151a8:	lsl	r2, r2, #3
   151ac:	bl	110c4 <memset@plt>
   151b0:	ldr	r3, [sp, #28]
   151b4:	str	r3, [r4, #4]
   151b8:	ldr	ip, [sp, #32]
   151bc:	add	r0, sp, #40	; 0x28
   151c0:	mov	r3, r6
   151c4:	mov	r2, r5
   151c8:	ldr	r8, [sp, #36]	; 0x24
   151cc:	ldr	fp, [r7]
   151d0:	ldr	r4, [r7, #4]
   151d4:	str	ip, [sp]
   151d8:	orr	r8, r8, #1
   151dc:	ldr	ip, [sp, #72]	; 0x48
   151e0:	mov	r1, fp
   151e4:	str	r8, [sp, #4]
   151e8:	ldr	lr, [sp, #76]	; 0x4c
   151ec:	str	r0, [sp, #8]
   151f0:	mov	r0, r4
   151f4:	str	ip, [sp, #12]
   151f8:	str	lr, [sp, #16]
   151fc:	bl	12320 <__assert_fail@plt+0x1178>
   15200:	cmp	fp, r0
   15204:	bhi	1526c <__assert_fail@plt+0x40c4>
   15208:	add	fp, r0, #1
   1520c:	movw	r3, #41356	; 0xa18c
   15210:	movt	r3, #2
   15214:	cmp	r4, r3
   15218:	str	fp, [r7]
   1521c:	beq	15228 <__assert_fail@plt+0x4080>
   15220:	mov	r0, r4
   15224:	bl	1209c <__assert_fail@plt+0xef4>
   15228:	mov	r0, fp
   1522c:	bl	16788 <__assert_fail@plt+0x55e0>
   15230:	ldr	lr, [sp, #32]
   15234:	mov	r2, r5
   15238:	mov	r3, r6
   1523c:	mov	r1, fp
   15240:	mov	r4, r0
   15244:	ldr	r5, [sp, #72]	; 0x48
   15248:	ldr	ip, [sp, #76]	; 0x4c
   1524c:	str	r0, [r7, #4]
   15250:	str	lr, [sp]
   15254:	add	lr, sp, #40	; 0x28
   15258:	str	r8, [sp, #4]
   1525c:	str	lr, [sp, #8]
   15260:	str	r5, [sp, #12]
   15264:	str	ip, [sp, #16]
   15268:	bl	12320 <__assert_fail@plt+0x1178>
   1526c:	mov	r0, r4
   15270:	str	sl, [r9]
   15274:	add	sp, sp, #84	; 0x54
   15278:	ldrd	r4, [sp]
   1527c:	ldrd	r6, [sp, #8]
   15280:	ldrd	r8, [sp, #16]
   15284:	ldrd	sl, [sp, #24]
   15288:	add	sp, sp, #32
   1528c:	pop	{pc}		; (ldr pc, [sp], #4)
   15290:	mov	r0, #8
   15294:	mvn	r3, #-2147483648	; 0x80000000
   15298:	add	r1, sp, #28
   1529c:	str	r0, [sp]
   152a0:	mov	r0, #0
   152a4:	bl	16a2c <__assert_fail@plt+0x5884>
   152a8:	ldrd	r2, [r4, #8]
   152ac:	mov	r7, r0
   152b0:	str	r0, [r4]
   152b4:	strd	r2, [r0]
   152b8:	b	15194 <__assert_fail@plt+0x3fec>
   152bc:	andeq	sl, r2, ip, lsl #5
   152c0:	strd	r4, [sp, #-12]!
   152c4:	mov	r4, #0
   152c8:	mov	r5, #0
   152cc:	str	lr, [sp, #8]
   152d0:	sub	sp, sp, #100	; 0x64
   152d4:	cmp	r1, #10
   152d8:	strd	r4, [sp]
   152dc:	strd	r4, [sp, #8]
   152e0:	strd	r4, [sp, #16]
   152e4:	strd	r4, [sp, #24]
   152e8:	strd	r4, [sp, #32]
   152ec:	strd	r4, [sp, #40]	; 0x28
   152f0:	beq	15320 <__assert_fail@plt+0x4178>
   152f4:	mov	ip, #67108864	; 0x4000000
   152f8:	mov	r3, sp
   152fc:	str	r1, [sp]
   15300:	mov	r1, r2
   15304:	mvn	r2, #0
   15308:	str	ip, [sp, #12]
   1530c:	bl	13d0c <__assert_fail@plt+0x2b64>
   15310:	add	sp, sp, #100	; 0x64
   15314:	ldrd	r4, [sp]
   15318:	add	sp, sp, #8
   1531c:	pop	{pc}		; (ldr pc, [sp], #4)
   15320:	bl	11184 <abort@plt>
   15324:	ldr	ip, [pc, #156]	; 153c8 <__assert_fail@plt+0x4220>
   15328:	cmp	r2, #0
   1532c:	cmpne	r1, #0
   15330:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15334:	strd	r6, [sp, #8]
   15338:	mov	r6, r2
   1533c:	str	r8, [sp, #16]
   15340:	mov	r8, r3
   15344:	strd	sl, [sp, #20]
   15348:	ldrd	r4, [ip]
   1534c:	str	lr, [sp, #28]
   15350:	sub	sp, sp, #48	; 0x30
   15354:	mov	lr, #10
   15358:	ldrd	r2, [ip, #8]
   1535c:	ldrd	sl, [ip, #16]
   15360:	strd	r4, [sp]
   15364:	ldrd	r4, [ip, #32]
   15368:	str	lr, [sp]
   1536c:	strd	r2, [sp, #8]
   15370:	strd	sl, [sp, #16]
   15374:	ldrd	r2, [ip, #24]
   15378:	ldrd	sl, [ip, #40]	; 0x28
   1537c:	strd	r2, [sp, #24]
   15380:	strd	r4, [sp, #32]
   15384:	strd	sl, [sp, #40]	; 0x28
   15388:	beq	153c4 <__assert_fail@plt+0x421c>
   1538c:	mov	r7, r1
   15390:	mov	r3, sp
   15394:	mov	r1, r8
   15398:	mvn	r2, #0
   1539c:	str	r7, [sp, #40]	; 0x28
   153a0:	str	r6, [sp, #44]	; 0x2c
   153a4:	bl	13d0c <__assert_fail@plt+0x2b64>
   153a8:	add	sp, sp, #48	; 0x30
   153ac:	ldrd	r4, [sp]
   153b0:	ldrd	r6, [sp, #8]
   153b4:	ldr	r8, [sp, #16]
   153b8:	ldrd	sl, [sp, #20]
   153bc:	add	sp, sp, #28
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	bl	11184 <abort@plt>
   153c8:	andeq	sl, r2, ip, lsl #5
   153cc:	ldr	ip, [pc, #156]	; 15470 <__assert_fail@plt+0x42c8>
   153d0:	cmp	r2, #0
   153d4:	cmpne	r1, #0
   153d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   153dc:	strd	r6, [sp, #8]
   153e0:	mov	r6, r2
   153e4:	str	r8, [sp, #16]
   153e8:	mov	r8, r3
   153ec:	strd	sl, [sp, #20]
   153f0:	ldrd	r4, [ip]
   153f4:	str	lr, [sp, #28]
   153f8:	sub	sp, sp, #48	; 0x30
   153fc:	mov	lr, #10
   15400:	ldrd	r2, [ip, #8]
   15404:	ldrd	sl, [ip, #16]
   15408:	strd	r4, [sp]
   1540c:	ldrd	r4, [ip, #32]
   15410:	str	lr, [sp]
   15414:	strd	r2, [sp, #8]
   15418:	strd	sl, [sp, #16]
   1541c:	ldrd	r2, [ip, #24]
   15420:	ldrd	sl, [ip, #40]	; 0x28
   15424:	strd	r2, [sp, #24]
   15428:	strd	r4, [sp, #32]
   1542c:	strd	sl, [sp, #40]	; 0x28
   15430:	beq	1546c <__assert_fail@plt+0x42c4>
   15434:	ldr	r2, [sp, #80]	; 0x50
   15438:	mov	r7, r1
   1543c:	mov	r3, sp
   15440:	mov	r1, r8
   15444:	str	r7, [sp, #40]	; 0x28
   15448:	str	r6, [sp, #44]	; 0x2c
   1544c:	bl	13d0c <__assert_fail@plt+0x2b64>
   15450:	add	sp, sp, #48	; 0x30
   15454:	ldrd	r4, [sp]
   15458:	ldrd	r6, [sp, #8]
   1545c:	ldr	r8, [sp, #16]
   15460:	ldrd	sl, [sp, #20]
   15464:	add	sp, sp, #28
   15468:	pop	{pc}		; (ldr pc, [sp], #4)
   1546c:	bl	11184 <abort@plt>
   15470:	andeq	sl, r2, ip, lsl #5
   15474:	ldr	ip, [pc, #512]	; 1567c <__assert_fail@plt+0x44d4>
   15478:	cmp	r0, #0
   1547c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15480:	ldrd	r4, [ip, #16]
   15484:	strd	r6, [sp, #8]
   15488:	clz	r6, r1
   1548c:	mov	r7, r1
   15490:	strd	r8, [sp, #16]
   15494:	mov	r8, r0
   15498:	lsr	r6, r6, #5
   1549c:	strd	sl, [sp, #24]
   154a0:	mov	fp, r2
   154a4:	mov	sl, #10
   154a8:	ldrd	r2, [ip]
   154ac:	moveq	r6, #1
   154b0:	str	lr, [sp, #32]
   154b4:	sub	sp, sp, #92	; 0x5c
   154b8:	cmp	r6, #0
   154bc:	ldrd	r0, [ip, #8]
   154c0:	strd	r2, [sp, #40]	; 0x28
   154c4:	strd	r4, [sp, #56]	; 0x38
   154c8:	ldrd	r2, [ip, #24]
   154cc:	strd	r0, [sp, #48]	; 0x30
   154d0:	ldrd	r0, [ip, #32]
   154d4:	str	sl, [sp, #40]	; 0x28
   154d8:	ldrd	r4, [ip, #40]	; 0x28
   154dc:	strd	r2, [sp, #64]	; 0x40
   154e0:	strd	r0, [sp, #72]	; 0x48
   154e4:	strd	r4, [sp, #80]	; 0x50
   154e8:	bne	15678 <__assert_fail@plt+0x44d0>
   154ec:	movw	r5, #41248	; 0xa120
   154f0:	movt	r5, #2
   154f4:	str	r8, [sp, #80]	; 0x50
   154f8:	str	r7, [sp, #84]	; 0x54
   154fc:	bl	110a0 <__errno_location@plt>
   15500:	ldr	r3, [r0]
   15504:	mov	r9, r0
   15508:	ldr	r2, [r5, #4]
   1550c:	ldr	r4, [r5]
   15510:	str	r3, [sp, #28]
   15514:	cmp	r2, #0
   15518:	movgt	r1, sl
   1551c:	bgt	15584 <__assert_fail@plt+0x43dc>
   15520:	add	r3, r5, #8
   15524:	str	r2, [sp, #36]	; 0x24
   15528:	rsb	r2, r2, #1
   1552c:	cmp	r4, r3
   15530:	beq	1564c <__assert_fail@plt+0x44a4>
   15534:	mov	r1, #8
   15538:	mov	r0, r4
   1553c:	mvn	r3, #-2147483648	; 0x80000000
   15540:	str	r1, [sp]
   15544:	add	r1, sp, #36	; 0x24
   15548:	bl	16a2c <__assert_fail@plt+0x5884>
   1554c:	mov	r4, r0
   15550:	str	r0, [r5]
   15554:	ldr	r0, [r5, #4]
   15558:	mov	r1, #0
   1555c:	ldr	r2, [sp, #36]	; 0x24
   15560:	sub	r2, r2, r0
   15564:	add	r0, r4, r0, lsl #3
   15568:	lsl	r2, r2, #3
   1556c:	bl	110c4 <memset@plt>
   15570:	ldr	r3, [sp, #36]	; 0x24
   15574:	ldr	r1, [sp, #40]	; 0x28
   15578:	ldr	r8, [sp, #80]	; 0x50
   1557c:	str	r3, [r5, #4]
   15580:	ldr	r7, [sp, #84]	; 0x54
   15584:	mvn	r3, #0
   15588:	mov	r2, fp
   1558c:	ldr	r6, [sp, #44]	; 0x2c
   15590:	ldr	sl, [r4]
   15594:	ldr	r5, [r4, #4]
   15598:	orr	r6, r6, #1
   1559c:	stm	sp, {r1, r6}
   155a0:	add	r1, sp, #48	; 0x30
   155a4:	str	r8, [sp, #12]
   155a8:	mov	r0, r5
   155ac:	str	r1, [sp, #8]
   155b0:	mov	r1, sl
   155b4:	str	r7, [sp, #16]
   155b8:	bl	12320 <__assert_fail@plt+0x1178>
   155bc:	cmp	sl, r0
   155c0:	bhi	15624 <__assert_fail@plt+0x447c>
   155c4:	add	r7, r0, #1
   155c8:	movw	r3, #41356	; 0xa18c
   155cc:	movt	r3, #2
   155d0:	cmp	r5, r3
   155d4:	str	r7, [r4]
   155d8:	beq	155e4 <__assert_fail@plt+0x443c>
   155dc:	mov	r0, r5
   155e0:	bl	1209c <__assert_fail@plt+0xef4>
   155e4:	mov	r0, r7
   155e8:	bl	16788 <__assert_fail@plt+0x55e0>
   155ec:	ldr	r3, [sp, #40]	; 0x28
   155f0:	mov	r2, fp
   155f4:	mov	r1, r7
   155f8:	mov	r5, r0
   155fc:	ldr	lr, [sp, #80]	; 0x50
   15600:	ldr	ip, [sp, #84]	; 0x54
   15604:	str	r0, [r4, #4]
   15608:	add	r4, sp, #48	; 0x30
   1560c:	stm	sp, {r3, r6}
   15610:	mvn	r3, #0
   15614:	str	r4, [sp, #8]
   15618:	str	lr, [sp, #12]
   1561c:	str	ip, [sp, #16]
   15620:	bl	12320 <__assert_fail@plt+0x1178>
   15624:	ldr	r3, [sp, #28]
   15628:	mov	r0, r5
   1562c:	str	r3, [r9]
   15630:	add	sp, sp, #92	; 0x5c
   15634:	ldrd	r4, [sp]
   15638:	ldrd	r6, [sp, #8]
   1563c:	ldrd	r8, [sp, #16]
   15640:	ldrd	sl, [sp, #24]
   15644:	add	sp, sp, #32
   15648:	pop	{pc}		; (ldr pc, [sp], #4)
   1564c:	mov	r1, #8
   15650:	mvn	r3, #-2147483648	; 0x80000000
   15654:	mov	r0, r6
   15658:	str	r1, [sp]
   1565c:	add	r1, sp, #36	; 0x24
   15660:	bl	16a2c <__assert_fail@plt+0x5884>
   15664:	ldrd	r2, [r5, #8]
   15668:	mov	r4, r0
   1566c:	str	r0, [r5]
   15670:	strd	r2, [r0]
   15674:	b	15554 <__assert_fail@plt+0x43ac>
   15678:	bl	11184 <abort@plt>
   1567c:	andeq	sl, r2, ip, lsl #5
   15680:	ldr	ip, [pc, #536]	; 158a0 <__assert_fail@plt+0x46f8>
   15684:	cmp	r0, #0
   15688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1568c:	ldrd	r4, [ip, #16]
   15690:	strd	r6, [sp, #8]
   15694:	mov	r6, r1
   15698:	mov	r7, r0
   1569c:	strd	r8, [sp, #16]
   156a0:	mov	r9, #10
   156a4:	strd	sl, [sp, #24]
   156a8:	mov	sl, r2
   156ac:	mov	fp, r3
   156b0:	str	lr, [sp, #32]
   156b4:	clz	lr, r1
   156b8:	sub	sp, sp, #92	; 0x5c
   156bc:	ldrd	r2, [ip]
   156c0:	lsr	lr, lr, #5
   156c4:	moveq	lr, #1
   156c8:	ldrd	r0, [ip, #8]
   156cc:	cmp	lr, #0
   156d0:	strd	r4, [sp, #56]	; 0x38
   156d4:	ldrd	r4, [ip, #40]	; 0x28
   156d8:	str	lr, [sp, #28]
   156dc:	strd	r2, [sp, #40]	; 0x28
   156e0:	ldrd	r2, [ip, #24]
   156e4:	strd	r0, [sp, #48]	; 0x30
   156e8:	ldrd	r0, [ip, #32]
   156ec:	str	r9, [sp, #40]	; 0x28
   156f0:	strd	r2, [sp, #64]	; 0x40
   156f4:	strd	r4, [sp, #80]	; 0x50
   156f8:	strd	r0, [sp, #72]	; 0x48
   156fc:	bne	1589c <__assert_fail@plt+0x46f4>
   15700:	movw	r5, #41248	; 0xa120
   15704:	movt	r5, #2
   15708:	str	r7, [sp, #80]	; 0x50
   1570c:	str	r6, [sp, #84]	; 0x54
   15710:	bl	110a0 <__errno_location@plt>
   15714:	ldr	r3, [r0]
   15718:	mov	r8, r0
   1571c:	ldr	r2, [r5, #4]
   15720:	ldr	r4, [r5]
   15724:	str	r3, [sp, #24]
   15728:	cmp	r2, #0
   1572c:	movgt	r1, r9
   15730:	bgt	15798 <__assert_fail@plt+0x45f0>
   15734:	add	r3, r5, #8
   15738:	str	r2, [sp, #36]	; 0x24
   1573c:	rsb	r2, r2, #1
   15740:	cmp	r4, r3
   15744:	beq	15870 <__assert_fail@plt+0x46c8>
   15748:	mov	r1, #8
   1574c:	mov	r0, r4
   15750:	mvn	r3, #-2147483648	; 0x80000000
   15754:	str	r1, [sp]
   15758:	add	r1, sp, #36	; 0x24
   1575c:	bl	16a2c <__assert_fail@plt+0x5884>
   15760:	mov	r4, r0
   15764:	str	r0, [r5]
   15768:	ldr	r0, [r5, #4]
   1576c:	mov	r1, #0
   15770:	ldr	r2, [sp, #36]	; 0x24
   15774:	sub	r2, r2, r0
   15778:	add	r0, r4, r0, lsl #3
   1577c:	lsl	r2, r2, #3
   15780:	bl	110c4 <memset@plt>
   15784:	ldr	r3, [sp, #36]	; 0x24
   15788:	ldr	r1, [sp, #40]	; 0x28
   1578c:	ldr	r7, [sp, #80]	; 0x50
   15790:	str	r3, [r5, #4]
   15794:	ldr	r6, [sp, #84]	; 0x54
   15798:	mov	r3, fp
   1579c:	mov	r2, sl
   157a0:	ldr	r0, [sp, #44]	; 0x2c
   157a4:	ldr	r9, [r4]
   157a8:	ldr	r5, [r4, #4]
   157ac:	orr	r0, r0, #1
   157b0:	str	r1, [sp]
   157b4:	add	r1, sp, #48	; 0x30
   157b8:	str	r0, [sp, #4]
   157bc:	str	r1, [sp, #8]
   157c0:	mov	r1, r9
   157c4:	str	r7, [sp, #12]
   157c8:	str	r6, [sp, #16]
   157cc:	str	r0, [sp, #28]
   157d0:	mov	r0, r5
   157d4:	bl	12320 <__assert_fail@plt+0x1178>
   157d8:	cmp	r9, r0
   157dc:	bhi	15848 <__assert_fail@plt+0x46a0>
   157e0:	add	r6, r0, #1
   157e4:	movw	r3, #41356	; 0xa18c
   157e8:	movt	r3, #2
   157ec:	cmp	r5, r3
   157f0:	str	r6, [r4]
   157f4:	beq	15800 <__assert_fail@plt+0x4658>
   157f8:	mov	r0, r5
   157fc:	bl	1209c <__assert_fail@plt+0xef4>
   15800:	mov	r0, r6
   15804:	bl	16788 <__assert_fail@plt+0x55e0>
   15808:	ldr	lr, [sp, #40]	; 0x28
   1580c:	mov	r1, r6
   15810:	mov	r3, fp
   15814:	mov	r2, sl
   15818:	mov	r5, r0
   1581c:	ldr	r6, [sp, #80]	; 0x50
   15820:	ldr	ip, [sp, #84]	; 0x54
   15824:	str	r0, [r4, #4]
   15828:	str	lr, [sp]
   1582c:	ldr	lr, [sp, #28]
   15830:	str	lr, [sp, #4]
   15834:	add	lr, sp, #48	; 0x30
   15838:	str	r6, [sp, #12]
   1583c:	str	lr, [sp, #8]
   15840:	str	ip, [sp, #16]
   15844:	bl	12320 <__assert_fail@plt+0x1178>
   15848:	ldr	r3, [sp, #24]
   1584c:	mov	r0, r5
   15850:	str	r3, [r8]
   15854:	add	sp, sp, #92	; 0x5c
   15858:	ldrd	r4, [sp]
   1585c:	ldrd	r6, [sp, #8]
   15860:	ldrd	r8, [sp, #16]
   15864:	ldrd	sl, [sp, #24]
   15868:	add	sp, sp, #32
   1586c:	pop	{pc}		; (ldr pc, [sp], #4)
   15870:	mov	r1, #8
   15874:	mvn	r3, #-2147483648	; 0x80000000
   15878:	ldr	r0, [sp, #28]
   1587c:	str	r1, [sp]
   15880:	add	r1, sp, #36	; 0x24
   15884:	bl	16a2c <__assert_fail@plt+0x5884>
   15888:	ldrd	r2, [r5, #8]
   1588c:	mov	r4, r0
   15890:	str	r0, [r5]
   15894:	strd	r2, [r0]
   15898:	b	15768 <__assert_fail@plt+0x45c0>
   1589c:	bl	11184 <abort@plt>
   158a0:	andeq	sl, r2, ip, lsl #5
   158a4:	ldr	r3, [pc]	; 158ac <__assert_fail@plt+0x4704>
   158a8:	b	13d0c <__assert_fail@plt+0x2b64>
   158ac:	andeq	sl, r2, r0, lsr r1
   158b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158b4:	movw	r4, #41248	; 0xa120
   158b8:	movt	r4, #2
   158bc:	strd	r6, [sp, #8]
   158c0:	strd	r8, [sp, #16]
   158c4:	strd	sl, [sp, #24]
   158c8:	mov	sl, r0
   158cc:	mov	fp, r1
   158d0:	str	lr, [sp, #32]
   158d4:	sub	sp, sp, #44	; 0x2c
   158d8:	bl	110a0 <__errno_location@plt>
   158dc:	ldr	r3, [r0]
   158e0:	mov	r8, r0
   158e4:	ldr	r2, [r4, #4]
   158e8:	ldr	r5, [r4]
   158ec:	str	r3, [sp, #28]
   158f0:	cmp	r2, #0
   158f4:	bgt	15950 <__assert_fail@plt+0x47a8>
   158f8:	add	r3, r4, #8
   158fc:	str	r2, [sp, #36]	; 0x24
   15900:	rsb	r2, r2, #1
   15904:	cmp	r5, r3
   15908:	beq	15a2c <__assert_fail@plt+0x4884>
   1590c:	mov	r1, #8
   15910:	mov	r0, r5
   15914:	mvn	r3, #-2147483648	; 0x80000000
   15918:	str	r1, [sp]
   1591c:	add	r1, sp, #36	; 0x24
   15920:	bl	16a2c <__assert_fail@plt+0x5884>
   15924:	mov	r5, r0
   15928:	str	r0, [r4]
   1592c:	ldr	r0, [r4, #4]
   15930:	mov	r1, #0
   15934:	ldr	r2, [sp, #36]	; 0x24
   15938:	sub	r2, r2, r0
   1593c:	add	r0, r5, r0, lsl #3
   15940:	lsl	r2, r2, #3
   15944:	bl	110c4 <memset@plt>
   15948:	ldr	r3, [sp, #36]	; 0x24
   1594c:	str	r3, [r4, #4]
   15950:	ldr	ip, [r4, #16]
   15954:	mov	r3, fp
   15958:	mov	r2, sl
   1595c:	ldr	r7, [r4, #20]
   15960:	ldr	r0, [pc, #240]	; 15a58 <__assert_fail@plt+0x48b0>
   15964:	ldr	r9, [r5]
   15968:	orr	r7, r7, #1
   1596c:	ldr	r6, [r5, #4]
   15970:	str	ip, [sp]
   15974:	ldr	ip, [r4, #56]	; 0x38
   15978:	mov	r1, r9
   1597c:	str	r7, [sp, #4]
   15980:	ldr	lr, [r4, #60]	; 0x3c
   15984:	str	r0, [sp, #8]
   15988:	mov	r0, r6
   1598c:	str	ip, [sp, #12]
   15990:	str	lr, [sp, #16]
   15994:	bl	12320 <__assert_fail@plt+0x1178>
   15998:	cmp	r9, r0
   1599c:	bhi	15a04 <__assert_fail@plt+0x485c>
   159a0:	add	r9, r0, #1
   159a4:	movw	r3, #41356	; 0xa18c
   159a8:	movt	r3, #2
   159ac:	cmp	r6, r3
   159b0:	str	r9, [r5]
   159b4:	beq	159c0 <__assert_fail@plt+0x4818>
   159b8:	mov	r0, r6
   159bc:	bl	1209c <__assert_fail@plt+0xef4>
   159c0:	mov	r0, r9
   159c4:	bl	16788 <__assert_fail@plt+0x55e0>
   159c8:	ldr	ip, [r4, #16]
   159cc:	mov	r1, r9
   159d0:	mov	r3, fp
   159d4:	mov	r2, sl
   159d8:	mov	r6, r0
   159dc:	ldr	r9, [r4, #56]	; 0x38
   159e0:	ldr	lr, [r4, #60]	; 0x3c
   159e4:	str	r0, [r5, #4]
   159e8:	str	ip, [sp]
   159ec:	ldr	ip, [pc, #100]	; 15a58 <__assert_fail@plt+0x48b0>
   159f0:	str	r7, [sp, #4]
   159f4:	str	ip, [sp, #8]
   159f8:	str	r9, [sp, #12]
   159fc:	str	lr, [sp, #16]
   15a00:	bl	12320 <__assert_fail@plt+0x1178>
   15a04:	ldr	r3, [sp, #28]
   15a08:	mov	r0, r6
   15a0c:	str	r3, [r8]
   15a10:	add	sp, sp, #44	; 0x2c
   15a14:	ldrd	r4, [sp]
   15a18:	ldrd	r6, [sp, #8]
   15a1c:	ldrd	r8, [sp, #16]
   15a20:	ldrd	sl, [sp, #24]
   15a24:	add	sp, sp, #32
   15a28:	pop	{pc}		; (ldr pc, [sp], #4)
   15a2c:	mov	r0, #8
   15a30:	mvn	r3, #-2147483648	; 0x80000000
   15a34:	add	r1, sp, #36	; 0x24
   15a38:	str	r0, [sp]
   15a3c:	mov	r0, #0
   15a40:	bl	16a2c <__assert_fail@plt+0x5884>
   15a44:	ldrd	r2, [r4, #8]
   15a48:	mov	r5, r0
   15a4c:	str	r0, [r4]
   15a50:	strd	r2, [r0]
   15a54:	b	1592c <__assert_fail@plt+0x4784>
   15a58:	andeq	sl, r2, r8, lsr r1
   15a5c:	ldr	r3, [pc, #4]	; 15a68 <__assert_fail@plt+0x48c0>
   15a60:	mvn	r2, #0
   15a64:	b	13d0c <__assert_fail@plt+0x2b64>
   15a68:	andeq	sl, r2, r0, lsr r1
   15a6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a70:	movw	r4, #41248	; 0xa120
   15a74:	movt	r4, #2
   15a78:	strd	r6, [sp, #8]
   15a7c:	strd	r8, [sp, #16]
   15a80:	strd	sl, [sp, #24]
   15a84:	mov	sl, r0
   15a88:	str	lr, [sp, #32]
   15a8c:	sub	sp, sp, #44	; 0x2c
   15a90:	bl	110a0 <__errno_location@plt>
   15a94:	ldr	r3, [r0]
   15a98:	mov	r8, r0
   15a9c:	ldr	r2, [r4, #4]
   15aa0:	ldr	r5, [r4]
   15aa4:	str	r3, [sp, #28]
   15aa8:	cmp	r2, #0
   15aac:	bgt	15b08 <__assert_fail@plt+0x4960>
   15ab0:	add	r3, r4, #8
   15ab4:	str	r2, [sp, #36]	; 0x24
   15ab8:	rsb	r2, r2, #1
   15abc:	cmp	r5, r3
   15ac0:	beq	15bd0 <__assert_fail@plt+0x4a28>
   15ac4:	mov	r1, #8
   15ac8:	mov	r0, r5
   15acc:	mvn	r3, #-2147483648	; 0x80000000
   15ad0:	str	r1, [sp]
   15ad4:	add	r1, sp, #36	; 0x24
   15ad8:	bl	16a2c <__assert_fail@plt+0x5884>
   15adc:	mov	r5, r0
   15ae0:	str	r0, [r4]
   15ae4:	ldr	r0, [r4, #4]
   15ae8:	mov	r1, #0
   15aec:	ldr	r2, [sp, #36]	; 0x24
   15af0:	sub	r2, r2, r0
   15af4:	add	r0, r5, r0, lsl #3
   15af8:	lsl	r2, r2, #3
   15afc:	bl	110c4 <memset@plt>
   15b00:	ldr	r3, [sp, #36]	; 0x24
   15b04:	str	r3, [r4, #4]
   15b08:	ldr	ip, [r4, #16]
   15b0c:	mvn	r3, #0
   15b10:	mov	r2, sl
   15b14:	ldr	r7, [r4, #20]
   15b18:	ldr	fp, [pc, #220]	; 15bfc <__assert_fail@plt+0x4a54>
   15b1c:	ldr	r9, [r5]
   15b20:	orr	r7, r7, #1
   15b24:	ldr	r6, [r5, #4]
   15b28:	str	ip, [sp]
   15b2c:	ldr	ip, [r4, #56]	; 0x38
   15b30:	mov	r1, r9
   15b34:	stmib	sp, {r7, fp}
   15b38:	ldr	lr, [r4, #60]	; 0x3c
   15b3c:	mov	r0, r6
   15b40:	str	ip, [sp, #12]
   15b44:	str	lr, [sp, #16]
   15b48:	bl	12320 <__assert_fail@plt+0x1178>
   15b4c:	cmp	r9, r0
   15b50:	bhi	15ba8 <__assert_fail@plt+0x4a00>
   15b54:	add	r9, r0, #1
   15b58:	movw	r3, #41356	; 0xa18c
   15b5c:	movt	r3, #2
   15b60:	cmp	r6, r3
   15b64:	str	r9, [r5]
   15b68:	beq	15b74 <__assert_fail@plt+0x49cc>
   15b6c:	mov	r0, r6
   15b70:	bl	1209c <__assert_fail@plt+0xef4>
   15b74:	mov	r0, r9
   15b78:	bl	16788 <__assert_fail@plt+0x55e0>
   15b7c:	ldr	r3, [r4, #16]
   15b80:	mov	r2, sl
   15b84:	mov	r1, r9
   15b88:	mov	r6, r0
   15b8c:	ldr	lr, [r4, #56]	; 0x38
   15b90:	ldr	ip, [r4, #60]	; 0x3c
   15b94:	str	r0, [r5, #4]
   15b98:	stm	sp, {r3, r7, fp, lr}
   15b9c:	mvn	r3, #0
   15ba0:	str	ip, [sp, #16]
   15ba4:	bl	12320 <__assert_fail@plt+0x1178>
   15ba8:	ldr	r3, [sp, #28]
   15bac:	mov	r0, r6
   15bb0:	str	r3, [r8]
   15bb4:	add	sp, sp, #44	; 0x2c
   15bb8:	ldrd	r4, [sp]
   15bbc:	ldrd	r6, [sp, #8]
   15bc0:	ldrd	r8, [sp, #16]
   15bc4:	ldrd	sl, [sp, #24]
   15bc8:	add	sp, sp, #32
   15bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd0:	mov	r0, #8
   15bd4:	mvn	r3, #-2147483648	; 0x80000000
   15bd8:	add	r1, sp, #36	; 0x24
   15bdc:	str	r0, [sp]
   15be0:	mov	r0, #0
   15be4:	bl	16a2c <__assert_fail@plt+0x5884>
   15be8:	ldrd	r2, [r4, #8]
   15bec:	mov	r5, r0
   15bf0:	str	r0, [r4]
   15bf4:	strd	r2, [r0]
   15bf8:	b	15ae4 <__assert_fail@plt+0x493c>
   15bfc:	andeq	sl, r2, r8, lsr r1
   15c00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c04:	mov	r4, r1
   15c08:	strd	r6, [sp, #8]
   15c0c:	strd	r8, [sp, #16]
   15c10:	subs	r9, r3, #0
   15c14:	mov	r8, r2
   15c18:	strd	sl, [sp, #24]
   15c1c:	mvneq	sl, #0
   15c20:	str	lr, [sp, #32]
   15c24:	sub	sp, sp, #44	; 0x2c
   15c28:	ldr	r3, [sp, #80]	; 0x50
   15c2c:	ldrne	sl, [r9]
   15c30:	ldr	fp, [r2]
   15c34:	cmp	r3, #0
   15c38:	ldr	r6, [sp, #84]	; 0x54
   15c3c:	beq	15c4c <__assert_fail@plt+0x4aa4>
   15c40:	mov	r2, r3
   15c44:	mov	r3, #0
   15c48:	str	r3, [r2]
   15c4c:	cmp	r6, #0
   15c50:	movne	r3, #0
   15c54:	strne	r3, [r6]
   15c58:	cmp	r4, #0
   15c5c:	beq	15e10 <__assert_fail@plt+0x4c68>
   15c60:	subs	r3, r4, r0
   15c64:	bne	15d0c <__assert_fail@plt+0x4b64>
   15c68:	ldrb	r2, [r4, #1]
   15c6c:	cmp	r2, #0
   15c70:	beq	15e24 <__assert_fail@plt+0x4c7c>
   15c74:	adds	r5, r4, #1
   15c78:	moveq	r4, r5
   15c7c:	beq	15cb4 <__assert_fail@plt+0x4b0c>
   15c80:	mov	r4, r3
   15c84:	ldrb	r3, [r5]
   15c88:	cmp	r3, #43	; 0x2b
   15c8c:	beq	15d80 <__assert_fail@plt+0x4bd8>
   15c90:	mov	r0, r5
   15c94:	bl	1119c <getgrnam@plt>
   15c98:	cmp	r0, #0
   15c9c:	beq	15d80 <__assert_fail@plt+0x4bd8>
   15ca0:	ldr	sl, [r0, #8]
   15ca4:	bl	10ec0 <endgrent@plt>
   15ca8:	mov	r0, r5
   15cac:	bl	16cac <__assert_fail@plt+0x5b04>
   15cb0:	mov	r5, r0
   15cb4:	ldr	r3, [sp, #80]	; 0x50
   15cb8:	cmp	r9, #0
   15cbc:	str	fp, [r8]
   15cc0:	strne	sl, [r9]
   15cc4:	cmp	r3, #0
   15cc8:	strne	r4, [r3]
   15ccc:	movne	r4, #0
   15cd0:	cmp	r6, #0
   15cd4:	mov	r0, r4
   15cd8:	strne	r5, [r6]
   15cdc:	movne	r5, #0
   15ce0:	bl	1209c <__assert_fail@plt+0xef4>
   15ce4:	mov	r0, r5
   15ce8:	bl	1209c <__assert_fail@plt+0xef4>
   15cec:	mov	r0, #0
   15cf0:	add	sp, sp, #44	; 0x2c
   15cf4:	ldrd	r4, [sp]
   15cf8:	ldrd	r6, [sp, #8]
   15cfc:	ldrd	r8, [sp, #16]
   15d00:	ldrd	sl, [sp, #24]
   15d04:	add	sp, sp, #32
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	add	r1, r3, #1
   15d10:	str	r3, [sp, #12]
   15d14:	bl	16c14 <__assert_fail@plt+0x5a6c>
   15d18:	ldrb	r5, [r4, #1]
   15d1c:	mov	r2, #0
   15d20:	mov	r7, r0
   15d24:	ldr	r3, [sp, #12]
   15d28:	cmp	r5, r2
   15d2c:	strb	r2, [r0, r3]
   15d30:	ldrb	r3, [r0]
   15d34:	beq	15e2c <__assert_fail@plt+0x4c84>
   15d38:	adds	r5, r4, #1
   15d3c:	moveq	r4, #1
   15d40:	movne	r4, r2
   15d44:	cmp	r3, #43	; 0x2b
   15d48:	beq	15dd4 <__assert_fail@plt+0x4c2c>
   15d4c:	bl	10ee4 <getpwnam@plt>
   15d50:	cmp	r0, #0
   15d54:	beq	15dd4 <__assert_fail@plt+0x4c2c>
   15d58:	cmp	r4, #0
   15d5c:	ldr	fp, [r0, #8]
   15d60:	moveq	r4, r7
   15d64:	bne	15e48 <__assert_fail@plt+0x4ca0>
   15d68:	bl	11124 <endpwent@plt>
   15d6c:	cmp	r5, #0
   15d70:	beq	15cb4 <__assert_fail@plt+0x4b0c>
   15d74:	ldrb	r3, [r5]
   15d78:	cmp	r3, #43	; 0x2b
   15d7c:	bne	15c90 <__assert_fail@plt+0x4ae8>
   15d80:	movw	r0, #36164	; 0x8d44
   15d84:	movt	r0, #1
   15d88:	add	r3, sp, #16
   15d8c:	mov	r2, #10
   15d90:	mov	r1, #0
   15d94:	str	r0, [sp]
   15d98:	mov	r0, r5
   15d9c:	bl	16d78 <__assert_fail@plt+0x5bd0>
   15da0:	cmp	r0, #0
   15da4:	bne	15db4 <__assert_fail@plt+0x4c0c>
   15da8:	ldr	sl, [sp, #16]
   15dac:	cmn	sl, #1
   15db0:	bne	15ca4 <__assert_fail@plt+0x4afc>
   15db4:	bl	10ec0 <endgrent@plt>
   15db8:	mov	r0, r5
   15dbc:	mov	r7, r4
   15dc0:	bl	16cac <__assert_fail@plt+0x5b04>
   15dc4:	movw	r4, #37284	; 0x91a4
   15dc8:	movt	r4, #1
   15dcc:	mov	r5, r0
   15dd0:	b	15dec <__assert_fail@plt+0x4c44>
   15dd4:	cmp	r4, #0
   15dd8:	beq	15e9c <__assert_fail@plt+0x4cf4>
   15ddc:	movw	r4, #37268	; 0x9194
   15de0:	movt	r4, #1
   15de4:	mov	r5, #0
   15de8:	bl	11124 <endpwent@plt>
   15dec:	mov	r0, r7
   15df0:	bl	1209c <__assert_fail@plt+0xef4>
   15df4:	mov	r0, r5
   15df8:	bl	1209c <__assert_fail@plt+0xef4>
   15dfc:	mov	r1, r4
   15e00:	mov	r2, #5
   15e04:	mov	r0, #0
   15e08:	bl	10f74 <dcgettext@plt>
   15e0c:	b	15cf0 <__assert_fail@plt+0x4b48>
   15e10:	ldrb	r3, [r0]
   15e14:	cmp	r3, #0
   15e18:	bne	15e78 <__assert_fail@plt+0x4cd0>
   15e1c:	mov	r5, r4
   15e20:	b	15cb4 <__assert_fail@plt+0x4b0c>
   15e24:	mov	r4, r2
   15e28:	b	15e1c <__assert_fail@plt+0x4c74>
   15e2c:	cmp	r3, #43	; 0x2b
   15e30:	beq	15ddc <__assert_fail@plt+0x4c34>
   15e34:	bl	10ee4 <getpwnam@plt>
   15e38:	cmp	r0, #0
   15e3c:	movne	r4, #1
   15e40:	bne	15d58 <__assert_fail@plt+0x4bb0>
   15e44:	b	15ddc <__assert_fail@plt+0x4c34>
   15e48:	ldr	sl, [r0, #12]
   15e4c:	mov	r0, sl
   15e50:	bl	11190 <getgrgid@plt>
   15e54:	subs	r1, r0, #0
   15e58:	beq	15f08 <__assert_fail@plt+0x4d60>
   15e5c:	ldr	r0, [r1]
   15e60:	bl	16cac <__assert_fail@plt+0x5b04>
   15e64:	mov	r5, r0
   15e68:	mov	r4, r7
   15e6c:	bl	10ec0 <endgrent@plt>
   15e70:	bl	11124 <endpwent@plt>
   15e74:	b	15cb4 <__assert_fail@plt+0x4b0c>
   15e78:	bl	16cac <__assert_fail@plt+0x5b04>
   15e7c:	ldrb	r3, [r0]
   15e80:	mov	r7, r0
   15e84:	cmp	r3, #43	; 0x2b
   15e88:	moveq	r5, r4
   15e8c:	beq	15e9c <__assert_fail@plt+0x4cf4>
   15e90:	bl	10ee4 <getpwnam@plt>
   15e94:	subs	r5, r0, #0
   15e98:	bne	15ef8 <__assert_fail@plt+0x4d50>
   15e9c:	movw	r0, #36164	; 0x8d44
   15ea0:	movt	r0, #1
   15ea4:	add	r3, sp, #16
   15ea8:	mov	r2, #10
   15eac:	mov	r1, #0
   15eb0:	str	r0, [sp]
   15eb4:	mov	r0, r7
   15eb8:	bl	16d78 <__assert_fail@plt+0x5bd0>
   15ebc:	cmp	r0, #0
   15ec0:	bne	15ee4 <__assert_fail@plt+0x4d3c>
   15ec4:	ldr	fp, [sp, #16]
   15ec8:	cmn	fp, #1
   15ecc:	beq	15ee4 <__assert_fail@plt+0x4d3c>
   15ed0:	bl	11124 <endpwent@plt>
   15ed4:	cmp	r5, #0
   15ed8:	mov	r4, r7
   15edc:	beq	15cb4 <__assert_fail@plt+0x4b0c>
   15ee0:	b	15c84 <__assert_fail@plt+0x4adc>
   15ee4:	movw	r4, #37300	; 0x91b4
   15ee8:	movt	r4, #1
   15eec:	bl	11124 <endpwent@plt>
   15ef0:	mov	r5, #0
   15ef4:	b	15dec <__assert_fail@plt+0x4c44>
   15ef8:	ldr	fp, [r5, #8]
   15efc:	mov	r5, r4
   15f00:	mov	r4, r7
   15f04:	b	15d68 <__assert_fail@plt+0x4bc0>
   15f08:	add	r2, sp, #16
   15f0c:	mov	r0, sl
   15f10:	bl	183ac <__assert_fail@plt+0x7204>
   15f14:	b	15e60 <__assert_fail@plt+0x4cb8>
   15f18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15f1c:	strd	r6, [sp, #8]
   15f20:	subs	r7, r2, #0
   15f24:	strd	r8, [sp, #16]
   15f28:	mov	r9, r1
   15f2c:	mov	r8, r3
   15f30:	str	sl, [sp, #24]
   15f34:	str	lr, [sp, #28]
   15f38:	sub	sp, sp, #8
   15f3c:	ldr	r6, [sp, #40]	; 0x28
   15f40:	beq	15fd8 <__assert_fail@plt+0x4e30>
   15f44:	mov	r1, #58	; 0x3a
   15f48:	mov	r5, r0
   15f4c:	bl	11094 <strchr@plt>
   15f50:	mov	sl, r0
   15f54:	mov	r1, r0
   15f58:	str	r8, [sp]
   15f5c:	mov	r3, r7
   15f60:	mov	r2, r9
   15f64:	str	r6, [sp, #4]
   15f68:	mov	r0, r5
   15f6c:	bl	15c00 <__assert_fail@plt+0x4a58>
   15f70:	cmp	sl, #0
   15f74:	mov	r4, r0
   15f78:	bne	15fb8 <__assert_fail@plt+0x4e10>
   15f7c:	cmp	r0, #0
   15f80:	beq	15ff8 <__assert_fail@plt+0x4e50>
   15f84:	mov	r1, #46	; 0x2e
   15f88:	mov	r0, r5
   15f8c:	bl	11094 <strchr@plt>
   15f90:	subs	r1, r0, #0
   15f94:	beq	15fb8 <__assert_fail@plt+0x4e10>
   15f98:	mov	r3, r7
   15f9c:	mov	r2, r9
   15fa0:	str	r8, [sp]
   15fa4:	mov	r0, r5
   15fa8:	str	r6, [sp, #4]
   15fac:	bl	15c00 <__assert_fail@plt+0x4a58>
   15fb0:	cmp	r0, #0
   15fb4:	beq	15ff8 <__assert_fail@plt+0x4e50>
   15fb8:	mov	r0, r4
   15fbc:	add	sp, sp, #8
   15fc0:	ldrd	r4, [sp]
   15fc4:	ldrd	r6, [sp, #8]
   15fc8:	ldrd	r8, [sp, #16]
   15fcc:	ldr	sl, [sp, #24]
   15fd0:	add	sp, sp, #28
   15fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd8:	mov	r2, r1
   15fdc:	mov	r3, r7
   15fe0:	str	r8, [sp]
   15fe4:	mov	r1, r7
   15fe8:	str	r6, [sp, #4]
   15fec:	bl	15c00 <__assert_fail@plt+0x4a58>
   15ff0:	mov	r4, r0
   15ff4:	b	15fb8 <__assert_fail@plt+0x4e10>
   15ff8:	mov	r4, #0
   15ffc:	b	15fb8 <__assert_fail@plt+0x4e10>
   16000:	cmp	r1, #0
   16004:	strd	r4, [sp, #-16]!
   16008:	mov	ip, r3
   1600c:	str	r6, [sp, #8]
   16010:	mov	r4, r0
   16014:	str	lr, [sp, #12]
   16018:	sub	sp, sp, #32
   1601c:	ldr	r5, [sp, #48]	; 0x30
   16020:	ldr	r6, [sp, #52]	; 0x34
   16024:	beq	16168 <__assert_fail@plt+0x4fc0>
   16028:	mov	r3, r1
   1602c:	mov	r1, #1
   16030:	stm	sp, {r2, ip}
   16034:	movw	r2, #37316	; 0x91c4
   16038:	movt	r2, #1
   1603c:	bl	110e8 <__fprintf_chk@plt>
   16040:	mov	r2, #5
   16044:	movw	r1, #37336	; 0x91d8
   16048:	movt	r1, #1
   1604c:	mov	r0, #0
   16050:	bl	10f74 <dcgettext@plt>
   16054:	movw	ip, #2022	; 0x7e6
   16058:	mov	r3, r0
   1605c:	mov	r1, #1
   16060:	movw	r2, #38064	; 0x94b0
   16064:	movt	r2, #1
   16068:	mov	r0, r4
   1606c:	str	ip, [sp]
   16070:	bl	110e8 <__fprintf_chk@plt>
   16074:	mov	r1, r4
   16078:	mov	r0, #10
   1607c:	bl	10f68 <fputc_unlocked@plt>
   16080:	mov	r2, #5
   16084:	movw	r1, #37340	; 0x91dc
   16088:	movt	r1, #1
   1608c:	mov	r0, #0
   16090:	bl	10f74 <dcgettext@plt>
   16094:	mov	r2, r0
   16098:	mov	r1, #1
   1609c:	movw	r3, #37512	; 0x9288
   160a0:	movt	r3, #1
   160a4:	mov	r0, r4
   160a8:	bl	110e8 <__fprintf_chk@plt>
   160ac:	mov	r1, r4
   160b0:	mov	r0, #10
   160b4:	bl	10f68 <fputc_unlocked@plt>
   160b8:	cmp	r6, #9
   160bc:	ldrls	pc, [pc, r6, lsl #2]
   160c0:	b	163d4 <__assert_fail@plt+0x522c>
   160c4:	andeq	r6, r1, r4, asr r1
   160c8:	andeq	r6, r1, r4, lsl #3
   160cc:	andeq	r6, r1, r0, asr #3
   160d0:	andeq	r6, r1, r0, lsl #4
   160d4:	andeq	r6, r1, r8, asr #4
   160d8:	andeq	r6, r1, r0, lsl #5
   160dc:	andeq	r6, r1, r8, asr #5
   160e0:	andeq	r6, r1, ip, lsl r3
   160e4:	andeq	r6, r1, r4, ror r3
   160e8:	andeq	r6, r1, ip, ror #1
   160ec:	movw	r1, #37816	; 0x93b8
   160f0:	movt	r1, #1
   160f4:	mov	r2, #5
   160f8:	mov	r0, #0
   160fc:	bl	10f74 <dcgettext@plt>
   16100:	ldr	lr, [r5, #4]
   16104:	mov	r2, r0
   16108:	mov	r1, #1
   1610c:	mov	r0, r4
   16110:	ldr	r3, [r5, #8]
   16114:	ldr	ip, [r5, #32]
   16118:	str	lr, [sp]
   1611c:	ldr	lr, [r5, #12]
   16120:	str	ip, [sp, #28]
   16124:	ldr	ip, [r5, #28]
   16128:	str	r3, [sp, #4]
   1612c:	ldr	r3, [r5, #16]
   16130:	str	lr, [sp, #8]
   16134:	ldr	lr, [r5, #20]
   16138:	str	ip, [sp, #24]
   1613c:	ldr	ip, [r5, #24]
   16140:	str	r3, [sp, #12]
   16144:	ldr	r3, [r5]
   16148:	str	lr, [sp, #16]
   1614c:	str	ip, [sp, #20]
   16150:	bl	110e8 <__fprintf_chk@plt>
   16154:	add	sp, sp, #32
   16158:	ldrd	r4, [sp]
   1615c:	ldr	r6, [sp, #8]
   16160:	add	sp, sp, #12
   16164:	pop	{pc}		; (ldr pc, [sp], #4)
   16168:	mov	r3, r2
   1616c:	mov	r1, #1
   16170:	str	ip, [sp]
   16174:	movw	r2, #37328	; 0x91d0
   16178:	movt	r2, #1
   1617c:	bl	110e8 <__fprintf_chk@plt>
   16180:	b	16040 <__assert_fail@plt+0x4e98>
   16184:	mov	r2, #5
   16188:	movw	r1, #37548	; 0x92ac
   1618c:	movt	r1, #1
   16190:	mov	r0, #0
   16194:	bl	10f74 <dcgettext@plt>
   16198:	ldr	r3, [r5]
   1619c:	mov	r2, r0
   161a0:	mov	r1, #1
   161a4:	mov	r0, r4
   161a8:	add	sp, sp, #32
   161ac:	ldrd	r4, [sp]
   161b0:	ldr	r6, [sp, #8]
   161b4:	ldr	lr, [sp, #12]
   161b8:	add	sp, sp, #16
   161bc:	b	110e8 <__fprintf_chk@plt>
   161c0:	mov	r2, #5
   161c4:	movw	r1, #37564	; 0x92bc
   161c8:	movt	r1, #1
   161cc:	mov	r0, #0
   161d0:	bl	10f74 <dcgettext@plt>
   161d4:	ldm	r5, {r3, ip}
   161d8:	mov	r2, r0
   161dc:	mov	r1, #1
   161e0:	mov	r0, r4
   161e4:	str	ip, [sp, #48]	; 0x30
   161e8:	add	sp, sp, #32
   161ec:	ldrd	r4, [sp]
   161f0:	ldr	r6, [sp, #8]
   161f4:	ldr	lr, [sp, #12]
   161f8:	add	sp, sp, #16
   161fc:	b	110e8 <__fprintf_chk@plt>
   16200:	mov	r2, #5
   16204:	movw	r1, #37588	; 0x92d4
   16208:	movt	r1, #1
   1620c:	mov	r0, #0
   16210:	bl	10f74 <dcgettext@plt>
   16214:	ldm	r5, {r3, lr}
   16218:	mov	r2, r0
   1621c:	mov	r1, #1
   16220:	mov	r0, r4
   16224:	ldr	ip, [r5, #8]
   16228:	str	lr, [sp, #48]	; 0x30
   1622c:	str	ip, [sp, #52]	; 0x34
   16230:	add	sp, sp, #32
   16234:	ldrd	r4, [sp]
   16238:	ldr	r6, [sp, #8]
   1623c:	ldr	lr, [sp, #12]
   16240:	add	sp, sp, #16
   16244:	b	110e8 <__fprintf_chk@plt>
   16248:	mov	r2, #5
   1624c:	movw	r1, #37616	; 0x92f0
   16250:	movt	r1, #1
   16254:	mov	r0, #0
   16258:	bl	10f74 <dcgettext@plt>
   1625c:	ldmib	r5, {r3, ip, lr}
   16260:	mov	r2, r0
   16264:	mov	r1, #1
   16268:	mov	r0, r4
   1626c:	str	r3, [sp]
   16270:	ldr	r3, [r5]
   16274:	stmib	sp, {ip, lr}
   16278:	bl	110e8 <__fprintf_chk@plt>
   1627c:	b	16154 <__assert_fail@plt+0x4fac>
   16280:	mov	r2, #5
   16284:	movw	r1, #37648	; 0x9310
   16288:	movt	r1, #1
   1628c:	mov	r0, #0
   16290:	bl	10f74 <dcgettext@plt>
   16294:	ldmib	r5, {ip, lr}
   16298:	mov	r2, r0
   1629c:	mov	r1, #1
   162a0:	mov	r0, r4
   162a4:	ldr	r3, [r5, #16]
   162a8:	str	ip, [sp]
   162ac:	ldr	ip, [r5, #12]
   162b0:	str	r3, [sp, #12]
   162b4:	ldr	r3, [r5]
   162b8:	str	lr, [sp, #4]
   162bc:	str	ip, [sp, #8]
   162c0:	bl	110e8 <__fprintf_chk@plt>
   162c4:	b	16154 <__assert_fail@plt+0x4fac>
   162c8:	mov	r2, #5
   162cc:	movw	r1, #37684	; 0x9334
   162d0:	movt	r1, #1
   162d4:	mov	r0, #0
   162d8:	bl	10f74 <dcgettext@plt>
   162dc:	ldr	lr, [r5, #4]
   162e0:	mov	r2, r0
   162e4:	mov	r1, #1
   162e8:	mov	r0, r4
   162ec:	ldr	r3, [r5, #8]
   162f0:	ldr	ip, [r5, #20]
   162f4:	str	lr, [sp]
   162f8:	ldr	lr, [r5, #12]
   162fc:	str	ip, [sp, #16]
   16300:	ldr	ip, [r5, #16]
   16304:	str	r3, [sp, #4]
   16308:	ldr	r3, [r5]
   1630c:	str	lr, [sp, #8]
   16310:	str	ip, [sp, #12]
   16314:	bl	110e8 <__fprintf_chk@plt>
   16318:	b	16154 <__assert_fail@plt+0x4fac>
   1631c:	mov	r2, #5
   16320:	movw	r1, #37724	; 0x935c
   16324:	movt	r1, #1
   16328:	mov	r0, #0
   1632c:	bl	10f74 <dcgettext@plt>
   16330:	ldmib	r5, {r3, ip}
   16334:	mov	r2, r0
   16338:	mov	r1, #1
   1633c:	mov	r0, r4
   16340:	ldr	lr, [r5, #24]
   16344:	str	r3, [sp]
   16348:	ldr	r3, [r5, #12]
   1634c:	str	lr, [sp, #20]
   16350:	ldr	lr, [r5, #20]
   16354:	str	ip, [sp, #4]
   16358:	ldr	ip, [r5, #16]
   1635c:	str	r3, [sp, #8]
   16360:	ldr	r3, [r5]
   16364:	str	ip, [sp, #12]
   16368:	str	lr, [sp, #16]
   1636c:	bl	110e8 <__fprintf_chk@plt>
   16370:	b	16154 <__assert_fail@plt+0x4fac>
   16374:	mov	r2, #5
   16378:	movw	r1, #37768	; 0x9388
   1637c:	movt	r1, #1
   16380:	mov	r0, #0
   16384:	bl	10f74 <dcgettext@plt>
   16388:	ldmib	r5, {ip, lr}
   1638c:	mov	r2, r0
   16390:	mov	r1, #1
   16394:	mov	r0, r4
   16398:	ldr	r3, [r5, #28]
   1639c:	str	ip, [sp]
   163a0:	ldr	ip, [r5, #12]
   163a4:	str	r3, [sp, #24]
   163a8:	ldr	r3, [r5, #24]
   163ac:	str	lr, [sp, #4]
   163b0:	ldr	lr, [r5, #16]
   163b4:	str	ip, [sp, #8]
   163b8:	ldr	ip, [r5, #20]
   163bc:	str	r3, [sp, #20]
   163c0:	ldr	r3, [r5]
   163c4:	str	lr, [sp, #12]
   163c8:	str	ip, [sp, #16]
   163cc:	bl	110e8 <__fprintf_chk@plt>
   163d0:	b	16154 <__assert_fail@plt+0x4fac>
   163d4:	movw	r1, #37868	; 0x93ec
   163d8:	movt	r1, #1
   163dc:	b	160f4 <__assert_fail@plt+0x4f4c>
   163e0:	strd	r4, [sp, #-12]!
   163e4:	str	lr, [sp, #8]
   163e8:	sub	sp, sp, #12
   163ec:	ldr	r5, [sp, #24]
   163f0:	ldr	ip, [r5]
   163f4:	cmp	ip, #0
   163f8:	beq	16414 <__assert_fail@plt+0x526c>
   163fc:	mov	lr, r5
   16400:	mov	ip, #0
   16404:	ldr	r4, [lr, #4]!
   16408:	add	ip, ip, #1
   1640c:	cmp	r4, #0
   16410:	bne	16404 <__assert_fail@plt+0x525c>
   16414:	stm	sp, {r5, ip}
   16418:	bl	16000 <__assert_fail@plt+0x4e58>
   1641c:	add	sp, sp, #12
   16420:	ldrd	r4, [sp]
   16424:	add	sp, sp, #8
   16428:	pop	{pc}		; (ldr pc, [sp], #4)
   1642c:	push	{lr}		; (str lr, [sp, #-4]!)
   16430:	sub	sp, sp, #52	; 0x34
   16434:	ldr	ip, [sp, #56]	; 0x38
   16438:	ldr	lr, [ip]
   1643c:	cmp	lr, #0
   16440:	str	lr, [sp, #8]
   16444:	beq	164dc <__assert_fail@plt+0x5334>
   16448:	ldr	lr, [ip, #4]
   1644c:	cmp	lr, #0
   16450:	str	lr, [sp, #12]
   16454:	beq	164f0 <__assert_fail@plt+0x5348>
   16458:	ldr	lr, [ip, #8]
   1645c:	cmp	lr, #0
   16460:	str	lr, [sp, #16]
   16464:	beq	164f8 <__assert_fail@plt+0x5350>
   16468:	ldr	lr, [ip, #12]
   1646c:	cmp	lr, #0
   16470:	str	lr, [sp, #20]
   16474:	beq	16500 <__assert_fail@plt+0x5358>
   16478:	ldr	lr, [ip, #16]
   1647c:	cmp	lr, #0
   16480:	str	lr, [sp, #24]
   16484:	beq	16508 <__assert_fail@plt+0x5360>
   16488:	ldr	lr, [ip, #20]
   1648c:	cmp	lr, #0
   16490:	str	lr, [sp, #28]
   16494:	beq	16510 <__assert_fail@plt+0x5368>
   16498:	ldr	lr, [ip, #24]
   1649c:	cmp	lr, #0
   164a0:	str	lr, [sp, #32]
   164a4:	beq	16518 <__assert_fail@plt+0x5370>
   164a8:	ldr	lr, [ip, #28]
   164ac:	cmp	lr, #0
   164b0:	str	lr, [sp, #36]	; 0x24
   164b4:	beq	16520 <__assert_fail@plt+0x5378>
   164b8:	ldr	lr, [ip, #32]
   164bc:	cmp	lr, #0
   164c0:	str	lr, [sp, #40]	; 0x28
   164c4:	beq	16528 <__assert_fail@plt+0x5380>
   164c8:	ldr	ip, [ip, #36]	; 0x24
   164cc:	cmp	ip, #0
   164d0:	str	ip, [sp, #44]	; 0x2c
   164d4:	movne	lr, #10
   164d8:	moveq	lr, #9
   164dc:	add	ip, sp, #8
   164e0:	stm	sp, {ip, lr}
   164e4:	bl	16000 <__assert_fail@plt+0x4e58>
   164e8:	add	sp, sp, #52	; 0x34
   164ec:	pop	{pc}		; (ldr pc, [sp], #4)
   164f0:	mov	lr, #1
   164f4:	b	164dc <__assert_fail@plt+0x5334>
   164f8:	mov	lr, #2
   164fc:	b	164dc <__assert_fail@plt+0x5334>
   16500:	mov	lr, #3
   16504:	b	164dc <__assert_fail@plt+0x5334>
   16508:	mov	lr, #4
   1650c:	b	164dc <__assert_fail@plt+0x5334>
   16510:	mov	lr, #5
   16514:	b	164dc <__assert_fail@plt+0x5334>
   16518:	mov	lr, #6
   1651c:	b	164dc <__assert_fail@plt+0x5334>
   16520:	mov	lr, #7
   16524:	b	164dc <__assert_fail@plt+0x5334>
   16528:	mov	lr, #8
   1652c:	b	164dc <__assert_fail@plt+0x5334>
   16530:	push	{r3}		; (str r3, [sp, #-4]!)
   16534:	push	{lr}		; (str lr, [sp, #-4]!)
   16538:	sub	sp, sp, #56	; 0x38
   1653c:	ldr	ip, [sp, #64]	; 0x40
   16540:	add	r3, sp, #64	; 0x40
   16544:	str	r3, [sp, #12]
   16548:	cmp	ip, #0
   1654c:	str	ip, [sp, #16]
   16550:	beq	165e8 <__assert_fail@plt+0x5440>
   16554:	ldr	ip, [sp, #68]	; 0x44
   16558:	cmp	ip, #0
   1655c:	str	ip, [sp, #20]
   16560:	beq	1660c <__assert_fail@plt+0x5464>
   16564:	ldr	ip, [sp, #72]	; 0x48
   16568:	cmp	ip, #0
   1656c:	str	ip, [sp, #24]
   16570:	beq	16614 <__assert_fail@plt+0x546c>
   16574:	ldr	ip, [sp, #76]	; 0x4c
   16578:	cmp	ip, #0
   1657c:	str	ip, [sp, #28]
   16580:	beq	1661c <__assert_fail@plt+0x5474>
   16584:	ldr	ip, [sp, #80]	; 0x50
   16588:	cmp	ip, #0
   1658c:	str	ip, [sp, #32]
   16590:	beq	16624 <__assert_fail@plt+0x547c>
   16594:	ldr	ip, [sp, #84]	; 0x54
   16598:	cmp	ip, #0
   1659c:	str	ip, [sp, #36]	; 0x24
   165a0:	beq	1662c <__assert_fail@plt+0x5484>
   165a4:	ldr	ip, [sp, #88]	; 0x58
   165a8:	cmp	ip, #0
   165ac:	str	ip, [sp, #40]	; 0x28
   165b0:	beq	16634 <__assert_fail@plt+0x548c>
   165b4:	ldr	ip, [sp, #92]	; 0x5c
   165b8:	cmp	ip, #0
   165bc:	str	ip, [sp, #44]	; 0x2c
   165c0:	beq	1663c <__assert_fail@plt+0x5494>
   165c4:	ldr	ip, [sp, #96]	; 0x60
   165c8:	cmp	ip, #0
   165cc:	str	ip, [sp, #48]	; 0x30
   165d0:	beq	16644 <__assert_fail@plt+0x549c>
   165d4:	ldr	r3, [sp, #100]	; 0x64
   165d8:	cmp	r3, #0
   165dc:	str	r3, [sp, #52]	; 0x34
   165e0:	movne	ip, #10
   165e4:	moveq	ip, #9
   165e8:	ldr	r3, [sp, #60]	; 0x3c
   165ec:	add	lr, sp, #16
   165f0:	str	lr, [sp]
   165f4:	str	ip, [sp, #4]
   165f8:	bl	16000 <__assert_fail@plt+0x4e58>
   165fc:	add	sp, sp, #56	; 0x38
   16600:	pop	{lr}		; (ldr lr, [sp], #4)
   16604:	add	sp, sp, #4
   16608:	bx	lr
   1660c:	mov	ip, #1
   16610:	b	165e8 <__assert_fail@plt+0x5440>
   16614:	mov	ip, #2
   16618:	b	165e8 <__assert_fail@plt+0x5440>
   1661c:	mov	ip, #3
   16620:	b	165e8 <__assert_fail@plt+0x5440>
   16624:	mov	ip, #4
   16628:	b	165e8 <__assert_fail@plt+0x5440>
   1662c:	mov	ip, #5
   16630:	b	165e8 <__assert_fail@plt+0x5440>
   16634:	mov	ip, #6
   16638:	b	165e8 <__assert_fail@plt+0x5440>
   1663c:	mov	ip, #7
   16640:	b	165e8 <__assert_fail@plt+0x5440>
   16644:	mov	ip, #8
   16648:	b	165e8 <__assert_fail@plt+0x5440>
   1664c:	movw	r3, #41332	; 0xa174
   16650:	movt	r3, #2
   16654:	str	r4, [sp, #-8]!
   16658:	mov	r0, #10
   1665c:	ldr	r1, [r3]
   16660:	str	lr, [sp, #4]
   16664:	bl	10f68 <fputc_unlocked@plt>
   16668:	mov	r2, #5
   1666c:	movw	r1, #37928	; 0x9428
   16670:	movt	r1, #1
   16674:	mov	r0, #0
   16678:	bl	10f74 <dcgettext@plt>
   1667c:	mov	r1, r0
   16680:	movw	r2, #37948	; 0x943c
   16684:	movt	r2, #1
   16688:	mov	r0, #1
   1668c:	bl	110d0 <__printf_chk@plt>
   16690:	mov	r2, #5
   16694:	movw	r1, #37972	; 0x9454
   16698:	movt	r1, #1
   1669c:	mov	r0, #0
   166a0:	bl	10f74 <dcgettext@plt>
   166a4:	mov	r1, r0
   166a8:	movw	r3, #36192	; 0x8d60
   166ac:	movt	r3, #1
   166b0:	movw	r2, #36232	; 0x8d88
   166b4:	movt	r2, #1
   166b8:	mov	r0, #1
   166bc:	bl	110d0 <__printf_chk@plt>
   166c0:	mov	r2, #5
   166c4:	movw	r1, #37992	; 0x9468
   166c8:	movt	r1, #1
   166cc:	mov	r0, #0
   166d0:	bl	10f74 <dcgettext@plt>
   166d4:	mov	r1, r0
   166d8:	movw	r2, #38032	; 0x9490
   166dc:	movt	r2, #1
   166e0:	mov	r0, #1
   166e4:	ldr	r4, [sp]
   166e8:	ldr	lr, [sp, #4]
   166ec:	add	sp, sp, #8
   166f0:	b	110d0 <__printf_chk@plt>
   166f4:	strd	r4, [sp, #-16]!
   166f8:	mov	r4, r0
   166fc:	mov	r5, r2
   16700:	str	r6, [sp, #8]
   16704:	mov	r6, r1
   16708:	str	lr, [sp, #12]
   1670c:	bl	186fc <__assert_fail@plt+0x7554>
   16710:	cmp	r0, #0
   16714:	beq	16728 <__assert_fail@plt+0x5580>
   16718:	ldrd	r4, [sp]
   1671c:	ldr	r6, [sp, #8]
   16720:	add	sp, sp, #12
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	cmp	r4, #0
   1672c:	beq	1673c <__assert_fail@plt+0x5594>
   16730:	cmp	r6, #0
   16734:	cmpne	r5, #0
   16738:	beq	16718 <__assert_fail@plt+0x5570>
   1673c:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16740:	str	r4, [sp, #-8]!
   16744:	str	lr, [sp, #4]
   16748:	bl	180ac <__assert_fail@plt+0x6f04>
   1674c:	cmp	r0, #0
   16750:	beq	16760 <__assert_fail@plt+0x55b8>
   16754:	ldr	r4, [sp]
   16758:	add	sp, sp, #4
   1675c:	pop	{pc}		; (ldr pc, [sp], #4)
   16760:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16764:	str	r4, [sp, #-8]!
   16768:	str	lr, [sp, #4]
   1676c:	bl	180ac <__assert_fail@plt+0x6f04>
   16770:	cmp	r0, #0
   16774:	beq	16784 <__assert_fail@plt+0x55dc>
   16778:	ldr	r4, [sp]
   1677c:	add	sp, sp, #4
   16780:	pop	{pc}		; (ldr pc, [sp], #4)
   16784:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16788:	str	r4, [sp, #-8]!
   1678c:	str	lr, [sp, #4]
   16790:	bl	180ac <__assert_fail@plt+0x6f04>
   16794:	cmp	r0, #0
   16798:	beq	167a8 <__assert_fail@plt+0x5600>
   1679c:	ldr	r4, [sp]
   167a0:	add	sp, sp, #4
   167a4:	pop	{pc}		; (ldr pc, [sp], #4)
   167a8:	bl	16cf8 <__assert_fail@plt+0x5b50>
   167ac:	strd	r4, [sp, #-16]!
   167b0:	mov	r5, r0
   167b4:	mov	r4, r1
   167b8:	str	r6, [sp, #8]
   167bc:	str	lr, [sp, #12]
   167c0:	bl	180e8 <__assert_fail@plt+0x6f40>
   167c4:	cmp	r0, #0
   167c8:	beq	167dc <__assert_fail@plt+0x5634>
   167cc:	ldrd	r4, [sp]
   167d0:	ldr	r6, [sp, #8]
   167d4:	add	sp, sp, #12
   167d8:	pop	{pc}		; (ldr pc, [sp], #4)
   167dc:	adds	r4, r4, #0
   167e0:	movne	r4, #1
   167e4:	cmp	r5, #0
   167e8:	moveq	r4, #1
   167ec:	cmp	r4, #0
   167f0:	beq	167cc <__assert_fail@plt+0x5624>
   167f4:	bl	16cf8 <__assert_fail@plt+0x5b50>
   167f8:	cmp	r1, #0
   167fc:	orreq	r1, r1, #1
   16800:	str	r4, [sp, #-8]!
   16804:	str	lr, [sp, #4]
   16808:	bl	180e8 <__assert_fail@plt+0x6f40>
   1680c:	cmp	r0, #0
   16810:	beq	16820 <__assert_fail@plt+0x5678>
   16814:	ldr	r4, [sp]
   16818:	add	sp, sp, #4
   1681c:	pop	{pc}		; (ldr pc, [sp], #4)
   16820:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16824:	strd	r4, [sp, #-16]!
   16828:	mov	r4, r0
   1682c:	mov	r5, r2
   16830:	str	r6, [sp, #8]
   16834:	mov	r6, r1
   16838:	str	lr, [sp, #12]
   1683c:	bl	186fc <__assert_fail@plt+0x7554>
   16840:	cmp	r0, #0
   16844:	beq	16858 <__assert_fail@plt+0x56b0>
   16848:	ldrd	r4, [sp]
   1684c:	ldr	r6, [sp, #8]
   16850:	add	sp, sp, #12
   16854:	pop	{pc}		; (ldr pc, [sp], #4)
   16858:	cmp	r4, #0
   1685c:	beq	1686c <__assert_fail@plt+0x56c4>
   16860:	cmp	r6, #0
   16864:	cmpne	r5, #0
   16868:	beq	16848 <__assert_fail@plt+0x56a0>
   1686c:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16870:	cmp	r2, #0
   16874:	cmpne	r1, #0
   16878:	str	r4, [sp, #-8]!
   1687c:	moveq	r2, #1
   16880:	str	lr, [sp, #4]
   16884:	moveq	r1, r2
   16888:	bl	186fc <__assert_fail@plt+0x7554>
   1688c:	cmp	r0, #0
   16890:	beq	168a0 <__assert_fail@plt+0x56f8>
   16894:	ldr	r4, [sp]
   16898:	add	sp, sp, #4
   1689c:	pop	{pc}		; (ldr pc, [sp], #4)
   168a0:	bl	16cf8 <__assert_fail@plt+0x5b50>
   168a4:	mov	r2, r1
   168a8:	mov	r1, r0
   168ac:	str	r4, [sp, #-8]!
   168b0:	mov	r0, #0
   168b4:	str	lr, [sp, #4]
   168b8:	bl	186fc <__assert_fail@plt+0x7554>
   168bc:	cmp	r0, #0
   168c0:	beq	168d0 <__assert_fail@plt+0x5728>
   168c4:	ldr	r4, [sp]
   168c8:	add	sp, sp, #4
   168cc:	pop	{pc}		; (ldr pc, [sp], #4)
   168d0:	bl	16cf8 <__assert_fail@plt+0x5b50>
   168d4:	cmp	r1, #0
   168d8:	cmpne	r0, #0
   168dc:	str	r4, [sp, #-8]!
   168e0:	moveq	r2, #1
   168e4:	movne	r2, r1
   168e8:	str	lr, [sp, #4]
   168ec:	movne	r1, r0
   168f0:	moveq	r1, r2
   168f4:	mov	r0, #0
   168f8:	bl	186fc <__assert_fail@plt+0x7554>
   168fc:	cmp	r0, #0
   16900:	beq	16910 <__assert_fail@plt+0x5768>
   16904:	ldr	r4, [sp]
   16908:	add	sp, sp, #4
   1690c:	pop	{pc}		; (ldr pc, [sp], #4)
   16910:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16914:	cmp	r0, #0
   16918:	strd	r4, [sp, #-16]!
   1691c:	mov	r5, r1
   16920:	ldr	r4, [r1]
   16924:	str	r6, [sp, #8]
   16928:	str	lr, [sp, #12]
   1692c:	beq	16974 <__assert_fail@plt+0x57cc>
   16930:	lsr	r3, r4, #1
   16934:	add	r3, r3, #1
   16938:	adds	r4, r4, r3
   1693c:	bcs	16970 <__assert_fail@plt+0x57c8>
   16940:	mov	r2, #1
   16944:	mov	r1, r4
   16948:	bl	186fc <__assert_fail@plt+0x7554>
   1694c:	cmp	r0, #0
   16950:	beq	16968 <__assert_fail@plt+0x57c0>
   16954:	ldr	r6, [sp, #8]
   16958:	str	r4, [r5]
   1695c:	ldrd	r4, [sp]
   16960:	add	sp, sp, #12
   16964:	pop	{pc}		; (ldr pc, [sp], #4)
   16968:	cmp	r4, #0
   1696c:	beq	16954 <__assert_fail@plt+0x57ac>
   16970:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16974:	cmp	r4, #0
   16978:	mov	r2, #1
   1697c:	moveq	r4, #64	; 0x40
   16980:	mov	r1, r4
   16984:	bl	186fc <__assert_fail@plt+0x7554>
   16988:	cmp	r0, #0
   1698c:	bne	16954 <__assert_fail@plt+0x57ac>
   16990:	b	16970 <__assert_fail@plt+0x57c8>
   16994:	cmp	r0, #0
   16998:	strd	r4, [sp, #-16]!
   1699c:	mov	r5, r1
   169a0:	ldr	r4, [r1]
   169a4:	str	r6, [sp, #8]
   169a8:	mov	r6, r2
   169ac:	str	lr, [sp, #12]
   169b0:	beq	169f8 <__assert_fail@plt+0x5850>
   169b4:	lsr	r3, r4, #1
   169b8:	add	r3, r3, #1
   169bc:	adds	r4, r4, r3
   169c0:	bcs	169f4 <__assert_fail@plt+0x584c>
   169c4:	mov	r1, r4
   169c8:	bl	186fc <__assert_fail@plt+0x7554>
   169cc:	cmp	r0, #0
   169d0:	beq	169e8 <__assert_fail@plt+0x5840>
   169d4:	ldr	r6, [sp, #8]
   169d8:	str	r4, [r5]
   169dc:	ldrd	r4, [sp]
   169e0:	add	sp, sp, #12
   169e4:	pop	{pc}		; (ldr pc, [sp], #4)
   169e8:	cmp	r4, #0
   169ec:	cmpne	r6, #0
   169f0:	beq	169d4 <__assert_fail@plt+0x582c>
   169f4:	bl	16cf8 <__assert_fail@plt+0x5b50>
   169f8:	cmp	r4, #0
   169fc:	bne	16a10 <__assert_fail@plt+0x5868>
   16a00:	mov	r4, #64	; 0x40
   16a04:	udiv	r4, r4, r2
   16a08:	cmp	r2, #64	; 0x40
   16a0c:	addhi	r4, r4, #1
   16a10:	mov	r2, r6
   16a14:	mov	r1, r4
   16a18:	mov	r0, #0
   16a1c:	bl	186fc <__assert_fail@plt+0x7554>
   16a20:	cmp	r0, #0
   16a24:	bne	169d4 <__assert_fail@plt+0x582c>
   16a28:	b	169f4 <__assert_fail@plt+0x584c>
   16a2c:	ldr	ip, [r1]
   16a30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a34:	strd	r6, [sp, #8]
   16a38:	mov	r7, r1
   16a3c:	mov	r6, r0
   16a40:	str	r8, [sp, #16]
   16a44:	mvn	r8, r3
   16a48:	lsr	r8, r8, #31
   16a4c:	str	lr, [sp, #20]
   16a50:	asr	r1, ip, #1
   16a54:	ldr	lr, [sp, #24]
   16a58:	adds	r4, ip, r1
   16a5c:	mvnvs	r4, #-2147483648	; 0x80000000
   16a60:	cmp	r3, r4
   16a64:	movge	r1, #0
   16a68:	andlt	r1, r8, #1
   16a6c:	cmp	r1, #0
   16a70:	movne	r4, r3
   16a74:	smull	r0, r1, r4, lr
   16a78:	cmp	r1, r0, asr #31
   16a7c:	bne	16b2c <__assert_fail@plt+0x5984>
   16a80:	cmp	r0, #63	; 0x3f
   16a84:	mov	r5, r0
   16a88:	ble	16af8 <__assert_fail@plt+0x5950>
   16a8c:	cmp	r6, #0
   16a90:	sub	r1, r4, ip
   16a94:	streq	r6, [r7]
   16a98:	cmp	r1, r2
   16a9c:	bge	16acc <__assert_fail@plt+0x5924>
   16aa0:	adds	r4, ip, r2
   16aa4:	bvs	16b28 <__assert_fail@plt+0x5980>
   16aa8:	cmp	r4, r3
   16aac:	movle	r3, #0
   16ab0:	andgt	r3, r8, #1
   16ab4:	cmp	r3, #0
   16ab8:	bne	16b28 <__assert_fail@plt+0x5980>
   16abc:	smull	r0, r1, r4, lr
   16ac0:	cmp	r1, r0, asr #31
   16ac4:	mov	r5, r0
   16ac8:	bne	16b28 <__assert_fail@plt+0x5980>
   16acc:	mov	r1, r5
   16ad0:	mov	r0, r6
   16ad4:	bl	180e8 <__assert_fail@plt+0x6f40>
   16ad8:	cmp	r0, #0
   16adc:	beq	16b0c <__assert_fail@plt+0x5964>
   16ae0:	ldr	r8, [sp, #16]
   16ae4:	str	r4, [r7]
   16ae8:	ldrd	r4, [sp]
   16aec:	ldrd	r6, [sp, #8]
   16af0:	add	sp, sp, #20
   16af4:	pop	{pc}		; (ldr pc, [sp], #4)
   16af8:	mov	r0, #64	; 0x40
   16afc:	sdiv	r4, r0, lr
   16b00:	mls	r5, lr, r4, r0
   16b04:	sub	r5, r0, r5
   16b08:	b	16a8c <__assert_fail@plt+0x58e4>
   16b0c:	adds	r5, r5, #0
   16b10:	movne	r5, #1
   16b14:	cmp	r6, #0
   16b18:	movne	r6, r5
   16b1c:	moveq	r6, #1
   16b20:	cmp	r6, #0
   16b24:	beq	16ae0 <__assert_fail@plt+0x5938>
   16b28:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16b2c:	mvn	r0, #-2147483648	; 0x80000000
   16b30:	b	16afc <__assert_fail@plt+0x5954>
   16b34:	mov	r1, #1
   16b38:	str	r4, [sp, #-8]!
   16b3c:	str	lr, [sp, #4]
   16b40:	bl	18038 <__assert_fail@plt+0x6e90>
   16b44:	cmp	r0, #0
   16b48:	beq	16b58 <__assert_fail@plt+0x59b0>
   16b4c:	ldr	r4, [sp]
   16b50:	add	sp, sp, #4
   16b54:	pop	{pc}		; (ldr pc, [sp], #4)
   16b58:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16b5c:	mov	r1, #1
   16b60:	str	r4, [sp, #-8]!
   16b64:	str	lr, [sp, #4]
   16b68:	bl	18038 <__assert_fail@plt+0x6e90>
   16b6c:	cmp	r0, #0
   16b70:	beq	16b80 <__assert_fail@plt+0x59d8>
   16b74:	ldr	r4, [sp]
   16b78:	add	sp, sp, #4
   16b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b80:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16b84:	str	r4, [sp, #-8]!
   16b88:	str	lr, [sp, #4]
   16b8c:	bl	18038 <__assert_fail@plt+0x6e90>
   16b90:	cmp	r0, #0
   16b94:	beq	16ba4 <__assert_fail@plt+0x59fc>
   16b98:	ldr	r4, [sp]
   16b9c:	add	sp, sp, #4
   16ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba4:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16ba8:	str	r4, [sp, #-8]!
   16bac:	str	lr, [sp, #4]
   16bb0:	bl	18038 <__assert_fail@plt+0x6e90>
   16bb4:	cmp	r0, #0
   16bb8:	beq	16bc8 <__assert_fail@plt+0x5a20>
   16bbc:	ldr	r4, [sp]
   16bc0:	add	sp, sp, #4
   16bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc8:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16bcc:	strd	r4, [sp, #-16]!
   16bd0:	mov	r4, r1
   16bd4:	str	r6, [sp, #8]
   16bd8:	mov	r6, r0
   16bdc:	mov	r0, r1
   16be0:	str	lr, [sp, #12]
   16be4:	bl	180ac <__assert_fail@plt+0x6f04>
   16be8:	subs	r5, r0, #0
   16bec:	beq	16c10 <__assert_fail@plt+0x5a68>
   16bf0:	mov	r2, r4
   16bf4:	mov	r1, r6
   16bf8:	bl	10f2c <memcpy@plt>
   16bfc:	mov	r0, r5
   16c00:	ldrd	r4, [sp]
   16c04:	ldr	r6, [sp, #8]
   16c08:	add	sp, sp, #12
   16c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c10:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16c14:	strd	r4, [sp, #-16]!
   16c18:	mov	r4, r1
   16c1c:	str	r6, [sp, #8]
   16c20:	mov	r6, r0
   16c24:	mov	r0, r1
   16c28:	str	lr, [sp, #12]
   16c2c:	bl	180ac <__assert_fail@plt+0x6f04>
   16c30:	subs	r5, r0, #0
   16c34:	beq	16c58 <__assert_fail@plt+0x5ab0>
   16c38:	mov	r2, r4
   16c3c:	mov	r1, r6
   16c40:	bl	10f2c <memcpy@plt>
   16c44:	mov	r0, r5
   16c48:	ldrd	r4, [sp]
   16c4c:	ldr	r6, [sp, #8]
   16c50:	add	sp, sp, #12
   16c54:	pop	{pc}		; (ldr pc, [sp], #4)
   16c58:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16c5c:	strd	r4, [sp, #-16]!
   16c60:	mov	r4, r1
   16c64:	str	r6, [sp, #8]
   16c68:	mov	r6, r0
   16c6c:	add	r0, r1, #1
   16c70:	str	lr, [sp, #12]
   16c74:	bl	180ac <__assert_fail@plt+0x6f04>
   16c78:	subs	r5, r0, #0
   16c7c:	beq	16ca8 <__assert_fail@plt+0x5b00>
   16c80:	mov	r3, #0
   16c84:	mov	r1, r6
   16c88:	mov	r2, r4
   16c8c:	strb	r3, [r5, r4]
   16c90:	bl	10f2c <memcpy@plt>
   16c94:	mov	r0, r5
   16c98:	ldrd	r4, [sp]
   16c9c:	ldr	r6, [sp, #8]
   16ca0:	add	sp, sp, #12
   16ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ca8:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16cac:	strd	r4, [sp, #-16]!
   16cb0:	str	r6, [sp, #8]
   16cb4:	mov	r6, r0
   16cb8:	str	lr, [sp, #12]
   16cbc:	bl	11088 <strlen@plt>
   16cc0:	add	r4, r0, #1
   16cc4:	mov	r0, r4
   16cc8:	bl	180ac <__assert_fail@plt+0x6f04>
   16ccc:	subs	r5, r0, #0
   16cd0:	beq	16cf4 <__assert_fail@plt+0x5b4c>
   16cd4:	mov	r2, r4
   16cd8:	mov	r1, r6
   16cdc:	bl	10f2c <memcpy@plt>
   16ce0:	mov	r0, r5
   16ce4:	ldrd	r4, [sp]
   16ce8:	ldr	r6, [sp, #8]
   16cec:	add	sp, sp, #12
   16cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf4:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16cf8:	movw	r3, #41244	; 0xa11c
   16cfc:	movt	r3, #2
   16d00:	str	r4, [sp, #-8]!
   16d04:	ldr	r4, [r3]
   16d08:	mov	r2, #5
   16d0c:	movw	r1, #38112	; 0x94e0
   16d10:	movt	r1, #1
   16d14:	mov	r0, #0
   16d18:	str	lr, [sp, #4]
   16d1c:	bl	10f74 <dcgettext@plt>
   16d20:	mov	r3, r0
   16d24:	movw	r2, #36984	; 0x9078
   16d28:	movt	r2, #1
   16d2c:	mov	r1, #0
   16d30:	mov	r0, r4
   16d34:	bl	11004 <error@plt>
   16d38:	bl	11184 <abort@plt>
   16d3c:	str	r4, [sp, #-8]!
   16d40:	str	lr, [sp, #4]
   16d44:	bl	184e0 <__assert_fail@plt+0x7338>
   16d48:	cmn	r0, #1
   16d4c:	mov	r4, r0
   16d50:	beq	16d64 <__assert_fail@plt+0x5bbc>
   16d54:	mov	r0, r4
   16d58:	ldr	r4, [sp]
   16d5c:	add	sp, sp, #4
   16d60:	pop	{pc}		; (ldr pc, [sp], #4)
   16d64:	bl	110a0 <__errno_location@plt>
   16d68:	ldr	r3, [r0]
   16d6c:	cmp	r3, #12
   16d70:	bne	16d54 <__assert_fail@plt+0x5bac>
   16d74:	bl	16cf8 <__assert_fail@plt+0x5b50>
   16d78:	cmp	r2, #36	; 0x24
   16d7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16d80:	strd	r6, [sp, #8]
   16d84:	strd	r8, [sp, #16]
   16d88:	str	sl, [sp, #24]
   16d8c:	str	lr, [sp, #28]
   16d90:	sub	sp, sp, #8
   16d94:	bhi	172bc <__assert_fail@plt+0x6114>
   16d98:	cmp	r1, #0
   16d9c:	mov	r7, r2
   16da0:	mov	r5, r1
   16da4:	mov	r9, r0
   16da8:	addeq	r5, sp, #4
   16dac:	mov	r6, r3
   16db0:	bl	110a0 <__errno_location@plt>
   16db4:	mov	r3, #0
   16db8:	mov	sl, r0
   16dbc:	str	r3, [r0]
   16dc0:	ldrb	r4, [r9]
   16dc4:	bl	11064 <__ctype_b_loc@plt>
   16dc8:	ldr	r2, [r0]
   16dcc:	lsl	r3, r4, #1
   16dd0:	ldrh	r3, [r2, r3]
   16dd4:	tst	r3, #8192	; 0x2000
   16dd8:	beq	16df4 <__assert_fail@plt+0x5c4c>
   16ddc:	mov	r3, r9
   16de0:	ldrb	r4, [r3, #1]!
   16de4:	lsl	r1, r4, #1
   16de8:	ldrh	r1, [r2, r1]
   16dec:	tst	r1, #8192	; 0x2000
   16df0:	bne	16de0 <__assert_fail@plt+0x5c38>
   16df4:	cmp	r4, #45	; 0x2d
   16df8:	beq	16e8c <__assert_fail@plt+0x5ce4>
   16dfc:	mov	r2, r7
   16e00:	mov	r1, r5
   16e04:	mov	r0, r9
   16e08:	bl	1107c <strtoul@plt>
   16e0c:	ldr	r7, [r5]
   16e10:	mov	r8, r0
   16e14:	cmp	r7, r9
   16e18:	beq	16e74 <__assert_fail@plt+0x5ccc>
   16e1c:	ldr	r4, [sl]
   16e20:	cmp	r4, #0
   16e24:	bne	16e64 <__assert_fail@plt+0x5cbc>
   16e28:	ldr	r3, [sp, #40]	; 0x28
   16e2c:	cmp	r3, #0
   16e30:	beq	16e40 <__assert_fail@plt+0x5c98>
   16e34:	ldrb	r9, [r7]
   16e38:	cmp	r9, #0
   16e3c:	bne	17174 <__assert_fail@plt+0x5fcc>
   16e40:	str	r8, [r6]
   16e44:	mov	r0, r4
   16e48:	add	sp, sp, #8
   16e4c:	ldrd	r4, [sp]
   16e50:	ldrd	r6, [sp, #8]
   16e54:	ldrd	r8, [sp, #16]
   16e58:	ldr	sl, [sp, #24]
   16e5c:	add	sp, sp, #28
   16e60:	pop	{pc}		; (ldr pc, [sp], #4)
   16e64:	cmp	r4, #34	; 0x22
   16e68:	bne	16e8c <__assert_fail@plt+0x5ce4>
   16e6c:	mov	r4, #1
   16e70:	b	16e28 <__assert_fail@plt+0x5c80>
   16e74:	ldr	r3, [sp, #40]	; 0x28
   16e78:	cmp	r3, #0
   16e7c:	beq	16e8c <__assert_fail@plt+0x5ce4>
   16e80:	ldrb	r9, [r9]
   16e84:	cmp	r9, #0
   16e88:	bne	16e94 <__assert_fail@plt+0x5cec>
   16e8c:	mov	r4, #4
   16e90:	b	16e44 <__assert_fail@plt+0x5c9c>
   16e94:	mov	r1, r9
   16e98:	mov	r0, r3
   16e9c:	bl	11094 <strchr@plt>
   16ea0:	cmp	r0, #0
   16ea4:	movne	r4, #0
   16ea8:	movne	r8, #1
   16eac:	beq	16e8c <__assert_fail@plt+0x5ce4>
   16eb0:	sub	r3, r9, #69	; 0x45
   16eb4:	cmp	r3, #47	; 0x2f
   16eb8:	ldrls	pc, [pc, r3, lsl #2]
   16ebc:	b	16fc0 <__assert_fail@plt+0x5e18>
   16ec0:	andeq	r6, r1, r0, lsl #31
   16ec4:	andeq	r6, r1, r0, asr #31
   16ec8:	andeq	r6, r1, r0, lsl #31
   16ecc:	andeq	r6, r1, r0, asr #31
   16ed0:	andeq	r6, r1, r0, asr #31
   16ed4:	andeq	r6, r1, r0, asr #31
   16ed8:	andeq	r6, r1, r0, lsl #31
   16edc:	andeq	r6, r1, r0, asr #31
   16ee0:	andeq	r6, r1, r0, lsl #31
   16ee4:	andeq	r6, r1, r0, asr #31
   16ee8:	andeq	r6, r1, r0, asr #31
   16eec:	andeq	r6, r1, r0, lsl #31
   16ef0:	andeq	r6, r1, r0, asr #31
   16ef4:	andeq	r6, r1, r0, asr #31
   16ef8:	andeq	r6, r1, r0, asr #31
   16efc:	andeq	r6, r1, r0, lsl #31
   16f00:	andeq	r6, r1, r0, asr #31
   16f04:	andeq	r6, r1, r0, asr #31
   16f08:	andeq	r6, r1, r0, asr #31
   16f0c:	andeq	r6, r1, r0, asr #31
   16f10:	andeq	r6, r1, r0, lsl #31
   16f14:	andeq	r6, r1, r0, lsl #31
   16f18:	andeq	r6, r1, r0, asr #31
   16f1c:	andeq	r6, r1, r0, asr #31
   16f20:	andeq	r6, r1, r0, asr #31
   16f24:	andeq	r6, r1, r0, asr #31
   16f28:	andeq	r6, r1, r0, asr #31
   16f2c:	andeq	r6, r1, r0, asr #31
   16f30:	andeq	r6, r1, r0, asr #31
   16f34:	andeq	r6, r1, r0, asr #31
   16f38:	andeq	r6, r1, r0, asr #31
   16f3c:	andeq	r6, r1, r0, asr #31
   16f40:	andeq	r6, r1, r0, asr #31
   16f44:	andeq	r6, r1, r0, asr #31
   16f48:	andeq	r6, r1, r0, lsl #31
   16f4c:	andeq	r6, r1, r0, asr #31
   16f50:	andeq	r6, r1, r0, asr #31
   16f54:	andeq	r6, r1, r0, asr #31
   16f58:	andeq	r6, r1, r0, lsl #31
   16f5c:	andeq	r6, r1, r0, asr #31
   16f60:	andeq	r6, r1, r0, lsl #31
   16f64:	andeq	r6, r1, r0, asr #31
   16f68:	andeq	r6, r1, r0, asr #31
   16f6c:	andeq	r6, r1, r0, asr #31
   16f70:	andeq	r6, r1, r0, asr #31
   16f74:	andeq	r6, r1, r0, asr #31
   16f78:	andeq	r6, r1, r0, asr #31
   16f7c:	andeq	r6, r1, r0, lsl #31
   16f80:	mov	r1, #48	; 0x30
   16f84:	ldr	r0, [sp, #40]	; 0x28
   16f88:	bl	11094 <strchr@plt>
   16f8c:	cmp	r0, #0
   16f90:	beq	16fc0 <__assert_fail@plt+0x5e18>
   16f94:	ldrb	r3, [r7, #1]
   16f98:	cmp	r3, #68	; 0x44
   16f9c:	beq	172b0 <__assert_fail@plt+0x6108>
   16fa0:	cmp	r3, #105	; 0x69
   16fa4:	beq	1718c <__assert_fail@plt+0x5fe4>
   16fa8:	cmp	r3, #66	; 0x42
   16fac:	moveq	r0, #2
   16fb0:	movne	r0, #1
   16fb4:	moveq	r1, #1000	; 0x3e8
   16fb8:	movne	r1, #1024	; 0x400
   16fbc:	b	16fc8 <__assert_fail@plt+0x5e20>
   16fc0:	mov	r0, #1
   16fc4:	mov	r1, #1024	; 0x400
   16fc8:	sub	r9, r9, #66	; 0x42
   16fcc:	cmp	r9, #53	; 0x35
   16fd0:	ldrls	pc, [pc, r9, lsl #2]
   16fd4:	b	17158 <__assert_fail@plt+0x5fb0>
   16fd8:	muleq	r1, r8, r2
   16fdc:	andeq	r7, r1, r8, asr r1
   16fe0:	andeq	r7, r1, r8, asr r1
   16fe4:	andeq	r7, r1, r0, lsl #5
   16fe8:	andeq	r7, r1, r8, asr r1
   16fec:	andeq	r7, r1, ip, asr r2
   16ff0:	andeq	r7, r1, r8, asr r1
   16ff4:	andeq	r7, r1, r8, asr r1
   16ff8:	andeq	r7, r1, r8, asr r1
   16ffc:	andeq	r7, r1, r0, ror #2
   17000:	andeq	r7, r1, r8, asr r1
   17004:	andeq	r7, r1, r4, lsr r2
   17008:	andeq	r7, r1, r8, asr r1
   1700c:	andeq	r7, r1, r8, asr r1
   17010:	andeq	r7, r1, ip, lsl r2
   17014:	andeq	r7, r1, r8, asr r1
   17018:	andeq	r7, r1, r8, asr r1
   1701c:	andeq	r7, r1, r8, asr r1
   17020:	andeq	r7, r1, r4, lsl #4
   17024:	andeq	r7, r1, r8, asr r1
   17028:	andeq	r7, r1, r8, asr r1
   1702c:	andeq	r7, r1, r8, asr r1
   17030:	andeq	r7, r1, r8, asr r1
   17034:	ldrdeq	r7, [r1], -r4
   17038:	strheq	r7, [r1], -r0
   1703c:	andeq	r7, r1, r8, asr r1
   17040:	andeq	r7, r1, r8, asr r1
   17044:	andeq	r7, r1, r8, asr r1
   17048:	andeq	r7, r1, r8, asr r1
   1704c:	andeq	r7, r1, r8, asr r1
   17050:	andeq	r7, r1, r8, asr r1
   17054:	andeq	r7, r1, r8, asr r1
   17058:			; <UNDEFINED> instruction: 0x000171bc
   1705c:	andeq	r7, r1, r4, asr #2
   17060:	andeq	r7, r1, r8, asr r1
   17064:	andeq	r7, r1, r8, asr r1
   17068:	andeq	r7, r1, r8, asr r1
   1706c:	andeq	r7, r1, ip, asr r2
   17070:	andeq	r7, r1, r8, asr r1
   17074:	andeq	r7, r1, r8, asr r1
   17078:	andeq	r7, r1, r8, asr r1
   1707c:	andeq	r7, r1, r0, ror #2
   17080:	andeq	r7, r1, r8, asr r1
   17084:	andeq	r7, r1, r4, lsr r2
   17088:	andeq	r7, r1, r8, asr r1
   1708c:	andeq	r7, r1, r8, asr r1
   17090:	andeq	r7, r1, r8, asr r1
   17094:	andeq	r7, r1, r8, asr r1
   17098:	andeq	r7, r1, r8, asr r1
   1709c:	andeq	r7, r1, r8, asr r1
   170a0:	andeq	r7, r1, r4, lsl #4
   170a4:	andeq	r7, r1, r8, asr r1
   170a8:	andeq	r7, r1, r8, asr r1
   170ac:	andeq	r7, r1, r4, lsr #3
   170b0:	umull	r2, r3, r8, r1
   170b4:	adds	ip, r3, #0
   170b8:	movne	ip, #1
   170bc:	cmp	ip, #0
   170c0:	bne	171fc <__assert_fail@plt+0x6054>
   170c4:	umull	r2, r3, r2, r1
   170c8:	adds	ip, r3, #0
   170cc:	movne	ip, #1
   170d0:	cmp	ip, #0
   170d4:	bne	171fc <__assert_fail@plt+0x6054>
   170d8:	umull	r2, r3, r2, r1
   170dc:	adds	ip, r3, #0
   170e0:	movne	ip, #1
   170e4:	cmp	ip, #0
   170e8:	bne	171fc <__assert_fail@plt+0x6054>
   170ec:	umull	r2, r3, r2, r1
   170f0:	adds	ip, r3, #0
   170f4:	movne	ip, #1
   170f8:	cmp	ip, #0
   170fc:	bne	171fc <__assert_fail@plt+0x6054>
   17100:	umull	r2, r3, r2, r1
   17104:	adds	ip, r3, #0
   17108:	movne	ip, #1
   1710c:	cmp	ip, #0
   17110:	bne	171fc <__assert_fail@plt+0x6054>
   17114:	umull	r2, r3, r2, r1
   17118:	adds	ip, r3, #0
   1711c:	movne	ip, #1
   17120:	cmp	ip, #0
   17124:	bne	171fc <__assert_fail@plt+0x6054>
   17128:	umull	r2, r3, r2, r1
   1712c:	adds	ip, r3, #0
   17130:	movne	ip, #1
   17134:	cmp	ip, #0
   17138:	moveq	r8, r2
   1713c:	mvnne	r8, #0
   17140:	orr	r4, r4, ip
   17144:	add	r3, r7, r0
   17148:	str	r3, [r5]
   1714c:	ldrb	r3, [r7, r0]
   17150:	cmp	r3, #0
   17154:	beq	16e40 <__assert_fail@plt+0x5c98>
   17158:	orr	r4, r4, #2
   1715c:	b	16e40 <__assert_fail@plt+0x5c98>
   17160:	umull	r8, r9, r8, r1
   17164:	cmp	r9, #0
   17168:	movne	r4, #1
   1716c:	mvnne	r8, #0
   17170:	b	17144 <__assert_fail@plt+0x5f9c>
   17174:	mov	r0, r3
   17178:	mov	r1, r9
   1717c:	bl	11094 <strchr@plt>
   17180:	cmp	r0, #0
   17184:	bne	16eb0 <__assert_fail@plt+0x5d08>
   17188:	b	17158 <__assert_fail@plt+0x5fb0>
   1718c:	ldrb	r3, [r7, #2]
   17190:	mov	r1, #1024	; 0x400
   17194:	cmp	r3, #66	; 0x42
   17198:	movne	r0, #1
   1719c:	moveq	r0, #3
   171a0:	b	16fc8 <__assert_fail@plt+0x5e20>
   171a4:	lsr	r3, r8, #31
   171a8:	cmp	r3, #0
   171ac:	movne	r4, #1
   171b0:	mvnne	r8, #0
   171b4:	lsleq	r8, r8, #1
   171b8:	b	17144 <__assert_fail@plt+0x5f9c>
   171bc:	lsr	r3, r8, #23
   171c0:	cmp	r3, #0
   171c4:	movne	r4, #1
   171c8:	mvnne	r8, #0
   171cc:	lsleq	r8, r8, #9
   171d0:	b	17144 <__assert_fail@plt+0x5f9c>
   171d4:	umull	r2, r3, r8, r1
   171d8:	adds	ip, r3, #0
   171dc:	movne	ip, #1
   171e0:	cmp	ip, #0
   171e4:	bne	171fc <__assert_fail@plt+0x6054>
   171e8:	umull	r2, r3, r2, r1
   171ec:	adds	ip, r3, #0
   171f0:	movne	ip, #1
   171f4:	cmp	ip, #0
   171f8:	beq	170c4 <__assert_fail@plt+0x5f1c>
   171fc:	mvn	r8, #0
   17200:	b	17140 <__assert_fail@plt+0x5f98>
   17204:	umull	r2, r3, r8, r1
   17208:	adds	ip, r3, #0
   1720c:	movne	ip, #1
   17210:	cmp	ip, #0
   17214:	beq	17100 <__assert_fail@plt+0x5f58>
   17218:	b	171fc <__assert_fail@plt+0x6054>
   1721c:	umull	r2, r3, r8, r1
   17220:	adds	ip, r3, #0
   17224:	movne	ip, #1
   17228:	cmp	ip, #0
   1722c:	beq	170ec <__assert_fail@plt+0x5f44>
   17230:	b	171fc <__assert_fail@plt+0x6054>
   17234:	umull	r2, r3, r8, r1
   17238:	cmp	r3, #0
   1723c:	bne	17274 <__assert_fail@plt+0x60cc>
   17240:	umull	r8, r9, r2, r1
   17244:	adds	r3, r9, #0
   17248:	movne	r3, #1
   1724c:	cmp	r3, #0
   17250:	movne	r4, r3
   17254:	mvnne	r8, #0
   17258:	b	17144 <__assert_fail@plt+0x5f9c>
   1725c:	umull	r2, r3, r8, r1
   17260:	cmp	r3, #0
   17264:	bne	17274 <__assert_fail@plt+0x60cc>
   17268:	umull	r2, r3, r2, r1
   1726c:	cmp	r3, #0
   17270:	beq	17240 <__assert_fail@plt+0x6098>
   17274:	mov	r4, #1
   17278:	mvn	r8, #0
   1727c:	b	17144 <__assert_fail@plt+0x5f9c>
   17280:	umull	r2, r3, r8, r1
   17284:	adds	ip, r3, #0
   17288:	movne	ip, #1
   1728c:	cmp	ip, #0
   17290:	beq	170d8 <__assert_fail@plt+0x5f30>
   17294:	b	171fc <__assert_fail@plt+0x6054>
   17298:	lsr	r3, r8, #22
   1729c:	cmp	r3, #0
   172a0:	movne	r4, #1
   172a4:	mvnne	r8, #0
   172a8:	lsleq	r8, r8, #10
   172ac:	b	17144 <__assert_fail@plt+0x5f9c>
   172b0:	mov	r0, #2
   172b4:	mov	r1, #1000	; 0x3e8
   172b8:	b	16fc8 <__assert_fail@plt+0x5e20>
   172bc:	movw	r3, #38132	; 0x94f4
   172c0:	movt	r3, #1
   172c4:	movw	r1, #38144	; 0x9500
   172c8:	movt	r1, #1
   172cc:	movw	r0, #38160	; 0x9510
   172d0:	movt	r0, #1
   172d4:	mov	r2, #85	; 0x55
   172d8:	bl	111a8 <__assert_fail@plt>
   172dc:	cmp	r2, #36	; 0x24
   172e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172e4:	strd	r6, [sp, #8]
   172e8:	strd	r8, [sp, #16]
   172ec:	strd	sl, [sp, #24]
   172f0:	str	lr, [sp, #32]
   172f4:	sub	sp, sp, #36	; 0x24
   172f8:	bhi	17f70 <__assert_fail@plt+0x6dc8>
   172fc:	cmp	r1, #0
   17300:	mov	r6, r2
   17304:	mov	r5, r1
   17308:	mov	sl, r0
   1730c:	addeq	r5, sp, #28
   17310:	mov	r9, r3
   17314:	bl	110a0 <__errno_location@plt>
   17318:	mov	r3, #0
   1731c:	mov	fp, r0
   17320:	str	r3, [r0]
   17324:	ldrb	r4, [sl]
   17328:	bl	11064 <__ctype_b_loc@plt>
   1732c:	ldr	r2, [r0]
   17330:	lsl	r3, r4, #1
   17334:	ldrh	r3, [r2, r3]
   17338:	tst	r3, #8192	; 0x2000
   1733c:	beq	17358 <__assert_fail@plt+0x61b0>
   17340:	mov	r3, sl
   17344:	ldrb	r4, [r3, #1]!
   17348:	lsl	r1, r4, #1
   1734c:	ldrh	r1, [r2, r1]
   17350:	tst	r1, #8192	; 0x2000
   17354:	bne	17344 <__assert_fail@plt+0x619c>
   17358:	cmp	r4, #45	; 0x2d
   1735c:	beq	173f8 <__assert_fail@plt+0x6250>
   17360:	mov	r2, r6
   17364:	mov	r3, #0
   17368:	mov	r1, r5
   1736c:	mov	r0, sl
   17370:	bl	10f44 <__strtoull_internal@plt>
   17374:	ldr	r8, [r5]
   17378:	mov	r6, r0
   1737c:	mov	r7, r1
   17380:	cmp	r8, sl
   17384:	beq	173e0 <__assert_fail@plt+0x6238>
   17388:	ldr	r4, [fp]
   1738c:	cmp	r4, #0
   17390:	bne	173d0 <__assert_fail@plt+0x6228>
   17394:	ldr	r3, [sp, #72]	; 0x48
   17398:	cmp	r3, #0
   1739c:	beq	173ac <__assert_fail@plt+0x6204>
   173a0:	ldrb	sl, [r8]
   173a4:	cmp	sl, #0
   173a8:	bne	17764 <__assert_fail@plt+0x65bc>
   173ac:	strd	r6, [r9]
   173b0:	mov	r0, r4
   173b4:	add	sp, sp, #36	; 0x24
   173b8:	ldrd	r4, [sp]
   173bc:	ldrd	r6, [sp, #8]
   173c0:	ldrd	r8, [sp, #16]
   173c4:	ldrd	sl, [sp, #24]
   173c8:	add	sp, sp, #32
   173cc:	pop	{pc}		; (ldr pc, [sp], #4)
   173d0:	cmp	r4, #34	; 0x22
   173d4:	bne	173f8 <__assert_fail@plt+0x6250>
   173d8:	mov	r4, #1
   173dc:	b	17394 <__assert_fail@plt+0x61ec>
   173e0:	ldr	r3, [sp, #72]	; 0x48
   173e4:	cmp	r3, #0
   173e8:	beq	173f8 <__assert_fail@plt+0x6250>
   173ec:	ldrb	sl, [sl]
   173f0:	cmp	sl, #0
   173f4:	bne	17400 <__assert_fail@plt+0x6258>
   173f8:	mov	r4, #4
   173fc:	b	173b0 <__assert_fail@plt+0x6208>
   17400:	mov	r1, sl
   17404:	mov	r0, r3
   17408:	bl	11094 <strchr@plt>
   1740c:	cmp	r0, #0
   17410:	movne	r4, #0
   17414:	movne	r6, #1
   17418:	movne	r7, r4
   1741c:	beq	173f8 <__assert_fail@plt+0x6250>
   17420:	sub	r3, sl, #69	; 0x45
   17424:	cmp	r3, #47	; 0x2f
   17428:	ldrls	pc, [pc, r3, lsl #2]
   1742c:	b	17534 <__assert_fail@plt+0x638c>
   17430:	strdeq	r7, [r1], -r0
   17434:	andeq	r7, r1, r4, lsr r5
   17438:	strdeq	r7, [r1], -r0
   1743c:	andeq	r7, r1, r4, lsr r5
   17440:	andeq	r7, r1, r4, lsr r5
   17444:	andeq	r7, r1, r4, lsr r5
   17448:	strdeq	r7, [r1], -r0
   1744c:	andeq	r7, r1, r4, lsr r5
   17450:	strdeq	r7, [r1], -r0
   17454:	andeq	r7, r1, r4, lsr r5
   17458:	andeq	r7, r1, r4, lsr r5
   1745c:	strdeq	r7, [r1], -r0
   17460:	andeq	r7, r1, r4, lsr r5
   17464:	andeq	r7, r1, r4, lsr r5
   17468:	andeq	r7, r1, r4, lsr r5
   1746c:	strdeq	r7, [r1], -r0
   17470:	andeq	r7, r1, r4, lsr r5
   17474:	andeq	r7, r1, r4, lsr r5
   17478:	andeq	r7, r1, r4, lsr r5
   1747c:	andeq	r7, r1, r4, lsr r5
   17480:	strdeq	r7, [r1], -r0
   17484:	strdeq	r7, [r1], -r0
   17488:	andeq	r7, r1, r4, lsr r5
   1748c:	andeq	r7, r1, r4, lsr r5
   17490:	andeq	r7, r1, r4, lsr r5
   17494:	andeq	r7, r1, r4, lsr r5
   17498:	andeq	r7, r1, r4, lsr r5
   1749c:	andeq	r7, r1, r4, lsr r5
   174a0:	andeq	r7, r1, r4, lsr r5
   174a4:	andeq	r7, r1, r4, lsr r5
   174a8:	andeq	r7, r1, r4, lsr r5
   174ac:	andeq	r7, r1, r4, lsr r5
   174b0:	andeq	r7, r1, r4, lsr r5
   174b4:	andeq	r7, r1, r4, lsr r5
   174b8:	strdeq	r7, [r1], -r0
   174bc:	andeq	r7, r1, r4, lsr r5
   174c0:	andeq	r7, r1, r4, lsr r5
   174c4:	andeq	r7, r1, r4, lsr r5
   174c8:	strdeq	r7, [r1], -r0
   174cc:	andeq	r7, r1, r4, lsr r5
   174d0:	strdeq	r7, [r1], -r0
   174d4:	andeq	r7, r1, r4, lsr r5
   174d8:	andeq	r7, r1, r4, lsr r5
   174dc:	andeq	r7, r1, r4, lsr r5
   174e0:	andeq	r7, r1, r4, lsr r5
   174e4:	andeq	r7, r1, r4, lsr r5
   174e8:	andeq	r7, r1, r4, lsr r5
   174ec:	strdeq	r7, [r1], -r0
   174f0:	mov	r1, #48	; 0x30
   174f4:	ldr	r0, [sp, #72]	; 0x48
   174f8:	bl	11094 <strchr@plt>
   174fc:	cmp	r0, #0
   17500:	beq	17534 <__assert_fail@plt+0x638c>
   17504:	ldrb	r3, [r8, #1]
   17508:	cmp	r3, #68	; 0x44
   1750c:	beq	17ac4 <__assert_fail@plt+0x691c>
   17510:	cmp	r3, #105	; 0x69
   17514:	beq	1777c <__assert_fail@plt+0x65d4>
   17518:	cmp	r3, #66	; 0x42
   1751c:	moveq	r3, #2
   17520:	movne	r3, #1
   17524:	moveq	ip, #1000	; 0x3e8
   17528:	movne	ip, #1024	; 0x400
   1752c:	str	r3, [sp, #12]
   17530:	b	17540 <__assert_fail@plt+0x6398>
   17534:	mov	r3, #1
   17538:	mov	ip, #1024	; 0x400
   1753c:	str	r3, [sp, #12]
   17540:	sub	sl, sl, #66	; 0x42
   17544:	cmp	sl, #53	; 0x35
   17548:	ldrls	pc, [pc, sl, lsl #2]
   1754c:	b	17728 <__assert_fail@plt+0x6580>
   17550:	andeq	r7, r1, r0, lsl sl
   17554:	andeq	r7, r1, r8, lsr #14
   17558:	andeq	r7, r1, r8, lsr #14
   1755c:			; <UNDEFINED> instruction: 0x000179b0
   17560:	andeq	r7, r1, r8, lsr #14
   17564:	andeq	r7, r1, ip, lsr #20
   17568:	andeq	r7, r1, r8, lsr #14
   1756c:	andeq	r7, r1, r8, lsr #14
   17570:	andeq	r7, r1, r8, lsr #14
   17574:	andeq	r7, r1, r0, lsr r7
   17578:	andeq	r7, r1, r8, lsr #14
   1757c:	andeq	r7, r1, r8, asr r9
   17580:	andeq	r7, r1, r8, lsr #14
   17584:	andeq	r7, r1, r8, lsr #14
   17588:	strdeq	r7, [r1], -ip
   1758c:	andeq	r7, r1, r8, lsr #14
   17590:	andeq	r7, r1, r8, lsr #14
   17594:	andeq	r7, r1, r8, lsr #14
   17598:	muleq	r1, ip, r8
   1759c:	andeq	r7, r1, r8, lsr #14
   175a0:	andeq	r7, r1, r8, lsr #14
   175a4:	andeq	r7, r1, r8, lsr #14
   175a8:	andeq	r7, r1, r8, lsr #14
   175ac:	ldrdeq	r7, [r1], -r0
   175b0:	andeq	r7, r1, r8, lsr #12
   175b4:	andeq	r7, r1, r8, lsr #14
   175b8:	andeq	r7, r1, r8, lsr #14
   175bc:	andeq	r7, r1, r8, lsr #14
   175c0:	andeq	r7, r1, r8, lsr #14
   175c4:	andeq	r7, r1, r8, lsr #14
   175c8:	andeq	r7, r1, r8, lsr #14
   175cc:	andeq	r7, r1, r8, lsr #14
   175d0:			; <UNDEFINED> instruction: 0x000177b0
   175d4:	andeq	r7, r1, r0, lsl r7
   175d8:	andeq	r7, r1, r8, lsr #14
   175dc:	andeq	r7, r1, r8, lsr #14
   175e0:	andeq	r7, r1, r8, lsr #14
   175e4:	andeq	r7, r1, ip, lsr #20
   175e8:	andeq	r7, r1, r8, lsr #14
   175ec:	andeq	r7, r1, r8, lsr #14
   175f0:	andeq	r7, r1, r8, lsr #14
   175f4:	andeq	r7, r1, r0, lsr r7
   175f8:	andeq	r7, r1, r8, lsr #14
   175fc:	andeq	r7, r1, r8, asr r9
   17600:	andeq	r7, r1, r8, lsr #14
   17604:	andeq	r7, r1, r8, lsr #14
   17608:	andeq	r7, r1, r8, lsr #14
   1760c:	andeq	r7, r1, r8, lsr #14
   17610:	andeq	r7, r1, r8, lsr #14
   17614:	andeq	r7, r1, r8, lsr #14
   17618:	muleq	r1, ip, r8
   1761c:	andeq	r7, r1, r8, lsr #14
   17620:	andeq	r7, r1, r8, lsr #14
   17624:	muleq	r1, r8, r7
   17628:	asr	r3, ip, #31
   1762c:	mov	r2, ip
   17630:	cmp	r7, #0
   17634:	mov	r1, #0
   17638:	strd	r2, [sp]
   1763c:	bne	17b7c <__assert_fail@plt+0x69d4>
   17640:	umull	r6, r7, r6, ip
   17644:	mov	r2, r6
   17648:	mov	r3, r7
   1764c:	cmp	r1, #0
   17650:	bne	17a90 <__assert_fail@plt+0x68e8>
   17654:	cmp	r3, #0
   17658:	mov	lr, r1
   1765c:	bne	17ca8 <__assert_fail@plt+0x6b00>
   17660:	umull	r2, r3, r2, ip
   17664:	mov	r0, r2
   17668:	mov	r1, r3
   1766c:	cmp	lr, #0
   17670:	bne	17a90 <__assert_fail@plt+0x68e8>
   17674:	cmp	r1, #0
   17678:	bne	17c84 <__assert_fail@plt+0x6adc>
   1767c:	umull	r0, r1, r0, ip
   17680:	mov	r2, r0
   17684:	mov	r3, r1
   17688:	cmp	lr, #0
   1768c:	bne	17a90 <__assert_fail@plt+0x68e8>
   17690:	cmp	r3, #0
   17694:	bne	17934 <__assert_fail@plt+0x678c>
   17698:	umull	r2, r3, r2, ip
   1769c:	mov	r0, r2
   176a0:	mov	r1, r3
   176a4:	cmp	lr, #0
   176a8:	bne	17a90 <__assert_fail@plt+0x68e8>
   176ac:	cmp	r1, #0
   176b0:	bne	17b34 <__assert_fail@plt+0x698c>
   176b4:	umull	r0, r1, r0, ip
   176b8:	mov	r2, r0
   176bc:	mov	r3, r1
   176c0:	cmp	lr, #0
   176c4:	bne	17a90 <__assert_fail@plt+0x68e8>
   176c8:	cmp	r3, #0
   176cc:	mov	r7, lr
   176d0:	bne	17b10 <__assert_fail@plt+0x6968>
   176d4:	umull	r2, r3, r2, ip
   176d8:	mov	r6, r2
   176dc:	mov	lr, r3
   176e0:	cmp	r7, #0
   176e4:	bne	17a90 <__assert_fail@plt+0x68e8>
   176e8:	cmp	lr, #0
   176ec:	bne	17ad4 <__assert_fail@plt+0x692c>
   176f0:	umull	r2, r3, r6, ip
   176f4:	mov	r0, r2
   176f8:	mov	r2, r3
   176fc:	subs	r3, r7, #0
   17700:	bne	17a90 <__assert_fail@plt+0x68e8>
   17704:	mov	r6, r0
   17708:	mov	r7, r2
   1770c:	orr	r4, r4, r3
   17710:	ldr	r2, [sp, #12]
   17714:	add	r3, r8, r2
   17718:	str	r3, [r5]
   1771c:	ldrb	r3, [r8, r2]
   17720:	cmp	r3, #0
   17724:	beq	173ac <__assert_fail@plt+0x6204>
   17728:	orr	r4, r4, #2
   1772c:	b	173ac <__assert_fail@plt+0x6204>
   17730:	cmp	r7, #0
   17734:	asr	r1, ip, #31
   17738:	mov	lr, #0
   1773c:	bne	17aa0 <__assert_fail@plt+0x68f8>
   17740:	umull	r2, r3, r6, ip
   17744:	mov	r6, r2
   17748:	mov	r7, r3
   1774c:	cmp	lr, #0
   17750:	beq	17710 <__assert_fail@plt+0x6568>
   17754:	mvn	r6, #0
   17758:	mov	r4, #1
   1775c:	mov	r7, r6
   17760:	b	17710 <__assert_fail@plt+0x6568>
   17764:	mov	r0, r3
   17768:	mov	r1, sl
   1776c:	bl	11094 <strchr@plt>
   17770:	cmp	r0, #0
   17774:	bne	17420 <__assert_fail@plt+0x6278>
   17778:	b	17728 <__assert_fail@plt+0x6580>
   1777c:	ldrb	r3, [r8, #2]
   17780:	mov	ip, #1024	; 0x400
   17784:	cmp	r3, #66	; 0x42
   17788:	movne	r3, #1
   1778c:	moveq	r3, #3
   17790:	str	r3, [sp, #12]
   17794:	b	17540 <__assert_fail@plt+0x6398>
   17798:	lsr	r3, r7, #31
   1779c:	adds	r6, r6, r6
   177a0:	adc	r7, r7, r7
   177a4:	cmp	r3, #0
   177a8:	beq	17710 <__assert_fail@plt+0x6568>
   177ac:	b	17754 <__assert_fail@plt+0x65ac>
   177b0:	lsr	r3, r7, #23
   177b4:	lsl	r7, r7, #9
   177b8:	cmp	r3, #0
   177bc:	lsl	r3, r6, #9
   177c0:	orr	r7, r7, r6, lsr #23
   177c4:	bne	17754 <__assert_fail@plt+0x65ac>
   177c8:	mov	r6, r3
   177cc:	b	17710 <__assert_fail@plt+0x6568>
   177d0:	asr	r3, ip, #31
   177d4:	mov	r2, ip
   177d8:	cmp	r7, #0
   177dc:	mov	r1, #0
   177e0:	strd	r2, [sp]
   177e4:	bne	17bf0 <__assert_fail@plt+0x6a48>
   177e8:	umull	r6, r7, r6, ip
   177ec:	mov	r0, r6
   177f0:	mov	fp, r7
   177f4:	cmp	r1, #0
   177f8:	bne	17a90 <__assert_fail@plt+0x68e8>
   177fc:	cmp	fp, #0
   17800:	mov	lr, r1
   17804:	bne	17d80 <__assert_fail@plt+0x6bd8>
   17808:	umull	r0, r1, r0, ip
   1780c:	mov	r2, r0
   17810:	mov	r3, r1
   17814:	cmp	lr, #0
   17818:	bne	17a90 <__assert_fail@plt+0x68e8>
   1781c:	cmp	r3, #0
   17820:	bne	17da8 <__assert_fail@plt+0x6c00>
   17824:	umull	r2, r3, r2, ip
   17828:	mov	r0, r2
   1782c:	mov	r1, r3
   17830:	cmp	lr, #0
   17834:	bne	17a90 <__assert_fail@plt+0x68e8>
   17838:	cmp	r1, #0
   1783c:	bne	17d28 <__assert_fail@plt+0x6b80>
   17840:	umull	r0, r1, r0, ip
   17844:	mov	r2, r0
   17848:	mov	r3, r1
   1784c:	cmp	lr, #0
   17850:	bne	17a90 <__assert_fail@plt+0x68e8>
   17854:	cmp	r3, #0
   17858:	bne	17b58 <__assert_fail@plt+0x69b0>
   1785c:	umull	r2, r3, r2, ip
   17860:	mov	r0, r2
   17864:	mov	r1, r3
   17868:	cmp	lr, #0
   1786c:	bne	17a90 <__assert_fail@plt+0x68e8>
   17870:	cmp	r1, #0
   17874:	beq	176b4 <__assert_fail@plt+0x650c>
   17878:	umull	r6, r7, r0, ip
   1787c:	mov	fp, lr
   17880:	mov	sl, r7
   17884:	umlal	sl, fp, r1, ip
   17888:	cmp	fp, #0
   1788c:	bne	17f90 <__assert_fail@plt+0x6de8>
   17890:	mov	r2, r6
   17894:	mov	r3, sl
   17898:	b	176c0 <__assert_fail@plt+0x6518>
   1789c:	asr	r3, ip, #31
   178a0:	mov	r2, ip
   178a4:	cmp	r7, #0
   178a8:	mov	r1, #0
   178ac:	strd	r2, [sp]
   178b0:	bne	17c14 <__assert_fail@plt+0x6a6c>
   178b4:	umull	r6, r7, r6, ip
   178b8:	mov	r0, r6
   178bc:	mov	fp, r7
   178c0:	cmp	r1, #0
   178c4:	bne	17a90 <__assert_fail@plt+0x68e8>
   178c8:	cmp	fp, #0
   178cc:	mov	lr, r1
   178d0:	beq	176b4 <__assert_fail@plt+0x650c>
   178d4:	umull	r6, r7, r0, ip
   178d8:	mov	r3, r1
   178dc:	mov	r2, r7
   178e0:	umlal	r2, r3, fp, ip
   178e4:	cmp	r3, #0
   178e8:	strd	r2, [sp, #16]
   178ec:	bne	17e74 <__assert_fail@plt+0x6ccc>
   178f0:	mov	r2, r6
   178f4:	ldr	r3, [sp, #16]
   178f8:	b	176c0 <__assert_fail@plt+0x6518>
   178fc:	asr	r3, ip, #31
   17900:	mov	r2, ip
   17904:	cmp	r7, #0
   17908:	mov	r1, #0
   1790c:	strd	r2, [sp]
   17910:	bne	17c5c <__assert_fail@plt+0x6ab4>
   17914:	umull	r6, r7, r6, ip
   17918:	mov	r2, r6
   1791c:	mov	r3, r7
   17920:	cmp	r1, #0
   17924:	bne	17a90 <__assert_fail@plt+0x68e8>
   17928:	cmp	r3, #0
   1792c:	mov	lr, r1
   17930:	beq	17698 <__assert_fail@plt+0x64f0>
   17934:	umull	r6, r7, r2, ip
   17938:	mov	fp, lr
   1793c:	mov	sl, r7
   17940:	umlal	sl, fp, r3, ip
   17944:	cmp	fp, #0
   17948:	bne	17f54 <__assert_fail@plt+0x6dac>
   1794c:	mov	r0, r6
   17950:	mov	r1, sl
   17954:	b	176a4 <__assert_fail@plt+0x64fc>
   17958:	asr	r3, ip, #31
   1795c:	mov	r2, ip
   17960:	cmp	r7, #0
   17964:	mov	r1, #0
   17968:	strd	r2, [sp]
   1796c:	bne	17c38 <__assert_fail@plt+0x6a90>
   17970:	umull	r6, r7, r6, ip
   17974:	mov	sl, r6
   17978:	mov	lr, r7
   1797c:	cmp	r1, #0
   17980:	bne	17754 <__assert_fail@plt+0x65ac>
   17984:	cmp	lr, #0
   17988:	mov	r7, r1
   1798c:	bne	17d4c <__assert_fail@plt+0x6ba4>
   17990:	umull	sl, fp, sl, ip
   17994:	mov	r0, sl
   17998:	mov	r2, fp
   1799c:	cmp	r7, #0
   179a0:	mov	r6, r0
   179a4:	mov	r7, r2
   179a8:	beq	17710 <__assert_fail@plt+0x6568>
   179ac:	b	17754 <__assert_fail@plt+0x65ac>
   179b0:	asr	r3, ip, #31
   179b4:	mov	r2, ip
   179b8:	cmp	r7, #0
   179bc:	mov	r1, #0
   179c0:	strd	r2, [sp]
   179c4:	bne	17bcc <__assert_fail@plt+0x6a24>
   179c8:	umull	r6, r7, r6, ip
   179cc:	mov	r0, r6
   179d0:	mov	fp, r7
   179d4:	cmp	r1, #0
   179d8:	bne	17a90 <__assert_fail@plt+0x68e8>
   179dc:	cmp	fp, #0
   179e0:	mov	lr, r1
   179e4:	beq	17840 <__assert_fail@plt+0x6698>
   179e8:	umull	r6, r7, r0, ip
   179ec:	mov	r3, r1
   179f0:	mov	r2, r7
   179f4:	umlal	r2, r3, fp, ip
   179f8:	cmp	r3, #0
   179fc:	strd	r2, [sp, #16]
   17a00:	bne	17ee4 <__assert_fail@plt+0x6d3c>
   17a04:	mov	r2, r6
   17a08:	ldr	r3, [sp, #16]
   17a0c:	b	1784c <__assert_fail@plt+0x66a4>
   17a10:	lsr	r3, r7, #22
   17a14:	lsl	r7, r7, #10
   17a18:	cmp	r3, #0
   17a1c:	lsl	r3, r6, #10
   17a20:	orr	r7, r7, r6, lsr #22
   17a24:	beq	177c8 <__assert_fail@plt+0x6620>
   17a28:	b	17754 <__assert_fail@plt+0x65ac>
   17a2c:	asr	r3, ip, #31
   17a30:	mov	r2, ip
   17a34:	cmp	r7, #0
   17a38:	mov	r1, #0
   17a3c:	strd	r2, [sp]
   17a40:	bne	17ba4 <__assert_fail@plt+0x69fc>
   17a44:	umull	r6, r7, r6, ip
   17a48:	mov	r2, r6
   17a4c:	mov	r3, r7
   17a50:	cmp	r1, #0
   17a54:	bne	17754 <__assert_fail@plt+0x65ac>
   17a58:	cmp	r3, #0
   17a5c:	mov	r7, r1
   17a60:	bne	17d08 <__assert_fail@plt+0x6b60>
   17a64:	umull	r2, r3, r2, ip
   17a68:	mov	r6, r2
   17a6c:	mov	lr, r3
   17a70:	cmp	r7, #0
   17a74:	bne	17754 <__assert_fail@plt+0x65ac>
   17a78:	cmp	lr, #0
   17a7c:	bne	17ccc <__assert_fail@plt+0x6b24>
   17a80:	umull	r2, r3, r6, ip
   17a84:	mov	r0, r2
   17a88:	mov	r2, r3
   17a8c:	b	1799c <__assert_fail@plt+0x67f4>
   17a90:	mvn	r6, #0
   17a94:	mov	r3, #1
   17a98:	mov	r7, r6
   17a9c:	b	1770c <__assert_fail@plt+0x6564>
   17aa0:	umull	sl, fp, r6, ip
   17aa4:	mov	r3, lr
   17aa8:	mov	r2, fp
   17aac:	umlal	r2, r3, r7, ip
   17ab0:	cmp	r3, #0
   17ab4:	bne	17eac <__assert_fail@plt+0x6d04>
   17ab8:	mov	r6, sl
   17abc:	mov	r7, r2
   17ac0:	b	1774c <__assert_fail@plt+0x65a4>
   17ac4:	mov	r3, #2
   17ac8:	mov	ip, #1000	; 0x3e8
   17acc:	str	r3, [sp, #12]
   17ad0:	b	17540 <__assert_fail@plt+0x6398>
   17ad4:	umull	r0, r1, r6, ip
   17ad8:	mov	r3, r7
   17adc:	mov	r2, r1
   17ae0:	strd	r0, [sp, #16]
   17ae4:	umlal	r2, r3, lr, ip
   17ae8:	cmp	r3, #0
   17aec:	beq	176fc <__assert_fail@plt+0x6554>
   17af0:	ldrd	sl, [sp]
   17af4:	mov	r7, #1
   17af8:	ldr	r0, [sp, #16]
   17afc:	ldr	r3, [sp, #20]
   17b00:	mul	r2, r6, fp
   17b04:	mla	r2, lr, sl, r2
   17b08:	add	r2, r2, r3
   17b0c:	b	176fc <__assert_fail@plt+0x6554>
   17b10:	umull	sl, fp, r2, ip
   17b14:	mov	r1, lr
   17b18:	mov	r0, fp
   17b1c:	umlal	r0, r1, r3, ip
   17b20:	cmp	r1, #0
   17b24:	bne	17e04 <__assert_fail@plt+0x6c5c>
   17b28:	mov	r6, sl
   17b2c:	mov	lr, r0
   17b30:	b	176e0 <__assert_fail@plt+0x6538>
   17b34:	umull	sl, fp, r0, ip
   17b38:	mov	r7, lr
   17b3c:	mov	r6, fp
   17b40:	umlal	r6, r7, r1, ip
   17b44:	cmp	r7, #0
   17b48:	bne	17fac <__assert_fail@plt+0x6e04>
   17b4c:	mov	r2, sl
   17b50:	mov	r3, r6
   17b54:	b	176c0 <__assert_fail@plt+0x6518>
   17b58:	umull	sl, fp, r2, ip
   17b5c:	mov	r7, lr
   17b60:	mov	r6, fp
   17b64:	umlal	r6, r7, r3, ip
   17b68:	cmp	r7, #0
   17b6c:	bne	17e3c <__assert_fail@plt+0x6c94>
   17b70:	mov	r0, sl
   17b74:	mov	r1, r6
   17b78:	b	17868 <__assert_fail@plt+0x66c0>
   17b7c:	umull	sl, fp, r6, ip
   17b80:	mov	r3, r1
   17b84:	mov	r2, fp
   17b88:	umlal	r2, r3, r7, ip
   17b8c:	cmp	r3, #0
   17b90:	strd	r2, [sp, #16]
   17b94:	bne	17e20 <__assert_fail@plt+0x6c78>
   17b98:	mov	r2, sl
   17b9c:	ldr	r3, [sp, #16]
   17ba0:	b	1764c <__assert_fail@plt+0x64a4>
   17ba4:	umull	sl, fp, r6, ip
   17ba8:	mov	r3, r1
   17bac:	mov	r2, fp
   17bb0:	umlal	r2, r3, r7, ip
   17bb4:	cmp	r3, #0
   17bb8:	strd	r2, [sp, #16]
   17bbc:	bne	17f00 <__assert_fail@plt+0x6d58>
   17bc0:	mov	r2, sl
   17bc4:	ldr	r3, [sp, #16]
   17bc8:	b	17a50 <__assert_fail@plt+0x68a8>
   17bcc:	umull	sl, fp, r6, ip
   17bd0:	mov	r3, r1
   17bd4:	mov	r2, fp
   17bd8:	umlal	r2, r3, r7, ip
   17bdc:	cmp	r3, #0
   17be0:	bne	17dcc <__assert_fail@plt+0x6c24>
   17be4:	mov	r0, sl
   17be8:	mov	fp, r2
   17bec:	b	179d4 <__assert_fail@plt+0x682c>
   17bf0:	umull	sl, fp, r6, ip
   17bf4:	mov	r3, r1
   17bf8:	mov	r2, fp
   17bfc:	umlal	r2, r3, r7, ip
   17c00:	cmp	r3, #0
   17c04:	bne	17e90 <__assert_fail@plt+0x6ce8>
   17c08:	mov	r0, sl
   17c0c:	mov	fp, r2
   17c10:	b	177f4 <__assert_fail@plt+0x664c>
   17c14:	umull	sl, fp, r6, ip
   17c18:	mov	r3, r1
   17c1c:	mov	r2, fp
   17c20:	umlal	r2, r3, r7, ip
   17c24:	cmp	r3, #0
   17c28:	bne	17f1c <__assert_fail@plt+0x6d74>
   17c2c:	mov	r0, sl
   17c30:	mov	fp, r2
   17c34:	b	178c0 <__assert_fail@plt+0x6718>
   17c38:	umull	sl, fp, r6, ip
   17c3c:	mov	r3, r1
   17c40:	mov	r2, fp
   17c44:	strd	sl, [sp, #16]
   17c48:	umlal	r2, r3, r7, ip
   17c4c:	cmp	r3, #0
   17c50:	bne	17ec4 <__assert_fail@plt+0x6d1c>
   17c54:	mov	lr, r2
   17c58:	b	1797c <__assert_fail@plt+0x67d4>
   17c5c:	umull	sl, fp, r6, ip
   17c60:	mov	r3, r1
   17c64:	mov	r2, fp
   17c68:	umlal	r2, r3, r7, ip
   17c6c:	cmp	r3, #0
   17c70:	strd	r2, [sp, #16]
   17c74:	bne	17fc8 <__assert_fail@plt+0x6e20>
   17c78:	mov	r2, sl
   17c7c:	ldr	r3, [sp, #16]
   17c80:	b	17920 <__assert_fail@plt+0x6778>
   17c84:	umull	sl, fp, r0, ip
   17c88:	mov	r7, lr
   17c8c:	mov	r6, fp
   17c90:	umlal	r6, r7, r1, ip
   17c94:	cmp	r7, #0
   17c98:	bne	17fe4 <__assert_fail@plt+0x6e3c>
   17c9c:	mov	r2, sl
   17ca0:	mov	r3, r6
   17ca4:	b	17688 <__assert_fail@plt+0x64e0>
   17ca8:	umull	r6, r7, r2, ip
   17cac:	mov	fp, r1
   17cb0:	mov	sl, r7
   17cb4:	umlal	sl, fp, r3, ip
   17cb8:	cmp	fp, #0
   17cbc:	bne	17e58 <__assert_fail@plt+0x6cb0>
   17cc0:	mov	r0, r6
   17cc4:	mov	r1, sl
   17cc8:	b	1766c <__assert_fail@plt+0x64c4>
   17ccc:	umull	r0, r1, r6, ip
   17cd0:	mov	r3, r7
   17cd4:	mov	r2, r1
   17cd8:	strd	r0, [sp, #16]
   17cdc:	umlal	r2, r3, lr, ip
   17ce0:	cmp	r3, #0
   17ce4:	beq	1799c <__assert_fail@plt+0x67f4>
   17ce8:	ldrd	sl, [sp]
   17cec:	mov	r7, #1
   17cf0:	ldr	r0, [sp, #16]
   17cf4:	ldr	r3, [sp, #20]
   17cf8:	mul	r2, r6, fp
   17cfc:	mla	r2, lr, sl, r2
   17d00:	add	r2, r2, r3
   17d04:	b	1799c <__assert_fail@plt+0x67f4>
   17d08:	umull	sl, fp, r2, ip
   17d0c:	mov	r0, fp
   17d10:	umlal	r0, r1, r3, ip
   17d14:	cmp	r1, #0
   17d18:	bne	18000 <__assert_fail@plt+0x6e58>
   17d1c:	mov	r6, sl
   17d20:	mov	lr, r0
   17d24:	b	17a70 <__assert_fail@plt+0x68c8>
   17d28:	umull	r6, r7, r0, ip
   17d2c:	mov	fp, lr
   17d30:	mov	sl, r7
   17d34:	umlal	sl, fp, r1, ip
   17d38:	cmp	fp, #0
   17d3c:	bne	17f38 <__assert_fail@plt+0x6d90>
   17d40:	mov	r2, r6
   17d44:	mov	r3, sl
   17d48:	b	1784c <__assert_fail@plt+0x66a4>
   17d4c:	umull	r0, r1, sl, ip
   17d50:	mov	r3, r7
   17d54:	mov	r2, r1
   17d58:	umlal	r2, r3, lr, ip
   17d5c:	cmp	r3, #0
   17d60:	beq	1799c <__assert_fail@plt+0x67f4>
   17d64:	ldr	r3, [sp, #4]
   17d68:	mov	r7, #1
   17d6c:	mul	r2, sl, r3
   17d70:	ldr	r3, [sp]
   17d74:	mla	r2, lr, r3, r2
   17d78:	add	r2, r2, r1
   17d7c:	b	1799c <__assert_fail@plt+0x67f4>
   17d80:	umull	r6, r7, r0, ip
   17d84:	mov	r3, r1
   17d88:	mov	r2, r7
   17d8c:	umlal	r2, r3, fp, ip
   17d90:	cmp	r3, #0
   17d94:	strd	r2, [sp, #16]
   17d98:	bne	1801c <__assert_fail@plt+0x6e74>
   17d9c:	mov	r2, r6
   17da0:	ldr	r3, [sp, #16]
   17da4:	b	17814 <__assert_fail@plt+0x666c>
   17da8:	umull	sl, fp, r2, ip
   17dac:	mov	r7, lr
   17db0:	mov	r6, fp
   17db4:	umlal	r6, r7, r3, ip
   17db8:	cmp	r7, #0
   17dbc:	bne	17de8 <__assert_fail@plt+0x6c40>
   17dc0:	mov	r0, sl
   17dc4:	mov	r1, r6
   17dc8:	b	17830 <__assert_fail@plt+0x6688>
   17dcc:	ldrd	r2, [sp]
   17dd0:	mov	r0, sl
   17dd4:	mov	r1, #1
   17dd8:	mul	r6, r6, r3
   17ddc:	mla	r7, r2, r7, r6
   17de0:	add	fp, r7, fp
   17de4:	b	179d4 <__assert_fail@plt+0x682c>
   17de8:	ldrd	r6, [sp]
   17dec:	mov	r0, sl
   17df0:	mov	lr, #1
   17df4:	mul	r2, r2, r7
   17df8:	mla	r1, r3, r6, r2
   17dfc:	add	r1, r1, fp
   17e00:	b	17830 <__assert_fail@plt+0x6688>
   17e04:	ldrd	r0, [sp]
   17e08:	mov	r6, sl
   17e0c:	mov	r7, #1
   17e10:	mul	r2, r2, r1
   17e14:	mla	lr, r3, r0, r2
   17e18:	add	lr, lr, fp
   17e1c:	b	176e0 <__assert_fail@plt+0x6538>
   17e20:	ldm	sp, {r0, r3}
   17e24:	mov	r2, sl
   17e28:	mov	r1, #1
   17e2c:	mul	r3, r6, r3
   17e30:	mla	r3, r0, r7, r3
   17e34:	add	r3, r3, fp
   17e38:	b	1764c <__assert_fail@plt+0x64a4>
   17e3c:	ldrd	r6, [sp]
   17e40:	mov	r0, sl
   17e44:	mov	lr, #1
   17e48:	mul	r2, r2, r7
   17e4c:	mla	r1, r3, r6, r2
   17e50:	add	r1, r1, fp
   17e54:	b	17868 <__assert_fail@plt+0x66c0>
   17e58:	ldrd	sl, [sp]
   17e5c:	mov	r0, r6
   17e60:	mov	lr, #1
   17e64:	mul	r2, r2, fp
   17e68:	mla	r1, r3, sl, r2
   17e6c:	add	r1, r1, r7
   17e70:	b	1766c <__assert_fail@plt+0x64c4>
   17e74:	ldm	sp, {r1, r3}
   17e78:	mov	r2, r6
   17e7c:	mov	lr, #1
   17e80:	mul	r3, r0, r3
   17e84:	mla	r3, fp, r1, r3
   17e88:	add	r3, r3, r7
   17e8c:	b	176c0 <__assert_fail@plt+0x6518>
   17e90:	ldrd	r2, [sp]
   17e94:	mov	r0, sl
   17e98:	mov	r1, #1
   17e9c:	mul	r6, r6, r3
   17ea0:	mla	r7, r2, r7, r6
   17ea4:	add	fp, r7, fp
   17ea8:	b	177f4 <__assert_fail@plt+0x664c>
   17eac:	mul	r3, r6, r1
   17eb0:	mov	lr, #1
   17eb4:	mov	r6, sl
   17eb8:	mla	r7, ip, r7, r3
   17ebc:	add	r7, r7, fp
   17ec0:	b	1774c <__assert_fail@plt+0x65a4>
   17ec4:	ldrd	r2, [sp]
   17ec8:	mov	r1, #1
   17ecc:	ldr	sl, [sp, #16]
   17ed0:	mul	lr, r6, r3
   17ed4:	ldr	r3, [sp, #20]
   17ed8:	mla	lr, r2, r7, lr
   17edc:	add	lr, lr, r3
   17ee0:	b	1797c <__assert_fail@plt+0x67d4>
   17ee4:	ldm	sp, {r1, r3}
   17ee8:	mov	r2, r6
   17eec:	mov	lr, #1
   17ef0:	mul	r3, r0, r3
   17ef4:	mla	r3, fp, r1, r3
   17ef8:	add	r3, r3, r7
   17efc:	b	1784c <__assert_fail@plt+0x66a4>
   17f00:	ldm	sp, {r0, r3}
   17f04:	mov	r2, sl
   17f08:	mov	r1, #1
   17f0c:	mul	r3, r6, r3
   17f10:	mla	r3, r0, r7, r3
   17f14:	add	r3, r3, fp
   17f18:	b	17a50 <__assert_fail@plt+0x68a8>
   17f1c:	ldrd	r2, [sp]
   17f20:	mov	r0, sl
   17f24:	mov	r1, #1
   17f28:	mul	r6, r6, r3
   17f2c:	mla	r7, r2, r7, r6
   17f30:	add	fp, r7, fp
   17f34:	b	178c0 <__assert_fail@plt+0x6718>
   17f38:	ldrd	sl, [sp]
   17f3c:	mov	r2, r6
   17f40:	mov	lr, #1
   17f44:	mul	r3, r0, fp
   17f48:	mla	r3, r1, sl, r3
   17f4c:	add	r3, r3, r7
   17f50:	b	1784c <__assert_fail@plt+0x66a4>
   17f54:	ldrd	sl, [sp]
   17f58:	mov	r0, r6
   17f5c:	mov	lr, #1
   17f60:	mul	r2, r2, fp
   17f64:	mla	r1, r3, sl, r2
   17f68:	add	r1, r1, r7
   17f6c:	b	176a4 <__assert_fail@plt+0x64fc>
   17f70:	movw	r3, #38200	; 0x9538
   17f74:	movt	r3, #1
   17f78:	movw	r1, #38144	; 0x9500
   17f7c:	movt	r1, #1
   17f80:	movw	r0, #38160	; 0x9510
   17f84:	movt	r0, #1
   17f88:	mov	r2, #85	; 0x55
   17f8c:	bl	111a8 <__assert_fail@plt>
   17f90:	ldrd	sl, [sp]
   17f94:	mov	r2, r6
   17f98:	mov	lr, #1
   17f9c:	mul	r3, r0, fp
   17fa0:	mla	r3, r1, sl, r3
   17fa4:	add	r3, r3, r7
   17fa8:	b	176c0 <__assert_fail@plt+0x6518>
   17fac:	ldrd	r6, [sp]
   17fb0:	mov	r2, sl
   17fb4:	mov	lr, #1
   17fb8:	mul	r3, r0, r7
   17fbc:	mla	r3, r1, r6, r3
   17fc0:	add	r3, r3, fp
   17fc4:	b	176c0 <__assert_fail@plt+0x6518>
   17fc8:	ldm	sp, {r0, r3}
   17fcc:	mov	r2, sl
   17fd0:	mov	r1, #1
   17fd4:	mul	r3, r6, r3
   17fd8:	mla	r3, r0, r7, r3
   17fdc:	add	r3, r3, fp
   17fe0:	b	17920 <__assert_fail@plt+0x6778>
   17fe4:	ldrd	r6, [sp]
   17fe8:	mov	r2, sl
   17fec:	mov	lr, #1
   17ff0:	mul	r3, r0, r7
   17ff4:	mla	r3, r1, r6, r3
   17ff8:	add	r3, r3, fp
   17ffc:	b	17688 <__assert_fail@plt+0x64e0>
   18000:	ldrd	r0, [sp]
   18004:	mov	r6, sl
   18008:	mov	r7, #1
   1800c:	mul	r2, r2, r1
   18010:	mla	lr, r3, r0, r2
   18014:	add	lr, lr, fp
   18018:	b	17a70 <__assert_fail@plt+0x68c8>
   1801c:	ldm	sp, {r1, r3}
   18020:	mov	r2, r6
   18024:	mov	lr, #1
   18028:	mul	r3, r0, r3
   1802c:	mla	r3, fp, r1, r3
   18030:	add	r3, r3, r7
   18034:	b	17814 <__assert_fail@plt+0x666c>
   18038:	cmp	r1, #0
   1803c:	cmpne	r0, #0
   18040:	beq	1808c <__assert_fail@plt+0x6ee4>
   18044:	strd	r4, [sp, #-16]!
   18048:	umull	r4, r5, r0, r1
   1804c:	str	r6, [sp, #8]
   18050:	str	lr, [sp, #12]
   18054:	adds	r3, r5, #0
   18058:	movne	r3, #1
   1805c:	cmp	r4, #0
   18060:	blt	1806c <__assert_fail@plt+0x6ec4>
   18064:	cmp	r3, #0
   18068:	beq	18098 <__assert_fail@plt+0x6ef0>
   1806c:	bl	110a0 <__errno_location@plt>
   18070:	mov	r3, #12
   18074:	ldrd	r4, [sp]
   18078:	ldr	r6, [sp, #8]
   1807c:	add	sp, sp, #12
   18080:	str	r3, [r0]
   18084:	mov	r0, #0
   18088:	pop	{pc}		; (ldr pc, [sp], #4)
   1808c:	mov	r1, #1
   18090:	mov	r0, r1
   18094:	b	10eb4 <calloc@plt>
   18098:	ldrd	r4, [sp]
   1809c:	ldr	r6, [sp, #8]
   180a0:	ldr	lr, [sp, #12]
   180a4:	add	sp, sp, #16
   180a8:	b	10eb4 <calloc@plt>
   180ac:	cmp	r0, #0
   180b0:	beq	180bc <__assert_fail@plt+0x6f14>
   180b4:	blt	180c4 <__assert_fail@plt+0x6f1c>
   180b8:	b	11028 <malloc@plt>
   180bc:	mov	r0, #1
   180c0:	b	11028 <malloc@plt>
   180c4:	str	r4, [sp, #-8]!
   180c8:	str	lr, [sp, #4]
   180cc:	bl	110a0 <__errno_location@plt>
   180d0:	mov	r3, #12
   180d4:	ldr	r4, [sp]
   180d8:	add	sp, sp, #4
   180dc:	str	r3, [r0]
   180e0:	mov	r0, #0
   180e4:	pop	{pc}		; (ldr pc, [sp], #4)
   180e8:	cmp	r0, #0
   180ec:	beq	18114 <__assert_fail@plt+0x6f6c>
   180f0:	cmp	r1, #0
   180f4:	str	r4, [sp, #-8]!
   180f8:	str	lr, [sp, #4]
   180fc:	beq	1811c <__assert_fail@plt+0x6f74>
   18100:	blt	18130 <__assert_fail@plt+0x6f88>
   18104:	ldr	r4, [sp]
   18108:	ldr	lr, [sp, #4]
   1810c:	add	sp, sp, #8
   18110:	b	10f80 <realloc@plt>
   18114:	mov	r0, r1
   18118:	b	180ac <__assert_fail@plt+0x6f04>
   1811c:	bl	1209c <__assert_fail@plt+0xef4>
   18120:	ldr	r4, [sp]
   18124:	add	sp, sp, #4
   18128:	mov	r0, #0
   1812c:	pop	{pc}		; (ldr pc, [sp], #4)
   18130:	bl	110a0 <__errno_location@plt>
   18134:	mov	r3, #12
   18138:	str	r3, [r0]
   1813c:	b	18120 <__assert_fail@plt+0x6f78>
   18140:	strd	r4, [sp, #-16]!
   18144:	mov	r4, r0
   18148:	str	r6, [sp, #8]
   1814c:	str	lr, [sp, #12]
   18150:	bl	10fec <__fpending@plt>
   18154:	ldr	r5, [r4]
   18158:	mov	r6, r0
   1815c:	mov	r0, r4
   18160:	bl	181c8 <__assert_fail@plt+0x7020>
   18164:	mov	r4, r0
   18168:	and	r5, r5, #32
   1816c:	cmp	r5, #0
   18170:	bne	181a8 <__assert_fail@plt+0x7000>
   18174:	cmp	r0, #0
   18178:	beq	18194 <__assert_fail@plt+0x6fec>
   1817c:	cmp	r6, #0
   18180:	bne	181c0 <__assert_fail@plt+0x7018>
   18184:	bl	110a0 <__errno_location@plt>
   18188:	ldr	r4, [r0]
   1818c:	subs	r4, r4, #9
   18190:	mvnne	r4, #0
   18194:	mov	r0, r4
   18198:	ldrd	r4, [sp]
   1819c:	ldr	r6, [sp, #8]
   181a0:	add	sp, sp, #12
   181a4:	pop	{pc}		; (ldr pc, [sp], #4)
   181a8:	cmp	r0, #0
   181ac:	bne	181c0 <__assert_fail@plt+0x7018>
   181b0:	bl	110a0 <__errno_location@plt>
   181b4:	str	r4, [r0]
   181b8:	mvn	r4, #0
   181bc:	b	18194 <__assert_fail@plt+0x6fec>
   181c0:	mvn	r4, #0
   181c4:	b	18194 <__assert_fail@plt+0x6fec>
   181c8:	strd	r4, [sp, #-12]!
   181cc:	mov	r4, r0
   181d0:	str	lr, [sp, #8]
   181d4:	sub	sp, sp, #12
   181d8:	bl	110dc <fileno@plt>
   181dc:	cmp	r0, #0
   181e0:	mov	r0, r4
   181e4:	blt	18268 <__assert_fail@plt+0x70c0>
   181e8:	bl	11040 <__freading@plt>
   181ec:	cmp	r0, #0
   181f0:	bne	18234 <__assert_fail@plt+0x708c>
   181f4:	mov	r0, r4
   181f8:	bl	1827c <__assert_fail@plt+0x70d4>
   181fc:	cmp	r0, #0
   18200:	beq	18264 <__assert_fail@plt+0x70bc>
   18204:	bl	110a0 <__errno_location@plt>
   18208:	mov	r5, r0
   1820c:	mov	r0, r4
   18210:	ldr	r4, [r5]
   18214:	bl	110f4 <fclose@plt>
   18218:	cmp	r4, #0
   1821c:	mvnne	r0, #0
   18220:	strne	r4, [r5]
   18224:	add	sp, sp, #12
   18228:	ldrd	r4, [sp]
   1822c:	add	sp, sp, #8
   18230:	pop	{pc}		; (ldr pc, [sp], #4)
   18234:	mov	r0, r4
   18238:	bl	110dc <fileno@plt>
   1823c:	mov	r1, #1
   18240:	mov	r2, #0
   18244:	mov	r3, #0
   18248:	str	r1, [sp]
   1824c:	bl	10fc8 <lseek64@plt>
   18250:	mvn	r3, #0
   18254:	mvn	r2, #0
   18258:	cmp	r1, r3
   1825c:	cmpeq	r0, r2
   18260:	bne	181f4 <__assert_fail@plt+0x704c>
   18264:	mov	r0, r4
   18268:	add	sp, sp, #12
   1826c:	ldrd	r4, [sp]
   18270:	ldr	lr, [sp, #8]
   18274:	add	sp, sp, #12
   18278:	b	110f4 <fclose@plt>
   1827c:	str	r4, [sp, #-8]!
   18280:	subs	r4, r0, #0
   18284:	str	lr, [sp, #4]
   18288:	sub	sp, sp, #8
   1828c:	beq	182a8 <__assert_fail@plt+0x7100>
   18290:	bl	11040 <__freading@plt>
   18294:	cmp	r0, #0
   18298:	beq	182a8 <__assert_fail@plt+0x7100>
   1829c:	ldr	r3, [r4]
   182a0:	tst	r3, #256	; 0x100
   182a4:	bne	182c0 <__assert_fail@plt+0x7118>
   182a8:	mov	r0, r4
   182ac:	add	sp, sp, #8
   182b0:	ldr	r4, [sp]
   182b4:	ldr	lr, [sp, #4]
   182b8:	add	sp, sp, #8
   182bc:	b	10f08 <fflush@plt>
   182c0:	mov	r1, #1
   182c4:	mov	r2, #0
   182c8:	mov	r3, #0
   182cc:	mov	r0, r4
   182d0:	str	r1, [sp]
   182d4:	bl	182dc <__assert_fail@plt+0x7134>
   182d8:	b	182a8 <__assert_fail@plt+0x7100>
   182dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   182e0:	mov	r4, r0
   182e4:	ldr	ip, [r0, #4]
   182e8:	strd	r6, [sp, #8]
   182ec:	str	lr, [sp, #20]
   182f0:	ldr	lr, [r0, #8]
   182f4:	str	r8, [sp, #16]
   182f8:	sub	sp, sp, #8
   182fc:	ldr	r5, [sp, #32]
   18300:	cmp	lr, ip
   18304:	beq	1832c <__assert_fail@plt+0x7184>
   18308:	mov	r0, r4
   1830c:	str	r5, [sp, #32]
   18310:	add	sp, sp, #8
   18314:	ldrd	r4, [sp]
   18318:	ldrd	r6, [sp, #8]
   1831c:	ldr	r8, [sp, #16]
   18320:	ldr	lr, [sp, #20]
   18324:	add	sp, sp, #24
   18328:	b	11100 <fseeko64@plt>
   1832c:	ldr	ip, [r0, #16]
   18330:	ldr	lr, [r0, #20]
   18334:	cmp	lr, ip
   18338:	bne	18308 <__assert_fail@plt+0x7160>
   1833c:	ldr	r8, [r0, #36]	; 0x24
   18340:	cmp	r8, #0
   18344:	bne	18308 <__assert_fail@plt+0x7160>
   18348:	mov	r6, r2
   1834c:	mov	r7, r3
   18350:	bl	110dc <fileno@plt>
   18354:	mov	r2, r6
   18358:	mov	r3, r7
   1835c:	str	r5, [sp]
   18360:	bl	10fc8 <lseek64@plt>
   18364:	mvn	r3, #0
   18368:	mvn	r2, #0
   1836c:	cmp	r1, r3
   18370:	cmpeq	r0, r2
   18374:	beq	183a4 <__assert_fail@plt+0x71fc>
   18378:	ldr	r3, [r4]
   1837c:	strd	r0, [r4, #80]	; 0x50
   18380:	bic	r3, r3, #16
   18384:	str	r3, [r4]
   18388:	mov	r0, r8
   1838c:	add	sp, sp, #8
   18390:	ldrd	r4, [sp]
   18394:	ldrd	r6, [sp, #8]
   18398:	ldr	r8, [sp, #16]
   1839c:	add	sp, sp, #20
   183a0:	pop	{pc}		; (ldr pc, [sp], #4)
   183a4:	mvn	r8, #0
   183a8:	b	18388 <__assert_fail@plt+0x71e0>
   183ac:	mov	r3, #0
   183b0:	strd	r4, [sp, #-16]!
   183b4:	mov	r4, r0
   183b8:	mov	r5, r1
   183bc:	str	r6, [sp, #8]
   183c0:	add	r6, r2, #20
   183c4:	str	lr, [sp, #12]
   183c8:	strb	r3, [r2, #20]
   183cc:	mov	r0, r4
   183d0:	mov	r1, r5
   183d4:	mov	r2, #10
   183d8:	mov	r3, #0
   183dc:	bl	18850 <__assert_fail@plt+0x76a8>
   183e0:	add	ip, r2, #48	; 0x30
   183e4:	mov	r0, r4
   183e8:	mov	r1, r5
   183ec:	mov	r2, #10
   183f0:	mov	r3, #0
   183f4:	strb	ip, [r6, #-1]!
   183f8:	bl	18850 <__assert_fail@plt+0x76a8>
   183fc:	cmp	r5, #0
   18400:	mov	r5, r1
   18404:	cmpeq	r4, #9
   18408:	mov	r4, r0
   1840c:	bhi	183cc <__assert_fail@plt+0x7224>
   18410:	mov	r0, r6
   18414:	ldrd	r4, [sp]
   18418:	ldr	r6, [sp, #8]
   1841c:	add	sp, sp, #12
   18420:	pop	{pc}		; (ldr pc, [sp], #4)
   18424:	mov	r0, #14
   18428:	str	r4, [sp, #-8]!
   1842c:	str	lr, [sp, #4]
   18430:	bl	1113c <nl_langinfo@plt>
   18434:	cmp	r0, #0
   18438:	beq	1845c <__assert_fail@plt+0x72b4>
   1843c:	ldrb	r2, [r0]
   18440:	movw	r3, #38212	; 0x9544
   18444:	movt	r3, #1
   18448:	ldr	r4, [sp]
   1844c:	add	sp, sp, #4
   18450:	cmp	r2, #0
   18454:	moveq	r0, r3
   18458:	pop	{pc}		; (ldr pc, [sp], #4)
   1845c:	ldr	r4, [sp]
   18460:	add	sp, sp, #4
   18464:	movw	r0, #38212	; 0x9544
   18468:	movt	r0, #1
   1846c:	pop	{pc}		; (ldr pc, [sp], #4)
   18470:	strd	r4, [sp, #-20]!	; 0xffffffec
   18474:	mov	r5, r2
   18478:	strd	r6, [sp, #8]
   1847c:	subs	r6, r0, #0
   18480:	mov	r7, r1
   18484:	str	lr, [sp, #16]
   18488:	sub	sp, sp, #12
   1848c:	addeq	r6, sp, #4
   18490:	mov	r0, r6
   18494:	bl	10ff8 <mbrtowc@plt>
   18498:	cmp	r5, #0
   1849c:	cmnne	r0, #3
   184a0:	mov	r4, r0
   184a4:	bhi	184c0 <__assert_fail@plt+0x7318>
   184a8:	mov	r0, r4
   184ac:	add	sp, sp, #12
   184b0:	ldrd	r4, [sp]
   184b4:	ldrd	r6, [sp, #8]
   184b8:	add	sp, sp, #16
   184bc:	pop	{pc}		; (ldr pc, [sp], #4)
   184c0:	mov	r0, #0
   184c4:	bl	18734 <__assert_fail@plt+0x758c>
   184c8:	cmp	r0, #0
   184cc:	bne	184a8 <__assert_fail@plt+0x7300>
   184d0:	ldrb	r3, [r7]
   184d4:	mov	r4, #1
   184d8:	str	r3, [r6]
   184dc:	b	184a8 <__assert_fail@plt+0x7300>
   184e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   184e4:	strd	r6, [sp, #8]
   184e8:	subs	r7, r0, #0
   184ec:	mov	r6, r1
   184f0:	strd	r8, [sp, #16]
   184f4:	mov	r8, r2
   184f8:	str	lr, [sp, #24]
   184fc:	sub	sp, sp, #12
   18500:	beq	185cc <__assert_fail@plt+0x7424>
   18504:	mov	r3, #10
   18508:	mov	r1, #40	; 0x28
   1850c:	mov	r0, #0
   18510:	str	r3, [sp, #4]
   18514:	bl	180e8 <__assert_fail@plt+0x6f40>
   18518:	subs	r4, r0, #0
   1851c:	bne	1853c <__assert_fail@plt+0x7394>
   18520:	b	185a0 <__assert_fail@plt+0x73f8>
   18524:	bl	180e8 <__assert_fail@plt+0x6f40>
   18528:	cmp	r0, #0
   1852c:	beq	18598 <__assert_fail@plt+0x73f0>
   18530:	cmp	r5, #0
   18534:	mov	r4, r0
   18538:	bge	185c0 <__assert_fail@plt+0x7418>
   1853c:	mov	r1, r6
   18540:	add	r3, sp, #4
   18544:	ldr	r9, [sp, #4]
   18548:	mov	r2, r4
   1854c:	mov	r0, r7
   18550:	bl	110b8 <getgrouplist@plt>
   18554:	subs	r5, r0, #0
   18558:	ldr	r1, [sp, #4]
   1855c:	bge	1856c <__assert_fail@plt+0x73c4>
   18560:	cmp	r1, r9
   18564:	lsleq	r1, r1, #1
   18568:	streq	r1, [sp, #4]
   1856c:	lsrs	r3, r1, #30
   18570:	mov	r0, r4
   18574:	movne	r3, #1
   18578:	moveq	r3, #0
   1857c:	lsls	r1, r1, #2
   18580:	bmi	1858c <__assert_fail@plt+0x73e4>
   18584:	cmp	r3, #0
   18588:	beq	18524 <__assert_fail@plt+0x737c>
   1858c:	bl	110a0 <__errno_location@plt>
   18590:	mov	r3, #12
   18594:	str	r3, [r0]
   18598:	mov	r0, r4
   1859c:	bl	1209c <__assert_fail@plt+0xef4>
   185a0:	mvn	r3, #0
   185a4:	mov	r0, r3
   185a8:	add	sp, sp, #12
   185ac:	ldrd	r4, [sp]
   185b0:	ldrd	r6, [sp, #8]
   185b4:	ldrd	r8, [sp, #16]
   185b8:	add	sp, sp, #24
   185bc:	pop	{pc}		; (ldr pc, [sp], #4)
   185c0:	str	r0, [r8]
   185c4:	ldr	r3, [sp, #4]
   185c8:	b	185a4 <__assert_fail@plt+0x73fc>
   185cc:	mov	r1, r7
   185d0:	bl	11154 <getgroups@plt>
   185d4:	cmp	r0, #0
   185d8:	str	r0, [sp, #4]
   185dc:	blt	1869c <__assert_fail@plt+0x74f4>
   185e0:	adds	r5, r6, #1
   185e4:	movne	r5, #1
   185e8:	cmp	r0, #0
   185ec:	movne	r3, r5
   185f0:	moveq	r3, #1
   185f4:	cmp	r3, #0
   185f8:	addne	r0, r0, #1
   185fc:	strne	r0, [sp, #4]
   18600:	lsrs	r3, r0, #30
   18604:	movne	r3, #1
   18608:	moveq	r3, #0
   1860c:	lsls	r1, r0, #2
   18610:	bmi	186e8 <__assert_fail@plt+0x7540>
   18614:	cmp	r3, #0
   18618:	bne	186e8 <__assert_fail@plt+0x7540>
   1861c:	mov	r0, r3
   18620:	bl	180e8 <__assert_fail@plt+0x6f40>
   18624:	subs	r4, r0, #0
   18628:	beq	185a0 <__assert_fail@plt+0x73f8>
   1862c:	ldr	r0, [sp, #4]
   18630:	cmn	r6, #1
   18634:	sub	r0, r0, r5
   18638:	beq	186d4 <__assert_fail@plt+0x752c>
   1863c:	add	r1, r4, #4
   18640:	bl	11154 <getgroups@plt>
   18644:	cmp	r0, #0
   18648:	addge	r3, r0, #1
   1864c:	strge	r6, [r4]
   18650:	blt	18598 <__assert_fail@plt+0x73f0>
   18654:	cmp	r3, #1
   18658:	str	r4, [r8]
   1865c:	ble	185a4 <__assert_fail@plt+0x73fc>
   18660:	ldr	lr, [r4]
   18664:	add	ip, r4, r3, lsl #2
   18668:	add	r2, r4, #4
   1866c:	cmp	ip, r2
   18670:	bls	185a4 <__assert_fail@plt+0x73fc>
   18674:	ldr	r1, [r2], #4
   18678:	cmp	r1, lr
   1867c:	beq	18694 <__assert_fail@plt+0x74ec>
   18680:	ldr	r0, [r4]
   18684:	cmp	r1, r0
   18688:	strne	r1, [r4, #4]
   1868c:	addne	r4, r4, #4
   18690:	bne	1866c <__assert_fail@plt+0x74c4>
   18694:	sub	r3, r3, #1
   18698:	b	1866c <__assert_fail@plt+0x74c4>
   1869c:	bl	110a0 <__errno_location@plt>
   186a0:	ldr	r3, [r0]
   186a4:	cmp	r3, #38	; 0x26
   186a8:	bne	185a0 <__assert_fail@plt+0x73f8>
   186ac:	mov	r0, r7
   186b0:	mov	r1, #4
   186b4:	bl	180e8 <__assert_fail@plt+0x6f40>
   186b8:	cmp	r0, #0
   186bc:	beq	185a0 <__assert_fail@plt+0x73f8>
   186c0:	adds	r3, r6, #1
   186c4:	str	r0, [r8]
   186c8:	movne	r3, #1
   186cc:	str	r6, [r0]
   186d0:	b	185a4 <__assert_fail@plt+0x73fc>
   186d4:	mov	r1, r4
   186d8:	bl	11154 <getgroups@plt>
   186dc:	subs	r3, r0, #0
   186e0:	bge	18654 <__assert_fail@plt+0x74ac>
   186e4:	b	18598 <__assert_fail@plt+0x73f0>
   186e8:	bl	110a0 <__errno_location@plt>
   186ec:	mov	r2, #12
   186f0:	mvn	r3, #0
   186f4:	str	r2, [r0]
   186f8:	b	185a4 <__assert_fail@plt+0x73fc>
   186fc:	umull	r2, r3, r1, r2
   18700:	cmp	r3, #0
   18704:	bne	18710 <__assert_fail@plt+0x7568>
   18708:	mov	r1, r2
   1870c:	b	180e8 <__assert_fail@plt+0x6f40>
   18710:	str	r4, [sp, #-8]!
   18714:	str	lr, [sp, #4]
   18718:	bl	110a0 <__errno_location@plt>
   1871c:	mov	r3, #12
   18720:	ldr	r4, [sp]
   18724:	add	sp, sp, #4
   18728:	str	r3, [r0]
   1872c:	mov	r0, #0
   18730:	pop	{pc}		; (ldr pc, [sp], #4)
   18734:	push	{lr}		; (str lr, [sp, #-4]!)
   18738:	sub	sp, sp, #268	; 0x10c
   1873c:	movw	r2, #257	; 0x101
   18740:	add	r1, sp, #4
   18744:	bl	1878c <__assert_fail@plt+0x75e4>
   18748:	cmp	r0, #0
   1874c:	movne	r0, #0
   18750:	bne	18784 <__assert_fail@plt+0x75dc>
   18754:	movw	r1, #38220	; 0x954c
   18758:	movt	r1, #1
   1875c:	add	r0, sp, #4
   18760:	bl	10ef0 <strcmp@plt>
   18764:	cmp	r0, #0
   18768:	beq	18784 <__assert_fail@plt+0x75dc>
   1876c:	add	r0, sp, #4
   18770:	movw	r1, #38224	; 0x9550
   18774:	movt	r1, #1
   18778:	bl	10ef0 <strcmp@plt>
   1877c:	adds	r0, r0, #0
   18780:	movne	r0, #1
   18784:	add	sp, sp, #268	; 0x10c
   18788:	pop	{pc}		; (ldr pc, [sp], #4)
   1878c:	strd	r4, [sp, #-16]!
   18790:	mov	r5, r1
   18794:	mov	r1, #0
   18798:	mov	r4, r2
   1879c:	str	r6, [sp, #8]
   187a0:	str	lr, [sp, #12]
   187a4:	bl	11118 <setlocale@plt>
   187a8:	subs	r6, r0, #0
   187ac:	beq	1882c <__assert_fail@plt+0x7684>
   187b0:	bl	11088 <strlen@plt>
   187b4:	cmp	r4, r0
   187b8:	bhi	187d8 <__assert_fail@plt+0x7630>
   187bc:	cmp	r4, #0
   187c0:	moveq	r0, #34	; 0x22
   187c4:	bne	187fc <__assert_fail@plt+0x7654>
   187c8:	ldrd	r4, [sp]
   187cc:	ldr	r6, [sp, #8]
   187d0:	add	sp, sp, #12
   187d4:	pop	{pc}		; (ldr pc, [sp], #4)
   187d8:	add	r2, r0, #1
   187dc:	mov	r1, r6
   187e0:	mov	r0, r5
   187e4:	bl	10f2c <memcpy@plt>
   187e8:	ldrd	r4, [sp]
   187ec:	mov	r0, #0
   187f0:	ldr	r6, [sp, #8]
   187f4:	add	sp, sp, #12
   187f8:	pop	{pc}		; (ldr pc, [sp], #4)
   187fc:	sub	r4, r4, #1
   18800:	mov	r1, r6
   18804:	mov	r2, r4
   18808:	mov	r0, r5
   1880c:	bl	10f2c <memcpy@plt>
   18810:	mov	r3, #0
   18814:	mov	r0, #34	; 0x22
   18818:	strb	r3, [r5, r4]
   1881c:	ldrd	r4, [sp]
   18820:	ldr	r6, [sp, #8]
   18824:	add	sp, sp, #12
   18828:	pop	{pc}		; (ldr pc, [sp], #4)
   1882c:	cmp	r4, #0
   18830:	mov	r0, #22
   18834:	strbne	r6, [r5]
   18838:	ldrd	r4, [sp]
   1883c:	ldr	r6, [sp, #8]
   18840:	add	sp, sp, #12
   18844:	pop	{pc}		; (ldr pc, [sp], #4)
   18848:	mov	r1, #0
   1884c:	b	11118 <setlocale@plt>
   18850:	cmp	r3, #0
   18854:	cmpeq	r2, #0
   18858:	bne	18870 <__assert_fail@plt+0x76c8>
   1885c:	cmp	r1, #0
   18860:	cmpeq	r0, #0
   18864:	mvnne	r1, #0
   18868:	mvnne	r0, #0
   1886c:	b	1888c <__assert_fail@plt+0x76e4>
   18870:	sub	sp, sp, #8
   18874:	push	{sp, lr}
   18878:	bl	1889c <__assert_fail@plt+0x76f4>
   1887c:	ldr	lr, [sp, #4]
   18880:	add	sp, sp, #8
   18884:	pop	{r2, r3}
   18888:	bx	lr
   1888c:	push	{r1, lr}
   18890:	mov	r0, #8
   18894:	bl	10ed8 <raise@plt>
   18898:	pop	{r1, pc}
   1889c:	cmp	r1, r3
   188a0:	cmpeq	r0, r2
   188a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188a8:	mov	r4, r0
   188ac:	movcc	r0, #0
   188b0:	mov	r5, r1
   188b4:	ldr	lr, [sp, #36]	; 0x24
   188b8:	movcc	r1, r0
   188bc:	bcc	189b8 <__assert_fail@plt+0x7810>
   188c0:	cmp	r3, #0
   188c4:	clzeq	ip, r2
   188c8:	clzne	ip, r3
   188cc:	addeq	ip, ip, #32
   188d0:	cmp	r5, #0
   188d4:	clzeq	r1, r4
   188d8:	addeq	r1, r1, #32
   188dc:	clzne	r1, r5
   188e0:	sub	ip, ip, r1
   188e4:	sub	sl, ip, #32
   188e8:	lsl	r9, r3, ip
   188ec:	rsb	fp, ip, #32
   188f0:	orr	r9, r9, r2, lsl sl
   188f4:	orr	r9, r9, r2, lsr fp
   188f8:	lsl	r8, r2, ip
   188fc:	cmp	r5, r9
   18900:	cmpeq	r4, r8
   18904:	movcc	r0, #0
   18908:	movcc	r1, r0
   1890c:	bcc	18928 <__assert_fail@plt+0x7780>
   18910:	mov	r0, #1
   18914:	subs	r4, r4, r8
   18918:	lsl	r1, r0, sl
   1891c:	orr	r1, r1, r0, lsr fp
   18920:	lsl	r0, r0, ip
   18924:	sbc	r5, r5, r9
   18928:	cmp	ip, #0
   1892c:	beq	189b8 <__assert_fail@plt+0x7810>
   18930:	lsr	r6, r8, #1
   18934:	orr	r6, r6, r9, lsl #31
   18938:	lsr	r7, r9, #1
   1893c:	mov	r2, ip
   18940:	b	18964 <__assert_fail@plt+0x77bc>
   18944:	subs	r3, r4, r6
   18948:	sbc	r8, r5, r7
   1894c:	adds	r3, r3, r3
   18950:	adc	r8, r8, r8
   18954:	adds	r4, r3, #1
   18958:	adc	r5, r8, #0
   1895c:	subs	r2, r2, #1
   18960:	beq	18980 <__assert_fail@plt+0x77d8>
   18964:	cmp	r5, r7
   18968:	cmpeq	r4, r6
   1896c:	bcs	18944 <__assert_fail@plt+0x779c>
   18970:	adds	r4, r4, r4
   18974:	adc	r5, r5, r5
   18978:	subs	r2, r2, #1
   1897c:	bne	18964 <__assert_fail@plt+0x77bc>
   18980:	lsr	r3, r4, ip
   18984:	orr	r3, r3, r5, lsl fp
   18988:	lsr	r2, r5, ip
   1898c:	orr	r3, r3, r5, lsr sl
   18990:	adds	r0, r0, r4
   18994:	mov	r4, r3
   18998:	lsl	r3, r2, ip
   1899c:	orr	r3, r3, r4, lsl sl
   189a0:	lsl	ip, r4, ip
   189a4:	orr	r3, r3, r4, lsr fp
   189a8:	adc	r1, r1, r5
   189ac:	subs	r0, r0, ip
   189b0:	mov	r5, r2
   189b4:	sbc	r1, r1, r3
   189b8:	cmp	lr, #0
   189bc:	strdne	r4, [lr]
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189c8:	mov	r7, r0
   189cc:	ldr	r6, [pc, #72]	; 18a1c <__assert_fail@plt+0x7874>
   189d0:	ldr	r5, [pc, #72]	; 18a20 <__assert_fail@plt+0x7878>
   189d4:	add	r6, pc, r6
   189d8:	add	r5, pc, r5
   189dc:	sub	r6, r6, r5
   189e0:	mov	r8, r1
   189e4:	mov	r9, r2
   189e8:	bl	10e94 <calloc@plt-0x20>
   189ec:	asrs	r6, r6, #2
   189f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   189f4:	mov	r4, #0
   189f8:	add	r4, r4, #1
   189fc:	ldr	r3, [r5], #4
   18a00:	mov	r2, r9
   18a04:	mov	r1, r8
   18a08:	mov	r0, r7
   18a0c:	blx	r3
   18a10:	cmp	r6, r4
   18a14:	bne	189f8 <__assert_fail@plt+0x7850>
   18a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a1c:	andeq	r1, r1, r8, lsr r5
   18a20:	andeq	r1, r1, r0, lsr r5
   18a24:	bx	lr
   18a28:	ldr	r3, [pc, #12]	; 18a3c <__assert_fail@plt+0x7894>
   18a2c:	mov	r1, #0
   18a30:	add	r3, pc, r3
   18a34:	ldr	r2, [r3]
   18a38:	b	110ac <__cxa_atexit@plt>
   18a3c:	ldrdeq	r1, [r1], -ip

Disassembly of section .fini:

00018a40 <.fini>:
   18a40:	push	{r3, lr}
   18a44:	pop	{r3, pc}
