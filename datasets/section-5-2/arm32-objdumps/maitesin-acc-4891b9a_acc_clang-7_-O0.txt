
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011e94 <.init>:
   11e94:	push	{r3, lr}
   11e98:	bl	120dc <_start@@Base+0x3c>
   11e9c:	pop	{r3, pc}

Disassembly of section .plt:

00011ea0 <fdopen@plt-0x14>:
   11ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   11ea4:	ldr	lr, [pc, #4]	; 11eb0 <fdopen@plt-0x4>
   11ea8:	add	lr, pc, lr
   11eac:	ldr	pc, [lr, #8]!
   11eb0:	andeq	pc, r1, r0, asr r1	; <UNPREDICTABLE>

00011eb4 <fdopen@plt>:
   11eb4:	add	ip, pc, #0, 12
   11eb8:	add	ip, ip, #126976	; 0x1f000
   11ebc:	ldr	pc, [ip, #336]!	; 0x150

00011ec0 <strtol@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #126976	; 0x1f000
   11ec8:	ldr	pc, [ip, #328]!	; 0x148

00011ecc <fopen@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #126976	; 0x1f000
   11ed4:	ldr	pc, [ip, #320]!	; 0x140

00011ed8 <fflush@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #126976	; 0x1f000
   11ee0:	ldr	pc, [ip, #312]!	; 0x138

00011ee4 <free@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #126976	; 0x1f000
   11eec:	ldr	pc, [ip, #304]!	; 0x130

00011ef0 <memcpy@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #126976	; 0x1f000
   11ef8:	ldr	pc, [ip, #296]!	; 0x128

00011efc <mmap64@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #126976	; 0x1f000
   11f04:	ldr	pc, [ip, #288]!	; 0x120

00011f08 <ftell@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #126976	; 0x1f000
   11f10:	ldr	pc, [ip, #280]!	; 0x118

00011f14 <uname@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #126976	; 0x1f000
   11f1c:	ldr	pc, [ip, #272]!	; 0x110

00011f20 <strdup@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #126976	; 0x1f000
   11f28:	ldr	pc, [ip, #264]!	; 0x108

00011f2c <realloc@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #126976	; 0x1f000
   11f34:	ldr	pc, [ip, #256]!	; 0x100

00011f38 <fwrite@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #126976	; 0x1f000
   11f40:	ldr	pc, [ip, #248]!	; 0xf8

00011f44 <fread@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #126976	; 0x1f000
   11f4c:	ldr	pc, [ip, #240]!	; 0xf0

00011f50 <open64@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #126976	; 0x1f000
   11f58:	ldr	pc, [ip, #232]!	; 0xe8

00011f5c <getenv@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #126976	; 0x1f000
   11f64:	ldr	pc, [ip, #224]!	; 0xe0

00011f68 <malloc@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #126976	; 0x1f000
   11f70:	ldr	pc, [ip, #216]!	; 0xd8

00011f74 <__libc_start_main@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #126976	; 0x1f000
   11f7c:	ldr	pc, [ip, #208]!	; 0xd0

00011f80 <strerror@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #126976	; 0x1f000
   11f88:	ldr	pc, [ip, #200]!	; 0xc8

00011f8c <__gmon_start__@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #126976	; 0x1f000
   11f94:	ldr	pc, [ip, #192]!	; 0xc0

00011f98 <getpid@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #126976	; 0x1f000
   11fa0:	ldr	pc, [ip, #184]!	; 0xb8

00011fa4 <exit@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #126976	; 0x1f000
   11fac:	ldr	pc, [ip, #176]!	; 0xb0

00011fb0 <strlen@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #126976	; 0x1f000
   11fb8:	ldr	pc, [ip, #168]!	; 0xa8

00011fbc <strchr@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #126976	; 0x1f000
   11fc4:	ldr	pc, [ip, #160]!	; 0xa0

00011fc8 <getopt@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #126976	; 0x1f000
   11fd0:	ldr	pc, [ip, #152]!	; 0x98

00011fd4 <fprintf@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #126976	; 0x1f000
   11fdc:	ldr	pc, [ip, #144]!	; 0x90

00011fe0 <__errno_location@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #126976	; 0x1f000
   11fe8:	ldr	pc, [ip, #136]!	; 0x88

00011fec <__cxa_atexit@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #126976	; 0x1f000
   11ff4:	ldr	pc, [ip, #128]!	; 0x80

00011ff8 <mkdir@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #126976	; 0x1f000
   12000:	ldr	pc, [ip, #120]!	; 0x78

00012004 <memset@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #126976	; 0x1f000
   1200c:	ldr	pc, [ip, #112]!	; 0x70

00012010 <strncpy@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #126976	; 0x1f000
   12018:	ldr	pc, [ip, #104]!	; 0x68

0001201c <prctl@plt>:
   1201c:	add	ip, pc, #0, 12
   12020:	add	ip, ip, #126976	; 0x1f000
   12024:	ldr	pc, [ip, #96]!	; 0x60

00012028 <fclose@plt>:
   12028:	add	ip, pc, #0, 12
   1202c:	add	ip, ip, #126976	; 0x1f000
   12030:	ldr	pc, [ip, #88]!	; 0x58

00012034 <strnlen@plt>:
   12034:	add	ip, pc, #0, 12
   12038:	add	ip, ip, #126976	; 0x1f000
   1203c:	ldr	pc, [ip, #80]!	; 0x50

00012040 <munmap@plt>:
   12040:	add	ip, pc, #0, 12
   12044:	add	ip, ip, #126976	; 0x1f000
   12048:	ldr	pc, [ip, #72]!	; 0x48

0001204c <fcntl64@plt>:
   1204c:	add	ip, pc, #0, 12
   12050:	add	ip, ip, #126976	; 0x1f000
   12054:	ldr	pc, [ip, #64]!	; 0x40

00012058 <strrchr@plt>:
   12058:	add	ip, pc, #0, 12
   1205c:	add	ip, ip, #126976	; 0x1f000
   12060:	ldr	pc, [ip, #56]!	; 0x38

00012064 <msync@plt>:
   12064:	add	ip, pc, #0, 12
   12068:	add	ip, ip, #126976	; 0x1f000
   1206c:	ldr	pc, [ip, #48]!	; 0x30

00012070 <atoi@plt>:
   12070:	add	ip, pc, #0, 12
   12074:	add	ip, ip, #126976	; 0x1f000
   12078:	ldr	pc, [ip, #40]!	; 0x28

0001207c <fseek@plt>:
   1207c:	add	ip, pc, #0, 12
   12080:	add	ip, ip, #126976	; 0x1f000
   12084:	ldr	pc, [ip, #32]!

00012088 <strncmp@plt>:
   12088:	add	ip, pc, #0, 12
   1208c:	add	ip, ip, #126976	; 0x1f000
   12090:	ldr	pc, [ip, #24]!

00012094 <abort@plt>:
   12094:	add	ip, pc, #0, 12
   12098:	add	ip, ip, #126976	; 0x1f000
   1209c:	ldr	pc, [ip, #16]!

Disassembly of section .text:

000120a0 <_start@@Base>:
   120a0:	mov	fp, #0
   120a4:	mov	lr, #0
   120a8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ac:	mov	r2, sp
   120b0:	push	{r2}		; (str r2, [sp, #-4]!)
   120b4:	push	{r0}		; (str r0, [sp, #-4]!)
   120b8:	ldr	ip, [pc, #16]	; 120d0 <_start@@Base+0x30>
   120bc:	push	{ip}		; (str ip, [sp, #-4]!)
   120c0:	ldr	r0, [pc, #12]	; 120d4 <_start@@Base+0x34>
   120c4:	ldr	r3, [pc, #12]	; 120d8 <_start@@Base+0x38>
   120c8:	bl	11f74 <__libc_start_main@plt>
   120cc:	bl	12094 <abort@plt>
   120d0:	andeq	lr, r1, ip, ror #9
   120d4:	andeq	r2, r1, ip, lsr #11
   120d8:	andeq	lr, r1, ip, lsl #9
   120dc:	ldr	r3, [pc, #20]	; 120f8 <_start@@Base+0x58>
   120e0:	ldr	r2, [pc, #20]	; 120fc <_start@@Base+0x5c>
   120e4:	add	r3, pc, r3
   120e8:	ldr	r2, [r3, r2]
   120ec:	cmp	r2, #0
   120f0:	bxeq	lr
   120f4:	b	11f8c <__gmon_start__@plt>
   120f8:	andeq	lr, r1, r4, lsl pc
   120fc:	andeq	r0, r0, r4, asr #1
   12100:	ldr	r0, [pc, #24]	; 12120 <_start@@Base+0x80>
   12104:	ldr	r3, [pc, #24]	; 12124 <_start@@Base+0x84>
   12108:	cmp	r3, r0
   1210c:	bxeq	lr
   12110:	ldr	r3, [pc, #16]	; 12128 <_start@@Base+0x88>
   12114:	cmp	r3, #0
   12118:	bxeq	lr
   1211c:	bx	r3
   12120:	andeq	r1, r3, ip, lsl #2
   12124:	andeq	r1, r3, ip, lsl #2
   12128:	andeq	r0, r0, r0
   1212c:	ldr	r0, [pc, #36]	; 12158 <_start@@Base+0xb8>
   12130:	ldr	r1, [pc, #36]	; 1215c <_start@@Base+0xbc>
   12134:	sub	r1, r1, r0
   12138:	asr	r1, r1, #2
   1213c:	add	r1, r1, r1, lsr #31
   12140:	asrs	r1, r1, #1
   12144:	bxeq	lr
   12148:	ldr	r3, [pc, #16]	; 12160 <_start@@Base+0xc0>
   1214c:	cmp	r3, #0
   12150:	bxeq	lr
   12154:	bx	r3
   12158:	andeq	r1, r3, ip, lsl #2
   1215c:	andeq	r1, r3, ip, lsl #2
   12160:	andeq	r0, r0, r0
   12164:	push	{r4, lr}
   12168:	ldr	r4, [pc, #24]	; 12188 <_start@@Base+0xe8>
   1216c:	ldrb	r3, [r4]
   12170:	cmp	r3, #0
   12174:	popne	{r4, pc}
   12178:	bl	12100 <_start@@Base+0x60>
   1217c:	mov	r3, #1
   12180:	strb	r3, [r4]
   12184:	pop	{r4, pc}
   12188:	andeq	r1, r3, r0, lsl r1
   1218c:	b	1212c <_start@@Base+0x8c>

00012190 <load_file@@Base>:
   12190:	push	{fp, lr}
   12194:	mov	fp, sp
   12198:	sub	sp, sp, #40	; 0x28
   1219c:	ldr	r1, [pc, #768]	; 124a4 <load_file@@Base+0x314>
   121a0:	add	r1, pc, r1
   121a4:	ldr	r2, [r1, #4]
   121a8:	ldr	r3, [pc, #760]	; 124a8 <load_file@@Base+0x318>
   121ac:	ldr	r3, [pc, r3]
   121b0:	adds	r3, r3, #1
   121b4:	adc	r2, r2, #0
   121b8:	str	r3, [r1]
   121bc:	str	r2, [r1, #4]
   121c0:	str	r0, [sp, #16]
   121c4:	ldr	r0, [sp, #16]
   121c8:	str	r0, [fp, #-4]
   121cc:	mov	r1, #0
   121d0:	str	r1, [fp, #-8]
   121d4:	ldr	r0, [fp, #-4]
   121d8:	ldr	r1, [pc, #716]	; 124ac <load_file@@Base+0x31c>
   121dc:	add	r1, pc, r1
   121e0:	bl	11ecc <fopen@plt>
   121e4:	str	r0, [fp, #-12]
   121e8:	ldr	r0, [fp, #-12]
   121ec:	cmp	r0, #0
   121f0:	mov	r1, r0
   121f4:	movwne	r1, #1
   121f8:	mov	lr, #16
   121fc:	cmp	r0, #0
   12200:	movwne	lr, #8
   12204:	ldr	r0, [pc, #676]	; 124b0 <load_file@@Base+0x320>
   12208:	add	r0, pc, r0
   1220c:	ldr	lr, [r0, lr]!
   12210:	ldr	r2, [r0, #4]
   12214:	adds	lr, lr, #1
   12218:	adc	r2, r2, #0
   1221c:	str	lr, [r0]
   12220:	str	r2, [r0, #4]
   12224:	tst	r1, #1
   12228:	beq	12460 <load_file@@Base+0x2d0>
   1222c:	ldr	r0, [fp, #-12]
   12230:	mov	r1, #0
   12234:	mov	r2, #2
   12238:	bl	1207c <fseek@plt>
   1223c:	clz	r1, r0
   12240:	lsr	r1, r1, #5
   12244:	mov	r2, #32
   12248:	cmp	r0, #0
   1224c:	movweq	r2, #24
   12250:	ldr	r0, [pc, #604]	; 124b4 <load_file@@Base+0x324>
   12254:	add	r0, pc, r0
   12258:	ldr	r2, [r0, r2]!
   1225c:	ldr	lr, [r0, #4]
   12260:	adds	r2, r2, #1
   12264:	adc	lr, lr, #0
   12268:	str	r2, [r0]
   1226c:	str	lr, [r0, #4]
   12270:	tst	r1, #1
   12274:	beq	12434 <load_file@@Base+0x2a4>
   12278:	ldr	r0, [fp, #-12]
   1227c:	bl	11f08 <ftell@plt>
   12280:	str	r0, [fp, #-16]
   12284:	ldr	r0, [fp, #-16]
   12288:	add	lr, r0, #1
   1228c:	clz	lr, lr
   12290:	lsr	lr, lr, #5
   12294:	mov	r1, #48	; 0x30
   12298:	cmn	r0, #1
   1229c:	movweq	r1, #40	; 0x28
   122a0:	ldr	r0, [pc, #528]	; 124b8 <load_file@@Base+0x328>
   122a4:	add	r0, pc, r0
   122a8:	ldr	r1, [r0, r1]!
   122ac:	ldr	r2, [r0, #4]
   122b0:	adds	r1, r1, #1
   122b4:	adc	r2, r2, #0
   122b8:	str	r1, [r0]
   122bc:	str	r2, [r0, #4]
   122c0:	tst	lr, #1
   122c4:	beq	122f0 <load_file@@Base+0x160>
   122c8:	ldr	r0, [pc, #460]	; 1249c <load_file@@Base+0x30c>
   122cc:	add	r1, pc, r0
   122d0:	ldr	r0, [pc, #456]	; 124a0 <load_file@@Base+0x310>
   122d4:	ldr	r0, [pc, r0]
   122d8:	ldr	r0, [r0]
   122dc:	bl	11fd4 <fprintf@plt>
   122e0:	movw	r1, #1
   122e4:	str	r0, [sp, #12]
   122e8:	mov	r0, r1
   122ec:	bl	11fa4 <exit@plt>
   122f0:	ldr	r0, [fp, #-16]
   122f4:	add	r0, r0, #1
   122f8:	bl	11f68 <malloc@plt>
   122fc:	str	r0, [fp, #-8]
   12300:	ldr	r0, [fp, #-12]
   12304:	mov	lr, #0
   12308:	mov	r1, lr
   1230c:	mov	r2, lr
   12310:	bl	1207c <fseek@plt>
   12314:	cmp	r0, #0
   12318:	mov	r1, r0
   1231c:	movwne	r1, #1
   12320:	mov	r2, #64	; 0x40
   12324:	cmp	r0, #0
   12328:	movwne	r2, #56	; 0x38
   1232c:	ldr	r0, [pc, #392]	; 124bc <load_file@@Base+0x32c>
   12330:	add	r0, pc, r0
   12334:	ldr	r2, [r0, r2]!
   12338:	ldr	lr, [r0, #4]
   1233c:	adds	r2, r2, #1
   12340:	adc	lr, lr, #0
   12344:	str	r2, [r0]
   12348:	str	lr, [r0, #4]
   1234c:	tst	r1, #1
   12350:	beq	1237c <load_file@@Base+0x1ec>
   12354:	ldr	r0, [pc, #312]	; 12494 <load_file@@Base+0x304>
   12358:	add	r1, pc, r0
   1235c:	ldr	r0, [pc, #308]	; 12498 <load_file@@Base+0x308>
   12360:	ldr	r0, [pc, r0]
   12364:	ldr	r0, [r0]
   12368:	bl	11fd4 <fprintf@plt>
   1236c:	movw	r1, #1
   12370:	str	r0, [sp, #8]
   12374:	mov	r0, r1
   12378:	bl	11fa4 <exit@plt>
   1237c:	ldr	r0, [fp, #-8]
   12380:	ldr	r2, [fp, #-16]
   12384:	ldr	r3, [fp, #-12]
   12388:	mov	r1, #1
   1238c:	bl	11f44 <fread@plt>
   12390:	str	r0, [sp, #20]
   12394:	ldr	r0, [sp, #20]
   12398:	clz	r1, r0
   1239c:	lsr	r1, r1, #5
   123a0:	mov	r2, #80	; 0x50
   123a4:	cmp	r0, #0
   123a8:	movweq	r2, #72	; 0x48
   123ac:	ldr	r0, [pc, #268]	; 124c0 <load_file@@Base+0x330>
   123b0:	add	r0, pc, r0
   123b4:	ldr	r2, [r0, r2]!
   123b8:	ldr	r3, [r0, #4]
   123bc:	adds	r2, r2, #1
   123c0:	adc	r3, r3, #0
   123c4:	str	r2, [r0]
   123c8:	str	r3, [r0, #4]
   123cc:	tst	r1, #1
   123d0:	beq	12400 <load_file@@Base+0x270>
   123d4:	ldr	r0, [pc, #176]	; 1248c <load_file@@Base+0x2fc>
   123d8:	add	r1, pc, r0
   123dc:	ldr	r0, [pc, #172]	; 12490 <load_file@@Base+0x300>
   123e0:	ldr	r0, [pc, r0]
   123e4:	ldr	r0, [r0]
   123e8:	ldr	r2, [fp, #-4]
   123ec:	bl	11fd4 <fprintf@plt>
   123f0:	movw	r1, #1
   123f4:	str	r0, [sp, #4]
   123f8:	mov	r0, r1
   123fc:	bl	11fa4 <exit@plt>
   12400:	ldr	r0, [pc, #188]	; 124c4 <load_file@@Base+0x334>
   12404:	add	r0, pc, r0
   12408:	ldr	r1, [r0, #88]	; 0x58
   1240c:	ldr	r2, [r0, #92]	; 0x5c
   12410:	adds	r1, r1, #1
   12414:	adc	r2, r2, #0
   12418:	str	r1, [r0, #88]	; 0x58
   1241c:	str	r2, [r0, #92]	; 0x5c
   12420:	ldr	r0, [fp, #-8]
   12424:	ldr	r1, [sp, #20]
   12428:	add	r0, r0, r1
   1242c:	movw	r1, #0
   12430:	strb	r1, [r0]
   12434:	ldr	r0, [pc, #140]	; 124c8 <load_file@@Base+0x338>
   12438:	add	r0, pc, r0
   1243c:	ldr	r1, [r0, #96]	; 0x60
   12440:	ldr	r2, [r0, #100]	; 0x64
   12444:	adds	r1, r1, #1
   12448:	adc	r2, r2, #0
   1244c:	str	r1, [r0, #96]	; 0x60
   12450:	str	r2, [r0, #100]	; 0x64
   12454:	ldr	r0, [fp, #-12]
   12458:	bl	12028 <fclose@plt>
   1245c:	str	r0, [sp]
   12460:	ldr	r0, [pc, #100]	; 124cc <load_file@@Base+0x33c>
   12464:	add	r0, pc, r0
   12468:	ldr	r1, [r0, #104]	; 0x68
   1246c:	ldr	r2, [r0, #108]	; 0x6c
   12470:	adds	r1, r1, #1
   12474:	adc	r2, r2, #0
   12478:	str	r1, [r0, #104]	; 0x68
   1247c:	str	r2, [r0, #108]	; 0x6c
   12480:	ldr	r0, [fp, #-8]
   12484:	mov	sp, fp
   12488:	pop	{fp, pc}
   1248c:	muleq	r0, sl, r1
   12490:	ldrdeq	lr, [r1], -r8
   12494:	andeq	ip, r0, r8, ror #3
   12498:	andeq	lr, r1, r8, asr sp
   1249c:	andeq	ip, r0, r0, asr #4
   124a0:	andeq	lr, r1, r4, ror #27
   124a4:	andeq	lr, r1, r8, ror pc
   124a8:	andeq	lr, r1, ip, ror #30
   124ac:	andeq	ip, r0, pc, lsr #15
   124b0:	andeq	lr, r1, r0, lsl pc
   124b4:	andeq	lr, r1, r4, asr #29
   124b8:	andeq	lr, r1, r4, ror lr
   124bc:	andeq	lr, r1, r8, ror #27
   124c0:	andeq	lr, r1, r8, ror #26
   124c4:	andeq	lr, r1, r4, lsl sp
   124c8:	andeq	lr, r1, r0, ror #25
   124cc:			; <UNDEFINED> instruction: 0x0001ecb4

000124d0 <my_main@@Base>:
   124d0:	push	{fp, lr}
   124d4:	mov	fp, sp
   124d8:	sub	sp, sp, #56	; 0x38
   124dc:	ldr	r2, [pc, #188]	; 125a0 <my_main@@Base+0xd0>
   124e0:	add	r2, pc, r2
   124e4:	ldr	r3, [r2, #4]
   124e8:	ldr	ip, [pc, #180]	; 125a4 <my_main@@Base+0xd4>
   124ec:	ldr	ip, [pc, ip]
   124f0:	adds	ip, ip, #1
   124f4:	adc	r3, r3, #0
   124f8:	str	ip, [r2]
   124fc:	str	r3, [r2, #4]
   12500:	str	r0, [sp, #8]
   12504:	str	r1, [sp, #4]
   12508:	ldr	r0, [pc, #152]	; 125a8 <my_main@@Base+0xd8>
   1250c:	add	r0, pc, r0
   12510:	ldr	r1, [r0, #8]
   12514:	ldr	r2, [r0, #12]
   12518:	adds	r1, r1, #1
   1251c:	adc	r2, r2, #0
   12520:	str	r1, [r0, #8]
   12524:	str	r2, [r0, #12]
   12528:	ldr	r0, [sp, #8]
   1252c:	str	r0, [fp, #-4]
   12530:	ldr	r1, [sp, #4]
   12534:	str	r1, [fp, #-8]
   12538:	ldr	r0, [fp, #-4]
   1253c:	bl	12190 <load_file@@Base>
   12540:	str	r0, [sp, #12]
   12544:	ldr	r1, [sp, #12]
   12548:	sub	r0, fp, #20
   1254c:	bl	13cf4 <init_lexer@@Base>
   12550:	sub	r0, fp, #24
   12554:	sub	r1, fp, #20
   12558:	bl	17fcc <init_grammar@@Base>
   1255c:	ldr	r2, [fp, #-8]
   12560:	add	r0, sp, #16
   12564:	sub	r1, fp, #24
   12568:	bl	19da0 <init_generator@@Base>
   1256c:	add	r0, sp, #16
   12570:	bl	19ee0 <generate_code@@Base>
   12574:	add	r0, sp, #16
   12578:	bl	19e60 <destroy_generator@@Base>
   1257c:	sub	r0, fp, #24
   12580:	bl	1804c <destroy_grammar@@Base>
   12584:	sub	r0, fp, #20
   12588:	bl	13d88 <destroy_lexer@@Base>
   1258c:	ldr	r0, [sp, #12]
   12590:	bl	11ee4 <free@plt>
   12594:	movw	r0, #0
   12598:	mov	sp, fp
   1259c:	pop	{fp, pc}
   125a0:	andeq	lr, r1, r8, lsr #25
   125a4:	muleq	r1, ip, ip
   125a8:	andeq	lr, r1, ip, ror ip

000125ac <main@@Base>:
   125ac:	push	{fp, lr}
   125b0:	mov	fp, sp
   125b4:	sub	sp, sp, #48	; 0x30
   125b8:	ldr	r2, [pc, #736]	; 128a0 <main@@Base+0x2f4>
   125bc:	add	r2, pc, r2
   125c0:	ldr	r3, [r2, #4]
   125c4:	ldr	ip, [pc, #728]	; 128a4 <main@@Base+0x2f8>
   125c8:	ldr	ip, [pc, ip]
   125cc:	adds	ip, ip, #1
   125d0:	adc	r3, r3, #0
   125d4:	str	ip, [r2]
   125d8:	str	r3, [r2, #4]
   125dc:	str	r0, [sp, #24]
   125e0:	str	r1, [sp, #20]
   125e4:	ldr	r0, [pc, #700]	; 128a8 <main@@Base+0x2fc>
   125e8:	add	r0, pc, r0
   125ec:	ldr	r1, [r0, #8]
   125f0:	ldr	r2, [r0, #12]
   125f4:	adds	r1, r1, #1
   125f8:	adc	r2, r2, #0
   125fc:	str	r1, [r0, #8]
   12600:	str	r2, [r0, #12]
   12604:	movw	r0, #0
   12608:	str	r0, [fp, #-4]
   1260c:	ldr	r1, [sp, #24]
   12610:	str	r1, [fp, #-8]
   12614:	ldr	r2, [sp, #20]
   12618:	str	r2, [fp, #-12]
   1261c:	str	r0, [fp, #-16]
   12620:	str	r0, [fp, #-20]	; 0xffffffec
   12624:	ldr	r0, [fp, #-8]
   12628:	ldr	r1, [fp, #-12]
   1262c:	ldr	r2, [pc, #632]	; 128ac <main@@Base+0x300>
   12630:	add	r2, pc, r2
   12634:	bl	11fc8 <getopt@plt>
   12638:	str	r0, [fp, #-20]	; 0xffffffec
   1263c:	add	r1, r0, #1
   12640:	cmn	r0, #1
   12644:	movwne	r1, #1
   12648:	mov	r2, #24
   1264c:	cmn	r0, #1
   12650:	movwne	r2, #16
   12654:	ldr	r0, [pc, #596]	; 128b0 <main@@Base+0x304>
   12658:	add	r0, pc, r0
   1265c:	ldr	r2, [r0, r2]!
   12660:	ldr	lr, [r0, #4]
   12664:	adds	r2, r2, #1
   12668:	adc	lr, lr, #0
   1266c:	str	r2, [r0]
   12670:	str	lr, [r0, #4]
   12674:	tst	r1, #1
   12678:	beq	12728 <main@@Base+0x17c>
   1267c:	ldr	r0, [pc, #560]	; 128b4 <main@@Base+0x308>
   12680:	add	r0, pc, r0
   12684:	mov	r1, #0
   12688:	str	r1, [r0]
   1268c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12690:	cmp	r0, #111	; 0x6f
   12694:	bne	126f0 <main@@Base+0x144>
   12698:	b	1269c <main@@Base+0xf0>
   1269c:	ldr	r0, [pc, #504]	; 1289c <main@@Base+0x2f0>
   126a0:	ldr	r0, [pc, r0]
   126a4:	ldr	r1, [pc, #524]	; 128b8 <main@@Base+0x30c>
   126a8:	add	r1, pc, r1
   126ac:	add	r1, r1, #4
   126b0:	ldr	r2, [pc, #516]	; 128bc <main@@Base+0x310>
   126b4:	add	r2, pc, r2
   126b8:	str	r0, [sp, #16]
   126bc:	mov	r0, r2
   126c0:	bl	128ec <main@@Base+0x340>
   126c4:	ldr	r0, [pc, #500]	; 128c0 <main@@Base+0x314>
   126c8:	add	r0, pc, r0
   126cc:	ldr	r1, [r0, #48]	; 0x30
   126d0:	ldr	r2, [r0, #52]	; 0x34
   126d4:	adds	r1, r1, #1
   126d8:	adc	r2, r2, #0
   126dc:	str	r1, [r0, #48]	; 0x30
   126e0:	str	r2, [r0, #52]	; 0x34
   126e4:	ldr	r0, [sp, #16]
   126e8:	ldr	r1, [r0]
   126ec:	str	r1, [fp, #-16]
   126f0:	ldr	r0, [pc, #460]	; 128c4 <main@@Base+0x318>
   126f4:	add	r0, pc, r0
   126f8:	ldr	r1, [pc, #456]	; 128c8 <main@@Base+0x31c>
   126fc:	add	r1, pc, r1
   12700:	bl	128ec <main@@Base+0x340>
   12704:	ldr	r0, [pc, #448]	; 128cc <main@@Base+0x320>
   12708:	add	r0, pc, r0
   1270c:	ldr	r1, [r0, #56]	; 0x38
   12710:	ldr	lr, [r0, #60]	; 0x3c
   12714:	adds	r1, r1, #1
   12718:	adc	lr, lr, #0
   1271c:	str	r1, [r0, #56]	; 0x38
   12720:	str	lr, [r0, #60]	; 0x3c
   12724:	b	12624 <main@@Base+0x78>
   12728:	ldr	r0, [pc, #416]	; 128d0 <main@@Base+0x324>
   1272c:	ldr	r0, [pc, r0]
   12730:	ldr	r0, [r0]
   12734:	ldr	r1, [fp, #-8]
   12738:	mov	r2, #0
   1273c:	cmp	r0, r1
   12740:	movwlt	r2, #1
   12744:	mov	r3, #72	; 0x48
   12748:	cmp	r0, r1
   1274c:	movwlt	r3, #64	; 0x40
   12750:	ldr	r0, [pc, #380]	; 128d4 <main@@Base+0x328>
   12754:	add	r0, pc, r0
   12758:	ldr	r1, [r0, r3]!
   1275c:	ldr	r3, [r0, #4]
   12760:	adds	r1, r1, #1
   12764:	adc	r3, r3, #0
   12768:	str	r1, [r0]
   1276c:	str	r3, [r0, #4]
   12770:	tst	r2, #1
   12774:	beq	12868 <main@@Base+0x2bc>
   12778:	ldr	r0, [fp, #-12]
   1277c:	ldr	r1, [pc, #340]	; 128d8 <main@@Base+0x32c>
   12780:	ldr	r1, [pc, r1]
   12784:	ldr	r1, [r1]
   12788:	ldr	r0, [r0, r1, lsl #2]
   1278c:	ldr	r1, [fp, #-16]
   12790:	clz	r2, r1
   12794:	lsr	r2, r2, #5
   12798:	mov	r3, #88	; 0x58
   1279c:	cmp	r1, #0
   127a0:	movweq	r3, #80	; 0x50
   127a4:	ldr	r1, [pc, #304]	; 128dc <main@@Base+0x330>
   127a8:	add	r1, pc, r1
   127ac:	ldr	r3, [r1, r3]!
   127b0:	ldr	ip, [r1, #4]
   127b4:	adds	r3, r3, #1
   127b8:	adc	ip, ip, #0
   127bc:	str	r3, [r1]
   127c0:	str	ip, [r1, #4]
   127c4:	tst	r2, #1
   127c8:	str	r0, [sp, #12]
   127cc:	beq	12800 <main@@Base+0x254>
   127d0:	ldr	r0, [pc, #192]	; 12898 <main@@Base+0x2ec>
   127d4:	add	r0, pc, r0
   127d8:	ldr	r1, [pc, #256]	; 128e0 <main@@Base+0x334>
   127dc:	add	r1, pc, r1
   127e0:	ldr	r2, [r1, #96]	; 0x60
   127e4:	ldr	r3, [r1, #100]	; 0x64
   127e8:	adds	r2, r2, #1
   127ec:	adc	r3, r3, #0
   127f0:	str	r2, [r1, #96]	; 0x60
   127f4:	str	r3, [r1, #100]	; 0x64
   127f8:	str	r0, [sp, #8]
   127fc:	b	12828 <main@@Base+0x27c>
   12800:	ldr	r0, [pc, #220]	; 128e4 <main@@Base+0x338>
   12804:	add	r0, pc, r0
   12808:	ldr	r1, [r0, #104]	; 0x68
   1280c:	ldr	r2, [r0, #108]	; 0x6c
   12810:	adds	r1, r1, #1
   12814:	adc	r2, r2, #0
   12818:	str	r1, [r0, #104]	; 0x68
   1281c:	str	r2, [r0, #108]	; 0x6c
   12820:	ldr	r0, [fp, #-16]
   12824:	str	r0, [sp, #8]
   12828:	ldr	r0, [sp, #8]
   1282c:	ldr	r1, [pc, #180]	; 128e8 <main@@Base+0x33c>
   12830:	add	r1, pc, r1
   12834:	ldr	r2, [r1, #112]	; 0x70
   12838:	ldr	r3, [r1, #116]	; 0x74
   1283c:	adds	r2, r2, #1
   12840:	adc	r3, r3, #0
   12844:	str	r2, [r1, #112]	; 0x70
   12848:	str	r3, [r1, #116]	; 0x74
   1284c:	ldr	r1, [sp, #12]
   12850:	str	r0, [sp, #4]
   12854:	mov	r0, r1
   12858:	ldr	r1, [sp, #4]
   1285c:	bl	124d0 <my_main@@Base>
   12860:	mov	sp, fp
   12864:	pop	{fp, pc}
   12868:	ldr	r0, [pc, #32]	; 12890 <main@@Base+0x2e4>
   1286c:	add	r1, pc, r0
   12870:	ldr	r0, [pc, #28]	; 12894 <main@@Base+0x2e8>
   12874:	ldr	r0, [pc, r0]
   12878:	ldr	r0, [r0]
   1287c:	bl	11fd4 <fprintf@plt>
   12880:	movw	r1, #1
   12884:	str	r0, [sp]
   12888:	mov	r0, r1
   1288c:	bl	11fa4 <exit@plt>
   12890:	andeq	fp, r0, r5, lsr #26
   12894:	andeq	lr, r1, r4, asr #16
   12898:			; <UNDEFINED> instruction: 0x0000bdb9
   1289c:	andeq	lr, r1, r0, lsr #20
   128a0:	ldrdeq	lr, [r1], -ip
   128a4:	ldrdeq	lr, [r1], -r0
   128a8:			; <UNDEFINED> instruction: 0x0001ebb0
   128ac:	andeq	fp, r0, sl, asr pc
   128b0:	andeq	lr, r1, r0, asr #22
   128b4:	andeq	lr, r1, ip, asr #20
   128b8:	strdeq	sp, [r1], -r0
   128bc:	andeq	lr, r1, r8, lsl sl
   128c0:	ldrdeq	lr, [r1], -r0
   128c4:	ldrdeq	lr, [r1], -r8
   128c8:	muleq	r1, ip, sp
   128cc:	muleq	r1, r0, sl
   128d0:	andeq	lr, r1, r8, lsl #19
   128d4:	andeq	lr, r1, r4, asr #20
   128d8:	andeq	lr, r1, r4, lsr r9
   128dc:	strdeq	lr, [r1], -r0
   128e0:			; <UNDEFINED> instruction: 0x0001e9bc
   128e4:	muleq	r1, r4, r9
   128e8:	andeq	lr, r1, r8, ror #18
   128ec:	sub	sp, sp, #12
   128f0:	ldr	r0, [r0]
   128f4:	cmn	r0, #1
   128f8:	str	r1, [sp, #8]
   128fc:	str	r0, [sp, #4]
   12900:	beq	12940 <main@@Base+0x394>
   12904:	ldr	r0, [sp, #8]
   12908:	ldr	r1, [sp, #4]
   1290c:	add	r2, r0, r1, lsl #2
   12910:	ldr	r2, [r2]
   12914:	movw	r3, #0
   12918:	cmp	r2, r3
   1291c:	str	r2, [sp]
   12920:	beq	12940 <main@@Base+0x394>
   12924:	ldr	r0, [sp]
   12928:	ldr	r1, [r0]
   1292c:	ldr	r2, [r0, #4]
   12930:	adds	r1, r1, #1
   12934:	adc	r2, r2, #0
   12938:	str	r1, [r0]
   1293c:	str	r2, [r0, #4]
   12940:	add	sp, sp, #12
   12944:	bx	lr
   12948:	push	{r4, sl, fp, lr}
   1294c:	add	fp, sp, #8
   12950:	sub	sp, sp, #40	; 0x28
   12954:	movw	r0, #0
   12958:	str	r0, [fp, #-12]
   1295c:	b	12960 <main@@Base+0x3b4>
   12960:	ldr	r0, [fp, #-12]
   12964:	ldr	r1, [pc, #244]	; 12a60 <main@@Base+0x4b4>
   12968:	add	r1, pc, r1
   1296c:	movw	r2, #24
   12970:	mul	r2, r0, r2
   12974:	add	r1, r1, r2
   12978:	ldr	r2, [r1]
   1297c:	ldr	r3, [r1, #4]
   12980:	ldr	ip, [r1, #8]
   12984:	str	r0, [fp, #-16]
   12988:	mov	r0, r2
   1298c:	str	r1, [fp, #-20]	; 0xffffffec
   12990:	mov	r1, r3
   12994:	mov	r2, ip
   12998:	bl	1b58c <__generate_code_for_binary_boolean_expression@@Base+0xa10>
   1299c:	ldr	r0, [fp, #-20]	; 0xffffffec
   129a0:	ldr	r1, [r0, #12]
   129a4:	ldr	r2, [r0, #16]
   129a8:	ldr	r3, [r0, #20]
   129ac:	movw	ip, #0
   129b0:	cmp	ip, r1
   129b4:	str	r1, [sp, #24]
   129b8:	str	r2, [sp, #20]
   129bc:	str	r3, [sp, #16]
   129c0:	str	ip, [sp, #12]
   129c4:	bge	12a3c <main@@Base+0x490>
   129c8:	ldr	r0, [sp, #12]
   129cc:	add	r1, r0, r0, lsl #2
   129d0:	ldr	r2, [sp, #20]
   129d4:	ldr	r1, [r2, r1, lsl #2]!
   129d8:	ldr	r3, [r2, #4]
   129dc:	ldr	ip, [r2, #8]
   129e0:	ldr	lr, [r2, #16]
   129e4:	ldrb	r2, [r2, #12]
   129e8:	mov	r4, sp
   129ec:	str	lr, [r4]
   129f0:	str	r0, [sp, #8]
   129f4:	mov	r0, r1
   129f8:	mov	r1, r3
   129fc:	str	r2, [sp, #4]
   12a00:	mov	r2, ip
   12a04:	ldr	r3, [sp, #4]
   12a08:	bl	1bcf0 <__generate_code_for_binary_boolean_expression@@Base+0x1174>
   12a0c:	ldr	r0, [sp, #16]
   12a10:	ldr	r1, [sp, #8]
   12a14:	add	r2, r0, r1, lsl #3
   12a18:	ldr	r0, [r2]
   12a1c:	ldr	r1, [r2, #4]
   12a20:	bl	1c5a4 <__generate_code_for_binary_boolean_expression@@Base+0x1a28>
   12a24:	ldr	r0, [sp, #8]
   12a28:	add	r1, r0, #1
   12a2c:	ldr	r2, [sp, #24]
   12a30:	cmp	r1, r2
   12a34:	str	r1, [sp, #12]
   12a38:	blt	129c8 <main@@Base+0x41c>
   12a3c:	bl	1cd20 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   12a40:	bl	1da8c <__generate_code_for_binary_boolean_expression@@Base+0x2f10>
   12a44:	ldr	lr, [fp, #-16]
   12a48:	add	r0, lr, #1
   12a4c:	cmp	r0, #1
   12a50:	str	r0, [fp, #-12]
   12a54:	blt	12960 <main@@Base+0x3b4>
   12a58:	sub	sp, fp, #8
   12a5c:	pop	{r4, sl, fp, pc}
   12a60:	andeq	sp, r1, r0, lsr #23
   12a64:	push	{fp, lr}
   12a68:	mov	fp, sp
   12a6c:	bl	12948 <main@@Base+0x39c>
   12a70:	ldr	lr, [pc, #272]	; 12b88 <main@@Base+0x5dc>
   12a74:	add	lr, pc, lr
   12a78:	mov	r0, #0
   12a7c:	str	r0, [lr, #108]	; 0x6c
   12a80:	str	r0, [lr, #104]	; 0x68
   12a84:	str	r0, [lr, #100]	; 0x64
   12a88:	str	r0, [lr, #96]	; 0x60
   12a8c:	str	r0, [lr, #92]	; 0x5c
   12a90:	str	r0, [lr, #88]	; 0x58
   12a94:	str	r0, [lr, #84]	; 0x54
   12a98:	str	r0, [lr, #80]	; 0x50
   12a9c:	str	r0, [lr, #76]	; 0x4c
   12aa0:	str	r0, [lr, #72]	; 0x48
   12aa4:	str	r0, [lr, #68]	; 0x44
   12aa8:	str	r0, [lr, #64]	; 0x40
   12aac:	str	r0, [lr, #60]	; 0x3c
   12ab0:	str	r0, [lr, #56]	; 0x38
   12ab4:	str	r0, [lr, #52]	; 0x34
   12ab8:	str	r0, [lr, #48]	; 0x30
   12abc:	str	r0, [lr, #44]	; 0x2c
   12ac0:	str	r0, [lr, #40]	; 0x28
   12ac4:	str	r0, [lr, #36]	; 0x24
   12ac8:	str	r0, [lr, #32]
   12acc:	str	r0, [lr, #28]
   12ad0:	str	r0, [lr, #24]
   12ad4:	str	r0, [lr, #20]
   12ad8:	str	r0, [lr, #16]
   12adc:	str	r0, [lr, #12]
   12ae0:	str	r0, [lr, #8]
   12ae4:	str	r0, [lr, #4]
   12ae8:	str	r0, [lr]
   12aec:	ldr	lr, [pc, #152]	; 12b8c <main@@Base+0x5e0>
   12af0:	add	lr, pc, lr
   12af4:	str	r0, [lr, #12]
   12af8:	str	r0, [lr, #8]
   12afc:	str	r0, [lr, #4]
   12b00:	str	r0, [lr]
   12b04:	ldr	lr, [pc, #132]	; 12b90 <main@@Base+0x5e4>
   12b08:	add	lr, pc, lr
   12b0c:	str	r0, [lr, #116]	; 0x74
   12b10:	str	r0, [lr, #112]	; 0x70
   12b14:	str	r0, [lr, #108]	; 0x6c
   12b18:	str	r0, [lr, #104]	; 0x68
   12b1c:	str	r0, [lr, #100]	; 0x64
   12b20:	str	r0, [lr, #96]	; 0x60
   12b24:	str	r0, [lr, #92]	; 0x5c
   12b28:	str	r0, [lr, #88]	; 0x58
   12b2c:	str	r0, [lr, #84]	; 0x54
   12b30:	str	r0, [lr, #80]	; 0x50
   12b34:	str	r0, [lr, #76]	; 0x4c
   12b38:	str	r0, [lr, #72]	; 0x48
   12b3c:	str	r0, [lr, #68]	; 0x44
   12b40:	str	r0, [lr, #64]	; 0x40
   12b44:	str	r0, [lr, #60]	; 0x3c
   12b48:	str	r0, [lr, #56]	; 0x38
   12b4c:	str	r0, [lr, #52]	; 0x34
   12b50:	str	r0, [lr, #48]	; 0x30
   12b54:	str	r0, [lr, #44]	; 0x2c
   12b58:	str	r0, [lr, #40]	; 0x28
   12b5c:	str	r0, [lr, #36]	; 0x24
   12b60:	str	r0, [lr, #32]
   12b64:	str	r0, [lr, #28]
   12b68:	str	r0, [lr, #24]
   12b6c:	str	r0, [lr, #20]
   12b70:	str	r0, [lr, #16]
   12b74:	str	r0, [lr, #12]
   12b78:	str	r0, [lr, #8]
   12b7c:	str	r0, [lr, #4]
   12b80:	str	r0, [lr]
   12b84:	pop	{fp, pc}
   12b88:	andeq	lr, r1, r4, lsr #13
   12b8c:	muleq	r1, r8, r6
   12b90:	muleq	r1, r0, r6
   12b94:	push	{fp, lr}
   12b98:	mov	fp, sp
   12b9c:	ldr	r0, [pc, #16]	; 12bb4 <main@@Base+0x608>
   12ba0:	add	r0, pc, r0
   12ba4:	ldr	r1, [pc, #12]	; 12bb8 <main@@Base+0x60c>
   12ba8:	add	r1, pc, r1
   12bac:	bl	1df3c <__gcov_flush@@Base+0xb4>
   12bb0:	pop	{fp, pc}
   12bb4:			; <UNDEFINED> instruction: 0xfffffda0
   12bb8:			; <UNDEFINED> instruction: 0xfffffeb4

00012bbc <init_token_int_type@@Base>:
   12bbc:	sub	sp, sp, #8
   12bc0:	ldr	r1, [pc, #92]	; 12c24 <init_token_int_type@@Base+0x68>
   12bc4:	add	r1, pc, r1
   12bc8:	ldr	r2, [r1, #4]
   12bcc:	ldr	r3, [pc, #84]	; 12c28 <init_token_int_type@@Base+0x6c>
   12bd0:	ldr	r3, [pc, r3]
   12bd4:	adds	r3, r3, #1
   12bd8:	adc	r2, r2, #0
   12bdc:	str	r3, [r1]
   12be0:	str	r2, [r1, #4]
   12be4:	str	r0, [sp]
   12be8:	ldr	r0, [pc, #60]	; 12c2c <init_token_int_type@@Base+0x70>
   12bec:	add	r0, pc, r0
   12bf0:	ldr	r1, [r0, #8]
   12bf4:	ldr	r2, [r0, #12]
   12bf8:	adds	r1, r1, #1
   12bfc:	adc	r2, r2, #0
   12c00:	str	r1, [r0, #8]
   12c04:	str	r2, [r0, #12]
   12c08:	ldr	r0, [sp]
   12c0c:	str	r0, [sp, #4]
   12c10:	ldr	r1, [sp, #4]
   12c14:	movw	r2, #0
   12c18:	str	r2, [r1]
   12c1c:	add	sp, sp, #8
   12c20:	bx	lr
   12c24:	andeq	lr, r1, r4, asr r6
   12c28:	andeq	lr, r1, r8, asr #12
   12c2c:	andeq	lr, r1, ip, lsr #12

00012c30 <init_token_int_value@@Base>:
   12c30:	sub	sp, sp, #16
   12c34:	ldr	r2, [pc, #116]	; 12cb0 <init_token_int_value@@Base+0x80>
   12c38:	add	r2, pc, r2
   12c3c:	ldr	r3, [r2, #4]
   12c40:	ldr	ip, [pc, #108]	; 12cb4 <init_token_int_value@@Base+0x84>
   12c44:	ldr	ip, [pc, ip]
   12c48:	adds	ip, ip, #1
   12c4c:	adc	r3, r3, #0
   12c50:	str	ip, [r2]
   12c54:	str	r3, [r2, #4]
   12c58:	str	r0, [sp, #4]
   12c5c:	str	r1, [sp]
   12c60:	ldr	r0, [pc, #80]	; 12cb8 <init_token_int_value@@Base+0x88>
   12c64:	add	r0, pc, r0
   12c68:	ldr	r1, [r0, #8]
   12c6c:	ldr	r2, [r0, #12]
   12c70:	adds	r1, r1, #1
   12c74:	adc	r2, r2, #0
   12c78:	str	r1, [r0, #8]
   12c7c:	str	r2, [r0, #12]
   12c80:	ldr	r0, [sp, #4]
   12c84:	str	r0, [sp, #12]
   12c88:	ldr	r1, [sp]
   12c8c:	str	r1, [sp, #8]
   12c90:	ldr	r2, [sp, #12]
   12c94:	movw	r3, #1
   12c98:	str	r3, [r2]
   12c9c:	ldr	r2, [sp, #8]
   12ca0:	ldr	r3, [sp, #12]
   12ca4:	str	r2, [r3, #4]
   12ca8:	add	sp, sp, #16
   12cac:	bx	lr
   12cb0:	strdeq	lr, [r1], -r0
   12cb4:	andeq	lr, r1, r4, ror #11
   12cb8:	andeq	lr, r1, r4, asr #11

00012cbc <init_token_function@@Base>:
   12cbc:	sub	sp, sp, #16
   12cc0:	ldr	r2, [pc, #116]	; 12d3c <init_token_function@@Base+0x80>
   12cc4:	add	r2, pc, r2
   12cc8:	ldr	r3, [r2, #4]
   12ccc:	ldr	ip, [pc, #108]	; 12d40 <init_token_function@@Base+0x84>
   12cd0:	ldr	ip, [pc, ip]
   12cd4:	adds	ip, ip, #1
   12cd8:	adc	r3, r3, #0
   12cdc:	str	ip, [r2]
   12ce0:	str	r3, [r2, #4]
   12ce4:	str	r0, [sp, #4]
   12ce8:	str	r1, [sp]
   12cec:	ldr	r0, [pc, #80]	; 12d44 <init_token_function@@Base+0x88>
   12cf0:	add	r0, pc, r0
   12cf4:	ldr	r1, [r0, #8]
   12cf8:	ldr	r2, [r0, #12]
   12cfc:	adds	r1, r1, #1
   12d00:	adc	r2, r2, #0
   12d04:	str	r1, [r0, #8]
   12d08:	str	r2, [r0, #12]
   12d0c:	ldr	r0, [sp, #4]
   12d10:	str	r0, [sp, #12]
   12d14:	ldr	r1, [sp]
   12d18:	str	r1, [sp, #8]
   12d1c:	ldr	r2, [sp, #12]
   12d20:	movw	r3, #2
   12d24:	str	r3, [r2]
   12d28:	ldr	r2, [sp, #8]
   12d2c:	ldr	r3, [sp, #12]
   12d30:	str	r2, [r3, #4]
   12d34:	add	sp, sp, #16
   12d38:	bx	lr
   12d3c:	andeq	lr, r1, r4, ror r5
   12d40:	andeq	lr, r1, r8, ror #10
   12d44:	andeq	lr, r1, r8, asr #10

00012d48 <init_token_opar@@Base>:
   12d48:	sub	sp, sp, #8
   12d4c:	ldr	r1, [pc, #92]	; 12db0 <init_token_opar@@Base+0x68>
   12d50:	add	r1, pc, r1
   12d54:	ldr	r2, [r1, #4]
   12d58:	ldr	r3, [pc, #84]	; 12db4 <init_token_opar@@Base+0x6c>
   12d5c:	ldr	r3, [pc, r3]
   12d60:	adds	r3, r3, #1
   12d64:	adc	r2, r2, #0
   12d68:	str	r3, [r1]
   12d6c:	str	r2, [r1, #4]
   12d70:	str	r0, [sp]
   12d74:	ldr	r0, [pc, #60]	; 12db8 <init_token_opar@@Base+0x70>
   12d78:	add	r0, pc, r0
   12d7c:	ldr	r1, [r0, #8]
   12d80:	ldr	r2, [r0, #12]
   12d84:	adds	r1, r1, #1
   12d88:	adc	r2, r2, #0
   12d8c:	str	r1, [r0, #8]
   12d90:	str	r2, [r0, #12]
   12d94:	ldr	r0, [sp]
   12d98:	str	r0, [sp, #4]
   12d9c:	ldr	r1, [sp, #4]
   12da0:	movw	r2, #3
   12da4:	str	r2, [r1]
   12da8:	add	sp, sp, #8
   12dac:	bx	lr
   12db0:	strdeq	lr, [r1], -r8
   12db4:	andeq	lr, r1, ip, ror #9
   12db8:	ldrdeq	lr, [r1], -r0

00012dbc <init_token_cpar@@Base>:
   12dbc:	sub	sp, sp, #8
   12dc0:	ldr	r1, [pc, #92]	; 12e24 <init_token_cpar@@Base+0x68>
   12dc4:	add	r1, pc, r1
   12dc8:	ldr	r2, [r1, #4]
   12dcc:	ldr	r3, [pc, #84]	; 12e28 <init_token_cpar@@Base+0x6c>
   12dd0:	ldr	r3, [pc, r3]
   12dd4:	adds	r3, r3, #1
   12dd8:	adc	r2, r2, #0
   12ddc:	str	r3, [r1]
   12de0:	str	r2, [r1, #4]
   12de4:	str	r0, [sp]
   12de8:	ldr	r0, [pc, #60]	; 12e2c <init_token_cpar@@Base+0x70>
   12dec:	add	r0, pc, r0
   12df0:	ldr	r1, [r0, #8]
   12df4:	ldr	r2, [r0, #12]
   12df8:	adds	r1, r1, #1
   12dfc:	adc	r2, r2, #0
   12e00:	str	r1, [r0, #8]
   12e04:	str	r2, [r0, #12]
   12e08:	ldr	r0, [sp]
   12e0c:	str	r0, [sp, #4]
   12e10:	ldr	r1, [sp, #4]
   12e14:	movw	r2, #4
   12e18:	str	r2, [r1]
   12e1c:	add	sp, sp, #8
   12e20:	bx	lr
   12e24:	muleq	r1, r4, r4
   12e28:	andeq	lr, r1, r8, lsl #9
   12e2c:	andeq	lr, r1, ip, ror #8

00012e30 <init_token_obra@@Base>:
   12e30:	sub	sp, sp, #8
   12e34:	ldr	r1, [pc, #92]	; 12e98 <init_token_obra@@Base+0x68>
   12e38:	add	r1, pc, r1
   12e3c:	ldr	r2, [r1, #4]
   12e40:	ldr	r3, [pc, #84]	; 12e9c <init_token_obra@@Base+0x6c>
   12e44:	ldr	r3, [pc, r3]
   12e48:	adds	r3, r3, #1
   12e4c:	adc	r2, r2, #0
   12e50:	str	r3, [r1]
   12e54:	str	r2, [r1, #4]
   12e58:	str	r0, [sp]
   12e5c:	ldr	r0, [pc, #60]	; 12ea0 <init_token_obra@@Base+0x70>
   12e60:	add	r0, pc, r0
   12e64:	ldr	r1, [r0, #8]
   12e68:	ldr	r2, [r0, #12]
   12e6c:	adds	r1, r1, #1
   12e70:	adc	r2, r2, #0
   12e74:	str	r1, [r0, #8]
   12e78:	str	r2, [r0, #12]
   12e7c:	ldr	r0, [sp]
   12e80:	str	r0, [sp, #4]
   12e84:	ldr	r1, [sp, #4]
   12e88:	movw	r2, #5
   12e8c:	str	r2, [r1]
   12e90:	add	sp, sp, #8
   12e94:	bx	lr
   12e98:	andeq	lr, r1, r0, lsr r4
   12e9c:	andeq	lr, r1, r4, lsr #8
   12ea0:	andeq	lr, r1, r8, lsl #8

00012ea4 <init_token_cbra@@Base>:
   12ea4:	sub	sp, sp, #8
   12ea8:	ldr	r1, [pc, #92]	; 12f0c <init_token_cbra@@Base+0x68>
   12eac:	add	r1, pc, r1
   12eb0:	ldr	r2, [r1, #4]
   12eb4:	ldr	r3, [pc, #84]	; 12f10 <init_token_cbra@@Base+0x6c>
   12eb8:	ldr	r3, [pc, r3]
   12ebc:	adds	r3, r3, #1
   12ec0:	adc	r2, r2, #0
   12ec4:	str	r3, [r1]
   12ec8:	str	r2, [r1, #4]
   12ecc:	str	r0, [sp]
   12ed0:	ldr	r0, [pc, #60]	; 12f14 <init_token_cbra@@Base+0x70>
   12ed4:	add	r0, pc, r0
   12ed8:	ldr	r1, [r0, #8]
   12edc:	ldr	r2, [r0, #12]
   12ee0:	adds	r1, r1, #1
   12ee4:	adc	r2, r2, #0
   12ee8:	str	r1, [r0, #8]
   12eec:	str	r2, [r0, #12]
   12ef0:	ldr	r0, [sp]
   12ef4:	str	r0, [sp, #4]
   12ef8:	ldr	r1, [sp, #4]
   12efc:	movw	r2, #6
   12f00:	str	r2, [r1]
   12f04:	add	sp, sp, #8
   12f08:	bx	lr
   12f0c:	andeq	lr, r1, ip, asr #7
   12f10:	andeq	lr, r1, r0, asr #7
   12f14:	andeq	lr, r1, r4, lsr #7

00012f18 <init_token_return@@Base>:
   12f18:	sub	sp, sp, #8
   12f1c:	ldr	r1, [pc, #92]	; 12f80 <init_token_return@@Base+0x68>
   12f20:	add	r1, pc, r1
   12f24:	ldr	r2, [r1, #4]
   12f28:	ldr	r3, [pc, #84]	; 12f84 <init_token_return@@Base+0x6c>
   12f2c:	ldr	r3, [pc, r3]
   12f30:	adds	r3, r3, #1
   12f34:	adc	r2, r2, #0
   12f38:	str	r3, [r1]
   12f3c:	str	r2, [r1, #4]
   12f40:	str	r0, [sp]
   12f44:	ldr	r0, [pc, #60]	; 12f88 <init_token_return@@Base+0x70>
   12f48:	add	r0, pc, r0
   12f4c:	ldr	r1, [r0, #8]
   12f50:	ldr	r2, [r0, #12]
   12f54:	adds	r1, r1, #1
   12f58:	adc	r2, r2, #0
   12f5c:	str	r1, [r0, #8]
   12f60:	str	r2, [r0, #12]
   12f64:	ldr	r0, [sp]
   12f68:	str	r0, [sp, #4]
   12f6c:	ldr	r1, [sp, #4]
   12f70:	movw	r2, #7
   12f74:	str	r2, [r1]
   12f78:	add	sp, sp, #8
   12f7c:	bx	lr
   12f80:	andeq	lr, r1, r8, ror #6
   12f84:	andeq	lr, r1, ip, asr r3
   12f88:	andeq	lr, r1, r0, asr #6

00012f8c <init_token_semicolon@@Base>:
   12f8c:	sub	sp, sp, #8
   12f90:	ldr	r1, [pc, #92]	; 12ff4 <init_token_semicolon@@Base+0x68>
   12f94:	add	r1, pc, r1
   12f98:	ldr	r2, [r1, #4]
   12f9c:	ldr	r3, [pc, #84]	; 12ff8 <init_token_semicolon@@Base+0x6c>
   12fa0:	ldr	r3, [pc, r3]
   12fa4:	adds	r3, r3, #1
   12fa8:	adc	r2, r2, #0
   12fac:	str	r3, [r1]
   12fb0:	str	r2, [r1, #4]
   12fb4:	str	r0, [sp]
   12fb8:	ldr	r0, [pc, #60]	; 12ffc <init_token_semicolon@@Base+0x70>
   12fbc:	add	r0, pc, r0
   12fc0:	ldr	r1, [r0, #8]
   12fc4:	ldr	r2, [r0, #12]
   12fc8:	adds	r1, r1, #1
   12fcc:	adc	r2, r2, #0
   12fd0:	str	r1, [r0, #8]
   12fd4:	str	r2, [r0, #12]
   12fd8:	ldr	r0, [sp]
   12fdc:	str	r0, [sp, #4]
   12fe0:	ldr	r1, [sp, #4]
   12fe4:	movw	r2, #8
   12fe8:	str	r2, [r1]
   12fec:	add	sp, sp, #8
   12ff0:	bx	lr
   12ff4:	andeq	lr, r1, r4, lsl #6
   12ff8:	strdeq	lr, [r1], -r8
   12ffc:	ldrdeq	lr, [r1], -ip

00013000 <init_token_eof@@Base>:
   13000:	sub	sp, sp, #8
   13004:	ldr	r1, [pc, #92]	; 13068 <init_token_eof@@Base+0x68>
   13008:	add	r1, pc, r1
   1300c:	ldr	r2, [r1, #4]
   13010:	ldr	r3, [pc, #84]	; 1306c <init_token_eof@@Base+0x6c>
   13014:	ldr	r3, [pc, r3]
   13018:	adds	r3, r3, #1
   1301c:	adc	r2, r2, #0
   13020:	str	r3, [r1]
   13024:	str	r2, [r1, #4]
   13028:	str	r0, [sp]
   1302c:	ldr	r0, [pc, #60]	; 13070 <init_token_eof@@Base+0x70>
   13030:	add	r0, pc, r0
   13034:	ldr	r1, [r0, #8]
   13038:	ldr	r2, [r0, #12]
   1303c:	adds	r1, r1, #1
   13040:	adc	r2, r2, #0
   13044:	str	r1, [r0, #8]
   13048:	str	r2, [r0, #12]
   1304c:	ldr	r0, [sp]
   13050:	str	r0, [sp, #4]
   13054:	ldr	r1, [sp, #4]
   13058:	movw	r2, #9
   1305c:	str	r2, [r1]
   13060:	add	sp, sp, #8
   13064:	bx	lr
   13068:	andeq	lr, r1, r0, lsr #5
   1306c:	muleq	r1, r4, r2
   13070:	andeq	lr, r1, r8, ror r2

00013074 <init_token_if@@Base>:
   13074:	sub	sp, sp, #8
   13078:	ldr	r1, [pc, #92]	; 130dc <init_token_if@@Base+0x68>
   1307c:	add	r1, pc, r1
   13080:	ldr	r2, [r1, #4]
   13084:	ldr	r3, [pc, #84]	; 130e0 <init_token_if@@Base+0x6c>
   13088:	ldr	r3, [pc, r3]
   1308c:	adds	r3, r3, #1
   13090:	adc	r2, r2, #0
   13094:	str	r3, [r1]
   13098:	str	r2, [r1, #4]
   1309c:	str	r0, [sp]
   130a0:	ldr	r0, [pc, #60]	; 130e4 <init_token_if@@Base+0x70>
   130a4:	add	r0, pc, r0
   130a8:	ldr	r1, [r0, #8]
   130ac:	ldr	r2, [r0, #12]
   130b0:	adds	r1, r1, #1
   130b4:	adc	r2, r2, #0
   130b8:	str	r1, [r0, #8]
   130bc:	str	r2, [r0, #12]
   130c0:	ldr	r0, [sp]
   130c4:	str	r0, [sp, #4]
   130c8:	ldr	r1, [sp, #4]
   130cc:	movw	r2, #10
   130d0:	str	r2, [r1]
   130d4:	add	sp, sp, #8
   130d8:	bx	lr
   130dc:	andeq	lr, r1, ip, lsr r2
   130e0:	andeq	lr, r1, r0, lsr r2
   130e4:	andeq	lr, r1, r4, lsl r2

000130e8 <init_token_else@@Base>:
   130e8:	sub	sp, sp, #8
   130ec:	ldr	r1, [pc, #92]	; 13150 <init_token_else@@Base+0x68>
   130f0:	add	r1, pc, r1
   130f4:	ldr	r2, [r1, #4]
   130f8:	ldr	r3, [pc, #84]	; 13154 <init_token_else@@Base+0x6c>
   130fc:	ldr	r3, [pc, r3]
   13100:	adds	r3, r3, #1
   13104:	adc	r2, r2, #0
   13108:	str	r3, [r1]
   1310c:	str	r2, [r1, #4]
   13110:	str	r0, [sp]
   13114:	ldr	r0, [pc, #60]	; 13158 <init_token_else@@Base+0x70>
   13118:	add	r0, pc, r0
   1311c:	ldr	r1, [r0, #8]
   13120:	ldr	r2, [r0, #12]
   13124:	adds	r1, r1, #1
   13128:	adc	r2, r2, #0
   1312c:	str	r1, [r0, #8]
   13130:	str	r2, [r0, #12]
   13134:	ldr	r0, [sp]
   13138:	str	r0, [sp, #4]
   1313c:	ldr	r1, [sp, #4]
   13140:	movw	r2, #11
   13144:	str	r2, [r1]
   13148:	add	sp, sp, #8
   1314c:	bx	lr
   13150:	ldrdeq	lr, [r1], -r8
   13154:	andeq	lr, r1, ip, asr #3
   13158:			; <UNDEFINED> instruction: 0x0001e1b0

0001315c <init_token_boolean_op@@Base>:
   1315c:	sub	sp, sp, #16
   13160:	ldr	r2, [pc, #116]	; 131dc <init_token_boolean_op@@Base+0x80>
   13164:	add	r2, pc, r2
   13168:	ldr	r3, [r2, #4]
   1316c:	ldr	ip, [pc, #108]	; 131e0 <init_token_boolean_op@@Base+0x84>
   13170:	ldr	ip, [pc, ip]
   13174:	adds	ip, ip, #1
   13178:	adc	r3, r3, #0
   1317c:	str	ip, [r2]
   13180:	str	r3, [r2, #4]
   13184:	str	r0, [sp, #4]
   13188:	str	r1, [sp]
   1318c:	ldr	r0, [pc, #80]	; 131e4 <init_token_boolean_op@@Base+0x88>
   13190:	add	r0, pc, r0
   13194:	ldr	r1, [r0, #8]
   13198:	ldr	r2, [r0, #12]
   1319c:	adds	r1, r1, #1
   131a0:	adc	r2, r2, #0
   131a4:	str	r1, [r0, #8]
   131a8:	str	r2, [r0, #12]
   131ac:	ldr	r0, [sp, #4]
   131b0:	str	r0, [sp, #12]
   131b4:	ldr	r1, [sp]
   131b8:	str	r1, [sp, #8]
   131bc:	ldr	r2, [sp, #12]
   131c0:	movw	r3, #12
   131c4:	str	r3, [r2]
   131c8:	ldr	r2, [sp, #8]
   131cc:	ldr	r3, [sp, #12]
   131d0:	str	r2, [r3, #4]
   131d4:	add	sp, sp, #16
   131d8:	bx	lr
   131dc:	andeq	lr, r1, r4, ror r1
   131e0:	andeq	lr, r1, r8, ror #2
   131e4:	andeq	lr, r1, r8, asr #2

000131e8 <free_token_int_type@@Base>:
   131e8:	push	{fp, lr}
   131ec:	mov	fp, sp
   131f0:	sub	sp, sp, #8
   131f4:	ldr	r1, [pc, #92]	; 13258 <free_token_int_type@@Base+0x70>
   131f8:	add	r1, pc, r1
   131fc:	ldr	r2, [r1, #4]
   13200:	ldr	r3, [pc, #84]	; 1325c <free_token_int_type@@Base+0x74>
   13204:	ldr	r3, [pc, r3]
   13208:	adds	r3, r3, #1
   1320c:	adc	r2, r2, #0
   13210:	str	r3, [r1]
   13214:	str	r2, [r1, #4]
   13218:	str	r0, [sp]
   1321c:	ldr	r0, [pc, #60]	; 13260 <free_token_int_type@@Base+0x78>
   13220:	add	r0, pc, r0
   13224:	ldr	r1, [r0, #8]
   13228:	ldr	r2, [r0, #12]
   1322c:	adds	r1, r1, #1
   13230:	adc	r2, r2, #0
   13234:	str	r1, [r0, #8]
   13238:	str	r2, [r0, #12]
   1323c:	ldr	r0, [sp]
   13240:	str	r0, [sp, #4]
   13244:	ldr	r1, [sp, #4]
   13248:	mov	r0, r1
   1324c:	bl	11ee4 <free@plt>
   13250:	mov	sp, fp
   13254:	pop	{fp, pc}
   13258:	strdeq	lr, [r1], -r0
   1325c:	andeq	lr, r1, r4, ror #1
   13260:	andeq	lr, r1, r8, asr #1

00013264 <free_token_int_value@@Base>:
   13264:	push	{fp, lr}
   13268:	mov	fp, sp
   1326c:	sub	sp, sp, #8
   13270:	ldr	r1, [pc, #92]	; 132d4 <free_token_int_value@@Base+0x70>
   13274:	add	r1, pc, r1
   13278:	ldr	r2, [r1, #4]
   1327c:	ldr	r3, [pc, #84]	; 132d8 <free_token_int_value@@Base+0x74>
   13280:	ldr	r3, [pc, r3]
   13284:	adds	r3, r3, #1
   13288:	adc	r2, r2, #0
   1328c:	str	r3, [r1]
   13290:	str	r2, [r1, #4]
   13294:	str	r0, [sp]
   13298:	ldr	r0, [pc, #60]	; 132dc <free_token_int_value@@Base+0x78>
   1329c:	add	r0, pc, r0
   132a0:	ldr	r1, [r0, #8]
   132a4:	ldr	r2, [r0, #12]
   132a8:	adds	r1, r1, #1
   132ac:	adc	r2, r2, #0
   132b0:	str	r1, [r0, #8]
   132b4:	str	r2, [r0, #12]
   132b8:	ldr	r0, [sp]
   132bc:	str	r0, [sp, #4]
   132c0:	ldr	r1, [sp, #4]
   132c4:	mov	r0, r1
   132c8:	bl	11ee4 <free@plt>
   132cc:	mov	sp, fp
   132d0:	pop	{fp, pc}
   132d4:	andeq	lr, r1, r4, lsl #1
   132d8:	andeq	lr, r1, r8, ror r0
   132dc:	andeq	lr, r1, ip, asr r0

000132e0 <free_token_function@@Base>:
   132e0:	push	{fp, lr}
   132e4:	mov	fp, sp
   132e8:	sub	sp, sp, #8
   132ec:	ldr	r1, [pc, #92]	; 13350 <free_token_function@@Base+0x70>
   132f0:	add	r1, pc, r1
   132f4:	ldr	r2, [r1, #4]
   132f8:	ldr	r3, [pc, #84]	; 13354 <free_token_function@@Base+0x74>
   132fc:	ldr	r3, [pc, r3]
   13300:	adds	r3, r3, #1
   13304:	adc	r2, r2, #0
   13308:	str	r3, [r1]
   1330c:	str	r2, [r1, #4]
   13310:	str	r0, [sp]
   13314:	ldr	r0, [pc, #60]	; 13358 <free_token_function@@Base+0x78>
   13318:	add	r0, pc, r0
   1331c:	ldr	r1, [r0, #8]
   13320:	ldr	r2, [r0, #12]
   13324:	adds	r1, r1, #1
   13328:	adc	r2, r2, #0
   1332c:	str	r1, [r0, #8]
   13330:	str	r2, [r0, #12]
   13334:	ldr	r0, [sp]
   13338:	str	r0, [sp, #4]
   1333c:	ldr	r1, [sp, #4]
   13340:	mov	r0, r1
   13344:	bl	11ee4 <free@plt>
   13348:	mov	sp, fp
   1334c:	pop	{fp, pc}
   13350:	andeq	lr, r1, r8, lsl r0
   13354:	andeq	lr, r1, ip
   13358:	strdeq	sp, [r1], -r0

0001335c <free_token_opar@@Base>:
   1335c:	push	{fp, lr}
   13360:	mov	fp, sp
   13364:	sub	sp, sp, #8
   13368:	ldr	r1, [pc, #92]	; 133cc <free_token_opar@@Base+0x70>
   1336c:	add	r1, pc, r1
   13370:	ldr	r2, [r1, #4]
   13374:	ldr	r3, [pc, #84]	; 133d0 <free_token_opar@@Base+0x74>
   13378:	ldr	r3, [pc, r3]
   1337c:	adds	r3, r3, #1
   13380:	adc	r2, r2, #0
   13384:	str	r3, [r1]
   13388:	str	r2, [r1, #4]
   1338c:	str	r0, [sp]
   13390:	ldr	r0, [pc, #60]	; 133d4 <free_token_opar@@Base+0x78>
   13394:	add	r0, pc, r0
   13398:	ldr	r1, [r0, #8]
   1339c:	ldr	r2, [r0, #12]
   133a0:	adds	r1, r1, #1
   133a4:	adc	r2, r2, #0
   133a8:	str	r1, [r0, #8]
   133ac:	str	r2, [r0, #12]
   133b0:	ldr	r0, [sp]
   133b4:	str	r0, [sp, #4]
   133b8:	ldr	r1, [sp, #4]
   133bc:	mov	r0, r1
   133c0:	bl	11ee4 <free@plt>
   133c4:	mov	sp, fp
   133c8:	pop	{fp, pc}
   133cc:	andeq	sp, r1, ip, lsr #31
   133d0:	andeq	sp, r1, r0, lsr #31
   133d4:	andeq	sp, r1, r4, lsl #31

000133d8 <free_token_cpar@@Base>:
   133d8:	push	{fp, lr}
   133dc:	mov	fp, sp
   133e0:	sub	sp, sp, #8
   133e4:	ldr	r1, [pc, #92]	; 13448 <free_token_cpar@@Base+0x70>
   133e8:	add	r1, pc, r1
   133ec:	ldr	r2, [r1, #4]
   133f0:	ldr	r3, [pc, #84]	; 1344c <free_token_cpar@@Base+0x74>
   133f4:	ldr	r3, [pc, r3]
   133f8:	adds	r3, r3, #1
   133fc:	adc	r2, r2, #0
   13400:	str	r3, [r1]
   13404:	str	r2, [r1, #4]
   13408:	str	r0, [sp]
   1340c:	ldr	r0, [pc, #60]	; 13450 <free_token_cpar@@Base+0x78>
   13410:	add	r0, pc, r0
   13414:	ldr	r1, [r0, #8]
   13418:	ldr	r2, [r0, #12]
   1341c:	adds	r1, r1, #1
   13420:	adc	r2, r2, #0
   13424:	str	r1, [r0, #8]
   13428:	str	r2, [r0, #12]
   1342c:	ldr	r0, [sp]
   13430:	str	r0, [sp, #4]
   13434:	ldr	r1, [sp, #4]
   13438:	mov	r0, r1
   1343c:	bl	11ee4 <free@plt>
   13440:	mov	sp, fp
   13444:	pop	{fp, pc}
   13448:	andeq	sp, r1, r0, asr #30
   1344c:	andeq	sp, r1, r4, lsr pc
   13450:	andeq	sp, r1, r8, lsl pc

00013454 <free_token_obra@@Base>:
   13454:	push	{fp, lr}
   13458:	mov	fp, sp
   1345c:	sub	sp, sp, #8
   13460:	ldr	r1, [pc, #92]	; 134c4 <free_token_obra@@Base+0x70>
   13464:	add	r1, pc, r1
   13468:	ldr	r2, [r1, #4]
   1346c:	ldr	r3, [pc, #84]	; 134c8 <free_token_obra@@Base+0x74>
   13470:	ldr	r3, [pc, r3]
   13474:	adds	r3, r3, #1
   13478:	adc	r2, r2, #0
   1347c:	str	r3, [r1]
   13480:	str	r2, [r1, #4]
   13484:	str	r0, [sp]
   13488:	ldr	r0, [pc, #60]	; 134cc <free_token_obra@@Base+0x78>
   1348c:	add	r0, pc, r0
   13490:	ldr	r1, [r0, #8]
   13494:	ldr	r2, [r0, #12]
   13498:	adds	r1, r1, #1
   1349c:	adc	r2, r2, #0
   134a0:	str	r1, [r0, #8]
   134a4:	str	r2, [r0, #12]
   134a8:	ldr	r0, [sp]
   134ac:	str	r0, [sp, #4]
   134b0:	ldr	r1, [sp, #4]
   134b4:	mov	r0, r1
   134b8:	bl	11ee4 <free@plt>
   134bc:	mov	sp, fp
   134c0:	pop	{fp, pc}
   134c4:	ldrdeq	sp, [r1], -r4
   134c8:	andeq	sp, r1, r8, asr #29
   134cc:	andeq	sp, r1, ip, lsr #29

000134d0 <free_token_cbra@@Base>:
   134d0:	push	{fp, lr}
   134d4:	mov	fp, sp
   134d8:	sub	sp, sp, #8
   134dc:	ldr	r1, [pc, #92]	; 13540 <free_token_cbra@@Base+0x70>
   134e0:	add	r1, pc, r1
   134e4:	ldr	r2, [r1, #4]
   134e8:	ldr	r3, [pc, #84]	; 13544 <free_token_cbra@@Base+0x74>
   134ec:	ldr	r3, [pc, r3]
   134f0:	adds	r3, r3, #1
   134f4:	adc	r2, r2, #0
   134f8:	str	r3, [r1]
   134fc:	str	r2, [r1, #4]
   13500:	str	r0, [sp]
   13504:	ldr	r0, [pc, #60]	; 13548 <free_token_cbra@@Base+0x78>
   13508:	add	r0, pc, r0
   1350c:	ldr	r1, [r0, #8]
   13510:	ldr	r2, [r0, #12]
   13514:	adds	r1, r1, #1
   13518:	adc	r2, r2, #0
   1351c:	str	r1, [r0, #8]
   13520:	str	r2, [r0, #12]
   13524:	ldr	r0, [sp]
   13528:	str	r0, [sp, #4]
   1352c:	ldr	r1, [sp, #4]
   13530:	mov	r0, r1
   13534:	bl	11ee4 <free@plt>
   13538:	mov	sp, fp
   1353c:	pop	{fp, pc}
   13540:	andeq	sp, r1, r8, ror #28
   13544:	andeq	sp, r1, ip, asr lr
   13548:	andeq	sp, r1, r0, asr #28

0001354c <free_token_return@@Base>:
   1354c:	push	{fp, lr}
   13550:	mov	fp, sp
   13554:	sub	sp, sp, #8
   13558:	ldr	r1, [pc, #92]	; 135bc <free_token_return@@Base+0x70>
   1355c:	add	r1, pc, r1
   13560:	ldr	r2, [r1, #4]
   13564:	ldr	r3, [pc, #84]	; 135c0 <free_token_return@@Base+0x74>
   13568:	ldr	r3, [pc, r3]
   1356c:	adds	r3, r3, #1
   13570:	adc	r2, r2, #0
   13574:	str	r3, [r1]
   13578:	str	r2, [r1, #4]
   1357c:	str	r0, [sp]
   13580:	ldr	r0, [pc, #60]	; 135c4 <free_token_return@@Base+0x78>
   13584:	add	r0, pc, r0
   13588:	ldr	r1, [r0, #8]
   1358c:	ldr	r2, [r0, #12]
   13590:	adds	r1, r1, #1
   13594:	adc	r2, r2, #0
   13598:	str	r1, [r0, #8]
   1359c:	str	r2, [r0, #12]
   135a0:	ldr	r0, [sp]
   135a4:	str	r0, [sp, #4]
   135a8:	ldr	r1, [sp, #4]
   135ac:	mov	r0, r1
   135b0:	bl	11ee4 <free@plt>
   135b4:	mov	sp, fp
   135b8:	pop	{fp, pc}
   135bc:	strdeq	sp, [r1], -ip
   135c0:	strdeq	sp, [r1], -r0
   135c4:	ldrdeq	sp, [r1], -r4

000135c8 <free_token_semicolon@@Base>:
   135c8:	push	{fp, lr}
   135cc:	mov	fp, sp
   135d0:	sub	sp, sp, #8
   135d4:	ldr	r1, [pc, #92]	; 13638 <free_token_semicolon@@Base+0x70>
   135d8:	add	r1, pc, r1
   135dc:	ldr	r2, [r1, #4]
   135e0:	ldr	r3, [pc, #84]	; 1363c <free_token_semicolon@@Base+0x74>
   135e4:	ldr	r3, [pc, r3]
   135e8:	adds	r3, r3, #1
   135ec:	adc	r2, r2, #0
   135f0:	str	r3, [r1]
   135f4:	str	r2, [r1, #4]
   135f8:	str	r0, [sp]
   135fc:	ldr	r0, [pc, #60]	; 13640 <free_token_semicolon@@Base+0x78>
   13600:	add	r0, pc, r0
   13604:	ldr	r1, [r0, #8]
   13608:	ldr	r2, [r0, #12]
   1360c:	adds	r1, r1, #1
   13610:	adc	r2, r2, #0
   13614:	str	r1, [r0, #8]
   13618:	str	r2, [r0, #12]
   1361c:	ldr	r0, [sp]
   13620:	str	r0, [sp, #4]
   13624:	ldr	r1, [sp, #4]
   13628:	mov	r0, r1
   1362c:	bl	11ee4 <free@plt>
   13630:	mov	sp, fp
   13634:	pop	{fp, pc}
   13638:	muleq	r1, r0, sp
   1363c:	andeq	sp, r1, r4, lsl #27
   13640:	andeq	sp, r1, r8, ror #26

00013644 <free_token_eof@@Base>:
   13644:	push	{fp, lr}
   13648:	mov	fp, sp
   1364c:	sub	sp, sp, #8
   13650:	ldr	r1, [pc, #92]	; 136b4 <free_token_eof@@Base+0x70>
   13654:	add	r1, pc, r1
   13658:	ldr	r2, [r1, #4]
   1365c:	ldr	r3, [pc, #84]	; 136b8 <free_token_eof@@Base+0x74>
   13660:	ldr	r3, [pc, r3]
   13664:	adds	r3, r3, #1
   13668:	adc	r2, r2, #0
   1366c:	str	r3, [r1]
   13670:	str	r2, [r1, #4]
   13674:	str	r0, [sp]
   13678:	ldr	r0, [pc, #60]	; 136bc <free_token_eof@@Base+0x78>
   1367c:	add	r0, pc, r0
   13680:	ldr	r1, [r0, #8]
   13684:	ldr	r2, [r0, #12]
   13688:	adds	r1, r1, #1
   1368c:	adc	r2, r2, #0
   13690:	str	r1, [r0, #8]
   13694:	str	r2, [r0, #12]
   13698:	ldr	r0, [sp]
   1369c:	str	r0, [sp, #4]
   136a0:	ldr	r1, [sp, #4]
   136a4:	mov	r0, r1
   136a8:	bl	11ee4 <free@plt>
   136ac:	mov	sp, fp
   136b0:	pop	{fp, pc}
   136b4:	andeq	sp, r1, r4, lsr #26
   136b8:	andeq	sp, r1, r8, lsl sp
   136bc:	strdeq	sp, [r1], -ip

000136c0 <free_token_if@@Base>:
   136c0:	push	{fp, lr}
   136c4:	mov	fp, sp
   136c8:	sub	sp, sp, #8
   136cc:	ldr	r1, [pc, #92]	; 13730 <free_token_if@@Base+0x70>
   136d0:	add	r1, pc, r1
   136d4:	ldr	r2, [r1, #4]
   136d8:	ldr	r3, [pc, #84]	; 13734 <free_token_if@@Base+0x74>
   136dc:	ldr	r3, [pc, r3]
   136e0:	adds	r3, r3, #1
   136e4:	adc	r2, r2, #0
   136e8:	str	r3, [r1]
   136ec:	str	r2, [r1, #4]
   136f0:	str	r0, [sp]
   136f4:	ldr	r0, [pc, #60]	; 13738 <free_token_if@@Base+0x78>
   136f8:	add	r0, pc, r0
   136fc:	ldr	r1, [r0, #8]
   13700:	ldr	r2, [r0, #12]
   13704:	adds	r1, r1, #1
   13708:	adc	r2, r2, #0
   1370c:	str	r1, [r0, #8]
   13710:	str	r2, [r0, #12]
   13714:	ldr	r0, [sp]
   13718:	str	r0, [sp, #4]
   1371c:	ldr	r1, [sp, #4]
   13720:	mov	r0, r1
   13724:	bl	11ee4 <free@plt>
   13728:	mov	sp, fp
   1372c:	pop	{fp, pc}
   13730:			; <UNDEFINED> instruction: 0x0001dcb8
   13734:	andeq	sp, r1, ip, lsr #25
   13738:	muleq	r1, r0, ip

0001373c <free_token_else@@Base>:
   1373c:	push	{fp, lr}
   13740:	mov	fp, sp
   13744:	sub	sp, sp, #8
   13748:	ldr	r1, [pc, #92]	; 137ac <free_token_else@@Base+0x70>
   1374c:	add	r1, pc, r1
   13750:	ldr	r2, [r1, #4]
   13754:	ldr	r3, [pc, #84]	; 137b0 <free_token_else@@Base+0x74>
   13758:	ldr	r3, [pc, r3]
   1375c:	adds	r3, r3, #1
   13760:	adc	r2, r2, #0
   13764:	str	r3, [r1]
   13768:	str	r2, [r1, #4]
   1376c:	str	r0, [sp]
   13770:	ldr	r0, [pc, #60]	; 137b4 <free_token_else@@Base+0x78>
   13774:	add	r0, pc, r0
   13778:	ldr	r1, [r0, #8]
   1377c:	ldr	r2, [r0, #12]
   13780:	adds	r1, r1, #1
   13784:	adc	r2, r2, #0
   13788:	str	r1, [r0, #8]
   1378c:	str	r2, [r0, #12]
   13790:	ldr	r0, [sp]
   13794:	str	r0, [sp, #4]
   13798:	ldr	r1, [sp, #4]
   1379c:	mov	r0, r1
   137a0:	bl	11ee4 <free@plt>
   137a4:	mov	sp, fp
   137a8:	pop	{fp, pc}
   137ac:	andeq	sp, r1, ip, asr #24
   137b0:	andeq	sp, r1, r0, asr #24
   137b4:	andeq	sp, r1, r4, lsr #24

000137b8 <free_token_boolean_op@@Base>:
   137b8:	push	{fp, lr}
   137bc:	mov	fp, sp
   137c0:	sub	sp, sp, #8
   137c4:	ldr	r1, [pc, #204]	; 13898 <free_token_boolean_op@@Base+0xe0>
   137c8:	add	r1, pc, r1
   137cc:	ldr	r2, [r1, #4]
   137d0:	ldr	r3, [pc, #196]	; 1389c <free_token_boolean_op@@Base+0xe4>
   137d4:	ldr	r3, [pc, r3]
   137d8:	adds	r3, r3, #1
   137dc:	adc	r2, r2, #0
   137e0:	str	r3, [r1]
   137e4:	str	r2, [r1, #4]
   137e8:	str	r0, [sp]
   137ec:	ldr	r0, [sp]
   137f0:	str	r0, [sp, #4]
   137f4:	ldr	r1, [sp, #4]
   137f8:	ldr	r1, [r1, #4]
   137fc:	cmp	r1, #0
   13800:	mov	r2, r1
   13804:	movwne	r2, #1
   13808:	mov	r3, #16
   1380c:	cmp	r1, #0
   13810:	movwne	r3, #8
   13814:	ldr	r1, [pc, #132]	; 138a0 <free_token_boolean_op@@Base+0xe8>
   13818:	add	r1, pc, r1
   1381c:	ldr	r3, [r1, r3]!
   13820:	ldr	ip, [r1, #4]
   13824:	adds	r3, r3, #1
   13828:	adc	ip, ip, #0
   1382c:	str	r3, [r1]
   13830:	str	ip, [r1, #4]
   13834:	tst	r2, #1
   13838:	beq	13868 <free_token_boolean_op@@Base+0xb0>
   1383c:	ldr	r0, [pc, #96]	; 138a4 <free_token_boolean_op@@Base+0xec>
   13840:	add	r0, pc, r0
   13844:	ldr	r1, [r0, #24]
   13848:	ldr	r2, [r0, #28]
   1384c:	adds	r1, r1, #1
   13850:	adc	r2, r2, #0
   13854:	str	r1, [r0, #24]
   13858:	str	r2, [r0, #28]
   1385c:	ldr	r0, [sp, #4]
   13860:	ldr	r0, [r0, #4]
   13864:	bl	11ee4 <free@plt>
   13868:	ldr	r0, [pc, #56]	; 138a8 <free_token_boolean_op@@Base+0xf0>
   1386c:	add	r0, pc, r0
   13870:	ldr	r1, [r0, #32]
   13874:	ldr	r2, [r0, #36]	; 0x24
   13878:	adds	r1, r1, #1
   1387c:	adc	r2, r2, #0
   13880:	str	r1, [r0, #32]
   13884:	str	r2, [r0, #36]	; 0x24
   13888:	ldr	r0, [sp, #4]
   1388c:	bl	11ee4 <free@plt>
   13890:	mov	sp, fp
   13894:	pop	{fp, pc}
   13898:	andeq	sp, r1, r0, ror #23
   1389c:	ldrdeq	sp, [r1], -r4
   138a0:	muleq	r1, r0, fp
   138a4:	andeq	sp, r1, r8, ror #22
   138a8:	andeq	sp, r1, ip, lsr fp
   138ac:	push	{r4, sl, fp, lr}
   138b0:	add	fp, sp, #8
   138b4:	sub	sp, sp, #40	; 0x28
   138b8:	movw	r0, #0
   138bc:	str	r0, [fp, #-12]
   138c0:	b	138c4 <free_token_boolean_op@@Base+0x10c>
   138c4:	ldr	r0, [fp, #-12]
   138c8:	ldr	r1, [pc, #244]	; 139c4 <free_token_boolean_op@@Base+0x20c>
   138cc:	add	r1, pc, r1
   138d0:	movw	r2, #24
   138d4:	mul	r2, r0, r2
   138d8:	add	r1, r1, r2
   138dc:	ldr	r2, [r1]
   138e0:	ldr	r3, [r1, #4]
   138e4:	ldr	ip, [r1, #8]
   138e8:	str	r0, [fp, #-16]
   138ec:	mov	r0, r2
   138f0:	str	r1, [fp, #-20]	; 0xffffffec
   138f4:	mov	r1, r3
   138f8:	mov	r2, ip
   138fc:	bl	1b58c <__generate_code_for_binary_boolean_expression@@Base+0xa10>
   13900:	ldr	r0, [fp, #-20]	; 0xffffffec
   13904:	ldr	r1, [r0, #12]
   13908:	ldr	r2, [r0, #16]
   1390c:	ldr	r3, [r0, #20]
   13910:	movw	ip, #0
   13914:	cmp	ip, r1
   13918:	str	r1, [sp, #24]
   1391c:	str	r2, [sp, #20]
   13920:	str	r3, [sp, #16]
   13924:	str	ip, [sp, #12]
   13928:	bge	139a0 <free_token_boolean_op@@Base+0x1e8>
   1392c:	ldr	r0, [sp, #12]
   13930:	add	r1, r0, r0, lsl #2
   13934:	ldr	r2, [sp, #20]
   13938:	ldr	r1, [r2, r1, lsl #2]!
   1393c:	ldr	r3, [r2, #4]
   13940:	ldr	ip, [r2, #8]
   13944:	ldr	lr, [r2, #16]
   13948:	ldrb	r2, [r2, #12]
   1394c:	mov	r4, sp
   13950:	str	lr, [r4]
   13954:	str	r0, [sp, #8]
   13958:	mov	r0, r1
   1395c:	mov	r1, r3
   13960:	str	r2, [sp, #4]
   13964:	mov	r2, ip
   13968:	ldr	r3, [sp, #4]
   1396c:	bl	1bcf0 <__generate_code_for_binary_boolean_expression@@Base+0x1174>
   13970:	ldr	r0, [sp, #16]
   13974:	ldr	r1, [sp, #8]
   13978:	add	r2, r0, r1, lsl #3
   1397c:	ldr	r0, [r2]
   13980:	ldr	r1, [r2, #4]
   13984:	bl	1c5a4 <__generate_code_for_binary_boolean_expression@@Base+0x1a28>
   13988:	ldr	r0, [sp, #8]
   1398c:	add	r1, r0, #1
   13990:	ldr	r2, [sp, #24]
   13994:	cmp	r1, r2
   13998:	str	r1, [sp, #12]
   1399c:	blt	1392c <free_token_boolean_op@@Base+0x174>
   139a0:	bl	1cd20 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   139a4:	bl	1da8c <__generate_code_for_binary_boolean_expression@@Base+0x2f10>
   139a8:	ldr	lr, [fp, #-16]
   139ac:	add	r0, lr, #1
   139b0:	cmp	r0, #1
   139b4:	str	r0, [fp, #-12]
   139b8:	blt	138c4 <free_token_boolean_op@@Base+0x10c>
   139bc:	sub	sp, fp, #8
   139c0:	pop	{r4, sl, fp, pc}
   139c4:	andeq	ip, r1, ip, lsr pc
   139c8:	push	{fp, lr}
   139cc:	mov	fp, sp
   139d0:	bl	138ac <free_token_boolean_op@@Base+0xf4>
   139d4:	ldr	lr, [pc, #648]	; 13c64 <free_token_boolean_op@@Base+0x4ac>
   139d8:	add	lr, pc, lr
   139dc:	mov	r0, #0
   139e0:	str	r0, [lr, #12]
   139e4:	str	r0, [lr, #8]
   139e8:	str	r0, [lr, #4]
   139ec:	str	r0, [lr]
   139f0:	ldr	lr, [pc, #624]	; 13c68 <free_token_boolean_op@@Base+0x4b0>
   139f4:	add	lr, pc, lr
   139f8:	str	r0, [lr, #12]
   139fc:	str	r0, [lr, #8]
   13a00:	str	r0, [lr, #4]
   13a04:	str	r0, [lr]
   13a08:	ldr	lr, [pc, #604]	; 13c6c <free_token_boolean_op@@Base+0x4b4>
   13a0c:	add	lr, pc, lr
   13a10:	str	r0, [lr, #12]
   13a14:	str	r0, [lr, #8]
   13a18:	str	r0, [lr, #4]
   13a1c:	str	r0, [lr]
   13a20:	ldr	lr, [pc, #584]	; 13c70 <free_token_boolean_op@@Base+0x4b8>
   13a24:	add	lr, pc, lr
   13a28:	str	r0, [lr, #12]
   13a2c:	str	r0, [lr, #8]
   13a30:	str	r0, [lr, #4]
   13a34:	str	r0, [lr]
   13a38:	ldr	lr, [pc, #564]	; 13c74 <free_token_boolean_op@@Base+0x4bc>
   13a3c:	add	lr, pc, lr
   13a40:	str	r0, [lr, #12]
   13a44:	str	r0, [lr, #8]
   13a48:	str	r0, [lr, #4]
   13a4c:	str	r0, [lr]
   13a50:	ldr	lr, [pc, #544]	; 13c78 <free_token_boolean_op@@Base+0x4c0>
   13a54:	add	lr, pc, lr
   13a58:	str	r0, [lr, #12]
   13a5c:	str	r0, [lr, #8]
   13a60:	str	r0, [lr, #4]
   13a64:	str	r0, [lr]
   13a68:	ldr	lr, [pc, #524]	; 13c7c <free_token_boolean_op@@Base+0x4c4>
   13a6c:	add	lr, pc, lr
   13a70:	str	r0, [lr, #12]
   13a74:	str	r0, [lr, #8]
   13a78:	str	r0, [lr, #4]
   13a7c:	str	r0, [lr]
   13a80:	ldr	lr, [pc, #504]	; 13c80 <free_token_boolean_op@@Base+0x4c8>
   13a84:	add	lr, pc, lr
   13a88:	str	r0, [lr, #12]
   13a8c:	str	r0, [lr, #8]
   13a90:	str	r0, [lr, #4]
   13a94:	str	r0, [lr]
   13a98:	ldr	lr, [pc, #484]	; 13c84 <free_token_boolean_op@@Base+0x4cc>
   13a9c:	add	lr, pc, lr
   13aa0:	str	r0, [lr, #12]
   13aa4:	str	r0, [lr, #8]
   13aa8:	str	r0, [lr, #4]
   13aac:	str	r0, [lr]
   13ab0:	ldr	lr, [pc, #464]	; 13c88 <free_token_boolean_op@@Base+0x4d0>
   13ab4:	add	lr, pc, lr
   13ab8:	str	r0, [lr, #12]
   13abc:	str	r0, [lr, #8]
   13ac0:	str	r0, [lr, #4]
   13ac4:	str	r0, [lr]
   13ac8:	ldr	lr, [pc, #444]	; 13c8c <free_token_boolean_op@@Base+0x4d4>
   13acc:	add	lr, pc, lr
   13ad0:	str	r0, [lr, #12]
   13ad4:	str	r0, [lr, #8]
   13ad8:	str	r0, [lr, #4]
   13adc:	str	r0, [lr]
   13ae0:	ldr	lr, [pc, #424]	; 13c90 <free_token_boolean_op@@Base+0x4d8>
   13ae4:	add	lr, pc, lr
   13ae8:	str	r0, [lr, #12]
   13aec:	str	r0, [lr, #8]
   13af0:	str	r0, [lr, #4]
   13af4:	str	r0, [lr]
   13af8:	ldr	lr, [pc, #404]	; 13c94 <free_token_boolean_op@@Base+0x4dc>
   13afc:	add	lr, pc, lr
   13b00:	str	r0, [lr, #12]
   13b04:	str	r0, [lr, #8]
   13b08:	str	r0, [lr, #4]
   13b0c:	str	r0, [lr]
   13b10:	ldr	lr, [pc, #384]	; 13c98 <free_token_boolean_op@@Base+0x4e0>
   13b14:	add	lr, pc, lr
   13b18:	str	r0, [lr, #12]
   13b1c:	str	r0, [lr, #8]
   13b20:	str	r0, [lr, #4]
   13b24:	str	r0, [lr]
   13b28:	ldr	lr, [pc, #364]	; 13c9c <free_token_boolean_op@@Base+0x4e4>
   13b2c:	add	lr, pc, lr
   13b30:	str	r0, [lr, #12]
   13b34:	str	r0, [lr, #8]
   13b38:	str	r0, [lr, #4]
   13b3c:	str	r0, [lr]
   13b40:	ldr	lr, [pc, #344]	; 13ca0 <free_token_boolean_op@@Base+0x4e8>
   13b44:	add	lr, pc, lr
   13b48:	str	r0, [lr, #12]
   13b4c:	str	r0, [lr, #8]
   13b50:	str	r0, [lr, #4]
   13b54:	str	r0, [lr]
   13b58:	ldr	lr, [pc, #324]	; 13ca4 <free_token_boolean_op@@Base+0x4ec>
   13b5c:	add	lr, pc, lr
   13b60:	str	r0, [lr, #12]
   13b64:	str	r0, [lr, #8]
   13b68:	str	r0, [lr, #4]
   13b6c:	str	r0, [lr]
   13b70:	ldr	lr, [pc, #304]	; 13ca8 <free_token_boolean_op@@Base+0x4f0>
   13b74:	add	lr, pc, lr
   13b78:	str	r0, [lr, #12]
   13b7c:	str	r0, [lr, #8]
   13b80:	str	r0, [lr, #4]
   13b84:	str	r0, [lr]
   13b88:	ldr	lr, [pc, #284]	; 13cac <free_token_boolean_op@@Base+0x4f4>
   13b8c:	add	lr, pc, lr
   13b90:	str	r0, [lr, #12]
   13b94:	str	r0, [lr, #8]
   13b98:	str	r0, [lr, #4]
   13b9c:	str	r0, [lr]
   13ba0:	ldr	lr, [pc, #264]	; 13cb0 <free_token_boolean_op@@Base+0x4f8>
   13ba4:	add	lr, pc, lr
   13ba8:	str	r0, [lr, #12]
   13bac:	str	r0, [lr, #8]
   13bb0:	str	r0, [lr, #4]
   13bb4:	str	r0, [lr]
   13bb8:	ldr	lr, [pc, #244]	; 13cb4 <free_token_boolean_op@@Base+0x4fc>
   13bbc:	add	lr, pc, lr
   13bc0:	str	r0, [lr, #12]
   13bc4:	str	r0, [lr, #8]
   13bc8:	str	r0, [lr, #4]
   13bcc:	str	r0, [lr]
   13bd0:	ldr	lr, [pc, #224]	; 13cb8 <free_token_boolean_op@@Base+0x500>
   13bd4:	add	lr, pc, lr
   13bd8:	str	r0, [lr, #12]
   13bdc:	str	r0, [lr, #8]
   13be0:	str	r0, [lr, #4]
   13be4:	str	r0, [lr]
   13be8:	ldr	lr, [pc, #204]	; 13cbc <free_token_boolean_op@@Base+0x504>
   13bec:	add	lr, pc, lr
   13bf0:	str	r0, [lr, #12]
   13bf4:	str	r0, [lr, #8]
   13bf8:	str	r0, [lr, #4]
   13bfc:	str	r0, [lr]
   13c00:	ldr	lr, [pc, #184]	; 13cc0 <free_token_boolean_op@@Base+0x508>
   13c04:	add	lr, pc, lr
   13c08:	str	r0, [lr, #12]
   13c0c:	str	r0, [lr, #8]
   13c10:	str	r0, [lr, #4]
   13c14:	str	r0, [lr]
   13c18:	ldr	lr, [pc, #164]	; 13cc4 <free_token_boolean_op@@Base+0x50c>
   13c1c:	add	lr, pc, lr
   13c20:	str	r0, [lr, #12]
   13c24:	str	r0, [lr, #8]
   13c28:	str	r0, [lr, #4]
   13c2c:	str	r0, [lr]
   13c30:	ldr	lr, [pc, #144]	; 13cc8 <free_token_boolean_op@@Base+0x510>
   13c34:	add	lr, pc, lr
   13c38:	str	r0, [lr, #36]	; 0x24
   13c3c:	str	r0, [lr, #32]
   13c40:	str	r0, [lr, #28]
   13c44:	str	r0, [lr, #24]
   13c48:	str	r0, [lr, #20]
   13c4c:	str	r0, [lr, #16]
   13c50:	str	r0, [lr, #12]
   13c54:	str	r0, [lr, #8]
   13c58:	str	r0, [lr, #4]
   13c5c:	str	r0, [lr]
   13c60:	pop	{fp, pc}
   13c64:	andeq	sp, r1, r0, asr #16
   13c68:	andeq	sp, r1, r4, lsr r8
   13c6c:	andeq	sp, r1, ip, lsr #16
   13c70:	andeq	sp, r1, r4, lsr #16
   13c74:	andeq	sp, r1, ip, lsl r8
   13c78:	andeq	sp, r1, r4, lsl r8
   13c7c:	andeq	sp, r1, ip, lsl #16
   13c80:	andeq	sp, r1, r4, lsl #16
   13c84:	strdeq	sp, [r1], -ip
   13c88:	strdeq	sp, [r1], -r4
   13c8c:	andeq	sp, r1, ip, ror #15
   13c90:	andeq	sp, r1, r4, ror #15
   13c94:	ldrdeq	sp, [r1], -ip
   13c98:	ldrdeq	sp, [r1], -r4
   13c9c:	andeq	sp, r1, ip, asr #15
   13ca0:	andeq	sp, r1, r4, asr #15
   13ca4:			; <UNDEFINED> instruction: 0x0001d7bc
   13ca8:			; <UNDEFINED> instruction: 0x0001d7b4
   13cac:	andeq	sp, r1, ip, lsr #15
   13cb0:	andeq	sp, r1, r4, lsr #15
   13cb4:	muleq	r1, ip, r7
   13cb8:	muleq	r1, r4, r7
   13cbc:	andeq	sp, r1, ip, lsl #15
   13cc0:	andeq	sp, r1, r4, lsl #15
   13cc4:	andeq	sp, r1, ip, ror r7
   13cc8:	andeq	sp, r1, r4, ror r7
   13ccc:	push	{fp, lr}
   13cd0:	mov	fp, sp
   13cd4:	ldr	r0, [pc, #16]	; 13cec <free_token_boolean_op@@Base+0x534>
   13cd8:	add	r0, pc, r0
   13cdc:	ldr	r1, [pc, #12]	; 13cf0 <free_token_boolean_op@@Base+0x538>
   13ce0:	add	r1, pc, r1
   13ce4:	bl	1df3c <__gcov_flush@@Base+0xb4>
   13ce8:	pop	{fp, pc}
   13cec:			; <UNDEFINED> instruction: 0xfffffbcc
   13cf0:			; <UNDEFINED> instruction: 0xfffffce0

00013cf4 <init_lexer@@Base>:
   13cf4:	sub	sp, sp, #16
   13cf8:	ldr	r2, [pc, #124]	; 13d7c <init_lexer@@Base+0x88>
   13cfc:	add	r2, pc, r2
   13d00:	ldr	r3, [r2, #4]
   13d04:	ldr	ip, [pc, #116]	; 13d80 <init_lexer@@Base+0x8c>
   13d08:	ldr	ip, [pc, ip]
   13d0c:	adds	ip, ip, #1
   13d10:	adc	r3, r3, #0
   13d14:	str	ip, [r2]
   13d18:	str	r3, [r2, #4]
   13d1c:	str	r0, [sp, #4]
   13d20:	str	r1, [sp]
   13d24:	ldr	r0, [pc, #88]	; 13d84 <init_lexer@@Base+0x90>
   13d28:	add	r0, pc, r0
   13d2c:	ldr	r1, [r0, #8]
   13d30:	ldr	r2, [r0, #12]
   13d34:	adds	r1, r1, #1
   13d38:	adc	r2, r2, #0
   13d3c:	str	r1, [r0, #8]
   13d40:	str	r2, [r0, #12]
   13d44:	ldr	r0, [sp, #4]
   13d48:	str	r0, [sp, #12]
   13d4c:	ldr	r1, [sp]
   13d50:	str	r1, [sp, #8]
   13d54:	ldr	r2, [sp, #8]
   13d58:	ldr	r3, [sp, #12]
   13d5c:	str	r2, [r3]
   13d60:	ldr	r2, [sp, #12]
   13d64:	movw	r3, #0
   13d68:	str	r3, [r2, #4]
   13d6c:	ldr	r2, [sp, #12]
   13d70:	str	r3, [r2, #8]
   13d74:	add	sp, sp, #16
   13d78:	bx	lr
   13d7c:	ldrdeq	sp, [r1], -ip
   13d80:	ldrdeq	sp, [r1], -r0
   13d84:			; <UNDEFINED> instruction: 0x0001d6b0

00013d88 <destroy_lexer@@Base>:
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	sub	sp, sp, #16
   13d94:	ldr	r1, [pc, #228]	; 13e80 <destroy_lexer@@Base+0xf8>
   13d98:	add	r1, pc, r1
   13d9c:	ldr	r2, [r1, #4]
   13da0:	ldr	r3, [pc, #220]	; 13e84 <destroy_lexer@@Base+0xfc>
   13da4:	ldr	r3, [pc, r3]
   13da8:	adds	r3, r3, #1
   13dac:	adc	r2, r2, #0
   13db0:	str	r3, [r1]
   13db4:	str	r2, [r1, #4]
   13db8:	str	r0, [sp]
   13dbc:	ldr	r0, [sp]
   13dc0:	str	r0, [fp, #-4]
   13dc4:	mov	r1, #0
   13dc8:	str	r1, [sp, #8]
   13dcc:	ldr	r1, [fp, #-4]
   13dd0:	ldr	r1, [r1, #4]
   13dd4:	str	r1, [sp, #4]
   13dd8:	ldr	r1, [sp, #4]
   13ddc:	cmp	r1, #0
   13de0:	mov	r2, r1
   13de4:	movwne	r2, #1
   13de8:	mov	r3, #16
   13dec:	cmp	r1, #0
   13df0:	movwne	r3, #8
   13df4:	ldr	r1, [pc, #140]	; 13e88 <destroy_lexer@@Base+0x100>
   13df8:	add	r1, pc, r1
   13dfc:	ldr	r3, [r1, r3]!
   13e00:	ldr	ip, [r1, #4]
   13e04:	adds	r3, r3, #1
   13e08:	adc	ip, ip, #0
   13e0c:	str	r3, [r1]
   13e10:	str	ip, [r1, #4]
   13e14:	tst	r2, #1
   13e18:	beq	13e58 <destroy_lexer@@Base+0xd0>
   13e1c:	ldr	r0, [pc, #104]	; 13e8c <destroy_lexer@@Base+0x104>
   13e20:	add	r0, pc, r0
   13e24:	ldr	r1, [r0, #24]
   13e28:	ldr	r2, [r0, #28]
   13e2c:	adds	r1, r1, #1
   13e30:	adc	r2, r2, #0
   13e34:	str	r1, [r0, #24]
   13e38:	str	r2, [r0, #28]
   13e3c:	ldr	r0, [sp, #4]
   13e40:	str	r0, [sp, #8]
   13e44:	ldr	r0, [sp, #4]
   13e48:	ldr	r0, [r0]
   13e4c:	str	r0, [sp, #4]
   13e50:	ldr	r0, [sp, #8]
   13e54:	bl	13e94 <free_stack_base@@Base>
   13e58:	ldr	r0, [pc, #48]	; 13e90 <destroy_lexer@@Base+0x108>
   13e5c:	add	r0, pc, r0
   13e60:	ldr	r1, [r0, #32]
   13e64:	ldr	r2, [r0, #36]	; 0x24
   13e68:	adds	r1, r1, #1
   13e6c:	adc	r2, r2, #0
   13e70:	str	r1, [r0, #32]
   13e74:	str	r2, [r0, #36]	; 0x24
   13e78:	mov	sp, fp
   13e7c:	pop	{fp, pc}
   13e80:	andeq	sp, r1, r0, asr r6
   13e84:	andeq	sp, r1, r4, asr #12
   13e88:	strdeq	sp, [r1], -r0
   13e8c:	andeq	sp, r1, r8, asr #11
   13e90:	andeq	sp, r1, ip, lsl #11

00013e94 <free_stack_base@@Base>:
   13e94:	push	{fp, lr}
   13e98:	mov	fp, sp
   13e9c:	sub	sp, sp, #8
   13ea0:	ldr	r1, [pc, #92]	; 13f04 <free_stack_base@@Base+0x70>
   13ea4:	add	r1, pc, r1
   13ea8:	ldr	r2, [r1, #4]
   13eac:	ldr	r3, [pc, #84]	; 13f08 <free_stack_base@@Base+0x74>
   13eb0:	ldr	r3, [pc, r3]
   13eb4:	adds	r3, r3, #1
   13eb8:	adc	r2, r2, #0
   13ebc:	str	r3, [r1]
   13ec0:	str	r2, [r1, #4]
   13ec4:	str	r0, [sp]
   13ec8:	ldr	r0, [pc, #60]	; 13f0c <free_stack_base@@Base+0x78>
   13ecc:	add	r0, pc, r0
   13ed0:	ldr	r1, [r0, #8]
   13ed4:	ldr	r2, [r0, #12]
   13ed8:	adds	r1, r1, #1
   13edc:	adc	r2, r2, #0
   13ee0:	str	r1, [r0, #8]
   13ee4:	str	r2, [r0, #12]
   13ee8:	ldr	r0, [sp]
   13eec:	str	r0, [sp, #4]
   13ef0:	ldr	r1, [sp, #4]
   13ef4:	mov	r0, r1
   13ef8:	bl	11ee4 <free@plt>
   13efc:	mov	sp, fp
   13f00:	pop	{fp, pc}
   13f04:	andeq	sp, r1, ip, ror #10
   13f08:	andeq	sp, r1, r0, ror #10
   13f0c:	andeq	sp, r1, r4, asr #10

00013f10 <push_back@@Base>:
   13f10:	push	{fp, lr}
   13f14:	mov	fp, sp
   13f18:	sub	sp, sp, #24
   13f1c:	ldr	r2, [pc, #144]	; 13fb4 <push_back@@Base+0xa4>
   13f20:	add	r2, pc, r2
   13f24:	ldr	r3, [r2, #4]
   13f28:	ldr	ip, [pc, #136]	; 13fb8 <push_back@@Base+0xa8>
   13f2c:	ldr	ip, [pc, ip]
   13f30:	adds	ip, ip, #1
   13f34:	adc	r3, r3, #0
   13f38:	str	ip, [r2]
   13f3c:	str	r3, [r2, #4]
   13f40:	str	r0, [sp, #8]
   13f44:	str	r1, [sp, #4]
   13f48:	ldr	r0, [pc, #108]	; 13fbc <push_back@@Base+0xac>
   13f4c:	add	r0, pc, r0
   13f50:	ldr	r1, [r0, #8]
   13f54:	ldr	r2, [r0, #12]
   13f58:	adds	r1, r1, #1
   13f5c:	adc	r2, r2, #0
   13f60:	str	r1, [r0, #8]
   13f64:	str	r2, [r0, #12]
   13f68:	ldr	r0, [sp, #8]
   13f6c:	str	r0, [fp, #-4]
   13f70:	ldr	r1, [sp, #4]
   13f74:	str	r1, [fp, #-8]
   13f78:	movw	r0, #8
   13f7c:	bl	11f68 <malloc@plt>
   13f80:	str	r0, [sp, #12]
   13f84:	ldr	r0, [fp, #-8]
   13f88:	ldr	r1, [sp, #12]
   13f8c:	str	r0, [r1, #4]
   13f90:	ldr	r0, [fp, #-4]
   13f94:	ldr	r0, [r0, #4]
   13f98:	ldr	r1, [sp, #12]
   13f9c:	str	r0, [r1]
   13fa0:	ldr	r0, [sp, #12]
   13fa4:	ldr	r1, [fp, #-4]
   13fa8:	str	r0, [r1, #4]
   13fac:	mov	sp, fp
   13fb0:	pop	{fp, pc}
   13fb4:	andeq	sp, r1, r0, lsl #10
   13fb8:	strdeq	sp, [r1], -r4
   13fbc:	ldrdeq	sp, [r1], -r4

00013fc0 <get_char@@Base>:
   13fc0:	sub	sp, sp, #8
   13fc4:	ldr	r1, [pc, #112]	; 1403c <get_char@@Base+0x7c>
   13fc8:	add	r1, pc, r1
   13fcc:	ldr	r2, [r1, #4]
   13fd0:	ldr	r3, [pc, #104]	; 14040 <get_char@@Base+0x80>
   13fd4:	ldr	r3, [pc, r3]
   13fd8:	adds	r3, r3, #1
   13fdc:	adc	r2, r2, #0
   13fe0:	str	r3, [r1]
   13fe4:	str	r2, [r1, #4]
   13fe8:	str	r0, [sp]
   13fec:	ldr	r0, [pc, #80]	; 14044 <get_char@@Base+0x84>
   13ff0:	add	r0, pc, r0
   13ff4:	ldr	r1, [r0, #8]
   13ff8:	ldr	r2, [r0, #12]
   13ffc:	adds	r1, r1, #1
   14000:	adc	r2, r2, #0
   14004:	str	r1, [r0, #8]
   14008:	str	r2, [r0, #12]
   1400c:	ldr	r0, [sp]
   14010:	str	r0, [sp, #4]
   14014:	ldr	r1, [sp, #4]
   14018:	ldr	r1, [r1]
   1401c:	ldr	r2, [sp, #4]
   14020:	ldr	r3, [r2, #8]
   14024:	add	ip, r3, #1
   14028:	str	ip, [r2, #8]
   1402c:	add	r1, r1, r3
   14030:	ldrb	r0, [r1]
   14034:	add	sp, sp, #8
   14038:	bx	lr
   1403c:	andeq	sp, r1, r8, ror #8
   14040:	andeq	sp, r1, ip, asr r4
   14044:	andeq	sp, r1, r0, asr #8

00014048 <push_back_chars@@Base>:
   14048:	push	{fp, lr}
   1404c:	mov	fp, sp
   14050:	sub	sp, sp, #24
   14054:	ldr	r2, [pc, #272]	; 1416c <push_back_chars@@Base+0x124>
   14058:	add	r2, pc, r2
   1405c:	ldr	r3, [r2, #4]
   14060:	ldr	ip, [pc, #264]	; 14170 <push_back_chars@@Base+0x128>
   14064:	ldr	ip, [pc, ip]
   14068:	adds	ip, ip, #1
   1406c:	adc	r3, r3, #0
   14070:	str	ip, [r2]
   14074:	str	r3, [r2, #4]
   14078:	str	r0, [sp, #12]
   1407c:	str	r1, [sp, #8]
   14080:	ldr	r0, [sp, #12]
   14084:	str	r0, [fp, #-4]
   14088:	ldr	r1, [sp, #8]
   1408c:	str	r1, [fp, #-8]
   14090:	ldr	r2, [fp, #-4]
   14094:	ldr	r2, [r2, #8]
   14098:	ldr	r3, [fp, #-8]
   1409c:	mov	ip, #0
   140a0:	cmp	r2, r3
   140a4:	movwcs	ip, #1
   140a8:	mov	lr, #16
   140ac:	cmp	r2, r3
   140b0:	movwcs	lr, #8
   140b4:	ldr	r2, [pc, #184]	; 14174 <push_back_chars@@Base+0x12c>
   140b8:	add	r2, pc, r2
   140bc:	ldr	r3, [r2, lr]!
   140c0:	ldr	lr, [r2, #4]
   140c4:	adds	r3, r3, #1
   140c8:	adc	lr, lr, #0
   140cc:	str	r3, [r2]
   140d0:	str	lr, [r2, #4]
   140d4:	tst	ip, #1
   140d8:	beq	14114 <push_back_chars@@Base+0xcc>
   140dc:	ldr	r0, [pc, #148]	; 14178 <push_back_chars@@Base+0x130>
   140e0:	add	r0, pc, r0
   140e4:	ldr	r1, [r0, #24]
   140e8:	ldr	r2, [r0, #28]
   140ec:	adds	r1, r1, #1
   140f0:	adc	r2, r2, #0
   140f4:	str	r1, [r0, #24]
   140f8:	str	r2, [r0, #28]
   140fc:	ldr	r0, [fp, #-8]
   14100:	ldr	r1, [fp, #-4]
   14104:	ldr	r2, [r1, #8]
   14108:	sub	r0, r2, r0
   1410c:	str	r0, [r1, #8]
   14110:	b	1413c <push_back_chars@@Base+0xf4>
   14114:	ldr	r0, [pc, #72]	; 14164 <push_back_chars@@Base+0x11c>
   14118:	add	r1, pc, r0
   1411c:	ldr	r0, [pc, #68]	; 14168 <push_back_chars@@Base+0x120>
   14120:	ldr	r0, [pc, r0]
   14124:	ldr	r0, [r0]
   14128:	bl	11fd4 <fprintf@plt>
   1412c:	movw	r1, #1
   14130:	str	r0, [sp, #4]
   14134:	mov	r0, r1
   14138:	bl	11fa4 <exit@plt>
   1413c:	ldr	r0, [pc, #56]	; 1417c <push_back_chars@@Base+0x134>
   14140:	add	r0, pc, r0
   14144:	ldr	r1, [r0, #32]
   14148:	ldr	r2, [r0, #36]	; 0x24
   1414c:	adds	r1, r1, #1
   14150:	adc	r2, r2, #0
   14154:	str	r1, [r0, #32]
   14158:	str	r2, [r0, #36]	; 0x24
   1415c:	mov	sp, fp
   14160:	pop	{fp, pc}
   14164:	strdeq	sl, [r0], -r0
   14168:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1416c:	strdeq	sp, [r1], -r0
   14170:	andeq	sp, r1, r4, ror #7
   14174:	muleq	r1, r0, r3
   14178:	andeq	sp, r1, r8, ror #6
   1417c:	andeq	sp, r1, r8, lsl #6

00014180 <push_back_one_char@@Base>:
   14180:	push	{fp, lr}
   14184:	mov	fp, sp
   14188:	sub	sp, sp, #8
   1418c:	ldr	r1, [pc, #92]	; 141f0 <push_back_one_char@@Base+0x70>
   14190:	add	r1, pc, r1
   14194:	ldr	r2, [r1, #4]
   14198:	ldr	r3, [pc, #84]	; 141f4 <push_back_one_char@@Base+0x74>
   1419c:	ldr	r3, [pc, r3]
   141a0:	adds	r3, r3, #1
   141a4:	adc	r2, r2, #0
   141a8:	str	r3, [r1]
   141ac:	str	r2, [r1, #4]
   141b0:	str	r0, [sp]
   141b4:	ldr	r0, [pc, #60]	; 141f8 <push_back_one_char@@Base+0x78>
   141b8:	add	r0, pc, r0
   141bc:	ldr	r1, [r0, #8]
   141c0:	ldr	r2, [r0, #12]
   141c4:	adds	r1, r1, #1
   141c8:	adc	r2, r2, #0
   141cc:	str	r1, [r0, #8]
   141d0:	str	r2, [r0, #12]
   141d4:	ldr	r0, [sp]
   141d8:	str	r0, [sp, #4]
   141dc:	ldr	r0, [sp, #4]
   141e0:	movw	r1, #1
   141e4:	bl	14048 <push_back_chars@@Base>
   141e8:	mov	sp, fp
   141ec:	pop	{fp, pc}
   141f0:	andeq	sp, r1, r0, ror #5
   141f4:	ldrdeq	sp, [r1], -r4
   141f8:			; <UNDEFINED> instruction: 0x0001d2b8

000141fc <next@@Base>:
   141fc:	push	{r4, r5, fp, lr}
   14200:	add	fp, sp, #8
   14204:	sub	sp, sp, #592	; 0x250
   14208:	ldr	r1, [pc, #4084]	; 15204 <next@@Base+0x1008>
   1420c:	add	r1, pc, r1
   14210:	ldr	r2, [r1, #4]
   14214:	ldr	r3, [pc, #4076]	; 15208 <next@@Base+0x100c>
   14218:	ldr	r3, [pc, r3]
   1421c:	adds	r3, r3, #1
   14220:	adc	r2, r2, #0
   14224:	str	r3, [r1]
   14228:	str	r2, [r1, #4]
   1422c:	str	r0, [sp, #40]	; 0x28
   14230:	ldr	r0, [sp, #40]	; 0x28
   14234:	str	r0, [fp, #-16]
   14238:	mov	r1, #0
   1423c:	str	r1, [sp, #68]	; 0x44
   14240:	str	r1, [sp, #64]	; 0x40
   14244:	str	r1, [sp, #60]	; 0x3c
   14248:	str	r1, [sp, #52]	; 0x34
   1424c:	str	r1, [sp, #48]	; 0x30
   14250:	ldr	r1, [fp, #-16]
   14254:	ldr	r1, [r1, #4]
   14258:	cmp	r1, #0
   1425c:	mov	r2, r1
   14260:	movwne	r2, #1
   14264:	mov	r3, #16
   14268:	cmp	r1, #0
   1426c:	movwne	r3, #8
   14270:	ldr	r1, [pc, #4032]	; 15238 <next@@Base+0x103c>
   14274:	add	r1, pc, r1
   14278:	ldr	r3, [r1, r3]!
   1427c:	ldr	ip, [r1, #4]
   14280:	adds	r3, r3, #1
   14284:	adc	ip, ip, #0
   14288:	str	r3, [r1]
   1428c:	str	ip, [r1, #4]
   14290:	tst	r2, #1
   14294:	beq	14304 <next@@Base+0x108>
   14298:	ldr	r0, [pc, #3996]	; 1523c <next@@Base+0x1040>
   1429c:	add	r0, pc, r0
   142a0:	ldr	r1, [r0, #24]
   142a4:	ldr	r2, [r0, #28]
   142a8:	adds	r1, r1, #1
   142ac:	adc	r2, r2, #0
   142b0:	str	r1, [r0, #24]
   142b4:	str	r2, [r0, #28]
   142b8:	ldr	r0, [fp, #-16]
   142bc:	ldr	r0, [r0, #4]
   142c0:	str	r0, [sp, #44]	; 0x2c
   142c4:	ldr	r0, [fp, #-16]
   142c8:	ldr	r0, [r0, #4]
   142cc:	ldr	r0, [r0]
   142d0:	ldr	r1, [fp, #-16]
   142d4:	str	r0, [r1, #4]
   142d8:	ldr	r0, [sp, #44]	; 0x2c
   142dc:	ldr	r0, [r0, #4]
   142e0:	str	r0, [sp, #52]	; 0x34
   142e4:	ldr	r0, [sp, #44]	; 0x2c
   142e8:	movw	r1, #0
   142ec:	str	r1, [r0, #4]
   142f0:	ldr	r0, [sp, #44]	; 0x2c
   142f4:	bl	13e94 <free_stack_base@@Base>
   142f8:	ldr	r0, [sp, #52]	; 0x34
   142fc:	str	r0, [fp, #-12]
   14300:	b	15e2c <next@@Base+0x1c30>
   14304:	ldr	r0, [pc, #3892]	; 15240 <next@@Base+0x1044>
   14308:	add	r0, pc, r0
   1430c:	ldr	r1, [r0, #32]
   14310:	ldr	r2, [r0, #36]	; 0x24
   14314:	adds	r1, r1, #1
   14318:	adc	r2, r2, #0
   1431c:	str	r1, [r0, #32]
   14320:	str	r2, [r0, #36]	; 0x24
   14324:	ldr	r0, [fp, #-16]
   14328:	bl	13fc0 <get_char@@Base>
   1432c:	strb	r0, [sp, #59]	; 0x3b
   14330:	ldrb	r0, [sp, #59]	; 0x3b
   14334:	cmp	r0, #0
   14338:	mov	r1, r0
   1433c:	movwne	r1, #1
   14340:	mov	r2, #48	; 0x30
   14344:	cmp	r0, #0
   14348:	movwne	r2, #40	; 0x28
   1434c:	ldr	r0, [pc, #3824]	; 15244 <next@@Base+0x1048>
   14350:	add	r0, pc, r0
   14354:	ldr	r2, [r0, r2]!
   14358:	ldr	r3, [r0, #4]
   1435c:	adds	r2, r2, #1
   14360:	adc	r3, r3, #0
   14364:	str	r2, [r0]
   14368:	str	r3, [r0, #4]
   1436c:	tst	r1, #1
   14370:	beq	15df0 <next@@Base+0x1bf4>
   14374:	ldr	r0, [pc, #3788]	; 15248 <next@@Base+0x104c>
   14378:	add	r0, pc, r0
   1437c:	mov	r1, #0
   14380:	str	r1, [r0]
   14384:	ldr	r0, [sp, #60]	; 0x3c
   14388:	cmp	r0, #5
   1438c:	str	r0, [sp, #36]	; 0x24
   14390:	bhi	15db4 <next@@Base+0x1bb8>
   14394:	add	r0, pc, #8
   14398:	ldr	r1, [sp, #36]	; 0x24
   1439c:	ldr	r2, [r0, r1, lsl #2]
   143a0:	add	pc, r0, r2
   143a4:	andeq	r0, r0, r8, lsl r0
   143a8:	andeq	r1, r0, ip, asr #32
   143ac:	andeq	r1, r0, r0, lsl r2
   143b0:	andeq	r1, r0, r8, ror #7
   143b4:	strdeq	r1, [r0], -r4
   143b8:	andeq	r1, r0, r8, ror r8
   143bc:	ldr	r0, [pc, #3720]	; 1524c <next@@Base+0x1050>
   143c0:	add	r0, pc, r0
   143c4:	add	r1, r0, #8
   143c8:	ldr	r0, [pc, #3712]	; 15250 <next@@Base+0x1054>
   143cc:	add	r0, pc, r0
   143d0:	bl	15f68 <next@@Base+0x1d6c>
   143d4:	ldrb	r0, [sp, #59]	; 0x3b
   143d8:	sub	r1, r0, #9
   143dc:	clz	r1, r1
   143e0:	lsr	r1, r1, #5
   143e4:	mov	lr, #120	; 0x78
   143e8:	cmp	r0, #9
   143ec:	movweq	lr, #112	; 0x70
   143f0:	ldr	r0, [pc, #4064]	; 153d8 <next@@Base+0x11dc>
   143f4:	add	r0, pc, r0
   143f8:	ldr	lr, [r0, lr]!
   143fc:	ldr	r2, [r0, #4]
   14400:	adds	lr, lr, #1
   14404:	adc	r2, r2, #0
   14408:	str	lr, [r0]
   1440c:	str	r2, [r0, #4]
   14410:	tst	r1, #1
   14414:	bne	144a0 <next@@Base+0x2a4>
   14418:	ldrb	r0, [sp, #59]	; 0x3b
   1441c:	sub	r1, r0, #32
   14420:	clz	r1, r1
   14424:	lsr	r1, r1, #5
   14428:	mov	r2, #136	; 0x88
   1442c:	cmp	r0, #32
   14430:	movweq	r2, #128	; 0x80
   14434:	ldr	r0, [pc, #4000]	; 153dc <next@@Base+0x11e0>
   14438:	add	r0, pc, r0
   1443c:	ldr	r2, [r0, r2]!
   14440:	ldr	r3, [r0, #4]
   14444:	adds	r2, r2, #1
   14448:	adc	r3, r3, #0
   1444c:	str	r2, [r0]
   14450:	str	r3, [r0, #4]
   14454:	tst	r1, #1
   14458:	bne	144a0 <next@@Base+0x2a4>
   1445c:	ldrb	r0, [sp, #59]	; 0x3b
   14460:	sub	r1, r0, #10
   14464:	clz	r1, r1
   14468:	lsr	r1, r1, #5
   1446c:	mov	r2, #152	; 0x98
   14470:	cmp	r0, #10
   14474:	movweq	r2, #144	; 0x90
   14478:	ldr	r0, [pc, #3936]	; 153e0 <next@@Base+0x11e4>
   1447c:	add	r0, pc, r0
   14480:	ldr	r2, [r0, r2]!
   14484:	ldr	r3, [r0, #4]
   14488:	adds	r2, r2, #1
   1448c:	adc	r3, r3, #0
   14490:	str	r2, [r0]
   14494:	str	r3, [r0, #4]
   14498:	tst	r1, #1
   1449c:	beq	144d0 <next@@Base+0x2d4>
   144a0:	ldr	r0, [pc, #3900]	; 153e4 <next@@Base+0x11e8>
   144a4:	add	r0, pc, r0
   144a8:	ldr	r1, [r0, #160]	; 0xa0
   144ac:	ldr	r2, [r0, #164]	; 0xa4
   144b0:	adds	r1, r1, #1
   144b4:	adc	r2, r2, #0
   144b8:	str	r1, [r0, #160]	; 0xa0
   144bc:	str	r2, [r0, #164]	; 0xa4
   144c0:	ldr	r0, [fp, #-16]
   144c4:	bl	13fc0 <get_char@@Base>
   144c8:	strb	r0, [sp, #59]	; 0x3b
   144cc:	b	153b4 <next@@Base+0x11b8>
   144d0:	ldrb	r0, [sp, #59]	; 0x3b
   144d4:	sub	r1, r0, #48	; 0x30
   144d8:	clz	r1, r1
   144dc:	lsr	r1, r1, #5
   144e0:	mov	r2, #176	; 0xb0
   144e4:	cmp	r0, #48	; 0x30
   144e8:	movweq	r2, #168	; 0xa8
   144ec:	ldr	r0, [pc, #3828]	; 153e8 <next@@Base+0x11ec>
   144f0:	add	r0, pc, r0
   144f4:	ldr	r2, [r0, r2]!
   144f8:	ldr	r3, [r0, #4]
   144fc:	adds	r2, r2, #1
   14500:	adc	r3, r3, #0
   14504:	str	r2, [r0]
   14508:	str	r3, [r0, #4]
   1450c:	tst	r1, #1
   14510:	beq	14558 <next@@Base+0x35c>
   14514:	ldr	r0, [pc, #3792]	; 153ec <next@@Base+0x11f0>
   14518:	add	r0, pc, r0
   1451c:	ldr	r1, [r0, #184]	; 0xb8
   14520:	ldr	r2, [r0, #188]	; 0xbc
   14524:	adds	r1, r1, #1
   14528:	adc	r2, r2, #0
   1452c:	str	r1, [r0, #184]	; 0xb8
   14530:	str	r2, [r0, #188]	; 0xbc
   14534:	movw	r0, #8
   14538:	bl	11f68 <malloc@plt>
   1453c:	str	r0, [sp, #52]	; 0x34
   14540:	ldr	r0, [sp, #52]	; 0x34
   14544:	movw	r1, #0
   14548:	bl	12c30 <init_token_int_value@@Base>
   1454c:	ldr	r0, [sp, #52]	; 0x34
   14550:	str	r0, [fp, #-12]
   14554:	b	15e2c <next@@Base+0x1c30>
   14558:	ldrb	r0, [sp, #59]	; 0x3b
   1455c:	mov	r1, #0
   14560:	cmp	r0, #48	; 0x30
   14564:	movwgt	r1, #1
   14568:	mov	r2, #200	; 0xc8
   1456c:	cmp	r0, #48	; 0x30
   14570:	movwgt	r2, #192	; 0xc0
   14574:	ldr	r0, [pc, #4016]	; 1552c <next@@Base+0x1330>
   14578:	add	r0, pc, r0
   1457c:	ldr	r2, [r0, r2]!
   14580:	ldr	r3, [r0, #4]
   14584:	adds	r2, r2, #1
   14588:	adc	r3, r3, #0
   1458c:	str	r2, [r0]
   14590:	str	r3, [r0, #4]
   14594:	tst	r1, #1
   14598:	beq	14634 <next@@Base+0x438>
   1459c:	ldrb	r0, [sp, #59]	; 0x3b
   145a0:	mov	r1, #0
   145a4:	cmp	r0, #58	; 0x3a
   145a8:	movwlt	r1, #1
   145ac:	mov	r2, #216	; 0xd8
   145b0:	cmp	r0, #58	; 0x3a
   145b4:	movwlt	r2, #208	; 0xd0
   145b8:	ldr	r0, [pc, #4076]	; 155ac <next@@Base+0x13b0>
   145bc:	add	r0, pc, r0
   145c0:	ldr	r2, [r0, r2]!
   145c4:	ldr	r3, [r0, #4]
   145c8:	adds	r2, r2, #1
   145cc:	adc	r3, r3, #0
   145d0:	str	r2, [r0]
   145d4:	str	r3, [r0, #4]
   145d8:	tst	r1, #1
   145dc:	beq	14634 <next@@Base+0x438>
   145e0:	ldr	r0, [pc, #4040]	; 155b0 <next@@Base+0x13b4>
   145e4:	add	r0, pc, r0
   145e8:	ldr	r1, [r0, #224]	; 0xe0
   145ec:	ldr	r2, [r0, #228]	; 0xe4
   145f0:	adds	r1, r1, #1
   145f4:	adc	r2, r2, #0
   145f8:	str	r1, [r0, #224]	; 0xe0
   145fc:	str	r2, [r0, #228]	; 0xe4
   14600:	ldrb	r0, [sp, #59]	; 0x3b
   14604:	ldr	r1, [sp, #64]	; 0x40
   14608:	add	r2, r1, #1
   1460c:	str	r2, [sp, #64]	; 0x40
   14610:	add	r2, sp, #72	; 0x48
   14614:	add	r1, r2, r1
   14618:	strb	r0, [r1]
   1461c:	ldr	r0, [fp, #-16]
   14620:	bl	13fc0 <get_char@@Base>
   14624:	strb	r0, [sp, #59]	; 0x3b
   14628:	movw	r0, #1
   1462c:	str	r0, [sp, #60]	; 0x3c
   14630:	b	15374 <next@@Base+0x1178>
   14634:	ldrb	r0, [sp, #59]	; 0x3b
   14638:	sub	r1, r0, #40	; 0x28
   1463c:	clz	r1, r1
   14640:	lsr	r1, r1, #5
   14644:	mov	r2, #240	; 0xf0
   14648:	cmp	r0, #40	; 0x28
   1464c:	movweq	r2, #232	; 0xe8
   14650:	ldr	r0, [pc, #4012]	; 15604 <next@@Base+0x1408>
   14654:	add	r0, pc, r0
   14658:	ldr	r2, [r0, r2]!
   1465c:	ldr	r3, [r0, #4]
   14660:	adds	r2, r2, #1
   14664:	adc	r3, r3, #0
   14668:	str	r2, [r0]
   1466c:	str	r3, [r0, #4]
   14670:	tst	r1, #1
   14674:	beq	146b8 <next@@Base+0x4bc>
   14678:	ldr	r0, [pc, #3976]	; 15608 <next@@Base+0x140c>
   1467c:	add	r0, pc, r0
   14680:	ldr	r1, [r0, #248]	; 0xf8
   14684:	ldr	r2, [r0, #252]	; 0xfc
   14688:	adds	r1, r1, #1
   1468c:	adc	r2, r2, #0
   14690:	str	r1, [r0, #248]	; 0xf8
   14694:	str	r2, [r0, #252]	; 0xfc
   14698:	movw	r0, #4
   1469c:	bl	11f68 <malloc@plt>
   146a0:	str	r0, [sp, #52]	; 0x34
   146a4:	ldr	r0, [sp, #52]	; 0x34
   146a8:	bl	12d48 <init_token_opar@@Base>
   146ac:	ldr	r0, [sp, #52]	; 0x34
   146b0:	str	r0, [fp, #-12]
   146b4:	b	15e2c <next@@Base+0x1c30>
   146b8:	ldrb	r0, [sp, #59]	; 0x3b
   146bc:	sub	r1, r0, #41	; 0x29
   146c0:	clz	r1, r1
   146c4:	lsr	r1, r1, #5
   146c8:	mov	r2, #264	; 0x108
   146cc:	cmp	r0, #41	; 0x29
   146d0:	movweq	r2, #256	; 0x100
   146d4:	ldr	r0, [pc, #4088]	; 156d4 <next@@Base+0x14d8>
   146d8:	add	r0, pc, r0
   146dc:	ldr	r2, [r0, r2]!
   146e0:	ldr	r3, [r0, #4]
   146e4:	adds	r2, r2, #1
   146e8:	adc	r3, r3, #0
   146ec:	str	r2, [r0]
   146f0:	str	r3, [r0, #4]
   146f4:	tst	r1, #1
   146f8:	beq	1473c <next@@Base+0x540>
   146fc:	ldr	r0, [pc, #4052]	; 156d8 <next@@Base+0x14dc>
   14700:	add	r0, pc, r0
   14704:	ldr	r1, [r0, #272]	; 0x110
   14708:	ldr	r2, [r0, #276]	; 0x114
   1470c:	adds	r1, r1, #1
   14710:	adc	r2, r2, #0
   14714:	str	r1, [r0, #272]	; 0x110
   14718:	str	r2, [r0, #276]	; 0x114
   1471c:	movw	r0, #4
   14720:	bl	11f68 <malloc@plt>
   14724:	str	r0, [sp, #52]	; 0x34
   14728:	ldr	r0, [sp, #52]	; 0x34
   1472c:	bl	12dbc <init_token_cpar@@Base>
   14730:	ldr	r0, [sp, #52]	; 0x34
   14734:	str	r0, [fp, #-12]
   14738:	b	15e2c <next@@Base+0x1c30>
   1473c:	ldrb	r0, [sp, #59]	; 0x3b
   14740:	sub	r1, r0, #123	; 0x7b
   14744:	clz	r1, r1
   14748:	lsr	r1, r1, #5
   1474c:	mov	r2, #288	; 0x120
   14750:	cmp	r0, #123	; 0x7b
   14754:	movweq	r2, #280	; 0x118
   14758:	ldr	r0, [pc, #3964]	; 156dc <next@@Base+0x14e0>
   1475c:	add	r0, pc, r0
   14760:	ldr	r2, [r0, r2]!
   14764:	ldr	r3, [r0, #4]
   14768:	adds	r2, r2, #1
   1476c:	adc	r3, r3, #0
   14770:	str	r2, [r0]
   14774:	str	r3, [r0, #4]
   14778:	tst	r1, #1
   1477c:	beq	147c0 <next@@Base+0x5c4>
   14780:	ldr	r0, [pc, #4092]	; 15784 <next@@Base+0x1588>
   14784:	add	r0, pc, r0
   14788:	ldr	r1, [r0, #296]	; 0x128
   1478c:	ldr	r2, [r0, #300]	; 0x12c
   14790:	adds	r1, r1, #1
   14794:	adc	r2, r2, #0
   14798:	str	r1, [r0, #296]	; 0x128
   1479c:	str	r2, [r0, #300]	; 0x12c
   147a0:	movw	r0, #4
   147a4:	bl	11f68 <malloc@plt>
   147a8:	str	r0, [sp, #52]	; 0x34
   147ac:	ldr	r0, [sp, #52]	; 0x34
   147b0:	bl	12e30 <init_token_obra@@Base>
   147b4:	ldr	r0, [sp, #52]	; 0x34
   147b8:	str	r0, [fp, #-12]
   147bc:	b	15e2c <next@@Base+0x1c30>
   147c0:	ldrb	r0, [sp, #59]	; 0x3b
   147c4:	sub	r1, r0, #125	; 0x7d
   147c8:	clz	r1, r1
   147cc:	lsr	r1, r1, #5
   147d0:	mov	r2, #312	; 0x138
   147d4:	cmp	r0, #125	; 0x7d
   147d8:	movweq	r2, #304	; 0x130
   147dc:	ldr	r0, [pc, #4004]	; 15788 <next@@Base+0x158c>
   147e0:	add	r0, pc, r0
   147e4:	ldr	r2, [r0, r2]!
   147e8:	ldr	r3, [r0, #4]
   147ec:	adds	r2, r2, #1
   147f0:	adc	r3, r3, #0
   147f4:	str	r2, [r0]
   147f8:	str	r3, [r0, #4]
   147fc:	tst	r1, #1
   14800:	beq	14844 <next@@Base+0x648>
   14804:	ldr	r0, [pc, #4068]	; 157f0 <next@@Base+0x15f4>
   14808:	add	r0, pc, r0
   1480c:	ldr	r1, [r0, #320]	; 0x140
   14810:	ldr	r2, [r0, #324]	; 0x144
   14814:	adds	r1, r1, #1
   14818:	adc	r2, r2, #0
   1481c:	str	r1, [r0, #320]	; 0x140
   14820:	str	r2, [r0, #324]	; 0x144
   14824:	movw	r0, #4
   14828:	bl	11f68 <malloc@plt>
   1482c:	str	r0, [sp, #52]	; 0x34
   14830:	ldr	r0, [sp, #52]	; 0x34
   14834:	bl	12ea4 <init_token_cbra@@Base>
   14838:	ldr	r0, [sp, #52]	; 0x34
   1483c:	str	r0, [fp, #-12]
   14840:	b	15e2c <next@@Base+0x1c30>
   14844:	ldrb	r0, [sp, #59]	; 0x3b
   14848:	sub	r1, r0, #59	; 0x3b
   1484c:	clz	r1, r1
   14850:	lsr	r1, r1, #5
   14854:	mov	r2, #336	; 0x150
   14858:	cmp	r0, #59	; 0x3b
   1485c:	movweq	r2, #328	; 0x148
   14860:	ldr	r0, [pc, #4092]	; 15864 <next@@Base+0x1668>
   14864:	add	r0, pc, r0
   14868:	ldr	r2, [r0, r2]!
   1486c:	ldr	r3, [r0, #4]
   14870:	adds	r2, r2, #1
   14874:	adc	r3, r3, #0
   14878:	str	r2, [r0]
   1487c:	str	r3, [r0, #4]
   14880:	tst	r1, #1
   14884:	beq	148c8 <next@@Base+0x6cc>
   14888:	ldr	r0, [pc, #4056]	; 15868 <next@@Base+0x166c>
   1488c:	add	r0, pc, r0
   14890:	ldr	r1, [r0, #344]	; 0x158
   14894:	ldr	r2, [r0, #348]	; 0x15c
   14898:	adds	r1, r1, #1
   1489c:	adc	r2, r2, #0
   148a0:	str	r1, [r0, #344]	; 0x158
   148a4:	str	r2, [r0, #348]	; 0x15c
   148a8:	movw	r0, #4
   148ac:	bl	11f68 <malloc@plt>
   148b0:	str	r0, [sp, #52]	; 0x34
   148b4:	ldr	r0, [sp, #52]	; 0x34
   148b8:	bl	12f8c <init_token_semicolon@@Base>
   148bc:	ldr	r0, [sp, #52]	; 0x34
   148c0:	str	r0, [fp, #-12]
   148c4:	b	15e2c <next@@Base+0x1c30>
   148c8:	ldrb	r0, [sp, #59]	; 0x3b
   148cc:	sub	r1, r0, #101	; 0x65
   148d0:	clz	r1, r1
   148d4:	lsr	r1, r1, #5
   148d8:	mov	r2, #360	; 0x168
   148dc:	cmp	r0, #101	; 0x65
   148e0:	movweq	r2, #352	; 0x160
   148e4:	ldr	r0, [pc, #4080]	; 158dc <next@@Base+0x16e0>
   148e8:	add	r0, pc, r0
   148ec:	ldr	r2, [r0, r2]!
   148f0:	ldr	r3, [r0, #4]
   148f4:	adds	r2, r2, #1
   148f8:	adc	r3, r3, #0
   148fc:	str	r2, [r0]
   14900:	str	r3, [r0, #4]
   14904:	tst	r1, #1
   14908:	beq	14960 <next@@Base+0x764>
   1490c:	ldr	r0, [pc, #4044]	; 158e0 <next@@Base+0x16e4>
   14910:	add	r0, pc, r0
   14914:	ldr	r1, [r0, #368]	; 0x170
   14918:	ldr	r2, [r0, #372]	; 0x174
   1491c:	adds	r1, r1, #1
   14920:	adc	r2, r2, #0
   14924:	str	r1, [r0, #368]	; 0x170
   14928:	str	r2, [r0, #372]	; 0x174
   1492c:	ldrb	r0, [sp, #59]	; 0x3b
   14930:	ldr	r1, [sp, #64]	; 0x40
   14934:	add	r2, r1, #1
   14938:	str	r2, [sp, #64]	; 0x40
   1493c:	add	r2, sp, #72	; 0x48
   14940:	add	r1, r2, r1
   14944:	strb	r0, [r1]
   14948:	ldr	r0, [fp, #-16]
   1494c:	bl	13fc0 <get_char@@Base>
   14950:	strb	r0, [sp, #59]	; 0x3b
   14954:	movw	r0, #5
   14958:	str	r0, [sp, #60]	; 0x3c
   1495c:	b	152b4 <next@@Base+0x10b8>
   14960:	ldrb	r0, [sp, #59]	; 0x3b
   14964:	sub	r1, r0, #105	; 0x69
   14968:	clz	r1, r1
   1496c:	lsr	r1, r1, #5
   14970:	mov	r2, #384	; 0x180
   14974:	cmp	r0, #105	; 0x69
   14978:	movweq	r2, #376	; 0x178
   1497c:	ldr	r0, [pc, #3936]	; 158e4 <next@@Base+0x16e8>
   14980:	add	r0, pc, r0
   14984:	ldr	r2, [r0, r2]!
   14988:	ldr	r3, [r0, #4]
   1498c:	adds	r2, r2, #1
   14990:	adc	r3, r3, #0
   14994:	str	r2, [r0]
   14998:	str	r3, [r0, #4]
   1499c:	tst	r1, #1
   149a0:	beq	149f8 <next@@Base+0x7fc>
   149a4:	ldr	r0, [pc, #4072]	; 15994 <next@@Base+0x1798>
   149a8:	add	r0, pc, r0
   149ac:	ldr	r1, [r0, #392]	; 0x188
   149b0:	ldr	r2, [r0, #396]	; 0x18c
   149b4:	adds	r1, r1, #1
   149b8:	adc	r2, r2, #0
   149bc:	str	r1, [r0, #392]	; 0x188
   149c0:	str	r2, [r0, #396]	; 0x18c
   149c4:	ldrb	r0, [sp, #59]	; 0x3b
   149c8:	ldr	r1, [sp, #64]	; 0x40
   149cc:	add	r2, r1, #1
   149d0:	str	r2, [sp, #64]	; 0x40
   149d4:	add	r2, sp, #72	; 0x48
   149d8:	add	r1, r2, r1
   149dc:	strb	r0, [r1]
   149e0:	ldr	r0, [fp, #-16]
   149e4:	bl	13fc0 <get_char@@Base>
   149e8:	strb	r0, [sp, #59]	; 0x3b
   149ec:	movw	r0, #2
   149f0:	str	r0, [sp, #60]	; 0x3c
   149f4:	b	15294 <next@@Base+0x1098>
   149f8:	ldrb	r0, [sp, #59]	; 0x3b
   149fc:	sub	r1, r0, #109	; 0x6d
   14a00:	clz	r1, r1
   14a04:	lsr	r1, r1, #5
   14a08:	mov	r2, #408	; 0x198
   14a0c:	cmp	r0, #109	; 0x6d
   14a10:	movweq	r2, #400	; 0x190
   14a14:	ldr	r0, [pc, #4064]	; 159fc <next@@Base+0x1800>
   14a18:	add	r0, pc, r0
   14a1c:	ldr	r2, [r0, r2]!
   14a20:	ldr	r3, [r0, #4]
   14a24:	adds	r2, r2, #1
   14a28:	adc	r3, r3, #0
   14a2c:	str	r2, [r0]
   14a30:	str	r3, [r0, #4]
   14a34:	tst	r1, #1
   14a38:	beq	14a90 <next@@Base+0x894>
   14a3c:	ldr	r0, [pc, #4028]	; 15a00 <next@@Base+0x1804>
   14a40:	add	r0, pc, r0
   14a44:	ldr	r1, [r0, #416]	; 0x1a0
   14a48:	ldr	r2, [r0, #420]	; 0x1a4
   14a4c:	adds	r1, r1, #1
   14a50:	adc	r2, r2, #0
   14a54:	str	r1, [r0, #416]	; 0x1a0
   14a58:	str	r2, [r0, #420]	; 0x1a4
   14a5c:	ldrb	r0, [sp, #59]	; 0x3b
   14a60:	ldr	r1, [sp, #64]	; 0x40
   14a64:	add	r2, r1, #1
   14a68:	str	r2, [sp, #64]	; 0x40
   14a6c:	add	r2, sp, #72	; 0x48
   14a70:	add	r1, r2, r1
   14a74:	strb	r0, [r1]
   14a78:	ldr	r0, [fp, #-16]
   14a7c:	bl	13fc0 <get_char@@Base>
   14a80:	strb	r0, [sp, #59]	; 0x3b
   14a84:	movw	r0, #3
   14a88:	str	r0, [sp, #60]	; 0x3c
   14a8c:	b	15274 <next@@Base+0x1078>
   14a90:	ldrb	r0, [sp, #59]	; 0x3b
   14a94:	sub	r1, r0, #114	; 0x72
   14a98:	clz	r1, r1
   14a9c:	lsr	r1, r1, #5
   14aa0:	mov	r2, #432	; 0x1b0
   14aa4:	cmp	r0, #114	; 0x72
   14aa8:	movweq	r2, #424	; 0x1a8
   14aac:	ldr	r0, [pc, #4032]	; 15a74 <next@@Base+0x1878>
   14ab0:	add	r0, pc, r0
   14ab4:	ldr	r2, [r0, r2]!
   14ab8:	ldr	r3, [r0, #4]
   14abc:	adds	r2, r2, #1
   14ac0:	adc	r3, r3, #0
   14ac4:	str	r2, [r0]
   14ac8:	str	r3, [r0, #4]
   14acc:	tst	r1, #1
   14ad0:	beq	14b28 <next@@Base+0x92c>
   14ad4:	ldr	r0, [pc, #3996]	; 15a78 <next@@Base+0x187c>
   14ad8:	add	r0, pc, r0
   14adc:	ldr	r1, [r0, #440]	; 0x1b8
   14ae0:	ldr	r2, [r0, #444]	; 0x1bc
   14ae4:	adds	r1, r1, #1
   14ae8:	adc	r2, r2, #0
   14aec:	str	r1, [r0, #440]	; 0x1b8
   14af0:	str	r2, [r0, #444]	; 0x1bc
   14af4:	ldrb	r0, [sp, #59]	; 0x3b
   14af8:	ldr	r1, [sp, #64]	; 0x40
   14afc:	add	r2, r1, #1
   14b00:	str	r2, [sp, #64]	; 0x40
   14b04:	add	r2, sp, #72	; 0x48
   14b08:	add	r1, r2, r1
   14b0c:	strb	r0, [r1]
   14b10:	ldr	r0, [fp, #-16]
   14b14:	bl	13fc0 <get_char@@Base>
   14b18:	strb	r0, [sp, #59]	; 0x3b
   14b1c:	movw	r0, #4
   14b20:	str	r0, [sp, #60]	; 0x3c
   14b24:	b	15254 <next@@Base+0x1058>
   14b28:	ldrb	r0, [sp, #59]	; 0x3b
   14b2c:	sub	r1, r0, #33	; 0x21
   14b30:	clz	r1, r1
   14b34:	lsr	r1, r1, #5
   14b38:	mov	r2, #456	; 0x1c8
   14b3c:	cmp	r0, #33	; 0x21
   14b40:	movweq	r2, #448	; 0x1c0
   14b44:	ldr	r0, [pc, #4000]	; 15aec <next@@Base+0x18f0>
   14b48:	add	r0, pc, r0
   14b4c:	ldr	r2, [r0, r2]!
   14b50:	ldr	r3, [r0, #4]
   14b54:	adds	r2, r2, #1
   14b58:	adc	r3, r3, #0
   14b5c:	str	r2, [r0]
   14b60:	str	r3, [r0, #4]
   14b64:	tst	r1, #1
   14b68:	beq	14cb8 <next@@Base+0xabc>
   14b6c:	ldrb	r0, [sp, #59]	; 0x3b
   14b70:	ldr	r1, [sp, #64]	; 0x40
   14b74:	add	r2, r1, #1
   14b78:	str	r2, [sp, #64]	; 0x40
   14b7c:	add	r2, sp, #72	; 0x48
   14b80:	strb	r0, [r2, r1]
   14b84:	ldr	r0, [fp, #-16]
   14b88:	bl	13fc0 <get_char@@Base>
   14b8c:	strb	r0, [sp, #59]	; 0x3b
   14b90:	mov	r0, #8
   14b94:	bl	11f68 <malloc@plt>
   14b98:	str	r0, [sp, #52]	; 0x34
   14b9c:	ldrb	r0, [sp, #59]	; 0x3b
   14ba0:	sub	r1, r0, #61	; 0x3d
   14ba4:	cmp	r0, #61	; 0x3d
   14ba8:	movwne	r1, #1
   14bac:	mov	r2, #472	; 0x1d8
   14bb0:	cmp	r0, #61	; 0x3d
   14bb4:	movwne	r2, #464	; 0x1d0
   14bb8:	ldr	r0, [pc, #4000]	; 15b60 <next@@Base+0x1964>
   14bbc:	add	r0, pc, r0
   14bc0:	ldr	r2, [r0, r2]!
   14bc4:	ldr	lr, [r0, #4]
   14bc8:	adds	r2, r2, #1
   14bcc:	adc	lr, lr, #0
   14bd0:	str	r2, [r0]
   14bd4:	str	lr, [r0, #4]
   14bd8:	tst	r1, #1
   14bdc:	beq	14c30 <next@@Base+0xa34>
   14be0:	ldr	r0, [pc, #4076]	; 15bd4 <next@@Base+0x19d8>
   14be4:	add	r0, pc, r0
   14be8:	ldr	r1, [r0, #480]	; 0x1e0
   14bec:	ldr	r2, [r0, #484]	; 0x1e4
   14bf0:	adds	r1, r1, #1
   14bf4:	adc	r2, r2, #0
   14bf8:	str	r1, [r0, #480]	; 0x1e0
   14bfc:	str	r2, [r0, #484]	; 0x1e4
   14c00:	ldr	r0, [fp, #-16]
   14c04:	bl	14180 <push_back_one_char@@Base>
   14c08:	movw	r0, #2
   14c0c:	bl	11f68 <malloc@plt>
   14c10:	str	r0, [sp, #68]	; 0x44
   14c14:	ldrb	r0, [sp, #72]	; 0x48
   14c18:	ldr	r1, [sp, #68]	; 0x44
   14c1c:	strb	r0, [r1]
   14c20:	ldr	r0, [sp, #68]	; 0x44
   14c24:	movw	r1, #0
   14c28:	strb	r1, [r0, #1]
   14c2c:	b	14c80 <next@@Base+0xa84>
   14c30:	ldr	r0, [pc, #4064]	; 15c18 <next@@Base+0x1a1c>
   14c34:	add	r0, pc, r0
   14c38:	ldr	r1, [r0, #488]	; 0x1e8
   14c3c:	ldr	r2, [r0, #492]	; 0x1ec
   14c40:	adds	r1, r1, #1
   14c44:	adc	r2, r2, #0
   14c48:	str	r1, [r0, #488]	; 0x1e8
   14c4c:	str	r2, [r0, #492]	; 0x1ec
   14c50:	movw	r0, #3
   14c54:	bl	11f68 <malloc@plt>
   14c58:	str	r0, [sp, #68]	; 0x44
   14c5c:	ldrb	r0, [sp, #72]	; 0x48
   14c60:	ldr	r1, [sp, #68]	; 0x44
   14c64:	strb	r0, [r1]
   14c68:	ldrb	r0, [sp, #59]	; 0x3b
   14c6c:	ldr	r1, [sp, #68]	; 0x44
   14c70:	strb	r0, [r1, #1]
   14c74:	ldr	r0, [sp, #68]	; 0x44
   14c78:	movw	r1, #0
   14c7c:	strb	r1, [r0, #2]
   14c80:	ldr	r0, [pc, #4088]	; 15c80 <next@@Base+0x1a84>
   14c84:	add	r0, pc, r0
   14c88:	ldr	r1, [r0, #496]	; 0x1f0
   14c8c:	ldr	r2, [r0, #500]	; 0x1f4
   14c90:	adds	r1, r1, #1
   14c94:	adc	r2, r2, #0
   14c98:	str	r1, [r0, #496]	; 0x1f0
   14c9c:	str	r2, [r0, #500]	; 0x1f4
   14ca0:	ldr	r0, [sp, #52]	; 0x34
   14ca4:	ldr	r1, [sp, #68]	; 0x44
   14ca8:	bl	1315c <init_token_boolean_op@@Base>
   14cac:	ldr	r0, [sp, #52]	; 0x34
   14cb0:	str	r0, [fp, #-12]
   14cb4:	b	15e2c <next@@Base+0x1c30>
   14cb8:	ldrb	r0, [sp, #59]	; 0x3b
   14cbc:	sub	r1, r0, #60	; 0x3c
   14cc0:	clz	r1, r1
   14cc4:	lsr	r1, r1, #5
   14cc8:	mov	r2, #512	; 0x200
   14ccc:	cmp	r0, #60	; 0x3c
   14cd0:	movweq	r2, #504	; 0x1f8
   14cd4:	ldr	r0, [pc, #4008]	; 15c84 <next@@Base+0x1a88>
   14cd8:	add	r0, pc, r0
   14cdc:	ldr	r2, [r0, r2]!
   14ce0:	ldr	r3, [r0, #4]
   14ce4:	adds	r2, r2, #1
   14ce8:	adc	r3, r3, #0
   14cec:	str	r2, [r0]
   14cf0:	str	r3, [r0, #4]
   14cf4:	tst	r1, #1
   14cf8:	bne	14d40 <next@@Base+0xb44>
   14cfc:	ldrb	r0, [sp, #59]	; 0x3b
   14d00:	sub	r1, r0, #62	; 0x3e
   14d04:	clz	r1, r1
   14d08:	lsr	r1, r1, #5
   14d0c:	mov	r2, #528	; 0x210
   14d10:	cmp	r0, #62	; 0x3e
   14d14:	movweq	r2, #520	; 0x208
   14d18:	ldr	r0, [pc, #4056]	; 15cf8 <next@@Base+0x1afc>
   14d1c:	add	r0, pc, r0
   14d20:	ldr	r2, [r0, r2]!
   14d24:	ldr	r3, [r0, #4]
   14d28:	adds	r2, r2, #1
   14d2c:	adc	r3, r3, #0
   14d30:	str	r2, [r0]
   14d34:	str	r3, [r0, #4]
   14d38:	tst	r1, #1
   14d3c:	beq	14e8c <next@@Base+0xc90>
   14d40:	ldrb	r0, [sp, #59]	; 0x3b
   14d44:	ldr	r1, [sp, #64]	; 0x40
   14d48:	add	r2, r1, #1
   14d4c:	str	r2, [sp, #64]	; 0x40
   14d50:	add	r2, sp, #72	; 0x48
   14d54:	strb	r0, [r2, r1]
   14d58:	ldr	r0, [fp, #-16]
   14d5c:	bl	13fc0 <get_char@@Base>
   14d60:	strb	r0, [sp, #59]	; 0x3b
   14d64:	mov	r0, #8
   14d68:	bl	11f68 <malloc@plt>
   14d6c:	str	r0, [sp, #52]	; 0x34
   14d70:	ldrb	r0, [sp, #59]	; 0x3b
   14d74:	sub	r1, r0, #61	; 0x3d
   14d78:	cmp	r0, #61	; 0x3d
   14d7c:	movwne	r1, #1
   14d80:	mov	r2, #544	; 0x220
   14d84:	cmp	r0, #61	; 0x3d
   14d88:	movwne	r2, #536	; 0x218
   14d8c:	ldr	r0, [pc, #4056]	; 15d6c <next@@Base+0x1b70>
   14d90:	add	r0, pc, r0
   14d94:	ldr	r2, [r0, r2]!
   14d98:	ldr	lr, [r0, #4]
   14d9c:	adds	r2, r2, #1
   14da0:	adc	lr, lr, #0
   14da4:	str	r2, [r0]
   14da8:	str	lr, [r0, #4]
   14dac:	tst	r1, #1
   14db0:	beq	14e04 <next@@Base+0xc08>
   14db4:	ldr	r0, [pc, #4084]	; 15db0 <next@@Base+0x1bb4>
   14db8:	add	r0, pc, r0
   14dbc:	ldr	r1, [r0, #552]	; 0x228
   14dc0:	ldr	r2, [r0, #556]	; 0x22c
   14dc4:	adds	r1, r1, #1
   14dc8:	adc	r2, r2, #0
   14dcc:	str	r1, [r0, #552]	; 0x228
   14dd0:	str	r2, [r0, #556]	; 0x22c
   14dd4:	ldr	r0, [fp, #-16]
   14dd8:	bl	14180 <push_back_one_char@@Base>
   14ddc:	movw	r0, #2
   14de0:	bl	11f68 <malloc@plt>
   14de4:	str	r0, [sp, #68]	; 0x44
   14de8:	ldrb	r0, [sp, #72]	; 0x48
   14dec:	ldr	r1, [sp, #68]	; 0x44
   14df0:	strb	r0, [r1]
   14df4:	ldr	r0, [sp, #68]	; 0x44
   14df8:	movw	r1, #0
   14dfc:	strb	r1, [r0, #1]
   14e00:	b	14e54 <next@@Base+0xc58>
   14e04:	ldr	r0, [pc, #4064]	; 15dec <next@@Base+0x1bf0>
   14e08:	add	r0, pc, r0
   14e0c:	ldr	r1, [r0, #560]	; 0x230
   14e10:	ldr	r2, [r0, #564]	; 0x234
   14e14:	adds	r1, r1, #1
   14e18:	adc	r2, r2, #0
   14e1c:	str	r1, [r0, #560]	; 0x230
   14e20:	str	r2, [r0, #564]	; 0x234
   14e24:	movw	r0, #3
   14e28:	bl	11f68 <malloc@plt>
   14e2c:	str	r0, [sp, #68]	; 0x44
   14e30:	ldrb	r0, [sp, #72]	; 0x48
   14e34:	ldr	r1, [sp, #68]	; 0x44
   14e38:	strb	r0, [r1]
   14e3c:	ldrb	r0, [sp, #59]	; 0x3b
   14e40:	ldr	r1, [sp, #68]	; 0x44
   14e44:	strb	r0, [r1, #1]
   14e48:	ldr	r0, [sp, #68]	; 0x44
   14e4c:	movw	r1, #0
   14e50:	strb	r1, [r0, #2]
   14e54:	ldr	r0, [pc, #4092]	; 15e58 <next@@Base+0x1c5c>
   14e58:	add	r0, pc, r0
   14e5c:	ldr	r1, [r0, #568]	; 0x238
   14e60:	ldr	r2, [r0, #572]	; 0x23c
   14e64:	adds	r1, r1, #1
   14e68:	adc	r2, r2, #0
   14e6c:	str	r1, [r0, #568]	; 0x238
   14e70:	str	r2, [r0, #572]	; 0x23c
   14e74:	ldr	r0, [sp, #52]	; 0x34
   14e78:	ldr	r1, [sp, #68]	; 0x44
   14e7c:	bl	1315c <init_token_boolean_op@@Base>
   14e80:	ldr	r0, [sp, #52]	; 0x34
   14e84:	str	r0, [fp, #-12]
   14e88:	b	15e2c <next@@Base+0x1c30>
   14e8c:	ldrb	r0, [sp, #59]	; 0x3b
   14e90:	sub	r1, r0, #61	; 0x3d
   14e94:	clz	r1, r1
   14e98:	lsr	r1, r1, #5
   14e9c:	mov	r2, #584	; 0x248
   14ea0:	cmp	r0, #61	; 0x3d
   14ea4:	movweq	r2, #576	; 0x240
   14ea8:	ldr	r0, [pc, #4028]	; 15e6c <next@@Base+0x1c70>
   14eac:	add	r0, pc, r0
   14eb0:	ldr	r2, [r0, r2]!
   14eb4:	ldr	r3, [r0, #4]
   14eb8:	adds	r2, r2, #1
   14ebc:	adc	r3, r3, #0
   14ec0:	str	r2, [r0]
   14ec4:	str	r3, [r0, #4]
   14ec8:	tst	r1, #1
   14ecc:	beq	14fb4 <next@@Base+0xdb8>
   14ed0:	ldrb	r0, [sp, #59]	; 0x3b
   14ed4:	ldr	r1, [sp, #64]	; 0x40
   14ed8:	add	r2, r1, #1
   14edc:	str	r2, [sp, #64]	; 0x40
   14ee0:	add	r2, sp, #72	; 0x48
   14ee4:	strb	r0, [r2, r1]
   14ee8:	ldr	r0, [fp, #-16]
   14eec:	bl	13fc0 <get_char@@Base>
   14ef0:	strb	r0, [sp, #59]	; 0x3b
   14ef4:	mov	r0, #8
   14ef8:	bl	11f68 <malloc@plt>
   14efc:	str	r0, [sp, #52]	; 0x34
   14f00:	ldrb	r0, [sp, #59]	; 0x3b
   14f04:	sub	r1, r0, #61	; 0x3d
   14f08:	cmp	r0, #61	; 0x3d
   14f0c:	movwne	r1, #1
   14f10:	mov	r2, #600	; 0x258
   14f14:	cmp	r0, #61	; 0x3d
   14f18:	movwne	r2, #592	; 0x250
   14f1c:	ldr	r0, [pc, #3916]	; 15e70 <next@@Base+0x1c74>
   14f20:	add	r0, pc, r0
   14f24:	ldr	r2, [r0, r2]!
   14f28:	ldr	lr, [r0, #4]
   14f2c:	adds	r2, r2, #1
   14f30:	adc	lr, lr, #0
   14f34:	str	r2, [r0]
   14f38:	str	lr, [r0, #4]
   14f3c:	tst	r1, #1
   14f40:	beq	14f4c <next@@Base+0xd50>
   14f44:	movw	r0, #1
   14f48:	bl	11fa4 <exit@plt>
   14f4c:	ldr	r0, [pc, #3872]	; 15e74 <next@@Base+0x1c78>
   14f50:	add	r0, pc, r0
   14f54:	ldr	r1, [r0, #608]	; 0x260
   14f58:	ldr	r2, [r0, #612]	; 0x264
   14f5c:	adds	r1, r1, #1
   14f60:	adc	r2, r2, #0
   14f64:	str	r1, [r0, #608]	; 0x260
   14f68:	str	r2, [r0, #612]	; 0x264
   14f6c:	movw	r0, #3
   14f70:	bl	11f68 <malloc@plt>
   14f74:	str	r0, [sp, #68]	; 0x44
   14f78:	ldrb	r0, [sp, #72]	; 0x48
   14f7c:	ldr	r1, [sp, #68]	; 0x44
   14f80:	strb	r0, [r1]
   14f84:	ldrb	r0, [sp, #59]	; 0x3b
   14f88:	ldr	r1, [sp, #68]	; 0x44
   14f8c:	strb	r0, [r1, #1]
   14f90:	ldr	r0, [sp, #68]	; 0x44
   14f94:	movw	r1, #0
   14f98:	strb	r1, [r0, #2]
   14f9c:	ldr	r0, [sp, #52]	; 0x34
   14fa0:	ldr	r1, [sp, #68]	; 0x44
   14fa4:	bl	1315c <init_token_boolean_op@@Base>
   14fa8:	ldr	r0, [sp, #52]	; 0x34
   14fac:	str	r0, [fp, #-12]
   14fb0:	b	15e2c <next@@Base+0x1c30>
   14fb4:	ldrb	r0, [sp, #59]	; 0x3b
   14fb8:	sub	r1, r0, #124	; 0x7c
   14fbc:	clz	r1, r1
   14fc0:	lsr	r1, r1, #5
   14fc4:	mov	r2, #624	; 0x270
   14fc8:	cmp	r0, #124	; 0x7c
   14fcc:	movweq	r2, #616	; 0x268
   14fd0:	ldr	r0, [pc, #3744]	; 15e78 <next@@Base+0x1c7c>
   14fd4:	add	r0, pc, r0
   14fd8:	ldr	r2, [r0, r2]!
   14fdc:	ldr	r3, [r0, #4]
   14fe0:	adds	r2, r2, #1
   14fe4:	adc	r3, r3, #0
   14fe8:	str	r2, [r0]
   14fec:	str	r3, [r0, #4]
   14ff0:	tst	r1, #1
   14ff4:	beq	150dc <next@@Base+0xee0>
   14ff8:	ldrb	r0, [sp, #59]	; 0x3b
   14ffc:	ldr	r1, [sp, #64]	; 0x40
   15000:	add	r2, r1, #1
   15004:	str	r2, [sp, #64]	; 0x40
   15008:	add	r2, sp, #72	; 0x48
   1500c:	strb	r0, [r2, r1]
   15010:	ldr	r0, [fp, #-16]
   15014:	bl	13fc0 <get_char@@Base>
   15018:	strb	r0, [sp, #59]	; 0x3b
   1501c:	mov	r0, #8
   15020:	bl	11f68 <malloc@plt>
   15024:	str	r0, [sp, #52]	; 0x34
   15028:	ldrb	r0, [sp, #59]	; 0x3b
   1502c:	sub	r1, r0, #124	; 0x7c
   15030:	cmp	r0, #124	; 0x7c
   15034:	movwne	r1, #1
   15038:	mov	r2, #640	; 0x280
   1503c:	cmp	r0, #124	; 0x7c
   15040:	movwne	r2, #632	; 0x278
   15044:	ldr	r0, [pc, #3632]	; 15e7c <next@@Base+0x1c80>
   15048:	add	r0, pc, r0
   1504c:	ldr	r2, [r0, r2]!
   15050:	ldr	lr, [r0, #4]
   15054:	adds	r2, r2, #1
   15058:	adc	lr, lr, #0
   1505c:	str	r2, [r0]
   15060:	str	lr, [r0, #4]
   15064:	tst	r1, #1
   15068:	beq	15074 <next@@Base+0xe78>
   1506c:	movw	r0, #1
   15070:	bl	11fa4 <exit@plt>
   15074:	ldr	r0, [pc, #3588]	; 15e80 <next@@Base+0x1c84>
   15078:	add	r0, pc, r0
   1507c:	ldr	r1, [r0, #648]	; 0x288
   15080:	ldr	r2, [r0, #652]	; 0x28c
   15084:	adds	r1, r1, #1
   15088:	adc	r2, r2, #0
   1508c:	str	r1, [r0, #648]	; 0x288
   15090:	str	r2, [r0, #652]	; 0x28c
   15094:	movw	r0, #3
   15098:	bl	11f68 <malloc@plt>
   1509c:	str	r0, [sp, #68]	; 0x44
   150a0:	ldrb	r0, [sp, #72]	; 0x48
   150a4:	ldr	r1, [sp, #68]	; 0x44
   150a8:	strb	r0, [r1]
   150ac:	ldrb	r0, [sp, #59]	; 0x3b
   150b0:	ldr	r1, [sp, #68]	; 0x44
   150b4:	strb	r0, [r1, #1]
   150b8:	ldr	r0, [sp, #68]	; 0x44
   150bc:	movw	r1, #0
   150c0:	strb	r1, [r0, #2]
   150c4:	ldr	r0, [sp, #52]	; 0x34
   150c8:	ldr	r1, [sp, #68]	; 0x44
   150cc:	bl	1315c <init_token_boolean_op@@Base>
   150d0:	ldr	r0, [sp, #52]	; 0x34
   150d4:	str	r0, [fp, #-12]
   150d8:	b	15e2c <next@@Base+0x1c30>
   150dc:	ldrb	r0, [sp, #59]	; 0x3b
   150e0:	sub	r1, r0, #38	; 0x26
   150e4:	clz	r1, r1
   150e8:	lsr	r1, r1, #5
   150ec:	mov	r2, #664	; 0x298
   150f0:	cmp	r0, #38	; 0x26
   150f4:	movweq	r2, #656	; 0x290
   150f8:	ldr	r0, [pc, #3460]	; 15e84 <next@@Base+0x1c88>
   150fc:	add	r0, pc, r0
   15100:	ldr	r2, [r0, r2]!
   15104:	ldr	r3, [r0, #4]
   15108:	adds	r2, r2, #1
   1510c:	adc	r3, r3, #0
   15110:	str	r2, [r0]
   15114:	str	r3, [r0, #4]
   15118:	tst	r1, #1
   1511c:	beq	1520c <next@@Base+0x1010>
   15120:	ldrb	r0, [sp, #59]	; 0x3b
   15124:	ldr	r1, [sp, #64]	; 0x40
   15128:	add	r2, r1, #1
   1512c:	str	r2, [sp, #64]	; 0x40
   15130:	add	r2, sp, #72	; 0x48
   15134:	strb	r0, [r2, r1]
   15138:	ldr	r0, [fp, #-16]
   1513c:	bl	13fc0 <get_char@@Base>
   15140:	strb	r0, [sp, #59]	; 0x3b
   15144:	mov	r0, #8
   15148:	bl	11f68 <malloc@plt>
   1514c:	str	r0, [sp, #52]	; 0x34
   15150:	ldrb	r0, [sp, #59]	; 0x3b
   15154:	sub	r1, r0, #38	; 0x26
   15158:	cmp	r0, #38	; 0x26
   1515c:	movwne	r1, #1
   15160:	mov	r2, #680	; 0x2a8
   15164:	cmp	r0, #38	; 0x26
   15168:	movwne	r2, #672	; 0x2a0
   1516c:	ldr	r0, [pc, #3348]	; 15e88 <next@@Base+0x1c8c>
   15170:	add	r0, pc, r0
   15174:	ldr	r2, [r0, r2]!
   15178:	ldr	lr, [r0, #4]
   1517c:	adds	r2, r2, #1
   15180:	adc	lr, lr, #0
   15184:	str	r2, [r0]
   15188:	str	lr, [r0, #4]
   1518c:	tst	r1, #1
   15190:	beq	1519c <next@@Base+0xfa0>
   15194:	movw	r0, #1
   15198:	bl	11fa4 <exit@plt>
   1519c:	ldr	r0, [pc, #3304]	; 15e8c <next@@Base+0x1c90>
   151a0:	add	r0, pc, r0
   151a4:	ldr	r1, [r0, #688]	; 0x2b0
   151a8:	ldr	r2, [r0, #692]	; 0x2b4
   151ac:	adds	r1, r1, #1
   151b0:	adc	r2, r2, #0
   151b4:	str	r1, [r0, #688]	; 0x2b0
   151b8:	str	r2, [r0, #692]	; 0x2b4
   151bc:	movw	r0, #3
   151c0:	bl	11f68 <malloc@plt>
   151c4:	str	r0, [sp, #68]	; 0x44
   151c8:	ldrb	r0, [sp, #72]	; 0x48
   151cc:	ldr	r1, [sp, #68]	; 0x44
   151d0:	strb	r0, [r1]
   151d4:	ldrb	r0, [sp, #59]	; 0x3b
   151d8:	ldr	r1, [sp, #68]	; 0x44
   151dc:	strb	r0, [r1, #1]
   151e0:	ldr	r0, [sp, #68]	; 0x44
   151e4:	movw	r1, #0
   151e8:	strb	r1, [r0, #2]
   151ec:	ldr	r0, [sp, #52]	; 0x34
   151f0:	ldr	r1, [sp, #68]	; 0x44
   151f4:	bl	1315c <init_token_boolean_op@@Base>
   151f8:	ldr	r0, [sp, #52]	; 0x34
   151fc:	str	r0, [fp, #-12]
   15200:	b	15e2c <next@@Base+0x1c30>
   15204:	andeq	sp, r1, ip, ror r2
   15208:	andeq	sp, r1, r0, ror r2
   1520c:	ldr	r0, [pc, #3152]	; 15e64 <next@@Base+0x1c68>
   15210:	add	r1, pc, r0
   15214:	ldr	r0, [pc, #3148]	; 15e68 <next@@Base+0x1c6c>
   15218:	ldr	r0, [pc, r0]
   1521c:	ldr	r0, [r0]
   15220:	ldrb	r2, [sp, #59]	; 0x3b
   15224:	bl	11fd4 <fprintf@plt>
   15228:	movw	r1, #1
   1522c:	str	r0, [sp, #32]
   15230:	mov	r0, r1
   15234:	bl	11fa4 <exit@plt>
   15238:	andeq	sp, r1, r4, lsl r2
   1523c:	andeq	sp, r1, ip, ror #3
   15240:	andeq	sp, r1, r0, lsl #3
   15244:	andeq	sp, r1, r8, lsr r1
   15248:	andeq	ip, r1, r8, asr sp
   1524c:	andeq	ip, r1, r8, ror #8
   15250:	andeq	ip, r1, r4, lsl #26
   15254:	ldr	r0, [pc, #3124]	; 15e90 <next@@Base+0x1c94>
   15258:	add	r0, pc, r0
   1525c:	ldr	r1, [r0, #696]	; 0x2b8
   15260:	ldr	r2, [r0, #700]	; 0x2bc
   15264:	adds	r1, r1, #1
   15268:	adc	r2, r2, #0
   1526c:	str	r1, [r0, #696]	; 0x2b8
   15270:	str	r2, [r0, #700]	; 0x2bc
   15274:	ldr	r0, [pc, #3096]	; 15e94 <next@@Base+0x1c98>
   15278:	add	r0, pc, r0
   1527c:	ldr	r1, [r0, #704]	; 0x2c0
   15280:	ldr	r2, [r0, #708]	; 0x2c4
   15284:	adds	r1, r1, #1
   15288:	adc	r2, r2, #0
   1528c:	str	r1, [r0, #704]	; 0x2c0
   15290:	str	r2, [r0, #708]	; 0x2c4
   15294:	ldr	r0, [pc, #3068]	; 15e98 <next@@Base+0x1c9c>
   15298:	add	r0, pc, r0
   1529c:	ldr	r1, [r0, #712]	; 0x2c8
   152a0:	ldr	r2, [r0, #716]	; 0x2cc
   152a4:	adds	r1, r1, #1
   152a8:	adc	r2, r2, #0
   152ac:	str	r1, [r0, #712]	; 0x2c8
   152b0:	str	r2, [r0, #716]	; 0x2cc
   152b4:	ldr	r0, [pc, #3040]	; 15e9c <next@@Base+0x1ca0>
   152b8:	add	r0, pc, r0
   152bc:	ldr	r1, [r0, #720]	; 0x2d0
   152c0:	ldr	r2, [r0, #724]	; 0x2d4
   152c4:	adds	r1, r1, #1
   152c8:	adc	r2, r2, #0
   152cc:	str	r1, [r0, #720]	; 0x2d0
   152d0:	str	r2, [r0, #724]	; 0x2d4
   152d4:	ldr	r0, [pc, #3012]	; 15ea0 <next@@Base+0x1ca4>
   152d8:	add	r0, pc, r0
   152dc:	ldr	r1, [r0, #728]	; 0x2d8
   152e0:	ldr	r2, [r0, #732]	; 0x2dc
   152e4:	adds	r1, r1, #1
   152e8:	adc	r2, r2, #0
   152ec:	str	r1, [r0, #728]	; 0x2d8
   152f0:	str	r2, [r0, #732]	; 0x2dc
   152f4:	ldr	r0, [pc, #2984]	; 15ea4 <next@@Base+0x1ca8>
   152f8:	add	r0, pc, r0
   152fc:	ldr	r1, [r0, #736]	; 0x2e0
   15300:	ldr	r2, [r0, #740]	; 0x2e4
   15304:	adds	r1, r1, #1
   15308:	adc	r2, r2, #0
   1530c:	str	r1, [r0, #736]	; 0x2e0
   15310:	str	r2, [r0, #740]	; 0x2e4
   15314:	ldr	r0, [pc, #2956]	; 15ea8 <next@@Base+0x1cac>
   15318:	add	r0, pc, r0
   1531c:	ldr	r1, [r0, #744]	; 0x2e8
   15320:	ldr	r2, [r0, #748]	; 0x2ec
   15324:	adds	r1, r1, #1
   15328:	adc	r2, r2, #0
   1532c:	str	r1, [r0, #744]	; 0x2e8
   15330:	str	r2, [r0, #748]	; 0x2ec
   15334:	ldr	r0, [pc, #2928]	; 15eac <next@@Base+0x1cb0>
   15338:	add	r0, pc, r0
   1533c:	ldr	r1, [r0, #752]	; 0x2f0
   15340:	ldr	r2, [r0, #756]	; 0x2f4
   15344:	adds	r1, r1, #1
   15348:	adc	r2, r2, #0
   1534c:	str	r1, [r0, #752]	; 0x2f0
   15350:	str	r2, [r0, #756]	; 0x2f4
   15354:	ldr	r0, [pc, #2900]	; 15eb0 <next@@Base+0x1cb4>
   15358:	add	r0, pc, r0
   1535c:	ldr	r1, [r0, #760]	; 0x2f8
   15360:	ldr	r2, [r0, #764]	; 0x2fc
   15364:	adds	r1, r1, #1
   15368:	adc	r2, r2, #0
   1536c:	str	r1, [r0, #760]	; 0x2f8
   15370:	str	r2, [r0, #764]	; 0x2fc
   15374:	ldr	r0, [pc, #2872]	; 15eb4 <next@@Base+0x1cb8>
   15378:	add	r0, pc, r0
   1537c:	ldr	r1, [r0, #768]	; 0x300
   15380:	ldr	r2, [r0, #772]	; 0x304
   15384:	adds	r1, r1, #1
   15388:	adc	r2, r2, #0
   1538c:	str	r1, [r0, #768]	; 0x300
   15390:	str	r2, [r0, #772]	; 0x304
   15394:	ldr	r0, [pc, #2844]	; 15eb8 <next@@Base+0x1cbc>
   15398:	add	r0, pc, r0
   1539c:	ldr	r1, [r0, #776]	; 0x308
   153a0:	ldr	r2, [r0, #780]	; 0x30c
   153a4:	adds	r1, r1, #1
   153a8:	adc	r2, r2, #0
   153ac:	str	r1, [r0, #776]	; 0x308
   153b0:	str	r2, [r0, #780]	; 0x30c
   153b4:	ldr	r0, [pc, #2816]	; 15ebc <next@@Base+0x1cc0>
   153b8:	add	r0, pc, r0
   153bc:	ldr	r1, [r0, #784]	; 0x310
   153c0:	ldr	r2, [r0, #788]	; 0x314
   153c4:	adds	r1, r1, #1
   153c8:	adc	r2, r2, #0
   153cc:	str	r1, [r0, #784]	; 0x310
   153d0:	str	r2, [r0, #788]	; 0x314
   153d4:	b	15db4 <next@@Base+0x1bb8>
   153d8:	muleq	r1, r4, r0
   153dc:	andeq	sp, r1, r0, asr r0
   153e0:	andeq	sp, r1, ip
   153e4:	andeq	ip, r1, r4, ror #31
   153e8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   153ec:	andeq	ip, r1, r0, ror pc
   153f0:	ldr	r0, [pc, #2760]	; 15ec0 <next@@Base+0x1cc4>
   153f4:	add	r0, pc, r0
   153f8:	add	r1, r0, #16
   153fc:	ldr	r0, [pc, #2752]	; 15ec4 <next@@Base+0x1cc8>
   15400:	add	r0, pc, r0
   15404:	bl	15f68 <next@@Base+0x1d6c>
   15408:	ldr	r0, [pc, #2744]	; 15ec8 <next@@Base+0x1ccc>
   1540c:	add	r0, pc, r0
   15410:	ldr	r1, [r0, #792]	; 0x318
   15414:	ldr	lr, [r0, #796]	; 0x31c
   15418:	adds	r1, r1, #1
   1541c:	adc	lr, lr, #0
   15420:	str	r1, [r0, #792]	; 0x318
   15424:	str	lr, [r0, #796]	; 0x31c
   15428:	ldrb	r0, [sp, #59]	; 0x3b
   1542c:	mov	r1, #0
   15430:	cmp	r0, #47	; 0x2f
   15434:	movwgt	r1, #1
   15438:	mov	r2, #808	; 0x328
   1543c:	cmp	r0, #47	; 0x2f
   15440:	movwgt	r2, #800	; 0x320
   15444:	ldr	r0, [pc, #2688]	; 15ecc <next@@Base+0x1cd0>
   15448:	add	r0, pc, r0
   1544c:	ldr	r2, [r0, r2]!
   15450:	ldr	r3, [r0, #4]
   15454:	adds	r2, r2, #1
   15458:	adc	r3, r3, #0
   1545c:	str	r2, [r0]
   15460:	str	r3, [r0, #4]
   15464:	tst	r1, #1
   15468:	movw	r0, #0
   1546c:	str	r0, [sp, #28]
   15470:	beq	154a8 <next@@Base+0x12ac>
   15474:	ldr	r0, [pc, #2644]	; 15ed0 <next@@Base+0x1cd4>
   15478:	add	r0, pc, r0
   1547c:	ldr	r1, [r0, #816]	; 0x330
   15480:	ldr	r2, [r0, #820]	; 0x334
   15484:	adds	r1, r1, #1
   15488:	adc	r2, r2, #0
   1548c:	str	r1, [r0, #816]	; 0x330
   15490:	str	r2, [r0, #820]	; 0x334
   15494:	ldrb	r0, [sp, #59]	; 0x3b
   15498:	cmp	r0, #57	; 0x39
   1549c:	movw	r0, #0
   154a0:	movle	r0, #1
   154a4:	str	r0, [sp, #28]
   154a8:	ldr	r0, [sp, #28]
   154ac:	mov	r1, #832	; 0x340
   154b0:	tst	r0, #1
   154b4:	movwne	r1, #824	; 0x338
   154b8:	ldr	r2, [pc, #2580]	; 15ed4 <next@@Base+0x1cd8>
   154bc:	add	r2, pc, r2
   154c0:	ldr	r1, [r2, r1]!
   154c4:	ldr	r3, [r2, #4]
   154c8:	adds	r1, r1, #1
   154cc:	adc	r3, r3, #0
   154d0:	str	r1, [r2]
   154d4:	str	r3, [r2, #4]
   154d8:	tst	r0, #1
   154dc:	beq	15530 <next@@Base+0x1334>
   154e0:	ldr	r0, [pc, #2544]	; 15ed8 <next@@Base+0x1cdc>
   154e4:	add	r0, pc, r0
   154e8:	ldr	r1, [r0, #840]	; 0x348
   154ec:	ldr	r2, [r0, #844]	; 0x34c
   154f0:	adds	r1, r1, #1
   154f4:	adc	r2, r2, #0
   154f8:	str	r1, [r0, #840]	; 0x348
   154fc:	str	r2, [r0, #844]	; 0x34c
   15500:	ldrb	r0, [sp, #59]	; 0x3b
   15504:	ldr	r1, [sp, #64]	; 0x40
   15508:	add	r2, r1, #1
   1550c:	str	r2, [sp, #64]	; 0x40
   15510:	add	r2, sp, #72	; 0x48
   15514:	add	r1, r2, r1
   15518:	strb	r0, [r1]
   1551c:	ldr	r0, [fp, #-16]
   15520:	bl	13fc0 <get_char@@Base>
   15524:	strb	r0, [sp, #59]	; 0x3b
   15528:	b	15428 <next@@Base+0x122c>
   1552c:	andeq	ip, r1, r0, lsl pc
   15530:	ldr	r0, [pc, #2468]	; 15edc <next@@Base+0x1ce0>
   15534:	add	r0, pc, r0
   15538:	ldr	r1, [r0, #848]	; 0x350
   1553c:	ldr	r2, [r0, #852]	; 0x354
   15540:	adds	r1, r1, #1
   15544:	adc	r2, r2, #0
   15548:	str	r1, [r0, #848]	; 0x350
   1554c:	str	r2, [r0, #852]	; 0x354
   15550:	ldr	r0, [fp, #-16]
   15554:	bl	14180 <push_back_one_char@@Base>
   15558:	ldr	r0, [sp, #64]	; 0x40
   1555c:	add	r1, sp, #72	; 0x48
   15560:	add	r0, r1, r0
   15564:	movw	r1, #0
   15568:	strb	r1, [r0]
   1556c:	movw	r0, #8
   15570:	bl	11f68 <malloc@plt>
   15574:	add	r1, sp, #72	; 0x48
   15578:	str	r0, [sp, #52]	; 0x34
   1557c:	ldr	r0, [sp, #52]	; 0x34
   15580:	str	r0, [sp, #24]
   15584:	mov	r0, r1
   15588:	bl	12070 <atoi@plt>
   1558c:	ldr	r1, [sp, #24]
   15590:	str	r0, [sp, #20]
   15594:	mov	r0, r1
   15598:	ldr	r1, [sp, #20]
   1559c:	bl	12c30 <init_token_int_value@@Base>
   155a0:	ldr	r0, [sp, #52]	; 0x34
   155a4:	str	r0, [fp, #-12]
   155a8:	b	15e2c <next@@Base+0x1c30>
   155ac:	andeq	ip, r1, ip, asr #29
   155b0:	andeq	ip, r1, r4, lsr #29
   155b4:	ldr	r0, [pc, #2340]	; 15ee0 <next@@Base+0x1ce4>
   155b8:	add	r0, pc, r0
   155bc:	add	r1, r0, #24
   155c0:	ldr	r0, [pc, #2332]	; 15ee4 <next@@Base+0x1ce8>
   155c4:	add	r0, pc, r0
   155c8:	str	r0, [sp, #16]
   155cc:	bl	15f68 <next@@Base+0x1d6c>
   155d0:	mov	r0, #1
   155d4:	ldr	r1, [sp, #16]
   155d8:	str	r0, [r1]
   155dc:	ldrb	r0, [sp, #59]	; 0x3b
   155e0:	mov	lr, r0
   155e4:	cmp	r0, #102	; 0x66
   155e8:	str	lr, [sp, #12]
   155ec:	beq	156e0 <next@@Base+0x14e4>
   155f0:	b	155f4 <next@@Base+0x13f8>
   155f4:	ldr	r0, [sp, #12]
   155f8:	cmp	r0, #110	; 0x6e
   155fc:	bne	15764 <next@@Base+0x1568>
   15600:	b	1560c <next@@Base+0x1410>
   15604:	andeq	ip, r1, r4, lsr lr
   15608:	andeq	ip, r1, ip, lsl #28
   1560c:	ldr	r0, [pc, #2260]	; 15ee8 <next@@Base+0x1cec>
   15610:	add	r0, pc, r0
   15614:	add	r1, r0, #64	; 0x40
   15618:	ldr	r0, [pc, #2252]	; 15eec <next@@Base+0x1cf0>
   1561c:	add	r0, pc, r0
   15620:	bl	15f68 <next@@Base+0x1d6c>
   15624:	ldrb	r0, [sp, #59]	; 0x3b
   15628:	ldr	r1, [sp, #64]	; 0x40
   1562c:	add	lr, r1, #1
   15630:	str	lr, [sp, #64]	; 0x40
   15634:	add	lr, sp, #72	; 0x48
   15638:	strb	r0, [lr, r1]
   1563c:	ldr	r0, [fp, #-16]
   15640:	bl	13fc0 <get_char@@Base>
   15644:	strb	r0, [sp, #59]	; 0x3b
   15648:	ldrb	r0, [sp, #59]	; 0x3b
   1564c:	sub	r1, r0, #116	; 0x74
   15650:	cmp	r0, #116	; 0x74
   15654:	movwne	r1, #1
   15658:	mov	lr, #888	; 0x378
   1565c:	cmp	r0, #116	; 0x74
   15660:	movwne	lr, #880	; 0x370
   15664:	ldr	r0, [pc, #2180]	; 15ef0 <next@@Base+0x1cf4>
   15668:	add	r0, pc, r0
   1566c:	ldr	lr, [r0, lr]!
   15670:	ldr	r2, [r0, #4]
   15674:	adds	lr, lr, #1
   15678:	adc	r2, r2, #0
   1567c:	str	lr, [r0]
   15680:	str	r2, [r0, #4]
   15684:	tst	r1, #1
   15688:	beq	15694 <next@@Base+0x1498>
   1568c:	movw	r0, #1
   15690:	bl	11fa4 <exit@plt>
   15694:	ldr	r0, [pc, #2136]	; 15ef4 <next@@Base+0x1cf8>
   15698:	add	r0, pc, r0
   1569c:	ldr	r1, [r0, #896]	; 0x380
   156a0:	ldr	r2, [r0, #900]	; 0x384
   156a4:	adds	r1, r1, #1
   156a8:	adc	r2, r2, #0
   156ac:	str	r1, [r0, #896]	; 0x380
   156b0:	str	r2, [r0, #900]	; 0x384
   156b4:	movw	r0, #4
   156b8:	bl	11f68 <malloc@plt>
   156bc:	str	r0, [sp, #52]	; 0x34
   156c0:	ldr	r0, [sp, #52]	; 0x34
   156c4:	bl	12bbc <init_token_int_type@@Base>
   156c8:	ldr	r0, [sp, #52]	; 0x34
   156cc:	str	r0, [fp, #-12]
   156d0:	b	15e2c <next@@Base+0x1c30>
   156d4:			; <UNDEFINED> instruction: 0x0001cdb0
   156d8:	andeq	ip, r1, r8, lsl #27
   156dc:	andeq	ip, r1, ip, lsr #26
   156e0:	ldr	r0, [pc, #2064]	; 15ef8 <next@@Base+0x1cfc>
   156e4:	add	r0, pc, r0
   156e8:	add	r1, r0, #72	; 0x48
   156ec:	ldr	r0, [pc, #2056]	; 15efc <next@@Base+0x1d00>
   156f0:	add	r0, pc, r0
   156f4:	bl	15f68 <next@@Base+0x1d6c>
   156f8:	ldr	r0, [pc, #2048]	; 15f00 <next@@Base+0x1d04>
   156fc:	add	r0, pc, r0
   15700:	ldr	r1, [r0, #904]	; 0x388
   15704:	ldr	lr, [r0, #908]	; 0x38c
   15708:	adds	r1, r1, #1
   1570c:	adc	lr, lr, #0
   15710:	str	r1, [r0, #904]	; 0x388
   15714:	str	lr, [r0, #908]	; 0x38c
   15718:	ldrb	r0, [sp, #59]	; 0x3b
   1571c:	ldr	r1, [sp, #64]	; 0x40
   15720:	add	lr, r1, #1
   15724:	str	lr, [sp, #64]	; 0x40
   15728:	add	lr, sp, #72	; 0x48
   1572c:	add	r1, lr, r1
   15730:	strb	r0, [r1]
   15734:	ldr	r0, [sp, #64]	; 0x40
   15738:	add	r0, lr, r0
   1573c:	movw	r1, #0
   15740:	strb	r1, [r0]
   15744:	movw	r0, #4
   15748:	bl	11f68 <malloc@plt>
   1574c:	str	r0, [sp, #52]	; 0x34
   15750:	ldr	r0, [sp, #52]	; 0x34
   15754:	bl	13074 <init_token_if@@Base>
   15758:	ldr	r0, [sp, #52]	; 0x34
   1575c:	str	r0, [fp, #-12]
   15760:	b	15e2c <next@@Base+0x1c30>
   15764:	ldr	r0, [pc, #1776]	; 15e5c <next@@Base+0x1c60>
   15768:	add	r0, pc, r0
   1576c:	ldr	r1, [pc, #1772]	; 15e60 <next@@Base+0x1c64>
   15770:	add	r1, pc, r1
   15774:	add	r1, r1, #56	; 0x38
   15778:	bl	15f68 <next@@Base+0x1d6c>
   1577c:	movw	r0, #1
   15780:	bl	11fa4 <exit@plt>
   15784:	andeq	ip, r1, r4, lsl #26
   15788:	andeq	ip, r1, r8, lsr #25
   1578c:	ldr	r0, [pc, #1904]	; 15f04 <next@@Base+0x1d08>
   15790:	add	r0, pc, r0
   15794:	add	r1, r0, #32
   15798:	ldr	r0, [pc, #1896]	; 15f08 <next@@Base+0x1d0c>
   1579c:	add	r0, pc, r0
   157a0:	bl	15f68 <next@@Base+0x1d6c>
   157a4:	ldrb	r0, [sp, #59]	; 0x3b
   157a8:	sub	r1, r0, #97	; 0x61
   157ac:	cmp	r0, #97	; 0x61
   157b0:	movwne	r1, #1
   157b4:	mov	lr, #920	; 0x398
   157b8:	cmp	r0, #97	; 0x61
   157bc:	movwne	lr, #912	; 0x390
   157c0:	ldr	r0, [pc, #1860]	; 15f0c <next@@Base+0x1d10>
   157c4:	add	r0, pc, r0
   157c8:	ldr	lr, [r0, lr]!
   157cc:	ldr	r2, [r0, #4]
   157d0:	adds	lr, lr, #1
   157d4:	adc	r2, r2, #0
   157d8:	str	lr, [r0]
   157dc:	str	r2, [r0, #4]
   157e0:	tst	r1, #1
   157e4:	beq	157f4 <next@@Base+0x15f8>
   157e8:	movw	r0, #1
   157ec:	bl	11fa4 <exit@plt>
   157f0:	andeq	ip, r1, r0, lsl #25
   157f4:	ldrb	r0, [sp, #59]	; 0x3b
   157f8:	ldr	r1, [sp, #64]	; 0x40
   157fc:	add	r2, r1, #1
   15800:	str	r2, [sp, #64]	; 0x40
   15804:	add	r2, sp, #72	; 0x48
   15808:	strb	r0, [r2, r1]
   1580c:	ldr	r0, [fp, #-16]
   15810:	bl	13fc0 <get_char@@Base>
   15814:	strb	r0, [sp, #59]	; 0x3b
   15818:	ldrb	r0, [sp, #59]	; 0x3b
   1581c:	sub	r1, r0, #105	; 0x69
   15820:	cmp	r0, #105	; 0x69
   15824:	movwne	r1, #1
   15828:	mov	r2, #936	; 0x3a8
   1582c:	cmp	r0, #105	; 0x69
   15830:	movwne	r2, #928	; 0x3a0
   15834:	ldr	r0, [pc, #1748]	; 15f10 <next@@Base+0x1d14>
   15838:	add	r0, pc, r0
   1583c:	ldr	r2, [r0, r2]!
   15840:	ldr	lr, [r0, #4]
   15844:	adds	r2, r2, #1
   15848:	adc	lr, lr, #0
   1584c:	str	r2, [r0]
   15850:	str	lr, [r0, #4]
   15854:	tst	r1, #1
   15858:	beq	1586c <next@@Base+0x1670>
   1585c:	movw	r0, #1
   15860:	bl	11fa4 <exit@plt>
   15864:	andeq	ip, r1, r4, lsr #24
   15868:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1586c:	ldrb	r0, [sp, #59]	; 0x3b
   15870:	ldr	r1, [sp, #64]	; 0x40
   15874:	add	r2, r1, #1
   15878:	str	r2, [sp, #64]	; 0x40
   1587c:	add	r2, sp, #72	; 0x48
   15880:	strb	r0, [r2, r1]
   15884:	ldr	r0, [fp, #-16]
   15888:	bl	13fc0 <get_char@@Base>
   1588c:	strb	r0, [sp, #59]	; 0x3b
   15890:	ldrb	r0, [sp, #59]	; 0x3b
   15894:	sub	r1, r0, #110	; 0x6e
   15898:	cmp	r0, #110	; 0x6e
   1589c:	movwne	r1, #1
   158a0:	mov	r2, #952	; 0x3b8
   158a4:	cmp	r0, #110	; 0x6e
   158a8:	movwne	r2, #944	; 0x3b0
   158ac:	ldr	r0, [pc, #1632]	; 15f14 <next@@Base+0x1d18>
   158b0:	add	r0, pc, r0
   158b4:	ldr	r2, [r0, r2]!
   158b8:	ldr	lr, [r0, #4]
   158bc:	adds	r2, r2, #1
   158c0:	adc	lr, lr, #0
   158c4:	str	r2, [r0]
   158c8:	str	lr, [r0, #4]
   158cc:	tst	r1, #1
   158d0:	beq	158e8 <next@@Base+0x16ec>
   158d4:	movw	r0, #1
   158d8:	bl	11fa4 <exit@plt>
   158dc:	andeq	ip, r1, r0, lsr #23
   158e0:	andeq	ip, r1, r8, ror fp
   158e4:	andeq	ip, r1, r8, lsl #22
   158e8:	ldr	r0, [pc, #1576]	; 15f18 <next@@Base+0x1d1c>
   158ec:	add	r0, pc, r0
   158f0:	ldr	r1, [r0, #960]	; 0x3c0
   158f4:	ldr	r2, [r0, #964]	; 0x3c4
   158f8:	adds	r1, r1, #1
   158fc:	adc	r2, r2, #0
   15900:	str	r1, [r0, #960]	; 0x3c0
   15904:	str	r2, [r0, #964]	; 0x3c4
   15908:	ldrb	r0, [sp, #59]	; 0x3b
   1590c:	ldr	r1, [sp, #64]	; 0x40
   15910:	add	r2, r1, #1
   15914:	str	r2, [sp, #64]	; 0x40
   15918:	add	r2, sp, #72	; 0x48
   1591c:	strb	r0, [r2, r1]
   15920:	ldr	r0, [sp, #64]	; 0x40
   15924:	mov	r1, #0
   15928:	strb	r1, [r2, r0]
   1592c:	ldr	r0, [sp, #64]	; 0x40
   15930:	mov	r1, r0
   15934:	add	r0, r0, #1
   15938:	str	r1, [sp, #8]
   1593c:	bl	11f68 <malloc@plt>
   15940:	add	r1, sp, #72	; 0x48
   15944:	str	r0, [sp, #68]	; 0x44
   15948:	ldr	r0, [sp, #68]	; 0x44
   1594c:	ldr	r2, [sp, #64]	; 0x40
   15950:	bl	12010 <strncpy@plt>
   15954:	ldr	r1, [sp, #68]	; 0x44
   15958:	ldr	r2, [sp, #64]	; 0x40
   1595c:	add	r1, r1, r2
   15960:	movw	r2, #0
   15964:	strb	r2, [r1]
   15968:	movw	r1, #8
   1596c:	str	r0, [sp, #4]
   15970:	mov	r0, r1
   15974:	bl	11f68 <malloc@plt>
   15978:	str	r0, [sp, #52]	; 0x34
   1597c:	ldr	r0, [sp, #52]	; 0x34
   15980:	ldr	r1, [sp, #68]	; 0x44
   15984:	bl	12cbc <init_token_function@@Base>
   15988:	ldr	r0, [sp, #52]	; 0x34
   1598c:	str	r0, [fp, #-12]
   15990:	b	15e2c <next@@Base+0x1c30>
   15994:	andeq	ip, r1, r0, ror #21
   15998:	ldr	r0, [pc, #1404]	; 15f1c <next@@Base+0x1d20>
   1599c:	add	r0, pc, r0
   159a0:	add	r1, r0, #40	; 0x28
   159a4:	ldr	r0, [pc, #1396]	; 15f20 <next@@Base+0x1d24>
   159a8:	add	r0, pc, r0
   159ac:	bl	15f68 <next@@Base+0x1d6c>
   159b0:	ldrb	r0, [sp, #59]	; 0x3b
   159b4:	sub	r1, r0, #101	; 0x65
   159b8:	cmp	r0, #101	; 0x65
   159bc:	movwne	r1, #1
   159c0:	mov	lr, #976	; 0x3d0
   159c4:	cmp	r0, #101	; 0x65
   159c8:	movwne	lr, #968	; 0x3c8
   159cc:	ldr	r0, [pc, #1360]	; 15f24 <next@@Base+0x1d28>
   159d0:	add	r0, pc, r0
   159d4:	ldr	lr, [r0, lr]!
   159d8:	ldr	r2, [r0, #4]
   159dc:	adds	lr, lr, #1
   159e0:	adc	r2, r2, #0
   159e4:	str	lr, [r0]
   159e8:	str	r2, [r0, #4]
   159ec:	tst	r1, #1
   159f0:	beq	15a04 <next@@Base+0x1808>
   159f4:	movw	r0, #1
   159f8:	bl	11fa4 <exit@plt>
   159fc:	andeq	ip, r1, r0, ror sl
   15a00:	andeq	ip, r1, r8, asr #20
   15a04:	ldrb	r0, [sp, #59]	; 0x3b
   15a08:	ldr	r1, [sp, #64]	; 0x40
   15a0c:	add	r2, r1, #1
   15a10:	str	r2, [sp, #64]	; 0x40
   15a14:	add	r2, sp, #72	; 0x48
   15a18:	strb	r0, [r2, r1]
   15a1c:	ldr	r0, [fp, #-16]
   15a20:	bl	13fc0 <get_char@@Base>
   15a24:	strb	r0, [sp, #59]	; 0x3b
   15a28:	ldrb	r0, [sp, #59]	; 0x3b
   15a2c:	sub	r1, r0, #116	; 0x74
   15a30:	cmp	r0, #116	; 0x74
   15a34:	movwne	r1, #1
   15a38:	mov	r2, #992	; 0x3e0
   15a3c:	cmp	r0, #116	; 0x74
   15a40:	movwne	r2, #984	; 0x3d8
   15a44:	ldr	r0, [pc, #1244]	; 15f28 <next@@Base+0x1d2c>
   15a48:	add	r0, pc, r0
   15a4c:	ldr	r2, [r0, r2]!
   15a50:	ldr	lr, [r0, #4]
   15a54:	adds	r2, r2, #1
   15a58:	adc	lr, lr, #0
   15a5c:	str	r2, [r0]
   15a60:	str	lr, [r0, #4]
   15a64:	tst	r1, #1
   15a68:	beq	15a7c <next@@Base+0x1880>
   15a6c:	movw	r0, #1
   15a70:	bl	11fa4 <exit@plt>
   15a74:	ldrdeq	ip, [r1], -r8
   15a78:			; <UNDEFINED> instruction: 0x0001c9b0
   15a7c:	ldrb	r0, [sp, #59]	; 0x3b
   15a80:	ldr	r1, [sp, #64]	; 0x40
   15a84:	add	r2, r1, #1
   15a88:	str	r2, [sp, #64]	; 0x40
   15a8c:	add	r2, sp, #72	; 0x48
   15a90:	strb	r0, [r2, r1]
   15a94:	ldr	r0, [fp, #-16]
   15a98:	bl	13fc0 <get_char@@Base>
   15a9c:	strb	r0, [sp, #59]	; 0x3b
   15aa0:	ldrb	r0, [sp, #59]	; 0x3b
   15aa4:	sub	r1, r0, #117	; 0x75
   15aa8:	cmp	r0, #117	; 0x75
   15aac:	movwne	r1, #1
   15ab0:	mov	r2, #1008	; 0x3f0
   15ab4:	cmp	r0, #117	; 0x75
   15ab8:	movwne	r2, #1000	; 0x3e8
   15abc:	ldr	r0, [pc, #1128]	; 15f2c <next@@Base+0x1d30>
   15ac0:	add	r0, pc, r0
   15ac4:	ldr	r2, [r0, r2]!
   15ac8:	ldr	lr, [r0, #4]
   15acc:	adds	r2, r2, #1
   15ad0:	adc	lr, lr, #0
   15ad4:	str	r2, [r0]
   15ad8:	str	lr, [r0, #4]
   15adc:	tst	r1, #1
   15ae0:	beq	15af0 <next@@Base+0x18f4>
   15ae4:	movw	r0, #1
   15ae8:	bl	11fa4 <exit@plt>
   15aec:	andeq	ip, r1, r0, asr #18
   15af0:	ldrb	r0, [sp, #59]	; 0x3b
   15af4:	ldr	r1, [sp, #64]	; 0x40
   15af8:	add	r2, r1, #1
   15afc:	str	r2, [sp, #64]	; 0x40
   15b00:	add	r2, sp, #72	; 0x48
   15b04:	strb	r0, [r2, r1]
   15b08:	ldr	r0, [fp, #-16]
   15b0c:	bl	13fc0 <get_char@@Base>
   15b10:	strb	r0, [sp, #59]	; 0x3b
   15b14:	ldrb	r0, [sp, #59]	; 0x3b
   15b18:	sub	r1, r0, #114	; 0x72
   15b1c:	cmp	r0, #114	; 0x72
   15b20:	movwne	r1, #1
   15b24:	mov	r2, #1024	; 0x400
   15b28:	cmp	r0, #114	; 0x72
   15b2c:	movwne	r2, #1016	; 0x3f8
   15b30:	ldr	r0, [pc, #1016]	; 15f30 <next@@Base+0x1d34>
   15b34:	add	r0, pc, r0
   15b38:	ldr	r2, [r0, r2]!
   15b3c:	ldr	lr, [r0, #4]
   15b40:	adds	r2, r2, #1
   15b44:	adc	lr, lr, #0
   15b48:	str	r2, [r0]
   15b4c:	str	lr, [r0, #4]
   15b50:	tst	r1, #1
   15b54:	beq	15b64 <next@@Base+0x1968>
   15b58:	movw	r0, #1
   15b5c:	bl	11fa4 <exit@plt>
   15b60:	andeq	ip, r1, ip, asr #17
   15b64:	ldrb	r0, [sp, #59]	; 0x3b
   15b68:	ldr	r1, [sp, #64]	; 0x40
   15b6c:	add	r2, r1, #1
   15b70:	str	r2, [sp, #64]	; 0x40
   15b74:	add	r2, sp, #72	; 0x48
   15b78:	strb	r0, [r2, r1]
   15b7c:	ldr	r0, [fp, #-16]
   15b80:	bl	13fc0 <get_char@@Base>
   15b84:	strb	r0, [sp, #59]	; 0x3b
   15b88:	ldrb	r0, [sp, #59]	; 0x3b
   15b8c:	sub	r1, r0, #110	; 0x6e
   15b90:	cmp	r0, #110	; 0x6e
   15b94:	movwne	r1, #1
   15b98:	mov	r2, #1040	; 0x410
   15b9c:	cmp	r0, #110	; 0x6e
   15ba0:	movwne	r2, #1032	; 0x408
   15ba4:	ldr	r0, [pc, #904]	; 15f34 <next@@Base+0x1d38>
   15ba8:	add	r0, pc, r0
   15bac:	ldr	r2, [r0, r2]!
   15bb0:	ldr	lr, [r0, #4]
   15bb4:	adds	r2, r2, #1
   15bb8:	adc	lr, lr, #0
   15bbc:	str	r2, [r0]
   15bc0:	str	lr, [r0, #4]
   15bc4:	tst	r1, #1
   15bc8:	beq	15bd8 <next@@Base+0x19dc>
   15bcc:	movw	r0, #1
   15bd0:	bl	11fa4 <exit@plt>
   15bd4:	andeq	ip, r1, r4, lsr #17
   15bd8:	ldr	r0, [pc, #856]	; 15f38 <next@@Base+0x1d3c>
   15bdc:	add	r0, pc, r0
   15be0:	ldr	r1, [r0, #1048]	; 0x418
   15be4:	ldr	r2, [r0, #1052]	; 0x41c
   15be8:	adds	r1, r1, #1
   15bec:	adc	r2, r2, #0
   15bf0:	str	r1, [r0, #1048]	; 0x418
   15bf4:	str	r2, [r0, #1052]	; 0x41c
   15bf8:	movw	r0, #4
   15bfc:	bl	11f68 <malloc@plt>
   15c00:	str	r0, [sp, #52]	; 0x34
   15c04:	ldr	r0, [sp, #52]	; 0x34
   15c08:	bl	12f18 <init_token_return@@Base>
   15c0c:	ldr	r0, [sp, #52]	; 0x34
   15c10:	str	r0, [fp, #-12]
   15c14:	b	15e2c <next@@Base+0x1c30>
   15c18:	andeq	ip, r1, r4, asr r8
   15c1c:	ldr	r0, [pc, #792]	; 15f3c <next@@Base+0x1d40>
   15c20:	add	r0, pc, r0
   15c24:	add	r1, r0, #48	; 0x30
   15c28:	ldr	r0, [pc, #784]	; 15f40 <next@@Base+0x1d44>
   15c2c:	add	r0, pc, r0
   15c30:	bl	15f68 <next@@Base+0x1d6c>
   15c34:	ldrb	r0, [sp, #59]	; 0x3b
   15c38:	sub	r1, r0, #108	; 0x6c
   15c3c:	cmp	r0, #108	; 0x6c
   15c40:	movwne	r1, #1
   15c44:	movw	lr, #1064	; 0x428
   15c48:	cmp	r0, #108	; 0x6c
   15c4c:	movwne	lr, #1056	; 0x420
   15c50:	ldr	r0, [pc, #748]	; 15f44 <next@@Base+0x1d48>
   15c54:	add	r0, pc, r0
   15c58:	ldr	lr, [r0, lr]!
   15c5c:	ldr	r2, [r0, #4]
   15c60:	adds	lr, lr, #1
   15c64:	adc	r2, r2, #0
   15c68:	str	lr, [r0]
   15c6c:	str	r2, [r0, #4]
   15c70:	tst	r1, #1
   15c74:	beq	15c88 <next@@Base+0x1a8c>
   15c78:	movw	r0, #1
   15c7c:	bl	11fa4 <exit@plt>
   15c80:	andeq	ip, r1, r4, lsl #16
   15c84:			; <UNDEFINED> instruction: 0x0001c7b0
   15c88:	ldrb	r0, [sp, #59]	; 0x3b
   15c8c:	ldr	r1, [sp, #64]	; 0x40
   15c90:	add	r2, r1, #1
   15c94:	str	r2, [sp, #64]	; 0x40
   15c98:	add	r2, sp, #72	; 0x48
   15c9c:	strb	r0, [r2, r1]
   15ca0:	ldr	r0, [fp, #-16]
   15ca4:	bl	13fc0 <get_char@@Base>
   15ca8:	strb	r0, [sp, #59]	; 0x3b
   15cac:	ldrb	r0, [sp, #59]	; 0x3b
   15cb0:	sub	r1, r0, #115	; 0x73
   15cb4:	cmp	r0, #115	; 0x73
   15cb8:	movwne	r1, #1
   15cbc:	movw	r2, #1080	; 0x438
   15cc0:	cmp	r0, #115	; 0x73
   15cc4:	movwne	r2, #1072	; 0x430
   15cc8:	ldr	r0, [pc, #632]	; 15f48 <next@@Base+0x1d4c>
   15ccc:	add	r0, pc, r0
   15cd0:	ldr	r2, [r0, r2]!
   15cd4:	ldr	lr, [r0, #4]
   15cd8:	adds	r2, r2, #1
   15cdc:	adc	lr, lr, #0
   15ce0:	str	r2, [r0]
   15ce4:	str	lr, [r0, #4]
   15ce8:	tst	r1, #1
   15cec:	beq	15cfc <next@@Base+0x1b00>
   15cf0:	movw	r0, #1
   15cf4:	bl	11fa4 <exit@plt>
   15cf8:	andeq	ip, r1, ip, ror #14
   15cfc:	ldrb	r0, [sp, #59]	; 0x3b
   15d00:	ldr	r1, [sp, #64]	; 0x40
   15d04:	add	r2, r1, #1
   15d08:	str	r2, [sp, #64]	; 0x40
   15d0c:	add	r2, sp, #72	; 0x48
   15d10:	strb	r0, [r2, r1]
   15d14:	ldr	r0, [fp, #-16]
   15d18:	bl	13fc0 <get_char@@Base>
   15d1c:	strb	r0, [sp, #59]	; 0x3b
   15d20:	ldrb	r0, [sp, #59]	; 0x3b
   15d24:	sub	r1, r0, #101	; 0x65
   15d28:	cmp	r0, #101	; 0x65
   15d2c:	movwne	r1, #1
   15d30:	movw	r2, #1096	; 0x448
   15d34:	cmp	r0, #101	; 0x65
   15d38:	movwne	r2, #1088	; 0x440
   15d3c:	ldr	r0, [pc, #520]	; 15f4c <next@@Base+0x1d50>
   15d40:	add	r0, pc, r0
   15d44:	ldr	r2, [r0, r2]!
   15d48:	ldr	lr, [r0, #4]
   15d4c:	adds	r2, r2, #1
   15d50:	adc	lr, lr, #0
   15d54:	str	r2, [r0]
   15d58:	str	lr, [r0, #4]
   15d5c:	tst	r1, #1
   15d60:	beq	15d70 <next@@Base+0x1b74>
   15d64:	movw	r0, #1
   15d68:	bl	11fa4 <exit@plt>
   15d6c:	strdeq	ip, [r1], -r8
   15d70:	ldr	r0, [pc, #472]	; 15f50 <next@@Base+0x1d54>
   15d74:	add	r0, pc, r0
   15d78:	ldr	r1, [r0, #1104]	; 0x450
   15d7c:	ldr	r2, [r0, #1108]	; 0x454
   15d80:	adds	r1, r1, #1
   15d84:	adc	r2, r2, #0
   15d88:	str	r1, [r0, #1104]	; 0x450
   15d8c:	str	r2, [r0, #1108]	; 0x454
   15d90:	movw	r0, #4
   15d94:	bl	11f68 <malloc@plt>
   15d98:	str	r0, [sp, #52]	; 0x34
   15d9c:	ldr	r0, [sp, #52]	; 0x34
   15da0:	bl	130e8 <init_token_else@@Base>
   15da4:	ldr	r0, [sp, #52]	; 0x34
   15da8:	str	r0, [fp, #-12]
   15dac:	b	15e2c <next@@Base+0x1c30>
   15db0:	ldrdeq	ip, [r1], -r0
   15db4:	ldr	r0, [pc, #408]	; 15f54 <next@@Base+0x1d58>
   15db8:	add	r0, pc, r0
   15dbc:	ldr	r1, [pc, #404]	; 15f58 <next@@Base+0x1d5c>
   15dc0:	add	r1, pc, r1
   15dc4:	bl	15f68 <next@@Base+0x1d6c>
   15dc8:	ldr	r0, [pc, #396]	; 15f5c <next@@Base+0x1d60>
   15dcc:	add	r0, pc, r0
   15dd0:	ldr	r1, [r0, #1112]	; 0x458
   15dd4:	ldr	lr, [r0, #1116]	; 0x45c
   15dd8:	adds	r1, r1, #1
   15ddc:	adc	lr, lr, #0
   15de0:	str	r1, [r0, #1112]	; 0x458
   15de4:	str	lr, [r0, #1116]	; 0x45c
   15de8:	b	14330 <next@@Base+0x134>
   15dec:	andeq	ip, r1, r0, lsl #13
   15df0:	ldr	r0, [pc, #360]	; 15f60 <next@@Base+0x1d64>
   15df4:	add	r0, pc, r0
   15df8:	ldr	r1, [r0, #1120]	; 0x460
   15dfc:	ldr	r2, [r0, #1124]	; 0x464
   15e00:	adds	r1, r1, #1
   15e04:	adc	r2, r2, #0
   15e08:	str	r1, [r0, #1120]	; 0x460
   15e0c:	str	r2, [r0, #1124]	; 0x464
   15e10:	movw	r0, #4
   15e14:	bl	11f68 <malloc@plt>
   15e18:	str	r0, [sp, #52]	; 0x34
   15e1c:	ldr	r0, [sp, #52]	; 0x34
   15e20:	bl	13000 <init_token_eof@@Base>
   15e24:	ldr	r0, [sp, #52]	; 0x34
   15e28:	str	r0, [fp, #-12]
   15e2c:	ldr	r0, [pc, #304]	; 15f64 <next@@Base+0x1d68>
   15e30:	add	r0, pc, r0
   15e34:	ldr	r1, [r0, #1128]	; 0x468
   15e38:	ldr	r2, [r0, #1132]	; 0x46c
   15e3c:	adds	r1, r1, #1
   15e40:	adc	r2, r2, #0
   15e44:	str	r1, [r0, #1128]	; 0x468
   15e48:	str	r2, [r0, #1132]	; 0x46c
   15e4c:	ldr	r0, [fp, #-12]
   15e50:	sub	sp, fp, #8
   15e54:	pop	{r4, r5, fp, pc}
   15e58:	andeq	ip, r1, r0, lsr r6
   15e5c:	andeq	fp, r1, r8, ror #18
   15e60:	strheq	fp, [r1], -r8
   15e64:	andeq	r9, r0, r9, lsl r7
   15e68:	andeq	fp, r1, r0, lsr #29
   15e6c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15e70:	andeq	ip, r1, r8, ror #10
   15e74:	andeq	ip, r1, r8, lsr r5
   15e78:			; <UNDEFINED> instruction: 0x0001c4b4
   15e7c:	andeq	ip, r1, r0, asr #8
   15e80:	andeq	ip, r1, r0, lsl r4
   15e84:	andeq	ip, r1, ip, lsl #7
   15e88:	andeq	ip, r1, r8, lsl r3
   15e8c:	andeq	ip, r1, r8, ror #5
   15e90:	andeq	ip, r1, r0, lsr r2
   15e94:	andeq	ip, r1, r0, lsl r2
   15e98:	strdeq	ip, [r1], -r0
   15e9c:	ldrdeq	ip, [r1], -r0
   15ea0:			; <UNDEFINED> instruction: 0x0001c1b0
   15ea4:	muleq	r1, r0, r1
   15ea8:	andeq	ip, r1, r0, ror r1
   15eac:	andeq	ip, r1, r0, asr r1
   15eb0:	andeq	ip, r1, r0, lsr r1
   15eb4:	andeq	ip, r1, r0, lsl r1
   15eb8:	strdeq	ip, [r1], -r0
   15ebc:	ldrdeq	ip, [r1], -r0
   15ec0:	andeq	fp, r1, r4, lsr r4
   15ec4:	ldrdeq	fp, [r1], -r0
   15ec8:	andeq	ip, r1, ip, ror r0
   15ecc:	andeq	ip, r1, r0, asr #32
   15ed0:	andeq	ip, r1, r0, lsl r0
   15ed4:	andeq	fp, r1, ip, asr #31
   15ed8:	andeq	fp, r1, r4, lsr #31
   15edc:	andeq	fp, r1, r4, asr pc
   15ee0:	andeq	fp, r1, r0, ror r2
   15ee4:	andeq	fp, r1, ip, lsl #22
   15ee8:	andeq	fp, r1, r8, lsl r2
   15eec:			; <UNDEFINED> instruction: 0x0001bab4
   15ef0:	andeq	fp, r1, r0, lsr #28
   15ef4:	strdeq	fp, [r1], -r0
   15ef8:	andeq	fp, r1, r4, asr #2
   15efc:	andeq	fp, r1, r0, ror #19
   15f00:	andeq	fp, r1, ip, lsl #27
   15f04:	muleq	r1, r8, r0
   15f08:	andeq	fp, r1, r4, lsr r9
   15f0c:	andeq	fp, r1, r4, asr #25
   15f10:	andeq	fp, r1, r0, asr ip
   15f14:	ldrdeq	fp, [r1], -r8
   15f18:	muleq	r1, ip, fp
   15f1c:	andeq	sl, r1, ip, lsl #29
   15f20:	andeq	fp, r1, r8, lsr #14
   15f24:			; <UNDEFINED> instruction: 0x0001bab8
   15f28:	andeq	fp, r1, r0, asr #20
   15f2c:	andeq	fp, r1, r8, asr #19
   15f30:	andeq	fp, r1, r4, asr r9
   15f34:	andeq	fp, r1, r0, ror #17
   15f38:	andeq	fp, r1, ip, lsr #17
   15f3c:	andeq	sl, r1, r8, lsl #24
   15f40:	andeq	fp, r1, r4, lsr #9
   15f44:	andeq	fp, r1, r4, lsr r8
   15f48:			; <UNDEFINED> instruction: 0x0001b7bc
   15f4c:	andeq	fp, r1, r8, asr #14
   15f50:	andeq	fp, r1, r4, lsl r7
   15f54:	andeq	fp, r1, r8, lsl r3
   15f58:	andeq	sl, r1, r8, ror #20
   15f5c:			; <UNDEFINED> instruction: 0x0001b6bc
   15f60:	muleq	r1, r4, r6
   15f64:	andeq	fp, r1, r8, asr r6
   15f68:	sub	sp, sp, #12
   15f6c:	ldr	r0, [r0]
   15f70:	cmn	r0, #1
   15f74:	str	r1, [sp, #8]
   15f78:	str	r0, [sp, #4]
   15f7c:	beq	15fbc <next@@Base+0x1dc0>
   15f80:	ldr	r0, [sp, #8]
   15f84:	ldr	r1, [sp, #4]
   15f88:	add	r2, r0, r1, lsl #2
   15f8c:	ldr	r2, [r2]
   15f90:	movw	r3, #0
   15f94:	cmp	r2, r3
   15f98:	str	r2, [sp]
   15f9c:	beq	15fbc <next@@Base+0x1dc0>
   15fa0:	ldr	r0, [sp]
   15fa4:	ldr	r1, [r0]
   15fa8:	ldr	r2, [r0, #4]
   15fac:	adds	r1, r1, #1
   15fb0:	adc	r2, r2, #0
   15fb4:	str	r1, [r0]
   15fb8:	str	r2, [r0, #4]
   15fbc:	add	sp, sp, #12
   15fc0:	bx	lr
   15fc4:	push	{r4, sl, fp, lr}
   15fc8:	add	fp, sp, #8
   15fcc:	sub	sp, sp, #40	; 0x28
   15fd0:	movw	r0, #0
   15fd4:	str	r0, [fp, #-12]
   15fd8:	b	15fdc <next@@Base+0x1de0>
   15fdc:	ldr	r0, [fp, #-12]
   15fe0:	ldr	r1, [pc, #244]	; 160dc <next@@Base+0x1ee0>
   15fe4:	add	r1, pc, r1
   15fe8:	movw	r2, #24
   15fec:	mul	r2, r0, r2
   15ff0:	add	r1, r1, r2
   15ff4:	ldr	r2, [r1]
   15ff8:	ldr	r3, [r1, #4]
   15ffc:	ldr	ip, [r1, #8]
   16000:	str	r0, [fp, #-16]
   16004:	mov	r0, r2
   16008:	str	r1, [fp, #-20]	; 0xffffffec
   1600c:	mov	r1, r3
   16010:	mov	r2, ip
   16014:	bl	1b58c <__generate_code_for_binary_boolean_expression@@Base+0xa10>
   16018:	ldr	r0, [fp, #-20]	; 0xffffffec
   1601c:	ldr	r1, [r0, #12]
   16020:	ldr	r2, [r0, #16]
   16024:	ldr	r3, [r0, #20]
   16028:	movw	ip, #0
   1602c:	cmp	ip, r1
   16030:	str	r1, [sp, #24]
   16034:	str	r2, [sp, #20]
   16038:	str	r3, [sp, #16]
   1603c:	str	ip, [sp, #12]
   16040:	bge	160b8 <next@@Base+0x1ebc>
   16044:	ldr	r0, [sp, #12]
   16048:	add	r1, r0, r0, lsl #2
   1604c:	ldr	r2, [sp, #20]
   16050:	ldr	r1, [r2, r1, lsl #2]!
   16054:	ldr	r3, [r2, #4]
   16058:	ldr	ip, [r2, #8]
   1605c:	ldr	lr, [r2, #16]
   16060:	ldrb	r2, [r2, #12]
   16064:	mov	r4, sp
   16068:	str	lr, [r4]
   1606c:	str	r0, [sp, #8]
   16070:	mov	r0, r1
   16074:	mov	r1, r3
   16078:	str	r2, [sp, #4]
   1607c:	mov	r2, ip
   16080:	ldr	r3, [sp, #4]
   16084:	bl	1bcf0 <__generate_code_for_binary_boolean_expression@@Base+0x1174>
   16088:	ldr	r0, [sp, #16]
   1608c:	ldr	r1, [sp, #8]
   16090:	add	r2, r0, r1, lsl #3
   16094:	ldr	r0, [r2]
   16098:	ldr	r1, [r2, #4]
   1609c:	bl	1c5a4 <__generate_code_for_binary_boolean_expression@@Base+0x1a28>
   160a0:	ldr	r0, [sp, #8]
   160a4:	add	r1, r0, #1
   160a8:	ldr	r2, [sp, #24]
   160ac:	cmp	r1, r2
   160b0:	str	r1, [sp, #12]
   160b4:	blt	16044 <next@@Base+0x1e48>
   160b8:	bl	1cd20 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   160bc:	bl	1da8c <__generate_code_for_binary_boolean_expression@@Base+0x2f10>
   160c0:	ldr	lr, [fp, #-16]
   160c4:	add	r0, lr, #1
   160c8:	cmp	r0, #1
   160cc:	str	r0, [fp, #-12]
   160d0:	blt	15fdc <next@@Base+0x1de0>
   160d4:	sub	sp, fp, #8
   160d8:	pop	{r4, sl, fp, pc}
   160dc:	andeq	sl, r1, r4, ror r9
   160e0:	push	{fp, lr}
   160e4:	mov	fp, sp
   160e8:	bl	15fc4 <next@@Base+0x1dc8>
   160ec:	ldr	lr, [pc, #1360]	; 16644 <next@@Base+0x2448>
   160f0:	add	lr, pc, lr
   160f4:	mov	r0, #0
   160f8:	str	r0, [lr, #12]
   160fc:	str	r0, [lr, #8]
   16100:	str	r0, [lr, #4]
   16104:	str	r0, [lr]
   16108:	ldr	lr, [pc, #1336]	; 16648 <next@@Base+0x244c>
   1610c:	add	lr, pc, lr
   16110:	str	r0, [lr, #36]	; 0x24
   16114:	str	r0, [lr, #32]
   16118:	str	r0, [lr, #28]
   1611c:	str	r0, [lr, #24]
   16120:	str	r0, [lr, #20]
   16124:	str	r0, [lr, #16]
   16128:	str	r0, [lr, #12]
   1612c:	str	r0, [lr, #8]
   16130:	str	r0, [lr, #4]
   16134:	str	r0, [lr]
   16138:	ldr	lr, [pc, #1292]	; 1664c <next@@Base+0x2450>
   1613c:	add	lr, pc, lr
   16140:	str	r0, [lr, #12]
   16144:	str	r0, [lr, #8]
   16148:	str	r0, [lr, #4]
   1614c:	str	r0, [lr]
   16150:	ldr	lr, [pc, #1272]	; 16650 <next@@Base+0x2454>
   16154:	add	lr, pc, lr
   16158:	str	r0, [lr, #12]
   1615c:	str	r0, [lr, #8]
   16160:	str	r0, [lr, #4]
   16164:	str	r0, [lr]
   16168:	ldr	lr, [pc, #1252]	; 16654 <next@@Base+0x2458>
   1616c:	add	lr, pc, lr
   16170:	str	r0, [lr, #12]
   16174:	str	r0, [lr, #8]
   16178:	str	r0, [lr, #4]
   1617c:	str	r0, [lr]
   16180:	ldr	lr, [pc, #1232]	; 16658 <next@@Base+0x245c>
   16184:	add	lr, pc, lr
   16188:	str	r0, [lr, #36]	; 0x24
   1618c:	str	r0, [lr, #32]
   16190:	str	r0, [lr, #28]
   16194:	str	r0, [lr, #24]
   16198:	str	r0, [lr, #20]
   1619c:	str	r0, [lr, #16]
   161a0:	str	r0, [lr, #12]
   161a4:	str	r0, [lr, #8]
   161a8:	str	r0, [lr, #4]
   161ac:	str	r0, [lr]
   161b0:	ldr	lr, [pc, #1188]	; 1665c <next@@Base+0x2460>
   161b4:	add	lr, pc, lr
   161b8:	str	r0, [lr, #12]
   161bc:	str	r0, [lr, #8]
   161c0:	str	r0, [lr, #4]
   161c4:	str	r0, [lr]
   161c8:	ldr	lr, [pc, #1168]	; 16660 <next@@Base+0x2464>
   161cc:	add	lr, pc, lr
   161d0:	str	r0, [lr, #508]	; 0x1fc
   161d4:	str	r0, [lr, #504]	; 0x1f8
   161d8:	str	r0, [lr, #500]	; 0x1f4
   161dc:	str	r0, [lr, #496]	; 0x1f0
   161e0:	str	r0, [lr, #492]	; 0x1ec
   161e4:	str	r0, [lr, #488]	; 0x1e8
   161e8:	str	r0, [lr, #484]	; 0x1e4
   161ec:	str	r0, [lr, #480]	; 0x1e0
   161f0:	str	r0, [lr, #476]	; 0x1dc
   161f4:	str	r0, [lr, #472]	; 0x1d8
   161f8:	str	r0, [lr, #468]	; 0x1d4
   161fc:	str	r0, [lr, #464]	; 0x1d0
   16200:	str	r0, [lr, #460]	; 0x1cc
   16204:	str	r0, [lr, #456]	; 0x1c8
   16208:	str	r0, [lr, #452]	; 0x1c4
   1620c:	str	r0, [lr, #448]	; 0x1c0
   16210:	str	r0, [lr, #444]	; 0x1bc
   16214:	str	r0, [lr, #440]	; 0x1b8
   16218:	str	r0, [lr, #436]	; 0x1b4
   1621c:	str	r0, [lr, #432]	; 0x1b0
   16220:	str	r0, [lr, #428]	; 0x1ac
   16224:	str	r0, [lr, #424]	; 0x1a8
   16228:	str	r0, [lr, #420]	; 0x1a4
   1622c:	str	r0, [lr, #416]	; 0x1a0
   16230:	str	r0, [lr, #412]	; 0x19c
   16234:	str	r0, [lr, #408]	; 0x198
   16238:	str	r0, [lr, #404]	; 0x194
   1623c:	str	r0, [lr, #400]	; 0x190
   16240:	str	r0, [lr, #396]	; 0x18c
   16244:	str	r0, [lr, #392]	; 0x188
   16248:	str	r0, [lr, #388]	; 0x184
   1624c:	str	r0, [lr, #384]	; 0x180
   16250:	str	r0, [lr, #380]	; 0x17c
   16254:	str	r0, [lr, #376]	; 0x178
   16258:	str	r0, [lr, #372]	; 0x174
   1625c:	str	r0, [lr, #368]	; 0x170
   16260:	str	r0, [lr, #364]	; 0x16c
   16264:	str	r0, [lr, #360]	; 0x168
   16268:	str	r0, [lr, #356]	; 0x164
   1626c:	str	r0, [lr, #352]	; 0x160
   16270:	str	r0, [lr, #348]	; 0x15c
   16274:	str	r0, [lr, #344]	; 0x158
   16278:	str	r0, [lr, #340]	; 0x154
   1627c:	str	r0, [lr, #336]	; 0x150
   16280:	str	r0, [lr, #332]	; 0x14c
   16284:	str	r0, [lr, #328]	; 0x148
   16288:	str	r0, [lr, #324]	; 0x144
   1628c:	str	r0, [lr, #320]	; 0x140
   16290:	str	r0, [lr, #316]	; 0x13c
   16294:	str	r0, [lr, #312]	; 0x138
   16298:	str	r0, [lr, #308]	; 0x134
   1629c:	str	r0, [lr, #304]	; 0x130
   162a0:	str	r0, [lr, #300]	; 0x12c
   162a4:	str	r0, [lr, #296]	; 0x128
   162a8:	str	r0, [lr, #292]	; 0x124
   162ac:	str	r0, [lr, #288]	; 0x120
   162b0:	str	r0, [lr, #284]	; 0x11c
   162b4:	str	r0, [lr, #280]	; 0x118
   162b8:	str	r0, [lr, #276]	; 0x114
   162bc:	str	r0, [lr, #272]	; 0x110
   162c0:	str	r0, [lr, #268]	; 0x10c
   162c4:	str	r0, [lr, #264]	; 0x108
   162c8:	str	r0, [lr, #260]	; 0x104
   162cc:	str	r0, [lr, #256]	; 0x100
   162d0:	str	r0, [lr, #252]	; 0xfc
   162d4:	str	r0, [lr, #248]	; 0xf8
   162d8:	str	r0, [lr, #244]	; 0xf4
   162dc:	str	r0, [lr, #240]	; 0xf0
   162e0:	str	r0, [lr, #236]	; 0xec
   162e4:	str	r0, [lr, #232]	; 0xe8
   162e8:	str	r0, [lr, #228]	; 0xe4
   162ec:	str	r0, [lr, #224]	; 0xe0
   162f0:	str	r0, [lr, #220]	; 0xdc
   162f4:	str	r0, [lr, #216]	; 0xd8
   162f8:	str	r0, [lr, #212]	; 0xd4
   162fc:	str	r0, [lr, #208]	; 0xd0
   16300:	str	r0, [lr, #204]	; 0xcc
   16304:	str	r0, [lr, #200]	; 0xc8
   16308:	str	r0, [lr, #196]	; 0xc4
   1630c:	str	r0, [lr, #192]	; 0xc0
   16310:	str	r0, [lr, #188]	; 0xbc
   16314:	str	r0, [lr, #184]	; 0xb8
   16318:	str	r0, [lr, #180]	; 0xb4
   1631c:	str	r0, [lr, #176]	; 0xb0
   16320:	str	r0, [lr, #172]	; 0xac
   16324:	str	r0, [lr, #168]	; 0xa8
   16328:	str	r0, [lr, #164]	; 0xa4
   1632c:	str	r0, [lr, #160]	; 0xa0
   16330:	str	r0, [lr, #156]	; 0x9c
   16334:	str	r0, [lr, #152]	; 0x98
   16338:	str	r0, [lr, #148]	; 0x94
   1633c:	str	r0, [lr, #144]	; 0x90
   16340:	str	r0, [lr, #140]	; 0x8c
   16344:	str	r0, [lr, #136]	; 0x88
   16348:	str	r0, [lr, #132]	; 0x84
   1634c:	str	r0, [lr, #128]	; 0x80
   16350:	str	r0, [lr, #124]	; 0x7c
   16354:	str	r0, [lr, #120]	; 0x78
   16358:	str	r0, [lr, #116]	; 0x74
   1635c:	str	r0, [lr, #112]	; 0x70
   16360:	str	r0, [lr, #108]	; 0x6c
   16364:	str	r0, [lr, #104]	; 0x68
   16368:	str	r0, [lr, #100]	; 0x64
   1636c:	str	r0, [lr, #96]	; 0x60
   16370:	str	r0, [lr, #92]	; 0x5c
   16374:	str	r0, [lr, #88]	; 0x58
   16378:	str	r0, [lr, #84]	; 0x54
   1637c:	str	r0, [lr, #80]	; 0x50
   16380:	str	r0, [lr, #76]	; 0x4c
   16384:	str	r0, [lr, #72]	; 0x48
   16388:	str	r0, [lr, #68]	; 0x44
   1638c:	str	r0, [lr, #64]	; 0x40
   16390:	str	r0, [lr, #60]	; 0x3c
   16394:	str	r0, [lr, #56]	; 0x38
   16398:	str	r0, [lr, #52]	; 0x34
   1639c:	str	r0, [lr, #48]	; 0x30
   163a0:	str	r0, [lr, #44]	; 0x2c
   163a4:	str	r0, [lr, #40]	; 0x28
   163a8:	str	r0, [lr, #36]	; 0x24
   163ac:	str	r0, [lr, #32]
   163b0:	str	r0, [lr, #28]
   163b4:	str	r0, [lr, #24]
   163b8:	str	r0, [lr, #20]
   163bc:	str	r0, [lr, #16]
   163c0:	str	r0, [lr, #12]
   163c4:	str	r0, [lr, #8]
   163c8:	str	r0, [lr, #4]
   163cc:	str	r0, [lr]
   163d0:	str	r0, [lr, #1020]	; 0x3fc
   163d4:	str	r0, [lr, #1016]	; 0x3f8
   163d8:	str	r0, [lr, #1012]	; 0x3f4
   163dc:	str	r0, [lr, #1008]	; 0x3f0
   163e0:	str	r0, [lr, #1004]	; 0x3ec
   163e4:	str	r0, [lr, #1000]	; 0x3e8
   163e8:	str	r0, [lr, #996]	; 0x3e4
   163ec:	str	r0, [lr, #992]	; 0x3e0
   163f0:	str	r0, [lr, #988]	; 0x3dc
   163f4:	str	r0, [lr, #984]	; 0x3d8
   163f8:	str	r0, [lr, #980]	; 0x3d4
   163fc:	str	r0, [lr, #976]	; 0x3d0
   16400:	str	r0, [lr, #972]	; 0x3cc
   16404:	str	r0, [lr, #968]	; 0x3c8
   16408:	str	r0, [lr, #964]	; 0x3c4
   1640c:	str	r0, [lr, #960]	; 0x3c0
   16410:	str	r0, [lr, #956]	; 0x3bc
   16414:	str	r0, [lr, #952]	; 0x3b8
   16418:	str	r0, [lr, #948]	; 0x3b4
   1641c:	str	r0, [lr, #944]	; 0x3b0
   16420:	str	r0, [lr, #940]	; 0x3ac
   16424:	str	r0, [lr, #936]	; 0x3a8
   16428:	str	r0, [lr, #932]	; 0x3a4
   1642c:	str	r0, [lr, #928]	; 0x3a0
   16430:	str	r0, [lr, #924]	; 0x39c
   16434:	str	r0, [lr, #920]	; 0x398
   16438:	str	r0, [lr, #916]	; 0x394
   1643c:	str	r0, [lr, #912]	; 0x390
   16440:	str	r0, [lr, #908]	; 0x38c
   16444:	str	r0, [lr, #904]	; 0x388
   16448:	str	r0, [lr, #900]	; 0x384
   1644c:	str	r0, [lr, #896]	; 0x380
   16450:	str	r0, [lr, #892]	; 0x37c
   16454:	str	r0, [lr, #888]	; 0x378
   16458:	str	r0, [lr, #884]	; 0x374
   1645c:	str	r0, [lr, #880]	; 0x370
   16460:	str	r0, [lr, #876]	; 0x36c
   16464:	str	r0, [lr, #872]	; 0x368
   16468:	str	r0, [lr, #868]	; 0x364
   1646c:	str	r0, [lr, #864]	; 0x360
   16470:	str	r0, [lr, #860]	; 0x35c
   16474:	str	r0, [lr, #856]	; 0x358
   16478:	str	r0, [lr, #852]	; 0x354
   1647c:	str	r0, [lr, #848]	; 0x350
   16480:	str	r0, [lr, #844]	; 0x34c
   16484:	str	r0, [lr, #840]	; 0x348
   16488:	str	r0, [lr, #836]	; 0x344
   1648c:	str	r0, [lr, #832]	; 0x340
   16490:	str	r0, [lr, #828]	; 0x33c
   16494:	str	r0, [lr, #824]	; 0x338
   16498:	str	r0, [lr, #820]	; 0x334
   1649c:	str	r0, [lr, #816]	; 0x330
   164a0:	str	r0, [lr, #812]	; 0x32c
   164a4:	str	r0, [lr, #808]	; 0x328
   164a8:	str	r0, [lr, #804]	; 0x324
   164ac:	str	r0, [lr, #800]	; 0x320
   164b0:	str	r0, [lr, #796]	; 0x31c
   164b4:	str	r0, [lr, #792]	; 0x318
   164b8:	str	r0, [lr, #788]	; 0x314
   164bc:	str	r0, [lr, #784]	; 0x310
   164c0:	str	r0, [lr, #780]	; 0x30c
   164c4:	str	r0, [lr, #776]	; 0x308
   164c8:	str	r0, [lr, #772]	; 0x304
   164cc:	str	r0, [lr, #768]	; 0x300
   164d0:	str	r0, [lr, #764]	; 0x2fc
   164d4:	str	r0, [lr, #760]	; 0x2f8
   164d8:	str	r0, [lr, #756]	; 0x2f4
   164dc:	str	r0, [lr, #752]	; 0x2f0
   164e0:	str	r0, [lr, #748]	; 0x2ec
   164e4:	str	r0, [lr, #744]	; 0x2e8
   164e8:	str	r0, [lr, #740]	; 0x2e4
   164ec:	str	r0, [lr, #736]	; 0x2e0
   164f0:	str	r0, [lr, #732]	; 0x2dc
   164f4:	str	r0, [lr, #728]	; 0x2d8
   164f8:	str	r0, [lr, #724]	; 0x2d4
   164fc:	str	r0, [lr, #720]	; 0x2d0
   16500:	str	r0, [lr, #716]	; 0x2cc
   16504:	str	r0, [lr, #712]	; 0x2c8
   16508:	str	r0, [lr, #708]	; 0x2c4
   1650c:	str	r0, [lr, #704]	; 0x2c0
   16510:	str	r0, [lr, #700]	; 0x2bc
   16514:	str	r0, [lr, #696]	; 0x2b8
   16518:	str	r0, [lr, #692]	; 0x2b4
   1651c:	str	r0, [lr, #688]	; 0x2b0
   16520:	str	r0, [lr, #684]	; 0x2ac
   16524:	str	r0, [lr, #680]	; 0x2a8
   16528:	str	r0, [lr, #676]	; 0x2a4
   1652c:	str	r0, [lr, #672]	; 0x2a0
   16530:	str	r0, [lr, #668]	; 0x29c
   16534:	str	r0, [lr, #664]	; 0x298
   16538:	str	r0, [lr, #660]	; 0x294
   1653c:	str	r0, [lr, #656]	; 0x290
   16540:	str	r0, [lr, #652]	; 0x28c
   16544:	str	r0, [lr, #648]	; 0x288
   16548:	str	r0, [lr, #644]	; 0x284
   1654c:	str	r0, [lr, #640]	; 0x280
   16550:	str	r0, [lr, #636]	; 0x27c
   16554:	str	r0, [lr, #632]	; 0x278
   16558:	str	r0, [lr, #628]	; 0x274
   1655c:	str	r0, [lr, #624]	; 0x270
   16560:	str	r0, [lr, #620]	; 0x26c
   16564:	str	r0, [lr, #616]	; 0x268
   16568:	str	r0, [lr, #612]	; 0x264
   1656c:	str	r0, [lr, #608]	; 0x260
   16570:	str	r0, [lr, #604]	; 0x25c
   16574:	str	r0, [lr, #600]	; 0x258
   16578:	str	r0, [lr, #596]	; 0x254
   1657c:	str	r0, [lr, #592]	; 0x250
   16580:	str	r0, [lr, #588]	; 0x24c
   16584:	str	r0, [lr, #584]	; 0x248
   16588:	str	r0, [lr, #580]	; 0x244
   1658c:	str	r0, [lr, #576]	; 0x240
   16590:	str	r0, [lr, #572]	; 0x23c
   16594:	str	r0, [lr, #568]	; 0x238
   16598:	str	r0, [lr, #564]	; 0x234
   1659c:	str	r0, [lr, #560]	; 0x230
   165a0:	str	r0, [lr, #556]	; 0x22c
   165a4:	str	r0, [lr, #552]	; 0x228
   165a8:	str	r0, [lr, #548]	; 0x224
   165ac:	str	r0, [lr, #544]	; 0x220
   165b0:	str	r0, [lr, #540]	; 0x21c
   165b4:	str	r0, [lr, #536]	; 0x218
   165b8:	str	r0, [lr, #532]	; 0x214
   165bc:	str	r0, [lr, #528]	; 0x210
   165c0:	str	r0, [lr, #524]	; 0x20c
   165c4:	str	r0, [lr, #520]	; 0x208
   165c8:	str	r0, [lr, #516]	; 0x204
   165cc:	str	r0, [lr, #512]	; 0x200
   165d0:	str	r0, [lr, #1132]	; 0x46c
   165d4:	str	r0, [lr, #1128]	; 0x468
   165d8:	str	r0, [lr, #1124]	; 0x464
   165dc:	str	r0, [lr, #1120]	; 0x460
   165e0:	str	r0, [lr, #1116]	; 0x45c
   165e4:	str	r0, [lr, #1112]	; 0x458
   165e8:	str	r0, [lr, #1108]	; 0x454
   165ec:	str	r0, [lr, #1104]	; 0x450
   165f0:	str	r0, [lr, #1100]	; 0x44c
   165f4:	str	r0, [lr, #1096]	; 0x448
   165f8:	str	r0, [lr, #1092]	; 0x444
   165fc:	str	r0, [lr, #1088]	; 0x440
   16600:	str	r0, [lr, #1084]	; 0x43c
   16604:	str	r0, [lr, #1080]	; 0x438
   16608:	str	r0, [lr, #1076]	; 0x434
   1660c:	str	r0, [lr, #1072]	; 0x430
   16610:	str	r0, [lr, #1068]	; 0x42c
   16614:	str	r0, [lr, #1064]	; 0x428
   16618:	str	r0, [lr, #1060]	; 0x424
   1661c:	str	r0, [lr, #1056]	; 0x420
   16620:	str	r0, [lr, #1052]	; 0x41c
   16624:	str	r0, [lr, #1048]	; 0x418
   16628:	str	r0, [lr, #1044]	; 0x414
   1662c:	str	r0, [lr, #1040]	; 0x410
   16630:	str	r0, [lr, #1036]	; 0x40c
   16634:	str	r0, [lr, #1032]	; 0x408
   16638:	str	r0, [lr, #1028]	; 0x404
   1663c:	str	r0, [lr, #1024]	; 0x400
   16640:	pop	{fp, pc}
   16644:	andeq	fp, r1, r8, ror #5
   16648:	ldrdeq	fp, [r1], -ip
   1664c:	ldrdeq	fp, [r1], -r4
   16650:	andeq	fp, r1, ip, asr #5
   16654:	andeq	fp, r1, r4, asr #5
   16658:	andeq	fp, r1, r4, asr #5
   1665c:			; <UNDEFINED> instruction: 0x0001b2bc
   16660:			; <UNDEFINED> instruction: 0x0001b2bc
   16664:	push	{fp, lr}
   16668:	mov	fp, sp
   1666c:	ldr	r0, [pc, #16]	; 16684 <next@@Base+0x2488>
   16670:	add	r0, pc, r0
   16674:	ldr	r1, [pc, #12]	; 16688 <next@@Base+0x248c>
   16678:	add	r1, pc, r1
   1667c:	bl	1df3c <__gcov_flush@@Base+0xb4>
   16680:	pop	{fp, pc}
   16684:			; <UNDEFINED> instruction: 0xfffff94c
   16688:			; <UNDEFINED> instruction: 0xfffffa60

0001668c <init_ast_base@@Base>:
   1668c:	push	{fp, lr}
   16690:	mov	fp, sp
   16694:	sub	sp, sp, #24
   16698:	ldr	r3, [pc, #128]	; 16720 <init_ast_base@@Base+0x94>
   1669c:	add	r3, pc, r3
   166a0:	ldr	ip, [r3, #4]
   166a4:	ldr	lr, [pc, #120]	; 16724 <init_ast_base@@Base+0x98>
   166a8:	ldr	lr, [pc, lr]
   166ac:	adds	lr, lr, #1
   166b0:	adc	ip, ip, #0
   166b4:	str	lr, [r3]
   166b8:	str	ip, [r3, #4]
   166bc:	str	r1, [sp, #8]
   166c0:	str	r0, [sp, #4]
   166c4:	str	r2, [sp]
   166c8:	ldr	r0, [pc, #88]	; 16728 <init_ast_base@@Base+0x9c>
   166cc:	add	r0, pc, r0
   166d0:	ldr	r1, [r0, #8]
   166d4:	ldr	r2, [r0, #12]
   166d8:	adds	r1, r1, #1
   166dc:	adc	r2, r2, #0
   166e0:	str	r1, [r0, #8]
   166e4:	str	r2, [r0, #12]
   166e8:	ldr	r0, [sp, #4]
   166ec:	str	r0, [fp, #-4]
   166f0:	ldr	r1, [sp, #8]
   166f4:	str	r1, [fp, #-8]
   166f8:	ldr	r2, [sp]
   166fc:	str	r2, [sp, #12]
   16700:	ldr	r3, [fp, #-8]
   16704:	ldr	ip, [fp, #-4]
   16708:	str	r3, [ip]
   1670c:	ldr	r3, [sp, #12]
   16710:	ldr	ip, [fp, #-4]
   16714:	str	r3, [ip, #4]
   16718:	mov	sp, fp
   1671c:	pop	{fp, pc}
   16720:	andeq	fp, r1, ip, asr r2
   16724:	andeq	fp, r1, r0, asr r2
   16728:	andeq	fp, r1, ip, lsr #4

0001672c <init_ast_base_single@@Base>:
   1672c:	push	{fp, lr}
   16730:	mov	fp, sp
   16734:	sub	sp, sp, #16
   16738:	ldr	r2, [pc, #108]	; 167ac <init_ast_base_single@@Base+0x80>
   1673c:	add	r2, pc, r2
   16740:	ldr	r3, [r2, #4]
   16744:	ldr	ip, [pc, #100]	; 167b0 <init_ast_base_single@@Base+0x84>
   16748:	ldr	ip, [pc, ip]
   1674c:	adds	ip, ip, #1
   16750:	adc	r3, r3, #0
   16754:	str	ip, [r2]
   16758:	str	r3, [r2, #4]
   1675c:	str	r0, [sp, #4]
   16760:	str	r1, [sp]
   16764:	ldr	r0, [pc, #72]	; 167b4 <init_ast_base_single@@Base+0x88>
   16768:	add	r0, pc, r0
   1676c:	ldr	r1, [r0, #8]
   16770:	ldr	r2, [r0, #12]
   16774:	adds	r1, r1, #1
   16778:	adc	r2, r2, #0
   1677c:	str	r1, [r0, #8]
   16780:	str	r2, [r0, #12]
   16784:	ldr	r0, [sp, #4]
   16788:	str	r0, [fp, #-4]
   1678c:	ldr	r1, [sp]
   16790:	str	r1, [sp, #8]
   16794:	ldr	r0, [fp, #-4]
   16798:	ldr	r1, [sp, #8]
   1679c:	movw	r2, #0
   167a0:	bl	1668c <init_ast_base@@Base>
   167a4:	mov	sp, fp
   167a8:	pop	{fp, pc}
   167ac:	andeq	fp, r1, ip, asr #3
   167b0:	andeq	fp, r1, r0, asr #3
   167b4:	andeq	fp, r1, r0, lsr #3

000167b8 <init_node_id@@Base>:
   167b8:	push	{fp, lr}
   167bc:	mov	fp, sp
   167c0:	sub	sp, sp, #16
   167c4:	ldr	r2, [pc, #116]	; 16840 <init_node_id@@Base+0x88>
   167c8:	add	r2, pc, r2
   167cc:	ldr	r3, [r2, #4]
   167d0:	ldr	ip, [pc, #108]	; 16844 <init_node_id@@Base+0x8c>
   167d4:	ldr	ip, [pc, ip]
   167d8:	adds	ip, ip, #1
   167dc:	adc	r3, r3, #0
   167e0:	str	ip, [r2]
   167e4:	str	r3, [r2, #4]
   167e8:	str	r0, [sp, #4]
   167ec:	str	r1, [sp]
   167f0:	ldr	r0, [pc, #80]	; 16848 <init_node_id@@Base+0x90>
   167f4:	add	r0, pc, r0
   167f8:	ldr	r1, [r0, #8]
   167fc:	ldr	r2, [r0, #12]
   16800:	adds	r1, r1, #1
   16804:	adc	r2, r2, #0
   16808:	str	r1, [r0, #8]
   1680c:	str	r2, [r0, #12]
   16810:	ldr	r0, [sp, #4]
   16814:	str	r0, [fp, #-4]
   16818:	ldr	r1, [sp]
   1681c:	str	r1, [sp, #8]
   16820:	ldr	r0, [fp, #-4]
   16824:	movw	r1, #0
   16828:	bl	1672c <init_ast_base_single@@Base>
   1682c:	ldr	r0, [sp, #8]
   16830:	ldr	r1, [fp, #-4]
   16834:	str	r0, [r1, #8]
   16838:	mov	sp, fp
   1683c:	pop	{fp, pc}
   16840:	andeq	fp, r1, r0, asr r1
   16844:	andeq	fp, r1, r4, asr #2
   16848:	andeq	fp, r1, r4, lsr #2

0001684c <init_node_int@@Base>:
   1684c:	push	{fp, lr}
   16850:	mov	fp, sp
   16854:	sub	sp, sp, #16
   16858:	ldr	r2, [pc, #116]	; 168d4 <init_node_int@@Base+0x88>
   1685c:	add	r2, pc, r2
   16860:	ldr	r3, [r2, #4]
   16864:	ldr	ip, [pc, #108]	; 168d8 <init_node_int@@Base+0x8c>
   16868:	ldr	ip, [pc, ip]
   1686c:	adds	ip, ip, #1
   16870:	adc	r3, r3, #0
   16874:	str	ip, [r2]
   16878:	str	r3, [r2, #4]
   1687c:	str	r0, [sp, #4]
   16880:	str	r1, [sp]
   16884:	ldr	r0, [pc, #80]	; 168dc <init_node_int@@Base+0x90>
   16888:	add	r0, pc, r0
   1688c:	ldr	r1, [r0, #8]
   16890:	ldr	r2, [r0, #12]
   16894:	adds	r1, r1, #1
   16898:	adc	r2, r2, #0
   1689c:	str	r1, [r0, #8]
   168a0:	str	r2, [r0, #12]
   168a4:	ldr	r0, [sp, #4]
   168a8:	str	r0, [fp, #-4]
   168ac:	ldr	r1, [sp]
   168b0:	str	r1, [sp, #8]
   168b4:	ldr	r0, [fp, #-4]
   168b8:	movw	r1, #1
   168bc:	bl	1672c <init_ast_base_single@@Base>
   168c0:	ldr	r0, [sp, #8]
   168c4:	ldr	r1, [fp, #-4]
   168c8:	str	r0, [r1, #8]
   168cc:	mov	sp, fp
   168d0:	pop	{fp, pc}
   168d4:	andeq	fp, r1, ip, asr #1
   168d8:	andeq	fp, r1, r0, asr #1
   168dc:	andeq	fp, r1, r0, lsr #1

000168e0 <init_node_function@@Base>:
   168e0:	push	{fp, lr}
   168e4:	mov	fp, sp
   168e8:	sub	sp, sp, #24
   168ec:	ldr	r3, [pc, #140]	; 16980 <init_node_function@@Base+0xa0>
   168f0:	add	r3, pc, r3
   168f4:	ldr	ip, [r3, #4]
   168f8:	ldr	lr, [pc, #132]	; 16984 <init_node_function@@Base+0xa4>
   168fc:	ldr	lr, [pc, lr]
   16900:	adds	lr, lr, #1
   16904:	adc	ip, ip, #0
   16908:	str	lr, [r3]
   1690c:	str	ip, [r3, #4]
   16910:	str	r1, [sp, #8]
   16914:	str	r0, [sp, #4]
   16918:	str	r2, [sp]
   1691c:	ldr	r0, [pc, #100]	; 16988 <init_node_function@@Base+0xa8>
   16920:	add	r0, pc, r0
   16924:	ldr	r1, [r0, #8]
   16928:	ldr	r2, [r0, #12]
   1692c:	adds	r1, r1, #1
   16930:	adc	r2, r2, #0
   16934:	str	r1, [r0, #8]
   16938:	str	r2, [r0, #12]
   1693c:	ldr	r0, [sp, #4]
   16940:	str	r0, [fp, #-4]
   16944:	ldr	r1, [sp, #8]
   16948:	str	r1, [fp, #-8]
   1694c:	ldr	r2, [sp]
   16950:	str	r2, [sp, #12]
   16954:	ldr	r0, [fp, #-4]
   16958:	movw	r1, #2
   1695c:	bl	1672c <init_ast_base_single@@Base>
   16960:	ldr	r0, [fp, #-8]
   16964:	ldr	r1, [fp, #-4]
   16968:	str	r0, [r1, #8]
   1696c:	ldr	r0, [sp, #12]
   16970:	ldr	r1, [fp, #-4]
   16974:	str	r0, [r1, #12]
   16978:	mov	sp, fp
   1697c:	pop	{fp, pc}
   16980:	andeq	fp, r1, r8, asr #32
   16984:	andeq	fp, r1, ip, lsr r0
   16988:	andeq	fp, r1, r8, lsl r0

0001698c <init_node_return@@Base>:
   1698c:	push	{fp, lr}
   16990:	mov	fp, sp
   16994:	sub	sp, sp, #16
   16998:	ldr	r2, [pc, #116]	; 16a14 <init_node_return@@Base+0x88>
   1699c:	add	r2, pc, r2
   169a0:	ldr	r3, [r2, #4]
   169a4:	ldr	ip, [pc, #108]	; 16a18 <init_node_return@@Base+0x8c>
   169a8:	ldr	ip, [pc, ip]
   169ac:	adds	ip, ip, #1
   169b0:	adc	r3, r3, #0
   169b4:	str	ip, [r2]
   169b8:	str	r3, [r2, #4]
   169bc:	str	r0, [sp, #4]
   169c0:	str	r1, [sp]
   169c4:	ldr	r0, [pc, #80]	; 16a1c <init_node_return@@Base+0x90>
   169c8:	add	r0, pc, r0
   169cc:	ldr	r1, [r0, #8]
   169d0:	ldr	r2, [r0, #12]
   169d4:	adds	r1, r1, #1
   169d8:	adc	r2, r2, #0
   169dc:	str	r1, [r0, #8]
   169e0:	str	r2, [r0, #12]
   169e4:	ldr	r0, [sp, #4]
   169e8:	str	r0, [fp, #-4]
   169ec:	ldr	r1, [sp]
   169f0:	str	r1, [sp, #8]
   169f4:	ldr	r0, [fp, #-4]
   169f8:	movw	r1, #3
   169fc:	bl	1672c <init_ast_base_single@@Base>
   16a00:	ldr	r0, [sp, #8]
   16a04:	ldr	r1, [fp, #-4]
   16a08:	str	r0, [r1, #8]
   16a0c:	mov	sp, fp
   16a10:	pop	{fp, pc}
   16a14:	andeq	sl, r1, ip, lsr #31
   16a18:	andeq	sl, r1, r0, lsr #31
   16a1c:	andeq	sl, r1, r0, lsl #31

00016a20 <init_node_if@@Base>:
   16a20:	push	{r4, sl, fp, lr}
   16a24:	add	fp, sp, #8
   16a28:	sub	sp, sp, #32
   16a2c:	ldr	ip, [pc, #164]	; 16ad8 <init_node_if@@Base+0xb8>
   16a30:	add	ip, pc, ip
   16a34:	ldr	lr, [ip, #4]
   16a38:	ldr	r4, [pc, #156]	; 16adc <init_node_if@@Base+0xbc>
   16a3c:	ldr	r4, [pc, r4]
   16a40:	adds	r4, r4, #1
   16a44:	adc	lr, lr, #0
   16a48:	str	r4, [ip]
   16a4c:	str	lr, [ip, #4]
   16a50:	str	r2, [sp, #12]
   16a54:	str	r1, [sp, #8]
   16a58:	str	r0, [sp, #4]
   16a5c:	str	r3, [sp]
   16a60:	ldr	r0, [pc, #120]	; 16ae0 <init_node_if@@Base+0xc0>
   16a64:	add	r0, pc, r0
   16a68:	ldr	r1, [r0, #8]
   16a6c:	ldr	r2, [r0, #12]
   16a70:	adds	r1, r1, #1
   16a74:	adc	r2, r2, #0
   16a78:	str	r1, [r0, #8]
   16a7c:	str	r2, [r0, #12]
   16a80:	ldr	r0, [sp, #4]
   16a84:	str	r0, [fp, #-12]
   16a88:	ldr	r1, [sp, #8]
   16a8c:	str	r1, [fp, #-16]
   16a90:	ldr	r2, [sp, #12]
   16a94:	str	r2, [sp, #20]
   16a98:	ldr	r3, [sp]
   16a9c:	str	r3, [sp, #16]
   16aa0:	ldr	r0, [fp, #-12]
   16aa4:	movw	r1, #4
   16aa8:	bl	1672c <init_ast_base_single@@Base>
   16aac:	ldr	r0, [fp, #-16]
   16ab0:	ldr	r1, [fp, #-12]
   16ab4:	str	r0, [r1, #8]
   16ab8:	ldr	r0, [sp, #20]
   16abc:	ldr	r1, [fp, #-12]
   16ac0:	str	r0, [r1, #12]
   16ac4:	ldr	r0, [sp, #16]
   16ac8:	ldr	r1, [fp, #-12]
   16acc:	str	r0, [r1, #16]
   16ad0:	sub	sp, fp, #8
   16ad4:	pop	{r4, sl, fp, pc}
   16ad8:	andeq	sl, r1, r8, lsr #30
   16adc:	andeq	sl, r1, ip, lsl pc
   16ae0:	strdeq	sl, [r1], -r4

00016ae4 <init_node_boolean_operator@@Base>:
   16ae4:	push	{r4, sl, fp, lr}
   16ae8:	add	fp, sp, #8
   16aec:	sub	sp, sp, #32
   16af0:	ldr	ip, [pc, #176]	; 16ba8 <init_node_boolean_operator@@Base+0xc4>
   16af4:	add	ip, pc, ip
   16af8:	ldr	lr, [ip, #4]
   16afc:	ldr	r4, [pc, #168]	; 16bac <init_node_boolean_operator@@Base+0xc8>
   16b00:	ldr	r4, [pc, r4]
   16b04:	adds	r4, r4, #1
   16b08:	adc	lr, lr, #0
   16b0c:	str	r4, [ip]
   16b10:	str	lr, [ip, #4]
   16b14:	str	r2, [sp, #12]
   16b18:	str	r1, [sp, #8]
   16b1c:	str	r0, [sp, #4]
   16b20:	str	r3, [sp]
   16b24:	ldr	r0, [pc, #132]	; 16bb0 <init_node_boolean_operator@@Base+0xcc>
   16b28:	add	r0, pc, r0
   16b2c:	ldr	r1, [r0, #8]
   16b30:	ldr	r2, [r0, #12]
   16b34:	adds	r1, r1, #1
   16b38:	adc	r2, r2, #0
   16b3c:	str	r1, [r0, #8]
   16b40:	str	r2, [r0, #12]
   16b44:	ldr	r0, [sp, #4]
   16b48:	str	r0, [fp, #-12]
   16b4c:	ldr	r1, [sp, #8]
   16b50:	str	r1, [fp, #-16]
   16b54:	ldr	r2, [sp, #12]
   16b58:	str	r2, [sp, #20]
   16b5c:	ldr	r3, [sp]
   16b60:	str	r3, [sp, #16]
   16b64:	ldr	r0, [fp, #-12]
   16b68:	movw	r1, #0
   16b6c:	bl	1672c <init_ast_base_single@@Base>
   16b70:	ldr	r0, [fp, #-12]
   16b74:	movw	r1, #5
   16b78:	str	r1, [r0]
   16b7c:	ldr	r0, [fp, #-16]
   16b80:	ldr	r1, [fp, #-12]
   16b84:	str	r0, [r1, #16]
   16b88:	ldr	r0, [sp, #20]
   16b8c:	ldr	r1, [fp, #-12]
   16b90:	str	r0, [r1, #8]
   16b94:	ldr	r0, [sp, #16]
   16b98:	ldr	r1, [fp, #-12]
   16b9c:	str	r0, [r1, #12]
   16ba0:	sub	sp, fp, #8
   16ba4:	pop	{r4, sl, fp, pc}
   16ba8:	andeq	sl, r1, r4, ror lr
   16bac:	andeq	sl, r1, r8, ror #28
   16bb0:	andeq	sl, r1, r0, asr #28

00016bb4 <free_node@@Base>:
   16bb4:	push	{fp, lr}
   16bb8:	mov	fp, sp
   16bbc:	sub	sp, sp, #16
   16bc0:	ldr	r1, [pc, #640]	; 16e48 <free_node@@Base+0x294>
   16bc4:	add	r1, pc, r1
   16bc8:	ldr	r2, [r1, #4]
   16bcc:	ldr	r3, [pc, #632]	; 16e4c <free_node@@Base+0x298>
   16bd0:	ldr	r3, [pc, r3]
   16bd4:	adds	r3, r3, #1
   16bd8:	adc	r2, r2, #0
   16bdc:	str	r3, [r1]
   16be0:	str	r2, [r1, #4]
   16be4:	str	r0, [sp, #8]
   16be8:	ldr	r0, [pc, #608]	; 16e50 <free_node@@Base+0x29c>
   16bec:	add	r0, pc, r0
   16bf0:	mov	r1, #0
   16bf4:	str	r1, [r0]
   16bf8:	ldr	r0, [sp, #8]
   16bfc:	str	r0, [fp, #-4]
   16c00:	ldr	r1, [fp, #-4]
   16c04:	ldr	r1, [r1]
   16c08:	cmp	r1, #5
   16c0c:	str	r1, [sp, #4]
   16c10:	bhi	16dd4 <free_node@@Base+0x220>
   16c14:	add	r0, pc, #8
   16c18:	ldr	r1, [sp, #4]
   16c1c:	ldr	r2, [r0, r1, lsl #2]
   16c20:	add	pc, r0, r2
   16c24:	andeq	r0, r0, r8, lsl r0
   16c28:	andeq	r0, r0, ip, asr r0
   16c2c:	andeq	r0, r0, r0, lsr #1
   16c30:	andeq	r0, r0, r4, ror #1
   16c34:	andeq	r0, r0, r8, lsr #2
   16c38:	andeq	r0, r0, ip, ror #2
   16c3c:	ldr	r0, [pc, #528]	; 16e54 <free_node@@Base+0x2a0>
   16c40:	add	r0, pc, r0
   16c44:	add	r1, r0, #4
   16c48:	ldr	r0, [pc, #520]	; 16e58 <free_node@@Base+0x2a4>
   16c4c:	add	r0, pc, r0
   16c50:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16c54:	ldr	r0, [pc, #512]	; 16e5c <free_node@@Base+0x2a8>
   16c58:	add	r0, pc, r0
   16c5c:	ldr	r1, [r0, #64]	; 0x40
   16c60:	ldr	lr, [r0, #68]	; 0x44
   16c64:	adds	r1, r1, #1
   16c68:	adc	lr, lr, #0
   16c6c:	str	r1, [r0, #64]	; 0x40
   16c70:	str	lr, [r0, #68]	; 0x44
   16c74:	ldr	r0, [fp, #-4]
   16c78:	bl	16ea0 <free_node_id@@Base>
   16c7c:	b	16e10 <free_node@@Base+0x25c>
   16c80:	ldr	r0, [pc, #472]	; 16e60 <free_node@@Base+0x2ac>
   16c84:	add	r0, pc, r0
   16c88:	add	r1, r0, #8
   16c8c:	ldr	r0, [pc, #464]	; 16e64 <free_node@@Base+0x2b0>
   16c90:	add	r0, pc, r0
   16c94:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16c98:	ldr	r0, [pc, #456]	; 16e68 <free_node@@Base+0x2b4>
   16c9c:	add	r0, pc, r0
   16ca0:	ldr	r1, [r0, #72]	; 0x48
   16ca4:	ldr	lr, [r0, #76]	; 0x4c
   16ca8:	adds	r1, r1, #1
   16cac:	adc	lr, lr, #0
   16cb0:	str	r1, [r0, #72]	; 0x48
   16cb4:	str	lr, [r0, #76]	; 0x4c
   16cb8:	ldr	r0, [fp, #-4]
   16cbc:	bl	16f94 <free_node_int@@Base>
   16cc0:	b	16e10 <free_node@@Base+0x25c>
   16cc4:	ldr	r0, [pc, #416]	; 16e6c <free_node@@Base+0x2b8>
   16cc8:	add	r0, pc, r0
   16ccc:	add	r1, r0, #12
   16cd0:	ldr	r0, [pc, #408]	; 16e70 <free_node@@Base+0x2bc>
   16cd4:	add	r0, pc, r0
   16cd8:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16cdc:	ldr	r0, [pc, #400]	; 16e74 <free_node@@Base+0x2c0>
   16ce0:	add	r0, pc, r0
   16ce4:	ldr	r1, [r0, #80]	; 0x50
   16ce8:	ldr	lr, [r0, #84]	; 0x54
   16cec:	adds	r1, r1, #1
   16cf0:	adc	lr, lr, #0
   16cf4:	str	r1, [r0, #80]	; 0x50
   16cf8:	str	lr, [r0, #84]	; 0x54
   16cfc:	ldr	r0, [fp, #-4]
   16d00:	bl	17088 <free_node_function@@Base>
   16d04:	b	16e10 <free_node@@Base+0x25c>
   16d08:	ldr	r0, [pc, #360]	; 16e78 <free_node@@Base+0x2c4>
   16d0c:	add	r0, pc, r0
   16d10:	add	r1, r0, #16
   16d14:	ldr	r0, [pc, #352]	; 16e7c <free_node@@Base+0x2c8>
   16d18:	add	r0, pc, r0
   16d1c:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16d20:	ldr	r0, [pc, #344]	; 16e80 <free_node@@Base+0x2cc>
   16d24:	add	r0, pc, r0
   16d28:	ldr	r1, [r0, #88]	; 0x58
   16d2c:	ldr	lr, [r0, #92]	; 0x5c
   16d30:	adds	r1, r1, #1
   16d34:	adc	lr, lr, #0
   16d38:	str	r1, [r0, #88]	; 0x58
   16d3c:	str	lr, [r0, #92]	; 0x5c
   16d40:	ldr	r0, [fp, #-4]
   16d44:	bl	17188 <free_node_return@@Base>
   16d48:	b	16e10 <free_node@@Base+0x25c>
   16d4c:	ldr	r0, [pc, #304]	; 16e84 <free_node@@Base+0x2d0>
   16d50:	add	r0, pc, r0
   16d54:	add	r1, r0, #20
   16d58:	ldr	r0, [pc, #296]	; 16e88 <free_node@@Base+0x2d4>
   16d5c:	add	r0, pc, r0
   16d60:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16d64:	ldr	r0, [pc, #288]	; 16e8c <free_node@@Base+0x2d8>
   16d68:	add	r0, pc, r0
   16d6c:	ldr	r1, [r0, #96]	; 0x60
   16d70:	ldr	lr, [r0, #100]	; 0x64
   16d74:	adds	r1, r1, #1
   16d78:	adc	lr, lr, #0
   16d7c:	str	r1, [r0, #96]	; 0x60
   16d80:	str	lr, [r0, #100]	; 0x64
   16d84:	ldr	r0, [fp, #-4]
   16d88:	bl	1727c <free_node_if@@Base>
   16d8c:	b	16e10 <free_node@@Base+0x25c>
   16d90:	ldr	r0, [pc, #248]	; 16e90 <free_node@@Base+0x2dc>
   16d94:	add	r0, pc, r0
   16d98:	add	r1, r0, #24
   16d9c:	ldr	r0, [pc, #240]	; 16e94 <free_node@@Base+0x2e0>
   16da0:	add	r0, pc, r0
   16da4:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16da8:	ldr	r0, [pc, #232]	; 16e98 <free_node@@Base+0x2e4>
   16dac:	add	r0, pc, r0
   16db0:	ldr	r1, [r0, #104]	; 0x68
   16db4:	ldr	lr, [r0, #108]	; 0x6c
   16db8:	adds	r1, r1, #1
   16dbc:	adc	lr, lr, #0
   16dc0:	str	r1, [r0, #104]	; 0x68
   16dc4:	str	lr, [r0, #108]	; 0x6c
   16dc8:	ldr	r0, [fp, #-4]
   16dcc:	bl	17394 <free_node_boolean_operator@@Base>
   16dd0:	b	16e10 <free_node@@Base+0x25c>
   16dd4:	ldr	r0, [pc, #100]	; 16e40 <free_node@@Base+0x28c>
   16dd8:	add	r0, pc, r0
   16ddc:	ldr	r1, [pc, #96]	; 16e44 <free_node@@Base+0x290>
   16de0:	add	r1, pc, r1
   16de4:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   16de8:	ldr	r0, [pc, #72]	; 16e38 <free_node@@Base+0x284>
   16dec:	add	r1, pc, r0
   16df0:	ldr	r0, [pc, #68]	; 16e3c <free_node@@Base+0x288>
   16df4:	ldr	r0, [pc, r0]
   16df8:	ldr	r0, [r0]
   16dfc:	bl	11fd4 <fprintf@plt>
   16e00:	movw	r1, #1
   16e04:	str	r0, [sp]
   16e08:	mov	r0, r1
   16e0c:	bl	11fa4 <exit@plt>
   16e10:	ldr	r0, [pc, #132]	; 16e9c <free_node@@Base+0x2e8>
   16e14:	add	r0, pc, r0
   16e18:	ldr	r1, [r0, #112]	; 0x70
   16e1c:	ldr	r2, [r0, #116]	; 0x74
   16e20:	adds	r1, r1, #1
   16e24:	adc	r2, r2, #0
   16e28:	str	r1, [r0, #112]	; 0x70
   16e2c:	str	r2, [r0, #116]	; 0x74
   16e30:	mov	sp, fp
   16e34:	pop	{fp, pc}
   16e38:	andeq	r7, r0, pc, lsr ip
   16e3c:	andeq	sl, r1, r4, asr #5
   16e40:	strdeq	sl, [r1], -ip
   16e44:	muleq	r1, r8, fp
   16e48:			; <UNDEFINED> instruction: 0x0001adb4
   16e4c:	andeq	sl, r1, r8, lsr #27
   16e50:	andeq	sl, r1, r8, ror #9
   16e54:	andeq	r9, r1, r8, lsr sp
   16e58:	andeq	sl, r1, r8, lsl #9
   16e5c:	andeq	sl, r1, r0, lsr #26
   16e60:	strdeq	r9, [r1], -r4
   16e64:	andeq	sl, r1, r4, asr #8
   16e68:	ldrdeq	sl, [r1], -ip
   16e6c:			; <UNDEFINED> instruction: 0x00019cb0
   16e70:	andeq	sl, r1, r0, lsl #8
   16e74:	muleq	r1, r8, ip
   16e78:	andeq	r9, r1, ip, ror #24
   16e7c:			; <UNDEFINED> instruction: 0x0001a3bc
   16e80:	andeq	sl, r1, r4, asr ip
   16e84:	andeq	r9, r1, r8, lsr #24
   16e88:	andeq	sl, r1, r8, ror r3
   16e8c:	andeq	sl, r1, r0, lsl ip
   16e90:	andeq	r9, r1, r4, ror #23
   16e94:	andeq	sl, r1, r4, lsr r3
   16e98:	andeq	sl, r1, ip, asr #23
   16e9c:	andeq	sl, r1, r4, ror #22

00016ea0 <free_node_id@@Base>:
   16ea0:	push	{fp, lr}
   16ea4:	mov	fp, sp
   16ea8:	sub	sp, sp, #8
   16eac:	ldr	r1, [pc, #204]	; 16f80 <free_node_id@@Base+0xe0>
   16eb0:	add	r1, pc, r1
   16eb4:	ldr	r2, [r1, #4]
   16eb8:	ldr	r3, [pc, #196]	; 16f84 <free_node_id@@Base+0xe4>
   16ebc:	ldr	r3, [pc, r3]
   16ec0:	adds	r3, r3, #1
   16ec4:	adc	r2, r2, #0
   16ec8:	str	r3, [r1]
   16ecc:	str	r2, [r1, #4]
   16ed0:	str	r0, [sp]
   16ed4:	ldr	r0, [sp]
   16ed8:	str	r0, [sp, #4]
   16edc:	ldr	r1, [sp, #4]
   16ee0:	ldr	r1, [r1, #4]
   16ee4:	cmp	r1, #0
   16ee8:	mov	r2, r1
   16eec:	movwne	r2, #1
   16ef0:	mov	r3, #16
   16ef4:	cmp	r1, #0
   16ef8:	movwne	r3, #8
   16efc:	ldr	r1, [pc, #132]	; 16f88 <free_node_id@@Base+0xe8>
   16f00:	add	r1, pc, r1
   16f04:	ldr	r3, [r1, r3]!
   16f08:	ldr	ip, [r1, #4]
   16f0c:	adds	r3, r3, #1
   16f10:	adc	ip, ip, #0
   16f14:	str	r3, [r1]
   16f18:	str	ip, [r1, #4]
   16f1c:	tst	r2, #1
   16f20:	beq	16f50 <free_node_id@@Base+0xb0>
   16f24:	ldr	r0, [pc, #96]	; 16f8c <free_node_id@@Base+0xec>
   16f28:	add	r0, pc, r0
   16f2c:	ldr	r1, [r0, #24]
   16f30:	ldr	r2, [r0, #28]
   16f34:	adds	r1, r1, #1
   16f38:	adc	r2, r2, #0
   16f3c:	str	r1, [r0, #24]
   16f40:	str	r2, [r0, #28]
   16f44:	ldr	r0, [sp, #4]
   16f48:	ldr	r0, [r0, #4]
   16f4c:	bl	16bb4 <free_node@@Base>
   16f50:	ldr	r0, [pc, #56]	; 16f90 <free_node_id@@Base+0xf0>
   16f54:	add	r0, pc, r0
   16f58:	ldr	r1, [r0, #32]
   16f5c:	ldr	r2, [r0, #36]	; 0x24
   16f60:	adds	r1, r1, #1
   16f64:	adc	r2, r2, #0
   16f68:	str	r1, [r0, #32]
   16f6c:	str	r2, [r0, #36]	; 0x24
   16f70:	ldr	r0, [sp, #4]
   16f74:	bl	11ee4 <free@plt>
   16f78:	mov	sp, fp
   16f7c:	pop	{fp, pc}
   16f80:	andeq	sl, r1, r8, asr #22
   16f84:	andeq	sl, r1, ip, lsr fp
   16f88:	strdeq	sl, [r1], -r8
   16f8c:	ldrdeq	sl, [r1], -r0
   16f90:	andeq	sl, r1, r4, lsr #21

00016f94 <free_node_int@@Base>:
   16f94:	push	{fp, lr}
   16f98:	mov	fp, sp
   16f9c:	sub	sp, sp, #8
   16fa0:	ldr	r1, [pc, #204]	; 17074 <free_node_int@@Base+0xe0>
   16fa4:	add	r1, pc, r1
   16fa8:	ldr	r2, [r1, #4]
   16fac:	ldr	r3, [pc, #196]	; 17078 <free_node_int@@Base+0xe4>
   16fb0:	ldr	r3, [pc, r3]
   16fb4:	adds	r3, r3, #1
   16fb8:	adc	r2, r2, #0
   16fbc:	str	r3, [r1]
   16fc0:	str	r2, [r1, #4]
   16fc4:	str	r0, [sp]
   16fc8:	ldr	r0, [sp]
   16fcc:	str	r0, [sp, #4]
   16fd0:	ldr	r1, [sp, #4]
   16fd4:	ldr	r1, [r1, #4]
   16fd8:	cmp	r1, #0
   16fdc:	mov	r2, r1
   16fe0:	movwne	r2, #1
   16fe4:	mov	r3, #16
   16fe8:	cmp	r1, #0
   16fec:	movwne	r3, #8
   16ff0:	ldr	r1, [pc, #132]	; 1707c <free_node_int@@Base+0xe8>
   16ff4:	add	r1, pc, r1
   16ff8:	ldr	r3, [r1, r3]!
   16ffc:	ldr	ip, [r1, #4]
   17000:	adds	r3, r3, #1
   17004:	adc	ip, ip, #0
   17008:	str	r3, [r1]
   1700c:	str	ip, [r1, #4]
   17010:	tst	r2, #1
   17014:	beq	17044 <free_node_int@@Base+0xb0>
   17018:	ldr	r0, [pc, #96]	; 17080 <free_node_int@@Base+0xec>
   1701c:	add	r0, pc, r0
   17020:	ldr	r1, [r0, #24]
   17024:	ldr	r2, [r0, #28]
   17028:	adds	r1, r1, #1
   1702c:	adc	r2, r2, #0
   17030:	str	r1, [r0, #24]
   17034:	str	r2, [r0, #28]
   17038:	ldr	r0, [sp, #4]
   1703c:	ldr	r0, [r0, #4]
   17040:	bl	16bb4 <free_node@@Base>
   17044:	ldr	r0, [pc, #56]	; 17084 <free_node_int@@Base+0xf0>
   17048:	add	r0, pc, r0
   1704c:	ldr	r1, [r0, #32]
   17050:	ldr	r2, [r0, #36]	; 0x24
   17054:	adds	r1, r1, #1
   17058:	adc	r2, r2, #0
   1705c:	str	r1, [r0, #32]
   17060:	str	r2, [r0, #36]	; 0x24
   17064:	ldr	r0, [sp, #4]
   17068:	bl	11ee4 <free@plt>
   1706c:	mov	sp, fp
   17070:	pop	{fp, pc}
   17074:	andeq	sl, r1, r4, lsl #21
   17078:	andeq	sl, r1, r8, ror sl
   1707c:	andeq	sl, r1, r4, lsr sl
   17080:	andeq	sl, r1, ip, lsl #20
   17084:	andeq	sl, r1, r0, ror #19

00017088 <free_node_function@@Base>:
   17088:	push	{fp, lr}
   1708c:	mov	fp, sp
   17090:	sub	sp, sp, #8
   17094:	ldr	r1, [pc, #216]	; 17174 <free_node_function@@Base+0xec>
   17098:	add	r1, pc, r1
   1709c:	ldr	r2, [r1, #4]
   170a0:	ldr	r3, [pc, #208]	; 17178 <free_node_function@@Base+0xf0>
   170a4:	ldr	r3, [pc, r3]
   170a8:	adds	r3, r3, #1
   170ac:	adc	r2, r2, #0
   170b0:	str	r3, [r1]
   170b4:	str	r2, [r1, #4]
   170b8:	str	r0, [sp]
   170bc:	ldr	r0, [sp]
   170c0:	str	r0, [sp, #4]
   170c4:	ldr	r1, [sp, #4]
   170c8:	ldr	r1, [r1, #4]
   170cc:	cmp	r1, #0
   170d0:	mov	r2, r1
   170d4:	movwne	r2, #1
   170d8:	mov	r3, #16
   170dc:	cmp	r1, #0
   170e0:	movwne	r3, #8
   170e4:	ldr	r1, [pc, #144]	; 1717c <free_node_function@@Base+0xf4>
   170e8:	add	r1, pc, r1
   170ec:	ldr	r3, [r1, r3]!
   170f0:	ldr	ip, [r1, #4]
   170f4:	adds	r3, r3, #1
   170f8:	adc	ip, ip, #0
   170fc:	str	r3, [r1]
   17100:	str	ip, [r1, #4]
   17104:	tst	r2, #1
   17108:	beq	17138 <free_node_function@@Base+0xb0>
   1710c:	ldr	r0, [pc, #108]	; 17180 <free_node_function@@Base+0xf8>
   17110:	add	r0, pc, r0
   17114:	ldr	r1, [r0, #24]
   17118:	ldr	r2, [r0, #28]
   1711c:	adds	r1, r1, #1
   17120:	adc	r2, r2, #0
   17124:	str	r1, [r0, #24]
   17128:	str	r2, [r0, #28]
   1712c:	ldr	r0, [sp, #4]
   17130:	ldr	r0, [r0, #4]
   17134:	bl	16bb4 <free_node@@Base>
   17138:	ldr	r0, [pc, #68]	; 17184 <free_node_function@@Base+0xfc>
   1713c:	add	r0, pc, r0
   17140:	ldr	r1, [r0, #32]
   17144:	ldr	r2, [r0, #36]	; 0x24
   17148:	adds	r1, r1, #1
   1714c:	adc	r2, r2, #0
   17150:	str	r1, [r0, #32]
   17154:	str	r2, [r0, #36]	; 0x24
   17158:	ldr	r0, [sp, #4]
   1715c:	ldr	r0, [r0, #8]
   17160:	bl	11ee4 <free@plt>
   17164:	ldr	r0, [sp, #4]
   17168:	bl	11ee4 <free@plt>
   1716c:	mov	sp, fp
   17170:	pop	{fp, pc}
   17174:	andeq	sl, r1, r0, asr #19
   17178:			; <UNDEFINED> instruction: 0x0001a9b4
   1717c:	andeq	sl, r1, r0, ror r9
   17180:	andeq	sl, r1, r8, asr #18
   17184:	andeq	sl, r1, ip, lsl r9

00017188 <free_node_return@@Base>:
   17188:	push	{fp, lr}
   1718c:	mov	fp, sp
   17190:	sub	sp, sp, #8
   17194:	ldr	r1, [pc, #204]	; 17268 <free_node_return@@Base+0xe0>
   17198:	add	r1, pc, r1
   1719c:	ldr	r2, [r1, #4]
   171a0:	ldr	r3, [pc, #196]	; 1726c <free_node_return@@Base+0xe4>
   171a4:	ldr	r3, [pc, r3]
   171a8:	adds	r3, r3, #1
   171ac:	adc	r2, r2, #0
   171b0:	str	r3, [r1]
   171b4:	str	r2, [r1, #4]
   171b8:	str	r0, [sp]
   171bc:	ldr	r0, [sp]
   171c0:	str	r0, [sp, #4]
   171c4:	ldr	r1, [sp, #4]
   171c8:	ldr	r1, [r1, #4]
   171cc:	cmp	r1, #0
   171d0:	mov	r2, r1
   171d4:	movwne	r2, #1
   171d8:	mov	r3, #16
   171dc:	cmp	r1, #0
   171e0:	movwne	r3, #8
   171e4:	ldr	r1, [pc, #132]	; 17270 <free_node_return@@Base+0xe8>
   171e8:	add	r1, pc, r1
   171ec:	ldr	r3, [r1, r3]!
   171f0:	ldr	ip, [r1, #4]
   171f4:	adds	r3, r3, #1
   171f8:	adc	ip, ip, #0
   171fc:	str	r3, [r1]
   17200:	str	ip, [r1, #4]
   17204:	tst	r2, #1
   17208:	beq	17238 <free_node_return@@Base+0xb0>
   1720c:	ldr	r0, [pc, #96]	; 17274 <free_node_return@@Base+0xec>
   17210:	add	r0, pc, r0
   17214:	ldr	r1, [r0, #24]
   17218:	ldr	r2, [r0, #28]
   1721c:	adds	r1, r1, #1
   17220:	adc	r2, r2, #0
   17224:	str	r1, [r0, #24]
   17228:	str	r2, [r0, #28]
   1722c:	ldr	r0, [sp, #4]
   17230:	ldr	r0, [r0, #4]
   17234:	bl	16bb4 <free_node@@Base>
   17238:	ldr	r0, [pc, #56]	; 17278 <free_node_return@@Base+0xf0>
   1723c:	add	r0, pc, r0
   17240:	ldr	r1, [r0, #32]
   17244:	ldr	r2, [r0, #36]	; 0x24
   17248:	adds	r1, r1, #1
   1724c:	adc	r2, r2, #0
   17250:	str	r1, [r0, #32]
   17254:	str	r2, [r0, #36]	; 0x24
   17258:	ldr	r0, [sp, #4]
   1725c:	bl	11ee4 <free@plt>
   17260:	mov	sp, fp
   17264:	pop	{fp, pc}
   17268:	strdeq	sl, [r1], -r0
   1726c:	andeq	sl, r1, r4, ror #17
   17270:	andeq	sl, r1, r0, lsr #17
   17274:	andeq	sl, r1, r8, ror r8
   17278:	andeq	sl, r1, ip, asr #16

0001727c <free_node_if@@Base>:
   1727c:	push	{fp, lr}
   17280:	mov	fp, sp
   17284:	sub	sp, sp, #8
   17288:	ldr	r1, [pc, #240]	; 17380 <free_node_if@@Base+0x104>
   1728c:	add	r1, pc, r1
   17290:	ldr	r2, [r1, #4]
   17294:	ldr	r3, [pc, #232]	; 17384 <free_node_if@@Base+0x108>
   17298:	ldr	r3, [pc, r3]
   1729c:	adds	r3, r3, #1
   172a0:	adc	r2, r2, #0
   172a4:	str	r3, [r1]
   172a8:	str	r2, [r1, #4]
   172ac:	str	r0, [sp]
   172b0:	ldr	r0, [sp]
   172b4:	str	r0, [sp, #4]
   172b8:	ldr	r1, [sp, #4]
   172bc:	ldr	r1, [r1, #4]
   172c0:	cmp	r1, #0
   172c4:	mov	r2, r1
   172c8:	movwne	r2, #1
   172cc:	mov	r3, #16
   172d0:	cmp	r1, #0
   172d4:	movwne	r3, #8
   172d8:	ldr	r1, [pc, #168]	; 17388 <free_node_if@@Base+0x10c>
   172dc:	add	r1, pc, r1
   172e0:	ldr	r3, [r1, r3]!
   172e4:	ldr	ip, [r1, #4]
   172e8:	adds	r3, r3, #1
   172ec:	adc	ip, ip, #0
   172f0:	str	r3, [r1]
   172f4:	str	ip, [r1, #4]
   172f8:	tst	r2, #1
   172fc:	beq	1732c <free_node_if@@Base+0xb0>
   17300:	ldr	r0, [pc, #132]	; 1738c <free_node_if@@Base+0x110>
   17304:	add	r0, pc, r0
   17308:	ldr	r1, [r0, #24]
   1730c:	ldr	r2, [r0, #28]
   17310:	adds	r1, r1, #1
   17314:	adc	r2, r2, #0
   17318:	str	r1, [r0, #24]
   1731c:	str	r2, [r0, #28]
   17320:	ldr	r0, [sp, #4]
   17324:	ldr	r0, [r0, #4]
   17328:	bl	16bb4 <free_node@@Base>
   1732c:	ldr	r0, [pc, #92]	; 17390 <free_node_if@@Base+0x114>
   17330:	add	r0, pc, r0
   17334:	ldr	r1, [r0, #32]
   17338:	ldr	r2, [r0, #36]	; 0x24
   1733c:	adds	r1, r1, #1
   17340:	adc	r2, r2, #0
   17344:	str	r1, [r0, #32]
   17348:	str	r2, [r0, #36]	; 0x24
   1734c:	ldr	r0, [sp, #4]
   17350:	ldr	r0, [r0, #8]
   17354:	bl	16bb4 <free_node@@Base>
   17358:	ldr	r0, [sp, #4]
   1735c:	ldr	r0, [r0, #12]
   17360:	bl	16bb4 <free_node@@Base>
   17364:	ldr	r0, [sp, #4]
   17368:	ldr	r0, [r0, #16]
   1736c:	bl	16bb4 <free_node@@Base>
   17370:	ldr	r0, [sp, #4]
   17374:	bl	11ee4 <free@plt>
   17378:	mov	sp, fp
   1737c:	pop	{fp, pc}
   17380:	andeq	sl, r1, ip, lsr #16
   17384:	andeq	sl, r1, r0, lsr #16
   17388:	ldrdeq	sl, [r1], -ip
   1738c:			; <UNDEFINED> instruction: 0x0001a7b4
   17390:	andeq	sl, r1, r8, lsl #15

00017394 <free_node_boolean_operator@@Base>:
   17394:	push	{fp, lr}
   17398:	mov	fp, sp
   1739c:	sub	sp, sp, #8
   173a0:	ldr	r1, [pc, #228]	; 1748c <free_node_boolean_operator@@Base+0xf8>
   173a4:	add	r1, pc, r1
   173a8:	ldr	r2, [r1, #4]
   173ac:	ldr	r3, [pc, #220]	; 17490 <free_node_boolean_operator@@Base+0xfc>
   173b0:	ldr	r3, [pc, r3]
   173b4:	adds	r3, r3, #1
   173b8:	adc	r2, r2, #0
   173bc:	str	r3, [r1]
   173c0:	str	r2, [r1, #4]
   173c4:	str	r0, [sp]
   173c8:	ldr	r0, [sp]
   173cc:	str	r0, [sp, #4]
   173d0:	ldr	r1, [sp, #4]
   173d4:	ldr	r1, [r1, #4]
   173d8:	cmp	r1, #0
   173dc:	mov	r2, r1
   173e0:	movwne	r2, #1
   173e4:	mov	r3, #16
   173e8:	cmp	r1, #0
   173ec:	movwne	r3, #8
   173f0:	ldr	r1, [pc, #156]	; 17494 <free_node_boolean_operator@@Base+0x100>
   173f4:	add	r1, pc, r1
   173f8:	ldr	r3, [r1, r3]!
   173fc:	ldr	ip, [r1, #4]
   17400:	adds	r3, r3, #1
   17404:	adc	ip, ip, #0
   17408:	str	r3, [r1]
   1740c:	str	ip, [r1, #4]
   17410:	tst	r2, #1
   17414:	beq	17444 <free_node_boolean_operator@@Base+0xb0>
   17418:	ldr	r0, [pc, #120]	; 17498 <free_node_boolean_operator@@Base+0x104>
   1741c:	add	r0, pc, r0
   17420:	ldr	r1, [r0, #24]
   17424:	ldr	r2, [r0, #28]
   17428:	adds	r1, r1, #1
   1742c:	adc	r2, r2, #0
   17430:	str	r1, [r0, #24]
   17434:	str	r2, [r0, #28]
   17438:	ldr	r0, [sp, #4]
   1743c:	ldr	r0, [r0, #4]
   17440:	bl	16bb4 <free_node@@Base>
   17444:	ldr	r0, [pc, #80]	; 1749c <free_node_boolean_operator@@Base+0x108>
   17448:	add	r0, pc, r0
   1744c:	ldr	r1, [r0, #32]
   17450:	ldr	r2, [r0, #36]	; 0x24
   17454:	adds	r1, r1, #1
   17458:	adc	r2, r2, #0
   1745c:	str	r1, [r0, #32]
   17460:	str	r2, [r0, #36]	; 0x24
   17464:	ldr	r0, [sp, #4]
   17468:	ldr	r0, [r0, #8]
   1746c:	bl	16bb4 <free_node@@Base>
   17470:	ldr	r0, [sp, #4]
   17474:	ldr	r0, [r0, #12]
   17478:	bl	16bb4 <free_node@@Base>
   1747c:	ldr	r0, [sp, #4]
   17480:	bl	11ee4 <free@plt>
   17484:	mov	sp, fp
   17488:	pop	{fp, pc}
   1748c:	andeq	sl, r1, r4, asr #14
   17490:	andeq	sl, r1, r8, lsr r7
   17494:	strdeq	sl, [r1], -r4
   17498:	andeq	sl, r1, ip, asr #13
   1749c:	andeq	sl, r1, r0, lsr #13

000174a0 <get_boolean_op_value@@Base>:
   174a0:	push	{fp, lr}
   174a4:	mov	fp, sp
   174a8:	sub	sp, sp, #32
   174ac:	ldr	r1, [pc, #1364]	; 17a08 <get_boolean_op_value@@Base+0x568>
   174b0:	add	r1, pc, r1
   174b4:	ldr	r2, [r1, #4]
   174b8:	ldr	r3, [pc, #1356]	; 17a0c <get_boolean_op_value@@Base+0x56c>
   174bc:	ldr	r3, [pc, r3]
   174c0:	adds	r3, r3, #1
   174c4:	adc	r2, r2, #0
   174c8:	str	r3, [r1]
   174cc:	str	r2, [r1, #4]
   174d0:	str	r0, [sp, #16]
   174d4:	ldr	r0, [sp, #16]
   174d8:	str	r0, [fp, #-8]
   174dc:	ldr	r1, [fp, #-8]
   174e0:	ldr	r0, [r1, #4]
   174e4:	mov	r1, #2
   174e8:	bl	12034 <strnlen@plt>
   174ec:	str	r0, [fp, #-12]
   174f0:	ldr	r0, [fp, #-12]
   174f4:	sub	r1, r0, #2
   174f8:	clz	r1, r1
   174fc:	lsr	r1, r1, #5
   17500:	mov	lr, #16
   17504:	cmp	r0, #2
   17508:	movweq	lr, #8
   1750c:	ldr	r0, [pc, #1276]	; 17a10 <get_boolean_op_value@@Base+0x570>
   17510:	add	r0, pc, r0
   17514:	ldr	lr, [r0, lr]!
   17518:	ldr	r2, [r0, #4]
   1751c:	adds	lr, lr, #1
   17520:	adc	r2, r2, #0
   17524:	str	lr, [r0]
   17528:	str	r2, [r0, #4]
   1752c:	tst	r1, #1
   17530:	beq	17864 <get_boolean_op_value@@Base+0x3c4>
   17534:	ldr	r0, [fp, #-8]
   17538:	ldr	r0, [r0, #4]
   1753c:	ldr	r1, [pc, #1232]	; 17a14 <get_boolean_op_value@@Base+0x574>
   17540:	add	r1, pc, r1
   17544:	mov	r2, #2
   17548:	bl	12088 <strncmp@plt>
   1754c:	clz	r1, r0
   17550:	lsr	r1, r1, #5
   17554:	mov	r2, #32
   17558:	cmp	r0, #0
   1755c:	movweq	r2, #24
   17560:	ldr	r0, [pc, #1200]	; 17a18 <get_boolean_op_value@@Base+0x578>
   17564:	add	r0, pc, r0
   17568:	ldr	r2, [r0, r2]!
   1756c:	ldr	lr, [r0, #4]
   17570:	adds	r2, r2, #1
   17574:	adc	lr, lr, #0
   17578:	str	r2, [r0]
   1757c:	str	lr, [r0, #4]
   17580:	tst	r1, #1
   17584:	beq	175b4 <get_boolean_op_value@@Base+0x114>
   17588:	ldr	r0, [pc, #1164]	; 17a1c <get_boolean_op_value@@Base+0x57c>
   1758c:	add	r0, pc, r0
   17590:	ldr	r1, [r0, #40]	; 0x28
   17594:	ldr	r2, [r0, #44]	; 0x2c
   17598:	adds	r1, r1, #1
   1759c:	adc	r2, r2, #0
   175a0:	str	r1, [r0, #40]	; 0x28
   175a4:	str	r2, [r0, #44]	; 0x2c
   175a8:	movw	r0, #0
   175ac:	str	r0, [fp, #-4]
   175b0:	b	179c4 <get_boolean_op_value@@Base+0x524>
   175b4:	ldr	r0, [fp, #-8]
   175b8:	ldr	r0, [r0, #4]
   175bc:	ldr	r1, [pc, #1116]	; 17a20 <get_boolean_op_value@@Base+0x580>
   175c0:	add	r1, pc, r1
   175c4:	mov	r2, #2
   175c8:	bl	12088 <strncmp@plt>
   175cc:	clz	r1, r0
   175d0:	lsr	r1, r1, #5
   175d4:	mov	r2, #56	; 0x38
   175d8:	cmp	r0, #0
   175dc:	movweq	r2, #48	; 0x30
   175e0:	ldr	r0, [pc, #1084]	; 17a24 <get_boolean_op_value@@Base+0x584>
   175e4:	add	r0, pc, r0
   175e8:	ldr	r2, [r0, r2]!
   175ec:	ldr	lr, [r0, #4]
   175f0:	adds	r2, r2, #1
   175f4:	adc	lr, lr, #0
   175f8:	str	r2, [r0]
   175fc:	str	lr, [r0, #4]
   17600:	tst	r1, #1
   17604:	beq	17634 <get_boolean_op_value@@Base+0x194>
   17608:	ldr	r0, [pc, #1048]	; 17a28 <get_boolean_op_value@@Base+0x588>
   1760c:	add	r0, pc, r0
   17610:	ldr	r1, [r0, #64]	; 0x40
   17614:	ldr	r2, [r0, #68]	; 0x44
   17618:	adds	r1, r1, #1
   1761c:	adc	r2, r2, #0
   17620:	str	r1, [r0, #64]	; 0x40
   17624:	str	r2, [r0, #68]	; 0x44
   17628:	movw	r0, #1
   1762c:	str	r0, [fp, #-4]
   17630:	b	179c4 <get_boolean_op_value@@Base+0x524>
   17634:	ldr	r0, [fp, #-8]
   17638:	ldr	r0, [r0, #4]
   1763c:	ldr	r1, [pc, #1000]	; 17a2c <get_boolean_op_value@@Base+0x58c>
   17640:	add	r1, pc, r1
   17644:	mov	r2, #2
   17648:	bl	12088 <strncmp@plt>
   1764c:	clz	r1, r0
   17650:	lsr	r1, r1, #5
   17654:	mov	r2, #80	; 0x50
   17658:	cmp	r0, #0
   1765c:	movweq	r2, #72	; 0x48
   17660:	ldr	r0, [pc, #968]	; 17a30 <get_boolean_op_value@@Base+0x590>
   17664:	add	r0, pc, r0
   17668:	ldr	r2, [r0, r2]!
   1766c:	ldr	lr, [r0, #4]
   17670:	adds	r2, r2, #1
   17674:	adc	lr, lr, #0
   17678:	str	r2, [r0]
   1767c:	str	lr, [r0, #4]
   17680:	tst	r1, #1
   17684:	beq	176b4 <get_boolean_op_value@@Base+0x214>
   17688:	ldr	r0, [pc, #932]	; 17a34 <get_boolean_op_value@@Base+0x594>
   1768c:	add	r0, pc, r0
   17690:	ldr	r1, [r0, #88]	; 0x58
   17694:	ldr	r2, [r0, #92]	; 0x5c
   17698:	adds	r1, r1, #1
   1769c:	adc	r2, r2, #0
   176a0:	str	r1, [r0, #88]	; 0x58
   176a4:	str	r2, [r0, #92]	; 0x5c
   176a8:	movw	r0, #2
   176ac:	str	r0, [fp, #-4]
   176b0:	b	179c4 <get_boolean_op_value@@Base+0x524>
   176b4:	ldr	r0, [fp, #-8]
   176b8:	ldr	r0, [r0, #4]
   176bc:	ldr	r1, [pc, #884]	; 17a38 <get_boolean_op_value@@Base+0x598>
   176c0:	add	r1, pc, r1
   176c4:	mov	r2, #2
   176c8:	bl	12088 <strncmp@plt>
   176cc:	clz	r1, r0
   176d0:	lsr	r1, r1, #5
   176d4:	mov	r2, #104	; 0x68
   176d8:	cmp	r0, #0
   176dc:	movweq	r2, #96	; 0x60
   176e0:	ldr	r0, [pc, #852]	; 17a3c <get_boolean_op_value@@Base+0x59c>
   176e4:	add	r0, pc, r0
   176e8:	ldr	r2, [r0, r2]!
   176ec:	ldr	lr, [r0, #4]
   176f0:	adds	r2, r2, #1
   176f4:	adc	lr, lr, #0
   176f8:	str	r2, [r0]
   176fc:	str	lr, [r0, #4]
   17700:	tst	r1, #1
   17704:	beq	17734 <get_boolean_op_value@@Base+0x294>
   17708:	ldr	r0, [pc, #816]	; 17a40 <get_boolean_op_value@@Base+0x5a0>
   1770c:	add	r0, pc, r0
   17710:	ldr	r1, [r0, #112]	; 0x70
   17714:	ldr	r2, [r0, #116]	; 0x74
   17718:	adds	r1, r1, #1
   1771c:	adc	r2, r2, #0
   17720:	str	r1, [r0, #112]	; 0x70
   17724:	str	r2, [r0, #116]	; 0x74
   17728:	movw	r0, #3
   1772c:	str	r0, [fp, #-4]
   17730:	b	179c4 <get_boolean_op_value@@Base+0x524>
   17734:	ldr	r0, [fp, #-8]
   17738:	ldr	r0, [r0, #4]
   1773c:	ldr	r1, [pc, #768]	; 17a44 <get_boolean_op_value@@Base+0x5a4>
   17740:	add	r1, pc, r1
   17744:	mov	r2, #2
   17748:	bl	12088 <strncmp@plt>
   1774c:	clz	r1, r0
   17750:	lsr	r1, r1, #5
   17754:	mov	r2, #128	; 0x80
   17758:	cmp	r0, #0
   1775c:	movweq	r2, #120	; 0x78
   17760:	ldr	r0, [pc, #736]	; 17a48 <get_boolean_op_value@@Base+0x5a8>
   17764:	add	r0, pc, r0
   17768:	ldr	r2, [r0, r2]!
   1776c:	ldr	lr, [r0, #4]
   17770:	adds	r2, r2, #1
   17774:	adc	lr, lr, #0
   17778:	str	r2, [r0]
   1777c:	str	lr, [r0, #4]
   17780:	tst	r1, #1
   17784:	beq	177b4 <get_boolean_op_value@@Base+0x314>
   17788:	ldr	r0, [pc, #700]	; 17a4c <get_boolean_op_value@@Base+0x5ac>
   1778c:	add	r0, pc, r0
   17790:	ldr	r1, [r0, #136]	; 0x88
   17794:	ldr	r2, [r0, #140]	; 0x8c
   17798:	adds	r1, r1, #1
   1779c:	adc	r2, r2, #0
   177a0:	str	r1, [r0, #136]	; 0x88
   177a4:	str	r2, [r0, #140]	; 0x8c
   177a8:	movw	r0, #4
   177ac:	str	r0, [fp, #-4]
   177b0:	b	179c4 <get_boolean_op_value@@Base+0x524>
   177b4:	ldr	r0, [fp, #-8]
   177b8:	ldr	r0, [r0, #4]
   177bc:	ldr	r1, [pc, #652]	; 17a50 <get_boolean_op_value@@Base+0x5b0>
   177c0:	add	r1, pc, r1
   177c4:	mov	r2, #2
   177c8:	bl	12088 <strncmp@plt>
   177cc:	clz	r1, r0
   177d0:	lsr	r1, r1, #5
   177d4:	mov	r2, #152	; 0x98
   177d8:	cmp	r0, #0
   177dc:	movweq	r2, #144	; 0x90
   177e0:	ldr	r0, [pc, #620]	; 17a54 <get_boolean_op_value@@Base+0x5b4>
   177e4:	add	r0, pc, r0
   177e8:	ldr	r2, [r0, r2]!
   177ec:	ldr	lr, [r0, #4]
   177f0:	adds	r2, r2, #1
   177f4:	adc	lr, lr, #0
   177f8:	str	r2, [r0]
   177fc:	str	lr, [r0, #4]
   17800:	tst	r1, #1
   17804:	beq	17834 <get_boolean_op_value@@Base+0x394>
   17808:	ldr	r0, [pc, #584]	; 17a58 <get_boolean_op_value@@Base+0x5b8>
   1780c:	add	r0, pc, r0
   17810:	ldr	r1, [r0, #160]	; 0xa0
   17814:	ldr	r2, [r0, #164]	; 0xa4
   17818:	adds	r1, r1, #1
   1781c:	adc	r2, r2, #0
   17820:	str	r1, [r0, #160]	; 0xa0
   17824:	str	r2, [r0, #164]	; 0xa4
   17828:	movw	r0, #5
   1782c:	str	r0, [fp, #-4]
   17830:	b	179c4 <get_boolean_op_value@@Base+0x524>
   17834:	ldr	r0, [pc, #452]	; 17a00 <get_boolean_op_value@@Base+0x560>
   17838:	add	r1, pc, r0
   1783c:	ldr	r0, [pc, #448]	; 17a04 <get_boolean_op_value@@Base+0x564>
   17840:	ldr	r0, [pc, r0]
   17844:	ldr	r0, [r0]
   17848:	ldr	r2, [fp, #-8]
   1784c:	ldr	r2, [r2, #4]
   17850:	bl	11fd4 <fprintf@plt>
   17854:	movw	r1, #1
   17858:	str	r0, [sp, #12]
   1785c:	mov	r0, r1
   17860:	bl	11fa4 <exit@plt>
   17864:	ldr	r0, [pc, #496]	; 17a5c <get_boolean_op_value@@Base+0x5bc>
   17868:	add	r0, pc, r0
   1786c:	mov	r1, #0
   17870:	str	r1, [r0]
   17874:	ldr	r0, [fp, #-8]
   17878:	ldr	r0, [r0, #4]
   1787c:	ldrb	r0, [r0]
   17880:	mov	r1, r0
   17884:	cmp	r0, #33	; 0x21
   17888:	str	r1, [sp, #8]
   1788c:	beq	178b4 <get_boolean_op_value@@Base+0x414>
   17890:	b	17894 <get_boolean_op_value@@Base+0x3f4>
   17894:	ldr	r0, [sp, #8]
   17898:	cmp	r0, #60	; 0x3c
   1789c:	beq	178f8 <get_boolean_op_value@@Base+0x458>
   178a0:	b	178a4 <get_boolean_op_value@@Base+0x404>
   178a4:	ldr	r0, [sp, #8]
   178a8:	cmp	r0, #62	; 0x3e
   178ac:	beq	1793c <get_boolean_op_value@@Base+0x49c>
   178b0:	b	17980 <get_boolean_op_value@@Base+0x4e0>
   178b4:	ldr	r0, [pc, #420]	; 17a60 <get_boolean_op_value@@Base+0x5c0>
   178b8:	add	r0, pc, r0
   178bc:	add	r1, r0, #4
   178c0:	ldr	r0, [pc, #412]	; 17a64 <get_boolean_op_value@@Base+0x5c4>
   178c4:	add	r0, pc, r0
   178c8:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   178cc:	ldr	r0, [pc, #404]	; 17a68 <get_boolean_op_value@@Base+0x5c8>
   178d0:	add	r0, pc, r0
   178d4:	ldr	r1, [r0, #200]	; 0xc8
   178d8:	ldr	lr, [r0, #204]	; 0xcc
   178dc:	adds	r1, r1, #1
   178e0:	adc	lr, lr, #0
   178e4:	str	r1, [r0, #200]	; 0xc8
   178e8:	str	lr, [r0, #204]	; 0xcc
   178ec:	movw	r0, #8
   178f0:	str	r0, [fp, #-4]
   178f4:	b	179c4 <get_boolean_op_value@@Base+0x524>
   178f8:	ldr	r0, [pc, #364]	; 17a6c <get_boolean_op_value@@Base+0x5cc>
   178fc:	add	r0, pc, r0
   17900:	add	r1, r0, #8
   17904:	ldr	r0, [pc, #356]	; 17a70 <get_boolean_op_value@@Base+0x5d0>
   17908:	add	r0, pc, r0
   1790c:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   17910:	ldr	r0, [pc, #348]	; 17a74 <get_boolean_op_value@@Base+0x5d4>
   17914:	add	r0, pc, r0
   17918:	ldr	r1, [r0, #208]	; 0xd0
   1791c:	ldr	lr, [r0, #212]	; 0xd4
   17920:	adds	r1, r1, #1
   17924:	adc	lr, lr, #0
   17928:	str	r1, [r0, #208]	; 0xd0
   1792c:	str	lr, [r0, #212]	; 0xd4
   17930:	movw	r0, #6
   17934:	str	r0, [fp, #-4]
   17938:	b	179c4 <get_boolean_op_value@@Base+0x524>
   1793c:	ldr	r0, [pc, #308]	; 17a78 <get_boolean_op_value@@Base+0x5d8>
   17940:	add	r0, pc, r0
   17944:	add	r1, r0, #12
   17948:	ldr	r0, [pc, #300]	; 17a7c <get_boolean_op_value@@Base+0x5dc>
   1794c:	add	r0, pc, r0
   17950:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   17954:	ldr	r0, [pc, #292]	; 17a80 <get_boolean_op_value@@Base+0x5e0>
   17958:	add	r0, pc, r0
   1795c:	ldr	r1, [r0, #216]	; 0xd8
   17960:	ldr	lr, [r0, #220]	; 0xdc
   17964:	adds	r1, r1, #1
   17968:	adc	lr, lr, #0
   1796c:	str	r1, [r0, #216]	; 0xd8
   17970:	str	lr, [r0, #220]	; 0xdc
   17974:	movw	r0, #7
   17978:	str	r0, [fp, #-4]
   1797c:	b	179c4 <get_boolean_op_value@@Base+0x524>
   17980:	ldr	r0, [pc, #112]	; 179f8 <get_boolean_op_value@@Base+0x558>
   17984:	add	r0, pc, r0
   17988:	ldr	r1, [pc, #108]	; 179fc <get_boolean_op_value@@Base+0x55c>
   1798c:	add	r1, pc, r1
   17990:	bl	17a88 <get_boolean_op_value@@Base+0x5e8>
   17994:	ldr	r0, [pc, #84]	; 179f0 <get_boolean_op_value@@Base+0x550>
   17998:	add	r1, pc, r0
   1799c:	ldr	r0, [pc, #80]	; 179f4 <get_boolean_op_value@@Base+0x554>
   179a0:	ldr	r0, [pc, r0]
   179a4:	ldr	r0, [r0]
   179a8:	ldr	lr, [fp, #-8]
   179ac:	ldr	r2, [lr, #4]
   179b0:	bl	11fd4 <fprintf@plt>
   179b4:	movw	r1, #1
   179b8:	str	r0, [sp, #4]
   179bc:	mov	r0, r1
   179c0:	bl	11fa4 <exit@plt>
   179c4:	ldr	r0, [pc, #184]	; 17a84 <get_boolean_op_value@@Base+0x5e4>
   179c8:	add	r0, pc, r0
   179cc:	ldr	r1, [r0, #224]	; 0xe0
   179d0:	ldr	r2, [r0, #228]	; 0xe4
   179d4:	adds	r1, r1, #1
   179d8:	adc	r2, r2, #0
   179dc:	str	r1, [r0, #224]	; 0xe0
   179e0:	str	r2, [r0, #228]	; 0xe4
   179e4:	ldr	r0, [fp, #-4]
   179e8:	mov	sp, fp
   179ec:	pop	{fp, pc}
   179f0:	andeq	r7, r0, r5, asr #1
   179f4:	andeq	r9, r1, r8, lsl r7
   179f8:	andeq	r9, r1, r4, asr r7
   179fc:	andeq	r9, r1, r8
   17a00:	andeq	r7, r0, r5, lsr #4
   17a04:	andeq	r9, r1, r8, ror r8
   17a08:	andeq	sl, r1, r8, ror #12
   17a0c:	andeq	sl, r1, ip, asr r6
   17a10:	andeq	sl, r1, r8, lsl #12
   17a14:	andeq	r7, r0, fp, lsl #10
   17a18:			; <UNDEFINED> instruction: 0x0001a5b4
   17a1c:	andeq	sl, r1, ip, lsl #11
   17a20:	andeq	r7, r0, lr, lsl #9
   17a24:	andeq	sl, r1, r4, lsr r5
   17a28:	andeq	sl, r1, ip, lsl #10
   17a2c:	andeq	r7, r0, r1, lsl r4
   17a30:			; <UNDEFINED> instruction: 0x0001a4b4
   17a34:	andeq	sl, r1, ip, lsl #9
   17a38:	muleq	r0, r4, r3
   17a3c:	andeq	sl, r1, r4, lsr r4
   17a40:	andeq	sl, r1, ip, lsl #8
   17a44:	andeq	r7, r0, r7, lsl r3
   17a48:			; <UNDEFINED> instruction: 0x0001a3b4
   17a4c:	andeq	sl, r1, ip, lsl #7
   17a50:	muleq	r0, sl, r2
   17a54:	andeq	sl, r1, r4, lsr r3
   17a58:	andeq	sl, r1, ip, lsl #6
   17a5c:	andeq	r9, r1, r0, ror r8
   17a60:	ldrdeq	r9, [r1], -ip
   17a64:	andeq	r9, r1, r4, lsl r8
   17a68:	andeq	sl, r1, r8, asr #4
   17a6c:	muleq	r1, r8, r0
   17a70:	ldrdeq	r9, [r1], -r0
   17a74:	andeq	sl, r1, r4, lsl #4
   17a78:	andeq	r9, r1, r4, asr r0
   17a7c:	andeq	r9, r1, ip, lsl #15
   17a80:	andeq	sl, r1, r0, asr #3
   17a84:	andeq	sl, r1, r0, asr r1
   17a88:	sub	sp, sp, #12
   17a8c:	ldr	r0, [r0]
   17a90:	cmn	r0, #1
   17a94:	str	r1, [sp, #8]
   17a98:	str	r0, [sp, #4]
   17a9c:	beq	17adc <get_boolean_op_value@@Base+0x63c>
   17aa0:	ldr	r0, [sp, #8]
   17aa4:	ldr	r1, [sp, #4]
   17aa8:	add	r2, r0, r1, lsl #2
   17aac:	ldr	r2, [r2]
   17ab0:	movw	r3, #0
   17ab4:	cmp	r2, r3
   17ab8:	str	r2, [sp]
   17abc:	beq	17adc <get_boolean_op_value@@Base+0x63c>
   17ac0:	ldr	r0, [sp]
   17ac4:	ldr	r1, [r0]
   17ac8:	ldr	r2, [r0, #4]
   17acc:	adds	r1, r1, #1
   17ad0:	adc	r2, r2, #0
   17ad4:	str	r1, [r0]
   17ad8:	str	r2, [r0, #4]
   17adc:	add	sp, sp, #12
   17ae0:	bx	lr
   17ae4:	push	{r4, sl, fp, lr}
   17ae8:	add	fp, sp, #8
   17aec:	sub	sp, sp, #40	; 0x28
   17af0:	movw	r0, #0
   17af4:	str	r0, [fp, #-12]
   17af8:	b	17afc <get_boolean_op_value@@Base+0x65c>
   17afc:	ldr	r0, [fp, #-12]
   17b00:	ldr	r1, [pc, #244]	; 17bfc <get_boolean_op_value@@Base+0x75c>
   17b04:	add	r1, pc, r1
   17b08:	movw	r2, #24
   17b0c:	mul	r2, r0, r2
   17b10:	add	r1, r1, r2
   17b14:	ldr	r2, [r1]
   17b18:	ldr	r3, [r1, #4]
   17b1c:	ldr	ip, [r1, #8]
   17b20:	str	r0, [fp, #-16]
   17b24:	mov	r0, r2
   17b28:	str	r1, [fp, #-20]	; 0xffffffec
   17b2c:	mov	r1, r3
   17b30:	mov	r2, ip
   17b34:	bl	1b58c <__generate_code_for_binary_boolean_expression@@Base+0xa10>
   17b38:	ldr	r0, [fp, #-20]	; 0xffffffec
   17b3c:	ldr	r1, [r0, #12]
   17b40:	ldr	r2, [r0, #16]
   17b44:	ldr	r3, [r0, #20]
   17b48:	movw	ip, #0
   17b4c:	cmp	ip, r1
   17b50:	str	r1, [sp, #24]
   17b54:	str	r2, [sp, #20]
   17b58:	str	r3, [sp, #16]
   17b5c:	str	ip, [sp, #12]
   17b60:	bge	17bd8 <get_boolean_op_value@@Base+0x738>
   17b64:	ldr	r0, [sp, #12]
   17b68:	add	r1, r0, r0, lsl #2
   17b6c:	ldr	r2, [sp, #20]
   17b70:	ldr	r1, [r2, r1, lsl #2]!
   17b74:	ldr	r3, [r2, #4]
   17b78:	ldr	ip, [r2, #8]
   17b7c:	ldr	lr, [r2, #16]
   17b80:	ldrb	r2, [r2, #12]
   17b84:	mov	r4, sp
   17b88:	str	lr, [r4]
   17b8c:	str	r0, [sp, #8]
   17b90:	mov	r0, r1
   17b94:	mov	r1, r3
   17b98:	str	r2, [sp, #4]
   17b9c:	mov	r2, ip
   17ba0:	ldr	r3, [sp, #4]
   17ba4:	bl	1bcf0 <__generate_code_for_binary_boolean_expression@@Base+0x1174>
   17ba8:	ldr	r0, [sp, #16]
   17bac:	ldr	r1, [sp, #8]
   17bb0:	add	r2, r0, r1, lsl #3
   17bb4:	ldr	r0, [r2]
   17bb8:	ldr	r1, [r2, #4]
   17bbc:	bl	1c5a4 <__generate_code_for_binary_boolean_expression@@Base+0x1a28>
   17bc0:	ldr	r0, [sp, #8]
   17bc4:	add	r1, r0, #1
   17bc8:	ldr	r2, [sp, #24]
   17bcc:	cmp	r1, r2
   17bd0:	str	r1, [sp, #12]
   17bd4:	blt	17b64 <get_boolean_op_value@@Base+0x6c4>
   17bd8:	bl	1cd20 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   17bdc:	bl	1da8c <__generate_code_for_binary_boolean_expression@@Base+0x2f10>
   17be0:	ldr	lr, [fp, #-16]
   17be4:	add	r0, lr, #1
   17be8:	cmp	r0, #1
   17bec:	str	r0, [fp, #-12]
   17bf0:	blt	17afc <get_boolean_op_value@@Base+0x65c>
   17bf4:	sub	sp, fp, #8
   17bf8:	pop	{r4, sl, fp, pc}
   17bfc:	andeq	r9, r1, r4, rrx
   17c00:	push	{fp, lr}
   17c04:	mov	fp, sp
   17c08:	bl	17ae4 <get_boolean_op_value@@Base+0x644>
   17c0c:	ldr	lr, [pc, #848]	; 17f64 <get_boolean_op_value@@Base+0xac4>
   17c10:	add	lr, pc, lr
   17c14:	mov	r0, #0
   17c18:	str	r0, [lr, #12]
   17c1c:	str	r0, [lr, #8]
   17c20:	str	r0, [lr, #4]
   17c24:	str	r0, [lr]
   17c28:	ldr	lr, [pc, #824]	; 17f68 <get_boolean_op_value@@Base+0xac8>
   17c2c:	add	lr, pc, lr
   17c30:	str	r0, [lr, #12]
   17c34:	str	r0, [lr, #8]
   17c38:	str	r0, [lr, #4]
   17c3c:	str	r0, [lr]
   17c40:	ldr	lr, [pc, #804]	; 17f6c <get_boolean_op_value@@Base+0xacc>
   17c44:	add	lr, pc, lr
   17c48:	str	r0, [lr, #12]
   17c4c:	str	r0, [lr, #8]
   17c50:	str	r0, [lr, #4]
   17c54:	str	r0, [lr]
   17c58:	ldr	lr, [pc, #784]	; 17f70 <get_boolean_op_value@@Base+0xad0>
   17c5c:	add	lr, pc, lr
   17c60:	str	r0, [lr, #12]
   17c64:	str	r0, [lr, #8]
   17c68:	str	r0, [lr, #4]
   17c6c:	str	r0, [lr]
   17c70:	ldr	lr, [pc, #764]	; 17f74 <get_boolean_op_value@@Base+0xad4>
   17c74:	add	lr, pc, lr
   17c78:	str	r0, [lr, #12]
   17c7c:	str	r0, [lr, #8]
   17c80:	str	r0, [lr, #4]
   17c84:	str	r0, [lr]
   17c88:	ldr	lr, [pc, #744]	; 17f78 <get_boolean_op_value@@Base+0xad8>
   17c8c:	add	lr, pc, lr
   17c90:	str	r0, [lr, #12]
   17c94:	str	r0, [lr, #8]
   17c98:	str	r0, [lr, #4]
   17c9c:	str	r0, [lr]
   17ca0:	ldr	lr, [pc, #724]	; 17f7c <get_boolean_op_value@@Base+0xadc>
   17ca4:	add	lr, pc, lr
   17ca8:	str	r0, [lr, #12]
   17cac:	str	r0, [lr, #8]
   17cb0:	str	r0, [lr, #4]
   17cb4:	str	r0, [lr]
   17cb8:	ldr	lr, [pc, #704]	; 17f80 <get_boolean_op_value@@Base+0xae0>
   17cbc:	add	lr, pc, lr
   17cc0:	str	r0, [lr, #12]
   17cc4:	str	r0, [lr, #8]
   17cc8:	str	r0, [lr, #4]
   17ccc:	str	r0, [lr]
   17cd0:	ldr	lr, [pc, #684]	; 17f84 <get_boolean_op_value@@Base+0xae4>
   17cd4:	add	lr, pc, lr
   17cd8:	str	r0, [lr, #116]	; 0x74
   17cdc:	str	r0, [lr, #112]	; 0x70
   17ce0:	str	r0, [lr, #108]	; 0x6c
   17ce4:	str	r0, [lr, #104]	; 0x68
   17ce8:	str	r0, [lr, #100]	; 0x64
   17cec:	str	r0, [lr, #96]	; 0x60
   17cf0:	str	r0, [lr, #92]	; 0x5c
   17cf4:	str	r0, [lr, #88]	; 0x58
   17cf8:	str	r0, [lr, #84]	; 0x54
   17cfc:	str	r0, [lr, #80]	; 0x50
   17d00:	str	r0, [lr, #76]	; 0x4c
   17d04:	str	r0, [lr, #72]	; 0x48
   17d08:	str	r0, [lr, #68]	; 0x44
   17d0c:	str	r0, [lr, #64]	; 0x40
   17d10:	str	r0, [lr, #60]	; 0x3c
   17d14:	str	r0, [lr, #56]	; 0x38
   17d18:	str	r0, [lr, #52]	; 0x34
   17d1c:	str	r0, [lr, #48]	; 0x30
   17d20:	str	r0, [lr, #44]	; 0x2c
   17d24:	str	r0, [lr, #40]	; 0x28
   17d28:	str	r0, [lr, #36]	; 0x24
   17d2c:	str	r0, [lr, #32]
   17d30:	str	r0, [lr, #28]
   17d34:	str	r0, [lr, #24]
   17d38:	str	r0, [lr, #20]
   17d3c:	str	r0, [lr, #16]
   17d40:	str	r0, [lr, #12]
   17d44:	str	r0, [lr, #8]
   17d48:	str	r0, [lr, #4]
   17d4c:	str	r0, [lr]
   17d50:	ldr	lr, [pc, #560]	; 17f88 <get_boolean_op_value@@Base+0xae8>
   17d54:	add	lr, pc, lr
   17d58:	str	r0, [lr, #36]	; 0x24
   17d5c:	str	r0, [lr, #32]
   17d60:	str	r0, [lr, #28]
   17d64:	str	r0, [lr, #24]
   17d68:	str	r0, [lr, #20]
   17d6c:	str	r0, [lr, #16]
   17d70:	str	r0, [lr, #12]
   17d74:	str	r0, [lr, #8]
   17d78:	str	r0, [lr, #4]
   17d7c:	str	r0, [lr]
   17d80:	ldr	lr, [pc, #516]	; 17f8c <get_boolean_op_value@@Base+0xaec>
   17d84:	add	lr, pc, lr
   17d88:	str	r0, [lr, #36]	; 0x24
   17d8c:	str	r0, [lr, #32]
   17d90:	str	r0, [lr, #28]
   17d94:	str	r0, [lr, #24]
   17d98:	str	r0, [lr, #20]
   17d9c:	str	r0, [lr, #16]
   17da0:	str	r0, [lr, #12]
   17da4:	str	r0, [lr, #8]
   17da8:	str	r0, [lr, #4]
   17dac:	str	r0, [lr]
   17db0:	ldr	lr, [pc, #472]	; 17f90 <get_boolean_op_value@@Base+0xaf0>
   17db4:	add	lr, pc, lr
   17db8:	str	r0, [lr, #36]	; 0x24
   17dbc:	str	r0, [lr, #32]
   17dc0:	str	r0, [lr, #28]
   17dc4:	str	r0, [lr, #24]
   17dc8:	str	r0, [lr, #20]
   17dcc:	str	r0, [lr, #16]
   17dd0:	str	r0, [lr, #12]
   17dd4:	str	r0, [lr, #8]
   17dd8:	str	r0, [lr, #4]
   17ddc:	str	r0, [lr]
   17de0:	ldr	lr, [pc, #428]	; 17f94 <get_boolean_op_value@@Base+0xaf4>
   17de4:	add	lr, pc, lr
   17de8:	str	r0, [lr, #36]	; 0x24
   17dec:	str	r0, [lr, #32]
   17df0:	str	r0, [lr, #28]
   17df4:	str	r0, [lr, #24]
   17df8:	str	r0, [lr, #20]
   17dfc:	str	r0, [lr, #16]
   17e00:	str	r0, [lr, #12]
   17e04:	str	r0, [lr, #8]
   17e08:	str	r0, [lr, #4]
   17e0c:	str	r0, [lr]
   17e10:	ldr	lr, [pc, #384]	; 17f98 <get_boolean_op_value@@Base+0xaf8>
   17e14:	add	lr, pc, lr
   17e18:	str	r0, [lr, #36]	; 0x24
   17e1c:	str	r0, [lr, #32]
   17e20:	str	r0, [lr, #28]
   17e24:	str	r0, [lr, #24]
   17e28:	str	r0, [lr, #20]
   17e2c:	str	r0, [lr, #16]
   17e30:	str	r0, [lr, #12]
   17e34:	str	r0, [lr, #8]
   17e38:	str	r0, [lr, #4]
   17e3c:	str	r0, [lr]
   17e40:	ldr	lr, [pc, #340]	; 17f9c <get_boolean_op_value@@Base+0xafc>
   17e44:	add	lr, pc, lr
   17e48:	str	r0, [lr, #36]	; 0x24
   17e4c:	str	r0, [lr, #32]
   17e50:	str	r0, [lr, #28]
   17e54:	str	r0, [lr, #24]
   17e58:	str	r0, [lr, #20]
   17e5c:	str	r0, [lr, #16]
   17e60:	str	r0, [lr, #12]
   17e64:	str	r0, [lr, #8]
   17e68:	str	r0, [lr, #4]
   17e6c:	str	r0, [lr]
   17e70:	ldr	lr, [pc, #296]	; 17fa0 <get_boolean_op_value@@Base+0xb00>
   17e74:	add	lr, pc, lr
   17e78:	str	r0, [lr, #228]	; 0xe4
   17e7c:	str	r0, [lr, #224]	; 0xe0
   17e80:	str	r0, [lr, #220]	; 0xdc
   17e84:	str	r0, [lr, #216]	; 0xd8
   17e88:	str	r0, [lr, #212]	; 0xd4
   17e8c:	str	r0, [lr, #208]	; 0xd0
   17e90:	str	r0, [lr, #204]	; 0xcc
   17e94:	str	r0, [lr, #200]	; 0xc8
   17e98:	str	r0, [lr, #196]	; 0xc4
   17e9c:	str	r0, [lr, #192]	; 0xc0
   17ea0:	str	r0, [lr, #188]	; 0xbc
   17ea4:	str	r0, [lr, #184]	; 0xb8
   17ea8:	str	r0, [lr, #180]	; 0xb4
   17eac:	str	r0, [lr, #176]	; 0xb0
   17eb0:	str	r0, [lr, #172]	; 0xac
   17eb4:	str	r0, [lr, #168]	; 0xa8
   17eb8:	str	r0, [lr, #164]	; 0xa4
   17ebc:	str	r0, [lr, #160]	; 0xa0
   17ec0:	str	r0, [lr, #156]	; 0x9c
   17ec4:	str	r0, [lr, #152]	; 0x98
   17ec8:	str	r0, [lr, #148]	; 0x94
   17ecc:	str	r0, [lr, #144]	; 0x90
   17ed0:	str	r0, [lr, #140]	; 0x8c
   17ed4:	str	r0, [lr, #136]	; 0x88
   17ed8:	str	r0, [lr, #132]	; 0x84
   17edc:	str	r0, [lr, #128]	; 0x80
   17ee0:	str	r0, [lr, #124]	; 0x7c
   17ee4:	str	r0, [lr, #120]	; 0x78
   17ee8:	str	r0, [lr, #116]	; 0x74
   17eec:	str	r0, [lr, #112]	; 0x70
   17ef0:	str	r0, [lr, #108]	; 0x6c
   17ef4:	str	r0, [lr, #104]	; 0x68
   17ef8:	str	r0, [lr, #100]	; 0x64
   17efc:	str	r0, [lr, #96]	; 0x60
   17f00:	str	r0, [lr, #92]	; 0x5c
   17f04:	str	r0, [lr, #88]	; 0x58
   17f08:	str	r0, [lr, #84]	; 0x54
   17f0c:	str	r0, [lr, #80]	; 0x50
   17f10:	str	r0, [lr, #76]	; 0x4c
   17f14:	str	r0, [lr, #72]	; 0x48
   17f18:	str	r0, [lr, #68]	; 0x44
   17f1c:	str	r0, [lr, #64]	; 0x40
   17f20:	str	r0, [lr, #60]	; 0x3c
   17f24:	str	r0, [lr, #56]	; 0x38
   17f28:	str	r0, [lr, #52]	; 0x34
   17f2c:	str	r0, [lr, #48]	; 0x30
   17f30:	str	r0, [lr, #44]	; 0x2c
   17f34:	str	r0, [lr, #40]	; 0x28
   17f38:	str	r0, [lr, #36]	; 0x24
   17f3c:	str	r0, [lr, #32]
   17f40:	str	r0, [lr, #28]
   17f44:	str	r0, [lr, #24]
   17f48:	str	r0, [lr, #20]
   17f4c:	str	r0, [lr, #16]
   17f50:	str	r0, [lr, #12]
   17f54:	str	r0, [lr, #8]
   17f58:	str	r0, [lr, #4]
   17f5c:	str	r0, [lr]
   17f60:	pop	{fp, pc}
   17f64:	andeq	r9, r1, r8, ror #25
   17f68:	ldrdeq	r9, [r1], -ip
   17f6c:	ldrdeq	r9, [r1], -r4
   17f70:	andeq	r9, r1, ip, asr #25
   17f74:	andeq	r9, r1, r4, asr #25
   17f78:			; <UNDEFINED> instruction: 0x00019cbc
   17f7c:			; <UNDEFINED> instruction: 0x00019cb4
   17f80:	andeq	r9, r1, ip, lsr #25
   17f84:	andeq	r9, r1, r4, lsr #25
   17f88:	andeq	r9, r1, r4, lsr #25
   17f8c:	andeq	r9, r1, r4, lsr #25
   17f90:	andeq	r9, r1, r4, lsr #25
   17f94:	andeq	r9, r1, r4, lsr #25
   17f98:	andeq	r9, r1, r4, lsr #25
   17f9c:	andeq	r9, r1, r4, lsr #25
   17fa0:	andeq	r9, r1, r4, lsr #25
   17fa4:	push	{fp, lr}
   17fa8:	mov	fp, sp
   17fac:	ldr	r0, [pc, #16]	; 17fc4 <get_boolean_op_value@@Base+0xb24>
   17fb0:	add	r0, pc, r0
   17fb4:	ldr	r1, [pc, #12]	; 17fc8 <get_boolean_op_value@@Base+0xb28>
   17fb8:	add	r1, pc, r1
   17fbc:	bl	1df3c <__gcov_flush@@Base+0xb4>
   17fc0:	pop	{fp, pc}
   17fc4:			; <UNDEFINED> instruction: 0xfffffb2c
   17fc8:			; <UNDEFINED> instruction: 0xfffffc40

00017fcc <init_grammar@@Base>:
   17fcc:	sub	sp, sp, #16
   17fd0:	ldr	r2, [pc, #104]	; 18040 <init_grammar@@Base+0x74>
   17fd4:	add	r2, pc, r2
   17fd8:	ldr	r3, [r2, #4]
   17fdc:	ldr	ip, [pc, #96]	; 18044 <init_grammar@@Base+0x78>
   17fe0:	ldr	ip, [pc, ip]
   17fe4:	adds	ip, ip, #1
   17fe8:	adc	r3, r3, #0
   17fec:	str	ip, [r2]
   17ff0:	str	r3, [r2, #4]
   17ff4:	str	r0, [sp, #4]
   17ff8:	str	r1, [sp]
   17ffc:	ldr	r0, [pc, #68]	; 18048 <init_grammar@@Base+0x7c>
   18000:	add	r0, pc, r0
   18004:	ldr	r1, [r0, #8]
   18008:	ldr	r2, [r0, #12]
   1800c:	adds	r1, r1, #1
   18010:	adc	r2, r2, #0
   18014:	str	r1, [r0, #8]
   18018:	str	r2, [r0, #12]
   1801c:	ldr	r0, [sp, #4]
   18020:	str	r0, [sp, #12]
   18024:	ldr	r1, [sp]
   18028:	str	r1, [sp, #8]
   1802c:	ldr	r2, [sp, #8]
   18030:	ldr	r3, [sp, #12]
   18034:	str	r2, [r3]
   18038:	add	sp, sp, #16
   1803c:	bx	lr
   18040:	andeq	r9, r1, r4, lsr ip
   18044:	andeq	r9, r1, r8, lsr #24
   18048:	andeq	r9, r1, r8, lsl #24

0001804c <destroy_grammar@@Base>:
   1804c:	sub	sp, sp, #8
   18050:	ldr	r1, [pc, #80]	; 180a8 <destroy_grammar@@Base+0x5c>
   18054:	add	r1, pc, r1
   18058:	ldr	r2, [r1, #4]
   1805c:	ldr	r3, [pc, #72]	; 180ac <destroy_grammar@@Base+0x60>
   18060:	ldr	r3, [pc, r3]
   18064:	adds	r3, r3, #1
   18068:	adc	r2, r2, #0
   1806c:	str	r3, [r1]
   18070:	str	r2, [r1, #4]
   18074:	str	r0, [sp]
   18078:	ldr	r0, [pc, #48]	; 180b0 <destroy_grammar@@Base+0x64>
   1807c:	add	r0, pc, r0
   18080:	ldr	r1, [r0, #8]
   18084:	ldr	r2, [r0, #12]
   18088:	adds	r1, r1, #1
   1808c:	adc	r2, r2, #0
   18090:	str	r1, [r0, #8]
   18094:	str	r2, [r0, #12]
   18098:	ldr	r0, [sp]
   1809c:	str	r0, [sp, #4]
   180a0:	add	sp, sp, #8
   180a4:	bx	lr
   180a8:	andeq	r9, r1, r4, asr #23
   180ac:			; <UNDEFINED> instruction: 0x00019bb8
   180b0:	muleq	r1, ip, fp

000180b4 <build_ast@@Base>:
   180b4:	push	{fp, lr}
   180b8:	mov	fp, sp
   180bc:	sub	sp, sp, #8
   180c0:	ldr	r1, [pc, #88]	; 18120 <build_ast@@Base+0x6c>
   180c4:	add	r1, pc, r1
   180c8:	ldr	r2, [r1, #4]
   180cc:	ldr	r3, [pc, #80]	; 18124 <build_ast@@Base+0x70>
   180d0:	ldr	r3, [pc, r3]
   180d4:	adds	r3, r3, #1
   180d8:	adc	r2, r2, #0
   180dc:	str	r3, [r1]
   180e0:	str	r2, [r1, #4]
   180e4:	str	r0, [sp]
   180e8:	ldr	r0, [pc, #56]	; 18128 <build_ast@@Base+0x74>
   180ec:	add	r0, pc, r0
   180f0:	ldr	r1, [r0, #8]
   180f4:	ldr	r2, [r0, #12]
   180f8:	adds	r1, r1, #1
   180fc:	adc	r2, r2, #0
   18100:	str	r1, [r0, #8]
   18104:	str	r2, [r0, #12]
   18108:	ldr	r0, [sp]
   1810c:	str	r0, [sp, #4]
   18110:	ldr	r0, [sp, #4]
   18114:	bl	1812c <read_function_ast_node@@Base>
   18118:	mov	sp, fp
   1811c:	pop	{fp, pc}
   18120:	andeq	r9, r1, r4, ror #22
   18124:	andeq	r9, r1, r8, asr fp
   18128:	andeq	r9, r1, ip, lsr fp

0001812c <read_function_ast_node@@Base>:
   1812c:	push	{fp, lr}
   18130:	mov	fp, sp
   18134:	sub	sp, sp, #32
   18138:	ldr	r1, [pc, #756]	; 18434 <read_function_ast_node@@Base+0x308>
   1813c:	add	r1, pc, r1
   18140:	ldr	r2, [r1, #4]
   18144:	ldr	r3, [pc, #748]	; 18438 <read_function_ast_node@@Base+0x30c>
   18148:	ldr	r3, [pc, r3]
   1814c:	adds	r3, r3, #1
   18150:	adc	r2, r2, #0
   18154:	str	r3, [r1]
   18158:	str	r2, [r1, #4]
   1815c:	str	r0, [sp, #4]
   18160:	ldr	r0, [sp, #4]
   18164:	str	r0, [fp, #-8]
   18168:	mov	r1, #0
   1816c:	str	r1, [fp, #-12]
   18170:	str	r1, [sp, #16]
   18174:	str	r1, [sp, #12]
   18178:	str	r1, [sp, #8]
   1817c:	ldr	r1, [fp, #-8]
   18180:	ldr	r0, [r1]
   18184:	bl	141fc <next@@Base>
   18188:	str	r0, [sp, #12]
   1818c:	ldr	r0, [sp, #12]
   18190:	ldr	r0, [r0]
   18194:	cmp	r0, #0
   18198:	mov	r1, r0
   1819c:	movwne	r1, #1
   181a0:	mov	lr, #16
   181a4:	cmp	r0, #0
   181a8:	movwne	lr, #8
   181ac:	ldr	r0, [pc, #648]	; 1843c <read_function_ast_node@@Base+0x310>
   181b0:	add	r0, pc, r0
   181b4:	ldr	lr, [r0, lr]!
   181b8:	ldr	r2, [r0, #4]
   181bc:	adds	lr, lr, #1
   181c0:	adc	r2, r2, #0
   181c4:	str	lr, [r0]
   181c8:	str	r2, [r0, #4]
   181cc:	tst	r1, #1
   181d0:	beq	18200 <read_function_ast_node@@Base+0xd4>
   181d4:	ldr	r0, [pc, #612]	; 18440 <read_function_ast_node@@Base+0x314>
   181d8:	add	r0, pc, r0
   181dc:	ldr	r1, [r0, #24]
   181e0:	ldr	r2, [r0, #28]
   181e4:	adds	r1, r1, #1
   181e8:	adc	r2, r2, #0
   181ec:	str	r1, [r0, #24]
   181f0:	str	r2, [r0, #28]
   181f4:	movw	r0, #0
   181f8:	str	r0, [fp, #-4]
   181fc:	b	18408 <read_function_ast_node@@Base+0x2dc>
   18200:	ldr	r0, [sp, #12]
   18204:	bl	131e8 <free_token_int_type@@Base>
   18208:	ldr	r0, [fp, #-8]
   1820c:	ldr	r0, [r0]
   18210:	bl	141fc <next@@Base>
   18214:	str	r0, [sp, #12]
   18218:	ldr	r0, [sp, #12]
   1821c:	ldr	r0, [r0]
   18220:	sub	lr, r0, #2
   18224:	cmp	r0, #2
   18228:	movwne	lr, #1
   1822c:	mov	r1, #40	; 0x28
   18230:	cmp	r0, #2
   18234:	movwne	r1, #32
   18238:	ldr	r0, [pc, #516]	; 18444 <read_function_ast_node@@Base+0x318>
   1823c:	add	r0, pc, r0
   18240:	ldr	r1, [r0, r1]!
   18244:	ldr	r2, [r0, #4]
   18248:	adds	r1, r1, #1
   1824c:	adc	r2, r2, #0
   18250:	str	r1, [r0]
   18254:	str	r2, [r0, #4]
   18258:	tst	lr, #1
   1825c:	beq	1828c <read_function_ast_node@@Base+0x160>
   18260:	ldr	r0, [pc, #480]	; 18448 <read_function_ast_node@@Base+0x31c>
   18264:	add	r0, pc, r0
   18268:	ldr	r1, [r0, #48]	; 0x30
   1826c:	ldr	r2, [r0, #52]	; 0x34
   18270:	adds	r1, r1, #1
   18274:	adc	r2, r2, #0
   18278:	str	r1, [r0, #48]	; 0x30
   1827c:	str	r2, [r0, #52]	; 0x34
   18280:	movw	r0, #0
   18284:	str	r0, [fp, #-4]
   18288:	b	18408 <read_function_ast_node@@Base+0x2dc>
   1828c:	ldr	r0, [sp, #12]
   18290:	str	r0, [sp, #8]
   18294:	ldr	r0, [fp, #-8]
   18298:	ldr	r0, [r0]
   1829c:	bl	141fc <next@@Base>
   182a0:	str	r0, [sp, #12]
   182a4:	ldr	r0, [sp, #12]
   182a8:	ldr	r0, [r0]
   182ac:	sub	lr, r0, #3
   182b0:	cmp	r0, #3
   182b4:	movwne	lr, #1
   182b8:	mov	r1, #64	; 0x40
   182bc:	cmp	r0, #3
   182c0:	movwne	r1, #56	; 0x38
   182c4:	ldr	r0, [pc, #384]	; 1844c <read_function_ast_node@@Base+0x320>
   182c8:	add	r0, pc, r0
   182cc:	ldr	r1, [r0, r1]!
   182d0:	ldr	r2, [r0, #4]
   182d4:	adds	r1, r1, #1
   182d8:	adc	r2, r2, #0
   182dc:	str	r1, [r0]
   182e0:	str	r2, [r0, #4]
   182e4:	tst	lr, #1
   182e8:	beq	18318 <read_function_ast_node@@Base+0x1ec>
   182ec:	ldr	r0, [pc, #348]	; 18450 <read_function_ast_node@@Base+0x324>
   182f0:	add	r0, pc, r0
   182f4:	ldr	r1, [r0, #72]	; 0x48
   182f8:	ldr	r2, [r0, #76]	; 0x4c
   182fc:	adds	r1, r1, #1
   18300:	adc	r2, r2, #0
   18304:	str	r1, [r0, #72]	; 0x48
   18308:	str	r2, [r0, #76]	; 0x4c
   1830c:	movw	r0, #0
   18310:	str	r0, [fp, #-4]
   18314:	b	18408 <read_function_ast_node@@Base+0x2dc>
   18318:	ldr	r0, [sp, #12]
   1831c:	bl	1335c <free_token_opar@@Base>
   18320:	ldr	r0, [fp, #-8]
   18324:	ldr	r0, [r0]
   18328:	bl	141fc <next@@Base>
   1832c:	str	r0, [sp, #12]
   18330:	ldr	r0, [sp, #12]
   18334:	ldr	r0, [r0]
   18338:	sub	lr, r0, #4
   1833c:	cmp	r0, #4
   18340:	movwne	lr, #1
   18344:	mov	r1, #88	; 0x58
   18348:	cmp	r0, #4
   1834c:	movwne	r1, #80	; 0x50
   18350:	ldr	r0, [pc, #252]	; 18454 <read_function_ast_node@@Base+0x328>
   18354:	add	r0, pc, r0
   18358:	ldr	r1, [r0, r1]!
   1835c:	ldr	r2, [r0, #4]
   18360:	adds	r1, r1, #1
   18364:	adc	r2, r2, #0
   18368:	str	r1, [r0]
   1836c:	str	r2, [r0, #4]
   18370:	tst	lr, #1
   18374:	beq	183a4 <read_function_ast_node@@Base+0x278>
   18378:	ldr	r0, [pc, #216]	; 18458 <read_function_ast_node@@Base+0x32c>
   1837c:	add	r0, pc, r0
   18380:	ldr	r1, [r0, #96]	; 0x60
   18384:	ldr	r2, [r0, #100]	; 0x64
   18388:	adds	r1, r1, #1
   1838c:	adc	r2, r2, #0
   18390:	str	r1, [r0, #96]	; 0x60
   18394:	str	r2, [r0, #100]	; 0x64
   18398:	movw	r0, #0
   1839c:	str	r0, [fp, #-4]
   183a0:	b	18408 <read_function_ast_node@@Base+0x2dc>
   183a4:	ldr	r0, [pc, #176]	; 1845c <read_function_ast_node@@Base+0x330>
   183a8:	add	r0, pc, r0
   183ac:	ldr	r1, [r0, #104]	; 0x68
   183b0:	ldr	r2, [r0, #108]	; 0x6c
   183b4:	adds	r1, r1, #1
   183b8:	adc	r2, r2, #0
   183bc:	str	r1, [r0, #104]	; 0x68
   183c0:	str	r2, [r0, #108]	; 0x6c
   183c4:	ldr	r0, [sp, #12]
   183c8:	bl	133d8 <free_token_cpar@@Base>
   183cc:	ldr	r0, [fp, #-8]
   183d0:	bl	18464 <read_body@@Base>
   183d4:	str	r0, [sp, #16]
   183d8:	movw	r0, #16
   183dc:	bl	11f68 <malloc@plt>
   183e0:	str	r0, [fp, #-12]
   183e4:	ldr	r0, [fp, #-12]
   183e8:	ldr	r1, [sp, #8]
   183ec:	ldr	r1, [r1, #4]
   183f0:	ldr	r2, [sp, #16]
   183f4:	bl	168e0 <init_node_function@@Base>
   183f8:	ldr	r0, [sp, #8]
   183fc:	bl	132e0 <free_token_function@@Base>
   18400:	ldr	r0, [fp, #-12]
   18404:	str	r0, [fp, #-4]
   18408:	ldr	r0, [pc, #80]	; 18460 <read_function_ast_node@@Base+0x334>
   1840c:	add	r0, pc, r0
   18410:	ldr	r1, [r0, #112]	; 0x70
   18414:	ldr	r2, [r0, #116]	; 0x74
   18418:	adds	r1, r1, #1
   1841c:	adc	r2, r2, #0
   18420:	str	r1, [r0, #112]	; 0x70
   18424:	str	r2, [r0, #116]	; 0x74
   18428:	ldr	r0, [fp, #-4]
   1842c:	mov	sp, fp
   18430:	pop	{fp, pc}
   18434:	strdeq	r9, [r1], -ip
   18438:	strdeq	r9, [r1], -r0
   1843c:	andeq	r9, r1, r8, lsl #21
   18440:	andeq	r9, r1, r0, ror #20
   18444:	strdeq	r9, [r1], -ip
   18448:	ldrdeq	r9, [r1], -r4
   1844c:	andeq	r9, r1, r0, ror r9
   18450:	andeq	r9, r1, r8, asr #18
   18454:	andeq	r9, r1, r4, ror #17
   18458:			; <UNDEFINED> instruction: 0x000198bc
   1845c:	muleq	r1, r0, r8
   18460:	andeq	r9, r1, ip, lsr #16

00018464 <read_body@@Base>:
   18464:	push	{fp, lr}
   18468:	mov	fp, sp
   1846c:	sub	sp, sp, #32
   18470:	ldr	r1, [pc, #932]	; 1881c <read_body@@Base+0x3b8>
   18474:	add	r1, pc, r1
   18478:	ldr	r2, [r1, #4]
   1847c:	ldr	r3, [pc, #924]	; 18820 <read_body@@Base+0x3bc>
   18480:	ldr	r3, [pc, r3]
   18484:	adds	r3, r3, #1
   18488:	adc	r2, r2, #0
   1848c:	str	r3, [r1]
   18490:	str	r2, [r1, #4]
   18494:	str	r0, [sp, #4]
   18498:	ldr	r0, [sp, #4]
   1849c:	str	r0, [fp, #-8]
   184a0:	mov	r1, #0
   184a4:	str	r1, [fp, #-12]
   184a8:	str	r1, [sp, #16]
   184ac:	str	r1, [sp, #12]
   184b0:	str	r1, [sp, #8]
   184b4:	ldr	r1, [fp, #-8]
   184b8:	ldr	r0, [r1]
   184bc:	bl	141fc <next@@Base>
   184c0:	str	r0, [sp, #8]
   184c4:	ldr	r0, [sp, #8]
   184c8:	ldr	r0, [r0]
   184cc:	sub	r1, r0, #5
   184d0:	cmp	r0, #5
   184d4:	movwne	r1, #1
   184d8:	mov	lr, #16
   184dc:	cmp	r0, #5
   184e0:	movwne	lr, #8
   184e4:	ldr	r0, [pc, #824]	; 18824 <read_body@@Base+0x3c0>
   184e8:	add	r0, pc, r0
   184ec:	ldr	lr, [r0, lr]!
   184f0:	ldr	r2, [r0, #4]
   184f4:	adds	lr, lr, #1
   184f8:	adc	r2, r2, #0
   184fc:	str	lr, [r0]
   18500:	str	r2, [r0, #4]
   18504:	tst	r1, #1
   18508:	beq	18538 <read_body@@Base+0xd4>
   1850c:	ldr	r0, [pc, #788]	; 18828 <read_body@@Base+0x3c4>
   18510:	add	r0, pc, r0
   18514:	ldr	r1, [r0, #24]
   18518:	ldr	r2, [r0, #28]
   1851c:	adds	r1, r1, #1
   18520:	adc	r2, r2, #0
   18524:	str	r1, [r0, #24]
   18528:	str	r2, [r0, #28]
   1852c:	movw	r0, #0
   18530:	str	r0, [fp, #-4]
   18534:	b	187f0 <read_body@@Base+0x38c>
   18538:	ldr	r0, [pc, #748]	; 1882c <read_body@@Base+0x3c8>
   1853c:	add	r0, pc, r0
   18540:	ldr	r1, [r0, #32]
   18544:	ldr	r2, [r0, #36]	; 0x24
   18548:	adds	r1, r1, #1
   1854c:	adc	r2, r2, #0
   18550:	str	r1, [r0, #32]
   18554:	str	r2, [r0, #36]	; 0x24
   18558:	ldr	r0, [sp, #8]
   1855c:	bl	13454 <free_token_obra@@Base>
   18560:	ldr	r0, [fp, #-8]
   18564:	ldr	r0, [r0]
   18568:	bl	141fc <next@@Base>
   1856c:	str	r0, [sp, #8]
   18570:	ldr	r0, [sp, #8]
   18574:	ldr	r0, [r0]
   18578:	sub	r1, r0, #6
   1857c:	cmp	r0, #6
   18580:	movwne	r1, #1
   18584:	mov	r2, #48	; 0x30
   18588:	cmp	r0, #6
   1858c:	movwne	r2, #40	; 0x28
   18590:	ldr	r0, [pc, #664]	; 18830 <read_body@@Base+0x3cc>
   18594:	add	r0, pc, r0
   18598:	ldr	r2, [r0, r2]!
   1859c:	ldr	r3, [r0, #4]
   185a0:	adds	r2, r2, #1
   185a4:	adc	r3, r3, #0
   185a8:	str	r2, [r0]
   185ac:	str	r3, [r0, #4]
   185b0:	tst	r1, #1
   185b4:	beq	187c0 <read_body@@Base+0x35c>
   185b8:	ldr	r0, [pc, #628]	; 18834 <read_body@@Base+0x3d0>
   185bc:	add	r0, pc, r0
   185c0:	mov	r1, #0
   185c4:	str	r1, [r0]
   185c8:	ldr	r0, [sp, #8]
   185cc:	ldr	r0, [r0]
   185d0:	cmp	r0, #7
   185d4:	str	r0, [sp]
   185d8:	beq	185f0 <read_body@@Base+0x18c>
   185dc:	b	185e0 <read_body@@Base+0x17c>
   185e0:	ldr	r0, [sp]
   185e4:	cmp	r0, #10
   185e8:	beq	18640 <read_body@@Base+0x1dc>
   185ec:	b	18690 <read_body@@Base+0x22c>
   185f0:	ldr	r0, [pc, #576]	; 18838 <read_body@@Base+0x3d4>
   185f4:	add	r0, pc, r0
   185f8:	add	r1, r0, #4
   185fc:	ldr	r0, [pc, #568]	; 1883c <read_body@@Base+0x3d8>
   18600:	add	r0, pc, r0
   18604:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   18608:	ldr	r0, [pc, #560]	; 18840 <read_body@@Base+0x3dc>
   1860c:	add	r0, pc, r0
   18610:	ldr	r1, [r0, #80]	; 0x50
   18614:	ldr	lr, [r0, #84]	; 0x54
   18618:	adds	r1, r1, #1
   1861c:	adc	lr, lr, #0
   18620:	str	r1, [r0, #80]	; 0x50
   18624:	str	lr, [r0, #84]	; 0x54
   18628:	ldr	r0, [sp, #8]
   1862c:	bl	1354c <free_token_return@@Base>
   18630:	ldr	r0, [fp, #-8]
   18634:	bl	18874 <read_return_expression@@Base>
   18638:	str	r0, [sp, #16]
   1863c:	b	186e0 <read_body@@Base+0x27c>
   18640:	ldr	r0, [pc, #508]	; 18844 <read_body@@Base+0x3e0>
   18644:	add	r0, pc, r0
   18648:	add	r1, r0, #8
   1864c:	ldr	r0, [pc, #500]	; 18848 <read_body@@Base+0x3e4>
   18650:	add	r0, pc, r0
   18654:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   18658:	ldr	r0, [pc, #492]	; 1884c <read_body@@Base+0x3e8>
   1865c:	add	r0, pc, r0
   18660:	ldr	r1, [r0, #88]	; 0x58
   18664:	ldr	lr, [r0, #92]	; 0x5c
   18668:	adds	r1, r1, #1
   1866c:	adc	lr, lr, #0
   18670:	str	r1, [r0, #88]	; 0x58
   18674:	str	lr, [r0, #92]	; 0x5c
   18678:	ldr	r0, [sp, #8]
   1867c:	bl	136c0 <free_token_if@@Base>
   18680:	ldr	r0, [fp, #-8]
   18684:	bl	18a90 <read_if_statement@@Base>
   18688:	str	r0, [sp, #16]
   1868c:	b	186e0 <read_body@@Base+0x27c>
   18690:	ldr	r0, [pc, #440]	; 18850 <read_body@@Base+0x3ec>
   18694:	add	r0, pc, r0
   18698:	ldr	r1, [pc, #436]	; 18854 <read_body@@Base+0x3f0>
   1869c:	add	r1, pc, r1
   186a0:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   186a4:	ldr	r0, [pc, #428]	; 18858 <read_body@@Base+0x3f4>
   186a8:	add	r0, pc, r0
   186ac:	ldr	r1, [r0, #96]	; 0x60
   186b0:	ldr	lr, [r0, #100]	; 0x64
   186b4:	adds	r1, r1, #1
   186b8:	adc	lr, lr, #0
   186bc:	str	r1, [r0, #96]	; 0x60
   186c0:	str	lr, [r0, #100]	; 0x64
   186c4:	ldr	r0, [fp, #-8]
   186c8:	ldr	r0, [r0]
   186cc:	ldr	r1, [sp, #8]
   186d0:	bl	13f10 <push_back@@Base>
   186d4:	ldr	r0, [fp, #-12]
   186d8:	str	r0, [fp, #-4]
   186dc:	b	187f0 <read_body@@Base+0x38c>
   186e0:	ldr	r0, [fp, #-12]
   186e4:	cmp	r0, #0
   186e8:	mov	r1, r0
   186ec:	movwne	r1, #1
   186f0:	mov	r2, #112	; 0x70
   186f4:	cmp	r0, #0
   186f8:	movwne	r2, #104	; 0x68
   186fc:	ldr	r0, [pc, #344]	; 1885c <read_body@@Base+0x3f8>
   18700:	add	r0, pc, r0
   18704:	ldr	r2, [r0, r2]!
   18708:	ldr	r3, [r0, #4]
   1870c:	adds	r2, r2, #1
   18710:	adc	r3, r3, #0
   18714:	str	r2, [r0]
   18718:	str	r3, [r0, #4]
   1871c:	tst	r1, #1
   18720:	beq	1875c <read_body@@Base+0x2f8>
   18724:	ldr	r0, [pc, #308]	; 18860 <read_body@@Base+0x3fc>
   18728:	add	r0, pc, r0
   1872c:	ldr	r1, [r0, #120]	; 0x78
   18730:	ldr	r2, [r0, #124]	; 0x7c
   18734:	adds	r1, r1, #1
   18738:	adc	r2, r2, #0
   1873c:	str	r1, [r0, #120]	; 0x78
   18740:	str	r2, [r0, #124]	; 0x7c
   18744:	ldr	r0, [sp, #16]
   18748:	ldr	r1, [sp, #12]
   1874c:	str	r0, [r1, #4]
   18750:	ldr	r0, [sp, #16]
   18754:	str	r0, [sp, #12]
   18758:	b	1878c <read_body@@Base+0x328>
   1875c:	ldr	r0, [pc, #256]	; 18864 <read_body@@Base+0x400>
   18760:	add	r0, pc, r0
   18764:	ldr	r1, [r0, #128]	; 0x80
   18768:	ldr	r2, [r0, #132]	; 0x84
   1876c:	adds	r1, r1, #1
   18770:	adc	r2, r2, #0
   18774:	str	r1, [r0, #128]	; 0x80
   18778:	str	r2, [r0, #132]	; 0x84
   1877c:	ldr	r0, [sp, #16]
   18780:	str	r0, [fp, #-12]
   18784:	ldr	r0, [sp, #16]
   18788:	str	r0, [sp, #12]
   1878c:	ldr	r0, [pc, #212]	; 18868 <read_body@@Base+0x404>
   18790:	add	r0, pc, r0
   18794:	ldr	r1, [r0, #136]	; 0x88
   18798:	ldr	r2, [r0, #140]	; 0x8c
   1879c:	adds	r1, r1, #1
   187a0:	adc	r2, r2, #0
   187a4:	str	r1, [r0, #136]	; 0x88
   187a8:	str	r2, [r0, #140]	; 0x8c
   187ac:	ldr	r0, [fp, #-8]
   187b0:	ldr	r0, [r0]
   187b4:	bl	141fc <next@@Base>
   187b8:	str	r0, [sp, #8]
   187bc:	b	18570 <read_body@@Base+0x10c>
   187c0:	ldr	r0, [pc, #164]	; 1886c <read_body@@Base+0x408>
   187c4:	add	r0, pc, r0
   187c8:	ldr	r1, [r0, #144]	; 0x90
   187cc:	ldr	r2, [r0, #148]	; 0x94
   187d0:	adds	r1, r1, #1
   187d4:	adc	r2, r2, #0
   187d8:	str	r1, [r0, #144]	; 0x90
   187dc:	str	r2, [r0, #148]	; 0x94
   187e0:	ldr	r0, [sp, #8]
   187e4:	bl	134d0 <free_token_cbra@@Base>
   187e8:	ldr	r0, [fp, #-12]
   187ec:	str	r0, [fp, #-4]
   187f0:	ldr	r0, [pc, #120]	; 18870 <read_body@@Base+0x40c>
   187f4:	add	r0, pc, r0
   187f8:	ldr	r1, [r0, #152]	; 0x98
   187fc:	ldr	r2, [r0, #156]	; 0x9c
   18800:	adds	r1, r1, #1
   18804:	adc	r2, r2, #0
   18808:	str	r1, [r0, #152]	; 0x98
   1880c:	str	r2, [r0, #156]	; 0x9c
   18810:	ldr	r0, [fp, #-4]
   18814:	mov	sp, fp
   18818:	pop	{fp, pc}
   1881c:	andeq	r9, r1, r4, asr #16
   18820:	andeq	r9, r1, r8, lsr r8
   18824:	ldrdeq	r9, [r1], -r0
   18828:	andeq	r9, r1, r8, lsr #15
   1882c:	andeq	r9, r1, ip, ror r7
   18830:	andeq	r9, r1, r4, lsr #14
   18834:	andeq	r8, r1, r0, lsr #22
   18838:	muleq	r1, r4, r5
   1883c:	ldrdeq	r8, [r1], -ip
   18840:	andeq	r9, r1, ip, lsr #13
   18844:	andeq	r8, r1, r4, asr #10
   18848:	andeq	r8, r1, ip, lsl #21
   1884c:	andeq	r9, r1, ip, asr r6
   18850:	andeq	r8, r1, r8, asr #20
   18854:	andeq	r8, r1, ip, ror #9
   18858:	andeq	r9, r1, r0, lsl r6
   1885c:			; <UNDEFINED> instruction: 0x000195b8
   18860:	muleq	r1, r0, r5
   18864:	andeq	r9, r1, r8, asr r5
   18868:	andeq	r9, r1, r8, lsr #10
   1886c:	strdeq	r9, [r1], -r4
   18870:	andeq	r9, r1, r4, asr #9

00018874 <read_return_expression@@Base>:
   18874:	push	{fp, lr}
   18878:	mov	fp, sp
   1887c:	sub	sp, sp, #32
   18880:	ldr	r1, [pc, #488]	; 18a70 <read_return_expression@@Base+0x1fc>
   18884:	add	r1, pc, r1
   18888:	ldr	r2, [r1, #4]
   1888c:	ldr	r3, [pc, #480]	; 18a74 <read_return_expression@@Base+0x200>
   18890:	ldr	r3, [pc, r3]
   18894:	adds	r3, r3, #1
   18898:	adc	r2, r2, #0
   1889c:	str	r3, [r1]
   188a0:	str	r2, [r1, #4]
   188a4:	str	r0, [sp, #4]
   188a8:	ldr	r0, [sp, #4]
   188ac:	str	r0, [fp, #-8]
   188b0:	mov	r1, #0
   188b4:	str	r1, [fp, #-12]
   188b8:	str	r1, [sp, #16]
   188bc:	str	r1, [sp, #12]
   188c0:	str	r1, [sp, #8]
   188c4:	ldr	r1, [fp, #-8]
   188c8:	ldr	r0, [r1]
   188cc:	bl	141fc <next@@Base>
   188d0:	str	r0, [sp, #12]
   188d4:	ldr	r0, [sp, #12]
   188d8:	ldr	r0, [r0]
   188dc:	sub	r1, r0, #1
   188e0:	cmp	r0, #1
   188e4:	movwne	r1, #1
   188e8:	mov	lr, #16
   188ec:	cmp	r0, #1
   188f0:	movwne	lr, #8
   188f4:	ldr	r0, [pc, #380]	; 18a78 <read_return_expression@@Base+0x204>
   188f8:	add	r0, pc, r0
   188fc:	ldr	lr, [r0, lr]!
   18900:	ldr	r2, [r0, #4]
   18904:	adds	lr, lr, #1
   18908:	adc	r2, r2, #0
   1890c:	str	lr, [r0]
   18910:	str	r2, [r0, #4]
   18914:	tst	r1, #1
   18918:	beq	18948 <read_return_expression@@Base+0xd4>
   1891c:	ldr	r0, [pc, #344]	; 18a7c <read_return_expression@@Base+0x208>
   18920:	add	r0, pc, r0
   18924:	ldr	r1, [r0, #24]
   18928:	ldr	r2, [r0, #28]
   1892c:	adds	r1, r1, #1
   18930:	adc	r2, r2, #0
   18934:	str	r1, [r0, #24]
   18938:	str	r2, [r0, #28]
   1893c:	movw	r0, #0
   18940:	str	r0, [fp, #-4]
   18944:	b	18a44 <read_return_expression@@Base+0x1d0>
   18948:	ldr	r0, [sp, #12]
   1894c:	str	r0, [sp, #8]
   18950:	mov	r0, #12
   18954:	str	r0, [sp]
   18958:	bl	11f68 <malloc@plt>
   1895c:	str	r0, [sp, #16]
   18960:	ldr	r0, [sp, #16]
   18964:	ldr	lr, [sp, #8]
   18968:	ldr	r1, [lr, #4]
   1896c:	bl	1684c <init_node_int@@Base>
   18970:	ldr	r0, [sp, #8]
   18974:	bl	13264 <free_token_int_value@@Base>
   18978:	ldr	r0, [sp]
   1897c:	bl	11f68 <malloc@plt>
   18980:	str	r0, [fp, #-12]
   18984:	ldr	r0, [fp, #-12]
   18988:	ldr	r1, [sp, #16]
   1898c:	bl	1698c <init_node_return@@Base>
   18990:	ldr	r0, [fp, #-8]
   18994:	ldr	r0, [r0]
   18998:	bl	141fc <next@@Base>
   1899c:	str	r0, [sp, #12]
   189a0:	ldr	r0, [sp, #12]
   189a4:	ldr	r0, [r0]
   189a8:	sub	r1, r0, #8
   189ac:	cmp	r0, #8
   189b0:	movwne	r1, #1
   189b4:	mov	lr, #40	; 0x28
   189b8:	cmp	r0, #8
   189bc:	movwne	lr, #32
   189c0:	ldr	r0, [pc, #184]	; 18a80 <read_return_expression@@Base+0x20c>
   189c4:	add	r0, pc, r0
   189c8:	ldr	lr, [r0, lr]!
   189cc:	ldr	r2, [r0, #4]
   189d0:	adds	lr, lr, #1
   189d4:	adc	r2, r2, #0
   189d8:	str	lr, [r0]
   189dc:	str	r2, [r0, #4]
   189e0:	tst	r1, #1
   189e4:	beq	18a14 <read_return_expression@@Base+0x1a0>
   189e8:	ldr	r0, [pc, #148]	; 18a84 <read_return_expression@@Base+0x210>
   189ec:	add	r0, pc, r0
   189f0:	ldr	r1, [r0, #48]	; 0x30
   189f4:	ldr	r2, [r0, #52]	; 0x34
   189f8:	adds	r1, r1, #1
   189fc:	adc	r2, r2, #0
   18a00:	str	r1, [r0, #48]	; 0x30
   18a04:	str	r2, [r0, #52]	; 0x34
   18a08:	movw	r0, #0
   18a0c:	str	r0, [fp, #-4]
   18a10:	b	18a44 <read_return_expression@@Base+0x1d0>
   18a14:	ldr	r0, [pc, #108]	; 18a88 <read_return_expression@@Base+0x214>
   18a18:	add	r0, pc, r0
   18a1c:	ldr	r1, [r0, #56]	; 0x38
   18a20:	ldr	r2, [r0, #60]	; 0x3c
   18a24:	adds	r1, r1, #1
   18a28:	adc	r2, r2, #0
   18a2c:	str	r1, [r0, #56]	; 0x38
   18a30:	str	r2, [r0, #60]	; 0x3c
   18a34:	ldr	r0, [sp, #12]
   18a38:	bl	135c8 <free_token_semicolon@@Base>
   18a3c:	ldr	r0, [fp, #-12]
   18a40:	str	r0, [fp, #-4]
   18a44:	ldr	r0, [pc, #64]	; 18a8c <read_return_expression@@Base+0x218>
   18a48:	add	r0, pc, r0
   18a4c:	ldr	r1, [r0, #64]	; 0x40
   18a50:	ldr	r2, [r0, #68]	; 0x44
   18a54:	adds	r1, r1, #1
   18a58:	adc	r2, r2, #0
   18a5c:	str	r1, [r0, #64]	; 0x40
   18a60:	str	r2, [r0, #68]	; 0x44
   18a64:	ldr	r0, [fp, #-4]
   18a68:	mov	sp, fp
   18a6c:	pop	{fp, pc}
   18a70:	ldrdeq	r9, [r1], -r4
   18a74:	andeq	r9, r1, r8, asr #9
   18a78:	andeq	r9, r1, r0, ror #8
   18a7c:	andeq	r9, r1, r8, lsr r4
   18a80:	muleq	r1, r4, r3
   18a84:	andeq	r9, r1, ip, ror #6
   18a88:	andeq	r9, r1, r0, asr #6
   18a8c:	andeq	r9, r1, r0, lsl r3

00018a90 <read_if_statement@@Base>:
   18a90:	push	{fp, lr}
   18a94:	mov	fp, sp
   18a98:	sub	sp, sp, #32
   18a9c:	ldr	r1, [pc, #536]	; 18cbc <read_if_statement@@Base+0x22c>
   18aa0:	add	r1, pc, r1
   18aa4:	ldr	r2, [r1, #4]
   18aa8:	ldr	r3, [pc, #528]	; 18cc0 <read_if_statement@@Base+0x230>
   18aac:	ldr	r3, [pc, r3]
   18ab0:	adds	r3, r3, #1
   18ab4:	adc	r2, r2, #0
   18ab8:	str	r3, [r1]
   18abc:	str	r2, [r1, #4]
   18ac0:	str	r0, [sp]
   18ac4:	ldr	r0, [sp]
   18ac8:	str	r0, [fp, #-8]
   18acc:	mov	r1, #0
   18ad0:	str	r1, [fp, #-12]
   18ad4:	str	r1, [sp, #16]
   18ad8:	str	r1, [sp, #12]
   18adc:	str	r1, [sp, #8]
   18ae0:	str	r1, [sp, #4]
   18ae4:	ldr	r1, [fp, #-8]
   18ae8:	ldr	r0, [r1]
   18aec:	bl	141fc <next@@Base>
   18af0:	str	r0, [sp, #4]
   18af4:	ldr	r0, [sp, #4]
   18af8:	ldr	r0, [r0]
   18afc:	sub	r1, r0, #3
   18b00:	cmp	r0, #3
   18b04:	movwne	r1, #1
   18b08:	mov	lr, #16
   18b0c:	cmp	r0, #3
   18b10:	movwne	lr, #8
   18b14:	ldr	r0, [pc, #424]	; 18cc4 <read_if_statement@@Base+0x234>
   18b18:	add	r0, pc, r0
   18b1c:	ldr	lr, [r0, lr]!
   18b20:	ldr	r2, [r0, #4]
   18b24:	adds	lr, lr, #1
   18b28:	adc	r2, r2, #0
   18b2c:	str	lr, [r0]
   18b30:	str	r2, [r0, #4]
   18b34:	tst	r1, #1
   18b38:	beq	18b68 <read_if_statement@@Base+0xd8>
   18b3c:	ldr	r0, [pc, #388]	; 18cc8 <read_if_statement@@Base+0x238>
   18b40:	add	r0, pc, r0
   18b44:	ldr	r1, [r0, #24]
   18b48:	ldr	r2, [r0, #28]
   18b4c:	adds	r1, r1, #1
   18b50:	adc	r2, r2, #0
   18b54:	str	r1, [r0, #24]
   18b58:	str	r2, [r0, #28]
   18b5c:	movw	r0, #0
   18b60:	str	r0, [fp, #-4]
   18b64:	b	18c90 <read_if_statement@@Base+0x200>
   18b68:	ldr	r0, [sp, #4]
   18b6c:	bl	1335c <free_token_opar@@Base>
   18b70:	ldr	r0, [fp, #-8]
   18b74:	bl	18ce0 <read_boolean_expression@@Base>
   18b78:	str	r0, [sp, #16]
   18b7c:	ldr	r0, [fp, #-8]
   18b80:	bl	18464 <read_body@@Base>
   18b84:	str	r0, [sp, #12]
   18b88:	ldr	r0, [fp, #-8]
   18b8c:	ldr	r0, [r0]
   18b90:	bl	141fc <next@@Base>
   18b94:	str	r0, [sp, #4]
   18b98:	ldr	r0, [sp, #4]
   18b9c:	ldr	r0, [r0]
   18ba0:	sub	lr, r0, #11
   18ba4:	clz	lr, lr
   18ba8:	lsr	lr, lr, #5
   18bac:	mov	r1, #40	; 0x28
   18bb0:	cmp	r0, #11
   18bb4:	movweq	r1, #32
   18bb8:	ldr	r0, [pc, #268]	; 18ccc <read_if_statement@@Base+0x23c>
   18bbc:	add	r0, pc, r0
   18bc0:	ldr	r1, [r0, r1]!
   18bc4:	ldr	r2, [r0, #4]
   18bc8:	adds	r1, r1, #1
   18bcc:	adc	r2, r2, #0
   18bd0:	str	r1, [r0]
   18bd4:	str	r2, [r0, #4]
   18bd8:	tst	lr, #1
   18bdc:	beq	18c18 <read_if_statement@@Base+0x188>
   18be0:	ldr	r0, [pc, #232]	; 18cd0 <read_if_statement@@Base+0x240>
   18be4:	add	r0, pc, r0
   18be8:	ldr	r1, [r0, #48]	; 0x30
   18bec:	ldr	r2, [r0, #52]	; 0x34
   18bf0:	adds	r1, r1, #1
   18bf4:	adc	r2, r2, #0
   18bf8:	str	r1, [r0, #48]	; 0x30
   18bfc:	str	r2, [r0, #52]	; 0x34
   18c00:	ldr	r0, [sp, #4]
   18c04:	bl	1373c <free_token_else@@Base>
   18c08:	ldr	r0, [fp, #-8]
   18c0c:	bl	18464 <read_body@@Base>
   18c10:	str	r0, [sp, #8]
   18c14:	b	18c48 <read_if_statement@@Base+0x1b8>
   18c18:	ldr	r0, [pc, #180]	; 18cd4 <read_if_statement@@Base+0x244>
   18c1c:	add	r0, pc, r0
   18c20:	ldr	r1, [r0, #56]	; 0x38
   18c24:	ldr	r2, [r0, #60]	; 0x3c
   18c28:	adds	r1, r1, #1
   18c2c:	adc	r2, r2, #0
   18c30:	str	r1, [r0, #56]	; 0x38
   18c34:	str	r2, [r0, #60]	; 0x3c
   18c38:	ldr	r0, [fp, #-8]
   18c3c:	ldr	r0, [r0]
   18c40:	ldr	r1, [sp, #4]
   18c44:	bl	13f10 <push_back@@Base>
   18c48:	ldr	r0, [pc, #136]	; 18cd8 <read_if_statement@@Base+0x248>
   18c4c:	add	r0, pc, r0
   18c50:	ldr	r1, [r0, #64]	; 0x40
   18c54:	ldr	r2, [r0, #68]	; 0x44
   18c58:	adds	r1, r1, #1
   18c5c:	adc	r2, r2, #0
   18c60:	str	r1, [r0, #64]	; 0x40
   18c64:	str	r2, [r0, #68]	; 0x44
   18c68:	movw	r0, #20
   18c6c:	bl	11f68 <malloc@plt>
   18c70:	str	r0, [fp, #-12]
   18c74:	ldr	r0, [fp, #-12]
   18c78:	ldr	r1, [sp, #16]
   18c7c:	ldr	r2, [sp, #12]
   18c80:	ldr	r3, [sp, #8]
   18c84:	bl	16a20 <init_node_if@@Base>
   18c88:	ldr	r0, [fp, #-12]
   18c8c:	str	r0, [fp, #-4]
   18c90:	ldr	r0, [pc, #68]	; 18cdc <read_if_statement@@Base+0x24c>
   18c94:	add	r0, pc, r0
   18c98:	ldr	r1, [r0, #72]	; 0x48
   18c9c:	ldr	r2, [r0, #76]	; 0x4c
   18ca0:	adds	r1, r1, #1
   18ca4:	adc	r2, r2, #0
   18ca8:	str	r1, [r0, #72]	; 0x48
   18cac:	str	r2, [r0, #76]	; 0x4c
   18cb0:	ldr	r0, [fp, #-4]
   18cb4:	mov	sp, fp
   18cb8:	pop	{fp, pc}
   18cbc:	andeq	r9, r1, r8, lsl #6
   18cc0:	strdeq	r9, [r1], -ip
   18cc4:	muleq	r1, r0, r2
   18cc8:	andeq	r9, r1, r8, ror #4
   18ccc:	andeq	r9, r1, ip, ror #3
   18cd0:	andeq	r9, r1, r4, asr #3
   18cd4:	andeq	r9, r1, ip, lsl #3
   18cd8:	andeq	r9, r1, ip, asr r1
   18cdc:	andeq	r9, r1, r4, lsl r1

00018ce0 <read_boolean_expression@@Base>:
   18ce0:	push	{fp, lr}
   18ce4:	mov	fp, sp
   18ce8:	sub	sp, sp, #32
   18cec:	ldr	r1, [pc, #692]	; 18fa8 <read_boolean_expression@@Base+0x2c8>
   18cf0:	add	r1, pc, r1
   18cf4:	ldr	r2, [r1, #4]
   18cf8:	ldr	r3, [pc, #684]	; 18fac <read_boolean_expression@@Base+0x2cc>
   18cfc:	ldr	r3, [pc, r3]
   18d00:	adds	r3, r3, #1
   18d04:	adc	r2, r2, #0
   18d08:	str	r3, [r1]
   18d0c:	str	r2, [r1, #4]
   18d10:	str	r0, [sp, #8]
   18d14:	ldr	r0, [pc, #660]	; 18fb0 <read_boolean_expression@@Base+0x2d0>
   18d18:	add	r0, pc, r0
   18d1c:	ldr	r1, [r0, #8]
   18d20:	ldr	r2, [r0, #12]
   18d24:	adds	r1, r1, #1
   18d28:	adc	r2, r2, #0
   18d2c:	str	r1, [r0, #8]
   18d30:	str	r2, [r0, #12]
   18d34:	ldr	r0, [sp, #8]
   18d38:	str	r0, [fp, #-4]
   18d3c:	movw	r1, #0
   18d40:	str	r1, [fp, #-8]
   18d44:	str	r1, [fp, #-12]
   18d48:	str	r1, [sp, #12]
   18d4c:	ldr	r1, [fp, #-4]
   18d50:	ldr	r0, [r1]
   18d54:	bl	141fc <next@@Base>
   18d58:	str	r0, [fp, #-12]
   18d5c:	ldr	r0, [fp, #-12]
   18d60:	ldr	r0, [r0]
   18d64:	sub	r1, r0, #4
   18d68:	cmp	r0, #4
   18d6c:	movwne	r1, #1
   18d70:	mov	r2, #24
   18d74:	cmp	r0, #4
   18d78:	movwne	r2, #16
   18d7c:	ldr	r0, [pc, #560]	; 18fb4 <read_boolean_expression@@Base+0x2d4>
   18d80:	add	r0, pc, r0
   18d84:	ldr	r2, [r0, r2]!
   18d88:	ldr	r3, [r0, #4]
   18d8c:	adds	r2, r2, #1
   18d90:	adc	r3, r3, #0
   18d94:	str	r2, [r0]
   18d98:	str	r3, [r0, #4]
   18d9c:	tst	r1, #1
   18da0:	beq	18f64 <read_boolean_expression@@Base+0x284>
   18da4:	ldr	r0, [pc, #524]	; 18fb8 <read_boolean_expression@@Base+0x2d8>
   18da8:	add	r0, pc, r0
   18dac:	mov	r1, #0
   18db0:	str	r1, [r0]
   18db4:	ldr	r0, [fp, #-12]
   18db8:	ldr	r0, [r0]
   18dbc:	cmp	r0, #1
   18dc0:	str	r0, [sp, #4]
   18dc4:	beq	18dec <read_boolean_expression@@Base+0x10c>
   18dc8:	b	18dcc <read_boolean_expression@@Base+0xec>
   18dcc:	ldr	r0, [sp, #4]
   18dd0:	cmp	r0, #3
   18dd4:	beq	18ea0 <read_boolean_expression@@Base+0x1c0>
   18dd8:	b	18ddc <read_boolean_expression@@Base+0xfc>
   18ddc:	ldr	r0, [sp, #4]
   18de0:	cmp	r0, #12
   18de4:	beq	18e50 <read_boolean_expression@@Base+0x170>
   18de8:	b	18ef4 <read_boolean_expression@@Base+0x214>
   18dec:	ldr	r0, [pc, #456]	; 18fbc <read_boolean_expression@@Base+0x2dc>
   18df0:	add	r0, pc, r0
   18df4:	add	r1, r0, #4
   18df8:	ldr	r0, [pc, #448]	; 18fc0 <read_boolean_expression@@Base+0x2e0>
   18dfc:	add	r0, pc, r0
   18e00:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   18e04:	ldr	r0, [pc, #440]	; 18fc4 <read_boolean_expression@@Base+0x2e4>
   18e08:	add	r0, pc, r0
   18e0c:	ldr	r1, [r0, #64]	; 0x40
   18e10:	ldr	lr, [r0, #68]	; 0x44
   18e14:	adds	r1, r1, #1
   18e18:	adc	lr, lr, #0
   18e1c:	str	r1, [r0, #64]	; 0x40
   18e20:	str	lr, [r0, #68]	; 0x44
   18e24:	ldr	r0, [fp, #-4]
   18e28:	ldr	r0, [r0]
   18e2c:	ldr	r1, [fp, #-12]
   18e30:	bl	13f10 <push_back@@Base>
   18e34:	ldr	r0, [fp, #-4]
   18e38:	ldr	r1, [fp, #-8]
   18e3c:	ldr	r3, [sp, #16]
   18e40:	add	r2, sp, #12
   18e44:	bl	18fe8 <read_single_boolean_expression@@Base>
   18e48:	str	r0, [fp, #-8]
   18e4c:	b	18f30 <read_boolean_expression@@Base+0x250>
   18e50:	ldr	r0, [pc, #368]	; 18fc8 <read_boolean_expression@@Base+0x2e8>
   18e54:	add	r0, pc, r0
   18e58:	add	r1, r0, #8
   18e5c:	ldr	r0, [pc, #360]	; 18fcc <read_boolean_expression@@Base+0x2ec>
   18e60:	add	r0, pc, r0
   18e64:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   18e68:	ldr	r0, [pc, #352]	; 18fd0 <read_boolean_expression@@Base+0x2f0>
   18e6c:	add	r0, pc, r0
   18e70:	ldr	r1, [r0, #72]	; 0x48
   18e74:	ldr	lr, [r0, #76]	; 0x4c
   18e78:	adds	r1, r1, #1
   18e7c:	adc	lr, lr, #0
   18e80:	str	r1, [r0, #72]	; 0x48
   18e84:	str	lr, [r0, #76]	; 0x4c
   18e88:	ldr	r0, [fp, #-12]
   18e8c:	bl	174a0 <get_boolean_op_value@@Base>
   18e90:	str	r0, [sp, #16]
   18e94:	movw	r0, #1
   18e98:	str	r0, [sp, #12]
   18e9c:	b	18f30 <read_boolean_expression@@Base+0x250>
   18ea0:	ldr	r0, [pc, #300]	; 18fd4 <read_boolean_expression@@Base+0x2f4>
   18ea4:	add	r0, pc, r0
   18ea8:	add	r1, r0, #12
   18eac:	ldr	r0, [pc, #292]	; 18fd8 <read_boolean_expression@@Base+0x2f8>
   18eb0:	add	r0, pc, r0
   18eb4:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   18eb8:	ldr	r0, [pc, #284]	; 18fdc <read_boolean_expression@@Base+0x2fc>
   18ebc:	add	r0, pc, r0
   18ec0:	ldr	r1, [r0, #80]	; 0x50
   18ec4:	ldr	lr, [r0, #84]	; 0x54
   18ec8:	adds	r1, r1, #1
   18ecc:	adc	lr, lr, #0
   18ed0:	str	r1, [r0, #80]	; 0x50
   18ed4:	str	lr, [r0, #84]	; 0x54
   18ed8:	ldr	r0, [fp, #-4]
   18edc:	ldr	r1, [fp, #-8]
   18ee0:	ldr	r3, [sp, #16]
   18ee4:	add	r2, sp, #12
   18ee8:	bl	18fe8 <read_single_boolean_expression@@Base>
   18eec:	str	r0, [fp, #-8]
   18ef0:	b	18f30 <read_boolean_expression@@Base+0x250>
   18ef4:	ldr	r0, [pc, #164]	; 18fa0 <read_boolean_expression@@Base+0x2c0>
   18ef8:	add	r0, pc, r0
   18efc:	ldr	r1, [pc, #160]	; 18fa4 <read_boolean_expression@@Base+0x2c4>
   18f00:	add	r1, pc, r1
   18f04:	bl	19818 <read_boolean_unary_expression@@Base+0x248>
   18f08:	ldr	r0, [pc, #136]	; 18f98 <read_boolean_expression@@Base+0x2b8>
   18f0c:	add	r1, pc, r0
   18f10:	ldr	r0, [pc, #132]	; 18f9c <read_boolean_expression@@Base+0x2bc>
   18f14:	ldr	r0, [pc, r0]
   18f18:	ldr	r0, [r0]
   18f1c:	bl	11fd4 <fprintf@plt>
   18f20:	movw	r1, #1
   18f24:	str	r0, [sp]
   18f28:	mov	r0, r1
   18f2c:	bl	11fa4 <exit@plt>
   18f30:	ldr	r0, [pc, #168]	; 18fe0 <read_boolean_expression@@Base+0x300>
   18f34:	add	r0, pc, r0
   18f38:	ldr	r1, [r0, #88]	; 0x58
   18f3c:	ldr	r2, [r0, #92]	; 0x5c
   18f40:	adds	r1, r1, #1
   18f44:	adc	r2, r2, #0
   18f48:	str	r1, [r0, #88]	; 0x58
   18f4c:	str	r2, [r0, #92]	; 0x5c
   18f50:	ldr	r0, [fp, #-4]
   18f54:	ldr	r0, [r0]
   18f58:	bl	141fc <next@@Base>
   18f5c:	str	r0, [fp, #-12]
   18f60:	b	18d5c <read_boolean_expression@@Base+0x7c>
   18f64:	ldr	r0, [pc, #120]	; 18fe4 <read_boolean_expression@@Base+0x304>
   18f68:	add	r0, pc, r0
   18f6c:	ldr	r1, [r0, #96]	; 0x60
   18f70:	ldr	r2, [r0, #100]	; 0x64
   18f74:	adds	r1, r1, #1
   18f78:	adc	r2, r2, #0
   18f7c:	str	r1, [r0, #96]	; 0x60
   18f80:	str	r2, [r0, #100]	; 0x64
   18f84:	ldr	r0, [fp, #-12]
   18f88:	bl	133d8 <free_token_cpar@@Base>
   18f8c:	ldr	r0, [fp, #-8]
   18f90:	mov	sp, fp
   18f94:	pop	{fp, pc}
   18f98:	andeq	r5, r0, r1, ror #26
   18f9c:	andeq	r8, r1, r4, lsr #3
   18fa0:	andeq	r8, r1, r8, ror #3
   18fa4:	muleq	r1, r4, ip
   18fa8:	andeq	r9, r1, r8, lsl #2
   18fac:	strdeq	r9, [r1], -ip
   18fb0:	andeq	r9, r1, r0, ror #1
   18fb4:	andeq	r9, r1, r8, ror r0
   18fb8:	andeq	r8, r1, r8, lsr r3
   18fbc:	andeq	r7, r1, r4, lsr #27
   18fc0:	andeq	r8, r1, r4, ror #5
   18fc4:	strdeq	r8, [r1], -r0
   18fc8:	andeq	r7, r1, r0, asr #26
   18fcc:	andeq	r8, r1, r0, lsl #5
   18fd0:	andeq	r8, r1, ip, lsl #31
   18fd4:	strdeq	r7, [r1], -r0
   18fd8:	andeq	r8, r1, r0, lsr r2
   18fdc:	andeq	r8, r1, ip, lsr pc
   18fe0:	andeq	r8, r1, r4, asr #29
   18fe4:	muleq	r1, r0, lr

00018fe8 <read_single_boolean_expression@@Base>:
   18fe8:	push	{r4, r5, fp, lr}
   18fec:	add	fp, sp, #8
   18ff0:	sub	sp, sp, #56	; 0x38
   18ff4:	ldr	ip, [pc, #524]	; 19208 <read_single_boolean_expression@@Base+0x220>
   18ff8:	add	ip, pc, ip
   18ffc:	ldr	lr, [ip, #4]
   19000:	ldr	r4, [pc, #516]	; 1920c <read_single_boolean_expression@@Base+0x224>
   19004:	ldr	r4, [pc, r4]
   19008:	adds	r4, r4, #1
   1900c:	adc	lr, lr, #0
   19010:	str	r4, [ip]
   19014:	str	lr, [ip, #4]
   19018:	str	r2, [sp, #16]
   1901c:	str	r1, [sp, #12]
   19020:	str	r0, [sp, #8]
   19024:	str	r3, [sp, #4]
   19028:	ldr	r0, [sp, #8]
   1902c:	str	r0, [fp, #-12]
   19030:	ldr	r1, [sp, #12]
   19034:	str	r1, [fp, #-16]
   19038:	ldr	r2, [sp, #16]
   1903c:	str	r2, [fp, #-20]	; 0xffffffec
   19040:	ldr	r3, [sp, #4]
   19044:	str	r3, [fp, #-24]	; 0xffffffe8
   19048:	mov	ip, #0
   1904c:	str	ip, [fp, #-28]	; 0xffffffe4
   19050:	str	ip, [sp, #32]
   19054:	str	ip, [sp, #28]
   19058:	str	ip, [sp, #24]
   1905c:	str	ip, [sp, #20]
   19060:	ldr	ip, [fp, #-16]
   19064:	clz	lr, ip
   19068:	lsr	lr, lr, #5
   1906c:	mov	r4, #16
   19070:	cmp	ip, #0
   19074:	movweq	r4, #8
   19078:	ldr	ip, [pc, #400]	; 19210 <read_single_boolean_expression@@Base+0x228>
   1907c:	add	ip, pc, ip
   19080:	ldr	r4, [ip, r4]!
   19084:	ldr	r5, [ip, #4]
   19088:	adds	r4, r4, #1
   1908c:	adc	r5, r5, #0
   19090:	str	r4, [ip]
   19094:	str	r5, [ip, #4]
   19098:	tst	lr, #1
   1909c:	beq	190d0 <read_single_boolean_expression@@Base+0xe8>
   190a0:	ldr	r0, [pc, #364]	; 19214 <read_single_boolean_expression@@Base+0x22c>
   190a4:	add	r0, pc, r0
   190a8:	ldr	r1, [r0, #24]
   190ac:	ldr	r2, [r0, #28]
   190b0:	adds	r1, r1, #1
   190b4:	adc	r2, r2, #0
   190b8:	str	r1, [r0, #24]
   190bc:	str	r2, [r0, #28]
   190c0:	ldr	r0, [fp, #-12]
   190c4:	bl	19228 <read_boolean_binary_expression@@Base>
   190c8:	str	r0, [sp, #32]
   190cc:	b	191d4 <read_single_boolean_expression@@Base+0x1ec>
   190d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   190d4:	ldr	r0, [r0]
   190d8:	cmp	r0, #0
   190dc:	mov	r1, r0
   190e0:	movwne	r1, #1
   190e4:	mov	r2, #40	; 0x28
   190e8:	cmp	r0, #0
   190ec:	movwne	r2, #32
   190f0:	ldr	r0, [pc, #288]	; 19218 <read_single_boolean_expression@@Base+0x230>
   190f4:	add	r0, pc, r0
   190f8:	ldr	r2, [r0, r2]!
   190fc:	ldr	r3, [r0, #4]
   19100:	adds	r2, r2, #1
   19104:	adc	r3, r3, #0
   19108:	str	r2, [r0]
   1910c:	str	r3, [r0, #4]
   19110:	tst	r1, #1
   19114:	beq	19184 <read_single_boolean_expression@@Base+0x19c>
   19118:	ldr	r0, [pc, #252]	; 1921c <read_single_boolean_expression@@Base+0x234>
   1911c:	add	r0, pc, r0
   19120:	ldr	r1, [r0, #48]	; 0x30
   19124:	ldr	r2, [r0, #52]	; 0x34
   19128:	adds	r1, r1, #1
   1912c:	adc	r2, r2, #0
   19130:	str	r1, [r0, #48]	; 0x30
   19134:	str	r2, [r0, #52]	; 0x34
   19138:	ldr	r0, [fp, #-12]
   1913c:	bl	19228 <read_boolean_binary_expression@@Base>
   19140:	str	r0, [sp, #28]
   19144:	ldr	r0, [sp, #32]
   19148:	str	r0, [sp, #24]
   1914c:	ldr	r0, [sp, #28]
   19150:	str	r0, [sp, #20]
   19154:	movw	r0, #20
   19158:	bl	11f68 <malloc@plt>
   1915c:	str	r0, [sp, #32]
   19160:	ldr	r0, [sp, #32]
   19164:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19168:	ldr	r2, [sp, #24]
   1916c:	ldr	r3, [sp, #20]
   19170:	bl	16ae4 <init_node_boolean_operator@@Base>
   19174:	ldr	r0, [fp, #-20]	; 0xffffffec
   19178:	movw	r1, #0
   1917c:	str	r1, [r0]
   19180:	b	191b4 <read_single_boolean_expression@@Base+0x1cc>
   19184:	ldr	r0, [pc, #116]	; 19200 <read_single_boolean_expression@@Base+0x218>
   19188:	add	r1, pc, r0
   1918c:	ldr	r0, [pc, #112]	; 19204 <read_single_boolean_expression@@Base+0x21c>
   19190:	ldr	r0, [pc, r0]
   19194:	ldr	r0, [r0]
   19198:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1919c:	ldr	r2, [r2, #4]
   191a0:	bl	11fd4 <fprintf@plt>
   191a4:	movw	r1, #1
   191a8:	str	r0, [sp]
   191ac:	mov	r0, r1
   191b0:	bl	11fa4 <exit@plt>
   191b4:	ldr	r0, [pc, #100]	; 19220 <read_single_boolean_expression@@Base+0x238>
   191b8:	add	r0, pc, r0
   191bc:	ldr	r1, [r0, #56]	; 0x38
   191c0:	ldr	r2, [r0, #60]	; 0x3c
   191c4:	adds	r1, r1, #1
   191c8:	adc	r2, r2, #0
   191cc:	str	r1, [r0, #56]	; 0x38
   191d0:	str	r2, [r0, #60]	; 0x3c
   191d4:	ldr	r0, [pc, #72]	; 19224 <read_single_boolean_expression@@Base+0x23c>
   191d8:	add	r0, pc, r0
   191dc:	ldr	r1, [r0, #64]	; 0x40
   191e0:	ldr	r2, [r0, #68]	; 0x44
   191e4:	adds	r1, r1, #1
   191e8:	adc	r2, r2, #0
   191ec:	str	r1, [r0, #64]	; 0x40
   191f0:	str	r2, [r0, #68]	; 0x44
   191f4:	ldr	r0, [sp, #32]
   191f8:	sub	sp, fp, #8
   191fc:	pop	{r4, r5, fp, pc}
   19200:	andeq	r5, r0, r7, lsl #22
   19204:	andeq	r7, r1, r8, lsr #30
   19208:	andeq	r8, r1, r0, ror lr
   1920c:	andeq	r8, r1, r4, ror #28
   19210:	andeq	r8, r1, ip, ror #27
   19214:	andeq	r8, r1, r4, asr #27
   19218:	andeq	r8, r1, r4, ror sp
   1921c:	andeq	r8, r1, ip, asr #26
   19220:			; <UNDEFINED> instruction: 0x00018cb0
   19224:	muleq	r1, r0, ip

00019228 <read_boolean_binary_expression@@Base>:
   19228:	push	{fp, lr}
   1922c:	mov	fp, sp
   19230:	sub	sp, sp, #48	; 0x30
   19234:	ldr	r1, [pc, #868]	; 195a0 <read_boolean_binary_expression@@Base+0x378>
   19238:	add	r1, pc, r1
   1923c:	ldr	r2, [r1, #4]
   19240:	ldr	r3, [pc, #860]	; 195a4 <read_boolean_binary_expression@@Base+0x37c>
   19244:	ldr	r3, [pc, r3]
   19248:	adds	r3, r3, #1
   1924c:	adc	r2, r2, #0
   19250:	str	r3, [r1]
   19254:	str	r2, [r1, #4]
   19258:	str	r0, [sp, #4]
   1925c:	ldr	r0, [sp, #4]
   19260:	str	r0, [fp, #-8]
   19264:	mov	r1, #0
   19268:	str	r1, [fp, #-12]
   1926c:	str	r1, [fp, #-16]
   19270:	str	r1, [fp, #-20]	; 0xffffffec
   19274:	str	r1, [sp, #24]
   19278:	str	r1, [sp, #20]
   1927c:	str	r1, [sp, #16]
   19280:	str	r1, [sp, #12]
   19284:	ldr	r1, [fp, #-8]
   19288:	ldr	r0, [r1]
   1928c:	bl	141fc <next@@Base>
   19290:	str	r0, [sp, #20]
   19294:	ldr	r0, [sp, #20]
   19298:	ldr	r0, [r0]
   1929c:	sub	r1, r0, #1
   192a0:	cmp	r0, #1
   192a4:	movwne	r1, #1
   192a8:	mov	lr, #16
   192ac:	cmp	r0, #1
   192b0:	movwne	lr, #8
   192b4:	ldr	r0, [pc, #748]	; 195a8 <read_boolean_binary_expression@@Base+0x380>
   192b8:	add	r0, pc, r0
   192bc:	ldr	lr, [r0, lr]!
   192c0:	ldr	r2, [r0, #4]
   192c4:	adds	lr, lr, #1
   192c8:	adc	r2, r2, #0
   192cc:	str	lr, [r0]
   192d0:	str	r2, [r0, #4]
   192d4:	tst	r1, #1
   192d8:	beq	19390 <read_boolean_binary_expression@@Base+0x168>
   192dc:	ldr	r0, [sp, #20]
   192e0:	ldr	r0, [r0]
   192e4:	sub	r1, r0, #12
   192e8:	clz	r1, r1
   192ec:	lsr	r1, r1, #5
   192f0:	mov	r2, #32
   192f4:	cmp	r0, #12
   192f8:	movweq	r2, #24
   192fc:	ldr	r0, [pc, #680]	; 195ac <read_boolean_binary_expression@@Base+0x384>
   19300:	add	r0, pc, r0
   19304:	ldr	r2, [r0, r2]!
   19308:	ldr	r3, [r0, #4]
   1930c:	adds	r2, r2, #1
   19310:	adc	r3, r3, #0
   19314:	str	r2, [r0]
   19318:	str	r3, [r0, #4]
   1931c:	tst	r1, #1
   19320:	beq	19364 <read_boolean_binary_expression@@Base+0x13c>
   19324:	ldr	r0, [pc, #644]	; 195b0 <read_boolean_binary_expression@@Base+0x388>
   19328:	add	r0, pc, r0
   1932c:	ldr	r1, [r0, #40]	; 0x28
   19330:	ldr	r2, [r0, #44]	; 0x2c
   19334:	adds	r1, r1, #1
   19338:	adc	r2, r2, #0
   1933c:	str	r1, [r0, #40]	; 0x28
   19340:	str	r2, [r0, #44]	; 0x2c
   19344:	ldr	r0, [fp, #-8]
   19348:	ldr	r0, [r0]
   1934c:	ldr	r1, [sp, #20]
   19350:	bl	13f10 <push_back@@Base>
   19354:	ldr	r0, [fp, #-8]
   19358:	bl	195d0 <read_boolean_unary_expression@@Base>
   1935c:	str	r0, [fp, #-4]
   19360:	b	19574 <read_boolean_binary_expression@@Base+0x34c>
   19364:	ldr	r0, [pc, #584]	; 195b4 <read_boolean_binary_expression@@Base+0x38c>
   19368:	add	r0, pc, r0
   1936c:	ldr	r1, [r0, #48]	; 0x30
   19370:	ldr	r2, [r0, #52]	; 0x34
   19374:	adds	r1, r1, #1
   19378:	adc	r2, r2, #0
   1937c:	str	r1, [r0, #48]	; 0x30
   19380:	str	r2, [r0, #52]	; 0x34
   19384:	movw	r0, #0
   19388:	str	r0, [fp, #-4]
   1938c:	b	19574 <read_boolean_binary_expression@@Base+0x34c>
   19390:	ldr	r0, [sp, #20]
   19394:	str	r0, [sp, #16]
   19398:	mov	r0, #12
   1939c:	bl	11f68 <malloc@plt>
   193a0:	str	r0, [fp, #-16]
   193a4:	ldr	r0, [fp, #-16]
   193a8:	ldr	lr, [sp, #16]
   193ac:	ldr	r1, [lr, #4]
   193b0:	bl	1684c <init_node_int@@Base>
   193b4:	ldr	r0, [sp, #16]
   193b8:	bl	13264 <free_token_int_value@@Base>
   193bc:	ldr	r0, [fp, #-16]
   193c0:	str	r0, [fp, #-20]	; 0xffffffec
   193c4:	ldr	r0, [fp, #-8]
   193c8:	ldr	r0, [r0]
   193cc:	bl	141fc <next@@Base>
   193d0:	str	r0, [sp, #20]
   193d4:	ldr	r0, [sp, #20]
   193d8:	ldr	r0, [r0]
   193dc:	sub	r1, r0, #12
   193e0:	cmp	r0, #12
   193e4:	movwne	r1, #1
   193e8:	mov	lr, #64	; 0x40
   193ec:	cmp	r0, #12
   193f0:	movwne	lr, #56	; 0x38
   193f4:	ldr	r0, [pc, #444]	; 195b8 <read_boolean_binary_expression@@Base+0x390>
   193f8:	add	r0, pc, r0
   193fc:	ldr	lr, [r0, lr]!
   19400:	ldr	r2, [r0, #4]
   19404:	adds	lr, lr, #1
   19408:	adc	r2, r2, #0
   1940c:	str	lr, [r0]
   19410:	str	r2, [r0, #4]
   19414:	tst	r1, #1
   19418:	beq	19450 <read_boolean_binary_expression@@Base+0x228>
   1941c:	ldr	r0, [pc, #408]	; 195bc <read_boolean_binary_expression@@Base+0x394>
   19420:	add	r0, pc, r0
   19424:	ldr	r1, [r0, #72]	; 0x48
   19428:	ldr	r2, [r0, #76]	; 0x4c
   1942c:	adds	r1, r1, #1
   19430:	adc	r2, r2, #0
   19434:	str	r1, [r0, #72]	; 0x48
   19438:	str	r2, [r0, #76]	; 0x4c
   1943c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19440:	bl	16bb4 <free_node@@Base>
   19444:	movw	r0, #0
   19448:	str	r0, [fp, #-4]
   1944c:	b	19574 <read_boolean_binary_expression@@Base+0x34c>
   19450:	ldr	r0, [sp, #20]
   19454:	str	r0, [sp, #12]
   19458:	ldr	r0, [sp, #12]
   1945c:	bl	174a0 <get_boolean_op_value@@Base>
   19460:	str	r0, [sp, #8]
   19464:	ldr	r0, [sp, #12]
   19468:	bl	137b8 <free_token_boolean_op@@Base>
   1946c:	ldr	r0, [fp, #-8]
   19470:	ldr	r0, [r0]
   19474:	bl	141fc <next@@Base>
   19478:	str	r0, [sp, #20]
   1947c:	ldr	r0, [sp, #20]
   19480:	ldr	r0, [r0]
   19484:	sub	lr, r0, #1
   19488:	cmp	r0, #1
   1948c:	movwne	lr, #1
   19490:	mov	r1, #88	; 0x58
   19494:	cmp	r0, #1
   19498:	movwne	r1, #80	; 0x50
   1949c:	ldr	r0, [pc, #284]	; 195c0 <read_boolean_binary_expression@@Base+0x398>
   194a0:	add	r0, pc, r0
   194a4:	ldr	r1, [r0, r1]!
   194a8:	ldr	r2, [r0, #4]
   194ac:	adds	r1, r1, #1
   194b0:	adc	r2, r2, #0
   194b4:	str	r1, [r0]
   194b8:	str	r2, [r0, #4]
   194bc:	tst	lr, #1
   194c0:	beq	194f8 <read_boolean_binary_expression@@Base+0x2d0>
   194c4:	ldr	r0, [pc, #248]	; 195c4 <read_boolean_binary_expression@@Base+0x39c>
   194c8:	add	r0, pc, r0
   194cc:	ldr	r1, [r0, #96]	; 0x60
   194d0:	ldr	r2, [r0, #100]	; 0x64
   194d4:	adds	r1, r1, #1
   194d8:	adc	r2, r2, #0
   194dc:	str	r1, [r0, #96]	; 0x60
   194e0:	str	r2, [r0, #100]	; 0x64
   194e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   194e8:	bl	16bb4 <free_node@@Base>
   194ec:	movw	r0, #0
   194f0:	str	r0, [fp, #-4]
   194f4:	b	19574 <read_boolean_binary_expression@@Base+0x34c>
   194f8:	ldr	r0, [pc, #200]	; 195c8 <read_boolean_binary_expression@@Base+0x3a0>
   194fc:	add	r0, pc, r0
   19500:	ldr	r1, [r0, #104]	; 0x68
   19504:	ldr	r2, [r0, #108]	; 0x6c
   19508:	adds	r1, r1, #1
   1950c:	adc	r2, r2, #0
   19510:	str	r1, [r0, #104]	; 0x68
   19514:	str	r2, [r0, #108]	; 0x6c
   19518:	ldr	r0, [sp, #20]
   1951c:	str	r0, [sp, #16]
   19520:	movw	r0, #12
   19524:	bl	11f68 <malloc@plt>
   19528:	str	r0, [fp, #-16]
   1952c:	ldr	r0, [fp, #-16]
   19530:	ldr	r1, [sp, #16]
   19534:	ldr	r1, [r1, #4]
   19538:	bl	1684c <init_node_int@@Base>
   1953c:	ldr	r0, [sp, #16]
   19540:	bl	13264 <free_token_int_value@@Base>
   19544:	ldr	r0, [fp, #-16]
   19548:	str	r0, [sp, #24]
   1954c:	movw	r0, #20
   19550:	bl	11f68 <malloc@plt>
   19554:	str	r0, [fp, #-12]
   19558:	ldr	r0, [fp, #-12]
   1955c:	ldr	r1, [sp, #8]
   19560:	ldr	r2, [fp, #-20]	; 0xffffffec
   19564:	ldr	r3, [sp, #24]
   19568:	bl	16ae4 <init_node_boolean_operator@@Base>
   1956c:	ldr	r0, [fp, #-12]
   19570:	str	r0, [fp, #-4]
   19574:	ldr	r0, [pc, #80]	; 195cc <read_boolean_binary_expression@@Base+0x3a4>
   19578:	add	r0, pc, r0
   1957c:	ldr	r1, [r0, #112]	; 0x70
   19580:	ldr	r2, [r0, #116]	; 0x74
   19584:	adds	r1, r1, #1
   19588:	adc	r2, r2, #0
   1958c:	str	r1, [r0, #112]	; 0x70
   19590:	str	r2, [r0, #116]	; 0x74
   19594:	ldr	r0, [fp, #-4]
   19598:	mov	sp, fp
   1959c:	pop	{fp, pc}
   195a0:	andeq	r8, r1, r0, lsl #25
   195a4:	andeq	r8, r1, r4, ror ip
   195a8:	andeq	r8, r1, r0, lsl #24
   195ac:			; <UNDEFINED> instruction: 0x00018bb8
   195b0:	muleq	r1, r0, fp
   195b4:	andeq	r8, r1, r0, asr fp
   195b8:	andeq	r8, r1, r0, asr #21
   195bc:	muleq	r1, r8, sl
   195c0:	andeq	r8, r1, r8, lsl sl
   195c4:	strdeq	r8, [r1], -r0
   195c8:			; <UNDEFINED> instruction: 0x000189bc
   195cc:	andeq	r8, r1, r0, asr #18

000195d0 <read_boolean_unary_expression@@Base>:
   195d0:	push	{fp, lr}
   195d4:	mov	fp, sp
   195d8:	sub	sp, sp, #40	; 0x28
   195dc:	ldr	r1, [pc, #532]	; 197f8 <read_boolean_unary_expression@@Base+0x228>
   195e0:	add	r1, pc, r1
   195e4:	ldr	r2, [r1, #4]
   195e8:	ldr	r3, [pc, #524]	; 197fc <read_boolean_unary_expression@@Base+0x22c>
   195ec:	ldr	r3, [pc, r3]
   195f0:	adds	r3, r3, #1
   195f4:	adc	r2, r2, #0
   195f8:	str	r3, [r1]
   195fc:	str	r2, [r1, #4]
   19600:	str	r0, [sp, #4]
   19604:	ldr	r0, [sp, #4]
   19608:	str	r0, [fp, #-8]
   1960c:	mov	r1, #0
   19610:	str	r1, [fp, #-12]
   19614:	str	r1, [fp, #-16]
   19618:	str	r1, [sp, #20]
   1961c:	str	r1, [sp, #16]
   19620:	str	r1, [sp, #12]
   19624:	mov	r0, #20
   19628:	bl	11f68 <malloc@plt>
   1962c:	str	r0, [fp, #-12]
   19630:	ldr	r0, [fp, #-8]
   19634:	ldr	r0, [r0]
   19638:	bl	141fc <next@@Base>
   1963c:	str	r0, [sp, #16]
   19640:	ldr	r0, [sp, #16]
   19644:	ldr	r0, [r0]
   19648:	sub	r1, r0, #12
   1964c:	cmp	r0, #12
   19650:	movwne	r1, #1
   19654:	mov	lr, #16
   19658:	cmp	r0, #12
   1965c:	movwne	lr, #8
   19660:	ldr	r0, [pc, #408]	; 19800 <read_boolean_unary_expression@@Base+0x230>
   19664:	add	r0, pc, r0
   19668:	ldr	lr, [r0, lr]!
   1966c:	ldr	r2, [r0, #4]
   19670:	adds	lr, lr, #1
   19674:	adc	r2, r2, #0
   19678:	str	lr, [r0]
   1967c:	str	r2, [r0, #4]
   19680:	tst	r1, #1
   19684:	beq	196bc <read_boolean_unary_expression@@Base+0xec>
   19688:	ldr	r0, [pc, #372]	; 19804 <read_boolean_unary_expression@@Base+0x234>
   1968c:	add	r0, pc, r0
   19690:	ldr	r1, [r0, #24]
   19694:	ldr	r2, [r0, #28]
   19698:	adds	r1, r1, #1
   1969c:	adc	r2, r2, #0
   196a0:	str	r1, [r0, #24]
   196a4:	str	r2, [r0, #28]
   196a8:	ldr	r0, [fp, #-12]
   196ac:	bl	17394 <free_node_boolean_operator@@Base>
   196b0:	movw	r0, #0
   196b4:	str	r0, [fp, #-4]
   196b8:	b	197cc <read_boolean_unary_expression@@Base+0x1fc>
   196bc:	ldr	r0, [sp, #16]
   196c0:	bl	174a0 <get_boolean_op_value@@Base>
   196c4:	str	r0, [sp, #8]
   196c8:	ldr	r0, [sp, #16]
   196cc:	bl	137b8 <free_token_boolean_op@@Base>
   196d0:	ldr	r0, [fp, #-8]
   196d4:	ldr	r0, [r0]
   196d8:	bl	141fc <next@@Base>
   196dc:	str	r0, [sp, #16]
   196e0:	ldr	r0, [sp, #16]
   196e4:	ldr	r0, [r0]
   196e8:	sub	lr, r0, #1
   196ec:	cmp	r0, #1
   196f0:	movwne	lr, #1
   196f4:	mov	r1, #40	; 0x28
   196f8:	cmp	r0, #1
   196fc:	movwne	r1, #32
   19700:	ldr	r0, [pc, #256]	; 19808 <read_boolean_unary_expression@@Base+0x238>
   19704:	add	r0, pc, r0
   19708:	ldr	r1, [r0, r1]!
   1970c:	ldr	r2, [r0, #4]
   19710:	adds	r1, r1, #1
   19714:	adc	r2, r2, #0
   19718:	str	r1, [r0]
   1971c:	str	r2, [r0, #4]
   19720:	tst	lr, #1
   19724:	beq	1975c <read_boolean_unary_expression@@Base+0x18c>
   19728:	ldr	r0, [pc, #220]	; 1980c <read_boolean_unary_expression@@Base+0x23c>
   1972c:	add	r0, pc, r0
   19730:	ldr	r1, [r0, #48]	; 0x30
   19734:	ldr	r2, [r0, #52]	; 0x34
   19738:	adds	r1, r1, #1
   1973c:	adc	r2, r2, #0
   19740:	str	r1, [r0, #48]	; 0x30
   19744:	str	r2, [r0, #52]	; 0x34
   19748:	ldr	r0, [fp, #-12]
   1974c:	bl	17394 <free_node_boolean_operator@@Base>
   19750:	movw	r0, #0
   19754:	str	r0, [fp, #-4]
   19758:	b	197cc <read_boolean_unary_expression@@Base+0x1fc>
   1975c:	ldr	r0, [pc, #172]	; 19810 <read_boolean_unary_expression@@Base+0x240>
   19760:	add	r0, pc, r0
   19764:	ldr	r1, [r0, #56]	; 0x38
   19768:	ldr	r2, [r0, #60]	; 0x3c
   1976c:	adds	r1, r1, #1
   19770:	adc	r2, r2, #0
   19774:	str	r1, [r0, #56]	; 0x38
   19778:	str	r2, [r0, #60]	; 0x3c
   1977c:	ldr	r0, [sp, #16]
   19780:	str	r0, [sp, #12]
   19784:	movw	r0, #12
   19788:	bl	11f68 <malloc@plt>
   1978c:	str	r0, [fp, #-16]
   19790:	ldr	r0, [fp, #-16]
   19794:	ldr	r1, [sp, #12]
   19798:	ldr	r1, [r1, #4]
   1979c:	bl	1684c <init_node_int@@Base>
   197a0:	ldr	r0, [sp, #12]
   197a4:	bl	13264 <free_token_int_value@@Base>
   197a8:	ldr	r0, [fp, #-16]
   197ac:	str	r0, [sp, #20]
   197b0:	ldr	r0, [fp, #-12]
   197b4:	ldr	r1, [sp, #8]
   197b8:	ldr	r2, [sp, #20]
   197bc:	movw	r3, #0
   197c0:	bl	16ae4 <init_node_boolean_operator@@Base>
   197c4:	ldr	r0, [fp, #-12]
   197c8:	str	r0, [fp, #-4]
   197cc:	ldr	r0, [pc, #64]	; 19814 <read_boolean_unary_expression@@Base+0x244>
   197d0:	add	r0, pc, r0
   197d4:	ldr	r1, [r0, #64]	; 0x40
   197d8:	ldr	r2, [r0, #68]	; 0x44
   197dc:	adds	r1, r1, #1
   197e0:	adc	r2, r2, #0
   197e4:	str	r1, [r0, #64]	; 0x40
   197e8:	str	r2, [r0, #68]	; 0x44
   197ec:	ldr	r0, [fp, #-4]
   197f0:	mov	sp, fp
   197f4:	pop	{fp, pc}
   197f8:	andeq	r8, r1, r8, asr r9
   197fc:	andeq	r8, r1, ip, asr #18
   19800:	ldrdeq	r8, [r1], -r4
   19804:	andeq	r8, r1, ip, lsr #17
   19808:	andeq	r8, r1, r4, lsr r8
   1980c:	andeq	r8, r1, ip, lsl #16
   19810:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19814:	andeq	r8, r1, r8, ror #14
   19818:	sub	sp, sp, #12
   1981c:	ldr	r0, [r0]
   19820:	cmn	r0, #1
   19824:	str	r1, [sp, #8]
   19828:	str	r0, [sp, #4]
   1982c:	beq	1986c <read_boolean_unary_expression@@Base+0x29c>
   19830:	ldr	r0, [sp, #8]
   19834:	ldr	r1, [sp, #4]
   19838:	add	r2, r0, r1, lsl #2
   1983c:	ldr	r2, [r2]
   19840:	movw	r3, #0
   19844:	cmp	r2, r3
   19848:	str	r2, [sp]
   1984c:	beq	1986c <read_boolean_unary_expression@@Base+0x29c>
   19850:	ldr	r0, [sp]
   19854:	ldr	r1, [r0]
   19858:	ldr	r2, [r0, #4]
   1985c:	adds	r1, r1, #1
   19860:	adc	r2, r2, #0
   19864:	str	r1, [r0]
   19868:	str	r2, [r0, #4]
   1986c:	add	sp, sp, #12
   19870:	bx	lr
   19874:	push	{r4, sl, fp, lr}
   19878:	add	fp, sp, #8
   1987c:	sub	sp, sp, #40	; 0x28
   19880:	movw	r0, #0
   19884:	str	r0, [fp, #-12]
   19888:	b	1988c <read_boolean_unary_expression@@Base+0x2bc>
   1988c:	ldr	r0, [fp, #-12]
   19890:	ldr	r1, [pc, #244]	; 1998c <read_boolean_unary_expression@@Base+0x3bc>
   19894:	add	r1, pc, r1
   19898:	movw	r2, #24
   1989c:	mul	r2, r0, r2
   198a0:	add	r1, r1, r2
   198a4:	ldr	r2, [r1]
   198a8:	ldr	r3, [r1, #4]
   198ac:	ldr	ip, [r1, #8]
   198b0:	str	r0, [fp, #-16]
   198b4:	mov	r0, r2
   198b8:	str	r1, [fp, #-20]	; 0xffffffec
   198bc:	mov	r1, r3
   198c0:	mov	r2, ip
   198c4:	bl	1b58c <__generate_code_for_binary_boolean_expression@@Base+0xa10>
   198c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   198cc:	ldr	r1, [r0, #12]
   198d0:	ldr	r2, [r0, #16]
   198d4:	ldr	r3, [r0, #20]
   198d8:	movw	ip, #0
   198dc:	cmp	ip, r1
   198e0:	str	r1, [sp, #24]
   198e4:	str	r2, [sp, #20]
   198e8:	str	r3, [sp, #16]
   198ec:	str	ip, [sp, #12]
   198f0:	bge	19968 <read_boolean_unary_expression@@Base+0x398>
   198f4:	ldr	r0, [sp, #12]
   198f8:	add	r1, r0, r0, lsl #2
   198fc:	ldr	r2, [sp, #20]
   19900:	ldr	r1, [r2, r1, lsl #2]!
   19904:	ldr	r3, [r2, #4]
   19908:	ldr	ip, [r2, #8]
   1990c:	ldr	lr, [r2, #16]
   19910:	ldrb	r2, [r2, #12]
   19914:	mov	r4, sp
   19918:	str	lr, [r4]
   1991c:	str	r0, [sp, #8]
   19920:	mov	r0, r1
   19924:	mov	r1, r3
   19928:	str	r2, [sp, #4]
   1992c:	mov	r2, ip
   19930:	ldr	r3, [sp, #4]
   19934:	bl	1bcf0 <__generate_code_for_binary_boolean_expression@@Base+0x1174>
   19938:	ldr	r0, [sp, #16]
   1993c:	ldr	r1, [sp, #8]
   19940:	add	r2, r0, r1, lsl #3
   19944:	ldr	r0, [r2]
   19948:	ldr	r1, [r2, #4]
   1994c:	bl	1c5a4 <__generate_code_for_binary_boolean_expression@@Base+0x1a28>
   19950:	ldr	r0, [sp, #8]
   19954:	add	r1, r0, #1
   19958:	ldr	r2, [sp, #24]
   1995c:	cmp	r1, r2
   19960:	str	r1, [sp, #12]
   19964:	blt	198f4 <read_boolean_unary_expression@@Base+0x324>
   19968:	bl	1cd20 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   1996c:	bl	1da8c <__generate_code_for_binary_boolean_expression@@Base+0x2f10>
   19970:	ldr	lr, [fp, #-16]
   19974:	add	r0, lr, #1
   19978:	cmp	r0, #1
   1997c:	str	r0, [fp, #-12]
   19980:	blt	1988c <read_boolean_unary_expression@@Base+0x2bc>
   19984:	sub	sp, fp, #8
   19988:	pop	{r4, sl, fp, pc}
   1998c:	andeq	r7, r1, r4, asr r4
   19990:	push	{fp, lr}
   19994:	mov	fp, sp
   19998:	bl	19874 <read_boolean_unary_expression@@Base+0x2a4>
   1999c:	ldr	lr, [pc, #936]	; 19d4c <read_boolean_unary_expression@@Base+0x77c>
   199a0:	add	lr, pc, lr
   199a4:	mov	r0, #0
   199a8:	str	r0, [lr, #12]
   199ac:	str	r0, [lr, #8]
   199b0:	str	r0, [lr, #4]
   199b4:	str	r0, [lr]
   199b8:	ldr	lr, [pc, #912]	; 19d50 <read_boolean_unary_expression@@Base+0x780>
   199bc:	add	lr, pc, lr
   199c0:	str	r0, [lr, #12]
   199c4:	str	r0, [lr, #8]
   199c8:	str	r0, [lr, #4]
   199cc:	str	r0, [lr]
   199d0:	ldr	lr, [pc, #892]	; 19d54 <read_boolean_unary_expression@@Base+0x784>
   199d4:	add	lr, pc, lr
   199d8:	str	r0, [lr, #12]
   199dc:	str	r0, [lr, #8]
   199e0:	str	r0, [lr, #4]
   199e4:	str	r0, [lr]
   199e8:	ldr	lr, [pc, #872]	; 19d58 <read_boolean_unary_expression@@Base+0x788>
   199ec:	add	lr, pc, lr
   199f0:	str	r0, [lr, #116]	; 0x74
   199f4:	str	r0, [lr, #112]	; 0x70
   199f8:	str	r0, [lr, #108]	; 0x6c
   199fc:	str	r0, [lr, #104]	; 0x68
   19a00:	str	r0, [lr, #100]	; 0x64
   19a04:	str	r0, [lr, #96]	; 0x60
   19a08:	str	r0, [lr, #92]	; 0x5c
   19a0c:	str	r0, [lr, #88]	; 0x58
   19a10:	str	r0, [lr, #84]	; 0x54
   19a14:	str	r0, [lr, #80]	; 0x50
   19a18:	str	r0, [lr, #76]	; 0x4c
   19a1c:	str	r0, [lr, #72]	; 0x48
   19a20:	str	r0, [lr, #68]	; 0x44
   19a24:	str	r0, [lr, #64]	; 0x40
   19a28:	str	r0, [lr, #60]	; 0x3c
   19a2c:	str	r0, [lr, #56]	; 0x38
   19a30:	str	r0, [lr, #52]	; 0x34
   19a34:	str	r0, [lr, #48]	; 0x30
   19a38:	str	r0, [lr, #44]	; 0x2c
   19a3c:	str	r0, [lr, #40]	; 0x28
   19a40:	str	r0, [lr, #36]	; 0x24
   19a44:	str	r0, [lr, #32]
   19a48:	str	r0, [lr, #28]
   19a4c:	str	r0, [lr, #24]
   19a50:	str	r0, [lr, #20]
   19a54:	str	r0, [lr, #16]
   19a58:	str	r0, [lr, #12]
   19a5c:	str	r0, [lr, #8]
   19a60:	str	r0, [lr, #4]
   19a64:	str	r0, [lr]
   19a68:	ldr	lr, [pc, #748]	; 19d5c <read_boolean_unary_expression@@Base+0x78c>
   19a6c:	add	lr, pc, lr
   19a70:	str	r0, [lr, #156]	; 0x9c
   19a74:	str	r0, [lr, #152]	; 0x98
   19a78:	str	r0, [lr, #148]	; 0x94
   19a7c:	str	r0, [lr, #144]	; 0x90
   19a80:	str	r0, [lr, #140]	; 0x8c
   19a84:	str	r0, [lr, #136]	; 0x88
   19a88:	str	r0, [lr, #132]	; 0x84
   19a8c:	str	r0, [lr, #128]	; 0x80
   19a90:	str	r0, [lr, #124]	; 0x7c
   19a94:	str	r0, [lr, #120]	; 0x78
   19a98:	str	r0, [lr, #116]	; 0x74
   19a9c:	str	r0, [lr, #112]	; 0x70
   19aa0:	str	r0, [lr, #108]	; 0x6c
   19aa4:	str	r0, [lr, #104]	; 0x68
   19aa8:	str	r0, [lr, #100]	; 0x64
   19aac:	str	r0, [lr, #96]	; 0x60
   19ab0:	str	r0, [lr, #92]	; 0x5c
   19ab4:	str	r0, [lr, #88]	; 0x58
   19ab8:	str	r0, [lr, #84]	; 0x54
   19abc:	str	r0, [lr, #80]	; 0x50
   19ac0:	str	r0, [lr, #76]	; 0x4c
   19ac4:	str	r0, [lr, #72]	; 0x48
   19ac8:	str	r0, [lr, #68]	; 0x44
   19acc:	str	r0, [lr, #64]	; 0x40
   19ad0:	str	r0, [lr, #60]	; 0x3c
   19ad4:	str	r0, [lr, #56]	; 0x38
   19ad8:	str	r0, [lr, #52]	; 0x34
   19adc:	str	r0, [lr, #48]	; 0x30
   19ae0:	str	r0, [lr, #44]	; 0x2c
   19ae4:	str	r0, [lr, #40]	; 0x28
   19ae8:	str	r0, [lr, #36]	; 0x24
   19aec:	str	r0, [lr, #32]
   19af0:	str	r0, [lr, #28]
   19af4:	str	r0, [lr, #24]
   19af8:	str	r0, [lr, #20]
   19afc:	str	r0, [lr, #16]
   19b00:	str	r0, [lr, #12]
   19b04:	str	r0, [lr, #8]
   19b08:	str	r0, [lr, #4]
   19b0c:	str	r0, [lr]
   19b10:	ldr	lr, [pc, #584]	; 19d60 <read_boolean_unary_expression@@Base+0x790>
   19b14:	add	lr, pc, lr
   19b18:	str	r0, [lr, #68]	; 0x44
   19b1c:	str	r0, [lr, #64]	; 0x40
   19b20:	str	r0, [lr, #60]	; 0x3c
   19b24:	str	r0, [lr, #56]	; 0x38
   19b28:	str	r0, [lr, #52]	; 0x34
   19b2c:	str	r0, [lr, #48]	; 0x30
   19b30:	str	r0, [lr, #44]	; 0x2c
   19b34:	str	r0, [lr, #40]	; 0x28
   19b38:	str	r0, [lr, #36]	; 0x24
   19b3c:	str	r0, [lr, #32]
   19b40:	str	r0, [lr, #28]
   19b44:	str	r0, [lr, #24]
   19b48:	str	r0, [lr, #20]
   19b4c:	str	r0, [lr, #16]
   19b50:	str	r0, [lr, #12]
   19b54:	str	r0, [lr, #8]
   19b58:	str	r0, [lr, #4]
   19b5c:	str	r0, [lr]
   19b60:	ldr	lr, [pc, #508]	; 19d64 <read_boolean_unary_expression@@Base+0x794>
   19b64:	add	lr, pc, lr
   19b68:	str	r0, [lr, #76]	; 0x4c
   19b6c:	str	r0, [lr, #72]	; 0x48
   19b70:	str	r0, [lr, #68]	; 0x44
   19b74:	str	r0, [lr, #64]	; 0x40
   19b78:	str	r0, [lr, #60]	; 0x3c
   19b7c:	str	r0, [lr, #56]	; 0x38
   19b80:	str	r0, [lr, #52]	; 0x34
   19b84:	str	r0, [lr, #48]	; 0x30
   19b88:	str	r0, [lr, #44]	; 0x2c
   19b8c:	str	r0, [lr, #40]	; 0x28
   19b90:	str	r0, [lr, #36]	; 0x24
   19b94:	str	r0, [lr, #32]
   19b98:	str	r0, [lr, #28]
   19b9c:	str	r0, [lr, #24]
   19ba0:	str	r0, [lr, #20]
   19ba4:	str	r0, [lr, #16]
   19ba8:	str	r0, [lr, #12]
   19bac:	str	r0, [lr, #8]
   19bb0:	str	r0, [lr, #4]
   19bb4:	str	r0, [lr]
   19bb8:	ldr	lr, [pc, #424]	; 19d68 <read_boolean_unary_expression@@Base+0x798>
   19bbc:	add	lr, pc, lr
   19bc0:	str	r0, [lr, #100]	; 0x64
   19bc4:	str	r0, [lr, #96]	; 0x60
   19bc8:	str	r0, [lr, #92]	; 0x5c
   19bcc:	str	r0, [lr, #88]	; 0x58
   19bd0:	str	r0, [lr, #84]	; 0x54
   19bd4:	str	r0, [lr, #80]	; 0x50
   19bd8:	str	r0, [lr, #76]	; 0x4c
   19bdc:	str	r0, [lr, #72]	; 0x48
   19be0:	str	r0, [lr, #68]	; 0x44
   19be4:	str	r0, [lr, #64]	; 0x40
   19be8:	str	r0, [lr, #60]	; 0x3c
   19bec:	str	r0, [lr, #56]	; 0x38
   19bf0:	str	r0, [lr, #52]	; 0x34
   19bf4:	str	r0, [lr, #48]	; 0x30
   19bf8:	str	r0, [lr, #44]	; 0x2c
   19bfc:	str	r0, [lr, #40]	; 0x28
   19c00:	str	r0, [lr, #36]	; 0x24
   19c04:	str	r0, [lr, #32]
   19c08:	str	r0, [lr, #28]
   19c0c:	str	r0, [lr, #24]
   19c10:	str	r0, [lr, #20]
   19c14:	str	r0, [lr, #16]
   19c18:	str	r0, [lr, #12]
   19c1c:	str	r0, [lr, #8]
   19c20:	str	r0, [lr, #4]
   19c24:	str	r0, [lr]
   19c28:	ldr	lr, [pc, #316]	; 19d6c <read_boolean_unary_expression@@Base+0x79c>
   19c2c:	add	lr, pc, lr
   19c30:	str	r0, [lr, #68]	; 0x44
   19c34:	str	r0, [lr, #64]	; 0x40
   19c38:	str	r0, [lr, #60]	; 0x3c
   19c3c:	str	r0, [lr, #56]	; 0x38
   19c40:	str	r0, [lr, #52]	; 0x34
   19c44:	str	r0, [lr, #48]	; 0x30
   19c48:	str	r0, [lr, #44]	; 0x2c
   19c4c:	str	r0, [lr, #40]	; 0x28
   19c50:	str	r0, [lr, #36]	; 0x24
   19c54:	str	r0, [lr, #32]
   19c58:	str	r0, [lr, #28]
   19c5c:	str	r0, [lr, #24]
   19c60:	str	r0, [lr, #20]
   19c64:	str	r0, [lr, #16]
   19c68:	str	r0, [lr, #12]
   19c6c:	str	r0, [lr, #8]
   19c70:	str	r0, [lr, #4]
   19c74:	str	r0, [lr]
   19c78:	ldr	lr, [pc, #240]	; 19d70 <read_boolean_unary_expression@@Base+0x7a0>
   19c7c:	add	lr, pc, lr
   19c80:	str	r0, [lr, #116]	; 0x74
   19c84:	str	r0, [lr, #112]	; 0x70
   19c88:	str	r0, [lr, #108]	; 0x6c
   19c8c:	str	r0, [lr, #104]	; 0x68
   19c90:	str	r0, [lr, #100]	; 0x64
   19c94:	str	r0, [lr, #96]	; 0x60
   19c98:	str	r0, [lr, #92]	; 0x5c
   19c9c:	str	r0, [lr, #88]	; 0x58
   19ca0:	str	r0, [lr, #84]	; 0x54
   19ca4:	str	r0, [lr, #80]	; 0x50
   19ca8:	str	r0, [lr, #76]	; 0x4c
   19cac:	str	r0, [lr, #72]	; 0x48
   19cb0:	str	r0, [lr, #68]	; 0x44
   19cb4:	str	r0, [lr, #64]	; 0x40
   19cb8:	str	r0, [lr, #60]	; 0x3c
   19cbc:	str	r0, [lr, #56]	; 0x38
   19cc0:	str	r0, [lr, #52]	; 0x34
   19cc4:	str	r0, [lr, #48]	; 0x30
   19cc8:	str	r0, [lr, #44]	; 0x2c
   19ccc:	str	r0, [lr, #40]	; 0x28
   19cd0:	str	r0, [lr, #36]	; 0x24
   19cd4:	str	r0, [lr, #32]
   19cd8:	str	r0, [lr, #28]
   19cdc:	str	r0, [lr, #24]
   19ce0:	str	r0, [lr, #20]
   19ce4:	str	r0, [lr, #16]
   19ce8:	str	r0, [lr, #12]
   19cec:	str	r0, [lr, #8]
   19cf0:	str	r0, [lr, #4]
   19cf4:	str	r0, [lr]
   19cf8:	ldr	lr, [pc, #116]	; 19d74 <read_boolean_unary_expression@@Base+0x7a4>
   19cfc:	add	lr, pc, lr
   19d00:	str	r0, [lr, #68]	; 0x44
   19d04:	str	r0, [lr, #64]	; 0x40
   19d08:	str	r0, [lr, #60]	; 0x3c
   19d0c:	str	r0, [lr, #56]	; 0x38
   19d10:	str	r0, [lr, #52]	; 0x34
   19d14:	str	r0, [lr, #48]	; 0x30
   19d18:	str	r0, [lr, #44]	; 0x2c
   19d1c:	str	r0, [lr, #40]	; 0x28
   19d20:	str	r0, [lr, #36]	; 0x24
   19d24:	str	r0, [lr, #32]
   19d28:	str	r0, [lr, #28]
   19d2c:	str	r0, [lr, #24]
   19d30:	str	r0, [lr, #20]
   19d34:	str	r0, [lr, #16]
   19d38:	str	r0, [lr, #12]
   19d3c:	str	r0, [lr, #8]
   19d40:	str	r0, [lr, #4]
   19d44:	str	r0, [lr]
   19d48:	pop	{fp, pc}
   19d4c:	andeq	r8, r1, r8, ror #4
   19d50:	andeq	r8, r1, ip, asr r2
   19d54:	andeq	r8, r1, r4, asr r2
   19d58:	andeq	r8, r1, ip, asr #4
   19d5c:	andeq	r8, r1, ip, asr #4
   19d60:	andeq	r8, r1, r4, asr #4
   19d64:	andeq	r8, r1, r4, asr #4
   19d68:	andeq	r8, r1, ip, lsr r2
   19d6c:	andeq	r8, r1, ip, lsr r2
   19d70:	andeq	r8, r1, ip, lsr r2
   19d74:	andeq	r8, r1, ip, lsr r2
   19d78:	push	{fp, lr}
   19d7c:	mov	fp, sp
   19d80:	ldr	r0, [pc, #16]	; 19d98 <read_boolean_unary_expression@@Base+0x7c8>
   19d84:	add	r0, pc, r0
   19d88:	ldr	r1, [pc, #12]	; 19d9c <read_boolean_unary_expression@@Base+0x7cc>
   19d8c:	add	r1, pc, r1
   19d90:	bl	1df3c <__gcov_flush@@Base+0xb4>
   19d94:	pop	{fp, pc}
   19d98:			; <UNDEFINED> instruction: 0xfffffae8
   19d9c:			; <UNDEFINED> instruction: 0xfffffbfc

00019da0 <init_generator@@Base>:
   19da0:	push	{fp, lr}
   19da4:	mov	fp, sp
   19da8:	sub	sp, sp, #24
   19dac:	ldr	r3, [pc, #156]	; 19e50 <init_generator@@Base+0xb0>
   19db0:	add	r3, pc, r3
   19db4:	ldr	ip, [r3, #4]
   19db8:	ldr	lr, [pc, #148]	; 19e54 <init_generator@@Base+0xb4>
   19dbc:	ldr	lr, [pc, lr]
   19dc0:	adds	lr, lr, #1
   19dc4:	adc	ip, ip, #0
   19dc8:	str	lr, [r3]
   19dcc:	str	ip, [r3, #4]
   19dd0:	str	r1, [sp, #8]
   19dd4:	str	r0, [sp, #4]
   19dd8:	str	r2, [sp]
   19ddc:	ldr	r0, [pc, #116]	; 19e58 <init_generator@@Base+0xb8>
   19de0:	add	r0, pc, r0
   19de4:	ldr	r1, [r0, #8]
   19de8:	ldr	r2, [r0, #12]
   19dec:	adds	r1, r1, #1
   19df0:	adc	r2, r2, #0
   19df4:	str	r1, [r0, #8]
   19df8:	str	r2, [r0, #12]
   19dfc:	ldr	r0, [sp, #4]
   19e00:	str	r0, [fp, #-4]
   19e04:	ldr	r1, [sp, #8]
   19e08:	str	r1, [fp, #-8]
   19e0c:	ldr	r2, [sp]
   19e10:	str	r2, [sp, #12]
   19e14:	ldr	r3, [fp, #-8]
   19e18:	ldr	ip, [fp, #-4]
   19e1c:	str	r3, [ip]
   19e20:	ldr	r0, [sp, #12]
   19e24:	ldr	r1, [pc, #48]	; 19e5c <init_generator@@Base+0xbc>
   19e28:	add	r1, pc, r1
   19e2c:	bl	11ecc <fopen@plt>
   19e30:	ldr	r1, [fp, #-4]
   19e34:	str	r0, [r1, #4]
   19e38:	ldr	r0, [fp, #-4]
   19e3c:	mov	r1, #0
   19e40:	str	r1, [r0, #12]
   19e44:	str	r1, [r0, #8]
   19e48:	mov	sp, fp
   19e4c:	pop	{fp, pc}
   19e50:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19e54:	andeq	r8, r1, ip, asr #3
   19e58:	andeq	r8, r1, r8, lsr #3
   19e5c:	andeq	r5, r0, lr, lsl r0

00019e60 <destroy_generator@@Base>:
   19e60:	push	{fp, lr}
   19e64:	mov	fp, sp
   19e68:	sub	sp, sp, #16
   19e6c:	ldr	r1, [pc, #96]	; 19ed4 <destroy_generator@@Base+0x74>
   19e70:	add	r1, pc, r1
   19e74:	ldr	r2, [r1, #4]
   19e78:	ldr	r3, [pc, #88]	; 19ed8 <destroy_generator@@Base+0x78>
   19e7c:	ldr	r3, [pc, r3]
   19e80:	adds	r3, r3, #1
   19e84:	adc	r2, r2, #0
   19e88:	str	r3, [r1]
   19e8c:	str	r2, [r1, #4]
   19e90:	str	r0, [sp, #8]
   19e94:	ldr	r0, [pc, #64]	; 19edc <destroy_generator@@Base+0x7c>
   19e98:	add	r0, pc, r0
   19e9c:	ldr	r1, [r0, #8]
   19ea0:	ldr	r2, [r0, #12]
   19ea4:	adds	r1, r1, #1
   19ea8:	adc	r2, r2, #0
   19eac:	str	r1, [r0, #8]
   19eb0:	str	r2, [r0, #12]
   19eb4:	ldr	r0, [sp, #8]
   19eb8:	str	r0, [fp, #-4]
   19ebc:	ldr	r1, [fp, #-4]
   19ec0:	ldr	r0, [r1, #4]
   19ec4:	bl	12028 <fclose@plt>
   19ec8:	str	r0, [sp, #4]
   19ecc:	mov	sp, fp
   19ed0:	pop	{fp, pc}
   19ed4:	andeq	r8, r1, r8, lsr #2
   19ed8:	andeq	r8, r1, ip, lsl r1
   19edc:	andeq	r8, r1, r0, lsl #2

00019ee0 <generate_code@@Base>:
   19ee0:	push	{fp, lr}
   19ee4:	mov	fp, sp
   19ee8:	sub	sp, sp, #16
   19eec:	ldr	r1, [pc, #124]	; 19f70 <generate_code@@Base+0x90>
   19ef0:	add	r1, pc, r1
   19ef4:	ldr	r2, [r1, #4]
   19ef8:	ldr	r3, [pc, #116]	; 19f74 <generate_code@@Base+0x94>
   19efc:	ldr	r3, [pc, r3]
   19f00:	adds	r3, r3, #1
   19f04:	adc	r2, r2, #0
   19f08:	str	r3, [r1]
   19f0c:	str	r2, [r1, #4]
   19f10:	str	r0, [sp, #4]
   19f14:	ldr	r0, [pc, #92]	; 19f78 <generate_code@@Base+0x98>
   19f18:	add	r0, pc, r0
   19f1c:	ldr	r1, [r0, #8]
   19f20:	ldr	r2, [r0, #12]
   19f24:	adds	r1, r1, #1
   19f28:	adc	r2, r2, #0
   19f2c:	str	r1, [r0, #8]
   19f30:	str	r2, [r0, #12]
   19f34:	ldr	r0, [sp, #4]
   19f38:	str	r0, [fp, #-4]
   19f3c:	movw	r1, #0
   19f40:	str	r1, [sp, #8]
   19f44:	ldr	r1, [fp, #-4]
   19f48:	ldr	r0, [r1]
   19f4c:	bl	180b4 <build_ast@@Base>
   19f50:	str	r0, [sp, #8]
   19f54:	ldr	r0, [fp, #-4]
   19f58:	ldr	r1, [sp, #8]
   19f5c:	bl	19f7c <__generate_code@@Base>
   19f60:	ldr	r0, [sp, #8]
   19f64:	bl	16bb4 <free_node@@Base>
   19f68:	mov	sp, fp
   19f6c:	pop	{fp, pc}
   19f70:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   19f74:	andeq	r8, r1, ip, lsr #1
   19f78:	muleq	r1, r0, r0

00019f7c <__generate_code@@Base>:
   19f7c:	push	{fp, lr}
   19f80:	mov	fp, sp
   19f84:	sub	sp, sp, #24
   19f88:	ldr	r2, [pc, #140]	; 1a01c <__generate_code@@Base+0xa0>
   19f8c:	add	r2, pc, r2
   19f90:	ldr	r3, [r2, #4]
   19f94:	ldr	ip, [pc, #132]	; 1a020 <__generate_code@@Base+0xa4>
   19f98:	ldr	ip, [pc, ip]
   19f9c:	adds	ip, ip, #1
   19fa0:	adc	r3, r3, #0
   19fa4:	str	ip, [r2]
   19fa8:	str	r3, [r2, #4]
   19fac:	str	r0, [sp, #12]
   19fb0:	str	r1, [sp, #8]
   19fb4:	ldr	r0, [pc, #92]	; 1a018 <__generate_code@@Base+0x9c>
   19fb8:	add	r1, pc, r0
   19fbc:	ldr	r0, [pc, #96]	; 1a024 <__generate_code@@Base+0xa8>
   19fc0:	add	r0, pc, r0
   19fc4:	ldr	r2, [r0, #8]
   19fc8:	ldr	r3, [r0, #12]
   19fcc:	adds	r2, r2, #1
   19fd0:	adc	r3, r3, #0
   19fd4:	str	r2, [r0, #8]
   19fd8:	str	r3, [r0, #12]
   19fdc:	ldr	r0, [sp, #12]
   19fe0:	str	r0, [fp, #-4]
   19fe4:	ldr	r2, [sp, #8]
   19fe8:	str	r2, [fp, #-8]
   19fec:	ldr	r3, [fp, #-4]
   19ff0:	ldr	r0, [r3, #4]
   19ff4:	bl	11fd4 <fprintf@plt>
   19ff8:	ldr	r1, [fp, #-4]
   19ffc:	ldr	r2, [fp, #-8]
   1a000:	str	r0, [sp, #4]
   1a004:	mov	r0, r1
   1a008:	mov	r1, r2
   1a00c:	bl	1a028 <__generate_code_for_main@@Base>
   1a010:	mov	sp, fp
   1a014:	pop	{fp, pc}
   1a018:	muleq	r0, r0, lr
   1a01c:	andeq	r8, r1, ip, lsr #32
   1a020:	andeq	r8, r1, r0, lsr #32
   1a024:	strdeq	r7, [r1], -r8

0001a028 <__generate_code_for_main@@Base>:
   1a028:	push	{fp, lr}
   1a02c:	mov	fp, sp
   1a030:	sub	sp, sp, #24
   1a034:	ldr	r2, [pc, #276]	; 1a150 <__generate_code_for_main@@Base+0x128>
   1a038:	add	r2, pc, r2
   1a03c:	ldr	r3, [r2, #4]
   1a040:	ldr	ip, [pc, #268]	; 1a154 <__generate_code_for_main@@Base+0x12c>
   1a044:	ldr	ip, [pc, ip]
   1a048:	adds	ip, ip, #1
   1a04c:	adc	r3, r3, #0
   1a050:	str	ip, [r2]
   1a054:	str	r3, [r2, #4]
   1a058:	str	r0, [sp, #12]
   1a05c:	str	r1, [sp, #8]
   1a060:	ldr	r0, [pc, #240]	; 1a158 <__generate_code_for_main@@Base+0x130>
   1a064:	add	r0, pc, r0
   1a068:	mov	r1, #0
   1a06c:	str	r1, [r0]
   1a070:	ldr	r0, [sp, #12]
   1a074:	str	r0, [fp, #-4]
   1a078:	ldr	r1, [sp, #8]
   1a07c:	str	r1, [fp, #-8]
   1a080:	ldr	r2, [fp, #-8]
   1a084:	ldr	r2, [r2]
   1a088:	cmp	r2, #2
   1a08c:	bne	1a0dc <__generate_code_for_main@@Base+0xb4>
   1a090:	b	1a094 <__generate_code_for_main@@Base+0x6c>
   1a094:	ldr	r0, [pc, #192]	; 1a15c <__generate_code_for_main@@Base+0x134>
   1a098:	add	r0, pc, r0
   1a09c:	add	r1, r0, #4
   1a0a0:	ldr	r0, [pc, #184]	; 1a160 <__generate_code_for_main@@Base+0x138>
   1a0a4:	add	r0, pc, r0
   1a0a8:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a0ac:	ldr	r0, [pc, #176]	; 1a164 <__generate_code_for_main@@Base+0x13c>
   1a0b0:	add	r0, pc, r0
   1a0b4:	ldr	r1, [r0, #24]
   1a0b8:	ldr	lr, [r0, #28]
   1a0bc:	adds	r1, r1, #1
   1a0c0:	adc	lr, lr, #0
   1a0c4:	str	r1, [r0, #24]
   1a0c8:	str	lr, [r0, #28]
   1a0cc:	ldr	r0, [fp, #-4]
   1a0d0:	ldr	r1, [fp, #-8]
   1a0d4:	bl	1a16c <__generate_code_for_function@@Base>
   1a0d8:	b	1a118 <__generate_code_for_main@@Base+0xf0>
   1a0dc:	ldr	r0, [pc, #100]	; 1a148 <__generate_code_for_main@@Base+0x120>
   1a0e0:	add	r0, pc, r0
   1a0e4:	ldr	r1, [pc, #96]	; 1a14c <__generate_code_for_main@@Base+0x124>
   1a0e8:	add	r1, pc, r1
   1a0ec:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a0f0:	ldr	r0, [pc, #72]	; 1a140 <__generate_code_for_main@@Base+0x118>
   1a0f4:	add	r1, pc, r0
   1a0f8:	ldr	r0, [pc, #68]	; 1a144 <__generate_code_for_main@@Base+0x11c>
   1a0fc:	ldr	r0, [pc, r0]
   1a100:	ldr	r0, [r0]
   1a104:	bl	11fd4 <fprintf@plt>
   1a108:	movw	r1, #1
   1a10c:	str	r0, [sp, #4]
   1a110:	mov	r0, r1
   1a114:	bl	11fa4 <exit@plt>
   1a118:	ldr	r0, [pc, #72]	; 1a168 <__generate_code_for_main@@Base+0x140>
   1a11c:	add	r0, pc, r0
   1a120:	ldr	r1, [r0, #32]
   1a124:	ldr	r2, [r0, #36]	; 0x24
   1a128:	adds	r1, r1, #1
   1a12c:	adc	r2, r2, #0
   1a130:	str	r1, [r0, #32]
   1a134:	str	r2, [r0, #36]	; 0x24
   1a138:	mov	sp, fp
   1a13c:	pop	{fp, pc}
   1a140:	andeq	r4, r0, sl, ror #26
   1a144:			; <UNDEFINED> instruction: 0x00016fbc
   1a148:	andeq	r7, r1, r4
   1a14c:	andeq	r6, r1, r0, lsr #24
   1a150:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1a154:	andeq	r7, r1, r4, lsl #31
   1a158:	andeq	r7, r1, r0, lsl #1
   1a15c:	andeq	r6, r1, r0, ror ip
   1a160:	andeq	r7, r1, r0, asr #32
   1a164:	andeq	r7, r1, r8, lsl pc
   1a168:	andeq	r7, r1, ip, lsr #29

0001a16c <__generate_code_for_function@@Base>:
   1a16c:	push	{fp, lr}
   1a170:	mov	fp, sp
   1a174:	sub	sp, sp, #24
   1a178:	ldr	r2, [pc, #152]	; 1a218 <__generate_code_for_function@@Base+0xac>
   1a17c:	add	r2, pc, r2
   1a180:	ldr	r3, [r2, #4]
   1a184:	ldr	ip, [pc, #144]	; 1a21c <__generate_code_for_function@@Base+0xb0>
   1a188:	ldr	ip, [pc, ip]
   1a18c:	adds	ip, ip, #1
   1a190:	adc	r3, r3, #0
   1a194:	str	ip, [r2]
   1a198:	str	r3, [r2, #4]
   1a19c:	str	r0, [sp, #12]
   1a1a0:	str	r1, [sp, #8]
   1a1a4:	ldr	r0, [pc, #104]	; 1a214 <__generate_code_for_function@@Base+0xa8>
   1a1a8:	add	r1, pc, r0
   1a1ac:	ldr	r0, [pc, #108]	; 1a220 <__generate_code_for_function@@Base+0xb4>
   1a1b0:	add	r0, pc, r0
   1a1b4:	ldr	r2, [r0, #8]
   1a1b8:	ldr	r3, [r0, #12]
   1a1bc:	adds	r2, r2, #1
   1a1c0:	adc	r3, r3, #0
   1a1c4:	str	r2, [r0, #8]
   1a1c8:	str	r3, [r0, #12]
   1a1cc:	ldr	r0, [sp, #12]
   1a1d0:	str	r0, [fp, #-4]
   1a1d4:	ldr	r2, [sp, #8]
   1a1d8:	str	r2, [fp, #-8]
   1a1dc:	ldr	r3, [fp, #-4]
   1a1e0:	ldr	r0, [r3, #4]
   1a1e4:	ldr	r3, [fp, #-8]
   1a1e8:	ldr	r2, [r3, #8]
   1a1ec:	bl	11fd4 <fprintf@plt>
   1a1f0:	ldr	r1, [fp, #-4]
   1a1f4:	ldr	r2, [fp, #-8]
   1a1f8:	ldr	r2, [r2, #12]
   1a1fc:	str	r0, [sp, #4]
   1a200:	mov	r0, r1
   1a204:	mov	r1, r2
   1a208:	bl	1a224 <__generate_code_for_body@@Base>
   1a20c:	mov	sp, fp
   1a210:	pop	{fp, pc}
   1a214:	andeq	r4, r0, r5, ror #25
   1a218:	andeq	r7, r1, r4, ror lr
   1a21c:	andeq	r7, r1, r8, ror #28
   1a220:	andeq	r7, r1, r0, asr #28

0001a224 <__generate_code_for_body@@Base>:
   1a224:	push	{fp, lr}
   1a228:	mov	fp, sp
   1a22c:	sub	sp, sp, #32
   1a230:	ldr	r2, [pc, #532]	; 1a44c <__generate_code_for_body@@Base+0x228>
   1a234:	add	r2, pc, r2
   1a238:	ldr	r3, [r2, #4]
   1a23c:	ldr	ip, [pc, #524]	; 1a450 <__generate_code_for_body@@Base+0x22c>
   1a240:	ldr	ip, [pc, ip]
   1a244:	adds	ip, ip, #1
   1a248:	adc	r3, r3, #0
   1a24c:	str	ip, [r2]
   1a250:	str	r3, [r2, #4]
   1a254:	str	r0, [sp, #16]
   1a258:	str	r1, [sp, #12]
   1a25c:	ldr	r0, [pc, #496]	; 1a454 <__generate_code_for_body@@Base+0x230>
   1a260:	add	r0, pc, r0
   1a264:	ldr	r1, [r0, #8]
   1a268:	ldr	r2, [r0, #12]
   1a26c:	adds	r1, r1, #1
   1a270:	adc	r2, r2, #0
   1a274:	str	r1, [r0, #8]
   1a278:	str	r2, [r0, #12]
   1a27c:	ldr	r0, [sp, #16]
   1a280:	str	r0, [fp, #-4]
   1a284:	ldr	r1, [sp, #12]
   1a288:	str	r1, [fp, #-8]
   1a28c:	movw	r2, #0
   1a290:	str	r2, [fp, #-12]
   1a294:	ldr	r0, [fp, #-8]
   1a298:	cmp	r0, #0
   1a29c:	mov	r1, r0
   1a2a0:	movwne	r1, #1
   1a2a4:	mov	r2, #24
   1a2a8:	cmp	r0, #0
   1a2ac:	movwne	r2, #16
   1a2b0:	ldr	r0, [pc, #416]	; 1a458 <__generate_code_for_body@@Base+0x234>
   1a2b4:	add	r0, pc, r0
   1a2b8:	ldr	r2, [r0, r2]!
   1a2bc:	ldr	r3, [r0, #4]
   1a2c0:	adds	r2, r2, #1
   1a2c4:	adc	r3, r3, #0
   1a2c8:	str	r2, [r0]
   1a2cc:	str	r3, [r0, #4]
   1a2d0:	tst	r1, #1
   1a2d4:	beq	1a414 <__generate_code_for_body@@Base+0x1f0>
   1a2d8:	ldr	r0, [pc, #380]	; 1a45c <__generate_code_for_body@@Base+0x238>
   1a2dc:	add	r0, pc, r0
   1a2e0:	mov	r1, #0
   1a2e4:	str	r1, [r0]
   1a2e8:	ldr	r0, [fp, #-8]
   1a2ec:	str	r0, [fp, #-12]
   1a2f0:	ldr	r0, [fp, #-8]
   1a2f4:	ldr	r0, [r0, #4]
   1a2f8:	str	r0, [fp, #-8]
   1a2fc:	ldr	r0, [fp, #-12]
   1a300:	ldr	r0, [r0]
   1a304:	cmp	r0, #3
   1a308:	str	r0, [sp, #8]
   1a30c:	beq	1a324 <__generate_code_for_body@@Base+0x100>
   1a310:	b	1a314 <__generate_code_for_body@@Base+0xf0>
   1a314:	ldr	r0, [sp, #8]
   1a318:	cmp	r0, #4
   1a31c:	beq	1a36c <__generate_code_for_body@@Base+0x148>
   1a320:	b	1a3b4 <__generate_code_for_body@@Base+0x190>
   1a324:	ldr	r0, [pc, #308]	; 1a460 <__generate_code_for_body@@Base+0x23c>
   1a328:	add	r0, pc, r0
   1a32c:	add	r1, r0, #4
   1a330:	ldr	r0, [pc, #300]	; 1a464 <__generate_code_for_body@@Base+0x240>
   1a334:	add	r0, pc, r0
   1a338:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a33c:	ldr	r0, [pc, #292]	; 1a468 <__generate_code_for_body@@Base+0x244>
   1a340:	add	r0, pc, r0
   1a344:	ldr	r1, [r0, #56]	; 0x38
   1a348:	ldr	lr, [r0, #60]	; 0x3c
   1a34c:	adds	r1, r1, #1
   1a350:	adc	lr, lr, #0
   1a354:	str	r1, [r0, #56]	; 0x38
   1a358:	str	lr, [r0, #60]	; 0x3c
   1a35c:	ldr	r0, [fp, #-4]
   1a360:	ldr	r1, [fp, #-12]
   1a364:	bl	1a76c <__generate_code_for_return@@Base>
   1a368:	b	1a3f0 <__generate_code_for_body@@Base+0x1cc>
   1a36c:	ldr	r0, [pc, #248]	; 1a46c <__generate_code_for_body@@Base+0x248>
   1a370:	add	r0, pc, r0
   1a374:	add	r1, r0, #8
   1a378:	ldr	r0, [pc, #240]	; 1a470 <__generate_code_for_body@@Base+0x24c>
   1a37c:	add	r0, pc, r0
   1a380:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a384:	ldr	r0, [pc, #232]	; 1a474 <__generate_code_for_body@@Base+0x250>
   1a388:	add	r0, pc, r0
   1a38c:	ldr	r1, [r0, #64]	; 0x40
   1a390:	ldr	lr, [r0, #68]	; 0x44
   1a394:	adds	r1, r1, #1
   1a398:	adc	lr, lr, #0
   1a39c:	str	r1, [r0, #64]	; 0x40
   1a3a0:	str	lr, [r0, #68]	; 0x44
   1a3a4:	ldr	r0, [fp, #-4]
   1a3a8:	ldr	r1, [fp, #-12]
   1a3ac:	bl	1a480 <__generate_code_for_if@@Base>
   1a3b0:	b	1a3f0 <__generate_code_for_body@@Base+0x1cc>
   1a3b4:	ldr	r0, [pc, #136]	; 1a444 <__generate_code_for_body@@Base+0x220>
   1a3b8:	add	r0, pc, r0
   1a3bc:	ldr	r1, [pc, #132]	; 1a448 <__generate_code_for_body@@Base+0x224>
   1a3c0:	add	r1, pc, r1
   1a3c4:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a3c8:	ldr	r0, [pc, #108]	; 1a43c <__generate_code_for_body@@Base+0x218>
   1a3cc:	add	r1, pc, r0
   1a3d0:	ldr	r0, [pc, #104]	; 1a440 <__generate_code_for_body@@Base+0x21c>
   1a3d4:	ldr	r0, [pc, r0]
   1a3d8:	ldr	r0, [r0]
   1a3dc:	bl	11fd4 <fprintf@plt>
   1a3e0:	movw	r1, #1
   1a3e4:	str	r0, [sp, #4]
   1a3e8:	mov	r0, r1
   1a3ec:	bl	11fa4 <exit@plt>
   1a3f0:	ldr	r0, [pc, #128]	; 1a478 <__generate_code_for_body@@Base+0x254>
   1a3f4:	add	r0, pc, r0
   1a3f8:	ldr	r1, [r0, #72]	; 0x48
   1a3fc:	ldr	r2, [r0, #76]	; 0x4c
   1a400:	adds	r1, r1, #1
   1a404:	adc	r2, r2, #0
   1a408:	str	r1, [r0, #72]	; 0x48
   1a40c:	str	r2, [r0, #76]	; 0x4c
   1a410:	b	1a294 <__generate_code_for_body@@Base+0x70>
   1a414:	ldr	r0, [pc, #96]	; 1a47c <__generate_code_for_body@@Base+0x258>
   1a418:	add	r0, pc, r0
   1a41c:	ldr	r1, [r0, #80]	; 0x50
   1a420:	ldr	r2, [r0, #84]	; 0x54
   1a424:	adds	r1, r1, #1
   1a428:	adc	r2, r2, #0
   1a42c:	str	r1, [r0, #80]	; 0x50
   1a430:	str	r2, [r0, #84]	; 0x54
   1a434:	mov	sp, fp
   1a438:	pop	{fp, pc}
   1a43c:	andeq	r4, r0, r7, asr #23
   1a440:	andeq	r6, r1, r4, ror #25
   1a444:	andeq	r6, r1, r0, lsr sp
   1a448:	andeq	r6, r1, r0, asr r9
   1a44c:	ldrdeq	r7, [r1], -r4
   1a450:	andeq	r7, r1, r8, asr #27
   1a454:	andeq	r7, r1, r8, lsr #27
   1a458:	andeq	r7, r1, r4, asr sp
   1a45c:	andeq	r6, r1, ip, lsl #28
   1a460:	andeq	r6, r1, r8, ror #19
   1a464:			; <UNDEFINED> instruction: 0x00016db4
   1a468:	andeq	r7, r1, r8, asr #25
   1a46c:	andeq	r6, r1, r0, lsr #19
   1a470:	andeq	r6, r1, ip, ror #26
   1a474:	andeq	r7, r1, r0, lsl #25
   1a478:	andeq	r7, r1, r4, lsl ip
   1a47c:	strdeq	r7, [r1], -r0

0001a480 <__generate_code_for_if@@Base>:
   1a480:	push	{fp, lr}
   1a484:	mov	fp, sp
   1a488:	sub	sp, sp, #32
   1a48c:	ldr	r2, [pc, #332]	; 1a5e0 <__generate_code_for_if@@Base+0x160>
   1a490:	add	r2, pc, r2
   1a494:	ldr	r3, [r2, #4]
   1a498:	ldr	ip, [pc, #324]	; 1a5e4 <__generate_code_for_if@@Base+0x164>
   1a49c:	ldr	ip, [pc, ip]
   1a4a0:	adds	ip, ip, #1
   1a4a4:	adc	r3, r3, #0
   1a4a8:	str	ip, [r2]
   1a4ac:	str	r3, [r2, #4]
   1a4b0:	str	r0, [sp, #12]
   1a4b4:	str	r1, [sp, #8]
   1a4b8:	ldr	r0, [sp, #12]
   1a4bc:	str	r0, [fp, #-4]
   1a4c0:	ldr	r1, [sp, #8]
   1a4c4:	str	r1, [fp, #-8]
   1a4c8:	ldr	r2, [fp, #-4]
   1a4cc:	ldr	r3, [r2, #8]
   1a4d0:	ldr	r2, [r2, #12]
   1a4d4:	str	r2, [sp, #20]
   1a4d8:	str	r3, [sp, #16]
   1a4dc:	ldr	r2, [fp, #-4]
   1a4e0:	ldr	r3, [r2, #8]
   1a4e4:	ldr	ip, [r2, #12]
   1a4e8:	adds	r3, r3, #1
   1a4ec:	adc	ip, ip, #0
   1a4f0:	str	r3, [r2, #8]
   1a4f4:	str	ip, [r2, #12]
   1a4f8:	ldr	r0, [fp, #-4]
   1a4fc:	ldr	r2, [fp, #-8]
   1a500:	ldr	r1, [r2, #8]
   1a504:	ldr	r2, [sp, #16]
   1a508:	ldr	r3, [sp, #20]
   1a50c:	bl	1a5f8 <__generate_code_for_if_expression@@Base>
   1a510:	ldr	r0, [fp, #-4]
   1a514:	ldr	r1, [fp, #-8]
   1a518:	ldr	r1, [r1, #12]
   1a51c:	bl	1a224 <__generate_code_for_body@@Base>
   1a520:	ldr	r0, [fp, #-4]
   1a524:	ldr	r0, [r0, #4]
   1a528:	ldr	r2, [sp, #16]
   1a52c:	ldr	r3, [sp, #20]
   1a530:	ldr	r1, [pc, #176]	; 1a5e8 <__generate_code_for_if@@Base+0x168>
   1a534:	add	r1, pc, r1
   1a538:	bl	11fd4 <fprintf@plt>
   1a53c:	ldr	r1, [fp, #-8]
   1a540:	ldr	r1, [r1, #16]
   1a544:	cmp	r1, #0
   1a548:	mov	r2, r1
   1a54c:	movwne	r2, #1
   1a550:	mov	r3, #16
   1a554:	cmp	r1, #0
   1a558:	movwne	r3, #8
   1a55c:	ldr	r1, [pc, #136]	; 1a5ec <__generate_code_for_if@@Base+0x16c>
   1a560:	add	r1, pc, r1
   1a564:	ldr	r3, [r1, r3]!
   1a568:	ldr	ip, [r1, #4]
   1a56c:	adds	r3, r3, #1
   1a570:	adc	ip, ip, #0
   1a574:	str	r3, [r1]
   1a578:	str	ip, [r1, #4]
   1a57c:	tst	r2, #1
   1a580:	str	r0, [sp, #4]
   1a584:	beq	1a5b8 <__generate_code_for_if@@Base+0x138>
   1a588:	ldr	r0, [pc, #96]	; 1a5f0 <__generate_code_for_if@@Base+0x170>
   1a58c:	add	r0, pc, r0
   1a590:	ldr	r1, [r0, #24]
   1a594:	ldr	r2, [r0, #28]
   1a598:	adds	r1, r1, #1
   1a59c:	adc	r2, r2, #0
   1a5a0:	str	r1, [r0, #24]
   1a5a4:	str	r2, [r0, #28]
   1a5a8:	ldr	r0, [fp, #-4]
   1a5ac:	ldr	r1, [fp, #-8]
   1a5b0:	ldr	r1, [r1, #16]
   1a5b4:	bl	1a224 <__generate_code_for_body@@Base>
   1a5b8:	ldr	r0, [pc, #52]	; 1a5f4 <__generate_code_for_if@@Base+0x174>
   1a5bc:	add	r0, pc, r0
   1a5c0:	ldr	r1, [r0, #32]
   1a5c4:	ldr	r2, [r0, #36]	; 0x24
   1a5c8:	adds	r1, r1, #1
   1a5cc:	adc	r2, r2, #0
   1a5d0:	str	r1, [r0, #32]
   1a5d4:	str	r2, [r0, #36]	; 0x24
   1a5d8:	mov	sp, fp
   1a5dc:	pop	{fp, pc}
   1a5e0:	ldrdeq	r7, [r1], -r8
   1a5e4:	andeq	r7, r1, ip, asr #23
   1a5e8:	andeq	r4, r0, lr, asr r9
   1a5ec:	andeq	r7, r1, r8, lsl #22
   1a5f0:	ldrdeq	r7, [r1], -ip
   1a5f4:	andeq	r7, r1, ip, lsr #21

0001a5f8 <__generate_code_for_if_expression@@Base>:
   1a5f8:	push	{r4, sl, fp, lr}
   1a5fc:	add	fp, sp, #8
   1a600:	sub	sp, sp, #40	; 0x28
   1a604:	ldr	ip, [pc, #312]	; 1a744 <__generate_code_for_if_expression@@Base+0x14c>
   1a608:	add	ip, pc, ip
   1a60c:	ldr	lr, [ip, #4]
   1a610:	ldr	r4, [pc, #304]	; 1a748 <__generate_code_for_if_expression@@Base+0x150>
   1a614:	ldr	r4, [pc, r4]
   1a618:	adds	r4, r4, #1
   1a61c:	adc	lr, lr, #0
   1a620:	str	r4, [ip]
   1a624:	str	lr, [ip, #4]
   1a628:	str	r1, [sp, #16]
   1a62c:	str	r3, [sp, #12]
   1a630:	str	r2, [sp, #8]
   1a634:	str	r0, [sp, #4]
   1a638:	ldr	r0, [pc, #268]	; 1a74c <__generate_code_for_if_expression@@Base+0x154>
   1a63c:	add	r0, pc, r0
   1a640:	mov	r1, #0
   1a644:	str	r1, [r0]
   1a648:	ldr	r0, [sp, #4]
   1a64c:	str	r0, [fp, #-12]
   1a650:	ldr	r1, [sp, #16]
   1a654:	str	r1, [fp, #-16]
   1a658:	ldr	r2, [sp, #12]
   1a65c:	str	r2, [sp, #28]
   1a660:	ldr	r3, [sp, #8]
   1a664:	str	r3, [sp, #24]
   1a668:	ldr	ip, [fp, #-16]
   1a66c:	str	ip, [sp, #20]
   1a670:	ldr	ip, [sp, #20]
   1a674:	ldr	ip, [ip, #16]
   1a678:	cmp	ip, #8
   1a67c:	bne	1a6d4 <__generate_code_for_if_expression@@Base+0xdc>
   1a680:	b	1a684 <__generate_code_for_if_expression@@Base+0x8c>
   1a684:	ldr	r0, [pc, #196]	; 1a750 <__generate_code_for_if_expression@@Base+0x158>
   1a688:	add	r0, pc, r0
   1a68c:	add	r1, r0, #4
   1a690:	ldr	r0, [pc, #188]	; 1a754 <__generate_code_for_if_expression@@Base+0x15c>
   1a694:	add	r0, pc, r0
   1a698:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a69c:	ldr	r0, [pc, #180]	; 1a758 <__generate_code_for_if_expression@@Base+0x160>
   1a6a0:	add	r0, pc, r0
   1a6a4:	ldr	r1, [r0, #24]
   1a6a8:	ldr	lr, [r0, #28]
   1a6ac:	adds	r1, r1, #1
   1a6b0:	adc	lr, lr, #0
   1a6b4:	str	r1, [r0, #24]
   1a6b8:	str	lr, [r0, #28]
   1a6bc:	ldr	r0, [fp, #-12]
   1a6c0:	ldr	r1, [sp, #20]
   1a6c4:	ldr	r2, [sp, #24]
   1a6c8:	ldr	r3, [sp, #28]
   1a6cc:	bl	1a994 <__generate_code_for_unary_boolean_expression@@Base>
   1a6d0:	b	1a71c <__generate_code_for_if_expression@@Base+0x124>
   1a6d4:	ldr	r0, [pc, #128]	; 1a75c <__generate_code_for_if_expression@@Base+0x164>
   1a6d8:	add	r0, pc, r0
   1a6dc:	ldr	r1, [pc, #124]	; 1a760 <__generate_code_for_if_expression@@Base+0x168>
   1a6e0:	add	r1, pc, r1
   1a6e4:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a6e8:	ldr	r0, [pc, #116]	; 1a764 <__generate_code_for_if_expression@@Base+0x16c>
   1a6ec:	add	r0, pc, r0
   1a6f0:	ldr	r1, [r0, #32]
   1a6f4:	ldr	lr, [r0, #36]	; 0x24
   1a6f8:	adds	r1, r1, #1
   1a6fc:	adc	lr, lr, #0
   1a700:	str	r1, [r0, #32]
   1a704:	str	lr, [r0, #36]	; 0x24
   1a708:	ldr	r0, [fp, #-12]
   1a70c:	ldr	r1, [sp, #20]
   1a710:	ldr	r2, [sp, #24]
   1a714:	ldr	r3, [sp, #28]
   1a718:	bl	1ab7c <__generate_code_for_binary_boolean_expression@@Base>
   1a71c:	ldr	r0, [pc, #68]	; 1a768 <__generate_code_for_if_expression@@Base+0x170>
   1a720:	add	r0, pc, r0
   1a724:	ldr	r1, [r0, #40]	; 0x28
   1a728:	ldr	r2, [r0, #44]	; 0x2c
   1a72c:	adds	r1, r1, #1
   1a730:	adc	r2, r2, #0
   1a734:	str	r1, [r0, #40]	; 0x28
   1a738:	str	r2, [r0, #44]	; 0x2c
   1a73c:	sub	sp, fp, #8
   1a740:	pop	{r4, sl, fp, pc}
   1a744:	muleq	r1, r0, sl
   1a748:	andeq	r7, r1, r4, lsl #21
   1a74c:			; <UNDEFINED> instruction: 0x00016ab0
   1a750:	muleq	r1, r4, r6
   1a754:	andeq	r6, r1, r8, asr sl
   1a758:	strdeq	r7, [r1], -r8
   1a75c:	andeq	r6, r1, r4, lsl sl
   1a760:	andeq	r6, r1, ip, lsr r6
   1a764:	andeq	r7, r1, ip, lsr #19
   1a768:	andeq	r7, r1, r8, ror r9

0001a76c <__generate_code_for_return@@Base>:
   1a76c:	push	{fp, lr}
   1a770:	mov	fp, sp
   1a774:	sub	sp, sp, #32
   1a778:	ldr	r2, [pc, #340]	; 1a8d4 <__generate_code_for_return@@Base+0x168>
   1a77c:	add	r2, pc, r2
   1a780:	ldr	r3, [r2, #4]
   1a784:	ldr	ip, [pc, #332]	; 1a8d8 <__generate_code_for_return@@Base+0x16c>
   1a788:	ldr	ip, [pc, ip]
   1a78c:	adds	ip, ip, #1
   1a790:	adc	r3, r3, #0
   1a794:	str	ip, [r2]
   1a798:	str	r3, [r2, #4]
   1a79c:	str	r0, [sp, #16]
   1a7a0:	str	r1, [sp, #12]
   1a7a4:	ldr	r0, [pc, #304]	; 1a8dc <__generate_code_for_return@@Base+0x170>
   1a7a8:	add	r0, pc, r0
   1a7ac:	mov	r1, #0
   1a7b0:	str	r1, [r0]
   1a7b4:	ldr	r0, [sp, #16]
   1a7b8:	str	r0, [fp, #-4]
   1a7bc:	ldr	r1, [sp, #12]
   1a7c0:	str	r1, [fp, #-8]
   1a7c4:	ldr	r2, [fp, #-8]
   1a7c8:	ldr	r2, [r2, #8]
   1a7cc:	str	r2, [fp, #-12]
   1a7d0:	ldr	r2, [fp, #-4]
   1a7d4:	ldr	r0, [r2, #4]
   1a7d8:	ldr	r1, [pc, #256]	; 1a8e0 <__generate_code_for_return@@Base+0x174>
   1a7dc:	add	r1, pc, r1
   1a7e0:	bl	11fd4 <fprintf@plt>
   1a7e4:	ldr	r1, [fp, #-12]
   1a7e8:	ldr	r1, [r1]
   1a7ec:	cmp	r1, #1
   1a7f0:	str	r0, [sp, #8]
   1a7f4:	bne	1a844 <__generate_code_for_return@@Base+0xd8>
   1a7f8:	b	1a7fc <__generate_code_for_return@@Base+0x90>
   1a7fc:	ldr	r0, [pc, #224]	; 1a8e4 <__generate_code_for_return@@Base+0x178>
   1a800:	add	r0, pc, r0
   1a804:	add	r1, r0, #4
   1a808:	ldr	r0, [pc, #216]	; 1a8e8 <__generate_code_for_return@@Base+0x17c>
   1a80c:	add	r0, pc, r0
   1a810:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a814:	ldr	r0, [pc, #208]	; 1a8ec <__generate_code_for_return@@Base+0x180>
   1a818:	add	r0, pc, r0
   1a81c:	ldr	r1, [r0, #24]
   1a820:	ldr	lr, [r0, #28]
   1a824:	adds	r1, r1, #1
   1a828:	adc	lr, lr, #0
   1a82c:	str	r1, [r0, #24]
   1a830:	str	lr, [r0, #28]
   1a834:	ldr	r0, [fp, #-4]
   1a838:	ldr	r1, [fp, #-12]
   1a83c:	bl	1a8f4 <__generate_code_for_int@@Base>
   1a840:	b	1a880 <__generate_code_for_return@@Base+0x114>
   1a844:	ldr	r0, [pc, #128]	; 1a8cc <__generate_code_for_return@@Base+0x160>
   1a848:	add	r0, pc, r0
   1a84c:	ldr	r1, [pc, #124]	; 1a8d0 <__generate_code_for_return@@Base+0x164>
   1a850:	add	r1, pc, r1
   1a854:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1a858:	ldr	r0, [pc, #100]	; 1a8c4 <__generate_code_for_return@@Base+0x158>
   1a85c:	add	r1, pc, r0
   1a860:	ldr	r0, [pc, #96]	; 1a8c8 <__generate_code_for_return@@Base+0x15c>
   1a864:	ldr	r0, [pc, r0]
   1a868:	ldr	r0, [r0]
   1a86c:	bl	11fd4 <fprintf@plt>
   1a870:	movw	r1, #1
   1a874:	str	r0, [sp, #4]
   1a878:	mov	r0, r1
   1a87c:	bl	11fa4 <exit@plt>
   1a880:	ldr	r0, [pc, #56]	; 1a8c0 <__generate_code_for_return@@Base+0x154>
   1a884:	add	r1, pc, r0
   1a888:	ldr	r0, [pc, #96]	; 1a8f0 <__generate_code_for_return@@Base+0x184>
   1a88c:	add	r0, pc, r0
   1a890:	ldr	r2, [r0, #32]
   1a894:	ldr	r3, [r0, #36]	; 0x24
   1a898:	adds	r2, r2, #1
   1a89c:	adc	r3, r3, #0
   1a8a0:	str	r2, [r0, #32]
   1a8a4:	str	r3, [r0, #36]	; 0x24
   1a8a8:	ldr	r0, [fp, #-4]
   1a8ac:	ldr	r0, [r0, #4]
   1a8b0:	bl	11fd4 <fprintf@plt>
   1a8b4:	str	r0, [sp]
   1a8b8:	mov	sp, fp
   1a8bc:	pop	{fp, pc}
   1a8c0:	andeq	r4, r0, sp, asr #12
   1a8c4:	andeq	r4, r0, pc, asr #12
   1a8c8:	andeq	r6, r1, r4, asr r8
   1a8cc:	andeq	r6, r1, r8, lsr #17
   1a8d0:	ldrdeq	r6, [r1], -r4
   1a8d4:	andeq	r7, r1, ip, asr #18
   1a8d8:	andeq	r7, r1, r0, asr #18
   1a8dc:	andeq	r6, r1, r8, asr #18
   1a8e0:	andeq	r4, r0, r5, asr #13
   1a8e4:	andeq	r6, r1, r4, lsr #10
   1a8e8:	andeq	r6, r1, r4, ror #17
   1a8ec:			; <UNDEFINED> instruction: 0x000178b0
   1a8f0:	andeq	r7, r1, ip, lsr r8

0001a8f4 <__generate_code_for_int@@Base>:
   1a8f4:	push	{fp, lr}
   1a8f8:	mov	fp, sp
   1a8fc:	sub	sp, sp, #24
   1a900:	ldr	r2, [pc, #128]	; 1a988 <__generate_code_for_int@@Base+0x94>
   1a904:	add	r2, pc, r2
   1a908:	ldr	r3, [r2, #4]
   1a90c:	ldr	ip, [pc, #120]	; 1a98c <__generate_code_for_int@@Base+0x98>
   1a910:	ldr	ip, [pc, ip]
   1a914:	adds	ip, ip, #1
   1a918:	adc	r3, r3, #0
   1a91c:	str	ip, [r2]
   1a920:	str	r3, [r2, #4]
   1a924:	str	r0, [sp, #12]
   1a928:	str	r1, [sp, #8]
   1a92c:	ldr	r0, [pc, #80]	; 1a984 <__generate_code_for_int@@Base+0x90>
   1a930:	add	r1, pc, r0
   1a934:	ldr	r0, [pc, #84]	; 1a990 <__generate_code_for_int@@Base+0x9c>
   1a938:	add	r0, pc, r0
   1a93c:	ldr	r2, [r0, #8]
   1a940:	ldr	r3, [r0, #12]
   1a944:	adds	r2, r2, #1
   1a948:	adc	r3, r3, #0
   1a94c:	str	r2, [r0, #8]
   1a950:	str	r3, [r0, #12]
   1a954:	ldr	r0, [sp, #12]
   1a958:	str	r0, [fp, #-4]
   1a95c:	ldr	r2, [sp, #8]
   1a960:	str	r2, [fp, #-8]
   1a964:	ldr	r3, [fp, #-4]
   1a968:	ldr	r0, [r3, #4]
   1a96c:	ldr	r3, [fp, #-8]
   1a970:	ldr	r2, [r3, #8]
   1a974:	bl	11fd4 <fprintf@plt>
   1a978:	str	r0, [sp, #4]
   1a97c:	mov	sp, fp
   1a980:	pop	{fp, pc}
   1a984:	andeq	r4, r0, sl, lsr #11
   1a988:	andeq	r7, r1, ip, ror #15
   1a98c:	andeq	r7, r1, r0, ror #15
   1a990:			; <UNDEFINED> instruction: 0x000177b8

0001a994 <__generate_code_for_unary_boolean_expression@@Base>:
   1a994:	push	{r4, sl, fp, lr}
   1a998:	add	fp, sp, #8
   1a99c:	sub	sp, sp, #56	; 0x38
   1a9a0:	ldr	ip, [pc, #428]	; 1ab54 <__generate_code_for_unary_boolean_expression@@Base+0x1c0>
   1a9a4:	add	ip, pc, ip
   1a9a8:	ldr	lr, [ip, #4]
   1a9ac:	ldr	r4, [pc, #420]	; 1ab58 <__generate_code_for_unary_boolean_expression@@Base+0x1c4>
   1a9b0:	ldr	r4, [pc, r4]
   1a9b4:	adds	r4, r4, #1
   1a9b8:	adc	lr, lr, #0
   1a9bc:	str	r4, [ip]
   1a9c0:	str	lr, [ip, #4]
   1a9c4:	str	r1, [sp, #32]
   1a9c8:	str	r3, [sp, #28]
   1a9cc:	str	r2, [sp, #24]
   1a9d0:	str	r0, [sp, #20]
   1a9d4:	ldr	r0, [pc, #384]	; 1ab5c <__generate_code_for_unary_boolean_expression@@Base+0x1c8>
   1a9d8:	add	r0, pc, r0
   1a9dc:	mov	r1, #0
   1a9e0:	str	r1, [r0]
   1a9e4:	ldr	r0, [sp, #20]
   1a9e8:	str	r0, [fp, #-12]
   1a9ec:	ldr	r1, [sp, #32]
   1a9f0:	str	r1, [fp, #-16]
   1a9f4:	ldr	r2, [sp, #28]
   1a9f8:	str	r2, [fp, #-20]	; 0xffffffec
   1a9fc:	ldr	r3, [sp, #24]
   1aa00:	str	r3, [fp, #-24]	; 0xffffffe8
   1aa04:	ldr	ip, [fp, #-16]
   1aa08:	ldr	ip, [ip, #8]
   1aa0c:	str	ip, [fp, #-28]	; 0xffffffe4
   1aa10:	ldr	ip, [fp, #-12]
   1aa14:	ldr	r0, [ip, #4]
   1aa18:	ldr	r1, [pc, #320]	; 1ab60 <__generate_code_for_unary_boolean_expression@@Base+0x1cc>
   1aa1c:	add	r1, pc, r1
   1aa20:	bl	11fd4 <fprintf@plt>
   1aa24:	ldr	r1, [fp, #-12]
   1aa28:	ldr	r1, [r1, #4]
   1aa2c:	ldr	r2, [pc, #304]	; 1ab64 <__generate_code_for_unary_boolean_expression@@Base+0x1d0>
   1aa30:	add	r2, pc, r2
   1aa34:	str	r0, [sp, #16]
   1aa38:	mov	r0, r1
   1aa3c:	mov	r1, r2
   1aa40:	bl	11fd4 <fprintf@plt>
   1aa44:	ldr	r1, [fp, #-12]
   1aa48:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1aa4c:	str	r0, [sp, #12]
   1aa50:	mov	r0, r1
   1aa54:	mov	r1, r2
   1aa58:	bl	1a8f4 <__generate_code_for_int@@Base>
   1aa5c:	ldr	r0, [fp, #-16]
   1aa60:	ldr	r0, [r0, #16]
   1aa64:	cmp	r0, #8
   1aa68:	bne	1aadc <__generate_code_for_unary_boolean_expression@@Base+0x148>
   1aa6c:	b	1aa70 <__generate_code_for_unary_boolean_expression@@Base+0xdc>
   1aa70:	ldr	r0, [pc, #200]	; 1ab40 <__generate_code_for_unary_boolean_expression@@Base+0x1ac>
   1aa74:	add	r0, pc, r0
   1aa78:	ldr	r1, [pc, #232]	; 1ab68 <__generate_code_for_unary_boolean_expression@@Base+0x1d4>
   1aa7c:	add	r1, pc, r1
   1aa80:	add	r1, r1, #4
   1aa84:	ldr	r2, [pc, #224]	; 1ab6c <__generate_code_for_unary_boolean_expression@@Base+0x1d8>
   1aa88:	add	r2, pc, r2
   1aa8c:	str	r0, [sp, #8]
   1aa90:	mov	r0, r2
   1aa94:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1aa98:	ldr	r0, [pc, #208]	; 1ab70 <__generate_code_for_unary_boolean_expression@@Base+0x1dc>
   1aa9c:	add	r0, pc, r0
   1aaa0:	ldr	r1, [r0, #24]
   1aaa4:	ldr	r2, [r0, #28]
   1aaa8:	adds	r1, r1, #1
   1aaac:	adc	r2, r2, #0
   1aab0:	str	r1, [r0, #24]
   1aab4:	str	r2, [r0, #28]
   1aab8:	ldr	r0, [fp, #-12]
   1aabc:	ldr	r0, [r0, #4]
   1aac0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1aac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aac8:	ldr	r1, [pc, #164]	; 1ab74 <__generate_code_for_unary_boolean_expression@@Base+0x1e0>
   1aacc:	add	r1, pc, r1
   1aad0:	bl	11fd4 <fprintf@plt>
   1aad4:	str	r0, [sp, #4]
   1aad8:	b	1ab18 <__generate_code_for_unary_boolean_expression@@Base+0x184>
   1aadc:	ldr	r0, [pc, #104]	; 1ab4c <__generate_code_for_unary_boolean_expression@@Base+0x1b8>
   1aae0:	add	r0, pc, r0
   1aae4:	ldr	r1, [pc, #100]	; 1ab50 <__generate_code_for_unary_boolean_expression@@Base+0x1bc>
   1aae8:	add	r1, pc, r1
   1aaec:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1aaf0:	ldr	r0, [pc, #76]	; 1ab44 <__generate_code_for_unary_boolean_expression@@Base+0x1b0>
   1aaf4:	add	r1, pc, r0
   1aaf8:	ldr	r0, [pc, #72]	; 1ab48 <__generate_code_for_unary_boolean_expression@@Base+0x1b4>
   1aafc:	ldr	r0, [pc, r0]
   1ab00:	ldr	r0, [r0]
   1ab04:	bl	11fd4 <fprintf@plt>
   1ab08:	movw	r1, #1
   1ab0c:	str	r0, [sp]
   1ab10:	mov	r0, r1
   1ab14:	bl	11fa4 <exit@plt>
   1ab18:	ldr	r0, [pc, #88]	; 1ab78 <__generate_code_for_unary_boolean_expression@@Base+0x1e4>
   1ab1c:	add	r0, pc, r0
   1ab20:	ldr	r1, [r0, #32]
   1ab24:	ldr	r2, [r0, #36]	; 0x24
   1ab28:	adds	r1, r1, #1
   1ab2c:	adc	r2, r2, #0
   1ab30:	str	r1, [r0, #32]
   1ab34:	str	r2, [r0, #36]	; 0x24
   1ab38:	sub	sp, fp, #8
   1ab3c:	pop	{r4, sl, fp, pc}
   1ab40:	muleq	r0, r4, r4
   1ab44:	andeq	r4, r0, r3, ror r4
   1ab48:			; <UNDEFINED> instruction: 0x000165bc
   1ab4c:	andeq	r6, r1, r4, lsl r6
   1ab50:	andeq	r6, r1, r4, asr #4
   1ab54:	andeq	r7, r1, r4, ror #14
   1ab58:	andeq	r7, r1, r8, asr r7
   1ab5c:	andeq	r6, r1, ip, lsl r7
   1ab60:	andeq	r4, r0, fp, ror #10
   1ab64:	andeq	r4, r0, lr, lsr #9
   1ab68:			; <UNDEFINED> instruction: 0x000162b0
   1ab6c:	andeq	r6, r1, ip, ror #12
   1ab70:	andeq	r7, r1, ip, ror #12
   1ab74:	andeq	r4, r0, ip, lsr r4
   1ab78:	andeq	r7, r1, ip, ror #11

0001ab7c <__generate_code_for_binary_boolean_expression@@Base>:
   1ab7c:	push	{r4, sl, fp, lr}
   1ab80:	add	fp, sp, #8
   1ab84:	sub	sp, sp, #120	; 0x78
   1ab88:	ldr	ip, [pc, #1268]	; 1b084 <__generate_code_for_binary_boolean_expression@@Base+0x508>
   1ab8c:	add	ip, pc, ip
   1ab90:	ldr	lr, [ip, #4]
   1ab94:	ldr	r4, [pc, #1260]	; 1b088 <__generate_code_for_binary_boolean_expression@@Base+0x50c>
   1ab98:	ldr	r4, [pc, r4]
   1ab9c:	adds	r4, r4, #1
   1aba0:	adc	lr, lr, #0
   1aba4:	str	r4, [ip]
   1aba8:	str	lr, [ip, #4]
   1abac:	str	r1, [fp, #-36]	; 0xffffffdc
   1abb0:	str	r3, [fp, #-40]	; 0xffffffd8
   1abb4:	str	r2, [fp, #-44]	; 0xffffffd4
   1abb8:	str	r0, [fp, #-48]	; 0xffffffd0
   1abbc:	ldr	r0, [pc, #1224]	; 1b08c <__generate_code_for_binary_boolean_expression@@Base+0x510>
   1abc0:	add	r0, pc, r0
   1abc4:	mov	r1, #0
   1abc8:	str	r1, [r0]
   1abcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1abd0:	str	r0, [fp, #-12]
   1abd4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1abd8:	str	r1, [fp, #-16]
   1abdc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1abe0:	str	r2, [fp, #-20]	; 0xffffffec
   1abe4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1abe8:	str	r3, [fp, #-24]	; 0xffffffe8
   1abec:	ldr	ip, [fp, #-16]
   1abf0:	ldr	ip, [ip, #8]
   1abf4:	str	ip, [fp, #-28]	; 0xffffffe4
   1abf8:	ldr	ip, [fp, #-16]
   1abfc:	ldr	ip, [ip, #12]
   1ac00:	str	ip, [fp, #-32]	; 0xffffffe0
   1ac04:	ldr	ip, [fp, #-12]
   1ac08:	ldr	r0, [ip, #4]
   1ac0c:	ldr	r1, [pc, #1148]	; 1b090 <__generate_code_for_binary_boolean_expression@@Base+0x514>
   1ac10:	add	r1, pc, r1
   1ac14:	bl	11fd4 <fprintf@plt>
   1ac18:	ldr	r1, [fp, #-12]
   1ac1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ac20:	str	r0, [fp, #-52]	; 0xffffffcc
   1ac24:	mov	r0, r1
   1ac28:	mov	r1, r2
   1ac2c:	bl	1a8f4 <__generate_code_for_int@@Base>
   1ac30:	ldr	r0, [fp, #-12]
   1ac34:	ldr	r0, [r0, #4]
   1ac38:	ldr	r1, [pc, #1108]	; 1b094 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   1ac3c:	add	r1, pc, r1
   1ac40:	str	r1, [fp, #-56]	; 0xffffffc8
   1ac44:	bl	11fd4 <fprintf@plt>
   1ac48:	ldr	r1, [fp, #-12]
   1ac4c:	ldr	r1, [r1, #4]
   1ac50:	ldr	r2, [pc, #1088]	; 1b098 <__generate_code_for_binary_boolean_expression@@Base+0x51c>
   1ac54:	add	r2, pc, r2
   1ac58:	str	r0, [fp, #-60]	; 0xffffffc4
   1ac5c:	mov	r0, r1
   1ac60:	mov	r1, r2
   1ac64:	bl	11fd4 <fprintf@plt>
   1ac68:	ldr	r1, [fp, #-12]
   1ac6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ac70:	str	r0, [sp, #64]	; 0x40
   1ac74:	mov	r0, r1
   1ac78:	mov	r1, r2
   1ac7c:	bl	1a8f4 <__generate_code_for_int@@Base>
   1ac80:	ldr	r0, [fp, #-12]
   1ac84:	ldr	r0, [r0, #4]
   1ac88:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1ac8c:	bl	11fd4 <fprintf@plt>
   1ac90:	ldr	r1, [fp, #-12]
   1ac94:	ldr	r1, [r1, #4]
   1ac98:	ldr	r2, [pc, #1020]	; 1b09c <__generate_code_for_binary_boolean_expression@@Base+0x520>
   1ac9c:	add	r2, pc, r2
   1aca0:	str	r0, [sp, #60]	; 0x3c
   1aca4:	mov	r0, r1
   1aca8:	mov	r1, r2
   1acac:	bl	11fd4 <fprintf@plt>
   1acb0:	ldr	r1, [fp, #-16]
   1acb4:	ldr	r1, [r1, #16]
   1acb8:	cmp	r1, #7
   1acbc:	str	r0, [sp, #56]	; 0x38
   1acc0:	str	r1, [sp, #52]	; 0x34
   1acc4:	bhi	1aff8 <__generate_code_for_binary_boolean_expression@@Base+0x47c>
   1acc8:	add	r0, pc, #8
   1accc:	ldr	r1, [sp, #52]	; 0x34
   1acd0:	ldr	r2, [r0, r1, lsl #2]
   1acd4:	add	pc, r0, r2
   1acd8:	andeq	r0, r0, r0, lsr #32
   1acdc:	andeq	r0, r0, ip, lsl #1
   1ace0:	strdeq	r0, [r0], -r8
   1ace4:	andeq	r0, r0, r4, ror #2
   1ace8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1acec:	andeq	r0, r0, ip, lsl #4
   1acf0:	andeq	r0, r0, r8, asr #4
   1acf4:			; <UNDEFINED> instruction: 0x000002b4
   1acf8:	ldr	r0, [pc, #880]	; 1b070 <__generate_code_for_binary_boolean_expression@@Base+0x4f4>
   1acfc:	add	r0, pc, r0
   1ad00:	ldr	r1, [pc, #920]	; 1b0a0 <__generate_code_for_binary_boolean_expression@@Base+0x524>
   1ad04:	add	r1, pc, r1
   1ad08:	add	r1, r1, #4
   1ad0c:	ldr	r2, [pc, #912]	; 1b0a4 <__generate_code_for_binary_boolean_expression@@Base+0x528>
   1ad10:	add	r2, pc, r2
   1ad14:	str	r0, [sp, #48]	; 0x30
   1ad18:	mov	r0, r2
   1ad1c:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1ad20:	ldr	r0, [pc, #896]	; 1b0a8 <__generate_code_for_binary_boolean_expression@@Base+0x52c>
   1ad24:	add	r0, pc, r0
   1ad28:	ldr	r1, [r0, #80]	; 0x50
   1ad2c:	ldr	r2, [r0, #84]	; 0x54
   1ad30:	adds	r1, r1, #1
   1ad34:	adc	r2, r2, #0
   1ad38:	str	r1, [r0, #80]	; 0x50
   1ad3c:	str	r2, [r0, #84]	; 0x54
   1ad40:	ldr	r0, [fp, #-12]
   1ad44:	ldr	r0, [r0, #4]
   1ad48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ad4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad50:	ldr	r1, [pc, #852]	; 1b0ac <__generate_code_for_binary_boolean_expression@@Base+0x530>
   1ad54:	add	r1, pc, r1
   1ad58:	bl	11fd4 <fprintf@plt>
   1ad5c:	str	r0, [sp, #44]	; 0x2c
   1ad60:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1ad64:	ldr	r0, [pc, #768]	; 1b06c <__generate_code_for_binary_boolean_expression@@Base+0x4f0>
   1ad68:	add	r0, pc, r0
   1ad6c:	ldr	r1, [pc, #828]	; 1b0b0 <__generate_code_for_binary_boolean_expression@@Base+0x534>
   1ad70:	add	r1, pc, r1
   1ad74:	add	r1, r1, #8
   1ad78:	ldr	r2, [pc, #820]	; 1b0b4 <__generate_code_for_binary_boolean_expression@@Base+0x538>
   1ad7c:	add	r2, pc, r2
   1ad80:	str	r0, [sp, #40]	; 0x28
   1ad84:	mov	r0, r2
   1ad88:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1ad8c:	ldr	r0, [pc, #804]	; 1b0b8 <__generate_code_for_binary_boolean_expression@@Base+0x53c>
   1ad90:	add	r0, pc, r0
   1ad94:	ldr	r1, [r0, #88]	; 0x58
   1ad98:	ldr	r2, [r0, #92]	; 0x5c
   1ad9c:	adds	r1, r1, #1
   1ada0:	adc	r2, r2, #0
   1ada4:	str	r1, [r0, #88]	; 0x58
   1ada8:	str	r2, [r0, #92]	; 0x5c
   1adac:	ldr	r0, [fp, #-12]
   1adb0:	ldr	r0, [r0, #4]
   1adb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1adb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1adbc:	ldr	r1, [pc, #760]	; 1b0bc <__generate_code_for_binary_boolean_expression@@Base+0x540>
   1adc0:	add	r1, pc, r1
   1adc4:	bl	11fd4 <fprintf@plt>
   1adc8:	str	r0, [sp, #36]	; 0x24
   1adcc:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1add0:	ldr	r0, [pc, #656]	; 1b068 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   1add4:	add	r0, pc, r0
   1add8:	ldr	r1, [pc, #736]	; 1b0c0 <__generate_code_for_binary_boolean_expression@@Base+0x544>
   1addc:	add	r1, pc, r1
   1ade0:	add	r1, r1, #12
   1ade4:	ldr	r2, [pc, #728]	; 1b0c4 <__generate_code_for_binary_boolean_expression@@Base+0x548>
   1ade8:	add	r2, pc, r2
   1adec:	str	r0, [sp, #32]
   1adf0:	mov	r0, r2
   1adf4:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1adf8:	ldr	r0, [pc, #712]	; 1b0c8 <__generate_code_for_binary_boolean_expression@@Base+0x54c>
   1adfc:	add	r0, pc, r0
   1ae00:	ldr	r1, [r0, #96]	; 0x60
   1ae04:	ldr	r2, [r0, #100]	; 0x64
   1ae08:	adds	r1, r1, #1
   1ae0c:	adc	r2, r2, #0
   1ae10:	str	r1, [r0, #96]	; 0x60
   1ae14:	str	r2, [r0, #100]	; 0x64
   1ae18:	ldr	r0, [fp, #-12]
   1ae1c:	ldr	r0, [r0, #4]
   1ae20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ae24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae28:	ldr	r1, [pc, #668]	; 1b0cc <__generate_code_for_binary_boolean_expression@@Base+0x550>
   1ae2c:	add	r1, pc, r1
   1ae30:	bl	11fd4 <fprintf@plt>
   1ae34:	str	r0, [sp, #28]
   1ae38:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1ae3c:	ldr	r0, [pc, #544]	; 1b064 <__generate_code_for_binary_boolean_expression@@Base+0x4e8>
   1ae40:	add	r0, pc, r0
   1ae44:	ldr	r1, [pc, #644]	; 1b0d0 <__generate_code_for_binary_boolean_expression@@Base+0x554>
   1ae48:	add	r1, pc, r1
   1ae4c:	add	r1, r1, #16
   1ae50:	ldr	r2, [pc, #636]	; 1b0d4 <__generate_code_for_binary_boolean_expression@@Base+0x558>
   1ae54:	add	r2, pc, r2
   1ae58:	str	r0, [sp, #24]
   1ae5c:	mov	r0, r2
   1ae60:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1ae64:	ldr	r0, [pc, #620]	; 1b0d8 <__generate_code_for_binary_boolean_expression@@Base+0x55c>
   1ae68:	add	r0, pc, r0
   1ae6c:	ldr	r1, [r0, #104]	; 0x68
   1ae70:	ldr	r2, [r0, #108]	; 0x6c
   1ae74:	adds	r1, r1, #1
   1ae78:	adc	r2, r2, #0
   1ae7c:	str	r1, [r0, #104]	; 0x68
   1ae80:	str	r2, [r0, #108]	; 0x6c
   1ae84:	ldr	r0, [fp, #-12]
   1ae88:	ldr	r0, [r0, #4]
   1ae8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ae90:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae94:	ldr	r1, [pc, #576]	; 1b0dc <__generate_code_for_binary_boolean_expression@@Base+0x560>
   1ae98:	add	r1, pc, r1
   1ae9c:	bl	11fd4 <fprintf@plt>
   1aea0:	str	r0, [sp, #20]
   1aea4:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1aea8:	ldr	r0, [pc, #560]	; 1b0e0 <__generate_code_for_binary_boolean_expression@@Base+0x564>
   1aeac:	add	r0, pc, r0
   1aeb0:	add	r1, r0, #20
   1aeb4:	ldr	r0, [pc, #552]	; 1b0e4 <__generate_code_for_binary_boolean_expression@@Base+0x568>
   1aeb8:	add	r0, pc, r0
   1aebc:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1aec0:	ldr	r0, [pc, #544]	; 1b0e8 <__generate_code_for_binary_boolean_expression@@Base+0x56c>
   1aec4:	add	r0, pc, r0
   1aec8:	ldr	r1, [r0, #112]	; 0x70
   1aecc:	ldr	lr, [r0, #116]	; 0x74
   1aed0:	adds	r1, r1, #1
   1aed4:	adc	lr, lr, #0
   1aed8:	str	r1, [r0, #112]	; 0x70
   1aedc:	str	lr, [r0, #116]	; 0x74
   1aee0:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1aee4:	ldr	r0, [pc, #512]	; 1b0ec <__generate_code_for_binary_boolean_expression@@Base+0x570>
   1aee8:	add	r0, pc, r0
   1aeec:	add	r1, r0, #24
   1aef0:	ldr	r0, [pc, #504]	; 1b0f0 <__generate_code_for_binary_boolean_expression@@Base+0x574>
   1aef4:	add	r0, pc, r0
   1aef8:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1aefc:	ldr	r0, [pc, #496]	; 1b0f4 <__generate_code_for_binary_boolean_expression@@Base+0x578>
   1af00:	add	r0, pc, r0
   1af04:	ldr	r1, [r0, #120]	; 0x78
   1af08:	ldr	lr, [r0, #124]	; 0x7c
   1af0c:	adds	r1, r1, #1
   1af10:	adc	lr, lr, #0
   1af14:	str	r1, [r0, #120]	; 0x78
   1af18:	str	lr, [r0, #124]	; 0x7c
   1af1c:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1af20:	ldr	r0, [pc, #312]	; 1b060 <__generate_code_for_binary_boolean_expression@@Base+0x4e4>
   1af24:	add	r0, pc, r0
   1af28:	ldr	r1, [pc, #456]	; 1b0f8 <__generate_code_for_binary_boolean_expression@@Base+0x57c>
   1af2c:	add	r1, pc, r1
   1af30:	add	r1, r1, #28
   1af34:	ldr	r2, [pc, #448]	; 1b0fc <__generate_code_for_binary_boolean_expression@@Base+0x580>
   1af38:	add	r2, pc, r2
   1af3c:	str	r0, [sp, #16]
   1af40:	mov	r0, r2
   1af44:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1af48:	ldr	r0, [pc, #432]	; 1b100 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   1af4c:	add	r0, pc, r0
   1af50:	ldr	r1, [r0, #128]	; 0x80
   1af54:	ldr	r2, [r0, #132]	; 0x84
   1af58:	adds	r1, r1, #1
   1af5c:	adc	r2, r2, #0
   1af60:	str	r1, [r0, #128]	; 0x80
   1af64:	str	r2, [r0, #132]	; 0x84
   1af68:	ldr	r0, [fp, #-12]
   1af6c:	ldr	r0, [r0, #4]
   1af70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1af74:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af78:	ldr	r1, [pc, #388]	; 1b104 <__generate_code_for_binary_boolean_expression@@Base+0x588>
   1af7c:	add	r1, pc, r1
   1af80:	bl	11fd4 <fprintf@plt>
   1af84:	str	r0, [sp, #12]
   1af88:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1af8c:	ldr	r0, [pc, #200]	; 1b05c <__generate_code_for_binary_boolean_expression@@Base+0x4e0>
   1af90:	add	r0, pc, r0
   1af94:	ldr	r1, [pc, #364]	; 1b108 <__generate_code_for_binary_boolean_expression@@Base+0x58c>
   1af98:	add	r1, pc, r1
   1af9c:	add	r1, r1, #32
   1afa0:	ldr	r2, [pc, #356]	; 1b10c <__generate_code_for_binary_boolean_expression@@Base+0x590>
   1afa4:	add	r2, pc, r2
   1afa8:	str	r0, [sp, #8]
   1afac:	mov	r0, r2
   1afb0:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1afb4:	ldr	r0, [pc, #340]	; 1b110 <__generate_code_for_binary_boolean_expression@@Base+0x594>
   1afb8:	add	r0, pc, r0
   1afbc:	ldr	r1, [r0, #136]	; 0x88
   1afc0:	ldr	r2, [r0, #140]	; 0x8c
   1afc4:	adds	r1, r1, #1
   1afc8:	adc	r2, r2, #0
   1afcc:	str	r1, [r0, #136]	; 0x88
   1afd0:	str	r2, [r0, #140]	; 0x8c
   1afd4:	ldr	r0, [fp, #-12]
   1afd8:	ldr	r0, [r0, #4]
   1afdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1afe0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afe4:	ldr	r1, [pc, #296]	; 1b114 <__generate_code_for_binary_boolean_expression@@Base+0x598>
   1afe8:	add	r1, pc, r1
   1afec:	bl	11fd4 <fprintf@plt>
   1aff0:	str	r0, [sp, #4]
   1aff4:	b	1b034 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   1aff8:	ldr	r0, [pc, #124]	; 1b07c <__generate_code_for_binary_boolean_expression@@Base+0x500>
   1affc:	add	r0, pc, r0
   1b000:	ldr	r1, [pc, #120]	; 1b080 <__generate_code_for_binary_boolean_expression@@Base+0x504>
   1b004:	add	r1, pc, r1
   1b008:	bl	1b11c <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   1b00c:	ldr	r0, [pc, #96]	; 1b074 <__generate_code_for_binary_boolean_expression@@Base+0x4f8>
   1b010:	add	r1, pc, r0
   1b014:	ldr	r0, [pc, #92]	; 1b078 <__generate_code_for_binary_boolean_expression@@Base+0x4fc>
   1b018:	ldr	r0, [pc, r0]
   1b01c:	ldr	r0, [r0]
   1b020:	bl	11fd4 <fprintf@plt>
   1b024:	movw	r1, #1
   1b028:	str	r0, [sp]
   1b02c:	mov	r0, r1
   1b030:	bl	11fa4 <exit@plt>
   1b034:	ldr	r0, [pc, #220]	; 1b118 <__generate_code_for_binary_boolean_expression@@Base+0x59c>
   1b038:	add	r0, pc, r0
   1b03c:	ldr	r1, [r0, #144]	; 0x90
   1b040:	ldr	r2, [r0, #148]	; 0x94
   1b044:	adds	r1, r1, #1
   1b048:	adc	r2, r2, #0
   1b04c:	str	r1, [r0, #144]	; 0x90
   1b050:	str	r2, [r0, #148]	; 0x94
   1b054:	sub	sp, fp, #8
   1b058:	pop	{r4, sl, fp, pc}
   1b05c:	andeq	r3, r0, r4, asr #31
   1b060:	andeq	r4, r0, sp, lsl r0
   1b064:	andeq	r4, r0, lr, ror #1
   1b068:	andeq	r4, r0, r7, asr #2
   1b06c:	andeq	r4, r0, r0, lsr #3
   1b070:	strdeq	r4, [r0], -r9
   1b074:	andeq	r3, r0, r7, asr pc
   1b078:	andeq	r6, r1, r0, lsr #1
   1b07c:	strdeq	r6, [r1], -ip
   1b080:	andeq	r5, r1, r4, lsr sp
   1b084:	andeq	r7, r1, ip, lsr #11
   1b088:	andeq	r7, r1, r0, lsr #11
   1b08c:	andeq	r6, r1, r8, lsr r5
   1b090:	muleq	r0, r1, r2
   1b094:	andeq	r3, r0, r2, lsl #18
   1b098:	andeq	r4, r0, sl, lsl #5
   1b09c:	andeq	r4, r0, ip, asr #4
   1b0a0:	andeq	r6, r1, r4, lsr r0
   1b0a4:	andeq	r6, r1, r8, ror #7
   1b0a8:	andeq	r7, r1, r4, lsl r4
   1b0ac:	andeq	r4, r0, r1, lsr #3
   1b0b0:	andeq	r5, r1, r8, asr #31
   1b0b4:	andeq	r6, r1, ip, ror r3
   1b0b8:	andeq	r7, r1, r8, lsr #7
   1b0bc:	andeq	r4, r0, r8, asr #2
   1b0c0:	andeq	r5, r1, ip, asr pc
   1b0c4:	andeq	r6, r1, r0, lsl r3
   1b0c8:	andeq	r7, r1, ip, lsr r3
   1b0cc:	andeq	r4, r0, pc, ror #1
   1b0d0:	strdeq	r5, [r1], -r0
   1b0d4:	andeq	r6, r1, r4, lsr #5
   1b0d8:	ldrdeq	r7, [r1], -r0
   1b0dc:	muleq	r0, r6, r0
   1b0e0:	andeq	r5, r1, ip, lsl #29
   1b0e4:	andeq	r6, r1, r0, asr #4
   1b0e8:	andeq	r7, r1, r4, ror r2
   1b0ec:	andeq	r5, r1, r0, asr lr
   1b0f0:	andeq	r6, r1, r4, lsl #4
   1b0f4:	andeq	r7, r1, r8, lsr r2
   1b0f8:	andeq	r5, r1, ip, lsl #28
   1b0fc:	andeq	r6, r1, r0, asr #3
   1b100:	andeq	r7, r1, ip, ror #3
   1b104:	andeq	r3, r0, r5, asr #31
   1b108:	andeq	r5, r1, r0, lsr #27
   1b10c:	andeq	r6, r1, r4, asr r1
   1b110:	andeq	r7, r1, r0, lsl #3
   1b114:	andeq	r3, r0, ip, ror #30
   1b118:	andeq	r7, r1, r0, lsl #2
   1b11c:	sub	sp, sp, #12
   1b120:	ldr	r0, [r0]
   1b124:	cmn	r0, #1
   1b128:	str	r1, [sp, #8]
   1b12c:	str	r0, [sp, #4]
   1b130:	beq	1b170 <__generate_code_for_binary_boolean_expression@@Base+0x5f4>
   1b134:	ldr	r0, [sp, #8]
   1b138:	ldr	r1, [sp, #4]
   1b13c:	add	r2, r0, r1, lsl #2
   1b140:	ldr	r2, [r2]
   1b144:	movw	r3, #0
   1b148:	cmp	r2, r3
   1b14c:	str	r2, [sp]
   1b150:	beq	1b170 <__generate_code_for_binary_boolean_expression@@Base+0x5f4>
   1b154:	ldr	r0, [sp]
   1b158:	ldr	r1, [r0]
   1b15c:	ldr	r2, [r0, #4]
   1b160:	adds	r1, r1, #1
   1b164:	adc	r2, r2, #0
   1b168:	str	r1, [r0]
   1b16c:	str	r2, [r0, #4]
   1b170:	add	sp, sp, #12
   1b174:	bx	lr
   1b178:	push	{r4, sl, fp, lr}
   1b17c:	add	fp, sp, #8
   1b180:	sub	sp, sp, #40	; 0x28
   1b184:	movw	r0, #0
   1b188:	str	r0, [fp, #-12]
   1b18c:	b	1b190 <__generate_code_for_binary_boolean_expression@@Base+0x614>
   1b190:	ldr	r0, [fp, #-12]
   1b194:	ldr	r1, [pc, #244]	; 1b290 <__generate_code_for_binary_boolean_expression@@Base+0x714>
   1b198:	add	r1, pc, r1
   1b19c:	movw	r2, #24
   1b1a0:	mul	r2, r0, r2
   1b1a4:	add	r1, r1, r2
   1b1a8:	ldr	r2, [r1]
   1b1ac:	ldr	r3, [r1, #4]
   1b1b0:	ldr	ip, [r1, #8]
   1b1b4:	str	r0, [fp, #-16]
   1b1b8:	mov	r0, r2
   1b1bc:	str	r1, [fp, #-20]	; 0xffffffec
   1b1c0:	mov	r1, r3
   1b1c4:	mov	r2, ip
   1b1c8:	bl	1b58c <__generate_code_for_binary_boolean_expression@@Base+0xa10>
   1b1cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b1d0:	ldr	r1, [r0, #12]
   1b1d4:	ldr	r2, [r0, #16]
   1b1d8:	ldr	r3, [r0, #20]
   1b1dc:	movw	ip, #0
   1b1e0:	cmp	ip, r1
   1b1e4:	str	r1, [sp, #24]
   1b1e8:	str	r2, [sp, #20]
   1b1ec:	str	r3, [sp, #16]
   1b1f0:	str	ip, [sp, #12]
   1b1f4:	bge	1b26c <__generate_code_for_binary_boolean_expression@@Base+0x6f0>
   1b1f8:	ldr	r0, [sp, #12]
   1b1fc:	add	r1, r0, r0, lsl #2
   1b200:	ldr	r2, [sp, #20]
   1b204:	ldr	r1, [r2, r1, lsl #2]!
   1b208:	ldr	r3, [r2, #4]
   1b20c:	ldr	ip, [r2, #8]
   1b210:	ldr	lr, [r2, #16]
   1b214:	ldrb	r2, [r2, #12]
   1b218:	mov	r4, sp
   1b21c:	str	lr, [r4]
   1b220:	str	r0, [sp, #8]
   1b224:	mov	r0, r1
   1b228:	mov	r1, r3
   1b22c:	str	r2, [sp, #4]
   1b230:	mov	r2, ip
   1b234:	ldr	r3, [sp, #4]
   1b238:	bl	1bcf0 <__generate_code_for_binary_boolean_expression@@Base+0x1174>
   1b23c:	ldr	r0, [sp, #16]
   1b240:	ldr	r1, [sp, #8]
   1b244:	add	r2, r0, r1, lsl #3
   1b248:	ldr	r0, [r2]
   1b24c:	ldr	r1, [r2, #4]
   1b250:	bl	1c5a4 <__generate_code_for_binary_boolean_expression@@Base+0x1a28>
   1b254:	ldr	r0, [sp, #8]
   1b258:	add	r1, r0, #1
   1b25c:	ldr	r2, [sp, #24]
   1b260:	cmp	r1, r2
   1b264:	str	r1, [sp, #12]
   1b268:	blt	1b1f8 <__generate_code_for_binary_boolean_expression@@Base+0x67c>
   1b26c:	bl	1cd20 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   1b270:	bl	1da8c <__generate_code_for_binary_boolean_expression@@Base+0x2f10>
   1b274:	ldr	lr, [fp, #-16]
   1b278:	add	r0, lr, #1
   1b27c:	cmp	r0, #1
   1b280:	str	r0, [fp, #-12]
   1b284:	blt	1b190 <__generate_code_for_binary_boolean_expression@@Base+0x614>
   1b288:	sub	sp, fp, #8
   1b28c:	pop	{r4, sl, fp, pc}
   1b290:	andeq	r5, r1, r0, asr sp
   1b294:	push	{fp, lr}
   1b298:	mov	fp, sp
   1b29c:	bl	1b178 <__generate_code_for_binary_boolean_expression@@Base+0x5fc>
   1b2a0:	ldr	lr, [pc, #648]	; 1b530 <__generate_code_for_binary_boolean_expression@@Base+0x9b4>
   1b2a4:	add	lr, pc, lr
   1b2a8:	mov	r0, #0
   1b2ac:	str	r0, [lr, #12]
   1b2b0:	str	r0, [lr, #8]
   1b2b4:	str	r0, [lr, #4]
   1b2b8:	str	r0, [lr]
   1b2bc:	ldr	lr, [pc, #624]	; 1b534 <__generate_code_for_binary_boolean_expression@@Base+0x9b8>
   1b2c0:	add	lr, pc, lr
   1b2c4:	str	r0, [lr, #12]
   1b2c8:	str	r0, [lr, #8]
   1b2cc:	str	r0, [lr, #4]
   1b2d0:	str	r0, [lr]
   1b2d4:	ldr	lr, [pc, #604]	; 1b538 <__generate_code_for_binary_boolean_expression@@Base+0x9bc>
   1b2d8:	add	lr, pc, lr
   1b2dc:	str	r0, [lr, #12]
   1b2e0:	str	r0, [lr, #8]
   1b2e4:	str	r0, [lr, #4]
   1b2e8:	str	r0, [lr]
   1b2ec:	ldr	lr, [pc, #584]	; 1b53c <__generate_code_for_binary_boolean_expression@@Base+0x9c0>
   1b2f0:	add	lr, pc, lr
   1b2f4:	str	r0, [lr, #12]
   1b2f8:	str	r0, [lr, #8]
   1b2fc:	str	r0, [lr, #4]
   1b300:	str	r0, [lr]
   1b304:	ldr	lr, [pc, #564]	; 1b540 <__generate_code_for_binary_boolean_expression@@Base+0x9c4>
   1b308:	add	lr, pc, lr
   1b30c:	str	r0, [lr, #36]	; 0x24
   1b310:	str	r0, [lr, #32]
   1b314:	str	r0, [lr, #28]
   1b318:	str	r0, [lr, #24]
   1b31c:	str	r0, [lr, #20]
   1b320:	str	r0, [lr, #16]
   1b324:	str	r0, [lr, #12]
   1b328:	str	r0, [lr, #8]
   1b32c:	str	r0, [lr, #4]
   1b330:	str	r0, [lr]
   1b334:	ldr	lr, [pc, #520]	; 1b544 <__generate_code_for_binary_boolean_expression@@Base+0x9c8>
   1b338:	add	lr, pc, lr
   1b33c:	str	r0, [lr, #12]
   1b340:	str	r0, [lr, #8]
   1b344:	str	r0, [lr, #4]
   1b348:	str	r0, [lr]
   1b34c:	ldr	lr, [pc, #500]	; 1b548 <__generate_code_for_binary_boolean_expression@@Base+0x9cc>
   1b350:	add	lr, pc, lr
   1b354:	str	r0, [lr, #84]	; 0x54
   1b358:	str	r0, [lr, #80]	; 0x50
   1b35c:	str	r0, [lr, #76]	; 0x4c
   1b360:	str	r0, [lr, #72]	; 0x48
   1b364:	str	r0, [lr, #68]	; 0x44
   1b368:	str	r0, [lr, #64]	; 0x40
   1b36c:	str	r0, [lr, #60]	; 0x3c
   1b370:	str	r0, [lr, #56]	; 0x38
   1b374:	str	r0, [lr, #52]	; 0x34
   1b378:	str	r0, [lr, #48]	; 0x30
   1b37c:	str	r0, [lr, #44]	; 0x2c
   1b380:	str	r0, [lr, #40]	; 0x28
   1b384:	str	r0, [lr, #36]	; 0x24
   1b388:	str	r0, [lr, #32]
   1b38c:	str	r0, [lr, #28]
   1b390:	str	r0, [lr, #24]
   1b394:	str	r0, [lr, #20]
   1b398:	str	r0, [lr, #16]
   1b39c:	str	r0, [lr, #12]
   1b3a0:	str	r0, [lr, #8]
   1b3a4:	str	r0, [lr, #4]
   1b3a8:	str	r0, [lr]
   1b3ac:	ldr	lr, [pc, #408]	; 1b54c <__generate_code_for_binary_boolean_expression@@Base+0x9d0>
   1b3b0:	add	lr, pc, lr
   1b3b4:	str	r0, [lr, #36]	; 0x24
   1b3b8:	str	r0, [lr, #32]
   1b3bc:	str	r0, [lr, #28]
   1b3c0:	str	r0, [lr, #24]
   1b3c4:	str	r0, [lr, #20]
   1b3c8:	str	r0, [lr, #16]
   1b3cc:	str	r0, [lr, #12]
   1b3d0:	str	r0, [lr, #8]
   1b3d4:	str	r0, [lr, #4]
   1b3d8:	str	r0, [lr]
   1b3dc:	ldr	lr, [pc, #364]	; 1b550 <__generate_code_for_binary_boolean_expression@@Base+0x9d4>
   1b3e0:	add	lr, pc, lr
   1b3e4:	str	r0, [lr, #44]	; 0x2c
   1b3e8:	str	r0, [lr, #40]	; 0x28
   1b3ec:	str	r0, [lr, #36]	; 0x24
   1b3f0:	str	r0, [lr, #32]
   1b3f4:	str	r0, [lr, #28]
   1b3f8:	str	r0, [lr, #24]
   1b3fc:	str	r0, [lr, #20]
   1b400:	str	r0, [lr, #16]
   1b404:	str	r0, [lr, #12]
   1b408:	str	r0, [lr, #8]
   1b40c:	str	r0, [lr, #4]
   1b410:	str	r0, [lr]
   1b414:	ldr	lr, [pc, #312]	; 1b554 <__generate_code_for_binary_boolean_expression@@Base+0x9d8>
   1b418:	add	lr, pc, lr
   1b41c:	str	r0, [lr, #36]	; 0x24
   1b420:	str	r0, [lr, #32]
   1b424:	str	r0, [lr, #28]
   1b428:	str	r0, [lr, #24]
   1b42c:	str	r0, [lr, #20]
   1b430:	str	r0, [lr, #16]
   1b434:	str	r0, [lr, #12]
   1b438:	str	r0, [lr, #8]
   1b43c:	str	r0, [lr, #4]
   1b440:	str	r0, [lr]
   1b444:	ldr	lr, [pc, #268]	; 1b558 <__generate_code_for_binary_boolean_expression@@Base+0x9dc>
   1b448:	add	lr, pc, lr
   1b44c:	str	r0, [lr, #12]
   1b450:	str	r0, [lr, #8]
   1b454:	str	r0, [lr, #4]
   1b458:	str	r0, [lr]
   1b45c:	ldr	lr, [pc, #248]	; 1b55c <__generate_code_for_binary_boolean_expression@@Base+0x9e0>
   1b460:	add	lr, pc, lr
   1b464:	str	r0, [lr, #36]	; 0x24
   1b468:	str	r0, [lr, #32]
   1b46c:	str	r0, [lr, #28]
   1b470:	str	r0, [lr, #24]
   1b474:	str	r0, [lr, #20]
   1b478:	str	r0, [lr, #16]
   1b47c:	str	r0, [lr, #12]
   1b480:	str	r0, [lr, #8]
   1b484:	str	r0, [lr, #4]
   1b488:	str	r0, [lr]
   1b48c:	ldr	lr, [pc, #204]	; 1b560 <__generate_code_for_binary_boolean_expression@@Base+0x9e4>
   1b490:	add	lr, pc, lr
   1b494:	str	r0, [lr, #148]	; 0x94
   1b498:	str	r0, [lr, #144]	; 0x90
   1b49c:	str	r0, [lr, #140]	; 0x8c
   1b4a0:	str	r0, [lr, #136]	; 0x88
   1b4a4:	str	r0, [lr, #132]	; 0x84
   1b4a8:	str	r0, [lr, #128]	; 0x80
   1b4ac:	str	r0, [lr, #124]	; 0x7c
   1b4b0:	str	r0, [lr, #120]	; 0x78
   1b4b4:	str	r0, [lr, #116]	; 0x74
   1b4b8:	str	r0, [lr, #112]	; 0x70
   1b4bc:	str	r0, [lr, #108]	; 0x6c
   1b4c0:	str	r0, [lr, #104]	; 0x68
   1b4c4:	str	r0, [lr, #100]	; 0x64
   1b4c8:	str	r0, [lr, #96]	; 0x60
   1b4cc:	str	r0, [lr, #92]	; 0x5c
   1b4d0:	str	r0, [lr, #88]	; 0x58
   1b4d4:	str	r0, [lr, #84]	; 0x54
   1b4d8:	str	r0, [lr, #80]	; 0x50
   1b4dc:	str	r0, [lr, #76]	; 0x4c
   1b4e0:	str	r0, [lr, #72]	; 0x48
   1b4e4:	str	r0, [lr, #68]	; 0x44
   1b4e8:	str	r0, [lr, #64]	; 0x40
   1b4ec:	str	r0, [lr, #60]	; 0x3c
   1b4f0:	str	r0, [lr, #56]	; 0x38
   1b4f4:	str	r0, [lr, #52]	; 0x34
   1b4f8:	str	r0, [lr, #48]	; 0x30
   1b4fc:	str	r0, [lr, #44]	; 0x2c
   1b500:	str	r0, [lr, #40]	; 0x28
   1b504:	str	r0, [lr, #36]	; 0x24
   1b508:	str	r0, [lr, #32]
   1b50c:	str	r0, [lr, #28]
   1b510:	str	r0, [lr, #24]
   1b514:	str	r0, [lr, #20]
   1b518:	str	r0, [lr, #16]
   1b51c:	str	r0, [lr, #12]
   1b520:	str	r0, [lr, #8]
   1b524:	str	r0, [lr, #4]
   1b528:	str	r0, [lr]
   1b52c:	pop	{fp, pc}
   1b530:	andeq	r6, r1, r4, ror #25
   1b534:	ldrdeq	r6, [r1], -r8
   1b538:	ldrdeq	r6, [r1], -r0
   1b53c:	andeq	r6, r1, r8, asr #25
   1b540:	andeq	r6, r1, r0, asr #25
   1b544:			; <UNDEFINED> instruction: 0x00016cb8
   1b548:			; <UNDEFINED> instruction: 0x00016cb8
   1b54c:			; <UNDEFINED> instruction: 0x00016cb8
   1b550:			; <UNDEFINED> instruction: 0x00016cb8
   1b554:			; <UNDEFINED> instruction: 0x00016cb0
   1b558:	andeq	r6, r1, r8, lsr #25
   1b55c:	andeq	r6, r1, r8, lsr #25
   1b560:	andeq	r6, r1, r8, lsr #25
   1b564:	push	{fp, lr}
   1b568:	mov	fp, sp
   1b56c:	ldr	r0, [pc, #16]	; 1b584 <__generate_code_for_binary_boolean_expression@@Base+0xa08>
   1b570:	add	r0, pc, r0
   1b574:	ldr	r1, [pc, #12]	; 1b588 <__generate_code_for_binary_boolean_expression@@Base+0xa0c>
   1b578:	add	r1, pc, r1
   1b57c:	bl	1df3c <__gcov_flush@@Base+0xb4>
   1b580:	pop	{fp, pc}
   1b584:			; <UNDEFINED> instruction: 0xfffffc00
   1b588:			; <UNDEFINED> instruction: 0xfffffd14
   1b58c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b590:	add	fp, sp, #28
   1b594:	sub	sp, sp, #36	; 0x24
   1b598:	mov	r9, r1
   1b59c:	mov	r6, r0
   1b5a0:	add	r0, sp, #28
   1b5a4:	add	r1, sp, #32
   1b5a8:	mov	r8, r2
   1b5ac:	bl	1e2e8 <__gcov_flush@@Base+0x460>
   1b5b0:	cmp	r0, #0
   1b5b4:	beq	1b5f8 <__generate_code_for_binary_boolean_expression@@Base+0xa7c>
   1b5b8:	mov	r4, r0
   1b5bc:	mov	r0, r6
   1b5c0:	ldr	r5, [sp, #32]
   1b5c4:	bl	11fb0 <strlen@plt>
   1b5c8:	add	r0, r5, r0
   1b5cc:	add	r0, r0, #2
   1b5d0:	bl	11f68 <malloc@plt>
   1b5d4:	mov	r7, r0
   1b5d8:	ldr	r0, [sp, #28]
   1b5dc:	mov	r1, r6
   1b5e0:	mov	r2, r4
   1b5e4:	str	r0, [sp]
   1b5e8:	mov	r0, r7
   1b5ec:	mov	r3, r5
   1b5f0:	bl	1e37c <__gcov_flush@@Base+0x4f4>
   1b5f4:	b	1b604 <__generate_code_for_binary_boolean_expression@@Base+0xa88>
   1b5f8:	mov	r0, r6
   1b5fc:	bl	11f20 <strdup@plt>
   1b600:	mov	r7, r0
   1b604:	ldr	r0, [pc, #1548]	; 1bc18 <__generate_code_for_binary_boolean_expression@@Base+0x109c>
   1b608:	ldr	r6, [pc, #1548]	; 1bc1c <__generate_code_for_binary_boolean_expression@@Base+0x10a0>
   1b60c:	mov	r1, #2
   1b610:	add	r0, pc, r0
   1b614:	add	r6, pc, r6
   1b618:	str	r7, [r0]
   1b61c:	mov	r0, r7
   1b620:	mov	r4, #0
   1b624:	strb	r4, [r6]
   1b628:	bl	11f50 <open64@plt>
   1b62c:	ldr	r5, [pc, #1516]	; 1bc20 <__generate_code_for_binary_boolean_expression@@Base+0x10a4>
   1b630:	cmn	r0, #1
   1b634:	add	r5, pc, r5
   1b638:	str	r0, [r5]
   1b63c:	beq	1b64c <__generate_code_for_binary_boolean_expression@@Base+0xad0>
   1b640:	ldr	r6, [pc, #1500]	; 1bc24 <__generate_code_for_binary_boolean_expression@@Base+0x10a8>
   1b644:	add	r6, pc, r6
   1b648:	b	1b6a8 <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   1b64c:	mov	r0, #1
   1b650:	strb	r0, [r6]
   1b654:	ldr	r0, [pc, #1508]	; 1bc40 <__generate_code_for_binary_boolean_expression@@Base+0x10c4>
   1b658:	mov	r1, #66	; 0x42
   1b65c:	mov	r2, #420	; 0x1a4
   1b660:	ldr	r0, [pc, r0]
   1b664:	bl	11f50 <open64@plt>
   1b668:	ldr	r6, [pc, #1492]	; 1bc44 <__generate_code_for_binary_boolean_expression@@Base+0x10c8>
   1b66c:	cmn	r0, #1
   1b670:	str	r0, [r5]
   1b674:	add	r6, pc, r6
   1b678:	bne	1b6a8 <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   1b67c:	ldr	r0, [pc, #1476]	; 1bc48 <__generate_code_for_binary_boolean_expression@@Base+0x10cc>
   1b680:	ldr	r0, [pc, r0]
   1b684:	bl	1e050 <__gcov_flush@@Base+0x1c8>
   1b688:	ldr	r0, [pc, #1468]	; 1bc4c <__generate_code_for_binary_boolean_expression@@Base+0x10d0>
   1b68c:	mov	r1, #66	; 0x42
   1b690:	mov	r2, #420	; 0x1a4
   1b694:	ldr	r0, [pc, r0]
   1b698:	bl	11f50 <open64@plt>
   1b69c:	cmn	r0, #1
   1b6a0:	str	r0, [r5]
   1b6a4:	beq	1bbd0 <__generate_code_for_binary_boolean_expression@@Base+0x1054>
   1b6a8:	str	r9, [sp, #20]
   1b6ac:	bl	1e11c <__gcov_flush@@Base+0x294>
   1b6b0:	ldr	r0, [pc, #1392]	; 1bc28 <__generate_code_for_binary_boolean_expression@@Base+0x10ac>
   1b6b4:	mov	r1, r6
   1b6b8:	ldr	r0, [pc, r0]
   1b6bc:	bl	11eb4 <fdopen@plt>
   1b6c0:	ldr	r5, [pc, #1380]	; 1bc2c <__generate_code_for_binary_boolean_expression@@Base+0x10b0>
   1b6c4:	ldr	r9, [pc, #1380]	; 1bc30 <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   1b6c8:	ldr	r1, [pc, #1380]	; 1bc34 <__generate_code_for_binary_boolean_expression@@Base+0x10b8>
   1b6cc:	ldr	sl, [pc, #1380]	; 1bc38 <__generate_code_for_binary_boolean_expression@@Base+0x10bc>
   1b6d0:	add	r5, pc, r5
   1b6d4:	add	r9, pc, r9
   1b6d8:	add	r1, pc, r1
   1b6dc:	add	sl, pc, sl
   1b6e0:	str	r4, [r5]
   1b6e4:	str	r4, [r5, #4]
   1b6e8:	str	r4, [r9]
   1b6ec:	str	r4, [r9, #4]
   1b6f0:	str	r0, [r1]
   1b6f4:	str	r4, [sl]
   1b6f8:	ldr	r6, [pc, #1340]	; 1bc3c <__generate_code_for_binary_boolean_expression@@Base+0x10c0>
   1b6fc:	ldr	r2, [pc, #1292]	; 1bc10 <__generate_code_for_binary_boolean_expression@@Base+0x1094>
   1b700:	str	r8, [sp, #24]
   1b704:	add	r6, pc, r6
   1b708:	ldrb	r1, [r6]
   1b70c:	mov	r6, r2
   1b710:	cmp	r1, #1
   1b714:	bne	1b73c <__generate_code_for_binary_boolean_expression@@Base+0xbc0>
   1b718:	mov	r0, #131072	; 0x20000
   1b71c:	mov	r4, #131072	; 0x20000
   1b720:	bl	11f68 <malloc@plt>
   1b724:	mov	r1, #0
   1b728:	str	r4, [r5]
   1b72c:	str	r1, [r5, #4]
   1b730:	mov	r8, r0
   1b734:	str	r0, [sl]
   1b738:	b	1b8cc <__generate_code_for_binary_boolean_expression@@Base+0xd50>
   1b73c:	mov	r1, #0
   1b740:	mov	r2, #2
   1b744:	mov	r8, #0
   1b748:	bl	1207c <fseek@plt>
   1b74c:	ldr	r0, [pc, #1288]	; 1bc5c <__generate_code_for_binary_boolean_expression@@Base+0x10e0>
   1b750:	ldr	r0, [pc, r0]
   1b754:	bl	11f08 <ftell@plt>
   1b758:	mov	r2, r0
   1b75c:	ldr	r0, [pc, #1276]	; 1bc60 <__generate_code_for_binary_boolean_expression@@Base+0x10e4>
   1b760:	asr	r3, r2, #31
   1b764:	add	r0, pc, r0
   1b768:	cmp	r2, #0
   1b76c:	strd	r2, [r0]
   1b770:	beq	1b840 <__generate_code_for_binary_boolean_expression@@Base+0xcc4>
   1b774:	ldr	r0, [pc, #1256]	; 1bc64 <__generate_code_for_binary_boolean_expression@@Base+0x10e8>
   1b778:	mov	r1, r2
   1b77c:	mov	r2, #3
   1b780:	mov	r3, #1
   1b784:	ldr	r0, [pc, r0]
   1b788:	str	r8, [sp, #8]
   1b78c:	str	r8, [sp, #12]
   1b790:	str	r0, [sp]
   1b794:	mov	r0, #0
   1b798:	bl	11efc <mmap64@plt>
   1b79c:	ldr	r1, [pc, #1220]	; 1bc68 <__generate_code_for_binary_boolean_expression@@Base+0x10ec>
   1b7a0:	cmn	r0, #1
   1b7a4:	add	r1, pc, r1
   1b7a8:	str	r0, [r1]
   1b7ac:	beq	1b808 <__generate_code_for_binary_boolean_expression@@Base+0xc8c>
   1b7b0:	ldr	r1, [pc, #1232]	; 1bc88 <__generate_code_for_binary_boolean_expression@@Base+0x110c>
   1b7b4:	add	r1, pc, r1
   1b7b8:	ldrb	r1, [r1]
   1b7bc:	cmp	r1, #0
   1b7c0:	beq	1b7cc <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   1b7c4:	mov	r8, r0
   1b7c8:	b	1b8d8 <__generate_code_for_binary_boolean_expression@@Base+0xd5c>
   1b7cc:	ldr	ip, [r9, #4]
   1b7d0:	ldr	r5, [pc, #1236]	; 1bcac <__generate_code_for_binary_boolean_expression@@Base+0x1130>
   1b7d4:	mov	r4, r0
   1b7d8:	lsr	r2, r6, #16
   1b7dc:	ldr	r5, [pc, r5]
   1b7e0:	lsr	r1, r6, #24
   1b7e4:	lsr	r3, r6, #8
   1b7e8:	strb	r6, [r4, r5]!
   1b7ec:	strb	r2, [r4, #2]
   1b7f0:	adds	r2, r5, #4
   1b7f4:	adc	ip, ip, #0
   1b7f8:	strb	r1, [r4, #3]
   1b7fc:	strb	r3, [r4, #1]
   1b800:	stm	r9, {r2, ip}
   1b804:	b	1b9a0 <__generate_code_for_binary_boolean_expression@@Base+0xe24>
   1b808:	bl	11fe0 <__errno_location@plt>
   1b80c:	ldr	r1, [pc, #1112]	; 1bc6c <__generate_code_for_binary_boolean_expression@@Base+0x10f0>
   1b810:	ldr	r1, [pc, r1]
   1b814:	ldr	r0, [r0]
   1b818:	ldr	r4, [r1]
   1b81c:	ldr	r7, [pc, #1100]	; 1bc70 <__generate_code_for_binary_boolean_expression@@Base+0x10f4>
   1b820:	ldr	r7, [pc, r7]
   1b824:	bl	11f80 <strerror@plt>
   1b828:	ldr	r1, [pc, #1092]	; 1bc74 <__generate_code_for_binary_boolean_expression@@Base+0x10f8>
   1b82c:	mov	r3, r0
   1b830:	mov	r0, r4
   1b834:	add	r1, pc, r1
   1b838:	mov	r2, r7
   1b83c:	bl	11fd4 <fprintf@plt>
   1b840:	str	r8, [r5]
   1b844:	str	r8, [r5, #4]
   1b848:	ldr	r0, [pc, #1064]	; 1bc78 <__generate_code_for_binary_boolean_expression@@Base+0x10fc>
   1b84c:	mov	r2, #16646144	; 0xfe0000
   1b850:	orr	r2, r2, #-16777216	; 0xff000000
   1b854:	add	r0, pc, r0
   1b858:	mvn	r3, #0
   1b85c:	str	r8, [r0]
   1b860:	ldr	r1, [pc, #1044]	; 1bc7c <__generate_code_for_binary_boolean_expression@@Base+0x1100>
   1b864:	mov	r0, #1
   1b868:	add	r1, pc, r1
   1b86c:	strb	r0, [r1]
   1b870:	ldr	r0, [r9, #4]
   1b874:	ldr	r1, [pc, #1028]	; 1bc80 <__generate_code_for_binary_boolean_expression@@Base+0x1104>
   1b878:	eor	r3, r0, r3
   1b87c:	ldr	r1, [pc, r1]
   1b880:	eor	r2, r1, r2
   1b884:	orrs	r2, r2, r3
   1b888:	beq	1b8c8 <__generate_code_for_binary_boolean_expression@@Base+0xd4c>
   1b88c:	ldr	r2, [pc, #896]	; 1bc14 <__generate_code_for_binary_boolean_expression@@Base+0x1098>
   1b890:	adds	r1, r1, r2
   1b894:	adc	r0, r0, #0
   1b898:	mvn	r2, #0
   1b89c:	and	r7, r0, r2
   1b8a0:	mov	r0, #16646144	; 0xfe0000
   1b8a4:	orr	r0, r0, #-16777216	; 0xff000000
   1b8a8:	and	r4, r1, r0
   1b8ac:	mov	r0, r4
   1b8b0:	bl	11f68 <malloc@plt>
   1b8b4:	stm	r5, {r4, r7}
   1b8b8:	mov	r8, r0
   1b8bc:	ldr	r0, [pc, #960]	; 1bc84 <__generate_code_for_binary_boolean_expression@@Base+0x1108>
   1b8c0:	add	r0, pc, r0
   1b8c4:	str	r8, [r0]
   1b8c8:	mov	r0, r8
   1b8cc:	mov	r1, #0
   1b8d0:	mov	r2, #131072	; 0x20000
   1b8d4:	bl	12004 <memset@plt>
   1b8d8:	ldr	r0, [r9, #4]
   1b8dc:	ldr	r1, [pc, #936]	; 1bc8c <__generate_code_for_binary_boolean_expression@@Base+0x1110>
   1b8e0:	mov	sl, r5
   1b8e4:	mov	r7, #7
   1b8e8:	orr	r7, r7, #131072	; 0x20000
   1b8ec:	ldr	r1, [pc, r1]
   1b8f0:	ldr	r4, [r5, #4]
   1b8f4:	ldr	r5, [pc, #916]	; 1bc90 <__generate_code_for_binary_boolean_expression@@Base+0x1114>
   1b8f8:	adds	r2, r1, #4
   1b8fc:	adc	r3, r0, #0
   1b900:	ldr	r5, [pc, r5]
   1b904:	subs	r2, r5, r2
   1b908:	sbcs	r2, r4, r3
   1b90c:	bcs	1b9e4 <__generate_code_for_binary_boolean_expression@@Base+0xe68>
   1b910:	adds	r1, r1, r7
   1b914:	adc	r0, r0, #0
   1b918:	subs	r1, r1, #4
   1b91c:	sbc	r0, r0, #0
   1b920:	mvn	r2, #0
   1b924:	and	r5, r0, r2
   1b928:	mov	r0, #16646144	; 0xfe0000
   1b92c:	orr	r0, r0, #-16777216	; 0xff000000
   1b930:	and	r4, r1, r0
   1b934:	mov	r0, r8
   1b938:	mov	r1, r4
   1b93c:	bl	11f2c <realloc@plt>
   1b940:	strd	r4, [sl]
   1b944:	ldr	r1, [pc, #844]	; 1bc98 <__generate_code_for_binary_boolean_expression@@Base+0x111c>
   1b948:	mov	r7, r6
   1b94c:	lsr	r2, r6, #24
   1b950:	add	r1, pc, r1
   1b954:	mov	r3, r0
   1b958:	str	r0, [r1]
   1b95c:	ldr	r6, [pc, #824]	; 1bc9c <__generate_code_for_binary_boolean_expression@@Base+0x1120>
   1b960:	ldr	r1, [r9, #4]
   1b964:	lsr	r5, r7, #16
   1b968:	add	r6, pc, r6
   1b96c:	ldrb	r6, [r6]
   1b970:	ldr	r4, [pc, #808]	; 1bca0 <__generate_code_for_binary_boolean_expression@@Base+0x1124>
   1b974:	ldr	r4, [pc, r4]
   1b978:	strb	r7, [r3, r4]!
   1b97c:	strb	r2, [r3, #3]
   1b980:	lsr	r2, r7, #8
   1b984:	strb	r2, [r3, #1]
   1b988:	adds	r2, r4, #4
   1b98c:	adc	ip, r1, #0
   1b990:	cmp	r6, #1
   1b994:	strb	r5, [r3, #2]
   1b998:	stm	r9, {r2, ip}
   1b99c:	beq	1ba24 <__generate_code_for_binary_boolean_expression@@Base+0xea8>
   1b9a0:	ldr	r4, [sp, #20]
   1b9a4:	mov	r5, r0
   1b9a8:	mov	lr, r9
   1b9ac:	ldrb	r1, [r4]
   1b9b0:	ldrb	r3, [r4, #1]
   1b9b4:	ldrb	r7, [r4, #2]
   1b9b8:	ldrb	r6, [r4, #3]
   1b9bc:	strb	r1, [r5, r2]!
   1b9c0:	adds	r4, r2, #4
   1b9c4:	adc	r1, ip, #0
   1b9c8:	strb	r6, [r5, #3]
   1b9cc:	strb	r7, [r5, #2]
   1b9d0:	strb	r3, [r5, #1]
   1b9d4:	str	r4, [lr]
   1b9d8:	str	r1, [lr, #4]
   1b9dc:	ldr	r6, [sp, #24]
   1b9e0:	b	1bba0 <__generate_code_for_binary_boolean_expression@@Base+0x1024>
   1b9e4:	ldr	r1, [r9, #4]
   1b9e8:	ldr	r4, [pc, #676]	; 1bc94 <__generate_code_for_binary_boolean_expression@@Base+0x1118>
   1b9ec:	mov	r5, r6
   1b9f0:	lsr	r0, r6, #24
   1b9f4:	ldr	r4, [pc, r4]
   1b9f8:	lsr	r2, r6, #16
   1b9fc:	lsr	r3, r6, #8
   1ba00:	mov	r6, r8
   1ba04:	strb	r5, [r6, r4]!
   1ba08:	strb	r2, [r6, #2]
   1ba0c:	adds	r2, r4, #4
   1ba10:	adc	ip, r1, #0
   1ba14:	strb	r0, [r6, #3]
   1ba18:	strb	r3, [r6, #1]
   1ba1c:	stm	r9, {r2, ip}
   1ba20:	mov	r0, r8
   1ba24:	ldr	r7, [sl, #4]
   1ba28:	ldr	r3, [pc, #628]	; 1bca4 <__generate_code_for_binary_boolean_expression@@Base+0x1128>
   1ba2c:	adds	r6, r4, #8
   1ba30:	mov	r8, r9
   1ba34:	adc	r5, r1, #0
   1ba38:	ldr	r3, [pc, r3]
   1ba3c:	mov	r9, sl
   1ba40:	subs	r3, r3, r6
   1ba44:	sbcs	r3, r7, r5
   1ba48:	bcs	1baec <__generate_code_for_binary_boolean_expression@@Base+0xf70>
   1ba4c:	mov	r2, #7
   1ba50:	orr	r2, r2, #131072	; 0x20000
   1ba54:	adds	r2, r4, r2
   1ba58:	adc	r4, r1, #0
   1ba5c:	mov	r1, #16646144	; 0xfe0000
   1ba60:	orr	r1, r1, #-16777216	; 0xff000000
   1ba64:	and	r6, r2, r1
   1ba68:	mov	r1, r6
   1ba6c:	bl	11f2c <realloc@plt>
   1ba70:	ldr	sl, [pc, #568]	; 1bcb0 <__generate_code_for_binary_boolean_expression@@Base+0x1134>
   1ba74:	mvn	r1, #0
   1ba78:	and	r7, r4, r1
   1ba7c:	add	sl, pc, sl
   1ba80:	strd	r6, [r9]
   1ba84:	str	r0, [sl]
   1ba88:	ldr	r1, [pc, #548]	; 1bcb4 <__generate_code_for_binary_boolean_expression@@Base+0x1138>
   1ba8c:	ldr	r2, [sp, #20]
   1ba90:	ldr	ip, [r8, #4]
   1ba94:	add	r1, pc, r1
   1ba98:	mov	lr, r8
   1ba9c:	ldrb	r3, [r1]
   1baa0:	ldrb	r1, [r2]
   1baa4:	ldrb	r7, [r2, #1]
   1baa8:	ldrb	r6, [r2, #2]
   1baac:	ldrb	r5, [r2, #3]
   1bab0:	ldr	r2, [pc, #512]	; 1bcb8 <__generate_code_for_binary_boolean_expression@@Base+0x113c>
   1bab4:	ldr	r2, [pc, r2]
   1bab8:	adds	r4, r2, #4
   1babc:	strb	r1, [r0, r2]
   1bac0:	add	r1, r0, r2
   1bac4:	strb	r5, [r1, #3]
   1bac8:	strb	r6, [r1, #2]
   1bacc:	strb	r7, [r1, #1]
   1bad0:	adc	r1, ip, #0
   1bad4:	str	r4, [lr]
   1bad8:	str	r1, [lr, #4]
   1badc:	ldr	r6, [sp, #24]
   1bae0:	cmp	r3, #1
   1bae4:	beq	1bb34 <__generate_code_for_binary_boolean_expression@@Base+0xfb8>
   1bae8:	b	1bba0 <__generate_code_for_binary_boolean_expression@@Base+0x1024>
   1baec:	ldr	r6, [sp, #20]
   1baf0:	mov	r5, r0
   1baf4:	adds	r4, r2, #4
   1baf8:	ldrb	r1, [r6]
   1bafc:	ldrb	r3, [r6, #1]
   1bb00:	ldrb	r7, [r6, #2]
   1bb04:	ldrb	r6, [r6, #3]
   1bb08:	strb	r1, [r5, r2]!
   1bb0c:	adc	r1, ip, #0
   1bb10:	strb	r3, [r5, #1]
   1bb14:	mov	r3, r8
   1bb18:	strb	r6, [r5, #3]
   1bb1c:	strb	r7, [r5, #2]
   1bb20:	str	r4, [r3]
   1bb24:	str	r1, [r3, #4]
   1bb28:	ldr	r6, [sp, #24]
   1bb2c:	ldr	sl, [pc, #372]	; 1bca8 <__generate_code_for_binary_boolean_expression@@Base+0x112c>
   1bb30:	add	sl, pc, sl
   1bb34:	ldr	r7, [r9, #4]
   1bb38:	ldr	r5, [pc, #380]	; 1bcbc <__generate_code_for_binary_boolean_expression@@Base+0x1140>
   1bb3c:	adds	r3, r2, #8
   1bb40:	adc	lr, ip, #0
   1bb44:	ldr	r5, [pc, r5]
   1bb48:	subs	r3, r5, r3
   1bb4c:	sbcs	r3, r7, lr
   1bb50:	bcs	1bb9c <__generate_code_for_binary_boolean_expression@@Base+0x1020>
   1bb54:	mov	r1, #7
   1bb58:	orr	r1, r1, #131072	; 0x20000
   1bb5c:	adds	r1, r2, r1
   1bb60:	adc	r2, ip, #0
   1bb64:	mvn	r3, #0
   1bb68:	and	r5, r2, r3
   1bb6c:	mov	r2, #16646144	; 0xfe0000
   1bb70:	orr	r2, r2, #-16777216	; 0xff000000
   1bb74:	and	r4, r1, r2
   1bb78:	mov	r1, r4
   1bb7c:	bl	11f2c <realloc@plt>
   1bb80:	strd	r4, [r9]
   1bb84:	str	r0, [sl]
   1bb88:	ldr	r1, [r8, #4]
   1bb8c:	ldr	r4, [pc, #300]	; 1bcc0 <__generate_code_for_binary_boolean_expression@@Base+0x1144>
   1bb90:	mov	lr, r8
   1bb94:	ldr	r4, [pc, r4]
   1bb98:	b	1bba0 <__generate_code_for_binary_boolean_expression@@Base+0x1024>
   1bb9c:	mov	lr, r8
   1bba0:	lsr	r2, r6, #24
   1bba4:	strb	r6, [r0, r4]!
   1bba8:	lsr	r3, r6, #16
   1bbac:	lsr	r7, r6, #8
   1bbb0:	strb	r2, [r0, #3]
   1bbb4:	strb	r3, [r0, #2]
   1bbb8:	strb	r7, [r0, #1]
   1bbbc:	adds	r0, r4, #4
   1bbc0:	adc	r1, r1, #0
   1bbc4:	strd	r0, [lr]
   1bbc8:	sub	sp, fp, #28
   1bbcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbd0:	bl	11fe0 <__errno_location@plt>
   1bbd4:	ldr	r1, [pc, #116]	; 1bc50 <__generate_code_for_binary_boolean_expression@@Base+0x10d4>
   1bbd8:	ldr	r1, [pc, r1]
   1bbdc:	ldr	r0, [r0]
   1bbe0:	ldr	r4, [r1]
   1bbe4:	ldr	r5, [pc, #104]	; 1bc54 <__generate_code_for_binary_boolean_expression@@Base+0x10d8>
   1bbe8:	ldr	r5, [pc, r5]
   1bbec:	bl	11f80 <strerror@plt>
   1bbf0:	ldr	r1, [pc, #96]	; 1bc58 <__generate_code_for_binary_boolean_expression@@Base+0x10dc>
   1bbf4:	mov	r3, r0
   1bbf8:	mov	r0, r4
   1bbfc:	add	r1, pc, r1
   1bc00:	mov	r2, r5
   1bc04:	bl	11fd4 <fprintf@plt>
   1bc08:	sub	sp, fp, #28
   1bc0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc10:	strbvs	r6, [r3, -r1, ror #8]!
   1bc14:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1bc18:	andeq	r6, r1, r0, asr #23
   1bc1c:	andeq	r6, r1, r0, asr #23
   1bc20:	andeq	r5, r1, r8, asr #21
   1bc24:	andeq	r3, r0, r4, lsl #23
   1bc28:	andeq	r5, r1, r4, asr #20
   1bc2c:	andeq	r6, r1, r0, lsl fp
   1bc30:	andeq	r6, r1, r4, lsl fp
   1bc34:	andeq	r6, r1, r0, lsl #22
   1bc38:	andeq	r6, r1, r0, lsl #22
   1bc3c:	ldrdeq	r6, [r1], -r0
   1bc40:	andeq	r6, r1, r0, ror fp
   1bc44:	andeq	r3, r0, r8, asr fp
   1bc48:	andeq	r6, r1, r0, asr fp
   1bc4c:	andeq	r6, r1, ip, lsr fp
   1bc50:	andeq	r5, r1, r0, ror #9
   1bc54:	andeq	r6, r1, r8, ror #11
   1bc58:	ldrdeq	r3, [r0], -r4
   1bc5c:	andeq	r6, r1, r8, lsl #21
   1bc60:	muleq	r1, ip, sl
   1bc64:	andeq	r5, r1, r8, ror r9
   1bc68:	andeq	r6, r1, r8, lsr sl
   1bc6c:	andeq	r5, r1, r8, lsr #17
   1bc70:			; <UNDEFINED> instruction: 0x000169b0
   1bc74:	strdeq	r3, [r0], -r6
   1bc78:	andeq	r6, r1, r8, lsl #19
   1bc7c:	andeq	r6, r1, ip, ror #18
   1bc80:	andeq	r6, r1, ip, ror #18
   1bc84:	andeq	r6, r1, ip, lsl r9
   1bc88:	andeq	r6, r1, r0, lsr #20
   1bc8c:	strdeq	r6, [r1], -ip
   1bc90:	andeq	r6, r1, r0, ror #17
   1bc94:	strdeq	r6, [r1], -r4
   1bc98:	andeq	r6, r1, ip, lsl #17
   1bc9c:	andeq	r6, r1, ip, ror #16
   1bca0:	andeq	r6, r1, r4, ror r8
   1bca4:	andeq	r6, r1, r8, lsr #15
   1bca8:	andeq	r6, r1, ip, lsr #13
   1bcac:	andeq	r6, r1, ip, lsl #20
   1bcb0:	andeq	r6, r1, r0, ror #14
   1bcb4:	andeq	r6, r1, r0, asr #14
   1bcb8:	andeq	r6, r1, r4, lsr r7
   1bcbc:	muleq	r1, ip, r6
   1bcc0:	andeq	r6, r1, r4, asr r6
   1bcc4:	ldr	r0, [r0]
   1bcc8:	cmn	r0, #1
   1bccc:	beq	1bcec <__generate_code_for_binary_boolean_expression@@Base+0x1170>
   1bcd0:	ldr	r0, [r1, r0, lsl #2]
   1bcd4:	cmp	r0, #0
   1bcd8:	bxeq	lr
   1bcdc:	ldrd	r2, [r0]
   1bce0:	adds	r2, r2, #1
   1bce4:	adc	r3, r3, #0
   1bce8:	strd	r2, [r0]
   1bcec:	bx	lr
   1bcf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcf4:	add	fp, sp, #28
   1bcf8:	sub	sp, sp, #12
   1bcfc:	mov	r9, r0
   1bd00:	ldr	r0, [pc, #2000]	; 1c4d8 <__generate_code_for_binary_boolean_expression@@Base+0x195c>
   1bd04:	mov	sl, #2
   1bd08:	cmp	r3, #0
   1bd0c:	movne	sl, #3
   1bd10:	ldr	r0, [pc, r0]
   1bd14:	cmp	r0, #0
   1bd18:	beq	1c4d0 <__generate_code_for_binary_boolean_expression@@Base+0x1954>
   1bd1c:	stm	sp, {r2, r3}
   1bd20:	ldr	r0, [pc, #1972]	; 1c4dc <__generate_code_for_binary_boolean_expression@@Base+0x1960>
   1bd24:	str	r1, [sp, #8]
   1bd28:	add	r0, pc, r0
   1bd2c:	ldrb	r0, [r0]
   1bd30:	cmp	r0, #1
   1bd34:	bne	1bdc4 <__generate_code_for_binary_boolean_expression@@Base+0x1248>
   1bd38:	ldr	r0, [pc, #1952]	; 1c4e0 <__generate_code_for_binary_boolean_expression@@Base+0x1964>
   1bd3c:	ldr	r4, [pc, #1952]	; 1c4e4 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   1bd40:	add	r0, pc, r0
   1bd44:	add	r4, pc, r4
   1bd48:	ldr	r0, [r0, #4]
   1bd4c:	ldr	r5, [pc, #1940]	; 1c4e8 <__generate_code_for_binary_boolean_expression@@Base+0x196c>
   1bd50:	ldr	r5, [pc, r5]
   1bd54:	ldr	r7, [r4, #4]
   1bd58:	ldr	r6, [pc, #1932]	; 1c4ec <__generate_code_for_binary_boolean_expression@@Base+0x1970>
   1bd5c:	adds	r2, r5, #4
   1bd60:	adc	r3, r0, #0
   1bd64:	ldr	r6, [pc, r6]
   1bd68:	subs	r2, r6, r2
   1bd6c:	sbcs	r2, r7, r3
   1bd70:	bcs	1bdc4 <__generate_code_for_binary_boolean_expression@@Base+0x1248>
   1bd74:	mov	r2, #7
   1bd78:	orr	r2, r2, #131072	; 0x20000
   1bd7c:	adds	r1, r5, r2
   1bd80:	adc	r0, r0, #0
   1bd84:	subs	r1, r1, #4
   1bd88:	sbc	r0, r0, #0
   1bd8c:	mvn	r2, #0
   1bd90:	and	r7, r0, r2
   1bd94:	mov	r0, #16646144	; 0xfe0000
   1bd98:	orr	r0, r0, #-16777216	; 0xff000000
   1bd9c:	ldr	r8, [pc, #1868]	; 1c4f0 <__generate_code_for_binary_boolean_expression@@Base+0x1974>
   1bda0:	and	r6, r1, r0
   1bda4:	ldr	r0, [pc, #1864]	; 1c4f4 <__generate_code_for_binary_boolean_expression@@Base+0x1978>
   1bda8:	mov	r1, r6
   1bdac:	add	r8, pc, r8
   1bdb0:	ldr	r0, [pc, r0]
   1bdb4:	bl	11f2c <realloc@plt>
   1bdb8:	ldr	r1, [sp, #8]
   1bdbc:	strd	r6, [r4]
   1bdc0:	str	r0, [r8]
   1bdc4:	ldr	r3, [pc, #1836]	; 1c4f8 <__generate_code_for_binary_boolean_expression@@Base+0x197c>
   1bdc8:	ldr	r7, [pc, #1836]	; 1c4fc <__generate_code_for_binary_boolean_expression@@Base+0x1980>
   1bdcc:	mov	r0, #0
   1bdd0:	add	r3, pc, r3
   1bdd4:	mov	r2, #1
   1bdd8:	ldr	r7, [pc, r7]
   1bddc:	ldr	r8, [pc, #1820]	; 1c500 <__generate_code_for_binary_boolean_expression@@Base+0x1984>
   1bde0:	adds	r4, r7, #4
   1bde4:	ldr	r8, [pc, r8]
   1bde8:	ldr	r6, [r3, #4]
   1bdec:	mov	r5, r8
   1bdf0:	strb	r0, [r5, r7]!
   1bdf4:	strb	r2, [r5, #3]
   1bdf8:	strb	r0, [r5, #2]
   1bdfc:	strb	r0, [r5, #1]
   1be00:	adc	r5, r6, #0
   1be04:	cmp	r1, #0
   1be08:	strd	r4, [r3]
   1be0c:	beq	1be20 <__generate_code_for_binary_boolean_expression@@Base+0x12a4>
   1be10:	mov	r0, r1
   1be14:	bl	11fb0 <strlen@plt>
   1be18:	add	r0, sl, r0, lsr #2
   1be1c:	add	sl, r0, #2
   1be20:	ldr	r0, [pc, #1756]	; 1c504 <__generate_code_for_binary_boolean_expression@@Base+0x1988>
   1be24:	add	r0, pc, r0
   1be28:	ldrb	r0, [r0]
   1be2c:	cmp	r0, #0
   1be30:	beq	1bf10 <__generate_code_for_binary_boolean_expression@@Base+0x1394>
   1be34:	ldr	lr, [pc, #1744]	; 1c50c <__generate_code_for_binary_boolean_expression@@Base+0x1990>
   1be38:	adds	r0, r7, #8
   1be3c:	adc	r1, r6, #0
   1be40:	add	lr, pc, lr
   1be44:	ldr	r2, [lr, #4]
   1be48:	ldr	r3, [pc, #1728]	; 1c510 <__generate_code_for_binary_boolean_expression@@Base+0x1994>
   1be4c:	ldr	r3, [pc, r3]
   1be50:	subs	r0, r3, r0
   1be54:	sbcs	r0, r2, r1
   1be58:	bcs	1c160 <__generate_code_for_binary_boolean_expression@@Base+0x15e4>
   1be5c:	mov	r0, #7
   1be60:	orr	r0, r0, #131072	; 0x20000
   1be64:	adds	r0, r7, r0
   1be68:	adc	r1, r6, #0
   1be6c:	mvn	r2, #0
   1be70:	and	r5, r1, r2
   1be74:	mov	r1, #16646144	; 0xfe0000
   1be78:	orr	r1, r1, #-16777216	; 0xff000000
   1be7c:	and	r6, r0, r1
   1be80:	ldr	r4, [pc, #1680]	; 1c518 <__generate_code_for_binary_boolean_expression@@Base+0x199c>
   1be84:	mov	r0, r8
   1be88:	mov	r1, r6
   1be8c:	add	r4, pc, r4
   1be90:	mov	r7, lr
   1be94:	bl	11f2c <realloc@plt>
   1be98:	mov	lr, r7
   1be9c:	mov	r8, r0
   1bea0:	str	r6, [lr]
   1bea4:	str	r5, [lr, #4]
   1bea8:	str	r8, [r4]
   1beac:	ldr	r1, [pc, #1640]	; 1c51c <__generate_code_for_binary_boolean_expression@@Base+0x19a0>
   1beb0:	lsr	r0, sl, #24
   1beb4:	add	r1, pc, r1
   1beb8:	lsr	r3, sl, #16
   1bebc:	ldrb	r2, [r1]
   1bec0:	ldr	r1, [pc, #1624]	; 1c520 <__generate_code_for_binary_boolean_expression@@Base+0x19a4>
   1bec4:	add	r1, pc, r1
   1bec8:	mov	r7, r1
   1becc:	ldr	r5, [r1, #4]
   1bed0:	ldr	r4, [pc, #1612]	; 1c524 <__generate_code_for_binary_boolean_expression@@Base+0x19a8>
   1bed4:	mov	r1, r8
   1bed8:	ldr	r4, [pc, r4]
   1bedc:	strb	sl, [r1, r4]!
   1bee0:	ldr	ip, [sp, #8]
   1bee4:	strb	r0, [r1, #3]
   1bee8:	lsr	r0, sl, #8
   1beec:	strb	r0, [r1, #1]
   1bef0:	adds	r0, r4, #4
   1bef4:	strb	r3, [r1, #2]
   1bef8:	adc	r1, r5, #0
   1befc:	mov	sl, r7
   1bf00:	cmp	r2, #1
   1bf04:	strd	r0, [sl]
   1bf08:	bne	1bf48 <__generate_code_for_binary_boolean_expression@@Base+0x13cc>
   1bf0c:	b	1c198 <__generate_code_for_binary_boolean_expression@@Base+0x161c>
   1bf10:	mov	r3, r8
   1bf14:	lsr	r0, sl, #24
   1bf18:	strb	sl, [r3, r4]!
   1bf1c:	lsr	r1, sl, #16
   1bf20:	lsr	r2, sl, #8
   1bf24:	strb	r0, [r3, #3]
   1bf28:	strb	r1, [r3, #2]
   1bf2c:	strb	r2, [r3, #1]
   1bf30:	ldr	sl, [pc, #1488]	; 1c508 <__generate_code_for_binary_boolean_expression@@Base+0x198c>
   1bf34:	ldr	ip, [sp, #8]
   1bf38:	adds	r0, r7, #8
   1bf3c:	adc	r1, r6, #0
   1bf40:	add	sl, pc, sl
   1bf44:	strd	r0, [sl]
   1bf48:	mov	r6, r8
   1bf4c:	lsr	r2, r9, #24
   1bf50:	strb	r9, [r6, r0]!
   1bf54:	lsr	r3, r9, #16
   1bf58:	strb	r2, [r6, #3]
   1bf5c:	adds	r2, r0, #4
   1bf60:	lsr	r7, r9, #8
   1bf64:	strb	r3, [r6, #2]
   1bf68:	adc	r3, r1, #0
   1bf6c:	strb	r7, [r6, #1]
   1bf70:	strd	r2, [sl]
   1bf74:	ldr	r5, [sp]
   1bf78:	mov	r6, r8
   1bf7c:	adds	r4, r2, #4
   1bf80:	lsr	r7, r5, #8
   1bf84:	strb	r5, [r6, r2]!
   1bf88:	lsr	r0, r5, #24
   1bf8c:	lsr	r1, r5, #16
   1bf90:	strb	r7, [r6, #1]
   1bf94:	adc	r7, r3, #0
   1bf98:	strb	r0, [r6, #3]
   1bf9c:	strb	r1, [r6, #2]
   1bfa0:	stm	sl, {r4, r7}
   1bfa4:	ldr	r0, [sp, #4]
   1bfa8:	cmp	r0, #0
   1bfac:	beq	1c084 <__generate_code_for_binary_boolean_expression@@Base+0x1508>
   1bfb0:	ldr	r0, [pc, #1420]	; 1c544 <__generate_code_for_binary_boolean_expression@@Base+0x19c8>
   1bfb4:	ldr	sl, [fp, #8]
   1bfb8:	add	r0, pc, r0
   1bfbc:	ldrb	r0, [r0]
   1bfc0:	cmp	r0, #1
   1bfc4:	bne	1c050 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   1bfc8:	ldr	r9, [pc, #1400]	; 1c548 <__generate_code_for_binary_boolean_expression@@Base+0x19cc>
   1bfcc:	adds	r0, r2, #8
   1bfd0:	adc	r1, r3, #0
   1bfd4:	add	r9, pc, r9
   1bfd8:	ldr	r6, [r9, #4]
   1bfdc:	ldr	r5, [pc, #1384]	; 1c54c <__generate_code_for_binary_boolean_expression@@Base+0x19d0>
   1bfe0:	ldr	r5, [pc, r5]
   1bfe4:	subs	r0, r5, r0
   1bfe8:	sbcs	r0, r6, r1
   1bfec:	bcs	1c050 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   1bff0:	mov	r0, #7
   1bff4:	orr	r0, r0, #131072	; 0x20000
   1bff8:	adds	r0, r2, r0
   1bffc:	adc	r1, r3, #0
   1c000:	mvn	r2, #0
   1c004:	and	r5, r1, r2
   1c008:	mov	r1, #16646144	; 0xfe0000
   1c00c:	orr	r1, r1, #-16777216	; 0xff000000
   1c010:	and	r6, r0, r1
   1c014:	ldr	r4, [pc, #1332]	; 1c550 <__generate_code_for_binary_boolean_expression@@Base+0x19d4>
   1c018:	mov	r0, r8
   1c01c:	mov	r1, r6
   1c020:	add	r4, pc, r4
   1c024:	bl	11f2c <realloc@plt>
   1c028:	ldr	ip, [sp, #8]
   1c02c:	str	r6, [r9]
   1c030:	str	r5, [r9, #4]
   1c034:	mov	r8, r0
   1c038:	ldr	r0, [pc, #1300]	; 1c554 <__generate_code_for_binary_boolean_expression@@Base+0x19d8>
   1c03c:	str	r8, [r4]
   1c040:	add	r0, pc, r0
   1c044:	ldr	r7, [r0, #4]
   1c048:	ldr	r4, [pc, #1288]	; 1c558 <__generate_code_for_binary_boolean_expression@@Base+0x19dc>
   1c04c:	ldr	r4, [pc, r4]
   1c050:	mov	r3, r8
   1c054:	lsr	r0, sl, #24
   1c058:	strb	sl, [r3, r4]!
   1c05c:	lsr	r1, sl, #16
   1c060:	lsr	r2, sl, #8
   1c064:	strb	r0, [r3, #3]
   1c068:	strb	r1, [r3, #2]
   1c06c:	strb	r2, [r3, #1]
   1c070:	ldr	sl, [pc, #1252]	; 1c55c <__generate_code_for_binary_boolean_expression@@Base+0x19e0>
   1c074:	adds	r4, r4, #4
   1c078:	adc	r7, r7, #0
   1c07c:	add	sl, pc, sl
   1c080:	stm	sl, {r4, r7}
   1c084:	cmp	ip, #0
   1c088:	beq	1c4d0 <__generate_code_for_binary_boolean_expression@@Base+0x1954>
   1c08c:	mov	r0, ip
   1c090:	bl	11fb0 <strlen@plt>
   1c094:	mov	r9, #1
   1c098:	add	r5, r9, r0, lsr #2
   1c09c:	ldr	r0, [pc, #1212]	; 1c560 <__generate_code_for_binary_boolean_expression@@Base+0x19e4>
   1c0a0:	add	r0, pc, r0
   1c0a4:	ldrb	r0, [r0]
   1c0a8:	cmp	r0, #1
   1c0ac:	bne	1c150 <__generate_code_for_binary_boolean_expression@@Base+0x15d4>
   1c0b0:	ldr	sl, [pc, #1196]	; 1c564 <__generate_code_for_binary_boolean_expression@@Base+0x19e8>
   1c0b4:	adds	r0, r4, #4
   1c0b8:	adc	r1, r7, #0
   1c0bc:	add	sl, pc, sl
   1c0c0:	ldr	r2, [sl, #4]
   1c0c4:	ldr	r3, [pc, #1180]	; 1c568 <__generate_code_for_binary_boolean_expression@@Base+0x19ec>
   1c0c8:	ldr	r3, [pc, r3]
   1c0cc:	subs	r0, r3, r0
   1c0d0:	sbcs	r0, r2, r1
   1c0d4:	bcs	1c304 <__generate_code_for_binary_boolean_expression@@Base+0x1788>
   1c0d8:	mov	r0, #0
   1c0dc:	str	r0, [sp, #4]
   1c0e0:	mov	r0, #7
   1c0e4:	orr	r0, r0, #131072	; 0x20000
   1c0e8:	adds	r0, r4, r0
   1c0ec:	adc	r1, r7, #0
   1c0f0:	subs	r0, r0, #4
   1c0f4:	sbc	r1, r1, #0
   1c0f8:	mvn	r2, #0
   1c0fc:	and	r7, r1, r2
   1c100:	mov	r1, #16646144	; 0xfe0000
   1c104:	orr	r1, r1, #-16777216	; 0xff000000
   1c108:	and	r4, r0, r1
   1c10c:	ldr	r6, [pc, #1116]	; 1c570 <__generate_code_for_binary_boolean_expression@@Base+0x19f4>
   1c110:	mov	r0, r8
   1c114:	mov	r1, r4
   1c118:	add	r6, pc, r6
   1c11c:	bl	11f2c <realloc@plt>
   1c120:	stm	sl, {r4, r7}
   1c124:	str	r0, [r6]
   1c128:	ldr	sl, [pc, #1092]	; 1c574 <__generate_code_for_binary_boolean_expression@@Base+0x19f8>
   1c12c:	mov	r8, r0
   1c130:	add	sl, pc, sl
   1c134:	ldr	r7, [sl, #4]
   1c138:	ldr	r0, [pc, #1080]	; 1c578 <__generate_code_for_binary_boolean_expression@@Base+0x19fc>
   1c13c:	add	r0, pc, r0
   1c140:	ldrb	r9, [r0]
   1c144:	ldr	r4, [pc, #1072]	; 1c57c <__generate_code_for_binary_boolean_expression@@Base+0x1a00>
   1c148:	ldr	r4, [pc, r4]
   1c14c:	b	1c314 <__generate_code_for_binary_boolean_expression@@Base+0x1798>
   1c150:	mov	r0, #0
   1c154:	str	r0, [sp, #4]
   1c158:	mov	r9, #0
   1c15c:	b	1c314 <__generate_code_for_binary_boolean_expression@@Base+0x1798>
   1c160:	mov	r3, r8
   1c164:	lsr	r0, sl, #24
   1c168:	strb	sl, [r3, r4]!
   1c16c:	lsr	r1, sl, #16
   1c170:	lsr	r2, sl, #8
   1c174:	strb	r0, [r3, #3]
   1c178:	strb	r1, [r3, #2]
   1c17c:	strb	r2, [r3, #1]
   1c180:	ldr	sl, [pc, #908]	; 1c514 <__generate_code_for_binary_boolean_expression@@Base+0x1998>
   1c184:	adds	r0, r7, #8
   1c188:	adc	r1, r6, #0
   1c18c:	add	sl, pc, sl
   1c190:	ldr	ip, [sp, #8]
   1c194:	strd	r0, [sl]
   1c198:	ldr	r7, [lr, #4]
   1c19c:	ldr	r6, [pc, #900]	; 1c528 <__generate_code_for_binary_boolean_expression@@Base+0x19ac>
   1c1a0:	adds	r2, r4, #8
   1c1a4:	adc	r3, r5, #0
   1c1a8:	ldr	r6, [pc, r6]
   1c1ac:	subs	r2, r6, r2
   1c1b0:	sbcs	r2, r7, r3
   1c1b4:	bcs	1c258 <__generate_code_for_binary_boolean_expression@@Base+0x16dc>
   1c1b8:	mov	r0, #7
   1c1bc:	orr	r0, r0, #131072	; 0x20000
   1c1c0:	adds	r0, r4, r0
   1c1c4:	adc	r1, r5, #0
   1c1c8:	mvn	r2, #0
   1c1cc:	and	r5, r1, r2
   1c1d0:	mov	r1, #16646144	; 0xfe0000
   1c1d4:	orr	r1, r1, #-16777216	; 0xff000000
   1c1d8:	and	r4, r0, r1
   1c1dc:	ldr	r6, [pc, #840]	; 1c52c <__generate_code_for_binary_boolean_expression@@Base+0x19b0>
   1c1e0:	mov	r0, r8
   1c1e4:	mov	r1, r4
   1c1e8:	add	r6, pc, r6
   1c1ec:	mov	r7, lr
   1c1f0:	bl	11f2c <realloc@plt>
   1c1f4:	mov	lr, r7
   1c1f8:	str	r0, [r6]
   1c1fc:	strd	r4, [lr]
   1c200:	mov	r8, r0
   1c204:	ldr	ip, [sp, #8]
   1c208:	ldr	r0, [pc, #800]	; 1c530 <__generate_code_for_binary_boolean_expression@@Base+0x19b4>
   1c20c:	ldr	r1, [sl, #4]
   1c210:	mov	r3, r8
   1c214:	add	r0, pc, r0
   1c218:	lsr	r2, r9, #24
   1c21c:	ldrb	r7, [r0]
   1c220:	ldr	r0, [pc, #780]	; 1c534 <__generate_code_for_binary_boolean_expression@@Base+0x19b8>
   1c224:	lsr	r6, r9, #16
   1c228:	ldr	r0, [pc, r0]
   1c22c:	strb	r9, [r3, r0]!
   1c230:	strb	r2, [r3, #3]
   1c234:	lsr	r2, r9, #8
   1c238:	strb	r2, [r3, #1]
   1c23c:	adds	r2, r0, #4
   1c240:	strb	r6, [r3, #2]
   1c244:	adc	r3, r1, #0
   1c248:	cmp	r7, #1
   1c24c:	strd	r2, [sl]
   1c250:	bne	1bf74 <__generate_code_for_binary_boolean_expression@@Base+0x13f8>
   1c254:	b	1c284 <__generate_code_for_binary_boolean_expression@@Base+0x1708>
   1c258:	mov	r6, r8
   1c25c:	lsr	r2, r9, #24
   1c260:	strb	r9, [r6, r0]!
   1c264:	lsr	r3, r9, #16
   1c268:	strb	r2, [r6, #3]
   1c26c:	adds	r2, r0, #4
   1c270:	lsr	r7, r9, #8
   1c274:	strb	r3, [r6, #2]
   1c278:	adc	r3, r1, #0
   1c27c:	strb	r7, [r6, #1]
   1c280:	strd	r2, [sl]
   1c284:	ldr	r5, [lr, #4]
   1c288:	ldr	r4, [pc, #680]	; 1c538 <__generate_code_for_binary_boolean_expression@@Base+0x19bc>
   1c28c:	adds	r7, r0, #8
   1c290:	adc	r6, r1, #0
   1c294:	ldr	r4, [pc, r4]
   1c298:	subs	r7, r4, r7
   1c29c:	sbcs	r7, r5, r6
   1c2a0:	bcs	1bf74 <__generate_code_for_binary_boolean_expression@@Base+0x13f8>
   1c2a4:	mov	r2, #7
   1c2a8:	orr	r2, r2, #131072	; 0x20000
   1c2ac:	adds	r0, r0, r2
   1c2b0:	adc	r1, r1, #0
   1c2b4:	mvn	r2, #0
   1c2b8:	and	r5, r1, r2
   1c2bc:	mov	r1, #16646144	; 0xfe0000
   1c2c0:	orr	r1, r1, #-16777216	; 0xff000000
   1c2c4:	and	r6, r0, r1
   1c2c8:	ldr	r4, [pc, #620]	; 1c53c <__generate_code_for_binary_boolean_expression@@Base+0x19c0>
   1c2cc:	mov	r0, r8
   1c2d0:	mov	r1, r6
   1c2d4:	add	r4, pc, r4
   1c2d8:	mov	r7, lr
   1c2dc:	bl	11f2c <realloc@plt>
   1c2e0:	ldr	ip, [sp, #8]
   1c2e4:	str	r6, [r7]
   1c2e8:	str	r5, [r7, #4]
   1c2ec:	str	r0, [r4]
   1c2f0:	ldr	r3, [sl, #4]
   1c2f4:	ldr	r2, [pc, #580]	; 1c540 <__generate_code_for_binary_boolean_expression@@Base+0x19c4>
   1c2f8:	mov	r8, r0
   1c2fc:	ldr	r2, [pc, r2]
   1c300:	b	1bf74 <__generate_code_for_binary_boolean_expression@@Base+0x13f8>
   1c304:	mov	r0, #0
   1c308:	str	r0, [sp, #4]
   1c30c:	ldr	sl, [pc, #600]	; 1c56c <__generate_code_for_binary_boolean_expression@@Base+0x19f0>
   1c310:	add	sl, pc, sl
   1c314:	mov	r3, r8
   1c318:	ldr	r0, [sp, #8]
   1c31c:	strb	r5, [r3, r4]!
   1c320:	adds	r4, r4, #4
   1c324:	lsr	r6, r5, #24
   1c328:	lsr	r1, r5, #16
   1c32c:	lsr	r2, r5, #8
   1c330:	adc	r5, r7, #0
   1c334:	strb	r6, [r3, #3]
   1c338:	strb	r1, [r3, #2]
   1c33c:	strb	r2, [r3, #1]
   1c340:	strd	r4, [sl]
   1c344:	bl	11fb0 <strlen@plt>
   1c348:	mov	r7, r0
   1c34c:	cmp	r9, #0
   1c350:	beq	1c3f0 <__generate_code_for_binary_boolean_expression@@Base+0x1874>
   1c354:	ldr	r6, [pc, #548]	; 1c580 <__generate_code_for_binary_boolean_expression@@Base+0x1a04>
   1c358:	adds	r0, r4, r7
   1c35c:	adc	r1, r5, #0
   1c360:	add	r6, pc, r6
   1c364:	ldr	r2, [r6, #4]
   1c368:	ldr	r3, [pc, #532]	; 1c584 <__generate_code_for_binary_boolean_expression@@Base+0x1a08>
   1c36c:	ldr	r3, [pc, r3]
   1c370:	subs	r3, r3, r0
   1c374:	sbcs	r2, r2, r1
   1c378:	bcs	1c3e8 <__generate_code_for_binary_boolean_expression@@Base+0x186c>
   1c37c:	mov	r2, #7
   1c380:	orr	r2, r2, #131072	; 0x20000
   1c384:	adds	r0, r0, r2
   1c388:	adc	r1, r1, #0
   1c38c:	subs	r0, r0, #8
   1c390:	sbc	r1, r1, #0
   1c394:	mvn	r2, #0
   1c398:	and	r5, r1, r2
   1c39c:	mov	r1, #16646144	; 0xfe0000
   1c3a0:	orr	r1, r1, #-16777216	; 0xff000000
   1c3a4:	and	r4, r0, r1
   1c3a8:	ldr	r9, [pc, #472]	; 1c588 <__generate_code_for_binary_boolean_expression@@Base+0x1a0c>
   1c3ac:	mov	r0, r8
   1c3b0:	mov	r1, r4
   1c3b4:	add	r9, pc, r9
   1c3b8:	bl	11f2c <realloc@plt>
   1c3bc:	strd	r4, [r6]
   1c3c0:	str	r0, [r9]
   1c3c4:	mov	r8, r0
   1c3c8:	ldr	r5, [sl, #4]
   1c3cc:	ldr	r0, [pc, #440]	; 1c58c <__generate_code_for_binary_boolean_expression@@Base+0x1a10>
   1c3d0:	add	r0, pc, r0
   1c3d4:	ldrb	r0, [r0]
   1c3d8:	str	r0, [sp, #4]
   1c3dc:	ldr	r4, [pc, #428]	; 1c590 <__generate_code_for_binary_boolean_expression@@Base+0x1a14>
   1c3e0:	ldr	r4, [pc, r4]
   1c3e4:	b	1c3f0 <__generate_code_for_binary_boolean_expression@@Base+0x1874>
   1c3e8:	mov	r0, #1
   1c3ec:	str	r0, [sp, #4]
   1c3f0:	ldr	r9, [sp, #8]
   1c3f4:	add	r0, r8, r4
   1c3f8:	mov	r2, r7
   1c3fc:	mov	r1, r9
   1c400:	bl	11ef0 <memcpy@plt>
   1c404:	adds	r6, r4, r7
   1c408:	mov	r0, r9
   1c40c:	adc	r5, r5, #0
   1c410:	str	r6, [sl]
   1c414:	str	r5, [sl, #4]
   1c418:	bl	11fb0 <strlen@plt>
   1c41c:	and	r0, r0, #3
   1c420:	rsb	r4, r0, #4
   1c424:	ldr	r0, [sp, #4]
   1c428:	cmp	r0, #0
   1c42c:	beq	1c4b4 <__generate_code_for_binary_boolean_expression@@Base+0x1938>
   1c430:	ldr	r7, [pc, #348]	; 1c594 <__generate_code_for_binary_boolean_expression@@Base+0x1a18>
   1c434:	adds	r0, r6, r4
   1c438:	adc	r1, r5, #0
   1c43c:	add	r7, pc, r7
   1c440:	ldr	r2, [r7, #4]
   1c444:	ldr	r3, [pc, #332]	; 1c598 <__generate_code_for_binary_boolean_expression@@Base+0x1a1c>
   1c448:	ldr	r3, [pc, r3]
   1c44c:	subs	r3, r3, r0
   1c450:	sbcs	r2, r2, r1
   1c454:	bcs	1c4b4 <__generate_code_for_binary_boolean_expression@@Base+0x1938>
   1c458:	mov	r2, #7
   1c45c:	orr	r2, r2, #131072	; 0x20000
   1c460:	adds	r0, r0, r2
   1c464:	adc	r1, r1, #0
   1c468:	subs	r0, r0, #8
   1c46c:	sbc	r1, r1, #0
   1c470:	mvn	r2, #0
   1c474:	and	r5, r1, r2
   1c478:	mov	r1, #16646144	; 0xfe0000
   1c47c:	orr	r1, r1, #-16777216	; 0xff000000
   1c480:	and	r6, r0, r1
   1c484:	ldr	r9, [pc, #272]	; 1c59c <__generate_code_for_binary_boolean_expression@@Base+0x1a20>
   1c488:	mov	r0, r8
   1c48c:	mov	r1, r6
   1c490:	add	r9, pc, r9
   1c494:	bl	11f2c <realloc@plt>
   1c498:	str	r6, [r7]
   1c49c:	str	r5, [r7, #4]
   1c4a0:	str	r0, [r9]
   1c4a4:	ldr	r5, [sl, #4]
   1c4a8:	ldr	r6, [pc, #240]	; 1c5a0 <__generate_code_for_binary_boolean_expression@@Base+0x1a24>
   1c4ac:	mov	r8, r0
   1c4b0:	ldr	r6, [pc, r6]
   1c4b4:	add	r0, r8, r6
   1c4b8:	mov	r1, #0
   1c4bc:	mov	r2, r4
   1c4c0:	bl	12004 <memset@plt>
   1c4c4:	adds	r0, r6, r4
   1c4c8:	adc	r1, r5, #0
   1c4cc:	strd	r0, [sl]
   1c4d0:	sub	sp, fp, #28
   1c4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4d8:	andeq	r6, r1, r8, asr #9
   1c4dc:	andeq	r6, r1, ip, lsr #9
   1c4e0:	andeq	r6, r1, r8, lsr #9
   1c4e4:	muleq	r1, ip, r4
   1c4e8:	muleq	r1, r8, r4
   1c4ec:	andeq	r6, r1, ip, ror r4
   1c4f0:	andeq	r6, r1, r0, lsr r4
   1c4f4:	andeq	r6, r1, ip, lsr #8
   1c4f8:	andeq	r6, r1, r8, lsl r4
   1c4fc:	andeq	r6, r1, r0, lsl r4
   1c500:	strdeq	r6, [r1], -r8
   1c504:			; <UNDEFINED> instruction: 0x000163b0
   1c508:	andeq	r6, r1, r8, lsr #5
   1c50c:	andeq	r6, r1, r0, lsr #7
   1c510:	muleq	r1, r4, r3
   1c514:	andeq	r6, r1, ip, asr r0
   1c518:	andeq	r6, r1, r0, asr r3
   1c51c:	andeq	r6, r1, r0, lsr #6
   1c520:	andeq	r6, r1, r4, lsr #6
   1c524:	andeq	r6, r1, r0, lsl r3
   1c528:	andeq	r6, r1, r8, lsr r0
   1c52c:	strdeq	r5, [r1], -r4
   1c530:	andeq	r5, r1, r0, asr #31
   1c534:	andeq	r5, r1, r0, asr #31
   1c538:	andeq	r5, r1, ip, asr #30
   1c53c:	andeq	r5, r1, r8, lsl #30
   1c540:	andeq	r5, r1, ip, ror #29
   1c544:	andeq	r6, r1, ip, lsl r2
   1c548:	andeq	r6, r1, ip, lsl #4
   1c54c:	andeq	r6, r1, r0, lsl #4
   1c550:			; <UNDEFINED> instruction: 0x000161bc
   1c554:	andeq	r6, r1, r8, lsr #3
   1c558:	muleq	r1, ip, r1
   1c55c:	andeq	r6, r1, ip, ror #2
   1c560:	andeq	r6, r1, r4, lsr r1
   1c564:	andeq	r6, r1, r4, lsr #2
   1c568:	andeq	r6, r1, r8, lsl r1
   1c56c:	ldrdeq	r5, [r1], -r8
   1c570:	andeq	r6, r1, r4, asr #1
   1c574:	strheq	r6, [r1], -r8
   1c578:	muleq	r1, r8, r0
   1c57c:	andeq	r6, r1, r0, lsr #1
   1c580:	andeq	r5, r1, r0, lsl #29
   1c584:	andeq	r5, r1, r4, ror lr
   1c588:	andeq	r5, r1, r8, lsr #28
   1c58c:	andeq	r5, r1, r4, lsl #28
   1c590:	andeq	r5, r1, r8, lsl #28
   1c594:	andeq	r5, r1, r4, lsr #27
   1c598:	muleq	r1, r8, sp
   1c59c:	andeq	r5, r1, ip, asr #26
   1c5a0:	andeq	r5, r1, r8, lsr sp
   1c5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5a8:	add	fp, sp, #28
   1c5ac:	sub	sp, sp, #28
   1c5b0:	mov	ip, r0
   1c5b4:	ldr	r0, [pc, #1728]	; 1cc7c <__generate_code_for_binary_boolean_expression@@Base+0x2100>
   1c5b8:	ldr	r0, [pc, r0]
   1c5bc:	cmp	r0, #0
   1c5c0:	beq	1c6dc <__generate_code_for_binary_boolean_expression@@Base+0x1b60>
   1c5c4:	ldr	r2, [pc, #1716]	; 1cc80 <__generate_code_for_binary_boolean_expression@@Base+0x2104>
   1c5c8:	mov	sl, r1
   1c5cc:	add	r2, pc, r2
   1c5d0:	ldr	r3, [r2, #4]
   1c5d4:	ldr	r4, [pc, #1704]	; 1cc84 <__generate_code_for_binary_boolean_expression@@Base+0x2108>
   1c5d8:	ldr	r4, [pc, r4]
   1c5dc:	ldr	r6, [pc, #1700]	; 1cc88 <__generate_code_for_binary_boolean_expression@@Base+0x210c>
   1c5e0:	add	r6, pc, r6
   1c5e4:	ldrb	r0, [r6]
   1c5e8:	cmp	r0, #0
   1c5ec:	beq	1c6e4 <__generate_code_for_binary_boolean_expression@@Base+0x1b68>
   1c5f0:	ldr	r8, [pc, #1720]	; 1ccb0 <__generate_code_for_binary_boolean_expression@@Base+0x2134>
   1c5f4:	mov	r5, #10551296	; 0xa10000
   1c5f8:	adds	r9, r4, #4
   1c5fc:	add	r8, pc, r8
   1c600:	adc	r2, r3, #0
   1c604:	ldr	r0, [r8, #4]
   1c608:	ldr	r1, [pc, #1700]	; 1ccb4 <__generate_code_for_binary_boolean_expression@@Base+0x2138>
   1c60c:	orr	r5, r5, #16777216	; 0x1000000
   1c610:	ldr	r1, [pc, r1]
   1c614:	subs	r1, r1, r9
   1c618:	sbcs	r0, r0, r2
   1c61c:	bcs	1c7f4 <__generate_code_for_binary_boolean_expression@@Base+0x1c78>
   1c620:	mov	r0, #3
   1c624:	orr	r0, r0, #131072	; 0x20000
   1c628:	adds	r0, r4, r0
   1c62c:	adc	r1, r3, #0
   1c630:	mvn	r2, #0
   1c634:	and	r9, r1, r2
   1c638:	mov	r1, #16646144	; 0xfe0000
   1c63c:	orr	r1, r1, #-16777216	; 0xff000000
   1c640:	and	r4, r0, r1
   1c644:	ldr	r0, [pc, #1652]	; 1ccc0 <__generate_code_for_binary_boolean_expression@@Base+0x2144>
   1c648:	mov	r1, r4
   1c64c:	mov	r7, ip
   1c650:	ldr	r0, [pc, r0]
   1c654:	bl	11f2c <realloc@plt>
   1c658:	ldr	ip, [pc, #1636]	; 1ccc4 <__generate_code_for_binary_boolean_expression@@Base+0x2148>
   1c65c:	ldr	lr, [pc, #1636]	; 1ccc8 <__generate_code_for_binary_boolean_expression@@Base+0x214c>
   1c660:	stm	r8, {r4, r9}
   1c664:	ldr	r1, [pc, #1632]	; 1cccc <__generate_code_for_binary_boolean_expression@@Base+0x2150>
   1c668:	add	ip, pc, ip
   1c66c:	add	lr, pc, lr
   1c670:	add	r1, pc, r1
   1c674:	mov	r2, r0
   1c678:	str	r2, [r1]
   1c67c:	mov	r6, ip
   1c680:	ldrb	ip, [ip]
   1c684:	ldr	r3, [lr, #4]
   1c688:	ldr	r4, [pc, #1600]	; 1ccd0 <__generate_code_for_binary_boolean_expression@@Base+0x2154>
   1c68c:	lsr	r0, r5, #24
   1c690:	mov	r1, r8
   1c694:	ldr	r4, [pc, r4]
   1c698:	str	r2, [sp, #20]
   1c69c:	lsl	r8, r7, #1
   1c6a0:	strb	r5, [r2, r4]!
   1c6a4:	adds	r9, r4, #4
   1c6a8:	strb	r0, [r2, #3]
   1c6ac:	lsr	r0, r5, #16
   1c6b0:	strb	r0, [r2, #2]
   1c6b4:	lsr	r0, r5, #8
   1c6b8:	strb	r0, [r2, #1]
   1c6bc:	adc	r5, r3, #0
   1c6c0:	mov	r0, #0
   1c6c4:	cmp	ip, #1
   1c6c8:	str	r3, [sp, #16]
   1c6cc:	str	r9, [lr]
   1c6d0:	str	r5, [lr, #4]
   1c6d4:	beq	1c848 <__generate_code_for_binary_boolean_expression@@Base+0x1ccc>
   1c6d8:	b	1c998 <__generate_code_for_binary_boolean_expression@@Base+0x1e1c>
   1c6dc:	sub	sp, fp, #28
   1c6e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6e4:	ldr	r0, [pc, #1440]	; 1cc8c <__generate_code_for_binary_boolean_expression@@Base+0x2110>
   1c6e8:	mov	r7, r3
   1c6ec:	adds	r9, r4, #4
   1c6f0:	mov	lr, r2
   1c6f4:	ldr	r0, [pc, r0]
   1c6f8:	str	r0, [sp, #20]
   1c6fc:	ldrb	r1, [r0, r4]!
   1c700:	str	r7, [sp, #16]
   1c704:	ldrb	r5, [r0, #1]
   1c708:	ldrb	r3, [r0, #2]
   1c70c:	ldrb	r0, [r0, #3]
   1c710:	orr	r1, r1, r5, lsl #8
   1c714:	orr	r1, r1, r3, lsl #16
   1c718:	orr	r3, r1, r0, lsl #24
   1c71c:	adc	r5, r7, #0
   1c720:	mov	r7, #0
   1c724:	cmn	r3, #1
   1c728:	str	r9, [r2]
   1c72c:	str	r5, [r2, #4]
   1c730:	beq	1c8f4 <__generate_code_for_binary_boolean_expression@@Base+0x1d78>
   1c734:	mov	r0, #10551296	; 0xa10000
   1c738:	orr	r0, r0, #16777216	; 0x1000000
   1c73c:	cmp	r3, r0
   1c740:	bne	1c900 <__generate_code_for_binary_boolean_expression@@Base+0x1d84>
   1c744:	str	r5, [sp, #8]
   1c748:	ldr	r0, [sp, #20]
   1c74c:	str	r4, [sp, #4]
   1c750:	adds	r5, r4, #8
   1c754:	ldr	r3, [r0, r9]
   1c758:	ldr	r0, [sp, #16]
   1c75c:	mov	r1, r9
   1c760:	adc	r9, r0, #0
   1c764:	cmn	r3, #1
   1c768:	stm	lr, {r5, r9}
   1c76c:	beq	1c90c <__generate_code_for_binary_boolean_expression@@Base+0x1d90>
   1c770:	lsr	r0, r3, #1
   1c774:	mov	r7, ip
   1c778:	cmp	r0, ip
   1c77c:	bne	1c90c <__generate_code_for_binary_boolean_expression@@Base+0x1d90>
   1c780:	lsl	r0, r7, #3
   1c784:	mov	r4, r1
   1c788:	bl	11f68 <malloc@plt>
   1c78c:	mov	r1, r0
   1c790:	cmp	r7, #0
   1c794:	beq	1c934 <__generate_code_for_binary_boolean_expression@@Base+0x1db8>
   1c798:	mov	r0, r7
   1c79c:	str	r7, [sp, #24]
   1c7a0:	str	r1, [sp, #12]
   1c7a4:	ldr	r2, [sp, #20]
   1c7a8:	ldr	r3, [r2, r5]!
   1c7ac:	adds	r5, r5, #8
   1c7b0:	ldr	r2, [r2, #4]
   1c7b4:	str	r3, [r1]
   1c7b8:	adc	r9, r9, #0
   1c7bc:	str	r2, [r1, #4]
   1c7c0:	subs	r0, r0, #1
   1c7c4:	add	r1, r1, #8
   1c7c8:	bne	1c7a4 <__generate_code_for_binary_boolean_expression@@Base+0x1c28>
   1c7cc:	ldr	lr, [pc, #1236]	; 1cca8 <__generate_code_for_binary_boolean_expression@@Base+0x212c>
   1c7d0:	add	lr, pc, lr
   1c7d4:	mov	r0, lr
   1c7d8:	stm	r0, {r5, r9}
   1c7dc:	ldr	ip, [pc, #1224]	; 1ccac <__generate_code_for_binary_boolean_expression@@Base+0x2130>
   1c7e0:	ldr	r0, [sp, #12]
   1c7e4:	add	ip, pc, ip
   1c7e8:	mov	r6, ip
   1c7ec:	ldr	ip, [sp, #24]
   1c7f0:	b	1c950 <__generate_code_for_binary_boolean_expression@@Base+0x1dd4>
   1c7f4:	str	r3, [sp, #16]
   1c7f8:	ldr	r3, [pc, #1208]	; 1ccb8 <__generate_code_for_binary_boolean_expression@@Base+0x213c>
   1c7fc:	mov	lr, r5
   1c800:	mov	r7, ip
   1c804:	lsr	ip, r5, #16
   1c808:	ldr	r3, [pc, r3]
   1c80c:	lsr	r1, r5, #8
   1c810:	str	r3, [sp, #20]
   1c814:	strb	lr, [r3, r4]!
   1c818:	lsr	r0, lr, #24
   1c81c:	strb	r1, [r3, #1]
   1c820:	strb	r0, [r3, #3]
   1c824:	strb	ip, [r3, #2]
   1c828:	ldr	lr, [pc, #1164]	; 1ccbc <__generate_code_for_binary_boolean_expression@@Base+0x2140>
   1c82c:	lsl	r5, r7, #1
   1c830:	add	lr, pc, lr
   1c834:	mov	r1, r8
   1c838:	mov	r8, r5
   1c83c:	str	r9, [lr]
   1c840:	str	r2, [lr, #4]
   1c844:	mov	r5, r2
   1c848:	str	r8, [sp, #24]
   1c84c:	mov	r8, r1
   1c850:	ldr	r0, [sp, #16]
   1c854:	ldr	r2, [r8, #4]
   1c858:	ldr	r3, [pc, #1140]	; 1ccd4 <__generate_code_for_binary_boolean_expression@@Base+0x2158>
   1c85c:	adds	ip, r4, #8
   1c860:	adc	r1, r0, #0
   1c864:	mov	r0, #0
   1c868:	ldr	r3, [pc, r3]
   1c86c:	subs	r3, r3, ip
   1c870:	sbcs	r1, r2, r1
   1c874:	bcs	1c8ec <__generate_code_for_binary_boolean_expression@@Base+0x1d70>
   1c878:	ldr	r5, [pc, #1112]	; 1ccd8 <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   1c87c:	mov	r0, #3
   1c880:	ldr	r1, [sp, #16]
   1c884:	orr	r0, r0, #131072	; 0x20000
   1c888:	adds	r0, r4, r0
   1c88c:	adc	r1, r1, #0
   1c890:	adds	r0, r0, #4
   1c894:	adc	r1, r1, #0
   1c898:	mvn	r2, #0
   1c89c:	and	r9, r1, r2
   1c8a0:	mov	r1, #16646144	; 0xfe0000
   1c8a4:	orr	r1, r1, #-16777216	; 0xff000000
   1c8a8:	and	r4, r0, r1
   1c8ac:	ldr	r0, [sp, #20]
   1c8b0:	mov	r1, r4
   1c8b4:	add	r5, pc, r5
   1c8b8:	bl	11f2c <realloc@plt>
   1c8bc:	ldr	ip, [pc, #1048]	; 1ccdc <__generate_code_for_binary_boolean_expression@@Base+0x2160>
   1c8c0:	ldr	lr, [pc, #1048]	; 1cce0 <__generate_code_for_binary_boolean_expression@@Base+0x2164>
   1c8c4:	stm	r8, {r4, r9}
   1c8c8:	add	lr, pc, lr
   1c8cc:	str	r0, [r5]
   1c8d0:	str	r0, [sp, #20]
   1c8d4:	ldr	r5, [lr, #4]
   1c8d8:	ldr	r9, [pc, #1028]	; 1cce4 <__generate_code_for_binary_boolean_expression@@Base+0x2168>
   1c8dc:	add	ip, pc, ip
   1c8e0:	mov	r6, ip
   1c8e4:	mov	r0, #0
   1c8e8:	ldr	r9, [pc, r9]
   1c8ec:	ldr	r8, [sp, #24]
   1c8f0:	b	1c998 <__generate_code_for_binary_boolean_expression@@Base+0x1e1c>
   1c8f4:	ldr	r1, [sp, #16]
   1c8f8:	mov	r0, #0
   1c8fc:	b	1c964 <__generate_code_for_binary_boolean_expression@@Base+0x1de8>
   1c900:	ldr	r1, [pc, #904]	; 1cc90 <__generate_code_for_binary_boolean_expression@@Base+0x2114>
   1c904:	add	r1, pc, r1
   1c908:	b	1c914 <__generate_code_for_binary_boolean_expression@@Base+0x1d98>
   1c90c:	ldr	r1, [pc, #904]	; 1cc9c <__generate_code_for_binary_boolean_expression@@Base+0x2120>
   1c910:	add	r1, pc, r1
   1c914:	ldr	r0, [pc, #888]	; 1cc94 <__generate_code_for_binary_boolean_expression@@Base+0x2118>
   1c918:	ldr	r0, [pc, r0]
   1c91c:	ldr	r0, [r0]
   1c920:	ldr	r2, [pc, #880]	; 1cc98 <__generate_code_for_binary_boolean_expression@@Base+0x211c>
   1c924:	ldr	r2, [pc, r2]
   1c928:	sub	sp, fp, #28
   1c92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c930:	b	11fd4 <fprintf@plt>
   1c934:	ldr	lr, [pc, #868]	; 1cca0 <__generate_code_for_binary_boolean_expression@@Base+0x2124>
   1c938:	ldr	ip, [pc, #868]	; 1cca4 <__generate_code_for_binary_boolean_expression@@Base+0x2128>
   1c93c:	mov	r0, r1
   1c940:	add	lr, pc, lr
   1c944:	add	ip, pc, ip
   1c948:	mov	r6, ip
   1c94c:	mov	ip, r7
   1c950:	mov	r9, r4
   1c954:	ldr	r5, [sp, #8]
   1c958:	ldr	r4, [sp, #4]
   1c95c:	ldr	r1, [sp, #16]
   1c960:	mov	r7, #0
   1c964:	str	r4, [lr]
   1c968:	str	r1, [lr, #4]
   1c96c:	ldr	r2, [sp, #20]
   1c970:	mov	r1, #1
   1c974:	lsl	r8, ip, #1
   1c978:	strb	r7, [r2, r4]!
   1c97c:	strb	r1, [r2, #3]
   1c980:	mov	r1, #161	; 0xa1
   1c984:	strb	r7, [r2, #1]
   1c988:	strb	r1, [r2, #2]
   1c98c:	str	r9, [lr]
   1c990:	str	r5, [lr, #4]
   1c994:	mov	r7, ip
   1c998:	ldr	r3, [sp, #20]
   1c99c:	lsr	r1, r8, #16
   1c9a0:	mov	ip, r3
   1c9a4:	strb	r8, [r3, r9]!
   1c9a8:	lsr	r4, r8, #24
   1c9ac:	lsr	r2, r8, #8
   1c9b0:	adds	r8, r9, #4
   1c9b4:	strb	r1, [r3, #2]
   1c9b8:	adc	r1, r5, #0
   1c9bc:	cmp	r7, #0
   1c9c0:	strb	r4, [r3, #3]
   1c9c4:	strb	r2, [r3, #1]
   1c9c8:	str	r8, [lr]
   1c9cc:	str	r1, [lr, #4]
   1c9d0:	str	r7, [sp, #24]
   1c9d4:	beq	1cc70 <__generate_code_for_binary_boolean_expression@@Base+0x20f4>
   1c9d8:	ldr	r7, [pc, #776]	; 1cce8 <__generate_code_for_binary_boolean_expression@@Base+0x216c>
   1c9dc:	mov	r4, lr
   1c9e0:	mov	r2, r0
   1c9e4:	add	r7, pc, r7
   1c9e8:	str	r0, [sp, #12]
   1c9ec:	cmp	r0, #0
   1c9f0:	mov	r0, r4
   1c9f4:	str	r2, [sp, #16]
   1c9f8:	beq	1ca04 <__generate_code_for_binary_boolean_expression@@Base+0x1e88>
   1c9fc:	ldrd	r2, [r2]
   1ca00:	b	1ca0c <__generate_code_for_binary_boolean_expression@@Base+0x1e90>
   1ca04:	mov	r2, #0
   1ca08:	mov	r3, #0
   1ca0c:	ldrd	r4, [sl]
   1ca10:	adds	r4, r4, r2
   1ca14:	adc	r5, r5, r3
   1ca18:	strd	r4, [sl]
   1ca1c:	ldrb	r2, [r6]
   1ca20:	str	sl, [sp, #20]
   1ca24:	cmp	r2, #0
   1ca28:	beq	1caf4 <__generate_code_for_binary_boolean_expression@@Base+0x1f78>
   1ca2c:	ldr	r3, [r7, #4]
   1ca30:	ldr	r6, [pc, #692]	; 1ccec <__generate_code_for_binary_boolean_expression@@Base+0x2170>
   1ca34:	adds	r2, r8, #4
   1ca38:	adc	r9, r1, #0
   1ca3c:	ldr	r6, [pc, r6]
   1ca40:	subs	r2, r6, r2
   1ca44:	sbcs	r2, r3, r9
   1ca48:	bcs	1cb30 <__generate_code_for_binary_boolean_expression@@Base+0x1fb4>
   1ca4c:	mov	r2, #3
   1ca50:	orr	r2, r2, #131072	; 0x20000
   1ca54:	adds	r0, r8, r2
   1ca58:	adc	r1, r1, #0
   1ca5c:	mvn	r2, #0
   1ca60:	and	r8, r1, r2
   1ca64:	mov	r1, #16646144	; 0xfe0000
   1ca68:	orr	r1, r1, #-16777216	; 0xff000000
   1ca6c:	and	r6, r0, r1
   1ca70:	mov	r0, ip
   1ca74:	mov	r1, r6
   1ca78:	bl	11f2c <realloc@plt>
   1ca7c:	ldr	ip, [pc, #620]	; 1ccf0 <__generate_code_for_binary_boolean_expression@@Base+0x2174>
   1ca80:	ldr	lr, [pc, #620]	; 1ccf4 <__generate_code_for_binary_boolean_expression@@Base+0x2178>
   1ca84:	stm	r7, {r6, r8}
   1ca88:	mov	r3, r0
   1ca8c:	ldr	r0, [pc, #612]	; 1ccf8 <__generate_code_for_binary_boolean_expression@@Base+0x217c>
   1ca90:	add	lr, pc, lr
   1ca94:	mov	r9, lr
   1ca98:	add	r0, pc, r0
   1ca9c:	add	ip, pc, ip
   1caa0:	str	r3, [r0]
   1caa4:	mov	lr, ip
   1caa8:	ldrb	ip, [ip]
   1caac:	ldr	r1, [r9, #4]
   1cab0:	ldr	r8, [pc, #580]	; 1ccfc <__generate_code_for_binary_boolean_expression@@Base+0x2180>
   1cab4:	mov	r7, r3
   1cab8:	lsr	r2, r4, #24
   1cabc:	ldr	r8, [pc, r8]
   1cac0:	lsr	r6, r4, #16
   1cac4:	strb	r4, [r7, r8]!
   1cac8:	strb	r2, [r7, #3]
   1cacc:	lsr	r2, r4, #8
   1cad0:	strb	r2, [r7, #1]
   1cad4:	adds	r2, r8, #4
   1cad8:	mov	r4, r9
   1cadc:	adc	r9, r1, #0
   1cae0:	cmp	ip, #1
   1cae4:	strb	r6, [r7, #2]
   1cae8:	stm	r4, {r2, r9}
   1caec:	beq	1cb64 <__generate_code_for_binary_boolean_expression@@Base+0x1fe8>
   1caf0:	b	1cc10 <__generate_code_for_binary_boolean_expression@@Base+0x2094>
   1caf4:	mov	r7, ip
   1caf8:	lsr	r2, r4, #24
   1cafc:	strb	r4, [r7, r8]!
   1cb00:	lsr	r9, r4, #16
   1cb04:	strb	r2, [r7, #3]
   1cb08:	adds	r2, r8, #4
   1cb0c:	mov	lr, r6
   1cb10:	lsr	r6, r4, #8
   1cb14:	strb	r9, [r7, #2]
   1cb18:	adc	r9, r1, #0
   1cb1c:	mov	r4, r0
   1cb20:	strb	r6, [r7, #1]
   1cb24:	mov	r3, ip
   1cb28:	stm	r4, {r2, r9}
   1cb2c:	b	1cc10 <__generate_code_for_binary_boolean_expression@@Base+0x2094>
   1cb30:	mov	r6, ip
   1cb34:	lsr	r2, r4, #24
   1cb38:	strb	r4, [r6, r8]!
   1cb3c:	lsr	r9, r4, #16
   1cb40:	strb	r2, [r6, #3]
   1cb44:	adds	r2, r8, #4
   1cb48:	lsr	r7, r4, #8
   1cb4c:	strb	r9, [r6, #2]
   1cb50:	adc	r9, r1, #0
   1cb54:	mov	r4, r0
   1cb58:	strb	r7, [r6, #1]
   1cb5c:	mov	r3, ip
   1cb60:	stm	r4, {r2, r9}
   1cb64:	ldr	lr, [pc, #404]	; 1cd00 <__generate_code_for_binary_boolean_expression@@Base+0x2184>
   1cb68:	mov	r0, r4
   1cb6c:	adds	r7, r8, #8
   1cb70:	add	lr, pc, lr
   1cb74:	adc	ip, r1, #0
   1cb78:	ldr	r4, [lr, #4]
   1cb7c:	ldr	r6, [pc, #384]	; 1cd04 <__generate_code_for_binary_boolean_expression@@Base+0x2188>
   1cb80:	ldr	r6, [pc, r6]
   1cb84:	subs	r7, r6, r7
   1cb88:	sbcs	r7, r4, ip
   1cb8c:	bcs	1cc04 <__generate_code_for_binary_boolean_expression@@Base+0x2088>
   1cb90:	mov	r2, #3
   1cb94:	orr	r2, r2, #131072	; 0x20000
   1cb98:	adds	r0, r8, r2
   1cb9c:	adc	r1, r1, #0
   1cba0:	adds	r0, r0, #4
   1cba4:	adc	r1, r1, #0
   1cba8:	mvn	r2, #0
   1cbac:	and	r7, r1, r2
   1cbb0:	mov	r1, #16646144	; 0xfe0000
   1cbb4:	orr	r1, r1, #-16777216	; 0xff000000
   1cbb8:	and	r6, r0, r1
   1cbbc:	mov	r0, r3
   1cbc0:	mov	r1, r6
   1cbc4:	mov	r8, lr
   1cbc8:	bl	11f2c <realloc@plt>
   1cbcc:	ldr	lr, [pc, #312]	; 1cd0c <__generate_code_for_binary_boolean_expression@@Base+0x2190>
   1cbd0:	strd	r6, [r8]
   1cbd4:	mov	r3, r0
   1cbd8:	add	lr, pc, lr
   1cbdc:	mov	r4, lr
   1cbe0:	ldr	r9, [lr, #4]
   1cbe4:	ldr	r0, [pc, #292]	; 1cd10 <__generate_code_for_binary_boolean_expression@@Base+0x2194>
   1cbe8:	add	r0, pc, r0
   1cbec:	str	r3, [r0]
   1cbf0:	ldr	r2, [pc, #284]	; 1cd14 <__generate_code_for_binary_boolean_expression@@Base+0x2198>
   1cbf4:	ldr	r2, [pc, r2]
   1cbf8:	ldr	lr, [pc, #280]	; 1cd18 <__generate_code_for_binary_boolean_expression@@Base+0x219c>
   1cbfc:	add	lr, pc, lr
   1cc00:	b	1cc10 <__generate_code_for_binary_boolean_expression@@Base+0x2094>
   1cc04:	ldr	lr, [pc, #252]	; 1cd08 <__generate_code_for_binary_boolean_expression@@Base+0x218c>
   1cc08:	mov	r4, r0
   1cc0c:	add	lr, pc, lr
   1cc10:	mov	ip, r3
   1cc14:	lsr	r1, r5, #16
   1cc18:	strb	r5, [r3, r2]!
   1cc1c:	lsr	r0, r5, #24
   1cc20:	lsr	r7, r5, #8
   1cc24:	adds	r8, r2, #4
   1cc28:	strb	r1, [r3, #2]
   1cc2c:	adc	r1, r9, #0
   1cc30:	strb	r0, [r3, #3]
   1cc34:	strb	r7, [r3, #1]
   1cc38:	str	r8, [r4]
   1cc3c:	str	r1, [r4, #4]
   1cc40:	ldr	r0, [sp, #24]
   1cc44:	mov	r6, lr
   1cc48:	subs	r0, r0, #1
   1cc4c:	str	r0, [sp, #24]
   1cc50:	ldr	sl, [sp, #20]
   1cc54:	ldr	r2, [sp, #16]
   1cc58:	ldr	r0, [sp, #12]
   1cc5c:	ldr	r7, [pc, #184]	; 1cd1c <__generate_code_for_binary_boolean_expression@@Base+0x21a0>
   1cc60:	add	sl, sl, #8
   1cc64:	add	r2, r2, #8
   1cc68:	add	r7, pc, r7
   1cc6c:	bne	1c9ec <__generate_code_for_binary_boolean_expression@@Base+0x1e70>
   1cc70:	sub	sp, fp, #28
   1cc74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc78:	b	11ee4 <free@plt>
   1cc7c:	andeq	r5, r1, r0, lsr #24
   1cc80:	andeq	r5, r1, ip, lsl ip
   1cc84:	andeq	r5, r1, r0, lsl ip
   1cc88:	strdeq	r5, [r1], -r4
   1cc8c:	andeq	r5, r1, r8, ror #21
   1cc90:	andeq	r2, r0, ip, ror #17
   1cc94:	andeq	r4, r1, r0, lsr #15
   1cc98:	andeq	r5, r1, ip, lsr #17
   1cc9c:	andeq	r2, r0, sl, lsr #18
   1cca0:	andeq	r5, r1, r8, lsr #17
   1cca4:	muleq	r1, r0, r8
   1cca8:	andeq	r5, r1, r8, lsl sl
   1ccac:	strdeq	r5, [r1], -r0
   1ccb0:	andeq	r5, r1, r4, ror #23
   1ccb4:	ldrdeq	r5, [r1], -r0
   1ccb8:	ldrdeq	r5, [r1], -r4
   1ccbc:			; <UNDEFINED> instruction: 0x000159b8
   1ccc0:	andeq	r5, r1, ip, lsl #23
   1ccc4:	andeq	r5, r1, ip, ror #22
   1ccc8:	andeq	r5, r1, ip, ror fp
   1cccc:	andeq	r5, r1, ip, ror #22
   1ccd0:	andeq	r5, r1, r4, asr fp
   1ccd4:	andeq	r5, r1, r8, ror r9
   1ccd8:	andeq	r5, r1, r8, lsr #18
   1ccdc:	strdeq	r5, [r1], -r8
   1cce0:	andeq	r5, r1, r0, lsr #18
   1cce4:	andeq	r5, r1, r0, lsl #18
   1cce8:	strdeq	r5, [r1], -ip
   1ccec:	andeq	r5, r1, r4, lsr #15
   1ccf0:	andeq	r5, r1, r8, lsr r7
   1ccf4:	andeq	r5, r1, r8, asr r7
   1ccf8:	andeq	r5, r1, r4, asr #14
   1ccfc:	andeq	r5, r1, ip, lsr #14
   1cd00:	andeq	r5, r1, r0, ror r6
   1cd04:	andeq	r5, r1, r0, ror #12
   1cd08:	andeq	r5, r1, r8, asr #11
   1cd0c:	andeq	r5, r1, r0, lsl r6
   1cd10:	strdeq	r5, [r1], -r4
   1cd14:	strdeq	r5, [r1], -r4
   1cd18:	ldrdeq	r5, [r1], -r8
   1cd1c:	andeq	r5, r1, r8, ror r5
   1cd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd24:	add	fp, sp, #28
   1cd28:	sub	sp, sp, #4
   1cd2c:	ldr	r0, [pc, #3180]	; 1d9a0 <__generate_code_for_binary_boolean_expression@@Base+0x2e24>
   1cd30:	ldr	r0, [pc, r0]
   1cd34:	cmp	r0, #0
   1cd38:	beq	1d394 <__generate_code_for_binary_boolean_expression@@Base+0x2818>
   1cd3c:	ldr	sl, [pc, #3168]	; 1d9a4 <__generate_code_for_binary_boolean_expression@@Base+0x2e28>
   1cd40:	add	sl, pc, sl
   1cd44:	ldr	r6, [sl, #4]
   1cd48:	ldr	r5, [pc, #3160]	; 1d9a8 <__generate_code_for_binary_boolean_expression@@Base+0x2e2c>
   1cd4c:	ldr	r5, [pc, r5]
   1cd50:	ldr	r8, [pc, #3156]	; 1d9ac <__generate_code_for_binary_boolean_expression@@Base+0x2e30>
   1cd54:	add	r8, pc, r8
   1cd58:	ldrb	r0, [r8]
   1cd5c:	cmp	r0, #0
   1cd60:	beq	1ce24 <__generate_code_for_binary_boolean_expression@@Base+0x22a8>
   1cd64:	ldr	r9, [pc, #3164]	; 1d9c8 <__generate_code_for_binary_boolean_expression@@Base+0x2e4c>
   1cd68:	adds	r2, r5, #4
   1cd6c:	adc	ip, r6, #0
   1cd70:	add	r9, pc, r9
   1cd74:	ldr	r0, [r9, #4]
   1cd78:	ldr	r3, [pc, #3148]	; 1d9cc <__generate_code_for_binary_boolean_expression@@Base+0x2e50>
   1cd7c:	ldr	r3, [pc, r3]
   1cd80:	subs	r3, r3, r2
   1cd84:	sbcs	r0, r0, ip
   1cd88:	bcs	1ce78 <__generate_code_for_binary_boolean_expression@@Base+0x22fc>
   1cd8c:	mov	r0, #7
   1cd90:	orr	r0, r0, #131072	; 0x20000
   1cd94:	adds	r0, r5, r0
   1cd98:	adc	r1, r6, #0
   1cd9c:	subs	r0, r0, #4
   1cda0:	sbc	r1, r1, #0
   1cda4:	mvn	r2, #0
   1cda8:	and	r5, r1, r2
   1cdac:	mov	r1, #16646144	; 0xfe0000
   1cdb0:	orr	r1, r1, #-16777216	; 0xff000000
   1cdb4:	ldr	r4, [pc, #3096]	; 1d9d4 <__generate_code_for_binary_boolean_expression@@Base+0x2e58>
   1cdb8:	and	r6, r0, r1
   1cdbc:	ldr	r0, [pc, #3092]	; 1d9d8 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   1cdc0:	mov	r1, r6
   1cdc4:	add	r4, pc, r4
   1cdc8:	ldr	r0, [pc, r0]
   1cdcc:	bl	11f2c <realloc@plt>
   1cdd0:	str	r6, [r9]
   1cdd4:	str	r5, [r9, #4]
   1cdd8:	str	r0, [r4]
   1cddc:	ldrb	r3, [r8]
   1cde0:	ldr	r6, [sl, #4]
   1cde4:	ldr	r5, [pc, #3056]	; 1d9dc <__generate_code_for_binary_boolean_expression@@Base+0x2e60>
   1cde8:	mov	r2, r0
   1cdec:	mov	r1, #0
   1cdf0:	mov	r7, #161	; 0xa1
   1cdf4:	ldr	r5, [pc, r5]
   1cdf8:	strb	r1, [r2, r5]!
   1cdfc:	strb	r7, [r2, #3]
   1ce00:	strb	r1, [r2, #2]
   1ce04:	strb	r1, [r2, #1]
   1ce08:	adds	r2, r5, #4
   1ce0c:	adc	ip, r6, #0
   1ce10:	mov	r7, #1
   1ce14:	cmp	r3, #1
   1ce18:	stm	sl, {r2, ip}
   1ce1c:	beq	1cea0 <__generate_code_for_binary_boolean_expression@@Base+0x2324>
   1ce20:	b	1d078 <__generate_code_for_binary_boolean_expression@@Base+0x24fc>
   1ce24:	ldr	r0, [pc, #2948]	; 1d9b0 <__generate_code_for_binary_boolean_expression@@Base+0x2e34>
   1ce28:	ldr	r0, [pc, r0]
   1ce2c:	mov	r1, r0
   1ce30:	ldrb	r2, [r1, r5]!
   1ce34:	ldrb	r3, [r1, #1]
   1ce38:	ldrb	r7, [r1, #2]
   1ce3c:	ldrb	r1, [r1, #3]
   1ce40:	orr	r2, r2, r3, lsl #8
   1ce44:	orr	r2, r2, r7, lsl #16
   1ce48:	orr	r3, r2, r1, lsl #24
   1ce4c:	adds	r2, r5, #4
   1ce50:	adc	ip, r6, #0
   1ce54:	cmp	r3, #-1593835520	; 0xa1000000
   1ce58:	stm	sl, {r2, ip}
   1ce5c:	beq	1d018 <__generate_code_for_binary_boolean_expression@@Base+0x249c>
   1ce60:	mov	r7, #1
   1ce64:	cmn	r3, #1
   1ce68:	beq	1d058 <__generate_code_for_binary_boolean_expression@@Base+0x24dc>
   1ce6c:	ldr	r1, [pc, #2880]	; 1d9b4 <__generate_code_for_binary_boolean_expression@@Base+0x2e38>
   1ce70:	add	r1, pc, r1
   1ce74:	b	1d758 <__generate_code_for_binary_boolean_expression@@Base+0x2bdc>
   1ce78:	ldr	r0, [pc, #2896]	; 1d9d0 <__generate_code_for_binary_boolean_expression@@Base+0x2e54>
   1ce7c:	mov	r3, #0
   1ce80:	mov	r4, #161	; 0xa1
   1ce84:	ldr	r0, [pc, r0]
   1ce88:	mov	r7, r0
   1ce8c:	strb	r3, [r7, r5]!
   1ce90:	strb	r4, [r7, #3]
   1ce94:	strb	r3, [r7, #2]
   1ce98:	strb	r3, [r7, #1]
   1ce9c:	stm	sl, {r2, ip}
   1cea0:	ldr	r4, [r9, #4]
   1cea4:	ldr	r1, [pc, #2868]	; 1d9e0 <__generate_code_for_binary_boolean_expression@@Base+0x2e64>
   1cea8:	adds	r3, r5, #8
   1ceac:	adc	r7, r6, #0
   1ceb0:	ldr	r1, [pc, r1]
   1ceb4:	subs	r1, r1, r3
   1ceb8:	sbcs	r1, r4, r7
   1cebc:	bcs	1cf48 <__generate_code_for_binary_boolean_expression@@Base+0x23cc>
   1cec0:	mov	r1, #7
   1cec4:	orr	r1, r1, #131072	; 0x20000
   1cec8:	adds	r1, r5, r1
   1cecc:	adc	r2, r6, #0
   1ced0:	mvn	r3, #0
   1ced4:	and	r5, r2, r3
   1ced8:	mov	r2, #16646144	; 0xfe0000
   1cedc:	orr	r2, r2, #-16777216	; 0xff000000
   1cee0:	ldr	r4, [pc, #2812]	; 1d9e4 <__generate_code_for_binary_boolean_expression@@Base+0x2e68>
   1cee4:	and	r6, r1, r2
   1cee8:	mov	r1, r6
   1ceec:	add	r4, pc, r4
   1cef0:	bl	11f2c <realloc@plt>
   1cef4:	str	r6, [r9]
   1cef8:	str	r5, [r9, #4]
   1cefc:	str	r0, [r4]
   1cf00:	ldrb	r1, [r8]
   1cf04:	ldr	ip, [sl, #4]
   1cf08:	ldr	r2, [pc, #2776]	; 1d9e8 <__generate_code_for_binary_boolean_expression@@Base+0x2e6c>
   1cf0c:	mov	r7, r0
   1cf10:	mov	r3, #9
   1cf14:	ldr	r2, [pc, r2]
   1cf18:	strb	r3, [r7, r2]!
   1cf1c:	mov	r3, #0
   1cf20:	strb	r3, [r7, #3]
   1cf24:	strb	r3, [r7, #2]
   1cf28:	strb	r3, [r7, #1]
   1cf2c:	adds	r3, r2, #4
   1cf30:	adc	r5, ip, #0
   1cf34:	mov	r7, #1
   1cf38:	cmp	r1, #1
   1cf3c:	stm	sl, {r3, r5}
   1cf40:	beq	1cf70 <__generate_code_for_binary_boolean_expression@@Base+0x23f4>
   1cf44:	b	1d0a0 <__generate_code_for_binary_boolean_expression@@Base+0x2524>
   1cf48:	mov	r3, r0
   1cf4c:	mov	r1, #9
   1cf50:	strb	r1, [r3, r2]!
   1cf54:	mov	r1, #0
   1cf58:	strb	r1, [r3, #3]
   1cf5c:	strb	r1, [r3, #2]
   1cf60:	strb	r1, [r3, #1]
   1cf64:	adds	r3, r2, #4
   1cf68:	adc	r5, ip, #0
   1cf6c:	stm	sl, {r3, r5}
   1cf70:	ldr	r6, [r9, #4]
   1cf74:	ldr	r4, [pc, #2672]	; 1d9ec <__generate_code_for_binary_boolean_expression@@Base+0x2e70>
   1cf78:	adds	r1, r2, #8
   1cf7c:	adc	r7, ip, #0
   1cf80:	ldr	r4, [pc, r4]
   1cf84:	subs	r1, r4, r1
   1cf88:	sbcs	r1, r6, r7
   1cf8c:	bcs	1d464 <__generate_code_for_binary_boolean_expression@@Base+0x28e8>
   1cf90:	mov	r1, #7
   1cf94:	orr	r1, r1, #131072	; 0x20000
   1cf98:	adds	r1, r2, r1
   1cf9c:	adc	r2, ip, #0
   1cfa0:	mvn	r3, #0
   1cfa4:	and	r5, r2, r3
   1cfa8:	mov	r2, #16646144	; 0xfe0000
   1cfac:	orr	r2, r2, #-16777216	; 0xff000000
   1cfb0:	ldr	r4, [pc, #2616]	; 1d9f0 <__generate_code_for_binary_boolean_expression@@Base+0x2e74>
   1cfb4:	and	r6, r1, r2
   1cfb8:	mov	r1, r6
   1cfbc:	add	r4, pc, r4
   1cfc0:	bl	11f2c <realloc@plt>
   1cfc4:	str	r6, [r9]
   1cfc8:	str	r5, [r9, #4]
   1cfcc:	str	r0, [r4]
   1cfd0:	ldrb	r2, [r8]
   1cfd4:	ldr	r5, [sl, #4]
   1cfd8:	ldr	r3, [pc, #2580]	; 1d9f4 <__generate_code_for_binary_boolean_expression@@Base+0x2e78>
   1cfdc:	mov	r7, r0
   1cfe0:	mov	r1, #0
   1cfe4:	ldr	r3, [pc, r3]
   1cfe8:	adds	r6, r3, #4
   1cfec:	strb	r1, [r7, r3]!
   1cff0:	strb	r1, [r7, #3]
   1cff4:	strb	r1, [r7, #2]
   1cff8:	strb	r1, [r7, #1]
   1cffc:	adc	r1, r5, #0
   1d000:	mov	r7, #1
   1d004:	cmp	r2, #1
   1d008:	str	r6, [sl]
   1d00c:	str	r1, [sl, #4]
   1d010:	bne	1d0c8 <__generate_code_for_binary_boolean_expression@@Base+0x254c>
   1d014:	b	1d48c <__generate_code_for_binary_boolean_expression@@Base+0x2910>
   1d018:	ldr	r3, [r0, r2]
   1d01c:	adds	r4, r5, #8
   1d020:	adc	r7, r6, #0
   1d024:	cmp	r3, #9
   1d028:	stm	sl, {r4, r7}
   1d02c:	bne	1d750 <__generate_code_for_binary_boolean_expression@@Base+0x2bd4>
   1d030:	ldr	r3, [pc, #2444]	; 1d9c4 <__generate_code_for_binary_boolean_expression@@Base+0x2e48>
   1d034:	adds	r4, r5, #20
   1d038:	adc	r7, r6, #0
   1d03c:	add	r3, pc, r3
   1d040:	add	r6, r0, r5
   1d044:	ldrb	r3, [r3]
   1d048:	ldr	r6, [r6, #16]
   1d04c:	stm	sl, {r4, r7}
   1d050:	eor	r3, r3, #1
   1d054:	add	r7, r6, r3
   1d058:	mov	r6, r0
   1d05c:	mov	r3, #0
   1d060:	strb	r3, [r6, r5]!
   1d064:	mov	r5, #161	; 0xa1
   1d068:	strb	r5, [r6, #3]
   1d06c:	strb	r3, [r6, #2]
   1d070:	strb	r3, [r6, #1]
   1d074:	stm	sl, {r2, ip}
   1d078:	mov	r3, r0
   1d07c:	mov	r1, #9
   1d080:	strb	r1, [r3, r2]!
   1d084:	mov	r1, #0
   1d088:	strb	r1, [r3, #3]
   1d08c:	strb	r1, [r3, #2]
   1d090:	strb	r1, [r3, #1]
   1d094:	adds	r3, r2, #4
   1d098:	adc	r5, ip, #0
   1d09c:	stm	sl, {r3, r5}
   1d0a0:	mov	r2, r0
   1d0a4:	mov	r1, #0
   1d0a8:	strb	r1, [r2, r3]!
   1d0ac:	adds	r6, r3, #4
   1d0b0:	strb	r1, [r2, #3]
   1d0b4:	strb	r1, [r2, #2]
   1d0b8:	strb	r1, [r2, #1]
   1d0bc:	adc	r1, r5, #0
   1d0c0:	str	r6, [sl]
   1d0c4:	str	r1, [sl, #4]
   1d0c8:	mov	r3, r0
   1d0cc:	mov	r2, #0
   1d0d0:	strb	r2, [r3, r6]!
   1d0d4:	strb	r2, [r3, #3]
   1d0d8:	strb	r2, [r3, #2]
   1d0dc:	strb	r2, [r3, #1]
   1d0e0:	adds	r2, r6, #4
   1d0e4:	adc	r3, r1, #0
   1d0e8:	strd	r2, [sl]
   1d0ec:	lsr	r1, r7, #24
   1d0f0:	strb	r7, [r0, r2]!
   1d0f4:	lsr	r6, r7, #16
   1d0f8:	lsr	r5, r7, #8
   1d0fc:	strb	r1, [r0, #3]
   1d100:	strb	r6, [r0, #2]
   1d104:	strb	r5, [r0, #1]
   1d108:	ldrb	r0, [r8]
   1d10c:	adds	r4, r2, #4
   1d110:	adc	r5, r3, #0
   1d114:	cmp	r0, #0
   1d118:	strd	r4, [sl]
   1d11c:	beq	1d1d0 <__generate_code_for_binary_boolean_expression@@Base+0x2654>
   1d120:	ldr	r9, [pc, #2284]	; 1da14 <__generate_code_for_binary_boolean_expression@@Base+0x2e98>
   1d124:	adds	r0, r2, #8
   1d128:	adc	r1, r3, #0
   1d12c:	add	r9, pc, r9
   1d130:	ldr	r7, [r9, #4]
   1d134:	ldr	r6, [pc, #2268]	; 1da18 <__generate_code_for_binary_boolean_expression@@Base+0x2e9c>
   1d138:	ldr	r6, [pc, r6]
   1d13c:	subs	r0, r6, r0
   1d140:	sbcs	r0, r7, r1
   1d144:	bcs	1d39c <__generate_code_for_binary_boolean_expression@@Base+0x2820>
   1d148:	mov	r0, #7
   1d14c:	orr	r0, r0, #131072	; 0x20000
   1d150:	adds	r0, r2, r0
   1d154:	adc	r1, r3, #0
   1d158:	mvn	r2, #0
   1d15c:	and	r5, r1, r2
   1d160:	mov	r1, #16646144	; 0xfe0000
   1d164:	orr	r1, r1, #-16777216	; 0xff000000
   1d168:	ldr	r4, [pc, #2268]	; 1da4c <__generate_code_for_binary_boolean_expression@@Base+0x2ed0>
   1d16c:	and	r6, r0, r1
   1d170:	ldr	r0, [pc, #2264]	; 1da50 <__generate_code_for_binary_boolean_expression@@Base+0x2ed4>
   1d174:	mov	r1, r6
   1d178:	add	r4, pc, r4
   1d17c:	ldr	r0, [pc, r0]
   1d180:	bl	11f2c <realloc@plt>
   1d184:	str	r6, [r9]
   1d188:	str	r5, [r9, #4]
   1d18c:	str	r0, [r4]
   1d190:	ldrb	r1, [r8]
   1d194:	ldr	r5, [sl, #4]
   1d198:	ldr	r4, [pc, #2228]	; 1da54 <__generate_code_for_binary_boolean_expression@@Base+0x2ed8>
   1d19c:	mov	r3, r0
   1d1a0:	mov	r2, #0
   1d1a4:	ldr	r4, [pc, r4]
   1d1a8:	strb	r2, [r3, r4]!
   1d1ac:	strb	r2, [r3, #3]
   1d1b0:	strb	r2, [r3, #2]
   1d1b4:	strb	r2, [r3, #1]
   1d1b8:	adds	r2, r4, #4
   1d1bc:	adc	r3, r5, #0
   1d1c0:	cmp	r1, #0
   1d1c4:	strd	r2, [sl]
   1d1c8:	beq	1d1fc <__generate_code_for_binary_boolean_expression@@Base+0x2680>
   1d1cc:	b	1d3c8 <__generate_code_for_binary_boolean_expression@@Base+0x284c>
   1d1d0:	ldr	r0, [pc, #2104]	; 1da10 <__generate_code_for_binary_boolean_expression@@Base+0x2e94>
   1d1d4:	adds	r2, r2, #8
   1d1d8:	mov	r1, #0
   1d1dc:	adc	r3, r3, #0
   1d1e0:	ldr	r0, [pc, r0]
   1d1e4:	mov	r7, r0
   1d1e8:	strb	r1, [r7, r4]!
   1d1ec:	strb	r1, [r7, #3]
   1d1f0:	strb	r1, [r7, #2]
   1d1f4:	strb	r1, [r7, #1]
   1d1f8:	strd	r2, [sl]
   1d1fc:	mov	r7, r0
   1d200:	mov	r1, #0
   1d204:	strb	r1, [r7, r2]!
   1d208:	strb	r1, [r7, #3]
   1d20c:	strb	r1, [r7, #2]
   1d210:	strb	r1, [r7, #1]
   1d214:	adds	r1, r2, #4
   1d218:	adc	r5, r3, #0
   1d21c:	stm	sl, {r1, r5}
   1d220:	mov	r3, r0
   1d224:	mov	r2, #0
   1d228:	strb	r2, [r3, r1]!
   1d22c:	strb	r2, [r3, #3]
   1d230:	strb	r2, [r3, #2]
   1d234:	strb	r2, [r3, #1]
   1d238:	adds	r2, r1, #4
   1d23c:	adc	r3, r5, #0
   1d240:	strd	r2, [sl]
   1d244:	mov	r7, r0
   1d248:	mov	r1, #0
   1d24c:	strb	r1, [r7, r2]!
   1d250:	strb	r1, [r7, #3]
   1d254:	strb	r1, [r7, #2]
   1d258:	strb	r1, [r7, #1]
   1d25c:	adds	r1, r2, #4
   1d260:	adc	r5, r3, #0
   1d264:	stm	sl, {r1, r5}
   1d268:	mov	r3, r0
   1d26c:	mov	r2, #0
   1d270:	strb	r2, [r3, r1]!
   1d274:	adds	r4, r1, #4
   1d278:	strb	r2, [r3, #3]
   1d27c:	strb	r2, [r3, #2]
   1d280:	strb	r2, [r3, #1]
   1d284:	adc	r3, r5, #0
   1d288:	str	r4, [sl]
   1d28c:	str	r3, [sl, #4]
   1d290:	mov	r2, r0
   1d294:	mov	r1, #0
   1d298:	strb	r1, [r2, r4]!
   1d29c:	strb	r1, [r2, #3]
   1d2a0:	strb	r1, [r2, #2]
   1d2a4:	strb	r1, [r2, #1]
   1d2a8:	adds	r2, r4, #4
   1d2ac:	adc	r1, r3, #0
   1d2b0:	str	r2, [sl]
   1d2b4:	str	r1, [sl, #4]
   1d2b8:	mov	r3, r0
   1d2bc:	mov	r4, #0
   1d2c0:	strb	r4, [r3, r2]!
   1d2c4:	mov	r7, #163	; 0xa3
   1d2c8:	strb	r7, [r3, #3]
   1d2cc:	strb	r4, [r3, #2]
   1d2d0:	strb	r4, [r3, #1]
   1d2d4:	ldrb	r7, [r8]
   1d2d8:	adds	r6, r2, #4
   1d2dc:	adc	r3, r1, #0
   1d2e0:	cmp	r7, #1
   1d2e4:	str	r6, [sl]
   1d2e8:	str	r3, [sl, #4]
   1d2ec:	bne	1d360 <__generate_code_for_binary_boolean_expression@@Base+0x27e4>
   1d2f0:	ldr	r8, [pc, #1852]	; 1da34 <__generate_code_for_binary_boolean_expression@@Base+0x2eb8>
   1d2f4:	adds	lr, r2, #8
   1d2f8:	adc	ip, r1, #0
   1d2fc:	add	r8, pc, r8
   1d300:	ldr	r5, [r8, #4]
   1d304:	ldr	r7, [pc, #1836]	; 1da38 <__generate_code_for_binary_boolean_expression@@Base+0x2ebc>
   1d308:	ldr	r7, [pc, r7]
   1d30c:	subs	r7, r7, lr
   1d310:	sbcs	r7, r5, ip
   1d314:	bcs	1d360 <__generate_code_for_binary_boolean_expression@@Base+0x27e4>
   1d318:	mov	r3, #7
   1d31c:	orr	r3, r3, #131072	; 0x20000
   1d320:	adds	r2, r2, r3
   1d324:	adc	r1, r1, #0
   1d328:	mvn	r3, #0
   1d32c:	and	r7, r1, r3
   1d330:	mov	r1, #16646144	; 0xfe0000
   1d334:	orr	r1, r1, #-16777216	; 0xff000000
   1d338:	ldr	r5, [pc, #1788]	; 1da3c <__generate_code_for_binary_boolean_expression@@Base+0x2ec0>
   1d33c:	and	r6, r2, r1
   1d340:	mov	r1, r6
   1d344:	add	r5, pc, r5
   1d348:	bl	11f2c <realloc@plt>
   1d34c:	strd	r6, [r8]
   1d350:	str	r0, [r5]
   1d354:	ldr	r3, [sl, #4]
   1d358:	ldr	r6, [pc, #1760]	; 1da40 <__generate_code_for_binary_boolean_expression@@Base+0x2ec4>
   1d35c:	ldr	r6, [pc, r6]
   1d360:	ldr	r0, [pc, #1756]	; 1da44 <__generate_code_for_binary_boolean_expression@@Base+0x2ec8>
   1d364:	ldr	r1, [pc, #1756]	; 1da48 <__generate_code_for_binary_boolean_expression@@Base+0x2ecc>
   1d368:	adds	r2, r6, #4
   1d36c:	add	r0, pc, r0
   1d370:	adc	r3, r3, #0
   1d374:	ldr	r1, [pc, r1]
   1d378:	strb	r4, [r1, r6]!
   1d37c:	strb	r4, [r1, #3]
   1d380:	strb	r4, [r1, #2]
   1d384:	strb	r4, [r1, #1]
   1d388:	mov	r1, #1
   1d38c:	strd	r2, [sl]
   1d390:	strb	r1, [r0]
   1d394:	sub	sp, fp, #28
   1d398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d39c:	ldr	r0, [pc, #1656]	; 1da1c <__generate_code_for_binary_boolean_expression@@Base+0x2ea0>
   1d3a0:	adds	r2, r2, #8
   1d3a4:	mov	r1, #0
   1d3a8:	adc	r3, r3, #0
   1d3ac:	ldr	r0, [pc, r0]
   1d3b0:	mov	r7, r0
   1d3b4:	strb	r1, [r7, r4]!
   1d3b8:	strb	r1, [r7, #3]
   1d3bc:	strb	r1, [r7, #2]
   1d3c0:	strb	r1, [r7, #1]
   1d3c4:	strd	r2, [sl]
   1d3c8:	ldr	r6, [r9, #4]
   1d3cc:	ldr	r1, [pc, #1668]	; 1da58 <__generate_code_for_binary_boolean_expression@@Base+0x2edc>
   1d3d0:	adds	ip, r4, #8
   1d3d4:	adc	r7, r5, #0
   1d3d8:	ldr	r1, [pc, r1]
   1d3dc:	subs	r1, r1, ip
   1d3e0:	sbcs	r1, r6, r7
   1d3e4:	bcs	1d530 <__generate_code_for_binary_boolean_expression@@Base+0x29b4>
   1d3e8:	mov	r1, #7
   1d3ec:	orr	r1, r1, #131072	; 0x20000
   1d3f0:	adds	r1, r4, r1
   1d3f4:	adc	r2, r5, #0
   1d3f8:	mvn	r3, #0
   1d3fc:	and	r5, r2, r3
   1d400:	mov	r2, #16646144	; 0xfe0000
   1d404:	orr	r2, r2, #-16777216	; 0xff000000
   1d408:	ldr	r6, [pc, #1612]	; 1da5c <__generate_code_for_binary_boolean_expression@@Base+0x2ee0>
   1d40c:	and	r4, r1, r2
   1d410:	mov	r1, r4
   1d414:	add	r6, pc, r6
   1d418:	bl	11f2c <realloc@plt>
   1d41c:	str	r0, [r6]
   1d420:	strd	r4, [r9]
   1d424:	ldrb	r7, [r8]
   1d428:	ldr	r3, [sl, #4]
   1d42c:	ldr	r2, [pc, #1580]	; 1da60 <__generate_code_for_binary_boolean_expression@@Base+0x2ee4>
   1d430:	mov	r6, r0
   1d434:	mov	r1, #0
   1d438:	ldr	r2, [pc, r2]
   1d43c:	strb	r1, [r6, r2]!
   1d440:	strb	r1, [r6, #3]
   1d444:	strb	r1, [r6, #2]
   1d448:	strb	r1, [r6, #1]
   1d44c:	adds	r1, r2, #4
   1d450:	adc	r5, r3, #0
   1d454:	cmp	r7, #1
   1d458:	stm	sl, {r1, r5}
   1d45c:	bne	1d220 <__generate_code_for_binary_boolean_expression@@Base+0x26a4>
   1d460:	b	1d554 <__generate_code_for_binary_boolean_expression@@Base+0x29d8>
   1d464:	mov	r2, r0
   1d468:	mov	r1, #0
   1d46c:	strb	r1, [r2, r3]!
   1d470:	adds	r6, r3, #4
   1d474:	strb	r1, [r2, #3]
   1d478:	strb	r1, [r2, #2]
   1d47c:	strb	r1, [r2, #1]
   1d480:	adc	r1, r5, #0
   1d484:	str	r6, [sl]
   1d488:	str	r1, [sl, #4]
   1d48c:	ldr	r4, [r9, #4]
   1d490:	ldr	r2, [pc, #1376]	; 1d9f8 <__generate_code_for_binary_boolean_expression@@Base+0x2e7c>
   1d494:	adds	ip, r3, #8
   1d498:	adc	r7, r5, #0
   1d49c:	ldr	r2, [pc, r2]
   1d4a0:	subs	r2, r2, ip
   1d4a4:	sbcs	r2, r4, r7
   1d4a8:	bcs	1d5f4 <__generate_code_for_binary_boolean_expression@@Base+0x2a78>
   1d4ac:	mov	r1, #7
   1d4b0:	orr	r1, r1, #131072	; 0x20000
   1d4b4:	adds	r1, r3, r1
   1d4b8:	adc	r2, r5, #0
   1d4bc:	mvn	r3, #0
   1d4c0:	and	r5, r2, r3
   1d4c4:	mov	r2, #16646144	; 0xfe0000
   1d4c8:	orr	r2, r2, #-16777216	; 0xff000000
   1d4cc:	ldr	r4, [pc, #1320]	; 1d9fc <__generate_code_for_binary_boolean_expression@@Base+0x2e80>
   1d4d0:	and	r6, r1, r2
   1d4d4:	mov	r1, r6
   1d4d8:	add	r4, pc, r4
   1d4dc:	bl	11f2c <realloc@plt>
   1d4e0:	str	r6, [r9]
   1d4e4:	str	r5, [r9, #4]
   1d4e8:	str	r0, [r4]
   1d4ec:	ldrb	r5, [r8]
   1d4f0:	ldr	r1, [sl, #4]
   1d4f4:	ldr	r6, [pc, #1284]	; 1da00 <__generate_code_for_binary_boolean_expression@@Base+0x2e84>
   1d4f8:	mov	r3, r0
   1d4fc:	mov	r2, #0
   1d500:	mov	r7, #1
   1d504:	ldr	r6, [pc, r6]
   1d508:	strb	r2, [r3, r6]!
   1d50c:	strb	r2, [r3, #3]
   1d510:	strb	r2, [r3, #2]
   1d514:	strb	r2, [r3, #1]
   1d518:	adds	r2, r6, #4
   1d51c:	adc	r3, r1, #0
   1d520:	cmp	r5, #1
   1d524:	strd	r2, [sl]
   1d528:	bne	1d0ec <__generate_code_for_binary_boolean_expression@@Base+0x2570>
   1d52c:	b	1d618 <__generate_code_for_binary_boolean_expression@@Base+0x2a9c>
   1d530:	mov	r7, r0
   1d534:	mov	r1, #0
   1d538:	strb	r1, [r7, r2]!
   1d53c:	strb	r1, [r7, #3]
   1d540:	strb	r1, [r7, #2]
   1d544:	strb	r1, [r7, #1]
   1d548:	adds	r1, r2, #4
   1d54c:	adc	r5, r3, #0
   1d550:	stm	sl, {r1, r5}
   1d554:	ldr	r4, [r9, #4]
   1d558:	ldr	r6, [pc, #1284]	; 1da64 <__generate_code_for_binary_boolean_expression@@Base+0x2ee8>
   1d55c:	adds	r7, r2, #8
   1d560:	adc	ip, r3, #0
   1d564:	ldr	r6, [pc, r6]
   1d568:	subs	r7, r6, r7
   1d56c:	sbcs	r7, r4, ip
   1d570:	bcs	1d68c <__generate_code_for_binary_boolean_expression@@Base+0x2b10>
   1d574:	mov	r1, #7
   1d578:	orr	r1, r1, #131072	; 0x20000
   1d57c:	adds	r1, r2, r1
   1d580:	adc	r2, r3, #0
   1d584:	mvn	r3, #0
   1d588:	and	r5, r2, r3
   1d58c:	mov	r2, #16646144	; 0xfe0000
   1d590:	orr	r2, r2, #-16777216	; 0xff000000
   1d594:	ldr	r4, [pc, #1228]	; 1da68 <__generate_code_for_binary_boolean_expression@@Base+0x2eec>
   1d598:	and	r6, r1, r2
   1d59c:	mov	r1, r6
   1d5a0:	add	r4, pc, r4
   1d5a4:	bl	11f2c <realloc@plt>
   1d5a8:	str	r6, [r9]
   1d5ac:	str	r5, [r9, #4]
   1d5b0:	str	r0, [r4]
   1d5b4:	ldrb	r7, [r8]
   1d5b8:	ldr	r5, [sl, #4]
   1d5bc:	ldr	r1, [pc, #1192]	; 1da6c <__generate_code_for_binary_boolean_expression@@Base+0x2ef0>
   1d5c0:	mov	r3, r0
   1d5c4:	mov	r2, #0
   1d5c8:	ldr	r1, [pc, r1]
   1d5cc:	strb	r2, [r3, r1]!
   1d5d0:	strb	r2, [r3, #3]
   1d5d4:	strb	r2, [r3, #2]
   1d5d8:	strb	r2, [r3, #1]
   1d5dc:	adds	r2, r1, #4
   1d5e0:	adc	r3, r5, #0
   1d5e4:	cmp	r7, #1
   1d5e8:	strd	r2, [sl]
   1d5ec:	bne	1d244 <__generate_code_for_binary_boolean_expression@@Base+0x26c8>
   1d5f0:	b	1d6b0 <__generate_code_for_binary_boolean_expression@@Base+0x2b34>
   1d5f4:	mov	r3, r0
   1d5f8:	mov	r2, #0
   1d5fc:	strb	r2, [r3, r6]!
   1d600:	strb	r2, [r3, #3]
   1d604:	strb	r2, [r3, #2]
   1d608:	strb	r2, [r3, #1]
   1d60c:	adds	r2, r6, #4
   1d610:	adc	r3, r1, #0
   1d614:	strd	r2, [sl]
   1d618:	ldr	r4, [r9, #4]
   1d61c:	ldr	r5, [pc, #992]	; 1da04 <__generate_code_for_binary_boolean_expression@@Base+0x2e88>
   1d620:	adds	lr, r6, #8
   1d624:	adc	ip, r1, #0
   1d628:	mov	r7, #1
   1d62c:	ldr	r5, [pc, r5]
   1d630:	subs	r5, r5, lr
   1d634:	sbcs	r5, r4, ip
   1d638:	bcs	1d0ec <__generate_code_for_binary_boolean_expression@@Base+0x2570>
   1d63c:	mov	r2, #7
   1d640:	orr	r2, r2, #131072	; 0x20000
   1d644:	adds	r2, r6, r2
   1d648:	adc	r1, r1, #0
   1d64c:	mvn	r3, #0
   1d650:	and	r5, r1, r3
   1d654:	mov	r1, #16646144	; 0xfe0000
   1d658:	orr	r1, r1, #-16777216	; 0xff000000
   1d65c:	ldr	r4, [pc, #932]	; 1da08 <__generate_code_for_binary_boolean_expression@@Base+0x2e8c>
   1d660:	and	r6, r2, r1
   1d664:	mov	r1, r6
   1d668:	add	r4, pc, r4
   1d66c:	bl	11f2c <realloc@plt>
   1d670:	str	r6, [r9]
   1d674:	str	r5, [r9, #4]
   1d678:	str	r0, [r4]
   1d67c:	ldr	r3, [sl, #4]
   1d680:	ldr	r2, [pc, #900]	; 1da0c <__generate_code_for_binary_boolean_expression@@Base+0x2e90>
   1d684:	ldr	r2, [pc, r2]
   1d688:	b	1d0ec <__generate_code_for_binary_boolean_expression@@Base+0x2570>
   1d68c:	mov	r3, r0
   1d690:	mov	r2, #0
   1d694:	strb	r2, [r3, r1]!
   1d698:	strb	r2, [r3, #3]
   1d69c:	strb	r2, [r3, #2]
   1d6a0:	strb	r2, [r3, #1]
   1d6a4:	adds	r2, r1, #4
   1d6a8:	adc	r3, r5, #0
   1d6ac:	strd	r2, [sl]
   1d6b0:	ldr	r4, [r9, #4]
   1d6b4:	ldr	r6, [pc, #948]	; 1da70 <__generate_code_for_binary_boolean_expression@@Base+0x2ef4>
   1d6b8:	adds	r7, r1, #8
   1d6bc:	adc	ip, r5, #0
   1d6c0:	ldr	r6, [pc, r6]
   1d6c4:	subs	r7, r6, r7
   1d6c8:	sbcs	r7, r4, ip
   1d6cc:	bcs	1d778 <__generate_code_for_binary_boolean_expression@@Base+0x2bfc>
   1d6d0:	mov	r2, #7
   1d6d4:	orr	r2, r2, #131072	; 0x20000
   1d6d8:	adds	r1, r1, r2
   1d6dc:	adc	r2, r5, #0
   1d6e0:	mvn	r3, #0
   1d6e4:	and	r5, r2, r3
   1d6e8:	mov	r2, #16646144	; 0xfe0000
   1d6ec:	orr	r2, r2, #-16777216	; 0xff000000
   1d6f0:	ldr	r4, [pc, #892]	; 1da74 <__generate_code_for_binary_boolean_expression@@Base+0x2ef8>
   1d6f4:	and	r6, r1, r2
   1d6f8:	mov	r1, r6
   1d6fc:	add	r4, pc, r4
   1d700:	bl	11f2c <realloc@plt>
   1d704:	str	r6, [r9]
   1d708:	str	r5, [r9, #4]
   1d70c:	str	r0, [r4]
   1d710:	ldrb	r7, [r8]
   1d714:	ldr	r3, [sl, #4]
   1d718:	ldr	r2, [pc, #856]	; 1da78 <__generate_code_for_binary_boolean_expression@@Base+0x2efc>
   1d71c:	mov	r6, r0
   1d720:	mov	r1, #0
   1d724:	ldr	r2, [pc, r2]
   1d728:	strb	r1, [r6, r2]!
   1d72c:	strb	r1, [r6, #3]
   1d730:	strb	r1, [r6, #2]
   1d734:	strb	r1, [r6, #1]
   1d738:	adds	r1, r2, #4
   1d73c:	adc	r5, r3, #0
   1d740:	cmp	r7, #1
   1d744:	stm	sl, {r1, r5}
   1d748:	bne	1d268 <__generate_code_for_binary_boolean_expression@@Base+0x26ec>
   1d74c:	b	1d79c <__generate_code_for_binary_boolean_expression@@Base+0x2c20>
   1d750:	ldr	r1, [pc, #616]	; 1d9c0 <__generate_code_for_binary_boolean_expression@@Base+0x2e44>
   1d754:	add	r1, pc, r1
   1d758:	ldr	r0, [pc, #600]	; 1d9b8 <__generate_code_for_binary_boolean_expression@@Base+0x2e3c>
   1d75c:	ldr	r0, [pc, r0]
   1d760:	ldr	r0, [r0]
   1d764:	ldr	r2, [pc, #592]	; 1d9bc <__generate_code_for_binary_boolean_expression@@Base+0x2e40>
   1d768:	ldr	r2, [pc, r2]
   1d76c:	sub	sp, fp, #28
   1d770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d774:	b	11fd4 <fprintf@plt>
   1d778:	mov	r7, r0
   1d77c:	mov	r1, #0
   1d780:	strb	r1, [r7, r2]!
   1d784:	strb	r1, [r7, #3]
   1d788:	strb	r1, [r7, #2]
   1d78c:	strb	r1, [r7, #1]
   1d790:	adds	r1, r2, #4
   1d794:	adc	r5, r3, #0
   1d798:	stm	sl, {r1, r5}
   1d79c:	ldr	r4, [r9, #4]
   1d7a0:	ldr	r6, [pc, #724]	; 1da7c <__generate_code_for_binary_boolean_expression@@Base+0x2f00>
   1d7a4:	adds	r7, r2, #8
   1d7a8:	adc	ip, r3, #0
   1d7ac:	ldr	r6, [pc, r6]
   1d7b0:	subs	r7, r6, r7
   1d7b4:	sbcs	r7, r4, ip
   1d7b8:	bcs	1d840 <__generate_code_for_binary_boolean_expression@@Base+0x2cc4>
   1d7bc:	mov	r1, #7
   1d7c0:	orr	r1, r1, #131072	; 0x20000
   1d7c4:	adds	r1, r2, r1
   1d7c8:	adc	r2, r3, #0
   1d7cc:	mvn	r3, #0
   1d7d0:	and	r5, r2, r3
   1d7d4:	mov	r2, #16646144	; 0xfe0000
   1d7d8:	orr	r2, r2, #-16777216	; 0xff000000
   1d7dc:	ldr	r4, [pc, #668]	; 1da80 <__generate_code_for_binary_boolean_expression@@Base+0x2f04>
   1d7e0:	and	r6, r1, r2
   1d7e4:	mov	r1, r6
   1d7e8:	add	r4, pc, r4
   1d7ec:	bl	11f2c <realloc@plt>
   1d7f0:	str	r6, [r9]
   1d7f4:	str	r5, [r9, #4]
   1d7f8:	str	r0, [r4]
   1d7fc:	ldrb	r2, [r8]
   1d800:	ldr	r5, [sl, #4]
   1d804:	ldr	r1, [pc, #632]	; 1da84 <__generate_code_for_binary_boolean_expression@@Base+0x2f08>
   1d808:	mov	r7, r0
   1d80c:	mov	r3, #0
   1d810:	ldr	r1, [pc, r1]
   1d814:	adds	r4, r1, #4
   1d818:	strb	r3, [r7, r1]!
   1d81c:	strb	r3, [r7, #3]
   1d820:	strb	r3, [r7, #2]
   1d824:	strb	r3, [r7, #1]
   1d828:	adc	r3, r5, #0
   1d82c:	cmp	r2, #1
   1d830:	str	r4, [sl]
   1d834:	str	r3, [sl, #4]
   1d838:	bne	1d290 <__generate_code_for_binary_boolean_expression@@Base+0x2714>
   1d83c:	b	1d868 <__generate_code_for_binary_boolean_expression@@Base+0x2cec>
   1d840:	mov	r3, r0
   1d844:	mov	r2, #0
   1d848:	strb	r2, [r3, r1]!
   1d84c:	adds	r4, r1, #4
   1d850:	strb	r2, [r3, #3]
   1d854:	strb	r2, [r3, #2]
   1d858:	strb	r2, [r3, #1]
   1d85c:	adc	r3, r5, #0
   1d860:	str	r4, [sl]
   1d864:	str	r3, [sl, #4]
   1d868:	ldr	r6, [r9, #4]
   1d86c:	ldr	r2, [pc, #532]	; 1da88 <__generate_code_for_binary_boolean_expression@@Base+0x2f0c>
   1d870:	adds	ip, r1, #8
   1d874:	adc	r7, r5, #0
   1d878:	ldr	r2, [pc, r2]
   1d87c:	subs	r2, r2, ip
   1d880:	sbcs	r2, r6, r7
   1d884:	bcs	1d90c <__generate_code_for_binary_boolean_expression@@Base+0x2d90>
   1d888:	mov	r2, #7
   1d88c:	orr	r2, r2, #131072	; 0x20000
   1d890:	adds	r1, r1, r2
   1d894:	adc	r2, r5, #0
   1d898:	mvn	r3, #0
   1d89c:	and	r5, r2, r3
   1d8a0:	mov	r2, #16646144	; 0xfe0000
   1d8a4:	orr	r2, r2, #-16777216	; 0xff000000
   1d8a8:	ldr	r4, [pc, #368]	; 1da20 <__generate_code_for_binary_boolean_expression@@Base+0x2ea4>
   1d8ac:	and	r6, r1, r2
   1d8b0:	mov	r1, r6
   1d8b4:	add	r4, pc, r4
   1d8b8:	bl	11f2c <realloc@plt>
   1d8bc:	str	r6, [r9]
   1d8c0:	str	r5, [r9, #4]
   1d8c4:	str	r0, [r4]
   1d8c8:	ldrb	r7, [r8]
   1d8cc:	ldr	r3, [sl, #4]
   1d8d0:	ldr	r4, [pc, #332]	; 1da24 <__generate_code_for_binary_boolean_expression@@Base+0x2ea8>
   1d8d4:	mov	r2, r0
   1d8d8:	mov	r1, #0
   1d8dc:	ldr	r4, [pc, r4]
   1d8e0:	strb	r1, [r2, r4]!
   1d8e4:	strb	r1, [r2, #3]
   1d8e8:	strb	r1, [r2, #2]
   1d8ec:	strb	r1, [r2, #1]
   1d8f0:	adds	r2, r4, #4
   1d8f4:	adc	r1, r3, #0
   1d8f8:	cmp	r7, #0
   1d8fc:	str	r2, [sl]
   1d900:	str	r1, [sl, #4]
   1d904:	beq	1d2b8 <__generate_code_for_binary_boolean_expression@@Base+0x273c>
   1d908:	b	1d934 <__generate_code_for_binary_boolean_expression@@Base+0x2db8>
   1d90c:	mov	r2, r0
   1d910:	mov	r1, #0
   1d914:	strb	r1, [r2, r4]!
   1d918:	strb	r1, [r2, #3]
   1d91c:	strb	r1, [r2, #2]
   1d920:	strb	r1, [r2, #1]
   1d924:	adds	r2, r4, #4
   1d928:	adc	r1, r3, #0
   1d92c:	str	r2, [sl]
   1d930:	str	r1, [sl, #4]
   1d934:	ldr	r5, [r9, #4]
   1d938:	ldr	r6, [pc, #232]	; 1da28 <__generate_code_for_binary_boolean_expression@@Base+0x2eac>
   1d93c:	adds	r7, r4, #8
   1d940:	adc	ip, r3, #0
   1d944:	ldr	r6, [pc, r6]
   1d948:	subs	r7, r6, r7
   1d94c:	sbcs	r7, r5, ip
   1d950:	bcs	1d2b8 <__generate_code_for_binary_boolean_expression@@Base+0x273c>
   1d954:	mov	r1, #7
   1d958:	orr	r1, r1, #131072	; 0x20000
   1d95c:	adds	r1, r4, r1
   1d960:	adc	r2, r3, #0
   1d964:	mvn	r3, #0
   1d968:	and	r7, r2, r3
   1d96c:	mov	r2, #16646144	; 0xfe0000
   1d970:	orr	r2, r2, #-16777216	; 0xff000000
   1d974:	ldr	r5, [pc, #176]	; 1da2c <__generate_code_for_binary_boolean_expression@@Base+0x2eb0>
   1d978:	and	r6, r1, r2
   1d97c:	mov	r1, r6
   1d980:	add	r5, pc, r5
   1d984:	bl	11f2c <realloc@plt>
   1d988:	strd	r6, [r9]
   1d98c:	str	r0, [r5]
   1d990:	ldr	r1, [sl, #4]
   1d994:	ldr	r2, [pc, #148]	; 1da30 <__generate_code_for_binary_boolean_expression@@Base+0x2eb4>
   1d998:	ldr	r2, [pc, r2]
   1d99c:	b	1d2b8 <__generate_code_for_binary_boolean_expression@@Base+0x273c>
   1d9a0:	andeq	r5, r1, r8, lsr #9
   1d9a4:	andeq	r5, r1, r8, lsr #9
   1d9a8:	muleq	r1, ip, r4
   1d9ac:	andeq	r5, r1, r0, lsl #9
   1d9b0:			; <UNDEFINED> instruction: 0x000153b4
   1d9b4:	andeq	r2, r0, lr, lsl r4
   1d9b8:	andeq	r3, r1, ip, asr r9
   1d9bc:	andeq	r4, r1, r8, ror #20
   1d9c0:	andeq	r1, r0, r7, lsl #23
   1d9c4:			; <UNDEFINED> instruction: 0x000151b4
   1d9c8:	andeq	r5, r1, r0, ror r4
   1d9cc:	andeq	r5, r1, r4, ror #8
   1d9d0:	andeq	r5, r1, r8, asr r3
   1d9d4:	andeq	r5, r1, r8, lsl r4
   1d9d8:	andeq	r5, r1, r4, lsl r4
   1d9dc:	strdeq	r5, [r1], -r4
   1d9e0:	andeq	r5, r1, r0, lsr r3
   1d9e4:	strdeq	r5, [r1], -r0
   1d9e8:	ldrdeq	r5, [r1], -r4
   1d9ec:	andeq	r5, r1, r0, ror #4
   1d9f0:	andeq	r5, r1, r0, lsr #4
   1d9f4:	andeq	r5, r1, r4, lsl #4
   1d9f8:	andeq	r4, r1, r4, asr #26
   1d9fc:	andeq	r4, r1, r4, lsl #26
   1da00:	andeq	r4, r1, r4, ror #25
   1da04:			; <UNDEFINED> instruction: 0x00014bb4
   1da08:	andeq	r4, r1, r4, ror fp
   1da0c:	andeq	r4, r1, r4, ror #22
   1da10:	strdeq	r4, [r1], -ip
   1da14:	strheq	r5, [r1], -r4
   1da18:	andeq	r5, r1, r8, lsr #1
   1da1c:	andeq	r4, r1, r0, lsr lr
   1da20:	andeq	r4, r1, r8, lsr #18
   1da24:	andeq	r4, r1, ip, lsl #18
   1da28:	muleq	r1, ip, r8
   1da2c:	andeq	r4, r1, ip, asr r8
   1da30:	andeq	r4, r1, r0, asr r8
   1da34:	andeq	r4, r1, r4, ror #29
   1da38:	ldrdeq	r4, [r1], -r8
   1da3c:	muleq	r1, r8, lr
   1da40:	andeq	r4, r1, ip, lsl #29
   1da44:	andeq	r4, r1, r4, lsl #29
   1da48:	andeq	r4, r1, r8, ror #28
   1da4c:	andeq	r5, r1, r4, rrx
   1da50:	andeq	r5, r1, r0, rrx
   1da54:	andeq	r5, r1, r4, asr #32
   1da58:	andeq	r4, r1, r8, lsl #28
   1da5c:	andeq	r4, r1, r8, asr #27
   1da60:			; <UNDEFINED> instruction: 0x00014db0
   1da64:	andeq	r4, r1, ip, ror ip
   1da68:	andeq	r4, r1, ip, lsr ip
   1da6c:	andeq	r4, r1, r0, lsr #24
   1da70:	andeq	r4, r1, r0, lsr #22
   1da74:	andeq	r4, r1, r0, ror #21
   1da78:	andeq	r4, r1, r4, asr #21
   1da7c:	andeq	r4, r1, r4, lsr sl
   1da80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1da84:	ldrdeq	r4, [r1], -r8
   1da88:	andeq	r4, r1, r8, ror #18
   1da8c:	ldr	r0, [pc, #508]	; 1dc90 <__generate_code_for_binary_boolean_expression@@Base+0x3114>
   1da90:	ldr	r0, [pc, r0]
   1da94:	cmp	r0, #0
   1da98:	beq	1dc48 <__generate_code_for_binary_boolean_expression@@Base+0x30cc>
   1da9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1daa0:	add	fp, sp, #24
   1daa4:	ldr	r9, [pc, #488]	; 1dc94 <__generate_code_for_binary_boolean_expression@@Base+0x3118>
   1daa8:	mov	r4, #0
   1daac:	mov	r1, #0
   1dab0:	add	r9, pc, r9
   1dab4:	ldrb	r0, [r9]
   1dab8:	cmp	r0, #1
   1dabc:	bne	1db40 <__generate_code_for_binary_boolean_expression@@Base+0x2fc4>
   1dac0:	ldr	r0, [pc, #464]	; 1dc98 <__generate_code_for_binary_boolean_expression@@Base+0x311c>
   1dac4:	ldr	r8, [pc, #464]	; 1dc9c <__generate_code_for_binary_boolean_expression@@Base+0x3120>
   1dac8:	mov	r1, #1
   1dacc:	add	r0, pc, r0
   1dad0:	add	r8, pc, r8
   1dad4:	ldr	r0, [r0, #4]
   1dad8:	ldr	r2, [pc, #448]	; 1dca0 <__generate_code_for_binary_boolean_expression@@Base+0x3124>
   1dadc:	ldr	r2, [pc, r2]
   1dae0:	ldr	r7, [r8, #4]
   1dae4:	ldr	r5, [pc, #440]	; 1dca4 <__generate_code_for_binary_boolean_expression@@Base+0x3128>
   1dae8:	adds	r3, r2, #8
   1daec:	adc	r6, r0, #0
   1daf0:	ldr	r5, [pc, r5]
   1daf4:	subs	r3, r5, r3
   1daf8:	sbcs	r3, r7, r6
   1dafc:	bcs	1db40 <__generate_code_for_binary_boolean_expression@@Base+0x2fc4>
   1db00:	mov	r1, #7
   1db04:	orr	r1, r1, #131072	; 0x20000
   1db08:	adds	r1, r2, r1
   1db0c:	adc	r7, r0, #0
   1db10:	mov	r0, #16646144	; 0xfe0000
   1db14:	orr	r0, r0, #-16777216	; 0xff000000
   1db18:	ldr	r5, [pc, #392]	; 1dca8 <__generate_code_for_binary_boolean_expression@@Base+0x312c>
   1db1c:	and	r6, r1, r0
   1db20:	ldr	r0, [pc, #388]	; 1dcac <__generate_code_for_binary_boolean_expression@@Base+0x3130>
   1db24:	mov	r1, r6
   1db28:	add	r5, pc, r5
   1db2c:	ldr	r0, [pc, r0]
   1db30:	bl	11f2c <realloc@plt>
   1db34:	ldrb	r1, [r9]
   1db38:	strd	r6, [r8]
   1db3c:	str	r0, [r5]
   1db40:	ldr	r3, [pc, #360]	; 1dcb0 <__generate_code_for_binary_boolean_expression@@Base+0x3134>
   1db44:	ldr	r2, [pc, #360]	; 1dcb4 <__generate_code_for_binary_boolean_expression@@Base+0x3138>
   1db48:	add	r3, pc, r3
   1db4c:	ldr	r2, [pc, r2]
   1db50:	ldr	r0, [pc, #352]	; 1dcb8 <__generate_code_for_binary_boolean_expression@@Base+0x313c>
   1db54:	ldr	r0, [pc, r0]
   1db58:	ldr	r7, [r3, #4]
   1db5c:	mov	r6, r0
   1db60:	strb	r4, [r6, r2]!
   1db64:	adds	r2, r2, #8
   1db68:	adc	r5, r7, #0
   1db6c:	strb	r4, [r6, #5]
   1db70:	strb	r4, [r6, #3]
   1db74:	strb	r4, [r6, #2]
   1db78:	strb	r4, [r6, #1]
   1db7c:	strb	r4, [r6, #4]!
   1db80:	cmp	r1, #0
   1db84:	strb	r4, [r6, #3]
   1db88:	strb	r4, [r6, #2]
   1db8c:	stm	r3, {r2, r5}
   1db90:	beq	1dbb8 <__generate_code_for_binary_boolean_expression@@Base+0x303c>
   1db94:	ldr	r3, [pc, #288]	; 1dcbc <__generate_code_for_binary_boolean_expression@@Base+0x3140>
   1db98:	mov	r1, r2
   1db9c:	mov	r2, #1
   1dba0:	ldr	r3, [pc, r3]
   1dba4:	bl	11f38 <fwrite@plt>
   1dba8:	ldr	r0, [pc, #272]	; 1dcc0 <__generate_code_for_binary_boolean_expression@@Base+0x3144>
   1dbac:	ldr	r0, [pc, r0]
   1dbb0:	bl	11ee4 <free@plt>
   1dbb4:	b	1dc04 <__generate_code_for_binary_boolean_expression@@Base+0x3088>
   1dbb8:	ldr	r1, [pc, #260]	; 1dcc4 <__generate_code_for_binary_boolean_expression@@Base+0x3148>
   1dbbc:	mov	r2, #4
   1dbc0:	ldr	r1, [pc, r1]
   1dbc4:	bl	12064 <msync@plt>
   1dbc8:	cmn	r0, #1
   1dbcc:	beq	1dc54 <__generate_code_for_binary_boolean_expression@@Base+0x30d8>
   1dbd0:	ldr	r1, [pc, #252]	; 1dcd4 <__generate_code_for_binary_boolean_expression@@Base+0x3158>
   1dbd4:	ldr	r1, [pc, r1]
   1dbd8:	ldr	r0, [pc, #248]	; 1dcd8 <__generate_code_for_binary_boolean_expression@@Base+0x315c>
   1dbdc:	ldr	r0, [pc, r0]
   1dbe0:	bl	12040 <munmap@plt>
   1dbe4:	ldr	r0, [pc, #240]	; 1dcdc <__generate_code_for_binary_boolean_expression@@Base+0x3160>
   1dbe8:	ldr	r1, [pc, #240]	; 1dce0 <__generate_code_for_binary_boolean_expression@@Base+0x3164>
   1dbec:	mov	r2, #0
   1dbf0:	add	r0, pc, r0
   1dbf4:	add	r1, pc, r1
   1dbf8:	str	r2, [r0]
   1dbfc:	str	r2, [r0, #4]
   1dc00:	str	r2, [r1]
   1dc04:	ldr	r0, [pc, #216]	; 1dce4 <__generate_code_for_binary_boolean_expression@@Base+0x3168>
   1dc08:	ldr	r0, [pc, r0]
   1dc0c:	bl	11ed8 <fflush@plt>
   1dc10:	ldr	r0, [pc, #208]	; 1dce8 <__generate_code_for_binary_boolean_expression@@Base+0x316c>
   1dc14:	ldr	r0, [pc, r0]
   1dc18:	bl	1e194 <__gcov_flush@@Base+0x30c>
   1dc1c:	ldr	r0, [pc, #200]	; 1dcec <__generate_code_for_binary_boolean_expression@@Base+0x3170>
   1dc20:	ldr	r0, [pc, r0]
   1dc24:	bl	12028 <fclose@plt>
   1dc28:	ldr	r0, [pc, #192]	; 1dcf0 <__generate_code_for_binary_boolean_expression@@Base+0x3174>
   1dc2c:	ldr	r1, [pc, #192]	; 1dcf4 <__generate_code_for_binary_boolean_expression@@Base+0x3178>
   1dc30:	mov	r2, #0
   1dc34:	add	r0, pc, r0
   1dc38:	add	r1, pc, r1
   1dc3c:	str	r2, [r0]
   1dc40:	str	r2, [r1]
   1dc44:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dc48:	ldr	r0, [pc, #168]	; 1dcf8 <__generate_code_for_binary_boolean_expression@@Base+0x317c>
   1dc4c:	ldr	r0, [pc, r0]
   1dc50:	b	11ee4 <free@plt>
   1dc54:	bl	11fe0 <__errno_location@plt>
   1dc58:	ldr	r1, [pc, #104]	; 1dcc8 <__generate_code_for_binary_boolean_expression@@Base+0x314c>
   1dc5c:	ldr	r1, [pc, r1]
   1dc60:	ldr	r0, [r0]
   1dc64:	ldr	r4, [r1]
   1dc68:	ldr	r5, [pc, #92]	; 1dccc <__generate_code_for_binary_boolean_expression@@Base+0x3150>
   1dc6c:	ldr	r5, [pc, r5]
   1dc70:	bl	11f80 <strerror@plt>
   1dc74:	ldr	r1, [pc, #84]	; 1dcd0 <__generate_code_for_binary_boolean_expression@@Base+0x3154>
   1dc78:	mov	r3, r0
   1dc7c:	mov	r0, r4
   1dc80:	add	r1, pc, r1
   1dc84:	mov	r2, r5
   1dc88:	bl	11fd4 <fprintf@plt>
   1dc8c:	b	1dbd0 <__generate_code_for_binary_boolean_expression@@Base+0x3054>
   1dc90:	andeq	r4, r1, r8, asr #14
   1dc94:	andeq	r4, r1, r4, lsr #14
   1dc98:	andeq	r4, r1, ip, lsl r7
   1dc9c:	andeq	r4, r1, r0, lsl r7
   1dca0:	andeq	r4, r1, ip, lsl #14
   1dca4:	strdeq	r4, [r1], -r0
   1dca8:			; <UNDEFINED> instruction: 0x000146b4
   1dcac:			; <UNDEFINED> instruction: 0x000146b0
   1dcb0:	andeq	r4, r1, r0, lsr #13
   1dcb4:	muleq	r1, ip, r6
   1dcb8:	andeq	r4, r1, r8, lsl #13
   1dcbc:	andeq	r4, r1, r8, lsr r6
   1dcc0:	andeq	r4, r1, r0, lsr r6
   1dcc4:	andeq	r4, r1, r0, asr #12
   1dcc8:	andeq	r3, r1, ip, asr r4
   1dccc:	andeq	r4, r1, r4, ror #10
   1dcd0:	andeq	r1, r0, r9, asr #13
   1dcd4:	andeq	r4, r1, ip, lsr #12
   1dcd8:	andeq	r4, r1, r0, lsl #12
   1dcdc:	andeq	r4, r1, r0, lsl r6
   1dce0:	andeq	r4, r1, r8, ror #11
   1dce4:	ldrdeq	r4, [r1], -r0
   1dce8:	andeq	r3, r1, r8, ror #9
   1dcec:			; <UNDEFINED> instruction: 0x000145b8
   1dcf0:	andeq	r4, r1, r4, lsr #11
   1dcf4:	andeq	r4, r1, r4, lsr #11
   1dcf8:	andeq	r4, r1, r4, lsl #11
   1dcfc:	push	{r4, sl, fp, lr}
   1dd00:	add	fp, sp, #8
   1dd04:	mov	r4, r0
   1dd08:	mov	r0, #12
   1dd0c:	bl	11f68 <malloc@plt>
   1dd10:	ldr	r1, [pc, #60]	; 1dd54 <__generate_code_for_binary_boolean_expression@@Base+0x31d8>
   1dd14:	mov	r2, #0
   1dd18:	add	r1, pc, r1
   1dd1c:	stm	r0, {r1, r4}
   1dd20:	str	r2, [r0, #8]
   1dd24:	ldr	r1, [pc, #44]	; 1dd58 <__generate_code_for_binary_boolean_expression@@Base+0x31dc>
   1dd28:	ldr	r1, [pc, r1]
   1dd2c:	mov	r2, r1
   1dd30:	ldr	r3, [r2], #4
   1dd34:	ldr	r4, [r2]
   1dd38:	cmp	r3, #0
   1dd3c:	mov	r3, r2
   1dd40:	addne	r3, r4, #8
   1dd44:	moveq	r2, r1
   1dd48:	str	r0, [r3]
   1dd4c:	str	r0, [r2]
   1dd50:	pop	{r4, sl, fp, pc}
   1dd54:	ldrdeq	r4, [r1], -ip
   1dd58:	andeq	r3, r1, r8, lsl #7
   1dd5c:	push	{r4, r5, fp, lr}
   1dd60:	add	fp, sp, #8
   1dd64:	ldr	r0, [pc, #56]	; 1dda4 <__generate_code_for_binary_boolean_expression@@Base+0x3228>
   1dd68:	ldr	r0, [pc, r0]
   1dd6c:	ldr	r4, [r0]
   1dd70:	cmp	r4, #0
   1dd74:	beq	1dda0 <__generate_code_for_binary_boolean_expression@@Base+0x3224>
   1dd78:	ldr	r5, [pc, #40]	; 1dda8 <__generate_code_for_binary_boolean_expression@@Base+0x322c>
   1dd7c:	add	r5, pc, r5
   1dd80:	ldr	r0, [r4]
   1dd84:	cmp	r0, r5
   1dd88:	bne	1dd94 <__generate_code_for_binary_boolean_expression@@Base+0x3218>
   1dd8c:	ldr	r0, [r4, #4]
   1dd90:	blx	r0
   1dd94:	ldr	r4, [r4, #8]
   1dd98:	cmp	r4, #0
   1dd9c:	bne	1dd80 <__generate_code_for_binary_boolean_expression@@Base+0x3204>
   1dda0:	pop	{r4, r5, fp, pc}
   1dda4:	andeq	r3, r1, r8, asr #6
   1dda8:	andeq	r4, r1, r8, ror r4
   1ddac:	push	{r4, r5, r6, r7, fp, lr}
   1ddb0:	add	fp, sp, #16
   1ddb4:	ldr	r4, [pc, #100]	; 1de20 <__generate_code_for_binary_boolean_expression@@Base+0x32a4>
   1ddb8:	ldr	r4, [pc, r4]
   1ddbc:	ldr	r0, [r4]
   1ddc0:	cmp	r0, #0
   1ddc4:	beq	1de1c <__generate_code_for_binary_boolean_expression@@Base+0x32a0>
   1ddc8:	ldr	r5, [pc, #84]	; 1de24 <__generate_code_for_binary_boolean_expression@@Base+0x32a8>
   1ddcc:	mov	r6, #0
   1ddd0:	add	r5, pc, r5
   1ddd4:	ldr	r1, [r0]
   1ddd8:	ldr	r7, [r0, #8]
   1dddc:	cmp	r1, r5
   1dde0:	beq	1ddec <__generate_code_for_binary_boolean_expression@@Base+0x3270>
   1dde4:	mov	r6, r0
   1dde8:	b	1de10 <__generate_code_for_binary_boolean_expression@@Base+0x3294>
   1ddec:	ldr	r1, [r4]
   1ddf0:	cmp	r0, r1
   1ddf4:	streq	r7, [r4]
   1ddf8:	ldr	r1, [r4, #4]
   1ddfc:	cmp	r0, r1
   1de00:	streq	r6, [r4, #4]
   1de04:	cmp	r6, #0
   1de08:	strne	r7, [r6, #8]
   1de0c:	bl	11ee4 <free@plt>
   1de10:	mov	r0, r7
   1de14:	cmp	r7, #0
   1de18:	bne	1ddd4 <__generate_code_for_binary_boolean_expression@@Base+0x3258>
   1de1c:	pop	{r4, r5, r6, r7, fp, pc}
   1de20:	strdeq	r3, [r1], -r8
   1de24:	andeq	r4, r1, r4, lsr #8
   1de28:	push	{r4, sl, fp, lr}
   1de2c:	add	fp, sp, #8
   1de30:	mov	r4, r0
   1de34:	mov	r0, #12
   1de38:	bl	11f68 <malloc@plt>
   1de3c:	ldr	r1, [pc, #60]	; 1de80 <__generate_code_for_binary_boolean_expression@@Base+0x3304>
   1de40:	mov	r2, #0
   1de44:	add	r1, pc, r1
   1de48:	stm	r0, {r1, r4}
   1de4c:	str	r2, [r0, #8]
   1de50:	ldr	r1, [pc, #44]	; 1de84 <__generate_code_for_binary_boolean_expression@@Base+0x3308>
   1de54:	ldr	r1, [pc, r1]
   1de58:	mov	r2, r1
   1de5c:	ldr	r3, [r2], #4
   1de60:	ldr	r4, [r2]
   1de64:	cmp	r3, #0
   1de68:	mov	r3, r2
   1de6c:	addne	r3, r4, #8
   1de70:	moveq	r2, r1
   1de74:	str	r0, [r3]
   1de78:	str	r0, [r2]
   1de7c:	pop	{r4, sl, fp, pc}
   1de80:			; <UNDEFINED> instruction: 0x000143b0
   1de84:	andeq	r3, r1, r8, asr r2

0001de88 <__gcov_flush@@Base>:
   1de88:	push	{r4, sl, fp, lr}
   1de8c:	add	fp, sp, #8
   1de90:	ldr	r0, [pc, #36]	; 1debc <__gcov_flush@@Base+0x34>
   1de94:	ldr	r0, [pc, r0]
   1de98:	ldr	r4, [r0]
   1de9c:	cmp	r4, #0
   1dea0:	beq	1deb8 <__gcov_flush@@Base+0x30>
   1dea4:	ldr	r0, [r4, #4]
   1dea8:	blx	r0
   1deac:	ldr	r4, [r4, #8]
   1deb0:	cmp	r4, #0
   1deb4:	bne	1dea4 <__gcov_flush@@Base+0x1c>
   1deb8:	pop	{r4, sl, fp, pc}
   1debc:	andeq	r3, r1, r8, lsl r2
   1dec0:	push	{r4, r5, r6, r7, fp, lr}
   1dec4:	add	fp, sp, #16
   1dec8:	ldr	r4, [pc, #100]	; 1df34 <__gcov_flush@@Base+0xac>
   1decc:	ldr	r4, [pc, r4]
   1ded0:	ldr	r0, [r4]
   1ded4:	cmp	r0, #0
   1ded8:	beq	1df30 <__gcov_flush@@Base+0xa8>
   1dedc:	ldr	r5, [pc, #84]	; 1df38 <__gcov_flush@@Base+0xb0>
   1dee0:	mov	r6, #0
   1dee4:	add	r5, pc, r5
   1dee8:	ldr	r1, [r0]
   1deec:	ldr	r7, [r0, #8]
   1def0:	cmp	r1, r5
   1def4:	beq	1df00 <__gcov_flush@@Base+0x78>
   1def8:	mov	r6, r0
   1defc:	b	1df24 <__gcov_flush@@Base+0x9c>
   1df00:	ldr	r1, [r4]
   1df04:	cmp	r0, r1
   1df08:	streq	r7, [r4]
   1df0c:	ldr	r1, [r4, #4]
   1df10:	cmp	r0, r1
   1df14:	streq	r6, [r4, #4]
   1df18:	cmp	r6, #0
   1df1c:	strne	r7, [r6, #8]
   1df20:	bl	11ee4 <free@plt>
   1df24:	mov	r0, r7
   1df28:	cmp	r7, #0
   1df2c:	bne	1dee8 <__gcov_flush@@Base+0x60>
   1df30:	pop	{r4, r5, r6, r7, fp, pc}
   1df34:	andeq	r3, r1, r0, ror #3
   1df38:	andeq	r4, r1, r0, lsl r3
   1df3c:	push	{r4, r5, fp, lr}
   1df40:	add	fp, sp, #8
   1df44:	mov	r4, r1
   1df48:	cmp	r0, #0
   1df4c:	beq	1df9c <__gcov_flush@@Base+0x114>
   1df50:	mov	r5, r0
   1df54:	mov	r0, #12
   1df58:	bl	11f68 <malloc@plt>
   1df5c:	ldr	r1, [pc, #204]	; 1e030 <__gcov_flush@@Base+0x1a8>
   1df60:	mov	r2, #0
   1df64:	add	r1, pc, r1
   1df68:	stm	r0, {r1, r5}
   1df6c:	str	r2, [r0, #8]
   1df70:	ldr	r1, [pc, #188]	; 1e034 <__gcov_flush@@Base+0x1ac>
   1df74:	ldr	r1, [pc, r1]
   1df78:	mov	r2, r1
   1df7c:	ldr	r3, [r2], #4
   1df80:	ldr	r5, [r2]
   1df84:	cmp	r3, #0
   1df88:	mov	r3, r2
   1df8c:	addne	r3, r5, #8
   1df90:	moveq	r2, r1
   1df94:	str	r0, [r3]
   1df98:	str	r0, [r2]
   1df9c:	cmp	r4, #0
   1dfa0:	beq	1dfec <__gcov_flush@@Base+0x164>
   1dfa4:	mov	r0, #12
   1dfa8:	bl	11f68 <malloc@plt>
   1dfac:	ldr	r1, [pc, #132]	; 1e038 <__gcov_flush@@Base+0x1b0>
   1dfb0:	mov	r2, #0
   1dfb4:	add	r1, pc, r1
   1dfb8:	stm	r0, {r1, r4}
   1dfbc:	str	r2, [r0, #8]
   1dfc0:	ldr	r1, [pc, #116]	; 1e03c <__gcov_flush@@Base+0x1b4>
   1dfc4:	ldr	r1, [pc, r1]
   1dfc8:	mov	r2, r1
   1dfcc:	ldr	r3, [r2], #4
   1dfd0:	ldr	r5, [r2]
   1dfd4:	cmp	r3, #0
   1dfd8:	mov	r3, r2
   1dfdc:	addne	r3, r5, #8
   1dfe0:	moveq	r2, r1
   1dfe4:	str	r0, [r3]
   1dfe8:	str	r0, [r2]
   1dfec:	ldr	r1, [pc, #76]	; 1e040 <__gcov_flush@@Base+0x1b8>
   1dff0:	add	r1, pc, r1
   1dff4:	ldrb	r0, [r1]
   1dff8:	cmp	r0, #0
   1dffc:	popne	{r4, r5, fp, pc}
   1e000:	ldr	r0, [pc, #60]	; 1e044 <__gcov_flush@@Base+0x1bc>
   1e004:	mov	r2, #1
   1e008:	strb	r2, [r1]
   1e00c:	add	r0, pc, r0
   1e010:	bl	1e4f0 <__libc_csu_fini@@Base+0x4>
   1e014:	ldr	r0, [pc, #44]	; 1e048 <__gcov_flush@@Base+0x1c0>
   1e018:	add	r0, pc, r0
   1e01c:	bl	1e4f0 <__libc_csu_fini@@Base+0x4>
   1e020:	ldr	r0, [pc, #36]	; 1e04c <__gcov_flush@@Base+0x1c4>
   1e024:	add	r0, pc, r0
   1e028:	pop	{r4, r5, fp, lr}
   1e02c:	b	1e4f0 <__libc_csu_fini@@Base+0x4>
   1e030:	muleq	r1, r0, r2
   1e034:	andeq	r3, r1, ip, lsr r1
   1e038:	andeq	r4, r1, r0, asr #4
   1e03c:	andeq	r3, r1, r8, ror #1
   1e040:	andeq	r4, r1, r8, lsl #4
   1e044:			; <UNDEFINED> instruction: 0xfffffeac
   1e048:			; <UNDEFINED> instruction: 0xfffffd8c
   1e04c:			; <UNDEFINED> instruction: 0xfffffd30
   1e050:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e054:	add	fp, sp, #24
   1e058:	ldr	r7, [pc, #76]	; 1e0ac <__gcov_flush@@Base+0x224>
   1e05c:	mov	r4, r0
   1e060:	mov	r5, #1
   1e064:	mov	r8, #0
   1e068:	ldr	r7, [pc, r7]
   1e06c:	mov	r6, #47	; 0x2f
   1e070:	b	1e078 <__gcov_flush@@Base+0x1f0>
   1e074:	add	r5, r5, #1
   1e078:	ldrb	r0, [r4, r5]
   1e07c:	cmp	r0, #47	; 0x2f
   1e080:	beq	1e090 <__gcov_flush@@Base+0x208>
   1e084:	cmp	r0, #0
   1e088:	bne	1e074 <__gcov_flush@@Base+0x1ec>
   1e08c:	b	1e0a8 <__gcov_flush@@Base+0x220>
   1e090:	strb	r8, [r4, r5]
   1e094:	ldr	r1, [r7]
   1e098:	mov	r0, r4
   1e09c:	bl	11ff8 <mkdir@plt>
   1e0a0:	strb	r6, [r4, r5]
   1e0a4:	b	1e074 <__gcov_flush@@Base+0x1ec>
   1e0a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e0ac:	andeq	r3, r1, r0, asr #32
   1e0b0:	ldr	r0, [pc, #8]	; 1e0c0 <__gcov_flush@@Base+0x238>
   1e0b4:	ldr	r0, [pc, r0]
   1e0b8:	ldr	r0, [r0]
   1e0bc:	bx	lr
   1e0c0:	strdeq	r2, [r1], -r4
   1e0c4:	ldr	r1, [pc, #8]	; 1e0d4 <__gcov_flush@@Base+0x24c>
   1e0c8:	ldr	r1, [pc, r1]
   1e0cc:	str	r0, [r1]
   1e0d0:	bx	lr
   1e0d4:	andeq	r2, r1, r0, ror #31
   1e0d8:	push	{r4, r5, r6, sl, fp, lr}
   1e0dc:	add	fp, sp, #16
   1e0e0:	sub	sp, sp, #392	; 0x188
   1e0e4:	mov	r6, sp
   1e0e8:	mov	r5, r0
   1e0ec:	mov	r0, r6
   1e0f0:	mov	r4, r1
   1e0f4:	bl	11f14 <uname@plt>
   1e0f8:	cmp	r0, #0
   1e0fc:	blt	1e114 <__gcov_flush@@Base+0x28c>
   1e100:	add	r1, r6, #65	; 0x41
   1e104:	mov	r0, r5
   1e108:	mov	r2, r4
   1e10c:	bl	12010 <strncpy@plt>
   1e110:	mov	r0, #0
   1e114:	sub	sp, fp, #16
   1e118:	pop	{r4, r5, r6, sl, fp, pc}
   1e11c:	push	{r4, r5, r6, sl, fp, lr}
   1e120:	add	fp, sp, #16
   1e124:	sub	sp, sp, #32
   1e128:	mov	r4, #0
   1e12c:	mov	r5, r0
   1e130:	str	r4, [sp, #20]
   1e134:	str	r4, [sp, #16]
   1e138:	str	r4, [sp, #12]
   1e13c:	str	r4, [sp, #8]
   1e140:	strh	r4, [sp, #2]
   1e144:	bl	11f98 <getpid@plt>
   1e148:	mov	r6, sp
   1e14c:	str	r0, [sp, #24]
   1e150:	mov	r0, #1
   1e154:	strh	r0, [sp]
   1e158:	mov	r0, r5
   1e15c:	mov	r1, #14
   1e160:	mov	r2, r6
   1e164:	bl	1204c <fcntl64@plt>
   1e168:	cmn	r0, #1
   1e16c:	bne	1e188 <__gcov_flush@@Base+0x300>
   1e170:	bl	11fe0 <__errno_location@plt>
   1e174:	ldr	r0, [r0]
   1e178:	cmp	r0, #4
   1e17c:	beq	1e158 <__gcov_flush@@Base+0x2d0>
   1e180:	cmp	r0, #37	; 0x25
   1e184:	mvneq	r4, #0
   1e188:	mov	r0, r4
   1e18c:	sub	sp, fp, #16
   1e190:	pop	{r4, r5, r6, sl, fp, pc}
   1e194:	push	{r4, r5, r6, sl, fp, lr}
   1e198:	add	fp, sp, #16
   1e19c:	sub	sp, sp, #32
   1e1a0:	mov	r4, #0
   1e1a4:	mov	r5, r0
   1e1a8:	str	r4, [sp, #20]
   1e1ac:	str	r4, [sp, #16]
   1e1b0:	str	r4, [sp, #12]
   1e1b4:	str	r4, [sp, #8]
   1e1b8:	strh	r4, [sp, #2]
   1e1bc:	bl	11f98 <getpid@plt>
   1e1c0:	mov	r6, sp
   1e1c4:	str	r0, [sp, #24]
   1e1c8:	mov	r0, #2
   1e1cc:	strh	r0, [sp]
   1e1d0:	mov	r0, r5
   1e1d4:	mov	r1, #14
   1e1d8:	mov	r2, r6
   1e1dc:	bl	1204c <fcntl64@plt>
   1e1e0:	cmn	r0, #1
   1e1e4:	bne	1e200 <__gcov_flush@@Base+0x378>
   1e1e8:	bl	11fe0 <__errno_location@plt>
   1e1ec:	ldr	r0, [r0]
   1e1f0:	cmp	r0, #4
   1e1f4:	beq	1e1d0 <__gcov_flush@@Base+0x348>
   1e1f8:	cmp	r0, #37	; 0x25
   1e1fc:	mvneq	r4, #0
   1e200:	mov	r0, r4
   1e204:	sub	sp, fp, #16
   1e208:	pop	{r4, r5, r6, sl, fp, pc}
   1e20c:	push	{r4, r5, fp, lr}
   1e210:	add	fp, sp, #8
   1e214:	sub	sp, sp, #32
   1e218:	mov	r2, #182	; 0xb6
   1e21c:	orr	r2, r2, #256	; 0x100
   1e220:	mov	r1, #66	; 0x42
   1e224:	bl	11f50 <open64@plt>
   1e228:	cmp	r0, #0
   1e22c:	blt	1e2a8 <__gcov_flush@@Base+0x420>
   1e230:	mov	r4, r0
   1e234:	mov	r0, #0
   1e238:	str	r0, [sp, #20]
   1e23c:	str	r0, [sp, #16]
   1e240:	str	r0, [sp, #12]
   1e244:	str	r0, [sp, #8]
   1e248:	strh	r0, [sp, #2]
   1e24c:	bl	11f98 <getpid@plt>
   1e250:	mov	r5, sp
   1e254:	str	r0, [sp, #24]
   1e258:	mov	r0, #1
   1e25c:	strh	r0, [sp]
   1e260:	mov	r0, r4
   1e264:	mov	r1, #14
   1e268:	mov	r2, r5
   1e26c:	bl	1204c <fcntl64@plt>
   1e270:	cmn	r0, #1
   1e274:	bne	1e290 <__gcov_flush@@Base+0x408>
   1e278:	bl	11fe0 <__errno_location@plt>
   1e27c:	ldr	r0, [r0]
   1e280:	cmp	r0, #4
   1e284:	beq	1e260 <__gcov_flush@@Base+0x3d8>
   1e288:	cmp	r0, #37	; 0x25
   1e28c:	beq	1e2b4 <__gcov_flush@@Base+0x42c>
   1e290:	ldr	r1, [pc, #76]	; 1e2e4 <__gcov_flush@@Base+0x45c>
   1e294:	mov	r0, r4
   1e298:	add	r1, pc, r1
   1e29c:	bl	11eb4 <fdopen@plt>
   1e2a0:	sub	sp, fp, #8
   1e2a4:	pop	{r4, r5, fp, pc}
   1e2a8:	mov	r0, #0
   1e2ac:	sub	sp, fp, #8
   1e2b0:	pop	{r4, r5, fp, pc}
   1e2b4:	ldr	r1, [pc, #28]	; 1e2d8 <__gcov_flush@@Base+0x450>
   1e2b8:	ldr	r2, [pc, #28]	; 1e2dc <__gcov_flush@@Base+0x454>
   1e2bc:	ldr	r0, [pc, #28]	; 1e2e0 <__gcov_flush@@Base+0x458>
   1e2c0:	add	r1, pc, r1
   1e2c4:	add	r2, pc, r2
   1e2c8:	ldr	r0, [pc, r0]
   1e2cc:	ldr	r0, [r0]
   1e2d0:	bl	11fd4 <fprintf@plt>
   1e2d4:	b	1e290 <__gcov_flush@@Base+0x408>
   1e2d8:	andeq	r1, r0, sl, lsr #1
   1e2dc:	andeq	r1, r0, pc, ror #1
   1e2e0:	strdeq	r2, [r1], -r0
   1e2e4:	andeq	r0, r0, r0, lsr pc
   1e2e8:	push	{r4, r5, r6, sl, fp, lr}
   1e2ec:	add	fp, sp, #16
   1e2f0:	mov	r6, r0
   1e2f4:	ldr	r0, [pc, #120]	; 1e374 <__gcov_flush@@Base+0x4ec>
   1e2f8:	mov	r4, r1
   1e2fc:	add	r0, pc, r0
   1e300:	bl	11f5c <getenv@plt>
   1e304:	mov	r5, r0
   1e308:	ldr	r0, [pc, #104]	; 1e378 <__gcov_flush@@Base+0x4f0>
   1e30c:	add	r0, pc, r0
   1e310:	bl	11f5c <getenv@plt>
   1e314:	mov	r1, #0
   1e318:	str	r1, [r4]
   1e31c:	str	r1, [r6]
   1e320:	cmp	r5, #0
   1e324:	ldrbne	r2, [r5]
   1e328:	cmpne	r2, #0
   1e32c:	bne	1e338 <__gcov_flush@@Base+0x4b0>
   1e330:	mov	r0, r1
   1e334:	pop	{r4, r5, r6, sl, fp, pc}
   1e338:	cmp	r0, #0
   1e33c:	beq	1e354 <__gcov_flush@@Base+0x4cc>
   1e340:	mov	r1, #0
   1e344:	mov	r2, #10
   1e348:	bl	11ec0 <strtol@plt>
   1e34c:	bic	r0, r0, r0, asr #31
   1e350:	b	1e358 <__gcov_flush@@Base+0x4d0>
   1e354:	mov	r0, #0
   1e358:	str	r0, [r6]
   1e35c:	mov	r0, r5
   1e360:	bl	11fb0 <strlen@plt>
   1e364:	mov	r1, r5
   1e368:	str	r0, [r4]
   1e36c:	mov	r0, r1
   1e370:	pop	{r4, r5, r6, sl, fp, pc}
   1e374:	andeq	r1, r0, r5, ror #1
   1e378:	andeq	r1, r0, r1, ror #1
   1e37c:	push	{r4, r5, r6, r7, fp, lr}
   1e380:	add	fp, sp, #16
   1e384:	mov	r6, r0
   1e388:	ldr	r0, [fp, #8]
   1e38c:	mov	r5, r3
   1e390:	mov	r7, r2
   1e394:	mov	r4, r1
   1e398:	cmp	r0, #1
   1e39c:	blt	1e3d4 <__gcov_flush@@Base+0x54c>
   1e3a0:	add	r1, r4, #1
   1e3a4:	mov	r2, #0
   1e3a8:	ldrb	r3, [r1]
   1e3ac:	cmp	r3, #47	; 0x2f
   1e3b0:	beq	1e3c0 <__gcov_flush@@Base+0x538>
   1e3b4:	cmp	r3, #0
   1e3b8:	bne	1e3c8 <__gcov_flush@@Base+0x540>
   1e3bc:	b	1e3d4 <__gcov_flush@@Base+0x54c>
   1e3c0:	add	r2, r2, #1
   1e3c4:	mov	r4, r1
   1e3c8:	add	r1, r1, #1
   1e3cc:	cmp	r2, r0
   1e3d0:	blt	1e3a8 <__gcov_flush@@Base+0x520>
   1e3d4:	mov	r0, r6
   1e3d8:	mov	r1, r7
   1e3dc:	mov	r2, r5
   1e3e0:	bl	11ef0 <memcpy@plt>
   1e3e4:	add	r0, r7, r5
   1e3e8:	ldrb	r0, [r0, #-1]
   1e3ec:	cmp	r0, #47	; 0x2f
   1e3f0:	movne	r0, #47	; 0x2f
   1e3f4:	strbne	r0, [r6, r5]
   1e3f8:	mov	r0, r4
   1e3fc:	addne	r5, r5, #1
   1e400:	add	r5, r6, r5
   1e404:	bl	11fb0 <strlen@plt>
   1e408:	add	r2, r0, #1
   1e40c:	mov	r0, r5
   1e410:	mov	r1, r4
   1e414:	pop	{r4, r5, r6, r7, fp, lr}
   1e418:	b	11ef0 <memcpy@plt>
   1e41c:	mov	r1, #47	; 0x2f
   1e420:	b	11fbc <strchr@plt>
   1e424:	mov	r1, #47	; 0x2f
   1e428:	b	12058 <strrchr@plt>
   1e42c:	push	{fp, lr}
   1e430:	mov	fp, sp
   1e434:	sub	sp, sp, #8
   1e438:	mov	r0, #0
   1e43c:	str	r0, [sp, #4]
   1e440:	add	r1, sp, #4
   1e444:	mov	r0, #2
   1e448:	bl	1201c <prctl@plt>
   1e44c:	ldr	r1, [sp, #4]
   1e450:	cmp	r0, #0
   1e454:	cmpeq	r1, #9
   1e458:	bne	1e46c <__gcov_flush@@Base+0x5e4>
   1e45c:	mov	r0, #1
   1e460:	mov	r1, #0
   1e464:	bl	1201c <prctl@plt>
   1e468:	ldr	r1, [sp, #4]
   1e46c:	sub	r0, r1, #9
   1e470:	clz	r0, r0
   1e474:	lsr	r0, r0, #5
   1e478:	mov	sp, fp
   1e47c:	pop	{fp, pc}
   1e480:	mov	r0, #1
   1e484:	mov	r1, #9
   1e488:	b	1201c <prctl@plt>

0001e48c <__libc_csu_init@@Base>:
   1e48c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e490:	mov	r7, r0
   1e494:	ldr	r6, [pc, #72]	; 1e4e4 <__libc_csu_init@@Base+0x58>
   1e498:	ldr	r5, [pc, #72]	; 1e4e8 <__libc_csu_init@@Base+0x5c>
   1e49c:	add	r6, pc, r6
   1e4a0:	add	r5, pc, r5
   1e4a4:	sub	r6, r6, r5
   1e4a8:	mov	r8, r1
   1e4ac:	mov	r9, r2
   1e4b0:	bl	11e94 <fdopen@plt-0x20>
   1e4b4:	asrs	r6, r6, #2
   1e4b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4bc:	mov	r4, #0
   1e4c0:	add	r4, r4, #1
   1e4c4:	ldr	r3, [r5], #4
   1e4c8:	mov	r2, r9
   1e4cc:	mov	r1, r8
   1e4d0:	mov	r0, r7
   1e4d4:	blx	r3
   1e4d8:	cmp	r6, r4
   1e4dc:	bne	1e4c0 <__libc_csu_init@@Base+0x34>
   1e4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4e4:	strdeq	r1, [r1], -r8
   1e4e8:	ldrdeq	r1, [r1], -r8

0001e4ec <__libc_csu_fini@@Base>:
   1e4ec:	bx	lr
   1e4f0:	ldr	r3, [pc, #12]	; 1e504 <__libc_csu_fini@@Base+0x18>
   1e4f4:	mov	r1, #0
   1e4f8:	add	r3, pc, r3
   1e4fc:	ldr	r2, [r3]
   1e500:	b	11fec <__cxa_atexit@plt>
   1e504:	ldrdeq	r2, [r1], -r0

Disassembly of section .fini:

0001e508 <.fini>:
   1e508:	push	{r3, lr}
   1e50c:	pop	{r3, pc}
