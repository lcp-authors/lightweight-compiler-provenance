
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	11504 <__assert_fail@plt+0x48>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <fstatfs64@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <fstatfs64@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	sl, r1, ip, ror #28

00011198 <fstatfs64@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <calloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <endgrent@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <raise@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <strcmp@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <getpwuid@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <fflush@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <memmove@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <free@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <_exit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <memcpy@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <__strtoull_internal@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <stpcpy@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <dcgettext@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <realloc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <textdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <__fxstatat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <iswprint@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <__fxstat64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <fwrite@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <lseek64@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <__ctype_get_mb_cur_max@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <malloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <__libc_start_main@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <__freading@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <__gmon_start__@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <getopt_long@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <__ctype_b_loc@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <exit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <bcmp@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <strlen@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <strchr@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <openat64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <fchown@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <__errno_location@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <__cxa_atexit@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <memset@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <__printf_chk@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <fileno@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__fprintf_chk@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <fclose@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <fseeko64@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <fcntl64@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <setlocale@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <strrchr@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <nl_langinfo@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <readdir64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <fdopendir@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <dirfd@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <fchdir@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <qsort@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <fchownat@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <bindtextdomain@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <__xstat64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <strncmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <abort@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <close@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__lxstat64@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <closedir@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <getgrgid@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <getgrnam@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <__assert_fail@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

Disassembly of section .text:

000114c8 <.text>:
   114c8:	mov	fp, #0
   114cc:	mov	lr, #0
   114d0:	pop	{r1}		; (ldr r1, [sp], #4)
   114d4:	mov	r2, sp
   114d8:	push	{r2}		; (str r2, [sp, #-4]!)
   114dc:	push	{r0}		; (str r0, [sp, #-4]!)
   114e0:	ldr	ip, [pc, #16]	; 114f8 <__assert_fail@plt+0x3c>
   114e4:	push	{ip}		; (str ip, [sp, #-4]!)
   114e8:	ldr	r0, [pc, #12]	; 114fc <__assert_fail@plt+0x40>
   114ec:	ldr	r3, [pc, #12]	; 11500 <__assert_fail@plt+0x44>
   114f0:	bl	112f4 <__libc_start_main@plt>
   114f4:	bl	11474 <abort@plt>
   114f8:	andeq	sl, r1, r4, ror #15
   114fc:	andeq	r1, r1, ip, ror #17
   11500:	andeq	sl, r1, r4, lsl #15
   11504:	ldr	r3, [pc, #20]	; 11520 <__assert_fail@plt+0x64>
   11508:	ldr	r2, [pc, #20]	; 11524 <__assert_fail@plt+0x68>
   1150c:	add	r3, pc, r3
   11510:	ldr	r2, [r3, r2]
   11514:	cmp	r2, #0
   11518:	bxeq	lr
   1151c:	b	1130c <__gmon_start__@plt>
   11520:	andeq	sl, r1, ip, ror #21
   11524:	andeq	r0, r0, ip, lsl r1
   11528:	ldr	r0, [pc, #24]	; 11548 <__assert_fail@plt+0x8c>
   1152c:	ldr	r3, [pc, #24]	; 1154c <__assert_fail@plt+0x90>
   11530:	cmp	r3, r0
   11534:	bxeq	lr
   11538:	ldr	r3, [pc, #16]	; 11550 <__assert_fail@plt+0x94>
   1153c:	cmp	r3, #0
   11540:	bxeq	lr
   11544:	bx	r3
   11548:	andeq	ip, r2, r0, ror r1
   1154c:	andeq	ip, r2, r0, ror r1
   11550:	andeq	r0, r0, r0
   11554:	ldr	r0, [pc, #36]	; 11580 <__assert_fail@plt+0xc4>
   11558:	ldr	r1, [pc, #36]	; 11584 <__assert_fail@plt+0xc8>
   1155c:	sub	r1, r1, r0
   11560:	asr	r1, r1, #2
   11564:	add	r1, r1, r1, lsr #31
   11568:	asrs	r1, r1, #1
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0xcc>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	ip, r2, r0, ror r1
   11584:	andeq	ip, r2, r0, ror r1
   11588:	andeq	r0, r0, r0
   1158c:	push	{r4, lr}
   11590:	ldr	r4, [pc, #24]	; 115b0 <__assert_fail@plt+0xf4>
   11594:	ldrb	r3, [r4]
   11598:	cmp	r3, #0
   1159c:	popne	{r4, pc}
   115a0:	bl	11528 <__assert_fail@plt+0x6c>
   115a4:	mov	r3, #1
   115a8:	strb	r3, [r4]
   115ac:	pop	{r4, pc}
   115b0:	andeq	ip, r2, ip, lsl #3
   115b4:	b	11554 <__assert_fail@plt+0x98>
   115b8:	push	{fp, lr}
   115bc:	mov	fp, sp
   115c0:	sub	sp, sp, #56	; 0x38
   115c4:	mov	r4, r0
   115c8:	cmp	r0, #0
   115cc:	bne	118a8 <__assert_fail@plt+0x3ec>
   115d0:	movw	r1, #43059	; 0xa833
   115d4:	mov	r0, #0
   115d8:	mov	r2, #5
   115dc:	movt	r1, #1
   115e0:	bl	1124c <dcgettext@plt>
   115e4:	movw	r5, #49584	; 0xc1b0
   115e8:	mov	r1, r0
   115ec:	mov	r0, #1
   115f0:	movt	r5, #2
   115f4:	ldr	r2, [r5]
   115f8:	mov	r3, r2
   115fc:	bl	1139c <__printf_chk@plt>
   11600:	movw	r1, #43144	; 0xa888
   11604:	mov	r0, #0
   11608:	mov	r2, #5
   1160c:	movt	r1, #1
   11610:	bl	1124c <dcgettext@plt>
   11614:	movw	r7, #49540	; 0xc184
   11618:	movt	r7, #2
   1161c:	ldr	r1, [r7]
   11620:	bl	111bc <fputs_unlocked@plt>
   11624:	movw	r1, #43252	; 0xa8f4
   11628:	mov	r0, #0
   1162c:	mov	r2, #5
   11630:	movt	r1, #1
   11634:	bl	1124c <dcgettext@plt>
   11638:	ldr	r1, [r7]
   1163c:	bl	111bc <fputs_unlocked@plt>
   11640:	movw	r1, #43453	; 0xa9bd
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #1
   11650:	bl	1124c <dcgettext@plt>
   11654:	ldr	r1, [r7]
   11658:	bl	111bc <fputs_unlocked@plt>
   1165c:	movw	r1, #43684	; 0xaaa4
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	1124c <dcgettext@plt>
   11670:	ldr	r1, [r7]
   11674:	bl	111bc <fputs_unlocked@plt>
   11678:	movw	r1, #43803	; 0xab1b
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #1
   11688:	bl	1124c <dcgettext@plt>
   1168c:	ldr	r1, [r7]
   11690:	bl	111bc <fputs_unlocked@plt>
   11694:	movw	r1, #43931	; 0xab9b
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #1
   116a4:	bl	1124c <dcgettext@plt>
   116a8:	ldr	r1, [r7]
   116ac:	bl	111bc <fputs_unlocked@plt>
   116b0:	movw	r1, #44037	; 0xac05
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	1124c <dcgettext@plt>
   116c4:	ldr	r1, [r7]
   116c8:	bl	111bc <fputs_unlocked@plt>
   116cc:	movw	r1, #44108	; 0xac4c
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	1124c <dcgettext@plt>
   116e0:	ldr	r1, [r7]
   116e4:	bl	111bc <fputs_unlocked@plt>
   116e8:	movw	r1, #44573	; 0xae1d
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	1124c <dcgettext@plt>
   116fc:	ldr	r1, [r7]
   11700:	bl	111bc <fputs_unlocked@plt>
   11704:	movw	r1, #44618	; 0xae4a
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	movt	r1, #1
   11714:	bl	1124c <dcgettext@plt>
   11718:	ldr	r1, [r7]
   1171c:	bl	111bc <fputs_unlocked@plt>
   11720:	movw	r1, #44672	; 0xae80
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #1
   11730:	bl	1124c <dcgettext@plt>
   11734:	ldr	r2, [r5]
   11738:	mov	r1, r0
   1173c:	mov	r0, #1
   11740:	mov	r3, r2
   11744:	bl	1139c <__printf_chk@plt>
   11748:	movw	r0, #45624	; 0xb238
   1174c:	mov	r2, #48	; 0x30
   11750:	mov	r6, sp
   11754:	movw	r5, #44805	; 0xaf05
   11758:	movt	r0, #1
   1175c:	movt	r5, #1
   11760:	add	r1, r0, #32
   11764:	add	r3, r0, #16
   11768:	vld1.64	{d18-d19}, [r0], r2
   1176c:	vld1.64	{d16-d17}, [r1]
   11770:	vld1.64	{d20-d21}, [r3]
   11774:	vldr	d22, [r0]
   11778:	add	r1, r6, #32
   1177c:	add	r0, r6, #16
   11780:	vst1.64	{d16-d17}, [r1]
   11784:	movw	r1, #45001	; 0xafc9
   11788:	vst1.64	{d20-d21}, [r0]
   1178c:	mov	r0, r6
   11790:	movt	r1, #1
   11794:	vst1.64	{d18-d19}, [r0], r2
   11798:	vstr	d22, [r0]
   1179c:	mov	r0, r5
   117a0:	bl	111d4 <strcmp@plt>
   117a4:	cmp	r0, #0
   117a8:	ldrne	r1, [r6, #8]!
   117ac:	cmpne	r1, #0
   117b0:	bne	1179c <__assert_fail@plt+0x2e0>
   117b4:	movw	r1, #45096	; 0xb028
   117b8:	ldr	r6, [r6, #4]
   117bc:	mov	r0, #0
   117c0:	mov	r2, #5
   117c4:	movt	r1, #1
   117c8:	bl	1124c <dcgettext@plt>
   117cc:	movw	r2, #44844	; 0xaf2c
   117d0:	movw	r3, #45119	; 0xb03f
   117d4:	mov	r1, r0
   117d8:	mov	r0, #1
   117dc:	movt	r2, #1
   117e0:	movt	r3, #1
   117e4:	bl	1139c <__printf_chk@plt>
   117e8:	cmp	r6, #0
   117ec:	mov	r0, #5
   117f0:	mov	r1, #0
   117f4:	moveq	r6, r5
   117f8:	bl	113e4 <setlocale@plt>
   117fc:	cmp	r0, #0
   11800:	beq	11838 <__assert_fail@plt+0x37c>
   11804:	movw	r1, #45159	; 0xb067
   11808:	mov	r2, #3
   1180c:	movt	r1, #1
   11810:	bl	11468 <strncmp@plt>
   11814:	cmp	r0, #0
   11818:	beq	11838 <__assert_fail@plt+0x37c>
   1181c:	movw	r1, #45163	; 0xb06b
   11820:	mov	r0, #0
   11824:	mov	r2, #5
   11828:	movt	r1, #1
   1182c:	bl	1124c <dcgettext@plt>
   11830:	ldr	r1, [r7]
   11834:	bl	111bc <fputs_unlocked@plt>
   11838:	movw	r1, #45234	; 0xb0b2
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	1124c <dcgettext@plt>
   1184c:	movw	r2, #45119	; 0xb03f
   11850:	mov	r1, r0
   11854:	mov	r0, #1
   11858:	mov	r3, r5
   1185c:	movt	r2, #1
   11860:	bl	1139c <__printf_chk@plt>
   11864:	movw	r1, #45261	; 0xb0cd
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	1124c <dcgettext@plt>
   11878:	mov	r1, r0
   1187c:	movw	r0, #45029	; 0xafe5
   11880:	movw	r3, #44572	; 0xae1c
   11884:	cmp	r6, r5
   11888:	mov	r2, r6
   1188c:	movt	r0, #1
   11890:	movt	r3, #1
   11894:	moveq	r3, r0
   11898:	mov	r0, #1
   1189c:	bl	1139c <__printf_chk@plt>
   118a0:	mov	r0, r4
   118a4:	bl	11330 <exit@plt>
   118a8:	movw	r0, #49536	; 0xc180
   118ac:	movw	r1, #43020	; 0xa80c
   118b0:	mov	r2, #5
   118b4:	movt	r0, #2
   118b8:	movt	r1, #1
   118bc:	ldr	r5, [r0]
   118c0:	mov	r0, #0
   118c4:	bl	1124c <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	movw	r0, #49584	; 0xc1b0
   118d0:	mov	r1, #1
   118d4:	movt	r0, #2
   118d8:	ldr	r3, [r0]
   118dc:	mov	r0, r5
   118e0:	bl	113b4 <__fprintf_chk@plt>
   118e4:	mov	r0, r4
   118e8:	bl	11330 <exit@plt>
   118ec:	push	{fp, lr}
   118f0:	mov	fp, sp
   118f4:	sub	sp, sp, #144	; 0x90
   118f8:	mov	r7, r0
   118fc:	ldr	r0, [r1]
   11900:	mov	r4, r1
   11904:	bl	16684 <__assert_fail@plt+0x51c8>
   11908:	movw	r1, #44572	; 0xae1c
   1190c:	mov	r0, #6
   11910:	movt	r1, #1
   11914:	bl	113e4 <setlocale@plt>
   11918:	movw	r5, #44848	; 0xaf30
   1191c:	movw	r1, #44811	; 0xaf0b
   11920:	movt	r5, #1
   11924:	movt	r1, #1
   11928:	mov	r0, r5
   1192c:	bl	11450 <bindtextdomain@plt>
   11930:	mov	r0, r5
   11934:	bl	11264 <textdomain@plt>
   11938:	movw	r0, #11468	; 0x2ccc
   1193c:	movt	r0, #1
   11940:	bl	1a7e8 <__assert_fail@plt+0x932c>
   11944:	sub	r0, fp, #24
   11948:	bl	11e74 <__assert_fail@plt+0x9b8>
   1194c:	movw	r5, #44835	; 0xaf23
   11950:	movw	r6, #45416	; 0xb168
   11954:	mov	r9, #0
   11958:	mov	r0, #16
   1195c:	mvn	r8, #0
   11960:	movt	r5, #1
   11964:	movt	r6, #1
   11968:	mov	r1, #0
   1196c:	str	r1, [sp, #12]
   11970:	mov	sl, r0
   11974:	mov	r0, r7
   11978:	mov	r1, r4
   1197c:	mov	r2, r5
   11980:	mov	r3, r6
   11984:	str	r9, [sp]
   11988:	bl	11318 <getopt_long@plt>
   1198c:	cmp	r0, #71	; 0x47
   11990:	ble	11b28 <__assert_fail@plt+0x66c>
   11994:	sub	r1, r0, #72	; 0x48
   11998:	cmp	r1, #46	; 0x2e
   1199c:	bhi	11a70 <__assert_fail@plt+0x5b4>
   119a0:	add	r2, pc, #4
   119a4:	mov	r0, #17
   119a8:	ldr	pc, [r2, r1, lsl #2]
   119ac:	andeq	r1, r1, r0, ror r9
   119b0:	andeq	r1, r1, ip, ror #28
   119b4:	andeq	r1, r1, ip, ror #28
   119b8:	andeq	r1, r1, ip, ror #28
   119bc:	andeq	r1, r1, r8, ror #20
   119c0:	andeq	r1, r1, ip, ror #28
   119c4:	andeq	r1, r1, ip, ror #28
   119c8:	andeq	r1, r1, ip, ror #28
   119cc:	andeq	r1, r1, r0, ror #21
   119d0:	andeq	r1, r1, ip, ror #28
   119d4:	andeq	r1, r1, r8, ror #21
   119d8:	andeq	r1, r1, ip, ror #28
   119dc:	andeq	r1, r1, ip, ror #28
   119e0:	andeq	r1, r1, ip, ror #28
   119e4:	andeq	r1, r1, ip, ror #28
   119e8:	andeq	r1, r1, ip, ror #28
   119ec:	andeq	r1, r1, ip, ror #28
   119f0:	andeq	r1, r1, ip, ror #28
   119f4:	andeq	r1, r1, ip, ror #28
   119f8:	andeq	r1, r1, ip, ror #28
   119fc:	andeq	r1, r1, ip, ror #28
   11a00:	andeq	r1, r1, ip, ror #28
   11a04:	andeq	r1, r1, ip, ror #28
   11a08:	andeq	r1, r1, ip, ror #28
   11a0c:	andeq	r1, r1, ip, ror #28
   11a10:	andeq	r1, r1, ip, ror #28
   11a14:	andeq	r1, r1, ip, ror #28
   11a18:	andeq	r1, r1, r0, lsr #21
   11a1c:	andeq	r1, r1, ip, ror #28
   11a20:	andeq	r1, r1, ip, ror #28
   11a24:	strdeq	r1, [r1], -r8
   11a28:	andeq	r1, r1, ip, ror #28
   11a2c:	andeq	r1, r1, r8, lsl #22
   11a30:	andeq	r1, r1, ip, ror #28
   11a34:	andeq	r1, r1, ip, ror #28
   11a38:	andeq	r1, r1, ip, ror #28
   11a3c:	andeq	r1, r1, ip, ror #28
   11a40:	andeq	r1, r1, ip, ror #28
   11a44:	andeq	r1, r1, ip, ror #28
   11a48:	andeq	r1, r1, ip, ror #28
   11a4c:	andeq	r1, r1, ip, ror #28
   11a50:	andeq	r1, r1, ip, ror #28
   11a54:	andeq	r1, r1, ip, ror #28
   11a58:	andeq	r1, r1, ip, ror #28
   11a5c:	andeq	r1, r1, ip, ror #28
   11a60:	andeq	r1, r1, ip, ror #28
   11a64:	andeq	r1, r1, r4, lsl fp
   11a68:	mov	r0, #2
   11a6c:	b	11970 <__assert_fail@plt+0x4b4>
   11a70:	sub	r0, r0, #256	; 0x100
   11a74:	cmp	r0, #3
   11a78:	bhi	11e6c <__assert_fail@plt+0x9b0>
   11a7c:	add	r1, pc, #0
   11a80:	ldr	pc, [r1, r0, lsl #2]
   11a84:	muleq	r1, r4, sl
   11a88:	andeq	r1, r1, r0, lsr #22
   11a8c:			; <UNDEFINED> instruction: 0x00011ab0
   11a90:	andeq	r1, r1, r0, asr #21
   11a94:	mov	r8, #1
   11a98:	mov	r0, sl
   11a9c:	b	11970 <__assert_fail@plt+0x4b4>
   11aa0:	mov	r0, #1
   11aa4:	str	r0, [fp, #-24]	; 0xffffffe8
   11aa8:	mov	r0, sl
   11aac:	b	11970 <__assert_fail@plt+0x4b4>
   11ab0:	mov	r0, #1
   11ab4:	str	r0, [sp, #12]
   11ab8:	mov	r0, sl
   11abc:	b	11970 <__assert_fail@plt+0x4b4>
   11ac0:	movw	r0, #49544	; 0xc188
   11ac4:	movw	r1, #49552	; 0xc190
   11ac8:	movt	r0, #2
   11acc:	movt	r1, #2
   11ad0:	ldr	r0, [r0]
   11ad4:	str	r0, [r1]
   11ad8:	mov	r0, sl
   11adc:	b	11970 <__assert_fail@plt+0x4b4>
   11ae0:	mov	r0, #16
   11ae4:	b	11970 <__assert_fail@plt+0x4b4>
   11ae8:	mov	r0, #1
   11aec:	strb	r0, [fp, #-20]	; 0xffffffec
   11af0:	mov	r0, sl
   11af4:	b	11970 <__assert_fail@plt+0x4b4>
   11af8:	mov	r0, #1
   11afc:	strb	r0, [fp, #-11]
   11b00:	mov	r0, sl
   11b04:	b	11970 <__assert_fail@plt+0x4b4>
   11b08:	mov	r8, #0
   11b0c:	mov	r0, sl
   11b10:	b	11970 <__assert_fail@plt+0x4b4>
   11b14:	str	r9, [fp, #-24]	; 0xffffffe8
   11b18:	mov	r0, sl
   11b1c:	b	11970 <__assert_fail@plt+0x4b4>
   11b20:	mov	r0, sl
   11b24:	b	11968 <__assert_fail@plt+0x4ac>
   11b28:	cmn	r0, #3
   11b2c:	beq	11b40 <__assert_fail@plt+0x684>
   11b30:	cmn	r0, #2
   11b34:	bne	11b94 <__assert_fail@plt+0x6d8>
   11b38:	mov	r0, #0
   11b3c:	bl	115b8 <__assert_fail@plt+0xfc>
   11b40:	movw	r0, #49448	; 0xc128
   11b44:	movw	r2, #44874	; 0xaf4a
   11b48:	mov	r1, #0
   11b4c:	movw	r7, #44858	; 0xaf3a
   11b50:	movt	r0, #2
   11b54:	movt	r2, #1
   11b58:	str	r1, [sp, #8]
   11b5c:	movw	r1, #44805	; 0xaf05
   11b60:	movt	r7, #1
   11b64:	movt	r1, #1
   11b68:	ldr	r3, [r0]
   11b6c:	movw	r0, #49540	; 0xc184
   11b70:	str	r2, [sp, #4]
   11b74:	movw	r2, #44844	; 0xaf2c
   11b78:	str	r7, [sp]
   11b7c:	movt	r0, #2
   11b80:	movt	r2, #1
   11b84:	ldr	r0, [r0]
   11b88:	bl	18948 <__assert_fail@plt+0x748c>
   11b8c:	mov	r0, #0
   11b90:	bl	11330 <exit@plt>
   11b94:	cmn	r0, #1
   11b98:	bne	11e6c <__assert_fail@plt+0x9b0>
   11b9c:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11ba0:	mov	r9, #16
   11ba4:	cmp	r0, #0
   11ba8:	bne	11bb4 <__assert_fail@plt+0x6f8>
   11bac:	mov	r0, r8
   11bb0:	b	11bf4 <__assert_fail@plt+0x738>
   11bb4:	cmp	sl, #16
   11bb8:	bne	11bec <__assert_fail@plt+0x730>
   11bbc:	mov	r0, #0
   11bc0:	cmp	r8, #1
   11bc4:	bne	11bf4 <__assert_fail@plt+0x738>
   11bc8:	movw	r1, #44887	; 0xaf57
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	1124c <dcgettext@plt>
   11bdc:	mov	r2, r0
   11be0:	mov	r0, #1
   11be4:	mov	r1, #0
   11be8:	bl	112d0 <error@plt>
   11bec:	mov	r0, r8
   11bf0:	mov	r9, sl
   11bf4:	cmp	r0, #0
   11bf8:	movw	r8, #49528	; 0xc178
   11bfc:	mov	r2, #2
   11c00:	movwne	r0, #1
   11c04:	movt	r8, #2
   11c08:	strb	r0, [fp, #-12]
   11c0c:	movw	r0, #49552	; 0xc190
   11c10:	movt	r0, #2
   11c14:	ldr	r1, [r0]
   11c18:	ldr	r0, [r8]
   11c1c:	cmp	r1, #0
   11c20:	sub	r3, r7, r0
   11c24:	movwne	r2, #1
   11c28:	cmp	r3, r2
   11c2c:	bge	11c78 <__assert_fail@plt+0x7bc>
   11c30:	cmp	r0, r7
   11c34:	bge	11ca8 <__assert_fail@plt+0x7ec>
   11c38:	movw	r1, #44945	; 0xaf91
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	movt	r1, #1
   11c48:	bl	1124c <dcgettext@plt>
   11c4c:	mov	r5, r0
   11c50:	add	r0, r4, r7, lsl #2
   11c54:	ldr	r0, [r0, #-4]
   11c58:	bl	182d8 <__assert_fail@plt+0x6e1c>
   11c5c:	mov	r3, r0
   11c60:	mov	r0, #0
   11c64:	mov	r1, #0
   11c68:	mov	r2, r5
   11c6c:	bl	112d0 <error@plt>
   11c70:	mov	r0, #1
   11c74:	bl	115b8 <__assert_fail@plt+0xfc>
   11c78:	cmp	r1, #0
   11c7c:	beq	11cd4 <__assert_fail@plt+0x818>
   11c80:	add	r2, sp, #16
   11c84:	mov	r0, #3
   11c88:	bl	1145c <__xstat64@plt>
   11c8c:	cmp	r0, #0
   11c90:	bne	11d80 <__assert_fail@plt+0x8c4>
   11c94:	ldr	r6, [sp, #44]	; 0x2c
   11c98:	mov	r0, r6
   11c9c:	bl	11ebc <__assert_fail@plt+0xa00>
   11ca0:	str	r0, [fp, #-4]
   11ca4:	b	11dc0 <__assert_fail@plt+0x904>
   11ca8:	movw	r1, #44929	; 0xaf81
   11cac:	mov	r0, #0
   11cb0:	mov	r2, #5
   11cb4:	movt	r1, #1
   11cb8:	bl	1124c <dcgettext@plt>
   11cbc:	mov	r2, r0
   11cc0:	mov	r0, #0
   11cc4:	mov	r1, #0
   11cc8:	bl	112d0 <error@plt>
   11ccc:	mov	r0, #1
   11cd0:	bl	115b8 <__assert_fail@plt+0xfc>
   11cd4:	add	r1, r0, #1
   11cd8:	str	r1, [r8]
   11cdc:	ldr	r5, [r4, r0, lsl #2]
   11ce0:	mov	r0, #0
   11ce4:	ldrb	r1, [r5]
   11ce8:	cmp	r1, #0
   11cec:	beq	11cf8 <__assert_fail@plt+0x83c>
   11cf0:	mov	r0, r5
   11cf4:	bl	19080 <__assert_fail@plt+0x7bc4>
   11cf8:	str	r0, [fp, #-4]
   11cfc:	mvn	r6, #0
   11d00:	ldrb	r0, [r5]
   11d04:	cmp	r0, #0
   11d08:	beq	11dc0 <__assert_fail@plt+0x904>
   11d0c:	mov	r0, r5
   11d10:	bl	114b0 <getgrnam@plt>
   11d14:	cmp	r0, #0
   11d18:	bne	11db0 <__assert_fail@plt+0x8f4>
   11d1c:	movw	r0, #44572	; 0xae1c
   11d20:	add	r3, sp, #16
   11d24:	mov	r1, #0
   11d28:	mov	r2, #10
   11d2c:	movt	r0, #1
   11d30:	str	r0, [sp]
   11d34:	mov	r0, r5
   11d38:	bl	19178 <__assert_fail@plt+0x7cbc>
   11d3c:	cmp	r0, #0
   11d40:	ldreq	r0, [sp, #20]
   11d44:	cmpeq	r0, #0
   11d48:	beq	11db8 <__assert_fail@plt+0x8fc>
   11d4c:	movw	r1, #45396	; 0xb154
   11d50:	mov	r0, #0
   11d54:	mov	r2, #5
   11d58:	movt	r1, #1
   11d5c:	bl	1124c <dcgettext@plt>
   11d60:	mov	r4, r0
   11d64:	mov	r0, r5
   11d68:	bl	182d8 <__assert_fail@plt+0x6e1c>
   11d6c:	mov	r3, r0
   11d70:	mov	r0, #1
   11d74:	mov	r1, #0
   11d78:	mov	r2, r4
   11d7c:	bl	112d0 <error@plt>
   11d80:	bl	11378 <__errno_location@plt>
   11d84:	movw	r1, #44970	; 0xafaa
   11d88:	ldr	r4, [r0]
   11d8c:	mov	r0, #0
   11d90:	mov	r2, #5
   11d94:	movt	r1, #1
   11d98:	bl	1124c <dcgettext@plt>
   11d9c:	mov	r5, r0
   11da0:	movw	r0, #49552	; 0xc190
   11da4:	movt	r0, #2
   11da8:	ldr	r1, [r0]
   11dac:	b	11e1c <__assert_fail@plt+0x960>
   11db0:	ldr	r6, [r0, #8]
   11db4:	b	11dbc <__assert_fail@plt+0x900>
   11db8:	ldr	r6, [sp, #16]
   11dbc:	bl	111b0 <endgrent@plt>
   11dc0:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11dc4:	cmp	r0, #0
   11dc8:	beq	11e38 <__assert_fail@plt+0x97c>
   11dcc:	ldr	r0, [sp, #12]
   11dd0:	eor	r0, r0, #1
   11dd4:	tst	r0, #1
   11dd8:	bne	11e38 <__assert_fail@plt+0x97c>
   11ddc:	movw	r0, #49560	; 0xc198
   11de0:	movt	r0, #2
   11de4:	bl	18424 <__assert_fail@plt+0x6f68>
   11de8:	cmp	r0, #0
   11dec:	str	r0, [fp, #-16]
   11df0:	bne	11e38 <__assert_fail@plt+0x97c>
   11df4:	bl	11378 <__errno_location@plt>
   11df8:	movw	r1, #44970	; 0xafaa
   11dfc:	ldr	r4, [r0]
   11e00:	mov	r0, #0
   11e04:	mov	r2, #5
   11e08:	movt	r1, #1
   11e0c:	bl	1124c <dcgettext@plt>
   11e10:	movw	r1, #47815	; 0xbac7
   11e14:	mov	r5, r0
   11e18:	movt	r1, #1
   11e1c:	mov	r0, #4
   11e20:	bl	17db0 <__assert_fail@plt+0x68f4>
   11e24:	mov	r3, r0
   11e28:	mov	r0, #1
   11e2c:	mov	r1, r4
   11e30:	mov	r2, r5
   11e34:	bl	112d0 <error@plt>
   11e38:	ldr	r0, [r8]
   11e3c:	mvn	r1, #0
   11e40:	mvn	r2, #0
   11e44:	mov	r3, r6
   11e48:	str	r1, [sp]
   11e4c:	str	r1, [sp, #4]
   11e50:	sub	r1, fp, #24
   11e54:	str	r1, [sp, #8]
   11e58:	orr	r1, r9, #1024	; 0x400
   11e5c:	add	r0, r4, r0, lsl #2
   11e60:	bl	11f3c <__assert_fail@plt+0xa80>
   11e64:	eor	r0, r0, #1
   11e68:	bl	11330 <exit@plt>
   11e6c:	mov	r0, #1
   11e70:	bl	115b8 <__assert_fail@plt+0xfc>
   11e74:	mov	r1, #0
   11e78:	mov	r2, #2
   11e7c:	str	r1, [r0, #8]
   11e80:	str	r2, [r0]
   11e84:	mov	r2, #1
   11e88:	str	r1, [r0, #16]
   11e8c:	str	r1, [r0, #20]
   11e90:	strh	r2, [r0, #12]
   11e94:	strb	r1, [r0, #4]
   11e98:	bx	lr
   11e9c:	push	{r4, sl, fp, lr}
   11ea0:	add	fp, sp, #8
   11ea4:	mov	r4, r0
   11ea8:	ldr	r0, [r0, #16]
   11eac:	bl	12db4 <__assert_fail@plt+0x18f8>
   11eb0:	ldr	r0, [r4, #20]
   11eb4:	pop	{r4, sl, fp, lr}
   11eb8:	b	12db4 <__assert_fail@plt+0x18f8>
   11ebc:	push	{r4, sl, fp, lr}
   11ec0:	add	fp, sp, #8
   11ec4:	sub	sp, sp, #24
   11ec8:	mov	r4, r0
   11ecc:	bl	114a4 <getgrgid@plt>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11ee0 <__assert_fail@plt+0xa24>
   11ed8:	ldr	r0, [r0]
   11edc:	b	11ef0 <__assert_fail@plt+0xa34>
   11ee0:	add	r2, sp, #3
   11ee4:	mov	r0, r4
   11ee8:	mov	r1, #0
   11eec:	bl	16590 <__assert_fail@plt+0x50d4>
   11ef0:	bl	19080 <__assert_fail@plt+0x7bc4>
   11ef4:	sub	sp, fp, #8
   11ef8:	pop	{r4, sl, fp, pc}
   11efc:	push	{r4, sl, fp, lr}
   11f00:	add	fp, sp, #8
   11f04:	sub	sp, sp, #24
   11f08:	mov	r4, r0
   11f0c:	bl	111e0 <getpwuid@plt>
   11f10:	cmp	r0, #0
   11f14:	beq	11f20 <__assert_fail@plt+0xa64>
   11f18:	ldr	r0, [r0]
   11f1c:	b	11f30 <__assert_fail@plt+0xa74>
   11f20:	add	r2, sp, #3
   11f24:	mov	r0, r4
   11f28:	mov	r1, #0
   11f2c:	bl	16590 <__assert_fail@plt+0x50d4>
   11f30:	bl	19080 <__assert_fail@plt+0x7bc4>
   11f34:	sub	sp, fp, #8
   11f38:	pop	{r4, sl, fp, pc}
   11f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f40:	add	fp, sp, #28
   11f44:	sub	sp, sp, #252	; 0xfc
   11f48:	str	r3, [sp, #12]
   11f4c:	str	r2, [sp, #20]
   11f50:	ldr	r2, [fp, #8]
   11f54:	ldr	r3, [fp, #12]
   11f58:	ldr	r5, [fp, #16]
   11f5c:	and	r3, r3, r2
   11f60:	mov	r2, #0
   11f64:	cmn	r3, #1
   11f68:	str	r3, [sp, #24]
   11f6c:	bne	11f90 <__assert_fail@plt+0xad4>
   11f70:	ldrb	r3, [r5, #12]
   11f74:	cmp	r3, #0
   11f78:	bne	11f90 <__assert_fail@plt+0xad4>
   11f7c:	ldr	r2, [r5]
   11f80:	sub	r2, r2, #2
   11f84:	clz	r2, r2
   11f88:	lsr	r2, r2, #5
   11f8c:	lsl	r2, r2, #3
   11f90:	orr	r1, r2, r1
   11f94:	mov	r2, #0
   11f98:	bl	190fc <__assert_fail@plt+0x7c40>
   11f9c:	str	r0, [sp, #36]	; 0x24
   11fa0:	bl	13744 <__assert_fail@plt+0x2288>
   11fa4:	cmp	r0, #0
   11fa8:	beq	12b7c <__assert_fail@plt+0x16c0>
   11fac:	ldr	r1, [sp, #20]
   11fb0:	mov	r9, r0
   11fb4:	movw	r0, #46140	; 0xb43c
   11fb8:	movw	r2, #46115	; 0xb423
   11fbc:	mov	r6, #1
   11fc0:	movt	r0, #1
   11fc4:	movt	r2, #1
   11fc8:	cmn	r1, #1
   11fcc:	moveq	r2, r0
   11fd0:	sub	r0, fp, #136	; 0x88
   11fd4:	add	r0, r0, #96	; 0x60
   11fd8:	str	r2, [sp, #8]
   11fdc:	str	r0, [sp, #4]
   11fe0:	b	12058 <__assert_fail@plt+0xb9c>
   11fe4:	movw	r1, #46161	; 0xb451
   11fe8:	mov	r0, #0
   11fec:	mov	r2, #5
   11ff0:	movt	r1, #1
   11ff4:	bl	1124c <dcgettext@plt>
   11ff8:	ldr	r1, [sp, #28]
   11ffc:	mov	r4, r0
   12000:	mov	r0, #4
   12004:	bl	17db0 <__assert_fail@plt+0x68f4>
   12008:	mov	r2, r0
   1200c:	mov	r0, #1
   12010:	mov	r1, r4
   12014:	bl	1139c <__printf_chk@plt>
   12018:	mov	r0, r7
   1201c:	bl	12db4 <__assert_fail@plt+0x18f8>
   12020:	mov	r0, sl
   12024:	bl	12db4 <__assert_fail@plt+0x18f8>
   12028:	ldr	r4, [sp, #16]
   1202c:	ldr	r5, [fp, #16]
   12030:	ldrb	r0, [r5, #4]
   12034:	cmp	r0, #0
   12038:	beq	1216c <__assert_fail@plt+0xcb0>
   1203c:	ldr	r6, [sp, #32]
   12040:	ldr	r0, [sp, #36]	; 0x24
   12044:	and	r6, r6, r4
   12048:	bl	13744 <__assert_fail@plt+0x2288>
   1204c:	mov	r9, r0
   12050:	cmp	r0, #0
   12054:	beq	12b80 <__assert_fail@plt+0x16c4>
   12058:	ldrh	r0, [r9, #56]	; 0x38
   1205c:	ldr	r8, [r9, #24]
   12060:	ldr	r7, [r9, #28]
   12064:	add	sl, r9, #64	; 0x40
   12068:	sub	r0, r0, #1
   1206c:	cmp	r0, #9
   12070:	bhi	1228c <__assert_fail@plt+0xdd0>
   12074:	add	r1, pc, #0
   12078:	ldr	pc, [r1, r0, lsl #2]
   1207c:	andeq	r2, r1, r4, lsr #1
   12080:	andeq	r2, r1, r8, lsr #4
   12084:	andeq	r2, r1, ip, lsl #5
   12088:	andeq	r2, r1, r0, lsl #3
   1208c:	andeq	r2, r1, ip, lsl #5
   12090:	andeq	r2, r1, r0, lsl #5
   12094:	muleq	r1, r4, r3
   12098:	andeq	r2, r1, ip, lsl #5
   1209c:	andeq	r2, r1, ip, lsl #5
   120a0:			; <UNDEFINED> instruction: 0x000121b4
   120a4:	ldrb	r0, [r5, #4]
   120a8:	cmp	r0, #0
   120ac:	beq	1228c <__assert_fail@plt+0xdd0>
   120b0:	ldr	r0, [r5, #8]
   120b4:	mov	r4, #1
   120b8:	cmp	r0, #0
   120bc:	beq	12040 <__assert_fail@plt+0xb84>
   120c0:	add	r1, r9, #160	; 0xa0
   120c4:	mov	r8, r6
   120c8:	ldrd	r2, [r0]
   120cc:	ldr	r6, [r1]
   120d0:	ldr	r5, [r1, #4]
   120d4:	eor	r1, r5, r3
   120d8:	eor	r2, r6, r2
   120dc:	orrs	r1, r2, r1
   120e0:	bne	1241c <__assert_fail@plt+0xf60>
   120e4:	ldrd	r0, [r0, #8]
   120e8:	ldrd	r2, [sl]
   120ec:	ldr	r5, [fp, #16]
   120f0:	mov	r6, r8
   120f4:	eor	r1, r3, r1
   120f8:	eor	r0, r2, r0
   120fc:	orrs	r0, r0, r1
   12100:	bne	12040 <__assert_fail@plt+0xb84>
   12104:	movw	r6, #47815	; 0xbac7
   12108:	mov	r0, r7
   1210c:	movt	r6, #1
   12110:	mov	r1, r6
   12114:	bl	111d4 <strcmp@plt>
   12118:	cmp	r0, #0
   1211c:	beq	12a5c <__assert_fail@plt+0x15a0>
   12120:	movw	r1, #45758	; 0xb2be
   12124:	mov	r0, #0
   12128:	mov	r2, #5
   1212c:	movt	r1, #1
   12130:	bl	1124c <dcgettext@plt>
   12134:	mov	r4, r0
   12138:	mov	r0, #0
   1213c:	mov	r1, #4
   12140:	mov	r2, r7
   12144:	bl	17d08 <__assert_fail@plt+0x684c>
   12148:	mov	r5, r0
   1214c:	mov	r0, #1
   12150:	mov	r1, #4
   12154:	mov	r2, r6
   12158:	bl	17d08 <__assert_fail@plt+0x684c>
   1215c:	mov	r3, r5
   12160:	ldr	r5, [fp, #16]
   12164:	str	r0, [sp]
   12168:	b	12a84 <__assert_fail@plt+0x15c8>
   1216c:	ldr	r0, [sp, #36]	; 0x24
   12170:	mov	r1, r9
   12174:	mov	r2, #4
   12178:	bl	14dc8 <__assert_fail@plt+0x390c>
   1217c:	b	1203c <__assert_fail@plt+0xb80>
   12180:	ldrb	r0, [r5, #13]
   12184:	str	r6, [sp, #32]
   12188:	mov	sl, #0
   1218c:	mov	r6, #1
   12190:	str	r7, [sp, #28]
   12194:	cmp	r0, #0
   12198:	bne	123b0 <__assert_fail@plt+0xef4>
   1219c:	ldr	r4, [r9, #32]
   121a0:	movw	r1, #45882	; 0xb33a
   121a4:	mov	sl, #0
   121a8:	mov	r0, #0
   121ac:	movt	r1, #1
   121b0:	b	121fc <__assert_fail@plt+0xd40>
   121b4:	ldr	r0, [r9, #48]	; 0x30
   121b8:	cmp	r0, #0
   121bc:	bne	121cc <__assert_fail@plt+0xd10>
   121c0:	ldr	r0, [r9, #16]
   121c4:	cmp	r0, #0
   121c8:	beq	12598 <__assert_fail@plt+0x10dc>
   121cc:	ldrb	r0, [r5, #13]
   121d0:	str	r6, [sp, #32]
   121d4:	mov	sl, #0
   121d8:	mov	r6, #1
   121dc:	str	r7, [sp, #28]
   121e0:	cmp	r0, #0
   121e4:	bne	123b0 <__assert_fail@plt+0xef4>
   121e8:	ldr	r4, [r9, #32]
   121ec:	movw	r1, #45865	; 0xb329
   121f0:	mov	sl, #0
   121f4:	mov	r0, #0
   121f8:	movt	r1, #1
   121fc:	mov	r2, #5
   12200:	bl	1124c <dcgettext@plt>
   12204:	mov	r5, r0
   12208:	mov	r0, #4
   1220c:	mov	r1, r7
   12210:	bl	17db0 <__assert_fail@plt+0x68f4>
   12214:	mov	r3, r0
   12218:	mov	r0, #0
   1221c:	mov	r1, r4
   12220:	mov	r2, r5
   12224:	b	12410 <__assert_fail@plt+0xf54>
   12228:	ldr	r0, [sp, #36]	; 0x24
   1222c:	mov	r1, r9
   12230:	bl	19148 <__assert_fail@plt+0x7c8c>
   12234:	cmp	r0, #0
   12238:	beq	1228c <__assert_fail@plt+0xdd0>
   1223c:	movw	r1, #45907	; 0xb353
   12240:	mov	r0, #0
   12244:	mov	r2, #5
   12248:	movt	r1, #1
   1224c:	bl	1124c <dcgettext@plt>
   12250:	mov	r4, r0
   12254:	mov	r0, #0
   12258:	mov	r1, #3
   1225c:	mov	r2, r7
   12260:	bl	1802c <__assert_fail@plt+0x6b70>
   12264:	mov	r3, r0
   12268:	mov	r0, #0
   1226c:	mov	r1, #0
   12270:	mov	r2, r4
   12274:	bl	112d0 <error@plt>
   12278:	mov	r4, #0
   1227c:	b	12040 <__assert_fail@plt+0xb84>
   12280:	ldrb	r0, [r5, #4]
   12284:	cmp	r0, #0
   12288:	beq	123dc <__assert_fail@plt+0xf20>
   1228c:	ldr	r0, [sp, #24]
   12290:	str	r6, [sp, #32]
   12294:	cmn	r0, #1
   12298:	bne	122b4 <__assert_fail@plt+0xdf8>
   1229c:	ldr	r0, [r5]
   122a0:	cmp	r0, #2
   122a4:	bne	122b4 <__assert_fail@plt+0xdf8>
   122a8:	ldr	r0, [r5, #8]
   122ac:	cmp	r0, #0
   122b0:	beq	12428 <__assert_fail@plt+0xf6c>
   122b4:	ldrb	r0, [r5, #12]
   122b8:	cmp	r0, #0
   122bc:	beq	12360 <__assert_fail@plt+0xea4>
   122c0:	ldr	r0, [r9, #80]	; 0x50
   122c4:	and	r0, r0, #61440	; 0xf000
   122c8:	cmp	r0, #40960	; 0xa000
   122cc:	bne	12360 <__assert_fail@plt+0xea4>
   122d0:	ldr	r0, [sp, #36]	; 0x24
   122d4:	add	sl, sp, #40	; 0x28
   122d8:	mov	r2, r8
   122dc:	mov	r3, sl
   122e0:	ldr	r1, [r0, #32]
   122e4:	mov	r0, #0
   122e8:	str	r0, [sp]
   122ec:	mov	r0, #3
   122f0:	bl	11270 <__fxstatat64@plt>
   122f4:	cmp	r0, #0
   122f8:	beq	12360 <__assert_fail@plt+0xea4>
   122fc:	ldrb	r0, [r5, #13]
   12300:	mov	r4, #0
   12304:	mov	r6, #1
   12308:	str	r7, [sp, #28]
   1230c:	cmp	r0, #0
   12310:	bne	12358 <__assert_fail@plt+0xe9c>
   12314:	bl	11378 <__errno_location@plt>
   12318:	movw	r1, #46093	; 0xb40d
   1231c:	ldr	r4, [r0]
   12320:	mov	r0, #0
   12324:	mov	r2, #5
   12328:	movt	r1, #1
   1232c:	bl	1124c <dcgettext@plt>
   12330:	ldr	r1, [sp, #28]
   12334:	mov	r5, r0
   12338:	mov	r0, #4
   1233c:	bl	17db0 <__assert_fail@plt+0x68f4>
   12340:	mov	r3, r0
   12344:	mov	r0, #0
   12348:	mov	r1, r4
   1234c:	mov	r2, r5
   12350:	bl	112d0 <error@plt>
   12354:	mov	r4, #0
   12358:	add	sl, sp, #40	; 0x28
   1235c:	b	12800 <__assert_fail@plt+0x1344>
   12360:	ldr	r2, [fp, #8]
   12364:	cmn	r2, #1
   12368:	beq	123b8 <__assert_fail@plt+0xefc>
   1236c:	ldr	r1, [sl, #24]
   12370:	ldr	r3, [fp, #12]
   12374:	sub	r0, r1, r2
   12378:	cmn	r3, #1
   1237c:	clz	r0, r0
   12380:	lsr	r0, r0, #5
   12384:	beq	1243c <__assert_fail@plt+0xf80>
   12388:	cmp	r1, r2
   1238c:	beq	123c4 <__assert_fail@plt+0xf08>
   12390:	b	1243c <__assert_fail@plt+0xf80>
   12394:	ldrb	r0, [r5, #13]
   12398:	str	r6, [sp, #32]
   1239c:	mov	sl, #0
   123a0:	mov	r6, #1
   123a4:	str	r7, [sp, #28]
   123a8:	cmp	r0, #0
   123ac:	beq	123e4 <__assert_fail@plt+0xf28>
   123b0:	mov	r5, #1
   123b4:	b	126d8 <__assert_fail@plt+0x121c>
   123b8:	ldr	r0, [fp, #12]
   123bc:	cmn	r0, #1
   123c0:	beq	12438 <__assert_fail@plt+0xf7c>
   123c4:	ldr	r0, [sl, #28]
   123c8:	ldr	r1, [fp, #12]
   123cc:	sub	r0, r0, r1
   123d0:	clz	r0, r0
   123d4:	lsr	r0, r0, #5
   123d8:	b	1243c <__assert_fail@plt+0xf80>
   123dc:	mov	r4, #1
   123e0:	b	12040 <__assert_fail@plt+0xb84>
   123e4:	ldr	r4, [r9, #32]
   123e8:	mov	r0, #0
   123ec:	mov	r1, #3
   123f0:	mov	r2, r7
   123f4:	mov	sl, #0
   123f8:	bl	1802c <__assert_fail@plt+0x6b70>
   123fc:	movw	r2, #45411	; 0xb163
   12400:	mov	r3, r0
   12404:	mov	r0, #0
   12408:	mov	r1, r4
   1240c:	movt	r2, #1
   12410:	bl	112d0 <error@plt>
   12414:	mov	r5, #1
   12418:	b	126d8 <__assert_fail@plt+0x121c>
   1241c:	ldr	r5, [fp, #16]
   12420:	mov	r6, r8
   12424:	b	12040 <__assert_fail@plt+0xb84>
   12428:	ldrb	r0, [r5, #12]
   1242c:	add	sl, r9, #64	; 0x40
   12430:	cmp	r0, #0
   12434:	bne	122c0 <__assert_fail@plt+0xe04>
   12438:	mov	r0, #1
   1243c:	ldrh	r1, [r9, #56]	; 0x38
   12440:	cmp	r1, #6
   12444:	bhi	12460 <__assert_fail@plt+0xfa4>
   12448:	mov	r2, #1
   1244c:	mov	r3, #86	; 0x56
   12450:	tst	r3, r2, lsl r1
   12454:	ldrne	r1, [r5, #8]
   12458:	cmpne	r1, #0
   1245c:	bne	124b0 <__assert_fail@plt+0xff4>
   12460:	mov	r4, #1
   12464:	cmp	r0, #0
   12468:	str	r7, [sp, #28]
   1246c:	beq	127fc <__assert_fail@plt+0x1340>
   12470:	ldr	r0, [sp, #36]	; 0x24
   12474:	ldr	r6, [r0, #32]
   12478:	ldrb	r0, [r5, #12]
   1247c:	cmp	r0, #0
   12480:	beq	12554 <__assert_fail@plt+0x1098>
   12484:	ldr	r0, [sp, #24]
   12488:	cmn	r0, #1
   1248c:	beq	12658 <__assert_fail@plt+0x119c>
   12490:	ldr	r0, [sl, #16]
   12494:	and	r0, r0, #61440	; 0xf000
   12498:	cmp	r0, #32768	; 0x8000
   1249c:	beq	125b8 <__assert_fail@plt+0x10fc>
   124a0:	cmp	r0, #16384	; 0x4000
   124a4:	bne	12658 <__assert_fail@plt+0x119c>
   124a8:	mov	r5, #18688	; 0x4900
   124ac:	b	125bc <__assert_fail@plt+0x1100>
   124b0:	ldrd	r2, [r1]
   124b4:	ldr	r5, [sl, #100]	; 0x64
   124b8:	ldr	r6, [sl, #96]	; 0x60
   124bc:	eor	r3, r5, r3
   124c0:	ldr	r5, [fp, #16]
   124c4:	eor	r2, r6, r2
   124c8:	orrs	r2, r2, r3
   124cc:	bne	12460 <__assert_fail@plt+0xfa4>
   124d0:	ldrd	r2, [r1, #8]
   124d4:	ldr	r1, [sl, #4]
   124d8:	ldr	r6, [sl]
   124dc:	eor	r1, r1, r3
   124e0:	eor	r2, r6, r2
   124e4:	orrs	r1, r2, r1
   124e8:	bne	12460 <__assert_fail@plt+0xfa4>
   124ec:	movw	r6, #47815	; 0xbac7
   124f0:	mov	r0, r7
   124f4:	movt	r6, #1
   124f8:	mov	r1, r6
   124fc:	bl	111d4 <strcmp@plt>
   12500:	cmp	r0, #0
   12504:	beq	12778 <__assert_fail@plt+0x12bc>
   12508:	movw	r1, #45758	; 0xb2be
   1250c:	mov	r0, #0
   12510:	mov	r2, #5
   12514:	movt	r1, #1
   12518:	bl	1124c <dcgettext@plt>
   1251c:	mov	r4, r0
   12520:	mov	r0, #0
   12524:	mov	r1, #4
   12528:	mov	r2, r7
   1252c:	bl	17d08 <__assert_fail@plt+0x684c>
   12530:	mov	r5, r0
   12534:	mov	r0, #1
   12538:	mov	r1, #4
   1253c:	mov	r2, r6
   12540:	bl	17d08 <__assert_fail@plt+0x684c>
   12544:	mov	r3, r5
   12548:	ldr	r5, [fp, #16]
   1254c:	str	r0, [sp]
   12550:	b	127a0 <__assert_fail@plt+0x12e4>
   12554:	ldr	r2, [sp, #20]
   12558:	ldr	r3, [sp, #12]
   1255c:	mov	r0, #256	; 0x100
   12560:	mov	r1, r8
   12564:	str	r0, [sp]
   12568:	mov	r0, r6
   1256c:	bl	11444 <fchownat@plt>
   12570:	cmp	r0, #0
   12574:	beq	12768 <__assert_fail@plt+0x12ac>
   12578:	bl	11378 <__errno_location@plt>
   1257c:	ldr	r0, [r0]
   12580:	mov	r6, #0
   12584:	cmp	r0, #95	; 0x5f
   12588:	bne	12680 <__assert_fail@plt+0x11c4>
   1258c:	mov	r5, #0
   12590:	mov	r4, #1
   12594:	b	12804 <__assert_fail@plt+0x1348>
   12598:	mov	r0, #1
   1259c:	mov	r1, r9
   125a0:	mov	r2, #1
   125a4:	str	r0, [r9, #16]
   125a8:	ldr	r0, [sp, #36]	; 0x24
   125ac:	bl	14dc8 <__assert_fail@plt+0x390c>
   125b0:	mov	r4, #1
   125b4:	b	12040 <__assert_fail@plt+0xb84>
   125b8:	mov	r5, #2304	; 0x900
   125bc:	mov	r0, r6
   125c0:	mov	r1, r8
   125c4:	mov	r2, r5
   125c8:	bl	11360 <openat64@plt>
   125cc:	mov	r7, r0
   125d0:	cmn	r0, #1
   125d4:	ble	1260c <__assert_fail@plt+0x1150>
   125d8:	mov	r0, #3
   125dc:	mov	r1, r7
   125e0:	sub	r2, fp, #136	; 0x88
   125e4:	bl	11288 <__fxstat64@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	126e0 <__assert_fail@plt+0x1224>
   125f0:	bl	11378 <__errno_location@plt>
   125f4:	ldr	r5, [r0]
   125f8:	mov	r4, r0
   125fc:	mov	r0, r7
   12600:	bl	11480 <close@plt>
   12604:	str	r5, [r4]
   12608:	b	12680 <__assert_fail@plt+0x11c4>
   1260c:	bl	11378 <__errno_location@plt>
   12610:	mov	r4, r0
   12614:	ldr	r0, [r0]
   12618:	cmp	r0, #13
   1261c:	bne	12680 <__assert_fail@plt+0x11c4>
   12620:	ldr	r0, [sl, #16]
   12624:	and	r0, r0, #61440	; 0xf000
   12628:	cmp	r0, #32768	; 0x8000
   1262c:	bne	12658 <__assert_fail@plt+0x119c>
   12630:	orr	r2, r5, #1
   12634:	mov	r0, r6
   12638:	mov	r1, r8
   1263c:	bl	11360 <openat64@plt>
   12640:	mov	r7, r0
   12644:	cmn	r0, #1
   12648:	bgt	125d8 <__assert_fail@plt+0x111c>
   1264c:	ldr	r0, [r4]
   12650:	cmp	r0, #13
   12654:	bne	12680 <__assert_fail@plt+0x11c4>
   12658:	ldr	r0, [sp, #36]	; 0x24
   1265c:	ldr	r2, [sp, #20]
   12660:	ldr	r3, [sp, #12]
   12664:	mov	r5, #0
   12668:	mov	r1, r8
   1266c:	str	r5, [sp]
   12670:	ldr	r0, [r0, #32]
   12674:	bl	11444 <fchownat@plt>
   12678:	cmp	r0, #0
   1267c:	beq	1276c <__assert_fail@plt+0x12b0>
   12680:	ldr	r0, [fp, #16]
   12684:	mov	r5, #0
   12688:	ldrb	r0, [r0, #13]
   1268c:	cmp	r0, #0
   12690:	bne	126d4 <__assert_fail@plt+0x1218>
   12694:	bl	11378 <__errno_location@plt>
   12698:	ldr	r1, [sp, #8]
   1269c:	ldr	r4, [r0]
   126a0:	mov	r0, #0
   126a4:	mov	r2, #5
   126a8:	mov	r5, #0
   126ac:	bl	1124c <dcgettext@plt>
   126b0:	ldr	r1, [sp, #28]
   126b4:	mov	r6, r0
   126b8:	mov	r0, #4
   126bc:	bl	17db0 <__assert_fail@plt+0x68f4>
   126c0:	mov	r3, r0
   126c4:	mov	r0, #0
   126c8:	mov	r1, r4
   126cc:	mov	r2, r6
   126d0:	bl	112d0 <error@plt>
   126d4:	mov	r6, #1
   126d8:	mov	r4, #0
   126dc:	b	12804 <__assert_fail@plt+0x1348>
   126e0:	ldr	r0, [sp, #4]
   126e4:	ldrd	r2, [sl, #96]	; 0x60
   126e8:	ldrd	r0, [r0]
   126ec:	eor	r1, r3, r1
   126f0:	eor	r0, r2, r0
   126f4:	orrs	r0, r0, r1
   126f8:	bne	127e0 <__assert_fail@plt+0x1324>
   126fc:	ldrd	r0, [sl]
   12700:	ldr	r2, [fp, #-136]	; 0xffffff78
   12704:	ldr	r3, [fp, #-132]	; 0xffffff7c
   12708:	eor	r1, r1, r3
   1270c:	eor	r0, r0, r2
   12710:	orrs	r0, r0, r1
   12714:	bne	127e0 <__assert_fail@plt+0x1324>
   12718:	ldr	r0, [fp, #8]
   1271c:	cmn	r0, #1
   12720:	beq	12734 <__assert_fail@plt+0x1278>
   12724:	ldr	r0, [fp, #-112]	; 0xffffff90
   12728:	ldr	r1, [fp, #8]
   1272c:	cmp	r0, r1
   12730:	bne	12750 <__assert_fail@plt+0x1294>
   12734:	ldr	r0, [fp, #12]
   12738:	cmn	r0, #1
   1273c:	beq	12b44 <__assert_fail@plt+0x1688>
   12740:	ldr	r0, [fp, #-108]	; 0xffffff94
   12744:	ldr	r1, [fp, #12]
   12748:	cmp	r0, r1
   1274c:	beq	12b44 <__assert_fail@plt+0x1688>
   12750:	bl	11378 <__errno_location@plt>
   12754:	ldr	r5, [r0]
   12758:	mov	r4, r0
   1275c:	mov	r0, r7
   12760:	bl	11480 <close@plt>
   12764:	str	r5, [r4]
   12768:	mov	r5, #0
   1276c:	mov	r6, #1
   12770:	mov	r4, #1
   12774:	b	12804 <__assert_fail@plt+0x1348>
   12778:	movw	r1, #45713	; 0xb291
   1277c:	mov	r0, #0
   12780:	mov	r2, #5
   12784:	movt	r1, #1
   12788:	bl	1124c <dcgettext@plt>
   1278c:	mov	r4, r0
   12790:	mov	r0, #4
   12794:	mov	r1, r7
   12798:	bl	17db0 <__assert_fail@plt+0x68f4>
   1279c:	mov	r3, r0
   127a0:	mov	r0, #0
   127a4:	mov	r1, #0
   127a8:	mov	r2, r4
   127ac:	bl	112d0 <error@plt>
   127b0:	movw	r1, #45816	; 0xb2f8
   127b4:	ldr	r6, [sp, #32]
   127b8:	mov	r0, #0
   127bc:	mov	r2, #5
   127c0:	movt	r1, #1
   127c4:	bl	1124c <dcgettext@plt>
   127c8:	mov	r2, r0
   127cc:	mov	r0, #0
   127d0:	mov	r1, #0
   127d4:	bl	112d0 <error@plt>
   127d8:	mov	r4, #0
   127dc:	b	12040 <__assert_fail@plt+0xb84>
   127e0:	bl	11378 <__errno_location@plt>
   127e4:	ldr	r5, [r0]
   127e8:	mov	r4, r0
   127ec:	mov	r0, r7
   127f0:	bl	11480 <close@plt>
   127f4:	str	r5, [r4]
   127f8:	mov	r4, #0
   127fc:	mov	r6, #1
   12800:	mov	r5, #1
   12804:	ldr	r0, [fp, #16]
   12808:	ldr	r0, [r0]
   1280c:	cmp	r0, #2
   12810:	beq	1202c <__assert_fail@plt+0xb70>
   12814:	eor	r1, r4, #1
   12818:	orrs	r1, r5, r1
   1281c:	eorseq	r1, r6, #1
   12820:	beq	12864 <__assert_fail@plt+0x13a8>
   12824:	cmp	r0, #0
   12828:	bne	1202c <__assert_fail@plt+0xb70>
   1282c:	cmp	r6, #0
   12830:	mov	r5, #1
   12834:	mov	r0, #3
   12838:	str	r4, [sp, #16]
   1283c:	movwne	r5, #4
   12840:	cmp	r4, #0
   12844:	moveq	r5, r0
   12848:	cmp	sl, #0
   1284c:	bne	128b8 <__assert_fail@plt+0x13fc>
   12850:	mov	r7, #0
   12854:	mov	sl, #0
   12858:	cmp	r5, #1
   1285c:	beq	11fe4 <__assert_fail@plt+0xb28>
   12860:	b	12928 <__assert_fail@plt+0x146c>
   12864:	ldr	r1, [sp, #20]
   12868:	cmn	r1, #1
   1286c:	beq	12880 <__assert_fail@plt+0x13c4>
   12870:	ldr	r1, [sl, #24]
   12874:	ldr	r2, [sp, #20]
   12878:	cmp	r1, r2
   1287c:	bne	1289c <__assert_fail@plt+0x13e0>
   12880:	ldr	r1, [sp, #12]
   12884:	cmn	r1, #1
   12888:	beq	12824 <__assert_fail@plt+0x1368>
   1288c:	ldr	r1, [sl, #28]
   12890:	ldr	r2, [sp, #12]
   12894:	cmp	r1, r2
   12898:	beq	12824 <__assert_fail@plt+0x1368>
   1289c:	cmp	r6, #0
   128a0:	mov	r5, #1
   128a4:	mov	r0, #3
   128a8:	str	r4, [sp, #16]
   128ac:	movwne	r5, #2
   128b0:	cmp	r4, #0
   128b4:	moveq	r5, r0
   128b8:	ldr	r4, [sl, #24]
   128bc:	mov	r0, r4
   128c0:	bl	111e0 <getpwuid@plt>
   128c4:	cmp	r0, #0
   128c8:	beq	128d4 <__assert_fail@plt+0x1418>
   128cc:	ldr	r0, [r0]
   128d0:	b	128e4 <__assert_fail@plt+0x1428>
   128d4:	mov	r0, r4
   128d8:	mov	r1, #0
   128dc:	sub	r2, fp, #136	; 0x88
   128e0:	bl	16590 <__assert_fail@plt+0x50d4>
   128e4:	bl	19080 <__assert_fail@plt+0x7bc4>
   128e8:	ldr	r4, [sl, #28]
   128ec:	mov	r7, r0
   128f0:	mov	r0, r4
   128f4:	bl	114a4 <getgrgid@plt>
   128f8:	cmp	r0, #0
   128fc:	beq	12908 <__assert_fail@plt+0x144c>
   12900:	ldr	r0, [r0]
   12904:	b	12918 <__assert_fail@plt+0x145c>
   12908:	mov	r0, r4
   1290c:	mov	r1, #0
   12910:	sub	r2, fp, #136	; 0x88
   12914:	bl	16590 <__assert_fail@plt+0x50d4>
   12918:	bl	19080 <__assert_fail@plt+0x7bc4>
   1291c:	mov	sl, r0
   12920:	cmp	r5, #1
   12924:	beq	11fe4 <__assert_fail@plt+0xb28>
   12928:	ldr	r0, [fp, #16]
   1292c:	ldr	r6, [r0, #20]
   12930:	ldr	r4, [r0, #16]
   12934:	mov	r0, r4
   12938:	mov	r1, r6
   1293c:	bl	12c1c <__assert_fail@plt+0x1760>
   12940:	cmp	r4, #0
   12944:	mov	r8, r0
   12948:	mov	r0, r4
   1294c:	mov	r1, r6
   12950:	movne	r0, r7
   12954:	cmp	r6, #0
   12958:	movne	r1, sl
   1295c:	bl	12c1c <__assert_fail@plt+0x1760>
   12960:	cmp	r5, #4
   12964:	beq	129b8 <__assert_fail@plt+0x14fc>
   12968:	cmp	r5, #3
   1296c:	beq	12994 <__assert_fail@plt+0x14d8>
   12970:	cmp	r5, #2
   12974:	bne	12c18 <__assert_fail@plt+0x175c>
   12978:	mov	r5, r0
   1297c:	mov	r0, #0
   12980:	cmp	r4, #0
   12984:	beq	129d4 <__assert_fail@plt+0x1518>
   12988:	movw	r1, #46217	; 0xb489
   1298c:	movt	r1, #1
   12990:	b	12b00 <__assert_fail@plt+0x1644>
   12994:	cmp	r0, #0
   12998:	beq	129e8 <__assert_fail@plt+0x152c>
   1299c:	mov	r5, r0
   129a0:	mov	r0, #0
   129a4:	cmp	r4, #0
   129a8:	beq	12a48 <__assert_fail@plt+0x158c>
   129ac:	movw	r1, #46321	; 0xb4f1
   129b0:	movt	r1, #1
   129b4:	b	12b00 <__assert_fail@plt+0x1644>
   129b8:	mov	r5, r0
   129bc:	mov	r0, #0
   129c0:	cmp	r4, #0
   129c4:	beq	12a34 <__assert_fail@plt+0x1578>
   129c8:	movw	r1, #46523	; 0xb5bb
   129cc:	movt	r1, #1
   129d0:	b	12b00 <__assert_fail@plt+0x1644>
   129d4:	cmp	r6, #0
   129d8:	beq	12ae0 <__assert_fail@plt+0x1624>
   129dc:	movw	r1, #46256	; 0xb4b0
   129e0:	movt	r1, #1
   129e4:	b	12b00 <__assert_fail@plt+0x1644>
   129e8:	movw	r0, #46487	; 0xb597
   129ec:	movw	r1, #46413	; 0xb54d
   129f0:	cmp	r6, #0
   129f4:	mov	r2, #5
   129f8:	movt	r0, #1
   129fc:	movt	r1, #1
   12a00:	movne	r1, r0
   12a04:	movw	r0, #46447	; 0xb56f
   12a08:	cmp	r4, #0
   12a0c:	movt	r0, #1
   12a10:	movne	r1, r0
   12a14:	mov	r0, #0
   12a18:	bl	1124c <dcgettext@plt>
   12a1c:	mov	r6, r0
   12a20:	mov	r0, #0
   12a24:	bl	12db4 <__assert_fail@plt+0x18f8>
   12a28:	mov	r5, r8
   12a2c:	mov	r8, #0
   12a30:	b	12b0c <__assert_fail@plt+0x1650>
   12a34:	cmp	r6, #0
   12a38:	beq	12aec <__assert_fail@plt+0x1630>
   12a3c:	movw	r1, #46555	; 0xb5db
   12a40:	movt	r1, #1
   12a44:	b	12b00 <__assert_fail@plt+0x1644>
   12a48:	cmp	r6, #0
   12a4c:	beq	12af8 <__assert_fail@plt+0x163c>
   12a50:	movw	r1, #46369	; 0xb521
   12a54:	movt	r1, #1
   12a58:	b	12b00 <__assert_fail@plt+0x1644>
   12a5c:	movw	r1, #45713	; 0xb291
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	movt	r1, #1
   12a6c:	bl	1124c <dcgettext@plt>
   12a70:	mov	r4, r0
   12a74:	mov	r0, #4
   12a78:	mov	r1, r7
   12a7c:	bl	17db0 <__assert_fail@plt+0x68f4>
   12a80:	mov	r3, r0
   12a84:	mov	r0, #0
   12a88:	mov	r1, #0
   12a8c:	mov	r2, r4
   12a90:	bl	112d0 <error@plt>
   12a94:	movw	r1, #45816	; 0xb2f8
   12a98:	mov	r0, #0
   12a9c:	mov	r2, #5
   12aa0:	movt	r1, #1
   12aa4:	bl	1124c <dcgettext@plt>
   12aa8:	mov	r2, r0
   12aac:	mov	r0, #0
   12ab0:	mov	r1, #0
   12ab4:	bl	112d0 <error@plt>
   12ab8:	ldr	r4, [sp, #36]	; 0x24
   12abc:	mov	r1, r9
   12ac0:	mov	r2, #4
   12ac4:	mov	r0, r4
   12ac8:	bl	14dc8 <__assert_fail@plt+0x390c>
   12acc:	mov	r0, r4
   12ad0:	bl	13744 <__assert_fail@plt+0x2288>
   12ad4:	mov	r4, #0
   12ad8:	mov	r6, r8
   12adc:	b	12040 <__assert_fail@plt+0xb84>
   12ae0:	movw	r1, #46291	; 0xb4d3
   12ae4:	movt	r1, #1
   12ae8:	b	12b00 <__assert_fail@plt+0x1644>
   12aec:	movw	r1, #46583	; 0xb5f7
   12af0:	movt	r1, #1
   12af4:	b	12b00 <__assert_fail@plt+0x1644>
   12af8:	movw	r1, #46413	; 0xb54d
   12afc:	movt	r1, #1
   12b00:	mov	r2, #5
   12b04:	bl	1124c <dcgettext@plt>
   12b08:	mov	r6, r0
   12b0c:	ldr	r1, [sp, #28]
   12b10:	mov	r0, #4
   12b14:	bl	17db0 <__assert_fail@plt+0x68f4>
   12b18:	mov	r2, r0
   12b1c:	mov	r0, #1
   12b20:	mov	r1, r6
   12b24:	mov	r3, r5
   12b28:	str	r8, [sp]
   12b2c:	bl	1139c <__printf_chk@plt>
   12b30:	mov	r0, r5
   12b34:	bl	12db4 <__assert_fail@plt+0x18f8>
   12b38:	mov	r0, r8
   12b3c:	bl	12db4 <__assert_fail@plt+0x18f8>
   12b40:	b	12018 <__assert_fail@plt+0xb5c>
   12b44:	ldr	r1, [sp, #20]
   12b48:	ldr	r2, [sp, #12]
   12b4c:	mov	r0, r7
   12b50:	bl	1136c <fchown@plt>
   12b54:	cmp	r0, #0
   12b58:	bne	125f0 <__assert_fail@plt+0x1134>
   12b5c:	mov	r0, r7
   12b60:	bl	11480 <close@plt>
   12b64:	cmp	r0, #0
   12b68:	mov	r4, #1
   12b6c:	bne	12680 <__assert_fail@plt+0x11c4>
   12b70:	mov	r5, #0
   12b74:	mov	r6, #1
   12b78:	b	12804 <__assert_fail@plt+0x1348>
   12b7c:	mov	r6, #1
   12b80:	bl	11378 <__errno_location@plt>
   12b84:	ldr	r4, [r0]
   12b88:	mov	r5, r0
   12b8c:	cmp	r4, #0
   12b90:	beq	12bd0 <__assert_fail@plt+0x1714>
   12b94:	ldr	r0, [fp, #16]
   12b98:	mov	r6, #0
   12b9c:	ldrb	r0, [r0, #13]
   12ba0:	cmp	r0, #0
   12ba4:	bne	12bd0 <__assert_fail@plt+0x1714>
   12ba8:	movw	r1, #45680	; 0xb270
   12bac:	mov	r0, #0
   12bb0:	mov	r2, #5
   12bb4:	mov	r6, #0
   12bb8:	movt	r1, #1
   12bbc:	bl	1124c <dcgettext@plt>
   12bc0:	mov	r2, r0
   12bc4:	mov	r0, #0
   12bc8:	mov	r1, r4
   12bcc:	bl	112d0 <error@plt>
   12bd0:	ldr	r0, [sp, #36]	; 0x24
   12bd4:	bl	1359c <__assert_fail@plt+0x20e0>
   12bd8:	cmp	r0, #0
   12bdc:	beq	12c0c <__assert_fail@plt+0x1750>
   12be0:	movw	r1, #45696	; 0xb280
   12be4:	ldr	r4, [r5]
   12be8:	mov	r0, #0
   12bec:	mov	r2, #5
   12bf0:	mov	r6, #0
   12bf4:	movt	r1, #1
   12bf8:	bl	1124c <dcgettext@plt>
   12bfc:	mov	r2, r0
   12c00:	mov	r0, #0
   12c04:	mov	r1, r4
   12c08:	bl	112d0 <error@plt>
   12c0c:	mov	r0, r6
   12c10:	sub	sp, fp, #28
   12c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c18:	bl	11474 <abort@plt>
   12c1c:	push	{r4, r5, r6, sl, fp, lr}
   12c20:	add	fp, sp, #16
   12c24:	mov	r4, r1
   12c28:	cmp	r0, #0
   12c2c:	beq	12c80 <__assert_fail@plt+0x17c4>
   12c30:	mov	r5, r0
   12c34:	cmp	r4, #0
   12c38:	beq	12c94 <__assert_fail@plt+0x17d8>
   12c3c:	mov	r0, r5
   12c40:	bl	11348 <strlen@plt>
   12c44:	mov	r6, r0
   12c48:	mov	r0, r4
   12c4c:	bl	11348 <strlen@plt>
   12c50:	add	r0, r6, r0
   12c54:	add	r0, r0, #2
   12c58:	bl	18b7c <__assert_fail@plt+0x76c0>
   12c5c:	mov	r1, r5
   12c60:	mov	r6, r0
   12c64:	bl	11240 <stpcpy@plt>
   12c68:	mov	r1, #58	; 0x3a
   12c6c:	strh	r1, [r0], #1
   12c70:	mov	r1, r4
   12c74:	bl	11240 <stpcpy@plt>
   12c78:	mov	r0, r6
   12c7c:	pop	{r4, r5, r6, sl, fp, pc}
   12c80:	cmp	r4, #0
   12c84:	beq	12ca0 <__assert_fail@plt+0x17e4>
   12c88:	mov	r0, r4
   12c8c:	pop	{r4, r5, r6, sl, fp, lr}
   12c90:	b	19080 <__assert_fail@plt+0x7bc4>
   12c94:	mov	r0, r5
   12c98:	pop	{r4, r5, r6, sl, fp, lr}
   12c9c:	b	19080 <__assert_fail@plt+0x7bc4>
   12ca0:	mov	r6, #0
   12ca4:	mov	r0, r6
   12ca8:	pop	{r4, r5, r6, sl, fp, pc}
   12cac:	movw	r1, #49576	; 0xc1a8
   12cb0:	movt	r1, #2
   12cb4:	str	r0, [r1]
   12cb8:	bx	lr
   12cbc:	movw	r1, #49580	; 0xc1ac
   12cc0:	movt	r1, #2
   12cc4:	strb	r0, [r1]
   12cc8:	bx	lr
   12ccc:	push	{r4, r5, r6, sl, fp, lr}
   12cd0:	add	fp, sp, #16
   12cd4:	sub	sp, sp, #8
   12cd8:	movw	r0, #49540	; 0xc184
   12cdc:	movt	r0, #2
   12ce0:	ldr	r0, [r0]
   12ce4:	bl	19ef0 <__assert_fail@plt+0x8a34>
   12ce8:	cmp	r0, #0
   12cec:	beq	12d14 <__assert_fail@plt+0x1858>
   12cf0:	movw	r0, #49580	; 0xc1ac
   12cf4:	movt	r0, #2
   12cf8:	ldrb	r0, [r0]
   12cfc:	cmp	r0, #0
   12d00:	beq	12d34 <__assert_fail@plt+0x1878>
   12d04:	bl	11378 <__errno_location@plt>
   12d08:	ldr	r0, [r0]
   12d0c:	cmp	r0, #32
   12d10:	bne	12d34 <__assert_fail@plt+0x1878>
   12d14:	movw	r0, #49536	; 0xc180
   12d18:	movt	r0, #2
   12d1c:	ldr	r0, [r0]
   12d20:	bl	19ef0 <__assert_fail@plt+0x8a34>
   12d24:	cmp	r0, #0
   12d28:	subeq	sp, fp, #16
   12d2c:	popeq	{r4, r5, r6, sl, fp, pc}
   12d30:	b	12da4 <__assert_fail@plt+0x18e8>
   12d34:	movw	r1, #46624	; 0xb620
   12d38:	mov	r0, #0
   12d3c:	mov	r2, #5
   12d40:	movt	r1, #1
   12d44:	bl	1124c <dcgettext@plt>
   12d48:	mov	r4, r0
   12d4c:	movw	r0, #49576	; 0xc1a8
   12d50:	movt	r0, #2
   12d54:	ldr	r6, [r0]
   12d58:	bl	11378 <__errno_location@plt>
   12d5c:	ldr	r5, [r0]
   12d60:	cmp	r6, #0
   12d64:	bne	12d80 <__assert_fail@plt+0x18c4>
   12d68:	movw	r2, #45411	; 0xb163
   12d6c:	mov	r0, #0
   12d70:	mov	r1, r5
   12d74:	mov	r3, r4
   12d78:	movt	r2, #1
   12d7c:	b	12da0 <__assert_fail@plt+0x18e4>
   12d80:	mov	r0, r6
   12d84:	bl	17f50 <__assert_fail@plt+0x6a94>
   12d88:	movw	r2, #46636	; 0xb62c
   12d8c:	mov	r3, r0
   12d90:	str	r4, [sp]
   12d94:	mov	r0, #0
   12d98:	mov	r1, r5
   12d9c:	movt	r2, #1
   12da0:	bl	112d0 <error@plt>
   12da4:	movw	r0, #49452	; 0xc12c
   12da8:	movt	r0, #2
   12dac:	ldr	r0, [r0]
   12db0:	bl	11210 <_exit@plt>
   12db4:	push	{r4, r5, r6, sl, fp, lr}
   12db8:	add	fp, sp, #16
   12dbc:	mov	r4, r0
   12dc0:	bl	11378 <__errno_location@plt>
   12dc4:	ldr	r6, [r0]
   12dc8:	mov	r5, r0
   12dcc:	mov	r0, r4
   12dd0:	bl	11204 <free@plt>
   12dd4:	str	r6, [r5]
   12dd8:	pop	{r4, r5, r6, sl, fp, pc}
   12ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de0:	add	fp, sp, #28
   12de4:	sub	sp, sp, #28
   12de8:	cmp	r1, #4096	; 0x1000
   12dec:	bcs	12e08 <__assert_fail@plt+0x194c>
   12df0:	mov	r7, r0
   12df4:	and	r0, r1, #516	; 0x204
   12df8:	mov	r5, r1
   12dfc:	cmp	r0, #516	; 0x204
   12e00:	tstne	r5, #18
   12e04:	bne	12e24 <__assert_fail@plt+0x1968>
   12e08:	bl	11378 <__errno_location@plt>
   12e0c:	mov	r1, #22
   12e10:	mov	r4, #0
   12e14:	str	r1, [r0]
   12e18:	mov	r0, r4
   12e1c:	sub	sp, fp, #28
   12e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e24:	mov	r0, #1
   12e28:	mov	r1, #96	; 0x60
   12e2c:	mov	sl, r2
   12e30:	bl	19e18 <__assert_fail@plt+0x895c>
   12e34:	cmp	r0, #0
   12e38:	beq	13240 <__assert_fail@plt+0x1d84>
   12e3c:	mov	r4, r0
   12e40:	mvn	r0, #99	; 0x63
   12e44:	tst	r5, #2
   12e48:	mov	r1, r5
   12e4c:	str	r0, [r4, #32]
   12e50:	bic	r0, r5, #516	; 0x204
   12e54:	str	sl, [r4, #44]	; 0x2c
   12e58:	str	r4, [sp, #24]
   12e5c:	orrne	r1, r0, #4
   12e60:	str	r1, [r4, #48]	; 0x30
   12e64:	ldr	r0, [r7]
   12e68:	cmp	r0, #0
   12e6c:	beq	12ea4 <__assert_fail@plt+0x19e8>
   12e70:	add	r6, r7, #4
   12e74:	mov	r4, #0
   12e78:	bl	11348 <strlen@plt>
   12e7c:	cmp	r0, r4
   12e80:	movhi	r4, r0
   12e84:	ldr	r0, [r6], #4
   12e88:	cmp	r0, #0
   12e8c:	bne	12e78 <__assert_fail@plt+0x19bc>
   12e90:	add	r0, r4, #1
   12e94:	ldr	r4, [sp, #24]
   12e98:	cmp	r0, #4096	; 0x1000
   12e9c:	movls	r0, #4096	; 0x1000
   12ea0:	b	12ea8 <__assert_fail@plt+0x19ec>
   12ea4:	mov	r0, #4096	; 0x1000
   12ea8:	ldr	r1, [r4, #36]	; 0x24
   12eac:	add	r0, r0, #256	; 0x100
   12eb0:	adds	r1, r0, r1
   12eb4:	bcc	12ed8 <__assert_fail@plt+0x1a1c>
   12eb8:	ldr	r0, [r4, #24]
   12ebc:	bl	12db4 <__assert_fail@plt+0x18f8>
   12ec0:	mov	r0, #0
   12ec4:	str	r0, [r4, #24]
   12ec8:	bl	11378 <__errno_location@plt>
   12ecc:	mov	r1, #36	; 0x24
   12ed0:	str	r1, [r0]
   12ed4:	b	13238 <__assert_fail@plt+0x1d7c>
   12ed8:	str	r1, [r4, #36]	; 0x24
   12edc:	ldr	r0, [r4, #24]
   12ee0:	bl	19e9c <__assert_fail@plt+0x89e0>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12f5c <__assert_fail@plt+0x1aa0>
   12eec:	str	r0, [r4, #24]
   12ef0:	ldr	r0, [r7]
   12ef4:	cmp	r0, #0
   12ef8:	beq	12f70 <__assert_fail@plt+0x1ab4>
   12efc:	mov	r0, #176	; 0xb0
   12f00:	bl	19e6c <__assert_fail@plt+0x89b0>
   12f04:	cmp	r0, #0
   12f08:	beq	13230 <__assert_fail@plt+0x1d74>
   12f0c:	ldr	r1, [r4, #24]
   12f10:	mov	r6, r0
   12f14:	mov	r0, #0
   12f18:	mov	r2, #196608	; 0x30000
   12f1c:	strb	r0, [r6, #168]	; 0xa8
   12f20:	str	r2, [r6, #58]	; 0x3a
   12f24:	mvn	r2, #0
   12f28:	str	r4, [r6, #44]	; 0x2c
   12f2c:	str	r2, [r6, #48]	; 0x30
   12f30:	str	r0, [r6, #52]	; 0x34
   12f34:	str	r0, [r6, #12]
   12f38:	str	r0, [r6, #16]
   12f3c:	str	r0, [r6, #20]
   12f40:	str	r1, [r6, #28]
   12f44:	str	r0, [r6, #32]
   12f48:	cmp	sl, #0
   12f4c:	beq	12f7c <__assert_fail@plt+0x1ac0>
   12f50:	ldrb	r0, [r4, #49]	; 0x31
   12f54:	ubfx	r0, r0, #2, #1
   12f58:	b	12f80 <__assert_fail@plt+0x1ac4>
   12f5c:	ldr	r0, [r4, #24]
   12f60:	bl	12db4 <__assert_fail@plt+0x18f8>
   12f64:	mov	r0, #0
   12f68:	str	r0, [r4, #24]
   12f6c:	b	13238 <__assert_fail@plt+0x1d7c>
   12f70:	mov	r6, #0
   12f74:	cmp	sl, #0
   12f78:	bne	12f50 <__assert_fail@plt+0x1a94>
   12f7c:	mov	r0, #1
   12f80:	ldr	r4, [r7]
   12f84:	cmp	r4, #0
   12f88:	beq	130f4 <__assert_fail@plt+0x1c38>
   12f8c:	eor	r0, r0, #1
   12f90:	str	r6, [sp, #20]
   12f94:	and	r1, r5, #2048	; 0x800
   12f98:	mov	r9, #0
   12f9c:	mov	r6, #0
   12fa0:	str	sl, [sp, #8]
   12fa4:	str	r0, [sp, #12]
   12fa8:	mov	r0, #0
   12fac:	str	r1, [sp, #16]
   12fb0:	str	r0, [sp, #4]
   12fb4:	b	12fe0 <__assert_fail@plt+0x1b24>
   12fb8:	cmp	r9, #0
   12fbc:	str	r4, [r5, #8]
   12fc0:	beq	130e8 <__assert_fail@plt+0x1c2c>
   12fc4:	ldr	r0, [sp, #4]
   12fc8:	str	r5, [sp, #4]
   12fcc:	str	r5, [r0, #8]
   12fd0:	ldr	r4, [r7, #4]!
   12fd4:	add	r6, r6, #1
   12fd8:	cmp	r4, #0
   12fdc:	beq	13110 <__assert_fail@plt+0x1c54>
   12fe0:	mov	r0, r4
   12fe4:	bl	11348 <strlen@plt>
   12fe8:	mov	r8, r0
   12fec:	ldr	r0, [sp, #16]
   12ff0:	cmp	r0, #0
   12ff4:	bne	1302c <__assert_fail@plt+0x1b70>
   12ff8:	cmp	r8, #3
   12ffc:	bcc	1302c <__assert_fail@plt+0x1b70>
   13000:	add	r0, r8, r4
   13004:	ldrb	r0, [r0, #-1]
   13008:	cmp	r0, #47	; 0x2f
   1300c:	bne	1302c <__assert_fail@plt+0x1b70>
   13010:	sub	r0, r4, #2
   13014:	ldrb	r1, [r0, r8]
   13018:	cmp	r1, #47	; 0x2f
   1301c:	bne	1302c <__assert_fail@plt+0x1b70>
   13020:	sub	r8, r8, #1
   13024:	cmp	r8, #1
   13028:	bhi	13014 <__assert_fail@plt+0x1b58>
   1302c:	add	r0, r8, #176	; 0xb0
   13030:	bic	r0, r0, #7
   13034:	bl	19e6c <__assert_fail@plt+0x89b0>
   13038:	cmp	r0, #0
   1303c:	beq	13100 <__assert_fail@plt+0x1c44>
   13040:	add	sl, r0, #168	; 0xa8
   13044:	mov	r5, r0
   13048:	mov	r1, r4
   1304c:	mov	r2, r8
   13050:	mov	r0, sl
   13054:	bl	1121c <memcpy@plt>
   13058:	ldr	r0, [sp, #24]
   1305c:	ldr	r2, [sp, #20]
   13060:	mov	r4, #0
   13064:	strb	r4, [sl, r8]
   13068:	str	r2, [r5, #4]
   1306c:	add	r2, r5, #44	; 0x2c
   13070:	ldr	r1, [r0, #24]
   13074:	stm	r2, {r0, r4, r8}
   13078:	mov	r2, #196608	; 0x30000
   1307c:	str	r2, [r5, #58]	; 0x3a
   13080:	ldr	r2, [sp, #12]
   13084:	str	r4, [r5, #12]
   13088:	str	r4, [r5, #16]
   1308c:	str	r4, [r5, #20]
   13090:	str	sl, [r5, #24]
   13094:	str	r1, [r5, #28]
   13098:	clz	r1, r9
   1309c:	str	r4, [r5, #32]
   130a0:	lsr	r1, r1, #5
   130a4:	orrs	r1, r2, r1
   130a8:	bne	130c0 <__assert_fail@plt+0x1c04>
   130ac:	mov	r0, #2
   130b0:	str	r0, [r5, #112]	; 0x70
   130b4:	str	r4, [r5, #116]	; 0x74
   130b8:	mov	r0, #11
   130bc:	b	130cc <__assert_fail@plt+0x1c10>
   130c0:	mov	r1, r5
   130c4:	mov	r2, #0
   130c8:	bl	132d4 <__assert_fail@plt+0x1e18>
   130cc:	ldr	sl, [sp, #8]
   130d0:	strh	r0, [r5, #56]	; 0x38
   130d4:	cmp	sl, #0
   130d8:	beq	12fb8 <__assert_fail@plt+0x1afc>
   130dc:	str	r9, [r5, #8]
   130e0:	mov	r9, r5
   130e4:	b	12fd0 <__assert_fail@plt+0x1b14>
   130e8:	mov	r0, r5
   130ec:	str	r5, [sp, #4]
   130f0:	b	130e0 <__assert_fail@plt+0x1c24>
   130f4:	ldr	r4, [sp, #24]
   130f8:	mov	r9, #0
   130fc:	b	13144 <__assert_fail@plt+0x1c88>
   13100:	ldr	r6, [sp, #20]
   13104:	cmp	r9, #0
   13108:	bne	1320c <__assert_fail@plt+0x1d50>
   1310c:	b	13224 <__assert_fail@plt+0x1d68>
   13110:	cmp	sl, #0
   13114:	beq	1313c <__assert_fail@plt+0x1c80>
   13118:	ldr	r4, [sp, #24]
   1311c:	cmp	r6, #2
   13120:	bcc	13140 <__assert_fail@plt+0x1c84>
   13124:	mov	r0, r4
   13128:	mov	r1, r9
   1312c:	mov	r2, r6
   13130:	bl	1346c <__assert_fail@plt+0x1fb0>
   13134:	mov	r9, r0
   13138:	b	13140 <__assert_fail@plt+0x1c84>
   1313c:	ldr	r4, [sp, #24]
   13140:	ldr	r6, [sp, #20]
   13144:	mov	r0, #176	; 0xb0
   13148:	bl	19e6c <__assert_fail@plt+0x89b0>
   1314c:	cmp	r0, #0
   13150:	beq	131e4 <__assert_fail@plt+0x1d28>
   13154:	ldr	r2, [r4, #24]
   13158:	mov	r1, #0
   1315c:	mov	r3, #196608	; 0x30000
   13160:	str	r0, [r4]
   13164:	str	r1, [r0, #52]	; 0x34
   13168:	strb	r1, [r0, #168]	; 0xa8
   1316c:	str	r4, [r0, #44]	; 0x2c
   13170:	str	r3, [r0, #58]	; 0x3a
   13174:	str	r2, [r0, #28]
   13178:	mov	r2, #9
   1317c:	str	r1, [r0, #32]
   13180:	strh	r2, [r0, #56]	; 0x38
   13184:	str	r9, [r0, #8]
   13188:	str	r1, [r0, #12]
   1318c:	str	r1, [r0, #16]
   13190:	str	r1, [r0, #20]
   13194:	mov	r1, #1
   13198:	str	r1, [r0, #48]	; 0x30
   1319c:	ldrh	r0, [r4, #48]	; 0x30
   131a0:	movw	r1, #258	; 0x102
   131a4:	tst	r0, r1
   131a8:	beq	13248 <__assert_fail@plt+0x1d8c>
   131ac:	movw	r0, #11700	; 0x2db4
   131b0:	movw	r2, #20448	; 0x4fe0
   131b4:	movw	r3, #20480	; 0x5000
   131b8:	mov	r1, #0
   131bc:	movt	r0, #1
   131c0:	movt	r2, #1
   131c4:	movt	r3, #1
   131c8:	str	r0, [sp]
   131cc:	mov	r0, #31
   131d0:	bl	1568c <__assert_fail@plt+0x41d0>
   131d4:	cmp	r0, #0
   131d8:	str	r0, [r4, #56]	; 0x38
   131dc:	bne	13260 <__assert_fail@plt+0x1da4>
   131e0:	b	131ec <__assert_fail@plt+0x1d30>
   131e4:	mov	r0, #0
   131e8:	str	r0, [r4]
   131ec:	cmp	r9, #0
   131f0:	bne	1320c <__assert_fail@plt+0x1d50>
   131f4:	b	13224 <__assert_fail@plt+0x1d68>
   131f8:	mov	r0, r9
   131fc:	bl	12db4 <__assert_fail@plt+0x18f8>
   13200:	cmp	r4, #0
   13204:	mov	r9, r4
   13208:	beq	13224 <__assert_fail@plt+0x1d68>
   1320c:	ldrd	r4, [r9, #8]
   13210:	cmp	r5, #0
   13214:	beq	131f8 <__assert_fail@plt+0x1d3c>
   13218:	mov	r0, r5
   1321c:	bl	11498 <closedir@plt>
   13220:	b	131f8 <__assert_fail@plt+0x1d3c>
   13224:	mov	r0, r6
   13228:	bl	12db4 <__assert_fail@plt+0x18f8>
   1322c:	ldr	r4, [sp, #24]
   13230:	ldr	r0, [r4, #24]
   13234:	bl	12db4 <__assert_fail@plt+0x18f8>
   13238:	mov	r0, r4
   1323c:	bl	12db4 <__assert_fail@plt+0x18f8>
   13240:	mov	r4, #0
   13244:	b	12e18 <__assert_fail@plt+0x195c>
   13248:	mov	r0, #32
   1324c:	bl	19e6c <__assert_fail@plt+0x89b0>
   13250:	cmp	r0, #0
   13254:	str	r0, [r4, #56]	; 0x38
   13258:	beq	131ec <__assert_fail@plt+0x1d30>
   1325c:	bl	19f74 <__assert_fail@plt+0x8ab8>
   13260:	ldr	r4, [sp, #24]
   13264:	ldr	r0, [r4, #48]	; 0x30
   13268:	tst	r0, #516	; 0x204
   1326c:	bne	132c4 <__assert_fail@plt+0x1e08>
   13270:	mov	r1, #32768	; 0x8000
   13274:	tst	r0, #512	; 0x200
   13278:	and	r1, r1, r0, lsl #11
   1327c:	orr	r1, r1, #18688	; 0x4900
   13280:	orr	r2, r1, #524288	; 0x80000
   13284:	bne	1329c <__assert_fail@plt+0x1de0>
   13288:	movw	r0, #46644	; 0xb634
   1328c:	mov	r1, r2
   13290:	movt	r0, #1
   13294:	bl	1a2e0 <__assert_fail@plt+0x8e24>
   13298:	b	132ac <__assert_fail@plt+0x1df0>
   1329c:	ldr	r0, [r4, #32]
   132a0:	movw	r1, #46644	; 0xb634
   132a4:	movt	r1, #1
   132a8:	bl	165ec <__assert_fail@plt+0x5130>
   132ac:	cmn	r0, #1
   132b0:	str	r0, [r4, #28]
   132b4:	bgt	132c4 <__assert_fail@plt+0x1e08>
   132b8:	ldr	r0, [r4, #48]	; 0x30
   132bc:	orr	r0, r0, #4
   132c0:	str	r0, [r4, #48]	; 0x30
   132c4:	add	r0, r4, #60	; 0x3c
   132c8:	mvn	r1, #0
   132cc:	bl	164c8 <__assert_fail@plt+0x500c>
   132d0:	b	12e18 <__assert_fail@plt+0x195c>
   132d4:	push	{r4, r5, r6, sl, fp, lr}
   132d8:	add	fp, sp, #16
   132dc:	sub	sp, sp, #8
   132e0:	mov	r4, r1
   132e4:	ldr	r1, [r0, #48]	; 0x30
   132e8:	ldr	r3, [r4, #48]	; 0x30
   132ec:	add	r5, r4, #64	; 0x40
   132f0:	cmp	r3, #0
   132f4:	andeq	r3, r1, #1
   132f8:	orreq	r2, r3, r2
   132fc:	cmp	r2, #0
   13300:	andseq	r1, r1, #2
   13304:	beq	13360 <__assert_fail@plt+0x1ea4>
   13308:	ldr	r1, [r4, #24]
   1330c:	mov	r0, #3
   13310:	mov	r2, r5
   13314:	bl	1145c <__xstat64@plt>
   13318:	cmp	r0, #0
   1331c:	beq	133e0 <__assert_fail@plt+0x1f24>
   13320:	bl	11378 <__errno_location@plt>
   13324:	mov	r6, r0
   13328:	ldr	r0, [r0]
   1332c:	cmp	r0, #2
   13330:	bne	13390 <__assert_fail@plt+0x1ed4>
   13334:	ldr	r1, [r4, #24]
   13338:	mov	r0, #3
   1333c:	mov	r2, r5
   13340:	bl	1148c <__lxstat64@plt>
   13344:	cmp	r0, #0
   13348:	bne	1338c <__assert_fail@plt+0x1ed0>
   1334c:	mov	r0, #0
   13350:	str	r0, [r6]
   13354:	mov	r0, #13
   13358:	sub	sp, fp, #16
   1335c:	pop	{r4, r5, r6, sl, fp, pc}
   13360:	ldr	r1, [r0, #32]
   13364:	ldr	r2, [r4, #24]
   13368:	mov	r0, #256	; 0x100
   1336c:	mov	r3, r5
   13370:	str	r0, [sp]
   13374:	mov	r0, #3
   13378:	bl	11270 <__fxstatat64@plt>
   1337c:	cmp	r0, #0
   13380:	beq	133e0 <__assert_fail@plt+0x1f24>
   13384:	bl	11378 <__errno_location@plt>
   13388:	mov	r6, r0
   1338c:	ldr	r0, [r6]
   13390:	vmov.i32	q8, #0	; 0x00000000
   13394:	add	r1, r5, #80	; 0x50
   13398:	str	r0, [r4, #32]
   1339c:	mov	r0, #0
   133a0:	str	r0, [r5, #96]	; 0x60
   133a4:	vst1.64	{d16-d17}, [r1]
   133a8:	add	r1, r5, #64	; 0x40
   133ac:	vst1.64	{d16-d17}, [r1]
   133b0:	add	r1, r5, #48	; 0x30
   133b4:	vst1.64	{d16-d17}, [r1]
   133b8:	add	r1, r5, #32
   133bc:	vst1.64	{d16-d17}, [r1]
   133c0:	add	r1, r5, #16
   133c4:	vst1.64	{d16-d17}, [r1]
   133c8:	mov	r1, #100	; 0x64
   133cc:	vst1.64	{d16-d17}, [r5], r1
   133d0:	str	r0, [r5]
   133d4:	mov	r0, #10
   133d8:	sub	sp, fp, #16
   133dc:	pop	{r4, r5, r6, sl, fp, pc}
   133e0:	ldr	r0, [r4, #80]	; 0x50
   133e4:	and	r0, r0, #61440	; 0xf000
   133e8:	cmp	r0, #40960	; 0xa000
   133ec:	beq	13454 <__assert_fail@plt+0x1f98>
   133f0:	cmp	r0, #32768	; 0x8000
   133f4:	beq	13448 <__assert_fail@plt+0x1f8c>
   133f8:	cmp	r0, #16384	; 0x4000
   133fc:	bne	13460 <__assert_fail@plt+0x1fa4>
   13400:	ldrb	r1, [r4, #168]	; 0xa8
   13404:	mov	r0, #1
   13408:	cmp	r1, #46	; 0x2e
   1340c:	bne	13464 <__assert_fail@plt+0x1fa8>
   13410:	ldrb	r1, [r4, #169]	; 0xa9
   13414:	cmp	r1, #0
   13418:	beq	13430 <__assert_fail@plt+0x1f74>
   1341c:	cmp	r1, #46	; 0x2e
   13420:	bne	13464 <__assert_fail@plt+0x1fa8>
   13424:	ldrb	r1, [r4, #170]	; 0xaa
   13428:	cmp	r1, #0
   1342c:	bne	13464 <__assert_fail@plt+0x1fa8>
   13430:	ldr	r1, [r4, #48]	; 0x30
   13434:	mov	r0, #5
   13438:	cmp	r1, #0
   1343c:	movweq	r0, #1
   13440:	sub	sp, fp, #16
   13444:	pop	{r4, r5, r6, sl, fp, pc}
   13448:	mov	r0, #8
   1344c:	sub	sp, fp, #16
   13450:	pop	{r4, r5, r6, sl, fp, pc}
   13454:	mov	r0, #12
   13458:	sub	sp, fp, #16
   1345c:	pop	{r4, r5, r6, sl, fp, pc}
   13460:	mov	r0, #3
   13464:	sub	sp, fp, #16
   13468:	pop	{r4, r5, r6, sl, fp, pc}
   1346c:	push	{r4, r5, r6, r7, fp, lr}
   13470:	add	fp, sp, #16
   13474:	mov	r6, r0
   13478:	ldr	r7, [r0, #44]	; 0x2c
   1347c:	ldr	r0, [r0, #40]	; 0x28
   13480:	mov	r5, r2
   13484:	mov	r4, r1
   13488:	cmp	r0, r2
   1348c:	bcs	134c4 <__assert_fail@plt+0x2008>
   13490:	add	r1, r5, #40	; 0x28
   13494:	cmn	r1, #-1073741823	; 0xc0000001
   13498:	str	r1, [r6, #40]	; 0x28
   1349c:	bhi	13568 <__assert_fail@plt+0x20ac>
   134a0:	ldr	r0, [r6, #8]
   134a4:	lsl	r1, r1, #2
   134a8:	bl	19e9c <__assert_fail@plt+0x89e0>
   134ac:	cmp	r0, #0
   134b0:	beq	13568 <__assert_fail@plt+0x20ac>
   134b4:	str	r0, [r6, #8]
   134b8:	cmp	r4, #0
   134bc:	bne	134d0 <__assert_fail@plt+0x2014>
   134c0:	b	134e4 <__assert_fail@plt+0x2028>
   134c4:	ldr	r0, [r6, #8]
   134c8:	cmp	r4, #0
   134cc:	beq	134e4 <__assert_fail@plt+0x2028>
   134d0:	str	r4, [r0], #4
   134d4:	ldr	r4, [r4, #8]
   134d8:	cmp	r4, #0
   134dc:	bne	134d0 <__assert_fail@plt+0x2014>
   134e0:	ldr	r0, [r6, #8]
   134e4:	mov	r1, r5
   134e8:	mov	r2, #4
   134ec:	mov	r3, r7
   134f0:	bl	11438 <qsort@plt>
   134f4:	ldr	r0, [r6, #8]
   134f8:	cmp	r5, #1
   134fc:	ldr	r4, [r0]
   13500:	mov	r1, r4
   13504:	beq	1358c <__assert_fail@plt+0x20d0>
   13508:	mov	r2, r0
   1350c:	ldr	r1, [r2, #4]!
   13510:	str	r1, [r4, #8]
   13514:	subs	r1, r5, #2
   13518:	beq	13584 <__assert_fail@plt+0x20c8>
   1351c:	tst	r1, #1
   13520:	beq	13538 <__assert_fail@plt+0x207c>
   13524:	ldr	r1, [r0, #8]!
   13528:	ldr	r2, [r0, #-4]
   1352c:	str	r1, [r2, #8]
   13530:	sub	r1, r5, #3
   13534:	mov	r2, r0
   13538:	cmp	r5, #3
   1353c:	beq	13588 <__assert_fail@plt+0x20cc>
   13540:	mov	r0, r2
   13544:	ldm	r2, {r3, r7}
   13548:	subs	r1, r1, #2
   1354c:	str	r7, [r3, #8]
   13550:	ldr	r3, [r0, #8]!
   13554:	ldr	r2, [r2, #4]
   13558:	str	r3, [r2, #8]
   1355c:	mov	r2, r0
   13560:	bne	13544 <__assert_fail@plt+0x2088>
   13564:	b	13588 <__assert_fail@plt+0x20cc>
   13568:	ldr	r0, [r6, #8]
   1356c:	bl	12db4 <__assert_fail@plt+0x18f8>
   13570:	mov	r0, #0
   13574:	str	r0, [r6, #40]	; 0x28
   13578:	str	r0, [r6, #8]
   1357c:	mov	r0, r4
   13580:	pop	{r4, r5, r6, r7, fp, pc}
   13584:	mov	r0, r2
   13588:	ldr	r1, [r0]
   1358c:	mov	r0, #0
   13590:	str	r0, [r1, #8]
   13594:	mov	r0, r4
   13598:	pop	{r4, r5, r6, r7, fp, pc}
   1359c:	push	{r4, r5, r6, r7, fp, lr}
   135a0:	add	fp, sp, #16
   135a4:	mov	r4, r0
   135a8:	ldr	r0, [r0]
   135ac:	cmp	r0, #0
   135b0:	beq	135f0 <__assert_fail@plt+0x2134>
   135b4:	ldr	r1, [r0, #48]	; 0x30
   135b8:	cmp	r1, #0
   135bc:	bmi	135e4 <__assert_fail@plt+0x2128>
   135c0:	ldr	r5, [r0, #8]
   135c4:	cmp	r5, #0
   135c8:	ldreq	r5, [r0, #4]
   135cc:	bl	12db4 <__assert_fail@plt+0x18f8>
   135d0:	ldr	r0, [r5, #48]	; 0x30
   135d4:	cmn	r0, #1
   135d8:	mov	r0, r5
   135dc:	bgt	135c0 <__assert_fail@plt+0x2104>
   135e0:	b	135e8 <__assert_fail@plt+0x212c>
   135e4:	mov	r5, r0
   135e8:	mov	r0, r5
   135ec:	bl	12db4 <__assert_fail@plt+0x18f8>
   135f0:	ldr	r5, [r4, #4]
   135f4:	cmp	r5, #0
   135f8:	bne	13614 <__assert_fail@plt+0x2158>
   135fc:	b	1362c <__assert_fail@plt+0x2170>
   13600:	mov	r0, r5
   13604:	bl	12db4 <__assert_fail@plt+0x18f8>
   13608:	cmp	r6, #0
   1360c:	mov	r5, r6
   13610:	beq	1362c <__assert_fail@plt+0x2170>
   13614:	ldrd	r6, [r5, #8]
   13618:	cmp	r7, #0
   1361c:	beq	13600 <__assert_fail@plt+0x2144>
   13620:	mov	r0, r7
   13624:	bl	11498 <closedir@plt>
   13628:	b	13600 <__assert_fail@plt+0x2144>
   1362c:	ldr	r0, [r4, #8]
   13630:	bl	12db4 <__assert_fail@plt+0x18f8>
   13634:	ldr	r0, [r4, #24]
   13638:	bl	12db4 <__assert_fail@plt+0x18f8>
   1363c:	ldr	r0, [r4, #48]	; 0x30
   13640:	tst	r0, #512	; 0x200
   13644:	bne	13670 <__assert_fail@plt+0x21b4>
   13648:	mov	r6, #0
   1364c:	tst	r0, #4
   13650:	bne	136b4 <__assert_fail@plt+0x21f8>
   13654:	ldr	r0, [r4, #28]
   13658:	bl	1142c <fchdir@plt>
   1365c:	cmp	r0, #0
   13660:	beq	13690 <__assert_fail@plt+0x21d4>
   13664:	bl	11378 <__errno_location@plt>
   13668:	ldr	r6, [r0]
   1366c:	b	13694 <__assert_fail@plt+0x21d8>
   13670:	ldr	r0, [r4, #32]
   13674:	mov	r6, #0
   13678:	cmp	r0, #0
   1367c:	bmi	136b4 <__assert_fail@plt+0x21f8>
   13680:	bl	11480 <close@plt>
   13684:	cmp	r0, #0
   13688:	bne	136ac <__assert_fail@plt+0x21f0>
   1368c:	b	136b4 <__assert_fail@plt+0x21f8>
   13690:	mov	r6, #0
   13694:	ldr	r0, [r4, #28]
   13698:	bl	11480 <close@plt>
   1369c:	cmp	r6, #0
   136a0:	bne	136b4 <__assert_fail@plt+0x21f8>
   136a4:	cmp	r0, #0
   136a8:	beq	136b4 <__assert_fail@plt+0x21f8>
   136ac:	bl	11378 <__errno_location@plt>
   136b0:	ldr	r6, [r0]
   136b4:	add	r5, r4, #60	; 0x3c
   136b8:	mov	r0, r5
   136bc:	bl	164ec <__assert_fail@plt+0x5030>
   136c0:	cmp	r0, #0
   136c4:	bne	136e0 <__assert_fail@plt+0x2224>
   136c8:	mov	r0, r5
   136cc:	bl	16540 <__assert_fail@plt+0x5084>
   136d0:	cmp	r0, #0
   136d4:	bmi	136b8 <__assert_fail@plt+0x21fc>
   136d8:	bl	11480 <close@plt>
   136dc:	b	136b8 <__assert_fail@plt+0x21fc>
   136e0:	ldr	r0, [r4, #52]	; 0x34
   136e4:	cmp	r0, #0
   136e8:	beq	136f0 <__assert_fail@plt+0x2234>
   136ec:	bl	15990 <__assert_fail@plt+0x44d4>
   136f0:	ldrh	r0, [r4, #48]	; 0x30
   136f4:	movw	r1, #258	; 0x102
   136f8:	tst	r0, r1
   136fc:	beq	13714 <__assert_fail@plt+0x2258>
   13700:	ldr	r0, [r4, #56]	; 0x38
   13704:	cmp	r0, #0
   13708:	beq	1371c <__assert_fail@plt+0x2260>
   1370c:	bl	15990 <__assert_fail@plt+0x44d4>
   13710:	b	1371c <__assert_fail@plt+0x2260>
   13714:	ldr	r0, [r4, #56]	; 0x38
   13718:	bl	12db4 <__assert_fail@plt+0x18f8>
   1371c:	mov	r0, r4
   13720:	bl	12db4 <__assert_fail@plt+0x18f8>
   13724:	cmp	r6, #0
   13728:	beq	1373c <__assert_fail@plt+0x2280>
   1372c:	bl	11378 <__errno_location@plt>
   13730:	str	r6, [r0]
   13734:	mvn	r0, #0
   13738:	pop	{r4, r5, r6, r7, fp, pc}
   1373c:	mov	r0, #0
   13740:	pop	{r4, r5, r6, r7, fp, pc}
   13744:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13748:	add	fp, sp, #24
   1374c:	sub	sp, sp, #8
   13750:	ldr	r6, [r0]
   13754:	mov	r5, #0
   13758:	cmp	r6, #0
   1375c:	beq	13e9c <__assert_fail@plt+0x29e0>
   13760:	mov	r4, r0
   13764:	ldr	r0, [r0, #48]	; 0x30
   13768:	tst	r0, #8192	; 0x2000
   1376c:	bne	13e9c <__assert_fail@plt+0x29e0>
   13770:	ldrh	r1, [r6, #60]	; 0x3c
   13774:	mov	r2, #3
   13778:	strh	r2, [r6, #60]	; 0x3c
   1377c:	cmp	r1, #1
   13780:	beq	137f0 <__assert_fail@plt+0x2334>
   13784:	cmp	r1, #2
   13788:	bne	1380c <__assert_fail@plt+0x2350>
   1378c:	ldrh	r2, [r6, #56]	; 0x38
   13790:	bic	r3, r2, #1
   13794:	cmp	r3, #12
   13798:	bne	13810 <__assert_fail@plt+0x2354>
   1379c:	mov	r0, r4
   137a0:	mov	r1, r6
   137a4:	mov	r2, #1
   137a8:	bl	132d4 <__assert_fail@plt+0x1e18>
   137ac:	cmp	r0, #1
   137b0:	strh	r0, [r6, #56]	; 0x38
   137b4:	bne	13900 <__assert_fail@plt+0x2444>
   137b8:	ldr	r0, [r4, #48]	; 0x30
   137bc:	tst	r0, #4
   137c0:	bne	13900 <__assert_fail@plt+0x2444>
   137c4:	mov	r1, #32768	; 0x8000
   137c8:	tst	r0, #512	; 0x200
   137cc:	and	r1, r1, r0, lsl #11
   137d0:	orr	r1, r1, #18688	; 0x4900
   137d4:	orr	r2, r1, #524288	; 0x80000
   137d8:	bne	13ae4 <__assert_fail@plt+0x2628>
   137dc:	movw	r0, #46644	; 0xb634
   137e0:	mov	r1, r2
   137e4:	movt	r0, #1
   137e8:	bl	1a2e0 <__assert_fail@plt+0x8e24>
   137ec:	b	13af4 <__assert_fail@plt+0x2638>
   137f0:	mov	r0, r4
   137f4:	mov	r1, r6
   137f8:	mov	r2, #0
   137fc:	bl	132d4 <__assert_fail@plt+0x1e18>
   13800:	strh	r0, [r6, #56]	; 0x38
   13804:	mov	r5, r6
   13808:	b	13e9c <__assert_fail@plt+0x29e0>
   1380c:	ldrh	r2, [r6, #56]	; 0x38
   13810:	cmp	r2, #1
   13814:	bne	13870 <__assert_fail@plt+0x23b4>
   13818:	cmp	r1, #4
   1381c:	bne	13908 <__assert_fail@plt+0x244c>
   13820:	ldrb	r0, [r6, #58]	; 0x3a
   13824:	tst	r0, #2
   13828:	beq	13834 <__assert_fail@plt+0x2378>
   1382c:	ldr	r0, [r6, #36]	; 0x24
   13830:	bl	11480 <close@plt>
   13834:	ldr	r5, [r4, #4]
   13838:	cmp	r5, #0
   1383c:	bne	13858 <__assert_fail@plt+0x239c>
   13840:	b	139a0 <__assert_fail@plt+0x24e4>
   13844:	mov	r0, r5
   13848:	bl	12db4 <__assert_fail@plt+0x18f8>
   1384c:	cmp	r8, #0
   13850:	mov	r5, r8
   13854:	beq	13998 <__assert_fail@plt+0x24dc>
   13858:	ldrd	r8, [r5, #8]
   1385c:	cmp	r9, #0
   13860:	beq	13844 <__assert_fail@plt+0x2388>
   13864:	mov	r0, r9
   13868:	bl	11498 <closedir@plt>
   1386c:	b	13844 <__assert_fail@plt+0x2388>
   13870:	ldr	r5, [r6, #8]
   13874:	cmp	r5, #0
   13878:	beq	139bc <__assert_fail@plt+0x2500>
   1387c:	mov	r0, r6
   13880:	str	r5, [r4]
   13884:	bl	12db4 <__assert_fail@plt+0x18f8>
   13888:	ldr	r0, [r5, #48]	; 0x30
   1388c:	cmp	r0, #0
   13890:	beq	13a08 <__assert_fail@plt+0x254c>
   13894:	ldrh	r0, [r5, #60]	; 0x3c
   13898:	mov	r6, r5
   1389c:	cmp	r0, #4
   138a0:	beq	13870 <__assert_fail@plt+0x23b4>
   138a4:	cmp	r0, #2
   138a8:	bne	13d64 <__assert_fail@plt+0x28a8>
   138ac:	mov	r0, r4
   138b0:	mov	r1, r5
   138b4:	mov	r2, #1
   138b8:	bl	132d4 <__assert_fail@plt+0x1e18>
   138bc:	cmp	r0, #1
   138c0:	strh	r0, [r5, #56]	; 0x38
   138c4:	bne	13d5c <__assert_fail@plt+0x28a0>
   138c8:	ldr	r0, [r4, #48]	; 0x30
   138cc:	tst	r0, #4
   138d0:	bne	13d5c <__assert_fail@plt+0x28a0>
   138d4:	mov	r1, #32768	; 0x8000
   138d8:	tst	r0, #512	; 0x200
   138dc:	and	r1, r1, r0, lsl #11
   138e0:	orr	r1, r1, #18688	; 0x4900
   138e4:	orr	r2, r1, #524288	; 0x80000
   138e8:	bne	13d1c <__assert_fail@plt+0x2860>
   138ec:	movw	r0, #46644	; 0xb634
   138f0:	mov	r1, r2
   138f4:	movt	r0, #1
   138f8:	bl	1a2e0 <__assert_fail@plt+0x8e24>
   138fc:	b	13d2c <__assert_fail@plt+0x2870>
   13900:	mov	r5, r6
   13904:	b	13da0 <__assert_fail@plt+0x28e4>
   13908:	tst	r0, #64	; 0x40
   1390c:	beq	13928 <__assert_fail@plt+0x246c>
   13910:	ldrd	r2, [r4, #16]
   13914:	ldrd	r8, [r6, #64]	; 0x40
   13918:	eor	r1, r9, r3
   1391c:	eor	r2, r8, r2
   13920:	orrs	r1, r2, r1
   13924:	bne	13820 <__assert_fail@plt+0x2364>
   13928:	ldr	r5, [r4, #4]
   1392c:	cmp	r5, #0
   13930:	beq	13a8c <__assert_fail@plt+0x25d0>
   13934:	tst	r0, #4096	; 0x1000
   13938:	bne	13a4c <__assert_fail@plt+0x2590>
   1393c:	ldr	r3, [r6, #24]
   13940:	mov	r0, r4
   13944:	mov	r1, r6
   13948:	mvn	r2, #0
   1394c:	bl	13f88 <__assert_fail@plt+0x2acc>
   13950:	cmp	r0, #0
   13954:	beq	13aa4 <__assert_fail@plt+0x25e8>
   13958:	bl	11378 <__errno_location@plt>
   1395c:	ldr	r0, [r0]
   13960:	str	r0, [r6, #32]
   13964:	ldrh	r0, [r6, #58]	; 0x3a
   13968:	orr	r0, r0, #1
   1396c:	strh	r0, [r6, #58]	; 0x3a
   13970:	ldr	r0, [r4, #4]
   13974:	cmp	r0, #0
   13978:	beq	13aa4 <__assert_fail@plt+0x25e8>
   1397c:	ldmib	r0, {r1, r2}
   13980:	cmp	r2, #0
   13984:	ldr	r1, [r1, #24]
   13988:	str	r1, [r0, #24]
   1398c:	mov	r0, r2
   13990:	bne	1397c <__assert_fail@plt+0x24c0>
   13994:	b	13aa4 <__assert_fail@plt+0x25e8>
   13998:	mov	r0, #0
   1399c:	str	r0, [r4, #4]
   139a0:	mov	r0, #6
   139a4:	strh	r0, [r6, #56]	; 0x38
   139a8:	mov	r0, r4
   139ac:	mov	r1, r6
   139b0:	bl	13eac <__assert_fail@plt+0x29f0>
   139b4:	mov	r5, r6
   139b8:	b	13e9c <__assert_fail@plt+0x29e0>
   139bc:	ldr	r5, [r6, #4]
   139c0:	ldr	r0, [r5, #12]
   139c4:	cmp	r0, #0
   139c8:	beq	13b24 <__assert_fail@plt+0x2668>
   139cc:	str	r5, [r4]
   139d0:	ldr	r1, [r5, #40]	; 0x28
   139d4:	ldr	r0, [r4, #24]
   139d8:	mov	r5, #0
   139dc:	strb	r5, [r0, r1]
   139e0:	mov	r0, r4
   139e4:	mov	r1, #3
   139e8:	bl	141e8 <__assert_fail@plt+0x2d2c>
   139ec:	cmp	r0, #0
   139f0:	beq	13b14 <__assert_fail@plt+0x2658>
   139f4:	mov	r7, r0
   139f8:	mov	r0, r6
   139fc:	bl	12db4 <__assert_fail@plt+0x18f8>
   13a00:	mov	r5, r7
   13a04:	b	13d64 <__assert_fail@plt+0x28a8>
   13a08:	mov	r0, r4
   13a0c:	bl	14c78 <__assert_fail@plt+0x37bc>
   13a10:	ldr	r1, [r4, #48]	; 0x30
   13a14:	cmp	r0, #0
   13a18:	beq	13a2c <__assert_fail@plt+0x2570>
   13a1c:	orr	r0, r1, #8192	; 0x2000
   13a20:	mov	r5, #0
   13a24:	str	r0, [r4, #48]	; 0x30
   13a28:	b	13e9c <__assert_fail@plt+0x29e0>
   13a2c:	movw	r0, #258	; 0x102
   13a30:	tst	r1, r0
   13a34:	beq	13bd4 <__assert_fail@plt+0x2718>
   13a38:	ldr	r0, [r4, #56]	; 0x38
   13a3c:	cmp	r0, #0
   13a40:	beq	13bdc <__assert_fail@plt+0x2720>
   13a44:	bl	15990 <__assert_fail@plt+0x44d4>
   13a48:	b	13bdc <__assert_fail@plt+0x2720>
   13a4c:	bic	r0, r0, #4096	; 0x1000
   13a50:	str	r0, [r4, #48]	; 0x30
   13a54:	b	13a6c <__assert_fail@plt+0x25b0>
   13a58:	mov	r0, r5
   13a5c:	bl	12db4 <__assert_fail@plt+0x18f8>
   13a60:	cmp	r8, #0
   13a64:	mov	r5, r8
   13a68:	beq	13a84 <__assert_fail@plt+0x25c8>
   13a6c:	ldrd	r8, [r5, #8]
   13a70:	cmp	r9, #0
   13a74:	beq	13a58 <__assert_fail@plt+0x259c>
   13a78:	mov	r0, r9
   13a7c:	bl	11498 <closedir@plt>
   13a80:	b	13a58 <__assert_fail@plt+0x259c>
   13a84:	mov	r0, #0
   13a88:	str	r0, [r4, #4]
   13a8c:	mov	r0, r4
   13a90:	mov	r1, #3
   13a94:	bl	141e8 <__assert_fail@plt+0x2d2c>
   13a98:	cmp	r0, #0
   13a9c:	str	r0, [r4, #4]
   13aa0:	beq	13ab4 <__assert_fail@plt+0x25f8>
   13aa4:	ldr	r5, [r4, #4]
   13aa8:	mov	r0, #0
   13aac:	str	r0, [r4, #4]
   13ab0:	b	13d64 <__assert_fail@plt+0x28a8>
   13ab4:	ldrb	r0, [r4, #49]	; 0x31
   13ab8:	mov	r5, #0
   13abc:	tst	r0, #32
   13ac0:	bne	13e9c <__assert_fail@plt+0x29e0>
   13ac4:	ldr	r0, [r6, #32]
   13ac8:	cmp	r0, #0
   13acc:	beq	139a8 <__assert_fail@plt+0x24ec>
   13ad0:	ldrh	r0, [r6, #56]	; 0x38
   13ad4:	cmp	r0, #4
   13ad8:	beq	139a8 <__assert_fail@plt+0x24ec>
   13adc:	mov	r0, #7
   13ae0:	b	139a4 <__assert_fail@plt+0x24e8>
   13ae4:	ldr	r0, [r4, #32]
   13ae8:	movw	r1, #46644	; 0xb634
   13aec:	movt	r1, #1
   13af0:	bl	165ec <__assert_fail@plt+0x5130>
   13af4:	cmn	r0, #1
   13af8:	str	r0, [r6, #36]	; 0x24
   13afc:	ble	13bb8 <__assert_fail@plt+0x26fc>
   13b00:	ldrh	r0, [r6, #58]	; 0x3a
   13b04:	mov	r5, r6
   13b08:	orr	r0, r0, #2
   13b0c:	strh	r0, [r6, #58]	; 0x3a
   13b10:	b	13da0 <__assert_fail@plt+0x28e4>
   13b14:	ldrb	r0, [r4, #49]	; 0x31
   13b18:	tst	r0, #32
   13b1c:	bne	13e9c <__assert_fail@plt+0x29e0>
   13b20:	ldr	r5, [r6, #4]
   13b24:	mov	r0, r6
   13b28:	str	r5, [r4]
   13b2c:	bl	12db4 <__assert_fail@plt+0x18f8>
   13b30:	ldr	r0, [r5, #48]	; 0x30
   13b34:	cmn	r0, #1
   13b38:	beq	13b9c <__assert_fail@plt+0x26e0>
   13b3c:	ldrh	r0, [r5, #56]	; 0x38
   13b40:	cmp	r0, #11
   13b44:	beq	13ea8 <__assert_fail@plt+0x29ec>
   13b48:	ldr	r0, [r5, #40]	; 0x28
   13b4c:	ldr	r1, [r4, #24]
   13b50:	mov	r2, #0
   13b54:	strb	r2, [r1, r0]
   13b58:	ldr	r0, [r5, #48]	; 0x30
   13b5c:	cmp	r0, #0
   13b60:	beq	13cac <__assert_fail@plt+0x27f0>
   13b64:	ldrh	r0, [r5, #58]	; 0x3a
   13b68:	tst	r0, #2
   13b6c:	bne	13cd8 <__assert_fail@plt+0x281c>
   13b70:	tst	r0, #1
   13b74:	bne	13e60 <__assert_fail@plt+0x29a4>
   13b78:	ldr	r1, [r5, #4]
   13b7c:	movw	r3, #46643	; 0xb633
   13b80:	mov	r0, r4
   13b84:	mvn	r2, #0
   13b88:	movt	r3, #1
   13b8c:	bl	13f88 <__assert_fail@plt+0x2acc>
   13b90:	cmp	r0, #0
   13b94:	bne	13cbc <__assert_fail@plt+0x2800>
   13b98:	b	13e60 <__assert_fail@plt+0x29a4>
   13b9c:	mov	r0, r5
   13ba0:	bl	12db4 <__assert_fail@plt+0x18f8>
   13ba4:	bl	11378 <__errno_location@plt>
   13ba8:	mov	r5, #0
   13bac:	str	r5, [r0]
   13bb0:	str	r5, [r4]
   13bb4:	b	13e9c <__assert_fail@plt+0x29e0>
   13bb8:	bl	11378 <__errno_location@plt>
   13bbc:	ldr	r0, [r0]
   13bc0:	mov	r1, #7
   13bc4:	mov	r5, r6
   13bc8:	strh	r1, [r6, #56]	; 0x38
   13bcc:	str	r0, [r6, #32]
   13bd0:	b	13da0 <__assert_fail@plt+0x28e4>
   13bd4:	ldr	r0, [r4, #56]	; 0x38
   13bd8:	bl	12db4 <__assert_fail@plt+0x18f8>
   13bdc:	ldr	r1, [r5, #52]	; 0x34
   13be0:	add	r6, r5, #168	; 0xa8
   13be4:	str	r1, [r5, #40]	; 0x28
   13be8:	add	r2, r1, #1
   13bec:	mov	r1, r6
   13bf0:	ldr	r0, [r4, #24]
   13bf4:	bl	111f8 <memmove@plt>
   13bf8:	mov	r0, r6
   13bfc:	mov	r1, #47	; 0x2f
   13c00:	bl	113f0 <strrchr@plt>
   13c04:	cmp	r0, #0
   13c08:	beq	13c44 <__assert_fail@plt+0x2788>
   13c0c:	cmp	r0, r6
   13c10:	bne	13c20 <__assert_fail@plt+0x2764>
   13c14:	ldrb	r1, [r5, #169]	; 0xa9
   13c18:	cmp	r1, #0
   13c1c:	beq	13c44 <__assert_fail@plt+0x2788>
   13c20:	add	r7, r0, #1
   13c24:	mov	r0, r7
   13c28:	bl	11348 <strlen@plt>
   13c2c:	mov	r8, r0
   13c30:	add	r2, r0, #1
   13c34:	mov	r0, r6
   13c38:	mov	r1, r7
   13c3c:	bl	111f8 <memmove@plt>
   13c40:	str	r8, [r5, #52]	; 0x34
   13c44:	ldr	r0, [r4, #24]
   13c48:	movw	r1, #258	; 0x102
   13c4c:	str	r0, [r5, #24]
   13c50:	str	r0, [r5, #28]
   13c54:	ldrh	r0, [r4, #48]	; 0x30
   13c58:	tst	r0, r1
   13c5c:	beq	13c90 <__assert_fail@plt+0x27d4>
   13c60:	movw	r0, #11700	; 0x2db4
   13c64:	movw	r2, #20448	; 0x4fe0
   13c68:	movw	r3, #20480	; 0x5000
   13c6c:	mov	r1, #0
   13c70:	movt	r0, #1
   13c74:	movt	r2, #1
   13c78:	movt	r3, #1
   13c7c:	str	r0, [sp]
   13c80:	mov	r0, #31
   13c84:	bl	1568c <__assert_fail@plt+0x41d0>
   13c88:	str	r0, [r4, #56]	; 0x38
   13c8c:	b	13da0 <__assert_fail@plt+0x28e4>
   13c90:	mov	r0, #32
   13c94:	bl	19e6c <__assert_fail@plt+0x89b0>
   13c98:	cmp	r0, #0
   13c9c:	str	r0, [r4, #56]	; 0x38
   13ca0:	beq	13da0 <__assert_fail@plt+0x28e4>
   13ca4:	bl	19f74 <__assert_fail@plt+0x8ab8>
   13ca8:	b	13da0 <__assert_fail@plt+0x28e4>
   13cac:	mov	r0, r4
   13cb0:	bl	14c78 <__assert_fail@plt+0x37bc>
   13cb4:	cmp	r0, #0
   13cb8:	beq	13e60 <__assert_fail@plt+0x29a4>
   13cbc:	bl	11378 <__errno_location@plt>
   13cc0:	ldr	r0, [r0]
   13cc4:	str	r0, [r5, #32]
   13cc8:	ldr	r0, [r4, #48]	; 0x30
   13ccc:	orr	r0, r0, #8192	; 0x2000
   13cd0:	str	r0, [r4, #48]	; 0x30
   13cd4:	b	13e60 <__assert_fail@plt+0x29a4>
   13cd8:	ldr	r0, [r4, #48]	; 0x30
   13cdc:	tst	r0, #4
   13ce0:	bne	13e58 <__assert_fail@plt+0x299c>
   13ce4:	ldr	r6, [r5, #36]	; 0x24
   13ce8:	tst	r0, #512	; 0x200
   13cec:	bne	13e2c <__assert_fail@plt+0x2970>
   13cf0:	mov	r0, r6
   13cf4:	bl	1142c <fchdir@plt>
   13cf8:	cmp	r0, #0
   13cfc:	beq	13e58 <__assert_fail@plt+0x299c>
   13d00:	bl	11378 <__errno_location@plt>
   13d04:	ldr	r0, [r0]
   13d08:	str	r0, [r5, #32]
   13d0c:	ldr	r0, [r4, #48]	; 0x30
   13d10:	orr	r0, r0, #8192	; 0x2000
   13d14:	str	r0, [r4, #48]	; 0x30
   13d18:	b	13e58 <__assert_fail@plt+0x299c>
   13d1c:	ldr	r0, [r4, #32]
   13d20:	movw	r1, #46644	; 0xb634
   13d24:	movt	r1, #1
   13d28:	bl	165ec <__assert_fail@plt+0x5130>
   13d2c:	cmn	r0, #1
   13d30:	str	r0, [r5, #36]	; 0x24
   13d34:	ble	13d48 <__assert_fail@plt+0x288c>
   13d38:	ldrh	r0, [r5, #58]	; 0x3a
   13d3c:	orr	r0, r0, #2
   13d40:	strh	r0, [r5, #58]	; 0x3a
   13d44:	b	13d5c <__assert_fail@plt+0x28a0>
   13d48:	bl	11378 <__errno_location@plt>
   13d4c:	ldr	r0, [r0]
   13d50:	mov	r1, #7
   13d54:	strh	r1, [r5, #56]	; 0x38
   13d58:	str	r0, [r5, #32]
   13d5c:	mov	r0, #3
   13d60:	strh	r0, [r5, #60]	; 0x3c
   13d64:	ldr	r0, [r5, #4]
   13d68:	ldr	r1, [r0, #28]
   13d6c:	ldr	r0, [r0, #40]	; 0x28
   13d70:	sub	r2, r0, #1
   13d74:	ldrb	r1, [r1, r2]
   13d78:	cmp	r1, #47	; 0x2f
   13d7c:	ldr	r1, [r4, #24]
   13d80:	moveq	r0, r2
   13d84:	mov	r2, #47	; 0x2f
   13d88:	strb	r2, [r1, r0]!
   13d8c:	ldr	r2, [r5, #52]	; 0x34
   13d90:	add	r0, r1, #1
   13d94:	add	r1, r5, #168	; 0xa8
   13d98:	add	r2, r2, #1
   13d9c:	bl	111f8 <memmove@plt>
   13da0:	str	r5, [r4]
   13da4:	ldrh	r0, [r5, #56]	; 0x38
   13da8:	cmp	r0, #11
   13dac:	bne	13de4 <__assert_fail@plt+0x2928>
   13db0:	add	r0, r5, #112	; 0x70
   13db4:	ldrd	r0, [r0]
   13db8:	eor	r2, r0, #1
   13dbc:	orrs	r2, r2, r1
   13dc0:	beq	13e9c <__assert_fail@plt+0x29e0>
   13dc4:	eor	r0, r0, #2
   13dc8:	orrs	r0, r0, r1
   13dcc:	bne	13ea8 <__assert_fail@plt+0x29ec>
   13dd0:	mov	r0, r4
   13dd4:	mov	r1, r5
   13dd8:	mov	r2, #0
   13ddc:	bl	132d4 <__assert_fail@plt+0x1e18>
   13de0:	strh	r0, [r5, #56]	; 0x38
   13de4:	cmp	r0, #1
   13de8:	bne	13e9c <__assert_fail@plt+0x29e0>
   13dec:	ldr	r0, [r5, #48]	; 0x30
   13df0:	cmp	r0, #0
   13df4:	bne	13e04 <__assert_fail@plt+0x2948>
   13df8:	add	r0, r5, #64	; 0x40
   13dfc:	ldrd	r0, [r0]
   13e00:	strd	r0, [r4, #16]
   13e04:	mov	r0, r4
   13e08:	mov	r1, r5
   13e0c:	bl	14d08 <__assert_fail@plt+0x384c>
   13e10:	cmp	r0, #0
   13e14:	bne	13e9c <__assert_fail@plt+0x29e0>
   13e18:	bl	11378 <__errno_location@plt>
   13e1c:	mov	r1, #12
   13e20:	mov	r5, #0
   13e24:	str	r1, [r0]
   13e28:	b	13e9c <__assert_fail@plt+0x29e0>
   13e2c:	ldr	r1, [r4, #32]
   13e30:	cmp	r1, r6
   13e34:	bne	13e40 <__assert_fail@plt+0x2984>
   13e38:	cmn	r1, #100	; 0x64
   13e3c:	bne	13ea8 <__assert_fail@plt+0x29ec>
   13e40:	add	r0, r4, #60	; 0x3c
   13e44:	bl	164f4 <__assert_fail@plt+0x5038>
   13e48:	cmp	r0, #0
   13e4c:	bmi	13e54 <__assert_fail@plt+0x2998>
   13e50:	bl	11480 <close@plt>
   13e54:	str	r6, [r4, #32]
   13e58:	ldr	r0, [r5, #36]	; 0x24
   13e5c:	bl	11480 <close@plt>
   13e60:	ldrh	r0, [r5, #56]	; 0x38
   13e64:	cmp	r0, #2
   13e68:	beq	13e90 <__assert_fail@plt+0x29d4>
   13e6c:	ldr	r0, [r5, #32]
   13e70:	mov	r1, #7
   13e74:	cmp	r0, #0
   13e78:	movweq	r1, #6
   13e7c:	strh	r1, [r5, #56]	; 0x38
   13e80:	bne	13e90 <__assert_fail@plt+0x29d4>
   13e84:	mov	r0, r4
   13e88:	mov	r1, r5
   13e8c:	bl	13eac <__assert_fail@plt+0x29f0>
   13e90:	ldrb	r0, [r4, #49]	; 0x31
   13e94:	tst	r0, #32
   13e98:	movne	r5, #0
   13e9c:	mov	r0, r5
   13ea0:	sub	sp, fp, #24
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ea8:	bl	11474 <abort@plt>
   13eac:	push	{r4, r5, r7, sl, fp, lr}
   13eb0:	add	fp, sp, #16
   13eb4:	sub	sp, sp, #24
   13eb8:	ldrh	r2, [r0, #48]	; 0x30
   13ebc:	movw	r3, #258	; 0x102
   13ec0:	add	lr, r1, #64	; 0x40
   13ec4:	add	r4, r1, #160	; 0xa0
   13ec8:	tst	r2, r3
   13ecc:	beq	13f04 <__assert_fail@plt+0x2a48>
   13ed0:	ldrd	r2, [lr]
   13ed4:	mov	r1, sp
   13ed8:	stm	sp, {r2, r3}
   13edc:	ldrd	r2, [r4]
   13ee0:	str	r3, [sp, #12]
   13ee4:	str	r2, [sp, #8]
   13ee8:	ldr	r0, [r0, #56]	; 0x38
   13eec:	bl	16220 <__assert_fail@plt+0x4d64>
   13ef0:	cmp	r0, #0
   13ef4:	beq	13f84 <__assert_fail@plt+0x2ac8>
   13ef8:	bl	12db4 <__assert_fail@plt+0x18f8>
   13efc:	sub	sp, fp, #16
   13f00:	pop	{r4, r5, r7, sl, fp, pc}
   13f04:	ldr	r1, [r1, #4]
   13f08:	cmp	r1, #0
   13f0c:	beq	13f7c <__assert_fail@plt+0x2ac0>
   13f10:	ldr	r2, [r1, #48]	; 0x30
   13f14:	cmp	r2, #0
   13f18:	bmi	13f7c <__assert_fail@plt+0x2ac0>
   13f1c:	ldr	ip, [r0, #56]	; 0x38
   13f20:	ldrd	r2, [ip, #16]
   13f24:	orrs	r2, r2, r3
   13f28:	beq	13f84 <__assert_fail@plt+0x2ac8>
   13f2c:	ldrd	r2, [r4]
   13f30:	ldrd	r4, [ip]
   13f34:	eor	r3, r5, r3
   13f38:	eor	r2, r4, r2
   13f3c:	orrs	r2, r2, r3
   13f40:	bne	13f7c <__assert_fail@plt+0x2ac0>
   13f44:	add	r3, ip, #8
   13f48:	ldm	lr, {r2, r5}
   13f4c:	ldm	r3, {r4, r7}
   13f50:	eor	r7, r7, r5
   13f54:	eor	r2, r4, r2
   13f58:	orrs	r2, r2, r7
   13f5c:	bne	13f7c <__assert_fail@plt+0x2ac0>
   13f60:	add	r2, r1, #64	; 0x40
   13f64:	add	r1, r1, #160	; 0xa0
   13f68:	ldm	r2, {r2, r5}
   13f6c:	stm	r3, {r2, r5}
   13f70:	ldr	r0, [r0, #56]	; 0x38
   13f74:	ldrd	r2, [r1]
   13f78:	strd	r2, [r0]
   13f7c:	sub	sp, fp, #16
   13f80:	pop	{r4, r5, r7, sl, fp, pc}
   13f84:	bl	11474 <abort@plt>
   13f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f8c:	add	fp, sp, #28
   13f90:	sub	sp, sp, #108	; 0x6c
   13f94:	mov	r7, r3
   13f98:	mov	r4, r2
   13f9c:	mov	r8, r1
   13fa0:	mov	sl, r0
   13fa4:	cmp	r3, #0
   13fa8:	beq	13fcc <__assert_fail@plt+0x2b10>
   13fac:	movw	r1, #46643	; 0xb633
   13fb0:	mov	r0, r7
   13fb4:	movt	r1, #1
   13fb8:	bl	111d4 <strcmp@plt>
   13fbc:	cmp	r0, #0
   13fc0:	mov	r6, r0
   13fc4:	movwne	r6, #1
   13fc8:	b	13fd0 <__assert_fail@plt+0x2b14>
   13fcc:	mov	r6, #1
   13fd0:	ldr	r0, [sl, #48]	; 0x30
   13fd4:	tst	r0, #4
   13fd8:	bne	14030 <__assert_fail@plt+0x2b74>
   13fdc:	cmn	r4, #1
   13fe0:	mov	r1, #0
   13fe4:	mov	r9, #0
   13fe8:	movwgt	r1, #1
   13fec:	orrs	r1, r1, r6
   13ff0:	bne	14050 <__assert_fail@plt+0x2b94>
   13ff4:	ands	r0, r0, #512	; 0x200
   13ff8:	beq	14050 <__assert_fail@plt+0x2b94>
   13ffc:	add	r4, sl, #60	; 0x3c
   14000:	mov	r0, r4
   14004:	bl	164ec <__assert_fail@plt+0x5030>
   14008:	cmp	r0, #0
   1400c:	bne	14058 <__assert_fail@plt+0x2b9c>
   14010:	mov	r0, r4
   14014:	bl	16540 <__assert_fail@plt+0x5084>
   14018:	cmn	r0, #1
   1401c:	ble	14058 <__assert_fail@plt+0x2b9c>
   14020:	mov	r4, r0
   14024:	mov	r9, #0
   14028:	mov	r7, #0
   1402c:	b	140a0 <__assert_fail@plt+0x2be4>
   14030:	mov	r5, #0
   14034:	cmp	r4, #0
   14038:	bmi	141d8 <__assert_fail@plt+0x2d1c>
   1403c:	ands	r0, r0, #512	; 0x200
   14040:	beq	141d8 <__assert_fail@plt+0x2d1c>
   14044:	mov	r0, r4
   14048:	bl	11480 <close@plt>
   1404c:	b	141d8 <__assert_fail@plt+0x2d1c>
   14050:	cmn	r4, #1
   14054:	bgt	140a0 <__assert_fail@plt+0x2be4>
   14058:	ldr	r0, [sl, #48]	; 0x30
   1405c:	mov	r1, #32768	; 0x8000
   14060:	and	r1, r1, r0, lsl #11
   14064:	tst	r0, #512	; 0x200
   14068:	orr	r1, r1, #18688	; 0x4900
   1406c:	orr	r2, r1, #524288	; 0x80000
   14070:	bne	14084 <__assert_fail@plt+0x2bc8>
   14074:	mov	r0, r7
   14078:	mov	r1, r2
   1407c:	bl	1a2e0 <__assert_fail@plt+0x8e24>
   14080:	b	14090 <__assert_fail@plt+0x2bd4>
   14084:	ldr	r0, [sl, #32]
   14088:	mov	r1, r7
   1408c:	bl	165ec <__assert_fail@plt+0x5130>
   14090:	mov	r4, r0
   14094:	mov	r9, #1
   14098:	cmp	r0, #0
   1409c:	bmi	1417c <__assert_fail@plt+0x2cc0>
   140a0:	ldr	r5, [sl, #48]	; 0x30
   140a4:	tst	r5, #2
   140a8:	bne	140ec <__assert_fail@plt+0x2c30>
   140ac:	cmp	r7, #0
   140b0:	beq	140cc <__assert_fail@plt+0x2c10>
   140b4:	movw	r1, #46643	; 0xb633
   140b8:	mov	r0, r7
   140bc:	movt	r1, #1
   140c0:	bl	111d4 <strcmp@plt>
   140c4:	cmp	r0, #0
   140c8:	beq	140ec <__assert_fail@plt+0x2c30>
   140cc:	tst	r5, #512	; 0x200
   140d0:	bne	1414c <__assert_fail@plt+0x2c90>
   140d4:	mov	r0, r4
   140d8:	bl	1142c <fchdir@plt>
   140dc:	mov	r5, r0
   140e0:	cmp	r9, #0
   140e4:	bne	1419c <__assert_fail@plt+0x2ce0>
   140e8:	b	141d8 <__assert_fail@plt+0x2d1c>
   140ec:	mov	r2, sp
   140f0:	mov	r0, #3
   140f4:	mov	r1, r4
   140f8:	bl	11288 <__fxstat64@plt>
   140fc:	cmp	r0, #0
   14100:	bne	14190 <__assert_fail@plt+0x2cd4>
   14104:	add	r0, r8, #64	; 0x40
   14108:	ldm	sp, {r2, r3}
   1410c:	ldrd	r0, [r0]
   14110:	eor	r1, r1, r3
   14114:	eor	r0, r0, r2
   14118:	orrs	r0, r0, r1
   1411c:	bne	14184 <__assert_fail@plt+0x2cc8>
   14120:	add	r0, r8, #160	; 0xa0
   14124:	ldr	r2, [sp, #96]	; 0x60
   14128:	ldr	r3, [sp, #100]	; 0x64
   1412c:	ldrd	r0, [r0]
   14130:	eor	r1, r1, r3
   14134:	eor	r0, r0, r2
   14138:	orrs	r0, r0, r1
   1413c:	bne	14184 <__assert_fail@plt+0x2cc8>
   14140:	ldr	r5, [sl, #48]	; 0x30
   14144:	tst	r5, #512	; 0x200
   14148:	beq	140d4 <__assert_fail@plt+0x2c18>
   1414c:	ldr	r1, [sl, #32]
   14150:	cmp	r1, r4
   14154:	bne	14160 <__assert_fail@plt+0x2ca4>
   14158:	cmn	r1, #100	; 0x64
   1415c:	bne	141e4 <__assert_fail@plt+0x2d28>
   14160:	cmp	r6, #0
   14164:	beq	141b8 <__assert_fail@plt+0x2cfc>
   14168:	add	r0, sl, #60	; 0x3c
   1416c:	bl	164f4 <__assert_fail@plt+0x5038>
   14170:	cmp	r0, #0
   14174:	bpl	141cc <__assert_fail@plt+0x2d10>
   14178:	b	141d0 <__assert_fail@plt+0x2d14>
   1417c:	mvn	r5, #0
   14180:	b	141d8 <__assert_fail@plt+0x2d1c>
   14184:	bl	11378 <__errno_location@plt>
   14188:	mov	r1, #2
   1418c:	str	r1, [r0]
   14190:	mvn	r5, #0
   14194:	cmp	r9, #0
   14198:	beq	141d8 <__assert_fail@plt+0x2d1c>
   1419c:	bl	11378 <__errno_location@plt>
   141a0:	ldr	r7, [r0]
   141a4:	mov	r6, r0
   141a8:	mov	r0, r4
   141ac:	bl	11480 <close@plt>
   141b0:	str	r7, [r6]
   141b4:	b	141d8 <__assert_fail@plt+0x2d1c>
   141b8:	tst	r5, #4
   141bc:	bne	141d0 <__assert_fail@plt+0x2d14>
   141c0:	cmp	r1, #0
   141c4:	bmi	141d0 <__assert_fail@plt+0x2d14>
   141c8:	mov	r0, r1
   141cc:	bl	11480 <close@plt>
   141d0:	str	r4, [sl, #32]
   141d4:	mov	r5, #0
   141d8:	mov	r0, r5
   141dc:	sub	sp, fp, #28
   141e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e4:	bl	11474 <abort@plt>
   141e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141ec:	add	fp, sp, #28
   141f0:	sub	sp, sp, #68	; 0x44
   141f4:	ldr	sl, [r0]
   141f8:	mov	r7, r1
   141fc:	mov	r5, r0
   14200:	str	r0, [sp, #48]	; 0x30
   14204:	ldr	r4, [sl, #12]
   14208:	cmp	r4, #0
   1420c:	beq	14254 <__assert_fail@plt+0x2d98>
   14210:	mov	r0, r4
   14214:	bl	11420 <dirfd@plt>
   14218:	cmn	r0, #1
   1421c:	str	r0, [fp, #-32]	; 0xffffffe0
   14220:	ble	14288 <__assert_fail@plt+0x2dcc>
   14224:	mov	r1, r5
   14228:	str	r4, [sp, #12]
   1422c:	str	r7, [sp, #4]
   14230:	mov	ip, #0
   14234:	ldr	r0, [r1, #44]!	; 0x2c
   14238:	str	r1, [sp, #20]
   1423c:	mvn	r1, #0
   14240:	cmp	r0, #0
   14244:	movweq	r1, #34464	; 0x86a0
   14248:	movteq	r1, #1
   1424c:	str	r1, [sp, #32]
   14250:	b	144d8 <__assert_fail@plt+0x301c>
   14254:	ldr	r3, [r5, #48]	; 0x30
   14258:	mvn	r0, #99	; 0x63
   1425c:	mov	r2, #0
   14260:	and	r1, r3, #516	; 0x204
   14264:	cmp	r1, #512	; 0x200
   14268:	ldr	r1, [sl, #24]
   1426c:	ldreq	r0, [r5, #32]
   14270:	tst	r3, #16
   14274:	beq	142b0 <__assert_fail@plt+0x2df4>
   14278:	tst	r3, #1
   1427c:	bne	142a4 <__assert_fail@plt+0x2de8>
   14280:	mov	r2, #32768	; 0x8000
   14284:	b	142b0 <__assert_fail@plt+0x2df4>
   14288:	ldr	r0, [sl, #12]
   1428c:	bl	11498 <closedir@plt>
   14290:	mov	r6, #0
   14294:	str	r6, [sl, #12]
   14298:	cmp	r7, #3
   1429c:	beq	142f4 <__assert_fail@plt+0x2e38>
   142a0:	b	14c6c <__assert_fail@plt+0x37b0>
   142a4:	ldr	r3, [sl, #48]	; 0x30
   142a8:	cmp	r3, #0
   142ac:	movne	r2, #32768	; 0x8000
   142b0:	sub	r3, fp, #32
   142b4:	bl	16624 <__assert_fail@plt+0x5168>
   142b8:	cmp	r0, #0
   142bc:	str	r0, [sl, #12]
   142c0:	beq	142e8 <__assert_fail@plt+0x2e2c>
   142c4:	ldrh	r0, [sl, #56]	; 0x38
   142c8:	cmp	r0, #11
   142cc:	bne	1430c <__assert_fail@plt+0x2e50>
   142d0:	mov	r0, r5
   142d4:	mov	r1, sl
   142d8:	mov	r2, #0
   142dc:	bl	132d4 <__assert_fail@plt+0x1e18>
   142e0:	strh	r0, [sl, #56]	; 0x38
   142e4:	b	1434c <__assert_fail@plt+0x2e90>
   142e8:	mov	r6, #0
   142ec:	cmp	r7, #3
   142f0:	bne	14c6c <__assert_fail@plt+0x37b0>
   142f4:	mov	r0, #4
   142f8:	strh	r0, [sl, #56]	; 0x38
   142fc:	bl	11378 <__errno_location@plt>
   14300:	ldr	r0, [r0]
   14304:	str	r0, [sl, #32]
   14308:	b	14c6c <__assert_fail@plt+0x37b0>
   1430c:	ldrb	r0, [r5, #49]	; 0x31
   14310:	tst	r0, #1
   14314:	beq	1434c <__assert_fail@plt+0x2e90>
   14318:	mov	r0, r5
   1431c:	mov	r1, sl
   14320:	bl	13eac <__assert_fail@plt+0x29f0>
   14324:	mov	r0, r5
   14328:	mov	r1, sl
   1432c:	mov	r2, #0
   14330:	mov	r6, #0
   14334:	bl	132d4 <__assert_fail@plt+0x1e18>
   14338:	mov	r0, r5
   1433c:	mov	r1, sl
   14340:	bl	14d08 <__assert_fail@plt+0x384c>
   14344:	cmp	r0, #0
   14348:	beq	143f0 <__assert_fail@plt+0x2f34>
   1434c:	mov	r1, r5
   14350:	str	r7, [sp, #4]
   14354:	str	r4, [sp, #12]
   14358:	ldr	r0, [r1, #44]!	; 0x2c
   1435c:	str	r1, [sp, #20]
   14360:	mvn	r1, #0
   14364:	cmp	r0, #0
   14368:	movweq	r1, #34464	; 0x86a0
   1436c:	movteq	r1, #1
   14370:	cmp	r7, #2
   14374:	str	r1, [sp, #32]
   14378:	bne	14394 <__assert_fail@plt+0x2ed8>
   1437c:	mov	ip, #1
   14380:	cmp	r7, #3
   14384:	bne	144d8 <__assert_fail@plt+0x301c>
   14388:	sub	r0, r7, #3
   1438c:	mov	r5, #0
   14390:	b	1441c <__assert_fail@plt+0x2f60>
   14394:	ldr	r0, [r5, #48]	; 0x30
   14398:	and	r0, r0, #56	; 0x38
   1439c:	cmp	r0, #24
   143a0:	bne	14414 <__assert_fail@plt+0x2f58>
   143a4:	ldr	r0, [sl, #84]	; 0x54
   143a8:	cmp	r0, #2
   143ac:	bne	14414 <__assert_fail@plt+0x2f58>
   143b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143b4:	mov	r0, sl
   143b8:	bl	15080 <__assert_fail@plt+0x3bc4>
   143bc:	movw	r1, #26984	; 0x6968
   143c0:	cmp	r0, r1
   143c4:	ble	14400 <__assert_fail@plt+0x2f44>
   143c8:	movw	r1, #26985	; 0x6969
   143cc:	cmp	r0, r1
   143d0:	movwne	r1, #16719	; 0x414f
   143d4:	movtne	r1, #21318	; 0x5346
   143d8:	cmpne	r0, r1
   143dc:	beq	14414 <__assert_fail@plt+0x2f58>
   143e0:	movw	r1, #40864	; 0x9fa0
   143e4:	cmp	r0, r1
   143e8:	beq	14414 <__assert_fail@plt+0x2f58>
   143ec:	b	1437c <__assert_fail@plt+0x2ec0>
   143f0:	bl	11378 <__errno_location@plt>
   143f4:	mov	r1, #12
   143f8:	str	r1, [r0]
   143fc:	b	14c6c <__assert_fail@plt+0x37b0>
   14400:	movw	r1, #19778	; 0x4d42
   14404:	movt	r1, #65363	; 0xff53
   14408:	cmp	r0, r1
   1440c:	cmpne	r0, #0
   14410:	bne	1437c <__assert_fail@plt+0x2ec0>
   14414:	sub	r0, r7, #3
   14418:	mov	r5, #1
   1441c:	clz	r0, r0
   14420:	lsr	r6, r0, #5
   14424:	ldr	r0, [sp, #48]	; 0x30
   14428:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1442c:	ldrb	r0, [r0, #49]	; 0x31
   14430:	tst	r0, #2
   14434:	beq	14450 <__assert_fail@plt+0x2f94>
   14438:	mov	r0, r2
   1443c:	movw	r1, #1030	; 0x406
   14440:	mov	r2, #3
   14444:	bl	1a100 <__assert_fail@plt+0x8c44>
   14448:	mov	r2, r0
   1444c:	str	r0, [fp, #-32]	; 0xffffffe0
   14450:	cmp	r2, #0
   14454:	bmi	14470 <__assert_fail@plt+0x2fb4>
   14458:	ldr	r0, [sp, #48]	; 0x30
   1445c:	mov	r1, sl
   14460:	mov	r3, #0
   14464:	bl	13f88 <__assert_fail@plt+0x2acc>
   14468:	cmp	r0, #0
   1446c:	beq	144d0 <__assert_fail@plt+0x3014>
   14470:	and	r0, r6, r5
   14474:	cmp	r0, #1
   14478:	bne	14488 <__assert_fail@plt+0x2fcc>
   1447c:	bl	11378 <__errno_location@plt>
   14480:	ldr	r0, [r0]
   14484:	str	r0, [sl, #32]
   14488:	ldrh	r0, [sl, #58]	; 0x3a
   1448c:	orr	r0, r0, #1
   14490:	strh	r0, [sl, #58]	; 0x3a
   14494:	ldr	r0, [sl, #12]
   14498:	bl	11498 <closedir@plt>
   1449c:	ldr	r5, [sp, #48]	; 0x30
   144a0:	mov	r4, #0
   144a4:	str	r4, [sl, #12]
   144a8:	ldrb	r0, [r5, #49]	; 0x31
   144ac:	tst	r0, #2
   144b0:	beq	144c4 <__assert_fail@plt+0x3008>
   144b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   144b8:	cmp	r0, #0
   144bc:	bmi	144c4 <__assert_fail@plt+0x3008>
   144c0:	bl	11480 <close@plt>
   144c4:	mov	ip, #1
   144c8:	str	r4, [sl, #12]
   144cc:	b	144d8 <__assert_fail@plt+0x301c>
   144d0:	ldr	r5, [sp, #48]	; 0x30
   144d4:	mov	ip, #0
   144d8:	ldr	r0, [sl, #40]	; 0x28
   144dc:	ldr	r1, [sl, #28]
   144e0:	mov	r9, #0
   144e4:	sub	r2, r0, #1
   144e8:	ldrb	r1, [r1, r2]
   144ec:	cmp	r1, #47	; 0x2f
   144f0:	ldrb	r1, [r5, #48]	; 0x30
   144f4:	moveq	r0, r2
   144f8:	tst	r1, #4
   144fc:	mov	r1, #0
   14500:	str	r1, [sp, #40]	; 0x28
   14504:	beq	1451c <__assert_fail@plt+0x3060>
   14508:	ldr	r1, [r5, #24]
   1450c:	mov	r2, #47	; 0x2f
   14510:	strb	r2, [r1, r0]!
   14514:	add	r1, r1, #1
   14518:	str	r1, [sp, #40]	; 0x28
   1451c:	ldr	r6, [sl, #12]
   14520:	add	r1, r0, #1
   14524:	str	r1, [fp, #-44]	; 0xffffffd4
   14528:	cmp	r6, #0
   1452c:	beq	1488c <__assert_fail@plt+0x33d0>
   14530:	ldr	r0, [sl, #48]	; 0x30
   14534:	str	ip, [sp]
   14538:	mov	r4, #0
   1453c:	add	r0, r0, #1
   14540:	str	r0, [sp, #24]
   14544:	ldr	r0, [r5, #36]	; 0x24
   14548:	sub	r0, r0, r1
   1454c:	str	r0, [fp, #-36]	; 0xffffffdc
   14550:	bl	11378 <__errno_location@plt>
   14554:	str	r0, [sp, #36]	; 0x24
   14558:	mov	r0, #0
   1455c:	mov	r9, #0
   14560:	mov	r7, #0
   14564:	str	sl, [sp, #28]
   14568:	str	r0, [sp, #44]	; 0x2c
   1456c:	mov	r0, #0
   14570:	str	r0, [sp, #8]
   14574:	mov	r0, #0
   14578:	str	r0, [sp, #16]
   1457c:	ldr	r0, [sp, #36]	; 0x24
   14580:	str	r4, [r0]
   14584:	mov	r0, r6
   14588:	bl	11408 <readdir64@plt>
   1458c:	cmp	r0, #0
   14590:	beq	14898 <__assert_fail@plt+0x33dc>
   14594:	mov	r8, r0
   14598:	ldrb	r0, [r5, #48]	; 0x30
   1459c:	tst	r0, #32
   145a0:	bne	145d0 <__assert_fail@plt+0x3114>
   145a4:	ldrb	r0, [r8, #19]
   145a8:	cmp	r0, #46	; 0x2e
   145ac:	bne	145d0 <__assert_fail@plt+0x3114>
   145b0:	ldrb	r0, [r8, #20]
   145b4:	cmp	r0, #0
   145b8:	beq	14868 <__assert_fail@plt+0x33ac>
   145bc:	cmp	r0, #46	; 0x2e
   145c0:	bne	145d0 <__assert_fail@plt+0x3114>
   145c4:	ldrb	r0, [r8, #21]
   145c8:	cmp	r0, #0
   145cc:	beq	14868 <__assert_fail@plt+0x33ac>
   145d0:	add	r4, r8, #19
   145d4:	mov	r0, r4
   145d8:	bl	11348 <strlen@plt>
   145dc:	mov	r5, r0
   145e0:	add	r0, r0, #176	; 0xb0
   145e4:	bic	r0, r0, #7
   145e8:	bl	19e6c <__assert_fail@plt+0x89b0>
   145ec:	mov	r6, r0
   145f0:	cmp	r0, #0
   145f4:	beq	14bf4 <__assert_fail@plt+0x3738>
   145f8:	add	sl, r6, #168	; 0xa8
   145fc:	mov	r1, r4
   14600:	mov	r2, r5
   14604:	str	r7, [fp, #-40]	; 0xffffffd8
   14608:	mov	r0, sl
   1460c:	bl	1121c <memcpy@plt>
   14610:	ldr	r2, [sp, #48]	; 0x30
   14614:	mov	r0, #0
   14618:	mov	r1, #196608	; 0x30000
   1461c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14620:	strb	r0, [sl, r5]
   14624:	str	r5, [r6, #52]	; 0x34
   14628:	str	r2, [r6, #44]	; 0x2c
   1462c:	add	r7, r5, r3
   14630:	ldr	r4, [r2, #24]
   14634:	str	r0, [r6, #12]
   14638:	str	r0, [r6, #16]
   1463c:	str	r0, [r6, #20]
   14640:	str	r1, [r6, #58]	; 0x3a
   14644:	str	r4, [r6, #28]
   14648:	str	r0, [r6, #32]
   1464c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14650:	cmp	r5, r0
   14654:	bcs	14668 <__assert_fail@plt+0x31ac>
   14658:	mov	r5, r2
   1465c:	cmp	r7, r3
   14660:	bcs	146d8 <__assert_fail@plt+0x321c>
   14664:	b	14ae4 <__assert_fail@plt+0x3628>
   14668:	ldr	r1, [r2, #36]	; 0x24
   1466c:	movw	r0, #257	; 0x101
   14670:	mov	r5, r2
   14674:	add	r0, r7, r0
   14678:	adds	r1, r0, r1
   1467c:	bcs	14bc0 <__assert_fail@plt+0x3704>
   14680:	mov	r0, r4
   14684:	str	r1, [r5, #36]	; 0x24
   14688:	bl	19e9c <__assert_fail@plt+0x89e0>
   1468c:	cmp	r0, #0
   14690:	beq	14be0 <__assert_fail@plt+0x3724>
   14694:	cmp	r0, r4
   14698:	str	r0, [r5, #24]
   1469c:	beq	146c4 <__assert_fail@plt+0x3208>
   146a0:	ldrb	r1, [r5, #48]	; 0x30
   146a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   146a8:	tst	r1, #4
   146ac:	ldr	r1, [sp, #40]	; 0x28
   146b0:	addne	r1, r0, r3
   146b4:	mov	r0, #1
   146b8:	str	r1, [sp, #40]	; 0x28
   146bc:	str	r0, [sp, #16]
   146c0:	b	146c8 <__assert_fail@plt+0x320c>
   146c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   146c8:	ldr	r0, [r5, #36]	; 0x24
   146cc:	sub	r0, r0, r3
   146d0:	cmp	r7, r3
   146d4:	bcc	14ae4 <__assert_fail@plt+0x3628>
   146d8:	str	r0, [fp, #-36]	; 0xffffffdc
   146dc:	ldr	r0, [sp, #24]
   146e0:	add	r4, r6, #112	; 0x70
   146e4:	str	r0, [r6, #48]	; 0x30
   146e8:	ldr	r0, [r5]
   146ec:	str	r7, [r6, #40]	; 0x28
   146f0:	str	r0, [r6, #4]
   146f4:	ldrd	r0, [r8]
   146f8:	strd	r0, [r4, #48]	; 0x30
   146fc:	ldrb	r0, [r5, #48]	; 0x30
   14700:	tst	r0, #4
   14704:	bne	14710 <__assert_fail@plt+0x3254>
   14708:	str	sl, [r6, #24]
   1470c:	b	1472c <__assert_fail@plt+0x3270>
   14710:	ldr	r0, [r6, #28]
   14714:	ldr	r1, [r6, #52]	; 0x34
   14718:	str	r0, [r6, #24]
   1471c:	ldr	r0, [sp, #40]	; 0x28
   14720:	add	r2, r1, #1
   14724:	mov	r1, sl
   14728:	bl	111f8 <memmove@plt>
   1472c:	ldr	r0, [r5, #44]	; 0x2c
   14730:	ldr	r7, [fp, #-40]	; 0xffffffd8
   14734:	ldr	r2, [r5, #48]	; 0x30
   14738:	ldr	sl, [sp, #28]
   1473c:	cmp	r0, #0
   14740:	beq	14764 <__assert_fail@plt+0x32a8>
   14744:	ands	r0, r2, #1024	; 0x400
   14748:	bne	14764 <__assert_fail@plt+0x32a8>
   1474c:	mov	r0, r5
   14750:	mov	r1, r6
   14754:	mov	r2, #0
   14758:	bl	132d4 <__assert_fail@plt+0x1e18>
   1475c:	strh	r0, [r6, #56]	; 0x38
   14760:	b	147d8 <__assert_fail@plt+0x331c>
   14764:	ldrb	r3, [r8, #18]
   14768:	mov	r0, #0
   1476c:	tst	r2, #8
   14770:	mov	r1, #0
   14774:	beq	14798 <__assert_fail@plt+0x32dc>
   14778:	orr	r1, r3, #4
   1477c:	cmp	r1, #4
   14780:	mov	r1, #0
   14784:	beq	14798 <__assert_fail@plt+0x32dc>
   14788:	eor	r1, r3, #10
   1478c:	and	r2, r2, #16
   14790:	orrs	r1, r2, r1
   14794:	movwne	r1, #1
   14798:	mov	r2, #11
   1479c:	strh	r2, [r6, #56]	; 0x38
   147a0:	sub	r2, r3, #1
   147a4:	uxtb	r3, r2
   147a8:	cmp	r3, #11
   147ac:	bhi	147c0 <__assert_fail@plt+0x3304>
   147b0:	sxtb	r0, r2
   147b4:	movw	r2, #46648	; 0xb638
   147b8:	movt	r2, #1
   147bc:	ldr	r0, [r2, r0, lsl #2]
   147c0:	cmp	r1, #0
   147c4:	str	r0, [r6, #80]	; 0x50
   147c8:	mov	r0, #2
   147cc:	mov	r1, #0
   147d0:	movwne	r0, #1
   147d4:	strd	r0, [r4]
   147d8:	mov	r4, #0
   147dc:	cmp	r9, #0
   147e0:	str	r4, [r6, #8]
   147e4:	beq	147f4 <__assert_fail@plt+0x3338>
   147e8:	ldr	r0, [sp, #44]	; 0x2c
   147ec:	str	r6, [r0, #8]
   147f0:	b	147f8 <__assert_fail@plt+0x333c>
   147f4:	mov	r9, r6
   147f8:	movw	r0, #10000	; 0x2710
   147fc:	cmp	r7, r0
   14800:	bne	14854 <__assert_fail@plt+0x3398>
   14804:	ldr	r0, [sp, #20]
   14808:	ldr	r0, [r0]
   1480c:	cmp	r0, #0
   14810:	bne	14854 <__assert_fail@plt+0x3398>
   14814:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14818:	mov	r0, sl
   1481c:	bl	15080 <__assert_fail@plt+0x3bc4>
   14820:	mov	r1, #0
   14824:	str	r1, [sp, #8]
   14828:	movw	r1, #19778	; 0x4d42
   1482c:	movt	r1, #65363	; 0xff53
   14830:	cmp	r0, r1
   14834:	movwne	r1, #26985	; 0x6969
   14838:	cmpne	r0, r1
   1483c:	beq	14854 <__assert_fail@plt+0x3398>
   14840:	movw	r1, #6548	; 0x1994
   14844:	movt	r1, #258	; 0x102
   14848:	cmp	r0, r1
   1484c:	movne	r0, #1
   14850:	strne	r0, [sp, #8]
   14854:	ldr	r0, [sp, #32]
   14858:	add	r7, r7, #1
   1485c:	cmp	r0, r7
   14860:	bls	14874 <__assert_fail@plt+0x33b8>
   14864:	str	r6, [sp, #44]	; 0x2c
   14868:	ldr	r6, [sl, #12]
   1486c:	cmp	r6, #0
   14870:	bne	1457c <__assert_fail@plt+0x30c0>
   14874:	ldr	r0, [sp, #16]
   14878:	ldr	ip, [sp]
   1487c:	ldr	r4, [sp, #8]
   14880:	tst	r0, #1
   14884:	bne	148ec <__assert_fail@plt+0x3430>
   14888:	b	1498c <__assert_fail@plt+0x34d0>
   1488c:	mov	r7, #0
   14890:	mov	r4, #0
   14894:	b	1498c <__assert_fail@plt+0x34d0>
   14898:	ldr	r0, [sp, #36]	; 0x24
   1489c:	ldr	r0, [r0]
   148a0:	cmp	r0, #0
   148a4:	beq	148c0 <__assert_fail@plt+0x3404>
   148a8:	str	r0, [sl, #32]
   148ac:	ldr	r0, [sp, #12]
   148b0:	orrs	r0, r0, r7
   148b4:	mov	r0, #4
   148b8:	movwne	r0, #7
   148bc:	strh	r0, [sl, #56]	; 0x38
   148c0:	ldr	r0, [sl, #12]
   148c4:	ldr	r4, [sp, #8]
   148c8:	cmp	r0, #0
   148cc:	beq	148dc <__assert_fail@plt+0x3420>
   148d0:	bl	11498 <closedir@plt>
   148d4:	mov	r0, #0
   148d8:	str	r0, [sl, #12]
   148dc:	ldr	r0, [sp, #16]
   148e0:	ldr	ip, [sp]
   148e4:	tst	r0, #1
   148e8:	beq	1498c <__assert_fail@plt+0x34d0>
   148ec:	ldr	r1, [r5, #4]
   148f0:	ldr	r0, [r5, #24]
   148f4:	cmp	r1, #0
   148f8:	bne	14910 <__assert_fail@plt+0x3454>
   148fc:	b	14934 <__assert_fail@plt+0x3478>
   14900:	str	r0, [r1, #28]
   14904:	ldr	r1, [r1, #8]
   14908:	cmp	r1, #0
   1490c:	beq	14934 <__assert_fail@plt+0x3478>
   14910:	ldr	r2, [r1, #24]
   14914:	add	r3, r1, #168	; 0xa8
   14918:	cmp	r2, r3
   1491c:	beq	14900 <__assert_fail@plt+0x3444>
   14920:	ldr	r3, [r1, #28]
   14924:	sub	r2, r2, r3
   14928:	add	r2, r0, r2
   1492c:	str	r2, [r1, #24]
   14930:	b	14900 <__assert_fail@plt+0x3444>
   14934:	ldr	r1, [r9, #48]	; 0x30
   14938:	cmp	r1, #0
   1493c:	bmi	1498c <__assert_fail@plt+0x34d0>
   14940:	mov	r1, r9
   14944:	b	14968 <__assert_fail@plt+0x34ac>
   14948:	str	r0, [r1, #28]
   1494c:	ldr	r2, [r1, #8]
   14950:	cmp	r2, #0
   14954:	ldreq	r2, [r1, #4]
   14958:	ldr	r1, [r2, #48]	; 0x30
   1495c:	cmn	r1, #1
   14960:	mov	r1, r2
   14964:	ble	1498c <__assert_fail@plt+0x34d0>
   14968:	ldr	r2, [r1, #24]
   1496c:	add	r3, r1, #168	; 0xa8
   14970:	cmp	r2, r3
   14974:	beq	14948 <__assert_fail@plt+0x348c>
   14978:	ldr	r3, [r1, #28]
   1497c:	sub	r2, r2, r3
   14980:	add	r2, r0, r2
   14984:	str	r2, [r1, #24]
   14988:	b	14948 <__assert_fail@plt+0x348c>
   1498c:	ldrb	r0, [r5, #48]	; 0x30
   14990:	tst	r0, #4
   14994:	beq	149c0 <__assert_fail@plt+0x3504>
   14998:	ldr	r2, [sp, #40]	; 0x28
   1499c:	ldr	r0, [r5, #36]	; 0x24
   149a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149a4:	cmp	r3, r0
   149a8:	sub	r1, r2, #1
   149ac:	mov	r0, #0
   149b0:	moveq	r2, r1
   149b4:	cmp	r7, #0
   149b8:	moveq	r2, r1
   149bc:	strb	r0, [r2]
   149c0:	ldr	r0, [sp, #12]
   149c4:	cmp	r0, #0
   149c8:	movwne	r0, #1
   149cc:	orrs	r0, r0, ip
   149d0:	beq	14a38 <__assert_fail@plt+0x357c>
   149d4:	cmp	r7, #0
   149d8:	bne	14a78 <__assert_fail@plt+0x35bc>
   149dc:	ldr	r0, [sp, #4]
   149e0:	cmp	r0, #3
   149e4:	bne	149fc <__assert_fail@plt+0x3540>
   149e8:	ldrh	r0, [sl, #56]	; 0x38
   149ec:	cmp	r0, #4
   149f0:	cmpne	r0, #7
   149f4:	movne	r0, #6
   149f8:	strhne	r0, [sl, #56]	; 0x38
   149fc:	mov	r6, #0
   14a00:	cmp	r9, #0
   14a04:	bne	14a20 <__assert_fail@plt+0x3564>
   14a08:	b	14c6c <__assert_fail@plt+0x37b0>
   14a0c:	mov	r0, r9
   14a10:	bl	12db4 <__assert_fail@plt+0x18f8>
   14a14:	cmp	r4, #0
   14a18:	mov	r9, r4
   14a1c:	beq	14c6c <__assert_fail@plt+0x37b0>
   14a20:	ldrd	r4, [r9, #8]
   14a24:	cmp	r5, #0
   14a28:	beq	14a0c <__assert_fail@plt+0x3550>
   14a2c:	mov	r0, r5
   14a30:	bl	11498 <closedir@plt>
   14a34:	b	14a0c <__assert_fail@plt+0x3550>
   14a38:	ldr	r0, [sp, #4]
   14a3c:	cmp	r0, #1
   14a40:	cmpne	r7, #0
   14a44:	bne	14a78 <__assert_fail@plt+0x35bc>
   14a48:	ldr	r0, [sl, #48]	; 0x30
   14a4c:	cmp	r0, #0
   14a50:	beq	14b60 <__assert_fail@plt+0x36a4>
   14a54:	ldr	r1, [sl, #4]
   14a58:	movw	r3, #46643	; 0xb633
   14a5c:	mov	r0, r5
   14a60:	mvn	r2, #0
   14a64:	movt	r3, #1
   14a68:	bl	13f88 <__assert_fail@plt+0x2acc>
   14a6c:	cmp	r0, #0
   14a70:	bne	14b70 <__assert_fail@plt+0x36b4>
   14a74:	b	149d4 <__assert_fail@plt+0x3518>
   14a78:	tst	r4, #1
   14a7c:	beq	14aac <__assert_fail@plt+0x35f0>
   14a80:	movw	r0, #20552	; 0x5048
   14a84:	mov	r1, r9
   14a88:	mov	r2, r7
   14a8c:	movt	r0, #1
   14a90:	str	r0, [r5, #44]	; 0x2c
   14a94:	mov	r0, r5
   14a98:	bl	1346c <__assert_fail@plt+0x1fb0>
   14a9c:	mov	r6, r0
   14aa0:	mov	r0, #0
   14aa4:	str	r0, [r5, #44]	; 0x2c
   14aa8:	b	14c6c <__assert_fail@plt+0x37b0>
   14aac:	cmp	r7, #2
   14ab0:	bcc	14adc <__assert_fail@plt+0x3620>
   14ab4:	ldr	r0, [sp, #20]
   14ab8:	ldr	r0, [r0]
   14abc:	cmp	r0, #0
   14ac0:	beq	14adc <__assert_fail@plt+0x3620>
   14ac4:	mov	r0, r5
   14ac8:	mov	r1, r9
   14acc:	mov	r2, r7
   14ad0:	bl	1346c <__assert_fail@plt+0x1fb0>
   14ad4:	mov	r6, r0
   14ad8:	b	14c6c <__assert_fail@plt+0x37b0>
   14adc:	mov	r6, r9
   14ae0:	b	14c6c <__assert_fail@plt+0x37b0>
   14ae4:	mov	r0, r6
   14ae8:	bl	12db4 <__assert_fail@plt+0x18f8>
   14aec:	ldr	r7, [sp, #28]
   14af0:	cmp	r9, #0
   14af4:	bne	14b10 <__assert_fail@plt+0x3654>
   14af8:	b	14b28 <__assert_fail@plt+0x366c>
   14afc:	mov	r0, r9
   14b00:	bl	12db4 <__assert_fail@plt+0x18f8>
   14b04:	cmp	r4, #0
   14b08:	mov	r9, r4
   14b0c:	beq	14b28 <__assert_fail@plt+0x366c>
   14b10:	ldrd	r4, [r9, #8]
   14b14:	cmp	r5, #0
   14b18:	beq	14afc <__assert_fail@plt+0x3640>
   14b1c:	mov	r0, r5
   14b20:	bl	11498 <closedir@plt>
   14b24:	b	14afc <__assert_fail@plt+0x3640>
   14b28:	ldr	r0, [r7, #12]
   14b2c:	bl	11498 <closedir@plt>
   14b30:	ldr	r1, [sp, #48]	; 0x30
   14b34:	mov	r0, #7
   14b38:	mov	r6, #0
   14b3c:	strh	r0, [r7, #56]	; 0x38
   14b40:	str	r6, [r7, #12]
   14b44:	ldr	r0, [r1, #48]	; 0x30
   14b48:	orr	r0, r0, #8192	; 0x2000
   14b4c:	str	r0, [r1, #48]	; 0x30
   14b50:	ldr	r1, [sp, #36]	; 0x24
   14b54:	mov	r0, #36	; 0x24
   14b58:	str	r0, [r1]
   14b5c:	b	14c6c <__assert_fail@plt+0x37b0>
   14b60:	mov	r0, r5
   14b64:	bl	14c78 <__assert_fail@plt+0x37bc>
   14b68:	cmp	r0, #0
   14b6c:	beq	149d4 <__assert_fail@plt+0x3518>
   14b70:	mov	r0, #7
   14b74:	mov	r6, #0
   14b78:	cmp	r9, #0
   14b7c:	strh	r0, [sl, #56]	; 0x38
   14b80:	ldr	r0, [r5, #48]	; 0x30
   14b84:	orr	r0, r0, #8192	; 0x2000
   14b88:	str	r0, [r5, #48]	; 0x30
   14b8c:	bne	14ba8 <__assert_fail@plt+0x36ec>
   14b90:	b	14c6c <__assert_fail@plt+0x37b0>
   14b94:	mov	r0, r9
   14b98:	bl	12db4 <__assert_fail@plt+0x18f8>
   14b9c:	cmp	r4, #0
   14ba0:	mov	r9, r4
   14ba4:	beq	14c6c <__assert_fail@plt+0x37b0>
   14ba8:	ldrd	r4, [r9, #8]
   14bac:	cmp	r5, #0
   14bb0:	beq	14b94 <__assert_fail@plt+0x36d8>
   14bb4:	mov	r0, r5
   14bb8:	bl	11498 <closedir@plt>
   14bbc:	b	14b94 <__assert_fail@plt+0x36d8>
   14bc0:	mov	r0, r4
   14bc4:	bl	12db4 <__assert_fail@plt+0x18f8>
   14bc8:	ldr	r1, [sp, #36]	; 0x24
   14bcc:	mov	r0, #0
   14bd0:	str	r0, [r5, #24]
   14bd4:	mov	r0, #36	; 0x24
   14bd8:	str	r0, [r1]
   14bdc:	b	14bf0 <__assert_fail@plt+0x3734>
   14be0:	ldr	r0, [r5, #24]
   14be4:	bl	12db4 <__assert_fail@plt+0x18f8>
   14be8:	mov	r0, #0
   14bec:	str	r0, [r5, #24]
   14bf0:	ldr	sl, [sp, #28]
   14bf4:	ldr	r0, [sp, #36]	; 0x24
   14bf8:	ldr	r4, [r0]
   14bfc:	mov	r0, r6
   14c00:	bl	12db4 <__assert_fail@plt+0x18f8>
   14c04:	ldr	r5, [sp, #48]	; 0x30
   14c08:	cmp	r9, #0
   14c0c:	bne	14c28 <__assert_fail@plt+0x376c>
   14c10:	b	14c40 <__assert_fail@plt+0x3784>
   14c14:	mov	r0, r9
   14c18:	bl	12db4 <__assert_fail@plt+0x18f8>
   14c1c:	cmp	r6, #0
   14c20:	mov	r9, r6
   14c24:	beq	14c40 <__assert_fail@plt+0x3784>
   14c28:	ldrd	r6, [r9, #8]
   14c2c:	cmp	r7, #0
   14c30:	beq	14c14 <__assert_fail@plt+0x3758>
   14c34:	mov	r0, r7
   14c38:	bl	11498 <closedir@plt>
   14c3c:	b	14c14 <__assert_fail@plt+0x3758>
   14c40:	ldr	r0, [sl, #12]
   14c44:	bl	11498 <closedir@plt>
   14c48:	mov	r0, #7
   14c4c:	mov	r6, #0
   14c50:	strh	r0, [sl, #56]	; 0x38
   14c54:	str	r6, [sl, #12]
   14c58:	ldr	r0, [r5, #48]	; 0x30
   14c5c:	orr	r0, r0, #8192	; 0x2000
   14c60:	str	r0, [r5, #48]	; 0x30
   14c64:	ldr	r0, [sp, #36]	; 0x24
   14c68:	str	r4, [r0]
   14c6c:	mov	r0, r6
   14c70:	sub	sp, fp, #28
   14c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c78:	push	{r4, r5, fp, lr}
   14c7c:	add	fp, sp, #8
   14c80:	mov	r5, r0
   14c84:	ldr	r0, [r0, #48]	; 0x30
   14c88:	mov	r4, #0
   14c8c:	tst	r0, #4
   14c90:	bne	14cd4 <__assert_fail@plt+0x3818>
   14c94:	tst	r0, #512	; 0x200
   14c98:	bne	14cb4 <__assert_fail@plt+0x37f8>
   14c9c:	ldr	r0, [r5, #28]
   14ca0:	bl	1142c <fchdir@plt>
   14ca4:	cmp	r0, #0
   14ca8:	mov	r4, r0
   14cac:	movwne	r4, #1
   14cb0:	b	14cd4 <__assert_fail@plt+0x3818>
   14cb4:	ldr	r1, [r5, #32]
   14cb8:	add	r0, r5, #60	; 0x3c
   14cbc:	bl	164f4 <__assert_fail@plt+0x5038>
   14cc0:	cmp	r0, #0
   14cc4:	bmi	14ccc <__assert_fail@plt+0x3810>
   14cc8:	bl	11480 <close@plt>
   14ccc:	mvn	r0, #99	; 0x63
   14cd0:	str	r0, [r5, #32]
   14cd4:	add	r5, r5, #60	; 0x3c
   14cd8:	mov	r0, r5
   14cdc:	bl	164ec <__assert_fail@plt+0x5030>
   14ce0:	cmp	r0, #0
   14ce4:	bne	14d00 <__assert_fail@plt+0x3844>
   14ce8:	mov	r0, r5
   14cec:	bl	16540 <__assert_fail@plt+0x5084>
   14cf0:	cmp	r0, #0
   14cf4:	bmi	14cd8 <__assert_fail@plt+0x381c>
   14cf8:	bl	11480 <close@plt>
   14cfc:	b	14cd8 <__assert_fail@plt+0x381c>
   14d00:	mov	r0, r4
   14d04:	pop	{r4, r5, fp, pc}
   14d08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d0c:	add	fp, sp, #24
   14d10:	mov	r6, r0
   14d14:	ldrh	r0, [r0, #48]	; 0x30
   14d18:	mov	r4, r1
   14d1c:	add	r5, r1, #64	; 0x40
   14d20:	movw	r1, #258	; 0x102
   14d24:	tst	r0, r1
   14d28:	beq	14da0 <__assert_fail@plt+0x38e4>
   14d2c:	mov	r0, #24
   14d30:	bl	19e6c <__assert_fail@plt+0x89b0>
   14d34:	mov	r8, #0
   14d38:	cmp	r0, #0
   14d3c:	beq	14dc0 <__assert_fail@plt+0x3904>
   14d40:	ldrd	r2, [r5]
   14d44:	mov	r7, r0
   14d48:	add	r0, r4, #160	; 0xa0
   14d4c:	stm	r7, {r2, r3}
   14d50:	add	r2, r7, #8
   14d54:	ldrd	r0, [r0]
   14d58:	stm	r2, {r0, r1, r4}
   14d5c:	mov	r1, r7
   14d60:	ldr	r0, [r6, #56]	; 0x38
   14d64:	bl	161e0 <__assert_fail@plt+0x4d24>
   14d68:	cmp	r0, r7
   14d6c:	beq	14d94 <__assert_fail@plt+0x38d8>
   14d70:	mov	r5, r0
   14d74:	mov	r0, r7
   14d78:	bl	12db4 <__assert_fail@plt+0x18f8>
   14d7c:	cmp	r5, #0
   14d80:	beq	14dc0 <__assert_fail@plt+0x3904>
   14d84:	ldr	r0, [r5, #16]
   14d88:	mov	r1, #2
   14d8c:	strh	r1, [r4, #56]	; 0x38
   14d90:	str	r0, [r4]
   14d94:	mov	r8, #1
   14d98:	mov	r0, r8
   14d9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14da0:	ldr	r0, [r6, #56]	; 0x38
   14da4:	mov	r1, r5
   14da8:	bl	19f90 <__assert_fail@plt+0x8ad4>
   14dac:	cmp	r0, #0
   14db0:	mov	r8, #1
   14db4:	movne	r0, #2
   14db8:	strhne	r0, [r4, #56]	; 0x38
   14dbc:	strne	r4, [r4]
   14dc0:	mov	r0, r8
   14dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dc8:	push	{fp, lr}
   14dcc:	mov	fp, sp
   14dd0:	cmp	r2, #5
   14dd4:	bcc	14dec <__assert_fail@plt+0x3930>
   14dd8:	bl	11378 <__errno_location@plt>
   14ddc:	mov	r1, #22
   14de0:	str	r1, [r0]
   14de4:	mov	r0, #1
   14de8:	pop	{fp, pc}
   14dec:	mov	r0, #0
   14df0:	strh	r2, [r1, #60]	; 0x3c
   14df4:	pop	{fp, pc}
   14df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dfc:	add	fp, sp, #28
   14e00:	sub	sp, sp, #4
   14e04:	mov	r9, r0
   14e08:	mvn	r0, #4096	; 0x1000
   14e0c:	tst	r1, r0
   14e10:	beq	14e28 <__assert_fail@plt+0x396c>
   14e14:	bl	11378 <__errno_location@plt>
   14e18:	mov	r1, #22
   14e1c:	mov	r5, #0
   14e20:	str	r1, [r0]
   14e24:	b	14f28 <__assert_fail@plt+0x3a6c>
   14e28:	ldr	r8, [r9]
   14e2c:	mov	r7, r1
   14e30:	bl	11378 <__errno_location@plt>
   14e34:	mov	r5, #0
   14e38:	mov	sl, r0
   14e3c:	str	r5, [r0]
   14e40:	ldrb	r0, [r9, #49]	; 0x31
   14e44:	tst	r0, #32
   14e48:	bne	14f28 <__assert_fail@plt+0x3a6c>
   14e4c:	ldrh	r0, [r8, #56]	; 0x38
   14e50:	cmp	r0, #1
   14e54:	beq	14e64 <__assert_fail@plt+0x39a8>
   14e58:	cmp	r0, #9
   14e5c:	ldreq	r5, [r8, #8]
   14e60:	b	14f28 <__assert_fail@plt+0x3a6c>
   14e64:	ldr	r6, [r9, #4]
   14e68:	cmp	r6, #0
   14e6c:	bne	14e88 <__assert_fail@plt+0x39cc>
   14e70:	b	14ea4 <__assert_fail@plt+0x39e8>
   14e74:	mov	r0, r6
   14e78:	bl	12db4 <__assert_fail@plt+0x18f8>
   14e7c:	cmp	r4, #0
   14e80:	mov	r6, r4
   14e84:	beq	14ea4 <__assert_fail@plt+0x39e8>
   14e88:	ldr	r1, [r6, #12]
   14e8c:	ldr	r4, [r6, #8]
   14e90:	cmp	r1, #0
   14e94:	beq	14e74 <__assert_fail@plt+0x39b8>
   14e98:	mov	r0, r1
   14e9c:	bl	11498 <closedir@plt>
   14ea0:	b	14e74 <__assert_fail@plt+0x39b8>
   14ea4:	mov	r4, #1
   14ea8:	cmp	r7, #4096	; 0x1000
   14eac:	bne	14ec0 <__assert_fail@plt+0x3a04>
   14eb0:	ldr	r0, [r9, #48]	; 0x30
   14eb4:	mov	r4, #2
   14eb8:	orr	r0, r0, #4096	; 0x1000
   14ebc:	str	r0, [r9, #48]	; 0x30
   14ec0:	ldr	r0, [r8, #48]	; 0x30
   14ec4:	cmp	r0, #0
   14ec8:	bne	14f14 <__assert_fail@plt+0x3a58>
   14ecc:	ldr	r0, [r8, #24]
   14ed0:	ldrb	r0, [r0]
   14ed4:	cmp	r0, #47	; 0x2f
   14ed8:	beq	14f14 <__assert_fail@plt+0x3a58>
   14edc:	ldr	r0, [r9, #48]	; 0x30
   14ee0:	tst	r0, #4
   14ee4:	bne	14f14 <__assert_fail@plt+0x3a58>
   14ee8:	mov	r1, #32768	; 0x8000
   14eec:	tst	r0, #512	; 0x200
   14ef0:	and	r1, r1, r0, lsl #11
   14ef4:	orr	r1, r1, #18688	; 0x4900
   14ef8:	orr	r2, r1, #524288	; 0x80000
   14efc:	bne	14f34 <__assert_fail@plt+0x3a78>
   14f00:	movw	r0, #46644	; 0xb634
   14f04:	mov	r1, r2
   14f08:	movt	r0, #1
   14f0c:	bl	1a2e0 <__assert_fail@plt+0x8e24>
   14f10:	b	14f44 <__assert_fail@plt+0x3a88>
   14f14:	mov	r0, r9
   14f18:	mov	r1, r4
   14f1c:	bl	141e8 <__assert_fail@plt+0x2d2c>
   14f20:	mov	r5, r0
   14f24:	str	r0, [r9, #4]
   14f28:	mov	r0, r5
   14f2c:	sub	sp, fp, #28
   14f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f34:	ldr	r0, [r9, #32]
   14f38:	movw	r1, #46644	; 0xb634
   14f3c:	movt	r1, #1
   14f40:	bl	165ec <__assert_fail@plt+0x5130>
   14f44:	mov	r8, r0
   14f48:	cmn	r0, #1
   14f4c:	ble	14f90 <__assert_fail@plt+0x3ad4>
   14f50:	mov	r0, r9
   14f54:	mov	r1, r4
   14f58:	bl	141e8 <__assert_fail@plt+0x2d2c>
   14f5c:	str	r0, [r9, #4]
   14f60:	ldrb	r0, [r9, #49]	; 0x31
   14f64:	tst	r0, #2
   14f68:	bne	14f9c <__assert_fail@plt+0x3ae0>
   14f6c:	mov	r0, r8
   14f70:	bl	1142c <fchdir@plt>
   14f74:	cmp	r0, #0
   14f78:	beq	14fcc <__assert_fail@plt+0x3b10>
   14f7c:	ldr	r4, [sl]
   14f80:	mov	r0, r8
   14f84:	bl	11480 <close@plt>
   14f88:	str	r4, [sl]
   14f8c:	b	14f28 <__assert_fail@plt+0x3a6c>
   14f90:	mov	r5, #0
   14f94:	str	r5, [r9, #4]
   14f98:	b	14f28 <__assert_fail@plt+0x3a6c>
   14f9c:	ldr	r1, [r9, #32]
   14fa0:	cmp	r1, r8
   14fa4:	bne	14fb0 <__assert_fail@plt+0x3af4>
   14fa8:	cmn	r1, #100	; 0x64
   14fac:	bne	14fdc <__assert_fail@plt+0x3b20>
   14fb0:	add	r0, r9, #60	; 0x3c
   14fb4:	bl	164f4 <__assert_fail@plt+0x5038>
   14fb8:	cmp	r0, #0
   14fbc:	bmi	14fc4 <__assert_fail@plt+0x3b08>
   14fc0:	bl	11480 <close@plt>
   14fc4:	str	r8, [r9, #32]
   14fc8:	b	14fd4 <__assert_fail@plt+0x3b18>
   14fcc:	mov	r0, r8
   14fd0:	bl	11480 <close@plt>
   14fd4:	ldr	r5, [r9, #4]
   14fd8:	b	14f28 <__assert_fail@plt+0x3a6c>
   14fdc:	bl	11474 <abort@plt>
   14fe0:	push	{fp, lr}
   14fe4:	mov	fp, sp
   14fe8:	mov	r2, r1
   14fec:	ldrd	r0, [r0, #8]
   14ff0:	mov	r3, #0
   14ff4:	bl	1a610 <__assert_fail@plt+0x9154>
   14ff8:	mov	r0, r2
   14ffc:	pop	{fp, pc}
   15000:	push	{r4, r5, fp, lr}
   15004:	add	fp, sp, #8
   15008:	ldrd	r2, [r1, #8]
   1500c:	ldrd	r4, [r0, #8]
   15010:	eor	r3, r5, r3
   15014:	eor	r2, r4, r2
   15018:	orrs	r2, r2, r3
   1501c:	mov	r2, #0
   15020:	bne	15040 <__assert_fail@plt+0x3b84>
   15024:	ldrd	r2, [r1]
   15028:	ldrd	r0, [r0]
   1502c:	eor	r1, r1, r3
   15030:	eor	r0, r0, r2
   15034:	orr	r0, r0, r1
   15038:	clz	r0, r0
   1503c:	lsr	r2, r0, #5
   15040:	mov	r0, r2
   15044:	pop	{r4, r5, fp, pc}
   15048:	push	{r4, r5, fp, lr}
   1504c:	add	fp, sp, #8
   15050:	ldr	r0, [r0]
   15054:	ldrd	r2, [r0, #160]	; 0xa0
   15058:	ldr	r0, [r1]
   1505c:	ldrd	r4, [r0, #160]	; 0xa0
   15060:	mov	r0, #0
   15064:	subs	r1, r4, r2
   15068:	sbcs	r1, r5, r3
   1506c:	movwcc	r0, #1
   15070:	subs	r1, r2, r4
   15074:	sbcs	r1, r3, r5
   15078:	subcc	r0, r0, #1
   1507c:	pop	{r4, r5, fp, pc}
   15080:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15084:	add	fp, sp, #24
   15088:	sub	sp, sp, #96	; 0x60
   1508c:	ldr	r7, [r0, #44]	; 0x2c
   15090:	mov	r4, r0
   15094:	mov	r5, #0
   15098:	ldrb	r0, [r7, #49]	; 0x31
   1509c:	tst	r0, #2
   150a0:	beq	1519c <__assert_fail@plt+0x3ce0>
   150a4:	ldr	r6, [r7, #52]	; 0x34
   150a8:	mov	r9, r1
   150ac:	cmp	r6, #0
   150b0:	bne	150f0 <__assert_fail@plt+0x3c34>
   150b4:	movw	r0, #11700	; 0x2db4
   150b8:	movw	r2, #20904	; 0x51a8
   150bc:	movw	r3, #20936	; 0x51c8
   150c0:	mov	r1, #0
   150c4:	mov	r8, #0
   150c8:	movt	r0, #1
   150cc:	movt	r2, #1
   150d0:	movt	r3, #1
   150d4:	str	r0, [sp]
   150d8:	mov	r0, #13
   150dc:	bl	1568c <__assert_fail@plt+0x41d0>
   150e0:	mov	r6, r0
   150e4:	cmp	r0, #0
   150e8:	str	r0, [r7, #52]	; 0x34
   150ec:	beq	15128 <__assert_fail@plt+0x3c6c>
   150f0:	ldrd	r0, [r4, #64]	; 0x40
   150f4:	str	r1, [sp, #12]
   150f8:	str	r0, [sp, #8]
   150fc:	add	r1, sp, #8
   15100:	mov	r0, r6
   15104:	bl	153d8 <__assert_fail@plt+0x3f1c>
   15108:	cmp	r0, #0
   1510c:	beq	15118 <__assert_fail@plt+0x3c5c>
   15110:	ldr	r5, [r0, #8]
   15114:	b	1519c <__assert_fail@plt+0x3ce0>
   15118:	mov	r8, #1
   1511c:	cmp	r9, #0
   15120:	bpl	15134 <__assert_fail@plt+0x3c78>
   15124:	b	1519c <__assert_fail@plt+0x3ce0>
   15128:	mov	r6, #0
   1512c:	cmp	r9, #0
   15130:	bmi	1519c <__assert_fail@plt+0x3ce0>
   15134:	add	r1, sp, #8
   15138:	mov	r0, r9
   1513c:	bl	11198 <fstatfs64@plt>
   15140:	cmp	r0, #0
   15144:	bne	1519c <__assert_fail@plt+0x3ce0>
   15148:	cmp	r8, #0
   1514c:	beq	15198 <__assert_fail@plt+0x3cdc>
   15150:	mov	r0, #16
   15154:	bl	19e6c <__assert_fail@plt+0x89b0>
   15158:	cmp	r0, #0
   1515c:	beq	15198 <__assert_fail@plt+0x3cdc>
   15160:	mov	r5, r0
   15164:	ldrd	r0, [r4, #64]	; 0x40
   15168:	ldr	r2, [sp, #8]
   1516c:	stm	r5, {r0, r1, r2}
   15170:	mov	r0, r6
   15174:	mov	r1, r5
   15178:	bl	161e0 <__assert_fail@plt+0x4d24>
   1517c:	cmp	r0, #0
   15180:	beq	15190 <__assert_fail@plt+0x3cd4>
   15184:	cmp	r0, r5
   15188:	beq	15198 <__assert_fail@plt+0x3cdc>
   1518c:	bl	11474 <abort@plt>
   15190:	mov	r0, r5
   15194:	bl	12db4 <__assert_fail@plt+0x18f8>
   15198:	ldr	r5, [sp, #8]
   1519c:	mov	r0, r5
   151a0:	sub	sp, fp, #24
   151a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151a8:	push	{fp, lr}
   151ac:	mov	fp, sp
   151b0:	mov	r2, r1
   151b4:	ldrd	r0, [r0]
   151b8:	mov	r3, #0
   151bc:	bl	1a610 <__assert_fail@plt+0x9154>
   151c0:	mov	r0, r2
   151c4:	pop	{fp, pc}
   151c8:	ldrd	r2, [r1]
   151cc:	ldrd	r0, [r0]
   151d0:	eor	r1, r1, r3
   151d4:	eor	r0, r0, r2
   151d8:	orr	r0, r0, r1
   151dc:	clz	r0, r0
   151e0:	lsr	r0, r0, #5
   151e4:	bx	lr
   151e8:	ldr	r0, [r0, #8]
   151ec:	bx	lr
   151f0:	ldr	r0, [r0, #12]
   151f4:	bx	lr
   151f8:	ldr	r0, [r0, #16]
   151fc:	bx	lr
   15200:	ldm	r0, {r2, ip}
   15204:	mov	r0, #0
   15208:	cmp	r2, ip
   1520c:	bxcs	lr
   15210:	mov	r0, #0
   15214:	b	15224 <__assert_fail@plt+0x3d68>
   15218:	add	r2, r2, #8
   1521c:	cmp	r2, ip
   15220:	bcs	15254 <__assert_fail@plt+0x3d98>
   15224:	ldr	r1, [r2]
   15228:	cmp	r1, #0
   1522c:	beq	15218 <__assert_fail@plt+0x3d5c>
   15230:	mov	r3, #0
   15234:	mov	r1, r2
   15238:	ldr	r1, [r1, #4]
   1523c:	add	r3, r3, #1
   15240:	cmp	r1, #0
   15244:	bne	15238 <__assert_fail@plt+0x3d7c>
   15248:	cmp	r3, r0
   1524c:	movhi	r0, r3
   15250:	b	15218 <__assert_fail@plt+0x3d5c>
   15254:	bx	lr
   15258:	push	{fp, lr}
   1525c:	mov	fp, sp
   15260:	ldm	r0, {r3, ip}
   15264:	mov	lr, #0
   15268:	mov	r1, #0
   1526c:	cmp	r3, ip
   15270:	bcs	152b4 <__assert_fail@plt+0x3df8>
   15274:	mov	r1, #0
   15278:	mov	lr, #0
   1527c:	b	1528c <__assert_fail@plt+0x3dd0>
   15280:	add	r3, r3, #8
   15284:	cmp	r3, ip
   15288:	bcs	152b4 <__assert_fail@plt+0x3df8>
   1528c:	ldr	r2, [r3]
   15290:	cmp	r2, #0
   15294:	beq	15280 <__assert_fail@plt+0x3dc4>
   15298:	mov	r2, r3
   1529c:	ldr	r2, [r2, #4]
   152a0:	add	r1, r1, #1
   152a4:	cmp	r2, #0
   152a8:	bne	1529c <__assert_fail@plt+0x3de0>
   152ac:	add	lr, lr, #1
   152b0:	b	15280 <__assert_fail@plt+0x3dc4>
   152b4:	ldr	r2, [r0, #12]
   152b8:	cmp	lr, r2
   152bc:	bne	152d4 <__assert_fail@plt+0x3e18>
   152c0:	ldr	r2, [r0, #16]
   152c4:	mov	r0, #1
   152c8:	cmp	r1, r2
   152cc:	movne	r0, #0
   152d0:	pop	{fp, pc}
   152d4:	mov	r0, #0
   152d8:	pop	{fp, pc}
   152dc:	nop	{0}
   152e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152e4:	add	fp, sp, #24
   152e8:	sub	sp, sp, #8
   152ec:	ldr	r6, [r0]
   152f0:	ldmib	r0, {r2, r7, r8}
   152f4:	ldr	r3, [r0, #16]
   152f8:	mov	r4, r1
   152fc:	mov	r5, #0
   15300:	cmp	r6, r2
   15304:	bcs	1534c <__assert_fail@plt+0x3e90>
   15308:	mov	r5, #0
   1530c:	b	1531c <__assert_fail@plt+0x3e60>
   15310:	add	r6, r6, #8
   15314:	cmp	r6, r2
   15318:	bcs	1534c <__assert_fail@plt+0x3e90>
   1531c:	ldr	r0, [r6]
   15320:	cmp	r0, #0
   15324:	beq	15310 <__assert_fail@plt+0x3e54>
   15328:	mov	r0, #0
   1532c:	mov	r1, r6
   15330:	ldr	r1, [r1, #4]
   15334:	add	r0, r0, #1
   15338:	cmp	r1, #0
   1533c:	bne	15330 <__assert_fail@plt+0x3e74>
   15340:	cmp	r0, r5
   15344:	movhi	r5, r0
   15348:	b	15310 <__assert_fail@plt+0x3e54>
   1534c:	movw	r2, #46696	; 0xb668
   15350:	mov	r0, r4
   15354:	mov	r1, #1
   15358:	movt	r2, #1
   1535c:	bl	113b4 <__fprintf_chk@plt>
   15360:	movw	r2, #46720	; 0xb680
   15364:	mov	r0, r4
   15368:	mov	r1, #1
   1536c:	mov	r3, r7
   15370:	movt	r2, #1
   15374:	bl	113b4 <__fprintf_chk@plt>
   15378:	vmov	s0, r8
   1537c:	vldr	d16, [pc, #76]	; 153d0 <__assert_fail@plt+0x3f14>
   15380:	movw	r2, #46744	; 0xb698
   15384:	mov	r0, r4
   15388:	mov	r1, #1
   1538c:	mov	r3, r8
   15390:	movt	r2, #1
   15394:	vcvt.f64.u32	d17, s0
   15398:	vmov	s0, r7
   1539c:	vcvt.f64.u32	d18, s0
   153a0:	vmul.f64	d16, d17, d16
   153a4:	vdiv.f64	d16, d16, d18
   153a8:	vstr	d16, [sp]
   153ac:	bl	113b4 <__fprintf_chk@plt>
   153b0:	movw	r2, #46777	; 0xb6b9
   153b4:	mov	r0, r4
   153b8:	mov	r1, #1
   153bc:	mov	r3, r5
   153c0:	movt	r2, #1
   153c4:	sub	sp, fp, #24
   153c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153cc:	b	113b4 <__fprintf_chk@plt>
   153d0:	andeq	r0, r0, r0
   153d4:	subsmi	r0, r9, r0
   153d8:	push	{r4, r5, r6, r7, fp, lr}
   153dc:	add	fp, sp, #16
   153e0:	mov	r4, r1
   153e4:	ldr	r1, [r0, #8]
   153e8:	ldr	r2, [r0, #24]
   153ec:	mov	r5, r0
   153f0:	mov	r0, r4
   153f4:	blx	r2
   153f8:	ldr	r1, [r5, #8]
   153fc:	cmp	r0, r1
   15400:	bcs	15468 <__assert_fail@plt+0x3fac>
   15404:	ldr	r7, [r5]
   15408:	mov	r6, #0
   1540c:	ldr	r1, [r7, r0, lsl #3]!
   15410:	cmp	r1, #0
   15414:	cmpne	r7, #0
   15418:	bne	15448 <__assert_fail@plt+0x3f8c>
   1541c:	mov	r0, r6
   15420:	pop	{r4, r5, r6, r7, fp, pc}
   15424:	ldr	r2, [r5, #28]
   15428:	mov	r0, r4
   1542c:	blx	r2
   15430:	cmp	r0, #0
   15434:	bne	1545c <__assert_fail@plt+0x3fa0>
   15438:	ldr	r7, [r7, #4]
   1543c:	cmp	r7, #0
   15440:	beq	1541c <__assert_fail@plt+0x3f60>
   15444:	ldr	r1, [r7]
   15448:	cmp	r1, r4
   1544c:	bne	15424 <__assert_fail@plt+0x3f68>
   15450:	mov	r6, r4
   15454:	mov	r0, r6
   15458:	pop	{r4, r5, r6, r7, fp, pc}
   1545c:	ldr	r6, [r7]
   15460:	mov	r0, r6
   15464:	pop	{r4, r5, r6, r7, fp, pc}
   15468:	bl	11474 <abort@plt>
   1546c:	push	{fp, lr}
   15470:	mov	fp, sp
   15474:	ldr	r1, [r0, #16]
   15478:	cmp	r1, #0
   1547c:	beq	1549c <__assert_fail@plt+0x3fe0>
   15480:	ldm	r0, {r1, r2}
   15484:	cmp	r1, r2
   15488:	bcs	154a4 <__assert_fail@plt+0x3fe8>
   1548c:	ldr	r0, [r1], #8
   15490:	cmp	r0, #0
   15494:	beq	15484 <__assert_fail@plt+0x3fc8>
   15498:	pop	{fp, pc}
   1549c:	mov	r0, #0
   154a0:	pop	{fp, pc}
   154a4:	bl	11474 <abort@plt>
   154a8:	push	{r4, r5, fp, lr}
   154ac:	add	fp, sp, #8
   154b0:	mov	r5, r1
   154b4:	ldr	r1, [r0, #8]
   154b8:	ldr	r2, [r0, #24]
   154bc:	mov	r4, r0
   154c0:	mov	r0, r5
   154c4:	blx	r2
   154c8:	ldr	r1, [r4, #8]
   154cc:	cmp	r0, r1
   154d0:	bcs	15534 <__assert_fail@plt+0x4078>
   154d4:	ldr	r1, [r4]
   154d8:	add	r2, r1, r0, lsl #3
   154dc:	ldr	r3, [r2]
   154e0:	ldr	r2, [r2, #4]
   154e4:	cmp	r3, r5
   154e8:	beq	154f8 <__assert_fail@plt+0x403c>
   154ec:	cmp	r2, #0
   154f0:	bne	154dc <__assert_fail@plt+0x4020>
   154f4:	b	15508 <__assert_fail@plt+0x404c>
   154f8:	cmp	r2, #0
   154fc:	beq	15508 <__assert_fail@plt+0x404c>
   15500:	ldr	r0, [r2]
   15504:	pop	{r4, r5, fp, pc}
   15508:	ldr	r2, [r4, #4]
   1550c:	add	r0, r1, r0, lsl #3
   15510:	add	r1, r0, #8
   15514:	cmp	r1, r2
   15518:	bcs	1552c <__assert_fail@plt+0x4070>
   1551c:	ldr	r0, [r1], #8
   15520:	cmp	r0, #0
   15524:	beq	15514 <__assert_fail@plt+0x4058>
   15528:	pop	{r4, r5, fp, pc}
   1552c:	mov	r0, #0
   15530:	pop	{r4, r5, fp, pc}
   15534:	bl	11474 <abort@plt>
   15538:	push	{r4, r5, fp, lr}
   1553c:	add	fp, sp, #8
   15540:	ldm	r0, {r5, lr}
   15544:	mov	ip, r0
   15548:	mov	r0, #0
   1554c:	cmp	r5, lr
   15550:	popcs	{r4, r5, fp, pc}
   15554:	mov	r0, #0
   15558:	b	1556c <__assert_fail@plt+0x40b0>
   1555c:	ldr	lr, [ip, #4]
   15560:	add	r5, r5, #8
   15564:	cmp	r5, lr
   15568:	bcs	155a4 <__assert_fail@plt+0x40e8>
   1556c:	ldr	r3, [r5]
   15570:	cmp	r3, #0
   15574:	cmpne	r5, #0
   15578:	beq	15560 <__assert_fail@plt+0x40a4>
   1557c:	mov	r3, r5
   15580:	cmp	r0, r2
   15584:	bcs	155a4 <__assert_fail@plt+0x40e8>
   15588:	ldr	r4, [r3]
   1558c:	str	r4, [r1, r0, lsl #2]
   15590:	add	r0, r0, #1
   15594:	ldr	r3, [r3, #4]
   15598:	cmp	r3, #0
   1559c:	bne	15580 <__assert_fail@plt+0x40c4>
   155a0:	b	1555c <__assert_fail@plt+0x40a0>
   155a4:	pop	{r4, r5, fp, pc}
   155a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   155ac:	add	fp, sp, #24
   155b0:	mov	r5, r1
   155b4:	ldr	r4, [r0]
   155b8:	ldr	r1, [r0, #4]
   155bc:	mov	r6, #0
   155c0:	cmp	r4, r1
   155c4:	bcs	15630 <__assert_fail@plt+0x4174>
   155c8:	mov	r9, r2
   155cc:	mov	r8, r0
   155d0:	mov	r6, #0
   155d4:	b	155e8 <__assert_fail@plt+0x412c>
   155d8:	ldr	r1, [r8, #4]
   155dc:	add	r4, r4, #8
   155e0:	cmp	r4, r1
   155e4:	bcs	15630 <__assert_fail@plt+0x4174>
   155e8:	ldr	r0, [r4]
   155ec:	cmp	r0, #0
   155f0:	cmpne	r4, #0
   155f4:	beq	155dc <__assert_fail@plt+0x4120>
   155f8:	mov	r1, r9
   155fc:	blx	r5
   15600:	cmp	r0, #0
   15604:	beq	15630 <__assert_fail@plt+0x4174>
   15608:	mov	r7, r4
   1560c:	ldr	r7, [r7, #4]
   15610:	add	r6, r6, #1
   15614:	cmp	r7, #0
   15618:	beq	155d8 <__assert_fail@plt+0x411c>
   1561c:	ldr	r0, [r7]
   15620:	mov	r1, r9
   15624:	blx	r5
   15628:	cmp	r0, #0
   1562c:	bne	1560c <__assert_fail@plt+0x4150>
   15630:	mov	r0, r6
   15634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15638:	ldrb	r2, [r0]
   1563c:	cmp	r2, #0
   15640:	moveq	r0, #0
   15644:	bxeq	lr
   15648:	add	r3, r0, #1
   1564c:	mov	r0, #0
   15650:	rsb	r0, r0, r0, lsl #5
   15654:	uxtab	r0, r0, r2
   15658:	udiv	r2, r0, r1
   1565c:	mls	r0, r2, r1, r0
   15660:	ldrb	r2, [r3], #1
   15664:	cmp	r2, #0
   15668:	bne	15650 <__assert_fail@plt+0x4194>
   1566c:	bx	lr
   15670:	movw	r1, #46808	; 0xb6d8
   15674:	movt	r1, #1
   15678:	vld1.32	{d16-d17}, [r1]!
   1567c:	ldr	r1, [r1]
   15680:	vst1.32	{d16-d17}, [r0]!
   15684:	str	r1, [r0]
   15688:	bx	lr
   1568c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15690:	add	fp, sp, #24
   15694:	movw	r9, #22708	; 0x58b4
   15698:	cmp	r3, #0
   1569c:	movw	r5, #22688	; 0x58a0
   156a0:	mov	r6, r0
   156a4:	mov	r0, #40	; 0x28
   156a8:	mov	r7, r1
   156ac:	movt	r9, #1
   156b0:	movne	r9, r3
   156b4:	cmp	r2, #0
   156b8:	movt	r5, #1
   156bc:	movne	r5, r2
   156c0:	bl	19e6c <__assert_fail@plt+0x89b0>
   156c4:	mov	r8, #0
   156c8:	cmp	r0, #0
   156cc:	beq	15888 <__assert_fail@plt+0x43cc>
   156d0:	mov	r4, r0
   156d4:	movw	r0, #46808	; 0xb6d8
   156d8:	cmp	r7, #0
   156dc:	movt	r0, #1
   156e0:	moveq	r7, r0
   156e4:	cmp	r7, r0
   156e8:	str	r7, [r4, #20]
   156ec:	beq	15768 <__assert_fail@plt+0x42ac>
   156f0:	vldr	s2, [pc, #408]	; 15890 <__assert_fail@plt+0x43d4>
   156f4:	vldr	s0, [r7, #8]
   156f8:	vcmpe.f32	s0, s2
   156fc:	vmrs	APSR_nzcv, fpscr
   15700:	ble	15814 <__assert_fail@plt+0x4358>
   15704:	vldr	s4, [pc, #392]	; 15894 <__assert_fail@plt+0x43d8>
   15708:	vcmpe.f32	s0, s4
   1570c:	vmrs	APSR_nzcv, fpscr
   15710:	bpl	15814 <__assert_fail@plt+0x4358>
   15714:	vldr	s4, [pc, #380]	; 15898 <__assert_fail@plt+0x43dc>
   15718:	vldr	s6, [r7, #12]
   1571c:	vcmpe.f32	s6, s4
   15720:	vmrs	APSR_nzcv, fpscr
   15724:	ble	15814 <__assert_fail@plt+0x4358>
   15728:	vldr	s4, [r7]
   1572c:	vcmpe.f32	s4, #0.0
   15730:	vmrs	APSR_nzcv, fpscr
   15734:	blt	15814 <__assert_fail@plt+0x4358>
   15738:	vadd.f32	s2, s4, s2
   1573c:	vcmpe.f32	s2, s0
   15740:	vmrs	APSR_nzcv, fpscr
   15744:	bpl	15814 <__assert_fail@plt+0x4358>
   15748:	vldr	s0, [r7, #4]
   1574c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15750:	vcmpe.f32	s0, s4
   15754:	vmrs	APSR_nzcv, fpscr
   15758:	bhi	15814 <__assert_fail@plt+0x4358>
   1575c:	vcmpe.f32	s2, s0
   15760:	vmrs	APSR_nzcv, fpscr
   15764:	bpl	15814 <__assert_fail@plt+0x4358>
   15768:	ldrb	r0, [r7, #16]
   1576c:	cmp	r0, #0
   15770:	bne	1579c <__assert_fail@plt+0x42e0>
   15774:	vmov	s2, r6
   15778:	vldr	s0, [r7, #8]
   1577c:	vldr	s4, [pc, #280]	; 1589c <__assert_fail@plt+0x43e0>
   15780:	vcvt.f32.u32	s2, s2
   15784:	vdiv.f32	s2, s2, s0
   15788:	vcvt.u32.f32	s0, s2
   1578c:	vcmpe.f32	s2, s4
   15790:	vmrs	APSR_nzcv, fpscr
   15794:	bge	15824 <__assert_fail@plt+0x4368>
   15798:	vmov	r6, s0
   1579c:	cmp	r6, #10
   157a0:	movls	r6, #10
   157a4:	orr	r0, r6, #1
   157a8:	cmn	r0, #1
   157ac:	beq	15824 <__assert_fail@plt+0x4368>
   157b0:	ldr	r6, [fp, #8]
   157b4:	mov	r1, #3
   157b8:	cmp	r0, #10
   157bc:	bcc	157f4 <__assert_fail@plt+0x4338>
   157c0:	mov	r1, #3
   157c4:	mov	r3, #9
   157c8:	mov	r2, #12
   157cc:	udiv	r7, r0, r1
   157d0:	mls	r7, r7, r1, r0
   157d4:	cmp	r7, #0
   157d8:	beq	157f4 <__assert_fail@plt+0x4338>
   157dc:	add	r3, r3, r2
   157e0:	add	r2, r2, #8
   157e4:	add	r1, r1, #2
   157e8:	add	r3, r3, #4
   157ec:	cmp	r3, r0
   157f0:	bcc	157cc <__assert_fail@plt+0x4310>
   157f4:	udiv	r2, r0, r1
   157f8:	mls	r1, r2, r1, r0
   157fc:	cmp	r1, #0
   15800:	bne	1581c <__assert_fail@plt+0x4360>
   15804:	add	r0, r0, #2
   15808:	cmn	r0, #1
   1580c:	bne	157b4 <__assert_fail@plt+0x42f8>
   15810:	b	15824 <__assert_fail@plt+0x4368>
   15814:	str	r0, [r4, #20]
   15818:	b	1582c <__assert_fail@plt+0x4370>
   1581c:	cmp	r0, #536870912	; 0x20000000
   15820:	bcc	1583c <__assert_fail@plt+0x4380>
   15824:	mov	r0, #0
   15828:	str	r0, [r4, #8]
   1582c:	mov	r0, r4
   15830:	bl	12db4 <__assert_fail@plt+0x18f8>
   15834:	mov	r0, r8
   15838:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1583c:	cmp	r0, #0
   15840:	str	r0, [r4, #8]
   15844:	beq	1582c <__assert_fail@plt+0x4370>
   15848:	mov	r1, #8
   1584c:	bl	19e18 <__assert_fail@plt+0x895c>
   15850:	cmp	r0, #0
   15854:	str	r0, [r4]
   15858:	beq	1582c <__assert_fail@plt+0x4370>
   1585c:	mov	r1, #0
   15860:	str	r5, [r4, #24]
   15864:	str	r9, [r4, #28]
   15868:	str	r6, [r4, #32]
   1586c:	mov	r8, r4
   15870:	str	r1, [r4, #36]	; 0x24
   15874:	str	r1, [r4, #12]
   15878:	str	r1, [r4, #16]
   1587c:	ldr	r1, [r4, #8]
   15880:	add	r0, r0, r1, lsl #3
   15884:	str	r0, [r4, #4]
   15888:	mov	r0, r8
   1588c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15890:	stclcc	12, cr12, [ip, #820]	; 0x334
   15894:	svccc	0x00666666
   15898:	svccc	0x008ccccd
   1589c:	svcmi	0x00800000
   158a0:	ror	r2, r0, #3
   158a4:	udiv	r2, r2, r1
   158a8:	mul	r1, r2, r1
   158ac:	rsb	r0, r1, r0, ror #3
   158b0:	bx	lr
   158b4:	sub	r0, r0, r1
   158b8:	clz	r0, r0
   158bc:	lsr	r0, r0, #5
   158c0:	bx	lr
   158c4:	push	{r4, r5, r6, r7, fp, lr}
   158c8:	add	fp, sp, #16
   158cc:	mov	r4, r0
   158d0:	ldr	r5, [r0]
   158d4:	ldr	r0, [r0, #4]
   158d8:	cmp	r5, r0
   158dc:	bcs	15980 <__assert_fail@plt+0x44c4>
   158e0:	mov	r6, #0
   158e4:	b	15900 <__assert_fail@plt+0x4444>
   158e8:	str	r6, [r5]
   158ec:	str	r6, [r5, #4]
   158f0:	ldr	r0, [r4, #4]
   158f4:	add	r5, r5, #8
   158f8:	cmp	r5, r0
   158fc:	bcs	15980 <__assert_fail@plt+0x44c4>
   15900:	ldr	r1, [r5]
   15904:	cmp	r1, #0
   15908:	beq	158f4 <__assert_fail@plt+0x4438>
   1590c:	ldr	r1, [r4, #32]
   15910:	ldr	r7, [r5, #4]
   15914:	cmp	r1, #0
   15918:	mov	r0, r1
   1591c:	movwne	r0, #1
   15920:	cmp	r7, #0
   15924:	bne	15968 <__assert_fail@plt+0x44ac>
   15928:	cmp	r0, #0
   1592c:	beq	158e8 <__assert_fail@plt+0x442c>
   15930:	ldr	r0, [r5]
   15934:	blx	r1
   15938:	b	158e8 <__assert_fail@plt+0x442c>
   1593c:	str	r6, [r7]
   15940:	cmp	r1, #0
   15944:	ldr	r2, [r7, #4]
   15948:	ldr	r0, [r4, #36]	; 0x24
   1594c:	str	r0, [r7, #4]
   15950:	mov	r0, r1
   15954:	str	r7, [r4, #36]	; 0x24
   15958:	movwne	r0, #1
   1595c:	cmp	r2, #0
   15960:	mov	r7, r2
   15964:	beq	15928 <__assert_fail@plt+0x446c>
   15968:	tst	r0, #1
   1596c:	beq	1593c <__assert_fail@plt+0x4480>
   15970:	ldr	r0, [r7]
   15974:	blx	r1
   15978:	ldr	r1, [r4, #32]
   1597c:	b	1593c <__assert_fail@plt+0x4480>
   15980:	mov	r0, #0
   15984:	str	r0, [r4, #12]
   15988:	str	r0, [r4, #16]
   1598c:	pop	{r4, r5, r6, r7, fp, pc}
   15990:	push	{r4, r5, r6, sl, fp, lr}
   15994:	add	fp, sp, #16
   15998:	mov	r4, r0
   1599c:	ldr	r0, [r0, #32]
   159a0:	cmp	r0, #0
   159a4:	beq	15a18 <__assert_fail@plt+0x455c>
   159a8:	ldr	r0, [r4, #16]
   159ac:	cmp	r0, #0
   159b0:	beq	15a18 <__assert_fail@plt+0x455c>
   159b4:	ldr	r5, [r4]
   159b8:	ldr	r1, [r4, #4]
   159bc:	cmp	r5, r1
   159c0:	bcc	159d8 <__assert_fail@plt+0x451c>
   159c4:	b	15a18 <__assert_fail@plt+0x455c>
   159c8:	ldr	r1, [r4, #4]
   159cc:	add	r5, r5, #8
   159d0:	cmp	r5, r1
   159d4:	bcs	15a18 <__assert_fail@plt+0x455c>
   159d8:	ldr	r0, [r5]
   159dc:	cmp	r0, #0
   159e0:	cmpne	r5, #0
   159e4:	beq	159cc <__assert_fail@plt+0x4510>
   159e8:	ldr	r1, [r4, #32]
   159ec:	blx	r1
   159f0:	ldr	r6, [r5, #4]
   159f4:	cmp	r6, #0
   159f8:	beq	159c8 <__assert_fail@plt+0x450c>
   159fc:	ldr	r1, [r4, #32]
   15a00:	ldr	r0, [r6]
   15a04:	blx	r1
   15a08:	ldr	r6, [r6, #4]
   15a0c:	cmp	r6, #0
   15a10:	bne	159fc <__assert_fail@plt+0x4540>
   15a14:	b	159c8 <__assert_fail@plt+0x450c>
   15a18:	ldr	r5, [r4]
   15a1c:	ldr	r1, [r4, #4]
   15a20:	cmp	r5, r1
   15a24:	bcc	15a38 <__assert_fail@plt+0x457c>
   15a28:	b	15a60 <__assert_fail@plt+0x45a4>
   15a2c:	add	r5, r5, #8
   15a30:	cmp	r5, r1
   15a34:	bcs	15a60 <__assert_fail@plt+0x45a4>
   15a38:	ldr	r0, [r5, #4]
   15a3c:	cmp	r0, #0
   15a40:	beq	15a2c <__assert_fail@plt+0x4570>
   15a44:	ldr	r6, [r0, #4]
   15a48:	bl	12db4 <__assert_fail@plt+0x18f8>
   15a4c:	cmp	r6, #0
   15a50:	mov	r0, r6
   15a54:	bne	15a44 <__assert_fail@plt+0x4588>
   15a58:	ldr	r1, [r4, #4]
   15a5c:	b	15a2c <__assert_fail@plt+0x4570>
   15a60:	ldr	r0, [r4, #36]	; 0x24
   15a64:	cmp	r0, #0
   15a68:	beq	15a80 <__assert_fail@plt+0x45c4>
   15a6c:	ldr	r5, [r0, #4]
   15a70:	bl	12db4 <__assert_fail@plt+0x18f8>
   15a74:	cmp	r5, #0
   15a78:	mov	r0, r5
   15a7c:	bne	15a6c <__assert_fail@plt+0x45b0>
   15a80:	ldr	r0, [r4]
   15a84:	bl	12db4 <__assert_fail@plt+0x18f8>
   15a88:	mov	r0, r4
   15a8c:	pop	{r4, r5, r6, sl, fp, lr}
   15a90:	b	12db4 <__assert_fail@plt+0x18f8>
   15a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a98:	add	fp, sp, #28
   15a9c:	sub	sp, sp, #44	; 0x2c
   15aa0:	mov	r7, r0
   15aa4:	mov	r4, r0
   15aa8:	ldr	r0, [r7, #20]!
   15aac:	ldrb	r2, [r0, #16]
   15ab0:	cmp	r2, #0
   15ab4:	bne	15ae4 <__assert_fail@plt+0x4628>
   15ab8:	vmov	s2, r1
   15abc:	vldr	s0, [r0, #8]
   15ac0:	vldr	s4, [pc, #564]	; 15cfc <__assert_fail@plt+0x4840>
   15ac4:	mov	r5, #0
   15ac8:	vcvt.f32.u32	s2, s2
   15acc:	vdiv.f32	s2, s2, s0
   15ad0:	vcvt.u32.f32	s0, s2
   15ad4:	vcmpe.f32	s2, s4
   15ad8:	vmrs	APSR_nzcv, fpscr
   15adc:	bge	15cec <__assert_fail@plt+0x4830>
   15ae0:	vmov	r1, s0
   15ae4:	cmp	r1, #10
   15ae8:	mov	r5, #0
   15aec:	movls	r1, #10
   15af0:	orr	r6, r1, #1
   15af4:	cmn	r6, #1
   15af8:	beq	15cec <__assert_fail@plt+0x4830>
   15afc:	mov	r0, #3
   15b00:	cmp	r6, #10
   15b04:	bcc	15b3c <__assert_fail@plt+0x4680>
   15b08:	mov	r0, #3
   15b0c:	mov	r2, #9
   15b10:	mov	r1, #12
   15b14:	udiv	r3, r6, r0
   15b18:	mls	r3, r3, r0, r6
   15b1c:	cmp	r3, #0
   15b20:	beq	15b3c <__assert_fail@plt+0x4680>
   15b24:	add	r2, r2, r1
   15b28:	add	r1, r1, #8
   15b2c:	add	r0, r0, #2
   15b30:	add	r2, r2, #4
   15b34:	cmp	r2, r6
   15b38:	bcc	15b14 <__assert_fail@plt+0x4658>
   15b3c:	udiv	r1, r6, r0
   15b40:	mls	r0, r1, r0, r6
   15b44:	cmp	r0, #0
   15b48:	bne	15b5c <__assert_fail@plt+0x46a0>
   15b4c:	add	r6, r6, #2
   15b50:	cmn	r6, #1
   15b54:	bne	15afc <__assert_fail@plt+0x4640>
   15b58:	b	15cec <__assert_fail@plt+0x4830>
   15b5c:	sub	r0, r6, #1
   15b60:	cmn	r0, #-536870910	; 0xe0000002
   15b64:	bhi	15cec <__assert_fail@plt+0x4830>
   15b68:	ldr	r0, [r4, #8]
   15b6c:	cmp	r6, r0
   15b70:	bne	15b7c <__assert_fail@plt+0x46c0>
   15b74:	mov	r5, #1
   15b78:	b	15cec <__assert_fail@plt+0x4830>
   15b7c:	mov	r0, r6
   15b80:	mov	r1, #8
   15b84:	bl	19e18 <__assert_fail@plt+0x895c>
   15b88:	cmp	r0, #0
   15b8c:	str	r0, [sp, #4]
   15b90:	beq	15cec <__assert_fail@plt+0x4830>
   15b94:	add	r0, r0, r6, lsl #3
   15b98:	mov	r1, #0
   15b9c:	add	r5, sp, #4
   15ba0:	mov	sl, r4
   15ba4:	mov	r2, #0
   15ba8:	str	r1, [sp, #20]
   15bac:	str	r1, [sp, #16]
   15bb0:	str	r6, [sp, #12]
   15bb4:	mov	r1, r4
   15bb8:	str	r0, [sp, #8]
   15bbc:	add	r0, r5, #20
   15bc0:	vld1.32	{d16-d17}, [r7]
   15bc4:	vst1.32	{d16-d17}, [r0]
   15bc8:	ldr	r0, [sl, #36]!	; 0x24
   15bcc:	str	r0, [sp, #40]	; 0x28
   15bd0:	mov	r0, r5
   15bd4:	bl	15d00 <__assert_fail@plt+0x4844>
   15bd8:	cmp	r0, #0
   15bdc:	beq	15c04 <__assert_fail@plt+0x4748>
   15be0:	ldr	r0, [r4]
   15be4:	bl	12db4 <__assert_fail@plt+0x18f8>
   15be8:	mov	r0, #36	; 0x24
   15bec:	vld1.32	{d16-d17}, [r5], r0
   15bf0:	vst1.32	{d16-d17}, [r4], r0
   15bf4:	ldr	r0, [r5]
   15bf8:	mov	r5, #1
   15bfc:	str	r0, [r4]
   15c00:	b	15cec <__assert_fail@plt+0x4830>
   15c04:	ldr	r0, [sp, #40]	; 0x28
   15c08:	str	r0, [sl]
   15c0c:	ldr	r0, [sp, #8]
   15c10:	ldr	r8, [sp, #4]
   15c14:	cmp	r8, r0
   15c18:	str	r0, [sp]
   15c1c:	bcs	15cc8 <__assert_fail@plt+0x480c>
   15c20:	mov	r9, #0
   15c24:	b	15c3c <__assert_fail@plt+0x4780>
   15c28:	str	r9, [r8, #4]
   15c2c:	ldr	r0, [sp]
   15c30:	add	r8, r8, #8
   15c34:	cmp	r8, r0
   15c38:	bcs	15cc8 <__assert_fail@plt+0x480c>
   15c3c:	ldr	r0, [r8]
   15c40:	cmp	r0, #0
   15c44:	beq	15c2c <__assert_fail@plt+0x4770>
   15c48:	ldr	r6, [r8, #4]
   15c4c:	cmp	r6, #0
   15c50:	beq	15c28 <__assert_fail@plt+0x476c>
   15c54:	ldr	r1, [r4, #8]
   15c58:	b	15c7c <__assert_fail@plt+0x47c0>
   15c5c:	add	r0, r3, r0, lsl #3
   15c60:	add	r0, r0, #4
   15c64:	ldr	r3, [r0]
   15c68:	cmp	r2, #0
   15c6c:	str	r3, [r6, #4]
   15c70:	str	r6, [r0]
   15c74:	mov	r6, r2
   15c78:	beq	15c28 <__assert_fail@plt+0x476c>
   15c7c:	ldr	r5, [r6]
   15c80:	ldr	r2, [r4, #24]
   15c84:	mov	r0, r5
   15c88:	blx	r2
   15c8c:	ldr	r1, [r4, #8]
   15c90:	cmp	r0, r1
   15c94:	bcs	15cf8 <__assert_fail@plt+0x483c>
   15c98:	ldr	r3, [r4]
   15c9c:	ldr	r2, [r6, #4]
   15ca0:	ldr	r7, [r3, r0, lsl #3]
   15ca4:	cmp	r7, #0
   15ca8:	bne	15c5c <__assert_fail@plt+0x47a0>
   15cac:	str	r5, [r3, r0, lsl #3]
   15cb0:	ldr	r0, [r4, #12]
   15cb4:	add	r0, r0, #1
   15cb8:	str	r0, [r4, #12]
   15cbc:	mov	r0, sl
   15cc0:	str	r9, [r6]
   15cc4:	b	15c64 <__assert_fail@plt+0x47a8>
   15cc8:	add	r1, sp, #4
   15ccc:	mov	r0, r4
   15cd0:	mov	r2, #0
   15cd4:	mov	r5, #0
   15cd8:	bl	15d00 <__assert_fail@plt+0x4844>
   15cdc:	cmp	r0, #0
   15ce0:	beq	15cf8 <__assert_fail@plt+0x483c>
   15ce4:	ldr	r0, [sp, #4]
   15ce8:	bl	12db4 <__assert_fail@plt+0x18f8>
   15cec:	mov	r0, r5
   15cf0:	sub	sp, fp, #28
   15cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cf8:	bl	11474 <abort@plt>
   15cfc:	svcmi	0x00800000
   15d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d04:	add	fp, sp, #28
   15d08:	sub	sp, sp, #12
   15d0c:	ldr	sl, [r1]
   15d10:	str	r1, [sp, #8]
   15d14:	ldr	r1, [r1, #4]
   15d18:	mov	r7, r0
   15d1c:	mov	r0, #1
   15d20:	str	r2, [sp, #4]
   15d24:	cmp	sl, r1
   15d28:	bcs	15e84 <__assert_fail@plt+0x49c8>
   15d2c:	add	r8, r7, #36	; 0x24
   15d30:	mov	r9, #0
   15d34:	b	15d70 <__assert_fail@plt+0x48b4>
   15d38:	str	r4, [r6, r5, lsl #3]
   15d3c:	ldr	r0, [r7, #12]
   15d40:	add	r0, r0, #1
   15d44:	str	r0, [r7, #12]
   15d48:	ldr	r1, [sp, #8]
   15d4c:	str	r9, [sl]
   15d50:	ldr	r0, [r1, #12]
   15d54:	sub	r0, r0, #1
   15d58:	str	r0, [r1, #12]
   15d5c:	ldr	r0, [sp, #8]
   15d60:	add	sl, sl, #8
   15d64:	ldr	r0, [r0, #4]
   15d68:	cmp	sl, r0
   15d6c:	bcs	15e80 <__assert_fail@plt+0x49c4>
   15d70:	ldr	r4, [sl]
   15d74:	cmp	r4, #0
   15d78:	beq	15d5c <__assert_fail@plt+0x48a0>
   15d7c:	ldr	r5, [sl, #4]
   15d80:	cmp	r5, #0
   15d84:	beq	15e00 <__assert_fail@plt+0x4944>
   15d88:	ldr	r1, [r7, #8]
   15d8c:	b	15dc0 <__assert_fail@plt+0x4904>
   15d90:	str	r4, [r3, r0, lsl #3]
   15d94:	ldr	r0, [r7, #12]
   15d98:	add	r0, r0, #1
   15d9c:	str	r0, [r7, #12]
   15da0:	mov	r0, r8
   15da4:	str	r9, [r5]
   15da8:	ldr	r3, [r0]
   15dac:	cmp	r2, #0
   15db0:	str	r3, [r5, #4]
   15db4:	str	r5, [r0]
   15db8:	mov	r5, r2
   15dbc:	beq	15dfc <__assert_fail@plt+0x4940>
   15dc0:	ldr	r4, [r5]
   15dc4:	ldr	r2, [r7, #24]
   15dc8:	mov	r0, r4
   15dcc:	blx	r2
   15dd0:	ldr	r1, [r7, #8]
   15dd4:	cmp	r0, r1
   15dd8:	bcs	15e98 <__assert_fail@plt+0x49dc>
   15ddc:	ldr	r3, [r7]
   15de0:	ldr	r2, [r5, #4]
   15de4:	ldr	r6, [r3, r0, lsl #3]
   15de8:	cmp	r6, #0
   15dec:	beq	15d90 <__assert_fail@plt+0x48d4>
   15df0:	add	r0, r3, r0, lsl #3
   15df4:	add	r0, r0, #4
   15df8:	b	15da8 <__assert_fail@plt+0x48ec>
   15dfc:	ldr	r4, [sl]
   15e00:	ldr	r0, [sp, #4]
   15e04:	str	r9, [sl, #4]
   15e08:	cmp	r0, #0
   15e0c:	bne	15d5c <__assert_fail@plt+0x48a0>
   15e10:	ldr	r1, [r7, #8]
   15e14:	ldr	r2, [r7, #24]
   15e18:	mov	r0, r4
   15e1c:	blx	r2
   15e20:	mov	r5, r0
   15e24:	ldr	r0, [r7, #8]
   15e28:	cmp	r5, r0
   15e2c:	bcs	15e98 <__assert_fail@plt+0x49dc>
   15e30:	ldr	r6, [r7]
   15e34:	ldr	r0, [r6, r5, lsl #3]
   15e38:	cmp	r0, #0
   15e3c:	beq	15d38 <__assert_fail@plt+0x487c>
   15e40:	ldr	r0, [r8]
   15e44:	cmp	r0, #0
   15e48:	beq	15e58 <__assert_fail@plt+0x499c>
   15e4c:	ldr	r1, [r0, #4]
   15e50:	str	r1, [r8]
   15e54:	b	15e68 <__assert_fail@plt+0x49ac>
   15e58:	mov	r0, #8
   15e5c:	bl	19e6c <__assert_fail@plt+0x89b0>
   15e60:	cmp	r0, #0
   15e64:	beq	15e8c <__assert_fail@plt+0x49d0>
   15e68:	add	r1, r6, r5, lsl #3
   15e6c:	str	r4, [r0]
   15e70:	ldr	r2, [r1, #4]
   15e74:	str	r2, [r0, #4]
   15e78:	str	r0, [r1, #4]
   15e7c:	b	15d48 <__assert_fail@plt+0x488c>
   15e80:	mov	r0, #1
   15e84:	sub	sp, fp, #28
   15e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e8c:	mov	r0, #0
   15e90:	sub	sp, fp, #28
   15e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e98:	bl	11474 <abort@plt>
   15e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea0:	add	fp, sp, #28
   15ea4:	sub	sp, sp, #4
   15ea8:	cmp	r1, #0
   15eac:	beq	161c8 <__assert_fail@plt+0x4d0c>
   15eb0:	mov	r8, r2
   15eb4:	mov	sl, r1
   15eb8:	ldr	r1, [r0, #8]
   15ebc:	ldr	r2, [r0, #24]
   15ec0:	mov	r4, r0
   15ec4:	mov	r0, sl
   15ec8:	blx	r2
   15ecc:	mov	r7, r0
   15ed0:	ldr	r0, [r4, #8]
   15ed4:	cmp	r7, r0
   15ed8:	bcs	161c8 <__assert_fail@plt+0x4d0c>
   15edc:	ldr	r5, [r4]
   15ee0:	mov	r9, r5
   15ee4:	ldr	r1, [r9, r7, lsl #3]!
   15ee8:	cmp	r1, #0
   15eec:	beq	15f78 <__assert_fail@plt+0x4abc>
   15ef0:	cmp	r1, sl
   15ef4:	beq	15f20 <__assert_fail@plt+0x4a64>
   15ef8:	ldr	r2, [r4, #28]
   15efc:	mov	r0, sl
   15f00:	blx	r2
   15f04:	cmp	r0, #0
   15f08:	mov	r6, r9
   15f0c:	beq	15f34 <__assert_fail@plt+0x4a78>
   15f10:	ldr	r0, [r6]
   15f14:	cmp	r0, #0
   15f18:	bne	15f24 <__assert_fail@plt+0x4a68>
   15f1c:	b	15f78 <__assert_fail@plt+0x4abc>
   15f20:	mov	r0, sl
   15f24:	cmp	r8, #0
   15f28:	mov	r7, #0
   15f2c:	strne	r0, [r8]
   15f30:	b	16164 <__assert_fail@plt+0x4ca8>
   15f34:	add	r6, r5, r7, lsl #3
   15f38:	ldr	r0, [r6, #4]!
   15f3c:	cmp	r0, #0
   15f40:	beq	15f78 <__assert_fail@plt+0x4abc>
   15f44:	ldr	r1, [r0]
   15f48:	cmp	r1, sl
   15f4c:	beq	15f6c <__assert_fail@plt+0x4ab0>
   15f50:	ldr	r2, [r4, #28]
   15f54:	mov	r0, sl
   15f58:	blx	r2
   15f5c:	ldr	r6, [r6]
   15f60:	cmp	r0, #0
   15f64:	beq	15f38 <__assert_fail@plt+0x4a7c>
   15f68:	b	15f10 <__assert_fail@plt+0x4a54>
   15f6c:	mov	r0, sl
   15f70:	cmp	r0, #0
   15f74:	bne	15f24 <__assert_fail@plt+0x4a68>
   15f78:	vldr	s0, [r4, #8]
   15f7c:	vldr	s2, [r4, #12]
   15f80:	ldr	r0, [r4, #20]
   15f84:	vcvt.f32.u32	s0, s0
   15f88:	vcvt.f32.u32	s4, s2
   15f8c:	vldr	s2, [r0, #8]
   15f90:	vmul.f32	s6, s2, s0
   15f94:	vcmpe.f32	s6, s4
   15f98:	vmrs	APSR_nzcv, fpscr
   15f9c:	bpl	160f0 <__assert_fail@plt+0x4c34>
   15fa0:	movw	r1, #46808	; 0xb6d8
   15fa4:	movt	r1, #1
   15fa8:	cmp	r0, r1
   15fac:	beq	16038 <__assert_fail@plt+0x4b7c>
   15fb0:	vldr	s6, [pc, #532]	; 161cc <__assert_fail@plt+0x4d10>
   15fb4:	vcmpe.f32	s2, s6
   15fb8:	vmrs	APSR_nzcv, fpscr
   15fbc:	ble	16024 <__assert_fail@plt+0x4b68>
   15fc0:	vldr	s8, [pc, #520]	; 161d0 <__assert_fail@plt+0x4d14>
   15fc4:	vcmpe.f32	s2, s8
   15fc8:	vmrs	APSR_nzcv, fpscr
   15fcc:	bpl	16024 <__assert_fail@plt+0x4b68>
   15fd0:	vldr	s8, [pc, #508]	; 161d4 <__assert_fail@plt+0x4d18>
   15fd4:	vldr	s10, [r0, #12]
   15fd8:	vcmpe.f32	s10, s8
   15fdc:	vmrs	APSR_nzcv, fpscr
   15fe0:	ble	16024 <__assert_fail@plt+0x4b68>
   15fe4:	vldr	s8, [r0]
   15fe8:	vcmpe.f32	s8, #0.0
   15fec:	vmrs	APSR_nzcv, fpscr
   15ff0:	blt	16024 <__assert_fail@plt+0x4b68>
   15ff4:	vadd.f32	s6, s8, s6
   15ff8:	vcmpe.f32	s6, s2
   15ffc:	vmrs	APSR_nzcv, fpscr
   16000:	bpl	16024 <__assert_fail@plt+0x4b68>
   16004:	vldr	s8, [r0, #4]
   16008:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1600c:	vcmpe.f32	s8, s10
   16010:	vmrs	APSR_nzcv, fpscr
   16014:	bhi	16024 <__assert_fail@plt+0x4b68>
   16018:	vcmpe.f32	s6, s8
   1601c:	vmrs	APSR_nzcv, fpscr
   16020:	bmi	1603c <__assert_fail@plt+0x4b80>
   16024:	vldr	s2, [pc, #428]	; 161d8 <__assert_fail@plt+0x4d1c>
   16028:	movw	r0, #46808	; 0xb6d8
   1602c:	movt	r0, #1
   16030:	str	r0, [r4, #20]
   16034:	b	1603c <__assert_fail@plt+0x4b80>
   16038:	mov	r0, r1
   1603c:	vmul.f32	s6, s2, s0
   16040:	vcmpe.f32	s6, s4
   16044:	vmrs	APSR_nzcv, fpscr
   16048:	bpl	160f0 <__assert_fail@plt+0x4c34>
   1604c:	vldr	s4, [r0, #12]
   16050:	ldrb	r0, [r0, #16]
   16054:	mvn	r7, #0
   16058:	cmp	r0, #0
   1605c:	vmul.f32	s0, s4, s0
   16060:	vldr	s4, [pc, #372]	; 161dc <__assert_fail@plt+0x4d20>
   16064:	vmul.f32	s2, s2, s0
   16068:	vseleq.f32	s0, s2, s0
   1606c:	vcmpe.f32	s0, s4
   16070:	vmrs	APSR_nzcv, fpscr
   16074:	bge	16164 <__assert_fail@plt+0x4ca8>
   16078:	vcvt.u32.f32	s0, s0
   1607c:	mov	r0, r4
   16080:	vmov	r1, s0
   16084:	bl	15a94 <__assert_fail@plt+0x45d8>
   16088:	cmp	r0, #0
   1608c:	beq	16164 <__assert_fail@plt+0x4ca8>
   16090:	ldr	r1, [r4, #8]
   16094:	ldr	r2, [r4, #24]
   16098:	mov	r0, sl
   1609c:	blx	r2
   160a0:	mov	r7, r0
   160a4:	ldr	r0, [r4, #8]
   160a8:	cmp	r7, r0
   160ac:	bcs	161c8 <__assert_fail@plt+0x4d0c>
   160b0:	ldr	r5, [r4]
   160b4:	mov	r9, r5
   160b8:	ldr	r1, [r9, r7, lsl #3]!
   160bc:	cmp	r1, #0
   160c0:	beq	160f0 <__assert_fail@plt+0x4c34>
   160c4:	cmp	r1, sl
   160c8:	mov	r0, sl
   160cc:	beq	160e8 <__assert_fail@plt+0x4c2c>
   160d0:	ldr	r2, [r4, #28]
   160d4:	mov	r0, sl
   160d8:	blx	r2
   160dc:	cmp	r0, #0
   160e0:	beq	16178 <__assert_fail@plt+0x4cbc>
   160e4:	ldr	r0, [r9]
   160e8:	cmp	r0, #0
   160ec:	bne	161c8 <__assert_fail@plt+0x4d0c>
   160f0:	ldr	r0, [r9]
   160f4:	cmp	r0, #0
   160f8:	beq	16114 <__assert_fail@plt+0x4c58>
   160fc:	ldr	r0, [r4, #36]	; 0x24
   16100:	cmp	r0, #0
   16104:	beq	16134 <__assert_fail@plt+0x4c78>
   16108:	ldr	r1, [r0, #4]
   1610c:	str	r1, [r4, #36]	; 0x24
   16110:	b	16144 <__assert_fail@plt+0x4c88>
   16114:	str	sl, [r9]
   16118:	ldr	r0, [r4, #12]
   1611c:	ldr	r1, [r4, #16]
   16120:	add	r0, r0, #1
   16124:	add	r1, r1, #1
   16128:	str	r0, [r4, #12]
   1612c:	str	r1, [r4, #16]
   16130:	b	16160 <__assert_fail@plt+0x4ca4>
   16134:	mov	r0, #8
   16138:	bl	19e6c <__assert_fail@plt+0x89b0>
   1613c:	cmp	r0, #0
   16140:	beq	16170 <__assert_fail@plt+0x4cb4>
   16144:	str	sl, [r0]
   16148:	ldr	r1, [r9, #4]
   1614c:	str	r1, [r0, #4]
   16150:	str	r0, [r9, #4]
   16154:	ldr	r0, [r4, #16]
   16158:	add	r0, r0, #1
   1615c:	str	r0, [r4, #16]
   16160:	mov	r7, #1
   16164:	mov	r0, r7
   16168:	sub	sp, fp, #28
   1616c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16170:	mvn	r7, #0
   16174:	b	16164 <__assert_fail@plt+0x4ca8>
   16178:	add	r6, r5, r7, lsl #3
   1617c:	ldr	r0, [r6, #4]!
   16180:	cmp	r0, #0
   16184:	beq	160f0 <__assert_fail@plt+0x4c34>
   16188:	ldr	r1, [r0]
   1618c:	cmp	r1, sl
   16190:	beq	161bc <__assert_fail@plt+0x4d00>
   16194:	ldr	r2, [r4, #28]
   16198:	mov	r0, sl
   1619c:	blx	r2
   161a0:	ldr	r6, [r6]
   161a4:	cmp	r0, #0
   161a8:	beq	1617c <__assert_fail@plt+0x4cc0>
   161ac:	ldr	r0, [r6]
   161b0:	cmp	r0, #0
   161b4:	beq	160f0 <__assert_fail@plt+0x4c34>
   161b8:	b	161c8 <__assert_fail@plt+0x4d0c>
   161bc:	mov	r0, sl
   161c0:	cmp	r0, #0
   161c4:	beq	160f0 <__assert_fail@plt+0x4c34>
   161c8:	bl	11474 <abort@plt>
   161cc:	stclcc	12, cr12, [ip, #820]	; 0x334
   161d0:	svccc	0x00666666
   161d4:	svccc	0x008ccccd
   161d8:	svccc	0x004ccccd
   161dc:	svcmi	0x00800000
   161e0:	push	{r4, sl, fp, lr}
   161e4:	add	fp, sp, #8
   161e8:	sub	sp, sp, #8
   161ec:	add	r2, sp, #4
   161f0:	mov	r4, r1
   161f4:	bl	15e9c <__assert_fail@plt+0x49e0>
   161f8:	cmn	r0, #1
   161fc:	beq	16210 <__assert_fail@plt+0x4d54>
   16200:	ldr	r1, [sp, #4]
   16204:	cmp	r0, #0
   16208:	moveq	r4, r1
   1620c:	b	16214 <__assert_fail@plt+0x4d58>
   16210:	mov	r4, #0
   16214:	mov	r0, r4
   16218:	sub	sp, fp, #8
   1621c:	pop	{r4, sl, fp, pc}
   16220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16224:	add	fp, sp, #24
   16228:	mov	r9, r1
   1622c:	ldr	r1, [r0, #8]
   16230:	ldr	r2, [r0, #24]
   16234:	mov	r5, r0
   16238:	mov	r0, r9
   1623c:	blx	r2
   16240:	mov	r7, r0
   16244:	ldr	r0, [r5, #8]
   16248:	cmp	r7, r0
   1624c:	bcs	164b0 <__assert_fail@plt+0x4ff4>
   16250:	ldr	r6, [r5]
   16254:	mov	r8, #0
   16258:	mov	r4, r6
   1625c:	ldr	r1, [r4, r7, lsl #3]!
   16260:	cmp	r1, #0
   16264:	beq	16318 <__assert_fail@plt+0x4e5c>
   16268:	cmp	r1, r9
   1626c:	beq	16288 <__assert_fail@plt+0x4dcc>
   16270:	ldr	r2, [r5, #28]
   16274:	mov	r0, r9
   16278:	blx	r2
   1627c:	cmp	r0, #0
   16280:	beq	162c0 <__assert_fail@plt+0x4e04>
   16284:	ldr	r9, [r4]
   16288:	add	r0, r6, r7, lsl #3
   1628c:	ldr	r0, [r0, #4]
   16290:	cmp	r0, #0
   16294:	beq	16308 <__assert_fail@plt+0x4e4c>
   16298:	ldm	r0, {r1, r2}
   1629c:	stm	r4, {r1, r2}
   162a0:	mov	r1, #0
   162a4:	str	r1, [r0]
   162a8:	ldr	r1, [r5, #36]	; 0x24
   162ac:	str	r1, [r0, #4]
   162b0:	str	r0, [r5, #36]	; 0x24
   162b4:	cmp	r9, #0
   162b8:	bne	16350 <__assert_fail@plt+0x4e94>
   162bc:	b	16318 <__assert_fail@plt+0x4e5c>
   162c0:	add	r7, r6, r7, lsl #3
   162c4:	ldr	r0, [r7, #4]!
   162c8:	cmp	r0, #0
   162cc:	beq	16318 <__assert_fail@plt+0x4e5c>
   162d0:	ldr	r1, [r0]
   162d4:	cmp	r1, r9
   162d8:	beq	16320 <__assert_fail@plt+0x4e64>
   162dc:	ldr	r2, [r5, #28]
   162e0:	mov	r0, r9
   162e4:	blx	r2
   162e8:	ldr	r1, [r7]
   162ec:	cmp	r0, #0
   162f0:	bne	16328 <__assert_fail@plt+0x4e6c>
   162f4:	ldr	r0, [r1, #4]!
   162f8:	mov	r7, r1
   162fc:	cmp	r0, #0
   16300:	bne	162d0 <__assert_fail@plt+0x4e14>
   16304:	b	16318 <__assert_fail@plt+0x4e5c>
   16308:	mov	r0, #0
   1630c:	str	r0, [r4]
   16310:	cmp	r9, #0
   16314:	bne	16350 <__assert_fail@plt+0x4e94>
   16318:	mov	r0, r8
   1631c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16320:	mov	r1, r0
   16324:	b	1632c <__assert_fail@plt+0x4e70>
   16328:	ldr	r9, [r1]
   1632c:	ldr	r0, [r1, #4]
   16330:	str	r0, [r7]
   16334:	mov	r0, #0
   16338:	str	r0, [r1]
   1633c:	ldr	r0, [r5, #36]	; 0x24
   16340:	str	r0, [r1, #4]
   16344:	str	r1, [r5, #36]	; 0x24
   16348:	cmp	r9, #0
   1634c:	beq	16318 <__assert_fail@plt+0x4e5c>
   16350:	ldr	r0, [r5, #16]
   16354:	sub	r0, r0, #1
   16358:	str	r0, [r5, #16]
   1635c:	ldr	r0, [r4]
   16360:	cmp	r0, #0
   16364:	bne	164a4 <__assert_fail@plt+0x4fe8>
   16368:	ldr	r0, [r5, #12]
   1636c:	vldr	s0, [r5, #8]
   16370:	sub	r1, r0, #1
   16374:	str	r1, [r5, #12]
   16378:	vmov	s2, r1
   1637c:	ldr	r0, [r5, #20]
   16380:	vcvt.f32.u32	s0, s0
   16384:	vcvt.f32.u32	s2, s2
   16388:	vldr	s4, [r0]
   1638c:	vmul.f32	s6, s4, s0
   16390:	vcmpe.f32	s6, s2
   16394:	vmrs	APSR_nzcv, fpscr
   16398:	ble	164a4 <__assert_fail@plt+0x4fe8>
   1639c:	movw	r1, #46808	; 0xb6d8
   163a0:	movt	r1, #1
   163a4:	cmp	r0, r1
   163a8:	beq	16434 <__assert_fail@plt+0x4f78>
   163ac:	vldr	s8, [pc, #256]	; 164b4 <__assert_fail@plt+0x4ff8>
   163b0:	vldr	s6, [r0, #8]
   163b4:	vcmpe.f32	s6, s8
   163b8:	vmrs	APSR_nzcv, fpscr
   163bc:	ble	16420 <__assert_fail@plt+0x4f64>
   163c0:	vldr	s10, [pc, #240]	; 164b8 <__assert_fail@plt+0x4ffc>
   163c4:	vcmpe.f32	s6, s10
   163c8:	vmrs	APSR_nzcv, fpscr
   163cc:	bpl	16420 <__assert_fail@plt+0x4f64>
   163d0:	vcmpe.f32	s4, #0.0
   163d4:	vmrs	APSR_nzcv, fpscr
   163d8:	blt	16420 <__assert_fail@plt+0x4f64>
   163dc:	vldr	s10, [r0, #12]
   163e0:	vldr	s12, [pc, #212]	; 164bc <__assert_fail@plt+0x5000>
   163e4:	vcmpe.f32	s10, s12
   163e8:	vmrs	APSR_nzcv, fpscr
   163ec:	ble	16420 <__assert_fail@plt+0x4f64>
   163f0:	vadd.f32	s8, s4, s8
   163f4:	vcmpe.f32	s8, s6
   163f8:	vmrs	APSR_nzcv, fpscr
   163fc:	bpl	16420 <__assert_fail@plt+0x4f64>
   16400:	vldr	s6, [r0, #4]
   16404:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16408:	vcmpe.f32	s6, s10
   1640c:	vmrs	APSR_nzcv, fpscr
   16410:	bhi	16420 <__assert_fail@plt+0x4f64>
   16414:	vcmpe.f32	s8, s6
   16418:	vmrs	APSR_nzcv, fpscr
   1641c:	bmi	16438 <__assert_fail@plt+0x4f7c>
   16420:	vldr	s4, [pc, #152]	; 164c0 <__assert_fail@plt+0x5004>
   16424:	movw	r0, #46808	; 0xb6d8
   16428:	movt	r0, #1
   1642c:	str	r0, [r5, #20]
   16430:	b	16438 <__assert_fail@plt+0x4f7c>
   16434:	mov	r0, r1
   16438:	vmul.f32	s4, s4, s0
   1643c:	vcmpe.f32	s4, s2
   16440:	vmrs	APSR_nzcv, fpscr
   16444:	ble	164a4 <__assert_fail@plt+0x4fe8>
   16448:	vldr	s2, [r0, #4]
   1644c:	ldrb	r1, [r0, #16]
   16450:	cmp	r1, #0
   16454:	vmul.f32	s0, s2, s0
   16458:	bne	16464 <__assert_fail@plt+0x4fa8>
   1645c:	vldr	s2, [r0, #8]
   16460:	vmul.f32	s0, s0, s2
   16464:	vcvt.u32.f32	s0, s0
   16468:	mov	r0, r5
   1646c:	vmov	r1, s0
   16470:	bl	15a94 <__assert_fail@plt+0x45d8>
   16474:	cmp	r0, #0
   16478:	bne	164a4 <__assert_fail@plt+0x4fe8>
   1647c:	ldr	r0, [r5, #36]	; 0x24
   16480:	cmp	r0, #0
   16484:	beq	1649c <__assert_fail@plt+0x4fe0>
   16488:	ldr	r4, [r0, #4]
   1648c:	bl	12db4 <__assert_fail@plt+0x18f8>
   16490:	cmp	r4, #0
   16494:	mov	r0, r4
   16498:	bne	16488 <__assert_fail@plt+0x4fcc>
   1649c:	mov	r0, #0
   164a0:	str	r0, [r5, #36]	; 0x24
   164a4:	mov	r8, r9
   164a8:	mov	r0, r8
   164ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   164b0:	bl	11474 <abort@plt>
   164b4:	stclcc	12, cr12, [ip, #820]	; 0x334
   164b8:	svccc	0x00666666
   164bc:	svccc	0x008ccccd
   164c0:	andeq	r0, r0, r0
   164c4:	b	16220 <__assert_fail@plt+0x4d64>
   164c8:	vdup.32	q8, r1
   164cc:	mov	r2, #0
   164d0:	str	r2, [r0, #20]
   164d4:	str	r2, [r0, #24]
   164d8:	mov	r2, #1
   164dc:	strb	r2, [r0, #28]
   164e0:	vst1.32	{d16-d17}, [r0]!
   164e4:	str	r1, [r0]
   164e8:	bx	lr
   164ec:	ldrb	r0, [r0, #28]
   164f0:	bx	lr
   164f4:	push	{fp, lr}
   164f8:	mov	fp, sp
   164fc:	ldrb	r3, [r0, #28]
   16500:	ldr	r2, [r0, #20]
   16504:	eor	lr, r3, #1
   16508:	add	r2, r2, lr
   1650c:	and	r3, r2, #3
   16510:	ldr	ip, [r0, r3, lsl #2]
   16514:	str	r1, [r0, r3, lsl #2]
   16518:	str	r3, [r0, #20]
   1651c:	ldr	r1, [r0, #24]
   16520:	cmp	r3, r1
   16524:	addeq	r1, r2, lr
   16528:	andeq	r1, r1, #3
   1652c:	streq	r1, [r0, #24]
   16530:	mov	r1, #0
   16534:	strb	r1, [r0, #28]
   16538:	mov	r0, ip
   1653c:	pop	{fp, pc}
   16540:	push	{fp, lr}
   16544:	mov	fp, sp
   16548:	ldrb	r1, [r0, #28]
   1654c:	cmp	r1, #0
   16550:	bne	1658c <__assert_fail@plt+0x50d0>
   16554:	ldr	r3, [r0, #20]
   16558:	ldr	r2, [r0, #16]
   1655c:	ldr	r1, [r0, r3, lsl #2]
   16560:	str	r2, [r0, r3, lsl #2]
   16564:	ldr	r2, [r0, #20]
   16568:	ldr	r3, [r0, #24]
   1656c:	cmp	r2, r3
   16570:	moveq	r2, #1
   16574:	strbeq	r2, [r0, #28]
   16578:	subne	r2, r2, #1
   1657c:	andne	r2, r2, #3
   16580:	strne	r2, [r0, #20]
   16584:	mov	r0, r1
   16588:	pop	{fp, pc}
   1658c:	bl	11474 <abort@plt>
   16590:	push	{r4, r5, r6, sl, fp, lr}
   16594:	add	fp, sp, #16
   16598:	mov	r5, r0
   1659c:	mov	r0, #0
   165a0:	mov	r4, r1
   165a4:	add	r6, r2, #19
   165a8:	strb	r0, [r2, #20]
   165ac:	mov	r0, r5
   165b0:	mov	r1, r4
   165b4:	mov	r2, #10
   165b8:	mov	r3, #0
   165bc:	bl	1a610 <__assert_fail@plt+0x9154>
   165c0:	add	r2, r0, r0, lsl #2
   165c4:	sub	r2, r5, r2, lsl #1
   165c8:	orr	r2, r2, #48	; 0x30
   165cc:	strb	r2, [r6], #-1
   165d0:	rsbs	r2, r5, #9
   165d4:	mov	r5, r0
   165d8:	rscs	r2, r4, #0
   165dc:	mov	r4, r1
   165e0:	bcc	165ac <__assert_fail@plt+0x50f0>
   165e4:	add	r0, r6, #1
   165e8:	pop	{r4, r5, r6, sl, fp, pc}
   165ec:	sub	sp, sp, #4
   165f0:	push	{fp, lr}
   165f4:	mov	fp, sp
   165f8:	sub	sp, sp, #4
   165fc:	str	r3, [fp, #8]
   16600:	tst	r2, #64	; 0x40
   16604:	mov	r3, #0
   16608:	ldrne	r3, [fp, #8]
   1660c:	bl	11360 <openat64@plt>
   16610:	bl	1847c <__assert_fail@plt+0x6fc0>
   16614:	mov	sp, fp
   16618:	pop	{fp, lr}
   1661c:	add	sp, sp, #4
   16620:	bx	lr
   16624:	push	{r4, r5, r6, sl, fp, lr}
   16628:	add	fp, sp, #16
   1662c:	orr	r2, r2, #18688	; 0x4900
   16630:	mov	r4, r3
   16634:	orr	r2, r2, #524288	; 0x80000
   16638:	bl	165ec <__assert_fail@plt+0x5130>
   1663c:	mov	r5, r0
   16640:	mov	r0, #0
   16644:	cmp	r5, #0
   16648:	bmi	16680 <__assert_fail@plt+0x51c4>
   1664c:	mov	r0, r5
   16650:	bl	11414 <fdopendir@plt>
   16654:	cmp	r0, #0
   16658:	beq	16664 <__assert_fail@plt+0x51a8>
   1665c:	str	r5, [r4]
   16660:	pop	{r4, r5, r6, sl, fp, pc}
   16664:	bl	11378 <__errno_location@plt>
   16668:	ldr	r6, [r0]
   1666c:	mov	r4, r0
   16670:	mov	r0, r5
   16674:	bl	11480 <close@plt>
   16678:	mov	r0, #0
   1667c:	str	r6, [r4]
   16680:	pop	{r4, r5, r6, sl, fp, pc}
   16684:	push	{r4, r5, fp, lr}
   16688:	add	fp, sp, #8
   1668c:	cmp	r0, #0
   16690:	beq	16724 <__assert_fail@plt+0x5268>
   16694:	mov	r1, #47	; 0x2f
   16698:	mov	r4, r0
   1669c:	bl	113f0 <strrchr@plt>
   166a0:	cmp	r0, #0
   166a4:	mov	r5, r4
   166a8:	addne	r5, r0, #1
   166ac:	sub	r0, r5, r4
   166b0:	cmp	r0, #7
   166b4:	blt	16708 <__assert_fail@plt+0x524c>
   166b8:	movw	r1, #46884	; 0xb724
   166bc:	sub	r0, r5, #7
   166c0:	mov	r2, #7
   166c4:	movt	r1, #1
   166c8:	bl	11468 <strncmp@plt>
   166cc:	cmp	r0, #0
   166d0:	bne	16708 <__assert_fail@plt+0x524c>
   166d4:	movw	r1, #46892	; 0xb72c
   166d8:	mov	r0, r5
   166dc:	mov	r2, #3
   166e0:	movt	r1, #1
   166e4:	bl	11468 <strncmp@plt>
   166e8:	cmp	r0, #0
   166ec:	beq	166f8 <__assert_fail@plt+0x523c>
   166f0:	mov	r4, r5
   166f4:	b	16708 <__assert_fail@plt+0x524c>
   166f8:	movw	r0, #49520	; 0xc170
   166fc:	add	r4, r5, #3
   16700:	movt	r0, #2
   16704:	str	r4, [r0]
   16708:	movw	r0, #49524	; 0xc174
   1670c:	movt	r0, #2
   16710:	str	r4, [r0]
   16714:	movw	r0, #49584	; 0xc1b0
   16718:	movt	r0, #2
   1671c:	str	r4, [r0]
   16720:	pop	{r4, r5, fp, pc}
   16724:	movw	r0, #49536	; 0xc180
   16728:	mov	r1, #55	; 0x37
   1672c:	mov	r2, #1
   16730:	movt	r0, #2
   16734:	ldr	r3, [r0]
   16738:	movw	r0, #46828	; 0xb6ec
   1673c:	movt	r0, #1
   16740:	bl	11294 <fwrite@plt>
   16744:	bl	11474 <abort@plt>
   16748:	push	{r4, r5, r6, sl, fp, lr}
   1674c:	add	fp, sp, #16
   16750:	mov	r4, r0
   16754:	movw	r0, #49592	; 0xc1b8
   16758:	movt	r0, #2
   1675c:	cmp	r4, #0
   16760:	moveq	r4, r0
   16764:	bl	11378 <__errno_location@plt>
   16768:	ldr	r6, [r0]
   1676c:	mov	r5, r0
   16770:	mov	r0, r4
   16774:	mov	r1, #48	; 0x30
   16778:	bl	18fdc <__assert_fail@plt+0x7b20>
   1677c:	str	r6, [r5]
   16780:	pop	{r4, r5, r6, sl, fp, pc}
   16784:	movw	r1, #49592	; 0xc1b8
   16788:	cmp	r0, #0
   1678c:	movt	r1, #2
   16790:	movne	r1, r0
   16794:	ldr	r0, [r1]
   16798:	bx	lr
   1679c:	movw	r2, #49592	; 0xc1b8
   167a0:	cmp	r0, #0
   167a4:	movt	r2, #2
   167a8:	movne	r2, r0
   167ac:	str	r1, [r2]
   167b0:	bx	lr
   167b4:	movw	r3, #49592	; 0xc1b8
   167b8:	cmp	r0, #0
   167bc:	and	r2, r2, #1
   167c0:	movt	r3, #2
   167c4:	movne	r3, r0
   167c8:	ubfx	r0, r1, #5, #3
   167cc:	and	r1, r1, #31
   167d0:	add	ip, r3, r0, lsl #2
   167d4:	mov	r0, #1
   167d8:	ldr	r3, [ip, #8]
   167dc:	and	r0, r0, r3, lsr r1
   167e0:	eor	r2, r0, r2
   167e4:	eor	r1, r3, r2, lsl r1
   167e8:	str	r1, [ip, #8]
   167ec:	bx	lr
   167f0:	movw	r2, #49592	; 0xc1b8
   167f4:	cmp	r0, #0
   167f8:	movt	r2, #2
   167fc:	movne	r2, r0
   16800:	ldr	r0, [r2, #4]
   16804:	str	r1, [r2, #4]
   16808:	bx	lr
   1680c:	push	{fp, lr}
   16810:	mov	fp, sp
   16814:	movw	r3, #49592	; 0xc1b8
   16818:	cmp	r0, #0
   1681c:	movt	r3, #2
   16820:	movne	r3, r0
   16824:	cmp	r1, #0
   16828:	mov	r0, #10
   1682c:	cmpne	r2, #0
   16830:	str	r0, [r3]
   16834:	bne	1683c <__assert_fail@plt+0x5380>
   16838:	bl	11474 <abort@plt>
   1683c:	str	r1, [r3, #40]	; 0x28
   16840:	str	r2, [r3, #44]	; 0x2c
   16844:	pop	{fp, pc}
   16848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1684c:	add	fp, sp, #28
   16850:	sub	sp, sp, #20
   16854:	mov	r7, r0
   16858:	ldr	r0, [fp, #8]
   1685c:	movw	r5, #49592	; 0xc1b8
   16860:	mov	r8, r3
   16864:	mov	r9, r2
   16868:	mov	sl, r1
   1686c:	movt	r5, #2
   16870:	cmp	r0, #0
   16874:	movne	r5, r0
   16878:	bl	11378 <__errno_location@plt>
   1687c:	ldr	r2, [r5, #40]	; 0x28
   16880:	ldr	r3, [r5, #44]	; 0x2c
   16884:	mov	r4, r0
   16888:	ldm	r5, {r0, r1}
   1688c:	add	r5, r5, #8
   16890:	ldr	r6, [r4]
   16894:	stm	sp, {r0, r1, r5}
   16898:	mov	r0, r7
   1689c:	mov	r1, sl
   168a0:	str	r2, [sp, #12]
   168a4:	str	r3, [sp, #16]
   168a8:	mov	r2, r9
   168ac:	mov	r3, r8
   168b0:	bl	168c0 <__assert_fail@plt+0x5404>
   168b4:	str	r6, [r4]
   168b8:	sub	sp, fp, #28
   168bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168c4:	add	fp, sp, #28
   168c8:	sub	sp, sp, #156	; 0x9c
   168cc:	mov	r5, r0
   168d0:	add	r0, r2, #1
   168d4:	mov	r6, r1
   168d8:	mov	sl, r3
   168dc:	str	r2, [fp, #-80]	; 0xffffffb0
   168e0:	str	r0, [sp, #72]	; 0x48
   168e4:	ldr	r0, [fp, #12]
   168e8:	and	r1, r0, #1
   168ec:	str	r1, [sp, #36]	; 0x24
   168f0:	and	r1, r0, #4
   168f4:	str	r1, [sp, #32]
   168f8:	ubfx	r9, r0, #1, #1
   168fc:	bl	112ac <__ctype_get_mb_cur_max@plt>
   16900:	str	r0, [sp, #40]	; 0x28
   16904:	ldr	r0, [fp, #24]
   16908:	ldr	r7, [fp, #8]
   1690c:	mov	r1, #0
   16910:	str	r5, [fp, #-84]	; 0xffffffac
   16914:	str	r1, [fp, #-56]	; 0xffffffc8
   16918:	mov	r1, #0
   1691c:	str	r1, [sp, #60]	; 0x3c
   16920:	mov	r1, #1
   16924:	str	r1, [fp, #-48]	; 0xffffffd0
   16928:	str	r0, [sp, #80]	; 0x50
   1692c:	ldr	r0, [fp, #20]
   16930:	str	r0, [sp, #76]	; 0x4c
   16934:	mov	r0, #0
   16938:	str	r0, [sp, #56]	; 0x38
   1693c:	mov	r0, #0
   16940:	str	r0, [fp, #-88]	; 0xffffffa8
   16944:	mov	r0, #0
   16948:	str	r0, [fp, #-72]	; 0xffffffb8
   1694c:	mov	r0, #0
   16950:	cmp	r7, #10
   16954:	bhi	178e8 <__assert_fail@plt+0x642c>
   16958:	add	r1, pc, #24
   1695c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16960:	mov	r4, r6
   16964:	mov	r8, #0
   16968:	mov	r2, #1
   1696c:	mov	r3, #0
   16970:	mov	lr, sl
   16974:	ldr	pc, [r1, r7, lsl #2]
   16978:	andeq	r6, r1, ip, lsr sl
   1697c:	muleq	r1, r0, sl
   16980:	andeq	r6, r1, r0, asr sl
   16984:	andeq	r6, r1, r4, lsr sl
   16988:	andeq	r6, r1, r4, lsl #21
   1698c:			; <UNDEFINED> instruction: 0x00016ab8
   16990:	andeq	r6, r1, r0, ror #20
   16994:	andeq	r6, r1, ip, lsr fp
   16998:	andeq	r6, r1, r4, lsr #19
   1699c:	andeq	r6, r1, r4, lsr #19
   169a0:	andeq	r6, r1, ip, asr #19
   169a4:	movw	r0, #46974	; 0xb77e
   169a8:	mov	r1, r7
   169ac:	movt	r0, #1
   169b0:	bl	182f0 <__assert_fail@plt+0x6e34>
   169b4:	str	r0, [sp, #76]	; 0x4c
   169b8:	movw	r0, #46976	; 0xb780
   169bc:	mov	r1, r7
   169c0:	movt	r0, #1
   169c4:	bl	182f0 <__assert_fail@plt+0x6e34>
   169c8:	str	r0, [sp, #80]	; 0x50
   169cc:	mov	r8, #0
   169d0:	tst	r9, #1
   169d4:	bne	16a0c <__assert_fail@plt+0x5550>
   169d8:	ldr	r0, [sp, #76]	; 0x4c
   169dc:	ldrb	r0, [r0]
   169e0:	cmp	r0, #0
   169e4:	beq	16a0c <__assert_fail@plt+0x5550>
   169e8:	ldr	r1, [sp, #76]	; 0x4c
   169ec:	mov	r8, #0
   169f0:	add	r1, r1, #1
   169f4:	cmp	r8, r4
   169f8:	strbcc	r0, [r5, r8]
   169fc:	ldrb	r0, [r1, r8]
   16a00:	add	r8, r8, #1
   16a04:	cmp	r0, #0
   16a08:	bne	169f4 <__assert_fail@plt+0x5538>
   16a0c:	ldr	r6, [sp, #80]	; 0x50
   16a10:	mov	r0, r6
   16a14:	bl	11348 <strlen@plt>
   16a18:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16a1c:	str	r0, [fp, #-72]	; 0xffffffb8
   16a20:	str	r6, [fp, #-88]	; 0xffffffa8
   16a24:	mov	r2, #1
   16a28:	mov	r3, r9
   16a2c:	mov	lr, sl
   16a30:	b	16b3c <__assert_fail@plt+0x5680>
   16a34:	mov	r0, #1
   16a38:	b	16a90 <__assert_fail@plt+0x55d4>
   16a3c:	mov	r7, #0
   16a40:	mov	r8, #0
   16a44:	mov	r2, r0
   16a48:	mov	r3, #0
   16a4c:	b	16b3c <__assert_fail@plt+0x5680>
   16a50:	tst	r9, #1
   16a54:	bne	16a90 <__assert_fail@plt+0x55d4>
   16a58:	mov	r2, r0
   16a5c:	b	16ae8 <__assert_fail@plt+0x562c>
   16a60:	mov	r0, #1
   16a64:	mov	r8, #0
   16a68:	mov	r7, #5
   16a6c:	mov	r2, #1
   16a70:	str	r0, [fp, #-72]	; 0xffffffb8
   16a74:	movw	r0, #46972	; 0xb77c
   16a78:	movt	r0, #1
   16a7c:	str	r0, [fp, #-88]	; 0xffffffa8
   16a80:	b	16ab0 <__assert_fail@plt+0x55f4>
   16a84:	mov	r2, #1
   16a88:	tst	r9, #1
   16a8c:	beq	16ae8 <__assert_fail@plt+0x562c>
   16a90:	mov	r1, #1
   16a94:	mov	r8, #0
   16a98:	mov	r7, #2
   16a9c:	mov	r2, r0
   16aa0:	str	r1, [fp, #-72]	; 0xffffffb8
   16aa4:	movw	r1, #46976	; 0xb780
   16aa8:	movt	r1, #1
   16aac:	str	r1, [fp, #-88]	; 0xffffffa8
   16ab0:	mov	r3, #1
   16ab4:	b	16b3c <__assert_fail@plt+0x5680>
   16ab8:	tst	r9, #1
   16abc:	beq	16b0c <__assert_fail@plt+0x5650>
   16ac0:	mov	r0, #1
   16ac4:	mov	r8, #0
   16ac8:	mov	r2, #1
   16acc:	mov	r3, #1
   16ad0:	mov	r7, #5
   16ad4:	str	r0, [fp, #-72]	; 0xffffffb8
   16ad8:	movw	r0, #46972	; 0xb77c
   16adc:	movt	r0, #1
   16ae0:	str	r0, [fp, #-88]	; 0xffffffa8
   16ae4:	b	16b3c <__assert_fail@plt+0x5680>
   16ae8:	cmp	r4, #0
   16aec:	mov	r8, #1
   16af0:	mov	r3, #0
   16af4:	mov	r7, #2
   16af8:	movne	r0, #39	; 0x27
   16afc:	strbne	r0, [r5]
   16b00:	movw	r0, #46976	; 0xb780
   16b04:	movt	r0, #1
   16b08:	b	16b30 <__assert_fail@plt+0x5674>
   16b0c:	cmp	r4, #0
   16b10:	mov	r8, #1
   16b14:	mov	r2, #1
   16b18:	mov	r7, #5
   16b1c:	mov	r3, #0
   16b20:	movne	r0, #34	; 0x22
   16b24:	strbne	r0, [r5]
   16b28:	movw	r0, #46972	; 0xb77c
   16b2c:	movt	r0, #1
   16b30:	str	r0, [fp, #-88]	; 0xffffffa8
   16b34:	mov	r0, #1
   16b38:	str	r0, [fp, #-72]	; 0xffffffb8
   16b3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16b40:	eor	r6, r3, #1
   16b44:	str	r7, [fp, #-68]	; 0xffffffbc
   16b48:	str	r3, [fp, #-76]	; 0xffffffb4
   16b4c:	str	r2, [sp, #84]	; 0x54
   16b50:	str	r6, [sp, #92]	; 0x5c
   16b54:	cmp	r0, #0
   16b58:	movwne	r0, #1
   16b5c:	and	r1, r0, r3
   16b60:	and	r1, r2, r1
   16b64:	str	r1, [sp, #48]	; 0x30
   16b68:	sub	r1, r7, #2
   16b6c:	clz	r1, r1
   16b70:	lsr	r1, r1, #5
   16b74:	and	r1, r1, r3
   16b78:	str	r1, [sp, #64]	; 0x40
   16b7c:	subs	r1, r7, #2
   16b80:	mov	r7, #0
   16b84:	movwne	r1, #1
   16b88:	orr	r6, r1, r6
   16b8c:	and	r1, r1, r2
   16b90:	and	r0, r0, r1
   16b94:	str	r6, [sp, #68]	; 0x44
   16b98:	str	r0, [fp, #-60]	; 0xffffffc4
   16b9c:	orr	r0, r1, r3
   16ba0:	ldr	r1, [fp, #16]
   16ba4:	eor	r0, r0, #1
   16ba8:	clz	r1, r1
   16bac:	lsr	r1, r1, #5
   16bb0:	orr	r0, r1, r0
   16bb4:	str	r0, [fp, #-64]	; 0xffffffc0
   16bb8:	eor	r0, r2, #1
   16bbc:	str	r0, [sp, #52]	; 0x34
   16bc0:	cmn	lr, #1
   16bc4:	beq	16bd4 <__assert_fail@plt+0x5718>
   16bc8:	cmp	r7, lr
   16bcc:	bne	16be0 <__assert_fail@plt+0x5724>
   16bd0:	b	17728 <__assert_fail@plt+0x626c>
   16bd4:	ldrb	r0, [ip, r7]
   16bd8:	cmp	r0, #0
   16bdc:	beq	17730 <__assert_fail@plt+0x6274>
   16be0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16be4:	mov	sl, #0
   16be8:	cmp	r0, #0
   16bec:	beq	16c24 <__assert_fail@plt+0x5768>
   16bf0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16bf4:	add	r5, r7, r0
   16bf8:	cmp	r0, #2
   16bfc:	bcc	16c18 <__assert_fail@plt+0x575c>
   16c00:	cmn	lr, #1
   16c04:	bne	16c18 <__assert_fail@plt+0x575c>
   16c08:	mov	r0, ip
   16c0c:	bl	11348 <strlen@plt>
   16c10:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16c14:	mov	lr, r0
   16c18:	cmp	r5, lr
   16c1c:	bls	16c2c <__assert_fail@plt+0x5770>
   16c20:	ldr	r5, [fp, #-84]	; 0xffffffac
   16c24:	mov	r0, #0
   16c28:	b	16c78 <__assert_fail@plt+0x57bc>
   16c2c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16c30:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16c34:	add	r0, ip, r7
   16c38:	mov	r6, r4
   16c3c:	mov	r4, lr
   16c40:	bl	1133c <bcmp@plt>
   16c44:	ldr	r2, [sp, #92]	; 0x5c
   16c48:	cmp	r0, #0
   16c4c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16c50:	mov	r1, r0
   16c54:	movwne	r1, #1
   16c58:	orr	r1, r1, r2
   16c5c:	tst	r1, #1
   16c60:	beq	177b8 <__assert_fail@plt+0x62fc>
   16c64:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16c68:	clz	r0, r0
   16c6c:	mov	lr, r4
   16c70:	mov	r4, r6
   16c74:	lsr	r0, r0, #5
   16c78:	str	r0, [fp, #-52]	; 0xffffffcc
   16c7c:	ldrb	r6, [ip, r7]
   16c80:	cmp	r6, #126	; 0x7e
   16c84:	bhi	171b4 <__assert_fail@plt+0x5cf8>
   16c88:	add	r3, pc, #16
   16c8c:	mov	r9, #1
   16c90:	mov	r2, #110	; 0x6e
   16c94:	mov	r0, #97	; 0x61
   16c98:	mov	r1, #0
   16c9c:	ldr	pc, [r3, r6, lsl #2]
   16ca0:	andeq	r7, r1, r4, lsl r0
   16ca4:			; <UNDEFINED> instruction: 0x000171b4
   16ca8:			; <UNDEFINED> instruction: 0x000171b4
   16cac:			; <UNDEFINED> instruction: 0x000171b4
   16cb0:			; <UNDEFINED> instruction: 0x000171b4
   16cb4:			; <UNDEFINED> instruction: 0x000171b4
   16cb8:			; <UNDEFINED> instruction: 0x000171b4
   16cbc:	muleq	r1, r0, r2
   16cc0:	strdeq	r6, [r1], -r4
   16cc4:	andeq	r6, r1, ip, ror #31
   16cc8:	andeq	r7, r1, r0
   16ccc:	andeq	r7, r1, ip, lsl r1
   16cd0:	andeq	r6, r1, r4, ror #31
   16cd4:	strdeq	r6, [r1], -ip
   16cd8:			; <UNDEFINED> instruction: 0x000171b4
   16cdc:			; <UNDEFINED> instruction: 0x000171b4
   16ce0:			; <UNDEFINED> instruction: 0x000171b4
   16ce4:			; <UNDEFINED> instruction: 0x000171b4
   16ce8:			; <UNDEFINED> instruction: 0x000171b4
   16cec:			; <UNDEFINED> instruction: 0x000171b4
   16cf0:			; <UNDEFINED> instruction: 0x000171b4
   16cf4:			; <UNDEFINED> instruction: 0x000171b4
   16cf8:			; <UNDEFINED> instruction: 0x000171b4
   16cfc:			; <UNDEFINED> instruction: 0x000171b4
   16d00:			; <UNDEFINED> instruction: 0x000171b4
   16d04:			; <UNDEFINED> instruction: 0x000171b4
   16d08:			; <UNDEFINED> instruction: 0x000171b4
   16d0c:			; <UNDEFINED> instruction: 0x000171b4
   16d10:			; <UNDEFINED> instruction: 0x000171b4
   16d14:			; <UNDEFINED> instruction: 0x000171b4
   16d18:			; <UNDEFINED> instruction: 0x000171b4
   16d1c:			; <UNDEFINED> instruction: 0x000171b4
   16d20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16d24:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d2c:	andeq	r6, r1, r4, lsl #31
   16d30:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d34:	muleq	r1, ip, lr
   16d38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d3c:	andeq	r7, r1, r4, lsr #2
   16d40:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d44:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d48:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d4c:	muleq	r1, ip, lr
   16d50:	muleq	r1, ip, lr
   16d54:	muleq	r1, ip, lr
   16d58:	muleq	r1, ip, lr
   16d5c:	muleq	r1, ip, lr
   16d60:	muleq	r1, ip, lr
   16d64:	muleq	r1, ip, lr
   16d68:	muleq	r1, ip, lr
   16d6c:	muleq	r1, ip, lr
   16d70:	muleq	r1, ip, lr
   16d74:	muleq	r1, ip, lr
   16d78:	muleq	r1, ip, lr
   16d7c:	muleq	r1, ip, lr
   16d80:	muleq	r1, ip, lr
   16d84:	muleq	r1, ip, lr
   16d88:	muleq	r1, ip, lr
   16d8c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d98:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16d9c:	andeq	r7, r1, ip, ror #1
   16da0:			; <UNDEFINED> instruction: 0x000171b4
   16da4:	muleq	r1, ip, lr
   16da8:	muleq	r1, ip, lr
   16dac:	muleq	r1, ip, lr
   16db0:	muleq	r1, ip, lr
   16db4:	muleq	r1, ip, lr
   16db8:	muleq	r1, ip, lr
   16dbc:	muleq	r1, ip, lr
   16dc0:	muleq	r1, ip, lr
   16dc4:	muleq	r1, ip, lr
   16dc8:	muleq	r1, ip, lr
   16dcc:	muleq	r1, ip, lr
   16dd0:	muleq	r1, ip, lr
   16dd4:	muleq	r1, ip, lr
   16dd8:	muleq	r1, ip, lr
   16ddc:	muleq	r1, ip, lr
   16de0:	muleq	r1, ip, lr
   16de4:	muleq	r1, ip, lr
   16de8:	muleq	r1, ip, lr
   16dec:	muleq	r1, ip, lr
   16df0:	muleq	r1, ip, lr
   16df4:	muleq	r1, ip, lr
   16df8:	muleq	r1, ip, lr
   16dfc:	muleq	r1, ip, lr
   16e00:	muleq	r1, ip, lr
   16e04:	muleq	r1, ip, lr
   16e08:	muleq	r1, ip, lr
   16e0c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16e10:	andeq	r6, r1, r4, asr #31
   16e14:	muleq	r1, ip, lr
   16e18:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16e1c:	muleq	r1, ip, lr
   16e20:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16e24:	muleq	r1, ip, lr
   16e28:	muleq	r1, ip, lr
   16e2c:	muleq	r1, ip, lr
   16e30:	muleq	r1, ip, lr
   16e34:	muleq	r1, ip, lr
   16e38:	muleq	r1, ip, lr
   16e3c:	muleq	r1, ip, lr
   16e40:	muleq	r1, ip, lr
   16e44:	muleq	r1, ip, lr
   16e48:	muleq	r1, ip, lr
   16e4c:	muleq	r1, ip, lr
   16e50:	muleq	r1, ip, lr
   16e54:	muleq	r1, ip, lr
   16e58:	muleq	r1, ip, lr
   16e5c:	muleq	r1, ip, lr
   16e60:	muleq	r1, ip, lr
   16e64:	muleq	r1, ip, lr
   16e68:	muleq	r1, ip, lr
   16e6c:	muleq	r1, ip, lr
   16e70:	muleq	r1, ip, lr
   16e74:	muleq	r1, ip, lr
   16e78:	muleq	r1, ip, lr
   16e7c:	muleq	r1, ip, lr
   16e80:	muleq	r1, ip, lr
   16e84:	muleq	r1, ip, lr
   16e88:	muleq	r1, ip, lr
   16e8c:	andeq	r6, r1, r8, asr pc
   16e90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16e94:	andeq	r6, r1, r8, asr pc
   16e98:	andeq	r6, r1, r4, lsl #31
   16e9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16ea0:	tst	r0, #1
   16ea4:	bne	16ed0 <__assert_fail@plt+0x5a14>
   16ea8:	ldr	r1, [fp, #16]
   16eac:	ubfx	r0, r6, #5, #3
   16eb0:	mov	r2, #1
   16eb4:	ldr	r0, [r1, r0, lsl #2]
   16eb8:	and	r1, r6, #31
   16ebc:	tst	r0, r2, lsl r1
   16ec0:	beq	16ed0 <__assert_fail@plt+0x5a14>
   16ec4:	mov	r0, r6
   16ec8:	mov	r1, r9
   16ecc:	b	16ee4 <__assert_fail@plt+0x5a28>
   16ed0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16ed4:	mov	r1, r9
   16ed8:	cmp	r0, #0
   16edc:	mov	r0, r6
   16ee0:	beq	17224 <__assert_fail@plt+0x5d68>
   16ee4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16ee8:	tst	r2, #1
   16eec:	bne	177f4 <__assert_fail@plt+0x6338>
   16ef0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16ef4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16ef8:	subs	r2, r2, #2
   16efc:	movwne	r2, #1
   16f00:	orr	r2, r2, r3
   16f04:	tst	r2, #1
   16f08:	bne	16f44 <__assert_fail@plt+0x5a88>
   16f0c:	cmp	r8, r4
   16f10:	movcc	r2, #39	; 0x27
   16f14:	strbcc	r2, [r5, r8]
   16f18:	add	r2, r8, #1
   16f1c:	cmp	r2, r4
   16f20:	movcc	r3, #36	; 0x24
   16f24:	strbcc	r3, [r5, r2]
   16f28:	add	r2, r8, #2
   16f2c:	add	r8, r8, #3
   16f30:	cmp	r2, r4
   16f34:	movcc	r3, #39	; 0x27
   16f38:	strbcc	r3, [r5, r2]
   16f3c:	mov	r2, #1
   16f40:	str	r2, [fp, #-56]	; 0xffffffc8
   16f44:	cmp	r8, r4
   16f48:	movcc	r2, #92	; 0x5c
   16f4c:	strbcc	r2, [r5, r8]
   16f50:	add	r8, r8, #1
   16f54:	b	17268 <__assert_fail@plt+0x5dac>
   16f58:	cmp	lr, #1
   16f5c:	beq	16f84 <__assert_fail@plt+0x5ac8>
   16f60:	mov	r9, #0
   16f64:	cmn	lr, #1
   16f68:	bne	16f90 <__assert_fail@plt+0x5ad4>
   16f6c:	ldrb	r0, [ip, #1]
   16f70:	cmp	r0, #0
   16f74:	beq	16f84 <__assert_fail@plt+0x5ac8>
   16f78:	mvn	lr, #0
   16f7c:	mov	sl, #0
   16f80:	b	16e9c <__assert_fail@plt+0x59e0>
   16f84:	mov	r9, #0
   16f88:	cmp	r7, #0
   16f8c:	beq	16f98 <__assert_fail@plt+0x5adc>
   16f90:	mov	sl, #0
   16f94:	b	16e9c <__assert_fail@plt+0x59e0>
   16f98:	mov	r1, #1
   16f9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16fa0:	cmp	r0, #2
   16fa4:	bne	16fbc <__assert_fail@plt+0x5b00>
   16fa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16fac:	mov	r9, r1
   16fb0:	tst	r0, #1
   16fb4:	beq	16e9c <__assert_fail@plt+0x59e0>
   16fb8:	b	177f4 <__assert_fail@plt+0x6338>
   16fbc:	mov	r9, r1
   16fc0:	b	16e9c <__assert_fail@plt+0x59e0>
   16fc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16fc8:	cmp	r0, #2
   16fcc:	bne	17208 <__assert_fail@plt+0x5d4c>
   16fd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16fd4:	tst	r0, #1
   16fd8:	bne	177f4 <__assert_fail@plt+0x6338>
   16fdc:	mov	sl, #0
   16fe0:	b	1721c <__assert_fail@plt+0x5d60>
   16fe4:	mov	r0, #102	; 0x66
   16fe8:	b	17290 <__assert_fail@plt+0x5dd4>
   16fec:	mov	r2, #116	; 0x74
   16ff0:	b	17000 <__assert_fail@plt+0x5b44>
   16ff4:	mov	r0, #98	; 0x62
   16ff8:	b	17290 <__assert_fail@plt+0x5dd4>
   16ffc:	mov	r2, #114	; 0x72
   17000:	ldr	r0, [sp, #68]	; 0x44
   17004:	tst	r0, #1
   17008:	mov	r0, r2
   1700c:	bne	17290 <__assert_fail@plt+0x5dd4>
   17010:	b	177f4 <__assert_fail@plt+0x6338>
   17014:	ldr	r0, [sp, #84]	; 0x54
   17018:	tst	r0, #1
   1701c:	beq	172ac <__assert_fail@plt+0x5df0>
   17020:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17024:	tst	r0, #1
   17028:	bne	178e0 <__assert_fail@plt+0x6424>
   1702c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17030:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17034:	subs	r0, r0, #2
   17038:	movwne	r0, #1
   1703c:	orr	r0, r0, r1
   17040:	tst	r0, #1
   17044:	bne	17080 <__assert_fail@plt+0x5bc4>
   17048:	cmp	r8, r4
   1704c:	movcc	r0, #39	; 0x27
   17050:	strbcc	r0, [r5, r8]
   17054:	add	r0, r8, #1
   17058:	cmp	r0, r4
   1705c:	movcc	r1, #36	; 0x24
   17060:	strbcc	r1, [r5, r0]
   17064:	add	r0, r8, #2
   17068:	add	r8, r8, #3
   1706c:	cmp	r0, r4
   17070:	movcc	r1, #39	; 0x27
   17074:	strbcc	r1, [r5, r0]
   17078:	mov	r0, #1
   1707c:	str	r0, [fp, #-56]	; 0xffffffc8
   17080:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17084:	cmp	r8, r4
   17088:	mov	r9, #0
   1708c:	mov	sl, #1
   17090:	mov	r6, #48	; 0x30
   17094:	movcc	r0, #92	; 0x5c
   17098:	strbcc	r0, [r5, r8]
   1709c:	add	r0, r8, #1
   170a0:	cmp	r1, #2
   170a4:	beq	17474 <__assert_fail@plt+0x5fb8>
   170a8:	add	r1, r7, #1
   170ac:	cmp	r1, lr
   170b0:	bcs	17474 <__assert_fail@plt+0x5fb8>
   170b4:	ldrb	r1, [ip, r1]
   170b8:	sub	r1, r1, #48	; 0x30
   170bc:	uxtb	r1, r1
   170c0:	cmp	r1, #9
   170c4:	bhi	17474 <__assert_fail@plt+0x5fb8>
   170c8:	cmp	r0, r4
   170cc:	movcc	r1, #48	; 0x30
   170d0:	strbcc	r1, [r5, r0]
   170d4:	add	r0, r8, #2
   170d8:	add	r8, r8, #3
   170dc:	cmp	r0, r4
   170e0:	movcc	r1, #48	; 0x30
   170e4:	strbcc	r1, [r5, r0]
   170e8:	b	16e9c <__assert_fail@plt+0x59e0>
   170ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   170f0:	mov	sl, #0
   170f4:	mov	r6, #63	; 0x3f
   170f8:	cmp	r0, #5
   170fc:	beq	1747c <__assert_fail@plt+0x5fc0>
   17100:	cmp	r0, #2
   17104:	bne	17524 <__assert_fail@plt+0x6068>
   17108:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1710c:	mov	r9, #0
   17110:	tst	r0, #1
   17114:	beq	16e9c <__assert_fail@plt+0x59e0>
   17118:	b	177f4 <__assert_fail@plt+0x6338>
   1711c:	mov	r0, #118	; 0x76
   17120:	b	17290 <__assert_fail@plt+0x5dd4>
   17124:	mov	r0, #1
   17128:	mov	r6, #39	; 0x27
   1712c:	str	r0, [sp, #60]	; 0x3c
   17130:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17134:	cmp	r0, #2
   17138:	bne	172c8 <__assert_fail@plt+0x5e0c>
   1713c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17140:	tst	r0, #1
   17144:	bne	177f4 <__assert_fail@plt+0x6338>
   17148:	ldr	r2, [sp, #56]	; 0x38
   1714c:	clz	r1, r4
   17150:	mov	sl, #0
   17154:	mov	r9, #1
   17158:	lsr	r1, r1, #5
   1715c:	cmp	r2, #0
   17160:	mov	r0, r2
   17164:	movwne	r0, #1
   17168:	orrs	r0, r0, r1
   1716c:	moveq	r2, r4
   17170:	moveq	r4, r0
   17174:	cmp	r8, r4
   17178:	str	r2, [sp, #56]	; 0x38
   1717c:	movcc	r0, #39	; 0x27
   17180:	strbcc	r0, [r5, r8]
   17184:	add	r0, r8, #1
   17188:	cmp	r0, r4
   1718c:	movcc	r1, #92	; 0x5c
   17190:	strbcc	r1, [r5, r0]
   17194:	add	r0, r8, #2
   17198:	add	r8, r8, #3
   1719c:	cmp	r0, r4
   171a0:	movcc	r1, #39	; 0x27
   171a4:	strbcc	r1, [r5, r0]
   171a8:	mov	r0, #0
   171ac:	str	r0, [fp, #-56]	; 0xffffffc8
   171b0:	b	16e9c <__assert_fail@plt+0x59e0>
   171b4:	ldr	r0, [sp, #40]	; 0x28
   171b8:	str	r4, [sp, #88]	; 0x58
   171bc:	cmp	r0, #1
   171c0:	bne	172d0 <__assert_fail@plt+0x5e14>
   171c4:	str	lr, [sp, #28]
   171c8:	bl	11324 <__ctype_b_loc@plt>
   171cc:	ldr	r0, [r0]
   171d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   171d4:	mov	r2, #1
   171d8:	add	r0, r0, r6, lsl #1
   171dc:	ldrb	r0, [r0, #1]
   171e0:	ubfx	r9, r0, #6, #1
   171e4:	ldr	r0, [sp, #52]	; 0x34
   171e8:	cmp	r2, #1
   171ec:	orr	r0, r9, r0
   171f0:	bhi	1752c <__assert_fail@plt+0x6070>
   171f4:	tst	r0, #1
   171f8:	beq	1752c <__assert_fail@plt+0x6070>
   171fc:	ldr	lr, [sp, #28]
   17200:	ldr	r4, [sp, #88]	; 0x58
   17204:	b	16e9c <__assert_fail@plt+0x59e0>
   17208:	ldr	r1, [sp, #48]	; 0x30
   1720c:	mov	sl, #0
   17210:	mov	r0, #92	; 0x5c
   17214:	cmp	r1, #0
   17218:	beq	17290 <__assert_fail@plt+0x5dd4>
   1721c:	mov	r6, #92	; 0x5c
   17220:	mov	r9, #0
   17224:	cmp	sl, #0
   17228:	bne	17260 <__assert_fail@plt+0x5da4>
   1722c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17230:	tst	r0, #1
   17234:	beq	17260 <__assert_fail@plt+0x5da4>
   17238:	cmp	r8, r4
   1723c:	movcc	r0, #39	; 0x27
   17240:	strbcc	r0, [r5, r8]
   17244:	add	r0, r8, #1
   17248:	add	r8, r8, #2
   1724c:	cmp	r0, r4
   17250:	movcc	r1, #39	; 0x27
   17254:	strbcc	r1, [r5, r0]
   17258:	mov	r0, #0
   1725c:	str	r0, [fp, #-56]	; 0xffffffc8
   17260:	mov	r1, r9
   17264:	mov	r0, r6
   17268:	cmp	r8, r4
   1726c:	strbcc	r0, [r5, r8]
   17270:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17274:	add	r8, r8, #1
   17278:	and	r0, r0, r1
   1727c:	str	r0, [fp, #-48]	; 0xffffffd0
   17280:	add	r7, r7, #1
   17284:	cmn	lr, #1
   17288:	bne	16bc8 <__assert_fail@plt+0x570c>
   1728c:	b	16bd4 <__assert_fail@plt+0x5718>
   17290:	ldr	r1, [sp, #84]	; 0x54
   17294:	mov	sl, #0
   17298:	mov	r9, #0
   1729c:	tst	r1, #1
   172a0:	mov	r1, #0
   172a4:	beq	16e9c <__assert_fail@plt+0x59e0>
   172a8:	b	16ee4 <__assert_fail@plt+0x5a28>
   172ac:	ldr	r0, [sp, #36]	; 0x24
   172b0:	mov	r6, #0
   172b4:	mov	sl, #0
   172b8:	mov	r9, #0
   172bc:	cmp	r0, #0
   172c0:	beq	16e9c <__assert_fail@plt+0x59e0>
   172c4:	b	17280 <__assert_fail@plt+0x5dc4>
   172c8:	mov	r9, #1
   172cc:	b	16e9c <__assert_fail@plt+0x59e0>
   172d0:	mov	r0, #0
   172d4:	cmn	lr, #1
   172d8:	sub	r4, fp, #40	; 0x28
   172dc:	str	r0, [fp, #-36]	; 0xffffffdc
   172e0:	str	r0, [fp, #-40]	; 0xffffffd8
   172e4:	bne	172f8 <__assert_fail@plt+0x5e3c>
   172e8:	mov	r0, ip
   172ec:	bl	11348 <strlen@plt>
   172f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   172f4:	mov	lr, r0
   172f8:	ldr	r0, [sp, #72]	; 0x48
   172fc:	mov	r9, #1
   17300:	mov	r2, #0
   17304:	str	lr, [sp, #28]
   17308:	add	r0, r0, r7
   1730c:	str	r0, [sp, #20]
   17310:	b	17354 <__assert_fail@plt+0x5e98>
   17314:	ldr	r5, [sp, #44]	; 0x2c
   17318:	add	r5, r0, r5
   1731c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17320:	bl	1127c <iswprint@plt>
   17324:	cmp	r0, #0
   17328:	sub	r4, fp, #40	; 0x28
   1732c:	movwne	r0, #1
   17330:	and	r9, r9, r0
   17334:	mov	r0, r4
   17338:	bl	11234 <mbsinit@plt>
   1733c:	mov	r2, r5
   17340:	ldr	lr, [sp, #28]
   17344:	ldr	r5, [fp, #-84]	; 0xffffffac
   17348:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1734c:	cmp	r0, #0
   17350:	bne	171e4 <__assert_fail@plt+0x5d28>
   17354:	add	r0, r2, r7
   17358:	str	r2, [sp, #44]	; 0x2c
   1735c:	mov	r3, r4
   17360:	add	r1, ip, r0
   17364:	str	r0, [sp, #24]
   17368:	sub	r2, lr, r0
   1736c:	sub	r0, fp, #44	; 0x2c
   17370:	bl	1a458 <__assert_fail@plt+0x8f9c>
   17374:	cmp	r0, #0
   17378:	beq	1771c <__assert_fail@plt+0x6260>
   1737c:	cmn	r0, #1
   17380:	beq	176d8 <__assert_fail@plt+0x621c>
   17384:	ldr	lr, [sp, #28]
   17388:	cmn	r0, #2
   1738c:	beq	176e0 <__assert_fail@plt+0x6224>
   17390:	ldr	r2, [sp, #64]	; 0x40
   17394:	ldr	r4, [sp, #88]	; 0x58
   17398:	ldr	ip, [sp, #84]	; 0x54
   1739c:	cmp	r0, #2
   173a0:	mov	r1, #0
   173a4:	movwcc	r1, #1
   173a8:	eor	r2, r2, #1
   173ac:	orrs	r1, r2, r1
   173b0:	bne	17314 <__assert_fail@plt+0x5e58>
   173b4:	ldr	r1, [sp, #44]	; 0x2c
   173b8:	ldr	r2, [sp, #20]
   173bc:	add	r1, r2, r1
   173c0:	sub	r2, r0, #1
   173c4:	b	173d4 <__assert_fail@plt+0x5f18>
   173c8:	add	r1, r1, #1
   173cc:	subs	r2, r2, #1
   173d0:	beq	17314 <__assert_fail@plt+0x5e58>
   173d4:	ldrb	r3, [r1]
   173d8:	sub	r3, r3, #91	; 0x5b
   173dc:	cmp	r3, #33	; 0x21
   173e0:	bhi	173c8 <__assert_fail@plt+0x5f0c>
   173e4:	add	r5, pc, #0
   173e8:	ldr	pc, [r5, r3, lsl #2]
   173ec:	ldrdeq	r7, [r1], -r0
   173f0:	ldrdeq	r7, [r1], -r0
   173f4:	andeq	r7, r1, r8, asr #7
   173f8:	ldrdeq	r7, [r1], -r0
   173fc:	andeq	r7, r1, r8, asr #7
   17400:	ldrdeq	r7, [r1], -r0
   17404:	andeq	r7, r1, r8, asr #7
   17408:	andeq	r7, r1, r8, asr #7
   1740c:	andeq	r7, r1, r8, asr #7
   17410:	andeq	r7, r1, r8, asr #7
   17414:	andeq	r7, r1, r8, asr #7
   17418:	andeq	r7, r1, r8, asr #7
   1741c:	andeq	r7, r1, r8, asr #7
   17420:	andeq	r7, r1, r8, asr #7
   17424:	andeq	r7, r1, r8, asr #7
   17428:	andeq	r7, r1, r8, asr #7
   1742c:	andeq	r7, r1, r8, asr #7
   17430:	andeq	r7, r1, r8, asr #7
   17434:	andeq	r7, r1, r8, asr #7
   17438:	andeq	r7, r1, r8, asr #7
   1743c:	andeq	r7, r1, r8, asr #7
   17440:	andeq	r7, r1, r8, asr #7
   17444:	andeq	r7, r1, r8, asr #7
   17448:	andeq	r7, r1, r8, asr #7
   1744c:	andeq	r7, r1, r8, asr #7
   17450:	andeq	r7, r1, r8, asr #7
   17454:	andeq	r7, r1, r8, asr #7
   17458:	andeq	r7, r1, r8, asr #7
   1745c:	andeq	r7, r1, r8, asr #7
   17460:	andeq	r7, r1, r8, asr #7
   17464:	andeq	r7, r1, r8, asr #7
   17468:	andeq	r7, r1, r8, asr #7
   1746c:	andeq	r7, r1, r8, asr #7
   17470:	ldrdeq	r7, [r1], -r0
   17474:	mov	r8, r0
   17478:	b	16e9c <__assert_fail@plt+0x59e0>
   1747c:	ldr	r0, [sp, #32]
   17480:	cmp	r0, #0
   17484:	beq	17524 <__assert_fail@plt+0x6068>
   17488:	add	r0, r7, #2
   1748c:	cmp	r0, lr
   17490:	bcs	17524 <__assert_fail@plt+0x6068>
   17494:	add	r1, r7, ip
   17498:	ldrb	r1, [r1, #1]
   1749c:	cmp	r1, #63	; 0x3f
   174a0:	bne	17524 <__assert_fail@plt+0x6068>
   174a4:	ldrb	r9, [ip, r0]
   174a8:	sub	r2, r9, #33	; 0x21
   174ac:	cmp	r2, #29
   174b0:	bhi	17524 <__assert_fail@plt+0x6068>
   174b4:	movw	r1, #20929	; 0x51c1
   174b8:	mov	r3, #1
   174bc:	movt	r1, #14336	; 0x3800
   174c0:	tst	r1, r3, lsl r2
   174c4:	beq	17524 <__assert_fail@plt+0x6068>
   174c8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   174cc:	tst	r1, #1
   174d0:	bne	177f4 <__assert_fail@plt+0x6338>
   174d4:	cmp	r8, r4
   174d8:	add	r2, r8, #1
   174dc:	mov	r6, r9
   174e0:	mov	r7, r0
   174e4:	mov	r9, #0
   174e8:	movcc	r1, #63	; 0x3f
   174ec:	strbcc	r1, [r5, r8]
   174f0:	cmp	r2, r4
   174f4:	movcc	r1, #34	; 0x22
   174f8:	strbcc	r1, [r5, r2]
   174fc:	add	r2, r8, #2
   17500:	cmp	r2, r4
   17504:	movcc	r1, #34	; 0x22
   17508:	strbcc	r1, [r5, r2]
   1750c:	add	r2, r8, #3
   17510:	add	r8, r8, #4
   17514:	cmp	r2, r4
   17518:	movcc	r1, #63	; 0x3f
   1751c:	strbcc	r1, [r5, r2]
   17520:	b	16e9c <__assert_fail@plt+0x59e0>
   17524:	mov	r9, #0
   17528:	b	16e9c <__assert_fail@plt+0x59e0>
   1752c:	ldr	lr, [sp, #28]
   17530:	ldr	r4, [fp, #-56]	; 0xffffffc8
   17534:	add	r1, r2, r7
   17538:	mov	r2, #0
   1753c:	str	r1, [sp, #44]	; 0x2c
   17540:	tst	r0, #1
   17544:	bne	17660 <__assert_fail@plt+0x61a4>
   17548:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1754c:	tst	r1, #1
   17550:	bne	177f0 <__assert_fail@plt+0x6334>
   17554:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17558:	subs	r2, r1, #2
   1755c:	movwne	r2, #1
   17560:	orr	r2, r2, r4
   17564:	tst	r2, #1
   17568:	bne	175ac <__assert_fail@plt+0x60f0>
   1756c:	ldr	r1, [sp, #88]	; 0x58
   17570:	add	r2, r8, #1
   17574:	mov	r4, #1
   17578:	cmp	r8, r1
   1757c:	movcc	r1, #39	; 0x27
   17580:	strbcc	r1, [r5, r8]
   17584:	ldr	r1, [sp, #88]	; 0x58
   17588:	cmp	r2, r1
   1758c:	movcc	r1, #36	; 0x24
   17590:	strbcc	r1, [r5, r2]
   17594:	ldr	r1, [sp, #88]	; 0x58
   17598:	add	r2, r8, #2
   1759c:	add	r8, r8, #3
   175a0:	cmp	r2, r1
   175a4:	movcc	r1, #39	; 0x27
   175a8:	strbcc	r1, [r5, r2]
   175ac:	ldr	r1, [sp, #88]	; 0x58
   175b0:	add	r2, r8, #1
   175b4:	cmp	r8, r1
   175b8:	movcc	r1, #92	; 0x5c
   175bc:	strbcc	r1, [r5, r8]
   175c0:	ldr	r1, [sp, #88]	; 0x58
   175c4:	cmp	r2, r1
   175c8:	bcs	175dc <__assert_fail@plt+0x6120>
   175cc:	uxtb	r3, r6
   175d0:	mov	r1, #48	; 0x30
   175d4:	orr	r3, r1, r3, lsr #6
   175d8:	strb	r3, [r5, r2]
   175dc:	ldr	r1, [sp, #88]	; 0x58
   175e0:	add	r2, r8, #2
   175e4:	add	r8, r8, #3
   175e8:	cmp	r2, r1
   175ec:	lsrcc	r3, r6, #3
   175f0:	movcc	r1, #6
   175f4:	bficc	r3, r1, #3, #29
   175f8:	mov	r1, #6
   175fc:	bfi	r6, r1, #3, #29
   17600:	strbcc	r3, [r5, r2]
   17604:	mov	r2, #1
   17608:	b	17688 <__assert_fail@plt+0x61cc>
   1760c:	ldr	r1, [sp, #88]	; 0x58
   17610:	ldr	r5, [fp, #-84]	; 0xffffffac
   17614:	ldr	r4, [sp, #88]	; 0x58
   17618:	cmp	r8, r1
   1761c:	movcc	r1, #39	; 0x27
   17620:	strbcc	r1, [r5, r8]
   17624:	add	r1, r8, #1
   17628:	add	r8, r8, #2
   1762c:	cmp	r1, r4
   17630:	movcc	r4, #39	; 0x27
   17634:	strbcc	r4, [r5, r1]
   17638:	mov	r4, #0
   1763c:	ldr	r1, [sp, #88]	; 0x58
   17640:	cmp	r8, r1
   17644:	ldr	r1, [sp, #72]	; 0x48
   17648:	strbcc	r6, [r5, r8]
   1764c:	add	r8, r8, #1
   17650:	ldrb	r6, [r1, r7]
   17654:	mov	r7, r3
   17658:	tst	r0, #1
   1765c:	beq	17548 <__assert_fail@plt+0x608c>
   17660:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17664:	tst	r1, #1
   17668:	beq	17680 <__assert_fail@plt+0x61c4>
   1766c:	ldr	r1, [sp, #88]	; 0x58
   17670:	cmp	r8, r1
   17674:	movcc	r1, #92	; 0x5c
   17678:	strbcc	r1, [r5, r8]
   1767c:	add	r8, r8, #1
   17680:	mov	r1, #0
   17684:	str	r1, [fp, #-52]	; 0xffffffcc
   17688:	ldr	r1, [sp, #44]	; 0x2c
   1768c:	add	r3, r7, #1
   17690:	and	sl, r2, #1
   17694:	cmp	r1, r3
   17698:	bls	176bc <__assert_fail@plt+0x6200>
   1769c:	cmp	sl, #0
   176a0:	mvn	r5, r4
   176a4:	movwne	sl, #1
   176a8:	orr	r5, r5, sl
   176ac:	tst	r5, #1
   176b0:	beq	1760c <__assert_fail@plt+0x6150>
   176b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   176b8:	b	1763c <__assert_fail@plt+0x6180>
   176bc:	str	r4, [fp, #-56]	; 0xffffffc8
   176c0:	ldr	r4, [sp, #88]	; 0x58
   176c4:	cmp	sl, #0
   176c8:	movwne	sl, #1
   176cc:	cmp	sl, #0
   176d0:	beq	1722c <__assert_fail@plt+0x5d70>
   176d4:	b	17260 <__assert_fail@plt+0x5da4>
   176d8:	mov	r9, #0
   176dc:	b	1771c <__assert_fail@plt+0x6260>
   176e0:	ldr	r0, [sp, #24]
   176e4:	mov	r9, #0
   176e8:	cmp	lr, r0
   176ec:	bls	1771c <__assert_fail@plt+0x6260>
   176f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   176f4:	ldr	r2, [sp, #44]	; 0x2c
   176f8:	add	r0, ip, r7
   176fc:	ldrb	r1, [r0, r2]
   17700:	cmp	r1, #0
   17704:	beq	171e4 <__assert_fail@plt+0x5d28>
   17708:	add	r2, r2, #1
   1770c:	add	r1, r7, r2
   17710:	cmp	r1, lr
   17714:	bcc	176fc <__assert_fail@plt+0x6240>
   17718:	b	171e4 <__assert_fail@plt+0x5d28>
   1771c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17720:	ldr	r2, [sp, #44]	; 0x2c
   17724:	b	171e4 <__assert_fail@plt+0x5d28>
   17728:	mov	lr, r7
   1772c:	b	17734 <__assert_fail@plt+0x6278>
   17730:	mvn	lr, #0
   17734:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17738:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1773c:	eor	r0, r1, #2
   17740:	orr	r0, r0, r8
   17744:	clz	r0, r0
   17748:	lsr	r0, r0, #5
   1774c:	tst	r2, r0
   17750:	bne	177f4 <__assert_fail@plt+0x6338>
   17754:	subs	r0, r1, #2
   17758:	movwne	r0, #1
   1775c:	orr	r0, r2, r0
   17760:	tst	r0, #1
   17764:	ldreq	r0, [sp, #60]	; 0x3c
   17768:	eoreq	r0, r0, #1
   1776c:	tsteq	r0, #1
   17770:	bne	17888 <__assert_fail@plt+0x63cc>
   17774:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17778:	mov	sl, lr
   1777c:	tst	r0, #1
   17780:	bne	17854 <__assert_fail@plt+0x6398>
   17784:	ldr	r6, [sp, #56]	; 0x38
   17788:	mov	r9, #0
   1778c:	cmp	r6, #0
   17790:	beq	17880 <__assert_fail@plt+0x63c4>
   17794:	ldr	r0, [sp, #84]	; 0x54
   17798:	mov	r1, #0
   1779c:	mov	r7, #2
   177a0:	cmp	r4, #0
   177a4:	str	r1, [fp, #-48]	; 0xffffffd0
   177a8:	mov	r1, #0
   177ac:	str	r1, [fp, #-76]	; 0xffffffb4
   177b0:	beq	16950 <__assert_fail@plt+0x5494>
   177b4:	b	17888 <__assert_fail@plt+0x63cc>
   177b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   177bc:	ldr	r1, [fp, #12]
   177c0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   177c4:	mov	lr, r4
   177c8:	mov	r4, r6
   177cc:	b	17814 <__assert_fail@plt+0x6358>
   177d0:	tst	ip, #1
   177d4:	ldr	r5, [fp, #-84]	; 0xffffffac
   177d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   177dc:	ldr	r1, [fp, #12]
   177e0:	mov	r0, #2
   177e4:	movwne	r0, #4
   177e8:	mov	r2, r0
   177ec:	b	17814 <__assert_fail@plt+0x6358>
   177f0:	ldr	r4, [sp, #88]	; 0x58
   177f4:	ldr	r1, [sp, #84]	; 0x54
   177f8:	mov	r0, #2
   177fc:	tst	r1, #1
   17800:	movwne	r0, #4
   17804:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17808:	ldr	r1, [fp, #12]
   1780c:	cmp	r2, #2
   17810:	moveq	r2, r0
   17814:	mov	r0, #0
   17818:	bic	r1, r1, #2
   1781c:	str	r2, [sp]
   17820:	mov	r2, ip
   17824:	mov	r3, lr
   17828:	str	r0, [sp, #8]
   1782c:	ldr	r0, [sp, #76]	; 0x4c
   17830:	str	r1, [sp, #4]
   17834:	mov	r1, r4
   17838:	str	r0, [sp, #12]
   1783c:	ldr	r0, [sp, #80]	; 0x50
   17840:	str	r0, [sp, #16]
   17844:	mov	r0, r5
   17848:	bl	168c0 <__assert_fail@plt+0x5404>
   1784c:	mov	r8, r0
   17850:	b	178d4 <__assert_fail@plt+0x6418>
   17854:	mov	r0, #5
   17858:	ldr	r1, [sp, #56]	; 0x38
   1785c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17860:	mov	r3, sl
   17864:	str	r0, [sp]
   17868:	ldr	r0, [fp, #12]
   1786c:	str	r0, [sp, #4]
   17870:	ldr	r0, [fp, #16]
   17874:	str	r0, [sp, #8]
   17878:	ldr	r0, [sp, #76]	; 0x4c
   1787c:	b	17838 <__assert_fail@plt+0x637c>
   17880:	mov	r0, #0
   17884:	str	r0, [fp, #-76]	; 0xffffffb4
   17888:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1788c:	cmp	r1, #0
   17890:	beq	178c8 <__assert_fail@plt+0x640c>
   17894:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17898:	tst	r0, #1
   1789c:	bne	178c8 <__assert_fail@plt+0x640c>
   178a0:	ldrb	r0, [r1]
   178a4:	cmp	r0, #0
   178a8:	beq	178c8 <__assert_fail@plt+0x640c>
   178ac:	add	r1, r1, #1
   178b0:	cmp	r8, r4
   178b4:	strbcc	r0, [r5, r8]
   178b8:	add	r8, r8, #1
   178bc:	ldrb	r0, [r1], #1
   178c0:	cmp	r0, #0
   178c4:	bne	178b0 <__assert_fail@plt+0x63f4>
   178c8:	cmp	r8, r4
   178cc:	movcc	r0, #0
   178d0:	strbcc	r0, [r5, r8]
   178d4:	mov	r0, r8
   178d8:	sub	sp, fp, #28
   178dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e0:	mov	r0, #4
   178e4:	b	17804 <__assert_fail@plt+0x6348>
   178e8:	bl	11474 <abort@plt>
   178ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178f0:	add	fp, sp, #28
   178f4:	sub	sp, sp, #28
   178f8:	movw	r5, #49592	; 0xc1b8
   178fc:	cmp	r2, #0
   17900:	mov	r4, r1
   17904:	mov	r7, r0
   17908:	str	r0, [sp, #20]
   1790c:	movt	r5, #2
   17910:	movne	r5, r2
   17914:	bl	11378 <__errno_location@plt>
   17918:	mov	sl, r0
   1791c:	ldr	r2, [r5, #40]	; 0x28
   17920:	ldr	r3, [r5, #44]	; 0x2c
   17924:	ldm	r5, {r0, r1}
   17928:	orr	r8, r1, #1
   1792c:	add	r9, r5, #8
   17930:	mov	r1, #0
   17934:	ldr	r6, [sl]
   17938:	stm	sp, {r0, r8, r9}
   1793c:	mov	r0, #0
   17940:	str	r2, [sp, #12]
   17944:	str	r3, [sp, #16]
   17948:	mov	r2, r7
   1794c:	mov	r3, r4
   17950:	str	r6, [sp, #24]
   17954:	mov	r6, r4
   17958:	bl	168c0 <__assert_fail@plt+0x5404>
   1795c:	add	r7, r0, #1
   17960:	mov	r0, r7
   17964:	bl	18bac <__assert_fail@plt+0x76f0>
   17968:	mov	r4, r0
   1796c:	ldr	r0, [r5]
   17970:	ldr	r2, [r5, #44]	; 0x2c
   17974:	ldr	r1, [r5, #40]	; 0x28
   17978:	mov	r3, r6
   1797c:	stm	sp, {r0, r8, r9}
   17980:	str	r2, [sp, #16]
   17984:	ldr	r2, [sp, #20]
   17988:	str	r1, [sp, #12]
   1798c:	mov	r0, r4
   17990:	mov	r1, r7
   17994:	bl	168c0 <__assert_fail@plt+0x5404>
   17998:	ldr	r0, [sp, #24]
   1799c:	str	r0, [sl]
   179a0:	mov	r0, r4
   179a4:	sub	sp, fp, #28
   179a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179b0:	add	fp, sp, #28
   179b4:	sub	sp, sp, #36	; 0x24
   179b8:	movw	r8, #49592	; 0xc1b8
   179bc:	cmp	r3, #0
   179c0:	mov	r4, r2
   179c4:	str	r2, [sp, #24]
   179c8:	mov	r5, r1
   179cc:	mov	r6, r0
   179d0:	str	r0, [sp, #20]
   179d4:	movt	r8, #2
   179d8:	movne	r8, r3
   179dc:	bl	11378 <__errno_location@plt>
   179e0:	str	r0, [sp, #28]
   179e4:	ldr	r1, [r8, #40]	; 0x28
   179e8:	ldr	r2, [r8, #44]	; 0x2c
   179ec:	ldr	r7, [r0]
   179f0:	cmp	r4, #0
   179f4:	add	sl, r8, #8
   179f8:	mov	r0, #0
   179fc:	ldm	r8, {r3, r9}
   17a00:	orreq	r9, r9, #1
   17a04:	stm	sp, {r3, r9, sl}
   17a08:	str	r1, [sp, #12]
   17a0c:	str	r2, [sp, #16]
   17a10:	mov	r1, #0
   17a14:	mov	r2, r6
   17a18:	mov	r3, r5
   17a1c:	str	r7, [sp, #32]
   17a20:	mov	r7, r5
   17a24:	bl	168c0 <__assert_fail@plt+0x5404>
   17a28:	add	r4, r0, #1
   17a2c:	mov	r5, r0
   17a30:	mov	r0, r4
   17a34:	bl	18bac <__assert_fail@plt+0x76f0>
   17a38:	mov	r6, r0
   17a3c:	ldr	r0, [r8]
   17a40:	ldr	r2, [r8, #44]	; 0x2c
   17a44:	ldr	r1, [r8, #40]	; 0x28
   17a48:	mov	r3, r7
   17a4c:	stm	sp, {r0, r9, sl}
   17a50:	str	r2, [sp, #16]
   17a54:	ldr	r2, [sp, #20]
   17a58:	str	r1, [sp, #12]
   17a5c:	mov	r0, r6
   17a60:	mov	r1, r4
   17a64:	bl	168c0 <__assert_fail@plt+0x5404>
   17a68:	ldr	r0, [sp, #24]
   17a6c:	ldr	r1, [sp, #32]
   17a70:	ldr	r2, [sp, #28]
   17a74:	cmp	r0, #0
   17a78:	str	r1, [r2]
   17a7c:	strne	r5, [r0]
   17a80:	mov	r0, r6
   17a84:	sub	sp, fp, #28
   17a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17a90:	add	fp, sp, #24
   17a94:	movw	r5, #49460	; 0xc134
   17a98:	movw	r8, #49456	; 0xc130
   17a9c:	movt	r5, #2
   17aa0:	movt	r8, #2
   17aa4:	ldr	r0, [r5]
   17aa8:	ldr	r4, [r8]
   17aac:	cmp	r0, #2
   17ab0:	blt	17adc <__assert_fail@plt+0x6620>
   17ab4:	add	r7, r4, #12
   17ab8:	mov	r6, #0
   17abc:	ldr	r0, [r7, r6, lsl #3]
   17ac0:	bl	12db4 <__assert_fail@plt+0x18f8>
   17ac4:	ldr	r1, [r5]
   17ac8:	add	r2, r6, #2
   17acc:	add	r0, r6, #1
   17ad0:	mov	r6, r0
   17ad4:	cmp	r2, r1
   17ad8:	blt	17abc <__assert_fail@plt+0x6600>
   17adc:	ldr	r0, [r4, #4]
   17ae0:	movw	r9, #49640	; 0xc1e8
   17ae4:	movw	r7, #49464	; 0xc138
   17ae8:	movt	r9, #2
   17aec:	movt	r7, #2
   17af0:	cmp	r0, r9
   17af4:	beq	17b04 <__assert_fail@plt+0x6648>
   17af8:	bl	12db4 <__assert_fail@plt+0x18f8>
   17afc:	mov	r0, #256	; 0x100
   17b00:	stm	r7, {r0, r9}
   17b04:	cmp	r4, r7
   17b08:	beq	17b18 <__assert_fail@plt+0x665c>
   17b0c:	mov	r0, r4
   17b10:	bl	12db4 <__assert_fail@plt+0x18f8>
   17b14:	str	r7, [r8]
   17b18:	mov	r0, #1
   17b1c:	str	r0, [r5]
   17b20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b24:	movw	r3, #49592	; 0xc1b8
   17b28:	mvn	r2, #0
   17b2c:	movt	r3, #2
   17b30:	b	17b34 <__assert_fail@plt+0x6678>
   17b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b38:	add	fp, sp, #28
   17b3c:	sub	sp, sp, #44	; 0x2c
   17b40:	mov	r7, r3
   17b44:	str	r2, [sp, #36]	; 0x24
   17b48:	str	r1, [sp, #32]
   17b4c:	mov	r5, r0
   17b50:	bl	11378 <__errno_location@plt>
   17b54:	cmp	r5, #0
   17b58:	bmi	17cc8 <__assert_fail@plt+0x680c>
   17b5c:	cmn	r5, #-2147483647	; 0x80000001
   17b60:	beq	17cc8 <__assert_fail@plt+0x680c>
   17b64:	movw	r8, #49460	; 0xc134
   17b68:	movw	r4, #49456	; 0xc130
   17b6c:	str	r0, [sp, #28]
   17b70:	ldr	r0, [r0]
   17b74:	movt	r8, #2
   17b78:	movt	r4, #2
   17b7c:	ldr	r1, [r8]
   17b80:	ldr	r6, [r4]
   17b84:	str	r0, [sp, #24]
   17b88:	cmp	r1, r5
   17b8c:	ble	17b98 <__assert_fail@plt+0x66dc>
   17b90:	mov	sl, r6
   17b94:	b	17c04 <__assert_fail@plt+0x6748>
   17b98:	movw	r9, #49464	; 0xc138
   17b9c:	mov	r0, #8
   17ba0:	str	r1, [fp, #-32]	; 0xffffffe0
   17ba4:	sub	r1, r5, r1
   17ba8:	mvn	r3, #-2147483648	; 0x80000000
   17bac:	movt	r9, #2
   17bb0:	str	r0, [sp]
   17bb4:	add	r2, r1, #1
   17bb8:	sub	r1, fp, #32
   17bbc:	subs	r0, r6, r9
   17bc0:	movne	r0, r6
   17bc4:	bl	18dac <__assert_fail@plt+0x78f0>
   17bc8:	mov	sl, r0
   17bcc:	cmp	r6, r9
   17bd0:	str	r0, [r4]
   17bd4:	bne	17be0 <__assert_fail@plt+0x6724>
   17bd8:	ldrd	r0, [r9]
   17bdc:	stm	sl, {r0, r1}
   17be0:	ldr	r1, [r8]
   17be4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17be8:	add	r0, sl, r1, lsl #3
   17bec:	sub	r1, r2, r1
   17bf0:	lsl	r2, r1, #3
   17bf4:	mov	r1, #0
   17bf8:	bl	11390 <memset@plt>
   17bfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c00:	str	r0, [r8]
   17c04:	mov	r9, sl
   17c08:	ldm	r7, {r0, r1}
   17c0c:	orr	r8, r1, #1
   17c10:	add	r1, r7, #8
   17c14:	ldr	r2, [r7, #40]	; 0x28
   17c18:	ldr	r3, [r7, #44]	; 0x2c
   17c1c:	ldr	r6, [r9, r5, lsl #3]!
   17c20:	str	r1, [sp, #20]
   17c24:	ldr	r4, [r9, #4]!
   17c28:	stm	sp, {r0, r8}
   17c2c:	add	r0, sp, #8
   17c30:	stm	r0, {r1, r2, r3}
   17c34:	ldr	r2, [sp, #32]
   17c38:	ldr	r3, [sp, #36]	; 0x24
   17c3c:	mov	r1, r6
   17c40:	mov	r0, r4
   17c44:	bl	168c0 <__assert_fail@plt+0x5404>
   17c48:	cmp	r6, r0
   17c4c:	bhi	17cb0 <__assert_fail@plt+0x67f4>
   17c50:	add	r6, r0, #1
   17c54:	movw	r0, #49640	; 0xc1e8
   17c58:	movt	r0, #2
   17c5c:	str	r6, [sl, r5, lsl #3]
   17c60:	cmp	r4, r0
   17c64:	beq	17c70 <__assert_fail@plt+0x67b4>
   17c68:	mov	r0, r4
   17c6c:	bl	12db4 <__assert_fail@plt+0x18f8>
   17c70:	mov	r0, r6
   17c74:	bl	18bac <__assert_fail@plt+0x76f0>
   17c78:	str	r0, [r9]
   17c7c:	mov	r4, r0
   17c80:	add	r3, sp, #8
   17c84:	ldr	r0, [r7]
   17c88:	ldr	r1, [r7, #40]	; 0x28
   17c8c:	ldr	r2, [r7, #44]	; 0x2c
   17c90:	stm	sp, {r0, r8}
   17c94:	ldr	r0, [sp, #20]
   17c98:	stm	r3, {r0, r1, r2}
   17c9c:	ldr	r2, [sp, #32]
   17ca0:	ldr	r3, [sp, #36]	; 0x24
   17ca4:	mov	r0, r4
   17ca8:	mov	r1, r6
   17cac:	bl	168c0 <__assert_fail@plt+0x5404>
   17cb0:	ldr	r0, [sp, #28]
   17cb4:	ldr	r1, [sp, #24]
   17cb8:	str	r1, [r0]
   17cbc:	mov	r0, r4
   17cc0:	sub	sp, fp, #28
   17cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cc8:	bl	11474 <abort@plt>
   17ccc:	movw	r3, #49592	; 0xc1b8
   17cd0:	movt	r3, #2
   17cd4:	b	17b34 <__assert_fail@plt+0x6678>
   17cd8:	movw	r3, #49592	; 0xc1b8
   17cdc:	mov	r1, r0
   17ce0:	mov	r0, #0
   17ce4:	mvn	r2, #0
   17ce8:	movt	r3, #2
   17cec:	b	17b34 <__assert_fail@plt+0x6678>
   17cf0:	movw	r3, #49592	; 0xc1b8
   17cf4:	mov	r2, r1
   17cf8:	mov	r1, r0
   17cfc:	mov	r0, #0
   17d00:	movt	r3, #2
   17d04:	b	17b34 <__assert_fail@plt+0x6678>
   17d08:	push	{fp, lr}
   17d0c:	mov	fp, sp
   17d10:	sub	sp, sp, #48	; 0x30
   17d14:	vmov.i32	q8, #0	; 0x00000000
   17d18:	mov	ip, #32
   17d1c:	mov	r3, sp
   17d20:	mov	lr, r2
   17d24:	cmp	r1, #10
   17d28:	add	r2, r3, #16
   17d2c:	vst1.64	{d16-d17}, [r3], ip
   17d30:	vst1.64	{d16-d17}, [r2]
   17d34:	vst1.64	{d16-d17}, [r3]
   17d38:	beq	17d58 <__assert_fail@plt+0x689c>
   17d3c:	str	r1, [sp]
   17d40:	mov	r3, sp
   17d44:	mov	r1, lr
   17d48:	mvn	r2, #0
   17d4c:	bl	17b34 <__assert_fail@plt+0x6678>
   17d50:	mov	sp, fp
   17d54:	pop	{fp, pc}
   17d58:	bl	11474 <abort@plt>
   17d5c:	push	{r4, sl, fp, lr}
   17d60:	add	fp, sp, #8
   17d64:	sub	sp, sp, #48	; 0x30
   17d68:	vmov.i32	q8, #0	; 0x00000000
   17d6c:	mov	ip, r3
   17d70:	mov	r3, sp
   17d74:	mov	lr, #32
   17d78:	cmp	r1, #10
   17d7c:	add	r4, r3, #16
   17d80:	vst1.64	{d16-d17}, [r3], lr
   17d84:	vst1.64	{d16-d17}, [r4]
   17d88:	vst1.64	{d16-d17}, [r3]
   17d8c:	beq	17dac <__assert_fail@plt+0x68f0>
   17d90:	str	r1, [sp]
   17d94:	mov	r1, r2
   17d98:	mov	r3, sp
   17d9c:	mov	r2, ip
   17da0:	bl	17b34 <__assert_fail@plt+0x6678>
   17da4:	sub	sp, fp, #8
   17da8:	pop	{r4, sl, fp, pc}
   17dac:	bl	11474 <abort@plt>
   17db0:	push	{fp, lr}
   17db4:	mov	fp, sp
   17db8:	sub	sp, sp, #48	; 0x30
   17dbc:	vmov.i32	q8, #0	; 0x00000000
   17dc0:	mov	r3, sp
   17dc4:	mov	ip, #32
   17dc8:	cmp	r0, #10
   17dcc:	add	r2, r3, #16
   17dd0:	vst1.64	{d16-d17}, [r3], ip
   17dd4:	vst1.64	{d16-d17}, [r2]
   17dd8:	vst1.64	{d16-d17}, [r3]
   17ddc:	beq	17dfc <__assert_fail@plt+0x6940>
   17de0:	str	r0, [sp]
   17de4:	mov	r3, sp
   17de8:	mov	r0, #0
   17dec:	mvn	r2, #0
   17df0:	bl	17b34 <__assert_fail@plt+0x6678>
   17df4:	mov	sp, fp
   17df8:	pop	{fp, pc}
   17dfc:	bl	11474 <abort@plt>
   17e00:	push	{fp, lr}
   17e04:	mov	fp, sp
   17e08:	sub	sp, sp, #48	; 0x30
   17e0c:	vmov.i32	q8, #0	; 0x00000000
   17e10:	mov	r3, sp
   17e14:	mov	ip, #32
   17e18:	cmp	r0, #10
   17e1c:	add	lr, r3, #16
   17e20:	vst1.64	{d16-d17}, [r3], ip
   17e24:	vst1.64	{d16-d17}, [lr]
   17e28:	vst1.64	{d16-d17}, [r3]
   17e2c:	beq	17e48 <__assert_fail@plt+0x698c>
   17e30:	str	r0, [sp]
   17e34:	mov	r3, sp
   17e38:	mov	r0, #0
   17e3c:	bl	17b34 <__assert_fail@plt+0x6678>
   17e40:	mov	sp, fp
   17e44:	pop	{fp, pc}
   17e48:	bl	11474 <abort@plt>
   17e4c:	push	{r4, sl, fp, lr}
   17e50:	add	fp, sp, #8
   17e54:	sub	sp, sp, #48	; 0x30
   17e58:	mov	lr, r0
   17e5c:	movw	r0, #49592	; 0xc1b8
   17e60:	mov	ip, r1
   17e64:	mov	r1, #32
   17e68:	mov	r4, #1
   17e6c:	movt	r0, #2
   17e70:	add	r3, r0, #16
   17e74:	vld1.64	{d16-d17}, [r0], r1
   17e78:	vld1.64	{d20-d21}, [r0]
   17e7c:	vld1.64	{d18-d19}, [r3]
   17e80:	mov	r3, sp
   17e84:	add	r0, r3, #32
   17e88:	add	r1, r3, #16
   17e8c:	vst1.64	{d20-d21}, [r0]
   17e90:	mov	r0, #28
   17e94:	vst1.64	{d18-d19}, [r1]
   17e98:	mov	r1, r3
   17e9c:	and	r0, r0, r2, lsr #3
   17ea0:	and	r2, r2, #31
   17ea4:	vst1.64	{d16-d17}, [r1], r0
   17ea8:	ldr	r0, [r1, #8]
   17eac:	bic	r4, r4, r0, lsr r2
   17eb0:	eor	r0, r0, r4, lsl r2
   17eb4:	mov	r2, ip
   17eb8:	str	r0, [r1, #8]
   17ebc:	mov	r0, #0
   17ec0:	mov	r1, lr
   17ec4:	bl	17b34 <__assert_fail@plt+0x6678>
   17ec8:	sub	sp, fp, #8
   17ecc:	pop	{r4, sl, fp, pc}
   17ed0:	push	{fp, lr}
   17ed4:	mov	fp, sp
   17ed8:	sub	sp, sp, #48	; 0x30
   17edc:	mov	ip, r0
   17ee0:	movw	r0, #49592	; 0xc1b8
   17ee4:	mov	r2, #32
   17ee8:	movt	r0, #2
   17eec:	add	r3, r0, #16
   17ef0:	vld1.64	{d16-d17}, [r0], r2
   17ef4:	vld1.64	{d20-d21}, [r0]
   17ef8:	vld1.64	{d18-d19}, [r3]
   17efc:	mov	r3, sp
   17f00:	add	r0, r3, #32
   17f04:	add	r2, r3, #16
   17f08:	vst1.64	{d20-d21}, [r0]
   17f0c:	mov	r0, #28
   17f10:	vst1.64	{d18-d19}, [r2]
   17f14:	mov	r2, r3
   17f18:	and	r0, r0, r1, lsr #3
   17f1c:	and	r1, r1, #31
   17f20:	vst1.64	{d16-d17}, [r2], r0
   17f24:	mov	r0, #1
   17f28:	ldr	lr, [r2, #8]
   17f2c:	bic	r0, r0, lr, lsr r1
   17f30:	eor	r0, lr, r0, lsl r1
   17f34:	mov	r1, ip
   17f38:	str	r0, [r2, #8]
   17f3c:	mov	r0, #0
   17f40:	mvn	r2, #0
   17f44:	bl	17b34 <__assert_fail@plt+0x6678>
   17f48:	mov	sp, fp
   17f4c:	pop	{fp, pc}
   17f50:	push	{fp, lr}
   17f54:	mov	fp, sp
   17f58:	sub	sp, sp, #48	; 0x30
   17f5c:	mov	r1, r0
   17f60:	movw	r0, #49592	; 0xc1b8
   17f64:	mov	r3, #32
   17f68:	movt	r0, #2
   17f6c:	add	r2, r0, #16
   17f70:	vld1.64	{d16-d17}, [r0], r3
   17f74:	mov	r3, sp
   17f78:	vld1.64	{d18-d19}, [r2]
   17f7c:	vld1.64	{d20-d21}, [r0]
   17f80:	add	r2, r3, #16
   17f84:	add	r0, r3, #32
   17f88:	vst1.64	{d18-d19}, [r2]
   17f8c:	vst1.64	{d20-d21}, [r0]
   17f90:	mov	r0, #12
   17f94:	mov	r2, r3
   17f98:	vst1.64	{d16-d17}, [r2], r0
   17f9c:	ldr	r0, [r2]
   17fa0:	orr	r0, r0, #67108864	; 0x4000000
   17fa4:	str	r0, [r2]
   17fa8:	mov	r0, #0
   17fac:	mvn	r2, #0
   17fb0:	bl	17b34 <__assert_fail@plt+0x6678>
   17fb4:	mov	sp, fp
   17fb8:	pop	{fp, pc}
   17fbc:	push	{fp, lr}
   17fc0:	mov	fp, sp
   17fc4:	sub	sp, sp, #48	; 0x30
   17fc8:	mov	ip, r1
   17fcc:	mov	r1, r0
   17fd0:	movw	r0, #49592	; 0xc1b8
   17fd4:	mov	r2, #32
   17fd8:	movt	r0, #2
   17fdc:	add	r3, r0, #16
   17fe0:	vld1.64	{d16-d17}, [r0], r2
   17fe4:	vld1.64	{d18-d19}, [r3]
   17fe8:	vld1.64	{d20-d21}, [r0]
   17fec:	mov	r3, sp
   17ff0:	add	r2, r3, #16
   17ff4:	add	r0, r3, #32
   17ff8:	vst1.64	{d18-d19}, [r2]
   17ffc:	vst1.64	{d20-d21}, [r0]
   18000:	mov	r0, #12
   18004:	mov	r2, r3
   18008:	vst1.64	{d16-d17}, [r2], r0
   1800c:	ldr	r0, [r2]
   18010:	orr	r0, r0, #67108864	; 0x4000000
   18014:	str	r0, [r2]
   18018:	mov	r0, #0
   1801c:	mov	r2, ip
   18020:	bl	17b34 <__assert_fail@plt+0x6678>
   18024:	mov	sp, fp
   18028:	pop	{fp, pc}
   1802c:	push	{r4, sl, fp, lr}
   18030:	add	fp, sp, #8
   18034:	sub	sp, sp, #96	; 0x60
   18038:	vmov.i32	q8, #0	; 0x00000000
   1803c:	mov	ip, r2
   18040:	mov	r2, sp
   18044:	mov	r4, #28
   18048:	cmp	r1, #10
   1804c:	mov	r3, r2
   18050:	add	lr, r2, #16
   18054:	vst1.64	{d16-d17}, [r3], r4
   18058:	vst1.64	{d16-d17}, [lr]
   1805c:	vst1.32	{d16-d17}, [r3]
   18060:	beq	180b0 <__assert_fail@plt+0x6bf4>
   18064:	vld1.64	{d16-d17}, [r2], r4
   18068:	vld1.64	{d18-d19}, [lr]
   1806c:	add	r3, sp, #48	; 0x30
   18070:	vld1.32	{d20-d21}, [r2]
   18074:	add	r2, r3, #20
   18078:	add	r4, r3, #4
   1807c:	vst1.32	{d18-d19}, [r2]
   18080:	add	r2, r3, #32
   18084:	vst1.32	{d16-d17}, [r4]
   18088:	vst1.32	{d20-d21}, [r2]
   1808c:	str	r1, [sp, #48]	; 0x30
   18090:	mvn	r2, #0
   18094:	ldr	r1, [sp, #60]	; 0x3c
   18098:	orr	r1, r1, #67108864	; 0x4000000
   1809c:	str	r1, [sp, #60]	; 0x3c
   180a0:	mov	r1, ip
   180a4:	bl	17b34 <__assert_fail@plt+0x6678>
   180a8:	sub	sp, fp, #8
   180ac:	pop	{r4, sl, fp, pc}
   180b0:	bl	11474 <abort@plt>
   180b4:	push	{r4, r5, r6, sl, fp, lr}
   180b8:	add	fp, sp, #16
   180bc:	sub	sp, sp, #48	; 0x30
   180c0:	mov	ip, r3
   180c4:	movw	r3, #49592	; 0xc1b8
   180c8:	mov	r6, #32
   180cc:	cmp	r1, #0
   180d0:	mov	r4, sp
   180d4:	movt	r3, #2
   180d8:	cmpne	r2, #0
   180dc:	add	r5, r4, #16
   180e0:	add	lr, r3, #16
   180e4:	vld1.64	{d16-d17}, [r3], r6
   180e8:	vld1.64	{d18-d19}, [lr]
   180ec:	vld1.64	{d20-d21}, [r3]
   180f0:	mov	r3, #10
   180f4:	vst1.64	{d16-d17}, [r4], r6
   180f8:	vst1.64	{d18-d19}, [r5]
   180fc:	vst1.64	{d20-d21}, [r4]
   18100:	str	r3, [sp]
   18104:	bne	1810c <__assert_fail@plt+0x6c50>
   18108:	bl	11474 <abort@plt>
   1810c:	str	r2, [sp, #44]	; 0x2c
   18110:	str	r1, [sp, #40]	; 0x28
   18114:	mov	r3, sp
   18118:	mov	r1, ip
   1811c:	mvn	r2, #0
   18120:	bl	17b34 <__assert_fail@plt+0x6678>
   18124:	sub	sp, fp, #16
   18128:	pop	{r4, r5, r6, sl, fp, pc}
   1812c:	push	{r4, r5, r6, sl, fp, lr}
   18130:	add	fp, sp, #16
   18134:	sub	sp, sp, #48	; 0x30
   18138:	mov	lr, r3
   1813c:	movw	r3, #49592	; 0xc1b8
   18140:	mov	r6, #32
   18144:	cmp	r1, #0
   18148:	mov	r4, sp
   1814c:	movt	r3, #2
   18150:	cmpne	r2, #0
   18154:	add	r5, r4, #16
   18158:	add	ip, r3, #16
   1815c:	vld1.64	{d16-d17}, [r3], r6
   18160:	vld1.64	{d18-d19}, [ip]
   18164:	vld1.64	{d20-d21}, [r3]
   18168:	mov	r3, #10
   1816c:	vst1.64	{d16-d17}, [r4], r6
   18170:	vst1.64	{d18-d19}, [r5]
   18174:	vst1.64	{d20-d21}, [r4]
   18178:	str	r3, [sp]
   1817c:	bne	18184 <__assert_fail@plt+0x6cc8>
   18180:	bl	11474 <abort@plt>
   18184:	ldr	ip, [fp, #8]
   18188:	str	r2, [sp, #44]	; 0x2c
   1818c:	str	r1, [sp, #40]	; 0x28
   18190:	mov	r3, sp
   18194:	mov	r1, lr
   18198:	mov	r2, ip
   1819c:	bl	17b34 <__assert_fail@plt+0x6678>
   181a0:	sub	sp, fp, #16
   181a4:	pop	{r4, r5, r6, sl, fp, pc}
   181a8:	push	{r4, sl, fp, lr}
   181ac:	add	fp, sp, #8
   181b0:	sub	sp, sp, #48	; 0x30
   181b4:	movw	r3, #49592	; 0xc1b8
   181b8:	mov	lr, #32
   181bc:	mov	ip, r2
   181c0:	cmp	r0, #0
   181c4:	movt	r3, #2
   181c8:	cmpne	r1, #0
   181cc:	add	r2, r3, #16
   181d0:	vld1.64	{d16-d17}, [r3], lr
   181d4:	vld1.64	{d20-d21}, [r3]
   181d8:	vld1.64	{d18-d19}, [r2]
   181dc:	mov	r2, sp
   181e0:	add	r4, r2, #16
   181e4:	vst1.64	{d16-d17}, [r2], lr
   181e8:	vst1.64	{d20-d21}, [r2]
   181ec:	mov	r2, #10
   181f0:	vst1.64	{d18-d19}, [r4]
   181f4:	str	r2, [sp]
   181f8:	bne	18200 <__assert_fail@plt+0x6d44>
   181fc:	bl	11474 <abort@plt>
   18200:	str	r1, [sp, #44]	; 0x2c
   18204:	str	r0, [sp, #40]	; 0x28
   18208:	mov	r3, sp
   1820c:	mov	r0, #0
   18210:	mov	r1, ip
   18214:	mvn	r2, #0
   18218:	bl	17b34 <__assert_fail@plt+0x6678>
   1821c:	sub	sp, fp, #8
   18220:	pop	{r4, sl, fp, pc}
   18224:	push	{r4, r5, fp, lr}
   18228:	add	fp, sp, #8
   1822c:	sub	sp, sp, #48	; 0x30
   18230:	mov	ip, r3
   18234:	movw	r3, #49592	; 0xc1b8
   18238:	mov	r4, #32
   1823c:	mov	lr, r2
   18240:	cmp	r0, #0
   18244:	movt	r3, #2
   18248:	cmpne	r1, #0
   1824c:	add	r2, r3, #16
   18250:	vld1.64	{d16-d17}, [r3], r4
   18254:	vld1.64	{d20-d21}, [r3]
   18258:	vld1.64	{d18-d19}, [r2]
   1825c:	mov	r2, sp
   18260:	add	r5, r2, #16
   18264:	vst1.64	{d16-d17}, [r2], r4
   18268:	vst1.64	{d20-d21}, [r2]
   1826c:	mov	r2, #10
   18270:	vst1.64	{d18-d19}, [r5]
   18274:	str	r2, [sp]
   18278:	bne	18280 <__assert_fail@plt+0x6dc4>
   1827c:	bl	11474 <abort@plt>
   18280:	str	r1, [sp, #44]	; 0x2c
   18284:	str	r0, [sp, #40]	; 0x28
   18288:	mov	r3, sp
   1828c:	mov	r0, #0
   18290:	mov	r1, lr
   18294:	mov	r2, ip
   18298:	bl	17b34 <__assert_fail@plt+0x6678>
   1829c:	sub	sp, fp, #8
   182a0:	pop	{r4, r5, fp, pc}
   182a4:	movw	r3, #49472	; 0xc140
   182a8:	movt	r3, #2
   182ac:	b	17b34 <__assert_fail@plt+0x6678>
   182b0:	movw	r3, #49472	; 0xc140
   182b4:	mov	r2, r1
   182b8:	mov	r1, r0
   182bc:	mov	r0, #0
   182c0:	movt	r3, #2
   182c4:	b	17b34 <__assert_fail@plt+0x6678>
   182c8:	movw	r3, #49472	; 0xc140
   182cc:	mvn	r2, #0
   182d0:	movt	r3, #2
   182d4:	b	17b34 <__assert_fail@plt+0x6678>
   182d8:	movw	r3, #49472	; 0xc140
   182dc:	mov	r1, r0
   182e0:	mov	r0, #0
   182e4:	mvn	r2, #0
   182e8:	movt	r3, #2
   182ec:	b	17b34 <__assert_fail@plt+0x6678>
   182f0:	push	{r4, r5, fp, lr}
   182f4:	add	fp, sp, #8
   182f8:	mov	r5, r0
   182fc:	mov	r4, r1
   18300:	mov	r0, #0
   18304:	mov	r2, #5
   18308:	mov	r1, r5
   1830c:	bl	1124c <dcgettext@plt>
   18310:	cmp	r0, r5
   18314:	popne	{r4, r5, fp, pc}
   18318:	bl	1a420 <__assert_fail@plt+0x8f64>
   1831c:	ldrb	r1, [r0]
   18320:	and	r1, r1, #223	; 0xdf
   18324:	cmp	r1, #71	; 0x47
   18328:	beq	18390 <__assert_fail@plt+0x6ed4>
   1832c:	cmp	r1, #85	; 0x55
   18330:	bne	183e8 <__assert_fail@plt+0x6f2c>
   18334:	ldrb	r1, [r0, #1]
   18338:	and	r1, r1, #223	; 0xdf
   1833c:	cmp	r1, #84	; 0x54
   18340:	bne	183e8 <__assert_fail@plt+0x6f2c>
   18344:	ldrb	r1, [r0, #2]
   18348:	and	r1, r1, #223	; 0xdf
   1834c:	cmp	r1, #70	; 0x46
   18350:	bne	183e8 <__assert_fail@plt+0x6f2c>
   18354:	ldrb	r1, [r0, #3]
   18358:	cmp	r1, #45	; 0x2d
   1835c:	bne	183e8 <__assert_fail@plt+0x6f2c>
   18360:	ldrb	r1, [r0, #4]
   18364:	cmp	r1, #56	; 0x38
   18368:	bne	183e8 <__assert_fail@plt+0x6f2c>
   1836c:	ldrb	r0, [r0, #5]
   18370:	cmp	r0, #0
   18374:	bne	183e8 <__assert_fail@plt+0x6f2c>
   18378:	ldrb	r1, [r5]
   1837c:	movw	r2, #46978	; 0xb782
   18380:	movw	r0, #46982	; 0xb786
   18384:	movt	r2, #1
   18388:	movt	r0, #1
   1838c:	b	18418 <__assert_fail@plt+0x6f5c>
   18390:	ldrb	r1, [r0, #1]
   18394:	and	r1, r1, #223	; 0xdf
   18398:	cmp	r1, #66	; 0x42
   1839c:	bne	183e8 <__assert_fail@plt+0x6f2c>
   183a0:	ldrb	r1, [r0, #2]
   183a4:	cmp	r1, #49	; 0x31
   183a8:	bne	183e8 <__assert_fail@plt+0x6f2c>
   183ac:	ldrb	r1, [r0, #3]
   183b0:	cmp	r1, #56	; 0x38
   183b4:	bne	183e8 <__assert_fail@plt+0x6f2c>
   183b8:	ldrb	r1, [r0, #4]
   183bc:	cmp	r1, #48	; 0x30
   183c0:	bne	183e8 <__assert_fail@plt+0x6f2c>
   183c4:	ldrb	r1, [r0, #5]
   183c8:	cmp	r1, #51	; 0x33
   183cc:	bne	183e8 <__assert_fail@plt+0x6f2c>
   183d0:	ldrb	r1, [r0, #6]
   183d4:	cmp	r1, #48	; 0x30
   183d8:	bne	183e8 <__assert_fail@plt+0x6f2c>
   183dc:	ldrb	r0, [r0, #7]
   183e0:	cmp	r0, #0
   183e4:	beq	18404 <__assert_fail@plt+0x6f48>
   183e8:	movw	r1, #46972	; 0xb77c
   183ec:	movw	r0, #46976	; 0xb780
   183f0:	cmp	r4, #9
   183f4:	movt	r1, #1
   183f8:	movt	r0, #1
   183fc:	moveq	r0, r1
   18400:	pop	{r4, r5, fp, pc}
   18404:	ldrb	r1, [r5]
   18408:	movw	r2, #46986	; 0xb78a
   1840c:	movw	r0, #46990	; 0xb78e
   18410:	movt	r2, #1
   18414:	movt	r0, #1
   18418:	cmp	r1, #96	; 0x60
   1841c:	moveq	r0, r2
   18420:	pop	{r4, r5, fp, pc}
   18424:	push	{r4, sl, fp, lr}
   18428:	add	fp, sp, #8
   1842c:	sub	sp, sp, #104	; 0x68
   18430:	movw	r1, #47815	; 0xbac7
   18434:	mov	r4, r0
   18438:	mov	r2, sp
   1843c:	mov	r0, #3
   18440:	movt	r1, #1
   18444:	bl	1148c <__lxstat64@plt>
   18448:	mov	r1, r0
   1844c:	mov	r0, #0
   18450:	cmp	r1, #0
   18454:	beq	18460 <__assert_fail@plt+0x6fa4>
   18458:	sub	sp, fp, #8
   1845c:	pop	{r4, sl, fp, pc}
   18460:	ldr	r0, [sp, #96]	; 0x60
   18464:	ldr	r1, [sp, #100]	; 0x64
   18468:	ldm	sp, {r2, r3}
   1846c:	stm	r4, {r0, r1, r2, r3}
   18470:	mov	r0, r4
   18474:	sub	sp, fp, #8
   18478:	pop	{r4, sl, fp, pc}
   1847c:	push	{r4, r5, r6, r7, fp, lr}
   18480:	add	fp, sp, #16
   18484:	mov	r4, r0
   18488:	cmp	r0, #2
   1848c:	bhi	184bc <__assert_fail@plt+0x7000>
   18490:	mov	r0, r4
   18494:	bl	1a4f8 <__assert_fail@plt+0x903c>
   18498:	mov	r5, r0
   1849c:	bl	11378 <__errno_location@plt>
   184a0:	ldr	r7, [r0]
   184a4:	mov	r6, r0
   184a8:	mov	r0, r4
   184ac:	bl	11480 <close@plt>
   184b0:	mov	r0, r5
   184b4:	str	r7, [r6]
   184b8:	pop	{r4, r5, r6, r7, fp, pc}
   184bc:	mov	r0, r4
   184c0:	pop	{r4, r5, r6, r7, fp, pc}
   184c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184c8:	add	fp, sp, #24
   184cc:	sub	sp, sp, #32
   184d0:	ldr	r6, [fp, #12]
   184d4:	ldr	r7, [fp, #8]
   184d8:	mov	r4, r2
   184dc:	mov	r8, r0
   184e0:	cmp	r1, #0
   184e4:	beq	1850c <__assert_fail@plt+0x7050>
   184e8:	movw	r2, #47080	; 0xb7e8
   184ec:	mov	r5, r1
   184f0:	str	r3, [sp, #4]
   184f4:	str	r4, [sp]
   184f8:	mov	r0, r8
   184fc:	mov	r1, #1
   18500:	movt	r2, #1
   18504:	mov	r3, r5
   18508:	b	18524 <__assert_fail@plt+0x7068>
   1850c:	movw	r2, #47092	; 0xb7f4
   18510:	str	r3, [sp]
   18514:	mov	r0, r8
   18518:	mov	r1, #1
   1851c:	mov	r3, r4
   18520:	movt	r2, #1
   18524:	bl	113b4 <__fprintf_chk@plt>
   18528:	movw	r1, #47099	; 0xb7fb
   1852c:	mov	r0, #0
   18530:	mov	r2, #5
   18534:	movt	r1, #1
   18538:	bl	1124c <dcgettext@plt>
   1853c:	movw	r2, #47817	; 0xbac9
   18540:	mov	r3, r0
   18544:	movw	r0, #2022	; 0x7e6
   18548:	mov	r1, #1
   1854c:	movt	r2, #1
   18550:	str	r0, [sp]
   18554:	mov	r0, r8
   18558:	bl	113b4 <__fprintf_chk@plt>
   1855c:	movw	r4, #44571	; 0xae1b
   18560:	mov	r1, r8
   18564:	movt	r4, #1
   18568:	mov	r0, r4
   1856c:	bl	111bc <fputs_unlocked@plt>
   18570:	movw	r1, #47103	; 0xb7ff
   18574:	mov	r0, #0
   18578:	mov	r2, #5
   1857c:	movt	r1, #1
   18580:	bl	1124c <dcgettext@plt>
   18584:	movw	r3, #47274	; 0xb8aa
   18588:	mov	r2, r0
   1858c:	mov	r0, r8
   18590:	mov	r1, #1
   18594:	movt	r3, #1
   18598:	bl	113b4 <__fprintf_chk@plt>
   1859c:	mov	r0, r4
   185a0:	mov	r1, r8
   185a4:	bl	111bc <fputs_unlocked@plt>
   185a8:	cmp	r6, #9
   185ac:	bhi	185e8 <__assert_fail@plt+0x712c>
   185b0:	add	r0, pc, #0
   185b4:	ldr	pc, [r0, r6, lsl #2]
   185b8:	andeq	r8, r1, r0, ror #11
   185bc:	strdeq	r8, [r1], -r4
   185c0:	andeq	r8, r1, r4, lsr #12
   185c4:	andeq	r8, r1, ip, asr #12
   185c8:	andeq	r8, r1, r4, ror r6
   185cc:	muleq	r1, ip, r6
   185d0:	andeq	r8, r1, r4, asr #13
   185d4:	strdeq	r8, [r1], -ip
   185d8:	muleq	r1, ip, r7
   185dc:	andeq	r8, r1, r4, asr #14
   185e0:	sub	sp, fp, #24
   185e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   185e8:	movw	r1, #47627	; 0xba0b
   185ec:	movt	r1, #1
   185f0:	b	1874c <__assert_fail@plt+0x7290>
   185f4:	movw	r1, #47308	; 0xb8cc
   185f8:	mov	r0, #0
   185fc:	mov	r2, #5
   18600:	movt	r1, #1
   18604:	bl	1124c <dcgettext@plt>
   18608:	ldr	r3, [r7]
   1860c:	mov	r2, r0
   18610:	mov	r0, r8
   18614:	mov	r1, #1
   18618:	sub	sp, fp, #24
   1861c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18620:	b	113b4 <__fprintf_chk@plt>
   18624:	movw	r1, #47324	; 0xb8dc
   18628:	mov	r0, #0
   1862c:	mov	r2, #5
   18630:	movt	r1, #1
   18634:	bl	1124c <dcgettext@plt>
   18638:	mov	r2, r0
   1863c:	ldr	r3, [r7]
   18640:	ldr	r0, [r7, #4]
   18644:	str	r0, [sp]
   18648:	b	18738 <__assert_fail@plt+0x727c>
   1864c:	movw	r1, #47347	; 0xb8f3
   18650:	mov	r0, #0
   18654:	mov	r2, #5
   18658:	movt	r1, #1
   1865c:	bl	1124c <dcgettext@plt>
   18660:	mov	r2, r0
   18664:	ldr	r3, [r7]
   18668:	ldmib	r7, {r0, r1}
   1866c:	stm	sp, {r0, r1}
   18670:	b	18738 <__assert_fail@plt+0x727c>
   18674:	movw	r1, #47375	; 0xb90f
   18678:	mov	r0, #0
   1867c:	mov	r2, #5
   18680:	movt	r1, #1
   18684:	bl	1124c <dcgettext@plt>
   18688:	ldr	r3, [r7]
   1868c:	mov	r2, r0
   18690:	ldmib	r7, {r0, r1, r7}
   18694:	stm	sp, {r0, r1, r7}
   18698:	b	18738 <__assert_fail@plt+0x727c>
   1869c:	movw	r1, #47407	; 0xb92f
   186a0:	mov	r0, #0
   186a4:	mov	r2, #5
   186a8:	movt	r1, #1
   186ac:	bl	1124c <dcgettext@plt>
   186b0:	ldr	r3, [r7]
   186b4:	mov	r2, r0
   186b8:	ldmib	r7, {r0, r1, r6, r7}
   186bc:	stm	sp, {r0, r1, r6, r7}
   186c0:	b	18738 <__assert_fail@plt+0x727c>
   186c4:	movw	r1, #47443	; 0xb953
   186c8:	mov	r0, #0
   186cc:	mov	r2, #5
   186d0:	movt	r1, #1
   186d4:	bl	1124c <dcgettext@plt>
   186d8:	mov	r2, r0
   186dc:	ldr	r3, [r7]
   186e0:	ldmib	r7, {r0, r1, r6}
   186e4:	ldr	r5, [r7, #16]
   186e8:	ldr	r7, [r7, #20]
   186ec:	stm	sp, {r0, r1, r6}
   186f0:	str	r5, [sp, #12]
   186f4:	str	r7, [sp, #16]
   186f8:	b	18738 <__assert_fail@plt+0x727c>
   186fc:	movw	r1, #47483	; 0xb97b
   18700:	mov	r0, #0
   18704:	mov	r2, #5
   18708:	movt	r1, #1
   1870c:	bl	1124c <dcgettext@plt>
   18710:	mov	r2, r0
   18714:	ldr	r3, [r7]
   18718:	ldmib	r7, {r0, r1, r6}
   1871c:	ldr	r5, [r7, #16]
   18720:	ldr	r4, [r7, #20]
   18724:	ldr	r7, [r7, #24]
   18728:	stm	sp, {r0, r1, r6}
   1872c:	str	r5, [sp, #12]
   18730:	str	r4, [sp, #16]
   18734:	str	r7, [sp, #20]
   18738:	mov	r0, r8
   1873c:	mov	r1, #1
   18740:	b	187ec <__assert_fail@plt+0x7330>
   18744:	movw	r1, #47575	; 0xb9d7
   18748:	movt	r1, #1
   1874c:	mov	r0, #0
   18750:	mov	r2, #5
   18754:	bl	1124c <dcgettext@plt>
   18758:	mov	ip, r0
   1875c:	ldr	r3, [r7]
   18760:	ldr	r0, [r7, #4]
   18764:	ldr	r1, [r7, #8]
   18768:	ldr	r6, [r7, #12]
   1876c:	ldr	r5, [r7, #16]
   18770:	ldr	r4, [r7, #20]
   18774:	ldr	r2, [r7, #24]
   18778:	ldr	lr, [r7, #28]
   1877c:	ldr	r7, [r7, #32]
   18780:	stm	sp, {r0, r1, r6}
   18784:	str	r5, [sp, #12]
   18788:	str	r4, [sp, #16]
   1878c:	str	r2, [sp, #20]
   18790:	str	lr, [sp, #24]
   18794:	str	r7, [sp, #28]
   18798:	b	187e0 <__assert_fail@plt+0x7324>
   1879c:	movw	r1, #47527	; 0xb9a7
   187a0:	mov	r0, #0
   187a4:	mov	r2, #5
   187a8:	movt	r1, #1
   187ac:	bl	1124c <dcgettext@plt>
   187b0:	mov	ip, r0
   187b4:	ldr	r3, [r7]
   187b8:	ldmib	r7, {r0, r1, r6}
   187bc:	ldr	r5, [r7, #16]
   187c0:	ldr	r4, [r7, #20]
   187c4:	ldr	r2, [r7, #24]
   187c8:	ldr	r7, [r7, #28]
   187cc:	stm	sp, {r0, r1, r6}
   187d0:	str	r5, [sp, #12]
   187d4:	str	r4, [sp, #16]
   187d8:	str	r2, [sp, #20]
   187dc:	str	r7, [sp, #24]
   187e0:	mov	r0, r8
   187e4:	mov	r1, #1
   187e8:	mov	r2, ip
   187ec:	bl	113b4 <__fprintf_chk@plt>
   187f0:	sub	sp, fp, #24
   187f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   187f8:	push	{r4, sl, fp, lr}
   187fc:	add	fp, sp, #8
   18800:	sub	sp, sp, #8
   18804:	ldr	ip, [fp, #8]
   18808:	mov	lr, #0
   1880c:	ldr	r4, [ip, lr, lsl #2]
   18810:	add	lr, lr, #1
   18814:	cmp	r4, #0
   18818:	bne	1880c <__assert_fail@plt+0x7350>
   1881c:	sub	r4, lr, #1
   18820:	str	ip, [sp]
   18824:	str	r4, [sp, #4]
   18828:	bl	184c4 <__assert_fail@plt+0x7008>
   1882c:	sub	sp, fp, #8
   18830:	pop	{r4, sl, fp, pc}
   18834:	push	{fp, lr}
   18838:	mov	fp, sp
   1883c:	sub	sp, sp, #48	; 0x30
   18840:	ldr	ip, [fp, #8]
   18844:	ldr	lr, [ip]
   18848:	cmp	lr, #0
   1884c:	str	lr, [sp, #8]
   18850:	beq	188ec <__assert_fail@plt+0x7430>
   18854:	ldr	lr, [ip, #4]
   18858:	cmp	lr, #0
   1885c:	str	lr, [sp, #12]
   18860:	beq	188f4 <__assert_fail@plt+0x7438>
   18864:	ldr	lr, [ip, #8]
   18868:	cmp	lr, #0
   1886c:	str	lr, [sp, #16]
   18870:	beq	188fc <__assert_fail@plt+0x7440>
   18874:	ldr	lr, [ip, #12]
   18878:	cmp	lr, #0
   1887c:	str	lr, [sp, #20]
   18880:	beq	18904 <__assert_fail@plt+0x7448>
   18884:	ldr	lr, [ip, #16]
   18888:	cmp	lr, #0
   1888c:	str	lr, [sp, #24]
   18890:	beq	1890c <__assert_fail@plt+0x7450>
   18894:	ldr	lr, [ip, #20]
   18898:	cmp	lr, #0
   1889c:	str	lr, [sp, #28]
   188a0:	beq	18914 <__assert_fail@plt+0x7458>
   188a4:	ldr	lr, [ip, #24]
   188a8:	cmp	lr, #0
   188ac:	str	lr, [sp, #32]
   188b0:	beq	1891c <__assert_fail@plt+0x7460>
   188b4:	ldr	lr, [ip, #28]
   188b8:	cmp	lr, #0
   188bc:	str	lr, [sp, #36]	; 0x24
   188c0:	beq	18924 <__assert_fail@plt+0x7468>
   188c4:	ldr	lr, [ip, #32]
   188c8:	cmp	lr, #0
   188cc:	str	lr, [sp, #40]	; 0x28
   188d0:	beq	1892c <__assert_fail@plt+0x7470>
   188d4:	ldr	lr, [ip, #36]	; 0x24
   188d8:	mov	ip, #10
   188dc:	cmp	lr, #0
   188e0:	str	lr, [sp, #44]	; 0x2c
   188e4:	movweq	ip, #9
   188e8:	b	18930 <__assert_fail@plt+0x7474>
   188ec:	mov	ip, #0
   188f0:	b	18930 <__assert_fail@plt+0x7474>
   188f4:	mov	ip, #1
   188f8:	b	18930 <__assert_fail@plt+0x7474>
   188fc:	mov	ip, #2
   18900:	b	18930 <__assert_fail@plt+0x7474>
   18904:	mov	ip, #3
   18908:	b	18930 <__assert_fail@plt+0x7474>
   1890c:	mov	ip, #4
   18910:	b	18930 <__assert_fail@plt+0x7474>
   18914:	mov	ip, #5
   18918:	b	18930 <__assert_fail@plt+0x7474>
   1891c:	mov	ip, #6
   18920:	b	18930 <__assert_fail@plt+0x7474>
   18924:	mov	ip, #7
   18928:	b	18930 <__assert_fail@plt+0x7474>
   1892c:	mov	ip, #8
   18930:	add	lr, sp, #8
   18934:	str	ip, [sp, #4]
   18938:	str	lr, [sp]
   1893c:	bl	184c4 <__assert_fail@plt+0x7008>
   18940:	mov	sp, fp
   18944:	pop	{fp, pc}
   18948:	push	{fp, lr}
   1894c:	mov	fp, sp
   18950:	sub	sp, sp, #56	; 0x38
   18954:	add	ip, fp, #8
   18958:	str	ip, [sp, #12]
   1895c:	ldr	lr, [fp, #8]
   18960:	cmp	lr, #0
   18964:	str	lr, [sp, #16]
   18968:	beq	18a04 <__assert_fail@plt+0x7548>
   1896c:	ldr	lr, [ip, #4]
   18970:	cmp	lr, #0
   18974:	str	lr, [sp, #20]
   18978:	beq	18a0c <__assert_fail@plt+0x7550>
   1897c:	ldr	lr, [ip, #8]
   18980:	cmp	lr, #0
   18984:	str	lr, [sp, #24]
   18988:	beq	18a14 <__assert_fail@plt+0x7558>
   1898c:	ldr	lr, [ip, #12]
   18990:	cmp	lr, #0
   18994:	str	lr, [sp, #28]
   18998:	beq	18a1c <__assert_fail@plt+0x7560>
   1899c:	ldr	lr, [ip, #16]
   189a0:	cmp	lr, #0
   189a4:	str	lr, [sp, #32]
   189a8:	beq	18a24 <__assert_fail@plt+0x7568>
   189ac:	ldr	lr, [ip, #20]
   189b0:	cmp	lr, #0
   189b4:	str	lr, [sp, #36]	; 0x24
   189b8:	beq	18a2c <__assert_fail@plt+0x7570>
   189bc:	ldr	lr, [ip, #24]
   189c0:	cmp	lr, #0
   189c4:	str	lr, [sp, #40]	; 0x28
   189c8:	beq	18a34 <__assert_fail@plt+0x7578>
   189cc:	ldr	lr, [ip, #28]
   189d0:	cmp	lr, #0
   189d4:	str	lr, [sp, #44]	; 0x2c
   189d8:	beq	18a3c <__assert_fail@plt+0x7580>
   189dc:	ldr	lr, [ip, #32]
   189e0:	cmp	lr, #0
   189e4:	str	lr, [sp, #48]	; 0x30
   189e8:	beq	18a44 <__assert_fail@plt+0x7588>
   189ec:	ldr	lr, [ip, #36]	; 0x24
   189f0:	mov	ip, #10
   189f4:	cmp	lr, #0
   189f8:	str	lr, [sp, #52]	; 0x34
   189fc:	movweq	ip, #9
   18a00:	b	18a48 <__assert_fail@plt+0x758c>
   18a04:	mov	ip, #0
   18a08:	b	18a48 <__assert_fail@plt+0x758c>
   18a0c:	mov	ip, #1
   18a10:	b	18a48 <__assert_fail@plt+0x758c>
   18a14:	mov	ip, #2
   18a18:	b	18a48 <__assert_fail@plt+0x758c>
   18a1c:	mov	ip, #3
   18a20:	b	18a48 <__assert_fail@plt+0x758c>
   18a24:	mov	ip, #4
   18a28:	b	18a48 <__assert_fail@plt+0x758c>
   18a2c:	mov	ip, #5
   18a30:	b	18a48 <__assert_fail@plt+0x758c>
   18a34:	mov	ip, #6
   18a38:	b	18a48 <__assert_fail@plt+0x758c>
   18a3c:	mov	ip, #7
   18a40:	b	18a48 <__assert_fail@plt+0x758c>
   18a44:	mov	ip, #8
   18a48:	add	lr, sp, #16
   18a4c:	str	ip, [sp, #4]
   18a50:	str	lr, [sp]
   18a54:	bl	184c4 <__assert_fail@plt+0x7008>
   18a58:	mov	sp, fp
   18a5c:	pop	{fp, pc}
   18a60:	push	{fp, lr}
   18a64:	mov	fp, sp
   18a68:	movw	r0, #49540	; 0xc184
   18a6c:	movt	r0, #2
   18a70:	ldr	r1, [r0]
   18a74:	movw	r0, #44571	; 0xae1b
   18a78:	movt	r0, #1
   18a7c:	bl	111bc <fputs_unlocked@plt>
   18a80:	movw	r1, #47687	; 0xba47
   18a84:	mov	r0, #0
   18a88:	mov	r2, #5
   18a8c:	movt	r1, #1
   18a90:	bl	1124c <dcgettext@plt>
   18a94:	movw	r2, #47707	; 0xba5b
   18a98:	mov	r1, r0
   18a9c:	mov	r0, #1
   18aa0:	movt	r2, #1
   18aa4:	bl	1139c <__printf_chk@plt>
   18aa8:	movw	r1, #47729	; 0xba71
   18aac:	mov	r0, #0
   18ab0:	mov	r2, #5
   18ab4:	movt	r1, #1
   18ab8:	bl	1124c <dcgettext@plt>
   18abc:	movw	r2, #44844	; 0xaf2c
   18ac0:	movw	r3, #45119	; 0xb03f
   18ac4:	mov	r1, r0
   18ac8:	mov	r0, #1
   18acc:	movt	r2, #1
   18ad0:	movt	r3, #1
   18ad4:	bl	1139c <__printf_chk@plt>
   18ad8:	movw	r1, #47749	; 0xba85
   18adc:	mov	r0, #0
   18ae0:	mov	r2, #5
   18ae4:	movt	r1, #1
   18ae8:	bl	1124c <dcgettext@plt>
   18aec:	movw	r2, #47788	; 0xbaac
   18af0:	mov	r1, r0
   18af4:	mov	r0, #1
   18af8:	movt	r2, #1
   18afc:	pop	{fp, lr}
   18b00:	b	1139c <__printf_chk@plt>
   18b04:	push	{r4, r5, r6, sl, fp, lr}
   18b08:	add	fp, sp, #16
   18b0c:	mov	r4, r2
   18b10:	mov	r5, r1
   18b14:	mov	r6, r0
   18b18:	bl	1a4bc <__assert_fail@plt+0x9000>
   18b1c:	cmp	r0, #0
   18b20:	popne	{r4, r5, r6, sl, fp, pc}
   18b24:	cmp	r6, #0
   18b28:	beq	18b3c <__assert_fail@plt+0x7680>
   18b2c:	cmp	r5, #0
   18b30:	cmpne	r4, #0
   18b34:	bne	18b3c <__assert_fail@plt+0x7680>
   18b38:	pop	{r4, r5, r6, sl, fp, pc}
   18b3c:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18b40:	push	{r4, r5, r6, sl, fp, lr}
   18b44:	add	fp, sp, #16
   18b48:	mov	r4, r2
   18b4c:	mov	r5, r1
   18b50:	mov	r6, r0
   18b54:	bl	1a4bc <__assert_fail@plt+0x9000>
   18b58:	cmp	r0, #0
   18b5c:	popne	{r4, r5, r6, sl, fp, pc}
   18b60:	cmp	r6, #0
   18b64:	beq	18b78 <__assert_fail@plt+0x76bc>
   18b68:	cmp	r5, #0
   18b6c:	cmpne	r4, #0
   18b70:	bne	18b78 <__assert_fail@plt+0x76bc>
   18b74:	pop	{r4, r5, r6, sl, fp, pc}
   18b78:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18b7c:	push	{fp, lr}
   18b80:	mov	fp, sp
   18b84:	bl	19e6c <__assert_fail@plt+0x89b0>
   18b88:	cmp	r0, #0
   18b8c:	popne	{fp, pc}
   18b90:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18b94:	push	{fp, lr}
   18b98:	mov	fp, sp
   18b9c:	bl	19e6c <__assert_fail@plt+0x89b0>
   18ba0:	cmp	r0, #0
   18ba4:	popne	{fp, pc}
   18ba8:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18bac:	push	{fp, lr}
   18bb0:	mov	fp, sp
   18bb4:	bl	19e6c <__assert_fail@plt+0x89b0>
   18bb8:	cmp	r0, #0
   18bbc:	popne	{fp, pc}
   18bc0:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18bc4:	push	{r4, r5, fp, lr}
   18bc8:	add	fp, sp, #8
   18bcc:	mov	r4, r1
   18bd0:	mov	r5, r0
   18bd4:	bl	19e9c <__assert_fail@plt+0x89e0>
   18bd8:	cmp	r0, #0
   18bdc:	popne	{r4, r5, fp, pc}
   18be0:	cmp	r5, #0
   18be4:	beq	18bf4 <__assert_fail@plt+0x7738>
   18be8:	cmp	r4, #0
   18bec:	bne	18bf4 <__assert_fail@plt+0x7738>
   18bf0:	pop	{r4, r5, fp, pc}
   18bf4:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18bf8:	push	{fp, lr}
   18bfc:	mov	fp, sp
   18c00:	cmp	r1, #0
   18c04:	orreq	r1, r1, #1
   18c08:	bl	19e9c <__assert_fail@plt+0x89e0>
   18c0c:	cmp	r0, #0
   18c10:	popne	{fp, pc}
   18c14:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18c18:	push	{fp, lr}
   18c1c:	mov	fp, sp
   18c20:	clz	r3, r2
   18c24:	lsr	ip, r3, #5
   18c28:	clz	r3, r1
   18c2c:	lsr	r3, r3, #5
   18c30:	orrs	r3, r3, ip
   18c34:	movwne	r1, #1
   18c38:	movwne	r2, #1
   18c3c:	bl	1a4bc <__assert_fail@plt+0x9000>
   18c40:	cmp	r0, #0
   18c44:	popne	{fp, pc}
   18c48:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18c4c:	push	{fp, lr}
   18c50:	mov	fp, sp
   18c54:	mov	r2, r1
   18c58:	mov	r1, r0
   18c5c:	mov	r0, #0
   18c60:	bl	1a4bc <__assert_fail@plt+0x9000>
   18c64:	cmp	r0, #0
   18c68:	popne	{fp, pc}
   18c6c:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18c70:	push	{fp, lr}
   18c74:	mov	fp, sp
   18c78:	mov	r2, r1
   18c7c:	mov	r1, r0
   18c80:	clz	r0, r2
   18c84:	clz	r3, r1
   18c88:	lsr	r0, r0, #5
   18c8c:	lsr	r3, r3, #5
   18c90:	orrs	r0, r3, r0
   18c94:	mov	r0, #0
   18c98:	movwne	r1, #1
   18c9c:	movwne	r2, #1
   18ca0:	bl	1a4bc <__assert_fail@plt+0x9000>
   18ca4:	cmp	r0, #0
   18ca8:	popne	{fp, pc}
   18cac:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18cb0:	push	{r4, r5, r6, sl, fp, lr}
   18cb4:	add	fp, sp, #16
   18cb8:	ldr	r5, [r1]
   18cbc:	mov	r4, r1
   18cc0:	mov	r6, r0
   18cc4:	cmp	r0, #0
   18cc8:	beq	18ce0 <__assert_fail@plt+0x7824>
   18ccc:	mov	r0, #1
   18cd0:	add	r0, r0, r5, lsr #1
   18cd4:	adds	r5, r5, r0
   18cd8:	bcc	18ce8 <__assert_fail@plt+0x782c>
   18cdc:	b	18d24 <__assert_fail@plt+0x7868>
   18ce0:	cmp	r5, #0
   18ce4:	movweq	r5, #64	; 0x40
   18ce8:	mov	r0, r6
   18cec:	mov	r1, r5
   18cf0:	mov	r2, #1
   18cf4:	bl	1a4bc <__assert_fail@plt+0x9000>
   18cf8:	cmp	r5, #0
   18cfc:	mov	r1, r5
   18d00:	movwne	r1, #1
   18d04:	cmp	r0, #0
   18d08:	bne	18d1c <__assert_fail@plt+0x7860>
   18d0c:	clz	r2, r6
   18d10:	lsr	r2, r2, #5
   18d14:	orrs	r1, r2, r1
   18d18:	bne	18d24 <__assert_fail@plt+0x7868>
   18d1c:	str	r5, [r4]
   18d20:	pop	{r4, r5, r6, sl, fp, pc}
   18d24:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18d28:	push	{r4, r5, r6, r7, fp, lr}
   18d2c:	add	fp, sp, #16
   18d30:	ldr	r5, [r1]
   18d34:	mov	r6, r2
   18d38:	mov	r4, r1
   18d3c:	mov	r7, r0
   18d40:	cmp	r0, #0
   18d44:	beq	18d5c <__assert_fail@plt+0x78a0>
   18d48:	mov	r0, #1
   18d4c:	add	r0, r0, r5, lsr #1
   18d50:	adds	r5, r5, r0
   18d54:	bcc	18d74 <__assert_fail@plt+0x78b8>
   18d58:	b	18da8 <__assert_fail@plt+0x78ec>
   18d5c:	cmp	r5, #0
   18d60:	bne	18d74 <__assert_fail@plt+0x78b8>
   18d64:	mov	r0, #64	; 0x40
   18d68:	cmp	r6, #64	; 0x40
   18d6c:	udiv	r5, r0, r6
   18d70:	addhi	r5, r5, #1
   18d74:	mov	r0, r7
   18d78:	mov	r1, r5
   18d7c:	mov	r2, r6
   18d80:	bl	1a4bc <__assert_fail@plt+0x9000>
   18d84:	cmp	r0, #0
   18d88:	bne	18da0 <__assert_fail@plt+0x78e4>
   18d8c:	cmp	r7, #0
   18d90:	beq	18da8 <__assert_fail@plt+0x78ec>
   18d94:	cmp	r6, #0
   18d98:	cmpne	r5, #0
   18d9c:	bne	18da8 <__assert_fail@plt+0x78ec>
   18da0:	str	r5, [r4]
   18da4:	pop	{r4, r5, r6, r7, fp, pc}
   18da8:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18dac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18db0:	add	fp, sp, #24
   18db4:	mov	r8, r1
   18db8:	ldr	r1, [r1]
   18dbc:	mov	r5, r0
   18dc0:	add	r0, r1, r1, asr #1
   18dc4:	cmp	r0, r1
   18dc8:	mvnvs	r0, #-2147483648	; 0x80000000
   18dcc:	cmp	r0, r3
   18dd0:	mov	r7, r0
   18dd4:	movgt	r7, r3
   18dd8:	cmn	r3, #1
   18ddc:	movle	r7, r0
   18de0:	ldr	r0, [fp, #8]
   18de4:	cmn	r0, #1
   18de8:	ble	18e10 <__assert_fail@plt+0x7954>
   18dec:	cmp	r0, #0
   18df0:	beq	18e64 <__assert_fail@plt+0x79a8>
   18df4:	cmn	r7, #1
   18df8:	ble	18e38 <__assert_fail@plt+0x797c>
   18dfc:	mvn	r4, #-2147483648	; 0x80000000
   18e00:	udiv	r6, r4, r0
   18e04:	cmp	r6, r7
   18e08:	bge	18e64 <__assert_fail@plt+0x79a8>
   18e0c:	b	18e74 <__assert_fail@plt+0x79b8>
   18e10:	cmn	r7, #1
   18e14:	ble	18e54 <__assert_fail@plt+0x7998>
   18e18:	cmn	r0, #1
   18e1c:	beq	18e64 <__assert_fail@plt+0x79a8>
   18e20:	mov	r6, #-2147483648	; 0x80000000
   18e24:	mvn	r4, #-2147483648	; 0x80000000
   18e28:	sdiv	r6, r6, r0
   18e2c:	cmp	r6, r7
   18e30:	bge	18e64 <__assert_fail@plt+0x79a8>
   18e34:	b	18e74 <__assert_fail@plt+0x79b8>
   18e38:	beq	18e64 <__assert_fail@plt+0x79a8>
   18e3c:	mov	r6, #-2147483648	; 0x80000000
   18e40:	mvn	r4, #-2147483648	; 0x80000000
   18e44:	sdiv	r6, r6, r7
   18e48:	cmp	r6, r0
   18e4c:	bge	18e64 <__assert_fail@plt+0x79a8>
   18e50:	b	18e74 <__assert_fail@plt+0x79b8>
   18e54:	mvn	r4, #-2147483648	; 0x80000000
   18e58:	sdiv	r6, r4, r0
   18e5c:	cmp	r7, r6
   18e60:	blt	18e74 <__assert_fail@plt+0x79b8>
   18e64:	mul	r6, r7, r0
   18e68:	mov	r4, #64	; 0x40
   18e6c:	cmp	r6, #63	; 0x3f
   18e70:	bgt	18e7c <__assert_fail@plt+0x79c0>
   18e74:	sdiv	r7, r4, r0
   18e78:	mul	r6, r7, r0
   18e7c:	cmp	r5, #0
   18e80:	moveq	r4, #0
   18e84:	streq	r4, [r8]
   18e88:	sub	r4, r7, r1
   18e8c:	cmp	r4, r2
   18e90:	bge	18f3c <__assert_fail@plt+0x7a80>
   18e94:	add	r7, r1, r2
   18e98:	mov	r6, #0
   18e9c:	mov	r2, #0
   18ea0:	cmp	r7, r3
   18ea4:	movwgt	r6, #1
   18ea8:	cmn	r3, #1
   18eac:	movwgt	r2, #1
   18eb0:	cmp	r7, r1
   18eb4:	bvs	18f70 <__assert_fail@plt+0x7ab4>
   18eb8:	ands	r1, r2, r6
   18ebc:	bne	18f70 <__assert_fail@plt+0x7ab4>
   18ec0:	cmn	r0, #1
   18ec4:	ble	18eec <__assert_fail@plt+0x7a30>
   18ec8:	cmp	r0, #0
   18ecc:	beq	18f38 <__assert_fail@plt+0x7a7c>
   18ed0:	cmn	r7, #1
   18ed4:	ble	18f10 <__assert_fail@plt+0x7a54>
   18ed8:	mvn	r1, #-2147483648	; 0x80000000
   18edc:	udiv	r1, r1, r0
   18ee0:	cmp	r1, r7
   18ee4:	bge	18f38 <__assert_fail@plt+0x7a7c>
   18ee8:	b	18f70 <__assert_fail@plt+0x7ab4>
   18eec:	cmn	r7, #1
   18ef0:	ble	18f28 <__assert_fail@plt+0x7a6c>
   18ef4:	cmn	r0, #1
   18ef8:	beq	18f38 <__assert_fail@plt+0x7a7c>
   18efc:	mov	r1, #-2147483648	; 0x80000000
   18f00:	sdiv	r1, r1, r0
   18f04:	cmp	r1, r7
   18f08:	bge	18f38 <__assert_fail@plt+0x7a7c>
   18f0c:	b	18f70 <__assert_fail@plt+0x7ab4>
   18f10:	beq	18f38 <__assert_fail@plt+0x7a7c>
   18f14:	mov	r1, #-2147483648	; 0x80000000
   18f18:	sdiv	r1, r1, r7
   18f1c:	cmp	r1, r0
   18f20:	bge	18f38 <__assert_fail@plt+0x7a7c>
   18f24:	b	18f70 <__assert_fail@plt+0x7ab4>
   18f28:	mvn	r1, #-2147483648	; 0x80000000
   18f2c:	sdiv	r1, r1, r0
   18f30:	cmp	r7, r1
   18f34:	blt	18f70 <__assert_fail@plt+0x7ab4>
   18f38:	mul	r6, r7, r0
   18f3c:	mov	r0, r5
   18f40:	mov	r1, r6
   18f44:	bl	19e9c <__assert_fail@plt+0x89e0>
   18f48:	cmp	r6, #0
   18f4c:	movwne	r6, #1
   18f50:	cmp	r0, #0
   18f54:	bne	18f68 <__assert_fail@plt+0x7aac>
   18f58:	clz	r1, r5
   18f5c:	lsr	r1, r1, #5
   18f60:	orrs	r1, r1, r6
   18f64:	bne	18f70 <__assert_fail@plt+0x7ab4>
   18f68:	str	r7, [r8]
   18f6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f70:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18f74:	push	{fp, lr}
   18f78:	mov	fp, sp
   18f7c:	mov	r1, #1
   18f80:	bl	19e18 <__assert_fail@plt+0x895c>
   18f84:	cmp	r0, #0
   18f88:	popne	{fp, pc}
   18f8c:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18f90:	push	{fp, lr}
   18f94:	mov	fp, sp
   18f98:	bl	19e18 <__assert_fail@plt+0x895c>
   18f9c:	cmp	r0, #0
   18fa0:	popne	{fp, pc}
   18fa4:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18fa8:	push	{fp, lr}
   18fac:	mov	fp, sp
   18fb0:	mov	r1, #1
   18fb4:	bl	19e18 <__assert_fail@plt+0x895c>
   18fb8:	cmp	r0, #0
   18fbc:	popne	{fp, pc}
   18fc0:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18fc4:	push	{fp, lr}
   18fc8:	mov	fp, sp
   18fcc:	bl	19e18 <__assert_fail@plt+0x895c>
   18fd0:	cmp	r0, #0
   18fd4:	popne	{fp, pc}
   18fd8:	bl	190b8 <__assert_fail@plt+0x7bfc>
   18fdc:	push	{r4, r5, fp, lr}
   18fe0:	add	fp, sp, #8
   18fe4:	mov	r5, r0
   18fe8:	mov	r0, r1
   18fec:	mov	r4, r1
   18ff0:	bl	19e6c <__assert_fail@plt+0x89b0>
   18ff4:	cmp	r0, #0
   18ff8:	beq	1900c <__assert_fail@plt+0x7b50>
   18ffc:	mov	r1, r5
   19000:	mov	r2, r4
   19004:	pop	{r4, r5, fp, lr}
   19008:	b	1121c <memcpy@plt>
   1900c:	bl	190b8 <__assert_fail@plt+0x7bfc>
   19010:	push	{r4, r5, fp, lr}
   19014:	add	fp, sp, #8
   19018:	mov	r5, r0
   1901c:	mov	r0, r1
   19020:	mov	r4, r1
   19024:	bl	19e6c <__assert_fail@plt+0x89b0>
   19028:	cmp	r0, #0
   1902c:	beq	19040 <__assert_fail@plt+0x7b84>
   19030:	mov	r1, r5
   19034:	mov	r2, r4
   19038:	pop	{r4, r5, fp, lr}
   1903c:	b	1121c <memcpy@plt>
   19040:	bl	190b8 <__assert_fail@plt+0x7bfc>
   19044:	push	{r4, r5, fp, lr}
   19048:	add	fp, sp, #8
   1904c:	mov	r5, r0
   19050:	add	r0, r1, #1
   19054:	mov	r4, r1
   19058:	bl	19e6c <__assert_fail@plt+0x89b0>
   1905c:	cmp	r0, #0
   19060:	beq	1907c <__assert_fail@plt+0x7bc0>
   19064:	mov	r1, #0
   19068:	mov	r2, r4
   1906c:	strb	r1, [r0, r4]
   19070:	mov	r1, r5
   19074:	pop	{r4, r5, fp, lr}
   19078:	b	1121c <memcpy@plt>
   1907c:	bl	190b8 <__assert_fail@plt+0x7bfc>
   19080:	push	{r4, r5, fp, lr}
   19084:	add	fp, sp, #8
   19088:	mov	r4, r0
   1908c:	bl	11348 <strlen@plt>
   19090:	add	r5, r0, #1
   19094:	mov	r0, r5
   19098:	bl	19e6c <__assert_fail@plt+0x89b0>
   1909c:	cmp	r0, #0
   190a0:	beq	190b4 <__assert_fail@plt+0x7bf8>
   190a4:	mov	r1, r4
   190a8:	mov	r2, r5
   190ac:	pop	{r4, r5, fp, lr}
   190b0:	b	1121c <memcpy@plt>
   190b4:	bl	190b8 <__assert_fail@plt+0x7bfc>
   190b8:	push	{fp, lr}
   190bc:	mov	fp, sp
   190c0:	movw	r0, #49452	; 0xc12c
   190c4:	movw	r1, #47864	; 0xbaf8
   190c8:	mov	r2, #5
   190cc:	movt	r0, #2
   190d0:	movt	r1, #1
   190d4:	ldr	r4, [r0]
   190d8:	mov	r0, #0
   190dc:	bl	1124c <dcgettext@plt>
   190e0:	movw	r2, #45411	; 0xb163
   190e4:	mov	r3, r0
   190e8:	mov	r0, r4
   190ec:	mov	r1, #0
   190f0:	movt	r2, #1
   190f4:	bl	112d0 <error@plt>
   190f8:	bl	11474 <abort@plt>
   190fc:	push	{fp, lr}
   19100:	mov	fp, sp
   19104:	orr	r1, r1, #512	; 0x200
   19108:	bl	12ddc <__assert_fail@plt+0x1920>
   1910c:	cmp	r0, #0
   19110:	popne	{fp, pc}
   19114:	bl	11378 <__errno_location@plt>
   19118:	ldr	r0, [r0]
   1911c:	cmp	r0, #22
   19120:	bne	19144 <__assert_fail@plt+0x7c88>
   19124:	movw	r0, #47881	; 0xbb09
   19128:	movw	r1, #47897	; 0xbb19
   1912c:	movw	r3, #47908	; 0xbb24
   19130:	mov	r2, #41	; 0x29
   19134:	movt	r0, #1
   19138:	movt	r1, #1
   1913c:	movt	r3, #1
   19140:	bl	114bc <__assert_fail@plt>
   19144:	bl	190b8 <__assert_fail@plt+0x7bfc>
   19148:	ldr	r0, [r0, #48]	; 0x30
   1914c:	and	r0, r0, #17
   19150:	cmp	r0, #16
   19154:	moveq	r0, #1
   19158:	bxeq	lr
   1915c:	cmp	r0, #17
   19160:	movne	r0, #0
   19164:	bxne	lr
   19168:	ldr	r0, [r1, #48]	; 0x30
   1916c:	cmp	r0, #0
   19170:	movwne	r0, #1
   19174:	bx	lr
   19178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1917c:	add	fp, sp, #28
   19180:	sub	sp, sp, #44	; 0x2c
   19184:	cmp	r2, #37	; 0x25
   19188:	bcs	19df8 <__assert_fail@plt+0x893c>
   1918c:	ldr	sl, [fp, #8]
   19190:	mov	r6, r2
   19194:	mov	r7, r1
   19198:	mov	r4, r0
   1919c:	str	r3, [sp, #36]	; 0x24
   191a0:	bl	11378 <__errno_location@plt>
   191a4:	mov	r5, r0
   191a8:	mov	r0, #0
   191ac:	str	r0, [r5]
   191b0:	bl	11324 <__ctype_b_loc@plt>
   191b4:	ldr	r1, [r0]
   191b8:	mov	r2, r4
   191bc:	ldrb	r0, [r2], #1
   191c0:	add	r3, r1, r0, lsl #1
   191c4:	ldrb	r3, [r3, #1]
   191c8:	tst	r3, #32
   191cc:	bne	191bc <__assert_fail@plt+0x7d00>
   191d0:	cmp	r7, #0
   191d4:	sub	r9, fp, #32
   191d8:	mov	r8, #4
   191dc:	movne	r9, r7
   191e0:	cmp	r0, #45	; 0x2d
   191e4:	beq	19dec <__assert_fail@plt+0x8930>
   191e8:	mov	r0, r4
   191ec:	mov	r1, r9
   191f0:	mov	r2, r6
   191f4:	mov	r3, #0
   191f8:	bl	11228 <__strtoull_internal@plt>
   191fc:	mov	r7, r1
   19200:	ldr	r1, [r9]
   19204:	cmp	r1, r4
   19208:	beq	19234 <__assert_fail@plt+0x7d78>
   1920c:	mov	r6, r0
   19210:	ldr	r0, [r5]
   19214:	cmp	r0, #0
   19218:	beq	19270 <__assert_fail@plt+0x7db4>
   1921c:	cmp	r0, #34	; 0x22
   19220:	bne	19dec <__assert_fail@plt+0x8930>
   19224:	mov	r8, #1
   19228:	cmp	sl, #0
   1922c:	bne	1927c <__assert_fail@plt+0x7dc0>
   19230:	b	19de4 <__assert_fail@plt+0x8928>
   19234:	cmp	sl, #0
   19238:	beq	19dec <__assert_fail@plt+0x8930>
   1923c:	mov	r5, r1
   19240:	ldrb	r1, [r4]
   19244:	cmp	r1, #0
   19248:	beq	19dec <__assert_fail@plt+0x8930>
   1924c:	mov	r0, sl
   19250:	bl	11354 <strchr@plt>
   19254:	cmp	r0, #0
   19258:	beq	19dec <__assert_fail@plt+0x8930>
   1925c:	mov	r1, r5
   19260:	mov	r8, #0
   19264:	mov	r6, #1
   19268:	mov	r7, #0
   1926c:	b	1927c <__assert_fail@plt+0x7dc0>
   19270:	mov	r8, r0
   19274:	cmp	sl, #0
   19278:	beq	19de4 <__assert_fail@plt+0x8928>
   1927c:	ldrb	r4, [r1]
   19280:	cmp	r4, #0
   19284:	beq	19de4 <__assert_fail@plt+0x8928>
   19288:	str	r1, [sp, #32]
   1928c:	mov	r0, sl
   19290:	mov	r1, r4
   19294:	bl	11354 <strchr@plt>
   19298:	cmp	r0, #0
   1929c:	beq	19564 <__assert_fail@plt+0x80a8>
   192a0:	sub	r0, r4, #69	; 0x45
   192a4:	mov	r1, #1
   192a8:	mov	r3, #0
   192ac:	mov	r5, #1024	; 0x400
   192b0:	cmp	r0, #47	; 0x2f
   192b4:	str	r1, [sp, #28]
   192b8:	bhi	193bc <__assert_fail@plt+0x7f00>
   192bc:	add	r1, pc, #0
   192c0:	ldr	pc, [r1, r0, lsl #2]
   192c4:	andeq	r9, r1, r4, lsl #7
   192c8:			; <UNDEFINED> instruction: 0x000193bc
   192cc:	andeq	r9, r1, r4, lsl #7
   192d0:			; <UNDEFINED> instruction: 0x000193bc
   192d4:			; <UNDEFINED> instruction: 0x000193bc
   192d8:			; <UNDEFINED> instruction: 0x000193bc
   192dc:	andeq	r9, r1, r4, lsl #7
   192e0:			; <UNDEFINED> instruction: 0x000193bc
   192e4:	andeq	r9, r1, r4, lsl #7
   192e8:			; <UNDEFINED> instruction: 0x000193bc
   192ec:			; <UNDEFINED> instruction: 0x000193bc
   192f0:	andeq	r9, r1, r4, lsl #7
   192f4:			; <UNDEFINED> instruction: 0x000193bc
   192f8:			; <UNDEFINED> instruction: 0x000193bc
   192fc:			; <UNDEFINED> instruction: 0x000193bc
   19300:	andeq	r9, r1, r4, lsl #7
   19304:			; <UNDEFINED> instruction: 0x000193bc
   19308:			; <UNDEFINED> instruction: 0x000193bc
   1930c:			; <UNDEFINED> instruction: 0x000193bc
   19310:			; <UNDEFINED> instruction: 0x000193bc
   19314:	andeq	r9, r1, r4, lsl #7
   19318:	andeq	r9, r1, r4, lsl #7
   1931c:			; <UNDEFINED> instruction: 0x000193bc
   19320:			; <UNDEFINED> instruction: 0x000193bc
   19324:			; <UNDEFINED> instruction: 0x000193bc
   19328:			; <UNDEFINED> instruction: 0x000193bc
   1932c:			; <UNDEFINED> instruction: 0x000193bc
   19330:			; <UNDEFINED> instruction: 0x000193bc
   19334:			; <UNDEFINED> instruction: 0x000193bc
   19338:			; <UNDEFINED> instruction: 0x000193bc
   1933c:			; <UNDEFINED> instruction: 0x000193bc
   19340:			; <UNDEFINED> instruction: 0x000193bc
   19344:			; <UNDEFINED> instruction: 0x000193bc
   19348:			; <UNDEFINED> instruction: 0x000193bc
   1934c:	andeq	r9, r1, r4, lsl #7
   19350:			; <UNDEFINED> instruction: 0x000193bc
   19354:			; <UNDEFINED> instruction: 0x000193bc
   19358:			; <UNDEFINED> instruction: 0x000193bc
   1935c:	andeq	r9, r1, r4, lsl #7
   19360:			; <UNDEFINED> instruction: 0x000193bc
   19364:	andeq	r9, r1, r4, lsl #7
   19368:			; <UNDEFINED> instruction: 0x000193bc
   1936c:			; <UNDEFINED> instruction: 0x000193bc
   19370:			; <UNDEFINED> instruction: 0x000193bc
   19374:			; <UNDEFINED> instruction: 0x000193bc
   19378:			; <UNDEFINED> instruction: 0x000193bc
   1937c:			; <UNDEFINED> instruction: 0x000193bc
   19380:	andeq	r9, r1, r4, lsl #7
   19384:	mov	r0, sl
   19388:	mov	r1, #48	; 0x30
   1938c:	bl	11354 <strchr@plt>
   19390:	cmp	r0, #0
   19394:	beq	193b8 <__assert_fail@plt+0x7efc>
   19398:	ldr	r1, [sp, #32]
   1939c:	ldrb	r0, [r1, #1]
   193a0:	cmp	r0, #66	; 0x42
   193a4:	cmpne	r0, #68	; 0x44
   193a8:	bne	19570 <__assert_fail@plt+0x80b4>
   193ac:	mov	r5, #1000	; 0x3e8
   193b0:	mov	r0, #2
   193b4:	str	r0, [sp, #28]
   193b8:	mov	r3, #0
   193bc:	sub	r0, r4, #66	; 0x42
   193c0:	cmp	r0, #53	; 0x35
   193c4:	bhi	19564 <__assert_fail@plt+0x80a8>
   193c8:	add	r1, pc, #0
   193cc:	ldr	pc, [r1, r0, lsl #2]
   193d0:	andeq	r9, r1, ip, ror #17
   193d4:	andeq	r9, r1, r4, ror #10
   193d8:	andeq	r9, r1, r4, ror #10
   193dc:	andeq	r9, r1, r4, lsl r9
   193e0:	andeq	r9, r1, r4, ror #10
   193e4:	andeq	r9, r1, r8, lsr #9
   193e8:	andeq	r9, r1, r4, ror #10
   193ec:	andeq	r9, r1, r4, ror #10
   193f0:	andeq	r9, r1, r4, ror #10
   193f4:	muleq	r1, r4, r5
   193f8:	andeq	r9, r1, r4, ror #10
   193fc:	ldrdeq	r9, [r1], -ip
   19400:	andeq	r9, r1, r4, ror #10
   19404:	andeq	r9, r1, r4, ror #10
   19408:	andeq	r9, r1, ip, ror #20
   1940c:	andeq	r9, r1, r4, ror #10
   19410:	andeq	r9, r1, r4, ror #10
   19414:	andeq	r9, r1, r4, ror #10
   19418:	andeq	r9, r1, r8, ror #12
   1941c:	andeq	r9, r1, r4, ror #10
   19420:	andeq	r9, r1, r4, ror #10
   19424:	andeq	r9, r1, r4, ror #10
   19428:	andeq	r9, r1, r4, ror #10
   1942c:	muleq	r1, r4, fp
   19430:	andeq	r9, r1, r0, asr r7
   19434:	andeq	r9, r1, r4, ror #10
   19438:	andeq	r9, r1, r4, ror #10
   1943c:	andeq	r9, r1, r4, ror #10
   19440:	andeq	r9, r1, r4, ror #10
   19444:	andeq	r9, r1, r4, ror #10
   19448:	andeq	r9, r1, r4, ror #10
   1944c:	andeq	r9, r1, r4, ror #10
   19450:	andeq	r9, r1, ip, ror #26
   19454:	andeq	r9, r1, r4, asr #27
   19458:	andeq	r9, r1, r4, ror #10
   1945c:	andeq	r9, r1, r4, ror #10
   19460:	andeq	r9, r1, r4, ror #10
   19464:	andeq	r9, r1, r8, lsr #9
   19468:	andeq	r9, r1, r4, ror #10
   1946c:	andeq	r9, r1, r4, ror #10
   19470:	andeq	r9, r1, r4, ror #10
   19474:	muleq	r1, r4, r5
   19478:	andeq	r9, r1, r4, ror #10
   1947c:	ldrdeq	r9, [r1], -ip
   19480:	andeq	r9, r1, r4, ror #10
   19484:	andeq	r9, r1, r4, ror #10
   19488:	andeq	r9, r1, r4, ror #10
   1948c:	andeq	r9, r1, r4, ror #10
   19490:	andeq	r9, r1, r4, ror #10
   19494:	andeq	r9, r1, r4, ror #10
   19498:	andeq	r9, r1, r8, ror #12
   1949c:	andeq	r9, r1, r4, ror #10
   194a0:	andeq	r9, r1, r4, ror #10
   194a4:	andeq	r9, r1, r0, lsr #27
   194a8:	mvn	r0, #0
   194ac:	mvn	r1, #0
   194b0:	mov	r2, r5
   194b4:	mov	sl, r3
   194b8:	bl	1a610 <__assert_fail@plt+0x9154>
   194bc:	subs	r3, r0, r6
   194c0:	umull	r4, r2, r6, r5
   194c4:	mov	lr, #0
   194c8:	str	r1, [sp, #20]
   194cc:	sbcs	r3, r1, r7
   194d0:	movwcc	lr, #1
   194d4:	mla	ip, r6, sl, r2
   194d8:	mov	r2, r1
   194dc:	mov	r2, #0
   194e0:	cmp	lr, #0
   194e4:	mla	r7, r7, r5, ip
   194e8:	mvnne	r4, #0
   194ec:	mvnne	r7, #0
   194f0:	subs	r6, r0, r4
   194f4:	sbcs	r6, r1, r7
   194f8:	umull	r3, r6, r4, r5
   194fc:	movwcc	r2, #1
   19500:	cmp	r2, #0
   19504:	mvnne	r3, #0
   19508:	cmp	r2, #0
   1950c:	str	r6, [sp, #16]
   19510:	umull	r6, ip, r3, r5
   19514:	mla	r1, r3, sl, ip
   19518:	ldr	ip, [sp, #16]
   1951c:	str	r1, [sp, #12]
   19520:	mla	r4, r4, sl, ip
   19524:	mla	r4, r7, r5, r4
   19528:	mvnne	r4, #0
   1952c:	subs	r0, r0, r3
   19530:	ldr	r0, [sp, #20]
   19534:	ldr	r7, [sp, #12]
   19538:	sbcs	r0, r0, r4
   1953c:	mov	r0, #0
   19540:	mla	r7, r4, r5, r7
   19544:	movwcc	r0, #1
   19548:	cmp	r0, #0
   1954c:	mov	r1, r0
   19550:	orr	r0, lr, r2
   19554:	mvnne	r7, #0
   19558:	mvnne	r6, #0
   1955c:	orr	r3, r0, r1
   19560:	b	19dc4 <__assert_fail@plt+0x8908>
   19564:	ldr	r0, [sp, #36]	; 0x24
   19568:	orr	r8, r8, #2
   1956c:	b	19de8 <__assert_fail@plt+0x892c>
   19570:	cmp	r0, #105	; 0x69
   19574:	mov	r3, #0
   19578:	bne	193bc <__assert_fail@plt+0x7f00>
   1957c:	ldrb	r0, [r1, #2]
   19580:	mov	r1, #1
   19584:	cmp	r0, #66	; 0x42
   19588:	movweq	r1, #3
   1958c:	str	r1, [sp, #28]
   19590:	b	193bc <__assert_fail@plt+0x7f00>
   19594:	mvn	r0, #0
   19598:	mvn	r1, #0
   1959c:	mov	r2, r5
   195a0:	mov	r4, r3
   195a4:	bl	1a610 <__assert_fail@plt+0x9154>
   195a8:	subs	r0, r0, r6
   195ac:	mov	r2, #0
   195b0:	sbcs	r0, r1, r7
   195b4:	umull	r0, r1, r6, r5
   195b8:	movwcc	r2, #1
   195bc:	cmp	r2, #0
   195c0:	mla	r1, r6, r4, r1
   195c4:	mov	r3, r2
   195c8:	mvnne	r0, #0
   195cc:	mla	r7, r7, r5, r1
   195d0:	mvnne	r7, #0
   195d4:	mov	r6, r0
   195d8:	b	19dc4 <__assert_fail@plt+0x8908>
   195dc:	mvn	r0, #0
   195e0:	mvn	r1, #0
   195e4:	mov	r2, r5
   195e8:	str	r3, [sp, #24]
   195ec:	bl	1a610 <__assert_fail@plt+0x9154>
   195f0:	subs	r3, r0, r6
   195f4:	mov	ip, r0
   195f8:	umull	r4, r0, r6, r5
   195fc:	mov	sl, #0
   19600:	sbcs	r3, r1, r7
   19604:	mov	r3, #0
   19608:	movwcc	r3, #1
   1960c:	cmp	r3, #0
   19610:	str	r0, [sp, #20]
   19614:	ldr	r0, [sp, #24]
   19618:	mvnne	r4, #0
   1961c:	cmp	r3, #0
   19620:	umull	lr, r2, r4, r5
   19624:	mla	r2, r4, r0, r2
   19628:	str	r2, [sp, #16]
   1962c:	ldr	r2, [sp, #20]
   19630:	mla	r6, r6, r0, r2
   19634:	ldr	r0, [sp, #16]
   19638:	mla	r6, r7, r5, r6
   1963c:	mvnne	r6, #0
   19640:	mla	r7, r6, r5, r0
   19644:	subs	r0, ip, r4
   19648:	sbcs	r0, r1, r6
   1964c:	movwcc	sl, #1
   19650:	cmp	sl, #0
   19654:	orr	r3, r3, sl
   19658:	mvnne	lr, #0
   1965c:	mvnne	r7, #0
   19660:	mov	r6, lr
   19664:	b	19dc4 <__assert_fail@plt+0x8908>
   19668:	mvn	r0, #0
   1966c:	mvn	r1, #0
   19670:	mov	r2, r5
   19674:	mov	sl, r3
   19678:	bl	1a610 <__assert_fail@plt+0x9154>
   1967c:	subs	r3, r0, r6
   19680:	mov	ip, r1
   19684:	umull	r2, lr, r6, r5
   19688:	str	r0, [sp, #20]
   1968c:	sbcs	r3, r1, r7
   19690:	mov	r1, #0
   19694:	str	ip, [sp, #16]
   19698:	movwcc	r1, #1
   1969c:	mla	r6, r6, sl, lr
   196a0:	mov	lr, #0
   196a4:	cmp	r1, #0
   196a8:	mla	r7, r7, r5, r6
   196ac:	mvnne	r2, #0
   196b0:	cmp	r1, #0
   196b4:	umull	r3, r4, r2, r5
   196b8:	mvnne	r7, #0
   196bc:	mla	r4, r2, sl, r4
   196c0:	subs	r2, r0, r2
   196c4:	sbcs	r2, ip, r7
   196c8:	mla	r4, r7, r5, r4
   196cc:	mov	r2, #0
   196d0:	movwcc	lr, #1
   196d4:	cmp	lr, #0
   196d8:	mvnne	r3, #0
   196dc:	mvnne	r4, #0
   196e0:	subs	r7, r0, r3
   196e4:	mov	r0, r5
   196e8:	sbcs	r7, ip, r4
   196ec:	umull	r5, r7, r3, r5
   196f0:	movwcc	r2, #1
   196f4:	cmp	r2, #0
   196f8:	mla	r3, r3, sl, r7
   196fc:	mvnne	r5, #0
   19700:	cmp	r2, #0
   19704:	mla	r3, r4, r0, r3
   19708:	umull	r6, ip, r5, r0
   1970c:	mvnne	r3, #0
   19710:	mla	ip, r5, sl, ip
   19714:	mla	r7, r3, r0, ip
   19718:	ldr	r0, [sp, #20]
   1971c:	subs	r0, r0, r5
   19720:	ldr	r0, [sp, #16]
   19724:	sbcs	r0, r0, r3
   19728:	mov	r0, #0
   1972c:	movwcc	r0, #1
   19730:	cmp	r0, #0
   19734:	mov	r3, r0
   19738:	orr	r0, r1, lr
   1973c:	orr	r0, r0, r2
   19740:	mvnne	r7, #0
   19744:	mvnne	r6, #0
   19748:	orr	r3, r0, r3
   1974c:	b	19dc4 <__assert_fail@plt+0x8908>
   19750:	mvn	r0, #0
   19754:	mvn	r1, #0
   19758:	mov	r2, r5
   1975c:	mov	r4, r3
   19760:	str	r3, [sp, #24]
   19764:	bl	1a610 <__assert_fail@plt+0x9154>
   19768:	umull	r3, r2, r6, r5
   1976c:	mla	r2, r6, r4, r2
   19770:	subs	r6, r0, r6
   19774:	sbcs	r6, r1, r7
   19778:	mov	r6, #0
   1977c:	mla	ip, r7, r5, r2
   19780:	ldr	r2, [sp, #24]
   19784:	movwcc	r6, #1
   19788:	cmp	r6, #0
   1978c:	str	r6, [sp, #20]
   19790:	mov	r6, #0
   19794:	mvnne	r3, #0
   19798:	mvnne	ip, #0
   1979c:	subs	r4, r0, r3
   197a0:	umull	r7, lr, r3, r5
   197a4:	sbcs	r4, r1, ip
   197a8:	movwcc	r6, #1
   197ac:	mla	r3, r3, r2, lr
   197b0:	cmp	r6, #0
   197b4:	str	r6, [sp, #16]
   197b8:	mvnne	r7, #0
   197bc:	cmp	r6, #0
   197c0:	umull	sl, r4, r7, r5
   197c4:	mla	r4, r7, r2, r4
   197c8:	mla	r2, ip, r5, r3
   197cc:	mvnne	r2, #0
   197d0:	subs	r3, r0, r7
   197d4:	mov	ip, #0
   197d8:	mla	r6, r2, r5, r4
   197dc:	sbcs	r2, r1, r2
   197e0:	mov	r4, r0
   197e4:	mov	r0, #0
   197e8:	movwcc	r0, #1
   197ec:	mov	r3, r4
   197f0:	cmp	r0, #0
   197f4:	str	r0, [sp, #12]
   197f8:	mov	r0, r1
   197fc:	str	r3, [sp, #4]
   19800:	mvnne	sl, #0
   19804:	mvnne	r6, #0
   19808:	str	r0, [sp, #8]
   1980c:	subs	r2, r4, sl
   19810:	ldr	r4, [sp, #24]
   19814:	sbcs	r2, r1, r6
   19818:	umull	r7, r2, sl, r5
   1981c:	movwcc	ip, #1
   19820:	cmp	ip, #0
   19824:	mvnne	r7, #0
   19828:	mla	r2, sl, r4, r2
   1982c:	cmp	ip, #0
   19830:	mov	sl, #0
   19834:	umull	r1, lr, r7, r5
   19838:	mla	r2, r6, r5, r2
   1983c:	mvnne	r2, #0
   19840:	subs	r6, r3, r7
   19844:	mla	lr, r7, r4, lr
   19848:	mla	lr, r2, r5, lr
   1984c:	sbcs	r2, r0, r2
   19850:	mov	r2, #0
   19854:	movwcc	sl, #1
   19858:	cmp	sl, #0
   1985c:	mvnne	r1, #0
   19860:	mvnne	lr, #0
   19864:	subs	r6, r3, r1
   19868:	ldr	r3, [sp, #24]
   1986c:	sbcs	r6, r0, lr
   19870:	umull	r0, r7, r1, r5
   19874:	movwcc	r2, #1
   19878:	cmp	r2, #0
   1987c:	mvnne	r0, #0
   19880:	mla	r1, r1, r3, r7
   19884:	cmp	r2, #0
   19888:	umull	r6, r4, r0, r5
   1988c:	mla	r1, lr, r5, r1
   19890:	mvnne	r1, #0
   19894:	mla	r4, r0, r3, r4
   19898:	ldr	r3, [sp, #4]
   1989c:	mla	r7, r1, r5, r4
   198a0:	ldr	r5, [sp, #16]
   198a4:	subs	r0, r3, r0
   198a8:	ldr	r0, [sp, #8]
   198ac:	sbcs	r0, r0, r1
   198b0:	mov	r0, #0
   198b4:	movwcc	r0, #1
   198b8:	cmp	r0, #0
   198bc:	mov	r1, r0
   198c0:	ldr	r0, [sp, #20]
   198c4:	mvnne	r7, #0
   198c8:	mvnne	r6, #0
   198cc:	orr	r0, r0, r5
   198d0:	ldr	r5, [sp, #12]
   198d4:	orr	r0, r0, r5
   198d8:	orr	r0, r0, ip
   198dc:	orr	r0, r0, sl
   198e0:	orr	r0, r0, r2
   198e4:	orr	r0, r0, r1
   198e8:	b	19d64 <__assert_fail@plt+0x88a8>
   198ec:	mov	r1, #0
   198f0:	lsl	r2, r7, #10
   198f4:	lsl	r0, r6, #10
   198f8:	lsr	r3, r7, #22
   198fc:	cmp	r1, r7, lsr #22
   19900:	orr	r2, r2, r6, lsr #22
   19904:	mvnne	r0, #0
   19908:	movwne	r3, #1
   1990c:	cmp	r1, r7, lsr #22
   19910:	b	19d90 <__assert_fail@plt+0x88d4>
   19914:	mvn	r0, #0
   19918:	mvn	r1, #0
   1991c:	mov	r2, r5
   19920:	mov	sl, r3
   19924:	bl	1a610 <__assert_fail@plt+0x9154>
   19928:	subs	r2, r0, r6
   1992c:	mov	ip, r0
   19930:	mov	r0, #0
   19934:	sbcs	r2, r1, r7
   19938:	umull	r4, r2, r6, r5
   1993c:	movwcc	r0, #1
   19940:	cmp	r0, #0
   19944:	mla	r2, r6, sl, r2
   19948:	str	r0, [sp, #20]
   1994c:	mvnne	r4, #0
   19950:	cmp	r0, #0
   19954:	mla	r2, r7, r5, r2
   19958:	mov	r0, #0
   1995c:	umull	lr, r3, r4, r5
   19960:	mvnne	r2, #0
   19964:	mla	r3, r4, sl, r3
   19968:	mla	r6, r2, r5, r3
   1996c:	subs	r3, ip, r4
   19970:	mov	r3, r1
   19974:	sbcs	r2, r1, r2
   19978:	str	r3, [sp, #8]
   1997c:	movwcc	r0, #1
   19980:	cmp	r0, #0
   19984:	str	r0, [sp, #16]
   19988:	mov	r0, ip
   1998c:	mvnne	lr, #0
   19990:	mvnne	r6, #0
   19994:	str	r0, [sp, #12]
   19998:	subs	r2, ip, lr
   1999c:	umull	r7, r4, lr, r5
   199a0:	sbcs	r2, r1, r6
   199a4:	mov	r2, #0
   199a8:	movwcc	r2, #1
   199ac:	mla	r4, lr, sl, r4
   199b0:	cmp	r2, #0
   199b4:	mla	r6, r6, r5, r4
   199b8:	mov	r4, #0
   199bc:	mvnne	r7, #0
   199c0:	cmp	r2, #0
   199c4:	umull	r1, ip, r7, r5
   199c8:	mvnne	r6, #0
   199cc:	mla	ip, r7, sl, ip
   199d0:	subs	r7, r0, r7
   199d4:	sbcs	r7, r3, r6
   199d8:	mla	lr, r6, r5, ip
   199dc:	mov	ip, #0
   199e0:	movwcc	ip, #1
   199e4:	cmp	ip, #0
   199e8:	mvnne	r1, #0
   199ec:	mvnne	lr, #0
   199f0:	subs	r7, r0, r1
   199f4:	sbcs	r7, r3, lr
   199f8:	umull	r0, r7, r1, r5
   199fc:	movwcc	r4, #1
   19a00:	cmp	r4, #0
   19a04:	mla	r1, r1, sl, r7
   19a08:	mvnne	r0, #0
   19a0c:	cmp	r4, #0
   19a10:	mla	r1, lr, r5, r1
   19a14:	umull	r6, r3, r0, r5
   19a18:	mvnne	r1, #0
   19a1c:	mla	r3, r0, sl, r3
   19a20:	mla	r7, r1, r5, r3
   19a24:	ldr	r3, [sp, #12]
   19a28:	subs	r0, r3, r0
   19a2c:	ldr	r0, [sp, #8]
   19a30:	ldr	r3, [sp, #16]
   19a34:	sbcs	r0, r0, r1
   19a38:	mov	r0, #0
   19a3c:	movwcc	r0, #1
   19a40:	cmp	r0, #0
   19a44:	mov	r1, r0
   19a48:	ldr	r0, [sp, #20]
   19a4c:	mvnne	r7, #0
   19a50:	mvnne	r6, #0
   19a54:	orr	r0, r0, r3
   19a58:	orr	r0, r0, r2
   19a5c:	orr	r0, r0, ip
   19a60:	orr	r0, r0, r4
   19a64:	orr	r3, r0, r1
   19a68:	b	19dc4 <__assert_fail@plt+0x8908>
   19a6c:	mvn	r0, #0
   19a70:	mvn	r1, #0
   19a74:	mov	r2, r5
   19a78:	mov	sl, r3
   19a7c:	bl	1a610 <__assert_fail@plt+0x9154>
   19a80:	umull	r3, r2, r6, r5
   19a84:	mov	lr, r1
   19a88:	mov	r1, r0
   19a8c:	mla	r2, r6, sl, r2
   19a90:	subs	r6, r0, r6
   19a94:	mov	r0, #0
   19a98:	sbcs	r6, lr, r7
   19a9c:	mla	r2, r7, r5, r2
   19aa0:	movwcc	r0, #1
   19aa4:	cmp	r0, #0
   19aa8:	str	r0, [sp, #20]
   19aac:	mov	r0, r1
   19ab0:	mvnne	r3, #0
   19ab4:	mvnne	r2, #0
   19ab8:	str	r0, [sp, #16]
   19abc:	subs	r4, r1, r3
   19ac0:	umull	r7, ip, r3, r5
   19ac4:	sbcs	r4, lr, r2
   19ac8:	mov	r4, #0
   19acc:	movwcc	r4, #1
   19ad0:	mla	r3, r3, sl, ip
   19ad4:	mov	ip, #0
   19ad8:	cmp	r4, #0
   19adc:	mla	r2, r2, r5, r3
   19ae0:	mvnne	r7, #0
   19ae4:	cmp	r4, #0
   19ae8:	umull	r1, r6, r7, r5
   19aec:	mvnne	r2, #0
   19af0:	mla	r6, r7, sl, r6
   19af4:	mla	r3, r2, r5, r6
   19af8:	subs	r6, r0, r7
   19afc:	sbcs	r2, lr, r2
   19b00:	mov	r2, #0
   19b04:	movwcc	ip, #1
   19b08:	cmp	ip, #0
   19b0c:	mvnne	r1, #0
   19b10:	mvnne	r3, #0
   19b14:	subs	r6, r0, r1
   19b18:	sbcs	r6, lr, r3
   19b1c:	umull	r0, r6, r1, r5
   19b20:	movwcc	r2, #1
   19b24:	cmp	r2, #0
   19b28:	mvnne	r0, #0
   19b2c:	cmp	r2, #0
   19b30:	str	r6, [sp, #12]
   19b34:	umull	r6, r7, r0, r5
   19b38:	mla	r7, r0, sl, r7
   19b3c:	str	r7, [sp, #8]
   19b40:	ldr	r7, [sp, #12]
   19b44:	mla	r1, r1, sl, r7
   19b48:	mla	r1, r3, r5, r1
   19b4c:	ldr	r3, [sp, #8]
   19b50:	mvnne	r1, #0
   19b54:	mla	r7, r1, r5, r3
   19b58:	ldr	r3, [sp, #16]
   19b5c:	subs	r0, r3, r0
   19b60:	sbcs	r0, lr, r1
   19b64:	mov	r0, #0
   19b68:	movwcc	r0, #1
   19b6c:	cmp	r0, #0
   19b70:	mov	r1, r0
   19b74:	ldr	r0, [sp, #20]
   19b78:	mvnne	r7, #0
   19b7c:	mvnne	r6, #0
   19b80:	orr	r0, r0, r4
   19b84:	orr	r0, r0, ip
   19b88:	orr	r0, r0, r2
   19b8c:	orr	r3, r0, r1
   19b90:	b	19dc4 <__assert_fail@plt+0x8908>
   19b94:	mvn	r0, #0
   19b98:	mvn	r1, #0
   19b9c:	mov	r2, r5
   19ba0:	mov	sl, r3
   19ba4:	bl	1a610 <__assert_fail@plt+0x9154>
   19ba8:	mov	lr, r0
   19bac:	subs	r0, r0, r6
   19bb0:	mov	r2, #0
   19bb4:	mov	ip, r1
   19bb8:	str	sl, [sp, #24]
   19bbc:	sbcs	r0, r1, r7
   19bc0:	umull	r3, r1, r6, r5
   19bc4:	str	lr, [sp, #4]
   19bc8:	movwcc	r2, #1
   19bcc:	cmp	r2, #0
   19bd0:	mla	r6, r6, sl, r1
   19bd4:	mov	r1, #0
   19bd8:	str	r2, [sp, #20]
   19bdc:	mvnne	r3, #0
   19be0:	cmp	r2, #0
   19be4:	mla	r7, r7, r5, r6
   19be8:	mov	r2, #0
   19bec:	umull	r0, r4, r3, r5
   19bf0:	mvnne	r7, #0
   19bf4:	mla	r4, r3, sl, r4
   19bf8:	subs	r3, lr, r3
   19bfc:	sbcs	r3, ip, r7
   19c00:	mla	r4, r7, r5, r4
   19c04:	movwcc	r1, #1
   19c08:	cmp	r1, #0
   19c0c:	str	r1, [sp, #16]
   19c10:	mvnne	r0, #0
   19c14:	mvnne	r4, #0
   19c18:	subs	r3, lr, r0
   19c1c:	sbcs	r3, ip, r4
   19c20:	umull	r6, r3, r0, r5
   19c24:	movwcc	r2, #1
   19c28:	cmp	r2, #0
   19c2c:	mla	r0, r0, sl, r3
   19c30:	str	r2, [sp, #12]
   19c34:	mvnne	r6, #0
   19c38:	cmp	r2, #0
   19c3c:	mla	r0, r4, r5, r0
   19c40:	ldr	r4, [sp, #24]
   19c44:	umull	r1, r7, r6, r5
   19c48:	mvnne	r0, #0
   19c4c:	subs	r3, lr, r6
   19c50:	mov	r3, ip
   19c54:	str	r3, [sp]
   19c58:	mla	r7, r6, sl, r7
   19c5c:	mla	r7, r0, r5, r7
   19c60:	sbcs	r0, ip, r0
   19c64:	mov	r0, #0
   19c68:	movwcc	r0, #1
   19c6c:	cmp	r0, #0
   19c70:	str	r0, [sp, #8]
   19c74:	mvnne	r1, #0
   19c78:	mvnne	r7, #0
   19c7c:	subs	r0, lr, r1
   19c80:	sbcs	r0, ip, r7
   19c84:	mov	ip, #0
   19c88:	umull	r6, r0, r1, r5
   19c8c:	movwcc	ip, #1
   19c90:	cmp	ip, #0
   19c94:	mla	r1, r1, r4, r0
   19c98:	mov	r0, lr
   19c9c:	mvnne	r6, #0
   19ca0:	cmp	ip, #0
   19ca4:	mla	r1, r7, r5, r1
   19ca8:	umull	r2, sl, r6, r5
   19cac:	mvnne	r1, #0
   19cb0:	mla	sl, r6, r4, sl
   19cb4:	subs	r6, lr, r6
   19cb8:	mov	lr, #0
   19cbc:	mla	r7, r1, r5, sl
   19cc0:	sbcs	r1, r3, r1
   19cc4:	ldr	r1, [sp, #24]
   19cc8:	movwcc	lr, #1
   19ccc:	cmp	lr, #0
   19cd0:	mvnne	r2, #0
   19cd4:	mvnne	r7, #0
   19cd8:	subs	r6, r0, r2
   19cdc:	umull	r0, sl, r2, r5
   19ce0:	sbcs	r6, r3, r7
   19ce4:	mov	r3, #0
   19ce8:	movwcc	r3, #1
   19cec:	mla	r2, r2, r1, sl
   19cf0:	cmp	r3, #0
   19cf4:	mla	r2, r7, r5, r2
   19cf8:	mvnne	r0, #0
   19cfc:	cmp	r3, #0
   19d00:	umull	r6, r4, r0, r5
   19d04:	mvnne	r2, #0
   19d08:	mla	r4, r0, r1, r4
   19d0c:	ldr	r1, [sp, #4]
   19d10:	mla	r7, r2, r5, r4
   19d14:	ldr	r5, [sp, #16]
   19d18:	subs	r0, r1, r0
   19d1c:	ldr	r0, [sp]
   19d20:	sbcs	r0, r0, r2
   19d24:	mov	r0, #0
   19d28:	movwcc	r0, #1
   19d2c:	cmp	r0, #0
   19d30:	mov	r2, r0
   19d34:	ldr	r0, [sp, #20]
   19d38:	mvnne	r7, #0
   19d3c:	mvnne	r6, #0
   19d40:	orr	r0, r0, r5
   19d44:	ldr	r5, [sp, #12]
   19d48:	orr	r0, r0, r5
   19d4c:	ldr	r5, [sp, #8]
   19d50:	orr	r0, r0, r5
   19d54:	orr	r0, r0, ip
   19d58:	orr	r0, r0, lr
   19d5c:	orr	r0, r0, r3
   19d60:	orr	r0, r0, r2
   19d64:	and	r3, r0, #1
   19d68:	b	19dc4 <__assert_fail@plt+0x8908>
   19d6c:	mov	r1, #0
   19d70:	lsl	r2, r7, #9
   19d74:	lsl	r0, r6, #9
   19d78:	lsr	r3, r7, #23
   19d7c:	cmp	r1, r7, lsr #23
   19d80:	orr	r2, r2, r6, lsr #23
   19d84:	mvnne	r0, #0
   19d88:	movwne	r3, #1
   19d8c:	cmp	r1, r7, lsr #23
   19d90:	mvnne	r2, #0
   19d94:	mov	r6, r0
   19d98:	mov	r7, r2
   19d9c:	b	19dc4 <__assert_fail@plt+0x8908>
   19da0:	lsl	r1, r7, #1
   19da4:	cmp	r7, #0
   19da8:	lsl	r0, r6, #1
   19dac:	lsr	r3, r7, #31
   19db0:	orr	r1, r1, r6, lsr #31
   19db4:	mvnmi	r0, #0
   19db8:	mvnmi	r1, #0
   19dbc:	mov	r6, r0
   19dc0:	mov	r7, r1
   19dc4:	ldr	r1, [sp, #32]
   19dc8:	ldr	r2, [sp, #28]
   19dcc:	orr	r8, r3, r8
   19dd0:	add	r0, r1, r2
   19dd4:	str	r0, [r9]
   19dd8:	ldrb	r0, [r1, r2]
   19ddc:	cmp	r0, #0
   19de0:	orrne	r8, r8, #2
   19de4:	ldr	r0, [sp, #36]	; 0x24
   19de8:	strd	r6, [r0]
   19dec:	mov	r0, r8
   19df0:	sub	sp, fp, #28
   19df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19df8:	movw	r0, #47986	; 0xbb72
   19dfc:	movw	r1, #48024	; 0xbb98
   19e00:	movw	r3, #48040	; 0xbba8
   19e04:	mov	r2, #85	; 0x55
   19e08:	movt	r0, #1
   19e0c:	movt	r1, #1
   19e10:	movt	r3, #1
   19e14:	bl	114bc <__assert_fail@plt>
   19e18:	clz	r2, r1
   19e1c:	clz	r3, r0
   19e20:	lsr	r2, r2, #5
   19e24:	lsr	r3, r3, #5
   19e28:	orrs	r2, r3, r2
   19e2c:	movwne	r1, #1
   19e30:	movwne	r0, #1
   19e34:	cmp	r1, #0
   19e38:	beq	19e68 <__assert_fail@plt+0x89ac>
   19e3c:	mvn	r2, #-2147483648	; 0x80000000
   19e40:	udiv	r2, r2, r1
   19e44:	cmp	r2, r0
   19e48:	bcs	19e68 <__assert_fail@plt+0x89ac>
   19e4c:	push	{fp, lr}
   19e50:	mov	fp, sp
   19e54:	bl	11378 <__errno_location@plt>
   19e58:	mov	r1, #12
   19e5c:	str	r1, [r0]
   19e60:	mov	r0, #0
   19e64:	pop	{fp, pc}
   19e68:	b	111a4 <calloc@plt>
   19e6c:	cmp	r0, #0
   19e70:	movweq	r0, #1
   19e74:	cmn	r0, #1
   19e78:	ble	19e80 <__assert_fail@plt+0x89c4>
   19e7c:	b	112e8 <malloc@plt>
   19e80:	push	{fp, lr}
   19e84:	mov	fp, sp
   19e88:	bl	11378 <__errno_location@plt>
   19e8c:	mov	r1, #12
   19e90:	str	r1, [r0]
   19e94:	mov	r0, #0
   19e98:	pop	{fp, pc}
   19e9c:	push	{fp, lr}
   19ea0:	mov	fp, sp
   19ea4:	cmp	r0, #0
   19ea8:	beq	19ec4 <__assert_fail@plt+0x8a08>
   19eac:	cmp	r1, #0
   19eb0:	beq	19ed0 <__assert_fail@plt+0x8a14>
   19eb4:	cmn	r1, #1
   19eb8:	ble	19edc <__assert_fail@plt+0x8a20>
   19ebc:	pop	{fp, lr}
   19ec0:	b	11258 <realloc@plt>
   19ec4:	mov	r0, r1
   19ec8:	pop	{fp, lr}
   19ecc:	b	19e6c <__assert_fail@plt+0x89b0>
   19ed0:	bl	12db4 <__assert_fail@plt+0x18f8>
   19ed4:	mov	r0, #0
   19ed8:	pop	{fp, pc}
   19edc:	bl	11378 <__errno_location@plt>
   19ee0:	mov	r1, #12
   19ee4:	str	r1, [r0]
   19ee8:	mov	r0, #0
   19eec:	pop	{fp, pc}
   19ef0:	push	{r4, r5, r6, sl, fp, lr}
   19ef4:	add	fp, sp, #16
   19ef8:	mov	r4, r0
   19efc:	bl	112b8 <__fpending@plt>
   19f00:	ldr	r6, [r4]
   19f04:	mov	r5, r0
   19f08:	mov	r0, r4
   19f0c:	bl	1a064 <__assert_fail@plt+0x8ba8>
   19f10:	tst	r6, #32
   19f14:	bne	19f4c <__assert_fail@plt+0x8a90>
   19f18:	cmp	r0, #0
   19f1c:	mov	r4, r0
   19f20:	mvnne	r4, #0
   19f24:	cmp	r5, #0
   19f28:	bne	19f58 <__assert_fail@plt+0x8a9c>
   19f2c:	cmp	r0, #0
   19f30:	beq	19f58 <__assert_fail@plt+0x8a9c>
   19f34:	bl	11378 <__errno_location@plt>
   19f38:	ldr	r0, [r0]
   19f3c:	subs	r4, r0, #9
   19f40:	mvnne	r4, #0
   19f44:	mov	r0, r4
   19f48:	pop	{r4, r5, r6, sl, fp, pc}
   19f4c:	mvn	r4, #0
   19f50:	cmp	r0, #0
   19f54:	beq	19f60 <__assert_fail@plt+0x8aa4>
   19f58:	mov	r0, r4
   19f5c:	pop	{r4, r5, r6, sl, fp, pc}
   19f60:	bl	11378 <__errno_location@plt>
   19f64:	mov	r1, #0
   19f68:	str	r1, [r0]
   19f6c:	mov	r0, r4
   19f70:	pop	{r4, r5, r6, sl, fp, pc}
   19f74:	movw	r2, #62998	; 0xf616
   19f78:	mov	r1, #0
   19f7c:	movt	r2, #149	; 0x95
   19f80:	str	r1, [r0, #16]
   19f84:	str	r1, [r0, #20]
   19f88:	str	r2, [r0, #24]
   19f8c:	bx	lr
   19f90:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19f94:	add	fp, sp, #24
   19f98:	ldr	r2, [r0, #24]
   19f9c:	movw	r3, #62998	; 0xf616
   19fa0:	movt	r3, #149	; 0x95
   19fa4:	cmp	r2, r3
   19fa8:	bne	1a044 <__assert_fail@plt+0x8b88>
   19fac:	add	r3, r0, #16
   19fb0:	add	ip, r0, #8
   19fb4:	ldrd	r4, [r3]
   19fb8:	orrs	r2, r4, r5
   19fbc:	beq	19ff8 <__assert_fail@plt+0x8b3c>
   19fc0:	ldr	r6, [r1, #96]	; 0x60
   19fc4:	ldr	r9, [r1, #100]	; 0x64
   19fc8:	ldm	r0, {r2, r7}
   19fcc:	eor	r7, r9, r7
   19fd0:	eor	r2, r6, r2
   19fd4:	orrs	r2, r2, r7
   19fd8:	bne	19ff8 <__assert_fail@plt+0x8b3c>
   19fdc:	ldm	ip, {r2, r7}
   19fe0:	ldm	r1, {r6, r9}
   19fe4:	eor	r7, r9, r7
   19fe8:	eor	r2, r6, r2
   19fec:	orrs	r2, r2, r7
   19ff0:	mov	r2, #1
   19ff4:	beq	1a030 <__assert_fail@plt+0x8b74>
   19ff8:	adds	r6, r4, #1
   19ffc:	adc	r7, r5, #0
   1a000:	and	r2, r6, r4
   1a004:	strd	r6, [r3]
   1a008:	and	r3, r7, r5
   1a00c:	orrs	r2, r2, r3
   1a010:	mov	r2, #0
   1a014:	bne	1a030 <__assert_fail@plt+0x8b74>
   1a018:	orrs	r3, r6, r7
   1a01c:	beq	1a038 <__assert_fail@plt+0x8b7c>
   1a020:	ldrd	r4, [r1]
   1a024:	strd	r4, [ip]
   1a028:	ldrd	r4, [r1, #96]	; 0x60
   1a02c:	strd	r4, [r0]
   1a030:	mov	r0, r2
   1a034:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a038:	mov	r2, #1
   1a03c:	mov	r0, r2
   1a040:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a044:	movw	r0, #48119	; 0xbbf7
   1a048:	movw	r1, #48143	; 0xbc0f
   1a04c:	movw	r3, #48161	; 0xbc21
   1a050:	mov	r2, #60	; 0x3c
   1a054:	movt	r0, #1
   1a058:	movt	r1, #1
   1a05c:	movt	r3, #1
   1a060:	bl	114bc <__assert_fail@plt>
   1a064:	push	{r4, r5, r6, sl, fp, lr}
   1a068:	add	fp, sp, #16
   1a06c:	sub	sp, sp, #8
   1a070:	mov	r4, r0
   1a074:	bl	113a8 <fileno@plt>
   1a078:	cmn	r0, #1
   1a07c:	ble	1a0f0 <__assert_fail@plt+0x8c34>
   1a080:	mov	r0, r4
   1a084:	bl	11300 <__freading@plt>
   1a088:	cmp	r0, #0
   1a08c:	beq	1a0b8 <__assert_fail@plt+0x8bfc>
   1a090:	mov	r0, r4
   1a094:	bl	113a8 <fileno@plt>
   1a098:	mov	r1, #1
   1a09c:	mov	r2, #0
   1a0a0:	mov	r3, #0
   1a0a4:	str	r1, [sp]
   1a0a8:	bl	112a0 <lseek64@plt>
   1a0ac:	and	r0, r0, r1
   1a0b0:	cmn	r0, #1
   1a0b4:	beq	1a0f0 <__assert_fail@plt+0x8c34>
   1a0b8:	mov	r0, r4
   1a0bc:	bl	1a31c <__assert_fail@plt+0x8e60>
   1a0c0:	cmp	r0, #0
   1a0c4:	beq	1a0f0 <__assert_fail@plt+0x8c34>
   1a0c8:	bl	11378 <__errno_location@plt>
   1a0cc:	ldr	r6, [r0]
   1a0d0:	mov	r5, r0
   1a0d4:	mov	r0, r4
   1a0d8:	bl	113c0 <fclose@plt>
   1a0dc:	cmp	r6, #0
   1a0e0:	strne	r6, [r5]
   1a0e4:	mvnne	r0, #0
   1a0e8:	sub	sp, fp, #16
   1a0ec:	pop	{r4, r5, r6, sl, fp, pc}
   1a0f0:	mov	r0, r4
   1a0f4:	sub	sp, fp, #16
   1a0f8:	pop	{r4, r5, r6, sl, fp, lr}
   1a0fc:	b	113c0 <fclose@plt>
   1a100:	sub	sp, sp, #8
   1a104:	push	{r4, r5, r6, r7, fp, lr}
   1a108:	add	fp, sp, #16
   1a10c:	sub	sp, sp, #8
   1a110:	mov	r5, r0
   1a114:	add	r0, fp, #8
   1a118:	cmp	r1, #11
   1a11c:	str	r2, [fp, #8]
   1a120:	str	r3, [fp, #12]
   1a124:	str	r0, [sp, #4]
   1a128:	bhi	1a164 <__assert_fail@plt+0x8ca8>
   1a12c:	mov	r0, #1
   1a130:	movw	r2, #1300	; 0x514
   1a134:	tst	r2, r0, lsl r1
   1a138:	bne	1a224 <__assert_fail@plt+0x8d68>
   1a13c:	movw	r2, #2570	; 0xa0a
   1a140:	tst	r2, r0, lsl r1
   1a144:	bne	1a18c <__assert_fail@plt+0x8cd0>
   1a148:	cmp	r1, #0
   1a14c:	bne	1a164 <__assert_fail@plt+0x8ca8>
   1a150:	ldr	r0, [sp, #4]
   1a154:	add	r1, r0, #4
   1a158:	str	r1, [sp, #4]
   1a15c:	mov	r1, #0
   1a160:	b	1a230 <__assert_fail@plt+0x8d74>
   1a164:	sub	r0, r1, #1024	; 0x400
   1a168:	cmp	r0, #10
   1a16c:	bhi	1a224 <__assert_fail@plt+0x8d68>
   1a170:	mov	r2, #1
   1a174:	movw	r3, #645	; 0x285
   1a178:	tst	r3, r2, lsl r0
   1a17c:	bne	1a224 <__assert_fail@plt+0x8d68>
   1a180:	movw	r3, #1282	; 0x502
   1a184:	tst	r3, r2, lsl r0
   1a188:	beq	1a198 <__assert_fail@plt+0x8cdc>
   1a18c:	mov	r0, r5
   1a190:	bl	113d8 <fcntl64@plt>
   1a194:	b	1a23c <__assert_fail@plt+0x8d80>
   1a198:	cmp	r0, #6
   1a19c:	bne	1a224 <__assert_fail@plt+0x8d68>
   1a1a0:	ldr	r0, [sp, #4]
   1a1a4:	movw	r7, #49896	; 0xc2e8
   1a1a8:	movt	r7, #2
   1a1ac:	add	r1, r0, #4
   1a1b0:	str	r1, [sp, #4]
   1a1b4:	ldr	r6, [r0]
   1a1b8:	ldr	r0, [r7]
   1a1bc:	cmp	r0, #0
   1a1c0:	bmi	1a260 <__assert_fail@plt+0x8da4>
   1a1c4:	mov	r0, r5
   1a1c8:	movw	r1, #1030	; 0x406
   1a1cc:	mov	r2, r6
   1a1d0:	bl	113d8 <fcntl64@plt>
   1a1d4:	mov	r4, r0
   1a1d8:	cmn	r0, #1
   1a1dc:	bgt	1a254 <__assert_fail@plt+0x8d98>
   1a1e0:	bl	11378 <__errno_location@plt>
   1a1e4:	ldr	r0, [r0]
   1a1e8:	cmp	r0, #22
   1a1ec:	bne	1a254 <__assert_fail@plt+0x8d98>
   1a1f0:	mov	r0, r5
   1a1f4:	mov	r1, #0
   1a1f8:	mov	r2, r6
   1a1fc:	bl	113d8 <fcntl64@plt>
   1a200:	mov	r4, r0
   1a204:	cmp	r0, #0
   1a208:	bmi	1a240 <__assert_fail@plt+0x8d84>
   1a20c:	mvn	r0, #0
   1a210:	str	r0, [r7]
   1a214:	mov	r0, #1
   1a218:	cmp	r0, #0
   1a21c:	bne	1a28c <__assert_fail@plt+0x8dd0>
   1a220:	b	1a240 <__assert_fail@plt+0x8d84>
   1a224:	ldr	r0, [sp, #4]
   1a228:	add	r2, r0, #4
   1a22c:	str	r2, [sp, #4]
   1a230:	ldr	r2, [r0]
   1a234:	mov	r0, r5
   1a238:	bl	113d8 <fcntl64@plt>
   1a23c:	mov	r4, r0
   1a240:	mov	r0, r4
   1a244:	sub	sp, fp, #16
   1a248:	pop	{r4, r5, r6, r7, fp, lr}
   1a24c:	add	sp, sp, #8
   1a250:	bx	lr
   1a254:	mov	r0, #1
   1a258:	str	r0, [r7]
   1a25c:	b	1a240 <__assert_fail@plt+0x8d84>
   1a260:	mov	r0, r5
   1a264:	mov	r1, #0
   1a268:	mov	r2, r6
   1a26c:	bl	113d8 <fcntl64@plt>
   1a270:	mov	r4, r0
   1a274:	ldr	r0, [r7]
   1a278:	add	r0, r0, #1
   1a27c:	clz	r0, r0
   1a280:	lsr	r0, r0, #5
   1a284:	cmp	r0, #0
   1a288:	beq	1a240 <__assert_fail@plt+0x8d84>
   1a28c:	cmp	r4, #0
   1a290:	bmi	1a240 <__assert_fail@plt+0x8d84>
   1a294:	mov	r0, r4
   1a298:	mov	r1, #1
   1a29c:	bl	113d8 <fcntl64@plt>
   1a2a0:	cmp	r0, #0
   1a2a4:	bmi	1a2c0 <__assert_fail@plt+0x8e04>
   1a2a8:	orr	r2, r0, #1
   1a2ac:	mov	r0, r4
   1a2b0:	mov	r1, #2
   1a2b4:	bl	113d8 <fcntl64@plt>
   1a2b8:	cmn	r0, #1
   1a2bc:	bne	1a240 <__assert_fail@plt+0x8d84>
   1a2c0:	bl	11378 <__errno_location@plt>
   1a2c4:	ldr	r6, [r0]
   1a2c8:	mov	r5, r0
   1a2cc:	mov	r0, r4
   1a2d0:	bl	11480 <close@plt>
   1a2d4:	str	r6, [r5]
   1a2d8:	mvn	r4, #0
   1a2dc:	b	1a240 <__assert_fail@plt+0x8d84>
   1a2e0:	sub	sp, sp, #8
   1a2e4:	push	{fp, lr}
   1a2e8:	mov	fp, sp
   1a2ec:	sub	sp, sp, #8
   1a2f0:	str	r2, [fp, #8]
   1a2f4:	str	r3, [fp, #12]
   1a2f8:	tst	r1, #64	; 0x40
   1a2fc:	mov	r2, #0
   1a300:	ldrne	r2, [fp, #8]
   1a304:	bl	112dc <open64@plt>
   1a308:	bl	1847c <__assert_fail@plt+0x6fc0>
   1a30c:	mov	sp, fp
   1a310:	pop	{fp, lr}
   1a314:	add	sp, sp, #8
   1a318:	bx	lr
   1a31c:	push	{r4, sl, fp, lr}
   1a320:	add	fp, sp, #8
   1a324:	sub	sp, sp, #8
   1a328:	mov	r4, r0
   1a32c:	cmp	r0, #0
   1a330:	beq	1a368 <__assert_fail@plt+0x8eac>
   1a334:	mov	r0, r4
   1a338:	bl	11300 <__freading@plt>
   1a33c:	cmp	r0, #0
   1a340:	beq	1a368 <__assert_fail@plt+0x8eac>
   1a344:	ldrb	r0, [r4, #1]
   1a348:	tst	r0, #1
   1a34c:	beq	1a368 <__assert_fail@plt+0x8eac>
   1a350:	mov	r0, #1
   1a354:	mov	r2, #0
   1a358:	mov	r3, #0
   1a35c:	str	r0, [sp]
   1a360:	mov	r0, r4
   1a364:	bl	1a378 <__assert_fail@plt+0x8ebc>
   1a368:	mov	r0, r4
   1a36c:	sub	sp, fp, #8
   1a370:	pop	{r4, sl, fp, lr}
   1a374:	b	111ec <fflush@plt>
   1a378:	push	{r4, r5, r6, r7, fp, lr}
   1a37c:	add	fp, sp, #16
   1a380:	sub	sp, sp, #8
   1a384:	mov	r4, r0
   1a388:	ldr	r0, [r0, #4]
   1a38c:	mov	r5, r3
   1a390:	mov	r6, r2
   1a394:	ldr	r1, [r4, #8]
   1a398:	cmp	r1, r0
   1a39c:	bne	1a3b8 <__assert_fail@plt+0x8efc>
   1a3a0:	ldrd	r0, [r4, #16]
   1a3a4:	cmp	r1, r0
   1a3a8:	bne	1a3b8 <__assert_fail@plt+0x8efc>
   1a3ac:	ldr	r0, [r4, #36]	; 0x24
   1a3b0:	cmp	r0, #0
   1a3b4:	beq	1a3d0 <__assert_fail@plt+0x8f14>
   1a3b8:	mov	r0, r4
   1a3bc:	mov	r2, r6
   1a3c0:	mov	r3, r5
   1a3c4:	sub	sp, fp, #16
   1a3c8:	pop	{r4, r5, r6, r7, fp, lr}
   1a3cc:	b	113cc <fseeko64@plt>
   1a3d0:	ldr	r7, [fp, #8]
   1a3d4:	mov	r0, r4
   1a3d8:	bl	113a8 <fileno@plt>
   1a3dc:	mov	r2, r6
   1a3e0:	mov	r3, r5
   1a3e4:	str	r7, [sp]
   1a3e8:	bl	112a0 <lseek64@plt>
   1a3ec:	and	r2, r0, r1
   1a3f0:	cmn	r2, #1
   1a3f4:	beq	1a414 <__assert_fail@plt+0x8f58>
   1a3f8:	strd	r0, [r4, #80]	; 0x50
   1a3fc:	ldr	r0, [r4]
   1a400:	bic	r0, r0, #16
   1a404:	str	r0, [r4]
   1a408:	mov	r0, #0
   1a40c:	sub	sp, fp, #16
   1a410:	pop	{r4, r5, r6, r7, fp, pc}
   1a414:	mvn	r0, #0
   1a418:	sub	sp, fp, #16
   1a41c:	pop	{r4, r5, r6, r7, fp, pc}
   1a420:	push	{fp, lr}
   1a424:	mov	fp, sp
   1a428:	mov	r0, #14
   1a42c:	bl	113fc <nl_langinfo@plt>
   1a430:	movw	r1, #44572	; 0xae1c
   1a434:	cmp	r0, #0
   1a438:	movt	r1, #1
   1a43c:	movne	r1, r0
   1a440:	movw	r0, #48228	; 0xbc64
   1a444:	ldrb	r2, [r1]
   1a448:	movt	r0, #1
   1a44c:	cmp	r2, #0
   1a450:	movne	r0, r1
   1a454:	pop	{fp, pc}
   1a458:	push	{r4, r5, r6, r7, fp, lr}
   1a45c:	add	fp, sp, #16
   1a460:	sub	sp, sp, #8
   1a464:	cmp	r0, #0
   1a468:	add	r5, sp, #4
   1a46c:	mov	r7, r2
   1a470:	mov	r4, r1
   1a474:	movne	r5, r0
   1a478:	mov	r0, r5
   1a47c:	bl	112c4 <mbrtowc@plt>
   1a480:	mov	r6, r0
   1a484:	cmp	r7, #0
   1a488:	beq	1a4b0 <__assert_fail@plt+0x8ff4>
   1a48c:	cmn	r6, #2
   1a490:	bcc	1a4b0 <__assert_fail@plt+0x8ff4>
   1a494:	mov	r0, #0
   1a498:	bl	1a504 <__assert_fail@plt+0x9048>
   1a49c:	cmp	r0, #0
   1a4a0:	bne	1a4b0 <__assert_fail@plt+0x8ff4>
   1a4a4:	ldrb	r0, [r4]
   1a4a8:	mov	r6, #1
   1a4ac:	str	r0, [r5]
   1a4b0:	mov	r0, r6
   1a4b4:	sub	sp, fp, #16
   1a4b8:	pop	{r4, r5, r6, r7, fp, pc}
   1a4bc:	cmp	r2, #0
   1a4c0:	beq	1a4f0 <__assert_fail@plt+0x9034>
   1a4c4:	mvn	r3, #0
   1a4c8:	udiv	r3, r3, r2
   1a4cc:	cmp	r3, r1
   1a4d0:	bcs	1a4f0 <__assert_fail@plt+0x9034>
   1a4d4:	push	{fp, lr}
   1a4d8:	mov	fp, sp
   1a4dc:	bl	11378 <__errno_location@plt>
   1a4e0:	mov	r1, #12
   1a4e4:	str	r1, [r0]
   1a4e8:	mov	r0, #0
   1a4ec:	pop	{fp, pc}
   1a4f0:	mul	r1, r2, r1
   1a4f4:	b	19e9c <__assert_fail@plt+0x89e0>
   1a4f8:	mov	r1, #0
   1a4fc:	mov	r2, #3
   1a500:	b	1a100 <__assert_fail@plt+0x8c44>
   1a504:	push	{r4, sl, fp, lr}
   1a508:	add	fp, sp, #8
   1a50c:	sub	sp, sp, #264	; 0x108
   1a510:	add	r1, sp, #7
   1a514:	movw	r2, #257	; 0x101
   1a518:	bl	1a570 <__assert_fail@plt+0x90b4>
   1a51c:	mov	r4, #0
   1a520:	cmp	r0, #0
   1a524:	bne	1a564 <__assert_fail@plt+0x90a8>
   1a528:	movw	r1, #48234	; 0xbc6a
   1a52c:	add	r0, sp, #7
   1a530:	mov	r2, #2
   1a534:	movt	r1, #1
   1a538:	bl	1133c <bcmp@plt>
   1a53c:	cmp	r0, #0
   1a540:	beq	1a564 <__assert_fail@plt+0x90a8>
   1a544:	movw	r1, #48236	; 0xbc6c
   1a548:	add	r0, sp, #7
   1a54c:	mov	r2, #6
   1a550:	movt	r1, #1
   1a554:	bl	1133c <bcmp@plt>
   1a558:	cmp	r0, #0
   1a55c:	mov	r4, r0
   1a560:	movwne	r4, #1
   1a564:	mov	r0, r4
   1a568:	sub	sp, fp, #8
   1a56c:	pop	{r4, sl, fp, pc}
   1a570:	push	{r4, r5, r6, r7, fp, lr}
   1a574:	add	fp, sp, #16
   1a578:	mov	r4, r1
   1a57c:	mov	r1, #0
   1a580:	mov	r6, r2
   1a584:	bl	113e4 <setlocale@plt>
   1a588:	cmp	r0, #0
   1a58c:	beq	1a5bc <__assert_fail@plt+0x9100>
   1a590:	mov	r7, r0
   1a594:	bl	11348 <strlen@plt>
   1a598:	cmp	r0, r6
   1a59c:	bcs	1a5d8 <__assert_fail@plt+0x911c>
   1a5a0:	add	r2, r0, #1
   1a5a4:	mov	r0, r4
   1a5a8:	mov	r1, r7
   1a5ac:	bl	1121c <memcpy@plt>
   1a5b0:	mov	r5, #0
   1a5b4:	mov	r0, r5
   1a5b8:	pop	{r4, r5, r6, r7, fp, pc}
   1a5bc:	mov	r5, #22
   1a5c0:	cmp	r6, #0
   1a5c4:	beq	1a600 <__assert_fail@plt+0x9144>
   1a5c8:	mov	r0, #0
   1a5cc:	strb	r0, [r4]
   1a5d0:	mov	r0, r5
   1a5d4:	pop	{r4, r5, r6, r7, fp, pc}
   1a5d8:	mov	r5, #34	; 0x22
   1a5dc:	cmp	r6, #0
   1a5e0:	beq	1a600 <__assert_fail@plt+0x9144>
   1a5e4:	sub	r6, r6, #1
   1a5e8:	mov	r0, r4
   1a5ec:	mov	r1, r7
   1a5f0:	mov	r2, r6
   1a5f4:	bl	1121c <memcpy@plt>
   1a5f8:	mov	r0, #0
   1a5fc:	strb	r0, [r4, r6]
   1a600:	mov	r0, r5
   1a604:	pop	{r4, r5, r6, r7, fp, pc}
   1a608:	mov	r1, #0
   1a60c:	b	113e4 <setlocale@plt>
   1a610:	cmp	r3, #0
   1a614:	cmpeq	r2, #0
   1a618:	bne	1a630 <__assert_fail@plt+0x9174>
   1a61c:	cmp	r1, #0
   1a620:	cmpeq	r0, #0
   1a624:	mvnne	r1, #0
   1a628:	mvnne	r0, #0
   1a62c:	b	1a64c <__assert_fail@plt+0x9190>
   1a630:	sub	sp, sp, #8
   1a634:	push	{sp, lr}
   1a638:	bl	1a65c <__assert_fail@plt+0x91a0>
   1a63c:	ldr	lr, [sp, #4]
   1a640:	add	sp, sp, #8
   1a644:	pop	{r2, r3}
   1a648:	bx	lr
   1a64c:	push	{r1, lr}
   1a650:	mov	r0, #8
   1a654:	bl	111c8 <raise@plt>
   1a658:	pop	{r1, pc}
   1a65c:	cmp	r1, r3
   1a660:	cmpeq	r0, r2
   1a664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a668:	mov	r4, r0
   1a66c:	movcc	r0, #0
   1a670:	mov	r5, r1
   1a674:	ldr	lr, [sp, #36]	; 0x24
   1a678:	movcc	r1, r0
   1a67c:	bcc	1a778 <__assert_fail@plt+0x92bc>
   1a680:	cmp	r3, #0
   1a684:	clzeq	ip, r2
   1a688:	clzne	ip, r3
   1a68c:	addeq	ip, ip, #32
   1a690:	cmp	r5, #0
   1a694:	clzeq	r1, r4
   1a698:	addeq	r1, r1, #32
   1a69c:	clzne	r1, r5
   1a6a0:	sub	ip, ip, r1
   1a6a4:	sub	sl, ip, #32
   1a6a8:	lsl	r9, r3, ip
   1a6ac:	rsb	fp, ip, #32
   1a6b0:	orr	r9, r9, r2, lsl sl
   1a6b4:	orr	r9, r9, r2, lsr fp
   1a6b8:	lsl	r8, r2, ip
   1a6bc:	cmp	r5, r9
   1a6c0:	cmpeq	r4, r8
   1a6c4:	movcc	r0, #0
   1a6c8:	movcc	r1, r0
   1a6cc:	bcc	1a6e8 <__assert_fail@plt+0x922c>
   1a6d0:	mov	r0, #1
   1a6d4:	subs	r4, r4, r8
   1a6d8:	lsl	r1, r0, sl
   1a6dc:	orr	r1, r1, r0, lsr fp
   1a6e0:	lsl	r0, r0, ip
   1a6e4:	sbc	r5, r5, r9
   1a6e8:	cmp	ip, #0
   1a6ec:	beq	1a778 <__assert_fail@plt+0x92bc>
   1a6f0:	lsr	r6, r8, #1
   1a6f4:	orr	r6, r6, r9, lsl #31
   1a6f8:	lsr	r7, r9, #1
   1a6fc:	mov	r2, ip
   1a700:	b	1a724 <__assert_fail@plt+0x9268>
   1a704:	subs	r3, r4, r6
   1a708:	sbc	r8, r5, r7
   1a70c:	adds	r3, r3, r3
   1a710:	adc	r8, r8, r8
   1a714:	adds	r4, r3, #1
   1a718:	adc	r5, r8, #0
   1a71c:	subs	r2, r2, #1
   1a720:	beq	1a740 <__assert_fail@plt+0x9284>
   1a724:	cmp	r5, r7
   1a728:	cmpeq	r4, r6
   1a72c:	bcs	1a704 <__assert_fail@plt+0x9248>
   1a730:	adds	r4, r4, r4
   1a734:	adc	r5, r5, r5
   1a738:	subs	r2, r2, #1
   1a73c:	bne	1a724 <__assert_fail@plt+0x9268>
   1a740:	lsr	r3, r4, ip
   1a744:	orr	r3, r3, r5, lsl fp
   1a748:	lsr	r2, r5, ip
   1a74c:	orr	r3, r3, r5, lsr sl
   1a750:	adds	r0, r0, r4
   1a754:	mov	r4, r3
   1a758:	lsl	r3, r2, ip
   1a75c:	orr	r3, r3, r4, lsl sl
   1a760:	lsl	ip, r4, ip
   1a764:	orr	r3, r3, r4, lsr fp
   1a768:	adc	r1, r1, r5
   1a76c:	subs	r0, r0, ip
   1a770:	mov	r5, r2
   1a774:	sbc	r1, r1, r3
   1a778:	cmp	lr, #0
   1a77c:	strdne	r4, [lr]
   1a780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a784:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a788:	mov	r7, r0
   1a78c:	ldr	r6, [pc, #72]	; 1a7dc <__assert_fail@plt+0x9320>
   1a790:	ldr	r5, [pc, #72]	; 1a7e0 <__assert_fail@plt+0x9324>
   1a794:	add	r6, pc, r6
   1a798:	add	r5, pc, r5
   1a79c:	sub	r6, r6, r5
   1a7a0:	mov	r8, r1
   1a7a4:	mov	r9, r2
   1a7a8:	bl	11178 <fstatfs64@plt-0x20>
   1a7ac:	asrs	r6, r6, #2
   1a7b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7b4:	mov	r4, #0
   1a7b8:	add	r4, r4, #1
   1a7bc:	ldr	r3, [r5], #4
   1a7c0:	mov	r2, r9
   1a7c4:	mov	r1, r8
   1a7c8:	mov	r0, r7
   1a7cc:	blx	r3
   1a7d0:	cmp	r6, r4
   1a7d4:	bne	1a7b8 <__assert_fail@plt+0x92fc>
   1a7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7dc:	andeq	r1, r1, r0, ror r7
   1a7e0:	andeq	r1, r1, r8, ror #14
   1a7e4:	bx	lr
   1a7e8:	ldr	r3, [pc, #12]	; 1a7fc <__assert_fail@plt+0x9340>
   1a7ec:	mov	r1, #0
   1a7f0:	add	r3, pc, r3
   1a7f4:	ldr	r2, [r3]
   1a7f8:	b	11384 <__cxa_atexit@plt>
   1a7fc:	andeq	r1, r1, ip, lsr #18

Disassembly of section .fini:

0001a800 <.fini>:
   1a800:	push	{r3, lr}
   1a804:	pop	{r3, pc}
