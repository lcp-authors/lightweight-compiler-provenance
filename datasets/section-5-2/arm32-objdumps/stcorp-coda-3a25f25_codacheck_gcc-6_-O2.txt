
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bcc <.init>:
   10bcc:	push	{r3, lr}
   10bd0:	bl	112dc <_start@@Base+0x3c>
   10bd4:	pop	{r3, pc}

Disassembly of section .plt:

00010bd8 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bd8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bdc:	ldr	lr, [pc, #4]	; 10be8 <coda_set_option_perform_boundary_checks@plt-0x4>
   10be0:	add	lr, pc, lr
   10be4:	ldr	pc, [lr, #8]!
   10be8:	andeq	r2, r1, r8, lsl r4

00010bec <coda_set_option_perform_boundary_checks@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #73728	; 0x12000
   10bf4:	ldr	pc, [ip, #1048]!	; 0x418

00010bf8 <strcmp@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #73728	; 0x12000
   10c00:	ldr	pc, [ip, #1040]!	; 0x410

00010c04 <printf@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #73728	; 0x12000
   10c0c:	ldr	pc, [ip, #1032]!	; 0x408

00010c10 <coda_set_error@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #73728	; 0x12000
   10c18:	ldr	pc, [ip, #1024]!	; 0x400

00010c1c <coda_open@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #73728	; 0x12000
   10c24:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c28 <fflush@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #73728	; 0x12000
   10c30:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c34 <coda_set_option_use_mmap@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #73728	; 0x12000
   10c3c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c40 <coda_cursor_print_path@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #73728	; 0x12000
   10c48:	ldr	pc, [ip, #992]!	; 0x3e0

00010c4c <coda_set_definition_path_conditional@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #73728	; 0x12000
   10c54:	ldr	pc, [ip, #984]!	; 0x3d8

00010c58 <coda_set_definition_path@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #73728	; 0x12000
   10c60:	ldr	pc, [ip, #976]!	; 0x3d0

00010c64 <coda_recognize_file@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #73728	; 0x12000
   10c6c:	ldr	pc, [ip, #968]!	; 0x3c8

00010c70 <fwrite@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #73728	; 0x12000
   10c78:	ldr	pc, [ip, #960]!	; 0x3c0

00010c7c <coda_type_get_format_name@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #73728	; 0x12000
   10c84:	ldr	pc, [ip, #952]!	; 0x3b8

00010c88 <coda_done@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #73728	; 0x12000
   10c90:	ldr	pc, [ip, #944]!	; 0x3b0

00010c94 <puts@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #73728	; 0x12000
   10c9c:	ldr	pc, [ip, #936]!	; 0x3a8

00010ca0 <coda_product_check@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #73728	; 0x12000
   10ca8:	ldr	pc, [ip, #928]!	; 0x3a0

00010cac <__libc_start_main@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #73728	; 0x12000
   10cb4:	ldr	pc, [ip, #920]!	; 0x398

00010cb8 <__gmon_start__@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #73728	; 0x12000
   10cc0:	ldr	pc, [ip, #912]!	; 0x390

00010cc4 <exit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #73728	; 0x12000
   10ccc:	ldr	pc, [ip, #904]!	; 0x388

00010cd0 <fprintf@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #73728	; 0x12000
   10cd8:	ldr	pc, [ip, #896]!	; 0x380

00010cdc <coda_init@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #73728	; 0x12000
   10ce4:	ldr	pc, [ip, #888]!	; 0x378

00010ce8 <ungetc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #73728	; 0x12000
   10cf0:	ldr	pc, [ip, #880]!	; 0x370

00010cf4 <coda_set_option_perform_conversions@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #73728	; 0x12000
   10cfc:	ldr	pc, [ip, #872]!	; 0x368

00010d00 <putchar@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #73728	; 0x12000
   10d08:	ldr	pc, [ip, #864]!	; 0x360

00010d0c <coda_close@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #73728	; 0x12000
   10d14:	ldr	pc, [ip, #856]!	; 0x358

00010d18 <coda_errno_to_string@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #73728	; 0x12000
   10d20:	ldr	pc, [ip, #848]!	; 0x350

00010d24 <coda_get_libcoda_version@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #73728	; 0x12000
   10d2c:	ldr	pc, [ip, #840]!	; 0x348

00010d30 <coda_get_errno@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #73728	; 0x12000
   10d38:	ldr	pc, [ip, #832]!	; 0x340

00010d3c <abort@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #73728	; 0x12000
   10d44:	ldr	pc, [ip, #824]!	; 0x338

00010d48 <getc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #73728	; 0x12000
   10d50:	ldr	pc, [ip, #816]!	; 0x330

00010d54 <__assert_fail@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #73728	; 0x12000
   10d5c:	ldr	pc, [ip, #808]!	; 0x328

Disassembly of section .text:

00010d60 <main@@Base>:
   10d60:	ldr	r3, [pc, #1220]	; 1122c <main@@Base+0x4cc>
   10d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d68:	add	r3, pc, r3
   10d6c:	ldr	r2, [pc, #1212]	; 11230 <main@@Base+0x4d0>
   10d70:	sub	sp, sp, #1040	; 0x410
   10d74:	mov	lr, r3
   10d78:	sub	sp, sp, #4
   10d7c:	ldr	ip, [pc, #1200]	; 11234 <main@@Base+0x4d4>
   10d80:	str	r3, [sp, #16]
   10d84:	ldr	sl, [lr, r2]
   10d88:	mov	r3, #0
   10d8c:	mov	r7, r0
   10d90:	str	r3, [sl]
   10d94:	ldr	r2, [pc, #1180]	; 11238 <main@@Base+0x4d8>
   10d98:	ldr	r0, [lr, ip]
   10d9c:	str	r1, [sp, #8]
   10da0:	str	r0, [sp, #4]
   10da4:	str	r3, [r0]
   10da8:	ldr	r2, [lr, r2]
   10dac:	cmp	r7, #1
   10db0:	str	r2, [sp, #28]
   10db4:	str	r3, [r2]
   10db8:	beq	11160 <main@@Base+0x400>
   10dbc:	ldr	r4, [r1, #4]
   10dc0:	ldr	r1, [pc, #1140]	; 1123c <main@@Base+0x4dc>
   10dc4:	mov	r0, r4
   10dc8:	add	r1, pc, r1
   10dcc:	bl	10bf8 <strcmp@plt>
   10dd0:	cmp	r0, #0
   10dd4:	beq	11160 <main@@Base+0x400>
   10dd8:	ldr	r1, [pc, #1120]	; 11240 <main@@Base+0x4e0>
   10ddc:	mov	r0, r4
   10de0:	add	r1, pc, r1
   10de4:	bl	10bf8 <strcmp@plt>
   10de8:	cmp	r0, #0
   10dec:	beq	11160 <main@@Base+0x400>
   10df0:	ldr	r1, [pc, #1100]	; 11244 <main@@Base+0x4e4>
   10df4:	mov	r0, r4
   10df8:	add	r1, pc, r1
   10dfc:	bl	10bf8 <strcmp@plt>
   10e00:	cmp	r0, #0
   10e04:	beq	1116c <main@@Base+0x40c>
   10e08:	ldr	r1, [pc, #1080]	; 11248 <main@@Base+0x4e8>
   10e0c:	mov	r0, r4
   10e10:	add	r1, pc, r1
   10e14:	bl	10bf8 <strcmp@plt>
   10e18:	cmp	r0, #0
   10e1c:	beq	1116c <main@@Base+0x40c>
   10e20:	cmp	r7, #2
   10e24:	ble	10e40 <main@@Base+0xe0>
   10e28:	ldr	r1, [pc, #1052]	; 1124c <main@@Base+0x4ec>
   10e2c:	mov	r0, r4
   10e30:	add	r1, pc, r1
   10e34:	bl	10bf8 <strcmp@plt>
   10e38:	cmp	r0, #0
   10e3c:	beq	10fe0 <main@@Base+0x280>
   10e40:	ldr	r3, [sp, #8]
   10e44:	ldr	r2, [pc, #1028]	; 11250 <main@@Base+0x4f0>
   10e48:	mov	r1, #0
   10e4c:	add	r2, pc, r2
   10e50:	ldr	r0, [r3]
   10e54:	bl	10c4c <coda_set_definition_path_conditional@plt>
   10e58:	cmp	r0, #0
   10e5c:	moveq	r4, #1
   10e60:	bne	111f4 <main@@Base+0x494>
   10e64:	mov	r3, #1
   10e68:	cmp	r7, r4
   10e6c:	str	r3, [sp, #20]
   10e70:	ble	10f68 <main@@Base+0x208>
   10e74:	ldr	r2, [pc, #984]	; 11254 <main@@Base+0x4f4>
   10e78:	ldr	fp, [pc, #984]	; 11258 <main@@Base+0x4f8>
   10e7c:	add	r2, pc, r2
   10e80:	str	r2, [sp]
   10e84:	ldr	r2, [pc, #976]	; 1125c <main@@Base+0x4fc>
   10e88:	ldr	r8, [pc, #976]	; 11260 <main@@Base+0x500>
   10e8c:	add	r2, pc, r2
   10e90:	str	r2, [sp, #12]
   10e94:	ldr	r2, [pc, #968]	; 11264 <main@@Base+0x504>
   10e98:	mov	r9, r3
   10e9c:	add	r2, pc, r2
   10ea0:	str	r2, [sp, #24]
   10ea4:	ldr	r2, [pc, #956]	; 11268 <main@@Base+0x508>
   10ea8:	ldr	r3, [sp, #8]
   10eac:	add	fp, pc, fp
   10eb0:	add	r2, pc, r2
   10eb4:	add	r8, pc, r8
   10eb8:	str	r2, [sp, #32]
   10ebc:	add	r6, r3, r4, lsl #2
   10ec0:	ldr	r2, [pc, #932]	; 1126c <main@@Base+0x50c>
   10ec4:	mov	r3, fp
   10ec8:	mov	fp, r8
   10ecc:	mov	r8, r3
   10ed0:	add	r2, pc, r2
   10ed4:	str	r2, [sp, #36]	; 0x24
   10ed8:	ldr	r5, [r6], #4
   10edc:	mov	r1, fp
   10ee0:	mov	r0, r5
   10ee4:	bl	10bf8 <strcmp@plt>
   10ee8:	cmp	r0, #0
   10eec:	beq	10fac <main@@Base+0x24c>
   10ef0:	mov	r1, r8
   10ef4:	mov	r0, r5
   10ef8:	bl	10bf8 <strcmp@plt>
   10efc:	cmp	r0, #0
   10f00:	beq	10fac <main@@Base+0x24c>
   10f04:	ldr	r1, [sp]
   10f08:	mov	r0, r5
   10f0c:	bl	10bf8 <strcmp@plt>
   10f10:	cmp	r0, #0
   10f14:	beq	10fb4 <main@@Base+0x254>
   10f18:	ldr	r1, [sp, #12]
   10f1c:	mov	r0, r5
   10f20:	bl	10bf8 <strcmp@plt>
   10f24:	cmp	r0, #0
   10f28:	beq	10fb4 <main@@Base+0x254>
   10f2c:	ldr	r1, [sp, #24]
   10f30:	mov	r0, r5
   10f34:	bl	10bf8 <strcmp@plt>
   10f38:	cmp	r0, #0
   10f3c:	beq	10f54 <main@@Base+0x1f4>
   10f40:	ldr	r1, [sp, #32]
   10f44:	mov	r0, r5
   10f48:	bl	10bf8 <strcmp@plt>
   10f4c:	cmp	r0, #0
   10f50:	bne	10fc0 <main@@Base+0x260>
   10f54:	ldr	r3, [sp, #28]
   10f58:	str	r9, [r3]
   10f5c:	add	r4, r4, #1
   10f60:	cmp	r7, r4
   10f64:	bne	10ed8 <main@@Base+0x178>
   10f68:	bl	10cdc <coda_init@plt>
   10f6c:	subs	r4, r0, #0
   10f70:	beq	10ff4 <main@@Base+0x294>
   10f74:	ldr	r2, [sp, #16]
   10f78:	ldr	r3, [pc, #752]	; 11270 <main@@Base+0x510>
   10f7c:	ldr	r3, [r2, r3]
   10f80:	ldr	r4, [r3]
   10f84:	bl	10d30 <coda_get_errno@plt>
   10f88:	ldr	r0, [r0]
   10f8c:	bl	10d18 <coda_errno_to_string@plt>
   10f90:	ldr	r1, [pc, #732]	; 11274 <main@@Base+0x514>
   10f94:	add	r1, pc, r1
   10f98:	mov	r2, r0
   10f9c:	mov	r0, r4
   10fa0:	bl	10cd0 <fprintf@plt>
   10fa4:	mov	r0, #1
   10fa8:	bl	10cc4 <exit@plt>
   10fac:	str	r9, [sl]
   10fb0:	b	10f5c <main@@Base+0x1fc>
   10fb4:	ldr	r3, [sp, #4]
   10fb8:	str	r9, [r3]
   10fbc:	b	10f5c <main@@Base+0x1fc>
   10fc0:	ldr	r1, [sp, #36]	; 0x24
   10fc4:	mov	r0, r5
   10fc8:	bl	10bf8 <strcmp@plt>
   10fcc:	cmp	r0, #0
   10fd0:	bne	11030 <main@@Base+0x2d0>
   10fd4:	mov	r3, #0
   10fd8:	str	r3, [sp, #20]
   10fdc:	b	10f5c <main@@Base+0x1fc>
   10fe0:	ldr	r3, [sp, #8]
   10fe4:	mov	r4, #3
   10fe8:	ldr	r0, [r3, #8]
   10fec:	bl	10c58 <coda_set_definition_path@plt>
   10ff0:	b	10e64 <main@@Base+0x104>
   10ff4:	bl	10bec <coda_set_option_perform_boundary_checks@plt>
   10ff8:	mov	r0, r4
   10ffc:	bl	10cf4 <coda_set_option_perform_conversions@plt>
   11000:	ldr	r0, [sp, #20]
   11004:	bl	10c34 <coda_set_option_use_mmap@plt>
   11008:	bl	10c88 <coda_done@plt>
   1100c:	ldr	r3, [pc, #612]	; 11278 <main@@Base+0x518>
   11010:	ldr	r2, [sp, #16]
   11014:	ldr	r3, [r2, r3]
   11018:	ldr	r0, [r3]
   1101c:	cmp	r0, #0
   11020:	bne	111ec <main@@Base+0x48c>
   11024:	add	sp, sp, #1040	; 0x410
   11028:	add	sp, sp, #4
   1102c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11030:	ldr	r1, [pc, #580]	; 1127c <main@@Base+0x51c>
   11034:	mov	r0, r5
   11038:	add	r1, pc, r1
   1103c:	bl	10bf8 <strcmp@plt>
   11040:	cmp	r0, #0
   11044:	bne	11054 <main@@Base+0x2f4>
   11048:	sub	r3, r7, #1
   1104c:	cmp	r3, r4
   11050:	beq	110b0 <main@@Base+0x350>
   11054:	ldrb	r3, [r5]
   11058:	cmp	r3, #45	; 0x2d
   1105c:	beq	1119c <main@@Base+0x43c>
   11060:	bl	10cdc <coda_init@plt>
   11064:	subs	r6, r0, #0
   11068:	bne	10f74 <main@@Base+0x214>
   1106c:	bl	10bec <coda_set_option_perform_boundary_checks@plt>
   11070:	mov	r0, r6
   11074:	bl	10cf4 <coda_set_option_perform_conversions@plt>
   11078:	ldr	r0, [sp, #20]
   1107c:	bl	10c34 <coda_set_option_use_mmap@plt>
   11080:	cmp	r7, r4
   11084:	ldrgt	r3, [sp, #8]
   11088:	addgt	r5, r3, r4, lsl #2
   1108c:	ble	11008 <main@@Base+0x2a8>
   11090:	ldr	r0, [r5], #4
   11094:	bl	115b8 <_start@@Base+0x318>
   11098:	add	r4, r4, #1
   1109c:	mov	r0, r6
   110a0:	bl	10c28 <fflush@plt>
   110a4:	cmp	r7, r4
   110a8:	bne	11090 <main@@Base+0x330>
   110ac:	b	11008 <main@@Base+0x2a8>
   110b0:	bl	10cdc <coda_init@plt>
   110b4:	subs	r7, r0, #0
   110b8:	bne	10f74 <main@@Base+0x214>
   110bc:	mov	r0, #0
   110c0:	bl	10bec <coda_set_option_perform_boundary_checks@plt>
   110c4:	mov	r0, #0
   110c8:	bl	10cf4 <coda_set_option_perform_conversions@plt>
   110cc:	ldr	r0, [sp, #20]
   110d0:	bl	10c34 <coda_set_option_use_mmap@plt>
   110d4:	ldr	r3, [pc, #420]	; 11280 <main@@Base+0x520>
   110d8:	ldr	r2, [sp, #16]
   110dc:	add	r8, sp, #40	; 0x28
   110e0:	mov	r6, #0
   110e4:	ldr	r5, [r2, r3]
   110e8:	mov	r4, r7
   110ec:	b	11108 <main@@Base+0x3a8>
   110f0:	cmp	r0, #10
   110f4:	beq	11138 <main@@Base+0x3d8>
   110f8:	strb	r0, [r8, r4]
   110fc:	add	r4, r4, #1
   11100:	cmp	r4, #1000	; 0x3e8
   11104:	beq	111cc <main@@Base+0x46c>
   11108:	ldr	r0, [r5]
   1110c:	bl	10d48 <getc@plt>
   11110:	uxtb	r0, r0
   11114:	cmp	r0, #13
   11118:	bne	110f0 <main@@Base+0x390>
   1111c:	ldr	r0, [r5]
   11120:	bl	10d48 <getc@plt>
   11124:	uxtb	r0, r0
   11128:	cmp	r0, #10
   1112c:	beq	11138 <main@@Base+0x3d8>
   11130:	ldr	r1, [r5]
   11134:	bl	10ce8 <ungetc@plt>
   11138:	add	r3, sp, #1040	; 0x410
   1113c:	add	r3, r3, r4
   11140:	cmp	r4, #0
   11144:	strb	r6, [r3, #-1000]	; 0xfffffc18
   11148:	beq	110e8 <main@@Base+0x388>
   1114c:	mov	r0, r8
   11150:	bl	115b8 <_start@@Base+0x318>
   11154:	mov	r0, r6
   11158:	bl	10c28 <fflush@plt>
   1115c:	b	110e8 <main@@Base+0x388>
   11160:	bl	113c8 <_start@@Base+0x128>
   11164:	mov	r0, #0
   11168:	bl	10cc4 <exit@plt>
   1116c:	bl	10d24 <coda_get_libcoda_version@plt>
   11170:	mov	r1, r0
   11174:	ldr	r0, [pc, #264]	; 11284 <main@@Base+0x524>
   11178:	add	r0, pc, r0
   1117c:	bl	10c04 <printf@plt>
   11180:	ldr	r0, [pc, #256]	; 11288 <main@@Base+0x528>
   11184:	add	r0, pc, r0
   11188:	bl	10c94 <puts@plt>
   1118c:	mov	r0, #10
   11190:	bl	10d00 <putchar@plt>
   11194:	mov	r0, #0
   11198:	bl	10cc4 <exit@plt>
   1119c:	ldr	r0, [sp, #16]
   111a0:	ldr	r3, [pc, #200]	; 11270 <main@@Base+0x510>
   111a4:	mov	r2, #25
   111a8:	mov	r1, #1
   111ac:	ldr	r3, [r0, r3]
   111b0:	ldr	r0, [pc, #212]	; 1128c <main@@Base+0x52c>
   111b4:	ldr	r3, [r3]
   111b8:	add	r0, pc, r0
   111bc:	bl	10c70 <fwrite@plt>
   111c0:	bl	113c8 <_start@@Base+0x128>
   111c4:	mov	r0, #1
   111c8:	bl	10cc4 <exit@plt>
   111cc:	ldr	r3, [pc, #188]	; 11290 <main@@Base+0x530>
   111d0:	ldr	r1, [pc, #188]	; 11294 <main@@Base+0x534>
   111d4:	ldr	r0, [pc, #188]	; 11298 <main@@Base+0x538>
   111d8:	add	r3, pc, r3
   111dc:	mov	r2, #316	; 0x13c
   111e0:	add	r1, pc, r1
   111e4:	add	r0, pc, r0
   111e8:	bl	10d54 <__assert_fail@plt>
   111ec:	mov	r0, #1
   111f0:	bl	10cc4 <exit@plt>
   111f4:	ldr	r2, [sp, #16]
   111f8:	ldr	r3, [pc, #112]	; 11270 <main@@Base+0x510>
   111fc:	ldr	r3, [r2, r3]
   11200:	ldr	r4, [r3]
   11204:	bl	10d30 <coda_get_errno@plt>
   11208:	ldr	r0, [r0]
   1120c:	bl	10d18 <coda_errno_to_string@plt>
   11210:	ldr	r1, [pc, #132]	; 1129c <main@@Base+0x53c>
   11214:	add	r1, pc, r1
   11218:	mov	r2, r0
   1121c:	mov	r0, r4
   11220:	bl	10cd0 <fprintf@plt>
   11224:	mov	r0, #1
   11228:	bl	10cc4 <exit@plt>
   1122c:	muleq	r1, r0, r2
   11230:	muleq	r0, r4, r0
   11234:	andeq	r0, r0, r4, lsr #1
   11238:	andeq	r0, r0, ip, lsl #1
   1123c:	andeq	r1, r0, r4, lsr #3
   11240:	muleq	r0, r0, r1
   11244:	andeq	r1, r0, r0, lsl #3
   11248:	andeq	r1, r0, ip, ror #2
   1124c:	andeq	r1, r0, r0, lsr #3
   11250:	andeq	r1, r0, r8, lsl #3
   11254:	andeq	r1, r0, r4, lsl #3
   11258:			; <UNDEFINED> instruction: 0x00000cbc
   1125c:	andeq	r0, r0, ip, asr #24
   11260:	andeq	r1, r0, r8, asr #2
   11264:	andeq	r1, r0, r8, ror #2
   11268:	andeq	r0, r0, r4, lsr #22
   1126c:	strdeq	r0, [r0], -r8
   11270:	muleq	r0, r8, r0
   11274:	andeq	r1, r0, ip, asr r0
   11278:	muleq	r0, r0, r0
   1127c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11280:	andeq	r0, r0, r0, lsr #1
   11284:	andeq	r0, r0, r0, lsl lr
   11288:	andeq	r0, r0, ip, lsl lr
   1128c:	andeq	r0, r0, r4, asr lr
   11290:	andeq	r0, r0, r8, asr #14
   11294:	andeq	r0, r0, r8, asr #28
   11298:	andeq	r0, r0, r4, lsr #29
   1129c:	ldrdeq	r0, [r0], -ip

000112a0 <_start@@Base>:
   112a0:	mov	fp, #0
   112a4:	mov	lr, #0
   112a8:	pop	{r1}		; (ldr r1, [sp], #4)
   112ac:	mov	r2, sp
   112b0:	push	{r2}		; (str r2, [sp, #-4]!)
   112b4:	push	{r0}		; (str r0, [sp, #-4]!)
   112b8:	ldr	ip, [pc, #16]	; 112d0 <_start@@Base+0x30>
   112bc:	push	{ip}		; (str ip, [sp, #-4]!)
   112c0:	ldr	r0, [pc, #12]	; 112d4 <_start@@Base+0x34>
   112c4:	ldr	r3, [pc, #12]	; 112d8 <_start@@Base+0x38>
   112c8:	bl	10cac <__libc_start_main@plt>
   112cc:	bl	10d3c <abort@plt>
   112d0:	andeq	r1, r1, r8, lsl r9
   112d4:	andeq	r0, r1, r0, ror #26
   112d8:			; <UNDEFINED> instruction: 0x000118b8
   112dc:	ldr	r3, [pc, #20]	; 112f8 <_start@@Base+0x58>
   112e0:	ldr	r2, [pc, #20]	; 112fc <_start@@Base+0x5c>
   112e4:	add	r3, pc, r3
   112e8:	ldr	r2, [r3, r2]
   112ec:	cmp	r2, #0
   112f0:	bxeq	lr
   112f4:	b	10cb8 <__gmon_start__@plt>
   112f8:	andeq	r1, r1, r4, lsl sp
   112fc:	muleq	r0, ip, r0
   11300:	ldr	r3, [pc, #28]	; 11324 <_start@@Base+0x84>
   11304:	ldr	r0, [pc, #28]	; 11328 <_start@@Base+0x88>
   11308:	sub	r3, r3, r0
   1130c:	cmp	r3, #6
   11310:	bxls	lr
   11314:	ldr	r3, [pc, #16]	; 1132c <_start@@Base+0x8c>
   11318:	cmp	r3, #0
   1131c:	bxeq	lr
   11320:	bx	r3
   11324:	strheq	r3, [r2], -r3	; <UNPREDICTABLE>
   11328:	strheq	r3, [r2], -r0
   1132c:	andeq	r0, r0, r0
   11330:	ldr	r1, [pc, #36]	; 1135c <_start@@Base+0xbc>
   11334:	ldr	r0, [pc, #36]	; 11360 <_start@@Base+0xc0>
   11338:	sub	r1, r1, r0
   1133c:	asr	r1, r1, #2
   11340:	add	r1, r1, r1, lsr #31
   11344:	asrs	r1, r1, #1
   11348:	bxeq	lr
   1134c:	ldr	r3, [pc, #16]	; 11364 <_start@@Base+0xc4>
   11350:	cmp	r3, #0
   11354:	bxeq	lr
   11358:	bx	r3
   1135c:	strheq	r3, [r2], -r0
   11360:	strheq	r3, [r2], -r0
   11364:	andeq	r0, r0, r0
   11368:	push	{r4, lr}
   1136c:	ldr	r4, [pc, #24]	; 1138c <_start@@Base+0xec>
   11370:	ldrb	r3, [r4]
   11374:	cmp	r3, #0
   11378:	popne	{r4, pc}
   1137c:	bl	11300 <_start@@Base+0x60>
   11380:	mov	r3, #1
   11384:	strb	r3, [r4]
   11388:	pop	{r4, pc}
   1138c:	strheq	r3, [r2], -r0
   11390:	ldr	r0, [pc, #40]	; 113c0 <_start@@Base+0x120>
   11394:	ldr	r3, [r0]
   11398:	cmp	r3, #0
   1139c:	bne	113a4 <_start@@Base+0x104>
   113a0:	b	11330 <_start@@Base+0x90>
   113a4:	ldr	r3, [pc, #24]	; 113c4 <_start@@Base+0x124>
   113a8:	cmp	r3, #0
   113ac:	beq	113a0 <_start@@Base+0x100>
   113b0:	push	{r4, lr}
   113b4:	blx	r3
   113b8:	pop	{r4, lr}
   113bc:	b	11330 <_start@@Base+0x90>
   113c0:	strdeq	r2, [r2], -ip
   113c4:	andeq	r0, r0, r0
   113c8:	ldr	r0, [pc, #376]	; 11548 <_start@@Base+0x2a8>
   113cc:	push	{r4, lr}
   113d0:	add	r0, pc, r0
   113d4:	bl	10c94 <puts@plt>
   113d8:	ldr	r0, [pc, #364]	; 1154c <_start@@Base+0x2ac>
   113dc:	add	r0, pc, r0
   113e0:	bl	10c94 <puts@plt>
   113e4:	ldr	r0, [pc, #356]	; 11550 <_start@@Base+0x2b0>
   113e8:	add	r0, pc, r0
   113ec:	bl	10c94 <puts@plt>
   113f0:	ldr	r0, [pc, #348]	; 11554 <_start@@Base+0x2b4>
   113f4:	add	r0, pc, r0
   113f8:	bl	10c94 <puts@plt>
   113fc:	ldr	r0, [pc, #340]	; 11558 <_start@@Base+0x2b8>
   11400:	add	r0, pc, r0
   11404:	bl	10c94 <puts@plt>
   11408:	ldr	r0, [pc, #332]	; 1155c <_start@@Base+0x2bc>
   1140c:	add	r0, pc, r0
   11410:	bl	10c94 <puts@plt>
   11414:	ldr	r0, [pc, #324]	; 11560 <_start@@Base+0x2c0>
   11418:	add	r0, pc, r0
   1141c:	bl	10c94 <puts@plt>
   11420:	ldr	r0, [pc, #316]	; 11564 <_start@@Base+0x2c4>
   11424:	add	r0, pc, r0
   11428:	bl	10c94 <puts@plt>
   1142c:	ldr	r0, [pc, #308]	; 11568 <_start@@Base+0x2c8>
   11430:	add	r0, pc, r0
   11434:	bl	10c94 <puts@plt>
   11438:	ldr	r0, [pc, #300]	; 1156c <_start@@Base+0x2cc>
   1143c:	add	r0, pc, r0
   11440:	bl	10c94 <puts@plt>
   11444:	ldr	r0, [pc, #292]	; 11570 <_start@@Base+0x2d0>
   11448:	add	r0, pc, r0
   1144c:	bl	10c94 <puts@plt>
   11450:	ldr	r0, [pc, #284]	; 11574 <_start@@Base+0x2d4>
   11454:	add	r0, pc, r0
   11458:	bl	10c94 <puts@plt>
   1145c:	ldr	r0, [pc, #276]	; 11578 <_start@@Base+0x2d8>
   11460:	add	r0, pc, r0
   11464:	bl	10c94 <puts@plt>
   11468:	ldr	r0, [pc, #268]	; 1157c <_start@@Base+0x2dc>
   1146c:	add	r0, pc, r0
   11470:	bl	10c94 <puts@plt>
   11474:	ldr	r0, [pc, #260]	; 11580 <_start@@Base+0x2e0>
   11478:	add	r0, pc, r0
   1147c:	bl	10c94 <puts@plt>
   11480:	mov	r0, #10
   11484:	bl	10d00 <putchar@plt>
   11488:	ldr	r0, [pc, #244]	; 11584 <_start@@Base+0x2e4>
   1148c:	add	r0, pc, r0
   11490:	bl	10c94 <puts@plt>
   11494:	ldr	r0, [pc, #236]	; 11588 <_start@@Base+0x2e8>
   11498:	add	r0, pc, r0
   1149c:	bl	10c94 <puts@plt>
   114a0:	mov	r0, #10
   114a4:	bl	10d00 <putchar@plt>
   114a8:	ldr	r0, [pc, #220]	; 1158c <_start@@Base+0x2ec>
   114ac:	add	r0, pc, r0
   114b0:	bl	10c94 <puts@plt>
   114b4:	ldr	r0, [pc, #212]	; 11590 <_start@@Base+0x2f0>
   114b8:	add	r0, pc, r0
   114bc:	bl	10c94 <puts@plt>
   114c0:	mov	r0, #10
   114c4:	bl	10d00 <putchar@plt>
   114c8:	ldr	r0, [pc, #196]	; 11594 <_start@@Base+0x2f4>
   114cc:	add	r0, pc, r0
   114d0:	bl	10c94 <puts@plt>
   114d4:	ldr	r0, [pc, #188]	; 11598 <_start@@Base+0x2f8>
   114d8:	add	r0, pc, r0
   114dc:	bl	10c94 <puts@plt>
   114e0:	mov	r0, #10
   114e4:	bl	10d00 <putchar@plt>
   114e8:	ldr	r0, [pc, #172]	; 1159c <_start@@Base+0x2fc>
   114ec:	add	r0, pc, r0
   114f0:	bl	10c94 <puts@plt>
   114f4:	ldr	r0, [pc, #164]	; 115a0 <_start@@Base+0x300>
   114f8:	add	r0, pc, r0
   114fc:	bl	10c94 <puts@plt>
   11500:	ldr	r0, [pc, #156]	; 115a4 <_start@@Base+0x304>
   11504:	add	r0, pc, r0
   11508:	bl	10c94 <puts@plt>
   1150c:	ldr	r0, [pc, #148]	; 115a8 <_start@@Base+0x308>
   11510:	add	r0, pc, r0
   11514:	bl	10c94 <puts@plt>
   11518:	ldr	r0, [pc, #140]	; 115ac <_start@@Base+0x30c>
   1151c:	add	r0, pc, r0
   11520:	bl	10c94 <puts@plt>
   11524:	ldr	r0, [pc, #132]	; 115b0 <_start@@Base+0x310>
   11528:	add	r0, pc, r0
   1152c:	bl	10c94 <puts@plt>
   11530:	ldr	r0, [pc, #124]	; 115b4 <_start@@Base+0x314>
   11534:	add	r0, pc, r0
   11538:	bl	10c94 <puts@plt>
   1153c:	mov	r0, #10
   11540:	pop	{r4, lr}
   11544:	b	10d00 <putchar@plt>
   11548:	andeq	r0, r0, r8, asr r5
   1154c:	andeq	r0, r0, r4, asr r5
   11550:	andeq	r0, r0, r0, lsl #11
   11554:			; <UNDEFINED> instruction: 0x000005bc
   11558:	andeq	r0, r0, r4, asr #11
   1155c:	ldrdeq	r0, [r0], -r8
   11560:	andeq	r0, r0, ip, lsl r6
   11564:	andeq	r0, r0, r8, asr r6
   11568:	muleq	r0, r8, r6
   1156c:	andeq	r0, r0, r4, lsr #13
   11570:	ldrdeq	r0, [r0], -r8
   11574:	andeq	r0, r0, r4, lsl #14
   11578:	andeq	r0, r0, r4, lsl r7
   1157c:	andeq	r0, r0, r0, asr r7
   11580:	andeq	r0, r0, ip, asr r7
   11584:	andeq	r0, r0, r8, lsl #15
   11588:	andeq	r0, r0, ip, asr #15
   1158c:	ldrdeq	r0, [r0], -r4
   11590:	andeq	r0, r0, r4, ror #15
   11594:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11598:	andeq	r0, r0, r0, lsl #16
   1159c:	andeq	r0, r0, r0, lsr #16
   115a0:	andeq	r0, r0, r4, ror #16
   115a4:	andeq	r0, r0, r4, lsr #17
   115a8:	andeq	r0, r0, r4, asr #17
   115ac:	andeq	r0, r0, r4, lsl #18
   115b0:	andeq	r0, r0, r0, asr #18
   115b4:	andeq	r0, r0, r4, ror r9
   115b8:	push	{r4, r5, r6, lr}
   115bc:	sub	sp, sp, #40	; 0x28
   115c0:	mov	r5, r0
   115c4:	bl	10c94 <puts@plt>
   115c8:	add	r3, sp, #28
   115cc:	str	r3, [sp, #4]
   115d0:	add	r3, sp, #24
   115d4:	str	r3, [sp]
   115d8:	mov	r0, r5
   115dc:	add	r3, sp, #20
   115e0:	add	r2, sp, #16
   115e4:	add	r1, sp, #32
   115e8:	bl	10c64 <coda_recognize_file@plt>
   115ec:	ldr	r4, [pc, #544]	; 11814 <_start@@Base+0x574>
   115f0:	add	r4, pc, r4
   115f4:	cmp	r0, #0
   115f8:	bne	116c0 <_start@@Base+0x420>
   115fc:	ldr	r3, [pc, #532]	; 11818 <_start@@Base+0x578>
   11600:	ldr	r3, [r4, r3]
   11604:	ldr	r3, [r3]
   11608:	cmp	r3, #0
   1160c:	beq	11628 <_start@@Base+0x388>
   11610:	ldr	r3, [sp, #20]
   11614:	cmp	r3, #0
   11618:	beq	11790 <_start@@Base+0x4f0>
   1161c:	ldr	r3, [sp, #24]
   11620:	cmp	r3, #0
   11624:	beq	11790 <_start@@Base+0x4f0>
   11628:	ldr	r3, [pc, #492]	; 1181c <_start@@Base+0x57c>
   1162c:	ldr	r3, [r4, r3]
   11630:	ldr	r3, [r3]
   11634:	cmp	r3, #0
   11638:	bne	11744 <_start@@Base+0x4a4>
   1163c:	add	r6, sp, #12
   11640:	mov	r1, r6
   11644:	mov	r0, r5
   11648:	bl	10c1c <coda_open@plt>
   1164c:	cmp	r0, #0
   11650:	bne	11700 <_start@@Base+0x460>
   11654:	ldr	r1, [pc, #452]	; 11820 <_start@@Base+0x580>
   11658:	ldr	r2, [pc, #452]	; 11824 <_start@@Base+0x584>
   1165c:	mov	r3, #0
   11660:	ldr	r1, [r4, r1]
   11664:	add	r2, pc, r2
   11668:	ldr	r0, [sp, #12]
   1166c:	ldr	r1, [r1]
   11670:	clz	r1, r1
   11674:	lsr	r1, r1, #5
   11678:	bl	10ca0 <coda_product_check@plt>
   1167c:	cmp	r0, #0
   11680:	beq	117b0 <_start@@Base+0x510>
   11684:	bl	10d30 <coda_get_errno@plt>
   11688:	ldr	r0, [r0]
   1168c:	bl	10d18 <coda_errno_to_string@plt>
   11690:	mov	r1, r0
   11694:	ldr	r0, [pc, #396]	; 11828 <_start@@Base+0x588>
   11698:	add	r0, pc, r0
   1169c:	bl	10c04 <printf@plt>
   116a0:	ldr	r3, [pc, #388]	; 1182c <_start@@Base+0x58c>
   116a4:	mov	r2, #1
   116a8:	ldr	r0, [sp, #12]
   116ac:	ldr	r3, [r4, r3]
   116b0:	str	r2, [r3]
   116b4:	bl	10d0c <coda_close@plt>
   116b8:	add	sp, sp, #40	; 0x28
   116bc:	pop	{r4, r5, r6, pc}
   116c0:	bl	10d30 <coda_get_errno@plt>
   116c4:	ldr	r0, [r0]
   116c8:	bl	10d18 <coda_errno_to_string@plt>
   116cc:	mov	r1, r0
   116d0:	ldr	r0, [pc, #344]	; 11830 <_start@@Base+0x590>
   116d4:	add	r0, pc, r0
   116d8:	bl	10c04 <printf@plt>
   116dc:	mov	r1, #0
   116e0:	mov	r0, r1
   116e4:	bl	10c10 <coda_set_error@plt>
   116e8:	ldr	r3, [pc, #316]	; 1182c <_start@@Base+0x58c>
   116ec:	mov	r2, #1
   116f0:	ldr	r3, [r4, r3]
   116f4:	str	r2, [r3]
   116f8:	add	sp, sp, #40	; 0x28
   116fc:	pop	{r4, r5, r6, pc}
   11700:	bl	10d30 <coda_get_errno@plt>
   11704:	ldr	r3, [r0]
   11708:	cmn	r3, #21
   1170c:	beq	117e8 <_start@@Base+0x548>
   11710:	bl	10d30 <coda_get_errno@plt>
   11714:	ldr	r0, [r0]
   11718:	bl	10d18 <coda_errno_to_string@plt>
   1171c:	mov	r1, r0
   11720:	ldr	r0, [pc, #268]	; 11834 <_start@@Base+0x594>
   11724:	add	r0, pc, r0
   11728:	bl	10c04 <printf@plt>
   1172c:	ldr	r3, [pc, #248]	; 1182c <_start@@Base+0x58c>
   11730:	mov	r2, #1
   11734:	ldr	r3, [r4, r3]
   11738:	str	r2, [r3]
   1173c:	add	sp, sp, #40	; 0x28
   11740:	pop	{r4, r5, r6, pc}
   11744:	ldr	r0, [sp, #16]
   11748:	bl	10c7c <coda_type_get_format_name@plt>
   1174c:	mov	r1, r0
   11750:	ldr	r0, [pc, #224]	; 11838 <_start@@Base+0x598>
   11754:	add	r0, pc, r0
   11758:	bl	10c04 <printf@plt>
   1175c:	ldr	r1, [sp, #20]
   11760:	cmp	r1, #0
   11764:	beq	11784 <_start@@Base+0x4e4>
   11768:	ldr	r2, [sp, #24]
   1176c:	cmp	r2, #0
   11770:	beq	11784 <_start@@Base+0x4e4>
   11774:	ldr	r0, [pc, #192]	; 1183c <_start@@Base+0x59c>
   11778:	ldr	r3, [sp, #28]
   1177c:	add	r0, pc, r0
   11780:	bl	10c04 <printf@plt>
   11784:	mov	r0, #10
   11788:	bl	10d00 <putchar@plt>
   1178c:	b	1163c <_start@@Base+0x39c>
   11790:	ldr	r0, [pc, #168]	; 11840 <_start@@Base+0x5a0>
   11794:	add	r0, pc, r0
   11798:	bl	10c94 <puts@plt>
   1179c:	ldr	r3, [pc, #136]	; 1182c <_start@@Base+0x58c>
   117a0:	mov	r2, #1
   117a4:	ldr	r3, [r4, r3]
   117a8:	str	r2, [r3]
   117ac:	b	116b8 <_start@@Base+0x418>
   117b0:	ldr	r0, [sp, #12]
   117b4:	bl	10d0c <coda_close@plt>
   117b8:	cmp	r0, #0
   117bc:	beq	117dc <_start@@Base+0x53c>
   117c0:	bl	10d30 <coda_get_errno@plt>
   117c4:	ldr	r0, [r0]
   117c8:	bl	10d18 <coda_errno_to_string@plt>
   117cc:	mov	r1, r0
   117d0:	ldr	r0, [pc, #108]	; 11844 <_start@@Base+0x5a4>
   117d4:	add	r0, pc, r0
   117d8:	b	11728 <_start@@Base+0x488>
   117dc:	mov	r0, #10
   117e0:	bl	10d00 <putchar@plt>
   117e4:	b	116b8 <_start@@Base+0x418>
   117e8:	mov	r0, #0
   117ec:	bl	10c34 <coda_set_option_use_mmap@plt>
   117f0:	mov	r1, r6
   117f4:	mov	r0, r5
   117f8:	bl	10c1c <coda_open@plt>
   117fc:	mov	r5, r0
   11800:	mov	r0, #1
   11804:	bl	10c34 <coda_set_option_use_mmap@plt>
   11808:	cmp	r5, #0
   1180c:	bne	11710 <_start@@Base+0x470>
   11810:	b	11654 <_start@@Base+0x3b4>
   11814:	andeq	r1, r1, r8, lsl #20
   11818:	andeq	r0, r0, ip, lsl #1
   1181c:	muleq	r0, r4, r0
   11820:	andeq	r0, r0, r4, lsr #1
   11824:	ldrdeq	r0, [r0], -ip
   11828:	andeq	r0, r0, r0, asr r8
   1182c:	muleq	r0, r0, r0
   11830:	andeq	r0, r0, r4, lsl r8
   11834:	andeq	r0, r0, r4, asr #15
   11838:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1183c:	andeq	r0, r0, r0, asr #15
   11840:	andeq	r0, r0, r4, ror #14
   11844:	andeq	r0, r0, r4, ror r7
   11848:	push	{r4, r5, r6, lr}
   1184c:	mov	r5, r0
   11850:	ldr	r0, [pc, #76]	; 118a4 <_start@@Base+0x604>
   11854:	ldr	r4, [pc, #76]	; 118a8 <_start@@Base+0x608>
   11858:	add	r0, pc, r0
   1185c:	bl	10c04 <printf@plt>
   11860:	cmp	r5, #0
   11864:	add	r4, pc, r4
   11868:	beq	11888 <_start@@Base+0x5e8>
   1186c:	ldr	r0, [pc, #56]	; 118ac <_start@@Base+0x60c>
   11870:	add	r0, pc, r0
   11874:	bl	10c04 <printf@plt>
   11878:	ldr	r3, [pc, #48]	; 118b0 <_start@@Base+0x610>
   1187c:	mov	r0, r5
   11880:	ldr	r1, [r4, r3]
   11884:	bl	10c40 <coda_cursor_print_path@plt>
   11888:	mov	r0, #10
   1188c:	bl	10d00 <putchar@plt>
   11890:	ldr	r3, [pc, #28]	; 118b4 <_start@@Base+0x614>
   11894:	mov	r2, #1
   11898:	ldr	r3, [r4, r3]
   1189c:	str	r2, [r3]
   118a0:	pop	{r4, r5, r6, pc}
   118a4:	andeq	r0, r0, r0, lsl #14
   118a8:	muleq	r1, r4, r7
   118ac:	strdeq	r0, [r0], -r4
   118b0:	andeq	r0, r0, r8, lsl #1
   118b4:	muleq	r0, r0, r0

000118b8 <__libc_csu_init@@Base>:
   118b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   118bc:	mov	r7, r0
   118c0:	ldr	r6, [pc, #72]	; 11910 <__libc_csu_init@@Base+0x58>
   118c4:	ldr	r5, [pc, #72]	; 11914 <__libc_csu_init@@Base+0x5c>
   118c8:	add	r6, pc, r6
   118cc:	add	r5, pc, r5
   118d0:	sub	r6, r6, r5
   118d4:	mov	r8, r1
   118d8:	mov	r9, r2
   118dc:	bl	10bcc <coda_set_option_perform_boundary_checks@plt-0x20>
   118e0:	asrs	r6, r6, #2
   118e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   118e8:	mov	r4, #0
   118ec:	add	r4, r4, #1
   118f0:	ldr	r3, [r5], #4
   118f4:	mov	r2, r9
   118f8:	mov	r1, r8
   118fc:	mov	r0, r7
   11900:	blx	r3
   11904:	cmp	r6, r4
   11908:	bne	118ec <__libc_csu_init@@Base+0x34>
   1190c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11910:	andeq	r1, r1, r8, lsr #12
   11914:	andeq	r1, r1, r0, lsr #12

00011918 <__libc_csu_fini@@Base>:
   11918:	bx	lr

Disassembly of section .fini:

0001191c <.fini>:
   1191c:	push	{r3, lr}
   11920:	pop	{r3, pc}
