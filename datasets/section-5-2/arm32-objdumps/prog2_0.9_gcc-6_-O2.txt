
../repos/prog2/0.9:     file format elf32-littlearm


Disassembly of section .init:

00010664 <.init>:
   10664:	push	{r3, lr}
   10668:	bl	107c4 <_start@@Base+0x3c>
   1066c:	pop	{r3, pc}

Disassembly of section .plt:

00010670 <strcmp@plt-0x14>:
   10670:	push	{lr}		; (str lr, [sp, #-4]!)
   10674:	ldr	lr, [pc, #4]	; 10680 <strcmp@plt-0x4>
   10678:	add	lr, pc, lr
   1067c:	ldr	pc, [lr, #8]!
   10680:	andeq	r0, r1, r0, lsl #19

00010684 <strcmp@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2432]!	; 0x980

00010690 <printf@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2424]!	; 0x978

0001069c <strcpy@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2416]!	; 0x970

000106a8 <__libc_start_main@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2408]!	; 0x968

000106b4 <__gmon_start__@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2400]!	; 0x960

000106c0 <strlen@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2392]!	; 0x958

000106cc <__isoc99_scanf@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2384]!	; 0x950

000106d8 <abort@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

000106e4 <main@@Base>:
   106e4:	push	{r4, r5, r6, lr}
   106e8:	sub	sp, sp, #20736	; 0x5100
   106ec:	sub	sp, sp, #64	; 0x40
   106f0:	mov	r0, sp
   106f4:	bl	108b0 <ler_albuns@@Base>
   106f8:	ldr	r6, [pc, #120]	; 10778 <main@@Base+0x94>
   106fc:	add	r6, pc, r6
   10700:	mov	r5, r0
   10704:	mov	r1, r0
   10708:	mov	r0, sp
   1070c:	bl	10950 <lista_albuns@@Base>
   10710:	ldr	r0, [pc, #100]	; 1077c <main@@Base+0x98>
   10714:	mov	r1, r5
   10718:	add	r0, pc, r0
   1071c:	bl	10690 <printf@plt>
   10720:	mov	r2, r6
   10724:	mov	r1, r5
   10728:	mov	r3, #1
   1072c:	mov	r0, sp
   10730:	bl	109a8 <albuns_artista@@Base>
   10734:	mov	r1, r0
   10738:	ldr	r0, [pc, #64]	; 10780 <main@@Base+0x9c>
   1073c:	add	r0, pc, r0
   10740:	bl	10690 <printf@plt>
   10744:	mov	r2, r6
   10748:	mov	r1, r5
   1074c:	mov	r3, #0
   10750:	mov	r0, sp
   10754:	bl	109a8 <albuns_artista@@Base>
   10758:	mov	r1, r0
   1075c:	ldr	r0, [pc, #32]	; 10784 <main@@Base+0xa0>
   10760:	add	r0, pc, r0
   10764:	bl	10690 <printf@plt>
   10768:	mov	r0, #0
   1076c:	add	sp, sp, #20736	; 0x5100
   10770:	add	sp, sp, #64	; 0x40
   10774:	pop	{r4, r5, r6, pc}
   10778:	strdeq	r0, [r0], -r8
   1077c:			; <UNDEFINED> instruction: 0x000003bc
   10780:	andeq	r0, r0, r8, asr #7
   10784:	ldrdeq	r0, [r0], -ip

00010788 <_start@@Base>:
   10788:	mov	fp, #0
   1078c:	mov	lr, #0
   10790:	pop	{r1}		; (ldr r1, [sp], #4)
   10794:	mov	r2, sp
   10798:	push	{r2}		; (str r2, [sp, #-4]!)
   1079c:	push	{r0}		; (str r0, [sp, #-4]!)
   107a0:	ldr	ip, [pc, #16]	; 107b8 <_start@@Base+0x30>
   107a4:	push	{ip}		; (str ip, [sp, #-4]!)
   107a8:	ldr	r0, [pc, #12]	; 107bc <_start@@Base+0x34>
   107ac:	ldr	r3, [pc, #12]	; 107c0 <_start@@Base+0x38>
   107b0:	bl	106a8 <__libc_start_main@plt>
   107b4:	bl	106d8 <abort@plt>
   107b8:	andeq	r0, r1, ip, lsr #21
   107bc:	andeq	r0, r1, r4, ror #13
   107c0:	andeq	r0, r1, ip, asr #20
   107c4:	ldr	r3, [pc, #20]	; 107e0 <_start@@Base+0x58>
   107c8:	ldr	r2, [pc, #20]	; 107e4 <_start@@Base+0x5c>
   107cc:	add	r3, pc, r3
   107d0:	ldr	r2, [r3, r2]
   107d4:	cmp	r2, #0
   107d8:	bxeq	lr
   107dc:	b	106b4 <__gmon_start__@plt>
   107e0:	andeq	r0, r1, ip, lsr #16
   107e4:	andeq	r0, r0, ip, lsr #32
   107e8:	ldr	r3, [pc, #28]	; 1080c <_start@@Base+0x84>
   107ec:	ldr	r0, [pc, #28]	; 10810 <_start@@Base+0x88>
   107f0:	sub	r3, r3, r0
   107f4:	cmp	r3, #6
   107f8:	bxls	lr
   107fc:	ldr	r3, [pc, #16]	; 10814 <_start@@Base+0x8c>
   10800:	cmp	r3, #0
   10804:	bxeq	lr
   10808:	bx	r3
   1080c:	andeq	r1, r2, fp, lsr r0
   10810:	andeq	r1, r2, r8, lsr r0
   10814:	andeq	r0, r0, r0
   10818:	ldr	r1, [pc, #36]	; 10844 <_start@@Base+0xbc>
   1081c:	ldr	r0, [pc, #36]	; 10848 <_start@@Base+0xc0>
   10820:	sub	r1, r1, r0
   10824:	asr	r1, r1, #2
   10828:	add	r1, r1, r1, lsr #31
   1082c:	asrs	r1, r1, #1
   10830:	bxeq	lr
   10834:	ldr	r3, [pc, #16]	; 1084c <_start@@Base+0xc4>
   10838:	cmp	r3, #0
   1083c:	bxeq	lr
   10840:	bx	r3
   10844:	andeq	r1, r2, r8, lsr r0
   10848:	andeq	r1, r2, r8, lsr r0
   1084c:	andeq	r0, r0, r0
   10850:	push	{r4, lr}
   10854:	ldr	r4, [pc, #24]	; 10874 <_start@@Base+0xec>
   10858:	ldrb	r3, [r4]
   1085c:	cmp	r3, #0
   10860:	popne	{r4, pc}
   10864:	bl	107e8 <_start@@Base+0x60>
   10868:	mov	r3, #1
   1086c:	strb	r3, [r4]
   10870:	pop	{r4, pc}
   10874:	andeq	r1, r2, r8, lsr r0
   10878:	ldr	r0, [pc, #40]	; 108a8 <_start@@Base+0x120>
   1087c:	ldr	r3, [r0]
   10880:	cmp	r3, #0
   10884:	bne	1088c <_start@@Base+0x104>
   10888:	b	10818 <_start@@Base+0x90>
   1088c:	ldr	r3, [pc, #24]	; 108ac <_start@@Base+0x124>
   10890:	cmp	r3, #0
   10894:	beq	10888 <_start@@Base+0x100>
   10898:	push	{r4, lr}
   1089c:	blx	r3
   108a0:	pop	{r4, lr}
   108a4:	b	10818 <_start@@Base+0x90>
   108a8:	andeq	r0, r2, r4, lsl pc
   108ac:	andeq	r0, r0, r0

000108b0 <ler_albuns@@Base>:
   108b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   108b4:	sub	sp, sp, #28
   108b8:	add	r7, sp, #8
   108bc:	ldr	r8, [pc, #136]	; 1094c <ler_albuns@@Base+0x9c>
   108c0:	mov	r6, #0
   108c4:	str	r6, [r7, #8]
   108c8:	mov	r4, r0
   108cc:	str	r6, [sp, #8]
   108d0:	str	r6, [r7, #4]
   108d4:	str	r6, [r7, #11]
   108d8:	add	r8, pc, r8
   108dc:	mov	r9, #32
   108e0:	b	10908 <ler_albuns@@Base+0x58>
   108e4:	cmp	r6, #100	; 0x64
   108e8:	beq	10940 <ler_albuns@@Base+0x90>
   108ec:	bl	106c0 <strlen@plt>
   108f0:	mov	r1, r7
   108f4:	add	r6, r6, #1
   108f8:	add	r3, r0, #1
   108fc:	strb	r9, [r5, r0]
   10900:	add	r0, r5, r3
   10904:	bl	1069c <strcpy@plt>
   10908:	add	r2, r4, #204	; 0xcc
   1090c:	add	r3, r4, #200	; 0xc8
   10910:	str	r2, [sp, #4]
   10914:	str	r3, [sp]
   10918:	mov	r1, r4
   1091c:	add	r3, r4, #100	; 0x64
   10920:	mov	r2, r7
   10924:	mov	r0, r8
   10928:	bl	106cc <__isoc99_scanf@plt>
   1092c:	mov	r5, r4
   10930:	add	r4, r4, #208	; 0xd0
   10934:	cmp	r0, #5
   10938:	mov	r0, r5
   1093c:	beq	108e4 <ler_albuns@@Base+0x34>
   10940:	mov	r0, r6
   10944:	add	sp, sp, #28
   10948:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1094c:	ldrdeq	r0, [r0], -ip

00010950 <lista_albuns@@Base>:
   10950:	push	{r4, r5, r6, r7, lr}
   10954:	subs	r6, r1, #0
   10958:	sub	sp, sp, #12
   1095c:	ble	1099c <lista_albuns@@Base+0x4c>
   10960:	ldr	r7, [pc, #60]	; 109a4 <lista_albuns@@Base+0x54>
   10964:	mov	r4, r0
   10968:	add	r7, pc, r7
   1096c:	mov	r5, #0
   10970:	ldr	r2, [r4, #204]	; 0xcc
   10974:	ldr	r3, [r4, #200]	; 0xc8
   10978:	mov	r1, r4
   1097c:	str	r2, [sp]
   10980:	add	r5, r5, #1
   10984:	add	r2, r4, #100	; 0x64
   10988:	mov	r0, r7
   1098c:	bl	10690 <printf@plt>
   10990:	cmp	r6, r5
   10994:	add	r4, r4, #208	; 0xd0
   10998:	bne	10970 <lista_albuns@@Base+0x20>
   1099c:	add	sp, sp, #12
   109a0:	pop	{r4, r5, r6, r7, pc}
   109a4:	andeq	r0, r0, ip, asr r1

000109a8 <albuns_artista@@Base>:
   109a8:	push	{r4, r5, r6, r7, r8, lr}
   109ac:	subs	r7, r3, #0
   109b0:	mov	r6, r2
   109b4:	beq	10a04 <albuns_artista@@Base+0x5c>
   109b8:	cmp	r1, #0
   109bc:	ble	10a44 <albuns_artista@@Base+0x9c>
   109c0:	mov	r5, #208	; 0xd0
   109c4:	mov	r4, r0
   109c8:	mla	r5, r5, r1, r0
   109cc:	mov	r8, #0
   109d0:	mov	r1, r4
   109d4:	mov	r0, r6
   109d8:	bl	10684 <strcmp@plt>
   109dc:	cmp	r0, #0
   109e0:	bne	109f0 <albuns_artista@@Base+0x48>
   109e4:	ldr	r3, [r4, #204]	; 0xcc
   109e8:	cmp	r7, r3
   109ec:	addeq	r8, r8, #1
   109f0:	add	r4, r4, #208	; 0xd0
   109f4:	cmp	r5, r4
   109f8:	bne	109d0 <albuns_artista@@Base+0x28>
   109fc:	mov	r0, r8
   10a00:	pop	{r4, r5, r6, r7, r8, pc}
   10a04:	cmp	r1, #0
   10a08:	ble	10a44 <albuns_artista@@Base+0x9c>
   10a0c:	mov	r5, #208	; 0xd0
   10a10:	mov	r4, r0
   10a14:	mla	r5, r5, r1, r0
   10a18:	mov	r8, r7
   10a1c:	mov	r1, r4
   10a20:	mov	r0, r6
   10a24:	bl	10684 <strcmp@plt>
   10a28:	add	r4, r4, #208	; 0xd0
   10a2c:	cmp	r0, #0
   10a30:	addeq	r8, r8, #1
   10a34:	cmp	r5, r4
   10a38:	bne	10a1c <albuns_artista@@Base+0x74>
   10a3c:	mov	r0, r8
   10a40:	pop	{r4, r5, r6, r7, r8, pc}
   10a44:	mov	r8, #0
   10a48:	b	109fc <albuns_artista@@Base+0x54>

00010a4c <__libc_csu_init@@Base>:
   10a4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a50:	mov	r7, r0
   10a54:	ldr	r6, [pc, #72]	; 10aa4 <__libc_csu_init@@Base+0x58>
   10a58:	ldr	r5, [pc, #72]	; 10aa8 <__libc_csu_init@@Base+0x5c>
   10a5c:	add	r6, pc, r6
   10a60:	add	r5, pc, r5
   10a64:	sub	r6, r6, r5
   10a68:	mov	r8, r1
   10a6c:	mov	r9, r2
   10a70:	bl	10664 <strcmp@plt-0x20>
   10a74:	asrs	r6, r6, #2
   10a78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a7c:	mov	r4, #0
   10a80:	add	r4, r4, #1
   10a84:	ldr	r3, [r5], #4
   10a88:	mov	r2, r9
   10a8c:	mov	r1, r8
   10a90:	mov	r0, r7
   10a94:	blx	r3
   10a98:	cmp	r6, r4
   10a9c:	bne	10a80 <__libc_csu_init@@Base+0x34>
   10aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa4:	andeq	r0, r1, ip, lsr #9
   10aa8:	andeq	r0, r1, r4, lsr #9

00010aac <__libc_csu_fini@@Base>:
   10aac:	bx	lr

Disassembly of section .fini:

00010ab0 <.fini>:
   10ab0:	push	{r3, lr}
   10ab4:	pop	{r3, pc}
