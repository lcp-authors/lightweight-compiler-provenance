
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	11820 <__assert_fail@plt+0x6a4>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <calloc@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <calloc@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r9, r1, r4, ror #2

00010ea0 <calloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <endgrent@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <getpwnam@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <is_selinux_enabled@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <getpwuid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <getuid@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <free@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <_exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <memcpy@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <mbsinit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #102400	; 0x19000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #102400	; 0x19000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <fputc_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #102400	; 0x19000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <dcgettext@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #102400	; 0x19000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <realloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #102400	; 0x19000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <textdomain@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #102400	; 0x19000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <geteuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #102400	; 0x19000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <iswprint@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #102400	; 0x19000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <getegid@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #102400	; 0x19000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <fwrite@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #102400	; 0x19000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <lseek64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #102400	; 0x19000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <__ctype_get_mb_cur_max@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #102400	; 0x19000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getcon@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #102400	; 0x19000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <__fpending@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #102400	; 0x19000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <mbrtowc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #102400	; 0x19000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <error@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #102400	; 0x19000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <getenv@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #102400	; 0x19000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #102400	; 0x19000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #102400	; 0x19000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #102400	; 0x19000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #102400	; 0x19000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <getopt_long@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #102400	; 0x19000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <__ctype_b_loc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #102400	; 0x19000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <exit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #102400	; 0x19000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <strtoul@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #102400	; 0x19000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <strlen@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #102400	; 0x19000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <strchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #102400	; 0x19000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #102400	; 0x19000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #102400	; 0x19000
   11094:	ldr	pc, [ip, #28]!

00011098 <getgid@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #102400	; 0x19000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <getgrouplist@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #102400	; 0x19000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #24, 20	; 0x18000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #24, 20	; 0x18000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <endpwent@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #24, 20	; 0x18000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #24, 20	; 0x18000
   11124:	ldr	pc, [ip, #4028]!	; 0xfbc

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #24, 20	; 0x18000
   11130:	ldr	pc, [ip, #4020]!	; 0xfb4

00011134 <getgroups@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #24, 20	; 0x18000
   1113c:	ldr	pc, [ip, #4012]!	; 0xfac

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #24, 20	; 0x18000
   11148:	ldr	pc, [ip, #4004]!	; 0xfa4

0001114c <strncmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #24, 20	; 0x18000
   11154:	ldr	pc, [ip, #3996]!	; 0xf9c

00011158 <abort@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #24, 20	; 0x18000
   11160:	ldr	pc, [ip, #3988]!	; 0xf94

00011164 <getgrgid@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #24, 20	; 0x18000
   1116c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011170 <getgrnam@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #24, 20	; 0x18000
   11178:	ldr	pc, [ip, #3972]!	; 0xf84

0001117c <__assert_fail@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #24, 20	; 0x18000
   11184:	ldr	pc, [ip, #3964]!	; 0xf7c

Disassembly of section .text:

00011188 <.text>:
   11188:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1118c:	mov	r4, r1
   11190:	mov	r5, r0
   11194:	strd	r6, [sp, #8]
   11198:	movw	r7, #35224	; 0x8998
   1119c:	movt	r7, #1
   111a0:	strd	r8, [sp, #16]
   111a4:	movw	r9, #41340	; 0xa17c
   111a8:	movt	r9, #2
   111ac:	strd	sl, [sp, #24]
   111b0:	str	lr, [sp, #32]
   111b4:	sub	sp, sp, #28
   111b8:	bl	10edc <is_selinux_enabled@plt>
   111bc:	mov	r8, r0
   111c0:	ldr	r0, [r4]
   111c4:	bl	127b4 <__assert_fail@plt+0x1638>
   111c8:	movw	r1, #34064	; 0x8510
   111cc:	movt	r1, #1
   111d0:	ldr	sl, [pc, #1536]	; 117d8 <__assert_fail@plt+0x65c>
   111d4:	mov	r0, #6
   111d8:	bl	11104 <setlocale@plt>
   111dc:	movw	r1, #35112	; 0x8928
   111e0:	movt	r1, #1
   111e4:	movw	r0, #34944	; 0x8880
   111e8:	movt	r0, #1
   111ec:	bl	11140 <bindtextdomain@plt>
   111f0:	movw	r0, #34944	; 0x8880
   111f4:	movt	r0, #1
   111f8:	bl	10f78 <textdomain@plt>
   111fc:	movw	r0, #9712	; 0x25f0
   11200:	movt	r0, #1
   11204:	bl	1830c <__assert_fail@plt+0x7190>
   11208:	mov	r6, #0
   1120c:	mov	r3, sl
   11210:	mov	r2, r7
   11214:	str	r6, [sp]
   11218:	mov	r1, r4
   1121c:	mov	r0, r5
   11220:	bl	11038 <getopt_long@plt>
   11224:	cmn	r0, #1
   11228:	beq	11334 <__assert_fail@plt+0x1b8>
   1122c:	cmp	r0, #97	; 0x61
   11230:	beq	1120c <__assert_fail@plt+0x90>
   11234:	ble	1125c <__assert_fail@plt+0xe0>
   11238:	cmp	r0, #114	; 0x72
   1123c:	beq	11328 <__assert_fail@plt+0x1ac>
   11240:	bgt	11300 <__assert_fail@plt+0x184>
   11244:	cmp	r0, #103	; 0x67
   11248:	bne	1127c <__assert_fail@plt+0x100>
   1124c:	mov	r3, #1
   11250:	mov	r6, #0
   11254:	strb	r3, [r9, #37]	; 0x25
   11258:	b	1120c <__assert_fail@plt+0x90>
   1125c:	cmn	r0, #2
   11260:	beq	1177c <__assert_fail@plt+0x600>
   11264:	ble	112ac <__assert_fail@plt+0x130>
   11268:	cmp	r0, #71	; 0x47
   1126c:	bne	11290 <__assert_fail@plt+0x114>
   11270:	mov	r3, #1
   11274:	strb	r3, [r9, #48]	; 0x30
   11278:	b	11208 <__assert_fail@plt+0x8c>
   1127c:	cmp	r0, #110	; 0x6e
   11280:	bne	11774 <__assert_fail@plt+0x5f8>
   11284:	mov	r3, #1
   11288:	strb	r3, [r9, #12]
   1128c:	b	11208 <__assert_fail@plt+0x8c>
   11290:	cmp	r0, #90	; 0x5a
   11294:	bne	11774 <__assert_fail@plt+0x5f8>
   11298:	cmp	r8, #0
   1129c:	ble	11790 <__assert_fail@plt+0x614>
   112a0:	mov	r3, #1
   112a4:	strb	r3, [r9, #50]	; 0x32
   112a8:	b	11208 <__assert_fail@plt+0x8c>
   112ac:	cmn	r0, #3
   112b0:	bne	11774 <__assert_fail@plt+0x5f8>
   112b4:	movw	r1, #35192	; 0x8978
   112b8:	movt	r1, #1
   112bc:	movw	r2, #35208	; 0x8988
   112c0:	movt	r2, #1
   112c4:	movw	r3, #41236	; 0xa114
   112c8:	movt	r3, #2
   112cc:	movw	r0, #41332	; 0xa174
   112d0:	movt	r0, #2
   112d4:	str	r2, [sp]
   112d8:	movw	r2, #34940	; 0x887c
   112dc:	movt	r2, #1
   112e0:	stmib	sp, {r1, r6}
   112e4:	movw	r1, #33988	; 0x84c4
   112e8:	movt	r1, #1
   112ec:	ldr	r0, [r0]
   112f0:	ldr	r3, [r3]
   112f4:	bl	16be8 <__assert_fail@plt+0x5a6c>
   112f8:	mov	r0, #0
   112fc:	bl	11050 <exit@plt>
   11300:	cmp	r0, #117	; 0x75
   11304:	bne	11314 <__assert_fail@plt+0x198>
   11308:	mov	r3, #1
   1130c:	strb	r3, [r9]
   11310:	b	11208 <__assert_fail@plt+0x8c>
   11314:	cmp	r0, #122	; 0x7a
   11318:	bne	11774 <__assert_fail@plt+0x5f8>
   1131c:	mov	r3, #1
   11320:	strb	r3, [r9, #49]	; 0x31
   11324:	b	11208 <__assert_fail@plt+0x8c>
   11328:	mov	r3, #1
   1132c:	strb	r3, [r9, #1]
   11330:	b	11208 <__assert_fail@plt+0x8c>
   11334:	movw	r6, #41320	; 0xa168
   11338:	movt	r6, #2
   1133c:	ldr	r2, [r6]
   11340:	movw	r7, #41340	; 0xa17c
   11344:	movt	r7, #2
   11348:	ldrb	ip, [r7, #50]	; 0x32
   1134c:	subs	r5, r5, r2
   11350:	beq	1135c <__assert_fail@plt+0x1e0>
   11354:	cmp	ip, #0
   11358:	bne	117c0 <__assert_fail@plt+0x644>
   1135c:	ldrb	r1, [r7, #37]	; 0x25
   11360:	ldrb	r0, [r7]
   11364:	ldrb	lr, [r7, #48]	; 0x30
   11368:	add	r3, r0, r1
   1136c:	add	r3, r3, lr
   11370:	add	r3, r3, ip
   11374:	cmp	r3, #1
   11378:	movwgt	r1, #35288	; 0x89d8
   1137c:	movtgt	r1, #1
   11380:	bgt	113d0 <__assert_fail@plt+0x254>
   11384:	orr	r0, r0, ip
   11388:	orr	r1, r1, r0
   1138c:	orrs	r3, lr, r1
   11390:	beq	11454 <__assert_fail@plt+0x2d8>
   11394:	cmp	r5, #0
   11398:	bne	11488 <__assert_fail@plt+0x30c>
   1139c:	cmp	ip, #0
   113a0:	beq	113ec <__assert_fail@plt+0x270>
   113a4:	cmp	r8, #0
   113a8:	ble	113ec <__assert_fail@plt+0x270>
   113ac:	ldr	r0, [pc, #1064]	; 117dc <__assert_fail@plt+0x660>
   113b0:	bl	10fcc <getcon@plt>
   113b4:	cmp	r0, #0
   113b8:	beq	113ec <__assert_fail@plt+0x270>
   113bc:	ldrb	r3, [r7, #50]	; 0x32
   113c0:	cmp	r3, #0
   113c4:	movwne	r1, #35452	; 0x8a7c
   113c8:	movtne	r1, #1
   113cc:	beq	113ec <__assert_fail@plt+0x270>
   113d0:	mov	r2, #5
   113d4:	mov	r0, #0
   113d8:	bl	10f60 <dcgettext@plt>
   113dc:	mov	r2, r0
   113e0:	mov	r1, #0
   113e4:	mov	r0, #1
   113e8:	bl	10ff0 <error@plt>
   113ec:	ldrb	r4, [r7]
   113f0:	cmp	r4, #0
   113f4:	beq	115a4 <__assert_fail@plt+0x428>
   113f8:	ldrb	r4, [r7, #1]
   113fc:	cmp	r4, #0
   11400:	beq	116fc <__assert_fail@plt+0x580>
   11404:	bl	11080 <__errno_location@plt>
   11408:	mov	r3, #0
   1140c:	mov	r4, r0
   11410:	str	r3, [r0]
   11414:	bl	10f0c <getuid@plt>
   11418:	cmn	r0, #1
   1141c:	str	r0, [r7, #4]
   11420:	bne	11698 <__assert_fail@plt+0x51c>
   11424:	ldr	r5, [r4]
   11428:	cmp	r5, #0
   1142c:	beq	11698 <__assert_fail@plt+0x51c>
   11430:	movw	r1, #35528	; 0x8ac8
   11434:	movt	r1, #1
   11438:	mov	r2, #5
   1143c:	mov	r0, #0
   11440:	bl	10f60 <dcgettext@plt>
   11444:	mov	r2, r0
   11448:	mov	r1, r5
   1144c:	mov	r0, #1
   11450:	bl	10ff0 <error@plt>
   11454:	ldrb	r3, [r7, #1]
   11458:	cmp	r3, #0
   1145c:	bne	117cc <__assert_fail@plt+0x650>
   11460:	ldrb	r9, [r7, #12]
   11464:	cmp	r9, #0
   11468:	bne	117cc <__assert_fail@plt+0x650>
   1146c:	ldrb	r3, [r7, #49]	; 0x31
   11470:	cmp	r3, #0
   11474:	movwne	r1, #35388	; 0x8a3c
   11478:	movtne	r1, #1
   1147c:	bne	113d0 <__assert_fail@plt+0x254>
   11480:	cmp	r5, #0
   11484:	beq	1158c <__assert_fail@plt+0x410>
   11488:	cmp	r5, #1
   1148c:	add	r5, r2, r5
   11490:	movls	r3, #0
   11494:	movhi	r3, #1
   11498:	cmp	r2, r5
   1149c:	movw	r8, #41232	; 0xa110
   114a0:	movt	r8, #2
   114a4:	strb	r3, [r7, #77]	; 0x4d
   114a8:	bcs	116a8 <__assert_fail@plt+0x52c>
   114ac:	movw	r3, #35480	; 0x8a98
   114b0:	movt	r3, #1
   114b4:	mov	sl, #0
   114b8:	str	r3, [sp, #16]
   114bc:	b	11518 <__assert_fail@plt+0x39c>
   114c0:	bl	11080 <__errno_location@plt>
   114c4:	mov	r2, #5
   114c8:	ldr	r9, [r0]
   114cc:	mov	r0, #0
   114d0:	ldr	r1, [sp, #16]
   114d4:	bl	10f60 <dcgettext@plt>
   114d8:	ldr	r3, [r6]
   114dc:	mov	fp, r0
   114e0:	ldr	r0, [r4, r3, lsl #2]
   114e4:	bl	16124 <__assert_fail@plt+0x4fa8>
   114e8:	mov	r3, r0
   114ec:	mov	r2, fp
   114f0:	mov	r1, r9
   114f4:	mov	r0, #0
   114f8:	bl	10ff0 <error@plt>
   114fc:	strb	sl, [r8]
   11500:	ldr	r3, [r6]
   11504:	add	r3, r3, #1
   11508:	cmp	r3, r5
   1150c:	mov	r2, r3
   11510:	str	r3, [r6]
   11514:	bcs	116a8 <__assert_fail@plt+0x52c>
   11518:	ldr	r0, [r4, r2, lsl #2]
   1151c:	ldrb	r3, [r0]
   11520:	cmp	r3, #0
   11524:	beq	114c0 <__assert_fail@plt+0x344>
   11528:	mov	r3, #0
   1152c:	ldr	r1, [pc, #684]	; 117e0 <__assert_fail@plt+0x664>
   11530:	mov	r2, r3
   11534:	str	sl, [sp]
   11538:	bl	165d0 <__assert_fail@plt+0x5454>
   1153c:	cmp	r0, #0
   11540:	bne	114c0 <__assert_fail@plt+0x344>
   11544:	ldr	r0, [r7, #8]
   11548:	bl	10ef4 <getpwuid@plt>
   1154c:	subs	r9, r0, #0
   11550:	beq	114c0 <__assert_fail@plt+0x344>
   11554:	ldr	r0, [r9]
   11558:	bl	17364 <__assert_fail@plt+0x61e8>
   1155c:	ldr	r1, [r9, #8]
   11560:	str	r0, [sp, #20]
   11564:	ldr	r3, [r9, #12]
   11568:	str	r1, [r7, #4]
   1156c:	str	r1, [r7, #8]
   11570:	str	r3, [r7, #40]	; 0x28
   11574:	str	r3, [r7, #44]	; 0x2c
   11578:	bl	118d4 <__assert_fail@plt+0x758>
   1157c:	ldr	r2, [sp, #20]
   11580:	mov	r0, r2
   11584:	bl	126dc <__assert_fail@plt+0x1560>
   11588:	b	11500 <__assert_fail@plt+0x384>
   1158c:	movw	r0, #35436	; 0x8a6c
   11590:	movt	r0, #1
   11594:	bl	10ffc <getenv@plt>
   11598:	cmp	r0, #0
   1159c:	beq	11784 <__assert_fail@plt+0x608>
   115a0:	ldrb	r4, [r7]
   115a4:	ldrb	r3, [r7, #37]	; 0x25
   115a8:	cmp	r3, #0
   115ac:	bne	11654 <__assert_fail@plt+0x4d8>
   115b0:	ldrb	r3, [r7, #48]	; 0x30
   115b4:	cmp	r3, #0
   115b8:	bne	115f0 <__assert_fail@plt+0x474>
   115bc:	ldrb	r6, [r7, #50]	; 0x32
   115c0:	cmp	r6, #0
   115c4:	bne	115f0 <__assert_fail@plt+0x474>
   115c8:	bl	11080 <__errno_location@plt>
   115cc:	str	r6, [r0]
   115d0:	mov	r5, r0
   115d4:	bl	10f84 <geteuid@plt>
   115d8:	cmn	r0, #1
   115dc:	str	r0, [r7, #8]
   115e0:	beq	1175c <__assert_fail@plt+0x5e0>
   115e4:	ldrb	r3, [r7, #37]	; 0x25
   115e8:	cmp	r3, #0
   115ec:	bne	11654 <__assert_fail@plt+0x4d8>
   115f0:	ldrb	r3, [r7, #48]	; 0x30
   115f4:	cmp	r3, #0
   115f8:	bne	11608 <__assert_fail@plt+0x48c>
   115fc:	ldrb	r3, [r7, #50]	; 0x32
   11600:	cmp	r3, #0
   11604:	bne	1163c <__assert_fail@plt+0x4c0>
   11608:	bl	11080 <__errno_location@plt>
   1160c:	mov	r3, #0
   11610:	mov	r6, r0
   11614:	str	r3, [r0]
   11618:	bl	10f0c <getuid@plt>
   1161c:	cmn	r0, #1
   11620:	str	r0, [r7, #4]
   11624:	beq	1174c <__assert_fail@plt+0x5d0>
   11628:	cmp	r4, #0
   1162c:	bne	11698 <__assert_fail@plt+0x51c>
   11630:	ldrb	r3, [r7, #37]	; 0x25
   11634:	cmp	r3, #0
   11638:	bne	11654 <__assert_fail@plt+0x4d8>
   1163c:	ldrb	r3, [r7, #48]	; 0x30
   11640:	cmp	r3, #0
   11644:	bne	11654 <__assert_fail@plt+0x4d8>
   11648:	ldrb	r3, [r7, #50]	; 0x32
   1164c:	cmp	r3, #0
   11650:	bne	11698 <__assert_fail@plt+0x51c>
   11654:	mov	r5, #0
   11658:	bl	11080 <__errno_location@plt>
   1165c:	str	r5, [r0]
   11660:	mov	r4, r0
   11664:	bl	10f9c <getegid@plt>
   11668:	cmn	r0, #1
   1166c:	str	r0, [r7, #44]	; 0x2c
   11670:	bne	11680 <__assert_fail@plt+0x504>
   11674:	ldr	r6, [r4]
   11678:	cmp	r6, r5
   1167c:	bne	1179c <__assert_fail@plt+0x620>
   11680:	mov	r5, #0
   11684:	str	r5, [r4]
   11688:	bl	11098 <getgid@plt>
   1168c:	cmn	r0, #1
   11690:	str	r0, [r7, #40]	; 0x28
   11694:	beq	116cc <__assert_fail@plt+0x550>
   11698:	mov	r0, #0
   1169c:	movw	r8, #41232	; 0xa110
   116a0:	movt	r8, #2
   116a4:	bl	118d4 <__assert_fail@plt+0x758>
   116a8:	ldrb	r0, [r8]
   116ac:	eor	r0, r0, #1
   116b0:	add	sp, sp, #28
   116b4:	ldrd	r4, [sp]
   116b8:	ldrd	r6, [sp, #8]
   116bc:	ldrd	r8, [sp, #16]
   116c0:	ldrd	sl, [sp, #24]
   116c4:	add	sp, sp, #32
   116c8:	pop	{pc}		; (ldr pc, [sp], #4)
   116cc:	ldr	r4, [r4]
   116d0:	cmp	r4, r5
   116d4:	beq	11698 <__assert_fail@plt+0x51c>
   116d8:	mov	r2, #5
   116dc:	mov	r0, r5
   116e0:	movw	r1, #35576	; 0x8af8
   116e4:	movt	r1, #1
   116e8:	bl	10f60 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	mov	r1, r4
   116f4:	mov	r0, #1
   116f8:	bl	10ff0 <error@plt>
   116fc:	bl	11080 <__errno_location@plt>
   11700:	str	r4, [r0]
   11704:	mov	r5, r0
   11708:	bl	10f84 <geteuid@plt>
   1170c:	cmn	r0, #1
   11710:	str	r0, [r7, #8]
   11714:	bne	11698 <__assert_fail@plt+0x51c>
   11718:	ldr	r5, [r5]
   1171c:	cmp	r5, #0
   11720:	bne	11768 <__assert_fail@plt+0x5ec>
   11724:	ldrb	r4, [r7, #1]
   11728:	cmp	r4, #0
   1172c:	beq	11698 <__assert_fail@plt+0x51c>
   11730:	bl	11080 <__errno_location@plt>
   11734:	str	r5, [r0]
   11738:	mov	r6, r0
   1173c:	bl	10f0c <getuid@plt>
   11740:	cmn	r0, #1
   11744:	str	r0, [r7, #4]
   11748:	bne	11698 <__assert_fail@plt+0x51c>
   1174c:	ldr	r5, [r6]
   11750:	cmp	r5, #0
   11754:	beq	11628 <__assert_fail@plt+0x4ac>
   11758:	b	11430 <__assert_fail@plt+0x2b4>
   1175c:	ldr	r5, [r5]
   11760:	cmp	r5, #0
   11764:	beq	115e4 <__assert_fail@plt+0x468>
   11768:	movw	r1, #35500	; 0x8aac
   1176c:	movt	r1, #1
   11770:	b	11438 <__assert_fail@plt+0x2bc>
   11774:	mov	r0, #1
   11778:	bl	11e6c <__assert_fail@plt+0xcf0>
   1177c:	mov	r0, #0
   11780:	bl	11e6c <__assert_fail@plt+0xcf0>
   11784:	cmp	r8, #0
   11788:	ble	115a0 <__assert_fail@plt+0x424>
   1178c:	b	113ac <__assert_fail@plt+0x230>
   11790:	movw	r1, #35136	; 0x8940
   11794:	movt	r1, #1
   11798:	b	113d0 <__assert_fail@plt+0x254>
   1179c:	mov	r2, #5
   117a0:	mov	r0, r5
   117a4:	movw	r1, #35548	; 0x8adc
   117a8:	movt	r1, #1
   117ac:	bl	10f60 <dcgettext@plt>
   117b0:	mov	r2, r0
   117b4:	mov	r1, r6
   117b8:	mov	r0, #1
   117bc:	bl	10ff0 <error@plt>
   117c0:	movw	r1, #35236	; 0x89a4
   117c4:	movt	r1, #1
   117c8:	b	113d0 <__assert_fail@plt+0x254>
   117cc:	movw	r1, #35332	; 0x8a04
   117d0:	movt	r1, #1
   117d4:	b	113d0 <__assert_fail@plt+0x254>
   117d8:	andeq	r8, r1, r8, ror #6
   117dc:			; <UNDEFINED> instruction: 0x0002a1b0
   117e0:	andeq	sl, r2, r4, lsl #3
   117e4:	mov	fp, #0
   117e8:	mov	lr, #0
   117ec:	pop	{r1}		; (ldr r1, [sp], #4)
   117f0:	mov	r2, sp
   117f4:	push	{r2}		; (str r2, [sp, #-4]!)
   117f8:	push	{r0}		; (str r0, [sp, #-4]!)
   117fc:	ldr	ip, [pc, #16]	; 11814 <__assert_fail@plt+0x698>
   11800:	push	{ip}		; (str ip, [sp, #-4]!)
   11804:	ldr	r0, [pc, #12]	; 11818 <__assert_fail@plt+0x69c>
   11808:	ldr	r3, [pc, #12]	; 1181c <__assert_fail@plt+0x6a0>
   1180c:	bl	11014 <__libc_start_main@plt>
   11810:	bl	11158 <abort@plt>
   11814:	andeq	r8, r1, r8, lsl #6
   11818:	andeq	r1, r1, r8, lsl #3
   1181c:	andeq	r8, r1, r8, lsr #5
   11820:	ldr	r3, [pc, #20]	; 1183c <__assert_fail@plt+0x6c0>
   11824:	ldr	r2, [pc, #20]	; 11840 <__assert_fail@plt+0x6c4>
   11828:	add	r3, pc, r3
   1182c:	ldr	r2, [r3, r2]
   11830:	cmp	r2, #0
   11834:	bxeq	lr
   11838:	b	1102c <__gmon_start__@plt>
   1183c:	ldrdeq	r8, [r1], -r0
   11840:	andeq	r0, r0, r4, lsl #2
   11844:	ldr	r0, [pc, #24]	; 11864 <__assert_fail@plt+0x6e8>
   11848:	ldr	r3, [pc, #24]	; 11868 <__assert_fail@plt+0x6ec>
   1184c:	cmp	r3, r0
   11850:	bxeq	lr
   11854:	ldr	r3, [pc, #16]	; 1186c <__assert_fail@plt+0x6f0>
   11858:	cmp	r3, #0
   1185c:	bxeq	lr
   11860:	bx	r3
   11864:	andeq	sl, r2, ip, asr r1
   11868:	andeq	sl, r2, ip, asr r1
   1186c:	andeq	r0, r0, r0
   11870:	ldr	r0, [pc, #36]	; 1189c <__assert_fail@plt+0x720>
   11874:	ldr	r1, [pc, #36]	; 118a0 <__assert_fail@plt+0x724>
   11878:	sub	r1, r1, r0
   1187c:	asr	r1, r1, #2
   11880:	add	r1, r1, r1, lsr #31
   11884:	asrs	r1, r1, #1
   11888:	bxeq	lr
   1188c:	ldr	r3, [pc, #16]	; 118a4 <__assert_fail@plt+0x728>
   11890:	cmp	r3, #0
   11894:	bxeq	lr
   11898:	bx	r3
   1189c:	andeq	sl, r2, ip, asr r1
   118a0:	andeq	sl, r2, ip, asr r1
   118a4:	andeq	r0, r0, r0
   118a8:	push	{r4, lr}
   118ac:	ldr	r4, [pc, #24]	; 118cc <__assert_fail@plt+0x750>
   118b0:	ldrb	r3, [r4]
   118b4:	cmp	r3, #0
   118b8:	popne	{r4, pc}
   118bc:	bl	11844 <__assert_fail@plt+0x6c8>
   118c0:	mov	r3, #1
   118c4:	strb	r3, [r4]
   118c8:	pop	{r4, pc}
   118cc:	andeq	sl, r2, r8, ror r1
   118d0:	b	11870 <__assert_fail@plt+0x6f4>
   118d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   118d8:	movw	r4, #41340	; 0xa17c
   118dc:	movt	r4, #2
   118e0:	ldrb	r3, [r4]
   118e4:	strd	r6, [sp, #8]
   118e8:	strd	r8, [sp, #16]
   118ec:	str	lr, [sp, #24]
   118f0:	sub	sp, sp, #20
   118f4:	cmp	r3, #0
   118f8:	beq	119b0 <__assert_fail@plt+0x834>
   118fc:	ldrb	r3, [r4, #1]
   11900:	cmp	r3, #0
   11904:	ldrb	r3, [r4, #12]
   11908:	ldrne	r5, [r4, #4]
   1190c:	ldreq	r5, [r4, #8]
   11910:	cmp	r3, #0
   11914:	bne	11998 <__assert_fail@plt+0x81c>
   11918:	mov	r0, r5
   1191c:	ldr	r2, [pc, #1344]	; 11e64 <__assert_fail@plt+0xce8>
   11920:	mov	r1, #0
   11924:	bl	1273c <__assert_fail@plt+0x15c0>
   11928:	movw	r5, #41332	; 0xa174
   1192c:	movt	r5, #2
   11930:	ldr	r1, [r5]
   11934:	bl	10eb8 <fputs_unlocked@plt>
   11938:	ldrb	r3, [r4, #49]	; 0x31
   1193c:	ldr	r0, [r5]
   11940:	cmp	r3, #0
   11944:	ldr	r2, [r0, #20]
   11948:	ldr	ip, [r0, #24]
   1194c:	beq	119f4 <__assert_fail@plt+0x878>
   11950:	ldrb	r3, [r4, #48]	; 0x30
   11954:	cmp	r3, #0
   11958:	beq	11968 <__assert_fail@plt+0x7ec>
   1195c:	ldrb	r3, [r4, #77]	; 0x4d
   11960:	cmp	r3, #0
   11964:	bne	11a60 <__assert_fail@plt+0x8e4>
   11968:	mov	r1, r3
   1196c:	cmp	r2, ip
   11970:	addcc	r1, r2, #1
   11974:	strcc	r1, [r0, #20]
   11978:	strbcc	r3, [r2]
   1197c:	bcs	11aa8 <__assert_fail@plt+0x92c>
   11980:	add	sp, sp, #20
   11984:	ldrd	r4, [sp]
   11988:	ldrd	r6, [sp, #8]
   1198c:	ldrd	r8, [sp, #16]
   11990:	add	sp, sp, #24
   11994:	pop	{pc}		; (ldr pc, [sp], #4)
   11998:	mov	r0, r5
   1199c:	bl	10ef4 <getpwuid@plt>
   119a0:	subs	r6, r0, #0
   119a4:	beq	11d20 <__assert_fail@plt+0xba4>
   119a8:	ldr	r0, [r6]
   119ac:	b	11928 <__assert_fail@plt+0x7ac>
   119b0:	ldrb	r3, [r4, #37]	; 0x25
   119b4:	cmp	r3, #0
   119b8:	beq	11a00 <__assert_fail@plt+0x884>
   119bc:	ldrb	r3, [r4, #1]
   119c0:	movw	r5, #41332	; 0xa174
   119c4:	movt	r5, #2
   119c8:	ldrb	r1, [r4, #12]
   119cc:	cmp	r3, #0
   119d0:	ldrne	r0, [r4, #40]	; 0x28
   119d4:	ldreq	r0, [r4, #44]	; 0x2c
   119d8:	bl	1253c <__assert_fail@plt+0x13c0>
   119dc:	movw	r3, #41232	; 0xa110
   119e0:	movt	r3, #2
   119e4:	ldrb	r2, [r3]
   119e8:	and	r0, r0, r2
   119ec:	strb	r0, [r3]
   119f0:	b	11938 <__assert_fail@plt+0x7bc>
   119f4:	mov	r3, #10
   119f8:	mov	r1, r3
   119fc:	b	1196c <__assert_fail@plt+0x7f0>
   11a00:	ldrb	r3, [r4, #48]	; 0x30
   11a04:	cmp	r3, #0
   11a08:	bne	11a30 <__assert_fail@plt+0x8b4>
   11a0c:	ldrb	r6, [r4, #50]	; 0x32
   11a10:	cmp	r6, #0
   11a14:	beq	11ab0 <__assert_fail@plt+0x934>
   11a18:	movw	r5, #41332	; 0xa174
   11a1c:	movt	r5, #2
   11a20:	ldr	r0, [r4, #52]	; 0x34
   11a24:	ldr	r1, [r5]
   11a28:	bl	10eb8 <fputs_unlocked@plt>
   11a2c:	b	11938 <__assert_fail@plt+0x7bc>
   11a30:	ldrb	r3, [r4, #49]	; 0x31
   11a34:	movw	r5, #41332	; 0xa174
   11a38:	movt	r5, #2
   11a3c:	ldrb	r2, [r4, #12]
   11a40:	ldr	r1, [r4, #4]
   11a44:	cmp	r3, #0
   11a48:	movne	r3, #0
   11a4c:	moveq	r3, #32
   11a50:	strd	r2, [sp]
   11a54:	ldrd	r2, [r4, #40]	; 0x28
   11a58:	bl	121bc <__assert_fail@plt+0x1040>
   11a5c:	b	119dc <__assert_fail@plt+0x860>
   11a60:	cmp	r2, ip
   11a64:	addcc	r1, r2, #1
   11a68:	movcc	r3, #0
   11a6c:	strcc	r1, [r0, #20]
   11a70:	strbcc	r3, [r2]
   11a74:	bcs	11e18 <__assert_fail@plt+0xc9c>
   11a78:	ldr	r0, [r5]
   11a7c:	ldr	r3, [r0, #20]
   11a80:	ldr	r2, [r0, #24]
   11a84:	cmp	r3, r2
   11a88:	addcc	r1, r3, #1
   11a8c:	movcc	r2, #0
   11a90:	strcc	r1, [r0, #20]
   11a94:	strbcc	r2, [r3]
   11a98:	bcc	11980 <__assert_fail@plt+0x804>
   11a9c:	mov	r1, #0
   11aa0:	bl	110f8 <__overflow@plt>
   11aa4:	b	11980 <__assert_fail@plt+0x804>
   11aa8:	bl	110f8 <__overflow@plt>
   11aac:	b	11980 <__assert_fail@plt+0x804>
   11ab0:	mov	r2, #5
   11ab4:	mov	r5, r0
   11ab8:	movw	r1, #33832	; 0x8428
   11abc:	movt	r1, #1
   11ac0:	mov	r0, r6
   11ac4:	bl	10f60 <dcgettext@plt>
   11ac8:	mov	r7, r0
   11acc:	mov	r1, r6
   11ad0:	ldr	r0, [r4, #4]
   11ad4:	add	r2, r4, #16
   11ad8:	bl	1273c <__assert_fail@plt+0x15c0>
   11adc:	mov	r2, r0
   11ae0:	mov	r1, r7
   11ae4:	mov	r0, #1
   11ae8:	bl	110bc <__printf_chk@plt>
   11aec:	ldr	r0, [r4, #4]
   11af0:	bl	10ef4 <getpwuid@plt>
   11af4:	subs	r6, r0, #0
   11af8:	beq	11b10 <__assert_fail@plt+0x994>
   11afc:	movw	r1, #33840	; 0x8430
   11b00:	movt	r1, #1
   11b04:	ldr	r2, [r6]
   11b08:	mov	r0, #1
   11b0c:	bl	110bc <__printf_chk@plt>
   11b10:	mov	r2, #5
   11b14:	movw	r1, #33848	; 0x8438
   11b18:	movt	r1, #1
   11b1c:	mov	r0, #0
   11b20:	bl	10f60 <dcgettext@plt>
   11b24:	mov	r7, r0
   11b28:	ldr	r2, [pc, #824]	; 11e68 <__assert_fail@plt+0xcec>
   11b2c:	mov	r1, #0
   11b30:	ldr	r0, [r4, #40]	; 0x28
   11b34:	bl	1273c <__assert_fail@plt+0x15c0>
   11b38:	mov	r2, r0
   11b3c:	mov	r1, r7
   11b40:	mov	r0, #1
   11b44:	bl	110bc <__printf_chk@plt>
   11b48:	ldr	r0, [r4, #40]	; 0x28
   11b4c:	bl	11164 <getgrgid@plt>
   11b50:	cmp	r0, #0
   11b54:	beq	11b6c <__assert_fail@plt+0x9f0>
   11b58:	movw	r1, #33840	; 0x8430
   11b5c:	movt	r1, #1
   11b60:	ldr	r2, [r0]
   11b64:	mov	r0, #1
   11b68:	bl	110bc <__printf_chk@plt>
   11b6c:	ldr	r3, [r4, #4]
   11b70:	ldr	r2, [r4, #8]
   11b74:	cmp	r2, r3
   11b78:	bne	11c60 <__assert_fail@plt+0xae4>
   11b7c:	ldr	r3, [r4, #40]	; 0x28
   11b80:	ldr	r7, [r4, #44]	; 0x2c
   11b84:	cmp	r7, r3
   11b88:	bne	11c00 <__assert_fail@plt+0xa84>
   11b8c:	cmp	r5, #0
   11b90:	beq	11cc0 <__assert_fail@plt+0xb44>
   11b94:	cmp	r6, #0
   11b98:	mvneq	r1, #0
   11b9c:	ldrne	r1, [r6, #12]
   11ba0:	add	r2, sp, #12
   11ba4:	mov	r0, r5
   11ba8:	bl	173f4 <__assert_fail@plt+0x6278>
   11bac:	subs	r7, r0, #0
   11bb0:	blt	11e24 <__assert_fail@plt+0xca8>
   11bb4:	cmp	r7, #0
   11bb8:	movweq	r5, #41332	; 0xa174
   11bbc:	movteq	r5, #2
   11bc0:	bne	11d68 <__assert_fail@plt+0xbec>
   11bc4:	ldr	r0, [sp, #12]
   11bc8:	bl	126dc <__assert_fail@plt+0x1560>
   11bcc:	ldr	r3, [r4, #52]	; 0x34
   11bd0:	cmp	r3, #0
   11bd4:	beq	11938 <__assert_fail@plt+0x7bc>
   11bd8:	mov	r2, #5
   11bdc:	movw	r1, #33964	; 0x84ac
   11be0:	movt	r1, #1
   11be4:	mov	r0, #0
   11be8:	bl	10f60 <dcgettext@plt>
   11bec:	mov	r1, r0
   11bf0:	mov	r0, #1
   11bf4:	ldr	r2, [r4, #52]	; 0x34
   11bf8:	bl	110bc <__printf_chk@plt>
   11bfc:	b	11938 <__assert_fail@plt+0x7bc>
   11c00:	mov	r2, #5
   11c04:	movw	r1, #33868	; 0x844c
   11c08:	movt	r1, #1
   11c0c:	mov	r0, #0
   11c10:	bl	10f60 <dcgettext@plt>
   11c14:	mov	r8, r0
   11c18:	ldr	r2, [pc, #584]	; 11e68 <__assert_fail@plt+0xcec>
   11c1c:	mov	r1, #0
   11c20:	mov	r0, r7
   11c24:	bl	1273c <__assert_fail@plt+0x15c0>
   11c28:	mov	r2, r0
   11c2c:	mov	r1, r8
   11c30:	mov	r0, #1
   11c34:	bl	110bc <__printf_chk@plt>
   11c38:	ldr	r0, [r4, #44]	; 0x2c
   11c3c:	bl	11164 <getgrgid@plt>
   11c40:	cmp	r0, #0
   11c44:	beq	11b8c <__assert_fail@plt+0xa10>
   11c48:	movw	r1, #33840	; 0x8430
   11c4c:	movt	r1, #1
   11c50:	ldr	r2, [r0]
   11c54:	mov	r0, #1
   11c58:	bl	110bc <__printf_chk@plt>
   11c5c:	b	11b8c <__assert_fail@plt+0xa10>
   11c60:	mov	r2, #5
   11c64:	movw	r1, #33856	; 0x8440
   11c68:	movt	r1, #1
   11c6c:	mov	r0, #0
   11c70:	bl	10f60 <dcgettext@plt>
   11c74:	mov	r6, r0
   11c78:	ldr	r2, [pc, #484]	; 11e64 <__assert_fail@plt+0xce8>
   11c7c:	mov	r1, #0
   11c80:	ldr	r0, [r4, #8]
   11c84:	bl	1273c <__assert_fail@plt+0x15c0>
   11c88:	mov	r2, r0
   11c8c:	mov	r1, r6
   11c90:	mov	r0, #1
   11c94:	bl	110bc <__printf_chk@plt>
   11c98:	ldr	r0, [r4, #8]
   11c9c:	bl	10ef4 <getpwuid@plt>
   11ca0:	subs	r6, r0, #0
   11ca4:	beq	11b7c <__assert_fail@plt+0xa00>
   11ca8:	movw	r1, #33840	; 0x8430
   11cac:	movt	r1, #1
   11cb0:	ldr	r2, [r6]
   11cb4:	mov	r0, #1
   11cb8:	bl	110bc <__printf_chk@plt>
   11cbc:	b	11b7c <__assert_fail@plt+0xa00>
   11cc0:	add	r2, sp, #12
   11cc4:	mov	r0, r5
   11cc8:	ldr	r1, [r4, #44]	; 0x2c
   11ccc:	bl	173f4 <__assert_fail@plt+0x6278>
   11cd0:	subs	r7, r0, #0
   11cd4:	bge	11bb4 <__assert_fail@plt+0xa38>
   11cd8:	bl	11080 <__errno_location@plt>
   11cdc:	ldr	r6, [r0]
   11ce0:	mov	r2, #5
   11ce4:	movw	r1, #33916	; 0x847c
   11ce8:	movt	r1, #1
   11cec:	mov	r0, r5
   11cf0:	bl	10f60 <dcgettext@plt>
   11cf4:	mov	r2, r0
   11cf8:	mov	r0, r5
   11cfc:	mov	r1, r6
   11d00:	bl	10ff0 <error@plt>
   11d04:	movw	r3, #41232	; 0xa110
   11d08:	movt	r3, #2
   11d0c:	mov	r2, #0
   11d10:	movw	r5, #41332	; 0xa174
   11d14:	movt	r5, #2
   11d18:	strb	r2, [r3]
   11d1c:	b	11938 <__assert_fail@plt+0x7bc>
   11d20:	mov	r2, #5
   11d24:	movw	r1, #33800	; 0x8408
   11d28:	movt	r1, #1
   11d2c:	bl	10f60 <dcgettext@plt>
   11d30:	mov	r7, r0
   11d34:	ldr	r2, [pc, #296]	; 11e64 <__assert_fail@plt+0xce8>
   11d38:	mov	r1, r6
   11d3c:	mov	r0, r5
   11d40:	bl	1273c <__assert_fail@plt+0x15c0>
   11d44:	mov	r3, r0
   11d48:	mov	r2, r7
   11d4c:	mov	r1, r6
   11d50:	mov	r0, r6
   11d54:	bl	10ff0 <error@plt>
   11d58:	movw	r3, #41232	; 0xa110
   11d5c:	movt	r3, #2
   11d60:	strb	r6, [r3]
   11d64:	b	11918 <__assert_fail@plt+0x79c>
   11d68:	movw	r1, #33976	; 0x84b8
   11d6c:	movt	r1, #1
   11d70:	ldr	r9, [pc, #240]	; 11e68 <__assert_fail@plt+0xcec>
   11d74:	mov	r2, #5
   11d78:	mov	r0, #0
   11d7c:	movw	r5, #41332	; 0xa174
   11d80:	movt	r5, #2
   11d84:	bl	10f60 <dcgettext@plt>
   11d88:	ldr	r1, [r5]
   11d8c:	movw	r8, #33840	; 0x8430
   11d90:	movt	r8, #1
   11d94:	mov	r6, #0
   11d98:	bl	10eb8 <fputs_unlocked@plt>
   11d9c:	ldr	r3, [sp, #12]
   11da0:	mov	r2, r9
   11da4:	mov	r1, #0
   11da8:	ldr	r0, [r3, r6, lsl #2]
   11dac:	bl	1273c <__assert_fail@plt+0x15c0>
   11db0:	ldr	r1, [r5]
   11db4:	bl	10eb8 <fputs_unlocked@plt>
   11db8:	ldr	r3, [sp, #12]
   11dbc:	ldr	r0, [r3, r6, lsl #2]
   11dc0:	add	r6, r6, #1
   11dc4:	bl	11164 <getgrgid@plt>
   11dc8:	subs	r3, r0, #0
   11dcc:	mov	r1, r8
   11dd0:	mov	r0, #1
   11dd4:	beq	11de0 <__assert_fail@plt+0xc64>
   11dd8:	ldr	r2, [r3]
   11ddc:	bl	110bc <__printf_chk@plt>
   11de0:	cmp	r6, r7
   11de4:	mov	r2, #44	; 0x2c
   11de8:	beq	11bc4 <__assert_fail@plt+0xa48>
   11dec:	ldr	r0, [r5]
   11df0:	ldr	r3, [r0, #20]
   11df4:	ldr	r1, [r0, #24]
   11df8:	add	ip, r3, #1
   11dfc:	cmp	r3, r1
   11e00:	strcc	ip, [r0, #20]
   11e04:	strbcc	r2, [r3]
   11e08:	bcc	11d9c <__assert_fail@plt+0xc20>
   11e0c:	mov	r1, #44	; 0x2c
   11e10:	bl	110f8 <__overflow@plt>
   11e14:	b	11d9c <__assert_fail@plt+0xc20>
   11e18:	mov	r1, #0
   11e1c:	bl	110f8 <__overflow@plt>
   11e20:	b	11a78 <__assert_fail@plt+0x8fc>
   11e24:	bl	11080 <__errno_location@plt>
   11e28:	ldr	r6, [r0]
   11e2c:	mov	r2, #5
   11e30:	movw	r1, #33880	; 0x8458
   11e34:	movt	r1, #1
   11e38:	mov	r0, #0
   11e3c:	bl	10f60 <dcgettext@plt>
   11e40:	mov	r7, r0
   11e44:	mov	r0, r5
   11e48:	bl	16124 <__assert_fail@plt+0x4fa8>
   11e4c:	mov	r3, r0
   11e50:	mov	r2, r7
   11e54:	mov	r1, r6
   11e58:	mov	r0, #0
   11e5c:	bl	10ff0 <error@plt>
   11e60:	b	11d04 <__assert_fail@plt+0xb88>
   11e64:	andeq	sl, r2, ip, lsl #3
   11e68:			; <UNDEFINED> instruction: 0x0002a1b4
   11e6c:	subs	r6, r0, #0
   11e70:	str	r7, [sp, #-8]!
   11e74:	str	lr, [sp, #4]
   11e78:	sub	sp, sp, #56	; 0x38
   11e7c:	beq	11ec4 <__assert_fail@plt+0xd48>
   11e80:	movw	r3, #41328	; 0xa170
   11e84:	movt	r3, #2
   11e88:	ldr	r4, [r3]
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #33992	; 0x84c8
   11e94:	movt	r1, #1
   11e98:	mov	r0, #0
   11e9c:	bl	10f60 <dcgettext@plt>
   11ea0:	movw	r3, #41452	; 0xa1ec
   11ea4:	movt	r3, #2
   11ea8:	mov	r2, r0
   11eac:	mov	r1, #1
   11eb0:	ldr	r3, [r3]
   11eb4:	mov	r0, r4
   11eb8:	bl	110d4 <__fprintf_chk@plt>
   11ebc:	mov	r0, r6
   11ec0:	bl	11050 <exit@plt>
   11ec4:	mov	r2, #5
   11ec8:	movw	r1, #34032	; 0x84f0
   11ecc:	movt	r1, #1
   11ed0:	movw	r7, #41332	; 0xa174
   11ed4:	movt	r7, #2
   11ed8:	bl	10f60 <dcgettext@plt>
   11edc:	movw	r3, #41452	; 0xa1ec
   11ee0:	movt	r3, #2
   11ee4:	mov	r1, r0
   11ee8:	mov	r0, #1
   11eec:	ldr	r2, [r3]
   11ef0:	bl	110bc <__printf_chk@plt>
   11ef4:	mov	r2, #5
   11ef8:	movw	r1, #34068	; 0x8514
   11efc:	movt	r1, #1
   11f00:	mov	r0, r6
   11f04:	bl	10f60 <dcgettext@plt>
   11f08:	ldr	r1, [r7]
   11f0c:	bl	10eb8 <fputs_unlocked@plt>
   11f10:	mov	r2, #5
   11f14:	movw	r1, #34176	; 0x8580
   11f18:	movt	r1, #1
   11f1c:	mov	r0, r6
   11f20:	bl	10f60 <dcgettext@plt>
   11f24:	ldr	r1, [r7]
   11f28:	bl	10eb8 <fputs_unlocked@plt>
   11f2c:	mov	r2, #5
   11f30:	movw	r1, #34700	; 0x878c
   11f34:	movt	r1, #1
   11f38:	mov	r0, r6
   11f3c:	bl	10f60 <dcgettext@plt>
   11f40:	ldr	r1, [r7]
   11f44:	bl	10eb8 <fputs_unlocked@plt>
   11f48:	mov	r2, #5
   11f4c:	movw	r1, #34748	; 0x87bc
   11f50:	movt	r1, #1
   11f54:	mov	r0, r6
   11f58:	bl	10f60 <dcgettext@plt>
   11f5c:	ldr	r1, [r7]
   11f60:	bl	10eb8 <fputs_unlocked@plt>
   11f64:	mov	r2, #5
   11f68:	movw	r1, #34804	; 0x87f4
   11f6c:	movt	r1, #1
   11f70:	mov	r0, r6
   11f74:	bl	10f60 <dcgettext@plt>
   11f78:	ldr	r1, [r7]
   11f7c:	bl	10eb8 <fputs_unlocked@plt>
   11f80:	movw	lr, #33584	; 0x8330
   11f84:	movt	lr, #1
   11f88:	ldr	ip, [lr]
   11f8c:	ldr	r4, [lr, #4]
   11f90:	ldrd	r8, [lr, #8]
   11f94:	subs	r1, ip, #0
   11f98:	str	ip, [sp]
   11f9c:	ldrd	r2, [lr, #16]
   11fa0:	str	r4, [sp, #4]
   11fa4:	ldrd	r4, [lr, #24]
   11fa8:	strd	r8, [sp, #8]
   11fac:	ldrd	r8, [lr, #32]
   11fb0:	strd	r2, [sp, #16]
   11fb4:	ldrd	r2, [lr, #40]	; 0x28
   11fb8:	strd	r4, [sp, #24]
   11fbc:	ldrd	r4, [lr, #48]	; 0x30
   11fc0:	strd	r8, [sp, #32]
   11fc4:	strd	r2, [sp, #40]	; 0x28
   11fc8:	strd	r4, [sp, #48]	; 0x30
   11fcc:	movwne	r5, #33988	; 0x84c4
   11fd0:	mov	r4, sp
   11fd4:	movtne	r5, #1
   11fd8:	bne	120d0 <__assert_fail@plt+0xf54>
   11fdc:	ldr	r4, [r4, #4]
   11fe0:	movw	r1, #34876	; 0x883c
   11fe4:	movt	r1, #1
   11fe8:	mov	r2, #5
   11fec:	cmp	r4, #0
   11ff0:	beq	120e4 <__assert_fail@plt+0xf68>
   11ff4:	mov	r0, #0
   11ff8:	bl	10f60 <dcgettext@plt>
   11ffc:	mov	r1, r0
   12000:	movw	r3, #34900	; 0x8854
   12004:	movt	r3, #1
   12008:	movw	r2, #34940	; 0x887c
   1200c:	movt	r2, #1
   12010:	mov	r0, #1
   12014:	bl	110bc <__printf_chk@plt>
   12018:	mov	r1, #0
   1201c:	mov	r0, #5
   12020:	bl	11104 <setlocale@plt>
   12024:	cmp	r0, #0
   12028:	movweq	r5, #33988	; 0x84c4
   1202c:	movteq	r5, #1
   12030:	beq	12054 <__assert_fail@plt+0xed8>
   12034:	movw	r1, #34956	; 0x888c
   12038:	movt	r1, #1
   1203c:	mov	r2, #3
   12040:	movw	r5, #33988	; 0x84c4
   12044:	movt	r5, #1
   12048:	bl	1114c <strncmp@plt>
   1204c:	cmp	r0, #0
   12050:	bne	1219c <__assert_fail@plt+0x1020>
   12054:	mov	r2, #5
   12058:	movw	r1, #35032	; 0x88d8
   1205c:	movt	r1, #1
   12060:	mov	r0, #0
   12064:	bl	10f60 <dcgettext@plt>
   12068:	mov	r1, r0
   1206c:	movw	r3, #33988	; 0x84c4
   12070:	movt	r3, #1
   12074:	movw	r2, #34900	; 0x8854
   12078:	movt	r2, #1
   1207c:	mov	r0, #1
   12080:	bl	110bc <__printf_chk@plt>
   12084:	mov	r2, #5
   12088:	movw	r1, #35060	; 0x88f4
   1208c:	movt	r1, #1
   12090:	mov	r0, #0
   12094:	bl	10f60 <dcgettext@plt>
   12098:	movw	r2, #35604	; 0x8b14
   1209c:	movt	r2, #1
   120a0:	cmp	r4, r5
   120a4:	movw	r3, #34064	; 0x8510
   120a8:	movt	r3, #1
   120ac:	mov	r1, r0
   120b0:	moveq	r3, r2
   120b4:	mov	r2, r4
   120b8:	mov	r0, #1
   120bc:	bl	110bc <__printf_chk@plt>
   120c0:	b	11ebc <__assert_fail@plt+0xd40>
   120c4:	ldr	r1, [r4, #8]!
   120c8:	cmp	r1, #0
   120cc:	beq	11fdc <__assert_fail@plt+0xe60>
   120d0:	mov	r0, r5
   120d4:	bl	10ee8 <strcmp@plt>
   120d8:	cmp	r0, #0
   120dc:	bne	120c4 <__assert_fail@plt+0xf48>
   120e0:	b	11fdc <__assert_fail@plt+0xe60>
   120e4:	mov	r0, r4
   120e8:	bl	10f60 <dcgettext@plt>
   120ec:	mov	r1, r0
   120f0:	movw	r3, #34900	; 0x8854
   120f4:	movt	r3, #1
   120f8:	movw	r2, #34940	; 0x887c
   120fc:	movt	r2, #1
   12100:	mov	r0, #1
   12104:	bl	110bc <__printf_chk@plt>
   12108:	mov	r1, r4
   1210c:	mov	r0, #5
   12110:	bl	11104 <setlocale@plt>
   12114:	cmp	r0, #0
   12118:	beq	12134 <__assert_fail@plt+0xfb8>
   1211c:	movw	r1, #34956	; 0x888c
   12120:	movt	r1, #1
   12124:	mov	r2, #3
   12128:	bl	1114c <strncmp@plt>
   1212c:	cmp	r0, #0
   12130:	bne	12190 <__assert_fail@plt+0x1014>
   12134:	mov	r2, #5
   12138:	movw	r1, #35032	; 0x88d8
   1213c:	movt	r1, #1
   12140:	mov	r0, #0
   12144:	bl	10f60 <dcgettext@plt>
   12148:	mov	r1, r0
   1214c:	movw	r3, #33988	; 0x84c4
   12150:	movt	r3, #1
   12154:	movw	r2, #34900	; 0x8854
   12158:	movt	r2, #1
   1215c:	mov	r0, #1
   12160:	bl	110bc <__printf_chk@plt>
   12164:	movw	r1, #35060	; 0x88f4
   12168:	movt	r1, #1
   1216c:	mov	r2, #5
   12170:	mov	r0, #0
   12174:	bl	10f60 <dcgettext@plt>
   12178:	movw	r4, #33988	; 0x84c4
   1217c:	movt	r4, #1
   12180:	movw	r3, #35604	; 0x8b14
   12184:	movt	r3, #1
   12188:	mov	r1, r0
   1218c:	b	120b4 <__assert_fail@plt+0xf38>
   12190:	movw	r5, #33988	; 0x84c4
   12194:	movt	r5, #1
   12198:	mov	r4, r5
   1219c:	mov	r2, #5
   121a0:	movw	r1, #34960	; 0x8890
   121a4:	movt	r1, #1
   121a8:	mov	r0, #0
   121ac:	bl	10f60 <dcgettext@plt>
   121b0:	ldr	r1, [r7]
   121b4:	bl	10eb8 <fputs_unlocked@plt>
   121b8:	b	12054 <__assert_fail@plt+0xed8>
   121bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121c0:	mov	r5, r3
   121c4:	strd	r6, [sp, #8]
   121c8:	mov	r6, r2
   121cc:	strd	r8, [sp, #16]
   121d0:	strd	sl, [sp, #24]
   121d4:	subs	sl, r0, #0
   121d8:	str	lr, [sp, #32]
   121dc:	sub	sp, sp, #28
   121e0:	ldrb	r3, [sp, #68]	; 0x44
   121e4:	ldrb	r7, [sp, #64]	; 0x40
   121e8:	str	r3, [sp]
   121ec:	beq	123b0 <__assert_fail@plt+0x1234>
   121f0:	mov	r0, r1
   121f4:	bl	10ef4 <getpwuid@plt>
   121f8:	adds	r3, r0, #0
   121fc:	mov	r4, r0
   12200:	movne	r3, #1
   12204:	str	r3, [sp, #8]
   12208:	cmp	r7, #0
   1220c:	bne	12388 <__assert_fail@plt+0x120c>
   12210:	mov	r1, r7
   12214:	movw	r2, #41420	; 0xa1cc
   12218:	movt	r2, #2
   1221c:	mov	r0, r6
   12220:	movw	r8, #41332	; 0xa174
   12224:	movt	r8, #2
   12228:	bl	1273c <__assert_fail@plt+0x15c0>
   1222c:	ldr	r1, [r8]
   12230:	bl	10eb8 <fputs_unlocked@plt>
   12234:	cmp	r6, r5
   12238:	beq	12284 <__assert_fail@plt+0x1108>
   1223c:	ldr	r0, [r8]
   12240:	ldr	r3, [r0, #20]
   12244:	ldr	r2, [r0, #24]
   12248:	cmp	r3, r2
   1224c:	bcs	124e8 <__assert_fail@plt+0x136c>
   12250:	add	r2, r3, #1
   12254:	str	r2, [r0, #20]
   12258:	ldr	r2, [sp]
   1225c:	strb	r2, [r3]
   12260:	cmp	r7, #0
   12264:	beq	12450 <__assert_fail@plt+0x12d4>
   12268:	mov	r0, r5
   1226c:	bl	11164 <getgrgid@plt>
   12270:	subs	r9, r0, #0
   12274:	beq	124f4 <__assert_fail@plt+0x1378>
   12278:	ldr	r1, [r8]
   1227c:	ldr	r0, [r9]
   12280:	bl	10eb8 <fputs_unlocked@plt>
   12284:	cmp	r4, #0
   12288:	add	r2, sp, #20
   1228c:	ldrne	r1, [r4, #12]
   12290:	moveq	r1, r5
   12294:	mov	r0, sl
   12298:	bl	173f4 <__assert_fail@plt+0x6278>
   1229c:	subs	r9, r0, #0
   122a0:	blt	123c0 <__assert_fail@plt+0x1244>
   122a4:	ldr	r0, [sp, #20]
   122a8:	beq	12340 <__assert_fail@plt+0x11c4>
   122ac:	movw	r3, #35760	; 0x8bb0
   122b0:	movt	r3, #1
   122b4:	movw	fp, #41420	; 0xa1cc
   122b8:	movt	fp, #2
   122bc:	mov	r4, #0
   122c0:	str	r3, [sp, #12]
   122c4:	b	122d4 <__assert_fail@plt+0x1158>
   122c8:	add	r4, r4, #1
   122cc:	cmp	r9, r4
   122d0:	beq	12340 <__assert_fail@plt+0x11c4>
   122d4:	ldr	r3, [r0, r4, lsl #2]
   122d8:	lsl	sl, r4, #2
   122dc:	cmp	r3, r6
   122e0:	cmpne	r3, r5
   122e4:	beq	122c8 <__assert_fail@plt+0x114c>
   122e8:	ldr	r0, [r8]
   122ec:	ldr	r3, [r0, #20]
   122f0:	ldr	r2, [r0, #24]
   122f4:	add	r1, r3, #1
   122f8:	cmp	r3, r2
   122fc:	bcs	12410 <__assert_fail@plt+0x1294>
   12300:	ldr	r2, [sp]
   12304:	str	r1, [r0, #20]
   12308:	strb	r2, [r3]
   1230c:	ldr	r3, [sp, #20]
   12310:	subs	r1, r7, #0
   12314:	mov	r2, fp
   12318:	ldr	sl, [r3, sl]
   1231c:	mov	r0, sl
   12320:	bne	12364 <__assert_fail@plt+0x11e8>
   12324:	bl	1273c <__assert_fail@plt+0x15c0>
   12328:	add	r4, r4, #1
   1232c:	ldr	r1, [r8]
   12330:	bl	10eb8 <fputs_unlocked@plt>
   12334:	cmp	r9, r4
   12338:	ldr	r0, [sp, #20]
   1233c:	bne	122d4 <__assert_fail@plt+0x1158>
   12340:	bl	126dc <__assert_fail@plt+0x1560>
   12344:	ldr	r0, [sp, #8]
   12348:	add	sp, sp, #28
   1234c:	ldrd	r4, [sp]
   12350:	ldrd	r6, [sp, #8]
   12354:	ldrd	r8, [sp, #16]
   12358:	ldrd	sl, [sp, #24]
   1235c:	add	sp, sp, #32
   12360:	pop	{pc}		; (ldr pc, [sp], #4)
   12364:	bl	11164 <getgrgid@plt>
   12368:	subs	r3, r0, #0
   1236c:	str	r3, [sp, #4]
   12370:	beq	1241c <__assert_fail@plt+0x12a0>
   12374:	ldr	r0, [r3]
   12378:	ldr	r1, [r8]
   1237c:	bl	10eb8 <fputs_unlocked@plt>
   12380:	ldr	r0, [sp, #20]
   12384:	b	122c8 <__assert_fail@plt+0x114c>
   12388:	mov	r0, r6
   1238c:	bl	11164 <getgrgid@plt>
   12390:	subs	r9, r0, #0
   12394:	beq	12498 <__assert_fail@plt+0x131c>
   12398:	movw	r8, #41332	; 0xa174
   1239c:	movt	r8, #2
   123a0:	ldr	r0, [r9]
   123a4:	ldr	r1, [r8]
   123a8:	bl	10eb8 <fputs_unlocked@plt>
   123ac:	b	12234 <__assert_fail@plt+0x10b8>
   123b0:	mov	r3, #1
   123b4:	mov	r4, sl
   123b8:	str	r3, [sp, #8]
   123bc:	b	12208 <__assert_fail@plt+0x108c>
   123c0:	bl	11080 <__errno_location@plt>
   123c4:	cmp	sl, #0
   123c8:	ldr	r4, [r0]
   123cc:	beq	12470 <__assert_fail@plt+0x12f4>
   123d0:	mov	r2, #5
   123d4:	movw	r1, #33880	; 0x8458
   123d8:	movt	r1, #1
   123dc:	mov	r0, #0
   123e0:	bl	10f60 <dcgettext@plt>
   123e4:	mov	r5, r0
   123e8:	mov	r0, sl
   123ec:	bl	16124 <__assert_fail@plt+0x4fa8>
   123f0:	mov	r3, r0
   123f4:	mov	r2, r5
   123f8:	mov	r1, r4
   123fc:	mov	r0, #0
   12400:	bl	10ff0 <error@plt>
   12404:	mov	r3, #0
   12408:	str	r3, [sp, #8]
   1240c:	b	12344 <__assert_fail@plt+0x11c8>
   12410:	ldr	r1, [sp]
   12414:	bl	110f8 <__overflow@plt>
   12418:	b	1230c <__assert_fail@plt+0x1190>
   1241c:	mov	r2, #5
   12420:	ldr	r1, [sp, #12]
   12424:	bl	10f60 <dcgettext@plt>
   12428:	mov	r2, r0
   1242c:	ldr	r0, [sp, #4]
   12430:	mov	r3, sl
   12434:	mov	r1, r0
   12438:	bl	10ff0 <error@plt>
   1243c:	ldr	r1, [sp, #4]
   12440:	mov	r2, fp
   12444:	mov	r0, sl
   12448:	str	r1, [sp, #8]
   1244c:	b	12324 <__assert_fail@plt+0x11a8>
   12450:	mov	r1, r7
   12454:	mov	r0, r5
   12458:	movw	r2, #41420	; 0xa1cc
   1245c:	movt	r2, #2
   12460:	bl	1273c <__assert_fail@plt+0x15c0>
   12464:	ldr	r1, [r8]
   12468:	bl	10eb8 <fputs_unlocked@plt>
   1246c:	b	12284 <__assert_fail@plt+0x1108>
   12470:	mov	r2, #5
   12474:	mov	r0, sl
   12478:	movw	r1, #33916	; 0x847c
   1247c:	movt	r1, #1
   12480:	bl	10f60 <dcgettext@plt>
   12484:	mov	r2, r0
   12488:	mov	r1, r4
   1248c:	mov	r0, sl
   12490:	bl	10ff0 <error@plt>
   12494:	b	12404 <__assert_fail@plt+0x1288>
   12498:	mov	r2, #5
   1249c:	movw	r1, #35760	; 0x8bb0
   124a0:	movt	r1, #1
   124a4:	movw	r8, #41332	; 0xa174
   124a8:	movt	r8, #2
   124ac:	bl	10f60 <dcgettext@plt>
   124b0:	mov	r2, r0
   124b4:	mov	r3, r6
   124b8:	mov	r1, r9
   124bc:	mov	r0, r9
   124c0:	bl	10ff0 <error@plt>
   124c4:	mov	r1, r9
   124c8:	mov	r0, r6
   124cc:	movw	r2, #41420	; 0xa1cc
   124d0:	movt	r2, #2
   124d4:	bl	1273c <__assert_fail@plt+0x15c0>
   124d8:	ldr	r1, [r8]
   124dc:	str	r9, [sp, #8]
   124e0:	bl	10eb8 <fputs_unlocked@plt>
   124e4:	b	12234 <__assert_fail@plt+0x10b8>
   124e8:	ldr	r1, [sp]
   124ec:	bl	110f8 <__overflow@plt>
   124f0:	b	12260 <__assert_fail@plt+0x10e4>
   124f4:	mov	r2, #5
   124f8:	movw	r1, #35760	; 0x8bb0
   124fc:	movt	r1, #1
   12500:	str	r9, [sp, #8]
   12504:	bl	10f60 <dcgettext@plt>
   12508:	mov	r2, r0
   1250c:	mov	r3, r5
   12510:	mov	r1, r9
   12514:	mov	r0, r9
   12518:	bl	10ff0 <error@plt>
   1251c:	mov	r1, r9
   12520:	mov	r0, r5
   12524:	movw	r2, #41420	; 0xa1cc
   12528:	movt	r2, #2
   1252c:	bl	1273c <__assert_fail@plt+0x15c0>
   12530:	ldr	r1, [r8]
   12534:	bl	10eb8 <fputs_unlocked@plt>
   12538:	b	12284 <__assert_fail@plt+0x1108>
   1253c:	strd	r4, [sp, #-16]!
   12540:	subs	r4, r1, #0
   12544:	mov	r5, r0
   12548:	str	r6, [sp, #8]
   1254c:	str	lr, [sp, #12]
   12550:	beq	12568 <__assert_fail@plt+0x13ec>
   12554:	bl	11164 <getgrgid@plt>
   12558:	subs	r6, r0, #0
   1255c:	beq	125a4 <__assert_fail@plt+0x1428>
   12560:	ldr	r0, [r6]
   12564:	b	12580 <__assert_fail@plt+0x1404>
   12568:	mov	r4, #1
   1256c:	movw	r2, #41420	; 0xa1cc
   12570:	movt	r2, #2
   12574:	mov	r0, r5
   12578:	mov	r1, #0
   1257c:	bl	1273c <__assert_fail@plt+0x15c0>
   12580:	movw	r3, #41332	; 0xa174
   12584:	movt	r3, #2
   12588:	ldr	r1, [r3]
   1258c:	bl	10eb8 <fputs_unlocked@plt>
   12590:	mov	r0, r4
   12594:	ldrd	r4, [sp]
   12598:	ldr	r6, [sp, #8]
   1259c:	add	sp, sp, #12
   125a0:	pop	{pc}		; (ldr pc, [sp], #4)
   125a4:	mov	r2, #5
   125a8:	movw	r1, #35760	; 0x8bb0
   125ac:	movt	r1, #1
   125b0:	mov	r4, r6
   125b4:	bl	10f60 <dcgettext@plt>
   125b8:	mov	r2, r0
   125bc:	mov	r3, r5
   125c0:	mov	r1, r6
   125c4:	mov	r0, r6
   125c8:	bl	10ff0 <error@plt>
   125cc:	b	1256c <__assert_fail@plt+0x13f0>
   125d0:	movw	r3, #41444	; 0xa1e4
   125d4:	movt	r3, #2
   125d8:	str	r0, [r3]
   125dc:	bx	lr
   125e0:	movw	r3, #41444	; 0xa1e4
   125e4:	movt	r3, #2
   125e8:	strb	r0, [r3, #4]
   125ec:	bx	lr
   125f0:	movw	r3, #41332	; 0xa174
   125f4:	movt	r3, #2
   125f8:	strd	r4, [sp, #-16]!
   125fc:	ldr	r0, [r3]
   12600:	str	r6, [sp, #8]
   12604:	str	lr, [sp, #12]
   12608:	sub	sp, sp, #8
   1260c:	bl	17a9c <__assert_fail@plt+0x6920>
   12610:	cmp	r0, #0
   12614:	beq	12640 <__assert_fail@plt+0x14c4>
   12618:	movw	r4, #41444	; 0xa1e4
   1261c:	movt	r4, #2
   12620:	ldrb	r6, [r4, #4]
   12624:	bl	11080 <__errno_location@plt>
   12628:	mov	r5, r0
   1262c:	cmp	r6, #0
   12630:	beq	1266c <__assert_fail@plt+0x14f0>
   12634:	ldr	r3, [r0]
   12638:	cmp	r3, #32
   1263c:	bne	1266c <__assert_fail@plt+0x14f0>
   12640:	movw	r3, #41328	; 0xa170
   12644:	movt	r3, #2
   12648:	ldr	r0, [r3]
   1264c:	bl	17a9c <__assert_fail@plt+0x6920>
   12650:	cmp	r0, #0
   12654:	bne	126b4 <__assert_fail@plt+0x1538>
   12658:	add	sp, sp, #8
   1265c:	ldrd	r4, [sp]
   12660:	ldr	r6, [sp, #8]
   12664:	add	sp, sp, #12
   12668:	pop	{pc}		; (ldr pc, [sp], #4)
   1266c:	movw	r1, #35812	; 0x8be4
   12670:	movt	r1, #1
   12674:	mov	r2, #5
   12678:	mov	r0, #0
   1267c:	bl	10f60 <dcgettext@plt>
   12680:	mov	r6, r0
   12684:	ldr	r0, [r4]
   12688:	cmp	r0, #0
   1268c:	beq	126c4 <__assert_fail@plt+0x1548>
   12690:	ldr	r4, [r5]
   12694:	bl	155a8 <__assert_fail@plt+0x442c>
   12698:	mov	r3, r0
   1269c:	movw	r2, #35824	; 0x8bf0
   126a0:	movt	r2, #1
   126a4:	mov	r0, #0
   126a8:	str	r6, [sp]
   126ac:	mov	r1, r4
   126b0:	bl	10ff0 <error@plt>
   126b4:	movw	r3, #41240	; 0xa118
   126b8:	movt	r3, #2
   126bc:	ldr	r0, [r3]
   126c0:	bl	10f24 <_exit@plt>
   126c4:	mov	r3, r6
   126c8:	movw	r2, #35828	; 0x8bf4
   126cc:	movt	r2, #1
   126d0:	ldr	r1, [r5]
   126d4:	bl	10ff0 <error@plt>
   126d8:	b	126b4 <__assert_fail@plt+0x1538>
   126dc:	strd	r4, [sp, #-12]!
   126e0:	mov	r5, r0
   126e4:	str	lr, [sp, #8]
   126e8:	sub	sp, sp, #12
   126ec:	bl	11080 <__errno_location@plt>
   126f0:	mov	r4, r0
   126f4:	mov	r2, #0
   126f8:	ldr	r3, [r4]
   126fc:	mov	r0, r5
   12700:	str	r2, [r4]
   12704:	str	r3, [sp]
   12708:	str	r3, [sp, #4]
   1270c:	bl	10f18 <free@plt>
   12710:	ldr	r3, [r4]
   12714:	add	r2, sp, #8
   12718:	clz	r3, r3
   1271c:	lsr	r3, r3, #5
   12720:	add	r3, r2, r3, lsl #2
   12724:	ldr	r3, [r3, #-8]
   12728:	str	r3, [r4]
   1272c:	add	sp, sp, #12
   12730:	ldrd	r4, [sp]
   12734:	add	sp, sp, #8
   12738:	pop	{pc}		; (ldr pc, [sp], #4)
   1273c:	mov	r3, #0
   12740:	strd	r4, [sp, #-16]!
   12744:	mov	r4, r0
   12748:	mov	r5, r1
   1274c:	str	r6, [sp, #8]
   12750:	add	r6, r2, #20
   12754:	str	lr, [sp, #12]
   12758:	strb	r3, [r2, #20]
   1275c:	mov	r0, r4
   12760:	mov	r1, r5
   12764:	mov	r2, #10
   12768:	mov	r3, #0
   1276c:	bl	18134 <__assert_fail@plt+0x6fb8>
   12770:	add	ip, r2, #48	; 0x30
   12774:	mov	r0, r4
   12778:	mov	r1, r5
   1277c:	mov	r2, #10
   12780:	mov	r3, #0
   12784:	strb	ip, [r6, #-1]!
   12788:	bl	18134 <__assert_fail@plt+0x6fb8>
   1278c:	cmp	r5, #0
   12790:	mov	r5, r1
   12794:	cmpeq	r4, #9
   12798:	mov	r4, r0
   1279c:	bhi	1275c <__assert_fail@plt+0x15e0>
   127a0:	mov	r0, r6
   127a4:	ldrd	r4, [sp]
   127a8:	ldr	r6, [sp, #8]
   127ac:	add	sp, sp, #12
   127b0:	pop	{pc}		; (ldr pc, [sp], #4)
   127b4:	strd	r4, [sp, #-16]!
   127b8:	subs	r4, r0, #0
   127bc:	str	r6, [sp, #8]
   127c0:	str	lr, [sp, #12]
   127c4:	beq	1285c <__assert_fail@plt+0x16e0>
   127c8:	mov	r1, #47	; 0x2f
   127cc:	bl	1111c <strrchr@plt>
   127d0:	subs	r5, r0, #0
   127d4:	beq	12834 <__assert_fail@plt+0x16b8>
   127d8:	add	r6, r5, #1
   127dc:	sub	r3, r6, r4
   127e0:	cmp	r3, #6
   127e4:	ble	12834 <__assert_fail@plt+0x16b8>
   127e8:	movw	r1, #35888	; 0x8c30
   127ec:	movt	r1, #1
   127f0:	mov	r2, #7
   127f4:	sub	r0, r5, #6
   127f8:	bl	1114c <strncmp@plt>
   127fc:	cmp	r0, #0
   12800:	bne	12834 <__assert_fail@plt+0x16b8>
   12804:	movw	r1, #35896	; 0x8c38
   12808:	movt	r1, #1
   1280c:	mov	r2, #3
   12810:	mov	r0, r6
   12814:	bl	1114c <strncmp@plt>
   12818:	cmp	r0, #0
   1281c:	movne	r4, r6
   12820:	bne	12834 <__assert_fail@plt+0x16b8>
   12824:	add	r4, r5, #4
   12828:	movw	r3, #41312	; 0xa160
   1282c:	movt	r3, #2
   12830:	str	r4, [r3]
   12834:	movw	r2, #41452	; 0xa1ec
   12838:	movt	r2, #2
   1283c:	ldr	r6, [sp, #8]
   12840:	movw	r3, #41316	; 0xa164
   12844:	movt	r3, #2
   12848:	str	r4, [r2]
   1284c:	str	r4, [r3]
   12850:	ldrd	r4, [sp]
   12854:	add	sp, sp, #12
   12858:	pop	{pc}		; (ldr pc, [sp], #4)
   1285c:	movw	r3, #41328	; 0xa170
   12860:	movt	r3, #2
   12864:	movw	r0, #35832	; 0x8bf8
   12868:	movt	r0, #1
   1286c:	ldr	r3, [r3]
   12870:	mov	r2, #55	; 0x37
   12874:	mov	r1, #1
   12878:	bl	10fa8 <fwrite@plt>
   1287c:	bl	11158 <abort@plt>
   12880:	mov	r2, #5
   12884:	strd	r4, [sp, #-16]!
   12888:	mov	r5, r0
   1288c:	str	r6, [sp, #8]
   12890:	mov	r6, r1
   12894:	mov	r1, r0
   12898:	mov	r0, #0
   1289c:	str	lr, [sp, #12]
   128a0:	bl	10f60 <dcgettext@plt>
   128a4:	cmp	r5, r0
   128a8:	mov	r4, r0
   128ac:	beq	128c4 <__assert_fail@plt+0x1748>
   128b0:	mov	r0, r4
   128b4:	ldrd	r4, [sp]
   128b8:	ldr	r6, [sp, #8]
   128bc:	add	sp, sp, #12
   128c0:	pop	{pc}		; (ldr pc, [sp], #4)
   128c4:	bl	17d08 <__assert_fail@plt+0x6b8c>
   128c8:	ldrb	r3, [r0]
   128cc:	bic	r3, r3, #32
   128d0:	cmp	r3, #85	; 0x55
   128d4:	bne	1293c <__assert_fail@plt+0x17c0>
   128d8:	ldrb	r3, [r0, #1]
   128dc:	bic	r3, r3, #32
   128e0:	cmp	r3, #84	; 0x54
   128e4:	bne	129bc <__assert_fail@plt+0x1840>
   128e8:	ldrb	r3, [r0, #2]
   128ec:	bic	r3, r3, #32
   128f0:	cmp	r3, #70	; 0x46
   128f4:	bne	129bc <__assert_fail@plt+0x1840>
   128f8:	ldrb	r3, [r0, #3]
   128fc:	cmp	r3, #45	; 0x2d
   12900:	bne	129bc <__assert_fail@plt+0x1840>
   12904:	ldrb	r3, [r0, #4]
   12908:	cmp	r3, #56	; 0x38
   1290c:	bne	129bc <__assert_fail@plt+0x1840>
   12910:	ldrb	r3, [r0, #5]
   12914:	cmp	r3, #0
   12918:	bne	129bc <__assert_fail@plt+0x1840>
   1291c:	ldrb	r2, [r4]
   12920:	movw	r3, #35988	; 0x8c94
   12924:	movt	r3, #1
   12928:	movw	r4, #36000	; 0x8ca0
   1292c:	movt	r4, #1
   12930:	cmp	r2, #96	; 0x60
   12934:	movne	r4, r3
   12938:	b	128b0 <__assert_fail@plt+0x1734>
   1293c:	cmp	r3, #71	; 0x47
   12940:	bne	129bc <__assert_fail@plt+0x1840>
   12944:	ldrb	r3, [r0, #1]
   12948:	bic	r3, r3, #32
   1294c:	cmp	r3, #66	; 0x42
   12950:	bne	129bc <__assert_fail@plt+0x1840>
   12954:	ldrb	r3, [r0, #2]
   12958:	cmp	r3, #49	; 0x31
   1295c:	bne	129bc <__assert_fail@plt+0x1840>
   12960:	ldrb	r3, [r0, #3]
   12964:	cmp	r3, #56	; 0x38
   12968:	bne	129bc <__assert_fail@plt+0x1840>
   1296c:	ldrb	r3, [r0, #4]
   12970:	cmp	r3, #48	; 0x30
   12974:	bne	129bc <__assert_fail@plt+0x1840>
   12978:	ldrb	r3, [r0, #5]
   1297c:	cmp	r3, #51	; 0x33
   12980:	bne	129bc <__assert_fail@plt+0x1840>
   12984:	ldrb	r3, [r0, #6]
   12988:	cmp	r3, #48	; 0x30
   1298c:	bne	129bc <__assert_fail@plt+0x1840>
   12990:	ldrb	r3, [r0, #7]
   12994:	cmp	r3, #0
   12998:	bne	129bc <__assert_fail@plt+0x1840>
   1299c:	ldrb	r2, [r4]
   129a0:	movw	r3, #35992	; 0x8c98
   129a4:	movt	r3, #1
   129a8:	movw	r4, #35996	; 0x8c9c
   129ac:	movt	r4, #1
   129b0:	cmp	r2, #96	; 0x60
   129b4:	movne	r4, r3
   129b8:	b	128b0 <__assert_fail@plt+0x1734>
   129bc:	movw	r3, #36004	; 0x8ca4
   129c0:	movt	r3, #1
   129c4:	cmp	r6, #9
   129c8:	movw	r4, #35984	; 0x8c90
   129cc:	movt	r4, #1
   129d0:	movne	r4, r3
   129d4:	b	128b0 <__assert_fail@plt+0x1734>
   129d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129dc:	strd	r6, [sp, #8]
   129e0:	strd	r8, [sp, #16]
   129e4:	mov	r8, r3
   129e8:	strd	sl, [sp, #24]
   129ec:	mov	fp, r0
   129f0:	mov	sl, r1
   129f4:	str	lr, [sp, #32]
   129f8:	sub	sp, sp, #140	; 0x8c
   129fc:	ldr	r3, [sp, #180]	; 0xb4
   12a00:	str	r2, [sp, #28]
   12a04:	and	r4, r3, #2
   12a08:	ubfx	r3, r3, #1, #1
   12a0c:	str	r3, [sp, #44]	; 0x2c
   12a10:	bl	10fc0 <__ctype_get_mb_cur_max@plt>
   12a14:	ldr	r3, [sp, #176]	; 0xb0
   12a18:	str	r0, [sp, #76]	; 0x4c
   12a1c:	cmp	r3, #10
   12a20:	ldrls	pc, [pc, r3, lsl #2]
   12a24:	b	143c0 <__assert_fail@plt+0x3244>
   12a28:	andeq	r2, r1, r8, lsr #29
   12a2c:	andeq	r2, r1, r4, asr #31
   12a30:	andeq	r3, r1, r0, asr #10
   12a34:	andeq	r3, r1, r0, lsr r0
   12a38:			; <UNDEFINED> instruction: 0x00012db0
   12a3c:	andeq	r2, r1, ip, lsr #28
   12a40:	andeq	r2, r1, r4, lsl #30
   12a44:	andeq	r2, r1, ip, ror #30
   12a48:	andeq	r2, r1, r4, asr sl
   12a4c:	andeq	r2, r1, r4, asr sl
   12a50:	andeq	r2, r1, r4, asr sl
   12a54:	ldr	r3, [sp, #176]	; 0xb0
   12a58:	cmp	r3, #10
   12a5c:	beq	12a88 <__assert_fail@plt+0x190c>
   12a60:	mov	r1, r3
   12a64:	movw	r0, #36008	; 0x8ca8
   12a68:	movt	r0, #1
   12a6c:	bl	12880 <__assert_fail@plt+0x1704>
   12a70:	str	r0, [sp, #188]	; 0xbc
   12a74:	movw	r0, #36004	; 0x8ca4
   12a78:	movt	r0, #1
   12a7c:	ldr	r1, [sp, #176]	; 0xb0
   12a80:	bl	12880 <__assert_fail@plt+0x1704>
   12a84:	str	r0, [sp, #192]	; 0xc0
   12a88:	cmp	r4, #0
   12a8c:	movne	r4, #0
   12a90:	beq	1414c <__assert_fail@plt+0x2fd0>
   12a94:	mov	r5, #0
   12a98:	ldr	r0, [sp, #192]	; 0xc0
   12a9c:	mov	r9, r5
   12aa0:	str	r5, [sp, #64]	; 0x40
   12aa4:	bl	11068 <strlen@plt>
   12aa8:	mov	r3, #1
   12aac:	ldr	r2, [sp, #44]	; 0x2c
   12ab0:	cmp	r0, r5
   12ab4:	moveq	r2, r5
   12ab8:	str	r3, [sp, #32]
   12abc:	str	r3, [sp, #48]	; 0x30
   12ac0:	str	r5, [sp, #52]	; 0x34
   12ac4:	str	r3, [sp, #60]	; 0x3c
   12ac8:	ldr	r3, [sp, #180]	; 0xb4
   12acc:	str	r0, [sp, #56]	; 0x38
   12ad0:	str	r5, [sp, #68]	; 0x44
   12ad4:	str	r5, [sp, #80]	; 0x50
   12ad8:	str	r5, [sp, #84]	; 0x54
   12adc:	and	r3, r3, #1
   12ae0:	str	r2, [sp, #88]	; 0x58
   12ae4:	str	r3, [sp, #92]	; 0x5c
   12ae8:	ldr	r3, [sp, #180]	; 0xb4
   12aec:	and	r3, r3, #4
   12af0:	str	r3, [sp, #96]	; 0x60
   12af4:	ldr	r3, [sp, #192]	; 0xc0
   12af8:	str	r3, [sp, #72]	; 0x48
   12afc:	mov	r3, fp
   12b00:	mov	r7, #0
   12b04:	mov	fp, r9
   12b08:	mov	r9, r3
   12b0c:	cmn	r8, #1
   12b10:	beq	13114 <__assert_fail@plt+0x1f98>
   12b14:	subs	r6, r8, r7
   12b18:	movne	r6, #1
   12b1c:	cmp	r6, #0
   12b20:	beq	1312c <__assert_fail@plt+0x1fb0>
   12b24:	ldr	r0, [sp, #28]
   12b28:	ldr	r3, [sp, #48]	; 0x30
   12b2c:	cmp	r3, #0
   12b30:	add	r3, r0, r7
   12b34:	str	r3, [sp, #36]	; 0x24
   12b38:	beq	135b8 <__assert_fail@plt+0x243c>
   12b3c:	ldr	r2, [sp, #56]	; 0x38
   12b40:	cmp	r2, #0
   12b44:	beq	13ab8 <__assert_fail@plt+0x293c>
   12b48:	cmp	r2, #1
   12b4c:	mov	r3, r2
   12b50:	movls	r3, #0
   12b54:	movhi	r3, #1
   12b58:	cmn	r8, #1
   12b5c:	add	r5, r7, r2
   12b60:	movne	r3, #0
   12b64:	cmp	r3, #0
   12b68:	beq	12b74 <__assert_fail@plt+0x19f8>
   12b6c:	bl	11068 <strlen@plt>
   12b70:	mov	r8, r0
   12b74:	cmp	r5, r8
   12b78:	bhi	13ab8 <__assert_fail@plt+0x293c>
   12b7c:	ldr	r0, [sp, #36]	; 0x24
   12b80:	ldr	r2, [sp, #56]	; 0x38
   12b84:	ldr	r1, [sp, #72]	; 0x48
   12b88:	bl	10f48 <memcmp@plt>
   12b8c:	cmp	r0, #0
   12b90:	bne	13ab8 <__assert_fail@plt+0x293c>
   12b94:	ldr	r3, [sp, #44]	; 0x2c
   12b98:	cmp	r3, #0
   12b9c:	bne	14264 <__assert_fail@plt+0x30e8>
   12ba0:	ldr	r3, [sp, #36]	; 0x24
   12ba4:	ldrb	r5, [r3]
   12ba8:	cmp	r5, #126	; 0x7e
   12bac:	ldrls	pc, [pc, r5, lsl #2]
   12bb0:	b	1404c <__assert_fail@plt+0x2ed0>
   12bb4:	andeq	r3, r1, r8, lsl #5
   12bb8:	andeq	r4, r1, ip, asr #32
   12bbc:	andeq	r4, r1, ip, asr #32
   12bc0:	andeq	r4, r1, ip, asr #32
   12bc4:	andeq	r4, r1, ip, asr #32
   12bc8:	andeq	r4, r1, ip, asr #32
   12bcc:	andeq	r4, r1, ip, asr #32
   12bd0:	andeq	r3, r1, r0, ror #3
   12bd4:	ldrdeq	r3, [r1], -r8
   12bd8:	andeq	r3, r1, r8, ror #3
   12bdc:	andeq	r3, r1, ip, ror #6
   12be0:	andeq	r3, r1, ip, asr r3
   12be4:	andeq	r3, r1, r4, lsl #1
   12be8:	andeq	r3, r1, r8, lsr r3
   12bec:	andeq	r4, r1, ip, asr #32
   12bf0:	andeq	r4, r1, ip, asr #32
   12bf4:	andeq	r4, r1, ip, asr #32
   12bf8:	andeq	r4, r1, ip, asr #32
   12bfc:	andeq	r4, r1, ip, asr #32
   12c00:	andeq	r4, r1, ip, asr #32
   12c04:	andeq	r4, r1, ip, asr #32
   12c08:	andeq	r4, r1, ip, asr #32
   12c0c:	andeq	r4, r1, ip, asr #32
   12c10:	andeq	r4, r1, ip, asr #32
   12c14:	andeq	r4, r1, ip, asr #32
   12c18:	andeq	r4, r1, ip, asr #32
   12c1c:	andeq	r4, r1, ip, asr #32
   12c20:	andeq	r4, r1, ip, asr #32
   12c24:	andeq	r4, r1, ip, asr #32
   12c28:	andeq	r4, r1, ip, asr #32
   12c2c:	andeq	r4, r1, ip, asr #32
   12c30:	andeq	r4, r1, ip, asr #32
   12c34:	andeq	r3, r1, r4, ror #7
   12c38:	ldrdeq	r3, [r1], -r8
   12c3c:	ldrdeq	r3, [r1], -r8
   12c40:	andeq	r3, r1, ip, asr #7
   12c44:	ldrdeq	r3, [r1], -r8
   12c48:			; <UNDEFINED> instruction: 0x000134b0
   12c4c:	ldrdeq	r3, [r1], -r8
   12c50:	andeq	r3, r1, r0, lsr #10
   12c54:	ldrdeq	r3, [r1], -r8
   12c58:	ldrdeq	r3, [r1], -r8
   12c5c:	ldrdeq	r3, [r1], -r8
   12c60:			; <UNDEFINED> instruction: 0x000134b0
   12c64:			; <UNDEFINED> instruction: 0x000134b0
   12c68:			; <UNDEFINED> instruction: 0x000134b0
   12c6c:			; <UNDEFINED> instruction: 0x000134b0
   12c70:			; <UNDEFINED> instruction: 0x000134b0
   12c74:			; <UNDEFINED> instruction: 0x000134b0
   12c78:			; <UNDEFINED> instruction: 0x000134b0
   12c7c:			; <UNDEFINED> instruction: 0x000134b0
   12c80:			; <UNDEFINED> instruction: 0x000134b0
   12c84:			; <UNDEFINED> instruction: 0x000134b0
   12c88:			; <UNDEFINED> instruction: 0x000134b0
   12c8c:			; <UNDEFINED> instruction: 0x000134b0
   12c90:			; <UNDEFINED> instruction: 0x000134b0
   12c94:			; <UNDEFINED> instruction: 0x000134b0
   12c98:			; <UNDEFINED> instruction: 0x000134b0
   12c9c:			; <UNDEFINED> instruction: 0x000134b0
   12ca0:	ldrdeq	r3, [r1], -r8
   12ca4:	ldrdeq	r3, [r1], -r8
   12ca8:	ldrdeq	r3, [r1], -r8
   12cac:	ldrdeq	r3, [r1], -r8
   12cb0:	ldrdeq	r3, [r1], -r0
   12cb4:	andeq	r4, r1, ip, asr #32
   12cb8:			; <UNDEFINED> instruction: 0x000134b0
   12cbc:			; <UNDEFINED> instruction: 0x000134b0
   12cc0:			; <UNDEFINED> instruction: 0x000134b0
   12cc4:			; <UNDEFINED> instruction: 0x000134b0
   12cc8:			; <UNDEFINED> instruction: 0x000134b0
   12ccc:			; <UNDEFINED> instruction: 0x000134b0
   12cd0:			; <UNDEFINED> instruction: 0x000134b0
   12cd4:			; <UNDEFINED> instruction: 0x000134b0
   12cd8:			; <UNDEFINED> instruction: 0x000134b0
   12cdc:			; <UNDEFINED> instruction: 0x000134b0
   12ce0:			; <UNDEFINED> instruction: 0x000134b0
   12ce4:			; <UNDEFINED> instruction: 0x000134b0
   12ce8:			; <UNDEFINED> instruction: 0x000134b0
   12cec:			; <UNDEFINED> instruction: 0x000134b0
   12cf0:			; <UNDEFINED> instruction: 0x000134b0
   12cf4:			; <UNDEFINED> instruction: 0x000134b0
   12cf8:			; <UNDEFINED> instruction: 0x000134b0
   12cfc:			; <UNDEFINED> instruction: 0x000134b0
   12d00:			; <UNDEFINED> instruction: 0x000134b0
   12d04:			; <UNDEFINED> instruction: 0x000134b0
   12d08:			; <UNDEFINED> instruction: 0x000134b0
   12d0c:			; <UNDEFINED> instruction: 0x000134b0
   12d10:			; <UNDEFINED> instruction: 0x000134b0
   12d14:			; <UNDEFINED> instruction: 0x000134b0
   12d18:			; <UNDEFINED> instruction: 0x000134b0
   12d1c:			; <UNDEFINED> instruction: 0x000134b0
   12d20:	ldrdeq	r3, [r1], -r8
   12d24:	andeq	r3, r1, r4, ror r4
   12d28:			; <UNDEFINED> instruction: 0x000134b0
   12d2c:	ldrdeq	r3, [r1], -r8
   12d30:			; <UNDEFINED> instruction: 0x000134b0
   12d34:	ldrdeq	r3, [r1], -r8
   12d38:			; <UNDEFINED> instruction: 0x000134b0
   12d3c:			; <UNDEFINED> instruction: 0x000134b0
   12d40:			; <UNDEFINED> instruction: 0x000134b0
   12d44:			; <UNDEFINED> instruction: 0x000134b0
   12d48:			; <UNDEFINED> instruction: 0x000134b0
   12d4c:			; <UNDEFINED> instruction: 0x000134b0
   12d50:			; <UNDEFINED> instruction: 0x000134b0
   12d54:			; <UNDEFINED> instruction: 0x000134b0
   12d58:			; <UNDEFINED> instruction: 0x000134b0
   12d5c:			; <UNDEFINED> instruction: 0x000134b0
   12d60:			; <UNDEFINED> instruction: 0x000134b0
   12d64:			; <UNDEFINED> instruction: 0x000134b0
   12d68:			; <UNDEFINED> instruction: 0x000134b0
   12d6c:			; <UNDEFINED> instruction: 0x000134b0
   12d70:			; <UNDEFINED> instruction: 0x000134b0
   12d74:			; <UNDEFINED> instruction: 0x000134b0
   12d78:			; <UNDEFINED> instruction: 0x000134b0
   12d7c:			; <UNDEFINED> instruction: 0x000134b0
   12d80:			; <UNDEFINED> instruction: 0x000134b0
   12d84:			; <UNDEFINED> instruction: 0x000134b0
   12d88:			; <UNDEFINED> instruction: 0x000134b0
   12d8c:			; <UNDEFINED> instruction: 0x000134b0
   12d90:			; <UNDEFINED> instruction: 0x000134b0
   12d94:			; <UNDEFINED> instruction: 0x000134b0
   12d98:			; <UNDEFINED> instruction: 0x000134b0
   12d9c:			; <UNDEFINED> instruction: 0x000134b0
   12da0:	andeq	r3, r1, r0, lsl #7
   12da4:	ldrdeq	r3, [r1], -r8
   12da8:	andeq	r3, r1, r0, lsl #7
   12dac:	andeq	r3, r1, ip, asr #7
   12db0:	ldr	r3, [sp, #180]	; 0xb4
   12db4:	cmp	r4, #0
   12db8:	and	r3, r3, #1
   12dbc:	str	r3, [sp, #92]	; 0x5c
   12dc0:	ldr	r3, [sp, #180]	; 0xb4
   12dc4:	and	r3, r3, #4
   12dc8:	str	r3, [sp, #96]	; 0x60
   12dcc:	moveq	r3, #1
   12dd0:	streq	r3, [sp, #60]	; 0x3c
   12dd4:	beq	13564 <__assert_fail@plt+0x23e8>
   12dd8:	mov	r3, #0
   12ddc:	mov	r2, #1
   12de0:	mov	r4, r3
   12de4:	mov	r9, r3
   12de8:	str	r2, [sp, #32]
   12dec:	str	r2, [sp, #44]	; 0x2c
   12df0:	str	r3, [sp, #48]	; 0x30
   12df4:	str	r2, [sp, #52]	; 0x34
   12df8:	str	r2, [sp, #56]	; 0x38
   12dfc:	str	r3, [sp, #60]	; 0x3c
   12e00:	str	r2, [sp, #64]	; 0x40
   12e04:	str	r2, [sp, #68]	; 0x44
   12e08:	str	r3, [sp, #80]	; 0x50
   12e0c:	str	r3, [sp, #84]	; 0x54
   12e10:	str	r3, [sp, #88]	; 0x58
   12e14:	movw	r3, #36004	; 0x8ca4
   12e18:	movt	r3, #1
   12e1c:	str	r3, [sp, #72]	; 0x48
   12e20:	mov	r3, #2
   12e24:	str	r3, [sp, #176]	; 0xb0
   12e28:	b	12afc <__assert_fail@plt+0x1980>
   12e2c:	ldr	r3, [sp, #180]	; 0xb4
   12e30:	cmp	r4, #0
   12e34:	and	r3, r3, #1
   12e38:	str	r3, [sp, #92]	; 0x5c
   12e3c:	ldr	r3, [sp, #180]	; 0xb4
   12e40:	and	r3, r3, #4
   12e44:	str	r3, [sp, #96]	; 0x60
   12e48:	bne	1421c <__assert_fail@plt+0x30a0>
   12e4c:	cmp	sl, #0
   12e50:	beq	13fc8 <__assert_fail@plt+0x2e4c>
   12e54:	mov	r3, #34	; 0x22
   12e58:	mov	r2, r4
   12e5c:	mov	r1, #1
   12e60:	mov	r9, r2
   12e64:	strb	r3, [fp]
   12e68:	movw	r3, #35984	; 0x8c90
   12e6c:	movt	r3, #1
   12e70:	mov	r4, r1
   12e74:	str	r1, [sp, #32]
   12e78:	str	r2, [sp, #44]	; 0x2c
   12e7c:	str	r1, [sp, #48]	; 0x30
   12e80:	str	r2, [sp, #52]	; 0x34
   12e84:	str	r1, [sp, #56]	; 0x38
   12e88:	str	r1, [sp, #60]	; 0x3c
   12e8c:	str	r2, [sp, #64]	; 0x40
   12e90:	str	r2, [sp, #68]	; 0x44
   12e94:	str	r3, [sp, #72]	; 0x48
   12e98:	str	r2, [sp, #80]	; 0x50
   12e9c:	str	r2, [sp, #84]	; 0x54
   12ea0:	str	r2, [sp, #88]	; 0x58
   12ea4:	b	12afc <__assert_fail@plt+0x1980>
   12ea8:	mov	r3, #0
   12eac:	mov	r2, #1
   12eb0:	mov	r9, r3
   12eb4:	str	r2, [sp, #32]
   12eb8:	str	r3, [sp, #44]	; 0x2c
   12ebc:	str	r3, [sp, #48]	; 0x30
   12ec0:	str	r3, [sp, #52]	; 0x34
   12ec4:	str	r3, [sp, #60]	; 0x3c
   12ec8:	strd	r2, [sp, #64]	; 0x40
   12ecc:	str	r3, [sp, #72]	; 0x48
   12ed0:	str	r3, [sp, #80]	; 0x50
   12ed4:	str	r3, [sp, #88]	; 0x58
   12ed8:	ldr	r3, [sp, #180]	; 0xb4
   12edc:	and	r3, r3, r2
   12ee0:	str	r3, [sp, #92]	; 0x5c
   12ee4:	ldr	r3, [sp, #180]	; 0xb4
   12ee8:	and	r3, r3, #4
   12eec:	str	r3, [sp, #96]	; 0x60
   12ef0:	ldr	r3, [sp, #176]	; 0xb0
   12ef4:	mov	r4, r3
   12ef8:	str	r3, [sp, #56]	; 0x38
   12efc:	str	r3, [sp, #84]	; 0x54
   12f00:	b	12afc <__assert_fail@plt+0x1980>
   12f04:	mov	r3, #1
   12f08:	mov	r4, #0
   12f0c:	mov	r9, r4
   12f10:	str	r3, [sp, #32]
   12f14:	str	r3, [sp, #44]	; 0x2c
   12f18:	str	r3, [sp, #48]	; 0x30
   12f1c:	str	r4, [sp, #52]	; 0x34
   12f20:	str	r3, [sp, #56]	; 0x38
   12f24:	str	r3, [sp, #60]	; 0x3c
   12f28:	str	r3, [sp, #88]	; 0x58
   12f2c:	movw	r3, #35984	; 0x8c90
   12f30:	movt	r3, #1
   12f34:	str	r4, [sp, #64]	; 0x40
   12f38:	str	r4, [sp, #68]	; 0x44
   12f3c:	str	r3, [sp, #72]	; 0x48
   12f40:	ldr	r3, [sp, #180]	; 0xb4
   12f44:	str	r4, [sp, #80]	; 0x50
   12f48:	str	r4, [sp, #84]	; 0x54
   12f4c:	and	r3, r3, #1
   12f50:	str	r3, [sp, #92]	; 0x5c
   12f54:	ldr	r3, [sp, #180]	; 0xb4
   12f58:	and	r3, r3, #4
   12f5c:	str	r3, [sp, #96]	; 0x60
   12f60:	mov	r3, #5
   12f64:	str	r3, [sp, #176]	; 0xb0
   12f68:	b	12afc <__assert_fail@plt+0x1980>
   12f6c:	mov	r3, #1
   12f70:	mov	r4, #0
   12f74:	mov	r9, r4
   12f78:	str	r3, [sp, #32]
   12f7c:	str	r4, [sp, #44]	; 0x2c
   12f80:	str	r3, [sp, #48]	; 0x30
   12f84:	str	r3, [sp, #60]	; 0x3c
   12f88:	ldr	r3, [sp, #180]	; 0xb4
   12f8c:	str	r4, [sp, #52]	; 0x34
   12f90:	str	r4, [sp, #56]	; 0x38
   12f94:	str	r4, [sp, #64]	; 0x40
   12f98:	str	r4, [sp, #68]	; 0x44
   12f9c:	and	r3, r3, #1
   12fa0:	str	r4, [sp, #72]	; 0x48
   12fa4:	str	r4, [sp, #80]	; 0x50
   12fa8:	str	r4, [sp, #84]	; 0x54
   12fac:	str	r3, [sp, #92]	; 0x5c
   12fb0:	ldr	r3, [sp, #180]	; 0xb4
   12fb4:	str	r4, [sp, #88]	; 0x58
   12fb8:	and	r3, r3, #4
   12fbc:	str	r3, [sp, #96]	; 0x60
   12fc0:	b	12afc <__assert_fail@plt+0x1980>
   12fc4:	mov	r3, #0
   12fc8:	mov	r2, #1
   12fcc:	ldr	r1, [sp, #176]	; 0xb0
   12fd0:	mov	r4, r3
   12fd4:	mov	r9, r3
   12fd8:	movw	r3, #36004	; 0x8ca4
   12fdc:	movt	r3, #1
   12fe0:	str	r2, [sp, #32]
   12fe4:	str	r2, [sp, #44]	; 0x2c
   12fe8:	str	r4, [sp, #48]	; 0x30
   12fec:	strd	r2, [sp, #68]	; 0x44
   12ff0:	ldr	r3, [sp, #180]	; 0xb4
   12ff4:	str	r2, [sp, #52]	; 0x34
   12ff8:	str	r1, [sp, #56]	; 0x38
   12ffc:	str	r4, [sp, #60]	; 0x3c
   13000:	str	r2, [sp, #64]	; 0x40
   13004:	and	r3, r3, r2
   13008:	str	r4, [sp, #80]	; 0x50
   1300c:	str	r4, [sp, #84]	; 0x54
   13010:	str	r4, [sp, #88]	; 0x58
   13014:	str	r3, [sp, #92]	; 0x5c
   13018:	ldr	r3, [sp, #180]	; 0xb4
   1301c:	and	r3, r3, #4
   13020:	str	r3, [sp, #96]	; 0x60
   13024:	mov	r3, #2
   13028:	str	r3, [sp, #176]	; 0xb0
   1302c:	b	12afc <__assert_fail@plt+0x1980>
   13030:	mov	r3, #1
   13034:	mov	r2, #0
   13038:	mov	r4, r2
   1303c:	mov	r9, r2
   13040:	str	r3, [sp, #32]
   13044:	str	r3, [sp, #44]	; 0x2c
   13048:	str	r2, [sp, #48]	; 0x30
   1304c:	str	r3, [sp, #52]	; 0x34
   13050:	str	r3, [sp, #56]	; 0x38
   13054:	str	r3, [sp, #60]	; 0x3c
   13058:	str	r3, [sp, #64]	; 0x40
   1305c:	str	r3, [sp, #68]	; 0x44
   13060:	str	r3, [sp, #88]	; 0x58
   13064:	movw	r3, #36004	; 0x8ca4
   13068:	movt	r3, #1
   1306c:	str	r3, [sp, #72]	; 0x48
   13070:	ldr	r3, [sp, #180]	; 0xb4
   13074:	str	r2, [sp, #80]	; 0x50
   13078:	str	r2, [sp, #84]	; 0x54
   1307c:	and	r3, r3, #1
   13080:	b	13014 <__assert_fail@plt+0x1e98>
   13084:	mov	r5, #102	; 0x66
   13088:	mov	r6, #0
   1308c:	ldr	r3, [sp, #44]	; 0x2c
   13090:	cmp	r3, #0
   13094:	bne	13f44 <__assert_fail@plt+0x2dc8>
   13098:	ldr	r2, [sp, #52]	; 0x34
   1309c:	eor	r3, fp, #1
   130a0:	ands	r3, r2, r3
   130a4:	beq	130dc <__assert_fail@plt+0x1f60>
   130a8:	cmp	sl, r4
   130ac:	mov	fp, r3
   130b0:	movhi	r2, #39	; 0x27
   130b4:	strbhi	r2, [r9, r4]
   130b8:	add	r2, r4, #1
   130bc:	cmp	sl, r2
   130c0:	movhi	r1, #36	; 0x24
   130c4:	strbhi	r1, [r9, r2]
   130c8:	add	r2, r4, #2
   130cc:	add	r4, r4, #3
   130d0:	cmp	sl, r2
   130d4:	movhi	r1, #39	; 0x27
   130d8:	strbhi	r1, [r9, r2]
   130dc:	cmp	sl, r4
   130e0:	add	r7, r7, #1
   130e4:	movhi	r3, #92	; 0x5c
   130e8:	strbhi	r3, [r9, r4]
   130ec:	add	r4, r4, #1
   130f0:	cmp	r4, sl
   130f4:	ldr	r3, [sp, #32]
   130f8:	strbcc	r5, [r9, r4]
   130fc:	cmp	r6, #0
   13100:	add	r4, r4, #1
   13104:	moveq	r3, #0
   13108:	cmn	r8, #1
   1310c:	str	r3, [sp, #32]
   13110:	bne	12b14 <__assert_fail@plt+0x1998>
   13114:	ldr	r3, [sp, #28]
   13118:	ldrb	r6, [r3, r7]
   1311c:	adds	r6, r6, #0
   13120:	movne	r6, #1
   13124:	cmp	r6, #0
   13128:	bne	12b24 <__assert_fail@plt+0x19a8>
   1312c:	mov	r3, r9
   13130:	mov	r9, fp
   13134:	mov	fp, r3
   13138:	ldr	r3, [sp, #68]	; 0x44
   1313c:	cmp	r4, #0
   13140:	movne	r3, #0
   13144:	cmp	r3, #0
   13148:	bne	1433c <__assert_fail@plt+0x31c0>
   1314c:	ldr	r3, [sp, #44]	; 0x2c
   13150:	ldr	r2, [sp, #52]	; 0x34
   13154:	eor	r3, r3, #1
   13158:	ands	r2, r3, r2
   1315c:	beq	14274 <__assert_fail@plt+0x30f8>
   13160:	ldr	r3, [sp, #80]	; 0x50
   13164:	cmp	r3, #0
   13168:	beq	14278 <__assert_fail@plt+0x30fc>
   1316c:	ldr	r3, [sp, #32]
   13170:	cmp	r3, #0
   13174:	bne	142ec <__assert_fail@plt+0x3170>
   13178:	ldr	r3, [sp, #84]	; 0x54
   1317c:	adds	r3, r3, #0
   13180:	movne	r3, #1
   13184:	cmp	sl, #0
   13188:	movne	r3, #0
   1318c:	cmp	r3, #0
   13190:	ldreq	r2, [sp, #80]	; 0x50
   13194:	beq	14278 <__assert_fail@plt+0x30fc>
   13198:	ldr	r2, [sp, #84]	; 0x54
   1319c:	mov	sl, r2
   131a0:	mov	r0, #0
   131a4:	mov	r4, #1
   131a8:	mov	r1, #39	; 0x27
   131ac:	str	r0, [sp, #44]	; 0x2c
   131b0:	strb	r1, [fp]
   131b4:	str	r0, [sp, #48]	; 0x30
   131b8:	str	r4, [sp, #52]	; 0x34
   131bc:	str	r4, [sp, #56]	; 0x38
   131c0:	str	r4, [sp, #64]	; 0x40
   131c4:	str	r0, [sp, #68]	; 0x44
   131c8:	str	r3, [sp, #80]	; 0x50
   131cc:	str	r2, [sp, #84]	; 0x54
   131d0:	str	r0, [sp, #88]	; 0x58
   131d4:	b	12e14 <__assert_fail@plt+0x1c98>
   131d8:	mov	r5, #98	; 0x62
   131dc:	b	13088 <__assert_fail@plt+0x1f0c>
   131e0:	mov	r5, #97	; 0x61
   131e4:	b	13088 <__assert_fail@plt+0x1f0c>
   131e8:	ldr	r3, [sp, #48]	; 0x30
   131ec:	str	r3, [sp, #40]	; 0x28
   131f0:	mov	r3, #116	; 0x74
   131f4:	ldr	r2, [sp, #68]	; 0x44
   131f8:	cmp	r2, #0
   131fc:	bne	133f8 <__assert_fail@plt+0x227c>
   13200:	ldr	r2, [sp, #60]	; 0x3c
   13204:	cmp	r2, #0
   13208:	bne	13354 <__assert_fail@plt+0x21d8>
   1320c:	ldr	r3, [sp, #44]	; 0x2c
   13210:	mov	r6, #0
   13214:	cmp	r3, #0
   13218:	beq	133c4 <__assert_fail@plt+0x2248>
   1321c:	mov	r3, fp
   13220:	ldr	r2, [sp, #184]	; 0xb8
   13224:	cmp	r2, #0
   13228:	beq	13248 <__assert_fail@plt+0x20cc>
   1322c:	ubfx	r1, r5, #5, #8
   13230:	mov	r0, r2
   13234:	and	r2, r5, #31
   13238:	ldr	r1, [r0, r1, lsl #2]
   1323c:	lsr	r2, r1, r2
   13240:	tst	r2, #1
   13244:	bne	1308c <__assert_fail@plt+0x1f10>
   13248:	ldr	r2, [sp, #40]	; 0x28
   1324c:	cmp	r2, #0
   13250:	addeq	r7, r7, #1
   13254:	bne	1308c <__assert_fail@plt+0x1f10>
   13258:	cmp	r3, #0
   1325c:	beq	130f0 <__assert_fail@plt+0x1f74>
   13260:	cmp	sl, r4
   13264:	mov	fp, #0
   13268:	movhi	r3, #39	; 0x27
   1326c:	strbhi	r3, [r9, r4]
   13270:	add	r3, r4, #1
   13274:	add	r4, r4, #2
   13278:	cmp	sl, r3
   1327c:	movhi	r2, #39	; 0x27
   13280:	strbhi	r2, [r9, r3]
   13284:	b	130f0 <__assert_fail@plt+0x1f74>
   13288:	ldr	r3, [sp, #48]	; 0x30
   1328c:	str	r3, [sp, #40]	; 0x28
   13290:	eor	r3, fp, #1
   13294:	ldr	r2, [sp, #52]	; 0x34
   13298:	ands	r2, r2, r3
   1329c:	beq	13f5c <__assert_fail@plt+0x2de0>
   132a0:	cmp	sl, r4
   132a4:	movhi	r3, #39	; 0x27
   132a8:	strbhi	r3, [r9, r4]
   132ac:	add	r3, r4, #1
   132b0:	cmp	sl, r3
   132b4:	movhi	r1, #36	; 0x24
   132b8:	strbhi	r1, [r9, r3]
   132bc:	add	r3, r4, #2
   132c0:	cmp	sl, r3
   132c4:	movhi	r1, #39	; 0x27
   132c8:	strbhi	r1, [r9, r3]
   132cc:	add	r3, r4, #3
   132d0:	cmp	sl, r3
   132d4:	bls	13fa8 <__assert_fail@plt+0x2e2c>
   132d8:	mov	r4, r3
   132dc:	mov	r3, #92	; 0x5c
   132e0:	mov	fp, r2
   132e4:	mov	r2, r4
   132e8:	strb	r3, [r9, r4]
   132ec:	ldr	r3, [sp, #176]	; 0xb0
   132f0:	add	r4, r4, #1
   132f4:	cmp	r3, #2
   132f8:	beq	14010 <__assert_fail@plt+0x2e94>
   132fc:	add	r3, r7, #1
   13300:	cmp	r3, r8
   13304:	bcs	1331c <__assert_fail@plt+0x21a0>
   13308:	ldr	r1, [sp, #28]
   1330c:	ldrb	r3, [r1, r3]
   13310:	sub	r3, r3, #48	; 0x30
   13314:	cmp	r3, #9
   13318:	bls	14020 <__assert_fail@plt+0x2ea4>
   1331c:	mov	r3, #0
   13320:	mov	r5, #48	; 0x30
   13324:	ldr	r6, [sp, #64]	; 0x40
   13328:	cmp	r6, #0
   1332c:	beq	13220 <__assert_fail@plt+0x20a4>
   13330:	mov	r6, #0
   13334:	b	13248 <__assert_fail@plt+0x20cc>
   13338:	ldr	r3, [sp, #48]	; 0x30
   1333c:	str	r3, [sp, #40]	; 0x28
   13340:	ldr	r2, [sp, #60]	; 0x3c
   13344:	mov	r5, #13
   13348:	mov	r3, #114	; 0x72
   1334c:	cmp	r2, #0
   13350:	beq	1320c <__assert_fail@plt+0x2090>
   13354:	mov	r5, r3
   13358:	b	13088 <__assert_fail@plt+0x1f0c>
   1335c:	ldr	r3, [sp, #48]	; 0x30
   13360:	str	r3, [sp, #40]	; 0x28
   13364:	mov	r3, #118	; 0x76
   13368:	b	13200 <__assert_fail@plt+0x2084>
   1336c:	ldr	r3, [sp, #48]	; 0x30
   13370:	str	r3, [sp, #40]	; 0x28
   13374:	mov	r5, #10
   13378:	mov	r3, #110	; 0x6e
   1337c:	b	13200 <__assert_fail@plt+0x2084>
   13380:	ldr	r3, [sp, #48]	; 0x30
   13384:	cmn	r8, #1
   13388:	str	r3, [sp, #40]	; 0x28
   1338c:	beq	137d4 <__assert_fail@plt+0x2658>
   13390:	subs	r3, r8, #1
   13394:	movne	r3, #1
   13398:	cmp	r3, #0
   1339c:	bne	133a8 <__assert_fail@plt+0x222c>
   133a0:	cmp	r7, #0
   133a4:	beq	133ec <__assert_fail@plt+0x2270>
   133a8:	mov	r6, #0
   133ac:	ldr	r3, [sp, #64]	; 0x40
   133b0:	cmp	r3, #0
   133b4:	beq	1321c <__assert_fail@plt+0x20a0>
   133b8:	ldr	r3, [sp, #44]	; 0x2c
   133bc:	cmp	r3, #0
   133c0:	bne	1321c <__assert_fail@plt+0x20a0>
   133c4:	mov	r3, fp
   133c8:	b	13248 <__assert_fail@plt+0x20cc>
   133cc:	ldr	r3, [sp, #48]	; 0x30
   133d0:	str	r3, [sp, #40]	; 0x28
   133d4:	b	133a0 <__assert_fail@plt+0x2224>
   133d8:	ldr	r3, [sp, #48]	; 0x30
   133dc:	str	r3, [sp, #40]	; 0x28
   133e0:	b	133a8 <__assert_fail@plt+0x222c>
   133e4:	ldr	r6, [sp, #48]	; 0x30
   133e8:	str	r6, [sp, #40]	; 0x28
   133ec:	ldr	r3, [sp, #68]	; 0x44
   133f0:	cmp	r3, #0
   133f4:	beq	133ac <__assert_fail@plt+0x2230>
   133f8:	mov	r3, #2
   133fc:	mov	fp, r9
   13400:	str	r3, [sp, #176]	; 0xb0
   13404:	ldr	r3, [sp, #60]	; 0x3c
   13408:	cmp	r3, #0
   1340c:	ldr	r3, [sp, #176]	; 0xb0
   13410:	movne	r3, #4
   13414:	str	r3, [sp, #176]	; 0xb0
   13418:	mov	lr, #0
   1341c:	mov	r0, fp
   13420:	ldr	r2, [sp, #28]
   13424:	ldr	r3, [sp, #180]	; 0xb4
   13428:	ldr	r1, [sp, #188]	; 0xbc
   1342c:	bic	ip, r3, #2
   13430:	ldr	r3, [sp, #176]	; 0xb0
   13434:	stm	sp, {r3, ip, lr}
   13438:	mov	r3, r8
   1343c:	ldr	ip, [sp, #192]	; 0xc0
   13440:	str	r1, [sp, #12]
   13444:	mov	r1, sl
   13448:	str	ip, [sp, #16]
   1344c:	bl	129d8 <__assert_fail@plt+0x185c>
   13450:	mov	r4, r0
   13454:	mov	r0, r4
   13458:	add	sp, sp, #140	; 0x8c
   1345c:	ldrd	r4, [sp]
   13460:	ldrd	r6, [sp, #8]
   13464:	ldrd	r8, [sp, #16]
   13468:	ldrd	sl, [sp, #24]
   1346c:	add	sp, sp, #32
   13470:	pop	{pc}		; (ldr pc, [sp], #4)
   13474:	ldr	r3, [sp, #48]	; 0x30
   13478:	str	r3, [sp, #40]	; 0x28
   1347c:	ldr	r3, [sp, #176]	; 0xb0
   13480:	cmp	r3, #2
   13484:	beq	137fc <__assert_fail@plt+0x2680>
   13488:	ldr	r3, [sp, #88]	; 0x58
   1348c:	cmp	r3, #0
   13490:	moveq	r5, #92	; 0x5c
   13494:	moveq	r3, r5
   13498:	beq	13200 <__assert_fail@plt+0x2084>
   1349c:	add	r7, r7, #1
   134a0:	mov	r3, fp
   134a4:	mov	r6, #0
   134a8:	mov	r5, #92	; 0x5c
   134ac:	b	13258 <__assert_fail@plt+0x20dc>
   134b0:	ldr	r3, [sp, #64]	; 0x40
   134b4:	cmp	r3, #0
   134b8:	bne	14330 <__assert_fail@plt+0x31b4>
   134bc:	ldr	r2, [sp, #48]	; 0x30
   134c0:	mov	r3, fp
   134c4:	mov	r6, r2
   134c8:	str	r2, [sp, #40]	; 0x28
   134cc:	b	13220 <__assert_fail@plt+0x20a4>
   134d0:	ldr	r3, [sp, #176]	; 0xb0
   134d4:	cmp	r3, #2
   134d8:	beq	1426c <__assert_fail@plt+0x30f0>
   134dc:	cmp	r3, #5
   134e0:	ldr	r3, [sp, #48]	; 0x30
   134e4:	str	r3, [sp, #40]	; 0x28
   134e8:	bne	13514 <__assert_fail@plt+0x2398>
   134ec:	ldr	r3, [sp, #96]	; 0x60
   134f0:	cmp	r3, #0
   134f4:	beq	13f70 <__assert_fail@plt+0x2df4>
   134f8:	add	r3, r7, #2
   134fc:	cmp	r3, r8
   13500:	bcs	13514 <__assert_fail@plt+0x2398>
   13504:	ldr	r2, [sp, #36]	; 0x24
   13508:	ldrb	r5, [r2, #1]
   1350c:	cmp	r5, #63	; 0x3f
   13510:	beq	14058 <__assert_fail@plt+0x2edc>
   13514:	mov	r6, #0
   13518:	mov	r5, #63	; 0x3f
   1351c:	b	133ac <__assert_fail@plt+0x2230>
   13520:	ldr	r3, [sp, #176]	; 0xb0
   13524:	cmp	r3, #2
   13528:	ldr	r3, [sp, #48]	; 0x30
   1352c:	beq	13d14 <__assert_fail@plt+0x2b98>
   13530:	mov	r5, #39	; 0x27
   13534:	str	r3, [sp, #40]	; 0x28
   13538:	str	r6, [sp, #80]	; 0x50
   1353c:	b	133ac <__assert_fail@plt+0x2230>
   13540:	ldr	r3, [sp, #180]	; 0xb4
   13544:	cmp	r4, #0
   13548:	and	r3, r3, #1
   1354c:	str	r3, [sp, #92]	; 0x5c
   13550:	ldr	r3, [sp, #180]	; 0xb4
   13554:	and	r3, r3, #4
   13558:	str	r3, [sp, #96]	; 0x60
   1355c:	bne	1437c <__assert_fail@plt+0x3200>
   13560:	str	r4, [sp, #60]	; 0x3c
   13564:	cmp	sl, #0
   13568:	bne	14360 <__assert_fail@plt+0x31e4>
   1356c:	mov	r3, #1
   13570:	movw	r2, #36004	; 0x8ca4
   13574:	movt	r2, #1
   13578:	mov	r4, r3
   1357c:	mov	r3, #2
   13580:	mov	r9, sl
   13584:	str	r4, [sp, #32]
   13588:	str	sl, [sp, #44]	; 0x2c
   1358c:	str	sl, [sp, #48]	; 0x30
   13590:	str	r4, [sp, #52]	; 0x34
   13594:	str	r4, [sp, #56]	; 0x38
   13598:	str	r4, [sp, #64]	; 0x40
   1359c:	str	sl, [sp, #68]	; 0x44
   135a0:	str	r2, [sp, #72]	; 0x48
   135a4:	str	sl, [sp, #80]	; 0x50
   135a8:	str	sl, [sp, #84]	; 0x54
   135ac:	str	sl, [sp, #88]	; 0x58
   135b0:	str	r3, [sp, #176]	; 0xb0
   135b4:	b	12afc <__assert_fail@plt+0x1980>
   135b8:	ldrb	r5, [r0, r7]
   135bc:	cmp	r5, #126	; 0x7e
   135c0:	ldrls	pc, [pc, r5, lsl #2]
   135c4:	b	13928 <__assert_fail@plt+0x27ac>
   135c8:	strdeq	r3, [r1], -r4
   135cc:	andeq	r3, r1, r8, lsr #18
   135d0:	andeq	r3, r1, r8, lsr #18
   135d4:	andeq	r3, r1, r8, lsr #18
   135d8:	andeq	r3, r1, r8, lsr #18
   135dc:	andeq	r3, r1, r8, lsr #18
   135e0:	andeq	r3, r1, r8, lsr #18
   135e4:	andeq	r3, r1, r4, ror #17
   135e8:	ldrdeq	r3, [r1], -r4
   135ec:	andeq	r3, r1, r8, asr r8
   135f0:	andeq	r3, r1, r4, asr #17
   135f4:	andeq	r3, r1, r8, lsr r8
   135f8:	andeq	r3, r1, r8, lsl r9
   135fc:	andeq	r3, r1, r4, lsr #17
   13600:	andeq	r3, r1, r8, lsr #18
   13604:	andeq	r3, r1, r8, lsr #18
   13608:	andeq	r3, r1, r8, lsr #18
   1360c:	andeq	r3, r1, r8, lsr #18
   13610:	andeq	r3, r1, r8, lsr #18
   13614:	andeq	r3, r1, r8, lsr #18
   13618:	andeq	r3, r1, r8, lsr #18
   1361c:	andeq	r3, r1, r8, lsr #18
   13620:	andeq	r3, r1, r8, lsr #18
   13624:	andeq	r3, r1, r8, lsr #18
   13628:	andeq	r3, r1, r8, lsr #18
   1362c:	andeq	r3, r1, r8, lsr #18
   13630:	andeq	r3, r1, r8, lsr #18
   13634:	andeq	r3, r1, r8, lsr #18
   13638:	andeq	r3, r1, r8, lsr #18
   1363c:	andeq	r3, r1, r8, lsr #18
   13640:	andeq	r3, r1, r8, lsr #18
   13644:	andeq	r3, r1, r8, lsr #18
   13648:	andeq	r3, r1, ip, asr #16
   1364c:			; <UNDEFINED> instruction: 0x000138b4
   13650:			; <UNDEFINED> instruction: 0x000138b4
   13654:	andeq	r3, r1, ip, lsr #16
   13658:			; <UNDEFINED> instruction: 0x000138b4
   1365c:	andeq	r3, r1, r0, lsr #16
   13660:			; <UNDEFINED> instruction: 0x000138b4
   13664:	muleq	r1, r0, r8
   13668:			; <UNDEFINED> instruction: 0x000138b4
   1366c:			; <UNDEFINED> instruction: 0x000138b4
   13670:			; <UNDEFINED> instruction: 0x000138b4
   13674:	andeq	r3, r1, r0, lsr #16
   13678:	andeq	r3, r1, r0, lsr #16
   1367c:	andeq	r3, r1, r0, lsr #16
   13680:	andeq	r3, r1, r0, lsr #16
   13684:	andeq	r3, r1, r0, lsr #16
   13688:	andeq	r3, r1, r0, lsr #16
   1368c:	andeq	r3, r1, r0, lsr #16
   13690:	andeq	r3, r1, r0, lsr #16
   13694:	andeq	r3, r1, r0, lsr #16
   13698:	andeq	r3, r1, r0, lsr #16
   1369c:	andeq	r3, r1, r0, lsr #16
   136a0:	andeq	r3, r1, r0, lsr #16
   136a4:	andeq	r3, r1, r0, lsr #16
   136a8:	andeq	r3, r1, r0, lsr #16
   136ac:	andeq	r3, r1, r0, lsr #16
   136b0:	andeq	r3, r1, r0, lsr #16
   136b4:			; <UNDEFINED> instruction: 0x000138b4
   136b8:			; <UNDEFINED> instruction: 0x000138b4
   136bc:			; <UNDEFINED> instruction: 0x000138b4
   136c0:			; <UNDEFINED> instruction: 0x000138b4
   136c4:	andeq	r3, r1, r8, ror #16
   136c8:	andeq	r3, r1, r8, lsr #18
   136cc:	andeq	r3, r1, r0, lsr #16
   136d0:	andeq	r3, r1, r0, lsr #16
   136d4:	andeq	r3, r1, r0, lsr #16
   136d8:	andeq	r3, r1, r0, lsr #16
   136dc:	andeq	r3, r1, r0, lsr #16
   136e0:	andeq	r3, r1, r0, lsr #16
   136e4:	andeq	r3, r1, r0, lsr #16
   136e8:	andeq	r3, r1, r0, lsr #16
   136ec:	andeq	r3, r1, r0, lsr #16
   136f0:	andeq	r3, r1, r0, lsr #16
   136f4:	andeq	r3, r1, r0, lsr #16
   136f8:	andeq	r3, r1, r0, lsr #16
   136fc:	andeq	r3, r1, r0, lsr #16
   13700:	andeq	r3, r1, r0, lsr #16
   13704:	andeq	r3, r1, r0, lsr #16
   13708:	andeq	r3, r1, r0, lsr #16
   1370c:	andeq	r3, r1, r0, lsr #16
   13710:	andeq	r3, r1, r0, lsr #16
   13714:	andeq	r3, r1, r0, lsr #16
   13718:	andeq	r3, r1, r0, lsr #16
   1371c:	andeq	r3, r1, r0, lsr #16
   13720:	andeq	r3, r1, r0, lsr #16
   13724:	andeq	r3, r1, r0, lsr #16
   13728:	andeq	r3, r1, r0, lsr #16
   1372c:	andeq	r3, r1, r0, lsr #16
   13730:	andeq	r3, r1, r0, lsr #16
   13734:			; <UNDEFINED> instruction: 0x000138b4
   13738:	andeq	r3, r1, r8, ror #15
   1373c:	andeq	r3, r1, r0, lsr #16
   13740:			; <UNDEFINED> instruction: 0x000138b4
   13744:	andeq	r3, r1, r0, lsr #16
   13748:			; <UNDEFINED> instruction: 0x000138b4
   1374c:	andeq	r3, r1, r0, lsr #16
   13750:	andeq	r3, r1, r0, lsr #16
   13754:	andeq	r3, r1, r0, lsr #16
   13758:	andeq	r3, r1, r0, lsr #16
   1375c:	andeq	r3, r1, r0, lsr #16
   13760:	andeq	r3, r1, r0, lsr #16
   13764:	andeq	r3, r1, r0, lsr #16
   13768:	andeq	r3, r1, r0, lsr #16
   1376c:	andeq	r3, r1, r0, lsr #16
   13770:	andeq	r3, r1, r0, lsr #16
   13774:	andeq	r3, r1, r0, lsr #16
   13778:	andeq	r3, r1, r0, lsr #16
   1377c:	andeq	r3, r1, r0, lsr #16
   13780:	andeq	r3, r1, r0, lsr #16
   13784:	andeq	r3, r1, r0, lsr #16
   13788:	andeq	r3, r1, r0, lsr #16
   1378c:	andeq	r3, r1, r0, lsr #16
   13790:	andeq	r3, r1, r0, lsr #16
   13794:	andeq	r3, r1, r0, lsr #16
   13798:	andeq	r3, r1, r0, lsr #16
   1379c:	andeq	r3, r1, r0, lsr #16
   137a0:	andeq	r3, r1, r0, lsr #16
   137a4:	andeq	r3, r1, r0, lsr #16
   137a8:	andeq	r3, r1, r0, lsr #16
   137ac:	andeq	r3, r1, r0, lsr #16
   137b0:	andeq	r3, r1, r0, lsr #16
   137b4:	andeq	r3, r1, r4, asr #15
   137b8:			; <UNDEFINED> instruction: 0x000138b4
   137bc:	andeq	r3, r1, r4, asr #15
   137c0:	andeq	r3, r1, ip, lsr #16
   137c4:	mov	r3, #0
   137c8:	cmn	r8, #1
   137cc:	str	r3, [sp, #40]	; 0x28
   137d0:	bne	13390 <__assert_fail@plt+0x2214>
   137d4:	ldr	r3, [sp, #28]
   137d8:	ldrb	r3, [r3, #1]
   137dc:	adds	r3, r3, #0
   137e0:	movne	r3, #1
   137e4:	b	13398 <__assert_fail@plt+0x221c>
   137e8:	mov	r3, #0
   137ec:	str	r3, [sp, #40]	; 0x28
   137f0:	ldr	r3, [sp, #176]	; 0xb0
   137f4:	cmp	r3, #2
   137f8:	bne	13488 <__assert_fail@plt+0x230c>
   137fc:	ldr	r3, [sp, #44]	; 0x2c
   13800:	cmp	r3, #0
   13804:	bne	14144 <__assert_fail@plt+0x2fc8>
   13808:	mov	r6, r3
   1380c:	add	r7, r7, #1
   13810:	mov	r3, fp
   13814:	mov	r5, #92	; 0x5c
   13818:	b	13258 <__assert_fail@plt+0x20dc>
   1381c:	ldr	r6, [sp, #48]	; 0x30
   13820:	mov	r3, #0
   13824:	str	r3, [sp, #40]	; 0x28
   13828:	b	133ac <__assert_fail@plt+0x2230>
   1382c:	mov	r3, #0
   13830:	str	r3, [sp, #40]	; 0x28
   13834:	b	133a0 <__assert_fail@plt+0x2224>
   13838:	mov	r3, #0
   1383c:	str	r3, [sp, #40]	; 0x28
   13840:	mov	r3, #118	; 0x76
   13844:	b	13200 <__assert_fail@plt+0x2084>
   13848:	ldr	r6, [sp, #48]	; 0x30
   1384c:	mov	r3, #0
   13850:	str	r3, [sp, #40]	; 0x28
   13854:	b	133ec <__assert_fail@plt+0x2270>
   13858:	mov	r3, #0
   1385c:	str	r3, [sp, #40]	; 0x28
   13860:	mov	r3, #116	; 0x74
   13864:	b	131f4 <__assert_fail@plt+0x2078>
   13868:	ldr	r3, [sp, #176]	; 0xb0
   1386c:	cmp	r3, #2
   13870:	beq	13d80 <__assert_fail@plt+0x2c04>
   13874:	cmp	r3, #5
   13878:	mov	r3, #0
   1387c:	str	r3, [sp, #40]	; 0x28
   13880:	beq	134ec <__assert_fail@plt+0x2370>
   13884:	mov	r6, #0
   13888:	mov	r5, #63	; 0x3f
   1388c:	b	133ac <__assert_fail@plt+0x2230>
   13890:	ldr	r3, [sp, #176]	; 0xb0
   13894:	cmp	r3, #2
   13898:	beq	13d08 <__assert_fail@plt+0x2b8c>
   1389c:	mov	r3, #0
   138a0:	b	13530 <__assert_fail@plt+0x23b4>
   138a4:	mov	r3, #0
   138a8:	str	r3, [sp, #40]	; 0x28
   138ac:	mov	r3, #114	; 0x72
   138b0:	b	131f4 <__assert_fail@plt+0x2078>
   138b4:	mov	r3, #0
   138b8:	mov	r6, r3
   138bc:	str	r3, [sp, #40]	; 0x28
   138c0:	b	133ec <__assert_fail@plt+0x2270>
   138c4:	mov	r3, #0
   138c8:	str	r3, [sp, #40]	; 0x28
   138cc:	mov	r3, #110	; 0x6e
   138d0:	b	131f4 <__assert_fail@plt+0x2078>
   138d4:	mov	r3, #0
   138d8:	str	r3, [sp, #40]	; 0x28
   138dc:	mov	r3, #98	; 0x62
   138e0:	b	13200 <__assert_fail@plt+0x2084>
   138e4:	mov	r3, #0
   138e8:	str	r3, [sp, #40]	; 0x28
   138ec:	mov	r3, #97	; 0x61
   138f0:	b	13200 <__assert_fail@plt+0x2084>
   138f4:	ldr	r3, [sp, #60]	; 0x3c
   138f8:	cmp	r3, #0
   138fc:	bne	13cec <__assert_fail@plt+0x2b70>
   13900:	ldr	r3, [sp, #92]	; 0x5c
   13904:	cmp	r3, #0
   13908:	addne	r7, r7, #1
   1390c:	bne	12b0c <__assert_fail@plt+0x1990>
   13910:	str	r3, [sp, #40]	; 0x28
   13914:	b	1320c <__assert_fail@plt+0x2090>
   13918:	mov	r3, #0
   1391c:	str	r3, [sp, #40]	; 0x28
   13920:	mov	r3, #102	; 0x66
   13924:	b	13200 <__assert_fail@plt+0x2084>
   13928:	mov	r3, #0
   1392c:	str	r3, [sp, #40]	; 0x28
   13930:	ldr	r3, [sp, #76]	; 0x4c
   13934:	cmp	r3, #1
   13938:	bne	13da0 <__assert_fail@plt+0x2c24>
   1393c:	bl	11044 <__ctype_b_loc@plt>
   13940:	ldr	r2, [r0]
   13944:	sxth	r3, r5
   13948:	lsl	r3, r3, #1
   1394c:	ldr	r1, [sp, #76]	; 0x4c
   13950:	ldrh	r3, [r2, r3]
   13954:	mov	r0, r1
   13958:	and	r3, r3, #16384	; 0x4000
   1395c:	cmp	r3, #0
   13960:	ldr	r3, [sp, #60]	; 0x3c
   13964:	movne	r6, #1
   13968:	moveq	r6, #0
   1396c:	movne	r2, #0
   13970:	andeq	r2, r3, #1
   13974:	cmp	r2, #0
   13978:	beq	133ac <__assert_fail@plt+0x2230>
   1397c:	ldr	r2, [sp, #60]	; 0x3c
   13980:	mov	r6, #0
   13984:	add	r1, r0, r7
   13988:	mov	ip, #39	; 0x27
   1398c:	str	r6, [sp, #100]	; 0x64
   13990:	mov	r0, #0
   13994:	ldr	lr, [sp, #36]	; 0x24
   13998:	str	r8, [sp, #36]	; 0x24
   1399c:	ldr	r6, [sp, #40]	; 0x28
   139a0:	ldr	r8, [sp, #44]	; 0x2c
   139a4:	b	13a54 <__assert_fail@plt+0x28d8>
   139a8:	cmp	r8, #0
   139ac:	bne	13f88 <__assert_fail@plt+0x2e0c>
   139b0:	ldr	r0, [sp, #52]	; 0x34
   139b4:	eor	r3, fp, #1
   139b8:	ands	r3, r0, r3
   139bc:	beq	139ec <__assert_fail@plt+0x2870>
   139c0:	cmp	sl, r4
   139c4:	add	r0, r4, #1
   139c8:	strbhi	ip, [r9, r4]
   139cc:	cmp	sl, r0
   139d0:	movhi	fp, #36	; 0x24
   139d4:	strbhi	fp, [r9, r0]
   139d8:	add	r0, r4, #2
   139dc:	mov	fp, r3
   139e0:	cmp	sl, r0
   139e4:	add	r4, r4, #3
   139e8:	strbhi	ip, [r9, r0]
   139ec:	cmp	sl, r4
   139f0:	movhi	r3, #92	; 0x5c
   139f4:	strbhi	r3, [r9, r4]
   139f8:	add	r3, r4, #1
   139fc:	cmp	sl, r3
   13a00:	bls	13a10 <__assert_fail@plt+0x2894>
   13a04:	lsr	r0, r5, #6
   13a08:	add	r0, r0, #48	; 0x30
   13a0c:	strb	r0, [r9, r3]
   13a10:	add	r3, r4, #2
   13a14:	cmp	sl, r3
   13a18:	bls	13a28 <__assert_fail@plt+0x28ac>
   13a1c:	ubfx	r0, r5, #3, #3
   13a20:	add	r0, r0, #48	; 0x30
   13a24:	strb	r0, [r9, r3]
   13a28:	add	r7, r7, #1
   13a2c:	and	r5, r5, #7
   13a30:	cmp	r1, r7
   13a34:	add	r5, r5, #48	; 0x30
   13a38:	add	r4, r4, #3
   13a3c:	bls	13f9c <__assert_fail@plt+0x2e20>
   13a40:	mov	r0, r2
   13a44:	cmp	sl, r4
   13a48:	strbhi	r5, [r9, r4]
   13a4c:	add	r4, r4, #1
   13a50:	ldrb	r5, [lr, #1]!
   13a54:	cmp	r2, #0
   13a58:	bne	139a8 <__assert_fail@plt+0x282c>
   13a5c:	eor	r3, r0, #1
   13a60:	cmp	r6, #0
   13a64:	and	r3, r3, fp
   13a68:	uxtb	r3, r3
   13a6c:	beq	13a80 <__assert_fail@plt+0x2904>
   13a70:	cmp	sl, r4
   13a74:	movhi	r6, #92	; 0x5c
   13a78:	strbhi	r6, [r9, r4]
   13a7c:	add	r4, r4, #1
   13a80:	add	r7, r7, #1
   13a84:	cmp	r7, r1
   13a88:	bcs	13f7c <__assert_fail@plt+0x2e00>
   13a8c:	cmp	r3, #0
   13a90:	beq	13fc0 <__assert_fail@plt+0x2e44>
   13a94:	cmp	sl, r4
   13a98:	add	r3, r4, #1
   13a9c:	mov	r6, #0
   13aa0:	strbhi	ip, [r9, r4]
   13aa4:	cmp	sl, r3
   13aa8:	add	r4, r4, #2
   13aac:	mov	fp, r6
   13ab0:	strbhi	ip, [r9, r3]
   13ab4:	b	13a44 <__assert_fail@plt+0x28c8>
   13ab8:	ldr	r3, [sp, #36]	; 0x24
   13abc:	ldrb	r5, [r3]
   13ac0:	cmp	r5, #126	; 0x7e
   13ac4:	ldrls	pc, [pc, r5, lsl #2]
   13ac8:	b	13928 <__assert_fail@plt+0x27ac>
   13acc:	andeq	r3, r1, ip, ror #25
   13ad0:	andeq	r3, r1, r8, lsr #18
   13ad4:	andeq	r3, r1, r8, lsr #18
   13ad8:	andeq	r3, r1, r8, lsr #18
   13adc:	andeq	r3, r1, r8, lsr #18
   13ae0:	andeq	r3, r1, r8, lsr #18
   13ae4:	andeq	r3, r1, r8, lsr #18
   13ae8:	andeq	r3, r1, r0, ror #3
   13aec:	ldrdeq	r3, [r1], -r8
   13af0:	andeq	r3, r1, r8, asr r8
   13af4:	andeq	r3, r1, r0, ror #25
   13af8:	andeq	r3, r1, r8, lsr r8
   13afc:	andeq	r3, r1, r4, lsl #1
   13b00:	ldrdeq	r3, [r1], -r4
   13b04:	andeq	r3, r1, r8, lsr #18
   13b08:	andeq	r3, r1, r8, lsr #18
   13b0c:	andeq	r3, r1, r8, lsr #18
   13b10:	andeq	r3, r1, r8, lsr #18
   13b14:	andeq	r3, r1, r8, lsr #18
   13b18:	andeq	r3, r1, r8, lsr #18
   13b1c:	andeq	r3, r1, r8, lsr #18
   13b20:	andeq	r3, r1, r8, lsr #18
   13b24:	andeq	r3, r1, r8, lsr #18
   13b28:	andeq	r3, r1, r8, lsr #18
   13b2c:	andeq	r3, r1, r8, lsr #18
   13b30:	andeq	r3, r1, r8, lsr #18
   13b34:	andeq	r3, r1, r8, lsr #18
   13b38:	andeq	r3, r1, r8, lsr #18
   13b3c:	andeq	r3, r1, r8, lsr #18
   13b40:	andeq	r3, r1, r8, lsr #18
   13b44:	andeq	r3, r1, r8, lsr #18
   13b48:	andeq	r3, r1, r8, lsr #18
   13b4c:	andeq	r3, r1, r8, asr #16
   13b50:	andeq	r3, r1, r8, asr #25
   13b54:	andeq	r3, r1, r8, asr #25
   13b58:	andeq	r3, r1, ip, lsr #16
   13b5c:	andeq	r3, r1, r8, asr #25
   13b60:	andeq	r3, r1, ip, lsl r8
   13b64:	andeq	r3, r1, r8, asr #25
   13b68:	muleq	r1, r0, r8
   13b6c:	andeq	r3, r1, r8, asr #25
   13b70:	andeq	r3, r1, r8, asr #25
   13b74:	andeq	r3, r1, r8, asr #25
   13b78:	andeq	r3, r1, ip, lsl r8
   13b7c:	andeq	r3, r1, ip, lsl r8
   13b80:	andeq	r3, r1, ip, lsl r8
   13b84:	andeq	r3, r1, ip, lsl r8
   13b88:	andeq	r3, r1, ip, lsl r8
   13b8c:	andeq	r3, r1, ip, lsl r8
   13b90:	andeq	r3, r1, ip, lsl r8
   13b94:	andeq	r3, r1, ip, lsl r8
   13b98:	andeq	r3, r1, ip, lsl r8
   13b9c:	andeq	r3, r1, ip, lsl r8
   13ba0:	andeq	r3, r1, ip, lsl r8
   13ba4:	andeq	r3, r1, ip, lsl r8
   13ba8:	andeq	r3, r1, ip, lsl r8
   13bac:	andeq	r3, r1, ip, lsl r8
   13bb0:	andeq	r3, r1, ip, lsl r8
   13bb4:	andeq	r3, r1, ip, lsl r8
   13bb8:	andeq	r3, r1, r8, asr #25
   13bbc:	andeq	r3, r1, r8, asr #25
   13bc0:	andeq	r3, r1, r8, asr #25
   13bc4:	andeq	r3, r1, r8, asr #25
   13bc8:	andeq	r3, r1, r8, ror #16
   13bcc:	andeq	r3, r1, r8, lsr #18
   13bd0:	andeq	r3, r1, ip, lsl r8
   13bd4:	andeq	r3, r1, ip, lsl r8
   13bd8:	andeq	r3, r1, ip, lsl r8
   13bdc:	andeq	r3, r1, ip, lsl r8
   13be0:	andeq	r3, r1, ip, lsl r8
   13be4:	andeq	r3, r1, ip, lsl r8
   13be8:	andeq	r3, r1, ip, lsl r8
   13bec:	andeq	r3, r1, ip, lsl r8
   13bf0:	andeq	r3, r1, ip, lsl r8
   13bf4:	andeq	r3, r1, ip, lsl r8
   13bf8:	andeq	r3, r1, ip, lsl r8
   13bfc:	andeq	r3, r1, ip, lsl r8
   13c00:	andeq	r3, r1, ip, lsl r8
   13c04:	andeq	r3, r1, ip, lsl r8
   13c08:	andeq	r3, r1, ip, lsl r8
   13c0c:	andeq	r3, r1, ip, lsl r8
   13c10:	andeq	r3, r1, ip, lsl r8
   13c14:	andeq	r3, r1, ip, lsl r8
   13c18:	andeq	r3, r1, ip, lsl r8
   13c1c:	andeq	r3, r1, ip, lsl r8
   13c20:	andeq	r3, r1, ip, lsl r8
   13c24:	andeq	r3, r1, ip, lsl r8
   13c28:	andeq	r3, r1, ip, lsl r8
   13c2c:	andeq	r3, r1, ip, lsl r8
   13c30:	andeq	r3, r1, ip, lsl r8
   13c34:	andeq	r3, r1, ip, lsl r8
   13c38:	andeq	r3, r1, r8, asr #25
   13c3c:	andeq	r3, r1, r8, ror #15
   13c40:	andeq	r3, r1, ip, lsl r8
   13c44:	andeq	r3, r1, r8, asr #25
   13c48:	andeq	r3, r1, ip, lsl r8
   13c4c:	andeq	r3, r1, r8, asr #25
   13c50:	andeq	r3, r1, ip, lsl r8
   13c54:	andeq	r3, r1, ip, lsl r8
   13c58:	andeq	r3, r1, ip, lsl r8
   13c5c:	andeq	r3, r1, ip, lsl r8
   13c60:	andeq	r3, r1, ip, lsl r8
   13c64:	andeq	r3, r1, ip, lsl r8
   13c68:	andeq	r3, r1, ip, lsl r8
   13c6c:	andeq	r3, r1, ip, lsl r8
   13c70:	andeq	r3, r1, ip, lsl r8
   13c74:	andeq	r3, r1, ip, lsl r8
   13c78:	andeq	r3, r1, ip, lsl r8
   13c7c:	andeq	r3, r1, ip, lsl r8
   13c80:	andeq	r3, r1, ip, lsl r8
   13c84:	andeq	r3, r1, ip, lsl r8
   13c88:	andeq	r3, r1, ip, lsl r8
   13c8c:	andeq	r3, r1, ip, lsl r8
   13c90:	andeq	r3, r1, ip, lsl r8
   13c94:	andeq	r3, r1, ip, lsl r8
   13c98:	andeq	r3, r1, ip, lsl r8
   13c9c:	andeq	r3, r1, ip, lsl r8
   13ca0:	andeq	r3, r1, ip, lsl r8
   13ca4:	andeq	r3, r1, ip, lsl r8
   13ca8:	andeq	r3, r1, ip, lsl r8
   13cac:	andeq	r3, r1, ip, lsl r8
   13cb0:	andeq	r3, r1, ip, lsl r8
   13cb4:	andeq	r3, r1, ip, lsl r8
   13cb8:	andeq	r3, r1, r4, asr #15
   13cbc:	andeq	r3, r1, r8, asr #25
   13cc0:	andeq	r3, r1, r4, asr #15
   13cc4:	andeq	r3, r1, ip, lsr #16
   13cc8:	mov	r3, #0
   13ccc:	str	r3, [sp, #40]	; 0x28
   13cd0:	b	133a8 <__assert_fail@plt+0x222c>
   13cd4:	mov	r3, #0
   13cd8:	str	r3, [sp, #40]	; 0x28
   13cdc:	b	13340 <__assert_fail@plt+0x21c4>
   13ce0:	mov	r3, #0
   13ce4:	str	r3, [sp, #40]	; 0x28
   13ce8:	b	13374 <__assert_fail@plt+0x21f8>
   13cec:	ldr	r3, [sp, #44]	; 0x2c
   13cf0:	cmp	r3, #0
   13cf4:	beq	1328c <__assert_fail@plt+0x2110>
   13cf8:	ldr	r3, [sp, #52]	; 0x34
   13cfc:	mov	fp, r9
   13d00:	str	r3, [sp, #60]	; 0x3c
   13d04:	b	13404 <__assert_fail@plt+0x2288>
   13d08:	ldr	r3, [sp, #44]	; 0x2c
   13d0c:	cmp	r3, #0
   13d10:	bne	14144 <__assert_fail@plt+0x2fc8>
   13d14:	str	r3, [sp, #40]	; 0x28
   13d18:	cmp	sl, #0
   13d1c:	ldr	r3, [sp, #84]	; 0x54
   13d20:	clz	r3, r3
   13d24:	lsr	r3, r3, #5
   13d28:	moveq	r3, #0
   13d2c:	cmp	r3, #0
   13d30:	strne	sl, [sp, #84]	; 0x54
   13d34:	movne	sl, #0
   13d38:	bne	13d68 <__assert_fail@plt+0x2bec>
   13d3c:	cmp	sl, r4
   13d40:	movhi	r3, #39	; 0x27
   13d44:	strbhi	r3, [r9, r4]
   13d48:	add	r3, r4, #1
   13d4c:	cmp	sl, r3
   13d50:	movhi	r2, #92	; 0x5c
   13d54:	strbhi	r2, [r9, r3]
   13d58:	add	r3, r4, #2
   13d5c:	cmp	sl, r3
   13d60:	movhi	r2, #39	; 0x27
   13d64:	strbhi	r2, [r9, r3]
   13d68:	mov	r3, #0
   13d6c:	add	r4, r4, #3
   13d70:	str	r6, [sp, #80]	; 0x50
   13d74:	mov	fp, r3
   13d78:	mov	r5, #39	; 0x27
   13d7c:	b	13248 <__assert_fail@plt+0x20cc>
   13d80:	ldr	r3, [sp, #44]	; 0x2c
   13d84:	cmp	r3, #0
   13d88:	bne	14144 <__assert_fail@plt+0x2fc8>
   13d8c:	mov	r6, #0
   13d90:	mov	r5, #63	; 0x3f
   13d94:	str	r3, [sp, #40]	; 0x28
   13d98:	mov	r3, fp
   13d9c:	b	13248 <__assert_fail@plt+0x20cc>
   13da0:	mov	r2, #0
   13da4:	mov	r3, #0
   13da8:	cmn	r8, #1
   13dac:	strd	r2, [sp, #128]	; 0x80
   13db0:	bne	13dc0 <__assert_fail@plt+0x2c44>
   13db4:	ldr	r0, [sp, #28]
   13db8:	bl	11068 <strlen@plt>
   13dbc:	mov	r8, r0
   13dc0:	str	r9, [sp, #100]	; 0x64
   13dc4:	mov	r3, #0
   13dc8:	strd	sl, [sp, #104]	; 0x68
   13dcc:	ldr	sl, [sp, #28]
   13dd0:	str	r5, [sp, #112]	; 0x70
   13dd4:	mov	r5, r3
   13dd8:	ldr	r9, [sp, #68]	; 0x44
   13ddc:	str	r4, [sp, #116]	; 0x74
   13de0:	add	r4, r7, r5
   13de4:	add	r3, sp, #128	; 0x80
   13de8:	add	fp, sl, r4
   13dec:	sub	r2, r8, r4
   13df0:	mov	r1, fp
   13df4:	add	r0, sp, #124	; 0x7c
   13df8:	bl	17d54 <__assert_fail@plt+0x6bd8>
   13dfc:	subs	r1, r0, #0
   13e00:	beq	13e40 <__assert_fail@plt+0x2cc4>
   13e04:	cmn	r1, #1
   13e08:	beq	14198 <__assert_fail@plt+0x301c>
   13e0c:	cmn	r1, #2
   13e10:	beq	141b8 <__assert_fail@plt+0x303c>
   13e14:	cmp	r9, #0
   13e18:	bne	13e70 <__assert_fail@plt+0x2cf4>
   13e1c:	ldr	r0, [sp, #124]	; 0x7c
   13e20:	add	r5, r5, r1
   13e24:	bl	10f90 <iswprint@plt>
   13e28:	cmp	r0, #0
   13e2c:	add	r0, sp, #128	; 0x80
   13e30:	moveq	r6, #0
   13e34:	bl	10f3c <mbsinit@plt>
   13e38:	cmp	r0, #0
   13e3c:	beq	13de0 <__assert_fail@plt+0x2c64>
   13e40:	ldr	r3, [sp, #60]	; 0x3c
   13e44:	add	r9, sp, #100	; 0x64
   13e48:	mov	r0, r5
   13e4c:	ldm	r9, {r9, sl, fp}
   13e50:	eor	r2, r6, #1
   13e54:	ldr	r5, [sp, #112]	; 0x70
   13e58:	and	r2, r2, r3
   13e5c:	uxtb	r2, r2
   13e60:	ldr	r4, [sp, #116]	; 0x74
   13e64:	cmp	r0, #1
   13e68:	bhi	13984 <__assert_fail@plt+0x2808>
   13e6c:	b	13974 <__assert_fail@plt+0x27f8>
   13e70:	cmp	r1, #1
   13e74:	beq	13e1c <__assert_fail@plt+0x2ca0>
   13e78:	add	r2, r4, #1
   13e7c:	add	r3, sl, r1
   13e80:	add	r2, sl, r2
   13e84:	add	r4, r3, r4
   13e88:	ldrb	r3, [r2], #1
   13e8c:	sub	r3, r3, #91	; 0x5b
   13e90:	cmp	r3, #33	; 0x21
   13e94:	ldrls	pc, [pc, r3, lsl #2]
   13e98:	b	13f24 <__assert_fail@plt+0x2da8>
   13e9c:	andeq	r3, r1, r0, lsr pc
   13ea0:	andeq	r3, r1, r0, lsr pc
   13ea4:	andeq	r3, r1, r4, lsr #30
   13ea8:	andeq	r3, r1, r0, lsr pc
   13eac:	andeq	r3, r1, r4, lsr #30
   13eb0:	andeq	r3, r1, r0, lsr pc
   13eb4:	andeq	r3, r1, r4, lsr #30
   13eb8:	andeq	r3, r1, r4, lsr #30
   13ebc:	andeq	r3, r1, r4, lsr #30
   13ec0:	andeq	r3, r1, r4, lsr #30
   13ec4:	andeq	r3, r1, r4, lsr #30
   13ec8:	andeq	r3, r1, r4, lsr #30
   13ecc:	andeq	r3, r1, r4, lsr #30
   13ed0:	andeq	r3, r1, r4, lsr #30
   13ed4:	andeq	r3, r1, r4, lsr #30
   13ed8:	andeq	r3, r1, r4, lsr #30
   13edc:	andeq	r3, r1, r4, lsr #30
   13ee0:	andeq	r3, r1, r4, lsr #30
   13ee4:	andeq	r3, r1, r4, lsr #30
   13ee8:	andeq	r3, r1, r4, lsr #30
   13eec:	andeq	r3, r1, r4, lsr #30
   13ef0:	andeq	r3, r1, r4, lsr #30
   13ef4:	andeq	r3, r1, r4, lsr #30
   13ef8:	andeq	r3, r1, r4, lsr #30
   13efc:	andeq	r3, r1, r4, lsr #30
   13f00:	andeq	r3, r1, r4, lsr #30
   13f04:	andeq	r3, r1, r4, lsr #30
   13f08:	andeq	r3, r1, r4, lsr #30
   13f0c:	andeq	r3, r1, r4, lsr #30
   13f10:	andeq	r3, r1, r4, lsr #30
   13f14:	andeq	r3, r1, r4, lsr #30
   13f18:	andeq	r3, r1, r4, lsr #30
   13f1c:	andeq	r3, r1, r4, lsr #30
   13f20:	andeq	r3, r1, r0, lsr pc
   13f24:	cmp	r4, r2
   13f28:	bne	13e88 <__assert_fail@plt+0x2d0c>
   13f2c:	b	13e1c <__assert_fail@plt+0x2ca0>
   13f30:	mov	r3, #2
   13f34:	ldr	fp, [sp, #100]	; 0x64
   13f38:	str	r3, [sp, #176]	; 0xb0
   13f3c:	ldr	sl, [sp, #104]	; 0x68
   13f40:	b	13404 <__assert_fail@plt+0x2288>
   13f44:	ldr	r2, [sp, #52]	; 0x34
   13f48:	mov	fp, r9
   13f4c:	ldr	r3, [sp, #60]	; 0x3c
   13f50:	and	r3, r3, r2
   13f54:	str	r3, [sp, #60]	; 0x3c
   13f58:	b	13404 <__assert_fail@plt+0x2288>
   13f5c:	cmp	sl, r4
   13f60:	movhi	r2, fp
   13f64:	bhi	132dc <__assert_fail@plt+0x2160>
   13f68:	mov	r2, r4
   13f6c:	b	132ec <__assert_fail@plt+0x2170>
   13f70:	mov	r6, r3
   13f74:	mov	r5, #63	; 0x3f
   13f78:	b	133ac <__assert_fail@plt+0x2230>
   13f7c:	ldr	r8, [sp, #36]	; 0x24
   13f80:	ldr	r6, [sp, #100]	; 0x64
   13f84:	b	13258 <__assert_fail@plt+0x20dc>
   13f88:	mov	fp, r9
   13f8c:	ldr	r8, [sp, #36]	; 0x24
   13f90:	ldr	r3, [sp, #52]	; 0x34
   13f94:	str	r3, [sp, #60]	; 0x3c
   13f98:	b	13404 <__assert_fail@plt+0x2288>
   13f9c:	ldr	r8, [sp, #36]	; 0x24
   13fa0:	ldr	r6, [sp, #100]	; 0x64
   13fa4:	b	130f0 <__assert_fail@plt+0x1f74>
   13fa8:	mov	r3, #0
   13fac:	add	r4, r4, #4
   13fb0:	mov	fp, r2
   13fb4:	mov	r6, r3
   13fb8:	mov	r5, #48	; 0x30
   13fbc:	b	13248 <__assert_fail@plt+0x20cc>
   13fc0:	mov	r6, r3
   13fc4:	b	13a44 <__assert_fail@plt+0x28c8>
   13fc8:	mov	r3, #1
   13fcc:	movw	r2, #35984	; 0x8c90
   13fd0:	movt	r2, #1
   13fd4:	mov	r4, r3
   13fd8:	mov	r9, sl
   13fdc:	str	r3, [sp, #32]
   13fe0:	str	sl, [sp, #44]	; 0x2c
   13fe4:	str	r3, [sp, #48]	; 0x30
   13fe8:	str	sl, [sp, #52]	; 0x34
   13fec:	str	r3, [sp, #56]	; 0x38
   13ff0:	str	r3, [sp, #60]	; 0x3c
   13ff4:	str	sl, [sp, #64]	; 0x40
   13ff8:	str	sl, [sp, #68]	; 0x44
   13ffc:	str	r2, [sp, #72]	; 0x48
   14000:	str	sl, [sp, #80]	; 0x50
   14004:	str	sl, [sp, #84]	; 0x54
   14008:	str	sl, [sp, #88]	; 0x58
   1400c:	b	12afc <__assert_fail@plt+0x1980>
   14010:	mov	r3, #0
   14014:	mov	r5, #48	; 0x30
   14018:	mov	r6, r3
   1401c:	b	13248 <__assert_fail@plt+0x20cc>
   14020:	cmp	sl, r4
   14024:	mov	r5, #48	; 0x30
   14028:	movhi	r3, #48	; 0x30
   1402c:	strbhi	r3, [r9, r4]
   14030:	add	r3, r2, #2
   14034:	add	r4, r2, #3
   14038:	cmp	sl, r3
   1403c:	movhi	r1, #48	; 0x30
   14040:	strbhi	r1, [r9, r3]
   14044:	mov	r3, #0
   14048:	b	13324 <__assert_fail@plt+0x21a8>
   1404c:	ldr	r3, [sp, #48]	; 0x30
   14050:	str	r3, [sp, #40]	; 0x28
   14054:	b	13930 <__assert_fail@plt+0x27b4>
   14058:	ldr	r2, [sp, #28]
   1405c:	ldrb	r2, [r2, r3]
   14060:	sub	r1, r2, #33	; 0x21
   14064:	cmp	r1, #29
   14068:	ldrls	pc, [pc, r1, lsl #2]
   1406c:	b	133a8 <__assert_fail@plt+0x222c>
   14070:	andeq	r4, r1, r8, ror #1
   14074:	andeq	r3, r1, r8, lsr #7
   14078:	andeq	r3, r1, r8, lsr #7
   1407c:	andeq	r3, r1, r8, lsr #7
   14080:	andeq	r3, r1, r8, lsr #7
   14084:	andeq	r3, r1, r8, lsr #7
   14088:	andeq	r4, r1, r8, ror #1
   1408c:	andeq	r4, r1, r8, ror #1
   14090:	andeq	r4, r1, r8, ror #1
   14094:	andeq	r3, r1, r8, lsr #7
   14098:	andeq	r3, r1, r8, lsr #7
   1409c:	andeq	r3, r1, r8, lsr #7
   140a0:	andeq	r4, r1, r8, ror #1
   140a4:	andeq	r3, r1, r8, lsr #7
   140a8:	andeq	r4, r1, r8, ror #1
   140ac:	andeq	r3, r1, r8, lsr #7
   140b0:	andeq	r3, r1, r8, lsr #7
   140b4:	andeq	r3, r1, r8, lsr #7
   140b8:	andeq	r3, r1, r8, lsr #7
   140bc:	andeq	r3, r1, r8, lsr #7
   140c0:	andeq	r3, r1, r8, lsr #7
   140c4:	andeq	r3, r1, r8, lsr #7
   140c8:	andeq	r3, r1, r8, lsr #7
   140cc:	andeq	r3, r1, r8, lsr #7
   140d0:	andeq	r3, r1, r8, lsr #7
   140d4:	andeq	r3, r1, r8, lsr #7
   140d8:	andeq	r3, r1, r8, lsr #7
   140dc:	andeq	r4, r1, r8, ror #1
   140e0:	andeq	r4, r1, r8, ror #1
   140e4:	andeq	r4, r1, r8, ror #1
   140e8:	ldr	r1, [sp, #44]	; 0x2c
   140ec:	cmp	r1, #0
   140f0:	bne	14350 <__assert_fail@plt+0x31d4>
   140f4:	cmp	sl, r4
   140f8:	mov	r7, r3
   140fc:	movhi	r1, #63	; 0x3f
   14100:	mov	r5, r2
   14104:	mov	r3, fp
   14108:	strbhi	r1, [r9, r4]
   1410c:	add	r1, r4, #1
   14110:	cmp	sl, r1
   14114:	movhi	r0, #34	; 0x22
   14118:	strbhi	r0, [r9, r1]
   1411c:	add	r1, r4, #2
   14120:	cmp	sl, r1
   14124:	movhi	r0, #34	; 0x22
   14128:	strbhi	r0, [r9, r1]
   1412c:	add	r1, r4, #3
   14130:	add	r4, r4, #4
   14134:	cmp	sl, r1
   14138:	movhi	r0, #63	; 0x3f
   1413c:	strbhi	r0, [r9, r1]
   14140:	b	13324 <__assert_fail@plt+0x21a8>
   14144:	mov	fp, r9
   14148:	b	13404 <__assert_fail@plt+0x2288>
   1414c:	ldr	r3, [sp, #188]	; 0xbc
   14150:	ldrb	r3, [r3]
   14154:	cmp	r3, #0
   14158:	beq	12a94 <__assert_fail@plt+0x1918>
   1415c:	ldr	r2, [sp, #188]	; 0xbc
   14160:	cmp	sl, r4
   14164:	bls	14184 <__assert_fail@plt+0x3008>
   14168:	strb	r3, [fp, r4]
   1416c:	add	r4, r4, #1
   14170:	ldrb	r3, [r2, #1]!
   14174:	cmp	r3, #0
   14178:	beq	12a94 <__assert_fail@plt+0x1918>
   1417c:	cmp	sl, r4
   14180:	bhi	14168 <__assert_fail@plt+0x2fec>
   14184:	ldrb	r3, [r2, #1]!
   14188:	add	r4, r4, #1
   1418c:	cmp	r3, #0
   14190:	bne	14160 <__assert_fail@plt+0x2fe4>
   14194:	b	12a94 <__assert_fail@plt+0x1918>
   14198:	add	r9, sp, #100	; 0x64
   1419c:	mov	r0, r5
   141a0:	ldr	r2, [sp, #60]	; 0x3c
   141a4:	mov	r6, #0
   141a8:	ldm	r9, {r9, sl, fp}
   141ac:	ldr	r5, [sp, #112]	; 0x70
   141b0:	ldr	r4, [sp, #116]	; 0x74
   141b4:	b	13e64 <__assert_fail@plt+0x2ce8>
   141b8:	cmp	r4, r8
   141bc:	add	r9, sp, #100	; 0x64
   141c0:	mov	r1, r4
   141c4:	mov	r2, fp
   141c8:	ldm	r9, {r9, sl, fp}
   141cc:	mov	r3, r5
   141d0:	mov	r0, r5
   141d4:	ldr	r5, [sp, #112]	; 0x70
   141d8:	ldr	r4, [sp, #116]	; 0x74
   141dc:	bcs	14210 <__assert_fail@plt+0x3094>
   141e0:	ldrb	r6, [r2]
   141e4:	cmp	r6, #0
   141e8:	bne	141fc <__assert_fail@plt+0x3080>
   141ec:	b	14348 <__assert_fail@plt+0x31cc>
   141f0:	ldrb	r6, [r2, #1]!
   141f4:	cmp	r6, #0
   141f8:	beq	142e0 <__assert_fail@plt+0x3164>
   141fc:	add	r3, r3, #1
   14200:	add	r1, r7, r3
   14204:	cmp	r8, r1
   14208:	bhi	141f0 <__assert_fail@plt+0x3074>
   1420c:	mov	r0, r3
   14210:	mov	r6, #0
   14214:	ldr	r2, [sp, #60]	; 0x3c
   14218:	b	13e64 <__assert_fail@plt+0x2ce8>
   1421c:	mov	r3, #1
   14220:	mov	r4, #0
   14224:	mov	r9, r4
   14228:	str	r3, [sp, #32]
   1422c:	str	r3, [sp, #44]	; 0x2c
   14230:	str	r3, [sp, #48]	; 0x30
   14234:	str	r4, [sp, #52]	; 0x34
   14238:	str	r3, [sp, #56]	; 0x38
   1423c:	str	r3, [sp, #60]	; 0x3c
   14240:	str	r3, [sp, #88]	; 0x58
   14244:	movw	r3, #35984	; 0x8c90
   14248:	movt	r3, #1
   1424c:	str	r4, [sp, #64]	; 0x40
   14250:	str	r4, [sp, #68]	; 0x44
   14254:	str	r3, [sp, #72]	; 0x48
   14258:	str	r4, [sp, #80]	; 0x50
   1425c:	str	r4, [sp, #84]	; 0x54
   14260:	b	12afc <__assert_fail@plt+0x1980>
   14264:	mov	fp, r9
   14268:	b	13418 <__assert_fail@plt+0x229c>
   1426c:	ldr	r3, [sp, #48]	; 0x30
   14270:	b	13d8c <__assert_fail@plt+0x2c10>
   14274:	mov	r2, r3
   14278:	ldr	r3, [sp, #72]	; 0x48
   1427c:	cmp	r3, #0
   14280:	moveq	r2, #0
   14284:	andne	r2, r2, #1
   14288:	cmp	r2, #0
   1428c:	beq	142bc <__assert_fail@plt+0x3140>
   14290:	mov	r2, r3
   14294:	ldrb	r3, [r3]
   14298:	cmp	r3, #0
   1429c:	beq	142bc <__assert_fail@plt+0x3140>
   142a0:	cmp	sl, r4
   142a4:	bls	142cc <__assert_fail@plt+0x3150>
   142a8:	strb	r3, [fp, r4]
   142ac:	add	r4, r4, #1
   142b0:	ldrb	r3, [r2, #1]!
   142b4:	cmp	r3, #0
   142b8:	bne	142a0 <__assert_fail@plt+0x3124>
   142bc:	cmp	sl, r4
   142c0:	movhi	r3, #0
   142c4:	strbhi	r3, [fp, r4]
   142c8:	b	13454 <__assert_fail@plt+0x22d8>
   142cc:	ldrb	r3, [r2, #1]!
   142d0:	add	r4, r4, #1
   142d4:	cmp	r3, #0
   142d8:	bne	142a0 <__assert_fail@plt+0x3124>
   142dc:	b	142bc <__assert_fail@plt+0x3140>
   142e0:	mov	r0, r3
   142e4:	ldr	r2, [sp, #60]	; 0x3c
   142e8:	b	13e64 <__assert_fail@plt+0x2ce8>
   142ec:	mov	ip, #5
   142f0:	mov	r3, r8
   142f4:	ldr	r1, [sp, #84]	; 0x54
   142f8:	str	ip, [sp]
   142fc:	ldr	r2, [sp, #180]	; 0xb4
   14300:	ldr	ip, [sp, #188]	; 0xbc
   14304:	ldr	r0, [sp, #184]	; 0xb8
   14308:	str	r2, [sp, #4]
   1430c:	ldr	r2, [sp, #28]
   14310:	str	ip, [sp, #12]
   14314:	ldr	ip, [sp, #192]	; 0xc0
   14318:	str	r0, [sp, #8]
   1431c:	mov	r0, fp
   14320:	str	ip, [sp, #16]
   14324:	bl	129d8 <__assert_fail@plt+0x185c>
   14328:	mov	r4, r0
   1432c:	b	13454 <__assert_fail@plt+0x22d8>
   14330:	mov	r6, r3
   14334:	str	r3, [sp, #40]	; 0x28
   14338:	b	133c4 <__assert_fail@plt+0x2248>
   1433c:	mov	r3, #2
   14340:	str	r3, [sp, #176]	; 0xb0
   14344:	b	13404 <__assert_fail@plt+0x2288>
   14348:	ldr	r2, [sp, #60]	; 0x3c
   1434c:	b	13e64 <__assert_fail@plt+0x2ce8>
   14350:	mov	r3, #5
   14354:	mov	fp, r9
   14358:	str	r3, [sp, #176]	; 0xb0
   1435c:	b	13418 <__assert_fail@plt+0x229c>
   14360:	mov	r1, #1
   14364:	mov	r9, #0
   14368:	mov	r3, r9
   1436c:	mov	r2, r9
   14370:	str	r1, [sp, #32]
   14374:	str	sl, [sp, #84]	; 0x54
   14378:	b	131a0 <__assert_fail@plt+0x2024>
   1437c:	mov	r3, #0
   14380:	mov	r2, #1
   14384:	mov	r9, r3
   14388:	mov	r4, r3
   1438c:	str	r2, [sp, #32]
   14390:	strd	r2, [sp, #44]	; 0x2c
   14394:	strd	r2, [sp, #56]	; 0x38
   14398:	str	r3, [sp, #80]	; 0x50
   1439c:	str	r3, [sp, #84]	; 0x54
   143a0:	str	r3, [sp, #88]	; 0x58
   143a4:	movw	r3, #36004	; 0x8ca4
   143a8:	movt	r3, #1
   143ac:	str	r2, [sp, #52]	; 0x34
   143b0:	str	r2, [sp, #64]	; 0x40
   143b4:	str	r2, [sp, #68]	; 0x44
   143b8:	str	r3, [sp, #72]	; 0x48
   143bc:	b	12afc <__assert_fail@plt+0x1980>
   143c0:	bl	11158 <abort@plt>
   143c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143c8:	mov	r4, r0
   143cc:	mov	r5, r3
   143d0:	strd	r6, [sp, #8]
   143d4:	movw	r7, #41244	; 0xa11c
   143d8:	movt	r7, #2
   143dc:	strd	r8, [sp, #16]
   143e0:	strd	sl, [sp, #24]
   143e4:	mov	sl, r1
   143e8:	mov	fp, r2
   143ec:	str	lr, [sp, #32]
   143f0:	sub	sp, sp, #60	; 0x3c
   143f4:	bl	11080 <__errno_location@plt>
   143f8:	mov	r8, r0
   143fc:	cmn	r4, #-2147483647	; 0x80000001
   14400:	ldr	r6, [r7]
   14404:	movne	r0, #0
   14408:	moveq	r0, #1
   1440c:	ldr	r3, [r8]
   14410:	orrs	r0, r0, r4, lsr #31
   14414:	str	r3, [sp, #28]
   14418:	bne	145a8 <__assert_fail@plt+0x342c>
   1441c:	ldr	r3, [r7, #4]
   14420:	cmp	r3, r4
   14424:	bgt	14484 <__assert_fail@plt+0x3308>
   14428:	add	r1, r7, #8
   1442c:	sub	r2, r4, r3
   14430:	str	r3, [sp, #52]	; 0x34
   14434:	cmp	r6, r1
   14438:	add	r2, r2, #1
   1443c:	beq	14580 <__assert_fail@plt+0x3404>
   14440:	mov	r1, #8
   14444:	mov	r0, r6
   14448:	mvn	r3, #-2147483648	; 0x80000000
   1444c:	str	r1, [sp]
   14450:	add	r1, sp, #52	; 0x34
   14454:	bl	170e4 <__assert_fail@plt+0x5f68>
   14458:	mov	r6, r0
   1445c:	str	r0, [r7]
   14460:	ldr	r0, [r7, #4]
   14464:	mov	r1, #0
   14468:	ldr	r2, [sp, #52]	; 0x34
   1446c:	sub	r2, r2, r0
   14470:	add	r0, r6, r0, lsl #3
   14474:	lsl	r2, r2, #3
   14478:	bl	110b0 <memset@plt>
   1447c:	ldr	r3, [sp, #52]	; 0x34
   14480:	str	r3, [r7, #4]
   14484:	ldr	r1, [r5, #4]
   14488:	add	r0, r6, r4, lsl #3
   1448c:	add	ip, r5, #8
   14490:	mov	r3, fp
   14494:	mov	r2, sl
   14498:	ldr	r7, [r0, #4]
   1449c:	str	r0, [sp, #36]	; 0x24
   144a0:	str	ip, [sp, #40]	; 0x28
   144a4:	orr	r0, r1, #1
   144a8:	ldr	r9, [r6, r4, lsl #3]
   144ac:	str	ip, [sp, #8]
   144b0:	ldr	lr, [r5, #44]	; 0x2c
   144b4:	str	r0, [sp, #4]
   144b8:	ldr	ip, [r5]
   144bc:	mov	r1, r9
   144c0:	str	ip, [sp, #32]
   144c4:	ldr	ip, [r5, #40]	; 0x28
   144c8:	str	ip, [sp, #12]
   144cc:	ldr	ip, [sp, #32]
   144d0:	str	lr, [sp, #16]
   144d4:	str	r0, [sp, #44]	; 0x2c
   144d8:	mov	r0, r7
   144dc:	str	ip, [sp]
   144e0:	bl	129d8 <__assert_fail@plt+0x185c>
   144e4:	cmp	r9, r0
   144e8:	bhi	14558 <__assert_fail@plt+0x33dc>
   144ec:	add	r9, r0, #1
   144f0:	movw	r3, #41456	; 0xa1f0
   144f4:	movt	r3, #2
   144f8:	cmp	r7, r3
   144fc:	str	r9, [r6, r4, lsl #3]
   14500:	beq	1450c <__assert_fail@plt+0x3390>
   14504:	mov	r0, r7
   14508:	bl	126dc <__assert_fail@plt+0x1560>
   1450c:	mov	r0, r9
   14510:	bl	16e40 <__assert_fail@plt+0x5cc4>
   14514:	ldr	ip, [r5]
   14518:	mov	r3, fp
   1451c:	mov	r2, sl
   14520:	mov	r1, r9
   14524:	mov	r7, r0
   14528:	ldr	lr, [sp, #36]	; 0x24
   1452c:	ldr	r4, [r5, #40]	; 0x28
   14530:	str	r0, [lr, #4]
   14534:	ldr	lr, [r5, #44]	; 0x2c
   14538:	str	ip, [sp]
   1453c:	ldr	ip, [sp, #44]	; 0x2c
   14540:	str	ip, [sp, #4]
   14544:	ldr	ip, [sp, #40]	; 0x28
   14548:	str	r4, [sp, #12]
   1454c:	str	lr, [sp, #16]
   14550:	str	ip, [sp, #8]
   14554:	bl	129d8 <__assert_fail@plt+0x185c>
   14558:	ldr	r3, [sp, #28]
   1455c:	mov	r0, r7
   14560:	str	r3, [r8]
   14564:	add	sp, sp, #60	; 0x3c
   14568:	ldrd	r4, [sp]
   1456c:	ldrd	r6, [sp, #8]
   14570:	ldrd	r8, [sp, #16]
   14574:	ldrd	sl, [sp, #24]
   14578:	add	sp, sp, #32
   1457c:	pop	{pc}		; (ldr pc, [sp], #4)
   14580:	mov	r1, #8
   14584:	mvn	r3, #-2147483648	; 0x80000000
   14588:	str	r1, [sp]
   1458c:	add	r1, sp, #52	; 0x34
   14590:	bl	170e4 <__assert_fail@plt+0x5f68>
   14594:	ldrd	r2, [r7, #8]
   14598:	mov	r6, r0
   1459c:	str	r0, [r7]
   145a0:	strd	r2, [r0]
   145a4:	b	14460 <__assert_fail@plt+0x32e4>
   145a8:	bl	11158 <abort@plt>
   145ac:	strd	r4, [sp, #-16]!
   145b0:	mov	r5, r0
   145b4:	str	r6, [sp, #8]
   145b8:	str	lr, [sp, #12]
   145bc:	bl	11080 <__errno_location@plt>
   145c0:	mov	r4, r0
   145c4:	cmp	r5, #0
   145c8:	ldr	r0, [pc, #32]	; 145f0 <__assert_fail@plt+0x3474>
   145cc:	mov	r1, #48	; 0x30
   145d0:	movne	r0, r5
   145d4:	ldr	r6, [r4]
   145d8:	bl	17284 <__assert_fail@plt+0x6108>
   145dc:	str	r6, [r4]
   145e0:	ldrd	r4, [sp]
   145e4:	ldr	r6, [sp, #8]
   145e8:	add	sp, sp, #12
   145ec:	pop	{pc}		; (ldr pc, [sp], #4)
   145f0:	strdeq	sl, [r2], -r0
   145f4:	ldr	r3, [pc, #12]	; 14608 <__assert_fail@plt+0x348c>
   145f8:	cmp	r0, #0
   145fc:	moveq	r0, r3
   14600:	ldr	r0, [r0]
   14604:	bx	lr
   14608:	strdeq	sl, [r2], -r0
   1460c:	ldr	r3, [pc, #12]	; 14620 <__assert_fail@plt+0x34a4>
   14610:	cmp	r0, #0
   14614:	moveq	r0, r3
   14618:	str	r1, [r0]
   1461c:	bx	lr
   14620:	strdeq	sl, [r2], -r0
   14624:	ldr	r3, [pc, #52]	; 14660 <__assert_fail@plt+0x34e4>
   14628:	cmp	r0, #0
   1462c:	push	{lr}		; (str lr, [sp, #-4]!)
   14630:	lsr	lr, r1, #5
   14634:	and	r1, r1, #31
   14638:	moveq	r0, r3
   1463c:	add	r3, r0, #8
   14640:	ldr	ip, [r3, lr, lsl #2]
   14644:	lsr	r0, ip, r1
   14648:	eor	r2, r2, r0
   1464c:	and	r0, r0, #1
   14650:	and	r2, r2, #1
   14654:	eor	r1, ip, r2, lsl r1
   14658:	str	r1, [r3, lr, lsl #2]
   1465c:	pop	{pc}		; (ldr pc, [sp], #4)
   14660:	strdeq	sl, [r2], -r0
   14664:	ldr	r3, [pc, #16]	; 1467c <__assert_fail@plt+0x3500>
   14668:	cmp	r0, #0
   1466c:	movne	r3, r0
   14670:	ldr	r0, [r3, #4]
   14674:	str	r1, [r3, #4]
   14678:	bx	lr
   1467c:	strdeq	sl, [r2], -r0
   14680:	ldr	r3, [pc, #48]	; 146b8 <__assert_fail@plt+0x353c>
   14684:	cmp	r0, #0
   14688:	mov	ip, #10
   1468c:	moveq	r0, r3
   14690:	cmp	r2, #0
   14694:	cmpne	r1, #0
   14698:	str	ip, [r0]
   1469c:	beq	146ac <__assert_fail@plt+0x3530>
   146a0:	str	r1, [r0, #40]	; 0x28
   146a4:	str	r2, [r0, #44]	; 0x2c
   146a8:	bx	lr
   146ac:	str	r4, [sp, #-8]!
   146b0:	str	lr, [sp, #4]
   146b4:	bl	11158 <abort@plt>
   146b8:	strdeq	sl, [r2], -r0
   146bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   146c0:	strd	r6, [sp, #8]
   146c4:	mov	r7, r0
   146c8:	mov	r6, r1
   146cc:	strd	r8, [sp, #16]
   146d0:	mov	r8, r2
   146d4:	mov	r9, r3
   146d8:	str	lr, [sp, #24]
   146dc:	sub	sp, sp, #28
   146e0:	ldr	r4, [sp, #56]	; 0x38
   146e4:	ldr	ip, [pc, #104]	; 14754 <__assert_fail@plt+0x35d8>
   146e8:	cmp	r4, #0
   146ec:	moveq	r4, ip
   146f0:	bl	11080 <__errno_location@plt>
   146f4:	ldr	ip, [r4, #44]	; 0x2c
   146f8:	mov	r5, r0
   146fc:	mov	r1, r6
   14700:	add	lr, r4, #8
   14704:	mov	r3, r9
   14708:	ldr	r6, [r5]
   1470c:	mov	r2, r8
   14710:	mov	r0, r7
   14714:	str	ip, [sp, #16]
   14718:	ldr	ip, [r4, #40]	; 0x28
   1471c:	str	lr, [sp, #8]
   14720:	str	ip, [sp, #12]
   14724:	ldr	ip, [r4, #4]
   14728:	str	ip, [sp, #4]
   1472c:	ldr	ip, [r4]
   14730:	str	ip, [sp]
   14734:	bl	129d8 <__assert_fail@plt+0x185c>
   14738:	str	r6, [r5]
   1473c:	add	sp, sp, #28
   14740:	ldrd	r4, [sp]
   14744:	ldrd	r6, [sp, #8]
   14748:	ldrd	r8, [sp, #16]
   1474c:	add	sp, sp, #24
   14750:	pop	{pc}		; (ldr pc, [sp], #4)
   14754:	strdeq	sl, [r2], -r0
   14758:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1475c:	cmp	r2, #0
   14760:	ldr	r4, [pc, #192]	; 14828 <__assert_fail@plt+0x36ac>
   14764:	movne	r4, r2
   14768:	strd	r6, [sp, #8]
   1476c:	strd	r8, [sp, #16]
   14770:	mov	r9, r1
   14774:	mov	r8, r0
   14778:	strd	sl, [sp, #24]
   1477c:	str	lr, [sp, #32]
   14780:	sub	sp, sp, #36	; 0x24
   14784:	bl	11080 <__errno_location@plt>
   14788:	ldr	r5, [r4, #4]
   1478c:	mov	r6, r0
   14790:	add	r7, r4, #8
   14794:	mov	r1, #0
   14798:	mov	r3, r9
   1479c:	ldr	ip, [r4, #44]	; 0x2c
   147a0:	mov	r2, r8
   147a4:	mov	r0, r1
   147a8:	ldr	sl, [r6]
   147ac:	orr	r5, r5, #1
   147b0:	str	ip, [sp, #16]
   147b4:	ldr	ip, [r4, #40]	; 0x28
   147b8:	stmib	sp, {r5, r7, ip}
   147bc:	ldr	ip, [r4]
   147c0:	str	ip, [sp]
   147c4:	bl	129d8 <__assert_fail@plt+0x185c>
   147c8:	add	r1, r0, #1
   147cc:	mov	r0, r1
   147d0:	str	r1, [sp, #28]
   147d4:	bl	16e40 <__assert_fail@plt+0x5cc4>
   147d8:	ldr	ip, [r4, #44]	; 0x2c
   147dc:	mov	fp, r0
   147e0:	mov	r3, r9
   147e4:	mov	r2, r8
   147e8:	ldr	r1, [sp, #28]
   147ec:	str	ip, [sp, #16]
   147f0:	ldr	ip, [r4, #40]	; 0x28
   147f4:	stmib	sp, {r5, r7, ip}
   147f8:	ldr	ip, [r4]
   147fc:	str	ip, [sp]
   14800:	bl	129d8 <__assert_fail@plt+0x185c>
   14804:	mov	r0, fp
   14808:	str	sl, [r6]
   1480c:	add	sp, sp, #36	; 0x24
   14810:	ldrd	r4, [sp]
   14814:	ldrd	r6, [sp, #8]
   14818:	ldrd	r8, [sp, #16]
   1481c:	ldrd	sl, [sp, #24]
   14820:	add	sp, sp, #32
   14824:	pop	{pc}		; (ldr pc, [sp], #4)
   14828:	strdeq	sl, [r2], -r0
   1482c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14830:	cmp	r3, #0
   14834:	ldr	r4, [pc, #220]	; 14918 <__assert_fail@plt+0x379c>
   14838:	movne	r4, r3
   1483c:	strd	r6, [sp, #8]
   14840:	mov	r6, r2
   14844:	strd	r8, [sp, #16]
   14848:	mov	r9, r0
   1484c:	strd	sl, [sp, #24]
   14850:	mov	sl, r1
   14854:	str	lr, [sp, #32]
   14858:	sub	sp, sp, #44	; 0x2c
   1485c:	bl	11080 <__errno_location@plt>
   14860:	ldr	r5, [r4, #4]
   14864:	mov	r7, r0
   14868:	mov	r1, #0
   1486c:	add	r8, r4, #8
   14870:	mov	r3, sl
   14874:	ldr	ip, [r4, #44]	; 0x2c
   14878:	mov	r2, r9
   1487c:	mov	r0, r1
   14880:	ldr	lr, [r7]
   14884:	cmp	r6, r1
   14888:	orreq	r5, r5, #1
   1488c:	str	ip, [sp, #16]
   14890:	ldr	ip, [r4, #40]	; 0x28
   14894:	stmib	sp, {r5, r8, ip}
   14898:	ldr	ip, [r4]
   1489c:	str	lr, [sp, #28]
   148a0:	str	ip, [sp]
   148a4:	bl	129d8 <__assert_fail@plt+0x185c>
   148a8:	add	r1, r0, #1
   148ac:	mov	fp, r0
   148b0:	mov	r0, r1
   148b4:	str	r1, [sp, #36]	; 0x24
   148b8:	bl	16e40 <__assert_fail@plt+0x5cc4>
   148bc:	ldr	ip, [r4, #44]	; 0x2c
   148c0:	mov	r3, sl
   148c4:	mov	r2, r9
   148c8:	ldr	r1, [sp, #36]	; 0x24
   148cc:	str	ip, [sp, #16]
   148d0:	ldr	ip, [r4, #40]	; 0x28
   148d4:	str	r0, [sp, #32]
   148d8:	stmib	sp, {r5, r8, ip}
   148dc:	ldr	ip, [r4]
   148e0:	str	ip, [sp]
   148e4:	bl	129d8 <__assert_fail@plt+0x185c>
   148e8:	ldr	lr, [sp, #28]
   148ec:	cmp	r6, #0
   148f0:	ldr	r0, [sp, #32]
   148f4:	str	lr, [r7]
   148f8:	strne	fp, [r6]
   148fc:	add	sp, sp, #44	; 0x2c
   14900:	ldrd	r4, [sp]
   14904:	ldrd	r6, [sp, #8]
   14908:	ldrd	r8, [sp, #16]
   1490c:	ldrd	sl, [sp, #24]
   14910:	add	sp, sp, #32
   14914:	pop	{pc}		; (ldr pc, [sp], #4)
   14918:	strdeq	sl, [r2], -r0
   1491c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14920:	movw	r5, #41244	; 0xa11c
   14924:	movt	r5, #2
   14928:	ldr	r3, [r5, #4]
   1492c:	strd	r6, [sp, #8]
   14930:	str	r8, [sp, #16]
   14934:	str	lr, [sp, #20]
   14938:	ldr	r7, [r5]
   1493c:	cmp	r3, #1
   14940:	ble	14964 <__assert_fail@plt+0x37e8>
   14944:	mov	r4, #1
   14948:	add	r6, r7, #4
   1494c:	ldr	r0, [r6, r4, lsl #3]
   14950:	add	r4, r4, #1
   14954:	bl	126dc <__assert_fail@plt+0x1560>
   14958:	ldr	r3, [r5, #4]
   1495c:	cmp	r3, r4
   14960:	bgt	1494c <__assert_fail@plt+0x37d0>
   14964:	ldr	r0, [r7, #4]
   14968:	movw	r4, #41456	; 0xa1f0
   1496c:	movt	r4, #2
   14970:	cmp	r0, r4
   14974:	beq	14988 <__assert_fail@plt+0x380c>
   14978:	bl	126dc <__assert_fail@plt+0x1560>
   1497c:	mov	r3, #256	; 0x100
   14980:	str	r3, [r5, #8]
   14984:	str	r4, [r5, #12]
   14988:	ldr	r4, [pc, #44]	; 149bc <__assert_fail@plt+0x3840>
   1498c:	cmp	r7, r4
   14990:	beq	149a0 <__assert_fail@plt+0x3824>
   14994:	mov	r0, r7
   14998:	bl	126dc <__assert_fail@plt+0x1560>
   1499c:	str	r4, [r5]
   149a0:	mov	r3, #1
   149a4:	ldrd	r6, [sp, #8]
   149a8:	str	r3, [r5, #4]
   149ac:	ldrd	r4, [sp]
   149b0:	ldr	r8, [sp, #16]
   149b4:	add	sp, sp, #20
   149b8:	pop	{pc}		; (ldr pc, [sp], #4)
   149bc:	andeq	sl, r2, r4, lsr #2
   149c0:	ldr	r3, [pc, #4]	; 149cc <__assert_fail@plt+0x3850>
   149c4:	mvn	r2, #0
   149c8:	b	143c4 <__assert_fail@plt+0x3248>
   149cc:	strdeq	sl, [r2], -r0
   149d0:	ldr	r3, [pc]	; 149d8 <__assert_fail@plt+0x385c>
   149d4:	b	143c4 <__assert_fail@plt+0x3248>
   149d8:	strdeq	sl, [r2], -r0
   149dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149e0:	movw	r4, #41244	; 0xa11c
   149e4:	movt	r4, #2
   149e8:	strd	r6, [sp, #8]
   149ec:	strd	r8, [sp, #16]
   149f0:	strd	sl, [sp, #24]
   149f4:	mov	sl, r0
   149f8:	str	lr, [sp, #32]
   149fc:	sub	sp, sp, #44	; 0x2c
   14a00:	bl	11080 <__errno_location@plt>
   14a04:	ldr	r3, [r0]
   14a08:	mov	r8, r0
   14a0c:	ldr	r2, [r4, #4]
   14a10:	ldr	r5, [r4]
   14a14:	str	r3, [sp, #28]
   14a18:	cmp	r2, #0
   14a1c:	bgt	14a78 <__assert_fail@plt+0x38fc>
   14a20:	add	r3, r4, #8
   14a24:	str	r2, [sp, #36]	; 0x24
   14a28:	rsb	r2, r2, #1
   14a2c:	cmp	r5, r3
   14a30:	beq	14b44 <__assert_fail@plt+0x39c8>
   14a34:	mov	r1, #8
   14a38:	mov	r0, r5
   14a3c:	mvn	r3, #-2147483648	; 0x80000000
   14a40:	str	r1, [sp]
   14a44:	add	r1, sp, #36	; 0x24
   14a48:	bl	170e4 <__assert_fail@plt+0x5f68>
   14a4c:	mov	r5, r0
   14a50:	str	r0, [r4]
   14a54:	ldr	r0, [r4, #4]
   14a58:	mov	r1, #0
   14a5c:	ldr	r2, [sp, #36]	; 0x24
   14a60:	sub	r2, r2, r0
   14a64:	add	r0, r5, r0, lsl #3
   14a68:	lsl	r2, r2, #3
   14a6c:	bl	110b0 <memset@plt>
   14a70:	ldr	r3, [sp, #36]	; 0x24
   14a74:	str	r3, [r4, #4]
   14a78:	movw	r4, #41456	; 0xa1f0
   14a7c:	movt	r4, #2
   14a80:	ldr	r9, [r5]
   14a84:	add	fp, r4, #264	; 0x108
   14a88:	mvn	r3, #0
   14a8c:	ldr	r7, [r4, #260]	; 0x104
   14a90:	mov	r2, sl
   14a94:	ldr	r6, [r5, #4]
   14a98:	str	fp, [sp, #8]
   14a9c:	mov	r1, r9
   14aa0:	ldr	ip, [r4, #256]	; 0x100
   14aa4:	orr	r7, r7, #1
   14aa8:	ldr	lr, [r4, #300]	; 0x12c
   14aac:	mov	r0, r6
   14ab0:	str	ip, [sp]
   14ab4:	str	r7, [sp, #4]
   14ab8:	str	lr, [sp, #16]
   14abc:	ldr	ip, [r4, #296]	; 0x128
   14ac0:	str	ip, [sp, #12]
   14ac4:	bl	129d8 <__assert_fail@plt+0x185c>
   14ac8:	cmp	r9, r0
   14acc:	bhi	14b1c <__assert_fail@plt+0x39a0>
   14ad0:	add	r9, r0, #1
   14ad4:	cmp	r6, r4
   14ad8:	str	r9, [r5]
   14adc:	beq	14ae8 <__assert_fail@plt+0x396c>
   14ae0:	mov	r0, r6
   14ae4:	bl	126dc <__assert_fail@plt+0x1560>
   14ae8:	mov	r0, r9
   14aec:	bl	16e40 <__assert_fail@plt+0x5cc4>
   14af0:	ldr	r3, [r4, #256]	; 0x100
   14af4:	mov	r2, sl
   14af8:	mov	r1, r9
   14afc:	mov	r6, r0
   14b00:	ldr	lr, [r4, #296]	; 0x128
   14b04:	ldr	ip, [r4, #300]	; 0x12c
   14b08:	str	r0, [r5, #4]
   14b0c:	stm	sp, {r3, r7, fp, lr}
   14b10:	mvn	r3, #0
   14b14:	str	ip, [sp, #16]
   14b18:	bl	129d8 <__assert_fail@plt+0x185c>
   14b1c:	ldr	r3, [sp, #28]
   14b20:	mov	r0, r6
   14b24:	str	r3, [r8]
   14b28:	add	sp, sp, #44	; 0x2c
   14b2c:	ldrd	r4, [sp]
   14b30:	ldrd	r6, [sp, #8]
   14b34:	ldrd	r8, [sp, #16]
   14b38:	ldrd	sl, [sp, #24]
   14b3c:	add	sp, sp, #32
   14b40:	pop	{pc}		; (ldr pc, [sp], #4)
   14b44:	mov	r0, #8
   14b48:	mvn	r3, #-2147483648	; 0x80000000
   14b4c:	add	r1, sp, #36	; 0x24
   14b50:	str	r0, [sp]
   14b54:	mov	r0, #0
   14b58:	bl	170e4 <__assert_fail@plt+0x5f68>
   14b5c:	ldrd	r2, [r4, #8]
   14b60:	mov	r5, r0
   14b64:	str	r0, [r4]
   14b68:	strd	r2, [r0]
   14b6c:	b	14a54 <__assert_fail@plt+0x38d8>
   14b70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b74:	movw	r4, #41244	; 0xa11c
   14b78:	movt	r4, #2
   14b7c:	strd	r6, [sp, #8]
   14b80:	strd	r8, [sp, #16]
   14b84:	strd	sl, [sp, #24]
   14b88:	mov	sl, r0
   14b8c:	mov	fp, r1
   14b90:	str	lr, [sp, #32]
   14b94:	sub	sp, sp, #44	; 0x2c
   14b98:	bl	11080 <__errno_location@plt>
   14b9c:	ldr	r3, [r0]
   14ba0:	mov	r8, r0
   14ba4:	ldr	r2, [r4, #4]
   14ba8:	ldr	r5, [r4]
   14bac:	str	r3, [sp, #28]
   14bb0:	cmp	r2, #0
   14bb4:	bgt	14c10 <__assert_fail@plt+0x3a94>
   14bb8:	add	r3, r4, #8
   14bbc:	str	r2, [sp, #36]	; 0x24
   14bc0:	rsb	r2, r2, #1
   14bc4:	cmp	r5, r3
   14bc8:	beq	14cec <__assert_fail@plt+0x3b70>
   14bcc:	mov	r1, #8
   14bd0:	mov	r0, r5
   14bd4:	mvn	r3, #-2147483648	; 0x80000000
   14bd8:	str	r1, [sp]
   14bdc:	add	r1, sp, #36	; 0x24
   14be0:	bl	170e4 <__assert_fail@plt+0x5f68>
   14be4:	mov	r5, r0
   14be8:	str	r0, [r4]
   14bec:	ldr	r0, [r4, #4]
   14bf0:	mov	r1, #0
   14bf4:	ldr	r2, [sp, #36]	; 0x24
   14bf8:	sub	r2, r2, r0
   14bfc:	add	r0, r5, r0, lsl #3
   14c00:	lsl	r2, r2, #3
   14c04:	bl	110b0 <memset@plt>
   14c08:	ldr	r3, [sp, #36]	; 0x24
   14c0c:	str	r3, [r4, #4]
   14c10:	movw	r4, #41456	; 0xa1f0
   14c14:	movt	r4, #2
   14c18:	ldr	r9, [r5]
   14c1c:	add	r0, r4, #264	; 0x108
   14c20:	mov	r3, fp
   14c24:	ldr	r7, [r4, #260]	; 0x104
   14c28:	mov	r2, sl
   14c2c:	ldr	r6, [r5, #4]
   14c30:	str	r0, [sp, #8]
   14c34:	mov	r1, r9
   14c38:	ldr	ip, [r4, #256]	; 0x100
   14c3c:	orr	r7, r7, #1
   14c40:	ldr	lr, [r4, #300]	; 0x12c
   14c44:	mov	r0, r6
   14c48:	str	ip, [sp]
   14c4c:	str	r7, [sp, #4]
   14c50:	str	lr, [sp, #16]
   14c54:	ldr	ip, [r4, #296]	; 0x128
   14c58:	str	ip, [sp, #12]
   14c5c:	bl	129d8 <__assert_fail@plt+0x185c>
   14c60:	cmp	r9, r0
   14c64:	bhi	14cc4 <__assert_fail@plt+0x3b48>
   14c68:	add	r9, r0, #1
   14c6c:	cmp	r6, r4
   14c70:	str	r9, [r5]
   14c74:	beq	14c80 <__assert_fail@plt+0x3b04>
   14c78:	mov	r0, r6
   14c7c:	bl	126dc <__assert_fail@plt+0x1560>
   14c80:	mov	r0, r9
   14c84:	bl	16e40 <__assert_fail@plt+0x5cc4>
   14c88:	ldr	ip, [r4, #256]	; 0x100
   14c8c:	mov	r1, r9
   14c90:	mov	r3, fp
   14c94:	mov	r2, sl
   14c98:	mov	r6, r0
   14c9c:	ldr	r9, [r4, #296]	; 0x128
   14ca0:	ldr	lr, [r4, #300]	; 0x12c
   14ca4:	str	r0, [r5, #4]
   14ca8:	str	ip, [sp]
   14cac:	ldr	ip, [pc, #100]	; 14d18 <__assert_fail@plt+0x3b9c>
   14cb0:	str	r7, [sp, #4]
   14cb4:	str	ip, [sp, #8]
   14cb8:	str	r9, [sp, #12]
   14cbc:	str	lr, [sp, #16]
   14cc0:	bl	129d8 <__assert_fail@plt+0x185c>
   14cc4:	ldr	r3, [sp, #28]
   14cc8:	mov	r0, r6
   14ccc:	str	r3, [r8]
   14cd0:	add	sp, sp, #44	; 0x2c
   14cd4:	ldrd	r4, [sp]
   14cd8:	ldrd	r6, [sp, #8]
   14cdc:	ldrd	r8, [sp, #16]
   14ce0:	ldrd	sl, [sp, #24]
   14ce4:	add	sp, sp, #32
   14ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cec:	mov	r0, #8
   14cf0:	mvn	r3, #-2147483648	; 0x80000000
   14cf4:	add	r1, sp, #36	; 0x24
   14cf8:	str	r0, [sp]
   14cfc:	mov	r0, #0
   14d00:	bl	170e4 <__assert_fail@plt+0x5f68>
   14d04:	ldrd	r2, [r4, #8]
   14d08:	mov	r5, r0
   14d0c:	str	r0, [r4]
   14d10:	strd	r2, [r0]
   14d14:	b	14bec <__assert_fail@plt+0x3a70>
   14d18:	strdeq	sl, [r2], -r8
   14d1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14d20:	mov	r4, #0
   14d24:	mov	r5, #0
   14d28:	strd	r6, [sp, #8]
   14d2c:	cmp	r1, #10
   14d30:	str	lr, [sp, #16]
   14d34:	sub	sp, sp, #100	; 0x64
   14d38:	strd	r4, [sp, #48]	; 0x30
   14d3c:	beq	14d84 <__assert_fail@plt+0x3c08>
   14d40:	mov	r3, sp
   14d44:	strd	r4, [sp, #8]
   14d48:	str	r1, [sp, #48]	; 0x30
   14d4c:	mov	r1, r2
   14d50:	mvn	r2, #0
   14d54:	ldrd	r6, [sp, #48]	; 0x30
   14d58:	strd	r6, [sp]
   14d5c:	strd	r4, [sp, #16]
   14d60:	strd	r4, [sp, #24]
   14d64:	strd	r4, [sp, #32]
   14d68:	strd	r4, [sp, #40]	; 0x28
   14d6c:	bl	143c4 <__assert_fail@plt+0x3248>
   14d70:	add	sp, sp, #100	; 0x64
   14d74:	ldrd	r4, [sp]
   14d78:	ldrd	r6, [sp, #8]
   14d7c:	add	sp, sp, #16
   14d80:	pop	{pc}		; (ldr pc, [sp], #4)
   14d84:	bl	11158 <abort@plt>
   14d88:	strd	r4, [sp, #-20]!	; 0xffffffec
   14d8c:	mov	r4, #0
   14d90:	mov	r5, #0
   14d94:	strd	r6, [sp, #8]
   14d98:	cmp	r1, #10
   14d9c:	str	lr, [sp, #16]
   14da0:	sub	sp, sp, #100	; 0x64
   14da4:	strd	r4, [sp, #48]	; 0x30
   14da8:	beq	14df4 <__assert_fail@plt+0x3c78>
   14dac:	mov	ip, r2
   14db0:	mov	r2, r3
   14db4:	strd	r4, [sp, #8]
   14db8:	str	r1, [sp, #48]	; 0x30
   14dbc:	mov	r3, sp
   14dc0:	mov	r1, ip
   14dc4:	ldrd	r6, [sp, #48]	; 0x30
   14dc8:	strd	r6, [sp]
   14dcc:	strd	r4, [sp, #16]
   14dd0:	strd	r4, [sp, #24]
   14dd4:	strd	r4, [sp, #32]
   14dd8:	strd	r4, [sp, #40]	; 0x28
   14ddc:	bl	143c4 <__assert_fail@plt+0x3248>
   14de0:	add	sp, sp, #100	; 0x64
   14de4:	ldrd	r4, [sp]
   14de8:	ldrd	r6, [sp, #8]
   14dec:	add	sp, sp, #16
   14df0:	pop	{pc}		; (ldr pc, [sp], #4)
   14df4:	bl	11158 <abort@plt>
   14df8:	mov	r2, #0
   14dfc:	mov	r3, #0
   14e00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e04:	strd	r6, [sp, #8]
   14e08:	cmp	r0, #10
   14e0c:	strd	r8, [sp, #16]
   14e10:	strd	sl, [sp, #24]
   14e14:	str	lr, [sp, #32]
   14e18:	sub	sp, sp, #124	; 0x7c
   14e1c:	strd	r2, [sp, #72]	; 0x48
   14e20:	strd	r2, [sp, #80]	; 0x50
   14e24:	strd	r2, [sp, #88]	; 0x58
   14e28:	strd	r2, [sp, #96]	; 0x60
   14e2c:	strd	r2, [sp, #104]	; 0x68
   14e30:	strd	r2, [sp, #112]	; 0x70
   14e34:	beq	14fd8 <__assert_fail@plt+0x3e5c>
   14e38:	mov	r6, r1
   14e3c:	movw	r4, #41244	; 0xa11c
   14e40:	movt	r4, #2
   14e44:	str	r0, [sp, #72]	; 0x48
   14e48:	ldrd	r0, [sp, #72]	; 0x48
   14e4c:	strd	r0, [sp, #24]
   14e50:	strd	r2, [sp, #32]
   14e54:	strd	r2, [sp, #40]	; 0x28
   14e58:	strd	r2, [sp, #48]	; 0x30
   14e5c:	strd	r2, [sp, #56]	; 0x38
   14e60:	strd	r2, [sp, #64]	; 0x40
   14e64:	bl	11080 <__errno_location@plt>
   14e68:	mov	r8, r0
   14e6c:	ldr	r5, [r4]
   14e70:	ldr	r2, [r4, #4]
   14e74:	ldr	r9, [r0]
   14e78:	cmp	r2, #0
   14e7c:	bgt	14ed8 <__assert_fail@plt+0x3d5c>
   14e80:	add	r3, r4, #8
   14e84:	str	r2, [sp, #72]	; 0x48
   14e88:	rsb	r2, r2, #1
   14e8c:	cmp	r5, r3
   14e90:	beq	14fac <__assert_fail@plt+0x3e30>
   14e94:	mov	r3, #8
   14e98:	mov	r0, r5
   14e9c:	add	r1, sp, #72	; 0x48
   14ea0:	str	r3, [sp]
   14ea4:	mvn	r3, #-2147483648	; 0x80000000
   14ea8:	bl	170e4 <__assert_fail@plt+0x5f68>
   14eac:	mov	r5, r0
   14eb0:	str	r0, [r4]
   14eb4:	ldr	r0, [r4, #4]
   14eb8:	mov	r1, #0
   14ebc:	ldr	r2, [sp, #72]	; 0x48
   14ec0:	sub	r2, r2, r0
   14ec4:	add	r0, r5, r0, lsl #3
   14ec8:	lsl	r2, r2, #3
   14ecc:	bl	110b0 <memset@plt>
   14ed0:	ldr	r3, [sp, #72]	; 0x48
   14ed4:	str	r3, [r4, #4]
   14ed8:	ldr	sl, [r5]
   14edc:	add	r0, sp, #32
   14ee0:	mvn	r3, #0
   14ee4:	mov	r2, r6
   14ee8:	ldr	r7, [sp, #28]
   14eec:	ldr	r4, [r5, #4]
   14ef0:	mov	r1, sl
   14ef4:	str	r0, [sp, #8]
   14ef8:	ldr	lr, [sp, #24]
   14efc:	orr	r7, r7, #1
   14f00:	ldr	ip, [sp, #64]	; 0x40
   14f04:	mov	r0, r4
   14f08:	ldr	fp, [sp, #68]	; 0x44
   14f0c:	str	lr, [sp]
   14f10:	str	r7, [sp, #4]
   14f14:	str	ip, [sp, #12]
   14f18:	str	fp, [sp, #16]
   14f1c:	bl	129d8 <__assert_fail@plt+0x185c>
   14f20:	cmp	sl, r0
   14f24:	bhi	14f88 <__assert_fail@plt+0x3e0c>
   14f28:	add	sl, r0, #1
   14f2c:	movw	r3, #41456	; 0xa1f0
   14f30:	movt	r3, #2
   14f34:	cmp	r4, r3
   14f38:	str	sl, [r5]
   14f3c:	beq	14f48 <__assert_fail@plt+0x3dcc>
   14f40:	mov	r0, r4
   14f44:	bl	126dc <__assert_fail@plt+0x1560>
   14f48:	mov	r0, sl
   14f4c:	bl	16e40 <__assert_fail@plt+0x5cc4>
   14f50:	ldr	r3, [sp, #24]
   14f54:	mov	r2, r6
   14f58:	mov	r1, sl
   14f5c:	mov	r4, r0
   14f60:	ldr	lr, [sp, #64]	; 0x40
   14f64:	ldr	ip, [sp, #68]	; 0x44
   14f68:	str	r0, [r5, #4]
   14f6c:	add	r5, sp, #32
   14f70:	stm	sp, {r3, r7}
   14f74:	mvn	r3, #0
   14f78:	str	r5, [sp, #8]
   14f7c:	str	lr, [sp, #12]
   14f80:	str	ip, [sp, #16]
   14f84:	bl	129d8 <__assert_fail@plt+0x185c>
   14f88:	mov	r0, r4
   14f8c:	str	r9, [r8]
   14f90:	add	sp, sp, #124	; 0x7c
   14f94:	ldrd	r4, [sp]
   14f98:	ldrd	r6, [sp, #8]
   14f9c:	ldrd	r8, [sp, #16]
   14fa0:	ldrd	sl, [sp, #24]
   14fa4:	add	sp, sp, #32
   14fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fac:	mov	r0, #8
   14fb0:	mvn	r3, #-2147483648	; 0x80000000
   14fb4:	add	r1, sp, #72	; 0x48
   14fb8:	str	r0, [sp]
   14fbc:	mov	r0, #0
   14fc0:	bl	170e4 <__assert_fail@plt+0x5f68>
   14fc4:	ldrd	r2, [r4, #8]
   14fc8:	mov	r5, r0
   14fcc:	str	r0, [r4]
   14fd0:	strd	r2, [r0]
   14fd4:	b	14eb4 <__assert_fail@plt+0x3d38>
   14fd8:	bl	11158 <abort@plt>
   14fdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fe0:	cmp	r0, #10
   14fe4:	strd	r6, [sp, #8]
   14fe8:	mov	r6, #0
   14fec:	mov	r7, #0
   14ff0:	strd	r8, [sp, #16]
   14ff4:	strd	sl, [sp, #24]
   14ff8:	str	lr, [sp, #32]
   14ffc:	sub	sp, sp, #124	; 0x7c
   15000:	strd	r6, [sp, #72]	; 0x48
   15004:	strd	r6, [sp, #80]	; 0x50
   15008:	strd	r6, [sp, #88]	; 0x58
   1500c:	strd	r6, [sp, #96]	; 0x60
   15010:	strd	r6, [sp, #104]	; 0x68
   15014:	strd	r6, [sp, #112]	; 0x70
   15018:	beq	151c4 <__assert_fail@plt+0x4048>
   1501c:	mov	sl, r2
   15020:	movw	r5, #41244	; 0xa11c
   15024:	movt	r5, #2
   15028:	str	r0, [sp, #72]	; 0x48
   1502c:	mov	r9, r1
   15030:	ldrd	r2, [sp, #72]	; 0x48
   15034:	strd	r2, [sp, #24]
   15038:	strd	r6, [sp, #32]
   1503c:	strd	r6, [sp, #40]	; 0x28
   15040:	strd	r6, [sp, #48]	; 0x30
   15044:	strd	r6, [sp, #56]	; 0x38
   15048:	strd	r6, [sp, #64]	; 0x40
   1504c:	bl	11080 <__errno_location@plt>
   15050:	mov	r7, r0
   15054:	ldr	r4, [r5]
   15058:	ldr	r2, [r5, #4]
   1505c:	ldr	fp, [r0]
   15060:	cmp	r2, #0
   15064:	bgt	150c0 <__assert_fail@plt+0x3f44>
   15068:	add	r3, r5, #8
   1506c:	str	r2, [sp, #72]	; 0x48
   15070:	rsb	r2, r2, #1
   15074:	cmp	r4, r3
   15078:	beq	15198 <__assert_fail@plt+0x401c>
   1507c:	mov	r3, #8
   15080:	mov	r0, r4
   15084:	add	r1, sp, #72	; 0x48
   15088:	str	r3, [sp]
   1508c:	mvn	r3, #-2147483648	; 0x80000000
   15090:	bl	170e4 <__assert_fail@plt+0x5f68>
   15094:	mov	r4, r0
   15098:	str	r0, [r5]
   1509c:	ldr	r0, [r5, #4]
   150a0:	mov	r1, #0
   150a4:	ldr	r2, [sp, #72]	; 0x48
   150a8:	sub	r2, r2, r0
   150ac:	add	r0, r4, r0, lsl #3
   150b0:	lsl	r2, r2, #3
   150b4:	bl	110b0 <memset@plt>
   150b8:	ldr	r3, [sp, #72]	; 0x48
   150bc:	str	r3, [r5, #4]
   150c0:	ldr	ip, [sp, #24]
   150c4:	add	r0, sp, #32
   150c8:	mov	r3, sl
   150cc:	mov	r2, r9
   150d0:	ldr	r6, [sp, #28]
   150d4:	ldr	r8, [r4]
   150d8:	ldr	r5, [r4, #4]
   150dc:	str	ip, [sp]
   150e0:	orr	r6, r6, #1
   150e4:	ldr	ip, [sp, #64]	; 0x40
   150e8:	mov	r1, r8
   150ec:	str	r6, [sp, #4]
   150f0:	ldr	lr, [sp, #68]	; 0x44
   150f4:	str	r0, [sp, #8]
   150f8:	mov	r0, r5
   150fc:	str	ip, [sp, #12]
   15100:	str	lr, [sp, #16]
   15104:	bl	129d8 <__assert_fail@plt+0x185c>
   15108:	cmp	r8, r0
   1510c:	bhi	15174 <__assert_fail@plt+0x3ff8>
   15110:	add	r8, r0, #1
   15114:	movw	r3, #41456	; 0xa1f0
   15118:	movt	r3, #2
   1511c:	cmp	r5, r3
   15120:	str	r8, [r4]
   15124:	beq	15130 <__assert_fail@plt+0x3fb4>
   15128:	mov	r0, r5
   1512c:	bl	126dc <__assert_fail@plt+0x1560>
   15130:	mov	r0, r8
   15134:	bl	16e40 <__assert_fail@plt+0x5cc4>
   15138:	ldr	lr, [sp, #24]
   1513c:	mov	r1, r8
   15140:	mov	r3, sl
   15144:	mov	r2, r9
   15148:	mov	r5, r0
   1514c:	ldr	r8, [sp, #64]	; 0x40
   15150:	ldr	ip, [sp, #68]	; 0x44
   15154:	str	r0, [r4, #4]
   15158:	str	lr, [sp]
   1515c:	add	lr, sp, #32
   15160:	str	r6, [sp, #4]
   15164:	str	lr, [sp, #8]
   15168:	str	r8, [sp, #12]
   1516c:	str	ip, [sp, #16]
   15170:	bl	129d8 <__assert_fail@plt+0x185c>
   15174:	mov	r0, r5
   15178:	str	fp, [r7]
   1517c:	add	sp, sp, #124	; 0x7c
   15180:	ldrd	r4, [sp]
   15184:	ldrd	r6, [sp, #8]
   15188:	ldrd	r8, [sp, #16]
   1518c:	ldrd	sl, [sp, #24]
   15190:	add	sp, sp, #32
   15194:	pop	{pc}		; (ldr pc, [sp], #4)
   15198:	mov	r0, #8
   1519c:	mvn	r3, #-2147483648	; 0x80000000
   151a0:	add	r1, sp, #72	; 0x48
   151a4:	str	r0, [sp]
   151a8:	mov	r0, #0
   151ac:	bl	170e4 <__assert_fail@plt+0x5f68>
   151b0:	ldrd	r2, [r5, #8]
   151b4:	mov	r4, r0
   151b8:	str	r0, [r5]
   151bc:	strd	r2, [r0]
   151c0:	b	1509c <__assert_fail@plt+0x3f20>
   151c4:	bl	11158 <abort@plt>
   151c8:	ldr	r3, [pc, #492]	; 153bc <__assert_fail@plt+0x4240>
   151cc:	lsr	ip, r2, #5
   151d0:	and	r2, r2, #31
   151d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   151d8:	movw	r5, #41244	; 0xa11c
   151dc:	movt	r5, #2
   151e0:	strd	r6, [sp, #8]
   151e4:	strd	r8, [sp, #16]
   151e8:	strd	sl, [sp, #24]
   151ec:	mov	sl, r0
   151f0:	mov	fp, r1
   151f4:	ldrd	r0, [r3]
   151f8:	str	lr, [sp, #32]
   151fc:	sub	sp, sp, #92	; 0x5c
   15200:	ldrd	r8, [r3, #8]
   15204:	add	r6, sp, #48	; 0x30
   15208:	strd	r0, [sp, #40]	; 0x28
   1520c:	ldrd	r0, [r3, #16]
   15210:	strd	r8, [sp, #48]	; 0x30
   15214:	ldrd	r8, [r3, #24]
   15218:	strd	r0, [sp, #56]	; 0x38
   1521c:	ldrd	r0, [r3, #32]
   15220:	strd	r8, [sp, #64]	; 0x40
   15224:	ldrd	r8, [r3, #40]	; 0x28
   15228:	strd	r0, [sp, #72]	; 0x48
   1522c:	strd	r8, [sp, #80]	; 0x50
   15230:	ldr	r3, [r6, ip, lsl #2]
   15234:	mvn	r1, r3, lsr r2
   15238:	and	r1, r1, #1
   1523c:	eor	r2, r3, r1, lsl r2
   15240:	str	r2, [r6, ip, lsl #2]
   15244:	bl	11080 <__errno_location@plt>
   15248:	ldr	r3, [r0]
   1524c:	mov	r8, r0
   15250:	ldr	r2, [r5, #4]
   15254:	ldr	r4, [r5]
   15258:	str	r3, [sp, #28]
   1525c:	cmp	r2, #0
   15260:	bgt	152bc <__assert_fail@plt+0x4140>
   15264:	add	r3, r5, #8
   15268:	str	r2, [sp, #36]	; 0x24
   1526c:	rsb	r2, r2, #1
   15270:	cmp	r4, r3
   15274:	beq	15390 <__assert_fail@plt+0x4214>
   15278:	mov	r1, #8
   1527c:	mov	r0, r4
   15280:	mvn	r3, #-2147483648	; 0x80000000
   15284:	str	r1, [sp]
   15288:	add	r1, sp, #36	; 0x24
   1528c:	bl	170e4 <__assert_fail@plt+0x5f68>
   15290:	mov	r4, r0
   15294:	str	r0, [r5]
   15298:	ldr	r0, [r5, #4]
   1529c:	mov	r1, #0
   152a0:	ldr	r2, [sp, #36]	; 0x24
   152a4:	sub	r2, r2, r0
   152a8:	add	r0, r4, r0, lsl #3
   152ac:	lsl	r2, r2, #3
   152b0:	bl	110b0 <memset@plt>
   152b4:	ldr	r3, [sp, #36]	; 0x24
   152b8:	str	r3, [r5, #4]
   152bc:	ldr	ip, [sp, #40]	; 0x28
   152c0:	mov	r3, fp
   152c4:	mov	r2, sl
   152c8:	ldr	r7, [sp, #44]	; 0x2c
   152cc:	ldr	r9, [r4]
   152d0:	ldr	r5, [r4, #4]
   152d4:	str	ip, [sp]
   152d8:	orr	r7, r7, #1
   152dc:	ldr	ip, [sp, #80]	; 0x50
   152e0:	mov	r1, r9
   152e4:	str	r7, [sp, #4]
   152e8:	ldr	lr, [sp, #84]	; 0x54
   152ec:	mov	r0, r5
   152f0:	str	r6, [sp, #8]
   152f4:	str	ip, [sp, #12]
   152f8:	str	lr, [sp, #16]
   152fc:	bl	129d8 <__assert_fail@plt+0x185c>
   15300:	cmp	r9, r0
   15304:	bhi	15368 <__assert_fail@plt+0x41ec>
   15308:	add	r9, r0, #1
   1530c:	movw	r3, #41456	; 0xa1f0
   15310:	movt	r3, #2
   15314:	cmp	r5, r3
   15318:	str	r9, [r4]
   1531c:	beq	15328 <__assert_fail@plt+0x41ac>
   15320:	mov	r0, r5
   15324:	bl	126dc <__assert_fail@plt+0x1560>
   15328:	mov	r0, r9
   1532c:	bl	16e40 <__assert_fail@plt+0x5cc4>
   15330:	mov	r1, r9
   15334:	ldr	ip, [sp, #40]	; 0x28
   15338:	mov	r3, fp
   1533c:	mov	r2, sl
   15340:	mov	r5, r0
   15344:	ldr	r9, [sp, #80]	; 0x50
   15348:	ldr	lr, [sp, #84]	; 0x54
   1534c:	str	r0, [r4, #4]
   15350:	str	ip, [sp]
   15354:	str	r7, [sp, #4]
   15358:	str	r6, [sp, #8]
   1535c:	str	r9, [sp, #12]
   15360:	str	lr, [sp, #16]
   15364:	bl	129d8 <__assert_fail@plt+0x185c>
   15368:	ldr	r3, [sp, #28]
   1536c:	mov	r0, r5
   15370:	str	r3, [r8]
   15374:	add	sp, sp, #92	; 0x5c
   15378:	ldrd	r4, [sp]
   1537c:	ldrd	r6, [sp, #8]
   15380:	ldrd	r8, [sp, #16]
   15384:	ldrd	sl, [sp, #24]
   15388:	add	sp, sp, #32
   1538c:	pop	{pc}		; (ldr pc, [sp], #4)
   15390:	mov	r0, #8
   15394:	mvn	r3, #-2147483648	; 0x80000000
   15398:	add	r1, sp, #36	; 0x24
   1539c:	str	r0, [sp]
   153a0:	mov	r0, #0
   153a4:	bl	170e4 <__assert_fail@plt+0x5f68>
   153a8:	ldrd	r2, [r5, #8]
   153ac:	mov	r4, r0
   153b0:	str	r0, [r5]
   153b4:	strd	r2, [r0]
   153b8:	b	15298 <__assert_fail@plt+0x411c>
   153bc:	strdeq	sl, [r2], -r0
   153c0:	ldr	ip, [pc, #476]	; 155a4 <__assert_fail@plt+0x4428>
   153c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153c8:	movw	r4, #41244	; 0xa11c
   153cc:	movt	r4, #2
   153d0:	ldrd	r2, [ip, #8]
   153d4:	strd	r6, [sp, #8]
   153d8:	lsr	r7, r1, #5
   153dc:	mov	r6, r0
   153e0:	strd	r8, [sp, #16]
   153e4:	str	lr, [sp, #32]
   153e8:	and	lr, r1, #31
   153ec:	ldrd	r0, [ip]
   153f0:	strd	sl, [sp, #24]
   153f4:	sub	sp, sp, #84	; 0x54
   153f8:	add	r5, sp, #40	; 0x28
   153fc:	strd	r0, [sp, #32]
   15400:	strd	r2, [sp, #40]	; 0x28
   15404:	ldrd	r0, [ip, #16]
   15408:	ldrd	r2, [ip, #24]
   1540c:	strd	r0, [sp, #48]	; 0x30
   15410:	ldrd	r0, [ip, #32]
   15414:	strd	r2, [sp, #56]	; 0x38
   15418:	ldrd	r2, [ip, #40]	; 0x28
   1541c:	strd	r0, [sp, #64]	; 0x40
   15420:	strd	r2, [sp, #72]	; 0x48
   15424:	ldr	r1, [r5, r7, lsl #2]
   15428:	mvn	r3, r1, lsr lr
   1542c:	and	r3, r3, #1
   15430:	eor	r1, r1, r3, lsl lr
   15434:	str	r1, [r5, r7, lsl #2]
   15438:	bl	11080 <__errno_location@plt>
   1543c:	mov	r9, r0
   15440:	ldr	sl, [r0]
   15444:	ldr	r2, [r4, #4]
   15448:	ldr	r7, [r4]
   1544c:	cmp	r2, #0
   15450:	bgt	154ac <__assert_fail@plt+0x4330>
   15454:	add	r3, r4, #8
   15458:	str	r2, [sp, #28]
   1545c:	rsb	r2, r2, #1
   15460:	cmp	r7, r3
   15464:	beq	15578 <__assert_fail@plt+0x43fc>
   15468:	mov	r1, #8
   1546c:	mov	r0, r7
   15470:	mvn	r3, #-2147483648	; 0x80000000
   15474:	str	r1, [sp]
   15478:	add	r1, sp, #28
   1547c:	bl	170e4 <__assert_fail@plt+0x5f68>
   15480:	mov	r7, r0
   15484:	str	r0, [r4]
   15488:	ldr	r0, [r4, #4]
   1548c:	mov	r1, #0
   15490:	ldr	r2, [sp, #28]
   15494:	sub	r2, r2, r0
   15498:	add	r0, r7, r0, lsl #3
   1549c:	lsl	r2, r2, #3
   154a0:	bl	110b0 <memset@plt>
   154a4:	ldr	r3, [sp, #28]
   154a8:	str	r3, [r4, #4]
   154ac:	ldr	ip, [sp, #32]
   154b0:	mvn	r3, #0
   154b4:	mov	r2, r6
   154b8:	ldr	r8, [sp, #36]	; 0x24
   154bc:	ldr	fp, [r7]
   154c0:	ldr	r4, [r7, #4]
   154c4:	str	ip, [sp]
   154c8:	orr	r8, r8, #1
   154cc:	ldr	ip, [sp, #72]	; 0x48
   154d0:	mov	r1, fp
   154d4:	str	r8, [sp, #4]
   154d8:	ldr	lr, [sp, #76]	; 0x4c
   154dc:	mov	r0, r4
   154e0:	str	r5, [sp, #8]
   154e4:	str	ip, [sp, #12]
   154e8:	str	lr, [sp, #16]
   154ec:	bl	129d8 <__assert_fail@plt+0x185c>
   154f0:	cmp	fp, r0
   154f4:	bhi	15554 <__assert_fail@plt+0x43d8>
   154f8:	add	fp, r0, #1
   154fc:	movw	r3, #41456	; 0xa1f0
   15500:	movt	r3, #2
   15504:	cmp	r4, r3
   15508:	str	fp, [r7]
   1550c:	beq	15518 <__assert_fail@plt+0x439c>
   15510:	mov	r0, r4
   15514:	bl	126dc <__assert_fail@plt+0x1560>
   15518:	mov	r0, fp
   1551c:	bl	16e40 <__assert_fail@plt+0x5cc4>
   15520:	ldr	r3, [sp, #32]
   15524:	mov	r2, r6
   15528:	mov	r1, fp
   1552c:	mov	r4, r0
   15530:	ldr	lr, [sp, #72]	; 0x48
   15534:	ldr	ip, [sp, #76]	; 0x4c
   15538:	str	r0, [r7, #4]
   1553c:	stm	sp, {r3, r8}
   15540:	mvn	r3, #0
   15544:	str	r5, [sp, #8]
   15548:	str	lr, [sp, #12]
   1554c:	str	ip, [sp, #16]
   15550:	bl	129d8 <__assert_fail@plt+0x185c>
   15554:	mov	r0, r4
   15558:	str	sl, [r9]
   1555c:	add	sp, sp, #84	; 0x54
   15560:	ldrd	r4, [sp]
   15564:	ldrd	r6, [sp, #8]
   15568:	ldrd	r8, [sp, #16]
   1556c:	ldrd	sl, [sp, #24]
   15570:	add	sp, sp, #32
   15574:	pop	{pc}		; (ldr pc, [sp], #4)
   15578:	mov	r0, #8
   1557c:	mvn	r3, #-2147483648	; 0x80000000
   15580:	add	r1, sp, #28
   15584:	str	r0, [sp]
   15588:	mov	r0, #0
   1558c:	bl	170e4 <__assert_fail@plt+0x5f68>
   15590:	ldrd	r2, [r4, #8]
   15594:	mov	r7, r0
   15598:	str	r0, [r4]
   1559c:	strd	r2, [r0]
   155a0:	b	15488 <__assert_fail@plt+0x430c>
   155a4:	strdeq	sl, [r2], -r0
   155a8:	ldr	ip, [pc, #472]	; 15788 <__assert_fail@plt+0x460c>
   155ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   155b0:	mov	r5, r0
   155b4:	movw	r4, #41244	; 0xa11c
   155b8:	movt	r4, #2
   155bc:	ldrd	r2, [ip]
   155c0:	ldrd	r0, [ip, #8]
   155c4:	strd	r6, [sp, #8]
   155c8:	strd	r8, [sp, #16]
   155cc:	strd	sl, [sp, #24]
   155d0:	str	lr, [sp, #32]
   155d4:	sub	sp, sp, #84	; 0x54
   155d8:	strd	r2, [sp, #32]
   155dc:	strd	r0, [sp, #40]	; 0x28
   155e0:	ldr	r6, [sp, #44]	; 0x2c
   155e4:	ldrd	r2, [ip, #16]
   155e8:	ldrd	r0, [ip, #24]
   155ec:	mvn	lr, r6
   155f0:	and	lr, lr, #67108864	; 0x4000000
   155f4:	eor	lr, lr, r6
   155f8:	ldrd	r6, [ip, #40]	; 0x28
   155fc:	strd	r2, [sp, #48]	; 0x30
   15600:	ldrd	r2, [ip, #32]
   15604:	str	lr, [sp, #44]	; 0x2c
   15608:	strd	r0, [sp, #56]	; 0x38
   1560c:	strd	r2, [sp, #64]	; 0x40
   15610:	strd	r6, [sp, #72]	; 0x48
   15614:	bl	11080 <__errno_location@plt>
   15618:	mov	r8, r0
   1561c:	ldr	r9, [r0]
   15620:	ldr	r2, [r4, #4]
   15624:	ldr	r6, [r4]
   15628:	cmp	r2, #0
   1562c:	bgt	15688 <__assert_fail@plt+0x450c>
   15630:	add	r3, r4, #8
   15634:	str	r2, [sp, #28]
   15638:	rsb	r2, r2, #1
   1563c:	cmp	r6, r3
   15640:	beq	1575c <__assert_fail@plt+0x45e0>
   15644:	mov	r1, #8
   15648:	mov	r0, r6
   1564c:	mvn	r3, #-2147483648	; 0x80000000
   15650:	str	r1, [sp]
   15654:	add	r1, sp, #28
   15658:	bl	170e4 <__assert_fail@plt+0x5f68>
   1565c:	mov	r6, r0
   15660:	str	r0, [r4]
   15664:	ldr	r0, [r4, #4]
   15668:	mov	r1, #0
   1566c:	ldr	r2, [sp, #28]
   15670:	sub	r2, r2, r0
   15674:	add	r0, r6, r0, lsl #3
   15678:	lsl	r2, r2, #3
   1567c:	bl	110b0 <memset@plt>
   15680:	ldr	r3, [sp, #28]
   15684:	str	r3, [r4, #4]
   15688:	ldr	sl, [r6]
   1568c:	add	r0, sp, #40	; 0x28
   15690:	mvn	r3, #0
   15694:	mov	r2, r5
   15698:	ldr	r7, [sp, #36]	; 0x24
   1569c:	ldr	r4, [r6, #4]
   156a0:	mov	r1, sl
   156a4:	str	r0, [sp, #8]
   156a8:	ldr	lr, [sp, #32]
   156ac:	orr	r7, r7, #1
   156b0:	ldr	ip, [sp, #72]	; 0x48
   156b4:	mov	r0, r4
   156b8:	ldr	fp, [sp, #76]	; 0x4c
   156bc:	str	lr, [sp]
   156c0:	str	r7, [sp, #4]
   156c4:	str	ip, [sp, #12]
   156c8:	str	fp, [sp, #16]
   156cc:	bl	129d8 <__assert_fail@plt+0x185c>
   156d0:	cmp	sl, r0
   156d4:	bhi	15738 <__assert_fail@plt+0x45bc>
   156d8:	add	sl, r0, #1
   156dc:	movw	r3, #41456	; 0xa1f0
   156e0:	movt	r3, #2
   156e4:	cmp	r4, r3
   156e8:	str	sl, [r6]
   156ec:	beq	156f8 <__assert_fail@plt+0x457c>
   156f0:	mov	r0, r4
   156f4:	bl	126dc <__assert_fail@plt+0x1560>
   156f8:	mov	r0, sl
   156fc:	bl	16e40 <__assert_fail@plt+0x5cc4>
   15700:	ldr	r3, [sp, #32]
   15704:	mov	r2, r5
   15708:	add	r5, sp, #40	; 0x28
   1570c:	mov	r1, sl
   15710:	mov	r4, r0
   15714:	ldr	lr, [sp, #72]	; 0x48
   15718:	ldr	ip, [sp, #76]	; 0x4c
   1571c:	str	r0, [r6, #4]
   15720:	stm	sp, {r3, r7}
   15724:	mvn	r3, #0
   15728:	str	r5, [sp, #8]
   1572c:	str	lr, [sp, #12]
   15730:	str	ip, [sp, #16]
   15734:	bl	129d8 <__assert_fail@plt+0x185c>
   15738:	mov	r0, r4
   1573c:	str	r9, [r8]
   15740:	add	sp, sp, #84	; 0x54
   15744:	ldrd	r4, [sp]
   15748:	ldrd	r6, [sp, #8]
   1574c:	ldrd	r8, [sp, #16]
   15750:	ldrd	sl, [sp, #24]
   15754:	add	sp, sp, #32
   15758:	pop	{pc}		; (ldr pc, [sp], #4)
   1575c:	mov	r0, #8
   15760:	mvn	r3, #-2147483648	; 0x80000000
   15764:	add	r1, sp, #28
   15768:	str	r0, [sp]
   1576c:	mov	r0, #0
   15770:	bl	170e4 <__assert_fail@plt+0x5f68>
   15774:	ldrd	r2, [r4, #8]
   15778:	mov	r6, r0
   1577c:	str	r0, [r4]
   15780:	strd	r2, [r0]
   15784:	b	15664 <__assert_fail@plt+0x44e8>
   15788:	strdeq	sl, [r2], -r0
   1578c:	ldr	ip, [pc, #480]	; 15974 <__assert_fail@plt+0x47f8>
   15790:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15794:	mov	r5, r0
   15798:	movw	r4, #41244	; 0xa11c
   1579c:	movt	r4, #2
   157a0:	ldrd	r2, [ip]
   157a4:	strd	r6, [sp, #8]
   157a8:	mov	r6, r1
   157ac:	ldrd	r0, [ip, #8]
   157b0:	strd	r8, [sp, #16]
   157b4:	strd	sl, [sp, #24]
   157b8:	str	lr, [sp, #32]
   157bc:	sub	sp, sp, #84	; 0x54
   157c0:	ldrd	r8, [ip, #40]	; 0x28
   157c4:	strd	r2, [sp, #32]
   157c8:	strd	r0, [sp, #40]	; 0x28
   157cc:	ldrd	r2, [ip, #16]
   157d0:	ldr	r7, [sp, #44]	; 0x2c
   157d4:	ldrd	r0, [ip, #24]
   157d8:	strd	r2, [sp, #48]	; 0x30
   157dc:	ldrd	r2, [ip, #32]
   157e0:	mvn	lr, r7
   157e4:	and	lr, lr, #67108864	; 0x4000000
   157e8:	eor	lr, lr, r7
   157ec:	str	lr, [sp, #44]	; 0x2c
   157f0:	strd	r0, [sp, #56]	; 0x38
   157f4:	strd	r2, [sp, #64]	; 0x40
   157f8:	strd	r8, [sp, #72]	; 0x48
   157fc:	bl	11080 <__errno_location@plt>
   15800:	mov	r9, r0
   15804:	ldr	sl, [r0]
   15808:	ldr	r2, [r4, #4]
   1580c:	ldr	r7, [r4]
   15810:	cmp	r2, #0
   15814:	bgt	15870 <__assert_fail@plt+0x46f4>
   15818:	add	r3, r4, #8
   1581c:	str	r2, [sp, #28]
   15820:	rsb	r2, r2, #1
   15824:	cmp	r7, r3
   15828:	beq	15948 <__assert_fail@plt+0x47cc>
   1582c:	mov	r1, #8
   15830:	mov	r0, r7
   15834:	mvn	r3, #-2147483648	; 0x80000000
   15838:	str	r1, [sp]
   1583c:	add	r1, sp, #28
   15840:	bl	170e4 <__assert_fail@plt+0x5f68>
   15844:	mov	r7, r0
   15848:	str	r0, [r4]
   1584c:	ldr	r0, [r4, #4]
   15850:	mov	r1, #0
   15854:	ldr	r2, [sp, #28]
   15858:	sub	r2, r2, r0
   1585c:	add	r0, r7, r0, lsl #3
   15860:	lsl	r2, r2, #3
   15864:	bl	110b0 <memset@plt>
   15868:	ldr	r3, [sp, #28]
   1586c:	str	r3, [r4, #4]
   15870:	ldr	ip, [sp, #32]
   15874:	add	r0, sp, #40	; 0x28
   15878:	mov	r3, r6
   1587c:	mov	r2, r5
   15880:	ldr	r8, [sp, #36]	; 0x24
   15884:	ldr	fp, [r7]
   15888:	ldr	r4, [r7, #4]
   1588c:	str	ip, [sp]
   15890:	orr	r8, r8, #1
   15894:	ldr	ip, [sp, #72]	; 0x48
   15898:	mov	r1, fp
   1589c:	str	r8, [sp, #4]
   158a0:	ldr	lr, [sp, #76]	; 0x4c
   158a4:	str	r0, [sp, #8]
   158a8:	mov	r0, r4
   158ac:	str	ip, [sp, #12]
   158b0:	str	lr, [sp, #16]
   158b4:	bl	129d8 <__assert_fail@plt+0x185c>
   158b8:	cmp	fp, r0
   158bc:	bhi	15924 <__assert_fail@plt+0x47a8>
   158c0:	add	fp, r0, #1
   158c4:	movw	r3, #41456	; 0xa1f0
   158c8:	movt	r3, #2
   158cc:	cmp	r4, r3
   158d0:	str	fp, [r7]
   158d4:	beq	158e0 <__assert_fail@plt+0x4764>
   158d8:	mov	r0, r4
   158dc:	bl	126dc <__assert_fail@plt+0x1560>
   158e0:	mov	r0, fp
   158e4:	bl	16e40 <__assert_fail@plt+0x5cc4>
   158e8:	ldr	lr, [sp, #32]
   158ec:	mov	r2, r5
   158f0:	mov	r3, r6
   158f4:	mov	r1, fp
   158f8:	mov	r4, r0
   158fc:	ldr	r5, [sp, #72]	; 0x48
   15900:	ldr	ip, [sp, #76]	; 0x4c
   15904:	str	r0, [r7, #4]
   15908:	str	lr, [sp]
   1590c:	add	lr, sp, #40	; 0x28
   15910:	str	r8, [sp, #4]
   15914:	str	lr, [sp, #8]
   15918:	str	r5, [sp, #12]
   1591c:	str	ip, [sp, #16]
   15920:	bl	129d8 <__assert_fail@plt+0x185c>
   15924:	mov	r0, r4
   15928:	str	sl, [r9]
   1592c:	add	sp, sp, #84	; 0x54
   15930:	ldrd	r4, [sp]
   15934:	ldrd	r6, [sp, #8]
   15938:	ldrd	r8, [sp, #16]
   1593c:	ldrd	sl, [sp, #24]
   15940:	add	sp, sp, #32
   15944:	pop	{pc}		; (ldr pc, [sp], #4)
   15948:	mov	r0, #8
   1594c:	mvn	r3, #-2147483648	; 0x80000000
   15950:	add	r1, sp, #28
   15954:	str	r0, [sp]
   15958:	mov	r0, #0
   1595c:	bl	170e4 <__assert_fail@plt+0x5f68>
   15960:	ldrd	r2, [r4, #8]
   15964:	mov	r7, r0
   15968:	str	r0, [r4]
   1596c:	strd	r2, [r0]
   15970:	b	1584c <__assert_fail@plt+0x46d0>
   15974:	strdeq	sl, [r2], -r0
   15978:	strd	r4, [sp, #-12]!
   1597c:	mov	r4, #0
   15980:	mov	r5, #0
   15984:	str	lr, [sp, #8]
   15988:	sub	sp, sp, #100	; 0x64
   1598c:	cmp	r1, #10
   15990:	strd	r4, [sp]
   15994:	strd	r4, [sp, #8]
   15998:	strd	r4, [sp, #16]
   1599c:	strd	r4, [sp, #24]
   159a0:	strd	r4, [sp, #32]
   159a4:	strd	r4, [sp, #40]	; 0x28
   159a8:	beq	159d8 <__assert_fail@plt+0x485c>
   159ac:	mov	ip, #67108864	; 0x4000000
   159b0:	mov	r3, sp
   159b4:	str	r1, [sp]
   159b8:	mov	r1, r2
   159bc:	mvn	r2, #0
   159c0:	str	ip, [sp, #12]
   159c4:	bl	143c4 <__assert_fail@plt+0x3248>
   159c8:	add	sp, sp, #100	; 0x64
   159cc:	ldrd	r4, [sp]
   159d0:	add	sp, sp, #8
   159d4:	pop	{pc}		; (ldr pc, [sp], #4)
   159d8:	bl	11158 <abort@plt>
   159dc:	ldr	ip, [pc, #156]	; 15a80 <__assert_fail@plt+0x4904>
   159e0:	cmp	r2, #0
   159e4:	cmpne	r1, #0
   159e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   159ec:	strd	r6, [sp, #8]
   159f0:	mov	r6, r2
   159f4:	str	r8, [sp, #16]
   159f8:	mov	r8, r3
   159fc:	strd	sl, [sp, #20]
   15a00:	ldrd	r4, [ip]
   15a04:	str	lr, [sp, #28]
   15a08:	sub	sp, sp, #48	; 0x30
   15a0c:	mov	lr, #10
   15a10:	ldrd	r2, [ip, #8]
   15a14:	ldrd	sl, [ip, #16]
   15a18:	strd	r4, [sp]
   15a1c:	ldrd	r4, [ip, #32]
   15a20:	str	lr, [sp]
   15a24:	strd	r2, [sp, #8]
   15a28:	strd	sl, [sp, #16]
   15a2c:	ldrd	r2, [ip, #24]
   15a30:	ldrd	sl, [ip, #40]	; 0x28
   15a34:	strd	r2, [sp, #24]
   15a38:	strd	r4, [sp, #32]
   15a3c:	strd	sl, [sp, #40]	; 0x28
   15a40:	beq	15a7c <__assert_fail@plt+0x4900>
   15a44:	mov	r7, r1
   15a48:	mov	r3, sp
   15a4c:	mov	r1, r8
   15a50:	mvn	r2, #0
   15a54:	str	r7, [sp, #40]	; 0x28
   15a58:	str	r6, [sp, #44]	; 0x2c
   15a5c:	bl	143c4 <__assert_fail@plt+0x3248>
   15a60:	add	sp, sp, #48	; 0x30
   15a64:	ldrd	r4, [sp]
   15a68:	ldrd	r6, [sp, #8]
   15a6c:	ldr	r8, [sp, #16]
   15a70:	ldrd	sl, [sp, #20]
   15a74:	add	sp, sp, #28
   15a78:	pop	{pc}		; (ldr pc, [sp], #4)
   15a7c:	bl	11158 <abort@plt>
   15a80:	strdeq	sl, [r2], -r0
   15a84:	ldr	ip, [pc, #156]	; 15b28 <__assert_fail@plt+0x49ac>
   15a88:	cmp	r2, #0
   15a8c:	cmpne	r1, #0
   15a90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a94:	strd	r6, [sp, #8]
   15a98:	mov	r6, r2
   15a9c:	str	r8, [sp, #16]
   15aa0:	mov	r8, r3
   15aa4:	strd	sl, [sp, #20]
   15aa8:	ldrd	r4, [ip]
   15aac:	str	lr, [sp, #28]
   15ab0:	sub	sp, sp, #48	; 0x30
   15ab4:	mov	lr, #10
   15ab8:	ldrd	r2, [ip, #8]
   15abc:	ldrd	sl, [ip, #16]
   15ac0:	strd	r4, [sp]
   15ac4:	ldrd	r4, [ip, #32]
   15ac8:	str	lr, [sp]
   15acc:	strd	r2, [sp, #8]
   15ad0:	strd	sl, [sp, #16]
   15ad4:	ldrd	r2, [ip, #24]
   15ad8:	ldrd	sl, [ip, #40]	; 0x28
   15adc:	strd	r2, [sp, #24]
   15ae0:	strd	r4, [sp, #32]
   15ae4:	strd	sl, [sp, #40]	; 0x28
   15ae8:	beq	15b24 <__assert_fail@plt+0x49a8>
   15aec:	ldr	r2, [sp, #80]	; 0x50
   15af0:	mov	r7, r1
   15af4:	mov	r3, sp
   15af8:	mov	r1, r8
   15afc:	str	r7, [sp, #40]	; 0x28
   15b00:	str	r6, [sp, #44]	; 0x2c
   15b04:	bl	143c4 <__assert_fail@plt+0x3248>
   15b08:	add	sp, sp, #48	; 0x30
   15b0c:	ldrd	r4, [sp]
   15b10:	ldrd	r6, [sp, #8]
   15b14:	ldr	r8, [sp, #16]
   15b18:	ldrd	sl, [sp, #20]
   15b1c:	add	sp, sp, #28
   15b20:	pop	{pc}		; (ldr pc, [sp], #4)
   15b24:	bl	11158 <abort@plt>
   15b28:	strdeq	sl, [r2], -r0
   15b2c:	ldr	ip, [pc, #512]	; 15d34 <__assert_fail@plt+0x4bb8>
   15b30:	cmp	r0, #0
   15b34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b38:	ldrd	r4, [ip, #16]
   15b3c:	strd	r6, [sp, #8]
   15b40:	clz	r6, r1
   15b44:	mov	r7, r1
   15b48:	strd	r8, [sp, #16]
   15b4c:	mov	r8, r0
   15b50:	lsr	r6, r6, #5
   15b54:	strd	sl, [sp, #24]
   15b58:	mov	fp, r2
   15b5c:	mov	sl, #10
   15b60:	ldrd	r2, [ip]
   15b64:	moveq	r6, #1
   15b68:	str	lr, [sp, #32]
   15b6c:	sub	sp, sp, #92	; 0x5c
   15b70:	cmp	r6, #0
   15b74:	ldrd	r0, [ip, #8]
   15b78:	strd	r2, [sp, #40]	; 0x28
   15b7c:	strd	r4, [sp, #56]	; 0x38
   15b80:	ldrd	r2, [ip, #24]
   15b84:	strd	r0, [sp, #48]	; 0x30
   15b88:	ldrd	r0, [ip, #32]
   15b8c:	str	sl, [sp, #40]	; 0x28
   15b90:	ldrd	r4, [ip, #40]	; 0x28
   15b94:	strd	r2, [sp, #64]	; 0x40
   15b98:	strd	r0, [sp, #72]	; 0x48
   15b9c:	strd	r4, [sp, #80]	; 0x50
   15ba0:	bne	15d30 <__assert_fail@plt+0x4bb4>
   15ba4:	movw	r5, #41244	; 0xa11c
   15ba8:	movt	r5, #2
   15bac:	str	r8, [sp, #80]	; 0x50
   15bb0:	str	r7, [sp, #84]	; 0x54
   15bb4:	bl	11080 <__errno_location@plt>
   15bb8:	ldr	r3, [r0]
   15bbc:	mov	r9, r0
   15bc0:	ldr	r2, [r5, #4]
   15bc4:	ldr	r4, [r5]
   15bc8:	str	r3, [sp, #28]
   15bcc:	cmp	r2, #0
   15bd0:	movgt	r1, sl
   15bd4:	bgt	15c3c <__assert_fail@plt+0x4ac0>
   15bd8:	add	r3, r5, #8
   15bdc:	str	r2, [sp, #36]	; 0x24
   15be0:	rsb	r2, r2, #1
   15be4:	cmp	r4, r3
   15be8:	beq	15d04 <__assert_fail@plt+0x4b88>
   15bec:	mov	r1, #8
   15bf0:	mov	r0, r4
   15bf4:	mvn	r3, #-2147483648	; 0x80000000
   15bf8:	str	r1, [sp]
   15bfc:	add	r1, sp, #36	; 0x24
   15c00:	bl	170e4 <__assert_fail@plt+0x5f68>
   15c04:	mov	r4, r0
   15c08:	str	r0, [r5]
   15c0c:	ldr	r0, [r5, #4]
   15c10:	mov	r1, #0
   15c14:	ldr	r2, [sp, #36]	; 0x24
   15c18:	sub	r2, r2, r0
   15c1c:	add	r0, r4, r0, lsl #3
   15c20:	lsl	r2, r2, #3
   15c24:	bl	110b0 <memset@plt>
   15c28:	ldr	r3, [sp, #36]	; 0x24
   15c2c:	ldr	r1, [sp, #40]	; 0x28
   15c30:	ldr	r8, [sp, #80]	; 0x50
   15c34:	str	r3, [r5, #4]
   15c38:	ldr	r7, [sp, #84]	; 0x54
   15c3c:	mvn	r3, #0
   15c40:	mov	r2, fp
   15c44:	ldr	r6, [sp, #44]	; 0x2c
   15c48:	ldr	sl, [r4]
   15c4c:	ldr	r5, [r4, #4]
   15c50:	orr	r6, r6, #1
   15c54:	stm	sp, {r1, r6}
   15c58:	add	r1, sp, #48	; 0x30
   15c5c:	str	r8, [sp, #12]
   15c60:	mov	r0, r5
   15c64:	str	r1, [sp, #8]
   15c68:	mov	r1, sl
   15c6c:	str	r7, [sp, #16]
   15c70:	bl	129d8 <__assert_fail@plt+0x185c>
   15c74:	cmp	sl, r0
   15c78:	bhi	15cdc <__assert_fail@plt+0x4b60>
   15c7c:	add	r7, r0, #1
   15c80:	movw	r3, #41456	; 0xa1f0
   15c84:	movt	r3, #2
   15c88:	cmp	r5, r3
   15c8c:	str	r7, [r4]
   15c90:	beq	15c9c <__assert_fail@plt+0x4b20>
   15c94:	mov	r0, r5
   15c98:	bl	126dc <__assert_fail@plt+0x1560>
   15c9c:	mov	r0, r7
   15ca0:	bl	16e40 <__assert_fail@plt+0x5cc4>
   15ca4:	ldr	r3, [sp, #40]	; 0x28
   15ca8:	mov	r2, fp
   15cac:	mov	r1, r7
   15cb0:	mov	r5, r0
   15cb4:	ldr	lr, [sp, #80]	; 0x50
   15cb8:	ldr	ip, [sp, #84]	; 0x54
   15cbc:	str	r0, [r4, #4]
   15cc0:	add	r4, sp, #48	; 0x30
   15cc4:	stm	sp, {r3, r6}
   15cc8:	mvn	r3, #0
   15ccc:	str	r4, [sp, #8]
   15cd0:	str	lr, [sp, #12]
   15cd4:	str	ip, [sp, #16]
   15cd8:	bl	129d8 <__assert_fail@plt+0x185c>
   15cdc:	ldr	r3, [sp, #28]
   15ce0:	mov	r0, r5
   15ce4:	str	r3, [r9]
   15ce8:	add	sp, sp, #92	; 0x5c
   15cec:	ldrd	r4, [sp]
   15cf0:	ldrd	r6, [sp, #8]
   15cf4:	ldrd	r8, [sp, #16]
   15cf8:	ldrd	sl, [sp, #24]
   15cfc:	add	sp, sp, #32
   15d00:	pop	{pc}		; (ldr pc, [sp], #4)
   15d04:	mov	r1, #8
   15d08:	mvn	r3, #-2147483648	; 0x80000000
   15d0c:	mov	r0, r6
   15d10:	str	r1, [sp]
   15d14:	add	r1, sp, #36	; 0x24
   15d18:	bl	170e4 <__assert_fail@plt+0x5f68>
   15d1c:	ldrd	r2, [r5, #8]
   15d20:	mov	r4, r0
   15d24:	str	r0, [r5]
   15d28:	strd	r2, [r0]
   15d2c:	b	15c0c <__assert_fail@plt+0x4a90>
   15d30:	bl	11158 <abort@plt>
   15d34:	strdeq	sl, [r2], -r0
   15d38:	ldr	ip, [pc, #536]	; 15f58 <__assert_fail@plt+0x4ddc>
   15d3c:	cmp	r0, #0
   15d40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d44:	ldrd	r4, [ip, #16]
   15d48:	strd	r6, [sp, #8]
   15d4c:	mov	r6, r1
   15d50:	mov	r7, r0
   15d54:	strd	r8, [sp, #16]
   15d58:	mov	r9, #10
   15d5c:	strd	sl, [sp, #24]
   15d60:	mov	sl, r2
   15d64:	mov	fp, r3
   15d68:	str	lr, [sp, #32]
   15d6c:	clz	lr, r1
   15d70:	sub	sp, sp, #92	; 0x5c
   15d74:	ldrd	r2, [ip]
   15d78:	lsr	lr, lr, #5
   15d7c:	moveq	lr, #1
   15d80:	ldrd	r0, [ip, #8]
   15d84:	cmp	lr, #0
   15d88:	strd	r4, [sp, #56]	; 0x38
   15d8c:	ldrd	r4, [ip, #40]	; 0x28
   15d90:	str	lr, [sp, #28]
   15d94:	strd	r2, [sp, #40]	; 0x28
   15d98:	ldrd	r2, [ip, #24]
   15d9c:	strd	r0, [sp, #48]	; 0x30
   15da0:	ldrd	r0, [ip, #32]
   15da4:	str	r9, [sp, #40]	; 0x28
   15da8:	strd	r2, [sp, #64]	; 0x40
   15dac:	strd	r4, [sp, #80]	; 0x50
   15db0:	strd	r0, [sp, #72]	; 0x48
   15db4:	bne	15f54 <__assert_fail@plt+0x4dd8>
   15db8:	movw	r5, #41244	; 0xa11c
   15dbc:	movt	r5, #2
   15dc0:	str	r7, [sp, #80]	; 0x50
   15dc4:	str	r6, [sp, #84]	; 0x54
   15dc8:	bl	11080 <__errno_location@plt>
   15dcc:	ldr	r3, [r0]
   15dd0:	mov	r8, r0
   15dd4:	ldr	r2, [r5, #4]
   15dd8:	ldr	r4, [r5]
   15ddc:	str	r3, [sp, #24]
   15de0:	cmp	r2, #0
   15de4:	movgt	r1, r9
   15de8:	bgt	15e50 <__assert_fail@plt+0x4cd4>
   15dec:	add	r3, r5, #8
   15df0:	str	r2, [sp, #36]	; 0x24
   15df4:	rsb	r2, r2, #1
   15df8:	cmp	r4, r3
   15dfc:	beq	15f28 <__assert_fail@plt+0x4dac>
   15e00:	mov	r1, #8
   15e04:	mov	r0, r4
   15e08:	mvn	r3, #-2147483648	; 0x80000000
   15e0c:	str	r1, [sp]
   15e10:	add	r1, sp, #36	; 0x24
   15e14:	bl	170e4 <__assert_fail@plt+0x5f68>
   15e18:	mov	r4, r0
   15e1c:	str	r0, [r5]
   15e20:	ldr	r0, [r5, #4]
   15e24:	mov	r1, #0
   15e28:	ldr	r2, [sp, #36]	; 0x24
   15e2c:	sub	r2, r2, r0
   15e30:	add	r0, r4, r0, lsl #3
   15e34:	lsl	r2, r2, #3
   15e38:	bl	110b0 <memset@plt>
   15e3c:	ldr	r3, [sp, #36]	; 0x24
   15e40:	ldr	r1, [sp, #40]	; 0x28
   15e44:	ldr	r7, [sp, #80]	; 0x50
   15e48:	str	r3, [r5, #4]
   15e4c:	ldr	r6, [sp, #84]	; 0x54
   15e50:	mov	r3, fp
   15e54:	mov	r2, sl
   15e58:	ldr	r0, [sp, #44]	; 0x2c
   15e5c:	ldr	r9, [r4]
   15e60:	ldr	r5, [r4, #4]
   15e64:	orr	r0, r0, #1
   15e68:	str	r1, [sp]
   15e6c:	add	r1, sp, #48	; 0x30
   15e70:	str	r0, [sp, #4]
   15e74:	str	r1, [sp, #8]
   15e78:	mov	r1, r9
   15e7c:	str	r7, [sp, #12]
   15e80:	str	r6, [sp, #16]
   15e84:	str	r0, [sp, #28]
   15e88:	mov	r0, r5
   15e8c:	bl	129d8 <__assert_fail@plt+0x185c>
   15e90:	cmp	r9, r0
   15e94:	bhi	15f00 <__assert_fail@plt+0x4d84>
   15e98:	add	r6, r0, #1
   15e9c:	movw	r3, #41456	; 0xa1f0
   15ea0:	movt	r3, #2
   15ea4:	cmp	r5, r3
   15ea8:	str	r6, [r4]
   15eac:	beq	15eb8 <__assert_fail@plt+0x4d3c>
   15eb0:	mov	r0, r5
   15eb4:	bl	126dc <__assert_fail@plt+0x1560>
   15eb8:	mov	r0, r6
   15ebc:	bl	16e40 <__assert_fail@plt+0x5cc4>
   15ec0:	ldr	lr, [sp, #40]	; 0x28
   15ec4:	mov	r1, r6
   15ec8:	mov	r3, fp
   15ecc:	mov	r2, sl
   15ed0:	mov	r5, r0
   15ed4:	ldr	r6, [sp, #80]	; 0x50
   15ed8:	ldr	ip, [sp, #84]	; 0x54
   15edc:	str	r0, [r4, #4]
   15ee0:	str	lr, [sp]
   15ee4:	ldr	lr, [sp, #28]
   15ee8:	str	lr, [sp, #4]
   15eec:	add	lr, sp, #48	; 0x30
   15ef0:	str	r6, [sp, #12]
   15ef4:	str	lr, [sp, #8]
   15ef8:	str	ip, [sp, #16]
   15efc:	bl	129d8 <__assert_fail@plt+0x185c>
   15f00:	ldr	r3, [sp, #24]
   15f04:	mov	r0, r5
   15f08:	str	r3, [r8]
   15f0c:	add	sp, sp, #92	; 0x5c
   15f10:	ldrd	r4, [sp]
   15f14:	ldrd	r6, [sp, #8]
   15f18:	ldrd	r8, [sp, #16]
   15f1c:	ldrd	sl, [sp, #24]
   15f20:	add	sp, sp, #32
   15f24:	pop	{pc}		; (ldr pc, [sp], #4)
   15f28:	mov	r1, #8
   15f2c:	mvn	r3, #-2147483648	; 0x80000000
   15f30:	ldr	r0, [sp, #28]
   15f34:	str	r1, [sp]
   15f38:	add	r1, sp, #36	; 0x24
   15f3c:	bl	170e4 <__assert_fail@plt+0x5f68>
   15f40:	ldrd	r2, [r5, #8]
   15f44:	mov	r4, r0
   15f48:	str	r0, [r5]
   15f4c:	strd	r2, [r0]
   15f50:	b	15e20 <__assert_fail@plt+0x4ca4>
   15f54:	bl	11158 <abort@plt>
   15f58:	strdeq	sl, [r2], -r0
   15f5c:	ldr	r3, [pc]	; 15f64 <__assert_fail@plt+0x4de8>
   15f60:	b	143c4 <__assert_fail@plt+0x3248>
   15f64:	andeq	sl, r2, ip, lsr #2
   15f68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f6c:	movw	r4, #41244	; 0xa11c
   15f70:	movt	r4, #2
   15f74:	strd	r6, [sp, #8]
   15f78:	strd	r8, [sp, #16]
   15f7c:	strd	sl, [sp, #24]
   15f80:	mov	sl, r0
   15f84:	mov	fp, r1
   15f88:	str	lr, [sp, #32]
   15f8c:	sub	sp, sp, #44	; 0x2c
   15f90:	bl	11080 <__errno_location@plt>
   15f94:	ldr	r3, [r0]
   15f98:	mov	r8, r0
   15f9c:	ldr	r2, [r4, #4]
   15fa0:	ldr	r5, [r4]
   15fa4:	str	r3, [sp, #28]
   15fa8:	cmp	r2, #0
   15fac:	bgt	16008 <__assert_fail@plt+0x4e8c>
   15fb0:	add	r3, r4, #8
   15fb4:	str	r2, [sp, #36]	; 0x24
   15fb8:	rsb	r2, r2, #1
   15fbc:	cmp	r5, r3
   15fc0:	beq	160e4 <__assert_fail@plt+0x4f68>
   15fc4:	mov	r1, #8
   15fc8:	mov	r0, r5
   15fcc:	mvn	r3, #-2147483648	; 0x80000000
   15fd0:	str	r1, [sp]
   15fd4:	add	r1, sp, #36	; 0x24
   15fd8:	bl	170e4 <__assert_fail@plt+0x5f68>
   15fdc:	mov	r5, r0
   15fe0:	str	r0, [r4]
   15fe4:	ldr	r0, [r4, #4]
   15fe8:	mov	r1, #0
   15fec:	ldr	r2, [sp, #36]	; 0x24
   15ff0:	sub	r2, r2, r0
   15ff4:	add	r0, r5, r0, lsl #3
   15ff8:	lsl	r2, r2, #3
   15ffc:	bl	110b0 <memset@plt>
   16000:	ldr	r3, [sp, #36]	; 0x24
   16004:	str	r3, [r4, #4]
   16008:	ldr	ip, [r4, #16]
   1600c:	mov	r3, fp
   16010:	mov	r2, sl
   16014:	ldr	r7, [r4, #20]
   16018:	ldr	r0, [pc, #240]	; 16110 <__assert_fail@plt+0x4f94>
   1601c:	ldr	r9, [r5]
   16020:	orr	r7, r7, #1
   16024:	ldr	r6, [r5, #4]
   16028:	str	ip, [sp]
   1602c:	ldr	ip, [r4, #56]	; 0x38
   16030:	mov	r1, r9
   16034:	str	r7, [sp, #4]
   16038:	ldr	lr, [r4, #60]	; 0x3c
   1603c:	str	r0, [sp, #8]
   16040:	mov	r0, r6
   16044:	str	ip, [sp, #12]
   16048:	str	lr, [sp, #16]
   1604c:	bl	129d8 <__assert_fail@plt+0x185c>
   16050:	cmp	r9, r0
   16054:	bhi	160bc <__assert_fail@plt+0x4f40>
   16058:	add	r9, r0, #1
   1605c:	movw	r3, #41456	; 0xa1f0
   16060:	movt	r3, #2
   16064:	cmp	r6, r3
   16068:	str	r9, [r5]
   1606c:	beq	16078 <__assert_fail@plt+0x4efc>
   16070:	mov	r0, r6
   16074:	bl	126dc <__assert_fail@plt+0x1560>
   16078:	mov	r0, r9
   1607c:	bl	16e40 <__assert_fail@plt+0x5cc4>
   16080:	ldr	ip, [r4, #16]
   16084:	mov	r1, r9
   16088:	mov	r3, fp
   1608c:	mov	r2, sl
   16090:	mov	r6, r0
   16094:	ldr	r9, [r4, #56]	; 0x38
   16098:	ldr	lr, [r4, #60]	; 0x3c
   1609c:	str	r0, [r5, #4]
   160a0:	str	ip, [sp]
   160a4:	ldr	ip, [pc, #100]	; 16110 <__assert_fail@plt+0x4f94>
   160a8:	str	r7, [sp, #4]
   160ac:	str	ip, [sp, #8]
   160b0:	str	r9, [sp, #12]
   160b4:	str	lr, [sp, #16]
   160b8:	bl	129d8 <__assert_fail@plt+0x185c>
   160bc:	ldr	r3, [sp, #28]
   160c0:	mov	r0, r6
   160c4:	str	r3, [r8]
   160c8:	add	sp, sp, #44	; 0x2c
   160cc:	ldrd	r4, [sp]
   160d0:	ldrd	r6, [sp, #8]
   160d4:	ldrd	r8, [sp, #16]
   160d8:	ldrd	sl, [sp, #24]
   160dc:	add	sp, sp, #32
   160e0:	pop	{pc}		; (ldr pc, [sp], #4)
   160e4:	mov	r0, #8
   160e8:	mvn	r3, #-2147483648	; 0x80000000
   160ec:	add	r1, sp, #36	; 0x24
   160f0:	str	r0, [sp]
   160f4:	mov	r0, #0
   160f8:	bl	170e4 <__assert_fail@plt+0x5f68>
   160fc:	ldrd	r2, [r4, #8]
   16100:	mov	r5, r0
   16104:	str	r0, [r4]
   16108:	strd	r2, [r0]
   1610c:	b	15fe4 <__assert_fail@plt+0x4e68>
   16110:	andeq	sl, r2, r4, lsr r1
   16114:	ldr	r3, [pc, #4]	; 16120 <__assert_fail@plt+0x4fa4>
   16118:	mvn	r2, #0
   1611c:	b	143c4 <__assert_fail@plt+0x3248>
   16120:	andeq	sl, r2, ip, lsr #2
   16124:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16128:	movw	r4, #41244	; 0xa11c
   1612c:	movt	r4, #2
   16130:	strd	r6, [sp, #8]
   16134:	strd	r8, [sp, #16]
   16138:	strd	sl, [sp, #24]
   1613c:	mov	sl, r0
   16140:	str	lr, [sp, #32]
   16144:	sub	sp, sp, #44	; 0x2c
   16148:	bl	11080 <__errno_location@plt>
   1614c:	ldr	r3, [r0]
   16150:	mov	r8, r0
   16154:	ldr	r2, [r4, #4]
   16158:	ldr	r5, [r4]
   1615c:	str	r3, [sp, #28]
   16160:	cmp	r2, #0
   16164:	bgt	161c0 <__assert_fail@plt+0x5044>
   16168:	add	r3, r4, #8
   1616c:	str	r2, [sp, #36]	; 0x24
   16170:	rsb	r2, r2, #1
   16174:	cmp	r5, r3
   16178:	beq	16288 <__assert_fail@plt+0x510c>
   1617c:	mov	r1, #8
   16180:	mov	r0, r5
   16184:	mvn	r3, #-2147483648	; 0x80000000
   16188:	str	r1, [sp]
   1618c:	add	r1, sp, #36	; 0x24
   16190:	bl	170e4 <__assert_fail@plt+0x5f68>
   16194:	mov	r5, r0
   16198:	str	r0, [r4]
   1619c:	ldr	r0, [r4, #4]
   161a0:	mov	r1, #0
   161a4:	ldr	r2, [sp, #36]	; 0x24
   161a8:	sub	r2, r2, r0
   161ac:	add	r0, r5, r0, lsl #3
   161b0:	lsl	r2, r2, #3
   161b4:	bl	110b0 <memset@plt>
   161b8:	ldr	r3, [sp, #36]	; 0x24
   161bc:	str	r3, [r4, #4]
   161c0:	ldr	ip, [r4, #16]
   161c4:	mvn	r3, #0
   161c8:	mov	r2, sl
   161cc:	ldr	r7, [r4, #20]
   161d0:	ldr	fp, [pc, #220]	; 162b4 <__assert_fail@plt+0x5138>
   161d4:	ldr	r9, [r5]
   161d8:	orr	r7, r7, #1
   161dc:	ldr	r6, [r5, #4]
   161e0:	str	ip, [sp]
   161e4:	ldr	ip, [r4, #56]	; 0x38
   161e8:	mov	r1, r9
   161ec:	stmib	sp, {r7, fp}
   161f0:	ldr	lr, [r4, #60]	; 0x3c
   161f4:	mov	r0, r6
   161f8:	str	ip, [sp, #12]
   161fc:	str	lr, [sp, #16]
   16200:	bl	129d8 <__assert_fail@plt+0x185c>
   16204:	cmp	r9, r0
   16208:	bhi	16260 <__assert_fail@plt+0x50e4>
   1620c:	add	r9, r0, #1
   16210:	movw	r3, #41456	; 0xa1f0
   16214:	movt	r3, #2
   16218:	cmp	r6, r3
   1621c:	str	r9, [r5]
   16220:	beq	1622c <__assert_fail@plt+0x50b0>
   16224:	mov	r0, r6
   16228:	bl	126dc <__assert_fail@plt+0x1560>
   1622c:	mov	r0, r9
   16230:	bl	16e40 <__assert_fail@plt+0x5cc4>
   16234:	ldr	r3, [r4, #16]
   16238:	mov	r2, sl
   1623c:	mov	r1, r9
   16240:	mov	r6, r0
   16244:	ldr	lr, [r4, #56]	; 0x38
   16248:	ldr	ip, [r4, #60]	; 0x3c
   1624c:	str	r0, [r5, #4]
   16250:	stm	sp, {r3, r7, fp, lr}
   16254:	mvn	r3, #0
   16258:	str	ip, [sp, #16]
   1625c:	bl	129d8 <__assert_fail@plt+0x185c>
   16260:	ldr	r3, [sp, #28]
   16264:	mov	r0, r6
   16268:	str	r3, [r8]
   1626c:	add	sp, sp, #44	; 0x2c
   16270:	ldrd	r4, [sp]
   16274:	ldrd	r6, [sp, #8]
   16278:	ldrd	r8, [sp, #16]
   1627c:	ldrd	sl, [sp, #24]
   16280:	add	sp, sp, #32
   16284:	pop	{pc}		; (ldr pc, [sp], #4)
   16288:	mov	r0, #8
   1628c:	mvn	r3, #-2147483648	; 0x80000000
   16290:	add	r1, sp, #36	; 0x24
   16294:	str	r0, [sp]
   16298:	mov	r0, #0
   1629c:	bl	170e4 <__assert_fail@plt+0x5f68>
   162a0:	ldrd	r2, [r4, #8]
   162a4:	mov	r5, r0
   162a8:	str	r0, [r4]
   162ac:	strd	r2, [r0]
   162b0:	b	1619c <__assert_fail@plt+0x5020>
   162b4:	andeq	sl, r2, r4, lsr r1
   162b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162bc:	mov	r4, r1
   162c0:	strd	r6, [sp, #8]
   162c4:	strd	r8, [sp, #16]
   162c8:	subs	r9, r3, #0
   162cc:	mov	r8, r2
   162d0:	strd	sl, [sp, #24]
   162d4:	mvneq	sl, #0
   162d8:	str	lr, [sp, #32]
   162dc:	sub	sp, sp, #44	; 0x2c
   162e0:	ldr	r3, [sp, #80]	; 0x50
   162e4:	ldrne	sl, [r9]
   162e8:	ldr	fp, [r2]
   162ec:	cmp	r3, #0
   162f0:	ldr	r6, [sp, #84]	; 0x54
   162f4:	beq	16304 <__assert_fail@plt+0x5188>
   162f8:	mov	r2, r3
   162fc:	mov	r3, #0
   16300:	str	r3, [r2]
   16304:	cmp	r6, #0
   16308:	movne	r3, #0
   1630c:	strne	r3, [r6]
   16310:	cmp	r4, #0
   16314:	beq	164c8 <__assert_fail@plt+0x534c>
   16318:	subs	r3, r4, r0
   1631c:	bne	163c4 <__assert_fail@plt+0x5248>
   16320:	ldrb	r2, [r4, #1]
   16324:	cmp	r2, #0
   16328:	beq	164dc <__assert_fail@plt+0x5360>
   1632c:	adds	r5, r4, #1
   16330:	moveq	r4, r5
   16334:	beq	1636c <__assert_fail@plt+0x51f0>
   16338:	mov	r4, r3
   1633c:	ldrb	r3, [r5]
   16340:	cmp	r3, #43	; 0x2b
   16344:	beq	16438 <__assert_fail@plt+0x52bc>
   16348:	mov	r0, r5
   1634c:	bl	11170 <getgrnam@plt>
   16350:	cmp	r0, #0
   16354:	beq	16438 <__assert_fail@plt+0x52bc>
   16358:	ldr	sl, [r0, #8]
   1635c:	bl	10eac <endgrent@plt>
   16360:	mov	r0, r5
   16364:	bl	17364 <__assert_fail@plt+0x61e8>
   16368:	mov	r5, r0
   1636c:	ldr	r3, [sp, #80]	; 0x50
   16370:	cmp	r9, #0
   16374:	str	fp, [r8]
   16378:	strne	sl, [r9]
   1637c:	cmp	r3, #0
   16380:	strne	r4, [r3]
   16384:	movne	r4, #0
   16388:	cmp	r6, #0
   1638c:	mov	r0, r4
   16390:	strne	r5, [r6]
   16394:	movne	r5, #0
   16398:	bl	126dc <__assert_fail@plt+0x1560>
   1639c:	mov	r0, r5
   163a0:	bl	126dc <__assert_fail@plt+0x1560>
   163a4:	mov	r0, #0
   163a8:	add	sp, sp, #44	; 0x2c
   163ac:	ldrd	r4, [sp]
   163b0:	ldrd	r6, [sp, #8]
   163b4:	ldrd	r8, [sp, #16]
   163b8:	ldrd	sl, [sp, #24]
   163bc:	add	sp, sp, #32
   163c0:	pop	{pc}		; (ldr pc, [sp], #4)
   163c4:	add	r1, r3, #1
   163c8:	str	r3, [sp, #12]
   163cc:	bl	172cc <__assert_fail@plt+0x6150>
   163d0:	ldrb	r5, [r4, #1]
   163d4:	mov	r2, #0
   163d8:	mov	r7, r0
   163dc:	ldr	r3, [sp, #12]
   163e0:	cmp	r5, r2
   163e4:	strb	r2, [r0, r3]
   163e8:	ldrb	r3, [r0]
   163ec:	beq	164e4 <__assert_fail@plt+0x5368>
   163f0:	adds	r5, r4, #1
   163f4:	moveq	r4, #1
   163f8:	movne	r4, r2
   163fc:	cmp	r3, #43	; 0x2b
   16400:	beq	1648c <__assert_fail@plt+0x5310>
   16404:	bl	10ed0 <getpwnam@plt>
   16408:	cmp	r0, #0
   1640c:	beq	1648c <__assert_fail@plt+0x5310>
   16410:	cmp	r4, #0
   16414:	ldr	fp, [r0, #8]
   16418:	moveq	r4, r7
   1641c:	bne	16500 <__assert_fail@plt+0x5384>
   16420:	bl	11110 <endpwent@plt>
   16424:	cmp	r5, #0
   16428:	beq	1636c <__assert_fail@plt+0x51f0>
   1642c:	ldrb	r3, [r5]
   16430:	cmp	r3, #43	; 0x2b
   16434:	bne	16348 <__assert_fail@plt+0x51cc>
   16438:	movw	r0, #34064	; 0x8510
   1643c:	movt	r0, #1
   16440:	add	r3, sp, #16
   16444:	mov	r2, #10
   16448:	mov	r1, #0
   1644c:	str	r0, [sp]
   16450:	mov	r0, r5
   16454:	bl	17430 <__assert_fail@plt+0x62b4>
   16458:	cmp	r0, #0
   1645c:	bne	1646c <__assert_fail@plt+0x52f0>
   16460:	ldr	sl, [sp, #16]
   16464:	cmn	sl, #1
   16468:	bne	1635c <__assert_fail@plt+0x51e0>
   1646c:	bl	10eac <endgrent@plt>
   16470:	mov	r0, r5
   16474:	mov	r7, r4
   16478:	bl	17364 <__assert_fail@plt+0x61e8>
   1647c:	movw	r4, #36128	; 0x8d20
   16480:	movt	r4, #1
   16484:	mov	r5, r0
   16488:	b	164a4 <__assert_fail@plt+0x5328>
   1648c:	cmp	r4, #0
   16490:	beq	16554 <__assert_fail@plt+0x53d8>
   16494:	movw	r4, #36112	; 0x8d10
   16498:	movt	r4, #1
   1649c:	mov	r5, #0
   164a0:	bl	11110 <endpwent@plt>
   164a4:	mov	r0, r7
   164a8:	bl	126dc <__assert_fail@plt+0x1560>
   164ac:	mov	r0, r5
   164b0:	bl	126dc <__assert_fail@plt+0x1560>
   164b4:	mov	r1, r4
   164b8:	mov	r2, #5
   164bc:	mov	r0, #0
   164c0:	bl	10f60 <dcgettext@plt>
   164c4:	b	163a8 <__assert_fail@plt+0x522c>
   164c8:	ldrb	r3, [r0]
   164cc:	cmp	r3, #0
   164d0:	bne	16530 <__assert_fail@plt+0x53b4>
   164d4:	mov	r5, r4
   164d8:	b	1636c <__assert_fail@plt+0x51f0>
   164dc:	mov	r4, r2
   164e0:	b	164d4 <__assert_fail@plt+0x5358>
   164e4:	cmp	r3, #43	; 0x2b
   164e8:	beq	16494 <__assert_fail@plt+0x5318>
   164ec:	bl	10ed0 <getpwnam@plt>
   164f0:	cmp	r0, #0
   164f4:	movne	r4, #1
   164f8:	bne	16410 <__assert_fail@plt+0x5294>
   164fc:	b	16494 <__assert_fail@plt+0x5318>
   16500:	ldr	sl, [r0, #12]
   16504:	mov	r0, sl
   16508:	bl	11164 <getgrgid@plt>
   1650c:	subs	r1, r0, #0
   16510:	beq	165c0 <__assert_fail@plt+0x5444>
   16514:	ldr	r0, [r1]
   16518:	bl	17364 <__assert_fail@plt+0x61e8>
   1651c:	mov	r5, r0
   16520:	mov	r4, r7
   16524:	bl	10eac <endgrent@plt>
   16528:	bl	11110 <endpwent@plt>
   1652c:	b	1636c <__assert_fail@plt+0x51f0>
   16530:	bl	17364 <__assert_fail@plt+0x61e8>
   16534:	ldrb	r3, [r0]
   16538:	mov	r7, r0
   1653c:	cmp	r3, #43	; 0x2b
   16540:	moveq	r5, r4
   16544:	beq	16554 <__assert_fail@plt+0x53d8>
   16548:	bl	10ed0 <getpwnam@plt>
   1654c:	subs	r5, r0, #0
   16550:	bne	165b0 <__assert_fail@plt+0x5434>
   16554:	movw	r0, #34064	; 0x8510
   16558:	movt	r0, #1
   1655c:	add	r3, sp, #16
   16560:	mov	r2, #10
   16564:	mov	r1, #0
   16568:	str	r0, [sp]
   1656c:	mov	r0, r7
   16570:	bl	17430 <__assert_fail@plt+0x62b4>
   16574:	cmp	r0, #0
   16578:	bne	1659c <__assert_fail@plt+0x5420>
   1657c:	ldr	fp, [sp, #16]
   16580:	cmn	fp, #1
   16584:	beq	1659c <__assert_fail@plt+0x5420>
   16588:	bl	11110 <endpwent@plt>
   1658c:	cmp	r5, #0
   16590:	mov	r4, r7
   16594:	beq	1636c <__assert_fail@plt+0x51f0>
   16598:	b	1633c <__assert_fail@plt+0x51c0>
   1659c:	movw	r4, #36144	; 0x8d30
   165a0:	movt	r4, #1
   165a4:	bl	11110 <endpwent@plt>
   165a8:	mov	r5, #0
   165ac:	b	164a4 <__assert_fail@plt+0x5328>
   165b0:	ldr	fp, [r5, #8]
   165b4:	mov	r5, r4
   165b8:	mov	r4, r7
   165bc:	b	16420 <__assert_fail@plt+0x52a4>
   165c0:	add	r2, sp, #16
   165c4:	mov	r0, sl
   165c8:	bl	1273c <__assert_fail@plt+0x15c0>
   165cc:	b	16518 <__assert_fail@plt+0x539c>
   165d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   165d4:	strd	r6, [sp, #8]
   165d8:	subs	r7, r2, #0
   165dc:	strd	r8, [sp, #16]
   165e0:	mov	r9, r1
   165e4:	mov	r8, r3
   165e8:	str	sl, [sp, #24]
   165ec:	str	lr, [sp, #28]
   165f0:	sub	sp, sp, #8
   165f4:	ldr	r6, [sp, #40]	; 0x28
   165f8:	beq	16690 <__assert_fail@plt+0x5514>
   165fc:	mov	r1, #58	; 0x3a
   16600:	mov	r5, r0
   16604:	bl	11074 <strchr@plt>
   16608:	mov	sl, r0
   1660c:	mov	r1, r0
   16610:	str	r8, [sp]
   16614:	mov	r3, r7
   16618:	mov	r2, r9
   1661c:	str	r6, [sp, #4]
   16620:	mov	r0, r5
   16624:	bl	162b8 <__assert_fail@plt+0x513c>
   16628:	cmp	sl, #0
   1662c:	mov	r4, r0
   16630:	bne	16670 <__assert_fail@plt+0x54f4>
   16634:	cmp	r0, #0
   16638:	beq	166b0 <__assert_fail@plt+0x5534>
   1663c:	mov	r1, #46	; 0x2e
   16640:	mov	r0, r5
   16644:	bl	11074 <strchr@plt>
   16648:	subs	r1, r0, #0
   1664c:	beq	16670 <__assert_fail@plt+0x54f4>
   16650:	mov	r3, r7
   16654:	mov	r2, r9
   16658:	str	r8, [sp]
   1665c:	mov	r0, r5
   16660:	str	r6, [sp, #4]
   16664:	bl	162b8 <__assert_fail@plt+0x513c>
   16668:	cmp	r0, #0
   1666c:	beq	166b0 <__assert_fail@plt+0x5534>
   16670:	mov	r0, r4
   16674:	add	sp, sp, #8
   16678:	ldrd	r4, [sp]
   1667c:	ldrd	r6, [sp, #8]
   16680:	ldrd	r8, [sp, #16]
   16684:	ldr	sl, [sp, #24]
   16688:	add	sp, sp, #28
   1668c:	pop	{pc}		; (ldr pc, [sp], #4)
   16690:	mov	r2, r1
   16694:	mov	r3, r7
   16698:	str	r8, [sp]
   1669c:	mov	r1, r7
   166a0:	str	r6, [sp, #4]
   166a4:	bl	162b8 <__assert_fail@plt+0x513c>
   166a8:	mov	r4, r0
   166ac:	b	16670 <__assert_fail@plt+0x54f4>
   166b0:	mov	r4, #0
   166b4:	b	16670 <__assert_fail@plt+0x54f4>
   166b8:	cmp	r1, #0
   166bc:	strd	r4, [sp, #-16]!
   166c0:	mov	ip, r3
   166c4:	str	r6, [sp, #8]
   166c8:	mov	r4, r0
   166cc:	str	lr, [sp, #12]
   166d0:	sub	sp, sp, #32
   166d4:	ldr	r5, [sp, #48]	; 0x30
   166d8:	ldr	r6, [sp, #52]	; 0x34
   166dc:	beq	16820 <__assert_fail@plt+0x56a4>
   166e0:	mov	r3, r1
   166e4:	mov	r1, #1
   166e8:	stm	sp, {r2, ip}
   166ec:	movw	r2, #36160	; 0x8d40
   166f0:	movt	r2, #1
   166f4:	bl	110d4 <__fprintf_chk@plt>
   166f8:	mov	r2, #5
   166fc:	movw	r1, #36180	; 0x8d54
   16700:	movt	r1, #1
   16704:	mov	r0, #0
   16708:	bl	10f60 <dcgettext@plt>
   1670c:	movw	ip, #2022	; 0x7e6
   16710:	mov	r3, r0
   16714:	mov	r1, #1
   16718:	movw	r2, #36908	; 0x902c
   1671c:	movt	r2, #1
   16720:	mov	r0, r4
   16724:	str	ip, [sp]
   16728:	bl	110d4 <__fprintf_chk@plt>
   1672c:	mov	r1, r4
   16730:	mov	r0, #10
   16734:	bl	10f54 <fputc_unlocked@plt>
   16738:	mov	r2, #5
   1673c:	movw	r1, #36184	; 0x8d58
   16740:	movt	r1, #1
   16744:	mov	r0, #0
   16748:	bl	10f60 <dcgettext@plt>
   1674c:	mov	r2, r0
   16750:	mov	r1, #1
   16754:	movw	r3, #36356	; 0x8e04
   16758:	movt	r3, #1
   1675c:	mov	r0, r4
   16760:	bl	110d4 <__fprintf_chk@plt>
   16764:	mov	r1, r4
   16768:	mov	r0, #10
   1676c:	bl	10f54 <fputc_unlocked@plt>
   16770:	cmp	r6, #9
   16774:	ldrls	pc, [pc, r6, lsl #2]
   16778:	b	16a8c <__assert_fail@plt+0x5910>
   1677c:	andeq	r6, r1, ip, lsl #16
   16780:	andeq	r6, r1, ip, lsr r8
   16784:	andeq	r6, r1, r8, ror r8
   16788:			; <UNDEFINED> instruction: 0x000168b8
   1678c:	andeq	r6, r1, r0, lsl #18
   16790:	andeq	r6, r1, r8, lsr r9
   16794:	andeq	r6, r1, r0, lsl #19
   16798:	ldrdeq	r6, [r1], -r4
   1679c:	andeq	r6, r1, ip, lsr #20
   167a0:	andeq	r6, r1, r4, lsr #15
   167a4:	movw	r1, #36660	; 0x8f34
   167a8:	movt	r1, #1
   167ac:	mov	r2, #5
   167b0:	mov	r0, #0
   167b4:	bl	10f60 <dcgettext@plt>
   167b8:	ldr	lr, [r5, #4]
   167bc:	mov	r2, r0
   167c0:	mov	r1, #1
   167c4:	mov	r0, r4
   167c8:	ldr	r3, [r5, #8]
   167cc:	ldr	ip, [r5, #32]
   167d0:	str	lr, [sp]
   167d4:	ldr	lr, [r5, #12]
   167d8:	str	ip, [sp, #28]
   167dc:	ldr	ip, [r5, #28]
   167e0:	str	r3, [sp, #4]
   167e4:	ldr	r3, [r5, #16]
   167e8:	str	lr, [sp, #8]
   167ec:	ldr	lr, [r5, #20]
   167f0:	str	ip, [sp, #24]
   167f4:	ldr	ip, [r5, #24]
   167f8:	str	r3, [sp, #12]
   167fc:	ldr	r3, [r5]
   16800:	str	lr, [sp, #16]
   16804:	str	ip, [sp, #20]
   16808:	bl	110d4 <__fprintf_chk@plt>
   1680c:	add	sp, sp, #32
   16810:	ldrd	r4, [sp]
   16814:	ldr	r6, [sp, #8]
   16818:	add	sp, sp, #12
   1681c:	pop	{pc}		; (ldr pc, [sp], #4)
   16820:	mov	r3, r2
   16824:	mov	r1, #1
   16828:	str	ip, [sp]
   1682c:	movw	r2, #36172	; 0x8d4c
   16830:	movt	r2, #1
   16834:	bl	110d4 <__fprintf_chk@plt>
   16838:	b	166f8 <__assert_fail@plt+0x557c>
   1683c:	mov	r2, #5
   16840:	movw	r1, #36392	; 0x8e28
   16844:	movt	r1, #1
   16848:	mov	r0, #0
   1684c:	bl	10f60 <dcgettext@plt>
   16850:	ldr	r3, [r5]
   16854:	mov	r2, r0
   16858:	mov	r1, #1
   1685c:	mov	r0, r4
   16860:	add	sp, sp, #32
   16864:	ldrd	r4, [sp]
   16868:	ldr	r6, [sp, #8]
   1686c:	ldr	lr, [sp, #12]
   16870:	add	sp, sp, #16
   16874:	b	110d4 <__fprintf_chk@plt>
   16878:	mov	r2, #5
   1687c:	movw	r1, #36408	; 0x8e38
   16880:	movt	r1, #1
   16884:	mov	r0, #0
   16888:	bl	10f60 <dcgettext@plt>
   1688c:	ldm	r5, {r3, ip}
   16890:	mov	r2, r0
   16894:	mov	r1, #1
   16898:	mov	r0, r4
   1689c:	str	ip, [sp, #48]	; 0x30
   168a0:	add	sp, sp, #32
   168a4:	ldrd	r4, [sp]
   168a8:	ldr	r6, [sp, #8]
   168ac:	ldr	lr, [sp, #12]
   168b0:	add	sp, sp, #16
   168b4:	b	110d4 <__fprintf_chk@plt>
   168b8:	mov	r2, #5
   168bc:	movw	r1, #36432	; 0x8e50
   168c0:	movt	r1, #1
   168c4:	mov	r0, #0
   168c8:	bl	10f60 <dcgettext@plt>
   168cc:	ldm	r5, {r3, lr}
   168d0:	mov	r2, r0
   168d4:	mov	r1, #1
   168d8:	mov	r0, r4
   168dc:	ldr	ip, [r5, #8]
   168e0:	str	lr, [sp, #48]	; 0x30
   168e4:	str	ip, [sp, #52]	; 0x34
   168e8:	add	sp, sp, #32
   168ec:	ldrd	r4, [sp]
   168f0:	ldr	r6, [sp, #8]
   168f4:	ldr	lr, [sp, #12]
   168f8:	add	sp, sp, #16
   168fc:	b	110d4 <__fprintf_chk@plt>
   16900:	mov	r2, #5
   16904:	movw	r1, #36460	; 0x8e6c
   16908:	movt	r1, #1
   1690c:	mov	r0, #0
   16910:	bl	10f60 <dcgettext@plt>
   16914:	ldmib	r5, {r3, ip, lr}
   16918:	mov	r2, r0
   1691c:	mov	r1, #1
   16920:	mov	r0, r4
   16924:	str	r3, [sp]
   16928:	ldr	r3, [r5]
   1692c:	stmib	sp, {ip, lr}
   16930:	bl	110d4 <__fprintf_chk@plt>
   16934:	b	1680c <__assert_fail@plt+0x5690>
   16938:	mov	r2, #5
   1693c:	movw	r1, #36492	; 0x8e8c
   16940:	movt	r1, #1
   16944:	mov	r0, #0
   16948:	bl	10f60 <dcgettext@plt>
   1694c:	ldmib	r5, {ip, lr}
   16950:	mov	r2, r0
   16954:	mov	r1, #1
   16958:	mov	r0, r4
   1695c:	ldr	r3, [r5, #16]
   16960:	str	ip, [sp]
   16964:	ldr	ip, [r5, #12]
   16968:	str	r3, [sp, #12]
   1696c:	ldr	r3, [r5]
   16970:	str	lr, [sp, #4]
   16974:	str	ip, [sp, #8]
   16978:	bl	110d4 <__fprintf_chk@plt>
   1697c:	b	1680c <__assert_fail@plt+0x5690>
   16980:	mov	r2, #5
   16984:	movw	r1, #36528	; 0x8eb0
   16988:	movt	r1, #1
   1698c:	mov	r0, #0
   16990:	bl	10f60 <dcgettext@plt>
   16994:	ldr	lr, [r5, #4]
   16998:	mov	r2, r0
   1699c:	mov	r1, #1
   169a0:	mov	r0, r4
   169a4:	ldr	r3, [r5, #8]
   169a8:	ldr	ip, [r5, #20]
   169ac:	str	lr, [sp]
   169b0:	ldr	lr, [r5, #12]
   169b4:	str	ip, [sp, #16]
   169b8:	ldr	ip, [r5, #16]
   169bc:	str	r3, [sp, #4]
   169c0:	ldr	r3, [r5]
   169c4:	str	lr, [sp, #8]
   169c8:	str	ip, [sp, #12]
   169cc:	bl	110d4 <__fprintf_chk@plt>
   169d0:	b	1680c <__assert_fail@plt+0x5690>
   169d4:	mov	r2, #5
   169d8:	movw	r1, #36568	; 0x8ed8
   169dc:	movt	r1, #1
   169e0:	mov	r0, #0
   169e4:	bl	10f60 <dcgettext@plt>
   169e8:	ldmib	r5, {r3, ip}
   169ec:	mov	r2, r0
   169f0:	mov	r1, #1
   169f4:	mov	r0, r4
   169f8:	ldr	lr, [r5, #24]
   169fc:	str	r3, [sp]
   16a00:	ldr	r3, [r5, #12]
   16a04:	str	lr, [sp, #20]
   16a08:	ldr	lr, [r5, #20]
   16a0c:	str	ip, [sp, #4]
   16a10:	ldr	ip, [r5, #16]
   16a14:	str	r3, [sp, #8]
   16a18:	ldr	r3, [r5]
   16a1c:	str	ip, [sp, #12]
   16a20:	str	lr, [sp, #16]
   16a24:	bl	110d4 <__fprintf_chk@plt>
   16a28:	b	1680c <__assert_fail@plt+0x5690>
   16a2c:	mov	r2, #5
   16a30:	movw	r1, #36612	; 0x8f04
   16a34:	movt	r1, #1
   16a38:	mov	r0, #0
   16a3c:	bl	10f60 <dcgettext@plt>
   16a40:	ldmib	r5, {ip, lr}
   16a44:	mov	r2, r0
   16a48:	mov	r1, #1
   16a4c:	mov	r0, r4
   16a50:	ldr	r3, [r5, #28]
   16a54:	str	ip, [sp]
   16a58:	ldr	ip, [r5, #12]
   16a5c:	str	r3, [sp, #24]
   16a60:	ldr	r3, [r5, #24]
   16a64:	str	lr, [sp, #4]
   16a68:	ldr	lr, [r5, #16]
   16a6c:	str	ip, [sp, #8]
   16a70:	ldr	ip, [r5, #20]
   16a74:	str	r3, [sp, #20]
   16a78:	ldr	r3, [r5]
   16a7c:	str	lr, [sp, #12]
   16a80:	str	ip, [sp, #16]
   16a84:	bl	110d4 <__fprintf_chk@plt>
   16a88:	b	1680c <__assert_fail@plt+0x5690>
   16a8c:	movw	r1, #36712	; 0x8f68
   16a90:	movt	r1, #1
   16a94:	b	167ac <__assert_fail@plt+0x5630>
   16a98:	strd	r4, [sp, #-12]!
   16a9c:	str	lr, [sp, #8]
   16aa0:	sub	sp, sp, #12
   16aa4:	ldr	r5, [sp, #24]
   16aa8:	ldr	ip, [r5]
   16aac:	cmp	ip, #0
   16ab0:	beq	16acc <__assert_fail@plt+0x5950>
   16ab4:	mov	lr, r5
   16ab8:	mov	ip, #0
   16abc:	ldr	r4, [lr, #4]!
   16ac0:	add	ip, ip, #1
   16ac4:	cmp	r4, #0
   16ac8:	bne	16abc <__assert_fail@plt+0x5940>
   16acc:	stm	sp, {r5, ip}
   16ad0:	bl	166b8 <__assert_fail@plt+0x553c>
   16ad4:	add	sp, sp, #12
   16ad8:	ldrd	r4, [sp]
   16adc:	add	sp, sp, #8
   16ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ae4:	push	{lr}		; (str lr, [sp, #-4]!)
   16ae8:	sub	sp, sp, #52	; 0x34
   16aec:	ldr	ip, [sp, #56]	; 0x38
   16af0:	ldr	lr, [ip]
   16af4:	cmp	lr, #0
   16af8:	str	lr, [sp, #8]
   16afc:	beq	16b94 <__assert_fail@plt+0x5a18>
   16b00:	ldr	lr, [ip, #4]
   16b04:	cmp	lr, #0
   16b08:	str	lr, [sp, #12]
   16b0c:	beq	16ba8 <__assert_fail@plt+0x5a2c>
   16b10:	ldr	lr, [ip, #8]
   16b14:	cmp	lr, #0
   16b18:	str	lr, [sp, #16]
   16b1c:	beq	16bb0 <__assert_fail@plt+0x5a34>
   16b20:	ldr	lr, [ip, #12]
   16b24:	cmp	lr, #0
   16b28:	str	lr, [sp, #20]
   16b2c:	beq	16bb8 <__assert_fail@plt+0x5a3c>
   16b30:	ldr	lr, [ip, #16]
   16b34:	cmp	lr, #0
   16b38:	str	lr, [sp, #24]
   16b3c:	beq	16bc0 <__assert_fail@plt+0x5a44>
   16b40:	ldr	lr, [ip, #20]
   16b44:	cmp	lr, #0
   16b48:	str	lr, [sp, #28]
   16b4c:	beq	16bc8 <__assert_fail@plt+0x5a4c>
   16b50:	ldr	lr, [ip, #24]
   16b54:	cmp	lr, #0
   16b58:	str	lr, [sp, #32]
   16b5c:	beq	16bd0 <__assert_fail@plt+0x5a54>
   16b60:	ldr	lr, [ip, #28]
   16b64:	cmp	lr, #0
   16b68:	str	lr, [sp, #36]	; 0x24
   16b6c:	beq	16bd8 <__assert_fail@plt+0x5a5c>
   16b70:	ldr	lr, [ip, #32]
   16b74:	cmp	lr, #0
   16b78:	str	lr, [sp, #40]	; 0x28
   16b7c:	beq	16be0 <__assert_fail@plt+0x5a64>
   16b80:	ldr	ip, [ip, #36]	; 0x24
   16b84:	cmp	ip, #0
   16b88:	str	ip, [sp, #44]	; 0x2c
   16b8c:	movne	lr, #10
   16b90:	moveq	lr, #9
   16b94:	add	ip, sp, #8
   16b98:	stm	sp, {ip, lr}
   16b9c:	bl	166b8 <__assert_fail@plt+0x553c>
   16ba0:	add	sp, sp, #52	; 0x34
   16ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba8:	mov	lr, #1
   16bac:	b	16b94 <__assert_fail@plt+0x5a18>
   16bb0:	mov	lr, #2
   16bb4:	b	16b94 <__assert_fail@plt+0x5a18>
   16bb8:	mov	lr, #3
   16bbc:	b	16b94 <__assert_fail@plt+0x5a18>
   16bc0:	mov	lr, #4
   16bc4:	b	16b94 <__assert_fail@plt+0x5a18>
   16bc8:	mov	lr, #5
   16bcc:	b	16b94 <__assert_fail@plt+0x5a18>
   16bd0:	mov	lr, #6
   16bd4:	b	16b94 <__assert_fail@plt+0x5a18>
   16bd8:	mov	lr, #7
   16bdc:	b	16b94 <__assert_fail@plt+0x5a18>
   16be0:	mov	lr, #8
   16be4:	b	16b94 <__assert_fail@plt+0x5a18>
   16be8:	push	{r3}		; (str r3, [sp, #-4]!)
   16bec:	push	{lr}		; (str lr, [sp, #-4]!)
   16bf0:	sub	sp, sp, #56	; 0x38
   16bf4:	ldr	ip, [sp, #64]	; 0x40
   16bf8:	add	r3, sp, #64	; 0x40
   16bfc:	str	r3, [sp, #12]
   16c00:	cmp	ip, #0
   16c04:	str	ip, [sp, #16]
   16c08:	beq	16ca0 <__assert_fail@plt+0x5b24>
   16c0c:	ldr	ip, [sp, #68]	; 0x44
   16c10:	cmp	ip, #0
   16c14:	str	ip, [sp, #20]
   16c18:	beq	16cc4 <__assert_fail@plt+0x5b48>
   16c1c:	ldr	ip, [sp, #72]	; 0x48
   16c20:	cmp	ip, #0
   16c24:	str	ip, [sp, #24]
   16c28:	beq	16ccc <__assert_fail@plt+0x5b50>
   16c2c:	ldr	ip, [sp, #76]	; 0x4c
   16c30:	cmp	ip, #0
   16c34:	str	ip, [sp, #28]
   16c38:	beq	16cd4 <__assert_fail@plt+0x5b58>
   16c3c:	ldr	ip, [sp, #80]	; 0x50
   16c40:	cmp	ip, #0
   16c44:	str	ip, [sp, #32]
   16c48:	beq	16cdc <__assert_fail@plt+0x5b60>
   16c4c:	ldr	ip, [sp, #84]	; 0x54
   16c50:	cmp	ip, #0
   16c54:	str	ip, [sp, #36]	; 0x24
   16c58:	beq	16ce4 <__assert_fail@plt+0x5b68>
   16c5c:	ldr	ip, [sp, #88]	; 0x58
   16c60:	cmp	ip, #0
   16c64:	str	ip, [sp, #40]	; 0x28
   16c68:	beq	16cec <__assert_fail@plt+0x5b70>
   16c6c:	ldr	ip, [sp, #92]	; 0x5c
   16c70:	cmp	ip, #0
   16c74:	str	ip, [sp, #44]	; 0x2c
   16c78:	beq	16cf4 <__assert_fail@plt+0x5b78>
   16c7c:	ldr	ip, [sp, #96]	; 0x60
   16c80:	cmp	ip, #0
   16c84:	str	ip, [sp, #48]	; 0x30
   16c88:	beq	16cfc <__assert_fail@plt+0x5b80>
   16c8c:	ldr	r3, [sp, #100]	; 0x64
   16c90:	cmp	r3, #0
   16c94:	str	r3, [sp, #52]	; 0x34
   16c98:	movne	ip, #10
   16c9c:	moveq	ip, #9
   16ca0:	ldr	r3, [sp, #60]	; 0x3c
   16ca4:	add	lr, sp, #16
   16ca8:	str	lr, [sp]
   16cac:	str	ip, [sp, #4]
   16cb0:	bl	166b8 <__assert_fail@plt+0x553c>
   16cb4:	add	sp, sp, #56	; 0x38
   16cb8:	pop	{lr}		; (ldr lr, [sp], #4)
   16cbc:	add	sp, sp, #4
   16cc0:	bx	lr
   16cc4:	mov	ip, #1
   16cc8:	b	16ca0 <__assert_fail@plt+0x5b24>
   16ccc:	mov	ip, #2
   16cd0:	b	16ca0 <__assert_fail@plt+0x5b24>
   16cd4:	mov	ip, #3
   16cd8:	b	16ca0 <__assert_fail@plt+0x5b24>
   16cdc:	mov	ip, #4
   16ce0:	b	16ca0 <__assert_fail@plt+0x5b24>
   16ce4:	mov	ip, #5
   16ce8:	b	16ca0 <__assert_fail@plt+0x5b24>
   16cec:	mov	ip, #6
   16cf0:	b	16ca0 <__assert_fail@plt+0x5b24>
   16cf4:	mov	ip, #7
   16cf8:	b	16ca0 <__assert_fail@plt+0x5b24>
   16cfc:	mov	ip, #8
   16d00:	b	16ca0 <__assert_fail@plt+0x5b24>
   16d04:	movw	r3, #41332	; 0xa174
   16d08:	movt	r3, #2
   16d0c:	str	r4, [sp, #-8]!
   16d10:	mov	r0, #10
   16d14:	ldr	r1, [r3]
   16d18:	str	lr, [sp, #4]
   16d1c:	bl	10f54 <fputc_unlocked@plt>
   16d20:	mov	r2, #5
   16d24:	movw	r1, #36772	; 0x8fa4
   16d28:	movt	r1, #1
   16d2c:	mov	r0, #0
   16d30:	bl	10f60 <dcgettext@plt>
   16d34:	mov	r1, r0
   16d38:	movw	r2, #36792	; 0x8fb8
   16d3c:	movt	r2, #1
   16d40:	mov	r0, #1
   16d44:	bl	110bc <__printf_chk@plt>
   16d48:	mov	r2, #5
   16d4c:	movw	r1, #36816	; 0x8fd0
   16d50:	movt	r1, #1
   16d54:	mov	r0, #0
   16d58:	bl	10f60 <dcgettext@plt>
   16d5c:	mov	r1, r0
   16d60:	movw	r3, #34900	; 0x8854
   16d64:	movt	r3, #1
   16d68:	movw	r2, #34940	; 0x887c
   16d6c:	movt	r2, #1
   16d70:	mov	r0, #1
   16d74:	bl	110bc <__printf_chk@plt>
   16d78:	mov	r2, #5
   16d7c:	movw	r1, #36836	; 0x8fe4
   16d80:	movt	r1, #1
   16d84:	mov	r0, #0
   16d88:	bl	10f60 <dcgettext@plt>
   16d8c:	mov	r1, r0
   16d90:	movw	r2, #36876	; 0x900c
   16d94:	movt	r2, #1
   16d98:	mov	r0, #1
   16d9c:	ldr	r4, [sp]
   16da0:	ldr	lr, [sp, #4]
   16da4:	add	sp, sp, #8
   16da8:	b	110bc <__printf_chk@plt>
   16dac:	strd	r4, [sp, #-16]!
   16db0:	mov	r4, r0
   16db4:	mov	r5, r2
   16db8:	str	r6, [sp, #8]
   16dbc:	mov	r6, r1
   16dc0:	str	lr, [sp, #12]
   16dc4:	bl	17fe0 <__assert_fail@plt+0x6e64>
   16dc8:	cmp	r0, #0
   16dcc:	beq	16de0 <__assert_fail@plt+0x5c64>
   16dd0:	ldrd	r4, [sp]
   16dd4:	ldr	r6, [sp, #8]
   16dd8:	add	sp, sp, #12
   16ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   16de0:	cmp	r4, #0
   16de4:	beq	16df4 <__assert_fail@plt+0x5c78>
   16de8:	cmp	r6, #0
   16dec:	cmpne	r5, #0
   16df0:	beq	16dd0 <__assert_fail@plt+0x5c54>
   16df4:	bl	173b0 <__assert_fail@plt+0x6234>
   16df8:	str	r4, [sp, #-8]!
   16dfc:	str	lr, [sp, #4]
   16e00:	bl	17a08 <__assert_fail@plt+0x688c>
   16e04:	cmp	r0, #0
   16e08:	beq	16e18 <__assert_fail@plt+0x5c9c>
   16e0c:	ldr	r4, [sp]
   16e10:	add	sp, sp, #4
   16e14:	pop	{pc}		; (ldr pc, [sp], #4)
   16e18:	bl	173b0 <__assert_fail@plt+0x6234>
   16e1c:	str	r4, [sp, #-8]!
   16e20:	str	lr, [sp, #4]
   16e24:	bl	17a08 <__assert_fail@plt+0x688c>
   16e28:	cmp	r0, #0
   16e2c:	beq	16e3c <__assert_fail@plt+0x5cc0>
   16e30:	ldr	r4, [sp]
   16e34:	add	sp, sp, #4
   16e38:	pop	{pc}		; (ldr pc, [sp], #4)
   16e3c:	bl	173b0 <__assert_fail@plt+0x6234>
   16e40:	str	r4, [sp, #-8]!
   16e44:	str	lr, [sp, #4]
   16e48:	bl	17a08 <__assert_fail@plt+0x688c>
   16e4c:	cmp	r0, #0
   16e50:	beq	16e60 <__assert_fail@plt+0x5ce4>
   16e54:	ldr	r4, [sp]
   16e58:	add	sp, sp, #4
   16e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e60:	bl	173b0 <__assert_fail@plt+0x6234>
   16e64:	strd	r4, [sp, #-16]!
   16e68:	mov	r5, r0
   16e6c:	mov	r4, r1
   16e70:	str	r6, [sp, #8]
   16e74:	str	lr, [sp, #12]
   16e78:	bl	17a44 <__assert_fail@plt+0x68c8>
   16e7c:	cmp	r0, #0
   16e80:	beq	16e94 <__assert_fail@plt+0x5d18>
   16e84:	ldrd	r4, [sp]
   16e88:	ldr	r6, [sp, #8]
   16e8c:	add	sp, sp, #12
   16e90:	pop	{pc}		; (ldr pc, [sp], #4)
   16e94:	adds	r4, r4, #0
   16e98:	movne	r4, #1
   16e9c:	cmp	r5, #0
   16ea0:	moveq	r4, #1
   16ea4:	cmp	r4, #0
   16ea8:	beq	16e84 <__assert_fail@plt+0x5d08>
   16eac:	bl	173b0 <__assert_fail@plt+0x6234>
   16eb0:	cmp	r1, #0
   16eb4:	orreq	r1, r1, #1
   16eb8:	str	r4, [sp, #-8]!
   16ebc:	str	lr, [sp, #4]
   16ec0:	bl	17a44 <__assert_fail@plt+0x68c8>
   16ec4:	cmp	r0, #0
   16ec8:	beq	16ed8 <__assert_fail@plt+0x5d5c>
   16ecc:	ldr	r4, [sp]
   16ed0:	add	sp, sp, #4
   16ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ed8:	bl	173b0 <__assert_fail@plt+0x6234>
   16edc:	strd	r4, [sp, #-16]!
   16ee0:	mov	r4, r0
   16ee4:	mov	r5, r2
   16ee8:	str	r6, [sp, #8]
   16eec:	mov	r6, r1
   16ef0:	str	lr, [sp, #12]
   16ef4:	bl	17fe0 <__assert_fail@plt+0x6e64>
   16ef8:	cmp	r0, #0
   16efc:	beq	16f10 <__assert_fail@plt+0x5d94>
   16f00:	ldrd	r4, [sp]
   16f04:	ldr	r6, [sp, #8]
   16f08:	add	sp, sp, #12
   16f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f10:	cmp	r4, #0
   16f14:	beq	16f24 <__assert_fail@plt+0x5da8>
   16f18:	cmp	r6, #0
   16f1c:	cmpne	r5, #0
   16f20:	beq	16f00 <__assert_fail@plt+0x5d84>
   16f24:	bl	173b0 <__assert_fail@plt+0x6234>
   16f28:	cmp	r2, #0
   16f2c:	cmpne	r1, #0
   16f30:	str	r4, [sp, #-8]!
   16f34:	moveq	r2, #1
   16f38:	str	lr, [sp, #4]
   16f3c:	moveq	r1, r2
   16f40:	bl	17fe0 <__assert_fail@plt+0x6e64>
   16f44:	cmp	r0, #0
   16f48:	beq	16f58 <__assert_fail@plt+0x5ddc>
   16f4c:	ldr	r4, [sp]
   16f50:	add	sp, sp, #4
   16f54:	pop	{pc}		; (ldr pc, [sp], #4)
   16f58:	bl	173b0 <__assert_fail@plt+0x6234>
   16f5c:	mov	r2, r1
   16f60:	mov	r1, r0
   16f64:	str	r4, [sp, #-8]!
   16f68:	mov	r0, #0
   16f6c:	str	lr, [sp, #4]
   16f70:	bl	17fe0 <__assert_fail@plt+0x6e64>
   16f74:	cmp	r0, #0
   16f78:	beq	16f88 <__assert_fail@plt+0x5e0c>
   16f7c:	ldr	r4, [sp]
   16f80:	add	sp, sp, #4
   16f84:	pop	{pc}		; (ldr pc, [sp], #4)
   16f88:	bl	173b0 <__assert_fail@plt+0x6234>
   16f8c:	cmp	r1, #0
   16f90:	cmpne	r0, #0
   16f94:	str	r4, [sp, #-8]!
   16f98:	moveq	r2, #1
   16f9c:	movne	r2, r1
   16fa0:	str	lr, [sp, #4]
   16fa4:	movne	r1, r0
   16fa8:	moveq	r1, r2
   16fac:	mov	r0, #0
   16fb0:	bl	17fe0 <__assert_fail@plt+0x6e64>
   16fb4:	cmp	r0, #0
   16fb8:	beq	16fc8 <__assert_fail@plt+0x5e4c>
   16fbc:	ldr	r4, [sp]
   16fc0:	add	sp, sp, #4
   16fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16fc8:	bl	173b0 <__assert_fail@plt+0x6234>
   16fcc:	cmp	r0, #0
   16fd0:	strd	r4, [sp, #-16]!
   16fd4:	mov	r5, r1
   16fd8:	ldr	r4, [r1]
   16fdc:	str	r6, [sp, #8]
   16fe0:	str	lr, [sp, #12]
   16fe4:	beq	1702c <__assert_fail@plt+0x5eb0>
   16fe8:	lsr	r3, r4, #1
   16fec:	add	r3, r3, #1
   16ff0:	adds	r4, r4, r3
   16ff4:	bcs	17028 <__assert_fail@plt+0x5eac>
   16ff8:	mov	r2, #1
   16ffc:	mov	r1, r4
   17000:	bl	17fe0 <__assert_fail@plt+0x6e64>
   17004:	cmp	r0, #0
   17008:	beq	17020 <__assert_fail@plt+0x5ea4>
   1700c:	ldr	r6, [sp, #8]
   17010:	str	r4, [r5]
   17014:	ldrd	r4, [sp]
   17018:	add	sp, sp, #12
   1701c:	pop	{pc}		; (ldr pc, [sp], #4)
   17020:	cmp	r4, #0
   17024:	beq	1700c <__assert_fail@plt+0x5e90>
   17028:	bl	173b0 <__assert_fail@plt+0x6234>
   1702c:	cmp	r4, #0
   17030:	mov	r2, #1
   17034:	moveq	r4, #64	; 0x40
   17038:	mov	r1, r4
   1703c:	bl	17fe0 <__assert_fail@plt+0x6e64>
   17040:	cmp	r0, #0
   17044:	bne	1700c <__assert_fail@plt+0x5e90>
   17048:	b	17028 <__assert_fail@plt+0x5eac>
   1704c:	cmp	r0, #0
   17050:	strd	r4, [sp, #-16]!
   17054:	mov	r5, r1
   17058:	ldr	r4, [r1]
   1705c:	str	r6, [sp, #8]
   17060:	mov	r6, r2
   17064:	str	lr, [sp, #12]
   17068:	beq	170b0 <__assert_fail@plt+0x5f34>
   1706c:	lsr	r3, r4, #1
   17070:	add	r3, r3, #1
   17074:	adds	r4, r4, r3
   17078:	bcs	170ac <__assert_fail@plt+0x5f30>
   1707c:	mov	r1, r4
   17080:	bl	17fe0 <__assert_fail@plt+0x6e64>
   17084:	cmp	r0, #0
   17088:	beq	170a0 <__assert_fail@plt+0x5f24>
   1708c:	ldr	r6, [sp, #8]
   17090:	str	r4, [r5]
   17094:	ldrd	r4, [sp]
   17098:	add	sp, sp, #12
   1709c:	pop	{pc}		; (ldr pc, [sp], #4)
   170a0:	cmp	r4, #0
   170a4:	cmpne	r6, #0
   170a8:	beq	1708c <__assert_fail@plt+0x5f10>
   170ac:	bl	173b0 <__assert_fail@plt+0x6234>
   170b0:	cmp	r4, #0
   170b4:	bne	170c8 <__assert_fail@plt+0x5f4c>
   170b8:	mov	r4, #64	; 0x40
   170bc:	udiv	r4, r4, r2
   170c0:	cmp	r2, #64	; 0x40
   170c4:	addhi	r4, r4, #1
   170c8:	mov	r2, r6
   170cc:	mov	r1, r4
   170d0:	mov	r0, #0
   170d4:	bl	17fe0 <__assert_fail@plt+0x6e64>
   170d8:	cmp	r0, #0
   170dc:	bne	1708c <__assert_fail@plt+0x5f10>
   170e0:	b	170ac <__assert_fail@plt+0x5f30>
   170e4:	ldr	ip, [r1]
   170e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   170ec:	strd	r6, [sp, #8]
   170f0:	mov	r7, r1
   170f4:	mov	r6, r0
   170f8:	str	r8, [sp, #16]
   170fc:	mvn	r8, r3
   17100:	lsr	r8, r8, #31
   17104:	str	lr, [sp, #20]
   17108:	asr	r1, ip, #1
   1710c:	ldr	lr, [sp, #24]
   17110:	adds	r4, ip, r1
   17114:	mvnvs	r4, #-2147483648	; 0x80000000
   17118:	cmp	r3, r4
   1711c:	movge	r1, #0
   17120:	andlt	r1, r8, #1
   17124:	cmp	r1, #0
   17128:	movne	r4, r3
   1712c:	smull	r0, r1, r4, lr
   17130:	cmp	r1, r0, asr #31
   17134:	bne	171e4 <__assert_fail@plt+0x6068>
   17138:	cmp	r0, #63	; 0x3f
   1713c:	mov	r5, r0
   17140:	ble	171b0 <__assert_fail@plt+0x6034>
   17144:	cmp	r6, #0
   17148:	sub	r1, r4, ip
   1714c:	streq	r6, [r7]
   17150:	cmp	r1, r2
   17154:	bge	17184 <__assert_fail@plt+0x6008>
   17158:	adds	r4, ip, r2
   1715c:	bvs	171e0 <__assert_fail@plt+0x6064>
   17160:	cmp	r4, r3
   17164:	movle	r3, #0
   17168:	andgt	r3, r8, #1
   1716c:	cmp	r3, #0
   17170:	bne	171e0 <__assert_fail@plt+0x6064>
   17174:	smull	r0, r1, r4, lr
   17178:	cmp	r1, r0, asr #31
   1717c:	mov	r5, r0
   17180:	bne	171e0 <__assert_fail@plt+0x6064>
   17184:	mov	r1, r5
   17188:	mov	r0, r6
   1718c:	bl	17a44 <__assert_fail@plt+0x68c8>
   17190:	cmp	r0, #0
   17194:	beq	171c4 <__assert_fail@plt+0x6048>
   17198:	ldr	r8, [sp, #16]
   1719c:	str	r4, [r7]
   171a0:	ldrd	r4, [sp]
   171a4:	ldrd	r6, [sp, #8]
   171a8:	add	sp, sp, #20
   171ac:	pop	{pc}		; (ldr pc, [sp], #4)
   171b0:	mov	r0, #64	; 0x40
   171b4:	sdiv	r4, r0, lr
   171b8:	mls	r5, lr, r4, r0
   171bc:	sub	r5, r0, r5
   171c0:	b	17144 <__assert_fail@plt+0x5fc8>
   171c4:	adds	r5, r5, #0
   171c8:	movne	r5, #1
   171cc:	cmp	r6, #0
   171d0:	movne	r6, r5
   171d4:	moveq	r6, #1
   171d8:	cmp	r6, #0
   171dc:	beq	17198 <__assert_fail@plt+0x601c>
   171e0:	bl	173b0 <__assert_fail@plt+0x6234>
   171e4:	mvn	r0, #-2147483648	; 0x80000000
   171e8:	b	171b4 <__assert_fail@plt+0x6038>
   171ec:	mov	r1, #1
   171f0:	str	r4, [sp, #-8]!
   171f4:	str	lr, [sp, #4]
   171f8:	bl	17994 <__assert_fail@plt+0x6818>
   171fc:	cmp	r0, #0
   17200:	beq	17210 <__assert_fail@plt+0x6094>
   17204:	ldr	r4, [sp]
   17208:	add	sp, sp, #4
   1720c:	pop	{pc}		; (ldr pc, [sp], #4)
   17210:	bl	173b0 <__assert_fail@plt+0x6234>
   17214:	mov	r1, #1
   17218:	str	r4, [sp, #-8]!
   1721c:	str	lr, [sp, #4]
   17220:	bl	17994 <__assert_fail@plt+0x6818>
   17224:	cmp	r0, #0
   17228:	beq	17238 <__assert_fail@plt+0x60bc>
   1722c:	ldr	r4, [sp]
   17230:	add	sp, sp, #4
   17234:	pop	{pc}		; (ldr pc, [sp], #4)
   17238:	bl	173b0 <__assert_fail@plt+0x6234>
   1723c:	str	r4, [sp, #-8]!
   17240:	str	lr, [sp, #4]
   17244:	bl	17994 <__assert_fail@plt+0x6818>
   17248:	cmp	r0, #0
   1724c:	beq	1725c <__assert_fail@plt+0x60e0>
   17250:	ldr	r4, [sp]
   17254:	add	sp, sp, #4
   17258:	pop	{pc}		; (ldr pc, [sp], #4)
   1725c:	bl	173b0 <__assert_fail@plt+0x6234>
   17260:	str	r4, [sp, #-8]!
   17264:	str	lr, [sp, #4]
   17268:	bl	17994 <__assert_fail@plt+0x6818>
   1726c:	cmp	r0, #0
   17270:	beq	17280 <__assert_fail@plt+0x6104>
   17274:	ldr	r4, [sp]
   17278:	add	sp, sp, #4
   1727c:	pop	{pc}		; (ldr pc, [sp], #4)
   17280:	bl	173b0 <__assert_fail@plt+0x6234>
   17284:	strd	r4, [sp, #-16]!
   17288:	mov	r4, r1
   1728c:	str	r6, [sp, #8]
   17290:	mov	r6, r0
   17294:	mov	r0, r1
   17298:	str	lr, [sp, #12]
   1729c:	bl	17a08 <__assert_fail@plt+0x688c>
   172a0:	subs	r5, r0, #0
   172a4:	beq	172c8 <__assert_fail@plt+0x614c>
   172a8:	mov	r2, r4
   172ac:	mov	r1, r6
   172b0:	bl	10f30 <memcpy@plt>
   172b4:	mov	r0, r5
   172b8:	ldrd	r4, [sp]
   172bc:	ldr	r6, [sp, #8]
   172c0:	add	sp, sp, #12
   172c4:	pop	{pc}		; (ldr pc, [sp], #4)
   172c8:	bl	173b0 <__assert_fail@plt+0x6234>
   172cc:	strd	r4, [sp, #-16]!
   172d0:	mov	r4, r1
   172d4:	str	r6, [sp, #8]
   172d8:	mov	r6, r0
   172dc:	mov	r0, r1
   172e0:	str	lr, [sp, #12]
   172e4:	bl	17a08 <__assert_fail@plt+0x688c>
   172e8:	subs	r5, r0, #0
   172ec:	beq	17310 <__assert_fail@plt+0x6194>
   172f0:	mov	r2, r4
   172f4:	mov	r1, r6
   172f8:	bl	10f30 <memcpy@plt>
   172fc:	mov	r0, r5
   17300:	ldrd	r4, [sp]
   17304:	ldr	r6, [sp, #8]
   17308:	add	sp, sp, #12
   1730c:	pop	{pc}		; (ldr pc, [sp], #4)
   17310:	bl	173b0 <__assert_fail@plt+0x6234>
   17314:	strd	r4, [sp, #-16]!
   17318:	mov	r4, r1
   1731c:	str	r6, [sp, #8]
   17320:	mov	r6, r0
   17324:	add	r0, r1, #1
   17328:	str	lr, [sp, #12]
   1732c:	bl	17a08 <__assert_fail@plt+0x688c>
   17330:	subs	r5, r0, #0
   17334:	beq	17360 <__assert_fail@plt+0x61e4>
   17338:	mov	r3, #0
   1733c:	mov	r1, r6
   17340:	mov	r2, r4
   17344:	strb	r3, [r5, r4]
   17348:	bl	10f30 <memcpy@plt>
   1734c:	mov	r0, r5
   17350:	ldrd	r4, [sp]
   17354:	ldr	r6, [sp, #8]
   17358:	add	sp, sp, #12
   1735c:	pop	{pc}		; (ldr pc, [sp], #4)
   17360:	bl	173b0 <__assert_fail@plt+0x6234>
   17364:	strd	r4, [sp, #-16]!
   17368:	str	r6, [sp, #8]
   1736c:	mov	r6, r0
   17370:	str	lr, [sp, #12]
   17374:	bl	11068 <strlen@plt>
   17378:	add	r4, r0, #1
   1737c:	mov	r0, r4
   17380:	bl	17a08 <__assert_fail@plt+0x688c>
   17384:	subs	r5, r0, #0
   17388:	beq	173ac <__assert_fail@plt+0x6230>
   1738c:	mov	r2, r4
   17390:	mov	r1, r6
   17394:	bl	10f30 <memcpy@plt>
   17398:	mov	r0, r5
   1739c:	ldrd	r4, [sp]
   173a0:	ldr	r6, [sp, #8]
   173a4:	add	sp, sp, #12
   173a8:	pop	{pc}		; (ldr pc, [sp], #4)
   173ac:	bl	173b0 <__assert_fail@plt+0x6234>
   173b0:	movw	r3, #41240	; 0xa118
   173b4:	movt	r3, #2
   173b8:	str	r4, [sp, #-8]!
   173bc:	ldr	r4, [r3]
   173c0:	mov	r2, #5
   173c4:	movw	r1, #36956	; 0x905c
   173c8:	movt	r1, #1
   173cc:	mov	r0, #0
   173d0:	str	lr, [sp, #4]
   173d4:	bl	10f60 <dcgettext@plt>
   173d8:	mov	r3, r0
   173dc:	movw	r2, #35828	; 0x8bf4
   173e0:	movt	r2, #1
   173e4:	mov	r1, #0
   173e8:	mov	r0, r4
   173ec:	bl	10ff0 <error@plt>
   173f0:	bl	11158 <abort@plt>
   173f4:	str	r4, [sp, #-8]!
   173f8:	str	lr, [sp, #4]
   173fc:	bl	17dc4 <__assert_fail@plt+0x6c48>
   17400:	cmn	r0, #1
   17404:	mov	r4, r0
   17408:	beq	1741c <__assert_fail@plt+0x62a0>
   1740c:	mov	r0, r4
   17410:	ldr	r4, [sp]
   17414:	add	sp, sp, #4
   17418:	pop	{pc}		; (ldr pc, [sp], #4)
   1741c:	bl	11080 <__errno_location@plt>
   17420:	ldr	r3, [r0]
   17424:	cmp	r3, #12
   17428:	bne	1740c <__assert_fail@plt+0x6290>
   1742c:	bl	173b0 <__assert_fail@plt+0x6234>
   17430:	cmp	r2, #36	; 0x24
   17434:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17438:	strd	r6, [sp, #8]
   1743c:	strd	r8, [sp, #16]
   17440:	str	sl, [sp, #24]
   17444:	str	lr, [sp, #28]
   17448:	sub	sp, sp, #8
   1744c:	bhi	17974 <__assert_fail@plt+0x67f8>
   17450:	cmp	r1, #0
   17454:	mov	r7, r2
   17458:	mov	r5, r1
   1745c:	mov	r9, r0
   17460:	addeq	r5, sp, #4
   17464:	mov	r6, r3
   17468:	bl	11080 <__errno_location@plt>
   1746c:	mov	r3, #0
   17470:	mov	sl, r0
   17474:	str	r3, [r0]
   17478:	ldrb	r4, [r9]
   1747c:	bl	11044 <__ctype_b_loc@plt>
   17480:	ldr	r2, [r0]
   17484:	lsl	r3, r4, #1
   17488:	ldrh	r3, [r2, r3]
   1748c:	tst	r3, #8192	; 0x2000
   17490:	beq	174ac <__assert_fail@plt+0x6330>
   17494:	mov	r3, r9
   17498:	ldrb	r4, [r3, #1]!
   1749c:	lsl	r1, r4, #1
   174a0:	ldrh	r1, [r2, r1]
   174a4:	tst	r1, #8192	; 0x2000
   174a8:	bne	17498 <__assert_fail@plt+0x631c>
   174ac:	cmp	r4, #45	; 0x2d
   174b0:	beq	17544 <__assert_fail@plt+0x63c8>
   174b4:	mov	r2, r7
   174b8:	mov	r1, r5
   174bc:	mov	r0, r9
   174c0:	bl	1105c <strtoul@plt>
   174c4:	ldr	r7, [r5]
   174c8:	mov	r8, r0
   174cc:	cmp	r7, r9
   174d0:	beq	1752c <__assert_fail@plt+0x63b0>
   174d4:	ldr	r4, [sl]
   174d8:	cmp	r4, #0
   174dc:	bne	1751c <__assert_fail@plt+0x63a0>
   174e0:	ldr	r3, [sp, #40]	; 0x28
   174e4:	cmp	r3, #0
   174e8:	beq	174f8 <__assert_fail@plt+0x637c>
   174ec:	ldrb	r9, [r7]
   174f0:	cmp	r9, #0
   174f4:	bne	1782c <__assert_fail@plt+0x66b0>
   174f8:	str	r8, [r6]
   174fc:	mov	r0, r4
   17500:	add	sp, sp, #8
   17504:	ldrd	r4, [sp]
   17508:	ldrd	r6, [sp, #8]
   1750c:	ldrd	r8, [sp, #16]
   17510:	ldr	sl, [sp, #24]
   17514:	add	sp, sp, #28
   17518:	pop	{pc}		; (ldr pc, [sp], #4)
   1751c:	cmp	r4, #34	; 0x22
   17520:	bne	17544 <__assert_fail@plt+0x63c8>
   17524:	mov	r4, #1
   17528:	b	174e0 <__assert_fail@plt+0x6364>
   1752c:	ldr	r3, [sp, #40]	; 0x28
   17530:	cmp	r3, #0
   17534:	beq	17544 <__assert_fail@plt+0x63c8>
   17538:	ldrb	r9, [r9]
   1753c:	cmp	r9, #0
   17540:	bne	1754c <__assert_fail@plt+0x63d0>
   17544:	mov	r4, #4
   17548:	b	174fc <__assert_fail@plt+0x6380>
   1754c:	mov	r1, r9
   17550:	mov	r0, r3
   17554:	bl	11074 <strchr@plt>
   17558:	cmp	r0, #0
   1755c:	movne	r4, #0
   17560:	movne	r8, #1
   17564:	beq	17544 <__assert_fail@plt+0x63c8>
   17568:	sub	r3, r9, #69	; 0x45
   1756c:	cmp	r3, #47	; 0x2f
   17570:	ldrls	pc, [pc, r3, lsl #2]
   17574:	b	17678 <__assert_fail@plt+0x64fc>
   17578:	andeq	r7, r1, r8, lsr r6
   1757c:	andeq	r7, r1, r8, ror r6
   17580:	andeq	r7, r1, r8, lsr r6
   17584:	andeq	r7, r1, r8, ror r6
   17588:	andeq	r7, r1, r8, ror r6
   1758c:	andeq	r7, r1, r8, ror r6
   17590:	andeq	r7, r1, r8, lsr r6
   17594:	andeq	r7, r1, r8, ror r6
   17598:	andeq	r7, r1, r8, lsr r6
   1759c:	andeq	r7, r1, r8, ror r6
   175a0:	andeq	r7, r1, r8, ror r6
   175a4:	andeq	r7, r1, r8, lsr r6
   175a8:	andeq	r7, r1, r8, ror r6
   175ac:	andeq	r7, r1, r8, ror r6
   175b0:	andeq	r7, r1, r8, ror r6
   175b4:	andeq	r7, r1, r8, lsr r6
   175b8:	andeq	r7, r1, r8, ror r6
   175bc:	andeq	r7, r1, r8, ror r6
   175c0:	andeq	r7, r1, r8, ror r6
   175c4:	andeq	r7, r1, r8, ror r6
   175c8:	andeq	r7, r1, r8, lsr r6
   175cc:	andeq	r7, r1, r8, lsr r6
   175d0:	andeq	r7, r1, r8, ror r6
   175d4:	andeq	r7, r1, r8, ror r6
   175d8:	andeq	r7, r1, r8, ror r6
   175dc:	andeq	r7, r1, r8, ror r6
   175e0:	andeq	r7, r1, r8, ror r6
   175e4:	andeq	r7, r1, r8, ror r6
   175e8:	andeq	r7, r1, r8, ror r6
   175ec:	andeq	r7, r1, r8, ror r6
   175f0:	andeq	r7, r1, r8, ror r6
   175f4:	andeq	r7, r1, r8, ror r6
   175f8:	andeq	r7, r1, r8, ror r6
   175fc:	andeq	r7, r1, r8, ror r6
   17600:	andeq	r7, r1, r8, lsr r6
   17604:	andeq	r7, r1, r8, ror r6
   17608:	andeq	r7, r1, r8, ror r6
   1760c:	andeq	r7, r1, r8, ror r6
   17610:	andeq	r7, r1, r8, lsr r6
   17614:	andeq	r7, r1, r8, ror r6
   17618:	andeq	r7, r1, r8, lsr r6
   1761c:	andeq	r7, r1, r8, ror r6
   17620:	andeq	r7, r1, r8, ror r6
   17624:	andeq	r7, r1, r8, ror r6
   17628:	andeq	r7, r1, r8, ror r6
   1762c:	andeq	r7, r1, r8, ror r6
   17630:	andeq	r7, r1, r8, ror r6
   17634:	andeq	r7, r1, r8, lsr r6
   17638:	mov	r1, #48	; 0x30
   1763c:	ldr	r0, [sp, #40]	; 0x28
   17640:	bl	11074 <strchr@plt>
   17644:	cmp	r0, #0
   17648:	beq	17678 <__assert_fail@plt+0x64fc>
   1764c:	ldrb	r3, [r7, #1]
   17650:	cmp	r3, #68	; 0x44
   17654:	beq	17968 <__assert_fail@plt+0x67ec>
   17658:	cmp	r3, #105	; 0x69
   1765c:	beq	17844 <__assert_fail@plt+0x66c8>
   17660:	cmp	r3, #66	; 0x42
   17664:	moveq	r0, #2
   17668:	movne	r0, #1
   1766c:	moveq	r1, #1000	; 0x3e8
   17670:	movne	r1, #1024	; 0x400
   17674:	b	17680 <__assert_fail@plt+0x6504>
   17678:	mov	r0, #1
   1767c:	mov	r1, #1024	; 0x400
   17680:	sub	r9, r9, #66	; 0x42
   17684:	cmp	r9, #53	; 0x35
   17688:	ldrls	pc, [pc, r9, lsl #2]
   1768c:	b	17810 <__assert_fail@plt+0x6694>
   17690:	andeq	r7, r1, r0, asr r9
   17694:	andeq	r7, r1, r0, lsl r8
   17698:	andeq	r7, r1, r0, lsl r8
   1769c:	andeq	r7, r1, r8, lsr r9
   176a0:	andeq	r7, r1, r0, lsl r8
   176a4:	andeq	r7, r1, r4, lsl r9
   176a8:	andeq	r7, r1, r0, lsl r8
   176ac:	andeq	r7, r1, r0, lsl r8
   176b0:	andeq	r7, r1, r0, lsl r8
   176b4:	andeq	r7, r1, r8, lsl r8
   176b8:	andeq	r7, r1, r0, lsl r8
   176bc:	andeq	r7, r1, ip, ror #17
   176c0:	andeq	r7, r1, r0, lsl r8
   176c4:	andeq	r7, r1, r0, lsl r8
   176c8:	ldrdeq	r7, [r1], -r4
   176cc:	andeq	r7, r1, r0, lsl r8
   176d0:	andeq	r7, r1, r0, lsl r8
   176d4:	andeq	r7, r1, r0, lsl r8
   176d8:			; <UNDEFINED> instruction: 0x000178bc
   176dc:	andeq	r7, r1, r0, lsl r8
   176e0:	andeq	r7, r1, r0, lsl r8
   176e4:	andeq	r7, r1, r0, lsl r8
   176e8:	andeq	r7, r1, r0, lsl r8
   176ec:	andeq	r7, r1, ip, lsl #17
   176f0:	andeq	r7, r1, r8, ror #14
   176f4:	andeq	r7, r1, r0, lsl r8
   176f8:	andeq	r7, r1, r0, lsl r8
   176fc:	andeq	r7, r1, r0, lsl r8
   17700:	andeq	r7, r1, r0, lsl r8
   17704:	andeq	r7, r1, r0, lsl r8
   17708:	andeq	r7, r1, r0, lsl r8
   1770c:	andeq	r7, r1, r0, lsl r8
   17710:	andeq	r7, r1, r4, ror r8
   17714:	strdeq	r7, [r1], -ip
   17718:	andeq	r7, r1, r0, lsl r8
   1771c:	andeq	r7, r1, r0, lsl r8
   17720:	andeq	r7, r1, r0, lsl r8
   17724:	andeq	r7, r1, r4, lsl r9
   17728:	andeq	r7, r1, r0, lsl r8
   1772c:	andeq	r7, r1, r0, lsl r8
   17730:	andeq	r7, r1, r0, lsl r8
   17734:	andeq	r7, r1, r8, lsl r8
   17738:	andeq	r7, r1, r0, lsl r8
   1773c:	andeq	r7, r1, ip, ror #17
   17740:	andeq	r7, r1, r0, lsl r8
   17744:	andeq	r7, r1, r0, lsl r8
   17748:	andeq	r7, r1, r0, lsl r8
   1774c:	andeq	r7, r1, r0, lsl r8
   17750:	andeq	r7, r1, r0, lsl r8
   17754:	andeq	r7, r1, r0, lsl r8
   17758:			; <UNDEFINED> instruction: 0x000178bc
   1775c:	andeq	r7, r1, r0, lsl r8
   17760:	andeq	r7, r1, r0, lsl r8
   17764:	andeq	r7, r1, ip, asr r8
   17768:	umull	r2, r3, r8, r1
   1776c:	adds	ip, r3, #0
   17770:	movne	ip, #1
   17774:	cmp	ip, #0
   17778:	bne	178b4 <__assert_fail@plt+0x6738>
   1777c:	umull	r2, r3, r2, r1
   17780:	adds	ip, r3, #0
   17784:	movne	ip, #1
   17788:	cmp	ip, #0
   1778c:	bne	178b4 <__assert_fail@plt+0x6738>
   17790:	umull	r2, r3, r2, r1
   17794:	adds	ip, r3, #0
   17798:	movne	ip, #1
   1779c:	cmp	ip, #0
   177a0:	bne	178b4 <__assert_fail@plt+0x6738>
   177a4:	umull	r2, r3, r2, r1
   177a8:	adds	ip, r3, #0
   177ac:	movne	ip, #1
   177b0:	cmp	ip, #0
   177b4:	bne	178b4 <__assert_fail@plt+0x6738>
   177b8:	umull	r2, r3, r2, r1
   177bc:	adds	ip, r3, #0
   177c0:	movne	ip, #1
   177c4:	cmp	ip, #0
   177c8:	bne	178b4 <__assert_fail@plt+0x6738>
   177cc:	umull	r2, r3, r2, r1
   177d0:	adds	ip, r3, #0
   177d4:	movne	ip, #1
   177d8:	cmp	ip, #0
   177dc:	bne	178b4 <__assert_fail@plt+0x6738>
   177e0:	umull	r2, r3, r2, r1
   177e4:	adds	ip, r3, #0
   177e8:	movne	ip, #1
   177ec:	cmp	ip, #0
   177f0:	moveq	r8, r2
   177f4:	mvnne	r8, #0
   177f8:	orr	r4, r4, ip
   177fc:	add	r3, r7, r0
   17800:	str	r3, [r5]
   17804:	ldrb	r3, [r7, r0]
   17808:	cmp	r3, #0
   1780c:	beq	174f8 <__assert_fail@plt+0x637c>
   17810:	orr	r4, r4, #2
   17814:	b	174f8 <__assert_fail@plt+0x637c>
   17818:	umull	r8, r9, r8, r1
   1781c:	cmp	r9, #0
   17820:	movne	r4, #1
   17824:	mvnne	r8, #0
   17828:	b	177fc <__assert_fail@plt+0x6680>
   1782c:	mov	r0, r3
   17830:	mov	r1, r9
   17834:	bl	11074 <strchr@plt>
   17838:	cmp	r0, #0
   1783c:	bne	17568 <__assert_fail@plt+0x63ec>
   17840:	b	17810 <__assert_fail@plt+0x6694>
   17844:	ldrb	r3, [r7, #2]
   17848:	mov	r1, #1024	; 0x400
   1784c:	cmp	r3, #66	; 0x42
   17850:	movne	r0, #1
   17854:	moveq	r0, #3
   17858:	b	17680 <__assert_fail@plt+0x6504>
   1785c:	lsr	r3, r8, #31
   17860:	cmp	r3, #0
   17864:	movne	r4, #1
   17868:	mvnne	r8, #0
   1786c:	lsleq	r8, r8, #1
   17870:	b	177fc <__assert_fail@plt+0x6680>
   17874:	lsr	r3, r8, #23
   17878:	cmp	r3, #0
   1787c:	movne	r4, #1
   17880:	mvnne	r8, #0
   17884:	lsleq	r8, r8, #9
   17888:	b	177fc <__assert_fail@plt+0x6680>
   1788c:	umull	r2, r3, r8, r1
   17890:	adds	ip, r3, #0
   17894:	movne	ip, #1
   17898:	cmp	ip, #0
   1789c:	bne	178b4 <__assert_fail@plt+0x6738>
   178a0:	umull	r2, r3, r2, r1
   178a4:	adds	ip, r3, #0
   178a8:	movne	ip, #1
   178ac:	cmp	ip, #0
   178b0:	beq	1777c <__assert_fail@plt+0x6600>
   178b4:	mvn	r8, #0
   178b8:	b	177f8 <__assert_fail@plt+0x667c>
   178bc:	umull	r2, r3, r8, r1
   178c0:	adds	ip, r3, #0
   178c4:	movne	ip, #1
   178c8:	cmp	ip, #0
   178cc:	beq	177b8 <__assert_fail@plt+0x663c>
   178d0:	b	178b4 <__assert_fail@plt+0x6738>
   178d4:	umull	r2, r3, r8, r1
   178d8:	adds	ip, r3, #0
   178dc:	movne	ip, #1
   178e0:	cmp	ip, #0
   178e4:	beq	177a4 <__assert_fail@plt+0x6628>
   178e8:	b	178b4 <__assert_fail@plt+0x6738>
   178ec:	umull	r2, r3, r8, r1
   178f0:	cmp	r3, #0
   178f4:	bne	1792c <__assert_fail@plt+0x67b0>
   178f8:	umull	r8, r9, r2, r1
   178fc:	adds	r3, r9, #0
   17900:	movne	r3, #1
   17904:	cmp	r3, #0
   17908:	movne	r4, r3
   1790c:	mvnne	r8, #0
   17910:	b	177fc <__assert_fail@plt+0x6680>
   17914:	umull	r2, r3, r8, r1
   17918:	cmp	r3, #0
   1791c:	bne	1792c <__assert_fail@plt+0x67b0>
   17920:	umull	r2, r3, r2, r1
   17924:	cmp	r3, #0
   17928:	beq	178f8 <__assert_fail@plt+0x677c>
   1792c:	mov	r4, #1
   17930:	mvn	r8, #0
   17934:	b	177fc <__assert_fail@plt+0x6680>
   17938:	umull	r2, r3, r8, r1
   1793c:	adds	ip, r3, #0
   17940:	movne	ip, #1
   17944:	cmp	ip, #0
   17948:	beq	17790 <__assert_fail@plt+0x6614>
   1794c:	b	178b4 <__assert_fail@plt+0x6738>
   17950:	lsr	r3, r8, #22
   17954:	cmp	r3, #0
   17958:	movne	r4, #1
   1795c:	mvnne	r8, #0
   17960:	lsleq	r8, r8, #10
   17964:	b	177fc <__assert_fail@plt+0x6680>
   17968:	mov	r0, #2
   1796c:	mov	r1, #1000	; 0x3e8
   17970:	b	17680 <__assert_fail@plt+0x6504>
   17974:	movw	r3, #36976	; 0x9070
   17978:	movt	r3, #1
   1797c:	movw	r1, #36988	; 0x907c
   17980:	movt	r1, #1
   17984:	movw	r0, #37004	; 0x908c
   17988:	movt	r0, #1
   1798c:	mov	r2, #85	; 0x55
   17990:	bl	1117c <__assert_fail@plt>
   17994:	cmp	r1, #0
   17998:	cmpne	r0, #0
   1799c:	beq	179e8 <__assert_fail@plt+0x686c>
   179a0:	strd	r4, [sp, #-16]!
   179a4:	umull	r4, r5, r0, r1
   179a8:	str	r6, [sp, #8]
   179ac:	str	lr, [sp, #12]
   179b0:	adds	r3, r5, #0
   179b4:	movne	r3, #1
   179b8:	cmp	r4, #0
   179bc:	blt	179c8 <__assert_fail@plt+0x684c>
   179c0:	cmp	r3, #0
   179c4:	beq	179f4 <__assert_fail@plt+0x6878>
   179c8:	bl	11080 <__errno_location@plt>
   179cc:	mov	r3, #12
   179d0:	ldrd	r4, [sp]
   179d4:	ldr	r6, [sp, #8]
   179d8:	add	sp, sp, #12
   179dc:	str	r3, [r0]
   179e0:	mov	r0, #0
   179e4:	pop	{pc}		; (ldr pc, [sp], #4)
   179e8:	mov	r1, #1
   179ec:	mov	r0, r1
   179f0:	b	10ea0 <calloc@plt>
   179f4:	ldrd	r4, [sp]
   179f8:	ldr	r6, [sp, #8]
   179fc:	ldr	lr, [sp, #12]
   17a00:	add	sp, sp, #16
   17a04:	b	10ea0 <calloc@plt>
   17a08:	cmp	r0, #0
   17a0c:	beq	17a18 <__assert_fail@plt+0x689c>
   17a10:	blt	17a20 <__assert_fail@plt+0x68a4>
   17a14:	b	11008 <malloc@plt>
   17a18:	mov	r0, #1
   17a1c:	b	11008 <malloc@plt>
   17a20:	str	r4, [sp, #-8]!
   17a24:	str	lr, [sp, #4]
   17a28:	bl	11080 <__errno_location@plt>
   17a2c:	mov	r3, #12
   17a30:	ldr	r4, [sp]
   17a34:	add	sp, sp, #4
   17a38:	str	r3, [r0]
   17a3c:	mov	r0, #0
   17a40:	pop	{pc}		; (ldr pc, [sp], #4)
   17a44:	cmp	r0, #0
   17a48:	beq	17a70 <__assert_fail@plt+0x68f4>
   17a4c:	cmp	r1, #0
   17a50:	str	r4, [sp, #-8]!
   17a54:	str	lr, [sp, #4]
   17a58:	beq	17a78 <__assert_fail@plt+0x68fc>
   17a5c:	blt	17a8c <__assert_fail@plt+0x6910>
   17a60:	ldr	r4, [sp]
   17a64:	ldr	lr, [sp, #4]
   17a68:	add	sp, sp, #8
   17a6c:	b	10f6c <realloc@plt>
   17a70:	mov	r0, r1
   17a74:	b	17a08 <__assert_fail@plt+0x688c>
   17a78:	bl	126dc <__assert_fail@plt+0x1560>
   17a7c:	ldr	r4, [sp]
   17a80:	add	sp, sp, #4
   17a84:	mov	r0, #0
   17a88:	pop	{pc}		; (ldr pc, [sp], #4)
   17a8c:	bl	11080 <__errno_location@plt>
   17a90:	mov	r3, #12
   17a94:	str	r3, [r0]
   17a98:	b	17a7c <__assert_fail@plt+0x6900>
   17a9c:	strd	r4, [sp, #-16]!
   17aa0:	mov	r4, r0
   17aa4:	str	r6, [sp, #8]
   17aa8:	str	lr, [sp, #12]
   17aac:	bl	10fd8 <__fpending@plt>
   17ab0:	ldr	r5, [r4]
   17ab4:	mov	r6, r0
   17ab8:	mov	r0, r4
   17abc:	bl	17b24 <__assert_fail@plt+0x69a8>
   17ac0:	mov	r4, r0
   17ac4:	and	r5, r5, #32
   17ac8:	cmp	r5, #0
   17acc:	bne	17b04 <__assert_fail@plt+0x6988>
   17ad0:	cmp	r0, #0
   17ad4:	beq	17af0 <__assert_fail@plt+0x6974>
   17ad8:	cmp	r6, #0
   17adc:	bne	17b1c <__assert_fail@plt+0x69a0>
   17ae0:	bl	11080 <__errno_location@plt>
   17ae4:	ldr	r4, [r0]
   17ae8:	subs	r4, r4, #9
   17aec:	mvnne	r4, #0
   17af0:	mov	r0, r4
   17af4:	ldrd	r4, [sp]
   17af8:	ldr	r6, [sp, #8]
   17afc:	add	sp, sp, #12
   17b00:	pop	{pc}		; (ldr pc, [sp], #4)
   17b04:	cmp	r0, #0
   17b08:	bne	17b1c <__assert_fail@plt+0x69a0>
   17b0c:	bl	11080 <__errno_location@plt>
   17b10:	str	r4, [r0]
   17b14:	mvn	r4, #0
   17b18:	b	17af0 <__assert_fail@plt+0x6974>
   17b1c:	mvn	r4, #0
   17b20:	b	17af0 <__assert_fail@plt+0x6974>
   17b24:	strd	r4, [sp, #-12]!
   17b28:	mov	r4, r0
   17b2c:	str	lr, [sp, #8]
   17b30:	sub	sp, sp, #12
   17b34:	bl	110c8 <fileno@plt>
   17b38:	cmp	r0, #0
   17b3c:	mov	r0, r4
   17b40:	blt	17bc4 <__assert_fail@plt+0x6a48>
   17b44:	bl	11020 <__freading@plt>
   17b48:	cmp	r0, #0
   17b4c:	bne	17b90 <__assert_fail@plt+0x6a14>
   17b50:	mov	r0, r4
   17b54:	bl	17bd8 <__assert_fail@plt+0x6a5c>
   17b58:	cmp	r0, #0
   17b5c:	beq	17bc0 <__assert_fail@plt+0x6a44>
   17b60:	bl	11080 <__errno_location@plt>
   17b64:	mov	r5, r0
   17b68:	mov	r0, r4
   17b6c:	ldr	r4, [r5]
   17b70:	bl	110e0 <fclose@plt>
   17b74:	cmp	r4, #0
   17b78:	mvnne	r0, #0
   17b7c:	strne	r4, [r5]
   17b80:	add	sp, sp, #12
   17b84:	ldrd	r4, [sp]
   17b88:	add	sp, sp, #8
   17b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b90:	mov	r0, r4
   17b94:	bl	110c8 <fileno@plt>
   17b98:	mov	r1, #1
   17b9c:	mov	r2, #0
   17ba0:	mov	r3, #0
   17ba4:	str	r1, [sp]
   17ba8:	bl	10fb4 <lseek64@plt>
   17bac:	mvn	r3, #0
   17bb0:	mvn	r2, #0
   17bb4:	cmp	r1, r3
   17bb8:	cmpeq	r0, r2
   17bbc:	bne	17b50 <__assert_fail@plt+0x69d4>
   17bc0:	mov	r0, r4
   17bc4:	add	sp, sp, #12
   17bc8:	ldrd	r4, [sp]
   17bcc:	ldr	lr, [sp, #8]
   17bd0:	add	sp, sp, #12
   17bd4:	b	110e0 <fclose@plt>
   17bd8:	str	r4, [sp, #-8]!
   17bdc:	subs	r4, r0, #0
   17be0:	str	lr, [sp, #4]
   17be4:	sub	sp, sp, #8
   17be8:	beq	17c04 <__assert_fail@plt+0x6a88>
   17bec:	bl	11020 <__freading@plt>
   17bf0:	cmp	r0, #0
   17bf4:	beq	17c04 <__assert_fail@plt+0x6a88>
   17bf8:	ldr	r3, [r4]
   17bfc:	tst	r3, #256	; 0x100
   17c00:	bne	17c1c <__assert_fail@plt+0x6aa0>
   17c04:	mov	r0, r4
   17c08:	add	sp, sp, #8
   17c0c:	ldr	r4, [sp]
   17c10:	ldr	lr, [sp, #4]
   17c14:	add	sp, sp, #8
   17c18:	b	10f00 <fflush@plt>
   17c1c:	mov	r1, #1
   17c20:	mov	r2, #0
   17c24:	mov	r3, #0
   17c28:	mov	r0, r4
   17c2c:	str	r1, [sp]
   17c30:	bl	17c38 <__assert_fail@plt+0x6abc>
   17c34:	b	17c04 <__assert_fail@plt+0x6a88>
   17c38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17c3c:	mov	r4, r0
   17c40:	ldr	ip, [r0, #4]
   17c44:	strd	r6, [sp, #8]
   17c48:	str	lr, [sp, #20]
   17c4c:	ldr	lr, [r0, #8]
   17c50:	str	r8, [sp, #16]
   17c54:	sub	sp, sp, #8
   17c58:	ldr	r5, [sp, #32]
   17c5c:	cmp	lr, ip
   17c60:	beq	17c88 <__assert_fail@plt+0x6b0c>
   17c64:	mov	r0, r4
   17c68:	str	r5, [sp, #32]
   17c6c:	add	sp, sp, #8
   17c70:	ldrd	r4, [sp]
   17c74:	ldrd	r6, [sp, #8]
   17c78:	ldr	r8, [sp, #16]
   17c7c:	ldr	lr, [sp, #20]
   17c80:	add	sp, sp, #24
   17c84:	b	110ec <fseeko64@plt>
   17c88:	ldr	ip, [r0, #16]
   17c8c:	ldr	lr, [r0, #20]
   17c90:	cmp	lr, ip
   17c94:	bne	17c64 <__assert_fail@plt+0x6ae8>
   17c98:	ldr	r8, [r0, #36]	; 0x24
   17c9c:	cmp	r8, #0
   17ca0:	bne	17c64 <__assert_fail@plt+0x6ae8>
   17ca4:	mov	r6, r2
   17ca8:	mov	r7, r3
   17cac:	bl	110c8 <fileno@plt>
   17cb0:	mov	r2, r6
   17cb4:	mov	r3, r7
   17cb8:	str	r5, [sp]
   17cbc:	bl	10fb4 <lseek64@plt>
   17cc0:	mvn	r3, #0
   17cc4:	mvn	r2, #0
   17cc8:	cmp	r1, r3
   17ccc:	cmpeq	r0, r2
   17cd0:	beq	17d00 <__assert_fail@plt+0x6b84>
   17cd4:	ldr	r3, [r4]
   17cd8:	strd	r0, [r4, #80]	; 0x50
   17cdc:	bic	r3, r3, #16
   17ce0:	str	r3, [r4]
   17ce4:	mov	r0, r8
   17ce8:	add	sp, sp, #8
   17cec:	ldrd	r4, [sp]
   17cf0:	ldrd	r6, [sp, #8]
   17cf4:	ldr	r8, [sp, #16]
   17cf8:	add	sp, sp, #20
   17cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17d00:	mvn	r8, #0
   17d04:	b	17ce4 <__assert_fail@plt+0x6b68>
   17d08:	mov	r0, #14
   17d0c:	str	r4, [sp, #-8]!
   17d10:	str	lr, [sp, #4]
   17d14:	bl	11128 <nl_langinfo@plt>
   17d18:	cmp	r0, #0
   17d1c:	beq	17d40 <__assert_fail@plt+0x6bc4>
   17d20:	ldrb	r2, [r0]
   17d24:	movw	r3, #37044	; 0x90b4
   17d28:	movt	r3, #1
   17d2c:	ldr	r4, [sp]
   17d30:	add	sp, sp, #4
   17d34:	cmp	r2, #0
   17d38:	moveq	r0, r3
   17d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d40:	ldr	r4, [sp]
   17d44:	add	sp, sp, #4
   17d48:	movw	r0, #37044	; 0x90b4
   17d4c:	movt	r0, #1
   17d50:	pop	{pc}		; (ldr pc, [sp], #4)
   17d54:	strd	r4, [sp, #-20]!	; 0xffffffec
   17d58:	mov	r5, r2
   17d5c:	strd	r6, [sp, #8]
   17d60:	subs	r6, r0, #0
   17d64:	mov	r7, r1
   17d68:	str	lr, [sp, #16]
   17d6c:	sub	sp, sp, #12
   17d70:	addeq	r6, sp, #4
   17d74:	mov	r0, r6
   17d78:	bl	10fe4 <mbrtowc@plt>
   17d7c:	cmp	r5, #0
   17d80:	cmnne	r0, #3
   17d84:	mov	r4, r0
   17d88:	bhi	17da4 <__assert_fail@plt+0x6c28>
   17d8c:	mov	r0, r4
   17d90:	add	sp, sp, #12
   17d94:	ldrd	r4, [sp]
   17d98:	ldrd	r6, [sp, #8]
   17d9c:	add	sp, sp, #16
   17da0:	pop	{pc}		; (ldr pc, [sp], #4)
   17da4:	mov	r0, #0
   17da8:	bl	18018 <__assert_fail@plt+0x6e9c>
   17dac:	cmp	r0, #0
   17db0:	bne	17d8c <__assert_fail@plt+0x6c10>
   17db4:	ldrb	r3, [r7]
   17db8:	mov	r4, #1
   17dbc:	str	r3, [r6]
   17dc0:	b	17d8c <__assert_fail@plt+0x6c10>
   17dc4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17dc8:	strd	r6, [sp, #8]
   17dcc:	subs	r7, r0, #0
   17dd0:	mov	r6, r1
   17dd4:	strd	r8, [sp, #16]
   17dd8:	mov	r8, r2
   17ddc:	str	lr, [sp, #24]
   17de0:	sub	sp, sp, #12
   17de4:	beq	17eb0 <__assert_fail@plt+0x6d34>
   17de8:	mov	r3, #10
   17dec:	mov	r1, #40	; 0x28
   17df0:	mov	r0, #0
   17df4:	str	r3, [sp, #4]
   17df8:	bl	17a44 <__assert_fail@plt+0x68c8>
   17dfc:	subs	r4, r0, #0
   17e00:	bne	17e20 <__assert_fail@plt+0x6ca4>
   17e04:	b	17e84 <__assert_fail@plt+0x6d08>
   17e08:	bl	17a44 <__assert_fail@plt+0x68c8>
   17e0c:	cmp	r0, #0
   17e10:	beq	17e7c <__assert_fail@plt+0x6d00>
   17e14:	cmp	r5, #0
   17e18:	mov	r4, r0
   17e1c:	bge	17ea4 <__assert_fail@plt+0x6d28>
   17e20:	mov	r1, r6
   17e24:	add	r3, sp, #4
   17e28:	ldr	r9, [sp, #4]
   17e2c:	mov	r2, r4
   17e30:	mov	r0, r7
   17e34:	bl	110a4 <getgrouplist@plt>
   17e38:	subs	r5, r0, #0
   17e3c:	ldr	r1, [sp, #4]
   17e40:	bge	17e50 <__assert_fail@plt+0x6cd4>
   17e44:	cmp	r1, r9
   17e48:	lsleq	r1, r1, #1
   17e4c:	streq	r1, [sp, #4]
   17e50:	lsrs	r3, r1, #30
   17e54:	mov	r0, r4
   17e58:	movne	r3, #1
   17e5c:	moveq	r3, #0
   17e60:	lsls	r1, r1, #2
   17e64:	bmi	17e70 <__assert_fail@plt+0x6cf4>
   17e68:	cmp	r3, #0
   17e6c:	beq	17e08 <__assert_fail@plt+0x6c8c>
   17e70:	bl	11080 <__errno_location@plt>
   17e74:	mov	r3, #12
   17e78:	str	r3, [r0]
   17e7c:	mov	r0, r4
   17e80:	bl	126dc <__assert_fail@plt+0x1560>
   17e84:	mvn	r3, #0
   17e88:	mov	r0, r3
   17e8c:	add	sp, sp, #12
   17e90:	ldrd	r4, [sp]
   17e94:	ldrd	r6, [sp, #8]
   17e98:	ldrd	r8, [sp, #16]
   17e9c:	add	sp, sp, #24
   17ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ea4:	str	r0, [r8]
   17ea8:	ldr	r3, [sp, #4]
   17eac:	b	17e88 <__assert_fail@plt+0x6d0c>
   17eb0:	mov	r1, r7
   17eb4:	bl	11134 <getgroups@plt>
   17eb8:	cmp	r0, #0
   17ebc:	str	r0, [sp, #4]
   17ec0:	blt	17f80 <__assert_fail@plt+0x6e04>
   17ec4:	adds	r5, r6, #1
   17ec8:	movne	r5, #1
   17ecc:	cmp	r0, #0
   17ed0:	movne	r3, r5
   17ed4:	moveq	r3, #1
   17ed8:	cmp	r3, #0
   17edc:	addne	r0, r0, #1
   17ee0:	strne	r0, [sp, #4]
   17ee4:	lsrs	r3, r0, #30
   17ee8:	movne	r3, #1
   17eec:	moveq	r3, #0
   17ef0:	lsls	r1, r0, #2
   17ef4:	bmi	17fcc <__assert_fail@plt+0x6e50>
   17ef8:	cmp	r3, #0
   17efc:	bne	17fcc <__assert_fail@plt+0x6e50>
   17f00:	mov	r0, r3
   17f04:	bl	17a44 <__assert_fail@plt+0x68c8>
   17f08:	subs	r4, r0, #0
   17f0c:	beq	17e84 <__assert_fail@plt+0x6d08>
   17f10:	ldr	r0, [sp, #4]
   17f14:	cmn	r6, #1
   17f18:	sub	r0, r0, r5
   17f1c:	beq	17fb8 <__assert_fail@plt+0x6e3c>
   17f20:	add	r1, r4, #4
   17f24:	bl	11134 <getgroups@plt>
   17f28:	cmp	r0, #0
   17f2c:	addge	r3, r0, #1
   17f30:	strge	r6, [r4]
   17f34:	blt	17e7c <__assert_fail@plt+0x6d00>
   17f38:	cmp	r3, #1
   17f3c:	str	r4, [r8]
   17f40:	ble	17e88 <__assert_fail@plt+0x6d0c>
   17f44:	ldr	lr, [r4]
   17f48:	add	ip, r4, r3, lsl #2
   17f4c:	add	r2, r4, #4
   17f50:	cmp	ip, r2
   17f54:	bls	17e88 <__assert_fail@plt+0x6d0c>
   17f58:	ldr	r1, [r2], #4
   17f5c:	cmp	r1, lr
   17f60:	beq	17f78 <__assert_fail@plt+0x6dfc>
   17f64:	ldr	r0, [r4]
   17f68:	cmp	r1, r0
   17f6c:	strne	r1, [r4, #4]
   17f70:	addne	r4, r4, #4
   17f74:	bne	17f50 <__assert_fail@plt+0x6dd4>
   17f78:	sub	r3, r3, #1
   17f7c:	b	17f50 <__assert_fail@plt+0x6dd4>
   17f80:	bl	11080 <__errno_location@plt>
   17f84:	ldr	r3, [r0]
   17f88:	cmp	r3, #38	; 0x26
   17f8c:	bne	17e84 <__assert_fail@plt+0x6d08>
   17f90:	mov	r0, r7
   17f94:	mov	r1, #4
   17f98:	bl	17a44 <__assert_fail@plt+0x68c8>
   17f9c:	cmp	r0, #0
   17fa0:	beq	17e84 <__assert_fail@plt+0x6d08>
   17fa4:	adds	r3, r6, #1
   17fa8:	str	r0, [r8]
   17fac:	movne	r3, #1
   17fb0:	str	r6, [r0]
   17fb4:	b	17e88 <__assert_fail@plt+0x6d0c>
   17fb8:	mov	r1, r4
   17fbc:	bl	11134 <getgroups@plt>
   17fc0:	subs	r3, r0, #0
   17fc4:	bge	17f38 <__assert_fail@plt+0x6dbc>
   17fc8:	b	17e7c <__assert_fail@plt+0x6d00>
   17fcc:	bl	11080 <__errno_location@plt>
   17fd0:	mov	r2, #12
   17fd4:	mvn	r3, #0
   17fd8:	str	r2, [r0]
   17fdc:	b	17e88 <__assert_fail@plt+0x6d0c>
   17fe0:	umull	r2, r3, r1, r2
   17fe4:	cmp	r3, #0
   17fe8:	bne	17ff4 <__assert_fail@plt+0x6e78>
   17fec:	mov	r1, r2
   17ff0:	b	17a44 <__assert_fail@plt+0x68c8>
   17ff4:	str	r4, [sp, #-8]!
   17ff8:	str	lr, [sp, #4]
   17ffc:	bl	11080 <__errno_location@plt>
   18000:	mov	r3, #12
   18004:	ldr	r4, [sp]
   18008:	add	sp, sp, #4
   1800c:	str	r3, [r0]
   18010:	mov	r0, #0
   18014:	pop	{pc}		; (ldr pc, [sp], #4)
   18018:	push	{lr}		; (str lr, [sp, #-4]!)
   1801c:	sub	sp, sp, #268	; 0x10c
   18020:	movw	r2, #257	; 0x101
   18024:	add	r1, sp, #4
   18028:	bl	18070 <__assert_fail@plt+0x6ef4>
   1802c:	cmp	r0, #0
   18030:	movne	r0, #0
   18034:	bne	18068 <__assert_fail@plt+0x6eec>
   18038:	movw	r1, #37052	; 0x90bc
   1803c:	movt	r1, #1
   18040:	add	r0, sp, #4
   18044:	bl	10ee8 <strcmp@plt>
   18048:	cmp	r0, #0
   1804c:	beq	18068 <__assert_fail@plt+0x6eec>
   18050:	add	r0, sp, #4
   18054:	movw	r1, #37056	; 0x90c0
   18058:	movt	r1, #1
   1805c:	bl	10ee8 <strcmp@plt>
   18060:	adds	r0, r0, #0
   18064:	movne	r0, #1
   18068:	add	sp, sp, #268	; 0x10c
   1806c:	pop	{pc}		; (ldr pc, [sp], #4)
   18070:	strd	r4, [sp, #-16]!
   18074:	mov	r5, r1
   18078:	mov	r1, #0
   1807c:	mov	r4, r2
   18080:	str	r6, [sp, #8]
   18084:	str	lr, [sp, #12]
   18088:	bl	11104 <setlocale@plt>
   1808c:	subs	r6, r0, #0
   18090:	beq	18110 <__assert_fail@plt+0x6f94>
   18094:	bl	11068 <strlen@plt>
   18098:	cmp	r4, r0
   1809c:	bhi	180bc <__assert_fail@plt+0x6f40>
   180a0:	cmp	r4, #0
   180a4:	moveq	r0, #34	; 0x22
   180a8:	bne	180e0 <__assert_fail@plt+0x6f64>
   180ac:	ldrd	r4, [sp]
   180b0:	ldr	r6, [sp, #8]
   180b4:	add	sp, sp, #12
   180b8:	pop	{pc}		; (ldr pc, [sp], #4)
   180bc:	add	r2, r0, #1
   180c0:	mov	r1, r6
   180c4:	mov	r0, r5
   180c8:	bl	10f30 <memcpy@plt>
   180cc:	ldrd	r4, [sp]
   180d0:	mov	r0, #0
   180d4:	ldr	r6, [sp, #8]
   180d8:	add	sp, sp, #12
   180dc:	pop	{pc}		; (ldr pc, [sp], #4)
   180e0:	sub	r4, r4, #1
   180e4:	mov	r1, r6
   180e8:	mov	r2, r4
   180ec:	mov	r0, r5
   180f0:	bl	10f30 <memcpy@plt>
   180f4:	mov	r3, #0
   180f8:	mov	r0, #34	; 0x22
   180fc:	strb	r3, [r5, r4]
   18100:	ldrd	r4, [sp]
   18104:	ldr	r6, [sp, #8]
   18108:	add	sp, sp, #12
   1810c:	pop	{pc}		; (ldr pc, [sp], #4)
   18110:	cmp	r4, #0
   18114:	mov	r0, #22
   18118:	strbne	r6, [r5]
   1811c:	ldrd	r4, [sp]
   18120:	ldr	r6, [sp, #8]
   18124:	add	sp, sp, #12
   18128:	pop	{pc}		; (ldr pc, [sp], #4)
   1812c:	mov	r1, #0
   18130:	b	11104 <setlocale@plt>
   18134:	cmp	r3, #0
   18138:	cmpeq	r2, #0
   1813c:	bne	18154 <__assert_fail@plt+0x6fd8>
   18140:	cmp	r1, #0
   18144:	cmpeq	r0, #0
   18148:	mvnne	r1, #0
   1814c:	mvnne	r0, #0
   18150:	b	18170 <__assert_fail@plt+0x6ff4>
   18154:	sub	sp, sp, #8
   18158:	push	{sp, lr}
   1815c:	bl	18180 <__assert_fail@plt+0x7004>
   18160:	ldr	lr, [sp, #4]
   18164:	add	sp, sp, #8
   18168:	pop	{r2, r3}
   1816c:	bx	lr
   18170:	push	{r1, lr}
   18174:	mov	r0, #8
   18178:	bl	10ec4 <raise@plt>
   1817c:	pop	{r1, pc}
   18180:	cmp	r1, r3
   18184:	cmpeq	r0, r2
   18188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1818c:	mov	r4, r0
   18190:	movcc	r0, #0
   18194:	mov	r5, r1
   18198:	ldr	lr, [sp, #36]	; 0x24
   1819c:	movcc	r1, r0
   181a0:	bcc	1829c <__assert_fail@plt+0x7120>
   181a4:	cmp	r3, #0
   181a8:	clzeq	ip, r2
   181ac:	clzne	ip, r3
   181b0:	addeq	ip, ip, #32
   181b4:	cmp	r5, #0
   181b8:	clzeq	r1, r4
   181bc:	addeq	r1, r1, #32
   181c0:	clzne	r1, r5
   181c4:	sub	ip, ip, r1
   181c8:	sub	sl, ip, #32
   181cc:	lsl	r9, r3, ip
   181d0:	rsb	fp, ip, #32
   181d4:	orr	r9, r9, r2, lsl sl
   181d8:	orr	r9, r9, r2, lsr fp
   181dc:	lsl	r8, r2, ip
   181e0:	cmp	r5, r9
   181e4:	cmpeq	r4, r8
   181e8:	movcc	r0, #0
   181ec:	movcc	r1, r0
   181f0:	bcc	1820c <__assert_fail@plt+0x7090>
   181f4:	mov	r0, #1
   181f8:	subs	r4, r4, r8
   181fc:	lsl	r1, r0, sl
   18200:	orr	r1, r1, r0, lsr fp
   18204:	lsl	r0, r0, ip
   18208:	sbc	r5, r5, r9
   1820c:	cmp	ip, #0
   18210:	beq	1829c <__assert_fail@plt+0x7120>
   18214:	lsr	r6, r8, #1
   18218:	orr	r6, r6, r9, lsl #31
   1821c:	lsr	r7, r9, #1
   18220:	mov	r2, ip
   18224:	b	18248 <__assert_fail@plt+0x70cc>
   18228:	subs	r3, r4, r6
   1822c:	sbc	r8, r5, r7
   18230:	adds	r3, r3, r3
   18234:	adc	r8, r8, r8
   18238:	adds	r4, r3, #1
   1823c:	adc	r5, r8, #0
   18240:	subs	r2, r2, #1
   18244:	beq	18264 <__assert_fail@plt+0x70e8>
   18248:	cmp	r5, r7
   1824c:	cmpeq	r4, r6
   18250:	bcs	18228 <__assert_fail@plt+0x70ac>
   18254:	adds	r4, r4, r4
   18258:	adc	r5, r5, r5
   1825c:	subs	r2, r2, #1
   18260:	bne	18248 <__assert_fail@plt+0x70cc>
   18264:	lsr	r3, r4, ip
   18268:	orr	r3, r3, r5, lsl fp
   1826c:	lsr	r2, r5, ip
   18270:	orr	r3, r3, r5, lsr sl
   18274:	adds	r0, r0, r4
   18278:	mov	r4, r3
   1827c:	lsl	r3, r2, ip
   18280:	orr	r3, r3, r4, lsl sl
   18284:	lsl	ip, r4, ip
   18288:	orr	r3, r3, r4, lsr fp
   1828c:	adc	r1, r1, r5
   18290:	subs	r0, r0, ip
   18294:	mov	r5, r2
   18298:	sbc	r1, r1, r3
   1829c:	cmp	lr, #0
   182a0:	strdne	r4, [lr]
   182a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   182ac:	mov	r7, r0
   182b0:	ldr	r6, [pc, #72]	; 18300 <__assert_fail@plt+0x7184>
   182b4:	ldr	r5, [pc, #72]	; 18304 <__assert_fail@plt+0x7188>
   182b8:	add	r6, pc, r6
   182bc:	add	r5, pc, r5
   182c0:	sub	r6, r6, r5
   182c4:	mov	r8, r1
   182c8:	mov	r9, r2
   182cc:	bl	10e80 <calloc@plt-0x20>
   182d0:	asrs	r6, r6, #2
   182d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   182d8:	mov	r4, #0
   182dc:	add	r4, r4, #1
   182e0:	ldr	r3, [r5], #4
   182e4:	mov	r2, r9
   182e8:	mov	r1, r8
   182ec:	mov	r0, r7
   182f0:	blx	r3
   182f4:	cmp	r6, r4
   182f8:	bne	182dc <__assert_fail@plt+0x7160>
   182fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18300:	andeq	r1, r1, ip, asr #24
   18304:	andeq	r1, r1, r4, asr #24
   18308:	bx	lr
   1830c:	ldr	r3, [pc, #12]	; 18320 <__assert_fail@plt+0x71a4>
   18310:	mov	r1, #0
   18314:	add	r3, pc, r3
   18318:	ldr	r2, [r3]
   1831c:	b	1108c <__cxa_atexit@plt>
   18320:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

00018324 <.fini>:
   18324:	push	{r3, lr}
   18328:	pop	{r3, pc}
