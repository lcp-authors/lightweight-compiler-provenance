
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	1118c <__assert_fail@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <calloc@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <calloc@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	r6, r1, r4, asr r1

00010eb0 <calloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <fputs_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <raise@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <strcmp@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <fflush@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <free@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <execvp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <mbsinit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <dcgettext@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <realloc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <textdomain@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <iswprint@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <readlink@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <fwrite@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <lseek64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <__ctype_get_mb_cur_max@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <__fpending@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <ferror_unlocked@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <mbrtowc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <error@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <__asprintf_chk@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <getenv@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <malloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <__libc_start_main@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__freading@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <__gmon_start__@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <getopt_long@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <__ctype_b_loc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <exit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <bcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <strlen@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <strchr@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <__errno_location@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__cxa_atexit@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <memset@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <__printf_chk@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <fileno@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <strtoumax@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__fprintf_chk@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #20]!

0001109c <access@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <fclose@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <fseeko64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <strtok@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <setlocale@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <putenv@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <toupper@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <strrchr@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <nl_langinfo@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <bindtextdomain@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <__xstat64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strncmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <abort@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <__mempcpy_chk@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <__assert_fail@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

Disassembly of section .text:

00011150 <.text>:
   11150:	mov	fp, #0
   11154:	mov	lr, #0
   11158:	pop	{r1}		; (ldr r1, [sp], #4)
   1115c:	mov	r2, sp
   11160:	push	{r2}		; (str r2, [sp, #-4]!)
   11164:	push	{r0}		; (str r0, [sp, #-4]!)
   11168:	ldr	ip, [pc, #16]	; 11180 <__assert_fail@plt+0x3c>
   1116c:	push	{ip}		; (str ip, [sp, #-4]!)
   11170:	ldr	r0, [pc, #12]	; 11184 <__assert_fail@plt+0x40>
   11174:	ldr	r3, [pc, #12]	; 11188 <__assert_fail@plt+0x44>
   11178:	bl	10fdc <__libc_start_main@plt>
   1117c:	bl	1112c <abort@plt>
   11180:	andeq	r5, r1, ip, lsr #14
   11184:	andeq	r1, r1, r4, ror r5
   11188:	andeq	r5, r1, ip, asr #13
   1118c:	ldr	r3, [pc, #20]	; 111a8 <__assert_fail@plt+0x64>
   11190:	ldr	r2, [pc, #20]	; 111ac <__assert_fail@plt+0x68>
   11194:	add	r3, pc, r3
   11198:	ldr	r2, [r3, r2]
   1119c:	cmp	r2, #0
   111a0:	bxeq	lr
   111a4:	b	10ff4 <__gmon_start__@plt>
   111a8:	andeq	r5, r1, r4, ror #28
   111ac:	andeq	r0, r0, ip, ror #1
   111b0:	ldr	r0, [pc, #24]	; 111d0 <__assert_fail@plt+0x8c>
   111b4:	ldr	r3, [pc, #24]	; 111d4 <__assert_fail@plt+0x90>
   111b8:	cmp	r3, r0
   111bc:	bxeq	lr
   111c0:	ldr	r3, [pc, #16]	; 111d8 <__assert_fail@plt+0x94>
   111c4:	cmp	r3, #0
   111c8:	bxeq	lr
   111cc:	bx	r3
   111d0:	andeq	r7, r2, r0, asr #2
   111d4:	andeq	r7, r2, r0, asr #2
   111d8:	andeq	r0, r0, r0
   111dc:	ldr	r0, [pc, #36]	; 11208 <__assert_fail@plt+0xc4>
   111e0:	ldr	r1, [pc, #36]	; 1120c <__assert_fail@plt+0xc8>
   111e4:	sub	r1, r1, r0
   111e8:	asr	r1, r1, #2
   111ec:	add	r1, r1, r1, lsr #31
   111f0:	asrs	r1, r1, #1
   111f4:	bxeq	lr
   111f8:	ldr	r3, [pc, #16]	; 11210 <__assert_fail@plt+0xcc>
   111fc:	cmp	r3, #0
   11200:	bxeq	lr
   11204:	bx	r3
   11208:	andeq	r7, r2, r0, asr #2
   1120c:	andeq	r7, r2, r0, asr #2
   11210:	andeq	r0, r0, r0
   11214:	push	{r4, lr}
   11218:	ldr	r4, [pc, #24]	; 11238 <__assert_fail@plt+0xf4>
   1121c:	ldrb	r3, [r4]
   11220:	cmp	r3, #0
   11224:	popne	{r4, pc}
   11228:	bl	111b0 <__assert_fail@plt+0x6c>
   1122c:	mov	r3, #1
   11230:	strb	r3, [r4]
   11234:	pop	{r4, pc}
   11238:	andeq	r7, r2, ip, asr r1
   1123c:	b	111dc <__assert_fail@plt+0x98>
   11240:	push	{fp, lr}
   11244:	mov	fp, sp
   11248:	mov	r4, r0
   1124c:	cmp	r0, #0
   11250:	bne	11378 <__assert_fail@plt+0x234>
   11254:	movw	r1, #22411	; 0x578b
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10f28 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	movw	r0, #29072	; 0x7190
   11270:	movt	r0, #2
   11274:	ldr	r2, [r0]
   11278:	mov	r0, #1
   1127c:	bl	1106c <__printf_chk@plt>
   11280:	movw	r1, #22440	; 0x57a8
   11284:	movt	r1, #1
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	bl	10f28 <dcgettext@plt>
   11294:	movw	r5, #29012	; 0x7154
   11298:	movt	r5, #2
   1129c:	ldr	r1, [r5]
   112a0:	bl	10ebc <fputs_unlocked@plt>
   112a4:	bl	113bc <__assert_fail@plt+0x278>
   112a8:	movw	r1, #22515	; 0x57f3
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10f28 <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10ebc <fputs_unlocked@plt>
   112c4:	movw	r1, #22697	; 0x58a9
   112c8:	movt	r1, #1
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	bl	10f28 <dcgettext@plt>
   112d8:	ldr	r1, [r5]
   112dc:	bl	10ebc <fputs_unlocked@plt>
   112e0:	movw	r1, #22742	; 0x58d6
   112e4:	movt	r1, #1
   112e8:	mov	r0, #0
   112ec:	mov	r2, #5
   112f0:	bl	10f28 <dcgettext@plt>
   112f4:	ldr	r1, [r5]
   112f8:	bl	10ebc <fputs_unlocked@plt>
   112fc:	movw	r1, #22796	; 0x590c
   11300:	movt	r1, #1
   11304:	mov	r0, #0
   11308:	mov	r2, #5
   1130c:	bl	10f28 <dcgettext@plt>
   11310:	ldr	r1, [r5]
   11314:	bl	10ebc <fputs_unlocked@plt>
   11318:	movw	r1, #22905	; 0x5979
   1131c:	movt	r1, #1
   11320:	mov	r0, #0
   11324:	mov	r2, #5
   11328:	bl	10f28 <dcgettext@plt>
   1132c:	ldr	r1, [r5]
   11330:	bl	10ebc <fputs_unlocked@plt>
   11334:	movw	r1, #22967	; 0x59b7
   11338:	movt	r1, #1
   1133c:	mov	r0, #0
   11340:	mov	r2, #5
   11344:	bl	10f28 <dcgettext@plt>
   11348:	ldr	r1, [r5]
   1134c:	bl	10ebc <fputs_unlocked@plt>
   11350:	movw	r1, #23279	; 0x5aef
   11354:	movt	r1, #1
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	bl	10f28 <dcgettext@plt>
   11364:	ldr	r1, [r5]
   11368:	bl	10ebc <fputs_unlocked@plt>
   1136c:	bl	113ec <__assert_fail@plt+0x2a8>
   11370:	mov	r0, r4
   11374:	bl	11018 <exit@plt>
   11378:	movw	r0, #29008	; 0x7150
   1137c:	movt	r0, #2
   11380:	ldr	r5, [r0]
   11384:	movw	r1, #22372	; 0x5764
   11388:	movt	r1, #1
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	bl	10f28 <dcgettext@plt>
   11398:	mov	r2, r0
   1139c:	movw	r0, #29072	; 0x7190
   113a0:	movt	r0, #2
   113a4:	ldr	r3, [r0]
   113a8:	mov	r0, r5
   113ac:	mov	r1, #1
   113b0:	bl	11090 <__fprintf_chk@plt>
   113b4:	mov	r0, r4
   113b8:	bl	11018 <exit@plt>
   113bc:	push	{fp, lr}
   113c0:	mov	fp, sp
   113c4:	movw	r1, #23867	; 0x5d3b
   113c8:	movt	r1, #1
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	bl	10f28 <dcgettext@plt>
   113d8:	movw	r1, #29012	; 0x7154
   113dc:	movt	r1, #2
   113e0:	ldr	r1, [r1]
   113e4:	pop	{fp, lr}
   113e8:	b	10ebc <fputs_unlocked@plt>
   113ec:	push	{r4, r5, r6, sl, fp, lr}
   113f0:	add	fp, sp, #16
   113f4:	sub	sp, sp, #56	; 0x38
   113f8:	movw	r0, #24568	; 0x5ff8
   113fc:	movt	r0, #1
   11400:	add	r1, r0, #32
   11404:	mov	r2, #48	; 0x30
   11408:	vld1.64	{d16-d17}, [r1]
   1140c:	mov	r6, sp
   11410:	add	r1, r6, #32
   11414:	add	r3, r0, #16
   11418:	vld1.64	{d18-d19}, [r0], r2
   1141c:	vld1.64	{d20-d21}, [r3]
   11420:	vldr	d22, [r0]
   11424:	vst1.64	{d16-d17}, [r1]
   11428:	add	r0, r6, #16
   1142c:	vst1.64	{d20-d21}, [r0]
   11430:	mov	r0, r6
   11434:	vst1.64	{d18-d19}, [r0], r2
   11438:	vstr	d22, [r0]
   1143c:	ldr	r1, [sp]
   11440:	cmp	r1, #0
   11444:	movw	r4, #23546	; 0x5bfa
   11448:	movt	r4, #1
   1144c:	beq	11474 <__assert_fail@plt+0x330>
   11450:	mov	r6, sp
   11454:	movw	r5, #23546	; 0x5bfa
   11458:	movt	r5, #1
   1145c:	mov	r0, r5
   11460:	bl	10ed4 <strcmp@plt>
   11464:	cmp	r0, #0
   11468:	ldrne	r1, [r6, #8]!
   1146c:	cmpne	r1, #0
   11470:	bne	1145c <__assert_fail@plt+0x318>
   11474:	ldr	r5, [r6, #4]
   11478:	movw	r1, #24037	; 0x5de5
   1147c:	movt	r1, #1
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	bl	10f28 <dcgettext@plt>
   1148c:	mov	r1, r0
   11490:	movw	r2, #23732	; 0x5cb4
   11494:	movt	r2, #1
   11498:	movw	r3, #24060	; 0x5dfc
   1149c:	movt	r3, #1
   114a0:	mov	r0, #1
   114a4:	bl	1106c <__printf_chk@plt>
   114a8:	cmp	r5, #0
   114ac:	moveq	r5, r4
   114b0:	mov	r0, #5
   114b4:	mov	r1, #0
   114b8:	bl	110cc <setlocale@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	11500 <__assert_fail@plt+0x3bc>
   114c4:	movw	r1, #24100	; 0x5e24
   114c8:	movt	r1, #1
   114cc:	mov	r2, #3
   114d0:	bl	11120 <strncmp@plt>
   114d4:	cmp	r0, #0
   114d8:	beq	11500 <__assert_fail@plt+0x3bc>
   114dc:	movw	r1, #24104	; 0x5e28
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	mov	r2, #5
   114ec:	bl	10f28 <dcgettext@plt>
   114f0:	movw	r1, #29012	; 0x7154
   114f4:	movt	r1, #2
   114f8:	ldr	r1, [r1]
   114fc:	bl	10ebc <fputs_unlocked@plt>
   11500:	movw	r1, #24175	; 0x5e6f
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	bl	10f28 <dcgettext@plt>
   11514:	mov	r1, r0
   11518:	movw	r2, #24060	; 0x5dfc
   1151c:	movt	r2, #1
   11520:	mov	r0, #1
   11524:	mov	r3, r4
   11528:	bl	1106c <__printf_chk@plt>
   1152c:	movw	r0, #23970	; 0x5da2
   11530:	movt	r0, #1
   11534:	movw	r6, #24252	; 0x5ebc
   11538:	movt	r6, #1
   1153c:	cmp	r5, r4
   11540:	moveq	r6, r0
   11544:	movw	r1, #24202	; 0x5e8a
   11548:	movt	r1, #1
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	bl	10f28 <dcgettext@plt>
   11558:	mov	r1, r0
   1155c:	mov	r0, #1
   11560:	mov	r2, r5
   11564:	mov	r3, r6
   11568:	sub	sp, fp, #16
   1156c:	pop	{r4, r5, r6, sl, fp, lr}
   11570:	b	1106c <__printf_chk@plt>
   11574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11578:	add	fp, sp, #28
   1157c:	sub	sp, sp, #12
   11580:	mov	r4, r1
   11584:	mov	r5, r0
   11588:	ldr	r0, [r1]
   1158c:	bl	12344 <__assert_fail@plt+0x1200>
   11590:	movw	r1, #24252	; 0x5ebc
   11594:	movt	r1, #1
   11598:	mov	r0, #6
   1159c:	bl	110cc <setlocale@plt>
   115a0:	movw	r6, #23736	; 0x5cb8
   115a4:	movt	r6, #1
   115a8:	movw	r1, #23553	; 0x5c01
   115ac:	movt	r1, #1
   115b0:	mov	r0, r6
   115b4:	bl	11108 <bindtextdomain@plt>
   115b8:	mov	r0, r6
   115bc:	bl	10f40 <textdomain@plt>
   115c0:	bl	11888 <__assert_fail@plt+0x744>
   115c4:	movw	r0, #8316	; 0x207c
   115c8:	movt	r0, #1
   115cc:	bl	15730 <__assert_fail@plt+0x45ec>
   115d0:	movw	sl, #24472	; 0x5f98
   115d4:	movt	sl, #1
   115d8:	movw	r9, #29016	; 0x7158
   115dc:	movt	r9, #2
   115e0:	mov	r0, #0
   115e4:	str	r0, [sp]
   115e8:	mov	r0, r5
   115ec:	mov	r1, r4
   115f0:	movw	r2, #23577	; 0x5c19
   115f4:	movt	r2, #1
   115f8:	mov	r3, sl
   115fc:	bl	11000 <getopt_long@plt>
   11600:	mov	r6, r0
   11604:	cmp	r0, #100	; 0x64
   11608:	ble	116f4 <__assert_fail@plt+0x5b0>
   1160c:	sub	r0, r6, #101	; 0x65
   11610:	cmp	r0, #10
   11614:	bhi	1181c <__assert_fail@plt+0x6d8>
   11618:	mov	r1, #1
   1161c:	movw	r2, #1041	; 0x411
   11620:	tst	r2, r1, lsl r0
   11624:	beq	1181c <__assert_fail@plt+0x6d8>
   11628:	mov	r0, r6
   1162c:	bl	1189c <__assert_fail@plt+0x758>
   11630:	cmp	r0, #3
   11634:	bcs	11824 <__assert_fail@plt+0x6e0>
   11638:	add	r0, r0, r0, lsl #1
   1163c:	movw	r1, #29024	; 0x7160
   11640:	movt	r1, #2
   11644:	add	r7, r1, r0, lsl #2
   11648:	str	r6, [r7, #4]
   1164c:	ldr	r0, [r9]
   11650:	ldrb	r0, [r0]
   11654:	bl	11fc4 <__assert_fail@plt+0xe80>
   11658:	ldr	r8, [r9]
   1165c:	cmp	r0, #0
   11660:	beq	11674 <__assert_fail@plt+0x530>
   11664:	add	r0, r8, #1
   11668:	str	r0, [r9]
   1166c:	ldrb	r0, [r8, #1]
   11670:	b	11654 <__assert_fail@plt+0x510>
   11674:	str	r8, [r7, #8]
   11678:	cmp	r6, #105	; 0x69
   1167c:	bne	1168c <__assert_fail@plt+0x548>
   11680:	ldrb	r0, [r8]
   11684:	cmp	r0, #76	; 0x4c
   11688:	beq	11844 <__assert_fail@plt+0x700>
   1168c:	mov	r0, r8
   11690:	movw	r1, #24295	; 0x5ee7
   11694:	movt	r1, #1
   11698:	bl	10ed4 <strcmp@plt>
   1169c:	cmp	r0, #0
   116a0:	beq	115e0 <__assert_fail@plt+0x49c>
   116a4:	mov	r0, r8
   116a8:	mov	r1, r7
   116ac:	bl	118d0 <__assert_fail@plt+0x78c>
   116b0:	cmn	r0, #1
   116b4:	bne	115e0 <__assert_fail@plt+0x49c>
   116b8:	bl	11048 <__errno_location@plt>
   116bc:	ldr	r4, [r0]
   116c0:	movw	r1, #23716	; 0x5ca4
   116c4:	movt	r1, #1
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	bl	10f28 <dcgettext@plt>
   116d4:	mov	r5, r0
   116d8:	ldr	r0, [r9]
   116dc:	bl	13b38 <__assert_fail@plt+0x29f4>
   116e0:	mov	r3, r0
   116e4:	mov	r0, #125	; 0x7d
   116e8:	mov	r1, r4
   116ec:	mov	r2, r5
   116f0:	bl	10fac <error@plt>
   116f4:	cmn	r6, #1
   116f8:	bne	117bc <__assert_fail@plt+0x678>
   116fc:	movw	r0, #29000	; 0x7148
   11700:	movt	r0, #2
   11704:	ldr	r6, [r0]
   11708:	cmp	r6, r5
   1170c:	bge	11850 <__assert_fail@plt+0x70c>
   11710:	bl	11968 <__assert_fail@plt+0x824>
   11714:	cmp	r0, #0
   11718:	beq	1185c <__assert_fail@plt+0x718>
   1171c:	add	r4, r4, r6, lsl #2
   11720:	movw	r0, #29072	; 0x7190
   11724:	movt	r0, #2
   11728:	ldr	r0, [r0]
   1172c:	bl	11a80 <__assert_fail@plt+0x93c>
   11730:	movw	r5, #29060	; 0x7184
   11734:	movt	r5, #2
   11738:	ldr	r0, [r5]
   1173c:	cmp	r0, #0
   11740:	bne	11754 <__assert_fail@plt+0x610>
   11744:	movw	r0, #23817	; 0x5d09
   11748:	movt	r0, #1
   1174c:	bl	14780 <__assert_fail@plt+0x363c>
   11750:	str	r0, [r5]
   11754:	bl	11b88 <__assert_fail@plt+0xa44>
   11758:	ldr	r0, [r5]
   1175c:	bl	1231c <__assert_fail@plt+0x11d8>
   11760:	ldr	r0, [r4]
   11764:	mov	r1, r4
   11768:	bl	10f10 <execvp@plt>
   1176c:	bl	11048 <__errno_location@plt>
   11770:	ldr	r5, [r0]
   11774:	movw	r1, #23842	; 0x5d22
   11778:	movt	r1, #1
   1177c:	mov	r0, #0
   11780:	mov	r2, #5
   11784:	bl	10f28 <dcgettext@plt>
   11788:	mov	r6, r0
   1178c:	ldr	r0, [r4]
   11790:	bl	13b38 <__assert_fail@plt+0x29f4>
   11794:	mov	r3, r0
   11798:	mov	r0, #0
   1179c:	mov	r1, r5
   117a0:	mov	r2, r6
   117a4:	bl	10fac <error@plt>
   117a8:	mov	r0, #126	; 0x7e
   117ac:	cmp	r5, #2
   117b0:	movweq	r0, #127	; 0x7f
   117b4:	sub	sp, fp, #28
   117b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117bc:	cmn	r6, #3
   117c0:	bne	1180c <__assert_fail@plt+0x6c8>
   117c4:	movw	r0, #28920	; 0x70f8
   117c8:	movt	r0, #2
   117cc:	ldr	r3, [r0]
   117d0:	movw	r0, #29012	; 0x7154
   117d4:	movt	r0, #2
   117d8:	ldr	r0, [r0]
   117dc:	mov	r1, #0
   117e0:	movw	r2, #23746	; 0x5cc2
   117e4:	movt	r2, #1
   117e8:	str	r2, [sp]
   117ec:	str	r1, [sp, #4]
   117f0:	movw	r1, #23546	; 0x5bfa
   117f4:	movt	r1, #1
   117f8:	movw	r2, #23732	; 0x5cb4
   117fc:	movt	r2, #1
   11800:	bl	14310 <__assert_fail@plt+0x31cc>
   11804:	mov	r0, #0
   11808:	bl	11018 <exit@plt>
   1180c:	cmn	r6, #2
   11810:	bne	1181c <__assert_fail@plt+0x6d8>
   11814:	mov	r0, #0
   11818:	bl	11240 <__assert_fail@plt+0xfc>
   1181c:	mov	r0, #125	; 0x7d
   11820:	bl	11240 <__assert_fail@plt+0xfc>
   11824:	movw	r0, #23585	; 0x5c21
   11828:	movt	r0, #1
   1182c:	movw	r1, #23644	; 0x5c5c
   11830:	movt	r1, #1
   11834:	movw	r3, #23657	; 0x5c69
   11838:	movt	r3, #1
   1183c:	mov	r2, #336	; 0x150
   11840:	bl	11144 <__assert_fail@plt>
   11844:	movw	r1, #23680	; 0x5c80
   11848:	movt	r1, #1
   1184c:	b	11864 <__assert_fail@plt+0x720>
   11850:	movw	r1, #23760	; 0x5cd0
   11854:	movt	r1, #1
   11858:	b	11864 <__assert_fail@plt+0x720>
   1185c:	movw	r1, #23776	; 0x5ce0
   11860:	movt	r1, #1
   11864:	mov	r0, #0
   11868:	mov	r2, #5
   1186c:	bl	10f28 <dcgettext@plt>
   11870:	mov	r2, r0
   11874:	mov	r0, #0
   11878:	mov	r1, #0
   1187c:	bl	10fac <error@plt>
   11880:	mov	r0, #125	; 0x7d
   11884:	bl	11240 <__assert_fail@plt+0xfc>
   11888:	movw	r0, #28924	; 0x70fc
   1188c:	movt	r0, #2
   11890:	mov	r1, #125	; 0x7d
   11894:	str	r1, [r0]
   11898:	bx	lr
   1189c:	cmp	r0, #111	; 0x6f
   118a0:	beq	118c8 <__assert_fail@plt+0x784>
   118a4:	mov	r1, r0
   118a8:	cmp	r0, #105	; 0x69
   118ac:	moveq	r0, #0
   118b0:	bxeq	lr
   118b4:	mvn	r0, #0
   118b8:	cmp	r1, #101	; 0x65
   118bc:	moveq	r0, #2
   118c0:	bxeq	lr
   118c4:	bx	lr
   118c8:	mov	r0, #1
   118cc:	bx	lr
   118d0:	push	{r4, r5, fp, lr}
   118d4:	add	fp, sp, #8
   118d8:	sub	sp, sp, #16
   118dc:	mov	r4, r1
   118e0:	movw	r1, #24279	; 0x5ed7
   118e4:	movt	r1, #1
   118e8:	str	r1, [sp]
   118ec:	add	r3, sp, #8
   118f0:	mov	r1, #0
   118f4:	mov	r2, #10
   118f8:	bl	14818 <__assert_fail@plt+0x36d4>
   118fc:	ldr	r1, [sp, #12]
   11900:	cmp	r1, #0
   11904:	mov	r1, r0
   11908:	movwne	r1, #1
   1190c:	cmp	r0, #0
   11910:	movne	r1, r0
   11914:	cmp	r1, #1
   11918:	beq	11944 <__assert_fail@plt+0x800>
   1191c:	cmp	r1, #0
   11920:	bne	1194c <__assert_fail@plt+0x808>
   11924:	ldr	r5, [sp, #8]
   11928:	bl	11048 <__errno_location@plt>
   1192c:	mov	r1, r0
   11930:	mov	r0, #0
   11934:	str	r0, [r1]
   11938:	str	r5, [r4]
   1193c:	sub	sp, fp, #8
   11940:	pop	{r4, r5, fp, pc}
   11944:	mov	r4, #75	; 0x4b
   11948:	b	11954 <__assert_fail@plt+0x810>
   1194c:	bl	11048 <__errno_location@plt>
   11950:	ldr	r4, [r0]
   11954:	bl	11048 <__errno_location@plt>
   11958:	str	r4, [r0]
   1195c:	mvn	r0, #0
   11960:	sub	sp, fp, #8
   11964:	pop	{r4, r5, fp, pc}
   11968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1196c:	add	fp, sp, #28
   11970:	sub	sp, sp, #20
   11974:	mov	r8, #0
   11978:	movw	r5, #29024	; 0x7160
   1197c:	movt	r5, #2
   11980:	add	r4, sp, #16
   11984:	movw	r9, #24290	; 0x5ee2
   11988:	movt	r9, #1
   1198c:	movw	r6, #24297	; 0x5ee9
   11990:	movt	r6, #1
   11994:	movw	sl, #24306	; 0x5ef2
   11998:	movt	sl, #1
   1199c:	mov	r7, #0
   119a0:	mov	r0, #0
   119a4:	b	119b4 <__assert_fail@plt+0x870>
   119a8:	add	r7, r7, #12
   119ac:	cmp	r7, #36	; 0x24
   119b0:	beq	11a34 <__assert_fail@plt+0x8f0>
   119b4:	add	r2, r5, r7
   119b8:	ldr	r1, [r2, #8]
   119bc:	cmp	r1, #0
   119c0:	beq	119a8 <__assert_fail@plt+0x864>
   119c4:	ldr	r0, [r2, #4]
   119c8:	ldrb	r1, [r1]
   119cc:	cmp	r1, #76	; 0x4c
   119d0:	bne	119ec <__assert_fail@plt+0x8a8>
   119d4:	bl	110e4 <toupper@plt>
   119d8:	str	r0, [sp]
   119dc:	mov	r0, r4
   119e0:	mov	r1, #1
   119e4:	mov	r2, r9
   119e8:	b	11a0c <__assert_fail@plt+0x8c8>
   119ec:	bl	110e4 <toupper@plt>
   119f0:	ldr	r1, [r5, r7]
   119f4:	str	r1, [sp, #8]
   119f8:	str	r8, [sp, #12]
   119fc:	str	r0, [sp]
   11a00:	mov	r0, r4
   11a04:	mov	r1, #1
   11a08:	mov	r2, sl
   11a0c:	mov	r3, r6
   11a10:	bl	10fb8 <__asprintf_chk@plt>
   11a14:	cmn	r0, #1
   11a18:	ble	11a40 <__assert_fail@plt+0x8fc>
   11a1c:	ldr	r0, [sp, #16]
   11a20:	bl	110d8 <putenv@plt>
   11a24:	cmp	r0, #0
   11a28:	bne	11a44 <__assert_fail@plt+0x900>
   11a2c:	mov	r0, #1
   11a30:	b	119a8 <__assert_fail@plt+0x864>
   11a34:	and	r0, r0, #1
   11a38:	sub	sp, fp, #28
   11a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a40:	bl	147a0 <__assert_fail@plt+0x365c>
   11a44:	bl	11048 <__errno_location@plt>
   11a48:	ldr	r4, [r0]
   11a4c:	movw	r1, #24316	; 0x5efc
   11a50:	movt	r1, #1
   11a54:	mov	r0, #0
   11a58:	mov	r2, #5
   11a5c:	bl	10f28 <dcgettext@plt>
   11a60:	mov	r5, r0
   11a64:	ldr	r0, [sp, #16]
   11a68:	bl	13b38 <__assert_fail@plt+0x29f4>
   11a6c:	mov	r3, r0
   11a70:	mov	r0, #125	; 0x7d
   11a74:	mov	r1, r4
   11a78:	mov	r2, r5
   11a7c:	bl	10fac <error@plt>
   11a80:	push	{r4, r5, r6, r7, fp, lr}
   11a84:	add	fp, sp, #16
   11a88:	mov	r5, r0
   11a8c:	mov	r1, #47	; 0x2f
   11a90:	bl	1103c <strchr@plt>
   11a94:	cmp	r0, #0
   11a98:	beq	11ab4 <__assert_fail@plt+0x970>
   11a9c:	mov	r0, r5
   11aa0:	bl	12164 <__assert_fail@plt+0x1020>
   11aa4:	movw	r1, #29060	; 0x7184
   11aa8:	movt	r1, #2
   11aac:	str	r0, [r1]
   11ab0:	pop	{r4, r5, r6, r7, fp, pc}
   11ab4:	movw	r0, #24357	; 0x5f25
   11ab8:	movt	r0, #1
   11abc:	bl	147e4 <__assert_fail@plt+0x36a0>
   11ac0:	cmp	r0, #0
   11ac4:	beq	11ae8 <__assert_fail@plt+0x9a4>
   11ac8:	mov	r4, r0
   11acc:	bl	12164 <__assert_fail@plt+0x1020>
   11ad0:	movw	r1, #29060	; 0x7184
   11ad4:	movt	r1, #2
   11ad8:	str	r0, [r1]
   11adc:	mov	r0, r4
   11ae0:	pop	{r4, r5, r6, r7, fp, lr}
   11ae4:	b	1231c <__assert_fail@plt+0x11d8>
   11ae8:	movw	r0, #24372	; 0x5f34
   11aec:	movt	r0, #1
   11af0:	bl	10fc4 <getenv@plt>
   11af4:	cmp	r0, #0
   11af8:	beq	11b60 <__assert_fail@plt+0xa1c>
   11afc:	bl	14780 <__assert_fail@plt+0x363c>
   11b00:	mov	r4, r0
   11b04:	movw	r1, #23583	; 0x5c1f
   11b08:	movt	r1, #1
   11b0c:	bl	110c0 <strtok@plt>
   11b10:	cmp	r0, #0
   11b14:	beq	11adc <__assert_fail@plt+0x998>
   11b18:	movw	r6, #23583	; 0x5c1f
   11b1c:	movt	r6, #1
   11b20:	mov	r1, r5
   11b24:	mov	r2, #0
   11b28:	bl	12224 <__assert_fail@plt+0x10e0>
   11b2c:	mov	r7, r0
   11b30:	mov	r1, #1
   11b34:	bl	1109c <access@plt>
   11b38:	cmp	r0, #0
   11b3c:	beq	11b68 <__assert_fail@plt+0xa24>
   11b40:	mov	r0, r7
   11b44:	bl	1231c <__assert_fail@plt+0x11d8>
   11b48:	mov	r0, #0
   11b4c:	mov	r1, r6
   11b50:	bl	110c0 <strtok@plt>
   11b54:	cmp	r0, #0
   11b58:	bne	11b20 <__assert_fail@plt+0x9dc>
   11b5c:	b	11adc <__assert_fail@plt+0x998>
   11b60:	mov	r4, #0
   11b64:	b	11adc <__assert_fail@plt+0x998>
   11b68:	mov	r0, r7
   11b6c:	bl	12164 <__assert_fail@plt+0x1020>
   11b70:	movw	r1, #29060	; 0x7184
   11b74:	movt	r1, #2
   11b78:	str	r0, [r1]
   11b7c:	mov	r0, r7
   11b80:	bl	1231c <__assert_fail@plt+0x11d8>
   11b84:	b	11adc <__assert_fail@plt+0x998>
   11b88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b8c:	add	fp, sp, #24
   11b90:	sub	sp, sp, #128	; 0x80
   11b94:	movw	r0, #24377	; 0x5f39
   11b98:	movt	r0, #1
   11b9c:	bl	10fc4 <getenv@plt>
   11ba0:	mov	r8, r0
   11ba4:	mov	r0, #0
   11ba8:	str	r0, [fp, #-28]	; 0xffffffe4
   11bac:	movw	r0, #24388	; 0x5f44
   11bb0:	movt	r0, #1
   11bb4:	str	r0, [fp, #-32]	; 0xffffffe0
   11bb8:	movw	r0, #29060	; 0x7184
   11bbc:	movt	r0, #2
   11bc0:	ldr	r3, [r0]
   11bc4:	str	r3, [fp, #-36]	; 0xffffffdc
   11bc8:	ldrb	r0, [r3]
   11bcc:	cmp	r0, #0
   11bd0:	beq	11c48 <__assert_fail@plt+0xb04>
   11bd4:	sub	r0, fp, #36	; 0x24
   11bd8:	add	r4, r0, #4
   11bdc:	movw	r9, #24417	; 0x5f61
   11be0:	movt	r9, #1
   11be4:	sub	r5, fp, #40	; 0x28
   11be8:	movw	r6, #24430	; 0x5f6e
   11bec:	movt	r6, #1
   11bf0:	add	r7, sp, #8
   11bf4:	str	r9, [sp]
   11bf8:	mov	r0, r5
   11bfc:	mov	r1, #1
   11c00:	mov	r2, r6
   11c04:	bl	10fb8 <__asprintf_chk@plt>
   11c08:	cmn	r0, #1
   11c0c:	ble	11cfc <__assert_fail@plt+0xbb8>
   11c10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c14:	mov	r1, r7
   11c18:	bl	15748 <__assert_fail@plt+0x4604>
   11c1c:	cmp	r0, #0
   11c20:	beq	11c58 <__assert_fail@plt+0xb14>
   11c24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c28:	bl	1231c <__assert_fail@plt+0x11d8>
   11c2c:	ldr	r0, [r4]
   11c30:	cmp	r0, #0
   11c34:	beq	11d00 <__assert_fail@plt+0xbbc>
   11c38:	ldr	r3, [r4], #4
   11c3c:	ldrb	r0, [r3]
   11c40:	cmp	r0, #0
   11c44:	bne	11bf4 <__assert_fail@plt+0xab0>
   11c48:	movw	r0, #24417	; 0x5f61
   11c4c:	movt	r0, #1
   11c50:	bl	14780 <__assert_fail@plt+0x363c>
   11c54:	str	r0, [fp, #-40]	; 0xffffffd8
   11c58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c5c:	cmp	r8, #0
   11c60:	beq	11c7c <__assert_fail@plt+0xb38>
   11c64:	str	r8, [sp]
   11c68:	str	r0, [sp, #4]
   11c6c:	add	r0, sp, #8
   11c70:	movw	r2, #24454	; 0x5f86
   11c74:	movt	r2, #1
   11c78:	b	11c8c <__assert_fail@plt+0xb48>
   11c7c:	str	r0, [sp]
   11c80:	add	r0, sp, #8
   11c84:	movw	r2, #24463	; 0x5f8f
   11c88:	movt	r2, #1
   11c8c:	movw	r3, #24377	; 0x5f39
   11c90:	movt	r3, #1
   11c94:	mov	r1, #1
   11c98:	bl	10fb8 <__asprintf_chk@plt>
   11c9c:	cmn	r0, #1
   11ca0:	ble	11cfc <__assert_fail@plt+0xbb8>
   11ca4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11ca8:	bl	1231c <__assert_fail@plt+0x11d8>
   11cac:	ldr	r0, [sp, #8]
   11cb0:	bl	110d8 <putenv@plt>
   11cb4:	cmp	r0, #0
   11cb8:	subeq	sp, fp, #24
   11cbc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11cc0:	bl	11048 <__errno_location@plt>
   11cc4:	ldr	r4, [r0]
   11cc8:	movw	r1, #24316	; 0x5efc
   11ccc:	movt	r1, #1
   11cd0:	mov	r0, #0
   11cd4:	mov	r2, #5
   11cd8:	bl	10f28 <dcgettext@plt>
   11cdc:	mov	r5, r0
   11ce0:	ldr	r0, [sp, #8]
   11ce4:	bl	13b38 <__assert_fail@plt+0x29f4>
   11ce8:	mov	r3, r0
   11cec:	mov	r0, #125	; 0x7d
   11cf0:	mov	r1, r4
   11cf4:	mov	r2, r5
   11cf8:	bl	10fac <error@plt>
   11cfc:	bl	147a0 <__assert_fail@plt+0x365c>
   11d00:	movw	r1, #24436	; 0x5f74
   11d04:	movt	r1, #1
   11d08:	mov	r0, #0
   11d0c:	mov	r2, #5
   11d10:	bl	10f28 <dcgettext@plt>
   11d14:	mov	r4, r0
   11d18:	movw	r0, #24417	; 0x5f61
   11d1c:	movt	r0, #1
   11d20:	bl	13b38 <__assert_fail@plt+0x29f4>
   11d24:	mov	r3, r0
   11d28:	mov	r0, #125	; 0x7d
   11d2c:	mov	r1, #0
   11d30:	mov	r2, r4
   11d34:	bl	10fac <error@plt>
   11d38:	mov	r1, r0
   11d3c:	sub	r2, r0, #65	; 0x41
   11d40:	mov	r0, #1
   11d44:	cmp	r2, #26
   11d48:	subcs	r2, r1, #97	; 0x61
   11d4c:	cmpcs	r2, #26
   11d50:	bcs	11d58 <__assert_fail@plt+0xc14>
   11d54:	bx	lr
   11d58:	sub	r1, r1, #48	; 0x30
   11d5c:	cmp	r1, #10
   11d60:	movcs	r0, #0
   11d64:	bx	lr
   11d68:	mov	r1, r0
   11d6c:	sub	r2, r0, #65	; 0x41
   11d70:	mov	r0, #1
   11d74:	cmp	r2, #26
   11d78:	subcs	r1, r1, #97	; 0x61
   11d7c:	cmpcs	r1, #26
   11d80:	movcs	r0, #0
   11d84:	bx	lr
   11d88:	mov	r1, #0
   11d8c:	cmp	r0, #128	; 0x80
   11d90:	movwcc	r1, #1
   11d94:	mov	r0, r1
   11d98:	bx	lr
   11d9c:	sub	r1, r0, #9
   11da0:	clz	r1, r1
   11da4:	lsr	r1, r1, #5
   11da8:	sub	r0, r0, #32
   11dac:	clz	r0, r0
   11db0:	lsr	r0, r0, #5
   11db4:	orr	r0, r0, r1
   11db8:	bx	lr
   11dbc:	mov	r1, r0
   11dc0:	mov	r0, #1
   11dc4:	cmp	r1, #32
   11dc8:	bxcc	lr
   11dcc:	cmp	r1, #127	; 0x7f
   11dd0:	movne	r0, #0
   11dd4:	bx	lr
   11dd8:	sub	r1, r0, #48	; 0x30
   11ddc:	mov	r0, #0
   11de0:	cmp	r1, #10
   11de4:	movwcc	r0, #1
   11de8:	bx	lr
   11dec:	sub	r1, r0, #33	; 0x21
   11df0:	mov	r0, #0
   11df4:	cmp	r1, #94	; 0x5e
   11df8:	movwcc	r0, #1
   11dfc:	bx	lr
   11e00:	sub	r1, r0, #97	; 0x61
   11e04:	mov	r0, #0
   11e08:	cmp	r1, #26
   11e0c:	movwcc	r0, #1
   11e10:	bx	lr
   11e14:	sub	r1, r0, #32
   11e18:	mov	r0, #0
   11e1c:	cmp	r1, #95	; 0x5f
   11e20:	movwcc	r0, #1
   11e24:	bx	lr
   11e28:	sub	r1, r0, #33	; 0x21
   11e2c:	cmp	r1, #93	; 0x5d
   11e30:	bhi	11fbc <__assert_fail@plt+0xe78>
   11e34:	mov	r0, #1
   11e38:	add	r2, pc, #0
   11e3c:	ldr	pc, [r2, r1, lsl #2]
   11e40:			; <UNDEFINED> instruction: 0x00011fb8
   11e44:			; <UNDEFINED> instruction: 0x00011fb8
   11e48:			; <UNDEFINED> instruction: 0x00011fb8
   11e4c:			; <UNDEFINED> instruction: 0x00011fb8
   11e50:			; <UNDEFINED> instruction: 0x00011fb8
   11e54:			; <UNDEFINED> instruction: 0x00011fb8
   11e58:			; <UNDEFINED> instruction: 0x00011fb8
   11e5c:			; <UNDEFINED> instruction: 0x00011fb8
   11e60:			; <UNDEFINED> instruction: 0x00011fb8
   11e64:			; <UNDEFINED> instruction: 0x00011fb8
   11e68:			; <UNDEFINED> instruction: 0x00011fb8
   11e6c:			; <UNDEFINED> instruction: 0x00011fb8
   11e70:			; <UNDEFINED> instruction: 0x00011fb8
   11e74:			; <UNDEFINED> instruction: 0x00011fb8
   11e78:			; <UNDEFINED> instruction: 0x00011fb8
   11e7c:			; <UNDEFINED> instruction: 0x00011fbc
   11e80:			; <UNDEFINED> instruction: 0x00011fbc
   11e84:			; <UNDEFINED> instruction: 0x00011fbc
   11e88:			; <UNDEFINED> instruction: 0x00011fbc
   11e8c:			; <UNDEFINED> instruction: 0x00011fbc
   11e90:			; <UNDEFINED> instruction: 0x00011fbc
   11e94:			; <UNDEFINED> instruction: 0x00011fbc
   11e98:			; <UNDEFINED> instruction: 0x00011fbc
   11e9c:			; <UNDEFINED> instruction: 0x00011fbc
   11ea0:			; <UNDEFINED> instruction: 0x00011fbc
   11ea4:			; <UNDEFINED> instruction: 0x00011fb8
   11ea8:			; <UNDEFINED> instruction: 0x00011fb8
   11eac:			; <UNDEFINED> instruction: 0x00011fb8
   11eb0:			; <UNDEFINED> instruction: 0x00011fb8
   11eb4:			; <UNDEFINED> instruction: 0x00011fb8
   11eb8:			; <UNDEFINED> instruction: 0x00011fb8
   11ebc:			; <UNDEFINED> instruction: 0x00011fb8
   11ec0:			; <UNDEFINED> instruction: 0x00011fbc
   11ec4:			; <UNDEFINED> instruction: 0x00011fbc
   11ec8:			; <UNDEFINED> instruction: 0x00011fbc
   11ecc:			; <UNDEFINED> instruction: 0x00011fbc
   11ed0:			; <UNDEFINED> instruction: 0x00011fbc
   11ed4:			; <UNDEFINED> instruction: 0x00011fbc
   11ed8:			; <UNDEFINED> instruction: 0x00011fbc
   11edc:			; <UNDEFINED> instruction: 0x00011fbc
   11ee0:			; <UNDEFINED> instruction: 0x00011fbc
   11ee4:			; <UNDEFINED> instruction: 0x00011fbc
   11ee8:			; <UNDEFINED> instruction: 0x00011fbc
   11eec:			; <UNDEFINED> instruction: 0x00011fbc
   11ef0:			; <UNDEFINED> instruction: 0x00011fbc
   11ef4:			; <UNDEFINED> instruction: 0x00011fbc
   11ef8:			; <UNDEFINED> instruction: 0x00011fbc
   11efc:			; <UNDEFINED> instruction: 0x00011fbc
   11f00:			; <UNDEFINED> instruction: 0x00011fbc
   11f04:			; <UNDEFINED> instruction: 0x00011fbc
   11f08:			; <UNDEFINED> instruction: 0x00011fbc
   11f0c:			; <UNDEFINED> instruction: 0x00011fbc
   11f10:			; <UNDEFINED> instruction: 0x00011fbc
   11f14:			; <UNDEFINED> instruction: 0x00011fbc
   11f18:			; <UNDEFINED> instruction: 0x00011fbc
   11f1c:			; <UNDEFINED> instruction: 0x00011fbc
   11f20:			; <UNDEFINED> instruction: 0x00011fbc
   11f24:			; <UNDEFINED> instruction: 0x00011fbc
   11f28:			; <UNDEFINED> instruction: 0x00011fb8
   11f2c:			; <UNDEFINED> instruction: 0x00011fb8
   11f30:			; <UNDEFINED> instruction: 0x00011fb8
   11f34:			; <UNDEFINED> instruction: 0x00011fb8
   11f38:			; <UNDEFINED> instruction: 0x00011fb8
   11f3c:			; <UNDEFINED> instruction: 0x00011fb8
   11f40:			; <UNDEFINED> instruction: 0x00011fbc
   11f44:			; <UNDEFINED> instruction: 0x00011fbc
   11f48:			; <UNDEFINED> instruction: 0x00011fbc
   11f4c:			; <UNDEFINED> instruction: 0x00011fbc
   11f50:			; <UNDEFINED> instruction: 0x00011fbc
   11f54:			; <UNDEFINED> instruction: 0x00011fbc
   11f58:			; <UNDEFINED> instruction: 0x00011fbc
   11f5c:			; <UNDEFINED> instruction: 0x00011fbc
   11f60:			; <UNDEFINED> instruction: 0x00011fbc
   11f64:			; <UNDEFINED> instruction: 0x00011fbc
   11f68:			; <UNDEFINED> instruction: 0x00011fbc
   11f6c:			; <UNDEFINED> instruction: 0x00011fbc
   11f70:			; <UNDEFINED> instruction: 0x00011fbc
   11f74:			; <UNDEFINED> instruction: 0x00011fbc
   11f78:			; <UNDEFINED> instruction: 0x00011fbc
   11f7c:			; <UNDEFINED> instruction: 0x00011fbc
   11f80:			; <UNDEFINED> instruction: 0x00011fbc
   11f84:			; <UNDEFINED> instruction: 0x00011fbc
   11f88:			; <UNDEFINED> instruction: 0x00011fbc
   11f8c:			; <UNDEFINED> instruction: 0x00011fbc
   11f90:			; <UNDEFINED> instruction: 0x00011fbc
   11f94:			; <UNDEFINED> instruction: 0x00011fbc
   11f98:			; <UNDEFINED> instruction: 0x00011fbc
   11f9c:			; <UNDEFINED> instruction: 0x00011fbc
   11fa0:			; <UNDEFINED> instruction: 0x00011fbc
   11fa4:			; <UNDEFINED> instruction: 0x00011fbc
   11fa8:			; <UNDEFINED> instruction: 0x00011fb8
   11fac:			; <UNDEFINED> instruction: 0x00011fb8
   11fb0:			; <UNDEFINED> instruction: 0x00011fb8
   11fb4:			; <UNDEFINED> instruction: 0x00011fb8
   11fb8:	bx	lr
   11fbc:	mov	r0, #0
   11fc0:	bx	lr
   11fc4:	sub	r0, r0, #9
   11fc8:	cmp	r0, #23
   11fcc:	movhi	r0, #0
   11fd0:	bxhi	lr
   11fd4:	bic	r0, r0, #-16777216	; 0xff000000
   11fd8:	movw	r1, #31
   11fdc:	movt	r1, #128	; 0x80
   11fe0:	mov	r2, #1
   11fe4:	and	r0, r2, r1, lsr r0
   11fe8:	bx	lr
   11fec:	sub	r1, r0, #65	; 0x41
   11ff0:	mov	r0, #0
   11ff4:	cmp	r1, #26
   11ff8:	movwcc	r0, #1
   11ffc:	bx	lr
   12000:	mov	r1, r0
   12004:	sub	r2, r0, #48	; 0x30
   12008:	mov	r0, #1
   1200c:	cmp	r2, #22
   12010:	bhi	12028 <__assert_fail@plt+0xee4>
   12014:	mov	ip, #1
   12018:	movw	r3, #1023	; 0x3ff
   1201c:	movt	r3, #126	; 0x7e
   12020:	tst	r3, ip, lsl r2
   12024:	bxne	lr
   12028:	sub	r1, r1, #97	; 0x61
   1202c:	cmp	r1, #6
   12030:	movcs	r0, #0
   12034:	bxcs	lr
   12038:	bx	lr
   1203c:	sub	r1, r0, #65	; 0x41
   12040:	cmp	r1, #26
   12044:	addcc	r0, r0, #32
   12048:	bx	lr
   1204c:	sub	r1, r0, #97	; 0x61
   12050:	cmp	r1, #26
   12054:	subcc	r0, r0, #32
   12058:	bx	lr
   1205c:	movw	r1, #29064	; 0x7188
   12060:	movt	r1, #2
   12064:	str	r0, [r1]
   12068:	bx	lr
   1206c:	movw	r1, #29068	; 0x718c
   12070:	movt	r1, #2
   12074:	strb	r0, [r1]
   12078:	bx	lr
   1207c:	push	{r4, r5, r6, sl, fp, lr}
   12080:	add	fp, sp, #16
   12084:	sub	sp, sp, #8
   12088:	movw	r0, #29012	; 0x7154
   1208c:	movt	r0, #2
   12090:	ldr	r0, [r0]
   12094:	bl	150ec <__assert_fail@plt+0x3fa8>
   12098:	cmp	r0, #0
   1209c:	beq	120c4 <__assert_fail@plt+0xf80>
   120a0:	movw	r0, #29068	; 0x718c
   120a4:	movt	r0, #2
   120a8:	ldrb	r0, [r0]
   120ac:	cmp	r0, #0
   120b0:	beq	120e4 <__assert_fail@plt+0xfa0>
   120b4:	bl	11048 <__errno_location@plt>
   120b8:	ldr	r0, [r0]
   120bc:	cmp	r0, #32
   120c0:	bne	120e4 <__assert_fail@plt+0xfa0>
   120c4:	movw	r0, #29008	; 0x7150
   120c8:	movt	r0, #2
   120cc:	ldr	r0, [r0]
   120d0:	bl	150ec <__assert_fail@plt+0x3fa8>
   120d4:	cmp	r0, #0
   120d8:	subeq	sp, fp, #16
   120dc:	popeq	{r4, r5, r6, sl, fp, pc}
   120e0:	b	12154 <__assert_fail@plt+0x1010>
   120e4:	movw	r1, #24639	; 0x603f
   120e8:	movt	r1, #1
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	bl	10f28 <dcgettext@plt>
   120f8:	mov	r4, r0
   120fc:	movw	r0, #29064	; 0x7188
   12100:	movt	r0, #2
   12104:	ldr	r6, [r0]
   12108:	bl	11048 <__errno_location@plt>
   1210c:	ldr	r5, [r0]
   12110:	cmp	r6, #0
   12114:	bne	12130 <__assert_fail@plt+0xfec>
   12118:	movw	r2, #24655	; 0x604f
   1211c:	movt	r2, #1
   12120:	mov	r0, #0
   12124:	mov	r1, r5
   12128:	mov	r3, r4
   1212c:	b	12150 <__assert_fail@plt+0x100c>
   12130:	mov	r0, r6
   12134:	bl	139e8 <__assert_fail@plt+0x28a4>
   12138:	mov	r3, r0
   1213c:	str	r4, [sp]
   12140:	movw	r2, #24651	; 0x604b
   12144:	movt	r2, #1
   12148:	mov	r0, #0
   1214c:	mov	r1, r5
   12150:	bl	10fac <error@plt>
   12154:	movw	r0, #28924	; 0x70fc
   12158:	movt	r0, #2
   1215c:	ldr	r0, [r0]
   12160:	bl	10ef8 <_exit@plt>
   12164:	push	{fp, lr}
   12168:	mov	fp, sp
   1216c:	bl	121c4 <__assert_fail@plt+0x1080>
   12170:	cmp	r0, #0
   12174:	popne	{fp, pc}
   12178:	bl	147a0 <__assert_fail@plt+0x365c>
   1217c:	push	{r4, r5, r6, sl, fp, lr}
   12180:	add	fp, sp, #16
   12184:	mov	r4, r0
   12188:	mov	r5, r0
   1218c:	ldrb	r6, [r5], #-1
   12190:	bl	14e8c <__assert_fail@plt+0x3d48>
   12194:	sub	r2, r0, r4
   12198:	sub	r0, r6, #47	; 0x2f
   1219c:	clz	r0, r0
   121a0:	lsr	r1, r0, #5
   121a4:	mov	r0, r2
   121a8:	cmp	r2, r1
   121ac:	bls	121c0 <__assert_fail@plt+0x107c>
   121b0:	ldrb	r3, [r5, r0]
   121b4:	sub	r2, r0, #1
   121b8:	cmp	r3, #47	; 0x2f
   121bc:	beq	121a4 <__assert_fail@plt+0x1060>
   121c0:	pop	{r4, r5, r6, sl, fp, pc}
   121c4:	push	{r4, r5, r6, sl, fp, lr}
   121c8:	add	fp, sp, #16
   121cc:	mov	r6, r0
   121d0:	bl	1217c <__assert_fail@plt+0x1038>
   121d4:	mov	r4, r0
   121d8:	cmp	r0, #0
   121dc:	addeq	r0, r0, #1
   121e0:	add	r0, r0, #1
   121e4:	bl	14da8 <__assert_fail@plt+0x3c64>
   121e8:	mov	r5, r0
   121ec:	cmp	r0, #0
   121f0:	beq	1221c <__assert_fail@plt+0x10d8>
   121f4:	mov	r0, r5
   121f8:	mov	r1, r6
   121fc:	mov	r2, r4
   12200:	bl	10f04 <memcpy@plt>
   12204:	cmp	r4, #0
   12208:	moveq	r0, #46	; 0x2e
   1220c:	strbeq	r0, [r5, r4]
   12210:	moveq	r4, #1
   12214:	mov	r0, #0
   12218:	strb	r0, [r5, r4]
   1221c:	mov	r0, r5
   12220:	pop	{r4, r5, r6, sl, fp, pc}
   12224:	push	{fp, lr}
   12228:	mov	fp, sp
   1222c:	bl	1223c <__assert_fail@plt+0x10f8>
   12230:	cmp	r0, #0
   12234:	popne	{fp, pc}
   12238:	bl	147a0 <__assert_fail@plt+0x365c>
   1223c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12240:	add	fp, sp, #28
   12244:	push	{r2}		; (str r2, [sp, #-4]!)
   12248:	mov	sl, r1
   1224c:	mov	r7, r0
   12250:	bl	14e8c <__assert_fail@plt+0x3d48>
   12254:	sub	r4, r0, r7
   12258:	bl	14ed8 <__assert_fail@plt+0x3d94>
   1225c:	mov	r6, r0
   12260:	add	r5, r4, r0
   12264:	mov	r0, sl
   12268:	bl	11030 <strlen@plt>
   1226c:	mov	r9, r0
   12270:	cmp	r6, #0
   12274:	beq	1229c <__assert_fail@plt+0x1158>
   12278:	add	r0, r5, r7
   1227c:	ldrb	r0, [r0, #-1]
   12280:	mov	r4, #0
   12284:	cmp	r0, #47	; 0x2f
   12288:	beq	122ac <__assert_fail@plt+0x1168>
   1228c:	ldrb	r0, [sl]
   12290:	subs	r4, r0, #47	; 0x2f
   12294:	movwne	r4, #47	; 0x2f
   12298:	b	122ac <__assert_fail@plt+0x1168>
   1229c:	ldrb	r0, [sl]
   122a0:	mov	r4, #0
   122a4:	cmp	r0, #47	; 0x2f
   122a8:	movweq	r4, #46	; 0x2e
   122ac:	add	r0, r9, r5
   122b0:	uxtb	r8, r4
   122b4:	cmp	r8, #0
   122b8:	movwne	r8, #1
   122bc:	add	r0, r0, r8
   122c0:	add	r0, r0, #1
   122c4:	bl	14da8 <__assert_fail@plt+0x3c64>
   122c8:	mov	r6, r0
   122cc:	cmp	r0, #0
   122d0:	beq	12310 <__assert_fail@plt+0x11cc>
   122d4:	mov	r0, r6
   122d8:	mov	r1, r7
   122dc:	mov	r2, r5
   122e0:	mvn	r3, #0
   122e4:	bl	11138 <__mempcpy_chk@plt>
   122e8:	strb	r4, [r0], r8
   122ec:	ldr	r1, [sp]
   122f0:	cmp	r1, #0
   122f4:	strne	r0, [r1]
   122f8:	mov	r1, sl
   122fc:	mov	r2, r9
   12300:	mvn	r3, #0
   12304:	bl	11138 <__mempcpy_chk@plt>
   12308:	mov	r1, #0
   1230c:	strb	r1, [r0]
   12310:	mov	r0, r6
   12314:	sub	sp, fp, #28
   12318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1231c:	push	{r4, r5, r6, sl, fp, lr}
   12320:	add	fp, sp, #16
   12324:	mov	r4, r0
   12328:	bl	11048 <__errno_location@plt>
   1232c:	mov	r5, r0
   12330:	ldr	r6, [r0]
   12334:	mov	r0, r4
   12338:	bl	10eec <free@plt>
   1233c:	str	r6, [r5]
   12340:	pop	{r4, r5, r6, sl, fp, pc}
   12344:	push	{r4, r5, fp, lr}
   12348:	add	fp, sp, #8
   1234c:	cmp	r0, #0
   12350:	beq	123e4 <__assert_fail@plt+0x12a0>
   12354:	mov	r4, r0
   12358:	mov	r1, #47	; 0x2f
   1235c:	bl	110f0 <strrchr@plt>
   12360:	cmp	r0, #0
   12364:	mov	r5, r4
   12368:	addne	r5, r0, #1
   1236c:	sub	r0, r5, r4
   12370:	cmp	r0, #7
   12374:	blt	123c8 <__assert_fail@plt+0x1284>
   12378:	sub	r0, r5, #7
   1237c:	movw	r1, #24714	; 0x608a
   12380:	movt	r1, #1
   12384:	mov	r2, #7
   12388:	bl	11120 <strncmp@plt>
   1238c:	cmp	r0, #0
   12390:	bne	123c8 <__assert_fail@plt+0x1284>
   12394:	movw	r1, #24722	; 0x6092
   12398:	movt	r1, #1
   1239c:	mov	r0, r5
   123a0:	mov	r2, #3
   123a4:	bl	11120 <strncmp@plt>
   123a8:	cmp	r0, #0
   123ac:	beq	123b8 <__assert_fail@plt+0x1274>
   123b0:	mov	r4, r5
   123b4:	b	123c8 <__assert_fail@plt+0x1284>
   123b8:	add	r4, r5, #3
   123bc:	movw	r0, #28992	; 0x7140
   123c0:	movt	r0, #2
   123c4:	str	r4, [r0]
   123c8:	movw	r0, #28996	; 0x7144
   123cc:	movt	r0, #2
   123d0:	str	r4, [r0]
   123d4:	movw	r0, #29072	; 0x7190
   123d8:	movt	r0, #2
   123dc:	str	r4, [r0]
   123e0:	pop	{r4, r5, fp, pc}
   123e4:	movw	r0, #29008	; 0x7150
   123e8:	movt	r0, #2
   123ec:	ldr	r3, [r0]
   123f0:	movw	r0, #24658	; 0x6052
   123f4:	movt	r0, #1
   123f8:	mov	r1, #55	; 0x37
   123fc:	mov	r2, #1
   12400:	bl	10f64 <fwrite@plt>
   12404:	bl	1112c <abort@plt>
   12408:	push	{r4, r5, r6, sl, fp, lr}
   1240c:	add	fp, sp, #16
   12410:	mov	r4, r0
   12414:	movw	r0, #29080	; 0x7198
   12418:	movt	r0, #2
   1241c:	cmp	r4, #0
   12420:	moveq	r4, r0
   12424:	bl	11048 <__errno_location@plt>
   12428:	mov	r5, r0
   1242c:	ldr	r6, [r0]
   12430:	mov	r0, r4
   12434:	mov	r1, #48	; 0x30
   12438:	bl	14700 <__assert_fail@plt+0x35bc>
   1243c:	str	r6, [r5]
   12440:	pop	{r4, r5, r6, sl, fp, pc}
   12444:	movw	r1, #29080	; 0x7198
   12448:	movt	r1, #2
   1244c:	cmp	r0, #0
   12450:	movne	r1, r0
   12454:	ldr	r0, [r1]
   12458:	bx	lr
   1245c:	movw	r2, #29080	; 0x7198
   12460:	movt	r2, #2
   12464:	cmp	r0, #0
   12468:	movne	r2, r0
   1246c:	str	r1, [r2]
   12470:	bx	lr
   12474:	movw	r3, #29080	; 0x7198
   12478:	movt	r3, #2
   1247c:	cmp	r0, #0
   12480:	movne	r3, r0
   12484:	ubfx	r0, r1, #5, #3
   12488:	add	ip, r3, r0, lsl #2
   1248c:	ldr	r3, [ip, #8]
   12490:	and	r1, r1, #31
   12494:	mov	r0, #1
   12498:	and	r0, r0, r3, lsr r1
   1249c:	and	r2, r2, #1
   124a0:	eor	r2, r0, r2
   124a4:	eor	r1, r3, r2, lsl r1
   124a8:	str	r1, [ip, #8]
   124ac:	bx	lr
   124b0:	movw	r2, #29080	; 0x7198
   124b4:	movt	r2, #2
   124b8:	cmp	r0, #0
   124bc:	movne	r2, r0
   124c0:	ldr	r0, [r2, #4]
   124c4:	str	r1, [r2, #4]
   124c8:	bx	lr
   124cc:	push	{fp, lr}
   124d0:	mov	fp, sp
   124d4:	movw	r3, #29080	; 0x7198
   124d8:	movt	r3, #2
   124dc:	cmp	r0, #0
   124e0:	movne	r3, r0
   124e4:	mov	r0, #10
   124e8:	str	r0, [r3]
   124ec:	cmp	r1, #0
   124f0:	cmpne	r2, #0
   124f4:	bne	124fc <__assert_fail@plt+0x13b8>
   124f8:	bl	1112c <abort@plt>
   124fc:	str	r1, [r3, #40]	; 0x28
   12500:	str	r2, [r3, #44]	; 0x2c
   12504:	pop	{fp, pc}
   12508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1250c:	add	fp, sp, #28
   12510:	sub	sp, sp, #20
   12514:	mov	r8, r3
   12518:	mov	r9, r2
   1251c:	mov	sl, r1
   12520:	mov	r7, r0
   12524:	ldr	r0, [fp, #8]
   12528:	movw	r5, #29080	; 0x7198
   1252c:	movt	r5, #2
   12530:	cmp	r0, #0
   12534:	movne	r5, r0
   12538:	bl	11048 <__errno_location@plt>
   1253c:	mov	r4, r0
   12540:	ldm	r5, {r0, r1}
   12544:	ldr	r2, [r5, #40]	; 0x28
   12548:	ldr	r3, [r5, #44]	; 0x2c
   1254c:	ldr	r6, [r4]
   12550:	add	r5, r5, #8
   12554:	stm	sp, {r0, r1, r5}
   12558:	str	r2, [sp, #12]
   1255c:	str	r3, [sp, #16]
   12560:	mov	r0, r7
   12564:	mov	r1, sl
   12568:	mov	r2, r9
   1256c:	mov	r3, r8
   12570:	bl	12580 <__assert_fail@plt+0x143c>
   12574:	str	r6, [r4]
   12578:	sub	sp, fp, #28
   1257c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12584:	add	fp, sp, #28
   12588:	sub	sp, sp, #156	; 0x9c
   1258c:	mov	r9, r3
   12590:	mov	r7, r1
   12594:	mov	r6, r0
   12598:	str	r2, [fp, #-80]	; 0xffffffb0
   1259c:	add	r0, r2, #1
   125a0:	str	r0, [sp, #76]	; 0x4c
   125a4:	ldr	r0, [fp, #12]
   125a8:	and	r1, r0, #1
   125ac:	str	r1, [sp, #40]	; 0x28
   125b0:	and	r1, r0, #4
   125b4:	str	r1, [sp, #36]	; 0x24
   125b8:	ubfx	r4, r0, #1, #1
   125bc:	bl	10f7c <__ctype_get_mb_cur_max@plt>
   125c0:	str	r0, [sp, #44]	; 0x2c
   125c4:	ldr	r0, [fp, #24]
   125c8:	str	r0, [sp, #88]	; 0x58
   125cc:	ldr	r0, [fp, #20]
   125d0:	str	r0, [sp, #80]	; 0x50
   125d4:	ldr	r1, [fp, #8]
   125d8:	mov	r0, #0
   125dc:	str	r0, [sp, #84]	; 0x54
   125e0:	mov	r0, #0
   125e4:	str	r0, [fp, #-84]	; 0xffffffac
   125e8:	mov	r0, #0
   125ec:	str	r0, [fp, #-72]	; 0xffffffb8
   125f0:	mov	r0, #0
   125f4:	mov	r2, #0
   125f8:	str	r2, [fp, #-56]	; 0xffffffc8
   125fc:	mov	r2, #0
   12600:	str	r2, [sp, #64]	; 0x40
   12604:	mov	r2, #1
   12608:	str	r2, [fp, #-48]	; 0xffffffd0
   1260c:	cmp	r1, #10
   12610:	bhi	1353c <__assert_fail@plt+0x23f8>
   12614:	mov	sl, r7
   12618:	mov	r7, r1
   1261c:	add	r1, pc, #24
   12620:	mov	r8, #0
   12624:	mov	r2, #1
   12628:	mov	r3, #0
   1262c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12630:	mov	lr, r9
   12634:	mov	r5, r6
   12638:	ldr	pc, [r1, r7, lsl #2]
   1263c:	andeq	r2, r1, r0, lsl r7
   12640:	andeq	r2, r1, r0, asr r7
   12644:	andeq	r2, r1, r0, lsr #14
   12648:	andeq	r2, r1, r8, lsl #14
   1264c:	andeq	r2, r1, r4, asr #14
   12650:	andeq	r2, r1, r4, lsr #15
   12654:	andeq	r2, r1, r0, lsr r7
   12658:	andeq	r2, r1, r0, lsl #16
   1265c:	andeq	r2, r1, r8, ror #12
   12660:	andeq	r2, r1, r8, ror #12
   12664:	muleq	r1, r4, r6
   12668:	movw	r0, #24804	; 0x60e4
   1266c:	movt	r0, #1
   12670:	mov	r1, r7
   12674:	bl	13b44 <__assert_fail@plt+0x2a00>
   12678:	str	r0, [sp, #80]	; 0x50
   1267c:	movw	r0, #24806	; 0x60e6
   12680:	movt	r0, #1
   12684:	mov	r1, r7
   12688:	bl	13b44 <__assert_fail@plt+0x2a00>
   1268c:	mov	r5, r6
   12690:	str	r0, [sp, #88]	; 0x58
   12694:	mov	r8, #0
   12698:	tst	r4, #1
   1269c:	str	r7, [fp, #-64]	; 0xffffffc0
   126a0:	bne	126d8 <__assert_fail@plt+0x1594>
   126a4:	ldr	r0, [sp, #80]	; 0x50
   126a8:	ldrb	r0, [r0]
   126ac:	cmp	r0, #0
   126b0:	beq	126d8 <__assert_fail@plt+0x1594>
   126b4:	ldr	r1, [sp, #80]	; 0x50
   126b8:	add	r1, r1, #1
   126bc:	mov	r8, #0
   126c0:	cmp	r8, sl
   126c4:	strbcc	r0, [r5, r8]
   126c8:	ldrb	r0, [r1, r8]
   126cc:	add	r8, r8, #1
   126d0:	cmp	r0, #0
   126d4:	bne	126c0 <__assert_fail@plt+0x157c>
   126d8:	ldr	r7, [sp, #88]	; 0x58
   126dc:	mov	r0, r7
   126e0:	bl	11030 <strlen@plt>
   126e4:	mov	r5, r6
   126e8:	str	r0, [fp, #-72]	; 0xffffffb8
   126ec:	str	r7, [fp, #-84]	; 0xffffffac
   126f0:	mov	r2, #1
   126f4:	mov	r3, r4
   126f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   126fc:	mov	lr, r9
   12700:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12704:	b	12800 <__assert_fail@plt+0x16bc>
   12708:	mov	r0, #1
   1270c:	b	12750 <__assert_fail@plt+0x160c>
   12710:	mov	r7, #0
   12714:	mov	r8, #0
   12718:	mov	r2, r0
   1271c:	b	127fc <__assert_fail@plt+0x16b8>
   12720:	tst	r4, #1
   12724:	bne	12750 <__assert_fail@plt+0x160c>
   12728:	mov	r2, r0
   1272c:	b	12778 <__assert_fail@plt+0x1634>
   12730:	mov	r0, #1
   12734:	str	r0, [fp, #-72]	; 0xffffffb8
   12738:	mov	r8, #0
   1273c:	mov	r7, #5
   12740:	b	127bc <__assert_fail@plt+0x1678>
   12744:	mov	r2, #1
   12748:	tst	r4, #1
   1274c:	beq	12778 <__assert_fail@plt+0x1634>
   12750:	mov	r1, #1
   12754:	str	r1, [fp, #-72]	; 0xffffffb8
   12758:	mov	r8, #0
   1275c:	mov	r7, #2
   12760:	movw	r1, #24806	; 0x60e6
   12764:	movt	r1, #1
   12768:	str	r1, [fp, #-84]	; 0xffffffac
   1276c:	mov	r2, r0
   12770:	mov	r3, #1
   12774:	b	12800 <__assert_fail@plt+0x16bc>
   12778:	mov	r8, #1
   1277c:	mov	r7, #2
   12780:	cmp	sl, #0
   12784:	movne	r0, #39	; 0x27
   12788:	strbne	r0, [r5]
   1278c:	movw	r0, #24806	; 0x60e6
   12790:	movt	r0, #1
   12794:	str	r0, [fp, #-84]	; 0xffffffac
   12798:	mov	r0, #1
   1279c:	str	r0, [fp, #-72]	; 0xffffffb8
   127a0:	b	127fc <__assert_fail@plt+0x16b8>
   127a4:	mov	r7, #5
   127a8:	tst	r4, #1
   127ac:	beq	127d4 <__assert_fail@plt+0x1690>
   127b0:	mov	r0, #1
   127b4:	str	r0, [fp, #-72]	; 0xffffffb8
   127b8:	mov	r8, #0
   127bc:	movw	r0, #24802	; 0x60e2
   127c0:	movt	r0, #1
   127c4:	str	r0, [fp, #-84]	; 0xffffffac
   127c8:	mov	r2, #1
   127cc:	mov	r3, #1
   127d0:	b	12800 <__assert_fail@plt+0x16bc>
   127d4:	cmp	sl, #0
   127d8:	movne	r0, #34	; 0x22
   127dc:	strbne	r0, [r5]
   127e0:	mov	r8, #1
   127e4:	movw	r0, #24802	; 0x60e2
   127e8:	movt	r0, #1
   127ec:	str	r0, [fp, #-84]	; 0xffffffac
   127f0:	mov	r0, #1
   127f4:	str	r0, [fp, #-72]	; 0xffffffb8
   127f8:	mov	r2, #1
   127fc:	mov	r3, #0
   12800:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12804:	cmp	r0, #0
   12808:	movwne	r0, #1
   1280c:	and	r1, r0, r3
   12810:	and	r1, r2, r1
   12814:	str	r1, [sp, #56]	; 0x38
   12818:	sub	r1, r7, #2
   1281c:	clz	r1, r1
   12820:	lsr	r1, r1, #5
   12824:	and	r1, r1, r3
   12828:	str	r1, [sp, #68]	; 0x44
   1282c:	str	r7, [fp, #-64]	; 0xffffffc0
   12830:	subs	r1, r7, #2
   12834:	movwne	r1, #1
   12838:	eor	r4, r3, #1
   1283c:	str	r4, [fp, #-88]	; 0xffffffa8
   12840:	orr	r4, r1, r4
   12844:	str	r4, [sp, #72]	; 0x48
   12848:	and	r1, r1, r2
   1284c:	and	r0, r0, r1
   12850:	str	r0, [fp, #-60]	; 0xffffffc4
   12854:	str	r3, [fp, #-76]	; 0xffffffb4
   12858:	orr	r0, r1, r3
   1285c:	eor	r0, r0, #1
   12860:	ldr	r1, [fp, #16]
   12864:	clz	r1, r1
   12868:	lsr	r1, r1, #5
   1286c:	orr	r0, r1, r0
   12870:	str	r0, [fp, #-68]	; 0xffffffbc
   12874:	str	r2, [sp, #92]	; 0x5c
   12878:	eor	r0, r2, #1
   1287c:	str	r0, [sp, #60]	; 0x3c
   12880:	mov	r7, #0
   12884:	cmn	lr, #1
   12888:	beq	12898 <__assert_fail@plt+0x1754>
   1288c:	cmp	r7, lr
   12890:	bne	128a4 <__assert_fail@plt+0x1760>
   12894:	b	133b0 <__assert_fail@plt+0x226c>
   12898:	ldrb	r0, [ip, r7]
   1289c:	cmp	r0, #0
   128a0:	beq	133b0 <__assert_fail@plt+0x226c>
   128a4:	mov	r9, #0
   128a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   128ac:	cmp	r0, #0
   128b0:	beq	128e4 <__assert_fail@plt+0x17a0>
   128b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128b8:	add	r4, r7, r0
   128bc:	cmp	r0, #2
   128c0:	bcc	128dc <__assert_fail@plt+0x1798>
   128c4:	cmn	lr, #1
   128c8:	bne	128dc <__assert_fail@plt+0x1798>
   128cc:	mov	r0, ip
   128d0:	bl	11030 <strlen@plt>
   128d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128d8:	mov	lr, r0
   128dc:	cmp	r4, lr
   128e0:	bls	128f0 <__assert_fail@plt+0x17ac>
   128e4:	mov	r0, #0
   128e8:	str	r0, [fp, #-52]	; 0xffffffcc
   128ec:	b	12934 <__assert_fail@plt+0x17f0>
   128f0:	mov	r4, lr
   128f4:	add	r0, ip, r7
   128f8:	ldr	r1, [fp, #-84]	; 0xffffffac
   128fc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12900:	bl	11024 <bcmp@plt>
   12904:	cmp	r0, #0
   12908:	mov	r1, r0
   1290c:	movwne	r1, #1
   12910:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12914:	orr	r1, r1, r2
   12918:	tst	r1, #1
   1291c:	beq	13484 <__assert_fail@plt+0x2340>
   12920:	clz	r0, r0
   12924:	lsr	r0, r0, #5
   12928:	str	r0, [fp, #-52]	; 0xffffffcc
   1292c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12930:	mov	lr, r4
   12934:	ldrb	r4, [ip, r7]
   12938:	cmp	r4, #126	; 0x7e
   1293c:	bhi	12e6c <__assert_fail@plt+0x1d28>
   12940:	mov	r6, #1
   12944:	mov	r2, #110	; 0x6e
   12948:	mov	r0, #97	; 0x61
   1294c:	add	r3, pc, #4
   12950:	mov	r1, #0
   12954:	ldr	pc, [r3, r4, lsl #2]
   12958:	andeq	r2, r1, ip, asr #25
   1295c:	andeq	r2, r1, ip, ror #28
   12960:	andeq	r2, r1, ip, ror #28
   12964:	andeq	r2, r1, ip, ror #28
   12968:	andeq	r2, r1, ip, ror #28
   1296c:	andeq	r2, r1, ip, ror #28
   12970:	andeq	r2, r1, ip, ror #28
   12974:	andeq	r2, r1, r0, asr #30
   12978:	andeq	r2, r1, ip, lsr #25
   1297c:	andeq	r2, r1, r4, lsr #25
   12980:			; <UNDEFINED> instruction: 0x00012cb8
   12984:	ldrdeq	r2, [r1], -r4
   12988:	muleq	r1, ip, ip
   1298c:			; <UNDEFINED> instruction: 0x00012cb4
   12990:	andeq	r2, r1, ip, ror #28
   12994:	andeq	r2, r1, ip, ror #28
   12998:	andeq	r2, r1, ip, ror #28
   1299c:	andeq	r2, r1, ip, ror #28
   129a0:	andeq	r2, r1, ip, ror #28
   129a4:	andeq	r2, r1, ip, ror #28
   129a8:	andeq	r2, r1, ip, ror #28
   129ac:	andeq	r2, r1, ip, ror #28
   129b0:	andeq	r2, r1, ip, ror #28
   129b4:	andeq	r2, r1, ip, ror #28
   129b8:	andeq	r2, r1, ip, ror #28
   129bc:	andeq	r2, r1, ip, ror #28
   129c0:	andeq	r2, r1, ip, ror #28
   129c4:	andeq	r2, r1, ip, ror #28
   129c8:	andeq	r2, r1, ip, ror #28
   129cc:	andeq	r2, r1, ip, ror #28
   129d0:	andeq	r2, r1, ip, ror #28
   129d4:	andeq	r2, r1, ip, ror #28
   129d8:	andeq	r2, r1, r0, asr ip
   129dc:	andeq	r2, r1, r4, asr ip
   129e0:	andeq	r2, r1, r4, asr ip
   129e4:	andeq	r2, r1, ip, lsr ip
   129e8:	andeq	r2, r1, r4, asr ip
   129ec:	andeq	r2, r1, r4, asr fp
   129f0:	andeq	r2, r1, r4, asr ip
   129f4:	ldrdeq	r2, [r1], -ip
   129f8:	andeq	r2, r1, r4, asr ip
   129fc:	andeq	r2, r1, r4, asr ip
   12a00:	andeq	r2, r1, r4, asr ip
   12a04:	andeq	r2, r1, r4, asr fp
   12a08:	andeq	r2, r1, r4, asr fp
   12a0c:	andeq	r2, r1, r4, asr fp
   12a10:	andeq	r2, r1, r4, asr fp
   12a14:	andeq	r2, r1, r4, asr fp
   12a18:	andeq	r2, r1, r4, asr fp
   12a1c:	andeq	r2, r1, r4, asr fp
   12a20:	andeq	r2, r1, r4, asr fp
   12a24:	andeq	r2, r1, r4, asr fp
   12a28:	andeq	r2, r1, r4, asr fp
   12a2c:	andeq	r2, r1, r4, asr fp
   12a30:	andeq	r2, r1, r4, asr fp
   12a34:	andeq	r2, r1, r4, asr fp
   12a38:	andeq	r2, r1, r4, asr fp
   12a3c:	andeq	r2, r1, r4, asr fp
   12a40:	andeq	r2, r1, r4, asr fp
   12a44:	andeq	r2, r1, r4, asr ip
   12a48:	andeq	r2, r1, r4, asr ip
   12a4c:	andeq	r2, r1, r4, asr ip
   12a50:	andeq	r2, r1, r4, asr ip
   12a54:	andeq	r2, r1, r4, lsr #27
   12a58:	andeq	r2, r1, ip, ror #28
   12a5c:	andeq	r2, r1, r4, asr fp
   12a60:	andeq	r2, r1, r4, asr fp
   12a64:	andeq	r2, r1, r4, asr fp
   12a68:	andeq	r2, r1, r4, asr fp
   12a6c:	andeq	r2, r1, r4, asr fp
   12a70:	andeq	r2, r1, r4, asr fp
   12a74:	andeq	r2, r1, r4, asr fp
   12a78:	andeq	r2, r1, r4, asr fp
   12a7c:	andeq	r2, r1, r4, asr fp
   12a80:	andeq	r2, r1, r4, asr fp
   12a84:	andeq	r2, r1, r4, asr fp
   12a88:	andeq	r2, r1, r4, asr fp
   12a8c:	andeq	r2, r1, r4, asr fp
   12a90:	andeq	r2, r1, r4, asr fp
   12a94:	andeq	r2, r1, r4, asr fp
   12a98:	andeq	r2, r1, r4, asr fp
   12a9c:	andeq	r2, r1, r4, asr fp
   12aa0:	andeq	r2, r1, r4, asr fp
   12aa4:	andeq	r2, r1, r4, asr fp
   12aa8:	andeq	r2, r1, r4, asr fp
   12aac:	andeq	r2, r1, r4, asr fp
   12ab0:	andeq	r2, r1, r4, asr fp
   12ab4:	andeq	r2, r1, r4, asr fp
   12ab8:	andeq	r2, r1, r4, asr fp
   12abc:	andeq	r2, r1, r4, asr fp
   12ac0:	andeq	r2, r1, r4, asr fp
   12ac4:	andeq	r2, r1, r4, asr ip
   12ac8:	andeq	r2, r1, ip, ror ip
   12acc:	andeq	r2, r1, r4, asr fp
   12ad0:	andeq	r2, r1, r4, asr ip
   12ad4:	andeq	r2, r1, r4, asr fp
   12ad8:	andeq	r2, r1, r4, asr ip
   12adc:	andeq	r2, r1, r4, asr fp
   12ae0:	andeq	r2, r1, r4, asr fp
   12ae4:	andeq	r2, r1, r4, asr fp
   12ae8:	andeq	r2, r1, r4, asr fp
   12aec:	andeq	r2, r1, r4, asr fp
   12af0:	andeq	r2, r1, r4, asr fp
   12af4:	andeq	r2, r1, r4, asr fp
   12af8:	andeq	r2, r1, r4, asr fp
   12afc:	andeq	r2, r1, r4, asr fp
   12b00:	andeq	r2, r1, r4, asr fp
   12b04:	andeq	r2, r1, r4, asr fp
   12b08:	andeq	r2, r1, r4, asr fp
   12b0c:	andeq	r2, r1, r4, asr fp
   12b10:	andeq	r2, r1, r4, asr fp
   12b14:	andeq	r2, r1, r4, asr fp
   12b18:	andeq	r2, r1, r4, asr fp
   12b1c:	andeq	r2, r1, r4, asr fp
   12b20:	andeq	r2, r1, r4, asr fp
   12b24:	andeq	r2, r1, r4, asr fp
   12b28:	andeq	r2, r1, r4, asr fp
   12b2c:	andeq	r2, r1, r4, asr fp
   12b30:	andeq	r2, r1, r4, asr fp
   12b34:	andeq	r2, r1, r4, asr fp
   12b38:	andeq	r2, r1, r4, asr fp
   12b3c:	andeq	r2, r1, r4, asr fp
   12b40:	andeq	r2, r1, r4, asr fp
   12b44:	andeq	r2, r1, r0, lsl ip
   12b48:	andeq	r2, r1, r4, asr ip
   12b4c:	andeq	r2, r1, r0, lsl ip
   12b50:	andeq	r2, r1, ip, lsr ip
   12b54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b58:	tst	r0, #1
   12b5c:	bne	12b88 <__assert_fail@plt+0x1a44>
   12b60:	ubfx	r0, r4, #5, #3
   12b64:	ldr	r1, [fp, #16]
   12b68:	ldr	r0, [r1, r0, lsl #2]
   12b6c:	and	r1, r4, #31
   12b70:	mov	r2, #1
   12b74:	tst	r0, r2, lsl r1
   12b78:	beq	12b88 <__assert_fail@plt+0x1a44>
   12b7c:	mov	r0, r4
   12b80:	mov	r1, r6
   12b84:	b	12b9c <__assert_fail@plt+0x1a58>
   12b88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12b8c:	cmp	r0, #0
   12b90:	mov	r0, r4
   12b94:	mov	r1, r6
   12b98:	beq	12ed4 <__assert_fail@plt+0x1d90>
   12b9c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ba0:	tst	r2, #1
   12ba4:	bne	13498 <__assert_fail@plt+0x2354>
   12ba8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12bac:	subs	r2, r2, #2
   12bb0:	movwne	r2, #1
   12bb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bb8:	orr	r2, r2, r3
   12bbc:	tst	r2, #1
   12bc0:	bne	12bfc <__assert_fail@plt+0x1ab8>
   12bc4:	cmp	r8, sl
   12bc8:	movcc	r2, #39	; 0x27
   12bcc:	strbcc	r2, [r5, r8]
   12bd0:	add	r2, r8, #1
   12bd4:	cmp	r2, sl
   12bd8:	movcc	r3, #36	; 0x24
   12bdc:	strbcc	r3, [r5, r2]
   12be0:	add	r2, r8, #2
   12be4:	cmp	r2, sl
   12be8:	movcc	r3, #39	; 0x27
   12bec:	strbcc	r3, [r5, r2]
   12bf0:	add	r8, r8, #3
   12bf4:	mov	r2, #1
   12bf8:	str	r2, [fp, #-56]	; 0xffffffc8
   12bfc:	cmp	r8, sl
   12c00:	movcc	r2, #92	; 0x5c
   12c04:	strbcc	r2, [r5, r8]
   12c08:	add	r8, r8, #1
   12c0c:	b	12f18 <__assert_fail@plt+0x1dd4>
   12c10:	cmp	lr, #1
   12c14:	beq	12c3c <__assert_fail@plt+0x1af8>
   12c18:	mov	r6, #0
   12c1c:	cmn	lr, #1
   12c20:	bne	12c48 <__assert_fail@plt+0x1b04>
   12c24:	ldrb	r0, [ip, #1]
   12c28:	cmp	r0, #0
   12c2c:	beq	12c3c <__assert_fail@plt+0x1af8>
   12c30:	mvn	lr, #0
   12c34:	mov	r9, #0
   12c38:	b	12b54 <__assert_fail@plt+0x1a10>
   12c3c:	mov	r6, #0
   12c40:	cmp	r7, #0
   12c44:	beq	12c50 <__assert_fail@plt+0x1b0c>
   12c48:	mov	r9, #0
   12c4c:	b	12b54 <__assert_fail@plt+0x1a10>
   12c50:	mov	r1, #1
   12c54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c58:	cmp	r0, #2
   12c5c:	bne	12c74 <__assert_fail@plt+0x1b30>
   12c60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c64:	tst	r0, #1
   12c68:	mov	r6, r1
   12c6c:	beq	12b54 <__assert_fail@plt+0x1a10>
   12c70:	b	13498 <__assert_fail@plt+0x2354>
   12c74:	mov	r6, r1
   12c78:	b	12b54 <__assert_fail@plt+0x1a10>
   12c7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c80:	cmp	r0, #2
   12c84:	bne	12eb8 <__assert_fail@plt+0x1d74>
   12c88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c8c:	tst	r0, #1
   12c90:	bne	13498 <__assert_fail@plt+0x2354>
   12c94:	mov	r9, #0
   12c98:	b	12ecc <__assert_fail@plt+0x1d88>
   12c9c:	mov	r0, #102	; 0x66
   12ca0:	b	12f40 <__assert_fail@plt+0x1dfc>
   12ca4:	mov	r2, #116	; 0x74
   12ca8:	b	12cb8 <__assert_fail@plt+0x1b74>
   12cac:	mov	r0, #98	; 0x62
   12cb0:	b	12f40 <__assert_fail@plt+0x1dfc>
   12cb4:	mov	r2, #114	; 0x72
   12cb8:	ldr	r0, [sp, #72]	; 0x48
   12cbc:	tst	r0, #1
   12cc0:	mov	r0, r2
   12cc4:	bne	12f40 <__assert_fail@plt+0x1dfc>
   12cc8:	b	13498 <__assert_fail@plt+0x2354>
   12ccc:	ldr	r0, [sp, #92]	; 0x5c
   12cd0:	tst	r0, #1
   12cd4:	beq	12f5c <__assert_fail@plt+0x1e18>
   12cd8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cdc:	tst	r0, #1
   12ce0:	bne	13498 <__assert_fail@plt+0x2354>
   12ce4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ce8:	subs	r0, r0, #2
   12cec:	movwne	r0, #1
   12cf0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12cf4:	orr	r0, r0, r1
   12cf8:	tst	r0, #1
   12cfc:	bne	12d38 <__assert_fail@plt+0x1bf4>
   12d00:	cmp	r8, sl
   12d04:	movcc	r0, #39	; 0x27
   12d08:	strbcc	r0, [r5, r8]
   12d0c:	add	r0, r8, #1
   12d10:	cmp	r0, sl
   12d14:	movcc	r1, #36	; 0x24
   12d18:	strbcc	r1, [r5, r0]
   12d1c:	add	r0, r8, #2
   12d20:	cmp	r0, sl
   12d24:	movcc	r1, #39	; 0x27
   12d28:	strbcc	r1, [r5, r0]
   12d2c:	add	r8, r8, #3
   12d30:	mov	r0, #1
   12d34:	str	r0, [fp, #-56]	; 0xffffffc8
   12d38:	cmp	r8, sl
   12d3c:	movcc	r0, #92	; 0x5c
   12d40:	strbcc	r0, [r5, r8]
   12d44:	add	r0, r8, #1
   12d48:	mov	r6, #0
   12d4c:	mov	r9, #1
   12d50:	mov	r4, #48	; 0x30
   12d54:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12d58:	cmp	r1, #2
   12d5c:	beq	13120 <__assert_fail@plt+0x1fdc>
   12d60:	add	r1, r7, #1
   12d64:	cmp	r1, lr
   12d68:	bcs	13120 <__assert_fail@plt+0x1fdc>
   12d6c:	ldrb	r1, [ip, r1]
   12d70:	sub	r1, r1, #48	; 0x30
   12d74:	uxtb	r1, r1
   12d78:	cmp	r1, #9
   12d7c:	bhi	13120 <__assert_fail@plt+0x1fdc>
   12d80:	cmp	r0, sl
   12d84:	movcc	r1, #48	; 0x30
   12d88:	strbcc	r1, [r5, r0]
   12d8c:	add	r0, r8, #2
   12d90:	cmp	r0, sl
   12d94:	movcc	r1, #48	; 0x30
   12d98:	strbcc	r1, [r5, r0]
   12d9c:	add	r8, r8, #3
   12da0:	b	12b54 <__assert_fail@plt+0x1a10>
   12da4:	mov	r9, #0
   12da8:	mov	r4, #63	; 0x3f
   12dac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12db0:	cmp	r0, #5
   12db4:	beq	13128 <__assert_fail@plt+0x1fe4>
   12db8:	cmp	r0, #2
   12dbc:	bne	131d0 <__assert_fail@plt+0x208c>
   12dc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12dc4:	tst	r0, #1
   12dc8:	mov	r6, #0
   12dcc:	beq	12b54 <__assert_fail@plt+0x1a10>
   12dd0:	b	13498 <__assert_fail@plt+0x2354>
   12dd4:	mov	r0, #118	; 0x76
   12dd8:	b	12f40 <__assert_fail@plt+0x1dfc>
   12ddc:	mov	r4, #39	; 0x27
   12de0:	mov	r0, #1
   12de4:	str	r0, [sp, #64]	; 0x40
   12de8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12dec:	cmp	r0, #2
   12df0:	bne	12f78 <__assert_fail@plt+0x1e34>
   12df4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12df8:	tst	r0, #1
   12dfc:	bne	13498 <__assert_fail@plt+0x2354>
   12e00:	ldr	r2, [sp, #84]	; 0x54
   12e04:	cmp	r2, #0
   12e08:	mov	r0, r2
   12e0c:	movwne	r0, #1
   12e10:	clz	r1, sl
   12e14:	lsr	r1, r1, #5
   12e18:	orrs	r0, r0, r1
   12e1c:	moveq	r2, sl
   12e20:	str	r2, [sp, #84]	; 0x54
   12e24:	moveq	sl, r0
   12e28:	cmp	r8, sl
   12e2c:	movcc	r0, #39	; 0x27
   12e30:	strbcc	r0, [r5, r8]
   12e34:	add	r0, r8, #1
   12e38:	cmp	r0, sl
   12e3c:	movcc	r1, #92	; 0x5c
   12e40:	strbcc	r1, [r5, r0]
   12e44:	add	r0, r8, #2
   12e48:	cmp	r0, sl
   12e4c:	movcc	r1, #39	; 0x27
   12e50:	strbcc	r1, [r5, r0]
   12e54:	add	r8, r8, #3
   12e58:	mov	r0, #0
   12e5c:	str	r0, [fp, #-56]	; 0xffffffc8
   12e60:	mov	r9, #0
   12e64:	mov	r6, #1
   12e68:	b	12b54 <__assert_fail@plt+0x1a10>
   12e6c:	ldr	r0, [sp, #44]	; 0x2c
   12e70:	cmp	r0, #1
   12e74:	bne	12f80 <__assert_fail@plt+0x1e3c>
   12e78:	str	lr, [sp, #32]
   12e7c:	bl	1100c <__ctype_b_loc@plt>
   12e80:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e84:	ldr	r0, [r0]
   12e88:	add	r0, r0, r4, lsl #1
   12e8c:	ldrb	r0, [r0, #1]
   12e90:	ubfx	r6, r0, #6, #1
   12e94:	mov	r2, #1
   12e98:	ldr	r0, [sp, #60]	; 0x3c
   12e9c:	orr	r1, r6, r0
   12ea0:	cmp	r2, #1
   12ea4:	bhi	131d8 <__assert_fail@plt+0x2094>
   12ea8:	tst	r1, #1
   12eac:	beq	131d8 <__assert_fail@plt+0x2094>
   12eb0:	ldr	lr, [sp, #32]
   12eb4:	b	12b54 <__assert_fail@plt+0x1a10>
   12eb8:	mov	r9, #0
   12ebc:	mov	r0, #92	; 0x5c
   12ec0:	ldr	r1, [sp, #56]	; 0x38
   12ec4:	cmp	r1, #0
   12ec8:	beq	12f40 <__assert_fail@plt+0x1dfc>
   12ecc:	mov	r4, #92	; 0x5c
   12ed0:	mov	r6, #0
   12ed4:	cmp	r9, #0
   12ed8:	bne	12f10 <__assert_fail@plt+0x1dcc>
   12edc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ee0:	tst	r0, #1
   12ee4:	beq	12f10 <__assert_fail@plt+0x1dcc>
   12ee8:	cmp	r8, sl
   12eec:	movcc	r0, #39	; 0x27
   12ef0:	strbcc	r0, [r5, r8]
   12ef4:	add	r0, r8, #1
   12ef8:	cmp	r0, sl
   12efc:	movcc	r1, #39	; 0x27
   12f00:	strbcc	r1, [r5, r0]
   12f04:	add	r8, r8, #2
   12f08:	mov	r0, #0
   12f0c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f10:	mov	r1, r6
   12f14:	mov	r0, r4
   12f18:	cmp	r8, sl
   12f1c:	strbcc	r0, [r5, r8]
   12f20:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f24:	and	r0, r0, r1
   12f28:	str	r0, [fp, #-48]	; 0xffffffd0
   12f2c:	add	r8, r8, #1
   12f30:	add	r7, r7, #1
   12f34:	cmn	lr, #1
   12f38:	bne	1288c <__assert_fail@plt+0x1748>
   12f3c:	b	12898 <__assert_fail@plt+0x1754>
   12f40:	mov	r9, #0
   12f44:	ldr	r1, [sp, #92]	; 0x5c
   12f48:	tst	r1, #1
   12f4c:	mov	r6, #0
   12f50:	mov	r1, #0
   12f54:	beq	12b54 <__assert_fail@plt+0x1a10>
   12f58:	b	12b9c <__assert_fail@plt+0x1a58>
   12f5c:	mov	r4, #0
   12f60:	ldr	r0, [sp, #40]	; 0x28
   12f64:	cmp	r0, #0
   12f68:	mov	r9, #0
   12f6c:	mov	r6, #0
   12f70:	beq	12b54 <__assert_fail@plt+0x1a10>
   12f74:	b	12f30 <__assert_fail@plt+0x1dec>
   12f78:	mov	r6, #1
   12f7c:	b	12b54 <__assert_fail@plt+0x1a10>
   12f80:	mov	r0, #0
   12f84:	str	r0, [fp, #-36]	; 0xffffffdc
   12f88:	str	r0, [fp, #-40]	; 0xffffffd8
   12f8c:	cmn	lr, #1
   12f90:	bne	12fa4 <__assert_fail@plt+0x1e60>
   12f94:	mov	r0, ip
   12f98:	bl	11030 <strlen@plt>
   12f9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12fa0:	mov	lr, r0
   12fa4:	ldr	r0, [sp, #76]	; 0x4c
   12fa8:	add	r0, r0, r7
   12fac:	str	r0, [sp, #24]
   12fb0:	mov	r6, #1
   12fb4:	mov	r2, #0
   12fb8:	sub	r0, fp, #40	; 0x28
   12fbc:	mov	r3, r0
   12fc0:	str	r5, [sp, #28]
   12fc4:	str	lr, [sp, #32]
   12fc8:	b	1300c <__assert_fail@plt+0x1ec8>
   12fcc:	ldr	r5, [sp, #52]	; 0x34
   12fd0:	add	r5, r0, r5
   12fd4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12fd8:	bl	10f4c <iswprint@plt>
   12fdc:	cmp	r0, #0
   12fe0:	movwne	r0, #1
   12fe4:	and	r6, r6, r0
   12fe8:	sub	r0, fp, #40	; 0x28
   12fec:	bl	10f1c <mbsinit@plt>
   12ff0:	sub	r3, fp, #40	; 0x28
   12ff4:	mov	r2, r5
   12ff8:	ldr	lr, [sp, #32]
   12ffc:	cmp	r0, #0
   13000:	ldr	r5, [sp, #28]
   13004:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13008:	bne	12e98 <__assert_fail@plt+0x1d54>
   1300c:	str	r2, [sp, #52]	; 0x34
   13010:	add	r0, r2, r7
   13014:	add	r1, ip, r0
   13018:	str	r0, [sp, #48]	; 0x30
   1301c:	sub	r2, lr, r0
   13020:	sub	r0, fp, #44	; 0x2c
   13024:	bl	153a8 <__assert_fail@plt+0x4264>
   13028:	cmp	r0, #0
   1302c:	beq	133a4 <__assert_fail@plt+0x2260>
   13030:	cmn	r0, #1
   13034:	beq	13360 <__assert_fail@plt+0x221c>
   13038:	cmn	r0, #2
   1303c:	ldr	lr, [sp, #32]
   13040:	beq	13368 <__assert_fail@plt+0x2224>
   13044:	cmp	r0, #2
   13048:	mov	r1, #0
   1304c:	movwcc	r1, #1
   13050:	ldr	r2, [sp, #68]	; 0x44
   13054:	eor	r2, r2, #1
   13058:	orrs	r1, r2, r1
   1305c:	bne	12fcc <__assert_fail@plt+0x1e88>
   13060:	ldr	r1, [sp, #52]	; 0x34
   13064:	ldr	r2, [sp, #24]
   13068:	add	r1, r2, r1
   1306c:	sub	r2, r0, #1
   13070:	b	13080 <__assert_fail@plt+0x1f3c>
   13074:	add	r1, r1, #1
   13078:	subs	r2, r2, #1
   1307c:	beq	12fcc <__assert_fail@plt+0x1e88>
   13080:	ldrb	r3, [r1]
   13084:	sub	r3, r3, #91	; 0x5b
   13088:	cmp	r3, #33	; 0x21
   1308c:	bhi	13074 <__assert_fail@plt+0x1f30>
   13090:	add	r5, pc, #0
   13094:	ldr	pc, [r5, r3, lsl #2]
   13098:	muleq	r1, r0, r4
   1309c:	muleq	r1, r0, r4
   130a0:	andeq	r3, r1, r4, ror r0
   130a4:	muleq	r1, r0, r4
   130a8:	andeq	r3, r1, r4, ror r0
   130ac:	muleq	r1, r0, r4
   130b0:	andeq	r3, r1, r4, ror r0
   130b4:	andeq	r3, r1, r4, ror r0
   130b8:	andeq	r3, r1, r4, ror r0
   130bc:	andeq	r3, r1, r4, ror r0
   130c0:	andeq	r3, r1, r4, ror r0
   130c4:	andeq	r3, r1, r4, ror r0
   130c8:	andeq	r3, r1, r4, ror r0
   130cc:	andeq	r3, r1, r4, ror r0
   130d0:	andeq	r3, r1, r4, ror r0
   130d4:	andeq	r3, r1, r4, ror r0
   130d8:	andeq	r3, r1, r4, ror r0
   130dc:	andeq	r3, r1, r4, ror r0
   130e0:	andeq	r3, r1, r4, ror r0
   130e4:	andeq	r3, r1, r4, ror r0
   130e8:	andeq	r3, r1, r4, ror r0
   130ec:	andeq	r3, r1, r4, ror r0
   130f0:	andeq	r3, r1, r4, ror r0
   130f4:	andeq	r3, r1, r4, ror r0
   130f8:	andeq	r3, r1, r4, ror r0
   130fc:	andeq	r3, r1, r4, ror r0
   13100:	andeq	r3, r1, r4, ror r0
   13104:	andeq	r3, r1, r4, ror r0
   13108:	andeq	r3, r1, r4, ror r0
   1310c:	andeq	r3, r1, r4, ror r0
   13110:	andeq	r3, r1, r4, ror r0
   13114:	andeq	r3, r1, r4, ror r0
   13118:	andeq	r3, r1, r4, ror r0
   1311c:	muleq	r1, r0, r4
   13120:	mov	r8, r0
   13124:	b	12b54 <__assert_fail@plt+0x1a10>
   13128:	ldr	r0, [sp, #36]	; 0x24
   1312c:	cmp	r0, #0
   13130:	beq	131d0 <__assert_fail@plt+0x208c>
   13134:	add	r0, r7, #2
   13138:	cmp	r0, lr
   1313c:	bcs	131d0 <__assert_fail@plt+0x208c>
   13140:	add	r1, r7, ip
   13144:	ldrb	r1, [r1, #1]
   13148:	cmp	r1, #63	; 0x3f
   1314c:	bne	131d0 <__assert_fail@plt+0x208c>
   13150:	ldrb	r1, [ip, r0]
   13154:	sub	r2, r1, #33	; 0x21
   13158:	cmp	r2, #29
   1315c:	bhi	131d0 <__assert_fail@plt+0x208c>
   13160:	mov	r3, #1
   13164:	movw	r6, #20929	; 0x51c1
   13168:	movt	r6, #14336	; 0x3800
   1316c:	tst	r6, r3, lsl r2
   13170:	beq	131d0 <__assert_fail@plt+0x208c>
   13174:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13178:	tst	r2, #1
   1317c:	bne	13498 <__assert_fail@plt+0x2354>
   13180:	cmp	r8, sl
   13184:	movcc	r2, #63	; 0x3f
   13188:	strbcc	r2, [r5, r8]
   1318c:	add	r2, r8, #1
   13190:	cmp	r2, sl
   13194:	movcc	r3, #34	; 0x22
   13198:	strbcc	r3, [r5, r2]
   1319c:	add	r2, r8, #2
   131a0:	cmp	r2, sl
   131a4:	movcc	r3, #34	; 0x22
   131a8:	strbcc	r3, [r5, r2]
   131ac:	add	r2, r8, #3
   131b0:	cmp	r2, sl
   131b4:	movcc	r3, #63	; 0x3f
   131b8:	strbcc	r3, [r5, r2]
   131bc:	add	r8, r8, #4
   131c0:	mov	r7, r0
   131c4:	mov	r4, r1
   131c8:	mov	r6, #0
   131cc:	b	12b54 <__assert_fail@plt+0x1a10>
   131d0:	mov	r6, #0
   131d4:	b	12b54 <__assert_fail@plt+0x1a10>
   131d8:	add	r0, r2, r7
   131dc:	str	r0, [sp, #52]	; 0x34
   131e0:	mov	r2, #0
   131e4:	ldr	lr, [sp, #32]
   131e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131ec:	str	r1, [sp, #48]	; 0x30
   131f0:	tst	r1, #1
   131f4:	bne	132d0 <__assert_fail@plt+0x218c>
   131f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   131fc:	tst	r1, #1
   13200:	bne	13498 <__assert_fail@plt+0x2354>
   13204:	mov	r3, r0
   13208:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1320c:	subs	r1, r0, #2
   13210:	movwne	r1, #1
   13214:	orr	r1, r1, r3
   13218:	tst	r1, #1
   1321c:	bne	13254 <__assert_fail@plt+0x2110>
   13220:	cmp	r8, sl
   13224:	movcc	r0, #39	; 0x27
   13228:	strbcc	r0, [r5, r8]
   1322c:	add	r2, r8, #1
   13230:	cmp	r2, sl
   13234:	movcc	r0, #36	; 0x24
   13238:	strbcc	r0, [r5, r2]
   1323c:	add	r2, r8, #2
   13240:	cmp	r2, sl
   13244:	movcc	r0, #39	; 0x27
   13248:	strbcc	r0, [r5, r2]
   1324c:	add	r8, r8, #3
   13250:	mov	r3, #1
   13254:	cmp	r8, sl
   13258:	movcc	r1, #92	; 0x5c
   1325c:	strbcc	r1, [r5, r8]
   13260:	add	r2, r8, #1
   13264:	cmp	r2, sl
   13268:	bcs	1327c <__assert_fail@plt+0x2138>
   1326c:	uxtb	r1, r4
   13270:	mov	r0, #48	; 0x30
   13274:	orr	r1, r0, r1, lsr #6
   13278:	strb	r1, [r5, r2]
   1327c:	add	r2, r8, #2
   13280:	cmp	r2, sl
   13284:	lsrcc	r1, r4, #3
   13288:	movcc	r0, #6
   1328c:	bficc	r1, r0, #3, #29
   13290:	strbcc	r1, [r5, r2]
   13294:	mov	r0, #6
   13298:	bfi	r4, r0, #3, #29
   1329c:	add	r8, r8, #3
   132a0:	mov	r2, #1
   132a4:	mov	r0, r3
   132a8:	b	132f4 <__assert_fail@plt+0x21b0>
   132ac:	cmp	r8, sl
   132b0:	strbcc	r4, [r5, r8]
   132b4:	ldr	r1, [sp, #76]	; 0x4c
   132b8:	ldrb	r4, [r1, r7]
   132bc:	add	r8, r8, #1
   132c0:	mov	r7, r3
   132c4:	ldr	r1, [sp, #48]	; 0x30
   132c8:	tst	r1, #1
   132cc:	beq	131f8 <__assert_fail@plt+0x20b4>
   132d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   132d4:	tst	r1, #1
   132d8:	beq	132ec <__assert_fail@plt+0x21a8>
   132dc:	cmp	r8, sl
   132e0:	movcc	r1, #92	; 0x5c
   132e4:	strbcc	r1, [r5, r8]
   132e8:	add	r8, r8, #1
   132ec:	mov	r1, #0
   132f0:	str	r1, [fp, #-52]	; 0xffffffcc
   132f4:	and	r9, r2, #1
   132f8:	add	r3, r7, #1
   132fc:	ldr	r1, [sp, #52]	; 0x34
   13300:	cmp	r1, r3
   13304:	bls	13348 <__assert_fail@plt+0x2204>
   13308:	cmp	r9, #0
   1330c:	movwne	r9, #1
   13310:	mvn	r1, r0
   13314:	orr	r1, r1, r9
   13318:	tst	r1, #1
   1331c:	bne	132ac <__assert_fail@plt+0x2168>
   13320:	cmp	r8, sl
   13324:	movcc	r1, #39	; 0x27
   13328:	strbcc	r1, [r5, r8]
   1332c:	add	r1, r8, #1
   13330:	cmp	r1, sl
   13334:	movcc	r0, #39	; 0x27
   13338:	strbcc	r0, [r5, r1]
   1333c:	add	r8, r8, #2
   13340:	mov	r0, #0
   13344:	b	132ac <__assert_fail@plt+0x2168>
   13348:	str	r0, [fp, #-56]	; 0xffffffc8
   1334c:	cmp	r9, #0
   13350:	movwne	r9, #1
   13354:	cmp	r9, #0
   13358:	beq	12edc <__assert_fail@plt+0x1d98>
   1335c:	b	12f10 <__assert_fail@plt+0x1dcc>
   13360:	mov	r6, #0
   13364:	b	133a4 <__assert_fail@plt+0x2260>
   13368:	mov	r6, #0
   1336c:	ldr	r0, [sp, #48]	; 0x30
   13370:	cmp	r0, lr
   13374:	bcs	133a4 <__assert_fail@plt+0x2260>
   13378:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1337c:	add	r0, ip, r7
   13380:	ldr	r2, [sp, #52]	; 0x34
   13384:	ldrb	r1, [r0, r2]
   13388:	cmp	r1, #0
   1338c:	beq	12e98 <__assert_fail@plt+0x1d54>
   13390:	add	r2, r2, #1
   13394:	add	r1, r7, r2
   13398:	cmp	r1, lr
   1339c:	bcc	13384 <__assert_fail@plt+0x2240>
   133a0:	b	12e98 <__assert_fail@plt+0x1d54>
   133a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   133a8:	ldr	r2, [sp, #52]	; 0x34
   133ac:	b	12e98 <__assert_fail@plt+0x1d54>
   133b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   133b4:	eor	r0, r1, #2
   133b8:	orr	r0, r0, r8
   133bc:	clz	r0, r0
   133c0:	lsr	r0, r0, #5
   133c4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   133c8:	tst	r3, r0
   133cc:	bne	13498 <__assert_fail@plt+0x2354>
   133d0:	mov	r6, r5
   133d4:	subs	r0, r1, #2
   133d8:	movwne	r0, #1
   133dc:	orr	r0, r3, r0
   133e0:	tst	r0, #1
   133e4:	ldr	r2, [sp, #92]	; 0x5c
   133e8:	ldreq	r0, [sp, #64]	; 0x40
   133ec:	eoreq	r0, r0, #1
   133f0:	tsteq	r0, #1
   133f4:	bne	13434 <__assert_fail@plt+0x22f0>
   133f8:	mov	r9, lr
   133fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13400:	tst	r0, #1
   13404:	bne	13500 <__assert_fail@plt+0x23bc>
   13408:	ldr	r0, [sp, #84]	; 0x54
   1340c:	cmp	r0, #0
   13410:	beq	13434 <__assert_fail@plt+0x22f0>
   13414:	mov	r0, #0
   13418:	str	r0, [fp, #-48]	; 0xffffffd0
   1341c:	mov	r1, #2
   13420:	cmp	sl, #0
   13424:	mov	r0, r2
   13428:	mov	r4, r3
   1342c:	ldr	r7, [sp, #84]	; 0x54
   13430:	beq	1260c <__assert_fail@plt+0x14c8>
   13434:	ldr	r1, [fp, #-84]	; 0xffffffac
   13438:	clz	r0, r1
   1343c:	lsr	r0, r0, #5
   13440:	orr	r0, r0, r3
   13444:	tst	r0, #1
   13448:	bne	13474 <__assert_fail@plt+0x2330>
   1344c:	ldrb	r0, [r1]
   13450:	cmp	r0, #0
   13454:	beq	13474 <__assert_fail@plt+0x2330>
   13458:	add	r1, r1, #1
   1345c:	cmp	r8, sl
   13460:	strbcc	r0, [r6, r8]
   13464:	add	r8, r8, #1
   13468:	ldrb	r0, [r1], #1
   1346c:	cmp	r0, #0
   13470:	bne	1345c <__assert_fail@plt+0x2318>
   13474:	cmp	r8, sl
   13478:	movcc	r0, #0
   1347c:	strbcc	r0, [r6, r8]
   13480:	b	134f4 <__assert_fail@plt+0x23b0>
   13484:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13488:	mov	lr, r4
   1348c:	b	13498 <__assert_fail@plt+0x2354>
   13490:	ldr	r5, [sp, #28]
   13494:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13498:	mov	r0, #0
   1349c:	ldr	r1, [fp, #12]
   134a0:	bic	r1, r1, #2
   134a4:	mov	r2, #2
   134a8:	ldr	r3, [sp, #92]	; 0x5c
   134ac:	tst	r3, #1
   134b0:	movwne	r2, #4
   134b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   134b8:	cmp	r3, #2
   134bc:	movne	r2, r3
   134c0:	str	r2, [sp]
   134c4:	str	r1, [sp, #4]
   134c8:	str	r0, [sp, #8]
   134cc:	ldr	r0, [sp, #80]	; 0x50
   134d0:	str	r0, [sp, #12]
   134d4:	ldr	r0, [sp, #88]	; 0x58
   134d8:	str	r0, [sp, #16]
   134dc:	mov	r0, r5
   134e0:	mov	r1, sl
   134e4:	mov	r2, ip
   134e8:	mov	r3, lr
   134ec:	bl	12580 <__assert_fail@plt+0x143c>
   134f0:	mov	r8, r0
   134f4:	mov	r0, r8
   134f8:	sub	sp, fp, #28
   134fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13500:	mov	r0, #5
   13504:	str	r0, [sp]
   13508:	ldr	r0, [fp, #12]
   1350c:	str	r0, [sp, #4]
   13510:	ldr	r0, [fp, #16]
   13514:	str	r0, [sp, #8]
   13518:	ldr	r0, [sp, #80]	; 0x50
   1351c:	str	r0, [sp, #12]
   13520:	ldr	r0, [sp, #88]	; 0x58
   13524:	str	r0, [sp, #16]
   13528:	mov	r0, r6
   1352c:	ldr	r1, [sp, #84]	; 0x54
   13530:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13534:	mov	r3, r9
   13538:	b	134ec <__assert_fail@plt+0x23a8>
   1353c:	bl	1112c <abort@plt>
   13540:	mov	r3, r2
   13544:	mov	r2, #0
   13548:	b	1354c <__assert_fail@plt+0x2408>
   1354c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13550:	add	fp, sp, #28
   13554:	sub	sp, sp, #36	; 0x24
   13558:	mov	r4, r2
   1355c:	str	r2, [sp, #24]
   13560:	mov	r5, r1
   13564:	mov	r6, r0
   13568:	str	r0, [sp, #20]
   1356c:	movw	r8, #29080	; 0x7198
   13570:	movt	r8, #2
   13574:	cmp	r3, #0
   13578:	movne	r8, r3
   1357c:	bl	11048 <__errno_location@plt>
   13580:	str	r0, [sp, #28]
   13584:	ldm	r8, {r3, r9}
   13588:	ldr	r1, [r8, #40]	; 0x28
   1358c:	ldr	r2, [r8, #44]	; 0x2c
   13590:	ldr	r7, [r0]
   13594:	str	r7, [sp, #32]
   13598:	add	sl, r8, #8
   1359c:	cmp	r4, #0
   135a0:	orreq	r9, r9, #1
   135a4:	stm	sp, {r3, r9, sl}
   135a8:	str	r1, [sp, #12]
   135ac:	str	r2, [sp, #16]
   135b0:	mov	r0, #0
   135b4:	mov	r1, #0
   135b8:	mov	r2, r6
   135bc:	mov	r3, r5
   135c0:	mov	r7, r5
   135c4:	bl	12580 <__assert_fail@plt+0x143c>
   135c8:	mov	r5, r0
   135cc:	add	r4, r0, #1
   135d0:	mov	r0, r4
   135d4:	bl	14454 <__assert_fail@plt+0x3310>
   135d8:	mov	r6, r0
   135dc:	ldr	r0, [r8]
   135e0:	ldr	r1, [r8, #40]	; 0x28
   135e4:	ldr	r2, [r8, #44]	; 0x2c
   135e8:	stm	sp, {r0, r9, sl}
   135ec:	str	r1, [sp, #12]
   135f0:	str	r2, [sp, #16]
   135f4:	mov	r0, r6
   135f8:	mov	r1, r4
   135fc:	ldr	r2, [sp, #20]
   13600:	mov	r3, r7
   13604:	bl	12580 <__assert_fail@plt+0x143c>
   13608:	ldr	r0, [sp, #24]
   1360c:	ldr	r1, [sp, #32]
   13610:	ldr	r2, [sp, #28]
   13614:	str	r1, [r2]
   13618:	cmp	r0, #0
   1361c:	strne	r5, [r0]
   13620:	mov	r0, r6
   13624:	sub	sp, fp, #28
   13628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1362c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13630:	add	fp, sp, #24
   13634:	movw	r8, #28928	; 0x7100
   13638:	movt	r8, #2
   1363c:	ldr	r4, [r8]
   13640:	movw	r5, #28932	; 0x7104
   13644:	movt	r5, #2
   13648:	ldr	r0, [r5]
   1364c:	cmp	r0, #2
   13650:	blt	1367c <__assert_fail@plt+0x2538>
   13654:	add	r7, r4, #12
   13658:	mov	r6, #0
   1365c:	ldr	r0, [r7, r6, lsl #3]
   13660:	bl	1231c <__assert_fail@plt+0x11d8>
   13664:	add	r0, r6, #1
   13668:	ldr	r1, [r5]
   1366c:	add	r2, r6, #2
   13670:	cmp	r2, r1
   13674:	mov	r6, r0
   13678:	blt	1365c <__assert_fail@plt+0x2518>
   1367c:	ldr	r0, [r4, #4]
   13680:	movw	r9, #29128	; 0x71c8
   13684:	movt	r9, #2
   13688:	cmp	r0, r9
   1368c:	movw	r7, #28936	; 0x7108
   13690:	movt	r7, #2
   13694:	beq	136a4 <__assert_fail@plt+0x2560>
   13698:	bl	1231c <__assert_fail@plt+0x11d8>
   1369c:	mov	r0, #256	; 0x100
   136a0:	stm	r7, {r0, r9}
   136a4:	cmp	r4, r7
   136a8:	beq	136b8 <__assert_fail@plt+0x2574>
   136ac:	mov	r0, r4
   136b0:	bl	1231c <__assert_fail@plt+0x11d8>
   136b4:	str	r7, [r8]
   136b8:	mov	r0, #1
   136bc:	str	r0, [r5]
   136c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   136c4:	movw	r3, #29080	; 0x7198
   136c8:	movt	r3, #2
   136cc:	mvn	r2, #0
   136d0:	b	136d4 <__assert_fail@plt+0x2590>
   136d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d8:	add	fp, sp, #28
   136dc:	sub	sp, sp, #44	; 0x2c
   136e0:	mov	r7, r3
   136e4:	str	r2, [sp, #36]	; 0x24
   136e8:	str	r1, [sp, #32]
   136ec:	mov	r5, r0
   136f0:	bl	11048 <__errno_location@plt>
   136f4:	cmp	r5, #0
   136f8:	bmi	13868 <__assert_fail@plt+0x2724>
   136fc:	cmn	r5, #-2147483647	; 0x80000001
   13700:	beq	13868 <__assert_fail@plt+0x2724>
   13704:	movw	r4, #28928	; 0x7100
   13708:	movt	r4, #2
   1370c:	ldr	r6, [r4]
   13710:	str	r0, [sp, #28]
   13714:	ldr	r0, [r0]
   13718:	str	r0, [sp, #24]
   1371c:	movw	r8, #28932	; 0x7104
   13720:	movt	r8, #2
   13724:	ldr	r1, [r8]
   13728:	cmp	r1, r5
   1372c:	ble	13738 <__assert_fail@plt+0x25f4>
   13730:	mov	sl, r6
   13734:	b	137a4 <__assert_fail@plt+0x2660>
   13738:	str	r1, [fp, #-32]	; 0xffffffe0
   1373c:	mov	r0, #8
   13740:	str	r0, [sp]
   13744:	movw	r9, #28936	; 0x7108
   13748:	movt	r9, #2
   1374c:	subs	r0, r6, r9
   13750:	movne	r0, r6
   13754:	sub	r1, r5, r1
   13758:	add	r2, r1, #1
   1375c:	sub	r1, fp, #32
   13760:	mvn	r3, #-2147483648	; 0x80000000
   13764:	bl	14530 <__assert_fail@plt+0x33ec>
   13768:	mov	sl, r0
   1376c:	str	r0, [r4]
   13770:	cmp	r6, r9
   13774:	bne	13780 <__assert_fail@plt+0x263c>
   13778:	ldrd	r0, [r9]
   1377c:	stm	sl, {r0, r1}
   13780:	ldr	r1, [r8]
   13784:	add	r0, sl, r1, lsl #3
   13788:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1378c:	sub	r1, r2, r1
   13790:	lsl	r2, r1, #3
   13794:	mov	r1, #0
   13798:	bl	11060 <memset@plt>
   1379c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   137a0:	str	r0, [r8]
   137a4:	mov	r9, sl
   137a8:	ldr	r6, [r9, r5, lsl #3]!
   137ac:	ldr	r4, [r9, #4]!
   137b0:	ldm	r7, {r0, r1}
   137b4:	ldr	r2, [r7, #40]	; 0x28
   137b8:	ldr	r3, [r7, #44]	; 0x2c
   137bc:	orr	r8, r1, #1
   137c0:	add	r1, r7, #8
   137c4:	stm	sp, {r0, r8}
   137c8:	str	r1, [sp, #20]
   137cc:	add	r0, sp, #8
   137d0:	stm	r0, {r1, r2, r3}
   137d4:	mov	r0, r4
   137d8:	mov	r1, r6
   137dc:	ldr	r2, [sp, #32]
   137e0:	ldr	r3, [sp, #36]	; 0x24
   137e4:	bl	12580 <__assert_fail@plt+0x143c>
   137e8:	cmp	r6, r0
   137ec:	bhi	13850 <__assert_fail@plt+0x270c>
   137f0:	add	r6, r0, #1
   137f4:	str	r6, [sl, r5, lsl #3]
   137f8:	movw	r0, #29128	; 0x71c8
   137fc:	movt	r0, #2
   13800:	cmp	r4, r0
   13804:	beq	13810 <__assert_fail@plt+0x26cc>
   13808:	mov	r0, r4
   1380c:	bl	1231c <__assert_fail@plt+0x11d8>
   13810:	mov	r0, r6
   13814:	bl	14454 <__assert_fail@plt+0x3310>
   13818:	mov	r4, r0
   1381c:	str	r0, [r9]
   13820:	ldr	r0, [r7]
   13824:	ldr	r1, [r7, #40]	; 0x28
   13828:	ldr	r2, [r7, #44]	; 0x2c
   1382c:	stm	sp, {r0, r8}
   13830:	ldr	r0, [sp, #20]
   13834:	add	r3, sp, #8
   13838:	stm	r3, {r0, r1, r2}
   1383c:	mov	r0, r4
   13840:	mov	r1, r6
   13844:	ldr	r2, [sp, #32]
   13848:	ldr	r3, [sp, #36]	; 0x24
   1384c:	bl	12580 <__assert_fail@plt+0x143c>
   13850:	ldr	r0, [sp, #28]
   13854:	ldr	r1, [sp, #24]
   13858:	str	r1, [r0]
   1385c:	mov	r0, r4
   13860:	sub	sp, fp, #28
   13864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13868:	bl	1112c <abort@plt>
   1386c:	movw	r3, #29080	; 0x7198
   13870:	movt	r3, #2
   13874:	b	136d4 <__assert_fail@plt+0x2590>
   13878:	mov	r1, r0
   1387c:	mov	r0, #0
   13880:	b	136c4 <__assert_fail@plt+0x2580>
   13884:	mov	r2, r1
   13888:	mov	r1, r0
   1388c:	mov	r0, #0
   13890:	b	1386c <__assert_fail@plt+0x2728>
   13894:	push	{r4, r5, r6, sl, fp, lr}
   13898:	add	fp, sp, #16
   1389c:	sub	sp, sp, #48	; 0x30
   138a0:	mov	r4, r2
   138a4:	mov	r5, r0
   138a8:	mov	r6, sp
   138ac:	mov	r0, r6
   138b0:	bl	138d0 <__assert_fail@plt+0x278c>
   138b4:	mov	r0, r5
   138b8:	mov	r1, r4
   138bc:	mvn	r2, #0
   138c0:	mov	r3, r6
   138c4:	bl	136d4 <__assert_fail@plt+0x2590>
   138c8:	sub	sp, fp, #16
   138cc:	pop	{r4, r5, r6, sl, fp, pc}
   138d0:	push	{fp, lr}
   138d4:	mov	fp, sp
   138d8:	vmov.i32	q8, #0	; 0x00000000
   138dc:	mov	r2, #32
   138e0:	mov	r3, r0
   138e4:	vst1.32	{d16-d17}, [r3], r2
   138e8:	vst1.32	{d16-d17}, [r3]
   138ec:	add	r2, r0, #16
   138f0:	vst1.32	{d16-d17}, [r2]
   138f4:	cmp	r1, #10
   138f8:	strne	r1, [r0]
   138fc:	popne	{fp, pc}
   13900:	bl	1112c <abort@plt>
   13904:	push	{r4, r5, r6, r7, fp, lr}
   13908:	add	fp, sp, #16
   1390c:	sub	sp, sp, #48	; 0x30
   13910:	mov	r4, r3
   13914:	mov	r5, r2
   13918:	mov	r6, r0
   1391c:	mov	r7, sp
   13920:	mov	r0, r7
   13924:	bl	138d0 <__assert_fail@plt+0x278c>
   13928:	mov	r0, r6
   1392c:	mov	r1, r5
   13930:	mov	r2, r4
   13934:	mov	r3, r7
   13938:	bl	136d4 <__assert_fail@plt+0x2590>
   1393c:	sub	sp, fp, #16
   13940:	pop	{r4, r5, r6, r7, fp, pc}
   13944:	mov	r2, r1
   13948:	mov	r1, r0
   1394c:	mov	r0, #0
   13950:	b	13894 <__assert_fail@plt+0x2750>
   13954:	mov	r3, r2
   13958:	mov	r2, r1
   1395c:	mov	r1, r0
   13960:	mov	r0, #0
   13964:	b	13904 <__assert_fail@plt+0x27c0>
   13968:	push	{r4, r5, r6, sl, fp, lr}
   1396c:	add	fp, sp, #16
   13970:	sub	sp, sp, #48	; 0x30
   13974:	mov	r4, r1
   13978:	mov	r5, r0
   1397c:	movw	r0, #29080	; 0x7198
   13980:	movt	r0, #2
   13984:	add	r1, r0, #16
   13988:	mov	r3, #32
   1398c:	vld1.64	{d16-d17}, [r0], r3
   13990:	vld1.64	{d18-d19}, [r1]
   13994:	mov	r6, sp
   13998:	add	r1, r6, #16
   1399c:	vld1.64	{d20-d21}, [r0]
   139a0:	vst1.64	{d18-d19}, [r1]
   139a4:	mov	r0, r6
   139a8:	vst1.64	{d16-d17}, [r0], r3
   139ac:	vst1.64	{d20-d21}, [r0]
   139b0:	mov	r0, r6
   139b4:	mov	r1, r2
   139b8:	mov	r2, #1
   139bc:	bl	12474 <__assert_fail@plt+0x1330>
   139c0:	mov	r0, #0
   139c4:	mov	r1, r5
   139c8:	mov	r2, r4
   139cc:	mov	r3, r6
   139d0:	bl	136d4 <__assert_fail@plt+0x2590>
   139d4:	sub	sp, fp, #16
   139d8:	pop	{r4, r5, r6, sl, fp, pc}
   139dc:	mov	r2, r1
   139e0:	mvn	r1, #0
   139e4:	b	13968 <__assert_fail@plt+0x2824>
   139e8:	mov	r1, #58	; 0x3a
   139ec:	b	139dc <__assert_fail@plt+0x2898>
   139f0:	mov	r2, #58	; 0x3a
   139f4:	b	13968 <__assert_fail@plt+0x2824>
   139f8:	push	{r4, r5, r6, sl, fp, lr}
   139fc:	add	fp, sp, #16
   13a00:	sub	sp, sp, #48	; 0x30
   13a04:	mov	r4, r2
   13a08:	mov	r5, r0
   13a0c:	mov	r6, sp
   13a10:	mov	r0, r6
   13a14:	bl	138d0 <__assert_fail@plt+0x278c>
   13a18:	mov	r0, r6
   13a1c:	mov	r1, #58	; 0x3a
   13a20:	mov	r2, #1
   13a24:	bl	12474 <__assert_fail@plt+0x1330>
   13a28:	mov	r0, r5
   13a2c:	mov	r1, r4
   13a30:	mvn	r2, #0
   13a34:	mov	r3, r6
   13a38:	bl	136d4 <__assert_fail@plt+0x2590>
   13a3c:	sub	sp, fp, #16
   13a40:	pop	{r4, r5, r6, sl, fp, pc}
   13a44:	push	{fp, lr}
   13a48:	mov	fp, sp
   13a4c:	sub	sp, sp, #8
   13a50:	mvn	ip, #0
   13a54:	str	ip, [sp]
   13a58:	bl	13a64 <__assert_fail@plt+0x2920>
   13a5c:	mov	sp, fp
   13a60:	pop	{fp, pc}
   13a64:	push	{r4, r5, r6, r7, fp, lr}
   13a68:	add	fp, sp, #16
   13a6c:	sub	sp, sp, #48	; 0x30
   13a70:	mov	r7, r3
   13a74:	mov	r5, r0
   13a78:	movw	r0, #29080	; 0x7198
   13a7c:	movt	r0, #2
   13a80:	add	r3, r0, #16
   13a84:	mov	r4, #32
   13a88:	vld1.64	{d16-d17}, [r0], r4
   13a8c:	vld1.64	{d18-d19}, [r3]
   13a90:	mov	r6, sp
   13a94:	add	r3, r6, #16
   13a98:	vld1.64	{d20-d21}, [r0]
   13a9c:	vst1.64	{d18-d19}, [r3]
   13aa0:	mov	r0, r6
   13aa4:	vst1.64	{d16-d17}, [r0], r4
   13aa8:	vst1.64	{d20-d21}, [r0]
   13aac:	mov	r0, r6
   13ab0:	bl	124cc <__assert_fail@plt+0x1388>
   13ab4:	ldr	r2, [fp, #8]
   13ab8:	mov	r0, r5
   13abc:	mov	r1, r7
   13ac0:	mov	r3, r6
   13ac4:	bl	136d4 <__assert_fail@plt+0x2590>
   13ac8:	sub	sp, fp, #16
   13acc:	pop	{r4, r5, r6, r7, fp, pc}
   13ad0:	mov	r3, r2
   13ad4:	mov	r2, r1
   13ad8:	mov	r1, r0
   13adc:	mov	r0, #0
   13ae0:	b	13a44 <__assert_fail@plt+0x2900>
   13ae4:	push	{fp, lr}
   13ae8:	mov	fp, sp
   13aec:	sub	sp, sp, #8
   13af0:	mov	ip, r2
   13af4:	mov	r2, r1
   13af8:	mov	r1, r0
   13afc:	str	r3, [sp]
   13b00:	mov	r0, #0
   13b04:	mov	r3, ip
   13b08:	bl	13a64 <__assert_fail@plt+0x2920>
   13b0c:	mov	sp, fp
   13b10:	pop	{fp, pc}
   13b14:	movw	r3, #28944	; 0x7110
   13b18:	movt	r3, #2
   13b1c:	b	136d4 <__assert_fail@plt+0x2590>
   13b20:	mov	r2, r1
   13b24:	mov	r1, r0
   13b28:	mov	r0, #0
   13b2c:	b	13b14 <__assert_fail@plt+0x29d0>
   13b30:	mvn	r2, #0
   13b34:	b	13b14 <__assert_fail@plt+0x29d0>
   13b38:	mov	r1, r0
   13b3c:	mov	r0, #0
   13b40:	b	13b30 <__assert_fail@plt+0x29ec>
   13b44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b48:	add	fp, sp, #24
   13b4c:	sub	sp, sp, #16
   13b50:	mov	r4, r1
   13b54:	mov	r5, r0
   13b58:	mov	r7, #0
   13b5c:	mov	r0, #0
   13b60:	mov	r1, r5
   13b64:	mov	r2, #5
   13b68:	bl	10f28 <dcgettext@plt>
   13b6c:	cmp	r0, r5
   13b70:	beq	13b7c <__assert_fail@plt+0x2a38>
   13b74:	sub	sp, fp, #24
   13b78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b7c:	bl	15370 <__assert_fail@plt+0x422c>
   13b80:	mov	r6, r0
   13b84:	mov	r8, #56	; 0x38
   13b88:	mov	r0, #45	; 0x2d
   13b8c:	stm	sp, {r0, r8}
   13b90:	str	r7, [sp, #8]
   13b94:	str	r7, [sp, #12]
   13b98:	mov	r0, r6
   13b9c:	mov	r1, #85	; 0x55
   13ba0:	mov	r2, #84	; 0x54
   13ba4:	mov	r3, #70	; 0x46
   13ba8:	bl	13c40 <__assert_fail@plt+0x2afc>
   13bac:	cmp	r0, #0
   13bb0:	beq	13bcc <__assert_fail@plt+0x2a88>
   13bb4:	ldrb	r1, [r5]
   13bb8:	movw	r2, #24808	; 0x60e8
   13bbc:	movt	r2, #1
   13bc0:	movw	r0, #24812	; 0x60ec
   13bc4:	movt	r0, #1
   13bc8:	b	13c10 <__assert_fail@plt+0x2acc>
   13bcc:	mov	r0, #48	; 0x30
   13bd0:	mov	r1, #51	; 0x33
   13bd4:	str	r8, [sp]
   13bd8:	stmib	sp, {r0, r1}
   13bdc:	str	r0, [sp, #12]
   13be0:	mov	r0, r6
   13be4:	mov	r1, #71	; 0x47
   13be8:	mov	r2, #66	; 0x42
   13bec:	mov	r3, #49	; 0x31
   13bf0:	bl	13c40 <__assert_fail@plt+0x2afc>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c20 <__assert_fail@plt+0x2adc>
   13bfc:	ldrb	r1, [r5]
   13c00:	movw	r2, #24816	; 0x60f0
   13c04:	movt	r2, #1
   13c08:	movw	r0, #24820	; 0x60f4
   13c0c:	movt	r0, #1
   13c10:	cmp	r1, #96	; 0x60
   13c14:	moveq	r0, r2
   13c18:	sub	sp, fp, #24
   13c1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c20:	movw	r1, #24802	; 0x60e2
   13c24:	movt	r1, #1
   13c28:	movw	r0, #24806	; 0x60e6
   13c2c:	movt	r0, #1
   13c30:	cmp	r4, #9
   13c34:	moveq	r0, r1
   13c38:	sub	sp, fp, #24
   13c3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c40:	push	{r4, r5, r6, r7, fp, lr}
   13c44:	add	fp, sp, #16
   13c48:	sub	sp, sp, #16
   13c4c:	mov	r4, r3
   13c50:	mov	r5, r2
   13c54:	mov	r7, r1
   13c58:	mov	r6, r0
   13c5c:	mov	r0, r1
   13c60:	bl	11fec <__assert_fail@plt+0xea8>
   13c64:	ldrb	r1, [r6]
   13c68:	cmp	r0, #0
   13c6c:	andne	r1, r1, #223	; 0xdf
   13c70:	mov	r0, #0
   13c74:	cmp	r1, r7
   13c78:	bne	13cb0 <__assert_fail@plt+0x2b6c>
   13c7c:	cmp	r7, #0
   13c80:	beq	13cb8 <__assert_fail@plt+0x2b74>
   13c84:	ldr	r0, [fp, #20]
   13c88:	ldr	r1, [fp, #16]
   13c8c:	ldr	r2, [fp, #12]
   13c90:	ldr	r3, [fp, #8]
   13c94:	str	r2, [sp]
   13c98:	str	r1, [sp, #4]
   13c9c:	str	r0, [sp, #8]
   13ca0:	mov	r0, r6
   13ca4:	mov	r1, r5
   13ca8:	mov	r2, r4
   13cac:	bl	13cc4 <__assert_fail@plt+0x2b80>
   13cb0:	sub	sp, fp, #16
   13cb4:	pop	{r4, r5, r6, r7, fp, pc}
   13cb8:	mov	r0, #1
   13cbc:	sub	sp, fp, #16
   13cc0:	pop	{r4, r5, r6, r7, fp, pc}
   13cc4:	push	{r4, r5, r6, r7, fp, lr}
   13cc8:	add	fp, sp, #16
   13ccc:	sub	sp, sp, #8
   13cd0:	mov	r4, r3
   13cd4:	mov	r5, r2
   13cd8:	mov	r7, r1
   13cdc:	mov	r6, r0
   13ce0:	mov	r0, r1
   13ce4:	bl	11fec <__assert_fail@plt+0xea8>
   13ce8:	ldrb	r1, [r6, #1]
   13cec:	cmp	r0, #0
   13cf0:	andne	r1, r1, #223	; 0xdf
   13cf4:	mov	r0, #0
   13cf8:	cmp	r1, r7
   13cfc:	bne	13d2c <__assert_fail@plt+0x2be8>
   13d00:	cmp	r7, #0
   13d04:	beq	13d34 <__assert_fail@plt+0x2bf0>
   13d08:	ldr	r0, [fp, #16]
   13d0c:	ldr	r1, [fp, #12]
   13d10:	ldr	r3, [fp, #8]
   13d14:	str	r1, [sp]
   13d18:	str	r0, [sp, #4]
   13d1c:	mov	r0, r6
   13d20:	mov	r1, r5
   13d24:	mov	r2, r4
   13d28:	bl	13d40 <__assert_fail@plt+0x2bfc>
   13d2c:	sub	sp, fp, #16
   13d30:	pop	{r4, r5, r6, r7, fp, pc}
   13d34:	mov	r0, #1
   13d38:	sub	sp, fp, #16
   13d3c:	pop	{r4, r5, r6, r7, fp, pc}
   13d40:	push	{r4, r5, r6, r7, fp, lr}
   13d44:	add	fp, sp, #16
   13d48:	sub	sp, sp, #8
   13d4c:	mov	r4, r3
   13d50:	mov	r5, r2
   13d54:	mov	r7, r1
   13d58:	mov	r6, r0
   13d5c:	mov	r0, r1
   13d60:	bl	11fec <__assert_fail@plt+0xea8>
   13d64:	ldrb	r1, [r6, #2]
   13d68:	cmp	r0, #0
   13d6c:	andne	r1, r1, #223	; 0xdf
   13d70:	mov	r0, #0
   13d74:	cmp	r1, r7
   13d78:	bne	13da0 <__assert_fail@plt+0x2c5c>
   13d7c:	cmp	r7, #0
   13d80:	beq	13da8 <__assert_fail@plt+0x2c64>
   13d84:	ldr	r0, [fp, #12]
   13d88:	ldr	r3, [fp, #8]
   13d8c:	str	r0, [sp]
   13d90:	mov	r0, r6
   13d94:	mov	r1, r5
   13d98:	mov	r2, r4
   13d9c:	bl	13db4 <__assert_fail@plt+0x2c70>
   13da0:	sub	sp, fp, #16
   13da4:	pop	{r4, r5, r6, r7, fp, pc}
   13da8:	mov	r0, #1
   13dac:	sub	sp, fp, #16
   13db0:	pop	{r4, r5, r6, r7, fp, pc}
   13db4:	push	{r4, r5, r6, r7, fp, lr}
   13db8:	add	fp, sp, #16
   13dbc:	mov	r4, r3
   13dc0:	mov	r5, r2
   13dc4:	mov	r7, r1
   13dc8:	mov	r6, r0
   13dcc:	mov	r0, r1
   13dd0:	bl	11fec <__assert_fail@plt+0xea8>
   13dd4:	ldrb	r1, [r6, #3]
   13dd8:	ldr	r3, [fp, #8]
   13ddc:	cmp	r0, #0
   13de0:	andne	r1, r1, #223	; 0xdf
   13de4:	mov	r0, #0
   13de8:	cmp	r1, r7
   13dec:	bne	13e10 <__assert_fail@plt+0x2ccc>
   13df0:	cmp	r7, #0
   13df4:	beq	13e0c <__assert_fail@plt+0x2cc8>
   13df8:	mov	r0, r6
   13dfc:	mov	r1, r5
   13e00:	mov	r2, r4
   13e04:	pop	{r4, r5, r6, r7, fp, lr}
   13e08:	b	13e14 <__assert_fail@plt+0x2cd0>
   13e0c:	mov	r0, #1
   13e10:	pop	{r4, r5, r6, r7, fp, pc}
   13e14:	push	{r4, r5, r6, r7, fp, lr}
   13e18:	add	fp, sp, #16
   13e1c:	mov	r4, r3
   13e20:	mov	r5, r2
   13e24:	mov	r7, r1
   13e28:	mov	r6, r0
   13e2c:	mov	r0, r1
   13e30:	bl	11fec <__assert_fail@plt+0xea8>
   13e34:	ldrb	r1, [r6, #4]
   13e38:	cmp	r0, #0
   13e3c:	andne	r1, r1, #223	; 0xdf
   13e40:	mov	r0, #0
   13e44:	cmp	r1, r7
   13e48:	bne	13e6c <__assert_fail@plt+0x2d28>
   13e4c:	cmp	r7, #0
   13e50:	beq	13e68 <__assert_fail@plt+0x2d24>
   13e54:	mov	r0, r6
   13e58:	mov	r1, r5
   13e5c:	mov	r2, r4
   13e60:	pop	{r4, r5, r6, r7, fp, lr}
   13e64:	b	13e70 <__assert_fail@plt+0x2d2c>
   13e68:	mov	r0, #1
   13e6c:	pop	{r4, r5, r6, r7, fp, pc}
   13e70:	push	{r4, r5, r6, sl, fp, lr}
   13e74:	add	fp, sp, #16
   13e78:	mov	r4, r2
   13e7c:	mov	r6, r1
   13e80:	mov	r5, r0
   13e84:	mov	r0, r1
   13e88:	bl	11fec <__assert_fail@plt+0xea8>
   13e8c:	ldrb	r1, [r5, #5]
   13e90:	cmp	r0, #0
   13e94:	andne	r1, r1, #223	; 0xdf
   13e98:	mov	r0, #0
   13e9c:	cmp	r1, r6
   13ea0:	bne	13ec0 <__assert_fail@plt+0x2d7c>
   13ea4:	cmp	r6, #0
   13ea8:	beq	13ebc <__assert_fail@plt+0x2d78>
   13eac:	mov	r0, r5
   13eb0:	mov	r1, r4
   13eb4:	pop	{r4, r5, r6, sl, fp, lr}
   13eb8:	b	13ec4 <__assert_fail@plt+0x2d80>
   13ebc:	mov	r0, #1
   13ec0:	pop	{r4, r5, r6, sl, fp, pc}
   13ec4:	push	{r4, r5, fp, lr}
   13ec8:	add	fp, sp, #8
   13ecc:	mov	r5, r1
   13ed0:	mov	r4, r0
   13ed4:	mov	r0, r1
   13ed8:	bl	11fec <__assert_fail@plt+0xea8>
   13edc:	ldrb	r1, [r4, #6]
   13ee0:	cmp	r0, #0
   13ee4:	andne	r1, r1, #223	; 0xdf
   13ee8:	mov	r0, #0
   13eec:	cmp	r1, r5
   13ef0:	popne	{r4, r5, fp, pc}
   13ef4:	cmp	r5, #0
   13ef8:	beq	13f08 <__assert_fail@plt+0x2dc4>
   13efc:	mov	r0, r4
   13f00:	pop	{r4, r5, fp, lr}
   13f04:	b	13f10 <__assert_fail@plt+0x2dcc>
   13f08:	mov	r0, #1
   13f0c:	pop	{r4, r5, fp, pc}
   13f10:	push	{r4, sl, fp, lr}
   13f14:	add	fp, sp, #8
   13f18:	mov	r4, r0
   13f1c:	mov	r0, #0
   13f20:	bl	11fec <__assert_fail@plt+0xea8>
   13f24:	ldrb	r1, [r4, #7]
   13f28:	cmp	r0, #0
   13f2c:	beq	13f40 <__assert_fail@plt+0x2dfc>
   13f30:	tst	r1, #223	; 0xdf
   13f34:	bne	13f48 <__assert_fail@plt+0x2e04>
   13f38:	mov	r0, #1
   13f3c:	pop	{r4, sl, fp, pc}
   13f40:	cmp	r1, #0
   13f44:	beq	13f38 <__assert_fail@plt+0x2df4>
   13f48:	mov	r0, #0
   13f4c:	pop	{r4, sl, fp, pc}
   13f50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f54:	add	fp, sp, #24
   13f58:	sub	sp, sp, #32
   13f5c:	mov	r4, r2
   13f60:	mov	r8, r0
   13f64:	ldr	r6, [fp, #12]
   13f68:	ldr	r7, [fp, #8]
   13f6c:	cmp	r1, #0
   13f70:	beq	13f98 <__assert_fail@plt+0x2e54>
   13f74:	mov	r5, r1
   13f78:	str	r4, [sp]
   13f7c:	str	r3, [sp, #4]
   13f80:	movw	r2, #24908	; 0x614c
   13f84:	movt	r2, #1
   13f88:	mov	r0, r8
   13f8c:	mov	r1, #1
   13f90:	mov	r3, r5
   13f94:	b	13fb0 <__assert_fail@plt+0x2e6c>
   13f98:	str	r3, [sp]
   13f9c:	movw	r2, #24920	; 0x6158
   13fa0:	movt	r2, #1
   13fa4:	mov	r0, r8
   13fa8:	mov	r1, #1
   13fac:	mov	r3, r4
   13fb0:	bl	11090 <__fprintf_chk@plt>
   13fb4:	movw	r1, #24927	; 0x615f
   13fb8:	movt	r1, #1
   13fbc:	mov	r0, #0
   13fc0:	mov	r2, #5
   13fc4:	bl	10f28 <dcgettext@plt>
   13fc8:	mov	r3, r0
   13fcc:	movw	r0, #2022	; 0x7e6
   13fd0:	str	r0, [sp]
   13fd4:	movw	r2, #25645	; 0x642d
   13fd8:	movt	r2, #1
   13fdc:	mov	r0, r8
   13fe0:	mov	r1, #1
   13fe4:	bl	11090 <__fprintf_chk@plt>
   13fe8:	movw	r4, #24251	; 0x5ebb
   13fec:	movt	r4, #1
   13ff0:	mov	r0, r4
   13ff4:	mov	r1, r8
   13ff8:	bl	10ebc <fputs_unlocked@plt>
   13ffc:	movw	r1, #24931	; 0x6163
   14000:	movt	r1, #1
   14004:	mov	r0, #0
   14008:	mov	r2, #5
   1400c:	bl	10f28 <dcgettext@plt>
   14010:	mov	r2, r0
   14014:	movw	r3, #25102	; 0x620e
   14018:	movt	r3, #1
   1401c:	mov	r0, r8
   14020:	mov	r1, #1
   14024:	bl	11090 <__fprintf_chk@plt>
   14028:	mov	r0, r4
   1402c:	mov	r1, r8
   14030:	bl	10ebc <fputs_unlocked@plt>
   14034:	cmp	r6, #9
   14038:	bhi	14074 <__assert_fail@plt+0x2f30>
   1403c:	add	r0, pc, #0
   14040:	ldr	pc, [r0, r6, lsl #2]
   14044:	andeq	r4, r1, ip, rrx
   14048:	andeq	r4, r1, r0, lsl #1
   1404c:	strheq	r4, [r1], -r0
   14050:	ldrdeq	r4, [r1], -r8
   14054:	andeq	r4, r1, r0, lsl #2
   14058:	andeq	r4, r1, r8, lsr #2
   1405c:	andeq	r4, r1, r0, asr r1
   14060:	andeq	r4, r1, r8, lsl #3
   14064:	andeq	r4, r1, r8, lsr #4
   14068:	ldrdeq	r4, [r1], -r0
   1406c:	sub	sp, fp, #24
   14070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14074:	movw	r1, #25455	; 0x636f
   14078:	movt	r1, #1
   1407c:	b	141d8 <__assert_fail@plt+0x3094>
   14080:	movw	r1, #25136	; 0x6230
   14084:	movt	r1, #1
   14088:	mov	r0, #0
   1408c:	mov	r2, #5
   14090:	bl	10f28 <dcgettext@plt>
   14094:	mov	r2, r0
   14098:	ldr	r3, [r7]
   1409c:	mov	r0, r8
   140a0:	mov	r1, #1
   140a4:	sub	sp, fp, #24
   140a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   140ac:	b	11090 <__fprintf_chk@plt>
   140b0:	movw	r1, #25152	; 0x6240
   140b4:	movt	r1, #1
   140b8:	mov	r0, #0
   140bc:	mov	r2, #5
   140c0:	bl	10f28 <dcgettext@plt>
   140c4:	mov	r2, r0
   140c8:	ldr	r3, [r7]
   140cc:	ldr	r0, [r7, #4]
   140d0:	str	r0, [sp]
   140d4:	b	141c4 <__assert_fail@plt+0x3080>
   140d8:	movw	r1, #25175	; 0x6257
   140dc:	movt	r1, #1
   140e0:	mov	r0, #0
   140e4:	mov	r2, #5
   140e8:	bl	10f28 <dcgettext@plt>
   140ec:	mov	r2, r0
   140f0:	ldr	r3, [r7]
   140f4:	ldmib	r7, {r0, r1}
   140f8:	stm	sp, {r0, r1}
   140fc:	b	141c4 <__assert_fail@plt+0x3080>
   14100:	movw	r1, #25203	; 0x6273
   14104:	movt	r1, #1
   14108:	mov	r0, #0
   1410c:	mov	r2, #5
   14110:	bl	10f28 <dcgettext@plt>
   14114:	mov	r2, r0
   14118:	ldr	r3, [r7]
   1411c:	ldmib	r7, {r0, r1, r7}
   14120:	stm	sp, {r0, r1, r7}
   14124:	b	141c4 <__assert_fail@plt+0x3080>
   14128:	movw	r1, #25235	; 0x6293
   1412c:	movt	r1, #1
   14130:	mov	r0, #0
   14134:	mov	r2, #5
   14138:	bl	10f28 <dcgettext@plt>
   1413c:	mov	r2, r0
   14140:	ldr	r3, [r7]
   14144:	ldmib	r7, {r0, r1, r6, r7}
   14148:	stm	sp, {r0, r1, r6, r7}
   1414c:	b	141c4 <__assert_fail@plt+0x3080>
   14150:	movw	r1, #25271	; 0x62b7
   14154:	movt	r1, #1
   14158:	mov	r0, #0
   1415c:	mov	r2, #5
   14160:	bl	10f28 <dcgettext@plt>
   14164:	mov	r2, r0
   14168:	ldr	r3, [r7]
   1416c:	ldmib	r7, {r0, r1, r6}
   14170:	ldr	r5, [r7, #16]
   14174:	ldr	r7, [r7, #20]
   14178:	stm	sp, {r0, r1, r6}
   1417c:	str	r5, [sp, #12]
   14180:	str	r7, [sp, #16]
   14184:	b	141c4 <__assert_fail@plt+0x3080>
   14188:	movw	r1, #25311	; 0x62df
   1418c:	movt	r1, #1
   14190:	mov	r0, #0
   14194:	mov	r2, #5
   14198:	bl	10f28 <dcgettext@plt>
   1419c:	mov	r2, r0
   141a0:	ldr	r3, [r7]
   141a4:	ldmib	r7, {r0, r1, r6}
   141a8:	ldr	r5, [r7, #16]
   141ac:	ldr	r4, [r7, #20]
   141b0:	ldr	r7, [r7, #24]
   141b4:	stm	sp, {r0, r1, r6}
   141b8:	str	r5, [sp, #12]
   141bc:	str	r4, [sp, #16]
   141c0:	str	r7, [sp, #20]
   141c4:	mov	r0, r8
   141c8:	mov	r1, #1
   141cc:	b	14278 <__assert_fail@plt+0x3134>
   141d0:	movw	r1, #25403	; 0x633b
   141d4:	movt	r1, #1
   141d8:	mov	r0, #0
   141dc:	mov	r2, #5
   141e0:	bl	10f28 <dcgettext@plt>
   141e4:	mov	ip, r0
   141e8:	ldr	r3, [r7]
   141ec:	ldr	r0, [r7, #4]
   141f0:	ldr	r1, [r7, #8]
   141f4:	ldr	r6, [r7, #12]
   141f8:	ldr	r5, [r7, #16]
   141fc:	ldr	r4, [r7, #20]
   14200:	ldr	r2, [r7, #24]
   14204:	ldr	lr, [r7, #28]
   14208:	ldr	r7, [r7, #32]
   1420c:	stm	sp, {r0, r1, r6}
   14210:	str	r5, [sp, #12]
   14214:	str	r4, [sp, #16]
   14218:	str	r2, [sp, #20]
   1421c:	str	lr, [sp, #24]
   14220:	str	r7, [sp, #28]
   14224:	b	1426c <__assert_fail@plt+0x3128>
   14228:	movw	r1, #25355	; 0x630b
   1422c:	movt	r1, #1
   14230:	mov	r0, #0
   14234:	mov	r2, #5
   14238:	bl	10f28 <dcgettext@plt>
   1423c:	mov	ip, r0
   14240:	ldr	r3, [r7]
   14244:	ldmib	r7, {r0, r1, r6}
   14248:	ldr	r5, [r7, #16]
   1424c:	ldr	r4, [r7, #20]
   14250:	ldr	r2, [r7, #24]
   14254:	ldr	r7, [r7, #28]
   14258:	stm	sp, {r0, r1, r6}
   1425c:	str	r5, [sp, #12]
   14260:	str	r4, [sp, #16]
   14264:	str	r2, [sp, #20]
   14268:	str	r7, [sp, #24]
   1426c:	mov	r0, r8
   14270:	mov	r1, #1
   14274:	mov	r2, ip
   14278:	bl	11090 <__fprintf_chk@plt>
   1427c:	sub	sp, fp, #24
   14280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14284:	push	{r4, sl, fp, lr}
   14288:	add	fp, sp, #8
   1428c:	sub	sp, sp, #8
   14290:	mov	lr, #0
   14294:	ldr	ip, [fp, #8]
   14298:	ldr	r4, [ip, lr, lsl #2]
   1429c:	add	lr, lr, #1
   142a0:	cmp	r4, #0
   142a4:	bne	14298 <__assert_fail@plt+0x3154>
   142a8:	sub	r4, lr, #1
   142ac:	str	ip, [sp]
   142b0:	str	r4, [sp, #4]
   142b4:	bl	13f50 <__assert_fail@plt+0x2e0c>
   142b8:	sub	sp, fp, #8
   142bc:	pop	{r4, sl, fp, pc}
   142c0:	push	{r4, r5, fp, lr}
   142c4:	add	fp, sp, #8
   142c8:	sub	sp, sp, #48	; 0x30
   142cc:	mov	ip, #0
   142d0:	ldr	r4, [fp, #8]
   142d4:	add	lr, sp, #8
   142d8:	ldr	r5, [r4]
   142dc:	str	r5, [lr, ip, lsl #2]
   142e0:	cmp	r5, #0
   142e4:	beq	142fc <__assert_fail@plt+0x31b8>
   142e8:	add	ip, ip, #1
   142ec:	add	r4, r4, #4
   142f0:	cmp	ip, #10
   142f4:	bne	142d8 <__assert_fail@plt+0x3194>
   142f8:	mov	ip, #10
   142fc:	str	lr, [sp]
   14300:	str	ip, [sp, #4]
   14304:	bl	13f50 <__assert_fail@plt+0x2e0c>
   14308:	sub	sp, fp, #8
   1430c:	pop	{r4, r5, fp, pc}
   14310:	push	{fp, lr}
   14314:	mov	fp, sp
   14318:	sub	sp, sp, #8
   1431c:	add	ip, fp, #8
   14320:	str	ip, [sp, #4]
   14324:	str	ip, [sp]
   14328:	bl	142c0 <__assert_fail@plt+0x317c>
   1432c:	mov	sp, fp
   14330:	pop	{fp, pc}
   14334:	push	{fp, lr}
   14338:	mov	fp, sp
   1433c:	movw	r0, #29012	; 0x7154
   14340:	movt	r0, #2
   14344:	ldr	r1, [r0]
   14348:	movw	r0, #24251	; 0x5ebb
   1434c:	movt	r0, #1
   14350:	bl	10ebc <fputs_unlocked@plt>
   14354:	movw	r1, #25515	; 0x63ab
   14358:	movt	r1, #1
   1435c:	mov	r0, #0
   14360:	mov	r2, #5
   14364:	bl	10f28 <dcgettext@plt>
   14368:	mov	r1, r0
   1436c:	movw	r2, #25535	; 0x63bf
   14370:	movt	r2, #1
   14374:	mov	r0, #1
   14378:	bl	1106c <__printf_chk@plt>
   1437c:	movw	r1, #25557	; 0x63d5
   14380:	movt	r1, #1
   14384:	mov	r0, #0
   14388:	mov	r2, #5
   1438c:	bl	10f28 <dcgettext@plt>
   14390:	mov	r1, r0
   14394:	movw	r2, #23732	; 0x5cb4
   14398:	movt	r2, #1
   1439c:	movw	r3, #24060	; 0x5dfc
   143a0:	movt	r3, #1
   143a4:	mov	r0, #1
   143a8:	bl	1106c <__printf_chk@plt>
   143ac:	movw	r1, #25577	; 0x63e9
   143b0:	movt	r1, #1
   143b4:	mov	r0, #0
   143b8:	mov	r2, #5
   143bc:	bl	10f28 <dcgettext@plt>
   143c0:	mov	r1, r0
   143c4:	movw	r2, #25616	; 0x6410
   143c8:	movt	r2, #1
   143cc:	mov	r0, #1
   143d0:	pop	{fp, lr}
   143d4:	b	1106c <__printf_chk@plt>
   143d8:	b	143dc <__assert_fail@plt+0x3298>
   143dc:	push	{r4, r5, r6, sl, fp, lr}
   143e0:	add	fp, sp, #16
   143e4:	mov	r4, r2
   143e8:	mov	r5, r1
   143ec:	mov	r6, r0
   143f0:	bl	1540c <__assert_fail@plt+0x42c8>
   143f4:	cmp	r0, #0
   143f8:	popne	{r4, r5, r6, sl, fp, pc}
   143fc:	cmp	r6, #0
   14400:	beq	14414 <__assert_fail@plt+0x32d0>
   14404:	cmp	r5, #0
   14408:	cmpne	r4, #0
   1440c:	bne	14414 <__assert_fail@plt+0x32d0>
   14410:	pop	{r4, r5, r6, sl, fp, pc}
   14414:	bl	147a0 <__assert_fail@plt+0x365c>
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	bl	14da8 <__assert_fail@plt+0x3c64>
   14424:	pop	{fp, lr}
   14428:	b	1442c <__assert_fail@plt+0x32e8>
   1442c:	cmp	r0, #0
   14430:	bxne	lr
   14434:	push	{fp, lr}
   14438:	mov	fp, sp
   1443c:	bl	147a0 <__assert_fail@plt+0x365c>
   14440:	push	{fp, lr}
   14444:	mov	fp, sp
   14448:	bl	1533c <__assert_fail@plt+0x41f8>
   1444c:	pop	{fp, lr}
   14450:	b	1442c <__assert_fail@plt+0x32e8>
   14454:	b	14418 <__assert_fail@plt+0x32d4>
   14458:	push	{r4, r5, fp, lr}
   1445c:	add	fp, sp, #8
   14460:	mov	r4, r1
   14464:	mov	r5, r0
   14468:	bl	14dd8 <__assert_fail@plt+0x3c94>
   1446c:	cmp	r0, #0
   14470:	popne	{r4, r5, fp, pc}
   14474:	cmp	r5, #0
   14478:	beq	14488 <__assert_fail@plt+0x3344>
   1447c:	cmp	r4, #0
   14480:	bne	14488 <__assert_fail@plt+0x3344>
   14484:	pop	{r4, r5, fp, pc}
   14488:	bl	147a0 <__assert_fail@plt+0x365c>
   1448c:	push	{fp, lr}
   14490:	mov	fp, sp
   14494:	bl	15340 <__assert_fail@plt+0x41fc>
   14498:	pop	{fp, lr}
   1449c:	b	1442c <__assert_fail@plt+0x32e8>
   144a0:	push	{fp, lr}
   144a4:	mov	fp, sp
   144a8:	bl	15350 <__assert_fail@plt+0x420c>
   144ac:	pop	{fp, lr}
   144b0:	b	1442c <__assert_fail@plt+0x32e8>
   144b4:	mov	r2, r1
   144b8:	mov	r1, r0
   144bc:	mov	r0, #0
   144c0:	b	143dc <__assert_fail@plt+0x3298>
   144c4:	mov	r2, r1
   144c8:	mov	r1, r0
   144cc:	mov	r0, #0
   144d0:	b	144a0 <__assert_fail@plt+0x335c>
   144d4:	mov	r2, #1
   144d8:	b	144dc <__assert_fail@plt+0x3398>
   144dc:	push	{r4, r5, fp, lr}
   144e0:	add	fp, sp, #8
   144e4:	mov	r4, r1
   144e8:	ldr	r5, [r1]
   144ec:	cmp	r0, #0
   144f0:	beq	14508 <__assert_fail@plt+0x33c4>
   144f4:	mov	r1, #1
   144f8:	add	r1, r1, r5, lsr #1
   144fc:	adds	r5, r5, r1
   14500:	bcc	14520 <__assert_fail@plt+0x33dc>
   14504:	bl	147a0 <__assert_fail@plt+0x365c>
   14508:	cmp	r5, #0
   1450c:	bne	14520 <__assert_fail@plt+0x33dc>
   14510:	mov	r1, #64	; 0x40
   14514:	udiv	r5, r1, r2
   14518:	cmp	r2, #64	; 0x40
   1451c:	addhi	r5, r5, #1
   14520:	mov	r1, r5
   14524:	bl	143dc <__assert_fail@plt+0x3298>
   14528:	str	r5, [r4]
   1452c:	pop	{r4, r5, fp, pc}
   14530:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14534:	add	fp, sp, #24
   14538:	mov	r8, r1
   1453c:	ldr	r6, [r1]
   14540:	add	r1, r6, r6, asr #1
   14544:	cmp	r1, r6
   14548:	mvnvs	r1, #-2147483648	; 0x80000000
   1454c:	cmp	r1, r3
   14550:	mov	r5, r1
   14554:	movgt	r5, r3
   14558:	cmn	r3, #1
   1455c:	movle	r5, r1
   14560:	ldr	r4, [fp, #8]
   14564:	cmn	r4, #1
   14568:	ble	14590 <__assert_fail@plt+0x344c>
   1456c:	cmp	r4, #0
   14570:	beq	145e4 <__assert_fail@plt+0x34a0>
   14574:	cmn	r5, #1
   14578:	ble	145b8 <__assert_fail@plt+0x3474>
   1457c:	mvn	r7, #-2147483648	; 0x80000000
   14580:	udiv	r1, r7, r4
   14584:	cmp	r1, r5
   14588:	bge	145e4 <__assert_fail@plt+0x34a0>
   1458c:	b	145f4 <__assert_fail@plt+0x34b0>
   14590:	cmn	r5, #1
   14594:	ble	145d4 <__assert_fail@plt+0x3490>
   14598:	cmn	r4, #1
   1459c:	beq	145e4 <__assert_fail@plt+0x34a0>
   145a0:	mov	r1, #-2147483648	; 0x80000000
   145a4:	sdiv	r1, r1, r4
   145a8:	mvn	r7, #-2147483648	; 0x80000000
   145ac:	cmp	r1, r5
   145b0:	bge	145e4 <__assert_fail@plt+0x34a0>
   145b4:	b	145f4 <__assert_fail@plt+0x34b0>
   145b8:	beq	145e4 <__assert_fail@plt+0x34a0>
   145bc:	mov	r1, #-2147483648	; 0x80000000
   145c0:	sdiv	r1, r1, r5
   145c4:	mvn	r7, #-2147483648	; 0x80000000
   145c8:	cmp	r1, r4
   145cc:	bge	145e4 <__assert_fail@plt+0x34a0>
   145d0:	b	145f4 <__assert_fail@plt+0x34b0>
   145d4:	mvn	r7, #-2147483648	; 0x80000000
   145d8:	sdiv	r1, r7, r4
   145dc:	cmp	r5, r1
   145e0:	blt	145f4 <__assert_fail@plt+0x34b0>
   145e4:	mul	r1, r5, r4
   145e8:	mov	r7, #64	; 0x40
   145ec:	cmp	r1, #63	; 0x3f
   145f0:	bgt	145fc <__assert_fail@plt+0x34b8>
   145f4:	sdiv	r5, r7, r4
   145f8:	mul	r1, r5, r4
   145fc:	cmp	r0, #0
   14600:	moveq	r7, #0
   14604:	streq	r7, [r8]
   14608:	sub	r7, r5, r6
   1460c:	cmp	r7, r2
   14610:	bge	146bc <__assert_fail@plt+0x3578>
   14614:	add	r5, r6, r2
   14618:	mov	r1, #0
   1461c:	cmp	r5, r3
   14620:	mov	r2, #0
   14624:	movwgt	r2, #1
   14628:	cmn	r3, #1
   1462c:	movwgt	r1, #1
   14630:	cmp	r5, r6
   14634:	bvs	146a4 <__assert_fail@plt+0x3560>
   14638:	ands	r1, r1, r2
   1463c:	bne	146a4 <__assert_fail@plt+0x3560>
   14640:	cmn	r4, #1
   14644:	ble	1466c <__assert_fail@plt+0x3528>
   14648:	cmp	r4, #0
   1464c:	beq	146b8 <__assert_fail@plt+0x3574>
   14650:	cmn	r5, #1
   14654:	ble	14690 <__assert_fail@plt+0x354c>
   14658:	mvn	r1, #-2147483648	; 0x80000000
   1465c:	udiv	r1, r1, r4
   14660:	cmp	r1, r5
   14664:	bge	146b8 <__assert_fail@plt+0x3574>
   14668:	b	146a4 <__assert_fail@plt+0x3560>
   1466c:	cmn	r5, #1
   14670:	ble	146a8 <__assert_fail@plt+0x3564>
   14674:	cmn	r4, #1
   14678:	beq	146b8 <__assert_fail@plt+0x3574>
   1467c:	mov	r1, #-2147483648	; 0x80000000
   14680:	sdiv	r1, r1, r4
   14684:	cmp	r1, r5
   14688:	bge	146b8 <__assert_fail@plt+0x3574>
   1468c:	b	146a4 <__assert_fail@plt+0x3560>
   14690:	beq	146b8 <__assert_fail@plt+0x3574>
   14694:	mov	r1, #-2147483648	; 0x80000000
   14698:	sdiv	r1, r1, r5
   1469c:	cmp	r1, r4
   146a0:	bge	146b8 <__assert_fail@plt+0x3574>
   146a4:	bl	147a0 <__assert_fail@plt+0x365c>
   146a8:	mvn	r1, #-2147483648	; 0x80000000
   146ac:	sdiv	r1, r1, r4
   146b0:	cmp	r5, r1
   146b4:	blt	146a4 <__assert_fail@plt+0x3560>
   146b8:	mul	r1, r5, r4
   146bc:	bl	14458 <__assert_fail@plt+0x3314>
   146c0:	str	r5, [r8]
   146c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146c8:	mov	r1, #1
   146cc:	b	146d0 <__assert_fail@plt+0x358c>
   146d0:	push	{fp, lr}
   146d4:	mov	fp, sp
   146d8:	bl	14d54 <__assert_fail@plt+0x3c10>
   146dc:	pop	{fp, lr}
   146e0:	b	1442c <__assert_fail@plt+0x32e8>
   146e4:	mov	r1, #1
   146e8:	b	146ec <__assert_fail@plt+0x35a8>
   146ec:	push	{fp, lr}
   146f0:	mov	fp, sp
   146f4:	bl	1534c <__assert_fail@plt+0x4208>
   146f8:	pop	{fp, lr}
   146fc:	b	1442c <__assert_fail@plt+0x32e8>
   14700:	push	{r4, r5, fp, lr}
   14704:	add	fp, sp, #8
   14708:	mov	r4, r1
   1470c:	mov	r5, r0
   14710:	mov	r0, r1
   14714:	bl	14418 <__assert_fail@plt+0x32d4>
   14718:	mov	r1, r5
   1471c:	mov	r2, r4
   14720:	pop	{r4, r5, fp, lr}
   14724:	b	10f04 <memcpy@plt>
   14728:	push	{r4, r5, fp, lr}
   1472c:	add	fp, sp, #8
   14730:	mov	r4, r1
   14734:	mov	r5, r0
   14738:	mov	r0, r1
   1473c:	bl	14440 <__assert_fail@plt+0x32fc>
   14740:	mov	r1, r5
   14744:	mov	r2, r4
   14748:	pop	{r4, r5, fp, lr}
   1474c:	b	10f04 <memcpy@plt>
   14750:	push	{r4, r5, fp, lr}
   14754:	add	fp, sp, #8
   14758:	mov	r4, r1
   1475c:	mov	r5, r0
   14760:	add	r0, r1, #1
   14764:	bl	14440 <__assert_fail@plt+0x32fc>
   14768:	mov	r1, #0
   1476c:	strb	r1, [r0, r4]
   14770:	mov	r1, r5
   14774:	mov	r2, r4
   14778:	pop	{r4, r5, fp, lr}
   1477c:	b	10f04 <memcpy@plt>
   14780:	push	{r4, sl, fp, lr}
   14784:	add	fp, sp, #8
   14788:	mov	r4, r0
   1478c:	bl	11030 <strlen@plt>
   14790:	add	r1, r0, #1
   14794:	mov	r0, r4
   14798:	pop	{r4, sl, fp, lr}
   1479c:	b	14700 <__assert_fail@plt+0x35bc>
   147a0:	push	{fp, lr}
   147a4:	mov	fp, sp
   147a8:	movw	r0, #28924	; 0x70fc
   147ac:	movt	r0, #2
   147b0:	ldr	r4, [r0]
   147b4:	movw	r1, #25692	; 0x645c
   147b8:	movt	r1, #1
   147bc:	mov	r0, #0
   147c0:	mov	r2, #5
   147c4:	bl	10f28 <dcgettext@plt>
   147c8:	mov	r3, r0
   147cc:	movw	r2, #24655	; 0x604f
   147d0:	movt	r2, #1
   147d4:	mov	r0, r4
   147d8:	mov	r1, #0
   147dc:	bl	10fac <error@plt>
   147e0:	bl	1112c <abort@plt>
   147e4:	push	{r4, sl, fp, lr}
   147e8:	add	fp, sp, #8
   147ec:	bl	14e2c <__assert_fail@plt+0x3ce8>
   147f0:	mov	r4, r0
   147f4:	cmp	r0, #0
   147f8:	bne	1480c <__assert_fail@plt+0x36c8>
   147fc:	bl	11048 <__errno_location@plt>
   14800:	ldr	r0, [r0]
   14804:	cmp	r0, #12
   14808:	beq	14814 <__assert_fail@plt+0x36d0>
   1480c:	mov	r0, r4
   14810:	pop	{r4, sl, fp, pc}
   14814:	bl	147a0 <__assert_fail@plt+0x365c>
   14818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1481c:	add	fp, sp, #28
   14820:	sub	sp, sp, #20
   14824:	cmp	r2, #37	; 0x25
   14828:	bcs	14c5c <__assert_fail@plt+0x3b18>
   1482c:	mov	r5, r2
   14830:	mov	r6, r1
   14834:	mov	r4, r0
   14838:	str	r3, [sp, #4]
   1483c:	ldr	sl, [fp, #8]
   14840:	bl	11048 <__errno_location@plt>
   14844:	mov	r7, r0
   14848:	mov	r0, #0
   1484c:	str	r0, [r7]
   14850:	bl	1100c <__ctype_b_loc@plt>
   14854:	ldr	r1, [r0]
   14858:	mov	r2, r4
   1485c:	ldrb	r0, [r2], #1
   14860:	add	r3, r1, r0, lsl #1
   14864:	ldrb	r3, [r3, #1]
   14868:	tst	r3, #32
   1486c:	bne	1485c <__assert_fail@plt+0x3718>
   14870:	add	r9, sp, #16
   14874:	cmp	r6, #0
   14878:	movne	r9, r6
   1487c:	mov	r8, #4
   14880:	cmp	r0, #45	; 0x2d
   14884:	beq	14c50 <__assert_fail@plt+0x3b0c>
   14888:	mov	r0, r4
   1488c:	mov	r1, r9
   14890:	mov	r2, r5
   14894:	bl	11084 <strtoumax@plt>
   14898:	str	r1, [sp, #12]
   1489c:	str	r0, [sp, #8]
   148a0:	ldr	r6, [r9]
   148a4:	cmp	r6, r4
   148a8:	beq	148d0 <__assert_fail@plt+0x378c>
   148ac:	ldr	r0, [r7]
   148b0:	cmp	r0, #0
   148b4:	beq	14908 <__assert_fail@plt+0x37c4>
   148b8:	cmp	r0, #34	; 0x22
   148bc:	bne	14c50 <__assert_fail@plt+0x3b0c>
   148c0:	mov	r8, #1
   148c4:	cmp	sl, #0
   148c8:	bne	14914 <__assert_fail@plt+0x37d0>
   148cc:	b	14c40 <__assert_fail@plt+0x3afc>
   148d0:	cmp	sl, #0
   148d4:	beq	14c50 <__assert_fail@plt+0x3b0c>
   148d8:	ldrb	r1, [r6]
   148dc:	cmp	r1, #0
   148e0:	beq	14c50 <__assert_fail@plt+0x3b0c>
   148e4:	mov	r0, sl
   148e8:	bl	1103c <strchr@plt>
   148ec:	cmp	r0, #0
   148f0:	beq	14c50 <__assert_fail@plt+0x3b0c>
   148f4:	mov	r8, #0
   148f8:	str	r8, [sp, #12]
   148fc:	mov	r0, #1
   14900:	str	r0, [sp, #8]
   14904:	b	14914 <__assert_fail@plt+0x37d0>
   14908:	mov	r8, r0
   1490c:	cmp	sl, #0
   14910:	beq	14c40 <__assert_fail@plt+0x3afc>
   14914:	ldrb	r4, [r6]
   14918:	cmp	r4, #0
   1491c:	beq	14c40 <__assert_fail@plt+0x3afc>
   14920:	mov	r0, sl
   14924:	mov	r1, r4
   14928:	bl	1103c <strchr@plt>
   1492c:	cmp	r0, #0
   14930:	beq	14b5c <__assert_fail@plt+0x3a18>
   14934:	sub	r0, r4, #69	; 0x45
   14938:	mov	r7, #1
   1493c:	mov	r5, #1024	; 0x400
   14940:	cmp	r0, #47	; 0x2f
   14944:	bhi	14a58 <__assert_fail@plt+0x3914>
   14948:	add	r1, pc, #0
   1494c:	ldr	pc, [r1, r0, lsl #2]
   14950:	andeq	r4, r1, r0, lsl sl
   14954:	andeq	r4, r1, r8, asr sl
   14958:	andeq	r4, r1, r0, lsl sl
   1495c:	andeq	r4, r1, r8, asr sl
   14960:	andeq	r4, r1, r8, asr sl
   14964:	andeq	r4, r1, r8, asr sl
   14968:	andeq	r4, r1, r0, lsl sl
   1496c:	andeq	r4, r1, r8, asr sl
   14970:	andeq	r4, r1, r0, lsl sl
   14974:	andeq	r4, r1, r8, asr sl
   14978:	andeq	r4, r1, r8, asr sl
   1497c:	andeq	r4, r1, r0, lsl sl
   14980:	andeq	r4, r1, r8, asr sl
   14984:	andeq	r4, r1, r8, asr sl
   14988:	andeq	r4, r1, r8, asr sl
   1498c:	andeq	r4, r1, r0, lsl sl
   14990:	andeq	r4, r1, r8, asr sl
   14994:	andeq	r4, r1, r8, asr sl
   14998:	andeq	r4, r1, r8, asr sl
   1499c:	andeq	r4, r1, r8, asr sl
   149a0:	andeq	r4, r1, r0, lsl sl
   149a4:	andeq	r4, r1, r0, lsl sl
   149a8:	andeq	r4, r1, r8, asr sl
   149ac:	andeq	r4, r1, r8, asr sl
   149b0:	andeq	r4, r1, r8, asr sl
   149b4:	andeq	r4, r1, r8, asr sl
   149b8:	andeq	r4, r1, r8, asr sl
   149bc:	andeq	r4, r1, r8, asr sl
   149c0:	andeq	r4, r1, r8, asr sl
   149c4:	andeq	r4, r1, r8, asr sl
   149c8:	andeq	r4, r1, r8, asr sl
   149cc:	andeq	r4, r1, r8, asr sl
   149d0:	andeq	r4, r1, r8, asr sl
   149d4:	andeq	r4, r1, r8, asr sl
   149d8:	andeq	r4, r1, r0, lsl sl
   149dc:	andeq	r4, r1, r8, asr sl
   149e0:	andeq	r4, r1, r8, asr sl
   149e4:	andeq	r4, r1, r8, asr sl
   149e8:	andeq	r4, r1, r0, lsl sl
   149ec:	andeq	r4, r1, r8, asr sl
   149f0:	andeq	r4, r1, r0, lsl sl
   149f4:	andeq	r4, r1, r8, asr sl
   149f8:	andeq	r4, r1, r8, asr sl
   149fc:	andeq	r4, r1, r8, asr sl
   14a00:	andeq	r4, r1, r8, asr sl
   14a04:	andeq	r4, r1, r8, asr sl
   14a08:	andeq	r4, r1, r8, asr sl
   14a0c:	andeq	r4, r1, r0, lsl sl
   14a10:	mov	r0, sl
   14a14:	mov	r1, #48	; 0x30
   14a18:	bl	1103c <strchr@plt>
   14a1c:	cmp	r0, #0
   14a20:	beq	14a58 <__assert_fail@plt+0x3914>
   14a24:	ldrb	r0, [r6, #1]
   14a28:	cmp	r0, #66	; 0x42
   14a2c:	cmpne	r0, #68	; 0x44
   14a30:	bne	14a40 <__assert_fail@plt+0x38fc>
   14a34:	mov	r7, #2
   14a38:	mov	r5, #1000	; 0x3e8
   14a3c:	b	14a58 <__assert_fail@plt+0x3914>
   14a40:	cmp	r0, #105	; 0x69
   14a44:	bne	14a58 <__assert_fail@plt+0x3914>
   14a48:	ldrb	r0, [r6, #2]
   14a4c:	mov	r7, #1
   14a50:	cmp	r0, #66	; 0x42
   14a54:	movweq	r7, #3
   14a58:	sub	r1, r4, #66	; 0x42
   14a5c:	cmp	r1, #53	; 0x35
   14a60:	bhi	14b5c <__assert_fail@plt+0x3a18>
   14a64:	mov	r0, #0
   14a68:	add	r2, pc, #0
   14a6c:	ldr	pc, [r2, r1, lsl #2]
   14a70:	andeq	r4, r1, r4, asr #23
   14a74:	andeq	r4, r1, ip, asr fp
   14a78:	andeq	r4, r1, ip, asr fp
   14a7c:	ldrdeq	r4, [r1], -r0
   14a80:	andeq	r4, r1, ip, asr fp
   14a84:	andeq	r4, r1, r8, asr #22
   14a88:	andeq	r4, r1, ip, asr fp
   14a8c:	andeq	r4, r1, ip, asr fp
   14a90:	andeq	r4, r1, ip, asr fp
   14a94:	andeq	r4, r1, r4, ror fp
   14a98:	andeq	r4, r1, ip, asr fp
   14a9c:	andeq	r4, r1, r8, lsl #23
   14aa0:	andeq	r4, r1, ip, asr fp
   14aa4:	andeq	r4, r1, ip, asr fp
   14aa8:	andeq	r4, r1, r4, ror #23
   14aac:	andeq	r4, r1, ip, asr fp
   14ab0:	andeq	r4, r1, ip, asr fp
   14ab4:	andeq	r4, r1, ip, asr fp
   14ab8:	muleq	r1, ip, fp
   14abc:	andeq	r4, r1, ip, asr fp
   14ac0:	andeq	r4, r1, ip, asr fp
   14ac4:	andeq	r4, r1, ip, asr fp
   14ac8:	andeq	r4, r1, ip, asr fp
   14acc:	strdeq	r4, [r1], -r8
   14ad0:			; <UNDEFINED> instruction: 0x00014bb0
   14ad4:	andeq	r4, r1, ip, asr fp
   14ad8:	andeq	r4, r1, ip, asr fp
   14adc:	andeq	r4, r1, ip, asr fp
   14ae0:	andeq	r4, r1, ip, asr fp
   14ae4:	andeq	r4, r1, ip, asr fp
   14ae8:	andeq	r4, r1, ip, asr fp
   14aec:	andeq	r4, r1, ip, asr fp
   14af0:	andeq	r4, r1, ip, lsl #24
   14af4:	andeq	r4, r1, r4, lsr #24
   14af8:	andeq	r4, r1, ip, asr fp
   14afc:	andeq	r4, r1, ip, asr fp
   14b00:	andeq	r4, r1, ip, asr fp
   14b04:	andeq	r4, r1, r8, asr #22
   14b08:	andeq	r4, r1, ip, asr fp
   14b0c:	andeq	r4, r1, ip, asr fp
   14b10:	andeq	r4, r1, ip, asr fp
   14b14:	andeq	r4, r1, r4, ror fp
   14b18:	andeq	r4, r1, ip, asr fp
   14b1c:	andeq	r4, r1, r8, lsl #23
   14b20:	andeq	r4, r1, ip, asr fp
   14b24:	andeq	r4, r1, ip, asr fp
   14b28:	andeq	r4, r1, ip, asr fp
   14b2c:	andeq	r4, r1, ip, asr fp
   14b30:	andeq	r4, r1, ip, asr fp
   14b34:	andeq	r4, r1, ip, asr fp
   14b38:	muleq	r1, ip, fp
   14b3c:	andeq	r4, r1, ip, asr fp
   14b40:	andeq	r4, r1, ip, asr fp
   14b44:	andeq	r4, r1, r8, lsl ip
   14b48:	add	r0, sp, #8
   14b4c:	mov	r1, r5
   14b50:	mov	r2, #3
   14b54:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14b58:	b	14c24 <__assert_fail@plt+0x3ae0>
   14b5c:	ldr	r0, [sp, #8]
   14b60:	ldr	r1, [sp, #12]
   14b64:	ldr	r2, [sp, #4]
   14b68:	strd	r0, [r2]
   14b6c:	orr	r8, r8, #2
   14b70:	b	14c50 <__assert_fail@plt+0x3b0c>
   14b74:	add	r0, sp, #8
   14b78:	mov	r1, r5
   14b7c:	mov	r2, #1
   14b80:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14b84:	b	14c24 <__assert_fail@plt+0x3ae0>
   14b88:	add	r0, sp, #8
   14b8c:	mov	r1, r5
   14b90:	mov	r2, #2
   14b94:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14b98:	b	14c24 <__assert_fail@plt+0x3ae0>
   14b9c:	add	r0, sp, #8
   14ba0:	mov	r1, r5
   14ba4:	mov	r2, #4
   14ba8:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14bac:	b	14c24 <__assert_fail@plt+0x3ae0>
   14bb0:	add	r0, sp, #8
   14bb4:	mov	r1, r5
   14bb8:	mov	r2, #7
   14bbc:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14bc0:	b	14c24 <__assert_fail@plt+0x3ae0>
   14bc4:	add	r0, sp, #8
   14bc8:	mov	r1, #1024	; 0x400
   14bcc:	b	14c20 <__assert_fail@plt+0x3adc>
   14bd0:	add	r0, sp, #8
   14bd4:	mov	r1, r5
   14bd8:	mov	r2, #6
   14bdc:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14be0:	b	14c24 <__assert_fail@plt+0x3ae0>
   14be4:	add	r0, sp, #8
   14be8:	mov	r1, r5
   14bec:	mov	r2, #5
   14bf0:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14bf4:	b	14c24 <__assert_fail@plt+0x3ae0>
   14bf8:	add	r0, sp, #8
   14bfc:	mov	r1, r5
   14c00:	mov	r2, #8
   14c04:	bl	14d08 <__assert_fail@plt+0x3bc4>
   14c08:	b	14c24 <__assert_fail@plt+0x3ae0>
   14c0c:	add	r0, sp, #8
   14c10:	mov	r1, #512	; 0x200
   14c14:	b	14c20 <__assert_fail@plt+0x3adc>
   14c18:	add	r0, sp, #8
   14c1c:	mov	r1, #2
   14c20:	bl	14c7c <__assert_fail@plt+0x3b38>
   14c24:	ldr	r1, [r9]
   14c28:	add	r2, r1, r7
   14c2c:	str	r2, [r9]
   14c30:	ldrb	r1, [r1, r7]
   14c34:	orr	r8, r0, r8
   14c38:	cmp	r1, #0
   14c3c:	orrne	r8, r8, #2
   14c40:	ldr	r0, [sp, #8]
   14c44:	ldr	r1, [sp, #12]
   14c48:	ldr	r2, [sp, #4]
   14c4c:	strd	r0, [r2]
   14c50:	mov	r0, r8
   14c54:	sub	sp, fp, #28
   14c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c5c:	movw	r0, #25709	; 0x646d
   14c60:	movt	r0, #1
   14c64:	movw	r1, #25747	; 0x6493
   14c68:	movt	r1, #1
   14c6c:	movw	r3, #25763	; 0x64a3
   14c70:	movt	r3, #1
   14c74:	mov	r2, #85	; 0x55
   14c78:	bl	11144 <__assert_fail@plt>
   14c7c:	push	{r4, r5, r6, r7, fp, lr}
   14c80:	add	fp, sp, #16
   14c84:	mov	r5, r1
   14c88:	mov	r4, r0
   14c8c:	cmn	r1, #1
   14c90:	ble	14cc8 <__assert_fail@plt+0x3b84>
   14c94:	cmp	r5, #0
   14c98:	beq	14ce8 <__assert_fail@plt+0x3ba4>
   14c9c:	asr	r3, r5, #31
   14ca0:	mvn	r6, #0
   14ca4:	mvn	r0, #0
   14ca8:	mvn	r1, #0
   14cac:	mov	r2, r5
   14cb0:	bl	15558 <__assert_fail@plt+0x4414>
   14cb4:	ldrd	r2, [r4]
   14cb8:	subs	r0, r0, r2
   14cbc:	sbcs	r0, r1, r3
   14cc0:	bcc	14cd8 <__assert_fail@plt+0x3b94>
   14cc4:	b	14ce8 <__assert_fail@plt+0x3ba4>
   14cc8:	ldrd	r0, [r4]
   14ccc:	orrs	r0, r0, r1
   14cd0:	beq	14ce8 <__assert_fail@plt+0x3ba4>
   14cd4:	mvn	r6, #0
   14cd8:	mov	r0, #1
   14cdc:	mvn	r7, #0
   14ce0:	strd	r6, [r4]
   14ce4:	pop	{r4, r5, r6, r7, fp, pc}
   14ce8:	ldrd	r0, [r4]
   14cec:	umull	r6, r2, r0, r5
   14cf0:	asr	r3, r5, #31
   14cf4:	mla	r0, r0, r3, r2
   14cf8:	mla	r7, r1, r5, r0
   14cfc:	mov	r0, #0
   14d00:	strd	r6, [r4]
   14d04:	pop	{r4, r5, r6, r7, fp, pc}
   14d08:	push	{r4, r5, r6, r7, fp, lr}
   14d0c:	add	fp, sp, #16
   14d10:	cmp	r2, #0
   14d14:	beq	14d48 <__assert_fail@plt+0x3c04>
   14d18:	mov	r4, r2
   14d1c:	mov	r5, r1
   14d20:	mov	r7, r0
   14d24:	mov	r6, #0
   14d28:	mov	r0, r7
   14d2c:	mov	r1, r5
   14d30:	bl	14c7c <__assert_fail@plt+0x3b38>
   14d34:	orr	r6, r0, r6
   14d38:	subs	r4, r4, #1
   14d3c:	bne	14d28 <__assert_fail@plt+0x3be4>
   14d40:	mov	r0, r6
   14d44:	pop	{r4, r5, r6, r7, fp, pc}
   14d48:	mov	r6, #0
   14d4c:	mov	r0, r6
   14d50:	pop	{r4, r5, r6, r7, fp, pc}
   14d54:	clz	r2, r1
   14d58:	lsr	r2, r2, #5
   14d5c:	clz	r3, r0
   14d60:	lsr	r3, r3, #5
   14d64:	orrs	r2, r3, r2
   14d68:	movwne	r1, #1
   14d6c:	movwne	r0, #1
   14d70:	cmp	r1, #0
   14d74:	beq	14da4 <__assert_fail@plt+0x3c60>
   14d78:	mvn	r2, #-2147483648	; 0x80000000
   14d7c:	udiv	r2, r2, r1
   14d80:	cmp	r2, r0
   14d84:	bcs	14da4 <__assert_fail@plt+0x3c60>
   14d88:	push	{fp, lr}
   14d8c:	mov	fp, sp
   14d90:	bl	11048 <__errno_location@plt>
   14d94:	mov	r1, #12
   14d98:	str	r1, [r0]
   14d9c:	mov	r0, #0
   14da0:	pop	{fp, pc}
   14da4:	b	10eb0 <calloc@plt>
   14da8:	cmp	r0, #0
   14dac:	movweq	r0, #1
   14db0:	cmn	r0, #1
   14db4:	ble	14dbc <__assert_fail@plt+0x3c78>
   14db8:	b	10fd0 <malloc@plt>
   14dbc:	push	{fp, lr}
   14dc0:	mov	fp, sp
   14dc4:	bl	11048 <__errno_location@plt>
   14dc8:	mov	r1, #12
   14dcc:	str	r1, [r0]
   14dd0:	mov	r0, #0
   14dd4:	pop	{fp, pc}
   14dd8:	push	{fp, lr}
   14ddc:	mov	fp, sp
   14de0:	cmp	r0, #0
   14de4:	beq	14e00 <__assert_fail@plt+0x3cbc>
   14de8:	cmp	r1, #0
   14dec:	beq	14e0c <__assert_fail@plt+0x3cc8>
   14df0:	cmn	r1, #1
   14df4:	ble	14e18 <__assert_fail@plt+0x3cd4>
   14df8:	pop	{fp, lr}
   14dfc:	b	10f34 <realloc@plt>
   14e00:	mov	r0, r1
   14e04:	pop	{fp, lr}
   14e08:	b	14da8 <__assert_fail@plt+0x3c64>
   14e0c:	bl	1231c <__assert_fail@plt+0x11d8>
   14e10:	mov	r0, #0
   14e14:	pop	{fp, pc}
   14e18:	bl	11048 <__errno_location@plt>
   14e1c:	mov	r1, #12
   14e20:	str	r1, [r0]
   14e24:	mov	r0, #0
   14e28:	pop	{fp, pc}
   14e2c:	push	{fp, lr}
   14e30:	mov	fp, sp
   14e34:	sub	sp, sp, #8
   14e38:	mov	r1, r0
   14e3c:	movw	r0, #20072	; 0x4e68
   14e40:	movt	r0, #1
   14e44:	mov	r2, #0
   14e48:	str	r2, [sp]
   14e4c:	str	r0, [sp, #4]
   14e50:	mvn	r0, #99	; 0x63
   14e54:	mov	r2, #0
   14e58:	mov	r3, #0
   14e5c:	bl	14f10 <__assert_fail@plt+0x3dcc>
   14e60:	mov	sp, fp
   14e64:	pop	{fp, pc}
   14e68:	cmn	r0, #100	; 0x64
   14e6c:	bne	14e80 <__assert_fail@plt+0x3d3c>
   14e70:	mov	r0, r1
   14e74:	mov	r1, r2
   14e78:	mov	r2, r3
   14e7c:	b	10f58 <readlink@plt>
   14e80:	push	{fp, lr}
   14e84:	mov	fp, sp
   14e88:	bl	1112c <abort@plt>
   14e8c:	sub	r0, r0, #1
   14e90:	ldrb	r3, [r0, #1]!
   14e94:	cmp	r3, #47	; 0x2f
   14e98:	beq	14e90 <__assert_fail@plt+0x3d4c>
   14e9c:	mov	r2, #0
   14ea0:	mov	r1, r0
   14ea4:	b	14eb0 <__assert_fail@plt+0x3d6c>
   14ea8:	mov	r2, #1
   14eac:	ldrb	r3, [r1, #1]!
   14eb0:	uxtb	r3, r3
   14eb4:	cmp	r3, #47	; 0x2f
   14eb8:	beq	14ea8 <__assert_fail@plt+0x3d64>
   14ebc:	cmp	r3, #0
   14ec0:	bxeq	lr
   14ec4:	tst	r2, #1
   14ec8:	movne	r0, r1
   14ecc:	mov	r2, #0
   14ed0:	ldrb	r3, [r1, #1]!
   14ed4:	b	14eb0 <__assert_fail@plt+0x3d6c>
   14ed8:	push	{r4, sl, fp, lr}
   14edc:	add	fp, sp, #8
   14ee0:	mov	r4, r0
   14ee4:	bl	11030 <strlen@plt>
   14ee8:	mov	r1, r0
   14eec:	sub	r2, r4, #1
   14ef0:	mov	r0, r1
   14ef4:	cmp	r1, #2
   14ef8:	bcc	14f0c <__assert_fail@plt+0x3dc8>
   14efc:	ldrb	r3, [r2, r0]
   14f00:	sub	r1, r0, #1
   14f04:	cmp	r3, #47	; 0x2f
   14f08:	beq	14ef0 <__assert_fail@plt+0x3dac>
   14f0c:	pop	{r4, sl, fp, pc}
   14f10:	push	{r4, r5, fp, lr}
   14f14:	add	fp, sp, #8
   14f18:	sub	sp, sp, #1040	; 0x410
   14f1c:	add	ip, sp, #16
   14f20:	str	ip, [sp, #8]
   14f24:	ldr	ip, [fp, #12]
   14f28:	str	ip, [sp, #4]
   14f2c:	ldr	ip, [fp, #8]
   14f30:	str	ip, [sp]
   14f34:	bl	14f40 <__assert_fail@plt+0x3dfc>
   14f38:	sub	sp, fp, #8
   14f3c:	pop	{r4, r5, fp, pc}
   14f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f44:	add	fp, sp, #28
   14f48:	sub	sp, sp, #4
   14f4c:	mov	r4, r3
   14f50:	mov	r6, r2
   14f54:	mov	r9, r0
   14f58:	cmp	r2, #0
   14f5c:	movweq	r4, #1024	; 0x400
   14f60:	cmn	r4, #-2147483647	; 0x80000001
   14f64:	mvncs	r4, #-2147483648	; 0x80000000
   14f68:	ldr	r0, [fp, #16]
   14f6c:	cmp	r2, #0
   14f70:	moveq	r6, r0
   14f74:	ldr	r0, [fp, #8]
   14f78:	movw	r7, #25848	; 0x64f8
   14f7c:	movt	r7, #1
   14f80:	cmp	r0, #0
   14f84:	movne	r7, r0
   14f88:	cmp	r6, #0
   14f8c:	beq	14ffc <__assert_fail@plt+0x3eb8>
   14f90:	mov	r8, r1
   14f94:	ldr	sl, [fp, #12]
   14f98:	mov	r5, r6
   14f9c:	mov	r0, r9
   14fa0:	mov	r1, r8
   14fa4:	mov	r2, r5
   14fa8:	mov	r3, r4
   14fac:	blx	sl
   14fb0:	cmn	r0, #1
   14fb4:	ble	1501c <__assert_fail@plt+0x3ed8>
   14fb8:	cmp	r0, r4
   14fbc:	blt	15048 <__assert_fail@plt+0x3f04>
   14fc0:	cmp	r5, r6
   14fc4:	beq	14fd4 <__assert_fail@plt+0x3e90>
   14fc8:	ldr	r1, [r7, #8]
   14fcc:	mov	r0, r5
   14fd0:	blx	r1
   14fd4:	cmn	r4, #-1073741823	; 0xc0000001
   14fd8:	bge	15098 <__assert_fail@plt+0x3f54>
   14fdc:	mov	r0, #1
   14fe0:	orr	r4, r0, r4, lsl #1
   14fe4:	ldr	r1, [r7]
   14fe8:	mov	r0, r4
   14fec:	blx	r1
   14ff0:	mov	r5, r0
   14ff4:	cmp	r0, #0
   14ff8:	bne	14f9c <__assert_fail@plt+0x3e58>
   14ffc:	ldr	r1, [r7, #12]
   15000:	cmp	r1, #0
   15004:	beq	15010 <__assert_fail@plt+0x3ecc>
   15008:	mov	r0, r4
   1500c:	blx	r1
   15010:	bl	11048 <__errno_location@plt>
   15014:	mov	r1, #12
   15018:	b	150a0 <__assert_fail@plt+0x3f5c>
   1501c:	mov	r4, #0
   15020:	cmp	r5, r6
   15024:	beq	150a8 <__assert_fail@plt+0x3f64>
   15028:	bl	11048 <__errno_location@plt>
   1502c:	mov	r6, r0
   15030:	ldr	r8, [r0]
   15034:	ldr	r1, [r7, #8]
   15038:	mov	r0, r5
   1503c:	blx	r1
   15040:	str	r8, [r6]
   15044:	b	150a8 <__assert_fail@plt+0x3f64>
   15048:	mov	r1, #0
   1504c:	strb	r1, [r5, r0]
   15050:	add	r8, r0, #1
   15054:	ldr	r0, [fp, #16]
   15058:	cmp	r5, r0
   1505c:	beq	150bc <__assert_fail@plt+0x3f78>
   15060:	cmp	r5, r6
   15064:	beq	150b4 <__assert_fail@plt+0x3f70>
   15068:	cmp	r8, r4
   1506c:	bge	150b4 <__assert_fail@plt+0x3f70>
   15070:	ldr	r2, [r7, #4]
   15074:	cmp	r2, #0
   15078:	beq	150b4 <__assert_fail@plt+0x3f70>
   1507c:	mov	r0, r5
   15080:	mov	r1, r8
   15084:	blx	r2
   15088:	cmp	r0, #0
   1508c:	moveq	r0, r5
   15090:	sub	sp, fp, #28
   15094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15098:	bl	11048 <__errno_location@plt>
   1509c:	mov	r1, #36	; 0x24
   150a0:	str	r1, [r0]
   150a4:	mov	r4, #0
   150a8:	mov	r0, r4
   150ac:	sub	sp, fp, #28
   150b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b4:	mov	r4, r5
   150b8:	b	150a8 <__assert_fail@plt+0x3f64>
   150bc:	ldr	r1, [r7]
   150c0:	mov	r0, r8
   150c4:	blx	r1
   150c8:	cmp	r0, #0
   150cc:	beq	150e4 <__assert_fail@plt+0x3fa0>
   150d0:	mov	r4, r0
   150d4:	mov	r1, r5
   150d8:	mov	r2, r8
   150dc:	bl	10f04 <memcpy@plt>
   150e0:	b	150a8 <__assert_fail@plt+0x3f64>
   150e4:	mov	r4, r8
   150e8:	b	14ffc <__assert_fail@plt+0x3eb8>
   150ec:	push	{r4, r5, r6, sl, fp, lr}
   150f0:	add	fp, sp, #16
   150f4:	mov	r4, r0
   150f8:	bl	10f88 <__fpending@plt>
   150fc:	mov	r5, r0
   15100:	mov	r0, r4
   15104:	bl	10f94 <ferror_unlocked@plt>
   15108:	mov	r6, r0
   1510c:	mov	r0, r4
   15110:	bl	15170 <__assert_fail@plt+0x402c>
   15114:	cmp	r6, #0
   15118:	beq	1513c <__assert_fail@plt+0x3ff8>
   1511c:	mvn	r4, #0
   15120:	cmp	r0, #0
   15124:	bne	15168 <__assert_fail@plt+0x4024>
   15128:	bl	11048 <__errno_location@plt>
   1512c:	mov	r1, #0
   15130:	str	r1, [r0]
   15134:	mov	r0, r4
   15138:	pop	{r4, r5, r6, sl, fp, pc}
   1513c:	cmp	r0, #0
   15140:	mov	r4, r0
   15144:	mvnne	r4, #0
   15148:	cmp	r5, #0
   1514c:	bne	15168 <__assert_fail@plt+0x4024>
   15150:	cmp	r0, #0
   15154:	beq	15168 <__assert_fail@plt+0x4024>
   15158:	bl	11048 <__errno_location@plt>
   1515c:	ldr	r0, [r0]
   15160:	subs	r4, r0, #9
   15164:	mvnne	r4, #0
   15168:	mov	r0, r4
   1516c:	pop	{r4, r5, r6, sl, fp, pc}
   15170:	push	{r4, r5, fp, lr}
   15174:	add	fp, sp, #8
   15178:	sub	sp, sp, #8
   1517c:	mov	r4, r0
   15180:	bl	11078 <fileno@plt>
   15184:	cmn	r0, #1
   15188:	ble	15200 <__assert_fail@plt+0x40bc>
   1518c:	mov	r0, r4
   15190:	bl	10fe8 <__freading@plt>
   15194:	cmp	r0, #0
   15198:	beq	151c4 <__assert_fail@plt+0x4080>
   1519c:	mov	r0, r4
   151a0:	bl	11078 <fileno@plt>
   151a4:	mov	r1, #1
   151a8:	str	r1, [sp]
   151ac:	mov	r2, #0
   151b0:	mov	r3, #0
   151b4:	bl	10f70 <lseek64@plt>
   151b8:	and	r0, r0, r1
   151bc:	cmn	r0, #1
   151c0:	beq	15200 <__assert_fail@plt+0x40bc>
   151c4:	mov	r0, r4
   151c8:	bl	15210 <__assert_fail@plt+0x40cc>
   151cc:	cmp	r0, #0
   151d0:	beq	15200 <__assert_fail@plt+0x40bc>
   151d4:	bl	11048 <__errno_location@plt>
   151d8:	ldr	r5, [r0]
   151dc:	mov	r0, r4
   151e0:	bl	110a8 <fclose@plt>
   151e4:	cmp	r5, #0
   151e8:	beq	151f8 <__assert_fail@plt+0x40b4>
   151ec:	bl	11048 <__errno_location@plt>
   151f0:	str	r5, [r0]
   151f4:	mvn	r0, #0
   151f8:	sub	sp, fp, #8
   151fc:	pop	{r4, r5, fp, pc}
   15200:	mov	r0, r4
   15204:	sub	sp, fp, #8
   15208:	pop	{r4, r5, fp, lr}
   1520c:	b	110a8 <fclose@plt>
   15210:	push	{r4, sl, fp, lr}
   15214:	add	fp, sp, #8
   15218:	mov	r4, r0
   1521c:	cmp	r0, #0
   15220:	beq	15238 <__assert_fail@plt+0x40f4>
   15224:	mov	r0, r4
   15228:	bl	10fe8 <__freading@plt>
   1522c:	cmp	r0, #0
   15230:	movne	r0, r4
   15234:	blne	15244 <__assert_fail@plt+0x4100>
   15238:	mov	r0, r4
   1523c:	pop	{r4, sl, fp, lr}
   15240:	b	10ee0 <fflush@plt>
   15244:	push	{fp, lr}
   15248:	mov	fp, sp
   1524c:	sub	sp, sp, #8
   15250:	ldrb	r1, [r0, #1]
   15254:	tst	r1, #1
   15258:	beq	15270 <__assert_fail@plt+0x412c>
   1525c:	mov	r1, #1
   15260:	str	r1, [sp]
   15264:	mov	r2, #0
   15268:	mov	r3, #0
   1526c:	bl	15278 <__assert_fail@plt+0x4134>
   15270:	mov	sp, fp
   15274:	pop	{fp, pc}
   15278:	push	{r4, r5, r6, r7, fp, lr}
   1527c:	add	fp, sp, #16
   15280:	sub	sp, sp, #8
   15284:	mov	r5, r3
   15288:	mov	r6, r2
   1528c:	mov	r4, r0
   15290:	ldr	r0, [r0, #4]
   15294:	ldr	r1, [r4, #8]
   15298:	cmp	r1, r0
   1529c:	bne	152b8 <__assert_fail@plt+0x4174>
   152a0:	ldrd	r0, [r4, #16]
   152a4:	cmp	r1, r0
   152a8:	bne	152b8 <__assert_fail@plt+0x4174>
   152ac:	ldr	r0, [r4, #36]	; 0x24
   152b0:	cmp	r0, #0
   152b4:	beq	152d0 <__assert_fail@plt+0x418c>
   152b8:	mov	r0, r4
   152bc:	mov	r2, r6
   152c0:	mov	r3, r5
   152c4:	sub	sp, fp, #16
   152c8:	pop	{r4, r5, r6, r7, fp, lr}
   152cc:	b	110b4 <fseeko64@plt>
   152d0:	ldr	r7, [fp, #8]
   152d4:	mov	r0, r4
   152d8:	bl	11078 <fileno@plt>
   152dc:	str	r7, [sp]
   152e0:	mov	r2, r6
   152e4:	mov	r3, r5
   152e8:	bl	10f70 <lseek64@plt>
   152ec:	and	r2, r0, r1
   152f0:	cmn	r2, #1
   152f4:	beq	15314 <__assert_fail@plt+0x41d0>
   152f8:	strd	r0, [r4, #80]	; 0x50
   152fc:	ldr	r0, [r4]
   15300:	bic	r0, r0, #16
   15304:	str	r0, [r4]
   15308:	mov	r0, #0
   1530c:	sub	sp, fp, #16
   15310:	pop	{r4, r5, r6, r7, fp, pc}
   15314:	mvn	r0, #0
   15318:	sub	sp, fp, #16
   1531c:	pop	{r4, r5, r6, r7, fp, pc}
   15320:	push	{fp, lr}
   15324:	mov	fp, sp
   15328:	bl	11048 <__errno_location@plt>
   1532c:	mov	r1, #12
   15330:	str	r1, [r0]
   15334:	mov	r0, #0
   15338:	pop	{fp, pc}
   1533c:	b	14da8 <__assert_fail@plt+0x3c64>
   15340:	cmp	r1, #0
   15344:	orreq	r1, r1, #1
   15348:	b	14dd8 <__assert_fail@plt+0x3c94>
   1534c:	b	14d54 <__assert_fail@plt+0x3c10>
   15350:	clz	r3, r2
   15354:	lsr	ip, r3, #5
   15358:	clz	r3, r1
   1535c:	lsr	r3, r3, #5
   15360:	orrs	r3, r3, ip
   15364:	movwne	r1, #1
   15368:	movwne	r2, #1
   1536c:	b	1540c <__assert_fail@plt+0x42c8>
   15370:	push	{fp, lr}
   15374:	mov	fp, sp
   15378:	mov	r0, #14
   1537c:	bl	110fc <nl_langinfo@plt>
   15380:	movw	r1, #24252	; 0x5ebc
   15384:	movt	r1, #1
   15388:	cmp	r0, #0
   1538c:	movne	r1, r0
   15390:	ldrb	r2, [r1]
   15394:	movw	r0, #25842	; 0x64f2
   15398:	movt	r0, #1
   1539c:	cmp	r2, #0
   153a0:	movne	r0, r1
   153a4:	pop	{fp, pc}
   153a8:	push	{r4, r5, r6, r7, fp, lr}
   153ac:	add	fp, sp, #16
   153b0:	sub	sp, sp, #8
   153b4:	mov	r7, r2
   153b8:	mov	r4, r1
   153bc:	add	r5, sp, #4
   153c0:	cmp	r0, #0
   153c4:	movne	r5, r0
   153c8:	mov	r0, r5
   153cc:	bl	10fa0 <mbrtowc@plt>
   153d0:	mov	r6, r0
   153d4:	cmp	r7, #0
   153d8:	beq	15400 <__assert_fail@plt+0x42bc>
   153dc:	cmn	r6, #2
   153e0:	bcc	15400 <__assert_fail@plt+0x42bc>
   153e4:	mov	r0, #0
   153e8:	bl	15448 <__assert_fail@plt+0x4304>
   153ec:	cmp	r0, #0
   153f0:	bne	15400 <__assert_fail@plt+0x42bc>
   153f4:	ldrb	r0, [r4]
   153f8:	str	r0, [r5]
   153fc:	mov	r6, #1
   15400:	mov	r0, r6
   15404:	sub	sp, fp, #16
   15408:	pop	{r4, r5, r6, r7, fp, pc}
   1540c:	cmp	r2, #0
   15410:	beq	15440 <__assert_fail@plt+0x42fc>
   15414:	mvn	r3, #0
   15418:	udiv	r3, r3, r2
   1541c:	cmp	r3, r1
   15420:	bcs	15440 <__assert_fail@plt+0x42fc>
   15424:	push	{fp, lr}
   15428:	mov	fp, sp
   1542c:	bl	11048 <__errno_location@plt>
   15430:	mov	r1, #12
   15434:	str	r1, [r0]
   15438:	mov	r0, #0
   1543c:	pop	{fp, pc}
   15440:	mul	r1, r2, r1
   15444:	b	14dd8 <__assert_fail@plt+0x3c94>
   15448:	push	{r4, sl, fp, lr}
   1544c:	add	fp, sp, #8
   15450:	sub	sp, sp, #264	; 0x108
   15454:	add	r1, sp, #7
   15458:	movw	r2, #257	; 0x101
   1545c:	bl	154b4 <__assert_fail@plt+0x4370>
   15460:	mov	r4, #0
   15464:	cmp	r0, #0
   15468:	bne	154a8 <__assert_fail@plt+0x4364>
   1546c:	add	r0, sp, #7
   15470:	movw	r1, #25864	; 0x6508
   15474:	movt	r1, #1
   15478:	mov	r2, #2
   1547c:	bl	11024 <bcmp@plt>
   15480:	cmp	r0, #0
   15484:	beq	154a8 <__assert_fail@plt+0x4364>
   15488:	add	r0, sp, #7
   1548c:	movw	r1, #25866	; 0x650a
   15490:	movt	r1, #1
   15494:	mov	r2, #6
   15498:	bl	11024 <bcmp@plt>
   1549c:	mov	r4, r0
   154a0:	cmp	r0, #0
   154a4:	movwne	r4, #1
   154a8:	mov	r0, r4
   154ac:	sub	sp, fp, #8
   154b0:	pop	{r4, sl, fp, pc}
   154b4:	b	154b8 <__assert_fail@plt+0x4374>
   154b8:	push	{r4, r5, r6, r7, fp, lr}
   154bc:	add	fp, sp, #16
   154c0:	mov	r6, r2
   154c4:	mov	r4, r1
   154c8:	bl	15550 <__assert_fail@plt+0x440c>
   154cc:	cmp	r0, #0
   154d0:	beq	15500 <__assert_fail@plt+0x43bc>
   154d4:	mov	r7, r0
   154d8:	bl	11030 <strlen@plt>
   154dc:	cmp	r0, r6
   154e0:	bcs	1551c <__assert_fail@plt+0x43d8>
   154e4:	add	r2, r0, #1
   154e8:	mov	r0, r4
   154ec:	mov	r1, r7
   154f0:	bl	10f04 <memcpy@plt>
   154f4:	mov	r5, #0
   154f8:	mov	r0, r5
   154fc:	pop	{r4, r5, r6, r7, fp, pc}
   15500:	mov	r5, #22
   15504:	cmp	r6, #0
   15508:	beq	15544 <__assert_fail@plt+0x4400>
   1550c:	mov	r0, #0
   15510:	strb	r0, [r4]
   15514:	mov	r0, r5
   15518:	pop	{r4, r5, r6, r7, fp, pc}
   1551c:	mov	r5, #34	; 0x22
   15520:	cmp	r6, #0
   15524:	beq	15544 <__assert_fail@plt+0x4400>
   15528:	sub	r6, r6, #1
   1552c:	mov	r0, r4
   15530:	mov	r1, r7
   15534:	mov	r2, r6
   15538:	bl	10f04 <memcpy@plt>
   1553c:	mov	r0, #0
   15540:	strb	r0, [r4, r6]
   15544:	mov	r0, r5
   15548:	pop	{r4, r5, r6, r7, fp, pc}
   1554c:	b	15550 <__assert_fail@plt+0x440c>
   15550:	mov	r1, #0
   15554:	b	110cc <setlocale@plt>
   15558:	cmp	r3, #0
   1555c:	cmpeq	r2, #0
   15560:	bne	15578 <__assert_fail@plt+0x4434>
   15564:	cmp	r1, #0
   15568:	cmpeq	r0, #0
   1556c:	mvnne	r1, #0
   15570:	mvnne	r0, #0
   15574:	b	15594 <__assert_fail@plt+0x4450>
   15578:	sub	sp, sp, #8
   1557c:	push	{sp, lr}
   15580:	bl	155a4 <__assert_fail@plt+0x4460>
   15584:	ldr	lr, [sp, #4]
   15588:	add	sp, sp, #8
   1558c:	pop	{r2, r3}
   15590:	bx	lr
   15594:	push	{r1, lr}
   15598:	mov	r0, #8
   1559c:	bl	10ec8 <raise@plt>
   155a0:	pop	{r1, pc}
   155a4:	cmp	r1, r3
   155a8:	cmpeq	r0, r2
   155ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b0:	mov	r4, r0
   155b4:	movcc	r0, #0
   155b8:	mov	r5, r1
   155bc:	ldr	lr, [sp, #36]	; 0x24
   155c0:	movcc	r1, r0
   155c4:	bcc	156c0 <__assert_fail@plt+0x457c>
   155c8:	cmp	r3, #0
   155cc:	clzeq	ip, r2
   155d0:	clzne	ip, r3
   155d4:	addeq	ip, ip, #32
   155d8:	cmp	r5, #0
   155dc:	clzeq	r1, r4
   155e0:	addeq	r1, r1, #32
   155e4:	clzne	r1, r5
   155e8:	sub	ip, ip, r1
   155ec:	sub	sl, ip, #32
   155f0:	lsl	r9, r3, ip
   155f4:	rsb	fp, ip, #32
   155f8:	orr	r9, r9, r2, lsl sl
   155fc:	orr	r9, r9, r2, lsr fp
   15600:	lsl	r8, r2, ip
   15604:	cmp	r5, r9
   15608:	cmpeq	r4, r8
   1560c:	movcc	r0, #0
   15610:	movcc	r1, r0
   15614:	bcc	15630 <__assert_fail@plt+0x44ec>
   15618:	mov	r0, #1
   1561c:	subs	r4, r4, r8
   15620:	lsl	r1, r0, sl
   15624:	orr	r1, r1, r0, lsr fp
   15628:	lsl	r0, r0, ip
   1562c:	sbc	r5, r5, r9
   15630:	cmp	ip, #0
   15634:	beq	156c0 <__assert_fail@plt+0x457c>
   15638:	lsr	r6, r8, #1
   1563c:	orr	r6, r6, r9, lsl #31
   15640:	lsr	r7, r9, #1
   15644:	mov	r2, ip
   15648:	b	1566c <__assert_fail@plt+0x4528>
   1564c:	subs	r3, r4, r6
   15650:	sbc	r8, r5, r7
   15654:	adds	r3, r3, r3
   15658:	adc	r8, r8, r8
   1565c:	adds	r4, r3, #1
   15660:	adc	r5, r8, #0
   15664:	subs	r2, r2, #1
   15668:	beq	15688 <__assert_fail@plt+0x4544>
   1566c:	cmp	r5, r7
   15670:	cmpeq	r4, r6
   15674:	bcs	1564c <__assert_fail@plt+0x4508>
   15678:	adds	r4, r4, r4
   1567c:	adc	r5, r5, r5
   15680:	subs	r2, r2, #1
   15684:	bne	1566c <__assert_fail@plt+0x4528>
   15688:	lsr	r3, r4, ip
   1568c:	orr	r3, r3, r5, lsl fp
   15690:	lsr	r2, r5, ip
   15694:	orr	r3, r3, r5, lsr sl
   15698:	adds	r0, r0, r4
   1569c:	mov	r4, r3
   156a0:	lsl	r3, r2, ip
   156a4:	orr	r3, r3, r4, lsl sl
   156a8:	lsl	ip, r4, ip
   156ac:	orr	r3, r3, r4, lsr fp
   156b0:	adc	r1, r1, r5
   156b4:	subs	r0, r0, ip
   156b8:	mov	r5, r2
   156bc:	sbc	r1, r1, r3
   156c0:	cmp	lr, #0
   156c4:	strdne	r4, [lr]
   156c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156d0:	mov	r7, r0
   156d4:	ldr	r6, [pc, #72]	; 15724 <__assert_fail@plt+0x45e0>
   156d8:	ldr	r5, [pc, #72]	; 15728 <__assert_fail@plt+0x45e4>
   156dc:	add	r6, pc, r6
   156e0:	add	r5, pc, r5
   156e4:	sub	r6, r6, r5
   156e8:	mov	r8, r1
   156ec:	mov	r9, r2
   156f0:	bl	10e90 <calloc@plt-0x20>
   156f4:	asrs	r6, r6, #2
   156f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   156fc:	mov	r4, #0
   15700:	add	r4, r4, #1
   15704:	ldr	r3, [r5], #4
   15708:	mov	r2, r9
   1570c:	mov	r1, r8
   15710:	mov	r0, r7
   15714:	blx	r3
   15718:	cmp	r6, r4
   1571c:	bne	15700 <__assert_fail@plt+0x45bc>
   15720:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15724:	andeq	r1, r1, r8, lsr #16
   15728:	andeq	r1, r1, r0, lsr #16
   1572c:	bx	lr
   15730:	ldr	r3, [pc, #12]	; 15744 <__assert_fail@plt+0x4600>
   15734:	mov	r1, #0
   15738:	add	r3, pc, r3
   1573c:	ldr	r2, [r3]
   15740:	b	11054 <__cxa_atexit@plt>
   15744:			; <UNDEFINED> instruction: 0x000119b4
   15748:	mov	r2, r1
   1574c:	mov	r1, r0
   15750:	mov	r0, #3
   15754:	b	11114 <__xstat64@plt>

Disassembly of section .fini:

00015758 <.fini>:
   15758:	push	{r3, lr}
   1575c:	pop	{r3, pc}
