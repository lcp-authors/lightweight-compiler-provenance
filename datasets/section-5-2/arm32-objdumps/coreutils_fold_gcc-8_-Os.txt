
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	111e8 <__assert_fail@plt+0x2a8>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r4, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <strcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <posix_fadvise64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <fflush@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <memmove@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <mbsinit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <fwrite_unlocked@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <memcmp@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <fputc_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <getc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <lseek64@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__ctype_get_mb_cur_max@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <__fpending@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <ferror_unlocked@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <mbrtowc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <error@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <malloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <__libc_start_main@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <__freading@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <__gmon_start__@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <getopt_long@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__ctype_b_loc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <exit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <strlen@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <strchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <__errno_location@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <__cxa_atexit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <memset@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <__printf_chk@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <fileno@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <strtoumax@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <__fprintf_chk@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <fclose@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fseeko64@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <setlocale@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <strrchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <nl_langinfo@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <clearerr_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <fopen64@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <bindtextdomain@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <fputs@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <strncmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <abort@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <putchar_unlocked@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <__assert_fail@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

Disassembly of section .text:

00010f4c <.text>:
   10f4c:	push	{r4, lr}
   10f50:	bl	10e5c <__errno_location@plt>
   10f54:	mov	r3, #12
   10f58:	str	r3, [r0]
   10f5c:	mov	r0, #0
   10f60:	pop	{r4, pc}
   10f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f68:	mov	r7, r0
   10f6c:	sub	sp, sp, #36	; 0x24
   10f70:	mov	r9, r1
   10f74:	mov	r8, #80	; 0x50
   10f78:	ldr	r0, [r1]
   10f7c:	bl	11b00 <__assert_fail@plt+0xbc0>
   10f80:	ldr	r1, [pc, #480]	; 11168 <__assert_fail@plt+0x228>
   10f84:	mov	r0, #6
   10f88:	bl	10ec8 <setlocale@plt>
   10f8c:	ldr	r4, [pc, #472]	; 1116c <__assert_fail@plt+0x22c>
   10f90:	ldr	r1, [pc, #472]	; 11170 <__assert_fail@plt+0x230>
   10f94:	ldr	r0, [pc, #472]	; 11174 <__assert_fail@plt+0x234>
   10f98:	bl	10f04 <bindtextdomain@plt>
   10f9c:	ldr	sl, [pc, #468]	; 11178 <__assert_fail@plt+0x238>
   10fa0:	ldr	r6, [pc, #468]	; 1117c <__assert_fail@plt+0x23c>
   10fa4:	ldr	fp, [pc, #468]	; 11180 <__assert_fail@plt+0x240>
   10fa8:	ldr	r0, [pc, #452]	; 11174 <__assert_fail@plt+0x234>
   10fac:	bl	10d90 <textdomain@plt>
   10fb0:	ldr	r0, [pc, #460]	; 11184 <__assert_fail@plt+0x244>
   10fb4:	bl	141d0 <__assert_fail@plt+0x3290>
   10fb8:	mov	r3, #0
   10fbc:	strb	r3, [r4]
   10fc0:	strb	r3, [r4, #1]
   10fc4:	strb	r3, [r4, #12]
   10fc8:	mov	r5, #0
   10fcc:	mov	r3, sl
   10fd0:	ldr	r2, [pc, #432]	; 11188 <__assert_fail@plt+0x248>
   10fd4:	mov	r1, r9
   10fd8:	mov	r0, r7
   10fdc:	str	r5, [sp]
   10fe0:	bl	10e20 <getopt_long@plt>
   10fe4:	cmn	r0, #1
   10fe8:	bne	11044 <__assert_fail@plt+0x104>
   10fec:	ldr	r3, [pc, #408]	; 1118c <__assert_fail@plt+0x24c>
   10ff0:	ldr	r6, [r3]
   10ff4:	cmp	r6, r7
   10ff8:	movne	r5, #1
   10ffc:	bne	1114c <__assert_fail@plt+0x20c>
   11000:	mov	r1, r8
   11004:	ldr	r0, [pc, #388]	; 11190 <__assert_fail@plt+0x250>
   11008:	bl	112f0 <__assert_fail@plt+0x3b0>
   1100c:	mov	r5, r0
   11010:	ldrb	r3, [r4, #1]
   11014:	cmp	r3, #0
   11018:	beq	11158 <__assert_fail@plt+0x218>
   1101c:	ldr	r3, [pc, #368]	; 11194 <__assert_fail@plt+0x254>
   11020:	ldr	r0, [r3]
   11024:	bl	11970 <__assert_fail@plt+0xa30>
   11028:	cmn	r0, #1
   1102c:	bne	11158 <__assert_fail@plt+0x218>
   11030:	bl	10e5c <__errno_location@plt>
   11034:	ldr	r2, [pc, #340]	; 11190 <__assert_fail@plt+0x250>
   11038:	ldr	r1, [r0]
   1103c:	mov	r0, #1
   11040:	bl	10de4 <error@plt>
   11044:	cmp	r0, #57	; 0x39
   11048:	bgt	11070 <__assert_fail@plt+0x130>
   1104c:	cmp	r0, #48	; 0x30
   11050:	bge	110a0 <__assert_fail@plt+0x160>
   11054:	cmn	r0, #3
   11058:	beq	11108 <__assert_fail@plt+0x1c8>
   1105c:	cmn	r0, #2
   11060:	moveq	r0, r5
   11064:	beq	1106c <__assert_fail@plt+0x12c>
   11068:	mov	r0, #1
   1106c:	bl	115d4 <__assert_fail@plt+0x694>
   11070:	cmp	r0, #115	; 0x73
   11074:	beq	11094 <__assert_fail@plt+0x154>
   11078:	cmp	r0, #119	; 0x77
   1107c:	beq	110bc <__assert_fail@plt+0x17c>
   11080:	cmp	r0, #98	; 0x62
   11084:	bne	11068 <__assert_fail@plt+0x128>
   11088:	mov	r3, #1
   1108c:	strb	r3, [r4]
   11090:	b	10fc8 <__assert_fail@plt+0x88>
   11094:	mov	r3, #1
   11098:	strb	r3, [r4, #12]
   1109c:	b	10fc8 <__assert_fail@plt+0x88>
   110a0:	ldr	r3, [r6]
   110a4:	cmp	r3, #0
   110a8:	subne	r3, r3, #1
   110ac:	strbeq	r3, [sp, #29]
   110b0:	addeq	r3, sp, #28
   110b4:	strbeq	r0, [sp, #28]
   110b8:	str	r3, [r6]
   110bc:	mov	r2, #5
   110c0:	mov	r1, fp
   110c4:	ldr	r5, [r6]
   110c8:	mov	r0, #0
   110cc:	bl	10d78 <dcgettext@plt>
   110d0:	mov	r3, #0
   110d4:	mvn	r2, #9
   110d8:	str	r0, [sp, #12]
   110dc:	str	r3, [sp, #16]
   110e0:	mov	r0, r5
   110e4:	ldr	r3, [pc, #124]	; 11168 <__assert_fail@plt+0x228>
   110e8:	str	r3, [sp, #8]
   110ec:	mov	r3, #0
   110f0:	strd	r2, [sp]
   110f4:	mov	r2, #1
   110f8:	mov	r3, #0
   110fc:	bl	13a00 <__assert_fail@plt+0x2ac0>
   11100:	mov	r8, r0
   11104:	b	10fc8 <__assert_fail@plt+0x88>
   11108:	ldr	r3, [pc, #136]	; 11198 <__assert_fail@plt+0x258>
   1110c:	ldr	r0, [pc, #136]	; 1119c <__assert_fail@plt+0x25c>
   11110:	ldr	r2, [pc, #136]	; 111a0 <__assert_fail@plt+0x260>
   11114:	stm	sp, {r3, r5}
   11118:	ldr	r3, [pc, #132]	; 111a4 <__assert_fail@plt+0x264>
   1111c:	ldr	r1, [pc, #132]	; 111a8 <__assert_fail@plt+0x268>
   11120:	ldr	r0, [r0]
   11124:	ldr	r3, [r3]
   11128:	bl	1354c <__assert_fail@plt+0x260c>
   1112c:	mov	r0, r5
   11130:	bl	10e38 <exit@plt>
   11134:	mov	r1, r8
   11138:	ldr	r0, [r9, r6, lsl #2]
   1113c:	add	r6, r6, #1
   11140:	bl	112f0 <__assert_fail@plt+0x3b0>
   11144:	and	r5, r5, r0
   11148:	uxtb	r5, r5
   1114c:	cmp	r6, r7
   11150:	blt	11134 <__assert_fail@plt+0x1f4>
   11154:	b	11010 <__assert_fail@plt+0xd0>
   11158:	eor	r0, r5, #1
   1115c:	uxtb	r0, r0
   11160:	add	sp, sp, #36	; 0x24
   11164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11168:	muleq	r1, r6, r5
   1116c:	andeq	r5, r2, r0, ror #2
   11170:	muleq	r1, r7, r5
   11174:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11178:	andeq	r4, r1, ip, lsr #4
   1117c:	andeq	r5, r2, r8, asr r1
   11180:	andeq	r4, r1, pc, lsr #11
   11184:	andeq	r1, r1, r8, ror #16
   11188:	andeq	r4, r1, ip, lsl #5
   1118c:	andeq	r5, r2, r0, asr #2
   11190:			; <UNDEFINED> instruction: 0x000146bc
   11194:	andeq	r5, r2, r0, asr r1
   11198:	andeq	r4, r1, r9, asr #11
   1119c:	andeq	r5, r2, r4, asr r1
   111a0:	strdeq	r4, [r1], -r0
   111a4:	andeq	r5, r2, ip, ror #1
   111a8:	andeq	r4, r1, pc, lsr #5
   111ac:	mov	fp, #0
   111b0:	mov	lr, #0
   111b4:	pop	{r1}		; (ldr r1, [sp], #4)
   111b8:	mov	r2, sp
   111bc:	push	{r2}		; (str r2, [sp, #-4]!)
   111c0:	push	{r0}		; (str r0, [sp, #-4]!)
   111c4:	ldr	ip, [pc, #16]	; 111dc <__assert_fail@plt+0x29c>
   111c8:	push	{ip}		; (str ip, [sp, #-4]!)
   111cc:	ldr	r0, [pc, #12]	; 111e0 <__assert_fail@plt+0x2a0>
   111d0:	ldr	r3, [pc, #12]	; 111e4 <__assert_fail@plt+0x2a4>
   111d4:	bl	10dfc <__libc_start_main@plt>
   111d8:	bl	10f28 <abort@plt>
   111dc:	andeq	r4, r1, ip, asr #3
   111e0:	andeq	r0, r1, r4, ror #30
   111e4:	andeq	r4, r1, ip, ror #2
   111e8:	ldr	r3, [pc, #20]	; 11204 <__assert_fail@plt+0x2c4>
   111ec:	ldr	r2, [pc, #20]	; 11208 <__assert_fail@plt+0x2c8>
   111f0:	add	r3, pc, r3
   111f4:	ldr	r2, [r3, r2]
   111f8:	cmp	r2, #0
   111fc:	bxeq	lr
   11200:	b	10e14 <__gmon_start__@plt>
   11204:	andeq	r3, r1, r8, lsl #28
   11208:	andeq	r0, r0, r0, ror #1
   1120c:	ldr	r0, [pc, #24]	; 1122c <__assert_fail@plt+0x2ec>
   11210:	ldr	r3, [pc, #24]	; 11230 <__assert_fail@plt+0x2f0>
   11214:	cmp	r3, r0
   11218:	bxeq	lr
   1121c:	ldr	r3, [pc, #16]	; 11234 <__assert_fail@plt+0x2f4>
   11220:	cmp	r3, #0
   11224:	bxeq	lr
   11228:	bx	r3
   1122c:	andeq	r5, r2, r4, lsr r1
   11230:	andeq	r5, r2, r4, lsr r1
   11234:	andeq	r0, r0, r0
   11238:	ldr	r0, [pc, #36]	; 11264 <__assert_fail@plt+0x324>
   1123c:	ldr	r1, [pc, #36]	; 11268 <__assert_fail@plt+0x328>
   11240:	sub	r1, r1, r0
   11244:	asr	r1, r1, #2
   11248:	add	r1, r1, r1, lsr #31
   1124c:	asrs	r1, r1, #1
   11250:	bxeq	lr
   11254:	ldr	r3, [pc, #16]	; 1126c <__assert_fail@plt+0x32c>
   11258:	cmp	r3, #0
   1125c:	bxeq	lr
   11260:	bx	r3
   11264:	andeq	r5, r2, r4, lsr r1
   11268:	andeq	r5, r2, r4, lsr r1
   1126c:	andeq	r0, r0, r0
   11270:	push	{r4, lr}
   11274:	ldr	r4, [pc, #24]	; 11294 <__assert_fail@plt+0x354>
   11278:	ldrb	r3, [r4]
   1127c:	cmp	r3, #0
   11280:	popne	{r4, pc}
   11284:	bl	1120c <__assert_fail@plt+0x2cc>
   11288:	mov	r3, #1
   1128c:	strb	r3, [r4]
   11290:	pop	{r4, pc}
   11294:	andeq	r5, r2, ip, asr r1
   11298:	b	11238 <__assert_fail@plt+0x2f8>
   1129c:	ldr	r3, [pc, #72]	; 112ec <__assert_fail@plt+0x3ac>
   112a0:	ldrb	r3, [r3]
   112a4:	cmp	r3, #0
   112a8:	bne	112dc <__assert_fail@plt+0x39c>
   112ac:	cmp	r1, #8
   112b0:	bne	112c0 <__assert_fail@plt+0x380>
   112b4:	cmp	r0, #0
   112b8:	subne	r0, r0, #1
   112bc:	bx	lr
   112c0:	cmp	r1, #13
   112c4:	beq	112e4 <__assert_fail@plt+0x3a4>
   112c8:	cmp	r1, #9
   112cc:	bne	112dc <__assert_fail@plt+0x39c>
   112d0:	bic	r0, r0, #7
   112d4:	add	r0, r0, #8
   112d8:	bx	lr
   112dc:	add	r0, r0, #1
   112e0:	bx	lr
   112e4:	mov	r0, r3
   112e8:	bx	lr
   112ec:	andeq	r5, r2, r0, ror #2
   112f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112f4:	sub	sp, sp, #20
   112f8:	mov	sl, r0
   112fc:	str	r1, [sp, #8]
   11300:	ldr	r1, [pc, #688]	; 115b8 <__assert_fail@plt+0x678>
   11304:	bl	10ce8 <strcmp@plt>
   11308:	cmp	r0, #0
   1130c:	bne	1136c <__assert_fail@plt+0x42c>
   11310:	ldr	r3, [pc, #676]	; 115bc <__assert_fail@plt+0x67c>
   11314:	mov	r2, #1
   11318:	ldr	r5, [r3]
   1131c:	ldr	r3, [pc, #668]	; 115c0 <__assert_fail@plt+0x680>
   11320:	strb	r2, [r3, #1]
   11324:	bl	10e5c <__errno_location@plt>
   11328:	cmp	r5, #0
   1132c:	str	r0, [sp, #4]
   11330:	bne	11380 <__assert_fail@plt+0x440>
   11334:	mov	r3, r0
   11338:	mov	r2, sl
   1133c:	ldr	r4, [r3]
   11340:	mov	r1, #3
   11344:	mov	r0, r5
   11348:	bl	12fc0 <__assert_fail@plt+0x2080>
   1134c:	ldr	r2, [pc, #624]	; 115c4 <__assert_fail@plt+0x684>
   11350:	mov	r3, r0
   11354:	mov	r1, r4
   11358:	mov	r0, #0
   1135c:	bl	10de4 <error@plt>
   11360:	mov	r0, #0
   11364:	add	sp, sp, #20
   11368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1136c:	ldr	r1, [pc, #596]	; 115c8 <__assert_fail@plt+0x688>
   11370:	mov	r0, sl
   11374:	bl	10ef8 <fopen64@plt>
   11378:	mov	r5, r0
   1137c:	b	11324 <__assert_fail@plt+0x3e4>
   11380:	ldr	r6, [pc, #568]	; 115c0 <__assert_fail@plt+0x680>
   11384:	mov	r4, #0
   11388:	mov	r1, #2
   1138c:	mov	r0, r5
   11390:	mov	fp, r4
   11394:	bl	11940 <__assert_fail@plt+0xa00>
   11398:	mov	r0, r5
   1139c:	bl	10d6c <getc_unlocked@plt>
   113a0:	cmn	r0, #1
   113a4:	mov	r7, r0
   113a8:	bne	11430 <__assert_fail@plt+0x4f0>
   113ac:	ldr	r3, [sp, #4]
   113b0:	mov	r0, r5
   113b4:	ldr	r6, [r3]
   113b8:	bl	10dcc <ferror_unlocked@plt>
   113bc:	cmp	r0, #0
   113c0:	moveq	r6, #0
   113c4:	cmp	r4, #0
   113c8:	beq	113e8 <__assert_fail@plt+0x4a8>
   113cc:	ldr	r3, [pc, #504]	; 115cc <__assert_fail@plt+0x68c>
   113d0:	mov	r2, r4
   113d4:	mov	r1, #1
   113d8:	ldr	r0, [pc, #480]	; 115c0 <__assert_fail@plt+0x680>
   113dc:	ldr	r3, [r3]
   113e0:	ldr	r0, [r0, #8]
   113e4:	bl	10d48 <fwrite_unlocked@plt>
   113e8:	ldr	r1, [pc, #456]	; 115b8 <__assert_fail@plt+0x678>
   113ec:	mov	r0, sl
   113f0:	bl	10ce8 <strcmp@plt>
   113f4:	cmp	r0, #0
   113f8:	mov	r0, r5
   113fc:	bne	11550 <__assert_fail@plt+0x610>
   11400:	bl	10eec <clearerr_unlocked@plt>
   11404:	cmp	r6, #0
   11408:	moveq	r0, #1
   1140c:	beq	11364 <__assert_fail@plt+0x424>
   11410:	mov	r2, sl
   11414:	mov	r1, #3
   11418:	mov	r0, #0
   1141c:	bl	12fc0 <__assert_fail@plt+0x2080>
   11420:	mov	r3, r0
   11424:	ldr	r2, [pc, #408]	; 115c4 <__assert_fail@plt+0x684>
   11428:	mov	r1, r6
   1142c:	b	11358 <__assert_fail@plt+0x418>
   11430:	ldr	r2, [r6, #4]
   11434:	add	r8, r4, #1
   11438:	cmp	r8, r2
   1143c:	bcc	11450 <__assert_fail@plt+0x510>
   11440:	ldr	r1, [pc, #392]	; 115d0 <__assert_fail@plt+0x690>
   11444:	ldr	r0, [r6, #8]
   11448:	bl	13744 <__assert_fail@plt+0x2804>
   1144c:	str	r0, [r6, #8]
   11450:	cmp	r7, #10
   11454:	uxtbne	r7, r7
   11458:	bne	114e4 <__assert_fail@plt+0x5a4>
   1145c:	ldr	r3, [pc, #360]	; 115cc <__assert_fail@plt+0x68c>
   11460:	mov	r2, r8
   11464:	mov	r1, #1
   11468:	ldr	r0, [r6, #8]
   1146c:	strb	r7, [r0, r4]
   11470:	mov	r4, #0
   11474:	ldr	r3, [r3]
   11478:	mov	fp, r4
   1147c:	bl	10d48 <fwrite_unlocked@plt>
   11480:	b	11398 <__assert_fail@plt+0x458>
   11484:	sub	r1, r8, #1
   11488:	str	r1, [sp, #12]
   1148c:	bl	10e2c <__ctype_b_loc@plt>
   11490:	ldr	r1, [sp, #12]
   11494:	ldr	r0, [r0]
   11498:	ldrb	r2, [r9, r1]
   1149c:	lsl	r2, r2, #1
   114a0:	ldrh	r2, [r0, r2]
   114a4:	tst	r2, #1
   114a8:	bne	11570 <__assert_fail@plt+0x630>
   114ac:	mov	r8, r1
   114b0:	cmp	r8, #0
   114b4:	bne	11484 <__assert_fail@plt+0x544>
   114b8:	cmp	r4, #0
   114bc:	bne	11518 <__assert_fail@plt+0x5d8>
   114c0:	mov	r4, #1
   114c4:	strb	r7, [r9]
   114c8:	b	11398 <__assert_fail@plt+0x458>
   114cc:	mov	r0, fp
   114d0:	ldrb	r1, [r2], #1
   114d4:	bl	1129c <__assert_fail@plt+0x35c>
   114d8:	mov	fp, r0
   114dc:	cmp	r2, r8
   114e0:	bne	114cc <__assert_fail@plt+0x58c>
   114e4:	mov	r0, fp
   114e8:	mov	r1, r7
   114ec:	bl	1129c <__assert_fail@plt+0x35c>
   114f0:	ldr	r3, [sp, #8]
   114f4:	mov	fp, r0
   114f8:	ldr	r9, [r6, #8]
   114fc:	cmp	r0, r3
   11500:	bls	11544 <__assert_fail@plt+0x604>
   11504:	ldrb	r2, [r6, #12]
   11508:	cmp	r2, #0
   1150c:	beq	114b8 <__assert_fail@plt+0x578>
   11510:	mov	r8, r4
   11514:	b	114b0 <__assert_fail@plt+0x570>
   11518:	mov	r3, #10
   1151c:	add	r2, r4, #1
   11520:	mov	r1, #1
   11524:	mov	r0, r9
   11528:	strb	r3, [r9, r4]
   1152c:	mov	r4, #0
   11530:	ldr	r3, [pc, #148]	; 115cc <__assert_fail@plt+0x68c>
   11534:	mov	fp, r4
   11538:	ldr	r3, [r3]
   1153c:	bl	10d48 <fwrite_unlocked@plt>
   11540:	b	114e4 <__assert_fail@plt+0x5a4>
   11544:	strb	r7, [r9, r4]
   11548:	add	r4, r4, #1
   1154c:	b	11398 <__assert_fail@plt+0x458>
   11550:	bl	11970 <__assert_fail@plt+0xa30>
   11554:	cmp	r0, #0
   11558:	beq	11404 <__assert_fail@plt+0x4c4>
   1155c:	cmp	r6, #0
   11560:	bne	11410 <__assert_fail@plt+0x4d0>
   11564:	ldr	r3, [sp, #4]
   11568:	ldr	r6, [r3]
   1156c:	b	11404 <__assert_fail@plt+0x4c4>
   11570:	ldr	r3, [pc, #84]	; 115cc <__assert_fail@plt+0x68c>
   11574:	mov	r2, r8
   11578:	mov	r1, #1
   1157c:	mov	r0, r9
   11580:	sub	r4, r4, r8
   11584:	mov	fp, #0
   11588:	ldr	r3, [r3]
   1158c:	bl	10d48 <fwrite_unlocked@plt>
   11590:	mov	r0, #10
   11594:	bl	10f34 <putchar_unlocked@plt>
   11598:	ldr	r3, [r6, #8]
   1159c:	mov	r2, r4
   115a0:	add	r1, r3, r8
   115a4:	mov	r0, r3
   115a8:	bl	10d0c <memmove@plt>
   115ac:	mov	r2, r0
   115b0:	add	r8, r0, r4
   115b4:	b	114dc <__assert_fail@plt+0x59c>
   115b8:			; <UNDEFINED> instruction: 0x000146bc
   115bc:	andeq	r5, r2, r0, asr r1
   115c0:	andeq	r5, r2, r0, ror #2
   115c4:	andeq	r4, r1, r7, ror r6
   115c8:	andeq	r4, r1, r1, ror r6
   115cc:	andeq	r5, r2, r4, asr r1
   115d0:	andeq	r5, r2, r4, ror #2
   115d4:	subs	r5, r0, #0
   115d8:	push	{r7, lr}
   115dc:	sub	sp, sp, #56	; 0x38
   115e0:	ldr	r4, [pc, #520]	; 117f0 <__assert_fail@plt+0x8b0>
   115e4:	beq	1161c <__assert_fail@plt+0x6dc>
   115e8:	mov	r2, #5
   115ec:	mov	r0, #0
   115f0:	ldr	r3, [pc, #508]	; 117f4 <__assert_fail@plt+0x8b4>
   115f4:	ldr	r1, [pc, #508]	; 117f8 <__assert_fail@plt+0x8b8>
   115f8:	ldr	r6, [r3]
   115fc:	bl	10d78 <dcgettext@plt>
   11600:	mov	r2, r0
   11604:	mov	r1, #1
   11608:	ldr	r3, [r4]
   1160c:	mov	r0, r6
   11610:	bl	10ea4 <__fprintf_chk@plt>
   11614:	mov	r0, r5
   11618:	bl	10e38 <exit@plt>
   1161c:	mov	r2, #5
   11620:	ldr	r1, [pc, #468]	; 117fc <__assert_fail@plt+0x8bc>
   11624:	mov	r6, sp
   11628:	bl	10d78 <dcgettext@plt>
   1162c:	ldr	r2, [r4]
   11630:	mov	r1, r0
   11634:	mov	r0, #1
   11638:	bl	10e80 <__printf_chk@plt>
   1163c:	ldr	r4, [pc, #444]	; 11800 <__assert_fail@plt+0x8c0>
   11640:	mov	r2, #5
   11644:	mov	r0, r5
   11648:	ldr	r1, [pc, #436]	; 11804 <__assert_fail@plt+0x8c4>
   1164c:	bl	10d78 <dcgettext@plt>
   11650:	ldr	r7, [pc, #432]	; 11808 <__assert_fail@plt+0x8c8>
   11654:	ldr	r1, [r4]
   11658:	bl	10cdc <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #420]	; 1180c <__assert_fail@plt+0x8cc>
   11664:	mov	r0, r5
   11668:	bl	10d78 <dcgettext@plt>
   1166c:	ldr	r1, [r4]
   11670:	bl	10cdc <fputs_unlocked@plt>
   11674:	mov	r2, #5
   11678:	ldr	r1, [pc, #400]	; 11810 <__assert_fail@plt+0x8d0>
   1167c:	mov	r0, r5
   11680:	bl	10d78 <dcgettext@plt>
   11684:	ldr	r1, [r4]
   11688:	bl	10cdc <fputs_unlocked@plt>
   1168c:	mov	r2, #5
   11690:	ldr	r1, [pc, #380]	; 11814 <__assert_fail@plt+0x8d4>
   11694:	mov	r0, r5
   11698:	bl	10d78 <dcgettext@plt>
   1169c:	ldr	r1, [r4]
   116a0:	bl	10cdc <fputs_unlocked@plt>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #360]	; 11818 <__assert_fail@plt+0x8d8>
   116ac:	mov	r0, r5
   116b0:	bl	10d78 <dcgettext@plt>
   116b4:	ldr	r1, [r4]
   116b8:	bl	10cdc <fputs_unlocked@plt>
   116bc:	mov	r2, #5
   116c0:	ldr	r1, [pc, #340]	; 1181c <__assert_fail@plt+0x8dc>
   116c4:	mov	r0, r5
   116c8:	bl	10d78 <dcgettext@plt>
   116cc:	ldr	r1, [r4]
   116d0:	bl	10cdc <fputs_unlocked@plt>
   116d4:	ldr	lr, [pc, #324]	; 11820 <__assert_fail@plt+0x8e0>
   116d8:	mov	ip, sp
   116dc:	ldm	lr!, {r0, r1, r2, r3}
   116e0:	stmia	ip!, {r0, r1, r2, r3}
   116e4:	ldm	lr!, {r0, r1, r2, r3}
   116e8:	stmia	ip!, {r0, r1, r2, r3}
   116ec:	ldm	lr!, {r0, r1, r2, r3}
   116f0:	stmia	ip!, {r0, r1, r2, r3}
   116f4:	ldm	lr, {r0, r1}
   116f8:	stm	ip, {r0, r1}
   116fc:	ldr	r1, [r6]
   11700:	cmp	r1, #0
   11704:	bne	117a8 <__assert_fail@plt+0x868>
   11708:	ldr	r6, [r6, #4]
   1170c:	mov	r2, #5
   11710:	mov	r0, #0
   11714:	ldr	r7, [pc, #236]	; 11808 <__assert_fail@plt+0x8c8>
   11718:	ldr	r1, [pc, #260]	; 11824 <__assert_fail@plt+0x8e4>
   1171c:	cmp	r6, #0
   11720:	moveq	r6, r7
   11724:	bl	10d78 <dcgettext@plt>
   11728:	mov	r1, r0
   1172c:	ldr	r3, [pc, #244]	; 11828 <__assert_fail@plt+0x8e8>
   11730:	mov	r0, #1
   11734:	ldr	r2, [pc, #240]	; 1182c <__assert_fail@plt+0x8ec>
   11738:	bl	10e80 <__printf_chk@plt>
   1173c:	mov	r1, #0
   11740:	mov	r0, #5
   11744:	bl	10ec8 <setlocale@plt>
   11748:	cmp	r0, #0
   1174c:	bne	117c0 <__assert_fail@plt+0x880>
   11750:	mov	r2, #5
   11754:	ldr	r1, [pc, #212]	; 11830 <__assert_fail@plt+0x8f0>
   11758:	mov	r0, #0
   1175c:	bl	10d78 <dcgettext@plt>
   11760:	mov	r1, r0
   11764:	ldr	r3, [pc, #156]	; 11808 <__assert_fail@plt+0x8c8>
   11768:	mov	r0, #1
   1176c:	ldr	r2, [pc, #180]	; 11828 <__assert_fail@plt+0x8e8>
   11770:	bl	10e80 <__printf_chk@plt>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #180]	; 11834 <__assert_fail@plt+0x8f4>
   1177c:	mov	r0, #0
   11780:	bl	10d78 <dcgettext@plt>
   11784:	ldr	r2, [pc, #172]	; 11838 <__assert_fail@plt+0x8f8>
   11788:	cmp	r6, r7
   1178c:	mov	r1, r0
   11790:	mov	r0, #1
   11794:	ldr	r3, [pc, #160]	; 1183c <__assert_fail@plt+0x8fc>
   11798:	moveq	r3, r2
   1179c:	mov	r2, r6
   117a0:	bl	10e80 <__printf_chk@plt>
   117a4:	b	11614 <__assert_fail@plt+0x6d4>
   117a8:	mov	r0, r7
   117ac:	bl	10ce8 <strcmp@plt>
   117b0:	cmp	r0, #0
   117b4:	beq	11708 <__assert_fail@plt+0x7c8>
   117b8:	add	r6, r6, #8
   117bc:	b	116fc <__assert_fail@plt+0x7bc>
   117c0:	mov	r2, #3
   117c4:	ldr	r1, [pc, #116]	; 11840 <__assert_fail@plt+0x900>
   117c8:	bl	10f1c <strncmp@plt>
   117cc:	cmp	r0, #0
   117d0:	beq	11750 <__assert_fail@plt+0x810>
   117d4:	mov	r2, #5
   117d8:	ldr	r1, [pc, #100]	; 11844 <__assert_fail@plt+0x904>
   117dc:	mov	r0, #0
   117e0:	bl	10d78 <dcgettext@plt>
   117e4:	ldr	r1, [r4]
   117e8:	bl	10cdc <fputs_unlocked@plt>
   117ec:	b	11750 <__assert_fail@plt+0x810>
   117f0:	andeq	r5, r2, r8, ror r1
   117f4:	andeq	r5, r2, r8, asr #2
   117f8:			; <UNDEFINED> instruction: 0x000142b4
   117fc:	ldrdeq	r4, [r1], -fp
   11800:	andeq	r5, r2, r4, asr r1
   11804:	strdeq	r4, [r1], -ip
   11808:	andeq	r4, r1, pc, lsr #5
   1180c:	andeq	r4, r1, r8, lsr r3
   11810:	andeq	r4, r1, r0, ror r3
   11814:			; <UNDEFINED> instruction: 0x000143bb
   11818:	andeq	r4, r1, lr, asr #8
   1181c:	andeq	r4, r1, fp, ror r4
   11820:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11824:			; <UNDEFINED> instruction: 0x000144b1
   11828:	andeq	r4, r1, r8, asr #9
   1182c:	strdeq	r4, [r1], -r0
   11830:	andeq	r4, r1, r9, asr #10
   11834:	andeq	r4, r1, r4, ror #10
   11838:	strdeq	r4, [r1], -r5
   1183c:	muleq	r1, r6, r5
   11840:	strdeq	r4, [r1], -lr
   11844:	andeq	r4, r1, r2, lsl #10
   11848:	ldr	r3, [pc, #4]	; 11854 <__assert_fail@plt+0x914>
   1184c:	str	r0, [r3]
   11850:	bx	lr
   11854:	andeq	r5, r2, r0, ror r1
   11858:	ldr	r3, [pc, #4]	; 11864 <__assert_fail@plt+0x924>
   1185c:	strb	r0, [r3, #4]
   11860:	bx	lr
   11864:	andeq	r5, r2, r0, ror r1
   11868:	ldr	r3, [pc, #176]	; 11920 <__assert_fail@plt+0x9e0>
   1186c:	push	{r0, r1, r4, r5, r6, lr}
   11870:	ldr	r0, [r3]
   11874:	bl	13ef4 <__assert_fail@plt+0x2fb4>
   11878:	cmp	r0, #0
   1187c:	beq	11904 <__assert_fail@plt+0x9c4>
   11880:	ldr	r4, [pc, #156]	; 11924 <__assert_fail@plt+0x9e4>
   11884:	bl	10e5c <__errno_location@plt>
   11888:	mov	r5, r0
   1188c:	ldrb	r6, [r4, #4]
   11890:	cmp	r6, #0
   11894:	beq	118a4 <__assert_fail@plt+0x964>
   11898:	ldr	r3, [r0]
   1189c:	cmp	r3, #32
   118a0:	beq	11904 <__assert_fail@plt+0x9c4>
   118a4:	mov	r2, #5
   118a8:	ldr	r1, [pc, #120]	; 11928 <__assert_fail@plt+0x9e8>
   118ac:	mov	r0, #0
   118b0:	bl	10d78 <dcgettext@plt>
   118b4:	mov	r6, r0
   118b8:	ldr	r0, [r4]
   118bc:	cmp	r0, #0
   118c0:	beq	118f0 <__assert_fail@plt+0x9b0>
   118c4:	ldr	r4, [r5]
   118c8:	bl	12fb0 <__assert_fail@plt+0x2070>
   118cc:	mov	r3, r0
   118d0:	ldr	r2, [pc, #84]	; 1192c <__assert_fail@plt+0x9ec>
   118d4:	mov	r0, #0
   118d8:	str	r6, [sp]
   118dc:	mov	r1, r4
   118e0:	bl	10de4 <error@plt>
   118e4:	ldr	r3, [pc, #68]	; 11930 <__assert_fail@plt+0x9f0>
   118e8:	ldr	r0, [r3]
   118ec:	bl	10d24 <_exit@plt>
   118f0:	mov	r3, r6
   118f4:	ldr	r2, [pc, #56]	; 11934 <__assert_fail@plt+0x9f4>
   118f8:	ldr	r1, [r5]
   118fc:	bl	10de4 <error@plt>
   11900:	b	118e4 <__assert_fail@plt+0x9a4>
   11904:	ldr	r3, [pc, #44]	; 11938 <__assert_fail@plt+0x9f8>
   11908:	ldr	r0, [r3]
   1190c:	bl	13ef4 <__assert_fail@plt+0x2fb4>
   11910:	cmp	r0, #0
   11914:	bne	118e4 <__assert_fail@plt+0x9a4>
   11918:	add	sp, sp, #8
   1191c:	pop	{r4, r5, r6, pc}
   11920:	andeq	r5, r2, r4, asr r1
   11924:	andeq	r5, r2, r0, ror r1
   11928:	andeq	r4, r1, r7, ror #12
   1192c:	andeq	r4, r1, r3, ror r6
   11930:	strdeq	r5, [r2], -r0
   11934:	andeq	r4, r1, r7, ror r6
   11938:	andeq	r5, r2, r8, asr #2
   1193c:	b	10cf4 <posix_fadvise64@plt>
   11940:	cmp	r0, #0
   11944:	bxeq	lr
   11948:	push	{r0, r1, r2, r3, r4, lr}
   1194c:	mov	r4, r1
   11950:	bl	10e8c <fileno@plt>
   11954:	mov	r2, #0
   11958:	mov	r3, #0
   1195c:	strd	r2, [sp]
   11960:	str	r4, [sp, #8]
   11964:	bl	10cf4 <posix_fadvise64@plt>
   11968:	add	sp, sp, #16
   1196c:	pop	{r4, pc}
   11970:	push	{r0, r1, r2, r4, r5, lr}
   11974:	mov	r4, r0
   11978:	bl	10e8c <fileno@plt>
   1197c:	cmp	r0, #0
   11980:	mov	r0, r4
   11984:	bge	11994 <__assert_fail@plt+0xa54>
   11988:	add	sp, sp, #12
   1198c:	pop	{r4, r5, lr}
   11990:	b	10eb0 <fclose@plt>
   11994:	bl	10e08 <__freading@plt>
   11998:	cmp	r0, #0
   1199c:	bne	119d8 <__assert_fail@plt+0xa98>
   119a0:	mov	r0, r4
   119a4:	bl	11a18 <__assert_fail@plt+0xad8>
   119a8:	cmp	r0, #0
   119ac:	bne	11a0c <__assert_fail@plt+0xacc>
   119b0:	mov	r5, #0
   119b4:	mov	r0, r4
   119b8:	bl	10eb0 <fclose@plt>
   119bc:	cmp	r5, #0
   119c0:	beq	119d0 <__assert_fail@plt+0xa90>
   119c4:	bl	10e5c <__errno_location@plt>
   119c8:	str	r5, [r0]
   119cc:	mvn	r0, #0
   119d0:	add	sp, sp, #12
   119d4:	pop	{r4, r5, pc}
   119d8:	mov	r0, r4
   119dc:	bl	10e8c <fileno@plt>
   119e0:	mov	r3, #1
   119e4:	mov	r2, #0
   119e8:	str	r3, [sp]
   119ec:	mov	r3, #0
   119f0:	bl	10da8 <lseek64@plt>
   119f4:	mvn	r3, #0
   119f8:	mvn	r2, #0
   119fc:	cmp	r1, r3
   11a00:	cmpeq	r0, r2
   11a04:	bne	119a0 <__assert_fail@plt+0xa60>
   11a08:	b	119b0 <__assert_fail@plt+0xa70>
   11a0c:	bl	10e5c <__errno_location@plt>
   11a10:	ldr	r5, [r0]
   11a14:	b	119b4 <__assert_fail@plt+0xa74>
   11a18:	push	{r0, r1, r4, lr}
   11a1c:	subs	r4, r0, #0
   11a20:	bne	11a34 <__assert_fail@plt+0xaf4>
   11a24:	mov	r0, r4
   11a28:	add	sp, sp, #8
   11a2c:	pop	{r4, lr}
   11a30:	b	10d00 <fflush@plt>
   11a34:	bl	10e08 <__freading@plt>
   11a38:	cmp	r0, #0
   11a3c:	beq	11a24 <__assert_fail@plt+0xae4>
   11a40:	ldr	r3, [r4]
   11a44:	tst	r3, #256	; 0x100
   11a48:	beq	11a24 <__assert_fail@plt+0xae4>
   11a4c:	mov	r3, #1
   11a50:	mov	r2, #0
   11a54:	mov	r0, r4
   11a58:	str	r3, [sp]
   11a5c:	mov	r3, #0
   11a60:	bl	11a68 <__assert_fail@plt+0xb28>
   11a64:	b	11a24 <__assert_fail@plt+0xae4>
   11a68:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11a6c:	mov	r4, r0
   11a70:	ldmib	r0, {ip, lr}
   11a74:	ldr	r8, [sp, #32]
   11a78:	cmp	lr, ip
   11a7c:	bne	11aec <__assert_fail@plt+0xbac>
   11a80:	ldr	ip, [r0, #16]
   11a84:	ldr	lr, [r0, #20]
   11a88:	cmp	lr, ip
   11a8c:	bne	11aec <__assert_fail@plt+0xbac>
   11a90:	ldr	r5, [r0, #36]	; 0x24
   11a94:	cmp	r5, #0
   11a98:	bne	11aec <__assert_fail@plt+0xbac>
   11a9c:	mov	r6, r2
   11aa0:	mov	r7, r3
   11aa4:	bl	10e8c <fileno@plt>
   11aa8:	mov	r2, r6
   11aac:	mov	r3, r7
   11ab0:	str	r8, [sp]
   11ab4:	bl	10da8 <lseek64@plt>
   11ab8:	mvn	r3, #0
   11abc:	mvn	r2, #0
   11ac0:	cmp	r1, r3
   11ac4:	cmpeq	r0, r2
   11ac8:	mvneq	r0, #0
   11acc:	beq	11ae4 <__assert_fail@plt+0xba4>
   11ad0:	ldr	r3, [r4]
   11ad4:	strd	r0, [r4, #80]	; 0x50
   11ad8:	mov	r0, r5
   11adc:	bic	r3, r3, #16
   11ae0:	str	r3, [r4]
   11ae4:	add	sp, sp, #8
   11ae8:	pop	{r4, r5, r6, r7, r8, pc}
   11aec:	mov	r0, r4
   11af0:	str	r8, [sp, #32]
   11af4:	add	sp, sp, #8
   11af8:	pop	{r4, r5, r6, r7, r8, lr}
   11afc:	b	10ebc <fseeko64@plt>
   11b00:	push	{r4, r5, r6, lr}
   11b04:	subs	r4, r0, #0
   11b08:	bne	11b20 <__assert_fail@plt+0xbe0>
   11b0c:	ldr	r3, [pc, #124]	; 11b90 <__assert_fail@plt+0xc50>
   11b10:	ldr	r0, [pc, #124]	; 11b94 <__assert_fail@plt+0xc54>
   11b14:	ldr	r1, [r3]
   11b18:	bl	10f10 <fputs@plt>
   11b1c:	bl	10f28 <abort@plt>
   11b20:	mov	r1, #47	; 0x2f
   11b24:	bl	10ed4 <strrchr@plt>
   11b28:	subs	r6, r0, #0
   11b2c:	beq	11b7c <__assert_fail@plt+0xc3c>
   11b30:	add	r5, r6, #1
   11b34:	sub	r3, r5, r4
   11b38:	cmp	r3, #6
   11b3c:	ble	11b7c <__assert_fail@plt+0xc3c>
   11b40:	mov	r2, #7
   11b44:	ldr	r1, [pc, #76]	; 11b98 <__assert_fail@plt+0xc58>
   11b48:	sub	r0, r6, #6
   11b4c:	bl	10f1c <strncmp@plt>
   11b50:	cmp	r0, #0
   11b54:	bne	11b7c <__assert_fail@plt+0xc3c>
   11b58:	mov	r2, #3
   11b5c:	ldr	r1, [pc, #56]	; 11b9c <__assert_fail@plt+0xc5c>
   11b60:	mov	r0, r5
   11b64:	bl	10f1c <strncmp@plt>
   11b68:	cmp	r0, #0
   11b6c:	ldreq	r3, [pc, #44]	; 11ba0 <__assert_fail@plt+0xc60>
   11b70:	addeq	r4, r6, #4
   11b74:	movne	r4, r5
   11b78:	streq	r4, [r3]
   11b7c:	ldr	r3, [pc, #32]	; 11ba4 <__assert_fail@plt+0xc64>
   11b80:	str	r4, [r3]
   11b84:	ldr	r3, [pc, #28]	; 11ba8 <__assert_fail@plt+0xc68>
   11b88:	str	r4, [r3]
   11b8c:	pop	{r4, r5, r6, pc}
   11b90:	andeq	r5, r2, r8, asr #2
   11b94:	andeq	r4, r1, sl, ror r6
   11b98:			; <UNDEFINED> instruction: 0x000146b2
   11b9c:			; <UNDEFINED> instruction: 0x000146ba
   11ba0:	andeq	r5, r2, r8, lsr r1
   11ba4:	andeq	r5, r2, r8, ror r1
   11ba8:	andeq	r5, r2, ip, lsr r1
   11bac:	push	{r4, lr}
   11bb0:	mov	r2, #48	; 0x30
   11bb4:	mov	r4, r1
   11bb8:	mov	r1, #0
   11bbc:	bl	10e74 <memset@plt>
   11bc0:	cmp	r4, #10
   11bc4:	bne	11bcc <__assert_fail@plt+0xc8c>
   11bc8:	bl	10f28 <abort@plt>
   11bcc:	str	r4, [r0]
   11bd0:	pop	{r4, pc}
   11bd4:	push	{r4, r5, r6, lr}
   11bd8:	mov	r2, #5
   11bdc:	mov	r6, r0
   11be0:	mov	r5, r1
   11be4:	mov	r1, r0
   11be8:	mov	r0, #0
   11bec:	bl	10d78 <dcgettext@plt>
   11bf0:	cmp	r6, r0
   11bf4:	mov	r4, r0
   11bf8:	bne	11c68 <__assert_fail@plt+0xd28>
   11bfc:	bl	13fdc <__assert_fail@plt+0x309c>
   11c00:	ldrb	r3, [r0]
   11c04:	bic	r3, r3, #32
   11c08:	cmp	r3, #85	; 0x55
   11c0c:	bne	11c70 <__assert_fail@plt+0xd30>
   11c10:	ldrb	r3, [r0, #1]
   11c14:	bic	r3, r3, #32
   11c18:	cmp	r3, #84	; 0x54
   11c1c:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c20:	ldrb	r3, [r0, #2]
   11c24:	bic	r3, r3, #32
   11c28:	cmp	r3, #70	; 0x46
   11c2c:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c30:	ldrb	r3, [r0, #3]
   11c34:	cmp	r3, #45	; 0x2d
   11c38:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c3c:	ldrb	r3, [r0, #4]
   11c40:	cmp	r3, #56	; 0x38
   11c44:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c48:	ldrb	r3, [r0, #5]
   11c4c:	cmp	r3, #0
   11c50:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c54:	ldrb	r2, [r4]
   11c58:	ldr	r3, [pc, #144]	; 11cf0 <__assert_fail@plt+0xdb0>
   11c5c:	ldr	r4, [pc, #144]	; 11cf4 <__assert_fail@plt+0xdb4>
   11c60:	cmp	r2, #96	; 0x60
   11c64:	movne	r4, r3
   11c68:	mov	r0, r4
   11c6c:	pop	{r4, r5, r6, pc}
   11c70:	cmp	r3, #71	; 0x47
   11c74:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c78:	ldrb	r3, [r0, #1]
   11c7c:	bic	r3, r3, #32
   11c80:	cmp	r3, #66	; 0x42
   11c84:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c88:	ldrb	r3, [r0, #2]
   11c8c:	cmp	r3, #49	; 0x31
   11c90:	bne	11ce0 <__assert_fail@plt+0xda0>
   11c94:	ldrb	r3, [r0, #3]
   11c98:	cmp	r3, #56	; 0x38
   11c9c:	bne	11ce0 <__assert_fail@plt+0xda0>
   11ca0:	ldrb	r3, [r0, #4]
   11ca4:	cmp	r3, #48	; 0x30
   11ca8:	bne	11ce0 <__assert_fail@plt+0xda0>
   11cac:	ldrb	r3, [r0, #5]
   11cb0:	cmp	r3, #51	; 0x33
   11cb4:	bne	11ce0 <__assert_fail@plt+0xda0>
   11cb8:	ldrb	r3, [r0, #6]
   11cbc:	cmp	r3, #48	; 0x30
   11cc0:	bne	11ce0 <__assert_fail@plt+0xda0>
   11cc4:	ldrb	r3, [r0, #7]
   11cc8:	cmp	r3, #0
   11ccc:	bne	11ce0 <__assert_fail@plt+0xda0>
   11cd0:	ldrb	r2, [r4]
   11cd4:	ldr	r3, [pc, #28]	; 11cf8 <__assert_fail@plt+0xdb8>
   11cd8:	ldr	r4, [pc, #28]	; 11cfc <__assert_fail@plt+0xdbc>
   11cdc:	b	11c60 <__assert_fail@plt+0xd20>
   11ce0:	ldr	r4, [pc, #24]	; 11d00 <__assert_fail@plt+0xdc0>
   11ce4:	cmp	r5, #9
   11ce8:	ldr	r3, [pc, #20]	; 11d04 <__assert_fail@plt+0xdc4>
   11cec:	b	11c64 <__assert_fail@plt+0xd24>
   11cf0:	andeq	r4, r1, r6, lsl r7
   11cf4:	andeq	r4, r1, r1, lsr #14
   11cf8:	andeq	r4, r1, sl, lsl r7
   11cfc:	andeq	r4, r1, sp, lsl r7
   11d00:	andeq	r4, r1, r4, lsl r7
   11d04:	andeq	r4, r1, r5, lsr #14
   11d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d0c:	sub	sp, sp, #108	; 0x6c
   11d10:	mov	r8, r0
   11d14:	mov	r5, r1
   11d18:	mov	r6, #0
   11d1c:	str	r3, [sp, #40]	; 0x28
   11d20:	str	r2, [sp, #48]	; 0x30
   11d24:	ldr	sl, [sp, #144]	; 0x90
   11d28:	bl	10db4 <__ctype_get_mb_cur_max@plt>
   11d2c:	ldr	r3, [sp, #148]	; 0x94
   11d30:	str	r6, [sp, #24]
   11d34:	str	r6, [sp, #32]
   11d38:	str	r6, [sp, #44]	; 0x2c
   11d3c:	str	r6, [sp, #52]	; 0x34
   11d40:	ubfx	r7, r3, #1, #1
   11d44:	mov	r3, #1
   11d48:	str	r6, [sp, #60]	; 0x3c
   11d4c:	str	r3, [sp, #72]	; 0x48
   11d50:	str	r0, [sp, #76]	; 0x4c
   11d54:	cmp	sl, #10
   11d58:	ldrls	pc, [pc, sl, lsl #2]
   11d5c:	b	11fa0 <__assert_fail@plt+0x1060>
   11d60:	andeq	r1, r1, ip, lsl #27
   11d64:			; <UNDEFINED> instruction: 0x00011fb8
   11d68:	andeq	r1, r1, ip, lsr pc
   11d6c:	andeq	r1, r1, r4, asr pc
   11d70:	andeq	r1, r1, r4, lsr #30
   11d74:	andeq	r1, r1, ip, ror lr
   11d78:	andeq	r1, r1, ip, asr lr
   11d7c:	andeq	r1, r1, r4, lsr #31
   11d80:	andeq	r1, r1, ip, lsr #29
   11d84:	andeq	r1, r1, ip, lsr #29
   11d88:	andeq	r1, r1, ip, lsr #29
   11d8c:	mov	r4, sl
   11d90:	mov	r7, #0
   11d94:	mov	r9, r5
   11d98:	mov	r3, #0
   11d9c:	str	r6, [sp, #68]	; 0x44
   11da0:	str	r3, [sp, #28]
   11da4:	ldr	r3, [sp, #40]	; 0x28
   11da8:	cmn	r3, #1
   11dac:	bne	1294c <__assert_fail@plt+0x1a0c>
   11db0:	ldr	r2, [sp, #28]
   11db4:	ldr	r3, [sp, #48]	; 0x30
   11db8:	ldrb	r3, [r3, r2]
   11dbc:	adds	r3, r3, #0
   11dc0:	movne	r3, #1
   11dc4:	str	r3, [sp, #36]	; 0x24
   11dc8:	ldr	r3, [sp, #36]	; 0x24
   11dcc:	cmp	r3, #0
   11dd0:	bne	11fdc <__assert_fail@plt+0x109c>
   11dd4:	sub	r3, sl, #2
   11dd8:	cmp	r4, #0
   11ddc:	clz	r3, r3
   11de0:	movne	r2, #0
   11de4:	lsr	r3, r3, #5
   11de8:	andeq	r2, r3, r7
   11dec:	cmp	r2, #0
   11df0:	bne	121a0 <__assert_fail@plt+0x1260>
   11df4:	eor	r7, r7, #1
   11df8:	ands	r3, r3, r7
   11dfc:	beq	129c4 <__assert_fail@plt+0x1a84>
   11e00:	ldr	r2, [sp, #68]	; 0x44
   11e04:	cmp	r2, #0
   11e08:	beq	1298c <__assert_fail@plt+0x1a4c>
   11e0c:	ldr	r3, [sp, #72]	; 0x48
   11e10:	cmp	r3, #0
   11e14:	beq	12960 <__assert_fail@plt+0x1a20>
   11e18:	ldr	r2, [sp, #48]	; 0x30
   11e1c:	ldr	r3, [sp, #160]	; 0xa0
   11e20:	ldr	r1, [sp, #60]	; 0x3c
   11e24:	str	r3, [sp, #16]
   11e28:	ldr	r3, [sp, #156]	; 0x9c
   11e2c:	str	r3, [sp, #12]
   11e30:	ldr	r3, [sp, #152]	; 0x98
   11e34:	str	r3, [sp, #8]
   11e38:	ldr	r3, [sp, #148]	; 0x94
   11e3c:	str	r3, [sp, #4]
   11e40:	mov	r3, #5
   11e44:	str	r3, [sp]
   11e48:	ldr	r3, [sp, #40]	; 0x28
   11e4c:	mov	r0, r8
   11e50:	bl	11d08 <__assert_fail@plt+0xdc8>
   11e54:	mov	r4, r0
   11e58:	b	129b8 <__assert_fail@plt+0x1a78>
   11e5c:	ldr	r3, [pc, #2948]	; 129e8 <__assert_fail@plt+0x1aa8>
   11e60:	mov	r7, #1
   11e64:	mov	r4, #0
   11e68:	mov	sl, #5
   11e6c:	str	r7, [sp, #24]
   11e70:	str	r7, [sp, #32]
   11e74:	str	r3, [sp, #44]	; 0x2c
   11e78:	b	11d94 <__assert_fail@plt+0xe54>
   11e7c:	cmp	r7, #0
   11e80:	bne	11fc4 <__assert_fail@plt+0x1084>
   11e84:	cmp	r5, #0
   11e88:	mov	r4, #1
   11e8c:	movne	r3, #34	; 0x22
   11e90:	strbne	r3, [r8]
   11e94:	mov	r3, #1
   11e98:	str	r3, [sp, #24]
   11e9c:	str	r3, [sp, #32]
   11ea0:	ldr	r3, [pc, #2880]	; 129e8 <__assert_fail@plt+0x1aa8>
   11ea4:	str	r3, [sp, #44]	; 0x2c
   11ea8:	b	11d94 <__assert_fail@plt+0xe54>
   11eac:	cmp	sl, #10
   11eb0:	beq	11ed4 <__assert_fail@plt+0xf94>
   11eb4:	mov	r1, sl
   11eb8:	ldr	r0, [pc, #2860]	; 129ec <__assert_fail@plt+0x1aac>
   11ebc:	bl	11bd4 <__assert_fail@plt+0xc94>
   11ec0:	mov	r1, sl
   11ec4:	str	r0, [sp, #156]	; 0x9c
   11ec8:	ldr	r0, [pc, #2848]	; 129f0 <__assert_fail@plt+0x1ab0>
   11ecc:	bl	11bd4 <__assert_fail@plt+0xc94>
   11ed0:	str	r0, [sp, #160]	; 0xa0
   11ed4:	cmp	r7, #0
   11ed8:	moveq	r4, r7
   11edc:	beq	11ef4 <__assert_fail@plt+0xfb4>
   11ee0:	mov	r4, #0
   11ee4:	b	11f04 <__assert_fail@plt+0xfc4>
   11ee8:	cmp	r5, r4
   11eec:	strbhi	r3, [r8, r4]
   11ef0:	add	r4, r4, #1
   11ef4:	ldr	r3, [sp, #156]	; 0x9c
   11ef8:	ldrb	r3, [r3, r4]
   11efc:	cmp	r3, #0
   11f00:	bne	11ee8 <__assert_fail@plt+0xfa8>
   11f04:	ldr	r0, [sp, #160]	; 0xa0
   11f08:	bl	10e44 <strlen@plt>
   11f0c:	ldr	r3, [sp, #160]	; 0xa0
   11f10:	str	r0, [sp, #32]
   11f14:	str	r3, [sp, #44]	; 0x2c
   11f18:	mov	r3, #1
   11f1c:	str	r3, [sp, #24]
   11f20:	b	11d94 <__assert_fail@plt+0xe54>
   11f24:	mov	r3, #1
   11f28:	cmp	r7, #0
   11f2c:	streq	r3, [sp, #24]
   11f30:	beq	11f74 <__assert_fail@plt+0x1034>
   11f34:	str	r3, [sp, #32]
   11f38:	b	11f60 <__assert_fail@plt+0x1020>
   11f3c:	cmp	r7, #0
   11f40:	beq	11f74 <__assert_fail@plt+0x1034>
   11f44:	mov	r3, #1
   11f48:	str	r3, [sp, #32]
   11f4c:	ldr	r3, [pc, #2716]	; 129f0 <__assert_fail@plt+0x1ab0>
   11f50:	b	11fd4 <__assert_fail@plt+0x1094>
   11f54:	mov	r7, #1
   11f58:	str	r7, [sp, #24]
   11f5c:	str	r7, [sp, #32]
   11f60:	ldr	r3, [pc, #2696]	; 129f0 <__assert_fail@plt+0x1ab0>
   11f64:	mov	r4, #0
   11f68:	str	r3, [sp, #44]	; 0x2c
   11f6c:	mov	sl, #2
   11f70:	b	11d94 <__assert_fail@plt+0xe54>
   11f74:	cmp	r5, #0
   11f78:	movne	r3, #39	; 0x27
   11f7c:	movne	r7, #0
   11f80:	strbne	r3, [r8]
   11f84:	moveq	r7, r5
   11f88:	mov	r3, #1
   11f8c:	mov	r4, #1
   11f90:	str	r3, [sp, #32]
   11f94:	ldr	r3, [pc, #2644]	; 129f0 <__assert_fail@plt+0x1ab0>
   11f98:	str	r3, [sp, #44]	; 0x2c
   11f9c:	b	11f6c <__assert_fail@plt+0x102c>
   11fa0:	bl	10f28 <abort@plt>
   11fa4:	mov	r3, #1
   11fa8:	mov	r7, #0
   11fac:	str	r3, [sp, #24]
   11fb0:	mov	r4, #0
   11fb4:	b	11d94 <__assert_fail@plt+0xe54>
   11fb8:	mov	r7, #1
   11fbc:	str	sl, [sp, #32]
   11fc0:	b	11f60 <__assert_fail@plt+0x1020>
   11fc4:	mov	r3, #1
   11fc8:	str	r7, [sp, #24]
   11fcc:	str	r3, [sp, #32]
   11fd0:	ldr	r3, [pc, #2576]	; 129e8 <__assert_fail@plt+0x1aa8>
   11fd4:	str	r3, [sp, #44]	; 0x2c
   11fd8:	b	11fb0 <__assert_fail@plt+0x1070>
   11fdc:	ldr	fp, [sp, #24]
   11fe0:	ldr	r3, [sp, #32]
   11fe4:	cmp	sl, #2
   11fe8:	moveq	fp, #0
   11fec:	andne	fp, fp, #1
   11ff0:	adds	r5, r3, #0
   11ff4:	movne	r5, #1
   11ff8:	ands	r3, fp, r5
   11ffc:	str	r3, [sp, #64]	; 0x40
   12000:	beq	120d0 <__assert_fail@plt+0x1190>
   12004:	ldr	r3, [sp, #28]
   12008:	ldr	r2, [sp, #32]
   1200c:	cmp	r2, #1
   12010:	add	r6, r3, r2
   12014:	mov	r3, r2
   12018:	ldr	r2, [sp, #40]	; 0x28
   1201c:	movls	r3, #0
   12020:	movhi	r3, #1
   12024:	cmn	r2, #1
   12028:	movne	r3, #0
   1202c:	cmp	r3, #0
   12030:	beq	12040 <__assert_fail@plt+0x1100>
   12034:	ldr	r0, [sp, #48]	; 0x30
   12038:	bl	10e44 <strlen@plt>
   1203c:	str	r0, [sp, #40]	; 0x28
   12040:	ldr	r3, [sp, #40]	; 0x28
   12044:	cmp	r6, r3
   12048:	bhi	120c8 <__assert_fail@plt+0x1188>
   1204c:	ldr	r0, [sp, #28]
   12050:	ldr	r2, [sp, #32]
   12054:	ldr	r3, [sp, #48]	; 0x30
   12058:	ldr	r1, [sp, #44]	; 0x2c
   1205c:	add	r0, r3, r0
   12060:	bl	10d54 <memcmp@plt>
   12064:	cmp	r0, #0
   12068:	bne	120c8 <__assert_fail@plt+0x1188>
   1206c:	cmp	r7, #0
   12070:	beq	120d0 <__assert_fail@plt+0x1190>
   12074:	str	r7, [sp, #24]
   12078:	ldr	r3, [sp, #24]
   1207c:	mov	r1, r9
   12080:	ldr	r2, [sp, #48]	; 0x30
   12084:	cmp	sl, #2
   12088:	movne	r3, #0
   1208c:	andeq	r3, r3, #1
   12090:	cmp	r3, #0
   12094:	ldr	r3, [sp, #160]	; 0xa0
   12098:	movne	sl, #4
   1209c:	str	sl, [sp]
   120a0:	str	r3, [sp, #16]
   120a4:	ldr	r3, [sp, #156]	; 0x9c
   120a8:	str	r3, [sp, #12]
   120ac:	mov	r3, #0
   120b0:	str	r3, [sp, #8]
   120b4:	ldr	r3, [sp, #148]	; 0x94
   120b8:	bic	r3, r3, #2
   120bc:	str	r3, [sp, #4]
   120c0:	ldr	r3, [sp, #40]	; 0x28
   120c4:	b	11e4c <__assert_fail@plt+0xf0c>
   120c8:	mov	r3, #0
   120cc:	str	r3, [sp, #64]	; 0x40
   120d0:	ldr	r2, [sp, #28]
   120d4:	ldr	r3, [sp, #48]	; 0x30
   120d8:	add	r3, r3, r2
   120dc:	str	r3, [sp, #80]	; 0x50
   120e0:	ldr	r3, [sp, #48]	; 0x30
   120e4:	ldrb	r6, [r3, r2]
   120e8:	cmp	r6, #58	; 0x3a
   120ec:	bhi	12250 <__assert_fail@plt+0x1310>
   120f0:	cmp	r6, #43	; 0x2b
   120f4:	bcs	12410 <__assert_fail@plt+0x14d0>
   120f8:	cmp	r6, #32
   120fc:	beq	12464 <__assert_fail@plt+0x1524>
   12100:	bhi	121a8 <__assert_fail@plt+0x1268>
   12104:	cmp	r6, #9
   12108:	beq	1260c <__assert_fail@plt+0x16cc>
   1210c:	bhi	1216c <__assert_fail@plt+0x122c>
   12110:	cmp	r6, #7
   12114:	beq	1261c <__assert_fail@plt+0x16dc>
   12118:	bhi	12638 <__assert_fail@plt+0x16f8>
   1211c:	cmp	r6, #0
   12120:	beq	12480 <__assert_fail@plt+0x1540>
   12124:	ldr	r3, [sp, #76]	; 0x4c
   12128:	cmp	r3, #1
   1212c:	bne	12684 <__assert_fail@plt+0x1744>
   12130:	bl	10e2c <__ctype_b_loc@plt>
   12134:	ldr	r2, [r0]
   12138:	sxth	r3, r6
   1213c:	lsl	r3, r3, #1
   12140:	ldrh	r5, [r2, r3]
   12144:	ldr	r3, [sp, #76]	; 0x4c
   12148:	ubfx	r5, r5, #14, #1
   1214c:	str	r3, [sp, #56]	; 0x38
   12150:	ldr	r3, [sp, #24]
   12154:	eor	fp, r5, #1
   12158:	and	fp, fp, r3
   1215c:	ands	fp, fp, #255	; 0xff
   12160:	beq	12340 <__assert_fail@plt+0x1400>
   12164:	mov	r5, #0
   12168:	b	12730 <__assert_fail@plt+0x17f0>
   1216c:	cmp	r6, #11
   12170:	beq	12640 <__assert_fail@plt+0x1700>
   12174:	bcc	12614 <__assert_fail@plt+0x16d4>
   12178:	cmp	r6, #12
   1217c:	beq	12648 <__assert_fail@plt+0x1708>
   12180:	cmp	r6, #13
   12184:	moveq	r3, #114	; 0x72
   12188:	bne	12124 <__assert_fail@plt+0x11e4>
   1218c:	cmp	sl, #2
   12190:	movne	r2, #0
   12194:	andeq	r2, r7, #1
   12198:	cmp	r2, #0
   1219c:	beq	12620 <__assert_fail@plt+0x16e0>
   121a0:	mov	sl, #2
   121a4:	b	12078 <__assert_fail@plt+0x1138>
   121a8:	cmp	r6, #37	; 0x25
   121ac:	beq	12410 <__assert_fail@plt+0x14d0>
   121b0:	bhi	121c4 <__assert_fail@plt+0x1284>
   121b4:	cmp	r6, #35	; 0x23
   121b8:	beq	12458 <__assert_fail@plt+0x1518>
   121bc:	mov	r5, #0
   121c0:	b	12468 <__assert_fail@plt+0x1528>
   121c4:	cmp	r6, #39	; 0x27
   121c8:	bne	121bc <__assert_fail@plt+0x127c>
   121cc:	cmp	sl, #2
   121d0:	ldrne	r5, [sp, #36]	; 0x24
   121d4:	movne	r3, r5
   121d8:	strne	r3, [sp, #68]	; 0x44
   121dc:	bne	1255c <__assert_fail@plt+0x161c>
   121e0:	cmp	r7, #0
   121e4:	bne	12078 <__assert_fail@plt+0x1138>
   121e8:	ldr	r3, [sp, #60]	; 0x3c
   121ec:	cmp	r9, #0
   121f0:	clz	r3, r3
   121f4:	lsr	r3, r3, #5
   121f8:	moveq	r3, #0
   121fc:	cmp	r3, #0
   12200:	strne	r9, [sp, #60]	; 0x3c
   12204:	movne	r9, #0
   12208:	bne	12218 <__assert_fail@plt+0x12d8>
   1220c:	cmp	r9, r4
   12210:	movhi	r3, #39	; 0x27
   12214:	strbhi	r3, [r8, r4]
   12218:	add	r3, r4, #1
   1221c:	ldr	r5, [sp, #36]	; 0x24
   12220:	mov	fp, #0
   12224:	cmp	r3, r9
   12228:	movcc	r2, #92	; 0x5c
   1222c:	str	fp, [sp, #52]	; 0x34
   12230:	strbcc	r2, [r8, r3]
   12234:	add	r3, r4, #2
   12238:	add	r4, r4, #3
   1223c:	cmp	r3, r9
   12240:	str	r5, [sp, #68]	; 0x44
   12244:	movcc	r2, #39	; 0x27
   12248:	strbcc	r2, [r8, r3]
   1224c:	b	12340 <__assert_fail@plt+0x1400>
   12250:	cmp	r6, #94	; 0x5e
   12254:	beq	121bc <__assert_fail@plt+0x127c>
   12258:	bhi	12418 <__assert_fail@plt+0x14d8>
   1225c:	cmp	r6, #90	; 0x5a
   12260:	bhi	12404 <__assert_fail@plt+0x14c4>
   12264:	cmp	r6, #65	; 0x41
   12268:	bcs	12410 <__assert_fail@plt+0x14d0>
   1226c:	cmp	r6, #62	; 0x3e
   12270:	bls	121bc <__assert_fail@plt+0x127c>
   12274:	cmp	r6, #63	; 0x3f
   12278:	bne	12124 <__assert_fail@plt+0x11e4>
   1227c:	cmp	sl, #2
   12280:	beq	12564 <__assert_fail@plt+0x1624>
   12284:	cmp	sl, #5
   12288:	movne	fp, #0
   1228c:	bne	12934 <__assert_fail@plt+0x19f4>
   12290:	ldr	r3, [sp, #148]	; 0x94
   12294:	tst	r3, #4
   12298:	beq	1256c <__assert_fail@plt+0x162c>
   1229c:	ldr	r3, [sp, #28]
   122a0:	add	r2, r3, #2
   122a4:	ldr	r3, [sp, #40]	; 0x28
   122a8:	cmp	r2, r3
   122ac:	bcs	1256c <__assert_fail@plt+0x162c>
   122b0:	ldr	r1, [sp, #28]
   122b4:	ldr	r3, [sp, #48]	; 0x30
   122b8:	add	r3, r3, r1
   122bc:	ldrb	r1, [r3, #1]
   122c0:	cmp	r1, #63	; 0x3f
   122c4:	bne	1256c <__assert_fail@plt+0x162c>
   122c8:	ldr	r3, [sp, #48]	; 0x30
   122cc:	ldrb	r6, [r3, r2]
   122d0:	sub	r3, r6, #33	; 0x21
   122d4:	uxtb	r3, r3
   122d8:	cmp	r3, #29
   122dc:	bhi	1293c <__assert_fail@plt+0x19fc>
   122e0:	ldr	r0, [pc, #1804]	; 129f4 <__assert_fail@plt+0x1ab4>
   122e4:	mov	r5, #1
   122e8:	ands	r5, r0, r5, lsl r3
   122ec:	beq	12944 <__assert_fail@plt+0x1a04>
   122f0:	cmp	r7, #0
   122f4:	bne	12078 <__assert_fail@plt+0x1138>
   122f8:	cmp	r9, r4
   122fc:	add	r3, r4, #1
   12300:	str	r2, [sp, #28]
   12304:	mov	r5, #0
   12308:	strbhi	r1, [r8, r4]
   1230c:	cmp	r9, r3
   12310:	mov	fp, r5
   12314:	movhi	r1, #34	; 0x22
   12318:	strbhi	r1, [r8, r3]
   1231c:	add	r3, r4, #2
   12320:	cmp	r9, r3
   12324:	movhi	r1, #34	; 0x22
   12328:	strbhi	r1, [r8, r3]
   1232c:	add	r3, r4, #3
   12330:	add	r4, r4, #4
   12334:	cmp	r9, r3
   12338:	movhi	r1, #63	; 0x3f
   1233c:	strbhi	r1, [r8, r3]
   12340:	ldr	r3, [sp, #24]
   12344:	eor	r3, r3, #1
   12348:	cmp	sl, #2
   1234c:	orreq	r3, r3, #1
   12350:	eor	r3, r3, #1
   12354:	orr	r3, r7, r3
   12358:	tst	r3, #255	; 0xff
   1235c:	beq	12388 <__assert_fail@plt+0x1448>
   12360:	ldr	r3, [sp, #152]	; 0x98
   12364:	cmp	r3, #0
   12368:	beq	12388 <__assert_fail@plt+0x1448>
   1236c:	ldr	r1, [sp, #152]	; 0x98
   12370:	ubfx	r2, r6, #5, #8
   12374:	and	r3, r6, #31
   12378:	ldr	r2, [r1, r2, lsl #2]
   1237c:	lsr	r3, r2, r3
   12380:	tst	r3, #1
   12384:	bne	12394 <__assert_fail@plt+0x1454>
   12388:	ldr	r3, [sp, #64]	; 0x40
   1238c:	cmp	r3, #0
   12390:	beq	1258c <__assert_fail@plt+0x164c>
   12394:	sub	r3, sl, #2
   12398:	cmp	r7, #0
   1239c:	clz	r3, r3
   123a0:	lsr	r3, r3, #5
   123a4:	bne	12078 <__assert_fail@plt+0x1138>
   123a8:	ldr	r2, [sp, #52]	; 0x34
   123ac:	eor	r2, r2, #1
   123b0:	ands	r3, r3, r2
   123b4:	beq	123ec <__assert_fail@plt+0x14ac>
   123b8:	cmp	r9, r4
   123bc:	str	r3, [sp, #52]	; 0x34
   123c0:	movhi	r2, #39	; 0x27
   123c4:	strbhi	r2, [r8, r4]
   123c8:	add	r2, r4, #1
   123cc:	cmp	r9, r2
   123d0:	movhi	r1, #36	; 0x24
   123d4:	strbhi	r1, [r8, r2]
   123d8:	add	r2, r4, #2
   123dc:	add	r4, r4, #3
   123e0:	cmp	r9, r2
   123e4:	movhi	r1, #39	; 0x27
   123e8:	strbhi	r1, [r8, r2]
   123ec:	cmp	r9, r4
   123f0:	ldr	fp, [sp, #36]	; 0x24
   123f4:	movhi	r3, #92	; 0x5c
   123f8:	strbhi	r3, [r8, r4]
   123fc:	add	r4, r4, #1
   12400:	b	1258c <__assert_fail@plt+0x164c>
   12404:	cmp	r6, #92	; 0x5c
   12408:	beq	12574 <__assert_fail@plt+0x1634>
   1240c:	bls	121bc <__assert_fail@plt+0x127c>
   12410:	ldr	r5, [sp, #36]	; 0x24
   12414:	b	1255c <__assert_fail@plt+0x161c>
   12418:	cmp	r6, #122	; 0x7a
   1241c:	bhi	1243c <__assert_fail@plt+0x14fc>
   12420:	cmp	r6, #97	; 0x61
   12424:	bcs	12410 <__assert_fail@plt+0x14d0>
   12428:	cmp	r6, #95	; 0x5f
   1242c:	beq	12410 <__assert_fail@plt+0x14d0>
   12430:	cmp	r6, #96	; 0x60
   12434:	bne	12124 <__assert_fail@plt+0x11e4>
   12438:	b	121bc <__assert_fail@plt+0x127c>
   1243c:	cmp	r6, #124	; 0x7c
   12440:	beq	121bc <__assert_fail@plt+0x127c>
   12444:	bcc	12650 <__assert_fail@plt+0x1710>
   12448:	cmp	r6, #125	; 0x7d
   1244c:	beq	12650 <__assert_fail@plt+0x1710>
   12450:	cmp	r6, #126	; 0x7e
   12454:	bne	12124 <__assert_fail@plt+0x11e4>
   12458:	ldr	r3, [sp, #28]
   1245c:	cmp	r3, #0
   12460:	bne	1256c <__assert_fail@plt+0x162c>
   12464:	ldr	r5, [sp, #36]	; 0x24
   12468:	cmp	sl, #2
   1246c:	movne	fp, #0
   12470:	andeq	fp, r7, #1
   12474:	cmp	fp, #0
   12478:	beq	12340 <__assert_fail@plt+0x1400>
   1247c:	b	121a0 <__assert_fail@plt+0x1260>
   12480:	ldr	r3, [sp, #24]
   12484:	cmp	r3, #0
   12488:	beq	12550 <__assert_fail@plt+0x1610>
   1248c:	sub	r2, sl, #2
   12490:	cmp	r7, #0
   12494:	clz	r2, r2
   12498:	lsr	r2, r2, #5
   1249c:	bne	12074 <__assert_fail@plt+0x1134>
   124a0:	ldr	r3, [sp, #52]	; 0x34
   124a4:	eor	r3, r3, #1
   124a8:	ands	r2, r2, r3
   124ac:	moveq	r3, r4
   124b0:	beq	124e8 <__assert_fail@plt+0x15a8>
   124b4:	cmp	r9, r4
   124b8:	str	r2, [sp, #52]	; 0x34
   124bc:	movhi	r3, #39	; 0x27
   124c0:	strbhi	r3, [r8, r4]
   124c4:	add	r3, r4, #1
   124c8:	cmp	r9, r3
   124cc:	movhi	r1, #36	; 0x24
   124d0:	strbhi	r1, [r8, r3]
   124d4:	add	r3, r4, #2
   124d8:	cmp	r9, r3
   124dc:	movhi	r1, #39	; 0x27
   124e0:	strbhi	r1, [r8, r3]
   124e4:	add	r3, r4, #3
   124e8:	cmp	r9, r3
   124ec:	add	r4, r3, #1
   124f0:	movhi	r2, #92	; 0x5c
   124f4:	strbhi	r2, [r8, r3]
   124f8:	cmp	fp, #0
   124fc:	beq	12924 <__assert_fail@plt+0x19e4>
   12500:	ldr	r2, [sp, #28]
   12504:	ldr	r1, [sp, #40]	; 0x28
   12508:	add	r2, r2, #1
   1250c:	cmp	r2, r1
   12510:	bcs	12548 <__assert_fail@plt+0x1608>
   12514:	ldr	r1, [sp, #48]	; 0x30
   12518:	mov	r6, #48	; 0x30
   1251c:	ldrb	r2, [r1, r2]
   12520:	sub	r2, r2, #48	; 0x30
   12524:	cmp	r2, #9
   12528:	bhi	12934 <__assert_fail@plt+0x19f4>
   1252c:	cmp	r9, r4
   12530:	add	r2, r3, #2
   12534:	strbhi	r6, [r8, r4]
   12538:	cmp	r9, r2
   1253c:	add	r4, r3, #3
   12540:	movhi	r1, #48	; 0x30
   12544:	strbhi	r1, [r8, r2]
   12548:	mov	r5, #0
   1254c:	b	1292c <__assert_fail@plt+0x19ec>
   12550:	ldr	r3, [sp, #148]	; 0x94
   12554:	ands	r5, r3, #1
   12558:	bne	125e0 <__assert_fail@plt+0x16a0>
   1255c:	mov	fp, #0
   12560:	b	12340 <__assert_fail@plt+0x1400>
   12564:	cmp	r7, #0
   12568:	bne	12078 <__assert_fail@plt+0x1138>
   1256c:	mov	r5, #0
   12570:	b	1255c <__assert_fail@plt+0x161c>
   12574:	cmp	sl, #2
   12578:	bne	125ec <__assert_fail@plt+0x16ac>
   1257c:	cmp	r7, #0
   12580:	bne	12078 <__assert_fail@plt+0x1138>
   12584:	mov	r5, r7
   12588:	mov	fp, r7
   1258c:	ldr	r3, [sp, #52]	; 0x34
   12590:	eor	fp, fp, #1
   12594:	tst	r3, fp
   12598:	beq	125c4 <__assert_fail@plt+0x1684>
   1259c:	cmp	r9, r4
   125a0:	movhi	r3, #39	; 0x27
   125a4:	strbhi	r3, [r8, r4]
   125a8:	add	r3, r4, #1
   125ac:	add	r4, r4, #2
   125b0:	cmp	r9, r3
   125b4:	movhi	r2, #39	; 0x27
   125b8:	strbhi	r2, [r8, r3]
   125bc:	mov	r3, #0
   125c0:	str	r3, [sp, #52]	; 0x34
   125c4:	cmp	r9, r4
   125c8:	ldr	r3, [sp, #72]	; 0x48
   125cc:	strbhi	r6, [r8, r4]
   125d0:	cmp	r5, #0
   125d4:	add	r4, r4, #1
   125d8:	moveq	r3, #0
   125dc:	str	r3, [sp, #72]	; 0x48
   125e0:	ldr	r3, [sp, #28]
   125e4:	add	r3, r3, #1
   125e8:	b	11da0 <__assert_fail@plt+0xe60>
   125ec:	ldr	r3, [sp, #24]
   125f0:	and	r3, r3, r7
   125f4:	tst	r5, r3
   125f8:	moveq	r3, r6
   125fc:	beq	1218c <__assert_fail@plt+0x124c>
   12600:	mov	fp, #0
   12604:	mov	r5, fp
   12608:	b	1258c <__assert_fail@plt+0x164c>
   1260c:	mov	r3, #116	; 0x74
   12610:	b	1218c <__assert_fail@plt+0x124c>
   12614:	mov	r3, #110	; 0x6e
   12618:	b	1218c <__assert_fail@plt+0x124c>
   1261c:	mov	r3, #97	; 0x61
   12620:	ldr	r2, [sp, #24]
   12624:	cmp	r2, #0
   12628:	beq	1256c <__assert_fail@plt+0x162c>
   1262c:	mov	r6, r3
   12630:	mov	r5, #0
   12634:	b	12394 <__assert_fail@plt+0x1454>
   12638:	mov	r3, #98	; 0x62
   1263c:	b	12620 <__assert_fail@plt+0x16e0>
   12640:	mov	r3, #118	; 0x76
   12644:	b	12620 <__assert_fail@plt+0x16e0>
   12648:	mov	r3, #102	; 0x66
   1264c:	b	12620 <__assert_fail@plt+0x16e0>
   12650:	ldr	r3, [sp, #40]	; 0x28
   12654:	cmn	r3, #1
   12658:	bne	12678 <__assert_fail@plt+0x1738>
   1265c:	ldr	r3, [sp, #48]	; 0x30
   12660:	ldrb	r3, [r3, #1]
   12664:	adds	r3, r3, #0
   12668:	movne	r3, #1
   1266c:	cmp	r3, #0
   12670:	bne	1256c <__assert_fail@plt+0x162c>
   12674:	b	12458 <__assert_fail@plt+0x1518>
   12678:	ldr	r3, [sp, #40]	; 0x28
   1267c:	subs	r3, r3, #1
   12680:	b	12668 <__assert_fail@plt+0x1728>
   12684:	mov	r3, #0
   12688:	mov	r2, #0
   1268c:	strd	r2, [sp, #96]	; 0x60
   12690:	ldr	r3, [sp, #40]	; 0x28
   12694:	cmn	r3, #1
   12698:	bne	126a8 <__assert_fail@plt+0x1768>
   1269c:	ldr	r0, [sp, #48]	; 0x30
   126a0:	bl	10e44 <strlen@plt>
   126a4:	str	r0, [sp, #40]	; 0x28
   126a8:	ldr	r5, [sp, #36]	; 0x24
   126ac:	mov	r3, #0
   126b0:	str	r3, [sp, #56]	; 0x38
   126b4:	ldr	r3, [sp, #28]
   126b8:	add	r0, sp, #92	; 0x5c
   126bc:	ldr	r1, [sp, #40]	; 0x28
   126c0:	ldr	r2, [sp, #56]	; 0x38
   126c4:	add	r2, r3, r2
   126c8:	ldr	r3, [sp, #48]	; 0x30
   126cc:	add	fp, r3, r2
   126d0:	sub	r2, r1, r2
   126d4:	add	r3, sp, #96	; 0x60
   126d8:	mov	r1, fp
   126dc:	bl	14010 <__assert_fail@plt+0x30d0>
   126e0:	subs	r2, r0, #0
   126e4:	beq	12724 <__assert_fail@plt+0x17e4>
   126e8:	cmn	r2, #1
   126ec:	beq	128f8 <__assert_fail@plt+0x19b8>
   126f0:	cmn	r2, #2
   126f4:	bne	12868 <__assert_fail@plt+0x1928>
   126f8:	ldr	r3, [sp, #28]
   126fc:	ldr	r2, [sp, #56]	; 0x38
   12700:	add	r3, r3, r2
   12704:	ldr	r2, [sp, #40]	; 0x28
   12708:	cmp	r2, r3
   1270c:	bls	128f8 <__assert_fail@plt+0x19b8>
   12710:	ldr	r2, [sp, #56]	; 0x38
   12714:	ldr	r3, [sp, #80]	; 0x50
   12718:	ldrb	r5, [r3, r2]
   1271c:	cmp	r5, #0
   12720:	bne	12858 <__assert_fail@plt+0x1918>
   12724:	ldr	r3, [sp, #56]	; 0x38
   12728:	cmp	r3, #1
   1272c:	bls	12150 <__assert_fail@plt+0x1210>
   12730:	ldr	r3, [sp, #28]
   12734:	mov	fp, #0
   12738:	mov	ip, #92	; 0x5c
   1273c:	ldr	r2, [sp, #56]	; 0x38
   12740:	add	r3, r3, r2
   12744:	ldr	r2, [sp, #24]
   12748:	str	r3, [sp, #36]	; 0x24
   1274c:	eor	r3, r5, #1
   12750:	and	r3, r3, r2
   12754:	mov	r2, #39	; 0x27
   12758:	uxtb	r3, r3
   1275c:	cmp	r3, #0
   12760:	beq	12900 <__assert_fail@plt+0x19c0>
   12764:	sub	r0, sl, #2
   12768:	cmp	r7, #0
   1276c:	clz	r0, r0
   12770:	lsr	r0, r0, #5
   12774:	bne	12074 <__assert_fail@plt+0x1134>
   12778:	ldr	r1, [sp, #52]	; 0x34
   1277c:	eor	r1, r1, #1
   12780:	ands	r1, r0, r1
   12784:	beq	127b4 <__assert_fail@plt+0x1874>
   12788:	cmp	r9, r4
   1278c:	add	r0, r4, #1
   12790:	str	r1, [sp, #52]	; 0x34
   12794:	strbhi	r2, [r8, r4]
   12798:	cmp	r9, r0
   1279c:	movhi	lr, #36	; 0x24
   127a0:	strbhi	lr, [r8, r0]
   127a4:	add	r0, r4, #2
   127a8:	add	r4, r4, #3
   127ac:	cmp	r9, r0
   127b0:	strbhi	r2, [r8, r0]
   127b4:	cmp	r9, r4
   127b8:	add	r0, r4, #1
   127bc:	mov	fp, r3
   127c0:	strbhi	ip, [r8, r4]
   127c4:	cmp	r9, r0
   127c8:	lsrhi	r1, r6, #6
   127cc:	addhi	r1, r1, #48	; 0x30
   127d0:	strbhi	r1, [r8, r0]
   127d4:	add	r0, r4, #2
   127d8:	add	r4, r4, #3
   127dc:	cmp	r9, r0
   127e0:	ubfxhi	r1, r6, #3, #3
   127e4:	and	r6, r6, #7
   127e8:	add	r6, r6, #48	; 0x30
   127ec:	addhi	r1, r1, #48	; 0x30
   127f0:	strbhi	r1, [r8, r0]
   127f4:	eor	r0, fp, #1
   127f8:	ldr	r1, [sp, #28]
   127fc:	ldr	lr, [sp, #52]	; 0x34
   12800:	add	r1, r1, #1
   12804:	and	r0, r0, lr
   12808:	ldr	lr, [sp, #36]	; 0x24
   1280c:	cmp	r1, lr
   12810:	bcs	1258c <__assert_fail@plt+0x164c>
   12814:	cmp	r0, #0
   12818:	beq	1283c <__assert_fail@plt+0x18fc>
   1281c:	cmp	r9, r4
   12820:	add	r0, r4, #1
   12824:	strbhi	r2, [r8, r4]
   12828:	cmp	r9, r0
   1282c:	add	r4, r4, #2
   12830:	strbhi	r2, [r8, r0]
   12834:	mov	r0, #0
   12838:	str	r0, [sp, #52]	; 0x34
   1283c:	ldr	r0, [sp, #48]	; 0x30
   12840:	cmp	r9, r4
   12844:	str	r1, [sp, #28]
   12848:	strbhi	r6, [r8, r4]
   1284c:	add	r4, r4, #1
   12850:	ldrb	r6, [r0, r1]
   12854:	b	1275c <__assert_fail@plt+0x181c>
   12858:	ldr	r3, [sp, #56]	; 0x38
   1285c:	add	r3, r3, #1
   12860:	str	r3, [sp, #56]	; 0x38
   12864:	b	126f8 <__assert_fail@plt+0x17b8>
   12868:	cmp	sl, #2
   1286c:	movne	r3, #0
   12870:	andeq	r3, r7, #1
   12874:	cmp	r3, #0
   12878:	movne	r1, #1
   1287c:	bne	128d8 <__assert_fail@plt+0x1998>
   12880:	ldr	r0, [sp, #92]	; 0x5c
   12884:	str	r2, [sp, #84]	; 0x54
   12888:	bl	10d9c <iswprint@plt>
   1288c:	ldr	r3, [sp, #56]	; 0x38
   12890:	cmp	r0, #0
   12894:	add	r0, sp, #96	; 0x60
   12898:	moveq	r5, #0
   1289c:	ldr	r2, [sp, #84]	; 0x54
   128a0:	add	r3, r3, r2
   128a4:	str	r3, [sp, #56]	; 0x38
   128a8:	bl	10d3c <mbsinit@plt>
   128ac:	cmp	r0, #0
   128b0:	beq	126b4 <__assert_fail@plt+0x1774>
   128b4:	b	12724 <__assert_fail@plt+0x17e4>
   128b8:	ldrb	r3, [fp, #1]!
   128bc:	cmp	r3, #94	; 0x5e
   128c0:	beq	121a0 <__assert_fail@plt+0x1260>
   128c4:	bhi	128e4 <__assert_fail@plt+0x19a4>
   128c8:	sub	r3, r3, #91	; 0x5b
   128cc:	cmp	r3, #1
   128d0:	bls	121a0 <__assert_fail@plt+0x1260>
   128d4:	add	r1, r1, #1
   128d8:	cmp	r1, r2
   128dc:	bne	128b8 <__assert_fail@plt+0x1978>
   128e0:	b	12880 <__assert_fail@plt+0x1940>
   128e4:	cmp	r3, #96	; 0x60
   128e8:	beq	121a0 <__assert_fail@plt+0x1260>
   128ec:	cmp	r3, #124	; 0x7c
   128f0:	bne	128d4 <__assert_fail@plt+0x1994>
   128f4:	b	121a0 <__assert_fail@plt+0x1260>
   128f8:	mov	r5, #0
   128fc:	b	12724 <__assert_fail@plt+0x17e4>
   12900:	ldr	r1, [sp, #64]	; 0x40
   12904:	cmp	r1, #0
   12908:	beq	127f4 <__assert_fail@plt+0x18b4>
   1290c:	cmp	r9, r4
   12910:	mov	r1, #0
   12914:	strbhi	ip, [r8, r4]
   12918:	add	r4, r4, #1
   1291c:	str	r1, [sp, #64]	; 0x40
   12920:	b	127f4 <__assert_fail@plt+0x18b4>
   12924:	mov	r5, fp
   12928:	ldr	fp, [sp, #24]
   1292c:	mov	r6, #48	; 0x30
   12930:	b	12340 <__assert_fail@plt+0x1400>
   12934:	mov	r5, #0
   12938:	b	12340 <__assert_fail@plt+0x1400>
   1293c:	mov	r6, r1
   12940:	b	1256c <__assert_fail@plt+0x162c>
   12944:	mov	r6, r1
   12948:	b	1255c <__assert_fail@plt+0x161c>
   1294c:	ldr	r2, [sp, #28]
   12950:	ldr	r3, [sp, #40]	; 0x28
   12954:	subs	r3, r3, r2
   12958:	movne	r3, #1
   1295c:	b	11dc4 <__assert_fail@plt+0xe84>
   12960:	ldr	r3, [sp, #60]	; 0x3c
   12964:	mov	sl, #2
   12968:	ldr	r7, [sp, #72]	; 0x48
   1296c:	adds	r6, r3, #0
   12970:	mov	r5, r3
   12974:	movne	r6, #1
   12978:	cmp	r9, #0
   1297c:	movne	r6, #0
   12980:	cmp	r6, #0
   12984:	bne	11d54 <__assert_fail@plt+0xe14>
   12988:	ldr	r3, [sp, #68]	; 0x44
   1298c:	ldr	r2, [sp, #44]	; 0x2c
   12990:	cmp	r2, #0
   12994:	moveq	r3, #0
   12998:	andne	r3, r3, #1
   1299c:	cmp	r3, #0
   129a0:	movne	r3, r2
   129a4:	subne	r3, r3, #1
   129a8:	bne	129d8 <__assert_fail@plt+0x1a98>
   129ac:	cmp	r9, r4
   129b0:	movhi	r3, #0
   129b4:	strbhi	r3, [r8, r4]
   129b8:	mov	r0, r4
   129bc:	add	sp, sp, #108	; 0x6c
   129c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c4:	mov	r3, r7
   129c8:	b	1298c <__assert_fail@plt+0x1a4c>
   129cc:	cmp	r9, r4
   129d0:	strbhi	r2, [r8, r4]
   129d4:	add	r4, r4, #1
   129d8:	ldrb	r2, [r3, #1]!
   129dc:	cmp	r2, #0
   129e0:	bne	129cc <__assert_fail@plt+0x1a8c>
   129e4:	b	129ac <__assert_fail@plt+0x1a6c>
   129e8:	andeq	r4, r1, r4, lsl r7
   129ec:	andeq	r4, r1, r7, lsr #14
   129f0:	andeq	r4, r1, r5, lsr #14
   129f4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   129f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129fc:	sub	sp, sp, #52	; 0x34
   12a00:	mov	r6, r0
   12a04:	mov	r5, r3
   12a08:	mov	r8, r1
   12a0c:	mov	r9, r2
   12a10:	bl	10e5c <__errno_location@plt>
   12a14:	ldr	r3, [r0]
   12a18:	cmn	r6, #-2147483647	; 0x80000001
   12a1c:	str	r0, [sp, #24]
   12a20:	ldr	r7, [pc, #368]	; 12b98 <__assert_fail@plt+0x1c58>
   12a24:	str	r3, [sp, #32]
   12a28:	movne	r3, #0
   12a2c:	moveq	r3, #1
   12a30:	orrs	r3, r3, r6, lsr #31
   12a34:	ldr	r4, [r7]
   12a38:	beq	12a40 <__assert_fail@plt+0x1b00>
   12a3c:	bl	10f28 <abort@plt>
   12a40:	ldr	r2, [r7, #4]
   12a44:	cmp	r2, r6
   12a48:	bgt	12ab8 <__assert_fail@plt+0x1b78>
   12a4c:	add	sl, r7, #8
   12a50:	mov	r3, #8
   12a54:	cmp	r4, sl
   12a58:	add	r1, sp, #44	; 0x2c
   12a5c:	str	r2, [sp, #44]	; 0x2c
   12a60:	sub	r2, r6, r2
   12a64:	movne	r0, r4
   12a68:	moveq	r0, #0
   12a6c:	add	r2, r2, #1
   12a70:	str	r3, [sp]
   12a74:	mvn	r3, #-2147483648	; 0x80000000
   12a78:	bl	1374c <__assert_fail@plt+0x280c>
   12a7c:	cmp	r4, sl
   12a80:	mov	fp, r0
   12a84:	str	r0, [r7]
   12a88:	ldmeq	r4, {r0, r1}
   12a8c:	mov	r4, fp
   12a90:	ldr	r2, [sp, #44]	; 0x2c
   12a94:	stmeq	fp, {r0, r1}
   12a98:	mov	r1, #0
   12a9c:	ldr	r0, [r7, #4]
   12aa0:	sub	r2, r2, r0
   12aa4:	add	r0, fp, r0, lsl #3
   12aa8:	lsl	r2, r2, #3
   12aac:	bl	10e74 <memset@plt>
   12ab0:	ldr	r3, [sp, #44]	; 0x2c
   12ab4:	str	r3, [r7, #4]
   12ab8:	ldr	r3, [r5, #4]
   12abc:	add	sl, r4, r6, lsl #3
   12ac0:	mov	r2, r8
   12ac4:	ldr	fp, [r4, r6, lsl #3]
   12ac8:	ldr	r7, [sl, #4]
   12acc:	orr	r3, r3, #1
   12ad0:	str	r3, [sp, #28]
   12ad4:	add	r3, r5, #8
   12ad8:	mov	r1, fp
   12adc:	str	r3, [sp, #36]	; 0x24
   12ae0:	mov	r0, r7
   12ae4:	ldr	r3, [r5, #44]	; 0x2c
   12ae8:	str	r3, [sp, #16]
   12aec:	ldr	r3, [r5, #40]	; 0x28
   12af0:	str	r3, [sp, #12]
   12af4:	add	r3, r5, #8
   12af8:	str	r3, [sp, #8]
   12afc:	ldr	r3, [sp, #28]
   12b00:	str	r3, [sp, #4]
   12b04:	ldr	r3, [r5]
   12b08:	str	r3, [sp]
   12b0c:	mov	r3, r9
   12b10:	bl	11d08 <__assert_fail@plt+0xdc8>
   12b14:	cmp	fp, r0
   12b18:	bhi	12b80 <__assert_fail@plt+0x1c40>
   12b1c:	ldr	r3, [pc, #120]	; 12b9c <__assert_fail@plt+0x1c5c>
   12b20:	add	fp, r0, #1
   12b24:	str	fp, [r4, r6, lsl #3]
   12b28:	cmp	r7, r3
   12b2c:	beq	12b38 <__assert_fail@plt+0x1bf8>
   12b30:	mov	r0, r7
   12b34:	bl	13f64 <__assert_fail@plt+0x3024>
   12b38:	mov	r0, fp
   12b3c:	bl	1363c <__assert_fail@plt+0x26fc>
   12b40:	ldr	r3, [r5, #44]	; 0x2c
   12b44:	mov	r2, r8
   12b48:	mov	r1, fp
   12b4c:	str	r0, [sl, #4]
   12b50:	mov	r7, r0
   12b54:	str	r3, [sp, #16]
   12b58:	ldr	r3, [r5, #40]	; 0x28
   12b5c:	str	r3, [sp, #12]
   12b60:	add	r3, r5, #8
   12b64:	str	r3, [sp, #8]
   12b68:	ldr	r3, [sp, #28]
   12b6c:	str	r3, [sp, #4]
   12b70:	ldr	r3, [r5]
   12b74:	str	r3, [sp]
   12b78:	mov	r3, r9
   12b7c:	bl	11d08 <__assert_fail@plt+0xdc8>
   12b80:	ldr	r3, [sp, #24]
   12b84:	mov	r0, r7
   12b88:	ldr	r2, [sp, #32]
   12b8c:	str	r2, [r3]
   12b90:	add	sp, sp, #52	; 0x34
   12b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b98:	strdeq	r5, [r2], -r4
   12b9c:	andeq	r5, r2, ip, ror r1
   12ba0:	push	{r4, r5, r6, lr}
   12ba4:	mov	r5, r0
   12ba8:	bl	10e5c <__errno_location@plt>
   12bac:	mov	r4, r0
   12bb0:	cmp	r5, #0
   12bb4:	ldr	r0, [pc, #20]	; 12bd0 <__assert_fail@plt+0x1c90>
   12bb8:	mov	r1, #48	; 0x30
   12bbc:	movne	r0, r5
   12bc0:	ldr	r6, [r4]
   12bc4:	bl	1383c <__assert_fail@plt+0x28fc>
   12bc8:	str	r6, [r4]
   12bcc:	pop	{r4, r5, r6, pc}
   12bd0:	andeq	r5, r2, ip, ror r2
   12bd4:	ldr	r3, [pc, #12]	; 12be8 <__assert_fail@plt+0x1ca8>
   12bd8:	cmp	r0, #0
   12bdc:	moveq	r0, r3
   12be0:	ldr	r0, [r0]
   12be4:	bx	lr
   12be8:	andeq	r5, r2, ip, ror r2
   12bec:	ldr	r3, [pc, #12]	; 12c00 <__assert_fail@plt+0x1cc0>
   12bf0:	cmp	r0, #0
   12bf4:	moveq	r0, r3
   12bf8:	str	r1, [r0]
   12bfc:	bx	lr
   12c00:	andeq	r5, r2, ip, ror r2
   12c04:	ldr	r3, [pc, #52]	; 12c40 <__assert_fail@plt+0x1d00>
   12c08:	cmp	r0, #0
   12c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   12c10:	lsr	lr, r1, #5
   12c14:	and	r1, r1, #31
   12c18:	moveq	r0, r3
   12c1c:	add	r3, r0, #8
   12c20:	ldr	ip, [r3, lr, lsl #2]
   12c24:	lsr	r0, ip, r1
   12c28:	eor	r2, r2, r0
   12c2c:	and	r0, r0, #1
   12c30:	and	r2, r2, #1
   12c34:	eor	r1, ip, r2, lsl r1
   12c38:	str	r1, [r3, lr, lsl #2]
   12c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c40:	andeq	r5, r2, ip, ror r2
   12c44:	ldr	r3, [pc, #16]	; 12c5c <__assert_fail@plt+0x1d1c>
   12c48:	cmp	r0, #0
   12c4c:	movne	r3, r0
   12c50:	ldr	r0, [r3, #4]
   12c54:	str	r1, [r3, #4]
   12c58:	bx	lr
   12c5c:	andeq	r5, r2, ip, ror r2
   12c60:	ldr	r3, [pc, #44]	; 12c94 <__assert_fail@plt+0x1d54>
   12c64:	cmp	r0, #0
   12c68:	moveq	r0, r3
   12c6c:	mov	r3, #10
   12c70:	cmp	r2, #0
   12c74:	cmpne	r1, #0
   12c78:	str	r3, [r0]
   12c7c:	bne	12c88 <__assert_fail@plt+0x1d48>
   12c80:	push	{r4, lr}
   12c84:	bl	10f28 <abort@plt>
   12c88:	str	r1, [r0, #40]	; 0x28
   12c8c:	str	r2, [r0, #44]	; 0x2c
   12c90:	bx	lr
   12c94:	andeq	r5, r2, ip, ror r2
   12c98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c9c:	sub	sp, sp, #24
   12ca0:	mov	sl, r3
   12ca4:	mov	r7, r0
   12ca8:	mov	r8, r1
   12cac:	mov	r9, r2
   12cb0:	ldr	r4, [sp, #56]	; 0x38
   12cb4:	ldr	r3, [pc, #88]	; 12d14 <__assert_fail@plt+0x1dd4>
   12cb8:	cmp	r4, #0
   12cbc:	moveq	r4, r3
   12cc0:	bl	10e5c <__errno_location@plt>
   12cc4:	ldr	r3, [r4, #44]	; 0x2c
   12cc8:	mov	r5, r0
   12ccc:	mov	r2, r9
   12cd0:	mov	r1, r8
   12cd4:	mov	r0, r7
   12cd8:	ldr	r6, [r5]
   12cdc:	str	r3, [sp, #16]
   12ce0:	ldr	r3, [r4, #40]	; 0x28
   12ce4:	str	r3, [sp, #12]
   12ce8:	add	r3, r4, #8
   12cec:	str	r3, [sp, #8]
   12cf0:	ldr	r3, [r4, #4]
   12cf4:	str	r3, [sp, #4]
   12cf8:	ldr	r3, [r4]
   12cfc:	str	r3, [sp]
   12d00:	mov	r3, sl
   12d04:	bl	11d08 <__assert_fail@plt+0xdc8>
   12d08:	str	r6, [r5]
   12d0c:	add	sp, sp, #24
   12d10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d14:	andeq	r5, r2, ip, ror r2
   12d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	cmp	r3, #0
   12d20:	sub	sp, sp, #44	; 0x2c
   12d24:	mov	r6, r2
   12d28:	mov	sl, r1
   12d2c:	mov	r9, r0
   12d30:	ldr	r4, [pc, #176]	; 12de8 <__assert_fail@plt+0x1ea8>
   12d34:	movne	r4, r3
   12d38:	bl	10e5c <__errno_location@plt>
   12d3c:	ldr	r3, [r0]
   12d40:	mov	r1, #0
   12d44:	mov	r2, r9
   12d48:	mov	r8, r0
   12d4c:	mov	r0, r1
   12d50:	ldr	r5, [r4, #4]
   12d54:	add	fp, r4, #8
   12d58:	str	r3, [sp, #28]
   12d5c:	ldr	r3, [r4, #44]	; 0x2c
   12d60:	cmp	r6, #0
   12d64:	orreq	r5, r5, #1
   12d68:	str	r3, [sp, #16]
   12d6c:	ldr	r3, [r4, #40]	; 0x28
   12d70:	stmib	sp, {r5, fp}
   12d74:	str	r3, [sp, #12]
   12d78:	ldr	r3, [r4]
   12d7c:	str	r3, [sp]
   12d80:	mov	r3, sl
   12d84:	bl	11d08 <__assert_fail@plt+0xdc8>
   12d88:	add	r1, r0, #1
   12d8c:	mov	r7, r0
   12d90:	mov	r0, r1
   12d94:	str	r1, [sp, #36]	; 0x24
   12d98:	bl	1363c <__assert_fail@plt+0x26fc>
   12d9c:	ldr	r3, [r4, #44]	; 0x2c
   12da0:	mov	r2, r9
   12da4:	ldr	r1, [sp, #36]	; 0x24
   12da8:	str	r3, [sp, #16]
   12dac:	ldr	r3, [r4, #40]	; 0x28
   12db0:	stmib	sp, {r5, fp}
   12db4:	str	r0, [sp, #32]
   12db8:	str	r3, [sp, #12]
   12dbc:	ldr	r3, [r4]
   12dc0:	str	r3, [sp]
   12dc4:	mov	r3, sl
   12dc8:	bl	11d08 <__assert_fail@plt+0xdc8>
   12dcc:	ldr	r3, [sp, #28]
   12dd0:	cmp	r6, #0
   12dd4:	ldr	r0, [sp, #32]
   12dd8:	str	r3, [r8]
   12ddc:	strne	r7, [r6]
   12de0:	add	sp, sp, #44	; 0x2c
   12de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de8:	andeq	r5, r2, ip, ror r2
   12dec:	mov	r3, r2
   12df0:	mov	r2, #0
   12df4:	b	12d18 <__assert_fail@plt+0x1dd8>
   12df8:	push	{r4, r5, r6, r7, r8, lr}
   12dfc:	mov	r6, #1
   12e00:	ldr	r4, [pc, #100]	; 12e6c <__assert_fail@plt+0x1f2c>
   12e04:	ldr	r5, [r4]
   12e08:	add	r7, r5, #4
   12e0c:	ldr	r3, [r4, #4]
   12e10:	cmp	r3, r6
   12e14:	bgt	12e5c <__assert_fail@plt+0x1f1c>
   12e18:	ldr	r6, [pc, #80]	; 12e70 <__assert_fail@plt+0x1f30>
   12e1c:	ldr	r0, [r5, #4]
   12e20:	cmp	r0, r6
   12e24:	beq	12e38 <__assert_fail@plt+0x1ef8>
   12e28:	bl	13f64 <__assert_fail@plt+0x3024>
   12e2c:	mov	r3, #256	; 0x100
   12e30:	str	r3, [r4, #8]
   12e34:	str	r6, [r4, #12]
   12e38:	ldr	r6, [pc, #52]	; 12e74 <__assert_fail@plt+0x1f34>
   12e3c:	cmp	r5, r6
   12e40:	beq	12e50 <__assert_fail@plt+0x1f10>
   12e44:	mov	r0, r5
   12e48:	bl	13f64 <__assert_fail@plt+0x3024>
   12e4c:	str	r6, [r4]
   12e50:	mov	r3, #1
   12e54:	str	r3, [r4, #4]
   12e58:	pop	{r4, r5, r6, r7, r8, pc}
   12e5c:	ldr	r0, [r7, r6, lsl #3]
   12e60:	add	r6, r6, #1
   12e64:	bl	13f64 <__assert_fail@plt+0x3024>
   12e68:	b	12e0c <__assert_fail@plt+0x1ecc>
   12e6c:	strdeq	r5, [r2], -r4
   12e70:	andeq	r5, r2, ip, ror r1
   12e74:	strdeq	r5, [r2], -ip
   12e78:	ldr	r3, [pc, #4]	; 12e84 <__assert_fail@plt+0x1f44>
   12e7c:	mvn	r2, #0
   12e80:	b	129f8 <__assert_fail@plt+0x1ab8>
   12e84:	andeq	r5, r2, ip, ror r2
   12e88:	ldr	r3, [pc]	; 12e90 <__assert_fail@plt+0x1f50>
   12e8c:	b	129f8 <__assert_fail@plt+0x1ab8>
   12e90:	andeq	r5, r2, ip, ror r2
   12e94:	mov	r1, r0
   12e98:	mov	r0, #0
   12e9c:	b	12e78 <__assert_fail@plt+0x1f38>
   12ea0:	mov	r2, r1
   12ea4:	mov	r1, r0
   12ea8:	mov	r0, #0
   12eac:	b	12e88 <__assert_fail@plt+0x1f48>
   12eb0:	push	{r4, r5, lr}
   12eb4:	sub	sp, sp, #52	; 0x34
   12eb8:	mov	r5, r2
   12ebc:	mov	r4, r0
   12ec0:	mov	r0, sp
   12ec4:	bl	11bac <__assert_fail@plt+0xc6c>
   12ec8:	mov	r3, sp
   12ecc:	mvn	r2, #0
   12ed0:	mov	r1, r5
   12ed4:	mov	r0, r4
   12ed8:	bl	129f8 <__assert_fail@plt+0x1ab8>
   12edc:	add	sp, sp, #52	; 0x34
   12ee0:	pop	{r4, r5, pc}
   12ee4:	push	{r4, r5, r6, lr}
   12ee8:	sub	sp, sp, #48	; 0x30
   12eec:	mov	r5, r2
   12ef0:	mov	r6, r3
   12ef4:	mov	r4, r0
   12ef8:	mov	r0, sp
   12efc:	bl	11bac <__assert_fail@plt+0xc6c>
   12f00:	mov	r3, sp
   12f04:	mov	r2, r6
   12f08:	mov	r1, r5
   12f0c:	mov	r0, r4
   12f10:	bl	129f8 <__assert_fail@plt+0x1ab8>
   12f14:	add	sp, sp, #48	; 0x30
   12f18:	pop	{r4, r5, r6, pc}
   12f1c:	mov	r2, r1
   12f20:	mov	r1, r0
   12f24:	mov	r0, #0
   12f28:	b	12eb0 <__assert_fail@plt+0x1f70>
   12f2c:	mov	r3, r2
   12f30:	mov	r2, r1
   12f34:	mov	r1, r0
   12f38:	mov	r0, #0
   12f3c:	b	12ee4 <__assert_fail@plt+0x1fa4>
   12f40:	push	{r4, r5, r6, lr}
   12f44:	mov	r4, r0
   12f48:	mov	r5, r1
   12f4c:	mov	r6, r2
   12f50:	sub	sp, sp, #48	; 0x30
   12f54:	mov	ip, sp
   12f58:	ldr	lr, [pc, #64]	; 12fa0 <__assert_fail@plt+0x2060>
   12f5c:	ldm	lr!, {r0, r1, r2, r3}
   12f60:	stmia	ip!, {r0, r1, r2, r3}
   12f64:	ldm	lr!, {r0, r1, r2, r3}
   12f68:	stmia	ip!, {r0, r1, r2, r3}
   12f6c:	ldm	lr, {r0, r1, r2, r3}
   12f70:	stm	ip, {r0, r1, r2, r3}
   12f74:	mov	r1, r6
   12f78:	mov	r2, #1
   12f7c:	mov	r0, sp
   12f80:	bl	12c04 <__assert_fail@plt+0x1cc4>
   12f84:	mov	r3, sp
   12f88:	mov	r2, r5
   12f8c:	mov	r1, r4
   12f90:	mov	r0, #0
   12f94:	bl	129f8 <__assert_fail@plt+0x1ab8>
   12f98:	add	sp, sp, #48	; 0x30
   12f9c:	pop	{r4, r5, r6, pc}
   12fa0:	andeq	r5, r2, ip, ror r2
   12fa4:	mov	r2, r1
   12fa8:	mvn	r1, #0
   12fac:	b	12f40 <__assert_fail@plt+0x2000>
   12fb0:	mov	r1, #58	; 0x3a
   12fb4:	b	12fa4 <__assert_fail@plt+0x2064>
   12fb8:	mov	r2, #58	; 0x3a
   12fbc:	b	12f40 <__assert_fail@plt+0x2000>
   12fc0:	push	{r4, r5, lr}
   12fc4:	sub	sp, sp, #100	; 0x64
   12fc8:	mov	r4, r0
   12fcc:	mov	r0, sp
   12fd0:	mov	r5, r2
   12fd4:	bl	11bac <__assert_fail@plt+0xc6c>
   12fd8:	mov	ip, sp
   12fdc:	add	lr, sp, #48	; 0x30
   12fe0:	ldm	ip!, {r0, r1, r2, r3}
   12fe4:	stmia	lr!, {r0, r1, r2, r3}
   12fe8:	ldm	ip!, {r0, r1, r2, r3}
   12fec:	stmia	lr!, {r0, r1, r2, r3}
   12ff0:	ldm	ip, {r0, r1, r2, r3}
   12ff4:	stm	lr, {r0, r1, r2, r3}
   12ff8:	mov	r2, #1
   12ffc:	mov	r1, #58	; 0x3a
   13000:	add	r0, sp, #48	; 0x30
   13004:	bl	12c04 <__assert_fail@plt+0x1cc4>
   13008:	add	r3, sp, #48	; 0x30
   1300c:	mvn	r2, #0
   13010:	mov	r1, r5
   13014:	mov	r0, r4
   13018:	bl	129f8 <__assert_fail@plt+0x1ab8>
   1301c:	add	sp, sp, #100	; 0x64
   13020:	pop	{r4, r5, pc}
   13024:	push	{r4, r5, r6, r7, lr}
   13028:	mov	r4, r0
   1302c:	mov	r6, r1
   13030:	mov	r7, r2
   13034:	mov	r5, r3
   13038:	sub	sp, sp, #52	; 0x34
   1303c:	ldr	lr, [pc, #68]	; 13088 <__assert_fail@plt+0x2148>
   13040:	mov	ip, sp
   13044:	ldm	lr!, {r0, r1, r2, r3}
   13048:	stmia	ip!, {r0, r1, r2, r3}
   1304c:	ldm	lr!, {r0, r1, r2, r3}
   13050:	stmia	ip!, {r0, r1, r2, r3}
   13054:	ldm	lr, {r0, r1, r2, r3}
   13058:	stm	ip, {r0, r1, r2, r3}
   1305c:	mov	r2, r7
   13060:	mov	r1, r6
   13064:	mov	r0, sp
   13068:	bl	12c60 <__assert_fail@plt+0x1d20>
   1306c:	ldr	r2, [sp, #72]	; 0x48
   13070:	mov	r3, sp
   13074:	mov	r1, r5
   13078:	mov	r0, r4
   1307c:	bl	129f8 <__assert_fail@plt+0x1ab8>
   13080:	add	sp, sp, #52	; 0x34
   13084:	pop	{r4, r5, r6, r7, pc}
   13088:	andeq	r5, r2, ip, ror r2
   1308c:	mvn	ip, #0
   13090:	push	{r0, r1, r2, lr}
   13094:	str	ip, [sp]
   13098:	bl	13024 <__assert_fail@plt+0x20e4>
   1309c:	add	sp, sp, #12
   130a0:	pop	{pc}		; (ldr pc, [sp], #4)
   130a4:	mov	r3, r2
   130a8:	mov	r2, r1
   130ac:	mov	r1, r0
   130b0:	mov	r0, #0
   130b4:	b	1308c <__assert_fail@plt+0x214c>
   130b8:	push	{r0, r1, r2, lr}
   130bc:	str	r3, [sp]
   130c0:	mov	r3, r2
   130c4:	mov	r2, r1
   130c8:	mov	r1, r0
   130cc:	mov	r0, #0
   130d0:	bl	13024 <__assert_fail@plt+0x20e4>
   130d4:	add	sp, sp, #12
   130d8:	pop	{pc}		; (ldr pc, [sp], #4)
   130dc:	ldr	r3, [pc]	; 130e4 <__assert_fail@plt+0x21a4>
   130e0:	b	129f8 <__assert_fail@plt+0x1ab8>
   130e4:	andeq	r5, r2, r4, lsl #2
   130e8:	mov	r2, r1
   130ec:	mov	r1, r0
   130f0:	mov	r0, #0
   130f4:	b	130dc <__assert_fail@plt+0x219c>
   130f8:	mvn	r2, #0
   130fc:	b	130dc <__assert_fail@plt+0x219c>
   13100:	mov	r1, r0
   13104:	mov	r0, #0
   13108:	b	130f8 <__assert_fail@plt+0x21b8>
   1310c:	push	{r4, r5, r6, lr}
   13110:	cmp	r1, #0
   13114:	sub	sp, sp, #32
   13118:	mov	r5, r0
   1311c:	ldr	r4, [sp, #48]	; 0x30
   13120:	ldr	r6, [sp, #52]	; 0x34
   13124:	beq	131d8 <__assert_fail@plt+0x2298>
   13128:	strd	r2, [sp]
   1312c:	mov	r3, r1
   13130:	mov	r1, #1
   13134:	ldr	r2, [pc, #856]	; 13494 <__assert_fail@plt+0x2554>
   13138:	bl	10ea4 <__fprintf_chk@plt>
   1313c:	mov	r2, #5
   13140:	ldr	r1, [pc, #848]	; 13498 <__assert_fail@plt+0x2558>
   13144:	mov	r0, #0
   13148:	bl	10d78 <dcgettext@plt>
   1314c:	movw	r3, #2022	; 0x7e6
   13150:	ldr	r2, [pc, #836]	; 1349c <__assert_fail@plt+0x255c>
   13154:	mov	r1, #1
   13158:	str	r3, [sp]
   1315c:	mov	r3, r0
   13160:	mov	r0, r5
   13164:	bl	10ea4 <__fprintf_chk@plt>
   13168:	mov	r1, r5
   1316c:	mov	r0, #10
   13170:	bl	10d60 <fputc_unlocked@plt>
   13174:	mov	r2, #5
   13178:	ldr	r1, [pc, #800]	; 134a0 <__assert_fail@plt+0x2560>
   1317c:	mov	r0, #0
   13180:	bl	10d78 <dcgettext@plt>
   13184:	mov	r2, r0
   13188:	mov	r1, #1
   1318c:	ldr	r3, [pc, #784]	; 134a4 <__assert_fail@plt+0x2564>
   13190:	mov	r0, r5
   13194:	bl	10ea4 <__fprintf_chk@plt>
   13198:	mov	r1, r5
   1319c:	mov	r0, #10
   131a0:	bl	10d60 <fputc_unlocked@plt>
   131a4:	cmp	r6, #9
   131a8:	ldrls	pc, [pc, r6, lsl #2]
   131ac:	b	13488 <__assert_fail@plt+0x2548>
   131b0:	andeq	r3, r1, r8, asr #5
   131b4:	strdeq	r3, [r1], -r0
   131b8:	andeq	r3, r1, ip, lsl r2
   131bc:	andeq	r3, r1, r0, asr r2
   131c0:	andeq	r3, r1, ip, lsl #5
   131c4:	ldrdeq	r3, [r1], -r0
   131c8:	andeq	r3, r1, r8, lsl r3
   131cc:	andeq	r3, r1, r8, ror #6
   131d0:	andeq	r3, r1, r0, asr #7
   131d4:	andeq	r3, r1, r0, lsr #8
   131d8:	mov	r1, #1
   131dc:	str	r3, [sp]
   131e0:	mov	r3, r2
   131e4:	ldr	r2, [pc, #700]	; 134a8 <__assert_fail@plt+0x2568>
   131e8:	bl	10ea4 <__fprintf_chk@plt>
   131ec:	b	1313c <__assert_fail@plt+0x21fc>
   131f0:	mov	r2, #5
   131f4:	ldr	r1, [pc, #688]	; 134ac <__assert_fail@plt+0x256c>
   131f8:	mov	r0, #0
   131fc:	bl	10d78 <dcgettext@plt>
   13200:	ldr	r3, [r4]
   13204:	mov	r2, r0
   13208:	mov	r1, #1
   1320c:	mov	r0, r5
   13210:	add	sp, sp, #32
   13214:	pop	{r4, r5, r6, lr}
   13218:	b	10ea4 <__fprintf_chk@plt>
   1321c:	mov	r2, #5
   13220:	ldr	r1, [pc, #648]	; 134b0 <__assert_fail@plt+0x2570>
   13224:	mov	r0, #0
   13228:	bl	10d78 <dcgettext@plt>
   1322c:	ldr	r3, [r4, #4]
   13230:	mov	r2, r0
   13234:	mov	r1, #1
   13238:	mov	r0, r5
   1323c:	str	r3, [sp, #48]	; 0x30
   13240:	ldr	r3, [r4]
   13244:	add	sp, sp, #32
   13248:	pop	{r4, r5, r6, lr}
   1324c:	b	10ea4 <__fprintf_chk@plt>
   13250:	mov	r2, #5
   13254:	ldr	r1, [pc, #600]	; 134b4 <__assert_fail@plt+0x2574>
   13258:	mov	r0, #0
   1325c:	bl	10d78 <dcgettext@plt>
   13260:	ldr	r3, [r4, #8]
   13264:	mov	r2, r0
   13268:	mov	r1, #1
   1326c:	mov	r0, r5
   13270:	str	r3, [sp, #52]	; 0x34
   13274:	ldr	r3, [r4, #4]
   13278:	str	r3, [sp, #48]	; 0x30
   1327c:	ldr	r3, [r4]
   13280:	add	sp, sp, #32
   13284:	pop	{r4, r5, r6, lr}
   13288:	b	10ea4 <__fprintf_chk@plt>
   1328c:	mov	r2, #5
   13290:	ldr	r1, [pc, #544]	; 134b8 <__assert_fail@plt+0x2578>
   13294:	mov	r0, #0
   13298:	bl	10d78 <dcgettext@plt>
   1329c:	ldr	r3, [r4, #12]
   132a0:	mov	r2, r0
   132a4:	mov	r1, #1
   132a8:	mov	r0, r5
   132ac:	str	r3, [sp, #8]
   132b0:	ldr	r3, [r4, #8]
   132b4:	str	r3, [sp, #4]
   132b8:	ldr	r3, [r4, #4]
   132bc:	str	r3, [sp]
   132c0:	ldr	r3, [r4]
   132c4:	bl	10ea4 <__fprintf_chk@plt>
   132c8:	add	sp, sp, #32
   132cc:	pop	{r4, r5, r6, pc}
   132d0:	mov	r2, #5
   132d4:	ldr	r1, [pc, #480]	; 134bc <__assert_fail@plt+0x257c>
   132d8:	mov	r0, #0
   132dc:	bl	10d78 <dcgettext@plt>
   132e0:	ldr	r3, [r4, #16]
   132e4:	mov	r2, r0
   132e8:	mov	r1, #1
   132ec:	mov	r0, r5
   132f0:	str	r3, [sp, #12]
   132f4:	ldr	r3, [r4, #12]
   132f8:	str	r3, [sp, #8]
   132fc:	ldr	r3, [r4, #8]
   13300:	str	r3, [sp, #4]
   13304:	ldr	r3, [r4, #4]
   13308:	str	r3, [sp]
   1330c:	ldr	r3, [r4]
   13310:	bl	10ea4 <__fprintf_chk@plt>
   13314:	b	132c8 <__assert_fail@plt+0x2388>
   13318:	mov	r2, #5
   1331c:	ldr	r1, [pc, #412]	; 134c0 <__assert_fail@plt+0x2580>
   13320:	mov	r0, #0
   13324:	bl	10d78 <dcgettext@plt>
   13328:	ldr	r3, [r4, #20]
   1332c:	mov	r2, r0
   13330:	mov	r1, #1
   13334:	mov	r0, r5
   13338:	str	r3, [sp, #16]
   1333c:	ldr	r3, [r4, #16]
   13340:	str	r3, [sp, #12]
   13344:	ldr	r3, [r4, #12]
   13348:	str	r3, [sp, #8]
   1334c:	ldr	r3, [r4, #8]
   13350:	str	r3, [sp, #4]
   13354:	ldr	r3, [r4, #4]
   13358:	str	r3, [sp]
   1335c:	ldr	r3, [r4]
   13360:	bl	10ea4 <__fprintf_chk@plt>
   13364:	b	132c8 <__assert_fail@plt+0x2388>
   13368:	mov	r2, #5
   1336c:	ldr	r1, [pc, #336]	; 134c4 <__assert_fail@plt+0x2584>
   13370:	mov	r0, #0
   13374:	bl	10d78 <dcgettext@plt>
   13378:	ldr	r3, [r4, #24]
   1337c:	mov	r2, r0
   13380:	mov	r1, #1
   13384:	mov	r0, r5
   13388:	str	r3, [sp, #20]
   1338c:	ldr	r3, [r4, #20]
   13390:	str	r3, [sp, #16]
   13394:	ldr	r3, [r4, #16]
   13398:	str	r3, [sp, #12]
   1339c:	ldr	r3, [r4, #12]
   133a0:	str	r3, [sp, #8]
   133a4:	ldr	r3, [r4, #8]
   133a8:	str	r3, [sp, #4]
   133ac:	ldr	r3, [r4, #4]
   133b0:	str	r3, [sp]
   133b4:	ldr	r3, [r4]
   133b8:	bl	10ea4 <__fprintf_chk@plt>
   133bc:	b	132c8 <__assert_fail@plt+0x2388>
   133c0:	mov	r2, #5
   133c4:	ldr	r1, [pc, #252]	; 134c8 <__assert_fail@plt+0x2588>
   133c8:	mov	r0, #0
   133cc:	bl	10d78 <dcgettext@plt>
   133d0:	ldr	r3, [r4, #28]
   133d4:	mov	r2, r0
   133d8:	mov	r1, #1
   133dc:	mov	r0, r5
   133e0:	str	r3, [sp, #24]
   133e4:	ldr	r3, [r4, #24]
   133e8:	str	r3, [sp, #20]
   133ec:	ldr	r3, [r4, #20]
   133f0:	str	r3, [sp, #16]
   133f4:	ldr	r3, [r4, #16]
   133f8:	str	r3, [sp, #12]
   133fc:	ldr	r3, [r4, #12]
   13400:	str	r3, [sp, #8]
   13404:	ldr	r3, [r4, #8]
   13408:	str	r3, [sp, #4]
   1340c:	ldr	r3, [r4, #4]
   13410:	str	r3, [sp]
   13414:	ldr	r3, [r4]
   13418:	bl	10ea4 <__fprintf_chk@plt>
   1341c:	b	132c8 <__assert_fail@plt+0x2388>
   13420:	ldr	r1, [pc, #164]	; 134cc <__assert_fail@plt+0x258c>
   13424:	mov	r2, #5
   13428:	mov	r0, #0
   1342c:	bl	10d78 <dcgettext@plt>
   13430:	ldr	r3, [r4, #32]
   13434:	mov	r2, r0
   13438:	mov	r1, #1
   1343c:	mov	r0, r5
   13440:	str	r3, [sp, #28]
   13444:	ldr	r3, [r4, #28]
   13448:	str	r3, [sp, #24]
   1344c:	ldr	r3, [r4, #24]
   13450:	str	r3, [sp, #20]
   13454:	ldr	r3, [r4, #20]
   13458:	str	r3, [sp, #16]
   1345c:	ldr	r3, [r4, #16]
   13460:	str	r3, [sp, #12]
   13464:	ldr	r3, [r4, #12]
   13468:	str	r3, [sp, #8]
   1346c:	ldr	r3, [r4, #8]
   13470:	str	r3, [sp, #4]
   13474:	ldr	r3, [r4, #4]
   13478:	str	r3, [sp]
   1347c:	ldr	r3, [r4]
   13480:	bl	10ea4 <__fprintf_chk@plt>
   13484:	b	132c8 <__assert_fail@plt+0x2388>
   13488:	mov	r2, #5
   1348c:	ldr	r1, [pc, #60]	; 134d0 <__assert_fail@plt+0x2590>
   13490:	b	13428 <__assert_fail@plt+0x24e8>
   13494:	andeq	r4, r1, r5, ror r7
   13498:	andeq	r4, r1, r8, lsl #15
   1349c:	andeq	r4, r1, r6, asr sl
   134a0:	andeq	r4, r1, ip, lsl #15
   134a4:	andeq	r4, r1, r7, lsr r8
   134a8:	andeq	r4, r1, r1, lsl #15
   134ac:	andeq	r4, r1, r9, asr r8
   134b0:	andeq	r4, r1, r9, ror #16
   134b4:	andeq	r4, r1, r0, lsl #17
   134b8:	muleq	r1, ip, r8
   134bc:			; <UNDEFINED> instruction: 0x000148bc
   134c0:	andeq	r4, r1, r0, ror #17
   134c4:	andeq	r4, r1, r8, lsl #18
   134c8:	andeq	r4, r1, r4, lsr r9
   134cc:	andeq	r4, r1, r4, ror #18
   134d0:	muleq	r1, r8, r9
   134d4:	push	{r0, r1, r4, lr}
   134d8:	mov	ip, #0
   134dc:	ldr	lr, [sp, #16]
   134e0:	ldr	r4, [lr, ip, lsl #2]
   134e4:	cmp	r4, #0
   134e8:	bne	13500 <__assert_fail@plt+0x25c0>
   134ec:	str	lr, [sp]
   134f0:	str	ip, [sp, #4]
   134f4:	bl	1310c <__assert_fail@plt+0x21cc>
   134f8:	add	sp, sp, #8
   134fc:	pop	{r4, pc}
   13500:	add	ip, ip, #1
   13504:	b	134e0 <__assert_fail@plt+0x25a0>
   13508:	push	{r4, r5, r6, lr}
   1350c:	sub	sp, sp, #48	; 0x30
   13510:	mov	ip, #0
   13514:	add	lr, sp, #8
   13518:	mov	r5, lr
   1351c:	ldr	r6, [sp, #64]	; 0x40
   13520:	ldr	r4, [r6, ip, lsl #2]
   13524:	cmp	r4, #0
   13528:	str	r4, [lr], #4
   1352c:	beq	1353c <__assert_fail@plt+0x25fc>
   13530:	add	ip, ip, #1
   13534:	cmp	ip, #10
   13538:	bne	13520 <__assert_fail@plt+0x25e0>
   1353c:	stm	sp, {r5, ip}
   13540:	bl	1310c <__assert_fail@plt+0x21cc>
   13544:	add	sp, sp, #48	; 0x30
   13548:	pop	{r4, r5, r6, pc}
   1354c:	push	{r3}		; (str r3, [sp, #-4]!)
   13550:	push	{r0, r1, r2, r3, lr}
   13554:	add	r3, sp, #24
   13558:	str	r3, [sp]
   1355c:	str	r3, [sp, #12]
   13560:	ldr	r3, [sp, #20]
   13564:	bl	13508 <__assert_fail@plt+0x25c8>
   13568:	add	sp, sp, #16
   1356c:	pop	{lr}		; (ldr lr, [sp], #4)
   13570:	add	sp, sp, #4
   13574:	bx	lr
   13578:	ldr	r3, [pc, #116]	; 135f4 <__assert_fail@plt+0x26b4>
   1357c:	mov	r0, #10
   13580:	push	{r4, lr}
   13584:	ldr	r1, [r3]
   13588:	bl	10d60 <fputc_unlocked@plt>
   1358c:	mov	r2, #5
   13590:	ldr	r1, [pc, #96]	; 135f8 <__assert_fail@plt+0x26b8>
   13594:	mov	r0, #0
   13598:	bl	10d78 <dcgettext@plt>
   1359c:	mov	r1, r0
   135a0:	ldr	r2, [pc, #84]	; 135fc <__assert_fail@plt+0x26bc>
   135a4:	mov	r0, #1
   135a8:	bl	10e80 <__printf_chk@plt>
   135ac:	mov	r2, #5
   135b0:	ldr	r1, [pc, #72]	; 13600 <__assert_fail@plt+0x26c0>
   135b4:	mov	r0, #0
   135b8:	bl	10d78 <dcgettext@plt>
   135bc:	mov	r1, r0
   135c0:	ldr	r3, [pc, #60]	; 13604 <__assert_fail@plt+0x26c4>
   135c4:	mov	r0, #1
   135c8:	ldr	r2, [pc, #56]	; 13608 <__assert_fail@plt+0x26c8>
   135cc:	bl	10e80 <__printf_chk@plt>
   135d0:	mov	r2, #5
   135d4:	ldr	r1, [pc, #48]	; 1360c <__assert_fail@plt+0x26cc>
   135d8:	mov	r0, #0
   135dc:	bl	10d78 <dcgettext@plt>
   135e0:	mov	r1, r0
   135e4:	ldr	r2, [pc, #36]	; 13610 <__assert_fail@plt+0x26d0>
   135e8:	mov	r0, #1
   135ec:	pop	{r4, lr}
   135f0:	b	10e80 <__printf_chk@plt>
   135f4:	andeq	r5, r2, r4, asr r1
   135f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   135fc:	andeq	r4, r1, r8, ror #19
   13600:	strdeq	r4, [r1], -lr
   13604:	andeq	r4, r1, r8, asr #9
   13608:	strdeq	r4, [r1], -r0
   1360c:	andeq	r4, r1, r2, lsl sl
   13610:	andeq	r4, r1, r9, lsr sl
   13614:	push	{r4, lr}
   13618:	bl	13e84 <__assert_fail@plt+0x2f44>
   1361c:	cmp	r0, #0
   13620:	popne	{r4, pc}
   13624:	bl	138cc <__assert_fail@plt+0x298c>
   13628:	push	{r4, lr}
   1362c:	bl	13e84 <__assert_fail@plt+0x2f44>
   13630:	cmp	r0, #0
   13634:	popne	{r4, pc}
   13638:	bl	138cc <__assert_fail@plt+0x298c>
   1363c:	b	13614 <__assert_fail@plt+0x26d4>
   13640:	push	{r4, r5, r6, lr}
   13644:	mov	r5, r0
   13648:	mov	r4, r1
   1364c:	bl	13eb0 <__assert_fail@plt+0x2f70>
   13650:	cmp	r0, #0
   13654:	popne	{r4, r5, r6, pc}
   13658:	adds	r4, r4, #0
   1365c:	movne	r4, #1
   13660:	cmp	r5, #0
   13664:	moveq	r4, #1
   13668:	cmp	r4, #0
   1366c:	popeq	{r4, r5, r6, pc}
   13670:	bl	138cc <__assert_fail@plt+0x298c>
   13674:	push	{r4, lr}
   13678:	bl	13fb8 <__assert_fail@plt+0x3078>
   1367c:	cmp	r0, #0
   13680:	popne	{r4, pc}
   13684:	bl	138cc <__assert_fail@plt+0x298c>
   13688:	push	{r4, r5, r6, lr}
   1368c:	mov	r6, r0
   13690:	mov	r5, r1
   13694:	mov	r4, r2
   13698:	bl	14060 <__assert_fail@plt+0x3120>
   1369c:	cmp	r0, #0
   136a0:	popne	{r4, r5, r6, pc}
   136a4:	cmp	r6, #0
   136a8:	beq	136b8 <__assert_fail@plt+0x2778>
   136ac:	cmp	r5, #0
   136b0:	cmpne	r4, #0
   136b4:	popeq	{r4, r5, r6, pc}
   136b8:	bl	138cc <__assert_fail@plt+0x298c>
   136bc:	b	13688 <__assert_fail@plt+0x2748>
   136c0:	push	{r4, lr}
   136c4:	bl	13fc8 <__assert_fail@plt+0x3088>
   136c8:	cmp	r0, #0
   136cc:	popne	{r4, pc}
   136d0:	bl	138cc <__assert_fail@plt+0x298c>
   136d4:	mov	r2, r1
   136d8:	mov	r1, r0
   136dc:	mov	r0, #0
   136e0:	b	13688 <__assert_fail@plt+0x2748>
   136e4:	mov	r2, r1
   136e8:	mov	r1, r0
   136ec:	mov	r0, #0
   136f0:	b	136c0 <__assert_fail@plt+0x2780>
   136f4:	cmp	r0, #0
   136f8:	push	{r4, r5, r6, lr}
   136fc:	mov	r5, r1
   13700:	ldr	r4, [r1]
   13704:	bne	13730 <__assert_fail@plt+0x27f0>
   13708:	cmp	r4, #0
   1370c:	bne	13720 <__assert_fail@plt+0x27e0>
   13710:	mov	r4, #64	; 0x40
   13714:	udiv	r4, r4, r2
   13718:	cmp	r2, #64	; 0x40
   1371c:	addhi	r4, r4, #1
   13720:	mov	r1, r4
   13724:	bl	13688 <__assert_fail@plt+0x2748>
   13728:	str	r4, [r5]
   1372c:	pop	{r4, r5, r6, pc}
   13730:	lsr	r3, r4, #1
   13734:	add	r3, r3, #1
   13738:	adds	r4, r4, r3
   1373c:	bcc	13720 <__assert_fail@plt+0x27e0>
   13740:	bl	138cc <__assert_fail@plt+0x298c>
   13744:	mov	r2, #1
   13748:	b	136f4 <__assert_fail@plt+0x27b4>
   1374c:	ldr	ip, [r1]
   13750:	push	{r4, r5, r6, r7, r8, lr}
   13754:	mov	r5, r1
   13758:	mvn	r8, r3
   1375c:	lsr	r8, r8, #31
   13760:	ldr	lr, [sp, #24]
   13764:	asr	r1, ip, #1
   13768:	adds	r4, ip, r1
   1376c:	mvnvs	r4, #-2147483648	; 0x80000000
   13770:	cmp	r3, r4
   13774:	movge	r1, #0
   13778:	andlt	r1, r8, #1
   1377c:	cmp	r1, #0
   13780:	movne	r4, r3
   13784:	smull	r6, r7, r4, lr
   13788:	cmp	r7, r6, asr #31
   1378c:	bne	137a4 <__assert_fail@plt+0x2864>
   13790:	cmp	r6, #63	; 0x3f
   13794:	mov	r1, r6
   13798:	bgt	137b4 <__assert_fail@plt+0x2874>
   1379c:	mov	r1, #64	; 0x40
   137a0:	b	137a8 <__assert_fail@plt+0x2868>
   137a4:	mvn	r1, #-2147483648	; 0x80000000
   137a8:	sdiv	r4, r1, lr
   137ac:	mls	r6, lr, r4, r1
   137b0:	sub	r1, r1, r6
   137b4:	cmp	r0, #0
   137b8:	sub	r6, r4, ip
   137bc:	streq	r0, [r5]
   137c0:	cmp	r6, r2
   137c4:	bge	137f8 <__assert_fail@plt+0x28b8>
   137c8:	adds	r4, ip, r2
   137cc:	bvs	137f4 <__assert_fail@plt+0x28b4>
   137d0:	cmp	r4, r3
   137d4:	movle	r3, #0
   137d8:	andgt	r3, r8, #1
   137dc:	cmp	r3, #0
   137e0:	bne	137f4 <__assert_fail@plt+0x28b4>
   137e4:	smull	r2, r3, r4, lr
   137e8:	cmp	r3, r2, asr #31
   137ec:	mov	r1, r2
   137f0:	beq	137f8 <__assert_fail@plt+0x28b8>
   137f4:	bl	138cc <__assert_fail@plt+0x298c>
   137f8:	bl	13640 <__assert_fail@plt+0x2700>
   137fc:	str	r4, [r5]
   13800:	pop	{r4, r5, r6, r7, r8, pc}
   13804:	push	{r4, lr}
   13808:	bl	13e30 <__assert_fail@plt+0x2ef0>
   1380c:	cmp	r0, #0
   13810:	popne	{r4, pc}
   13814:	bl	138cc <__assert_fail@plt+0x298c>
   13818:	mov	r1, #1
   1381c:	b	13804 <__assert_fail@plt+0x28c4>
   13820:	push	{r4, lr}
   13824:	bl	13e30 <__assert_fail@plt+0x2ef0>
   13828:	cmp	r0, #0
   1382c:	popne	{r4, pc}
   13830:	bl	138cc <__assert_fail@plt+0x298c>
   13834:	mov	r1, #1
   13838:	b	13820 <__assert_fail@plt+0x28e0>
   1383c:	push	{r4, r5, r6, lr}
   13840:	mov	r4, r1
   13844:	mov	r5, r0
   13848:	mov	r0, r1
   1384c:	bl	13614 <__assert_fail@plt+0x26d4>
   13850:	mov	r2, r4
   13854:	mov	r1, r5
   13858:	pop	{r4, r5, r6, lr}
   1385c:	b	10d30 <memcpy@plt>
   13860:	push	{r4, r5, r6, lr}
   13864:	mov	r4, r1
   13868:	mov	r5, r0
   1386c:	mov	r0, r1
   13870:	bl	13628 <__assert_fail@plt+0x26e8>
   13874:	mov	r2, r4
   13878:	mov	r1, r5
   1387c:	pop	{r4, r5, r6, lr}
   13880:	b	10d30 <memcpy@plt>
   13884:	push	{r4, r5, r6, lr}
   13888:	mov	r5, r0
   1388c:	add	r0, r1, #1
   13890:	mov	r4, r1
   13894:	bl	13628 <__assert_fail@plt+0x26e8>
   13898:	mov	r2, #0
   1389c:	mov	r1, r5
   138a0:	strb	r2, [r0, r4]
   138a4:	mov	r2, r4
   138a8:	pop	{r4, r5, r6, lr}
   138ac:	b	10d30 <memcpy@plt>
   138b0:	push	{r4, lr}
   138b4:	mov	r4, r0
   138b8:	bl	10e44 <strlen@plt>
   138bc:	add	r1, r0, #1
   138c0:	mov	r0, r4
   138c4:	pop	{r4, lr}
   138c8:	b	1383c <__assert_fail@plt+0x28fc>
   138cc:	ldr	r3, [pc, #44]	; 13900 <__assert_fail@plt+0x29c0>
   138d0:	mov	r2, #5
   138d4:	mov	r0, #0
   138d8:	push	{r4, lr}
   138dc:	ldr	r1, [pc, #32]	; 13904 <__assert_fail@plt+0x29c4>
   138e0:	ldr	r4, [r3]
   138e4:	bl	10d78 <dcgettext@plt>
   138e8:	mov	r3, r0
   138ec:	ldr	r2, [pc, #20]	; 13908 <__assert_fail@plt+0x29c8>
   138f0:	mov	r1, #0
   138f4:	mov	r0, r4
   138f8:	bl	10de4 <error@plt>
   138fc:	bl	10f28 <abort@plt>
   13900:	strdeq	r5, [r2], -r0
   13904:	andeq	r4, r1, r5, lsl #21
   13908:	andeq	r4, r1, r7, ror r6
   1390c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13910:	sub	sp, sp, #20
   13914:	mov	r9, r3
   13918:	mov	r8, r2
   1391c:	mov	r2, r1
   13920:	mov	r1, #0
   13924:	mov	r7, r0
   13928:	ldr	r3, [sp, #56]	; 0x38
   1392c:	ldr	r6, [sp, #64]	; 0x40
   13930:	str	r3, [sp]
   13934:	add	r3, sp, #8
   13938:	bl	13a9c <__assert_fail@plt+0x2b5c>
   1393c:	subs	r4, r0, #0
   13940:	bne	139d0 <__assert_fail@plt+0x2a90>
   13944:	ldrd	r4, [sp, #8]
   13948:	ldrd	r2, [sp, #48]	; 0x30
   1394c:	cmp	r5, r9
   13950:	cmpeq	r4, r8
   13954:	movcc	r1, #1
   13958:	movcs	r1, #0
   1395c:	cmp	r5, r3
   13960:	cmpeq	r4, r2
   13964:	movls	r3, r1
   13968:	orrhi	r3, r1, #1
   1396c:	cmp	r3, #0
   13970:	beq	139ec <__assert_fail@plt+0x2aac>
   13974:	bl	10e5c <__errno_location@plt>
   13978:	mov	r3, #0
   1397c:	mvn	r2, #-1073741824	; 0xc0000000
   13980:	cmp	r5, r3
   13984:	cmpeq	r4, r2
   13988:	movls	r3, #34	; 0x22
   1398c:	bls	13994 <__assert_fail@plt+0x2a54>
   13990:	mov	r3, #75	; 0x4b
   13994:	str	r3, [r0]
   13998:	cmp	r6, #0
   1399c:	moveq	r6, #1
   139a0:	bl	10e5c <__errno_location@plt>
   139a4:	ldr	r4, [r0]
   139a8:	mov	r0, r7
   139ac:	cmp	r4, #22
   139b0:	moveq	r4, #0
   139b4:	bl	13100 <__assert_fail@plt+0x21c0>
   139b8:	ldr	r2, [pc, #60]	; 139fc <__assert_fail@plt+0x2abc>
   139bc:	mov	r1, r4
   139c0:	str	r0, [sp]
   139c4:	mov	r0, r6
   139c8:	ldr	r3, [sp, #60]	; 0x3c
   139cc:	bl	10de4 <error@plt>
   139d0:	bl	10e5c <__errno_location@plt>
   139d4:	cmp	r4, #1
   139d8:	beq	13990 <__assert_fail@plt+0x2a50>
   139dc:	cmp	r4, #3
   139e0:	bne	13998 <__assert_fail@plt+0x2a58>
   139e4:	mov	r3, #0
   139e8:	b	13994 <__assert_fail@plt+0x2a54>
   139ec:	mov	r0, r4
   139f0:	mov	r1, r5
   139f4:	add	sp, sp, #20
   139f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   139fc:	andeq	r4, r1, r3, ror r6
   13a00:	mov	r1, #10
   13a04:	b	1390c <__assert_fail@plt+0x29cc>
   13a08:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a0c:	mov	ip, r0
   13a10:	asr	fp, r1, #31
   13a14:	mov	r0, #0
   13a18:	mov	lr, r0
   13a1c:	subs	r2, r2, #1
   13a20:	bcs	13a2c <__assert_fail@plt+0x2aec>
   13a24:	add	sp, sp, #12
   13a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a2c:	ldrd	r8, [ip]
   13a30:	mov	r3, #0
   13a34:	cmp	r9, r3
   13a38:	umulleq	r8, r9, r8, r1
   13a3c:	moveq	r6, r8
   13a40:	moveq	r4, r9
   13a44:	beq	13a7c <__assert_fail@plt+0x2b3c>
   13a48:	umull	r4, r5, r8, r1
   13a4c:	strd	r4, [sp]
   13a50:	mov	r5, lr
   13a54:	ldr	r4, [sp, #4]
   13a58:	umlal	r4, r5, r9, r1
   13a5c:	cmp	r5, #0
   13a60:	ldrne	r3, [sp, #4]
   13a64:	mulne	r4, r1, r9
   13a68:	ldreq	r6, [sp]
   13a6c:	mlane	r4, r8, fp, r4
   13a70:	ldrne	r6, [sp]
   13a74:	addne	r4, r4, r3
   13a78:	movne	r3, #1
   13a7c:	cmp	r3, #0
   13a80:	mvnne	r6, #0
   13a84:	movne	r3, #1
   13a88:	movne	r4, r6
   13a8c:	orr	r0, r0, r3
   13a90:	str	r6, [ip]
   13a94:	str	r4, [ip, #4]
   13a98:	b	13a1c <__assert_fail@plt+0x2adc>
   13a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aa0:	cmp	r2, #36	; 0x24
   13aa4:	sub	sp, sp, #20
   13aa8:	ldr	r5, [sp, #56]	; 0x38
   13aac:	bls	13ac4 <__assert_fail@plt+0x2b84>
   13ab0:	ldr	r3, [pc, #876]	; 13e24 <__assert_fail@plt+0x2ee4>
   13ab4:	mov	r2, #85	; 0x55
   13ab8:	ldr	r1, [pc, #872]	; 13e28 <__assert_fail@plt+0x2ee8>
   13abc:	ldr	r0, [pc, #872]	; 13e2c <__assert_fail@plt+0x2eec>
   13ac0:	bl	10f40 <__assert_fail@plt>
   13ac4:	cmp	r1, #0
   13ac8:	mov	r6, r1
   13acc:	mov	r8, r0
   13ad0:	mov	fp, r2
   13ad4:	mov	r7, r3
   13ad8:	addeq	r6, sp, #4
   13adc:	bl	10e5c <__errno_location@plt>
   13ae0:	mov	r3, #0
   13ae4:	mov	sl, r0
   13ae8:	str	r3, [r0]
   13aec:	bl	10e2c <__ctype_b_loc@plt>
   13af0:	ldrb	r9, [r8]
   13af4:	mov	r3, r8
   13af8:	ldr	r1, [r0]
   13afc:	lsl	r2, r9, #1
   13b00:	ldrh	r4, [r1, r2]
   13b04:	ands	r4, r4, #8192	; 0x2000
   13b08:	bne	13b24 <__assert_fail@plt+0x2be4>
   13b0c:	cmp	r9, #45	; 0x2d
   13b10:	bne	13b2c <__assert_fail@plt+0x2bec>
   13b14:	mov	r4, #4
   13b18:	mov	r0, r4
   13b1c:	add	sp, sp, #20
   13b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b24:	ldrb	r9, [r3, #1]!
   13b28:	b	13afc <__assert_fail@plt+0x2bbc>
   13b2c:	mov	r2, fp
   13b30:	mov	r1, r6
   13b34:	mov	r0, r8
   13b38:	bl	10e98 <strtoumax@plt>
   13b3c:	ldr	r9, [r6]
   13b40:	strd	r0, [sp, #8]
   13b44:	cmp	r9, r8
   13b48:	bne	13bac <__assert_fail@plt+0x2c6c>
   13b4c:	cmp	r5, #0
   13b50:	beq	13b14 <__assert_fail@plt+0x2bd4>
   13b54:	ldrb	r1, [r8]
   13b58:	cmp	r1, #0
   13b5c:	beq	13b14 <__assert_fail@plt+0x2bd4>
   13b60:	mov	r0, r5
   13b64:	bl	10e50 <strchr@plt>
   13b68:	cmp	r0, #0
   13b6c:	movne	r2, #1
   13b70:	movne	r3, #0
   13b74:	strdne	r2, [sp, #8]
   13b78:	beq	13b14 <__assert_fail@plt+0x2bd4>
   13b7c:	ldrb	r8, [r9]
   13b80:	cmp	r8, #0
   13b84:	beq	13ddc <__assert_fail@plt+0x2e9c>
   13b88:	mov	r1, r8
   13b8c:	mov	r0, r5
   13b90:	bl	10e50 <strchr@plt>
   13b94:	cmp	r0, #0
   13b98:	bne	13bd4 <__assert_fail@plt+0x2c94>
   13b9c:	ldrd	r2, [sp, #8]
   13ba0:	orr	r4, r4, #2
   13ba4:	strd	r2, [r7]
   13ba8:	b	13b18 <__assert_fail@plt+0x2bd8>
   13bac:	ldr	r4, [sl]
   13bb0:	cmp	r4, #0
   13bb4:	beq	13bc4 <__assert_fail@plt+0x2c84>
   13bb8:	cmp	r4, #34	; 0x22
   13bbc:	bne	13b14 <__assert_fail@plt+0x2bd4>
   13bc0:	mov	r4, #1
   13bc4:	cmp	r5, #0
   13bc8:	strdeq	r0, [r7]
   13bcc:	bne	13b7c <__assert_fail@plt+0x2c3c>
   13bd0:	b	13b18 <__assert_fail@plt+0x2bd8>
   13bd4:	cmp	r8, #84	; 0x54
   13bd8:	beq	13c2c <__assert_fail@plt+0x2cec>
   13bdc:	bhi	13c14 <__assert_fail@plt+0x2cd4>
   13be0:	cmp	r8, #75	; 0x4b
   13be4:	beq	13c2c <__assert_fail@plt+0x2cec>
   13be8:	bhi	13c04 <__assert_fail@plt+0x2cc4>
   13bec:	cmp	r8, #69	; 0x45
   13bf0:	beq	13c2c <__assert_fail@plt+0x2cec>
   13bf4:	cmp	r8, #71	; 0x47
   13bf8:	beq	13c2c <__assert_fail@plt+0x2cec>
   13bfc:	mov	r5, #1
   13c00:	b	13ce4 <__assert_fail@plt+0x2da4>
   13c04:	cmp	r8, #77	; 0x4d
   13c08:	beq	13c2c <__assert_fail@plt+0x2cec>
   13c0c:	cmp	r8, #80	; 0x50
   13c10:	b	13bf8 <__assert_fail@plt+0x2cb8>
   13c14:	cmp	r8, #103	; 0x67
   13c18:	beq	13c2c <__assert_fail@plt+0x2cec>
   13c1c:	bhi	13cbc <__assert_fail@plt+0x2d7c>
   13c20:	sub	r3, r8, #89	; 0x59
   13c24:	cmp	r3, #1
   13c28:	bhi	13bfc <__assert_fail@plt+0x2cbc>
   13c2c:	mov	r1, #48	; 0x30
   13c30:	mov	r0, r5
   13c34:	bl	10e50 <strchr@plt>
   13c38:	cmp	r0, #0
   13c3c:	beq	13bfc <__assert_fail@plt+0x2cbc>
   13c40:	ldrb	r3, [r9, #1]
   13c44:	cmp	r3, #68	; 0x44
   13c48:	moveq	r5, #2
   13c4c:	moveq	r1, #1000	; 0x3e8
   13c50:	beq	13c70 <__assert_fail@plt+0x2d30>
   13c54:	cmp	r3, #105	; 0x69
   13c58:	beq	13cd4 <__assert_fail@plt+0x2d94>
   13c5c:	cmp	r3, #66	; 0x42
   13c60:	moveq	r5, #2
   13c64:	movne	r5, #1
   13c68:	moveq	r1, #1000	; 0x3e8
   13c6c:	movne	r1, #1024	; 0x400
   13c70:	cmp	r8, #89	; 0x59
   13c74:	beq	13e0c <__assert_fail@plt+0x2ecc>
   13c78:	bhi	13d0c <__assert_fail@plt+0x2dcc>
   13c7c:	cmp	r8, #75	; 0x4b
   13c80:	beq	13d4c <__assert_fail@plt+0x2e0c>
   13c84:	bhi	13cec <__assert_fail@plt+0x2dac>
   13c88:	cmp	r8, #69	; 0x45
   13c8c:	beq	13de8 <__assert_fail@plt+0x2ea8>
   13c90:	cmp	r8, #71	; 0x47
   13c94:	beq	13df4 <__assert_fail@plt+0x2eb4>
   13c98:	cmp	r8, #66	; 0x42
   13c9c:	bne	13b9c <__assert_fail@plt+0x2c5c>
   13ca0:	ldr	r3, [sp, #8]
   13ca4:	ldr	r1, [sp, #12]
   13ca8:	lsl	r2, r1, #10
   13cac:	lsr	r0, r1, #22
   13cb0:	orr	r2, r2, r3, lsr #22
   13cb4:	lsl	r3, r3, #10
   13cb8:	b	13d98 <__assert_fail@plt+0x2e58>
   13cbc:	cmp	r8, #109	; 0x6d
   13cc0:	beq	13c2c <__assert_fail@plt+0x2cec>
   13cc4:	cmp	r8, #116	; 0x74
   13cc8:	beq	13c2c <__assert_fail@plt+0x2cec>
   13ccc:	cmp	r8, #107	; 0x6b
   13cd0:	b	13bf8 <__assert_fail@plt+0x2cb8>
   13cd4:	ldrb	r3, [r9, #2]
   13cd8:	cmp	r3, #66	; 0x42
   13cdc:	movne	r5, #1
   13ce0:	moveq	r5, #3
   13ce4:	mov	r1, #1024	; 0x400
   13ce8:	b	13c70 <__assert_fail@plt+0x2d30>
   13cec:	cmp	r8, #80	; 0x50
   13cf0:	beq	13dfc <__assert_fail@plt+0x2ebc>
   13cf4:	cmp	r8, #84	; 0x54
   13cf8:	beq	13e04 <__assert_fail@plt+0x2ec4>
   13cfc:	cmp	r8, #77	; 0x4d
   13d00:	bne	13b9c <__assert_fail@plt+0x2c5c>
   13d04:	mov	r2, #2
   13d08:	b	13dec <__assert_fail@plt+0x2eac>
   13d0c:	cmp	r8, #103	; 0x67
   13d10:	beq	13df4 <__assert_fail@plt+0x2eb4>
   13d14:	bhi	13d38 <__assert_fail@plt+0x2df8>
   13d18:	cmp	r8, #98	; 0x62
   13d1c:	beq	13d80 <__assert_fail@plt+0x2e40>
   13d20:	cmp	r8, #99	; 0x63
   13d24:	beq	13e1c <__assert_fail@plt+0x2edc>
   13d28:	cmp	r8, #90	; 0x5a
   13d2c:	bne	13b9c <__assert_fail@plt+0x2c5c>
   13d30:	mov	r2, #7
   13d34:	b	13dec <__assert_fail@plt+0x2eac>
   13d38:	cmp	r8, #109	; 0x6d
   13d3c:	beq	13d04 <__assert_fail@plt+0x2dc4>
   13d40:	bhi	13d54 <__assert_fail@plt+0x2e14>
   13d44:	cmp	r8, #107	; 0x6b
   13d48:	bne	13b9c <__assert_fail@plt+0x2c5c>
   13d4c:	mov	r2, #1
   13d50:	b	13dec <__assert_fail@plt+0x2eac>
   13d54:	cmp	r8, #116	; 0x74
   13d58:	beq	13e04 <__assert_fail@plt+0x2ec4>
   13d5c:	cmp	r8, #119	; 0x77
   13d60:	bne	13b9c <__assert_fail@plt+0x2c5c>
   13d64:	ldr	r3, [sp, #8]
   13d68:	ldr	r2, [sp, #12]
   13d6c:	ldr	r0, [sp, #12]
   13d70:	adds	r3, r3, r3
   13d74:	adc	r2, r2, r2
   13d78:	lsr	r0, r0, #31
   13d7c:	b	13d98 <__assert_fail@plt+0x2e58>
   13d80:	ldr	r3, [sp, #8]
   13d84:	ldr	r1, [sp, #12]
   13d88:	lsl	r2, r1, #9
   13d8c:	lsr	r0, r1, #23
   13d90:	orr	r2, r2, r3, lsr #23
   13d94:	lsl	r3, r3, #9
   13d98:	adds	r0, r0, #0
   13d9c:	movne	r0, #1
   13da0:	cmp	r0, #0
   13da4:	streq	r3, [sp, #8]
   13da8:	streq	r2, [sp, #12]
   13dac:	beq	13dc0 <__assert_fail@plt+0x2e80>
   13db0:	mvn	r2, #0
   13db4:	mvn	r3, #0
   13db8:	mov	r0, #1
   13dbc:	strd	r2, [sp, #8]
   13dc0:	ldr	r3, [r6]
   13dc4:	orr	r4, r4, r0
   13dc8:	add	r2, r3, r5
   13dcc:	str	r2, [r6]
   13dd0:	ldrb	r3, [r3, r5]
   13dd4:	cmp	r3, #0
   13dd8:	orrne	r4, r4, #2
   13ddc:	ldrd	r2, [sp, #8]
   13de0:	strd	r2, [r7]
   13de4:	b	13b18 <__assert_fail@plt+0x2bd8>
   13de8:	mov	r2, #6
   13dec:	add	r0, sp, #8
   13df0:	b	13e14 <__assert_fail@plt+0x2ed4>
   13df4:	mov	r2, #3
   13df8:	b	13dec <__assert_fail@plt+0x2eac>
   13dfc:	mov	r2, #5
   13e00:	b	13dec <__assert_fail@plt+0x2eac>
   13e04:	mov	r2, #4
   13e08:	b	13dec <__assert_fail@plt+0x2eac>
   13e0c:	mov	r2, #8
   13e10:	add	r0, sp, r2
   13e14:	bl	13a08 <__assert_fail@plt+0x2ac8>
   13e18:	b	13dc0 <__assert_fail@plt+0x2e80>
   13e1c:	mov	r0, #0
   13e20:	b	13dc0 <__assert_fail@plt+0x2e80>
   13e24:	muleq	r1, r6, sl
   13e28:	andeq	r4, r1, r1, lsr #21
   13e2c:	andeq	r4, r1, pc, lsr #21
   13e30:	cmp	r1, #0
   13e34:	cmpne	r0, #0
   13e38:	beq	13e70 <__assert_fail@plt+0x2f30>
   13e3c:	push	{r4, r5, r6, lr}
   13e40:	umull	r4, r5, r0, r1
   13e44:	adds	r3, r5, #0
   13e48:	movne	r3, #1
   13e4c:	cmp	r4, #0
   13e50:	blt	13e5c <__assert_fail@plt+0x2f1c>
   13e54:	cmp	r3, #0
   13e58:	beq	13e7c <__assert_fail@plt+0x2f3c>
   13e5c:	bl	10e5c <__errno_location@plt>
   13e60:	mov	r3, #12
   13e64:	str	r3, [r0]
   13e68:	mov	r0, #0
   13e6c:	pop	{r4, r5, r6, pc}
   13e70:	mov	r1, #1
   13e74:	mov	r0, r1
   13e78:	b	10cd0 <calloc@plt>
   13e7c:	pop	{r4, r5, r6, lr}
   13e80:	b	13e78 <__assert_fail@plt+0x2f38>
   13e84:	cmp	r0, #0
   13e88:	beq	13ea8 <__assert_fail@plt+0x2f68>
   13e8c:	bge	13eac <__assert_fail@plt+0x2f6c>
   13e90:	push	{r4, lr}
   13e94:	bl	10e5c <__errno_location@plt>
   13e98:	mov	r3, #12
   13e9c:	str	r3, [r0]
   13ea0:	mov	r0, #0
   13ea4:	pop	{r4, pc}
   13ea8:	mov	r0, #1
   13eac:	b	10df0 <malloc@plt>
   13eb0:	cmp	r0, #0
   13eb4:	bne	13ec0 <__assert_fail@plt+0x2f80>
   13eb8:	mov	r0, r1
   13ebc:	b	13e84 <__assert_fail@plt+0x2f44>
   13ec0:	cmp	r1, #0
   13ec4:	push	{r4, lr}
   13ec8:	bne	13ed8 <__assert_fail@plt+0x2f98>
   13ecc:	bl	13f64 <__assert_fail@plt+0x3024>
   13ed0:	mov	r0, #0
   13ed4:	pop	{r4, pc}
   13ed8:	blt	13ee4 <__assert_fail@plt+0x2fa4>
   13edc:	pop	{r4, lr}
   13ee0:	b	10d84 <realloc@plt>
   13ee4:	bl	10e5c <__errno_location@plt>
   13ee8:	mov	r3, #12
   13eec:	str	r3, [r0]
   13ef0:	b	13ed0 <__assert_fail@plt+0x2f90>
   13ef4:	push	{r4, r5, r6, lr}
   13ef8:	mov	r4, r0
   13efc:	bl	10dc0 <__fpending@plt>
   13f00:	mov	r5, r0
   13f04:	mov	r0, r4
   13f08:	bl	10dcc <ferror_unlocked@plt>
   13f0c:	mov	r6, r0
   13f10:	mov	r0, r4
   13f14:	bl	11970 <__assert_fail@plt+0xa30>
   13f18:	cmp	r6, #0
   13f1c:	mov	r4, r0
   13f20:	bne	13f4c <__assert_fail@plt+0x300c>
   13f24:	cmp	r0, #0
   13f28:	beq	13f44 <__assert_fail@plt+0x3004>
   13f2c:	cmp	r5, #0
   13f30:	bne	13f5c <__assert_fail@plt+0x301c>
   13f34:	bl	10e5c <__errno_location@plt>
   13f38:	ldr	r4, [r0]
   13f3c:	subs	r4, r4, #9
   13f40:	mvnne	r4, #0
   13f44:	mov	r0, r4
   13f48:	pop	{r4, r5, r6, pc}
   13f4c:	cmp	r0, #0
   13f50:	bne	13f5c <__assert_fail@plt+0x301c>
   13f54:	bl	10e5c <__errno_location@plt>
   13f58:	str	r4, [r0]
   13f5c:	mvn	r4, #0
   13f60:	b	13f44 <__assert_fail@plt+0x3004>
   13f64:	push	{r0, r1, r2, r4, r5, lr}
   13f68:	mov	r5, r0
   13f6c:	bl	10e5c <__errno_location@plt>
   13f70:	mov	r4, r0
   13f74:	mov	r0, r5
   13f78:	ldr	r3, [r4]
   13f7c:	str	r3, [sp]
   13f80:	str	r3, [sp, #4]
   13f84:	mov	r3, #0
   13f88:	str	r3, [r4]
   13f8c:	bl	10d18 <free@plt>
   13f90:	ldr	r3, [r4]
   13f94:	add	r2, sp, #8
   13f98:	clz	r3, r3
   13f9c:	lsr	r3, r3, #5
   13fa0:	add	r3, r2, r3, lsl #2
   13fa4:	ldr	r3, [r3, #-8]
   13fa8:	str	r3, [r4]
   13fac:	add	sp, sp, #12
   13fb0:	pop	{r4, r5, pc}
   13fb4:	b	13e84 <__assert_fail@plt+0x2f44>
   13fb8:	cmp	r1, #0
   13fbc:	orreq	r1, r1, #1
   13fc0:	b	13eb0 <__assert_fail@plt+0x2f70>
   13fc4:	b	13e30 <__assert_fail@plt+0x2ef0>
   13fc8:	cmp	r2, #0
   13fcc:	cmpne	r1, #0
   13fd0:	moveq	r2, #1
   13fd4:	moveq	r1, r2
   13fd8:	b	14060 <__assert_fail@plt+0x3120>
   13fdc:	push	{r4, lr}
   13fe0:	mov	r0, #14
   13fe4:	bl	10ee0 <nl_langinfo@plt>
   13fe8:	cmp	r0, #0
   13fec:	beq	14004 <__assert_fail@plt+0x30c4>
   13ff0:	ldrb	r2, [r0]
   13ff4:	ldr	r3, [pc, #16]	; 1400c <__assert_fail@plt+0x30cc>
   13ff8:	cmp	r2, #0
   13ffc:	moveq	r0, r3
   14000:	pop	{r4, pc}
   14004:	ldr	r0, [pc]	; 1400c <__assert_fail@plt+0x30cc>
   14008:	pop	{r4, pc}
   1400c:	ldrdeq	r4, [r1], -r5
   14010:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14014:	subs	r5, r0, #0
   14018:	mov	r7, r2
   1401c:	addeq	r5, sp, #4
   14020:	mov	r6, r1
   14024:	mov	r0, r5
   14028:	bl	10dd8 <mbrtowc@plt>
   1402c:	cmp	r7, #0
   14030:	cmnne	r0, #3
   14034:	mov	r4, r0
   14038:	bls	14054 <__assert_fail@plt+0x3114>
   1403c:	mov	r0, #0
   14040:	bl	1408c <__assert_fail@plt+0x314c>
   14044:	cmp	r0, #0
   14048:	ldrbeq	r3, [r6]
   1404c:	moveq	r4, #1
   14050:	streq	r3, [r5]
   14054:	mov	r0, r4
   14058:	add	sp, sp, #12
   1405c:	pop	{r4, r5, r6, r7, pc}
   14060:	umull	r2, r3, r1, r2
   14064:	cmp	r3, #0
   14068:	bne	14074 <__assert_fail@plt+0x3134>
   1406c:	mov	r1, r2
   14070:	b	13eb0 <__assert_fail@plt+0x2f70>
   14074:	push	{r4, lr}
   14078:	bl	10e5c <__errno_location@plt>
   1407c:	mov	r3, #12
   14080:	str	r3, [r0]
   14084:	mov	r0, #0
   14088:	pop	{r4, pc}
   1408c:	push	{lr}		; (str lr, [sp, #-4]!)
   14090:	sub	sp, sp, #268	; 0x10c
   14094:	movw	r2, #257	; 0x101
   14098:	add	r1, sp, #4
   1409c:	bl	140e8 <__assert_fail@plt+0x31a8>
   140a0:	cmp	r0, #0
   140a4:	movne	r0, #0
   140a8:	bne	140d8 <__assert_fail@plt+0x3198>
   140ac:	ldr	r1, [pc, #44]	; 140e0 <__assert_fail@plt+0x31a0>
   140b0:	add	r0, sp, #4
   140b4:	bl	10ce8 <strcmp@plt>
   140b8:	cmp	r0, #0
   140bc:	beq	140d4 <__assert_fail@plt+0x3194>
   140c0:	ldr	r1, [pc, #28]	; 140e4 <__assert_fail@plt+0x31a4>
   140c4:	add	r0, sp, #4
   140c8:	bl	10ce8 <strcmp@plt>
   140cc:	adds	r0, r0, #0
   140d0:	movne	r0, #1
   140d4:	and	r0, r0, #1
   140d8:	add	sp, sp, #268	; 0x10c
   140dc:	pop	{pc}		; (ldr pc, [sp], #4)
   140e0:	ldrdeq	r4, [r1], -fp
   140e4:	ldrdeq	r4, [r1], -sp
   140e8:	push	{r4, r5, r6, lr}
   140ec:	mov	r5, r1
   140f0:	mov	r1, #0
   140f4:	mov	r4, r2
   140f8:	bl	10ec8 <setlocale@plt>
   140fc:	subs	r6, r0, #0
   14100:	bne	14114 <__assert_fail@plt+0x31d4>
   14104:	cmp	r4, #0
   14108:	mov	r0, #22
   1410c:	strbne	r6, [r5]
   14110:	pop	{r4, r5, r6, pc}
   14114:	bl	10e44 <strlen@plt>
   14118:	cmp	r4, r0
   1411c:	bls	14138 <__assert_fail@plt+0x31f8>
   14120:	add	r2, r0, #1
   14124:	mov	r1, r6
   14128:	mov	r0, r5
   1412c:	bl	10d30 <memcpy@plt>
   14130:	mov	r0, #0
   14134:	pop	{r4, r5, r6, pc}
   14138:	cmp	r4, #0
   1413c:	beq	1415c <__assert_fail@plt+0x321c>
   14140:	sub	r4, r4, #1
   14144:	mov	r1, r6
   14148:	mov	r2, r4
   1414c:	mov	r0, r5
   14150:	bl	10d30 <memcpy@plt>
   14154:	mov	r3, #0
   14158:	strb	r3, [r5, r4]
   1415c:	mov	r0, #34	; 0x22
   14160:	pop	{r4, r5, r6, pc}
   14164:	mov	r1, #0
   14168:	b	10ec8 <setlocale@plt>
   1416c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14170:	mov	r7, r0
   14174:	ldr	r6, [pc, #72]	; 141c4 <__assert_fail@plt+0x3284>
   14178:	ldr	r5, [pc, #72]	; 141c8 <__assert_fail@plt+0x3288>
   1417c:	add	r6, pc, r6
   14180:	add	r5, pc, r5
   14184:	sub	r6, r6, r5
   14188:	mov	r8, r1
   1418c:	mov	r9, r2
   14190:	bl	10cb0 <calloc@plt-0x20>
   14194:	asrs	r6, r6, #2
   14198:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1419c:	mov	r4, #0
   141a0:	add	r4, r4, #1
   141a4:	ldr	r3, [r5], #4
   141a8:	mov	r2, r9
   141ac:	mov	r1, r8
   141b0:	mov	r0, r7
   141b4:	blx	r3
   141b8:	cmp	r6, r4
   141bc:	bne	141a0 <__assert_fail@plt+0x3260>
   141c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141c4:	muleq	r1, r0, sp
   141c8:	andeq	r0, r1, r8, lsl #27
   141cc:	bx	lr
   141d0:	ldr	r3, [pc, #12]	; 141e4 <__assert_fail@plt+0x32a4>
   141d4:	mov	r1, #0
   141d8:	add	r3, pc, r3
   141dc:	ldr	r2, [r3]
   141e0:	b	10e68 <__cxa_atexit@plt>
   141e4:	andeq	r0, r1, r8, lsl #30

Disassembly of section .fini:

000141e8 <.fini>:
   141e8:	push	{r3, lr}
   141ec:	pop	{r3, pc}
