
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010eb8 <.init>:
   10eb8:	push	{r3, lr}
   10ebc:	bl	11178 <close@plt+0x48>
   10ec0:	pop	{r3, pc}

Disassembly of section .plt:

00010ec4 <calloc@plt-0x14>:
   10ec4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ec8:	ldr	lr, [pc, #4]	; 10ed4 <calloc@plt-0x4>
   10ecc:	add	lr, pc, lr
   10ed0:	ldr	pc, [lr, #8]!
   10ed4:	andeq	r6, r1, ip, lsr #2

00010ed8 <calloc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #300]!	; 0x12c

00010ee4 <fputs_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #292]!	; 0x124

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #284]!	; 0x11c

00010efc <fflush@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #276]!	; 0x114

00010f08 <free@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #268]!	; 0x10c

00010f14 <_exit@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #260]!	; 0x104

00010f20 <memcpy@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #252]!	; 0xfc

00010f2c <mbsinit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #244]!	; 0xf4

00010f38 <fwrite_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #236]!	; 0xec

00010f44 <dcgettext@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #228]!	; 0xe4

00010f50 <dup2@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #220]!	; 0xdc

00010f5c <realloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #212]!	; 0xd4

00010f68 <textdomain@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #204]!	; 0xcc

00010f74 <iswprint@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #196]!	; 0xc4

00010f80 <lseek64@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #188]!	; 0xbc

00010f8c <__ctype_get_mb_cur_max@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #180]!	; 0xb4

00010f98 <__fpending@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #172]!	; 0xac

00010fa4 <ferror_unlocked@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #164]!	; 0xa4

00010fb0 <mbrtowc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #156]!	; 0x9c

00010fbc <error@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #148]!	; 0x94

00010fc8 <fnmatch@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #140]!	; 0x8c

00010fd4 <open64@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #132]!	; 0x84

00010fe0 <getenv@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #124]!	; 0x7c

00010fec <puts@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #116]!	; 0x74

00010ff8 <malloc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #108]!	; 0x6c

00011004 <__libc_start_main@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #100]!	; 0x64

00011010 <__freading@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #92]!	; 0x5c

0001101c <__gmon_start__@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #84]!	; 0x54

00011028 <freopen64@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #76]!	; 0x4c

00011034 <getopt_long@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #68]!	; 0x44

00011040 <__ctype_b_loc@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #60]!	; 0x3c

0001104c <exit@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #52]!	; 0x34

00011058 <bcmp@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #44]!	; 0x2c

00011064 <strlen@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #36]!	; 0x24

00011070 <__errno_location@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #28]!

0001107c <__cxa_atexit@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #20]!

00011088 <memset@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #12]!

00011094 <__printf_chk@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #4]!

000110a0 <fileno@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #4092]!	; 0xffc

000110ac <__fprintf_chk@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #4084]!	; 0xff4

000110b8 <fclose@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #4076]!	; 0xfec

000110c4 <fseeko64@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110d0 <setlocale@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110dc <strrchr@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110e8 <nl_langinfo@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4044]!	; 0xfcc

000110f4 <bindtextdomain@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4036]!	; 0xfc4

00011100 <getline@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4028]!	; 0xfbc

0001110c <fputs@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #4020]!	; 0xfb4

00011118 <strncmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #4012]!	; 0xfac

00011124 <abort@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011130 <close@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3996]!	; 0xf9c

Disassembly of section .text:

0001113c <_obstack_begin@@Base-0x1390>:
   1113c:	mov	fp, #0
   11140:	mov	lr, #0
   11144:	pop	{r1}		; (ldr r1, [sp], #4)
   11148:	mov	r2, sp
   1114c:	push	{r2}		; (str r2, [sp, #-4]!)
   11150:	push	{r0}		; (str r0, [sp, #-4]!)
   11154:	ldr	ip, [pc, #16]	; 1116c <close@plt+0x3c>
   11158:	push	{ip}		; (str ip, [sp, #-4]!)
   1115c:	ldr	r0, [pc, #12]	; 11170 <close@plt+0x40>
   11160:	ldr	r3, [pc, #12]	; 11174 <close@plt+0x44>
   11164:	bl	11004 <__libc_start_main@plt>
   11168:	bl	11124 <abort@plt>
   1116c:	andeq	r5, r1, r4, rrx
   11170:	andeq	r1, r1, ip, ror #8
   11174:	andeq	r5, r1, r4
   11178:	ldr	r3, [pc, #20]	; 11194 <close@plt+0x64>
   1117c:	ldr	r2, [pc, #20]	; 11198 <close@plt+0x68>
   11180:	add	r3, pc, r3
   11184:	ldr	r2, [r3, r2]
   11188:	cmp	r2, #0
   1118c:	bxeq	lr
   11190:	b	1101c <__gmon_start__@plt>
   11194:	andeq	r5, r1, r8, ror lr
   11198:	ldrdeq	r0, [r0], -r8
   1119c:	ldr	r0, [pc, #24]	; 111bc <close@plt+0x8c>
   111a0:	ldr	r3, [pc, #24]	; 111c0 <close@plt+0x90>
   111a4:	cmp	r3, r0
   111a8:	bxeq	lr
   111ac:	ldr	r3, [pc, #16]	; 111c4 <close@plt+0x94>
   111b0:	cmp	r3, #0
   111b4:	bxeq	lr
   111b8:	bx	r3
   111bc:	andeq	r7, r2, r8, lsr r1
   111c0:	andeq	r7, r2, r8, lsr r1
   111c4:	andeq	r0, r0, r0
   111c8:	ldr	r0, [pc, #36]	; 111f4 <close@plt+0xc4>
   111cc:	ldr	r1, [pc, #36]	; 111f8 <close@plt+0xc8>
   111d0:	sub	r1, r1, r0
   111d4:	asr	r1, r1, #2
   111d8:	add	r1, r1, r1, lsr #31
   111dc:	asrs	r1, r1, #1
   111e0:	bxeq	lr
   111e4:	ldr	r3, [pc, #16]	; 111fc <close@plt+0xcc>
   111e8:	cmp	r3, #0
   111ec:	bxeq	lr
   111f0:	bx	r3
   111f4:	andeq	r7, r2, r8, lsr r1
   111f8:	andeq	r7, r2, r8, lsr r1
   111fc:	andeq	r0, r0, r0
   11200:	push	{r4, lr}
   11204:	ldr	r4, [pc, #24]	; 11224 <close@plt+0xf4>
   11208:	ldrb	r3, [r4]
   1120c:	cmp	r3, #0
   11210:	popne	{r4, pc}
   11214:	bl	1119c <close@plt+0x6c>
   11218:	mov	r3, #1
   1121c:	strb	r3, [r4]
   11220:	pop	{r4, pc}
   11224:	andeq	r7, r2, r8, asr r1
   11228:	b	111c8 <close@plt+0x98>
   1122c:	push	{fp, lr}
   11230:	mov	fp, sp
   11234:	sub	sp, sp, #56	; 0x38
   11238:	mov	r8, r0
   1123c:	cmp	r0, #0
   11240:	bne	1142c <close@plt+0x2fc>
   11244:	movw	r1, #20659	; 0x50b3
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10f44 <dcgettext@plt>
   11258:	mov	r1, r0
   1125c:	movw	r0, #29072	; 0x7190
   11260:	movt	r0, #2
   11264:	ldr	r2, [r0]
   11268:	mov	r0, #1
   1126c:	bl	11094 <__printf_chk@plt>
   11270:	movw	r1, #20689	; 0x50d1
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	movt	r1, #1
   11280:	bl	10f44 <dcgettext@plt>
   11284:	movw	r9, #29012	; 0x7154
   11288:	movt	r9, #2
   1128c:	ldr	r1, [r9]
   11290:	bl	10ee4 <fputs_unlocked@plt>
   11294:	movw	r1, #20963	; 0x51e3
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f44 <dcgettext@plt>
   112a8:	ldr	r1, [r9]
   112ac:	bl	10ee4 <fputs_unlocked@plt>
   112b0:	movw	r1, #21008	; 0x5210
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10f44 <dcgettext@plt>
   112c4:	ldr	r1, [r9]
   112c8:	bl	10ee4 <fputs_unlocked@plt>
   112cc:	movw	r1, #21062	; 0x5246
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10f44 <dcgettext@plt>
   112e0:	ldr	r1, [r9]
   112e4:	bl	10ee4 <fputs_unlocked@plt>
   112e8:	movw	r0, #26880	; 0x6900
   112ec:	mov	r6, sp
   112f0:	movt	r0, #1
   112f4:	mov	r1, r6
   112f8:	ldm	r0!, {r2, r3, r4, r5}
   112fc:	stmia	r1!, {r2, r3, r4, r5}
   11300:	ldm	r0!, {r2, r3, r4, r5, r7}
   11304:	stmia	r1!, {r2, r3, r4, r5, r7}
   11308:	ldm	r0, {r2, r3, r4, r5, r7}
   1130c:	stm	r1, {r2, r3, r4, r5, r7}
   11310:	movw	r1, #21645	; 0x548d
   11314:	movw	r5, #21284	; 0x5324
   11318:	movt	r1, #1
   1131c:	movt	r5, #1
   11320:	mov	r0, r5
   11324:	bl	10ef0 <strcmp@plt>
   11328:	cmp	r0, #0
   1132c:	ldrne	r1, [r6, #8]!
   11330:	cmpne	r1, #0
   11334:	bne	11320 <close@plt+0x1f0>
   11338:	movw	r1, #21740	; 0x54ec
   1133c:	ldr	r6, [r6, #4]
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10f44 <dcgettext@plt>
   11350:	movw	r2, #21322	; 0x534a
   11354:	movw	r3, #21763	; 0x5503
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	movt	r2, #1
   11364:	movt	r3, #1
   11368:	bl	11094 <__printf_chk@plt>
   1136c:	cmp	r6, #0
   11370:	mov	r0, #5
   11374:	mov	r1, #0
   11378:	moveq	r6, r5
   1137c:	bl	110d0 <setlocale@plt>
   11380:	cmp	r0, #0
   11384:	beq	113bc <close@plt+0x28c>
   11388:	movw	r1, #21803	; 0x552b
   1138c:	mov	r2, #3
   11390:	movt	r1, #1
   11394:	bl	11118 <strncmp@plt>
   11398:	cmp	r0, #0
   1139c:	beq	113bc <close@plt+0x28c>
   113a0:	movw	r1, #21807	; 0x552f
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10f44 <dcgettext@plt>
   113b4:	ldr	r1, [r9]
   113b8:	bl	10ee4 <fputs_unlocked@plt>
   113bc:	movw	r1, #21878	; 0x5576
   113c0:	mov	r0, #0
   113c4:	mov	r2, #5
   113c8:	movt	r1, #1
   113cc:	bl	10f44 <dcgettext@plt>
   113d0:	movw	r2, #21763	; 0x5503
   113d4:	mov	r1, r0
   113d8:	mov	r0, #1
   113dc:	mov	r3, r5
   113e0:	movt	r2, #1
   113e4:	bl	11094 <__printf_chk@plt>
   113e8:	movw	r1, #21905	; 0x5591
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	movt	r1, #1
   113f8:	bl	10f44 <dcgettext@plt>
   113fc:	mov	r1, r0
   11400:	movw	r0, #21673	; 0x54a9
   11404:	movw	r3, #21955	; 0x55c3
   11408:	cmp	r6, r5
   1140c:	mov	r2, r6
   11410:	movt	r0, #1
   11414:	movt	r3, #1
   11418:	moveq	r3, r0
   1141c:	mov	r0, #1
   11420:	bl	11094 <__printf_chk@plt>
   11424:	mov	r0, r8
   11428:	bl	1104c <exit@plt>
   1142c:	movw	r0, #29000	; 0x7148
   11430:	movw	r1, #20620	; 0x508c
   11434:	mov	r2, #5
   11438:	movt	r0, #2
   1143c:	movt	r1, #1
   11440:	ldr	r5, [r0]
   11444:	mov	r0, #0
   11448:	bl	10f44 <dcgettext@plt>
   1144c:	mov	r2, r0
   11450:	movw	r0, #29072	; 0x7190
   11454:	mov	r1, #1
   11458:	movt	r0, #2
   1145c:	ldr	r3, [r0]
   11460:	mov	r0, r5
   11464:	bl	110ac <__fprintf_chk@plt>
   11468:	b	11424 <close@plt+0x2f4>
   1146c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11470:	add	fp, sp, #28
   11474:	sub	sp, sp, #12
   11478:	mov	sl, r0
   1147c:	ldr	r0, [r1]
   11480:	mov	r5, r1
   11484:	bl	12870 <_obstack_memory_used@@Base+0x74>
   11488:	movw	r1, #21955	; 0x55c3
   1148c:	mov	r0, #6
   11490:	movt	r1, #1
   11494:	bl	110d0 <setlocale@plt>
   11498:	movw	r6, #21326	; 0x534e
   1149c:	movw	r1, #21294	; 0x532e
   114a0:	movt	r6, #1
   114a4:	movt	r1, #1
   114a8:	mov	r0, r6
   114ac:	bl	110f4 <bindtextdomain@plt>
   114b0:	mov	r0, r6
   114b4:	bl	10f68 <textdomain@plt>
   114b8:	movw	r0, #8272	; 0x2050
   114bc:	movt	r0, #1
   114c0:	bl	15068 <_obstack_memory_used@@Base+0x286c>
   114c4:	movw	r8, #21318	; 0x5346
   114c8:	movw	r9, #22440	; 0x57a8
   114cc:	mov	r6, #2
   114d0:	mov	r7, #0
   114d4:	movt	r8, #1
   114d8:	movt	r9, #1
   114dc:	mov	r4, r6
   114e0:	mov	r6, #0
   114e4:	mov	r0, sl
   114e8:	mov	r1, r5
   114ec:	mov	r2, r8
   114f0:	mov	r3, r9
   114f4:	str	r6, [sp]
   114f8:	bl	11034 <getopt_long@plt>
   114fc:	cmp	r0, #97	; 0x61
   11500:	ble	11530 <close@plt+0x400>
   11504:	cmp	r0, #98	; 0x62
   11508:	beq	114dc <close@plt+0x3ac>
   1150c:	cmp	r0, #112	; 0x70
   11510:	bne	11520 <close@plt+0x3f0>
   11514:	mov	r7, #1
   11518:	mov	r6, r4
   1151c:	b	114dc <close@plt+0x3ac>
   11520:	cmp	r0, #99	; 0x63
   11524:	bne	118e0 <close@plt+0x7b0>
   11528:	mov	r6, #1
   1152c:	b	114dc <close@plt+0x3ac>
   11530:	cmn	r0, #1
   11534:	bne	117e4 <close@plt+0x6b4>
   11538:	sub	r1, r4, #2
   1153c:	mvn	r0, r7
   11540:	clz	r1, r1
   11544:	lsr	r1, r1, #5
   11548:	orr	r0, r0, r1
   1154c:	tst	r0, #1
   11550:	beq	11844 <close@plt+0x714>
   11554:	movw	r0, #28992	; 0x7140
   11558:	movt	r0, #2
   1155c:	ldr	r0, [r0]
   11560:	add	r8, r5, r0, lsl #2
   11564:	sub	r5, sl, r0
   11568:	mov	r0, #1
   1156c:	bic	r6, r0, r7
   11570:	cmp	r5, r6
   11574:	bgt	1186c <close@plt+0x73c>
   11578:	tst	r7, #1
   1157c:	beq	115bc <close@plt+0x48c>
   11580:	movw	r5, #22568	; 0x5828
   11584:	movw	r6, #4310	; 0x10d6
   11588:	movt	r5, #1
   1158c:	mov	r4, r5
   11590:	mov	r0, r4
   11594:	bl	10fec <puts@plt>
   11598:	mov	r0, r4
   1159c:	bl	11064 <strlen@plt>
   115a0:	add	r0, r0, r4
   115a4:	add	r4, r0, #1
   115a8:	sub	r0, r4, r5
   115ac:	cmp	r0, r6
   115b0:	bcc	11590 <close@plt+0x460>
   115b4:	mov	r0, #0
   115b8:	b	117dc <close@plt+0x6ac>
   115bc:	cmp	r4, #2
   115c0:	bne	11640 <close@plt+0x510>
   115c4:	movw	r0, #22005	; 0x55f5
   115c8:	movt	r0, #1
   115cc:	bl	10fe0 <getenv@plt>
   115d0:	cmp	r0, #0
   115d4:	ldrbne	r1, [r0]
   115d8:	cmpne	r1, #0
   115dc:	bne	11604 <close@plt+0x4d4>
   115e0:	movw	r1, #21531	; 0x541b
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #1
   115f0:	bl	10f44 <dcgettext@plt>
   115f4:	mov	r2, r0
   115f8:	mov	r0, #1
   115fc:	mov	r1, #0
   11600:	bl	10fbc <error@plt>
   11604:	bl	11f5c <close@plt+0xe2c>
   11608:	movw	r1, #22012	; 0x55fc
   1160c:	mov	r4, r0
   11610:	movt	r1, #1
   11614:	bl	10ef0 <strcmp@plt>
   11618:	cmp	r0, #0
   1161c:	beq	1163c <close@plt+0x50c>
   11620:	movw	r1, #22011	; 0x55fb
   11624:	mov	r0, r4
   11628:	movt	r1, #1
   1162c:	bl	10ef0 <strcmp@plt>
   11630:	clz	r0, r0
   11634:	lsr	r4, r0, #5
   11638:	b	11640 <close@plt+0x510>
   1163c:	mov	r4, #1
   11640:	movw	r0, #8752	; 0x2230
   11644:	movw	r9, #29020	; 0x715c
   11648:	movw	r3, #19756	; 0x4d2c
   1164c:	mov	r1, #0
   11650:	mov	r2, #0
   11654:	movt	r0, #1
   11658:	movt	r9, #2
   1165c:	movt	r3, #1
   11660:	str	r0, [sp]
   11664:	mov	r0, r9
   11668:	bl	124cc <_obstack_begin@@Base>
   1166c:	cmp	r5, #0
   11670:	beq	1170c <close@plt+0x5dc>
   11674:	ldr	r5, [r8]
   11678:	movw	r1, #27367	; 0x6ae7
   1167c:	movt	r1, #1
   11680:	mov	r0, r5
   11684:	bl	10ef0 <strcmp@plt>
   11688:	movw	r6, #29008	; 0x7150
   1168c:	cmp	r0, #0
   11690:	movt	r6, #2
   11694:	beq	116b4 <close@plt+0x584>
   11698:	ldr	r2, [r6]
   1169c:	movw	r1, #27265	; 0x6a81
   116a0:	mov	r0, r5
   116a4:	movt	r1, #1
   116a8:	bl	12258 <close@plt+0x1128>
   116ac:	cmp	r0, #0
   116b0:	beq	116d4 <close@plt+0x5a4>
   116b4:	ldr	r0, [r6]
   116b8:	mov	r1, r5
   116bc:	bl	118e8 <close@plt+0x7b8>
   116c0:	mov	r7, r0
   116c4:	ldr	r0, [r6]
   116c8:	bl	12138 <close@plt+0x1008>
   116cc:	cmp	r0, #0
   116d0:	beq	117d0 <close@plt+0x6a0>
   116d4:	bl	11070 <__errno_location@plt>
   116d8:	ldr	r4, [r0]
   116dc:	mov	r0, #0
   116e0:	mov	r1, #3
   116e4:	mov	r2, r5
   116e8:	bl	140c8 <_obstack_memory_used@@Base+0x18cc>
   116ec:	movw	r2, #27271	; 0x6a87
   116f0:	mov	r3, r0
   116f4:	mov	r0, #0
   116f8:	mov	r1, r4
   116fc:	movt	r2, #1
   11700:	bl	10fbc <error@plt>
   11704:	mov	r0, #1
   11708:	b	117dc <close@plt+0x6ac>
   1170c:	mov	r0, #0
   11710:	mov	r1, #0
   11714:	bl	118e8 <close@plt+0x7b8>
   11718:	mov	r1, r0
   1171c:	mov	r0, #1
   11720:	cmp	r1, #0
   11724:	beq	117dc <close@plt+0x6ac>
   11728:	ldr	r5, [r9, #8]
   1172c:	ldr	r0, [r9, #12]
   11730:	subs	r7, r0, r5
   11734:	bne	11744 <close@plt+0x614>
   11738:	ldrb	r1, [r9, #40]	; 0x28
   1173c:	orr	r1, r1, #2
   11740:	strb	r1, [r9, #40]	; 0x28
   11744:	ldr	r3, [r9, #24]
   11748:	ldr	r1, [r9, #4]
   1174c:	ldr	r2, [r9, #16]
   11750:	movw	r6, #29012	; 0x7154
   11754:	movt	r6, #2
   11758:	add	r0, r3, r0
   1175c:	bic	r0, r0, r3
   11760:	sub	r3, r0, r1
   11764:	sub	r1, r2, r1
   11768:	cmp	r3, r1
   1176c:	movw	r1, #21593	; 0x5459
   11770:	movhi	r0, r2
   11774:	movt	r1, #1
   11778:	cmp	r4, #0
   1177c:	str	r0, [r9, #8]
   11780:	str	r0, [r9, #12]
   11784:	movw	r0, #21626	; 0x547a
   11788:	movt	r0, #1
   1178c:	moveq	r0, r1
   11790:	ldr	r1, [r6]
   11794:	bl	10ee4 <fputs_unlocked@plt>
   11798:	ldr	r3, [r6]
   1179c:	mov	r0, r5
   117a0:	mov	r1, #1
   117a4:	mov	r2, r7
   117a8:	bl	10f38 <fwrite_unlocked@plt>
   117ac:	movw	r1, #21605	; 0x5465
   117b0:	movw	r0, #21953	; 0x55c1
   117b4:	cmp	r4, #0
   117b8:	movt	r1, #1
   117bc:	movt	r0, #1
   117c0:	moveq	r0, r1
   117c4:	ldr	r1, [r6]
   117c8:	bl	10ee4 <fputs_unlocked@plt>
   117cc:	b	115b4 <close@plt+0x484>
   117d0:	mov	r0, #1
   117d4:	cmp	r7, #0
   117d8:	bne	11728 <close@plt+0x5f8>
   117dc:	sub	sp, fp, #28
   117e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117e4:	cmn	r0, #3
   117e8:	bne	11834 <close@plt+0x704>
   117ec:	movw	r0, #28904	; 0x70e8
   117f0:	movw	r2, #21336	; 0x5358
   117f4:	mov	r1, #0
   117f8:	movt	r0, #2
   117fc:	movt	r2, #1
   11800:	str	r1, [sp, #4]
   11804:	movw	r1, #21284	; 0x5324
   11808:	movt	r1, #1
   1180c:	ldr	r3, [r0]
   11810:	movw	r0, #29012	; 0x7154
   11814:	str	r2, [sp]
   11818:	movw	r2, #21322	; 0x534a
   1181c:	movt	r0, #2
   11820:	movt	r2, #1
   11824:	ldr	r0, [r0]
   11828:	bl	14760 <_obstack_memory_used@@Base+0x1f64>
   1182c:	mov	r0, #0
   11830:	bl	1104c <exit@plt>
   11834:	cmn	r0, #2
   11838:	bne	118e0 <close@plt+0x7b0>
   1183c:	mov	r0, #0
   11840:	bl	1122c <close@plt+0xfc>
   11844:	movw	r1, #21351	; 0x5367
   11848:	mov	r0, #0
   1184c:	mov	r2, #5
   11850:	movt	r1, #1
   11854:	bl	10f44 <dcgettext@plt>
   11858:	mov	r2, r0
   1185c:	mov	r0, #0
   11860:	mov	r1, #0
   11864:	bl	10fbc <error@plt>
   11868:	b	118e0 <close@plt+0x7b0>
   1186c:	movw	r1, #21454	; 0x53ce
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	movt	r1, #1
   1187c:	bl	10f44 <dcgettext@plt>
   11880:	mov	r4, r0
   11884:	ldr	r0, [r8, r6, lsl #2]
   11888:	bl	1425c <_obstack_memory_used@@Base+0x1a60>
   1188c:	mov	r3, r0
   11890:	mov	r0, #0
   11894:	mov	r1, #0
   11898:	mov	r2, r4
   1189c:	bl	10fbc <error@plt>
   118a0:	tst	r7, #1
   118a4:	beq	118e0 <close@plt+0x7b0>
   118a8:	movw	r0, #29000	; 0x7148
   118ac:	movw	r1, #21471	; 0x53df
   118b0:	mov	r2, #5
   118b4:	movt	r0, #2
   118b8:	movt	r1, #1
   118bc:	ldr	r4, [r0]
   118c0:	mov	r0, #0
   118c4:	bl	10f44 <dcgettext@plt>
   118c8:	movw	r2, #27552	; 0x6ba0
   118cc:	mov	r3, r0
   118d0:	mov	r0, r4
   118d4:	mov	r1, #1
   118d8:	movt	r2, #1
   118dc:	bl	110ac <__fprintf_chk@plt>
   118e0:	mov	r0, #1
   118e4:	bl	1122c <close@plt+0xfc>
   118e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118ec:	add	fp, sp, #28
   118f0:	sub	sp, sp, #44	; 0x2c
   118f4:	mov	r5, r0
   118f8:	mov	r0, #0
   118fc:	mov	sl, r1
   11900:	str	r0, [fp, #-32]	; 0xffffffe0
   11904:	str	r0, [sp, #36]	; 0x24
   11908:	movw	r0, #22016	; 0x5600
   1190c:	movt	r0, #1
   11910:	bl	10fe0 <getenv@plt>
   11914:	cmp	r0, #0
   11918:	beq	11928 <close@plt+0x7f8>
   1191c:	ldrb	r1, [r0]
   11920:	cmp	r1, #0
   11924:	bne	11930 <close@plt+0x800>
   11928:	movw	r0, #22021	; 0x5605
   1192c:	movt	r0, #1
   11930:	movw	r7, #22568	; 0x5828
   11934:	str	r0, [sp, #12]
   11938:	mov	r0, #1
   1193c:	mov	r9, #0
   11940:	movt	r7, #1
   11944:	str	r0, [sp, #28]
   11948:	mov	r0, #3
   1194c:	str	r0, [sp, #16]
   11950:	movw	r0, #4310	; 0x10d6
   11954:	add	r0, r7, r0
   11958:	str	r0, [sp, #32]
   1195c:	cmp	r5, #0
   11960:	beq	11988 <close@plt+0x858>
   11964:	sub	r0, fp, #32
   11968:	add	r1, sp, #36	; 0x24
   1196c:	mov	r2, r5
   11970:	bl	11100 <getline@plt>
   11974:	mov	r1, r0
   11978:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1197c:	cmp	r1, #0
   11980:	bgt	119ac <close@plt+0x87c>
   11984:	b	11dd8 <close@plt+0xca8>
   11988:	ldr	r0, [sp, #32]
   1198c:	cmp	r7, r0
   11990:	beq	11ddc <close@plt+0xcac>
   11994:	mov	r0, r7
   11998:	bl	11064 <strlen@plt>
   1199c:	add	r0, r0, r7
   119a0:	add	r1, r0, #1
   119a4:	mov	r0, r7
   119a8:	mov	r7, r1
   119ac:	add	r9, r9, #1
   119b0:	add	r6, r0, #3
   119b4:	sub	r4, r0, #1
   119b8:	bl	11040 <__ctype_b_loc@plt>
   119bc:	mov	r8, r0
   119c0:	ldr	r0, [r0]
   119c4:	ldrb	r2, [r4, #1]!
   119c8:	mov	r1, r6
   119cc:	add	r6, r6, #1
   119d0:	add	r3, r0, r2, lsl #1
   119d4:	ldrb	r3, [r3, #1]
   119d8:	tst	r3, #32
   119dc:	bne	119c4 <close@plt+0x894>
   119e0:	cmp	r2, #0
   119e4:	cmpne	r2, #35	; 0x23
   119e8:	beq	1195c <close@plt+0x82c>
   119ec:	mov	r6, r4
   119f0:	str	sl, [sp, #24]
   119f4:	mov	sl, r1
   119f8:	ldrb	r1, [r6, #1]!
   119fc:	cmp	r1, #0
   11a00:	beq	11a18 <close@plt+0x8e8>
   11a04:	add	r1, r0, r1, lsl #1
   11a08:	ldrh	r1, [r1]
   11a0c:	ands	r1, r1, #8192	; 0x2000
   11a10:	add	r1, sl, #1
   11a14:	beq	119f4 <close@plt+0x8c4>
   11a18:	sub	r1, r6, r4
   11a1c:	mov	r0, r4
   11a20:	bl	14c20 <_obstack_memory_used@@Base+0x2424>
   11a24:	str	r0, [sp, #20]
   11a28:	ldrb	r0, [r6]
   11a2c:	cmp	r0, #0
   11a30:	beq	11a60 <close@plt+0x930>
   11a34:	ldr	r0, [r8]
   11a38:	ldrb	r2, [r6, #1]!
   11a3c:	mov	r1, sl
   11a40:	add	sl, sl, #1
   11a44:	add	r3, r0, r2, lsl #1
   11a48:	ldrb	r3, [r3, #1]
   11a4c:	tst	r3, #32
   11a50:	bne	11a38 <close@plt+0x908>
   11a54:	cmp	r2, #0
   11a58:	cmpne	r2, #35	; 0x23
   11a5c:	bne	11ab8 <close@plt+0x988>
   11a60:	movw	r1, #22026	; 0x560a
   11a64:	mov	r0, #0
   11a68:	mov	r2, #5
   11a6c:	movt	r1, #1
   11a70:	str	r0, [sp, #28]
   11a74:	mov	r0, #0
   11a78:	bl	10f44 <dcgettext@plt>
   11a7c:	ldr	sl, [sp, #24]
   11a80:	mov	r4, r0
   11a84:	mov	r0, #0
   11a88:	mov	r1, #3
   11a8c:	mov	r2, sl
   11a90:	bl	140c8 <_obstack_memory_used@@Base+0x18cc>
   11a94:	mov	r3, r0
   11a98:	mov	r0, #0
   11a9c:	mov	r1, #0
   11aa0:	mov	r2, r4
   11aa4:	str	r9, [sp]
   11aa8:	bl	10fbc <error@plt>
   11aac:	ldr	r0, [sp, #20]
   11ab0:	bl	12230 <close@plt+0x1100>
   11ab4:	b	1195c <close@plt+0x82c>
   11ab8:	ldr	r8, [sp, #20]
   11abc:	mov	r3, r6
   11ac0:	uxtb	r2, r2
   11ac4:	cmp	r2, #35	; 0x23
   11ac8:	cmpne	r2, #0
   11acc:	beq	11adc <close@plt+0x9ac>
   11ad0:	ldrb	r2, [r3, #1]!
   11ad4:	add	r1, r1, #1
   11ad8:	b	11ac0 <close@plt+0x990>
   11adc:	movw	r4, #29020	; 0x715c
   11ae0:	movt	r4, #2
   11ae4:	ldrb	r2, [r1, #-2]
   11ae8:	sub	r1, r1, #1
   11aec:	add	r2, r0, r2, lsl #1
   11af0:	ldrb	r2, [r2, #1]
   11af4:	tst	r2, #32
   11af8:	bne	11ae4 <close@plt+0x9b4>
   11afc:	sub	r1, r1, r6
   11b00:	mov	r0, r6
   11b04:	bl	14c20 <_obstack_memory_used@@Base+0x2424>
   11b08:	movw	r1, #22016	; 0x5600
   11b0c:	mov	r6, r0
   11b10:	mov	r0, r8
   11b14:	movt	r1, #1
   11b18:	bl	11fdc <close@plt+0xeac>
   11b1c:	ldr	sl, [sp, #24]
   11b20:	cmp	r0, #0
   11b24:	beq	11bf8 <close@plt+0xac8>
   11b28:	ldr	r0, [sp, #16]
   11b2c:	cmp	r0, #2
   11b30:	movweq	r0, #1
   11b34:	cmp	r0, #0
   11b38:	beq	11c28 <close@plt+0xaf8>
   11b3c:	str	r0, [sp, #16]
   11b40:	ldrb	r0, [r8]
   11b44:	cmp	r0, #42	; 0x2a
   11b48:	beq	11b84 <close@plt+0xa54>
   11b4c:	cmp	r0, #46	; 0x2e
   11b50:	bne	11c4c <close@plt+0xb1c>
   11b54:	ldr	r0, [r4, #12]
   11b58:	ldr	r1, [r4, #16]
   11b5c:	cmp	r1, r0
   11b60:	bne	11b74 <close@plt+0xa44>
   11b64:	mov	r0, r4
   11b68:	mov	r1, #1
   11b6c:	bl	125d8 <_obstack_newchunk@@Base>
   11b70:	ldr	r0, [r4, #12]
   11b74:	add	r1, r0, #1
   11b78:	str	r1, [r4, #12]
   11b7c:	mov	r1, #42	; 0x2a
   11b80:	strb	r1, [r0]
   11b84:	mov	r0, r8
   11b88:	bl	11dec <close@plt+0xcbc>
   11b8c:	ldr	r0, [r4, #12]
   11b90:	ldr	r1, [r4, #16]
   11b94:	cmp	r1, r0
   11b98:	bne	11bac <close@plt+0xa7c>
   11b9c:	mov	r0, r4
   11ba0:	mov	r1, #1
   11ba4:	bl	125d8 <_obstack_newchunk@@Base>
   11ba8:	ldr	r0, [r4, #12]
   11bac:	add	r1, r0, #1
   11bb0:	str	r1, [r4, #12]
   11bb4:	mov	r1, #61	; 0x3d
   11bb8:	strb	r1, [r0]
   11bbc:	mov	r0, r6
   11bc0:	bl	11dec <close@plt+0xcbc>
   11bc4:	ldr	r0, [r4, #12]
   11bc8:	ldr	r1, [r4, #16]
   11bcc:	cmp	r1, r0
   11bd0:	bne	11be4 <close@plt+0xab4>
   11bd4:	mov	r0, r4
   11bd8:	mov	r1, #1
   11bdc:	bl	125d8 <_obstack_newchunk@@Base>
   11be0:	ldr	r0, [r4, #12]
   11be4:	add	r1, r0, #1
   11be8:	str	r1, [r4, #12]
   11bec:	mov	r1, #58	; 0x3a
   11bf0:	strb	r1, [r0]
   11bf4:	b	11c38 <close@plt+0xb08>
   11bf8:	ldr	r1, [sp, #12]
   11bfc:	mov	r0, r6
   11c00:	mov	r2, #0
   11c04:	bl	10fc8 <fnmatch@plt>
   11c08:	cmp	r0, #0
   11c0c:	beq	11c30 <close@plt+0xb00>
   11c10:	ldr	r0, [sp, #16]
   11c14:	sub	r0, r0, #2
   11c18:	clz	r0, r0
   11c1c:	lsr	r0, r0, #5
   11c20:	lsl	r0, r0, #1
   11c24:	b	11c34 <close@plt+0xb04>
   11c28:	mov	r0, #0
   11c2c:	b	11c34 <close@plt+0xb04>
   11c30:	mov	r0, #2
   11c34:	str	r0, [sp, #16]
   11c38:	mov	r0, r8
   11c3c:	bl	12230 <close@plt+0x1100>
   11c40:	mov	r0, r6
   11c44:	bl	12230 <close@plt+0x1100>
   11c48:	b	1195c <close@plt+0x82c>
   11c4c:	movw	r1, #22070	; 0x5636
   11c50:	mov	r0, r8
   11c54:	movt	r1, #1
   11c58:	bl	11fdc <close@plt+0xeac>
   11c5c:	cmp	r0, #0
   11c60:	beq	11c38 <close@plt+0xb08>
   11c64:	movw	r1, #22078	; 0x563e
   11c68:	mov	r0, r8
   11c6c:	movt	r1, #1
   11c70:	bl	11fdc <close@plt+0xeac>
   11c74:	cmp	r0, #0
   11c78:	beq	11c38 <close@plt+0xb08>
   11c7c:	movw	r1, #22084	; 0x5644
   11c80:	mov	r0, r8
   11c84:	movt	r1, #1
   11c88:	bl	11fdc <close@plt+0xeac>
   11c8c:	cmp	r0, #0
   11c90:	beq	11c38 <close@plt+0xb08>
   11c94:	str	r6, [sp, #8]
   11c98:	mov	r6, #0
   11c9c:	movw	r0, #26936	; 0x6938
   11ca0:	movt	r0, #1
   11ca4:	ldr	r1, [r0, r6, lsl #2]
   11ca8:	mov	r0, r8
   11cac:	bl	11fdc <close@plt+0xeac>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11d08 <close@plt+0xbd8>
   11cb8:	add	r6, r6, #1
   11cbc:	cmp	r6, #37	; 0x25
   11cc0:	bne	11c9c <close@plt+0xb6c>
   11cc4:	ldr	r0, [sp, #16]
   11cc8:	sub	r0, r0, #1
   11ccc:	cmp	r0, #1
   11cd0:	bhi	11dd0 <close@plt+0xca0>
   11cd4:	movw	r1, #22093	; 0x564d
   11cd8:	mov	r0, #0
   11cdc:	mov	r2, #5
   11ce0:	movt	r1, #1
   11ce4:	bl	10f44 <dcgettext@plt>
   11ce8:	mov	r6, r0
   11cec:	mov	r0, #0
   11cf0:	cmp	sl, #0
   11cf4:	beq	11d9c <close@plt+0xc6c>
   11cf8:	mov	r1, #3
   11cfc:	mov	r2, sl
   11d00:	bl	140c8 <_obstack_memory_used@@Base+0x18cc>
   11d04:	b	11dac <close@plt+0xc7c>
   11d08:	ldr	r0, [r4, #12]
   11d0c:	ldr	r1, [r4, #16]
   11d10:	cmp	r1, r0
   11d14:	bne	11d28 <close@plt+0xbf8>
   11d18:	mov	r0, r4
   11d1c:	mov	r1, #1
   11d20:	bl	125d8 <_obstack_newchunk@@Base>
   11d24:	ldr	r0, [r4, #12]
   11d28:	movw	r1, #27088	; 0x69d0
   11d2c:	add	r2, r0, #1
   11d30:	movt	r1, #1
   11d34:	ldr	r6, [r1, r6, lsl #2]
   11d38:	ldrb	r1, [r6]
   11d3c:	str	r2, [r4, #12]
   11d40:	strb	r1, [r0]
   11d44:	ldr	r0, [r4, #12]
   11d48:	ldr	r1, [r4, #16]
   11d4c:	cmp	r1, r0
   11d50:	bne	11d64 <close@plt+0xc34>
   11d54:	mov	r0, r4
   11d58:	mov	r1, #1
   11d5c:	bl	125d8 <_obstack_newchunk@@Base>
   11d60:	ldr	r0, [r4, #12]
   11d64:	ldrb	r1, [r6, #1]
   11d68:	add	r2, r0, #1
   11d6c:	str	r2, [r4, #12]
   11d70:	strb	r1, [r0]
   11d74:	ldr	r0, [r4, #12]
   11d78:	ldr	r1, [r4, #16]
   11d7c:	cmp	r1, r0
   11d80:	bne	11d94 <close@plt+0xc64>
   11d84:	mov	r0, r4
   11d88:	mov	r1, #1
   11d8c:	bl	125d8 <_obstack_newchunk@@Base>
   11d90:	ldr	r0, [r4, #12]
   11d94:	ldr	r6, [sp, #8]
   11d98:	b	11bac <close@plt+0xa7c>
   11d9c:	movw	r1, #22125	; 0x566d
   11da0:	mov	r2, #5
   11da4:	movt	r1, #1
   11da8:	bl	10f44 <dcgettext@plt>
   11dac:	mov	r3, r0
   11db0:	mov	r0, #0
   11db4:	mov	r1, #0
   11db8:	mov	r2, r6
   11dbc:	str	r9, [sp]
   11dc0:	str	r8, [sp, #4]
   11dc4:	str	r0, [sp, #28]
   11dc8:	mov	r0, #0
   11dcc:	bl	10fbc <error@plt>
   11dd0:	ldr	r6, [sp, #8]
   11dd4:	b	11c38 <close@plt+0xb08>
   11dd8:	bl	12230 <close@plt+0x1100>
   11ddc:	ldr	r0, [sp, #28]
   11de0:	and	r0, r0, #1
   11de4:	sub	sp, fp, #28
   11de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11df0:	add	fp, sp, #24
   11df4:	movw	r5, #29020	; 0x715c
   11df8:	mov	r4, r0
   11dfc:	mov	r0, #1
   11e00:	mov	r8, #39	; 0x27
   11e04:	mov	r7, #92	; 0x5c
   11e08:	movt	r5, #2
   11e0c:	ldrb	r1, [r4]
   11e10:	cmp	r1, #60	; 0x3c
   11e14:	ble	11e38 <close@plt+0xd08>
   11e18:	cmp	r1, #61	; 0x3d
   11e1c:	beq	11e48 <close@plt+0xd18>
   11e20:	cmp	r1, #92	; 0x5c
   11e24:	beq	11e84 <close@plt+0xd54>
   11e28:	cmp	r1, #94	; 0x5e
   11e2c:	mov	r6, #1
   11e30:	eoreq	r6, r0, #1
   11e34:	b	11f14 <close@plt+0xde4>
   11e38:	cmp	r1, #39	; 0x27
   11e3c:	beq	11e8c <close@plt+0xd5c>
   11e40:	cmp	r1, #58	; 0x3a
   11e44:	bne	11f4c <close@plt+0xe1c>
   11e48:	tst	r0, #1
   11e4c:	mov	r6, #1
   11e50:	beq	11f14 <close@plt+0xde4>
   11e54:	ldr	r0, [r5, #12]
   11e58:	ldr	r1, [r5, #16]
   11e5c:	cmp	r1, r0
   11e60:	bne	11e74 <close@plt+0xd44>
   11e64:	mov	r0, r5
   11e68:	mov	r1, #1
   11e6c:	bl	125d8 <_obstack_newchunk@@Base>
   11e70:	ldr	r0, [r5, #12]
   11e74:	add	r1, r0, #1
   11e78:	str	r1, [r5, #12]
   11e7c:	strb	r7, [r0]
   11e80:	b	11f10 <close@plt+0xde0>
   11e84:	eor	r6, r0, #1
   11e88:	b	11f14 <close@plt+0xde4>
   11e8c:	ldr	r0, [r5, #12]
   11e90:	ldr	r1, [r5, #16]
   11e94:	cmp	r1, r0
   11e98:	bne	11eac <close@plt+0xd7c>
   11e9c:	mov	r0, r5
   11ea0:	mov	r1, #1
   11ea4:	bl	125d8 <_obstack_newchunk@@Base>
   11ea8:	ldr	r0, [r5, #12]
   11eac:	add	r1, r0, #1
   11eb0:	str	r1, [r5, #12]
   11eb4:	strb	r8, [r0]
   11eb8:	ldr	r0, [r5, #12]
   11ebc:	ldr	r1, [r5, #16]
   11ec0:	cmp	r1, r0
   11ec4:	bne	11ed8 <close@plt+0xda8>
   11ec8:	mov	r0, r5
   11ecc:	mov	r1, #1
   11ed0:	bl	125d8 <_obstack_newchunk@@Base>
   11ed4:	ldr	r0, [r5, #12]
   11ed8:	add	r1, r0, #1
   11edc:	str	r1, [r5, #12]
   11ee0:	strb	r7, [r0]
   11ee4:	ldr	r0, [r5, #12]
   11ee8:	ldr	r1, [r5, #16]
   11eec:	cmp	r1, r0
   11ef0:	bne	11f04 <close@plt+0xdd4>
   11ef4:	mov	r0, r5
   11ef8:	mov	r1, #1
   11efc:	bl	125d8 <_obstack_newchunk@@Base>
   11f00:	ldr	r0, [r5, #12]
   11f04:	add	r1, r0, #1
   11f08:	str	r1, [r5, #12]
   11f0c:	strb	r8, [r0]
   11f10:	mov	r6, #1
   11f14:	ldr	r0, [r5, #12]
   11f18:	ldr	r1, [r5, #16]
   11f1c:	cmp	r1, r0
   11f20:	bne	11f34 <close@plt+0xe04>
   11f24:	mov	r0, r5
   11f28:	mov	r1, #1
   11f2c:	bl	125d8 <_obstack_newchunk@@Base>
   11f30:	ldr	r0, [r5, #12]
   11f34:	ldrb	r1, [r4], #1
   11f38:	add	r2, r0, #1
   11f3c:	str	r2, [r5, #12]
   11f40:	strb	r1, [r0]
   11f44:	mov	r0, r6
   11f48:	b	11e0c <close@plt+0xcdc>
   11f4c:	cmp	r1, #0
   11f50:	mov	r6, #1
   11f54:	bne	11f14 <close@plt+0xde4>
   11f58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f5c:	sub	r0, r0, #1
   11f60:	ldrb	r3, [r0, #1]!
   11f64:	cmp	r3, #47	; 0x2f
   11f68:	beq	11f60 <close@plt+0xe30>
   11f6c:	mov	r2, #0
   11f70:	mov	r1, r0
   11f74:	uxtb	r3, r3
   11f78:	cmp	r3, #47	; 0x2f
   11f7c:	beq	11f98 <close@plt+0xe68>
   11f80:	cmp	r3, #0
   11f84:	bxeq	lr
   11f88:	tst	r2, #1
   11f8c:	mov	r2, #0
   11f90:	movne	r0, r1
   11f94:	b	11f9c <close@plt+0xe6c>
   11f98:	mov	r2, #1
   11f9c:	ldrb	r3, [r1, #1]!
   11fa0:	b	11f74 <close@plt+0xe44>
   11fa4:	push	{r4, sl, fp, lr}
   11fa8:	add	fp, sp, #8
   11fac:	mov	r4, r0
   11fb0:	bl	11064 <strlen@plt>
   11fb4:	mov	r1, r0
   11fb8:	sub	r2, r4, #1
   11fbc:	mov	r0, r1
   11fc0:	cmp	r1, #2
   11fc4:	bcc	11fd8 <close@plt+0xea8>
   11fc8:	ldrb	r3, [r2, r0]
   11fcc:	sub	r1, r0, #1
   11fd0:	cmp	r3, #47	; 0x2f
   11fd4:	beq	11fbc <close@plt+0xe8c>
   11fd8:	pop	{r4, sl, fp, pc}
   11fdc:	cmp	r0, r1
   11fe0:	moveq	r0, #0
   11fe4:	bxeq	lr
   11fe8:	ldrb	r3, [r1]
   11fec:	ldrb	ip, [r0]
   11ff0:	sub	r2, r3, #65	; 0x41
   11ff4:	cmp	r2, #26
   11ff8:	sub	r2, ip, #65	; 0x41
   11ffc:	addcc	r3, r3, #32
   12000:	cmp	r2, #26
   12004:	addcc	ip, ip, #32
   12008:	uxtb	r3, r3
   1200c:	uxtb	r2, ip
   12010:	cmp	r2, #0
   12014:	beq	12028 <close@plt+0xef8>
   12018:	add	r1, r1, #1
   1201c:	add	r0, r0, #1
   12020:	cmp	r2, r3
   12024:	beq	11fe8 <close@plt+0xeb8>
   12028:	sub	r0, r2, r3
   1202c:	bx	lr
   12030:	movw	r1, #29064	; 0x7188
   12034:	movt	r1, #2
   12038:	str	r0, [r1]
   1203c:	bx	lr
   12040:	movw	r1, #29068	; 0x718c
   12044:	movt	r1, #2
   12048:	strb	r0, [r1]
   1204c:	bx	lr
   12050:	push	{r4, r5, r6, sl, fp, lr}
   12054:	add	fp, sp, #16
   12058:	sub	sp, sp, #8
   1205c:	movw	r0, #29012	; 0x7154
   12060:	movt	r0, #2
   12064:	ldr	r0, [r0]
   12068:	bl	14dac <_obstack_memory_used@@Base+0x25b0>
   1206c:	cmp	r0, #0
   12070:	beq	12098 <close@plt+0xf68>
   12074:	movw	r0, #29068	; 0x718c
   12078:	movt	r0, #2
   1207c:	ldrb	r0, [r0]
   12080:	cmp	r0, #0
   12084:	beq	120b8 <close@plt+0xf88>
   12088:	bl	11070 <__errno_location@plt>
   1208c:	ldr	r0, [r0]
   12090:	cmp	r0, #32
   12094:	bne	120b8 <close@plt+0xf88>
   12098:	movw	r0, #29000	; 0x7148
   1209c:	movt	r0, #2
   120a0:	ldr	r0, [r0]
   120a4:	bl	14dac <_obstack_memory_used@@Base+0x25b0>
   120a8:	cmp	r0, #0
   120ac:	subeq	sp, fp, #16
   120b0:	popeq	{r4, r5, r6, sl, fp, pc}
   120b4:	b	12128 <close@plt+0xff8>
   120b8:	movw	r1, #27255	; 0x6a77
   120bc:	mov	r0, #0
   120c0:	mov	r2, #5
   120c4:	movt	r1, #1
   120c8:	bl	10f44 <dcgettext@plt>
   120cc:	mov	r4, r0
   120d0:	movw	r0, #29064	; 0x7188
   120d4:	movt	r0, #2
   120d8:	ldr	r6, [r0]
   120dc:	bl	11070 <__errno_location@plt>
   120e0:	ldr	r5, [r0]
   120e4:	cmp	r6, #0
   120e8:	bne	12104 <close@plt+0xfd4>
   120ec:	movw	r2, #27271	; 0x6a87
   120f0:	mov	r0, #0
   120f4:	mov	r1, r5
   120f8:	mov	r3, r4
   120fc:	movt	r2, #1
   12100:	b	12124 <close@plt+0xff4>
   12104:	mov	r0, r6
   12108:	bl	1401c <_obstack_memory_used@@Base+0x1820>
   1210c:	movw	r2, #27267	; 0x6a83
   12110:	mov	r3, r0
   12114:	str	r4, [sp]
   12118:	mov	r0, #0
   1211c:	mov	r1, r5
   12120:	movt	r2, #1
   12124:	bl	10fbc <error@plt>
   12128:	movw	r0, #28908	; 0x70ec
   1212c:	movt	r0, #2
   12130:	ldr	r0, [r0]
   12134:	bl	10f14 <_exit@plt>
   12138:	push	{r4, r5, r6, sl, fp, lr}
   1213c:	add	fp, sp, #16
   12140:	sub	sp, sp, #8
   12144:	mov	r4, r0
   12148:	bl	110a0 <fileno@plt>
   1214c:	cmn	r0, #1
   12150:	ble	121c4 <close@plt+0x1094>
   12154:	mov	r0, r4
   12158:	bl	11010 <__freading@plt>
   1215c:	cmp	r0, #0
   12160:	beq	1218c <close@plt+0x105c>
   12164:	mov	r0, r4
   12168:	bl	110a0 <fileno@plt>
   1216c:	mov	r1, #1
   12170:	mov	r2, #0
   12174:	mov	r3, #0
   12178:	str	r1, [sp]
   1217c:	bl	10f80 <lseek64@plt>
   12180:	and	r0, r0, r1
   12184:	cmn	r0, #1
   12188:	beq	121c4 <close@plt+0x1094>
   1218c:	mov	r0, r4
   12190:	bl	121d4 <close@plt+0x10a4>
   12194:	cmp	r0, #0
   12198:	beq	121c4 <close@plt+0x1094>
   1219c:	bl	11070 <__errno_location@plt>
   121a0:	ldr	r6, [r0]
   121a4:	mov	r5, r0
   121a8:	mov	r0, r4
   121ac:	bl	110b8 <fclose@plt>
   121b0:	cmp	r6, #0
   121b4:	strne	r6, [r5]
   121b8:	mvnne	r0, #0
   121bc:	sub	sp, fp, #16
   121c0:	pop	{r4, r5, r6, sl, fp, pc}
   121c4:	mov	r0, r4
   121c8:	sub	sp, fp, #16
   121cc:	pop	{r4, r5, r6, sl, fp, lr}
   121d0:	b	110b8 <fclose@plt>
   121d4:	push	{r4, sl, fp, lr}
   121d8:	add	fp, sp, #8
   121dc:	sub	sp, sp, #8
   121e0:	mov	r4, r0
   121e4:	cmp	r0, #0
   121e8:	beq	12220 <close@plt+0x10f0>
   121ec:	mov	r0, r4
   121f0:	bl	11010 <__freading@plt>
   121f4:	cmp	r0, #0
   121f8:	beq	12220 <close@plt+0x10f0>
   121fc:	ldrb	r0, [r4, #1]
   12200:	tst	r0, #1
   12204:	beq	12220 <close@plt+0x10f0>
   12208:	mov	r0, #1
   1220c:	mov	r2, #0
   12210:	mov	r3, #0
   12214:	str	r0, [sp]
   12218:	mov	r0, r4
   1221c:	bl	12428 <close@plt+0x12f8>
   12220:	mov	r0, r4
   12224:	sub	sp, fp, #8
   12228:	pop	{r4, sl, fp, lr}
   1222c:	b	10efc <fflush@plt>
   12230:	push	{r4, r5, r6, sl, fp, lr}
   12234:	add	fp, sp, #16
   12238:	mov	r4, r0
   1223c:	bl	11070 <__errno_location@plt>
   12240:	ldr	r6, [r0]
   12244:	mov	r5, r0
   12248:	mov	r0, r4
   1224c:	bl	10f08 <free@plt>
   12250:	str	r6, [r5]
   12254:	pop	{r4, r5, r6, sl, fp, pc}
   12258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1225c:	add	fp, sp, #28
   12260:	sub	sp, sp, #4
   12264:	mov	r5, r0
   12268:	mov	r0, r2
   1226c:	mov	r4, r2
   12270:	mov	r8, r1
   12274:	bl	110a0 <fileno@plt>
   12278:	mov	r6, #0
   1227c:	cmp	r0, #0
   12280:	beq	122c0 <close@plt+0x1190>
   12284:	cmp	r0, #1
   12288:	beq	122cc <close@plt+0x119c>
   1228c:	cmp	r0, #2
   12290:	beq	122a8 <close@plt+0x1178>
   12294:	mov	r0, #2
   12298:	mov	r1, #2
   1229c:	bl	10f50 <dup2@plt>
   122a0:	subs	r6, r0, #2
   122a4:	movwne	r6, #1
   122a8:	mov	r0, #1
   122ac:	mov	r1, #1
   122b0:	bl	10f50 <dup2@plt>
   122b4:	subs	r7, r0, #1
   122b8:	movwne	r7, #1
   122bc:	b	122d0 <close@plt+0x11a0>
   122c0:	mov	r7, #0
   122c4:	mov	r9, #0
   122c8:	b	12378 <close@plt+0x1248>
   122cc:	mov	r7, #0
   122d0:	mov	r0, #0
   122d4:	mov	r1, #0
   122d8:	mov	sl, #0
   122dc:	bl	10f50 <dup2@plt>
   122e0:	cmp	r0, #0
   122e4:	mov	r9, #0
   122e8:	beq	12300 <close@plt+0x11d0>
   122ec:	mov	r0, #0
   122f0:	bl	123dc <close@plt+0x12ac>
   122f4:	mov	r9, #1
   122f8:	cmp	r0, #0
   122fc:	beq	1235c <close@plt+0x122c>
   12300:	cmp	r7, #0
   12304:	beq	1231c <close@plt+0x11ec>
   12308:	mov	r0, #1
   1230c:	mov	sl, #1
   12310:	bl	123dc <close@plt+0x12ac>
   12314:	cmp	r0, #0
   12318:	beq	1235c <close@plt+0x122c>
   1231c:	cmp	r6, #0
   12320:	beq	12370 <close@plt+0x1240>
   12324:	mov	r0, #2
   12328:	bl	123dc <close@plt+0x12ac>
   1232c:	mov	r6, #1
   12330:	cmp	r0, #0
   12334:	bne	12374 <close@plt+0x1244>
   12338:	bl	11070 <__errno_location@plt>
   1233c:	ldr	r8, [r0]
   12340:	mov	r4, r0
   12344:	mov	r0, #2
   12348:	bl	11130 <close@plt>
   1234c:	mov	r5, #0
   12350:	cmp	sl, #0
   12354:	bne	123b0 <close@plt+0x1280>
   12358:	b	123b8 <close@plt+0x1288>
   1235c:	bl	11070 <__errno_location@plt>
   12360:	ldr	r8, [r0]
   12364:	mov	r4, r0
   12368:	mov	r5, #0
   1236c:	b	12398 <close@plt+0x1268>
   12370:	mov	r6, #0
   12374:	mov	r7, sl
   12378:	mov	r0, r5
   1237c:	mov	r1, r8
   12380:	mov	r2, r4
   12384:	bl	11028 <freopen64@plt>
   12388:	mov	r5, r0
   1238c:	bl	11070 <__errno_location@plt>
   12390:	ldr	r8, [r0]
   12394:	mov	r4, r0
   12398:	cmp	r6, #0
   1239c:	beq	123a8 <close@plt+0x1278>
   123a0:	mov	r0, #2
   123a4:	bl	11130 <close@plt>
   123a8:	cmp	r7, #0
   123ac:	beq	123b8 <close@plt+0x1288>
   123b0:	mov	r0, #1
   123b4:	bl	11130 <close@plt>
   123b8:	cmp	r9, #0
   123bc:	beq	123c8 <close@plt+0x1298>
   123c0:	mov	r0, #0
   123c4:	bl	11130 <close@plt>
   123c8:	cmp	r5, #0
   123cc:	mov	r0, r5
   123d0:	streq	r8, [r4]
   123d4:	sub	sp, fp, #28
   123d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123dc:	push	{r4, sl, fp, lr}
   123e0:	add	fp, sp, #8
   123e4:	mov	r4, r0
   123e8:	movw	r0, #27274	; 0x6a8a
   123ec:	mov	r1, #0
   123f0:	movt	r0, #1
   123f4:	bl	10fd4 <open64@plt>
   123f8:	mov	r1, #1
   123fc:	cmp	r0, r4
   12400:	beq	12420 <close@plt+0x12f0>
   12404:	cmp	r0, #0
   12408:	bmi	1241c <close@plt+0x12ec>
   1240c:	bl	11130 <close@plt>
   12410:	bl	11070 <__errno_location@plt>
   12414:	mov	r1, #9
   12418:	str	r1, [r0]
   1241c:	mov	r1, #0
   12420:	mov	r0, r1
   12424:	pop	{r4, sl, fp, pc}
   12428:	push	{r4, r5, r6, r7, fp, lr}
   1242c:	add	fp, sp, #16
   12430:	sub	sp, sp, #8
   12434:	mov	r4, r0
   12438:	ldr	r0, [r0, #4]
   1243c:	mov	r5, r3
   12440:	mov	r6, r2
   12444:	ldr	r1, [r4, #8]
   12448:	cmp	r1, r0
   1244c:	bne	12468 <close@plt+0x1338>
   12450:	ldrd	r0, [r4, #16]
   12454:	cmp	r1, r0
   12458:	bne	12468 <close@plt+0x1338>
   1245c:	ldr	r0, [r4, #36]	; 0x24
   12460:	cmp	r0, #0
   12464:	beq	12480 <close@plt+0x1350>
   12468:	mov	r0, r4
   1246c:	mov	r2, r6
   12470:	mov	r3, r5
   12474:	sub	sp, fp, #16
   12478:	pop	{r4, r5, r6, r7, fp, lr}
   1247c:	b	110c4 <fseeko64@plt>
   12480:	ldr	r7, [fp, #8]
   12484:	mov	r0, r4
   12488:	bl	110a0 <fileno@plt>
   1248c:	mov	r2, r6
   12490:	mov	r3, r5
   12494:	str	r7, [sp]
   12498:	bl	10f80 <lseek64@plt>
   1249c:	and	r2, r0, r1
   124a0:	cmn	r2, #1
   124a4:	beq	124c0 <close@plt+0x1390>
   124a8:	strd	r0, [r4, #80]	; 0x50
   124ac:	ldr	r0, [r4]
   124b0:	bic	r0, r0, #16
   124b4:	str	r0, [r4]
   124b8:	mov	r0, #0
   124bc:	b	124c4 <close@plt+0x1394>
   124c0:	mvn	r0, #0
   124c4:	sub	sp, fp, #16
   124c8:	pop	{r4, r5, r6, r7, fp, pc}

000124cc <_obstack_begin@@Base>:
   124cc:	push	{fp, lr}
   124d0:	mov	fp, sp
   124d4:	str	r3, [r0, #28]
   124d8:	ldr	r3, [fp, #8]
   124dc:	str	r3, [r0, #32]
   124e0:	ldrb	r3, [r0, #40]	; 0x28
   124e4:	and	r3, r3, #254	; 0xfe
   124e8:	strb	r3, [r0, #40]	; 0x28
   124ec:	bl	124f8 <_obstack_begin@@Base+0x2c>
   124f0:	mov	r0, #1
   124f4:	pop	{fp, pc}
   124f8:	push	{r4, r5, r6, sl, fp, lr}
   124fc:	add	fp, sp, #16
   12500:	cmp	r1, #0
   12504:	mov	r5, r2
   12508:	mov	r4, r0
   1250c:	movweq	r1, #4072	; 0xfe8
   12510:	cmp	r2, #0
   12514:	movweq	r5, #8
   12518:	str	r1, [r0]
   1251c:	sub	r6, r5, #1
   12520:	str	r6, [r0, #24]
   12524:	ldrb	r0, [r0, #40]	; 0x28
   12528:	tst	r0, #1
   1252c:	bne	12540 <_obstack_begin@@Base+0x74>
   12530:	ldr	r2, [r4, #28]
   12534:	mov	r0, r1
   12538:	blx	r2
   1253c:	b	1254c <_obstack_begin@@Base+0x80>
   12540:	ldr	r2, [r4, #28]
   12544:	ldr	r0, [r4, #36]	; 0x24
   12548:	blx	r2
   1254c:	cmp	r0, #0
   12550:	str	r0, [r4, #4]
   12554:	addne	r1, r0, r6
   12558:	rsbne	r2, r5, #0
   1255c:	addne	r1, r1, #8
   12560:	andne	r1, r1, r2
   12564:	strne	r1, [r4, #12]
   12568:	strne	r1, [r4, #8]
   1256c:	ldrne	r1, [r4]
   12570:	addne	r1, r0, r1
   12574:	strne	r1, [r0]
   12578:	strne	r1, [r4, #16]
   1257c:	movne	r1, #0
   12580:	strne	r1, [r0, #4]
   12584:	ldrbne	r0, [r4, #40]	; 0x28
   12588:	andne	r0, r0, #249	; 0xf9
   1258c:	strbne	r0, [r4, #40]	; 0x28
   12590:	popne	{r4, r5, r6, sl, fp, pc}
   12594:	movw	r0, #28912	; 0x70f0
   12598:	movt	r0, #2
   1259c:	ldr	r0, [r0]
   125a0:	blx	r0

000125a4 <_obstack_begin_1@@Base>:
   125a4:	push	{fp, lr}
   125a8:	mov	fp, sp
   125ac:	str	r3, [r0, #28]
   125b0:	ldr	r3, [fp, #12]
   125b4:	str	r3, [r0, #36]	; 0x24
   125b8:	ldr	r3, [fp, #8]
   125bc:	str	r3, [r0, #32]
   125c0:	ldrb	r3, [r0, #40]	; 0x28
   125c4:	orr	r3, r3, #1
   125c8:	strb	r3, [r0, #40]	; 0x28
   125cc:	bl	124f8 <_obstack_begin@@Base+0x2c>
   125d0:	mov	r0, #1
   125d4:	pop	{fp, pc}

000125d8 <_obstack_newchunk@@Base>:
   125d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125dc:	add	fp, sp, #28
   125e0:	sub	sp, sp, #4
   125e4:	mov	r4, r0
   125e8:	ldr	r2, [r0]
   125ec:	ldr	r0, [r0, #8]
   125f0:	ldr	r3, [r4, #12]
   125f4:	sub	r9, r3, r0
   125f8:	ldr	r0, [r4, #24]
   125fc:	mov	r3, #0
   12600:	add	r1, r9, r1
   12604:	adds	r6, r1, r0
   12608:	adc	r0, r3, #0
   1260c:	mov	r3, #100	; 0x64
   12610:	add	r3, r3, r9, lsr #3
   12614:	adds	r7, r3, r6
   12618:	movcs	r7, r6
   1261c:	cmp	r7, r2
   12620:	movcc	r7, r2
   12624:	cmp	r1, r9
   12628:	bcc	12720 <_obstack_newchunk@@Base+0x148>
   1262c:	cmp	r0, #0
   12630:	bne	12720 <_obstack_newchunk@@Base+0x148>
   12634:	ldrb	r0, [r4, #40]	; 0x28
   12638:	ldr	r8, [r4, #4]
   1263c:	tst	r0, #1
   12640:	bne	12654 <_obstack_newchunk@@Base+0x7c>
   12644:	ldr	r1, [r4, #28]
   12648:	mov	r0, r7
   1264c:	blx	r1
   12650:	b	12664 <_obstack_newchunk@@Base+0x8c>
   12654:	ldr	r2, [r4, #28]
   12658:	ldr	r0, [r4, #36]	; 0x24
   1265c:	mov	r1, r7
   12660:	blx	r2
   12664:	mov	r6, r0
   12668:	cmp	r0, #0
   1266c:	beq	12720 <_obstack_newchunk@@Base+0x148>
   12670:	add	r0, r6, r7
   12674:	str	r6, [r4, #4]
   12678:	str	r8, [r6, #4]
   1267c:	mov	r2, r9
   12680:	str	r0, [r4, #16]
   12684:	str	r0, [r6]
   12688:	ldr	r5, [r4, #24]
   1268c:	ldr	sl, [r4, #8]
   12690:	add	r0, r6, r5
   12694:	mov	r1, sl
   12698:	add	r0, r0, #8
   1269c:	bic	r7, r0, r5
   126a0:	mov	r0, r7
   126a4:	bl	10f20 <memcpy@plt>
   126a8:	ldrb	r0, [r4, #40]	; 0x28
   126ac:	tst	r0, #2
   126b0:	bne	12700 <_obstack_newchunk@@Base+0x128>
   126b4:	add	r1, r8, r5
   126b8:	mvn	r0, r5
   126bc:	add	r1, r1, #8
   126c0:	and	r0, r1, r0
   126c4:	cmp	sl, r0
   126c8:	bne	12700 <_obstack_newchunk@@Base+0x128>
   126cc:	ldr	r0, [r8, #4]
   126d0:	str	r0, [r6, #4]
   126d4:	ldrb	r0, [r4, #40]	; 0x28
   126d8:	tst	r0, #1
   126dc:	bne	126f0 <_obstack_newchunk@@Base+0x118>
   126e0:	ldr	r1, [r4, #32]
   126e4:	mov	r0, r8
   126e8:	blx	r1
   126ec:	b	12700 <_obstack_newchunk@@Base+0x128>
   126f0:	ldr	r2, [r4, #32]
   126f4:	ldr	r0, [r4, #36]	; 0x24
   126f8:	mov	r1, r8
   126fc:	blx	r2
   12700:	add	r0, r7, r9
   12704:	str	r7, [r4, #8]
   12708:	str	r0, [r4, #12]
   1270c:	ldrb	r0, [r4, #40]	; 0x28
   12710:	and	r0, r0, #253	; 0xfd
   12714:	strb	r0, [r4, #40]	; 0x28
   12718:	sub	sp, fp, #28
   1271c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12720:	movw	r0, #28912	; 0x70f0
   12724:	movt	r0, #2
   12728:	ldr	r0, [r0]
   1272c:	blx	r0

00012730 <_obstack_allocated_p@@Base>:
   12730:	ldr	r2, [r0, #4]
   12734:	mov	r0, #0
   12738:	cmp	r2, #0
   1273c:	bxeq	lr
   12740:	cmp	r2, r1
   12744:	bcs	12754 <_obstack_allocated_p@@Base+0x24>
   12748:	ldr	r3, [r2]
   1274c:	cmp	r3, r1
   12750:	bcs	1275c <_obstack_allocated_p@@Base+0x2c>
   12754:	ldr	r2, [r2, #4]
   12758:	b	12738 <_obstack_allocated_p@@Base+0x8>
   1275c:	mov	r0, #1
   12760:	bx	lr

00012764 <_obstack_free@@Base>:
   12764:	push	{r4, r5, r6, sl, fp, lr}
   12768:	add	fp, sp, #16
   1276c:	mov	r5, r1
   12770:	ldr	r1, [r0, #4]
   12774:	cmp	r1, #0
   12778:	beq	127d8 <_obstack_free@@Base+0x74>
   1277c:	mov	r4, r0
   12780:	cmp	r1, r5
   12784:	bcs	12794 <_obstack_free@@Base+0x30>
   12788:	ldr	r0, [r1]
   1278c:	cmp	r0, r5
   12790:	bcs	127e4 <_obstack_free@@Base+0x80>
   12794:	ldrb	r0, [r4, #40]	; 0x28
   12798:	ldr	r6, [r1, #4]
   1279c:	tst	r0, #1
   127a0:	bne	127b4 <_obstack_free@@Base+0x50>
   127a4:	ldr	r2, [r4, #32]
   127a8:	mov	r0, r1
   127ac:	blx	r2
   127b0:	b	127c0 <_obstack_free@@Base+0x5c>
   127b4:	ldr	r2, [r4, #32]
   127b8:	ldr	r0, [r4, #36]	; 0x24
   127bc:	blx	r2
   127c0:	ldrb	r0, [r4, #40]	; 0x28
   127c4:	cmp	r6, #0
   127c8:	mov	r1, r6
   127cc:	orr	r0, r0, #2
   127d0:	strb	r0, [r4, #40]	; 0x28
   127d4:	bne	12780 <_obstack_free@@Base+0x1c>
   127d8:	cmp	r5, #0
   127dc:	popeq	{r4, r5, r6, sl, fp, pc}
   127e0:	bl	11124 <abort@plt>
   127e4:	str	r5, [r4, #8]
   127e8:	str	r5, [r4, #12]
   127ec:	ldr	r0, [r1]
   127f0:	str	r1, [r4, #4]
   127f4:	str	r0, [r4, #16]
   127f8:	pop	{r4, r5, r6, sl, fp, pc}

000127fc <_obstack_memory_used@@Base>:
   127fc:	ldr	r1, [r0, #4]
   12800:	mov	r0, #0
   12804:	cmp	r1, #0
   12808:	bxeq	lr
   1280c:	ldr	r2, [r1]
   12810:	sub	r0, r0, r1
   12814:	ldr	r1, [r1, #4]
   12818:	add	r0, r0, r2
   1281c:	b	12804 <_obstack_memory_used@@Base+0x8>
   12820:	push	{fp, lr}
   12824:	mov	fp, sp
   12828:	movw	r0, #29000	; 0x7148
   1282c:	movw	r1, #27284	; 0x6a94
   12830:	mov	r2, #5
   12834:	movt	r0, #2
   12838:	movt	r1, #1
   1283c:	ldr	r4, [r0]
   12840:	mov	r0, #0
   12844:	bl	10f44 <dcgettext@plt>
   12848:	movw	r2, #27552	; 0x6ba0
   1284c:	mov	r3, r0
   12850:	mov	r0, r4
   12854:	mov	r1, #1
   12858:	movt	r2, #1
   1285c:	bl	110ac <__fprintf_chk@plt>
   12860:	movw	r0, #28908	; 0x70ec
   12864:	movt	r0, #2
   12868:	ldr	r0, [r0]
   1286c:	bl	1104c <exit@plt>
   12870:	push	{r4, r5, fp, lr}
   12874:	add	fp, sp, #8
   12878:	cmp	r0, #0
   1287c:	beq	12910 <_obstack_memory_used@@Base+0x114>
   12880:	mov	r1, #47	; 0x2f
   12884:	mov	r4, r0
   12888:	bl	110dc <strrchr@plt>
   1288c:	cmp	r0, #0
   12890:	mov	r5, r4
   12894:	addne	r5, r0, #1
   12898:	sub	r0, r5, r4
   1289c:	cmp	r0, #7
   128a0:	blt	128f4 <_obstack_memory_used@@Base+0xf8>
   128a4:	movw	r1, #27357	; 0x6add
   128a8:	sub	r0, r5, #7
   128ac:	mov	r2, #7
   128b0:	movt	r1, #1
   128b4:	bl	11118 <strncmp@plt>
   128b8:	cmp	r0, #0
   128bc:	bne	128f4 <_obstack_memory_used@@Base+0xf8>
   128c0:	movw	r1, #27365	; 0x6ae5
   128c4:	mov	r0, r5
   128c8:	mov	r2, #3
   128cc:	movt	r1, #1
   128d0:	bl	11118 <strncmp@plt>
   128d4:	cmp	r0, #0
   128d8:	beq	128e4 <_obstack_memory_used@@Base+0xe8>
   128dc:	mov	r4, r5
   128e0:	b	128f4 <_obstack_memory_used@@Base+0xf8>
   128e4:	movw	r0, #28984	; 0x7138
   128e8:	add	r4, r5, #3
   128ec:	movt	r0, #2
   128f0:	str	r4, [r0]
   128f4:	movw	r0, #28988	; 0x713c
   128f8:	movt	r0, #2
   128fc:	str	r4, [r0]
   12900:	movw	r0, #29072	; 0x7190
   12904:	movt	r0, #2
   12908:	str	r4, [r0]
   1290c:	pop	{r4, r5, fp, pc}
   12910:	movw	r0, #29000	; 0x7148
   12914:	movt	r0, #2
   12918:	ldr	r1, [r0]
   1291c:	movw	r0, #27301	; 0x6aa5
   12920:	movt	r0, #1
   12924:	bl	1110c <fputs@plt>
   12928:	bl	11124 <abort@plt>
   1292c:	push	{r4, r5, r6, sl, fp, lr}
   12930:	add	fp, sp, #16
   12934:	mov	r4, r0
   12938:	movw	r0, #29080	; 0x7198
   1293c:	movt	r0, #2
   12940:	cmp	r4, #0
   12944:	moveq	r4, r0
   12948:	bl	11070 <__errno_location@plt>
   1294c:	ldr	r6, [r0]
   12950:	mov	r5, r0
   12954:	mov	r0, r4
   12958:	mov	r1, #48	; 0x30
   1295c:	bl	14bb8 <_obstack_memory_used@@Base+0x23bc>
   12960:	str	r6, [r5]
   12964:	pop	{r4, r5, r6, sl, fp, pc}
   12968:	movw	r1, #29080	; 0x7198
   1296c:	cmp	r0, #0
   12970:	movt	r1, #2
   12974:	movne	r1, r0
   12978:	ldr	r0, [r1]
   1297c:	bx	lr
   12980:	movw	r2, #29080	; 0x7198
   12984:	cmp	r0, #0
   12988:	movt	r2, #2
   1298c:	movne	r2, r0
   12990:	str	r1, [r2]
   12994:	bx	lr
   12998:	movw	r3, #29080	; 0x7198
   1299c:	cmp	r0, #0
   129a0:	and	r2, r2, #1
   129a4:	movt	r3, #2
   129a8:	movne	r3, r0
   129ac:	ubfx	r0, r1, #5, #3
   129b0:	and	r1, r1, #31
   129b4:	add	ip, r3, r0, lsl #2
   129b8:	mov	r0, #1
   129bc:	ldr	r3, [ip, #8]
   129c0:	and	r0, r0, r3, lsr r1
   129c4:	eor	r2, r0, r2
   129c8:	eor	r1, r3, r2, lsl r1
   129cc:	str	r1, [ip, #8]
   129d0:	bx	lr
   129d4:	movw	r2, #29080	; 0x7198
   129d8:	cmp	r0, #0
   129dc:	movt	r2, #2
   129e0:	movne	r2, r0
   129e4:	ldr	r0, [r2, #4]
   129e8:	str	r1, [r2, #4]
   129ec:	bx	lr
   129f0:	push	{fp, lr}
   129f4:	mov	fp, sp
   129f8:	movw	r3, #29080	; 0x7198
   129fc:	cmp	r0, #0
   12a00:	movt	r3, #2
   12a04:	movne	r3, r0
   12a08:	cmp	r1, #0
   12a0c:	mov	r0, #10
   12a10:	cmpne	r2, #0
   12a14:	str	r0, [r3]
   12a18:	bne	12a20 <_obstack_memory_used@@Base+0x224>
   12a1c:	bl	11124 <abort@plt>
   12a20:	str	r1, [r3, #40]	; 0x28
   12a24:	str	r2, [r3, #44]	; 0x2c
   12a28:	pop	{fp, pc}
   12a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a30:	add	fp, sp, #28
   12a34:	sub	sp, sp, #20
   12a38:	mov	r7, r0
   12a3c:	ldr	r0, [fp, #8]
   12a40:	movw	r5, #29080	; 0x7198
   12a44:	mov	r8, r3
   12a48:	mov	r9, r2
   12a4c:	mov	sl, r1
   12a50:	movt	r5, #2
   12a54:	cmp	r0, #0
   12a58:	movne	r5, r0
   12a5c:	bl	11070 <__errno_location@plt>
   12a60:	ldr	r2, [r5, #40]	; 0x28
   12a64:	ldr	r3, [r5, #44]	; 0x2c
   12a68:	mov	r4, r0
   12a6c:	ldm	r5, {r0, r1}
   12a70:	add	r5, r5, #8
   12a74:	ldr	r6, [r4]
   12a78:	stm	sp, {r0, r1, r5}
   12a7c:	mov	r0, r7
   12a80:	mov	r1, sl
   12a84:	str	r2, [sp, #12]
   12a88:	str	r3, [sp, #16]
   12a8c:	mov	r2, r9
   12a90:	mov	r3, r8
   12a94:	bl	12aa4 <_obstack_memory_used@@Base+0x2a8>
   12a98:	str	r6, [r4]
   12a9c:	sub	sp, fp, #28
   12aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aa8:	add	fp, sp, #28
   12aac:	sub	sp, sp, #156	; 0x9c
   12ab0:	mov	r5, r0
   12ab4:	add	r0, r2, #1
   12ab8:	mov	r6, r1
   12abc:	mov	sl, r3
   12ac0:	str	r2, [fp, #-80]	; 0xffffffb0
   12ac4:	str	r0, [sp, #72]	; 0x48
   12ac8:	ldr	r0, [fp, #12]
   12acc:	and	r1, r0, #1
   12ad0:	str	r1, [sp, #32]
   12ad4:	and	r1, r0, #4
   12ad8:	str	r1, [sp, #28]
   12adc:	ubfx	r9, r0, #1, #1
   12ae0:	bl	10f8c <__ctype_get_mb_cur_max@plt>
   12ae4:	str	r0, [sp, #40]	; 0x28
   12ae8:	ldr	r0, [fp, #24]
   12aec:	ldr	r7, [fp, #8]
   12af0:	mov	r1, #0
   12af4:	mov	lr, #0
   12af8:	str	r5, [fp, #-84]	; 0xffffffac
   12afc:	str	r1, [sp, #60]	; 0x3c
   12b00:	mov	r1, #1
   12b04:	str	r1, [fp, #-48]	; 0xffffffd0
   12b08:	str	r0, [sp, #80]	; 0x50
   12b0c:	ldr	r0, [fp, #20]
   12b10:	str	r0, [sp, #76]	; 0x4c
   12b14:	mov	r0, #0
   12b18:	str	r0, [sp, #56]	; 0x38
   12b1c:	mov	r0, #0
   12b20:	str	r0, [fp, #-88]	; 0xffffffa8
   12b24:	mov	r0, #0
   12b28:	str	r0, [fp, #-72]	; 0xffffffb8
   12b2c:	mov	r0, #0
   12b30:	cmp	r7, #10
   12b34:	bhi	13b10 <_obstack_memory_used@@Base+0x1314>
   12b38:	add	r1, pc, #24
   12b3c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12b40:	mov	ip, r6
   12b44:	mov	r8, #0
   12b48:	mov	r2, #1
   12b4c:	mov	r6, #0
   12b50:	mov	r3, sl
   12b54:	ldr	pc, [r1, r7, lsl #2]
   12b58:	andeq	r2, r1, r4, asr #24
   12b5c:	muleq	r1, r8, ip
   12b60:	andeq	r2, r1, r8, asr ip
   12b64:	andeq	r2, r1, ip, lsr ip
   12b68:	andeq	r2, r1, ip, lsl #25
   12b6c:	andeq	r2, r1, r0, asr #25
   12b70:	andeq	r2, r1, r8, ror #24
   12b74:	andeq	r2, r1, r4, asr #26
   12b78:	andeq	r2, r1, r4, lsl #23
   12b7c:	andeq	r2, r1, r4, lsl #23
   12b80:	andeq	r2, r1, r4, asr #23
   12b84:	movw	r0, #27441	; 0x6b31
   12b88:	mov	r1, r7
   12b8c:	mov	r6, r5
   12b90:	mov	r4, ip
   12b94:	mov	r5, lr
   12b98:	movt	r0, #1
   12b9c:	bl	14274 <_obstack_memory_used@@Base+0x1a78>
   12ba0:	str	r0, [sp, #76]	; 0x4c
   12ba4:	movw	r0, #21643	; 0x548b
   12ba8:	mov	r1, r7
   12bac:	movt	r0, #1
   12bb0:	bl	14274 <_obstack_memory_used@@Base+0x1a78>
   12bb4:	mov	lr, r5
   12bb8:	mov	r5, r6
   12bbc:	mov	ip, r4
   12bc0:	str	r0, [sp, #80]	; 0x50
   12bc4:	mov	r8, #0
   12bc8:	tst	r9, #1
   12bcc:	str	lr, [sp, #44]	; 0x2c
   12bd0:	bne	12c08 <_obstack_memory_used@@Base+0x40c>
   12bd4:	ldr	r0, [sp, #76]	; 0x4c
   12bd8:	ldrb	r0, [r0]
   12bdc:	cmp	r0, #0
   12be0:	beq	12c08 <_obstack_memory_used@@Base+0x40c>
   12be4:	ldr	r1, [sp, #76]	; 0x4c
   12be8:	mov	r8, #0
   12bec:	add	r1, r1, #1
   12bf0:	cmp	r8, ip
   12bf4:	strbcc	r0, [r5, r8]
   12bf8:	ldrb	r0, [r1, r8]
   12bfc:	add	r8, r8, #1
   12c00:	cmp	r0, #0
   12c04:	bne	12bf0 <_obstack_memory_used@@Base+0x3f4>
   12c08:	ldr	r6, [sp, #80]	; 0x50
   12c0c:	mov	r4, ip
   12c10:	mov	r0, r6
   12c14:	bl	11064 <strlen@plt>
   12c18:	mov	ip, r4
   12c1c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12c20:	ldr	lr, [sp, #44]	; 0x2c
   12c24:	str	r6, [fp, #-88]	; 0xffffffa8
   12c28:	str	r0, [fp, #-72]	; 0xffffffb8
   12c2c:	mov	r2, #1
   12c30:	mov	r6, r9
   12c34:	mov	r3, sl
   12c38:	b	12d44 <_obstack_memory_used@@Base+0x548>
   12c3c:	mov	r0, #1
   12c40:	b	12c98 <_obstack_memory_used@@Base+0x49c>
   12c44:	mov	r7, #0
   12c48:	mov	r8, #0
   12c4c:	mov	r2, r0
   12c50:	mov	r6, #0
   12c54:	b	12d44 <_obstack_memory_used@@Base+0x548>
   12c58:	tst	r9, #1
   12c5c:	bne	12c98 <_obstack_memory_used@@Base+0x49c>
   12c60:	mov	r2, r0
   12c64:	b	12cf0 <_obstack_memory_used@@Base+0x4f4>
   12c68:	mov	r0, #1
   12c6c:	mov	r8, #0
   12c70:	mov	r7, #5
   12c74:	mov	r2, #1
   12c78:	str	r0, [fp, #-72]	; 0xffffffb8
   12c7c:	movw	r0, #27439	; 0x6b2f
   12c80:	movt	r0, #1
   12c84:	str	r0, [fp, #-88]	; 0xffffffa8
   12c88:	b	12cb8 <_obstack_memory_used@@Base+0x4bc>
   12c8c:	mov	r2, #1
   12c90:	tst	r9, #1
   12c94:	beq	12cf0 <_obstack_memory_used@@Base+0x4f4>
   12c98:	mov	r1, #1
   12c9c:	mov	r8, #0
   12ca0:	mov	r7, #2
   12ca4:	mov	r2, r0
   12ca8:	str	r1, [fp, #-72]	; 0xffffffb8
   12cac:	movw	r1, #21643	; 0x548b
   12cb0:	movt	r1, #1
   12cb4:	str	r1, [fp, #-88]	; 0xffffffa8
   12cb8:	mov	r6, #1
   12cbc:	b	12d44 <_obstack_memory_used@@Base+0x548>
   12cc0:	tst	r9, #1
   12cc4:	beq	12d14 <_obstack_memory_used@@Base+0x518>
   12cc8:	mov	r0, #1
   12ccc:	mov	r8, #0
   12cd0:	mov	r2, #1
   12cd4:	mov	r6, #1
   12cd8:	mov	r7, #5
   12cdc:	str	r0, [fp, #-72]	; 0xffffffb8
   12ce0:	movw	r0, #27439	; 0x6b2f
   12ce4:	movt	r0, #1
   12ce8:	str	r0, [fp, #-88]	; 0xffffffa8
   12cec:	b	12d44 <_obstack_memory_used@@Base+0x548>
   12cf0:	cmp	ip, #0
   12cf4:	mov	r8, #1
   12cf8:	mov	r6, #0
   12cfc:	mov	r7, #2
   12d00:	movne	r0, #39	; 0x27
   12d04:	strbne	r0, [r5]
   12d08:	movw	r0, #21643	; 0x548b
   12d0c:	movt	r0, #1
   12d10:	b	12d38 <_obstack_memory_used@@Base+0x53c>
   12d14:	cmp	ip, #0
   12d18:	mov	r8, #1
   12d1c:	mov	r2, #1
   12d20:	mov	r7, #5
   12d24:	mov	r6, #0
   12d28:	movne	r0, #34	; 0x22
   12d2c:	strbne	r0, [r5]
   12d30:	movw	r0, #27439	; 0x6b2f
   12d34:	movt	r0, #1
   12d38:	str	r0, [fp, #-88]	; 0xffffffa8
   12d3c:	mov	r0, #1
   12d40:	str	r0, [fp, #-72]	; 0xffffffb8
   12d44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d48:	str	r7, [fp, #-68]	; 0xffffffbc
   12d4c:	str	r6, [fp, #-76]	; 0xffffffb4
   12d50:	str	r2, [sp, #84]	; 0x54
   12d54:	cmp	r0, #0
   12d58:	movwne	r0, #1
   12d5c:	and	r1, r0, r6
   12d60:	and	r1, r2, r1
   12d64:	str	r1, [sp, #48]	; 0x30
   12d68:	sub	r1, r7, #2
   12d6c:	clz	r1, r1
   12d70:	lsr	r1, r1, #5
   12d74:	and	r1, r1, r6
   12d78:	str	r1, [sp, #64]	; 0x40
   12d7c:	subs	r1, r7, #2
   12d80:	eor	r7, r6, #1
   12d84:	movwne	r1, #1
   12d88:	str	r7, [sp, #92]	; 0x5c
   12d8c:	orr	r7, r1, r7
   12d90:	and	r1, r1, r2
   12d94:	and	r0, r0, r1
   12d98:	str	r7, [sp, #68]	; 0x44
   12d9c:	mov	r7, #0
   12da0:	str	r0, [fp, #-60]	; 0xffffffc4
   12da4:	orr	r0, r1, r6
   12da8:	ldr	r1, [fp, #16]
   12dac:	eor	r0, r0, #1
   12db0:	clz	r1, r1
   12db4:	lsr	r1, r1, #5
   12db8:	orr	r0, r1, r0
   12dbc:	str	r0, [fp, #-64]	; 0xffffffc0
   12dc0:	eor	r0, r2, #1
   12dc4:	str	r0, [sp, #52]	; 0x34
   12dc8:	cmn	r3, #1
   12dcc:	beq	12ddc <_obstack_memory_used@@Base+0x5e0>
   12dd0:	cmp	r7, r3
   12dd4:	bne	12de8 <_obstack_memory_used@@Base+0x5ec>
   12dd8:	b	13944 <_obstack_memory_used@@Base+0x1148>
   12ddc:	ldrb	r0, [r4, r7]
   12de0:	cmp	r0, #0
   12de4:	beq	1394c <_obstack_memory_used@@Base+0x1150>
   12de8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12dec:	cmp	r0, #0
   12df0:	beq	12e38 <_obstack_memory_used@@Base+0x63c>
   12df4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12df8:	add	r5, r7, r0
   12dfc:	cmp	r0, #2
   12e00:	bcc	12e4c <_obstack_memory_used@@Base+0x650>
   12e04:	mov	r0, #0
   12e08:	cmn	r3, #1
   12e0c:	str	r0, [fp, #-56]	; 0xffffffc8
   12e10:	bne	12e54 <_obstack_memory_used@@Base+0x658>
   12e14:	mov	r0, r4
   12e18:	mov	r4, ip
   12e1c:	mov	r6, lr
   12e20:	bl	11064 <strlen@plt>
   12e24:	mov	ip, r4
   12e28:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12e2c:	mov	lr, r6
   12e30:	mov	r3, r0
   12e34:	b	12e54 <_obstack_memory_used@@Base+0x658>
   12e38:	mov	r0, #0
   12e3c:	mov	sl, r3
   12e40:	str	r0, [fp, #-56]	; 0xffffffc8
   12e44:	mov	r0, #0
   12e48:	b	12ec0 <_obstack_memory_used@@Base+0x6c4>
   12e4c:	mov	r0, #0
   12e50:	str	r0, [fp, #-56]	; 0xffffffc8
   12e54:	cmp	r5, r3
   12e58:	bls	12e6c <_obstack_memory_used@@Base+0x670>
   12e5c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12e60:	mov	r0, #0
   12e64:	mov	sl, r3
   12e68:	b	12ec0 <_obstack_memory_used@@Base+0x6c4>
   12e6c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12e70:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12e74:	add	r0, r4, r7
   12e78:	mov	r5, lr
   12e7c:	mov	r6, ip
   12e80:	mov	sl, r3
   12e84:	bl	11058 <bcmp@plt>
   12e88:	ldr	r2, [sp, #92]	; 0x5c
   12e8c:	cmp	r0, #0
   12e90:	ldr	r3, [fp, #-84]	; 0xffffffac
   12e94:	mov	r1, r0
   12e98:	movwne	r1, #1
   12e9c:	orr	r1, r1, r2
   12ea0:	tst	r1, #1
   12ea4:	beq	139d0 <_obstack_memory_used@@Base+0x11d4>
   12ea8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12eac:	clz	r0, r0
   12eb0:	mov	lr, r5
   12eb4:	mov	ip, r6
   12eb8:	mov	r5, r3
   12ebc:	lsr	r0, r0, #5
   12ec0:	str	r0, [fp, #-52]	; 0xffffffcc
   12ec4:	ldrb	r6, [r4, r7]
   12ec8:	cmp	r6, #126	; 0x7e
   12ecc:	bhi	133f4 <_obstack_memory_used@@Base+0xbf8>
   12ed0:	add	r3, pc, #16
   12ed4:	mov	r9, #1
   12ed8:	mov	r2, #110	; 0x6e
   12edc:	mov	r0, #97	; 0x61
   12ee0:	mov	r1, #0
   12ee4:	ldr	pc, [r3, r6, lsl #2]
   12ee8:	andeq	r3, r1, r8, asr r2
   12eec:	strdeq	r3, [r1], -r4
   12ef0:	strdeq	r3, [r1], -r4
   12ef4:	strdeq	r3, [r1], -r4
   12ef8:	strdeq	r3, [r1], -r4
   12efc:	strdeq	r3, [r1], -r4
   12f00:	strdeq	r3, [r1], -r4
   12f04:	andeq	r3, r1, r4, ror r4
   12f08:	andeq	r3, r1, r8, lsr r2
   12f0c:	andeq	r3, r1, r0, lsr r2
   12f10:	andeq	r3, r1, r4, asr #4
   12f14:	andeq	r3, r1, ip, asr r3
   12f18:	andeq	r3, r1, r8, lsr #4
   12f1c:	andeq	r3, r1, r0, asr #4
   12f20:	strdeq	r3, [r1], -r4
   12f24:	strdeq	r3, [r1], -r4
   12f28:	strdeq	r3, [r1], -r4
   12f2c:	strdeq	r3, [r1], -r4
   12f30:	strdeq	r3, [r1], -r4
   12f34:	strdeq	r3, [r1], -r4
   12f38:	strdeq	r3, [r1], -r4
   12f3c:	strdeq	r3, [r1], -r4
   12f40:	strdeq	r3, [r1], -r4
   12f44:	strdeq	r3, [r1], -r4
   12f48:	strdeq	r3, [r1], -r4
   12f4c:	strdeq	r3, [r1], -r4
   12f50:	strdeq	r3, [r1], -r4
   12f54:	strdeq	r3, [r1], -r4
   12f58:	strdeq	r3, [r1], -r4
   12f5c:	strdeq	r3, [r1], -r4
   12f60:	strdeq	r3, [r1], -r4
   12f64:	strdeq	r3, [r1], -r4
   12f68:	ldrdeq	r3, [r1], -r8
   12f6c:	ldrdeq	r3, [r1], -ip
   12f70:	ldrdeq	r3, [r1], -ip
   12f74:	andeq	r3, r1, r0, asr #3
   12f78:	ldrdeq	r3, [r1], -ip
   12f7c:	andeq	r3, r1, r4, ror #1
   12f80:	ldrdeq	r3, [r1], -ip
   12f84:	andeq	r3, r1, r4, ror #6
   12f88:	ldrdeq	r3, [r1], -ip
   12f8c:	ldrdeq	r3, [r1], -ip
   12f90:	ldrdeq	r3, [r1], -ip
   12f94:	andeq	r3, r1, r4, ror #1
   12f98:	andeq	r3, r1, r4, ror #1
   12f9c:	andeq	r3, r1, r4, ror #1
   12fa0:	andeq	r3, r1, r4, ror #1
   12fa4:	andeq	r3, r1, r4, ror #1
   12fa8:	andeq	r3, r1, r4, ror #1
   12fac:	andeq	r3, r1, r4, ror #1
   12fb0:	andeq	r3, r1, r4, ror #1
   12fb4:	andeq	r3, r1, r4, ror #1
   12fb8:	andeq	r3, r1, r4, ror #1
   12fbc:	andeq	r3, r1, r4, ror #1
   12fc0:	andeq	r3, r1, r4, ror #1
   12fc4:	andeq	r3, r1, r4, ror #1
   12fc8:	andeq	r3, r1, r4, ror #1
   12fcc:	andeq	r3, r1, r4, ror #1
   12fd0:	andeq	r3, r1, r4, ror #1
   12fd4:	ldrdeq	r3, [r1], -ip
   12fd8:	ldrdeq	r3, [r1], -ip
   12fdc:	ldrdeq	r3, [r1], -ip
   12fe0:	ldrdeq	r3, [r1], -ip
   12fe4:	andeq	r3, r1, r0, lsr r3
   12fe8:	strdeq	r3, [r1], -r4
   12fec:	andeq	r3, r1, r4, ror #1
   12ff0:	andeq	r3, r1, r4, ror #1
   12ff4:	andeq	r3, r1, r4, ror #1
   12ff8:	andeq	r3, r1, r4, ror #1
   12ffc:	andeq	r3, r1, r4, ror #1
   13000:	andeq	r3, r1, r4, ror #1
   13004:	andeq	r3, r1, r4, ror #1
   13008:	andeq	r3, r1, r4, ror #1
   1300c:	andeq	r3, r1, r4, ror #1
   13010:	andeq	r3, r1, r4, ror #1
   13014:	andeq	r3, r1, r4, ror #1
   13018:	andeq	r3, r1, r4, ror #1
   1301c:	andeq	r3, r1, r4, ror #1
   13020:	andeq	r3, r1, r4, ror #1
   13024:	andeq	r3, r1, r4, ror #1
   13028:	andeq	r3, r1, r4, ror #1
   1302c:	andeq	r3, r1, r4, ror #1
   13030:	andeq	r3, r1, r4, ror #1
   13034:	andeq	r3, r1, r4, ror #1
   13038:	andeq	r3, r1, r4, ror #1
   1303c:	andeq	r3, r1, r4, ror #1
   13040:	andeq	r3, r1, r4, ror #1
   13044:	andeq	r3, r1, r4, ror #1
   13048:	andeq	r3, r1, r4, ror #1
   1304c:	andeq	r3, r1, r4, ror #1
   13050:	andeq	r3, r1, r4, ror #1
   13054:	ldrdeq	r3, [r1], -ip
   13058:	andeq	r3, r1, r4, lsl #4
   1305c:	andeq	r3, r1, r4, ror #1
   13060:	ldrdeq	r3, [r1], -ip
   13064:	andeq	r3, r1, r4, ror #1
   13068:	ldrdeq	r3, [r1], -ip
   1306c:	andeq	r3, r1, r4, ror #1
   13070:	andeq	r3, r1, r4, ror #1
   13074:	andeq	r3, r1, r4, ror #1
   13078:	andeq	r3, r1, r4, ror #1
   1307c:	andeq	r3, r1, r4, ror #1
   13080:	andeq	r3, r1, r4, ror #1
   13084:	andeq	r3, r1, r4, ror #1
   13088:	andeq	r3, r1, r4, ror #1
   1308c:	andeq	r3, r1, r4, ror #1
   13090:	andeq	r3, r1, r4, ror #1
   13094:	andeq	r3, r1, r4, ror #1
   13098:	andeq	r3, r1, r4, ror #1
   1309c:	andeq	r3, r1, r4, ror #1
   130a0:	andeq	r3, r1, r4, ror #1
   130a4:	andeq	r3, r1, r4, ror #1
   130a8:	andeq	r3, r1, r4, ror #1
   130ac:	andeq	r3, r1, r4, ror #1
   130b0:	andeq	r3, r1, r4, ror #1
   130b4:	andeq	r3, r1, r4, ror #1
   130b8:	andeq	r3, r1, r4, ror #1
   130bc:	andeq	r3, r1, r4, ror #1
   130c0:	andeq	r3, r1, r4, ror #1
   130c4:	andeq	r3, r1, r4, ror #1
   130c8:	andeq	r3, r1, r4, ror #1
   130cc:	andeq	r3, r1, r4, ror #1
   130d0:	andeq	r3, r1, r4, ror #1
   130d4:	muleq	r1, r8, r1
   130d8:	ldrdeq	r3, [r1], -ip
   130dc:	muleq	r1, r8, r1
   130e0:	andeq	r3, r1, r0, asr #3
   130e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130e8:	tst	r0, #1
   130ec:	bne	13118 <_obstack_memory_used@@Base+0x91c>
   130f0:	ldr	r1, [fp, #16]
   130f4:	ubfx	r0, r6, #5, #3
   130f8:	mov	r2, #1
   130fc:	ldr	r0, [r1, r0, lsl #2]
   13100:	and	r1, r6, #31
   13104:	tst	r0, r2, lsl r1
   13108:	beq	13118 <_obstack_memory_used@@Base+0x91c>
   1310c:	mov	r0, r6
   13110:	mov	r1, r9
   13114:	b	1312c <_obstack_memory_used@@Base+0x930>
   13118:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1311c:	mov	r1, r9
   13120:	cmp	r0, #0
   13124:	mov	r0, r6
   13128:	beq	13878 <_obstack_memory_used@@Base+0x107c>
   1312c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13130:	tst	r2, #1
   13134:	bne	13a14 <_obstack_memory_used@@Base+0x1218>
   13138:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1313c:	subs	r2, r2, #2
   13140:	movwne	r2, #1
   13144:	orr	r2, r2, lr
   13148:	tst	r2, #1
   1314c:	bne	13184 <_obstack_memory_used@@Base+0x988>
   13150:	cmp	r8, ip
   13154:	mov	lr, #1
   13158:	movcc	r2, #39	; 0x27
   1315c:	strbcc	r2, [r5, r8]
   13160:	add	r2, r8, #1
   13164:	cmp	r2, ip
   13168:	movcc	r3, #36	; 0x24
   1316c:	strbcc	r3, [r5, r2]
   13170:	add	r2, r8, #2
   13174:	add	r8, r8, #3
   13178:	cmp	r2, ip
   1317c:	movcc	r3, #39	; 0x27
   13180:	strbcc	r3, [r5, r2]
   13184:	cmp	r8, ip
   13188:	movcc	r2, #92	; 0x5c
   1318c:	strbcc	r2, [r5, r8]
   13190:	add	r8, r8, #1
   13194:	b	138b8 <_obstack_memory_used@@Base+0x10bc>
   13198:	cmp	sl, #1
   1319c:	beq	131c0 <_obstack_memory_used@@Base+0x9c4>
   131a0:	mov	r9, #0
   131a4:	cmn	sl, #1
   131a8:	bne	131cc <_obstack_memory_used@@Base+0x9d0>
   131ac:	ldrb	r0, [r4, #1]
   131b0:	cmp	r0, #0
   131b4:	beq	131c0 <_obstack_memory_used@@Base+0x9c4>
   131b8:	mvn	sl, #0
   131bc:	b	131cc <_obstack_memory_used@@Base+0x9d0>
   131c0:	mov	r9, #0
   131c4:	cmp	r7, #0
   131c8:	beq	131d8 <_obstack_memory_used@@Base+0x9dc>
   131cc:	mov	r0, #0
   131d0:	str	r0, [fp, #-56]	; 0xffffffc8
   131d4:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   131d8:	mov	r1, #1
   131dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131e0:	cmp	r0, #2
   131e4:	bne	131fc <_obstack_memory_used@@Base+0xa00>
   131e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131ec:	mov	r9, r1
   131f0:	tst	r0, #1
   131f4:	beq	130e4 <_obstack_memory_used@@Base+0x8e8>
   131f8:	b	13a14 <_obstack_memory_used@@Base+0x1218>
   131fc:	mov	r9, r1
   13200:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   13204:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13208:	cmp	r0, #2
   1320c:	bne	13450 <_obstack_memory_used@@Base+0xc54>
   13210:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13214:	tst	r0, #1
   13218:	bne	13a14 <_obstack_memory_used@@Base+0x1218>
   1321c:	mov	r0, #0
   13220:	str	r0, [fp, #-56]	; 0xffffffc8
   13224:	b	13468 <_obstack_memory_used@@Base+0xc6c>
   13228:	mov	r0, #102	; 0x66
   1322c:	b	13474 <_obstack_memory_used@@Base+0xc78>
   13230:	mov	r2, #116	; 0x74
   13234:	b	13244 <_obstack_memory_used@@Base+0xa48>
   13238:	mov	r0, #98	; 0x62
   1323c:	b	13474 <_obstack_memory_used@@Base+0xc78>
   13240:	mov	r2, #114	; 0x72
   13244:	ldr	r0, [sp, #68]	; 0x44
   13248:	tst	r0, #1
   1324c:	mov	r0, r2
   13250:	bne	13474 <_obstack_memory_used@@Base+0xc78>
   13254:	b	13a14 <_obstack_memory_used@@Base+0x1218>
   13258:	ldr	r0, [sp, #84]	; 0x54
   1325c:	tst	r0, #1
   13260:	beq	13494 <_obstack_memory_used@@Base+0xc98>
   13264:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13268:	tst	r0, #1
   1326c:	bne	13b00 <_obstack_memory_used@@Base+0x1304>
   13270:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13274:	mov	r2, sl
   13278:	subs	r0, r0, #2
   1327c:	movwne	r0, #1
   13280:	orr	r0, r0, lr
   13284:	tst	r0, #1
   13288:	bne	132c0 <_obstack_memory_used@@Base+0xac4>
   1328c:	cmp	r8, ip
   13290:	mov	lr, #1
   13294:	movcc	r0, #39	; 0x27
   13298:	strbcc	r0, [r5, r8]
   1329c:	add	r0, r8, #1
   132a0:	cmp	r0, ip
   132a4:	movcc	r1, #36	; 0x24
   132a8:	strbcc	r1, [r5, r0]
   132ac:	add	r0, r8, #2
   132b0:	add	r8, r8, #3
   132b4:	cmp	r0, ip
   132b8:	movcc	r1, #39	; 0x27
   132bc:	strbcc	r1, [r5, r0]
   132c0:	mov	r1, #1
   132c4:	cmp	r8, ip
   132c8:	mov	r9, #0
   132cc:	mov	r6, #48	; 0x30
   132d0:	str	r1, [fp, #-56]	; 0xffffffc8
   132d4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   132d8:	movcc	r0, #92	; 0x5c
   132dc:	strbcc	r0, [r5, r8]
   132e0:	add	r0, r8, #1
   132e4:	cmp	r1, #2
   132e8:	beq	135f0 <_obstack_memory_used@@Base+0xdf4>
   132ec:	add	r1, r7, #1
   132f0:	cmp	r1, r2
   132f4:	bcs	135f0 <_obstack_memory_used@@Base+0xdf4>
   132f8:	ldrb	r1, [r4, r1]
   132fc:	sub	r1, r1, #48	; 0x30
   13300:	uxtb	r1, r1
   13304:	cmp	r1, #9
   13308:	bhi	135f0 <_obstack_memory_used@@Base+0xdf4>
   1330c:	cmp	r0, ip
   13310:	movcc	r1, #48	; 0x30
   13314:	strbcc	r1, [r5, r0]
   13318:	add	r0, r8, #2
   1331c:	add	r8, r8, #3
   13320:	cmp	r0, ip
   13324:	movcc	r1, #48	; 0x30
   13328:	strbcc	r1, [r5, r0]
   1332c:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   13330:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13334:	mov	r6, #63	; 0x3f
   13338:	cmp	r0, #5
   1333c:	beq	135f8 <_obstack_memory_used@@Base+0xdfc>
   13340:	mov	r1, #0
   13344:	cmp	r0, #2
   13348:	str	r1, [fp, #-56]	; 0xffffffc8
   1334c:	bne	136ac <_obstack_memory_used@@Base+0xeb0>
   13350:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13354:	mov	r9, #0
   13358:	b	131f0 <_obstack_memory_used@@Base+0x9f4>
   1335c:	mov	r0, #118	; 0x76
   13360:	b	13474 <_obstack_memory_used@@Base+0xc78>
   13364:	mov	r0, #1
   13368:	mov	r6, #39	; 0x27
   1336c:	str	r0, [sp, #60]	; 0x3c
   13370:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13374:	cmp	r0, #2
   13378:	bne	133ec <_obstack_memory_used@@Base+0xbf0>
   1337c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13380:	tst	r0, #1
   13384:	bne	13a14 <_obstack_memory_used@@Base+0x1218>
   13388:	ldr	r2, [sp, #56]	; 0x38
   1338c:	clz	r1, ip
   13390:	mov	lr, #0
   13394:	lsr	r1, r1, #5
   13398:	cmp	r2, #0
   1339c:	mov	r0, r2
   133a0:	movwne	r0, #1
   133a4:	orrs	r0, r0, r1
   133a8:	moveq	r2, ip
   133ac:	moveq	ip, r0
   133b0:	cmp	r8, ip
   133b4:	str	r2, [sp, #56]	; 0x38
   133b8:	movcc	r0, #39	; 0x27
   133bc:	strbcc	r0, [r5, r8]
   133c0:	add	r0, r8, #1
   133c4:	cmp	r0, ip
   133c8:	movcc	r1, #92	; 0x5c
   133cc:	strbcc	r1, [r5, r0]
   133d0:	add	r0, r8, #2
   133d4:	add	r8, r8, #3
   133d8:	cmp	r0, ip
   133dc:	movcc	r1, #39	; 0x27
   133e0:	strbcc	r1, [r5, r0]
   133e4:	mov	r0, #0
   133e8:	str	r0, [fp, #-56]	; 0xffffffc8
   133ec:	mov	r9, #1
   133f0:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   133f4:	ldr	r0, [sp, #40]	; 0x28
   133f8:	str	lr, [sp, #44]	; 0x2c
   133fc:	str	ip, [sp, #88]	; 0x58
   13400:	cmp	r0, #1
   13404:	bne	134b4 <_obstack_memory_used@@Base+0xcb8>
   13408:	str	sl, [sp, #36]	; 0x24
   1340c:	bl	11040 <__ctype_b_loc@plt>
   13410:	ldr	r0, [r0]
   13414:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13418:	mov	r1, #1
   1341c:	add	r0, r0, r6, lsl #1
   13420:	ldrb	r0, [r0, #1]
   13424:	ubfx	r9, r0, #6, #1
   13428:	ldr	r0, [sp, #52]	; 0x34
   1342c:	ldr	lr, [sp, #44]	; 0x2c
   13430:	cmp	r1, #1
   13434:	orr	r3, r9, r0
   13438:	bhi	136b4 <_obstack_memory_used@@Base+0xeb8>
   1343c:	tst	r3, #1
   13440:	beq	136b4 <_obstack_memory_used@@Base+0xeb8>
   13444:	ldr	sl, [sp, #36]	; 0x24
   13448:	ldr	ip, [sp, #88]	; 0x58
   1344c:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   13450:	ldr	r1, [sp, #48]	; 0x30
   13454:	mov	r0, #0
   13458:	str	r0, [fp, #-56]	; 0xffffffc8
   1345c:	mov	r0, #92	; 0x5c
   13460:	cmp	r1, #0
   13464:	beq	13474 <_obstack_memory_used@@Base+0xc78>
   13468:	mov	r6, #92	; 0x5c
   1346c:	mov	r9, #0
   13470:	b	13878 <_obstack_memory_used@@Base+0x107c>
   13474:	mov	r1, #0
   13478:	mov	r9, #0
   1347c:	str	r1, [fp, #-56]	; 0xffffffc8
   13480:	ldr	r1, [sp, #84]	; 0x54
   13484:	tst	r1, #1
   13488:	mov	r1, #0
   1348c:	beq	130e4 <_obstack_memory_used@@Base+0x8e8>
   13490:	b	1312c <_obstack_memory_used@@Base+0x930>
   13494:	ldr	r0, [sp, #32]
   13498:	mov	r6, #0
   1349c:	mov	r9, #0
   134a0:	cmp	r0, #0
   134a4:	mov	r0, #0
   134a8:	str	r0, [fp, #-56]	; 0xffffffc8
   134ac:	beq	130e4 <_obstack_memory_used@@Base+0x8e8>
   134b0:	b	138d0 <_obstack_memory_used@@Base+0x10d4>
   134b4:	mov	r0, #0
   134b8:	cmn	sl, #1
   134bc:	sub	r3, fp, #40	; 0x28
   134c0:	str	r0, [fp, #-36]	; 0xffffffdc
   134c4:	str	r0, [fp, #-40]	; 0xffffffd8
   134c8:	bne	134e0 <_obstack_memory_used@@Base+0xce4>
   134cc:	mov	r0, r4
   134d0:	bl	11064 <strlen@plt>
   134d4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   134d8:	sub	r3, fp, #40	; 0x28
   134dc:	mov	sl, r0
   134e0:	ldr	r0, [sp, #72]	; 0x48
   134e4:	mov	r9, #1
   134e8:	mov	r1, #0
   134ec:	str	sl, [sp, #36]	; 0x24
   134f0:	add	r0, r0, r7
   134f4:	str	r0, [sp, #20]
   134f8:	add	r0, r1, r7
   134fc:	str	r1, [sp, #24]
   13500:	add	r1, r4, r0
   13504:	mov	r4, r0
   13508:	sub	r2, sl, r0
   1350c:	sub	r0, fp, #44	; 0x2c
   13510:	bl	14e64 <_obstack_memory_used@@Base+0x2668>
   13514:	cmp	r0, #0
   13518:	beq	13924 <_obstack_memory_used@@Base+0x1128>
   1351c:	cmn	r0, #1
   13520:	beq	138dc <_obstack_memory_used@@Base+0x10e0>
   13524:	ldr	r2, [sp, #36]	; 0x24
   13528:	cmn	r0, #2
   1352c:	beq	138e4 <_obstack_memory_used@@Base+0x10e8>
   13530:	ldr	r2, [sp, #64]	; 0x40
   13534:	ldr	ip, [sp, #88]	; 0x58
   13538:	ldr	r4, [sp, #84]	; 0x54
   1353c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13540:	cmp	r0, #2
   13544:	mov	r1, #0
   13548:	movwcc	r1, #1
   1354c:	eor	r2, r2, #1
   13550:	orrs	r1, r2, r1
   13554:	bne	135a4 <_obstack_memory_used@@Base+0xda8>
   13558:	ldr	r1, [sp, #24]
   1355c:	ldr	r2, [sp, #20]
   13560:	add	r1, r2, r1
   13564:	sub	r2, r0, #1
   13568:	ldrb	r3, [r1]
   1356c:	sub	r5, r3, #94	; 0x5e
   13570:	cmp	r5, #30
   13574:	bhi	1358c <_obstack_memory_used@@Base+0xd90>
   13578:	mov	r4, #1
   1357c:	mov	sl, #1073741829	; 0x40000005
   13580:	tst	sl, r4, lsl r5
   13584:	ldr	r4, [sp, #84]	; 0x54
   13588:	bne	139ec <_obstack_memory_used@@Base+0x11f0>
   1358c:	sub	r3, r3, #91	; 0x5b
   13590:	cmp	r3, #2
   13594:	bcc	139ec <_obstack_memory_used@@Base+0x11f0>
   13598:	add	r1, r1, #1
   1359c:	subs	r2, r2, #1
   135a0:	bne	13568 <_obstack_memory_used@@Base+0xd6c>
   135a4:	ldr	r5, [sp, #24]
   135a8:	str	lr, [fp, #-48]	; 0xffffffd0
   135ac:	add	r5, r0, r5
   135b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   135b4:	bl	10f74 <iswprint@plt>
   135b8:	cmp	r0, #0
   135bc:	sub	r4, fp, #40	; 0x28
   135c0:	movwne	r0, #1
   135c4:	and	r9, r9, r0
   135c8:	mov	r0, r4
   135cc:	bl	10f2c <mbsinit@plt>
   135d0:	mov	r1, r5
   135d4:	mov	r3, r4
   135d8:	ldr	sl, [sp, #36]	; 0x24
   135dc:	ldr	r5, [fp, #-84]	; 0xffffffac
   135e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   135e4:	cmp	r0, #0
   135e8:	beq	134f8 <_obstack_memory_used@@Base+0xcfc>
   135ec:	b	13428 <_obstack_memory_used@@Base+0xc2c>
   135f0:	mov	r8, r0
   135f4:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   135f8:	mov	r0, #0
   135fc:	str	r0, [fp, #-56]	; 0xffffffc8
   13600:	ldr	r0, [sp, #28]
   13604:	cmp	r0, #0
   13608:	beq	136ac <_obstack_memory_used@@Base+0xeb0>
   1360c:	add	r0, r7, #2
   13610:	mov	r1, sl
   13614:	cmp	r0, sl
   13618:	bcs	136ac <_obstack_memory_used@@Base+0xeb0>
   1361c:	add	r1, r7, r4
   13620:	ldrb	r1, [r1, #1]
   13624:	cmp	r1, #63	; 0x3f
   13628:	bne	136ac <_obstack_memory_used@@Base+0xeb0>
   1362c:	ldrb	r9, [r4, r0]
   13630:	sub	r2, r9, #33	; 0x21
   13634:	cmp	r2, #29
   13638:	bhi	136ac <_obstack_memory_used@@Base+0xeb0>
   1363c:	mov	r1, r4
   13640:	movw	r4, #20929	; 0x51c1
   13644:	mov	r3, #1
   13648:	movt	r4, #14336	; 0x3800
   1364c:	tst	r4, r3, lsl r2
   13650:	beq	13938 <_obstack_memory_used@@Base+0x113c>
   13654:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13658:	tst	r2, #1
   1365c:	bne	13b08 <_obstack_memory_used@@Base+0x130c>
   13660:	cmp	r8, ip
   13664:	mov	r4, r1
   13668:	mov	r7, r0
   1366c:	mov	r6, r9
   13670:	movcc	r2, #63	; 0x3f
   13674:	strbcc	r2, [r5, r8]
   13678:	add	r2, r8, #1
   1367c:	cmp	r2, ip
   13680:	movcc	r3, #34	; 0x22
   13684:	strbcc	r3, [r5, r2]
   13688:	add	r2, r8, #2
   1368c:	cmp	r2, ip
   13690:	movcc	r3, #34	; 0x22
   13694:	strbcc	r3, [r5, r2]
   13698:	add	r2, r8, #3
   1369c:	add	r8, r8, #4
   136a0:	cmp	r2, ip
   136a4:	movcc	r3, #63	; 0x3f
   136a8:	strbcc	r3, [r5, r2]
   136ac:	mov	r9, #0
   136b0:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   136b4:	ldr	sl, [sp, #36]	; 0x24
   136b8:	add	r0, r1, r7
   136bc:	mov	r2, #0
   136c0:	str	r3, [sp, #24]
   136c4:	str	r0, [fp, #-56]	; 0xffffffc8
   136c8:	tst	r3, #1
   136cc:	beq	136f8 <_obstack_memory_used@@Base+0xefc>
   136d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   136d4:	tst	r0, #1
   136d8:	beq	137c0 <_obstack_memory_used@@Base+0xfc4>
   136dc:	ldr	r1, [sp, #88]	; 0x58
   136e0:	mov	r0, r3
   136e4:	cmp	r8, r1
   136e8:	movcc	r1, #92	; 0x5c
   136ec:	strbcc	r1, [r5, r8]
   136f0:	add	r8, r8, #1
   136f4:	b	137c4 <_obstack_memory_used@@Base+0xfc8>
   136f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   136fc:	tst	r1, #1
   13700:	bne	13a10 <_obstack_memory_used@@Base+0x1214>
   13704:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13708:	subs	r2, r1, #2
   1370c:	movwne	r2, #1
   13710:	orr	r2, r2, lr
   13714:	tst	r2, #1
   13718:	bne	1375c <_obstack_memory_used@@Base+0xf60>
   1371c:	ldr	r1, [sp, #88]	; 0x58
   13720:	add	r2, r8, #1
   13724:	mov	lr, #1
   13728:	cmp	r8, r1
   1372c:	movcc	r1, #39	; 0x27
   13730:	strbcc	r1, [r5, r8]
   13734:	ldr	r1, [sp, #88]	; 0x58
   13738:	cmp	r2, r1
   1373c:	movcc	r1, #36	; 0x24
   13740:	strbcc	r1, [r5, r2]
   13744:	ldr	r1, [sp, #88]	; 0x58
   13748:	add	r2, r8, #2
   1374c:	add	r8, r8, #3
   13750:	cmp	r2, r1
   13754:	movcc	r1, #39	; 0x27
   13758:	strbcc	r1, [r5, r2]
   1375c:	ldr	r1, [sp, #88]	; 0x58
   13760:	add	r2, r8, #1
   13764:	mov	r0, r3
   13768:	cmp	r8, r1
   1376c:	movcc	r1, #92	; 0x5c
   13770:	strbcc	r1, [r5, r8]
   13774:	ldr	r1, [sp, #88]	; 0x58
   13778:	cmp	r2, r1
   1377c:	bcs	13790 <_obstack_memory_used@@Base+0xf94>
   13780:	uxtb	r3, r6
   13784:	mov	r1, #48	; 0x30
   13788:	orr	r3, r1, r3, lsr #6
   1378c:	strb	r3, [r5, r2]
   13790:	ldr	r1, [sp, #88]	; 0x58
   13794:	add	r2, r8, #2
   13798:	add	r8, r8, #3
   1379c:	cmp	r2, r1
   137a0:	lsrcc	r3, r6, #3
   137a4:	movcc	r1, #6
   137a8:	bficc	r3, r1, #3, #29
   137ac:	mov	r1, #6
   137b0:	bfi	r6, r1, #3, #29
   137b4:	strbcc	r3, [r5, r2]
   137b8:	mov	r2, #1
   137bc:	b	137cc <_obstack_memory_used@@Base+0xfd0>
   137c0:	mov	r0, r3
   137c4:	mov	r1, #0
   137c8:	str	r1, [fp, #-52]	; 0xffffffcc
   137cc:	mov	ip, r2
   137d0:	and	r1, r2, #1
   137d4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   137d8:	add	r3, r7, #1
   137dc:	cmp	r2, r3
   137e0:	bls	13868 <_obstack_memory_used@@Base+0x106c>
   137e4:	cmp	r1, #0
   137e8:	mvn	r5, lr
   137ec:	movwne	r1, #1
   137f0:	orr	r5, r5, r1
   137f4:	tst	r5, #1
   137f8:	bne	1383c <_obstack_memory_used@@Base+0x1040>
   137fc:	ldr	r1, [sp, #88]	; 0x58
   13800:	ldr	r5, [fp, #-84]	; 0xffffffac
   13804:	mov	r2, r4
   13808:	ldr	r4, [sp, #88]	; 0x58
   1380c:	ldr	r0, [sp, #24]
   13810:	mov	lr, #0
   13814:	cmp	r8, r1
   13818:	movcc	r1, #39	; 0x27
   1381c:	strbcc	r1, [r5, r8]
   13820:	add	r1, r8, #1
   13824:	add	r8, r8, #2
   13828:	cmp	r1, r4
   1382c:	movcc	r4, #39	; 0x27
   13830:	strbcc	r4, [r5, r1]
   13834:	mov	r4, r2
   13838:	b	13840 <_obstack_memory_used@@Base+0x1044>
   1383c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13840:	ldr	r1, [sp, #88]	; 0x58
   13844:	mov	r2, ip
   13848:	cmp	r8, r1
   1384c:	ldr	r1, [sp, #72]	; 0x48
   13850:	strbcc	r6, [r5, r8]
   13854:	add	r8, r8, #1
   13858:	ldrb	r6, [r1, r7]
   1385c:	mov	r7, r3
   13860:	mov	r3, r0
   13864:	b	136c8 <_obstack_memory_used@@Base+0xecc>
   13868:	ldr	ip, [sp, #88]	; 0x58
   1386c:	cmp	r1, #0
   13870:	movwne	r1, #1
   13874:	str	r1, [fp, #-56]	; 0xffffffc8
   13878:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1387c:	cmp	r0, #0
   13880:	bne	138b0 <_obstack_memory_used@@Base+0x10b4>
   13884:	tst	lr, #1
   13888:	beq	138b0 <_obstack_memory_used@@Base+0x10b4>
   1388c:	cmp	r8, ip
   13890:	mov	lr, #0
   13894:	movcc	r0, #39	; 0x27
   13898:	strbcc	r0, [r5, r8]
   1389c:	add	r0, r8, #1
   138a0:	add	r8, r8, #2
   138a4:	cmp	r0, ip
   138a8:	movcc	r1, #39	; 0x27
   138ac:	strbcc	r1, [r5, r0]
   138b0:	mov	r1, r9
   138b4:	mov	r0, r6
   138b8:	cmp	r8, ip
   138bc:	strbcc	r0, [r5, r8]
   138c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   138c4:	add	r8, r8, #1
   138c8:	and	r0, r0, r1
   138cc:	str	r0, [fp, #-48]	; 0xffffffd0
   138d0:	mov	r3, sl
   138d4:	add	r7, r7, #1
   138d8:	b	12dc8 <_obstack_memory_used@@Base+0x5cc>
   138dc:	mov	r9, #0
   138e0:	b	13924 <_obstack_memory_used@@Base+0x1128>
   138e4:	mov	r9, #0
   138e8:	cmp	r2, r4
   138ec:	bls	13924 <_obstack_memory_used@@Base+0x1128>
   138f0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   138f4:	ldr	r1, [sp, #24]
   138f8:	add	r0, r4, r7
   138fc:	mov	r3, r1
   13900:	ldrb	r1, [r0, r1]
   13904:	cmp	r1, #0
   13908:	beq	13930 <_obstack_memory_used@@Base+0x1134>
   1390c:	add	r3, r3, #1
   13910:	add	r1, r7, r3
   13914:	cmp	r1, r2
   13918:	mov	r1, r3
   1391c:	bcc	138fc <_obstack_memory_used@@Base+0x1100>
   13920:	b	13428 <_obstack_memory_used@@Base+0xc2c>
   13924:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13928:	ldr	r1, [sp, #24]
   1392c:	b	13428 <_obstack_memory_used@@Base+0xc2c>
   13930:	mov	r1, r3
   13934:	b	13428 <_obstack_memory_used@@Base+0xc2c>
   13938:	mov	r9, #0
   1393c:	mov	r4, r1
   13940:	b	130e4 <_obstack_memory_used@@Base+0x8e8>
   13944:	mov	sl, r7
   13948:	b	13950 <_obstack_memory_used@@Base+0x1154>
   1394c:	mvn	sl, #0
   13950:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13954:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13958:	eor	r0, r1, #2
   1395c:	orr	r0, r0, r8
   13960:	clz	r0, r0
   13964:	lsr	r0, r0, #5
   13968:	tst	r2, r0
   1396c:	bne	13a14 <_obstack_memory_used@@Base+0x1218>
   13970:	subs	r0, r1, #2
   13974:	movwne	r0, #1
   13978:	orr	r0, r2, r0
   1397c:	tst	r0, #1
   13980:	ldreq	r0, [sp, #60]	; 0x3c
   13984:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13988:	eoreq	r0, r0, #1
   1398c:	tsteq	r0, #1
   13990:	bne	13aa8 <_obstack_memory_used@@Base+0x12ac>
   13994:	tst	r1, #1
   13998:	bne	13a74 <_obstack_memory_used@@Base+0x1278>
   1399c:	ldr	r6, [sp, #56]	; 0x38
   139a0:	mov	r9, #0
   139a4:	cmp	r6, #0
   139a8:	beq	13aa0 <_obstack_memory_used@@Base+0x12a4>
   139ac:	ldr	r0, [sp, #84]	; 0x54
   139b0:	mov	r1, #0
   139b4:	mov	r7, #2
   139b8:	cmp	ip, #0
   139bc:	str	r1, [fp, #-48]	; 0xffffffd0
   139c0:	mov	r1, #0
   139c4:	str	r1, [fp, #-76]	; 0xffffffb4
   139c8:	beq	12b30 <_obstack_memory_used@@Base+0x334>
   139cc:	b	13aa8 <_obstack_memory_used@@Base+0x12ac>
   139d0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   139d4:	ldr	r1, [fp, #12]
   139d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   139dc:	mov	r5, r3
   139e0:	mov	ip, r6
   139e4:	mov	r3, sl
   139e8:	b	13a38 <_obstack_memory_used@@Base+0x123c>
   139ec:	tst	r4, #1
   139f0:	ldr	r5, [fp, #-84]	; 0xffffffac
   139f4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   139f8:	ldr	r1, [fp, #12]
   139fc:	ldr	r3, [sp, #36]	; 0x24
   13a00:	mov	r0, #2
   13a04:	movwne	r0, #4
   13a08:	mov	r2, r0
   13a0c:	b	13a38 <_obstack_memory_used@@Base+0x123c>
   13a10:	ldr	ip, [sp, #88]	; 0x58
   13a14:	ldr	r1, [sp, #84]	; 0x54
   13a18:	mov	r0, #2
   13a1c:	tst	r1, #1
   13a20:	movwne	r0, #4
   13a24:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13a28:	ldr	r1, [fp, #12]
   13a2c:	mov	r3, sl
   13a30:	cmp	r2, #2
   13a34:	moveq	r2, r0
   13a38:	mov	r0, #0
   13a3c:	bic	r1, r1, #2
   13a40:	str	r2, [sp]
   13a44:	mov	r2, r4
   13a48:	str	r0, [sp, #8]
   13a4c:	ldr	r0, [sp, #76]	; 0x4c
   13a50:	str	r1, [sp, #4]
   13a54:	mov	r1, ip
   13a58:	str	r0, [sp, #12]
   13a5c:	ldr	r0, [sp, #80]	; 0x50
   13a60:	str	r0, [sp, #16]
   13a64:	mov	r0, r5
   13a68:	bl	12aa4 <_obstack_memory_used@@Base+0x2a8>
   13a6c:	mov	r8, r0
   13a70:	b	13af4 <_obstack_memory_used@@Base+0x12f8>
   13a74:	mov	r0, #5
   13a78:	ldr	r1, [sp, #56]	; 0x38
   13a7c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13a80:	mov	r3, sl
   13a84:	str	r0, [sp]
   13a88:	ldr	r0, [fp, #12]
   13a8c:	str	r0, [sp, #4]
   13a90:	ldr	r0, [fp, #16]
   13a94:	str	r0, [sp, #8]
   13a98:	ldr	r0, [sp, #76]	; 0x4c
   13a9c:	b	13a58 <_obstack_memory_used@@Base+0x125c>
   13aa0:	mov	r0, #0
   13aa4:	str	r0, [fp, #-76]	; 0xffffffb4
   13aa8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13aac:	cmp	r1, #0
   13ab0:	beq	13ae8 <_obstack_memory_used@@Base+0x12ec>
   13ab4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ab8:	tst	r0, #1
   13abc:	bne	13ae8 <_obstack_memory_used@@Base+0x12ec>
   13ac0:	ldrb	r0, [r1]
   13ac4:	cmp	r0, #0
   13ac8:	beq	13ae8 <_obstack_memory_used@@Base+0x12ec>
   13acc:	add	r1, r1, #1
   13ad0:	cmp	r8, ip
   13ad4:	strbcc	r0, [r5, r8]
   13ad8:	add	r8, r8, #1
   13adc:	ldrb	r0, [r1], #1
   13ae0:	cmp	r0, #0
   13ae4:	bne	13ad0 <_obstack_memory_used@@Base+0x12d4>
   13ae8:	cmp	r8, ip
   13aec:	movcc	r0, #0
   13af0:	strbcc	r0, [r5, r8]
   13af4:	mov	r0, r8
   13af8:	sub	sp, fp, #28
   13afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b00:	mov	r0, #4
   13b04:	b	13a24 <_obstack_memory_used@@Base+0x1228>
   13b08:	mov	r4, r1
   13b0c:	b	13a14 <_obstack_memory_used@@Base+0x1218>
   13b10:	bl	11124 <abort@plt>
   13b14:	mov	r3, r2
   13b18:	mov	r2, #0
   13b1c:	b	13b20 <_obstack_memory_used@@Base+0x1324>
   13b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b24:	add	fp, sp, #28
   13b28:	sub	sp, sp, #36	; 0x24
   13b2c:	movw	r8, #29080	; 0x7198
   13b30:	cmp	r3, #0
   13b34:	mov	r4, r2
   13b38:	str	r2, [sp, #24]
   13b3c:	mov	r5, r1
   13b40:	mov	r6, r0
   13b44:	str	r0, [sp, #20]
   13b48:	movt	r8, #2
   13b4c:	movne	r8, r3
   13b50:	bl	11070 <__errno_location@plt>
   13b54:	str	r0, [sp, #28]
   13b58:	ldr	r1, [r8, #40]	; 0x28
   13b5c:	ldr	r2, [r8, #44]	; 0x2c
   13b60:	ldr	r7, [r0]
   13b64:	cmp	r4, #0
   13b68:	add	sl, r8, #8
   13b6c:	mov	r0, #0
   13b70:	ldm	r8, {r3, r9}
   13b74:	orreq	r9, r9, #1
   13b78:	stm	sp, {r3, r9, sl}
   13b7c:	str	r1, [sp, #12]
   13b80:	str	r2, [sp, #16]
   13b84:	mov	r1, #0
   13b88:	mov	r2, r6
   13b8c:	mov	r3, r5
   13b90:	str	r7, [sp, #32]
   13b94:	mov	r7, r5
   13b98:	bl	12aa4 <_obstack_memory_used@@Base+0x2a8>
   13b9c:	add	r4, r0, #1
   13ba0:	mov	r5, r0
   13ba4:	mov	r0, r4
   13ba8:	bl	14898 <_obstack_memory_used@@Base+0x209c>
   13bac:	mov	r6, r0
   13bb0:	ldr	r0, [r8]
   13bb4:	ldr	r2, [r8, #44]	; 0x2c
   13bb8:	ldr	r1, [r8, #40]	; 0x28
   13bbc:	mov	r3, r7
   13bc0:	stm	sp, {r0, r9, sl}
   13bc4:	str	r2, [sp, #16]
   13bc8:	ldr	r2, [sp, #20]
   13bcc:	str	r1, [sp, #12]
   13bd0:	mov	r0, r6
   13bd4:	mov	r1, r4
   13bd8:	bl	12aa4 <_obstack_memory_used@@Base+0x2a8>
   13bdc:	ldr	r0, [sp, #24]
   13be0:	ldr	r1, [sp, #32]
   13be4:	ldr	r2, [sp, #28]
   13be8:	cmp	r0, #0
   13bec:	str	r1, [r2]
   13bf0:	strne	r5, [r0]
   13bf4:	mov	r0, r6
   13bf8:	sub	sp, fp, #28
   13bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13c04:	add	fp, sp, #24
   13c08:	movw	r5, #28924	; 0x70fc
   13c0c:	movw	r8, #28920	; 0x70f8
   13c10:	movt	r5, #2
   13c14:	movt	r8, #2
   13c18:	ldr	r0, [r5]
   13c1c:	ldr	r4, [r8]
   13c20:	cmp	r0, #2
   13c24:	blt	13c50 <_obstack_memory_used@@Base+0x1454>
   13c28:	add	r7, r4, #12
   13c2c:	mov	r6, #0
   13c30:	ldr	r0, [r7, r6, lsl #3]
   13c34:	bl	12230 <close@plt+0x1100>
   13c38:	ldr	r1, [r5]
   13c3c:	add	r2, r6, #2
   13c40:	add	r0, r6, #1
   13c44:	mov	r6, r0
   13c48:	cmp	r2, r1
   13c4c:	blt	13c30 <_obstack_memory_used@@Base+0x1434>
   13c50:	ldr	r0, [r4, #4]
   13c54:	movw	r9, #29128	; 0x71c8
   13c58:	movw	r7, #28928	; 0x7100
   13c5c:	movt	r9, #2
   13c60:	movt	r7, #2
   13c64:	cmp	r0, r9
   13c68:	beq	13c78 <_obstack_memory_used@@Base+0x147c>
   13c6c:	bl	12230 <close@plt+0x1100>
   13c70:	mov	r0, #256	; 0x100
   13c74:	stm	r7, {r0, r9}
   13c78:	cmp	r4, r7
   13c7c:	beq	13c8c <_obstack_memory_used@@Base+0x1490>
   13c80:	mov	r0, r4
   13c84:	bl	12230 <close@plt+0x1100>
   13c88:	str	r7, [r8]
   13c8c:	mov	r0, #1
   13c90:	str	r0, [r5]
   13c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c98:	movw	r3, #29080	; 0x7198
   13c9c:	mvn	r2, #0
   13ca0:	movt	r3, #2
   13ca4:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cac:	add	fp, sp, #28
   13cb0:	sub	sp, sp, #44	; 0x2c
   13cb4:	mov	r7, r3
   13cb8:	str	r2, [sp, #36]	; 0x24
   13cbc:	str	r1, [sp, #32]
   13cc0:	mov	r5, r0
   13cc4:	bl	11070 <__errno_location@plt>
   13cc8:	cmp	r5, #0
   13ccc:	bmi	13e3c <_obstack_memory_used@@Base+0x1640>
   13cd0:	cmn	r5, #-2147483647	; 0x80000001
   13cd4:	beq	13e3c <_obstack_memory_used@@Base+0x1640>
   13cd8:	movw	r8, #28924	; 0x70fc
   13cdc:	movw	r4, #28920	; 0x70f8
   13ce0:	str	r0, [sp, #28]
   13ce4:	ldr	r0, [r0]
   13ce8:	movt	r8, #2
   13cec:	movt	r4, #2
   13cf0:	ldr	r1, [r8]
   13cf4:	ldr	r6, [r4]
   13cf8:	str	r0, [sp, #24]
   13cfc:	cmp	r1, r5
   13d00:	ble	13d0c <_obstack_memory_used@@Base+0x1510>
   13d04:	mov	sl, r6
   13d08:	b	13d78 <_obstack_memory_used@@Base+0x157c>
   13d0c:	movw	r9, #28928	; 0x7100
   13d10:	mov	r0, #8
   13d14:	str	r1, [fp, #-32]	; 0xffffffe0
   13d18:	sub	r1, r5, r1
   13d1c:	mvn	r3, #-2147483648	; 0x80000000
   13d20:	movt	r9, #2
   13d24:	str	r0, [sp]
   13d28:	add	r2, r1, #1
   13d2c:	sub	r1, fp, #32
   13d30:	subs	r0, r6, r9
   13d34:	movne	r0, r6
   13d38:	bl	149c8 <_obstack_memory_used@@Base+0x21cc>
   13d3c:	mov	sl, r0
   13d40:	cmp	r6, r9
   13d44:	str	r0, [r4]
   13d48:	bne	13d54 <_obstack_memory_used@@Base+0x1558>
   13d4c:	ldrd	r0, [r9]
   13d50:	stm	sl, {r0, r1}
   13d54:	ldr	r1, [r8]
   13d58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13d5c:	add	r0, sl, r1, lsl #3
   13d60:	sub	r1, r2, r1
   13d64:	lsl	r2, r1, #3
   13d68:	mov	r1, #0
   13d6c:	bl	11088 <memset@plt>
   13d70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d74:	str	r0, [r8]
   13d78:	mov	r9, sl
   13d7c:	ldm	r7, {r0, r1}
   13d80:	orr	r8, r1, #1
   13d84:	add	r1, r7, #8
   13d88:	ldr	r2, [r7, #40]	; 0x28
   13d8c:	ldr	r3, [r7, #44]	; 0x2c
   13d90:	ldr	r6, [r9, r5, lsl #3]!
   13d94:	str	r1, [sp, #20]
   13d98:	ldr	r4, [r9, #4]!
   13d9c:	stm	sp, {r0, r8}
   13da0:	add	r0, sp, #8
   13da4:	stm	r0, {r1, r2, r3}
   13da8:	ldr	r2, [sp, #32]
   13dac:	ldr	r3, [sp, #36]	; 0x24
   13db0:	mov	r1, r6
   13db4:	mov	r0, r4
   13db8:	bl	12aa4 <_obstack_memory_used@@Base+0x2a8>
   13dbc:	cmp	r6, r0
   13dc0:	bhi	13e24 <_obstack_memory_used@@Base+0x1628>
   13dc4:	add	r6, r0, #1
   13dc8:	movw	r0, #29128	; 0x71c8
   13dcc:	movt	r0, #2
   13dd0:	str	r6, [sl, r5, lsl #3]
   13dd4:	cmp	r4, r0
   13dd8:	beq	13de4 <_obstack_memory_used@@Base+0x15e8>
   13ddc:	mov	r0, r4
   13de0:	bl	12230 <close@plt+0x1100>
   13de4:	mov	r0, r6
   13de8:	bl	14898 <_obstack_memory_used@@Base+0x209c>
   13dec:	str	r0, [r9]
   13df0:	mov	r4, r0
   13df4:	add	r3, sp, #8
   13df8:	ldr	r0, [r7]
   13dfc:	ldr	r1, [r7, #40]	; 0x28
   13e00:	ldr	r2, [r7, #44]	; 0x2c
   13e04:	stm	sp, {r0, r8}
   13e08:	ldr	r0, [sp, #20]
   13e0c:	stm	r3, {r0, r1, r2}
   13e10:	ldr	r2, [sp, #32]
   13e14:	ldr	r3, [sp, #36]	; 0x24
   13e18:	mov	r0, r4
   13e1c:	mov	r1, r6
   13e20:	bl	12aa4 <_obstack_memory_used@@Base+0x2a8>
   13e24:	ldr	r0, [sp, #28]
   13e28:	ldr	r1, [sp, #24]
   13e2c:	str	r1, [r0]
   13e30:	mov	r0, r4
   13e34:	sub	sp, fp, #28
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e3c:	bl	11124 <abort@plt>
   13e40:	movw	r3, #29080	; 0x7198
   13e44:	movt	r3, #2
   13e48:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13e4c:	movw	r3, #29080	; 0x7198
   13e50:	mov	r1, r0
   13e54:	mov	r0, #0
   13e58:	mvn	r2, #0
   13e5c:	movt	r3, #2
   13e60:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13e64:	movw	r3, #29080	; 0x7198
   13e68:	mov	r2, r1
   13e6c:	mov	r1, r0
   13e70:	mov	r0, #0
   13e74:	movt	r3, #2
   13e78:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13e7c:	push	{fp, lr}
   13e80:	mov	fp, sp
   13e84:	sub	sp, sp, #48	; 0x30
   13e88:	vmov.i32	q8, #0	; 0x00000000
   13e8c:	mov	ip, #32
   13e90:	mov	r3, sp
   13e94:	mov	lr, r2
   13e98:	cmp	r1, #10
   13e9c:	add	r2, r3, #16
   13ea0:	vst1.64	{d16-d17}, [r3], ip
   13ea4:	vst1.64	{d16-d17}, [r2]
   13ea8:	vst1.64	{d16-d17}, [r3]
   13eac:	beq	13ecc <_obstack_memory_used@@Base+0x16d0>
   13eb0:	str	r1, [sp]
   13eb4:	mov	r3, sp
   13eb8:	mov	r1, lr
   13ebc:	mvn	r2, #0
   13ec0:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13ec4:	mov	sp, fp
   13ec8:	pop	{fp, pc}
   13ecc:	bl	11124 <abort@plt>
   13ed0:	push	{r4, sl, fp, lr}
   13ed4:	add	fp, sp, #8
   13ed8:	sub	sp, sp, #48	; 0x30
   13edc:	vmov.i32	q8, #0	; 0x00000000
   13ee0:	mov	ip, r3
   13ee4:	mov	r3, sp
   13ee8:	mov	lr, #32
   13eec:	cmp	r1, #10
   13ef0:	add	r4, r3, #16
   13ef4:	vst1.64	{d16-d17}, [r3], lr
   13ef8:	vst1.64	{d16-d17}, [r4]
   13efc:	vst1.64	{d16-d17}, [r3]
   13f00:	beq	13f20 <_obstack_memory_used@@Base+0x1724>
   13f04:	str	r1, [sp]
   13f08:	mov	r1, r2
   13f0c:	mov	r3, sp
   13f10:	mov	r2, ip
   13f14:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13f18:	sub	sp, fp, #8
   13f1c:	pop	{r4, sl, fp, pc}
   13f20:	bl	11124 <abort@plt>
   13f24:	mov	r2, r1
   13f28:	mov	r1, r0
   13f2c:	mov	r0, #0
   13f30:	b	13e7c <_obstack_memory_used@@Base+0x1680>
   13f34:	mov	r3, r2
   13f38:	mov	r2, r1
   13f3c:	mov	r1, r0
   13f40:	mov	r0, #0
   13f44:	b	13ed0 <_obstack_memory_used@@Base+0x16d4>
   13f48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f4c:	add	fp, sp, #24
   13f50:	sub	sp, sp, #48	; 0x30
   13f54:	movw	r8, #29080	; 0x7198
   13f58:	mov	lr, r0
   13f5c:	mov	r3, sp
   13f60:	mov	ip, r1
   13f64:	movt	r8, #2
   13f68:	mov	r1, r3
   13f6c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13f70:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13f74:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13f78:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13f7c:	ubfx	r0, r2, #5, #3
   13f80:	and	r2, r2, #31
   13f84:	mov	r4, #1
   13f88:	add	r0, r3, r0, lsl #2
   13f8c:	ldr	r1, [r0, #8]
   13f90:	bic	r4, r4, r1, lsr r2
   13f94:	eor	r1, r1, r4, lsl r2
   13f98:	mov	r2, ip
   13f9c:	str	r1, [r0, #8]
   13fa0:	mov	r0, #0
   13fa4:	mov	r1, lr
   13fa8:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   13fac:	sub	sp, fp, #24
   13fb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fb8:	add	fp, sp, #24
   13fbc:	sub	sp, sp, #48	; 0x30
   13fc0:	movw	lr, #29080	; 0x7198
   13fc4:	mov	ip, r0
   13fc8:	mov	r3, sp
   13fcc:	movt	lr, #2
   13fd0:	mov	r2, r3
   13fd4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13fd8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13fdc:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13fe0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13fe4:	ubfx	r0, r1, #5, #3
   13fe8:	and	r1, r1, #31
   13fec:	mov	r7, #1
   13ff0:	add	r0, r3, r0, lsl #2
   13ff4:	ldr	r2, [r0, #8]
   13ff8:	bic	r7, r7, r2, lsr r1
   13ffc:	eor	r1, r2, r7, lsl r1
   14000:	mvn	r2, #0
   14004:	str	r1, [r0, #8]
   14008:	mov	r0, #0
   1400c:	mov	r1, ip
   14010:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   14014:	sub	sp, fp, #24
   14018:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1401c:	push	{r4, r5, r6, r7, fp, lr}
   14020:	add	fp, sp, #16
   14024:	sub	sp, sp, #48	; 0x30
   14028:	movw	lr, #29080	; 0x7198
   1402c:	mov	ip, r0
   14030:	mov	r3, sp
   14034:	movt	lr, #2
   14038:	mov	r2, r3
   1403c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14040:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14044:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14048:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1404c:	mov	r1, ip
   14050:	mvn	r2, #0
   14054:	ldr	r0, [sp, #12]
   14058:	orr	r0, r0, #67108864	; 0x4000000
   1405c:	str	r0, [sp, #12]
   14060:	mov	r0, #0
   14064:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   14068:	sub	sp, fp, #16
   1406c:	pop	{r4, r5, r6, r7, fp, pc}
   14070:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14074:	add	fp, sp, #24
   14078:	sub	sp, sp, #48	; 0x30
   1407c:	movw	r8, #29080	; 0x7198
   14080:	mov	ip, r1
   14084:	mov	lr, r0
   14088:	mov	r3, sp
   1408c:	movt	r8, #2
   14090:	mov	r2, r3
   14094:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14098:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1409c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   140a0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   140a4:	mov	r1, lr
   140a8:	mov	r2, ip
   140ac:	ldr	r0, [sp, #12]
   140b0:	orr	r0, r0, #67108864	; 0x4000000
   140b4:	str	r0, [sp, #12]
   140b8:	mov	r0, #0
   140bc:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   140c0:	sub	sp, fp, #24
   140c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140cc:	add	fp, sp, #24
   140d0:	sub	sp, sp, #96	; 0x60
   140d4:	vmov.i32	q8, #0	; 0x00000000
   140d8:	mov	lr, sp
   140dc:	mov	ip, r2
   140e0:	cmp	r1, #10
   140e4:	add	r3, lr, #16
   140e8:	mov	r2, lr
   140ec:	vst1.64	{d16-d17}, [r3]
   140f0:	mov	r3, #28
   140f4:	vst1.64	{d16-d17}, [r2], r3
   140f8:	vst1.32	{d16-d17}, [r2]
   140fc:	beq	1413c <_obstack_memory_used@@Base+0x1940>
   14100:	str	r1, [sp, #48]	; 0x30
   14104:	add	r3, sp, #48	; 0x30
   14108:	ldm	lr!, {r2, r4, r5, r6, r7}
   1410c:	add	r1, r3, #4
   14110:	stmia	r1!, {r2, r4, r5, r6, r7}
   14114:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14118:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1411c:	mvn	r2, #0
   14120:	ldr	r1, [sp, #60]	; 0x3c
   14124:	orr	r1, r1, #67108864	; 0x4000000
   14128:	str	r1, [sp, #60]	; 0x3c
   1412c:	mov	r1, ip
   14130:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   14134:	sub	sp, fp, #24
   14138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1413c:	bl	11124 <abort@plt>
   14140:	push	{fp, lr}
   14144:	mov	fp, sp
   14148:	sub	sp, sp, #8
   1414c:	mvn	ip, #0
   14150:	str	ip, [sp]
   14154:	bl	14160 <_obstack_memory_used@@Base+0x1964>
   14158:	mov	sp, fp
   1415c:	pop	{fp, pc}
   14160:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14164:	add	fp, sp, #24
   14168:	sub	sp, sp, #48	; 0x30
   1416c:	movw	ip, #29080	; 0x7198
   14170:	mov	lr, r3
   14174:	mov	r3, sp
   14178:	cmp	r1, #0
   1417c:	movt	ip, #2
   14180:	cmpne	r2, #0
   14184:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14188:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1418c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   14190:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14194:	mov	r3, #10
   14198:	str	r3, [sp]
   1419c:	bne	141a4 <_obstack_memory_used@@Base+0x19a8>
   141a0:	bl	11124 <abort@plt>
   141a4:	ldr	ip, [fp, #8]
   141a8:	str	r2, [sp, #44]	; 0x2c
   141ac:	str	r1, [sp, #40]	; 0x28
   141b0:	mov	r3, sp
   141b4:	mov	r1, lr
   141b8:	mov	r2, ip
   141bc:	bl	13ca8 <_obstack_memory_used@@Base+0x14ac>
   141c0:	sub	sp, fp, #24
   141c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141c8:	push	{fp, lr}
   141cc:	mov	fp, sp
   141d0:	sub	sp, sp, #8
   141d4:	mov	r3, r2
   141d8:	mov	r2, r1
   141dc:	mov	r1, r0
   141e0:	mvn	r0, #0
   141e4:	str	r0, [sp]
   141e8:	mov	r0, #0
   141ec:	bl	14160 <_obstack_memory_used@@Base+0x1964>
   141f0:	mov	sp, fp
   141f4:	pop	{fp, pc}
   141f8:	push	{fp, lr}
   141fc:	mov	fp, sp
   14200:	sub	sp, sp, #8
   14204:	mov	ip, r2
   14208:	mov	r2, r1
   1420c:	mov	r1, r0
   14210:	str	r3, [sp]
   14214:	mov	r0, #0
   14218:	mov	r3, ip
   1421c:	bl	14160 <_obstack_memory_used@@Base+0x1964>
   14220:	mov	sp, fp
   14224:	pop	{fp, pc}
   14228:	movw	r3, #28936	; 0x7108
   1422c:	movt	r3, #2
   14230:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   14234:	movw	r3, #28936	; 0x7108
   14238:	mov	r2, r1
   1423c:	mov	r1, r0
   14240:	mov	r0, #0
   14244:	movt	r3, #2
   14248:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   1424c:	movw	r3, #28936	; 0x7108
   14250:	mvn	r2, #0
   14254:	movt	r3, #2
   14258:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   1425c:	movw	r3, #28936	; 0x7108
   14260:	mov	r1, r0
   14264:	mov	r0, #0
   14268:	mvn	r2, #0
   1426c:	movt	r3, #2
   14270:	b	13ca8 <_obstack_memory_used@@Base+0x14ac>
   14274:	push	{r4, r5, fp, lr}
   14278:	add	fp, sp, #8
   1427c:	mov	r5, r0
   14280:	mov	r4, r1
   14284:	mov	r0, #0
   14288:	mov	r2, #5
   1428c:	mov	r1, r5
   14290:	bl	10f44 <dcgettext@plt>
   14294:	cmp	r0, r5
   14298:	popne	{r4, r5, fp, pc}
   1429c:	bl	14e2c <_obstack_memory_used@@Base+0x2630>
   142a0:	ldrb	r1, [r0]
   142a4:	and	r1, r1, #223	; 0xdf
   142a8:	cmp	r1, #71	; 0x47
   142ac:	beq	14314 <_obstack_memory_used@@Base+0x1b18>
   142b0:	cmp	r1, #85	; 0x55
   142b4:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   142b8:	ldrb	r1, [r0, #1]
   142bc:	and	r1, r1, #223	; 0xdf
   142c0:	cmp	r1, #84	; 0x54
   142c4:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   142c8:	ldrb	r1, [r0, #2]
   142cc:	and	r1, r1, #223	; 0xdf
   142d0:	cmp	r1, #70	; 0x46
   142d4:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   142d8:	ldrb	r1, [r0, #3]
   142dc:	cmp	r1, #45	; 0x2d
   142e0:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   142e4:	ldrb	r1, [r0, #4]
   142e8:	cmp	r1, #56	; 0x38
   142ec:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   142f0:	ldrb	r0, [r0, #5]
   142f4:	cmp	r0, #0
   142f8:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   142fc:	ldrb	r1, [r5]
   14300:	movw	r2, #27443	; 0x6b33
   14304:	movw	r0, #27447	; 0x6b37
   14308:	movt	r2, #1
   1430c:	movt	r0, #1
   14310:	b	1439c <_obstack_memory_used@@Base+0x1ba0>
   14314:	ldrb	r1, [r0, #1]
   14318:	and	r1, r1, #223	; 0xdf
   1431c:	cmp	r1, #66	; 0x42
   14320:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   14324:	ldrb	r1, [r0, #2]
   14328:	cmp	r1, #49	; 0x31
   1432c:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   14330:	ldrb	r1, [r0, #3]
   14334:	cmp	r1, #56	; 0x38
   14338:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   1433c:	ldrb	r1, [r0, #4]
   14340:	cmp	r1, #48	; 0x30
   14344:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   14348:	ldrb	r1, [r0, #5]
   1434c:	cmp	r1, #51	; 0x33
   14350:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   14354:	ldrb	r1, [r0, #6]
   14358:	cmp	r1, #48	; 0x30
   1435c:	bne	1436c <_obstack_memory_used@@Base+0x1b70>
   14360:	ldrb	r0, [r0, #7]
   14364:	cmp	r0, #0
   14368:	beq	14388 <_obstack_memory_used@@Base+0x1b8c>
   1436c:	movw	r1, #27439	; 0x6b2f
   14370:	movw	r0, #21643	; 0x548b
   14374:	cmp	r4, #9
   14378:	movt	r1, #1
   1437c:	movt	r0, #1
   14380:	moveq	r0, r1
   14384:	pop	{r4, r5, fp, pc}
   14388:	ldrb	r1, [r5]
   1438c:	movw	r2, #27451	; 0x6b3b
   14390:	movw	r0, #27455	; 0x6b3f
   14394:	movt	r2, #1
   14398:	movt	r0, #1
   1439c:	cmp	r1, #96	; 0x60
   143a0:	moveq	r0, r2
   143a4:	pop	{r4, r5, fp, pc}
   143a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143ac:	add	fp, sp, #24
   143b0:	sub	sp, sp, #32
   143b4:	ldr	r6, [fp, #12]
   143b8:	ldr	r7, [fp, #8]
   143bc:	mov	r4, r2
   143c0:	mov	r8, r0
   143c4:	cmp	r1, #0
   143c8:	beq	143f0 <_obstack_memory_used@@Base+0x1bf4>
   143cc:	movw	r2, #27544	; 0x6b98
   143d0:	mov	r5, r1
   143d4:	str	r3, [sp, #4]
   143d8:	str	r4, [sp]
   143dc:	mov	r0, r8
   143e0:	mov	r1, #1
   143e4:	movt	r2, #1
   143e8:	mov	r3, r5
   143ec:	b	14408 <_obstack_memory_used@@Base+0x1c0c>
   143f0:	movw	r2, #27556	; 0x6ba4
   143f4:	str	r3, [sp]
   143f8:	mov	r0, r8
   143fc:	mov	r1, #1
   14400:	mov	r3, r4
   14404:	movt	r2, #1
   14408:	bl	110ac <__fprintf_chk@plt>
   1440c:	movw	r1, #27563	; 0x6bab
   14410:	mov	r0, #0
   14414:	mov	r2, #5
   14418:	movt	r1, #1
   1441c:	bl	10f44 <dcgettext@plt>
   14420:	movw	r2, #28281	; 0x6e79
   14424:	mov	r3, r0
   14428:	movw	r0, #2022	; 0x7e6
   1442c:	mov	r1, #1
   14430:	movt	r2, #1
   14434:	str	r0, [sp]
   14438:	mov	r0, r8
   1443c:	bl	110ac <__fprintf_chk@plt>
   14440:	movw	r4, #21954	; 0x55c2
   14444:	mov	r1, r8
   14448:	movt	r4, #1
   1444c:	mov	r0, r4
   14450:	bl	10ee4 <fputs_unlocked@plt>
   14454:	movw	r1, #27567	; 0x6baf
   14458:	mov	r0, #0
   1445c:	mov	r2, #5
   14460:	movt	r1, #1
   14464:	bl	10f44 <dcgettext@plt>
   14468:	movw	r3, #27738	; 0x6c5a
   1446c:	mov	r2, r0
   14470:	mov	r0, r8
   14474:	mov	r1, #1
   14478:	movt	r3, #1
   1447c:	bl	110ac <__fprintf_chk@plt>
   14480:	mov	r0, r4
   14484:	mov	r1, r8
   14488:	bl	10ee4 <fputs_unlocked@plt>
   1448c:	cmp	r6, #9
   14490:	bhi	144f4 <_obstack_memory_used@@Base+0x1cf8>
   14494:	add	r0, pc, #0
   14498:	ldr	pc, [r0, r6, lsl #2]
   1449c:	andeq	r4, r1, ip, asr #13
   144a0:	andeq	r4, r1, r4, asr #9
   144a4:	andeq	r4, r1, r0, lsl #10
   144a8:	andeq	r4, r1, r8, lsr #10
   144ac:	andeq	r4, r1, r0, asr r5
   144b0:	andeq	r4, r1, r8, ror r5
   144b4:	andeq	r4, r1, r0, lsr #11
   144b8:	ldrdeq	r4, [r1], -r8
   144bc:	andeq	r4, r1, r8, ror r6
   144c0:	andeq	r4, r1, r0, lsr #12
   144c4:	movw	r1, #27772	; 0x6c7c
   144c8:	mov	r0, #0
   144cc:	mov	r2, #5
   144d0:	movt	r1, #1
   144d4:	bl	10f44 <dcgettext@plt>
   144d8:	ldr	r3, [r7]
   144dc:	mov	r2, r0
   144e0:	mov	r0, r8
   144e4:	mov	r1, #1
   144e8:	sub	sp, fp, #24
   144ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   144f0:	b	110ac <__fprintf_chk@plt>
   144f4:	movw	r1, #28091	; 0x6dbb
   144f8:	movt	r1, #1
   144fc:	b	14628 <_obstack_memory_used@@Base+0x1e2c>
   14500:	movw	r1, #27788	; 0x6c8c
   14504:	mov	r0, #0
   14508:	mov	r2, #5
   1450c:	movt	r1, #1
   14510:	bl	10f44 <dcgettext@plt>
   14514:	mov	r2, r0
   14518:	ldr	r3, [r7]
   1451c:	ldr	r0, [r7, #4]
   14520:	str	r0, [sp]
   14524:	b	14614 <_obstack_memory_used@@Base+0x1e18>
   14528:	movw	r1, #27811	; 0x6ca3
   1452c:	mov	r0, #0
   14530:	mov	r2, #5
   14534:	movt	r1, #1
   14538:	bl	10f44 <dcgettext@plt>
   1453c:	mov	r2, r0
   14540:	ldr	r3, [r7]
   14544:	ldmib	r7, {r0, r1}
   14548:	stm	sp, {r0, r1}
   1454c:	b	14614 <_obstack_memory_used@@Base+0x1e18>
   14550:	movw	r1, #27839	; 0x6cbf
   14554:	mov	r0, #0
   14558:	mov	r2, #5
   1455c:	movt	r1, #1
   14560:	bl	10f44 <dcgettext@plt>
   14564:	ldr	r3, [r7]
   14568:	mov	r2, r0
   1456c:	ldmib	r7, {r0, r1, r7}
   14570:	stm	sp, {r0, r1, r7}
   14574:	b	14614 <_obstack_memory_used@@Base+0x1e18>
   14578:	movw	r1, #27871	; 0x6cdf
   1457c:	mov	r0, #0
   14580:	mov	r2, #5
   14584:	movt	r1, #1
   14588:	bl	10f44 <dcgettext@plt>
   1458c:	ldr	r3, [r7]
   14590:	mov	r2, r0
   14594:	ldmib	r7, {r0, r1, r6, r7}
   14598:	stm	sp, {r0, r1, r6, r7}
   1459c:	b	14614 <_obstack_memory_used@@Base+0x1e18>
   145a0:	movw	r1, #27907	; 0x6d03
   145a4:	mov	r0, #0
   145a8:	mov	r2, #5
   145ac:	movt	r1, #1
   145b0:	bl	10f44 <dcgettext@plt>
   145b4:	mov	r2, r0
   145b8:	ldr	r3, [r7]
   145bc:	ldmib	r7, {r0, r1, r6}
   145c0:	ldr	r5, [r7, #16]
   145c4:	ldr	r7, [r7, #20]
   145c8:	stm	sp, {r0, r1, r6}
   145cc:	str	r5, [sp, #12]
   145d0:	str	r7, [sp, #16]
   145d4:	b	14614 <_obstack_memory_used@@Base+0x1e18>
   145d8:	movw	r1, #27947	; 0x6d2b
   145dc:	mov	r0, #0
   145e0:	mov	r2, #5
   145e4:	movt	r1, #1
   145e8:	bl	10f44 <dcgettext@plt>
   145ec:	mov	r2, r0
   145f0:	ldr	r3, [r7]
   145f4:	ldmib	r7, {r0, r1, r6}
   145f8:	ldr	r5, [r7, #16]
   145fc:	ldr	r4, [r7, #20]
   14600:	ldr	r7, [r7, #24]
   14604:	stm	sp, {r0, r1, r6}
   14608:	str	r5, [sp, #12]
   1460c:	str	r4, [sp, #16]
   14610:	str	r7, [sp, #20]
   14614:	mov	r0, r8
   14618:	mov	r1, #1
   1461c:	b	146c8 <_obstack_memory_used@@Base+0x1ecc>
   14620:	movw	r1, #28039	; 0x6d87
   14624:	movt	r1, #1
   14628:	mov	r0, #0
   1462c:	mov	r2, #5
   14630:	bl	10f44 <dcgettext@plt>
   14634:	mov	ip, r0
   14638:	ldr	r3, [r7]
   1463c:	ldr	r0, [r7, #4]
   14640:	ldr	r1, [r7, #8]
   14644:	ldr	r6, [r7, #12]
   14648:	ldr	r5, [r7, #16]
   1464c:	ldr	r4, [r7, #20]
   14650:	ldr	r2, [r7, #24]
   14654:	ldr	lr, [r7, #28]
   14658:	ldr	r7, [r7, #32]
   1465c:	stm	sp, {r0, r1, r6}
   14660:	str	r5, [sp, #12]
   14664:	str	r4, [sp, #16]
   14668:	str	r2, [sp, #20]
   1466c:	str	lr, [sp, #24]
   14670:	str	r7, [sp, #28]
   14674:	b	146bc <_obstack_memory_used@@Base+0x1ec0>
   14678:	movw	r1, #27991	; 0x6d57
   1467c:	mov	r0, #0
   14680:	mov	r2, #5
   14684:	movt	r1, #1
   14688:	bl	10f44 <dcgettext@plt>
   1468c:	mov	ip, r0
   14690:	ldr	r3, [r7]
   14694:	ldmib	r7, {r0, r1, r6}
   14698:	ldr	r5, [r7, #16]
   1469c:	ldr	r4, [r7, #20]
   146a0:	ldr	r2, [r7, #24]
   146a4:	ldr	r7, [r7, #28]
   146a8:	stm	sp, {r0, r1, r6}
   146ac:	str	r5, [sp, #12]
   146b0:	str	r4, [sp, #16]
   146b4:	str	r2, [sp, #20]
   146b8:	str	r7, [sp, #24]
   146bc:	mov	r0, r8
   146c0:	mov	r1, #1
   146c4:	mov	r2, ip
   146c8:	bl	110ac <__fprintf_chk@plt>
   146cc:	sub	sp, fp, #24
   146d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146d4:	push	{r4, sl, fp, lr}
   146d8:	add	fp, sp, #8
   146dc:	sub	sp, sp, #8
   146e0:	ldr	ip, [fp, #8]
   146e4:	mov	lr, #0
   146e8:	ldr	r4, [ip, lr, lsl #2]
   146ec:	add	lr, lr, #1
   146f0:	cmp	r4, #0
   146f4:	bne	146e8 <_obstack_memory_used@@Base+0x1eec>
   146f8:	sub	r4, lr, #1
   146fc:	str	ip, [sp]
   14700:	str	r4, [sp, #4]
   14704:	bl	143a8 <_obstack_memory_used@@Base+0x1bac>
   14708:	sub	sp, fp, #8
   1470c:	pop	{r4, sl, fp, pc}
   14710:	push	{r4, r5, fp, lr}
   14714:	add	fp, sp, #8
   14718:	sub	sp, sp, #48	; 0x30
   1471c:	ldr	r4, [fp, #8]
   14720:	mov	ip, #0
   14724:	add	lr, sp, #8
   14728:	ldr	r5, [r4]
   1472c:	cmp	r5, #0
   14730:	str	r5, [lr, ip, lsl #2]
   14734:	beq	1474c <_obstack_memory_used@@Base+0x1f50>
   14738:	add	ip, ip, #1
   1473c:	add	r4, r4, #4
   14740:	cmp	ip, #10
   14744:	bne	14728 <_obstack_memory_used@@Base+0x1f2c>
   14748:	mov	ip, #10
   1474c:	str	lr, [sp]
   14750:	str	ip, [sp, #4]
   14754:	bl	143a8 <_obstack_memory_used@@Base+0x1bac>
   14758:	sub	sp, fp, #8
   1475c:	pop	{r4, r5, fp, pc}
   14760:	push	{fp, lr}
   14764:	mov	fp, sp
   14768:	sub	sp, sp, #8
   1476c:	add	ip, fp, #8
   14770:	str	ip, [sp, #4]
   14774:	str	ip, [sp]
   14778:	bl	14710 <_obstack_memory_used@@Base+0x1f14>
   1477c:	mov	sp, fp
   14780:	pop	{fp, pc}
   14784:	push	{fp, lr}
   14788:	mov	fp, sp
   1478c:	movw	r0, #29012	; 0x7154
   14790:	movt	r0, #2
   14794:	ldr	r1, [r0]
   14798:	movw	r0, #21954	; 0x55c2
   1479c:	movt	r0, #1
   147a0:	bl	10ee4 <fputs_unlocked@plt>
   147a4:	movw	r1, #28151	; 0x6df7
   147a8:	mov	r0, #0
   147ac:	mov	r2, #5
   147b0:	movt	r1, #1
   147b4:	bl	10f44 <dcgettext@plt>
   147b8:	movw	r2, #28171	; 0x6e0b
   147bc:	mov	r1, r0
   147c0:	mov	r0, #1
   147c4:	movt	r2, #1
   147c8:	bl	11094 <__printf_chk@plt>
   147cc:	movw	r1, #28193	; 0x6e21
   147d0:	mov	r0, #0
   147d4:	mov	r2, #5
   147d8:	movt	r1, #1
   147dc:	bl	10f44 <dcgettext@plt>
   147e0:	movw	r2, #21322	; 0x534a
   147e4:	movw	r3, #21763	; 0x5503
   147e8:	mov	r1, r0
   147ec:	mov	r0, #1
   147f0:	movt	r2, #1
   147f4:	movt	r3, #1
   147f8:	bl	11094 <__printf_chk@plt>
   147fc:	movw	r1, #28213	; 0x6e35
   14800:	mov	r0, #0
   14804:	mov	r2, #5
   14808:	movt	r1, #1
   1480c:	bl	10f44 <dcgettext@plt>
   14810:	movw	r2, #28252	; 0x6e5c
   14814:	mov	r1, r0
   14818:	mov	r0, #1
   1481c:	movt	r2, #1
   14820:	pop	{fp, lr}
   14824:	b	11094 <__printf_chk@plt>
   14828:	b	1482c <_obstack_memory_used@@Base+0x2030>
   1482c:	push	{r4, r5, r6, sl, fp, lr}
   14830:	add	fp, sp, #16
   14834:	mov	r4, r2
   14838:	mov	r5, r1
   1483c:	mov	r6, r0
   14840:	bl	14ec8 <_obstack_memory_used@@Base+0x26cc>
   14844:	cmp	r0, #0
   14848:	popne	{r4, r5, r6, sl, fp, pc}
   1484c:	cmp	r6, #0
   14850:	beq	14864 <_obstack_memory_used@@Base+0x2068>
   14854:	cmp	r5, #0
   14858:	cmpne	r4, #0
   1485c:	bne	14864 <_obstack_memory_used@@Base+0x2068>
   14860:	pop	{r4, r5, r6, sl, fp, pc}
   14864:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14868:	push	{fp, lr}
   1486c:	mov	fp, sp
   14870:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   14874:	cmp	r0, #0
   14878:	popne	{fp, pc}
   1487c:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14880:	push	{fp, lr}
   14884:	mov	fp, sp
   14888:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   1488c:	cmp	r0, #0
   14890:	popne	{fp, pc}
   14894:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14898:	push	{fp, lr}
   1489c:	mov	fp, sp
   148a0:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   148a4:	cmp	r0, #0
   148a8:	popne	{fp, pc}
   148ac:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   148b0:	push	{r4, r5, fp, lr}
   148b4:	add	fp, sp, #8
   148b8:	mov	r4, r1
   148bc:	mov	r5, r0
   148c0:	bl	14d5c <_obstack_memory_used@@Base+0x2560>
   148c4:	cmp	r0, #0
   148c8:	popne	{r4, r5, fp, pc}
   148cc:	cmp	r5, #0
   148d0:	beq	148e0 <_obstack_memory_used@@Base+0x20e4>
   148d4:	cmp	r4, #0
   148d8:	bne	148e0 <_obstack_memory_used@@Base+0x20e4>
   148dc:	pop	{r4, r5, fp, pc}
   148e0:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   148e4:	push	{fp, lr}
   148e8:	mov	fp, sp
   148ec:	cmp	r1, #0
   148f0:	orreq	r1, r1, #1
   148f4:	bl	14d5c <_obstack_memory_used@@Base+0x2560>
   148f8:	cmp	r0, #0
   148fc:	popne	{fp, pc}
   14900:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14904:	push	{fp, lr}
   14908:	mov	fp, sp
   1490c:	clz	r3, r2
   14910:	lsr	ip, r3, #5
   14914:	clz	r3, r1
   14918:	lsr	r3, r3, #5
   1491c:	orrs	r3, r3, ip
   14920:	movwne	r1, #1
   14924:	movwne	r2, #1
   14928:	bl	14ec8 <_obstack_memory_used@@Base+0x26cc>
   1492c:	cmp	r0, #0
   14930:	popne	{fp, pc}
   14934:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14938:	push	{fp, lr}
   1493c:	mov	fp, sp
   14940:	mov	r2, r1
   14944:	mov	r1, r0
   14948:	mov	r0, #0
   1494c:	bl	14ec8 <_obstack_memory_used@@Base+0x26cc>
   14950:	cmp	r0, #0
   14954:	popne	{fp, pc}
   14958:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   1495c:	mov	r2, r1
   14960:	mov	r1, r0
   14964:	mov	r0, #0
   14968:	b	14904 <_obstack_memory_used@@Base+0x2108>
   1496c:	mov	r2, #1
   14970:	b	14974 <_obstack_memory_used@@Base+0x2178>
   14974:	push	{r4, r5, fp, lr}
   14978:	add	fp, sp, #8
   1497c:	ldr	r5, [r1]
   14980:	mov	r4, r1
   14984:	cmp	r0, #0
   14988:	beq	149a0 <_obstack_memory_used@@Base+0x21a4>
   1498c:	mov	r1, #1
   14990:	add	r1, r1, r5, lsr #1
   14994:	adds	r5, r5, r1
   14998:	bcc	149b8 <_obstack_memory_used@@Base+0x21bc>
   1499c:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   149a0:	cmp	r5, #0
   149a4:	bne	149b8 <_obstack_memory_used@@Base+0x21bc>
   149a8:	mov	r1, #64	; 0x40
   149ac:	cmp	r2, #64	; 0x40
   149b0:	udiv	r5, r1, r2
   149b4:	addhi	r5, r5, #1
   149b8:	mov	r1, r5
   149bc:	bl	1482c <_obstack_memory_used@@Base+0x2030>
   149c0:	str	r5, [r4]
   149c4:	pop	{r4, r5, fp, pc}
   149c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149cc:	add	fp, sp, #24
   149d0:	ldr	r6, [r1]
   149d4:	mov	r8, r1
   149d8:	ldr	r4, [fp, #8]
   149dc:	add	r1, r6, r6, asr #1
   149e0:	cmp	r1, r6
   149e4:	mvnvs	r1, #-2147483648	; 0x80000000
   149e8:	cmp	r1, r3
   149ec:	mov	r5, r1
   149f0:	movgt	r5, r3
   149f4:	cmn	r3, #1
   149f8:	movle	r5, r1
   149fc:	cmn	r4, #1
   14a00:	ble	14a20 <_obstack_memory_used@@Base+0x2224>
   14a04:	cmp	r4, #0
   14a08:	beq	14a74 <_obstack_memory_used@@Base+0x2278>
   14a0c:	cmn	r5, #1
   14a10:	ble	14a48 <_obstack_memory_used@@Base+0x224c>
   14a14:	mvn	r7, #-2147483648	; 0x80000000
   14a18:	udiv	r1, r7, r4
   14a1c:	b	14a3c <_obstack_memory_used@@Base+0x2240>
   14a20:	cmn	r5, #1
   14a24:	ble	14a64 <_obstack_memory_used@@Base+0x2268>
   14a28:	cmn	r4, #1
   14a2c:	beq	14a74 <_obstack_memory_used@@Base+0x2278>
   14a30:	mov	r1, #-2147483648	; 0x80000000
   14a34:	mvn	r7, #-2147483648	; 0x80000000
   14a38:	sdiv	r1, r1, r4
   14a3c:	cmp	r1, r5
   14a40:	bge	14a74 <_obstack_memory_used@@Base+0x2278>
   14a44:	b	14a84 <_obstack_memory_used@@Base+0x2288>
   14a48:	beq	14a74 <_obstack_memory_used@@Base+0x2278>
   14a4c:	mov	r1, #-2147483648	; 0x80000000
   14a50:	mvn	r7, #-2147483648	; 0x80000000
   14a54:	sdiv	r1, r1, r5
   14a58:	cmp	r1, r4
   14a5c:	bge	14a74 <_obstack_memory_used@@Base+0x2278>
   14a60:	b	14a84 <_obstack_memory_used@@Base+0x2288>
   14a64:	mvn	r7, #-2147483648	; 0x80000000
   14a68:	sdiv	r1, r7, r4
   14a6c:	cmp	r5, r1
   14a70:	blt	14a84 <_obstack_memory_used@@Base+0x2288>
   14a74:	mul	r1, r5, r4
   14a78:	mov	r7, #64	; 0x40
   14a7c:	cmp	r1, #63	; 0x3f
   14a80:	bgt	14a8c <_obstack_memory_used@@Base+0x2290>
   14a84:	sdiv	r5, r7, r4
   14a88:	mul	r1, r5, r4
   14a8c:	cmp	r0, #0
   14a90:	moveq	r7, #0
   14a94:	streq	r7, [r8]
   14a98:	sub	r7, r5, r6
   14a9c:	cmp	r7, r2
   14aa0:	bge	14b44 <_obstack_memory_used@@Base+0x2348>
   14aa4:	add	r5, r6, r2
   14aa8:	mov	r2, #0
   14aac:	mov	r1, #0
   14ab0:	cmp	r5, r3
   14ab4:	movwgt	r2, #1
   14ab8:	cmn	r3, #1
   14abc:	movwgt	r1, #1
   14ac0:	cmp	r5, r6
   14ac4:	bvs	14b2c <_obstack_memory_used@@Base+0x2330>
   14ac8:	ands	r1, r1, r2
   14acc:	bne	14b2c <_obstack_memory_used@@Base+0x2330>
   14ad0:	cmn	r4, #1
   14ad4:	ble	14af4 <_obstack_memory_used@@Base+0x22f8>
   14ad8:	cmp	r4, #0
   14adc:	beq	14b40 <_obstack_memory_used@@Base+0x2344>
   14ae0:	cmn	r5, #1
   14ae4:	ble	14b18 <_obstack_memory_used@@Base+0x231c>
   14ae8:	mvn	r1, #-2147483648	; 0x80000000
   14aec:	udiv	r1, r1, r4
   14af0:	b	14b0c <_obstack_memory_used@@Base+0x2310>
   14af4:	cmn	r5, #1
   14af8:	ble	14b30 <_obstack_memory_used@@Base+0x2334>
   14afc:	cmn	r4, #1
   14b00:	beq	14b40 <_obstack_memory_used@@Base+0x2344>
   14b04:	mov	r1, #-2147483648	; 0x80000000
   14b08:	sdiv	r1, r1, r4
   14b0c:	cmp	r1, r5
   14b10:	bge	14b40 <_obstack_memory_used@@Base+0x2344>
   14b14:	b	14b2c <_obstack_memory_used@@Base+0x2330>
   14b18:	beq	14b40 <_obstack_memory_used@@Base+0x2344>
   14b1c:	mov	r1, #-2147483648	; 0x80000000
   14b20:	sdiv	r1, r1, r5
   14b24:	cmp	r1, r4
   14b28:	bge	14b40 <_obstack_memory_used@@Base+0x2344>
   14b2c:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14b30:	mvn	r1, #-2147483648	; 0x80000000
   14b34:	sdiv	r1, r1, r4
   14b38:	cmp	r5, r1
   14b3c:	blt	14b2c <_obstack_memory_used@@Base+0x2330>
   14b40:	mul	r1, r5, r4
   14b44:	bl	148b0 <_obstack_memory_used@@Base+0x20b4>
   14b48:	str	r5, [r8]
   14b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	mov	r1, #1
   14b5c:	bl	14cd8 <_obstack_memory_used@@Base+0x24dc>
   14b60:	cmp	r0, #0
   14b64:	popne	{fp, pc}
   14b68:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14b6c:	push	{fp, lr}
   14b70:	mov	fp, sp
   14b74:	bl	14cd8 <_obstack_memory_used@@Base+0x24dc>
   14b78:	cmp	r0, #0
   14b7c:	popne	{fp, pc}
   14b80:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14b84:	push	{fp, lr}
   14b88:	mov	fp, sp
   14b8c:	mov	r1, #1
   14b90:	bl	14cd8 <_obstack_memory_used@@Base+0x24dc>
   14b94:	cmp	r0, #0
   14b98:	popne	{fp, pc}
   14b9c:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14ba0:	push	{fp, lr}
   14ba4:	mov	fp, sp
   14ba8:	bl	14cd8 <_obstack_memory_used@@Base+0x24dc>
   14bac:	cmp	r0, #0
   14bb0:	popne	{fp, pc}
   14bb4:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14bb8:	push	{r4, r5, fp, lr}
   14bbc:	add	fp, sp, #8
   14bc0:	mov	r5, r0
   14bc4:	mov	r0, r1
   14bc8:	mov	r4, r1
   14bcc:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   14bd0:	cmp	r0, #0
   14bd4:	beq	14be8 <_obstack_memory_used@@Base+0x23ec>
   14bd8:	mov	r1, r5
   14bdc:	mov	r2, r4
   14be0:	pop	{r4, r5, fp, lr}
   14be4:	b	10f20 <memcpy@plt>
   14be8:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14bec:	push	{r4, r5, fp, lr}
   14bf0:	add	fp, sp, #8
   14bf4:	mov	r5, r0
   14bf8:	mov	r0, r1
   14bfc:	mov	r4, r1
   14c00:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   14c04:	cmp	r0, #0
   14c08:	beq	14c1c <_obstack_memory_used@@Base+0x2420>
   14c0c:	mov	r1, r5
   14c10:	mov	r2, r4
   14c14:	pop	{r4, r5, fp, lr}
   14c18:	b	10f20 <memcpy@plt>
   14c1c:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14c20:	push	{r4, r5, fp, lr}
   14c24:	add	fp, sp, #8
   14c28:	mov	r5, r0
   14c2c:	add	r0, r1, #1
   14c30:	mov	r4, r1
   14c34:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   14c38:	cmp	r0, #0
   14c3c:	beq	14c58 <_obstack_memory_used@@Base+0x245c>
   14c40:	mov	r1, #0
   14c44:	mov	r2, r4
   14c48:	strb	r1, [r0, r4]
   14c4c:	mov	r1, r5
   14c50:	pop	{r4, r5, fp, lr}
   14c54:	b	10f20 <memcpy@plt>
   14c58:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14c5c:	push	{r4, r5, fp, lr}
   14c60:	add	fp, sp, #8
   14c64:	mov	r4, r0
   14c68:	bl	11064 <strlen@plt>
   14c6c:	add	r5, r0, #1
   14c70:	mov	r0, r5
   14c74:	bl	14d2c <_obstack_memory_used@@Base+0x2530>
   14c78:	cmp	r0, #0
   14c7c:	beq	14c90 <_obstack_memory_used@@Base+0x2494>
   14c80:	mov	r1, r4
   14c84:	mov	r2, r5
   14c88:	pop	{r4, r5, fp, lr}
   14c8c:	b	10f20 <memcpy@plt>
   14c90:	bl	14c94 <_obstack_memory_used@@Base+0x2498>
   14c94:	push	{fp, lr}
   14c98:	mov	fp, sp
   14c9c:	movw	r0, #28908	; 0x70ec
   14ca0:	movw	r1, #27284	; 0x6a94
   14ca4:	mov	r2, #5
   14ca8:	movt	r0, #2
   14cac:	movt	r1, #1
   14cb0:	ldr	r4, [r0]
   14cb4:	mov	r0, #0
   14cb8:	bl	10f44 <dcgettext@plt>
   14cbc:	movw	r2, #27271	; 0x6a87
   14cc0:	mov	r3, r0
   14cc4:	mov	r0, r4
   14cc8:	mov	r1, #0
   14ccc:	movt	r2, #1
   14cd0:	bl	10fbc <error@plt>
   14cd4:	bl	11124 <abort@plt>
   14cd8:	clz	r2, r1
   14cdc:	clz	r3, r0
   14ce0:	lsr	r2, r2, #5
   14ce4:	lsr	r3, r3, #5
   14ce8:	orrs	r2, r3, r2
   14cec:	movwne	r1, #1
   14cf0:	movwne	r0, #1
   14cf4:	cmp	r1, #0
   14cf8:	beq	14d28 <_obstack_memory_used@@Base+0x252c>
   14cfc:	mvn	r2, #-2147483648	; 0x80000000
   14d00:	udiv	r2, r2, r1
   14d04:	cmp	r2, r0
   14d08:	bcs	14d28 <_obstack_memory_used@@Base+0x252c>
   14d0c:	push	{fp, lr}
   14d10:	mov	fp, sp
   14d14:	bl	11070 <__errno_location@plt>
   14d18:	mov	r1, #12
   14d1c:	str	r1, [r0]
   14d20:	mov	r0, #0
   14d24:	pop	{fp, pc}
   14d28:	b	10ed8 <calloc@plt>
   14d2c:	cmp	r0, #0
   14d30:	movweq	r0, #1
   14d34:	cmn	r0, #1
   14d38:	ble	14d40 <_obstack_memory_used@@Base+0x2544>
   14d3c:	b	10ff8 <malloc@plt>
   14d40:	push	{fp, lr}
   14d44:	mov	fp, sp
   14d48:	bl	11070 <__errno_location@plt>
   14d4c:	mov	r1, #12
   14d50:	str	r1, [r0]
   14d54:	mov	r0, #0
   14d58:	pop	{fp, pc}
   14d5c:	push	{fp, lr}
   14d60:	mov	fp, sp
   14d64:	cmp	r0, #0
   14d68:	beq	14d84 <_obstack_memory_used@@Base+0x2588>
   14d6c:	cmp	r1, #0
   14d70:	beq	14d90 <_obstack_memory_used@@Base+0x2594>
   14d74:	cmn	r1, #1
   14d78:	ble	14d98 <_obstack_memory_used@@Base+0x259c>
   14d7c:	pop	{fp, lr}
   14d80:	b	10f5c <realloc@plt>
   14d84:	mov	r0, r1
   14d88:	pop	{fp, lr}
   14d8c:	b	14d2c <_obstack_memory_used@@Base+0x2530>
   14d90:	bl	12230 <close@plt+0x1100>
   14d94:	b	14da4 <_obstack_memory_used@@Base+0x25a8>
   14d98:	bl	11070 <__errno_location@plt>
   14d9c:	mov	r1, #12
   14da0:	str	r1, [r0]
   14da4:	mov	r0, #0
   14da8:	pop	{fp, pc}
   14dac:	push	{r4, r5, r6, sl, fp, lr}
   14db0:	add	fp, sp, #16
   14db4:	mov	r4, r0
   14db8:	bl	10f98 <__fpending@plt>
   14dbc:	mov	r5, r0
   14dc0:	mov	r0, r4
   14dc4:	bl	10fa4 <ferror_unlocked@plt>
   14dc8:	mov	r6, r0
   14dcc:	mov	r0, r4
   14dd0:	bl	12138 <close@plt+0x1008>
   14dd4:	cmp	r6, #0
   14dd8:	beq	14df8 <_obstack_memory_used@@Base+0x25fc>
   14ddc:	mvn	r4, #0
   14de0:	cmp	r0, #0
   14de4:	bne	14e24 <_obstack_memory_used@@Base+0x2628>
   14de8:	bl	11070 <__errno_location@plt>
   14dec:	mov	r1, #0
   14df0:	str	r1, [r0]
   14df4:	b	14e24 <_obstack_memory_used@@Base+0x2628>
   14df8:	cmp	r0, #0
   14dfc:	mov	r4, r0
   14e00:	mvnne	r4, #0
   14e04:	cmp	r5, #0
   14e08:	bne	14e24 <_obstack_memory_used@@Base+0x2628>
   14e0c:	cmp	r0, #0
   14e10:	beq	14e24 <_obstack_memory_used@@Base+0x2628>
   14e14:	bl	11070 <__errno_location@plt>
   14e18:	ldr	r0, [r0]
   14e1c:	subs	r4, r0, #9
   14e20:	mvnne	r4, #0
   14e24:	mov	r0, r4
   14e28:	pop	{r4, r5, r6, sl, fp, pc}
   14e2c:	push	{fp, lr}
   14e30:	mov	fp, sp
   14e34:	mov	r0, #14
   14e38:	bl	110e8 <nl_langinfo@plt>
   14e3c:	movw	r1, #21955	; 0x55c3
   14e40:	cmp	r0, #0
   14e44:	movt	r1, #1
   14e48:	movne	r1, r0
   14e4c:	movw	r0, #28328	; 0x6ea8
   14e50:	ldrb	r2, [r1]
   14e54:	movt	r0, #1
   14e58:	cmp	r2, #0
   14e5c:	movne	r0, r1
   14e60:	pop	{fp, pc}
   14e64:	push	{r4, r5, r6, r7, fp, lr}
   14e68:	add	fp, sp, #16
   14e6c:	sub	sp, sp, #8
   14e70:	cmp	r0, #0
   14e74:	add	r5, sp, #4
   14e78:	mov	r7, r2
   14e7c:	mov	r4, r1
   14e80:	movne	r5, r0
   14e84:	mov	r0, r5
   14e88:	bl	10fb0 <mbrtowc@plt>
   14e8c:	mov	r6, r0
   14e90:	cmp	r7, #0
   14e94:	beq	14ebc <_obstack_memory_used@@Base+0x26c0>
   14e98:	cmn	r6, #2
   14e9c:	bcc	14ebc <_obstack_memory_used@@Base+0x26c0>
   14ea0:	mov	r0, #0
   14ea4:	bl	14f04 <_obstack_memory_used@@Base+0x2708>
   14ea8:	cmp	r0, #0
   14eac:	bne	14ebc <_obstack_memory_used@@Base+0x26c0>
   14eb0:	ldrb	r0, [r4]
   14eb4:	mov	r6, #1
   14eb8:	str	r0, [r5]
   14ebc:	mov	r0, r6
   14ec0:	sub	sp, fp, #16
   14ec4:	pop	{r4, r5, r6, r7, fp, pc}
   14ec8:	cmp	r2, #0
   14ecc:	beq	14efc <_obstack_memory_used@@Base+0x2700>
   14ed0:	mvn	r3, #0
   14ed4:	udiv	r3, r3, r2
   14ed8:	cmp	r3, r1
   14edc:	bcs	14efc <_obstack_memory_used@@Base+0x2700>
   14ee0:	push	{fp, lr}
   14ee4:	mov	fp, sp
   14ee8:	bl	11070 <__errno_location@plt>
   14eec:	mov	r1, #12
   14ef0:	str	r1, [r0]
   14ef4:	mov	r0, #0
   14ef8:	pop	{fp, pc}
   14efc:	mul	r1, r2, r1
   14f00:	b	14d5c <_obstack_memory_used@@Base+0x2560>
   14f04:	push	{r4, sl, fp, lr}
   14f08:	add	fp, sp, #8
   14f0c:	sub	sp, sp, #264	; 0x108
   14f10:	add	r1, sp, #7
   14f14:	movw	r2, #257	; 0x101
   14f18:	bl	14f70 <_obstack_memory_used@@Base+0x2774>
   14f1c:	mov	r4, #0
   14f20:	cmp	r0, #0
   14f24:	bne	14f64 <_obstack_memory_used@@Base+0x2768>
   14f28:	movw	r1, #22232	; 0x56d8
   14f2c:	add	r0, sp, #7
   14f30:	mov	r2, #2
   14f34:	movt	r1, #1
   14f38:	bl	11058 <bcmp@plt>
   14f3c:	cmp	r0, #0
   14f40:	beq	14f64 <_obstack_memory_used@@Base+0x2768>
   14f44:	movw	r1, #28334	; 0x6eae
   14f48:	add	r0, sp, #7
   14f4c:	mov	r2, #6
   14f50:	movt	r1, #1
   14f54:	bl	11058 <bcmp@plt>
   14f58:	cmp	r0, #0
   14f5c:	mov	r4, r0
   14f60:	movwne	r4, #1
   14f64:	mov	r0, r4
   14f68:	sub	sp, fp, #8
   14f6c:	pop	{r4, sl, fp, pc}
   14f70:	push	{r4, r5, r6, r7, fp, lr}
   14f74:	add	fp, sp, #16
   14f78:	mov	r4, r1
   14f7c:	mov	r1, #0
   14f80:	mov	r6, r2
   14f84:	bl	110d0 <setlocale@plt>
   14f88:	cmp	r0, #0
   14f8c:	beq	14fb8 <_obstack_memory_used@@Base+0x27bc>
   14f90:	mov	r7, r0
   14f94:	bl	11064 <strlen@plt>
   14f98:	cmp	r0, r6
   14f9c:	bcs	14fcc <_obstack_memory_used@@Base+0x27d0>
   14fa0:	add	r2, r0, #1
   14fa4:	mov	r0, r4
   14fa8:	mov	r1, r7
   14fac:	bl	10f20 <memcpy@plt>
   14fb0:	mov	r5, #0
   14fb4:	b	14ff4 <_obstack_memory_used@@Base+0x27f8>
   14fb8:	cmp	r6, #0
   14fbc:	mov	r5, #22
   14fc0:	movne	r0, #0
   14fc4:	strbne	r0, [r4]
   14fc8:	b	14ff4 <_obstack_memory_used@@Base+0x27f8>
   14fcc:	mov	r5, #34	; 0x22
   14fd0:	cmp	r6, #0
   14fd4:	beq	14ff4 <_obstack_memory_used@@Base+0x27f8>
   14fd8:	sub	r6, r6, #1
   14fdc:	mov	r0, r4
   14fe0:	mov	r1, r7
   14fe4:	mov	r2, r6
   14fe8:	bl	10f20 <memcpy@plt>
   14fec:	mov	r0, #0
   14ff0:	strb	r0, [r4, r6]
   14ff4:	mov	r0, r5
   14ff8:	pop	{r4, r5, r6, r7, fp, pc}
   14ffc:	mov	r1, #0
   15000:	b	110d0 <setlocale@plt>
   15004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15008:	mov	r7, r0
   1500c:	ldr	r6, [pc, #72]	; 1505c <_obstack_memory_used@@Base+0x2860>
   15010:	ldr	r5, [pc, #72]	; 15060 <_obstack_memory_used@@Base+0x2864>
   15014:	add	r6, pc, r6
   15018:	add	r5, pc, r5
   1501c:	sub	r6, r6, r5
   15020:	mov	r8, r1
   15024:	mov	r9, r2
   15028:	bl	10eb8 <calloc@plt-0x20>
   1502c:	asrs	r6, r6, #2
   15030:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15034:	mov	r4, #0
   15038:	add	r4, r4, #1
   1503c:	ldr	r3, [r5], #4
   15040:	mov	r2, r9
   15044:	mov	r1, r8
   15048:	mov	r0, r7
   1504c:	blx	r3
   15050:	cmp	r6, r4
   15054:	bne	15038 <_obstack_memory_used@@Base+0x283c>
   15058:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1505c:	strdeq	r1, [r1], -r0
   15060:	andeq	r1, r1, r8, ror #29
   15064:	bx	lr
   15068:	ldr	r3, [pc, #12]	; 1507c <_obstack_memory_used@@Base+0x2880>
   1506c:	mov	r1, #0
   15070:	add	r3, pc, r3
   15074:	ldr	r2, [r3]
   15078:	b	1107c <__cxa_atexit@plt>
   1507c:	andeq	r2, r1, ip, rrx

Disassembly of section .fini:

00015080 <.fini>:
   15080:	push	{r3, lr}
   15084:	pop	{r3, pc}
