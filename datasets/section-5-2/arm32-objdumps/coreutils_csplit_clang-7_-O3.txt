
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011398 <.init>:
   11398:	push	{r3, lr}
   1139c:	bl	117ac <__assert_fail@plt+0x4c>
   113a0:	pop	{r3, pc}

Disassembly of section .plt:

000113a4 <pthread_mutex_unlock@plt-0x14>:
   113a4:	push	{lr}		; (str lr, [sp, #-4]!)
   113a8:	ldr	lr, [pc, #4]	; 113b4 <pthread_mutex_unlock@plt-0x4>
   113ac:	add	lr, pc, lr
   113b0:	ldr	pc, [lr, #8]!
   113b4:	andeq	sp, r2, ip, asr #24

000113b8 <pthread_mutex_unlock@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #184320	; 0x2d000
   113c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113c4 <fdopen@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #184320	; 0x2d000
   113cc:	ldr	pc, [ip, #3140]!	; 0xc44

000113d0 <calloc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #184320	; 0x2d000
   113d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113dc <fputs_unlocked@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #184320	; 0x2d000
   113e4:	ldr	pc, [ip, #3124]!	; 0xc34

000113e8 <wctype@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #184320	; 0x2d000
   113f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f4 <raise@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #184320	; 0x2d000
   113fc:	ldr	pc, [ip, #3108]!	; 0xc24

00011400 <wcrtomb@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #184320	; 0x2d000
   11408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001140c <iswctype@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #184320	; 0x2d000
   11414:	ldr	pc, [ip, #3092]!	; 0xc14

00011418 <strcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #184320	; 0x2d000
   11420:	ldr	pc, [ip, #3084]!	; 0xc0c

00011424 <read@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #184320	; 0x2d000
   1142c:	ldr	pc, [ip, #3076]!	; 0xc04

00011430 <pthread_mutex_destroy@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #184320	; 0x2d000
   11438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001143c <fflush@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #184320	; 0x2d000
   11444:	ldr	pc, [ip, #3060]!	; 0xbf4

00011448 <sigprocmask@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #184320	; 0x2d000
   11450:	ldr	pc, [ip, #3052]!	; 0xbec

00011454 <memmove@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #184320	; 0x2d000
   1145c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011460 <free@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #184320	; 0x2d000
   11468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001146c <pthread_mutex_lock@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #184320	; 0x2d000
   11474:	ldr	pc, [ip, #3028]!	; 0xbd4

00011478 <_exit@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #184320	; 0x2d000
   11480:	ldr	pc, [ip, #3020]!	; 0xbcc

00011484 <memcpy@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #184320	; 0x2d000
   1148c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011490 <pthread_mutex_init@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #184320	; 0x2d000
   11498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001149c <__strtoull_internal@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #184320	; 0x2d000
   114a4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a8 <towlower@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #184320	; 0x2d000
   114b0:	ldr	pc, [ip, #2988]!	; 0xbac

000114b4 <mbsinit@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #184320	; 0x2d000
   114bc:	ldr	pc, [ip, #2980]!	; 0xba4

000114c0 <signal@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #184320	; 0x2d000
   114c8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114cc <fwrite_unlocked@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #184320	; 0x2d000
   114d4:	ldr	pc, [ip, #2964]!	; 0xb94

000114d8 <memcmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #184320	; 0x2d000
   114e0:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e4 <dcgettext@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #184320	; 0x2d000
   114ec:	ldr	pc, [ip, #2948]!	; 0xb84

000114f0 <unlink@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #184320	; 0x2d000
   114f8:	ldr	pc, [ip, #2940]!	; 0xb7c

000114fc <dup2@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #184320	; 0x2d000
   11504:	ldr	pc, [ip, #2932]!	; 0xb74

00011508 <realloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #184320	; 0x2d000
   11510:	ldr	pc, [ip, #2924]!	; 0xb6c

00011514 <sigismember@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #184320	; 0x2d000
   1151c:	ldr	pc, [ip, #2916]!	; 0xb64

00011520 <textdomain@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #184320	; 0x2d000
   11528:	ldr	pc, [ip, #2908]!	; 0xb5c

0001152c <rawmemchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #184320	; 0x2d000
   11534:	ldr	pc, [ip, #2900]!	; 0xb54

00011538 <iswprint@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #184320	; 0x2d000
   11540:	ldr	pc, [ip, #2892]!	; 0xb4c

00011544 <sigaction@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #184320	; 0x2d000
   1154c:	ldr	pc, [ip, #2884]!	; 0xb44

00011550 <fwrite@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #184320	; 0x2d000
   11558:	ldr	pc, [ip, #2876]!	; 0xb3c

0001155c <lseek64@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #184320	; 0x2d000
   11564:	ldr	pc, [ip, #2868]!	; 0xb34

00011568 <__ctype_get_mb_cur_max@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #184320	; 0x2d000
   11570:	ldr	pc, [ip, #2860]!	; 0xb2c

00011574 <strcpy@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #184320	; 0x2d000
   1157c:	ldr	pc, [ip, #2852]!	; 0xb24

00011580 <__fpending@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #184320	; 0x2d000
   11588:	ldr	pc, [ip, #2844]!	; 0xb1c

0001158c <mbrtowc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #184320	; 0x2d000
   11594:	ldr	pc, [ip, #2836]!	; 0xb14

00011598 <error@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #184320	; 0x2d000
   115a0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a4 <open64@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #184320	; 0x2d000
   115ac:	ldr	pc, [ip, #2820]!	; 0xb04

000115b0 <malloc@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #184320	; 0x2d000
   115b8:	ldr	pc, [ip, #2812]!	; 0xafc

000115bc <sigaddset@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #184320	; 0x2d000
   115c4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c8 <__libc_start_main@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #184320	; 0x2d000
   115d0:	ldr	pc, [ip, #2796]!	; 0xaec

000115d4 <__freading@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #184320	; 0x2d000
   115dc:	ldr	pc, [ip, #2788]!	; 0xae4

000115e0 <__ctype_tolower_loc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #184320	; 0x2d000
   115e8:	ldr	pc, [ip, #2780]!	; 0xadc

000115ec <__ctype_toupper_loc@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #184320	; 0x2d000
   115f4:	ldr	pc, [ip, #2772]!	; 0xad4

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #184320	; 0x2d000
   11600:	ldr	pc, [ip, #2764]!	; 0xacc

00011604 <getopt_long@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #184320	; 0x2d000
   1160c:	ldr	pc, [ip, #2756]!	; 0xac4

00011610 <__ctype_b_loc@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #184320	; 0x2d000
   11618:	ldr	pc, [ip, #2748]!	; 0xabc

0001161c <exit@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #184320	; 0x2d000
   11624:	ldr	pc, [ip, #2740]!	; 0xab4

00011628 <strlen@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #184320	; 0x2d000
   11630:	ldr	pc, [ip, #2732]!	; 0xaac

00011634 <strchr@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #184320	; 0x2d000
   1163c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011640 <__errno_location@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #184320	; 0x2d000
   11648:	ldr	pc, [ip, #2716]!	; 0xa9c

0001164c <iswalnum@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #184320	; 0x2d000
   11654:	ldr	pc, [ip, #2708]!	; 0xa94

00011658 <__sprintf_chk@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #184320	; 0x2d000
   11660:	ldr	pc, [ip, #2700]!	; 0xa8c

00011664 <__cxa_atexit@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #184320	; 0x2d000
   1166c:	ldr	pc, [ip, #2692]!	; 0xa84

00011670 <memset@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #184320	; 0x2d000
   11678:	ldr	pc, [ip, #2684]!	; 0xa7c

0001167c <btowc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #184320	; 0x2d000
   11684:	ldr	pc, [ip, #2676]!	; 0xa74

00011688 <__printf_chk@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #184320	; 0x2d000
   11690:	ldr	pc, [ip, #2668]!	; 0xa6c

00011694 <fileno@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #184320	; 0x2d000
   1169c:	ldr	pc, [ip, #2660]!	; 0xa64

000116a0 <__fprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #184320	; 0x2d000
   116a8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116ac <fclose@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #184320	; 0x2d000
   116b4:	ldr	pc, [ip, #2644]!	; 0xa54

000116b8 <fseeko64@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #184320	; 0x2d000
   116c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c4 <fcntl64@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #184320	; 0x2d000
   116cc:	ldr	pc, [ip, #2628]!	; 0xa44

000116d0 <setlocale@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #184320	; 0x2d000
   116d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116dc <sigemptyset@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #184320	; 0x2d000
   116e4:	ldr	pc, [ip, #2612]!	; 0xa34

000116e8 <strrchr@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #184320	; 0x2d000
   116f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f4 <nl_langinfo@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #184320	; 0x2d000
   116fc:	ldr	pc, [ip, #2596]!	; 0xa24

00011700 <__strtoll_internal@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #184320	; 0x2d000
   11708:	ldr	pc, [ip, #2588]!	; 0xa1c

0001170c <fopen64@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #184320	; 0x2d000
   11714:	ldr	pc, [ip, #2580]!	; 0xa14

00011718 <bindtextdomain@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #184320	; 0x2d000
   11720:	ldr	pc, [ip, #2572]!	; 0xa0c

00011724 <towupper@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #184320	; 0x2d000
   1172c:	ldr	pc, [ip, #2564]!	; 0xa04

00011730 <strncmp@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #184320	; 0x2d000
   11738:	ldr	pc, [ip, #2556]!	; 0x9fc

0001173c <abort@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #184320	; 0x2d000
   11744:	ldr	pc, [ip, #2548]!	; 0x9f4

00011748 <close@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #184320	; 0x2d000
   11750:	ldr	pc, [ip, #2540]!	; 0x9ec

00011754 <__snprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #184320	; 0x2d000
   1175c:	ldr	pc, [ip, #2532]!	; 0x9e4

00011760 <__assert_fail@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #184320	; 0x2d000
   11768:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00011770 <.text>:
   11770:	mov	fp, #0
   11774:	mov	lr, #0
   11778:	pop	{r1}		; (ldr r1, [sp], #4)
   1177c:	mov	r2, sp
   11780:	push	{r2}		; (str r2, [sp, #-4]!)
   11784:	push	{r0}		; (str r0, [sp, #-4]!)
   11788:	ldr	ip, [pc, #16]	; 117a0 <__assert_fail@plt+0x40>
   1178c:	push	{ip}		; (str ip, [sp, #-4]!)
   11790:	ldr	r0, [pc, #12]	; 117a4 <__assert_fail@plt+0x44>
   11794:	ldr	r3, [pc, #12]	; 117a8 <__assert_fail@plt+0x48>
   11798:	bl	115c8 <__libc_start_main@plt>
   1179c:	bl	1173c <abort@plt>
   117a0:	andeq	sp, r2, ip, asr #21
   117a4:	andeq	r1, r1, ip, lsr #17
   117a8:	andeq	sp, r2, ip, ror #20
   117ac:	ldr	r3, [pc, #20]	; 117c8 <__assert_fail@plt+0x68>
   117b0:	ldr	r2, [pc, #20]	; 117cc <__assert_fail@plt+0x6c>
   117b4:	add	r3, pc, r3
   117b8:	ldr	r2, [r3, r2]
   117bc:	cmp	r2, #0
   117c0:	bxeq	lr
   117c4:	b	115f8 <__gmon_start__@plt>
   117c8:	andeq	sp, r2, r4, asr #16
   117cc:	andeq	r0, r0, r8, asr #2
   117d0:	ldr	r0, [pc, #24]	; 117f0 <__assert_fail@plt+0x90>
   117d4:	ldr	r3, [pc, #24]	; 117f4 <__assert_fail@plt+0x94>
   117d8:	cmp	r3, r0
   117dc:	bxeq	lr
   117e0:	ldr	r3, [pc, #16]	; 117f8 <__assert_fail@plt+0x98>
   117e4:	cmp	r3, #0
   117e8:	bxeq	lr
   117ec:	bx	r3
   117f0:	andeq	pc, r3, r8, lsr #3
   117f4:	andeq	pc, r3, r8, lsr #3
   117f8:	andeq	r0, r0, r0
   117fc:	ldr	r0, [pc, #36]	; 11828 <__assert_fail@plt+0xc8>
   11800:	ldr	r1, [pc, #36]	; 1182c <__assert_fail@plt+0xcc>
   11804:	sub	r1, r1, r0
   11808:	asr	r1, r1, #2
   1180c:	add	r1, r1, r1, lsr #31
   11810:	asrs	r1, r1, #1
   11814:	bxeq	lr
   11818:	ldr	r3, [pc, #16]	; 11830 <__assert_fail@plt+0xd0>
   1181c:	cmp	r3, #0
   11820:	bxeq	lr
   11824:	bx	r3
   11828:	andeq	pc, r3, r8, lsr #3
   1182c:	andeq	pc, r3, r8, lsr #3
   11830:	andeq	r0, r0, r0
   11834:	push	{r4, lr}
   11838:	ldr	r4, [pc, #24]	; 11858 <__assert_fail@plt+0xf8>
   1183c:	ldrb	r3, [r4]
   11840:	cmp	r3, #0
   11844:	popne	{r4, pc}
   11848:	bl	117d0 <__assert_fail@plt+0x70>
   1184c:	mov	r3, #1
   11850:	strb	r3, [r4]
   11854:	pop	{r4, pc}
   11858:	andeq	pc, r3, r4, asr #3
   1185c:	b	117fc <__assert_fail@plt+0x9c>
   11860:	push	{fp, lr}
   11864:	mov	fp, sp
   11868:	movw	r1, #56052	; 0xdaf4
   1186c:	mov	r0, #0
   11870:	mov	r2, #5
   11874:	movt	r1, #2
   11878:	bl	114e4 <dcgettext@plt>
   1187c:	movw	r2, #57999	; 0xe28f
   11880:	mov	r3, r0
   11884:	mov	r0, #0
   11888:	mov	r1, #0
   1188c:	movt	r2, #2
   11890:	bl	11598 <error@plt>
   11894:	bl	11898 <__assert_fail@plt+0x138>
   11898:	push	{fp, lr}
   1189c:	mov	fp, sp
   118a0:	bl	1361c <__assert_fail@plt+0x1ebc>
   118a4:	mov	r0, #1
   118a8:	bl	1161c <exit@plt>
   118ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b0:	add	fp, sp, #28
   118b4:	sub	sp, sp, #4
   118b8:	vpush	{d8-d9}
   118bc:	sub	sp, sp, #208	; 0xd0
   118c0:	str	r0, [sp, #44]	; 0x2c
   118c4:	ldr	r0, [r1]
   118c8:	mov	r6, r1
   118cc:	bl	146c4 <__assert_fail@plt+0x2f64>
   118d0:	movw	r1, #57459	; 0xe073
   118d4:	mov	r0, #6
   118d8:	movt	r1, #2
   118dc:	bl	116d0 <setlocale@plt>
   118e0:	movw	r4, #56133	; 0xdb45
   118e4:	movw	r1, #56069	; 0xdb05
   118e8:	movt	r4, #2
   118ec:	movt	r1, #2
   118f0:	mov	r0, r4
   118f4:	bl	11718 <bindtextdomain@plt>
   118f8:	mov	r0, r4
   118fc:	bl	11520 <textdomain@plt>
   11900:	movw	r0, #16940	; 0x422c
   11904:	movt	r0, #1
   11908:	bl	2dad0 <__assert_fail@plt+0x1c370>
   1190c:	movw	r1, #62024	; 0xf248
   11910:	mov	sl, #1
   11914:	movw	r0, #56093	; 0xdb1d
   11918:	movw	r7, #58816	; 0xe5c0
   1191c:	movw	r9, #61888	; 0xf1c0
   11920:	movw	r4, #61784	; 0xf158
   11924:	mov	r5, #0
   11928:	movt	r1, #3
   1192c:	movt	r0, #2
   11930:	movt	r7, #2
   11934:	movt	r9, #3
   11938:	movt	r4, #3
   1193c:	strb	sl, [r1, #1]
   11940:	str	r6, [r1, #8]
   11944:	str	r6, [sp, #40]	; 0x28
   11948:	movw	r6, #56096	; 0xdb20
   1194c:	str	r5, [r1, #12]
   11950:	str	r5, [r1, #16]
   11954:	strb	r5, [r1]
   11958:	strb	r5, [r1, #2]
   1195c:	str	r0, [r1, #20]
   11960:	movt	r6, #2
   11964:	b	11974 <__assert_fail@plt+0x214>
   11968:	movw	r0, #62024	; 0xf248
   1196c:	movt	r0, #3
   11970:	strb	sl, [r0]
   11974:	ldr	r0, [sp, #44]	; 0x2c
   11978:	ldr	r1, [sp, #40]	; 0x28
   1197c:	mov	r2, r6
   11980:	mov	r3, r7
   11984:	str	r5, [sp]
   11988:	bl	11604 <getopt_long@plt>
   1198c:	cmp	r0, #97	; 0x61
   11990:	ble	11ac0 <__assert_fail@plt+0x360>
   11994:	sub	r1, r0, #98	; 0x62
   11998:	cmp	r1, #24
   1199c:	bhi	11a20 <__assert_fail@plt+0x2c0>
   119a0:	add	r0, pc, #0
   119a4:	ldr	pc, [r0, r1, lsl #2]
   119a8:	andeq	r1, r1, ip, lsl #20
   119ac:			; <UNDEFINED> instruction: 0x000131bc
   119b0:			; <UNDEFINED> instruction: 0x000131bc
   119b4:			; <UNDEFINED> instruction: 0x000131bc
   119b8:	andeq	r1, r1, ip, lsr #21
   119bc:			; <UNDEFINED> instruction: 0x000131bc
   119c0:			; <UNDEFINED> instruction: 0x000131bc
   119c4:			; <UNDEFINED> instruction: 0x000131bc
   119c8:			; <UNDEFINED> instruction: 0x000131bc
   119cc:	muleq	r1, ip, sl
   119d0:			; <UNDEFINED> instruction: 0x000131bc
   119d4:			; <UNDEFINED> instruction: 0x000131bc
   119d8:	andeq	r1, r1, r8, lsr sl
   119dc:			; <UNDEFINED> instruction: 0x000131bc
   119e0:			; <UNDEFINED> instruction: 0x000131bc
   119e4:	andeq	r1, r1, r8, ror #18
   119e8:			; <UNDEFINED> instruction: 0x000131bc
   119ec:	andeq	r1, r1, r8, ror #18
   119f0:			; <UNDEFINED> instruction: 0x000131bc
   119f4:			; <UNDEFINED> instruction: 0x000131bc
   119f8:			; <UNDEFINED> instruction: 0x000131bc
   119fc:			; <UNDEFINED> instruction: 0x000131bc
   11a00:			; <UNDEFINED> instruction: 0x000131bc
   11a04:			; <UNDEFINED> instruction: 0x000131bc
   11a08:	andeq	r1, r1, ip, lsl #21
   11a0c:	ldr	r0, [r9]
   11a10:	movw	r1, #62024	; 0xf248
   11a14:	movt	r1, #3
   11a18:	str	r0, [r1, #24]
   11a1c:	b	11974 <__assert_fail@plt+0x214>
   11a20:	cmp	r0, #256	; 0x100
   11a24:	bne	131bc <__assert_fail@plt+0x1a5c>
   11a28:	movw	r0, #62024	; 0xf248
   11a2c:	movt	r0, #3
   11a30:	strb	sl, [r0, #2]
   11a34:	b	11974 <__assert_fail@plt+0x214>
   11a38:	mov	r8, r4
   11a3c:	ldr	r4, [r9]
   11a40:	movw	r1, #56107	; 0xdb2b
   11a44:	mov	r0, #0
   11a48:	mov	r2, #5
   11a4c:	movt	r1, #2
   11a50:	bl	114e4 <dcgettext@plt>
   11a54:	mvn	r1, #-2147483648	; 0x80000000
   11a58:	mov	r2, #0
   11a5c:	mov	r3, #0
   11a60:	stm	sp, {r1, r5}
   11a64:	movw	r1, #57459	; 0xe073
   11a68:	str	r0, [sp, #12]
   11a6c:	mov	r0, r4
   11a70:	str	r5, [sp, #16]
   11a74:	mov	r4, r8
   11a78:	movt	r1, #2
   11a7c:	str	r1, [sp, #8]
   11a80:	bl	2ac30 <__assert_fail@plt+0x194d0>
   11a84:	str	r0, [r8]
   11a88:	b	11974 <__assert_fail@plt+0x214>
   11a8c:	movw	r0, #62024	; 0xf248
   11a90:	movt	r0, #3
   11a94:	strb	sl, [r0, #3]
   11a98:	b	11974 <__assert_fail@plt+0x214>
   11a9c:	movw	r0, #62024	; 0xf248
   11aa0:	movt	r0, #3
   11aa4:	strb	r5, [r0, #1]
   11aa8:	b	11974 <__assert_fail@plt+0x214>
   11aac:	ldr	r0, [r9]
   11ab0:	movw	r1, #62024	; 0xf248
   11ab4:	movt	r1, #3
   11ab8:	str	r0, [r1, #20]
   11abc:	b	11974 <__assert_fail@plt+0x214>
   11ac0:	cmn	r0, #1
   11ac4:	bne	12ea8 <__assert_fail@plt+0x1748>
   11ac8:	movw	r8, #61872	; 0xf1b0
   11acc:	ldr	r1, [sp, #44]	; 0x2c
   11ad0:	movw	sl, #62024	; 0xf248
   11ad4:	movt	r8, #3
   11ad8:	movt	sl, #3
   11adc:	ldr	r0, [r8]
   11ae0:	sub	r1, r1, r0
   11ae4:	cmp	r1, #1
   11ae8:	ble	13170 <__assert_fail@plt+0x1a10>
   11aec:	ldr	r0, [sl, #20]
   11af0:	bl	11628 <strlen@plt>
   11af4:	mov	r9, r0
   11af8:	ldr	r0, [sl, #24]
   11afc:	cmp	r0, #0
   11b00:	beq	12d7c <__assert_fail@plt+0x161c>
   11b04:	ldr	lr, [sl, #24]
   11b08:	mov	r5, #0
   11b0c:	mvn	r1, #34	; 0x22
   11b10:	mvn	sl, #47	; 0x2f
   11b14:	mvn	r3, #87	; 0x57
   11b18:	mov	ip, #100	; 0x64
   11b1c:	mov	r0, lr
   11b20:	ldrb	r4, [r0]
   11b24:	cmp	r4, #37	; 0x25
   11b28:	beq	11b38 <__assert_fail@plt+0x3d8>
   11b2c:	cmp	r4, #0
   11b30:	bne	11ce8 <__assert_fail@plt+0x588>
   11b34:	b	11d40 <__assert_fail@plt+0x5e0>
   11b38:	mov	r4, r0
   11b3c:	ldrb	r6, [r4, #1]!
   11b40:	cmp	r6, #37	; 0x25
   11b44:	bne	11b60 <__assert_fail@plt+0x400>
   11b48:	mov	r0, r4
   11b4c:	add	r0, r0, #1
   11b50:	ldrb	r4, [r0]
   11b54:	cmp	r4, #37	; 0x25
   11b58:	bne	11b2c <__assert_fail@plt+0x3cc>
   11b5c:	b	11b38 <__assert_fail@plt+0x3d8>
   11b60:	tst	r5, #1
   11b64:	bne	13050 <__assert_fail@plt+0x18f0>
   11b68:	add	r0, r0, #2
   11b6c:	mov	r5, #0
   11b70:	uxtab	r4, r1, r6
   11b74:	cmp	r4, #13
   11b78:	bhi	11bfc <__assert_fail@plt+0x49c>
   11b7c:	add	r7, pc, #0
   11b80:	ldr	pc, [r7, r4, lsl #2]
   11b84:	ldrdeq	r1, [r1], -r0
   11b88:	strdeq	r1, [r1], -ip
   11b8c:	strdeq	r1, [r1], -ip
   11b90:	strdeq	r1, [r1], -ip
   11b94:	andeq	r1, r1, r8, ror #23
   11b98:	strdeq	r1, [r1], -ip
   11b9c:	strdeq	r1, [r1], -ip
   11ba0:	strdeq	r1, [r1], -ip
   11ba4:	strdeq	r1, [r1], -ip
   11ba8:	strdeq	r1, [r1], -ip
   11bac:			; <UNDEFINED> instruction: 0x00011bbc
   11bb0:	strdeq	r1, [r1], -ip
   11bb4:	strdeq	r1, [r1], -ip
   11bb8:			; <UNDEFINED> instruction: 0x00011bbc
   11bbc:	ldrb	r6, [r0], #1
   11bc0:	uxtab	r4, r1, r6
   11bc4:	cmp	r4, #13
   11bc8:	bls	11b7c <__assert_fail@plt+0x41c>
   11bcc:	b	11bfc <__assert_fail@plt+0x49c>
   11bd0:	orr	r5, r5, #2
   11bd4:	ldrb	r6, [r0], #1
   11bd8:	uxtab	r4, r1, r6
   11bdc:	cmp	r4, #13
   11be0:	bls	11b7c <__assert_fail@plt+0x41c>
   11be4:	b	11bfc <__assert_fail@plt+0x49c>
   11be8:	ldrb	r6, [r0], #1
   11bec:	orr	r5, r5, #1
   11bf0:	uxtab	r4, r1, r6
   11bf4:	cmp	r4, #13
   11bf8:	bls	11b7c <__assert_fail@plt+0x41c>
   11bfc:	uxtab	r4, sl, r6
   11c00:	cmp	r4, #9
   11c04:	bhi	11c18 <__assert_fail@plt+0x4b8>
   11c08:	ldrb	r6, [r0], #1
   11c0c:	sub	r4, r6, #48	; 0x30
   11c10:	cmp	r4, #10
   11c14:	bcc	11c08 <__assert_fail@plt+0x4a8>
   11c18:	uxtb	r4, r6
   11c1c:	sub	r0, r0, #1
   11c20:	cmp	r4, #46	; 0x2e
   11c24:	bne	11c38 <__assert_fail@plt+0x4d8>
   11c28:	ldrb	r6, [r0, #1]!
   11c2c:	sub	r4, r6, #48	; 0x30
   11c30:	cmp	r4, #10
   11c34:	bcc	11c28 <__assert_fail@plt+0x4c8>
   11c38:	uxtab	r7, r3, r6
   11c3c:	uxtb	r6, r6
   11c40:	cmp	r7, #32
   11c44:	bhi	12fbc <__assert_fail@plt+0x185c>
   11c48:	add	r2, pc, #4
   11c4c:	mvn	r4, #1
   11c50:	ldr	pc, [r2, r7, lsl #2]
   11c54:	ldrdeq	r1, [r1], -r8
   11c58:	ldrdeq	r2, [r1], -r0
   11c5c:	ldrdeq	r2, [r1], -r0
   11c60:	ldrdeq	r2, [r1], -r0
   11c64:	ldrdeq	r2, [r1], -r0
   11c68:	ldrdeq	r2, [r1], -r0
   11c6c:	ldrdeq	r2, [r1], -r0
   11c70:	ldrdeq	r2, [r1], -r0
   11c74:	ldrdeq	r2, [r1], -r0
   11c78:	ldrdeq	r2, [r1], -r0
   11c7c:	ldrdeq	r2, [r1], -r0
   11c80:	ldrdeq	r2, [r1], -r0
   11c84:	ldrdeq	r1, [r1], -ip
   11c88:	ldrdeq	r2, [r1], -r0
   11c8c:	ldrdeq	r2, [r1], -r0
   11c90:	ldrdeq	r2, [r1], -r0
   11c94:	ldrdeq	r2, [r1], -r0
   11c98:	ldrdeq	r1, [r1], -ip
   11c9c:	ldrdeq	r2, [r1], -r0
   11ca0:	ldrdeq	r2, [r1], -r0
   11ca4:	ldrdeq	r2, [r1], -r0
   11ca8:	ldrdeq	r2, [r1], -r0
   11cac:	ldrdeq	r2, [r1], -r0
   11cb0:	ldrdeq	r1, [r1], -r8
   11cb4:	ldrdeq	r2, [r1], -r0
   11cb8:	ldrdeq	r2, [r1], -r0
   11cbc:	ldrdeq	r2, [r1], -r0
   11cc0:	ldrdeq	r2, [r1], -r0
   11cc4:	ldrdeq	r2, [r1], -r0
   11cc8:	strdeq	r1, [r1], -ip
   11ccc:	ldrdeq	r2, [r1], -r0
   11cd0:	ldrdeq	r2, [r1], -r0
   11cd4:	ldrdeq	r1, [r1], -r8
   11cd8:	mvn	r4, #2
   11cdc:	ands	r4, r4, r5
   11ce0:	mov	r5, #1
   11ce4:	bne	11d0c <__assert_fail@plt+0x5ac>
   11ce8:	add	r0, r0, #1
   11cec:	ldrb	r4, [r0]
   11cf0:	cmp	r4, #37	; 0x25
   11cf4:	bne	11b2c <__assert_fail@plt+0x3cc>
   11cf8:	b	11b38 <__assert_fail@plt+0x3d8>
   11cfc:	strb	ip, [r0]
   11d00:	ands	r4, r4, r5
   11d04:	mov	r5, #1
   11d08:	beq	11ce8 <__assert_fail@plt+0x588>
   11d0c:	movw	r1, #57806	; 0xe1ce
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	movt	r1, #2
   11d1c:	bl	114e4 <dcgettext@plt>
   11d20:	mov	r3, #35	; 0x23
   11d24:	tst	r4, #2
   11d28:	mov	r2, r0
   11d2c:	str	r6, [sp]
   11d30:	movweq	r3, #39	; 0x27
   11d34:	mov	r0, #1
   11d38:	mov	r1, #0
   11d3c:	bl	11598 <error@plt>
   11d40:	tst	r5, #1
   11d44:	beq	131c4 <__assert_fail@plt+0x1a64>
   11d48:	mvn	r0, #-2147483648	; 0x80000000
   11d4c:	mov	r1, #0
   11d50:	mov	r2, #1
   11d54:	mvn	r3, #0
   11d58:	str	lr, [sp]
   11d5c:	str	r0, [sp, #4]
   11d60:	mov	r0, #0
   11d64:	bl	11754 <__snprintf_chk@plt>
   11d68:	movw	sl, #62024	; 0xf248
   11d6c:	cmn	r0, #1
   11d70:	movt	sl, #3
   11d74:	ble	12d9c <__assert_fail@plt+0x163c>
   11d78:	add	r0, r9, r0
   11d7c:	add	r0, r0, #1
   11d80:	cmp	r0, r9
   11d84:	bvs	12d9c <__assert_fail@plt+0x163c>
   11d88:	bl	2a5e0 <__assert_fail@plt+0x18e80>
   11d8c:	str	r0, [sl, #28]
   11d90:	movw	r1, #59148	; 0xe70c
   11d94:	ldr	r0, [r8]
   11d98:	ldr	r9, [sp, #40]	; 0x28
   11d9c:	movt	r1, #2
   11da0:	add	r5, r0, #1
   11da4:	str	r5, [r8]
   11da8:	ldr	r6, [r9, r0, lsl #2]
   11dac:	mov	r0, r6
   11db0:	bl	11418 <strcmp@plt>
   11db4:	cmp	r0, #0
   11db8:	beq	11ddc <__assert_fail@plt+0x67c>
   11dbc:	mov	r0, #0
   11dc0:	mov	r1, r6
   11dc4:	mov	r2, #0
   11dc8:	mov	r3, #0
   11dcc:	bl	143b4 <__assert_fail@plt+0x2c54>
   11dd0:	cmp	r0, #0
   11dd4:	blt	131d0 <__assert_fail@plt+0x1a70>
   11dd8:	ldr	r5, [r8]
   11ddc:	ldr	r0, [sp, #44]	; 0x2c
   11de0:	cmp	r5, r0
   11de4:	bge	12144 <__assert_fail@plt+0x9e4>
   11de8:	add	r0, sl, #44	; 0x2c
   11dec:	vmov.i32	q4, #0	; 0x00000000
   11df0:	str	r0, [sp, #28]
   11df4:	ldr	r7, [r9, r5, lsl #2]
   11df8:	ldrb	r4, [r7]
   11dfc:	cmp	r4, #47	; 0x2f
   11e00:	cmpne	r4, #37	; 0x25
   11e04:	bne	11fcc <__assert_fail@plt+0x86c>
   11e08:	add	r9, r7, #1
   11e0c:	mov	r1, r4
   11e10:	mov	r0, r9
   11e14:	bl	116e8 <strrchr@plt>
   11e18:	cmp	r0, #0
   11e1c:	beq	12f30 <__assert_fail@plt+0x17d0>
   11e20:	mov	r6, r0
   11e24:	mvn	r0, r7
   11e28:	ldr	r1, [sl, #16]
   11e2c:	sub	r2, r4, #37	; 0x25
   11e30:	str	r7, [sp, #32]
   11e34:	add	r0, r6, r0
   11e38:	clz	r2, r2
   11e3c:	str	r0, [sp, #36]	; 0x24
   11e40:	ldr	r0, [sl, #44]	; 0x2c
   11e44:	lsr	r4, r2, #5
   11e48:	cmp	r1, r0
   11e4c:	bne	11e78 <__assert_fail@plt+0x718>
   11e50:	mov	r1, #64	; 0x40
   11e54:	ldr	r0, [sl, #12]
   11e58:	mov	r2, #1
   11e5c:	mvn	r3, #0
   11e60:	str	r1, [sp]
   11e64:	ldr	r1, [sp, #28]
   11e68:	bl	2a7f8 <__assert_fail@plt+0x19098>
   11e6c:	str	r0, [sl, #12]
   11e70:	ldr	r1, [sl, #16]
   11e74:	b	11e7c <__assert_fail@plt+0x71c>
   11e78:	ldr	r0, [sl, #12]
   11e7c:	add	r2, r1, #1
   11e80:	mov	r7, #0
   11e84:	mov	r8, r5
   11e88:	str	r2, [sl, #16]
   11e8c:	add	sl, r0, r1, lsl #6
   11e90:	mov	r0, #1
   11e94:	mov	r1, #20
   11e98:	strb	r7, [sl, #28]
   11e9c:	str	r7, [sl, #16]
   11ea0:	str	r5, [sl, #24]
   11ea4:	strb	r4, [sl, #29]
   11ea8:	strb	r0, [sl, #30]
   11eac:	mov	r0, sl
   11eb0:	str	r7, [sl, #36]	; 0x24
   11eb4:	mov	r4, sl
   11eb8:	vst1.64	{d8-d9}, [r0], r1
   11ebc:	str	r7, [r0]
   11ec0:	mov	r0, #256	; 0x100
   11ec4:	str	r7, [r4, #32]!
   11ec8:	bl	2a5c8 <__assert_fail@plt+0x18e68>
   11ecc:	str	r0, [sl, #48]	; 0x30
   11ed0:	movw	r0, #62444	; 0xf3ec
   11ed4:	str	r7, [sl, #52]	; 0x34
   11ed8:	movw	r1, #710	; 0x2c6
   11edc:	mov	r2, r4
   11ee0:	mov	r5, #0
   11ee4:	movt	r0, #3
   11ee8:	str	r1, [r0]
   11eec:	ldr	r1, [sp, #36]	; 0x24
   11ef0:	mov	r0, r9
   11ef4:	bl	16660 <__assert_fail@plt+0x4f00>
   11ef8:	cmp	r0, #0
   11efc:	bne	12f5c <__assert_fail@plt+0x17fc>
   11f00:	ldrb	r0, [r6, #1]!
   11f04:	ldr	r9, [sp, #40]	; 0x28
   11f08:	cmp	r0, #0
   11f0c:	beq	11f38 <__assert_fail@plt+0x7d8>
   11f10:	movw	r0, #57459	; 0xe073
   11f14:	mov	r1, #0
   11f18:	mov	r2, #10
   11f1c:	mov	r3, sl
   11f20:	movt	r0, #2
   11f24:	str	r0, [sp]
   11f28:	mov	r0, r6
   11f2c:	bl	2ac38 <__assert_fail@plt+0x194d8>
   11f30:	cmp	r0, #0
   11f34:	bne	13004 <__assert_fail@plt+0x18a4>
   11f38:	ldr	r0, [sp, #44]	; 0x2c
   11f3c:	add	r7, r8, #1
   11f40:	cmp	r7, r0
   11f44:	bge	12110 <__assert_fail@plt+0x9b0>
   11f48:	ldr	r6, [r9, r7, lsl #2]
   11f4c:	ldrb	r0, [r6]
   11f50:	cmp	r0, #123	; 0x7b
   11f54:	bne	12110 <__assert_fail@plt+0x9b0>
   11f58:	mov	r0, r6
   11f5c:	bl	11628 <strlen@plt>
   11f60:	sub	r4, r0, #1
   11f64:	mov	r1, r0
   11f68:	ldrb	r0, [r6, r4]
   11f6c:	cmp	r0, #125	; 0x7d
   11f70:	bne	13114 <__assert_fail@plt+0x19b4>
   11f74:	strb	r5, [r6, r4]
   11f78:	add	r0, r6, #1
   11f7c:	cmp	r1, #3
   11f80:	ldrbeq	r1, [r0]
   11f84:	cmpeq	r1, #42	; 0x2a
   11f88:	beq	12118 <__assert_fail@plt+0x9b8>
   11f8c:	movw	r1, #57459	; 0xe073
   11f90:	mov	r2, #10
   11f94:	add	r3, sp, #48	; 0x30
   11f98:	movt	r1, #2
   11f9c:	str	r1, [sp]
   11fa0:	mov	r1, #0
   11fa4:	bl	2c598 <__assert_fail@plt+0x1ae38>
   11fa8:	cmp	r0, #0
   11fac:	bne	13024 <__assert_fail@plt+0x18c4>
   11fb0:	ldr	r1, [sp, #52]	; 0x34
   11fb4:	cmn	r1, #1
   11fb8:	ble	13024 <__assert_fail@plt+0x18c4>
   11fbc:	ldr	r0, [sp, #48]	; 0x30
   11fc0:	mov	r5, r8
   11fc4:	strd	r0, [sl, #16]
   11fc8:	b	12124 <__assert_fail@plt+0x9c4>
   11fcc:	ldr	r7, [sl, #16]
   11fd0:	ldr	r0, [sl, #44]	; 0x2c
   11fd4:	cmp	r7, r0
   11fd8:	bne	12008 <__assert_fail@plt+0x8a8>
   11fdc:	mov	r1, #64	; 0x40
   11fe0:	ldr	r0, [sl, #12]
   11fe4:	mov	r2, #1
   11fe8:	mvn	r3, #0
   11fec:	str	r1, [sp]
   11ff0:	ldr	r1, [sp, #28]
   11ff4:	bl	2a7f8 <__assert_fail@plt+0x19098>
   11ff8:	str	r0, [sl, #12]
   11ffc:	mov	r6, r0
   12000:	ldr	r7, [sl, #16]
   12004:	b	1200c <__assert_fail@plt+0x8ac>
   12008:	ldr	r6, [sl, #12]
   1200c:	add	r0, r7, #1
   12010:	mov	r1, #0
   12014:	mov	r2, #20
   12018:	sub	r3, fp, #64	; 0x40
   1201c:	str	r0, [sl, #16]
   12020:	add	sl, r6, r7, lsl #6
   12024:	mov	r0, sl
   12028:	strb	r1, [sl, #28]
   1202c:	strb	r1, [sl, #30]
   12030:	str	r1, [sl, #16]
   12034:	str	r5, [sl, #24]
   12038:	vst1.64	{d8-d9}, [r0], r2
   1203c:	mov	r2, r5
   12040:	mov	r5, #0
   12044:	str	r1, [r0]
   12048:	movw	r1, #57459	; 0xe073
   1204c:	mov	r8, r2
   12050:	ldr	r0, [r9, r2, lsl #2]
   12054:	movt	r1, #2
   12058:	mov	r2, #10
   1205c:	str	r1, [sp]
   12060:	mov	r1, #0
   12064:	bl	2c598 <__assert_fail@plt+0x1ae38>
   12068:	cmp	r0, #0
   1206c:	bne	12f9c <__assert_fail@plt+0x183c>
   12070:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12074:	cmn	r1, #1
   12078:	ble	12f9c <__assert_fail@plt+0x183c>
   1207c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12080:	orrs	r2, r0, r1
   12084:	beq	13074 <__assert_fail@plt+0x1914>
   12088:	movw	r2, #62024	; 0xf248
   1208c:	movt	r2, #3
   12090:	ldrd	r2, [r2, #72]	; 0x48
   12094:	subs	r4, r0, r2
   12098:	sbcs	r4, r1, r3
   1209c:	bcc	1309c <__assert_fail@plt+0x193c>
   120a0:	eor	r2, r0, r2
   120a4:	eor	r3, r1, r3
   120a8:	orrs	r2, r2, r3
   120ac:	bne	120ec <__assert_fail@plt+0x98c>
   120b0:	movw	r1, #58002	; 0xe292
   120b4:	mov	r0, #0
   120b8:	mov	r2, #5
   120bc:	movt	r1, #2
   120c0:	bl	114e4 <dcgettext@plt>
   120c4:	mov	r4, r0
   120c8:	ldr	r0, [r9, r8, lsl #2]
   120cc:	bl	16640 <__assert_fail@plt+0x4ee0>
   120d0:	mov	r3, r0
   120d4:	mov	r0, #0
   120d8:	mov	r1, #0
   120dc:	mov	r2, r4
   120e0:	bl	11598 <error@plt>
   120e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   120ec:	movw	r2, #62024	; 0xf248
   120f0:	movt	r2, #3
   120f4:	strd	r0, [r2, #72]	; 0x48
   120f8:	add	r2, r6, r7, lsl #6
   120fc:	strd	r0, [r2, #8]
   12100:	ldr	r0, [sp, #44]	; 0x2c
   12104:	add	r7, r8, #1
   12108:	cmp	r7, r0
   1210c:	blt	11f48 <__assert_fail@plt+0x7e8>
   12110:	mov	r5, r7
   12114:	b	12130 <__assert_fail@plt+0x9d0>
   12118:	mov	r0, #1
   1211c:	mov	r5, r8
   12120:	strb	r0, [sl, #28]
   12124:	mov	r0, #125	; 0x7d
   12128:	add	r5, r5, #2
   1212c:	strb	r0, [r6, r4]
   12130:	ldr	r0, [sp, #44]	; 0x2c
   12134:	movw	sl, #62024	; 0xf248
   12138:	movt	sl, #3
   1213c:	cmp	r5, r0
   12140:	blt	11df4 <__assert_fail@plt+0x694>
   12144:	movw	r0, #61896	; 0xf1c8
   12148:	movt	r0, #3
   1214c:	bl	116dc <sigemptyset@plt>
   12150:	add	r2, sp, #48	; 0x30
   12154:	mov	r0, #14
   12158:	mov	r1, #0
   1215c:	bl	11544 <sigaction@plt>
   12160:	ldr	r0, [sp, #48]	; 0x30
   12164:	cmp	r0, #1
   12168:	beq	1217c <__assert_fail@plt+0xa1c>
   1216c:	movw	r0, #61896	; 0xf1c8
   12170:	mov	r1, #14
   12174:	movt	r0, #3
   12178:	bl	115bc <sigaddset@plt>
   1217c:	add	r2, sp, #48	; 0x30
   12180:	mov	r0, #1
   12184:	mov	r1, #0
   12188:	bl	11544 <sigaction@plt>
   1218c:	ldr	r0, [sp, #48]	; 0x30
   12190:	cmp	r0, #1
   12194:	beq	121a8 <__assert_fail@plt+0xa48>
   12198:	movw	r0, #61896	; 0xf1c8
   1219c:	mov	r1, #1
   121a0:	movt	r0, #3
   121a4:	bl	115bc <sigaddset@plt>
   121a8:	add	r2, sp, #48	; 0x30
   121ac:	mov	r0, #2
   121b0:	mov	r1, #0
   121b4:	bl	11544 <sigaction@plt>
   121b8:	ldr	r0, [sp, #48]	; 0x30
   121bc:	cmp	r0, #1
   121c0:	beq	121d4 <__assert_fail@plt+0xa74>
   121c4:	movw	r0, #61896	; 0xf1c8
   121c8:	mov	r1, #2
   121cc:	movt	r0, #3
   121d0:	bl	115bc <sigaddset@plt>
   121d4:	add	r2, sp, #48	; 0x30
   121d8:	mov	r0, #13
   121dc:	mov	r1, #0
   121e0:	bl	11544 <sigaction@plt>
   121e4:	ldr	r0, [sp, #48]	; 0x30
   121e8:	cmp	r0, #1
   121ec:	beq	12200 <__assert_fail@plt+0xaa0>
   121f0:	movw	r0, #61896	; 0xf1c8
   121f4:	mov	r1, #13
   121f8:	movt	r0, #3
   121fc:	bl	115bc <sigaddset@plt>
   12200:	add	r2, sp, #48	; 0x30
   12204:	mov	r0, #3
   12208:	mov	r1, #0
   1220c:	bl	11544 <sigaction@plt>
   12210:	ldr	r0, [sp, #48]	; 0x30
   12214:	cmp	r0, #1
   12218:	beq	1222c <__assert_fail@plt+0xacc>
   1221c:	movw	r0, #61896	; 0xf1c8
   12220:	mov	r1, #3
   12224:	movt	r0, #3
   12228:	bl	115bc <sigaddset@plt>
   1222c:	add	r2, sp, #48	; 0x30
   12230:	mov	r0, #15
   12234:	mov	r1, #0
   12238:	bl	11544 <sigaction@plt>
   1223c:	ldr	r0, [sp, #48]	; 0x30
   12240:	cmp	r0, #1
   12244:	beq	12258 <__assert_fail@plt+0xaf8>
   12248:	movw	r0, #61896	; 0xf1c8
   1224c:	mov	r1, #15
   12250:	movt	r0, #3
   12254:	bl	115bc <sigaddset@plt>
   12258:	add	r2, sp, #48	; 0x30
   1225c:	mov	r0, #29
   12260:	mov	r1, #0
   12264:	bl	11544 <sigaction@plt>
   12268:	ldr	r0, [sp, #48]	; 0x30
   1226c:	cmp	r0, #1
   12270:	beq	12284 <__assert_fail@plt+0xb24>
   12274:	movw	r0, #61896	; 0xf1c8
   12278:	mov	r1, #29
   1227c:	movt	r0, #3
   12280:	bl	115bc <sigaddset@plt>
   12284:	add	r2, sp, #48	; 0x30
   12288:	mov	r0, #27
   1228c:	mov	r1, #0
   12290:	bl	11544 <sigaction@plt>
   12294:	ldr	r0, [sp, #48]	; 0x30
   12298:	cmp	r0, #1
   1229c:	beq	122b0 <__assert_fail@plt+0xb50>
   122a0:	movw	r0, #61896	; 0xf1c8
   122a4:	mov	r1, #27
   122a8:	movt	r0, #3
   122ac:	bl	115bc <sigaddset@plt>
   122b0:	add	r2, sp, #48	; 0x30
   122b4:	mov	r0, #26
   122b8:	mov	r1, #0
   122bc:	bl	11544 <sigaction@plt>
   122c0:	ldr	r0, [sp, #48]	; 0x30
   122c4:	cmp	r0, #1
   122c8:	beq	122dc <__assert_fail@plt+0xb7c>
   122cc:	movw	r0, #61896	; 0xf1c8
   122d0:	mov	r1, #26
   122d4:	movt	r0, #3
   122d8:	bl	115bc <sigaddset@plt>
   122dc:	add	r2, sp, #48	; 0x30
   122e0:	mov	r0, #24
   122e4:	mov	r1, #0
   122e8:	bl	11544 <sigaction@plt>
   122ec:	ldr	r0, [sp, #48]	; 0x30
   122f0:	cmp	r0, #1
   122f4:	beq	12308 <__assert_fail@plt+0xba8>
   122f8:	movw	r0, #61896	; 0xf1c8
   122fc:	mov	r1, #24
   12300:	movt	r0, #3
   12304:	bl	115bc <sigaddset@plt>
   12308:	add	r4, sp, #48	; 0x30
   1230c:	mov	r0, #25
   12310:	mov	r1, #0
   12314:	mov	r5, #0
   12318:	mov	r2, r4
   1231c:	bl	11544 <sigaction@plt>
   12320:	ldr	r0, [sp, #48]	; 0x30
   12324:	cmp	r0, #1
   12328:	beq	1233c <__assert_fail@plt+0xbdc>
   1232c:	movw	r0, #61896	; 0xf1c8
   12330:	mov	r1, #25
   12334:	movt	r0, #3
   12338:	bl	115bc <sigaddset@plt>
   1233c:	movw	r0, #13640	; 0x3548
   12340:	mov	r2, #128	; 0x80
   12344:	movt	r0, #1
   12348:	str	r0, [sp, #48]	; 0x30
   1234c:	add	r0, r4, #4
   12350:	movw	r4, #61896	; 0xf1c8
   12354:	movt	r4, #3
   12358:	mov	r1, r4
   1235c:	bl	11484 <memcpy@plt>
   12360:	mov	r0, r4
   12364:	mov	r1, #14
   12368:	str	r5, [sp, #180]	; 0xb4
   1236c:	bl	11514 <sigismember@plt>
   12370:	cmp	r0, #0
   12374:	beq	12388 <__assert_fail@plt+0xc28>
   12378:	add	r1, sp, #48	; 0x30
   1237c:	mov	r0, #14
   12380:	mov	r2, #0
   12384:	bl	11544 <sigaction@plt>
   12388:	movw	r0, #61896	; 0xf1c8
   1238c:	mov	r1, #1
   12390:	movt	r0, #3
   12394:	bl	11514 <sigismember@plt>
   12398:	cmp	r0, #0
   1239c:	beq	123b0 <__assert_fail@plt+0xc50>
   123a0:	add	r1, sp, #48	; 0x30
   123a4:	mov	r0, #1
   123a8:	mov	r2, #0
   123ac:	bl	11544 <sigaction@plt>
   123b0:	movw	r0, #61896	; 0xf1c8
   123b4:	mov	r1, #2
   123b8:	movt	r0, #3
   123bc:	bl	11514 <sigismember@plt>
   123c0:	cmp	r0, #0
   123c4:	beq	123d8 <__assert_fail@plt+0xc78>
   123c8:	add	r1, sp, #48	; 0x30
   123cc:	mov	r0, #2
   123d0:	mov	r2, #0
   123d4:	bl	11544 <sigaction@plt>
   123d8:	movw	r0, #61896	; 0xf1c8
   123dc:	mov	r1, #13
   123e0:	movt	r0, #3
   123e4:	bl	11514 <sigismember@plt>
   123e8:	cmp	r0, #0
   123ec:	beq	12400 <__assert_fail@plt+0xca0>
   123f0:	add	r1, sp, #48	; 0x30
   123f4:	mov	r0, #13
   123f8:	mov	r2, #0
   123fc:	bl	11544 <sigaction@plt>
   12400:	movw	r0, #61896	; 0xf1c8
   12404:	mov	r1, #3
   12408:	movt	r0, #3
   1240c:	bl	11514 <sigismember@plt>
   12410:	cmp	r0, #0
   12414:	beq	12428 <__assert_fail@plt+0xcc8>
   12418:	add	r1, sp, #48	; 0x30
   1241c:	mov	r0, #3
   12420:	mov	r2, #0
   12424:	bl	11544 <sigaction@plt>
   12428:	movw	r0, #61896	; 0xf1c8
   1242c:	mov	r1, #15
   12430:	movt	r0, #3
   12434:	bl	11514 <sigismember@plt>
   12438:	cmp	r0, #0
   1243c:	beq	12450 <__assert_fail@plt+0xcf0>
   12440:	add	r1, sp, #48	; 0x30
   12444:	mov	r0, #15
   12448:	mov	r2, #0
   1244c:	bl	11544 <sigaction@plt>
   12450:	movw	r0, #61896	; 0xf1c8
   12454:	mov	r1, #29
   12458:	movt	r0, #3
   1245c:	bl	11514 <sigismember@plt>
   12460:	cmp	r0, #0
   12464:	beq	12478 <__assert_fail@plt+0xd18>
   12468:	add	r1, sp, #48	; 0x30
   1246c:	mov	r0, #29
   12470:	mov	r2, #0
   12474:	bl	11544 <sigaction@plt>
   12478:	movw	r0, #61896	; 0xf1c8
   1247c:	mov	r1, #27
   12480:	movt	r0, #3
   12484:	bl	11514 <sigismember@plt>
   12488:	cmp	r0, #0
   1248c:	beq	124a0 <__assert_fail@plt+0xd40>
   12490:	add	r1, sp, #48	; 0x30
   12494:	mov	r0, #27
   12498:	mov	r2, #0
   1249c:	bl	11544 <sigaction@plt>
   124a0:	movw	r0, #61896	; 0xf1c8
   124a4:	mov	r1, #26
   124a8:	movt	r0, #3
   124ac:	bl	11514 <sigismember@plt>
   124b0:	cmp	r0, #0
   124b4:	beq	124c8 <__assert_fail@plt+0xd68>
   124b8:	add	r1, sp, #48	; 0x30
   124bc:	mov	r0, #26
   124c0:	mov	r2, #0
   124c4:	bl	11544 <sigaction@plt>
   124c8:	movw	r0, #61896	; 0xf1c8
   124cc:	mov	r1, #24
   124d0:	movt	r0, #3
   124d4:	bl	11514 <sigismember@plt>
   124d8:	cmp	r0, #0
   124dc:	beq	124f0 <__assert_fail@plt+0xd90>
   124e0:	add	r1, sp, #48	; 0x30
   124e4:	mov	r0, #24
   124e8:	mov	r2, #0
   124ec:	bl	11544 <sigaction@plt>
   124f0:	movw	r0, #61896	; 0xf1c8
   124f4:	mov	r1, #25
   124f8:	movt	r0, #3
   124fc:	bl	11514 <sigismember@plt>
   12500:	cmp	r0, #0
   12504:	beq	12518 <__assert_fail@plt+0xdb8>
   12508:	add	r1, sp, #48	; 0x30
   1250c:	mov	r0, #25
   12510:	mov	r2, #0
   12514:	bl	11544 <sigaction@plt>
   12518:	ldr	r0, [sl, #16]
   1251c:	cmp	r0, #0
   12520:	ble	12d08 <__assert_fail@plt+0x15a8>
   12524:	ldr	r0, [sl, #12]
   12528:	mov	r4, #0
   1252c:	add	r1, r0, r4, lsl #6
   12530:	str	r4, [sp, #40]	; 0x28
   12534:	ldrb	r1, [r1, #30]
   12538:	cmp	r1, #0
   1253c:	beq	12a8c <__assert_fail@plt+0x132c>
   12540:	mov	r5, #0
   12544:	mov	r8, #0
   12548:	b	125a0 <__assert_fail@plt+0xe40>
   1254c:	ldr	r0, [sp, #36]	; 0x24
   12550:	cmp	r0, #0
   12554:	bleq	13748 <__assert_fail@plt+0x1fe8>
   12558:	ldr	r0, [sp, #44]	; 0x2c
   1255c:	ldr	r4, [sp, #40]	; 0x28
   12560:	ldr	r5, [sp, #24]
   12564:	ldrd	r0, [r0]
   12568:	subs	r0, r0, #1
   1256c:	sbcs	r0, r1, #0
   12570:	movw	r1, #62024	; 0xf248
   12574:	movt	r1, #3
   12578:	strge	sl, [r1, #80]	; 0x50
   1257c:	strge	r8, [r1, #84]	; 0x54
   12580:	mov	sl, r1
   12584:	ldrb	r0, [r1, #2]
   12588:	cmp	r0, #1
   1258c:	bleq	13b08 <__assert_fail@plt+0x23a8>
   12590:	ldr	r8, [sp, #28]
   12594:	ldr	r0, [sl, #12]
   12598:	adds	r5, r5, #1
   1259c:	adc	r8, r8, #0
   125a0:	add	r6, r0, r4, lsl #6
   125a4:	mov	r9, r6
   125a8:	ldrb	r1, [r9, #28]!
   125ac:	cmp	r1, #0
   125b0:	bne	125c4 <__assert_fail@plt+0xe64>
   125b4:	ldrd	r2, [r6, #16]
   125b8:	subs	r1, r2, r5
   125bc:	sbcs	r1, r3, r8
   125c0:	blt	12cf8 <__assert_fail@plt+0x1598>
   125c4:	ldrb	r0, [r6, #29]
   125c8:	str	r5, [sp, #24]
   125cc:	cmp	r0, #0
   125d0:	str	r0, [sp, #36]	; 0x24
   125d4:	bleq	138e0 <__assert_fail@plt+0x2180>
   125d8:	add	r0, r6, #32
   125dc:	str	r6, [sp, #44]	; 0x2c
   125e0:	str	r0, [sp, #32]
   125e4:	ldr	r0, [r6, #4]
   125e8:	cmn	r0, #1
   125ec:	ble	12604 <__assert_fail@plt+0xea4>
   125f0:	ldr	r0, [sp, #36]	; 0x24
   125f4:	str	r8, [sp, #28]
   125f8:	cmp	r0, #0
   125fc:	bne	12738 <__assert_fail@plt+0xfd8>
   12600:	b	12884 <__assert_fail@plt+0x1124>
   12604:	ldr	r6, [sl, #48]	; 0x30
   12608:	ldr	r5, [sl, #80]	; 0x50
   1260c:	ldr	r1, [sl, #84]	; 0x54
   12610:	adds	r7, r5, #1
   12614:	adc	r4, r1, #0
   12618:	cmp	r6, #0
   1261c:	str	r7, [sl, #80]	; 0x50
   12620:	str	r4, [sl, #84]	; 0x54
   12624:	bne	12638 <__assert_fail@plt+0xed8>
   12628:	bl	13c8c <__assert_fail@plt+0x252c>
   1262c:	cmp	r0, #0
   12630:	beq	12da0 <__assert_fail@plt+0x1640>
   12634:	ldr	r6, [sl, #48]	; 0x30
   12638:	ldrd	r0, [r6, #8]
   1263c:	subs	r2, r7, r0
   12640:	sbcs	r2, r4, r1
   12644:	blt	12da0 <__assert_fail@plt+0x1640>
   12648:	cmp	r6, #0
   1264c:	beq	12e40 <__assert_fail@plt+0x16e0>
   12650:	ldr	r2, [r6, #24]
   12654:	adds	r3, r0, r2
   12658:	adc	r1, r1, r2, asr #31
   1265c:	subs	r2, r7, r3
   12660:	sbcs	r1, r4, r1
   12664:	blt	126b0 <__assert_fail@plt+0xf50>
   12668:	ldr	r1, [r6, #40]	; 0x28
   1266c:	cmp	r1, #0
   12670:	bne	1268c <__assert_fail@plt+0xf2c>
   12674:	bl	13c8c <__assert_fail@plt+0x252c>
   12678:	cmp	r0, #0
   1267c:	beq	12da0 <__assert_fail@plt+0x1640>
   12680:	ldr	r1, [r6, #40]	; 0x28
   12684:	cmp	r1, #0
   12688:	beq	12e40 <__assert_fail@plt+0x16e0>
   1268c:	ldr	r0, [r1, #8]
   12690:	ldr	r3, [r1, #12]
   12694:	ldr	r2, [r1, #24]
   12698:	adds	r6, r0, r2
   1269c:	adc	r2, r3, r2, asr #31
   126a0:	subs	r3, r7, r6
   126a4:	mov	r6, r1
   126a8:	sbcs	r2, r4, r2
   126ac:	bge	12668 <__assert_fail@plt+0xf08>
   126b0:	ldr	r1, [r6, #32]
   126b4:	sub	r2, r7, r0
   126b8:	cmp	r2, #80	; 0x50
   126bc:	blt	126e4 <__assert_fail@plt+0xf84>
   126c0:	ldr	r6, [sp, #44]	; 0x2c
   126c4:	add	r2, r5, #81	; 0x51
   126c8:	sub	r0, r2, r0
   126cc:	ldr	r1, [r1, #652]	; 0x28c
   126d0:	sub	r0, r0, #80	; 0x50
   126d4:	cmp	r0, #159	; 0x9f
   126d8:	bgt	126cc <__assert_fail@plt+0xf6c>
   126dc:	sub	r2, r0, #80	; 0x50
   126e0:	b	126e8 <__assert_fail@plt+0xf88>
   126e4:	ldr	r6, [sp, #44]	; 0x2c
   126e8:	add	r0, r1, r2, lsl #3
   126ec:	ldr	r2, [r0, #12]
   126f0:	ldr	r1, [r0, #16]
   126f4:	sub	r0, r2, #1
   126f8:	ldrb	r3, [r1, r0]
   126fc:	cmp	r3, #10
   12700:	mov	r3, #0
   12704:	moveq	r2, r0
   12708:	mov	r0, #0
   1270c:	str	r0, [sp, #4]
   12710:	ldr	r0, [sp, #32]
   12714:	str	r2, [sp]
   12718:	bl	1b81c <__assert_fail@plt+0xa0bc>
   1271c:	cmn	r0, #1
   12720:	beq	12604 <__assert_fail@plt+0xea4>
   12724:	str	r8, [sp, #28]
   12728:	cmn	r0, #2
   1272c:	bne	129c8 <__assert_fail@plt+0x1268>
   12730:	b	13148 <__assert_fail@plt+0x19e8>
   12734:	bl	13b08 <__assert_fail@plt+0x23a8>
   12738:	mov	r0, sl
   1273c:	ldr	sl, [sl, #48]	; 0x30
   12740:	ldr	r8, [r0, #80]	; 0x50
   12744:	ldr	r7, [r0, #84]	; 0x54
   12748:	adds	r4, r8, #1
   1274c:	adc	r5, r7, #0
   12750:	cmp	sl, #0
   12754:	strd	r4, [r0, #80]	; 0x50
   12758:	bne	12774 <__assert_fail@plt+0x1014>
   1275c:	bl	13c8c <__assert_fail@plt+0x252c>
   12760:	cmp	r0, #0
   12764:	beq	12dd0 <__assert_fail@plt+0x1670>
   12768:	movw	r0, #62024	; 0xf248
   1276c:	movt	r0, #3
   12770:	ldr	sl, [r0, #48]	; 0x30
   12774:	ldrd	r0, [sl, #8]
   12778:	mov	r7, #1
   1277c:	subs	r2, r4, r0
   12780:	sbcs	r2, r5, r1
   12784:	blt	12dd4 <__assert_fail@plt+0x1674>
   12788:	cmp	sl, #0
   1278c:	beq	12e40 <__assert_fail@plt+0x16e0>
   12790:	ldr	r2, [sl, #24]
   12794:	adds	r3, r0, r2
   12798:	adc	r1, r1, r2, asr #31
   1279c:	subs	r2, r4, r3
   127a0:	sbcs	r1, r5, r1
   127a4:	blt	127f0 <__assert_fail@plt+0x1090>
   127a8:	ldr	r1, [sl, #40]	; 0x28
   127ac:	cmp	r1, #0
   127b0:	bne	127cc <__assert_fail@plt+0x106c>
   127b4:	bl	13c8c <__assert_fail@plt+0x252c>
   127b8:	cmp	r0, #0
   127bc:	beq	12dd4 <__assert_fail@plt+0x1674>
   127c0:	ldr	r1, [sl, #40]	; 0x28
   127c4:	cmp	r1, #0
   127c8:	beq	12e40 <__assert_fail@plt+0x16e0>
   127cc:	ldr	r0, [r1, #8]
   127d0:	ldr	r3, [r1, #12]
   127d4:	ldr	r2, [r1, #24]
   127d8:	mov	sl, r1
   127dc:	adds	r6, r0, r2
   127e0:	adc	r2, r3, r2, asr #31
   127e4:	subs	r3, r4, r6
   127e8:	sbcs	r2, r5, r2
   127ec:	bge	127a8 <__assert_fail@plt+0x1048>
   127f0:	ldr	r1, [sl, #32]
   127f4:	sub	r2, r4, r0
   127f8:	cmp	r2, #80	; 0x50
   127fc:	blt	1282c <__assert_fail@plt+0x10cc>
   12800:	ldr	r6, [sp, #44]	; 0x2c
   12804:	movw	sl, #62024	; 0xf248
   12808:	add	r2, r8, #81	; 0x51
   1280c:	sub	r0, r2, r0
   12810:	movt	sl, #3
   12814:	ldr	r1, [r1, #652]	; 0x28c
   12818:	sub	r0, r0, #80	; 0x50
   1281c:	cmp	r0, #159	; 0x9f
   12820:	bgt	12814 <__assert_fail@plt+0x10b4>
   12824:	sub	r2, r0, #80	; 0x50
   12828:	b	12838 <__assert_fail@plt+0x10d8>
   1282c:	ldr	r6, [sp, #44]	; 0x2c
   12830:	movw	sl, #62024	; 0xf248
   12834:	movt	sl, #3
   12838:	add	r0, r1, r2, lsl #3
   1283c:	ldr	r2, [r0, #12]
   12840:	ldr	r1, [r0, #16]
   12844:	sub	r0, r2, #1
   12848:	ldrb	r3, [r1, r0]
   1284c:	cmp	r3, #10
   12850:	mov	r3, #0
   12854:	moveq	r2, r0
   12858:	mov	r0, #0
   1285c:	str	r0, [sp, #4]
   12860:	ldr	r0, [sp, #32]
   12864:	str	r2, [sp]
   12868:	bl	1b81c <__assert_fail@plt+0xa0bc>
   1286c:	cmn	r0, #1
   12870:	bne	129c0 <__assert_fail@plt+0x1260>
   12874:	b	12734 <__assert_fail@plt+0xfd4>
   12878:	bl	13b08 <__assert_fail@plt+0x23a8>
   1287c:	bl	13bf8 <__assert_fail@plt+0x2498>
   12880:	ldr	r8, [sp, #28]
   12884:	ldr	r5, [sl, #48]	; 0x30
   12888:	mov	r0, sl
   1288c:	ldr	r1, [sl, #84]	; 0x54
   12890:	ldr	sl, [sl, #80]	; 0x50
   12894:	adds	r4, sl, #1
   12898:	adc	r6, r1, #0
   1289c:	cmp	r5, #0
   128a0:	str	r4, [r0, #80]	; 0x50
   128a4:	str	r6, [r0, #84]	; 0x54
   128a8:	bne	128c4 <__assert_fail@plt+0x1164>
   128ac:	bl	13c8c <__assert_fail@plt+0x252c>
   128b0:	cmp	r0, #0
   128b4:	beq	12e0c <__assert_fail@plt+0x16ac>
   128b8:	movw	r0, #62024	; 0xf248
   128bc:	movt	r0, #3
   128c0:	ldr	r5, [r0, #48]	; 0x30
   128c4:	ldrd	r0, [r5, #8]
   128c8:	mov	r7, #0
   128cc:	subs	r2, r4, r0
   128d0:	sbcs	r2, r6, r1
   128d4:	blt	12dd8 <__assert_fail@plt+0x1678>
   128d8:	cmp	r5, #0
   128dc:	beq	12e40 <__assert_fail@plt+0x16e0>
   128e0:	ldr	r2, [r5, #24]
   128e4:	adds	r3, r0, r2
   128e8:	adc	r1, r1, r2, asr #31
   128ec:	subs	r2, r4, r3
   128f0:	sbcs	r1, r6, r1
   128f4:	blt	12940 <__assert_fail@plt+0x11e0>
   128f8:	ldr	r1, [r5, #40]	; 0x28
   128fc:	cmp	r1, #0
   12900:	bne	1291c <__assert_fail@plt+0x11bc>
   12904:	bl	13c8c <__assert_fail@plt+0x252c>
   12908:	cmp	r0, #0
   1290c:	beq	12dd4 <__assert_fail@plt+0x1674>
   12910:	ldr	r1, [r5, #40]	; 0x28
   12914:	cmp	r1, #0
   12918:	beq	12e40 <__assert_fail@plt+0x16e0>
   1291c:	ldr	r0, [r1, #8]
   12920:	ldr	r3, [r1, #12]
   12924:	ldr	r2, [r1, #24]
   12928:	adds	r5, r0, r2
   1292c:	adc	r2, r3, r2, asr #31
   12930:	subs	r3, r4, r5
   12934:	mov	r5, r1
   12938:	sbcs	r2, r6, r2
   1293c:	bge	128f8 <__assert_fail@plt+0x1198>
   12940:	ldr	r1, [r5, #32]
   12944:	sub	r2, r4, r0
   12948:	cmp	r2, #80	; 0x50
   1294c:	blt	12978 <__assert_fail@plt+0x1218>
   12950:	ldr	r6, [sp, #44]	; 0x2c
   12954:	add	r2, sl, #81	; 0x51
   12958:	sub	r0, r2, r0
   1295c:	ldr	r1, [r1, #652]	; 0x28c
   12960:	sub	r0, r0, #80	; 0x50
   12964:	cmp	r0, #159	; 0x9f
   12968:	bgt	1295c <__assert_fail@plt+0x11fc>
   1296c:	movw	sl, #62024	; 0xf248
   12970:	sub	r2, r0, #80	; 0x50
   12974:	b	12980 <__assert_fail@plt+0x1220>
   12978:	ldr	r6, [sp, #44]	; 0x2c
   1297c:	movw	sl, #62024	; 0xf248
   12980:	movt	sl, #3
   12984:	add	r0, r1, r2, lsl #3
   12988:	ldr	r2, [r0, #12]
   1298c:	ldr	r1, [r0, #16]
   12990:	sub	r0, r2, #1
   12994:	ldrb	r3, [r1, r0]
   12998:	cmp	r3, #10
   1299c:	mov	r3, #0
   129a0:	moveq	r2, r0
   129a4:	mov	r0, #0
   129a8:	str	r0, [sp, #4]
   129ac:	ldr	r0, [sp, #32]
   129b0:	str	r2, [sp]
   129b4:	bl	1b81c <__assert_fail@plt+0xa0bc>
   129b8:	cmn	r0, #1
   129bc:	beq	12878 <__assert_fail@plt+0x1118>
   129c0:	cmn	r0, #2
   129c4:	beq	13148 <__assert_fail@plt+0x19e8>
   129c8:	ldrd	r2, [sl, #80]	; 0x50
   129cc:	ldrd	r4, [r6]
   129d0:	ldr	r0, [sl, #48]	; 0x30
   129d4:	adds	sl, r4, r2
   129d8:	ldr	r4, [r6, #24]
   129dc:	adc	r8, r5, r3
   129e0:	cmp	r0, #0
   129e4:	bne	12a00 <__assert_fail@plt+0x12a0>
   129e8:	bl	13c8c <__assert_fail@plt+0x252c>
   129ec:	cmp	r0, #0
   129f0:	beq	12f04 <__assert_fail@plt+0x17a4>
   129f4:	movw	r0, #62024	; 0xf248
   129f8:	movt	r0, #3
   129fc:	ldr	r0, [r0, #48]	; 0x30
   12a00:	str	r4, [sp, #32]
   12a04:	ldrd	r0, [r0, #16]
   12a08:	subs	r2, sl, r0
   12a0c:	sbcs	r2, r8, r1
   12a10:	blt	12e60 <__assert_fail@plt+0x1700>
   12a14:	subs	r6, sl, r0
   12a18:	sbc	r7, r8, r1
   12a1c:	subs	r0, r6, #1
   12a20:	sbcs	r0, r7, #0
   12a24:	blt	1254c <__assert_fail@plt+0xdec>
   12a28:	ldr	r0, [sp, #36]	; 0x24
   12a2c:	mov	r4, #0
   12a30:	cmp	r0, #0
   12a34:	beq	12a60 <__assert_fail@plt+0x1300>
   12a38:	mov	r5, #0
   12a3c:	bl	13b08 <__assert_fail@plt+0x23a8>
   12a40:	cmp	r0, #0
   12a44:	beq	12e60 <__assert_fail@plt+0x1700>
   12a48:	adds	r4, r4, #1
   12a4c:	adc	r5, r5, #0
   12a50:	subs	r0, r4, r6
   12a54:	sbcs	r0, r5, r7
   12a58:	blt	12a3c <__assert_fail@plt+0x12dc>
   12a5c:	b	1254c <__assert_fail@plt+0xdec>
   12a60:	mov	r9, #0
   12a64:	bl	13b08 <__assert_fail@plt+0x23a8>
   12a68:	cmp	r0, #0
   12a6c:	beq	12e60 <__assert_fail@plt+0x1700>
   12a70:	bl	13bf8 <__assert_fail@plt+0x2498>
   12a74:	adds	r4, r4, #1
   12a78:	adc	r9, r9, #0
   12a7c:	subs	r0, r4, r6
   12a80:	sbcs	r0, r9, r7
   12a84:	blt	12a64 <__assert_fail@plt+0x1304>
   12a88:	b	1254c <__assert_fail@plt+0xdec>
   12a8c:	mov	r8, #0
   12a90:	mov	r7, #0
   12a94:	add	r6, r0, r4, lsl #6
   12a98:	ldrb	r1, [r6, #28]
   12a9c:	cmp	r1, #0
   12aa0:	bne	12ad4 <__assert_fail@plt+0x1374>
   12aa4:	ldrd	r2, [r6, #16]
   12aa8:	subs	r1, r2, r8
   12aac:	sbcs	r1, r3, r7
   12ab0:	bge	12ad4 <__assert_fail@plt+0x1374>
   12ab4:	b	12cf8 <__assert_fail@plt+0x1598>
   12ab8:	ldr	r0, [sl, #12]
   12abc:	ldr	r7, [sp, #44]	; 0x2c
   12ac0:	ldr	r4, [sp, #40]	; 0x28
   12ac4:	add	r6, r0, r4, lsl #6
   12ac8:	ldrb	r1, [r6, #28]
   12acc:	cmp	r1, #0
   12ad0:	beq	12aa4 <__assert_fail@plt+0x1344>
   12ad4:	str	r8, [sp, #36]	; 0x24
   12ad8:	adds	r8, r8, #1
   12adc:	str	r7, [sp, #32]
   12ae0:	adc	r0, r7, #0
   12ae4:	str	r0, [sp, #44]	; 0x2c
   12ae8:	ldrd	r4, [r6, #8]
   12aec:	bl	138e0 <__assert_fail@plt+0x2180>
   12af0:	ldrd	r0, [sl, #80]	; 0x50
   12af4:	ldr	r7, [sl, #48]	; 0x30
   12af8:	adds	r9, r0, #1
   12afc:	adc	sl, r1, #0
   12b00:	cmp	r7, #0
   12b04:	beq	12b80 <__assert_fail@plt+0x1420>
   12b08:	ldrd	r0, [r7, #8]
   12b0c:	subs	r2, r9, r0
   12b10:	sbcs	r2, sl, r1
   12b14:	blt	12ba8 <__assert_fail@plt+0x1448>
   12b18:	cmp	r7, #0
   12b1c:	beq	12e40 <__assert_fail@plt+0x16e0>
   12b20:	ldr	r2, [r7, #24]
   12b24:	adds	r0, r0, r2
   12b28:	adc	r1, r1, r2, asr #31
   12b2c:	subs	r0, r9, r0
   12b30:	sbcs	r0, sl, r1
   12b34:	blt	12bbc <__assert_fail@plt+0x145c>
   12b38:	ldr	r0, [r7, #40]	; 0x28
   12b3c:	cmp	r0, #0
   12b40:	bne	12b5c <__assert_fail@plt+0x13fc>
   12b44:	bl	13c8c <__assert_fail@plt+0x252c>
   12b48:	cmp	r0, #0
   12b4c:	beq	12ba8 <__assert_fail@plt+0x1448>
   12b50:	ldr	r0, [r7, #40]	; 0x28
   12b54:	cmp	r0, #0
   12b58:	beq	12e40 <__assert_fail@plt+0x16e0>
   12b5c:	ldrd	r2, [r0, #8]
   12b60:	ldr	r1, [r0, #24]
   12b64:	mov	r7, r0
   12b68:	adds	r2, r2, r1
   12b6c:	adc	r1, r3, r1, asr #31
   12b70:	subs	r2, r9, r2
   12b74:	sbcs	r1, sl, r1
   12b78:	bge	12b38 <__assert_fail@plt+0x13d8>
   12b7c:	b	12bbc <__assert_fail@plt+0x145c>
   12b80:	bl	13c8c <__assert_fail@plt+0x252c>
   12b84:	cmp	r0, #0
   12b88:	beq	12ba8 <__assert_fail@plt+0x1448>
   12b8c:	movw	r0, #62024	; 0xf248
   12b90:	movt	r0, #3
   12b94:	ldr	r7, [r0, #48]	; 0x30
   12b98:	ldrd	r0, [r7, #8]
   12b9c:	subs	r2, r9, r0
   12ba0:	sbcs	r2, sl, r1
   12ba4:	bge	12b18 <__assert_fail@plt+0x13b8>
   12ba8:	movw	r0, #62024	; 0xf248
   12bac:	movt	r0, #3
   12bb0:	ldrb	r0, [r0, #2]
   12bb4:	cmp	r0, #1
   12bb8:	beq	12e30 <__assert_fail@plt+0x16d0>
   12bbc:	movw	sl, #62024	; 0xf248
   12bc0:	movt	sl, #3
   12bc4:	ldr	r0, [sl, #48]	; 0x30
   12bc8:	cmp	r0, #0
   12bcc:	bne	12be0 <__assert_fail@plt+0x1480>
   12bd0:	bl	13c8c <__assert_fail@plt+0x252c>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12f04 <__assert_fail@plt+0x17a4>
   12bdc:	ldr	r0, [sl, #48]	; 0x30
   12be0:	ldr	r2, [sp, #44]	; 0x2c
   12be4:	umull	r7, r1, r4, r8
   12be8:	mla	r1, r4, r2, r1
   12bec:	mla	r4, r5, r8, r1
   12bf0:	ldr	r5, [r0, #16]
   12bf4:	ldr	r9, [r0, #20]
   12bf8:	subs	r0, r5, r7
   12bfc:	sbcs	r0, r9, r4
   12c00:	bge	12c28 <__assert_fail@plt+0x14c8>
   12c04:	adds	r5, r5, #1
   12c08:	adc	r9, r9, #0
   12c0c:	bl	13b08 <__assert_fail@plt+0x23a8>
   12c10:	cmp	r0, #0
   12c14:	beq	12e30 <__assert_fail@plt+0x16d0>
   12c18:	bl	13bf8 <__assert_fail@plt+0x2498>
   12c1c:	subs	r0, r5, r7
   12c20:	sbcs	r0, r9, r4
   12c24:	blt	12c04 <__assert_fail@plt+0x14a4>
   12c28:	bl	13748 <__assert_fail@plt+0x1fe8>
   12c2c:	ldrb	r0, [sl, #2]
   12c30:	cmp	r0, #1
   12c34:	bleq	13b08 <__assert_fail@plt+0x23a8>
   12c38:	ldrd	r0, [sl, #80]	; 0x50
   12c3c:	ldr	r7, [sl, #48]	; 0x30
   12c40:	adds	r4, r0, #1
   12c44:	adc	r5, r1, #0
   12c48:	cmp	r7, #0
   12c4c:	beq	12cc8 <__assert_fail@plt+0x1568>
   12c50:	ldrd	r0, [r7, #8]
   12c54:	subs	r2, r4, r0
   12c58:	sbcs	r2, r5, r1
   12c5c:	blt	12ce8 <__assert_fail@plt+0x1588>
   12c60:	cmp	r7, #0
   12c64:	beq	12e40 <__assert_fail@plt+0x16e0>
   12c68:	ldr	r2, [r7, #24]
   12c6c:	adds	r0, r0, r2
   12c70:	adc	r1, r1, r2, asr #31
   12c74:	subs	r0, r4, r0
   12c78:	sbcs	r0, r5, r1
   12c7c:	blt	12ab8 <__assert_fail@plt+0x1358>
   12c80:	ldr	r0, [r7, #40]	; 0x28
   12c84:	cmp	r0, #0
   12c88:	bne	12ca4 <__assert_fail@plt+0x1544>
   12c8c:	bl	13c8c <__assert_fail@plt+0x252c>
   12c90:	cmp	r0, #0
   12c94:	beq	12ce8 <__assert_fail@plt+0x1588>
   12c98:	ldr	r0, [r7, #40]	; 0x28
   12c9c:	cmp	r0, #0
   12ca0:	beq	12e40 <__assert_fail@plt+0x16e0>
   12ca4:	ldrd	r2, [r0, #8]
   12ca8:	ldr	r1, [r0, #24]
   12cac:	mov	r7, r0
   12cb0:	adds	r2, r2, r1
   12cb4:	adc	r1, r3, r1, asr #31
   12cb8:	subs	r2, r4, r2
   12cbc:	sbcs	r1, r5, r1
   12cc0:	bge	12c80 <__assert_fail@plt+0x1520>
   12cc4:	b	12ab8 <__assert_fail@plt+0x1358>
   12cc8:	bl	13c8c <__assert_fail@plt+0x252c>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12ce8 <__assert_fail@plt+0x1588>
   12cd4:	ldr	r7, [sl, #48]	; 0x30
   12cd8:	ldrd	r0, [r7, #8]
   12cdc:	subs	r2, r4, r0
   12ce0:	sbcs	r2, r5, r1
   12ce4:	bge	12c60 <__assert_fail@plt+0x1500>
   12ce8:	ldrb	r0, [sl, #2]
   12cec:	cmp	r0, #0
   12cf0:	bne	12ab8 <__assert_fail@plt+0x1358>
   12cf4:	b	12e30 <__assert_fail@plt+0x16d0>
   12cf8:	ldr	r1, [sl, #16]
   12cfc:	add	r4, r4, #1
   12d00:	cmp	r4, r1
   12d04:	blt	1252c <__assert_fail@plt+0xdcc>
   12d08:	bl	138e0 <__assert_fail@plt+0x2180>
   12d0c:	bl	13b08 <__assert_fail@plt+0x23a8>
   12d10:	cmp	r0, #0
   12d14:	beq	12d28 <__assert_fail@plt+0x15c8>
   12d18:	bl	13bf8 <__assert_fail@plt+0x2498>
   12d1c:	bl	13b08 <__assert_fail@plt+0x23a8>
   12d20:	cmp	r0, #0
   12d24:	bne	12d18 <__assert_fail@plt+0x15b8>
   12d28:	bl	13748 <__assert_fail@plt+0x1fe8>
   12d2c:	mov	r0, #0
   12d30:	bl	11748 <close@plt>
   12d34:	cmp	r0, #0
   12d38:	moveq	r0, #0
   12d3c:	subeq	sp, fp, #48	; 0x30
   12d40:	vpopeq	{d8-d9}
   12d44:	addeq	sp, sp, #4
   12d48:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d4c:	bl	11640 <__errno_location@plt>
   12d50:	ldr	r4, [r0]
   12d54:	movw	r1, #56212	; 0xdb94
   12d58:	mov	r0, #0
   12d5c:	mov	r2, #5
   12d60:	movt	r1, #2
   12d64:	bl	114e4 <dcgettext@plt>
   12d68:	mov	r2, r0
   12d6c:	mov	r0, #0
   12d70:	mov	r1, r4
   12d74:	bl	11598 <error@plt>
   12d78:	bl	11898 <__assert_fail@plt+0x138>
   12d7c:	ldr	r1, [r4]
   12d80:	mov	r0, #11
   12d84:	cmp	r1, #11
   12d88:	ldrcs	r0, [r4]
   12d8c:	add	r0, r9, r0
   12d90:	add	r0, r0, #1
   12d94:	cmp	r0, r9
   12d98:	bvc	11d88 <__assert_fail@plt+0x628>
   12d9c:	bl	11860 <__assert_fail@plt+0x100>
   12da0:	ldrb	r0, [r9]
   12da4:	cmp	r0, #0
   12da8:	beq	1323c <__assert_fail@plt+0x1adc>
   12dac:	ldr	r0, [sp, #36]	; 0x24
   12db0:	cmp	r0, #0
   12db4:	beq	12dc0 <__assert_fail@plt+0x1660>
   12db8:	b	12e04 <__assert_fail@plt+0x16a4>
   12dbc:	bl	13bf8 <__assert_fail@plt+0x2498>
   12dc0:	bl	13b08 <__assert_fail@plt+0x23a8>
   12dc4:	cmp	r0, #0
   12dc8:	bne	12dbc <__assert_fail@plt+0x165c>
   12dcc:	b	12e00 <__assert_fail@plt+0x16a0>
   12dd0:	mov	r7, #1
   12dd4:	ldr	r8, [sp, #28]
   12dd8:	ldrb	r0, [r9]
   12ddc:	cmp	r0, #0
   12de0:	beq	12e1c <__assert_fail@plt+0x16bc>
   12de4:	cmp	r7, #0
   12de8:	beq	12df4 <__assert_fail@plt+0x1694>
   12dec:	b	12e04 <__assert_fail@plt+0x16a4>
   12df0:	bl	13bf8 <__assert_fail@plt+0x2498>
   12df4:	bl	13b08 <__assert_fail@plt+0x23a8>
   12df8:	cmp	r0, #0
   12dfc:	bne	12df0 <__assert_fail@plt+0x1690>
   12e00:	bl	13748 <__assert_fail@plt+0x1fe8>
   12e04:	mov	r0, #0
   12e08:	bl	1161c <exit@plt>
   12e0c:	mov	r7, #0
   12e10:	ldrb	r0, [r9]
   12e14:	cmp	r0, #0
   12e18:	bne	12de4 <__assert_fail@plt+0x1684>
   12e1c:	str	r7, [sp]
   12e20:	ldr	r0, [sp, #44]	; 0x2c
   12e24:	ldr	r2, [sp, #24]
   12e28:	mov	r3, r8
   12e2c:	bl	13a00 <__assert_fail@plt+0x22a0>
   12e30:	ldr	r2, [sp, #36]	; 0x24
   12e34:	ldr	r3, [sp, #32]
   12e38:	mov	r0, r6
   12e3c:	bl	14138 <__assert_fail@plt+0x29d8>
   12e40:	movw	r0, #58283	; 0xe3ab
   12e44:	movw	r1, #58285	; 0xe3ad
   12e48:	movw	r3, #58298	; 0xe3ba
   12e4c:	movw	r2, #583	; 0x247
   12e50:	movt	r0, #2
   12e54:	movt	r1, #2
   12e58:	movt	r3, #2
   12e5c:	bl	11760 <__assert_fail@plt>
   12e60:	movw	r1, #58399	; 0xe41f
   12e64:	mov	r0, #0
   12e68:	mov	r2, #5
   12e6c:	movt	r1, #2
   12e70:	bl	114e4 <dcgettext@plt>
   12e74:	mov	r4, r0
   12e78:	movw	r0, #62024	; 0xf248
   12e7c:	ldr	r1, [sp, #32]
   12e80:	movt	r0, #3
   12e84:	ldr	r0, [r0, #8]
   12e88:	ldr	r0, [r0, r1, lsl #2]
   12e8c:	bl	16640 <__assert_fail@plt+0x4ee0>
   12e90:	mov	r3, r0
   12e94:	mov	r0, #0
   12e98:	mov	r1, #0
   12e9c:	mov	r2, r4
   12ea0:	bl	11598 <error@plt>
   12ea4:	bl	11898 <__assert_fail@plt+0x138>
   12ea8:	cmn	r0, #3
   12eac:	bne	12ff4 <__assert_fail@plt+0x1894>
   12eb0:	movw	r0, #61788	; 0xf15c
   12eb4:	movw	r2, #56155	; 0xdb5b
   12eb8:	mov	r1, #0
   12ebc:	movw	r7, #56143	; 0xdb4f
   12ec0:	movt	r0, #3
   12ec4:	movt	r2, #2
   12ec8:	str	r1, [sp, #8]
   12ecc:	movw	r1, #56122	; 0xdb3a
   12ed0:	movt	r7, #2
   12ed4:	ldr	r3, [r0]
   12ed8:	movw	r0, #61884	; 0xf1bc
   12edc:	str	r2, [sp, #4]
   12ee0:	movw	r2, #56129	; 0xdb41
   12ee4:	movt	r1, #2
   12ee8:	str	r7, [sp]
   12eec:	movt	r0, #3
   12ef0:	movt	r2, #2
   12ef4:	ldr	r0, [r0]
   12ef8:	bl	2a394 <__assert_fail@plt+0x18c34>
   12efc:	mov	r0, #0
   12f00:	bl	1161c <exit@plt>
   12f04:	bl	11640 <__errno_location@plt>
   12f08:	ldr	r4, [r0]
   12f0c:	movw	r1, #58377	; 0xe409
   12f10:	mov	r0, #0
   12f14:	mov	r2, #5
   12f18:	movt	r1, #2
   12f1c:	bl	114e4 <dcgettext@plt>
   12f20:	mov	r2, r0
   12f24:	mov	r0, #1
   12f28:	mov	r1, r4
   12f2c:	bl	11598 <error@plt>
   12f30:	movw	r1, #58063	; 0xe2cf
   12f34:	mov	r0, #0
   12f38:	mov	r2, #5
   12f3c:	movt	r1, #2
   12f40:	bl	114e4 <dcgettext@plt>
   12f44:	mov	r2, r0
   12f48:	mov	r0, #1
   12f4c:	mov	r1, #0
   12f50:	mov	r3, r7
   12f54:	str	r4, [sp]
   12f58:	bl	11598 <error@plt>
   12f5c:	movw	r1, #58098	; 0xe2f2
   12f60:	mov	r4, r0
   12f64:	mov	r0, #0
   12f68:	mov	r2, #5
   12f6c:	movt	r1, #2
   12f70:	bl	114e4 <dcgettext@plt>
   12f74:	mov	r5, r0
   12f78:	ldr	r0, [sp, #32]
   12f7c:	bl	16640 <__assert_fail@plt+0x4ee0>
   12f80:	mov	r3, r0
   12f84:	mov	r0, #0
   12f88:	mov	r1, #0
   12f8c:	mov	r2, r5
   12f90:	str	r4, [sp]
   12f94:	bl	11598 <error@plt>
   12f98:	bl	11898 <__assert_fail@plt+0x138>
   12f9c:	movw	r1, #57883	; 0xe21b
   12fa0:	mov	r0, #0
   12fa4:	mov	r2, #5
   12fa8:	movt	r1, #2
   12fac:	bl	114e4 <dcgettext@plt>
   12fb0:	mov	r4, r0
   12fb4:	ldr	r0, [r9, r8, lsl #2]
   12fb8:	b	13130 <__assert_fail@plt+0x19d0>
   12fbc:	cmp	r6, #0
   12fc0:	bne	12fd0 <__assert_fail@plt+0x1870>
   12fc4:	movw	r1, #57678	; 0xe14e
   12fc8:	movt	r1, #2
   12fcc:	b	13058 <__assert_fail@plt+0x18f8>
   12fd0:	bl	11610 <__ctype_b_loc@plt>
   12fd4:	ldr	r0, [r0]
   12fd8:	add	r0, r0, r6, lsl #1
   12fdc:	ldrb	r0, [r0, #1]
   12fe0:	tst	r0, #64	; 0x40
   12fe4:	bne	130ec <__assert_fail@plt+0x198c>
   12fe8:	movw	r1, #57760	; 0xe1a0
   12fec:	movt	r1, #2
   12ff0:	b	130f4 <__assert_fail@plt+0x1994>
   12ff4:	cmn	r0, #2
   12ff8:	bne	131bc <__assert_fail@plt+0x1a5c>
   12ffc:	mov	r0, #0
   13000:	bl	1325c <__assert_fail@plt+0x1afc>
   13004:	movw	r1, #58133	; 0xe315
   13008:	mov	r0, #0
   1300c:	mov	r2, #5
   13010:	movt	r1, #2
   13014:	bl	114e4 <dcgettext@plt>
   13018:	mov	r4, r0
   1301c:	ldr	r0, [sp, #32]
   13020:	b	13130 <__assert_fail@plt+0x19d0>
   13024:	movw	r1, #58206	; 0xe35e
   13028:	mov	r0, #0
   1302c:	mov	r2, #5
   13030:	movt	r1, #2
   13034:	bl	114e4 <dcgettext@plt>
   13038:	mov	r4, r0
   1303c:	movw	r0, #62024	; 0xf248
   13040:	movt	r0, #3
   13044:	ldr	r0, [r0, #8]
   13048:	ldr	r0, [r0, r7, lsl #2]
   1304c:	b	13130 <__assert_fail@plt+0x19d0>
   13050:	movw	r1, #57584	; 0xe0f0
   13054:	movt	r1, #2
   13058:	mov	r0, #0
   1305c:	mov	r2, #5
   13060:	bl	114e4 <dcgettext@plt>
   13064:	mov	r2, r0
   13068:	mov	r0, #1
   1306c:	mov	r1, #0
   13070:	bl	11598 <error@plt>
   13074:	movw	r1, #57903	; 0xe22f
   13078:	mov	r0, #0
   1307c:	mov	r2, #5
   13080:	movt	r1, #2
   13084:	bl	114e4 <dcgettext@plt>
   13088:	ldr	r3, [r9, r8, lsl #2]
   1308c:	mov	r2, r0
   13090:	mov	r0, #1
   13094:	mov	r1, #0
   13098:	bl	11598 <error@plt>
   1309c:	movw	r1, #57945	; 0xe259
   130a0:	mov	r0, #0
   130a4:	mov	r2, #5
   130a8:	movt	r1, #2
   130ac:	bl	114e4 <dcgettext@plt>
   130b0:	mov	r4, r0
   130b4:	ldr	r0, [r9, r8, lsl #2]
   130b8:	bl	16640 <__assert_fail@plt+0x4ee0>
   130bc:	mov	r5, r0
   130c0:	movw	r0, #62024	; 0xf248
   130c4:	add	r2, sp, #48	; 0x30
   130c8:	movt	r0, #3
   130cc:	ldrd	r0, [r0, #72]	; 0x48
   130d0:	bl	14604 <__assert_fail@plt+0x2ea4>
   130d4:	str	r0, [sp]
   130d8:	mov	r0, #1
   130dc:	mov	r1, #0
   130e0:	mov	r2, r4
   130e4:	mov	r3, r5
   130e8:	bl	11598 <error@plt>
   130ec:	movw	r1, #57717	; 0xe175
   130f0:	movt	r1, #2
   130f4:	mov	r0, #0
   130f8:	mov	r2, #5
   130fc:	bl	114e4 <dcgettext@plt>
   13100:	mov	r2, r0
   13104:	mov	r0, #1
   13108:	mov	r1, #0
   1310c:	mov	r3, r6
   13110:	bl	11598 <error@plt>
   13114:	movw	r1, #58170	; 0xe33a
   13118:	mov	r0, #0
   1311c:	mov	r2, #5
   13120:	movt	r1, #2
   13124:	bl	114e4 <dcgettext@plt>
   13128:	mov	r4, r0
   1312c:	mov	r0, r6
   13130:	bl	16640 <__assert_fail@plt+0x4ee0>
   13134:	mov	r3, r0
   13138:	mov	r0, #1
   1313c:	mov	r1, #0
   13140:	mov	r2, r4
   13144:	bl	11598 <error@plt>
   13148:	movw	r1, #58248	; 0xe388
   1314c:	mov	r0, #0
   13150:	mov	r2, #5
   13154:	movt	r1, #2
   13158:	bl	114e4 <dcgettext@plt>
   1315c:	mov	r2, r0
   13160:	mov	r0, #0
   13164:	mov	r1, #0
   13168:	bl	11598 <error@plt>
   1316c:	bl	11898 <__assert_fail@plt+0x138>
   13170:	ldr	r1, [sp, #44]	; 0x2c
   13174:	cmp	r0, r1
   13178:	bge	13210 <__assert_fail@plt+0x1ab0>
   1317c:	movw	r1, #56187	; 0xdb7b
   13180:	mov	r0, #0
   13184:	mov	r2, #5
   13188:	movt	r1, #2
   1318c:	bl	114e4 <dcgettext@plt>
   13190:	mov	r4, r0
   13194:	ldr	r0, [sp, #40]	; 0x28
   13198:	ldr	r1, [sp, #44]	; 0x2c
   1319c:	add	r0, r0, r1, lsl #2
   131a0:	ldr	r0, [r0, #-4]
   131a4:	bl	16640 <__assert_fail@plt+0x4ee0>
   131a8:	mov	r3, r0
   131ac:	mov	r0, #0
   131b0:	mov	r1, #0
   131b4:	mov	r2, r4
   131b8:	bl	11598 <error@plt>
   131bc:	mov	r0, #1
   131c0:	bl	1325c <__assert_fail@plt+0x1afc>
   131c4:	movw	r1, #57632	; 0xe120
   131c8:	movt	r1, #2
   131cc:	b	13058 <__assert_fail@plt+0x18f8>
   131d0:	bl	11640 <__errno_location@plt>
   131d4:	ldr	r4, [r0]
   131d8:	movw	r1, #57856	; 0xe200
   131dc:	mov	r0, #0
   131e0:	mov	r2, #5
   131e4:	movt	r1, #2
   131e8:	bl	114e4 <dcgettext@plt>
   131ec:	mov	r5, r0
   131f0:	mov	r0, #4
   131f4:	mov	r1, r6
   131f8:	bl	16118 <__assert_fail@plt+0x49b8>
   131fc:	mov	r3, r0
   13200:	mov	r0, #1
   13204:	mov	r1, r4
   13208:	mov	r2, r5
   1320c:	bl	11598 <error@plt>
   13210:	movw	r1, #56171	; 0xdb6b
   13214:	mov	r0, #0
   13218:	mov	r2, #5
   1321c:	movt	r1, #2
   13220:	bl	114e4 <dcgettext@plt>
   13224:	mov	r2, r0
   13228:	mov	r0, #0
   1322c:	mov	r1, #0
   13230:	bl	11598 <error@plt>
   13234:	mov	r0, #1
   13238:	bl	1325c <__assert_fail@plt+0x1afc>
   1323c:	ldr	r0, [sp, #36]	; 0x24
   13240:	cmp	r0, #0
   13244:	movwne	r0, #1
   13248:	str	r0, [sp]
   1324c:	ldr	r0, [sp, #44]	; 0x2c
   13250:	ldr	r2, [sp, #24]
   13254:	mov	r3, r8
   13258:	bl	13a00 <__assert_fail@plt+0x22a0>
   1325c:	push	{fp, lr}
   13260:	mov	fp, sp
   13264:	sub	sp, sp, #56	; 0x38
   13268:	mov	r4, r0
   1326c:	cmp	r0, #0
   13270:	bne	13504 <__assert_fail@plt+0x1da4>
   13274:	movw	r1, #56262	; 0xdbc6
   13278:	mov	r0, #0
   1327c:	mov	r2, #5
   13280:	movt	r1, #2
   13284:	bl	114e4 <dcgettext@plt>
   13288:	mov	r1, r0
   1328c:	movw	r0, #62128	; 0xf2b0
   13290:	movt	r0, #3
   13294:	ldr	r2, [r0]
   13298:	mov	r0, #1
   1329c:	bl	11688 <__printf_chk@plt>
   132a0:	movw	r1, #56301	; 0xdbed
   132a4:	mov	r0, #0
   132a8:	mov	r2, #5
   132ac:	movt	r1, #2
   132b0:	bl	114e4 <dcgettext@plt>
   132b4:	movw	r7, #61884	; 0xf1bc
   132b8:	movt	r7, #3
   132bc:	ldr	r1, [r7]
   132c0:	bl	113dc <fputs_unlocked@plt>
   132c4:	movw	r1, #56435	; 0xdc73
   132c8:	mov	r0, #0
   132cc:	mov	r2, #5
   132d0:	movt	r1, #2
   132d4:	bl	114e4 <dcgettext@plt>
   132d8:	ldr	r1, [r7]
   132dc:	bl	113dc <fputs_unlocked@plt>
   132e0:	movw	r1, #58430	; 0xe43e
   132e4:	mov	r0, #0
   132e8:	mov	r2, #5
   132ec:	movt	r1, #2
   132f0:	bl	114e4 <dcgettext@plt>
   132f4:	ldr	r1, [r7]
   132f8:	bl	113dc <fputs_unlocked@plt>
   132fc:	movw	r1, #56470	; 0xdc96
   13300:	mov	r0, #0
   13304:	mov	r2, #5
   13308:	movt	r1, #2
   1330c:	bl	114e4 <dcgettext@plt>
   13310:	ldr	r1, [r7]
   13314:	bl	113dc <fputs_unlocked@plt>
   13318:	movw	r1, #56658	; 0xdd52
   1331c:	mov	r0, #0
   13320:	mov	r2, #5
   13324:	movt	r1, #2
   13328:	bl	114e4 <dcgettext@plt>
   1332c:	ldr	r1, [r7]
   13330:	bl	113dc <fputs_unlocked@plt>
   13334:	movw	r1, #56724	; 0xdd94
   13338:	mov	r0, #0
   1333c:	mov	r2, #5
   13340:	movt	r1, #2
   13344:	bl	114e4 <dcgettext@plt>
   13348:	ldr	r1, [r7]
   1334c:	bl	113dc <fputs_unlocked@plt>
   13350:	movw	r1, #56923	; 0xde5b
   13354:	mov	r0, #0
   13358:	mov	r2, #5
   1335c:	movt	r1, #2
   13360:	bl	114e4 <dcgettext@plt>
   13364:	ldr	r1, [r7]
   13368:	bl	113dc <fputs_unlocked@plt>
   1336c:	movw	r1, #56968	; 0xde88
   13370:	mov	r0, #0
   13374:	mov	r2, #5
   13378:	movt	r1, #2
   1337c:	bl	114e4 <dcgettext@plt>
   13380:	ldr	r1, [r7]
   13384:	bl	113dc <fputs_unlocked@plt>
   13388:	movw	r1, #57022	; 0xdebe
   1338c:	mov	r0, #0
   13390:	mov	r2, #5
   13394:	movt	r1, #2
   13398:	bl	114e4 <dcgettext@plt>
   1339c:	ldr	r1, [r7]
   133a0:	bl	113dc <fputs_unlocked@plt>
   133a4:	movw	r0, #58992	; 0xe670
   133a8:	mov	r2, #48	; 0x30
   133ac:	mov	r6, sp
   133b0:	movw	r5, #56122	; 0xdb3a
   133b4:	movt	r0, #2
   133b8:	movt	r5, #2
   133bc:	add	r1, r0, #32
   133c0:	add	r3, r0, #16
   133c4:	vld1.64	{d18-d19}, [r0], r2
   133c8:	vld1.64	{d16-d17}, [r1]
   133cc:	vld1.64	{d20-d21}, [r3]
   133d0:	add	r1, r6, #32
   133d4:	vldr	d22, [r0]
   133d8:	add	r0, r6, #16
   133dc:	vst1.64	{d16-d17}, [r1]
   133e0:	movw	r1, #58505	; 0xe489
   133e4:	vst1.64	{d20-d21}, [r0]
   133e8:	mov	r0, r6
   133ec:	vst1.64	{d18-d19}, [r0], r2
   133f0:	movt	r1, #2
   133f4:	vstr	d22, [r0]
   133f8:	mov	r0, r5
   133fc:	bl	11418 <strcmp@plt>
   13400:	cmp	r0, #0
   13404:	ldrne	r1, [r6, #8]!
   13408:	cmpne	r1, #0
   1340c:	bne	133f8 <__assert_fail@plt+0x1c98>
   13410:	ldr	r6, [r6, #4]
   13414:	movw	r1, #58600	; 0xe4e8
   13418:	mov	r0, #0
   1341c:	mov	r2, #5
   13420:	movt	r1, #2
   13424:	bl	114e4 <dcgettext@plt>
   13428:	movw	r2, #56129	; 0xdb41
   1342c:	movw	r3, #58623	; 0xe4ff
   13430:	mov	r1, r0
   13434:	mov	r0, #1
   13438:	movt	r2, #2
   1343c:	movt	r3, #2
   13440:	bl	11688 <__printf_chk@plt>
   13444:	cmp	r6, #0
   13448:	mov	r0, #5
   1344c:	mov	r1, #0
   13450:	moveq	r6, r5
   13454:	bl	116d0 <setlocale@plt>
   13458:	cmp	r0, #0
   1345c:	beq	13494 <__assert_fail@plt+0x1d34>
   13460:	movw	r1, #58663	; 0xe527
   13464:	mov	r2, #3
   13468:	movt	r1, #2
   1346c:	bl	11730 <strncmp@plt>
   13470:	cmp	r0, #0
   13474:	beq	13494 <__assert_fail@plt+0x1d34>
   13478:	movw	r1, #58667	; 0xe52b
   1347c:	mov	r0, #0
   13480:	mov	r2, #5
   13484:	movt	r1, #2
   13488:	bl	114e4 <dcgettext@plt>
   1348c:	ldr	r1, [r7]
   13490:	bl	113dc <fputs_unlocked@plt>
   13494:	movw	r1, #58738	; 0xe572
   13498:	mov	r0, #0
   1349c:	mov	r2, #5
   134a0:	movt	r1, #2
   134a4:	bl	114e4 <dcgettext@plt>
   134a8:	movw	r2, #58623	; 0xe4ff
   134ac:	mov	r1, r0
   134b0:	mov	r0, #1
   134b4:	mov	r3, r5
   134b8:	movt	r2, #2
   134bc:	bl	11688 <__printf_chk@plt>
   134c0:	movw	r1, #58765	; 0xe58d
   134c4:	mov	r0, #0
   134c8:	mov	r2, #5
   134cc:	movt	r1, #2
   134d0:	bl	114e4 <dcgettext@plt>
   134d4:	movw	r3, #57459	; 0xe073
   134d8:	mov	r1, r0
   134dc:	movw	r0, #58533	; 0xe4a5
   134e0:	cmp	r6, r5
   134e4:	mov	r2, r6
   134e8:	movt	r0, #2
   134ec:	movt	r3, #2
   134f0:	moveq	r3, r0
   134f4:	mov	r0, #1
   134f8:	bl	11688 <__printf_chk@plt>
   134fc:	mov	r0, r4
   13500:	bl	1161c <exit@plt>
   13504:	movw	r0, #61880	; 0xf1b8
   13508:	movw	r1, #56223	; 0xdb9f
   1350c:	mov	r2, #5
   13510:	movt	r0, #3
   13514:	movt	r1, #2
   13518:	ldr	r5, [r0]
   1351c:	mov	r0, #0
   13520:	bl	114e4 <dcgettext@plt>
   13524:	mov	r2, r0
   13528:	movw	r0, #62128	; 0xf2b0
   1352c:	mov	r1, #1
   13530:	movt	r0, #3
   13534:	ldr	r3, [r0]
   13538:	mov	r0, r5
   1353c:	bl	116a0 <__fprintf_chk@plt>
   13540:	mov	r0, r4
   13544:	bl	1161c <exit@plt>
   13548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1354c:	add	fp, sp, #28
   13550:	sub	sp, sp, #12
   13554:	movw	r6, #62024	; 0xf248
   13558:	mov	r8, r0
   1355c:	movt	r6, #3
   13560:	ldrb	r0, [r6, #1]
   13564:	cmp	r0, #0
   13568:	beq	13600 <__assert_fail@plt+0x1ea0>
   1356c:	ldr	r0, [r6, #40]	; 0x28
   13570:	cmp	r0, #1
   13574:	blt	135f8 <__assert_fail@plt+0x1e98>
   13578:	movw	r9, #61784	; 0xf158
   1357c:	movw	sl, #57479	; 0xe087
   13580:	add	r7, r0, #1
   13584:	movt	r9, #3
   13588:	movt	sl, #2
   1358c:	ldr	r0, [r6, #28]
   13590:	ldr	r1, [r6, #20]
   13594:	bl	11574 <strcpy@plt>
   13598:	ldr	r4, [r6, #24]
   1359c:	ldr	r5, [r6, #28]
   135a0:	ldr	r0, [r6, #20]
   135a4:	bl	11628 <strlen@plt>
   135a8:	add	r0, r5, r0
   135ac:	sub	r1, r7, #2
   135b0:	cmp	r4, #0
   135b4:	beq	135c8 <__assert_fail@plt+0x1e68>
   135b8:	ldr	r3, [r6, #24]
   135bc:	str	r1, [sp]
   135c0:	mov	r1, #1
   135c4:	b	135dc <__assert_fail@plt+0x1e7c>
   135c8:	ldr	r2, [r9]
   135cc:	str	r1, [sp, #4]
   135d0:	mov	r1, #1
   135d4:	mov	r3, sl
   135d8:	str	r2, [sp]
   135dc:	mvn	r2, #0
   135e0:	bl	11658 <__sprintf_chk@plt>
   135e4:	ldr	r0, [r6, #28]
   135e8:	bl	114f0 <unlink@plt>
   135ec:	sub	r7, r7, #1
   135f0:	cmp	r7, #1
   135f4:	bgt	1358c <__assert_fail@plt+0x1e2c>
   135f8:	mov	r0, #0
   135fc:	str	r0, [r6, #40]	; 0x28
   13600:	mov	r0, r8
   13604:	mov	r1, #0
   13608:	bl	114c0 <signal@plt>
   1360c:	mov	r0, r8
   13610:	sub	sp, fp, #28
   13614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13618:	b	113f4 <raise@plt>
   1361c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13620:	add	fp, sp, #28
   13624:	sub	sp, sp, #140	; 0x8c
   13628:	bl	13748 <__assert_fail@plt+0x1fe8>
   1362c:	movw	r1, #61896	; 0xf1c8
   13630:	add	r2, sp, #12
   13634:	mov	r0, #0
   13638:	movt	r1, #3
   1363c:	bl	11448 <sigprocmask@plt>
   13640:	movw	r5, #62024	; 0xf248
   13644:	movt	r5, #3
   13648:	ldrb	r0, [r5, #1]
   1364c:	cmp	r0, #0
   13650:	beq	13730 <__assert_fail@plt+0x1fd0>
   13654:	ldr	r0, [r5, #40]	; 0x28
   13658:	cmp	r0, #1
   1365c:	blt	13728 <__assert_fail@plt+0x1fc8>
   13660:	movw	sl, #61784	; 0xf158
   13664:	movw	r9, #57479	; 0xe087
   13668:	movw	r8, #57999	; 0xe28f
   1366c:	add	r4, r0, #1
   13670:	movt	sl, #3
   13674:	movt	r9, #2
   13678:	movt	r8, #2
   1367c:	ldr	r0, [r5, #28]
   13680:	ldr	r1, [r5, #20]
   13684:	bl	11574 <strcpy@plt>
   13688:	ldr	r6, [r5, #24]
   1368c:	ldr	r7, [r5, #28]
   13690:	ldr	r0, [r5, #20]
   13694:	bl	11628 <strlen@plt>
   13698:	add	r0, r7, r0
   1369c:	sub	r1, r4, #2
   136a0:	cmp	r6, #0
   136a4:	beq	136b8 <__assert_fail@plt+0x1f58>
   136a8:	ldr	r3, [r5, #24]
   136ac:	str	r1, [sp]
   136b0:	mov	r1, #1
   136b4:	b	136cc <__assert_fail@plt+0x1f6c>
   136b8:	ldr	r2, [sl]
   136bc:	str	r1, [sp, #4]
   136c0:	mov	r1, #1
   136c4:	mov	r3, r9
   136c8:	str	r2, [sp]
   136cc:	mvn	r2, #0
   136d0:	bl	11658 <__sprintf_chk@plt>
   136d4:	ldr	r6, [r5, #28]
   136d8:	mov	r0, r6
   136dc:	bl	114f0 <unlink@plt>
   136e0:	cmp	r0, #0
   136e4:	beq	1371c <__assert_fail@plt+0x1fbc>
   136e8:	bl	11640 <__errno_location@plt>
   136ec:	ldr	r7, [r0]
   136f0:	cmp	r7, #2
   136f4:	beq	1371c <__assert_fail@plt+0x1fbc>
   136f8:	mov	r0, #0
   136fc:	mov	r1, #3
   13700:	mov	r2, r6
   13704:	bl	16394 <__assert_fail@plt+0x4c34>
   13708:	mov	r3, r0
   1370c:	mov	r0, #0
   13710:	mov	r1, r7
   13714:	mov	r2, r8
   13718:	bl	11598 <error@plt>
   1371c:	sub	r4, r4, #1
   13720:	cmp	r4, #1
   13724:	bgt	1367c <__assert_fail@plt+0x1f1c>
   13728:	mov	r0, #0
   1372c:	str	r0, [r5, #40]	; 0x28
   13730:	add	r1, sp, #12
   13734:	mov	r0, #2
   13738:	mov	r2, #0
   1373c:	bl	11448 <sigprocmask@plt>
   13740:	sub	sp, fp, #28
   13744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13748:	push	{r4, r5, r6, r7, fp, lr}
   1374c:	add	fp, sp, #16
   13750:	sub	sp, sp, #128	; 0x80
   13754:	movw	r7, #62024	; 0xf248
   13758:	movt	r7, #3
   1375c:	ldr	r0, [r7, #32]
   13760:	cmp	r0, #0
   13764:	beq	13858 <__assert_fail@plt+0x20f8>
   13768:	ldrb	r1, [r0]
   1376c:	tst	r1, #32
   13770:	bne	13860 <__assert_fail@plt+0x2100>
   13774:	bl	14318 <__assert_fail@plt+0x2bb8>
   13778:	cmp	r0, #0
   1377c:	bne	138a4 <__assert_fail@plt+0x2144>
   13780:	ldrd	r0, [r7, #64]	; 0x40
   13784:	orrs	r2, r0, r1
   13788:	bne	13818 <__assert_fail@plt+0x20b8>
   1378c:	ldrb	r2, [r7, #3]
   13790:	cmp	r2, #1
   13794:	bne	13818 <__assert_fail@plt+0x20b8>
   13798:	movw	r1, #61896	; 0xf1c8
   1379c:	mov	r5, sp
   137a0:	mov	r0, #0
   137a4:	movt	r1, #3
   137a8:	mov	r2, r5
   137ac:	bl	11448 <sigprocmask@plt>
   137b0:	ldr	r0, [r7, #36]	; 0x24
   137b4:	bl	114f0 <unlink@plt>
   137b8:	mov	r6, r0
   137bc:	bl	11640 <__errno_location@plt>
   137c0:	ldr	r4, [r0]
   137c4:	ldr	r0, [r7, #40]	; 0x28
   137c8:	mov	r1, r5
   137cc:	mov	r2, #0
   137d0:	sub	r0, r0, #1
   137d4:	str	r0, [r7, #40]	; 0x28
   137d8:	mov	r0, #2
   137dc:	bl	11448 <sigprocmask@plt>
   137e0:	cmp	r6, #0
   137e4:	cmpne	r4, #2
   137e8:	beq	13850 <__assert_fail@plt+0x20f0>
   137ec:	ldr	r2, [r7, #36]	; 0x24
   137f0:	mov	r0, #0
   137f4:	mov	r1, #3
   137f8:	bl	16394 <__assert_fail@plt+0x4c34>
   137fc:	movw	r2, #57999	; 0xe28f
   13800:	mov	r3, r0
   13804:	mov	r0, #0
   13808:	mov	r1, r4
   1380c:	movt	r2, #2
   13810:	bl	11598 <error@plt>
   13814:	b	13850 <__assert_fail@plt+0x20f0>
   13818:	ldrb	r2, [r7]
   1381c:	cmp	r2, #0
   13820:	bne	13850 <__assert_fail@plt+0x20f0>
   13824:	movw	r2, #61884	; 0xf1bc
   13828:	movt	r2, #3
   1382c:	ldr	r4, [r2]
   13830:	mov	r2, sp
   13834:	bl	14604 <__assert_fail@plt+0x2ea4>
   13838:	movw	r2, #59913	; 0xea09
   1383c:	mov	r3, r0
   13840:	mov	r0, r4
   13844:	mov	r1, #1
   13848:	movt	r2, #2
   1384c:	bl	116a0 <__fprintf_chk@plt>
   13850:	mov	r0, #0
   13854:	str	r0, [r7, #32]
   13858:	sub	sp, fp, #16
   1385c:	pop	{r4, r5, r6, r7, fp, pc}
   13860:	movw	r1, #57460	; 0xe074
   13864:	mov	r0, #0
   13868:	mov	r2, #5
   1386c:	mov	r5, #0
   13870:	movt	r1, #2
   13874:	bl	114e4 <dcgettext@plt>
   13878:	ldr	r1, [r7, #36]	; 0x24
   1387c:	mov	r4, r0
   13880:	mov	r0, #4
   13884:	bl	16118 <__assert_fail@plt+0x49b8>
   13888:	mov	r3, r0
   1388c:	mov	r0, #0
   13890:	mov	r1, #0
   13894:	mov	r2, r4
   13898:	bl	11598 <error@plt>
   1389c:	str	r5, [r7, #32]
   138a0:	bl	11898 <__assert_fail@plt+0x138>
   138a4:	bl	11640 <__errno_location@plt>
   138a8:	ldr	r2, [r7, #36]	; 0x24
   138ac:	ldr	r4, [r0]
   138b0:	mov	r0, #0
   138b4:	mov	r1, #3
   138b8:	mov	r5, #0
   138bc:	bl	16394 <__assert_fail@plt+0x4c34>
   138c0:	movw	r2, #57999	; 0xe28f
   138c4:	mov	r3, r0
   138c8:	mov	r0, #0
   138cc:	mov	r1, r4
   138d0:	movt	r2, #2
   138d4:	bl	11598 <error@plt>
   138d8:	str	r5, [r7, #32]
   138dc:	bl	11898 <__assert_fail@plt+0x138>
   138e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   138e4:	add	fp, sp, #24
   138e8:	sub	sp, sp, #136	; 0x88
   138ec:	movw	r7, #62024	; 0xf248
   138f0:	movt	r7, #3
   138f4:	ldr	r4, [r7, #40]	; 0x28
   138f8:	ldr	r0, [r7, #28]
   138fc:	ldr	r1, [r7, #20]
   13900:	bl	11574 <strcpy@plt>
   13904:	ldr	r5, [r7, #24]
   13908:	ldr	r6, [r7, #28]
   1390c:	ldr	r0, [r7, #20]
   13910:	bl	11628 <strlen@plt>
   13914:	add	r0, r6, r0
   13918:	cmp	r5, #0
   1391c:	beq	1392c <__assert_fail@plt+0x21cc>
   13920:	ldr	r3, [r7, #24]
   13924:	str	r4, [sp]
   13928:	b	13944 <__assert_fail@plt+0x21e4>
   1392c:	movw	r1, #61784	; 0xf158
   13930:	movw	r3, #57479	; 0xe087
   13934:	movt	r1, #3
   13938:	movt	r3, #2
   1393c:	ldr	r1, [r1]
   13940:	stm	sp, {r1, r4}
   13944:	mov	r1, #1
   13948:	mvn	r2, #0
   1394c:	bl	11658 <__sprintf_chk@plt>
   13950:	ldr	r2, [r7, #28]
   13954:	cmn	r4, #-2147483647	; 0x80000001
   13958:	str	r2, [r7, #36]	; 0x24
   1395c:	beq	139f8 <__assert_fail@plt+0x2298>
   13960:	movw	r1, #61896	; 0xf1c8
   13964:	add	r5, sp, #8
   13968:	mov	r0, #0
   1396c:	mov	r9, #0
   13970:	movt	r1, #3
   13974:	mov	r2, r5
   13978:	bl	11448 <sigprocmask@plt>
   1397c:	ldr	r0, [r7, #36]	; 0x24
   13980:	movw	r1, #58428	; 0xe43c
   13984:	movt	r1, #2
   13988:	bl	14484 <__assert_fail@plt+0x2d24>
   1398c:	cmp	r0, #0
   13990:	mov	r6, r0
   13994:	str	r0, [r7, #32]
   13998:	addne	r4, r4, #1
   1399c:	bl	11640 <__errno_location@plt>
   139a0:	ldr	r8, [r0]
   139a4:	mov	r0, #2
   139a8:	mov	r1, r5
   139ac:	mov	r2, #0
   139b0:	str	r4, [r7, #40]	; 0x28
   139b4:	bl	11448 <sigprocmask@plt>
   139b8:	cmp	r6, #0
   139bc:	strne	r9, [r7, #64]	; 0x40
   139c0:	strne	r9, [r7, #68]	; 0x44
   139c4:	subne	sp, fp, #24
   139c8:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   139cc:	ldr	r2, [r7, #36]	; 0x24
   139d0:	mov	r0, #0
   139d4:	mov	r1, #3
   139d8:	bl	16394 <__assert_fail@plt+0x4c34>
   139dc:	movw	r2, #57999	; 0xe28f
   139e0:	mov	r3, r0
   139e4:	mov	r0, #0
   139e8:	mov	r1, r8
   139ec:	movt	r2, #2
   139f0:	bl	11598 <error@plt>
   139f4:	bl	11898 <__assert_fail@plt+0x138>
   139f8:	mov	r8, #75	; 0x4b
   139fc:	b	139d0 <__assert_fail@plt+0x2270>
   13a00:	push	{fp, lr}
   13a04:	mov	fp, sp
   13a08:	sub	sp, sp, #32
   13a0c:	movw	r9, #61880	; 0xf1b8
   13a10:	movw	r1, #58334	; 0xe3de
   13a14:	mov	r5, r2
   13a18:	mov	r6, r0
   13a1c:	mov	r0, #0
   13a20:	mov	r2, #5
   13a24:	mov	r8, r3
   13a28:	movt	r9, #3
   13a2c:	movt	r1, #2
   13a30:	ldr	r7, [r9]
   13a34:	bl	114e4 <dcgettext@plt>
   13a38:	movw	r1, #62024	; 0xf248
   13a3c:	mov	r4, r0
   13a40:	ldr	r0, [r6, #24]
   13a44:	movt	r1, #3
   13a48:	ldr	r1, [r1, #8]
   13a4c:	ldr	r0, [r1, r0, lsl #2]
   13a50:	movw	r1, #62128	; 0xf2b0
   13a54:	movt	r1, #3
   13a58:	ldr	r6, [r1]
   13a5c:	bl	16640 <__assert_fail@plt+0x4ee0>
   13a60:	str	r0, [sp]
   13a64:	mov	r0, r7
   13a68:	mov	r1, #1
   13a6c:	mov	r2, r4
   13a70:	mov	r3, r6
   13a74:	bl	116a0 <__fprintf_chk@plt>
   13a78:	ldr	r7, [fp, #8]
   13a7c:	orrs	r0, r5, r8
   13a80:	beq	13ad0 <__assert_fail@plt+0x2370>
   13a84:	ldr	r4, [r9]
   13a88:	movw	r1, #58358	; 0xe3f6
   13a8c:	mov	r0, #0
   13a90:	mov	r2, #5
   13a94:	movt	r1, #2
   13a98:	bl	114e4 <dcgettext@plt>
   13a9c:	mov	r6, r0
   13aa0:	add	r2, sp, #11
   13aa4:	mov	r0, r5
   13aa8:	mov	r1, r8
   13aac:	bl	14604 <__assert_fail@plt+0x2ea4>
   13ab0:	mov	r3, r0
   13ab4:	mov	r0, r4
   13ab8:	mov	r1, #1
   13abc:	mov	r2, r6
   13ac0:	bl	116a0 <__fprintf_chk@plt>
   13ac4:	cmp	r7, #0
   13ac8:	beq	13af4 <__assert_fail@plt+0x2394>
   13acc:	b	13b04 <__assert_fail@plt+0x23a4>
   13ad0:	ldr	r0, [r9]
   13ad4:	movw	r2, #57458	; 0xe072
   13ad8:	mov	r1, #1
   13adc:	movt	r2, #2
   13ae0:	bl	116a0 <__fprintf_chk@plt>
   13ae4:	cmp	r7, #0
   13ae8:	beq	13af4 <__assert_fail@plt+0x2394>
   13aec:	b	13b04 <__assert_fail@plt+0x23a4>
   13af0:	bl	13bf8 <__assert_fail@plt+0x2498>
   13af4:	bl	13b08 <__assert_fail@plt+0x23a8>
   13af8:	cmp	r0, #0
   13afc:	bne	13af0 <__assert_fail@plt+0x2390>
   13b00:	bl	13748 <__assert_fail@plt+0x1fe8>
   13b04:	bl	11898 <__assert_fail@plt+0x138>
   13b08:	push	{r4, r5, r6, r7, fp, lr}
   13b0c:	add	fp, sp, #16
   13b10:	movw	r5, #62024	; 0xf248
   13b14:	movt	r5, #3
   13b18:	ldr	r4, [r5, #60]	; 0x3c
   13b1c:	cmp	r4, #0
   13b20:	beq	13b5c <__assert_fail@plt+0x23fc>
   13b24:	ldr	r0, [r4, #32]
   13b28:	cmp	r0, #0
   13b2c:	beq	13b44 <__assert_fail@plt+0x23e4>
   13b30:	ldr	r6, [r0, #652]	; 0x28c
   13b34:	bl	14538 <__assert_fail@plt+0x2dd8>
   13b38:	cmp	r6, #0
   13b3c:	mov	r0, r6
   13b40:	bne	13b30 <__assert_fail@plt+0x23d0>
   13b44:	ldr	r0, [r4, #28]
   13b48:	bl	14538 <__assert_fail@plt+0x2dd8>
   13b4c:	mov	r0, r4
   13b50:	bl	14538 <__assert_fail@plt+0x2dd8>
   13b54:	mov	r0, #0
   13b58:	str	r0, [r5, #60]	; 0x3c
   13b5c:	ldr	r0, [r5, #48]	; 0x30
   13b60:	cmp	r0, #0
   13b64:	bne	13b7c <__assert_fail@plt+0x241c>
   13b68:	mov	r4, #0
   13b6c:	bl	13c8c <__assert_fail@plt+0x252c>
   13b70:	cmp	r0, #0
   13b74:	beq	13bf0 <__assert_fail@plt+0x2490>
   13b78:	ldr	r0, [r5, #48]	; 0x30
   13b7c:	mov	r1, r0
   13b80:	ldr	r2, [r1, #16]!
   13b84:	ldr	r3, [r1, #4]
   13b88:	ldr	r4, [r5, #80]	; 0x50
   13b8c:	ldr	r7, [r5, #84]	; 0x54
   13b90:	subs	r6, r4, r2
   13b94:	sbcs	r7, r7, r3
   13b98:	strdlt	r2, [r5, #80]	; 0x50
   13b9c:	adds	r2, r2, #1
   13ba0:	adc	r3, r3, #0
   13ba4:	strd	r2, [r1]
   13ba8:	ldr	r1, [r0, #36]	; 0x24
   13bac:	ldr	r3, [r1, #8]
   13bb0:	ldr	r2, [r1]
   13bb4:	add	r7, r3, #1
   13bb8:	add	r3, r1, r3, lsl #3
   13bbc:	add	r4, r3, #12
   13bc0:	cmp	r7, r2
   13bc4:	str	r7, [r1, #8]
   13bc8:	bne	13bf0 <__assert_fail@plt+0x2490>
   13bcc:	ldr	r1, [r1, #652]	; 0x28c
   13bd0:	str	r1, [r0, #36]	; 0x24
   13bd4:	cmp	r1, #0
   13bd8:	ldrne	r1, [r1]
   13bdc:	cmpne	r1, #0
   13be0:	bne	13bf0 <__assert_fail@plt+0x2490>
   13be4:	str	r0, [r5, #60]	; 0x3c
   13be8:	ldr	r0, [r0, #40]	; 0x28
   13bec:	str	r0, [r5, #48]	; 0x30
   13bf0:	mov	r0, r4
   13bf4:	pop	{r4, r5, r6, r7, fp, pc}
   13bf8:	push	{r4, r5, r6, r7, fp, lr}
   13bfc:	add	fp, sp, #16
   13c00:	movw	r6, #62024	; 0xf248
   13c04:	mov	r4, r0
   13c08:	ldr	r2, [r0]
   13c0c:	ldr	r0, [r0, #4]
   13c10:	mov	r1, #1
   13c14:	movt	r6, #3
   13c18:	ldr	r3, [r6, #32]
   13c1c:	bl	114cc <fwrite_unlocked@plt>
   13c20:	ldr	r1, [r4]
   13c24:	cmp	r0, r1
   13c28:	bne	13c40 <__assert_fail@plt+0x24e0>
   13c2c:	ldrd	r2, [r6, #64]	; 0x40
   13c30:	adds	r2, r2, r0
   13c34:	adc	r3, r3, r0, asr #31
   13c38:	strd	r2, [r6, #64]	; 0x40
   13c3c:	pop	{r4, r5, r6, r7, fp, pc}
   13c40:	bl	11640 <__errno_location@plt>
   13c44:	ldr	r4, [r0]
   13c48:	movw	r1, #57460	; 0xe074
   13c4c:	mov	r0, #0
   13c50:	mov	r2, #5
   13c54:	mov	r7, #0
   13c58:	movt	r1, #2
   13c5c:	bl	114e4 <dcgettext@plt>
   13c60:	ldr	r1, [r6, #36]	; 0x24
   13c64:	mov	r5, r0
   13c68:	mov	r0, #4
   13c6c:	bl	16118 <__assert_fail@plt+0x49b8>
   13c70:	mov	r3, r0
   13c74:	mov	r0, #0
   13c78:	mov	r1, r4
   13c7c:	mov	r2, r5
   13c80:	bl	11598 <error@plt>
   13c84:	str	r7, [r6, #32]
   13c88:	bl	11898 <__assert_fail@plt+0x138>
   13c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c90:	add	fp, sp, #28
   13c94:	sub	sp, sp, #12
   13c98:	movw	r8, #62024	; 0xf248
   13c9c:	mov	r0, #0
   13ca0:	movt	r8, #3
   13ca4:	ldrb	r1, [r8, #4]
   13ca8:	cmp	r1, #0
   13cac:	bne	140b0 <__assert_fail@plt+0x2950>
   13cb0:	ldr	r0, [r8, #52]	; 0x34
   13cb4:	movw	r1, #8190	; 0x1ffe
   13cb8:	movw	r5, #8191	; 0x1fff
   13cbc:	mov	r7, #0
   13cc0:	cmp	r0, r1
   13cc4:	addgt	r5, r0, #1
   13cc8:	b	13ce0 <__assert_fail@plt+0x2580>
   13ccc:	ldr	r0, [r4, #28]
   13cd0:	lsl	r5, r5, #1
   13cd4:	bl	14538 <__assert_fail@plt+0x2dd8>
   13cd8:	mov	r0, r4
   13cdc:	bl	14538 <__assert_fail@plt+0x2dd8>
   13ce0:	mov	r0, #48	; 0x30
   13ce4:	bl	2a5c8 <__assert_fail@plt+0x18e68>
   13ce8:	mov	r4, r0
   13cec:	str	r7, [r0]
   13cf0:	mov	r0, #1
   13cf4:	mov	r2, r5
   13cf8:	mvn	r3, #0
   13cfc:	str	r0, [sp]
   13d00:	mov	r0, #0
   13d04:	mov	r1, r4
   13d08:	bl	2a7f8 <__assert_fail@plt+0x19098>
   13d0c:	str	r0, [r4, #28]
   13d10:	mov	r5, r0
   13d14:	ldrd	r0, [r8, #88]	; 0x58
   13d18:	str	r7, [r4, #4]
   13d1c:	str	r7, [r4, #24]
   13d20:	str	r7, [r4, #36]	; 0x24
   13d24:	str	r7, [r4, #32]
   13d28:	str	r7, [r4, #40]	; 0x28
   13d2c:	ldr	r6, [r8, #52]	; 0x34
   13d30:	mov	r9, #0
   13d34:	adds	r0, r0, #1
   13d38:	adc	r1, r1, #0
   13d3c:	vmov.32	d16[0], r0
   13d40:	add	r0, r4, #8
   13d44:	cmp	r6, #0
   13d48:	vmov.32	d16[1], r1
   13d4c:	str	r0, [sp, #8]
   13d50:	vorr	d17, d16, d16
   13d54:	vst1.64	{d16-d17}, [r0]
   13d58:	ldr	r7, [r4]
   13d5c:	beq	13d88 <__assert_fail@plt+0x2628>
   13d60:	ldr	r1, [r8, #56]	; 0x38
   13d64:	mov	r0, r5
   13d68:	mov	r2, r6
   13d6c:	bl	11484 <memcpy@plt>
   13d70:	ldr	r0, [r4, #4]
   13d74:	sub	r7, r7, r6
   13d78:	add	r5, r5, r6
   13d7c:	str	r9, [r8, #52]	; 0x34
   13d80:	add	r0, r0, r6
   13d84:	str	r0, [r4, #4]
   13d88:	subs	r2, r7, #1
   13d8c:	mov	r0, #0
   13d90:	beq	13dc8 <__assert_fail@plt+0x2668>
   13d94:	mov	r0, #0
   13d98:	mov	r1, r5
   13d9c:	bl	29e98 <__assert_fail@plt+0x18738>
   13da0:	cmp	r0, #0
   13da4:	mov	r7, #0
   13da8:	beq	13de0 <__assert_fail@plt+0x2680>
   13dac:	cmn	r0, #1
   13db0:	beq	14108 <__assert_fail@plt+0x29a8>
   13db4:	ldr	r1, [r4, #4]
   13db8:	adds	r0, r1, r0
   13dbc:	str	r0, [r4, #4]
   13dc0:	bne	13dfc <__assert_fail@plt+0x269c>
   13dc4:	b	13fec <__assert_fail@plt+0x288c>
   13dc8:	mov	r7, #0
   13dcc:	ldr	r1, [r4, #4]
   13dd0:	adds	r0, r1, r0
   13dd4:	str	r0, [r4, #4]
   13dd8:	bne	13dfc <__assert_fail@plt+0x269c>
   13ddc:	b	13fec <__assert_fail@plt+0x288c>
   13de0:	mov	r0, #1
   13de4:	strb	r0, [r8, #4]
   13de8:	mov	r0, #0
   13dec:	ldr	r1, [r4, #4]
   13df0:	adds	r0, r1, r0
   13df4:	str	r0, [r4, #4]
   13df8:	beq	13fec <__assert_fail@plt+0x288c>
   13dfc:	ldr	r6, [r4, #28]
   13e00:	mov	r1, #10
   13e04:	mov	r8, r6
   13e08:	strb	r1, [r8, r0]!
   13e0c:	mov	r0, r6
   13e10:	mov	r1, #10
   13e14:	bl	1152c <rawmemchr@plt>
   13e18:	mov	r9, #0
   13e1c:	cmp	r0, r8
   13e20:	beq	13ee8 <__assert_fail@plt+0x2788>
   13e24:	mov	r5, r6
   13e28:	b	13e60 <__assert_fail@plt+0x2700>
   13e2c:	mov	r0, #656	; 0x290
   13e30:	bl	2a5c8 <__assert_fail@plt+0x18e68>
   13e34:	str	r7, [r0, #652]	; 0x28c
   13e38:	str	r7, [r0]
   13e3c:	str	r7, [r0, #4]
   13e40:	str	r0, [r4, #32]
   13e44:	str	r7, [r0, #8]
   13e48:	str	r0, [r4, #36]	; 0x24
   13e4c:	ldr	r1, [r0]
   13e50:	sub	sl, r6, r5
   13e54:	cmp	r1, #80	; 0x50
   13e58:	beq	13e84 <__assert_fail@plt+0x2724>
   13e5c:	b	13eac <__assert_fail@plt+0x274c>
   13e60:	add	r6, r0, #1
   13e64:	ldr	r0, [r4, #32]
   13e68:	cmp	r0, #0
   13e6c:	beq	13e2c <__assert_fail@plt+0x26cc>
   13e70:	ldr	r0, [r4, #36]	; 0x24
   13e74:	ldr	r1, [r0]
   13e78:	sub	sl, r6, r5
   13e7c:	cmp	r1, #80	; 0x50
   13e80:	bne	13eac <__assert_fail@plt+0x274c>
   13e84:	mov	r0, #656	; 0x290
   13e88:	bl	2a5c8 <__assert_fail@plt+0x18e68>
   13e8c:	ldr	r2, [r4, #36]	; 0x24
   13e90:	mov	r1, #0
   13e94:	str	r1, [r0, #652]	; 0x28c
   13e98:	str	r1, [r0]
   13e9c:	str	r1, [r0, #4]
   13ea0:	str	r1, [r0, #8]
   13ea4:	str	r0, [r2, #652]	; 0x28c
   13ea8:	str	r0, [r4, #36]	; 0x24
   13eac:	ldr	r2, [r0, #4]
   13eb0:	add	r1, r1, #1
   13eb4:	add	r3, r0, r2, lsl #3
   13eb8:	str	sl, [r3, #12]
   13ebc:	str	r5, [r3, #16]
   13ec0:	str	r1, [r0]
   13ec4:	add	r1, r2, #1
   13ec8:	str	r1, [r0, #4]
   13ecc:	mov	r0, r6
   13ed0:	mov	r1, #10
   13ed4:	bl	1152c <rawmemchr@plt>
   13ed8:	add	r9, r9, #1
   13edc:	cmp	r0, r8
   13ee0:	mov	r5, r6
   13ee4:	bne	13e60 <__assert_fail@plt+0x2700>
   13ee8:	subs	r8, r8, r6
   13eec:	beq	13f80 <__assert_fail@plt+0x2820>
   13ef0:	movw	r7, #62024	; 0xf248
   13ef4:	movt	r7, #3
   13ef8:	ldrb	r0, [r7, #4]
   13efc:	cmp	r0, #1
   13f00:	bne	13f8c <__assert_fail@plt+0x282c>
   13f04:	ldr	r0, [r4, #32]
   13f08:	ldr	r5, [sp, #8]
   13f0c:	cmp	r0, #0
   13f10:	beq	14048 <__assert_fail@plt+0x28e8>
   13f14:	ldr	r0, [r4, #36]	; 0x24
   13f18:	mov	r7, #0
   13f1c:	ldr	r1, [r0]
   13f20:	cmp	r1, #80	; 0x50
   13f24:	bne	13f50 <__assert_fail@plt+0x27f0>
   13f28:	mov	r0, #656	; 0x290
   13f2c:	bl	2a5c8 <__assert_fail@plt+0x18e68>
   13f30:	ldr	r2, [r4, #36]	; 0x24
   13f34:	mov	r1, #0
   13f38:	str	r1, [r0, #652]	; 0x28c
   13f3c:	str	r1, [r0]
   13f40:	str	r1, [r0, #4]
   13f44:	str	r1, [r0, #8]
   13f48:	str	r0, [r2, #652]	; 0x28c
   13f4c:	str	r0, [r4, #36]	; 0x24
   13f50:	ldr	r2, [r0, #4]
   13f54:	add	r1, r1, #1
   13f58:	add	r9, r9, #1
   13f5c:	add	r3, r0, r2, lsl #3
   13f60:	str	r8, [r3, #12]
   13f64:	movw	r8, #62024	; 0xf248
   13f68:	str	r6, [r3, #16]
   13f6c:	str	r1, [r0]
   13f70:	add	r1, r2, #1
   13f74:	str	r1, [r0, #4]
   13f78:	movt	r8, #3
   13f7c:	b	13fb8 <__assert_fail@plt+0x2858>
   13f80:	movw	r8, #62024	; 0xf248
   13f84:	movt	r8, #3
   13f88:	b	13fb4 <__assert_fail@plt+0x2854>
   13f8c:	mov	r0, r6
   13f90:	mov	r1, r8
   13f94:	bl	2aa64 <__assert_fail@plt+0x19304>
   13f98:	mov	r5, r0
   13f9c:	ldr	r0, [r7, #56]	; 0x38
   13fa0:	bl	14538 <__assert_fail@plt+0x2dd8>
   13fa4:	str	r8, [r7, #52]	; 0x34
   13fa8:	str	r5, [r7, #56]	; 0x38
   13fac:	mov	r8, r7
   13fb0:	mov	r7, #0
   13fb4:	ldr	r5, [sp, #8]
   13fb8:	ldrd	r0, [r8, #88]	; 0x58
   13fbc:	str	r9, [r4, #24]
   13fc0:	adds	r2, r0, #1
   13fc4:	adc	r3, r1, #0
   13fc8:	vmov.32	d16[0], r2
   13fcc:	adds	r0, r0, r9
   13fd0:	vmov.32	d16[1], r3
   13fd4:	adc	r1, r1, r9, asr #31
   13fd8:	cmp	r9, #0
   13fdc:	vorr	d17, d16, d16
   13fe0:	strd	r0, [r8, #88]	; 0x58
   13fe4:	vst1.64	{d16-d17}, [r5]
   13fe8:	bne	140b8 <__assert_fail@plt+0x2958>
   13fec:	ldrb	r0, [r8, #4]
   13ff0:	cmp	r0, #0
   13ff4:	bne	1407c <__assert_fail@plt+0x291c>
   13ff8:	ldr	r5, [r4]
   13ffc:	cmn	r5, #1
   14000:	ble	14010 <__assert_fail@plt+0x28b0>
   14004:	cmp	r5, #1073741824	; 0x40000000
   14008:	blt	14024 <__assert_fail@plt+0x28c4>
   1400c:	b	14104 <__assert_fail@plt+0x29a4>
   14010:	beq	14024 <__assert_fail@plt+0x28c4>
   14014:	mov	r0, #-2147483648	; 0x80000000
   14018:	sdiv	r0, r0, r5
   1401c:	cmp	r0, #2
   14020:	blt	14104 <__assert_fail@plt+0x29a4>
   14024:	ldr	r0, [r4, #32]
   14028:	cmp	r0, #0
   1402c:	beq	13ccc <__assert_fail@plt+0x256c>
   14030:	ldr	r6, [r0, #652]	; 0x28c
   14034:	bl	14538 <__assert_fail@plt+0x2dd8>
   14038:	cmp	r6, #0
   1403c:	mov	r0, r6
   14040:	bne	14030 <__assert_fail@plt+0x28d0>
   14044:	b	13ccc <__assert_fail@plt+0x256c>
   14048:	mov	r0, #656	; 0x290
   1404c:	bl	2a5c8 <__assert_fail@plt+0x18e68>
   14050:	mov	r7, #0
   14054:	str	r0, [r4, #32]
   14058:	str	r0, [r4, #36]	; 0x24
   1405c:	str	r7, [r0, #652]	; 0x28c
   14060:	str	r7, [r0]
   14064:	str	r7, [r0, #4]
   14068:	str	r7, [r0, #8]
   1406c:	ldr	r1, [r0]
   14070:	cmp	r1, #80	; 0x50
   14074:	beq	13f28 <__assert_fail@plt+0x27c8>
   14078:	b	13f50 <__assert_fail@plt+0x27f0>
   1407c:	ldr	r0, [r4, #32]
   14080:	cmp	r0, #0
   14084:	beq	1409c <__assert_fail@plt+0x293c>
   14088:	ldr	r5, [r0, #652]	; 0x28c
   1408c:	bl	14538 <__assert_fail@plt+0x2dd8>
   14090:	cmp	r5, #0
   14094:	mov	r0, r5
   14098:	bne	14088 <__assert_fail@plt+0x2928>
   1409c:	ldr	r0, [r4, #28]
   140a0:	bl	14538 <__assert_fail@plt+0x2dd8>
   140a4:	mov	r0, r4
   140a8:	bl	14538 <__assert_fail@plt+0x2dd8>
   140ac:	mov	r0, #0
   140b0:	sub	sp, fp, #28
   140b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140b8:	ldr	r1, [r4, #32]
   140bc:	mov	r0, #0
   140c0:	str	r1, [r4, #36]	; 0x24
   140c4:	str	r0, [r4, #40]	; 0x28
   140c8:	ldr	r0, [r8, #48]	; 0x30
   140cc:	cmp	r0, #0
   140d0:	beq	140f4 <__assert_fail@plt+0x2994>
   140d4:	mov	r1, r0
   140d8:	ldr	r0, [r0, #40]	; 0x28
   140dc:	cmp	r0, #0
   140e0:	bne	140d4 <__assert_fail@plt+0x2974>
   140e4:	str	r4, [r1, #40]	; 0x28
   140e8:	mov	r0, #1
   140ec:	sub	sp, fp, #28
   140f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f4:	str	r4, [r8, #48]	; 0x30
   140f8:	mov	r0, #1
   140fc:	sub	sp, fp, #28
   14100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14104:	bl	11860 <__assert_fail@plt+0x100>
   14108:	bl	11640 <__errno_location@plt>
   1410c:	ldr	r4, [r0]
   14110:	movw	r1, #56212	; 0xdb94
   14114:	mov	r0, #0
   14118:	mov	r2, #5
   1411c:	movt	r1, #2
   14120:	bl	114e4 <dcgettext@plt>
   14124:	mov	r2, r0
   14128:	mov	r0, #0
   1412c:	mov	r1, r4
   14130:	bl	11598 <error@plt>
   14134:	bl	11898 <__assert_fail@plt+0x138>
   14138:	push	{fp, lr}
   1413c:	mov	fp, sp
   14140:	sub	sp, sp, #32
   14144:	movw	sl, #61880	; 0xf1b8
   14148:	movw	r1, #58395	; 0xe41b
   1414c:	mov	r9, r2
   14150:	mov	r6, r0
   14154:	mov	r0, #0
   14158:	mov	r2, #5
   1415c:	mov	r8, r3
   14160:	movt	sl, #3
   14164:	movt	r1, #2
   14168:	ldr	r7, [sl]
   1416c:	bl	114e4 <dcgettext@plt>
   14170:	mov	r4, r0
   14174:	movw	r0, #62128	; 0xf2b0
   14178:	add	r2, sp, #11
   1417c:	movt	r0, #3
   14180:	ldr	r5, [r0]
   14184:	ldrd	r0, [r6, #8]
   14188:	bl	14604 <__assert_fail@plt+0x2ea4>
   1418c:	bl	16640 <__assert_fail@plt+0x4ee0>
   14190:	str	r0, [sp]
   14194:	mov	r0, r7
   14198:	mov	r1, #1
   1419c:	mov	r2, r4
   141a0:	mov	r3, r5
   141a4:	bl	116a0 <__fprintf_chk@plt>
   141a8:	ldr	r6, [sl]
   141ac:	orrs	r0, r9, r8
   141b0:	bne	141cc <__assert_fail@plt+0x2a6c>
   141b4:	movw	r2, #57458	; 0xe072
   141b8:	mov	r0, r6
   141bc:	mov	r1, #1
   141c0:	movt	r2, #2
   141c4:	bl	116a0 <__fprintf_chk@plt>
   141c8:	bl	11898 <__assert_fail@plt+0x138>
   141cc:	movw	r1, #58358	; 0xe3f6
   141d0:	mov	r0, #0
   141d4:	mov	r2, #5
   141d8:	movt	r1, #2
   141dc:	bl	114e4 <dcgettext@plt>
   141e0:	mov	r4, r0
   141e4:	add	r2, sp, #11
   141e8:	mov	r0, r9
   141ec:	mov	r1, r8
   141f0:	bl	14604 <__assert_fail@plt+0x2ea4>
   141f4:	mov	r3, r0
   141f8:	mov	r0, r6
   141fc:	mov	r1, #1
   14200:	mov	r2, r4
   14204:	bl	116a0 <__fprintf_chk@plt>
   14208:	bl	11898 <__assert_fail@plt+0x138>
   1420c:	movw	r1, #62120	; 0xf2a8
   14210:	movt	r1, #3
   14214:	str	r0, [r1, #4]
   14218:	bx	lr
   1421c:	movw	r1, #62120	; 0xf2a8
   14220:	movt	r1, #3
   14224:	strb	r0, [r1]
   14228:	bx	lr
   1422c:	push	{r4, r5, r6, sl, fp, lr}
   14230:	add	fp, sp, #16
   14234:	sub	sp, sp, #8
   14238:	movw	r0, #61884	; 0xf1bc
   1423c:	movt	r0, #3
   14240:	ldr	r0, [r0]
   14244:	bl	2d324 <__assert_fail@plt+0x1bbc4>
   14248:	cmp	r0, #0
   1424c:	beq	14274 <__assert_fail@plt+0x2b14>
   14250:	movw	r5, #62120	; 0xf2a8
   14254:	movt	r5, #3
   14258:	ldrb	r0, [r5]
   1425c:	cmp	r0, #0
   14260:	beq	142a0 <__assert_fail@plt+0x2b40>
   14264:	bl	11640 <__errno_location@plt>
   14268:	ldr	r0, [r0]
   1426c:	cmp	r0, #32
   14270:	bne	142a0 <__assert_fail@plt+0x2b40>
   14274:	movw	r0, #61880	; 0xf1b8
   14278:	movt	r0, #3
   1427c:	ldr	r0, [r0]
   14280:	bl	2d324 <__assert_fail@plt+0x1bbc4>
   14284:	cmp	r0, #0
   14288:	subeq	sp, fp, #16
   1428c:	popeq	{r4, r5, r6, sl, fp, pc}
   14290:	movw	r0, #61792	; 0xf160
   14294:	movt	r0, #3
   14298:	ldr	r0, [r0]
   1429c:	bl	11478 <_exit@plt>
   142a0:	movw	r1, #59063	; 0xe6b7
   142a4:	mov	r0, #0
   142a8:	mov	r2, #5
   142ac:	movt	r1, #2
   142b0:	bl	114e4 <dcgettext@plt>
   142b4:	ldr	r6, [r5, #4]
   142b8:	mov	r4, r0
   142bc:	bl	11640 <__errno_location@plt>
   142c0:	ldr	r5, [r0]
   142c4:	cmp	r6, #0
   142c8:	bne	142e4 <__assert_fail@plt+0x2b84>
   142cc:	movw	r2, #57999	; 0xe28f
   142d0:	mov	r0, #0
   142d4:	mov	r1, r5
   142d8:	mov	r3, r4
   142dc:	movt	r2, #2
   142e0:	b	14304 <__assert_fail@plt+0x2ba4>
   142e4:	mov	r0, r6
   142e8:	bl	162b8 <__assert_fail@plt+0x4b58>
   142ec:	movw	r2, #59075	; 0xe6c3
   142f0:	mov	r3, r0
   142f4:	str	r4, [sp]
   142f8:	mov	r0, #0
   142fc:	mov	r1, r5
   14300:	movt	r2, #2
   14304:	bl	11598 <error@plt>
   14308:	movw	r0, #61792	; 0xf160
   1430c:	movt	r0, #3
   14310:	ldr	r0, [r0]
   14314:	bl	11478 <_exit@plt>
   14318:	push	{r4, r5, r6, sl, fp, lr}
   1431c:	add	fp, sp, #16
   14320:	sub	sp, sp, #8
   14324:	mov	r4, r0
   14328:	bl	11694 <fileno@plt>
   1432c:	cmn	r0, #1
   14330:	ble	143a4 <__assert_fail@plt+0x2c44>
   14334:	mov	r0, r4
   14338:	bl	115d4 <__freading@plt>
   1433c:	cmp	r0, #0
   14340:	beq	1436c <__assert_fail@plt+0x2c0c>
   14344:	mov	r0, r4
   14348:	bl	11694 <fileno@plt>
   1434c:	mov	r1, #1
   14350:	mov	r2, #0
   14354:	mov	r3, #0
   14358:	str	r1, [sp]
   1435c:	bl	1155c <lseek64@plt>
   14360:	and	r0, r0, r1
   14364:	cmn	r0, #1
   14368:	beq	143a4 <__assert_fail@plt+0x2c44>
   1436c:	mov	r0, r4
   14370:	bl	1441c <__assert_fail@plt+0x2cbc>
   14374:	cmp	r0, #0
   14378:	beq	143a4 <__assert_fail@plt+0x2c44>
   1437c:	bl	11640 <__errno_location@plt>
   14380:	ldr	r6, [r0]
   14384:	mov	r5, r0
   14388:	mov	r0, r4
   1438c:	bl	116ac <fclose@plt>
   14390:	cmp	r6, #0
   14394:	strne	r6, [r5]
   14398:	mvnne	r0, #0
   1439c:	sub	sp, fp, #16
   143a0:	pop	{r4, r5, r6, sl, fp, pc}
   143a4:	mov	r0, r4
   143a8:	sub	sp, fp, #16
   143ac:	pop	{r4, r5, r6, sl, fp, lr}
   143b0:	b	116ac <fclose@plt>
   143b4:	push	{r4, r5, r6, r7, fp, lr}
   143b8:	add	fp, sp, #16
   143bc:	mov	r5, r0
   143c0:	mov	r0, r1
   143c4:	mov	r1, r2
   143c8:	mov	r2, r3
   143cc:	bl	115a4 <open64@plt>
   143d0:	mov	r4, r0
   143d4:	cmp	r0, r5
   143d8:	beq	14414 <__assert_fail@plt+0x2cb4>
   143dc:	cmp	r4, #0
   143e0:	blt	14414 <__assert_fail@plt+0x2cb4>
   143e4:	mov	r0, r4
   143e8:	mov	r1, r5
   143ec:	bl	114fc <dup2@plt>
   143f0:	mov	r5, r0
   143f4:	bl	11640 <__errno_location@plt>
   143f8:	ldr	r7, [r0]
   143fc:	mov	r6, r0
   14400:	mov	r0, r4
   14404:	bl	11748 <close@plt>
   14408:	mov	r0, r5
   1440c:	str	r7, [r6]
   14410:	pop	{r4, r5, r6, r7, fp, pc}
   14414:	mov	r0, r4
   14418:	pop	{r4, r5, r6, r7, fp, pc}
   1441c:	push	{r4, sl, fp, lr}
   14420:	add	fp, sp, #8
   14424:	sub	sp, sp, #8
   14428:	mov	r4, r0
   1442c:	cmp	r0, #0
   14430:	beq	1444c <__assert_fail@plt+0x2cec>
   14434:	mov	r0, r4
   14438:	bl	115d4 <__freading@plt>
   1443c:	cmp	r0, #0
   14440:	ldrbne	r0, [r4, #1]
   14444:	tstne	r0, #1
   14448:	bne	1445c <__assert_fail@plt+0x2cfc>
   1444c:	mov	r0, r4
   14450:	sub	sp, fp, #8
   14454:	pop	{r4, sl, fp, lr}
   14458:	b	1143c <fflush@plt>
   1445c:	mov	r0, #1
   14460:	mov	r2, #0
   14464:	mov	r3, #0
   14468:	str	r0, [sp]
   1446c:	mov	r0, r4
   14470:	bl	14560 <__assert_fail@plt+0x2e00>
   14474:	mov	r0, r4
   14478:	sub	sp, fp, #8
   1447c:	pop	{r4, sl, fp, lr}
   14480:	b	1143c <fflush@plt>
   14484:	push	{r4, r5, r6, r7, fp, lr}
   14488:	add	fp, sp, #16
   1448c:	mov	r5, r1
   14490:	bl	1170c <fopen64@plt>
   14494:	mov	r4, #0
   14498:	cmp	r0, #0
   1449c:	beq	144ec <__assert_fail@plt+0x2d8c>
   144a0:	mov	r6, r0
   144a4:	bl	11694 <fileno@plt>
   144a8:	cmp	r0, #2
   144ac:	movhi	r0, r6
   144b0:	pophi	{r4, r5, r6, r7, fp, pc}
   144b4:	bl	29efc <__assert_fail@plt+0x1879c>
   144b8:	cmn	r0, #1
   144bc:	ble	14518 <__assert_fail@plt+0x2db8>
   144c0:	mov	r7, r0
   144c4:	mov	r0, r6
   144c8:	bl	14318 <__assert_fail@plt+0x2bb8>
   144cc:	cmp	r0, #0
   144d0:	bne	144f4 <__assert_fail@plt+0x2d94>
   144d4:	mov	r0, r7
   144d8:	mov	r1, r5
   144dc:	bl	113c4 <fdopen@plt>
   144e0:	mov	r4, r0
   144e4:	cmp	r0, #0
   144e8:	beq	144f4 <__assert_fail@plt+0x2d94>
   144ec:	mov	r0, r4
   144f0:	pop	{r4, r5, r6, r7, fp, pc}
   144f4:	bl	11640 <__errno_location@plt>
   144f8:	ldr	r5, [r0]
   144fc:	mov	r4, r0
   14500:	mov	r0, r7
   14504:	bl	11748 <close@plt>
   14508:	str	r5, [r4]
   1450c:	mov	r4, #0
   14510:	mov	r0, r4
   14514:	pop	{r4, r5, r6, r7, fp, pc}
   14518:	bl	11640 <__errno_location@plt>
   1451c:	ldr	r7, [r0]
   14520:	mov	r5, r0
   14524:	mov	r0, r6
   14528:	bl	14318 <__assert_fail@plt+0x2bb8>
   1452c:	mov	r0, r4
   14530:	str	r7, [r5]
   14534:	pop	{r4, r5, r6, r7, fp, pc}
   14538:	push	{r4, r5, r6, sl, fp, lr}
   1453c:	add	fp, sp, #16
   14540:	mov	r4, r0
   14544:	bl	11640 <__errno_location@plt>
   14548:	ldr	r6, [r0]
   1454c:	mov	r5, r0
   14550:	mov	r0, r4
   14554:	bl	11460 <free@plt>
   14558:	str	r6, [r5]
   1455c:	pop	{r4, r5, r6, sl, fp, pc}
   14560:	push	{r4, r5, r6, r7, fp, lr}
   14564:	add	fp, sp, #16
   14568:	sub	sp, sp, #8
   1456c:	mov	r4, r0
   14570:	ldr	r0, [r0, #4]
   14574:	mov	r5, r3
   14578:	mov	r6, r2
   1457c:	ldr	r1, [r4, #8]
   14580:	cmp	r1, r0
   14584:	bne	145a0 <__assert_fail@plt+0x2e40>
   14588:	ldrd	r0, [r4, #16]
   1458c:	cmp	r1, r0
   14590:	bne	145a0 <__assert_fail@plt+0x2e40>
   14594:	ldr	r0, [r4, #36]	; 0x24
   14598:	cmp	r0, #0
   1459c:	beq	145b8 <__assert_fail@plt+0x2e58>
   145a0:	mov	r0, r4
   145a4:	mov	r2, r6
   145a8:	mov	r3, r5
   145ac:	sub	sp, fp, #16
   145b0:	pop	{r4, r5, r6, r7, fp, lr}
   145b4:	b	116b8 <fseeko64@plt>
   145b8:	ldr	r7, [fp, #8]
   145bc:	mov	r0, r4
   145c0:	bl	11694 <fileno@plt>
   145c4:	mov	r2, r6
   145c8:	mov	r3, r5
   145cc:	str	r7, [sp]
   145d0:	bl	1155c <lseek64@plt>
   145d4:	and	r2, r0, r1
   145d8:	cmn	r2, #1
   145dc:	mvneq	r0, #0
   145e0:	subeq	sp, fp, #16
   145e4:	popeq	{r4, r5, r6, r7, fp, pc}
   145e8:	strd	r0, [r4, #80]	; 0x50
   145ec:	ldr	r0, [r4]
   145f0:	bic	r0, r0, #16
   145f4:	str	r0, [r4]
   145f8:	mov	r0, #0
   145fc:	sub	sp, fp, #16
   14600:	pop	{r4, r5, r6, r7, fp, pc}
   14604:	push	{r4, r5, r6, sl, fp, lr}
   14608:	add	fp, sp, #16
   1460c:	mov	r5, r0
   14610:	mov	r0, #0
   14614:	mov	r4, r1
   14618:	add	r6, r2, #19
   1461c:	cmp	r1, #0
   14620:	strb	r0, [r2, #20]
   14624:	blt	14674 <__assert_fail@plt+0x2f14>
   14628:	mov	r0, r5
   1462c:	mov	r1, r4
   14630:	mov	r2, #10
   14634:	mov	r3, #0
   14638:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   1463c:	add	r2, r0, r0, lsl #2
   14640:	sub	r2, r5, r2, lsl #1
   14644:	add	r2, r2, #48	; 0x30
   14648:	strb	r2, [r6], #-1
   1464c:	adds	r2, r5, #9
   14650:	mov	r5, r0
   14654:	adc	r3, r4, #0
   14658:	rsbs	r2, r2, #18
   1465c:	mov	r4, r1
   14660:	rscs	r2, r3, #0
   14664:	bcc	14628 <__assert_fail@plt+0x2ec8>
   14668:	add	r6, r6, #1
   1466c:	mov	r0, r6
   14670:	pop	{r4, r5, r6, sl, fp, pc}
   14674:	mov	r0, r5
   14678:	mov	r1, r4
   1467c:	mov	r2, #10
   14680:	mov	r3, #0
   14684:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   14688:	add	r2, r0, r0, lsl #2
   1468c:	rsb	r2, r5, r2, lsl #1
   14690:	add	r2, r2, #48	; 0x30
   14694:	strb	r2, [r6], #-1
   14698:	adds	r2, r5, #9
   1469c:	mov	r5, r0
   146a0:	adc	r3, r4, #0
   146a4:	rsbs	r2, r2, #18
   146a8:	mov	r4, r1
   146ac:	rscs	r2, r3, #0
   146b0:	bcc	14674 <__assert_fail@plt+0x2f14>
   146b4:	mov	r0, #45	; 0x2d
   146b8:	strb	r0, [r6]
   146bc:	mov	r0, r6
   146c0:	pop	{r4, r5, r6, sl, fp, pc}
   146c4:	push	{r4, r5, fp, lr}
   146c8:	add	fp, sp, #8
   146cc:	cmp	r0, #0
   146d0:	beq	14764 <__assert_fail@plt+0x3004>
   146d4:	mov	r1, #47	; 0x2f
   146d8:	mov	r4, r0
   146dc:	bl	116e8 <strrchr@plt>
   146e0:	cmp	r0, #0
   146e4:	mov	r5, r4
   146e8:	addne	r5, r0, #1
   146ec:	sub	r0, r5, r4
   146f0:	cmp	r0, #7
   146f4:	blt	14748 <__assert_fail@plt+0x2fe8>
   146f8:	movw	r1, #59138	; 0xe702
   146fc:	sub	r0, r5, #7
   14700:	mov	r2, #7
   14704:	movt	r1, #2
   14708:	bl	11730 <strncmp@plt>
   1470c:	cmp	r0, #0
   14710:	bne	14748 <__assert_fail@plt+0x2fe8>
   14714:	movw	r1, #59146	; 0xe70a
   14718:	mov	r0, r5
   1471c:	mov	r2, #3
   14720:	movt	r1, #2
   14724:	bl	11730 <strncmp@plt>
   14728:	cmp	r0, #0
   1472c:	beq	14738 <__assert_fail@plt+0x2fd8>
   14730:	mov	r4, r5
   14734:	b	14748 <__assert_fail@plt+0x2fe8>
   14738:	movw	r0, #61864	; 0xf1a8
   1473c:	add	r4, r5, #3
   14740:	movt	r0, #3
   14744:	str	r4, [r0]
   14748:	movw	r0, #61868	; 0xf1ac
   1474c:	movt	r0, #3
   14750:	str	r4, [r0]
   14754:	movw	r0, #62128	; 0xf2b0
   14758:	movt	r0, #3
   1475c:	str	r4, [r0]
   14760:	pop	{r4, r5, fp, pc}
   14764:	movw	r0, #61880	; 0xf1b8
   14768:	mov	r1, #55	; 0x37
   1476c:	mov	r2, #1
   14770:	movt	r0, #3
   14774:	ldr	r3, [r0]
   14778:	movw	r0, #59082	; 0xe6ca
   1477c:	movt	r0, #2
   14780:	bl	11550 <fwrite@plt>
   14784:	bl	1173c <abort@plt>
   14788:	push	{r4, r5, r6, sl, fp, lr}
   1478c:	add	fp, sp, #16
   14790:	mov	r4, r0
   14794:	movw	r0, #62136	; 0xf2b8
   14798:	movt	r0, #3
   1479c:	cmp	r4, #0
   147a0:	moveq	r4, r0
   147a4:	bl	11640 <__errno_location@plt>
   147a8:	ldr	r6, [r0]
   147ac:	mov	r5, r0
   147b0:	mov	r0, r4
   147b4:	mov	r1, #48	; 0x30
   147b8:	bl	2aa28 <__assert_fail@plt+0x192c8>
   147bc:	str	r6, [r5]
   147c0:	pop	{r4, r5, r6, sl, fp, pc}
   147c4:	movw	r1, #62136	; 0xf2b8
   147c8:	cmp	r0, #0
   147cc:	movt	r1, #3
   147d0:	movne	r1, r0
   147d4:	ldr	r0, [r1]
   147d8:	bx	lr
   147dc:	movw	r2, #62136	; 0xf2b8
   147e0:	cmp	r0, #0
   147e4:	movt	r2, #3
   147e8:	movne	r2, r0
   147ec:	str	r1, [r2]
   147f0:	bx	lr
   147f4:	movw	r3, #62136	; 0xf2b8
   147f8:	cmp	r0, #0
   147fc:	movt	r3, #3
   14800:	movne	r3, r0
   14804:	ubfx	r0, r1, #5, #3
   14808:	and	r1, r1, #31
   1480c:	add	r0, r3, r0, lsl #2
   14810:	ldr	r3, [r0, #8]
   14814:	eor	r2, r2, r3, lsr r1
   14818:	and	r2, r2, #1
   1481c:	eor	r2, r3, r2, lsl r1
   14820:	str	r2, [r0, #8]
   14824:	mov	r0, #1
   14828:	and	r0, r0, r3, lsr r1
   1482c:	bx	lr
   14830:	movw	r2, #62136	; 0xf2b8
   14834:	cmp	r0, #0
   14838:	movt	r2, #3
   1483c:	movne	r2, r0
   14840:	ldr	r0, [r2, #4]
   14844:	str	r1, [r2, #4]
   14848:	bx	lr
   1484c:	movw	r3, #62136	; 0xf2b8
   14850:	cmp	r0, #0
   14854:	movt	r3, #3
   14858:	movne	r3, r0
   1485c:	cmp	r1, #0
   14860:	mov	r0, #10
   14864:	cmpne	r2, #0
   14868:	str	r0, [r3]
   1486c:	bne	1487c <__assert_fail@plt+0x311c>
   14870:	push	{fp, lr}
   14874:	mov	fp, sp
   14878:	bl	1173c <abort@plt>
   1487c:	str	r1, [r3, #40]	; 0x28
   14880:	str	r2, [r3, #44]	; 0x2c
   14884:	bx	lr
   14888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1488c:	add	fp, sp, #28
   14890:	sub	sp, sp, #20
   14894:	mov	r7, r0
   14898:	ldr	r0, [fp, #8]
   1489c:	movw	r5, #62136	; 0xf2b8
   148a0:	mov	r8, r3
   148a4:	mov	r9, r2
   148a8:	mov	sl, r1
   148ac:	movt	r5, #3
   148b0:	cmp	r0, #0
   148b4:	movne	r5, r0
   148b8:	bl	11640 <__errno_location@plt>
   148bc:	mov	r4, r0
   148c0:	ldm	r5, {r0, r1}
   148c4:	ldr	r2, [r5, #40]	; 0x28
   148c8:	ldr	r3, [r5, #44]	; 0x2c
   148cc:	add	r5, r5, #8
   148d0:	ldr	r6, [r4]
   148d4:	stm	sp, {r0, r1, r5}
   148d8:	str	r2, [sp, #12]
   148dc:	str	r3, [sp, #16]
   148e0:	mov	r0, r7
   148e4:	mov	r1, sl
   148e8:	mov	r2, r9
   148ec:	mov	r3, r8
   148f0:	bl	14900 <__assert_fail@plt+0x31a0>
   148f4:	str	r6, [r4]
   148f8:	sub	sp, fp, #28
   148fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14904:	add	fp, sp, #28
   14908:	sub	sp, sp, #156	; 0x9c
   1490c:	str	r0, [sp, #76]	; 0x4c
   14910:	ldr	r0, [fp, #12]
   14914:	mov	r6, r1
   14918:	str	r3, [sp, #84]	; 0x54
   1491c:	str	r2, [fp, #-84]	; 0xffffffac
   14920:	and	r1, r0, #4
   14924:	str	r1, [sp, #24]
   14928:	and	r1, r0, #1
   1492c:	str	r1, [sp, #28]
   14930:	ubfx	r8, r0, #1, #1
   14934:	bl	11568 <__ctype_get_mb_cur_max@plt>
   14938:	str	r0, [sp, #32]
   1493c:	ldr	r0, [fp, #24]
   14940:	ldr	r7, [fp, #8]
   14944:	mov	r1, #0
   14948:	mov	r2, #0
   1494c:	mov	r4, #1
   14950:	str	r1, [sp, #52]	; 0x34
   14954:	str	r0, [sp, #72]	; 0x48
   14958:	ldr	r0, [fp, #20]
   1495c:	str	r0, [sp, #68]	; 0x44
   14960:	mov	r0, #0
   14964:	str	r0, [sp, #48]	; 0x30
   14968:	mov	r0, #0
   1496c:	str	r0, [sp, #92]	; 0x5c
   14970:	mov	r0, #0
   14974:	str	r0, [fp, #-76]	; 0xffffffb4
   14978:	mov	r0, #0
   1497c:	cmp	r7, #10
   14980:	bhi	15c68 <__assert_fail@plt+0x4508>
   14984:	add	r1, pc, #28
   14988:	mov	sl, r6
   1498c:	ldr	r6, [sp, #76]	; 0x4c
   14990:	ldr	ip, [fp, #-84]	; 0xffffffac
   14994:	ldr	lr, [sp, #84]	; 0x54
   14998:	mov	r9, #0
   1499c:	mov	r3, #1
   149a0:	mov	r5, #0
   149a4:	ldr	pc, [r1, r7, lsl #2]
   149a8:	andeq	r4, r1, r8, ror sl
   149ac:			; <UNDEFINED> instruction: 0x00014ab4
   149b0:	andeq	r4, r1, r8, lsl #21
   149b4:	andeq	r4, r1, r0, ror sl
   149b8:	andeq	r4, r1, r8, lsr #21
   149bc:	ldrdeq	r4, [r1], -ip
   149c0:	muleq	r1, r8, sl
   149c4:	andeq	r4, r1, r8, ror #25
   149c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149d0:	andeq	r4, r1, ip, ror ip
   149d4:	mov	r9, r4
   149d8:	movw	r4, #59228	; 0xe75c
   149dc:	mov	r5, r8
   149e0:	mov	r8, r2
   149e4:	mov	r0, #0
   149e8:	mov	r2, #5
   149ec:	movt	r4, #2
   149f0:	mov	r1, r4
   149f4:	bl	114e4 <dcgettext@plt>
   149f8:	cmp	r0, r4
   149fc:	str	r0, [sp, #68]	; 0x44
   14a00:	bne	14b90 <__assert_fail@plt+0x3430>
   14a04:	bl	2d648 <__assert_fail@plt+0x1bee8>
   14a08:	ldrb	r1, [r0]
   14a0c:	and	r1, r1, #223	; 0xdf
   14a10:	cmp	r1, #71	; 0x47
   14a14:	beq	14b5c <__assert_fail@plt+0x33fc>
   14a18:	cmp	r1, #85	; 0x55
   14a1c:	bne	14b74 <__assert_fail@plt+0x3414>
   14a20:	ldrb	r1, [r0, #1]
   14a24:	and	r1, r1, #223	; 0xdf
   14a28:	cmp	r1, #84	; 0x54
   14a2c:	bne	14b74 <__assert_fail@plt+0x3414>
   14a30:	ldrb	r1, [r0, #2]
   14a34:	and	r1, r1, #223	; 0xdf
   14a38:	cmp	r1, #70	; 0x46
   14a3c:	bne	14b74 <__assert_fail@plt+0x3414>
   14a40:	ldrb	r1, [r0, #3]
   14a44:	cmp	r1, #45	; 0x2d
   14a48:	ldrbeq	r1, [r0, #4]
   14a4c:	cmpeq	r1, #56	; 0x38
   14a50:	bne	14b74 <__assert_fail@plt+0x3414>
   14a54:	ldrb	r0, [r0, #5]
   14a58:	cmp	r0, #0
   14a5c:	movw	r0, #59230	; 0xe75e
   14a60:	movt	r0, #2
   14a64:	str	r0, [sp, #68]	; 0x44
   14a68:	bne	14b74 <__assert_fail@plt+0x3414>
   14a6c:	b	14b90 <__assert_fail@plt+0x3430>
   14a70:	mov	r0, #1
   14a74:	b	14ab4 <__assert_fail@plt+0x3354>
   14a78:	mov	r7, #0
   14a7c:	mov	r9, #0
   14a80:	mov	r3, r0
   14a84:	b	14b54 <__assert_fail@plt+0x33f4>
   14a88:	tst	r8, #1
   14a8c:	bne	14ab4 <__assert_fail@plt+0x3354>
   14a90:	mov	r3, r0
   14a94:	b	14b0c <__assert_fail@plt+0x33ac>
   14a98:	mov	r0, #1
   14a9c:	mov	r9, #0
   14aa0:	mov	r7, #5
   14aa4:	b	14af0 <__assert_fail@plt+0x3390>
   14aa8:	mov	r3, #1
   14aac:	tst	r8, #1
   14ab0:	beq	14b0c <__assert_fail@plt+0x33ac>
   14ab4:	mov	r1, #1
   14ab8:	mov	r9, #0
   14abc:	mov	r7, #2
   14ac0:	mov	r3, r0
   14ac4:	mov	r5, #1
   14ac8:	str	r1, [fp, #-76]	; 0xffffffb4
   14acc:	movw	r1, #58246	; 0xe386
   14ad0:	movt	r1, #2
   14ad4:	str	r1, [sp, #92]	; 0x5c
   14ad8:	b	14ce8 <__assert_fail@plt+0x3588>
   14adc:	mov	r7, #5
   14ae0:	tst	r8, #1
   14ae4:	beq	14b2c <__assert_fail@plt+0x33cc>
   14ae8:	mov	r0, #1
   14aec:	mov	r9, #0
   14af0:	str	r0, [fp, #-76]	; 0xffffffb4
   14af4:	movw	r0, #59226	; 0xe75a
   14af8:	mov	r3, #1
   14afc:	mov	r5, #1
   14b00:	movt	r0, #2
   14b04:	str	r0, [sp, #92]	; 0x5c
   14b08:	b	14ce8 <__assert_fail@plt+0x3588>
   14b0c:	cmp	sl, #0
   14b10:	mov	r9, #1
   14b14:	mov	r7, #2
   14b18:	movne	r0, #39	; 0x27
   14b1c:	strbne	r0, [r6]
   14b20:	movw	r0, #58246	; 0xe386
   14b24:	movt	r0, #2
   14b28:	b	14b48 <__assert_fail@plt+0x33e8>
   14b2c:	cmp	sl, #0
   14b30:	mov	r9, #1
   14b34:	mov	r3, #1
   14b38:	movne	r0, #34	; 0x22
   14b3c:	strbne	r0, [r6]
   14b40:	movw	r0, #59226	; 0xe75a
   14b44:	movt	r0, #2
   14b48:	str	r0, [sp, #92]	; 0x5c
   14b4c:	mov	r0, #1
   14b50:	str	r0, [fp, #-76]	; 0xffffffb4
   14b54:	mov	r5, #0
   14b58:	b	14ce8 <__assert_fail@plt+0x3588>
   14b5c:	ldrb	r1, [r0, #1]
   14b60:	and	r1, r1, #223	; 0xdf
   14b64:	cmp	r1, #66	; 0x42
   14b68:	ldrbeq	r1, [r0, #2]
   14b6c:	cmpeq	r1, #49	; 0x31
   14b70:	beq	15a90 <__assert_fail@plt+0x4330>
   14b74:	movw	r0, #58246	; 0xe386
   14b78:	movw	r1, #59226	; 0xe75a
   14b7c:	cmp	r7, #9
   14b80:	movt	r0, #2
   14b84:	movt	r1, #2
   14b88:	moveq	r0, r1
   14b8c:	str	r0, [sp, #68]	; 0x44
   14b90:	movw	r4, #58246	; 0xe386
   14b94:	mov	r0, #0
   14b98:	mov	r2, #5
   14b9c:	movt	r4, #2
   14ba0:	mov	r1, r4
   14ba4:	bl	114e4 <dcgettext@plt>
   14ba8:	cmp	r0, r4
   14bac:	str	r0, [sp, #72]	; 0x48
   14bb0:	beq	14bc0 <__assert_fail@plt+0x3460>
   14bb4:	mov	r4, r9
   14bb8:	mov	r2, r8
   14bbc:	b	14c78 <__assert_fail@plt+0x3518>
   14bc0:	bl	2d648 <__assert_fail@plt+0x1bee8>
   14bc4:	ldrb	r1, [r0]
   14bc8:	mov	r4, r9
   14bcc:	and	r1, r1, #223	; 0xdf
   14bd0:	cmp	r1, #71	; 0x47
   14bd4:	beq	14c30 <__assert_fail@plt+0x34d0>
   14bd8:	cmp	r1, #85	; 0x55
   14bdc:	mov	r2, r8
   14be0:	bne	14c58 <__assert_fail@plt+0x34f8>
   14be4:	ldrb	r1, [r0, #1]
   14be8:	and	r1, r1, #223	; 0xdf
   14bec:	cmp	r1, #84	; 0x54
   14bf0:	bne	14c58 <__assert_fail@plt+0x34f8>
   14bf4:	ldrb	r1, [r0, #2]
   14bf8:	and	r1, r1, #223	; 0xdf
   14bfc:	cmp	r1, #70	; 0x46
   14c00:	ldrbeq	r1, [r0, #3]
   14c04:	cmpeq	r1, #45	; 0x2d
   14c08:	bne	14c58 <__assert_fail@plt+0x34f8>
   14c0c:	ldrb	r1, [r0, #4]
   14c10:	cmp	r1, #56	; 0x38
   14c14:	ldrbeq	r0, [r0, #5]
   14c18:	cmpeq	r0, #0
   14c1c:	bne	14c58 <__assert_fail@plt+0x34f8>
   14c20:	movw	r0, #59234	; 0xe762
   14c24:	movt	r0, #2
   14c28:	str	r0, [sp, #72]	; 0x48
   14c2c:	b	14c78 <__assert_fail@plt+0x3518>
   14c30:	ldrb	r1, [r0, #1]
   14c34:	mov	r2, r8
   14c38:	and	r1, r1, #223	; 0xdf
   14c3c:	cmp	r1, #66	; 0x42
   14c40:	bne	14c58 <__assert_fail@plt+0x34f8>
   14c44:	ldrb	r1, [r0, #2]
   14c48:	cmp	r1, #49	; 0x31
   14c4c:	ldrbeq	r1, [r0, #3]
   14c50:	cmpeq	r1, #56	; 0x38
   14c54:	beq	15ad4 <__assert_fail@plt+0x4374>
   14c58:	movw	r0, #58246	; 0xe386
   14c5c:	cmp	r7, #9
   14c60:	movt	r0, #2
   14c64:	mov	r1, r0
   14c68:	movw	r0, #59226	; 0xe75a
   14c6c:	movt	r0, #2
   14c70:	moveq	r1, r0
   14c74:	str	r1, [sp, #72]	; 0x48
   14c78:	mov	r8, r5
   14c7c:	mov	r9, #0
   14c80:	tst	r8, #1
   14c84:	mov	r5, r8
   14c88:	str	r2, [fp, #-48]	; 0xffffffd0
   14c8c:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c90:	ldr	r0, [sp, #68]	; 0x44
   14c94:	ldrb	r0, [r0]
   14c98:	cmp	r0, #0
   14c9c:	beq	14cc4 <__assert_fail@plt+0x3564>
   14ca0:	ldr	r1, [sp, #68]	; 0x44
   14ca4:	mov	r9, #0
   14ca8:	add	r1, r1, #1
   14cac:	cmp	r9, sl
   14cb0:	strbcc	r0, [r6, r9]
   14cb4:	ldrb	r0, [r1, r9]
   14cb8:	add	r9, r9, #1
   14cbc:	cmp	r0, #0
   14cc0:	bne	14cac <__assert_fail@plt+0x354c>
   14cc4:	ldr	r8, [sp, #72]	; 0x48
   14cc8:	mov	r0, r8
   14ccc:	bl	11628 <strlen@plt>
   14cd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14cd4:	ldr	lr, [sp, #84]	; 0x54
   14cd8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14cdc:	str	r0, [fp, #-76]	; 0xffffffb4
   14ce0:	str	r8, [sp, #92]	; 0x5c
   14ce4:	mov	r3, #1
   14ce8:	ldr	r0, [fp, #16]
   14cec:	str	r7, [fp, #-64]	; 0xffffffc0
   14cf0:	str	r5, [fp, #-72]	; 0xffffffb8
   14cf4:	str	r3, [sp, #80]	; 0x50
   14cf8:	cmp	r0, #0
   14cfc:	movwne	r0, #1
   14d00:	and	r0, r0, r5
   14d04:	str	r0, [fp, #-88]	; 0xffffffa8
   14d08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14d0c:	cmp	r0, #0
   14d10:	movwne	r0, #1
   14d14:	subs	r7, r7, #2
   14d18:	and	r1, r0, r5
   14d1c:	str	r7, [fp, #-80]	; 0xffffffb0
   14d20:	and	r1, r3, r1
   14d24:	str	r1, [sp, #40]	; 0x28
   14d28:	clz	r1, r7
   14d2c:	lsr	r1, r1, #5
   14d30:	and	r1, r1, r5
   14d34:	eor	r5, r5, #1
   14d38:	str	r1, [sp, #36]	; 0x24
   14d3c:	mov	r1, r7
   14d40:	str	r5, [sp, #88]	; 0x58
   14d44:	mov	r7, #0
   14d48:	movwne	r1, #1
   14d4c:	orr	r5, r1, r5
   14d50:	and	r1, r1, r3
   14d54:	and	r0, r0, r1
   14d58:	str	r5, [sp, #60]	; 0x3c
   14d5c:	str	r1, [fp, #-68]	; 0xffffffbc
   14d60:	str	r0, [fp, #-60]	; 0xffffffc4
   14d64:	eor	r0, r3, #1
   14d68:	str	r0, [sp, #44]	; 0x2c
   14d6c:	cmn	lr, #1
   14d70:	beq	14d80 <__assert_fail@plt+0x3620>
   14d74:	cmp	r7, lr
   14d78:	bne	14d8c <__assert_fail@plt+0x362c>
   14d7c:	b	15a04 <__assert_fail@plt+0x42a4>
   14d80:	ldrb	r0, [ip, r7]
   14d84:	cmp	r0, #0
   14d88:	beq	15a0c <__assert_fail@plt+0x42ac>
   14d8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14d90:	mov	r8, #0
   14d94:	str	r4, [fp, #-52]	; 0xffffffcc
   14d98:	str	r2, [fp, #-48]	; 0xffffffd0
   14d9c:	cmp	r0, #0
   14da0:	beq	14dd4 <__assert_fail@plt+0x3674>
   14da4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14da8:	add	r4, r7, r0
   14dac:	cmp	r0, #2
   14db0:	bcc	14dcc <__assert_fail@plt+0x366c>
   14db4:	cmn	lr, #1
   14db8:	bne	14dcc <__assert_fail@plt+0x366c>
   14dbc:	mov	r0, ip
   14dc0:	bl	11628 <strlen@plt>
   14dc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   14dc8:	mov	lr, r0
   14dcc:	cmp	r4, lr
   14dd0:	bls	14dec <__assert_fail@plt+0x368c>
   14dd4:	mov	r0, #0
   14dd8:	str	r0, [fp, #-56]	; 0xffffffc8
   14ddc:	ldrb	r5, [ip, r7]
   14de0:	cmp	r5, #126	; 0x7e
   14de4:	bls	14e3c <__assert_fail@plt+0x36dc>
   14de8:	b	15244 <__assert_fail@plt+0x3ae4>
   14dec:	ldr	r1, [sp, #92]	; 0x5c
   14df0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14df4:	add	r0, ip, r7
   14df8:	mov	r4, lr
   14dfc:	bl	114d8 <memcmp@plt>
   14e00:	ldr	r2, [sp, #88]	; 0x58
   14e04:	cmp	r0, #0
   14e08:	mov	r1, r0
   14e0c:	movwne	r1, #1
   14e10:	orr	r1, r1, r2
   14e14:	tst	r1, #1
   14e18:	beq	15b18 <__assert_fail@plt+0x43b8>
   14e1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e20:	clz	r0, r0
   14e24:	mov	lr, r4
   14e28:	lsr	r0, r0, #5
   14e2c:	str	r0, [fp, #-56]	; 0xffffffc8
   14e30:	ldrb	r5, [ip, r7]
   14e34:	cmp	r5, #126	; 0x7e
   14e38:	bhi	15244 <__assert_fail@plt+0x3ae4>
   14e3c:	add	r3, pc, #16
   14e40:	mov	r4, #1
   14e44:	mov	r2, #110	; 0x6e
   14e48:	mov	r0, #97	; 0x61
   14e4c:	mov	r1, #0
   14e50:	ldr	pc, [r3, r5, lsl #2]
   14e54:	andeq	r5, r1, r4, lsr #2
   14e58:	andeq	r5, r1, r4, asr #4
   14e5c:	andeq	r5, r1, r4, asr #4
   14e60:	andeq	r5, r1, r4, asr #4
   14e64:	andeq	r5, r1, r4, asr #4
   14e68:	andeq	r5, r1, r4, asr #4
   14e6c:	andeq	r5, r1, r4, asr #4
   14e70:	andeq	r5, r1, r0, lsr #6
   14e74:	andeq	r5, r1, r4, lsl #2
   14e78:	andeq	r5, r1, ip, ror #1
   14e7c:	andeq	r5, r1, r0, lsl r1
   14e80:	andeq	r5, r1, r0, lsr #3
   14e84:	andeq	r5, r1, r4, ror #1
   14e88:	andeq	r5, r1, ip, lsl #2
   14e8c:	andeq	r5, r1, r4, asr #4
   14e90:	andeq	r5, r1, r4, asr #4
   14e94:	andeq	r5, r1, r4, asr #4
   14e98:	andeq	r5, r1, r4, asr #4
   14e9c:	andeq	r5, r1, r4, asr #4
   14ea0:	andeq	r5, r1, r4, asr #4
   14ea4:	andeq	r5, r1, r4, asr #4
   14ea8:	andeq	r5, r1, r4, asr #4
   14eac:	andeq	r5, r1, r4, asr #4
   14eb0:	andeq	r5, r1, r4, asr #4
   14eb4:	andeq	r5, r1, r4, asr #4
   14eb8:	andeq	r5, r1, r4, asr #4
   14ebc:	andeq	r5, r1, r4, asr #4
   14ec0:	andeq	r5, r1, r4, asr #4
   14ec4:	andeq	r5, r1, r4, asr #4
   14ec8:	andeq	r5, r1, r4, asr #4
   14ecc:	andeq	r5, r1, r4, asr #4
   14ed0:	andeq	r5, r1, r4, asr #4
   14ed4:	muleq	r1, ip, r2
   14ed8:	andeq	r5, r1, r0, lsr #5
   14edc:	andeq	r5, r1, r0, lsr #5
   14ee0:	andeq	r5, r1, r0, ror r0
   14ee4:	andeq	r5, r1, r0, lsr #5
   14ee8:	andeq	r5, r1, r0, asr r0
   14eec:	andeq	r5, r1, r0, lsr #5
   14ef0:	andeq	r5, r1, r8, lsr #3
   14ef4:	andeq	r5, r1, r0, lsr #5
   14ef8:	andeq	r5, r1, r0, lsr #5
   14efc:	andeq	r5, r1, r0, lsr #5
   14f00:	andeq	r5, r1, r0, asr r0
   14f04:	andeq	r5, r1, r0, asr r0
   14f08:	andeq	r5, r1, r0, asr r0
   14f0c:	andeq	r5, r1, r0, asr r0
   14f10:	andeq	r5, r1, r0, asr r0
   14f14:	andeq	r5, r1, r0, asr r0
   14f18:	andeq	r5, r1, r0, asr r0
   14f1c:	andeq	r5, r1, r0, asr r0
   14f20:	andeq	r5, r1, r0, asr r0
   14f24:	andeq	r5, r1, r0, asr r0
   14f28:	andeq	r5, r1, r0, asr r0
   14f2c:	andeq	r5, r1, r0, asr r0
   14f30:	andeq	r5, r1, r0, asr r0
   14f34:	andeq	r5, r1, r0, asr r0
   14f38:	andeq	r5, r1, r0, asr r0
   14f3c:	andeq	r5, r1, r0, asr r0
   14f40:	andeq	r5, r1, r0, lsr #5
   14f44:	andeq	r5, r1, r0, lsr #5
   14f48:	andeq	r5, r1, r0, lsr #5
   14f4c:	andeq	r5, r1, r0, lsr #5
   14f50:	andeq	r5, r1, r4, ror #2
   14f54:	andeq	r5, r1, r4, asr #4
   14f58:	andeq	r5, r1, r0, asr r0
   14f5c:	andeq	r5, r1, r0, asr r0
   14f60:	andeq	r5, r1, r0, asr r0
   14f64:	andeq	r5, r1, r0, asr r0
   14f68:	andeq	r5, r1, r0, asr r0
   14f6c:	andeq	r5, r1, r0, asr r0
   14f70:	andeq	r5, r1, r0, asr r0
   14f74:	andeq	r5, r1, r0, asr r0
   14f78:	andeq	r5, r1, r0, asr r0
   14f7c:	andeq	r5, r1, r0, asr r0
   14f80:	andeq	r5, r1, r0, asr r0
   14f84:	andeq	r5, r1, r0, asr r0
   14f88:	andeq	r5, r1, r0, asr r0
   14f8c:	andeq	r5, r1, r0, asr r0
   14f90:	andeq	r5, r1, r0, asr r0
   14f94:	andeq	r5, r1, r0, asr r0
   14f98:	andeq	r5, r1, r0, asr r0
   14f9c:	andeq	r5, r1, r0, asr r0
   14fa0:	andeq	r5, r1, r0, asr r0
   14fa4:	andeq	r5, r1, r0, asr r0
   14fa8:	andeq	r5, r1, r0, asr r0
   14fac:	andeq	r5, r1, r0, asr r0
   14fb0:	andeq	r5, r1, r0, asr r0
   14fb4:	andeq	r5, r1, r0, asr r0
   14fb8:	andeq	r5, r1, r0, asr r0
   14fbc:	andeq	r5, r1, r0, asr r0
   14fc0:	andeq	r5, r1, r0, lsr #5
   14fc4:	strheq	r5, [r1], -r0
   14fc8:	andeq	r5, r1, r0, asr r0
   14fcc:	andeq	r5, r1, r0, lsr #5
   14fd0:	andeq	r5, r1, r0, asr r0
   14fd4:	andeq	r5, r1, r0, lsr #5
   14fd8:	andeq	r5, r1, r0, asr r0
   14fdc:	andeq	r5, r1, r0, asr r0
   14fe0:	andeq	r5, r1, r0, asr r0
   14fe4:	andeq	r5, r1, r0, asr r0
   14fe8:	andeq	r5, r1, r0, asr r0
   14fec:	andeq	r5, r1, r0, asr r0
   14ff0:	andeq	r5, r1, r0, asr r0
   14ff4:	andeq	r5, r1, r0, asr r0
   14ff8:	andeq	r5, r1, r0, asr r0
   14ffc:	andeq	r5, r1, r0, asr r0
   15000:	andeq	r5, r1, r0, asr r0
   15004:	andeq	r5, r1, r0, asr r0
   15008:	andeq	r5, r1, r0, asr r0
   1500c:	andeq	r5, r1, r0, asr r0
   15010:	andeq	r5, r1, r0, asr r0
   15014:	andeq	r5, r1, r0, asr r0
   15018:	andeq	r5, r1, r0, asr r0
   1501c:	andeq	r5, r1, r0, asr r0
   15020:	andeq	r5, r1, r0, asr r0
   15024:	andeq	r5, r1, r0, asr r0
   15028:	andeq	r5, r1, r0, asr r0
   1502c:	andeq	r5, r1, r0, asr r0
   15030:	andeq	r5, r1, r0, asr r0
   15034:	andeq	r5, r1, r0, asr r0
   15038:	andeq	r5, r1, r0, asr r0
   1503c:	andeq	r5, r1, r0, asr r0
   15040:	muleq	r1, r0, r0
   15044:	andeq	r5, r1, r0, lsr #5
   15048:	muleq	r1, r0, r0
   1504c:	andeq	r5, r1, r0, ror r0
   15050:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15054:	cmp	r0, #0
   15058:	beq	15334 <__assert_fail@plt+0x3bd4>
   1505c:	ldr	r0, [fp, #16]
   15060:	cmp	r0, #0
   15064:	mov	r0, r5
   15068:	bne	15344 <__assert_fail@plt+0x3be4>
   1506c:	b	15364 <__assert_fail@plt+0x3c04>
   15070:	mov	r4, #0
   15074:	cmp	r7, #0
   15078:	beq	1529c <__assert_fail@plt+0x3b3c>
   1507c:	mov	r8, #0
   15080:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15084:	cmp	r0, #0
   15088:	bne	1505c <__assert_fail@plt+0x38fc>
   1508c:	b	15334 <__assert_fail@plt+0x3bd4>
   15090:	mov	r4, #0
   15094:	cmn	lr, #1
   15098:	beq	15274 <__assert_fail@plt+0x3b14>
   1509c:	cmp	r7, #0
   150a0:	bne	1507c <__assert_fail@plt+0x391c>
   150a4:	cmp	lr, #1
   150a8:	beq	1529c <__assert_fail@plt+0x3b3c>
   150ac:	b	1507c <__assert_fail@plt+0x391c>
   150b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   150b4:	cmp	r0, #2
   150b8:	bne	152cc <__assert_fail@plt+0x3b6c>
   150bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   150c0:	tst	r0, #1
   150c4:	bne	15b2c <__assert_fail@plt+0x43cc>
   150c8:	mov	r8, #0
   150cc:	mov	r0, #92	; 0x5c
   150d0:	mov	r4, #0
   150d4:	cmp	r8, #0
   150d8:	beq	152ec <__assert_fail@plt+0x3b8c>
   150dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   150e0:	b	153e0 <__assert_fail@plt+0x3c80>
   150e4:	mov	r0, #102	; 0x66
   150e8:	b	15320 <__assert_fail@plt+0x3bc0>
   150ec:	mov	r2, #116	; 0x74
   150f0:	ldr	r0, [sp, #60]	; 0x3c
   150f4:	tst	r0, #1
   150f8:	mov	r0, r2
   150fc:	bne	15320 <__assert_fail@plt+0x3bc0>
   15100:	b	15b2c <__assert_fail@plt+0x43cc>
   15104:	mov	r0, #98	; 0x62
   15108:	b	15320 <__assert_fail@plt+0x3bc0>
   1510c:	mov	r2, #114	; 0x72
   15110:	ldr	r0, [sp, #60]	; 0x3c
   15114:	tst	r0, #1
   15118:	mov	r0, r2
   1511c:	bne	15320 <__assert_fail@plt+0x3bc0>
   15120:	b	15b2c <__assert_fail@plt+0x43cc>
   15124:	ldr	r0, [sp, #80]	; 0x50
   15128:	tst	r0, #1
   1512c:	beq	15408 <__assert_fail@plt+0x3ca8>
   15130:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15134:	tst	r0, #1
   15138:	bne	15c54 <__assert_fail@plt+0x44f4>
   1513c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15140:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15144:	cmp	r0, #2
   15148:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1514c:	movwne	r0, #1
   15150:	orr	r0, r0, r2
   15154:	tst	r0, #1
   15158:	beq	15700 <__assert_fail@plt+0x3fa0>
   1515c:	mov	r0, r9
   15160:	b	15734 <__assert_fail@plt+0x3fd4>
   15164:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15168:	mov	r8, #0
   1516c:	mov	r5, #63	; 0x3f
   15170:	cmp	r0, #5
   15174:	beq	155bc <__assert_fail@plt+0x3e5c>
   15178:	cmp	r0, #2
   1517c:	bne	1566c <__assert_fail@plt+0x3f0c>
   15180:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15184:	tst	r0, #1
   15188:	bne	15b2c <__assert_fail@plt+0x43cc>
   1518c:	mov	r4, #0
   15190:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15194:	cmp	r0, #0
   15198:	bne	1505c <__assert_fail@plt+0x38fc>
   1519c:	b	15334 <__assert_fail@plt+0x3bd4>
   151a0:	mov	r0, #118	; 0x76
   151a4:	b	15320 <__assert_fail@plt+0x3bc0>
   151a8:	mov	r0, #1
   151ac:	mov	r5, #39	; 0x27
   151b0:	str	r0, [sp, #52]	; 0x34
   151b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   151b8:	cmp	r0, #2
   151bc:	bne	15230 <__assert_fail@plt+0x3ad0>
   151c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   151c4:	tst	r0, #1
   151c8:	bne	15b2c <__assert_fail@plt+0x43cc>
   151cc:	ldr	r2, [sp, #48]	; 0x30
   151d0:	clz	r1, sl
   151d4:	mov	r8, #0
   151d8:	lsr	r1, r1, #5
   151dc:	cmp	r2, #0
   151e0:	mov	r0, r2
   151e4:	movwne	r0, #1
   151e8:	orrs	r0, r0, r1
   151ec:	moveq	r2, sl
   151f0:	moveq	sl, r0
   151f4:	cmp	r9, sl
   151f8:	str	r2, [sp, #48]	; 0x30
   151fc:	movcc	r0, #39	; 0x27
   15200:	strbcc	r0, [r6, r9]
   15204:	add	r0, r9, #1
   15208:	cmp	r0, sl
   1520c:	movcc	r1, #92	; 0x5c
   15210:	strbcc	r1, [r6, r0]
   15214:	add	r0, r9, #2
   15218:	add	r9, r9, #3
   1521c:	cmp	r0, sl
   15220:	movcc	r1, #39	; 0x27
   15224:	strbcc	r1, [r6, r0]
   15228:	mov	r0, #0
   1522c:	str	r0, [fp, #-48]	; 0xffffffd0
   15230:	mov	r4, #1
   15234:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15238:	cmp	r0, #0
   1523c:	bne	1505c <__assert_fail@plt+0x38fc>
   15240:	b	15334 <__assert_fail@plt+0x3bd4>
   15244:	ldr	r0, [sp, #32]
   15248:	cmp	r0, #1
   1524c:	bne	15438 <__assert_fail@plt+0x3cd8>
   15250:	str	lr, [sp, #84]	; 0x54
   15254:	bl	11610 <__ctype_b_loc@plt>
   15258:	ldr	r0, [r0]
   1525c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15260:	mov	r1, #1
   15264:	add	r0, r0, r5, lsl #1
   15268:	ldrb	r0, [r0, #1]
   1526c:	ubfx	r4, r0, #6, #1
   15270:	b	15830 <__assert_fail@plt+0x40d0>
   15274:	cmp	r7, #0
   15278:	ldrbeq	r0, [ip, #1]
   1527c:	cmpeq	r0, #0
   15280:	beq	1529c <__assert_fail@plt+0x3b3c>
   15284:	mvn	lr, #0
   15288:	mov	r8, #0
   1528c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15290:	cmp	r0, #0
   15294:	bne	1505c <__assert_fail@plt+0x38fc>
   15298:	b	15334 <__assert_fail@plt+0x3bd4>
   1529c:	mov	r1, #1
   152a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   152a4:	cmp	r0, #2
   152a8:	bne	152b8 <__assert_fail@plt+0x3b58>
   152ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   152b0:	tst	r0, #1
   152b4:	bne	15b2c <__assert_fail@plt+0x43cc>
   152b8:	mov	r4, r1
   152bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   152c0:	cmp	r0, #0
   152c4:	bne	1505c <__assert_fail@plt+0x38fc>
   152c8:	b	15334 <__assert_fail@plt+0x3bd4>
   152cc:	ldr	r1, [sp, #40]	; 0x28
   152d0:	mov	r8, #0
   152d4:	mov	r0, #92	; 0x5c
   152d8:	cmp	r1, #0
   152dc:	beq	15320 <__assert_fail@plt+0x3bc0>
   152e0:	mov	r4, #0
   152e4:	cmp	r8, #0
   152e8:	bne	150dc <__assert_fail@plt+0x397c>
   152ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   152f0:	tst	r2, #1
   152f4:	beq	153e0 <__assert_fail@plt+0x3c80>
   152f8:	cmp	r9, sl
   152fc:	movcc	r1, #39	; 0x27
   15300:	strbcc	r1, [r6, r9]
   15304:	add	r1, r9, #1
   15308:	add	r9, r9, #2
   1530c:	cmp	r1, sl
   15310:	movcc	r2, #39	; 0x27
   15314:	strbcc	r2, [r6, r1]
   15318:	mov	r2, #0
   1531c:	b	153e0 <__assert_fail@plt+0x3c80>
   15320:	ldr	r1, [sp, #80]	; 0x50
   15324:	mov	r4, #0
   15328:	mov	r8, #0
   1532c:	tst	r1, #1
   15330:	bne	15370 <__assert_fail@plt+0x3c10>
   15334:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15338:	cmp	r0, #0
   1533c:	mov	r0, r5
   15340:	beq	15364 <__assert_fail@plt+0x3c04>
   15344:	ldr	r1, [fp, #16]
   15348:	ubfx	r0, r5, #5, #3
   1534c:	mov	r2, #1
   15350:	ldr	r0, [r1, r0, lsl #2]
   15354:	and	r1, r5, #31
   15358:	tst	r0, r2, lsl r1
   1535c:	mov	r0, r5
   15360:	bne	15370 <__assert_fail@plt+0x3c10>
   15364:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15368:	cmp	r1, #0
   1536c:	beq	157c8 <__assert_fail@plt+0x4068>
   15370:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15374:	tst	r1, #1
   15378:	bne	15b0c <__assert_fail@plt+0x43ac>
   1537c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15380:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15384:	cmp	r1, #2
   15388:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1538c:	movwne	r1, #1
   15390:	orr	r1, r1, r2
   15394:	tst	r1, #1
   15398:	bne	153d0 <__assert_fail@plt+0x3c70>
   1539c:	cmp	r9, sl
   153a0:	movcc	r1, #39	; 0x27
   153a4:	strbcc	r1, [r6, r9]
   153a8:	add	r1, r9, #1
   153ac:	cmp	r1, sl
   153b0:	movcc	r2, #36	; 0x24
   153b4:	strbcc	r2, [r6, r1]
   153b8:	add	r1, r9, #2
   153bc:	add	r9, r9, #3
   153c0:	cmp	r1, sl
   153c4:	movcc	r2, #39	; 0x27
   153c8:	strbcc	r2, [r6, r1]
   153cc:	mov	r2, #1
   153d0:	cmp	r9, sl
   153d4:	movcc	r1, #92	; 0x5c
   153d8:	strbcc	r1, [r6, r9]
   153dc:	add	r9, r9, #1
   153e0:	cmp	r9, sl
   153e4:	add	r7, r7, #1
   153e8:	strbcc	r0, [r6, r9]
   153ec:	ldr	r0, [fp, #-52]	; 0xffffffcc
   153f0:	add	r9, r9, #1
   153f4:	and	r0, r0, r4
   153f8:	mov	r4, r0
   153fc:	cmn	lr, #1
   15400:	bne	14d74 <__assert_fail@plt+0x3614>
   15404:	b	14d80 <__assert_fail@plt+0x3620>
   15408:	ldr	r0, [sp, #28]
   1540c:	mov	r4, #0
   15410:	mov	r8, #0
   15414:	mov	r5, #0
   15418:	cmp	r0, #0
   1541c:	beq	15334 <__assert_fail@plt+0x3bd4>
   15420:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15424:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15428:	add	r7, r7, #1
   1542c:	cmn	lr, #1
   15430:	bne	14d74 <__assert_fail@plt+0x3614>
   15434:	b	14d80 <__assert_fail@plt+0x3620>
   15438:	mov	r0, #0
   1543c:	cmn	lr, #1
   15440:	str	r0, [fp, #-36]	; 0xffffffdc
   15444:	str	r0, [fp, #-40]	; 0xffffffd8
   15448:	bne	1545c <__assert_fail@plt+0x3cfc>
   1544c:	mov	r0, ip
   15450:	bl	11628 <strlen@plt>
   15454:	ldr	ip, [fp, #-84]	; 0xffffffac
   15458:	mov	lr, r0
   1545c:	ldr	r0, [sp, #36]	; 0x24
   15460:	str	sl, [sp, #56]	; 0x38
   15464:	str	lr, [sp, #84]	; 0x54
   15468:	cmp	r0, #0
   1546c:	beq	15684 <__assert_fail@plt+0x3f24>
   15470:	add	r0, ip, r7
   15474:	mov	r4, #1
   15478:	mov	r6, #0
   1547c:	sub	sl, fp, #40	; 0x28
   15480:	str	r0, [sp, #20]
   15484:	str	r6, [sp, #64]	; 0x40
   15488:	add	r6, r6, r7
   1548c:	sub	r0, fp, #44	; 0x2c
   15490:	mov	r3, sl
   15494:	add	r1, ip, r6
   15498:	sub	r2, lr, r6
   1549c:	bl	2d680 <__assert_fail@plt+0x1bf20>
   154a0:	cmn	r0, #2
   154a4:	beq	157e0 <__assert_fail@plt+0x4080>
   154a8:	ldr	sl, [sp, #56]	; 0x38
   154ac:	cmn	r0, #1
   154b0:	beq	157d4 <__assert_fail@plt+0x4074>
   154b4:	cmp	r0, #0
   154b8:	beq	157d8 <__assert_fail@plt+0x4078>
   154bc:	cmp	r0, #2
   154c0:	bcc	15580 <__assert_fail@plt+0x3e20>
   154c4:	ldr	r1, [sp, #64]	; 0x40
   154c8:	ldr	r2, [sp, #20]
   154cc:	add	r1, r2, r1
   154d0:	mov	r2, #1
   154d4:	ldrb	r3, [r1, r2]
   154d8:	sub	r3, r3, #91	; 0x5b
   154dc:	cmp	r3, #33	; 0x21
   154e0:	bhi	15574 <__assert_fail@plt+0x3e14>
   154e4:	add	r6, pc, #0
   154e8:	ldr	pc, [r6, r3, lsl #2]
   154ec:	andeq	r5, r1, r8, lsr fp
   154f0:	andeq	r5, r1, r8, lsr fp
   154f4:	andeq	r5, r1, r4, ror r5
   154f8:	andeq	r5, r1, r8, lsr fp
   154fc:	andeq	r5, r1, r4, ror r5
   15500:	andeq	r5, r1, r8, lsr fp
   15504:	andeq	r5, r1, r4, ror r5
   15508:	andeq	r5, r1, r4, ror r5
   1550c:	andeq	r5, r1, r4, ror r5
   15510:	andeq	r5, r1, r4, ror r5
   15514:	andeq	r5, r1, r4, ror r5
   15518:	andeq	r5, r1, r4, ror r5
   1551c:	andeq	r5, r1, r4, ror r5
   15520:	andeq	r5, r1, r4, ror r5
   15524:	andeq	r5, r1, r4, ror r5
   15528:	andeq	r5, r1, r4, ror r5
   1552c:	andeq	r5, r1, r4, ror r5
   15530:	andeq	r5, r1, r4, ror r5
   15534:	andeq	r5, r1, r4, ror r5
   15538:	andeq	r5, r1, r4, ror r5
   1553c:	andeq	r5, r1, r4, ror r5
   15540:	andeq	r5, r1, r4, ror r5
   15544:	andeq	r5, r1, r4, ror r5
   15548:	andeq	r5, r1, r4, ror r5
   1554c:	andeq	r5, r1, r4, ror r5
   15550:	andeq	r5, r1, r4, ror r5
   15554:	andeq	r5, r1, r4, ror r5
   15558:	andeq	r5, r1, r4, ror r5
   1555c:	andeq	r5, r1, r4, ror r5
   15560:	andeq	r5, r1, r4, ror r5
   15564:	andeq	r5, r1, r4, ror r5
   15568:	andeq	r5, r1, r4, ror r5
   1556c:	andeq	r5, r1, r4, ror r5
   15570:	andeq	r5, r1, r8, lsr fp
   15574:	add	r2, r2, #1
   15578:	cmp	r2, r0
   1557c:	bcc	154d4 <__assert_fail@plt+0x3d74>
   15580:	ldr	r6, [sp, #64]	; 0x40
   15584:	add	r6, r0, r6
   15588:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1558c:	bl	11538 <iswprint@plt>
   15590:	cmp	r0, #0
   15594:	sub	sl, fp, #40	; 0x28
   15598:	movwne	r0, #1
   1559c:	and	r4, r4, r0
   155a0:	mov	r0, sl
   155a4:	bl	114b4 <mbsinit@plt>
   155a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   155ac:	ldr	lr, [sp, #84]	; 0x54
   155b0:	cmp	r0, #0
   155b4:	beq	15484 <__assert_fail@plt+0x3d24>
   155b8:	b	15824 <__assert_fail@plt+0x40c4>
   155bc:	ldr	r0, [sp, #24]
   155c0:	cmp	r0, #0
   155c4:	beq	1566c <__assert_fail@plt+0x3f0c>
   155c8:	add	r0, r7, #2
   155cc:	cmp	r0, lr
   155d0:	bcs	1566c <__assert_fail@plt+0x3f0c>
   155d4:	add	r1, ip, r7
   155d8:	ldrb	r1, [r1, #1]
   155dc:	cmp	r1, #63	; 0x3f
   155e0:	bne	1566c <__assert_fail@plt+0x3f0c>
   155e4:	ldrb	r5, [ip, r0]
   155e8:	sub	r1, r5, #33	; 0x21
   155ec:	cmp	r1, #29
   155f0:	bhi	1566c <__assert_fail@plt+0x3f0c>
   155f4:	movw	r3, #20929	; 0x51c1
   155f8:	mov	r2, #1
   155fc:	movt	r3, #14336	; 0x3800
   15600:	tst	r3, r2, lsl r1
   15604:	beq	1566c <__assert_fail@plt+0x3f0c>
   15608:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1560c:	tst	r1, #1
   15610:	bne	15c5c <__assert_fail@plt+0x44fc>
   15614:	cmp	r9, sl
   15618:	mov	r7, r0
   1561c:	mov	r4, #0
   15620:	movcc	r1, #63	; 0x3f
   15624:	strbcc	r1, [r6, r9]
   15628:	add	r1, r9, #1
   1562c:	cmp	r1, sl
   15630:	movcc	r2, #34	; 0x22
   15634:	strbcc	r2, [r6, r1]
   15638:	add	r1, r9, #2
   1563c:	cmp	r1, sl
   15640:	movcc	r2, #34	; 0x22
   15644:	strbcc	r2, [r6, r1]
   15648:	add	r1, r9, #3
   1564c:	add	r9, r9, #4
   15650:	cmp	r1, sl
   15654:	movcc	r2, #63	; 0x3f
   15658:	strbcc	r2, [r6, r1]
   1565c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15660:	cmp	r0, #0
   15664:	bne	1505c <__assert_fail@plt+0x38fc>
   15668:	b	15334 <__assert_fail@plt+0x3bd4>
   1566c:	mov	r5, #63	; 0x3f
   15670:	mov	r4, #0
   15674:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15678:	cmp	r0, #0
   1567c:	bne	1505c <__assert_fail@plt+0x38fc>
   15680:	b	15334 <__assert_fail@plt+0x3bd4>
   15684:	mov	r4, #1
   15688:	mov	r6, #0
   1568c:	sub	sl, fp, #40	; 0x28
   15690:	str	r6, [sp, #64]	; 0x40
   15694:	add	r6, r6, r7
   15698:	sub	r0, fp, #44	; 0x2c
   1569c:	mov	r3, sl
   156a0:	add	r1, ip, r6
   156a4:	sub	r2, lr, r6
   156a8:	bl	2d680 <__assert_fail@plt+0x1bf20>
   156ac:	cmn	r0, #2
   156b0:	beq	157e0 <__assert_fail@plt+0x4080>
   156b4:	cmn	r0, #1
   156b8:	beq	157d4 <__assert_fail@plt+0x4074>
   156bc:	ldr	r6, [sp, #64]	; 0x40
   156c0:	cmp	r0, #0
   156c4:	beq	15820 <__assert_fail@plt+0x40c0>
   156c8:	add	r6, r0, r6
   156cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   156d0:	bl	11538 <iswprint@plt>
   156d4:	cmp	r0, #0
   156d8:	sub	sl, fp, #40	; 0x28
   156dc:	movwne	r0, #1
   156e0:	and	r4, r4, r0
   156e4:	mov	r0, sl
   156e8:	bl	114b4 <mbsinit@plt>
   156ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   156f0:	ldr	lr, [sp, #84]	; 0x54
   156f4:	cmp	r0, #0
   156f8:	beq	15690 <__assert_fail@plt+0x3f30>
   156fc:	b	15824 <__assert_fail@plt+0x40c4>
   15700:	cmp	r9, sl
   15704:	mov	r2, #1
   15708:	movcc	r0, #39	; 0x27
   1570c:	strbcc	r0, [r6, r9]
   15710:	add	r0, r9, #1
   15714:	cmp	r0, sl
   15718:	movcc	r1, #36	; 0x24
   1571c:	strbcc	r1, [r6, r0]
   15720:	add	r0, r9, #2
   15724:	cmp	r0, sl
   15728:	movcc	r1, #39	; 0x27
   1572c:	strbcc	r1, [r6, r0]
   15730:	add	r0, r9, #3
   15734:	cmp	r0, sl
   15738:	add	r9, r0, #1
   1573c:	str	r2, [fp, #-48]	; 0xffffffd0
   15740:	movcc	r1, #92	; 0x5c
   15744:	strbcc	r1, [r6, r0]
   15748:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1574c:	cmp	r1, #2
   15750:	beq	157b0 <__assert_fail@plt+0x4050>
   15754:	add	r1, r7, #1
   15758:	mov	r4, #0
   1575c:	mov	r8, #1
   15760:	mov	r5, #48	; 0x30
   15764:	cmp	r1, lr
   15768:	bcs	15050 <__assert_fail@plt+0x38f0>
   1576c:	ldrb	r1, [ip, r1]
   15770:	sub	r1, r1, #48	; 0x30
   15774:	uxtb	r1, r1
   15778:	cmp	r1, #9
   1577c:	bhi	15050 <__assert_fail@plt+0x38f0>
   15780:	cmp	r9, sl
   15784:	movcc	r1, #48	; 0x30
   15788:	strbcc	r1, [r6, r9]
   1578c:	add	r1, r0, #2
   15790:	add	r9, r0, #3
   15794:	cmp	r1, sl
   15798:	movcc	r2, #48	; 0x30
   1579c:	strbcc	r2, [r6, r1]
   157a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   157a4:	cmp	r0, #0
   157a8:	bne	1505c <__assert_fail@plt+0x38fc>
   157ac:	b	15334 <__assert_fail@plt+0x3bd4>
   157b0:	mov	r0, #48	; 0x30
   157b4:	mov	r8, #1
   157b8:	mov	r4, #0
   157bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   157c0:	cmp	r1, #0
   157c4:	bne	15370 <__assert_fail@plt+0x3c10>
   157c8:	cmp	r8, #0
   157cc:	beq	152ec <__assert_fail@plt+0x3b8c>
   157d0:	b	150dc <__assert_fail@plt+0x397c>
   157d4:	mov	r4, #0
   157d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   157dc:	b	15818 <__assert_fail@plt+0x40b8>
   157e0:	ldr	r1, [sp, #84]	; 0x54
   157e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   157e8:	mov	r4, #0
   157ec:	cmp	r6, r1
   157f0:	bcs	15818 <__assert_fail@plt+0x40b8>
   157f4:	ldrb	r0, [ip, r6]
   157f8:	cmp	r0, #0
   157fc:	beq	15818 <__assert_fail@plt+0x40b8>
   15800:	ldr	r0, [sp, #64]	; 0x40
   15804:	add	r0, r0, #1
   15808:	add	r6, r0, r7
   1580c:	str	r0, [sp, #64]	; 0x40
   15810:	cmp	r6, r1
   15814:	bcc	157f4 <__assert_fail@plt+0x4094>
   15818:	ldr	r6, [sp, #64]	; 0x40
   1581c:	b	15824 <__assert_fail@plt+0x40c4>
   15820:	ldr	ip, [fp, #-84]	; 0xffffffac
   15824:	mov	r1, r6
   15828:	ldr	r6, [sp, #76]	; 0x4c
   1582c:	ldr	sl, [sp, #56]	; 0x38
   15830:	ldr	r0, [sp, #44]	; 0x2c
   15834:	cmp	r1, #1
   15838:	orr	r2, r4, r0
   1583c:	mov	r0, r1
   15840:	bhi	15860 <__assert_fail@plt+0x4100>
   15844:	tst	r2, #1
   15848:	beq	15860 <__assert_fail@plt+0x4100>
   1584c:	ldr	lr, [sp, #84]	; 0x54
   15850:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15854:	cmp	r0, #0
   15858:	bne	1505c <__assert_fail@plt+0x38fc>
   1585c:	b	15334 <__assert_fail@plt+0x3bd4>
   15860:	str	r2, [sp, #64]	; 0x40
   15864:	add	r0, r0, r7
   15868:	add	r1, r7, #1
   1586c:	ldr	lr, [sp, #84]	; 0x54
   15870:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15874:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15878:	mov	r3, #0
   1587c:	str	r0, [sp, #56]	; 0x38
   15880:	ldr	r0, [sp, #64]	; 0x40
   15884:	tst	r0, #1
   15888:	bne	15970 <__assert_fail@plt+0x4210>
   1588c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15890:	tst	r0, #1
   15894:	bne	15b10 <__assert_fail@plt+0x43b0>
   15898:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1589c:	cmp	r7, #2
   158a0:	movwne	r3, #1
   158a4:	orr	r3, r3, r2
   158a8:	tst	r3, #1
   158ac:	bne	158e4 <__assert_fail@plt+0x4184>
   158b0:	cmp	r9, sl
   158b4:	add	r3, r9, #1
   158b8:	movcc	r2, #39	; 0x27
   158bc:	strbcc	r2, [r6, r9]
   158c0:	cmp	r3, sl
   158c4:	movcc	r2, #36	; 0x24
   158c8:	strbcc	r2, [r6, r3]
   158cc:	add	r3, r9, #2
   158d0:	add	r9, r9, #3
   158d4:	cmp	r3, sl
   158d8:	movcc	r2, #39	; 0x27
   158dc:	strbcc	r2, [r6, r3]
   158e0:	mov	r2, #1
   158e4:	cmp	r9, sl
   158e8:	mov	r0, r2
   158ec:	movcc	r3, #92	; 0x5c
   158f0:	strbcc	r3, [r6, r9]
   158f4:	add	r3, r9, #1
   158f8:	cmp	r3, sl
   158fc:	andcc	r7, r5, #192	; 0xc0
   15900:	movcc	r2, #48	; 0x30
   15904:	orrcc	r7, r2, r7, lsr #6
   15908:	strbcc	r7, [r6, r3]
   1590c:	add	r3, r9, #2
   15910:	add	r9, r9, #3
   15914:	cmp	r3, sl
   15918:	lsrcc	r7, r5, #3
   1591c:	movcc	r2, #6
   15920:	bficc	r7, r2, #3, #29
   15924:	mov	r2, #6
   15928:	strbcc	r7, [r6, r3]
   1592c:	bfi	r5, r2, #3, #29
   15930:	mov	r3, #1
   15934:	mov	r2, r0
   15938:	ldr	r0, [sp, #56]	; 0x38
   1593c:	and	r8, r3, #1
   15940:	cmp	r0, r1
   15944:	bhi	159a4 <__assert_fail@plt+0x4244>
   15948:	b	159e4 <__assert_fail@plt+0x4284>
   1594c:	cmp	r9, sl
   15950:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15954:	strbcc	r5, [r6, r9]
   15958:	add	r9, r9, #1
   1595c:	ldrb	r5, [ip, r1]
   15960:	add	r1, r1, #1
   15964:	ldr	r0, [sp, #64]	; 0x40
   15968:	tst	r0, #1
   1596c:	beq	1588c <__assert_fail@plt+0x412c>
   15970:	ldr	r7, [fp, #-56]	; 0xffffffc8
   15974:	tst	r7, #1
   15978:	beq	1598c <__assert_fail@plt+0x422c>
   1597c:	cmp	r9, sl
   15980:	movcc	r7, #92	; 0x5c
   15984:	strbcc	r7, [r6, r9]
   15988:	add	r9, r9, #1
   1598c:	mov	r7, #0
   15990:	str	r7, [fp, #-56]	; 0xffffffc8
   15994:	ldr	r0, [sp, #56]	; 0x38
   15998:	and	r8, r3, #1
   1599c:	cmp	r0, r1
   159a0:	bls	159e4 <__assert_fail@plt+0x4284>
   159a4:	cmp	r8, #0
   159a8:	mvn	r7, r2
   159ac:	movwne	r8, #1
   159b0:	orr	r7, r7, r8
   159b4:	tst	r7, #1
   159b8:	bne	1594c <__assert_fail@plt+0x41ec>
   159bc:	cmp	r9, sl
   159c0:	movcc	r7, #39	; 0x27
   159c4:	strbcc	r7, [r6, r9]
   159c8:	add	r7, r9, #1
   159cc:	add	r9, r9, #2
   159d0:	cmp	r7, sl
   159d4:	movcc	r2, #39	; 0x27
   159d8:	strbcc	r2, [r6, r7]
   159dc:	mov	r2, #0
   159e0:	b	1594c <__assert_fail@plt+0x41ec>
   159e4:	cmp	r8, #0
   159e8:	sub	r7, r1, #1
   159ec:	mov	r0, r5
   159f0:	str	r2, [fp, #-48]	; 0xffffffd0
   159f4:	movwne	r8, #1
   159f8:	cmp	r8, #0
   159fc:	beq	152ec <__assert_fail@plt+0x3b8c>
   15a00:	b	150dc <__assert_fail@plt+0x397c>
   15a04:	mov	lr, r7
   15a08:	b	15a10 <__assert_fail@plt+0x42b0>
   15a0c:	mvn	lr, #0
   15a10:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15a14:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15a18:	eor	r0, r7, #2
   15a1c:	orr	r0, r0, r9
   15a20:	clz	r0, r0
   15a24:	lsr	r0, r0, #5
   15a28:	tst	r1, r0
   15a2c:	bne	15b2c <__assert_fail@plt+0x43cc>
   15a30:	mov	r0, r1
   15a34:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15a38:	cmp	r7, #2
   15a3c:	movwne	r1, #1
   15a40:	orr	r0, r0, r1
   15a44:	tst	r0, #1
   15a48:	ldreq	r0, [sp, #52]	; 0x34
   15a4c:	streq	lr, [sp, #84]	; 0x54
   15a50:	eoreq	r0, r0, #1
   15a54:	tsteq	r0, #1
   15a58:	bne	15bf0 <__assert_fail@plt+0x4490>
   15a5c:	tst	r4, #1
   15a60:	bne	15bac <__assert_fail@plt+0x444c>
   15a64:	ldr	r6, [sp, #48]	; 0x30
   15a68:	mov	r8, #0
   15a6c:	cmp	r6, #0
   15a70:	beq	15be8 <__assert_fail@plt+0x4488>
   15a74:	ldr	r0, [sp, #80]	; 0x50
   15a78:	mov	r1, #0
   15a7c:	cmp	sl, #0
   15a80:	mov	r4, #0
   15a84:	str	r1, [fp, #-72]	; 0xffffffb8
   15a88:	beq	1497c <__assert_fail@plt+0x321c>
   15a8c:	b	15bf0 <__assert_fail@plt+0x4490>
   15a90:	ldrb	r1, [r0, #3]
   15a94:	cmp	r1, #56	; 0x38
   15a98:	ldrbeq	r1, [r0, #4]
   15a9c:	cmpeq	r1, #48	; 0x30
   15aa0:	bne	14b74 <__assert_fail@plt+0x3414>
   15aa4:	ldrb	r1, [r0, #5]
   15aa8:	cmp	r1, #51	; 0x33
   15aac:	ldrbeq	r1, [r0, #6]
   15ab0:	cmpeq	r1, #48	; 0x30
   15ab4:	bne	14b74 <__assert_fail@plt+0x3414>
   15ab8:	ldrb	r0, [r0, #7]
   15abc:	cmp	r0, #0
   15ac0:	movw	r0, #59238	; 0xe766
   15ac4:	movt	r0, #2
   15ac8:	str	r0, [sp, #68]	; 0x44
   15acc:	bne	14b74 <__assert_fail@plt+0x3414>
   15ad0:	b	14b90 <__assert_fail@plt+0x3430>
   15ad4:	ldrb	r1, [r0, #4]
   15ad8:	cmp	r1, #48	; 0x30
   15adc:	ldrbeq	r1, [r0, #5]
   15ae0:	cmpeq	r1, #51	; 0x33
   15ae4:	bne	14c58 <__assert_fail@plt+0x34f8>
   15ae8:	ldrb	r1, [r0, #6]
   15aec:	cmp	r1, #48	; 0x30
   15af0:	ldrbeq	r0, [r0, #7]
   15af4:	cmpeq	r0, #0
   15af8:	bne	14c58 <__assert_fail@plt+0x34f8>
   15afc:	movw	r0, #59242	; 0xe76a
   15b00:	movt	r0, #2
   15b04:	str	r0, [sp, #72]	; 0x48
   15b08:	b	14c78 <__assert_fail@plt+0x3518>
   15b0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15b10:	ldr	r2, [sp, #80]	; 0x50
   15b14:	b	15b4c <__assert_fail@plt+0x43ec>
   15b18:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b1c:	mov	r2, #1
   15b20:	mov	lr, r4
   15b24:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15b28:	b	15b4c <__assert_fail@plt+0x43ec>
   15b2c:	ldr	r2, [sp, #80]	; 0x50
   15b30:	mov	r7, #2
   15b34:	b	15b4c <__assert_fail@plt+0x43ec>
   15b38:	ldr	r6, [sp, #76]	; 0x4c
   15b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b40:	ldr	lr, [sp, #84]	; 0x54
   15b44:	ldr	r2, [sp, #80]	; 0x50
   15b48:	mov	r7, #2
   15b4c:	mov	r0, #0
   15b50:	ldr	r1, [fp, #12]
   15b54:	tst	r2, #1
   15b58:	mov	r2, r7
   15b5c:	mov	r3, lr
   15b60:	str	r0, [sp, #8]
   15b64:	ldr	r0, [sp, #68]	; 0x44
   15b68:	movwne	r2, #4
   15b6c:	cmp	r7, #2
   15b70:	movne	r2, r7
   15b74:	str	r2, [sp]
   15b78:	mov	r2, ip
   15b7c:	bic	r1, r1, #2
   15b80:	str	r0, [sp, #12]
   15b84:	ldr	r0, [sp, #72]	; 0x48
   15b88:	str	r1, [sp, #4]
   15b8c:	mov	r1, sl
   15b90:	str	r0, [sp, #16]
   15b94:	mov	r0, r6
   15b98:	bl	14900 <__assert_fail@plt+0x31a0>
   15b9c:	mov	r9, r0
   15ba0:	mov	r0, r9
   15ba4:	sub	sp, fp, #28
   15ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bac:	mov	r0, #5
   15bb0:	ldr	r1, [sp, #48]	; 0x30
   15bb4:	ldr	r2, [fp, #-84]	; 0xffffffac
   15bb8:	ldr	r3, [sp, #84]	; 0x54
   15bbc:	str	r0, [sp]
   15bc0:	ldr	r0, [fp, #12]
   15bc4:	str	r0, [sp, #4]
   15bc8:	ldr	r0, [fp, #16]
   15bcc:	str	r0, [sp, #8]
   15bd0:	ldr	r0, [sp, #68]	; 0x44
   15bd4:	str	r0, [sp, #12]
   15bd8:	ldr	r0, [sp, #72]	; 0x48
   15bdc:	str	r0, [sp, #16]
   15be0:	ldr	r0, [sp, #76]	; 0x4c
   15be4:	b	15b98 <__assert_fail@plt+0x4438>
   15be8:	mov	r0, #0
   15bec:	str	r0, [fp, #-72]	; 0xffffffb8
   15bf0:	ldr	r1, [sp, #92]	; 0x5c
   15bf4:	cmp	r1, #0
   15bf8:	beq	15c38 <__assert_fail@plt+0x44d8>
   15bfc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c00:	ldr	r2, [sp, #76]	; 0x4c
   15c04:	tst	r0, #1
   15c08:	bne	15c3c <__assert_fail@plt+0x44dc>
   15c0c:	ldrb	r0, [r1]
   15c10:	cmp	r0, #0
   15c14:	beq	15c3c <__assert_fail@plt+0x44dc>
   15c18:	add	r1, r1, #1
   15c1c:	cmp	r9, sl
   15c20:	strbcc	r0, [r2, r9]
   15c24:	add	r9, r9, #1
   15c28:	ldrb	r0, [r1], #1
   15c2c:	cmp	r0, #0
   15c30:	bne	15c1c <__assert_fail@plt+0x44bc>
   15c34:	b	15c3c <__assert_fail@plt+0x44dc>
   15c38:	ldr	r2, [sp, #76]	; 0x4c
   15c3c:	cmp	r9, sl
   15c40:	movcc	r0, #0
   15c44:	strbcc	r0, [r2, r9]
   15c48:	mov	r0, r9
   15c4c:	sub	sp, fp, #28
   15c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c54:	mov	r2, #1
   15c58:	b	15b24 <__assert_fail@plt+0x43c4>
   15c5c:	ldr	r2, [sp, #80]	; 0x50
   15c60:	mov	r7, #5
   15c64:	b	15b4c <__assert_fail@plt+0x43ec>
   15c68:	bl	1173c <abort@plt>
   15c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c70:	add	fp, sp, #28
   15c74:	sub	sp, sp, #28
   15c78:	movw	r5, #62136	; 0xf2b8
   15c7c:	cmp	r2, #0
   15c80:	mov	r4, r1
   15c84:	mov	r7, r0
   15c88:	str	r0, [sp, #20]
   15c8c:	movt	r5, #3
   15c90:	movne	r5, r2
   15c94:	bl	11640 <__errno_location@plt>
   15c98:	mov	sl, r0
   15c9c:	ldm	r5, {r0, r1}
   15ca0:	ldr	r2, [r5, #40]	; 0x28
   15ca4:	ldr	r3, [r5, #44]	; 0x2c
   15ca8:	add	r9, r5, #8
   15cac:	ldr	r6, [sl]
   15cb0:	orr	r8, r1, #1
   15cb4:	mov	r1, #0
   15cb8:	str	r6, [sp, #24]
   15cbc:	stm	sp, {r0, r8, r9}
   15cc0:	str	r2, [sp, #12]
   15cc4:	str	r3, [sp, #16]
   15cc8:	mov	r0, #0
   15ccc:	mov	r2, r7
   15cd0:	mov	r3, r4
   15cd4:	mov	r6, r4
   15cd8:	bl	14900 <__assert_fail@plt+0x31a0>
   15cdc:	add	r7, r0, #1
   15ce0:	mov	r0, r7
   15ce4:	bl	2a5f8 <__assert_fail@plt+0x18e98>
   15ce8:	mov	r4, r0
   15cec:	ldr	r0, [r5]
   15cf0:	ldr	r2, [r5, #44]	; 0x2c
   15cf4:	ldr	r1, [r5, #40]	; 0x28
   15cf8:	mov	r3, r6
   15cfc:	stm	sp, {r0, r8, r9}
   15d00:	str	r2, [sp, #16]
   15d04:	str	r1, [sp, #12]
   15d08:	mov	r0, r4
   15d0c:	mov	r1, r7
   15d10:	ldr	r2, [sp, #20]
   15d14:	bl	14900 <__assert_fail@plt+0x31a0>
   15d18:	ldr	r0, [sp, #24]
   15d1c:	str	r0, [sl]
   15d20:	mov	r0, r4
   15d24:	sub	sp, fp, #28
   15d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d30:	add	fp, sp, #28
   15d34:	sub	sp, sp, #36	; 0x24
   15d38:	movw	r8, #62136	; 0xf2b8
   15d3c:	cmp	r3, #0
   15d40:	mov	r4, r2
   15d44:	str	r2, [sp, #24]
   15d48:	mov	r5, r1
   15d4c:	mov	r6, r0
   15d50:	str	r0, [sp, #20]
   15d54:	movt	r8, #3
   15d58:	movne	r8, r3
   15d5c:	bl	11640 <__errno_location@plt>
   15d60:	str	r0, [sp, #28]
   15d64:	cmp	r4, #0
   15d68:	add	sl, r8, #8
   15d6c:	ldm	r8, {r3, r9}
   15d70:	ldr	r7, [r0]
   15d74:	ldr	r1, [r8, #40]	; 0x28
   15d78:	ldr	r2, [r8, #44]	; 0x2c
   15d7c:	mov	r0, #0
   15d80:	orreq	r9, r9, #1
   15d84:	str	r7, [sp, #32]
   15d88:	mov	r7, r5
   15d8c:	stm	sp, {r3, r9, sl}
   15d90:	str	r1, [sp, #12]
   15d94:	str	r2, [sp, #16]
   15d98:	mov	r1, #0
   15d9c:	mov	r2, r6
   15da0:	mov	r3, r5
   15da4:	bl	14900 <__assert_fail@plt+0x31a0>
   15da8:	add	r4, r0, #1
   15dac:	mov	r5, r0
   15db0:	mov	r0, r4
   15db4:	bl	2a5f8 <__assert_fail@plt+0x18e98>
   15db8:	mov	r6, r0
   15dbc:	ldr	r0, [r8]
   15dc0:	ldr	r2, [r8, #44]	; 0x2c
   15dc4:	ldr	r1, [r8, #40]	; 0x28
   15dc8:	mov	r3, r7
   15dcc:	stm	sp, {r0, r9, sl}
   15dd0:	str	r2, [sp, #16]
   15dd4:	str	r1, [sp, #12]
   15dd8:	mov	r0, r6
   15ddc:	mov	r1, r4
   15de0:	ldr	r2, [sp, #20]
   15de4:	bl	14900 <__assert_fail@plt+0x31a0>
   15de8:	ldr	r0, [sp, #24]
   15dec:	ldr	r1, [sp, #32]
   15df0:	ldr	r2, [sp, #28]
   15df4:	cmp	r0, #0
   15df8:	str	r1, [r2]
   15dfc:	strne	r5, [r0]
   15e00:	mov	r0, r6
   15e04:	sub	sp, fp, #28
   15e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e0c:	push	{r4, r5, r6, r7, fp, lr}
   15e10:	add	fp, sp, #16
   15e14:	movw	r4, #61848	; 0xf198
   15e18:	movt	r4, #3
   15e1c:	ldrd	r6, [r4]
   15e20:	cmp	r7, #2
   15e24:	blt	15e50 <__assert_fail@plt+0x46f0>
   15e28:	add	r5, r6, #12
   15e2c:	mov	r7, #0
   15e30:	ldr	r0, [r5, r7, lsl #3]
   15e34:	bl	14538 <__assert_fail@plt+0x2dd8>
   15e38:	ldr	r1, [r4, #4]
   15e3c:	add	r2, r7, #2
   15e40:	add	r0, r7, #1
   15e44:	mov	r7, r0
   15e48:	cmp	r2, r1
   15e4c:	blt	15e30 <__assert_fail@plt+0x46d0>
   15e50:	ldr	r0, [r6, #4]
   15e54:	movw	r5, #62184	; 0xf2e8
   15e58:	movt	r5, #3
   15e5c:	cmp	r0, r5
   15e60:	beq	15e74 <__assert_fail@plt+0x4714>
   15e64:	bl	14538 <__assert_fail@plt+0x2dd8>
   15e68:	mov	r0, #256	; 0x100
   15e6c:	str	r0, [r4, #8]
   15e70:	str	r5, [r4, #12]
   15e74:	add	r5, r4, #8
   15e78:	cmp	r6, r5
   15e7c:	beq	15e8c <__assert_fail@plt+0x472c>
   15e80:	mov	r0, r6
   15e84:	bl	14538 <__assert_fail@plt+0x2dd8>
   15e88:	str	r5, [r4]
   15e8c:	mov	r0, #1
   15e90:	str	r0, [r4, #4]
   15e94:	pop	{r4, r5, r6, r7, fp, pc}
   15e98:	movw	r3, #62136	; 0xf2b8
   15e9c:	mvn	r2, #0
   15ea0:	movt	r3, #3
   15ea4:	b	15ea8 <__assert_fail@plt+0x4748>
   15ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eac:	add	fp, sp, #28
   15eb0:	sub	sp, sp, #44	; 0x2c
   15eb4:	mov	r7, r3
   15eb8:	str	r2, [sp, #36]	; 0x24
   15ebc:	str	r1, [sp, #32]
   15ec0:	mov	r5, r0
   15ec4:	bl	11640 <__errno_location@plt>
   15ec8:	cmp	r5, #0
   15ecc:	blt	16030 <__assert_fail@plt+0x48d0>
   15ed0:	cmn	r5, #-2147483647	; 0x80000001
   15ed4:	beq	16030 <__assert_fail@plt+0x48d0>
   15ed8:	movw	r8, #61848	; 0xf198
   15edc:	mov	r4, r0
   15ee0:	movt	r8, #3
   15ee4:	ldr	r6, [r8]
   15ee8:	ldr	r1, [r8, #4]
   15eec:	ldr	r0, [r0]
   15ef0:	str	r4, [sp, #28]
   15ef4:	cmp	r1, r5
   15ef8:	str	r0, [sp, #24]
   15efc:	ble	15f08 <__assert_fail@plt+0x47a8>
   15f00:	mov	sl, r6
   15f04:	b	15f6c <__assert_fail@plt+0x480c>
   15f08:	mov	r0, #8
   15f0c:	add	r9, r8, #8
   15f10:	add	r2, r5, #1
   15f14:	str	r1, [fp, #-32]	; 0xffffffe0
   15f18:	mvn	r3, #-2147483648	; 0x80000000
   15f1c:	str	r0, [sp]
   15f20:	subs	r0, r6, r9
   15f24:	sub	r2, r2, r1
   15f28:	sub	r1, fp, #32
   15f2c:	movne	r0, r6
   15f30:	bl	2a7f8 <__assert_fail@plt+0x19098>
   15f34:	str	r0, [r8]
   15f38:	cmp	r6, r9
   15f3c:	mov	sl, r0
   15f40:	ldrdeq	r0, [r8, #8]
   15f44:	stmeq	sl, {r0, r1}
   15f48:	ldr	r1, [r8, #4]
   15f4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15f50:	add	r0, sl, r1, lsl #3
   15f54:	sub	r1, r2, r1
   15f58:	lsl	r2, r1, #3
   15f5c:	mov	r1, #0
   15f60:	bl	11670 <memset@plt>
   15f64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f68:	str	r0, [r8, #4]
   15f6c:	mov	r9, sl
   15f70:	ldr	r6, [r9, r5, lsl #3]!
   15f74:	ldr	r4, [r9, #4]!
   15f78:	ldm	r7, {r0, r1}
   15f7c:	ldr	r2, [r7, #40]	; 0x28
   15f80:	ldr	r3, [r7, #44]	; 0x2c
   15f84:	orr	r8, r1, #1
   15f88:	add	r1, r7, #8
   15f8c:	stm	sp, {r0, r8}
   15f90:	add	r0, sp, #8
   15f94:	str	r1, [sp, #20]
   15f98:	stm	r0, {r1, r2, r3}
   15f9c:	mov	r0, r4
   15fa0:	mov	r1, r6
   15fa4:	ldr	r2, [sp, #32]
   15fa8:	ldr	r3, [sp, #36]	; 0x24
   15fac:	bl	14900 <__assert_fail@plt+0x31a0>
   15fb0:	cmp	r6, r0
   15fb4:	bhi	16018 <__assert_fail@plt+0x48b8>
   15fb8:	add	r6, r0, #1
   15fbc:	movw	r0, #62184	; 0xf2e8
   15fc0:	movt	r0, #3
   15fc4:	str	r6, [sl, r5, lsl #3]
   15fc8:	cmp	r4, r0
   15fcc:	beq	15fd8 <__assert_fail@plt+0x4878>
   15fd0:	mov	r0, r4
   15fd4:	bl	14538 <__assert_fail@plt+0x2dd8>
   15fd8:	mov	r0, r6
   15fdc:	bl	2a5f8 <__assert_fail@plt+0x18e98>
   15fe0:	str	r0, [r9]
   15fe4:	mov	r4, r0
   15fe8:	add	r3, sp, #8
   15fec:	ldr	r0, [r7]
   15ff0:	ldr	r1, [r7, #40]	; 0x28
   15ff4:	ldr	r2, [r7, #44]	; 0x2c
   15ff8:	stm	sp, {r0, r8}
   15ffc:	ldr	r0, [sp, #20]
   16000:	stm	r3, {r0, r1, r2}
   16004:	mov	r0, r4
   16008:	mov	r1, r6
   1600c:	ldr	r2, [sp, #32]
   16010:	ldr	r3, [sp, #36]	; 0x24
   16014:	bl	14900 <__assert_fail@plt+0x31a0>
   16018:	ldr	r1, [sp, #24]
   1601c:	ldr	r0, [sp, #28]
   16020:	str	r1, [r0]
   16024:	mov	r0, r4
   16028:	sub	sp, fp, #28
   1602c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16030:	bl	1173c <abort@plt>
   16034:	movw	r3, #62136	; 0xf2b8
   16038:	movt	r3, #3
   1603c:	b	15ea8 <__assert_fail@plt+0x4748>
   16040:	movw	r3, #62136	; 0xf2b8
   16044:	mov	r1, r0
   16048:	mov	r0, #0
   1604c:	mvn	r2, #0
   16050:	movt	r3, #3
   16054:	b	15ea8 <__assert_fail@plt+0x4748>
   16058:	movw	r3, #62136	; 0xf2b8
   1605c:	mov	r2, r1
   16060:	mov	r1, r0
   16064:	mov	r0, #0
   16068:	movt	r3, #3
   1606c:	b	15ea8 <__assert_fail@plt+0x4748>
   16070:	push	{fp, lr}
   16074:	mov	fp, sp
   16078:	sub	sp, sp, #48	; 0x30
   1607c:	vmov.i32	q8, #0	; 0x00000000
   16080:	mov	ip, #32
   16084:	mov	r3, sp
   16088:	mov	lr, r2
   1608c:	cmp	r1, #10
   16090:	add	r2, r3, #16
   16094:	vst1.64	{d16-d17}, [r3], ip
   16098:	vst1.64	{d16-d17}, [r3]
   1609c:	vst1.64	{d16-d17}, [r2]
   160a0:	beq	160c0 <__assert_fail@plt+0x4960>
   160a4:	str	r1, [sp]
   160a8:	mov	r3, sp
   160ac:	mov	r1, lr
   160b0:	mvn	r2, #0
   160b4:	bl	15ea8 <__assert_fail@plt+0x4748>
   160b8:	mov	sp, fp
   160bc:	pop	{fp, pc}
   160c0:	bl	1173c <abort@plt>
   160c4:	push	{r4, sl, fp, lr}
   160c8:	add	fp, sp, #8
   160cc:	sub	sp, sp, #48	; 0x30
   160d0:	mov	ip, r3
   160d4:	mov	r3, sp
   160d8:	vmov.i32	q8, #0	; 0x00000000
   160dc:	mov	lr, #32
   160e0:	cmp	r1, #10
   160e4:	add	r4, r3, #16
   160e8:	vst1.64	{d16-d17}, [r3], lr
   160ec:	vst1.64	{d16-d17}, [r3]
   160f0:	vst1.64	{d16-d17}, [r4]
   160f4:	beq	16114 <__assert_fail@plt+0x49b4>
   160f8:	str	r1, [sp]
   160fc:	mov	r1, r2
   16100:	mov	r3, sp
   16104:	mov	r2, ip
   16108:	bl	15ea8 <__assert_fail@plt+0x4748>
   1610c:	sub	sp, fp, #8
   16110:	pop	{r4, sl, fp, pc}
   16114:	bl	1173c <abort@plt>
   16118:	push	{fp, lr}
   1611c:	mov	fp, sp
   16120:	sub	sp, sp, #48	; 0x30
   16124:	mov	r3, sp
   16128:	vmov.i32	q8, #0	; 0x00000000
   1612c:	mov	ip, #32
   16130:	cmp	r0, #10
   16134:	add	r2, r3, #16
   16138:	vst1.64	{d16-d17}, [r3], ip
   1613c:	vst1.64	{d16-d17}, [r3]
   16140:	vst1.64	{d16-d17}, [r2]
   16144:	beq	16164 <__assert_fail@plt+0x4a04>
   16148:	str	r0, [sp]
   1614c:	mov	r3, sp
   16150:	mov	r0, #0
   16154:	mvn	r2, #0
   16158:	bl	15ea8 <__assert_fail@plt+0x4748>
   1615c:	mov	sp, fp
   16160:	pop	{fp, pc}
   16164:	bl	1173c <abort@plt>
   16168:	push	{fp, lr}
   1616c:	mov	fp, sp
   16170:	sub	sp, sp, #48	; 0x30
   16174:	mov	r3, sp
   16178:	vmov.i32	q8, #0	; 0x00000000
   1617c:	mov	ip, #32
   16180:	cmp	r0, #10
   16184:	add	lr, r3, #16
   16188:	vst1.64	{d16-d17}, [r3], ip
   1618c:	vst1.64	{d16-d17}, [r3]
   16190:	vst1.64	{d16-d17}, [lr]
   16194:	beq	161b0 <__assert_fail@plt+0x4a50>
   16198:	str	r0, [sp]
   1619c:	mov	r3, sp
   161a0:	mov	r0, #0
   161a4:	bl	15ea8 <__assert_fail@plt+0x4748>
   161a8:	mov	sp, fp
   161ac:	pop	{fp, pc}
   161b0:	bl	1173c <abort@plt>
   161b4:	push	{r4, sl, fp, lr}
   161b8:	add	fp, sp, #8
   161bc:	sub	sp, sp, #48	; 0x30
   161c0:	mov	lr, r0
   161c4:	movw	r0, #62136	; 0xf2b8
   161c8:	mov	r3, #32
   161cc:	mov	ip, r1
   161d0:	mov	r4, #1
   161d4:	movt	r0, #3
   161d8:	add	r1, r0, #16
   161dc:	vld1.64	{d16-d17}, [r0], r3
   161e0:	mov	r3, sp
   161e4:	vld1.64	{d18-d19}, [r1]
   161e8:	add	r1, r3, #16
   161ec:	vld1.64	{d20-d21}, [r0]
   161f0:	add	r0, r3, #32
   161f4:	vst1.64	{d18-d19}, [r1]
   161f8:	mov	r1, r3
   161fc:	vst1.64	{d20-d21}, [r0]
   16200:	mov	r0, #28
   16204:	and	r0, r0, r2, lsr #3
   16208:	and	r2, r2, #31
   1620c:	vst1.64	{d16-d17}, [r1], r0
   16210:	ldr	r0, [r1, #8]
   16214:	bic	r4, r4, r0, lsr r2
   16218:	eor	r0, r0, r4, lsl r2
   1621c:	mov	r2, ip
   16220:	str	r0, [r1, #8]
   16224:	mov	r0, #0
   16228:	mov	r1, lr
   1622c:	bl	15ea8 <__assert_fail@plt+0x4748>
   16230:	sub	sp, fp, #8
   16234:	pop	{r4, sl, fp, pc}
   16238:	push	{fp, lr}
   1623c:	mov	fp, sp
   16240:	sub	sp, sp, #48	; 0x30
   16244:	mov	ip, r0
   16248:	movw	r0, #62136	; 0xf2b8
   1624c:	mov	r3, #32
   16250:	movt	r0, #3
   16254:	add	r2, r0, #16
   16258:	vld1.64	{d16-d17}, [r0], r3
   1625c:	mov	r3, sp
   16260:	vld1.64	{d18-d19}, [r2]
   16264:	add	r2, r3, #16
   16268:	vld1.64	{d20-d21}, [r0]
   1626c:	add	r0, r3, #32
   16270:	vst1.64	{d18-d19}, [r2]
   16274:	mov	r2, r3
   16278:	vst1.64	{d20-d21}, [r0]
   1627c:	mov	r0, #28
   16280:	and	r0, r0, r1, lsr #3
   16284:	and	r1, r1, #31
   16288:	vst1.64	{d16-d17}, [r2], r0
   1628c:	mov	r0, #1
   16290:	ldr	lr, [r2, #8]
   16294:	bic	r0, r0, lr, lsr r1
   16298:	eor	r0, lr, r0, lsl r1
   1629c:	mov	r1, ip
   162a0:	str	r0, [r2, #8]
   162a4:	mov	r0, #0
   162a8:	mvn	r2, #0
   162ac:	bl	15ea8 <__assert_fail@plt+0x4748>
   162b0:	mov	sp, fp
   162b4:	pop	{fp, pc}
   162b8:	push	{fp, lr}
   162bc:	mov	fp, sp
   162c0:	sub	sp, sp, #48	; 0x30
   162c4:	movw	r2, #62136	; 0xf2b8
   162c8:	mov	r3, #32
   162cc:	mov	r1, r0
   162d0:	movt	r2, #3
   162d4:	add	r0, r2, #16
   162d8:	vld1.64	{d16-d17}, [r2], r3
   162dc:	mov	r3, sp
   162e0:	vld1.64	{d18-d19}, [r0]
   162e4:	add	r0, r3, #16
   162e8:	vld1.64	{d20-d21}, [r2]
   162ec:	mov	r2, r3
   162f0:	vst1.64	{d18-d19}, [r0]
   162f4:	add	r0, r3, #32
   162f8:	vst1.64	{d20-d21}, [r0]
   162fc:	mov	r0, #12
   16300:	vst1.64	{d16-d17}, [r2], r0
   16304:	ldr	r0, [r2]
   16308:	orr	r0, r0, #67108864	; 0x4000000
   1630c:	str	r0, [r2]
   16310:	mov	r0, #0
   16314:	mvn	r2, #0
   16318:	bl	15ea8 <__assert_fail@plt+0x4748>
   1631c:	mov	sp, fp
   16320:	pop	{fp, pc}
   16324:	push	{fp, lr}
   16328:	mov	fp, sp
   1632c:	sub	sp, sp, #48	; 0x30
   16330:	mov	ip, r1
   16334:	mov	r1, r0
   16338:	movw	r0, #62136	; 0xf2b8
   1633c:	mov	r3, #32
   16340:	movt	r0, #3
   16344:	add	r2, r0, #16
   16348:	vld1.64	{d16-d17}, [r0], r3
   1634c:	mov	r3, sp
   16350:	vld1.64	{d18-d19}, [r2]
   16354:	add	r2, r3, #16
   16358:	vld1.64	{d20-d21}, [r0]
   1635c:	add	r0, r3, #32
   16360:	vst1.64	{d18-d19}, [r2]
   16364:	mov	r2, r3
   16368:	vst1.64	{d20-d21}, [r0]
   1636c:	mov	r0, #12
   16370:	vst1.64	{d16-d17}, [r2], r0
   16374:	ldr	r0, [r2]
   16378:	orr	r0, r0, #67108864	; 0x4000000
   1637c:	str	r0, [r2]
   16380:	mov	r0, #0
   16384:	mov	r2, ip
   16388:	bl	15ea8 <__assert_fail@plt+0x4748>
   1638c:	mov	sp, fp
   16390:	pop	{fp, pc}
   16394:	push	{r4, sl, fp, lr}
   16398:	add	fp, sp, #8
   1639c:	sub	sp, sp, #96	; 0x60
   163a0:	mov	ip, r2
   163a4:	mov	r2, sp
   163a8:	vmov.i32	q8, #0	; 0x00000000
   163ac:	mov	r4, #28
   163b0:	cmp	r1, #10
   163b4:	mov	r3, r2
   163b8:	add	lr, r2, #16
   163bc:	vst1.64	{d16-d17}, [r3], r4
   163c0:	vst1.64	{d16-d17}, [lr]
   163c4:	vst1.32	{d16-d17}, [r3]
   163c8:	beq	16418 <__assert_fail@plt+0x4cb8>
   163cc:	vld1.64	{d16-d17}, [r2], r4
   163d0:	vld1.64	{d18-d19}, [lr]
   163d4:	add	r3, sp, #48	; 0x30
   163d8:	add	r4, r3, #4
   163dc:	vld1.32	{d20-d21}, [r2]
   163e0:	add	r2, r3, #20
   163e4:	vst1.32	{d16-d17}, [r4]
   163e8:	vst1.32	{d18-d19}, [r2]
   163ec:	add	r2, r3, #32
   163f0:	vst1.32	{d20-d21}, [r2]
   163f4:	str	r1, [sp, #48]	; 0x30
   163f8:	mvn	r2, #0
   163fc:	ldr	r1, [sp, #60]	; 0x3c
   16400:	orr	r1, r1, #67108864	; 0x4000000
   16404:	str	r1, [sp, #60]	; 0x3c
   16408:	mov	r1, ip
   1640c:	bl	15ea8 <__assert_fail@plt+0x4748>
   16410:	sub	sp, fp, #8
   16414:	pop	{r4, sl, fp, pc}
   16418:	bl	1173c <abort@plt>
   1641c:	push	{r4, r5, fp, lr}
   16420:	add	fp, sp, #8
   16424:	sub	sp, sp, #48	; 0x30
   16428:	mov	ip, r3
   1642c:	movw	r3, #62136	; 0xf2b8
   16430:	mov	lr, #32
   16434:	cmp	r1, #0
   16438:	mov	r5, sp
   1643c:	movt	r3, #3
   16440:	cmpne	r2, #0
   16444:	add	r4, r3, #16
   16448:	vld1.64	{d16-d17}, [r3], lr
   1644c:	vld1.64	{d18-d19}, [r4]
   16450:	add	r4, r5, #16
   16454:	vld1.64	{d20-d21}, [r3]
   16458:	vst1.64	{d16-d17}, [r5], lr
   1645c:	mov	r3, #10
   16460:	vst1.64	{d18-d19}, [r4]
   16464:	vst1.64	{d20-d21}, [r5]
   16468:	str	r3, [sp]
   1646c:	bne	16474 <__assert_fail@plt+0x4d14>
   16470:	bl	1173c <abort@plt>
   16474:	str	r2, [sp, #44]	; 0x2c
   16478:	str	r1, [sp, #40]	; 0x28
   1647c:	mov	r3, sp
   16480:	mov	r1, ip
   16484:	mvn	r2, #0
   16488:	bl	15ea8 <__assert_fail@plt+0x4748>
   1648c:	sub	sp, fp, #8
   16490:	pop	{r4, r5, fp, pc}
   16494:	push	{r4, r5, fp, lr}
   16498:	add	fp, sp, #8
   1649c:	sub	sp, sp, #48	; 0x30
   164a0:	mov	lr, r3
   164a4:	movw	r3, #62136	; 0xf2b8
   164a8:	mov	ip, #32
   164ac:	cmp	r1, #0
   164b0:	mov	r5, sp
   164b4:	movt	r3, #3
   164b8:	cmpne	r2, #0
   164bc:	add	r4, r3, #16
   164c0:	vld1.64	{d16-d17}, [r3], ip
   164c4:	vld1.64	{d18-d19}, [r4]
   164c8:	add	r4, r5, #16
   164cc:	vld1.64	{d20-d21}, [r3]
   164d0:	vst1.64	{d16-d17}, [r5], ip
   164d4:	mov	r3, #10
   164d8:	vst1.64	{d18-d19}, [r4]
   164dc:	vst1.64	{d20-d21}, [r5]
   164e0:	str	r3, [sp]
   164e4:	bne	164ec <__assert_fail@plt+0x4d8c>
   164e8:	bl	1173c <abort@plt>
   164ec:	ldr	ip, [fp, #8]
   164f0:	str	r2, [sp, #44]	; 0x2c
   164f4:	str	r1, [sp, #40]	; 0x28
   164f8:	mov	r3, sp
   164fc:	mov	r1, lr
   16500:	mov	r2, ip
   16504:	bl	15ea8 <__assert_fail@plt+0x4748>
   16508:	sub	sp, fp, #8
   1650c:	pop	{r4, r5, fp, pc}
   16510:	push	{r4, sl, fp, lr}
   16514:	add	fp, sp, #8
   16518:	sub	sp, sp, #48	; 0x30
   1651c:	mov	ip, r2
   16520:	movw	r2, #62136	; 0xf2b8
   16524:	mov	lr, #32
   16528:	cmp	r0, #0
   1652c:	mov	r4, sp
   16530:	movt	r2, #3
   16534:	cmpne	r1, #0
   16538:	add	r3, r2, #16
   1653c:	vld1.64	{d16-d17}, [r2], lr
   16540:	vld1.64	{d18-d19}, [r3]
   16544:	add	r3, r4, #16
   16548:	vld1.64	{d20-d21}, [r2]
   1654c:	vst1.64	{d16-d17}, [r4], lr
   16550:	mov	r2, #10
   16554:	vst1.64	{d18-d19}, [r3]
   16558:	vst1.64	{d20-d21}, [r4]
   1655c:	str	r2, [sp]
   16560:	bne	16568 <__assert_fail@plt+0x4e08>
   16564:	bl	1173c <abort@plt>
   16568:	str	r1, [sp, #44]	; 0x2c
   1656c:	str	r0, [sp, #40]	; 0x28
   16570:	mov	r3, sp
   16574:	mov	r0, #0
   16578:	mov	r1, ip
   1657c:	mvn	r2, #0
   16580:	bl	15ea8 <__assert_fail@plt+0x4748>
   16584:	sub	sp, fp, #8
   16588:	pop	{r4, sl, fp, pc}
   1658c:	push	{r4, r5, fp, lr}
   16590:	add	fp, sp, #8
   16594:	sub	sp, sp, #48	; 0x30
   16598:	mov	lr, r2
   1659c:	movw	r2, #62136	; 0xf2b8
   165a0:	mov	ip, r3
   165a4:	mov	r3, #32
   165a8:	cmp	r0, #0
   165ac:	mov	r5, sp
   165b0:	movt	r2, #3
   165b4:	cmpne	r1, #0
   165b8:	add	r4, r2, #16
   165bc:	vld1.64	{d16-d17}, [r2], r3
   165c0:	vld1.64	{d18-d19}, [r4]
   165c4:	add	r4, r5, #16
   165c8:	vld1.64	{d20-d21}, [r2]
   165cc:	vst1.64	{d16-d17}, [r5], r3
   165d0:	mov	r2, #10
   165d4:	vst1.64	{d18-d19}, [r4]
   165d8:	vst1.64	{d20-d21}, [r5]
   165dc:	str	r2, [sp]
   165e0:	bne	165e8 <__assert_fail@plt+0x4e88>
   165e4:	bl	1173c <abort@plt>
   165e8:	str	r1, [sp, #44]	; 0x2c
   165ec:	str	r0, [sp, #40]	; 0x28
   165f0:	mov	r3, sp
   165f4:	mov	r0, #0
   165f8:	mov	r1, lr
   165fc:	mov	r2, ip
   16600:	bl	15ea8 <__assert_fail@plt+0x4748>
   16604:	sub	sp, fp, #8
   16608:	pop	{r4, r5, fp, pc}
   1660c:	movw	r3, #61800	; 0xf168
   16610:	movt	r3, #3
   16614:	b	15ea8 <__assert_fail@plt+0x4748>
   16618:	movw	r3, #61800	; 0xf168
   1661c:	mov	r2, r1
   16620:	mov	r1, r0
   16624:	mov	r0, #0
   16628:	movt	r3, #3
   1662c:	b	15ea8 <__assert_fail@plt+0x4748>
   16630:	movw	r3, #61800	; 0xf168
   16634:	mvn	r2, #0
   16638:	movt	r3, #3
   1663c:	b	15ea8 <__assert_fail@plt+0x4748>
   16640:	movw	r3, #61800	; 0xf168
   16644:	mov	r1, r0
   16648:	mov	r0, #0
   1664c:	mvn	r2, #0
   16650:	movt	r3, #3
   16654:	b	15ea8 <__assert_fail@plt+0x4748>
	...
   16660:	push	{fp, lr}
   16664:	mov	fp, sp
   16668:	mov	lr, r0
   1666c:	movw	r0, #62444	; 0xf3ec
   16670:	mov	ip, r1
   16674:	ldrb	r1, [r2, #28]
   16678:	movt	r0, #3
   1667c:	ldr	r3, [r0]
   16680:	mov	r0, #16
   16684:	and	r1, r1, #111	; 0x6f
   16688:	and	r0, r0, r3, lsr #21
   1668c:	orr	r0, r1, r0
   16690:	mov	r1, lr
   16694:	orr	r0, r0, #128	; 0x80
   16698:	strb	r0, [r2, #28]
   1669c:	mov	r0, r2
   166a0:	mov	r2, ip
   166a4:	bl	166e0 <__assert_fail@plt+0x4f80>
   166a8:	cmp	r0, #0
   166ac:	moveq	r0, #0
   166b0:	popeq	{fp, pc}
   166b4:	movw	r1, #59720	; 0xe948
   166b8:	mov	r2, #5
   166bc:	movt	r1, #2
   166c0:	ldr	r0, [r1, r0, lsl #2]
   166c4:	movw	r1, #59336	; 0xe7c8
   166c8:	movt	r1, #2
   166cc:	add	r1, r1, r0
   166d0:	mov	r0, #0
   166d4:	pop	{fp, lr}
   166d8:	b	114e4 <dcgettext@plt>
   166dc:	nop	{0}
   166e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166e4:	add	fp, sp, #28
   166e8:	sub	sp, sp, #140	; 0x8c
   166ec:	mov	r9, r0
   166f0:	mov	r0, #0
   166f4:	mov	sl, r3
   166f8:	mov	r7, r2
   166fc:	mov	r8, r1
   16700:	str	r0, [fp, #-52]	; 0xffffffcc
   16704:	str	r0, [r9, #8]
   16708:	str	r3, [r9, #12]
   1670c:	str	r0, [r9, #24]
   16710:	ldrb	r0, [r9, #28]
   16714:	and	r0, r0, #144	; 0x90
   16718:	strb	r0, [r9, #28]
   1671c:	ldr	r0, [r9, #4]
   16720:	ldr	r6, [r9]
   16724:	cmp	r0, #159	; 0x9f
   16728:	bls	170b8 <__assert_fail@plt+0x5958>
   1672c:	mov	r0, #160	; 0xa0
   16730:	mov	r1, #0
   16734:	mov	r2, #160	; 0xa0
   16738:	str	r0, [r9, #8]
   1673c:	mov	r0, r6
   16740:	bl	11670 <memset@plt>
   16744:	mov	r0, #31
   16748:	str	r0, [r6, #64]	; 0x40
   1674c:	movw	r0, #43689	; 0xaaa9
   16750:	movt	r0, #2730	; 0xaaa
   16754:	cmp	r7, r0
   16758:	bhi	16a78 <__assert_fail@plt+0x5318>
   1675c:	add	r0, r7, #1
   16760:	str	r0, [r6, #4]
   16764:	str	r0, [sp, #28]
   16768:	lsl	r0, r0, #3
   1676c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   16770:	str	r0, [r6]
   16774:	mov	r0, #1
   16778:	mov	r4, r0
   1677c:	lsl	r0, r0, #1
   16780:	cmp	r4, r7
   16784:	bls	16778 <__assert_fail@plt+0x5018>
   16788:	mov	r0, #12
   1678c:	mov	r1, r4
   16790:	bl	2d24c <__assert_fail@plt+0x1baec>
   16794:	str	r0, [r6, #32]
   16798:	sub	r0, r4, #1
   1679c:	str	r0, [r6, #68]	; 0x44
   167a0:	bl	11568 <__ctype_get_mb_cur_max@plt>
   167a4:	str	r0, [r6, #92]	; 0x5c
   167a8:	mov	r0, #14
   167ac:	bl	116f4 <nl_langinfo@plt>
   167b0:	ldrb	r1, [r0]
   167b4:	orr	r1, r1, #32
   167b8:	cmp	r1, #117	; 0x75
   167bc:	bne	16808 <__assert_fail@plt+0x50a8>
   167c0:	ldrb	r1, [r0, #1]
   167c4:	orr	r1, r1, #32
   167c8:	cmp	r1, #116	; 0x74
   167cc:	bne	16808 <__assert_fail@plt+0x50a8>
   167d0:	ldrb	r1, [r0, #2]
   167d4:	orr	r1, r1, #32
   167d8:	cmp	r1, #102	; 0x66
   167dc:	bne	16808 <__assert_fail@plt+0x50a8>
   167e0:	ldrb	r1, [r0, #3]!
   167e4:	cmp	r1, #45	; 0x2d
   167e8:	movw	r1, #59836	; 0xe9bc
   167ec:	addeq	r0, r0, #1
   167f0:	movt	r1, #2
   167f4:	bl	11418 <strcmp@plt>
   167f8:	cmp	r0, #0
   167fc:	ldrbeq	r0, [r6, #88]	; 0x58
   16800:	orreq	r0, r0, #4
   16804:	strbeq	r0, [r6, #88]	; 0x58
   16808:	ldrb	r0, [r6, #88]	; 0x58
   1680c:	and	r1, r0, #247	; 0xf7
   16810:	strb	r1, [r6, #88]	; 0x58
   16814:	ldr	r1, [r6, #92]	; 0x5c
   16818:	cmp	r1, #2
   1681c:	blt	16a64 <__assert_fail@plt+0x5304>
   16820:	tst	r0, #4
   16824:	bne	16a58 <__assert_fail@plt+0x52f8>
   16828:	mov	r0, #32
   1682c:	mov	r1, #1
   16830:	mov	r5, #1
   16834:	bl	2d24c <__assert_fail@plt+0x1baec>
   16838:	cmp	r0, #0
   1683c:	str	r0, [r6, #60]	; 0x3c
   16840:	beq	16a78 <__assert_fail@plt+0x5318>
   16844:	mov	r4, #0
   16848:	mov	r0, r4
   1684c:	bl	1167c <btowc@plt>
   16850:	cmn	r0, #1
   16854:	ldrne	r1, [r6, #60]	; 0x3c
   16858:	ldrne	r2, [r1]
   1685c:	orrne	r2, r2, r5, lsl r4
   16860:	strne	r2, [r1]
   16864:	cmp	r4, r0
   16868:	add	r4, r4, #1
   1686c:	ldrbne	r0, [r6, #88]	; 0x58
   16870:	orrne	r0, r0, #8
   16874:	strbne	r0, [r6, #88]	; 0x58
   16878:	cmp	r4, #32
   1687c:	bne	16848 <__assert_fail@plt+0x50e8>
   16880:	mov	r4, #32
   16884:	mov	r5, #1
   16888:	mov	r0, r4
   1688c:	bl	1167c <btowc@plt>
   16890:	cmn	r0, #1
   16894:	ldrne	r2, [r6, #60]	; 0x3c
   16898:	subne	r1, r4, #32
   1689c:	ldrne	r3, [r2, #4]
   168a0:	orrne	r1, r3, r5, lsl r1
   168a4:	strne	r1, [r2, #4]
   168a8:	cmp	r0, r4
   168ac:	sub	r1, r4, #31
   168b0:	ldrbne	r0, [r6, #88]	; 0x58
   168b4:	orrne	r0, r0, #8
   168b8:	strbne	r0, [r6, #88]	; 0x58
   168bc:	add	r0, r4, #1
   168c0:	cmp	r1, #32
   168c4:	mov	r4, r0
   168c8:	bne	16888 <__assert_fail@plt+0x5128>
   168cc:	mov	r4, #64	; 0x40
   168d0:	mov	r5, #1
   168d4:	mov	r0, r4
   168d8:	bl	1167c <btowc@plt>
   168dc:	cmn	r0, #1
   168e0:	ldrne	r2, [r6, #60]	; 0x3c
   168e4:	subne	r1, r4, #64	; 0x40
   168e8:	ldrne	r3, [r2, #8]
   168ec:	orrne	r1, r3, r5, lsl r1
   168f0:	strne	r1, [r2, #8]
   168f4:	cmp	r0, r4
   168f8:	sub	r1, r4, #63	; 0x3f
   168fc:	ldrbne	r0, [r6, #88]	; 0x58
   16900:	orrne	r0, r0, #8
   16904:	strbne	r0, [r6, #88]	; 0x58
   16908:	add	r0, r4, #1
   1690c:	cmp	r1, #32
   16910:	mov	r4, r0
   16914:	bne	168d4 <__assert_fail@plt+0x5174>
   16918:	mov	r4, #96	; 0x60
   1691c:	mov	r5, #1
   16920:	mov	r0, r4
   16924:	bl	1167c <btowc@plt>
   16928:	cmn	r0, #1
   1692c:	ldrne	r2, [r6, #60]	; 0x3c
   16930:	subne	r1, r4, #96	; 0x60
   16934:	ldrne	r3, [r2, #12]
   16938:	orrne	r1, r3, r5, lsl r1
   1693c:	strne	r1, [r2, #12]
   16940:	cmp	r0, r4
   16944:	sub	r1, r4, #95	; 0x5f
   16948:	ldrbne	r0, [r6, #88]	; 0x58
   1694c:	orrne	r0, r0, #8
   16950:	strbne	r0, [r6, #88]	; 0x58
   16954:	add	r0, r4, #1
   16958:	cmp	r1, #32
   1695c:	mov	r4, r0
   16960:	bne	16920 <__assert_fail@plt+0x51c0>
   16964:	mov	r4, #128	; 0x80
   16968:	mov	r5, #1
   1696c:	mov	r0, r4
   16970:	bl	1167c <btowc@plt>
   16974:	cmn	r0, #1
   16978:	ldrne	r1, [r6, #60]	; 0x3c
   1697c:	subne	r0, r4, #128	; 0x80
   16980:	ldrne	r2, [r1, #16]
   16984:	orrne	r0, r2, r5, lsl r0
   16988:	strne	r0, [r1, #16]
   1698c:	sub	r1, r4, #127	; 0x7f
   16990:	add	r0, r4, #1
   16994:	cmp	r1, #32
   16998:	mov	r4, r0
   1699c:	bne	1696c <__assert_fail@plt+0x520c>
   169a0:	mov	r4, #160	; 0xa0
   169a4:	mov	r5, #1
   169a8:	mov	r0, r4
   169ac:	bl	1167c <btowc@plt>
   169b0:	cmn	r0, #1
   169b4:	ldrne	r1, [r6, #60]	; 0x3c
   169b8:	subne	r0, r4, #160	; 0xa0
   169bc:	ldrne	r2, [r1, #20]
   169c0:	orrne	r0, r2, r5, lsl r0
   169c4:	strne	r0, [r1, #20]
   169c8:	sub	r1, r4, #159	; 0x9f
   169cc:	add	r0, r4, #1
   169d0:	cmp	r1, #32
   169d4:	mov	r4, r0
   169d8:	bne	169a8 <__assert_fail@plt+0x5248>
   169dc:	mov	r4, #192	; 0xc0
   169e0:	mov	r5, #1
   169e4:	mov	r0, r4
   169e8:	bl	1167c <btowc@plt>
   169ec:	cmn	r0, #1
   169f0:	ldrne	r1, [r6, #60]	; 0x3c
   169f4:	subne	r0, r4, #192	; 0xc0
   169f8:	ldrne	r2, [r1, #24]
   169fc:	orrne	r0, r2, r5, lsl r0
   16a00:	strne	r0, [r1, #24]
   16a04:	sub	r1, r4, #191	; 0xbf
   16a08:	add	r0, r4, #1
   16a0c:	cmp	r1, #32
   16a10:	mov	r4, r0
   16a14:	bne	169e4 <__assert_fail@plt+0x5284>
   16a18:	mov	r4, #224	; 0xe0
   16a1c:	mov	r5, #1
   16a20:	mov	r0, r4
   16a24:	bl	1167c <btowc@plt>
   16a28:	cmn	r0, #1
   16a2c:	ldrne	r1, [r6, #60]	; 0x3c
   16a30:	subne	r0, r4, #224	; 0xe0
   16a34:	ldrne	r2, [r1, #28]
   16a38:	orrne	r0, r2, r5, lsl r0
   16a3c:	strne	r0, [r1, #28]
   16a40:	sub	r1, r4, #223	; 0xdf
   16a44:	add	r0, r4, #1
   16a48:	cmp	r1, #32
   16a4c:	mov	r4, r0
   16a50:	bne	16a20 <__assert_fail@plt+0x52c0>
   16a54:	b	16a64 <__assert_fail@plt+0x5304>
   16a58:	movw	r0, #59788	; 0xe98c
   16a5c:	movt	r0, #2
   16a60:	str	r0, [r6, #60]	; 0x3c
   16a64:	ldr	r0, [r6]
   16a68:	cmp	r0, #0
   16a6c:	ldrne	r0, [r6, #32]
   16a70:	cmpne	r0, #0
   16a74:	bne	16aa0 <__assert_fail@plt+0x5340>
   16a78:	mov	r4, #12
   16a7c:	mov	r0, r6
   16a80:	str	r4, [fp, #-52]	; 0xffffffcc
   16a84:	bl	1892c <__assert_fail@plt+0x71cc>
   16a88:	mov	r0, #0
   16a8c:	str	r0, [r9]
   16a90:	str	r0, [r9, #4]
   16a94:	mov	r0, r4
   16a98:	sub	sp, fp, #28
   16a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa0:	movw	r0, #0
   16aa4:	movw	r1, #0
   16aa8:	mov	r4, #0
   16aac:	movt	r0, #0
   16ab0:	movt	r1, #0
   16ab4:	str	r4, [fp, #-52]	; 0xffffffcc
   16ab8:	orrs	r0, r1, r0
   16abc:	str	r0, [sp, #8]
   16ac0:	beq	16ad8 <__assert_fail@plt+0x5378>
   16ac4:	add	r0, r6, #136	; 0x88
   16ac8:	mov	r1, #0
   16acc:	bl	11490 <pthread_mutex_init@plt>
   16ad0:	cmp	r0, #0
   16ad4:	bne	16a78 <__assert_fail@plt+0x5318>
   16ad8:	add	r1, sp, #32
   16adc:	vmov.i32	q8, #0	; 0x00000000
   16ae0:	str	r9, [sp, #16]
   16ae4:	ldr	r9, [r9, #20]
   16ae8:	mov	r5, r8
   16aec:	add	r0, r1, #64	; 0x40
   16af0:	vst1.32	{d16-d17}, [r0]
   16af4:	add	r0, r1, #52	; 0x34
   16af8:	vst1.32	{d16-d17}, [r0]
   16afc:	add	r0, r1, #36	; 0x24
   16b00:	vst1.32	{d16-d17}, [r0]
   16b04:	add	r0, r1, #20
   16b08:	vst1.32	{d16-d17}, [r0]
   16b0c:	add	r0, r1, #4
   16b10:	add	r1, r1, #44	; 0x2c
   16b14:	vst1.32	{d16-d17}, [r0]
   16b18:	str	r8, [sp, #32]
   16b1c:	ubfx	r0, sl, #22, #1
   16b20:	str	sl, [sp, #24]
   16b24:	vdup.32	q8, r7
   16b28:	str	r6, [sp, #20]
   16b2c:	strb	r0, [sp, #104]	; 0x68
   16b30:	and	r0, sl, #4194304	; 0x400000
   16b34:	str	r9, [sp, #96]	; 0x60
   16b38:	orrs	sl, r0, r9
   16b3c:	str	r0, [sp, #12]
   16b40:	movwne	sl, #1
   16b44:	cmp	r7, #1
   16b48:	strb	sl, [sp, #107]	; 0x6b
   16b4c:	ldr	r0, [r6, #92]	; 0x5c
   16b50:	str	r0, [sp, #112]	; 0x70
   16b54:	ldrb	r2, [r6, #88]	; 0x58
   16b58:	vst1.32	{d16-d17}, [r1]
   16b5c:	ubfx	r1, r2, #3, #1
   16b60:	strb	r1, [sp, #106]	; 0x6a
   16b64:	ubfx	r1, r2, #2, #1
   16b68:	strb	r1, [sp, #105]	; 0x69
   16b6c:	blt	16be0 <__assert_fail@plt+0x5480>
   16b70:	ldr	r6, [sp, #28]
   16b74:	cmp	r0, #2
   16b78:	blt	16ba0 <__assert_fail@plt+0x5440>
   16b7c:	mov	r8, #12
   16b80:	cmn	r6, #-1073741823	; 0xc0000001
   16b84:	bhi	170ac <__assert_fail@plt+0x594c>
   16b88:	lsl	r1, r6, #2
   16b8c:	mov	r0, #0
   16b90:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   16b94:	cmp	r0, #0
   16b98:	beq	170ac <__assert_fail@plt+0x594c>
   16b9c:	str	r0, [sp, #40]	; 0x28
   16ba0:	cmp	sl, #0
   16ba4:	mov	r4, #0
   16ba8:	mov	sl, #0
   16bac:	beq	16bd0 <__assert_fail@plt+0x5470>
   16bb0:	mov	r0, #0
   16bb4:	mov	r1, r6
   16bb8:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   16bbc:	cmp	r0, #0
   16bc0:	beq	170a8 <__assert_fail@plt+0x5948>
   16bc4:	mov	r4, r0
   16bc8:	mov	sl, #1
   16bcc:	str	r0, [sp, #36]	; 0x24
   16bd0:	ldr	r0, [sp, #20]
   16bd4:	str	r6, [sp, #68]	; 0x44
   16bd8:	ldr	r0, [r0, #92]	; 0x5c
   16bdc:	b	16be4 <__assert_fail@plt+0x5484>
   16be0:	mov	r6, #0
   16be4:	ldr	r1, [sp, #12]
   16be8:	cmp	sl, #0
   16bec:	moveq	r4, r5
   16bf0:	str	r4, [sp, #36]	; 0x24
   16bf4:	cmp	r1, #0
   16bf8:	beq	16cdc <__assert_fail@plt+0x557c>
   16bfc:	cmp	r0, #2
   16c00:	blt	16cf4 <__assert_fail@plt+0x5594>
   16c04:	add	r0, sp, #32
   16c08:	bl	1bad0 <__assert_fail@plt+0xa370>
   16c0c:	ldr	r9, [sp, #20]
   16c10:	cmp	r0, #0
   16c14:	bne	16cd4 <__assert_fail@plt+0x5574>
   16c18:	add	sl, sp, #32
   16c1c:	ldr	r0, [sp, #64]	; 0x40
   16c20:	cmp	r0, r7
   16c24:	bge	16df0 <__assert_fail@plt+0x5690>
   16c28:	ldr	r0, [r9, #92]	; 0x5c
   16c2c:	ldr	r2, [sp, #60]	; 0x3c
   16c30:	ldr	r1, [sp, #68]	; 0x44
   16c34:	add	r0, r0, r2
   16c38:	cmp	r1, r0
   16c3c:	bgt	16df0 <__assert_fail@plt+0x5690>
   16c40:	ldr	r0, [sp, #112]	; 0x70
   16c44:	lsl	r6, r1, #1
   16c48:	cmp	r0, #2
   16c4c:	blt	16c9c <__assert_fail@plt+0x553c>
   16c50:	mov	r8, #12
   16c54:	cmn	r6, #-1073741823	; 0xc0000001
   16c58:	bhi	170ac <__assert_fail@plt+0x594c>
   16c5c:	ldr	r0, [sp, #40]	; 0x28
   16c60:	lsl	r4, r1, #3
   16c64:	mov	r1, r4
   16c68:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   16c6c:	cmp	r0, #0
   16c70:	beq	170ac <__assert_fail@plt+0x594c>
   16c74:	str	r0, [sp, #40]	; 0x28
   16c78:	ldr	r0, [sp, #44]	; 0x2c
   16c7c:	cmp	r0, #0
   16c80:	beq	16c9c <__assert_fail@plt+0x553c>
   16c84:	mov	r1, r4
   16c88:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   16c8c:	cmp	r0, #0
   16c90:	beq	170ac <__assert_fail@plt+0x594c>
   16c94:	ldr	r9, [sp, #20]
   16c98:	str	r0, [sp, #44]	; 0x2c
   16c9c:	ldrb	r0, [sp, #107]	; 0x6b
   16ca0:	cmp	r0, #0
   16ca4:	beq	16cc0 <__assert_fail@plt+0x5560>
   16ca8:	ldr	r0, [sp, #36]	; 0x24
   16cac:	mov	r1, r6
   16cb0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   16cb4:	cmp	r0, #0
   16cb8:	beq	170a8 <__assert_fail@plt+0x5948>
   16cbc:	str	r0, [sp, #36]	; 0x24
   16cc0:	mov	r0, sl
   16cc4:	str	r6, [sp, #68]	; 0x44
   16cc8:	bl	1bad0 <__assert_fail@plt+0xa370>
   16ccc:	cmp	r0, #0
   16cd0:	beq	16c1c <__assert_fail@plt+0x54bc>
   16cd4:	mov	r8, r0
   16cd8:	b	170ac <__assert_fail@plt+0x594c>
   16cdc:	cmp	r0, #2
   16ce0:	blt	16d60 <__assert_fail@plt+0x5600>
   16ce4:	add	r0, sp, #32
   16ce8:	bl	1c190 <__assert_fail@plt+0xaa30>
   16cec:	ldr	r9, [sp, #20]
   16cf0:	b	16df0 <__assert_fail@plt+0x5690>
   16cf4:	cmp	r6, r7
   16cf8:	movgt	r6, r7
   16cfc:	cmp	r6, #1
   16d00:	blt	16dcc <__assert_fail@plt+0x566c>
   16d04:	mov	r0, #0
   16d08:	mov	r4, #0
   16d0c:	b	16d1c <__assert_fail@plt+0x55bc>
   16d10:	ldr	r5, [sp, #32]
   16d14:	ldr	r0, [sp, #56]	; 0x38
   16d18:	ldr	r9, [sp, #96]	; 0x60
   16d1c:	add	r0, r5, r0
   16d20:	cmp	r9, #0
   16d24:	ldrb	r5, [r0, r4]
   16d28:	ldrbne	r5, [r9, r5]
   16d2c:	add	r0, r5, #128	; 0x80
   16d30:	lsr	r0, r0, #7
   16d34:	cmp	r0, #2
   16d38:	bhi	16d48 <__assert_fail@plt+0x55e8>
   16d3c:	bl	115ec <__ctype_toupper_loc@plt>
   16d40:	ldr	r0, [r0]
   16d44:	ldr	r5, [r0, r5, lsl #2]
   16d48:	ldr	r0, [sp, #36]	; 0x24
   16d4c:	strb	r5, [r0, r4]
   16d50:	add	r4, r4, #1
   16d54:	cmp	r4, r6
   16d58:	blt	16d10 <__assert_fail@plt+0x55b0>
   16d5c:	b	16dd0 <__assert_fail@plt+0x5670>
   16d60:	cmp	r9, #0
   16d64:	beq	16dd0 <__assert_fail@plt+0x5670>
   16d68:	cmp	r6, r7
   16d6c:	movgt	r6, r7
   16d70:	cmp	r6, #1
   16d74:	blt	16de0 <__assert_fail@plt+0x5680>
   16d78:	ldrb	r0, [r5]
   16d7c:	cmp	r6, #1
   16d80:	ldrb	r0, [r9, r0]
   16d84:	ldr	r9, [sp, #20]
   16d88:	strb	r0, [r4]
   16d8c:	mov	r0, #1
   16d90:	beq	16de8 <__assert_fail@plt+0x5688>
   16d94:	mov	r0, #1
   16d98:	ldr	r1, [sp, #32]
   16d9c:	ldr	r3, [sp, #56]	; 0x38
   16da0:	ldr	r7, [sp, #96]	; 0x60
   16da4:	ldr	r2, [sp, #36]	; 0x24
   16da8:	add	r1, r1, r3
   16dac:	ldrb	r1, [r1, r0]
   16db0:	ldrb	r1, [r7, r1]
   16db4:	strb	r1, [r2, r0]
   16db8:	add	r0, r0, #1
   16dbc:	cmp	r0, r6
   16dc0:	blt	16d98 <__assert_fail@plt+0x5638>
   16dc4:	mov	r0, r6
   16dc8:	b	16de8 <__assert_fail@plt+0x5688>
   16dcc:	mov	r6, #0
   16dd0:	ldr	r9, [sp, #20]
   16dd4:	str	r6, [sp, #64]	; 0x40
   16dd8:	str	r6, [sp, #60]	; 0x3c
   16ddc:	b	16df0 <__assert_fail@plt+0x5690>
   16de0:	ldr	r9, [sp, #20]
   16de4:	mov	r0, #0
   16de8:	str	r0, [sp, #64]	; 0x40
   16dec:	str	r0, [sp, #60]	; 0x3c
   16df0:	ldr	sl, [sp, #16]
   16df4:	mov	r5, #0
   16df8:	ldr	r4, [sp, #24]
   16dfc:	sub	r8, fp, #48	; 0x30
   16e00:	add	r6, sp, #32
   16e04:	str	r5, [fp, #-52]	; 0xffffffcc
   16e08:	mov	r0, r8
   16e0c:	mov	r1, r6
   16e10:	str	r5, [sl, #24]
   16e14:	orr	r2, r4, #8388608	; 0x800000
   16e18:	ldr	r7, [sl]
   16e1c:	str	r4, [r7, #128]	; 0x80
   16e20:	bl	1c708 <__assert_fail@plt+0xafa8>
   16e24:	ldr	r1, [sp, #72]	; 0x48
   16e28:	mov	r2, r8
   16e2c:	mov	r3, r4
   16e30:	str	r5, [sp]
   16e34:	add	r0, r1, r0
   16e38:	mov	r1, sl
   16e3c:	str	r0, [sp, #72]	; 0x48
   16e40:	sub	r0, fp, #52	; 0x34
   16e44:	str	r0, [sp, #4]
   16e48:	mov	r0, r6
   16e4c:	bl	1c380 <__assert_fail@plt+0xac20>
   16e50:	mov	r4, r0
   16e54:	cmp	r0, #0
   16e58:	bne	16e68 <__assert_fail@plt+0x5708>
   16e5c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16e60:	cmp	r0, #0
   16e64:	bne	17144 <__assert_fail@plt+0x59e4>
   16e68:	ldr	r1, [r7, #64]	; 0x40
   16e6c:	cmp	r1, #31
   16e70:	beq	170dc <__assert_fail@plt+0x597c>
   16e74:	ldr	r0, [r7, #56]	; 0x38
   16e78:	add	r2, r1, #1
   16e7c:	add	r0, r0, r1, lsl #5
   16e80:	mov	r1, #0
   16e84:	vmov.i32	q8, #0	; 0x00000000
   16e88:	str	r2, [r7, #64]	; 0x40
   16e8c:	add	r6, r0, #4
   16e90:	mov	r2, #2
   16e94:	str	r1, [r0, #20]
   16e98:	str	r1, [r0, #24]
   16e9c:	str	r2, [r0, #28]
   16ea0:	mov	r0, #28
   16ea4:	mov	r1, r6
   16ea8:	vst1.32	{d16-d17}, [r1], r0
   16eac:	mvn	r0, #0
   16eb0:	str	r0, [r1]
   16eb4:	cmp	r4, #0
   16eb8:	mov	r0, r6
   16ebc:	beq	16f10 <__assert_fail@plt+0x57b0>
   16ec0:	ldr	r1, [r7, #64]	; 0x40
   16ec4:	cmp	r1, #31
   16ec8:	beq	17114 <__assert_fail@plt+0x59b4>
   16ecc:	ldr	r0, [r7, #56]	; 0x38
   16ed0:	add	r2, r1, #1
   16ed4:	add	r0, r0, r1, lsl #5
   16ed8:	mov	r1, #0
   16edc:	mvn	r3, #0
   16ee0:	cmp	r6, #0
   16ee4:	str	r2, [r7, #64]	; 0x40
   16ee8:	str	r1, [r0, #4]!
   16eec:	mov	r2, #16
   16ef0:	add	ip, r0, #20
   16ef4:	stmib	r0, {r4, r6}
   16ef8:	str	r1, [r0, #12]
   16efc:	str	r1, [r0, #16]
   16f00:	stm	ip, {r1, r2, r3}
   16f04:	str	r0, [r4]
   16f08:	beq	1713c <__assert_fail@plt+0x59dc>
   16f0c:	str	r0, [r6]
   16f10:	cmp	r6, #0
   16f14:	cmpne	r0, #0
   16f18:	beq	1713c <__assert_fail@plt+0x59dc>
   16f1c:	str	r0, [r9, #52]	; 0x34
   16f20:	ldr	r8, [sl]
   16f24:	ldr	r0, [r8, #4]
   16f28:	lsl	r0, r0, #2
   16f2c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   16f30:	str	r0, [r8, #12]
   16f34:	ldr	r0, [r8, #4]
   16f38:	lsl	r0, r0, #2
   16f3c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   16f40:	str	r0, [r8, #16]
   16f44:	ldr	r0, [r8, #4]
   16f48:	add	r0, r0, r0, lsl #1
   16f4c:	lsl	r0, r0, #2
   16f50:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   16f54:	str	r0, [r8, #20]
   16f58:	ldr	r0, [r8, #4]
   16f5c:	add	r0, r0, r0, lsl #1
   16f60:	lsl	r0, r0, #2
   16f64:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   16f68:	str	r0, [r8, #24]
   16f6c:	ldr	r1, [r8, #12]
   16f70:	cmp	r1, #0
   16f74:	ldrne	r1, [r8, #16]
   16f78:	cmpne	r1, #0
   16f7c:	beq	16f90 <__assert_fail@plt+0x5830>
   16f80:	cmp	r0, #0
   16f84:	ldrne	r0, [r8, #20]
   16f88:	cmpne	r0, #0
   16f8c:	bne	1703c <__assert_fail@plt+0x58dc>
   16f90:	mov	r0, #12
   16f94:	str	r0, [fp, #-52]	; 0xffffffcc
   16f98:	ldr	r9, [sp, #20]
   16f9c:	ldr	r4, [sl]
   16fa0:	ldr	r0, [r4, #56]	; 0x38
   16fa4:	cmp	r0, #0
   16fa8:	beq	16fc0 <__assert_fail@plt+0x5860>
   16fac:	ldr	r5, [r0]
   16fb0:	bl	14538 <__assert_fail@plt+0x2dd8>
   16fb4:	cmp	r5, #0
   16fb8:	mov	r0, r5
   16fbc:	bne	16fac <__assert_fail@plt+0x584c>
   16fc0:	mov	r0, #31
   16fc4:	mov	r5, #0
   16fc8:	str	r0, [r4, #64]	; 0x40
   16fcc:	str	r5, [r4, #52]	; 0x34
   16fd0:	str	r5, [r4, #56]	; 0x38
   16fd4:	ldr	r0, [r4, #16]
   16fd8:	bl	14538 <__assert_fail@plt+0x2dd8>
   16fdc:	str	r5, [r4, #16]
   16fe0:	ldr	r0, [sp, #40]	; 0x28
   16fe4:	bl	14538 <__assert_fail@plt+0x2dd8>
   16fe8:	ldr	r0, [sp, #44]	; 0x2c
   16fec:	bl	14538 <__assert_fail@plt+0x2dd8>
   16ff0:	ldrb	r0, [sp, #107]	; 0x6b
   16ff4:	cmp	r0, #0
   16ff8:	beq	17004 <__assert_fail@plt+0x58a4>
   16ffc:	ldr	r0, [sp, #36]	; 0x24
   17000:	bl	14538 <__assert_fail@plt+0x2dd8>
   17004:	ldr	r0, [sp, #8]
   17008:	cmp	r0, #0
   1700c:	beq	17018 <__assert_fail@plt+0x58b8>
   17010:	add	r0, r9, #136	; 0x88
   17014:	bl	11430 <pthread_mutex_destroy@plt>
   17018:	mov	r0, r9
   1701c:	bl	1892c <__assert_fail@plt+0x71cc>
   17020:	mov	r0, #0
   17024:	str	r0, [sl]
   17028:	str	r0, [sl, #4]
   1702c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17030:	mov	r0, r4
   17034:	sub	sp, fp, #28
   17038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1703c:	ldr	r0, [sl, #24]
   17040:	lsl	r0, r0, #2
   17044:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   17048:	cmp	r0, #0
   1704c:	str	r0, [r8, #132]	; 0x84
   17050:	str	r8, [sp, #28]
   17054:	beq	170a0 <__assert_fail@plt+0x5940>
   17058:	ldr	r1, [sl, #24]
   1705c:	cmp	r1, #0
   17060:	beq	17184 <__assert_fail@plt+0x5a24>
   17064:	mov	r2, #0
   17068:	cmp	r1, #4
   1706c:	bcc	17174 <__assert_fail@plt+0x5a14>
   17070:	add	r3, pc, #984	; 0x3d8
   17074:	bic	r2, r1, #3
   17078:	vmov.i32	q8, #4	; 0x00000004
   1707c:	mov	r7, r0
   17080:	vld1.64	{d18-d19}, [r3 :128]
   17084:	mov	r3, r2
   17088:	vadd.i32	q10, q9, q8
   1708c:	vst1.32	{d18-d19}, [r7]!
   17090:	subs	r3, r3, #4
   17094:	vorr	q9, q10, q10
   17098:	bne	17088 <__assert_fail@plt+0x5928>
   1709c:	b	1717c <__assert_fail@plt+0x5a1c>
   170a0:	add	r8, r8, #52	; 0x34
   170a4:	b	17364 <__assert_fail@plt+0x5c04>
   170a8:	mov	r8, #12
   170ac:	ldr	sl, [sp, #16]
   170b0:	str	r8, [fp, #-52]	; 0xffffffcc
   170b4:	b	16f98 <__assert_fail@plt+0x5838>
   170b8:	mov	r0, r6
   170bc:	mov	r1, #160	; 0xa0
   170c0:	mov	r4, #160	; 0xa0
   170c4:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   170c8:	cmp	r0, #0
   170cc:	beq	17104 <__assert_fail@plt+0x59a4>
   170d0:	mov	r6, r0
   170d4:	stm	r9, {r0, r4}
   170d8:	b	1672c <__assert_fail@plt+0x4fcc>
   170dc:	mov	r0, #996	; 0x3e4
   170e0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   170e4:	cmp	r0, #0
   170e8:	beq	17160 <__assert_fail@plt+0x5a00>
   170ec:	ldr	r1, [r7, #56]	; 0x38
   170f0:	str	r1, [r0]
   170f4:	mov	r1, #0
   170f8:	str	r1, [r7, #64]	; 0x40
   170fc:	str	r0, [r7, #56]	; 0x38
   17100:	b	16e78 <__assert_fail@plt+0x5718>
   17104:	mov	r4, #12
   17108:	mov	r0, r4
   1710c:	sub	sp, fp, #28
   17110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17114:	mov	r0, #996	; 0x3e4
   17118:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1711c:	cmp	r0, #0
   17120:	beq	1713c <__assert_fail@plt+0x59dc>
   17124:	ldr	r1, [r7, #56]	; 0x38
   17128:	str	r1, [r0]
   1712c:	mov	r1, #0
   17130:	str	r1, [r7, #64]	; 0x40
   17134:	str	r0, [r7, #56]	; 0x38
   17138:	b	16ed0 <__assert_fail@plt+0x5770>
   1713c:	mov	r0, #12
   17140:	str	r0, [fp, #-52]	; 0xffffffcc
   17144:	mov	r0, #0
   17148:	str	r0, [r9, #52]	; 0x34
   1714c:	ldr	r4, [sl]
   17150:	ldr	r0, [r4, #56]	; 0x38
   17154:	cmp	r0, #0
   17158:	bne	16fac <__assert_fail@plt+0x584c>
   1715c:	b	16fc0 <__assert_fail@plt+0x5860>
   17160:	mov	r6, #0
   17164:	cmp	r4, #0
   17168:	mov	r0, r6
   1716c:	bne	16ec0 <__assert_fail@plt+0x5760>
   17170:	b	16f10 <__assert_fail@plt+0x57b0>
   17174:	str	r2, [r0, r2, lsl #2]
   17178:	add	r2, r2, #1
   1717c:	cmp	r1, r2
   17180:	bne	17174 <__assert_fail@plt+0x5a14>
   17184:	ldr	r2, [r8, #52]!	; 0x34
   17188:	ldrb	r1, [r2, #24]
   1718c:	cmp	r1, #17
   17190:	beq	171c0 <__assert_fail@plt+0x5a60>
   17194:	cmp	r1, #4
   17198:	bne	17214 <__assert_fail@plt+0x5ab4>
   1719c:	ldr	r1, [r2, #20]
   171a0:	ldr	r7, [sp, #28]
   171a4:	mov	r3, #1
   171a8:	ldr	r0, [r0, r1, lsl #2]
   171ac:	str	r0, [r2, #20]
   171b0:	ldr	r1, [r7, #80]	; 0x50
   171b4:	orr	r0, r1, r3, lsl r0
   171b8:	str	r0, [r7, #80]	; 0x50
   171bc:	b	17214 <__assert_fail@plt+0x5ab4>
   171c0:	ldr	r1, [r2, #4]
   171c4:	cmp	r1, #0
   171c8:	beq	17214 <__assert_fail@plt+0x5ab4>
   171cc:	ldrb	r3, [r1, #24]
   171d0:	cmp	r3, #17
   171d4:	bne	17214 <__assert_fail@plt+0x5ab4>
   171d8:	ldr	r3, [r1, #4]
   171dc:	ldr	r1, [r1, #20]
   171e0:	cmp	r3, #0
   171e4:	str	r3, [r2, #4]
   171e8:	strne	r2, [r3]
   171ec:	cmp	r1, #31
   171f0:	ldr	r3, [r2, #20]
   171f4:	ldr	r3, [r0, r3, lsl #2]
   171f8:	str	r3, [r0, r1, lsl #2]
   171fc:	bgt	17214 <__assert_fail@plt+0x5ab4>
   17200:	ldr	r7, [sp, #28]
   17204:	mov	r3, #1
   17208:	ldr	r0, [r7, #80]	; 0x50
   1720c:	bic	r0, r0, r3, lsl r1
   17210:	b	171b8 <__assert_fail@plt+0x5a58>
   17214:	mov	r0, #1
   17218:	b	1723c <__assert_fail@plt+0x5adc>
   1721c:	ldr	r2, [r7, #20]
   17220:	ldr	r3, [sp, #28]
   17224:	ldr	r1, [r1, r2, lsl #2]
   17228:	str	r1, [r7, #20]
   1722c:	ldr	r2, [r3, #80]	; 0x50
   17230:	orr	r1, r2, r0, lsl r1
   17234:	mov	r2, r7
   17238:	str	r1, [r3, #80]	; 0x50
   1723c:	ldr	r7, [r2, #4]
   17240:	cmp	r7, #0
   17244:	bne	17274 <__assert_fail@plt+0x5b14>
   17248:	mov	r3, #0
   1724c:	ldr	r7, [r2, #8]
   17250:	mov	r1, r2
   17254:	cmp	r7, r3
   17258:	cmpne	r7, #0
   1725c:	bne	17274 <__assert_fail@plt+0x5b14>
   17260:	ldr	r2, [r1]
   17264:	mov	r3, r1
   17268:	cmp	r2, #0
   1726c:	bne	1724c <__assert_fail@plt+0x5aec>
   17270:	b	17310 <__assert_fail@plt+0x5bb0>
   17274:	ldrb	r1, [r7, #24]
   17278:	cmp	r1, #17
   1727c:	beq	172a4 <__assert_fail@plt+0x5b44>
   17280:	cmp	r1, #4
   17284:	mov	r2, r7
   17288:	bne	1723c <__assert_fail@plt+0x5adc>
   1728c:	ldr	r1, [sp, #28]
   17290:	mov	r2, r7
   17294:	ldr	r1, [r1, #132]	; 0x84
   17298:	cmp	r1, #0
   1729c:	beq	1723c <__assert_fail@plt+0x5adc>
   172a0:	b	1721c <__assert_fail@plt+0x5abc>
   172a4:	ldr	r3, [r7, #4]
   172a8:	mov	r2, r7
   172ac:	cmp	r3, #0
   172b0:	beq	1723c <__assert_fail@plt+0x5adc>
   172b4:	ldrb	r1, [r3, #24]
   172b8:	mov	r2, r7
   172bc:	cmp	r1, #17
   172c0:	bne	1723c <__assert_fail@plt+0x5adc>
   172c4:	ldr	r1, [r3, #4]
   172c8:	ldr	r2, [sp, #28]
   172cc:	ldr	r3, [r3, #20]
   172d0:	cmp	r1, #0
   172d4:	str	r1, [r7, #4]
   172d8:	strne	r7, [r1]
   172dc:	cmp	r3, #31
   172e0:	ldr	r1, [r7, #20]
   172e4:	ldr	r2, [r2, #132]	; 0x84
   172e8:	ldr	r1, [r2, r1, lsl #2]
   172ec:	str	r1, [r2, r3, lsl #2]
   172f0:	mov	r2, r7
   172f4:	bgt	1723c <__assert_fail@plt+0x5adc>
   172f8:	ldr	r2, [sp, #28]
   172fc:	ldr	r1, [r2, #80]	; 0x50
   17300:	bic	r1, r1, r0, lsl r3
   17304:	str	r1, [r2, #80]	; 0x50
   17308:	mov	r2, r7
   1730c:	b	1723c <__assert_fail@plt+0x5adc>
   17310:	ldr	r1, [sl, #24]
   17314:	cmp	r1, #0
   17318:	beq	1734c <__assert_fail@plt+0x5bec>
   1731c:	ldr	r0, [sp, #28]
   17320:	mov	r2, #0
   17324:	ldr	r0, [r0, #132]	; 0x84
   17328:	ldr	r3, [r0, r2, lsl #2]
   1732c:	cmp	r2, r3
   17330:	bne	17340 <__assert_fail@plt+0x5be0>
   17334:	add	r2, r2, #1
   17338:	cmp	r2, r1
   1733c:	bcc	17328 <__assert_fail@plt+0x5bc8>
   17340:	cmp	r2, r1
   17344:	beq	17354 <__assert_fail@plt+0x5bf4>
   17348:	b	17364 <__assert_fail@plt+0x5c04>
   1734c:	ldr	r0, [sp, #28]
   17350:	ldr	r0, [r0, #132]	; 0x84
   17354:	bl	14538 <__assert_fail@plt+0x2dd8>
   17358:	ldr	r1, [sp, #28]
   1735c:	mov	r0, #0
   17360:	str	r0, [r1, #132]	; 0x84
   17364:	ldr	r0, [r8]
   17368:	mov	r7, #0
   1736c:	sub	r9, fp, #48	; 0x30
   17370:	mov	r4, r0
   17374:	ldr	r0, [r0, #4]
   17378:	cmp	r0, #0
   1737c:	bne	17370 <__assert_fail@plt+0x5c10>
   17380:	ldr	r0, [r4, #8]
   17384:	cmp	r0, #0
   17388:	bne	17370 <__assert_fail@plt+0x5c10>
   1738c:	mov	r3, #0
   17390:	cmp	r3, #0
   17394:	str	r7, [fp, #-48]	; 0xffffffd0
   17398:	beq	173e8 <__assert_fail@plt+0x5c88>
   1739c:	ldrb	r0, [r3, #24]
   173a0:	cmp	r0, #17
   173a4:	bne	173e8 <__assert_fail@plt+0x5c88>
   173a8:	ldrb	r2, [sl, #28]
   173ac:	ldr	r1, [sl]
   173b0:	mov	r0, r9
   173b4:	bl	20c88 <__assert_fail@plt+0xf528>
   173b8:	cmp	r0, #0
   173bc:	str	r0, [r4, #4]
   173c0:	strne	r4, [r0]
   173c4:	ldr	r3, [r4, #8]
   173c8:	cmp	r3, #0
   173cc:	bne	173f4 <__assert_fail@plt+0x5c94>
   173d0:	b	1741c <__assert_fail@plt+0x5cbc>
   173d4:	ldr	r3, [r1, #4]
   173d8:	mov	r4, r1
   173dc:	cmp	r3, #0
   173e0:	str	r7, [fp, #-48]	; 0xffffffd0
   173e4:	bne	1739c <__assert_fail@plt+0x5c3c>
   173e8:	ldr	r3, [r4, #8]
   173ec:	cmp	r3, #0
   173f0:	beq	1741c <__assert_fail@plt+0x5cbc>
   173f4:	ldrb	r0, [r3, #24]
   173f8:	cmp	r0, #17
   173fc:	bne	1741c <__assert_fail@plt+0x5cbc>
   17400:	ldrb	r2, [sl, #28]
   17404:	ldr	r1, [sl]
   17408:	mov	r0, r9
   1740c:	bl	20c88 <__assert_fail@plt+0xf528>
   17410:	cmp	r0, #0
   17414:	str	r0, [r4, #8]
   17418:	strne	r4, [r0]
   1741c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17420:	cmp	r0, #0
   17424:	bne	16f94 <__assert_fail@plt+0x5834>
   17428:	ldr	r1, [r4]
   1742c:	cmp	r1, #0
   17430:	beq	17460 <__assert_fail@plt+0x5d00>
   17434:	ldr	r0, [r1, #8]
   17438:	cmp	r0, r4
   1743c:	cmpne	r0, #0
   17440:	beq	173d4 <__assert_fail@plt+0x5c74>
   17444:	b	17370 <__assert_fail@plt+0x5c10>
   17448:	nop	{0}
   1744c:	nop	{0}
   17450:	andeq	r0, r0, r0
   17454:	andeq	r0, r0, r1
   17458:	andeq	r0, r0, r2
   1745c:	andeq	r0, r0, r3
   17460:	ldr	r0, [sp, #28]
   17464:	ldr	r0, [r0, #52]	; 0x34
   17468:	mov	r4, r0
   1746c:	ldr	r0, [r0, #4]
   17470:	cmp	r0, #0
   17474:	bne	17468 <__assert_fail@plt+0x5d08>
   17478:	ldr	r0, [r4, #8]
   1747c:	cmp	r0, #0
   17480:	bne	17468 <__assert_fail@plt+0x5d08>
   17484:	ldr	r2, [r4, #24]
   17488:	uxtb	r0, r2
   1748c:	cmp	r0, #16
   17490:	bne	174d4 <__assert_fail@plt+0x5d74>
   17494:	ldr	r0, [r4, #4]
   17498:	ldr	r1, [r0, #12]
   1749c:	str	r1, [r4, #12]
   174a0:	ldr	r0, [r0, #28]
   174a4:	str	r0, [r4, #28]
   174a8:	ldr	r1, [r4]
   174ac:	cmp	r1, #0
   174b0:	beq	17524 <__assert_fail@plt+0x5dc4>
   174b4:	ldr	r0, [r1, #8]
   174b8:	cmp	r0, r4
   174bc:	mov	r4, r1
   174c0:	beq	17484 <__assert_fail@plt+0x5d24>
   174c4:	cmp	r0, #0
   174c8:	mov	r4, r1
   174cc:	beq	17484 <__assert_fail@plt+0x5d24>
   174d0:	b	17468 <__assert_fail@plt+0x5d08>
   174d4:	str	r4, [r4, #12]
   174d8:	ldr	r0, [sp, #28]
   174dc:	ldr	r1, [r4, #20]
   174e0:	bl	20f70 <__assert_fail@plt+0xf810>
   174e4:	cmn	r0, #1
   174e8:	str	r0, [r4, #28]
   174ec:	beq	16f90 <__assert_fail@plt+0x5830>
   174f0:	ldrb	r1, [r4, #24]
   174f4:	cmp	r1, #12
   174f8:	bne	17518 <__assert_fail@plt+0x5db8>
   174fc:	ldr	r1, [sp, #28]
   17500:	ldr	r2, [r4, #20]
   17504:	ldr	r1, [r1]
   17508:	add	r0, r1, r0, lsl #3
   1750c:	ldr	r1, [r0, #4]
   17510:	bfi	r1, r2, #8, #10
   17514:	str	r1, [r0, #4]
   17518:	ldr	r1, [r4]
   1751c:	cmp	r1, #0
   17520:	bne	174b4 <__assert_fail@plt+0x5d54>
   17524:	ldr	r4, [r8]
   17528:	ldrb	r0, [r4, #24]
   1752c:	cmp	r0, #16
   17530:	beq	1754c <__assert_fail@plt+0x5dec>
   17534:	ldr	r8, [sp, #28]
   17538:	cmp	r0, #11
   1753c:	bne	17568 <__assert_fail@plt+0x5e08>
   17540:	ldr	r0, [r4, #4]
   17544:	str	r4, [r0, #16]
   17548:	b	17588 <__assert_fail@plt+0x5e28>
   1754c:	ldmib	r4, {r0, r1}
   17550:	ldr	r8, [sp, #28]
   17554:	ldr	r2, [r1, #12]
   17558:	str	r2, [r0, #16]
   1755c:	ldr	r2, [r4, #16]
   17560:	str	r2, [r1, #16]
   17564:	b	17588 <__assert_fail@plt+0x5e28>
   17568:	ldr	r0, [r4, #4]
   1756c:	cmp	r0, #0
   17570:	ldrne	r1, [r4, #16]
   17574:	strne	r1, [r0, #16]
   17578:	ldr	r1, [r4, #8]
   1757c:	cmp	r1, #0
   17580:	ldrne	r2, [r4, #16]
   17584:	strne	r2, [r1, #16]
   17588:	mov	r1, r4
   1758c:	b	175ac <__assert_fail@plt+0x5e4c>
   17590:	ldr	r3, [r1, #16]
   17594:	str	r3, [r2, #16]
   17598:	b	175ac <__assert_fail@plt+0x5e4c>
   1759c:	ldmib	r1, {r0, r2}
   175a0:	ldr	r3, [r2, #12]
   175a4:	str	r3, [r0, #16]
   175a8:	b	17590 <__assert_fail@plt+0x5e30>
   175ac:	cmp	r0, #0
   175b0:	bne	175e0 <__assert_fail@plt+0x5e80>
   175b4:	mov	r3, #0
   175b8:	ldr	r0, [r1, #8]
   175bc:	mov	r2, r1
   175c0:	cmp	r0, r3
   175c4:	cmpne	r0, #0
   175c8:	bne	175e0 <__assert_fail@plt+0x5e80>
   175cc:	ldr	r1, [r2]
   175d0:	mov	r3, r2
   175d4:	cmp	r1, #0
   175d8:	bne	175b8 <__assert_fail@plt+0x5e58>
   175dc:	b	17624 <__assert_fail@plt+0x5ec4>
   175e0:	mov	r1, r0
   175e4:	ldrb	r0, [r0, #24]
   175e8:	cmp	r0, #16
   175ec:	beq	1759c <__assert_fail@plt+0x5e3c>
   175f0:	cmp	r0, #11
   175f4:	bne	17604 <__assert_fail@plt+0x5ea4>
   175f8:	ldr	r0, [r1, #4]
   175fc:	str	r1, [r0, #16]
   17600:	b	175ac <__assert_fail@plt+0x5e4c>
   17604:	ldr	r0, [r1, #4]
   17608:	cmp	r0, #0
   1760c:	ldrne	r2, [r1, #16]
   17610:	strne	r2, [r0, #16]
   17614:	ldr	r2, [r1, #8]
   17618:	cmp	r2, #0
   1761c:	beq	175ac <__assert_fail@plt+0x5e4c>
   17620:	b	17590 <__assert_fail@plt+0x5e30>
   17624:	mov	r0, r8
   17628:	mov	r1, r4
   1762c:	bl	20af0 <__assert_fail@plt+0xf390>
   17630:	cmp	r0, #0
   17634:	bne	16f94 <__assert_fail@plt+0x5834>
   17638:	ldr	r7, [r4, #4]
   1763c:	cmp	r7, #0
   17640:	bne	17670 <__assert_fail@plt+0x5f10>
   17644:	mov	r1, #0
   17648:	ldr	r7, [r4, #8]
   1764c:	mov	r0, r4
   17650:	cmp	r7, r1
   17654:	cmpne	r7, #0
   17658:	bne	17670 <__assert_fail@plt+0x5f10>
   1765c:	ldr	r4, [r0]
   17660:	mov	r1, r0
   17664:	cmp	r4, #0
   17668:	bne	17648 <__assert_fail@plt+0x5ee8>
   1766c:	b	1768c <__assert_fail@plt+0x5f2c>
   17670:	mov	r0, r8
   17674:	mov	r1, r7
   17678:	bl	20af0 <__assert_fail@plt+0xf390>
   1767c:	cmp	r0, #0
   17680:	mov	r4, r7
   17684:	beq	17638 <__assert_fail@plt+0x5ed8>
   17688:	b	16f94 <__assert_fail@plt+0x5834>
   1768c:	ldr	r0, [r8, #8]
   17690:	cmp	r0, #0
   17694:	beq	17744 <__assert_fail@plt+0x5fe4>
   17698:	mov	r5, #0
   1769c:	sub	r4, fp, #48	; 0x30
   176a0:	mov	r7, #0
   176a4:	ldr	r0, [r8, #24]
   176a8:	add	r6, r7, r7, lsl #1
   176ac:	add	r0, r0, r6, lsl #2
   176b0:	ldr	r0, [r0, #4]
   176b4:	cmp	r0, #0
   176b8:	beq	176c4 <__assert_fail@plt+0x5f64>
   176bc:	mov	r1, r5
   176c0:	b	17704 <__assert_fail@plt+0x5fa4>
   176c4:	mov	r0, r4
   176c8:	mov	r1, r8
   176cc:	mov	r2, r7
   176d0:	mov	r3, #1
   176d4:	bl	21148 <__assert_fail@plt+0xf9e8>
   176d8:	cmp	r0, #0
   176dc:	bne	16f94 <__assert_fail@plt+0x5834>
   176e0:	ldr	r0, [r8, #24]
   176e4:	mov	r1, r5
   176e8:	add	r0, r0, r6, lsl #2
   176ec:	ldr	r0, [r0, #4]
   176f0:	cmp	r0, #0
   176f4:	bne	17704 <__assert_fail@plt+0x5fa4>
   176f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   176fc:	bl	14538 <__assert_fail@plt+0x2dd8>
   17700:	mov	r1, #1
   17704:	ldr	r2, [r8, #8]
   17708:	add	r0, r7, #1
   1770c:	subs	r3, r0, r2
   17710:	mov	r7, r3
   17714:	movwne	r3, #1
   17718:	movne	r7, r0
   1771c:	tst	r1, #1
   17720:	and	r5, r1, r3
   17724:	cmpeq	r0, r2
   17728:	bne	176a4 <__assert_fail@plt+0x5f44>
   1772c:	add	r0, r0, r0, lsl #1
   17730:	lsl	r0, r0, #2
   17734:	ldrb	r1, [sl, #28]
   17738:	tst	r1, #16
   1773c:	beq	17754 <__assert_fail@plt+0x5ff4>
   17740:	b	1776c <__assert_fail@plt+0x600c>
   17744:	mov	r0, #0
   17748:	ldrb	r1, [sl, #28]
   1774c:	tst	r1, #16
   17750:	bne	1776c <__assert_fail@plt+0x600c>
   17754:	ldr	r1, [sp, #16]
   17758:	ldr	r1, [r1, #24]
   1775c:	cmp	r1, #0
   17760:	ldrbne	r1, [r8, #88]	; 0x58
   17764:	tstne	r1, #1
   17768:	bne	17778 <__assert_fail@plt+0x6018>
   1776c:	ldr	r1, [r8, #76]	; 0x4c
   17770:	cmp	r1, #0
   17774:	beq	178a4 <__assert_fail@plt+0x6144>
   17778:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1777c:	cmp	r0, #0
   17780:	str	r0, [r8, #28]
   17784:	beq	17d6c <__assert_fail@plt+0x660c>
   17788:	ldr	r1, [r8, #8]
   1778c:	cmp	r1, #0
   17790:	beq	178a4 <__assert_fail@plt+0x6144>
   17794:	mov	r1, #0
   17798:	str	r1, [r0]
   1779c:	str	r1, [r0, #4]
   177a0:	str	r1, [r0, #8]
   177a4:	ldr	r0, [r8, #8]
   177a8:	cmp	r0, #2
   177ac:	bcc	177dc <__assert_fail@plt+0x607c>
   177b0:	mov	r2, #1
   177b4:	mov	r3, #12
   177b8:	ldr	r0, [r8, #28]
   177bc:	add	r2, r2, #1
   177c0:	str	r1, [r0, r3]!
   177c4:	add	r3, r3, #12
   177c8:	str	r1, [r0, #4]
   177cc:	str	r1, [r0, #8]
   177d0:	ldr	r0, [r8, #8]
   177d4:	cmp	r2, r0
   177d8:	bcc	177b8 <__assert_fail@plt+0x6058>
   177dc:	cmp	r0, #0
   177e0:	beq	178a4 <__assert_fail@plt+0x6144>
   177e4:	ldr	ip, [r8, #24]
   177e8:	mov	sl, #0
   177ec:	add	r9, sl, sl, lsl #1
   177f0:	add	r2, ip, r9, lsl #2
   177f4:	ldr	r3, [r2, #4]
   177f8:	cmp	r3, #1
   177fc:	blt	17898 <__assert_fail@plt+0x6138>
   17800:	ldr	r1, [r2, #8]
   17804:	mov	r6, #0
   17808:	str	r1, [sp, #24]
   1780c:	ldr	r0, [r1, r6, lsl #2]
   17810:	ldr	r5, [r8, #28]
   17814:	add	r0, r0, r0, lsl #1
   17818:	mov	r3, r5
   1781c:	ldr	r7, [r3, r0, lsl #2]!
   17820:	mov	r4, r3
   17824:	ldr	r2, [r4, #4]!
   17828:	cmp	r7, r2
   1782c:	bne	1786c <__assert_fail@plt+0x610c>
   17830:	mov	r1, #2
   17834:	add	r8, r5, r0, lsl #2
   17838:	add	r1, r1, r7, lsl #1
   1783c:	str	r1, [r3]
   17840:	lsl	r1, r1, #2
   17844:	ldr	r0, [r8, #8]!
   17848:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1784c:	cmp	r0, #0
   17850:	beq	17d6c <__assert_fail@plt+0x660c>
   17854:	str	r0, [r8]
   17858:	ldr	r8, [sp, #28]
   1785c:	ldr	r1, [sp, #24]
   17860:	ldr	r2, [r4]
   17864:	ldr	ip, [r8, #24]
   17868:	b	17874 <__assert_fail@plt+0x6114>
   1786c:	add	r0, r5, r0, lsl #2
   17870:	ldr	r0, [r0, #8]
   17874:	add	r3, r2, #1
   17878:	add	r6, r6, #1
   1787c:	str	r3, [r4]
   17880:	str	sl, [r0, r2, lsl #2]
   17884:	add	r0, ip, r9, lsl #2
   17888:	ldr	r0, [r0, #4]
   1788c:	cmp	r6, r0
   17890:	blt	1780c <__assert_fail@plt+0x60ac>
   17894:	ldr	r0, [r8, #8]
   17898:	add	sl, sl, #1
   1789c:	cmp	sl, r0
   178a0:	bcc	177ec <__assert_fail@plt+0x608c>
   178a4:	mov	r0, #0
   178a8:	ldr	r1, [sp, #16]
   178ac:	str	r0, [fp, #-52]	; 0xffffffcc
   178b0:	ldr	r0, [sp, #12]
   178b4:	cmp	r0, #0
   178b8:	bne	17a88 <__assert_fail@plt+0x6328>
   178bc:	ldr	r0, [sp, #20]
   178c0:	ldrb	r2, [r0, #88]	; 0x58
   178c4:	ands	r0, r2, #4
   178c8:	beq	17a88 <__assert_fail@plt+0x6328>
   178cc:	ldr	r0, [r1, #20]
   178d0:	cmp	r0, #0
   178d4:	bne	17a88 <__assert_fail@plt+0x6328>
   178d8:	ldr	r0, [sp, #20]
   178dc:	mov	r9, #0
   178e0:	ldr	r7, [r0, #8]
   178e4:	cmp	r7, #0
   178e8:	beq	17a58 <__assert_fail@plt+0x62f8>
   178ec:	ldr	r3, [r0]
   178f0:	mov	r8, #0
   178f4:	mov	ip, #1
   178f8:	mov	lr, #139	; 0x8b
   178fc:	mov	r6, #0
   17900:	mov	r4, #0
   17904:	add	r5, r3, r4, lsl #3
   17908:	ldrb	r1, [r5, #4]
   1790c:	sub	r1, r1, #1
   17910:	cmp	r1, #11
   17914:	bhi	17dd4 <__assert_fail@plt+0x6674>
   17918:	add	r0, pc, #0
   1791c:	ldr	pc, [r0, r1, lsl #2]
   17920:			; <UNDEFINED> instruction: 0x000179b4
   17924:	andeq	r7, r1, r0, asr r9
   17928:	andeq	r7, r1, r0, ror #18
   1792c:	andeq	r7, r1, r0, asr r9
   17930:	ldrdeq	r7, [r1], -r8
   17934:	andeq	r7, r1, r8, lsl #21
   17938:	ldrdeq	r7, [r1], -r4
   1793c:	andeq	r7, r1, r0, asr r9
   17940:	andeq	r7, r1, r0, asr r9
   17944:	andeq	r7, r1, r0, asr r9
   17948:	andeq	r7, r1, r0, asr r9
   1794c:	muleq	r1, r4, r9
   17950:	add	r4, r4, #1
   17954:	cmp	r4, r7
   17958:	bcc	17904 <__assert_fail@plt+0x61a4>
   1795c:	b	179e8 <__assert_fail@plt+0x6288>
   17960:	ldr	r5, [r3, r4, lsl #3]
   17964:	ldr	r0, [r5, #16]
   17968:	cmp	r0, #0
   1796c:	bne	17a88 <__assert_fail@plt+0x6328>
   17970:	ldr	r0, [r5, #20]
   17974:	cmp	r0, #0
   17978:	ldreq	r0, [r5, #24]
   1797c:	cmpeq	r0, #0
   17980:	bne	17a88 <__assert_fail@plt+0x6328>
   17984:	ldr	r0, [r5, #28]
   17988:	cmp	r0, #0
   1798c:	beq	17950 <__assert_fail@plt+0x61f0>
   17990:	b	17a88 <__assert_fail@plt+0x6328>
   17994:	ldr	r0, [r3, r4, lsl #3]
   17998:	sub	r0, r0, #16
   1799c:	ror	r1, r0, #4
   179a0:	cmp	r1, #7
   179a4:	bhi	17a88 <__assert_fail@plt+0x6328>
   179a8:	tst	lr, ip, lsl r1
   179ac:	bne	17950 <__assert_fail@plt+0x61f0>
   179b0:	b	17a88 <__assert_fail@plt+0x6328>
   179b4:	ldrsb	r0, [r5]
   179b8:	cmp	r0, #0
   179bc:	mov	r0, #0
   179c0:	movwlt	r0, #1
   179c4:	orr	r6, r6, r0
   179c8:	add	r4, r4, #1
   179cc:	cmp	r4, r7
   179d0:	bcc	17904 <__assert_fail@plt+0x61a4>
   179d4:	b	179e8 <__assert_fail@plt+0x6288>
   179d8:	mov	r8, #1
   179dc:	add	r4, r4, #1
   179e0:	cmp	r4, r7
   179e4:	bcc	17904 <__assert_fail@plt+0x61a4>
   179e8:	orr	r0, r6, r8
   179ec:	tst	r0, #1
   179f0:	beq	17a5c <__assert_fail@plt+0x62fc>
   179f4:	mov	r2, #0
   179f8:	mov	r7, #7
   179fc:	b	17a04 <__assert_fail@plt+0x62a4>
   17a00:	ldr	r3, [r1]
   17a04:	add	r3, r3, r2, lsl #3
   17a08:	ldr	r6, [r3, #4]
   17a0c:	uxtb	r1, r6
   17a10:	cmp	r1, #5
   17a14:	beq	17a34 <__assert_fail@plt+0x62d4>
   17a18:	cmp	r1, #1
   17a1c:	bne	17a3c <__assert_fail@plt+0x62dc>
   17a20:	ldrsb	r0, [r3]
   17a24:	cmn	r0, #1
   17a28:	bicle	r0, r6, #2097152	; 0x200000
   17a2c:	strle	r0, [r3, #4]
   17a30:	b	17a3c <__assert_fail@plt+0x62dc>
   17a34:	bfi	r6, r7, #0, #8
   17a38:	str	r6, [r3, #4]
   17a3c:	ldr	r1, [sp, #20]
   17a40:	add	r2, r2, #1
   17a44:	ldr	r0, [r1, #8]
   17a48:	cmp	r2, r0
   17a4c:	bcc	17a00 <__assert_fail@plt+0x62a0>
   17a50:	ldrb	r2, [r1, #88]	; 0x58
   17a54:	b	17a5c <__assert_fail@plt+0x62fc>
   17a58:	mov	r8, #0
   17a5c:	ldr	r3, [sp, #20]
   17a60:	mov	r0, #1
   17a64:	and	r1, r2, #249	; 0xf9
   17a68:	str	r0, [r3, #92]	; 0x5c
   17a6c:	ldr	r0, [r3, #76]	; 0x4c
   17a70:	cmp	r0, #0
   17a74:	movwgt	r9, #1
   17a78:	orr	r0, r8, r9
   17a7c:	and	r0, r0, #1
   17a80:	orr	r0, r1, r0, lsl #1
   17a84:	strb	r0, [r3, #88]	; 0x58
   17a88:	ldr	r7, [sp, #20]
   17a8c:	ldr	r1, [r7, #52]	; 0x34
   17a90:	ldr	r0, [r7, #24]
   17a94:	ldr	r1, [r1, #12]
   17a98:	ldr	r1, [r1, #28]
   17a9c:	str	r1, [r7, #72]	; 0x48
   17aa0:	add	r1, r1, r1, lsl #1
   17aa4:	add	r5, r0, r1, lsl #2
   17aa8:	mov	r4, r5
   17aac:	ldr	sl, [r4, #4]!
   17ab0:	str	sl, [fp, #-44]	; 0xffffffd4
   17ab4:	ldr	r0, [r4]
   17ab8:	cmp	r0, #1
   17abc:	blt	17c10 <__assert_fail@plt+0x64b0>
   17ac0:	lsl	r0, sl, #2
   17ac4:	str	sl, [fp, #-48]	; 0xffffffd0
   17ac8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   17acc:	cmp	r0, #0
   17ad0:	str	r0, [fp, #-40]	; 0xffffffd8
   17ad4:	beq	17db8 <__assert_fail@plt+0x6658>
   17ad8:	mov	r6, r0
   17adc:	ldr	r0, [r4]
   17ae0:	ldr	r1, [r5, #8]
   17ae4:	lsl	r2, r0, #2
   17ae8:	mov	r0, r6
   17aec:	bl	11484 <memcpy@plt>
   17af0:	mov	r0, #0
   17af4:	cmp	sl, #1
   17af8:	str	r0, [fp, #-32]	; 0xffffffe0
   17afc:	ldrge	r0, [sp, #20]
   17b00:	ldrge	r0, [r0, #76]	; 0x4c
   17b04:	cmpge	r0, #1
   17b08:	blt	17c24 <__assert_fail@plt+0x64c4>
   17b0c:	mov	r0, #0
   17b10:	sub	r8, fp, #48	; 0x30
   17b14:	mov	r9, #1
   17b18:	b	17b20 <__assert_fail@plt+0x63c0>
   17b1c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   17b20:	ldr	r2, [sp, #20]
   17b24:	ldr	r1, [r6, r0, lsl #2]
   17b28:	ldr	r2, [r2]
   17b2c:	add	r3, r2, r1, lsl #3
   17b30:	ldrb	r3, [r3, #4]
   17b34:	cmp	r3, #4
   17b38:	bne	17c00 <__assert_fail@plt+0x64a0>
   17b3c:	mov	r3, #0
   17b40:	cmp	sl, #1
   17b44:	blt	17b78 <__assert_fail@plt+0x6418>
   17b48:	ldr	r5, [r6, r3, lsl #2]
   17b4c:	add	r4, r2, r5, lsl #3
   17b50:	ldrb	r4, [r4, #4]
   17b54:	cmp	r4, #9
   17b58:	bne	17b6c <__assert_fail@plt+0x640c>
   17b5c:	ldr	r4, [r2, r1, lsl #3]
   17b60:	ldr	r5, [r2, r5, lsl #3]
   17b64:	cmp	r5, r4
   17b68:	beq	17b78 <__assert_fail@plt+0x6418>
   17b6c:	add	r3, r3, #1
   17b70:	cmp	r3, sl
   17b74:	blt	17b48 <__assert_fail@plt+0x63e8>
   17b78:	cmp	r3, sl
   17b7c:	beq	17c00 <__assert_fail@plt+0x64a0>
   17b80:	ldr	r2, [sp, #20]
   17b84:	add	r1, r1, r1, lsl #1
   17b88:	cmp	sl, #1
   17b8c:	ldr	r2, [r2, #20]
   17b90:	add	r1, r2, r1, lsl #2
   17b94:	ldr	r1, [r1, #8]
   17b98:	ldr	r1, [r1]
   17b9c:	blt	17bd8 <__assert_fail@plt+0x6478>
   17ba0:	mov	r2, #0
   17ba4:	subs	r3, sl, #1
   17ba8:	beq	17bcc <__assert_fail@plt+0x646c>
   17bac:	add	r5, r2, r3
   17bb0:	lsr	r4, r5, #1
   17bb4:	ldr	r7, [r6, r4, lsl #2]
   17bb8:	cmp	r7, r1
   17bbc:	movge	r3, r4
   17bc0:	addlt	r2, r9, r5, lsr #1
   17bc4:	cmp	r2, r3
   17bc8:	bcc	17bac <__assert_fail@plt+0x644c>
   17bcc:	ldr	r2, [r6, r2, lsl #2]
   17bd0:	cmp	r2, r1
   17bd4:	beq	17c00 <__assert_fail@plt+0x64a0>
   17bd8:	ldr	r0, [sp, #20]
   17bdc:	add	r1, r1, r1, lsl #1
   17be0:	ldr	r0, [r0, #24]
   17be4:	add	r1, r0, r1, lsl #2
   17be8:	mov	r0, r8
   17bec:	bl	2182c <__assert_fail@plt+0x100cc>
   17bf0:	cmp	r0, #0
   17bf4:	bne	17d74 <__assert_fail@plt+0x6614>
   17bf8:	ldr	sl, [fp, #-44]	; 0xffffffd4
   17bfc:	mov	r0, #0
   17c00:	add	r0, r0, #1
   17c04:	cmp	r0, sl
   17c08:	blt	17b1c <__assert_fail@plt+0x63bc>
   17c0c:	b	17c24 <__assert_fail@plt+0x64c4>
   17c10:	mov	r0, #0
   17c14:	str	r0, [fp, #-44]	; 0xffffffd4
   17c18:	str	r0, [fp, #-48]	; 0xffffffd0
   17c1c:	str	r0, [fp, #-40]	; 0xffffffd8
   17c20:	str	r0, [fp, #-32]	; 0xffffffe0
   17c24:	ldr	r7, [sp, #20]
   17c28:	sub	r0, fp, #32
   17c2c:	sub	r2, fp, #48	; 0x30
   17c30:	mov	r3, #0
   17c34:	mov	r1, r7
   17c38:	bl	21b1c <__assert_fail@plt+0x103bc>
   17c3c:	ldr	r8, [sp, #16]
   17c40:	cmp	r0, #0
   17c44:	str	r0, [r7, #36]	; 0x24
   17c48:	beq	17cc8 <__assert_fail@plt+0x6568>
   17c4c:	ldrsb	r1, [r0, #52]	; 0x34
   17c50:	cmn	r1, #1
   17c54:	ble	17c68 <__assert_fail@plt+0x6508>
   17c58:	str	r0, [r7, #40]	; 0x28
   17c5c:	str	r0, [r7, #44]	; 0x2c
   17c60:	str	r0, [r7, #48]	; 0x30
   17c64:	b	17cdc <__assert_fail@plt+0x657c>
   17c68:	sub	r4, fp, #32
   17c6c:	sub	r6, fp, #48	; 0x30
   17c70:	mov	r1, r7
   17c74:	mov	r3, #1
   17c78:	mov	r0, r4
   17c7c:	mov	r2, r6
   17c80:	bl	21b1c <__assert_fail@plt+0x103bc>
   17c84:	str	r0, [r7, #40]	; 0x28
   17c88:	mov	r0, r4
   17c8c:	mov	r1, r7
   17c90:	mov	r2, r6
   17c94:	mov	r3, #2
   17c98:	bl	21b1c <__assert_fail@plt+0x103bc>
   17c9c:	str	r0, [r7, #44]	; 0x2c
   17ca0:	mov	r0, r4
   17ca4:	mov	r1, r7
   17ca8:	mov	r2, r6
   17cac:	mov	r3, #6
   17cb0:	bl	21b1c <__assert_fail@plt+0x103bc>
   17cb4:	str	r0, [r7, #48]	; 0x30
   17cb8:	ldr	r1, [r7, #40]	; 0x28
   17cbc:	cmp	r1, #0
   17cc0:	cmpne	r0, #0
   17cc4:	bne	17cd0 <__assert_fail@plt+0x6570>
   17cc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ccc:	b	17ce8 <__assert_fail@plt+0x6588>
   17cd0:	ldr	r0, [r7, #44]	; 0x2c
   17cd4:	cmp	r0, #0
   17cd8:	beq	17cc8 <__assert_fail@plt+0x6568>
   17cdc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17ce0:	bl	14538 <__assert_fail@plt+0x2dd8>
   17ce4:	mov	r0, #0
   17ce8:	str	r0, [fp, #-52]	; 0xffffffcc
   17cec:	ldr	r5, [r8]
   17cf0:	ldr	r0, [r5, #56]	; 0x38
   17cf4:	cmp	r0, #0
   17cf8:	beq	17d10 <__assert_fail@plt+0x65b0>
   17cfc:	ldr	r4, [r0]
   17d00:	bl	14538 <__assert_fail@plt+0x2dd8>
   17d04:	cmp	r4, #0
   17d08:	mov	r0, r4
   17d0c:	bne	17cfc <__assert_fail@plt+0x659c>
   17d10:	mov	r0, #31
   17d14:	mov	r4, #0
   17d18:	str	r0, [r5, #64]	; 0x40
   17d1c:	str	r4, [r5, #52]	; 0x34
   17d20:	str	r4, [r5, #56]	; 0x38
   17d24:	ldr	r0, [r5, #16]
   17d28:	bl	14538 <__assert_fail@plt+0x2dd8>
   17d2c:	str	r4, [r5, #16]
   17d30:	ldr	r0, [sp, #40]	; 0x28
   17d34:	bl	14538 <__assert_fail@plt+0x2dd8>
   17d38:	ldr	r0, [sp, #44]	; 0x2c
   17d3c:	bl	14538 <__assert_fail@plt+0x2dd8>
   17d40:	ldrb	r0, [sp, #107]	; 0x6b
   17d44:	cmp	r0, #0
   17d48:	beq	17d54 <__assert_fail@plt+0x65f4>
   17d4c:	ldr	r0, [sp, #36]	; 0x24
   17d50:	bl	14538 <__assert_fail@plt+0x2dd8>
   17d54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17d58:	cmp	r0, #0
   17d5c:	bne	17d80 <__assert_fail@plt+0x6620>
   17d60:	mov	r0, r4
   17d64:	sub	sp, fp, #28
   17d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d6c:	ldr	sl, [sp, #16]
   17d70:	b	16f90 <__assert_fail@plt+0x5830>
   17d74:	ldr	r8, [sp, #16]
   17d78:	ldr	r7, [sp, #20]
   17d7c:	b	17ce8 <__assert_fail@plt+0x6588>
   17d80:	ldr	r0, [sp, #8]
   17d84:	cmp	r0, #0
   17d88:	beq	17d94 <__assert_fail@plt+0x6634>
   17d8c:	add	r0, r7, #136	; 0x88
   17d90:	bl	11430 <pthread_mutex_destroy@plt>
   17d94:	mov	r0, r7
   17d98:	bl	1892c <__assert_fail@plt+0x71cc>
   17d9c:	mov	r0, #0
   17da0:	str	r0, [r8]
   17da4:	str	r0, [r8, #4]
   17da8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17dac:	mov	r0, r4
   17db0:	sub	sp, fp, #28
   17db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17db8:	ldr	r8, [sp, #16]
   17dbc:	mov	r0, #0
   17dc0:	str	r0, [fp, #-48]	; 0xffffffd0
   17dc4:	str	r0, [fp, #-44]	; 0xffffffd4
   17dc8:	mov	r0, #12
   17dcc:	str	r0, [fp, #-32]	; 0xffffffe0
   17dd0:	b	17ce8 <__assert_fail@plt+0x6588>
   17dd4:	bl	1173c <abort@plt>
   17dd8:	movw	r2, #62444	; 0xf3ec
   17ddc:	movt	r2, #3
   17de0:	ldr	r1, [r2]
   17de4:	str	r0, [r2]
   17de8:	mov	r0, r1
   17dec:	bx	lr
   17df0:	push	{r4, r5, r6, sl, fp, lr}
   17df4:	add	fp, sp, #16
   17df8:	ldr	r5, [r0, #16]
   17dfc:	ldr	r6, [r0]
   17e00:	mov	r4, r0
   17e04:	mov	r1, #0
   17e08:	mov	r2, #256	; 0x100
   17e0c:	mov	r0, r5
   17e10:	bl	11670 <memset@plt>
   17e14:	ldr	r1, [r6, #36]	; 0x24
   17e18:	mov	r0, r4
   17e1c:	mov	r2, r5
   17e20:	bl	17e8c <__assert_fail@plt+0x672c>
   17e24:	ldr	r0, [r6, #36]	; 0x24
   17e28:	ldr	r1, [r6, #40]	; 0x28
   17e2c:	cmp	r0, r1
   17e30:	beq	17e44 <__assert_fail@plt+0x66e4>
   17e34:	mov	r0, r4
   17e38:	mov	r2, r5
   17e3c:	bl	17e8c <__assert_fail@plt+0x672c>
   17e40:	ldr	r0, [r6, #36]	; 0x24
   17e44:	ldr	r1, [r6, #44]	; 0x2c
   17e48:	cmp	r0, r1
   17e4c:	beq	17e60 <__assert_fail@plt+0x6700>
   17e50:	mov	r0, r4
   17e54:	mov	r2, r5
   17e58:	bl	17e8c <__assert_fail@plt+0x672c>
   17e5c:	ldr	r0, [r6, #36]	; 0x24
   17e60:	ldr	r1, [r6, #48]	; 0x30
   17e64:	cmp	r0, r1
   17e68:	beq	17e78 <__assert_fail@plt+0x6718>
   17e6c:	mov	r0, r4
   17e70:	mov	r2, r5
   17e74:	bl	17e8c <__assert_fail@plt+0x672c>
   17e78:	ldrb	r0, [r4, #28]
   17e7c:	orr	r0, r0, #8
   17e80:	strb	r0, [r4, #28]
   17e84:	mov	r0, #0
   17e88:	pop	{r4, r5, r6, sl, fp, pc}
   17e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e90:	add	fp, sp, #28
   17e94:	sub	sp, sp, #332	; 0x14c
   17e98:	ldr	r8, [r0]
   17e9c:	mov	r9, r0
   17ea0:	mov	r5, r2
   17ea4:	mov	r2, #0
   17ea8:	str	r2, [sp, #20]
   17eac:	ldr	r0, [r8, #92]	; 0x5c
   17eb0:	cmp	r0, #1
   17eb4:	ldrbeq	r0, [r9, #14]
   17eb8:	ubfxeq	r0, r0, #6, #1
   17ebc:	streq	r0, [sp, #20]
   17ec0:	ldr	r0, [r1, #8]
   17ec4:	cmp	r0, #1
   17ec8:	blt	18684 <__assert_fail@plt+0x6f24>
   17ecc:	add	r0, r5, #224	; 0xe0
   17ed0:	mov	sl, #1
   17ed4:	mov	r2, #0
   17ed8:	str	r9, [sp, #16]
   17edc:	str	r1, [sp, #24]
   17ee0:	str	r0, [sp, #52]	; 0x34
   17ee4:	add	r0, r5, #192	; 0xc0
   17ee8:	str	r0, [sp, #48]	; 0x30
   17eec:	add	r0, r5, #160	; 0xa0
   17ef0:	str	r0, [sp, #44]	; 0x2c
   17ef4:	add	r0, r5, #128	; 0x80
   17ef8:	str	r0, [sp, #40]	; 0x28
   17efc:	add	r0, r5, #96	; 0x60
   17f00:	str	r0, [sp, #36]	; 0x24
   17f04:	add	r0, r5, #64	; 0x40
   17f08:	str	r0, [sp, #32]
   17f0c:	add	r0, r5, #32
   17f10:	str	r0, [sp, #12]
   17f14:	add	r0, r5, #31
   17f18:	str	r0, [sp, #8]
   17f1c:	add	r0, sp, #56	; 0x38
   17f20:	add	r0, r0, #1
   17f24:	str	r0, [sp, #4]
   17f28:	ldr	r0, [r1, #12]
   17f2c:	str	r2, [sp, #28]
   17f30:	ldr	r4, [r0, r2, lsl #2]
   17f34:	ldr	r2, [r8]
   17f38:	add	r0, r2, r4, lsl #3
   17f3c:	ldrb	r6, [r0, #4]
   17f40:	sub	r0, r6, #1
   17f44:	cmp	r0, #6
   17f48:	bhi	1866c <__assert_fail@plt+0x6f0c>
   17f4c:	add	r1, pc, #0
   17f50:	ldr	pc, [r1, r0, lsl #2]
   17f54:	andeq	r7, r1, r0, ror pc
   17f58:	andeq	r8, r1, ip, lsl #13
   17f5c:	andeq	r8, r1, r0, ror r0
   17f60:	andeq	r8, r1, ip, ror #12
   17f64:	andeq	r8, r1, ip, lsl #13
   17f68:	andeq	r8, r1, r0, lsr #6
   17f6c:	andeq	r8, r1, ip, lsl #13
   17f70:	ldr	r0, [sp, #20]
   17f74:	ldrb	r6, [r2, r4, lsl #3]
   17f78:	cmp	r0, #0
   17f7c:	strb	sl, [r5, r6]
   17f80:	beq	17f94 <__assert_fail@plt+0x6834>
   17f84:	bl	115e0 <__ctype_tolower_loc@plt>
   17f88:	ldr	r0, [r0]
   17f8c:	ldr	r0, [r0, r6, lsl #2]
   17f90:	strb	sl, [r5, r0]
   17f94:	ldrb	r0, [r9, #14]
   17f98:	tst	r0, #64	; 0x40
   17f9c:	beq	1866c <__assert_fail@plt+0x6f0c>
   17fa0:	ldr	r0, [r8, #92]	; 0x5c
   17fa4:	cmp	r0, #2
   17fa8:	blt	1866c <__assert_fail@plt+0x6f0c>
   17fac:	ldr	r0, [r8]
   17fb0:	add	r1, r4, #1
   17fb4:	movw	r7, #1
   17fb8:	add	r6, sp, #56	; 0x38
   17fbc:	movt	r7, #32
   17fc0:	ldrb	r0, [r0, r4, lsl #3]
   17fc4:	strb	r0, [sp, #56]	; 0x38
   17fc8:	ldr	r0, [r8, #8]
   17fcc:	cmp	r1, r0
   17fd0:	ldr	r0, [sp, #4]
   17fd4:	bcs	18018 <__assert_fail@plt+0x68b8>
   17fd8:	ldr	r0, [sp, #4]
   17fdc:	ldr	r1, [r8]
   17fe0:	add	r3, r7, #254	; 0xfe
   17fe4:	add	r1, r1, r4, lsl #3
   17fe8:	ldr	r2, [r1, #12]
   17fec:	and	r2, r2, r3
   17ff0:	cmp	r2, r7
   17ff4:	bne	18018 <__assert_fail@plt+0x68b8>
   17ff8:	ldrb	r1, [r1, #8]
   17ffc:	add	r3, r4, #2
   18000:	strb	r1, [r0], #1
   18004:	add	r1, r4, #1
   18008:	ldr	r2, [r8, #8]
   1800c:	mov	r4, r1
   18010:	cmp	r3, r2
   18014:	bcc	17fdc <__assert_fail@plt+0x687c>
   18018:	mov	r1, #0
   1801c:	sub	r4, r0, r6
   18020:	sub	r7, fp, #48	; 0x30
   18024:	sub	r0, fp, #36	; 0x24
   18028:	str	r1, [fp, #-44]	; 0xffffffd4
   1802c:	str	r1, [fp, #-48]	; 0xffffffd0
   18030:	mov	r1, r6
   18034:	mov	r2, r4
   18038:	mov	r3, r7
   1803c:	bl	2d680 <__assert_fail@plt+0x1bf20>
   18040:	cmp	r0, r4
   18044:	bne	1866c <__assert_fail@plt+0x6f0c>
   18048:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1804c:	bl	114a8 <towlower@plt>
   18050:	mov	r1, r0
   18054:	mov	r0, r6
   18058:	mov	r2, r7
   1805c:	bl	11400 <wcrtomb@plt>
   18060:	cmn	r0, #1
   18064:	ldrbne	r0, [sp, #56]	; 0x38
   18068:	strbne	sl, [r5, r0]
   1806c:	b	1866c <__assert_fail@plt+0x6f0c>
   18070:	ldr	r0, [sp, #20]
   18074:	cmp	r0, #0
   18078:	beq	184cc <__assert_fail@plt+0x6d6c>
   1807c:	ldr	r0, [r2, r4, lsl #3]
   18080:	mov	r6, #0
   18084:	ldr	r7, [r0]
   18088:	tst	r7, sl, lsl r6
   1808c:	beq	180bc <__assert_fail@plt+0x695c>
   18090:	add	r1, r6, #128	; 0x80
   18094:	mov	r0, r5
   18098:	lsr	r1, r1, #7
   1809c:	strb	sl, [r0, r6]!
   180a0:	cmp	r1, #2
   180a4:	bhi	180b8 <__assert_fail@plt+0x6958>
   180a8:	bl	115e0 <__ctype_tolower_loc@plt>
   180ac:	ldr	r0, [r0]
   180b0:	ldr	r0, [r0, r6, lsl #2]
   180b4:	add	r0, r5, r0
   180b8:	strb	sl, [r0]
   180bc:	add	r6, r6, #1
   180c0:	cmp	r6, #32
   180c4:	bne	18088 <__assert_fail@plt+0x6928>
   180c8:	ldr	r0, [r8]
   180cc:	ldr	r6, [sp, #12]
   180d0:	mov	r9, #0
   180d4:	ldr	r0, [r0, r4, lsl #3]
   180d8:	ldr	r7, [r0, #4]
   180dc:	tst	r7, sl, lsl r9
   180e0:	beq	18114 <__assert_fail@plt+0x69b4>
   180e4:	add	r1, r9, #160	; 0xa0
   180e8:	mov	r0, r6
   180ec:	lsr	r1, r1, #7
   180f0:	strb	sl, [r0, r9]!
   180f4:	cmp	r1, #2
   180f8:	bhi	18110 <__assert_fail@plt+0x69b0>
   180fc:	bl	115e0 <__ctype_tolower_loc@plt>
   18100:	ldr	r0, [r0]
   18104:	add	r0, r0, r9, lsl #2
   18108:	ldr	r0, [r0, #128]	; 0x80
   1810c:	add	r0, r5, r0
   18110:	strb	sl, [r0]
   18114:	add	r9, r9, #1
   18118:	cmp	r9, #32
   1811c:	bne	180dc <__assert_fail@plt+0x697c>
   18120:	ldr	r0, [r8]
   18124:	ldr	r9, [sp, #16]
   18128:	mov	r6, #0
   1812c:	ldr	r0, [r0, r4, lsl #3]
   18130:	ldr	r7, [r0, #8]
   18134:	tst	r7, sl, lsl r6
   18138:	beq	1816c <__assert_fail@plt+0x6a0c>
   1813c:	ldr	r0, [sp, #32]
   18140:	add	r1, r6, #192	; 0xc0
   18144:	lsr	r1, r1, #7
   18148:	cmp	r1, #2
   1814c:	strb	sl, [r0, r6]!
   18150:	bhi	18168 <__assert_fail@plt+0x6a08>
   18154:	bl	115e0 <__ctype_tolower_loc@plt>
   18158:	ldr	r0, [r0]
   1815c:	add	r0, r0, r6, lsl #2
   18160:	ldr	r0, [r0, #256]	; 0x100
   18164:	add	r0, r5, r0
   18168:	strb	sl, [r0]
   1816c:	add	r6, r6, #1
   18170:	cmp	r6, #32
   18174:	bne	18134 <__assert_fail@plt+0x69d4>
   18178:	ldr	r0, [r8]
   1817c:	mov	r6, #0
   18180:	ldr	r0, [r0, r4, lsl #3]
   18184:	ldr	r7, [r0, #12]
   18188:	tst	r7, sl, lsl r6
   1818c:	beq	181c0 <__assert_fail@plt+0x6a60>
   18190:	ldr	r0, [sp, #36]	; 0x24
   18194:	add	r1, r6, #224	; 0xe0
   18198:	lsr	r1, r1, #7
   1819c:	cmp	r1, #2
   181a0:	strb	sl, [r0, r6]!
   181a4:	bhi	181bc <__assert_fail@plt+0x6a5c>
   181a8:	bl	115e0 <__ctype_tolower_loc@plt>
   181ac:	ldr	r0, [r0]
   181b0:	add	r0, r0, r6, lsl #2
   181b4:	ldr	r0, [r0, #384]	; 0x180
   181b8:	add	r0, r5, r0
   181bc:	strb	sl, [r0]
   181c0:	add	r6, r6, #1
   181c4:	cmp	r6, #32
   181c8:	bne	18188 <__assert_fail@plt+0x6a28>
   181cc:	ldr	r0, [r8]
   181d0:	mov	r6, #0
   181d4:	ldr	r0, [r0, r4, lsl #3]
   181d8:	ldr	r7, [r0, #16]
   181dc:	tst	r7, sl, lsl r6
   181e0:	beq	18214 <__assert_fail@plt+0x6ab4>
   181e4:	ldr	r0, [sp, #40]	; 0x28
   181e8:	add	r1, r6, #256	; 0x100
   181ec:	lsr	r1, r1, #7
   181f0:	cmp	r1, #2
   181f4:	strb	sl, [r0, r6]!
   181f8:	bhi	18210 <__assert_fail@plt+0x6ab0>
   181fc:	bl	115e0 <__ctype_tolower_loc@plt>
   18200:	ldr	r0, [r0]
   18204:	add	r0, r0, r6, lsl #2
   18208:	ldr	r0, [r0, #512]	; 0x200
   1820c:	add	r0, r5, r0
   18210:	strb	sl, [r0]
   18214:	add	r6, r6, #1
   18218:	cmp	r6, #32
   1821c:	bne	181dc <__assert_fail@plt+0x6a7c>
   18220:	ldr	r0, [r8]
   18224:	mov	r6, #0
   18228:	ldr	r0, [r0, r4, lsl #3]
   1822c:	ldr	r7, [r0, #20]
   18230:	tst	r7, sl, lsl r6
   18234:	beq	18268 <__assert_fail@plt+0x6b08>
   18238:	ldr	r0, [sp, #44]	; 0x2c
   1823c:	add	r1, r6, #288	; 0x120
   18240:	lsr	r1, r1, #7
   18244:	cmp	r1, #2
   18248:	strb	sl, [r0, r6]!
   1824c:	bhi	18264 <__assert_fail@plt+0x6b04>
   18250:	bl	115e0 <__ctype_tolower_loc@plt>
   18254:	ldr	r0, [r0]
   18258:	add	r0, r0, r6, lsl #2
   1825c:	ldr	r0, [r0, #640]	; 0x280
   18260:	add	r0, r5, r0
   18264:	strb	sl, [r0]
   18268:	add	r6, r6, #1
   1826c:	cmp	r6, #32
   18270:	bne	18230 <__assert_fail@plt+0x6ad0>
   18274:	ldr	r0, [r8]
   18278:	mov	r6, #0
   1827c:	ldr	r0, [r0, r4, lsl #3]
   18280:	ldr	r7, [r0, #24]
   18284:	tst	r7, sl, lsl r6
   18288:	beq	182bc <__assert_fail@plt+0x6b5c>
   1828c:	ldr	r0, [sp, #48]	; 0x30
   18290:	add	r1, r6, #320	; 0x140
   18294:	lsr	r1, r1, #7
   18298:	cmp	r1, #2
   1829c:	strb	sl, [r0, r6]!
   182a0:	bhi	182b8 <__assert_fail@plt+0x6b58>
   182a4:	bl	115e0 <__ctype_tolower_loc@plt>
   182a8:	ldr	r0, [r0]
   182ac:	add	r0, r0, r6, lsl #2
   182b0:	ldr	r0, [r0, #768]	; 0x300
   182b4:	add	r0, r5, r0
   182b8:	strb	sl, [r0]
   182bc:	add	r6, r6, #1
   182c0:	cmp	r6, #32
   182c4:	bne	18284 <__assert_fail@plt+0x6b24>
   182c8:	ldr	r0, [r8]
   182cc:	mov	r6, #0
   182d0:	ldr	r0, [r0, r4, lsl #3]
   182d4:	ldr	r4, [r0, #28]
   182d8:	tst	r4, sl, lsl r6
   182dc:	beq	18310 <__assert_fail@plt+0x6bb0>
   182e0:	ldr	r0, [sp, #52]	; 0x34
   182e4:	add	r1, r6, #352	; 0x160
   182e8:	lsr	r1, r1, #7
   182ec:	cmp	r1, #2
   182f0:	strb	sl, [r0, r6]!
   182f4:	bhi	1830c <__assert_fail@plt+0x6bac>
   182f8:	bl	115e0 <__ctype_tolower_loc@plt>
   182fc:	ldr	r0, [r0]
   18300:	add	r0, r0, r6, lsl #2
   18304:	ldr	r0, [r0, #896]	; 0x380
   18308:	add	r0, r5, r0
   1830c:	strb	sl, [r0]
   18310:	add	r6, r6, #1
   18314:	cmp	r6, #32
   18318:	bne	182d8 <__assert_fail@plt+0x6b78>
   1831c:	b	1866c <__assert_fail@plt+0x6f0c>
   18320:	ldr	r0, [r8, #92]	; 0x5c
   18324:	ldr	r4, [r2, r4, lsl #3]
   18328:	cmp	r0, #2
   1832c:	blt	1839c <__assert_fail@plt+0x6c3c>
   18330:	ldr	r0, [r4, #36]	; 0x24
   18334:	cmp	r0, #0
   18338:	bne	18350 <__assert_fail@plt+0x6bf0>
   1833c:	ldrb	r0, [r4, #16]
   18340:	tst	r0, #1
   18344:	ldreq	r0, [r4, #32]
   18348:	cmpeq	r0, #0
   1834c:	beq	1839c <__assert_fail@plt+0x6c3c>
   18350:	mov	r6, #0
   18354:	add	r4, sp, #56	; 0x38
   18358:	sub	r7, fp, #48	; 0x30
   1835c:	strb	r6, [fp, #-48]	; 0xffffffd0
   18360:	mov	r0, #0
   18364:	mov	r1, r7
   18368:	mov	r2, #1
   1836c:	mov	r3, r4
   18370:	str	r6, [sp, #60]	; 0x3c
   18374:	str	r6, [sp, #56]	; 0x38
   18378:	bl	2d680 <__assert_fail@plt+0x1bf20>
   1837c:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   18380:	cmn	r0, #2
   18384:	add	r0, r1, #1
   18388:	strbeq	sl, [r5, r1]
   1838c:	tst	r0, #255	; 0xff
   18390:	strb	r0, [fp, #-48]	; 0xffffffd0
   18394:	bne	18360 <__assert_fail@plt+0x6c00>
   18398:	b	1866c <__assert_fail@plt+0x6f0c>
   1839c:	ldr	r0, [r4, #20]
   183a0:	cmp	r0, #1
   183a4:	blt	1866c <__assert_fail@plt+0x6f0c>
   183a8:	ldr	r0, [sp, #20]
   183ac:	mov	r7, #0
   183b0:	cmp	r0, #0
   183b4:	beq	1844c <__assert_fail@plt+0x6cec>
   183b8:	mov	r0, #0
   183bc:	sub	r2, fp, #48	; 0x30
   183c0:	str	r0, [fp, #-44]	; 0xffffffd4
   183c4:	str	r0, [fp, #-48]	; 0xffffffd0
   183c8:	ldr	r0, [r4]
   183cc:	ldr	r1, [r0, r7, lsl #2]
   183d0:	add	r0, sp, #56	; 0x38
   183d4:	bl	11400 <wcrtomb@plt>
   183d8:	cmn	r0, #1
   183dc:	beq	183f8 <__assert_fail@plt+0x6c98>
   183e0:	ldrb	r6, [sp, #56]	; 0x38
   183e4:	strb	sl, [r5, r6]
   183e8:	bl	115e0 <__ctype_tolower_loc@plt>
   183ec:	ldr	r0, [r0]
   183f0:	ldr	r0, [r0, r6, lsl #2]
   183f4:	strb	sl, [r5, r0]
   183f8:	ldrb	r0, [r9, #14]
   183fc:	tst	r0, #64	; 0x40
   18400:	beq	18438 <__assert_fail@plt+0x6cd8>
   18404:	ldr	r0, [r8, #92]	; 0x5c
   18408:	cmp	r0, #2
   1840c:	blt	18438 <__assert_fail@plt+0x6cd8>
   18410:	ldr	r0, [r4]
   18414:	ldr	r0, [r0, r7, lsl #2]
   18418:	bl	114a8 <towlower@plt>
   1841c:	mov	r1, r0
   18420:	add	r0, sp, #56	; 0x38
   18424:	sub	r2, fp, #48	; 0x30
   18428:	bl	11400 <wcrtomb@plt>
   1842c:	cmn	r0, #1
   18430:	ldrbne	r0, [sp, #56]	; 0x38
   18434:	strbne	sl, [r5, r0]
   18438:	ldr	r0, [r4, #20]
   1843c:	add	r7, r7, #1
   18440:	cmp	r7, r0
   18444:	blt	183b8 <__assert_fail@plt+0x6c58>
   18448:	b	1866c <__assert_fail@plt+0x6f0c>
   1844c:	mov	r0, #0
   18450:	sub	r2, fp, #48	; 0x30
   18454:	str	r0, [fp, #-44]	; 0xffffffd4
   18458:	str	r0, [fp, #-48]	; 0xffffffd0
   1845c:	ldr	r0, [r4]
   18460:	ldr	r1, [r0, r7, lsl #2]
   18464:	add	r0, sp, #56	; 0x38
   18468:	bl	11400 <wcrtomb@plt>
   1846c:	cmn	r0, #1
   18470:	ldrbne	r0, [sp, #56]	; 0x38
   18474:	strbne	sl, [r5, r0]
   18478:	ldrb	r0, [r9, #14]
   1847c:	tst	r0, #64	; 0x40
   18480:	beq	184b8 <__assert_fail@plt+0x6d58>
   18484:	ldr	r0, [r8, #92]	; 0x5c
   18488:	cmp	r0, #2
   1848c:	blt	184b8 <__assert_fail@plt+0x6d58>
   18490:	ldr	r0, [r4]
   18494:	ldr	r0, [r0, r7, lsl #2]
   18498:	bl	114a8 <towlower@plt>
   1849c:	mov	r1, r0
   184a0:	add	r0, sp, #56	; 0x38
   184a4:	sub	r2, fp, #48	; 0x30
   184a8:	bl	11400 <wcrtomb@plt>
   184ac:	cmn	r0, #1
   184b0:	ldrbne	r0, [sp, #56]	; 0x38
   184b4:	strbne	sl, [r5, r0]
   184b8:	ldr	r0, [r4, #20]
   184bc:	add	r7, r7, #1
   184c0:	cmp	r7, r0
   184c4:	blt	1844c <__assert_fail@plt+0x6cec>
   184c8:	b	1866c <__assert_fail@plt+0x6f0c>
   184cc:	ldr	r1, [sp, #8]
   184d0:	mov	r0, #0
   184d4:	b	184e4 <__assert_fail@plt+0x6d84>
   184d8:	ldr	r2, [r8]
   184dc:	add	r0, r0, #4
   184e0:	add	r1, r1, #32
   184e4:	ldr	r2, [r2, r4, lsl #3]
   184e8:	ldr	r2, [r2, r0]
   184ec:	tst	r2, #1
   184f0:	strbne	sl, [r1, #-31]	; 0xffffffe1
   184f4:	tst	r2, #2
   184f8:	addne	r3, r5, r0, lsl #3
   184fc:	strbne	sl, [r3, #1]
   18500:	tst	r2, #4
   18504:	addne	r3, r5, r0, lsl #3
   18508:	strbne	sl, [r3, #2]
   1850c:	tst	r2, #8
   18510:	addne	r3, r5, r0, lsl #3
   18514:	strbne	sl, [r3, #3]
   18518:	tst	r2, #16
   1851c:	addne	r3, r5, r0, lsl #3
   18520:	strbne	sl, [r3, #4]
   18524:	tst	r2, #32
   18528:	addne	r3, r5, r0, lsl #3
   1852c:	strbne	sl, [r3, #5]
   18530:	tst	r2, #64	; 0x40
   18534:	addne	r3, r5, r0, lsl #3
   18538:	strbne	sl, [r3, #6]
   1853c:	tst	r2, #128	; 0x80
   18540:	addne	r3, r5, r0, lsl #3
   18544:	strbne	sl, [r3, #7]
   18548:	tst	r2, #256	; 0x100
   1854c:	addne	r3, r5, r0, lsl #3
   18550:	strbne	sl, [r3, #8]
   18554:	tst	r2, #512	; 0x200
   18558:	addne	r3, r5, r0, lsl #3
   1855c:	strbne	sl, [r3, #9]
   18560:	tst	r2, #1024	; 0x400
   18564:	addne	r3, r5, r0, lsl #3
   18568:	strbne	sl, [r3, #10]
   1856c:	tst	r2, #2048	; 0x800
   18570:	addne	r3, r5, r0, lsl #3
   18574:	strbne	sl, [r3, #11]
   18578:	tst	r2, #4096	; 0x1000
   1857c:	addne	r3, r5, r0, lsl #3
   18580:	strbne	sl, [r3, #12]
   18584:	tst	r2, #8192	; 0x2000
   18588:	addne	r3, r5, r0, lsl #3
   1858c:	strbne	sl, [r3, #13]
   18590:	tst	r2, #16384	; 0x4000
   18594:	addne	r3, r5, r0, lsl #3
   18598:	strbne	sl, [r3, #14]
   1859c:	tst	r2, #32768	; 0x8000
   185a0:	addne	r3, r5, r0, lsl #3
   185a4:	strbne	sl, [r3, #15]
   185a8:	tst	r2, #65536	; 0x10000
   185ac:	addne	r3, r5, r0, lsl #3
   185b0:	strbne	sl, [r3, #16]
   185b4:	tst	r2, #131072	; 0x20000
   185b8:	addne	r3, r5, r0, lsl #3
   185bc:	strbne	sl, [r3, #17]
   185c0:	tst	r2, #262144	; 0x40000
   185c4:	addne	r3, r5, r0, lsl #3
   185c8:	strbne	sl, [r3, #18]
   185cc:	tst	r2, #524288	; 0x80000
   185d0:	addne	r3, r5, r0, lsl #3
   185d4:	strbne	sl, [r3, #19]
   185d8:	tst	r2, #1048576	; 0x100000
   185dc:	addne	r3, r5, r0, lsl #3
   185e0:	strbne	sl, [r3, #20]
   185e4:	tst	r2, #2097152	; 0x200000
   185e8:	addne	r3, r5, r0, lsl #3
   185ec:	strbne	sl, [r3, #21]
   185f0:	tst	r2, #4194304	; 0x400000
   185f4:	addne	r3, r5, r0, lsl #3
   185f8:	strbne	sl, [r3, #22]
   185fc:	tst	r2, #8388608	; 0x800000
   18600:	addne	r3, r5, r0, lsl #3
   18604:	strbne	sl, [r3, #23]
   18608:	tst	r2, #16777216	; 0x1000000
   1860c:	addne	r3, r5, r0, lsl #3
   18610:	strbne	sl, [r3, #24]
   18614:	tst	r2, #33554432	; 0x2000000
   18618:	addne	r3, r5, r0, lsl #3
   1861c:	strbne	sl, [r3, #25]
   18620:	tst	r2, #67108864	; 0x4000000
   18624:	addne	r3, r5, r0, lsl #3
   18628:	strbne	sl, [r3, #26]
   1862c:	tst	r2, #134217728	; 0x8000000
   18630:	addne	r3, r5, r0, lsl #3
   18634:	strbne	sl, [r3, #27]
   18638:	tst	r2, #268435456	; 0x10000000
   1863c:	addne	r3, r5, r0, lsl #3
   18640:	strbne	sl, [r3, #28]
   18644:	tst	r2, #536870912	; 0x20000000
   18648:	addne	r3, r5, r0, lsl #3
   1864c:	strbne	sl, [r3, #29]
   18650:	tst	r2, #1073741824	; 0x40000000
   18654:	addne	r3, r5, r0, lsl #3
   18658:	strbne	sl, [r3, #30]
   1865c:	cmn	r2, #1
   18660:	strble	sl, [r1]
   18664:	cmp	r0, #28
   18668:	bne	184d8 <__assert_fail@plt+0x6d78>
   1866c:	ldr	r1, [sp, #24]
   18670:	ldr	r2, [sp, #28]
   18674:	ldr	r0, [r1, #8]
   18678:	add	r2, r2, #1
   1867c:	cmp	r2, r0
   18680:	blt	17f28 <__assert_fail@plt+0x67c8>
   18684:	sub	sp, fp, #28
   18688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1868c:	mov	r0, r5
   18690:	mov	r1, #1
   18694:	mov	r2, #256	; 0x100
   18698:	bl	11670 <memset@plt>
   1869c:	cmp	r6, #2
   186a0:	ldrbeq	r0, [r9, #28]
   186a4:	orreq	r0, r0, #1
   186a8:	strbeq	r0, [r9, #28]
   186ac:	sub	sp, fp, #28
   186b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   186b8:	add	fp, sp, #24
   186bc:	mov	r4, r0
   186c0:	mov	r0, #0
   186c4:	mov	r6, r2
   186c8:	mov	r5, r1
   186cc:	str	r0, [r4]
   186d0:	str	r0, [r4, #4]
   186d4:	str	r0, [r4, #8]
   186d8:	mov	r0, #256	; 0x100
   186dc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   186e0:	cmp	r0, #0
   186e4:	str	r0, [r4, #16]
   186e8:	beq	18820 <__assert_fail@plt+0x70c0>
   186ec:	movw	r0, #45820	; 0xb2fc
   186f0:	tst	r6, #1
   186f4:	and	r1, r6, #2
   186f8:	mov	r8, r4
   186fc:	movt	r0, #3
   18700:	movweq	r0, #710	; 0x2c6
   18704:	movteq	r0, #257	; 0x101
   18708:	tst	r6, #4
   1870c:	orr	r7, r0, r1, lsl #21
   18710:	bne	18724 <__assert_fail@plt+0x6fc4>
   18714:	ldrb	r0, [r8, #28]!
   18718:	and	r0, r0, #127	; 0x7f
   1871c:	strb	r0, [r8]
   18720:	b	18744 <__assert_fail@plt+0x6fe4>
   18724:	ldrb	r0, [r8, #28]!
   18728:	mvn	r1, #127	; 0x7f
   1872c:	orr	r0, r0, r1
   18730:	movw	r1, #45758	; 0xb2be
   18734:	movt	r1, #323	; 0x143
   18738:	strb	r0, [r8]
   1873c:	and	r1, r7, r1
   18740:	orr	r7, r1, #256	; 0x100
   18744:	and	r1, r6, #8
   18748:	and	r0, r0, #239	; 0xef
   1874c:	mov	r9, #0
   18750:	orr	r0, r0, r1, lsl #1
   18754:	str	r9, [r4, #20]
   18758:	strb	r0, [r4, #28]
   1875c:	mov	r0, r5
   18760:	bl	11628 <strlen@plt>
   18764:	mov	r2, r0
   18768:	mov	r0, r4
   1876c:	mov	r1, r5
   18770:	mov	r3, r7
   18774:	bl	166e0 <__assert_fail@plt+0x4f80>
   18778:	mov	r5, r0
   1877c:	cmp	r0, #16
   18780:	movweq	r5, #8
   18784:	cmp	r5, #0
   18788:	bne	1882c <__assert_fail@plt+0x70cc>
   1878c:	ldr	r5, [r4, #16]
   18790:	ldr	r6, [r4]
   18794:	mov	r1, #0
   18798:	mov	r2, #256	; 0x100
   1879c:	mov	r0, r5
   187a0:	bl	11670 <memset@plt>
   187a4:	ldr	r1, [r6, #36]	; 0x24
   187a8:	mov	r0, r4
   187ac:	mov	r2, r5
   187b0:	bl	17e8c <__assert_fail@plt+0x672c>
   187b4:	ldr	r0, [r6, #36]	; 0x24
   187b8:	ldr	r1, [r6, #40]	; 0x28
   187bc:	cmp	r0, r1
   187c0:	beq	187d4 <__assert_fail@plt+0x7074>
   187c4:	mov	r0, r4
   187c8:	mov	r2, r5
   187cc:	bl	17e8c <__assert_fail@plt+0x672c>
   187d0:	ldr	r0, [r6, #36]	; 0x24
   187d4:	ldr	r1, [r6, #44]	; 0x2c
   187d8:	cmp	r0, r1
   187dc:	beq	187f0 <__assert_fail@plt+0x7090>
   187e0:	mov	r0, r4
   187e4:	mov	r2, r5
   187e8:	bl	17e8c <__assert_fail@plt+0x672c>
   187ec:	ldr	r0, [r6, #36]	; 0x24
   187f0:	ldr	r1, [r6, #48]	; 0x30
   187f4:	cmp	r0, r1
   187f8:	beq	18808 <__assert_fail@plt+0x70a8>
   187fc:	mov	r0, r4
   18800:	mov	r2, r5
   18804:	bl	17e8c <__assert_fail@plt+0x672c>
   18808:	ldrb	r0, [r8]
   1880c:	mov	r5, #0
   18810:	orr	r0, r0, #8
   18814:	strb	r0, [r8]
   18818:	mov	r0, r5
   1881c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18820:	mov	r5, #12
   18824:	mov	r0, r5
   18828:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1882c:	ldr	r0, [r4, #16]
   18830:	bl	14538 <__assert_fail@plt+0x2dd8>
   18834:	mov	r0, r5
   18838:	str	r9, [r4, #16]
   1883c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18840:	push	{r4, r5, r6, r7, fp, lr}
   18844:	add	fp, sp, #16
   18848:	cmp	r0, #17
   1884c:	bcs	188c0 <__assert_fail@plt+0x7160>
   18850:	movw	r1, #59720	; 0xe948
   18854:	mov	r4, r2
   18858:	mov	r2, #5
   1885c:	mov	r5, r3
   18860:	movt	r1, #2
   18864:	ldr	r0, [r1, r0, lsl #2]
   18868:	movw	r1, #59336	; 0xe7c8
   1886c:	movt	r1, #2
   18870:	add	r1, r1, r0
   18874:	mov	r0, #0
   18878:	bl	114e4 <dcgettext@plt>
   1887c:	mov	r6, r0
   18880:	bl	11628 <strlen@plt>
   18884:	add	r7, r0, #1
   18888:	cmp	r5, #0
   1888c:	beq	188a8 <__assert_fail@plt+0x7148>
   18890:	cmp	r7, r5
   18894:	mov	r2, r7
   18898:	bhi	188b0 <__assert_fail@plt+0x7150>
   1889c:	mov	r0, r4
   188a0:	mov	r1, r6
   188a4:	bl	11484 <memcpy@plt>
   188a8:	mov	r0, r7
   188ac:	pop	{r4, r5, r6, r7, fp, pc}
   188b0:	sub	r2, r5, #1
   188b4:	mov	r0, #0
   188b8:	strb	r0, [r4, r2]
   188bc:	b	1889c <__assert_fail@plt+0x713c>
   188c0:	bl	1173c <abort@plt>
   188c4:	push	{r4, r5, fp, lr}
   188c8:	add	fp, sp, #8
   188cc:	ldr	r5, [r0]
   188d0:	mov	r4, r0
   188d4:	cmp	r5, #0
   188d8:	beq	18904 <__assert_fail@plt+0x71a4>
   188dc:	movw	r0, #0
   188e0:	movw	r1, #0
   188e4:	movt	r0, #0
   188e8:	movt	r1, #0
   188ec:	orrs	r0, r1, r0
   188f0:	beq	188fc <__assert_fail@plt+0x719c>
   188f4:	add	r0, r5, #136	; 0x88
   188f8:	bl	11430 <pthread_mutex_destroy@plt>
   188fc:	mov	r0, r5
   18900:	bl	1892c <__assert_fail@plt+0x71cc>
   18904:	mov	r5, #0
   18908:	str	r5, [r4]
   1890c:	str	r5, [r4, #4]
   18910:	ldr	r0, [r4, #16]
   18914:	bl	14538 <__assert_fail@plt+0x2dd8>
   18918:	str	r5, [r4, #16]
   1891c:	ldr	r0, [r4, #20]
   18920:	bl	14538 <__assert_fail@plt+0x2dd8>
   18924:	str	r5, [r4, #20]
   18928:	pop	{r4, r5, fp, pc}
   1892c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18930:	add	fp, sp, #28
   18934:	sub	sp, sp, #4
   18938:	mov	sl, r0
   1893c:	ldr	r0, [r0]
   18940:	cmp	r0, #0
   18944:	ldrne	r1, [sl, #8]
   18948:	cmpne	r1, #0
   1894c:	beq	189c4 <__assert_fail@plt+0x7264>
   18950:	movw	r7, #255	; 0xff
   18954:	mov	r6, #0
   18958:	movt	r7, #4
   1895c:	b	18964 <__assert_fail@plt+0x7204>
   18960:	ldr	r0, [sl]
   18964:	add	r1, r0, r6, lsl #3
   18968:	ldr	r1, [r1, #4]
   1896c:	and	r1, r1, r7
   18970:	cmp	r1, #3
   18974:	beq	189ac <__assert_fail@plt+0x724c>
   18978:	cmp	r1, #6
   1897c:	bne	189b4 <__assert_fail@plt+0x7254>
   18980:	ldr	r5, [r0, r6, lsl #3]
   18984:	ldr	r0, [r5]
   18988:	bl	14538 <__assert_fail@plt+0x2dd8>
   1898c:	ldr	r0, [r5, #4]
   18990:	bl	14538 <__assert_fail@plt+0x2dd8>
   18994:	ldr	r0, [r5, #8]
   18998:	bl	14538 <__assert_fail@plt+0x2dd8>
   1899c:	ldr	r0, [r5, #12]
   189a0:	bl	14538 <__assert_fail@plt+0x2dd8>
   189a4:	mov	r0, r5
   189a8:	b	189b0 <__assert_fail@plt+0x7250>
   189ac:	ldr	r0, [r0, r6, lsl #3]
   189b0:	bl	14538 <__assert_fail@plt+0x2dd8>
   189b4:	ldr	r0, [sl, #8]
   189b8:	add	r6, r6, #1
   189bc:	cmp	r6, r0
   189c0:	bcc	18960 <__assert_fail@plt+0x7200>
   189c4:	ldr	r0, [sl, #12]
   189c8:	bl	14538 <__assert_fail@plt+0x2dd8>
   189cc:	ldr	r0, [sl, #8]
   189d0:	cmp	r0, #0
   189d4:	beq	18a40 <__assert_fail@plt+0x72e0>
   189d8:	add	r7, sl, #20
   189dc:	add	r8, sl, #28
   189e0:	add	r9, sl, #24
   189e4:	mov	r5, #0
   189e8:	mov	r6, #8
   189ec:	ldr	r0, [r9]
   189f0:	cmp	r0, #0
   189f4:	beq	18a00 <__assert_fail@plt+0x72a0>
   189f8:	ldr	r0, [r0, r6]
   189fc:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a00:	ldr	r0, [r8]
   18a04:	cmp	r0, #0
   18a08:	beq	18a14 <__assert_fail@plt+0x72b4>
   18a0c:	ldr	r0, [r0, r6]
   18a10:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a14:	ldr	r0, [r7]
   18a18:	cmp	r0, #0
   18a1c:	beq	18a28 <__assert_fail@plt+0x72c8>
   18a20:	ldr	r0, [r0, r6]
   18a24:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a28:	ldr	r0, [sl, #8]
   18a2c:	add	r5, r5, #1
   18a30:	add	r6, r6, #12
   18a34:	cmp	r5, r0
   18a38:	bcc	189ec <__assert_fail@plt+0x728c>
   18a3c:	b	18a4c <__assert_fail@plt+0x72ec>
   18a40:	add	r8, sl, #28
   18a44:	add	r9, sl, #24
   18a48:	add	r7, sl, #20
   18a4c:	ldr	r0, [r7]
   18a50:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a54:	ldr	r0, [r9]
   18a58:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a5c:	ldr	r0, [r8]
   18a60:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a64:	ldr	r0, [sl]
   18a68:	bl	14538 <__assert_fail@plt+0x2dd8>
   18a6c:	ldr	r5, [sl, #32]
   18a70:	cmp	r5, #0
   18a74:	beq	18ad4 <__assert_fail@plt+0x7374>
   18a78:	mov	r6, #0
   18a7c:	b	18a88 <__assert_fail@plt+0x7328>
   18a80:	ldr	r5, [sl, #32]
   18a84:	add	r6, r6, #1
   18a88:	add	r0, r6, r6, lsl #1
   18a8c:	ldr	r0, [r5, r0, lsl #2]!
   18a90:	add	r7, r5, #8
   18a94:	cmp	r0, #1
   18a98:	blt	18abc <__assert_fail@plt+0x735c>
   18a9c:	mov	r4, #0
   18aa0:	ldr	r0, [r7]
   18aa4:	ldr	r0, [r0, r4, lsl #2]
   18aa8:	bl	1ba70 <__assert_fail@plt+0xa310>
   18aac:	ldr	r0, [r5]
   18ab0:	add	r4, r4, #1
   18ab4:	cmp	r4, r0
   18ab8:	blt	18aa0 <__assert_fail@plt+0x7340>
   18abc:	ldr	r0, [r7]
   18ac0:	bl	14538 <__assert_fail@plt+0x2dd8>
   18ac4:	ldr	r0, [sl, #68]	; 0x44
   18ac8:	cmp	r6, r0
   18acc:	bcc	18a80 <__assert_fail@plt+0x7320>
   18ad0:	ldr	r5, [sl, #32]
   18ad4:	mov	r0, r5
   18ad8:	bl	14538 <__assert_fail@plt+0x2dd8>
   18adc:	ldr	r0, [sl, #60]	; 0x3c
   18ae0:	movw	r1, #59788	; 0xe98c
   18ae4:	movt	r1, #2
   18ae8:	cmp	r0, r1
   18aec:	beq	18af4 <__assert_fail@plt+0x7394>
   18af0:	bl	14538 <__assert_fail@plt+0x2dd8>
   18af4:	ldr	r0, [sl, #132]	; 0x84
   18af8:	bl	14538 <__assert_fail@plt+0x2dd8>
   18afc:	mov	r0, sl
   18b00:	sub	sp, fp, #28
   18b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b08:	b	14538 <__assert_fail@plt+0x2dd8>
   18b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b10:	add	fp, sp, #28
   18b14:	sub	sp, sp, #28
   18b18:	ldr	sl, [fp, #8]
   18b1c:	mov	r7, #2
   18b20:	cmp	sl, #7
   18b24:	bhi	18bf8 <__assert_fail@plt+0x7498>
   18b28:	mov	r5, r0
   18b2c:	ldr	r0, [r0]
   18b30:	mov	r6, r3
   18b34:	mov	r9, r2
   18b38:	mov	r4, r1
   18b3c:	tst	sl, #4
   18b40:	str	r0, [sp, #24]
   18b44:	bne	18b5c <__assert_fail@plt+0x73fc>
   18b48:	mov	r0, r4
   18b4c:	bl	11628 <strlen@plt>
   18b50:	mov	r7, r0
   18b54:	mov	r8, #0
   18b58:	b	18b64 <__assert_fail@plt+0x7404>
   18b5c:	ldr	r8, [r6]
   18b60:	ldr	r7, [r6, #4]
   18b64:	movw	r0, #0
   18b68:	movw	r1, #0
   18b6c:	movt	r0, #0
   18b70:	movt	r1, #0
   18b74:	orrs	r0, r1, r0
   18b78:	str	r0, [sp, #20]
   18b7c:	beq	18b8c <__assert_fail@plt+0x742c>
   18b80:	ldr	r0, [sp, #24]
   18b84:	add	r0, r0, #136	; 0x88
   18b88:	bl	1146c <pthread_mutex_lock@plt>
   18b8c:	ldrb	r0, [r5, #28]
   18b90:	tst	r0, #16
   18b94:	bne	18ba8 <__assert_fail@plt+0x7448>
   18b98:	str	r7, [sp]
   18b9c:	stmib	sp, {r7, r9}
   18ba0:	str	r6, [sp, #12]
   18ba4:	b	18bbc <__assert_fail@plt+0x745c>
   18ba8:	mov	r0, #0
   18bac:	str	r7, [sp]
   18bb0:	str	r7, [sp, #4]
   18bb4:	str	r0, [sp, #8]
   18bb8:	str	r0, [sp, #12]
   18bbc:	mov	r0, r5
   18bc0:	mov	r1, r4
   18bc4:	mov	r2, r7
   18bc8:	mov	r3, r8
   18bcc:	str	sl, [sp, #16]
   18bd0:	bl	18c04 <__assert_fail@plt+0x74a4>
   18bd4:	mov	r7, r0
   18bd8:	ldr	r0, [sp, #20]
   18bdc:	cmp	r0, #0
   18be0:	beq	18bf0 <__assert_fail@plt+0x7490>
   18be4:	ldr	r0, [sp, #24]
   18be8:	add	r0, r0, #136	; 0x88
   18bec:	bl	113b8 <pthread_mutex_unlock@plt>
   18bf0:	cmp	r7, #0
   18bf4:	movwne	r7, #1
   18bf8:	mov	r0, r7
   18bfc:	sub	sp, fp, #28
   18c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c08:	add	fp, sp, #28
   18c0c:	sub	sp, sp, #412	; 0x19c
   18c10:	ldr	r8, [r0]
   18c14:	str	r2, [sp, #76]	; 0x4c
   18c18:	str	r1, [sp, #100]	; 0x64
   18c1c:	mov	r7, r0
   18c20:	add	r0, sp, #104	; 0x68
   18c24:	mov	r1, #0
   18c28:	mov	r2, #136	; 0x88
   18c2c:	mov	r6, r3
   18c30:	mov	r4, #0
   18c34:	bl	11670 <memset@plt>
   18c38:	str	r8, [sp, #188]	; 0xbc
   18c3c:	ldr	sl, [fp, #16]
   18c40:	ldr	ip, [fp, #8]
   18c44:	mov	r5, #0
   18c48:	ldr	r1, [r7, #16]
   18c4c:	cmp	r1, #0
   18c50:	beq	18c6c <__assert_fail@plt+0x750c>
   18c54:	ldrb	r2, [r7, #28]
   18c58:	and	r2, r2, #9
   18c5c:	cmp	r2, #8
   18c60:	movne	r1, #0
   18c64:	subs	r5, r6, ip
   18c68:	movne	r5, r1
   18c6c:	ldr	r2, [r7, #24]
   18c70:	ldr	r1, [r7, #8]
   18c74:	mov	r9, #1
   18c78:	mvn	r3, r2
   18c7c:	cmp	r2, sl
   18c80:	addcc	r4, r3, sl
   18c84:	cmp	r1, #0
   18c88:	beq	1b220 <__assert_fail@plt+0x9ac0>
   18c8c:	ldr	r1, [r8, #36]	; 0x24
   18c90:	cmp	r1, #0
   18c94:	ldrne	r2, [r8, #40]	; 0x28
   18c98:	cmpne	r2, #0
   18c9c:	beq	1b220 <__assert_fail@plt+0x9ac0>
   18ca0:	ldr	r3, [r8, #44]	; 0x2c
   18ca4:	cmp	r3, #0
   18ca8:	movne	r0, r7
   18cac:	ldrne	r7, [r8, #48]	; 0x30
   18cb0:	cmpne	r7, #0
   18cb4:	beq	1b220 <__assert_fail@plt+0x9ac0>
   18cb8:	ldr	r1, [r1, #8]
   18cbc:	ldr	lr, [r0, #20]
   18cc0:	mov	r7, r0
   18cc4:	cmp	r1, #0
   18cc8:	bne	18cd8 <__assert_fail@plt+0x7578>
   18ccc:	ldr	r1, [r2, #8]
   18cd0:	cmp	r1, #0
   18cd4:	beq	1a3c4 <__assert_fail@plt+0x8c64>
   18cd8:	mov	r1, ip
   18cdc:	subs	r0, sl, r4
   18ce0:	str	r1, [sp, #80]	; 0x50
   18ce4:	str	r4, [sp, #28]
   18ce8:	str	r0, [sp, #68]	; 0x44
   18cec:	mov	r0, #1
   18cf0:	str	r0, [sp, #52]	; 0x34
   18cf4:	bne	18d08 <__assert_fail@plt+0x75a8>
   18cf8:	ldr	r0, [r8, #76]	; 0x4c
   18cfc:	cmp	r0, #0
   18d00:	movwne	r0, #1
   18d04:	str	r0, [sp, #52]	; 0x34
   18d08:	ldr	r0, [r7, #12]
   18d0c:	ldr	r2, [r8, #92]	; 0x5c
   18d10:	ldr	r3, [sp, #100]	; 0x64
   18d14:	ldr	r1, [r8, #8]
   18d18:	str	lr, [sp, #168]	; 0xa8
   18d1c:	str	r3, [sp, #104]	; 0x68
   18d20:	str	r2, [sp, #184]	; 0xb8
   18d24:	ubfx	r3, r0, #22, #1
   18d28:	and	r0, r0, #4194304	; 0x400000
   18d2c:	ldr	r4, [sp, #76]	; 0x4c
   18d30:	str	r8, [sp, #96]	; 0x60
   18d34:	orrs	sl, lr, r0
   18d38:	strb	r3, [sp, #176]	; 0xb0
   18d3c:	add	r3, sp, #104	; 0x68
   18d40:	movwne	sl, #1
   18d44:	add	r3, r3, #44	; 0x2c
   18d48:	strb	sl, [sp, #179]	; 0xb3
   18d4c:	ldrb	r0, [r8, #88]	; 0x58
   18d50:	vdup.32	q8, r4
   18d54:	add	r8, r1, #1
   18d58:	vst1.32	{d16-d17}, [r3]
   18d5c:	cmp	r2, r8
   18d60:	movgt	r8, r2
   18d64:	ubfx	r3, r0, #3, #1
   18d68:	strb	r3, [sp, #178]	; 0xb2
   18d6c:	ubfx	r0, r0, #2, #1
   18d70:	str	r7, [sp, #64]	; 0x40
   18d74:	str	r5, [sp, #92]	; 0x5c
   18d78:	str	lr, [sp, #88]	; 0x58
   18d7c:	strb	r0, [sp, #177]	; 0xb1
   18d80:	add	r0, r4, #1
   18d84:	cmp	r0, r8
   18d88:	movlt	r8, r0
   18d8c:	cmp	r2, #2
   18d90:	blt	18dc4 <__assert_fail@plt+0x7664>
   18d94:	mov	r9, #12
   18d98:	cmn	r8, #-1073741823	; 0xc0000001
   18d9c:	bhi	1b1cc <__assert_fail@plt+0x9a6c>
   18da0:	lsl	r1, r8, #2
   18da4:	mov	r0, #0
   18da8:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   18dac:	ldr	lr, [sp, #88]	; 0x58
   18db0:	ldr	r5, [sp, #92]	; 0x5c
   18db4:	cmp	r0, #0
   18db8:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   18dbc:	ldr	r7, [sp, #64]	; 0x40
   18dc0:	str	r0, [sp, #112]	; 0x70
   18dc4:	ldr	r4, [sp, #96]	; 0x60
   18dc8:	mov	r9, r7
   18dcc:	mov	r7, #1
   18dd0:	cmp	sl, #0
   18dd4:	beq	18dfc <__assert_fail@plt+0x769c>
   18dd8:	mov	r0, #0
   18ddc:	mov	r1, r8
   18de0:	mov	r7, #0
   18de4:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   18de8:	cmp	r0, #0
   18dec:	beq	1afc4 <__assert_fail@plt+0x9864>
   18df0:	ldr	r5, [sp, #92]	; 0x5c
   18df4:	ldr	lr, [sp, #88]	; 0x58
   18df8:	str	r0, [sp, #108]	; 0x6c
   18dfc:	add	r1, r4, #96	; 0x60
   18e00:	str	r8, [sp, #140]	; 0x8c
   18e04:	ldr	r0, [fp, #12]
   18e08:	cmp	r7, #0
   18e0c:	str	r1, [sp, #172]	; 0xac
   18e10:	ldrb	r1, [r4, #88]	; 0x58
   18e14:	ubfx	r1, r1, #4, #1
   18e18:	strb	r1, [sp, #182]	; 0xb6
   18e1c:	mov	r1, #0
   18e20:	beq	18e3c <__assert_fail@plt+0x76dc>
   18e24:	ldr	r1, [sp, #100]	; 0x64
   18e28:	str	r1, [sp, #108]	; 0x6c
   18e2c:	ldr	r1, [r4, #92]	; 0x5c
   18e30:	cmp	r1, #1
   18e34:	ldr	r1, [sp, #76]	; 0x4c
   18e38:	movwgt	r1, #0
   18e3c:	str	r1, [sp, #136]	; 0x88
   18e40:	str	r1, [sp, #132]	; 0x84
   18e44:	str	r0, [sp, #160]	; 0xa0
   18e48:	str	r0, [sp, #156]	; 0x9c
   18e4c:	ldrb	r0, [r9, #28]
   18e50:	lsr	r0, r0, #7
   18e54:	strb	r0, [sp, #181]	; 0xb5
   18e58:	mvn	r0, #0
   18e5c:	ldr	r4, [r4, #76]	; 0x4c
   18e60:	str	r0, [sp, #196]	; 0xc4
   18e64:	ldr	r0, [fp, #24]
   18e68:	lsl	sl, r4, #1
   18e6c:	cmp	r4, #1
   18e70:	str	r0, [sp, #192]	; 0xc0
   18e74:	blt	18ec4 <__assert_fail@plt+0x7764>
   18e78:	movw	r0, #43690	; 0xaaaa
   18e7c:	mov	r9, #12
   18e80:	movt	r0, #2730	; 0xaaa
   18e84:	cmp	sl, r0
   18e88:	bhi	1b1cc <__assert_fail@plt+0x9a6c>
   18e8c:	add	r0, r4, r4, lsl #1
   18e90:	lsl	r0, r0, #4
   18e94:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   18e98:	mov	r7, r0
   18e9c:	str	r0, [sp, #220]	; 0xdc
   18ea0:	lsl	r0, r4, #3
   18ea4:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   18ea8:	cmp	r0, #0
   18eac:	str	r0, [sp, #236]	; 0xec
   18eb0:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   18eb4:	ldr	r5, [sp, #92]	; 0x5c
   18eb8:	ldr	lr, [sp, #88]	; 0x58
   18ebc:	cmp	r7, #0
   18ec0:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   18ec4:	mov	r0, #1
   18ec8:	str	r0, [sp, #224]	; 0xe0
   18ecc:	ldr	r0, [sp, #68]	; 0x44
   18ed0:	str	sl, [sp, #216]	; 0xd8
   18ed4:	str	sl, [sp, #232]	; 0xe8
   18ed8:	cmp	r0, #1
   18edc:	bhi	18ef0 <__assert_fail@plt+0x7790>
   18ee0:	ldr	r0, [sp, #96]	; 0x60
   18ee4:	ldrb	r0, [r0, #88]	; 0x58
   18ee8:	tst	r0, #2
   18eec:	beq	18f1c <__assert_fail@plt+0x77bc>
   18ef0:	mov	r9, #12
   18ef4:	cmn	r8, #-1073741822	; 0xc0000002
   18ef8:	bhi	1b1cc <__assert_fail@plt+0x9a6c>
   18efc:	mov	r0, #4
   18f00:	add	r0, r0, r8, lsl #2
   18f04:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   18f08:	ldr	lr, [sp, #88]	; 0x58
   18f0c:	ldr	r5, [sp, #92]	; 0x5c
   18f10:	cmp	r0, #0
   18f14:	str	r0, [sp, #204]	; 0xcc
   18f18:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   18f1c:	ldr	r1, [fp, #24]
   18f20:	ldr	r2, [sp, #80]	; 0x50
   18f24:	str	r6, [fp, #-200]	; 0xffffff38
   18f28:	mov	r8, #1
   18f2c:	mov	r4, r6
   18f30:	mov	r0, #4
   18f34:	tst	r1, #1
   18f38:	mov	r1, #4
   18f3c:	mov	r7, r2
   18f40:	movweq	r1, #6
   18f44:	cmp	r2, r6
   18f48:	str	r1, [sp, #164]	; 0xa4
   18f4c:	ldr	r1, [sp, #96]	; 0x60
   18f50:	mvnlt	r8, #0
   18f54:	movlt	r7, r6
   18f58:	movlt	r4, r2
   18f5c:	cmp	r5, #0
   18f60:	ldr	r1, [r1, #92]	; 0x5c
   18f64:	str	r1, [sp, #60]	; 0x3c
   18f68:	beq	18fac <__assert_fail@plt+0x784c>
   18f6c:	cmp	r1, #1
   18f70:	beq	18f90 <__assert_fail@plt+0x7830>
   18f74:	ldr	r0, [sp, #64]	; 0x40
   18f78:	ldr	r0, [r0, #12]
   18f7c:	and	r0, r0, #4194304	; 0x400000
   18f80:	orr	r0, lr, r0
   18f84:	clz	r0, r0
   18f88:	lsr	r0, r0, #5
   18f8c:	lsl	r0, r0, #2
   18f90:	cmp	lr, #0
   18f94:	mov	r1, lr
   18f98:	movwne	r1, #1
   18f9c:	cmp	r2, r6
   18fa0:	orrge	r1, r1, #2
   18fa4:	orr	r0, r1, r0
   18fa8:	b	18fb0 <__assert_fail@plt+0x7850>
   18fac:	mov	r0, #8
   18fb0:	add	r1, sp, #104	; 0x68
   18fb4:	cmp	r2, r6
   18fb8:	sub	r0, r0, #4
   18fbc:	str	r7, [sp, #48]	; 0x30
   18fc0:	str	r4, [sp, #44]	; 0x2c
   18fc4:	str	r8, [sp, #84]	; 0x54
   18fc8:	add	r1, r1, #32
   18fcc:	str	r0, [sp, #80]	; 0x50
   18fd0:	str	r1, [sp, #24]
   18fd4:	sub	r1, fp, #200	; 0xc8
   18fd8:	movwlt	r1, #0
   18fdc:	cmp	r1, #0
   18fe0:	str	r1, [sp, #36]	; 0x24
   18fe4:	movwne	r1, #1
   18fe8:	str	r1, [sp, #40]	; 0x28
   18fec:	sub	r1, fp, #192	; 0xc0
   18ff0:	add	r1, r1, #16
   18ff4:	str	r1, [sp, #32]
   18ff8:	b	194a8 <__assert_fail@plt+0x7d48>
   18ffc:	mov	r1, #0
   19000:	sub	r0, fp, #188	; 0xbc
   19004:	str	r6, [fp, #-192]	; 0xffffff40
   19008:	stm	r0, {r1, r5, r8}
   1900c:	ldr	r0, [sp, #32]
   19010:	str	r1, [r0]
   19014:	str	r1, [r0, #4]
   19018:	str	r1, [r0, #8]
   1901c:	add	r0, sp, #104	; 0x68
   19020:	sub	r1, fp, #192	; 0xc0
   19024:	bl	27f40 <__assert_fail@plt+0x167e0>
   19028:	mov	r9, r0
   1902c:	mov	r0, #0
   19030:	bl	14538 <__assert_fail@plt+0x2dd8>
   19034:	cmp	r9, #0
   19038:	bne	19338 <__assert_fail@plt+0x7bd8>
   1903c:	ldr	r0, [r6]
   19040:	mov	r7, #0
   19044:	cmp	r0, #0
   19048:	beq	19128 <__assert_fail@plt+0x79c8>
   1904c:	b	1a208 <__assert_fail@plt+0x8aa8>
   19050:	ldr	r1, [r7]
   19054:	cmp	r1, #0
   19058:	bne	1a148 <__assert_fail@plt+0x89e8>
   1905c:	cmp	r3, #1
   19060:	blt	19128 <__assert_fail@plt+0x79c8>
   19064:	ldr	r0, [sp, #204]	; 0xcc
   19068:	lsl	r4, r3, #2
   1906c:	add	sl, r3, #1
   19070:	sub	r0, r0, #4
   19074:	ldr	r1, [r0, r4]
   19078:	cmp	r1, #0
   1907c:	ldrbne	r2, [r1, #52]	; 0x34
   19080:	tstne	r2, #16
   19084:	bne	1909c <__assert_fail@plt+0x793c>
   19088:	sub	sl, sl, #1
   1908c:	sub	r4, r4, #4
   19090:	cmp	sl, #2
   19094:	bge	19074 <__assert_fail@plt+0x7914>
   19098:	b	19128 <__assert_fail@plt+0x79c8>
   1909c:	sub	r5, sl, #2
   190a0:	add	r9, sp, #104	; 0x68
   190a4:	mov	r0, r9
   190a8:	mov	r2, r5
   190ac:	bl	2308c <__assert_fail@plt+0x1192c>
   190b0:	mov	r8, r0
   190b4:	mov	r0, r7
   190b8:	mov	r1, #0
   190bc:	mov	r2, r4
   190c0:	bl	11670 <memset@plt>
   190c4:	ldr	r0, [sp, #32]
   190c8:	mov	r1, #0
   190cc:	str	r6, [fp, #-192]	; 0xffffff40
   190d0:	str	r7, [fp, #-188]	; 0xffffff44
   190d4:	str	r8, [fp, #-184]	; 0xffffff48
   190d8:	str	r5, [fp, #-180]	; 0xffffff4c
   190dc:	str	r8, [sp, #56]	; 0x38
   190e0:	mov	r4, r5
   190e4:	str	r1, [r0]
   190e8:	str	r1, [r0, #4]
   190ec:	str	r1, [r0, #8]
   190f0:	mov	r0, r9
   190f4:	sub	r1, fp, #192	; 0xc0
   190f8:	bl	27f40 <__assert_fail@plt+0x167e0>
   190fc:	mov	r9, r0
   19100:	mov	r0, #0
   19104:	bl	14538 <__assert_fail@plt+0x2dd8>
   19108:	cmp	r9, #0
   1910c:	bne	19330 <__assert_fail@plt+0x7bd0>
   19110:	ldr	r0, [r6]
   19114:	mov	r3, r4
   19118:	cmp	r0, #0
   1911c:	beq	19050 <__assert_fail@plt+0x78f0>
   19120:	sub	r3, sl, #2
   19124:	b	1a148 <__assert_fail@plt+0x89e8>
   19128:	mov	r0, r6
   1912c:	bl	14538 <__assert_fail@plt+0x2dd8>
   19130:	mov	r0, r7
   19134:	bl	14538 <__assert_fail@plt+0x2dd8>
   19138:	ldr	r8, [sp, #84]	; 0x54
   1913c:	add	r0, sp, #104	; 0x68
   19140:	bl	23230 <__assert_fail@plt+0x11ad0>
   19144:	ldr	r0, [fp, #-200]	; 0xffffff38
   19148:	ldr	r4, [sp, #44]	; 0x2c
   1914c:	ldr	r7, [sp, #48]	; 0x30
   19150:	mov	r9, #1
   19154:	add	r6, r0, r8
   19158:	cmp	r6, r4
   1915c:	str	r6, [fp, #-200]	; 0xffffff38
   19160:	blt	1b1cc <__assert_fail@plt+0x9a6c>
   19164:	ldr	r5, [sp, #92]	; 0x5c
   19168:	ldr	lr, [sp, #88]	; 0x58
   1916c:	cmp	r7, r6
   19170:	bge	194a8 <__assert_fail@plt+0x7d48>
   19174:	b	1b1cc <__assert_fail@plt+0x9a6c>
   19178:	ldrb	r0, [sp, #182]	; 0xb6
   1917c:	cmp	r0, #0
   19180:	bne	19370 <__assert_fail@plt+0x7c10>
   19184:	cmp	r7, #10
   19188:	bne	192d0 <__assert_fail@plt+0x7b70>
   1918c:	ldrb	r3, [sp, #181]	; 0xb5
   19190:	cmp	r3, #0
   19194:	movwne	r3, #2
   19198:	tst	r3, #1
   1919c:	bne	192cc <__assert_fail@plt+0x7b6c>
   191a0:	cmp	r3, #0
   191a4:	beq	192d0 <__assert_fail@plt+0x7b70>
   191a8:	ands	r1, r3, #2
   191ac:	and	r0, r3, #4
   191b0:	cmpne	r0, #0
   191b4:	bne	19200 <__assert_fail@plt+0x7aa0>
   191b8:	cmp	r1, #0
   191bc:	bne	19210 <__assert_fail@plt+0x7ab0>
   191c0:	ldr	r6, [r4, #36]	; 0x24
   191c4:	cmp	r0, #0
   191c8:	beq	192d0 <__assert_fail@plt+0x7b70>
   191cc:	ldr	r2, [r6, #40]	; 0x28
   191d0:	sub	r0, fp, #196	; 0xc4
   191d4:	mov	r1, r4
   191d8:	mov	r6, lr
   191dc:	bl	21b1c <__assert_fail@plt+0x103bc>
   191e0:	mov	lr, r6
   191e4:	mov	r6, r0
   191e8:	cmp	r6, #0
   191ec:	bne	19674 <__assert_fail@plt+0x7f14>
   191f0:	b	1afc4 <__assert_fail@plt+0x9864>
   191f4:	ldr	r8, [sp, #84]	; 0x54
   191f8:	ldr	r1, [sp, #72]	; 0x48
   191fc:	b	19ef8 <__assert_fail@plt+0x8798>
   19200:	ldr	r6, [r4, #48]	; 0x30
   19204:	cmp	r6, #0
   19208:	bne	19674 <__assert_fail@plt+0x7f14>
   1920c:	b	1afc4 <__assert_fail@plt+0x9864>
   19210:	ldr	r6, [r4, #44]	; 0x2c
   19214:	cmp	r6, #0
   19218:	bne	19674 <__assert_fail@plt+0x7f14>
   1921c:	b	1afc4 <__assert_fail@plt+0x9864>
   19220:	mov	ip, r4
   19224:	cmn	ip, #1
   19228:	beq	1913c <__assert_fail@plt+0x79dc>
   1922c:	b	19f10 <__assert_fail@plt+0x87b0>
   19230:	mov	r9, r0
   19234:	mov	r0, r7
   19238:	bl	14538 <__assert_fail@plt+0x2dd8>
   1923c:	cmp	r9, #0
   19240:	beq	1a208 <__assert_fail@plt+0x8aa8>
   19244:	b	19340 <__assert_fail@plt+0x7be0>
   19248:	ldr	r8, [sp, #84]	; 0x54
   1924c:	cmn	r7, #1
   19250:	ble	192dc <__assert_fail@plt+0x7b7c>
   19254:	mov	r0, #1
   19258:	mov	ip, lr
   1925c:	str	r0, [sp, #56]	; 0x38
   19260:	ldr	r0, [sp, #52]	; 0x34
   19264:	cmp	r0, #0
   19268:	beq	19320 <__assert_fail@plt+0x7bc0>
   1926c:	b	196b8 <__assert_fail@plt+0x7f58>
   19270:	ldr	r0, [r6, #8]
   19274:	cmp	r0, #1
   19278:	blt	19454 <__assert_fail@plt+0x7cf4>
   1927c:	ldr	r4, [sp, #188]	; 0xbc
   19280:	mov	r7, #0
   19284:	b	193b8 <__assert_fail@plt+0x7c58>
   19288:	ldr	r1, [sp, #76]	; 0x4c
   1928c:	mov	r0, #0
   19290:	mov	r6, r7
   19294:	cmp	r7, r1
   19298:	ldr	r1, [sp, #100]	; 0x64
   1929c:	ldrblt	r0, [r1, r7]
   192a0:	cmp	lr, #0
   192a4:	ldrbne	r0, [lr, r0]
   192a8:	ldrb	r0, [r5, r0]
   192ac:	cmp	r0, #0
   192b0:	bne	19610 <__assert_fail@plt+0x7eb0>
   192b4:	b	1b2b4 <__assert_fail@plt+0x9b54>
   192b8:	ldr	r0, [sp, #192]	; 0xc0
   192bc:	and	r0, r0, #2
   192c0:	eor	r3, r0, #10
   192c4:	tst	r3, #1
   192c8:	beq	191a0 <__assert_fail@plt+0x7a40>
   192cc:	ldr	r6, [r4, #40]	; 0x28
   192d0:	cmp	r6, #0
   192d4:	bne	19674 <__assert_fail@plt+0x7f14>
   192d8:	b	1afc4 <__assert_fail@plt+0x9864>
   192dc:	add	r0, sp, #104	; 0x68
   192e0:	mov	r1, r6
   192e4:	mov	r2, lr
   192e8:	mov	r4, lr
   192ec:	bl	2308c <__assert_fail@plt+0x1192c>
   192f0:	clz	r1, r0
   192f4:	cmp	r0, #0
   192f8:	mov	ip, r4
   192fc:	mov	lr, r4
   19300:	lsr	r2, r1, #5
   19304:	ldr	r1, [sp, #52]	; 0x34
   19308:	movwne	r0, #1
   1930c:	mvneq	ip, #0
   19310:	str	r0, [sp, #56]	; 0x38
   19314:	orr	r1, r1, r2
   19318:	cmp	r1, #0
   1931c:	bne	196b8 <__assert_fail@plt+0x7f58>
   19320:	mov	ip, lr
   19324:	cmn	ip, #1
   19328:	beq	1913c <__assert_fail@plt+0x79dc>
   1932c:	b	19f10 <__assert_fail@plt+0x87b0>
   19330:	str	r7, [sp, #20]
   19334:	b	19340 <__assert_fail@plt+0x7be0>
   19338:	mov	r0, #0
   1933c:	str	r0, [sp, #20]
   19340:	mov	r0, r6
   19344:	bl	14538 <__assert_fail@plt+0x2dd8>
   19348:	ldr	r0, [sp, #20]
   1934c:	bl	14538 <__assert_fail@plt+0x2dd8>
   19350:	ldr	r7, [sp, #68]	; 0x44
   19354:	ldr	r6, [sp, #64]	; 0x40
   19358:	ldr	r8, [sp, #84]	; 0x54
   1935c:	cmp	r9, #0
   19360:	beq	1a238 <__assert_fail@plt+0x8ad8>
   19364:	cmp	r9, #1
   19368:	beq	1913c <__assert_fail@plt+0x79dc>
   1936c:	b	1b1cc <__assert_fail@plt+0x9a6c>
   19370:	mov	r0, r7
   19374:	mov	r9, lr
   19378:	bl	1164c <iswalnum@plt>
   1937c:	mov	lr, r9
   19380:	cmp	r7, #95	; 0x5f
   19384:	beq	192cc <__assert_fail@plt+0x7b6c>
   19388:	cmp	r0, #0
   1938c:	beq	19184 <__assert_fail@plt+0x7a24>
   19390:	b	192cc <__assert_fail@plt+0x7b6c>
   19394:	ldr	r0, [sp, #236]	; 0xec
   19398:	lsl	r1, r9, #3
   1939c:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   193a0:	cmp	r0, #0
   193a4:	beq	194a0 <__assert_fail@plt+0x7d40>
   193a8:	str	r0, [sp, #236]	; 0xec
   193ac:	lsl	r0, r9, #1
   193b0:	str	r0, [sp, #232]	; 0xe8
   193b4:	b	19404 <__assert_fail@plt+0x7ca4>
   193b8:	ldr	r1, [r6, #12]
   193bc:	ldr	r5, [r1, r7, lsl #2]
   193c0:	ldr	r1, [r4]
   193c4:	add	r2, r1, r5, lsl #3
   193c8:	ldrb	r2, [r2, #4]
   193cc:	cmp	r2, #8
   193d0:	bne	19448 <__assert_fail@plt+0x7ce8>
   193d4:	ldr	r1, [r1, r5, lsl #3]
   193d8:	cmp	r1, #31
   193dc:	bgt	19448 <__assert_fail@plt+0x7ce8>
   193e0:	ldr	r2, [r4, #80]	; 0x50
   193e4:	mov	r3, #1
   193e8:	tst	r2, r3, lsl r1
   193ec:	beq	19448 <__assert_fail@plt+0x7ce8>
   193f0:	ldr	r9, [sp, #228]	; 0xe4
   193f4:	ldr	r0, [sp, #232]	; 0xe8
   193f8:	mov	r8, lr
   193fc:	cmp	r9, r0
   19400:	beq	19394 <__assert_fail@plt+0x7c34>
   19404:	mov	r0, #1
   19408:	mov	r1, #24
   1940c:	bl	2d24c <__assert_fail@plt+0x1baec>
   19410:	ldr	r1, [sp, #228]	; 0xe4
   19414:	ldr	r2, [sp, #236]	; 0xec
   19418:	str	r0, [r2, r1, lsl #2]
   1941c:	ldr	r0, [sp, #236]	; 0xec
   19420:	ldr	r0, [r0, r1, lsl #2]
   19424:	cmp	r0, #0
   19428:	beq	194a0 <__assert_fail@plt+0x7d40>
   1942c:	add	r1, r1, #1
   19430:	str	r5, [r0, #4]
   19434:	mov	lr, r8
   19438:	str	r1, [sp, #228]	; 0xe4
   1943c:	mov	r1, #0
   19440:	str	r1, [r0]
   19444:	ldr	r0, [r6, #8]
   19448:	add	r7, r7, #1
   1944c:	cmp	r7, r0
   19450:	blt	193b8 <__assert_fail@plt+0x7c58>
   19454:	mov	sl, #0
   19458:	str	sl, [fp, #-196]	; 0xffffff3c
   1945c:	ldrb	r0, [r6, #52]	; 0x34
   19460:	tst	r0, #64	; 0x40
   19464:	beq	19698 <__assert_fail@plt+0x7f38>
   19468:	add	r1, r6, #4
   1946c:	add	r0, sp, #104	; 0x68
   19470:	mov	r4, lr
   19474:	bl	234c0 <__assert_fail@plt+0x11d60>
   19478:	mov	sl, #0
   1947c:	mov	lr, r4
   19480:	cmp	r0, #0
   19484:	str	r0, [fp, #-196]	; 0xffffff3c
   19488:	beq	19698 <__assert_fail@plt+0x7f38>
   1948c:	ldr	r8, [sp, #84]	; 0x54
   19490:	mov	ip, r0
   19494:	cmn	ip, #1
   19498:	beq	1913c <__assert_fail@plt+0x79dc>
   1949c:	b	19f10 <__assert_fail@plt+0x87b0>
   194a0:	mov	ip, #12
   194a4:	b	19f18 <__assert_fail@plt+0x87b8>
   194a8:	ldr	r1, [sp, #80]	; 0x50
   194ac:	cmp	r1, #4
   194b0:	bhi	19520 <__assert_fail@plt+0x7dc0>
   194b4:	add	r0, pc, #0
   194b8:	ldr	pc, [r0, r1, lsl #2]
   194bc:	ldrdeq	r9, [r1], -r0
   194c0:	ldrdeq	r9, [r1], -r0
   194c4:	andeq	r9, r1, r8, lsr #11
   194c8:	ldrdeq	r9, [r1], -r8
   194cc:	andeq	r9, r1, r0, lsl r6
   194d0:	mov	r9, #1
   194d4:	cmp	r6, r4
   194d8:	blt	1b1cc <__assert_fail@plt+0x9a6c>
   194dc:	cmp	lr, #0
   194e0:	beq	1a058 <__assert_fail@plt+0x88f8>
   194e4:	ldr	r1, [sp, #76]	; 0x4c
   194e8:	mov	r0, #0
   194ec:	cmp	r6, r1
   194f0:	ldrlt	r0, [sp, #100]	; 0x64
   194f4:	ldrblt	r0, [r0, r6]
   194f8:	ldrb	r0, [lr, r0]
   194fc:	ldrb	r0, [r5, r0]
   19500:	cmp	r0, #0
   19504:	bne	19610 <__assert_fail@plt+0x7eb0>
   19508:	sub	r0, r6, #1
   1950c:	cmp	r6, r4
   19510:	mov	r6, r0
   19514:	str	r0, [fp, #-200]	; 0xffffff38
   19518:	bgt	194e8 <__assert_fail@plt+0x7d88>
   1951c:	b	1b1cc <__assert_fail@plt+0x9a6c>
   19520:	ldr	r0, [sp, #128]	; 0x80
   19524:	ldr	r2, [sp, #136]	; 0x88
   19528:	sub	r1, r6, r0
   1952c:	cmp	r1, r2
   19530:	bcs	19574 <__assert_fail@plt+0x7e14>
   19534:	ldr	r3, [sp, #132]	; 0x84
   19538:	mov	r2, #0
   1953c:	cmp	r1, r3
   19540:	ldrcc	r2, [sp, #108]	; 0x6c
   19544:	ldrbcc	r2, [r2, r1]
   19548:	ldrb	r1, [r5, r2]
   1954c:	cmp	r1, #0
   19550:	bne	19610 <__assert_fail@plt+0x7eb0>
   19554:	add	r6, r6, r8
   19558:	mov	r9, #1
   1955c:	cmp	r6, r4
   19560:	str	r6, [fp, #-200]	; 0xffffff38
   19564:	blt	1b1cc <__assert_fail@plt+0x9a6c>
   19568:	cmp	r6, r7
   1956c:	ble	19524 <__assert_fail@plt+0x7dc4>
   19570:	b	1b1cc <__assert_fail@plt+0x9a6c>
   19574:	ldr	r2, [fp, #24]
   19578:	add	r0, sp, #104	; 0x68
   1957c:	mov	r1, r6
   19580:	bl	2261c <__assert_fail@plt+0x10ebc>
   19584:	cmp	r0, #0
   19588:	bne	1afd4 <__assert_fail@plt+0x9874>
   1958c:	ldr	r0, [sp, #128]	; 0x80
   19590:	ldr	r6, [fp, #-200]	; 0xffffff38
   19594:	ldr	r5, [sp, #92]	; 0x5c
   19598:	ldr	r7, [sp, #48]	; 0x30
   1959c:	ldr	r4, [sp, #44]	; 0x2c
   195a0:	sub	r1, r6, r0
   195a4:	b	19534 <__assert_fail@plt+0x7dd4>
   195a8:	ldr	r1, [sp, #100]	; 0x64
   195ac:	cmp	r6, r7
   195b0:	bge	19608 <__assert_fail@plt+0x7ea8>
   195b4:	ldrb	r0, [r1, r6]
   195b8:	ldrb	r0, [r5, r0]
   195bc:	cmp	r0, #0
   195c0:	bne	19608 <__assert_fail@plt+0x7ea8>
   195c4:	add	r6, r6, #1
   195c8:	cmp	r6, r7
   195cc:	str	r6, [fp, #-200]	; 0xffffff38
   195d0:	blt	195b4 <__assert_fail@plt+0x7e54>
   195d4:	b	19608 <__assert_fail@plt+0x7ea8>
   195d8:	cmp	r6, r7
   195dc:	bge	19608 <__assert_fail@plt+0x7ea8>
   195e0:	ldr	r1, [sp, #100]	; 0x64
   195e4:	ldrb	r0, [r1, r6]
   195e8:	ldrb	r0, [lr, r0]
   195ec:	ldrb	r0, [r5, r0]
   195f0:	cmp	r0, #0
   195f4:	bne	19608 <__assert_fail@plt+0x7ea8>
   195f8:	add	r6, r6, #1
   195fc:	cmp	r6, r7
   19600:	str	r6, [fp, #-200]	; 0xffffff38
   19604:	blt	195e4 <__assert_fail@plt+0x7e84>
   19608:	cmp	r6, r7
   1960c:	beq	19288 <__assert_fail@plt+0x7b28>
   19610:	ldr	r2, [fp, #24]
   19614:	add	r0, sp, #104	; 0x68
   19618:	mov	r1, r6
   1961c:	bl	2261c <__assert_fail@plt+0x10ebc>
   19620:	cmp	r0, #0
   19624:	bne	1afd4 <__assert_fail@plt+0x9874>
   19628:	ldr	r0, [sp, #60]	; 0x3c
   1962c:	cmp	r0, #1
   19630:	ldrne	r0, [sp, #132]	; 0x84
   19634:	cmpne	r0, #0
   19638:	bne	19f7c <__assert_fail@plt+0x881c>
   1963c:	mov	r0, #0
   19640:	str	r0, [sp, #212]	; 0xd4
   19644:	str	r0, [sp, #224]	; 0xe0
   19648:	str	r0, [sp, #208]	; 0xd0
   1964c:	str	r0, [fp, #-196]	; 0xffffff3c
   19650:	ldr	r4, [sp, #188]	; 0xbc
   19654:	ldr	lr, [sp, #144]	; 0x90
   19658:	ldr	r6, [r4, #36]	; 0x24
   1965c:	ldrsb	r0, [r6, #52]	; 0x34
   19660:	cmn	r0, #1
   19664:	ble	19f90 <__assert_fail@plt+0x8830>
   19668:	ldr	r5, [sp, #40]	; 0x28
   1966c:	cmp	r6, #0
   19670:	beq	1afc4 <__assert_fail@plt+0x9864>
   19674:	ldr	r0, [sp, #204]	; 0xcc
   19678:	mov	sl, r5
   1967c:	cmp	r0, #0
   19680:	beq	19698 <__assert_fail@plt+0x7f38>
   19684:	str	r6, [r0, lr, lsl #2]
   19688:	mov	sl, r5
   1968c:	ldr	r0, [r4, #76]	; 0x4c
   19690:	cmp	r0, #0
   19694:	bne	19270 <__assert_fail@plt+0x7b10>
   19698:	ldrb	r0, [r6, #52]	; 0x34
   1969c:	sxtb	r7, r0
   196a0:	tst	r0, #16
   196a4:	bne	19248 <__assert_fail@plt+0x7ae8>
   196a8:	ldr	r8, [sp, #84]	; 0x54
   196ac:	mov	r0, #0
   196b0:	mvn	ip, #0
   196b4:	str	r0, [sp, #56]	; 0x38
   196b8:	ldr	r4, [sp, #144]	; 0x90
   196bc:	ldr	r0, [sp, #160]	; 0xa0
   196c0:	cmp	r0, r4
   196c4:	ble	19ee4 <__assert_fail@plt+0x8784>
   196c8:	ldr	r1, [sp, #36]	; 0x24
   196cc:	b	19dbc <__assert_fail@plt+0x865c>
   196d0:	ldr	r0, [fp, #-196]	; 0xffffff3c
   196d4:	cmp	r0, #0
   196d8:	bne	1afc4 <__assert_fail@plt+0x9864>
   196dc:	ldr	r0, [sp, #56]	; 0x38
   196e0:	ldr	r1, [sp, #52]	; 0x34
   196e4:	clz	r0, r0
   196e8:	lsr	r0, r0, #5
   196ec:	orr	r0, r1, r0
   196f0:	cmp	r0, #1
   196f4:	bne	191f4 <__assert_fail@plt+0x7a94>
   196f8:	ldr	r0, [sp, #204]	; 0xcc
   196fc:	cmp	r0, #0
   19700:	beq	191f4 <__assert_fail@plt+0x7a94>
   19704:	mov	r5, lr
   19708:	b	19774 <__assert_fail@plt+0x8014>
   1970c:	ldr	r4, [sp, #144]	; 0x90
   19710:	ldr	r8, [sp, #84]	; 0x54
   19714:	cmn	r7, #1
   19718:	bgt	19740 <__assert_fail@plt+0x7fe0>
   1971c:	add	r0, sp, #104	; 0x68
   19720:	mov	r1, r6
   19724:	mov	r2, r4
   19728:	mov	r9, ip
   1972c:	mov	r5, lr
   19730:	bl	2308c <__assert_fail@plt+0x1192c>
   19734:	mov	lr, r5
   19738:	cmp	r0, #0
   1973c:	beq	197dc <__assert_fail@plt+0x807c>
   19740:	ldr	r0, [sp, #52]	; 0x34
   19744:	cmp	r0, #0
   19748:	beq	19220 <__assert_fail@plt+0x7ac0>
   1974c:	mov	r0, #1
   19750:	mov	r1, #0
   19754:	mov	ip, r4
   19758:	str	r0, [sp, #56]	; 0x38
   1975c:	ldr	r0, [sp, #160]	; 0xa0
   19760:	cmp	r0, r4
   19764:	bgt	19dbc <__assert_fail@plt+0x865c>
   19768:	b	19ef8 <__assert_fail@plt+0x8798>
   1976c:	ldr	r0, [sp, #204]	; 0xcc
   19770:	mov	ip, r4
   19774:	ldr	r2, [sp, #144]	; 0x90
   19778:	ldr	r1, [sp, #208]	; 0xd0
   1977c:	add	r2, r2, #1
   19780:	sub	r3, r2, #1
   19784:	cmp	r3, r1
   19788:	bge	19eec <__assert_fail@plt+0x878c>
   1978c:	str	r2, [sp, #144]	; 0x90
   19790:	ldr	r3, [r0, r2, lsl #2]
   19794:	add	r2, r2, #1
   19798:	cmp	r3, #0
   1979c:	beq	19780 <__assert_fail@plt+0x8020>
   197a0:	sub	r0, fp, #196	; 0xc4
   197a4:	add	r1, sp, #104	; 0x68
   197a8:	mov	r2, #0
   197ac:	mov	r4, ip
   197b0:	bl	24108 <__assert_fail@plt+0x129a8>
   197b4:	cmp	r0, #0
   197b8:	mov	r6, r0
   197bc:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   197c0:	cmpeq	r0, #0
   197c4:	beq	1976c <__assert_fail@plt+0x800c>
   197c8:	cmp	r6, #0
   197cc:	mov	ip, r4
   197d0:	mov	lr, r5
   197d4:	bne	19ea4 <__assert_fail@plt+0x8744>
   197d8:	b	191f4 <__assert_fail@plt+0x7a94>
   197dc:	ldr	r1, [sp, #72]	; 0x48
   197e0:	mov	ip, r9
   197e4:	ldr	r0, [sp, #160]	; 0xa0
   197e8:	cmp	r0, r4
   197ec:	bgt	19dbc <__assert_fail@plt+0x865c>
   197f0:	b	19ef8 <__assert_fail@plt+0x8798>
   197f4:	add	r1, r4, #2
   197f8:	add	r0, sp, #104	; 0x68
   197fc:	mov	r4, ip
   19800:	mov	r5, lr
   19804:	bl	23ef8 <__assert_fail@plt+0x12798>
   19808:	cmp	r0, #0
   1980c:	str	r0, [fp, #-196]	; 0xffffff3c
   19810:	bne	1afc4 <__assert_fail@plt+0x9864>
   19814:	ldrb	r7, [r8, #52]	; 0x34
   19818:	mov	lr, r5
   1981c:	mov	ip, r4
   19820:	tst	r7, #32
   19824:	beq	19dfc <__assert_fail@plt+0x869c>
   19828:	ldr	r0, [r8, #8]
   1982c:	cmp	r0, #1
   19830:	blt	19c64 <__assert_fail@plt+0x8504>
   19834:	ldr	r0, [sp, #188]	; 0xbc
   19838:	mov	r6, #0
   1983c:	str	r0, [sp, #20]
   19840:	stmib	sp, {sl, lr}
   19844:	str	r8, [sp, #12]
   19848:	b	19c28 <__assert_fail@plt+0x84c8>
   1984c:	movw	r0, #65280	; 0xff00
   19850:	movt	r0, #3
   19854:	tst	r7, r0
   19858:	beq	1997c <__assert_fail@plt+0x821c>
   1985c:	ldr	r0, [sp, #144]	; 0x90
   19860:	cmn	r0, #1
   19864:	ble	198a8 <__assert_fail@plt+0x8148>
   19868:	ldr	r1, [sp, #152]	; 0x98
   1986c:	mov	r8, sl
   19870:	cmp	r1, r0
   19874:	beq	19b90 <__assert_fail@plt+0x8430>
   19878:	ldr	r1, [sp, #184]	; 0xb8
   1987c:	cmp	r1, #2
   19880:	blt	198c0 <__assert_fail@plt+0x8160>
   19884:	ldr	r1, [sp, #112]	; 0x70
   19888:	mov	sl, r8
   1988c:	ldr	r4, [r1, r0, lsl #2]
   19890:	cmn	r4, #1
   19894:	bne	198fc <__assert_fail@plt+0x819c>
   19898:	sub	r2, r0, #1
   1989c:	cmp	r0, #0
   198a0:	mov	r0, r2
   198a4:	bgt	1988c <__assert_fail@plt+0x812c>
   198a8:	ldr	r1, [sp, #164]	; 0xa4
   198ac:	and	r0, r1, #1
   198b0:	tst	r7, #1024	; 0x400
   198b4:	eor	r2, r0, #1
   198b8:	bne	19930 <__assert_fail@plt+0x81d0>
   198bc:	b	19938 <__assert_fail@plt+0x81d8>
   198c0:	ldr	r1, [sp, #108]	; 0x6c
   198c4:	ldr	r2, [sp, #172]	; 0xac
   198c8:	mov	sl, r8
   198cc:	ldrb	r0, [r1, r0]
   198d0:	ubfx	r1, r0, #5, #3
   198d4:	and	r5, r0, #31
   198d8:	ldr	r3, [r2, r1, lsl #2]
   198dc:	mov	r1, #1
   198e0:	mov	r2, #0
   198e4:	tst	r3, r1, lsl r5
   198e8:	bne	19938 <__assert_fail@plt+0x81d8>
   198ec:	mov	r1, #0
   198f0:	cmp	r0, #10
   198f4:	beq	19914 <__assert_fail@plt+0x81b4>
   198f8:	b	19920 <__assert_fail@plt+0x81c0>
   198fc:	ldrb	r0, [sp, #182]	; 0xb6
   19900:	cmp	r0, #0
   19904:	bne	19bc4 <__assert_fail@plt+0x8464>
   19908:	mov	r1, #0
   1990c:	cmp	r4, #10
   19910:	bne	19920 <__assert_fail@plt+0x81c0>
   19914:	ldrb	r1, [sp, #181]	; 0xb5
   19918:	cmp	r1, #0
   1991c:	movwne	r1, #2
   19920:	and	r0, r1, #1
   19924:	tst	r7, #1024	; 0x400
   19928:	eor	r2, r0, #1
   1992c:	beq	19938 <__assert_fail@plt+0x81d8>
   19930:	cmp	r0, #0
   19934:	beq	19c50 <__assert_fail@plt+0x84f0>
   19938:	ldr	r0, [sp, #20]
   1993c:	ldr	r4, [sp, #16]
   19940:	cmp	r2, #0
   19944:	ldr	r0, [r0]
   19948:	add	r0, r0, r4, lsl #3
   1994c:	ldr	r0, [r0, #4]
   19950:	bne	1995c <__assert_fail@plt+0x81fc>
   19954:	ands	r2, r0, #2048	; 0x800
   19958:	bne	19c50 <__assert_fail@plt+0x84f0>
   1995c:	tst	r1, #2
   19960:	bne	1996c <__assert_fail@plt+0x820c>
   19964:	ands	r2, r0, #8192	; 0x2000
   19968:	bne	19c50 <__assert_fail@plt+0x84f0>
   1996c:	tst	r1, #8
   19970:	bne	1997c <__assert_fail@plt+0x821c>
   19974:	ands	r0, r0, #32768	; 0x8000
   19978:	bne	19c50 <__assert_fail@plt+0x84f0>
   1997c:	ldr	r3, [sp, #144]	; 0x90
   19980:	ldr	r0, [sp, #20]
   19984:	ldr	r1, [sp, #16]
   19988:	add	r2, sp, #104	; 0x68
   1998c:	mov	r5, ip
   19990:	bl	25c70 <__assert_fail@plt+0x14510>
   19994:	ldmib	sp, {sl, lr}
   19998:	mov	ip, r5
   1999c:	cmp	r0, #0
   199a0:	beq	19c50 <__assert_fail@plt+0x84f0>
   199a4:	ldr	r1, [sp, #224]	; 0xe0
   199a8:	cmp	r1, r0
   199ac:	movlt	r1, r0
   199b0:	str	r1, [sp, #224]	; 0xe0
   199b4:	ldr	r3, [sp, #144]	; 0x90
   199b8:	ldr	r2, [sp, #140]	; 0x8c
   199bc:	ldr	r1, [sp, #152]	; 0x98
   199c0:	ldr	r4, [sp, #208]	; 0xd0
   199c4:	add	r3, r3, r0
   199c8:	cmp	r2, r3
   199cc:	mov	r8, r3
   199d0:	cmple	r2, r1
   199d4:	blt	199e8 <__assert_fail@plt+0x8288>
   199d8:	ldr	r0, [sp, #132]	; 0x84
   199dc:	cmp	r0, r3
   199e0:	cmple	r0, r1
   199e4:	bge	19a00 <__assert_fail@plt+0x82a0>
   199e8:	add	r1, r3, #1
   199ec:	add	r0, sp, #104	; 0x68
   199f0:	bl	23ef8 <__assert_fail@plt+0x12798>
   199f4:	mov	r3, r8
   199f8:	cmp	r0, #0
   199fc:	bne	19d44 <__assert_fail@plt+0x85e4>
   19a00:	cmp	r3, r4
   19a04:	ble	19a2c <__assert_fail@plt+0x82cc>
   19a08:	sub	r0, r3, r4
   19a0c:	mov	r1, #0
   19a10:	lsl	r2, r0, #2
   19a14:	ldr	r0, [sp, #204]	; 0xcc
   19a18:	add	r0, r0, r4, lsl #2
   19a1c:	add	r0, r0, #4
   19a20:	bl	11670 <memset@plt>
   19a24:	mov	r3, r8
   19a28:	str	r8, [sp, #208]	; 0xd0
   19a2c:	mov	r0, #0
   19a30:	ldr	r1, [sp, #20]
   19a34:	ldr	r2, [sp, #16]
   19a38:	str	r0, [fp, #-48]	; 0xffffffd0
   19a3c:	ldr	r0, [sp, #204]	; 0xcc
   19a40:	ldr	r7, [r0, r3, lsl #2]
   19a44:	ldr	r0, [r1, #12]
   19a48:	ldr	r1, [r1, #24]
   19a4c:	ldr	r0, [r0, r2, lsl #2]
   19a50:	cmp	r7, #0
   19a54:	add	r0, r0, r0, lsl #1
   19a58:	add	r2, r1, r0, lsl #2
   19a5c:	beq	19a80 <__assert_fail@plt+0x8320>
   19a60:	ldr	r1, [r7, #40]	; 0x28
   19a64:	sub	r0, fp, #192	; 0xc0
   19a68:	bl	2435c <__assert_fail@plt+0x12bfc>
   19a6c:	mov	r3, r8
   19a70:	cmp	r0, #0
   19a74:	str	r0, [fp, #-48]	; 0xffffffd0
   19a78:	beq	19a90 <__assert_fail@plt+0x8330>
   19a7c:	b	19d48 <__assert_fail@plt+0x85e8>
   19a80:	vldr	d16, [r2]
   19a84:	ldr	r0, [r2, #8]
   19a88:	str	r0, [fp, #-184]	; 0xffffff48
   19a8c:	vstr	d16, [fp, #-192]	; 0xffffff40
   19a90:	cmp	r3, #0
   19a94:	ble	19ad8 <__assert_fail@plt+0x8378>
   19a98:	ldr	r1, [sp, #152]	; 0x98
   19a9c:	sub	r0, r3, #1
   19aa0:	cmp	r1, r0
   19aa4:	beq	19bb4 <__assert_fail@plt+0x8454>
   19aa8:	ldr	r1, [sp, #184]	; 0xb8
   19aac:	cmp	r1, #2
   19ab0:	blt	19ae0 <__assert_fail@plt+0x8380>
   19ab4:	ldr	r0, [sp, #112]	; 0x70
   19ab8:	mov	r1, r3
   19abc:	sub	r0, r0, #4
   19ac0:	ldr	r4, [r0, r1, lsl #2]
   19ac4:	cmn	r4, #1
   19ac8:	bne	19b14 <__assert_fail@plt+0x83b4>
   19acc:	sub	r1, r1, #1
   19ad0:	cmp	r1, #0
   19ad4:	bgt	19ac0 <__assert_fail@plt+0x8360>
   19ad8:	ldr	r3, [sp, #164]	; 0xa4
   19adc:	b	19b38 <__assert_fail@plt+0x83d8>
   19ae0:	ldr	r1, [sp, #108]	; 0x6c
   19ae4:	ldr	r2, [sp, #172]	; 0xac
   19ae8:	mov	r3, #1
   19aec:	ldrb	r0, [r1, r0]
   19af0:	ubfx	r1, r0, #5, #3
   19af4:	ldr	r1, [r2, r1, lsl #2]
   19af8:	and	r2, r0, #31
   19afc:	tst	r1, r3, lsl r2
   19b00:	bne	19b38 <__assert_fail@plt+0x83d8>
   19b04:	mov	r3, #0
   19b08:	cmp	r0, #10
   19b0c:	beq	19b2c <__assert_fail@plt+0x83cc>
   19b10:	b	19b38 <__assert_fail@plt+0x83d8>
   19b14:	ldrb	r0, [sp, #182]	; 0xb6
   19b18:	cmp	r0, #0
   19b1c:	bne	19bf8 <__assert_fail@plt+0x8498>
   19b20:	mov	r3, #0
   19b24:	cmp	r4, #10
   19b28:	bne	19b38 <__assert_fail@plt+0x83d8>
   19b2c:	ldrb	r3, [sp, #181]	; 0xb5
   19b30:	cmp	r3, #0
   19b34:	movwne	r3, #2
   19b38:	ldr	r1, [sp, #20]
   19b3c:	sub	r0, fp, #48	; 0x30
   19b40:	sub	r2, fp, #192	; 0xc0
   19b44:	bl	21b1c <__assert_fail@plt+0x103bc>
   19b48:	ldr	r1, [sp, #204]	; 0xcc
   19b4c:	mov	r2, r8
   19b50:	cmp	r7, #0
   19b54:	str	r0, [r1, r8, lsl #2]
   19b58:	beq	19b68 <__assert_fail@plt+0x8408>
   19b5c:	ldr	r0, [fp, #-184]	; 0xffffff48
   19b60:	bl	14538 <__assert_fail@plt+0x2dd8>
   19b64:	mov	r2, r8
   19b68:	ldr	r0, [sp, #204]	; 0xcc
   19b6c:	mov	ip, r5
   19b70:	ldr	r0, [r0, r2, lsl #2]
   19b74:	ldmib	sp, {sl, lr}
   19b78:	cmp	r0, #0
   19b7c:	bne	19c50 <__assert_fail@plt+0x84f0>
   19b80:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19b84:	cmp	r0, #0
   19b88:	beq	19c50 <__assert_fail@plt+0x84f0>
   19b8c:	b	19d50 <__assert_fail@plt+0x85f0>
   19b90:	ldr	r0, [sp, #192]	; 0xc0
   19b94:	mov	sl, r8
   19b98:	and	r0, r0, #2
   19b9c:	eor	r1, r0, #10
   19ba0:	and	r0, r1, #1
   19ba4:	tst	r7, #1024	; 0x400
   19ba8:	eor	r2, r0, #1
   19bac:	bne	19930 <__assert_fail@plt+0x81d0>
   19bb0:	b	19938 <__assert_fail@plt+0x81d8>
   19bb4:	ldr	r0, [sp, #192]	; 0xc0
   19bb8:	and	r0, r0, #2
   19bbc:	eor	r3, r0, #10
   19bc0:	b	19b38 <__assert_fail@plt+0x83d8>
   19bc4:	mov	r0, r4
   19bc8:	mov	r5, ip
   19bcc:	bl	1164c <iswalnum@plt>
   19bd0:	mov	r1, #1
   19bd4:	mov	r2, #0
   19bd8:	cmp	r4, #95	; 0x5f
   19bdc:	beq	19c18 <__assert_fail@plt+0x84b8>
   19be0:	ldr	lr, [sp, #8]
   19be4:	cmp	r0, #0
   19be8:	mov	ip, r5
   19bec:	mov	sl, r8
   19bf0:	beq	19908 <__assert_fail@plt+0x81a8>
   19bf4:	b	19938 <__assert_fail@plt+0x81d8>
   19bf8:	mov	r0, r4
   19bfc:	bl	1164c <iswalnum@plt>
   19c00:	mov	r3, #1
   19c04:	cmp	r4, #95	; 0x5f
   19c08:	beq	19b38 <__assert_fail@plt+0x83d8>
   19c0c:	cmp	r0, #0
   19c10:	beq	19b20 <__assert_fail@plt+0x83c0>
   19c14:	b	19b38 <__assert_fail@plt+0x83d8>
   19c18:	ldr	lr, [sp, #8]
   19c1c:	mov	ip, r5
   19c20:	mov	sl, r8
   19c24:	b	19938 <__assert_fail@plt+0x81d8>
   19c28:	ldr	r0, [r8, #12]
   19c2c:	ldr	r2, [r0, r6, lsl #2]
   19c30:	ldr	r0, [sp, #20]
   19c34:	ldr	r0, [r0]
   19c38:	mov	r1, r2
   19c3c:	str	r2, [sp, #16]
   19c40:	add	r0, r0, r2, lsl #3
   19c44:	ldr	r7, [r0, #4]
   19c48:	tst	r7, #1048576	; 0x100000
   19c4c:	bne	1984c <__assert_fail@plt+0x80ec>
   19c50:	ldr	r8, [sp, #12]
   19c54:	add	r6, r6, #1
   19c58:	ldr	r0, [r8, #8]
   19c5c:	cmp	r6, r0
   19c60:	blt	19c28 <__assert_fail@plt+0x84c8>
   19c64:	mov	r0, #0
   19c68:	str	r0, [fp, #-196]	; 0xffffff3c
   19c6c:	b	19dfc <__assert_fail@plt+0x869c>
   19c70:	ldr	r0, [sp, #144]	; 0x90
   19c74:	mov	r5, r8
   19c78:	cmp	r0, #0
   19c7c:	ble	19cc4 <__assert_fail@plt+0x8564>
   19c80:	ldr	r2, [sp, #152]	; 0x98
   19c84:	sub	r1, r0, #1
   19c88:	mov	r8, sl
   19c8c:	cmp	r2, r1
   19c90:	beq	19d6c <__assert_fail@plt+0x860c>
   19c94:	ldr	r2, [sp, #184]	; 0xb8
   19c98:	cmp	r2, #2
   19c9c:	blt	19ccc <__assert_fail@plt+0x856c>
   19ca0:	ldr	r1, [sp, #112]	; 0x70
   19ca4:	mov	sl, r8
   19ca8:	sub	r1, r1, #4
   19cac:	ldr	r4, [r1, r0, lsl #2]
   19cb0:	cmn	r4, #1
   19cb4:	bne	19d04 <__assert_fail@plt+0x85a4>
   19cb8:	sub	r0, r0, #1
   19cbc:	cmp	r0, #0
   19cc0:	bgt	19cac <__assert_fail@plt+0x854c>
   19cc4:	ldr	r1, [sp, #164]	; 0xa4
   19cc8:	b	19d28 <__assert_fail@plt+0x85c8>
   19ccc:	ldr	r0, [sp, #108]	; 0x6c
   19cd0:	ldr	r2, [sp, #172]	; 0xac
   19cd4:	mov	sl, r8
   19cd8:	ldrb	r0, [r0, r1]
   19cdc:	ubfx	r1, r0, #5, #3
   19ce0:	and	r3, r0, #31
   19ce4:	ldr	r2, [r2, r1, lsl #2]
   19ce8:	mov	r1, #1
   19cec:	tst	r2, r1, lsl r3
   19cf0:	bne	19d28 <__assert_fail@plt+0x85c8>
   19cf4:	mov	r1, #0
   19cf8:	cmp	r0, #10
   19cfc:	beq	19d1c <__assert_fail@plt+0x85bc>
   19d00:	b	19d28 <__assert_fail@plt+0x85c8>
   19d04:	ldrb	r0, [sp, #182]	; 0xb6
   19d08:	cmp	r0, #0
   19d0c:	bne	19d78 <__assert_fail@plt+0x8618>
   19d10:	mov	r1, #0
   19d14:	cmp	r4, #10
   19d18:	bne	19d28 <__assert_fail@plt+0x85c8>
   19d1c:	ldrb	r1, [sp, #181]	; 0xb5
   19d20:	cmp	r1, #0
   19d24:	movwne	r1, #2
   19d28:	bfi	r6, r1, #8, #1
   19d2c:	mov	r8, r5
   19d30:	ldr	r6, [r7, r6, lsl #2]
   19d34:	ldr	r0, [sp, #204]	; 0xcc
   19d38:	cmp	r0, #0
   19d3c:	bne	19e78 <__assert_fail@plt+0x8718>
   19d40:	b	19e9c <__assert_fail@plt+0x873c>
   19d44:	str	r0, [fp, #-48]	; 0xffffffd0
   19d48:	ldmib	sp, {sl, lr}
   19d4c:	mov	ip, r5
   19d50:	ldr	r8, [sp, #12]
   19d54:	str	r0, [fp, #-196]	; 0xffffff3c
   19d58:	mov	r6, #0
   19d5c:	ldr	r0, [sp, #204]	; 0xcc
   19d60:	cmp	r0, #0
   19d64:	bne	19e78 <__assert_fail@plt+0x8718>
   19d68:	b	19e9c <__assert_fail@plt+0x873c>
   19d6c:	mov	r1, #10
   19d70:	mov	sl, r8
   19d74:	b	19d28 <__assert_fail@plt+0x85c8>
   19d78:	mov	r0, r4
   19d7c:	str	lr, [sp, #8]
   19d80:	str	ip, [sp, #20]
   19d84:	bl	1164c <iswalnum@plt>
   19d88:	mov	r1, #1
   19d8c:	cmp	r4, #95	; 0x5f
   19d90:	beq	19dac <__assert_fail@plt+0x864c>
   19d94:	ldr	ip, [sp, #20]
   19d98:	ldr	lr, [sp, #8]
   19d9c:	cmp	r0, #0
   19da0:	mov	sl, r8
   19da4:	beq	19d10 <__assert_fail@plt+0x85b0>
   19da8:	b	19d28 <__assert_fail@plt+0x85c8>
   19dac:	ldr	ip, [sp, #20]
   19db0:	ldr	lr, [sp, #8]
   19db4:	mov	sl, r8
   19db8:	b	19d28 <__assert_fail@plt+0x85c8>
   19dbc:	str	r1, [sp, #72]	; 0x48
   19dc0:	ldr	r1, [sp, #140]	; 0x8c
   19dc4:	ldr	r0, [sp, #152]	; 0x98
   19dc8:	add	r9, r4, #1
   19dcc:	mov	r8, r6
   19dd0:	cmp	r9, r1
   19dd4:	blt	19de0 <__assert_fail@plt+0x8680>
   19dd8:	cmp	r1, r0
   19ddc:	blt	197f4 <__assert_fail@plt+0x8094>
   19de0:	ldr	r1, [sp, #132]	; 0x84
   19de4:	cmp	r9, r1
   19de8:	blt	19df4 <__assert_fail@plt+0x8694>
   19dec:	cmp	r1, r0
   19df0:	blt	197f4 <__assert_fail@plt+0x8094>
   19df4:	tst	r7, #32
   19df8:	bne	19828 <__assert_fail@plt+0x80c8>
   19dfc:	ldr	r1, [sp, #144]	; 0x90
   19e00:	ldr	r0, [sp, #108]	; 0x6c
   19e04:	add	r2, r1, #1
   19e08:	str	r2, [sp, #144]	; 0x90
   19e0c:	ldrb	r6, [r0, r1]
   19e10:	ldr	r0, [r8, #44]	; 0x2c
   19e14:	cmp	r0, #0
   19e18:	bne	19e68 <__assert_fail@plt+0x8708>
   19e1c:	ldr	r7, [r8, #48]	; 0x30
   19e20:	cmp	r7, #0
   19e24:	bne	19c70 <__assert_fail@plt+0x8510>
   19e28:	ldr	r0, [sp, #188]	; 0xbc
   19e2c:	mov	r1, r8
   19e30:	mov	r4, ip
   19e34:	mov	r5, lr
   19e38:	bl	261b8 <__assert_fail@plt+0x14a58>
   19e3c:	mov	lr, r5
   19e40:	mov	ip, r4
   19e44:	cmp	r0, #0
   19e48:	bne	19e10 <__assert_fail@plt+0x86b0>
   19e4c:	mov	r0, #12
   19e50:	mov	r6, #0
   19e54:	str	r0, [fp, #-196]	; 0xffffff3c
   19e58:	ldr	r0, [sp, #204]	; 0xcc
   19e5c:	cmp	r0, #0
   19e60:	bne	19e78 <__assert_fail@plt+0x8718>
   19e64:	b	19e9c <__assert_fail@plt+0x873c>
   19e68:	ldr	r6, [r0, r6, lsl #2]
   19e6c:	ldr	r0, [sp, #204]	; 0xcc
   19e70:	cmp	r0, #0
   19e74:	beq	19e9c <__assert_fail@plt+0x873c>
   19e78:	sub	r0, fp, #196	; 0xc4
   19e7c:	add	r1, sp, #104	; 0x68
   19e80:	mov	r2, r6
   19e84:	mov	r4, ip
   19e88:	mov	r5, lr
   19e8c:	bl	24108 <__assert_fail@plt+0x129a8>
   19e90:	mov	lr, r5
   19e94:	mov	ip, r4
   19e98:	mov	r6, r0
   19e9c:	cmp	r6, #0
   19ea0:	beq	196d0 <__assert_fail@plt+0x7f70>
   19ea4:	sub	r0, r8, r6
   19ea8:	clz	r0, r0
   19eac:	lsr	r0, r0, #5
   19eb0:	ands	sl, sl, r0
   19eb4:	ldrb	r0, [r6, #52]	; 0x34
   19eb8:	movne	lr, r9
   19ebc:	sxtb	r7, r0
   19ec0:	tst	r0, #16
   19ec4:	bne	1970c <__assert_fail@plt+0x7fac>
   19ec8:	ldr	r4, [sp, #144]	; 0x90
   19ecc:	ldr	r8, [sp, #84]	; 0x54
   19ed0:	ldr	r1, [sp, #72]	; 0x48
   19ed4:	ldr	r0, [sp, #160]	; 0xa0
   19ed8:	cmp	r0, r4
   19edc:	bgt	19dbc <__assert_fail@plt+0x865c>
   19ee0:	b	19ef8 <__assert_fail@plt+0x8798>
   19ee4:	ldr	r1, [sp, #36]	; 0x24
   19ee8:	b	19ef8 <__assert_fail@plt+0x8798>
   19eec:	ldr	r8, [sp, #84]	; 0x54
   19ef0:	ldr	r1, [sp, #72]	; 0x48
   19ef4:	mov	lr, r5
   19ef8:	cmp	r1, #0
   19efc:	ldrne	r0, [r1]
   19f00:	addne	r0, r0, lr
   19f04:	strne	r0, [r1]
   19f08:	cmn	ip, #1
   19f0c:	beq	1913c <__assert_fail@plt+0x79dc>
   19f10:	cmn	ip, #2
   19f14:	beq	1afc4 <__assert_fail@plt+0x9864>
   19f18:	ldr	r7, [sp, #68]	; 0x44
   19f1c:	ldr	r6, [sp, #64]	; 0x40
   19f20:	mov	r8, ip
   19f24:	str	ip, [sp, #196]	; 0xc4
   19f28:	cmp	r7, #2
   19f2c:	bcc	19fec <__assert_fail@plt+0x888c>
   19f30:	ldrb	r0, [r6, #28]
   19f34:	ands	r0, r0, #16
   19f38:	bne	19fec <__assert_fail@plt+0x888c>
   19f3c:	ldr	r0, [sp, #204]	; 0xcc
   19f40:	mov	r2, ip
   19f44:	ldr	r1, [r0, ip, lsl #2]
   19f48:	add	r0, sp, #104	; 0x68
   19f4c:	bl	2308c <__assert_fail@plt+0x1192c>
   19f50:	ldr	sl, [sp, #96]	; 0x60
   19f54:	str	r0, [sp, #200]	; 0xc8
   19f58:	mov	r5, r0
   19f5c:	ldrb	r0, [sl, #88]	; 0x58
   19f60:	tst	r0, #1
   19f64:	bne	1a090 <__assert_fail@plt+0x8930>
   19f68:	ldr	r0, [sl, #76]	; 0x4c
   19f6c:	mov	r1, r8
   19f70:	cmp	r0, #0
   19f74:	bne	1a01c <__assert_fail@plt+0x88bc>
   19f78:	b	1a238 <__assert_fail@plt+0x8ad8>
   19f7c:	ldr	r0, [sp, #112]	; 0x70
   19f80:	ldr	r0, [r0]
   19f84:	cmn	r0, #1
   19f88:	bne	1963c <__assert_fail@plt+0x7edc>
   19f8c:	b	19144 <__assert_fail@plt+0x79e4>
   19f90:	ldr	r5, [sp, #40]	; 0x28
   19f94:	cmp	lr, #0
   19f98:	ble	19fdc <__assert_fail@plt+0x887c>
   19f9c:	ldr	r1, [sp, #152]	; 0x98
   19fa0:	sub	r0, lr, #1
   19fa4:	cmp	r1, r0
   19fa8:	beq	192b8 <__assert_fail@plt+0x7b58>
   19fac:	ldr	r1, [sp, #184]	; 0xb8
   19fb0:	cmp	r1, #2
   19fb4:	blt	1a028 <__assert_fail@plt+0x88c8>
   19fb8:	ldr	r0, [sp, #112]	; 0x70
   19fbc:	mov	r1, lr
   19fc0:	sub	r0, r0, #4
   19fc4:	ldr	r7, [r0, r1, lsl #2]
   19fc8:	cmn	r7, #1
   19fcc:	bne	19178 <__assert_fail@plt+0x7a18>
   19fd0:	sub	r1, r1, #1
   19fd4:	cmp	r1, #0
   19fd8:	bgt	19fc4 <__assert_fail@plt+0x8864>
   19fdc:	ldr	r3, [sp, #164]	; 0xa4
   19fe0:	tst	r3, #1
   19fe4:	beq	191a0 <__assert_fail@plt+0x7a40>
   19fe8:	b	192cc <__assert_fail@plt+0x7b6c>
   19fec:	ldr	sl, [sp, #96]	; 0x60
   19ff0:	ldr	r0, [sl, #76]	; 0x4c
   19ff4:	cmp	r0, #0
   19ff8:	beq	1a238 <__assert_fail@plt+0x8ad8>
   19ffc:	ldr	r0, [sp, #204]	; 0xcc
   1a000:	mov	r2, ip
   1a004:	ldr	r1, [r0, ip, lsl #2]
   1a008:	add	r0, sp, #104	; 0x68
   1a00c:	bl	2308c <__assert_fail@plt+0x1192c>
   1a010:	mov	r1, r8
   1a014:	mov	r5, r0
   1a018:	str	r0, [sp, #200]	; 0xc8
   1a01c:	cmn	r1, #-1073741823	; 0xc0000001
   1a020:	bcc	1a09c <__assert_fail@plt+0x893c>
   1a024:	b	1afc4 <__assert_fail@plt+0x9864>
   1a028:	ldr	r1, [sp, #108]	; 0x6c
   1a02c:	ldr	r2, [sp, #172]	; 0xac
   1a030:	mov	r3, #1
   1a034:	ldrb	r0, [r1, r0]
   1a038:	ubfx	r1, r0, #5, #3
   1a03c:	ldr	r1, [r2, r1, lsl #2]
   1a040:	and	r2, r0, #31
   1a044:	tst	r1, r3, lsl r2
   1a048:	bne	192cc <__assert_fail@plt+0x7b6c>
   1a04c:	cmp	r0, #10
   1a050:	beq	1918c <__assert_fail@plt+0x7a2c>
   1a054:	b	192d0 <__assert_fail@plt+0x7b70>
   1a058:	ldr	r1, [sp, #76]	; 0x4c
   1a05c:	mov	r0, #0
   1a060:	cmp	r6, r1
   1a064:	ldrlt	r0, [sp, #100]	; 0x64
   1a068:	ldrblt	r0, [r0, r6]
   1a06c:	ldrb	r0, [r5, r0]
   1a070:	cmp	r0, #0
   1a074:	bne	19610 <__assert_fail@plt+0x7eb0>
   1a078:	sub	r0, r6, #1
   1a07c:	cmp	r6, r4
   1a080:	mov	r6, r0
   1a084:	str	r0, [fp, #-200]	; 0xffffff38
   1a088:	bgt	1a05c <__assert_fail@plt+0x88fc>
   1a08c:	b	1b1cc <__assert_fail@plt+0x9a6c>
   1a090:	mov	r1, r8
   1a094:	cmn	r1, #-1073741823	; 0xc0000001
   1a098:	bcs	1afc4 <__assert_fail@plt+0x9864>
   1a09c:	ldr	r0, [sp, #188]	; 0xbc
   1a0a0:	str	r0, [sp, #72]	; 0x48
   1a0a4:	mov	r0, #4
   1a0a8:	add	r4, r0, r1, lsl #2
   1a0ac:	mov	r0, r4
   1a0b0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1a0b4:	mov	r6, r0
   1a0b8:	cmp	r0, #0
   1a0bc:	beq	1b22c <__assert_fail@plt+0x9acc>
   1a0c0:	ldr	r0, [sp, #72]	; 0x48
   1a0c4:	str	r5, [sp, #56]	; 0x38
   1a0c8:	ldr	r0, [r0, #76]	; 0x4c
   1a0cc:	cmp	r0, #0
   1a0d0:	beq	18ffc <__assert_fail@plt+0x789c>
   1a0d4:	mov	r0, r4
   1a0d8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1a0dc:	cmp	r0, #0
   1a0e0:	beq	1b22c <__assert_fail@plt+0x9acc>
   1a0e4:	mov	r1, #0
   1a0e8:	mov	r2, r4
   1a0ec:	mov	r7, r0
   1a0f0:	bl	11670 <memset@plt>
   1a0f4:	ldr	r0, [sp, #32]
   1a0f8:	mov	r1, #0
   1a0fc:	str	r6, [fp, #-192]	; 0xffffff40
   1a100:	str	r7, [fp, #-188]	; 0xffffff44
   1a104:	str	r5, [fp, #-184]	; 0xffffff48
   1a108:	str	r8, [fp, #-180]	; 0xffffff4c
   1a10c:	str	r1, [r0]
   1a110:	str	r1, [r0, #4]
   1a114:	str	r1, [r0, #8]
   1a118:	add	r0, sp, #104	; 0x68
   1a11c:	sub	r1, fp, #192	; 0xc0
   1a120:	bl	27f40 <__assert_fail@plt+0x167e0>
   1a124:	mov	r9, r0
   1a128:	mov	r0, #0
   1a12c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a130:	cmp	r9, #0
   1a134:	bne	19330 <__assert_fail@plt+0x7bd0>
   1a138:	ldr	r0, [r6]
   1a13c:	mov	r3, r8
   1a140:	cmp	r0, #0
   1a144:	beq	19050 <__assert_fail@plt+0x78f0>
   1a148:	mov	r1, #0
   1a14c:	cmp	r3, #0
   1a150:	mov	r9, #0
   1a154:	mov	r8, r3
   1a158:	str	r1, [sp, #20]
   1a15c:	blt	1a1f8 <__assert_fail@plt+0x8a98>
   1a160:	mov	r5, #0
   1a164:	ldr	r2, [r7, r5, lsl #2]
   1a168:	cmp	r0, #0
   1a16c:	bne	1a198 <__assert_fail@plt+0x8a38>
   1a170:	str	r2, [r6, r5, lsl #2]
   1a174:	cmp	r5, r3
   1a178:	bge	1a1f4 <__assert_fail@plt+0x8a94>
   1a17c:	add	r0, r6, r5, lsl #2
   1a180:	add	r1, r5, #1
   1a184:	ldr	r0, [r0, #4]
   1a188:	mov	r5, r1
   1a18c:	ldr	r2, [r7, r5, lsl #2]
   1a190:	cmp	r0, #0
   1a194:	beq	1a170 <__assert_fail@plt+0x8a10>
   1a198:	cmp	r2, #0
   1a19c:	beq	1a1ec <__assert_fail@plt+0x8a8c>
   1a1a0:	sub	sl, fp, #48	; 0x30
   1a1a4:	add	r1, r0, #4
   1a1a8:	add	r2, r2, #4
   1a1ac:	mov	r0, sl
   1a1b0:	bl	2435c <__assert_fail@plt+0x12bfc>
   1a1b4:	cmp	r0, #0
   1a1b8:	str	r0, [fp, #-196]	; 0xffffff3c
   1a1bc:	bne	19230 <__assert_fail@plt+0x7ad0>
   1a1c0:	ldr	r1, [sp, #72]	; 0x48
   1a1c4:	sub	r0, fp, #196	; 0xc4
   1a1c8:	mov	r2, sl
   1a1cc:	bl	259d0 <__assert_fail@plt+0x14270>
   1a1d0:	str	r0, [r6, r5, lsl #2]
   1a1d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a1d8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a1dc:	ldr	r9, [fp, #-196]	; 0xffffff3c
   1a1e0:	mov	r3, r8
   1a1e4:	cmp	r9, #0
   1a1e8:	bne	1a1f8 <__assert_fail@plt+0x8a98>
   1a1ec:	cmp	r5, r3
   1a1f0:	blt	1a17c <__assert_fail@plt+0x8a1c>
   1a1f4:	mov	r9, #0
   1a1f8:	mov	r0, r7
   1a1fc:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a200:	cmp	r9, #0
   1a204:	bne	19340 <__assert_fail@plt+0x7be0>
   1a208:	ldr	r0, [sp, #204]	; 0xcc
   1a20c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a210:	ldr	r0, [sp, #56]	; 0x38
   1a214:	str	r0, [sp, #200]	; 0xc8
   1a218:	mov	r0, #0
   1a21c:	str	r6, [sp, #204]	; 0xcc
   1a220:	str	r8, [sp, #196]	; 0xc4
   1a224:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a228:	mov	r0, #0
   1a22c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a230:	ldr	r7, [sp, #68]	; 0x44
   1a234:	ldr	r6, [sp, #64]	; 0x40
   1a238:	cmp	r7, #0
   1a23c:	beq	1b1c8 <__assert_fail@plt+0x9a68>
   1a240:	ldr	r1, [fp, #16]
   1a244:	ldr	r5, [fp, #20]
   1a248:	cmp	r7, #1
   1a24c:	beq	1a26c <__assert_fail@plt+0x8b0c>
   1a250:	ldr	r0, [sp, #28]
   1a254:	mvn	r0, r0
   1a258:	add	r0, r0, r1
   1a25c:	mov	r1, #255	; 0xff
   1a260:	lsl	r2, r0, #3
   1a264:	add	r0, r5, #8
   1a268:	bl	11670 <memset@plt>
   1a26c:	ldr	r1, [sp, #196]	; 0xc4
   1a270:	mov	r0, #0
   1a274:	cmp	r7, #2
   1a278:	sub	r4, fp, #48	; 0x30
   1a27c:	stm	r5, {r0, r1}
   1a280:	bcc	1b100 <__assert_fail@plt+0x99a0>
   1a284:	ldrb	r0, [r6, #28]
   1a288:	ands	r0, r0, #16
   1a28c:	bne	1b100 <__assert_fail@plt+0x99a0>
   1a290:	ldr	r0, [sp, #96]	; 0x60
   1a294:	ldrb	r1, [r0, #88]	; 0x58
   1a298:	mov	r0, #0
   1a29c:	tst	r1, #1
   1a2a0:	mov	r1, #0
   1a2a4:	beq	1a2bc <__assert_fail@plt+0x8b5c>
   1a2a8:	ldr	r1, [sp, #96]	; 0x60
   1a2ac:	ldr	r2, [r1, #76]	; 0x4c
   1a2b0:	mov	r1, #0
   1a2b4:	cmp	r2, #0
   1a2b8:	movwgt	r1, #1
   1a2bc:	movw	r2, #59824	; 0xe9b0
   1a2c0:	ldr	r6, [r6]
   1a2c4:	cmp	r1, #0
   1a2c8:	mov	r8, #0
   1a2cc:	movt	r2, #2
   1a2d0:	vldr	d16, [r2]
   1a2d4:	ldr	r2, [r2, #8]
   1a2d8:	str	r2, [fp, #-40]	; 0xffffffd8
   1a2dc:	mov	r2, #16
   1a2e0:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1a2e4:	str	r2, [fp, #-188]	; 0xffffff44
   1a2e8:	sub	r2, fp, #192	; 0xc0
   1a2ec:	str	r0, [fp, #-192]	; 0xffffff40
   1a2f0:	add	r9, r2, #12
   1a2f4:	str	r9, [fp, #-184]	; 0xffffff48
   1a2f8:	beq	1a318 <__assert_fail@plt+0x8bb8>
   1a2fc:	mov	r0, #48	; 0x30
   1a300:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1a304:	cmp	r0, #0
   1a308:	str	r0, [fp, #-40]	; 0xffffffd8
   1a30c:	beq	1afc4 <__assert_fail@plt+0x9864>
   1a310:	ldr	r0, [fp, #-192]	; 0xffffff40
   1a314:	mov	r8, r4
   1a318:	ldr	r4, [r6, #72]	; 0x48
   1a31c:	cmp	r0, r7
   1a320:	bcs	1a3f8 <__assert_fail@plt+0x8c98>
   1a324:	sub	r0, fp, #192	; 0xc0
   1a328:	mov	r1, r7
   1a32c:	mov	r2, r9
   1a330:	mov	r3, #8
   1a334:	bl	2d3a8 <__assert_fail@plt+0x1bc48>
   1a338:	cmp	r0, #0
   1a33c:	bne	1a3fc <__assert_fail@plt+0x8c9c>
   1a340:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a344:	mov	r4, r9
   1a348:	cmp	r0, r9
   1a34c:	beq	1a354 <__assert_fail@plt+0x8bf4>
   1a350:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a354:	mov	r0, #16
   1a358:	mov	r9, #12
   1a35c:	cmp	r8, #0
   1a360:	str	r0, [fp, #-188]	; 0xffffff44
   1a364:	mov	r0, #0
   1a368:	str	r0, [fp, #-192]	; 0xffffff40
   1a36c:	str	r4, [fp, #-184]	; 0xffffff48
   1a370:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   1a374:	ldr	r1, [r8]
   1a378:	ldr	r0, [r8, #8]
   1a37c:	cmp	r1, #1
   1a380:	blt	1b064 <__assert_fail@plt+0x9904>
   1a384:	mov	r5, #0
   1a388:	mov	r6, #0
   1a38c:	add	r0, r0, r5
   1a390:	ldr	r0, [r0, #20]
   1a394:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a398:	ldr	r0, [r8, #8]
   1a39c:	add	r0, r0, r5
   1a3a0:	ldr	r0, [r0, #8]
   1a3a4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a3a8:	ldr	r1, [r8]
   1a3ac:	ldr	r0, [r8, #8]
   1a3b0:	add	r6, r6, #1
   1a3b4:	add	r5, r5, #24
   1a3b8:	cmp	r6, r1
   1a3bc:	blt	1a38c <__assert_fail@plt+0x8c2c>
   1a3c0:	b	1b064 <__assert_fail@plt+0x9904>
   1a3c4:	ldr	r1, [r3, #8]
   1a3c8:	cmp	r1, #0
   1a3cc:	beq	1a3dc <__assert_fail@plt+0x8c7c>
   1a3d0:	ldrsb	r1, [r7, #28]
   1a3d4:	cmp	r1, #0
   1a3d8:	blt	18cd8 <__assert_fail@plt+0x7578>
   1a3dc:	mov	r1, #0
   1a3e0:	cmp	r6, #0
   1a3e4:	beq	1afbc <__assert_fail@plt+0x985c>
   1a3e8:	cmp	ip, #0
   1a3ec:	mov	r6, #0
   1a3f0:	bne	1b220 <__assert_fail@plt+0x9ac0>
   1a3f4:	b	18cdc <__assert_fail@plt+0x757c>
   1a3f8:	str	r7, [fp, #-192]	; 0xffffff40
   1a3fc:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a400:	lsl	r2, r7, #3
   1a404:	mov	r1, r5
   1a408:	str	r2, [sp, #76]	; 0x4c
   1a40c:	str	r0, [sp, #80]	; 0x50
   1a410:	bl	11484 <memcpy@plt>
   1a414:	ldr	r3, [r5]
   1a418:	ldr	r0, [r5, #4]
   1a41c:	mov	sl, #0
   1a420:	cmp	r3, r0
   1a424:	ble	1a4b0 <__assert_fail@plt+0x8d50>
   1a428:	mov	r0, sl
   1a42c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a430:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a434:	cmp	r0, r9
   1a438:	beq	1a440 <__assert_fail@plt+0x8ce0>
   1a43c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a440:	mov	r0, #16
   1a444:	cmp	r8, #0
   1a448:	str	r0, [fp, #-188]	; 0xffffff44
   1a44c:	mov	r0, #0
   1a450:	str	r0, [fp, #-192]	; 0xffffff40
   1a454:	str	r9, [fp, #-184]	; 0xffffff48
   1a458:	beq	1b100 <__assert_fail@plt+0x99a0>
   1a45c:	ldr	r1, [r8]
   1a460:	ldr	r0, [r8, #8]
   1a464:	mov	r6, r5
   1a468:	cmp	r1, #1
   1a46c:	blt	1b0f8 <__assert_fail@plt+0x9998>
   1a470:	mov	r4, #0
   1a474:	mov	r5, #0
   1a478:	add	r0, r0, r4
   1a47c:	ldr	r0, [r0, #20]
   1a480:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a484:	ldr	r0, [r8, #8]
   1a488:	add	r0, r0, r4
   1a48c:	ldr	r0, [r0, #8]
   1a490:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a494:	ldr	r1, [r8]
   1a498:	ldr	r0, [r8, #8]
   1a49c:	add	r5, r5, #1
   1a4a0:	add	r4, r4, #24
   1a4a4:	cmp	r5, r1
   1a4a8:	blt	1a478 <__assert_fail@plt+0x8d18>
   1a4ac:	b	1b0f8 <__assert_fail@plt+0x9998>
   1a4b0:	lsl	r0, r7, #4
   1a4b4:	mov	lr, #1
   1a4b8:	mov	sl, #0
   1a4bc:	str	r6, [sp, #64]	; 0x40
   1a4c0:	str	r0, [sp, #56]	; 0x38
   1a4c4:	mov	r0, #0
   1a4c8:	str	r0, [sp, #72]	; 0x48
   1a4cc:	mov	r0, #0
   1a4d0:	str	r0, [sp, #92]	; 0x5c
   1a4d4:	ldr	r0, [r6]
   1a4d8:	add	r1, r0, r4, lsl #3
   1a4dc:	ldr	r1, [r1, #4]
   1a4e0:	uxtb	r2, r1
   1a4e4:	cmp	r2, #9
   1a4e8:	beq	1a518 <__assert_fail@plt+0x8db8>
   1a4ec:	cmp	r2, #8
   1a4f0:	bne	1a588 <__assert_fail@plt+0x8e28>
   1a4f4:	ldr	r0, [r0, r4, lsl #3]
   1a4f8:	add	r0, r0, #1
   1a4fc:	cmp	r0, r7
   1a500:	bge	1a588 <__assert_fail@plt+0x8e28>
   1a504:	mov	r1, r5
   1a508:	str	r3, [r1, r0, lsl #3]!
   1a50c:	mvn	r0, #0
   1a510:	str	r0, [r1, #4]
   1a514:	b	1a588 <__assert_fail@plt+0x8e28>
   1a518:	ldr	r0, [r0, r4, lsl #3]
   1a51c:	add	r0, r0, #1
   1a520:	cmp	r0, r7
   1a524:	bge	1a588 <__assert_fail@plt+0x8e28>
   1a528:	ldr	r2, [r5, r0, lsl #3]
   1a52c:	cmp	r2, r3
   1a530:	bge	1a548 <__assert_fail@plt+0x8de8>
   1a534:	add	r0, r5, r0, lsl #3
   1a538:	mov	r1, r5
   1a53c:	str	r3, [r0, #4]
   1a540:	ldr	r0, [sp, #80]	; 0x50
   1a544:	b	1a568 <__assert_fail@plt+0x8e08>
   1a548:	tst	r1, #524288	; 0x80000
   1a54c:	beq	1a580 <__assert_fail@plt+0x8e20>
   1a550:	ldr	r1, [sp, #80]	; 0x50
   1a554:	ldr	r1, [r1, r0, lsl #3]
   1a558:	cmn	r1, #1
   1a55c:	beq	1a580 <__assert_fail@plt+0x8e20>
   1a560:	ldr	r1, [sp, #80]	; 0x50
   1a564:	mov	r0, r5
   1a568:	ldr	r2, [sp, #76]	; 0x4c
   1a56c:	mov	r6, r3
   1a570:	bl	11484 <memcpy@plt>
   1a574:	mov	r3, r6
   1a578:	mov	lr, #1
   1a57c:	b	1a588 <__assert_fail@plt+0x8e28>
   1a580:	add	r0, r5, r0, lsl #3
   1a584:	str	r3, [r0, #4]
   1a588:	ldr	r0, [r5, #4]
   1a58c:	cmp	r3, r0
   1a590:	ldreq	r0, [sp, #200]	; 0xc8
   1a594:	cmpeq	r4, r0
   1a598:	beq	1a5f8 <__assert_fail@plt+0x8e98>
   1a59c:	cmp	r8, #0
   1a5a0:	beq	1a6d0 <__assert_fail@plt+0x8f70>
   1a5a4:	ldr	r0, [sp, #92]	; 0x5c
   1a5a8:	cmp	r0, #1
   1a5ac:	blt	1a6d0 <__assert_fail@plt+0x8f70>
   1a5b0:	mov	r6, r3
   1a5b4:	subs	r1, r0, #1
   1a5b8:	beq	1a5e4 <__assert_fail@plt+0x8e84>
   1a5bc:	mov	r0, #0
   1a5c0:	add	r2, r0, r1
   1a5c4:	lsr	r3, r2, #1
   1a5c8:	ldr	r7, [sl, r3, lsl #2]
   1a5cc:	cmp	r7, r4
   1a5d0:	movge	r1, r3
   1a5d4:	addlt	r0, lr, r2, lsr #1
   1a5d8:	cmp	r0, r1
   1a5dc:	bcc	1a5c0 <__assert_fail@plt+0x8e60>
   1a5e0:	b	1a5e8 <__assert_fail@plt+0x8e88>
   1a5e4:	mov	r0, #0
   1a5e8:	ldr	r0, [sl, r0, lsl #2]
   1a5ec:	ldr	r7, [sp, #68]	; 0x44
   1a5f0:	cmp	r0, r4
   1a5f4:	bne	1a6cc <__assert_fail@plt+0x8f6c>
   1a5f8:	cmp	r8, #0
   1a5fc:	beq	1b074 <__assert_fail@plt+0x9914>
   1a600:	mov	r0, #0
   1a604:	ldr	r1, [r5, r0, lsl #3]
   1a608:	cmp	r1, #0
   1a60c:	blt	1a620 <__assert_fail@plt+0x8ec0>
   1a610:	add	r1, r5, r0, lsl #3
   1a614:	ldr	r1, [r1, #4]
   1a618:	cmn	r1, #1
   1a61c:	beq	1a630 <__assert_fail@plt+0x8ed0>
   1a620:	add	r0, r0, #1
   1a624:	cmp	r0, r7
   1a628:	bcc	1a604 <__assert_fail@plt+0x8ea4>
   1a62c:	b	1b074 <__assert_fail@plt+0x9914>
   1a630:	ldr	r0, [r8]
   1a634:	cmp	r0, #0
   1a638:	beq	1b074 <__assert_fail@plt+0x9914>
   1a63c:	sub	r1, r0, #1
   1a640:	mov	r0, r5
   1a644:	str	r9, [sp, #60]	; 0x3c
   1a648:	ldr	r6, [sp, #76]	; 0x4c
   1a64c:	str	r1, [r8]
   1a650:	add	r5, r1, r1, lsl #1
   1a654:	ldr	r4, [r8, #8]
   1a658:	mov	r2, r6
   1a65c:	ldr	r9, [r4, r5, lsl #3]!
   1a660:	ldr	r1, [r4, #8]
   1a664:	bl	11484 <memcpy@plt>
   1a668:	ldr	r0, [r4, #8]
   1a66c:	mov	r2, r6
   1a670:	add	r1, r0, r7, lsl #3
   1a674:	ldr	r0, [sp, #80]	; 0x50
   1a678:	bl	11484 <memcpy@plt>
   1a67c:	mov	r0, sl
   1a680:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a684:	ldr	r0, [r8, #8]
   1a688:	add	r0, r0, r5, lsl #3
   1a68c:	ldr	r0, [r0, #8]
   1a690:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a694:	ldr	r0, [r8, #8]
   1a698:	add	r0, r0, r5, lsl #3
   1a69c:	ldr	r4, [r0, #4]
   1a6a0:	ldr	sl, [r0, #20]
   1a6a4:	cmn	r4, #1
   1a6a8:	ble	1b06c <__assert_fail@plt+0x990c>
   1a6ac:	ldr	r1, [r0, #12]
   1a6b0:	ldr	r0, [r0, #16]
   1a6b4:	mov	r3, r9
   1a6b8:	ldr	r9, [sp, #60]	; 0x3c
   1a6bc:	mov	lr, #1
   1a6c0:	str	r1, [sp, #72]	; 0x48
   1a6c4:	str	r0, [sp, #92]	; 0x5c
   1a6c8:	b	1a6d0 <__assert_fail@plt+0x8f70>
   1a6cc:	mov	r3, r6
   1a6d0:	ldr	r5, [sp, #188]	; 0xbc
   1a6d4:	str	r3, [sp, #84]	; 0x54
   1a6d8:	ldr	r0, [r5]
   1a6dc:	add	r1, r0, r4, lsl #3
   1a6e0:	ldr	r1, [r1, #4]
   1a6e4:	tst	r1, #8
   1a6e8:	bne	1a7a8 <__assert_fail@plt+0x9048>
   1a6ec:	tst	r1, #1048576	; 0x100000
   1a6f0:	str	sl, [sp, #88]	; 0x58
   1a6f4:	bne	1a82c <__assert_fail@plt+0x90cc>
   1a6f8:	uxtb	r1, r1
   1a6fc:	cmp	r1, #4
   1a700:	bne	1a850 <__assert_fail@plt+0x90f0>
   1a704:	ldr	r0, [r0, r4, lsl #3]
   1a708:	mov	r6, #0
   1a70c:	add	r0, r0, #1
   1a710:	cmp	r0, r7
   1a714:	ldrlt	r1, [fp, #20]
   1a718:	ldrlt	r2, [r1, r0, lsl #3]!
   1a71c:	ldrlt	r1, [r1, #4]
   1a720:	sublt	r6, r1, r2
   1a724:	cmp	r8, #0
   1a728:	beq	1ab00 <__assert_fail@plt+0x93a0>
   1a72c:	cmp	r0, r7
   1a730:	bge	1a954 <__assert_fail@plt+0x91f4>
   1a734:	ldr	r2, [fp, #20]
   1a738:	ldr	r1, [r2, r0, lsl #3]
   1a73c:	cmn	r1, #1
   1a740:	beq	1a954 <__assert_fail@plt+0x91f4>
   1a744:	add	r0, r2, r0, lsl #3
   1a748:	ldr	r0, [r0, #4]
   1a74c:	cmn	r0, #1
   1a750:	beq	1a954 <__assert_fail@plt+0x91f4>
   1a754:	cmp	r6, #0
   1a758:	beq	1ab30 <__assert_fail@plt+0x93d0>
   1a75c:	ldr	r0, [sp, #132]	; 0x84
   1a760:	sub	r0, r0, r3
   1a764:	cmp	r0, r6
   1a768:	blt	1a954 <__assert_fail@plt+0x91f4>
   1a76c:	ldr	r2, [sp, #108]	; 0x6c
   1a770:	str	r9, [sp, #60]	; 0x3c
   1a774:	mov	r9, r3
   1a778:	add	r0, r2, r1
   1a77c:	add	r1, r2, r3
   1a780:	mov	r2, r6
   1a784:	bl	114d8 <memcmp@plt>
   1a788:	cmp	r0, #0
   1a78c:	beq	1adc0 <__assert_fail@plt+0x9660>
   1a790:	ldr	sl, [sp, #60]	; 0x3c
   1a794:	ldr	r0, [r8]
   1a798:	mov	r5, #0
   1a79c:	cmp	r0, #0
   1a7a0:	bne	1a968 <__assert_fail@plt+0x9208>
   1a7a4:	b	1afcc <__assert_fail@plt+0x986c>
   1a7a8:	ldr	r0, [sp, #204]	; 0xcc
   1a7ac:	ldr	r5, [r5, #20]
   1a7b0:	ldr	r6, [r0, r3, lsl #2]
   1a7b4:	ldr	r3, [sp, #92]	; 0x5c
   1a7b8:	cmp	r3, #1
   1a7bc:	blt	1a808 <__assert_fail@plt+0x90a8>
   1a7c0:	mov	r0, #0
   1a7c4:	subs	r1, r3, #1
   1a7c8:	beq	1a7ec <__assert_fail@plt+0x908c>
   1a7cc:	add	r2, r0, r1
   1a7d0:	lsr	r3, r2, #1
   1a7d4:	ldr	r7, [sl, r3, lsl #2]
   1a7d8:	cmp	r7, r4
   1a7dc:	movge	r1, r3
   1a7e0:	addlt	r0, lr, r2, lsr #1
   1a7e4:	cmp	r0, r1
   1a7e8:	bcc	1a7cc <__assert_fail@plt+0x906c>
   1a7ec:	ldr	r0, [sl, r0, lsl #2]
   1a7f0:	ldr	r7, [sp, #68]	; 0x44
   1a7f4:	ldr	r3, [sp, #92]	; 0x5c
   1a7f8:	cmp	r0, r4
   1a7fc:	bne	1a808 <__assert_fail@plt+0x90a8>
   1a800:	str	sl, [sp, #88]	; 0x58
   1a804:	b	1a930 <__assert_fail@plt+0x91d0>
   1a808:	ldr	r0, [sp, #72]	; 0x48
   1a80c:	cmp	r0, #0
   1a810:	beq	1a90c <__assert_fail@plt+0x91ac>
   1a814:	cmp	r3, #0
   1a818:	str	sl, [sp, #88]	; 0x58
   1a81c:	bne	1ade8 <__assert_fail@plt+0x9688>
   1a820:	str	r4, [sl]
   1a824:	mov	r3, #1
   1a828:	b	1a930 <__assert_fail@plt+0x91d0>
   1a82c:	mov	r0, r5
   1a830:	mov	r1, r4
   1a834:	add	r2, sp, #104	; 0x68
   1a838:	bl	25c70 <__assert_fail@plt+0x14510>
   1a83c:	mov	lr, #1
   1a840:	mov	r1, r0
   1a844:	ldr	r3, [sp, #84]	; 0x54
   1a848:	cmp	r1, #0
   1a84c:	bne	1a878 <__assert_fail@plt+0x9118>
   1a850:	ldr	r0, [r5]
   1a854:	mov	r2, r3
   1a858:	add	r1, r0, r4, lsl #3
   1a85c:	add	r0, sp, #104	; 0x68
   1a860:	bl	25f88 <__assert_fail@plt+0x14828>
   1a864:	ldr	r3, [sp, #84]	; 0x54
   1a868:	mov	lr, #1
   1a86c:	mov	r1, #1
   1a870:	cmp	r0, #0
   1a874:	beq	1a94c <__assert_fail@plt+0x91ec>
   1a878:	ldr	r0, [r5, #12]
   1a87c:	add	r3, r1, r3
   1a880:	cmp	r8, #0
   1a884:	ldr	r6, [r0, r4, lsl #2]
   1a888:	beq	1ab14 <__assert_fail@plt+0x93b4>
   1a88c:	ldr	r0, [sp, #196]	; 0xc4
   1a890:	cmp	r3, r0
   1a894:	bgt	1a954 <__assert_fail@plt+0x91f4>
   1a898:	ldr	r0, [sp, #204]	; 0xcc
   1a89c:	ldr	r0, [r0, r3, lsl #2]
   1a8a0:	cmp	r0, #0
   1a8a4:	beq	1a954 <__assert_fail@plt+0x91f4>
   1a8a8:	ldr	r1, [r0, #8]
   1a8ac:	cmp	r1, #1
   1a8b0:	blt	1a954 <__assert_fail@plt+0x91f4>
   1a8b4:	ldr	r0, [r0, #12]
   1a8b8:	mov	r2, #0
   1a8bc:	mov	r4, r3
   1a8c0:	subs	r1, r1, #1
   1a8c4:	str	r2, [sp, #92]	; 0x5c
   1a8c8:	mov	r2, #0
   1a8cc:	beq	1a8f4 <__assert_fail@plt+0x9194>
   1a8d0:	mov	r2, #0
   1a8d4:	add	r3, r2, r1
   1a8d8:	lsr	r7, r3, #1
   1a8dc:	ldr	r5, [r0, r7, lsl #2]
   1a8e0:	cmp	r5, r6
   1a8e4:	movge	r1, r7
   1a8e8:	addlt	r2, lr, r3, lsr #1
   1a8ec:	cmp	r2, r1
   1a8f0:	bcc	1a8d4 <__assert_fail@plt+0x9174>
   1a8f4:	ldr	r0, [r0, r2, lsl #2]
   1a8f8:	ldr	r7, [sp, #68]	; 0x44
   1a8fc:	mov	r3, r4
   1a900:	cmp	r0, r6
   1a904:	bne	1a94c <__assert_fail@plt+0x91ec>
   1a908:	b	1ad98 <__assert_fail@plt+0x9638>
   1a90c:	mov	r0, #4
   1a910:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1a914:	cmp	r0, #0
   1a918:	beq	1b2bc <__assert_fail@plt+0x9b5c>
   1a91c:	str	r0, [sp, #88]	; 0x58
   1a920:	str	r4, [r0]
   1a924:	mov	r0, #1
   1a928:	mov	r3, #1
   1a92c:	str	r0, [sp, #72]	; 0x48
   1a930:	add	r0, r4, r4, lsl #1
   1a934:	add	r1, r5, r0, lsl #2
   1a938:	ldr	sl, [r1, #4]
   1a93c:	cmp	sl, #1
   1a940:	ldrge	r2, [r6, #8]
   1a944:	subsge	r2, r2, #1
   1a948:	bge	1aa14 <__assert_fail@plt+0x92b4>
   1a94c:	cmp	r8, #0
   1a950:	beq	1afdc <__assert_fail@plt+0x987c>
   1a954:	mov	sl, r9
   1a958:	ldr	r0, [r8]
   1a95c:	mov	r5, #0
   1a960:	cmp	r0, #0
   1a964:	beq	1afcc <__assert_fail@plt+0x986c>
   1a968:	sub	r0, r0, #1
   1a96c:	ldr	r9, [sp, #76]	; 0x4c
   1a970:	str	r0, [r8]
   1a974:	add	r6, r0, r0, lsl #1
   1a978:	ldr	r4, [r8, #8]
   1a97c:	mov	r2, r9
   1a980:	ldr	r0, [r4, r6, lsl #3]!
   1a984:	str	r0, [sp, #84]	; 0x54
   1a988:	ldr	r1, [r4, #8]
   1a98c:	ldr	r0, [fp, #20]
   1a990:	bl	11484 <memcpy@plt>
   1a994:	ldr	r0, [r4, #8]
   1a998:	mov	r2, r9
   1a99c:	add	r1, r0, r7, lsl #3
   1a9a0:	ldr	r0, [sp, #80]	; 0x50
   1a9a4:	bl	11484 <memcpy@plt>
   1a9a8:	ldr	r0, [sp, #88]	; 0x58
   1a9ac:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a9b0:	ldr	r0, [r8, #8]
   1a9b4:	add	r0, r0, r6, lsl #3
   1a9b8:	ldr	r0, [r0, #8]
   1a9bc:	bl	14538 <__assert_fail@plt+0x2dd8>
   1a9c0:	ldr	r0, [r8, #8]
   1a9c4:	add	r0, r0, r6, lsl #3
   1a9c8:	ldr	r4, [r0, #4]
   1a9cc:	ldr	r1, [r0, #20]
   1a9d0:	cmn	r4, #1
   1a9d4:	str	r1, [sp, #88]	; 0x58
   1a9d8:	ble	1afcc <__assert_fail@plt+0x986c>
   1a9dc:	ldr	r1, [r0, #12]
   1a9e0:	ldr	r0, [r0, #16]
   1a9e4:	mov	r9, sl
   1a9e8:	ldr	r5, [fp, #20]
   1a9ec:	ldr	sl, [sp, #88]	; 0x58
   1a9f0:	ldr	r3, [sp, #84]	; 0x54
   1a9f4:	mov	lr, #1
   1a9f8:	str	r1, [sp, #72]	; 0x48
   1a9fc:	str	r0, [sp, #92]	; 0x5c
   1aa00:	ldr	r0, [r5, #4]
   1aa04:	ldr	r6, [sp, #64]	; 0x40
   1aa08:	cmp	r3, r0
   1aa0c:	ble	1a4d4 <__assert_fail@plt+0x8d74>
   1aa10:	b	1a428 <__assert_fail@plt+0x8cc8>
   1aa14:	str	r3, [sp, #92]	; 0x5c
   1aa18:	ldr	r0, [r1, #8]
   1aa1c:	ldr	r3, [r6, #12]
   1aa20:	cmp	r2, #0
   1aa24:	str	r0, [sp, #100]	; 0x64
   1aa28:	beq	1aab8 <__assert_fail@plt+0x9358>
   1aa2c:	mov	r7, #0
   1aa30:	mvn	r5, #0
   1aa34:	str	r9, [sp, #60]	; 0x3c
   1aa38:	ldr	r0, [sp, #100]	; 0x64
   1aa3c:	mov	lr, r2
   1aa40:	mov	r6, #0
   1aa44:	mov	r9, #1
   1aa48:	ldr	r4, [r0, r7, lsl #2]
   1aa4c:	add	r1, r6, r2
   1aa50:	lsr	r0, r1, #1
   1aa54:	ldr	ip, [r3, r0, lsl #2]
   1aa58:	cmp	ip, r4
   1aa5c:	movge	r2, r0
   1aa60:	addlt	r6, r9, r1, lsr #1
   1aa64:	cmp	r6, r2
   1aa68:	bcc	1aa4c <__assert_fail@plt+0x92ec>
   1aa6c:	ldr	r0, [r3, r6, lsl #2]
   1aa70:	cmp	r0, r4
   1aa74:	bne	1aa88 <__assert_fail@plt+0x9328>
   1aa78:	cmn	r5, #1
   1aa7c:	mov	r6, r5
   1aa80:	mov	r5, r4
   1aa84:	bne	1ab60 <__assert_fail@plt+0x9400>
   1aa88:	add	r7, r7, #1
   1aa8c:	mov	r2, lr
   1aa90:	cmp	r7, sl
   1aa94:	blt	1aa38 <__assert_fail@plt+0x92d8>
   1aa98:	ldr	r7, [sp, #68]	; 0x44
   1aa9c:	ldr	r9, [sp, #60]	; 0x3c
   1aaa0:	ldr	r3, [sp, #84]	; 0x54
   1aaa4:	mov	r6, r5
   1aaa8:	mov	lr, #1
   1aaac:	cmn	r6, #1
   1aab0:	bgt	1ada0 <__assert_fail@plt+0x9640>
   1aab4:	b	1ab24 <__assert_fail@plt+0x93c4>
   1aab8:	ldr	r4, [r3]
   1aabc:	mov	r2, #0
   1aac0:	mvn	r6, #0
   1aac4:	ldr	r0, [sp, #100]	; 0x64
   1aac8:	ldr	r3, [r0, r2, lsl #2]
   1aacc:	cmp	r4, r3
   1aad0:	bne	1aae4 <__assert_fail@plt+0x9384>
   1aad4:	cmn	r6, #1
   1aad8:	mov	r3, r4
   1aadc:	beq	1aae8 <__assert_fail@plt+0x9388>
   1aae0:	b	1ab5c <__assert_fail@plt+0x93fc>
   1aae4:	mov	r3, r6
   1aae8:	add	r2, r2, #1
   1aaec:	mov	r6, r3
   1aaf0:	cmp	r2, sl
   1aaf4:	blt	1aac4 <__assert_fail@plt+0x9364>
   1aaf8:	mov	r6, r3
   1aafc:	b	1ad90 <__assert_fail@plt+0x9630>
   1ab00:	cmp	r6, #0
   1ab04:	beq	1ab30 <__assert_fail@plt+0x93d0>
   1ab08:	ldr	r0, [r5, #12]
   1ab0c:	add	r3, r6, r3
   1ab10:	ldr	r6, [r0, r4, lsl #2]
   1ab14:	mov	r0, #0
   1ab18:	str	r0, [sp, #92]	; 0x5c
   1ab1c:	cmn	r6, #1
   1ab20:	bgt	1ada0 <__assert_fail@plt+0x9640>
   1ab24:	cmn	r6, #2
   1ab28:	bne	1a94c <__assert_fail@plt+0x91ec>
   1ab2c:	b	1b2c4 <__assert_fail@plt+0x9b64>
   1ab30:	ldr	r0, [sp, #72]	; 0x48
   1ab34:	str	r6, [sp, #100]	; 0x64
   1ab38:	cmp	r0, #0
   1ab3c:	beq	1accc <__assert_fail@plt+0x956c>
   1ab40:	ldr	r1, [sp, #92]	; 0x5c
   1ab44:	cmp	r1, #0
   1ab48:	bne	1aed4 <__assert_fail@plt+0x9774>
   1ab4c:	mov	r0, #1
   1ab50:	str	r4, [sl]
   1ab54:	str	r0, [sp, #92]	; 0x5c
   1ab58:	b	1acfc <__assert_fail@plt+0x959c>
   1ab5c:	str	r9, [sp, #60]	; 0x3c
   1ab60:	ldr	r0, [sp, #92]	; 0x5c
   1ab64:	ldr	r5, [sp, #88]	; 0x58
   1ab68:	ldr	r9, [sp, #60]	; 0x3c
   1ab6c:	mov	lr, #1
   1ab70:	cmp	r0, #1
   1ab74:	blt	1abd4 <__assert_fail@plt+0x9474>
   1ab78:	ldr	r0, [sp, #92]	; 0x5c
   1ab7c:	subs	r1, r0, #1
   1ab80:	beq	1abac <__assert_fail@plt+0x944c>
   1ab84:	mov	r0, #0
   1ab88:	add	r2, r0, r1
   1ab8c:	lsr	r3, r2, #1
   1ab90:	ldr	r7, [r5, r3, lsl #2]
   1ab94:	cmp	r7, r6
   1ab98:	movge	r1, r3
   1ab9c:	addlt	r0, lr, r2, lsr #1
   1aba0:	cmp	r0, r1
   1aba4:	bcc	1ab88 <__assert_fail@plt+0x9428>
   1aba8:	b	1abb0 <__assert_fail@plt+0x9450>
   1abac:	mov	r0, #0
   1abb0:	ldr	r0, [r5, r0, lsl #2]
   1abb4:	cmp	r0, r6
   1abb8:	bne	1abd4 <__assert_fail@plt+0x9474>
   1abbc:	ldr	r7, [sp, #68]	; 0x44
   1abc0:	ldr	r3, [sp, #84]	; 0x54
   1abc4:	mov	r6, r4
   1abc8:	cmn	r6, #1
   1abcc:	bgt	1ada0 <__assert_fail@plt+0x9640>
   1abd0:	b	1ab24 <__assert_fail@plt+0x93c4>
   1abd4:	ldr	r7, [sp, #68]	; 0x44
   1abd8:	ldr	r3, [sp, #84]	; 0x54
   1abdc:	cmp	r8, #0
   1abe0:	beq	1ad98 <__assert_fail@plt+0x9638>
   1abe4:	ldr	r5, [r8]
   1abe8:	ldr	r0, [r8, #4]
   1abec:	add	r1, r5, #1
   1abf0:	cmp	r1, r0
   1abf4:	str	r1, [r8]
   1abf8:	bne	1ac2c <__assert_fail@plt+0x94cc>
   1abfc:	ldr	r0, [r8, #8]
   1ac00:	add	r1, r1, r1, lsl #1
   1ac04:	lsl	r1, r1, #4
   1ac08:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1ac0c:	cmp	r0, #0
   1ac10:	beq	1b2c4 <__assert_fail@plt+0x9b64>
   1ac14:	str	r0, [r8, #8]
   1ac18:	ldr	r3, [sp, #84]	; 0x54
   1ac1c:	ldr	r1, [r8, #4]
   1ac20:	lsl	r1, r1, #1
   1ac24:	str	r1, [r8, #4]
   1ac28:	b	1ac30 <__assert_fail@plt+0x94d0>
   1ac2c:	ldr	r0, [r8, #8]
   1ac30:	add	r5, r5, r5, lsl #1
   1ac34:	str	r3, [r0, r5, lsl #3]!
   1ac38:	str	r4, [r0, #4]
   1ac3c:	ldr	r0, [sp, #56]	; 0x38
   1ac40:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1ac44:	ldr	r1, [r8, #8]
   1ac48:	cmp	r0, #0
   1ac4c:	add	r4, r1, r5, lsl #3
   1ac50:	str	r0, [r4, #8]!
   1ac54:	beq	1b2c4 <__assert_fail@plt+0x9b64>
   1ac58:	ldr	sl, [sp, #76]	; 0x4c
   1ac5c:	ldr	r1, [fp, #20]
   1ac60:	mov	r2, sl
   1ac64:	bl	11484 <memcpy@plt>
   1ac68:	ldr	r0, [r4]
   1ac6c:	ldr	r1, [sp, #80]	; 0x50
   1ac70:	mov	r2, sl
   1ac74:	add	r0, r0, r7, lsl #3
   1ac78:	bl	11484 <memcpy@plt>
   1ac7c:	ldr	r0, [r8, #8]
   1ac80:	add	r5, r0, r5, lsl #3
   1ac84:	ldr	r0, [sp, #92]	; 0x5c
   1ac88:	mov	r7, r5
   1ac8c:	str	r0, [r7, #16]!
   1ac90:	cmp	r0, #1
   1ac94:	sub	sl, r7, #4
   1ac98:	blt	1ad7c <__assert_fail@plt+0x961c>
   1ac9c:	lsl	r4, r0, #2
   1aca0:	str	r0, [sl]
   1aca4:	mov	r0, r4
   1aca8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1acac:	cmp	r0, #0
   1acb0:	str	r0, [r5, #20]
   1acb4:	beq	1b34c <__assert_fail@plt+0x9bec>
   1acb8:	ldr	r1, [sp, #88]	; 0x58
   1acbc:	mov	r2, r4
   1acc0:	bl	11484 <memcpy@plt>
   1acc4:	ldr	r7, [sp, #68]	; 0x44
   1acc8:	b	1ad90 <__assert_fail@plt+0x9630>
   1accc:	mov	r0, #4
   1acd0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1acd4:	cmp	r0, #0
   1acd8:	beq	1b2bc <__assert_fail@plt+0x9b5c>
   1acdc:	mov	sl, r0
   1ace0:	str	r4, [r0]
   1ace4:	mov	r0, #1
   1ace8:	str	r0, [sp, #92]	; 0x5c
   1acec:	mov	r0, #1
   1acf0:	str	r0, [sp, #72]	; 0x48
   1acf4:	ldr	r3, [sp, #84]	; 0x54
   1acf8:	mov	lr, #1
   1acfc:	ldr	r0, [sp, #204]	; 0xcc
   1ad00:	str	sl, [sp, #88]	; 0x58
   1ad04:	ldr	r0, [r0, r3, lsl #2]
   1ad08:	ldr	r1, [r0, #8]
   1ad0c:	cmp	r1, #1
   1ad10:	blt	1a850 <__assert_fail@plt+0x90f0>
   1ad14:	ldr	r2, [r5, #20]
   1ad18:	add	r3, r4, r4, lsl #1
   1ad1c:	ldr	ip, [r0, #12]
   1ad20:	add	r2, r2, r3, lsl #2
   1ad24:	ldr	r2, [r2, #8]
   1ad28:	ldr	r6, [r2]
   1ad2c:	subs	r2, r1, #1
   1ad30:	mov	r1, #0
   1ad34:	beq	1ad58 <__assert_fail@plt+0x95f8>
   1ad38:	add	r3, r1, r2
   1ad3c:	lsr	r7, r3, #1
   1ad40:	ldr	r0, [ip, r7, lsl #2]
   1ad44:	cmp	r0, r6
   1ad48:	movge	r2, r7
   1ad4c:	addlt	r1, lr, r3, lsr #1
   1ad50:	cmp	r1, r2
   1ad54:	bcc	1ad38 <__assert_fail@plt+0x95d8>
   1ad58:	ldr	r0, [ip, r1, lsl #2]
   1ad5c:	ldr	r7, [sp, #68]	; 0x44
   1ad60:	ldr	r1, [sp, #100]	; 0x64
   1ad64:	cmp	r0, r6
   1ad68:	bne	1a844 <__assert_fail@plt+0x90e4>
   1ad6c:	ldr	r3, [sp, #84]	; 0x54
   1ad70:	cmn	r6, #1
   1ad74:	bgt	1ada0 <__assert_fail@plt+0x9640>
   1ad78:	b	1ab24 <__assert_fail@plt+0x93c4>
   1ad7c:	ldr	r7, [sp, #68]	; 0x44
   1ad80:	mov	r0, #0
   1ad84:	str	r0, [sl]
   1ad88:	str	r0, [sl, #4]
   1ad8c:	str	r0, [sl, #8]
   1ad90:	ldr	r3, [sp, #84]	; 0x54
   1ad94:	mov	lr, #1
   1ad98:	cmn	r6, #1
   1ad9c:	ble	1ab24 <__assert_fail@plt+0x93c4>
   1ada0:	ldr	r5, [fp, #20]
   1ada4:	ldr	sl, [sp, #88]	; 0x58
   1ada8:	mov	r4, r6
   1adac:	ldr	r0, [r5, #4]
   1adb0:	ldr	r6, [sp, #64]	; 0x40
   1adb4:	cmp	r3, r0
   1adb8:	ble	1a4d4 <__assert_fail@plt+0x8d74>
   1adbc:	b	1a428 <__assert_fail@plt+0x8cc8>
   1adc0:	ldr	r0, [r5, #12]
   1adc4:	add	r9, r6, r9
   1adc8:	mov	lr, #1
   1adcc:	mov	r3, r9
   1add0:	ldr	r9, [sp, #60]	; 0x3c
   1add4:	ldr	r6, [r0, r4, lsl #2]
   1add8:	ldr	r0, [sp, #196]	; 0xc4
   1addc:	cmp	r3, r0
   1ade0:	ble	1a898 <__assert_fail@plt+0x9138>
   1ade4:	b	1a954 <__assert_fail@plt+0x91f4>
   1ade8:	ldr	r0, [sp, #72]	; 0x48
   1adec:	str	r6, [sp, #100]	; 0x64
   1adf0:	mov	r6, r9
   1adf4:	cmp	r0, r3
   1adf8:	bne	1ae28 <__assert_fail@plt+0x96c8>
   1adfc:	ldr	r0, [sp, #92]	; 0x5c
   1ae00:	lsl	r1, r0, #3
   1ae04:	ldr	r0, [sp, #88]	; 0x58
   1ae08:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1ae0c:	cmp	r0, #0
   1ae10:	mov	r9, r6
   1ae14:	beq	1b2c4 <__assert_fail@plt+0x9b64>
   1ae18:	ldr	r1, [sp, #92]	; 0x5c
   1ae1c:	str	r0, [sp, #88]	; 0x58
   1ae20:	lsl	r1, r1, #1
   1ae24:	str	r1, [sp, #72]	; 0x48
   1ae28:	ldr	r0, [sp, #88]	; 0x58
   1ae2c:	ldr	r0, [r0]
   1ae30:	cmp	r0, r4
   1ae34:	ble	1ae78 <__assert_fail@plt+0x9718>
   1ae38:	ldr	r2, [sp, #92]	; 0x5c
   1ae3c:	cmp	r2, #1
   1ae40:	blt	1aeb4 <__assert_fail@plt+0x9754>
   1ae44:	ldr	r0, [sp, #88]	; 0x58
   1ae48:	ldr	r2, [sp, #92]	; 0x5c
   1ae4c:	add	r1, r0, r2, lsl #2
   1ae50:	add	r0, r2, #1
   1ae54:	mov	r2, r1
   1ae58:	ldr	r3, [r2, #-4]!
   1ae5c:	sub	r0, r0, #1
   1ae60:	cmp	r0, #1
   1ae64:	str	r3, [r1]
   1ae68:	mov	r1, r2
   1ae6c:	bgt	1ae58 <__assert_fail@plt+0x96f8>
   1ae70:	sub	r2, r0, #1
   1ae74:	b	1aeb4 <__assert_fail@plt+0x9754>
   1ae78:	ldr	r0, [sp, #88]	; 0x58
   1ae7c:	ldr	r2, [sp, #92]	; 0x5c
   1ae80:	add	r0, r0, r2, lsl #2
   1ae84:	ldr	r1, [r0, #-4]
   1ae88:	cmp	r1, r4
   1ae8c:	ble	1aeb4 <__assert_fail@plt+0x9754>
   1ae90:	ldr	r2, [sp, #92]	; 0x5c
   1ae94:	sub	r2, r2, #2
   1ae98:	str	r1, [r0]
   1ae9c:	sub	r2, r2, #1
   1aea0:	ldr	r1, [r0, #-8]
   1aea4:	sub	r0, r0, #4
   1aea8:	cmp	r1, r4
   1aeac:	bgt	1ae98 <__assert_fail@plt+0x9738>
   1aeb0:	add	r2, r2, #2
   1aeb4:	ldr	r3, [sp, #92]	; 0x5c
   1aeb8:	ldr	r0, [sp, #88]	; 0x58
   1aebc:	mov	r9, r6
   1aec0:	ldr	r7, [sp, #68]	; 0x44
   1aec4:	ldr	r6, [sp, #100]	; 0x64
   1aec8:	add	r3, r3, #1
   1aecc:	str	r4, [r0, r2, lsl #2]
   1aed0:	b	1a930 <__assert_fail@plt+0x91d0>
   1aed4:	ldr	r0, [sp, #72]	; 0x48
   1aed8:	mov	r6, r9
   1aedc:	cmp	r0, r1
   1aee0:	bne	1af10 <__assert_fail@plt+0x97b0>
   1aee4:	ldr	r0, [sp, #92]	; 0x5c
   1aee8:	lsl	r1, r0, #3
   1aeec:	ldr	r0, [sp, #88]	; 0x58
   1aef0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1aef4:	cmp	r0, #0
   1aef8:	mov	r9, r6
   1aefc:	beq	1b2c4 <__assert_fail@plt+0x9b64>
   1af00:	ldr	r1, [sp, #92]	; 0x5c
   1af04:	str	r0, [sp, #88]	; 0x58
   1af08:	lsl	r1, r1, #1
   1af0c:	str	r1, [sp, #72]	; 0x48
   1af10:	ldr	r0, [sp, #88]	; 0x58
   1af14:	ldr	r0, [r0]
   1af18:	cmp	r0, r4
   1af1c:	ble	1af60 <__assert_fail@plt+0x9800>
   1af20:	ldr	r2, [sp, #92]	; 0x5c
   1af24:	cmp	r2, #1
   1af28:	blt	1af9c <__assert_fail@plt+0x983c>
   1af2c:	ldr	r0, [sp, #88]	; 0x58
   1af30:	ldr	r2, [sp, #92]	; 0x5c
   1af34:	add	r1, r0, r2, lsl #2
   1af38:	add	r0, r2, #1
   1af3c:	mov	r2, r1
   1af40:	ldr	r3, [r2, #-4]!
   1af44:	sub	r0, r0, #1
   1af48:	cmp	r0, #1
   1af4c:	str	r3, [r1]
   1af50:	mov	r1, r2
   1af54:	bgt	1af40 <__assert_fail@plt+0x97e0>
   1af58:	sub	r2, r0, #1
   1af5c:	b	1af9c <__assert_fail@plt+0x983c>
   1af60:	ldr	r0, [sp, #88]	; 0x58
   1af64:	ldr	r2, [sp, #92]	; 0x5c
   1af68:	add	r0, r0, r2, lsl #2
   1af6c:	ldr	r1, [r0, #-4]
   1af70:	cmp	r1, r4
   1af74:	ble	1af9c <__assert_fail@plt+0x983c>
   1af78:	ldr	r2, [sp, #92]	; 0x5c
   1af7c:	sub	r2, r2, #2
   1af80:	str	r1, [r0]
   1af84:	sub	r2, r2, #1
   1af88:	ldr	r1, [r0, #-8]
   1af8c:	sub	r0, r0, #4
   1af90:	cmp	r1, r4
   1af94:	bgt	1af80 <__assert_fail@plt+0x9820>
   1af98:	add	r2, r2, #2
   1af9c:	ldr	r1, [sp, #92]	; 0x5c
   1afa0:	ldr	sl, [sp, #88]	; 0x58
   1afa4:	ldr	r7, [sp, #68]	; 0x44
   1afa8:	mov	r9, r6
   1afac:	add	r1, r1, #1
   1afb0:	str	r4, [sl, r2, lsl #2]
   1afb4:	str	r1, [sp, #92]	; 0x5c
   1afb8:	b	1acf4 <__assert_fail@plt+0x9594>
   1afbc:	mov	r6, #0
   1afc0:	b	18cdc <__assert_fail@plt+0x757c>
   1afc4:	mov	r9, #12
   1afc8:	b	1b1cc <__assert_fail@plt+0x9a6c>
   1afcc:	mov	r9, sl
   1afd0:	b	1afe0 <__assert_fail@plt+0x9880>
   1afd4:	mov	r9, r0
   1afd8:	b	1b1cc <__assert_fail@plt+0x9a6c>
   1afdc:	mov	r5, #1
   1afe0:	ldr	r0, [sp, #88]	; 0x58
   1afe4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1afe8:	ldr	r0, [fp, #-184]	; 0xffffff48
   1afec:	cmp	r0, r9
   1aff0:	beq	1aff8 <__assert_fail@plt+0x9898>
   1aff4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1aff8:	mov	r0, #16
   1affc:	cmp	r5, #0
   1b000:	str	r0, [fp, #-188]	; 0xffffff44
   1b004:	mov	r0, #0
   1b008:	str	r0, [fp, #-192]	; 0xffffff40
   1b00c:	str	r9, [fp, #-184]	; 0xffffff48
   1b010:	mov	r9, #1
   1b014:	bne	1b1cc <__assert_fail@plt+0x9a6c>
   1b018:	ldr	r1, [r8]
   1b01c:	ldr	r0, [r8, #8]
   1b020:	cmp	r1, #1
   1b024:	blt	1b064 <__assert_fail@plt+0x9904>
   1b028:	mov	r5, #0
   1b02c:	mov	r6, #0
   1b030:	add	r0, r0, r5
   1b034:	ldr	r0, [r0, #20]
   1b038:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b03c:	ldr	r0, [r8, #8]
   1b040:	add	r0, r0, r5
   1b044:	ldr	r0, [r0, #8]
   1b048:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b04c:	ldr	r1, [r8]
   1b050:	ldr	r0, [r8, #8]
   1b054:	add	r6, r6, #1
   1b058:	add	r5, r5, #24
   1b05c:	cmp	r6, r1
   1b060:	blt	1b030 <__assert_fail@plt+0x98d0>
   1b064:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b068:	b	1b1cc <__assert_fail@plt+0x9a6c>
   1b06c:	ldr	r5, [fp, #20]
   1b070:	ldr	r9, [sp, #60]	; 0x3c
   1b074:	mov	r0, sl
   1b078:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b07c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b080:	cmp	r0, r9
   1b084:	beq	1b08c <__assert_fail@plt+0x992c>
   1b088:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b08c:	mov	r0, #16
   1b090:	cmp	r8, #0
   1b094:	str	r0, [fp, #-188]	; 0xffffff44
   1b098:	mov	r0, #0
   1b09c:	str	r0, [fp, #-192]	; 0xffffff40
   1b0a0:	str	r9, [fp, #-184]	; 0xffffff48
   1b0a4:	beq	1b100 <__assert_fail@plt+0x99a0>
   1b0a8:	ldr	r1, [r8]
   1b0ac:	ldr	r0, [r8, #8]
   1b0b0:	mov	r6, r5
   1b0b4:	cmp	r1, #1
   1b0b8:	blt	1b0f8 <__assert_fail@plt+0x9998>
   1b0bc:	mov	r4, #0
   1b0c0:	mov	r5, #0
   1b0c4:	add	r0, r0, r4
   1b0c8:	ldr	r0, [r0, #20]
   1b0cc:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b0d0:	ldr	r0, [r8, #8]
   1b0d4:	add	r0, r0, r4
   1b0d8:	ldr	r0, [r0, #8]
   1b0dc:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b0e0:	ldr	r1, [r8]
   1b0e4:	ldr	r0, [r8, #8]
   1b0e8:	add	r5, r5, #1
   1b0ec:	add	r4, r4, #24
   1b0f0:	cmp	r5, r1
   1b0f4:	blt	1b0c4 <__assert_fail@plt+0x9964>
   1b0f8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b0fc:	mov	r5, r6
   1b100:	ldrb	r0, [sp, #180]	; 0xb4
   1b104:	cmp	r0, #0
   1b108:	bne	1b244 <__assert_fail@plt+0x9ae4>
   1b10c:	ldr	r1, [fp, #-200]	; 0xffffff38
   1b110:	ldr	r4, [sp, #28]
   1b114:	add	r0, r5, #4
   1b118:	mov	r2, r7
   1b11c:	ldr	r3, [r0, #-4]
   1b120:	cmn	r3, #1
   1b124:	addne	r3, r3, r1
   1b128:	strne	r3, [r0, #-4]
   1b12c:	ldrne	r3, [r0]
   1b130:	addne	r3, r3, r1
   1b134:	strne	r3, [r0]
   1b138:	add	r0, r0, #8
   1b13c:	subs	r2, r2, #1
   1b140:	bne	1b11c <__assert_fail@plt+0x99bc>
   1b144:	cmp	r4, #1
   1b148:	blt	1b15c <__assert_fail@plt+0x99fc>
   1b14c:	add	r0, r5, r7, lsl #3
   1b150:	lsl	r2, r4, #3
   1b154:	mov	r1, #255	; 0xff
   1b158:	bl	11670 <memset@plt>
   1b15c:	ldr	r0, [sp, #96]	; 0x60
   1b160:	mov	r9, #0
   1b164:	ldr	r0, [r0, #132]	; 0x84
   1b168:	cmp	r0, #0
   1b16c:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   1b170:	cmp	r7, #2
   1b174:	bcc	1b1cc <__assert_fail@plt+0x9a6c>
   1b178:	ldr	r1, [fp, #16]
   1b17c:	ldr	r2, [sp, #28]
   1b180:	mov	r6, r5
   1b184:	sub	r1, r1, #1
   1b188:	sub	r1, r1, r2
   1b18c:	mov	r2, #0
   1b190:	ldr	r3, [r0, r2, lsl #2]
   1b194:	cmp	r2, r3
   1b198:	beq	1b1bc <__assert_fail@plt+0x9a5c>
   1b19c:	add	r3, r6, r3, lsl #3
   1b1a0:	add	r7, r6, r2, lsl #3
   1b1a4:	ldr	r3, [r3, #8]
   1b1a8:	str	r3, [r7, #8]
   1b1ac:	ldr	r3, [r0, r2, lsl #2]
   1b1b0:	add	r3, r6, r3, lsl #3
   1b1b4:	ldr	r3, [r3, #12]
   1b1b8:	str	r3, [r7, #12]
   1b1bc:	add	r2, r2, #1
   1b1c0:	cmp	r1, r2
   1b1c4:	bne	1b190 <__assert_fail@plt+0x9a30>
   1b1c8:	mov	r9, #0
   1b1cc:	ldr	r0, [sp, #204]	; 0xcc
   1b1d0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b1d4:	ldr	r0, [sp, #96]	; 0x60
   1b1d8:	ldr	r0, [r0, #76]	; 0x4c
   1b1dc:	cmp	r0, #0
   1b1e0:	beq	1b1fc <__assert_fail@plt+0x9a9c>
   1b1e4:	add	r0, sp, #104	; 0x68
   1b1e8:	bl	23230 <__assert_fail@plt+0x11ad0>
   1b1ec:	ldr	r0, [sp, #236]	; 0xec
   1b1f0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b1f4:	ldr	r0, [sp, #220]	; 0xdc
   1b1f8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b1fc:	ldr	r0, [sp, #112]	; 0x70
   1b200:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b204:	ldr	r0, [sp, #116]	; 0x74
   1b208:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b20c:	ldrb	r0, [sp, #179]	; 0xb3
   1b210:	cmp	r0, #0
   1b214:	beq	1b220 <__assert_fail@plt+0x9ac0>
   1b218:	ldr	r0, [sp, #108]	; 0x6c
   1b21c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b220:	mov	r0, r9
   1b224:	sub	sp, fp, #28
   1b228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b22c:	mov	r0, r6
   1b230:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b234:	mov	r0, #0
   1b238:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b23c:	mov	r9, #12
   1b240:	b	1b1cc <__assert_fail@plt+0x9a6c>
   1b244:	ldr	ip, [sp, #24]
   1b248:	ldr	r4, [sp, #28]
   1b24c:	add	r0, r5, #4
   1b250:	mov	r1, r7
   1b254:	ldr	r2, [r0, #-4]
   1b258:	cmn	r2, #1
   1b25c:	beq	1b2a4 <__assert_fail@plt+0x9b44>
   1b260:	ldr	r7, [sp, #132]	; 0x84
   1b264:	ldr	r3, [sp, #116]	; 0x74
   1b268:	mov	r6, ip
   1b26c:	cmp	r2, r7
   1b270:	addne	r6, r3, r2, lsl #2
   1b274:	ldr	r2, [r6]
   1b278:	str	r2, [r0, #-4]
   1b27c:	ldr	r6, [r0]
   1b280:	cmp	r6, r7
   1b284:	mov	r7, ip
   1b288:	addne	r7, r3, r6, lsl #2
   1b28c:	ldr	r3, [r7]
   1b290:	ldr	r7, [fp, #-200]	; 0xffffff38
   1b294:	add	r2, r2, r7
   1b298:	add	r3, r3, r7
   1b29c:	ldr	r7, [sp, #68]	; 0x44
   1b2a0:	stmda	r0, {r2, r3}
   1b2a4:	add	r0, r0, #8
   1b2a8:	subs	r1, r1, #1
   1b2ac:	bne	1b254 <__assert_fail@plt+0x9af4>
   1b2b0:	b	1b144 <__assert_fail@plt+0x99e4>
   1b2b4:	mov	r9, #1
   1b2b8:	b	1b1cc <__assert_fail@plt+0x9a6c>
   1b2bc:	mov	r0, #0
   1b2c0:	str	r0, [sp, #88]	; 0x58
   1b2c4:	ldr	r0, [sp, #88]	; 0x58
   1b2c8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b2cc:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b2d0:	cmp	r0, r9
   1b2d4:	beq	1b2dc <__assert_fail@plt+0x9b7c>
   1b2d8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b2dc:	mov	r0, #16
   1b2e0:	cmp	r8, #0
   1b2e4:	str	r0, [fp, #-188]	; 0xffffff44
   1b2e8:	mov	r0, #0
   1b2ec:	str	r0, [fp, #-192]	; 0xffffff40
   1b2f0:	str	r9, [fp, #-184]	; 0xffffff48
   1b2f4:	mov	r9, #12
   1b2f8:	beq	1b1cc <__assert_fail@plt+0x9a6c>
   1b2fc:	ldr	r1, [r8]
   1b300:	ldr	r0, [r8, #8]
   1b304:	cmp	r1, #1
   1b308:	blt	1b064 <__assert_fail@plt+0x9904>
   1b30c:	mov	r5, #0
   1b310:	mov	r6, #0
   1b314:	add	r0, r0, r5
   1b318:	ldr	r0, [r0, #20]
   1b31c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b320:	ldr	r0, [r8, #8]
   1b324:	add	r0, r0, r5
   1b328:	ldr	r0, [r0, #8]
   1b32c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b330:	ldr	r1, [r8]
   1b334:	ldr	r0, [r8, #8]
   1b338:	add	r6, r6, #1
   1b33c:	add	r5, r5, #24
   1b340:	cmp	r6, r1
   1b344:	blt	1b314 <__assert_fail@plt+0x9bb4>
   1b348:	b	1b064 <__assert_fail@plt+0x9904>
   1b34c:	mov	r0, #0
   1b350:	str	r0, [r7]
   1b354:	str	r0, [sl]
   1b358:	b	1b2c4 <__assert_fail@plt+0x9b64>
   1b35c:	push	{fp, lr}
   1b360:	mov	fp, sp
   1b364:	sub	sp, sp, #16
   1b368:	mov	ip, #1
   1b36c:	str	r2, [sp, #4]
   1b370:	str	ip, [sp, #12]
   1b374:	mov	ip, #0
   1b378:	str	ip, [sp]
   1b37c:	ldr	ip, [fp, #8]
   1b380:	str	ip, [sp, #8]
   1b384:	bl	1b390 <__assert_fail@plt+0x9c30>
   1b388:	mov	sp, fp
   1b38c:	pop	{fp, pc}
   1b390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b394:	add	fp, sp, #28
   1b398:	sub	sp, sp, #44	; 0x2c
   1b39c:	mvn	r4, #0
   1b3a0:	cmp	r3, #0
   1b3a4:	blt	1b6f4 <__assert_fail@plt+0x9f94>
   1b3a8:	mov	r6, r3
   1b3ac:	mov	r8, r2
   1b3b0:	cmp	r3, r2
   1b3b4:	bgt	1b6f4 <__assert_fail@plt+0x9f94>
   1b3b8:	mov	r5, r0
   1b3bc:	ldr	r0, [fp, #8]
   1b3c0:	mov	r7, r8
   1b3c4:	str	r1, [sp, #24]
   1b3c8:	movw	r1, #0
   1b3cc:	ldr	sl, [r5]
   1b3d0:	movt	r1, #0
   1b3d4:	add	r0, r0, r6
   1b3d8:	cmp	r0, r8
   1b3dc:	bicle	r7, r0, r0, asr #31
   1b3e0:	movw	r0, #0
   1b3e4:	movt	r0, #0
   1b3e8:	orrs	r4, r1, r0
   1b3ec:	beq	1b3f8 <__assert_fail@plt+0x9c98>
   1b3f0:	add	r0, sl, #136	; 0x88
   1b3f4:	bl	1146c <pthread_mutex_lock@plt>
   1b3f8:	ldrb	r0, [r5, #28]
   1b3fc:	ldr	r9, [fp, #16]
   1b400:	cmp	r7, r6
   1b404:	ubfx	r1, r0, #5, #2
   1b408:	str	r4, [sp, #28]
   1b40c:	str	r6, [sp, #36]	; 0x24
   1b410:	str	r1, [sp, #20]
   1b414:	ble	1b4b0 <__assert_fail@plt+0x9d50>
   1b418:	tst	r0, #8
   1b41c:	bne	1b4b0 <__assert_fail@plt+0x9d50>
   1b420:	ldr	r6, [r5, #16]
   1b424:	cmp	r6, #0
   1b428:	beq	1b4b0 <__assert_fail@plt+0x9d50>
   1b42c:	ldr	r4, [r5]
   1b430:	mov	r0, r6
   1b434:	mov	r1, #0
   1b438:	mov	r2, #256	; 0x100
   1b43c:	bl	11670 <memset@plt>
   1b440:	ldr	r1, [r4, #36]	; 0x24
   1b444:	mov	r0, r5
   1b448:	mov	r2, r6
   1b44c:	bl	17e8c <__assert_fail@plt+0x672c>
   1b450:	ldr	r0, [r4, #36]	; 0x24
   1b454:	ldr	r1, [r4, #40]	; 0x28
   1b458:	cmp	r0, r1
   1b45c:	beq	1b470 <__assert_fail@plt+0x9d10>
   1b460:	mov	r0, r5
   1b464:	mov	r2, r6
   1b468:	bl	17e8c <__assert_fail@plt+0x672c>
   1b46c:	ldr	r0, [r4, #36]	; 0x24
   1b470:	ldr	r1, [r4, #44]	; 0x2c
   1b474:	cmp	r0, r1
   1b478:	beq	1b48c <__assert_fail@plt+0x9d2c>
   1b47c:	mov	r0, r5
   1b480:	mov	r2, r6
   1b484:	bl	17e8c <__assert_fail@plt+0x672c>
   1b488:	ldr	r0, [r4, #36]	; 0x24
   1b48c:	ldr	r1, [r4, #48]	; 0x30
   1b490:	cmp	r0, r1
   1b494:	beq	1b4a4 <__assert_fail@plt+0x9d44>
   1b498:	mov	r0, r5
   1b49c:	mov	r2, r6
   1b4a0:	bl	17e8c <__assert_fail@plt+0x672c>
   1b4a4:	ldrb	r0, [r5, #28]
   1b4a8:	orr	r0, r0, #8
   1b4ac:	strb	r0, [r5, #28]
   1b4b0:	str	sl, [sp, #32]
   1b4b4:	mov	sl, #1
   1b4b8:	mov	r4, #0
   1b4bc:	cmp	r9, #0
   1b4c0:	str	r5, [fp, #-32]	; 0xffffffe0
   1b4c4:	beq	1b504 <__assert_fail@plt+0x9da4>
   1b4c8:	ldr	r6, [sp, #36]	; 0x24
   1b4cc:	ands	r1, r0, #16
   1b4d0:	bne	1b540 <__assert_fail@plt+0x9de0>
   1b4d4:	and	r0, r0, #6
   1b4d8:	cmp	r0, #4
   1b4dc:	bne	1b530 <__assert_fail@plt+0x9dd0>
   1b4e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b4e4:	ldr	sl, [r9]
   1b4e8:	ldr	r0, [r0, #24]
   1b4ec:	cmp	sl, r0
   1b4f0:	bhi	1b538 <__assert_fail@plt+0x9dd8>
   1b4f4:	cmp	sl, #1
   1b4f8:	movwlt	r9, #0
   1b4fc:	movwlt	sl, #1
   1b500:	b	1b53c <__assert_fail@plt+0x9ddc>
   1b504:	ldr	r6, [sp, #36]	; 0x24
   1b508:	lsl	r0, sl, #3
   1b50c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1b510:	cmp	r0, #0
   1b514:	bne	1b550 <__assert_fail@plt+0x9df0>
   1b518:	ldr	r5, [sp, #32]
   1b51c:	mvn	r4, #1
   1b520:	ldr	r0, [sp, #28]
   1b524:	cmp	r0, #0
   1b528:	bne	1b6ec <__assert_fail@plt+0x9f8c>
   1b52c:	b	1b6f4 <__assert_fail@plt+0x9f94>
   1b530:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b534:	ldr	r0, [r0, #24]
   1b538:	add	sl, r0, #1
   1b53c:	mov	r4, r9
   1b540:	lsl	r0, sl, #3
   1b544:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1b548:	cmp	r0, #0
   1b54c:	beq	1b518 <__assert_fail@plt+0x9db8>
   1b550:	mov	r9, r0
   1b554:	ldr	r0, [fp, #12]
   1b558:	str	r7, [sp]
   1b55c:	mov	r2, r8
   1b560:	mov	r3, r6
   1b564:	stmib	sp, {r0, sl}
   1b568:	str	r9, [sp, #12]
   1b56c:	ldr	r0, [sp, #20]
   1b570:	ldr	r1, [sp, #24]
   1b574:	str	r0, [sp, #16]
   1b578:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b57c:	bl	18c04 <__assert_fail@plt+0x74a4>
   1b580:	cmp	r0, #0
   1b584:	beq	1b598 <__assert_fail@plt+0x9e38>
   1b588:	mvn	r4, #1
   1b58c:	cmp	r0, #1
   1b590:	mvneq	r4, #0
   1b594:	b	1b6d4 <__assert_fail@plt+0x9f74>
   1b598:	cmp	r4, #0
   1b59c:	beq	1b6b8 <__assert_fail@plt+0x9f58>
   1b5a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b5a4:	add	r6, sl, #1
   1b5a8:	ldrb	r0, [r0, #28]
   1b5ac:	ubfx	r0, r0, #1, #2
   1b5b0:	cmp	r0, #1
   1b5b4:	beq	1b61c <__assert_fail@plt+0x9ebc>
   1b5b8:	mov	r8, #2
   1b5bc:	cmp	r0, #0
   1b5c0:	bne	1b62c <__assert_fail@plt+0x9ecc>
   1b5c4:	lsl	r7, r6, #2
   1b5c8:	mov	r0, r7
   1b5cc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1b5d0:	mov	r8, #0
   1b5d4:	cmp	r0, #0
   1b5d8:	str	r0, [r4, #4]
   1b5dc:	beq	1b80c <__assert_fail@plt+0xa0ac>
   1b5e0:	mov	r0, r7
   1b5e4:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1b5e8:	cmp	r0, #0
   1b5ec:	str	r0, [r4, #8]
   1b5f0:	beq	1b804 <__assert_fail@plt+0xa0a4>
   1b5f4:	str	r6, [r4]
   1b5f8:	mov	r8, #1
   1b5fc:	cmp	sl, #1
   1b600:	bge	1b634 <__assert_fail@plt+0x9ed4>
   1b604:	mov	sl, #0
   1b608:	ldr	r0, [r4]
   1b60c:	ldr	r6, [sp, #36]	; 0x24
   1b610:	cmp	sl, r0
   1b614:	bcs	1b69c <__assert_fail@plt+0x9f3c>
   1b618:	b	1b67c <__assert_fail@plt+0x9f1c>
   1b61c:	ldr	r0, [r4]
   1b620:	mov	r8, #1
   1b624:	cmp	r6, r0
   1b628:	bhi	1b7b4 <__assert_fail@plt+0xa054>
   1b62c:	cmp	sl, #1
   1b630:	blt	1b604 <__assert_fail@plt+0x9ea4>
   1b634:	ldmib	r4, {r6, r7}
   1b638:	mov	r2, #0
   1b63c:	cmp	sl, #3
   1b640:	bhi	1b700 <__assert_fail@plt+0x9fa0>
   1b644:	add	r0, r9, r2, lsl #3
   1b648:	add	r0, r0, #4
   1b64c:	ldr	r1, [r0, #-4]
   1b650:	str	r1, [r6, r2, lsl #2]
   1b654:	ldr	r1, [r0]
   1b658:	add	r0, r0, #8
   1b65c:	str	r1, [r7, r2, lsl #2]
   1b660:	add	r2, r2, #1
   1b664:	cmp	sl, r2
   1b668:	bne	1b64c <__assert_fail@plt+0x9eec>
   1b66c:	ldr	r0, [r4]
   1b670:	ldr	r6, [sp, #36]	; 0x24
   1b674:	cmp	sl, r0
   1b678:	bcs	1b69c <__assert_fail@plt+0x9f3c>
   1b67c:	ldmib	r4, {r0, r1}
   1b680:	mvn	r2, #0
   1b684:	str	r2, [r1, sl, lsl #2]
   1b688:	str	r2, [r0, sl, lsl #2]
   1b68c:	add	sl, sl, #1
   1b690:	ldr	r3, [r4]
   1b694:	cmp	sl, r3
   1b698:	bcc	1b684 <__assert_fail@plt+0x9f24>
   1b69c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b6a0:	cmp	r8, #0
   1b6a4:	ldrb	r0, [r1, #28]
   1b6a8:	and	r0, r0, #249	; 0xf9
   1b6ac:	orr	r0, r0, r8, lsl #1
   1b6b0:	strb	r0, [r1, #28]
   1b6b4:	beq	1b6d0 <__assert_fail@plt+0x9f70>
   1b6b8:	ldr	r0, [fp, #20]
   1b6bc:	cmp	r0, #0
   1b6c0:	ldreq	r4, [r9]
   1b6c4:	ldrne	r0, [r9, #4]
   1b6c8:	subne	r4, r0, r6
   1b6cc:	b	1b6d4 <__assert_fail@plt+0x9f74>
   1b6d0:	mvn	r4, #1
   1b6d4:	ldr	r5, [sp, #32]
   1b6d8:	mov	r0, r9
   1b6dc:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b6e0:	ldr	r0, [sp, #28]
   1b6e4:	cmp	r0, #0
   1b6e8:	beq	1b6f4 <__assert_fail@plt+0x9f94>
   1b6ec:	add	r0, r5, #136	; 0x88
   1b6f0:	bl	113b8 <pthread_mutex_unlock@plt>
   1b6f4:	mov	r0, r4
   1b6f8:	sub	sp, fp, #28
   1b6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b700:	add	ip, r7, sl, lsl #2
   1b704:	mov	lr, #0
   1b708:	add	r5, r9, sl, lsl #3
   1b70c:	str	r8, [sp, #24]
   1b710:	mov	r8, #0
   1b714:	add	r3, r6, sl, lsl #2
   1b718:	mov	r1, #0
   1b71c:	mov	r0, #0
   1b720:	mov	r2, #0
   1b724:	cmp	r9, ip
   1b728:	movwcc	lr, #1
   1b72c:	cmp	r5, r7
   1b730:	movwhi	r8, #1
   1b734:	cmp	r9, r3
   1b738:	movwcc	r1, #1
   1b73c:	cmp	r5, r6
   1b740:	mov	r5, #0
   1b744:	movwhi	r5, #1
   1b748:	cmp	r7, r3
   1b74c:	mov	r3, #0
   1b750:	movwcc	r3, #1
   1b754:	cmp	r6, ip
   1b758:	movwcc	r0, #1
   1b75c:	tst	r0, r3
   1b760:	bne	1b7ac <__assert_fail@plt+0xa04c>
   1b764:	ands	r0, r5, r1
   1b768:	bne	1b7ac <__assert_fail@plt+0xa04c>
   1b76c:	ands	r0, r8, lr
   1b770:	ldr	r8, [sp, #24]
   1b774:	bne	1b644 <__assert_fail@plt+0x9ee4>
   1b778:	bic	r2, sl, #3
   1b77c:	mov	r1, r7
   1b780:	mov	r0, r6
   1b784:	mov	r5, r9
   1b788:	mov	r3, r2
   1b78c:	vld2.32	{d16-d19}, [r5]!
   1b790:	subs	r3, r3, #4
   1b794:	vst1.32	{d16-d17}, [r0]!
   1b798:	vst1.32	{d18-d19}, [r1]!
   1b79c:	bne	1b78c <__assert_fail@plt+0xa02c>
   1b7a0:	cmp	sl, r2
   1b7a4:	bne	1b644 <__assert_fail@plt+0x9ee4>
   1b7a8:	b	1b66c <__assert_fail@plt+0x9f0c>
   1b7ac:	ldr	r8, [sp, #24]
   1b7b0:	b	1b644 <__assert_fail@plt+0x9ee4>
   1b7b4:	ldr	r0, [r4, #4]
   1b7b8:	lsl	r7, r6, #2
   1b7bc:	mov	r1, r7
   1b7c0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1b7c4:	mov	r8, #0
   1b7c8:	cmp	r0, #0
   1b7cc:	beq	1b80c <__assert_fail@plt+0xa0ac>
   1b7d0:	mov	r5, r0
   1b7d4:	ldr	r0, [r4, #8]
   1b7d8:	mov	r1, r7
   1b7dc:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1b7e0:	cmp	r0, #0
   1b7e4:	beq	1b814 <__assert_fail@plt+0xa0b4>
   1b7e8:	str	r6, [r4]
   1b7ec:	str	r5, [r4, #4]
   1b7f0:	str	r0, [r4, #8]
   1b7f4:	mov	r8, #1
   1b7f8:	cmp	sl, #1
   1b7fc:	bge	1b634 <__assert_fail@plt+0x9ed4>
   1b800:	b	1b604 <__assert_fail@plt+0x9ea4>
   1b804:	ldr	r0, [r4, #4]
   1b808:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b80c:	ldr	r6, [sp, #36]	; 0x24
   1b810:	b	1b69c <__assert_fail@plt+0x9f3c>
   1b814:	mov	r0, r5
   1b818:	b	1b808 <__assert_fail@plt+0xa0a8>
   1b81c:	push	{fp, lr}
   1b820:	mov	fp, sp
   1b824:	sub	sp, sp, #16
   1b828:	mov	ip, #0
   1b82c:	str	r2, [sp, #4]
   1b830:	str	ip, [sp, #12]
   1b834:	ldr	ip, [fp, #12]
   1b838:	str	ip, [sp, #8]
   1b83c:	ldr	ip, [fp, #8]
   1b840:	str	ip, [sp]
   1b844:	bl	1b390 <__assert_fail@plt+0x9c30>
   1b848:	mov	sp, fp
   1b84c:	pop	{fp, pc}
   1b850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b854:	add	fp, sp, #28
   1b858:	sub	sp, sp, #20
   1b85c:	ldr	r4, [fp, #8]
   1b860:	mov	r8, r1
   1b864:	mov	r1, r0
   1b868:	mov	r6, r2
   1b86c:	orr	r0, r4, r2
   1b870:	ldr	r2, [fp, #20]
   1b874:	orr	r0, r0, r2
   1b878:	cmp	r0, #0
   1b87c:	blt	1b93c <__assert_fail@plt+0xa1dc>
   1b880:	adds	sl, r6, r4
   1b884:	bvs	1b93c <__assert_fail@plt+0xa1dc>
   1b888:	mov	r5, #0
   1b88c:	cmp	r4, #1
   1b890:	blt	1b8e8 <__assert_fail@plt+0xa188>
   1b894:	mov	r9, r3
   1b898:	cmp	r6, #1
   1b89c:	blt	1b8f0 <__assert_fail@plt+0xa190>
   1b8a0:	mov	r0, sl
   1b8a4:	mov	r5, r1
   1b8a8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1b8ac:	cmp	r0, #0
   1b8b0:	beq	1b93c <__assert_fail@plt+0xa1dc>
   1b8b4:	mov	r1, r8
   1b8b8:	mov	r2, r6
   1b8bc:	mov	r7, r0
   1b8c0:	bl	11484 <memcpy@plt>
   1b8c4:	add	r0, r7, r6
   1b8c8:	mov	r1, r9
   1b8cc:	mov	r2, r4
   1b8d0:	bl	11484 <memcpy@plt>
   1b8d4:	ldr	r2, [fp, #20]
   1b8d8:	mov	r1, r5
   1b8dc:	mov	r4, r7
   1b8e0:	mov	r5, #0
   1b8e4:	b	1b8f8 <__assert_fail@plt+0xa198>
   1b8e8:	mov	r7, r8
   1b8ec:	b	1b8f4 <__assert_fail@plt+0xa194>
   1b8f0:	mov	r7, r9
   1b8f4:	mov	r4, #0
   1b8f8:	ldr	r0, [fp, #16]
   1b8fc:	ldr	r3, [fp, #12]
   1b900:	mov	r6, #1
   1b904:	str	r2, [sp, #4]
   1b908:	mov	r2, sl
   1b90c:	str	r5, [sp]
   1b910:	str	r6, [sp, #12]
   1b914:	str	r0, [sp, #8]
   1b918:	mov	r0, r1
   1b91c:	mov	r1, r7
   1b920:	bl	1b390 <__assert_fail@plt+0x9c30>
   1b924:	mov	r5, r0
   1b928:	mov	r0, r4
   1b92c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1b930:	mov	r0, r5
   1b934:	sub	sp, fp, #28
   1b938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b93c:	mvn	r0, #1
   1b940:	sub	sp, fp, #28
   1b944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b94c:	add	fp, sp, #28
   1b950:	sub	sp, sp, #20
   1b954:	ldr	r4, [fp, #8]
   1b958:	mov	r8, r1
   1b95c:	mov	r1, r0
   1b960:	mov	r6, r2
   1b964:	orr	r0, r4, r2
   1b968:	ldr	r2, [fp, #24]
   1b96c:	orr	r0, r0, r2
   1b970:	cmp	r0, #0
   1b974:	blt	1ba34 <__assert_fail@plt+0xa2d4>
   1b978:	adds	sl, r6, r4
   1b97c:	bvs	1ba34 <__assert_fail@plt+0xa2d4>
   1b980:	mov	r5, #0
   1b984:	cmp	r4, #1
   1b988:	blt	1b9e0 <__assert_fail@plt+0xa280>
   1b98c:	mov	r9, r3
   1b990:	cmp	r6, #1
   1b994:	blt	1b9e8 <__assert_fail@plt+0xa288>
   1b998:	mov	r0, sl
   1b99c:	mov	r5, r1
   1b9a0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1b9a4:	cmp	r0, #0
   1b9a8:	beq	1ba34 <__assert_fail@plt+0xa2d4>
   1b9ac:	mov	r1, r8
   1b9b0:	mov	r2, r6
   1b9b4:	mov	r7, r0
   1b9b8:	bl	11484 <memcpy@plt>
   1b9bc:	add	r0, r7, r6
   1b9c0:	mov	r1, r9
   1b9c4:	mov	r2, r4
   1b9c8:	bl	11484 <memcpy@plt>
   1b9cc:	ldr	r2, [fp, #24]
   1b9d0:	mov	r1, r5
   1b9d4:	mov	r4, r7
   1b9d8:	mov	r5, #0
   1b9dc:	b	1b9f0 <__assert_fail@plt+0xa290>
   1b9e0:	mov	r7, r8
   1b9e4:	b	1b9ec <__assert_fail@plt+0xa28c>
   1b9e8:	mov	r7, r9
   1b9ec:	mov	r4, #0
   1b9f0:	ldr	r0, [fp, #20]
   1b9f4:	ldr	r6, [fp, #16]
   1b9f8:	ldr	r3, [fp, #12]
   1b9fc:	str	r2, [sp, #4]
   1ba00:	mov	r2, sl
   1ba04:	str	r5, [sp, #12]
   1ba08:	str	r0, [sp, #8]
   1ba0c:	mov	r0, r1
   1ba10:	mov	r1, r7
   1ba14:	str	r6, [sp]
   1ba18:	bl	1b390 <__assert_fail@plt+0x9c30>
   1ba1c:	mov	r5, r0
   1ba20:	mov	r0, r4
   1ba24:	bl	14538 <__assert_fail@plt+0x2dd8>
   1ba28:	mov	r0, r5
   1ba2c:	sub	sp, fp, #28
   1ba30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba34:	mvn	r0, #1
   1ba38:	sub	sp, fp, #28
   1ba3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba40:	ldrb	ip, [r0, #28]
   1ba44:	cmp	r2, #0
   1ba48:	bic	ip, ip, #6
   1ba4c:	orrne	ip, ip, #2
   1ba50:	strb	ip, [r0, #28]
   1ba54:	ldr	r0, [sp]
   1ba58:	moveq	r0, r2
   1ba5c:	cmp	r2, #0
   1ba60:	moveq	r3, r2
   1ba64:	stm	r1, {r2, r3}
   1ba68:	str	r0, [r1, #8]
   1ba6c:	bx	lr
   1ba70:	push	{r4, sl, fp, lr}
   1ba74:	add	fp, sp, #8
   1ba78:	mov	r4, r0
   1ba7c:	ldr	r0, [r0, #24]
   1ba80:	bl	14538 <__assert_fail@plt+0x2dd8>
   1ba84:	ldr	r0, [r4, #36]	; 0x24
   1ba88:	bl	14538 <__assert_fail@plt+0x2dd8>
   1ba8c:	ldr	r0, [r4, #40]	; 0x28
   1ba90:	add	r1, r4, #4
   1ba94:	cmp	r0, r1
   1ba98:	beq	1baac <__assert_fail@plt+0xa34c>
   1ba9c:	ldr	r0, [r0, #8]
   1baa0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1baa4:	ldr	r0, [r4, #40]	; 0x28
   1baa8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1baac:	ldr	r0, [r4, #12]
   1bab0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1bab4:	ldr	r0, [r4, #48]	; 0x30
   1bab8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1babc:	ldr	r0, [r4, #44]	; 0x2c
   1bac0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1bac4:	mov	r0, r4
   1bac8:	pop	{r4, sl, fp, lr}
   1bacc:	b	14538 <__assert_fail@plt+0x2dd8>
   1bad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bad4:	add	fp, sp, #28
   1bad8:	sub	sp, sp, #92	; 0x5c
   1badc:	mov	r9, r0
   1bae0:	ldrb	r0, [r0, #74]	; 0x4a
   1bae4:	ldr	r2, [r9, #36]	; 0x24
   1bae8:	ldr	r1, [r9, #48]	; 0x30
   1baec:	ldr	r4, [r9, #28]
   1baf0:	cmp	r2, r1
   1baf4:	movgt	r2, r1
   1baf8:	cmp	r0, #0
   1bafc:	str	r2, [sp]
   1bb00:	bne	1bb20 <__assert_fail@plt+0xa3c0>
   1bb04:	mov	r7, r9
   1bb08:	ldr	r0, [r7, #64]!	; 0x40
   1bb0c:	cmp	r0, #0
   1bb10:	bne	1bb20 <__assert_fail@plt+0xa3c0>
   1bb14:	ldrb	r0, [r9, #76]	; 0x4c
   1bb18:	cmp	r0, #0
   1bb1c:	beq	1bb28 <__assert_fail@plt+0xa3c8>
   1bb20:	ldr	r6, [r9, #32]
   1bb24:	b	1bd04 <__assert_fail@plt+0xa5a4>
   1bb28:	ldr	r0, [sp]
   1bb2c:	cmp	r0, r4
   1bb30:	ble	1bb40 <__assert_fail@plt+0xa3e0>
   1bb34:	add	r8, r9, #16
   1bb38:	mov	sl, r4
   1bb3c:	b	1bb98 <__assert_fail@plt+0xa438>
   1bb40:	mov	sl, r4
   1bb44:	str	r4, [sp, #4]
   1bb48:	b	1be14 <__assert_fail@plt+0xa6b4>
   1bb4c:	add	r0, r4, #1
   1bb50:	cmp	r0, #2
   1bb54:	bcc	1bb68 <__assert_fail@plt+0xa408>
   1bb58:	ldr	r0, [r9, #36]	; 0x24
   1bb5c:	ldr	r1, [r9, #48]	; 0x30
   1bb60:	cmp	r0, r1
   1bb64:	blt	1bcf0 <__assert_fail@plt+0xa590>
   1bb68:	ldr	r0, [r9, #4]
   1bb6c:	ldr	r1, [sp, #4]
   1bb70:	cmn	r4, #1
   1bb74:	strb	sl, [r0, r1]
   1bb78:	ldr	r0, [r9, #8]
   1bb7c:	str	sl, [r0, r1, lsl #2]
   1bb80:	add	sl, r1, #1
   1bb84:	bne	1bcd0 <__assert_fail@plt+0xa570>
   1bb88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bb8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bb90:	stm	r8, {r0, r1}
   1bb94:	b	1bcd0 <__assert_fail@plt+0xa570>
   1bb98:	ldr	r5, [r9, #24]
   1bb9c:	ldr	r4, [r9]
   1bba0:	str	sl, [sp, #4]
   1bba4:	add	r0, r5, sl
   1bba8:	ldrb	sl, [r4, r0]
   1bbac:	tst	sl, #128	; 0x80
   1bbb0:	bne	1bbf8 <__assert_fail@plt+0xa498>
   1bbb4:	mov	r0, r8
   1bbb8:	bl	114b4 <mbsinit@plt>
   1bbbc:	cmp	r0, #0
   1bbc0:	beq	1bbf8 <__assert_fail@plt+0xa498>
   1bbc4:	mov	r0, sl
   1bbc8:	bl	11724 <towupper@plt>
   1bbcc:	cmp	r0, #128	; 0x80
   1bbd0:	bcs	1bbf0 <__assert_fail@plt+0xa490>
   1bbd4:	ldr	r2, [sp, #4]
   1bbd8:	ldr	r1, [r9, #4]
   1bbdc:	strb	r0, [r1, r2]
   1bbe0:	add	sl, r2, #1
   1bbe4:	ldr	r1, [r9, #8]
   1bbe8:	str	r0, [r1, r2, lsl #2]
   1bbec:	b	1bcd0 <__assert_fail@plt+0xa570>
   1bbf0:	ldr	r4, [r9]
   1bbf4:	ldr	r5, [r9, #24]
   1bbf8:	ldm	r8, {r0, r1}
   1bbfc:	mov	r3, r8
   1bc00:	str	r1, [fp, #-36]	; 0xffffffdc
   1bc04:	str	r0, [fp, #-40]	; 0xffffffd8
   1bc08:	ldm	sp, {r0, r1}
   1bc0c:	sub	r2, r0, r1
   1bc10:	add	r0, r4, r5
   1bc14:	add	r1, r0, r1
   1bc18:	add	r0, sp, #12
   1bc1c:	bl	2d680 <__assert_fail@plt+0x1bf20>
   1bc20:	mov	r4, r0
   1bc24:	sub	r0, r0, #1
   1bc28:	cmn	r0, #4
   1bc2c:	bhi	1bb4c <__assert_fail@plt+0xa3ec>
   1bc30:	ldr	r0, [sp, #12]
   1bc34:	bl	11724 <towupper@plt>
   1bc38:	mov	r5, r0
   1bc3c:	ldr	r0, [sp, #12]
   1bc40:	cmp	r5, r0
   1bc44:	bne	1bc68 <__assert_fail@plt+0xa508>
   1bc48:	ldr	r1, [r9]
   1bc4c:	ldr	r2, [r9, #24]
   1bc50:	ldr	r0, [r9, #4]
   1bc54:	ldr	r6, [sp, #4]
   1bc58:	add	r1, r1, r2
   1bc5c:	add	r0, r0, r6
   1bc60:	add	r1, r1, r6
   1bc64:	b	1bc94 <__assert_fail@plt+0xa534>
   1bc68:	add	sl, sp, #16
   1bc6c:	mov	r1, r5
   1bc70:	sub	r2, fp, #40	; 0x28
   1bc74:	mov	r0, sl
   1bc78:	bl	11400 <wcrtomb@plt>
   1bc7c:	cmp	r4, r0
   1bc80:	bne	1bce4 <__assert_fail@plt+0xa584>
   1bc84:	ldr	r0, [r9, #4]
   1bc88:	ldr	r6, [sp, #4]
   1bc8c:	mov	r1, sl
   1bc90:	add	r0, r0, r6
   1bc94:	mov	r2, r4
   1bc98:	bl	11484 <memcpy@plt>
   1bc9c:	ldr	r0, [r9, #8]
   1bca0:	add	sl, r6, #1
   1bca4:	str	r5, [r0, r6, lsl #2]
   1bca8:	add	r5, r4, r6
   1bcac:	cmp	sl, r5
   1bcb0:	bge	1bcd0 <__assert_fail@plt+0xa570>
   1bcb4:	add	r0, r0, r6, lsl #2
   1bcb8:	mvn	r1, #3
   1bcbc:	add	r2, r1, r4, lsl #2
   1bcc0:	add	r0, r0, #4
   1bcc4:	mov	r1, #255	; 0xff
   1bcc8:	bl	11670 <memset@plt>
   1bccc:	mov	sl, r5
   1bcd0:	ldr	r0, [sp]
   1bcd4:	str	sl, [sp, #4]
   1bcd8:	cmp	r0, sl
   1bcdc:	bgt	1bb98 <__assert_fail@plt+0xa438>
   1bce0:	b	1be14 <__assert_fail@plt+0xa6b4>
   1bce4:	ldr	r6, [sp, #4]
   1bce8:	mov	sl, r6
   1bcec:	b	1bd1c <__assert_fail@plt+0xa5bc>
   1bcf0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bcf4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bcf8:	stm	r8, {r0, r1}
   1bcfc:	ldr	sl, [sp, #4]
   1bd00:	b	1be14 <__assert_fail@plt+0xa6b4>
   1bd04:	ldr	r0, [sp]
   1bd08:	cmp	r4, r0
   1bd0c:	bge	1be0c <__assert_fail@plt+0xa6ac>
   1bd10:	add	r7, r9, #64	; 0x40
   1bd14:	add	r8, r9, #16
   1bd18:	mov	sl, r4
   1bd1c:	ldm	r8, {r0, r1}
   1bd20:	str	r6, [sp, #4]
   1bd24:	str	r0, [fp, #-40]	; 0xffffffd8
   1bd28:	ldr	r0, [sp]
   1bd2c:	str	r1, [fp, #-36]	; 0xffffffdc
   1bd30:	sub	r2, r0, sl
   1bd34:	ldr	r0, [r7]
   1bd38:	cmp	r0, #0
   1bd3c:	bne	1be2c <__assert_fail@plt+0xa6cc>
   1bd40:	ldr	r0, [r9]
   1bd44:	ldr	r1, [r9, #24]
   1bd48:	add	r0, r0, r1
   1bd4c:	add	r4, r0, r6
   1bd50:	add	r0, sp, #8
   1bd54:	mov	r1, r4
   1bd58:	mov	r3, r8
   1bd5c:	bl	2d680 <__assert_fail@plt+0x1bf20>
   1bd60:	sub	r6, r0, #1
   1bd64:	mov	r5, r0
   1bd68:	cmn	r6, #4
   1bd6c:	bhi	1be7c <__assert_fail@plt+0xa71c>
   1bd70:	ldr	r0, [sp, #8]
   1bd74:	bl	11724 <towupper@plt>
   1bd78:	mov	r7, r0
   1bd7c:	ldr	r0, [sp, #8]
   1bd80:	cmp	r7, r0
   1bd84:	bne	1bd94 <__assert_fail@plt+0xa634>
   1bd88:	ldr	r0, [r9, #4]
   1bd8c:	mov	r1, r4
   1bd90:	b	1bdb4 <__assert_fail@plt+0xa654>
   1bd94:	add	r0, sp, #16
   1bd98:	sub	r2, fp, #40	; 0x28
   1bd9c:	mov	r1, r7
   1bda0:	bl	11400 <wcrtomb@plt>
   1bda4:	cmp	r0, r5
   1bda8:	bne	1bef8 <__assert_fail@plt+0xa798>
   1bdac:	ldr	r0, [r9, #4]
   1bdb0:	add	r1, sp, #16
   1bdb4:	add	r0, r0, sl
   1bdb8:	mov	r2, r5
   1bdbc:	bl	11484 <memcpy@plt>
   1bdc0:	ldrb	r0, [r9, #76]	; 0x4c
   1bdc4:	ldr	r6, [sp, #4]
   1bdc8:	cmp	r0, #0
   1bdcc:	bne	1bf8c <__assert_fail@plt+0xa82c>
   1bdd0:	ldr	r0, [r9, #8]
   1bdd4:	add	r4, r5, sl
   1bdd8:	add	r1, sl, #1
   1bddc:	add	r6, r5, r6
   1bde0:	cmp	r1, r4
   1bde4:	str	r7, [r0, sl, lsl #2]
   1bde8:	bge	1be04 <__assert_fail@plt+0xa6a4>
   1bdec:	add	r0, r0, r1, lsl #2
   1bdf0:	mvn	r1, #3
   1bdf4:	add	r2, r1, r5, lsl #2
   1bdf8:	mov	r1, #255	; 0xff
   1bdfc:	bl	11670 <memset@plt>
   1be00:	b	1bd04 <__assert_fail@plt+0xa5a4>
   1be04:	mov	r4, r1
   1be08:	b	1bd04 <__assert_fail@plt+0xa5a4>
   1be0c:	str	r6, [sp, #4]
   1be10:	mov	sl, r4
   1be14:	ldr	r0, [sp, #4]
   1be18:	str	sl, [r9, #28]
   1be1c:	str	r0, [r9, #32]
   1be20:	mov	r0, #0
   1be24:	sub	sp, fp, #28
   1be28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be2c:	cmp	r2, #1
   1be30:	add	r4, sp, #16
   1be34:	ldrge	r1, [r9, #80]	; 0x50
   1be38:	cmpge	r1, #1
   1be3c:	blt	1bd50 <__assert_fail@plt+0xa5f0>
   1be40:	ldr	r7, [r9, #24]
   1be44:	ldr	r3, [r9]
   1be48:	add	r4, sp, #16
   1be4c:	add	r7, r6, r7
   1be50:	add	r3, r3, r7
   1be54:	mov	r7, #0
   1be58:	ldrb	r5, [r3, r7]
   1be5c:	ldrb	r5, [r0, r5]
   1be60:	strb	r5, [r4, r7]
   1be64:	add	r7, r7, #1
   1be68:	cmp	r7, r2
   1be6c:	bge	1bd50 <__assert_fail@plt+0xa5f0>
   1be70:	cmp	r7, r1
   1be74:	blt	1be58 <__assert_fail@plt+0xa6f8>
   1be78:	b	1bd50 <__assert_fail@plt+0xa5f0>
   1be7c:	add	r0, r5, #1
   1be80:	cmp	r0, #2
   1be84:	bcc	1be98 <__assert_fail@plt+0xa738>
   1be88:	ldr	r0, [r9, #36]	; 0x24
   1be8c:	ldr	r1, [r9, #48]	; 0x30
   1be90:	cmp	r0, r1
   1be94:	blt	1bff8 <__assert_fail@plt+0xa898>
   1be98:	ldr	r2, [r9, #24]
   1be9c:	ldr	r6, [sp, #4]
   1bea0:	ldr	r0, [r9]
   1bea4:	ldr	r1, [r9, #64]	; 0x40
   1bea8:	add	r4, sl, #1
   1beac:	add	r2, r2, r6
   1beb0:	cmp	r1, #0
   1beb4:	ldrb	r0, [r0, r2]
   1beb8:	ldrbne	r0, [r1, r0]
   1bebc:	ldr	r1, [r9, #4]
   1bec0:	strb	r0, [r1, sl]
   1bec4:	ldrb	r1, [r9, #76]	; 0x4c
   1bec8:	cmp	r1, #0
   1becc:	ldrne	r1, [r9, #12]
   1bed0:	strne	r6, [r1, sl, lsl #2]
   1bed4:	add	r6, r6, #1
   1bed8:	cmn	r5, #1
   1bedc:	ldr	r1, [r9, #8]
   1bee0:	str	r0, [r1, sl, lsl #2]
   1bee4:	bne	1bd04 <__assert_fail@plt+0xa5a4>
   1bee8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1beec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bef0:	stm	r8, {r0, r1}
   1bef4:	b	1bd04 <__assert_fail@plt+0xa5a4>
   1bef8:	mov	r3, r0
   1befc:	cmn	r0, #1
   1bf00:	beq	1bd88 <__assert_fail@plt+0xa628>
   1bf04:	ldr	r1, [r9, #36]	; 0x24
   1bf08:	add	r4, r3, sl
   1bf0c:	cmp	r4, r1
   1bf10:	bhi	1bff8 <__assert_fail@plt+0xa898>
   1bf14:	ldr	r0, [r9, #12]
   1bf18:	cmp	r0, #0
   1bf1c:	bne	1bf3c <__assert_fail@plt+0xa7dc>
   1bf20:	lsl	r0, r1, #2
   1bf24:	mov	r8, r3
   1bf28:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1bf2c:	mov	r3, r8
   1bf30:	cmp	r0, #0
   1bf34:	str	r0, [r9, #12]
   1bf38:	beq	1c008 <__assert_fail@plt+0xa8a8>
   1bf3c:	ldrb	r1, [r9, #76]	; 0x4c
   1bf40:	cmp	r1, #0
   1bf44:	bne	1c02c <__assert_fail@plt+0xa8cc>
   1bf48:	cmp	sl, #0
   1bf4c:	beq	1c024 <__assert_fail@plt+0xa8c4>
   1bf50:	mov	r1, #0
   1bf54:	cmp	sl, #4
   1bf58:	bcc	1c014 <__assert_fail@plt+0xa8b4>
   1bf5c:	add	r2, pc, #524	; 0x20c
   1bf60:	bic	r1, sl, #3
   1bf64:	vmov.i32	q8, #4	; 0x00000004
   1bf68:	vld1.64	{d18-d19}, [r2 :128]
   1bf6c:	mov	ip, r1
   1bf70:	mov	r2, r0
   1bf74:	vadd.i32	q10, q9, q8
   1bf78:	vst1.32	{d18-d19}, [r2]!
   1bf7c:	subs	ip, ip, #4
   1bf80:	vorr	q9, q10, q10
   1bf84:	bne	1bf74 <__assert_fail@plt+0xa814>
   1bf88:	b	1c01c <__assert_fail@plt+0xa8bc>
   1bf8c:	ldr	r0, [r9, #12]
   1bf90:	mov	r1, #0
   1bf94:	cmp	r5, #4
   1bf98:	bcc	1bfd4 <__assert_fail@plt+0xa874>
   1bf9c:	add	r3, pc, #460	; 0x1cc
   1bfa0:	bic	r1, r5, #3
   1bfa4:	add	r2, r0, sl, lsl #2
   1bfa8:	vdup.32	q8, r6
   1bfac:	vmov.i32	q10, #4	; 0x00000004
   1bfb0:	vld1.64	{d18-d19}, [r3 :128]
   1bfb4:	mov	r3, r1
   1bfb8:	vadd.i32	q11, q9, q8
   1bfbc:	vadd.i32	q9, q9, q10
   1bfc0:	subs	r3, r3, #4
   1bfc4:	vst1.32	{d22-d23}, [r2]!
   1bfc8:	bne	1bfb8 <__assert_fail@plt+0xa858>
   1bfcc:	cmp	r5, r1
   1bfd0:	beq	1bdd0 <__assert_fail@plt+0xa670>
   1bfd4:	add	r2, r6, r1
   1bfd8:	sub	r3, r5, r1
   1bfdc:	add	r1, sl, r1
   1bfe0:	add	r0, r0, r1, lsl #2
   1bfe4:	str	r2, [r0], #4
   1bfe8:	add	r2, r2, #1
   1bfec:	subs	r3, r3, #1
   1bff0:	bne	1bfe4 <__assert_fail@plt+0xa884>
   1bff4:	b	1bdd0 <__assert_fail@plt+0xa670>
   1bff8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bffc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c000:	stm	r8, {r0, r1}
   1c004:	b	1be14 <__assert_fail@plt+0xa6b4>
   1c008:	mov	r0, #12
   1c00c:	sub	sp, fp, #28
   1c010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c014:	str	r1, [r0, r1, lsl #2]
   1c018:	add	r1, r1, #1
   1c01c:	cmp	sl, r1
   1c020:	bne	1c014 <__assert_fail@plt+0xa8b4>
   1c024:	mov	r0, #1
   1c028:	strb	r0, [r9, #76]	; 0x4c
   1c02c:	ldr	r0, [r9, #4]
   1c030:	add	r1, sp, #16
   1c034:	mov	r2, r3
   1c038:	mov	r8, r3
   1c03c:	add	r0, r0, sl
   1c040:	bl	11484 <memcpy@plt>
   1c044:	ldr	lr, [r9, #8]
   1c048:	ldr	ip, [sp, #4]
   1c04c:	cmp	r8, #2
   1c050:	str	r7, [lr, sl, lsl #2]
   1c054:	ldr	r2, [r9, #12]
   1c058:	str	ip, [r2, sl, lsl #2]
   1c05c:	bcc	1c130 <__assert_fail@plt+0xa9d0>
   1c060:	sub	r0, r8, #1
   1c064:	mov	r1, #1
   1c068:	cmp	r0, #4
   1c06c:	bcs	1c078 <__assert_fail@plt+0xa918>
   1c070:	ldr	ip, [sp, #4]
   1c074:	b	1c100 <__assert_fail@plt+0xa9a0>
   1c078:	str	r0, [sp]
   1c07c:	add	r3, r8, sl
   1c080:	add	r0, sl, #1
   1c084:	add	r7, lr, r0, lsl #2
   1c088:	add	ip, lr, r3, lsl #2
   1c08c:	add	r0, r2, r0, lsl #2
   1c090:	cmp	r0, ip
   1c094:	ldr	ip, [sp, #4]
   1c098:	addcc	r3, r2, r3, lsl #2
   1c09c:	cmpcc	r7, r3
   1c0a0:	bcc	1c100 <__assert_fail@plt+0xa9a0>
   1c0a4:	add	r1, pc, #212	; 0xd4
   1c0a8:	vdup.32	q8, ip
   1c0ac:	vdup.32	q9, r6
   1c0b0:	vdup.32	q10, r5
   1c0b4:	vmov.i32	q12, #4	; 0x00000004
   1c0b8:	vmov.i8	q13, #255	; 0xff
   1c0bc:	vld1.64	{d22-d23}, [r1 :128]
   1c0c0:	ldr	r1, [sp]
   1c0c4:	bic	ip, r1, #3
   1c0c8:	orr	r1, ip, #1
   1c0cc:	mov	r3, ip
   1c0d0:	vcgt.u32	q14, q10, q11
   1c0d4:	subs	r3, r3, #4
   1c0d8:	vbsl	q14, q11, q9
   1c0dc:	vadd.i32	q11, q11, q12
   1c0e0:	vadd.i32	q14, q14, q8
   1c0e4:	vst1.32	{d28-d29}, [r0]!
   1c0e8:	vst1.32	{d26-d27}, [r7]!
   1c0ec:	bne	1c0d0 <__assert_fail@plt+0xa970>
   1c0f0:	ldr	r0, [sp]
   1c0f4:	cmp	r0, ip
   1c0f8:	ldr	ip, [sp, #4]
   1c0fc:	beq	1c130 <__assert_fail@plt+0xa9d0>
   1c100:	add	r2, r2, sl, lsl #2
   1c104:	add	r0, lr, sl, lsl #2
   1c108:	mvn	r3, #0
   1c10c:	cmp	r1, r5
   1c110:	mov	r7, r6
   1c114:	movcc	r7, r1
   1c118:	add	r7, r7, ip
   1c11c:	str	r7, [r2, r1, lsl #2]
   1c120:	str	r3, [r0, r1, lsl #2]
   1c124:	add	r1, r1, #1
   1c128:	cmp	r8, r1
   1c12c:	bne	1c10c <__assert_fail@plt+0xa9ac>
   1c130:	ldr	r0, [r9, #48]	; 0x30
   1c134:	ldr	r2, [r9, #52]	; 0x34
   1c138:	sub	r1, r8, r5
   1c13c:	mov	r6, ip
   1c140:	add	r6, r5, r6
   1c144:	add	r0, r0, r1
   1c148:	cmp	r2, ip
   1c14c:	str	r0, [r9, #48]	; 0x30
   1c150:	ldrgt	r2, [r9, #56]	; 0x38
   1c154:	addgt	r1, r2, r1
   1c158:	strgt	r1, [r9, #56]	; 0x38
   1c15c:	ldr	r1, [r9, #36]	; 0x24
   1c160:	cmp	r1, r0
   1c164:	movgt	r1, r0
   1c168:	str	r1, [sp]
   1c16c:	b	1bd04 <__assert_fail@plt+0xa5a4>
   1c170:	andeq	r0, r0, r0
   1c174:	andeq	r0, r0, r1
   1c178:	andeq	r0, r0, r2
   1c17c:	andeq	r0, r0, r3
   1c180:	andeq	r0, r0, r1
   1c184:	andeq	r0, r0, r2
   1c188:	andeq	r0, r0, r3
   1c18c:	andeq	r0, r0, r4
   1c190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c194:	add	fp, sp, #28
   1c198:	sub	sp, sp, #68	; 0x44
   1c19c:	mov	r4, r0
   1c1a0:	ldr	r6, [r0, #28]
   1c1a4:	ldr	r7, [r0, #36]	; 0x24
   1c1a8:	ldr	r0, [r0, #48]	; 0x30
   1c1ac:	cmp	r7, r0
   1c1b0:	movgt	r7, r0
   1c1b4:	cmp	r7, r6
   1c1b8:	ble	1c354 <__assert_fail@plt+0xabf4>
   1c1bc:	add	r8, r4, #16
   1c1c0:	mov	r5, sp
   1c1c4:	ldm	r8, {r9, sl}
   1c1c8:	ldr	r0, [r4, #64]	; 0x40
   1c1cc:	sub	r2, r7, r6
   1c1d0:	cmp	r0, #0
   1c1d4:	bne	1c2a4 <__assert_fail@plt+0xab44>
   1c1d8:	ldr	r0, [r4]
   1c1dc:	ldr	r1, [r4, #24]
   1c1e0:	add	r0, r0, r1
   1c1e4:	add	r1, r0, r6
   1c1e8:	mov	r0, r5
   1c1ec:	mov	r3, r8
   1c1f0:	bl	2d680 <__assert_fail@plt+0x1bf20>
   1c1f4:	add	r1, r0, #1
   1c1f8:	cmp	r1, #2
   1c1fc:	bcc	1c218 <__assert_fail@plt+0xaab8>
   1c200:	cmn	r0, #2
   1c204:	bne	1c254 <__assert_fail@plt+0xaaf4>
   1c208:	ldr	r0, [r4, #36]	; 0x24
   1c20c:	ldr	r1, [r4, #48]	; 0x30
   1c210:	cmp	r0, r1
   1c214:	blt	1c368 <__assert_fail@plt+0xac08>
   1c218:	ldr	r1, [r4, #24]
   1c21c:	ldr	r0, [r4]
   1c220:	mov	r2, sl
   1c224:	mov	sl, r5
   1c228:	add	r1, r1, r6
   1c22c:	ldrb	r1, [r0, r1]
   1c230:	str	r1, [sp]
   1c234:	ldr	r0, [r4, #64]	; 0x40
   1c238:	cmp	r0, #0
   1c23c:	ldrbne	r1, [r0, r1]
   1c240:	mov	r0, #1
   1c244:	strne	r1, [sp]
   1c248:	str	r9, [r8]
   1c24c:	str	r2, [r8, #4]
   1c250:	b	1c25c <__assert_fail@plt+0xaafc>
   1c254:	ldr	r1, [sp]
   1c258:	mov	sl, r5
   1c25c:	ldr	r3, [r4, #8]
   1c260:	add	r5, r0, r6
   1c264:	str	r1, [r3, r6, lsl #2]
   1c268:	add	r1, r6, #1
   1c26c:	cmp	r1, r5
   1c270:	bge	1c290 <__assert_fail@plt+0xab30>
   1c274:	mvn	r1, #3
   1c278:	add	r2, r1, r0, lsl #2
   1c27c:	add	r0, r3, r6, lsl #2
   1c280:	mov	r1, #255	; 0xff
   1c284:	add	r0, r0, #4
   1c288:	bl	11670 <memset@plt>
   1c28c:	mov	r1, r5
   1c290:	cmp	r7, r1
   1c294:	mov	r6, r1
   1c298:	mov	r5, sl
   1c29c:	bgt	1c1c4 <__assert_fail@plt+0xaa64>
   1c2a0:	b	1c358 <__assert_fail@plt+0xabf8>
   1c2a4:	cmp	r2, #1
   1c2a8:	add	r1, sp, #4
   1c2ac:	blt	1c1e8 <__assert_fail@plt+0xaa88>
   1c2b0:	ldr	r1, [r4, #80]	; 0x50
   1c2b4:	cmp	r1, #1
   1c2b8:	add	r1, sp, #4
   1c2bc:	blt	1c1e8 <__assert_fail@plt+0xaa88>
   1c2c0:	ldm	r4, {r1, r3}
   1c2c4:	mov	lr, r5
   1c2c8:	ldr	r5, [r4, #24]
   1c2cc:	cmp	r2, #2
   1c2d0:	add	r5, r6, r5
   1c2d4:	ldrb	r1, [r1, r5]
   1c2d8:	mov	r5, lr
   1c2dc:	ldrb	r0, [r0, r1]
   1c2e0:	add	r1, sp, #4
   1c2e4:	strb	r0, [r3, r6]
   1c2e8:	strb	r0, [sp, #4]
   1c2ec:	blt	1c1e8 <__assert_fail@plt+0xaa88>
   1c2f0:	ldr	r0, [r4, #80]	; 0x50
   1c2f4:	add	r1, sp, #4
   1c2f8:	cmp	r0, #2
   1c2fc:	blt	1c1e8 <__assert_fail@plt+0xaa88>
   1c300:	mov	r0, #1
   1c304:	ldm	r4, {r1, ip}
   1c308:	ldr	r5, [r4, #24]
   1c30c:	ldr	r3, [r4, #64]	; 0x40
   1c310:	add	r1, r1, r5
   1c314:	add	r1, r1, r6
   1c318:	ldrb	r1, [r1, r0]
   1c31c:	ldrb	r1, [r3, r1]
   1c320:	add	r3, ip, r6
   1c324:	strb	r1, [r3, r0]
   1c328:	add	r3, sp, #4
   1c32c:	strb	r1, [r3, r0]
   1c330:	add	r0, r0, #1
   1c334:	cmp	r0, r2
   1c338:	bge	1c348 <__assert_fail@plt+0xabe8>
   1c33c:	ldr	r1, [r4, #80]	; 0x50
   1c340:	cmp	r0, r1
   1c344:	blt	1c304 <__assert_fail@plt+0xaba4>
   1c348:	add	r1, sp, #4
   1c34c:	mov	r5, lr
   1c350:	b	1c1e8 <__assert_fail@plt+0xaa88>
   1c354:	mov	r1, r6
   1c358:	str	r1, [r4, #28]
   1c35c:	str	r1, [r4, #32]
   1c360:	sub	sp, fp, #28
   1c364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c368:	stm	r8, {r9, sl}
   1c36c:	mov	r1, r6
   1c370:	str	r1, [r4, #28]
   1c374:	str	r1, [r4, #32]
   1c378:	sub	sp, fp, #28
   1c37c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c384:	add	fp, sp, #28
   1c388:	sub	sp, sp, #28
   1c38c:	ldr	r8, [r1]
   1c390:	mov	r7, r0
   1c394:	ldr	r6, [fp, #12]
   1c398:	mov	r5, r2
   1c39c:	str	r1, [sp, #20]
   1c3a0:	str	r3, [sp, #24]
   1c3a4:	ldr	r0, [r8, #84]	; 0x54
   1c3a8:	str	r6, [sp, #4]
   1c3ac:	str	r0, [sp, #16]
   1c3b0:	ldr	r0, [fp, #8]
   1c3b4:	str	r0, [sp]
   1c3b8:	mov	r0, r7
   1c3bc:	bl	1cf58 <__assert_fail@plt+0xb7f8>
   1c3c0:	mov	r4, r0
   1c3c4:	cmp	r0, #0
   1c3c8:	bne	1c3d8 <__assert_fail@plt+0xac78>
   1c3cc:	ldr	r0, [r6]
   1c3d0:	cmp	r0, #0
   1c3d4:	bne	1c6fc <__assert_fail@plt+0xaf9c>
   1c3d8:	ldrb	r0, [r5, #4]
   1c3dc:	cmp	r0, #10
   1c3e0:	movne	r0, r4
   1c3e4:	subne	sp, fp, #28
   1c3e8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3ec:	ldr	r0, [sp, #24]
   1c3f0:	mov	r9, #0
   1c3f4:	orr	sl, r0, #8388608	; 0x800000
   1c3f8:	ldr	r0, [fp, #8]
   1c3fc:	str	sl, [sp, #12]
   1c400:	cmp	r0, #0
   1c404:	bne	1c4a8 <__assert_fail@plt+0xad48>
   1c408:	b	1c560 <__assert_fail@plt+0xae00>
   1c40c:	cmp	r0, #9
   1c410:	mov	r6, #0
   1c414:	beq	1c4d8 <__assert_fail@plt+0xad78>
   1c418:	ldr	r0, [sp, #16]
   1c41c:	ldr	sl, [r8, #84]	; 0x54
   1c420:	ldr	r1, [sp, #20]
   1c424:	ldr	r3, [sp, #24]
   1c428:	mov	r2, r5
   1c42c:	str	r0, [r8, #84]	; 0x54
   1c430:	ldr	r0, [fp, #8]
   1c434:	str	r0, [sp]
   1c438:	ldr	r0, [fp, #12]
   1c43c:	str	r0, [sp, #4]
   1c440:	mov	r0, r7
   1c444:	bl	1cf58 <__assert_fail@plt+0xb7f8>
   1c448:	mov	r6, r0
   1c44c:	cmp	r0, #0
   1c450:	bne	1c464 <__assert_fail@plt+0xad04>
   1c454:	ldr	r0, [fp, #12]
   1c458:	ldr	r0, [r0]
   1c45c:	cmp	r0, #0
   1c460:	bne	1c64c <__assert_fail@plt+0xaeec>
   1c464:	ldr	r0, [r8, #84]	; 0x54
   1c468:	orr	r0, r0, sl
   1c46c:	ldr	sl, [sp, #12]
   1c470:	str	r0, [r8, #84]	; 0x54
   1c474:	ldr	r1, [r8, #64]	; 0x40
   1c478:	cmp	r1, #31
   1c47c:	bne	1c4e4 <__assert_fail@plt+0xad84>
   1c480:	mov	r0, #996	; 0x3e4
   1c484:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1c488:	cmp	r0, #0
   1c48c:	beq	1c6f0 <__assert_fail@plt+0xaf90>
   1c490:	ldr	r1, [r8, #56]	; 0x38
   1c494:	str	r1, [r0]
   1c498:	mov	r1, #0
   1c49c:	str	r1, [r8, #64]	; 0x40
   1c4a0:	str	r0, [r8, #56]	; 0x38
   1c4a4:	b	1c4e8 <__assert_fail@plt+0xad88>
   1c4a8:	mov	r0, r5
   1c4ac:	mov	r1, r7
   1c4b0:	mov	r2, sl
   1c4b4:	bl	1c708 <__assert_fail@plt+0xafa8>
   1c4b8:	ldr	r1, [r7, #40]	; 0x28
   1c4bc:	mov	r6, #0
   1c4c0:	add	r0, r1, r0
   1c4c4:	str	r0, [r7, #40]	; 0x28
   1c4c8:	ldrb	r0, [r5, #4]
   1c4cc:	orr	r1, r0, #8
   1c4d0:	cmp	r1, #10
   1c4d4:	bne	1c40c <__assert_fail@plt+0xacac>
   1c4d8:	ldr	r1, [r8, #64]	; 0x40
   1c4dc:	cmp	r1, #31
   1c4e0:	beq	1c480 <__assert_fail@plt+0xad20>
   1c4e4:	ldr	r0, [r8, #56]	; 0x38
   1c4e8:	add	r2, r1, #1
   1c4ec:	add	r0, r0, r1, lsl #5
   1c4f0:	mov	r1, #10
   1c4f4:	cmp	r4, #0
   1c4f8:	str	r2, [r8, #64]	; 0x40
   1c4fc:	str	r9, [r0, #4]!
   1c500:	stmib	r0, {r4, r6, r9}
   1c504:	str	r9, [r0, #16]
   1c508:	str	r9, [r0, #20]
   1c50c:	str	r1, [r0, #24]
   1c510:	mvn	r1, #0
   1c514:	str	r1, [r0, #28]
   1c518:	strne	r0, [r4]
   1c51c:	cmp	r6, #0
   1c520:	mov	r4, r0
   1c524:	strne	r0, [r6]
   1c528:	ldrb	r1, [r5, #4]
   1c52c:	cmp	r1, #10
   1c530:	beq	1c4a8 <__assert_fail@plt+0xad48>
   1c534:	b	1c644 <__assert_fail@plt+0xaee4>
   1c538:	mov	r0, #996	; 0x3e4
   1c53c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1c540:	cmp	r0, #0
   1c544:	beq	1c6f0 <__assert_fail@plt+0xaf90>
   1c548:	ldr	r1, [r8, #56]	; 0x38
   1c54c:	str	r1, [r0]
   1c550:	mov	r1, #0
   1c554:	str	r1, [r8, #64]	; 0x40
   1c558:	str	r0, [r8, #56]	; 0x38
   1c55c:	b	1c5f8 <__assert_fail@plt+0xae98>
   1c560:	mov	r0, r5
   1c564:	mov	r1, r7
   1c568:	mov	r2, sl
   1c56c:	bl	1c708 <__assert_fail@plt+0xafa8>
   1c570:	ldr	r1, [r7, #40]	; 0x28
   1c574:	mov	r6, #0
   1c578:	add	r0, r1, r0
   1c57c:	str	r0, [r7, #40]	; 0x28
   1c580:	ldrb	r0, [r5, #4]
   1c584:	orr	r0, r0, #8
   1c588:	cmp	r0, #10
   1c58c:	beq	1c5e8 <__assert_fail@plt+0xae88>
   1c590:	ldr	r0, [sp, #16]
   1c594:	ldr	sl, [r8, #84]	; 0x54
   1c598:	ldr	r1, [sp, #20]
   1c59c:	ldr	r3, [sp, #24]
   1c5a0:	mov	r2, r5
   1c5a4:	str	r0, [r8, #84]	; 0x54
   1c5a8:	ldr	r0, [fp, #12]
   1c5ac:	str	r9, [sp]
   1c5b0:	str	r0, [sp, #4]
   1c5b4:	mov	r0, r7
   1c5b8:	bl	1cf58 <__assert_fail@plt+0xb7f8>
   1c5bc:	mov	r6, r0
   1c5c0:	cmp	r0, #0
   1c5c4:	bne	1c5d8 <__assert_fail@plt+0xae78>
   1c5c8:	ldr	r0, [fp, #12]
   1c5cc:	ldr	r0, [r0]
   1c5d0:	cmp	r0, #0
   1c5d4:	bne	1c64c <__assert_fail@plt+0xaeec>
   1c5d8:	ldr	r0, [r8, #84]	; 0x54
   1c5dc:	orr	r0, r0, sl
   1c5e0:	ldr	sl, [sp, #12]
   1c5e4:	str	r0, [r8, #84]	; 0x54
   1c5e8:	ldr	r1, [r8, #64]	; 0x40
   1c5ec:	cmp	r1, #31
   1c5f0:	beq	1c538 <__assert_fail@plt+0xadd8>
   1c5f4:	ldr	r0, [r8, #56]	; 0x38
   1c5f8:	add	r2, r1, #1
   1c5fc:	add	r0, r0, r1, lsl #5
   1c600:	mov	r1, #10
   1c604:	cmp	r4, #0
   1c608:	str	r2, [r8, #64]	; 0x40
   1c60c:	str	r9, [r0, #4]!
   1c610:	stmib	r0, {r4, r6, r9}
   1c614:	str	r9, [r0, #16]
   1c618:	str	r9, [r0, #20]
   1c61c:	str	r1, [r0, #24]
   1c620:	mvn	r1, #0
   1c624:	str	r1, [r0, #28]
   1c628:	strne	r0, [r4]
   1c62c:	cmp	r6, #0
   1c630:	mov	r4, r0
   1c634:	strne	r0, [r6]
   1c638:	ldrb	r1, [r5, #4]
   1c63c:	cmp	r1, #10
   1c640:	beq	1c560 <__assert_fail@plt+0xae00>
   1c644:	sub	sp, fp, #28
   1c648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c64c:	cmp	r4, #0
   1c650:	beq	1c6fc <__assert_fail@plt+0xaf9c>
   1c654:	movw	r5, #255	; 0xff
   1c658:	movt	r5, #4
   1c65c:	mov	r6, r4
   1c660:	ldr	r4, [r4, #4]
   1c664:	cmp	r4, #0
   1c668:	bne	1c65c <__assert_fail@plt+0xaefc>
   1c66c:	ldr	r4, [r6, #8]
   1c670:	cmp	r4, #0
   1c674:	bne	1c65c <__assert_fail@plt+0xaefc>
   1c678:	ldr	r0, [r6, #24]
   1c67c:	and	r0, r0, r5
   1c680:	cmp	r0, #3
   1c684:	beq	1c6bc <__assert_fail@plt+0xaf5c>
   1c688:	cmp	r0, #6
   1c68c:	bne	1c6c4 <__assert_fail@plt+0xaf64>
   1c690:	ldr	r4, [r6, #20]
   1c694:	ldr	r0, [r4]
   1c698:	bl	14538 <__assert_fail@plt+0x2dd8>
   1c69c:	ldr	r0, [r4, #4]
   1c6a0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1c6a4:	ldr	r0, [r4, #8]
   1c6a8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1c6ac:	ldr	r0, [r4, #12]
   1c6b0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1c6b4:	mov	r0, r4
   1c6b8:	b	1c6c0 <__assert_fail@plt+0xaf60>
   1c6bc:	ldr	r0, [r6, #20]
   1c6c0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1c6c4:	ldr	r0, [r6]
   1c6c8:	cmp	r0, #0
   1c6cc:	beq	1c6fc <__assert_fail@plt+0xaf9c>
   1c6d0:	ldr	r4, [r0, #8]
   1c6d4:	cmp	r4, r6
   1c6d8:	mov	r6, r0
   1c6dc:	beq	1c678 <__assert_fail@plt+0xaf18>
   1c6e0:	cmp	r4, #0
   1c6e4:	mov	r6, r0
   1c6e8:	beq	1c678 <__assert_fail@plt+0xaf18>
   1c6ec:	b	1c65c <__assert_fail@plt+0xaefc>
   1c6f0:	ldr	r1, [fp, #12]
   1c6f4:	mov	r0, #12
   1c6f8:	str	r0, [r1]
   1c6fc:	mov	r0, #0
   1c700:	sub	sp, fp, #28
   1c704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c70c:	add	fp, sp, #24
   1c710:	sub	sp, sp, #8
   1c714:	mov	r9, r0
   1c718:	mov	r7, r1
   1c71c:	ldr	r0, [r1, #40]	; 0x28
   1c720:	ldr	r1, [r1, #56]	; 0x38
   1c724:	cmp	r1, r0
   1c728:	ble	1c810 <__assert_fail@plt+0xb0b0>
   1c72c:	ldr	r1, [r7, #4]
   1c730:	mov	r5, r9
   1c734:	mov	r8, r2
   1c738:	ldrb	r6, [r1, r0]
   1c73c:	strb	r6, [r5], #4
   1c740:	ldr	r0, [r5]
   1c744:	bic	r1, r0, #6291456	; 0x600000
   1c748:	str	r1, [r5]
   1c74c:	ldr	r3, [r7, #80]	; 0x50
   1c750:	cmp	r3, #2
   1c754:	blt	1c778 <__assert_fail@plt+0xb018>
   1c758:	ldr	r2, [r7, #28]
   1c75c:	ldr	r1, [r7, #40]	; 0x28
   1c760:	cmp	r1, r2
   1c764:	beq	1c778 <__assert_fail@plt+0xb018>
   1c768:	ldr	r2, [r7, #8]
   1c76c:	ldr	r1, [r2, r1, lsl #2]
   1c770:	cmn	r1, #1
   1c774:	beq	1cc54 <__assert_fail@plt+0xb4f4>
   1c778:	movw	r1, #65280	; 0xff00
   1c77c:	cmp	r6, #92	; 0x5c
   1c780:	movt	r1, #65439	; 0xff9f
   1c784:	bne	1c828 <__assert_fail@plt+0xb0c8>
   1c788:	ldr	r6, [r7, #40]	; 0x28
   1c78c:	ldr	r4, [r7, #48]	; 0x30
   1c790:	add	r2, r6, #1
   1c794:	cmp	r2, r4
   1c798:	bge	1c87c <__assert_fail@plt+0xb11c>
   1c79c:	ldrb	r4, [r7, #75]	; 0x4b
   1c7a0:	cmp	r4, #0
   1c7a4:	bne	1cee8 <__assert_fail@plt+0xb788>
   1c7a8:	ldr	r3, [r7, #4]
   1c7ac:	ldrb	r6, [r3, r2]
   1c7b0:	and	r0, r0, r1
   1c7b4:	strb	r6, [r9]
   1c7b8:	orr	r4, r0, #1
   1c7bc:	str	r4, [r9, #4]
   1c7c0:	ldr	r0, [r7, #80]	; 0x50
   1c7c4:	cmp	r0, #2
   1c7c8:	blt	1caa0 <__assert_fail@plt+0xb340>
   1c7cc:	ldr	r0, [r7, #8]
   1c7d0:	ldr	r1, [r7, #40]	; 0x28
   1c7d4:	add	r0, r0, r1, lsl #2
   1c7d8:	ldr	r4, [r0, #4]
   1c7dc:	mov	r0, r4
   1c7e0:	bl	1164c <iswalnum@plt>
   1c7e4:	sub	r1, r4, #95	; 0x5f
   1c7e8:	cmp	r0, #0
   1c7ec:	clz	r1, r1
   1c7f0:	movwne	r0, #1
   1c7f4:	lsr	r1, r1, #5
   1c7f8:	orr	r0, r1, r0
   1c7fc:	ldr	r1, [r5]
   1c800:	bic	r1, r1, #4194304	; 0x400000
   1c804:	orr	r0, r1, r0, lsl #22
   1c808:	uxtb	r1, r6
   1c80c:	b	1cac4 <__assert_fail@plt+0xb364>
   1c810:	mov	r0, #2
   1c814:	mov	r4, #0
   1c818:	strb	r0, [r9, #4]
   1c81c:	mov	r0, r4
   1c820:	sub	sp, fp, #24
   1c824:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c828:	and	r0, r0, r1
   1c82c:	orr	r4, r0, #1
   1c830:	str	r4, [r5]
   1c834:	ldr	r0, [r7, #80]	; 0x50
   1c838:	cmp	r0, #2
   1c83c:	blt	1c888 <__assert_fail@plt+0xb128>
   1c840:	ldr	r0, [r7, #8]
   1c844:	ldr	r1, [r7, #40]	; 0x28
   1c848:	ldr	r4, [r0, r1, lsl #2]
   1c84c:	mov	r0, r4
   1c850:	bl	1164c <iswalnum@plt>
   1c854:	sub	r1, r4, #95	; 0x5f
   1c858:	cmp	r0, #0
   1c85c:	clz	r1, r1
   1c860:	movwne	r0, #1
   1c864:	lsr	r1, r1, #5
   1c868:	orr	r0, r1, r0
   1c86c:	ldr	r1, [r5]
   1c870:	bic	r1, r1, #4194304	; 0x400000
   1c874:	orr	r0, r1, r0, lsl #22
   1c878:	b	1c8a8 <__assert_fail@plt+0xb148>
   1c87c:	and	r0, r0, r1
   1c880:	orr	r0, r0, #36	; 0x24
   1c884:	b	1cc68 <__assert_fail@plt+0xb508>
   1c888:	bl	11610 <__ctype_b_loc@plt>
   1c88c:	ldr	r0, [r0]
   1c890:	cmp	r6, #95	; 0x5f
   1c894:	add	r0, r0, r6, lsl #1
   1c898:	ldrh	r0, [r0]
   1c89c:	ubfx	r0, r0, #3, #1
   1c8a0:	movweq	r0, #1
   1c8a4:	orr	r0, r4, r0, lsl #22
   1c8a8:	sub	r1, r6, #10
   1c8ac:	mov	r4, #1
   1c8b0:	str	r0, [r5]
   1c8b4:	cmp	r1, #115	; 0x73
   1c8b8:	bhi	1cedc <__assert_fail@plt+0xb77c>
   1c8bc:	add	r2, pc, #0
   1c8c0:	ldr	pc, [r2, r1, lsl #2]
   1c8c4:	muleq	r1, r4, sl
   1c8c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8cc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8d0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8d4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8d8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8dc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8e0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8e4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8e8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8ec:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8f0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8f4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8f8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8fc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c900:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c904:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c908:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c90c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c910:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c914:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c918:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c91c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c920:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c924:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c928:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c92c:	andeq	ip, r1, ip, ror ip
   1c930:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c934:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c938:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c93c:	ldrdeq	ip, [r1], -r4
   1c940:	andeq	ip, r1, r0, ror #25
   1c944:	andeq	ip, r1, ip, ror #25
   1c948:	strdeq	ip, [r1], -r4
   1c94c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c950:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c954:	andeq	ip, r1, r4, lsl #26
   1c958:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c95c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c960:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c964:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c968:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c96c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c970:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c974:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c978:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c97c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c980:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c984:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c988:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c98c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c990:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c994:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c998:	andeq	ip, r1, ip, lsl #26
   1c99c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9a0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9a4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9a8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9ac:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9b0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9b4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9b8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9bc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9c0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9c4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9cc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9d0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9d4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9d8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9dc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9e0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9e4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9e8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9ec:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9f0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9f4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9f8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9fc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca00:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca04:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca08:	andeq	ip, r1, ip, lsl sp
   1ca0c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca10:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca14:	andeq	ip, r1, r4, lsr #26
   1ca18:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca1c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca20:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca24:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca28:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca2c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca30:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca34:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca38:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca3c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca40:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca44:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca48:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca4c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca50:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca54:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca58:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca5c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca60:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca64:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca68:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca6c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca70:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca74:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca78:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca7c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca80:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca84:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca88:	andeq	ip, r1, r4, asr sp
   1ca8c:	andeq	ip, r1, r4, ror #26
   1ca90:	andeq	ip, r1, r8, ror sp
   1ca94:	tst	r8, #2048	; 0x800
   1ca98:	bne	1cd70 <__assert_fail@plt+0xb610>
   1ca9c:	b	1cedc <__assert_fail@plt+0xb77c>
   1caa0:	bl	11610 <__ctype_b_loc@plt>
   1caa4:	ldr	r0, [r0]
   1caa8:	uxtb	r1, r6
   1caac:	cmp	r1, #95	; 0x5f
   1cab0:	add	r0, r0, r1, lsl #1
   1cab4:	ldrh	r0, [r0]
   1cab8:	ubfx	r0, r0, #3, #1
   1cabc:	movweq	r0, #1
   1cac0:	orr	r0, r4, r0, lsl #22
   1cac4:	mvn	r2, #38	; 0x26
   1cac8:	mov	r4, #2
   1cacc:	str	r0, [r5]
   1cad0:	uxtab	r2, r2, r6
   1cad4:	cmp	r2, #86	; 0x56
   1cad8:	bhi	1cedc <__assert_fail@plt+0xb77c>
   1cadc:	add	r3, pc, #0
   1cae0:	ldr	pc, [r3, r2, lsl #2]
   1cae4:			; <UNDEFINED> instruction: 0x0001cdb4
   1cae8:	andeq	ip, r1, r4, asr #27
   1caec:	ldrdeq	ip, [r1], -r4
   1caf0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1caf4:	andeq	ip, r1, r4, ror #27
   1caf8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cafc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb00:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb04:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb08:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb0c:	andeq	ip, r1, r0, asr #24
   1cb10:	andeq	ip, r1, r0, asr #24
   1cb14:	andeq	ip, r1, r0, asr #24
   1cb18:	andeq	ip, r1, r0, asr #24
   1cb1c:	andeq	ip, r1, r0, asr #24
   1cb20:	andeq	ip, r1, r0, asr #24
   1cb24:	andeq	ip, r1, r0, asr #24
   1cb28:	andeq	ip, r1, r0, asr #24
   1cb2c:	andeq	ip, r1, r0, asr #24
   1cb30:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb34:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb38:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb3c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb40:	andeq	ip, r1, ip, lsl #28
   1cb44:	andeq	ip, r1, ip, lsl lr
   1cb48:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb4c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb50:	andeq	ip, r1, r4, lsr lr
   1cb54:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb58:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb5c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb60:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb64:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb68:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb6c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb70:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb74:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb78:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb7c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb80:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb84:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb88:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb8c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb90:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb94:	andeq	ip, r1, r4, asr #28
   1cb98:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cb9c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cba0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cba4:	andeq	ip, r1, r4, asr lr
   1cba8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbac:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbb0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbb4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbb8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbbc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbc0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbc4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbc8:	andeq	ip, r1, r4, ror #28
   1cbcc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbd0:	andeq	ip, r1, r4, ror lr
   1cbd4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbd8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbdc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbe0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbe4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbe8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbec:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbf0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbf4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbf8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbfc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc00:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc04:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc08:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc0c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc10:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc14:	andeq	ip, r1, r4, lsl #29
   1cc18:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc1c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc20:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc24:	muleq	r1, r4, lr
   1cc28:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc2c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc30:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cc34:	andeq	ip, r1, r4, lsr #29
   1cc38:			; <UNDEFINED> instruction: 0x0001ceb8
   1cc3c:	andeq	ip, r1, r4, asr #29
   1cc40:	tst	r8, #16384	; 0x4000
   1cc44:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cc48:	sub	r1, r1, #49	; 0x31
   1cc4c:	mov	r2, #4
   1cc50:	b	1cd3c <__assert_fail@plt+0xb5dc>
   1cc54:	movw	r1, #65280	; 0xff00
   1cc58:	movt	r1, #65439	; 0xff9f
   1cc5c:	and	r0, r0, r1
   1cc60:	orr	r0, r0, #1
   1cc64:	orr	r0, r0, #2097152	; 0x200000
   1cc68:	str	r0, [r5]
   1cc6c:	mov	r4, #1
   1cc70:	mov	r0, r4
   1cc74:	sub	sp, fp, #24
   1cc78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cc7c:	tst	r8, #8
   1cc80:	bne	1cccc <__assert_fail@plt+0xb56c>
   1cc84:	ldr	r1, [r7, #40]	; 0x28
   1cc88:	ldr	r2, [r7, #48]	; 0x30
   1cc8c:	add	r1, r1, #1
   1cc90:	cmp	r1, r2
   1cc94:	beq	1cccc <__assert_fail@plt+0xb56c>
   1cc98:	str	r1, [r7, #40]	; 0x28
   1cc9c:	mov	r0, sp
   1cca0:	mov	r1, r7
   1cca4:	mov	r2, r8
   1cca8:	bl	1c708 <__assert_fail@plt+0xafa8>
   1ccac:	ldr	r0, [r7, #40]	; 0x28
   1ccb0:	sub	r0, r0, #1
   1ccb4:	str	r0, [r7, #40]	; 0x28
   1ccb8:	ldrb	r0, [sp, #4]
   1ccbc:	sub	r0, r0, #9
   1ccc0:	cmp	r0, #1
   1ccc4:	bhi	1cedc <__assert_fail@plt+0xb77c>
   1ccc8:	ldr	r0, [r5]
   1cccc:	mov	r1, #32
   1ccd0:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1ccd4:	tst	r8, #8192	; 0x2000
   1ccd8:	bne	1cdcc <__assert_fail@plt+0xb66c>
   1ccdc:	b	1cedc <__assert_fail@plt+0xb77c>
   1cce0:	tst	r8, #8192	; 0x2000
   1cce4:	bne	1cddc <__assert_fail@plt+0xb67c>
   1cce8:	b	1cedc <__assert_fail@plt+0xb77c>
   1ccec:	mov	r1, #11
   1ccf0:	b	1ced4 <__assert_fail@plt+0xb774>
   1ccf4:	movw	r1, #1026	; 0x402
   1ccf8:	tst	r8, r1
   1ccfc:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cd00:	b	1cdf4 <__assert_fail@plt+0xb694>
   1cd04:	mov	r1, #5
   1cd08:	b	1ced4 <__assert_fail@plt+0xb774>
   1cd0c:	movw	r1, #1026	; 0x402
   1cd10:	tst	r8, r1
   1cd14:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cd18:	b	1ce2c <__assert_fail@plt+0xb6cc>
   1cd1c:	mov	r1, #20
   1cd20:	b	1ced4 <__assert_fail@plt+0xb774>
   1cd24:	movw	r1, #8
   1cd28:	movt	r1, #128	; 0x80
   1cd2c:	tst	r8, r1
   1cd30:	beq	1cd88 <__assert_fail@plt+0xb628>
   1cd34:	mov	r1, #16
   1cd38:	mov	r2, #12
   1cd3c:	bfi	r0, r2, #0, #8
   1cd40:	str	r1, [r9]
   1cd44:	str	r0, [r9, #4]
   1cd48:	mov	r0, r4
   1cd4c:	sub	sp, fp, #24
   1cd50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cd54:	and	r1, r8, #4608	; 0x1200
   1cd58:	cmp	r1, #4608	; 0x1200
   1cd5c:	beq	1ceb0 <__assert_fail@plt+0xb750>
   1cd60:	b	1cedc <__assert_fail@plt+0xb77c>
   1cd64:	and	r1, r8, #33792	; 0x8400
   1cd68:	cmp	r1, #32768	; 0x8000
   1cd6c:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cd70:	mov	r1, #10
   1cd74:	b	1ced4 <__assert_fail@plt+0xb774>
   1cd78:	and	r1, r8, #4608	; 0x1200
   1cd7c:	cmp	r1, #4608	; 0x1200
   1cd80:	beq	1ced0 <__assert_fail@plt+0xb770>
   1cd84:	b	1cedc <__assert_fail@plt+0xb77c>
   1cd88:	ldr	r1, [r7, #40]	; 0x28
   1cd8c:	cmp	r1, #0
   1cd90:	beq	1cd34 <__assert_fail@plt+0xb5d4>
   1cd94:	tst	r8, #2048	; 0x800
   1cd98:	beq	1cedc <__assert_fail@plt+0xb77c>
   1cd9c:	ldr	r2, [r7, #4]
   1cda0:	add	r1, r2, r1
   1cda4:	ldrb	r1, [r1, #-1]
   1cda8:	cmp	r1, #10
   1cdac:	beq	1cd34 <__assert_fail@plt+0xb5d4>
   1cdb0:	b	1cedc <__assert_fail@plt+0xb77c>
   1cdb4:	tst	r8, #524288	; 0x80000
   1cdb8:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cdbc:	mov	r1, #128	; 0x80
   1cdc0:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1cdc4:	tst	r8, #8192	; 0x2000
   1cdc8:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cdcc:	mov	r1, #8
   1cdd0:	b	1ced4 <__assert_fail@plt+0xb774>
   1cdd4:	tst	r8, #8192	; 0x2000
   1cdd8:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cddc:	mov	r1, #9
   1cde0:	b	1ced4 <__assert_fail@plt+0xb774>
   1cde4:	movw	r1, #1026	; 0x402
   1cde8:	and	r1, r8, r1
   1cdec:	cmp	r1, #2
   1cdf0:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cdf4:	mov	r1, #18
   1cdf8:	b	1ced4 <__assert_fail@plt+0xb774>
   1cdfc:	tst	r8, #524288	; 0x80000
   1ce00:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce04:	mov	r1, #6
   1ce08:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1ce0c:	tst	r8, #524288	; 0x80000
   1ce10:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce14:	mov	r1, #9
   1ce18:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1ce1c:	movw	r1, #1026	; 0x402
   1ce20:	and	r1, r8, r1
   1ce24:	cmp	r1, #2
   1ce28:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce2c:	mov	r1, #19
   1ce30:	b	1ced4 <__assert_fail@plt+0xb774>
   1ce34:	tst	r8, #524288	; 0x80000
   1ce38:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce3c:	mov	r1, #512	; 0x200
   1ce40:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1ce44:	tst	r8, #524288	; 0x80000
   1ce48:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce4c:	mov	r1, #35	; 0x23
   1ce50:	b	1ced4 <__assert_fail@plt+0xb774>
   1ce54:	tst	r8, #524288	; 0x80000
   1ce58:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce5c:	mov	r1, #33	; 0x21
   1ce60:	b	1ced4 <__assert_fail@plt+0xb774>
   1ce64:	tst	r8, #524288	; 0x80000
   1ce68:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce6c:	mov	r1, #64	; 0x40
   1ce70:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1ce74:	tst	r8, #524288	; 0x80000
   1ce78:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce7c:	mov	r1, #256	; 0x100
   1ce80:	b	1cd38 <__assert_fail@plt+0xb5d8>
   1ce84:	tst	r8, #524288	; 0x80000
   1ce88:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce8c:	mov	r1, #34	; 0x22
   1ce90:	b	1ced4 <__assert_fail@plt+0xb774>
   1ce94:	tst	r8, #524288	; 0x80000
   1ce98:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ce9c:	mov	r1, #32
   1cea0:	b	1ced4 <__assert_fail@plt+0xb774>
   1cea4:	and	r1, r8, #4608	; 0x1200
   1cea8:	cmp	r1, #512	; 0x200
   1ceac:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ceb0:	mov	r1, #23
   1ceb4:	b	1ced4 <__assert_fail@plt+0xb774>
   1ceb8:	tst	r8, #33792	; 0x8400
   1cebc:	bne	1cedc <__assert_fail@plt+0xb77c>
   1cec0:	b	1cd70 <__assert_fail@plt+0xb610>
   1cec4:	and	r1, r8, #4608	; 0x1200
   1cec8:	cmp	r1, #512	; 0x200
   1cecc:	bne	1cedc <__assert_fail@plt+0xb77c>
   1ced0:	mov	r1, #24
   1ced4:	bfi	r0, r1, #0, #8
   1ced8:	str	r0, [r5]
   1cedc:	mov	r0, r4
   1cee0:	sub	sp, fp, #24
   1cee4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cee8:	cmp	r3, #2
   1ceec:	blt	1cf1c <__assert_fail@plt+0xb7bc>
   1cef0:	ldr	r3, [r7, #8]
   1cef4:	ldr	r4, [r3, r2, lsl #2]
   1cef8:	cmn	r4, #1
   1cefc:	beq	1c7a8 <__assert_fail@plt+0xb048>
   1cf00:	ldr	r4, [r7, #28]
   1cf04:	add	r6, r6, #2
   1cf08:	cmp	r4, r6
   1cf0c:	beq	1cf1c <__assert_fail@plt+0xb7bc>
   1cf10:	ldr	r3, [r3, r6, lsl #2]
   1cf14:	cmn	r3, #1
   1cf18:	beq	1c7a8 <__assert_fail@plt+0xb048>
   1cf1c:	ldrb	r3, [r7, #76]	; 0x4c
   1cf20:	mov	r6, r2
   1cf24:	ldr	r4, [r7, #24]
   1cf28:	ldr	ip, [r7]
   1cf2c:	cmp	r3, #0
   1cf30:	ldrne	r6, [r7, #12]
   1cf34:	ldrne	r6, [r6, r2, lsl #2]
   1cf38:	cmp	r3, #0
   1cf3c:	add	r6, r4, r6
   1cf40:	add	r6, ip, r6
   1cf44:	ldrsb	r6, [r6]
   1cf48:	beq	1c7b0 <__assert_fail@plt+0xb050>
   1cf4c:	cmn	r6, #1
   1cf50:	ble	1c7a8 <__assert_fail@plt+0xb048>
   1cf54:	b	1c7b0 <__assert_fail@plt+0xb050>
   1cf58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf5c:	add	fp, sp, #28
   1cf60:	sub	sp, sp, #12
   1cf64:	mov	r4, r1
   1cf68:	ldr	r8, [r1]
   1cf6c:	ldr	r1, [fp, #8]
   1cf70:	ldr	r5, [fp, #12]
   1cf74:	mov	r7, r2
   1cf78:	str	r0, [sp, #8]
   1cf7c:	mov	sl, r3
   1cf80:	mov	r9, r1
   1cf84:	str	r1, [sp]
   1cf88:	mov	r1, r4
   1cf8c:	str	r5, [sp, #4]
   1cf90:	bl	1d3c0 <__assert_fail@plt+0xbc60>
   1cf94:	mov	r3, r5
   1cf98:	mov	r5, r0
   1cf9c:	mov	r0, #0
   1cfa0:	cmp	r5, #0
   1cfa4:	bne	1cfb4 <__assert_fail@plt+0xb854>
   1cfa8:	ldr	r1, [r3]
   1cfac:	cmp	r1, #0
   1cfb0:	bne	1d1b4 <__assert_fail@plt+0xba54>
   1cfb4:	cmp	r9, #0
   1cfb8:	bne	1d0cc <__assert_fail@plt+0xb96c>
   1cfbc:	mov	r9, #0
   1cfc0:	ldrb	r0, [r7, #4]
   1cfc4:	orr	r0, r0, #8
   1cfc8:	cmp	r0, #10
   1cfcc:	bne	1cfec <__assert_fail@plt+0xb88c>
   1cfd0:	b	1d1b0 <__assert_fail@plt+0xba50>
   1cfd4:	cmp	r5, #0
   1cfd8:	moveq	r5, r6
   1cfdc:	ldrb	r0, [r7, #4]
   1cfe0:	orr	r0, r0, #8
   1cfe4:	cmp	r0, #10
   1cfe8:	beq	1d1b0 <__assert_fail@plt+0xba50>
   1cfec:	ldr	r0, [sp, #8]
   1cff0:	str	r3, [sp, #4]
   1cff4:	mov	r1, r4
   1cff8:	mov	r2, r7
   1cffc:	mov	r3, sl
   1d000:	str	r9, [sp]
   1d004:	bl	1d3c0 <__assert_fail@plt+0xbc60>
   1d008:	ldr	r3, [fp, #12]
   1d00c:	cmp	r5, #0
   1d010:	mov	r2, r5
   1d014:	mov	r6, r0
   1d018:	movwne	r2, #1
   1d01c:	cmp	r0, #0
   1d020:	bne	1d030 <__assert_fail@plt+0xb8d0>
   1d024:	ldr	r1, [r3]
   1d028:	cmp	r1, #0
   1d02c:	bne	1d1bc <__assert_fail@plt+0xba5c>
   1d030:	cmp	r5, #0
   1d034:	cmpne	r6, #0
   1d038:	beq	1cfd4 <__assert_fail@plt+0xb874>
   1d03c:	ldr	r1, [r8, #64]	; 0x40
   1d040:	cmp	r1, #31
   1d044:	beq	1d098 <__assert_fail@plt+0xb938>
   1d048:	ldr	r0, [r8, #56]	; 0x38
   1d04c:	add	r2, r1, #1
   1d050:	add	r0, r0, r1, lsl #5
   1d054:	mov	r1, #16
   1d058:	str	r2, [r8, #64]	; 0x40
   1d05c:	str	r9, [r0, #4]!
   1d060:	stmib	r0, {r5, r6, r9}
   1d064:	str	r9, [r0, #16]
   1d068:	str	r9, [r0, #20]
   1d06c:	str	r1, [r0, #24]
   1d070:	mvn	r1, #0
   1d074:	str	r1, [r0, #28]
   1d078:	str	r0, [r5]
   1d07c:	str	r0, [r6]
   1d080:	mov	r5, r0
   1d084:	ldrb	r0, [r7, #4]
   1d088:	orr	r0, r0, #8
   1d08c:	cmp	r0, #10
   1d090:	bne	1cfec <__assert_fail@plt+0xb88c>
   1d094:	b	1d1b0 <__assert_fail@plt+0xba50>
   1d098:	mov	r0, #996	; 0x3e4
   1d09c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1d0a0:	cmp	r0, #0
   1d0a4:	beq	1d268 <__assert_fail@plt+0xbb08>
   1d0a8:	ldr	r1, [r8, #56]	; 0x38
   1d0ac:	ldr	r3, [fp, #12]
   1d0b0:	str	r1, [r0]
   1d0b4:	mov	r1, #0
   1d0b8:	str	r1, [r8, #64]	; 0x40
   1d0bc:	str	r0, [r8, #56]	; 0x38
   1d0c0:	b	1d04c <__assert_fail@plt+0xb8ec>
   1d0c4:	cmp	r5, #0
   1d0c8:	moveq	r5, r6
   1d0cc:	ldrb	r0, [r7, #4]
   1d0d0:	orr	r1, r0, #8
   1d0d4:	cmp	r1, #10
   1d0d8:	cmpne	r0, #9
   1d0dc:	beq	1d1b0 <__assert_fail@plt+0xba50>
   1d0e0:	ldr	r0, [sp, #8]
   1d0e4:	str	r3, [sp, #4]
   1d0e8:	mov	r1, r4
   1d0ec:	mov	r2, r7
   1d0f0:	mov	r3, sl
   1d0f4:	str	r9, [sp]
   1d0f8:	bl	1d3c0 <__assert_fail@plt+0xbc60>
   1d0fc:	ldr	r3, [fp, #12]
   1d100:	cmp	r5, #0
   1d104:	mov	r2, r5
   1d108:	mov	r6, r0
   1d10c:	movwne	r2, #1
   1d110:	cmp	r0, #0
   1d114:	bne	1d124 <__assert_fail@plt+0xb9c4>
   1d118:	ldr	r1, [r3]
   1d11c:	cmp	r1, #0
   1d120:	bne	1d1bc <__assert_fail@plt+0xba5c>
   1d124:	cmp	r5, #0
   1d128:	cmpne	r6, #0
   1d12c:	beq	1d0c4 <__assert_fail@plt+0xb964>
   1d130:	ldr	r1, [r8, #64]	; 0x40
   1d134:	cmp	r1, #31
   1d138:	beq	1d184 <__assert_fail@plt+0xba24>
   1d13c:	ldr	r0, [r8, #56]	; 0x38
   1d140:	add	r2, r1, #1
   1d144:	add	r0, r0, r1, lsl #5
   1d148:	mov	r1, #0
   1d14c:	str	r2, [r8, #64]	; 0x40
   1d150:	str	r1, [r0, #4]!
   1d154:	stmib	r0, {r5, r6}
   1d158:	str	r1, [r0, #12]
   1d15c:	str	r1, [r0, #16]
   1d160:	str	r1, [r0, #20]
   1d164:	mov	r1, #16
   1d168:	str	r1, [r0, #24]
   1d16c:	mvn	r1, #0
   1d170:	str	r1, [r0, #28]
   1d174:	str	r0, [r5]
   1d178:	str	r0, [r6]
   1d17c:	mov	r5, r0
   1d180:	b	1d0cc <__assert_fail@plt+0xb96c>
   1d184:	mov	r0, #996	; 0x3e4
   1d188:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1d18c:	cmp	r0, #0
   1d190:	beq	1d268 <__assert_fail@plt+0xbb08>
   1d194:	ldr	r1, [r8, #56]	; 0x38
   1d198:	ldr	r3, [fp, #12]
   1d19c:	str	r1, [r0]
   1d1a0:	mov	r1, #0
   1d1a4:	str	r1, [r8, #64]	; 0x40
   1d1a8:	str	r0, [r8, #56]	; 0x38
   1d1ac:	b	1d140 <__assert_fail@plt+0xb9e0>
   1d1b0:	mov	r0, r5
   1d1b4:	sub	sp, fp, #28
   1d1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1bc:	mov	r0, #0
   1d1c0:	cmp	r2, #0
   1d1c4:	beq	1d1b4 <__assert_fail@plt+0xba54>
   1d1c8:	movw	r6, #255	; 0xff
   1d1cc:	movt	r6, #4
   1d1d0:	mov	r7, r5
   1d1d4:	ldr	r5, [r5, #4]
   1d1d8:	cmp	r5, #0
   1d1dc:	bne	1d1d0 <__assert_fail@plt+0xba70>
   1d1e0:	ldr	r5, [r7, #8]
   1d1e4:	cmp	r5, #0
   1d1e8:	bne	1d1d0 <__assert_fail@plt+0xba70>
   1d1ec:	ldr	r1, [r7, #24]
   1d1f0:	and	r1, r1, r6
   1d1f4:	cmp	r1, #3
   1d1f8:	beq	1d230 <__assert_fail@plt+0xbad0>
   1d1fc:	cmp	r1, #6
   1d200:	bne	1d23c <__assert_fail@plt+0xbadc>
   1d204:	ldr	r4, [r7, #20]
   1d208:	ldr	r0, [r4]
   1d20c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d210:	ldr	r0, [r4, #4]
   1d214:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d218:	ldr	r0, [r4, #8]
   1d21c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d220:	ldr	r0, [r4, #12]
   1d224:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d228:	mov	r0, r4
   1d22c:	b	1d234 <__assert_fail@plt+0xbad4>
   1d230:	ldr	r0, [r7, #20]
   1d234:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d238:	mov	r0, #0
   1d23c:	ldr	r1, [r7]
   1d240:	cmp	r1, #0
   1d244:	beq	1d1b4 <__assert_fail@plt+0xba54>
   1d248:	ldr	r5, [r1, #8]
   1d24c:	cmp	r5, r7
   1d250:	mov	r7, r1
   1d254:	beq	1d1ec <__assert_fail@plt+0xba8c>
   1d258:	cmp	r5, #0
   1d25c:	mov	r7, r1
   1d260:	beq	1d1ec <__assert_fail@plt+0xba8c>
   1d264:	b	1d1d0 <__assert_fail@plt+0xba70>
   1d268:	ldr	r1, [fp, #12]
   1d26c:	movw	r8, #255	; 0xff
   1d270:	movt	r8, #4
   1d274:	mov	r7, r6
   1d278:	ldr	r6, [r6, #4]
   1d27c:	cmp	r6, #0
   1d280:	bne	1d274 <__assert_fail@plt+0xbb14>
   1d284:	ldr	r6, [r7, #8]
   1d288:	cmp	r6, #0
   1d28c:	bne	1d274 <__assert_fail@plt+0xbb14>
   1d290:	ldr	r0, [r7, #24]
   1d294:	and	r0, r0, r8
   1d298:	cmp	r0, #3
   1d29c:	beq	1d2d4 <__assert_fail@plt+0xbb74>
   1d2a0:	cmp	r0, #6
   1d2a4:	bne	1d2e0 <__assert_fail@plt+0xbb80>
   1d2a8:	ldr	r4, [r7, #20]
   1d2ac:	ldr	r0, [r4]
   1d2b0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d2b4:	ldr	r0, [r4, #4]
   1d2b8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d2bc:	ldr	r0, [r4, #8]
   1d2c0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d2c4:	ldr	r0, [r4, #12]
   1d2c8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d2cc:	mov	r0, r4
   1d2d0:	b	1d2d8 <__assert_fail@plt+0xbb78>
   1d2d4:	ldr	r0, [r7, #20]
   1d2d8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d2dc:	ldr	r1, [fp, #12]
   1d2e0:	ldr	r0, [r7]
   1d2e4:	cmp	r0, #0
   1d2e8:	beq	1d30c <__assert_fail@plt+0xbbac>
   1d2ec:	ldr	r6, [r0, #8]
   1d2f0:	cmp	r6, r7
   1d2f4:	mov	r7, r0
   1d2f8:	beq	1d290 <__assert_fail@plt+0xbb30>
   1d2fc:	cmp	r6, #0
   1d300:	mov	r7, r0
   1d304:	beq	1d290 <__assert_fail@plt+0xbb30>
   1d308:	b	1d274 <__assert_fail@plt+0xbb14>
   1d30c:	mov	r6, r5
   1d310:	ldr	r5, [r5, #4]
   1d314:	cmp	r5, #0
   1d318:	bne	1d30c <__assert_fail@plt+0xbbac>
   1d31c:	ldr	r5, [r6, #8]
   1d320:	cmp	r5, #0
   1d324:	bne	1d30c <__assert_fail@plt+0xbbac>
   1d328:	ldr	r0, [r6, #24]
   1d32c:	and	r0, r0, r8
   1d330:	cmp	r0, #3
   1d334:	beq	1d36c <__assert_fail@plt+0xbc0c>
   1d338:	cmp	r0, #6
   1d33c:	bne	1d378 <__assert_fail@plt+0xbc18>
   1d340:	ldr	r4, [r6, #20]
   1d344:	ldr	r0, [r4]
   1d348:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d34c:	ldr	r0, [r4, #4]
   1d350:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d354:	ldr	r0, [r4, #8]
   1d358:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d35c:	ldr	r0, [r4, #12]
   1d360:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d364:	mov	r0, r4
   1d368:	b	1d370 <__assert_fail@plt+0xbc10>
   1d36c:	ldr	r0, [r6, #20]
   1d370:	bl	14538 <__assert_fail@plt+0x2dd8>
   1d374:	ldr	r1, [fp, #12]
   1d378:	ldr	r0, [r6]
   1d37c:	cmp	r0, #0
   1d380:	beq	1d3a4 <__assert_fail@plt+0xbc44>
   1d384:	ldr	r5, [r0, #8]
   1d388:	cmp	r5, r6
   1d38c:	mov	r6, r0
   1d390:	beq	1d328 <__assert_fail@plt+0xbbc8>
   1d394:	cmp	r5, #0
   1d398:	mov	r6, r0
   1d39c:	beq	1d328 <__assert_fail@plt+0xbbc8>
   1d3a0:	b	1d30c <__assert_fail@plt+0xbbac>
   1d3a4:	mov	r0, #12
   1d3a8:	str	r0, [r1]
   1d3ac:	mov	r0, #0
   1d3b0:	sub	sp, fp, #28
   1d3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3b8:	nop	{0}
   1d3bc:	nop	{0}
   1d3c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3c4:	add	fp, sp, #28
   1d3c8:	sub	sp, sp, #148	; 0x94
   1d3cc:	str	r0, [sp, #24]
   1d3d0:	ldr	r0, [r2, #4]
   1d3d4:	mov	r7, r1
   1d3d8:	mov	lr, r2
   1d3dc:	mvn	r1, #0
   1d3e0:	mov	r6, r3
   1d3e4:	mov	sl, #0
   1d3e8:	ldr	r2, [fp, #12]
   1d3ec:	ldr	r8, [r7]
   1d3f0:	uxtab	r1, r1, r0
   1d3f4:	cmp	r1, #35	; 0x23
   1d3f8:	str	r2, [sp, #16]
   1d3fc:	str	lr, [sp, #44]	; 0x2c
   1d400:	bhi	1d52c <__assert_fail@plt+0xbdcc>
   1d404:	add	r2, pc, #0
   1d408:	ldr	pc, [r2, r1, lsl #2]
   1d40c:	strdeq	sp, [r1], -r0
   1d410:	ldrdeq	pc, [r1], -r4
   1d414:	andeq	sp, r1, ip, lsr #10
   1d418:			; <UNDEFINED> instruction: 0x0001d5b0
   1d41c:	andeq	sp, r1, r0, lsr r6
   1d420:	andeq	sp, r1, ip, lsr #10
   1d424:	andeq	sp, r1, ip, lsr #10
   1d428:	muleq	r1, r8, r6
   1d42c:	andeq	sp, r1, ip, lsr r5
   1d430:	ldrdeq	pc, [r1], -r4
   1d434:	andeq	sp, r1, ip, lsr #10
   1d438:	andeq	sp, r1, r8, lsr #14
   1d43c:	andeq	sp, r1, ip, lsr #10
   1d440:	andeq	sp, r1, ip, lsr #10
   1d444:	andeq	sp, r1, ip, lsr #10
   1d448:	andeq	sp, r1, ip, lsr #10
   1d44c:	andeq	sp, r1, ip, lsr #10
   1d450:	andeq	sp, r1, ip, lsr #10
   1d454:	andeq	sp, r1, ip, lsr #10
   1d458:	andeq	sp, r1, r8, asr #19
   1d45c:	andeq	sp, r1, ip, lsr #10
   1d460:	andeq	sp, r1, ip, lsr #10
   1d464:	andeq	sp, r1, r4, lsr #10
   1d468:	andeq	sp, r1, ip, asr #10
   1d46c:	andeq	sp, r1, ip, lsr #10
   1d470:	andeq	sp, r1, ip, lsr #10
   1d474:	andeq	sp, r1, ip, lsr #10
   1d478:	andeq	sp, r1, ip, lsr #10
   1d47c:	andeq	sp, r1, ip, lsr #10
   1d480:	andeq	sp, r1, ip, lsr #10
   1d484:	andeq	sp, r1, ip, lsr #10
   1d488:	muleq	r1, ip, r4
   1d48c:	muleq	r1, ip, r4
   1d490:	andeq	sp, r1, r0, asr #9
   1d494:	andeq	sp, r1, r0, asr #9
   1d498:	andeq	sp, r1, r0, asr #19
   1d49c:	ldr	r1, [sp, #24]
   1d4a0:	mvn	r2, #32
   1d4a4:	movw	r3, #58665	; 0xe529
   1d4a8:	uxtab	r0, r2, r0
   1d4ac:	movw	r2, #59838	; 0xe9be
   1d4b0:	movt	r3, #2
   1d4b4:	clz	r0, r0
   1d4b8:	movt	r2, #2
   1d4bc:	b	1d4e0 <__assert_fail@plt+0xbd80>
   1d4c0:	ldr	r1, [sp, #24]
   1d4c4:	mvn	r2, #34	; 0x22
   1d4c8:	movw	r3, #57459	; 0xe073
   1d4cc:	uxtab	r0, r2, r0
   1d4d0:	movw	r2, #59844	; 0xe9c4
   1d4d4:	movt	r3, #2
   1d4d8:	clz	r0, r0
   1d4dc:	movt	r2, #2
   1d4e0:	lsr	r0, r0, #5
   1d4e4:	ldr	r1, [r1, #64]	; 0x40
   1d4e8:	str	r0, [sp]
   1d4ec:	ldr	r4, [sp, #16]
   1d4f0:	str	r4, [sp, #4]
   1d4f4:	mov	r0, r8
   1d4f8:	bl	1f954 <__assert_fail@plt+0xe1f4>
   1d4fc:	mov	r7, r0
   1d500:	cmp	r0, #0
   1d504:	bne	1d51c <__assert_fail@plt+0xbdbc>
   1d508:	ldr	r0, [r4]
   1d50c:	cmp	r0, #0
   1d510:	ldr	lr, [sp, #44]	; 0x2c
   1d514:	beq	1e4e0 <__assert_fail@plt+0xcd80>
   1d518:	b	1f2d4 <__assert_fail@plt+0xdb74>
   1d51c:	ldr	lr, [sp, #44]	; 0x2c
   1d520:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1d524:	tst	r6, #16777216	; 0x1000000
   1d528:	bne	1d5a8 <__assert_fail@plt+0xbe48>
   1d52c:	tst	r6, #32
   1d530:	bne	1d5a8 <__assert_fail@plt+0xbe48>
   1d534:	tst	r6, #16
   1d538:	bne	1da44 <__assert_fail@plt+0xc2e4>
   1d53c:	tst	r6, #131072	; 0x20000
   1d540:	uxtbeq	r1, r0
   1d544:	cmpeq	r1, #9
   1d548:	beq	1da8c <__assert_fail@plt+0xc32c>
   1d54c:	mov	r1, #1
   1d550:	bfi	r0, r1, #0, #8
   1d554:	str	r0, [lr, #4]
   1d558:	ldr	r1, [r8, #64]	; 0x40
   1d55c:	cmp	r1, #31
   1d560:	beq	1f44c <__assert_fail@plt+0xdcec>
   1d564:	ldr	r0, [r8, #56]	; 0x38
   1d568:	add	r2, r1, #1
   1d56c:	add	r7, r0, r1, lsl #5
   1d570:	mov	r0, #0
   1d574:	str	r2, [r8, #64]	; 0x40
   1d578:	str	r0, [r7, #4]!
   1d57c:	str	r0, [r7, #4]
   1d580:	str	r0, [r7, #8]
   1d584:	ldm	lr, {r1, r2}
   1d588:	str	r0, [r7, #12]
   1d58c:	str	r0, [r7, #16]
   1d590:	mvn	r0, #0
   1d594:	str	r0, [r7, #28]
   1d598:	bic	r0, r2, #786432	; 0xc0000
   1d59c:	str	r1, [r7, #20]
   1d5a0:	str	r0, [r7, #24]
   1d5a4:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1d5a8:	mov	r0, #13
   1d5ac:	b	1e3d4 <__assert_fail@plt+0xcc74>
   1d5b0:	ldr	r0, [lr]
   1d5b4:	ldr	r2, [r8, #84]	; 0x54
   1d5b8:	mov	r1, #1
   1d5bc:	tst	r2, r1, lsl r0
   1d5c0:	beq	1f490 <__assert_fail@plt+0xdd30>
   1d5c4:	lsl	r0, r1, r0
   1d5c8:	ldr	r1, [r8, #64]	; 0x40
   1d5cc:	ldr	r2, [r8, #80]	; 0x50
   1d5d0:	orr	r0, r2, r0
   1d5d4:	cmp	r1, #31
   1d5d8:	str	r0, [r8, #80]	; 0x50
   1d5dc:	beq	1f508 <__assert_fail@plt+0xdda8>
   1d5e0:	ldr	r0, [r8, #56]	; 0x38
   1d5e4:	add	r2, r1, #1
   1d5e8:	add	r7, r0, r1, lsl #5
   1d5ec:	mov	r0, #0
   1d5f0:	str	r2, [r8, #64]	; 0x40
   1d5f4:	str	r0, [r7, #4]!
   1d5f8:	str	r0, [r7, #4]
   1d5fc:	str	r0, [r7, #8]
   1d600:	ldm	lr, {r1, r2}
   1d604:	str	r0, [r7, #12]
   1d608:	str	r0, [r7, #16]
   1d60c:	mvn	r0, #0
   1d610:	str	r0, [r7, #28]
   1d614:	bic	r0, r2, #786432	; 0xc0000
   1d618:	str	r1, [r7, #20]
   1d61c:	str	r0, [r7, #24]
   1d620:	ldr	r0, [r8, #76]	; 0x4c
   1d624:	add	r0, r0, #1
   1d628:	str	r0, [r8, #76]	; 0x4c
   1d62c:	b	1d688 <__assert_fail@plt+0xbf28>
   1d630:	ldr	r1, [r8, #64]	; 0x40
   1d634:	cmp	r1, #31
   1d638:	beq	1f498 <__assert_fail@plt+0xdd38>
   1d63c:	ldr	r0, [r8, #56]	; 0x38
   1d640:	add	r2, r1, #1
   1d644:	add	r7, r0, r1, lsl #5
   1d648:	mov	r0, #0
   1d64c:	str	r2, [r8, #64]	; 0x40
   1d650:	str	r0, [r7, #4]!
   1d654:	str	r0, [r7, #4]
   1d658:	str	r0, [r7, #8]
   1d65c:	ldm	lr, {r1, r2}
   1d660:	str	r0, [r7, #12]
   1d664:	str	r0, [r7, #16]
   1d668:	mvn	r0, #0
   1d66c:	str	r0, [r7, #28]
   1d670:	bic	r0, r2, #786432	; 0xc0000
   1d674:	str	r1, [r7, #20]
   1d678:	str	r0, [r7, #24]
   1d67c:	ldr	r0, [r8, #92]	; 0x5c
   1d680:	cmp	r0, #2
   1d684:	blt	1e4e0 <__assert_fail@plt+0xcd80>
   1d688:	ldrb	r0, [r8, #88]	; 0x58
   1d68c:	orr	r0, r0, #2
   1d690:	strb	r0, [r8, #88]	; 0x58
   1d694:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1d698:	ldr	r4, [r7, #24]
   1d69c:	mov	sl, r6
   1d6a0:	orr	r2, r6, #8388608	; 0x800000
   1d6a4:	ldr	r6, [sp, #24]
   1d6a8:	ldr	r5, [fp, #8]
   1d6ac:	add	r0, r4, #1
   1d6b0:	mov	r1, r6
   1d6b4:	str	r0, [r7, #24]
   1d6b8:	mov	r0, lr
   1d6bc:	bl	1c708 <__assert_fail@plt+0xafa8>
   1d6c0:	ldr	r1, [r6, #40]	; 0x28
   1d6c4:	ldr	lr, [sp, #44]	; 0x2c
   1d6c8:	mov	r9, #0
   1d6cc:	add	r0, r1, r0
   1d6d0:	str	r0, [r6, #40]	; 0x28
   1d6d4:	ldrb	r0, [lr, #4]
   1d6d8:	cmp	r0, #9
   1d6dc:	beq	1e474 <__assert_fail@plt+0xcd14>
   1d6e0:	add	r0, r5, #1
   1d6e4:	mov	r1, r7
   1d6e8:	mov	r2, lr
   1d6ec:	mov	r3, sl
   1d6f0:	mov	r6, lr
   1d6f4:	str	r0, [sp]
   1d6f8:	ldr	r5, [sp, #16]
   1d6fc:	str	r5, [sp, #4]
   1d700:	ldr	r0, [sp, #24]
   1d704:	bl	1c380 <__assert_fail@plt+0xac20>
   1d708:	mov	r9, r0
   1d70c:	ldr	r0, [r5]
   1d710:	cmp	r0, #0
   1d714:	beq	1e464 <__assert_fail@plt+0xcd04>
   1d718:	mov	sl, #0
   1d71c:	mov	r0, sl
   1d720:	sub	sp, fp, #28
   1d724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d728:	ldr	r0, [lr]
   1d72c:	ldr	r7, [sp, #24]
   1d730:	movw	r1, #783	; 0x30f
   1d734:	tst	r0, r1
   1d738:	beq	1d780 <__assert_fail@plt+0xc020>
   1d73c:	ldrb	r0, [r8, #88]	; 0x58
   1d740:	tst	r0, #16
   1d744:	bne	1d77c <__assert_fail@plt+0xc01c>
   1d748:	orr	r1, r0, #16
   1d74c:	tst	r0, #8
   1d750:	strb	r1, [r8, #88]	; 0x58
   1d754:	bne	1f74c <__assert_fail@plt+0xdfec>
   1d758:	add	r1, pc, #832	; 0x340
   1d75c:	tst	r0, #4
   1d760:	vld1.64	{d16-d17}, [r1 :128]
   1d764:	add	r1, r8, #96	; 0x60
   1d768:	vst1.32	{d16-d17}, [r1]
   1d76c:	beq	1f758 <__assert_fail@plt+0xdff8>
   1d770:	vmov.i32	q8, #0	; 0x00000000
   1d774:	add	r0, r8, #112	; 0x70
   1d778:	vst1.32	{d16-d17}, [r0]
   1d77c:	ldr	r0, [lr]
   1d780:	cmp	r0, #512	; 0x200
   1d784:	beq	1e2c8 <__assert_fail@plt+0xcb68>
   1d788:	cmp	r0, #256	; 0x100
   1d78c:	bne	1e3e8 <__assert_fail@plt+0xcc88>
   1d790:	mov	r0, #6
   1d794:	mov	r4, r8
   1d798:	str	r0, [lr]
   1d79c:	ldr	r1, [r4, #64]!	; 0x40
   1d7a0:	cmp	r1, #31
   1d7a4:	beq	1f698 <__assert_fail@plt+0xdf38>
   1d7a8:	ldr	r0, [r8, #56]	; 0x38
   1d7ac:	add	r2, r1, #1
   1d7b0:	add	r5, r0, r1, lsl #5
   1d7b4:	mov	r0, #0
   1d7b8:	str	r2, [r4]
   1d7bc:	str	r0, [r5, #4]!
   1d7c0:	str	r0, [r5, #4]
   1d7c4:	str	r0, [r5, #8]
   1d7c8:	ldm	lr, {r1, r2}
   1d7cc:	str	r0, [r5, #12]
   1d7d0:	str	r0, [r5, #16]
   1d7d4:	mvn	r0, #0
   1d7d8:	str	r0, [r5, #28]
   1d7dc:	bic	r0, r2, #786432	; 0xc0000
   1d7e0:	str	r1, [r5, #20]
   1d7e4:	str	r0, [r5, #24]
   1d7e8:	mov	r0, #9
   1d7ec:	b	1e324 <__assert_fail@plt+0xcbc4>
   1d7f0:	ldr	r1, [r8, #64]	; 0x40
   1d7f4:	cmp	r1, #31
   1d7f8:	beq	1f4c4 <__assert_fail@plt+0xdd64>
   1d7fc:	ldr	r0, [r8, #56]	; 0x38
   1d800:	ldr	r3, [sp, #24]
   1d804:	add	r2, r1, #1
   1d808:	add	r4, r0, r1, lsl #5
   1d80c:	mov	r0, #0
   1d810:	str	r2, [r8, #64]	; 0x40
   1d814:	str	r0, [r4, #4]!
   1d818:	str	r0, [r4, #4]
   1d81c:	str	r0, [r4, #8]
   1d820:	ldm	lr, {r1, r2}
   1d824:	str	r0, [r4, #12]
   1d828:	str	r0, [r4, #16]
   1d82c:	mvn	r0, #0
   1d830:	str	r0, [r4, #28]
   1d834:	bic	r0, r2, #786432	; 0xc0000
   1d838:	str	r1, [r4, #20]
   1d83c:	str	r0, [r4, #24]
   1d840:	ldr	r0, [r8, #92]	; 0x5c
   1d844:	cmp	r0, #2
   1d848:	blt	1da84 <__assert_fail@plt+0xc324>
   1d84c:	ldr	r0, [r3, #40]	; 0x28
   1d850:	ldr	r1, [r3, #56]	; 0x38
   1d854:	cmp	r1, r0
   1d858:	ble	1da84 <__assert_fail@plt+0xc324>
   1d85c:	mov	r5, #0
   1d860:	mvn	sl, #0
   1d864:	mov	r9, r6
   1d868:	ldr	r6, [sp, #24]
   1d86c:	ldr	r1, [r6, #28]
   1d870:	cmp	r0, r1
   1d874:	beq	1f2e0 <__assert_fail@plt+0xdb80>
   1d878:	ldr	r1, [r6, #8]
   1d87c:	ldr	r0, [r1, r0, lsl #2]
   1d880:	cmn	r0, #1
   1d884:	bne	1f2e0 <__assert_fail@plt+0xdb80>
   1d888:	mov	r0, lr
   1d88c:	mov	r1, r6
   1d890:	mov	r2, r9
   1d894:	bl	1c708 <__assert_fail@plt+0xafa8>
   1d898:	ldr	r1, [r6, #40]	; 0x28
   1d89c:	add	r0, r1, r0
   1d8a0:	str	r0, [r6, #40]	; 0x28
   1d8a4:	ldr	r1, [r8, #64]	; 0x40
   1d8a8:	cmp	r1, #31
   1d8ac:	beq	1d958 <__assert_fail@plt+0xc1f8>
   1d8b0:	ldr	r0, [r8, #56]	; 0x38
   1d8b4:	ldr	lr, [sp, #44]	; 0x2c
   1d8b8:	add	r2, r1, #1
   1d8bc:	add	r6, r0, r1, lsl #5
   1d8c0:	str	r2, [r8, #64]	; 0x40
   1d8c4:	str	r5, [r6, #4]!
   1d8c8:	str	r5, [r6, #4]
   1d8cc:	str	r5, [r6, #8]
   1d8d0:	ldm	lr, {r0, r1}
   1d8d4:	str	r5, [r6, #12]
   1d8d8:	str	r5, [r6, #16]
   1d8dc:	str	sl, [r6, #28]
   1d8e0:	str	r0, [r6, #20]
   1d8e4:	bic	r0, r1, #786432	; 0xc0000
   1d8e8:	str	r0, [r6, #24]
   1d8ec:	ldr	r1, [r8, #64]	; 0x40
   1d8f0:	cmp	r1, #31
   1d8f4:	beq	1d994 <__assert_fail@plt+0xc234>
   1d8f8:	ldr	r0, [r8, #56]	; 0x38
   1d8fc:	add	r2, r1, #1
   1d900:	add	r7, r0, r1, lsl #5
   1d904:	mov	r0, #16
   1d908:	cmp	r6, #0
   1d90c:	str	r2, [r8, #64]	; 0x40
   1d910:	str	r5, [r7, #4]!
   1d914:	stmib	r7, {r4, r6}
   1d918:	str	r5, [r7, #12]
   1d91c:	str	r5, [r7, #16]
   1d920:	str	r5, [r7, #20]
   1d924:	str	r0, [r7, #24]
   1d928:	str	sl, [r7, #28]
   1d92c:	str	r7, [r4]
   1d930:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1d934:	ldr	r1, [sp, #24]
   1d938:	str	r7, [r6]
   1d93c:	mov	r4, r7
   1d940:	mov	r6, r9
   1d944:	ldr	r0, [r1, #40]	; 0x28
   1d948:	ldr	r1, [r1, #56]	; 0x38
   1d94c:	cmp	r1, r0
   1d950:	bgt	1d864 <__assert_fail@plt+0xc104>
   1d954:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1d958:	mov	r0, #996	; 0x3e4
   1d95c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1d960:	cmp	r0, #0
   1d964:	beq	1d980 <__assert_fail@plt+0xc220>
   1d968:	ldr	r1, [r8, #56]	; 0x38
   1d96c:	str	r1, [r0]
   1d970:	mov	r1, #0
   1d974:	str	r1, [r8, #64]	; 0x40
   1d978:	str	r0, [r8, #56]	; 0x38
   1d97c:	b	1d8b4 <__assert_fail@plt+0xc154>
   1d980:	ldr	lr, [sp, #44]	; 0x2c
   1d984:	mov	r6, #0
   1d988:	ldr	r1, [r8, #64]	; 0x40
   1d98c:	cmp	r1, #31
   1d990:	bne	1d8f8 <__assert_fail@plt+0xc198>
   1d994:	mov	r0, #996	; 0x3e4
   1d998:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1d99c:	ldr	lr, [sp, #44]	; 0x2c
   1d9a0:	cmp	r0, #0
   1d9a4:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1d9a8:	ldr	r1, [r8, #56]	; 0x38
   1d9ac:	str	r1, [r0]
   1d9b0:	mov	r1, #0
   1d9b4:	str	r1, [r8, #64]	; 0x40
   1d9b8:	str	r0, [r8, #56]	; 0x38
   1d9bc:	b	1d8fc <__assert_fail@plt+0xc19c>
   1d9c0:	mov	r0, #5
   1d9c4:	b	1e3d4 <__assert_fail@plt+0xcc74>
   1d9c8:	mov	sl, #0
   1d9cc:	mov	r0, #32
   1d9d0:	mov	r1, #1
   1d9d4:	str	sl, [fp, #-32]	; 0xffffffe0
   1d9d8:	bl	2d24c <__assert_fail@plt+0x1baec>
   1d9dc:	mov	r4, r0
   1d9e0:	mov	r0, #40	; 0x28
   1d9e4:	mov	r1, #1
   1d9e8:	bl	2d24c <__assert_fail@plt+0x1baec>
   1d9ec:	mov	r5, r0
   1d9f0:	cmp	r4, #0
   1d9f4:	cmpne	r5, #0
   1d9f8:	beq	1f4f4 <__assert_fail@plt+0xdd94>
   1d9fc:	str	r5, [sp, #48]	; 0x30
   1da00:	mov	r2, r6
   1da04:	ldr	r5, [sp, #44]	; 0x2c
   1da08:	ldr	r7, [sp, #24]
   1da0c:	mov	r0, r5
   1da10:	mov	r1, r7
   1da14:	bl	1fd5c <__assert_fail@plt+0xe5fc>
   1da18:	mov	r3, r0
   1da1c:	ldr	r0, [r5, #4]
   1da20:	mov	r2, r5
   1da24:	uxtb	r1, r0
   1da28:	cmp	r1, #25
   1da2c:	beq	1dab0 <__assert_fail@plt+0xc350>
   1da30:	ldr	sl, [sp, #48]	; 0x30
   1da34:	cmp	r1, #2
   1da38:	beq	1f488 <__assert_fail@plt+0xdd28>
   1da3c:	mov	r1, #0
   1da40:	b	1db08 <__assert_fail@plt+0xc3a8>
   1da44:	ldr	r4, [sp, #24]
   1da48:	mov	r0, lr
   1da4c:	mov	r2, r6
   1da50:	mov	r5, lr
   1da54:	mov	r1, r4
   1da58:	bl	1c708 <__assert_fail@plt+0xafa8>
   1da5c:	ldr	r1, [r4, #40]	; 0x28
   1da60:	mov	r2, r5
   1da64:	mov	r3, r6
   1da68:	add	r0, r1, r0
   1da6c:	mov	r1, r7
   1da70:	str	r0, [r4, #40]	; 0x28
   1da74:	mov	r0, r4
   1da78:	sub	sp, fp, #28
   1da7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da80:	b	1d3c0 <__assert_fail@plt+0xbc60>
   1da84:	mov	r7, r4
   1da88:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1da8c:	mov	r0, #16
   1da90:	b	1e3d4 <__assert_fail@plt+0xcc74>
   1da94:	nop	{0}
   1da98:	nop	{0}
   1da9c:	nop	{0}
   1daa0:	andeq	r0, r0, r0
   1daa4:	mvnseq	r0, #0
   1daa8:			; <UNDEFINED> instruction: 0x87fffffe
   1daac:			; <UNDEFINED> instruction: 0x07fffffe
   1dab0:	ldr	sl, [sp, #48]	; 0x30
   1dab4:	tst	r6, #256	; 0x100
   1dab8:	mov	r1, r7
   1dabc:	ldrb	r0, [sl, #16]
   1dac0:	orr	r0, r0, #1
   1dac4:	strb	r0, [sl, #16]
   1dac8:	ldrne	r0, [r4]
   1dacc:	orrne	r0, r0, #1024	; 0x400
   1dad0:	strne	r0, [r4]
   1dad4:	ldr	r0, [r7, #40]	; 0x28
   1dad8:	add	r0, r0, r3
   1dadc:	str	r0, [r7, #40]	; 0x28
   1dae0:	mov	r0, r2
   1dae4:	mov	r2, r6
   1dae8:	bl	1fd5c <__assert_fail@plt+0xe5fc>
   1daec:	ldr	r2, [sp, #44]	; 0x2c
   1daf0:	mov	r3, r0
   1daf4:	ldr	r0, [r2, #4]
   1daf8:	uxtb	r1, r0
   1dafc:	cmp	r1, #2
   1db00:	beq	1f488 <__assert_fail@plt+0xdd28>
   1db04:	mov	r1, #1
   1db08:	str	r1, [sp, #36]	; 0x24
   1db0c:	uxtb	r1, r0
   1db10:	str	r4, [sp, #52]	; 0x34
   1db14:	str	r6, [sp, #40]	; 0x28
   1db18:	cmp	r1, #21
   1db1c:	ldr	r5, [sp, #40]	; 0x28
   1db20:	moveq	r1, #1
   1db24:	bfieq	r0, r1, #0, #8
   1db28:	mov	r1, r7
   1db2c:	streq	r0, [r2, #4]
   1db30:	mov	r0, #3
   1db34:	str	r0, [fp, #-40]	; 0xffffffd8
   1db38:	sub	r0, fp, #80	; 0x50
   1db3c:	str	r0, [fp, #-36]	; 0xffffffdc
   1db40:	mov	r0, #1
   1db44:	str	r5, [sp]
   1db48:	str	r0, [sp, #4]
   1db4c:	sub	r0, fp, #40	; 0x28
   1db50:	bl	1ff04 <__assert_fail@plt+0xe7a4>
   1db54:	cmp	r0, #0
   1db58:	bne	1f478 <__assert_fail@plt+0xdd18>
   1db5c:	and	r0, r5, #65536	; 0x10000
   1db60:	str	r0, [sp, #32]
   1db64:	mov	r0, #0
   1db68:	str	r0, [sp, #28]
   1db6c:	mov	r0, #0
   1db70:	str	r0, [sp, #20]
   1db74:	ldr	r6, [sp, #24]
   1db78:	ldr	r7, [sp, #44]	; 0x2c
   1db7c:	mov	r0, r7
   1db80:	mov	r1, r6
   1db84:	mov	r2, r5
   1db88:	bl	1fd5c <__assert_fail@plt+0xe5fc>
   1db8c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1db90:	ldr	r4, [sp, #52]	; 0x34
   1db94:	mov	r9, r0
   1db98:	cmp	r5, #2
   1db9c:	beq	1dda0 <__assert_fail@plt+0xc640>
   1dba0:	cmp	r5, #4
   1dba4:	bne	1dbe4 <__assert_fail@plt+0xc484>
   1dba8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1dbac:	ldr	r0, [r6, #64]	; 0x40
   1dbb0:	mov	r2, sl
   1dbb4:	sub	r3, fp, #32
   1dbb8:	str	r1, [sp]
   1dbbc:	ldr	r1, [sp, #40]	; 0x28
   1dbc0:	str	r1, [sp, #4]
   1dbc4:	mov	r1, r4
   1dbc8:	bl	20208 <__assert_fail@plt+0xeaa8>
   1dbcc:	ldr	r1, [sp, #16]
   1dbd0:	ldr	lr, [sp, #44]	; 0x2c
   1dbd4:	cmp	r0, #0
   1dbd8:	str	r0, [r1]
   1dbdc:	beq	1dde0 <__assert_fail@plt+0xc680>
   1dbe0:	b	1f548 <__assert_fail@plt+0xdde8>
   1dbe4:	ldr	lr, [sp, #44]	; 0x2c
   1dbe8:	mov	r7, r9
   1dbec:	mov	r9, #7
   1dbf0:	ldrb	r0, [lr, #4]
   1dbf4:	cmp	r0, #22
   1dbf8:	beq	1dc08 <__assert_fail@plt+0xc4a8>
   1dbfc:	cmp	r0, #2
   1dc00:	bne	1dd58 <__assert_fail@plt+0xc5f8>
   1dc04:	b	1f538 <__assert_fail@plt+0xddd8>
   1dc08:	ldr	r4, [sp, #24]
   1dc0c:	ldr	r2, [sp, #40]	; 0x28
   1dc10:	mov	r6, r7
   1dc14:	ldr	r0, [r4, #40]	; 0x28
   1dc18:	mov	r1, r4
   1dc1c:	add	r0, r0, r7
   1dc20:	str	r0, [r4, #40]	; 0x28
   1dc24:	add	r0, sp, #56	; 0x38
   1dc28:	bl	1fd5c <__assert_fail@plt+0xe5fc>
   1dc2c:	mov	r3, r0
   1dc30:	ldrb	r0, [sp, #60]	; 0x3c
   1dc34:	cmp	r0, #21
   1dc38:	beq	1dd40 <__assert_fail@plt+0xc5e0>
   1dc3c:	cmp	r0, #2
   1dc40:	beq	1f538 <__assert_fail@plt+0xddd8>
   1dc44:	ldr	r7, [sp, #40]	; 0x28
   1dc48:	mov	r0, #3
   1dc4c:	add	r2, sp, #56	; 0x38
   1dc50:	str	r0, [fp, #-48]	; 0xffffffd0
   1dc54:	add	r0, sp, #64	; 0x40
   1dc58:	str	r0, [fp, #-44]	; 0xffffffd4
   1dc5c:	mov	r0, #1
   1dc60:	str	r0, [sp, #4]
   1dc64:	sub	r0, fp, #48	; 0x30
   1dc68:	str	r7, [sp]
   1dc6c:	ldr	r4, [sp, #24]
   1dc70:	mov	r1, r4
   1dc74:	bl	1ff04 <__assert_fail@plt+0xe7a4>
   1dc78:	cmp	r0, #0
   1dc7c:	bne	1f478 <__assert_fail@plt+0xdd18>
   1dc80:	ldr	r0, [sp, #44]	; 0x2c
   1dc84:	mov	r1, r4
   1dc88:	mov	r2, r7
   1dc8c:	bl	1fd5c <__assert_fail@plt+0xe5fc>
   1dc90:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1dc94:	mov	r9, #11
   1dc98:	str	r0, [sp, #12]
   1dc9c:	cmp	r4, #2
   1dca0:	cmpne	r4, #4
   1dca4:	beq	1f538 <__assert_fail@plt+0xddd8>
   1dca8:	cmp	r5, #3
   1dcac:	bne	1dcc0 <__assert_fail@plt+0xc560>
   1dcb0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1dcb4:	bl	11628 <strlen@plt>
   1dcb8:	cmp	r0, #1
   1dcbc:	bhi	1f534 <__assert_fail@plt+0xddd4>
   1dcc0:	cmp	r4, #3
   1dcc4:	bne	1dcd8 <__assert_fail@plt+0xc578>
   1dcc8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dccc:	bl	11628 <strlen@plt>
   1dcd0:	cmp	r0, #1
   1dcd4:	bhi	1f534 <__assert_fail@plt+0xddd4>
   1dcd8:	ldr	lr, [sp, #44]	; 0x2c
   1dcdc:	cmp	r5, #3
   1dce0:	beq	1deac <__assert_fail@plt+0xc74c>
   1dce4:	mov	r7, #0
   1dce8:	cmp	r5, #0
   1dcec:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1dcf0:	cmp	r4, #3
   1dcf4:	beq	1debc <__assert_fail@plt+0xc75c>
   1dcf8:	mov	sl, #0
   1dcfc:	cmp	r4, #0
   1dd00:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1dd04:	cmp	r5, #3
   1dd08:	cmpne	r5, #0
   1dd0c:	bne	1ded0 <__assert_fail@plt+0xc770>
   1dd10:	ldr	r0, [r8, #92]	; 0x5c
   1dd14:	cmp	r0, #2
   1dd18:	blt	1ded4 <__assert_fail@plt+0xc774>
   1dd1c:	mov	r0, r7
   1dd20:	bl	1167c <btowc@plt>
   1dd24:	ldr	lr, [sp, #44]	; 0x2c
   1dd28:	mov	r7, r0
   1dd2c:	cmp	r4, #3
   1dd30:	cmpne	r4, #0
   1dd34:	beq	1dee0 <__assert_fail@plt+0xc780>
   1dd38:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1dd3c:	b	1df10 <__assert_fail@plt+0xc7b0>
   1dd40:	ldr	r0, [r4, #40]	; 0x28
   1dd44:	ldr	lr, [sp, #44]	; 0x2c
   1dd48:	sub	r0, r0, r6
   1dd4c:	str	r0, [r4, #40]	; 0x28
   1dd50:	mov	r0, #1
   1dd54:	strb	r0, [lr, #4]
   1dd58:	cmp	r5, #1
   1dd5c:	beq	1de38 <__assert_fail@plt+0xc6d8>
   1dd60:	ldr	r6, [sp, #24]
   1dd64:	ldr	r4, [sp, #52]	; 0x34
   1dd68:	ldr	sl, [sp, #48]	; 0x30
   1dd6c:	cmp	r5, #2
   1dd70:	mov	r9, r7
   1dd74:	beq	1dda0 <__assert_fail@plt+0xc640>
   1dd78:	cmp	r5, #3
   1dd7c:	bne	1de7c <__assert_fail@plt+0xc71c>
   1dd80:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1dd84:	mov	r0, r7
   1dd88:	bl	11628 <strlen@plt>
   1dd8c:	cmp	r0, #1
   1dd90:	mov	r3, #1
   1dd94:	bne	1f534 <__assert_fail@plt+0xddd4>
   1dd98:	ldrb	r0, [r7]
   1dd9c:	b	1ddbc <__assert_fail@plt+0xc65c>
   1dda0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1dda4:	mov	r0, r7
   1dda8:	bl	11628 <strlen@plt>
   1ddac:	cmp	r0, #1
   1ddb0:	bne	1f534 <__assert_fail@plt+0xddd4>
   1ddb4:	ldrb	r0, [r7]
   1ddb8:	mov	r3, #1
   1ddbc:	ubfx	r1, r0, #5, #3
   1ddc0:	and	r0, r0, #31
   1ddc4:	ldr	r2, [r4, r1, lsl #2]
   1ddc8:	orr	r0, r2, r3, lsl r0
   1ddcc:	str	r0, [r4, r1, lsl #2]
   1ddd0:	mov	r1, #0
   1ddd4:	ldr	r0, [sp, #16]
   1ddd8:	ldr	lr, [sp, #44]	; 0x2c
   1dddc:	str	r1, [r0]
   1dde0:	ldrb	r0, [lr, #4]
   1dde4:	cmp	r0, #21
   1dde8:	beq	1e06c <__assert_fail@plt+0xc90c>
   1ddec:	cmp	r0, #2
   1ddf0:	beq	1f480 <__assert_fail@plt+0xdd20>
   1ddf4:	mov	r0, #3
   1ddf8:	ldr	r5, [sp, #40]	; 0x28
   1ddfc:	mov	r1, r6
   1de00:	mov	r2, lr
   1de04:	mov	r3, r9
   1de08:	mov	r7, lr
   1de0c:	str	r0, [fp, #-40]	; 0xffffffd8
   1de10:	sub	r0, fp, #80	; 0x50
   1de14:	str	r0, [fp, #-36]	; 0xffffffdc
   1de18:	mov	r0, #0
   1de1c:	str	r0, [sp, #4]
   1de20:	sub	r0, fp, #40	; 0x28
   1de24:	str	r5, [sp]
   1de28:	bl	1ff04 <__assert_fail@plt+0xe7a4>
   1de2c:	cmp	r0, #0
   1de30:	beq	1db7c <__assert_fail@plt+0xc41c>
   1de34:	b	1f478 <__assert_fail@plt+0xdd18>
   1de38:	ldr	sl, [sp, #48]	; 0x30
   1de3c:	ldr	r0, [sp, #28]
   1de40:	ldr	r4, [sp, #52]	; 0x34
   1de44:	ldr	r1, [sl, #20]
   1de48:	cmp	r0, r1
   1de4c:	beq	1dfd8 <__assert_fail@plt+0xc878>
   1de50:	ldr	r0, [sl]
   1de54:	ldr	r6, [sp, #24]
   1de58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1de5c:	add	r2, r1, #1
   1de60:	mov	r9, r7
   1de64:	str	r2, [sl, #20]
   1de68:	str	r3, [r0, r1, lsl #2]
   1de6c:	ldrb	r0, [lr, #4]
   1de70:	cmp	r0, #21
   1de74:	bne	1ddec <__assert_fail@plt+0xc68c>
   1de78:	b	1e06c <__assert_fail@plt+0xc90c>
   1de7c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1de80:	mov	r3, #1
   1de84:	ubfx	r1, r0, #5, #3
   1de88:	ldr	lr, [sp, #44]	; 0x2c
   1de8c:	and	r0, r0, #31
   1de90:	ldr	r2, [r4, r1, lsl #2]
   1de94:	orr	r0, r2, r3, lsl r0
   1de98:	str	r0, [r4, r1, lsl #2]
   1de9c:	ldrb	r0, [lr, #4]
   1dea0:	cmp	r0, #21
   1dea4:	bne	1ddec <__assert_fail@plt+0xc68c>
   1dea8:	b	1e06c <__assert_fail@plt+0xc90c>
   1deac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1deb0:	ldrb	r7, [r0]
   1deb4:	cmp	r4, #3
   1deb8:	bne	1dcf8 <__assert_fail@plt+0xc598>
   1debc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dec0:	ldrb	sl, [r0]
   1dec4:	cmp	r5, #3
   1dec8:	cmpne	r5, #0
   1decc:	beq	1dd10 <__assert_fail@plt+0xc5b0>
   1ded0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ded4:	cmp	r4, #3
   1ded8:	cmpne	r4, #0
   1dedc:	bne	1dd38 <__assert_fail@plt+0xc5d8>
   1dee0:	ldr	r0, [r8, #92]	; 0x5c
   1dee4:	cmp	r0, #2
   1dee8:	blt	1df10 <__assert_fail@plt+0xc7b0>
   1deec:	mov	r0, sl
   1def0:	bl	1167c <btowc@plt>
   1def4:	ldr	lr, [sp, #44]	; 0x2c
   1def8:	mov	sl, r0
   1defc:	cmn	r7, #1
   1df00:	mov	r9, #3
   1df04:	cmnne	sl, #1
   1df08:	beq	1f538 <__assert_fail@plt+0xddd8>
   1df0c:	b	1df20 <__assert_fail@plt+0xc7c0>
   1df10:	cmn	r7, #1
   1df14:	mov	r9, #3
   1df18:	cmnne	sl, #1
   1df1c:	beq	1f538 <__assert_fail@plt+0xddd8>
   1df20:	ldr	r0, [sp, #32]
   1df24:	cmp	r0, #0
   1df28:	beq	1df38 <__assert_fail@plt+0xc7d8>
   1df2c:	cmp	r7, sl
   1df30:	mov	r9, #11
   1df34:	bhi	1f538 <__assert_fail@plt+0xddd8>
   1df38:	ldr	r0, [r8, #92]	; 0x5c
   1df3c:	cmp	r0, #2
   1df40:	blt	1df7c <__assert_fail@plt+0xc81c>
   1df44:	ldr	r4, [sp, #48]	; 0x30
   1df48:	ldr	r1, [sp, #20]
   1df4c:	mov	r5, #1
   1df50:	ldr	r0, [r4, #32]
   1df54:	cmp	r1, r0
   1df58:	beq	1e018 <__assert_fail@plt+0xc8b8>
   1df5c:	ldmib	r4, {r6, r9}
   1df60:	str	r7, [r6, r0, lsl #2]
   1df64:	ldr	r0, [r4, #32]
   1df68:	add	r1, r0, #1
   1df6c:	str	r1, [r4, #32]
   1df70:	ldr	r4, [sp, #52]	; 0x34
   1df74:	str	sl, [r9, r0, lsl #2]
   1df78:	b	1df84 <__assert_fail@plt+0xc824>
   1df7c:	ldr	r4, [sp, #52]	; 0x34
   1df80:	mov	r5, #1
   1df84:	ldr	r6, [sp, #24]
   1df88:	ldr	r9, [sp, #12]
   1df8c:	mov	r0, #0
   1df90:	cmp	r7, r0
   1df94:	cmpls	r0, sl
   1df98:	ubfxls	r1, r0, #5, #3
   1df9c:	andls	r3, r0, #31
   1dfa0:	add	r0, r0, #1
   1dfa4:	ldrls	r2, [r4, r1, lsl #2]
   1dfa8:	orrls	r2, r2, r5, lsl r3
   1dfac:	strls	r2, [r4, r1, lsl #2]
   1dfb0:	cmp	r0, #256	; 0x100
   1dfb4:	bne	1df90 <__assert_fail@plt+0xc830>
   1dfb8:	ldr	r0, [sp, #16]
   1dfbc:	ldr	sl, [sp, #48]	; 0x30
   1dfc0:	mov	r1, #0
   1dfc4:	str	r1, [r0]
   1dfc8:	ldrb	r0, [lr, #4]
   1dfcc:	cmp	r0, #21
   1dfd0:	bne	1ddec <__assert_fail@plt+0xc68c>
   1dfd4:	b	1e06c <__assert_fail@plt+0xc90c>
   1dfd8:	ldr	r1, [sp, #28]
   1dfdc:	mov	r0, #1
   1dfe0:	orr	r1, r0, r1, lsl #1
   1dfe4:	ldr	r0, [sl]
   1dfe8:	str	r1, [sp, #28]
   1dfec:	lsl	r1, r1, #2
   1dff0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1dff4:	cmp	r0, #0
   1dff8:	beq	1f920 <__assert_fail@plt+0xe1c0>
   1dffc:	ldr	sl, [sp, #48]	; 0x30
   1e000:	ldr	r6, [sp, #24]
   1e004:	ldr	lr, [sp, #44]	; 0x2c
   1e008:	ldr	r4, [sp, #52]	; 0x34
   1e00c:	str	r0, [sl]
   1e010:	ldr	r1, [sl, #20]
   1e014:	b	1de58 <__assert_fail@plt+0xc6f8>
   1e018:	ldr	r0, [sp, #20]
   1e01c:	orr	r0, r5, r0, lsl #1
   1e020:	lsl	r9, r0, #2
   1e024:	str	r0, [sp, #20]
   1e028:	ldr	r0, [r4, #4]
   1e02c:	mov	r1, r9
   1e030:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1e034:	mov	r6, r0
   1e038:	ldr	r0, [r4, #8]
   1e03c:	mov	r1, r9
   1e040:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   1e044:	mov	r9, r0
   1e048:	cmp	r6, #0
   1e04c:	cmpne	r9, #0
   1e050:	beq	1f93c <__assert_fail@plt+0xe1dc>
   1e054:	ldr	r4, [sp, #48]	; 0x30
   1e058:	mov	r5, #1
   1e05c:	stmib	r4, {r6, r9}
   1e060:	ldr	r0, [r4, #32]
   1e064:	ldr	lr, [sp, #44]	; 0x2c
   1e068:	b	1df60 <__assert_fail@plt+0xc800>
   1e06c:	ldr	r0, [r6, #40]	; 0x28
   1e070:	add	r0, r0, r9
   1e074:	str	r0, [r6, #40]	; 0x28
   1e078:	ldr	r0, [sp, #36]	; 0x24
   1e07c:	cmp	r0, #0
   1e080:	beq	1e0c0 <__assert_fail@plt+0xc960>
   1e084:	vld1.32	{d16-d17}, [r4]
   1e088:	mov	r0, r4
   1e08c:	vmvn	q8, q8
   1e090:	vst1.32	{d16-d17}, [r0]!
   1e094:	vld1.32	{d16-d17}, [r0]
   1e098:	vmvn	q8, q8
   1e09c:	vst1.32	{d16-d17}, [r0]
   1e0a0:	ldr	r0, [r8, #92]	; 0x5c
   1e0a4:	cmp	r0, #2
   1e0a8:	bge	1e0cc <__assert_fail@plt+0xc96c>
   1e0ac:	ldr	r1, [sl, #20]
   1e0b0:	ldr	r6, [sp, #40]	; 0x28
   1e0b4:	cmp	r1, #0
   1e0b8:	bne	1e178 <__assert_fail@plt+0xca18>
   1e0bc:	b	1e154 <__assert_fail@plt+0xc9f4>
   1e0c0:	ldr	r0, [r8, #92]	; 0x5c
   1e0c4:	cmp	r0, #2
   1e0c8:	blt	1e0ac <__assert_fail@plt+0xc94c>
   1e0cc:	ldm	r4, {r1, r2, r3, r7}
   1e0d0:	ldr	r6, [r8, #60]	; 0x3c
   1e0d4:	ldr	r5, [r6]
   1e0d8:	and	r1, r1, r5
   1e0dc:	str	r1, [r4]
   1e0e0:	ldr	r1, [r6, #4]
   1e0e4:	and	r1, r2, r1
   1e0e8:	str	r1, [r4, #4]
   1e0ec:	ldr	r1, [r6, #8]
   1e0f0:	and	r1, r3, r1
   1e0f4:	str	r1, [r4, #8]
   1e0f8:	ldr	r1, [r6, #12]
   1e0fc:	and	r1, r7, r1
   1e100:	str	r1, [r4, #12]
   1e104:	ldr	r1, [r4, #16]
   1e108:	ldr	r2, [r6, #16]
   1e10c:	and	r1, r1, r2
   1e110:	str	r1, [r4, #16]
   1e114:	ldr	r1, [r6, #20]
   1e118:	ldr	r2, [r4, #20]
   1e11c:	and	r1, r2, r1
   1e120:	str	r1, [r4, #20]
   1e124:	ldr	r1, [r6, #24]
   1e128:	ldr	r2, [r4, #24]
   1e12c:	and	r1, r2, r1
   1e130:	str	r1, [r4, #24]
   1e134:	ldr	r1, [r6, #28]
   1e138:	ldr	r2, [r4, #28]
   1e13c:	and	r1, r2, r1
   1e140:	str	r1, [r4, #28]
   1e144:	ldr	r1, [sl, #20]
   1e148:	ldr	r6, [sp, #40]	; 0x28
   1e14c:	cmp	r1, #0
   1e150:	bne	1e178 <__assert_fail@plt+0xca18>
   1e154:	ldr	r1, [sl, #24]
   1e158:	cmp	r1, #0
   1e15c:	bne	1e178 <__assert_fail@plt+0xca18>
   1e160:	ldr	r1, [sl, #28]
   1e164:	cmp	r1, #0
   1e168:	bne	1e178 <__assert_fail@plt+0xca18>
   1e16c:	ldr	r1, [sl, #32]
   1e170:	cmp	r1, #0
   1e174:	beq	1f3b0 <__assert_fail@plt+0xdc50>
   1e178:	ldrb	r0, [r8, #88]	; 0x58
   1e17c:	orr	r0, r0, #2
   1e180:	strb	r0, [r8, #88]	; 0x58
   1e184:	ldr	r1, [r8, #64]	; 0x40
   1e188:	cmp	r1, #31
   1e18c:	beq	1f59c <__assert_fail@plt+0xde3c>
   1e190:	ldr	r0, [r8, #56]	; 0x38
   1e194:	add	r2, r1, #1
   1e198:	add	r0, r0, r1, lsl #5
   1e19c:	mov	r1, #6
   1e1a0:	vmov.i32	q8, #0	; 0x00000000
   1e1a4:	str	r2, [r8, #64]	; 0x40
   1e1a8:	mov	r2, #0
   1e1ac:	add	r9, r0, #4
   1e1b0:	str	r2, [r0, #20]
   1e1b4:	str	sl, [r0, #24]
   1e1b8:	str	r1, [r0, #28]
   1e1bc:	mov	r0, #28
   1e1c0:	mov	r1, r9
   1e1c4:	vst1.32	{d16-d17}, [r1], r0
   1e1c8:	mvn	r0, #0
   1e1cc:	str	r0, [r1]
   1e1d0:	ldr	r0, [r4]
   1e1d4:	cmp	r0, #0
   1e1d8:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e1dc:	ldr	r0, [r4, #4]
   1e1e0:	cmp	r0, #0
   1e1e4:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e1e8:	ldr	r0, [r4, #8]
   1e1ec:	cmp	r0, #0
   1e1f0:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e1f4:	ldr	r0, [r4, #12]
   1e1f8:	cmp	r0, #0
   1e1fc:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e200:	ldr	r0, [r4, #16]
   1e204:	cmp	r0, #0
   1e208:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e20c:	ldr	r0, [r4, #20]
   1e210:	cmp	r0, #0
   1e214:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e218:	ldr	r0, [r4, #24]
   1e21c:	cmp	r0, #0
   1e220:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e224:	ldr	r0, [r4, #28]
   1e228:	cmp	r0, #0
   1e22c:	beq	1f650 <__assert_fail@plt+0xdef0>
   1e230:	ldr	r1, [r8, #64]	; 0x40
   1e234:	cmp	r1, #31
   1e238:	beq	1f5c8 <__assert_fail@plt+0xde68>
   1e23c:	ldr	r0, [r8, #56]	; 0x38
   1e240:	add	r2, r1, #1
   1e244:	add	r0, r0, r1, lsl #5
   1e248:	mov	r1, #3
   1e24c:	vmov.i32	q8, #0	; 0x00000000
   1e250:	str	r2, [r8, #64]	; 0x40
   1e254:	mov	r2, #0
   1e258:	add	r5, r0, #4
   1e25c:	str	r2, [r0, #20]
   1e260:	str	r4, [r0, #24]
   1e264:	str	r1, [r0, #28]
   1e268:	mov	r0, #28
   1e26c:	mov	r1, r5
   1e270:	vst1.32	{d16-d17}, [r1], r0
   1e274:	mvn	r0, #0
   1e278:	str	r0, [r1]
   1e27c:	ldr	r1, [r8, #64]	; 0x40
   1e280:	cmp	r1, #31
   1e284:	beq	1f5f4 <__assert_fail@plt+0xde94>
   1e288:	ldr	r0, [r8, #56]	; 0x38
   1e28c:	add	r2, r1, #1
   1e290:	add	r7, r0, r1, lsl #5
   1e294:	mov	r0, #0
   1e298:	mov	r1, #10
   1e29c:	str	r2, [r8, #64]	; 0x40
   1e2a0:	str	r0, [r7, #4]!
   1e2a4:	mvn	r2, #0
   1e2a8:	add	r3, r7, #20
   1e2ac:	stmib	r7, {r5, r9}
   1e2b0:	str	r0, [r7, #12]
   1e2b4:	str	r0, [r7, #16]
   1e2b8:	stm	r3, {r0, r1, r2}
   1e2bc:	str	r7, [r5]
   1e2c0:	str	r7, [r9]
   1e2c4:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1e2c8:	mov	r0, #5
   1e2cc:	mov	r4, r8
   1e2d0:	str	r0, [lr]
   1e2d4:	ldr	r1, [r4, #64]!	; 0x40
   1e2d8:	cmp	r1, #31
   1e2dc:	beq	1f6cc <__assert_fail@plt+0xdf6c>
   1e2e0:	ldr	r0, [r8, #56]	; 0x38
   1e2e4:	add	r2, r1, #1
   1e2e8:	add	r5, r0, r1, lsl #5
   1e2ec:	mov	r0, #0
   1e2f0:	str	r2, [r4]
   1e2f4:	str	r0, [r5, #4]!
   1e2f8:	str	r0, [r5, #4]
   1e2fc:	str	r0, [r5, #8]
   1e300:	ldm	lr, {r1, r2}
   1e304:	str	r0, [r5, #12]
   1e308:	str	r0, [r5, #16]
   1e30c:	mvn	r0, #0
   1e310:	str	r0, [r5, #28]
   1e314:	bic	r0, r2, #786432	; 0xc0000
   1e318:	str	r1, [r5, #20]
   1e31c:	str	r0, [r5, #24]
   1e320:	mov	r0, #10
   1e324:	str	r0, [lr]
   1e328:	mov	r9, r6
   1e32c:	ldr	r1, [r4]
   1e330:	cmp	r1, #31
   1e334:	beq	1f664 <__assert_fail@plt+0xdf04>
   1e338:	ldr	r0, [r8, #56]	; 0x38
   1e33c:	add	r2, r1, #1
   1e340:	add	r6, r0, r1, lsl #5
   1e344:	mov	r0, #0
   1e348:	str	r2, [r4]
   1e34c:	str	r0, [r6, #4]!
   1e350:	str	r0, [r6, #4]
   1e354:	str	r0, [r6, #8]
   1e358:	ldm	lr, {r1, r2}
   1e35c:	str	r0, [r6, #12]
   1e360:	str	r0, [r6, #16]
   1e364:	mvn	r0, #0
   1e368:	str	r0, [r6, #28]
   1e36c:	bic	r0, r2, #786432	; 0xc0000
   1e370:	str	r1, [r6, #20]
   1e374:	str	r0, [r6, #24]
   1e378:	ldr	r1, [r4]
   1e37c:	cmp	r1, #31
   1e380:	beq	1f7fc <__assert_fail@plt+0xe09c>
   1e384:	ldr	r0, [r8, #56]	; 0x38
   1e388:	add	r2, r1, #1
   1e38c:	cmp	r5, #0
   1e390:	str	r2, [r4]
   1e394:	add	r4, r0, r1, lsl #5
   1e398:	mov	r0, #0
   1e39c:	mov	r1, #10
   1e3a0:	mvn	r2, #0
   1e3a4:	str	r0, [r4, #4]!
   1e3a8:	add	r3, r4, #20
   1e3ac:	stmib	r4, {r5, r6}
   1e3b0:	str	r0, [r4, #12]
   1e3b4:	str	r0, [r4, #16]
   1e3b8:	stm	r3, {r0, r1, r2}
   1e3bc:	strne	r4, [r5]
   1e3c0:	cmp	r6, #0
   1e3c4:	strne	r4, [r6]
   1e3c8:	cmpne	r5, #0
   1e3cc:	bne	1e438 <__assert_fail@plt+0xccd8>
   1e3d0:	mov	r0, #12
   1e3d4:	ldr	r1, [sp, #16]
   1e3d8:	str	r0, [r1]
   1e3dc:	mov	r0, sl
   1e3e0:	sub	sp, fp, #28
   1e3e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3e8:	ldr	r1, [r8, #64]	; 0x40
   1e3ec:	mov	r9, r6
   1e3f0:	cmp	r1, #31
   1e3f4:	beq	1f700 <__assert_fail@plt+0xdfa0>
   1e3f8:	ldr	r0, [r8, #56]	; 0x38
   1e3fc:	add	r2, r1, #1
   1e400:	add	r4, r0, r1, lsl #5
   1e404:	mov	r0, #0
   1e408:	str	r2, [r8, #64]	; 0x40
   1e40c:	str	r0, [r4, #4]!
   1e410:	str	r0, [r4, #4]
   1e414:	str	r0, [r4, #8]
   1e418:	ldm	lr, {r1, r2}
   1e41c:	str	r0, [r4, #12]
   1e420:	str	r0, [r4, #16]
   1e424:	mvn	r0, #0
   1e428:	str	r0, [r4, #28]
   1e42c:	bic	r0, r2, #786432	; 0xc0000
   1e430:	str	r1, [r4, #20]
   1e434:	str	r0, [r4, #24]
   1e438:	mov	r0, lr
   1e43c:	mov	r1, r7
   1e440:	mov	r2, r9
   1e444:	bl	1c708 <__assert_fail@plt+0xafa8>
   1e448:	ldr	r1, [r7, #40]	; 0x28
   1e44c:	mov	sl, r4
   1e450:	add	r0, r1, r0
   1e454:	str	r0, [r7, #40]	; 0x28
   1e458:	mov	r0, sl
   1e45c:	sub	sp, fp, #28
   1e460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e464:	ldrb	r0, [r6, #4]
   1e468:	cmp	r0, #9
   1e46c:	bne	1f828 <__assert_fail@plt+0xe0c8>
   1e470:	mov	lr, r6
   1e474:	cmp	r4, #8
   1e478:	ldrls	r0, [r8, #84]	; 0x54
   1e47c:	movls	r1, #1
   1e480:	orrls	r0, r0, r1, lsl r4
   1e484:	strls	r0, [r8, #84]	; 0x54
   1e488:	ldr	r1, [r8, #64]	; 0x40
   1e48c:	cmp	r1, #31
   1e490:	beq	1f620 <__assert_fail@plt+0xdec0>
   1e494:	ldr	r0, [r8, #56]	; 0x38
   1e498:	mov	r6, sl
   1e49c:	add	r0, r0, r1, lsl #5
   1e4a0:	add	r2, r1, #1
   1e4a4:	mov	r1, #0
   1e4a8:	mvn	r3, #0
   1e4ac:	cmp	r9, #0
   1e4b0:	mov	r7, r0
   1e4b4:	str	r2, [r8, #64]	; 0x40
   1e4b8:	mov	r2, #17
   1e4bc:	str	r1, [r7, #4]!
   1e4c0:	add	ip, r7, #20
   1e4c4:	str	r9, [r7, #4]
   1e4c8:	str	r1, [r7, #8]
   1e4cc:	str	r1, [r7, #12]
   1e4d0:	str	r1, [r7, #16]
   1e4d4:	stm	ip, {r1, r2, r3}
   1e4d8:	strne	r7, [r9]
   1e4dc:	str	r4, [r0, #24]
   1e4e0:	mov	r4, r6
   1e4e4:	ldr	r6, [sp, #24]
   1e4e8:	mov	r0, lr
   1e4ec:	mov	r2, r4
   1e4f0:	mov	r1, r6
   1e4f4:	bl	1c708 <__assert_fail@plt+0xafa8>
   1e4f8:	ldr	r1, [r6, #40]	; 0x28
   1e4fc:	ldr	ip, [sp, #44]	; 0x2c
   1e500:	add	r0, r1, r0
   1e504:	str	r0, [r6, #40]	; 0x28
   1e508:	add	r0, r8, #56	; 0x38
   1e50c:	add	r8, r8, #64	; 0x40
   1e510:	str	r0, [sp, #20]
   1e514:	and	r0, r4, #2097152	; 0x200000
   1e518:	str	r0, [sp, #12]
   1e51c:	str	r4, [sp, #40]	; 0x28
   1e520:	and	r0, r4, #16777216	; 0x1000000
   1e524:	mov	r4, #0
   1e528:	str	r0, [sp, #28]
   1e52c:	b	1f20c <__assert_fail@plt+0xdaac>
   1e530:	movw	r2, #2048	; 0x800
   1e534:	mov	r1, #1
   1e538:	movt	r2, #140	; 0x8c
   1e53c:	tst	r2, r1, lsl r0
   1e540:	beq	1f2d4 <__assert_fail@plt+0xdb74>
   1e544:	cmp	r0, #23
   1e548:	str	sl, [sp, #36]	; 0x24
   1e54c:	bne	1e560 <__assert_fail@plt+0xce00>
   1e550:	ldm	ip, {r5, sl}
   1e554:	ldr	r7, [r6, #40]	; 0x28
   1e558:	mvn	r2, #0
   1e55c:	b	1e594 <__assert_fail@plt+0xce34>
   1e560:	cmp	r0, #19
   1e564:	sub	r0, r0, #18
   1e568:	mvn	r5, #0
   1e56c:	clz	r0, r0
   1e570:	movweq	r5, #1
   1e574:	lsr	r9, r0, #5
   1e578:	b	1e7a8 <__assert_fail@plt+0xd048>
   1e57c:	add	r0, r9, r9, lsl #2
   1e580:	add	r0, r1, r0, lsl #1
   1e584:	movw	r1, #32816	; 0x8030
   1e588:	sub	r2, r0, #48	; 0x30
   1e58c:	cmp	r0, r1
   1e590:	movwgt	r2, #32768	; 0x8000
   1e594:	mov	r9, r2
   1e598:	ldr	r2, [sp, #40]	; 0x28
   1e59c:	mov	r0, ip
   1e5a0:	mov	r1, r6
   1e5a4:	bl	1c708 <__assert_fail@plt+0xafa8>
   1e5a8:	ldr	r1, [r6, #40]	; 0x28
   1e5ac:	ldr	ip, [sp, #44]	; 0x2c
   1e5b0:	add	r0, r1, r0
   1e5b4:	str	r0, [r6, #40]	; 0x28
   1e5b8:	ldrb	r0, [ip, #4]
   1e5bc:	ldrb	r1, [ip]
   1e5c0:	cmp	r0, #24
   1e5c4:	beq	1e60c <__assert_fail@plt+0xceac>
   1e5c8:	cmp	r0, #2
   1e5cc:	beq	1e67c <__assert_fail@plt+0xcf1c>
   1e5d0:	cmp	r1, #44	; 0x2c
   1e5d4:	beq	1e60c <__assert_fail@plt+0xceac>
   1e5d8:	mvn	r2, #1
   1e5dc:	cmp	r1, #48	; 0x30
   1e5e0:	bcc	1e594 <__assert_fail@plt+0xce34>
   1e5e4:	cmp	r0, #1
   1e5e8:	bne	1e594 <__assert_fail@plt+0xce34>
   1e5ec:	cmn	r9, #2
   1e5f0:	beq	1e594 <__assert_fail@plt+0xce34>
   1e5f4:	cmp	r1, #57	; 0x39
   1e5f8:	bhi	1e594 <__assert_fail@plt+0xce34>
   1e5fc:	cmn	r9, #1
   1e600:	bne	1e57c <__assert_fail@plt+0xce1c>
   1e604:	sub	r2, r1, #48	; 0x30
   1e608:	b	1e594 <__assert_fail@plt+0xce34>
   1e60c:	cmn	r9, #1
   1e610:	bne	1e65c <__assert_fail@plt+0xcefc>
   1e614:	cmp	r1, #44	; 0x2c
   1e618:	moveq	r9, #0
   1e61c:	cmpeq	r0, #1
   1e620:	beq	1e6b4 <__assert_fail@plt+0xcf54>
   1e624:	ldr	r0, [sp, #16]
   1e628:	mov	r1, #10
   1e62c:	str	r1, [r0]
   1e630:	ldr	sl, [sp, #36]	; 0x24
   1e634:	mov	r7, #0
   1e638:	clz	r0, r7
   1e63c:	cmp	r7, #0
   1e640:	lsr	r0, r0, #5
   1e644:	bne	1f200 <__assert_fail@plt+0xdaa0>
   1e648:	ldr	r1, [sp, #16]
   1e64c:	ldr	r1, [r1]
   1e650:	cmp	r1, #0
   1e654:	beq	1f200 <__assert_fail@plt+0xdaa0>
   1e658:	b	1f2ec <__assert_fail@plt+0xdb8c>
   1e65c:	cmn	r9, #2
   1e660:	mov	r2, r9
   1e664:	beq	1e67c <__assert_fail@plt+0xcf1c>
   1e668:	cmp	r0, #24
   1e66c:	beq	1e6c0 <__assert_fail@plt+0xcf60>
   1e670:	cmp	r0, #1
   1e674:	cmpeq	r1, #44	; 0x2c
   1e678:	beq	1e6b4 <__assert_fail@plt+0xcf54>
   1e67c:	ldr	r1, [sp, #12]
   1e680:	cmp	r1, #0
   1e684:	beq	1ed5c <__assert_fail@plt+0xd5fc>
   1e688:	mov	r0, #1
   1e68c:	str	r7, [r6, #40]	; 0x28
   1e690:	bfi	sl, r0, #0, #8
   1e694:	stm	ip, {r5, sl}
   1e698:	ldr	sl, [sp, #36]	; 0x24
   1e69c:	mov	r7, sl
   1e6a0:	clz	r0, r7
   1e6a4:	cmp	r7, #0
   1e6a8:	lsr	r0, r0, #5
   1e6ac:	beq	1e648 <__assert_fail@plt+0xcee8>
   1e6b0:	b	1f200 <__assert_fail@plt+0xdaa0>
   1e6b4:	mvn	r2, #0
   1e6b8:	str	sl, [sp, #52]	; 0x34
   1e6bc:	b	1e6ec <__assert_fail@plt+0xcf8c>
   1e6c0:	ldr	sl, [sp, #36]	; 0x24
   1e6c4:	mov	r5, r9
   1e6c8:	cmp	r0, #24
   1e6cc:	beq	1e794 <__assert_fail@plt+0xd034>
   1e6d0:	b	1eda4 <__assert_fail@plt+0xd644>
   1e6d4:	add	r0, sl, sl, lsl #2
   1e6d8:	add	r0, r1, r0, lsl #1
   1e6dc:	movw	r1, #32816	; 0x8030
   1e6e0:	sub	r2, r0, #48	; 0x30
   1e6e4:	cmp	r0, r1
   1e6e8:	movwgt	r2, #32768	; 0x8000
   1e6ec:	mov	sl, r2
   1e6f0:	ldr	r2, [sp, #40]	; 0x28
   1e6f4:	mov	r0, ip
   1e6f8:	mov	r1, r6
   1e6fc:	bl	1c708 <__assert_fail@plt+0xafa8>
   1e700:	ldr	r1, [r6, #40]	; 0x28
   1e704:	ldr	ip, [sp, #44]	; 0x2c
   1e708:	add	r0, r1, r0
   1e70c:	str	r0, [r6, #40]	; 0x28
   1e710:	ldrb	r0, [ip, #4]
   1e714:	cmp	r0, #24
   1e718:	beq	1e764 <__assert_fail@plt+0xd004>
   1e71c:	cmp	r0, #2
   1e720:	beq	1ed4c <__assert_fail@plt+0xd5ec>
   1e724:	ldrb	r1, [ip]
   1e728:	cmp	r1, #44	; 0x2c
   1e72c:	beq	1e764 <__assert_fail@plt+0xd004>
   1e730:	mvn	r2, #1
   1e734:	cmp	r1, #48	; 0x30
   1e738:	bcc	1e6ec <__assert_fail@plt+0xcf8c>
   1e73c:	cmp	r0, #1
   1e740:	bne	1e6ec <__assert_fail@plt+0xcf8c>
   1e744:	cmn	sl, #2
   1e748:	beq	1e6ec <__assert_fail@plt+0xcf8c>
   1e74c:	cmp	r1, #57	; 0x39
   1e750:	bhi	1e6ec <__assert_fail@plt+0xcf8c>
   1e754:	cmn	sl, #1
   1e758:	bne	1e6d4 <__assert_fail@plt+0xcf74>
   1e75c:	sub	r2, r1, #48	; 0x30
   1e760:	b	1e6ec <__assert_fail@plt+0xcf8c>
   1e764:	cmn	sl, #2
   1e768:	beq	1ed4c <__assert_fail@plt+0xd5ec>
   1e76c:	cmn	sl, #1
   1e770:	mov	r5, sl
   1e774:	beq	1e788 <__assert_fail@plt+0xd028>
   1e778:	ldr	sl, [sp, #36]	; 0x24
   1e77c:	cmp	r9, r5
   1e780:	ble	1e78c <__assert_fail@plt+0xd02c>
   1e784:	b	1eda4 <__assert_fail@plt+0xd644>
   1e788:	ldr	sl, [sp, #36]	; 0x24
   1e78c:	cmp	r0, #24
   1e790:	bne	1eda4 <__assert_fail@plt+0xd644>
   1e794:	cmn	r5, #1
   1e798:	mov	r0, r5
   1e79c:	moveq	r0, r9
   1e7a0:	cmp	r0, #32768	; 0x8000
   1e7a4:	bge	1edb0 <__assert_fail@plt+0xd650>
   1e7a8:	ldr	r2, [sp, #40]	; 0x28
   1e7ac:	mov	r0, ip
   1e7b0:	mov	r1, r6
   1e7b4:	bl	1c708 <__assert_fail@plt+0xafa8>
   1e7b8:	ldr	r1, [r6, #40]	; 0x28
   1e7bc:	mov	r7, #0
   1e7c0:	cmp	sl, #0
   1e7c4:	add	r0, r1, r0
   1e7c8:	str	r0, [r6, #40]	; 0x28
   1e7cc:	beq	1ec38 <__assert_fail@plt+0xd4d8>
   1e7d0:	ldr	lr, [sp, #20]
   1e7d4:	orrs	r0, r5, r9
   1e7d8:	beq	1ec50 <__assert_fail@plt+0xd4f0>
   1e7dc:	mov	r0, #0
   1e7e0:	cmp	r9, #1
   1e7e4:	mov	r7, sl
   1e7e8:	str	r0, [sp, #32]
   1e7ec:	ldr	ip, [sp, #44]	; 0x2c
   1e7f0:	str	r5, [sp, #48]	; 0x30
   1e7f4:	bge	1ecf8 <__assert_fail@plt+0xd598>
   1e7f8:	ldrb	r0, [r7, #24]
   1e7fc:	cmp	r0, #17
   1e800:	bne	1e870 <__assert_fail@plt+0xd110>
   1e804:	ldr	r0, [r7, #20]
   1e808:	mov	r2, r7
   1e80c:	mov	r1, r2
   1e810:	ldr	r2, [r2, #4]
   1e814:	cmp	r2, #0
   1e818:	bne	1e80c <__assert_fail@plt+0xd0ac>
   1e81c:	ldr	r2, [r1, #8]
   1e820:	cmp	r2, #0
   1e824:	bne	1e80c <__assert_fail@plt+0xd0ac>
   1e828:	ldr	r2, [r1, #24]
   1e82c:	uxtb	r3, r2
   1e830:	cmp	r3, #17
   1e834:	ldreq	r3, [r1, #20]
   1e838:	cmpeq	r3, r0
   1e83c:	orreq	r2, r2, #524288	; 0x80000
   1e840:	streq	r2, [r1, #24]
   1e844:	ldr	r3, [r1]
   1e848:	cmp	r3, #0
   1e84c:	beq	1e870 <__assert_fail@plt+0xd110>
   1e850:	ldr	r2, [r3, #8]
   1e854:	cmp	r2, r1
   1e858:	mov	r1, r3
   1e85c:	beq	1e828 <__assert_fail@plt+0xd0c8>
   1e860:	cmp	r2, #0
   1e864:	mov	r1, r3
   1e868:	beq	1e828 <__assert_fail@plt+0xd0c8>
   1e86c:	b	1e80c <__assert_fail@plt+0xd0ac>
   1e870:	ldr	r1, [r8]
   1e874:	cmn	r5, #1
   1e878:	mov	r6, #10
   1e87c:	movweq	r6, #11
   1e880:	cmp	r1, #31
   1e884:	beq	1ed18 <__assert_fail@plt+0xd5b8>
   1e888:	ldr	r0, [lr]
   1e88c:	add	r2, r1, #1
   1e890:	add	sl, r0, r1, lsl #5
   1e894:	mvn	r0, #0
   1e898:	str	r2, [r8]
   1e89c:	str	r4, [sl, #4]!
   1e8a0:	str	r7, [sl, #4]
   1e8a4:	str	r4, [sl, #8]
   1e8a8:	str	r4, [sl, #12]
   1e8ac:	str	r4, [sl, #16]
   1e8b0:	str	r4, [sl, #20]
   1e8b4:	str	r6, [sl, #24]
   1e8b8:	str	r0, [sl, #28]
   1e8bc:	add	r0, r9, #2
   1e8c0:	str	sl, [r7]
   1e8c4:	cmp	r0, r5
   1e8c8:	bgt	1eba4 <__assert_fail@plt+0xd444>
   1e8cc:	mov	r6, sl
   1e8d0:	ldr	r1, [r8]
   1e8d4:	str	r0, [sp, #52]	; 0x34
   1e8d8:	cmp	r1, #31
   1e8dc:	beq	1eae8 <__assert_fail@plt+0xd388>
   1e8e0:	ldr	r0, [lr]
   1e8e4:	add	r3, r1, #1
   1e8e8:	add	r9, r0, r1, lsl #5
   1e8ec:	add	r2, r7, #20
   1e8f0:	sub	r5, fp, #80	; 0x50
   1e8f4:	str	r3, [r8]
   1e8f8:	str	r4, [r9, #4]!
   1e8fc:	str	r4, [r9, #4]
   1e900:	str	r4, [r9, #8]
   1e904:	ldm	r2, {r0, r1}
   1e908:	mvn	r2, #0
   1e90c:	str	r4, [r9, #12]
   1e910:	str	r4, [r9, #16]
   1e914:	str	r2, [r9, #28]
   1e918:	str	r0, [r9, #20]
   1e91c:	bic	r0, r1, #786432	; 0xc0000
   1e920:	str	r0, [r9, #24]
   1e924:	mov	r0, r9
   1e928:	str	r9, [fp, #-80]	; 0xffffffb0
   1e92c:	b	1e970 <__assert_fail@plt+0xd210>
   1e930:	add	r3, r1, #1
   1e934:	add	r0, r0, r1, lsl #5
   1e938:	add	r2, r7, #20
   1e93c:	str	r3, [r8]
   1e940:	str	r4, [r0, #4]!
   1e944:	mvn	r3, #0
   1e948:	str	r4, [r0, #4]
   1e94c:	str	r4, [r0, #8]
   1e950:	ldm	r2, {r1, r2}
   1e954:	str	r4, [r0, #12]
   1e958:	str	r4, [r0, #16]
   1e95c:	str	r3, [r0, #28]
   1e960:	str	r1, [r0, #20]
   1e964:	bic	r1, r2, #786432	; 0xc0000
   1e968:	str	r1, [r0, #24]
   1e96c:	str	r0, [r5]
   1e970:	str	sl, [r0]
   1e974:	ldr	r0, [r5]
   1e978:	ldr	r1, [r0, #24]
   1e97c:	orr	r1, r1, #262144	; 0x40000
   1e980:	str	r1, [r0, #24]
   1e984:	ldr	r0, [r7, #4]
   1e988:	ldr	sl, [r5]
   1e98c:	cmp	r0, #0
   1e990:	beq	1e9b0 <__assert_fail@plt+0xd250>
   1e994:	add	r5, sl, #4
   1e998:	mov	r7, r0
   1e99c:	ldr	r1, [r8]
   1e9a0:	cmp	r1, #31
   1e9a4:	beq	1e9f0 <__assert_fail@plt+0xd290>
   1e9a8:	ldr	r0, [lr]
   1e9ac:	b	1e930 <__assert_fail@plt+0xd1d0>
   1e9b0:	mov	r1, #0
   1e9b4:	mov	r0, r7
   1e9b8:	ldr	r7, [r7, #8]
   1e9bc:	cmp	r7, r1
   1e9c0:	cmpne	r7, #0
   1e9c4:	bne	1e9e0 <__assert_fail@plt+0xd280>
   1e9c8:	ldr	r7, [r0]
   1e9cc:	ldr	sl, [sl]
   1e9d0:	mov	r1, r0
   1e9d4:	cmp	r7, #0
   1e9d8:	bne	1e9b4 <__assert_fail@plt+0xd254>
   1e9dc:	b	1ea20 <__assert_fail@plt+0xd2c0>
   1e9e0:	add	r5, sl, #8
   1e9e4:	ldr	r1, [r8]
   1e9e8:	cmp	r1, #31
   1e9ec:	bne	1e9a8 <__assert_fail@plt+0xd248>
   1e9f0:	mov	r0, #996	; 0x3e4
   1e9f4:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1e9f8:	cmp	r0, #0
   1e9fc:	beq	1eb54 <__assert_fail@plt+0xd3f4>
   1ea00:	ldr	lr, [sp, #20]
   1ea04:	ldr	ip, [sp, #44]	; 0x2c
   1ea08:	ldr	r1, [lr]
   1ea0c:	str	r1, [r0]
   1ea10:	mov	r1, #0
   1ea14:	str	r0, [lr]
   1ea18:	str	r1, [r8]
   1ea1c:	b	1e930 <__assert_fail@plt+0xd1d0>
   1ea20:	mov	r7, r9
   1ea24:	ldr	r1, [r8]
   1ea28:	cmp	r1, #31
   1ea2c:	beq	1eb70 <__assert_fail@plt+0xd410>
   1ea30:	ldr	r0, [lr]
   1ea34:	add	r2, r1, #1
   1ea38:	add	r5, r0, r1, lsl #5
   1ea3c:	mov	r0, #16
   1ea40:	cmp	r7, #0
   1ea44:	str	r2, [r8]
   1ea48:	str	r4, [r5, #4]!
   1ea4c:	stmib	r5, {r6, r7}
   1ea50:	str	r4, [r5, #12]
   1ea54:	str	r4, [r5, #16]
   1ea58:	str	r4, [r5, #20]
   1ea5c:	str	r0, [r5, #24]
   1ea60:	mvn	r0, #0
   1ea64:	str	r0, [r5, #28]
   1ea68:	str	r5, [r6]
   1ea6c:	beq	1f1d8 <__assert_fail@plt+0xda78>
   1ea70:	str	r5, [r7]
   1ea74:	ldr	r1, [r8]
   1ea78:	cmp	r1, #31
   1ea7c:	beq	1eb18 <__assert_fail@plt+0xd3b8>
   1ea80:	ldr	r0, [lr]
   1ea84:	add	r2, r1, #1
   1ea88:	add	r6, r0, r1, lsl #5
   1ea8c:	mov	r0, #10
   1ea90:	ldr	r1, [sp, #52]	; 0x34
   1ea94:	str	r2, [r8]
   1ea98:	str	r4, [r6, #4]!
   1ea9c:	str	r5, [r6, #4]
   1eaa0:	str	r4, [r6, #8]
   1eaa4:	str	r4, [r6, #12]
   1eaa8:	str	r4, [r6, #16]
   1eaac:	str	r4, [r6, #20]
   1eab0:	str	r0, [r6, #24]
   1eab4:	mvn	r0, #0
   1eab8:	str	r0, [r6, #28]
   1eabc:	ldr	r0, [sp, #48]	; 0x30
   1eac0:	str	r6, [r5]
   1eac4:	cmp	r1, r0
   1eac8:	bge	1eba0 <__assert_fail@plt+0xd440>
   1eacc:	ldr	sl, [r7]
   1ead0:	mov	r0, r1
   1ead4:	add	r0, r1, #1
   1ead8:	ldr	r1, [r8]
   1eadc:	str	r0, [sp, #52]	; 0x34
   1eae0:	cmp	r1, #31
   1eae4:	bne	1e8e0 <__assert_fail@plt+0xd180>
   1eae8:	mov	r0, #996	; 0x3e4
   1eaec:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1eaf0:	cmp	r0, #0
   1eaf4:	beq	1eb48 <__assert_fail@plt+0xd3e8>
   1eaf8:	ldr	lr, [sp, #20]
   1eafc:	ldr	ip, [sp, #44]	; 0x2c
   1eb00:	ldr	r1, [lr]
   1eb04:	str	r1, [r0]
   1eb08:	mov	r1, #0
   1eb0c:	str	r0, [lr]
   1eb10:	str	r1, [r8]
   1eb14:	b	1e8e4 <__assert_fail@plt+0xd184>
   1eb18:	mov	r0, #996	; 0x3e4
   1eb1c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1eb20:	ldr	lr, [sp, #20]
   1eb24:	ldr	ip, [sp, #44]	; 0x2c
   1eb28:	cmp	r0, #0
   1eb2c:	beq	1f1d8 <__assert_fail@plt+0xda78>
   1eb30:	ldr	r1, [lr]
   1eb34:	str	r1, [r0]
   1eb38:	mov	r1, #0
   1eb3c:	str	r0, [lr]
   1eb40:	str	r1, [r8]
   1eb44:	b	1ea84 <__assert_fail@plt+0xd324>
   1eb48:	mov	r7, #0
   1eb4c:	str	r7, [fp, #-80]	; 0xffffffb0
   1eb50:	b	1eb5c <__assert_fail@plt+0xd3fc>
   1eb54:	mov	r7, #0
   1eb58:	str	r7, [r5]
   1eb5c:	ldr	ip, [sp, #44]	; 0x2c
   1eb60:	ldr	lr, [sp, #20]
   1eb64:	ldr	r1, [r8]
   1eb68:	cmp	r1, #31
   1eb6c:	bne	1ea30 <__assert_fail@plt+0xd2d0>
   1eb70:	mov	r0, #996	; 0x3e4
   1eb74:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1eb78:	ldr	lr, [sp, #20]
   1eb7c:	ldr	ip, [sp, #44]	; 0x2c
   1eb80:	cmp	r0, #0
   1eb84:	beq	1f1d8 <__assert_fail@plt+0xda78>
   1eb88:	ldr	r1, [lr]
   1eb8c:	str	r1, [r0]
   1eb90:	mov	r1, #0
   1eb94:	str	r0, [lr]
   1eb98:	str	r1, [r8]
   1eb9c:	b	1ea34 <__assert_fail@plt+0xd2d4>
   1eba0:	mov	sl, r6
   1eba4:	ldr	r5, [sp, #32]
   1eba8:	ldr	r6, [sp, #24]
   1ebac:	cmp	r5, #0
   1ebb0:	beq	1ec20 <__assert_fail@plt+0xd4c0>
   1ebb4:	ldr	r1, [r8]
   1ebb8:	cmp	r1, #31
   1ebbc:	beq	1ed74 <__assert_fail@plt+0xd614>
   1ebc0:	ldr	r0, [lr]
   1ebc4:	add	r2, r1, #1
   1ebc8:	add	r7, r0, r1, lsl #5
   1ebcc:	mov	r0, #0
   1ebd0:	mov	r1, #16
   1ebd4:	str	r2, [r8]
   1ebd8:	str	r0, [r7, #4]!
   1ebdc:	stmib	r7, {r5, sl}
   1ebe0:	str	r0, [r7, #12]
   1ebe4:	str	r0, [r7, #16]
   1ebe8:	str	r0, [r7, #20]
   1ebec:	str	r1, [r7, #24]
   1ebf0:	mvn	r1, #0
   1ebf4:	str	r1, [r7, #28]
   1ebf8:	str	r7, [r5]
   1ebfc:	str	r7, [sl]
   1ec00:	ldr	r1, [sp, #28]
   1ec04:	cmp	r1, #0
   1ec08:	beq	1f20c <__assert_fail@plt+0xdaac>
   1ec0c:	ldrb	r1, [ip, #4]
   1ec10:	cmp	r1, #23
   1ec14:	cmpne	r1, #11
   1ec18:	bne	1f20c <__assert_fail@plt+0xdaac>
   1ec1c:	b	1f220 <__assert_fail@plt+0xdac0>
   1ec20:	mov	r0, #0
   1ec24:	mov	r7, sl
   1ec28:	ldr	r1, [sp, #28]
   1ec2c:	cmp	r1, #0
   1ec30:	beq	1f20c <__assert_fail@plt+0xdaac>
   1ec34:	b	1ec0c <__assert_fail@plt+0xd4ac>
   1ec38:	ldr	ip, [sp, #44]	; 0x2c
   1ec3c:	clz	r0, r7
   1ec40:	cmp	r7, #0
   1ec44:	lsr	r0, r0, #5
   1ec48:	beq	1e648 <__assert_fail@plt+0xcee8>
   1ec4c:	b	1f200 <__assert_fail@plt+0xdaa0>
   1ec50:	ldr	ip, [sp, #44]	; 0x2c
   1ec54:	mov	r0, sl
   1ec58:	mov	r5, r0
   1ec5c:	ldr	r0, [r0, #4]
   1ec60:	cmp	r0, #0
   1ec64:	bne	1ec58 <__assert_fail@plt+0xd4f8>
   1ec68:	ldr	r0, [r5, #8]
   1ec6c:	cmp	r0, #0
   1ec70:	bne	1ec58 <__assert_fail@plt+0xd4f8>
   1ec74:	ldr	r0, [r5, #24]
   1ec78:	movw	r1, #255	; 0xff
   1ec7c:	movt	r1, #4
   1ec80:	and	r0, r0, r1
   1ec84:	cmp	r0, #3
   1ec88:	beq	1ecc0 <__assert_fail@plt+0xd560>
   1ec8c:	cmp	r0, #6
   1ec90:	bne	1eccc <__assert_fail@plt+0xd56c>
   1ec94:	ldr	r9, [r5, #20]
   1ec98:	ldr	r0, [r9]
   1ec9c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1eca0:	ldr	r0, [r9, #4]
   1eca4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1eca8:	ldr	r0, [r9, #8]
   1ecac:	bl	14538 <__assert_fail@plt+0x2dd8>
   1ecb0:	ldr	r0, [r9, #12]
   1ecb4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1ecb8:	mov	r0, r9
   1ecbc:	b	1ecc4 <__assert_fail@plt+0xd564>
   1ecc0:	ldr	r0, [r5, #20]
   1ecc4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1ecc8:	ldr	ip, [sp, #44]	; 0x2c
   1eccc:	ldr	r1, [r5]
   1ecd0:	cmp	r1, #0
   1ecd4:	beq	1f1f0 <__assert_fail@plt+0xda90>
   1ecd8:	ldr	r0, [r1, #8]
   1ecdc:	cmp	r0, r5
   1ece0:	mov	r5, r1
   1ece4:	beq	1ec74 <__assert_fail@plt+0xd514>
   1ece8:	cmp	r0, #0
   1ecec:	mov	r5, r1
   1ecf0:	beq	1ec74 <__assert_fail@plt+0xd514>
   1ecf4:	b	1ec58 <__assert_fail@plt+0xd4f8>
   1ecf8:	mov	r5, sl
   1ecfc:	str	r9, [sp, #8]
   1ed00:	beq	1f010 <__assert_fail@plt+0xd8b0>
   1ed04:	ldr	r9, [sp, #36]	; 0x24
   1ed08:	mov	r0, #2
   1ed0c:	ldr	r5, [r9]
   1ed10:	mov	sl, r9
   1ed14:	b	1ee50 <__assert_fail@plt+0xd6f0>
   1ed18:	mov	r0, #996	; 0x3e4
   1ed1c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1ed20:	ldr	lr, [sp, #20]
   1ed24:	ldr	ip, [sp, #44]	; 0x2c
   1ed28:	cmp	r0, #0
   1ed2c:	beq	1f1d8 <__assert_fail@plt+0xda78>
   1ed30:	ldr	r1, [lr]
   1ed34:	ldr	r5, [sp, #48]	; 0x30
   1ed38:	str	r1, [r0]
   1ed3c:	mov	r1, #0
   1ed40:	str	r0, [lr]
   1ed44:	str	r1, [r8]
   1ed48:	b	1e88c <__assert_fail@plt+0xd12c>
   1ed4c:	ldr	sl, [sp, #52]	; 0x34
   1ed50:	ldr	r1, [sp, #12]
   1ed54:	cmp	r1, #0
   1ed58:	bne	1e688 <__assert_fail@plt+0xcf28>
   1ed5c:	ldr	r1, [sp, #16]
   1ed60:	cmp	r0, #2
   1ed64:	mov	r0, #10
   1ed68:	movweq	r0, #9
   1ed6c:	str	r0, [r1]
   1ed70:	b	1e630 <__assert_fail@plt+0xced0>
   1ed74:	mov	r0, #996	; 0x3e4
   1ed78:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1ed7c:	cmp	r0, #0
   1ed80:	beq	1edc0 <__assert_fail@plt+0xd660>
   1ed84:	ldr	r2, [sp, #20]
   1ed88:	ldr	ip, [sp, #44]	; 0x2c
   1ed8c:	ldr	r1, [r2]
   1ed90:	str	r1, [r0]
   1ed94:	mov	r1, #0
   1ed98:	str	r0, [r2]
   1ed9c:	str	r1, [r8]
   1eda0:	b	1ebc4 <__assert_fail@plt+0xd464>
   1eda4:	ldr	r0, [sp, #16]
   1eda8:	mov	r1, #10
   1edac:	b	1edb8 <__assert_fail@plt+0xd658>
   1edb0:	ldr	r0, [sp, #16]
   1edb4:	mov	r1, #15
   1edb8:	str	r1, [r0]
   1edbc:	b	1e634 <__assert_fail@plt+0xced4>
   1edc0:	ldr	ip, [sp, #44]	; 0x2c
   1edc4:	b	1e630 <__assert_fail@plt+0xced0>
   1edc8:	mov	r0, #996	; 0x3e4
   1edcc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1edd0:	cmp	r0, #0
   1edd4:	beq	1edf8 <__assert_fail@plt+0xd698>
   1edd8:	ldr	lr, [sp, #20]
   1eddc:	ldr	ip, [sp, #44]	; 0x2c
   1ede0:	ldr	r1, [lr]
   1ede4:	str	r1, [r0]
   1ede8:	mov	r1, #0
   1edec:	str	r0, [lr]
   1edf0:	str	r1, [r8]
   1edf4:	b	1ee64 <__assert_fail@plt+0xd704>
   1edf8:	mov	sl, #0
   1edfc:	str	sl, [fp, #-80]	; 0xffffffb0
   1ee00:	b	1ee0c <__assert_fail@plt+0xd6ac>
   1ee04:	mov	sl, #0
   1ee08:	str	sl, [r6]
   1ee0c:	ldr	ip, [sp, #44]	; 0x2c
   1ee10:	ldr	lr, [sp, #20]
   1ee14:	ldr	r1, [r8]
   1ee18:	cmp	r1, #31
   1ee1c:	bne	1efb0 <__assert_fail@plt+0xd850>
   1ee20:	mov	r0, #996	; 0x3e4
   1ee24:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1ee28:	ldr	lr, [sp, #20]
   1ee2c:	ldr	ip, [sp, #44]	; 0x2c
   1ee30:	cmp	r0, #0
   1ee34:	beq	1f1d8 <__assert_fail@plt+0xda78>
   1ee38:	ldr	r1, [lr]
   1ee3c:	str	r1, [r0]
   1ee40:	mov	r1, #0
   1ee44:	str	r0, [lr]
   1ee48:	str	r1, [r8]
   1ee4c:	b	1efb4 <__assert_fail@plt+0xd854>
   1ee50:	ldr	r1, [r8]
   1ee54:	str	r0, [sp, #52]	; 0x34
   1ee58:	cmp	r1, #31
   1ee5c:	beq	1edc8 <__assert_fail@plt+0xd668>
   1ee60:	ldr	r0, [lr]
   1ee64:	add	r3, r1, #1
   1ee68:	add	r7, r0, r1, lsl #5
   1ee6c:	add	r2, sl, #20
   1ee70:	sub	r6, fp, #80	; 0x50
   1ee74:	str	r3, [r8]
   1ee78:	str	r4, [r7, #4]!
   1ee7c:	str	r4, [r7, #4]
   1ee80:	str	r4, [r7, #8]
   1ee84:	ldm	r2, {r0, r1}
   1ee88:	mvn	r2, #0
   1ee8c:	str	r4, [r7, #12]
   1ee90:	str	r4, [r7, #16]
   1ee94:	str	r2, [r7, #28]
   1ee98:	str	r0, [r7, #20]
   1ee9c:	bic	r0, r1, #786432	; 0xc0000
   1eea0:	str	r0, [r7, #24]
   1eea4:	mov	r0, r7
   1eea8:	str	r7, [fp, #-80]	; 0xffffffb0
   1eeac:	b	1eef0 <__assert_fail@plt+0xd790>
   1eeb0:	add	r3, r1, #1
   1eeb4:	add	r0, r0, r1, lsl #5
   1eeb8:	add	r2, sl, #20
   1eebc:	str	r3, [r8]
   1eec0:	str	r4, [r0, #4]!
   1eec4:	mvn	r3, #0
   1eec8:	str	r4, [r0, #4]
   1eecc:	str	r4, [r0, #8]
   1eed0:	ldm	r2, {r1, r2}
   1eed4:	str	r4, [r0, #12]
   1eed8:	str	r4, [r0, #16]
   1eedc:	str	r3, [r0, #28]
   1eee0:	str	r1, [r0, #20]
   1eee4:	bic	r1, r2, #786432	; 0xc0000
   1eee8:	str	r1, [r0, #24]
   1eeec:	str	r0, [r6]
   1eef0:	str	r5, [r0]
   1eef4:	ldr	r0, [r6]
   1eef8:	ldr	r1, [r0, #24]
   1eefc:	orr	r1, r1, #262144	; 0x40000
   1ef00:	str	r1, [r0, #24]
   1ef04:	ldr	r0, [sl, #4]
   1ef08:	ldr	r5, [r6]
   1ef0c:	cmp	r0, #0
   1ef10:	beq	1ef30 <__assert_fail@plt+0xd7d0>
   1ef14:	add	r6, r5, #4
   1ef18:	mov	sl, r0
   1ef1c:	ldr	r1, [r8]
   1ef20:	cmp	r1, #31
   1ef24:	beq	1ef70 <__assert_fail@plt+0xd810>
   1ef28:	ldr	r0, [lr]
   1ef2c:	b	1eeb0 <__assert_fail@plt+0xd750>
   1ef30:	mov	r1, #0
   1ef34:	mov	r0, sl
   1ef38:	ldr	sl, [sl, #8]
   1ef3c:	cmp	sl, r1
   1ef40:	cmpne	sl, #0
   1ef44:	bne	1ef60 <__assert_fail@plt+0xd800>
   1ef48:	ldr	sl, [r0]
   1ef4c:	ldr	r5, [r5]
   1ef50:	mov	r1, r0
   1ef54:	cmp	sl, #0
   1ef58:	bne	1ef34 <__assert_fail@plt+0xd7d4>
   1ef5c:	b	1efa0 <__assert_fail@plt+0xd840>
   1ef60:	add	r6, r5, #8
   1ef64:	ldr	r1, [r8]
   1ef68:	cmp	r1, #31
   1ef6c:	bne	1ef28 <__assert_fail@plt+0xd7c8>
   1ef70:	mov	r0, #996	; 0x3e4
   1ef74:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1ef78:	cmp	r0, #0
   1ef7c:	beq	1ee04 <__assert_fail@plt+0xd6a4>
   1ef80:	ldr	lr, [sp, #20]
   1ef84:	ldr	ip, [sp, #44]	; 0x2c
   1ef88:	ldr	r1, [lr]
   1ef8c:	str	r1, [r0]
   1ef90:	mov	r1, #0
   1ef94:	str	r0, [lr]
   1ef98:	str	r1, [r8]
   1ef9c:	b	1eeb0 <__assert_fail@plt+0xd750>
   1efa0:	mov	sl, r7
   1efa4:	ldr	r1, [r8]
   1efa8:	cmp	r1, #31
   1efac:	beq	1ee20 <__assert_fail@plt+0xd6c0>
   1efb0:	ldr	r0, [lr]
   1efb4:	add	r2, r1, #1
   1efb8:	add	r1, r0, r1, lsl #5
   1efbc:	mov	r0, #16
   1efc0:	cmp	sl, #0
   1efc4:	str	r2, [r8]
   1efc8:	str	r4, [r1, #4]!
   1efcc:	stmib	r1, {r9, sl}
   1efd0:	str	r4, [r1, #12]
   1efd4:	str	r4, [r1, #16]
   1efd8:	str	r4, [r1, #20]
   1efdc:	str	r0, [r1, #24]
   1efe0:	mvn	r0, #0
   1efe4:	str	r0, [r1, #28]
   1efe8:	str	r1, [r9]
   1efec:	beq	1f1d8 <__assert_fail@plt+0xda78>
   1eff0:	mov	r5, r1
   1eff4:	str	r1, [sl]
   1eff8:	ldr	r2, [sp, #52]	; 0x34
   1effc:	ldr	r1, [sp, #8]
   1f000:	mov	r9, r5
   1f004:	add	r0, r2, #1
   1f008:	cmp	r2, r1
   1f00c:	blt	1ee50 <__assert_fail@plt+0xd6f0>
   1f010:	ldr	r1, [sp, #48]	; 0x30
   1f014:	ldr	r2, [sp, #8]
   1f018:	mov	r0, #0
   1f01c:	cmp	r2, r1
   1f020:	bne	1f03c <__assert_fail@plt+0xd8dc>
   1f024:	ldr	r6, [sp, #24]
   1f028:	mov	r7, r5
   1f02c:	ldr	r1, [sp, #28]
   1f030:	cmp	r1, #0
   1f034:	beq	1f20c <__assert_fail@plt+0xdaac>
   1f038:	b	1ec0c <__assert_fail@plt+0xd4ac>
   1f03c:	mov	r9, sl
   1f040:	ldr	r1, [r8]
   1f044:	str	r5, [sp, #32]
   1f048:	ldr	r6, [r9], #20
   1f04c:	cmp	r1, #31
   1f050:	beq	1f198 <__assert_fail@plt+0xda38>
   1f054:	ldr	r0, [lr]
   1f058:	add	r2, r1, #1
   1f05c:	add	r7, r0, r1, lsl #5
   1f060:	str	r2, [r8]
   1f064:	str	r4, [r7, #4]!
   1f068:	mvn	r2, #0
   1f06c:	str	r4, [r7, #4]
   1f070:	str	r4, [r7, #8]
   1f074:	ldm	r9, {r0, r1}
   1f078:	str	r4, [r7, #12]
   1f07c:	str	r4, [r7, #16]
   1f080:	str	r2, [r7, #28]
   1f084:	sub	r9, fp, #80	; 0x50
   1f088:	str	r0, [r7, #20]
   1f08c:	bic	r0, r1, #786432	; 0xc0000
   1f090:	str	r0, [r7, #24]
   1f094:	mov	r0, r7
   1f098:	str	r7, [fp, #-80]	; 0xffffffb0
   1f09c:	b	1f0e0 <__assert_fail@plt+0xd980>
   1f0a0:	add	r3, r1, #1
   1f0a4:	add	r0, r0, r1, lsl #5
   1f0a8:	add	r2, sl, #20
   1f0ac:	str	r3, [r8]
   1f0b0:	str	r4, [r0, #4]!
   1f0b4:	mvn	r3, #0
   1f0b8:	str	r4, [r0, #4]
   1f0bc:	str	r4, [r0, #8]
   1f0c0:	ldm	r2, {r1, r2}
   1f0c4:	str	r4, [r0, #12]
   1f0c8:	str	r4, [r0, #16]
   1f0cc:	str	r3, [r0, #28]
   1f0d0:	str	r1, [r0, #20]
   1f0d4:	bic	r1, r2, #786432	; 0xc0000
   1f0d8:	str	r1, [r0, #24]
   1f0dc:	str	r0, [r9]
   1f0e0:	str	r6, [r0]
   1f0e4:	ldr	r0, [r9]
   1f0e8:	ldr	r1, [r0, #24]
   1f0ec:	orr	r1, r1, #262144	; 0x40000
   1f0f0:	str	r1, [r0, #24]
   1f0f4:	ldr	r0, [sl, #4]
   1f0f8:	ldr	r6, [r9]
   1f0fc:	cmp	r0, #0
   1f100:	beq	1f120 <__assert_fail@plt+0xd9c0>
   1f104:	add	r9, r6, #4
   1f108:	mov	sl, r0
   1f10c:	ldr	r1, [r8]
   1f110:	cmp	r1, #31
   1f114:	beq	1f168 <__assert_fail@plt+0xda08>
   1f118:	ldr	r0, [lr]
   1f11c:	b	1f0a0 <__assert_fail@plt+0xd940>
   1f120:	ldr	r5, [sp, #48]	; 0x30
   1f124:	ldr	r9, [sp, #8]
   1f128:	mov	r1, #0
   1f12c:	mov	r0, sl
   1f130:	ldr	sl, [sl, #8]
   1f134:	cmp	sl, r1
   1f138:	cmpne	sl, #0
   1f13c:	bne	1f158 <__assert_fail@plt+0xd9f8>
   1f140:	ldr	sl, [r0]
   1f144:	ldr	r6, [r6]
   1f148:	mov	r1, r0
   1f14c:	cmp	sl, #0
   1f150:	bne	1f12c <__assert_fail@plt+0xd9cc>
   1f154:	b	1e7f8 <__assert_fail@plt+0xd098>
   1f158:	add	r9, r6, #8
   1f15c:	ldr	r1, [r8]
   1f160:	cmp	r1, #31
   1f164:	bne	1f118 <__assert_fail@plt+0xd9b8>
   1f168:	mov	r0, #996	; 0x3e4
   1f16c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f170:	cmp	r0, #0
   1f174:	beq	1f1d0 <__assert_fail@plt+0xda70>
   1f178:	ldr	lr, [sp, #20]
   1f17c:	ldr	ip, [sp, #44]	; 0x2c
   1f180:	ldr	r1, [lr]
   1f184:	str	r1, [r0]
   1f188:	mov	r1, #0
   1f18c:	str	r0, [lr]
   1f190:	str	r1, [r8]
   1f194:	b	1f0a0 <__assert_fail@plt+0xd940>
   1f198:	mov	r0, #996	; 0x3e4
   1f19c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f1a0:	cmp	r0, #0
   1f1a4:	beq	1f1c8 <__assert_fail@plt+0xda68>
   1f1a8:	ldr	lr, [sp, #20]
   1f1ac:	ldr	ip, [sp, #44]	; 0x2c
   1f1b0:	ldr	r1, [lr]
   1f1b4:	str	r1, [r0]
   1f1b8:	mov	r1, #0
   1f1bc:	str	r0, [lr]
   1f1c0:	str	r1, [r8]
   1f1c4:	b	1f058 <__assert_fail@plt+0xd8f8>
   1f1c8:	str	r4, [fp, #-80]	; 0xffffffb0
   1f1cc:	b	1f1d4 <__assert_fail@plt+0xda74>
   1f1d0:	str	r4, [r9]
   1f1d4:	ldr	ip, [sp, #44]	; 0x2c
   1f1d8:	ldr	r0, [sp, #16]
   1f1dc:	ldr	r6, [sp, #24]
   1f1e0:	ldr	sl, [sp, #36]	; 0x24
   1f1e4:	mov	r1, #12
   1f1e8:	mov	r7, #0
   1f1ec:	str	r1, [r0]
   1f1f0:	clz	r0, r7
   1f1f4:	cmp	r7, #0
   1f1f8:	lsr	r0, r0, #5
   1f1fc:	beq	1e648 <__assert_fail@plt+0xcee8>
   1f200:	ldr	r1, [sp, #28]
   1f204:	cmp	r1, #0
   1f208:	bne	1ec0c <__assert_fail@plt+0xd4ac>
   1f20c:	ldrb	r0, [ip, #4]
   1f210:	mov	sl, r7
   1f214:	cmp	r0, #23
   1f218:	bls	1e530 <__assert_fail@plt+0xcdd0>
   1f21c:	b	1f2d4 <__assert_fail@plt+0xdb74>
   1f220:	ldr	r8, [sp, #16]
   1f224:	movw	r6, #255	; 0xff
   1f228:	cmp	r0, #0
   1f22c:	movt	r6, #4
   1f230:	bne	1f2c8 <__assert_fail@plt+0xdb68>
   1f234:	mov	r5, r7
   1f238:	ldr	r7, [r7, #4]
   1f23c:	cmp	r7, #0
   1f240:	bne	1f234 <__assert_fail@plt+0xdad4>
   1f244:	ldr	r7, [r5, #8]
   1f248:	cmp	r7, #0
   1f24c:	bne	1f234 <__assert_fail@plt+0xdad4>
   1f250:	ldr	r0, [r5, #24]
   1f254:	and	r0, r0, r6
   1f258:	cmp	r0, #3
   1f25c:	beq	1f294 <__assert_fail@plt+0xdb34>
   1f260:	cmp	r0, #6
   1f264:	bne	1f29c <__assert_fail@plt+0xdb3c>
   1f268:	ldr	r4, [r5, #20]
   1f26c:	ldr	r0, [r4]
   1f270:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f274:	ldr	r0, [r4, #4]
   1f278:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f27c:	ldr	r0, [r4, #8]
   1f280:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f284:	ldr	r0, [r4, #12]
   1f288:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f28c:	mov	r0, r4
   1f290:	b	1f298 <__assert_fail@plt+0xdb38>
   1f294:	ldr	r0, [r5, #20]
   1f298:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f29c:	ldr	r0, [r5]
   1f2a0:	cmp	r0, #0
   1f2a4:	beq	1f2c8 <__assert_fail@plt+0xdb68>
   1f2a8:	ldr	r7, [r0, #8]
   1f2ac:	cmp	r7, r5
   1f2b0:	mov	r5, r0
   1f2b4:	beq	1f250 <__assert_fail@plt+0xdaf0>
   1f2b8:	cmp	r7, #0
   1f2bc:	mov	r5, r0
   1f2c0:	beq	1f250 <__assert_fail@plt+0xdaf0>
   1f2c4:	b	1f234 <__assert_fail@plt+0xdad4>
   1f2c8:	mov	r0, #13
   1f2cc:	mov	sl, #0
   1f2d0:	str	r0, [r8]
   1f2d4:	mov	r0, sl
   1f2d8:	sub	sp, fp, #28
   1f2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2e0:	mov	r7, r4
   1f2e4:	mov	r6, r9
   1f2e8:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1f2ec:	cmp	sl, #0
   1f2f0:	beq	1f3a0 <__assert_fail@plt+0xdc40>
   1f2f4:	movw	r6, #255	; 0xff
   1f2f8:	movt	r6, #4
   1f2fc:	mov	r5, sl
   1f300:	ldr	sl, [sl, #4]
   1f304:	cmp	sl, #0
   1f308:	bne	1f2fc <__assert_fail@plt+0xdb9c>
   1f30c:	ldr	sl, [r5, #8]
   1f310:	cmp	sl, #0
   1f314:	bne	1f2fc <__assert_fail@plt+0xdb9c>
   1f318:	ldr	r0, [r5, #24]
   1f31c:	and	r0, r0, r6
   1f320:	cmp	r0, #3
   1f324:	beq	1f35c <__assert_fail@plt+0xdbfc>
   1f328:	cmp	r0, #6
   1f32c:	bne	1f364 <__assert_fail@plt+0xdc04>
   1f330:	ldr	r4, [r5, #20]
   1f334:	ldr	r0, [r4]
   1f338:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f33c:	ldr	r0, [r4, #4]
   1f340:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f344:	ldr	r0, [r4, #8]
   1f348:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f34c:	ldr	r0, [r4, #12]
   1f350:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f354:	mov	r0, r4
   1f358:	b	1f360 <__assert_fail@plt+0xdc00>
   1f35c:	ldr	r0, [r5, #20]
   1f360:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f364:	ldr	r0, [r5]
   1f368:	cmp	r0, #0
   1f36c:	beq	1f390 <__assert_fail@plt+0xdc30>
   1f370:	ldr	sl, [r0, #8]
   1f374:	cmp	sl, r5
   1f378:	mov	r5, r0
   1f37c:	beq	1f318 <__assert_fail@plt+0xdbb8>
   1f380:	cmp	sl, #0
   1f384:	mov	r5, r0
   1f388:	beq	1f318 <__assert_fail@plt+0xdbb8>
   1f38c:	b	1f2fc <__assert_fail@plt+0xdb9c>
   1f390:	mov	sl, #0
   1f394:	mov	r0, sl
   1f398:	sub	sp, fp, #28
   1f39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3a0:	mov	sl, #0
   1f3a4:	mov	r0, sl
   1f3a8:	sub	sp, fp, #28
   1f3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3b0:	cmp	r0, #2
   1f3b4:	blt	1f3d0 <__assert_fail@plt+0xdc70>
   1f3b8:	ldr	r0, [sl, #36]	; 0x24
   1f3bc:	cmp	r0, #0
   1f3c0:	bne	1e178 <__assert_fail@plt+0xca18>
   1f3c4:	ldrb	r0, [sl, #16]
   1f3c8:	tst	r0, #1
   1f3cc:	bne	1e178 <__assert_fail@plt+0xca18>
   1f3d0:	ldr	r0, [sl]
   1f3d4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f3d8:	ldr	r0, [sl, #4]
   1f3dc:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f3e0:	ldr	r0, [sl, #8]
   1f3e4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f3e8:	ldr	r0, [sl, #12]
   1f3ec:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f3f0:	mov	r0, sl
   1f3f4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f3f8:	ldr	r1, [r8, #64]	; 0x40
   1f3fc:	cmp	r1, #31
   1f400:	beq	1f8f8 <__assert_fail@plt+0xe198>
   1f404:	ldr	r0, [r8, #56]	; 0x38
   1f408:	add	r2, r1, #1
   1f40c:	add	r0, r0, r1, lsl #5
   1f410:	ldr	lr, [sp, #44]	; 0x2c
   1f414:	mov	r1, #3
   1f418:	vmov.i32	q8, #0	; 0x00000000
   1f41c:	str	r2, [r8, #64]	; 0x40
   1f420:	mov	r2, #0
   1f424:	add	r7, r0, #4
   1f428:	str	r2, [r0, #20]
   1f42c:	str	r4, [r0, #24]
   1f430:	str	r1, [r0, #28]
   1f434:	mov	r0, #28
   1f438:	mov	r1, r7
   1f43c:	vst1.32	{d16-d17}, [r1], r0
   1f440:	mvn	r0, #0
   1f444:	str	r0, [r1]
   1f448:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1f44c:	mov	r0, #996	; 0x3e4
   1f450:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f454:	cmp	r0, #0
   1f458:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1f45c:	ldr	r1, [r8, #56]	; 0x38
   1f460:	ldr	lr, [sp, #44]	; 0x2c
   1f464:	str	r1, [r0]
   1f468:	mov	r1, #0
   1f46c:	str	r1, [r8, #64]	; 0x40
   1f470:	str	r0, [r8, #56]	; 0x38
   1f474:	b	1d568 <__assert_fail@plt+0xbe08>
   1f478:	mov	r9, r0
   1f47c:	b	1f538 <__assert_fail@plt+0xddd8>
   1f480:	mov	r9, #7
   1f484:	b	1f538 <__assert_fail@plt+0xddd8>
   1f488:	mov	r0, #2
   1f48c:	b	1f930 <__assert_fail@plt+0xe1d0>
   1f490:	mov	r0, #6
   1f494:	b	1e3d4 <__assert_fail@plt+0xcc74>
   1f498:	mov	r0, #996	; 0x3e4
   1f49c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f4a0:	cmp	r0, #0
   1f4a4:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1f4a8:	ldr	r1, [r8, #56]	; 0x38
   1f4ac:	ldr	lr, [sp, #44]	; 0x2c
   1f4b0:	str	r1, [r0]
   1f4b4:	mov	r1, #0
   1f4b8:	str	r1, [r8, #64]	; 0x40
   1f4bc:	str	r0, [r8, #56]	; 0x38
   1f4c0:	b	1d640 <__assert_fail@plt+0xbee0>
   1f4c4:	mov	r0, #996	; 0x3e4
   1f4c8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f4cc:	cmp	r0, #0
   1f4d0:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1f4d4:	ldr	r1, [r8, #56]	; 0x38
   1f4d8:	ldr	r3, [sp, #24]
   1f4dc:	ldr	lr, [sp, #44]	; 0x2c
   1f4e0:	str	r1, [r0]
   1f4e4:	mov	r1, #0
   1f4e8:	str	r1, [r8, #64]	; 0x40
   1f4ec:	str	r0, [r8, #56]	; 0x38
   1f4f0:	b	1d804 <__assert_fail@plt+0xc0a4>
   1f4f4:	mov	r0, r4
   1f4f8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f4fc:	mov	r0, r5
   1f500:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f504:	b	1e3d0 <__assert_fail@plt+0xcc70>
   1f508:	mov	r0, #996	; 0x3e4
   1f50c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f510:	cmp	r0, #0
   1f514:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1f518:	ldr	r1, [r8, #56]	; 0x38
   1f51c:	ldr	lr, [sp, #44]	; 0x2c
   1f520:	str	r1, [r0]
   1f524:	mov	r1, #0
   1f528:	str	r1, [r8, #64]	; 0x40
   1f52c:	str	r0, [r8, #56]	; 0x38
   1f530:	b	1d5e4 <__assert_fail@plt+0xbe84>
   1f534:	mov	r9, #3
   1f538:	ldr	r0, [sp, #16]
   1f53c:	ldr	r4, [sp, #52]	; 0x34
   1f540:	ldr	sl, [sp, #48]	; 0x30
   1f544:	str	r9, [r0]
   1f548:	ldr	r6, [sp, #40]	; 0x28
   1f54c:	mov	r0, r4
   1f550:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f554:	ldr	r0, [sl]
   1f558:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f55c:	ldr	r0, [sl, #4]
   1f560:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f564:	ldr	r0, [sl, #8]
   1f568:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f56c:	ldr	r0, [sl, #12]
   1f570:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f574:	mov	r0, sl
   1f578:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f57c:	ldr	r0, [sp, #16]
   1f580:	mov	r7, #0
   1f584:	mov	sl, #0
   1f588:	ldr	r0, [r0]
   1f58c:	cmp	r0, #0
   1f590:	ldr	lr, [sp, #44]	; 0x2c
   1f594:	beq	1e4e0 <__assert_fail@plt+0xcd80>
   1f598:	b	1f2d4 <__assert_fail@plt+0xdb74>
   1f59c:	mov	r0, #996	; 0x3e4
   1f5a0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f5a4:	cmp	r0, #0
   1f5a8:	beq	1f92c <__assert_fail@plt+0xe1cc>
   1f5ac:	ldr	r1, [r8, #56]	; 0x38
   1f5b0:	ldr	lr, [sp, #44]	; 0x2c
   1f5b4:	str	r1, [r0]
   1f5b8:	mov	r1, #0
   1f5bc:	str	r1, [r8, #64]	; 0x40
   1f5c0:	str	r0, [r8, #56]	; 0x38
   1f5c4:	b	1e194 <__assert_fail@plt+0xca34>
   1f5c8:	mov	r0, #996	; 0x3e4
   1f5cc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f5d0:	cmp	r0, #0
   1f5d4:	beq	1f92c <__assert_fail@plt+0xe1cc>
   1f5d8:	ldr	r1, [r8, #56]	; 0x38
   1f5dc:	ldr	lr, [sp, #44]	; 0x2c
   1f5e0:	str	r1, [r0]
   1f5e4:	mov	r1, #0
   1f5e8:	str	r1, [r8, #64]	; 0x40
   1f5ec:	str	r0, [r8, #56]	; 0x38
   1f5f0:	b	1e240 <__assert_fail@plt+0xcae0>
   1f5f4:	mov	r0, #996	; 0x3e4
   1f5f8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f5fc:	cmp	r0, #0
   1f600:	beq	1f92c <__assert_fail@plt+0xe1cc>
   1f604:	ldr	r1, [r8, #56]	; 0x38
   1f608:	ldr	lr, [sp, #44]	; 0x2c
   1f60c:	str	r1, [r0]
   1f610:	mov	r1, #0
   1f614:	str	r1, [r8, #64]	; 0x40
   1f618:	str	r0, [r8, #56]	; 0x38
   1f61c:	b	1e28c <__assert_fail@plt+0xcb2c>
   1f620:	mov	r0, #996	; 0x3e4
   1f624:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f628:	cmp	r0, #0
   1f62c:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1f630:	ldr	r1, [r8, #56]	; 0x38
   1f634:	ldr	lr, [sp, #44]	; 0x2c
   1f638:	mov	r6, sl
   1f63c:	str	r1, [r0]
   1f640:	mov	r1, #0
   1f644:	str	r1, [r8, #64]	; 0x40
   1f648:	str	r0, [r8, #56]	; 0x38
   1f64c:	b	1e49c <__assert_fail@plt+0xcd3c>
   1f650:	mov	r0, r4
   1f654:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f658:	ldr	lr, [sp, #44]	; 0x2c
   1f65c:	mov	r7, r9
   1f660:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1f664:	mov	r0, #996	; 0x3e4
   1f668:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f66c:	cmp	r0, #0
   1f670:	beq	1f7e0 <__assert_fail@plt+0xe080>
   1f674:	ldr	r1, [r8, #56]	; 0x38
   1f678:	ldr	r7, [sp, #24]
   1f67c:	ldr	lr, [sp, #44]	; 0x2c
   1f680:	mov	sl, #0
   1f684:	str	r1, [r0]
   1f688:	mov	r1, #0
   1f68c:	str	r1, [r8, #64]	; 0x40
   1f690:	str	r0, [r8, #56]	; 0x38
   1f694:	b	1e33c <__assert_fail@plt+0xcbdc>
   1f698:	mov	r0, #996	; 0x3e4
   1f69c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f6a0:	cmp	r0, #0
   1f6a4:	beq	1f8d4 <__assert_fail@plt+0xe174>
   1f6a8:	ldr	r1, [r8, #56]	; 0x38
   1f6ac:	ldr	r7, [sp, #24]
   1f6b0:	ldr	lr, [sp, #44]	; 0x2c
   1f6b4:	mov	sl, #0
   1f6b8:	str	r1, [r0]
   1f6bc:	mov	r1, #0
   1f6c0:	str	r1, [r8, #64]	; 0x40
   1f6c4:	str	r0, [r8, #56]	; 0x38
   1f6c8:	b	1d7ac <__assert_fail@plt+0xc04c>
   1f6cc:	mov	r0, #996	; 0x3e4
   1f6d0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f6d4:	cmp	r0, #0
   1f6d8:	beq	1f8e0 <__assert_fail@plt+0xe180>
   1f6dc:	ldr	r1, [r8, #56]	; 0x38
   1f6e0:	ldr	r7, [sp, #24]
   1f6e4:	ldr	lr, [sp, #44]	; 0x2c
   1f6e8:	mov	sl, #0
   1f6ec:	str	r1, [r0]
   1f6f0:	mov	r1, #0
   1f6f4:	str	r1, [r8, #64]	; 0x40
   1f6f8:	str	r0, [r8, #56]	; 0x38
   1f6fc:	b	1e2e4 <__assert_fail@plt+0xcb84>
   1f700:	mov	r0, #996	; 0x3e4
   1f704:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f708:	cmp	r0, #0
   1f70c:	beq	1f730 <__assert_fail@plt+0xdfd0>
   1f710:	ldr	r1, [r8, #56]	; 0x38
   1f714:	ldr	r7, [sp, #24]
   1f718:	ldr	lr, [sp, #44]	; 0x2c
   1f71c:	str	r1, [r0]
   1f720:	mov	r1, #0
   1f724:	str	r1, [r8, #64]	; 0x40
   1f728:	str	r0, [r8, #56]	; 0x38
   1f72c:	b	1e3fc <__assert_fail@plt+0xcc9c>
   1f730:	mov	r0, #12
   1f734:	ldr	r1, [sp, #16]
   1f738:	mov	sl, #0
   1f73c:	str	r0, [r1]
   1f740:	mov	r0, sl
   1f744:	sub	sp, fp, #28
   1f748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f74c:	mov	r4, #0
   1f750:	mov	r9, #0
   1f754:	b	1f760 <__assert_fail@plt+0xe000>
   1f758:	mov	r9, #4
   1f75c:	mov	r4, #128	; 0x80
   1f760:	bl	11610 <__ctype_b_loc@plt>
   1f764:	ldr	r0, [r0]
   1f768:	ldr	r7, [sp, #24]
   1f76c:	ldr	lr, [sp, #44]	; 0x2c
   1f770:	mov	r1, #1
   1f774:	mov	sl, #0
   1f778:	add	r5, r0, r4, lsl #1
   1f77c:	add	r0, r8, r9, lsl #2
   1f780:	mov	ip, r6
   1f784:	mov	r3, #0
   1f788:	add	r2, r0, #96	; 0x60
   1f78c:	mov	r0, r5
   1f790:	add	r6, r4, r3
   1f794:	cmp	r6, #95	; 0x5f
   1f798:	beq	1f7a8 <__assert_fail@plt+0xe048>
   1f79c:	ldrh	r6, [r0]
   1f7a0:	ands	r6, r6, #8
   1f7a4:	beq	1f7b4 <__assert_fail@plt+0xe054>
   1f7a8:	ldr	r6, [r2]
   1f7ac:	orr	r6, r6, r1, lsl r3
   1f7b0:	str	r6, [r2]
   1f7b4:	add	r3, r3, #1
   1f7b8:	add	r0, r0, #2
   1f7bc:	cmp	r3, #32
   1f7c0:	bne	1f790 <__assert_fail@plt+0xe030>
   1f7c4:	add	r9, r9, #1
   1f7c8:	add	r5, r5, #64	; 0x40
   1f7cc:	add	r4, r4, #32
   1f7d0:	mov	r6, ip
   1f7d4:	cmp	r9, #8
   1f7d8:	bne	1f77c <__assert_fail@plt+0xe01c>
   1f7dc:	b	1d77c <__assert_fail@plt+0xc01c>
   1f7e0:	ldr	r7, [sp, #24]
   1f7e4:	ldr	lr, [sp, #44]	; 0x2c
   1f7e8:	mov	r6, #0
   1f7ec:	mov	sl, #0
   1f7f0:	ldr	r1, [r4]
   1f7f4:	cmp	r1, #31
   1f7f8:	bne	1e384 <__assert_fail@plt+0xcc24>
   1f7fc:	mov	r0, #996	; 0x3e4
   1f800:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f804:	ldr	lr, [sp, #44]	; 0x2c
   1f808:	cmp	r0, #0
   1f80c:	beq	1e3d0 <__assert_fail@plt+0xcc70>
   1f810:	ldr	r1, [r8, #56]	; 0x38
   1f814:	str	r1, [r0]
   1f818:	mov	r1, #0
   1f81c:	str	r1, [r8, #64]	; 0x40
   1f820:	str	r0, [r8, #56]	; 0x38
   1f824:	b	1e388 <__assert_fail@plt+0xcc28>
   1f828:	cmp	r9, #0
   1f82c:	beq	1f8cc <__assert_fail@plt+0xe16c>
   1f830:	movw	r5, #255	; 0xff
   1f834:	movt	r5, #4
   1f838:	mov	r6, r9
   1f83c:	ldr	r9, [r9, #4]
   1f840:	cmp	r9, #0
   1f844:	bne	1f838 <__assert_fail@plt+0xe0d8>
   1f848:	ldr	r9, [r6, #8]
   1f84c:	cmp	r9, #0
   1f850:	bne	1f838 <__assert_fail@plt+0xe0d8>
   1f854:	ldr	r0, [r6, #24]
   1f858:	and	r0, r0, r5
   1f85c:	cmp	r0, #3
   1f860:	beq	1f898 <__assert_fail@plt+0xe138>
   1f864:	cmp	r0, #6
   1f868:	bne	1f8a0 <__assert_fail@plt+0xe140>
   1f86c:	ldr	r4, [r6, #20]
   1f870:	ldr	r0, [r4]
   1f874:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f878:	ldr	r0, [r4, #4]
   1f87c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f880:	ldr	r0, [r4, #8]
   1f884:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f888:	ldr	r0, [r4, #12]
   1f88c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f890:	mov	r0, r4
   1f894:	b	1f89c <__assert_fail@plt+0xe13c>
   1f898:	ldr	r0, [r6, #20]
   1f89c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f8a0:	ldr	r0, [r6]
   1f8a4:	cmp	r0, #0
   1f8a8:	beq	1f8cc <__assert_fail@plt+0xe16c>
   1f8ac:	ldr	r9, [r0, #8]
   1f8b0:	cmp	r9, r6
   1f8b4:	mov	r6, r0
   1f8b8:	beq	1f854 <__assert_fail@plt+0xe0f4>
   1f8bc:	cmp	r9, #0
   1f8c0:	mov	r6, r0
   1f8c4:	beq	1f854 <__assert_fail@plt+0xe0f4>
   1f8c8:	b	1f838 <__assert_fail@plt+0xe0d8>
   1f8cc:	mov	r0, #8
   1f8d0:	b	1f734 <__assert_fail@plt+0xdfd4>
   1f8d4:	mov	r5, #0
   1f8d8:	mov	r0, #9
   1f8dc:	b	1f8e8 <__assert_fail@plt+0xe188>
   1f8e0:	mov	r5, #0
   1f8e4:	mov	r0, #10
   1f8e8:	ldr	r7, [sp, #24]
   1f8ec:	ldr	lr, [sp, #44]	; 0x2c
   1f8f0:	mov	sl, #0
   1f8f4:	b	1e324 <__assert_fail@plt+0xcbc4>
   1f8f8:	mov	r0, #996	; 0x3e4
   1f8fc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1f900:	cmp	r0, #0
   1f904:	beq	1f92c <__assert_fail@plt+0xe1cc>
   1f908:	ldr	r1, [r8, #56]	; 0x38
   1f90c:	str	r1, [r0]
   1f910:	mov	r1, #0
   1f914:	str	r1, [r8, #64]	; 0x40
   1f918:	str	r0, [r8, #56]	; 0x38
   1f91c:	b	1f408 <__assert_fail@plt+0xdca8>
   1f920:	ldr	r6, [sp, #40]	; 0x28
   1f924:	ldr	r4, [sp, #52]	; 0x34
   1f928:	ldr	sl, [sp, #48]	; 0x30
   1f92c:	mov	r0, #12
   1f930:	ldr	r1, [sp, #16]
   1f934:	str	r0, [r1]
   1f938:	b	1f54c <__assert_fail@plt+0xddec>
   1f93c:	mov	r0, r6
   1f940:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f944:	mov	r0, r9
   1f948:	bl	14538 <__assert_fail@plt+0x2dd8>
   1f94c:	mov	r9, #12
   1f950:	b	1f538 <__assert_fail@plt+0xddd8>
   1f954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f958:	add	fp, sp, #28
   1f95c:	sub	sp, sp, #12
   1f960:	mov	r9, r1
   1f964:	mov	r6, r0
   1f968:	mov	r4, #0
   1f96c:	mov	r0, #32
   1f970:	mov	r1, #1
   1f974:	mov	sl, r3
   1f978:	mov	r5, r2
   1f97c:	str	r4, [sp, #8]
   1f980:	bl	2d24c <__assert_fail@plt+0x1baec>
   1f984:	ldr	r1, [fp, #12]
   1f988:	cmp	r0, #0
   1f98c:	beq	1fc44 <__assert_fail@plt+0xe4e4>
   1f990:	mov	r7, r0
   1f994:	mov	r0, #40	; 0x28
   1f998:	mov	r1, #1
   1f99c:	bl	2d24c <__assert_fail@plt+0x1baec>
   1f9a0:	cmp	r0, #0
   1f9a4:	beq	1fc58 <__assert_fail@plt+0xe4f8>
   1f9a8:	mov	r8, r0
   1f9ac:	ldrb	r0, [r0, #16]
   1f9b0:	ldr	r1, [fp, #8]
   1f9b4:	mov	r4, #0
   1f9b8:	add	r3, sp, #8
   1f9bc:	str	r5, [sp]
   1f9c0:	mov	r2, r8
   1f9c4:	str	r4, [sp, #4]
   1f9c8:	and	r0, r0, #254	; 0xfe
   1f9cc:	orr	r0, r0, r1
   1f9d0:	mov	r1, r7
   1f9d4:	strb	r0, [r8, #16]
   1f9d8:	mov	r0, r9
   1f9dc:	bl	20208 <__assert_fail@plt+0xeaa8>
   1f9e0:	cmp	r0, #0
   1f9e4:	bne	1fc7c <__assert_fail@plt+0xe51c>
   1f9e8:	ldrb	r0, [sl]
   1f9ec:	cmp	r0, #0
   1f9f0:	beq	1fa1c <__assert_fail@plt+0xe2bc>
   1f9f4:	add	r1, sl, #1
   1f9f8:	mov	r2, #1
   1f9fc:	ubfx	r3, r0, #5, #3
   1fa00:	and	r0, r0, #31
   1fa04:	ldr	r5, [r7, r3, lsl #2]
   1fa08:	orr	r0, r5, r2, lsl r0
   1fa0c:	str	r0, [r7, r3, lsl #2]
   1fa10:	ldrb	r0, [r1], #1
   1fa14:	cmp	r0, #0
   1fa18:	bne	1f9fc <__assert_fail@plt+0xe29c>
   1fa1c:	ldr	r0, [fp, #8]
   1fa20:	cmp	r0, #0
   1fa24:	bne	1fb38 <__assert_fail@plt+0xe3d8>
   1fa28:	ldr	r0, [r6, #92]	; 0x5c
   1fa2c:	cmp	r0, #2
   1fa30:	bge	1fb60 <__assert_fail@plt+0xe400>
   1fa34:	ldr	r1, [r6, #64]	; 0x40
   1fa38:	cmp	r1, #31
   1fa3c:	beq	1fbe4 <__assert_fail@plt+0xe484>
   1fa40:	ldr	r0, [r6, #56]	; 0x38
   1fa44:	add	r2, r1, #1
   1fa48:	add	r0, r0, r1, lsl #5
   1fa4c:	mov	r1, #3
   1fa50:	vmov.i32	q8, #0	; 0x00000000
   1fa54:	str	r2, [r6, #64]	; 0x40
   1fa58:	mov	r2, #0
   1fa5c:	add	r5, r0, #4
   1fa60:	str	r2, [r0, #20]
   1fa64:	str	r7, [r0, #24]
   1fa68:	str	r1, [r0, #28]
   1fa6c:	mov	r0, #28
   1fa70:	mov	r1, r5
   1fa74:	vst1.32	{d16-d17}, [r1], r0
   1fa78:	mvn	r0, #0
   1fa7c:	str	r0, [r1]
   1fa80:	ldr	r0, [r6, #92]	; 0x5c
   1fa84:	cmp	r0, #2
   1fa88:	blt	1fc0c <__assert_fail@plt+0xe4ac>
   1fa8c:	ldrb	r0, [r6, #88]	; 0x58
   1fa90:	orr	r0, r0, #2
   1fa94:	strb	r0, [r6, #88]	; 0x58
   1fa98:	ldr	r1, [r6, #64]	; 0x40
   1fa9c:	cmp	r1, #31
   1faa0:	beq	1fcc4 <__assert_fail@plt+0xe564>
   1faa4:	ldr	r0, [r6, #56]	; 0x38
   1faa8:	add	r0, r0, r1, lsl #5
   1faac:	add	r2, r1, #1
   1fab0:	mov	r1, #6
   1fab4:	mov	r4, #0
   1fab8:	vmov.i32	q8, #0	; 0x00000000
   1fabc:	add	r7, r0, #4
   1fac0:	str	r2, [r6, #64]	; 0x40
   1fac4:	str	r4, [r0, #20]
   1fac8:	str	r8, [r0, #24]
   1facc:	str	r1, [r0, #28]
   1fad0:	mov	r0, #28
   1fad4:	mov	r1, r7
   1fad8:	vst1.32	{d16-d17}, [r1], r0
   1fadc:	mvn	r0, #0
   1fae0:	str	r0, [r1]
   1fae4:	ldr	r1, [r6, #64]	; 0x40
   1fae8:	cmp	r1, #31
   1faec:	beq	1fd34 <__assert_fail@plt+0xe5d4>
   1faf0:	ldr	r0, [r6, #56]	; 0x38
   1faf4:	add	r2, r1, #1
   1faf8:	add	r4, r0, r1, lsl #5
   1fafc:	mov	r0, #0
   1fb00:	mov	r1, #10
   1fb04:	str	r2, [r6, #64]	; 0x40
   1fb08:	str	r0, [r4, #4]!
   1fb0c:	mvn	r2, #0
   1fb10:	add	r3, r4, #20
   1fb14:	stmib	r4, {r5, r7}
   1fb18:	str	r0, [r4, #12]
   1fb1c:	str	r0, [r4, #16]
   1fb20:	stm	r3, {r0, r1, r2}
   1fb24:	str	r4, [r5]
   1fb28:	str	r4, [r7]
   1fb2c:	mov	r0, r4
   1fb30:	sub	sp, fp, #28
   1fb34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb38:	vld1.32	{d16-d17}, [r7]
   1fb3c:	mov	r0, r7
   1fb40:	vmvn	q8, q8
   1fb44:	vst1.32	{d16-d17}, [r0]!
   1fb48:	vld1.32	{d16-d17}, [r0]
   1fb4c:	vmvn	q8, q8
   1fb50:	vst1.32	{d16-d17}, [r0]
   1fb54:	ldr	r0, [r6, #92]	; 0x5c
   1fb58:	cmp	r0, #2
   1fb5c:	blt	1fa34 <__assert_fail@plt+0xe2d4>
   1fb60:	ldm	r7, {r0, r1, r2, ip}
   1fb64:	ldr	r5, [r6, #60]	; 0x3c
   1fb68:	ldr	r3, [r5]
   1fb6c:	and	r0, r0, r3
   1fb70:	str	r0, [r7]
   1fb74:	ldr	r0, [r5, #4]
   1fb78:	and	r0, r1, r0
   1fb7c:	str	r0, [r7, #4]
   1fb80:	ldr	r0, [r5, #8]
   1fb84:	and	r0, r2, r0
   1fb88:	str	r0, [r7, #8]
   1fb8c:	ldr	r0, [r5, #12]
   1fb90:	and	r0, ip, r0
   1fb94:	str	r0, [r7, #12]
   1fb98:	ldr	r0, [r7, #16]
   1fb9c:	ldr	r1, [r5, #16]
   1fba0:	and	r0, r0, r1
   1fba4:	str	r0, [r7, #16]
   1fba8:	ldr	r0, [r5, #20]
   1fbac:	ldr	r1, [r7, #20]
   1fbb0:	and	r0, r1, r0
   1fbb4:	str	r0, [r7, #20]
   1fbb8:	ldr	r0, [r5, #24]
   1fbbc:	ldr	r1, [r7, #24]
   1fbc0:	and	r0, r1, r0
   1fbc4:	str	r0, [r7, #24]
   1fbc8:	ldr	r0, [r5, #28]
   1fbcc:	ldr	r1, [r7, #28]
   1fbd0:	and	r0, r1, r0
   1fbd4:	str	r0, [r7, #28]
   1fbd8:	ldr	r1, [r6, #64]	; 0x40
   1fbdc:	cmp	r1, #31
   1fbe0:	bne	1fa40 <__assert_fail@plt+0xe2e0>
   1fbe4:	mov	r0, #996	; 0x3e4
   1fbe8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1fbec:	cmp	r0, #0
   1fbf0:	beq	1fcec <__assert_fail@plt+0xe58c>
   1fbf4:	ldr	r1, [r6, #56]	; 0x38
   1fbf8:	str	r1, [r0]
   1fbfc:	mov	r1, #0
   1fc00:	str	r1, [r6, #64]	; 0x40
   1fc04:	str	r0, [r6, #56]	; 0x38
   1fc08:	b	1fa44 <__assert_fail@plt+0xe2e4>
   1fc0c:	ldr	r0, [r8]
   1fc10:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc14:	ldr	r0, [r8, #4]
   1fc18:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc1c:	ldr	r0, [r8, #8]
   1fc20:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc24:	ldr	r0, [r8, #12]
   1fc28:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc2c:	mov	r0, r8
   1fc30:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc34:	mov	r4, r5
   1fc38:	mov	r0, r4
   1fc3c:	sub	sp, fp, #28
   1fc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc44:	mov	r0, #12
   1fc48:	str	r0, [r1]
   1fc4c:	mov	r0, r4
   1fc50:	sub	sp, fp, #28
   1fc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc58:	mov	r0, r7
   1fc5c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc60:	ldr	r1, [fp, #12]
   1fc64:	mov	r0, #12
   1fc68:	mov	r4, #0
   1fc6c:	str	r0, [r1]
   1fc70:	mov	r0, r4
   1fc74:	sub	sp, fp, #28
   1fc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc7c:	mov	r5, r0
   1fc80:	mov	r0, r7
   1fc84:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc88:	ldr	r0, [r8]
   1fc8c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc90:	ldr	r0, [r8, #4]
   1fc94:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fc98:	ldr	r0, [r8, #8]
   1fc9c:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fca0:	ldr	r0, [r8, #12]
   1fca4:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fca8:	mov	r0, r8
   1fcac:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fcb0:	ldr	r0, [fp, #12]
   1fcb4:	str	r5, [r0]
   1fcb8:	mov	r0, r4
   1fcbc:	sub	sp, fp, #28
   1fcc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcc4:	mov	r0, #996	; 0x3e4
   1fcc8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1fccc:	cmp	r0, #0
   1fcd0:	beq	1fcec <__assert_fail@plt+0xe58c>
   1fcd4:	ldr	r1, [r6, #56]	; 0x38
   1fcd8:	str	r1, [r0]
   1fcdc:	mov	r1, #0
   1fce0:	str	r1, [r6, #64]	; 0x40
   1fce4:	str	r0, [r6, #56]	; 0x38
   1fce8:	b	1faa8 <__assert_fail@plt+0xe348>
   1fcec:	mov	r0, r7
   1fcf0:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fcf4:	ldr	r0, [r8]
   1fcf8:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fcfc:	ldr	r0, [r8, #4]
   1fd00:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fd04:	ldr	r0, [r8, #8]
   1fd08:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fd0c:	ldr	r0, [r8, #12]
   1fd10:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fd14:	mov	r0, r8
   1fd18:	bl	14538 <__assert_fail@plt+0x2dd8>
   1fd1c:	ldr	r1, [fp, #12]
   1fd20:	mov	r0, #12
   1fd24:	str	r0, [r1]
   1fd28:	mov	r0, r4
   1fd2c:	sub	sp, fp, #28
   1fd30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd34:	mov	r0, #996	; 0x3e4
   1fd38:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   1fd3c:	cmp	r0, #0
   1fd40:	beq	1fc38 <__assert_fail@plt+0xe4d8>
   1fd44:	ldr	r1, [r6, #56]	; 0x38
   1fd48:	str	r1, [r0]
   1fd4c:	mov	r1, #0
   1fd50:	str	r1, [r6, #64]	; 0x40
   1fd54:	str	r0, [r6, #56]	; 0x38
   1fd58:	b	1faf4 <__assert_fail@plt+0xe394>
   1fd5c:	push	{fp, lr}
   1fd60:	mov	fp, sp
   1fd64:	ldr	ip, [r1, #40]	; 0x28
   1fd68:	ldr	r3, [r1, #56]	; 0x38
   1fd6c:	cmp	r3, ip
   1fd70:	ble	1fdf0 <__assert_fail@plt+0xe690>
   1fd74:	ldr	r3, [r1, #4]
   1fd78:	ldrb	lr, [r3, ip]
   1fd7c:	strb	lr, [r0]
   1fd80:	ldr	r3, [r1, #80]	; 0x50
   1fd84:	cmp	r3, #2
   1fd88:	blt	1fdac <__assert_fail@plt+0xe64c>
   1fd8c:	ldr	r3, [r1, #28]
   1fd90:	ldr	ip, [r1, #40]	; 0x28
   1fd94:	cmp	ip, r3
   1fd98:	beq	1fdac <__assert_fail@plt+0xe64c>
   1fd9c:	ldr	r3, [r1, #8]
   1fda0:	ldr	r3, [r3, ip, lsl #2]
   1fda4:	cmn	r3, #1
   1fda8:	beq	1fec4 <__assert_fail@plt+0xe764>
   1fdac:	tst	r2, #1
   1fdb0:	beq	1fe04 <__assert_fail@plt+0xe6a4>
   1fdb4:	cmp	lr, #92	; 0x5c
   1fdb8:	bne	1fe04 <__assert_fail@plt+0xe6a4>
   1fdbc:	ldr	r2, [r1, #40]	; 0x28
   1fdc0:	ldr	r3, [r1, #48]	; 0x30
   1fdc4:	add	r2, r2, #1
   1fdc8:	cmp	r2, r3
   1fdcc:	bge	1fec4 <__assert_fail@plt+0xe764>
   1fdd0:	str	r2, [r1, #40]	; 0x28
   1fdd4:	ldr	r1, [r1, #4]
   1fdd8:	ldrb	r2, [r1, r2]
   1fddc:	mov	r1, #1
   1fde0:	strb	r1, [r0, #4]
   1fde4:	strb	r2, [r0]
   1fde8:	mov	r0, r1
   1fdec:	pop	{fp, pc}
   1fdf0:	mov	r1, #2
   1fdf4:	strb	r1, [r0, #4]
   1fdf8:	mov	r1, #0
   1fdfc:	mov	r0, r1
   1fe00:	pop	{fp, pc}
   1fe04:	cmp	lr, #92	; 0x5c
   1fe08:	bgt	1fe68 <__assert_fail@plt+0xe708>
   1fe0c:	cmp	lr, #45	; 0x2d
   1fe10:	beq	1fe8c <__assert_fail@plt+0xe72c>
   1fe14:	cmp	lr, #91	; 0x5b
   1fe18:	bne	1fec4 <__assert_fail@plt+0xe764>
   1fe1c:	ldr	r3, [r1, #40]	; 0x28
   1fe20:	ldr	ip, [r1, #48]	; 0x30
   1fe24:	add	r3, r3, #1
   1fe28:	cmp	r3, ip
   1fe2c:	bge	1feb4 <__assert_fail@plt+0xe754>
   1fe30:	ldr	r1, [r1, #4]
   1fe34:	ldrb	r1, [r1, r3]
   1fe38:	cmp	r1, #61	; 0x3d
   1fe3c:	strb	r1, [r0]
   1fe40:	beq	1fed4 <__assert_fail@plt+0xe774>
   1fe44:	cmp	r1, #58	; 0x3a
   1fe48:	beq	1fee8 <__assert_fail@plt+0xe788>
   1fe4c:	cmp	r1, #46	; 0x2e
   1fe50:	bne	1febc <__assert_fail@plt+0xe75c>
   1fe54:	mov	r1, #26
   1fe58:	strb	r1, [r0, #4]
   1fe5c:	mov	r1, #2
   1fe60:	mov	r0, r1
   1fe64:	pop	{fp, pc}
   1fe68:	cmp	lr, #93	; 0x5d
   1fe6c:	beq	1fea0 <__assert_fail@plt+0xe740>
   1fe70:	cmp	lr, #94	; 0x5e
   1fe74:	bne	1fec4 <__assert_fail@plt+0xe764>
   1fe78:	mov	r1, #25
   1fe7c:	strb	r1, [r0, #4]
   1fe80:	mov	r1, #1
   1fe84:	mov	r0, r1
   1fe88:	pop	{fp, pc}
   1fe8c:	mov	r1, #22
   1fe90:	strb	r1, [r0, #4]
   1fe94:	mov	r1, #1
   1fe98:	mov	r0, r1
   1fe9c:	pop	{fp, pc}
   1fea0:	mov	r1, #21
   1fea4:	strb	r1, [r0, #4]
   1fea8:	mov	r1, #1
   1feac:	mov	r0, r1
   1feb0:	pop	{fp, pc}
   1feb4:	mov	r1, #0
   1feb8:	strb	r1, [r0]
   1febc:	mov	r1, #91	; 0x5b
   1fec0:	strb	r1, [r0]
   1fec4:	mov	r1, #1
   1fec8:	strb	r1, [r0, #4]
   1fecc:	mov	r0, r1
   1fed0:	pop	{fp, pc}
   1fed4:	mov	r1, #28
   1fed8:	strb	r1, [r0, #4]
   1fedc:	mov	r1, #2
   1fee0:	mov	r0, r1
   1fee4:	pop	{fp, pc}
   1fee8:	tst	r2, #4
   1feec:	beq	1febc <__assert_fail@plt+0xe75c>
   1fef0:	mov	r1, #30
   1fef4:	strb	r1, [r0, #4]
   1fef8:	mov	r1, #2
   1fefc:	mov	r0, r1
   1ff00:	pop	{fp, pc}
   1ff04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ff08:	add	fp, sp, #24
   1ff0c:	sub	sp, sp, #8
   1ff10:	mov	r5, r2
   1ff14:	ldr	r2, [r1, #80]	; 0x50
   1ff18:	mov	r9, r0
   1ff1c:	ldr	r0, [r1, #40]	; 0x28
   1ff20:	cmp	r2, #1
   1ff24:	beq	1ff94 <__assert_fail@plt+0xe834>
   1ff28:	ldr	r4, [r1, #28]
   1ff2c:	add	r2, r0, #1
   1ff30:	cmp	r2, r4
   1ff34:	bge	1ff94 <__assert_fail@plt+0xe834>
   1ff38:	ldr	ip, [r1, #8]
   1ff3c:	mov	r2, #1
   1ff40:	add	r6, ip, r0, lsl #2
   1ff44:	ldr	r7, [r6, r2, lsl #2]
   1ff48:	cmn	r7, #1
   1ff4c:	bne	1ff64 <__assert_fail@plt+0xe804>
   1ff50:	add	r2, r2, #1
   1ff54:	add	r7, r0, r2
   1ff58:	cmp	r7, r4
   1ff5c:	blt	1ff44 <__assert_fail@plt+0xe7e4>
   1ff60:	b	1ff6c <__assert_fail@plt+0xe80c>
   1ff64:	cmp	r2, #2
   1ff68:	bcc	1ff94 <__assert_fail@plt+0xe834>
   1ff6c:	mov	r3, #1
   1ff70:	str	r3, [r9]
   1ff74:	ldr	r0, [ip, r0, lsl #2]
   1ff78:	str	r0, [r9, #4]
   1ff7c:	ldr	r0, [r1, #40]	; 0x28
   1ff80:	add	r0, r0, r2
   1ff84:	str	r0, [r1, #40]	; 0x28
   1ff88:	mov	r0, #0
   1ff8c:	sub	sp, fp, #24
   1ff90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff94:	add	r2, r0, r3
   1ff98:	str	r2, [r1, #40]	; 0x28
   1ff9c:	ldrb	r6, [r5, #4]
   1ffa0:	sub	r0, r6, #22
   1ffa4:	cmp	r0, #8
   1ffa8:	bhi	201f0 <__assert_fail@plt+0xea90>
   1ffac:	add	r3, pc, #0
   1ffb0:	ldr	pc, [r3, r0, lsl #2]
   1ffb4:	andeq	r0, r2, r8, asr #3
   1ffb8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ffbc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ffc0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ffc4:	ldrdeq	pc, [r1], -r8
   1ffc8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ffcc:	ldrdeq	pc, [r1], -r8
   1ffd0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ffd4:	ldrdeq	pc, [r1], -r8
   1ffd8:	ldr	r3, [r1, #56]	; 0x38
   1ffdc:	mov	r0, #7
   1ffe0:	cmp	r3, r2
   1ffe4:	ble	20200 <__assert_fail@plt+0xeaa0>
   1ffe8:	ldrb	r3, [r5]
   1ffec:	mov	r2, #0
   1fff0:	uxtb	r7, r6
   1fff4:	cmp	r7, #30
   1fff8:	bne	20020 <__assert_fail@plt+0xe8c0>
   1fffc:	b	20014 <__assert_fail@plt+0xe8b4>
   20000:	ldrb	r6, [r5, #4]
   20004:	add	r2, r2, #1
   20008:	uxtb	r7, r6
   2000c:	cmp	r7, #30
   20010:	bne	20020 <__assert_fail@plt+0xe8c0>
   20014:	ldrb	r7, [r1, #75]	; 0x4b
   20018:	cmp	r7, #0
   2001c:	bne	20070 <__assert_fail@plt+0xe910>
   20020:	ldr	r4, [r1, #40]	; 0x28
   20024:	ldr	r7, [r1, #4]
   20028:	add	r6, r4, #1
   2002c:	str	r6, [r1, #40]	; 0x28
   20030:	ldrb	r4, [r7, r4]
   20034:	ldr	r7, [r1, #56]	; 0x38
   20038:	cmp	r7, r6
   2003c:	ble	20200 <__assert_fail@plt+0xeaa0>
   20040:	uxtb	r7, r4
   20044:	cmp	r7, r3
   20048:	bne	2005c <__assert_fail@plt+0xe8fc>
   2004c:	ldr	r7, [r1, #4]
   20050:	ldrb	r7, [r7, r6]
   20054:	cmp	r7, #93	; 0x5d
   20058:	beq	20168 <__assert_fail@plt+0xea08>
   2005c:	ldr	r7, [r9, #4]
   20060:	cmp	r2, #30
   20064:	strb	r4, [r7, r2]
   20068:	bls	20000 <__assert_fail@plt+0xe8a0>
   2006c:	b	20200 <__assert_fail@plt+0xeaa0>
   20070:	ldrb	r7, [r1, #76]	; 0x4c
   20074:	cmp	r7, #0
   20078:	beq	2011c <__assert_fail@plt+0xe9bc>
   2007c:	ldr	lr, [r1, #28]
   20080:	ldr	ip, [r1, #40]	; 0x28
   20084:	cmp	ip, lr
   20088:	beq	2009c <__assert_fail@plt+0xe93c>
   2008c:	ldr	r4, [r1, #8]
   20090:	ldr	r4, [r4, ip, lsl #2]
   20094:	cmn	r4, #1
   20098:	beq	20148 <__assert_fail@plt+0xe9e8>
   2009c:	ldr	r6, [r1, #12]
   200a0:	ldr	r7, [r1, #24]
   200a4:	ldr	r4, [r1]
   200a8:	ldr	r6, [r6, ip, lsl #2]
   200ac:	add	r6, r7, r6
   200b0:	add	r4, r4, r6
   200b4:	ldrsb	r4, [r4]
   200b8:	cmn	r4, #1
   200bc:	ble	20148 <__assert_fail@plt+0xe9e8>
   200c0:	ldr	r7, [r1, #80]	; 0x50
   200c4:	mov	r6, #1
   200c8:	cmp	r7, #1
   200cc:	beq	20104 <__assert_fail@plt+0xe9a4>
   200d0:	add	r7, ip, #1
   200d4:	cmp	r7, lr
   200d8:	bge	20104 <__assert_fail@plt+0xe9a4>
   200dc:	ldr	r6, [r1, #8]
   200e0:	add	r8, r6, ip, lsl #2
   200e4:	mov	r6, #1
   200e8:	ldr	r7, [r8, r6, lsl #2]
   200ec:	cmn	r7, #1
   200f0:	bne	20104 <__assert_fail@plt+0xe9a4>
   200f4:	add	r6, r6, #1
   200f8:	add	r7, ip, r6
   200fc:	cmp	r7, lr
   20100:	blt	200e8 <__assert_fail@plt+0xe988>
   20104:	add	r6, r6, ip
   20108:	str	r6, [r1, #40]	; 0x28
   2010c:	ldr	r7, [r1, #56]	; 0x38
   20110:	cmp	r7, r6
   20114:	bgt	20040 <__assert_fail@plt+0xe8e0>
   20118:	b	20200 <__assert_fail@plt+0xeaa0>
   2011c:	ldr	r7, [r1, #40]	; 0x28
   20120:	ldr	r4, [r1, #24]
   20124:	ldr	ip, [r1]
   20128:	add	r6, r7, #1
   2012c:	add	r7, r7, r4
   20130:	str	r6, [r1, #40]	; 0x28
   20134:	ldrb	r4, [ip, r7]
   20138:	ldr	r7, [r1, #56]	; 0x38
   2013c:	cmp	r7, r6
   20140:	bgt	20040 <__assert_fail@plt+0xe8e0>
   20144:	b	20200 <__assert_fail@plt+0xeaa0>
   20148:	add	r6, ip, #1
   2014c:	str	r6, [r1, #40]	; 0x28
   20150:	ldr	r7, [r1, #4]
   20154:	ldrb	r4, [r7, ip]
   20158:	ldr	r7, [r1, #56]	; 0x38
   2015c:	cmp	r7, r6
   20160:	bgt	20040 <__assert_fail@plt+0xe8e0>
   20164:	b	20200 <__assert_fail@plt+0xeaa0>
   20168:	add	r0, r6, #1
   2016c:	str	r0, [r1, #40]	; 0x28
   20170:	mov	r0, #0
   20174:	ldr	r1, [r9, #4]
   20178:	strb	r0, [r1, r2]
   2017c:	ldrb	r1, [r5, #4]
   20180:	cmp	r1, #30
   20184:	beq	201a8 <__assert_fail@plt+0xea48>
   20188:	cmp	r1, #28
   2018c:	beq	201b8 <__assert_fail@plt+0xea58>
   20190:	cmp	r1, #26
   20194:	bne	20200 <__assert_fail@plt+0xeaa0>
   20198:	mov	r1, #3
   2019c:	str	r1, [r9]
   201a0:	sub	sp, fp, #24
   201a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   201a8:	mov	r1, #4
   201ac:	str	r1, [r9]
   201b0:	sub	sp, fp, #24
   201b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   201b8:	mov	r1, #2
   201bc:	str	r1, [r9]
   201c0:	sub	sp, fp, #24
   201c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   201c8:	ldr	r0, [fp, #12]
   201cc:	cmp	r0, #0
   201d0:	bne	201f0 <__assert_fail@plt+0xea90>
   201d4:	ldr	r2, [fp, #8]
   201d8:	mov	r0, sp
   201dc:	bl	1fd5c <__assert_fail@plt+0xe5fc>
   201e0:	ldrb	r1, [sp, #4]
   201e4:	mov	r0, #11
   201e8:	cmp	r1, #21
   201ec:	bne	20200 <__assert_fail@plt+0xeaa0>
   201f0:	mov	r0, #0
   201f4:	str	r0, [r9]
   201f8:	ldrb	r1, [r5]
   201fc:	strb	r1, [r9, #4]
   20200:	sub	sp, fp, #24
   20204:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20208:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2020c:	add	fp, sp, #24
   20210:	mov	r8, r0
   20214:	ldrb	r0, [fp, #14]
   20218:	ldr	r6, [fp, #8]
   2021c:	mov	r5, r3
   20220:	mov	r7, r2
   20224:	mov	r4, r1
   20228:	tst	r0, #64	; 0x40
   2022c:	beq	20268 <__assert_fail@plt+0xeb08>
   20230:	movw	r1, #59850	; 0xe9ca
   20234:	mov	r0, r6
   20238:	movt	r1, #2
   2023c:	bl	11418 <strcmp@plt>
   20240:	cmp	r0, #0
   20244:	beq	20260 <__assert_fail@plt+0xeb00>
   20248:	movw	r1, #59856	; 0xe9d0
   2024c:	mov	r0, r6
   20250:	movt	r1, #2
   20254:	bl	11418 <strcmp@plt>
   20258:	cmp	r0, #0
   2025c:	bne	20268 <__assert_fail@plt+0xeb08>
   20260:	movw	r6, #59862	; 0xe9d6
   20264:	movt	r6, #2
   20268:	ldr	r0, [r5]
   2026c:	ldr	r1, [r7, #36]	; 0x24
   20270:	cmp	r0, r1
   20274:	beq	207c4 <__assert_fail@plt+0xf064>
   20278:	mov	r0, r6
   2027c:	bl	113e8 <wctype@plt>
   20280:	ldr	r2, [r7, #36]	; 0x24
   20284:	ldr	r1, [r7, #12]
   20288:	add	r3, r2, #1
   2028c:	str	r3, [r7, #36]	; 0x24
   20290:	str	r0, [r1, r2, lsl #2]
   20294:	movw	r1, #59838	; 0xe9be
   20298:	mov	r0, r6
   2029c:	movt	r1, #2
   202a0:	bl	11418 <strcmp@plt>
   202a4:	cmp	r0, #0
   202a8:	beq	2040c <__assert_fail@plt+0xecac>
   202ac:	movw	r1, #59868	; 0xe9dc
   202b0:	mov	r0, r6
   202b4:	movt	r1, #2
   202b8:	bl	11418 <strcmp@plt>
   202bc:	cmp	r0, #0
   202c0:	beq	20468 <__assert_fail@plt+0xed08>
   202c4:	movw	r1, #59856	; 0xe9d0
   202c8:	mov	r0, r6
   202cc:	movt	r1, #2
   202d0:	bl	11418 <strcmp@plt>
   202d4:	cmp	r0, #0
   202d8:	beq	204c4 <__assert_fail@plt+0xed64>
   202dc:	movw	r1, #59844	; 0xe9c4
   202e0:	mov	r0, r6
   202e4:	movt	r1, #2
   202e8:	bl	11418 <strcmp@plt>
   202ec:	cmp	r0, #0
   202f0:	beq	20520 <__assert_fail@plt+0xedc0>
   202f4:	movw	r1, #59862	; 0xe9d6
   202f8:	mov	r0, r6
   202fc:	movt	r1, #2
   20300:	bl	11418 <strcmp@plt>
   20304:	cmp	r0, #0
   20308:	beq	2057c <__assert_fail@plt+0xee1c>
   2030c:	movw	r1, #59899	; 0xe9fb
   20310:	mov	r0, r6
   20314:	movt	r1, #2
   20318:	bl	11418 <strcmp@plt>
   2031c:	cmp	r0, #0
   20320:	beq	205d8 <__assert_fail@plt+0xee78>
   20324:	movw	r1, #59874	; 0xe9e2
   20328:	mov	r0, r6
   2032c:	movt	r1, #2
   20330:	bl	11418 <strcmp@plt>
   20334:	cmp	r0, #0
   20338:	beq	20634 <__assert_fail@plt+0xeed4>
   2033c:	movw	r1, #59850	; 0xe9ca
   20340:	mov	r0, r6
   20344:	movt	r1, #2
   20348:	bl	11418 <strcmp@plt>
   2034c:	cmp	r0, #0
   20350:	beq	20684 <__assert_fail@plt+0xef24>
   20354:	movw	r1, #59880	; 0xe9e8
   20358:	mov	r0, r6
   2035c:	movt	r1, #2
   20360:	bl	11418 <strcmp@plt>
   20364:	cmp	r0, #0
   20368:	beq	206d4 <__assert_fail@plt+0xef74>
   2036c:	movw	r1, #59886	; 0xe9ee
   20370:	mov	r0, r6
   20374:	movt	r1, #2
   20378:	bl	11418 <strcmp@plt>
   2037c:	cmp	r0, #0
   20380:	beq	20724 <__assert_fail@plt+0xefc4>
   20384:	movw	r1, #59892	; 0xe9f4
   20388:	mov	r0, r6
   2038c:	movt	r1, #2
   20390:	bl	11418 <strcmp@plt>
   20394:	cmp	r0, #0
   20398:	beq	20774 <__assert_fail@plt+0xf014>
   2039c:	movw	r1, #59898	; 0xe9fa
   203a0:	mov	r0, r6
   203a4:	movt	r1, #2
   203a8:	bl	11418 <strcmp@plt>
   203ac:	mov	r1, r0
   203b0:	mov	r0, #4
   203b4:	cmp	r1, #0
   203b8:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   203bc:	bl	11610 <__ctype_b_loc@plt>
   203c0:	ldr	r1, [r0]
   203c4:	mov	r2, #0
   203c8:	mov	r3, #1
   203cc:	cmp	r8, #0
   203d0:	bne	2092c <__assert_fail@plt+0xf1cc>
   203d4:	ldrb	r0, [r1, #1]
   203d8:	tst	r0, #16
   203dc:	beq	203f4 <__assert_fail@plt+0xec94>
   203e0:	ubfx	r0, r2, #5, #3
   203e4:	and	r6, r2, #31
   203e8:	ldr	r7, [r4, r0, lsl #2]
   203ec:	orr	r7, r7, r3, lsl r6
   203f0:	str	r7, [r4, r0, lsl #2]
   203f4:	add	r2, r2, #1
   203f8:	add	r1, r1, #2
   203fc:	mov	r0, #0
   20400:	cmp	r2, #256	; 0x100
   20404:	bne	203d4 <__assert_fail@plt+0xec74>
   20408:	b	207c0 <__assert_fail@plt+0xf060>
   2040c:	bl	11610 <__ctype_b_loc@plt>
   20410:	ldr	r1, [r0]
   20414:	cmp	r8, #0
   20418:	bne	20868 <__assert_fail@plt+0xf108>
   2041c:	mov	r0, #0
   20420:	mov	r2, #1
   20424:	ldrb	r3, [r1]
   20428:	tst	r3, #8
   2042c:	bne	20450 <__assert_fail@plt+0xecf0>
   20430:	add	r0, r0, #1
   20434:	add	r1, r1, #2
   20438:	cmp	r0, #256	; 0x100
   2043c:	moveq	r0, #0
   20440:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20444:	ldrb	r3, [r1]
   20448:	tst	r3, #8
   2044c:	beq	20430 <__assert_fail@plt+0xecd0>
   20450:	ubfx	r3, r0, #5, #3
   20454:	and	r6, r0, #31
   20458:	ldr	r7, [r4, r3, lsl #2]
   2045c:	orr	r7, r7, r2, lsl r6
   20460:	str	r7, [r4, r3, lsl #2]
   20464:	b	20430 <__assert_fail@plt+0xecd0>
   20468:	bl	11610 <__ctype_b_loc@plt>
   2046c:	ldr	r1, [r0]
   20470:	cmp	r8, #0
   20474:	bne	208e8 <__assert_fail@plt+0xf188>
   20478:	mov	r0, #0
   2047c:	mov	r2, #1
   20480:	ldrb	r3, [r1]
   20484:	tst	r3, #2
   20488:	bne	204ac <__assert_fail@plt+0xed4c>
   2048c:	add	r0, r0, #1
   20490:	add	r1, r1, #2
   20494:	cmp	r0, #256	; 0x100
   20498:	moveq	r0, #0
   2049c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   204a0:	ldrb	r3, [r1]
   204a4:	tst	r3, #2
   204a8:	beq	2048c <__assert_fail@plt+0xed2c>
   204ac:	ubfx	r3, r0, #5, #3
   204b0:	and	r6, r0, #31
   204b4:	ldr	r7, [r4, r3, lsl #2]
   204b8:	orr	r7, r7, r2, lsl r6
   204bc:	str	r7, [r4, r3, lsl #2]
   204c0:	b	2048c <__assert_fail@plt+0xed2c>
   204c4:	bl	11610 <__ctype_b_loc@plt>
   204c8:	ldr	r1, [r0]
   204cc:	cmp	r8, #0
   204d0:	bne	209a4 <__assert_fail@plt+0xf244>
   204d4:	mov	r0, #0
   204d8:	mov	r2, #1
   204dc:	ldrb	r3, [r1, #1]
   204e0:	tst	r3, #2
   204e4:	bne	20508 <__assert_fail@plt+0xeda8>
   204e8:	add	r0, r0, #1
   204ec:	add	r1, r1, #2
   204f0:	cmp	r0, #256	; 0x100
   204f4:	moveq	r0, #0
   204f8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   204fc:	ldrb	r3, [r1, #1]
   20500:	tst	r3, #2
   20504:	beq	204e8 <__assert_fail@plt+0xed88>
   20508:	ubfx	r3, r0, #5, #3
   2050c:	and	r6, r0, #31
   20510:	ldr	r7, [r4, r3, lsl #2]
   20514:	orr	r7, r7, r2, lsl r6
   20518:	str	r7, [r4, r3, lsl #2]
   2051c:	b	204e8 <__assert_fail@plt+0xed88>
   20520:	bl	11610 <__ctype_b_loc@plt>
   20524:	ldr	r1, [r0]
   20528:	cmp	r8, #0
   2052c:	bne	20a24 <__assert_fail@plt+0xf2c4>
   20530:	mov	r0, #0
   20534:	mov	r2, #1
   20538:	ldrb	r3, [r1, #1]
   2053c:	tst	r3, #32
   20540:	bne	20564 <__assert_fail@plt+0xee04>
   20544:	add	r0, r0, #1
   20548:	add	r1, r1, #2
   2054c:	cmp	r0, #256	; 0x100
   20550:	moveq	r0, #0
   20554:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20558:	ldrb	r3, [r1, #1]
   2055c:	tst	r3, #32
   20560:	beq	20544 <__assert_fail@plt+0xede4>
   20564:	ubfx	r3, r0, #5, #3
   20568:	and	r6, r0, #31
   2056c:	ldr	r7, [r4, r3, lsl #2]
   20570:	orr	r7, r7, r2, lsl r6
   20574:	str	r7, [r4, r3, lsl #2]
   20578:	b	20544 <__assert_fail@plt+0xede4>
   2057c:	bl	11610 <__ctype_b_loc@plt>
   20580:	ldr	r1, [r0]
   20584:	cmp	r8, #0
   20588:	bne	20a68 <__assert_fail@plt+0xf308>
   2058c:	mov	r0, #0
   20590:	mov	r2, #1
   20594:	ldrb	r3, [r1, #1]
   20598:	tst	r3, #4
   2059c:	bne	205c0 <__assert_fail@plt+0xee60>
   205a0:	add	r0, r0, #1
   205a4:	add	r1, r1, #2
   205a8:	cmp	r0, #256	; 0x100
   205ac:	moveq	r0, #0
   205b0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   205b4:	ldrb	r3, [r1, #1]
   205b8:	tst	r3, #4
   205bc:	beq	205a0 <__assert_fail@plt+0xee40>
   205c0:	ubfx	r3, r0, #5, #3
   205c4:	and	r6, r0, #31
   205c8:	ldr	r7, [r4, r3, lsl #2]
   205cc:	orr	r7, r7, r2, lsl r6
   205d0:	str	r7, [r4, r3, lsl #2]
   205d4:	b	205a0 <__assert_fail@plt+0xee40>
   205d8:	bl	11610 <__ctype_b_loc@plt>
   205dc:	ldr	r1, [r0]
   205e0:	cmp	r8, #0
   205e4:	bne	20aac <__assert_fail@plt+0xf34c>
   205e8:	mov	r0, #0
   205ec:	mov	r2, #1
   205f0:	ldrb	r3, [r1, #1]
   205f4:	tst	r3, #8
   205f8:	bne	2061c <__assert_fail@plt+0xeebc>
   205fc:	add	r0, r0, #1
   20600:	add	r1, r1, #2
   20604:	cmp	r0, #256	; 0x100
   20608:	moveq	r0, #0
   2060c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20610:	ldrb	r3, [r1, #1]
   20614:	tst	r3, #8
   20618:	beq	205fc <__assert_fail@plt+0xee9c>
   2061c:	ubfx	r3, r0, #5, #3
   20620:	and	r6, r0, #31
   20624:	ldr	r7, [r4, r3, lsl #2]
   20628:	orr	r7, r7, r2, lsl r6
   2062c:	str	r7, [r4, r3, lsl #2]
   20630:	b	205fc <__assert_fail@plt+0xee9c>
   20634:	bl	11610 <__ctype_b_loc@plt>
   20638:	ldr	r1, [r0]
   2063c:	mov	r2, #0
   20640:	mov	r3, #1
   20644:	cmp	r8, #0
   20648:	bne	207f0 <__assert_fail@plt+0xf090>
   2064c:	ldrb	r0, [r1, #1]
   20650:	tst	r0, #64	; 0x40
   20654:	beq	2066c <__assert_fail@plt+0xef0c>
   20658:	ubfx	r0, r2, #5, #3
   2065c:	and	r6, r2, #31
   20660:	ldr	r7, [r4, r0, lsl #2]
   20664:	orr	r7, r7, r3, lsl r6
   20668:	str	r7, [r4, r0, lsl #2]
   2066c:	add	r2, r2, #1
   20670:	add	r1, r1, #2
   20674:	mov	r0, #0
   20678:	cmp	r2, #256	; 0x100
   2067c:	bne	2064c <__assert_fail@plt+0xeeec>
   20680:	b	207c0 <__assert_fail@plt+0xf060>
   20684:	bl	11610 <__ctype_b_loc@plt>
   20688:	ldr	r1, [r0]
   2068c:	mov	r2, #0
   20690:	mov	r3, #1
   20694:	cmp	r8, #0
   20698:	bne	2082c <__assert_fail@plt+0xf0cc>
   2069c:	ldrb	r0, [r1, #1]
   206a0:	tst	r0, #1
   206a4:	beq	206bc <__assert_fail@plt+0xef5c>
   206a8:	ubfx	r0, r2, #5, #3
   206ac:	and	r6, r2, #31
   206b0:	ldr	r7, [r4, r0, lsl #2]
   206b4:	orr	r7, r7, r3, lsl r6
   206b8:	str	r7, [r4, r0, lsl #2]
   206bc:	add	r2, r2, #1
   206c0:	add	r1, r1, #2
   206c4:	mov	r0, #0
   206c8:	cmp	r2, #256	; 0x100
   206cc:	bne	2069c <__assert_fail@plt+0xef3c>
   206d0:	b	207c0 <__assert_fail@plt+0xf060>
   206d4:	bl	11610 <__ctype_b_loc@plt>
   206d8:	ldr	r1, [r0]
   206dc:	mov	r2, #0
   206e0:	mov	r3, #1
   206e4:	cmp	r8, #0
   206e8:	bne	208ac <__assert_fail@plt+0xf14c>
   206ec:	ldrb	r0, [r1]
   206f0:	tst	r0, #1
   206f4:	beq	2070c <__assert_fail@plt+0xefac>
   206f8:	ubfx	r0, r2, #5, #3
   206fc:	and	r6, r2, #31
   20700:	ldr	r7, [r4, r0, lsl #2]
   20704:	orr	r7, r7, r3, lsl r6
   20708:	str	r7, [r4, r0, lsl #2]
   2070c:	add	r2, r2, #1
   20710:	add	r1, r1, #2
   20714:	mov	r0, #0
   20718:	cmp	r2, #256	; 0x100
   2071c:	bne	206ec <__assert_fail@plt+0xef8c>
   20720:	b	207c0 <__assert_fail@plt+0xf060>
   20724:	bl	11610 <__ctype_b_loc@plt>
   20728:	ldr	r1, [r0]
   2072c:	mov	r2, #0
   20730:	mov	r3, #1
   20734:	cmp	r8, #0
   20738:	bne	20968 <__assert_fail@plt+0xf208>
   2073c:	ldrsh	r0, [r1]
   20740:	cmn	r0, #1
   20744:	bgt	2075c <__assert_fail@plt+0xeffc>
   20748:	ubfx	r0, r2, #5, #3
   2074c:	and	r6, r2, #31
   20750:	ldr	r7, [r4, r0, lsl #2]
   20754:	orr	r7, r7, r3, lsl r6
   20758:	str	r7, [r4, r0, lsl #2]
   2075c:	add	r2, r2, #1
   20760:	add	r1, r1, #2
   20764:	mov	r0, #0
   20768:	cmp	r2, #256	; 0x100
   2076c:	bne	2073c <__assert_fail@plt+0xefdc>
   20770:	b	207c0 <__assert_fail@plt+0xf060>
   20774:	bl	11610 <__ctype_b_loc@plt>
   20778:	ldr	r1, [r0]
   2077c:	mov	r2, #0
   20780:	mov	r3, #1
   20784:	cmp	r8, #0
   20788:	bne	209e8 <__assert_fail@plt+0xf288>
   2078c:	ldrb	r0, [r1]
   20790:	tst	r0, #4
   20794:	beq	207ac <__assert_fail@plt+0xf04c>
   20798:	ubfx	r0, r2, #5, #3
   2079c:	and	r6, r2, #31
   207a0:	ldr	r7, [r4, r0, lsl #2]
   207a4:	orr	r7, r7, r3, lsl r6
   207a8:	str	r7, [r4, r0, lsl #2]
   207ac:	add	r2, r2, #1
   207b0:	add	r1, r1, #2
   207b4:	mov	r0, #0
   207b8:	cmp	r2, #256	; 0x100
   207bc:	bne	2078c <__assert_fail@plt+0xf02c>
   207c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   207c4:	mov	r1, #1
   207c8:	orr	r9, r1, r0, lsl #1
   207cc:	ldr	r0, [r7, #12]
   207d0:	lsl	r1, r9, #2
   207d4:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   207d8:	cmp	r0, #0
   207dc:	moveq	r0, #12
   207e0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   207e4:	str	r0, [r7, #12]
   207e8:	str	r9, [r5]
   207ec:	b	20278 <__assert_fail@plt+0xeb18>
   207f0:	ldrb	r0, [r1, #1]
   207f4:	tst	r0, #64	; 0x40
   207f8:	beq	20814 <__assert_fail@plt+0xf0b4>
   207fc:	ldrb	r0, [r8, r2]
   20800:	ubfx	r7, r0, #5, #3
   20804:	and	r0, r0, #31
   20808:	ldr	r6, [r4, r7, lsl #2]
   2080c:	orr	r0, r6, r3, lsl r0
   20810:	str	r0, [r4, r7, lsl #2]
   20814:	add	r2, r2, #1
   20818:	add	r1, r1, #2
   2081c:	mov	r0, #0
   20820:	cmp	r2, #256	; 0x100
   20824:	bne	207f0 <__assert_fail@plt+0xf090>
   20828:	b	207c0 <__assert_fail@plt+0xf060>
   2082c:	ldrb	r0, [r1, #1]
   20830:	tst	r0, #1
   20834:	beq	20850 <__assert_fail@plt+0xf0f0>
   20838:	ldrb	r0, [r8, r2]
   2083c:	ubfx	r7, r0, #5, #3
   20840:	and	r0, r0, #31
   20844:	ldr	r6, [r4, r7, lsl #2]
   20848:	orr	r0, r6, r3, lsl r0
   2084c:	str	r0, [r4, r7, lsl #2]
   20850:	add	r2, r2, #1
   20854:	add	r1, r1, #2
   20858:	mov	r0, #0
   2085c:	cmp	r2, #256	; 0x100
   20860:	bne	2082c <__assert_fail@plt+0xf0cc>
   20864:	b	207c0 <__assert_fail@plt+0xf060>
   20868:	mov	r2, #0
   2086c:	mov	r3, #1
   20870:	ldrb	r0, [r1]
   20874:	tst	r0, #8
   20878:	beq	20894 <__assert_fail@plt+0xf134>
   2087c:	ldrb	r0, [r8, r2]
   20880:	ubfx	r7, r0, #5, #3
   20884:	and	r0, r0, #31
   20888:	ldr	r6, [r4, r7, lsl #2]
   2088c:	orr	r0, r6, r3, lsl r0
   20890:	str	r0, [r4, r7, lsl #2]
   20894:	add	r2, r2, #1
   20898:	add	r1, r1, #2
   2089c:	mov	r0, #0
   208a0:	cmp	r2, #256	; 0x100
   208a4:	bne	20870 <__assert_fail@plt+0xf110>
   208a8:	b	207c0 <__assert_fail@plt+0xf060>
   208ac:	ldrb	r0, [r1]
   208b0:	tst	r0, #1
   208b4:	beq	208d0 <__assert_fail@plt+0xf170>
   208b8:	ldrb	r0, [r8, r2]
   208bc:	ubfx	r7, r0, #5, #3
   208c0:	and	r0, r0, #31
   208c4:	ldr	r6, [r4, r7, lsl #2]
   208c8:	orr	r0, r6, r3, lsl r0
   208cc:	str	r0, [r4, r7, lsl #2]
   208d0:	add	r2, r2, #1
   208d4:	add	r1, r1, #2
   208d8:	mov	r0, #0
   208dc:	cmp	r2, #256	; 0x100
   208e0:	bne	208ac <__assert_fail@plt+0xf14c>
   208e4:	b	207c0 <__assert_fail@plt+0xf060>
   208e8:	mov	r2, #0
   208ec:	mov	r3, #1
   208f0:	ldrb	r0, [r1]
   208f4:	tst	r0, #2
   208f8:	beq	20914 <__assert_fail@plt+0xf1b4>
   208fc:	ldrb	r0, [r8, r2]
   20900:	ubfx	r7, r0, #5, #3
   20904:	and	r0, r0, #31
   20908:	ldr	r6, [r4, r7, lsl #2]
   2090c:	orr	r0, r6, r3, lsl r0
   20910:	str	r0, [r4, r7, lsl #2]
   20914:	add	r2, r2, #1
   20918:	add	r1, r1, #2
   2091c:	mov	r0, #0
   20920:	cmp	r2, #256	; 0x100
   20924:	bne	208f0 <__assert_fail@plt+0xf190>
   20928:	b	207c0 <__assert_fail@plt+0xf060>
   2092c:	ldrb	r0, [r1, #1]
   20930:	tst	r0, #16
   20934:	beq	20950 <__assert_fail@plt+0xf1f0>
   20938:	ldrb	r0, [r8, r2]
   2093c:	ubfx	r7, r0, #5, #3
   20940:	and	r0, r0, #31
   20944:	ldr	r6, [r4, r7, lsl #2]
   20948:	orr	r0, r6, r3, lsl r0
   2094c:	str	r0, [r4, r7, lsl #2]
   20950:	add	r2, r2, #1
   20954:	add	r1, r1, #2
   20958:	mov	r0, #0
   2095c:	cmp	r2, #256	; 0x100
   20960:	bne	2092c <__assert_fail@plt+0xf1cc>
   20964:	b	207c0 <__assert_fail@plt+0xf060>
   20968:	ldrsh	r0, [r1]
   2096c:	cmn	r0, #1
   20970:	bgt	2098c <__assert_fail@plt+0xf22c>
   20974:	ldrb	r0, [r8, r2]
   20978:	ubfx	r7, r0, #5, #3
   2097c:	and	r0, r0, #31
   20980:	ldr	r6, [r4, r7, lsl #2]
   20984:	orr	r0, r6, r3, lsl r0
   20988:	str	r0, [r4, r7, lsl #2]
   2098c:	add	r2, r2, #1
   20990:	add	r1, r1, #2
   20994:	mov	r0, #0
   20998:	cmp	r2, #256	; 0x100
   2099c:	bne	20968 <__assert_fail@plt+0xf208>
   209a0:	b	207c0 <__assert_fail@plt+0xf060>
   209a4:	mov	r2, #0
   209a8:	mov	r3, #1
   209ac:	ldrb	r0, [r1, #1]
   209b0:	tst	r0, #2
   209b4:	beq	209d0 <__assert_fail@plt+0xf270>
   209b8:	ldrb	r0, [r8, r2]
   209bc:	ubfx	r7, r0, #5, #3
   209c0:	and	r0, r0, #31
   209c4:	ldr	r6, [r4, r7, lsl #2]
   209c8:	orr	r0, r6, r3, lsl r0
   209cc:	str	r0, [r4, r7, lsl #2]
   209d0:	add	r2, r2, #1
   209d4:	add	r1, r1, #2
   209d8:	mov	r0, #0
   209dc:	cmp	r2, #256	; 0x100
   209e0:	bne	209ac <__assert_fail@plt+0xf24c>
   209e4:	b	207c0 <__assert_fail@plt+0xf060>
   209e8:	ldrb	r0, [r1]
   209ec:	tst	r0, #4
   209f0:	beq	20a0c <__assert_fail@plt+0xf2ac>
   209f4:	ldrb	r0, [r8, r2]
   209f8:	ubfx	r7, r0, #5, #3
   209fc:	and	r0, r0, #31
   20a00:	ldr	r6, [r4, r7, lsl #2]
   20a04:	orr	r0, r6, r3, lsl r0
   20a08:	str	r0, [r4, r7, lsl #2]
   20a0c:	add	r2, r2, #1
   20a10:	add	r1, r1, #2
   20a14:	mov	r0, #0
   20a18:	cmp	r2, #256	; 0x100
   20a1c:	bne	209e8 <__assert_fail@plt+0xf288>
   20a20:	b	207c0 <__assert_fail@plt+0xf060>
   20a24:	mov	r2, #0
   20a28:	mov	r3, #1
   20a2c:	ldrb	r0, [r1, #1]
   20a30:	tst	r0, #32
   20a34:	beq	20a50 <__assert_fail@plt+0xf2f0>
   20a38:	ldrb	r0, [r8, r2]
   20a3c:	ubfx	r7, r0, #5, #3
   20a40:	and	r0, r0, #31
   20a44:	ldr	r6, [r4, r7, lsl #2]
   20a48:	orr	r0, r6, r3, lsl r0
   20a4c:	str	r0, [r4, r7, lsl #2]
   20a50:	add	r2, r2, #1
   20a54:	add	r1, r1, #2
   20a58:	mov	r0, #0
   20a5c:	cmp	r2, #256	; 0x100
   20a60:	bne	20a2c <__assert_fail@plt+0xf2cc>
   20a64:	b	207c0 <__assert_fail@plt+0xf060>
   20a68:	mov	r2, #0
   20a6c:	mov	r3, #1
   20a70:	ldrb	r0, [r1, #1]
   20a74:	tst	r0, #4
   20a78:	beq	20a94 <__assert_fail@plt+0xf334>
   20a7c:	ldrb	r0, [r8, r2]
   20a80:	ubfx	r7, r0, #5, #3
   20a84:	and	r0, r0, #31
   20a88:	ldr	r6, [r4, r7, lsl #2]
   20a8c:	orr	r0, r6, r3, lsl r0
   20a90:	str	r0, [r4, r7, lsl #2]
   20a94:	add	r2, r2, #1
   20a98:	add	r1, r1, #2
   20a9c:	mov	r0, #0
   20aa0:	cmp	r2, #256	; 0x100
   20aa4:	bne	20a70 <__assert_fail@plt+0xf310>
   20aa8:	b	207c0 <__assert_fail@plt+0xf060>
   20aac:	mov	r2, #0
   20ab0:	mov	r3, #1
   20ab4:	ldrb	r0, [r1, #1]
   20ab8:	tst	r0, #8
   20abc:	beq	20ad8 <__assert_fail@plt+0xf378>
   20ac0:	ldrb	r0, [r8, r2]
   20ac4:	ubfx	r7, r0, #5, #3
   20ac8:	and	r0, r0, #31
   20acc:	ldr	r6, [r4, r7, lsl #2]
   20ad0:	orr	r0, r6, r3, lsl r0
   20ad4:	str	r0, [r4, r7, lsl #2]
   20ad8:	add	r2, r2, #1
   20adc:	add	r1, r1, #2
   20ae0:	mov	r0, #0
   20ae4:	cmp	r2, #256	; 0x100
   20ae8:	bne	20ab4 <__assert_fail@plt+0xf354>
   20aec:	b	207c0 <__assert_fail@plt+0xf060>
   20af0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20af4:	add	fp, sp, #24
   20af8:	ldrb	r3, [r1, #24]
   20afc:	ldr	r2, [r1, #28]
   20b00:	mov	r4, #0
   20b04:	sub	r3, r3, #2
   20b08:	cmp	r3, #14
   20b0c:	bhi	20c30 <__assert_fail@plt+0xf4d0>
   20b10:	add	r7, pc, #0
   20b14:	ldr	pc, [r7, r3, lsl #2]
   20b18:	andeq	r0, r2, r4, ror #24
   20b1c:	andeq	r0, r2, r0, lsr ip
   20b20:	andeq	r0, r2, r8, asr #24
   20b24:	andeq	r0, r2, r0, lsr ip
   20b28:	andeq	r0, r2, r0, lsr ip
   20b2c:	andeq	r0, r2, r0, lsr ip
   20b30:	andeq	r0, r2, r4, asr fp
   20b34:	andeq	r0, r2, r4, asr fp
   20b38:	andeq	r0, r2, r8, lsr #23
   20b3c:	andeq	r0, r2, r8, lsr #23
   20b40:	andeq	r0, r2, r4, asr fp
   20b44:	andeq	r0, r2, r0, lsr ip
   20b48:	andeq	r0, r2, r0, lsr ip
   20b4c:	andeq	r0, r2, r0, lsr ip
   20b50:	andeq	r0, r2, r4, ror #24
   20b54:	ldr	r1, [r1, #16]
   20b58:	ldr	r5, [r1, #28]
   20b5c:	ldr	r6, [r0, #20]
   20b60:	add	r0, r2, r2, lsl #1
   20b64:	mov	r1, #1
   20b68:	str	r1, [r6, r0, lsl #2]!
   20b6c:	mov	r0, #4
   20b70:	mov	r7, r6
   20b74:	str	r1, [r7, #4]!
   20b78:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   20b7c:	cmp	r0, #0
   20b80:	str	r0, [r6, #8]
   20b84:	strne	r5, [r0]
   20b88:	movne	r0, r4
   20b8c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   20b90:	mov	r0, #0
   20b94:	str	r0, [r7]
   20b98:	str	r0, [r6]
   20b9c:	mov	r4, #12
   20ba0:	mov	r0, r4
   20ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20ba8:	ldrb	r3, [r0, #88]	; 0x58
   20bac:	add	r6, r1, #16
   20bb0:	add	r5, r2, r2, lsl #1
   20bb4:	orr	r3, r3, #1
   20bb8:	strb	r3, [r0, #88]	; 0x58
   20bbc:	mov	r3, r6
   20bc0:	ldr	r7, [r1, #4]
   20bc4:	ldr	r1, [r1, #8]
   20bc8:	cmp	r1, #0
   20bcc:	addne	r3, r1, #12
   20bd0:	cmp	r7, #0
   20bd4:	ldr	r1, [r3]
   20bd8:	addne	r6, r7, #12
   20bdc:	ldr	r8, [r1, #28]
   20be0:	ldr	r1, [r6]
   20be4:	ldr	r6, [r0, #20]
   20be8:	mov	r0, #2
   20bec:	ldr	r9, [r1, #28]
   20bf0:	mov	r7, r6
   20bf4:	str	r0, [r7, r5, lsl #2]!
   20bf8:	mov	r0, #8
   20bfc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   20c00:	cmp	r0, #0
   20c04:	str	r0, [r7, #8]
   20c08:	beq	20b9c <__assert_fail@plt+0xf43c>
   20c0c:	add	r1, r6, r5, lsl #2
   20c10:	cmp	r9, r8
   20c14:	add	r1, r1, #4
   20c18:	bne	20c6c <__assert_fail@plt+0xf50c>
   20c1c:	mov	r2, #1
   20c20:	str	r2, [r1]
   20c24:	str	r9, [r0]
   20c28:	mov	r0, r4
   20c2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c30:	ldr	r1, [r1, #16]
   20c34:	ldr	r0, [r0, #12]
   20c38:	ldr	r1, [r1, #28]
   20c3c:	str	r1, [r0, r2, lsl #2]
   20c40:	mov	r0, r4
   20c44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c48:	ldr	r7, [r1, #16]
   20c4c:	ldr	r3, [r0, #12]
   20c50:	ldr	r5, [r7, #28]
   20c54:	str	r5, [r3, r2, lsl #2]
   20c58:	ldrb	r1, [r1, #24]
   20c5c:	cmp	r1, #4
   20c60:	beq	20b5c <__assert_fail@plt+0xf3fc>
   20c64:	mov	r0, r4
   20c68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c6c:	mov	r2, #2
   20c70:	str	r2, [r1]
   20c74:	stmge	r0, {r8, r9}
   20c78:	strlt	r9, [r0]
   20c7c:	strlt	r8, [r0, #4]
   20c80:	mov	r0, r4
   20c84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c8c:	add	fp, sp, #28
   20c90:	sub	sp, sp, #4
   20c94:	ldr	r6, [r3, #4]
   20c98:	tst	r2, #16
   20c9c:	mov	r9, r3
   20ca0:	mov	r7, r1
   20ca4:	mov	r8, r0
   20ca8:	cmpne	r6, #0
   20cac:	bne	20e64 <__assert_fail@plt+0xf704>
   20cb0:	ldr	r1, [r7, #64]	; 0x40
   20cb4:	cmp	r1, #31
   20cb8:	beq	20e8c <__assert_fail@plt+0xf72c>
   20cbc:	ldr	r0, [r7, #56]	; 0x38
   20cc0:	add	r2, r1, #1
   20cc4:	add	r0, r0, r1, lsl #5
   20cc8:	mov	r1, #0
   20ccc:	vmov.i32	q8, #0	; 0x00000000
   20cd0:	str	r2, [r7, #64]	; 0x40
   20cd4:	add	sl, r0, #4
   20cd8:	mov	r2, #8
   20cdc:	str	r1, [r0, #20]
   20ce0:	str	r1, [r0, #24]
   20ce4:	str	r2, [r0, #28]
   20ce8:	mov	r0, #28
   20cec:	mov	r1, sl
   20cf0:	vst1.32	{d16-d17}, [r1], r0
   20cf4:	mvn	r0, #0
   20cf8:	str	r0, [r1]
   20cfc:	ldr	r1, [r7, #64]	; 0x40
   20d00:	cmp	r1, #31
   20d04:	beq	20eec <__assert_fail@plt+0xf78c>
   20d08:	ldr	r0, [r7, #56]	; 0x38
   20d0c:	add	r2, r1, #1
   20d10:	add	r0, r0, r1, lsl #5
   20d14:	mov	r1, #0
   20d18:	vmov.i32	q8, #0	; 0x00000000
   20d1c:	str	r2, [r7, #64]	; 0x40
   20d20:	add	r5, r0, #4
   20d24:	mov	r2, #9
   20d28:	str	r1, [r0, #20]
   20d2c:	str	r1, [r0, #24]
   20d30:	str	r2, [r0, #28]
   20d34:	mov	r0, #28
   20d38:	mov	r1, r5
   20d3c:	vst1.32	{d16-d17}, [r1], r0
   20d40:	mvn	r0, #0
   20d44:	str	r0, [r1]
   20d48:	cmp	r6, #0
   20d4c:	mov	r4, r5
   20d50:	beq	20da4 <__assert_fail@plt+0xf644>
   20d54:	ldr	r1, [r7, #64]	; 0x40
   20d58:	cmp	r1, #31
   20d5c:	beq	20eb4 <__assert_fail@plt+0xf754>
   20d60:	ldr	r0, [r7, #56]	; 0x38
   20d64:	add	r2, r1, #1
   20d68:	add	r4, r0, r1, lsl #5
   20d6c:	mov	r0, #0
   20d70:	mov	r1, #16
   20d74:	cmp	r5, #0
   20d78:	str	r2, [r7, #64]	; 0x40
   20d7c:	str	r0, [r4, #4]!
   20d80:	mvn	r2, #0
   20d84:	add	r3, r4, #20
   20d88:	str	r6, [r4, #4]
   20d8c:	str	r5, [r4, #8]
   20d90:	str	r0, [r4, #12]
   20d94:	str	r0, [r4, #16]
   20d98:	stm	r3, {r0, r1, r2}
   20d9c:	str	r4, [r6]
   20da0:	strne	r4, [r5]
   20da4:	ldr	r1, [r7, #64]	; 0x40
   20da8:	cmp	r1, #31
   20dac:	beq	20f38 <__assert_fail@plt+0xf7d8>
   20db0:	ldr	r0, [r7, #56]	; 0x38
   20db4:	add	r2, r1, #1
   20db8:	add	r6, r0, r1, lsl #5
   20dbc:	mov	r0, #0
   20dc0:	mov	r1, #16
   20dc4:	cmp	sl, #0
   20dc8:	str	r2, [r7, #64]	; 0x40
   20dcc:	str	r0, [r6, #4]!
   20dd0:	mvn	r2, #0
   20dd4:	add	r3, r6, #20
   20dd8:	str	sl, [r6, #4]
   20ddc:	str	r4, [r6, #8]
   20de0:	str	r0, [r6, #12]
   20de4:	str	r0, [r6, #16]
   20de8:	stm	r3, {r0, r1, r2}
   20dec:	strne	r6, [sl]
   20df0:	cmp	r4, #0
   20df4:	strne	r6, [r4]
   20df8:	cmp	r5, #0
   20dfc:	beq	20e0c <__assert_fail@plt+0xf6ac>
   20e00:	cmp	sl, #0
   20e04:	cmpne	r4, #0
   20e08:	bne	20e24 <__assert_fail@plt+0xf6c4>
   20e0c:	mov	r0, #12
   20e10:	mov	r6, #0
   20e14:	str	r0, [r8]
   20e18:	mov	r0, r6
   20e1c:	sub	sp, fp, #28
   20e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e24:	cmp	r6, #0
   20e28:	beq	20e0c <__assert_fail@plt+0xf6ac>
   20e2c:	ldr	r0, [r9, #20]
   20e30:	str	r0, [r5, #20]
   20e34:	str	r0, [sl, #20]
   20e38:	ldr	r1, [r9, #24]
   20e3c:	ldr	r0, [r5, #24]
   20e40:	lsr	r1, r1, #19
   20e44:	bfi	r0, r1, #19, #1
   20e48:	str	r0, [r5, #24]
   20e4c:	ldr	r0, [sl, #24]
   20e50:	bfi	r0, r1, #19, #1
   20e54:	str	r0, [sl, #24]
   20e58:	mov	r0, r6
   20e5c:	sub	sp, fp, #28
   20e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e64:	ldr	r0, [r9, #20]
   20e68:	cmp	r0, #31
   20e6c:	bgt	20e80 <__assert_fail@plt+0xf720>
   20e70:	ldr	r1, [r7, #80]	; 0x50
   20e74:	mov	r2, #1
   20e78:	tst	r1, r2, lsl r0
   20e7c:	bne	20cb0 <__assert_fail@plt+0xf550>
   20e80:	mov	r0, r6
   20e84:	sub	sp, fp, #28
   20e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e8c:	mov	r0, #996	; 0x3e4
   20e90:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   20e94:	cmp	r0, #0
   20e98:	beq	20edc <__assert_fail@plt+0xf77c>
   20e9c:	ldr	r1, [r7, #56]	; 0x38
   20ea0:	str	r1, [r0]
   20ea4:	mov	r1, #0
   20ea8:	str	r1, [r7, #64]	; 0x40
   20eac:	str	r0, [r7, #56]	; 0x38
   20eb0:	b	20cc0 <__assert_fail@plt+0xf560>
   20eb4:	mov	r0, #996	; 0x3e4
   20eb8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   20ebc:	cmp	r0, #0
   20ec0:	beq	20f28 <__assert_fail@plt+0xf7c8>
   20ec4:	ldr	r1, [r7, #56]	; 0x38
   20ec8:	str	r1, [r0]
   20ecc:	mov	r1, #0
   20ed0:	str	r1, [r7, #64]	; 0x40
   20ed4:	str	r0, [r7, #56]	; 0x38
   20ed8:	b	20d64 <__assert_fail@plt+0xf604>
   20edc:	mov	sl, #0
   20ee0:	ldr	r1, [r7, #64]	; 0x40
   20ee4:	cmp	r1, #31
   20ee8:	bne	20d08 <__assert_fail@plt+0xf5a8>
   20eec:	mov	r0, #996	; 0x3e4
   20ef0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   20ef4:	cmp	r0, #0
   20ef8:	beq	20f14 <__assert_fail@plt+0xf7b4>
   20efc:	ldr	r1, [r7, #56]	; 0x38
   20f00:	str	r1, [r0]
   20f04:	mov	r1, #0
   20f08:	str	r1, [r7, #64]	; 0x40
   20f0c:	str	r0, [r7, #56]	; 0x38
   20f10:	b	20d0c <__assert_fail@plt+0xf5ac>
   20f14:	mov	r5, #0
   20f18:	cmp	r6, #0
   20f1c:	mov	r4, r5
   20f20:	bne	20d54 <__assert_fail@plt+0xf5f4>
   20f24:	b	20da4 <__assert_fail@plt+0xf644>
   20f28:	mov	r4, #0
   20f2c:	ldr	r1, [r7, #64]	; 0x40
   20f30:	cmp	r1, #31
   20f34:	bne	20db0 <__assert_fail@plt+0xf650>
   20f38:	mov	r0, #996	; 0x3e4
   20f3c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   20f40:	cmp	r0, #0
   20f44:	beq	20f60 <__assert_fail@plt+0xf800>
   20f48:	ldr	r1, [r7, #56]	; 0x38
   20f4c:	str	r1, [r0]
   20f50:	mov	r1, #0
   20f54:	str	r1, [r7, #64]	; 0x40
   20f58:	str	r0, [r7, #56]	; 0x38
   20f5c:	b	20db4 <__assert_fail@plt+0xf654>
   20f60:	mov	r6, #0
   20f64:	cmp	r5, #0
   20f68:	bne	20e00 <__assert_fail@plt+0xf6a0>
   20f6c:	b	20e0c <__assert_fail@plt+0xf6ac>
   20f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f74:	add	fp, sp, #28
   20f78:	sub	sp, sp, #12
   20f7c:	mov	r4, r0
   20f80:	ldr	r7, [r0, #4]
   20f84:	ldr	r0, [r0, #8]
   20f88:	mov	r5, r2
   20f8c:	mov	r9, r1
   20f90:	cmp	r0, r7
   20f94:	bcs	21060 <__assert_fail@plt+0xf900>
   20f98:	ldr	r1, [r4]
   20f9c:	str	r9, [r1, r0, lsl #3]!
   20fa0:	str	r5, [r1, #4]
   20fa4:	ldr	r0, [r4]
   20fa8:	ldr	r1, [r4, #8]
   20fac:	add	r0, r0, r1, lsl #3
   20fb0:	ldr	r1, [r0, #4]
   20fb4:	bfc	r1, #8, #10
   20fb8:	str	r1, [r0, #4]
   20fbc:	uxtb	r1, r5
   20fc0:	cmp	r1, #5
   20fc4:	bne	20fd8 <__assert_fail@plt+0xf878>
   20fc8:	ldr	r2, [r4, #92]	; 0x5c
   20fcc:	mov	r0, #1048576	; 0x100000
   20fd0:	cmp	r2, #1
   20fd4:	bgt	20fe8 <__assert_fail@plt+0xf888>
   20fd8:	sub	r0, r1, #6
   20fdc:	clz	r0, r0
   20fe0:	lsr	r0, r0, #5
   20fe4:	lsl	r0, r0, #20
   20fe8:	ldr	r1, [r4]
   20fec:	ldr	r2, [r4, #8]
   20ff0:	add	r1, r1, r2, lsl #3
   20ff4:	ldr	r2, [r1, #4]
   20ff8:	bic	r2, r2, #1048576	; 0x100000
   20ffc:	orr	r0, r2, r0
   21000:	mvn	r2, #0
   21004:	str	r0, [r1, #4]
   21008:	ldr	r0, [r4, #8]
   2100c:	ldr	r1, [r4, #12]
   21010:	str	r2, [r1, r0, lsl #2]
   21014:	mov	r2, #0
   21018:	ldr	r0, [r4, #8]
   2101c:	ldr	r1, [r4, #20]
   21020:	add	r0, r0, r0, lsl #1
   21024:	str	r2, [r1, r0, lsl #2]!
   21028:	str	r2, [r1, #4]
   2102c:	str	r2, [r1, #8]
   21030:	ldr	r0, [r4, #8]
   21034:	ldr	r1, [r4, #24]
   21038:	add	r0, r0, r0, lsl #1
   2103c:	str	r2, [r1, r0, lsl #2]!
   21040:	str	r2, [r1, #4]
   21044:	str	r2, [r1, #8]
   21048:	ldr	r6, [r4, #8]
   2104c:	add	r0, r6, #1
   21050:	str	r0, [r4, #8]
   21054:	mov	r0, r6
   21058:	sub	sp, fp, #28
   2105c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21060:	movw	r0, #21845	; 0x5555
   21064:	lsl	r1, r7, #1
   21068:	mvn	r6, #0
   2106c:	movt	r0, #5461	; 0x1555
   21070:	cmp	r1, r0
   21074:	bhi	21054 <__assert_fail@plt+0xf8f4>
   21078:	ldr	r0, [r4]
   2107c:	str	r1, [sp, #8]
   21080:	lsl	r1, r7, #4
   21084:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   21088:	cmp	r0, #0
   2108c:	beq	21054 <__assert_fail@plt+0xf8f4>
   21090:	str	r0, [r4]
   21094:	lsl	r8, r7, #3
   21098:	ldr	r0, [r4, #12]
   2109c:	mov	r1, r8
   210a0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   210a4:	str	r0, [sp, #4]
   210a8:	ldr	r0, [r4, #16]
   210ac:	mov	r1, r8
   210b0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   210b4:	mov	r2, r0
   210b8:	ldr	r0, [r4, #20]
   210bc:	add	r1, r7, r7, lsl #1
   210c0:	lsl	r8, r1, #3
   210c4:	mov	r7, r2
   210c8:	mov	r1, r8
   210cc:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   210d0:	mov	sl, r0
   210d4:	ldr	r0, [r4, #24]
   210d8:	mov	r1, r8
   210dc:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   210e0:	mov	r8, r0
   210e4:	ldr	r0, [sp, #4]
   210e8:	cmp	r0, #0
   210ec:	beq	210fc <__assert_fail@plt+0xf99c>
   210f0:	cmp	r7, #0
   210f4:	cmpne	sl, #0
   210f8:	bne	21124 <__assert_fail@plt+0xf9c4>
   210fc:	bl	14538 <__assert_fail@plt+0x2dd8>
   21100:	mov	r0, r7
   21104:	bl	14538 <__assert_fail@plt+0x2dd8>
   21108:	mov	r0, sl
   2110c:	bl	14538 <__assert_fail@plt+0x2dd8>
   21110:	mov	r0, r8
   21114:	bl	14538 <__assert_fail@plt+0x2dd8>
   21118:	mov	r0, r6
   2111c:	sub	sp, fp, #28
   21120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21124:	cmp	r8, #0
   21128:	beq	210fc <__assert_fail@plt+0xf99c>
   2112c:	add	r1, r4, #12
   21130:	stm	r1, {r0, r7, sl}
   21134:	str	r8, [r4, #24]
   21138:	ldr	r0, [sp, #8]
   2113c:	str	r0, [r4, #4]
   21140:	ldr	r0, [r4, #8]
   21144:	b	20f98 <__assert_fail@plt+0xf838>
   21148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2114c:	add	fp, sp, #28
   21150:	sub	sp, sp, #44	; 0x2c
   21154:	mov	r8, r0
   21158:	ldr	r0, [r1, #20]
   2115c:	add	r4, r2, r2, lsl #1
   21160:	mov	r5, r1
   21164:	mov	r1, #0
   21168:	mov	r9, r3
   2116c:	mov	r6, r2
   21170:	add	r0, r0, r4, lsl #2
   21174:	ldr	r0, [r0, #4]
   21178:	str	r1, [sp, #36]	; 0x24
   2117c:	add	r0, r0, #1
   21180:	str	r0, [sp, #32]
   21184:	lsl	r0, r0, #2
   21188:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2118c:	cmp	r0, #0
   21190:	str	r0, [sp, #40]	; 0x28
   21194:	beq	2135c <__assert_fail@plt+0xfbfc>
   21198:	mov	r1, #1
   2119c:	str	r6, [r0]
   211a0:	str	r1, [sp, #36]	; 0x24
   211a4:	mvn	r1, #0
   211a8:	ldr	r0, [r5, #24]
   211ac:	add	r0, r0, r4, lsl #2
   211b0:	str	r1, [r0, #4]
   211b4:	ldr	r2, [r5]
   211b8:	add	r0, r2, r6, lsl #3
   211bc:	ldr	r0, [r0, #4]
   211c0:	ubfx	r1, r0, #8, #10
   211c4:	cmp	r1, #0
   211c8:	beq	21224 <__assert_fail@plt+0xfac4>
   211cc:	ldr	r3, [r5, #20]
   211d0:	add	r3, r3, r4, lsl #2
   211d4:	ldr	r7, [r3, #4]
   211d8:	cmp	r7, #0
   211dc:	beq	21224 <__assert_fail@plt+0xfac4>
   211e0:	ldr	r3, [r3, #8]
   211e4:	ldr	r3, [r3]
   211e8:	add	r2, r2, r3, lsl #3
   211ec:	ldrb	r2, [r2, #6]
   211f0:	tst	r2, #4
   211f4:	bne	21224 <__assert_fail@plt+0xfac4>
   211f8:	str	r1, [sp]
   211fc:	mov	r0, r5
   21200:	mov	r1, r6
   21204:	mov	r2, r6
   21208:	mov	r3, r6
   2120c:	bl	21368 <__assert_fail@plt+0xfc08>
   21210:	cmp	r0, #0
   21214:	bne	21354 <__assert_fail@plt+0xfbf4>
   21218:	ldr	r0, [r5]
   2121c:	add	r0, r0, r6, lsl #3
   21220:	ldr	r0, [r0, #4]
   21224:	tst	r0, #8
   21228:	beq	21328 <__assert_fail@plt+0xfbc8>
   2122c:	ldr	r0, [r5, #20]
   21230:	add	r1, r0, r4, lsl #2
   21234:	ldr	r1, [r1, #4]
   21238:	cmp	r1, #1
   2123c:	blt	21328 <__assert_fail@plt+0xfbc8>
   21240:	str	r8, [sp, #12]
   21244:	mov	r8, #0
   21248:	add	r7, sp, #16
   2124c:	add	sl, sp, #32
   21250:	mov	r6, #0
   21254:	str	r9, [sp, #8]
   21258:	add	r0, r0, r4, lsl #2
   2125c:	ldr	r0, [r0, #8]
   21260:	ldr	r2, [r0, r6, lsl #2]
   21264:	ldr	r0, [r5, #24]
   21268:	add	r9, r2, r2, lsl #1
   2126c:	add	r0, r0, r9, lsl #2
   21270:	ldr	r1, [r0, #4]
   21274:	cmn	r1, #1
   21278:	beq	212e0 <__assert_fail@plt+0xfb80>
   2127c:	cmp	r1, #0
   21280:	bne	212a0 <__assert_fail@plt+0xfb40>
   21284:	mov	r0, r7
   21288:	mov	r1, r5
   2128c:	mov	r3, #0
   21290:	bl	21148 <__assert_fail@plt+0xf9e8>
   21294:	cmp	r0, #0
   21298:	beq	212b0 <__assert_fail@plt+0xfb50>
   2129c:	b	21354 <__assert_fail@plt+0xfbf4>
   212a0:	vldr	d16, [r0]
   212a4:	ldr	r0, [r0, #8]
   212a8:	str	r0, [sp, #24]
   212ac:	vstr	d16, [sp, #16]
   212b0:	mov	r0, sl
   212b4:	mov	r1, r7
   212b8:	bl	2182c <__assert_fail@plt+0x100cc>
   212bc:	cmp	r0, #0
   212c0:	bne	21354 <__assert_fail@plt+0xfbf4>
   212c4:	ldr	r0, [r5, #24]
   212c8:	add	r0, r0, r9, lsl #2
   212cc:	ldr	r0, [r0, #4]
   212d0:	cmp	r0, #0
   212d4:	bne	212e4 <__assert_fail@plt+0xfb84>
   212d8:	ldr	r0, [sp, #24]
   212dc:	bl	14538 <__assert_fail@plt+0x2dd8>
   212e0:	mov	r8, #1
   212e4:	ldr	r0, [r5, #20]
   212e8:	add	r6, r6, #1
   212ec:	add	r1, r0, r4, lsl #2
   212f0:	ldr	r1, [r1, #4]
   212f4:	cmp	r6, r1
   212f8:	blt	21258 <__assert_fail@plt+0xfaf8>
   212fc:	tst	r8, #1
   21300:	ldr	r8, [sp, #12]
   21304:	ldr	r0, [sp, #8]
   21308:	beq	21328 <__assert_fail@plt+0xfbc8>
   2130c:	cmp	r0, #0
   21310:	bne	21328 <__assert_fail@plt+0xfbc8>
   21314:	ldr	r0, [r5, #24]
   21318:	mov	r1, #0
   2131c:	add	r0, r0, r4, lsl #2
   21320:	str	r1, [r0, #4]
   21324:	b	21340 <__assert_fail@plt+0xfbe0>
   21328:	ldr	r0, [r5, #24]
   2132c:	vldr	d16, [sp, #32]
   21330:	ldr	r1, [sp, #40]	; 0x28
   21334:	add	r0, r0, r4, lsl #2
   21338:	str	r1, [r0, #8]
   2133c:	vstr	d16, [r0]
   21340:	ldr	r0, [sp, #40]	; 0x28
   21344:	vldr	d16, [sp, #32]
   21348:	str	r0, [r8, #8]
   2134c:	mov	r0, #0
   21350:	vstr	d16, [r8]
   21354:	sub	sp, fp, #28
   21358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2135c:	mov	r0, #12
   21360:	sub	sp, fp, #28
   21364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2136c:	add	fp, sp, #28
   21370:	sub	sp, sp, #20
   21374:	mov	r9, r0
   21378:	ldr	r0, [fp, #8]
   2137c:	mov	sl, r2
   21380:	mov	r8, r1
   21384:	str	r3, [sp, #8]
   21388:	str	r0, [sp, #16]
   2138c:	ldr	r2, [r9]
   21390:	add	r3, r2, r8, lsl #3
   21394:	ldrb	r0, [r3, #4]!
   21398:	cmp	r0, #4
   2139c:	bne	2148c <__assert_fail@plt+0xfd2c>
   213a0:	ldr	r0, [r9, #12]
   213a4:	ldr	r1, [r9, #20]
   213a8:	add	r6, sl, sl, lsl #1
   213ac:	ldr	r4, [r0, r8, lsl #2]
   213b0:	add	r0, r1, r6, lsl #2
   213b4:	mov	r1, #0
   213b8:	str	r1, [r0, #4]
   213bc:	mov	r0, r9
   213c0:	ldr	r1, [r2, r4, lsl #3]!
   213c4:	ldr	r2, [r2, #4]
   213c8:	bl	20f70 <__assert_fail@plt+0xf810>
   213cc:	mov	r7, r0
   213d0:	mov	r0, #12
   213d4:	cmn	r7, #1
   213d8:	str	r0, [sp, #12]
   213dc:	beq	21800 <__assert_fail@plt+0x100a0>
   213e0:	ldr	r1, [r9]
   213e4:	movw	r0, #65280	; 0xff00
   213e8:	movw	r3, #255	; 0xff
   213ec:	movt	r0, #3
   213f0:	movt	r3, #65532	; 0xfffc
   213f4:	mov	ip, r0
   213f8:	ldr	r0, [sp, #16]
   213fc:	add	r1, r1, r7, lsl #3
   21400:	ldr	r2, [r1, #4]
   21404:	and	r0, ip, r0, lsl #8
   21408:	and	r2, r2, r3
   2140c:	orr	r0, r2, r0
   21410:	str	r0, [r1, #4]
   21414:	ldr	r0, [r9]
   21418:	add	r1, r0, r4, lsl #3
   2141c:	add	r0, r0, r7, lsl #3
   21420:	ldr	r1, [r1, #4]
   21424:	ldr	r2, [r0, #4]
   21428:	and	r1, r1, ip
   2142c:	orr	r1, r1, r2
   21430:	str	r1, [r0, #4]
   21434:	ldr	r0, [r9]
   21438:	add	r0, r0, r7, lsl #3
   2143c:	ldr	r1, [r0, #4]
   21440:	orr	r1, r1, #262144	; 0x40000
   21444:	str	r1, [r0, #4]
   21448:	ldr	r0, [r9, #16]
   2144c:	str	r4, [r0, r7, lsl #2]
   21450:	ldr	r0, [r9, #12]
   21454:	ldr	r1, [r0, r8, lsl #2]
   21458:	str	r1, [r0, sl, lsl #2]
   2145c:	mov	r1, r7
   21460:	ldr	r0, [r9, #20]
   21464:	add	r0, r0, r6, lsl #2
   21468:	bl	219d4 <__assert_fail@plt+0x10274>
   2146c:	mov	r1, #0
   21470:	cmp	r0, #0
   21474:	mov	r8, r4
   21478:	mov	sl, r7
   2147c:	beq	21800 <__assert_fail@plt+0x100a0>
   21480:	cmp	r1, #0
   21484:	beq	2138c <__assert_fail@plt+0xfc2c>
   21488:	b	217f0 <__assert_fail@plt+0x10090>
   2148c:	ldr	r0, [r9, #20]
   21490:	add	ip, r8, r8, lsl #1
   21494:	add	r7, r0, ip, lsl #2
   21498:	ldr	r1, [r7, #4]
   2149c:	cmp	r1, #0
   214a0:	beq	2180c <__assert_fail@plt+0x100ac>
   214a4:	ldr	r7, [r7, #8]
   214a8:	add	r6, sl, sl, lsl #1
   214ac:	cmp	r1, #1
   214b0:	add	r0, r0, r6, lsl #2
   214b4:	ldr	r5, [r7]
   214b8:	mov	r7, #0
   214bc:	str	r7, [r0, #4]
   214c0:	bne	214fc <__assert_fail@plt+0xfd9c>
   214c4:	ldr	r1, [sp, #8]
   214c8:	cmp	r8, r1
   214cc:	bne	216fc <__assert_fail@plt+0xff9c>
   214d0:	cmp	sl, r8
   214d4:	beq	216fc <__assert_fail@plt+0xff9c>
   214d8:	mov	r1, r5
   214dc:	bl	219d4 <__assert_fail@plt+0x10274>
   214e0:	ldr	r8, [sp, #8]
   214e4:	cmp	r0, #0
   214e8:	mov	r1, #1
   214ec:	movwne	r1, #2
   214f0:	cmp	r1, #0
   214f4:	beq	2138c <__assert_fail@plt+0xfc2c>
   214f8:	b	217f0 <__assert_fail@plt+0x10090>
   214fc:	ldr	r1, [r9, #8]
   21500:	ldr	r8, [sp, #16]
   21504:	str	r6, [sp, #4]
   21508:	sub	r3, r1, #1
   2150c:	cmp	r3, #1
   21510:	blt	21560 <__assert_fail@plt+0xfe00>
   21514:	add	r3, r2, r3, lsl #3
   21518:	ldr	r6, [r3, #4]
   2151c:	ands	r3, r6, #262144	; 0x40000
   21520:	beq	21560 <__assert_fail@plt+0xfe00>
   21524:	ldr	r4, [r9, #16]
   21528:	sub	r3, r2, #12
   2152c:	sub	r4, r4, #4
   21530:	ldr	r7, [r4, r1, lsl #2]
   21534:	cmp	r7, r5
   21538:	ubfxeq	r7, r6, #8, #10
   2153c:	cmpeq	r7, r8
   21540:	beq	217c4 <__assert_fail@plt+0x10064>
   21544:	sub	r7, r1, #2
   21548:	cmp	r7, #1
   2154c:	blt	21560 <__assert_fail@plt+0xfe00>
   21550:	ldr	r6, [r3, r1, lsl #3]
   21554:	sub	r1, r1, #1
   21558:	ands	r7, r6, #262144	; 0x40000
   2155c:	bne	21530 <__assert_fail@plt+0xfdd0>
   21560:	ldr	r1, [r2, r5, lsl #3]!
   21564:	mov	r0, r9
   21568:	mov	sl, ip
   2156c:	ldr	r2, [r2, #4]
   21570:	bl	20f70 <__assert_fail@plt+0xf810>
   21574:	mov	r4, r0
   21578:	mov	r0, #12
   2157c:	cmn	r4, #1
   21580:	str	r0, [sp, #12]
   21584:	beq	21800 <__assert_fail@plt+0x100a0>
   21588:	ldr	r1, [r9]
   2158c:	movw	r0, #65280	; 0xff00
   21590:	movw	r7, #255	; 0xff
   21594:	ldr	r6, [sp, #4]
   21598:	movt	r0, #3
   2159c:	movt	r7, #65532	; 0xfffc
   215a0:	mov	r3, r0
   215a4:	and	r0, r0, r8, lsl #8
   215a8:	add	r1, r1, r4, lsl #3
   215ac:	ldr	r2, [r1, #4]
   215b0:	and	r2, r2, r7
   215b4:	orr	r0, r2, r0
   215b8:	str	r0, [r1, #4]
   215bc:	ldr	r0, [r9]
   215c0:	add	r1, r0, r5, lsl #3
   215c4:	add	r0, r0, r4, lsl #3
   215c8:	ldr	r1, [r1, #4]
   215cc:	ldr	r2, [r0, #4]
   215d0:	and	r1, r1, r3
   215d4:	orr	r1, r1, r2
   215d8:	str	r1, [r0, #4]
   215dc:	ldr	r0, [r9]
   215e0:	add	r0, r0, r4, lsl #3
   215e4:	ldr	r1, [r0, #4]
   215e8:	orr	r1, r1, #262144	; 0x40000
   215ec:	str	r1, [r0, #4]
   215f0:	mov	r1, r4
   215f4:	ldr	r0, [r9, #16]
   215f8:	str	r5, [r0, r4, lsl #2]
   215fc:	ldr	r0, [r9, #20]
   21600:	add	r0, r0, r6, lsl #2
   21604:	bl	219d4 <__assert_fail@plt+0x10274>
   21608:	cmp	r0, #0
   2160c:	beq	21800 <__assert_fail@plt+0x100a0>
   21610:	ldr	r0, [sp, #16]
   21614:	ldr	r3, [sp, #8]
   21618:	mov	r1, r5
   2161c:	mov	r2, r4
   21620:	str	r0, [sp]
   21624:	mov	r0, r9
   21628:	bl	21368 <__assert_fail@plt+0xfc08>
   2162c:	cmp	r0, #0
   21630:	bne	2181c <__assert_fail@plt+0x100bc>
   21634:	ldr	r1, [r9, #20]
   21638:	ldr	r0, [r9]
   2163c:	add	r1, r1, sl, lsl #2
   21640:	ldr	r1, [r1, #8]
   21644:	ldr	r8, [r1, #4]
   21648:	ldr	r1, [r0, r8, lsl #3]!
   2164c:	ldr	r2, [r0, #4]
   21650:	mov	r0, r9
   21654:	bl	20f70 <__assert_fail@plt+0xf810>
   21658:	mov	sl, r0
   2165c:	mov	r0, #12
   21660:	cmn	sl, #1
   21664:	str	r0, [sp, #12]
   21668:	beq	21800 <__assert_fail@plt+0x100a0>
   2166c:	ldr	r1, [r9]
   21670:	movw	r0, #65280	; 0xff00
   21674:	movw	r7, #255	; 0xff
   21678:	movt	r0, #3
   2167c:	movt	r7, #65532	; 0xfffc
   21680:	mov	r3, r0
   21684:	ldr	r0, [sp, #16]
   21688:	add	r1, r1, sl, lsl #3
   2168c:	ldr	r2, [r1, #4]
   21690:	and	r0, r3, r0, lsl #8
   21694:	and	r2, r2, r7
   21698:	orr	r0, r2, r0
   2169c:	str	r0, [r1, #4]
   216a0:	ldr	r0, [r9]
   216a4:	add	r1, r0, r8, lsl #3
   216a8:	add	r0, r0, sl, lsl #3
   216ac:	ldr	r1, [r1, #4]
   216b0:	ldr	r2, [r0, #4]
   216b4:	and	r1, r1, r3
   216b8:	orr	r1, r1, r2
   216bc:	str	r1, [r0, #4]
   216c0:	ldr	r0, [r9]
   216c4:	add	r0, r0, sl, lsl #3
   216c8:	ldr	r1, [r0, #4]
   216cc:	orr	r1, r1, #262144	; 0x40000
   216d0:	str	r1, [r0, #4]
   216d4:	mov	r1, sl
   216d8:	ldr	r0, [r9, #16]
   216dc:	str	r8, [r0, sl, lsl #2]
   216e0:	ldr	r0, [r9, #20]
   216e4:	add	r0, r0, r6, lsl #2
   216e8:	bl	219d4 <__assert_fail@plt+0x10274>
   216ec:	mov	r1, #0
   216f0:	cmp	r0, #0
   216f4:	bne	21480 <__assert_fail@plt+0xfd20>
   216f8:	b	21800 <__assert_fail@plt+0x100a0>
   216fc:	ldr	r1, [r2, r5, lsl #3]!
   21700:	ldr	r4, [r3]
   21704:	mov	r0, r9
   21708:	ldr	r2, [r2, #4]
   2170c:	bl	20f70 <__assert_fail@plt+0xf810>
   21710:	mov	sl, r0
   21714:	ubfx	r0, r4, #8, #10
   21718:	mov	r1, #12
   2171c:	cmn	sl, #1
   21720:	str	r1, [sp, #12]
   21724:	beq	21800 <__assert_fail@plt+0x100a0>
   21728:	ldr	r1, [sp, #16]
   2172c:	movw	r7, #255	; 0xff
   21730:	movt	r7, #65532	; 0xfffc
   21734:	orr	r1, r0, r1
   21738:	movw	r0, #65280	; 0xff00
   2173c:	movt	r0, #3
   21740:	str	r1, [sp, #16]
   21744:	mov	r3, r0
   21748:	and	r0, r0, r1, lsl #8
   2174c:	ldr	r1, [r9]
   21750:	add	r1, r1, sl, lsl #3
   21754:	ldr	r2, [r1, #4]
   21758:	and	r2, r2, r7
   2175c:	orr	r0, r2, r0
   21760:	str	r0, [r1, #4]
   21764:	ldr	r0, [r9]
   21768:	add	r1, r0, r5, lsl #3
   2176c:	add	r0, r0, sl, lsl #3
   21770:	ldr	r1, [r1, #4]
   21774:	ldr	r2, [r0, #4]
   21778:	and	r1, r1, r3
   2177c:	orr	r1, r1, r2
   21780:	str	r1, [r0, #4]
   21784:	ldr	r0, [r9]
   21788:	add	r0, r0, sl, lsl #3
   2178c:	ldr	r1, [r0, #4]
   21790:	orr	r1, r1, #262144	; 0x40000
   21794:	str	r1, [r0, #4]
   21798:	mov	r1, sl
   2179c:	ldr	r0, [r9, #16]
   217a0:	str	r5, [r0, sl, lsl #2]
   217a4:	ldr	r0, [r9, #20]
   217a8:	add	r0, r0, r6, lsl #2
   217ac:	bl	219d4 <__assert_fail@plt+0x10274>
   217b0:	mov	r1, #0
   217b4:	cmp	r0, #0
   217b8:	mov	r8, r5
   217bc:	bne	21480 <__assert_fail@plt+0xfd20>
   217c0:	b	21800 <__assert_fail@plt+0x100a0>
   217c4:	sub	r1, r1, #1
   217c8:	mov	sl, ip
   217cc:	bl	219d4 <__assert_fail@plt+0x10274>
   217d0:	ldr	r6, [sp, #4]
   217d4:	cmp	r0, #0
   217d8:	bne	21634 <__assert_fail@plt+0xfed4>
   217dc:	mov	r0, #12
   217e0:	str	r0, [sp, #12]
   217e4:	ldr	r0, [sp, #12]
   217e8:	sub	sp, fp, #28
   217ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217f0:	mov	r0, #12
   217f4:	cmp	r1, #2
   217f8:	str	r0, [sp, #12]
   217fc:	beq	21818 <__assert_fail@plt+0x100b8>
   21800:	ldr	r0, [sp, #12]
   21804:	sub	sp, fp, #28
   21808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2180c:	ldr	r0, [r9, #12]
   21810:	ldr	r1, [r0, r8, lsl #2]
   21814:	str	r1, [r0, sl, lsl #2]
   21818:	mov	r0, #0
   2181c:	str	r0, [sp, #12]
   21820:	ldr	r0, [sp, #12]
   21824:	sub	sp, fp, #28
   21828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2182c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21830:	add	fp, sp, #24
   21834:	mov	r8, #0
   21838:	cmp	r1, #0
   2183c:	beq	219ac <__assert_fail@plt+0x1024c>
   21840:	mov	r5, r0
   21844:	ldr	r0, [r1, #4]
   21848:	mov	r9, r1
   2184c:	cmp	r0, #0
   21850:	beq	219ac <__assert_fail@plt+0x1024c>
   21854:	ldr	r1, [r5, #4]
   21858:	ldr	r2, [r5]
   2185c:	add	r3, r1, r0, lsl #1
   21860:	cmp	r2, r3
   21864:	bge	21894 <__assert_fail@plt+0x10134>
   21868:	add	r7, r2, r0
   2186c:	ldr	r0, [r5, #8]
   21870:	lsl	r1, r7, #3
   21874:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   21878:	cmp	r0, #0
   2187c:	beq	219c8 <__assert_fail@plt+0x10268>
   21880:	str	r0, [r5, #8]
   21884:	lsl	r0, r7, #1
   21888:	str	r0, [r5]
   2188c:	ldr	r1, [r5, #4]
   21890:	ldr	r0, [r9, #4]
   21894:	cmp	r1, #0
   21898:	beq	219b4 <__assert_fail@plt+0x10254>
   2189c:	add	r7, r1, r0, lsl #1
   218a0:	sub	r1, r1, #1
   218a4:	sub	r0, r0, #1
   218a8:	orr	r2, r0, r1
   218ac:	cmp	r2, #0
   218b0:	blt	21914 <__assert_fail@plt+0x101b4>
   218b4:	ldr	r2, [r9, #8]
   218b8:	ldr	r3, [r5, #8]
   218bc:	ldr	r4, [r2, r0, lsl #2]
   218c0:	ldr	r6, [r3, r1, lsl #2]
   218c4:	cmp	r6, r4
   218c8:	bne	218e4 <__assert_fail@plt+0x10184>
   218cc:	sub	r1, r1, #1
   218d0:	sub	r0, r0, #1
   218d4:	orr	r6, r0, r1
   218d8:	cmn	r6, #1
   218dc:	bgt	218bc <__assert_fail@plt+0x1015c>
   218e0:	b	21914 <__assert_fail@plt+0x101b4>
   218e4:	bge	21904 <__assert_fail@plt+0x101a4>
   218e8:	sub	r7, r7, #1
   218ec:	sub	r0, r0, #1
   218f0:	str	r4, [r3, r7, lsl #2]
   218f4:	orr	r6, r0, r1
   218f8:	cmn	r6, #1
   218fc:	bgt	218bc <__assert_fail@plt+0x1015c>
   21900:	b	21914 <__assert_fail@plt+0x101b4>
   21904:	sub	r1, r1, #1
   21908:	orr	r6, r0, r1
   2190c:	cmn	r6, #1
   21910:	bgt	218bc <__assert_fail@plt+0x1015c>
   21914:	cmp	r0, #0
   21918:	blt	21938 <__assert_fail@plt+0x101d8>
   2191c:	add	r2, r0, #1
   21920:	ldr	r0, [r5, #8]
   21924:	ldr	r1, [r9, #8]
   21928:	sub	r7, r7, r2
   2192c:	lsl	r2, r2, #2
   21930:	add	r0, r0, r7, lsl #2
   21934:	bl	11484 <memcpy@plt>
   21938:	ldr	r0, [r5, #4]
   2193c:	ldr	r2, [r9, #4]
   21940:	sub	r1, r0, #1
   21944:	add	r3, r1, r2, lsl #1
   21948:	sub	r2, r3, r7
   2194c:	adds	r2, r2, #1
   21950:	beq	219ac <__assert_fail@plt+0x1024c>
   21954:	add	r0, r2, r0
   21958:	str	r0, [r5, #4]
   2195c:	ldr	r0, [r5, #8]
   21960:	ldr	r6, [r0, r1, lsl #2]
   21964:	ldr	r5, [r0, r3, lsl #2]
   21968:	cmp	r5, r6
   2196c:	ble	21988 <__assert_fail@plt+0x10228>
   21970:	add	r6, r2, r1
   21974:	subs	r2, r2, #1
   21978:	sub	r3, r3, #1
   2197c:	str	r5, [r0, r6, lsl #2]
   21980:	bne	21960 <__assert_fail@plt+0x10200>
   21984:	b	219ac <__assert_fail@plt+0x1024c>
   21988:	add	r5, r2, r1
   2198c:	cmp	r1, #0
   21990:	str	r6, [r0, r5, lsl #2]
   21994:	sub	r6, r1, #1
   21998:	mov	r1, r6
   2199c:	bgt	21960 <__assert_fail@plt+0x10200>
   219a0:	add	r1, r0, r7, lsl #2
   219a4:	lsl	r2, r2, #2
   219a8:	bl	11484 <memcpy@plt>
   219ac:	mov	r0, r8
   219b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   219b4:	str	r0, [r5, #4]
   219b8:	ldr	r0, [r5, #8]
   219bc:	ldr	r2, [r9, #4]
   219c0:	ldr	r1, [r9, #8]
   219c4:	b	219a4 <__assert_fail@plt+0x10244>
   219c8:	mov	r8, #12
   219cc:	mov	r0, r8
   219d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   219d4:	push	{r4, r5, r6, sl, fp, lr}
   219d8:	add	fp, sp, #16
   219dc:	ldr	r2, [r0]
   219e0:	mov	r5, r1
   219e4:	mov	r4, r0
   219e8:	cmp	r2, #0
   219ec:	beq	21a1c <__assert_fail@plt+0x102bc>
   219f0:	ldr	r1, [r4, #4]
   219f4:	cmp	r1, #0
   219f8:	bne	21a58 <__assert_fail@plt+0x102f8>
   219fc:	ldr	r0, [r4, #8]
   21a00:	str	r5, [r0]
   21a04:	ldr	r0, [r4, #4]
   21a08:	mov	r6, #1
   21a0c:	add	r0, r0, #1
   21a10:	str	r0, [r4, #4]
   21a14:	mov	r0, r6
   21a18:	pop	{r4, r5, r6, sl, fp, pc}
   21a1c:	mov	r6, #1
   21a20:	mov	r0, #4
   21a24:	str	r6, [r4]
   21a28:	str	r6, [r4, #4]
   21a2c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   21a30:	cmp	r0, #0
   21a34:	str	r0, [r4, #8]
   21a38:	strne	r5, [r0]
   21a3c:	movne	r0, r6
   21a40:	popne	{r4, r5, r6, sl, fp, pc}
   21a44:	mov	r6, #0
   21a48:	mov	r0, r6
   21a4c:	str	r6, [r4]
   21a50:	str	r6, [r4, #4]
   21a54:	pop	{r4, r5, r6, sl, fp, pc}
   21a58:	cmp	r2, r1
   21a5c:	bne	21a94 <__assert_fail@plt+0x10334>
   21a60:	lsl	r0, r2, #1
   21a64:	lsl	r1, r2, #3
   21a68:	str	r0, [r4]
   21a6c:	ldr	r0, [r4, #8]
   21a70:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   21a74:	cmp	r0, #0
   21a78:	beq	21b10 <__assert_fail@plt+0x103b0>
   21a7c:	str	r0, [r4, #8]
   21a80:	ldr	r1, [r4, #4]
   21a84:	ldr	r2, [r0]
   21a88:	cmp	r2, r5
   21a8c:	bgt	21aa4 <__assert_fail@plt+0x10344>
   21a90:	b	21ad8 <__assert_fail@plt+0x10378>
   21a94:	ldr	r0, [r4, #8]
   21a98:	ldr	r2, [r0]
   21a9c:	cmp	r2, r5
   21aa0:	ble	21ad8 <__assert_fail@plt+0x10378>
   21aa4:	cmp	r1, #1
   21aa8:	blt	21b08 <__assert_fail@plt+0x103a8>
   21aac:	add	r2, r0, r1, lsl #2
   21ab0:	add	r1, r1, #1
   21ab4:	mov	r3, r2
   21ab8:	ldr	r6, [r3, #-4]!
   21abc:	sub	r1, r1, #1
   21ac0:	cmp	r1, #1
   21ac4:	str	r6, [r2]
   21ac8:	mov	r2, r3
   21acc:	bgt	21ab8 <__assert_fail@plt+0x10358>
   21ad0:	sub	r1, r1, #1
   21ad4:	b	21b08 <__assert_fail@plt+0x103a8>
   21ad8:	add	r2, r0, r1, lsl #2
   21adc:	ldr	r3, [r2, #-4]
   21ae0:	cmp	r3, r5
   21ae4:	ble	21b08 <__assert_fail@plt+0x103a8>
   21ae8:	sub	r1, r1, #2
   21aec:	str	r3, [r2]
   21af0:	sub	r1, r1, #1
   21af4:	ldr	r3, [r2, #-8]
   21af8:	sub	r2, r2, #4
   21afc:	cmp	r3, r5
   21b00:	bgt	21aec <__assert_fail@plt+0x1038c>
   21b04:	add	r1, r1, #2
   21b08:	str	r5, [r0, r1, lsl #2]
   21b0c:	b	21a04 <__assert_fail@plt+0x102a4>
   21b10:	mov	r6, #0
   21b14:	mov	r0, r6
   21b18:	pop	{r4, r5, r6, sl, fp, pc}
   21b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b20:	add	fp, sp, #28
   21b24:	sub	sp, sp, #28
   21b28:	ldr	lr, [r2, #4]
   21b2c:	mov	sl, r0
   21b30:	cmp	lr, #0
   21b34:	beq	21cd8 <__assert_fail@plt+0x10578>
   21b38:	mov	r9, r3
   21b3c:	add	r7, lr, r3
   21b40:	cmp	lr, #1
   21b44:	str	r2, [sp, #20]
   21b48:	blt	21bb8 <__assert_fail@plt+0x10458>
   21b4c:	ldr	r6, [r2, #8]
   21b50:	mov	r2, #0
   21b54:	cmp	lr, #4
   21b58:	bcc	21ba0 <__assert_fail@plt+0x10440>
   21b5c:	mov	r0, #0
   21b60:	bic	r2, lr, #3
   21b64:	vdup.32	q8, r0
   21b68:	mov	r3, r2
   21b6c:	mov	r0, r6
   21b70:	vmov.32	d16[0], r7
   21b74:	vld1.32	{d18-d19}, [r0]!
   21b78:	subs	r3, r3, #4
   21b7c:	vadd.i32	q8, q9, q8
   21b80:	bne	21b74 <__assert_fail@plt+0x10414>
   21b84:	vext.8	q9, q8, q8, #8
   21b88:	cmp	lr, r2
   21b8c:	vadd.i32	q8, q8, q9
   21b90:	vdup.32	q9, d16[1]
   21b94:	vadd.i32	q8, q8, q9
   21b98:	vmov.32	r7, d16[0]
   21b9c:	beq	21bb8 <__assert_fail@plt+0x10458>
   21ba0:	add	r0, r6, r2, lsl #2
   21ba4:	sub	r2, lr, r2
   21ba8:	ldr	r3, [r0], #4
   21bac:	subs	r2, r2, #1
   21bb0:	add	r7, r3, r7
   21bb4:	bne	21ba8 <__assert_fail@plt+0x10448>
   21bb8:	ldr	r2, [r1, #32]
   21bbc:	str	r1, [sp, #12]
   21bc0:	ldr	r1, [r1, #68]	; 0x44
   21bc4:	and	r1, r1, r7
   21bc8:	add	r3, r1, r1, lsl #1
   21bcc:	ldr	r1, [r2, r3, lsl #2]
   21bd0:	cmp	r1, #1
   21bd4:	blt	21c68 <__assert_fail@plt+0x10508>
   21bd8:	ldr	r0, [sp, #20]
   21bdc:	cmp	r0, #0
   21be0:	beq	21c68 <__assert_fail@plt+0x10508>
   21be4:	add	r2, r2, r3, lsl #2
   21be8:	sub	ip, lr, #1
   21bec:	mov	r6, #0
   21bf0:	ldr	r2, [r2, #8]
   21bf4:	ldr	r8, [r2, r6, lsl #2]
   21bf8:	ldr	r3, [r8]
   21bfc:	cmp	r3, r7
   21c00:	bne	21c5c <__assert_fail@plt+0x104fc>
   21c04:	ldrb	r3, [r8, #52]	; 0x34
   21c08:	and	r3, r3, #15
   21c0c:	cmp	r3, r9
   21c10:	bne	21c5c <__assert_fail@plt+0x104fc>
   21c14:	ldr	r4, [r8, #40]	; 0x28
   21c18:	cmp	r4, #0
   21c1c:	beq	21c5c <__assert_fail@plt+0x104fc>
   21c20:	ldr	r3, [r4, #4]
   21c24:	cmp	r3, lr
   21c28:	bne	21c5c <__assert_fail@plt+0x104fc>
   21c2c:	mov	r3, ip
   21c30:	add	r5, r3, #1
   21c34:	cmp	r5, #1
   21c38:	blt	22478 <__assert_fail@plt+0x10d18>
   21c3c:	ldr	r0, [sp, #20]
   21c40:	ldr	r5, [r0, #8]
   21c44:	ldr	r0, [r4, #8]
   21c48:	ldr	r5, [r5, r3, lsl #2]
   21c4c:	ldr	r0, [r0, r3, lsl #2]
   21c50:	sub	r3, r3, #1
   21c54:	cmp	r0, r5
   21c58:	beq	21c30 <__assert_fail@plt+0x104d0>
   21c5c:	add	r6, r6, #1
   21c60:	cmp	r6, r1
   21c64:	blt	21bf4 <__assert_fail@plt+0x10494>
   21c68:	mov	r0, #56	; 0x38
   21c6c:	mov	r1, #1
   21c70:	bl	2d24c <__assert_fail@plt+0x1baec>
   21c74:	cmp	r0, #0
   21c78:	beq	224b0 <__assert_fail@plt+0x10d50>
   21c7c:	ldr	ip, [sp, #20]
   21c80:	str	sl, [sp]
   21c84:	add	lr, r0, #4
   21c88:	mov	r8, r0
   21c8c:	str	lr, [sp, #8]
   21c90:	ldr	sl, [ip, #4]
   21c94:	cmp	sl, #1
   21c98:	str	sl, [r0, #8]
   21c9c:	blt	21cec <__assert_fail@plt+0x1058c>
   21ca0:	lsl	r0, sl, #2
   21ca4:	str	sl, [r8, #4]
   21ca8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   21cac:	cmp	r0, #0
   21cb0:	str	r0, [r8, #12]
   21cb4:	beq	224c8 <__assert_fail@plt+0x10d68>
   21cb8:	ldr	r4, [sp, #20]
   21cbc:	ldr	sl, [r4, #4]
   21cc0:	ldr	r1, [r4, #8]
   21cc4:	lsl	r2, sl, #2
   21cc8:	bl	11484 <memcpy@plt>
   21ccc:	ldr	lr, [sp, #8]
   21cd0:	mov	ip, r4
   21cd4:	b	21cfc <__assert_fail@plt+0x1059c>
   21cd8:	mov	r8, #0
   21cdc:	str	r8, [sl]
   21ce0:	mov	r0, r8
   21ce4:	sub	sp, fp, #28
   21ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cec:	mov	r0, #0
   21cf0:	str	r0, [lr]
   21cf4:	str	r0, [lr, #4]
   21cf8:	str	r0, [lr, #8]
   21cfc:	mov	r2, r8
   21d00:	and	r1, r9, #15
   21d04:	cmp	sl, #1
   21d08:	ldrb	r0, [r2, #52]!	; 0x34
   21d0c:	and	r0, r0, #240	; 0xf0
   21d10:	str	lr, [r2, #-12]
   21d14:	str	r2, [sp, #24]
   21d18:	orr	r0, r0, r1
   21d1c:	strb	r0, [r2]
   21d20:	ldr	r0, [sp, #12]
   21d24:	blt	22464 <__assert_fail@plt+0x10d04>
   21d28:	and	r1, r9, #4
   21d2c:	tst	r9, #1
   21d30:	str	r1, [sp, #4]
   21d34:	and	r1, r9, #2
   21d38:	bne	21f08 <__assert_fail@plt+0x107a8>
   21d3c:	cmp	r1, #0
   21d40:	bne	220d4 <__assert_fail@plt+0x10974>
   21d44:	movw	r1, #65280	; 0xff00
   21d48:	mov	r6, #0
   21d4c:	mov	r9, #0
   21d50:	movt	r1, #3
   21d54:	add	r1, r1, #255	; 0xff
   21d58:	str	r1, [sp, #16]
   21d5c:	b	21e54 <__assert_fail@plt+0x106f4>
   21d60:	mov	r0, #12
   21d64:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   21d68:	cmp	r0, #0
   21d6c:	beq	22484 <__assert_fail@plt+0x10d24>
   21d70:	ldr	ip, [sp, #20]
   21d74:	str	r0, [r8, #40]	; 0x28
   21d78:	mov	r5, r0
   21d7c:	ldr	sl, [ip, #4]
   21d80:	cmp	sl, #0
   21d84:	str	sl, [r0, #4]
   21d88:	ble	21dc0 <__assert_fail@plt+0x10660>
   21d8c:	lsl	r0, sl, #2
   21d90:	str	sl, [r5]
   21d94:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   21d98:	cmp	r0, #0
   21d9c:	str	r0, [r5, #8]
   21da0:	beq	22494 <__assert_fail@plt+0x10d34>
   21da4:	ldr	r5, [sp, #20]
   21da8:	ldr	sl, [r5, #4]
   21dac:	ldr	r1, [r5, #8]
   21db0:	lsl	r2, sl, #2
   21db4:	bl	11484 <memcpy@plt>
   21db8:	mov	ip, r5
   21dbc:	b	21dd0 <__assert_fail@plt+0x10670>
   21dc0:	mov	r0, #0
   21dc4:	str	r0, [r5]
   21dc8:	str	r0, [r5, #4]
   21dcc:	str	r0, [r5, #8]
   21dd0:	ldr	r1, [sp, #24]
   21dd4:	ldr	lr, [sp, #8]
   21dd8:	mov	r9, #0
   21ddc:	ldrb	r0, [r1]
   21de0:	orr	r0, r0, #128	; 0x80
   21de4:	strb	r0, [r1]
   21de8:	ldr	r0, [sp, #12]
   21dec:	tst	r4, #4352	; 0x1100
   21df0:	beq	21ee4 <__assert_fail@plt+0x10784>
   21df4:	sub	r1, r6, r9
   21df8:	cmp	r1, #0
   21dfc:	ldrge	r2, [r8, #8]
   21e00:	cmpge	r2, r1
   21e04:	bgt	21e1c <__assert_fail@plt+0x106bc>
   21e08:	add	r9, r9, #1
   21e0c:	add	r6, r6, #1
   21e10:	cmp	r6, sl
   21e14:	blt	21e54 <__assert_fail@plt+0x106f4>
   21e18:	b	22464 <__assert_fail@plt+0x10d04>
   21e1c:	sub	r2, r2, #1
   21e20:	cmp	r2, r1
   21e24:	str	r2, [r8, #8]
   21e28:	ble	21e08 <__assert_fail@plt+0x106a8>
   21e2c:	ldr	r2, [r8, #12]
   21e30:	add	r3, r2, r1, lsl #2
   21e34:	ldr	r3, [r3, #4]
   21e38:	str	r3, [r2, r1, lsl #2]
   21e3c:	add	r1, r1, #1
   21e40:	ldr	r3, [r8, #8]
   21e44:	cmp	r1, r3
   21e48:	blt	21e30 <__assert_fail@plt+0x106d0>
   21e4c:	ldr	sl, [ip, #4]
   21e50:	b	21e08 <__assert_fail@plt+0x106a8>
   21e54:	ldr	r1, [ip, #8]
   21e58:	ldr	r2, [r0]
   21e5c:	ldr	r1, [r1, r6, lsl #2]
   21e60:	add	r1, r2, r1, lsl #3
   21e64:	ldr	r4, [r1, #4]
   21e68:	ldr	r1, [sp, #16]
   21e6c:	and	r1, r4, r1
   21e70:	cmp	r1, #1
   21e74:	beq	21ef8 <__assert_fail@plt+0x10798>
   21e78:	ldr	r5, [sp, #24]
   21e7c:	mov	r2, #32
   21e80:	movw	r1, #65280	; 0xff00
   21e84:	and	r2, r2, r4, lsr #15
   21e88:	movt	r1, #3
   21e8c:	and	r1, r4, r1
   21e90:	ldrb	r3, [r5]
   21e94:	orr	r2, r3, r2
   21e98:	uxtb	r3, r4
   21e9c:	cmp	r3, #4
   21ea0:	strb	r2, [r5]
   21ea4:	beq	21eb8 <__assert_fail@plt+0x10758>
   21ea8:	cmp	r3, #2
   21eac:	bne	21ec8 <__assert_fail@plt+0x10768>
   21eb0:	mov	r3, #16
   21eb4:	b	21ebc <__assert_fail@plt+0x1075c>
   21eb8:	mov	r3, #64	; 0x40
   21ebc:	orr	r2, r2, r3
   21ec0:	ldr	r3, [sp, #24]
   21ec4:	strb	r2, [r3]
   21ec8:	cmp	r1, #0
   21ecc:	beq	21ef8 <__assert_fail@plt+0x10798>
   21ed0:	ldr	r1, [r8, #40]	; 0x28
   21ed4:	cmp	r1, lr
   21ed8:	beq	21d60 <__assert_fail@plt+0x10600>
   21edc:	tst	r4, #4352	; 0x1100
   21ee0:	bne	21df4 <__assert_fail@plt+0x10694>
   21ee4:	ldr	r1, [sp, #4]
   21ee8:	cmp	r1, #0
   21eec:	bne	21ef8 <__assert_fail@plt+0x10798>
   21ef0:	ands	r1, r4, #16384	; 0x4000
   21ef4:	bne	21df4 <__assert_fail@plt+0x10694>
   21ef8:	add	r6, r6, #1
   21efc:	cmp	r6, sl
   21f00:	blt	21e54 <__assert_fail@plt+0x106f4>
   21f04:	b	22464 <__assert_fail@plt+0x10d04>
   21f08:	cmp	r1, #0
   21f0c:	bne	22298 <__assert_fail@plt+0x10b38>
   21f10:	movw	r1, #65280	; 0xff00
   21f14:	mov	r6, #0
   21f18:	mov	r9, #0
   21f1c:	movt	r1, #3
   21f20:	add	r1, r1, #255	; 0xff
   21f24:	str	r1, [sp, #16]
   21f28:	b	22020 <__assert_fail@plt+0x108c0>
   21f2c:	mov	r0, #12
   21f30:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   21f34:	cmp	r0, #0
   21f38:	beq	22484 <__assert_fail@plt+0x10d24>
   21f3c:	ldr	ip, [sp, #20]
   21f40:	str	r0, [r8, #40]	; 0x28
   21f44:	mov	r5, r0
   21f48:	ldr	sl, [ip, #4]
   21f4c:	cmp	sl, #0
   21f50:	str	sl, [r0, #4]
   21f54:	ble	21f8c <__assert_fail@plt+0x1082c>
   21f58:	lsl	r0, sl, #2
   21f5c:	str	sl, [r5]
   21f60:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   21f64:	cmp	r0, #0
   21f68:	str	r0, [r5, #8]
   21f6c:	beq	22494 <__assert_fail@plt+0x10d34>
   21f70:	ldr	r5, [sp, #20]
   21f74:	ldr	sl, [r5, #4]
   21f78:	ldr	r1, [r5, #8]
   21f7c:	lsl	r2, sl, #2
   21f80:	bl	11484 <memcpy@plt>
   21f84:	mov	ip, r5
   21f88:	b	21f9c <__assert_fail@plt+0x1083c>
   21f8c:	mov	r0, #0
   21f90:	str	r0, [r5]
   21f94:	str	r0, [r5, #4]
   21f98:	str	r0, [r5, #8]
   21f9c:	ldr	r1, [sp, #24]
   21fa0:	ldr	lr, [sp, #8]
   21fa4:	mov	r9, #0
   21fa8:	ldrb	r0, [r1]
   21fac:	orr	r0, r0, #128	; 0x80
   21fb0:	strb	r0, [r1]
   21fb4:	ldr	r0, [sp, #12]
   21fb8:	tst	r4, #4608	; 0x1200
   21fbc:	beq	220b0 <__assert_fail@plt+0x10950>
   21fc0:	sub	r1, r6, r9
   21fc4:	cmp	r1, #0
   21fc8:	ldrge	r2, [r8, #8]
   21fcc:	cmpge	r2, r1
   21fd0:	bgt	21fe8 <__assert_fail@plt+0x10888>
   21fd4:	add	r9, r9, #1
   21fd8:	add	r6, r6, #1
   21fdc:	cmp	r6, sl
   21fe0:	blt	22020 <__assert_fail@plt+0x108c0>
   21fe4:	b	22464 <__assert_fail@plt+0x10d04>
   21fe8:	sub	r2, r2, #1
   21fec:	cmp	r2, r1
   21ff0:	str	r2, [r8, #8]
   21ff4:	ble	21fd4 <__assert_fail@plt+0x10874>
   21ff8:	ldr	r2, [r8, #12]
   21ffc:	add	r3, r2, r1, lsl #2
   22000:	ldr	r3, [r3, #4]
   22004:	str	r3, [r2, r1, lsl #2]
   22008:	add	r1, r1, #1
   2200c:	ldr	r3, [r8, #8]
   22010:	cmp	r1, r3
   22014:	blt	21ffc <__assert_fail@plt+0x1089c>
   22018:	ldr	sl, [ip, #4]
   2201c:	b	21fd4 <__assert_fail@plt+0x10874>
   22020:	ldr	r1, [ip, #8]
   22024:	ldr	r2, [r0]
   22028:	ldr	r1, [r1, r6, lsl #2]
   2202c:	add	r1, r2, r1, lsl #3
   22030:	ldr	r4, [r1, #4]
   22034:	ldr	r1, [sp, #16]
   22038:	and	r1, r4, r1
   2203c:	cmp	r1, #1
   22040:	beq	220c4 <__assert_fail@plt+0x10964>
   22044:	ldr	r5, [sp, #24]
   22048:	mov	r2, #32
   2204c:	movw	r1, #65280	; 0xff00
   22050:	and	r2, r2, r4, lsr #15
   22054:	movt	r1, #3
   22058:	and	r1, r4, r1
   2205c:	ldrb	r3, [r5]
   22060:	orr	r2, r3, r2
   22064:	uxtb	r3, r4
   22068:	cmp	r3, #4
   2206c:	strb	r2, [r5]
   22070:	beq	22084 <__assert_fail@plt+0x10924>
   22074:	cmp	r3, #2
   22078:	bne	22094 <__assert_fail@plt+0x10934>
   2207c:	mov	r3, #16
   22080:	b	22088 <__assert_fail@plt+0x10928>
   22084:	mov	r3, #64	; 0x40
   22088:	orr	r2, r2, r3
   2208c:	ldr	r3, [sp, #24]
   22090:	strb	r2, [r3]
   22094:	cmp	r1, #0
   22098:	beq	220c4 <__assert_fail@plt+0x10964>
   2209c:	ldr	r1, [r8, #40]	; 0x28
   220a0:	cmp	r1, lr
   220a4:	beq	21f2c <__assert_fail@plt+0x107cc>
   220a8:	tst	r4, #4608	; 0x1200
   220ac:	bne	21fc0 <__assert_fail@plt+0x10860>
   220b0:	ldr	r1, [sp, #4]
   220b4:	cmp	r1, #0
   220b8:	bne	220c4 <__assert_fail@plt+0x10964>
   220bc:	ands	r1, r4, #16384	; 0x4000
   220c0:	bne	21fc0 <__assert_fail@plt+0x10860>
   220c4:	add	r6, r6, #1
   220c8:	cmp	r6, sl
   220cc:	blt	22020 <__assert_fail@plt+0x108c0>
   220d0:	b	22464 <__assert_fail@plt+0x10d04>
   220d4:	movw	r1, #65280	; 0xff00
   220d8:	mov	r6, #0
   220dc:	mov	r9, #0
   220e0:	movt	r1, #3
   220e4:	add	r1, r1, #255	; 0xff
   220e8:	str	r1, [sp, #16]
   220ec:	b	221e4 <__assert_fail@plt+0x10a84>
   220f0:	mov	r0, #12
   220f4:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   220f8:	cmp	r0, #0
   220fc:	beq	22484 <__assert_fail@plt+0x10d24>
   22100:	ldr	ip, [sp, #20]
   22104:	str	r0, [r8, #40]	; 0x28
   22108:	mov	r5, r0
   2210c:	ldr	sl, [ip, #4]
   22110:	cmp	sl, #0
   22114:	str	sl, [r0, #4]
   22118:	ble	22150 <__assert_fail@plt+0x109f0>
   2211c:	lsl	r0, sl, #2
   22120:	str	sl, [r5]
   22124:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   22128:	cmp	r0, #0
   2212c:	str	r0, [r5, #8]
   22130:	beq	22494 <__assert_fail@plt+0x10d34>
   22134:	ldr	r5, [sp, #20]
   22138:	ldr	sl, [r5, #4]
   2213c:	ldr	r1, [r5, #8]
   22140:	lsl	r2, sl, #2
   22144:	bl	11484 <memcpy@plt>
   22148:	mov	ip, r5
   2214c:	b	22160 <__assert_fail@plt+0x10a00>
   22150:	mov	r0, #0
   22154:	str	r0, [r5]
   22158:	str	r0, [r5, #4]
   2215c:	str	r0, [r5, #8]
   22160:	ldr	r1, [sp, #24]
   22164:	ldr	lr, [sp, #8]
   22168:	mov	r9, #0
   2216c:	ldrb	r0, [r1]
   22170:	orr	r0, r0, #128	; 0x80
   22174:	strb	r0, [r1]
   22178:	ldr	r0, [sp, #12]
   2217c:	tst	r4, #256	; 0x100
   22180:	beq	22274 <__assert_fail@plt+0x10b14>
   22184:	sub	r1, r6, r9
   22188:	cmp	r1, #0
   2218c:	ldrge	r2, [r8, #8]
   22190:	cmpge	r2, r1
   22194:	bgt	221ac <__assert_fail@plt+0x10a4c>
   22198:	add	r9, r9, #1
   2219c:	add	r6, r6, #1
   221a0:	cmp	r6, sl
   221a4:	blt	221e4 <__assert_fail@plt+0x10a84>
   221a8:	b	22464 <__assert_fail@plt+0x10d04>
   221ac:	sub	r2, r2, #1
   221b0:	cmp	r2, r1
   221b4:	str	r2, [r8, #8]
   221b8:	ble	22198 <__assert_fail@plt+0x10a38>
   221bc:	ldr	r2, [r8, #12]
   221c0:	add	r3, r2, r1, lsl #2
   221c4:	ldr	r3, [r3, #4]
   221c8:	str	r3, [r2, r1, lsl #2]
   221cc:	add	r1, r1, #1
   221d0:	ldr	r3, [r8, #8]
   221d4:	cmp	r1, r3
   221d8:	blt	221c0 <__assert_fail@plt+0x10a60>
   221dc:	ldr	sl, [ip, #4]
   221e0:	b	22198 <__assert_fail@plt+0x10a38>
   221e4:	ldr	r1, [ip, #8]
   221e8:	ldr	r2, [r0]
   221ec:	ldr	r1, [r1, r6, lsl #2]
   221f0:	add	r1, r2, r1, lsl #3
   221f4:	ldr	r4, [r1, #4]
   221f8:	ldr	r1, [sp, #16]
   221fc:	and	r1, r4, r1
   22200:	cmp	r1, #1
   22204:	beq	22288 <__assert_fail@plt+0x10b28>
   22208:	ldr	r5, [sp, #24]
   2220c:	mov	r2, #32
   22210:	movw	r1, #65280	; 0xff00
   22214:	and	r2, r2, r4, lsr #15
   22218:	movt	r1, #3
   2221c:	and	r1, r4, r1
   22220:	ldrb	r3, [r5]
   22224:	orr	r2, r3, r2
   22228:	uxtb	r3, r4
   2222c:	cmp	r3, #4
   22230:	strb	r2, [r5]
   22234:	beq	22248 <__assert_fail@plt+0x10ae8>
   22238:	cmp	r3, #2
   2223c:	bne	22258 <__assert_fail@plt+0x10af8>
   22240:	mov	r3, #16
   22244:	b	2224c <__assert_fail@plt+0x10aec>
   22248:	mov	r3, #64	; 0x40
   2224c:	orr	r2, r2, r3
   22250:	ldr	r3, [sp, #24]
   22254:	strb	r2, [r3]
   22258:	cmp	r1, #0
   2225c:	beq	22288 <__assert_fail@plt+0x10b28>
   22260:	ldr	r1, [r8, #40]	; 0x28
   22264:	cmp	r1, lr
   22268:	beq	220f0 <__assert_fail@plt+0x10990>
   2226c:	tst	r4, #256	; 0x100
   22270:	bne	22184 <__assert_fail@plt+0x10a24>
   22274:	ldr	r1, [sp, #4]
   22278:	cmp	r1, #0
   2227c:	bne	22288 <__assert_fail@plt+0x10b28>
   22280:	ands	r1, r4, #16384	; 0x4000
   22284:	bne	22184 <__assert_fail@plt+0x10a24>
   22288:	add	r6, r6, #1
   2228c:	cmp	r6, sl
   22290:	blt	221e4 <__assert_fail@plt+0x10a84>
   22294:	b	22464 <__assert_fail@plt+0x10d04>
   22298:	movw	r1, #65280	; 0xff00
   2229c:	mov	r9, #0
   222a0:	mov	r5, #0
   222a4:	movt	r1, #3
   222a8:	add	r1, r1, #255	; 0xff
   222ac:	str	r1, [sp, #16]
   222b0:	ldr	r1, [ip, #8]
   222b4:	ldr	r2, [r0]
   222b8:	ldr	r1, [r1, r9, lsl #2]
   222bc:	add	r1, r2, r1, lsl #3
   222c0:	ldr	r6, [r1, #4]
   222c4:	ldr	r1, [sp, #16]
   222c8:	and	r1, r6, r1
   222cc:	cmp	r1, #1
   222d0:	beq	22354 <__assert_fail@plt+0x10bf4>
   222d4:	ldr	r4, [sp, #24]
   222d8:	mov	r2, #32
   222dc:	movw	r1, #65280	; 0xff00
   222e0:	and	r2, r2, r6, lsr #15
   222e4:	movt	r1, #3
   222e8:	and	r1, r6, r1
   222ec:	ldrb	r3, [r4]
   222f0:	orr	r2, r3, r2
   222f4:	uxtb	r3, r6
   222f8:	cmp	r3, #2
   222fc:	strb	r2, [r4]
   22300:	beq	22314 <__assert_fail@plt+0x10bb4>
   22304:	cmp	r3, #4
   22308:	bne	22324 <__assert_fail@plt+0x10bc4>
   2230c:	mov	r3, #64	; 0x40
   22310:	b	22318 <__assert_fail@plt+0x10bb8>
   22314:	mov	r3, #16
   22318:	orr	r2, r2, r3
   2231c:	ldr	r3, [sp, #24]
   22320:	strb	r2, [r3]
   22324:	cmp	r1, #0
   22328:	beq	22354 <__assert_fail@plt+0x10bf4>
   2232c:	ldr	r1, [r8, #40]	; 0x28
   22330:	cmp	r1, lr
   22334:	beq	22364 <__assert_fail@plt+0x10c04>
   22338:	tst	r6, #512	; 0x200
   2233c:	bne	223f8 <__assert_fail@plt+0x10c98>
   22340:	ldr	r1, [sp, #4]
   22344:	cmp	r1, #0
   22348:	bne	22354 <__assert_fail@plt+0x10bf4>
   2234c:	ands	r1, r6, #16384	; 0x4000
   22350:	bne	223f8 <__assert_fail@plt+0x10c98>
   22354:	add	r9, r9, #1
   22358:	cmp	r9, sl
   2235c:	blt	222b0 <__assert_fail@plt+0x10b50>
   22360:	b	22464 <__assert_fail@plt+0x10d04>
   22364:	mov	r0, #12
   22368:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2236c:	cmp	r0, #0
   22370:	beq	22484 <__assert_fail@plt+0x10d24>
   22374:	ldr	ip, [sp, #20]
   22378:	str	r0, [r8, #40]	; 0x28
   2237c:	mov	r5, r0
   22380:	ldr	sl, [ip, #4]
   22384:	cmp	sl, #1
   22388:	str	sl, [r0, #4]
   2238c:	blt	223c4 <__assert_fail@plt+0x10c64>
   22390:	lsl	r0, sl, #2
   22394:	str	sl, [r5]
   22398:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2239c:	cmp	r0, #0
   223a0:	str	r0, [r5, #8]
   223a4:	beq	22494 <__assert_fail@plt+0x10d34>
   223a8:	ldr	r4, [sp, #20]
   223ac:	ldr	sl, [r4, #4]
   223b0:	ldr	r1, [r4, #8]
   223b4:	lsl	r2, sl, #2
   223b8:	bl	11484 <memcpy@plt>
   223bc:	mov	ip, r4
   223c0:	b	223d4 <__assert_fail@plt+0x10c74>
   223c4:	mov	r0, #0
   223c8:	str	r0, [r5]
   223cc:	str	r0, [r5, #4]
   223d0:	str	r0, [r5, #8]
   223d4:	ldr	r1, [sp, #24]
   223d8:	ldr	lr, [sp, #8]
   223dc:	mov	r5, #0
   223e0:	ldrb	r0, [r1]
   223e4:	orr	r0, r0, #128	; 0x80
   223e8:	strb	r0, [r1]
   223ec:	ldr	r0, [sp, #12]
   223f0:	tst	r6, #512	; 0x200
   223f4:	beq	22340 <__assert_fail@plt+0x10be0>
   223f8:	sub	r1, r9, r5
   223fc:	cmp	r1, #0
   22400:	ldrge	r2, [r8, #8]
   22404:	cmpge	r2, r1
   22408:	bgt	22420 <__assert_fail@plt+0x10cc0>
   2240c:	add	r5, r5, #1
   22410:	add	r9, r9, #1
   22414:	cmp	r9, sl
   22418:	blt	222b0 <__assert_fail@plt+0x10b50>
   2241c:	b	22464 <__assert_fail@plt+0x10d04>
   22420:	sub	r2, r2, #1
   22424:	cmp	r2, r1
   22428:	str	r2, [r8, #8]
   2242c:	ble	2240c <__assert_fail@plt+0x10cac>
   22430:	ldr	r2, [r8, #12]
   22434:	add	r3, r2, r1, lsl #2
   22438:	ldr	r3, [r3, #4]
   2243c:	str	r3, [r2, r1, lsl #2]
   22440:	add	r1, r1, #1
   22444:	ldr	r3, [r8, #8]
   22448:	cmp	r1, r3
   2244c:	blt	22434 <__assert_fail@plt+0x10cd4>
   22450:	ldr	sl, [ip, #4]
   22454:	add	r5, r5, #1
   22458:	add	r9, r9, #1
   2245c:	cmp	r9, sl
   22460:	blt	222b0 <__assert_fail@plt+0x10b50>
   22464:	mov	r1, r8
   22468:	mov	r2, r7
   2246c:	bl	224e0 <__assert_fail@plt+0x10d80>
   22470:	cmp	r0, #0
   22474:	bne	22484 <__assert_fail@plt+0x10d24>
   22478:	mov	r0, r8
   2247c:	sub	sp, fp, #28
   22480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22484:	mov	r0, r8
   22488:	bl	1ba70 <__assert_fail@plt+0xa310>
   2248c:	ldr	sl, [sp]
   22490:	b	224b0 <__assert_fail@plt+0x10d50>
   22494:	ldr	sl, [sp]
   22498:	add	r0, r5, #4
   2249c:	mov	r1, #0
   224a0:	str	r1, [r0]
   224a4:	mov	r0, r8
   224a8:	str	r1, [r5]
   224ac:	bl	1ba70 <__assert_fail@plt+0xa310>
   224b0:	mov	r0, #12
   224b4:	mov	r8, #0
   224b8:	str	r0, [sl]
   224bc:	mov	r0, r8
   224c0:	sub	sp, fp, #28
   224c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224c8:	mov	r0, #0
   224cc:	str	r0, [r8, #4]
   224d0:	str	r0, [r8, #8]
   224d4:	mov	r0, r8
   224d8:	bl	14538 <__assert_fail@plt+0x2dd8>
   224dc:	b	2248c <__assert_fail@plt+0x10d2c>
   224e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224e4:	add	fp, sp, #28
   224e8:	sub	sp, sp, #4
   224ec:	str	r2, [r1]
   224f0:	mov	r4, r1
   224f4:	mov	r7, r0
   224f8:	mov	r0, #0
   224fc:	mov	r9, r2
   22500:	ldr	r1, [r1, #8]
   22504:	str	r1, [r4, #16]
   22508:	str	r0, [r4, #20]
   2250c:	lsl	r0, r1, #2
   22510:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   22514:	mov	r8, #12
   22518:	cmp	r0, #0
   2251c:	str	r0, [r4, #24]
   22520:	beq	225e0 <__assert_fail@plt+0x10e80>
   22524:	ldr	r1, [r4, #8]
   22528:	cmp	r1, #1
   2252c:	blt	225a0 <__assert_fail@plt+0x10e40>
   22530:	mov	r5, #0
   22534:	mov	sl, #2
   22538:	ldr	r2, [r4, #12]
   2253c:	ldr	r6, [r2, r5, lsl #2]
   22540:	ldr	r2, [r7]
   22544:	add	r2, r2, r6, lsl #3
   22548:	ldrb	r2, [r2, #4]
   2254c:	tst	r2, #8
   22550:	bne	22594 <__assert_fail@plt+0x10e34>
   22554:	ldr	r2, [r4, #16]
   22558:	ldr	r1, [r4, #20]
   2255c:	cmp	r2, r1
   22560:	bne	22584 <__assert_fail@plt+0x10e24>
   22564:	add	r1, sl, r2, lsl #1
   22568:	str	r1, [r4, #16]
   2256c:	lsl	r1, r1, #2
   22570:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   22574:	cmp	r0, #0
   22578:	beq	225e0 <__assert_fail@plt+0x10e80>
   2257c:	str	r0, [r4, #24]
   22580:	ldr	r1, [r4, #20]
   22584:	add	r2, r1, #1
   22588:	str	r2, [r4, #20]
   2258c:	str	r6, [r0, r1, lsl #2]
   22590:	ldr	r1, [r4, #8]
   22594:	add	r5, r5, #1
   22598:	cmp	r5, r1
   2259c:	blt	22538 <__assert_fail@plt+0x10dd8>
   225a0:	ldr	r1, [r7, #68]	; 0x44
   225a4:	ldr	r0, [r7, #32]
   225a8:	and	r1, r1, r9
   225ac:	mov	r5, r0
   225b0:	add	r2, r1, r1, lsl #1
   225b4:	ldr	r1, [r5, r2, lsl #2]!
   225b8:	mov	r6, r5
   225bc:	ldr	r3, [r6, #4]!
   225c0:	cmp	r3, r1
   225c4:	ble	225ec <__assert_fail@plt+0x10e8c>
   225c8:	add	r0, r0, r2, lsl #2
   225cc:	ldr	r0, [r0, #8]
   225d0:	add	r2, r1, #1
   225d4:	mov	r8, #0
   225d8:	str	r2, [r5]
   225dc:	str	r4, [r0, r1, lsl #2]
   225e0:	mov	r0, r8
   225e4:	sub	sp, fp, #28
   225e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225ec:	add	r7, r0, r2, lsl #2
   225f0:	mov	r2, #2
   225f4:	ldr	r0, [r7, #8]!
   225f8:	add	r9, r2, r1, lsl #1
   225fc:	lsl	r1, r9, #2
   22600:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   22604:	cmp	r0, #0
   22608:	beq	225e0 <__assert_fail@plt+0x10e80>
   2260c:	str	r0, [r7]
   22610:	str	r9, [r6]
   22614:	ldr	r1, [r5]
   22618:	b	225d0 <__assert_fail@plt+0x10e70>
   2261c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22620:	add	fp, sp, #28
   22624:	sub	sp, sp, #36	; 0x24
   22628:	mov	r4, r0
   2262c:	ldr	r0, [r0, #24]
   22630:	mov	r6, r2
   22634:	mov	r9, r1
   22638:	cmp	r0, r1
   2263c:	ble	22858 <__assert_fail@plt+0x110f8>
   22640:	ldr	r0, [r4, #80]	; 0x50
   22644:	mov	r1, #4
   22648:	mov	r5, r9
   2264c:	cmp	r0, #2
   22650:	movge	r0, #0
   22654:	strge	r0, [r4, #16]
   22658:	strge	r0, [r4, #20]
   2265c:	mov	r0, #0
   22660:	tst	r6, #1
   22664:	str	r0, [r4, #24]
   22668:	str	r0, [r4, #28]
   2266c:	str	r0, [r4, #32]
   22670:	strb	r0, [r4, #76]	; 0x4c
   22674:	movweq	r1, #6
   22678:	ldr	r2, [r4, #44]	; 0x2c
   2267c:	ldr	r3, [r4, #52]	; 0x34
   22680:	str	r2, [r4, #48]	; 0x30
   22684:	str	r3, [r4, #56]	; 0x38
   22688:	str	r1, [r4, #60]	; 0x3c
   2268c:	ldrb	r1, [r4, #75]	; 0x4b
   22690:	cmp	r1, #0
   22694:	ldreq	r1, [r4]
   22698:	streq	r1, [r4, #4]
   2269c:	cmp	r5, #0
   226a0:	beq	227d4 <__assert_fail@plt+0x11074>
   226a4:	ldr	r1, [r4, #32]
   226a8:	cmp	r5, r1
   226ac:	bge	22868 <__assert_fail@plt+0x11108>
   226b0:	ldrb	r0, [r4, #76]	; 0x4c
   226b4:	cmp	r0, #0
   226b8:	bne	22a18 <__assert_fail@plt+0x112b8>
   226bc:	cmp	r5, #0
   226c0:	ble	22704 <__assert_fail@plt+0x10fa4>
   226c4:	ldr	r1, [r4, #48]	; 0x30
   226c8:	sub	r0, r5, #1
   226cc:	cmp	r1, r0
   226d0:	beq	22ae0 <__assert_fail@plt+0x11380>
   226d4:	ldr	r1, [r4, #80]	; 0x50
   226d8:	cmp	r1, #2
   226dc:	blt	2271c <__assert_fail@plt+0x10fbc>
   226e0:	ldr	r0, [r4, #8]
   226e4:	mov	r1, r5
   226e8:	sub	r0, r0, #4
   226ec:	ldr	r6, [r0, r1, lsl #2]
   226f0:	cmn	r6, #1
   226f4:	bne	22750 <__assert_fail@plt+0x10ff0>
   226f8:	sub	r1, r1, #1
   226fc:	cmp	r1, #0
   22700:	bgt	226ec <__assert_fail@plt+0x10f8c>
   22704:	ldr	r1, [r4, #60]	; 0x3c
   22708:	str	r1, [r4, #60]	; 0x3c
   2270c:	ldr	r0, [r4, #80]	; 0x50
   22710:	cmp	r0, #2
   22714:	bge	22784 <__assert_fail@plt+0x11024>
   22718:	b	2279c <__assert_fail@plt+0x1103c>
   2271c:	ldr	r1, [r4, #4]
   22720:	ldr	r2, [r4, #68]	; 0x44
   22724:	ldrb	r0, [r1, r0]
   22728:	ubfx	r1, r0, #5, #3
   2272c:	and	r3, r0, #31
   22730:	ldr	r2, [r2, r1, lsl #2]
   22734:	mov	r1, #1
   22738:	tst	r2, r1, lsl r3
   2273c:	bne	22774 <__assert_fail@plt+0x11014>
   22740:	mov	r1, #0
   22744:	cmp	r0, #10
   22748:	beq	22768 <__assert_fail@plt+0x11008>
   2274c:	b	22774 <__assert_fail@plt+0x11014>
   22750:	ldrb	r0, [r4, #78]	; 0x4e
   22754:	cmp	r0, #0
   22758:	bne	22cdc <__assert_fail@plt+0x1157c>
   2275c:	mov	r1, #0
   22760:	cmp	r6, #10
   22764:	bne	22774 <__assert_fail@plt+0x11014>
   22768:	ldrb	r1, [r4, #77]	; 0x4d
   2276c:	cmp	r1, #0
   22770:	movwne	r1, #2
   22774:	str	r1, [r4, #60]	; 0x3c
   22778:	ldr	r0, [r4, #80]	; 0x50
   2277c:	cmp	r0, #2
   22780:	blt	2279c <__assert_fail@plt+0x1103c>
   22784:	ldr	r2, [r4, #28]
   22788:	ldr	r0, [r4, #8]
   2278c:	sub	r2, r2, r5
   22790:	add	r1, r0, r5, lsl #2
   22794:	lsl	r2, r2, #2
   22798:	bl	11454 <memmove@plt>
   2279c:	ldrb	r0, [r4, #75]	; 0x4b
   227a0:	cmp	r0, #0
   227a4:	bne	22ac8 <__assert_fail@plt+0x11368>
   227a8:	ldr	r0, [r4, #28]
   227ac:	ldr	r1, [r4, #32]
   227b0:	sub	r0, r0, r5
   227b4:	sub	r1, r1, r5
   227b8:	str	r0, [r4, #28]
   227bc:	str	r1, [r4, #32]
   227c0:	ldrb	r0, [r4, #75]	; 0x4b
   227c4:	cmp	r0, #0
   227c8:	ldreq	r0, [r4, #4]
   227cc:	addeq	r0, r0, r5
   227d0:	streq	r0, [r4, #4]
   227d4:	str	r9, [r4, #24]
   227d8:	ldr	r0, [r4, #48]	; 0x30
   227dc:	ldr	r3, [r4, #80]	; 0x50
   227e0:	ldr	r2, [r4, #56]	; 0x38
   227e4:	sub	r1, r0, r5
   227e8:	cmp	r3, #2
   227ec:	sub	r0, r2, r5
   227f0:	str	r1, [r4, #48]	; 0x30
   227f4:	str	r0, [r4, #56]	; 0x38
   227f8:	blt	22820 <__assert_fail@plt+0x110c0>
   227fc:	ldrb	r0, [r4, #72]	; 0x48
   22800:	cmp	r0, #0
   22804:	beq	22840 <__assert_fail@plt+0x110e0>
   22808:	mov	r0, r4
   2280c:	bl	1bad0 <__assert_fail@plt+0xa370>
   22810:	cmp	r0, #0
   22814:	beq	22848 <__assert_fail@plt+0x110e8>
   22818:	sub	sp, fp, #28
   2281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22820:	ldrb	r0, [r4, #75]	; 0x4b
   22824:	cmp	r0, #0
   22828:	bne	22afc <__assert_fail@plt+0x1139c>
   2282c:	str	r1, [r4, #28]
   22830:	mov	r0, #0
   22834:	str	r0, [r4, #40]	; 0x28
   22838:	sub	sp, fp, #28
   2283c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22840:	mov	r0, r4
   22844:	bl	1c190 <__assert_fail@plt+0xaa30>
   22848:	mov	r0, #0
   2284c:	str	r0, [r4, #40]	; 0x28
   22850:	sub	sp, fp, #28
   22854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22858:	sub	r5, r9, r0
   2285c:	cmp	r5, #0
   22860:	bne	226a4 <__assert_fail@plt+0x10f44>
   22864:	b	227d4 <__assert_fail@plt+0x11074>
   22868:	ldrb	r2, [r4, #76]	; 0x4c
   2286c:	ldr	lr, [r4, #28]
   22870:	cmp	r2, #0
   22874:	bne	22e50 <__assert_fail@plt+0x116f0>
   22878:	mov	r2, #0
   2287c:	str	r2, [r4, #28]
   22880:	ldr	r3, [r4, #80]	; 0x50
   22884:	cmp	r3, #2
   22888:	blt	22b8c <__assert_fail@plt+0x1142c>
   2288c:	ldrb	r2, [r4, #73]	; 0x49
   22890:	cmp	r2, #0
   22894:	beq	22950 <__assert_fail@plt+0x111f0>
   22898:	ldr	r7, [r4]
   2289c:	sub	r3, r5, r3
   228a0:	add	ip, r7, r0
   228a4:	add	r3, ip, r3
   228a8:	add	r8, ip, r5
   228ac:	cmp	r3, r7
   228b0:	movcc	r3, r7
   228b4:	mov	r7, r8
   228b8:	sub	r7, r7, #1
   228bc:	cmp	r7, r3
   228c0:	bcc	22950 <__assert_fail@plt+0x111f0>
   228c4:	ldrb	r2, [r7]
   228c8:	and	r2, r2, #192	; 0xc0
   228cc:	cmp	r2, #128	; 0x80
   228d0:	beq	228b8 <__assert_fail@plt+0x11158>
   228d4:	ldr	r0, [r4, #48]	; 0x30
   228d8:	mov	sl, lr
   228dc:	mov	r1, r7
   228e0:	add	r3, ip, r0
   228e4:	ldr	r0, [r4, #64]	; 0x40
   228e8:	sub	r2, r3, r7
   228ec:	cmp	r0, #0
   228f0:	bne	2301c <__assert_fail@plt+0x118bc>
   228f4:	mov	r0, #0
   228f8:	add	r3, sp, #24
   228fc:	str	r0, [sp, #28]
   22900:	str	r0, [sp, #24]
   22904:	add	r0, sp, #20
   22908:	bl	2d680 <__assert_fail@plt+0x1bf20>
   2290c:	sub	r1, r8, r7
   22910:	mvn	r7, #0
   22914:	cmp	r0, r1
   22918:	bcc	2293c <__assert_fail@plt+0x111dc>
   2291c:	cmn	r0, #3
   22920:	bhi	2293c <__assert_fail@plt+0x111dc>
   22924:	mov	r2, #0
   22928:	sub	r0, r0, r1
   2292c:	str	r2, [r4, #16]
   22930:	str	r2, [r4, #20]
   22934:	str	r0, [r4, #28]
   22938:	ldr	r7, [sp, #20]
   2293c:	cmn	r7, #1
   22940:	bne	229fc <__assert_fail@plt+0x1129c>
   22944:	ldr	r0, [r4, #24]
   22948:	ldr	r1, [r4, #32]
   2294c:	mov	lr, sl
   22950:	add	r8, r1, r0
   22954:	cmp	r8, r9
   22958:	bge	22cfc <__assert_fail@plt+0x1159c>
   2295c:	add	sl, r4, #16
   22960:	str	lr, [sp]
   22964:	ldr	r0, [r4]
   22968:	ldr	r2, [r4, #44]	; 0x2c
   2296c:	mov	r3, sl
   22970:	add	r1, r0, r8
   22974:	ldr	r0, [sl]
   22978:	sub	r7, r2, r8
   2297c:	mov	r2, r7
   22980:	str	r0, [sp, #8]
   22984:	ldr	r0, [sl, #4]
   22988:	str	r0, [sp, #4]
   2298c:	add	r0, sp, #24
   22990:	bl	2d680 <__assert_fail@plt+0x1bf20>
   22994:	sub	r1, r0, #1
   22998:	cmn	r1, #3
   2299c:	bcs	229b4 <__assert_fail@plt+0x11254>
   229a0:	ldr	r7, [sp, #24]
   229a4:	add	r8, r0, r8
   229a8:	cmp	r8, r9
   229ac:	blt	22964 <__assert_fail@plt+0x11204>
   229b0:	b	229e8 <__assert_fail@plt+0x11288>
   229b4:	cmp	r7, #0
   229b8:	mov	r1, #0
   229bc:	ldr	r3, [sp, #4]
   229c0:	ldr	r2, [sp, #8]
   229c4:	cmpne	r0, #0
   229c8:	ldrne	r0, [r4]
   229cc:	ldrbne	r1, [r0, r8]
   229d0:	stm	sl, {r2, r3}
   229d4:	mov	r0, #1
   229d8:	mov	r7, r1
   229dc:	add	r8, r0, r8
   229e0:	cmp	r8, r9
   229e4:	blt	22964 <__assert_fail@plt+0x11204>
   229e8:	ldr	lr, [sp]
   229ec:	sub	r0, r8, r9
   229f0:	cmn	r7, #1
   229f4:	str	r0, [r4, #28]
   229f8:	beq	22d04 <__assert_fail@plt+0x115a4>
   229fc:	ldrb	r0, [r4, #78]	; 0x4e
   22a00:	cmp	r0, #0
   22a04:	bne	22fec <__assert_fail@plt+0x1188c>
   22a08:	mov	r1, #0
   22a0c:	cmp	r7, #10
   22a10:	beq	22e28 <__assert_fail@plt+0x116c8>
   22a14:	b	22e34 <__assert_fail@plt+0x116d4>
   22a18:	ldr	ip, [r4, #12]
   22a1c:	ldr	r0, [r4, #28]
   22a20:	mov	r1, #0
   22a24:	add	r2, r1, r0
   22a28:	add	r2, r2, r2, lsr #31
   22a2c:	asr	r7, r2, #1
   22a30:	ldr	r3, [ip, r7, lsl #2]
   22a34:	mov	r2, r7
   22a38:	cmp	r3, r5
   22a3c:	bgt	22a4c <__assert_fail@plt+0x112ec>
   22a40:	bge	22a58 <__assert_fail@plt+0x112f8>
   22a44:	add	r1, r7, #1
   22a48:	mov	r2, r0
   22a4c:	cmp	r1, r2
   22a50:	mov	r0, r2
   22a54:	blt	22a24 <__assert_fail@plt+0x112c4>
   22a58:	mov	r8, #0
   22a5c:	cmp	r3, r5
   22a60:	movwlt	r8, #1
   22a64:	add	sl, r7, r8
   22a68:	cmp	sl, #0
   22a6c:	ble	22ab0 <__assert_fail@plt+0x11350>
   22a70:	ldr	r1, [r4, #48]	; 0x30
   22a74:	sub	r0, sl, #1
   22a78:	cmp	r1, r0
   22a7c:	beq	22e78 <__assert_fail@plt+0x11718>
   22a80:	ldr	r1, [r4, #80]	; 0x50
   22a84:	cmp	r1, #2
   22a88:	blt	22be8 <__assert_fail@plt+0x11488>
   22a8c:	ldr	r0, [r4, #8]
   22a90:	mov	r1, sl
   22a94:	sub	r0, r0, #4
   22a98:	ldr	r6, [r0, r1, lsl #2]
   22a9c:	cmn	r6, #1
   22aa0:	bne	22c1c <__assert_fail@plt+0x114bc>
   22aa4:	sub	r1, r1, #1
   22aa8:	cmp	r1, #0
   22aac:	bgt	22a98 <__assert_fail@plt+0x11338>
   22ab0:	ldr	r1, [r4, #60]	; 0x3c
   22ab4:	str	r1, [r4, #60]	; 0x3c
   22ab8:	cmp	sl, r5
   22abc:	ldr	r2, [r4, #28]
   22ac0:	beq	22c50 <__assert_fail@plt+0x114f0>
   22ac4:	b	22e90 <__assert_fail@plt+0x11730>
   22ac8:	ldr	r2, [r4, #28]
   22acc:	ldr	r0, [r4, #4]
   22ad0:	add	r1, r0, r5
   22ad4:	sub	r2, r2, r5
   22ad8:	bl	11454 <memmove@plt>
   22adc:	b	227a8 <__assert_fail@plt+0x11048>
   22ae0:	and	r0, r6, #2
   22ae4:	eor	r1, r0, #10
   22ae8:	str	r1, [r4, #60]	; 0x3c
   22aec:	ldr	r0, [r4, #80]	; 0x50
   22af0:	cmp	r0, #2
   22af4:	bge	22784 <__assert_fail@plt+0x11024>
   22af8:	b	2279c <__assert_fail@plt+0x1103c>
   22afc:	ldrb	r0, [r4, #72]	; 0x48
   22b00:	cmp	r0, #0
   22b04:	beq	22d50 <__assert_fail@plt+0x115f0>
   22b08:	ldr	r6, [r4, #36]	; 0x24
   22b0c:	ldr	r5, [r4, #28]
   22b10:	cmp	r6, r1
   22b14:	movgt	r6, r1
   22b18:	cmp	r5, r6
   22b1c:	blt	22b28 <__assert_fail@plt+0x113c8>
   22b20:	b	22b74 <__assert_fail@plt+0x11414>
   22b24:	ldr	r9, [r4, #24]
   22b28:	ldr	r1, [r4]
   22b2c:	ldr	r0, [r4, #64]	; 0x40
   22b30:	add	r1, r1, r9
   22b34:	cmp	r0, #0
   22b38:	ldrb	r7, [r1, r5]
   22b3c:	ldrbne	r7, [r0, r7]
   22b40:	add	r0, r7, #128	; 0x80
   22b44:	lsr	r0, r0, #7
   22b48:	cmp	r0, #2
   22b4c:	bhi	22b5c <__assert_fail@plt+0x113fc>
   22b50:	bl	115ec <__ctype_toupper_loc@plt>
   22b54:	ldr	r0, [r0]
   22b58:	ldr	r7, [r0, r7, lsl #2]
   22b5c:	ldr	r0, [r4, #4]
   22b60:	strb	r7, [r0, r5]
   22b64:	add	r5, r5, #1
   22b68:	cmp	r5, r6
   22b6c:	blt	22b24 <__assert_fail@plt+0x113c4>
   22b70:	mov	r5, r6
   22b74:	str	r5, [r4, #28]
   22b78:	str	r5, [r4, #32]
   22b7c:	mov	r0, #0
   22b80:	str	r0, [r4, #40]	; 0x28
   22b84:	sub	sp, fp, #28
   22b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b8c:	ldr	r3, [r4]
   22b90:	add	r0, r5, r0
   22b94:	ldr	r1, [r4, #64]	; 0x40
   22b98:	add	r0, r3, r0
   22b9c:	cmp	r1, #0
   22ba0:	ldrb	r0, [r0, #-1]
   22ba4:	str	r2, [r4, #32]
   22ba8:	ldrbne	r0, [r1, r0]
   22bac:	ldr	r1, [r4, #68]	; 0x44
   22bb0:	ubfx	r2, r0, #5, #3
   22bb4:	and	r3, r0, #31
   22bb8:	ldr	r2, [r1, r2, lsl #2]
   22bbc:	mov	r1, #1
   22bc0:	tst	r2, r1, lsl r3
   22bc4:	bne	22be0 <__assert_fail@plt+0x11480>
   22bc8:	mov	r1, #0
   22bcc:	cmp	r0, #10
   22bd0:	bne	22be0 <__assert_fail@plt+0x11480>
   22bd4:	ldrb	r1, [r4, #77]	; 0x4d
   22bd8:	cmp	r1, #0
   22bdc:	movwne	r1, #2
   22be0:	str	r1, [r4, #60]	; 0x3c
   22be4:	b	227c0 <__assert_fail@plt+0x11060>
   22be8:	ldr	r1, [r4, #4]
   22bec:	ldr	r2, [r4, #68]	; 0x44
   22bf0:	ldrb	r0, [r1, r0]
   22bf4:	ubfx	r1, r0, #5, #3
   22bf8:	and	r3, r0, #31
   22bfc:	ldr	r2, [r2, r1, lsl #2]
   22c00:	mov	r1, #1
   22c04:	tst	r2, r1, lsl r3
   22c08:	bne	22c40 <__assert_fail@plt+0x114e0>
   22c0c:	mov	r1, #0
   22c10:	cmp	r0, #10
   22c14:	beq	22c34 <__assert_fail@plt+0x114d4>
   22c18:	b	22c40 <__assert_fail@plt+0x114e0>
   22c1c:	ldrb	r0, [r4, #78]	; 0x4e
   22c20:	cmp	r0, #0
   22c24:	bne	22fcc <__assert_fail@plt+0x1186c>
   22c28:	mov	r1, #0
   22c2c:	cmp	r6, #10
   22c30:	bne	22c40 <__assert_fail@plt+0x114e0>
   22c34:	ldrb	r1, [r4, #77]	; 0x4d
   22c38:	cmp	r1, #0
   22c3c:	movwne	r1, #2
   22c40:	str	r1, [r4, #60]	; 0x3c
   22c44:	cmp	sl, r5
   22c48:	ldr	r2, [r4, #28]
   22c4c:	bne	22e90 <__assert_fail@plt+0x11730>
   22c50:	cmp	r2, r5
   22c54:	ble	22e90 <__assert_fail@plt+0x11730>
   22c58:	ldr	r0, [r4, #12]
   22c5c:	ldr	r0, [r0, r5, lsl #2]
   22c60:	cmp	r0, r5
   22c64:	bne	22e90 <__assert_fail@plt+0x11730>
   22c68:	ldr	r0, [r4, #8]
   22c6c:	sub	r2, r2, r5
   22c70:	lsl	r2, r2, #2
   22c74:	add	r1, r0, r5, lsl #2
   22c78:	bl	11454 <memmove@plt>
   22c7c:	ldr	r2, [r4, #28]
   22c80:	ldr	r0, [r4, #4]
   22c84:	add	r1, r0, r5
   22c88:	sub	r2, r2, r5
   22c8c:	bl	11454 <memmove@plt>
   22c90:	ldr	r0, [r4, #28]
   22c94:	ldr	r1, [r4, #32]
   22c98:	sub	r0, r0, r5
   22c9c:	sub	r1, r1, r5
   22ca0:	cmp	r0, #1
   22ca4:	str	r0, [r4, #28]
   22ca8:	str	r1, [r4, #32]
   22cac:	blt	227c0 <__assert_fail@plt+0x11060>
   22cb0:	ldr	r0, [r4, #12]
   22cb4:	mov	r2, #0
   22cb8:	add	r1, r0, r5, lsl #2
   22cbc:	ldr	r3, [r1, r2, lsl #2]
   22cc0:	sub	r3, r3, r5
   22cc4:	str	r3, [r0, r2, lsl #2]
   22cc8:	add	r2, r2, #1
   22ccc:	ldr	r3, [r4, #28]
   22cd0:	cmp	r2, r3
   22cd4:	blt	22cbc <__assert_fail@plt+0x1155c>
   22cd8:	b	227c0 <__assert_fail@plt+0x11060>
   22cdc:	mov	r0, r6
   22ce0:	bl	1164c <iswalnum@plt>
   22ce4:	mov	r1, #1
   22ce8:	cmp	r6, #95	; 0x5f
   22cec:	beq	22774 <__assert_fail@plt+0x11014>
   22cf0:	cmp	r0, #0
   22cf4:	beq	2275c <__assert_fail@plt+0x10ffc>
   22cf8:	b	22774 <__assert_fail@plt+0x11014>
   22cfc:	sub	r0, r8, r9
   22d00:	str	r0, [r4, #28]
   22d04:	cmp	lr, #0
   22d08:	ble	22d48 <__assert_fail@plt+0x115e8>
   22d0c:	ldr	r1, [r4, #48]	; 0x30
   22d10:	sub	r0, lr, #1
   22d14:	cmp	r1, r0
   22d18:	beq	22fc0 <__assert_fail@plt+0x11860>
   22d1c:	ldr	r1, [r4, #80]	; 0x50
   22d20:	cmp	r1, #2
   22d24:	blt	22ddc <__assert_fail@plt+0x1167c>
   22d28:	ldr	r0, [r4, #8]
   22d2c:	sub	r0, r0, #4
   22d30:	ldr	r6, [r0, lr, lsl #2]
   22d34:	cmn	r6, #1
   22d38:	bne	22e10 <__assert_fail@plt+0x116b0>
   22d3c:	sub	lr, lr, #1
   22d40:	cmp	lr, #0
   22d44:	bgt	22d30 <__assert_fail@plt+0x115d0>
   22d48:	ldr	r1, [r4, #60]	; 0x3c
   22d4c:	b	22e34 <__assert_fail@plt+0x116d4>
   22d50:	ldr	r3, [r4, #64]	; 0x40
   22d54:	cmp	r3, #0
   22d58:	beq	22848 <__assert_fail@plt+0x110e8>
   22d5c:	ldr	r0, [r4, #36]	; 0x24
   22d60:	ldr	r2, [r4, #28]
   22d64:	cmp	r0, r1
   22d68:	movgt	r0, r1
   22d6c:	cmp	r2, r0
   22d70:	bge	22dc4 <__assert_fail@plt+0x11664>
   22d74:	ldr	r7, [r4]
   22d78:	add	r1, r2, r9
   22d7c:	ldr	r6, [r4, #4]
   22d80:	ldrb	r1, [r7, r1]
   22d84:	ldrb	r1, [r3, r1]
   22d88:	strb	r1, [r6, r2]
   22d8c:	add	r1, r2, #1
   22d90:	cmp	r1, r0
   22d94:	bge	22dc0 <__assert_fail@plt+0x11660>
   22d98:	ldm	r4, {r2, r3}
   22d9c:	ldr	r7, [r4, #24]
   22da0:	ldr	r6, [r4, #64]	; 0x40
   22da4:	add	r2, r2, r7
   22da8:	ldrb	r2, [r2, r1]
   22dac:	ldrb	r2, [r6, r2]
   22db0:	strb	r2, [r3, r1]
   22db4:	add	r1, r1, #1
   22db8:	cmp	r1, r0
   22dbc:	blt	22d98 <__assert_fail@plt+0x11638>
   22dc0:	mov	r2, r0
   22dc4:	str	r2, [r4, #28]
   22dc8:	str	r2, [r4, #32]
   22dcc:	mov	r0, #0
   22dd0:	str	r0, [r4, #40]	; 0x28
   22dd4:	sub	sp, fp, #28
   22dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ddc:	ldr	r1, [r4, #4]
   22de0:	ldr	r2, [r4, #68]	; 0x44
   22de4:	ldrb	r0, [r1, r0]
   22de8:	ubfx	r1, r0, #5, #3
   22dec:	and	r3, r0, #31
   22df0:	ldr	r2, [r2, r1, lsl #2]
   22df4:	mov	r1, #1
   22df8:	tst	r2, r1, lsl r3
   22dfc:	bne	22e34 <__assert_fail@plt+0x116d4>
   22e00:	mov	r1, #0
   22e04:	cmp	r0, #10
   22e08:	beq	22e28 <__assert_fail@plt+0x116c8>
   22e0c:	b	22e34 <__assert_fail@plt+0x116d4>
   22e10:	ldrb	r0, [r4, #78]	; 0x4e
   22e14:	cmp	r0, #0
   22e18:	bne	23064 <__assert_fail@plt+0x11904>
   22e1c:	mov	r1, #0
   22e20:	cmp	r6, #10
   22e24:	bne	22e34 <__assert_fail@plt+0x116d4>
   22e28:	ldrb	r1, [r4, #77]	; 0x4d
   22e2c:	cmp	r1, #0
   22e30:	movwne	r1, #2
   22e34:	str	r1, [r4, #60]	; 0x3c
   22e38:	mov	r0, #0
   22e3c:	ldr	r2, [r4, #28]
   22e40:	cmp	r2, #0
   22e44:	bne	22f78 <__assert_fail@plt+0x11818>
   22e48:	str	r0, [r4, #32]
   22e4c:	b	227c0 <__assert_fail@plt+0x11060>
   22e50:	mov	r2, #0
   22e54:	strb	r2, [r4, #76]	; 0x4c
   22e58:	sub	r2, r5, r9
   22e5c:	ldr	r3, [r4, #44]	; 0x2c
   22e60:	ldr	r7, [r4, #52]	; 0x34
   22e64:	add	r3, r2, r3
   22e68:	add	r2, r2, r7
   22e6c:	str	r3, [r4, #48]	; 0x30
   22e70:	str	r2, [r4, #56]	; 0x38
   22e74:	b	22878 <__assert_fail@plt+0x11118>
   22e78:	and	r0, r6, #2
   22e7c:	eor	r1, r0, #10
   22e80:	str	r1, [r4, #60]	; 0x3c
   22e84:	cmp	sl, r5
   22e88:	ldr	r2, [r4, #28]
   22e8c:	beq	22c50 <__assert_fail@plt+0x114f0>
   22e90:	mov	r0, #0
   22e94:	strb	r0, [r4, #76]	; 0x4c
   22e98:	sub	r0, r5, r9
   22e9c:	ldr	r1, [r4, #44]	; 0x2c
   22ea0:	ldr	r3, [r4, #52]	; 0x34
   22ea4:	add	r1, r0, r1
   22ea8:	add	r0, r0, r3
   22eac:	str	r1, [r4, #48]	; 0x30
   22eb0:	str	r0, [r4, #56]	; 0x38
   22eb4:	add	r0, r7, r8
   22eb8:	sub	r1, r0, #1
   22ebc:	add	r0, r1, #1
   22ec0:	cmp	r0, #1
   22ec4:	blt	22edc <__assert_fail@plt+0x1177c>
   22ec8:	ldr	r3, [r4, #12]
   22ecc:	ldr	r3, [r3, r1, lsl #2]
   22ed0:	sub	r1, r1, #1
   22ed4:	cmp	r3, r5
   22ed8:	beq	22ebc <__assert_fail@plt+0x1175c>
   22edc:	cmp	r0, r2
   22ee0:	bge	22f00 <__assert_fail@plt+0x117a0>
   22ee4:	ldr	r1, [r4, #8]
   22ee8:	ldr	r3, [r1, r0, lsl #2]
   22eec:	cmn	r3, #1
   22ef0:	bne	22f00 <__assert_fail@plt+0x117a0>
   22ef4:	add	r0, r0, #1
   22ef8:	cmp	r0, r2
   22efc:	blt	22ee8 <__assert_fail@plt+0x11788>
   22f00:	cmp	r0, r2
   22f04:	bne	22f18 <__assert_fail@plt+0x117b8>
   22f08:	mov	r0, #0
   22f0c:	str	r0, [r4, #28]
   22f10:	str	r0, [r4, #32]
   22f14:	b	227c0 <__assert_fail@plt+0x11060>
   22f18:	ldr	r1, [r4, #12]
   22f1c:	ldr	r0, [r1, r0, lsl #2]
   22f20:	subs	r2, r0, r5
   22f24:	str	r2, [r4, #28]
   22f28:	beq	22f6c <__assert_fail@plt+0x1180c>
   22f2c:	cmp	r2, #1
   22f30:	blt	22f54 <__assert_fail@plt+0x117f4>
   22f34:	ldr	r0, [r4, #8]
   22f38:	mov	r1, #0
   22f3c:	mvn	r3, #0
   22f40:	str	r3, [r0, r1, lsl #2]
   22f44:	add	r1, r1, #1
   22f48:	ldr	r2, [r4, #28]
   22f4c:	cmp	r1, r2
   22f50:	blt	22f40 <__assert_fail@plt+0x117e0>
   22f54:	ldr	r0, [r4, #4]
   22f58:	mov	r1, #255	; 0xff
   22f5c:	bl	11670 <memset@plt>
   22f60:	ldr	r0, [r4, #28]
   22f64:	str	r0, [r4, #32]
   22f68:	b	227c0 <__assert_fail@plt+0x11060>
   22f6c:	mov	r0, #0
   22f70:	str	r0, [r4, #32]
   22f74:	b	227c0 <__assert_fail@plt+0x11060>
   22f78:	cmp	r2, #1
   22f7c:	blt	22fa0 <__assert_fail@plt+0x11840>
   22f80:	ldr	r0, [r4, #8]
   22f84:	mov	r1, #0
   22f88:	mvn	r3, #0
   22f8c:	str	r3, [r0, r1, lsl #2]
   22f90:	add	r1, r1, #1
   22f94:	ldr	r2, [r4, #28]
   22f98:	cmp	r1, r2
   22f9c:	blt	22f8c <__assert_fail@plt+0x1182c>
   22fa0:	ldrb	r0, [r4, #75]	; 0x4b
   22fa4:	cmp	r0, #0
   22fa8:	beq	23010 <__assert_fail@plt+0x118b0>
   22fac:	ldr	r0, [r4, #4]
   22fb0:	mov	r1, #255	; 0xff
   22fb4:	bl	11670 <memset@plt>
   22fb8:	ldr	r0, [r4, #28]
   22fbc:	b	22e48 <__assert_fail@plt+0x116e8>
   22fc0:	and	r0, r6, #2
   22fc4:	eor	r1, r0, #10
   22fc8:	b	22e34 <__assert_fail@plt+0x116d4>
   22fcc:	mov	r0, r6
   22fd0:	bl	1164c <iswalnum@plt>
   22fd4:	mov	r1, #1
   22fd8:	cmp	r6, #95	; 0x5f
   22fdc:	beq	22c40 <__assert_fail@plt+0x114e0>
   22fe0:	cmp	r0, #0
   22fe4:	beq	22c28 <__assert_fail@plt+0x114c8>
   22fe8:	b	22c40 <__assert_fail@plt+0x114e0>
   22fec:	mov	r0, r7
   22ff0:	bl	1164c <iswalnum@plt>
   22ff4:	mov	r1, #1
   22ff8:	cmp	r7, #95	; 0x5f
   22ffc:	beq	22e34 <__assert_fail@plt+0x116d4>
   23000:	cmp	r0, #0
   23004:	mov	r2, r7
   23008:	beq	22a08 <__assert_fail@plt+0x112a8>
   2300c:	b	22e34 <__assert_fail@plt+0x116d4>
   23010:	mov	r0, r2
   23014:	str	r2, [r4, #32]
   23018:	b	227c0 <__assert_fail@plt+0x11060>
   2301c:	cmp	r2, #1
   23020:	blt	23084 <__assert_fail@plt+0x11924>
   23024:	sub	r1, r7, #1
   23028:	sub	r1, r1, r3
   2302c:	mvn	r3, #1
   23030:	cmn	r1, #7
   23034:	mvnle	r1, #6
   23038:	sub	ip, r3, r1
   2303c:	add	r1, sp, #14
   23040:	ldrb	r3, [r7, ip]
   23044:	sub	lr, ip, #1
   23048:	ldrb	r3, [r0, r3]
   2304c:	strb	r3, [r1, ip]
   23050:	add	r3, ip, #1
   23054:	mov	ip, lr
   23058:	cmp	r3, #1
   2305c:	bgt	23040 <__assert_fail@plt+0x118e0>
   23060:	b	228f4 <__assert_fail@plt+0x11194>
   23064:	mov	r0, r6
   23068:	bl	1164c <iswalnum@plt>
   2306c:	mov	r1, #1
   23070:	cmp	r6, #95	; 0x5f
   23074:	beq	22e34 <__assert_fail@plt+0x116d4>
   23078:	cmp	r0, #0
   2307c:	beq	22e1c <__assert_fail@plt+0x116bc>
   23080:	b	22e34 <__assert_fail@plt+0x116d4>
   23084:	add	r1, sp, #14
   23088:	b	228f4 <__assert_fail@plt+0x11194>
   2308c:	push	{r4, r5, r6, sl, fp, lr}
   23090:	add	fp, sp, #16
   23094:	mov	r3, r2
   23098:	ldr	r2, [r0, #88]	; 0x58
   2309c:	mov	r5, r1
   230a0:	mov	r4, r0
   230a4:	mov	r1, r3
   230a8:	bl	232d8 <__assert_fail@plt+0x11b78>
   230ac:	ldr	r1, [r5, #8]
   230b0:	cmp	r1, #1
   230b4:	blt	23228 <__assert_fail@plt+0x11ac8>
   230b8:	ldr	r3, [r5, #12]
   230bc:	ldr	r5, [r4, #84]	; 0x54
   230c0:	movw	lr, #65280	; 0xff00
   230c4:	and	ip, r0, #8
   230c8:	and	r2, r0, #2
   230cc:	tst	r0, #1
   230d0:	movt	lr, #3
   230d4:	ldr	r5, [r5]
   230d8:	bne	23130 <__assert_fail@plt+0x119d0>
   230dc:	cmp	r2, #0
   230e0:	bne	23194 <__assert_fail@plt+0x11a34>
   230e4:	mov	r2, #0
   230e8:	ldr	r0, [r3, r2, lsl #2]
   230ec:	add	r4, r5, r0, lsl #3
   230f0:	ldr	r4, [r4, #4]
   230f4:	uxtb	r6, r4
   230f8:	cmp	r6, #2
   230fc:	bne	23120 <__assert_fail@plt+0x119c0>
   23100:	tst	r4, lr
   23104:	beq	2322c <__assert_fail@plt+0x11acc>
   23108:	tst	r4, #9216	; 0x2400
   2310c:	bne	23120 <__assert_fail@plt+0x119c0>
   23110:	cmp	ip, #0
   23114:	bne	2322c <__assert_fail@plt+0x11acc>
   23118:	ands	r4, r4, #32768	; 0x8000
   2311c:	beq	2322c <__assert_fail@plt+0x11acc>
   23120:	add	r2, r2, #1
   23124:	cmp	r2, r1
   23128:	blt	230e8 <__assert_fail@plt+0x11988>
   2312c:	b	23228 <__assert_fail@plt+0x11ac8>
   23130:	cmp	r2, #0
   23134:	bne	231e0 <__assert_fail@plt+0x11a80>
   23138:	mov	r2, #0
   2313c:	ldr	r0, [r3, r2, lsl #2]
   23140:	add	r4, r5, r0, lsl #3
   23144:	ldr	r4, [r4, #4]
   23148:	uxtb	r6, r4
   2314c:	cmp	r6, #2
   23150:	bne	23164 <__assert_fail@plt+0x11a04>
   23154:	tst	r4, lr
   23158:	beq	2322c <__assert_fail@plt+0x11acc>
   2315c:	tst	r4, #10240	; 0x2800
   23160:	beq	23174 <__assert_fail@plt+0x11a14>
   23164:	add	r2, r2, #1
   23168:	cmp	r2, r1
   2316c:	blt	2313c <__assert_fail@plt+0x119dc>
   23170:	b	23228 <__assert_fail@plt+0x11ac8>
   23174:	cmp	ip, #0
   23178:	bne	2322c <__assert_fail@plt+0x11acc>
   2317c:	ands	r4, r4, #32768	; 0x8000
   23180:	popeq	{r4, r5, r6, sl, fp, pc}
   23184:	add	r2, r2, #1
   23188:	cmp	r2, r1
   2318c:	blt	2313c <__assert_fail@plt+0x119dc>
   23190:	b	23228 <__assert_fail@plt+0x11ac8>
   23194:	mov	r2, #0
   23198:	ldr	r0, [r3, r2, lsl #2]
   2319c:	add	r4, r5, r0, lsl #3
   231a0:	ldr	r4, [r4, #4]
   231a4:	uxtb	r6, r4
   231a8:	cmp	r6, #2
   231ac:	bne	231d0 <__assert_fail@plt+0x11a70>
   231b0:	tst	r4, lr
   231b4:	beq	2322c <__assert_fail@plt+0x11acc>
   231b8:	tst	r4, #1024	; 0x400
   231bc:	bne	231d0 <__assert_fail@plt+0x11a70>
   231c0:	cmp	ip, #0
   231c4:	bne	2322c <__assert_fail@plt+0x11acc>
   231c8:	ands	r4, r4, #32768	; 0x8000
   231cc:	beq	2322c <__assert_fail@plt+0x11acc>
   231d0:	add	r2, r2, #1
   231d4:	cmp	r2, r1
   231d8:	blt	23198 <__assert_fail@plt+0x11a38>
   231dc:	b	23228 <__assert_fail@plt+0x11ac8>
   231e0:	mov	r2, #0
   231e4:	ldr	r0, [r3, r2, lsl #2]
   231e8:	add	r4, r5, r0, lsl #3
   231ec:	ldr	r4, [r4, #4]
   231f0:	uxtb	r6, r4
   231f4:	cmp	r6, #2
   231f8:	bne	2321c <__assert_fail@plt+0x11abc>
   231fc:	tst	r4, lr
   23200:	beq	2322c <__assert_fail@plt+0x11acc>
   23204:	tst	r4, #2048	; 0x800
   23208:	bne	2321c <__assert_fail@plt+0x11abc>
   2320c:	cmp	ip, #0
   23210:	bne	2322c <__assert_fail@plt+0x11acc>
   23214:	ands	r4, r4, #32768	; 0x8000
   23218:	beq	2322c <__assert_fail@plt+0x11acc>
   2321c:	add	r2, r2, #1
   23220:	cmp	r2, r1
   23224:	blt	231e4 <__assert_fail@plt+0x11a84>
   23228:	mov	r0, #0
   2322c:	pop	{r4, r5, r6, sl, fp, pc}
   23230:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23234:	add	fp, sp, #24
   23238:	mov	r8, r0
   2323c:	ldr	r0, [r0, #124]	; 0x7c
   23240:	cmp	r0, #1
   23244:	blt	232c8 <__assert_fail@plt+0x11b68>
   23248:	mov	r7, #0
   2324c:	ldr	r0, [r8, #132]	; 0x84
   23250:	ldr	r5, [r0, r7, lsl #2]
   23254:	ldr	r0, [r5, #16]
   23258:	cmp	r0, #1
   2325c:	blt	2328c <__assert_fail@plt+0x11b2c>
   23260:	mov	r4, #0
   23264:	ldr	r0, [r5, #20]
   23268:	ldr	r6, [r0, r4, lsl #2]
   2326c:	ldr	r0, [r6, #16]
   23270:	bl	14538 <__assert_fail@plt+0x2dd8>
   23274:	mov	r0, r6
   23278:	bl	14538 <__assert_fail@plt+0x2dd8>
   2327c:	ldr	r0, [r5, #16]
   23280:	add	r4, r4, #1
   23284:	cmp	r4, r0
   23288:	blt	23264 <__assert_fail@plt+0x11b04>
   2328c:	ldr	r0, [r5, #20]
   23290:	bl	14538 <__assert_fail@plt+0x2dd8>
   23294:	ldr	r0, [r5, #8]
   23298:	cmp	r0, #0
   2329c:	beq	232b0 <__assert_fail@plt+0x11b50>
   232a0:	ldr	r0, [r0, #8]
   232a4:	bl	14538 <__assert_fail@plt+0x2dd8>
   232a8:	ldr	r0, [r5, #8]
   232ac:	bl	14538 <__assert_fail@plt+0x2dd8>
   232b0:	mov	r0, r5
   232b4:	bl	14538 <__assert_fail@plt+0x2dd8>
   232b8:	ldr	r0, [r8, #124]	; 0x7c
   232bc:	add	r7, r7, #1
   232c0:	cmp	r7, r0
   232c4:	blt	2324c <__assert_fail@plt+0x11aec>
   232c8:	mov	r0, #0
   232cc:	str	r0, [r8, #108]	; 0x6c
   232d0:	str	r0, [r8, #124]	; 0x7c
   232d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   232d8:	push	{r4, r5, fp, lr}
   232dc:	add	fp, sp, #8
   232e0:	mov	r4, r0
   232e4:	cmn	r1, #1
   232e8:	ldrle	r0, [r4, #60]	; 0x3c
   232ec:	pople	{r4, r5, fp, pc}
   232f0:	ldr	r0, [r4, #48]	; 0x30
   232f4:	cmp	r0, r1
   232f8:	beq	23394 <__assert_fail@plt+0x11c34>
   232fc:	ldr	r0, [r4, #80]	; 0x50
   23300:	cmp	r0, #2
   23304:	blt	23354 <__assert_fail@plt+0x11bf4>
   23308:	ldr	r0, [r4, #8]
   2330c:	ldr	r5, [r0, r1, lsl #2]
   23310:	cmn	r5, #1
   23314:	bne	23338 <__assert_fail@plt+0x11bd8>
   23318:	cmp	r1, #0
   2331c:	sub	r2, r1, #1
   23320:	ldrle	r0, [r4, #60]	; 0x3c
   23324:	mov	r1, r2
   23328:	pople	{r4, r5, fp, pc}
   2332c:	ldr	r5, [r0, r1, lsl #2]
   23330:	cmn	r5, #1
   23334:	beq	23318 <__assert_fail@plt+0x11bb8>
   23338:	ldrb	r0, [r4, #78]	; 0x4e
   2333c:	cmp	r0, #0
   23340:	bne	233a0 <__assert_fail@plt+0x11c40>
   23344:	mov	r0, #0
   23348:	cmp	r5, #10
   2334c:	beq	23384 <__assert_fail@plt+0x11c24>
   23350:	b	23390 <__assert_fail@plt+0x11c30>
   23354:	ldr	r0, [r4, #4]
   23358:	ldr	r2, [r4, #68]	; 0x44
   2335c:	ldrb	r1, [r0, r1]
   23360:	ubfx	r0, r1, #5, #3
   23364:	and	r3, r1, #31
   23368:	ldr	r2, [r2, r0, lsl #2]
   2336c:	mov	r0, #1
   23370:	tst	r2, r0, lsl r3
   23374:	bne	23390 <__assert_fail@plt+0x11c30>
   23378:	mov	r0, #0
   2337c:	cmp	r1, #10
   23380:	popne	{r4, r5, fp, pc}
   23384:	ldrb	r0, [r4, #77]	; 0x4d
   23388:	cmp	r0, #0
   2338c:	movwne	r0, #2
   23390:	pop	{r4, r5, fp, pc}
   23394:	and	r0, r2, #2
   23398:	eor	r0, r0, #10
   2339c:	pop	{r4, r5, fp, pc}
   233a0:	mov	r0, r5
   233a4:	bl	1164c <iswalnum@plt>
   233a8:	mov	r1, r0
   233ac:	mov	r0, #1
   233b0:	cmp	r5, #95	; 0x5f
   233b4:	beq	23390 <__assert_fail@plt+0x11c30>
   233b8:	cmp	r1, #0
   233bc:	beq	23344 <__assert_fail@plt+0x11be4>
   233c0:	b	23390 <__assert_fail@plt+0x11c30>
   233c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233c8:	add	fp, sp, #28
   233cc:	sub	sp, sp, #4
   233d0:	mov	sl, r0
   233d4:	ldr	r0, [r1, #4]
   233d8:	cmp	r0, #1
   233dc:	blt	234a8 <__assert_fail@plt+0x11d48>
   233e0:	ldr	r7, [sl, #84]	; 0x54
   233e4:	mov	r8, r2
   233e8:	mov	r5, r1
   233ec:	mov	r4, #0
   233f0:	b	23418 <__assert_fail@plt+0x11cb8>
   233f4:	ldr	r0, [sl, #132]	; 0x84
   233f8:	lsl	r1, r9, #3
   233fc:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   23400:	cmp	r0, #0
   23404:	beq	234b4 <__assert_fail@plt+0x11d54>
   23408:	lsl	r1, r9, #1
   2340c:	str	r1, [sl, #128]	; 0x80
   23410:	str	r0, [sl, #132]	; 0x84
   23414:	b	23460 <__assert_fail@plt+0x11d00>
   23418:	ldr	r1, [r5, #8]
   2341c:	ldr	r6, [r1, r4, lsl #2]
   23420:	ldr	r1, [r7]
   23424:	add	r2, r1, r6, lsl #3
   23428:	ldrb	r2, [r2, #4]
   2342c:	cmp	r2, #8
   23430:	bne	2349c <__assert_fail@plt+0x11d3c>
   23434:	ldr	r1, [r1, r6, lsl #3]
   23438:	cmp	r1, #31
   2343c:	bgt	2349c <__assert_fail@plt+0x11d3c>
   23440:	ldr	r2, [r7, #80]	; 0x50
   23444:	mov	r3, #1
   23448:	tst	r2, r3, lsl r1
   2344c:	beq	2349c <__assert_fail@plt+0x11d3c>
   23450:	ldr	r9, [sl, #124]	; 0x7c
   23454:	ldr	r0, [sl, #128]	; 0x80
   23458:	cmp	r9, r0
   2345c:	beq	233f4 <__assert_fail@plt+0x11c94>
   23460:	mov	r0, #1
   23464:	mov	r1, #24
   23468:	bl	2d24c <__assert_fail@plt+0x1baec>
   2346c:	ldr	r1, [sl, #124]	; 0x7c
   23470:	ldr	r2, [sl, #132]	; 0x84
   23474:	str	r0, [r2, r1, lsl #2]
   23478:	ldr	r0, [sl, #132]	; 0x84
   2347c:	ldr	r0, [r0, r1, lsl #2]
   23480:	cmp	r0, #0
   23484:	beq	234b4 <__assert_fail@plt+0x11d54>
   23488:	add	r1, r1, #1
   2348c:	str	r6, [r0, #4]
   23490:	str	r1, [sl, #124]	; 0x7c
   23494:	str	r8, [r0]
   23498:	ldr	r0, [r5, #4]
   2349c:	add	r4, r4, #1
   234a0:	cmp	r4, r0
   234a4:	blt	23418 <__assert_fail@plt+0x11cb8>
   234a8:	mov	r0, #0
   234ac:	sub	sp, fp, #28
   234b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234b4:	mov	r0, #12
   234b8:	sub	sp, fp, #28
   234bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234c4:	add	fp, sp, #28
   234c8:	sub	sp, sp, #76	; 0x4c
   234cc:	mov	r9, r0
   234d0:	ldr	r0, [r1, #4]
   234d4:	cmp	r0, #1
   234d8:	blt	23e9c <__assert_fail@plt+0x1273c>
   234dc:	ldr	r2, [r9, #84]	; 0x54
   234e0:	ldr	r5, [r9, #40]	; 0x28
   234e4:	mov	r3, #0
   234e8:	str	r9, [sp, #40]	; 0x28
   234ec:	str	r1, [sp, #16]
   234f0:	str	r5, [sp, #52]	; 0x34
   234f4:	str	r2, [sp, #20]
   234f8:	b	23540 <__assert_fail@plt+0x11de0>
   234fc:	ldr	r0, [r9, #88]	; 0x58
   23500:	and	r0, r0, #2
   23504:	eor	r1, r0, #10
   23508:	and	r0, r1, #1
   2350c:	tst	r6, #1024	; 0x400
   23510:	eor	r2, r0, #1
   23514:	bne	235d4 <__assert_fail@plt+0x11e74>
   23518:	b	2364c <__assert_fail@plt+0x11eec>
   2351c:	mov	r0, r4
   23520:	bl	1164c <iswalnum@plt>
   23524:	mov	r1, #1
   23528:	mov	r2, #0
   2352c:	cmp	r4, #95	; 0x5f
   23530:	beq	2364c <__assert_fail@plt+0x11eec>
   23534:	cmp	r0, #0
   23538:	beq	23624 <__assert_fail@plt+0x11ec4>
   2353c:	b	2364c <__assert_fail@plt+0x11eec>
   23540:	ldr	r0, [r1, #8]
   23544:	str	r3, [sp, #24]
   23548:	ldr	r3, [r0, r3, lsl #2]
   2354c:	ldr	r0, [r2]
   23550:	add	r7, r0, r3, lsl #3
   23554:	mov	r1, r3
   23558:	str	r3, [sp, #48]	; 0x30
   2355c:	ldr	r6, [r7, #4]!
   23560:	uxtb	r0, r6
   23564:	cmp	r0, #4
   23568:	bne	23e80 <__assert_fail@plt+0x12720>
   2356c:	movw	r0, #65280	; 0xff00
   23570:	movt	r0, #3
   23574:	tst	r6, r0
   23578:	beq	23680 <__assert_fail@plt+0x11f20>
   2357c:	cmn	r5, #1
   23580:	ble	235c0 <__assert_fail@plt+0x11e60>
   23584:	ldr	r0, [r9, #48]	; 0x30
   23588:	cmp	r0, r5
   2358c:	beq	234fc <__assert_fail@plt+0x11d9c>
   23590:	ldr	r0, [r9, #80]	; 0x50
   23594:	cmp	r0, #2
   23598:	blt	235e0 <__assert_fail@plt+0x11e80>
   2359c:	ldr	r0, [r9, #8]
   235a0:	mov	r1, r5
   235a4:	ldr	r4, [r0, r1, lsl #2]
   235a8:	cmn	r4, #1
   235ac:	bne	23618 <__assert_fail@plt+0x11eb8>
   235b0:	sub	r2, r1, #1
   235b4:	cmp	r1, #0
   235b8:	mov	r1, r2
   235bc:	bgt	235a4 <__assert_fail@plt+0x11e44>
   235c0:	ldr	r1, [r9, #60]	; 0x3c
   235c4:	and	r0, r1, #1
   235c8:	tst	r6, #1024	; 0x400
   235cc:	eor	r2, r0, #1
   235d0:	beq	2364c <__assert_fail@plt+0x11eec>
   235d4:	cmp	r0, #0
   235d8:	beq	23e80 <__assert_fail@plt+0x12720>
   235dc:	b	2364c <__assert_fail@plt+0x11eec>
   235e0:	ldr	r0, [r9, #4]
   235e4:	ldr	r1, [r9, #68]	; 0x44
   235e8:	ldrb	r0, [r0, r5]
   235ec:	ubfx	r2, r0, #5, #3
   235f0:	and	r4, r0, #31
   235f4:	ldr	r3, [r1, r2, lsl #2]
   235f8:	mov	r1, #1
   235fc:	mov	r2, #0
   23600:	tst	r3, r1, lsl r4
   23604:	bne	2364c <__assert_fail@plt+0x11eec>
   23608:	mov	r1, #0
   2360c:	cmp	r0, #10
   23610:	beq	23630 <__assert_fail@plt+0x11ed0>
   23614:	b	2363c <__assert_fail@plt+0x11edc>
   23618:	ldrb	r0, [r9, #78]	; 0x4e
   2361c:	cmp	r0, #0
   23620:	bne	2351c <__assert_fail@plt+0x11dbc>
   23624:	mov	r1, #0
   23628:	cmp	r4, #10
   2362c:	bne	2363c <__assert_fail@plt+0x11edc>
   23630:	ldrb	r1, [r9, #77]	; 0x4d
   23634:	cmp	r1, #0
   23638:	movwne	r1, #2
   2363c:	and	r0, r1, #1
   23640:	tst	r6, #1024	; 0x400
   23644:	eor	r2, r0, #1
   23648:	bne	235d4 <__assert_fail@plt+0x11e74>
   2364c:	ldr	r0, [r7]
   23650:	cmp	r2, #0
   23654:	bne	23660 <__assert_fail@plt+0x11f00>
   23658:	ands	r2, r0, #2048	; 0x800
   2365c:	bne	23e80 <__assert_fail@plt+0x12720>
   23660:	tst	r1, #2
   23664:	bne	23670 <__assert_fail@plt+0x11f10>
   23668:	ands	r2, r0, #8192	; 0x2000
   2366c:	bne	23e80 <__assert_fail@plt+0x12720>
   23670:	tst	r1, #8
   23674:	bne	23680 <__assert_fail@plt+0x11f20>
   23678:	ands	r0, r0, #32768	; 0x8000
   2367c:	bne	23e80 <__assert_fail@plt+0x12720>
   23680:	ldr	r2, [r9, #108]	; 0x6c
   23684:	ldr	r0, [r9, #84]	; 0x54
   23688:	ldr	ip, [r9, #4]
   2368c:	cmp	r2, #1
   23690:	str	r0, [sp, #28]
   23694:	str	r2, [sp, #12]
   23698:	blt	23728 <__assert_fail@plt+0x11fc8>
   2369c:	ldr	r1, [r9, #116]	; 0x74
   236a0:	mov	r0, #0
   236a4:	mov	r4, #1
   236a8:	add	r3, r2, r0
   236ac:	add	r3, r3, r3, lsr #31
   236b0:	asr	r7, r3, #1
   236b4:	add	r6, r7, r7, lsl #1
   236b8:	add	r6, r1, r6, lsl #3
   236bc:	ldr	r6, [r6, #4]
   236c0:	cmp	r6, r5
   236c4:	addlt	r0, r4, r3, asr #1
   236c8:	movge	r2, r7
   236cc:	cmp	r0, r2
   236d0:	blt	236a8 <__assert_fail@plt+0x11f48>
   236d4:	ldr	r1, [sp, #12]
   236d8:	ldr	r7, [sp, #28]
   236dc:	cmp	r0, r1
   236e0:	bge	2373c <__assert_fail@plt+0x11fdc>
   236e4:	cmn	r0, #1
   236e8:	beq	2373c <__assert_fail@plt+0x11fdc>
   236ec:	ldr	r1, [r9, #116]	; 0x74
   236f0:	add	r0, r0, r0, lsl #1
   236f4:	add	r0, r1, r0, lsl #3
   236f8:	ldr	r1, [r0, #4]
   236fc:	cmp	r1, r5
   23700:	bne	2373c <__assert_fail@plt+0x11fdc>
   23704:	ldr	r1, [r0]
   23708:	ldr	r2, [sp, #48]	; 0x30
   2370c:	cmp	r1, r2
   23710:	beq	23ba8 <__assert_fail@plt+0x12448>
   23714:	ldrb	r1, [r0, #20]
   23718:	add	r0, r0, #24
   2371c:	cmp	r1, #0
   23720:	bne	23704 <__assert_fail@plt+0x11fa4>
   23724:	b	2373c <__assert_fail@plt+0x11fdc>
   23728:	mov	r0, #0
   2372c:	ldr	r1, [sp, #12]
   23730:	ldr	r7, [sp, #28]
   23734:	cmp	r0, r1
   23738:	blt	236e4 <__assert_fail@plt+0x11f84>
   2373c:	ldr	r0, [r9, #124]	; 0x7c
   23740:	cmp	r0, #1
   23744:	blt	23ba8 <__assert_fail@plt+0x12448>
   23748:	ldr	r0, [r7]
   2374c:	ldr	r1, [sp, #48]	; 0x30
   23750:	mov	r2, #0
   23754:	ldr	r1, [r0, r1, lsl #3]
   23758:	str	r1, [sp, #36]	; 0x24
   2375c:	b	23764 <__assert_fail@plt+0x12004>
   23760:	ldr	r0, [r7]
   23764:	ldr	r1, [r9, #132]	; 0x84
   23768:	str	r2, [sp, #32]
   2376c:	ldr	lr, [r1, r2, lsl #2]
   23770:	ldr	r1, [lr, #4]
   23774:	ldr	r0, [r0, r1, lsl #3]
   23778:	ldr	r1, [sp, #36]	; 0x24
   2377c:	cmp	r0, r1
   23780:	bne	23b44 <__assert_fail@plt+0x123e4>
   23784:	ldr	r0, [lr, #16]
   23788:	ldr	r2, [lr]
   2378c:	mov	r8, #0
   23790:	str	lr, [sp, #44]	; 0x2c
   23794:	cmp	r0, #1
   23798:	blt	237a8 <__assert_fail@plt+0x12048>
   2379c:	ldr	r6, [sp, #52]	; 0x34
   237a0:	mov	r7, r2
   237a4:	b	23a98 <__assert_fail@plt+0x12338>
   237a8:	ldr	r6, [sp, #52]	; 0x34
   237ac:	ldr	r7, [sp, #28]
   237b0:	cmp	r8, r0
   237b4:	blt	23b40 <__assert_fail@plt+0x123e0>
   237b8:	ldr	r5, [sp, #52]	; 0x34
   237bc:	cmp	r8, #0
   237c0:	addne	r2, r2, #1
   237c4:	cmp	r2, r5
   237c8:	bgt	23b44 <__assert_fail@plt+0x123e4>
   237cc:	b	23968 <__assert_fail@plt+0x12208>
   237d0:	ldr	r0, [sp, #40]	; 0x28
   237d4:	cmn	r4, #1
   237d8:	beq	23a00 <__assert_fail@plt+0x122a0>
   237dc:	ldr	r1, [lr, #8]
   237e0:	str	r6, [fp, #-48]	; 0xffffffd0
   237e4:	mov	r6, ip
   237e8:	cmp	r1, #0
   237ec:	beq	23808 <__assert_fail@plt+0x120a8>
   237f0:	ldr	r3, [lr]
   237f4:	ldr	r2, [lr, #4]
   237f8:	mov	r7, #9
   237fc:	stm	sp, {r4, sl}
   23800:	str	r7, [sp, #8]
   23804:	b	2384c <__assert_fail@plt+0x120ec>
   23808:	ldr	r0, [lr]
   2380c:	add	r1, sl, #1
   23810:	mov	r9, #12
   23814:	sub	r1, r1, r0
   23818:	mov	r0, #12
   2381c:	bl	2d24c <__assert_fail@plt+0x1baec>
   23820:	ldr	r2, [sp, #44]	; 0x2c
   23824:	cmp	r0, #0
   23828:	str	r0, [r2, #8]
   2382c:	beq	23ea0 <__assert_fail@plt+0x12740>
   23830:	mov	r1, r0
   23834:	ldr	r3, [r2]
   23838:	ldr	r2, [r2, #4]
   2383c:	stm	sp, {r4, sl}
   23840:	mov	r0, #9
   23844:	str	r0, [sp, #8]
   23848:	ldr	r0, [sp, #40]	; 0x28
   2384c:	bl	247bc <__assert_fail@plt+0x1305c>
   23850:	mov	ip, r6
   23854:	ldr	lr, [sp, #44]	; 0x2c
   23858:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2385c:	ldr	r5, [sp, #52]	; 0x34
   23860:	mov	r9, r0
   23864:	cmp	r0, #1
   23868:	mov	r7, r8
   2386c:	beq	23a08 <__assert_fail@plt+0x122a8>
   23870:	cmp	r9, #0
   23874:	bne	23ea0 <__assert_fail@plt+0x12740>
   23878:	ldr	r1, [lr, #12]
   2387c:	ldr	r0, [lr, #16]
   23880:	ldr	r5, [sp, #52]	; 0x34
   23884:	cmp	r0, r1
   23888:	beq	2393c <__assert_fail@plt+0x121dc>
   2388c:	mov	r0, #1
   23890:	mov	r1, #20
   23894:	bl	2d24c <__assert_fail@plt+0x1baec>
   23898:	ldr	r6, [sp, #40]	; 0x28
   2389c:	cmp	r0, #0
   238a0:	beq	23eb8 <__assert_fail@plt+0x12758>
   238a4:	ldr	r1, [sp, #44]	; 0x2c
   238a8:	mov	r2, r0
   238ac:	ldr	r0, [r1, #16]
   238b0:	ldr	r3, [r1, #20]
   238b4:	str	r2, [r3, r0, lsl #2]
   238b8:	stm	r2, {r4, sl}
   238bc:	add	r0, r0, #1
   238c0:	ldr	r3, [sp, #48]	; 0x30
   238c4:	str	r0, [r1, #16]
   238c8:	mov	r0, r6
   238cc:	str	r5, [sp]
   238d0:	bl	245e8 <__assert_fail@plt+0x12e88>
   238d4:	cmp	r0, #1
   238d8:	bhi	23eb0 <__assert_fail@plt+0x12750>
   238dc:	ldr	ip, [r6, #4]
   238e0:	ldr	r7, [sp, #28]
   238e4:	ldr	lr, [sp, #44]	; 0x2c
   238e8:	ldr	r6, [fp, #-48]	; 0xffffffd0
   238ec:	ldr	r9, [sp, #40]	; 0x28
   238f0:	add	r2, sl, #1
   238f4:	cmp	sl, r5
   238f8:	blt	23968 <__assert_fail@plt+0x12208>
   238fc:	b	23b44 <__assert_fail@plt+0x123e4>
   23900:	ldr	r0, [r9, #48]	; 0x30
   23904:	cmp	r6, r0
   23908:	bge	23b44 <__assert_fail@plt+0x123e4>
   2390c:	add	r4, r6, #1
   23910:	mov	r0, r9
   23914:	mov	r8, r6
   23918:	mov	r1, r4
   2391c:	bl	23ef8 <__assert_fail@plt+0x12798>
   23920:	cmp	r0, #0
   23924:	bne	23eb0 <__assert_fail@plt+0x12750>
   23928:	ldr	ip, [r9, #4]
   2392c:	ldr	lr, [sp, #44]	; 0x2c
   23930:	mov	r6, r8
   23934:	mov	r1, r9
   23938:	b	23988 <__assert_fail@plt+0x12228>
   2393c:	mov	r1, #1
   23940:	mov	r7, lr
   23944:	orr	r6, r1, r0, lsl #1
   23948:	ldr	r0, [lr, #20]
   2394c:	lsl	r1, r6, #2
   23950:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   23954:	cmp	r0, #0
   23958:	beq	23eb8 <__assert_fail@plt+0x12758>
   2395c:	str	r6, [r7, #12]
   23960:	str	r0, [r7, #20]
   23964:	b	2388c <__assert_fail@plt+0x1212c>
   23968:	ldr	r0, [lr]
   2396c:	mov	sl, r2
   23970:	cmp	r2, r0
   23974:	ble	239a0 <__assert_fail@plt+0x12240>
   23978:	ldr	r0, [r9, #28]
   2397c:	cmp	r6, r0
   23980:	bge	23900 <__assert_fail@plt+0x121a0>
   23984:	add	r4, r6, #1
   23988:	add	r1, ip, sl
   2398c:	ldrb	r0, [ip, r6]
   23990:	ldrb	r1, [r1, #-1]
   23994:	cmp	r0, r1
   23998:	beq	239a4 <__assert_fail@plt+0x12244>
   2399c:	b	23b44 <__assert_fail@plt+0x123e4>
   239a0:	mov	r4, r6
   239a4:	ldr	r0, [r9, #100]	; 0x64
   239a8:	mov	r6, r4
   239ac:	ldr	r2, [r0, sl, lsl #2]
   239b0:	cmp	r2, #0
   239b4:	beq	23a08 <__assert_fail@plt+0x122a8>
   239b8:	ldr	r0, [r2, #8]
   239bc:	cmp	r0, #1
   239c0:	blt	23a08 <__assert_fail@plt+0x122a8>
   239c4:	ldr	r1, [r7]
   239c8:	ldr	r2, [r2, #12]
   239cc:	ldr	r5, [sp, #36]	; 0x24
   239d0:	mov	r8, r7
   239d4:	mov	r3, #0
   239d8:	ldr	r4, [r2, r3, lsl #2]
   239dc:	add	r7, r1, r4, lsl #3
   239e0:	ldrb	r7, [r7, #4]
   239e4:	cmp	r7, #9
   239e8:	ldreq	r7, [r1, r4, lsl #3]
   239ec:	cmpeq	r7, r5
   239f0:	beq	237d0 <__assert_fail@plt+0x12070>
   239f4:	add	r3, r3, #1
   239f8:	cmp	r3, r0
   239fc:	blt	239d8 <__assert_fail@plt+0x12278>
   23a00:	ldr	r5, [sp, #52]	; 0x34
   23a04:	mov	r7, r8
   23a08:	ldr	r9, [sp, #40]	; 0x28
   23a0c:	add	r2, sl, #1
   23a10:	cmp	sl, r5
   23a14:	blt	23968 <__assert_fail@plt+0x12208>
   23a18:	b	23b44 <__assert_fail@plt+0x123e4>
   23a1c:	ldr	r2, [r9, #48]	; 0x30
   23a20:	cmp	r5, r2
   23a24:	bgt	23b78 <__assert_fail@plt+0x12418>
   23a28:	ldr	r0, [r9, #36]	; 0x24
   23a2c:	ldr	r3, [r9, #104]	; 0x68
   23a30:	cmp	r0, r5
   23a34:	cmple	r0, r2
   23a38:	blt	23a48 <__assert_fail@plt+0x122e8>
   23a3c:	cmp	r1, r5
   23a40:	cmple	r1, r2
   23a44:	bge	23a64 <__assert_fail@plt+0x12304>
   23a48:	ldr	r0, [sp, #40]	; 0x28
   23a4c:	add	r1, r5, #1
   23a50:	mov	r9, r3
   23a54:	bl	23ef8 <__assert_fail@plt+0x12798>
   23a58:	mov	r3, r9
   23a5c:	cmp	r0, #0
   23a60:	bne	23eb0 <__assert_fail@plt+0x12750>
   23a64:	ldr	r9, [sp, #40]	; 0x28
   23a68:	cmp	r5, r3
   23a6c:	ble	23a90 <__assert_fail@plt+0x12330>
   23a70:	sub	r0, r5, r3
   23a74:	mov	r1, #0
   23a78:	lsl	r2, r0, #2
   23a7c:	ldr	r0, [r9, #100]	; 0x64
   23a80:	add	r0, r0, r3, lsl #2
   23a84:	add	r0, r0, #4
   23a88:	bl	11670 <memset@plt>
   23a8c:	str	r5, [r9, #104]	; 0x68
   23a90:	ldr	ip, [r9, #4]
   23a94:	b	23ac4 <__assert_fail@plt+0x12364>
   23a98:	ldr	r1, [lr, #20]
   23a9c:	ldr	sl, [r1, r8, lsl #2]
   23aa0:	ldr	r1, [sl, #4]
   23aa4:	sub	r4, r1, r7
   23aa8:	str	r1, [fp, #-48]	; 0xffffffd0
   23aac:	cmp	r4, #1
   23ab0:	blt	23ae4 <__assert_fail@plt+0x12384>
   23ab4:	ldr	r1, [r9, #28]
   23ab8:	add	r5, r4, r6
   23abc:	cmp	r5, r1
   23ac0:	bgt	23a1c <__assert_fail@plt+0x122bc>
   23ac4:	add	r0, ip, r6
   23ac8:	add	r1, ip, r7
   23acc:	mov	r2, r4
   23ad0:	mov	r5, ip
   23ad4:	bl	114d8 <memcmp@plt>
   23ad8:	ldr	lr, [sp, #44]	; 0x2c
   23adc:	cmp	r0, #0
   23ae0:	bne	23b5c <__assert_fail@plt+0x123fc>
   23ae4:	ldr	r0, [sp, #52]	; 0x34
   23ae8:	ldr	r3, [sp, #48]	; 0x30
   23aec:	mov	r1, lr
   23af0:	mov	r2, sl
   23af4:	mov	r5, lr
   23af8:	str	r0, [sp]
   23afc:	mov	r0, r9
   23b00:	bl	245e8 <__assert_fail@plt+0x12e88>
   23b04:	cmp	r0, #1
   23b08:	bhi	23eb0 <__assert_fail@plt+0x12750>
   23b0c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   23b10:	ldr	r0, [r5, #16]
   23b14:	ldr	ip, [r9, #4]
   23b18:	add	r8, r8, #1
   23b1c:	add	r6, r4, r6
   23b20:	mov	lr, r5
   23b24:	mov	r1, r9
   23b28:	cmp	r8, r0
   23b2c:	mov	r7, r2
   23b30:	blt	23a98 <__assert_fail@plt+0x12338>
   23b34:	ldr	r7, [sp, #28]
   23b38:	cmp	r8, r0
   23b3c:	bge	237b8 <__assert_fail@plt+0x12058>
   23b40:	ldr	r5, [sp, #52]	; 0x34
   23b44:	ldr	r2, [sp, #32]
   23b48:	ldr	r0, [r9, #124]	; 0x7c
   23b4c:	add	r2, r2, #1
   23b50:	cmp	r2, r0
   23b54:	blt	23760 <__assert_fail@plt+0x12000>
   23b58:	b	23b8c <__assert_fail@plt+0x1242c>
   23b5c:	ldr	r0, [lr, #16]
   23b60:	mov	ip, r5
   23b64:	mov	r2, r7
   23b68:	ldr	r7, [sp, #28]
   23b6c:	cmp	r8, r0
   23b70:	blt	23b40 <__assert_fail@plt+0x123e0>
   23b74:	b	237b8 <__assert_fail@plt+0x12058>
   23b78:	mov	r2, r7
   23b7c:	ldr	r7, [sp, #28]
   23b80:	cmp	r8, r0
   23b84:	blt	23b40 <__assert_fail@plt+0x123e0>
   23b88:	b	237b8 <__assert_fail@plt+0x12058>
   23b8c:	mov	r1, #0
   23b90:	ldr	r0, [r9, #108]	; 0x6c
   23b94:	str	r1, [fp, #-32]	; 0xffffffe0
   23b98:	ldr	r1, [sp, #12]
   23b9c:	cmp	r1, r0
   23ba0:	bge	23e80 <__assert_fail@plt+0x12720>
   23ba4:	b	23bf0 <__assert_fail@plt+0x12490>
   23ba8:	mov	r0, #0
   23bac:	str	r0, [fp, #-32]	; 0xffffffe0
   23bb0:	b	23e80 <__assert_fail@plt+0x12720>
   23bb4:	ldr	r0, [r3, #88]	; 0x58
   23bb8:	and	r0, r0, #2
   23bbc:	eor	sl, r0, #10
   23bc0:	b	23d24 <__assert_fail@plt+0x125c4>
   23bc4:	mov	r0, r4
   23bc8:	bl	1164c <iswalnum@plt>
   23bcc:	mov	sl, #1
   23bd0:	cmp	r4, #95	; 0x5f
   23bd4:	beq	23be8 <__assert_fail@plt+0x12488>
   23bd8:	ldr	r3, [sp, #40]	; 0x28
   23bdc:	cmp	r0, #0
   23be0:	beq	23d0c <__assert_fail@plt+0x125ac>
   23be4:	b	23d24 <__assert_fail@plt+0x125c4>
   23be8:	ldr	r3, [sp, #40]	; 0x28
   23bec:	b	23d24 <__assert_fail@plt+0x125c4>
   23bf0:	ldr	r0, [r9, #116]	; 0x74
   23bf4:	mov	r5, r1
   23bf8:	add	r1, r1, r1, lsl #1
   23bfc:	ldr	r3, [sp, #48]	; 0x30
   23c00:	ldr	r2, [r0, r1, lsl #3]
   23c04:	cmp	r2, r3
   23c08:	bne	23e64 <__assert_fail@plt+0x12704>
   23c0c:	add	r0, r0, r1, lsl #3
   23c10:	ldr	r2, [sp, #52]	; 0x34
   23c14:	ldr	r1, [r0, #4]
   23c18:	cmp	r1, r2
   23c1c:	bne	23e64 <__assert_fail@plt+0x12704>
   23c20:	ldr	r2, [r0, #8]
   23c24:	ldr	r6, [r0, #12]
   23c28:	ldr	r0, [sp, #20]
   23c2c:	ldr	r8, [r0, #24]
   23c30:	cmp	r6, r2
   23c34:	bne	23c50 <__assert_fail@plt+0x124f0>
   23c38:	ldr	r1, [sp, #48]	; 0x30
   23c3c:	ldr	r0, [r0, #20]
   23c40:	add	r1, r1, r1, lsl #1
   23c44:	add	r0, r0, r1, lsl #2
   23c48:	ldr	r0, [r0, #8]
   23c4c:	b	23c5c <__assert_fail@plt+0x124fc>
   23c50:	ldr	r0, [r0, #12]
   23c54:	ldr	r1, [sp, #48]	; 0x30
   23c58:	add	r0, r0, r1, lsl #2
   23c5c:	ldr	r9, [r0]
   23c60:	ldr	r0, [sp, #52]	; 0x34
   23c64:	str	r2, [fp, #-48]	; 0xffffffd0
   23c68:	add	r0, r6, r0
   23c6c:	sub	r7, r0, r2
   23c70:	cmp	r7, #0
   23c74:	ble	23cbc <__assert_fail@plt+0x1255c>
   23c78:	ldr	r3, [sp, #40]	; 0x28
   23c7c:	sub	r0, r7, #1
   23c80:	ldr	r1, [r3, #48]	; 0x30
   23c84:	cmp	r1, r0
   23c88:	beq	23bb4 <__assert_fail@plt+0x12454>
   23c8c:	ldr	r1, [r3, #80]	; 0x50
   23c90:	cmp	r1, #2
   23c94:	blt	23cc8 <__assert_fail@plt+0x12568>
   23c98:	ldr	r0, [r3, #8]
   23c9c:	mov	r1, r7
   23ca0:	sub	r0, r0, #4
   23ca4:	ldr	r4, [r0, r1, lsl #2]
   23ca8:	cmn	r4, #1
   23cac:	bne	23cfc <__assert_fail@plt+0x1259c>
   23cb0:	sub	r1, r1, #1
   23cb4:	cmp	r1, #0
   23cb8:	bgt	23ca4 <__assert_fail@plt+0x12544>
   23cbc:	ldr	r3, [sp, #40]	; 0x28
   23cc0:	ldr	sl, [r3, #60]	; 0x3c
   23cc4:	b	23d24 <__assert_fail@plt+0x125c4>
   23cc8:	ldr	r1, [r3, #4]
   23ccc:	ldr	r2, [r3, #68]	; 0x44
   23cd0:	mov	sl, #1
   23cd4:	ldrb	r0, [r1, r0]
   23cd8:	ubfx	r1, r0, #5, #3
   23cdc:	ldr	r1, [r2, r1, lsl #2]
   23ce0:	and	r2, r0, #31
   23ce4:	tst	r1, sl, lsl r2
   23ce8:	bne	23d24 <__assert_fail@plt+0x125c4>
   23cec:	mov	sl, #0
   23cf0:	cmp	r0, #10
   23cf4:	beq	23d18 <__assert_fail@plt+0x125b8>
   23cf8:	b	23d24 <__assert_fail@plt+0x125c4>
   23cfc:	ldr	r3, [sp, #40]	; 0x28
   23d00:	ldrb	r0, [r3, #78]	; 0x4e
   23d04:	cmp	r0, #0
   23d08:	bne	23bc4 <__assert_fail@plt+0x12464>
   23d0c:	mov	sl, #0
   23d10:	cmp	r4, #10
   23d14:	bne	23d24 <__assert_fail@plt+0x125c4>
   23d18:	ldrb	sl, [r3, #77]	; 0x4d
   23d1c:	cmp	sl, #0
   23d20:	movwne	sl, #2
   23d24:	ldr	r0, [r3, #100]	; 0x64
   23d28:	ldr	r2, [sp, #52]	; 0x34
   23d2c:	add	r1, r9, r9, lsl #1
   23d30:	mov	r4, r3
   23d34:	add	r8, r8, r1, lsl #2
   23d38:	ldr	r2, [r0, r2, lsl #2]
   23d3c:	ldr	r0, [r0, r7, lsl #2]
   23d40:	cmp	r2, #0
   23d44:	ldrne	r2, [r2, #8]
   23d48:	moveq	r2, #0
   23d4c:	cmp	r0, #0
   23d50:	str	r2, [sp, #44]	; 0x2c
   23d54:	beq	23dc0 <__assert_fail@plt+0x12660>
   23d58:	ldr	r1, [r0, #40]	; 0x28
   23d5c:	sub	r4, fp, #44	; 0x2c
   23d60:	mov	r2, r8
   23d64:	mov	r0, r4
   23d68:	bl	2435c <__assert_fail@plt+0x12bfc>
   23d6c:	cmp	r0, #0
   23d70:	str	r0, [fp, #-32]	; 0xffffffe0
   23d74:	bne	23ec0 <__assert_fail@plt+0x12760>
   23d78:	ldr	r1, [sp, #20]
   23d7c:	sub	r0, fp, #32
   23d80:	mov	r2, r4
   23d84:	mov	r3, sl
   23d88:	bl	21b1c <__assert_fail@plt+0x103bc>
   23d8c:	ldr	r4, [sp, #40]	; 0x28
   23d90:	ldr	r1, [r4, #100]	; 0x64
   23d94:	str	r0, [r1, r7, lsl #2]
   23d98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23d9c:	bl	14538 <__assert_fail@plt+0x2dd8>
   23da0:	ldr	r0, [r4, #100]	; 0x64
   23da4:	ldr	r1, [r0, r7, lsl #2]
   23da8:	cmp	r1, #0
   23dac:	bne	23e08 <__assert_fail@plt+0x126a8>
   23db0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   23db4:	cmp	r9, #0
   23db8:	beq	23e08 <__assert_fail@plt+0x126a8>
   23dbc:	b	23ea4 <__assert_fail@plt+0x12744>
   23dc0:	ldr	r1, [sp, #20]
   23dc4:	sub	r0, fp, #32
   23dc8:	mov	r2, r8
   23dcc:	mov	r3, sl
   23dd0:	bl	21b1c <__assert_fail@plt+0x103bc>
   23dd4:	ldr	r1, [r4, #100]	; 0x64
   23dd8:	str	r0, [r1, r7, lsl #2]
   23ddc:	ldr	r0, [r4, #100]	; 0x64
   23de0:	ldr	r1, [r0, r7, lsl #2]
   23de4:	cmp	r1, #0
   23de8:	bne	23e08 <__assert_fail@plt+0x126a8>
   23dec:	ldr	r9, [fp, #-32]	; 0xffffffe0
   23df0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23df4:	cmp	r9, #0
   23df8:	bne	23ea4 <__assert_fail@plt+0x12744>
   23dfc:	cmp	r6, r1
   23e00:	bne	23e64 <__assert_fail@plt+0x12704>
   23e04:	b	23e14 <__assert_fail@plt+0x126b4>
   23e08:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23e0c:	cmp	r6, r1
   23e10:	bne	23e64 <__assert_fail@plt+0x12704>
   23e14:	ldr	r1, [sp, #52]	; 0x34
   23e18:	ldr	r0, [r0, r1, lsl #2]
   23e1c:	ldr	r1, [sp, #44]	; 0x2c
   23e20:	ldr	r0, [r0, #8]
   23e24:	cmp	r0, r1
   23e28:	ble	23e64 <__assert_fail@plt+0x12704>
   23e2c:	ldr	r4, [sp, #40]	; 0x28
   23e30:	ldr	r2, [sp, #52]	; 0x34
   23e34:	mov	r1, r8
   23e38:	mov	r0, r4
   23e3c:	bl	233c4 <__assert_fail@plt+0x11c64>
   23e40:	cmp	r0, #0
   23e44:	str	r0, [fp, #-32]	; 0xffffffe0
   23e48:	bne	23ed8 <__assert_fail@plt+0x12778>
   23e4c:	mov	r0, r4
   23e50:	mov	r1, r8
   23e54:	bl	234c0 <__assert_fail@plt+0x11d60>
   23e58:	cmp	r0, #0
   23e5c:	str	r0, [fp, #-32]	; 0xffffffe0
   23e60:	bne	23ee8 <__assert_fail@plt+0x12788>
   23e64:	ldr	r9, [sp, #40]	; 0x28
   23e68:	mov	r1, r5
   23e6c:	add	r1, r5, #1
   23e70:	ldr	r5, [sp, #52]	; 0x34
   23e74:	ldr	r0, [r9, #108]	; 0x6c
   23e78:	cmp	r1, r0
   23e7c:	blt	23bf0 <__assert_fail@plt+0x12490>
   23e80:	ldr	r1, [sp, #16]
   23e84:	ldr	r3, [sp, #24]
   23e88:	ldr	r2, [sp, #20]
   23e8c:	ldr	r0, [r1, #4]
   23e90:	add	r3, r3, #1
   23e94:	cmp	r3, r0
   23e98:	blt	23540 <__assert_fail@plt+0x11de0>
   23e9c:	mov	r9, #0
   23ea0:	str	r9, [fp, #-32]	; 0xffffffe0
   23ea4:	mov	r0, r9
   23ea8:	sub	sp, fp, #28
   23eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23eb0:	mov	r9, r0
   23eb4:	b	23ea0 <__assert_fail@plt+0x12740>
   23eb8:	mov	r9, #12
   23ebc:	b	23ea0 <__assert_fail@plt+0x12740>
   23ec0:	mov	r9, r0
   23ec4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23ec8:	bl	14538 <__assert_fail@plt+0x2dd8>
   23ecc:	mov	r0, r9
   23ed0:	sub	sp, fp, #28
   23ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ed8:	mov	r9, r0
   23edc:	mov	r0, r9
   23ee0:	sub	sp, fp, #28
   23ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ee8:	mov	r9, r0
   23eec:	mov	r0, r9
   23ef0:	sub	sp, fp, #28
   23ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ef8:	push	{r4, r5, r6, r7, fp, lr}
   23efc:	add	fp, sp, #16
   23f00:	mov	r4, r0
   23f04:	ldr	r0, [r0, #36]	; 0x24
   23f08:	mov	r5, #12
   23f0c:	cmn	r0, #-536870910	; 0xe0000002
   23f10:	bhi	24100 <__assert_fail@plt+0x129a0>
   23f14:	ldr	r6, [r4, #48]	; 0x30
   23f18:	ldr	r2, [r4, #80]	; 0x50
   23f1c:	cmp	r6, r0, lsl #1
   23f20:	lslge	r6, r0, #1
   23f24:	cmp	r6, r1
   23f28:	movle	r6, r1
   23f2c:	cmp	r2, #2
   23f30:	blt	23f78 <__assert_fail@plt+0x12818>
   23f34:	cmn	r6, #-1073741823	; 0xc0000001
   23f38:	bhi	24100 <__assert_fail@plt+0x129a0>
   23f3c:	ldr	r0, [r4, #8]
   23f40:	lsl	r7, r6, #2
   23f44:	mov	r1, r7
   23f48:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   23f4c:	cmp	r0, #0
   23f50:	beq	24100 <__assert_fail@plt+0x129a0>
   23f54:	str	r0, [r4, #8]
   23f58:	ldr	r0, [r4, #12]
   23f5c:	cmp	r0, #0
   23f60:	beq	23f78 <__assert_fail@plt+0x12818>
   23f64:	mov	r1, r7
   23f68:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   23f6c:	cmp	r0, #0
   23f70:	beq	24100 <__assert_fail@plt+0x129a0>
   23f74:	str	r0, [r4, #12]
   23f78:	ldrb	r0, [r4, #75]	; 0x4b
   23f7c:	cmp	r0, #0
   23f80:	beq	23f9c <__assert_fail@plt+0x1283c>
   23f84:	ldr	r0, [r4, #4]
   23f88:	mov	r1, r6
   23f8c:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   23f90:	cmp	r0, #0
   23f94:	beq	24100 <__assert_fail@plt+0x129a0>
   23f98:	str	r0, [r4, #4]
   23f9c:	str	r6, [r4, #36]	; 0x24
   23fa0:	ldr	r0, [r4, #100]	; 0x64
   23fa4:	cmp	r0, #0
   23fa8:	beq	23fc4 <__assert_fail@plt+0x12864>
   23fac:	mov	r1, #4
   23fb0:	add	r1, r1, r6, lsl #2
   23fb4:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   23fb8:	cmp	r0, #0
   23fbc:	beq	24100 <__assert_fail@plt+0x129a0>
   23fc0:	str	r0, [r4, #100]	; 0x64
   23fc4:	ldrb	r1, [r4, #72]	; 0x48
   23fc8:	ldr	r0, [r4, #80]	; 0x50
   23fcc:	cmp	r1, #0
   23fd0:	beq	23ff0 <__assert_fail@plt+0x12890>
   23fd4:	cmp	r0, #2
   23fd8:	blt	24004 <__assert_fail@plt+0x128a4>
   23fdc:	mov	r0, r4
   23fe0:	bl	1bad0 <__assert_fail@plt+0xa370>
   23fe4:	cmp	r0, #0
   23fe8:	popne	{r4, r5, r6, r7, fp, pc}
   23fec:	b	240fc <__assert_fail@plt+0x1299c>
   23ff0:	cmp	r0, #2
   23ff4:	blt	2407c <__assert_fail@plt+0x1291c>
   23ff8:	mov	r0, r4
   23ffc:	bl	1c190 <__assert_fail@plt+0xaa30>
   24000:	b	240fc <__assert_fail@plt+0x1299c>
   24004:	ldr	r6, [r4, #36]	; 0x24
   24008:	ldr	r0, [r4, #48]	; 0x30
   2400c:	ldr	r5, [r4, #28]
   24010:	cmp	r6, r0
   24014:	movgt	r6, r0
   24018:	cmp	r5, r6
   2401c:	bge	24070 <__assert_fail@plt+0x12910>
   24020:	ldr	r1, [r4]
   24024:	ldr	r2, [r4, #24]
   24028:	ldr	r0, [r4, #64]	; 0x40
   2402c:	add	r1, r1, r2
   24030:	cmp	r0, #0
   24034:	ldrb	r7, [r1, r5]
   24038:	ldrbne	r7, [r0, r7]
   2403c:	add	r0, r7, #128	; 0x80
   24040:	lsr	r0, r0, #7
   24044:	cmp	r0, #2
   24048:	bhi	24058 <__assert_fail@plt+0x128f8>
   2404c:	bl	115ec <__ctype_toupper_loc@plt>
   24050:	ldr	r0, [r0]
   24054:	ldr	r7, [r0, r7, lsl #2]
   24058:	ldr	r0, [r4, #4]
   2405c:	strb	r7, [r0, r5]
   24060:	add	r5, r5, #1
   24064:	cmp	r5, r6
   24068:	blt	24020 <__assert_fail@plt+0x128c0>
   2406c:	mov	r5, r6
   24070:	str	r5, [r4, #28]
   24074:	str	r5, [r4, #32]
   24078:	b	240fc <__assert_fail@plt+0x1299c>
   2407c:	ldr	r2, [r4, #64]	; 0x40
   24080:	cmp	r2, #0
   24084:	beq	240fc <__assert_fail@plt+0x1299c>
   24088:	ldr	r0, [r4, #36]	; 0x24
   2408c:	ldr	r3, [r4, #48]	; 0x30
   24090:	ldr	r1, [r4, #28]
   24094:	cmp	r0, r3
   24098:	movgt	r0, r3
   2409c:	cmp	r1, r0
   240a0:	bge	240f4 <__assert_fail@plt+0x12994>
   240a4:	ldm	r4, {r3, r7}
   240a8:	ldr	r6, [r4, #24]
   240ac:	add	r6, r6, r1
   240b0:	ldrb	r3, [r3, r6]
   240b4:	ldrb	r2, [r2, r3]
   240b8:	strb	r2, [r7, r1]
   240bc:	add	r1, r1, #1
   240c0:	cmp	r1, r0
   240c4:	bge	240f0 <__assert_fail@plt+0x12990>
   240c8:	ldm	r4, {r2, r3}
   240cc:	ldr	r7, [r4, #24]
   240d0:	ldr	r6, [r4, #64]	; 0x40
   240d4:	add	r2, r2, r7
   240d8:	ldrb	r2, [r2, r1]
   240dc:	ldrb	r2, [r6, r2]
   240e0:	strb	r2, [r3, r1]
   240e4:	add	r1, r1, #1
   240e8:	cmp	r1, r0
   240ec:	blt	240c8 <__assert_fail@plt+0x12968>
   240f0:	mov	r1, r0
   240f4:	str	r1, [r4, #28]
   240f8:	str	r1, [r4, #32]
   240fc:	mov	r5, #0
   24100:	mov	r0, r5
   24104:	pop	{r4, r5, r6, r7, fp, pc}
   24108:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2410c:	add	fp, sp, #24
   24110:	sub	sp, sp, #16
   24114:	mov	r9, r0
   24118:	mov	r4, r1
   2411c:	ldr	r5, [r1, #40]	; 0x28
   24120:	ldr	r7, [r1, #84]	; 0x54
   24124:	ldr	r0, [r1, #100]	; 0x64
   24128:	ldr	r1, [r1, #104]	; 0x68
   2412c:	mov	r6, r2
   24130:	cmp	r5, r1
   24134:	ble	24154 <__assert_fail@plt+0x129f4>
   24138:	str	r6, [r0, r5, lsl #2]
   2413c:	str	r5, [r4, #104]	; 0x68
   24140:	cmp	r6, #0
   24144:	ldrne	r0, [r7, #76]	; 0x4c
   24148:	cmpne	r0, #0
   2414c:	beq	242a8 <__assert_fail@plt+0x12b48>
   24150:	b	242b4 <__assert_fail@plt+0x12b54>
   24154:	ldr	r1, [r0, r5, lsl #2]
   24158:	cmp	r1, #0
   2415c:	beq	241d8 <__assert_fail@plt+0x12a78>
   24160:	ldr	r2, [r1, #40]	; 0x28
   24164:	cmp	r6, #0
   24168:	beq	24224 <__assert_fail@plt+0x12ac4>
   2416c:	ldr	r8, [r6, #40]	; 0x28
   24170:	mov	r0, sp
   24174:	mov	r1, r8
   24178:	bl	2435c <__assert_fail@plt+0x12bfc>
   2417c:	cmp	r0, #0
   24180:	str	r0, [r9]
   24184:	bne	2432c <__assert_fail@plt+0x12bcc>
   24188:	ldr	r0, [r4, #40]	; 0x28
   2418c:	cmp	r0, #0
   24190:	ble	241d0 <__assert_fail@plt+0x12a70>
   24194:	ldr	r2, [r4, #48]	; 0x30
   24198:	sub	r1, r0, #1
   2419c:	cmp	r2, r1
   241a0:	beq	2431c <__assert_fail@plt+0x12bbc>
   241a4:	ldr	r2, [r4, #80]	; 0x50
   241a8:	cmp	r2, #2
   241ac:	blt	241f0 <__assert_fail@plt+0x12a90>
   241b0:	ldr	r1, [r4, #8]
   241b4:	sub	r1, r1, #4
   241b8:	ldr	r6, [r1, r0, lsl #2]
   241bc:	cmn	r6, #1
   241c0:	bne	24248 <__assert_fail@plt+0x12ae8>
   241c4:	sub	r0, r0, #1
   241c8:	cmp	r0, #0
   241cc:	bgt	241b8 <__assert_fail@plt+0x12a58>
   241d0:	ldr	r3, [r4, #60]	; 0x3c
   241d4:	b	2426c <__assert_fail@plt+0x12b0c>
   241d8:	str	r6, [r0, r5, lsl #2]
   241dc:	cmp	r6, #0
   241e0:	ldrne	r0, [r7, #76]	; 0x4c
   241e4:	cmpne	r0, #0
   241e8:	beq	242a8 <__assert_fail@plt+0x12b48>
   241ec:	b	242b4 <__assert_fail@plt+0x12b54>
   241f0:	ldr	r0, [r4, #4]
   241f4:	ldr	r2, [r4, #68]	; 0x44
   241f8:	mov	r3, #1
   241fc:	ldrb	r0, [r0, r1]
   24200:	ubfx	r1, r0, #5, #3
   24204:	ldr	r1, [r2, r1, lsl #2]
   24208:	and	r2, r0, #31
   2420c:	tst	r1, r3, lsl r2
   24210:	bne	2426c <__assert_fail@plt+0x12b0c>
   24214:	mov	r3, #0
   24218:	cmp	r0, #10
   2421c:	beq	24260 <__assert_fail@plt+0x12b00>
   24220:	b	2426c <__assert_fail@plt+0x12b0c>
   24224:	ldr	r0, [r2, #8]
   24228:	vldr	d16, [r2]
   2422c:	mov	r8, #0
   24230:	str	r0, [sp, #8]
   24234:	mov	r0, r5
   24238:	vstr	d16, [sp]
   2423c:	cmp	r0, #0
   24240:	bgt	24194 <__assert_fail@plt+0x12a34>
   24244:	b	241d0 <__assert_fail@plt+0x12a70>
   24248:	ldrb	r0, [r4, #78]	; 0x4e
   2424c:	cmp	r0, #0
   24250:	bne	2433c <__assert_fail@plt+0x12bdc>
   24254:	mov	r3, #0
   24258:	cmp	r6, #10
   2425c:	bne	2426c <__assert_fail@plt+0x12b0c>
   24260:	ldrb	r3, [r4, #77]	; 0x4d
   24264:	cmp	r3, #0
   24268:	movwne	r3, #2
   2426c:	mov	r2, sp
   24270:	mov	r0, r9
   24274:	mov	r1, r7
   24278:	bl	21b1c <__assert_fail@plt+0x103bc>
   2427c:	mov	r6, r0
   24280:	ldr	r0, [r4, #100]	; 0x64
   24284:	cmp	r8, #0
   24288:	str	r6, [r0, r5, lsl #2]
   2428c:	beq	24298 <__assert_fail@plt+0x12b38>
   24290:	ldr	r0, [sp, #8]
   24294:	bl	14538 <__assert_fail@plt+0x2dd8>
   24298:	cmp	r6, #0
   2429c:	ldrne	r0, [r7, #76]	; 0x4c
   242a0:	cmpne	r0, #0
   242a4:	bne	242b4 <__assert_fail@plt+0x12b54>
   242a8:	mov	r0, r6
   242ac:	sub	sp, fp, #24
   242b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   242b4:	add	r7, r6, #4
   242b8:	mov	r0, r4
   242bc:	mov	r2, r5
   242c0:	mov	r1, r7
   242c4:	bl	233c4 <__assert_fail@plt+0x11c64>
   242c8:	cmp	r0, #0
   242cc:	str	r0, [r9]
   242d0:	bne	2430c <__assert_fail@plt+0x12bac>
   242d4:	ldrb	r0, [r6, #52]	; 0x34
   242d8:	tst	r0, #64	; 0x40
   242dc:	beq	242a8 <__assert_fail@plt+0x12b48>
   242e0:	mov	r0, r4
   242e4:	mov	r1, r7
   242e8:	bl	234c0 <__assert_fail@plt+0x11d60>
   242ec:	str	r0, [r9]
   242f0:	cmp	r0, #0
   242f4:	mov	r6, #0
   242f8:	ldreq	r0, [r4, #100]	; 0x64
   242fc:	ldreq	r6, [r0, r5, lsl #2]
   24300:	mov	r0, r6
   24304:	sub	sp, fp, #24
   24308:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2430c:	mov	r6, #0
   24310:	mov	r0, r6
   24314:	sub	sp, fp, #24
   24318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2431c:	ldr	r0, [r4, #88]	; 0x58
   24320:	and	r0, r0, #2
   24324:	eor	r3, r0, #10
   24328:	b	2426c <__assert_fail@plt+0x12b0c>
   2432c:	mov	r6, #0
   24330:	mov	r0, r6
   24334:	sub	sp, fp, #24
   24338:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2433c:	mov	r0, r6
   24340:	bl	1164c <iswalnum@plt>
   24344:	mov	r3, #1
   24348:	cmp	r6, #95	; 0x5f
   2434c:	beq	2426c <__assert_fail@plt+0x12b0c>
   24350:	cmp	r0, #0
   24354:	beq	24254 <__assert_fail@plt+0x12af4>
   24358:	b	2426c <__assert_fail@plt+0x12b0c>
   2435c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24360:	add	fp, sp, #28
   24364:	sub	sp, sp, #20
   24368:	mov	sl, r2
   2436c:	cmp	r1, #0
   24370:	str	r0, [sp, #16]
   24374:	beq	243dc <__assert_fail@plt+0x12c7c>
   24378:	ldr	r0, [r1, #4]
   2437c:	mov	r8, r1
   24380:	cmp	sl, #0
   24384:	beq	24398 <__assert_fail@plt+0x12c38>
   24388:	cmp	r0, #1
   2438c:	ldrge	r1, [sl, #4]
   24390:	cmpge	r1, #1
   24394:	bge	24458 <__assert_fail@plt+0x12cf8>
   24398:	cmp	r0, #1
   2439c:	blt	243dc <__assert_fail@plt+0x12c7c>
   243a0:	ldr	r1, [sp, #16]
   243a4:	str	r0, [r1, #4]
   243a8:	ldr	r1, [r8, #4]
   243ac:	cmp	r1, #1
   243b0:	blt	2443c <__assert_fail@plt+0x12cdc>
   243b4:	ldr	r4, [sp, #16]
   243b8:	str	r0, [r4]
   243bc:	lsl	r0, r0, #2
   243c0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   243c4:	cmp	r0, #0
   243c8:	str	r0, [r4, #8]
   243cc:	beq	245cc <__assert_fail@plt+0x12e6c>
   243d0:	ldr	r2, [r8, #4]
   243d4:	ldr	r1, [r8, #8]
   243d8:	b	24428 <__assert_fail@plt+0x12cc8>
   243dc:	cmp	sl, #0
   243e0:	beq	2443c <__assert_fail@plt+0x12cdc>
   243e4:	ldr	r0, [sl, #4]
   243e8:	cmp	r0, #1
   243ec:	blt	2443c <__assert_fail@plt+0x12cdc>
   243f0:	ldr	r1, [sp, #16]
   243f4:	str	r0, [r1, #4]
   243f8:	ldr	r1, [sl, #4]
   243fc:	cmp	r1, #1
   24400:	blt	2443c <__assert_fail@plt+0x12cdc>
   24404:	ldr	r4, [sp, #16]
   24408:	str	r0, [r4]
   2440c:	lsl	r0, r0, #2
   24410:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   24414:	cmp	r0, #0
   24418:	str	r0, [r4, #8]
   2441c:	beq	245cc <__assert_fail@plt+0x12e6c>
   24420:	ldr	r2, [sl, #4]
   24424:	ldr	r1, [sl, #8]
   24428:	lsl	r2, r2, #2
   2442c:	bl	11484 <memcpy@plt>
   24430:	mov	r0, #0
   24434:	sub	sp, fp, #28
   24438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2443c:	ldr	r1, [sp, #16]
   24440:	mov	r0, #0
   24444:	str	r0, [r1]
   24448:	str	r0, [r1, #4]
   2444c:	str	r0, [r1, #8]
   24450:	sub	sp, fp, #28
   24454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24458:	ldr	r4, [sp, #16]
   2445c:	add	r0, r1, r0
   24460:	str	r0, [r4]
   24464:	lsl	r0, r0, #2
   24468:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2446c:	cmp	r0, #0
   24470:	str	r0, [r4, #8]
   24474:	beq	245dc <__assert_fail@plt+0x12e7c>
   24478:	ldr	r9, [sl, #4]
   2447c:	ldr	lr, [r8, #4]
   24480:	mov	r1, #0
   24484:	mov	r7, #0
   24488:	cmp	r9, #0
   2448c:	movwgt	r1, #1
   24490:	cmp	lr, #1
   24494:	blt	24560 <__assert_fail@plt+0x12e00>
   24498:	mov	r2, #0
   2449c:	mov	ip, #0
   244a0:	str	r2, [sp, #8]
   244a4:	mov	r2, #0
   244a8:	str	r2, [sp, #12]
   244ac:	mov	r2, #0
   244b0:	ldr	r4, [sp, #12]
   244b4:	mov	r7, ip
   244b8:	tst	r1, #1
   244bc:	beq	24590 <__assert_fail@plt+0x12e30>
   244c0:	ldr	r1, [sl, #8]
   244c4:	ldr	r5, [r1, r7, lsl #2]
   244c8:	ldr	r1, [r8, #8]
   244cc:	ldr	r3, [r1, r2, lsl #2]
   244d0:	cmp	r3, r5
   244d4:	ble	244fc <__assert_fail@plt+0x12d9c>
   244d8:	add	r7, r7, #1
   244dc:	mov	r1, #0
   244e0:	str	r5, [r0, r4, lsl #2]
   244e4:	add	r4, r4, #1
   244e8:	cmp	r9, r7
   244ec:	movwgt	r1, #1
   244f0:	cmp	lr, r2
   244f4:	bgt	244b8 <__assert_fail@plt+0x12d58>
   244f8:	b	24564 <__assert_fail@plt+0x12e04>
   244fc:	str	r3, [r0, r4, lsl #2]
   24500:	ldr	r6, [sp, #8]
   24504:	add	r1, r7, #1
   24508:	mov	ip, r7
   2450c:	add	r2, r2, #1
   24510:	ldr	r9, [sl, #4]
   24514:	ldr	lr, [r8, #4]
   24518:	moveq	ip, r1
   2451c:	str	r1, [sp, #4]
   24520:	mov	r1, #0
   24524:	sub	r6, r6, #1
   24528:	cmp	r9, ip
   2452c:	str	r6, [sp, #8]
   24530:	add	r6, r4, #1
   24534:	movwgt	r1, #1
   24538:	cmp	lr, r2
   2453c:	str	r6, [sp, #12]
   24540:	bgt	244b0 <__assert_fail@plt+0x12d50>
   24544:	ldr	r2, [sp, #4]
   24548:	cmp	r3, r5
   2454c:	add	r4, r4, #1
   24550:	moveq	r7, r2
   24554:	cmp	r1, #0
   24558:	bne	2456c <__assert_fail@plt+0x12e0c>
   2455c:	b	245b8 <__assert_fail@plt+0x12e58>
   24560:	mov	r4, #0
   24564:	cmp	r1, #0
   24568:	beq	245b8 <__assert_fail@plt+0x12e58>
   2456c:	ldr	r1, [sl, #8]
   24570:	sub	r2, r9, r7
   24574:	add	r0, r0, r4, lsl #2
   24578:	lsl	r2, r2, #2
   2457c:	add	r1, r1, r7, lsl #2
   24580:	bl	11484 <memcpy@plt>
   24584:	sub	r0, r4, r7
   24588:	add	r4, r0, r9
   2458c:	b	245b8 <__assert_fail@plt+0x12e58>
   24590:	ldr	r1, [r8, #8]
   24594:	add	r0, r0, r4, lsl #2
   24598:	add	r1, r1, r2, lsl #2
   2459c:	sub	r2, lr, r2
   245a0:	lsl	r2, r2, #2
   245a4:	bl	11484 <memcpy@plt>
   245a8:	ldr	r0, [r8, #4]
   245ac:	ldr	r1, [sp, #8]
   245b0:	add	r0, r0, r1
   245b4:	add	r4, r0, r4
   245b8:	ldr	r0, [sp, #16]
   245bc:	str	r4, [r0, #4]
   245c0:	mov	r0, #0
   245c4:	sub	sp, fp, #28
   245c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245cc:	ldr	r1, [sp, #16]
   245d0:	mov	r0, #0
   245d4:	str	r0, [r1]
   245d8:	str	r0, [r1, #4]
   245dc:	mov	r0, #12
   245e0:	sub	sp, fp, #28
   245e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245ec:	add	fp, sp, #28
   245f0:	sub	sp, sp, #12
   245f4:	mov	r6, r2
   245f8:	mov	r7, r3
   245fc:	ldr	r2, [r2]
   24600:	ldr	r9, [fp, #8]
   24604:	mov	r4, r0
   24608:	mov	r0, #8
   2460c:	mov	r8, r1
   24610:	ldr	r3, [r6, #4]
   24614:	str	r0, [sp, #8]
   24618:	add	r1, r6, #8
   2461c:	mov	r0, r4
   24620:	stm	sp, {r7, r9}
   24624:	bl	247bc <__assert_fail@plt+0x1305c>
   24628:	mov	r5, r0
   2462c:	cmp	r0, #0
   24630:	beq	24640 <__assert_fail@plt+0x12ee0>
   24634:	mov	r0, r5
   24638:	sub	sp, fp, #28
   2463c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24640:	ldr	r0, [r4, #108]	; 0x6c
   24644:	ldr	r1, [r4, #112]	; 0x70
   24648:	ldr	sl, [r6, #4]
   2464c:	ldr	r5, [r8]
   24650:	cmp	r0, r1
   24654:	blt	246a4 <__assert_fail@plt+0x12f44>
   24658:	ldr	r0, [r4, #116]	; 0x74
   2465c:	add	r1, r1, r1, lsl #1
   24660:	lsl	r1, r1, #4
   24664:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   24668:	cmp	r0, #0
   2466c:	beq	247a4 <__assert_fail@plt+0x13044>
   24670:	str	r0, [r4, #116]	; 0x74
   24674:	ldr	r1, [r4, #108]	; 0x6c
   24678:	ldr	r2, [r4, #112]	; 0x70
   2467c:	add	r1, r1, r1, lsl #1
   24680:	add	r0, r0, r1, lsl #3
   24684:	add	r1, r2, r2, lsl #1
   24688:	lsl	r2, r1, #3
   2468c:	mov	r1, #0
   24690:	bl	11670 <memset@plt>
   24694:	ldr	r1, [r4, #112]	; 0x70
   24698:	ldr	r0, [r4, #108]	; 0x6c
   2469c:	lsl	r1, r1, #1
   246a0:	str	r1, [r4, #112]	; 0x70
   246a4:	ldr	r1, [r4, #116]	; 0x74
   246a8:	cmp	r0, #1
   246ac:	blt	246cc <__assert_fail@plt+0x12f6c>
   246b0:	sub	r2, r0, #1
   246b4:	add	r2, r2, r2, lsl #1
   246b8:	add	r2, r1, r2, lsl #3
   246bc:	ldr	r3, [r2, #4]
   246c0:	cmp	r3, r9
   246c4:	moveq	r3, #1
   246c8:	strbeq	r3, [r2, #20]
   246cc:	add	r2, r0, r0, lsl #1
   246d0:	cmp	sl, r5
   246d4:	mov	r3, #0
   246d8:	add	r0, r0, #1
   246dc:	str	r7, [r1, r2, lsl #3]!
   246e0:	mov	r2, #0
   246e4:	mvneq	r3, #0
   246e8:	str	r9, [r1, #4]
   246ec:	str	r5, [r1, #8]
   246f0:	str	sl, [r1, #12]
   246f4:	str	r3, [r1, #16]
   246f8:	str	r0, [r4, #108]	; 0x6c
   246fc:	strb	r2, [r1, #20]
   24700:	sub	r0, sl, r5
   24704:	ldr	r1, [r4, #120]	; 0x78
   24708:	cmp	r1, r0
   2470c:	strlt	r0, [r4, #120]	; 0x78
   24710:	ldr	r0, [r6, #4]
   24714:	ldr	r1, [r8]
   24718:	ldr	r7, [r4, #104]	; 0x68
   2471c:	add	r0, r0, r9
   24720:	sub	r6, r0, r1
   24724:	ldr	r0, [r4, #36]	; 0x24
   24728:	cmp	r0, r6
   2472c:	ldrle	r1, [r4, #48]	; 0x30
   24730:	cmple	r0, r1
   24734:	blt	24788 <__assert_fail@plt+0x13028>
   24738:	ldr	r0, [r4, #28]
   2473c:	cmp	r0, r6
   24740:	ldrle	r1, [r4, #48]	; 0x30
   24744:	cmple	r0, r1
   24748:	blt	24788 <__assert_fail@plt+0x13028>
   2474c:	mov	r5, #0
   24750:	cmp	r6, r7
   24754:	ble	24634 <__assert_fail@plt+0x12ed4>
   24758:	sub	r0, r6, r7
   2475c:	mov	r1, #0
   24760:	mov	r5, #0
   24764:	lsl	r2, r0, #2
   24768:	ldr	r0, [r4, #100]	; 0x64
   2476c:	add	r0, r0, r7, lsl #2
   24770:	add	r0, r0, #4
   24774:	bl	11670 <memset@plt>
   24778:	str	r6, [r4, #104]	; 0x68
   2477c:	mov	r0, r5
   24780:	sub	sp, fp, #28
   24784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24788:	add	r1, r6, #1
   2478c:	mov	r0, r4
   24790:	bl	23ef8 <__assert_fail@plt+0x12798>
   24794:	mov	r5, r0
   24798:	cmp	r0, #0
   2479c:	bne	24634 <__assert_fail@plt+0x12ed4>
   247a0:	b	2474c <__assert_fail@plt+0x12fec>
   247a4:	ldr	r0, [r4, #116]	; 0x74
   247a8:	bl	14538 <__assert_fail@plt+0x2dd8>
   247ac:	mov	r5, #12
   247b0:	mov	r0, r5
   247b4:	sub	sp, fp, #28
   247b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247c0:	add	fp, sp, #28
   247c4:	sub	sp, sp, #84	; 0x54
   247c8:	ldr	sl, [r0, #84]	; 0x54
   247cc:	mov	r8, r2
   247d0:	mov	r2, #0
   247d4:	mov	r9, r3
   247d8:	ldr	r3, [fp, #12]
   247dc:	str	r0, [sp, #40]	; 0x28
   247e0:	str	r2, [fp, #-52]	; 0xffffffcc
   247e4:	ldr	r5, [r1, #4]
   247e8:	ldr	r2, [sl]
   247ec:	str	sl, [sp, #20]
   247f0:	ldr	r2, [r2, r8, lsl #3]
   247f4:	str	r2, [sp, #24]
   247f8:	ldr	r2, [r0, #120]	; 0x78
   247fc:	add	r2, r2, r3
   24800:	cmp	r5, r2
   24804:	ble	25108 <__assert_fail@plt+0x139a8>
   24808:	add	r4, r1, #8
   2480c:	ldr	r2, [r0, #40]	; 0x28
   24810:	ldr	r5, [r1]
   24814:	ldr	r3, [r0, #88]	; 0x58
   24818:	str	r1, [sp, #16]
   2481c:	str	r2, [sp, #12]
   24820:	ldr	r2, [r0, #100]	; 0x64
   24824:	cmp	r5, #0
   24828:	moveq	r5, r9
   2482c:	cmp	r5, #0
   24830:	str	r2, [sp, #8]
   24834:	ldr	r2, [r4]
   24838:	str	r2, [r0, #100]	; 0x64
   2483c:	str	r5, [r0, #40]	; 0x28
   24840:	ble	24884 <__assert_fail@plt+0x13124>
   24844:	ldr	r2, [r0, #48]	; 0x30
   24848:	sub	r7, r5, #1
   2484c:	cmp	r2, r7
   24850:	beq	25178 <__assert_fail@plt+0x13a18>
   24854:	ldr	r2, [r0, #80]	; 0x50
   24858:	cmp	r2, #2
   2485c:	blt	248c8 <__assert_fail@plt+0x13168>
   24860:	ldr	r2, [r0, #8]
   24864:	mov	r3, r5
   24868:	sub	r2, r2, #4
   2486c:	ldr	r6, [r2, r3, lsl #2]
   24870:	cmn	r6, #1
   24874:	bne	248fc <__assert_fail@plt+0x1319c>
   24878:	sub	r3, r3, #1
   2487c:	cmp	r3, #0
   24880:	bgt	2486c <__assert_fail@plt+0x1310c>
   24884:	ldr	r7, [r0, #60]	; 0x3c
   24888:	cmp	r5, r9
   2488c:	beq	2492c <__assert_fail@plt+0x131cc>
   24890:	ldr	r0, [sp, #40]	; 0x28
   24894:	ldr	r0, [r0, #100]	; 0x64
   24898:	ldr	r4, [r0, r5, lsl #2]
   2489c:	cmp	r4, #0
   248a0:	beq	249e8 <__assert_fail@plt+0x13288>
   248a4:	ldrb	r0, [r4, #52]	; 0x34
   248a8:	ldr	r8, [fp, #16]
   248ac:	tst	r0, #64	; 0x40
   248b0:	bne	24a00 <__assert_fail@plt+0x132a0>
   248b4:	mov	r0, #0
   248b8:	str	r0, [sp, #52]	; 0x34
   248bc:	str	r0, [sp, #48]	; 0x30
   248c0:	str	r0, [sp, #56]	; 0x38
   248c4:	b	24a4c <__assert_fail@plt+0x132ec>
   248c8:	ldr	r3, [r0, #4]
   248cc:	ldr	r2, [r0, #68]	; 0x44
   248d0:	ldrb	r0, [r3, r7]
   248d4:	mov	r7, #1
   248d8:	ubfx	r1, r0, #5, #3
   248dc:	ldr	r1, [r2, r1, lsl #2]
   248e0:	and	r2, r0, #31
   248e4:	tst	r1, r7, lsl r2
   248e8:	bne	24924 <__assert_fail@plt+0x131c4>
   248ec:	mov	r7, #0
   248f0:	cmp	r0, #10
   248f4:	beq	24914 <__assert_fail@plt+0x131b4>
   248f8:	b	24924 <__assert_fail@plt+0x131c4>
   248fc:	ldrb	r0, [r0, #78]	; 0x4e
   24900:	cmp	r0, #0
   24904:	bne	251c4 <__assert_fail@plt+0x13a64>
   24908:	mov	r7, #0
   2490c:	cmp	r6, #10
   24910:	bne	24924 <__assert_fail@plt+0x131c4>
   24914:	ldr	r0, [sp, #40]	; 0x28
   24918:	ldrb	r7, [r0, #77]	; 0x4d
   2491c:	cmp	r7, #0
   24920:	movwne	r7, #2
   24924:	cmp	r5, r9
   24928:	bne	24890 <__assert_fail@plt+0x13130>
   2492c:	mov	r0, #1
   24930:	str	r0, [sp, #52]	; 0x34
   24934:	str	r0, [sp, #48]	; 0x30
   24938:	mov	r0, #4
   2493c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   24940:	cmp	r0, #0
   24944:	str	r0, [sp, #56]	; 0x38
   24948:	beq	251a4 <__assert_fail@plt+0x13a44>
   2494c:	str	r8, [r0]
   24950:	ldr	r8, [fp, #16]
   24954:	ldr	r2, [sp, #24]
   24958:	mov	r0, #0
   2495c:	add	r1, sp, #48	; 0x30
   24960:	str	r0, [fp, #-52]	; 0xffffffcc
   24964:	mov	r0, sl
   24968:	mov	r3, r8
   2496c:	bl	251e4 <__assert_fail@plt+0x13a84>
   24970:	cmp	r0, #0
   24974:	str	r0, [fp, #-52]	; 0xffffffcc
   24978:	bne	2518c <__assert_fail@plt+0x13a2c>
   2497c:	ldr	r0, [sp, #52]	; 0x34
   24980:	cmp	r0, #0
   24984:	beq	249ac <__assert_fail@plt+0x1324c>
   24988:	ldr	r0, [sp, #40]	; 0x28
   2498c:	ldr	r3, [sp, #24]
   24990:	add	r1, sp, #48	; 0x30
   24994:	mov	r2, r5
   24998:	str	r8, [sp]
   2499c:	bl	25330 <__assert_fail@plt+0x13bd0>
   249a0:	cmp	r0, #0
   249a4:	str	r0, [fp, #-52]	; 0xffffffcc
   249a8:	bne	2518c <__assert_fail@plt+0x13a2c>
   249ac:	ldr	r1, [sp, #20]
   249b0:	sub	r0, fp, #52	; 0x34
   249b4:	add	r2, sp, #48	; 0x30
   249b8:	mov	r3, r7
   249bc:	bl	21b1c <__assert_fail@plt+0x103bc>
   249c0:	mov	r4, r0
   249c4:	cmp	r0, #0
   249c8:	bne	249d8 <__assert_fail@plt+0x13278>
   249cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   249d0:	cmp	r0, #0
   249d4:	bne	250f0 <__assert_fail@plt+0x13990>
   249d8:	ldr	r0, [sp, #40]	; 0x28
   249dc:	ldr	r0, [r0, #100]	; 0x64
   249e0:	str	r4, [r0, r5, lsl #2]
   249e4:	b	24a4c <__assert_fail@plt+0x132ec>
   249e8:	ldr	r8, [fp, #16]
   249ec:	mov	r4, #0
   249f0:	str	r4, [sp, #52]	; 0x34
   249f4:	str	r4, [sp, #48]	; 0x30
   249f8:	str	r4, [sp, #56]	; 0x38
   249fc:	b	24a4c <__assert_fail@plt+0x132ec>
   24a00:	ldr	r0, [r4, #8]
   24a04:	cmp	r0, #1
   24a08:	str	r0, [sp, #52]	; 0x34
   24a0c:	blt	2509c <__assert_fail@plt+0x1393c>
   24a10:	str	r0, [sp, #48]	; 0x30
   24a14:	lsl	r0, r0, #2
   24a18:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   24a1c:	cmp	r0, #0
   24a20:	str	r0, [sp, #56]	; 0x38
   24a24:	beq	251a4 <__assert_fail@plt+0x13a44>
   24a28:	ldr	r2, [r4, #8]
   24a2c:	ldr	r1, [r4, #12]
   24a30:	lsl	r2, r2, #2
   24a34:	bl	11484 <memcpy@plt>
   24a38:	ldrb	r0, [r4, #52]	; 0x34
   24a3c:	mov	r1, #0
   24a40:	str	r1, [fp, #-52]	; 0xffffffcc
   24a44:	tst	r0, #64	; 0x40
   24a48:	bne	24988 <__assert_fail@plt+0x13228>
   24a4c:	str	r4, [sp, #36]	; 0x24
   24a50:	ldr	r4, [fp, #12]
   24a54:	mov	r9, r4
   24a58:	cmp	r5, r4
   24a5c:	bge	24fe4 <__assert_fail@plt+0x13884>
   24a60:	ldr	r7, [sp, #40]	; 0x28
   24a64:	ldr	r4, [sp, #20]
   24a68:	ldr	sl, [sp, #24]
   24a6c:	mov	r0, #0
   24a70:	str	r0, [sp, #32]
   24a74:	ldr	r0, [r7, #120]	; 0x78
   24a78:	ldr	r1, [sp, #32]
   24a7c:	cmp	r1, r0
   24a80:	bgt	24fe8 <__assert_fail@plt+0x13888>
   24a84:	mov	r0, #0
   24a88:	add	r1, r5, #1
   24a8c:	str	r0, [sp, #52]	; 0x34
   24a90:	str	r1, [sp, #28]
   24a94:	ldr	r0, [r7, #100]	; 0x64
   24a98:	ldr	r0, [r0, r1, lsl #2]
   24a9c:	cmp	r0, #0
   24aa0:	beq	24abc <__assert_fail@plt+0x1335c>
   24aa4:	add	r1, r0, #4
   24aa8:	add	r0, sp, #48	; 0x30
   24aac:	bl	2182c <__assert_fail@plt+0x100cc>
   24ab0:	cmp	r0, #0
   24ab4:	str	r0, [fp, #-52]	; 0xffffffcc
   24ab8:	bne	250f0 <__assert_fail@plt+0x13990>
   24abc:	ldr	r1, [sp, #36]	; 0x24
   24ac0:	cmp	r1, #0
   24ac4:	beq	24e58 <__assert_fail@plt+0x136f8>
   24ac8:	mov	r0, #0
   24acc:	ldr	r8, [r7, #84]	; 0x54
   24ad0:	str	r0, [fp, #-32]	; 0xffffffe0
   24ad4:	str	r0, [fp, #-44]	; 0xffffffd4
   24ad8:	str	r0, [fp, #-48]	; 0xffffffd0
   24adc:	str	r0, [fp, #-40]	; 0xffffffd8
   24ae0:	ldr	r1, [r1, #20]
   24ae4:	cmp	r1, #1
   24ae8:	blt	24e48 <__assert_fail@plt+0x136e8>
   24aec:	str	r5, [sp, #44]	; 0x2c
   24af0:	ldr	r5, [sp, #36]	; 0x24
   24af4:	mov	r4, #0
   24af8:	b	24cb4 <__assert_fail@plt+0x13554>
   24afc:	mov	r0, #1
   24b00:	str	r0, [sp, #52]	; 0x34
   24b04:	str	r0, [sp, #48]	; 0x30
   24b08:	mov	r0, #4
   24b0c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   24b10:	cmp	r0, #0
   24b14:	str	r0, [sp, #56]	; 0x38
   24b18:	beq	250b4 <__assert_fail@plt+0x13954>
   24b1c:	str	r6, [r0]
   24b20:	ldr	r0, [r5, #20]
   24b24:	add	r4, r4, #1
   24b28:	cmp	r4, r0
   24b2c:	blt	24cb4 <__assert_fail@plt+0x13554>
   24b30:	b	24e30 <__assert_fail@plt+0x136d0>
   24b34:	cmp	r2, r1
   24b38:	bne	24ba4 <__assert_fail@plt+0x13444>
   24b3c:	lsl	r0, r2, #1
   24b40:	lsl	r1, r2, #3
   24b44:	str	r0, [sp, #48]	; 0x30
   24b48:	ldr	r0, [sp, #56]	; 0x38
   24b4c:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   24b50:	cmp	r0, #0
   24b54:	beq	250c0 <__assert_fail@plt+0x13960>
   24b58:	str	r0, [sp, #56]	; 0x38
   24b5c:	ldr	r1, [sp, #52]	; 0x34
   24b60:	ldr	r2, [r0]
   24b64:	cmp	r2, r6
   24b68:	ble	24bb4 <__assert_fail@plt+0x13454>
   24b6c:	cmp	r1, #1
   24b70:	blt	24be4 <__assert_fail@plt+0x13484>
   24b74:	add	r2, r0, r1, lsl #2
   24b78:	add	r1, r1, #1
   24b7c:	mov	r3, r2
   24b80:	ldr	r7, [r3, #-4]!
   24b84:	sub	r1, r1, #1
   24b88:	cmp	r1, #1
   24b8c:	str	r7, [r2]
   24b90:	mov	r2, r3
   24b94:	bgt	24b80 <__assert_fail@plt+0x13420>
   24b98:	ldr	r7, [sp, #40]	; 0x28
   24b9c:	sub	r1, r1, #1
   24ba0:	b	24be4 <__assert_fail@plt+0x13484>
   24ba4:	ldr	r0, [sp, #56]	; 0x38
   24ba8:	ldr	r2, [r0]
   24bac:	cmp	r2, r6
   24bb0:	bgt	24b6c <__assert_fail@plt+0x1340c>
   24bb4:	add	r2, r0, r1, lsl #2
   24bb8:	ldr	r3, [r2, #-4]
   24bbc:	cmp	r3, r6
   24bc0:	ble	24be4 <__assert_fail@plt+0x13484>
   24bc4:	sub	r1, r1, #2
   24bc8:	str	r3, [r2]
   24bcc:	sub	r1, r1, #1
   24bd0:	ldr	r3, [r2, #-8]
   24bd4:	sub	r2, r2, #4
   24bd8:	cmp	r3, r6
   24bdc:	bgt	24bc8 <__assert_fail@plt+0x13468>
   24be0:	add	r1, r1, #2
   24be4:	str	r6, [r0, r1, lsl #2]
   24be8:	b	24e14 <__assert_fail@plt+0x136b4>
   24bec:	cmp	r2, r1
   24bf0:	bne	24c5c <__assert_fail@plt+0x134fc>
   24bf4:	lsl	r0, r2, #1
   24bf8:	lsl	r1, r2, #3
   24bfc:	str	r0, [fp, #-48]	; 0xffffffd0
   24c00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24c04:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   24c08:	cmp	r0, #0
   24c0c:	beq	250c0 <__assert_fail@plt+0x13960>
   24c10:	str	r0, [fp, #-40]	; 0xffffffd8
   24c14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24c18:	ldr	r2, [r0]
   24c1c:	cmp	r2, r5
   24c20:	bgt	24c6c <__assert_fail@plt+0x1350c>
   24c24:	add	r2, r0, r1, lsl #2
   24c28:	ldr	r7, [sp, #40]	; 0x28
   24c2c:	ldr	r3, [r2, #-4]
   24c30:	cmp	r3, r5
   24c34:	ble	24ca0 <__assert_fail@plt+0x13540>
   24c38:	sub	r1, r1, #2
   24c3c:	str	r3, [r2]
   24c40:	sub	r1, r1, #1
   24c44:	ldr	r3, [r2, #-8]
   24c48:	sub	r2, r2, #4
   24c4c:	cmp	r3, r5
   24c50:	bgt	24c3c <__assert_fail@plt+0x134dc>
   24c54:	add	r1, r1, #2
   24c58:	b	24ca0 <__assert_fail@plt+0x13540>
   24c5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24c60:	ldr	r2, [r0]
   24c64:	cmp	r2, r5
   24c68:	ble	24c24 <__assert_fail@plt+0x134c4>
   24c6c:	cmp	r1, #1
   24c70:	blt	24c9c <__assert_fail@plt+0x1353c>
   24c74:	add	r2, r0, r1, lsl #2
   24c78:	add	r1, r1, #1
   24c7c:	mov	r3, r2
   24c80:	ldr	r7, [r3, #-4]!
   24c84:	sub	r1, r1, #1
   24c88:	cmp	r1, #1
   24c8c:	str	r7, [r2]
   24c90:	mov	r2, r3
   24c94:	bgt	24c80 <__assert_fail@plt+0x13520>
   24c98:	sub	r1, r1, #1
   24c9c:	ldr	r7, [sp, #40]	; 0x28
   24ca0:	str	r5, [r0, r1, lsl #2]
   24ca4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   24ca8:	add	r0, r0, #1
   24cac:	str	r0, [fp, #-44]	; 0xffffffd4
   24cb0:	b	24d8c <__assert_fail@plt+0x1362c>
   24cb4:	ldr	r0, [r5, #24]
   24cb8:	ldr	sl, [r0, r4, lsl #2]
   24cbc:	ldr	r0, [r8]
   24cc0:	add	r1, r0, sl, lsl #3
   24cc4:	ldrb	r1, [r1, #6]
   24cc8:	tst	r1, #16
   24ccc:	beq	24dd4 <__assert_fail@plt+0x13674>
   24cd0:	ldr	r5, [sp, #44]	; 0x2c
   24cd4:	mov	r0, r8
   24cd8:	mov	r1, sl
   24cdc:	mov	r2, r7
   24ce0:	mov	r3, r5
   24ce4:	bl	25c70 <__assert_fail@plt+0x14510>
   24ce8:	mov	r9, r0
   24cec:	cmp	r0, #2
   24cf0:	blt	24dc0 <__assert_fail@plt+0x13660>
   24cf4:	ldr	r0, [sp, #40]	; 0x28
   24cf8:	ldr	r1, [r8, #12]
   24cfc:	add	r6, r9, r5
   24d00:	ldr	r0, [r0, #100]	; 0x64
   24d04:	ldr	r5, [r1, sl, lsl #2]
   24d08:	mov	r1, #0
   24d0c:	ldr	r0, [r0, r6, lsl #2]
   24d10:	str	r1, [fp, #-44]	; 0xffffffd4
   24d14:	cmp	r0, #0
   24d18:	beq	24d34 <__assert_fail@plt+0x135d4>
   24d1c:	add	r1, r0, #4
   24d20:	sub	r0, fp, #48	; 0x30
   24d24:	bl	2182c <__assert_fail@plt+0x100cc>
   24d28:	cmp	r0, #0
   24d2c:	str	r0, [fp, #-32]	; 0xffffffe0
   24d30:	bne	250c8 <__assert_fail@plt+0x13968>
   24d34:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24d38:	cmp	r2, #0
   24d3c:	beq	24d64 <__assert_fail@plt+0x13604>
   24d40:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24d44:	cmp	r1, #0
   24d48:	bne	24bec <__assert_fail@plt+0x1348c>
   24d4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24d50:	str	r5, [r0]
   24d54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   24d58:	add	r0, r0, #1
   24d5c:	str	r0, [fp, #-44]	; 0xffffffd4
   24d60:	b	24d88 <__assert_fail@plt+0x13628>
   24d64:	mov	r0, #1
   24d68:	str	r0, [fp, #-44]	; 0xffffffd4
   24d6c:	str	r0, [fp, #-48]	; 0xffffffd0
   24d70:	mov	r0, #4
   24d74:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   24d78:	cmp	r0, #0
   24d7c:	str	r0, [fp, #-40]	; 0xffffffd8
   24d80:	beq	250d8 <__assert_fail@plt+0x13978>
   24d84:	str	r5, [r0]
   24d88:	ldr	r7, [sp, #40]	; 0x28
   24d8c:	sub	r0, fp, #32
   24d90:	mov	r1, r8
   24d94:	sub	r2, fp, #48	; 0x30
   24d98:	bl	259d0 <__assert_fail@plt+0x14270>
   24d9c:	ldr	r1, [r7, #100]	; 0x64
   24da0:	str	r0, [r1, r6, lsl #2]
   24da4:	ldr	r0, [r7, #100]	; 0x64
   24da8:	ldr	r0, [r0, r6, lsl #2]
   24dac:	cmp	r0, #0
   24db0:	bne	24dc0 <__assert_fail@plt+0x13660>
   24db4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   24db8:	cmp	r7, #0
   24dbc:	bne	250cc <__assert_fail@plt+0x1396c>
   24dc0:	ldr	r7, [sp, #40]	; 0x28
   24dc4:	ldr	r5, [sp, #36]	; 0x24
   24dc8:	cmp	r9, #0
   24dcc:	bne	24dec <__assert_fail@plt+0x1368c>
   24dd0:	ldr	r0, [r8]
   24dd4:	ldr	r2, [sp, #44]	; 0x2c
   24dd8:	add	r1, r0, sl, lsl #3
   24ddc:	mov	r0, r7
   24de0:	bl	25f88 <__assert_fail@plt+0x14828>
   24de4:	cmp	r0, #0
   24de8:	beq	24e20 <__assert_fail@plt+0x136c0>
   24dec:	ldr	r0, [r8, #12]
   24df0:	ldr	r2, [sp, #48]	; 0x30
   24df4:	ldr	r6, [r0, sl, lsl #2]
   24df8:	cmp	r2, #0
   24dfc:	beq	24afc <__assert_fail@plt+0x1339c>
   24e00:	ldr	r1, [sp, #52]	; 0x34
   24e04:	cmp	r1, #0
   24e08:	bne	24b34 <__assert_fail@plt+0x133d4>
   24e0c:	ldr	r0, [sp, #56]	; 0x38
   24e10:	str	r6, [r0]
   24e14:	ldr	r0, [sp, #52]	; 0x34
   24e18:	add	r0, r0, #1
   24e1c:	str	r0, [sp, #52]	; 0x34
   24e20:	ldr	r0, [r5, #20]
   24e24:	add	r4, r4, #1
   24e28:	cmp	r4, r0
   24e2c:	blt	24cb4 <__assert_fail@plt+0x13554>
   24e30:	ldr	r4, [fp, #12]
   24e34:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24e38:	ldr	sl, [sp, #24]
   24e3c:	ldr	r5, [sp, #44]	; 0x2c
   24e40:	mov	r9, r4
   24e44:	ldr	r4, [sp, #20]
   24e48:	bl	14538 <__assert_fail@plt+0x2dd8>
   24e4c:	ldr	r8, [fp, #16]
   24e50:	mov	r0, #0
   24e54:	str	r0, [fp, #-52]	; 0xffffffcc
   24e58:	ldr	r0, [sp, #52]	; 0x34
   24e5c:	cmp	r0, #0
   24e60:	beq	24eac <__assert_fail@plt+0x1374c>
   24e64:	add	r6, sp, #48	; 0x30
   24e68:	mov	r0, r4
   24e6c:	mov	r2, sl
   24e70:	mov	r3, r8
   24e74:	mov	r1, r6
   24e78:	bl	251e4 <__assert_fail@plt+0x13a84>
   24e7c:	cmp	r0, #0
   24e80:	str	r0, [fp, #-52]	; 0xffffffcc
   24e84:	bne	250f0 <__assert_fail@plt+0x13990>
   24e88:	ldr	r2, [sp, #28]
   24e8c:	mov	r0, r7
   24e90:	mov	r1, r6
   24e94:	mov	r3, sl
   24e98:	str	r8, [sp]
   24e9c:	bl	25330 <__assert_fail@plt+0x13bd0>
   24ea0:	cmp	r0, #0
   24ea4:	str	r0, [fp, #-52]	; 0xffffffcc
   24ea8:	bne	250f0 <__assert_fail@plt+0x13990>
   24eac:	cmn	r5, #1
   24eb0:	ble	24eec <__assert_fail@plt+0x1378c>
   24eb4:	ldr	r0, [r7, #48]	; 0x30
   24eb8:	cmp	r0, r5
   24ebc:	beq	24fb0 <__assert_fail@plt+0x13850>
   24ec0:	ldr	r0, [r7, #80]	; 0x50
   24ec4:	cmp	r0, #2
   24ec8:	blt	24ef8 <__assert_fail@plt+0x13798>
   24ecc:	ldr	r0, [r7, #8]
   24ed0:	ldr	r6, [r0, r5, lsl #2]
   24ed4:	cmn	r6, #1
   24ed8:	bne	24f30 <__assert_fail@plt+0x137d0>
   24edc:	sub	r1, r5, #1
   24ee0:	cmp	r5, #0
   24ee4:	mov	r5, r1
   24ee8:	bgt	24ed0 <__assert_fail@plt+0x13770>
   24eec:	ldr	r3, [r7, #60]	; 0x3c
   24ef0:	add	r5, sp, #48	; 0x30
   24ef4:	b	24f58 <__assert_fail@plt+0x137f8>
   24ef8:	ldr	r0, [r7, #4]
   24efc:	ldr	r1, [r7, #68]	; 0x44
   24f00:	mov	r3, #1
   24f04:	ldrb	r0, [r0, r5]
   24f08:	add	r5, sp, #48	; 0x30
   24f0c:	ubfx	r2, r0, #5, #3
   24f10:	ldr	r1, [r1, r2, lsl #2]
   24f14:	and	r2, r0, #31
   24f18:	tst	r1, r3, lsl r2
   24f1c:	bne	24f58 <__assert_fail@plt+0x137f8>
   24f20:	mov	r3, #0
   24f24:	cmp	r0, #10
   24f28:	beq	24f4c <__assert_fail@plt+0x137ec>
   24f2c:	b	24f58 <__assert_fail@plt+0x137f8>
   24f30:	ldrb	r0, [r7, #78]	; 0x4e
   24f34:	add	r5, sp, #48	; 0x30
   24f38:	cmp	r0, #0
   24f3c:	bne	24fc4 <__assert_fail@plt+0x13864>
   24f40:	mov	r3, #0
   24f44:	cmp	r6, #10
   24f48:	bne	24f58 <__assert_fail@plt+0x137f8>
   24f4c:	ldrb	r3, [r7, #77]	; 0x4d
   24f50:	cmp	r3, #0
   24f54:	movwne	r3, #2
   24f58:	sub	r0, fp, #52	; 0x34
   24f5c:	mov	r1, r4
   24f60:	mov	r2, r5
   24f64:	bl	21b1c <__assert_fail@plt+0x103bc>
   24f68:	cmp	r0, #0
   24f6c:	str	r0, [sp, #36]	; 0x24
   24f70:	bne	24f80 <__assert_fail@plt+0x13820>
   24f74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24f78:	cmp	r0, #0
   24f7c:	bne	250f0 <__assert_fail@plt+0x13990>
   24f80:	ldr	r1, [sp, #28]
   24f84:	ldr	r2, [sp, #36]	; 0x24
   24f88:	ldr	r0, [r7, #100]	; 0x64
   24f8c:	str	r2, [r0, r1, lsl #2]
   24f90:	cmp	r2, #0
   24f94:	ldr	r2, [sp, #32]
   24f98:	mov	r0, #0
   24f9c:	mov	r5, r1
   24fa0:	addeq	r0, r2, #1
   24fa4:	cmp	r1, r9
   24fa8:	blt	24a70 <__assert_fail@plt+0x13310>
   24fac:	b	24fec <__assert_fail@plt+0x1388c>
   24fb0:	ldr	r0, [r7, #88]	; 0x58
   24fb4:	add	r5, sp, #48	; 0x30
   24fb8:	and	r0, r0, #2
   24fbc:	eor	r3, r0, #10
   24fc0:	b	24f58 <__assert_fail@plt+0x137f8>
   24fc4:	mov	r0, r6
   24fc8:	bl	1164c <iswalnum@plt>
   24fcc:	mov	r3, #1
   24fd0:	cmp	r6, #95	; 0x5f
   24fd4:	beq	24f58 <__assert_fail@plt+0x137f8>
   24fd8:	cmp	r0, #0
   24fdc:	beq	24f40 <__assert_fail@plt+0x137e0>
   24fe0:	b	24f58 <__assert_fail@plt+0x137f8>
   24fe4:	ldr	r7, [sp, #40]	; 0x28
   24fe8:	mov	r1, r5
   24fec:	ldr	r0, [sp, #56]	; 0x38
   24ff0:	mov	r4, r1
   24ff4:	bl	14538 <__assert_fail@plt+0x2dd8>
   24ff8:	ldr	r0, [r7, #100]	; 0x64
   24ffc:	mov	sl, #1
   25000:	ldr	r1, [r0, r9, lsl #2]
   25004:	ldr	r0, [sp, #16]
   25008:	str	r4, [r0]
   2500c:	ldr	r0, [sp, #12]
   25010:	cmp	r1, #0
   25014:	addne	r1, r1, #4
   25018:	str	r0, [r7, #40]	; 0x28
   2501c:	ldr	r0, [sp, #8]
   25020:	str	r0, [r7, #100]	; 0x64
   25024:	beq	25080 <__assert_fail@plt+0x13920>
   25028:	ldr	r2, [r1, #4]
   2502c:	cmp	r2, #1
   25030:	blt	2508c <__assert_fail@plt+0x1392c>
   25034:	ldr	r0, [fp, #8]
   25038:	ldr	r1, [r1, #8]
   2503c:	subs	r2, r2, #1
   25040:	mov	sl, #0
   25044:	mov	r3, #0
   25048:	beq	25074 <__assert_fail@plt+0x13914>
   2504c:	mov	r3, #0
   25050:	mov	r7, #1
   25054:	add	r5, r3, r2
   25058:	lsr	r4, r5, #1
   2505c:	ldr	r6, [r1, r4, lsl #2]
   25060:	cmp	r6, r0
   25064:	movge	r2, r4
   25068:	addlt	r3, r7, r5, lsr #1
   2506c:	cmp	r3, r2
   25070:	bcc	25054 <__assert_fail@plt+0x138f4>
   25074:	ldr	r1, [r1, r3, lsl #2]
   25078:	cmp	r1, r0
   2507c:	movne	sl, #1
   25080:	mov	r0, sl
   25084:	sub	sp, fp, #28
   25088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2508c:	mov	sl, #1
   25090:	mov	r0, sl
   25094:	sub	sp, fp, #28
   25098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2509c:	mov	r0, #0
   250a0:	str	r0, [sp, #52]	; 0x34
   250a4:	str	r0, [sp, #48]	; 0x30
   250a8:	str	r0, [sp, #56]	; 0x38
   250ac:	str	r0, [fp, #-52]	; 0xffffffcc
   250b0:	b	249ac <__assert_fail@plt+0x1324c>
   250b4:	mov	r0, #0
   250b8:	str	r0, [sp, #48]	; 0x30
   250bc:	str	r0, [sp, #52]	; 0x34
   250c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   250c4:	b	250e4 <__assert_fail@plt+0x13984>
   250c8:	mov	r7, r0
   250cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   250d0:	bl	14538 <__assert_fail@plt+0x2dd8>
   250d4:	b	250ec <__assert_fail@plt+0x1398c>
   250d8:	mov	r0, #0
   250dc:	str	r0, [fp, #-48]	; 0xffffffd0
   250e0:	str	r0, [fp, #-44]	; 0xffffffd4
   250e4:	bl	14538 <__assert_fail@plt+0x2dd8>
   250e8:	mov	r7, #12
   250ec:	str	r7, [fp, #-52]	; 0xffffffcc
   250f0:	ldr	r0, [sp, #56]	; 0x38
   250f4:	bl	14538 <__assert_fail@plt+0x2dd8>
   250f8:	ldr	sl, [fp, #-52]	; 0xffffffcc
   250fc:	mov	r0, sl
   25100:	sub	sp, fp, #28
   25104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25108:	mov	r6, r1
   2510c:	mvn	r1, #-2147483648	; 0x80000000
   25110:	mov	sl, #12
   25114:	sub	r1, r1, r5
   25118:	cmp	r1, r2
   2511c:	ble	25080 <__assert_fail@plt+0x13920>
   25120:	add	r0, r2, #1
   25124:	add	r7, r0, r5
   25128:	str	r0, [sp, #44]	; 0x2c
   2512c:	cmn	r7, #-1073741823	; 0xc0000001
   25130:	bhi	25080 <__assert_fail@plt+0x13920>
   25134:	mov	r4, r6
   25138:	lsl	r1, r7, #2
   2513c:	ldr	r0, [r4, #8]!
   25140:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   25144:	cmp	r0, #0
   25148:	beq	25080 <__assert_fail@plt+0x13920>
   2514c:	ldr	r1, [sp, #44]	; 0x2c
   25150:	str	r7, [r6, #4]
   25154:	str	r0, [r6, #8]
   25158:	add	r0, r0, r5, lsl #2
   2515c:	lsl	r2, r1, #2
   25160:	mov	r1, #0
   25164:	bl	11670 <memset@plt>
   25168:	ldr	r0, [sp, #40]	; 0x28
   2516c:	ldr	sl, [sp, #20]
   25170:	mov	r1, r6
   25174:	b	2480c <__assert_fail@plt+0x130ac>
   25178:	and	r0, r3, #2
   2517c:	eor	r7, r0, #10
   25180:	cmp	r5, r9
   25184:	beq	2492c <__assert_fail@plt+0x131cc>
   25188:	b	24890 <__assert_fail@plt+0x13130>
   2518c:	mov	sl, r0
   25190:	ldr	r0, [sp, #56]	; 0x38
   25194:	bl	14538 <__assert_fail@plt+0x2dd8>
   25198:	mov	r0, sl
   2519c:	sub	sp, fp, #28
   251a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251a4:	mov	r0, #0
   251a8:	mov	sl, #12
   251ac:	str	r0, [sp, #48]	; 0x30
   251b0:	str	r0, [sp, #52]	; 0x34
   251b4:	str	sl, [fp, #-52]	; 0xffffffcc
   251b8:	mov	r0, sl
   251bc:	sub	sp, fp, #28
   251c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251c4:	mov	r0, r6
   251c8:	bl	1164c <iswalnum@plt>
   251cc:	mov	r7, #1
   251d0:	cmp	r6, #95	; 0x5f
   251d4:	beq	24924 <__assert_fail@plt+0x131c4>
   251d8:	cmp	r0, #0
   251dc:	beq	24908 <__assert_fail@plt+0x131a8>
   251e0:	b	24924 <__assert_fail@plt+0x131c4>
   251e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251e8:	add	fp, sp, #28
   251ec:	sub	sp, sp, #28
   251f0:	str	r0, [sp, #12]
   251f4:	ldr	r0, [r1, #4]
   251f8:	mov	r4, r1
   251fc:	mov	r1, #0
   25200:	mov	sl, r3
   25204:	mov	r8, r2
   25208:	str	r1, [sp, #20]
   2520c:	str	r0, [sp, #16]
   25210:	lsl	r0, r0, #2
   25214:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   25218:	cmp	r0, #0
   2521c:	str	r0, [sp, #24]
   25220:	beq	25320 <__assert_fail@plt+0x13bc0>
   25224:	ldr	r0, [r4, #4]
   25228:	cmp	r0, #1
   2522c:	blt	252f8 <__assert_fail@plt+0x13b98>
   25230:	mov	r9, #0
   25234:	str	r4, [sp, #8]
   25238:	ldr	r0, [r4, #8]
   2523c:	ldr	r1, [sp, #12]
   25240:	ldr	r2, [r0, r9, lsl #2]
   25244:	ldr	r1, [r1, #24]
   25248:	add	r0, r2, r2, lsl #1
   2524c:	add	r1, r1, r0, lsl #2
   25250:	ldr	r0, [r1, #4]
   25254:	cmp	r0, #1
   25258:	blt	25294 <__assert_fail@plt+0x13b34>
   2525c:	ldr	r7, [sp, #12]
   25260:	ldr	r3, [r1, #8]
   25264:	mov	r6, #0
   25268:	ldr	r7, [r7]
   2526c:	ldr	r4, [r3, r6, lsl #2]
   25270:	add	r5, r7, r4, lsl #3
   25274:	ldrb	r5, [r5, #4]
   25278:	cmp	r5, sl
   2527c:	ldreq	r5, [r7, r4, lsl #3]
   25280:	cmpeq	r5, r8
   25284:	beq	252bc <__assert_fail@plt+0x13b5c>
   25288:	add	r6, r6, #1
   2528c:	cmp	r6, r0
   25290:	blt	2526c <__assert_fail@plt+0x13b0c>
   25294:	add	r0, sp, #16
   25298:	bl	2182c <__assert_fail@plt+0x100cc>
   2529c:	cmp	r0, #0
   252a0:	bne	252e0 <__assert_fail@plt+0x13b80>
   252a4:	ldr	r4, [sp, #8]
   252a8:	add	r9, r9, #1
   252ac:	ldr	r0, [r4, #4]
   252b0:	cmp	r9, r0
   252b4:	blt	25238 <__assert_fail@plt+0x13ad8>
   252b8:	b	252f8 <__assert_fail@plt+0x13b98>
   252bc:	cmn	r4, #1
   252c0:	beq	25294 <__assert_fail@plt+0x13b34>
   252c4:	ldr	r0, [sp, #12]
   252c8:	add	r1, sp, #16
   252cc:	mov	r3, r8
   252d0:	str	sl, [sp]
   252d4:	bl	2588c <__assert_fail@plt+0x1412c>
   252d8:	cmp	r0, #0
   252dc:	beq	252a4 <__assert_fail@plt+0x13b44>
   252e0:	mov	r7, r0
   252e4:	ldr	r0, [sp, #24]
   252e8:	bl	14538 <__assert_fail@plt+0x2dd8>
   252ec:	mov	r0, r7
   252f0:	sub	sp, fp, #28
   252f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252f8:	ldr	r0, [r4, #8]
   252fc:	bl	14538 <__assert_fail@plt+0x2dd8>
   25300:	vldr	d16, [sp, #16]
   25304:	ldr	r0, [sp, #24]
   25308:	mov	r7, #0
   2530c:	str	r0, [r4, #8]
   25310:	vstr	d16, [r4]
   25314:	mov	r0, r7
   25318:	sub	sp, fp, #28
   2531c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25320:	mov	r7, #12
   25324:	mov	r0, r7
   25328:	sub	sp, fp, #28
   2532c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25334:	add	fp, sp, #28
   25338:	sub	sp, sp, #52	; 0x34
   2533c:	ldr	ip, [r0, #108]	; 0x6c
   25340:	mov	lr, r1
   25344:	ldr	r1, [r0, #84]	; 0x54
   25348:	str	r0, [sp, #24]
   2534c:	mov	sl, r2
   25350:	mov	r8, #0
   25354:	mov	r0, #0
   25358:	cmp	ip, #1
   2535c:	str	r1, [sp, #28]
   25360:	blt	253a4 <__assert_fail@plt+0x13c44>
   25364:	ldr	r0, [sp, #24]
   25368:	mov	r7, #1
   2536c:	mov	r1, ip
   25370:	ldr	r2, [r0, #116]	; 0x74
   25374:	mov	r0, #0
   25378:	add	r6, r1, r0
   2537c:	add	r6, r6, r6, lsr #31
   25380:	asr	r4, r6, #1
   25384:	add	r5, r4, r4, lsl #1
   25388:	add	r5, r2, r5, lsl #3
   2538c:	ldr	r5, [r5, #4]
   25390:	cmp	r5, sl
   25394:	addlt	r0, r7, r6, asr #1
   25398:	movge	r1, r4
   2539c:	cmp	r0, r1
   253a0:	blt	25378 <__assert_fail@plt+0x13c18>
   253a4:	cmp	r0, ip
   253a8:	bge	25870 <__assert_fail@plt+0x14110>
   253ac:	cmn	r0, #1
   253b0:	beq	25870 <__assert_fail@plt+0x14110>
   253b4:	ldr	r1, [sp, #24]
   253b8:	add	r0, r0, r0, lsl #1
   253bc:	str	r0, [sp, #8]
   253c0:	ldr	r1, [r1, #116]	; 0x74
   253c4:	add	r0, r1, r0, lsl #3
   253c8:	ldr	r0, [r0, #4]
   253cc:	cmp	r0, sl
   253d0:	bne	25870 <__assert_fail@plt+0x14110>
   253d4:	str	r3, [sp, #12]
   253d8:	mov	r9, #1
   253dc:	str	lr, [sp, #16]
   253e0:	b	253ec <__assert_fail@plt+0x13c8c>
   253e4:	ldr	r0, [sp, #24]
   253e8:	ldr	r1, [r0, #116]	; 0x74
   253ec:	ldr	r0, [sp, #8]
   253f0:	add	r0, r1, r0, lsl #3
   253f4:	mov	r8, r0
   253f8:	ldr	r0, [lr, #4]
   253fc:	cmp	r0, #1
   25400:	blt	25708 <__assert_fail@plt+0x13fa8>
   25404:	subs	r6, r0, #1
   25408:	ldr	r2, [r8]
   2540c:	ldr	r0, [lr, #8]
   25410:	mov	r3, #0
   25414:	beq	2543c <__assert_fail@plt+0x13cdc>
   25418:	mov	r1, r6
   2541c:	add	r7, r3, r1
   25420:	lsr	r5, r7, #1
   25424:	ldr	r4, [r0, r5, lsl #2]
   25428:	cmp	r4, r2
   2542c:	movge	r1, r5
   25430:	addlt	r3, r9, r7, lsr #1
   25434:	cmp	r3, r1
   25438:	bcc	2541c <__assert_fail@plt+0x13cbc>
   2543c:	ldr	r1, [r0, r3, lsl #2]
   25440:	cmp	r1, r2
   25444:	bne	25708 <__assert_fail@plt+0x13fa8>
   25448:	ldr	r3, [r8, #12]
   2544c:	ldr	r1, [r8, #8]
   25450:	add	r3, r3, sl
   25454:	sub	r7, r3, r1
   25458:	cmp	r7, sl
   2545c:	bne	25554 <__assert_fail@plt+0x13df4>
   25460:	ldr	r1, [sp, #28]
   25464:	add	r2, r2, r2, lsl #1
   25468:	cmp	r6, #0
   2546c:	ldr	r1, [r1, #20]
   25470:	add	r1, r1, r2, lsl #2
   25474:	mov	r2, #0
   25478:	ldr	r1, [r1, #8]
   2547c:	ldr	r4, [r1]
   25480:	beq	254a4 <__assert_fail@plt+0x13d44>
   25484:	add	r1, r2, r6
   25488:	lsr	r3, r1, #1
   2548c:	ldr	r7, [r0, r3, lsl #2]
   25490:	cmp	r7, r4
   25494:	movge	r6, r3
   25498:	addlt	r2, r9, r1, lsr #1
   2549c:	cmp	r2, r6
   254a0:	bcc	25484 <__assert_fail@plt+0x13d24>
   254a4:	ldr	r1, [r0, r2, lsl #2]
   254a8:	mov	r0, #4
   254ac:	cmp	r1, r4
   254b0:	beq	256fc <__assert_fail@plt+0x13f9c>
   254b4:	mov	r0, #4
   254b8:	str	r9, [sp, #36]	; 0x24
   254bc:	str	r9, [sp, #32]
   254c0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   254c4:	cmp	r0, #0
   254c8:	str	r0, [sp, #40]	; 0x28
   254cc:	beq	2571c <__assert_fail@plt+0x13fbc>
   254d0:	mov	r6, #0
   254d4:	str	r4, [r0]
   254d8:	ldr	r0, [sp, #28]
   254dc:	ldr	r2, [sp, #12]
   254e0:	ldr	r3, [fp, #8]
   254e4:	add	r4, sp, #32
   254e8:	str	r6, [fp, #-32]	; 0xffffffe0
   254ec:	mov	r1, r4
   254f0:	bl	251e4 <__assert_fail@plt+0x13a84>
   254f4:	ldr	r5, [sp, #16]
   254f8:	mov	r7, r0
   254fc:	mov	r1, r4
   25500:	mov	r0, r5
   25504:	bl	2182c <__assert_fail@plt+0x100cc>
   25508:	mov	r4, r0
   2550c:	ldr	r0, [sp, #40]	; 0x28
   25510:	bl	14538 <__assert_fail@plt+0x2dd8>
   25514:	orr	r0, r7, r6
   25518:	mov	lr, r5
   2551c:	orrs	r0, r0, r4
   25520:	mov	r0, #2
   25524:	beq	256fc <__assert_fail@plt+0x13f9c>
   25528:	cmp	r7, #0
   2552c:	mov	r0, #1
   25530:	movne	r4, r7
   25534:	cmp	r6, #0
   25538:	movne	r4, r6
   2553c:	str	r4, [fp, #-32]	; 0xffffffe0
   25540:	str	r4, [sp, #20]
   25544:	cmp	r0, #0
   25548:	cmpne	r0, #4
   2554c:	beq	25708 <__assert_fail@plt+0x13fa8>
   25550:	b	25864 <__assert_fail@plt+0x14104>
   25554:	ldr	r0, [sp, #24]
   25558:	ldr	r0, [r0, #100]	; 0x64
   2555c:	ldr	r5, [r0, r7, lsl #2]
   25560:	ldr	r0, [sp, #28]
   25564:	ldr	r0, [r0, #12]
   25568:	cmp	r5, #0
   2556c:	ldr	r4, [r0, r2, lsl #2]
   25570:	beq	25638 <__assert_fail@plt+0x13ed8>
   25574:	ldr	ip, [r5, #8]
   25578:	cmp	ip, #0
   2557c:	ble	25664 <__assert_fail@plt+0x13f04>
   25580:	ldr	r0, [r5, #12]
   25584:	subs	r3, ip, #1
   25588:	mov	r2, #0
   2558c:	str	r7, [sp, #4]
   25590:	beq	255b4 <__assert_fail@plt+0x13e54>
   25594:	add	r6, r2, r3
   25598:	lsr	r7, r6, #1
   2559c:	ldr	r1, [r0, r7, lsl #2]
   255a0:	cmp	r1, r4
   255a4:	movge	r3, r7
   255a8:	addlt	r2, r9, r6, lsr #1
   255ac:	cmp	r2, r3
   255b0:	bcc	25594 <__assert_fail@plt+0x13e34>
   255b4:	ldr	r1, [r0, r2, lsl #2]
   255b8:	mov	r0, #4
   255bc:	cmp	r1, r4
   255c0:	beq	256fc <__assert_fail@plt+0x13f9c>
   255c4:	ldr	r7, [sp, #4]
   255c8:	cmp	ip, #1
   255cc:	str	ip, [sp, #36]	; 0x24
   255d0:	blt	25668 <__assert_fail@plt+0x13f08>
   255d4:	lsl	r0, ip, #2
   255d8:	str	ip, [sp, #32]
   255dc:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   255e0:	cmp	r0, #0
   255e4:	str	r0, [sp, #40]	; 0x28
   255e8:	beq	25784 <__assert_fail@plt+0x14024>
   255ec:	ldr	r2, [r5, #8]
   255f0:	ldr	r1, [r5, #12]
   255f4:	mov	r5, r0
   255f8:	lsl	r2, r2, #2
   255fc:	bl	11484 <memcpy@plt>
   25600:	ldr	r1, [sp, #32]
   25604:	mov	r6, #0
   25608:	str	r6, [fp, #-32]	; 0xffffffe0
   2560c:	cmp	r1, #0
   25610:	beq	2567c <__assert_fail@plt+0x13f1c>
   25614:	ldr	r0, [sp, #36]	; 0x24
   25618:	cmp	r0, #0
   2561c:	bne	25798 <__assert_fail@plt+0x14038>
   25620:	str	r4, [r5]
   25624:	str	r9, [sp, #36]	; 0x24
   25628:	mov	r6, #0
   2562c:	cmp	r6, #0
   25630:	beq	256a4 <__assert_fail@plt+0x13f44>
   25634:	b	2575c <__assert_fail@plt+0x13ffc>
   25638:	mov	r0, #4
   2563c:	str	r9, [sp, #36]	; 0x24
   25640:	str	r9, [sp, #32]
   25644:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   25648:	cmp	r0, #0
   2564c:	str	r0, [sp, #40]	; 0x28
   25650:	beq	25730 <__assert_fail@plt+0x13fd0>
   25654:	str	r4, [r0]
   25658:	mov	r0, #0
   2565c:	str	r0, [fp, #-32]	; 0xffffffe0
   25660:	b	256a4 <__assert_fail@plt+0x13f44>
   25664:	str	ip, [sp, #36]	; 0x24
   25668:	mov	r6, #0
   2566c:	str	r6, [sp, #36]	; 0x24
   25670:	str	r6, [sp, #32]
   25674:	str	r6, [sp, #40]	; 0x28
   25678:	str	r6, [fp, #-32]	; 0xffffffe0
   2567c:	mov	r0, #4
   25680:	str	r9, [sp, #36]	; 0x24
   25684:	str	r9, [sp, #32]
   25688:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2568c:	cmp	r0, #0
   25690:	str	r0, [sp, #40]	; 0x28
   25694:	beq	25750 <__assert_fail@plt+0x13ff0>
   25698:	str	r4, [r0]
   2569c:	cmp	r6, #0
   256a0:	bne	2575c <__assert_fail@plt+0x13ffc>
   256a4:	ldr	r1, [sp, #28]
   256a8:	sub	r0, fp, #32
   256ac:	add	r2, sp, #32
   256b0:	bl	259d0 <__assert_fail@plt+0x14270>
   256b4:	ldr	r4, [sp, #24]
   256b8:	ldr	r1, [r4, #100]	; 0x64
   256bc:	str	r0, [r1, r7, lsl #2]
   256c0:	ldr	r0, [sp, #40]	; 0x28
   256c4:	bl	14538 <__assert_fail@plt+0x2dd8>
   256c8:	ldr	r0, [r4, #100]	; 0x64
   256cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   256d0:	ldr	r0, [r0, r7, lsl #2]
   256d4:	cmp	r1, #0
   256d8:	mov	r2, r1
   256dc:	movwne	r2, #1
   256e0:	clz	r0, r0
   256e4:	lsr	r0, r0, #5
   256e8:	ands	r0, r0, r2
   256ec:	ldr	r2, [sp, #20]
   256f0:	movne	r2, r1
   256f4:	str	r2, [sp, #20]
   256f8:	ldr	lr, [sp, #16]
   256fc:	cmp	r0, #0
   25700:	cmpne	r0, #4
   25704:	bne	25864 <__assert_fail@plt+0x14104>
   25708:	ldrb	r1, [r8, #20]
   2570c:	add	r0, r8, #24
   25710:	cmp	r1, #0
   25714:	bne	253f4 <__assert_fail@plt+0x13c94>
   25718:	b	2587c <__assert_fail@plt+0x1411c>
   2571c:	mov	r0, #0
   25720:	mov	r6, #12
   25724:	str	r0, [sp, #32]
   25728:	str	r0, [sp, #36]	; 0x24
   2572c:	b	254d8 <__assert_fail@plt+0x13d78>
   25730:	mov	r0, #0
   25734:	mov	r1, #12
   25738:	str	r0, [sp, #32]
   2573c:	str	r0, [sp, #36]	; 0x24
   25740:	mov	r0, #12
   25744:	str	r1, [fp, #-32]	; 0xffffffe0
   25748:	str	r0, [sp, #20]
   2574c:	b	2577c <__assert_fail@plt+0x1401c>
   25750:	mov	r0, #0
   25754:	str	r0, [sp, #32]
   25758:	str	r0, [sp, #36]	; 0x24
   2575c:	clz	r0, r6
   25760:	lsr	r4, r0, #5
   25764:	ldr	r0, [sp, #40]	; 0x28
   25768:	bl	14538 <__assert_fail@plt+0x2dd8>
   2576c:	cmp	r4, #0
   25770:	movwne	r6, #12
   25774:	str	r6, [sp, #20]
   25778:	str	r6, [fp, #-32]	; 0xffffffe0
   2577c:	mov	r0, #1
   25780:	b	256f8 <__assert_fail@plt+0x13f98>
   25784:	mov	r0, #0
   25788:	mov	r6, #12
   2578c:	str	r0, [sp, #32]
   25790:	str	r0, [sp, #36]	; 0x24
   25794:	b	25678 <__assert_fail@plt+0x13f18>
   25798:	cmp	r1, r0
   2579c:	bne	257c8 <__assert_fail@plt+0x14068>
   257a0:	lsl	r0, r1, #1
   257a4:	lsl	r1, r1, #3
   257a8:	str	r0, [sp, #32]
   257ac:	mov	r0, r5
   257b0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   257b4:	cmp	r0, #0
   257b8:	beq	2585c <__assert_fail@plt+0x140fc>
   257bc:	str	r0, [sp, #40]	; 0x28
   257c0:	mov	r5, r0
   257c4:	ldr	r0, [sp, #36]	; 0x24
   257c8:	ldr	r1, [r5]
   257cc:	cmp	r1, r4
   257d0:	ble	25808 <__assert_fail@plt+0x140a8>
   257d4:	cmp	r0, #1
   257d8:	blt	25838 <__assert_fail@plt+0x140d8>
   257dc:	add	r1, r5, r0, lsl #2
   257e0:	add	r0, r0, #1
   257e4:	mov	r2, r1
   257e8:	ldr	r3, [r2, #-4]!
   257ec:	sub	r0, r0, #1
   257f0:	cmp	r0, #1
   257f4:	str	r3, [r1]
   257f8:	mov	r1, r2
   257fc:	bgt	257e8 <__assert_fail@plt+0x14088>
   25800:	sub	r0, r0, #1
   25804:	b	25838 <__assert_fail@plt+0x140d8>
   25808:	add	r1, r5, r0, lsl #2
   2580c:	ldr	r2, [r1, #-4]
   25810:	cmp	r2, r4
   25814:	ble	25838 <__assert_fail@plt+0x140d8>
   25818:	sub	r0, r0, #2
   2581c:	str	r2, [r1]
   25820:	sub	r0, r0, #1
   25824:	ldr	r2, [r1, #-8]
   25828:	sub	r1, r1, #4
   2582c:	cmp	r2, r4
   25830:	bgt	2581c <__assert_fail@plt+0x140bc>
   25834:	add	r0, r0, #2
   25838:	str	r4, [r5, r0, lsl #2]
   2583c:	ldr	r7, [sp, #4]
   25840:	mov	r6, #0
   25844:	ldr	r0, [sp, #36]	; 0x24
   25848:	add	r0, r0, #1
   2584c:	str	r0, [sp, #36]	; 0x24
   25850:	cmp	r6, #0
   25854:	beq	256a4 <__assert_fail@plt+0x13f44>
   25858:	b	2575c <__assert_fail@plt+0x13ffc>
   2585c:	mov	r6, #0
   25860:	b	2575c <__assert_fail@plt+0x13ffc>
   25864:	cmp	r0, #2
   25868:	beq	253e4 <__assert_fail@plt+0x13c84>
   2586c:	ldr	r8, [sp, #20]
   25870:	mov	r0, r8
   25874:	sub	sp, fp, #28
   25878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2587c:	mov	r8, #0
   25880:	mov	r0, r8
   25884:	sub	sp, fp, #28
   25888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2588c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25890:	add	fp, sp, #28
   25894:	sub	sp, sp, #4
   25898:	ldr	r4, [fp, #8]
   2589c:	mov	r9, r3
   258a0:	mov	r7, r2
   258a4:	mov	r8, r1
   258a8:	mov	sl, r0
   258ac:	mov	r5, #1
   258b0:	ldr	r0, [r8, #4]
   258b4:	cmp	r0, #1
   258b8:	bge	258d8 <__assert_fail@plt+0x14178>
   258bc:	b	2591c <__assert_fail@plt+0x141bc>
   258c0:	add	r0, r0, r7, lsl #2
   258c4:	ldr	r0, [r0, #8]
   258c8:	ldr	r7, [r0]
   258cc:	ldr	r0, [r8, #4]
   258d0:	cmp	r0, #1
   258d4:	blt	2591c <__assert_fail@plt+0x141bc>
   258d8:	subs	r2, r0, #1
   258dc:	ldr	r0, [r8, #8]
   258e0:	mov	ip, r4
   258e4:	mov	r1, #0
   258e8:	beq	2590c <__assert_fail@plt+0x141ac>
   258ec:	add	r3, r1, r2
   258f0:	lsr	r6, r3, #1
   258f4:	ldr	r4, [r0, r6, lsl #2]
   258f8:	cmp	r4, r7
   258fc:	movge	r2, r6
   25900:	addlt	r1, r5, r3, lsr #1
   25904:	cmp	r1, r2
   25908:	bcc	258ec <__assert_fail@plt+0x1418c>
   2590c:	ldr	r0, [r0, r1, lsl #2]
   25910:	mov	r4, ip
   25914:	cmp	r0, r7
   25918:	beq	259b8 <__assert_fail@plt+0x14258>
   2591c:	ldr	r0, [sl]
   25920:	add	r1, r0, r7, lsl #3
   25924:	ldrb	r1, [r1, #4]
   25928:	cmp	r1, r4
   2592c:	ldreq	r0, [r0, r7, lsl #3]
   25930:	cmpeq	r0, r9
   25934:	beq	2599c <__assert_fail@plt+0x1423c>
   25938:	mov	r0, r8
   2593c:	mov	r1, r7
   25940:	bl	219d4 <__assert_fail@plt+0x10274>
   25944:	cmp	r0, #0
   25948:	beq	259c4 <__assert_fail@plt+0x14264>
   2594c:	ldr	r0, [sl, #20]
   25950:	add	r7, r7, r7, lsl #1
   25954:	add	r1, r0, r7, lsl #2
   25958:	ldr	r2, [r1, #4]
   2595c:	cmp	r2, #2
   25960:	beq	25970 <__assert_fail@plt+0x14210>
   25964:	cmp	r2, #0
   25968:	bne	258c0 <__assert_fail@plt+0x14160>
   2596c:	b	259b8 <__assert_fail@plt+0x14258>
   25970:	ldr	r0, [r1, #8]
   25974:	mov	r1, r8
   25978:	mov	r3, r9
   2597c:	ldr	r2, [r0, #4]
   25980:	mov	r0, sl
   25984:	str	r4, [sp]
   25988:	bl	2588c <__assert_fail@plt+0x1412c>
   2598c:	cmp	r0, #0
   25990:	bne	259bc <__assert_fail@plt+0x1425c>
   25994:	ldr	r0, [sl, #20]
   25998:	b	258c0 <__assert_fail@plt+0x14160>
   2599c:	cmp	r4, #9
   259a0:	bne	259b8 <__assert_fail@plt+0x14258>
   259a4:	mov	r0, r8
   259a8:	mov	r1, r7
   259ac:	bl	219d4 <__assert_fail@plt+0x10274>
   259b0:	cmp	r0, #0
   259b4:	beq	259c4 <__assert_fail@plt+0x14264>
   259b8:	mov	r0, #0
   259bc:	sub	sp, fp, #28
   259c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259c4:	mov	r0, #12
   259c8:	sub	sp, fp, #28
   259cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259d4:	add	fp, sp, #28
   259d8:	sub	sp, sp, #4
   259dc:	ldr	sl, [r2, #4]
   259e0:	cmp	sl, #0
   259e4:	beq	25c20 <__assert_fail@plt+0x144c0>
   259e8:	mov	r7, r2
   259ec:	mov	r9, r1
   259f0:	cmp	sl, #1
   259f4:	mov	r6, sl
   259f8:	blt	25a6c <__assert_fail@plt+0x1430c>
   259fc:	ldr	r5, [r7, #8]
   25a00:	mov	r2, #0
   25a04:	cmp	sl, #4
   25a08:	mov	r6, sl
   25a0c:	bcc	25a54 <__assert_fail@plt+0x142f4>
   25a10:	mov	r1, #0
   25a14:	bic	r2, sl, #3
   25a18:	vdup.32	q8, r1
   25a1c:	mov	r3, r2
   25a20:	mov	r1, r5
   25a24:	vmov.32	d16[0], sl
   25a28:	vld1.32	{d18-d19}, [r1]!
   25a2c:	subs	r3, r3, #4
   25a30:	vadd.i32	q8, q9, q8
   25a34:	bne	25a28 <__assert_fail@plt+0x142c8>
   25a38:	vext.8	q9, q8, q8, #8
   25a3c:	cmp	sl, r2
   25a40:	vadd.i32	q8, q8, q9
   25a44:	vdup.32	q9, d16[1]
   25a48:	vadd.i32	q8, q8, q9
   25a4c:	vmov.32	r6, d16[0]
   25a50:	beq	25a6c <__assert_fail@plt+0x1430c>
   25a54:	add	r1, r5, r2, lsl #2
   25a58:	sub	r2, sl, r2
   25a5c:	ldr	r3, [r1], #4
   25a60:	subs	r2, r2, #1
   25a64:	add	r6, r3, r6
   25a68:	bne	25a5c <__assert_fail@plt+0x142fc>
   25a6c:	ldr	r1, [r9, #68]	; 0x44
   25a70:	ldr	r2, [r9, #32]
   25a74:	str	r0, [sp]
   25a78:	and	r1, r1, r6
   25a7c:	add	r3, r1, r1, lsl #1
   25a80:	ldr	r1, [r2, r3, lsl #2]
   25a84:	cmp	r1, #1
   25a88:	blt	25afc <__assert_fail@plt+0x1439c>
   25a8c:	cmp	r7, #0
   25a90:	beq	25afc <__assert_fail@plt+0x1439c>
   25a94:	add	r2, r2, r3, lsl #2
   25a98:	sub	ip, sl, #1
   25a9c:	mov	r5, #0
   25aa0:	ldr	lr, [r2, #8]
   25aa4:	b	25ad8 <__assert_fail@plt+0x14378>
   25aa8:	mov	r3, ip
   25aac:	add	r2, r3, #1
   25ab0:	cmp	r2, #1
   25ab4:	blt	25c14 <__assert_fail@plt+0x144b4>
   25ab8:	ldr	r2, [r7, #8]
   25abc:	ldr	r0, [r4, #12]
   25ac0:	ldr	r2, [r2, r3, lsl #2]
   25ac4:	ldr	r0, [r0, r3, lsl #2]
   25ac8:	sub	r3, r3, #1
   25acc:	cmp	r0, r2
   25ad0:	beq	25aac <__assert_fail@plt+0x1434c>
   25ad4:	b	25af0 <__assert_fail@plt+0x14390>
   25ad8:	ldr	r4, [lr, r5, lsl #2]
   25adc:	ldr	r3, [r4]
   25ae0:	cmp	r6, r3
   25ae4:	ldreq	r3, [r4, #8]
   25ae8:	cmpeq	r3, sl
   25aec:	beq	25aa8 <__assert_fail@plt+0x14348>
   25af0:	add	r5, r5, #1
   25af4:	cmp	r5, r1
   25af8:	blt	25ad8 <__assert_fail@plt+0x14378>
   25afc:	mov	r0, #56	; 0x38
   25b00:	mov	r1, #1
   25b04:	bl	2d24c <__assert_fail@plt+0x1baec>
   25b08:	cmp	r0, #0
   25b0c:	beq	25c54 <__assert_fail@plt+0x144f4>
   25b10:	mov	r4, r0
   25b14:	ldr	r0, [r7, #4]
   25b18:	add	sl, r4, #4
   25b1c:	cmp	r0, #1
   25b20:	str	r0, [r4, #8]
   25b24:	blt	25be8 <__assert_fail@plt+0x14488>
   25b28:	str	r0, [r4, #4]
   25b2c:	lsl	r0, r0, #2
   25b30:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   25b34:	cmp	r0, #0
   25b38:	str	r0, [r4, #12]
   25b3c:	beq	25c40 <__assert_fail@plt+0x144e0>
   25b40:	ldmib	r7, {r5, r7}
   25b44:	lsl	r2, r5, #2
   25b48:	mov	r1, r7
   25b4c:	bl	11484 <memcpy@plt>
   25b50:	cmp	r5, #1
   25b54:	str	sl, [r4, #40]	; 0x28
   25b58:	blt	25bfc <__assert_fail@plt+0x1449c>
   25b5c:	ldr	sl, [r9]
   25b60:	movw	ip, #65280	; 0xff00
   25b64:	mov	lr, #32
   25b68:	movt	ip, #3
   25b6c:	add	r2, ip, #255	; 0xff
   25b70:	ldr	r0, [r7]
   25b74:	add	r1, sl, r0, lsl #3
   25b78:	ldr	r0, [r1, #4]!
   25b7c:	and	r3, r0, r2
   25b80:	cmp	r3, #1
   25b84:	beq	25bd8 <__assert_fail@plt+0x14478>
   25b88:	ldrb	r8, [r4, #52]	; 0x34
   25b8c:	and	r3, lr, r0, lsr #15
   25b90:	uxtb	r0, r0
   25b94:	cmp	r0, #12
   25b98:	orr	r3, r8, r3
   25b9c:	strb	r3, [r4, #52]	; 0x34
   25ba0:	beq	25bd0 <__assert_fail@plt+0x14470>
   25ba4:	cmp	r0, #4
   25ba8:	beq	25bbc <__assert_fail@plt+0x1445c>
   25bac:	cmp	r0, #2
   25bb0:	bne	25bc4 <__assert_fail@plt+0x14464>
   25bb4:	orr	r0, r3, #16
   25bb8:	b	25bd4 <__assert_fail@plt+0x14474>
   25bbc:	orr	r0, r3, #64	; 0x40
   25bc0:	b	25bd4 <__assert_fail@plt+0x14474>
   25bc4:	ldr	r0, [r1]
   25bc8:	tst	r0, ip
   25bcc:	beq	25bd8 <__assert_fail@plt+0x14478>
   25bd0:	orr	r0, r3, #128	; 0x80
   25bd4:	strb	r0, [r4, #52]	; 0x34
   25bd8:	add	r7, r7, #4
   25bdc:	subs	r5, r5, #1
   25be0:	bne	25b70 <__assert_fail@plt+0x14410>
   25be4:	b	25bfc <__assert_fail@plt+0x1449c>
   25be8:	mov	r0, #0
   25bec:	str	r0, [sl]
   25bf0:	str	r0, [sl, #4]
   25bf4:	str	r0, [sl, #8]
   25bf8:	str	sl, [r4, #40]	; 0x28
   25bfc:	mov	r0, r9
   25c00:	mov	r1, r4
   25c04:	mov	r2, r6
   25c08:	bl	224e0 <__assert_fail@plt+0x10d80>
   25c0c:	cmp	r0, #0
   25c10:	bne	25c34 <__assert_fail@plt+0x144d4>
   25c14:	mov	r0, r4
   25c18:	sub	sp, fp, #28
   25c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c20:	mov	r4, #0
   25c24:	str	r4, [r0]
   25c28:	mov	r0, r4
   25c2c:	sub	sp, fp, #28
   25c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c34:	mov	r0, r4
   25c38:	bl	1ba70 <__assert_fail@plt+0xa310>
   25c3c:	b	25c54 <__assert_fail@plt+0x144f4>
   25c40:	mov	r0, #0
   25c44:	str	r0, [r4, #4]
   25c48:	str	r0, [r4, #8]
   25c4c:	mov	r0, r4
   25c50:	bl	14538 <__assert_fail@plt+0x2dd8>
   25c54:	ldr	r1, [sp]
   25c58:	mov	r0, #12
   25c5c:	mov	r4, #0
   25c60:	str	r0, [r1]
   25c64:	mov	r0, r4
   25c68:	sub	sp, fp, #28
   25c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25c74:	add	fp, sp, #24
   25c78:	ldr	lr, [r0]
   25c7c:	add	r7, lr, r1, lsl #3
   25c80:	ldrb	r9, [r7, #4]
   25c84:	cmp	r9, #7
   25c88:	beq	25e6c <__assert_fail@plt+0x1470c>
   25c8c:	ldr	ip, [r2, #80]	; 0x50
   25c90:	mov	r6, #1
   25c94:	cmp	ip, #1
   25c98:	beq	25cd4 <__assert_fail@plt+0x14574>
   25c9c:	ldr	r5, [r2, #28]
   25ca0:	add	r7, r3, #1
   25ca4:	cmp	r7, r5
   25ca8:	bge	25cd4 <__assert_fail@plt+0x14574>
   25cac:	ldr	r6, [r2, #8]
   25cb0:	add	r7, r6, r3, lsl #2
   25cb4:	mov	r6, #1
   25cb8:	ldr	r4, [r7, r6, lsl #2]
   25cbc:	cmn	r4, #1
   25cc0:	bne	25cd4 <__assert_fail@plt+0x14574>
   25cc4:	add	r6, r6, #1
   25cc8:	add	r4, r3, r6
   25ccc:	cmp	r4, r5
   25cd0:	blt	25cb8 <__assert_fail@plt+0x14558>
   25cd4:	mov	r8, #0
   25cd8:	cmp	r9, #5
   25cdc:	bne	25d24 <__assert_fail@plt+0x145c4>
   25ce0:	cmp	r6, #2
   25ce4:	blt	25e50 <__assert_fail@plt+0x146f0>
   25ce8:	ldr	r0, [r0, #128]	; 0x80
   25cec:	tst	r0, #64	; 0x40
   25cf0:	bne	25d04 <__assert_fail@plt+0x145a4>
   25cf4:	ldr	r1, [r2, #4]
   25cf8:	ldrb	r1, [r1, r3]
   25cfc:	cmp	r1, #10
   25d00:	beq	25e50 <__assert_fail@plt+0x146f0>
   25d04:	tst	r0, #128	; 0x80
   25d08:	beq	25e4c <__assert_fail@plt+0x146ec>
   25d0c:	ldr	r0, [r2, #4]
   25d10:	ldrb	r0, [r0, r3]
   25d14:	cmp	r0, #0
   25d18:	movne	r8, r6
   25d1c:	mov	r0, r8
   25d20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25d24:	cmp	r9, #6
   25d28:	bne	25e50 <__assert_fail@plt+0x146f0>
   25d2c:	cmp	r6, #2
   25d30:	blt	25e50 <__assert_fail@plt+0x146f0>
   25d34:	ldr	r7, [lr, r1, lsl #3]
   25d38:	ldr	r0, [r7, #32]
   25d3c:	cmp	r0, #0
   25d40:	bne	25d5c <__assert_fail@plt+0x145fc>
   25d44:	ldr	r1, [r7, #36]	; 0x24
   25d48:	cmp	r1, #0
   25d4c:	bne	25d5c <__assert_fail@plt+0x145fc>
   25d50:	ldr	r1, [r7, #20]
   25d54:	cmp	r1, #0
   25d58:	beq	25e58 <__assert_fail@plt+0x146f8>
   25d5c:	cmp	ip, #1
   25d60:	bne	25d7c <__assert_fail@plt+0x1461c>
   25d64:	ldr	r1, [r2, #4]
   25d68:	ldrb	r5, [r1, r3]
   25d6c:	ldr	r1, [r7, #20]
   25d70:	cmp	r1, #1
   25d74:	bge	25d90 <__assert_fail@plt+0x14630>
   25d78:	b	25db0 <__assert_fail@plt+0x14650>
   25d7c:	ldr	r1, [r2, #8]
   25d80:	ldr	r5, [r1, r3, lsl #2]
   25d84:	ldr	r1, [r7, #20]
   25d88:	cmp	r1, #1
   25d8c:	blt	25db0 <__assert_fail@plt+0x14650>
   25d90:	ldr	r2, [r7]
   25d94:	mov	r3, #0
   25d98:	ldr	r4, [r2, r3, lsl #2]
   25d9c:	cmp	r5, r4
   25da0:	beq	25e2c <__assert_fail@plt+0x146cc>
   25da4:	add	r3, r3, #1
   25da8:	cmp	r3, r1
   25dac:	blt	25d98 <__assert_fail@plt+0x14638>
   25db0:	ldr	r1, [r7, #36]	; 0x24
   25db4:	cmp	r1, #1
   25db8:	blt	25dec <__assert_fail@plt+0x1468c>
   25dbc:	mov	r4, #0
   25dc0:	ldr	r0, [r7, #12]
   25dc4:	ldr	r1, [r0, r4, lsl #2]
   25dc8:	mov	r0, r5
   25dcc:	bl	1140c <iswctype@plt>
   25dd0:	cmp	r0, #0
   25dd4:	bne	25e2c <__assert_fail@plt+0x146cc>
   25dd8:	ldr	r0, [r7, #36]	; 0x24
   25ddc:	add	r4, r4, #1
   25de0:	cmp	r4, r0
   25de4:	blt	25dc0 <__assert_fail@plt+0x14660>
   25de8:	ldr	r0, [r7, #32]
   25dec:	cmp	r0, #1
   25df0:	blt	25e24 <__assert_fail@plt+0x146c4>
   25df4:	ldr	r1, [r7, #4]
   25df8:	mov	r2, #0
   25dfc:	ldr	r3, [r1, r2, lsl #2]
   25e00:	cmp	r3, r5
   25e04:	bhi	25e18 <__assert_fail@plt+0x146b8>
   25e08:	ldr	r3, [r7, #8]
   25e0c:	ldr	r3, [r3, r2, lsl #2]
   25e10:	cmp	r5, r3
   25e14:	bls	25e2c <__assert_fail@plt+0x146cc>
   25e18:	add	r2, r2, #1
   25e1c:	cmp	r2, r0
   25e20:	blt	25dfc <__assert_fail@plt+0x1469c>
   25e24:	mov	r0, #0
   25e28:	b	25e30 <__assert_fail@plt+0x146d0>
   25e2c:	mov	r0, r6
   25e30:	ldrb	r1, [r7, #16]
   25e34:	tst	r1, #1
   25e38:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25e3c:	cmp	r0, #0
   25e40:	bgt	25e50 <__assert_fail@plt+0x146f0>
   25e44:	cmp	r6, #1
   25e48:	movle	r6, #1
   25e4c:	mov	r8, r6
   25e50:	mov	r0, r8
   25e54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25e58:	mov	r5, #0
   25e5c:	ldr	r1, [r7, #20]
   25e60:	cmp	r1, #1
   25e64:	bge	25d90 <__assert_fail@plt+0x14630>
   25e68:	b	25db0 <__assert_fail@plt+0x14650>
   25e6c:	ldr	r0, [r2, #4]
   25e70:	mov	r8, #0
   25e74:	ldrb	r6, [r0, r3]
   25e78:	cmp	r6, #194	; 0xc2
   25e7c:	bcc	25e50 <__assert_fail@plt+0x146f0>
   25e80:	ldr	r1, [r2, #48]	; 0x30
   25e84:	add	r2, r3, #2
   25e88:	cmp	r2, r1
   25e8c:	bgt	25e50 <__assert_fail@plt+0x146f0>
   25e90:	add	r0, r0, r3
   25e94:	cmp	r6, #223	; 0xdf
   25e98:	ldrb	r7, [r0, #1]
   25e9c:	bhi	25ec0 <__assert_fail@plt+0x14760>
   25ea0:	mov	r8, #2
   25ea4:	cmp	r7, #191	; 0xbf
   25ea8:	sxtb	r0, r7
   25eac:	movwhi	r8, #0
   25eb0:	cmn	r0, #1
   25eb4:	movwgt	r8, #0
   25eb8:	mov	r0, r8
   25ebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25ec0:	cmp	r6, #239	; 0xef
   25ec4:	bhi	25ee0 <__assert_fail@plt+0x14780>
   25ec8:	mov	r2, #3
   25ecc:	cmp	r6, #224	; 0xe0
   25ed0:	bne	25f3c <__assert_fail@plt+0x147dc>
   25ed4:	cmp	r7, #160	; 0xa0
   25ed8:	bcc	25e50 <__assert_fail@plt+0x146f0>
   25edc:	b	25f3c <__assert_fail@plt+0x147dc>
   25ee0:	cmp	r6, #247	; 0xf7
   25ee4:	bhi	25f00 <__assert_fail@plt+0x147a0>
   25ee8:	mov	r2, #4
   25eec:	cmp	r6, #240	; 0xf0
   25ef0:	bne	25f3c <__assert_fail@plt+0x147dc>
   25ef4:	cmp	r7, #144	; 0x90
   25ef8:	bcc	25e50 <__assert_fail@plt+0x146f0>
   25efc:	b	25f3c <__assert_fail@plt+0x147dc>
   25f00:	cmp	r6, #251	; 0xfb
   25f04:	bhi	25f20 <__assert_fail@plt+0x147c0>
   25f08:	mov	r2, #5
   25f0c:	cmp	r6, #248	; 0xf8
   25f10:	bne	25f3c <__assert_fail@plt+0x147dc>
   25f14:	cmp	r7, #136	; 0x88
   25f18:	bcc	25e50 <__assert_fail@plt+0x146f0>
   25f1c:	b	25f3c <__assert_fail@plt+0x147dc>
   25f20:	cmp	r6, #253	; 0xfd
   25f24:	bhi	25e50 <__assert_fail@plt+0x146f0>
   25f28:	mov	r2, #6
   25f2c:	cmp	r6, #252	; 0xfc
   25f30:	bne	25f3c <__assert_fail@plt+0x147dc>
   25f34:	cmp	r7, #132	; 0x84
   25f38:	bcc	25e50 <__assert_fail@plt+0x146f0>
   25f3c:	add	r3, r2, r3
   25f40:	cmp	r3, r1
   25f44:	bgt	25e50 <__assert_fail@plt+0x146f0>
   25f48:	mov	r1, #1
   25f4c:	ldrb	r3, [r0, r1]
   25f50:	sxtb	r7, r3
   25f54:	cmn	r7, #1
   25f58:	bgt	25e50 <__assert_fail@plt+0x146f0>
   25f5c:	cmp	r3, #191	; 0xbf
   25f60:	bhi	25e50 <__assert_fail@plt+0x146f0>
   25f64:	add	r1, r1, #1
   25f68:	cmp	r1, r2
   25f6c:	movcs	r0, r2
   25f70:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   25f74:	ldrb	r3, [r0, r1]
   25f78:	sxtb	r7, r3
   25f7c:	cmn	r7, #1
   25f80:	ble	25f5c <__assert_fail@plt+0x147fc>
   25f84:	b	25e50 <__assert_fail@plt+0x146f0>
   25f88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25f8c:	add	fp, sp, #24
   25f90:	ldr	r4, [r1, #4]
   25f94:	mov	r6, r0
   25f98:	mvn	r0, #0
   25f9c:	mov	r8, #0
   25fa0:	uxtab	r3, r0, r4
   25fa4:	cmp	r3, #6
   25fa8:	bhi	26154 <__assert_fail@plt+0x149f4>
   25fac:	ldr	r0, [r6, #4]
   25fb0:	mov	r9, r1
   25fb4:	ldrb	r1, [r0, r2]
   25fb8:	add	r7, pc, #4
   25fbc:	sxtb	r0, r1
   25fc0:	ldr	pc, [r7, r3, lsl #2]
   25fc4:	andeq	r5, r2, r0, ror #31
   25fc8:	andeq	r6, r2, r4, asr r1
   25fcc:	strdeq	r5, [r2], -r4
   25fd0:	andeq	r6, r2, r4, asr r1
   25fd4:	andeq	r6, r2, ip, lsl r0
   25fd8:	andeq	r6, r2, r4, asr r1
   25fdc:	andeq	r6, r2, r4, lsl r0
   25fe0:	ldrb	r3, [r9]
   25fe4:	uxtb	r7, r0
   25fe8:	cmp	r3, r7
   25fec:	beq	2603c <__assert_fail@plt+0x148dc>
   25ff0:	b	26154 <__assert_fail@plt+0x149f4>
   25ff4:	ldr	r3, [r9]
   25ff8:	ubfx	r7, r1, #5, #3
   25ffc:	mov	r5, #1
   26000:	ldr	r3, [r3, r7, lsl #2]
   26004:	and	r7, r1, #31
   26008:	tst	r3, r5, lsl r7
   2600c:	bne	2603c <__assert_fail@plt+0x148dc>
   26010:	b	26154 <__assert_fail@plt+0x149f4>
   26014:	cmp	r0, #0
   26018:	blt	26154 <__assert_fail@plt+0x149f4>
   2601c:	cmp	r1, #0
   26020:	beq	260e8 <__assert_fail@plt+0x14988>
   26024:	cmp	r1, #10
   26028:	bne	2603c <__assert_fail@plt+0x148dc>
   2602c:	ldr	r3, [r6, #84]	; 0x54
   26030:	ldrb	r3, [r3, #128]	; 0x80
   26034:	tst	r3, #64	; 0x40
   26038:	beq	26154 <__assert_fail@plt+0x149f4>
   2603c:	movw	r3, #65280	; 0xff00
   26040:	movt	r3, #3
   26044:	tst	r4, r3
   26048:	beq	260ac <__assert_fail@plt+0x1494c>
   2604c:	cmn	r2, #1
   26050:	ble	2608c <__assert_fail@plt+0x1492c>
   26054:	ldr	r3, [r6, #48]	; 0x30
   26058:	cmp	r3, r2
   2605c:	beq	26174 <__assert_fail@plt+0x14a14>
   26060:	ldr	r3, [r6, #80]	; 0x50
   26064:	cmp	r3, #2
   26068:	blt	260b8 <__assert_fail@plt+0x14958>
   2606c:	ldr	r0, [r6, #8]
   26070:	ldr	r7, [r0, r2, lsl #2]
   26074:	cmn	r7, #1
   26078:	bne	260fc <__assert_fail@plt+0x1499c>
   2607c:	sub	r1, r2, #1
   26080:	cmp	r2, #0
   26084:	mov	r2, r1
   26088:	bgt	26070 <__assert_fail@plt+0x14910>
   2608c:	ldr	r1, [r6, #60]	; 0x3c
   26090:	and	r0, r1, #1
   26094:	tst	r4, #1024	; 0x400
   26098:	eor	r2, r0, #1
   2609c:	beq	26130 <__assert_fail@plt+0x149d0>
   260a0:	cmp	r0, #0
   260a4:	beq	26154 <__assert_fail@plt+0x149f4>
   260a8:	b	26130 <__assert_fail@plt+0x149d0>
   260ac:	mov	r8, #1
   260b0:	mov	r0, r8
   260b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   260b8:	ldr	r2, [r6, #68]	; 0x44
   260bc:	ubfx	r3, r1, #5, #3
   260c0:	and	r7, r1, #31
   260c4:	mov	r1, #1
   260c8:	ldr	r3, [r2, r3, lsl #2]
   260cc:	mov	r2, #0
   260d0:	tst	r3, r1, lsl r7
   260d4:	bne	26130 <__assert_fail@plt+0x149d0>
   260d8:	mov	r1, #0
   260dc:	cmp	r0, #10
   260e0:	beq	26114 <__assert_fail@plt+0x149b4>
   260e4:	b	26120 <__assert_fail@plt+0x149c0>
   260e8:	ldr	r3, [r6, #84]	; 0x54
   260ec:	ldrb	r3, [r3, #128]	; 0x80
   260f0:	tst	r3, #128	; 0x80
   260f4:	bne	26154 <__assert_fail@plt+0x149f4>
   260f8:	b	2603c <__assert_fail@plt+0x148dc>
   260fc:	ldrb	r0, [r6, #78]	; 0x4e
   26100:	cmp	r0, #0
   26104:	bne	26194 <__assert_fail@plt+0x14a34>
   26108:	mov	r1, #0
   2610c:	cmp	r7, #10
   26110:	bne	26120 <__assert_fail@plt+0x149c0>
   26114:	ldrb	r1, [r6, #77]	; 0x4d
   26118:	cmp	r1, #0
   2611c:	movwne	r1, #2
   26120:	and	r0, r1, #1
   26124:	tst	r4, #1024	; 0x400
   26128:	eor	r2, r0, #1
   2612c:	bne	260a0 <__assert_fail@plt+0x14940>
   26130:	ldr	r0, [r9, #4]
   26134:	cmp	r2, #0
   26138:	bne	26144 <__assert_fail@plt+0x149e4>
   2613c:	ands	r2, r0, #2048	; 0x800
   26140:	bne	26154 <__assert_fail@plt+0x149f4>
   26144:	tst	r1, #2
   26148:	bne	2615c <__assert_fail@plt+0x149fc>
   2614c:	ands	r2, r0, #8192	; 0x2000
   26150:	beq	2615c <__assert_fail@plt+0x149fc>
   26154:	mov	r0, r8
   26158:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2615c:	and	r0, r0, #32768	; 0x8000
   26160:	mov	r2, #1
   26164:	and	r1, r1, #8
   26168:	eor	r0, r2, r0, lsr #15
   2616c:	orr	r0, r0, r1, lsr #3
   26170:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26174:	ldr	r0, [r6, #88]	; 0x58
   26178:	and	r0, r0, #2
   2617c:	eor	r1, r0, #10
   26180:	and	r0, r1, #1
   26184:	tst	r4, #1024	; 0x400
   26188:	eor	r2, r0, #1
   2618c:	bne	260a0 <__assert_fail@plt+0x14940>
   26190:	b	26130 <__assert_fail@plt+0x149d0>
   26194:	mov	r0, r7
   26198:	bl	1164c <iswalnum@plt>
   2619c:	mov	r1, #1
   261a0:	mov	r2, #0
   261a4:	cmp	r7, #95	; 0x5f
   261a8:	beq	26130 <__assert_fail@plt+0x149d0>
   261ac:	cmp	r0, #0
   261b0:	beq	26108 <__assert_fail@plt+0x149a8>
   261b4:	b	26130 <__assert_fail@plt+0x149d0>
   261b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261bc:	add	fp, sp, #28
   261c0:	sub	sp, sp, #4
   261c4:	vpush	{d8-d9}
   261c8:	sub	sp, sp, #216	; 0xd8
   261cc:	sub	sp, sp, #14336	; 0x3800
   261d0:	sub	lr, fp, #1024	; 0x400
   261d4:	mov	r5, #0
   261d8:	mov	sl, r0
   261dc:	vmov.i32	q4, #0	; 0x00000000
   261e0:	str	r1, [sp, #88]	; 0x58
   261e4:	sub	r2, lr, #56	; 0x38
   261e8:	str	r5, [r1, #44]	; 0x2c
   261ec:	str	r5, [r1, #48]	; 0x30
   261f0:	mov	r0, r2
   261f4:	vst1.64	{d8-d9}, [r0]!
   261f8:	vst1.64	{d8-d9}, [r0]
   261fc:	ldr	r0, [r1, #8]
   26200:	cmp	r0, #1
   26204:	blt	279e0 <__assert_fail@plt+0x16280>
   26208:	add	r0, sp, #160	; 0xa0
   2620c:	mov	r5, #0
   26210:	str	sl, [sp, #16]
   26214:	add	r0, r0, #28
   26218:	str	r0, [sp, #12]
   2621c:	add	r0, sl, #112	; 0x70
   26220:	str	r0, [sp, #4]
   26224:	add	r0, sl, #96	; 0x60
   26228:	str	r0, [sp]
   2622c:	add	r0, r2, #16
   26230:	str	r0, [sp, #8]
   26234:	mov	r0, #0
   26238:	str	r0, [sp, #112]	; 0x70
   2623c:	ldr	r0, [sp, #88]	; 0x58
   26240:	ldr	r1, [sp, #112]	; 0x70
   26244:	ldr	r3, [sl]
   26248:	ldr	r0, [r0, #12]
   2624c:	ldr	r2, [r0, r1, lsl #2]
   26250:	add	r0, r3, r2, lsl #3
   26254:	ldr	r1, [r0, #4]
   26258:	uxtb	ip, r1
   2625c:	cmp	ip, #1
   26260:	bne	26368 <__assert_fail@plt+0x14c08>
   26264:	mov	r8, r2
   26268:	ldrb	r2, [r3, r2, lsl #3]
   2626c:	sub	lr, fp, #1024	; 0x400
   26270:	mov	r0, r3
   26274:	mov	r4, r5
   26278:	mov	r5, #1
   2627c:	sub	r7, lr, #56	; 0x38
   26280:	mov	r6, r7
   26284:	ubfx	r3, r2, #5, #3
   26288:	ldr	sl, [sp, #16]
   2628c:	and	r2, r2, #31
   26290:	ldr	r7, [r7, r3, lsl #2]
   26294:	orr	r2, r7, r5, lsl r2
   26298:	mov	r5, r4
   2629c:	str	r2, [r6, r3, lsl #2]
   262a0:	movw	r2, #65280	; 0xff00
   262a4:	movt	r2, #3
   262a8:	ands	r2, r1, r2
   262ac:	mov	r2, r0
   262b0:	beq	266c0 <__assert_fail@plt+0x14f60>
   262b4:	tst	r1, #8192	; 0x2000
   262b8:	beq	262e8 <__assert_fail@plt+0x14b88>
   262bc:	mov	r0, r2
   262c0:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   262c4:	sub	lr, fp, #1024	; 0x400
   262c8:	sub	r3, lr, #56	; 0x38
   262cc:	vst1.64	{d8-d9}, [r3]!
   262d0:	vst1.64	{d8-d9}, [r3]
   262d4:	tst	r2, #1024	; 0x400
   262d8:	beq	26f94 <__assert_fail@plt+0x15834>
   262dc:	mov	r2, #1024	; 0x400
   262e0:	str	r2, [fp, #-1080]	; 0xfffffbc8
   262e4:	mov	r2, r0
   262e8:	tst	r1, #32768	; 0x8000
   262ec:	bne	26464 <__assert_fail@plt+0x14d04>
   262f0:	tst	r1, #1024	; 0x400
   262f4:	bne	2644c <__assert_fail@plt+0x14cec>
   262f8:	tst	r1, #2048	; 0x800
   262fc:	beq	266c0 <__assert_fail@plt+0x14f60>
   26300:	tst	r1, #4194304	; 0x400000
   26304:	beq	26310 <__assert_fail@plt+0x14bb0>
   26308:	cmp	ip, #1
   2630c:	beq	26464 <__assert_fail@plt+0x14d04>
   26310:	ldr	r1, [sl, #92]	; 0x5c
   26314:	mov	r0, r2
   26318:	cmp	r1, #1
   2631c:	ble	26648 <__assert_fail@plt+0x14ee8>
   26320:	ldr	r1, [sl, #60]	; 0x3c
   26324:	ldr	r2, [sp]
   26328:	sub	lr, fp, #1024	; 0x400
   2632c:	vld1.32	{d16-d17}, [r2]
   26330:	vld1.32	{d18-d19}, [r1]!
   26334:	sub	r2, lr, #56	; 0x38
   26338:	vld1.64	{d20-d21}, [r2]
   2633c:	vand	q8, q9, q8
   26340:	vbic	q9, q10, q8
   26344:	vst1.64	{d18-d19}, [r2]
   26348:	ldr	r2, [sp, #4]
   2634c:	vld1.32	{d20-d21}, [r1]
   26350:	ldr	r1, [sp, #8]
   26354:	vld1.32	{d16-d17}, [r2]
   26358:	vld1.32	{d22-d23}, [r1]
   2635c:	vand	q8, q10, q8
   26360:	vbic	q8, q11, q8
   26364:	b	26678 <__assert_fail@plt+0x14f18>
   26368:	mov	r0, r3
   2636c:	mov	r8, r2
   26370:	cmp	ip, #7
   26374:	beq	263bc <__assert_fail@plt+0x14c5c>
   26378:	cmp	ip, #5
   2637c:	beq	26408 <__assert_fail@plt+0x14ca8>
   26380:	cmp	ip, #3
   26384:	bne	26f94 <__assert_fail@plt+0x15834>
   26388:	ldr	r2, [r0, r8, lsl #3]
   2638c:	sub	lr, fp, #1024	; 0x400
   26390:	sub	r3, lr, #56	; 0x38
   26394:	vld1.64	{d16-d17}, [r3]
   26398:	vld1.32	{d18-d19}, [r2]!
   2639c:	vorr	q8, q8, q9
   263a0:	vst1.64	{d16-d17}, [r3]
   263a4:	vld1.32	{d16-d17}, [r2]
   263a8:	ldr	r2, [sp, #8]
   263ac:	vld1.32	{d18-d19}, [r2]
   263b0:	vorr	q8, q9, q8
   263b4:	vst1.32	{d16-d17}, [r2]
   263b8:	b	262a0 <__assert_fail@plt+0x14b40>
   263bc:	mvn	r2, #0
   263c0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   263c4:	str	r2, [fp, #-1072]	; 0xfffffbd0
   263c8:	str	r2, [fp, #-1076]	; 0xfffffbcc
   263cc:	str	r2, [fp, #-1080]	; 0xfffffbc8
   263d0:	ldr	r3, [sl, #128]	; 0x80
   263d4:	and	r2, r3, #128	; 0x80
   263d8:	ands	r3, r3, #64	; 0x40
   263dc:	beq	263e8 <__assert_fail@plt+0x14c88>
   263e0:	cmp	r2, #0
   263e4:	beq	262a0 <__assert_fail@plt+0x14b40>
   263e8:	cmp	r3, #0
   263ec:	mvn	r3, #1
   263f0:	movweq	r3, #64510	; 0xfbfe
   263f4:	movteq	r3, #65535	; 0xffff
   263f8:	cmp	r2, #0
   263fc:	mvneq	r3, #1024	; 0x400
   26400:	str	r3, [fp, #-1080]	; 0xfffffbc8
   26404:	b	262a0 <__assert_fail@plt+0x14b40>
   26408:	ldr	r2, [sl, #92]	; 0x5c
   2640c:	cmp	r2, #2
   26410:	blt	26470 <__assert_fail@plt+0x14d10>
   26414:	ldr	r2, [sl, #60]	; 0x3c
   26418:	sub	lr, fp, #1024	; 0x400
   2641c:	sub	r3, lr, #56	; 0x38
   26420:	vld1.64	{d16-d17}, [r3]
   26424:	vld1.32	{d18-d19}, [r2]!
   26428:	vorr	q8, q8, q9
   2642c:	vst1.64	{d16-d17}, [r3]
   26430:	vld1.32	{d18-d19}, [r2]
   26434:	ldr	r2, [sp, #8]
   26438:	vld1.32	{d20-d21}, [r2]
   2643c:	vorr	q9, q10, q9
   26440:	vst1.32	{d18-d19}, [r2]
   26444:	vmov.32	r2, d16[0]
   26448:	b	26494 <__assert_fail@plt+0x14d34>
   2644c:	mov	r0, r2
   26450:	movw	r2, #255	; 0xff
   26454:	movt	r2, #64	; 0x40
   26458:	and	r2, r1, r2
   2645c:	cmp	r2, #1
   26460:	bne	264c0 <__assert_fail@plt+0x14d60>
   26464:	sub	lr, fp, #1024	; 0x400
   26468:	sub	r0, lr, #56	; 0x38
   2646c:	b	26f8c <__assert_fail@plt+0x1582c>
   26470:	mvn	r2, #0
   26474:	str	r2, [fp, #-1052]	; 0xfffffbe4
   26478:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2647c:	str	r2, [fp, #-1060]	; 0xfffffbdc
   26480:	str	r2, [fp, #-1064]	; 0xfffffbd8
   26484:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26488:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2648c:	str	r2, [fp, #-1076]	; 0xfffffbcc
   26490:	str	r2, [fp, #-1080]	; 0xfffffbc8
   26494:	ldr	r3, [sl, #128]	; 0x80
   26498:	ands	r7, r3, #64	; 0x40
   2649c:	and	r3, r3, #128	; 0x80
   264a0:	biceq	r2, r2, #1024	; 0x400
   264a4:	beq	264b0 <__assert_fail@plt+0x14d50>
   264a8:	cmp	r3, #0
   264ac:	beq	262a0 <__assert_fail@plt+0x14b40>
   264b0:	cmp	r3, #0
   264b4:	bicne	r2, r2, #1
   264b8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   264bc:	b	262a0 <__assert_fail@plt+0x14b40>
   264c0:	ldr	r2, [sl, #92]	; 0x5c
   264c4:	cmp	r2, #1
   264c8:	ble	26560 <__assert_fail@plt+0x14e00>
   264cc:	ldr	r2, [sl, #60]	; 0x3c
   264d0:	ldr	r3, [sp]
   264d4:	sub	lr, fp, #1024	; 0x400
   264d8:	vld1.32	{d16-d17}, [r3]
   264dc:	vld1.32	{d18-d19}, [r2]!
   264e0:	sub	r3, lr, #56	; 0x38
   264e4:	vld1.64	{d20-d21}, [r3]
   264e8:	vorn	q8, q8, q9
   264ec:	vand	q8, q10, q8
   264f0:	vst1.64	{d16-d17}, [r3]
   264f4:	vmov.32	r3, d16[1]
   264f8:	vld1.32	{d18-d19}, [r2]
   264fc:	ldr	r2, [sp, #4]
   26500:	vld1.32	{d20-d21}, [r2]
   26504:	ldr	r2, [sp, #8]
   26508:	vld1.32	{d22-d23}, [r2]
   2650c:	vorn	q9, q10, q9
   26510:	vand	q9, q11, q9
   26514:	vst1.32	{d18-d19}, [r2]
   26518:	vmov.32	r2, d16[0]
   2651c:	orr	r2, r3, r2
   26520:	vmov.32	r3, d17[0]
   26524:	orr	r2, r2, r3
   26528:	vmov.32	r3, d17[1]
   2652c:	orr	r2, r2, r3
   26530:	vmov.32	r3, d18[0]
   26534:	orr	r2, r2, r3
   26538:	vmov.32	r3, d18[1]
   2653c:	orr	r2, r2, r3
   26540:	vmov.32	r3, d19[0]
   26544:	orr	r2, r2, r3
   26548:	vmov.32	r3, d19[1]
   2654c:	orr	r2, r2, r3
   26550:	cmp	r2, #0
   26554:	mov	r2, r0
   26558:	bne	262f8 <__assert_fail@plt+0x14b98>
   2655c:	b	26f94 <__assert_fail@plt+0x15834>
   26560:	ldr	r2, [sl, #112]	; 0x70
   26564:	str	r0, [sp, #24]
   26568:	str	r8, [sp, #28]
   2656c:	str	r5, [sp, #156]	; 0x9c
   26570:	ldr	r3, [sl, #96]	; 0x60
   26574:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   26578:	ldr	r0, [sl, #100]	; 0x64
   2657c:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   26580:	ldr	r8, [sl, #104]	; 0x68
   26584:	ldr	r9, [sl, #108]	; 0x6c
   26588:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2658c:	str	r2, [sp, #140]	; 0x8c
   26590:	ldr	r2, [sl, #116]	; 0x74
   26594:	and	lr, r5, r0
   26598:	and	r7, r4, r3
   2659c:	ldr	r0, [sp, #140]	; 0x8c
   265a0:	str	r2, [sp, #144]	; 0x90
   265a4:	ldr	r2, [sl, #120]	; 0x78
   265a8:	str	r2, [sp, #148]	; 0x94
   265ac:	ldr	r2, [sl, #124]	; 0x7c
   265b0:	and	sl, r6, r8
   265b4:	ldr	r8, [sp, #28]
   265b8:	str	r2, [sp, #152]	; 0x98
   265bc:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   265c0:	str	r7, [fp, #-1080]	; 0xfffffbc8
   265c4:	str	lr, [fp, #-1076]	; 0xfffffbcc
   265c8:	str	sl, [fp, #-1072]	; 0xfffffbd0
   265cc:	orr	r7, lr, r7
   265d0:	orr	r7, r7, sl
   265d4:	ldr	sl, [sp, #16]
   265d8:	and	r2, r2, r9
   265dc:	str	r2, [fp, #-1068]	; 0xfffffbd4
   265e0:	orr	r2, r7, r2
   265e4:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   265e8:	and	r9, r6, r0
   265ec:	ldr	r0, [sp, #144]	; 0x90
   265f0:	str	r9, [fp, #-1064]	; 0xfffffbd8
   265f4:	orr	r2, r2, r9
   265f8:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   265fc:	and	r4, r4, r0
   26600:	ldr	r0, [sp, #148]	; 0x94
   26604:	str	r4, [fp, #-1060]	; 0xfffffbdc
   26608:	orr	r2, r2, r4
   2660c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   26610:	and	r3, r3, r0
   26614:	ldr	r0, [sp, #152]	; 0x98
   26618:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2661c:	orr	r2, r2, r3
   26620:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   26624:	and	r6, r5, r0
   26628:	ldr	r0, [sp, #24]
   2662c:	ldr	r5, [sp, #156]	; 0x9c
   26630:	str	r6, [fp, #-1052]	; 0xfffffbe4
   26634:	orr	r2, r2, r6
   26638:	cmp	r2, #0
   2663c:	mov	r2, r0
   26640:	bne	262f8 <__assert_fail@plt+0x14b98>
   26644:	b	26f94 <__assert_fail@plt+0x15834>
   26648:	ldr	r1, [sp]
   2664c:	sub	lr, fp, #1024	; 0x400
   26650:	vld1.32	{d16-d17}, [r1]
   26654:	sub	r1, lr, #56	; 0x38
   26658:	vld1.64	{d18-d19}, [r1]
   2665c:	vbic	q9, q9, q8
   26660:	vst1.64	{d18-d19}, [r1]
   26664:	ldr	r1, [sp, #4]
   26668:	vld1.32	{d16-d17}, [r1]
   2666c:	ldr	r1, [sp, #8]
   26670:	vld1.32	{d20-d21}, [r1]
   26674:	vbic	q8, q10, q8
   26678:	vst1.32	{d16-d17}, [r1]
   2667c:	vmov.32	r1, d18[0]
   26680:	vmov.32	r2, d18[1]
   26684:	orr	r1, r2, r1
   26688:	vmov.32	r2, d19[0]
   2668c:	orr	r1, r1, r2
   26690:	vmov.32	r2, d19[1]
   26694:	orr	r1, r1, r2
   26698:	vmov.32	r2, d16[0]
   2669c:	orr	r1, r1, r2
   266a0:	vmov.32	r2, d16[1]
   266a4:	orr	r1, r1, r2
   266a8:	vmov.32	r2, d17[0]
   266ac:	orr	r1, r1, r2
   266b0:	vmov.32	r2, d17[1]
   266b4:	orrs	r1, r1, r2
   266b8:	mov	r2, r0
   266bc:	beq	26f94 <__assert_fail@plt+0x15834>
   266c0:	cmp	r5, #1
   266c4:	blt	26ad0 <__assert_fail@plt+0x15370>
   266c8:	ldr	r6, [sp, #12]
   266cc:	cmp	ip, #1
   266d0:	bne	26ae0 <__assert_fail@plt+0x15380>
   266d4:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   266d8:	ldr	r7, [fp, #-1080]	; 0xfffffbc8
   266dc:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   266e0:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   266e4:	ldr	lr, [fp, #-1068]	; 0xfffffbd4
   266e8:	str	r5, [sp, #156]	; 0x9c
   266ec:	mov	r4, #0
   266f0:	str	r6, [sp, #148]	; 0x94
   266f4:	add	r5, sp, #160	; 0xa0
   266f8:	mov	ip, r8
   266fc:	str	r8, [sp, #28]
   26700:	str	r2, [sp, #24]
   26704:	str	r0, [sp, #140]	; 0x8c
   26708:	sub	r0, fp, #6144	; 0x1800
   2670c:	sub	r6, r0, #104	; 0x68
   26710:	ldrb	r0, [r2, ip, lsl #3]
   26714:	mov	r8, r2
   26718:	mov	r2, #1
   2671c:	ubfx	r1, r0, #5, #3
   26720:	and	r0, r0, #31
   26724:	add	r1, r5, r1, lsl #2
   26728:	ldr	r1, [r1, r4, lsl #5]
   2672c:	tst	r1, r2, lsl r0
   26730:	beq	269a4 <__assert_fail@plt+0x15244>
   26734:	add	r0, r5, r4, lsl #5
   26738:	str	r6, [sp, #116]	; 0x74
   2673c:	str	r4, [sp, #152]	; 0x98
   26740:	add	ip, r0, #8
   26744:	ldr	r6, [r0, #4]
   26748:	ldm	ip, {r1, r3, ip}
   2674c:	ldr	r5, [sp, #148]	; 0x94
   26750:	str	lr, [sp, #136]	; 0x88
   26754:	str	sl, [sp, #132]	; 0x84
   26758:	ldr	r8, [fp, #-1052]	; 0xfffffbe4
   2675c:	str	r6, [sp, #124]	; 0x7c
   26760:	and	r6, r6, sl
   26764:	ldr	sl, [fp, #-1056]	; 0xfffffbe0
   26768:	ldr	r2, [r5, #-28]	; 0xffffffe4
   2676c:	and	r4, r1, r9
   26770:	str	r6, [sp, #84]	; 0x54
   26774:	str	r1, [sp, #104]	; 0x68
   26778:	ldr	r1, [r5]
   2677c:	str	ip, [sp, #144]	; 0x90
   26780:	str	r3, [sp, #108]	; 0x6c
   26784:	str	r8, [sp, #100]	; 0x64
   26788:	str	r4, [sp, #96]	; 0x60
   2678c:	str	r2, [sp, #120]	; 0x78
   26790:	and	r2, r2, r7
   26794:	str	r1, [sp, #128]	; 0x80
   26798:	and	r1, r1, r8
   2679c:	str	r2, [sp, #92]	; 0x5c
   267a0:	orr	r2, r6, r2
   267a4:	and	r6, r3, lr
   267a8:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   267ac:	orr	r2, r2, r4
   267b0:	str	r6, [sp, #80]	; 0x50
   267b4:	orr	r2, r2, r6
   267b8:	ldr	r6, [sp, #140]	; 0x8c
   267bc:	and	r4, ip, r6
   267c0:	str	r4, [sp, #76]	; 0x4c
   267c4:	orr	r4, r2, r4
   267c8:	ldr	r2, [r0, #20]
   267cc:	and	r6, r2, lr
   267d0:	str	r6, [sp, #72]	; 0x48
   267d4:	orr	r6, r4, r6
   267d8:	ldr	r4, [r0, #24]
   267dc:	and	ip, r4, sl
   267e0:	orr	r6, r6, ip
   267e4:	str	ip, [sp, #68]	; 0x44
   267e8:	orrs	r6, r6, r1
   267ec:	beq	269b0 <__assert_fail@plt+0x15250>
   267f0:	str	r1, [sp, #20]
   267f4:	ldr	r1, [sp, #120]	; 0x78
   267f8:	mov	r8, r2
   267fc:	str	r2, [sp, #44]	; 0x2c
   26800:	ldr	r2, [sp, #132]	; 0x84
   26804:	ldr	ip, [sp, #104]	; 0x68
   26808:	ldr	r3, [sp, #140]	; 0x8c
   2680c:	bic	r6, r7, r1
   26810:	ldr	r1, [sp, #124]	; 0x7c
   26814:	str	r6, [sp, #64]	; 0x40
   26818:	bic	r6, r2, r1
   2681c:	ldr	r2, [sp, #108]	; 0x6c
   26820:	ldr	r1, [sp, #136]	; 0x88
   26824:	str	r6, [sp, #48]	; 0x30
   26828:	bic	r6, r9, ip
   2682c:	str	r6, [sp, #60]	; 0x3c
   26830:	bic	r6, r1, r2
   26834:	ldr	r1, [sp, #144]	; 0x90
   26838:	str	r6, [sp, #56]	; 0x38
   2683c:	bic	r6, r3, r1
   26840:	ldr	r1, [sp, #128]	; 0x80
   26844:	ldr	r3, [sp, #120]	; 0x78
   26848:	str	r6, [sp, #52]	; 0x34
   2684c:	bic	r6, lr, r8
   26850:	ldr	r8, [sp, #100]	; 0x64
   26854:	str	r6, [sp, #40]	; 0x28
   26858:	str	r6, [fp, #-1060]	; 0xfffffbdc
   2685c:	bic	r6, sl, r4
   26860:	str	r6, [sp, #36]	; 0x24
   26864:	str	r6, [fp, #-1056]	; 0xfffffbe0
   26868:	bic	r7, r3, r7
   2686c:	ldr	r3, [sp, #124]	; 0x7c
   26870:	bic	r6, r8, r1
   26874:	bic	r1, ip, r9
   26878:	str	r6, [sp, #32]
   2687c:	str	r6, [fp, #-1052]	; 0xfffffbe4
   26880:	ldr	r6, [sp, #132]	; 0x84
   26884:	bic	r3, r3, r6
   26888:	orr	r6, r3, r7
   2688c:	str	r3, [sp, #132]	; 0x84
   26890:	mov	r3, r7
   26894:	ldr	r7, [sp, #136]	; 0x88
   26898:	orr	r6, r6, r1
   2689c:	bic	r2, r2, r7
   268a0:	ldr	r7, [sp, #140]	; 0x8c
   268a4:	str	r2, [sp, #136]	; 0x88
   268a8:	orr	r6, r6, r2
   268ac:	ldr	r2, [sp, #144]	; 0x90
   268b0:	bic	ip, r2, r7
   268b4:	ldr	r2, [sp, #44]	; 0x2c
   268b8:	orr	r6, r6, ip
   268bc:	bic	lr, r2, lr
   268c0:	bic	r2, r4, sl
   268c4:	ldr	r4, [sp, #128]	; 0x80
   268c8:	orr	r6, r6, lr
   268cc:	orr	r6, r6, r2
   268d0:	bic	r7, r4, r8
   268d4:	orrs	r6, r6, r7
   268d8:	beq	269d0 <__assert_fail@plt+0x15270>
   268dc:	ldr	r4, [sp, #156]	; 0x9c
   268e0:	add	r6, sp, #160	; 0xa0
   268e4:	str	r3, [r6, r4, lsl #5]
   268e8:	ldr	r3, [sp, #132]	; 0x84
   268ec:	add	r6, r6, r4, lsl #5
   268f0:	str	r3, [r6, #4]
   268f4:	str	r1, [r6, #8]
   268f8:	ldr	r1, [sp, #136]	; 0x88
   268fc:	add	r3, r6, #12
   26900:	stm	r3, {r1, ip, lr}
   26904:	str	r2, [r6, #24]
   26908:	str	r7, [r6, #28]
   2690c:	sub	lr, fp, #6144	; 0x1800
   26910:	str	r4, [sp, #156]	; 0x9c
   26914:	ldr	r1, [sp, #92]	; 0x5c
   26918:	ldr	r6, [sp, #116]	; 0x74
   2691c:	str	r1, [r5, #-28]	; 0xffffffe4
   26920:	ldr	r1, [sp, #84]	; 0x54
   26924:	str	r1, [r0, #4]
   26928:	ldr	r1, [sp, #96]	; 0x60
   2692c:	str	r1, [r0, #8]
   26930:	ldr	r1, [sp, #80]	; 0x50
   26934:	str	r1, [r0, #12]
   26938:	ldr	r1, [sp, #76]	; 0x4c
   2693c:	str	r1, [r0, #16]
   26940:	ldr	r1, [sp, #72]	; 0x48
   26944:	str	r1, [r0, #20]
   26948:	ldr	r1, [sp, #68]	; 0x44
   2694c:	str	r1, [r0, #24]
   26950:	ldr	r0, [sp, #20]
   26954:	sub	r1, lr, #104	; 0x68
   26958:	str	r0, [r5]
   2695c:	add	r0, r4, r4, lsl #1
   26960:	add	r5, r1, r0, lsl #2
   26964:	ldr	r0, [r6, #4]
   26968:	mov	r4, r5
   2696c:	str	r0, [r4, #4]!
   26970:	ldr	r8, [r6, #4]
   26974:	cmp	r8, #0
   26978:	ble	269dc <__assert_fail@plt+0x1527c>
   2697c:	str	r0, [r5]
   26980:	lsl	r0, r0, #2
   26984:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   26988:	cmp	r0, #0
   2698c:	str	r0, [r5, #8]
   26990:	beq	27974 <__assert_fail@plt+0x16214>
   26994:	ldr	r1, [r6, #8]
   26998:	lsl	r2, r8, #2
   2699c:	bl	11484 <memcpy@plt>
   269a0:	b	269ec <__assert_fail@plt+0x1528c>
   269a4:	str	r9, [sp, #144]	; 0x90
   269a8:	mov	r2, r8
   269ac:	b	26a7c <__assert_fail@plt+0x1531c>
   269b0:	ldr	r4, [sp, #152]	; 0x98
   269b4:	ldr	ip, [sp, #28]
   269b8:	ldr	r2, [sp, #24]
   269bc:	ldr	r6, [sp, #116]	; 0x74
   269c0:	ldr	lr, [sp, #136]	; 0x88
   269c4:	ldr	sl, [sp, #132]	; 0x84
   269c8:	str	r9, [sp, #144]	; 0x90
   269cc:	b	26a80 <__assert_fail@plt+0x15320>
   269d0:	ldr	r4, [sp, #152]	; 0x98
   269d4:	ldr	r6, [sp, #116]	; 0x74
   269d8:	b	269fc <__assert_fail@plt+0x1529c>
   269dc:	mov	r0, #0
   269e0:	str	r0, [r5]
   269e4:	str	r0, [r5, #4]
   269e8:	str	r0, [r5, #8]
   269ec:	ldr	r0, [sp, #156]	; 0x9c
   269f0:	ldr	r4, [sp, #152]	; 0x98
   269f4:	add	r0, r0, #1
   269f8:	str	r0, [sp, #156]	; 0x9c
   269fc:	ldr	r0, [sp, #88]	; 0x58
   26a00:	ldr	r1, [sp, #112]	; 0x70
   26a04:	ldr	r0, [r0, #12]
   26a08:	ldr	r1, [r0, r1, lsl #2]
   26a0c:	mov	r0, r6
   26a10:	bl	219d4 <__assert_fail@plt+0x10274>
   26a14:	cmp	r0, #0
   26a18:	beq	27464 <__assert_fail@plt+0x15d04>
   26a1c:	ldr	r2, [sp, #64]	; 0x40
   26a20:	ldr	sl, [sp, #48]	; 0x30
   26a24:	ldr	r9, [sp, #60]	; 0x3c
   26a28:	ldr	lr, [sp, #56]	; 0x38
   26a2c:	ldr	r1, [sp, #52]	; 0x34
   26a30:	ldr	r5, [sp, #40]	; 0x28
   26a34:	orr	r0, sl, r2
   26a38:	orr	r0, r0, r9
   26a3c:	orr	r0, r0, lr
   26a40:	orr	r0, r0, r1
   26a44:	orr	r0, r0, r5
   26a48:	ldr	r5, [sp, #36]	; 0x24
   26a4c:	orr	r0, r0, r5
   26a50:	ldr	r5, [sp, #32]
   26a54:	orrs	r0, r0, r5
   26a58:	mov	r0, #0
   26a5c:	movweq	r0, #17
   26a60:	cmp	r0, #0
   26a64:	bne	26fbc <__assert_fail@plt+0x1585c>
   26a68:	mov	r7, r2
   26a6c:	ldr	ip, [sp, #28]
   26a70:	ldr	r2, [sp, #24]
   26a74:	str	r1, [sp, #140]	; 0x8c
   26a78:	str	r9, [sp, #144]	; 0x90
   26a7c:	ldr	r5, [sp, #148]	; 0x94
   26a80:	ldr	r3, [sp, #156]	; 0x9c
   26a84:	ldr	r9, [sp, #144]	; 0x90
   26a88:	add	r5, r5, #32
   26a8c:	add	r4, r4, #1
   26a90:	add	r6, r6, #12
   26a94:	str	r5, [sp, #148]	; 0x94
   26a98:	add	r5, sp, #160	; 0xa0
   26a9c:	cmp	r4, r3
   26aa0:	blt	26710 <__assert_fail@plt+0x14fb0>
   26aa4:	ldr	r5, [sp, #156]	; 0x9c
   26aa8:	ldr	r0, [sp, #140]	; 0x8c
   26aac:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26ab0:	str	r7, [fp, #-1080]	; 0xfffffbc8
   26ab4:	str	r9, [fp, #-1072]	; 0xfffffbd0
   26ab8:	str	lr, [fp, #-1068]	; 0xfffffbd4
   26abc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26ac0:	ldr	sl, [sp, #16]
   26ac4:	cmp	r4, r5
   26ac8:	beq	26f10 <__assert_fail@plt+0x157b0>
   26acc:	b	26f94 <__assert_fail@plt+0x15834>
   26ad0:	mov	r4, #0
   26ad4:	cmp	r4, r5
   26ad8:	beq	26f10 <__assert_fail@plt+0x157b0>
   26adc:	b	26f94 <__assert_fail@plt+0x15834>
   26ae0:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   26ae4:	ldr	r9, [fp, #-1080]	; 0xfffffbc8
   26ae8:	ldr	ip, [fp, #-1072]	; 0xfffffbd0
   26aec:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   26af0:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   26af4:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   26af8:	sub	lr, fp, #6144	; 0x1800
   26afc:	mov	r4, #0
   26b00:	str	r0, [sp, #144]	; 0x90
   26b04:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   26b08:	mov	r3, ip
   26b0c:	mov	r7, r9
   26b10:	str	r2, [sp, #80]	; 0x50
   26b14:	str	sl, [sp, #76]	; 0x4c
   26b18:	str	r0, [sp, #140]	; 0x8c
   26b1c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   26b20:	str	r0, [sp, #84]	; 0x54
   26b24:	sub	r0, lr, #104	; 0x68
   26b28:	str	r0, [sp, #148]	; 0x94
   26b2c:	mov	r0, r6
   26b30:	add	r1, sp, #160	; 0xa0
   26b34:	str	r9, [sp, #136]	; 0x88
   26b38:	str	r7, [sp, #120]	; 0x78
   26b3c:	str	r3, [sp, #92]	; 0x5c
   26b40:	str	r8, [sp, #96]	; 0x60
   26b44:	str	ip, [sp, #124]	; 0x7c
   26b48:	str	sl, [sp, #128]	; 0x80
   26b4c:	str	r2, [sp, #132]	; 0x84
   26b50:	str	r5, [sp, #156]	; 0x9c
   26b54:	str	r4, [sp, #152]	; 0x98
   26b58:	add	r9, r1, r4, lsl #5
   26b5c:	ldmib	r9, {sl, ip}
   26b60:	ldr	lr, [r0, #-28]	; 0xffffffe4
   26b64:	ldr	r5, [r0]
   26b68:	str	r0, [sp, #116]	; 0x74
   26b6c:	ldr	r4, [r9, #12]
   26b70:	ldr	r6, [r9, #16]
   26b74:	and	r0, lr, r7
   26b78:	ldr	r7, [sp, #76]	; 0x4c
   26b7c:	and	r1, ip, r3
   26b80:	str	r4, [sp, #108]	; 0x6c
   26b84:	str	r6, [sp, #104]	; 0x68
   26b88:	str	r5, [sp, #100]	; 0x64
   26b8c:	str	r0, [sp, #68]	; 0x44
   26b90:	str	r1, [sp, #72]	; 0x48
   26b94:	and	r2, sl, r7
   26b98:	orr	r0, r2, r0
   26b9c:	str	r2, [sp, #64]	; 0x40
   26ba0:	orr	r0, r0, r1
   26ba4:	ldr	r1, [sp, #80]	; 0x50
   26ba8:	and	r2, r4, r1
   26bac:	ldr	r4, [sp, #140]	; 0x8c
   26bb0:	str	r2, [sp, #60]	; 0x3c
   26bb4:	orr	r0, r0, r2
   26bb8:	and	r2, r6, r8
   26bbc:	ldr	r8, [sp, #84]	; 0x54
   26bc0:	str	r2, [sp, #56]	; 0x38
   26bc4:	orr	r0, r0, r2
   26bc8:	ldr	r2, [r9, #20]
   26bcc:	and	r3, r2, r8
   26bd0:	str	r3, [sp, #52]	; 0x34
   26bd4:	orr	r0, r0, r3
   26bd8:	ldr	r3, [r9, #24]
   26bdc:	and	r6, r3, r4
   26be0:	str	r6, [sp, #48]	; 0x30
   26be4:	orr	r0, r0, r6
   26be8:	ldr	r6, [sp, #144]	; 0x90
   26bec:	and	r6, r5, r6
   26bf0:	orrs	r0, r0, r6
   26bf4:	beq	26da8 <__assert_fail@plt+0x15648>
   26bf8:	ldr	r0, [sp, #120]	; 0x78
   26bfc:	ldr	r5, [sp, #92]	; 0x5c
   26c00:	str	sl, [sp, #24]
   26c04:	str	r6, [sp, #20]
   26c08:	ldr	r6, [sp, #144]	; 0x90
   26c0c:	str	ip, [sp, #28]
   26c10:	str	r4, [sp, #140]	; 0x8c
   26c14:	bic	r0, r0, lr
   26c18:	str	r0, [sp, #136]	; 0x88
   26c1c:	bic	r0, r7, sl
   26c20:	ldr	sl, [sp, #96]	; 0x60
   26c24:	str	r0, [sp, #128]	; 0x80
   26c28:	bic	r0, r5, ip
   26c2c:	str	r0, [sp, #124]	; 0x7c
   26c30:	ldr	r0, [sp, #108]	; 0x6c
   26c34:	bic	r0, r1, r0
   26c38:	str	r0, [sp, #132]	; 0x84
   26c3c:	ldr	r0, [sp, #104]	; 0x68
   26c40:	bic	r0, sl, r0
   26c44:	str	r0, [sp, #44]	; 0x2c
   26c48:	bic	r0, r8, r2
   26c4c:	bic	r2, r2, r8
   26c50:	str	r0, [sp, #40]	; 0x28
   26c54:	bic	r0, r4, r3
   26c58:	str	r0, [sp, #36]	; 0x24
   26c5c:	ldr	r0, [sp, #100]	; 0x64
   26c60:	bic	r0, r6, r0
   26c64:	str	r0, [sp, #32]
   26c68:	ldr	r0, [sp, #28]
   26c6c:	bic	r0, r0, r5
   26c70:	ldr	r5, [sp, #120]	; 0x78
   26c74:	str	r0, [sp, #120]	; 0x78
   26c78:	bic	ip, lr, r5
   26c7c:	ldr	r5, [sp, #24]
   26c80:	bic	r7, r5, r7
   26c84:	mov	r5, r6
   26c88:	str	r7, [sp, #92]	; 0x5c
   26c8c:	orr	r7, r7, ip
   26c90:	orr	r4, r7, r0
   26c94:	ldr	r0, [sp, #108]	; 0x6c
   26c98:	bic	lr, r0, r1
   26c9c:	ldr	r0, [sp, #104]	; 0x68
   26ca0:	orr	r4, r4, lr
   26ca4:	bic	r6, r0, sl
   26ca8:	ldr	r0, [sp, #140]	; 0x8c
   26cac:	orr	r4, r4, r6
   26cb0:	orr	r4, r4, r2
   26cb4:	bic	r3, r3, r0
   26cb8:	ldr	r0, [sp, #100]	; 0x64
   26cbc:	orr	r4, r4, r3
   26cc0:	bic	r1, r0, r5
   26cc4:	orrs	r4, r4, r1
   26cc8:	beq	26dd4 <__assert_fail@plt+0x15674>
   26ccc:	ldr	r7, [sp, #156]	; 0x9c
   26cd0:	ldr	r5, [sp, #92]	; 0x5c
   26cd4:	add	r4, sp, #160	; 0xa0
   26cd8:	add	r0, r4, r7, lsl #5
   26cdc:	str	ip, [r4, r7, lsl #5]
   26ce0:	mov	r8, r7
   26ce4:	str	r5, [r0, #4]
   26ce8:	ldr	r5, [sp, #120]	; 0x78
   26cec:	str	r5, [r0, #8]
   26cf0:	str	lr, [r0, #12]
   26cf4:	str	r6, [r0, #16]
   26cf8:	str	r2, [r0, #20]
   26cfc:	str	r3, [r0, #24]
   26d00:	str	r1, [r0, #28]
   26d04:	ldr	r0, [sp, #116]	; 0x74
   26d08:	ldr	r1, [sp, #68]	; 0x44
   26d0c:	sub	lr, fp, #6144	; 0x1800
   26d10:	str	r1, [r0, #-28]	; 0xffffffe4
   26d14:	ldr	r1, [sp, #64]	; 0x40
   26d18:	str	r1, [r9, #4]
   26d1c:	ldr	r1, [sp, #72]	; 0x48
   26d20:	str	r1, [r9, #8]
   26d24:	ldr	r1, [sp, #60]	; 0x3c
   26d28:	str	r1, [r9, #12]
   26d2c:	ldr	r1, [sp, #56]	; 0x38
   26d30:	str	r1, [r9, #16]
   26d34:	ldr	r1, [sp, #52]	; 0x34
   26d38:	str	r1, [r9, #20]
   26d3c:	ldr	r1, [sp, #48]	; 0x30
   26d40:	str	r1, [r9, #24]
   26d44:	ldr	r1, [sp, #20]
   26d48:	str	r1, [r0]
   26d4c:	add	r0, r7, r7, lsl #1
   26d50:	sub	r1, lr, #104	; 0x68
   26d54:	add	r6, r1, r0, lsl #2
   26d58:	ldr	r1, [sp, #148]	; 0x94
   26d5c:	mov	r4, r6
   26d60:	ldr	r0, [r1, #4]
   26d64:	str	r0, [r4, #4]!
   26d68:	ldr	r5, [r1, #4]
   26d6c:	cmp	r5, #1
   26d70:	blt	26de4 <__assert_fail@plt+0x15684>
   26d74:	str	r0, [r6]
   26d78:	lsl	r0, r0, #2
   26d7c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   26d80:	ldr	r7, [sp, #40]	; 0x28
   26d84:	cmp	r0, #0
   26d88:	str	r0, [r6, #8]
   26d8c:	beq	2749c <__assert_fail@plt+0x15d3c>
   26d90:	ldr	r1, [sp, #148]	; 0x94
   26d94:	lsl	r2, r5, #2
   26d98:	ldr	r1, [r1, #8]
   26d9c:	bl	11484 <memcpy@plt>
   26da0:	mov	r5, r8
   26da4:	b	26dfc <__assert_fail@plt+0x1569c>
   26da8:	ldr	r6, [sp, #120]	; 0x78
   26dac:	ldr	r1, [sp, #92]	; 0x5c
   26db0:	ldr	r0, [sp, #144]	; 0x90
   26db4:	ldr	r5, [sp, #156]	; 0x9c
   26db8:	ldr	r4, [sp, #152]	; 0x98
   26dbc:	ldr	r9, [sp, #136]	; 0x88
   26dc0:	ldr	r2, [sp, #132]	; 0x84
   26dc4:	ldr	sl, [sp, #128]	; 0x80
   26dc8:	ldr	ip, [sp, #124]	; 0x7c
   26dcc:	ldr	r8, [sp, #96]	; 0x60
   26dd0:	b	26e8c <__assert_fail@plt+0x1572c>
   26dd4:	ldr	r5, [sp, #156]	; 0x9c
   26dd8:	ldr	r4, [sp, #152]	; 0x98
   26ddc:	ldr	r7, [sp, #40]	; 0x28
   26de0:	b	26e04 <__assert_fail@plt+0x156a4>
   26de4:	ldr	r7, [sp, #40]	; 0x28
   26de8:	mov	r0, #0
   26dec:	mov	r5, r8
   26df0:	str	r0, [r6]
   26df4:	str	r0, [r6, #4]
   26df8:	str	r0, [r6, #8]
   26dfc:	ldr	r4, [sp, #152]	; 0x98
   26e00:	add	r5, r5, #1
   26e04:	ldr	r0, [sp, #88]	; 0x58
   26e08:	ldr	r1, [sp, #112]	; 0x70
   26e0c:	ldr	r0, [r0, #12]
   26e10:	ldr	r1, [r0, r1, lsl #2]
   26e14:	ldr	r0, [sp, #148]	; 0x94
   26e18:	bl	219d4 <__assert_fail@plt+0x10274>
   26e1c:	cmp	r0, #0
   26e20:	beq	273e0 <__assert_fail@plt+0x15c80>
   26e24:	ldr	r9, [sp, #136]	; 0x88
   26e28:	ldr	sl, [sp, #128]	; 0x80
   26e2c:	ldr	ip, [sp, #124]	; 0x7c
   26e30:	ldr	r2, [sp, #132]	; 0x84
   26e34:	ldr	r6, [sp, #44]	; 0x2c
   26e38:	ldr	r1, [sp, #36]	; 0x24
   26e3c:	ldr	lr, [sp, #32]
   26e40:	orr	r0, sl, r9
   26e44:	orr	r0, r0, ip
   26e48:	orr	r0, r0, r2
   26e4c:	orr	r0, r0, r6
   26e50:	orr	r0, r0, r7
   26e54:	orr	r0, r0, r1
   26e58:	orrs	r0, r0, lr
   26e5c:	mov	r0, #0
   26e60:	movweq	r0, #17
   26e64:	cmp	r0, #0
   26e68:	bne	26ebc <__assert_fail@plt+0x1575c>
   26e6c:	str	r1, [sp, #140]	; 0x8c
   26e70:	mov	r8, r6
   26e74:	mov	r0, lr
   26e78:	mov	r1, ip
   26e7c:	mov	r6, r9
   26e80:	str	r7, [sp, #84]	; 0x54
   26e84:	str	r2, [sp, #80]	; 0x50
   26e88:	str	sl, [sp, #76]	; 0x4c
   26e8c:	ldr	r7, [sp, #148]	; 0x94
   26e90:	str	r0, [sp, #144]	; 0x90
   26e94:	ldr	r0, [sp, #116]	; 0x74
   26e98:	add	r4, r4, #1
   26e9c:	mov	r3, r1
   26ea0:	cmp	r4, r5
   26ea4:	add	r7, r7, #12
   26ea8:	add	r0, r0, #32
   26eac:	str	r7, [sp, #148]	; 0x94
   26eb0:	mov	r7, r6
   26eb4:	blt	26b30 <__assert_fail@plt+0x153d0>
   26eb8:	b	26ed8 <__assert_fail@plt+0x15778>
   26ebc:	cmp	r0, #17
   26ec0:	bne	26fd0 <__assert_fail@plt+0x15870>
   26ec4:	mov	r8, r6
   26ec8:	mov	r0, r7
   26ecc:	str	lr, [sp, #144]	; 0x90
   26ed0:	str	r1, [sp, #140]	; 0x8c
   26ed4:	str	r7, [sp, #84]	; 0x54
   26ed8:	ldr	r0, [sp, #84]	; 0x54
   26edc:	str	ip, [fp, #-1072]	; 0xfffffbd0
   26ee0:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26ee4:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26ee8:	str	r8, [fp, #-1064]	; 0xfffffbd8
   26eec:	str	r0, [fp, #-1060]	; 0xfffffbdc
   26ef0:	ldr	r0, [sp, #140]	; 0x8c
   26ef4:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26ef8:	ldr	r0, [sp, #144]	; 0x90
   26efc:	str	r0, [fp, #-1052]	; 0xfffffbe4
   26f00:	str	r9, [fp, #-1080]	; 0xfffffbc8
   26f04:	ldr	sl, [sp, #16]
   26f08:	cmp	r4, r5
   26f0c:	bne	26f94 <__assert_fail@plt+0x15834>
   26f10:	sub	lr, fp, #1024	; 0x400
   26f14:	ldr	r1, [sp, #112]	; 0x70
   26f18:	sub	r7, lr, #56	; 0x38
   26f1c:	sub	lr, fp, #6144	; 0x1800
   26f20:	mov	r0, r7
   26f24:	mov	r9, r7
   26f28:	sub	r2, lr, #104	; 0x68
   26f2c:	vld1.32	{d16-d17}, [r0]!
   26f30:	vld1.64	{d18-d19}, [r0]
   26f34:	add	r0, sp, #160	; 0xa0
   26f38:	add	r0, r0, r4, lsl #5
   26f3c:	vst1.32	{d16-d17}, [r0]!
   26f40:	vst1.32	{d18-d19}, [r0]
   26f44:	ldr	r0, [sp, #88]	; 0x58
   26f48:	ldr	r0, [r0, #12]
   26f4c:	ldr	r7, [r0, r1, lsl #2]
   26f50:	add	r0, r4, r4, lsl #1
   26f54:	mov	r1, #1
   26f58:	add	r5, r2, r0, lsl #2
   26f5c:	str	r1, [r2, r0, lsl #2]
   26f60:	mov	r0, #4
   26f64:	mov	r6, r5
   26f68:	str	r1, [r6, #4]!
   26f6c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   26f70:	cmp	r0, #0
   26f74:	str	r0, [r5, #8]
   26f78:	beq	27a28 <__assert_fail@plt+0x162c8>
   26f7c:	ldr	sl, [sp, #16]
   26f80:	str	r7, [r0]
   26f84:	mov	r0, r9
   26f88:	add	r5, r4, #1
   26f8c:	vst1.64	{d8-d9}, [r0]!
   26f90:	vst1.64	{d8-d9}, [r0]
   26f94:	ldr	r0, [sp, #88]	; 0x58
   26f98:	ldr	r1, [sp, #112]	; 0x70
   26f9c:	ldr	r0, [r0, #8]
   26fa0:	mov	r2, r1
   26fa4:	add	r2, r1, #1
   26fa8:	mov	r1, r2
   26fac:	str	r2, [sp, #112]	; 0x70
   26fb0:	cmp	r2, r0
   26fb4:	blt	2623c <__assert_fail@plt+0x14adc>
   26fb8:	b	27028 <__assert_fail@plt+0x158c8>
   26fbc:	cmp	r0, #17
   26fc0:	bne	27000 <__assert_fail@plt+0x158a0>
   26fc4:	mov	r7, r2
   26fc8:	str	r1, [sp, #140]	; 0x8c
   26fcc:	b	26aa4 <__assert_fail@plt+0x15344>
   26fd0:	str	ip, [fp, #-1072]	; 0xfffffbd0
   26fd4:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26fd8:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26fdc:	str	r6, [fp, #-1064]	; 0xfffffbd8
   26fe0:	str	r7, [fp, #-1060]	; 0xfffffbdc
   26fe4:	str	r1, [fp, #-1056]	; 0xfffffbe0
   26fe8:	str	lr, [fp, #-1052]	; 0xfffffbe4
   26fec:	str	r9, [fp, #-1080]	; 0xfffffbc8
   26ff0:	ldr	sl, [sp, #16]
   26ff4:	cmp	r0, #0
   26ff8:	beq	26f94 <__assert_fail@plt+0x15834>
   26ffc:	b	27024 <__assert_fail@plt+0x158c4>
   27000:	ldr	r5, [sp, #156]	; 0x9c
   27004:	str	sl, [fp, #-1076]	; 0xfffffbcc
   27008:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2700c:	str	r9, [fp, #-1072]	; 0xfffffbd0
   27010:	str	lr, [fp, #-1068]	; 0xfffffbd4
   27014:	str	r1, [fp, #-1064]	; 0xfffffbd8
   27018:	ldr	sl, [sp, #16]
   2701c:	cmp	r0, #0
   27020:	beq	26f94 <__assert_fail@plt+0x15834>
   27024:	b	27030 <__assert_fail@plt+0x158d0>
   27028:	cmp	r5, #0
   2702c:	ble	279e0 <__assert_fail@plt+0x16280>
   27030:	mov	r0, #0
   27034:	str	r0, [fp, #-3136]	; 0xfffff3c0
   27038:	add	r0, r5, #1
   2703c:	str	r0, [fp, #-3140]	; 0xfffff3bc
   27040:	lsl	r0, r0, #2
   27044:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   27048:	cmp	r0, #0
   2704c:	str	r0, [fp, #-3132]	; 0xfffff3c4
   27050:	mov	r0, #0
   27054:	movweq	r0, #12
   27058:	str	r0, [fp, #-56]	; 0xffffffc8
   2705c:	beq	27a44 <__assert_fail@plt+0x162e4>
   27060:	sub	lr, fp, #3072	; 0xc00
   27064:	vmov.i32	q8, #0	; 0x00000000
   27068:	mov	r1, #0
   2706c:	mov	r9, #0
   27070:	mov	r6, #0
   27074:	mov	r2, #0
   27078:	mov	r7, #0
   2707c:	mov	r3, #0
   27080:	mov	r8, #0
   27084:	add	r4, sp, #160	; 0xa0
   27088:	str	r5, [sp, #156]	; 0x9c
   2708c:	sub	r0, lr, #104	; 0x68
   27090:	vst1.64	{d16-d17}, [r0]!
   27094:	vst1.64	{d16-d17}, [r0]
   27098:	mov	r0, #0
   2709c:	str	r0, [sp, #152]	; 0x98
   270a0:	mov	r0, #0
   270a4:	str	r0, [sp, #144]	; 0x90
   270a8:	mov	r0, #0
   270ac:	str	r0, [sp, #148]	; 0x94
   270b0:	mov	r0, #0
   270b4:	str	r0, [sp, #124]	; 0x7c
   270b8:	mov	r0, #0
   270bc:	sub	lr, fp, #6144	; 0x1800
   270c0:	str	r2, [sp, #140]	; 0x8c
   270c4:	str	r7, [sp, #136]	; 0x88
   270c8:	str	r3, [sp, #132]	; 0x84
   270cc:	str	r0, [fp, #-3136]	; 0xfffff3c0
   270d0:	add	r0, r8, r8, lsl #1
   270d4:	sub	r2, lr, #104	; 0x68
   270d8:	add	r2, r2, r0, lsl #2
   270dc:	mov	r7, r2
   270e0:	ldr	r0, [r7, #4]!
   270e4:	cmp	r0, #1
   270e8:	blt	2714c <__assert_fail@plt+0x159ec>
   270ec:	str	r9, [sp, #128]	; 0x80
   270f0:	add	r9, r2, #8
   270f4:	mov	r5, #0
   270f8:	ldr	r2, [r9]
   270fc:	ldr	r3, [sl, #12]
   27100:	ldr	r2, [r2, r5, lsl #2]
   27104:	ldr	r2, [r3, r2, lsl #2]
   27108:	cmn	r2, #1
   2710c:	beq	27138 <__assert_fail@plt+0x159d8>
   27110:	ldr	r0, [sl, #24]
   27114:	add	r1, r2, r2, lsl #1
   27118:	sub	lr, fp, #3072	; 0xc00
   2711c:	add	r1, r0, r1, lsl #2
   27120:	sub	r0, lr, #68	; 0x44
   27124:	bl	2182c <__assert_fail@plt+0x100cc>
   27128:	cmp	r0, #0
   2712c:	bne	27348 <__assert_fail@plt+0x15be8>
   27130:	ldr	r0, [r7]
   27134:	mov	r1, #0
   27138:	add	r5, r5, #1
   2713c:	cmp	r5, r0
   27140:	blt	270f8 <__assert_fail@plt+0x15998>
   27144:	ldr	r9, [sp, #128]	; 0x80
   27148:	str	r1, [fp, #-56]	; 0xffffffc8
   2714c:	sub	lr, fp, #3072	; 0xc00
   27150:	sub	r0, fp, #56	; 0x38
   27154:	mov	r1, sl
   27158:	mov	r3, #0
   2715c:	sub	r2, lr, #68	; 0x44
   27160:	bl	21b1c <__assert_fail@plt+0x103bc>
   27164:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27168:	mov	r7, r0
   2716c:	sub	lr, fp, #1024	; 0x400
   27170:	sub	r0, lr, #56	; 0x38
   27174:	cmp	r7, #0
   27178:	str	r7, [r0, r8, lsl #2]
   2717c:	bne	27188 <__assert_fail@plt+0x15a28>
   27180:	cmp	r1, #0
   27184:	bne	27428 <__assert_fail@plt+0x15cc8>
   27188:	ldrsb	r0, [r7, #52]	; 0x34
   2718c:	cmn	r0, #1
   27190:	ble	271b0 <__assert_fail@plt+0x15a50>
   27194:	sub	lr, fp, #3072	; 0xc00
   27198:	sub	r0, lr, #56	; 0x38
   2719c:	sub	lr, fp, #2048	; 0x800
   271a0:	str	r7, [r0, r8, lsl #2]
   271a4:	sub	r0, lr, #56	; 0x38
   271a8:	str	r7, [r0, r8, lsl #2]
   271ac:	b	27244 <__assert_fail@plt+0x15ae4>
   271b0:	sub	lr, fp, #3072	; 0xc00
   271b4:	sub	r0, fp, #56	; 0x38
   271b8:	mov	r1, sl
   271bc:	mov	r3, #1
   271c0:	sub	r2, lr, #68	; 0x44
   271c4:	bl	21b1c <__assert_fail@plt+0x103bc>
   271c8:	sub	lr, fp, #2048	; 0x800
   271cc:	cmp	r0, #0
   271d0:	sub	r1, lr, #56	; 0x38
   271d4:	str	r0, [r1, r8, lsl #2]
   271d8:	bne	271e8 <__assert_fail@plt+0x15a88>
   271dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   271e0:	cmp	r1, #0
   271e4:	bne	27428 <__assert_fail@plt+0x15cc8>
   271e8:	cmp	r7, r0
   271ec:	beq	2720c <__assert_fail@plt+0x15aac>
   271f0:	ldr	r0, [sl, #92]	; 0x5c
   271f4:	ldr	r1, [sp, #124]	; 0x7c
   271f8:	cmp	r0, #1
   271fc:	mov	r0, #0
   27200:	movwgt	r0, #1
   27204:	orr	r1, r1, r0
   27208:	str	r1, [sp, #124]	; 0x7c
   2720c:	sub	lr, fp, #3072	; 0xc00
   27210:	sub	r0, fp, #56	; 0x38
   27214:	mov	r1, sl
   27218:	mov	r3, #2
   2721c:	sub	r2, lr, #68	; 0x44
   27220:	bl	21b1c <__assert_fail@plt+0x103bc>
   27224:	sub	lr, fp, #3072	; 0xc00
   27228:	cmp	r0, #0
   2722c:	sub	r1, lr, #56	; 0x38
   27230:	str	r0, [r1, r8, lsl #2]
   27234:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27238:	bne	27244 <__assert_fail@plt+0x15ae4>
   2723c:	cmp	r1, #0
   27240:	bne	27428 <__assert_fail@plt+0x15cc8>
   27244:	ldr	r0, [r4, r8, lsl #5]
   27248:	ldr	r2, [sp, #148]	; 0x94
   2724c:	ldr	sl, [sp, #16]
   27250:	orr	r2, r2, r0
   27254:	add	r0, r4, r8, lsl #5
   27258:	add	r8, r8, #1
   2725c:	str	r2, [sp, #148]	; 0x94
   27260:	ldr	r2, [r0, #24]
   27264:	ldr	ip, [r0, #4]
   27268:	ldr	r3, [r0, #8]
   2726c:	ldr	r7, [r0, #12]
   27270:	ldr	r5, [r0, #16]
   27274:	ldr	r4, [r0, #20]
   27278:	ldr	r0, [r0, #28]
   2727c:	orr	r9, r9, r0
   27280:	ldr	r0, [sp, #152]	; 0x98
   27284:	orr	r6, r6, r2
   27288:	ldr	r2, [sp, #140]	; 0x8c
   2728c:	orr	r0, r0, r5
   27290:	orr	r2, r2, r4
   27294:	add	r4, sp, #160	; 0xa0
   27298:	str	r0, [sp, #152]	; 0x98
   2729c:	ldr	r0, [sp, #136]	; 0x88
   272a0:	orr	r0, r0, r7
   272a4:	mov	r7, r0
   272a8:	ldr	r0, [sp, #132]	; 0x84
   272ac:	orr	r0, r0, r3
   272b0:	mov	r3, r0
   272b4:	ldr	r0, [sp, #144]	; 0x90
   272b8:	orr	r0, r0, ip
   272bc:	str	r0, [sp, #144]	; 0x90
   272c0:	ldr	r0, [sp, #156]	; 0x9c
   272c4:	cmp	r8, r0
   272c8:	blt	270b8 <__assert_fail@plt+0x15958>
   272cc:	ldr	r0, [sp, #144]	; 0x90
   272d0:	ldr	r8, [sp, #124]	; 0x7c
   272d4:	str	r0, [fp, #-3172]	; 0xfffff39c
   272d8:	ldr	r0, [sp, #148]	; 0x94
   272dc:	tst	r8, #1
   272e0:	str	r0, [fp, #-3176]	; 0xfffff398
   272e4:	ldr	r0, [sp, #152]	; 0x98
   272e8:	str	r3, [fp, #-3168]	; 0xfffff3a0
   272ec:	str	r7, [fp, #-3164]	; 0xfffff3a4
   272f0:	str	r0, [fp, #-3160]	; 0xfffff3a8
   272f4:	mov	r0, #4
   272f8:	str	r2, [fp, #-3156]	; 0xfffff3ac
   272fc:	str	r6, [fp, #-3152]	; 0xfffff3b0
   27300:	str	r9, [fp, #-3148]	; 0xfffff3b4
   27304:	bne	27a50 <__assert_fail@plt+0x162f0>
   27308:	mov	r1, #256	; 0x100
   2730c:	bl	2d24c <__assert_fail@plt+0x1baec>
   27310:	ldr	r1, [sp, #88]	; 0x58
   27314:	ldr	r5, [sp, #156]	; 0x9c
   27318:	cmp	r0, #0
   2731c:	str	r0, [r1, #44]	; 0x2c
   27320:	beq	2738c <__assert_fail@plt+0x15c2c>
   27324:	ldr	ip, [fp, #-3176]	; 0xfffff398
   27328:	mov	r9, r5
   2732c:	cmp	ip, #0
   27330:	beq	27544 <__assert_fail@plt+0x15de4>
   27334:	mov	r2, #0
   27338:	mov	r3, #1
   2733c:	mov	r1, ip
   27340:	mov	r7, #0
   27344:	b	27524 <__assert_fail@plt+0x15dc4>
   27348:	ldr	r1, [sp, #144]	; 0x90
   2734c:	str	r0, [fp, #-56]	; 0xffffffc8
   27350:	str	r1, [fp, #-3172]	; 0xfffff39c
   27354:	ldr	r1, [sp, #148]	; 0x94
   27358:	str	r1, [fp, #-3176]	; 0xfffff398
   2735c:	ldr	r1, [sp, #132]	; 0x84
   27360:	str	r1, [fp, #-3168]	; 0xfffff3a0
   27364:	ldr	r1, [sp, #136]	; 0x88
   27368:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2736c:	ldr	r1, [sp, #152]	; 0x98
   27370:	str	r1, [fp, #-3160]	; 0xfffff3a8
   27374:	ldr	r1, [sp, #140]	; 0x8c
   27378:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2737c:	ldr	r1, [sp, #128]	; 0x80
   27380:	str	r6, [fp, #-3152]	; 0xfffff3b0
   27384:	str	r1, [fp, #-3148]	; 0xfffff3b4
   27388:	ldr	r5, [sp, #156]	; 0x9c
   2738c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   27390:	bl	14538 <__assert_fail@plt+0x2dd8>
   27394:	cmp	r5, #1
   27398:	blt	273cc <__assert_fail@plt+0x15c6c>
   2739c:	sub	lr, fp, #6144	; 0x1800
   273a0:	sub	r0, lr, #104	; 0x68
   273a4:	add	r4, r0, #8
   273a8:	ldr	r0, [r4], #12
   273ac:	bl	14538 <__assert_fail@plt+0x2dd8>
   273b0:	subs	r5, r5, #1
   273b4:	bne	273a8 <__assert_fail@plt+0x15c48>
   273b8:	mov	r0, #0
   273bc:	sub	sp, fp, #48	; 0x30
   273c0:	vpop	{d8-d9}
   273c4:	add	sp, sp, #4
   273c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273cc:	mov	r0, #0
   273d0:	sub	sp, fp, #48	; 0x30
   273d4:	vpop	{d8-d9}
   273d8:	add	sp, sp, #4
   273dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273e0:	ldr	r0, [sp, #124]	; 0x7c
   273e4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   273e8:	ldr	r0, [sp, #128]	; 0x80
   273ec:	str	r0, [fp, #-1076]	; 0xfffffbcc
   273f0:	ldr	r0, [sp, #132]	; 0x84
   273f4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   273f8:	ldr	r0, [sp, #44]	; 0x2c
   273fc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27400:	ldr	r0, [sp, #36]	; 0x24
   27404:	str	r7, [fp, #-1060]	; 0xfffffbdc
   27408:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2740c:	ldr	r0, [sp, #32]
   27410:	str	r0, [fp, #-1052]	; 0xfffffbe4
   27414:	ldr	r0, [sp, #136]	; 0x88
   27418:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2741c:	cmp	r5, #1
   27420:	bge	279c0 <__assert_fail@plt+0x16260>
   27424:	b	279dc <__assert_fail@plt+0x1627c>
   27428:	ldr	r0, [sp, #144]	; 0x90
   2742c:	str	r0, [fp, #-3172]	; 0xfffff39c
   27430:	ldr	r0, [sp, #148]	; 0x94
   27434:	str	r0, [fp, #-3176]	; 0xfffff398
   27438:	ldr	r0, [sp, #132]	; 0x84
   2743c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   27440:	ldr	r0, [sp, #136]	; 0x88
   27444:	str	r0, [fp, #-3164]	; 0xfffff3a4
   27448:	ldr	r0, [sp, #152]	; 0x98
   2744c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   27450:	ldr	r0, [sp, #140]	; 0x8c
   27454:	str	r0, [fp, #-3156]	; 0xfffff3ac
   27458:	str	r6, [fp, #-3152]	; 0xfffff3b0
   2745c:	str	r9, [fp, #-3148]	; 0xfffff3b4
   27460:	b	27388 <__assert_fail@plt+0x15c28>
   27464:	ldr	r0, [sp, #48]	; 0x30
   27468:	ldr	r5, [sp, #156]	; 0x9c
   2746c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27470:	ldr	r0, [sp, #64]	; 0x40
   27474:	str	r0, [fp, #-1080]	; 0xfffffbc8
   27478:	ldr	r0, [sp, #60]	; 0x3c
   2747c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27480:	ldr	r0, [sp, #56]	; 0x38
   27484:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27488:	ldr	r0, [sp, #52]	; 0x34
   2748c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27490:	cmp	r5, #1
   27494:	bge	279c0 <__assert_fail@plt+0x16260>
   27498:	b	279dc <__assert_fail@plt+0x1627c>
   2749c:	ldr	r0, [sp, #124]	; 0x7c
   274a0:	mov	r5, r8
   274a4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   274a8:	ldr	r0, [sp, #128]	; 0x80
   274ac:	str	r0, [fp, #-1076]	; 0xfffffbcc
   274b0:	ldr	r0, [sp, #132]	; 0x84
   274b4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   274b8:	ldr	r0, [sp, #44]	; 0x2c
   274bc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   274c0:	ldr	r0, [sp, #36]	; 0x24
   274c4:	str	r7, [fp, #-1060]	; 0xfffffbdc
   274c8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   274cc:	ldr	r0, [sp, #32]
   274d0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   274d4:	ldr	r0, [sp, #136]	; 0x88
   274d8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   274dc:	b	279a0 <__assert_fail@plt+0x16240>
   274e0:	mov	lr, #0
   274e4:	ldr	r5, [r4, lr, lsl #3]
   274e8:	add	lr, lr, #4
   274ec:	tst	r5, r3
   274f0:	beq	274e4 <__assert_fail@plt+0x15d84>
   274f4:	ldr	r5, [sp]
   274f8:	sub	r6, fp, #1024	; 0x400
   274fc:	sub	r6, r6, #56	; 0x38
   27500:	ldr	r5, [r5]
   27504:	tst	r5, r3
   27508:	sub	r5, fp, #2048	; 0x800
   2750c:	sub	r5, r5, #56	; 0x38
   27510:	moveq	r5, r6
   27514:	add	r6, r5, lr
   27518:	ldr	r6, [r6, #-4]
   2751c:	str	r6, [r0, r7, lsl #2]
   27520:	b	2752c <__assert_fail@plt+0x15dcc>
   27524:	tst	r1, #1
   27528:	bne	274e0 <__assert_fail@plt+0x15d80>
   2752c:	lsr	r6, r1, #1
   27530:	cmp	r2, r1, lsr #1
   27534:	add	r7, r7, #1
   27538:	lsl	r3, r3, #1
   2753c:	mov	r1, r6
   27540:	bne	27524 <__assert_fail@plt+0x15dc4>
   27544:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   27548:	cmp	r2, #0
   2754c:	beq	275cc <__assert_fail@plt+0x15e6c>
   27550:	add	lr, r4, #4
   27554:	mov	r7, #32
   27558:	mov	r6, #1
   2755c:	mov	r5, #0
   27560:	b	275ac <__assert_fail@plt+0x15e4c>
   27564:	mov	r1, #0
   27568:	ldr	r4, [lr, r1, lsl #3]
   2756c:	add	r1, r1, #4
   27570:	tst	r4, r6
   27574:	beq	27568 <__assert_fail@plt+0x15e08>
   27578:	ldr	r3, [sp, #16]
   2757c:	ldr	r4, [r3, #100]	; 0x64
   27580:	sub	r3, fp, #2048	; 0x800
   27584:	tst	r4, r6
   27588:	sub	r4, r3, #56	; 0x38
   2758c:	sub	r3, fp, #1024	; 0x400
   27590:	sub	r3, r3, #56	; 0x38
   27594:	moveq	r4, r3
   27598:	add	r1, r4, r1
   2759c:	add	r4, sp, #160	; 0xa0
   275a0:	ldr	r1, [r1, #-4]
   275a4:	str	r1, [r0, r7, lsl #2]
   275a8:	b	275b4 <__assert_fail@plt+0x15e54>
   275ac:	tst	r2, #1
   275b0:	bne	27564 <__assert_fail@plt+0x15e04>
   275b4:	lsr	r1, r2, #1
   275b8:	cmp	r5, r2, lsr #1
   275bc:	add	r7, r7, #1
   275c0:	lsl	r6, r6, #1
   275c4:	mov	r2, r1
   275c8:	bne	275ac <__assert_fail@plt+0x15e4c>
   275cc:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   275d0:	cmp	r2, #0
   275d4:	beq	27654 <__assert_fail@plt+0x15ef4>
   275d8:	add	lr, r4, #8
   275dc:	mov	r7, #64	; 0x40
   275e0:	mov	r6, #1
   275e4:	mov	r5, #0
   275e8:	b	27634 <__assert_fail@plt+0x15ed4>
   275ec:	mov	r1, #0
   275f0:	ldr	r4, [lr, r1, lsl #3]
   275f4:	add	r1, r1, #4
   275f8:	tst	r4, r6
   275fc:	beq	275f0 <__assert_fail@plt+0x15e90>
   27600:	ldr	r3, [sp, #16]
   27604:	ldr	r4, [r3, #104]	; 0x68
   27608:	sub	r3, fp, #2048	; 0x800
   2760c:	tst	r4, r6
   27610:	sub	r4, r3, #56	; 0x38
   27614:	sub	r3, fp, #1024	; 0x400
   27618:	sub	r3, r3, #56	; 0x38
   2761c:	moveq	r4, r3
   27620:	add	r1, r4, r1
   27624:	add	r4, sp, #160	; 0xa0
   27628:	ldr	r1, [r1, #-4]
   2762c:	str	r1, [r0, r7, lsl #2]
   27630:	b	2763c <__assert_fail@plt+0x15edc>
   27634:	tst	r2, #1
   27638:	bne	275ec <__assert_fail@plt+0x15e8c>
   2763c:	lsr	r1, r2, #1
   27640:	cmp	r5, r2, lsr #1
   27644:	add	r7, r7, #1
   27648:	lsl	r6, r6, #1
   2764c:	mov	r2, r1
   27650:	bne	27634 <__assert_fail@plt+0x15ed4>
   27654:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   27658:	cmp	r2, #0
   2765c:	beq	276dc <__assert_fail@plt+0x15f7c>
   27660:	add	lr, r4, #12
   27664:	mov	r7, #96	; 0x60
   27668:	mov	r6, #1
   2766c:	mov	r5, #0
   27670:	b	276bc <__assert_fail@plt+0x15f5c>
   27674:	mov	r1, #0
   27678:	ldr	r4, [lr, r1, lsl #3]
   2767c:	add	r1, r1, #4
   27680:	tst	r4, r6
   27684:	beq	27678 <__assert_fail@plt+0x15f18>
   27688:	ldr	r3, [sp, #16]
   2768c:	ldr	r4, [r3, #108]	; 0x6c
   27690:	sub	r3, fp, #2048	; 0x800
   27694:	tst	r4, r6
   27698:	sub	r4, r3, #56	; 0x38
   2769c:	sub	r3, fp, #1024	; 0x400
   276a0:	sub	r3, r3, #56	; 0x38
   276a4:	moveq	r4, r3
   276a8:	add	r1, r4, r1
   276ac:	add	r4, sp, #160	; 0xa0
   276b0:	ldr	r1, [r1, #-4]
   276b4:	str	r1, [r0, r7, lsl #2]
   276b8:	b	276c4 <__assert_fail@plt+0x15f64>
   276bc:	tst	r2, #1
   276c0:	bne	27674 <__assert_fail@plt+0x15f14>
   276c4:	lsr	r1, r2, #1
   276c8:	cmp	r5, r2, lsr #1
   276cc:	add	r7, r7, #1
   276d0:	lsl	r6, r6, #1
   276d4:	mov	r2, r1
   276d8:	bne	276bc <__assert_fail@plt+0x15f5c>
   276dc:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   276e0:	cmp	r2, #0
   276e4:	beq	27764 <__assert_fail@plt+0x16004>
   276e8:	add	lr, r4, #16
   276ec:	mov	r7, #128	; 0x80
   276f0:	mov	r6, #1
   276f4:	mov	r5, #0
   276f8:	b	27744 <__assert_fail@plt+0x15fe4>
   276fc:	mov	r1, #0
   27700:	ldr	r4, [lr, r1, lsl #3]
   27704:	add	r1, r1, #4
   27708:	tst	r4, r6
   2770c:	beq	27700 <__assert_fail@plt+0x15fa0>
   27710:	ldr	r3, [sp, #4]
   27714:	ldr	r4, [r3]
   27718:	sub	r3, fp, #2048	; 0x800
   2771c:	tst	r4, r6
   27720:	sub	r4, r3, #56	; 0x38
   27724:	sub	r3, fp, #1024	; 0x400
   27728:	sub	r3, r3, #56	; 0x38
   2772c:	moveq	r4, r3
   27730:	add	r1, r4, r1
   27734:	add	r4, sp, #160	; 0xa0
   27738:	ldr	r1, [r1, #-4]
   2773c:	str	r1, [r0, r7, lsl #2]
   27740:	b	2774c <__assert_fail@plt+0x15fec>
   27744:	tst	r2, #1
   27748:	bne	276fc <__assert_fail@plt+0x15f9c>
   2774c:	lsr	r1, r2, #1
   27750:	cmp	r5, r2, lsr #1
   27754:	add	r7, r7, #1
   27758:	lsl	r6, r6, #1
   2775c:	mov	r2, r1
   27760:	bne	27744 <__assert_fail@plt+0x15fe4>
   27764:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   27768:	cmp	r2, #0
   2776c:	beq	277ec <__assert_fail@plt+0x1608c>
   27770:	add	lr, r4, #20
   27774:	mov	r7, #160	; 0xa0
   27778:	mov	r6, #1
   2777c:	mov	r5, #0
   27780:	b	277cc <__assert_fail@plt+0x1606c>
   27784:	mov	r1, #0
   27788:	ldr	r4, [lr, r1, lsl #3]
   2778c:	add	r1, r1, #4
   27790:	tst	r4, r6
   27794:	beq	27788 <__assert_fail@plt+0x16028>
   27798:	ldr	r3, [sp, #16]
   2779c:	ldr	r4, [r3, #116]	; 0x74
   277a0:	sub	r3, fp, #2048	; 0x800
   277a4:	tst	r4, r6
   277a8:	sub	r4, r3, #56	; 0x38
   277ac:	sub	r3, fp, #1024	; 0x400
   277b0:	sub	r3, r3, #56	; 0x38
   277b4:	moveq	r4, r3
   277b8:	add	r1, r4, r1
   277bc:	add	r4, sp, #160	; 0xa0
   277c0:	ldr	r1, [r1, #-4]
   277c4:	str	r1, [r0, r7, lsl #2]
   277c8:	b	277d4 <__assert_fail@plt+0x16074>
   277cc:	tst	r2, #1
   277d0:	bne	27784 <__assert_fail@plt+0x16024>
   277d4:	lsr	r1, r2, #1
   277d8:	cmp	r5, r2, lsr #1
   277dc:	add	r7, r7, #1
   277e0:	lsl	r6, r6, #1
   277e4:	mov	r2, r1
   277e8:	bne	277cc <__assert_fail@plt+0x1606c>
   277ec:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   277f0:	cmp	r2, #0
   277f4:	beq	27874 <__assert_fail@plt+0x16114>
   277f8:	add	lr, r4, #24
   277fc:	mov	r7, #192	; 0xc0
   27800:	mov	r6, #1
   27804:	mov	r5, #0
   27808:	b	27854 <__assert_fail@plt+0x160f4>
   2780c:	mov	r1, #0
   27810:	ldr	r4, [lr, r1, lsl #3]
   27814:	add	r1, r1, #4
   27818:	tst	r4, r6
   2781c:	beq	27810 <__assert_fail@plt+0x160b0>
   27820:	ldr	r3, [sp, #16]
   27824:	ldr	r4, [r3, #120]	; 0x78
   27828:	sub	r3, fp, #2048	; 0x800
   2782c:	tst	r4, r6
   27830:	sub	r4, r3, #56	; 0x38
   27834:	sub	r3, fp, #1024	; 0x400
   27838:	sub	r3, r3, #56	; 0x38
   2783c:	moveq	r4, r3
   27840:	add	r1, r4, r1
   27844:	add	r4, sp, #160	; 0xa0
   27848:	ldr	r1, [r1, #-4]
   2784c:	str	r1, [r0, r7, lsl #2]
   27850:	b	2785c <__assert_fail@plt+0x160fc>
   27854:	tst	r2, #1
   27858:	bne	2780c <__assert_fail@plt+0x160ac>
   2785c:	lsr	r1, r2, #1
   27860:	cmp	r5, r2, lsr #1
   27864:	add	r7, r7, #1
   27868:	lsl	r6, r6, #1
   2786c:	mov	r2, r1
   27870:	bne	27854 <__assert_fail@plt+0x160f4>
   27874:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   27878:	cmp	r2, #0
   2787c:	beq	278f8 <__assert_fail@plt+0x16198>
   27880:	mov	r3, #224	; 0xe0
   27884:	mov	r7, #1
   27888:	mov	r6, #0
   2788c:	b	278d8 <__assert_fail@plt+0x16178>
   27890:	ldr	r1, [sp, #12]
   27894:	mov	lr, #0
   27898:	ldr	r5, [r1, lr, lsl #3]
   2789c:	add	lr, lr, #4
   278a0:	tst	r5, r7
   278a4:	beq	27898 <__assert_fail@plt+0x16138>
   278a8:	ldr	r1, [sp, #16]
   278ac:	ldr	r5, [r1, #124]	; 0x7c
   278b0:	sub	r1, fp, #2048	; 0x800
   278b4:	tst	r5, r7
   278b8:	sub	r5, r1, #56	; 0x38
   278bc:	sub	r1, fp, #1024	; 0x400
   278c0:	sub	r1, r1, #56	; 0x38
   278c4:	moveq	r5, r1
   278c8:	add	r1, r5, lr
   278cc:	ldr	r1, [r1, #-4]
   278d0:	str	r1, [r0, r3, lsl #2]
   278d4:	b	278e0 <__assert_fail@plt+0x16180>
   278d8:	tst	r2, #1
   278dc:	bne	27890 <__assert_fail@plt+0x16130>
   278e0:	lsr	r1, r2, #1
   278e4:	cmp	r6, r2, lsr #1
   278e8:	add	r3, r3, #1
   278ec:	lsl	r7, r7, #1
   278f0:	mov	r2, r1
   278f4:	bne	278d8 <__assert_fail@plt+0x16178>
   278f8:	tst	ip, #1024	; 0x400
   278fc:	beq	2793c <__assert_fail@plt+0x161dc>
   27900:	mov	r1, #0
   27904:	add	r2, r4, r1, lsl #5
   27908:	ldrb	r2, [r2, #1]
   2790c:	tst	r2, #4
   27910:	bne	27924 <__assert_fail@plt+0x161c4>
   27914:	add	r1, r1, #1
   27918:	cmp	r1, r9
   2791c:	blt	27904 <__assert_fail@plt+0x161a4>
   27920:	b	2793c <__assert_fail@plt+0x161dc>
   27924:	sub	lr, fp, #3072	; 0xc00
   27928:	tst	r8, #1
   2792c:	sub	r2, lr, #56	; 0x38
   27930:	ldr	r1, [r2, r1, lsl #2]
   27934:	str	r1, [r0, #40]	; 0x28
   27938:	strne	r1, [r0, #1064]	; 0x428
   2793c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   27940:	bl	14538 <__assert_fail@plt+0x2dd8>
   27944:	sub	lr, fp, #6144	; 0x1800
   27948:	sub	r0, lr, #104	; 0x68
   2794c:	add	r4, r0, #8
   27950:	ldr	r0, [r4], #12
   27954:	bl	14538 <__assert_fail@plt+0x2dd8>
   27958:	subs	r9, r9, #1
   2795c:	bne	27950 <__assert_fail@plt+0x161f0>
   27960:	mov	r0, #1
   27964:	sub	sp, fp, #48	; 0x30
   27968:	vpop	{d8-d9}
   2796c:	add	sp, sp, #4
   27970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27974:	ldr	r0, [sp, #48]	; 0x30
   27978:	ldr	r5, [sp, #156]	; 0x9c
   2797c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27980:	ldr	r0, [sp, #64]	; 0x40
   27984:	str	r0, [fp, #-1080]	; 0xfffffbc8
   27988:	ldr	r0, [sp, #60]	; 0x3c
   2798c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27990:	ldr	r0, [sp, #56]	; 0x38
   27994:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27998:	ldr	r0, [sp, #52]	; 0x34
   2799c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   279a0:	sub	lr, fp, #6144	; 0x1800
   279a4:	mov	r0, #0
   279a8:	add	r1, r5, r5, lsl #1
   279ac:	sub	r2, lr, #104	; 0x68
   279b0:	str	r0, [r4]
   279b4:	str	r0, [r2, r1, lsl #2]
   279b8:	cmp	r5, #1
   279bc:	blt	279dc <__assert_fail@plt+0x1627c>
   279c0:	sub	lr, fp, #6144	; 0x1800
   279c4:	sub	r0, lr, #104	; 0x68
   279c8:	add	r4, r0, #8
   279cc:	ldr	r0, [r4], #12
   279d0:	bl	14538 <__assert_fail@plt+0x2dd8>
   279d4:	subs	r5, r5, #1
   279d8:	bne	279cc <__assert_fail@plt+0x1626c>
   279dc:	mvn	r5, #0
   279e0:	mov	r0, #0
   279e4:	cmp	r5, #0
   279e8:	beq	279fc <__assert_fail@plt+0x1629c>
   279ec:	sub	sp, fp, #48	; 0x30
   279f0:	vpop	{d8-d9}
   279f4:	add	sp, sp, #4
   279f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   279fc:	mov	r0, #4
   27a00:	mov	r1, #256	; 0x100
   27a04:	bl	2d24c <__assert_fail@plt+0x1baec>
   27a08:	ldr	r1, [sp, #88]	; 0x58
   27a0c:	cmp	r0, #0
   27a10:	str	r0, [r1, #44]	; 0x2c
   27a14:	movwne	r0, #1
   27a18:	sub	sp, fp, #48	; 0x30
   27a1c:	vpop	{d8-d9}
   27a20:	add	sp, sp, #4
   27a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a28:	mov	r0, #0
   27a2c:	str	r0, [r6]
   27a30:	str	r0, [r5]
   27a34:	mov	r5, r4
   27a38:	cmp	r5, #1
   27a3c:	bge	279c0 <__assert_fail@plt+0x16260>
   27a40:	b	279dc <__assert_fail@plt+0x1627c>
   27a44:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   27a48:	bl	14538 <__assert_fail@plt+0x2dd8>
   27a4c:	b	2739c <__assert_fail@plt+0x15c3c>
   27a50:	mov	r1, #512	; 0x200
   27a54:	bl	2d24c <__assert_fail@plt+0x1baec>
   27a58:	ldr	r1, [sp, #88]	; 0x58
   27a5c:	ldr	r5, [sp, #156]	; 0x9c
   27a60:	cmp	r0, #0
   27a64:	str	r0, [r1, #48]	; 0x30
   27a68:	beq	2738c <__assert_fail@plt+0x15c2c>
   27a6c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   27a70:	mov	r9, r5
   27a74:	cmp	ip, #0
   27a78:	beq	27b04 <__assert_fail@plt+0x163a4>
   27a7c:	sub	lr, fp, #1024	; 0x400
   27a80:	mov	r7, #0
   27a84:	mov	r6, #1
   27a88:	mov	r5, #0
   27a8c:	sub	r1, lr, #56	; 0x38
   27a90:	sub	lr, fp, #2048	; 0x800
   27a94:	sub	r4, r1, #4
   27a98:	sub	r1, lr, #56	; 0x38
   27a9c:	sub	lr, r1, #4
   27aa0:	mov	r1, ip
   27aa4:	b	27ae4 <__assert_fail@plt+0x16384>
   27aa8:	add	r3, sp, #160	; 0xa0
   27aac:	mov	r9, r4
   27ab0:	mov	r8, lr
   27ab4:	ldr	r2, [r3], #32
   27ab8:	add	r9, r9, #4
   27abc:	add	r8, r8, #4
   27ac0:	tst	r2, r6
   27ac4:	beq	27ab4 <__assert_fail@plt+0x16354>
   27ac8:	ldr	r2, [r9]
   27acc:	mov	r3, r0
   27ad0:	str	r2, [r3, r5, lsl #2]!
   27ad4:	ldr	r2, [r8]
   27ad8:	ldr	r9, [sp, #156]	; 0x9c
   27adc:	str	r2, [r3, #1024]	; 0x400
   27ae0:	b	27aec <__assert_fail@plt+0x1638c>
   27ae4:	tst	r1, #1
   27ae8:	bne	27aa8 <__assert_fail@plt+0x16348>
   27aec:	lsr	r2, r1, #1
   27af0:	cmp	r7, r1, lsr #1
   27af4:	add	r5, r5, #1
   27af8:	lsl	r6, r6, #1
   27afc:	mov	r1, r2
   27b00:	bne	27ae4 <__assert_fail@plt+0x16384>
   27b04:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   27b08:	cmp	r2, #0
   27b0c:	beq	27b9c <__assert_fail@plt+0x1643c>
   27b10:	add	r1, sp, #160	; 0xa0
   27b14:	sub	lr, fp, #2048	; 0x800
   27b18:	mov	r5, #32
   27b1c:	mov	r3, #0
   27b20:	add	r4, r1, #4
   27b24:	sub	r1, lr, #56	; 0x38
   27b28:	sub	lr, r1, #4
   27b2c:	sub	r1, fp, #1024	; 0x400
   27b30:	sub	r1, r1, #56	; 0x38
   27b34:	sub	r8, r1, #4
   27b38:	mov	r1, #1
   27b3c:	b	27b7c <__assert_fail@plt+0x1641c>
   27b40:	mov	r7, r4
   27b44:	mov	r9, lr
   27b48:	mov	sl, r8
   27b4c:	ldr	r6, [r7], #32
   27b50:	add	r9, r9, #4
   27b54:	add	sl, sl, #4
   27b58:	tst	r6, r1
   27b5c:	beq	27b4c <__assert_fail@plt+0x163ec>
   27b60:	ldr	r6, [sl]
   27b64:	mov	r7, r0
   27b68:	str	r6, [r7, r5, lsl #2]!
   27b6c:	ldr	r6, [r9]
   27b70:	ldr	r9, [sp, #156]	; 0x9c
   27b74:	str	r6, [r7, #1024]	; 0x400
   27b78:	b	27b84 <__assert_fail@plt+0x16424>
   27b7c:	tst	r2, #1
   27b80:	bne	27b40 <__assert_fail@plt+0x163e0>
   27b84:	lsr	r6, r2, #1
   27b88:	cmp	r3, r2, lsr #1
   27b8c:	add	r5, r5, #1
   27b90:	lsl	r1, r1, #1
   27b94:	mov	r2, r6
   27b98:	bne	27b7c <__assert_fail@plt+0x1641c>
   27b9c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   27ba0:	cmp	r2, #0
   27ba4:	beq	27c34 <__assert_fail@plt+0x164d4>
   27ba8:	add	r1, sp, #160	; 0xa0
   27bac:	sub	lr, fp, #2048	; 0x800
   27bb0:	mov	r5, #64	; 0x40
   27bb4:	mov	r3, #0
   27bb8:	add	r4, r1, #8
   27bbc:	sub	r1, lr, #56	; 0x38
   27bc0:	sub	lr, r1, #4
   27bc4:	sub	r1, fp, #1024	; 0x400
   27bc8:	sub	r1, r1, #56	; 0x38
   27bcc:	sub	r8, r1, #4
   27bd0:	mov	r1, #1
   27bd4:	b	27c14 <__assert_fail@plt+0x164b4>
   27bd8:	mov	r7, r4
   27bdc:	mov	r9, lr
   27be0:	mov	sl, r8
   27be4:	ldr	r6, [r7], #32
   27be8:	add	r9, r9, #4
   27bec:	add	sl, sl, #4
   27bf0:	tst	r6, r1
   27bf4:	beq	27be4 <__assert_fail@plt+0x16484>
   27bf8:	ldr	r6, [sl]
   27bfc:	mov	r7, r0
   27c00:	str	r6, [r7, r5, lsl #2]!
   27c04:	ldr	r6, [r9]
   27c08:	ldr	r9, [sp, #156]	; 0x9c
   27c0c:	str	r6, [r7, #1024]	; 0x400
   27c10:	b	27c1c <__assert_fail@plt+0x164bc>
   27c14:	tst	r2, #1
   27c18:	bne	27bd8 <__assert_fail@plt+0x16478>
   27c1c:	lsr	r6, r2, #1
   27c20:	cmp	r3, r2, lsr #1
   27c24:	add	r5, r5, #1
   27c28:	lsl	r1, r1, #1
   27c2c:	mov	r2, r6
   27c30:	bne	27c14 <__assert_fail@plt+0x164b4>
   27c34:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   27c38:	cmp	r2, #0
   27c3c:	beq	27ccc <__assert_fail@plt+0x1656c>
   27c40:	add	r1, sp, #160	; 0xa0
   27c44:	sub	lr, fp, #2048	; 0x800
   27c48:	mov	r5, #96	; 0x60
   27c4c:	mov	r3, #0
   27c50:	add	r4, r1, #12
   27c54:	sub	r1, lr, #56	; 0x38
   27c58:	sub	lr, r1, #4
   27c5c:	sub	r1, fp, #1024	; 0x400
   27c60:	sub	r1, r1, #56	; 0x38
   27c64:	sub	r8, r1, #4
   27c68:	mov	r1, #1
   27c6c:	b	27cac <__assert_fail@plt+0x1654c>
   27c70:	mov	r7, r4
   27c74:	mov	r9, lr
   27c78:	mov	sl, r8
   27c7c:	ldr	r6, [r7], #32
   27c80:	add	r9, r9, #4
   27c84:	add	sl, sl, #4
   27c88:	tst	r6, r1
   27c8c:	beq	27c7c <__assert_fail@plt+0x1651c>
   27c90:	ldr	r6, [sl]
   27c94:	mov	r7, r0
   27c98:	str	r6, [r7, r5, lsl #2]!
   27c9c:	ldr	r6, [r9]
   27ca0:	ldr	r9, [sp, #156]	; 0x9c
   27ca4:	str	r6, [r7, #1024]	; 0x400
   27ca8:	b	27cb4 <__assert_fail@plt+0x16554>
   27cac:	tst	r2, #1
   27cb0:	bne	27c70 <__assert_fail@plt+0x16510>
   27cb4:	lsr	r6, r2, #1
   27cb8:	cmp	r3, r2, lsr #1
   27cbc:	add	r5, r5, #1
   27cc0:	lsl	r1, r1, #1
   27cc4:	mov	r2, r6
   27cc8:	bne	27cac <__assert_fail@plt+0x1654c>
   27ccc:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   27cd0:	cmp	r2, #0
   27cd4:	beq	27d64 <__assert_fail@plt+0x16604>
   27cd8:	add	r1, sp, #160	; 0xa0
   27cdc:	sub	lr, fp, #2048	; 0x800
   27ce0:	mov	r5, #128	; 0x80
   27ce4:	mov	r3, #0
   27ce8:	add	r4, r1, #16
   27cec:	sub	r1, lr, #56	; 0x38
   27cf0:	sub	lr, r1, #4
   27cf4:	sub	r1, fp, #1024	; 0x400
   27cf8:	sub	r1, r1, #56	; 0x38
   27cfc:	sub	r8, r1, #4
   27d00:	mov	r1, #1
   27d04:	b	27d44 <__assert_fail@plt+0x165e4>
   27d08:	mov	r7, r4
   27d0c:	mov	r9, lr
   27d10:	mov	sl, r8
   27d14:	ldr	r6, [r7], #32
   27d18:	add	r9, r9, #4
   27d1c:	add	sl, sl, #4
   27d20:	tst	r6, r1
   27d24:	beq	27d14 <__assert_fail@plt+0x165b4>
   27d28:	ldr	r6, [sl]
   27d2c:	mov	r7, r0
   27d30:	str	r6, [r7, r5, lsl #2]!
   27d34:	ldr	r6, [r9]
   27d38:	ldr	r9, [sp, #156]	; 0x9c
   27d3c:	str	r6, [r7, #1024]	; 0x400
   27d40:	b	27d4c <__assert_fail@plt+0x165ec>
   27d44:	tst	r2, #1
   27d48:	bne	27d08 <__assert_fail@plt+0x165a8>
   27d4c:	lsr	r6, r2, #1
   27d50:	cmp	r3, r2, lsr #1
   27d54:	add	r5, r5, #1
   27d58:	lsl	r1, r1, #1
   27d5c:	mov	r2, r6
   27d60:	bne	27d44 <__assert_fail@plt+0x165e4>
   27d64:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   27d68:	cmp	r2, #0
   27d6c:	beq	27dfc <__assert_fail@plt+0x1669c>
   27d70:	add	r1, sp, #160	; 0xa0
   27d74:	sub	lr, fp, #2048	; 0x800
   27d78:	mov	r5, #160	; 0xa0
   27d7c:	mov	r3, #0
   27d80:	add	r4, r1, #20
   27d84:	sub	r1, lr, #56	; 0x38
   27d88:	sub	lr, r1, #4
   27d8c:	sub	r1, fp, #1024	; 0x400
   27d90:	sub	r1, r1, #56	; 0x38
   27d94:	sub	r8, r1, #4
   27d98:	mov	r1, #1
   27d9c:	b	27ddc <__assert_fail@plt+0x1667c>
   27da0:	mov	r7, r4
   27da4:	mov	r9, lr
   27da8:	mov	sl, r8
   27dac:	ldr	r6, [r7], #32
   27db0:	add	r9, r9, #4
   27db4:	add	sl, sl, #4
   27db8:	tst	r6, r1
   27dbc:	beq	27dac <__assert_fail@plt+0x1664c>
   27dc0:	ldr	r6, [sl]
   27dc4:	mov	r7, r0
   27dc8:	str	r6, [r7, r5, lsl #2]!
   27dcc:	ldr	r6, [r9]
   27dd0:	ldr	r9, [sp, #156]	; 0x9c
   27dd4:	str	r6, [r7, #1024]	; 0x400
   27dd8:	b	27de4 <__assert_fail@plt+0x16684>
   27ddc:	tst	r2, #1
   27de0:	bne	27da0 <__assert_fail@plt+0x16640>
   27de4:	lsr	r6, r2, #1
   27de8:	cmp	r3, r2, lsr #1
   27dec:	add	r5, r5, #1
   27df0:	lsl	r1, r1, #1
   27df4:	mov	r2, r6
   27df8:	bne	27ddc <__assert_fail@plt+0x1667c>
   27dfc:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   27e00:	cmp	r2, #0
   27e04:	beq	27e94 <__assert_fail@plt+0x16734>
   27e08:	add	r1, sp, #160	; 0xa0
   27e0c:	sub	lr, fp, #2048	; 0x800
   27e10:	mov	r5, #192	; 0xc0
   27e14:	mov	r3, #0
   27e18:	add	r4, r1, #24
   27e1c:	sub	r1, lr, #56	; 0x38
   27e20:	sub	lr, r1, #4
   27e24:	sub	r1, fp, #1024	; 0x400
   27e28:	sub	r1, r1, #56	; 0x38
   27e2c:	sub	r8, r1, #4
   27e30:	mov	r1, #1
   27e34:	b	27e74 <__assert_fail@plt+0x16714>
   27e38:	mov	r7, r4
   27e3c:	mov	r9, lr
   27e40:	mov	sl, r8
   27e44:	ldr	r6, [r7], #32
   27e48:	add	r9, r9, #4
   27e4c:	add	sl, sl, #4
   27e50:	tst	r6, r1
   27e54:	beq	27e44 <__assert_fail@plt+0x166e4>
   27e58:	ldr	r6, [sl]
   27e5c:	mov	r7, r0
   27e60:	str	r6, [r7, r5, lsl #2]!
   27e64:	ldr	r6, [r9]
   27e68:	ldr	r9, [sp, #156]	; 0x9c
   27e6c:	str	r6, [r7, #1024]	; 0x400
   27e70:	b	27e7c <__assert_fail@plt+0x1671c>
   27e74:	tst	r2, #1
   27e78:	bne	27e38 <__assert_fail@plt+0x166d8>
   27e7c:	lsr	r6, r2, #1
   27e80:	cmp	r3, r2, lsr #1
   27e84:	add	r5, r5, #1
   27e88:	lsl	r1, r1, #1
   27e8c:	mov	r2, r6
   27e90:	bne	27e74 <__assert_fail@plt+0x16714>
   27e94:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   27e98:	cmp	r2, #0
   27e9c:	beq	27f2c <__assert_fail@plt+0x167cc>
   27ea0:	add	r1, sp, #160	; 0xa0
   27ea4:	sub	lr, fp, #2048	; 0x800
   27ea8:	mov	r5, #224	; 0xe0
   27eac:	mov	r3, #0
   27eb0:	add	r4, r1, #28
   27eb4:	sub	r1, lr, #56	; 0x38
   27eb8:	sub	lr, r1, #4
   27ebc:	sub	r1, fp, #1024	; 0x400
   27ec0:	sub	r1, r1, #56	; 0x38
   27ec4:	sub	r8, r1, #4
   27ec8:	mov	r1, #1
   27ecc:	b	27f0c <__assert_fail@plt+0x167ac>
   27ed0:	mov	r7, r4
   27ed4:	mov	r9, lr
   27ed8:	mov	sl, r8
   27edc:	ldr	r6, [r7], #32
   27ee0:	add	r9, r9, #4
   27ee4:	add	sl, sl, #4
   27ee8:	tst	r6, r1
   27eec:	beq	27edc <__assert_fail@plt+0x1677c>
   27ef0:	ldr	r6, [sl]
   27ef4:	mov	r7, r0
   27ef8:	str	r6, [r7, r5, lsl #2]!
   27efc:	ldr	r6, [r9]
   27f00:	ldr	r9, [sp, #156]	; 0x9c
   27f04:	str	r6, [r7, #1024]	; 0x400
   27f08:	b	27f14 <__assert_fail@plt+0x167b4>
   27f0c:	tst	r2, #1
   27f10:	bne	27ed0 <__assert_fail@plt+0x16770>
   27f14:	lsr	r6, r2, #1
   27f18:	cmp	r3, r2, lsr #1
   27f1c:	add	r5, r5, #1
   27f20:	lsl	r1, r1, #1
   27f24:	mov	r2, r6
   27f28:	bne	27f0c <__assert_fail@plt+0x167ac>
   27f2c:	ldr	r8, [sp, #124]	; 0x7c
   27f30:	add	r4, sp, #160	; 0xa0
   27f34:	tst	ip, #1024	; 0x400
   27f38:	bne	27900 <__assert_fail@plt+0x161a0>
   27f3c:	b	2793c <__assert_fail@plt+0x161dc>
   27f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f44:	add	fp, sp, #28
   27f48:	sub	sp, sp, #68	; 0x44
   27f4c:	ldr	r4, [r1, #8]
   27f50:	ldr	r6, [r1, #12]
   27f54:	mov	r8, r0
   27f58:	mov	r0, #1
   27f5c:	mov	r5, r1
   27f60:	str	r0, [fp, #-36]	; 0xffffffdc
   27f64:	str	r0, [fp, #-40]	; 0xffffffd8
   27f68:	mov	r0, #4
   27f6c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   27f70:	cmp	r0, #0
   27f74:	str	r0, [fp, #-32]	; 0xffffffe0
   27f78:	beq	2860c <__assert_fail@plt+0x16eac>
   27f7c:	str	r4, [r0]
   27f80:	sub	r3, fp, #40	; 0x28
   27f84:	mov	r0, r8
   27f88:	mov	r1, r5
   27f8c:	mov	r2, r6
   27f90:	str	r5, [sp, #28]
   27f94:	bl	28630 <__assert_fail@plt+0x16ed0>
   27f98:	cmp	r0, #0
   27f9c:	bne	285c4 <__assert_fail@plt+0x16e64>
   27fa0:	mov	r4, r6
   27fa4:	mov	r9, #1
   27fa8:	mov	r1, #0
   27fac:	str	r8, [sp, #48]	; 0x30
   27fb0:	cmp	r4, #1
   27fb4:	blt	285cc <__assert_fail@plt+0x16e6c>
   27fb8:	ldr	lr, [sp, #28]
   27fbc:	ldr	r0, [lr]
   27fc0:	ldr	r2, [r0, r4, lsl #2]
   27fc4:	cmp	r2, #0
   27fc8:	mov	r2, #0
   27fcc:	addeq	r2, r1, #1
   27fd0:	ldr	r1, [r8, #120]	; 0x78
   27fd4:	cmp	r2, r1
   27fd8:	bgt	285d4 <__assert_fail@plt+0x16e74>
   27fdc:	mov	r0, #0
   27fe0:	str	r4, [sp, #36]	; 0x24
   27fe4:	sub	r4, r4, #1
   27fe8:	str	r2, [sp, #4]
   27fec:	str	r0, [fp, #-36]	; 0xffffffdc
   27ff0:	ldr	r0, [r8, #100]	; 0x64
   27ff4:	ldr	r1, [r0, r4, lsl #2]
   27ff8:	cmp	r1, #0
   27ffc:	beq	285a4 <__assert_fail@plt+0x16e44>
   28000:	ldr	r0, [r1, #20]
   28004:	cmp	r0, #1
   28008:	blt	285a4 <__assert_fail@plt+0x16e44>
   2800c:	ldr	r0, [r8, #84]	; 0x54
   28010:	mov	r2, #0
   28014:	str	r4, [sp, #32]
   28018:	str	r1, [sp, #16]
   2801c:	str	r0, [sp, #24]
   28020:	b	280e0 <__assert_fail@plt+0x16980>
   28024:	cmp	r2, r1
   28028:	bne	28064 <__assert_fail@plt+0x16904>
   2802c:	lsl	r0, r2, #1
   28030:	lsl	r1, r2, #3
   28034:	str	r0, [fp, #-40]	; 0xffffffd8
   28038:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2803c:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   28040:	cmp	r0, #0
   28044:	beq	28628 <__assert_fail@plt+0x16ec8>
   28048:	str	r0, [fp, #-32]	; 0xffffffe0
   2804c:	ldr	lr, [sp, #28]
   28050:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28054:	ldr	r2, [r0]
   28058:	cmp	r2, r5
   2805c:	bgt	28074 <__assert_fail@plt+0x16914>
   28060:	b	280a8 <__assert_fail@plt+0x16948>
   28064:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28068:	ldr	r2, [r0]
   2806c:	cmp	r2, r5
   28070:	ble	280a8 <__assert_fail@plt+0x16948>
   28074:	cmp	r1, #1
   28078:	blt	280d8 <__assert_fail@plt+0x16978>
   2807c:	add	r2, r0, r1, lsl #2
   28080:	add	r1, r1, #1
   28084:	mov	r3, r2
   28088:	ldr	r7, [r3, #-4]!
   2808c:	sub	r1, r1, #1
   28090:	cmp	r1, #1
   28094:	str	r7, [r2]
   28098:	mov	r2, r3
   2809c:	bgt	28088 <__assert_fail@plt+0x16928>
   280a0:	sub	r1, r1, #1
   280a4:	b	280d8 <__assert_fail@plt+0x16978>
   280a8:	add	r2, r0, r1, lsl #2
   280ac:	ldr	r3, [r2, #-4]
   280b0:	cmp	r3, r5
   280b4:	ble	280d8 <__assert_fail@plt+0x16978>
   280b8:	sub	r1, r1, #2
   280bc:	str	r3, [r2]
   280c0:	sub	r1, r1, #1
   280c4:	ldr	r3, [r2, #-8]
   280c8:	sub	r2, r2, #4
   280cc:	cmp	r3, r5
   280d0:	bgt	280bc <__assert_fail@plt+0x1695c>
   280d4:	add	r1, r1, #2
   280d8:	str	r5, [r0, r1, lsl #2]
   280dc:	b	28554 <__assert_fail@plt+0x16df4>
   280e0:	ldr	r0, [r1, #24]
   280e4:	str	r2, [sp, #20]
   280e8:	ldr	r2, [r0, r2, lsl #2]
   280ec:	ldr	r0, [sp, #24]
   280f0:	ldr	r0, [r0]
   280f4:	mov	r1, r2
   280f8:	str	r2, [fp, #-44]	; 0xffffffd4
   280fc:	add	r0, r0, r2, lsl #3
   28100:	ldrb	r0, [r0, #6]
   28104:	tst	r0, #16
   28108:	bne	281a8 <__assert_fail@plt+0x16a48>
   2810c:	ldr	r0, [sp, #24]
   28110:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28114:	mov	r2, r4
   28118:	ldr	r0, [r0]
   2811c:	add	r1, r0, r1, lsl #3
   28120:	mov	r0, r8
   28124:	bl	25f88 <__assert_fail@plt+0x14828>
   28128:	ldr	lr, [sp, #28]
   2812c:	cmp	r0, #0
   28130:	beq	2858c <__assert_fail@plt+0x16e2c>
   28134:	ldr	r0, [lr]
   28138:	ldr	r1, [sp, #36]	; 0x24
   2813c:	ldr	r0, [r0, r1, lsl #2]
   28140:	cmp	r0, #0
   28144:	beq	2858c <__assert_fail@plt+0x16e2c>
   28148:	ldr	r2, [r0, #8]
   2814c:	cmp	r2, #1
   28150:	blt	2858c <__assert_fail@plt+0x16e2c>
   28154:	ldr	r1, [sp, #24]
   28158:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2815c:	ldr	r0, [r0, #12]
   28160:	ldr	r1, [r1, #12]
   28164:	ldr	r1, [r1, r3, lsl #2]
   28168:	subs	r3, r2, #1
   2816c:	mov	r2, #0
   28170:	beq	28194 <__assert_fail@plt+0x16a34>
   28174:	add	r7, r2, r3
   28178:	lsr	r6, r7, #1
   2817c:	ldr	r5, [r0, r6, lsl #2]
   28180:	cmp	r5, r1
   28184:	movge	r3, r6
   28188:	addlt	r2, r9, r7, lsr #1
   2818c:	cmp	r2, r3
   28190:	bcc	28174 <__assert_fail@plt+0x16a14>
   28194:	ldr	r2, [r0, r2, lsl #2]
   28198:	mov	r0, #1
   2819c:	cmp	r2, r1
   281a0:	beq	28204 <__assert_fail@plt+0x16aa4>
   281a4:	b	2858c <__assert_fail@plt+0x16e2c>
   281a8:	ldr	r7, [r8, #84]	; 0x54
   281ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   281b0:	mov	r5, r4
   281b4:	ldr	r4, [lr, #12]
   281b8:	mov	r2, r8
   281bc:	mov	r3, r5
   281c0:	mov	r0, r7
   281c4:	bl	25c70 <__assert_fail@plt+0x14510>
   281c8:	cmp	r0, #1
   281cc:	blt	281f4 <__assert_fail@plt+0x16a94>
   281d0:	add	r1, r0, r5
   281d4:	cmp	r1, r4
   281d8:	ble	282ac <__assert_fail@plt+0x16b4c>
   281dc:	ldr	lr, [sp, #28]
   281e0:	ldr	r4, [sp, #32]
   281e4:	ldr	ip, [lr, #20]
   281e8:	cmp	ip, #0
   281ec:	bne	28210 <__assert_fail@plt+0x16ab0>
   281f0:	b	28530 <__assert_fail@plt+0x16dd0>
   281f4:	ldr	lr, [sp, #28]
   281f8:	cmp	r0, #0
   281fc:	mov	r4, r5
   28200:	beq	2810c <__assert_fail@plt+0x169ac>
   28204:	ldr	ip, [lr, #20]
   28208:	cmp	ip, #0
   2820c:	beq	28530 <__assert_fail@plt+0x16dd0>
   28210:	add	r0, r0, r4
   28214:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28218:	str	r0, [sp, #40]	; 0x28
   2821c:	ldr	r0, [sp, #24]
   28220:	ldr	r0, [r0, #12]
   28224:	ldr	r0, [r0, r1, lsl #2]
   28228:	str	r0, [sp, #8]
   2822c:	ldr	r0, [r8, #108]	; 0x6c
   28230:	cmp	r0, #1
   28234:	blt	28328 <__assert_fail@plt+0x16bc8>
   28238:	ldr	r2, [r8, #116]	; 0x74
   2823c:	ldr	r1, [sp, #40]	; 0x28
   28240:	mov	sl, #0
   28244:	mov	r3, r0
   28248:	add	r7, r3, sl
   2824c:	add	r7, r7, r7, lsr #31
   28250:	asr	r6, r7, #1
   28254:	add	r5, r6, r6, lsl #1
   28258:	add	r5, r2, r5, lsl #3
   2825c:	ldr	r5, [r5, #4]
   28260:	cmp	r5, r1
   28264:	addlt	sl, r9, r7, asr #1
   28268:	movge	r3, r6
   2826c:	cmp	sl, r3
   28270:	blt	28248 <__assert_fail@plt+0x16ae8>
   28274:	cmp	sl, r0
   28278:	bge	28338 <__assert_fail@plt+0x16bd8>
   2827c:	ldr	r2, [r8, #116]	; 0x74
   28280:	add	r3, sl, sl, lsl #1
   28284:	add	r2, r2, r3, lsl #3
   28288:	ldr	r2, [r2, #4]
   2828c:	cmp	r2, r1
   28290:	mvnne	sl, #0
   28294:	cmp	r0, #1
   28298:	bge	28344 <__assert_fail@plt+0x16be4>
   2829c:	mov	r5, #0
   282a0:	cmp	r5, r0
   282a4:	blt	28384 <__assert_fail@plt+0x16c24>
   282a8:	b	283a8 <__assert_fail@plt+0x16c48>
   282ac:	ldr	lr, [sp, #28]
   282b0:	ldr	r4, [sp, #32]
   282b4:	ldr	r2, [lr]
   282b8:	ldr	r2, [r2, r1, lsl #2]
   282bc:	cmp	r2, #0
   282c0:	beq	2810c <__assert_fail@plt+0x169ac>
   282c4:	ldr	r3, [r2, #8]
   282c8:	cmp	r3, #1
   282cc:	blt	2810c <__assert_fail@plt+0x169ac>
   282d0:	ldr	r1, [r7, #12]
   282d4:	ldr	r7, [fp, #-44]	; 0xffffffd4
   282d8:	ldr	r2, [r2, #12]
   282dc:	ldr	r1, [r1, r7, lsl #2]
   282e0:	subs	r7, r3, #1
   282e4:	mov	r3, #0
   282e8:	beq	2830c <__assert_fail@plt+0x16bac>
   282ec:	add	r6, r3, r7
   282f0:	lsr	r5, r6, #1
   282f4:	ldr	r4, [r2, r5, lsl #2]
   282f8:	cmp	r4, r1
   282fc:	movge	r7, r5
   28300:	addlt	r3, r9, r6, lsr #1
   28304:	cmp	r3, r7
   28308:	bcc	282ec <__assert_fail@plt+0x16b8c>
   2830c:	ldr	r4, [sp, #32]
   28310:	cmp	r0, #0
   28314:	beq	2810c <__assert_fail@plt+0x169ac>
   28318:	ldr	r2, [r2, r3, lsl #2]
   2831c:	cmp	r2, r1
   28320:	beq	28204 <__assert_fail@plt+0x16aa4>
   28324:	b	2810c <__assert_fail@plt+0x169ac>
   28328:	ldr	r1, [sp, #40]	; 0x28
   2832c:	mov	sl, #0
   28330:	cmp	sl, r0
   28334:	blt	2827c <__assert_fail@plt+0x16b1c>
   28338:	mvn	sl, #0
   2833c:	cmp	r0, #1
   28340:	blt	2829c <__assert_fail@plt+0x16b3c>
   28344:	ldr	r2, [r8, #116]	; 0x74
   28348:	mov	r5, #0
   2834c:	mov	r3, r0
   28350:	add	r7, r3, r5
   28354:	add	r7, r7, r7, lsr #31
   28358:	asr	r6, r7, #1
   2835c:	add	r1, r6, r6, lsl #1
   28360:	add	r1, r2, r1, lsl #3
   28364:	ldr	r1, [r1, #4]
   28368:	cmp	r1, r4
   2836c:	addlt	r5, r9, r7, asr #1
   28370:	movge	r3, r6
   28374:	cmp	r5, r3
   28378:	blt	28350 <__assert_fail@plt+0x16bf0>
   2837c:	cmp	r5, r0
   28380:	bge	283a8 <__assert_fail@plt+0x16c48>
   28384:	ldr	r0, [r8, #116]	; 0x74
   28388:	add	r1, r5, r5, lsl #1
   2838c:	add	r0, r0, r1, lsl #3
   28390:	ldr	r0, [r0, #4]
   28394:	cmp	r0, r4
   28398:	mvnne	r5, #0
   2839c:	cmp	ip, #1
   283a0:	bge	283b4 <__assert_fail@plt+0x16c54>
   283a4:	b	28530 <__assert_fail@plt+0x16dd0>
   283a8:	mvn	r5, #0
   283ac:	cmp	ip, #1
   283b0:	blt	28530 <__assert_fail@plt+0x16dd0>
   283b4:	ldr	ip, [r8, #84]	; 0x54
   283b8:	mov	r6, #0
   283bc:	str	ip, [sp, #12]
   283c0:	ldr	r0, [lr, #24]
   283c4:	ldr	r3, [r8, #116]	; 0x74
   283c8:	ldr	r4, [ip]
   283cc:	mvn	r8, #0
   283d0:	ldr	r2, [r0, r6, lsl #2]
   283d4:	mov	r0, r3
   283d8:	add	r1, r2, r2, lsl #1
   283dc:	ldr	r7, [r0, r1, lsl #3]!
   283e0:	ldr	r4, [r4, r7, lsl #3]
   283e4:	ldr	r0, [r0, #8]
   283e8:	ldr	r7, [sp, #40]	; 0x28
   283ec:	cmp	r0, r7
   283f0:	str	r4, [sp, #44]	; 0x2c
   283f4:	ble	28410 <__assert_fail@plt+0x16cb0>
   283f8:	mvn	r9, #0
   283fc:	ldr	r1, [sp, #36]	; 0x24
   28400:	ldr	r4, [sp, #32]
   28404:	cmp	r0, r1
   28408:	blt	28494 <__assert_fail@plt+0x16d34>
   2840c:	b	28510 <__assert_fail@plt+0x16db0>
   28410:	add	r1, r3, r1, lsl #3
   28414:	mov	r9, #1
   28418:	ldr	r1, [r1, #12]
   2841c:	cmp	r1, r7
   28420:	blt	28484 <__assert_fail@plt+0x16d24>
   28424:	sub	r1, r1, r7
   28428:	cmp	r0, r7
   2842c:	mov	r7, #1
   28430:	clz	r1, r1
   28434:	lsr	r4, r1, #5
   28438:	lsl	r1, r4, #1
   2843c:	orreq	r1, r7, r4, lsl #1
   28440:	cmp	r1, #0
   28444:	beq	284f4 <__assert_fail@plt+0x16d94>
   28448:	ldr	r4, [sp, #48]	; 0x30
   2844c:	ldr	r2, [sp, #44]	; 0x2c
   28450:	ldr	r3, [sp, #8]
   28454:	str	sl, [sp]
   28458:	mov	r0, r4
   2845c:	bl	29b70 <__assert_fail@plt+0x18410>
   28460:	ldr	lr, [sp, #28]
   28464:	mov	r9, r0
   28468:	ldr	r3, [r4, #116]	; 0x74
   2846c:	ldr	ip, [sp, #12]
   28470:	ldr	r0, [lr, #24]
   28474:	ldr	r2, [r0, r6, lsl #2]
   28478:	add	r0, r2, r2, lsl #1
   2847c:	add	r0, r3, r0, lsl #3
   28480:	ldr	r0, [r0, #8]
   28484:	ldr	r1, [sp, #36]	; 0x24
   28488:	ldr	r4, [sp, #32]
   2848c:	cmp	r0, r1
   28490:	bge	28510 <__assert_fail@plt+0x16db0>
   28494:	add	r1, r2, r2, lsl #1
   28498:	mov	r8, #1
   2849c:	add	r1, r3, r1, lsl #3
   284a0:	ldr	r1, [r1, #12]
   284a4:	cmp	r1, r4
   284a8:	blt	28510 <__assert_fail@plt+0x16db0>
   284ac:	sub	r1, r1, r4
   284b0:	cmp	r0, r4
   284b4:	mov	r0, #1
   284b8:	clz	r1, r1
   284bc:	lsr	r2, r1, #5
   284c0:	lsl	r1, r2, #1
   284c4:	orreq	r1, r0, r2, lsl #1
   284c8:	cmp	r1, #0
   284cc:	beq	2850c <__assert_fail@plt+0x16dac>
   284d0:	ldr	r0, [sp, #48]	; 0x30
   284d4:	ldr	r2, [sp, #44]	; 0x2c
   284d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   284dc:	str	r5, [sp]
   284e0:	bl	29b70 <__assert_fail@plt+0x18410>
   284e4:	ldr	ip, [sp, #12]
   284e8:	ldr	lr, [sp, #28]
   284ec:	mov	r8, r0
   284f0:	b	28510 <__assert_fail@plt+0x16db0>
   284f4:	mov	r9, #0
   284f8:	ldr	r1, [sp, #36]	; 0x24
   284fc:	ldr	r4, [sp, #32]
   28500:	cmp	r0, r1
   28504:	blt	28494 <__assert_fail@plt+0x16d34>
   28508:	b	28510 <__assert_fail@plt+0x16db0>
   2850c:	mov	r8, #0
   28510:	cmp	r8, r9
   28514:	ldr	r8, [sp, #48]	; 0x30
   28518:	mov	r9, #1
   2851c:	bne	2858c <__assert_fail@plt+0x16e2c>
   28520:	ldr	r0, [lr, #20]
   28524:	add	r6, r6, #1
   28528:	cmp	r6, r0
   2852c:	blt	283c0 <__assert_fail@plt+0x16c60>
   28530:	ldr	r2, [fp, #-40]	; 0xffffffd8
   28534:	cmp	r2, #0
   28538:	beq	28564 <__assert_fail@plt+0x16e04>
   2853c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28540:	ldr	r5, [fp, #-44]	; 0xffffffd4
   28544:	cmp	r1, #0
   28548:	bne	28024 <__assert_fail@plt+0x168c4>
   2854c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28550:	str	r5, [r0]
   28554:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28558:	add	r0, r0, #1
   2855c:	str	r0, [fp, #-36]	; 0xffffffdc
   28560:	b	2858c <__assert_fail@plt+0x16e2c>
   28564:	mov	r0, #4
   28568:	str	r9, [fp, #-36]	; 0xffffffdc
   2856c:	str	r9, [fp, #-40]	; 0xffffffd8
   28570:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   28574:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28578:	cmp	r0, #0
   2857c:	str	r0, [fp, #-32]	; 0xffffffe0
   28580:	beq	285f8 <__assert_fail@plt+0x16e98>
   28584:	ldr	lr, [sp, #28]
   28588:	str	r1, [r0]
   2858c:	ldr	r1, [sp, #16]
   28590:	ldr	r2, [sp, #20]
   28594:	ldr	r0, [r1, #20]
   28598:	add	r2, r2, #1
   2859c:	cmp	r2, r0
   285a0:	blt	280e0 <__assert_fail@plt+0x16980>
   285a4:	mov	r0, r8
   285a8:	mov	r1, lr
   285ac:	mov	r2, r4
   285b0:	sub	r3, fp, #40	; 0x28
   285b4:	bl	28630 <__assert_fail@plt+0x16ed0>
   285b8:	ldr	r1, [sp, #4]
   285bc:	cmp	r0, #0
   285c0:	beq	27fb0 <__assert_fail@plt+0x16850>
   285c4:	mov	r7, r0
   285c8:	b	285e4 <__assert_fail@plt+0x16e84>
   285cc:	mov	r7, #0
   285d0:	b	285e4 <__assert_fail@plt+0x16e84>
   285d4:	lsl	r2, r4, #2
   285d8:	mov	r1, #0
   285dc:	mov	r7, #0
   285e0:	bl	11670 <memset@plt>
   285e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   285e8:	bl	14538 <__assert_fail@plt+0x2dd8>
   285ec:	mov	r0, r7
   285f0:	sub	sp, fp, #28
   285f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285f8:	mov	r0, #0
   285fc:	mov	r7, #12
   28600:	str	r0, [fp, #-40]	; 0xffffffd8
   28604:	str	r0, [fp, #-36]	; 0xffffffdc
   28608:	b	285e4 <__assert_fail@plt+0x16e84>
   2860c:	mov	r0, #0
   28610:	mov	r7, #12
   28614:	str	r0, [fp, #-40]	; 0xffffffd8
   28618:	str	r0, [fp, #-36]	; 0xffffffdc
   2861c:	mov	r0, r7
   28620:	sub	sp, fp, #28
   28624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28628:	mov	r7, #12
   2862c:	b	285e4 <__assert_fail@plt+0x16e84>
   28630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28634:	add	fp, sp, #28
   28638:	sub	sp, sp, #140	; 0x8c
   2863c:	mov	r9, r3
   28640:	mov	r3, #0
   28644:	ldr	r6, [r0, #84]	; 0x54
   28648:	mov	r4, r1
   2864c:	str	r2, [fp, #-80]	; 0xffffffb0
   28650:	str	r0, [sp, #64]	; 0x40
   28654:	str	r3, [fp, #-76]	; 0xffffffb4
   28658:	str	r4, [sp, #80]	; 0x50
   2865c:	ldr	r1, [r0, #100]	; 0x64
   28660:	ldr	r7, [r1, r2, lsl #2]
   28664:	cmp	r7, #0
   28668:	mov	r1, r7
   2866c:	addne	r1, r1, #4
   28670:	str	r1, [sp, #68]	; 0x44
   28674:	ldr	r1, [r9, #4]
   28678:	cmp	r1, #0
   2867c:	beq	28a94 <__assert_fail@plt+0x17334>
   28680:	cmp	r7, #0
   28684:	beq	28a5c <__assert_fail@plt+0x172fc>
   28688:	mov	r0, #0
   2868c:	mov	r1, r6
   28690:	mov	r2, r9
   28694:	str	r9, [sp, #60]	; 0x3c
   28698:	str	r0, [fp, #-72]	; 0xffffffb8
   2869c:	sub	r0, fp, #72	; 0x48
   286a0:	bl	259d0 <__assert_fail@plt+0x14270>
   286a4:	ldr	r9, [fp, #-72]	; 0xffffffb8
   286a8:	cmp	r9, #0
   286ac:	bne	294ac <__assert_fail@plt+0x17d4c>
   286b0:	mov	r4, r0
   286b4:	mov	r5, r0
   286b8:	str	r6, [sp, #76]	; 0x4c
   286bc:	ldr	r0, [r4, #28]!
   286c0:	cmp	r0, #0
   286c4:	bne	28758 <__assert_fail@plt+0x16ff8>
   286c8:	ldr	r8, [sp, #60]	; 0x3c
   286cc:	mov	r6, #0
   286d0:	ldr	r0, [r8, #4]
   286d4:	str	r0, [r5, #28]
   286d8:	lsl	r0, r0, #2
   286dc:	str	r6, [r5, #32]
   286e0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   286e4:	cmp	r0, #0
   286e8:	mov	r9, #12
   286ec:	str	r0, [r5, #36]	; 0x24
   286f0:	movweq	r6, #12
   286f4:	str	r6, [fp, #-72]	; 0xffffffb8
   286f8:	beq	294ac <__assert_fail@plt+0x17d4c>
   286fc:	ldr	r0, [r8, #4]
   28700:	ldr	r6, [sp, #76]	; 0x4c
   28704:	cmp	r0, #1
   28708:	blt	28758 <__assert_fail@plt+0x16ff8>
   2870c:	ldr	r6, [sp, #60]	; 0x3c
   28710:	mov	r5, #0
   28714:	ldr	r0, [r6, #8]
   28718:	ldr	r1, [sp, #76]	; 0x4c
   2871c:	ldr	r0, [r0, r5, lsl #2]
   28720:	ldr	r1, [r1, #28]
   28724:	add	r0, r0, r0, lsl #1
   28728:	add	r1, r1, r0, lsl #2
   2872c:	mov	r0, r4
   28730:	bl	2182c <__assert_fail@plt+0x100cc>
   28734:	cmp	r0, #0
   28738:	bne	294a8 <__assert_fail@plt+0x17d48>
   2873c:	ldr	r0, [r6, #4]
   28740:	add	r5, r5, #1
   28744:	cmp	r5, r0
   28748:	blt	28714 <__assert_fail@plt+0x16fb4>
   2874c:	ldr	r6, [sp, #76]	; 0x4c
   28750:	mov	r0, #0
   28754:	str	r0, [fp, #-72]	; 0xffffffb8
   28758:	ldr	r5, [sp, #68]	; 0x44
   2875c:	ldr	r0, [sp, #60]	; 0x3c
   28760:	mov	r2, r4
   28764:	mov	r1, r5
   28768:	bl	29514 <__assert_fail@plt+0x17db4>
   2876c:	cmp	r0, #0
   28770:	str	r0, [fp, #-76]	; 0xffffffb4
   28774:	bne	294d0 <__assert_fail@plt+0x17d70>
   28778:	ldr	r4, [sp, #80]	; 0x50
   2877c:	ldr	r9, [sp, #60]	; 0x3c
   28780:	ldr	r0, [r4, #20]
   28784:	cmp	r0, #0
   28788:	beq	28a5c <__assert_fail@plt+0x172fc>
   2878c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28790:	cmp	r0, #1
   28794:	str	r7, [sp, #56]	; 0x38
   28798:	blt	28a50 <__assert_fail@plt+0x172f0>
   2879c:	ldr	r0, [sp, #64]	; 0x40
   287a0:	mov	r1, #0
   287a4:	ldr	r0, [r0, #116]	; 0x74
   287a8:	str	r0, [sp, #72]	; 0x48
   287ac:	ldr	r0, [r4, #24]
   287b0:	str	r1, [sp, #84]	; 0x54
   287b4:	ldr	r0, [r0, r1, lsl #2]
   287b8:	ldr	r1, [sp, #72]	; 0x48
   287bc:	add	r0, r0, r0, lsl #1
   287c0:	add	r1, r1, r0, lsl #3
   287c4:	ldr	r2, [r1, #8]
   287c8:	cmp	r2, lr
   287cc:	bge	28a3c <__assert_fail@plt+0x172dc>
   287d0:	ldr	r1, [r1, #4]
   287d4:	cmp	r1, lr
   287d8:	blt	28a3c <__assert_fail@plt+0x172dc>
   287dc:	ldr	r1, [sp, #72]	; 0x48
   287e0:	ldr	r2, [r6]
   287e4:	ldr	r0, [r1, r0, lsl #3]!
   287e8:	ldr	r1, [r1, #12]
   287ec:	ldr	sl, [r2, r0, lsl #3]
   287f0:	ldr	r0, [r9, #4]
   287f4:	cmp	r1, lr
   287f8:	bne	289c0 <__assert_fail@plt+0x17260>
   287fc:	cmp	r0, #1
   28800:	blt	28a3c <__assert_fail@plt+0x172dc>
   28804:	ldr	r3, [r9, #8]
   28808:	mvn	r8, #0
   2880c:	mvn	r1, #0
   28810:	ldr	r7, [r3]
   28814:	add	r6, r2, r7, lsl #3
   28818:	ldrb	r6, [r6, #4]
   2881c:	cmp	r6, #9
   28820:	beq	28848 <__assert_fail@plt+0x170e8>
   28824:	cmp	r6, #8
   28828:	bne	28838 <__assert_fail@plt+0x170d8>
   2882c:	ldr	r6, [r2, r7, lsl #3]
   28830:	cmp	sl, r6
   28834:	moveq	r1, r7
   28838:	add	r3, r3, #4
   2883c:	subs	r0, r0, #1
   28840:	bne	28810 <__assert_fail@plt+0x170b0>
   28844:	b	28860 <__assert_fail@plt+0x17100>
   28848:	ldr	r6, [r2, r7, lsl #3]
   2884c:	cmp	sl, r6
   28850:	moveq	r8, r7
   28854:	add	r3, r3, #4
   28858:	subs	r0, r0, #1
   2885c:	bne	28810 <__assert_fail@plt+0x170b0>
   28860:	ldr	r6, [sp, #76]	; 0x4c
   28864:	cmp	r1, #0
   28868:	blt	28888 <__assert_fail@plt+0x17128>
   2886c:	ldr	r2, [sp, #60]	; 0x3c
   28870:	mov	r0, r6
   28874:	mov	r3, r5
   28878:	bl	29730 <__assert_fail@plt+0x17fd0>
   2887c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28880:	cmp	r0, #0
   28884:	bne	29480 <__assert_fail@plt+0x17d20>
   28888:	ldr	r9, [sp, #60]	; 0x3c
   2888c:	cmp	r8, #0
   28890:	ldrge	ip, [r9, #4]
   28894:	cmpge	ip, #1
   28898:	blt	28a3c <__assert_fail@plt+0x172dc>
   2889c:	mov	sl, #0
   288a0:	ldr	r1, [r9, #8]
   288a4:	ldr	r3, [r6, #28]
   288a8:	ldr	r1, [r1, sl, lsl #2]
   288ac:	add	r2, r1, r1, lsl #1
   288b0:	add	r3, r3, r2, lsl #2
   288b4:	ldr	r7, [r3, #4]
   288b8:	cmp	r7, #1
   288bc:	blt	28920 <__assert_fail@plt+0x171c0>
   288c0:	ldr	r3, [r3, #8]
   288c4:	mov	lr, ip
   288c8:	subs	r6, r7, #1
   288cc:	beq	288fc <__assert_fail@plt+0x1719c>
   288d0:	mov	r7, #0
   288d4:	mov	ip, #1
   288d8:	add	r0, r7, r6
   288dc:	lsr	r4, r0, #1
   288e0:	ldr	r5, [r3, r4, lsl #2]
   288e4:	cmp	r5, r8
   288e8:	movge	r6, r4
   288ec:	addlt	r7, ip, r0, lsr #1
   288f0:	cmp	r7, r6
   288f4:	bcc	288d8 <__assert_fail@plt+0x17178>
   288f8:	b	28900 <__assert_fail@plt+0x171a0>
   288fc:	mov	r7, #0
   28900:	ldr	r0, [r3, r7, lsl #2]
   28904:	mov	ip, lr
   28908:	ldr	r4, [sp, #80]	; 0x50
   2890c:	ldr	r5, [sp, #68]	; 0x44
   28910:	ldr	r6, [sp, #76]	; 0x4c
   28914:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28918:	cmp	r0, r8
   2891c:	beq	289b0 <__assert_fail@plt+0x17250>
   28920:	ldr	r0, [r6, #24]
   28924:	add	r2, r0, r2, lsl #2
   28928:	ldr	r3, [r2, #4]
   2892c:	cmp	r3, #1
   28930:	blt	28988 <__assert_fail@plt+0x17228>
   28934:	ldr	r2, [r2, #8]
   28938:	subs	r7, r3, #1
   2893c:	beq	2896c <__assert_fail@plt+0x1720c>
   28940:	mov	r3, #0
   28944:	mov	r4, #1
   28948:	add	r0, r3, r7
   2894c:	lsr	r6, r0, #1
   28950:	ldr	r5, [r2, r6, lsl #2]
   28954:	cmp	r5, r8
   28958:	movge	r7, r6
   2895c:	addlt	r3, r4, r0, lsr #1
   28960:	cmp	r3, r7
   28964:	bcc	28948 <__assert_fail@plt+0x171e8>
   28968:	b	28970 <__assert_fail@plt+0x17210>
   2896c:	mov	r3, #0
   28970:	ldr	r0, [r2, r3, lsl #2]
   28974:	ldr	r4, [sp, #80]	; 0x50
   28978:	ldr	r5, [sp, #68]	; 0x44
   2897c:	ldr	r6, [sp, #76]	; 0x4c
   28980:	cmp	r0, r8
   28984:	beq	289b0 <__assert_fail@plt+0x17250>
   28988:	mov	r0, r6
   2898c:	mov	r2, r9
   28990:	mov	r3, r5
   28994:	bl	29730 <__assert_fail@plt+0x17fd0>
   28998:	cmp	r0, #0
   2899c:	bne	29480 <__assert_fail@plt+0x17d20>
   289a0:	ldr	ip, [r9, #4]
   289a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   289a8:	sub	sl, sl, #1
   289ac:	mov	r1, r9
   289b0:	add	sl, sl, #1
   289b4:	cmp	sl, ip
   289b8:	blt	288a0 <__assert_fail@plt+0x17140>
   289bc:	b	28a3c <__assert_fail@plt+0x172dc>
   289c0:	cmp	r0, #1
   289c4:	blt	28a3c <__assert_fail@plt+0x172dc>
   289c8:	mov	r7, #0
   289cc:	b	289d4 <__assert_fail@plt+0x17274>
   289d0:	ldr	r2, [r6]
   289d4:	ldr	r1, [r9, #8]
   289d8:	ldr	r1, [r1, r7, lsl #2]
   289dc:	add	r3, r2, r1, lsl #3
   289e0:	ldr	r3, [r3, #4]
   289e4:	and	r3, r3, #254	; 0xfe
   289e8:	orr	r3, r3, #1
   289ec:	cmp	r3, #9
   289f0:	ldreq	r2, [r2, r1, lsl #3]
   289f4:	cmpeq	sl, r2
   289f8:	beq	28a0c <__assert_fail@plt+0x172ac>
   289fc:	add	r7, r7, #1
   28a00:	cmp	r7, r0
   28a04:	blt	289d0 <__assert_fail@plt+0x17270>
   28a08:	b	28a3c <__assert_fail@plt+0x172dc>
   28a0c:	mov	r0, r6
   28a10:	mov	r2, r9
   28a14:	mov	r3, r5
   28a18:	bl	29730 <__assert_fail@plt+0x17fd0>
   28a1c:	cmp	r0, #0
   28a20:	bne	29480 <__assert_fail@plt+0x17d20>
   28a24:	ldr	r0, [r9, #4]
   28a28:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28a2c:	mov	r1, r9
   28a30:	add	r7, r7, #1
   28a34:	cmp	r7, r0
   28a38:	blt	289d0 <__assert_fail@plt+0x17270>
   28a3c:	ldr	r1, [sp, #84]	; 0x54
   28a40:	ldr	r0, [r4, #20]
   28a44:	add	r1, r1, #1
   28a48:	cmp	r1, r0
   28a4c:	blt	287ac <__assert_fail@plt+0x1704c>
   28a50:	ldr	r7, [sp, #56]	; 0x38
   28a54:	mov	r0, #0
   28a58:	str	r0, [fp, #-76]	; 0xffffffb4
   28a5c:	sub	r0, fp, #76	; 0x4c
   28a60:	mov	r1, r6
   28a64:	mov	r2, r9
   28a68:	bl	259d0 <__assert_fail@plt+0x14270>
   28a6c:	ldr	r1, [r4]
   28a70:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28a74:	str	r0, [r1, r4, lsl #2]
   28a78:	ldr	r0, [sp, #64]	; 0x40
   28a7c:	ldr	r9, [fp, #-76]	; 0xffffffb4
   28a80:	cmp	r9, #0
   28a84:	bne	29450 <__assert_fail@plt+0x17cf0>
   28a88:	cmp	r7, #0
   28a8c:	bne	28aa8 <__assert_fail@plt+0x17348>
   28a90:	b	29470 <__assert_fail@plt+0x17d10>
   28a94:	ldr	r1, [r4]
   28a98:	mov	r4, r2
   28a9c:	str	r3, [r1, r2, lsl #2]
   28aa0:	cmp	r7, #0
   28aa4:	beq	29470 <__assert_fail@plt+0x17d10>
   28aa8:	ldr	r1, [r0, #100]	; 0x64
   28aac:	ldr	r1, [r1, r4, lsl #2]
   28ab0:	ldrb	r1, [r1, #52]	; 0x34
   28ab4:	tst	r1, #64	; 0x40
   28ab8:	beq	29470 <__assert_fail@plt+0x17d10>
   28abc:	ldr	lr, [r0, #108]	; 0x6c
   28ac0:	ldr	r8, [r0, #84]	; 0x54
   28ac4:	cmp	lr, #1
   28ac8:	blt	2945c <__assert_fail@plt+0x17cfc>
   28acc:	ldr	r1, [r0, #116]	; 0x74
   28ad0:	mov	ip, #0
   28ad4:	mov	r2, #1
   28ad8:	mov	r3, lr
   28adc:	add	r7, r3, ip
   28ae0:	add	r7, r7, r7, lsr #31
   28ae4:	asr	r6, r7, #1
   28ae8:	add	r5, r6, r6, lsl #1
   28aec:	add	r5, r1, r5, lsl #3
   28af0:	ldr	r5, [r5, #4]
   28af4:	cmp	r5, r4
   28af8:	addlt	ip, r2, r7, asr #1
   28afc:	movge	r3, r6
   28b00:	cmp	ip, r3
   28b04:	blt	28adc <__assert_fail@plt+0x1737c>
   28b08:	cmp	ip, lr
   28b0c:	bge	29468 <__assert_fail@plt+0x17d08>
   28b10:	cmn	ip, #1
   28b14:	beq	29468 <__assert_fail@plt+0x17d08>
   28b18:	ldr	r2, [r0, #116]	; 0x74
   28b1c:	add	r1, ip, ip, lsl #1
   28b20:	str	r1, [sp, #20]
   28b24:	add	r1, r2, r1, lsl #3
   28b28:	ldr	r1, [r1, #4]
   28b2c:	cmp	r1, r4
   28b30:	bne	29468 <__assert_fail@plt+0x17d08>
   28b34:	ldr	r1, [sp, #68]	; 0x44
   28b38:	mov	r2, #0
   28b3c:	str	r2, [fp, #-72]	; 0xffffffb8
   28b40:	ldr	r3, [r1, #4]
   28b44:	cmp	r3, #0
   28b48:	ble	29494 <__assert_fail@plt+0x17d34>
   28b4c:	sub	r0, fp, #72	; 0x48
   28b50:	ldr	r5, [sp, #80]	; 0x50
   28b54:	mov	r9, #1
   28b58:	mov	lr, #0
   28b5c:	mov	r7, r8
   28b60:	str	r8, [sp, #60]	; 0x3c
   28b64:	str	ip, [sp, #24]
   28b68:	add	r0, r0, #16
   28b6c:	str	r0, [sp, #8]
   28b70:	mov	r0, #0
   28b74:	str	r0, [sp, #32]
   28b78:	ldr	r0, [r1, #8]
   28b7c:	ldr	r1, [r5, #8]
   28b80:	str	sl, [sp, #48]	; 0x30
   28b84:	ldr	r8, [r0, lr, lsl #2]
   28b88:	ldr	r0, [r7]
   28b8c:	add	r0, r0, r8, lsl #3
   28b90:	cmp	r8, r1
   28b94:	ldrb	r0, [r0, #4]
   28b98:	bne	28bb4 <__assert_fail@plt+0x17454>
   28b9c:	cmp	r0, #4
   28ba0:	bne	29410 <__assert_fail@plt+0x17cb0>
   28ba4:	ldr	r0, [r5, #12]
   28ba8:	cmp	r0, r4
   28bac:	bne	28bbc <__assert_fail@plt+0x1745c>
   28bb0:	b	29410 <__assert_fail@plt+0x17cb0>
   28bb4:	cmp	r0, #4
   28bb8:	bne	29410 <__assert_fail@plt+0x17cb0>
   28bbc:	ldr	r0, [sp, #64]	; 0x40
   28bc0:	ldr	r1, [sp, #20]
   28bc4:	mov	r4, ip
   28bc8:	str	lr, [sp, #36]	; 0x24
   28bcc:	str	r8, [sp, #56]	; 0x38
   28bd0:	ldr	r0, [r0, #116]	; 0x74
   28bd4:	add	sl, r0, r1, lsl #3
   28bd8:	b	29284 <__assert_fail@plt+0x17b24>
   28bdc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28be0:	mov	r9, #0
   28be4:	cmp	r9, r0
   28be8:	blt	29380 <__assert_fail@plt+0x17c20>
   28bec:	mvn	r9, #0
   28bf0:	cmp	r0, #1
   28bf4:	blt	293a0 <__assert_fail@plt+0x17c40>
   28bf8:	ldr	r1, [r7, #116]	; 0x74
   28bfc:	ldr	r4, [sp, #84]	; 0x54
   28c00:	mov	r8, #0
   28c04:	mov	r2, r0
   28c08:	mov	lr, #1
   28c0c:	add	r3, r2, r8
   28c10:	add	r3, r3, r3, lsr #31
   28c14:	asr	r6, r3, #1
   28c18:	add	r5, r6, r6, lsl #1
   28c1c:	add	r5, r1, r5, lsl #3
   28c20:	ldr	r5, [r5, #4]
   28c24:	cmp	r5, r4
   28c28:	addlt	r8, lr, r3, asr #1
   28c2c:	movge	r2, r6
   28c30:	cmp	r8, r2
   28c34:	blt	28c0c <__assert_fail@plt+0x174ac>
   28c38:	ldr	lr, [sp, #64]	; 0x40
   28c3c:	cmp	r8, r0
   28c40:	bge	293b4 <__assert_fail@plt+0x17c54>
   28c44:	ldr	r0, [lr, #116]	; 0x74
   28c48:	add	r1, r8, r8, lsl #1
   28c4c:	add	r0, r0, r1, lsl #3
   28c50:	ldr	r0, [r0, #4]
   28c54:	cmp	r0, r4
   28c58:	mvnne	r8, #0
   28c5c:	ldr	r5, [sp, #80]	; 0x50
   28c60:	ldr	r4, [r5, #20]
   28c64:	cmp	r4, #1
   28c68:	blt	28de0 <__assert_fail@plt+0x17680>
   28c6c:	ldr	ip, [lr, #84]	; 0x54
   28c70:	mov	r6, #0
   28c74:	str	ip, [sp, #52]	; 0x34
   28c78:	ldr	r0, [r5, #24]
   28c7c:	ldr	r3, [lr, #116]	; 0x74
   28c80:	ldr	r4, [ip]
   28c84:	ldr	r7, [fp, #-80]	; 0xffffffb0
   28c88:	ldr	r2, [r0, r6, lsl #2]
   28c8c:	mov	r0, r3
   28c90:	add	r1, r2, r2, lsl #1
   28c94:	ldr	r5, [r0, r1, lsl #3]!
   28c98:	ldr	r0, [r0, #8]
   28c9c:	ldr	r4, [r4, r5, lsl #3]
   28ca0:	mvn	r5, #0
   28ca4:	cmp	r0, r7
   28ca8:	str	r4, [sp, #76]	; 0x4c
   28cac:	ble	28cc4 <__assert_fail@plt+0x17564>
   28cb0:	mvn	r4, #0
   28cb4:	ldr	r7, [sp, #84]	; 0x54
   28cb8:	cmp	r0, r7
   28cbc:	ble	28d44 <__assert_fail@plt+0x175e4>
   28cc0:	b	28dc4 <__assert_fail@plt+0x17664>
   28cc4:	add	r1, r3, r1, lsl #3
   28cc8:	mov	r4, #1
   28ccc:	ldr	r1, [r1, #12]
   28cd0:	cmp	r1, r7
   28cd4:	blt	28d38 <__assert_fail@plt+0x175d8>
   28cd8:	sub	r1, r1, r7
   28cdc:	cmp	r0, r7
   28ce0:	mov	r7, #1
   28ce4:	clz	r1, r1
   28ce8:	lsr	r4, r1, #5
   28cec:	lsl	r1, r4, #1
   28cf0:	orreq	r1, r7, r4, lsl #1
   28cf4:	cmp	r1, #0
   28cf8:	beq	28dac <__assert_fail@plt+0x1764c>
   28cfc:	ldr	r2, [sp, #76]	; 0x4c
   28d00:	ldr	r3, [sp, #56]	; 0x38
   28d04:	mov	r0, lr
   28d08:	str	r9, [sp]
   28d0c:	bl	29b70 <__assert_fail@plt+0x18410>
   28d10:	mov	r4, r0
   28d14:	ldr	r0, [sp, #80]	; 0x50
   28d18:	ldr	lr, [sp, #64]	; 0x40
   28d1c:	ldr	ip, [sp, #52]	; 0x34
   28d20:	ldr	r0, [r0, #24]
   28d24:	ldr	r3, [lr, #116]	; 0x74
   28d28:	ldr	r2, [r0, r6, lsl #2]
   28d2c:	add	r0, r2, r2, lsl #1
   28d30:	add	r0, r3, r0, lsl #3
   28d34:	ldr	r0, [r0, #8]
   28d38:	ldr	r7, [sp, #84]	; 0x54
   28d3c:	cmp	r0, r7
   28d40:	bgt	28dc4 <__assert_fail@plt+0x17664>
   28d44:	add	r1, r2, r2, lsl #1
   28d48:	mov	r5, #1
   28d4c:	add	r1, r3, r1, lsl #3
   28d50:	ldr	r1, [r1, #12]
   28d54:	cmp	r1, r7
   28d58:	blt	28dc4 <__assert_fail@plt+0x17664>
   28d5c:	sub	r1, r1, r7
   28d60:	cmp	r0, r7
   28d64:	mov	r0, #1
   28d68:	clz	r1, r1
   28d6c:	lsr	r2, r1, #5
   28d70:	lsl	r1, r2, #1
   28d74:	orreq	r1, r0, r2, lsl #1
   28d78:	cmp	r1, #0
   28d7c:	beq	28dc0 <__assert_fail@plt+0x17660>
   28d80:	ldr	r2, [sp, #76]	; 0x4c
   28d84:	ldr	r3, [sp, #44]	; 0x2c
   28d88:	mov	r0, lr
   28d8c:	str	r8, [sp]
   28d90:	bl	29b70 <__assert_fail@plt+0x18410>
   28d94:	ldr	ip, [sp, #52]	; 0x34
   28d98:	ldr	lr, [sp, #64]	; 0x40
   28d9c:	mov	r5, r0
   28da0:	cmp	r5, r4
   28da4:	beq	28dcc <__assert_fail@plt+0x1766c>
   28da8:	b	28e3c <__assert_fail@plt+0x176dc>
   28dac:	mov	r4, #0
   28db0:	ldr	r7, [sp, #84]	; 0x54
   28db4:	cmp	r0, r7
   28db8:	ble	28d44 <__assert_fail@plt+0x175e4>
   28dbc:	b	28dc4 <__assert_fail@plt+0x17664>
   28dc0:	mov	r5, #0
   28dc4:	cmp	r5, r4
   28dc8:	bne	28e3c <__assert_fail@plt+0x176dc>
   28dcc:	ldr	r5, [sp, #80]	; 0x50
   28dd0:	add	r6, r6, #1
   28dd4:	ldr	r4, [r5, #20]
   28dd8:	cmp	r6, r4
   28ddc:	blt	28c78 <__assert_fail@plt+0x17518>
   28de0:	ldr	r0, [sp, #32]
   28de4:	cmp	r0, #0
   28de8:	beq	28e60 <__assert_fail@plt+0x17700>
   28dec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28df0:	mov	r2, #1
   28df4:	str	r0, [fp, #-60]	; 0xffffffc4
   28df8:	ldr	r0, [sp, #56]	; 0x38
   28dfc:	str	r0, [fp, #-64]	; 0xffffffc0
   28e00:	ldr	r0, [sp, #16]
   28e04:	cmp	r0, #0
   28e08:	beq	28f7c <__assert_fail@plt+0x1781c>
   28e0c:	ldr	r4, [sp, #40]	; 0x28
   28e10:	cmp	r4, #0
   28e14:	bne	2926c <__assert_fail@plt+0x17b0c>
   28e18:	ldr	sl, [sp, #48]	; 0x30
   28e1c:	ldr	r0, [sp, #72]	; 0x48
   28e20:	mov	r1, #1
   28e24:	str	r0, [sl]
   28e28:	mov	r0, #1
   28e2c:	str	r1, [fp, #-52]	; 0xffffffcc
   28e30:	str	sl, [sp, #28]
   28e34:	str	r0, [sp, #40]	; 0x28
   28e38:	b	29018 <__assert_fail@plt+0x178b8>
   28e3c:	ldr	r5, [sp, #80]	; 0x50
   28e40:	ldr	r7, [sp, #60]	; 0x3c
   28e44:	ldr	ip, [sp, #24]
   28e48:	ldr	lr, [sp, #36]	; 0x24
   28e4c:	ldr	r8, [sp, #56]	; 0x38
   28e50:	ldr	r4, [sp, #72]	; 0x48
   28e54:	mov	r0, sl
   28e58:	mov	r9, #1
   28e5c:	b	293fc <__assert_fail@plt+0x17c9c>
   28e60:	mov	r0, r5
   28e64:	mov	r1, #12
   28e68:	cmp	r4, #1
   28e6c:	mov	r2, #1
   28e70:	vld1.32	{d16-d17}, [r0], r1
   28e74:	sub	r1, fp, #72	; 0x48
   28e78:	vld1.32	{d18-d19}, [r0]
   28e7c:	add	r0, r1, #12
   28e80:	vst1.32	{d18-d19}, [r0]
   28e84:	mov	r0, r1
   28e88:	mov	r1, #20
   28e8c:	vst1.64	{d16-d17}, [r0], r1
   28e90:	str	r4, [r0]
   28e94:	blt	28f58 <__assert_fail@plt+0x177f8>
   28e98:	lsl	r0, r4, #2
   28e9c:	str	r4, [fp, #-56]	; 0xffffffc8
   28ea0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   28ea4:	cmp	r0, #0
   28ea8:	str	r0, [fp, #-48]	; 0xffffffd0
   28eac:	beq	294e0 <__assert_fail@plt+0x17d80>
   28eb0:	mov	r6, r0
   28eb4:	ldr	r0, [r5, #20]
   28eb8:	ldr	r1, [r5, #24]
   28ebc:	lsl	r2, r0, #2
   28ec0:	mov	r0, r6
   28ec4:	bl	11484 <memcpy@plt>
   28ec8:	ldr	r0, [sp, #56]	; 0x38
   28ecc:	mov	sl, r6
   28ed0:	str	r0, [fp, #-64]	; 0xffffffc0
   28ed4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28ed8:	str	r0, [fp, #-60]	; 0xffffffc4
   28edc:	lsl	r0, r4, #1
   28ee0:	lsl	r1, r4, #3
   28ee4:	str	r0, [sp, #16]
   28ee8:	str	r0, [fp, #-56]	; 0xffffffc8
   28eec:	mov	r0, r6
   28ef0:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   28ef4:	cmp	r0, #0
   28ef8:	beq	29500 <__assert_fail@plt+0x17da0>
   28efc:	mov	sl, r0
   28f00:	mov	r6, r0
   28f04:	str	r0, [fp, #-48]	; 0xffffffd0
   28f08:	str	r0, [sp, #12]
   28f0c:	ldr	r0, [sl]
   28f10:	ldr	r2, [sp, #72]	; 0x48
   28f14:	cmp	r0, r2
   28f18:	ble	28fc4 <__assert_fail@plt+0x17864>
   28f1c:	ldr	lr, [sp, #64]	; 0x40
   28f20:	cmp	r4, #1
   28f24:	mov	r2, r4
   28f28:	blt	29000 <__assert_fail@plt+0x178a0>
   28f2c:	add	r1, sl, r4, lsl #2
   28f30:	add	r0, r4, #1
   28f34:	mov	r2, r1
   28f38:	ldr	r3, [r2, #-4]!
   28f3c:	sub	r0, r0, #1
   28f40:	cmp	r0, #1
   28f44:	str	r3, [r1]
   28f48:	mov	r1, r2
   28f4c:	bgt	28f38 <__assert_fail@plt+0x177d8>
   28f50:	sub	r2, r0, #1
   28f54:	b	29000 <__assert_fail@plt+0x178a0>
   28f58:	ldr	r1, [sp, #8]
   28f5c:	mov	r0, #0
   28f60:	str	r0, [r1]
   28f64:	str	r0, [r1, #4]
   28f68:	str	r0, [r1, #8]
   28f6c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28f70:	str	r0, [fp, #-60]	; 0xffffffc4
   28f74:	ldr	r0, [sp, #56]	; 0x38
   28f78:	str	r0, [fp, #-64]	; 0xffffffc0
   28f7c:	mov	r0, #4
   28f80:	str	r2, [fp, #-52]	; 0xffffffcc
   28f84:	str	r2, [fp, #-56]	; 0xffffffc8
   28f88:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   28f8c:	cmp	r0, #0
   28f90:	str	r0, [fp, #-48]	; 0xffffffd0
   28f94:	beq	294e0 <__assert_fail@plt+0x17d80>
   28f98:	mov	sl, r0
   28f9c:	ldr	r0, [sp, #72]	; 0x48
   28fa0:	ldr	lr, [sp, #64]	; 0x40
   28fa4:	str	sl, [sp, #12]
   28fa8:	str	sl, [sp, #28]
   28fac:	str	r0, [sl]
   28fb0:	mov	r0, #1
   28fb4:	str	r0, [sp, #40]	; 0x28
   28fb8:	mov	r0, #1
   28fbc:	str	r0, [sp, #16]
   28fc0:	b	29018 <__assert_fail@plt+0x178b8>
   28fc4:	add	r0, sl, r4, lsl #2
   28fc8:	ldr	lr, [sp, #64]	; 0x40
   28fcc:	ldr	r1, [r0, #-4]
   28fd0:	cmp	r1, r2
   28fd4:	mov	r2, r4
   28fd8:	ble	29000 <__assert_fail@plt+0x178a0>
   28fdc:	ldr	r3, [sp, #72]	; 0x48
   28fe0:	sub	r2, r4, #2
   28fe4:	str	r1, [r0]
   28fe8:	sub	r2, r2, #1
   28fec:	ldr	r1, [r0, #-8]
   28ff0:	sub	r0, r0, #4
   28ff4:	cmp	r1, r3
   28ff8:	bgt	28fe4 <__assert_fail@plt+0x17884>
   28ffc:	add	r2, r2, #2
   29000:	ldr	r0, [sp, #72]	; 0x48
   29004:	add	r4, r4, #1
   29008:	str	r6, [sp, #28]
   2900c:	str	r4, [sp, #40]	; 0x28
   29010:	str	r0, [sl, r2, lsl #2]
   29014:	str	r4, [fp, #-52]	; 0xffffffcc
   29018:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2901c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   29020:	ldr	r6, [r1, r0, lsl #2]
   29024:	mov	r8, r1
   29028:	mov	r0, lr
   2902c:	sub	r1, fp, #72	; 0x48
   29030:	bl	27f40 <__assert_fail@plt+0x167e0>
   29034:	cmp	r0, #0
   29038:	bne	294bc <__assert_fail@plt+0x17d5c>
   2903c:	ldr	r5, [r5, #4]
   29040:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29044:	ldr	r4, [sp, #72]	; 0x48
   29048:	mov	r7, r8
   2904c:	cmp	r5, #0
   29050:	beq	29100 <__assert_fail@plt+0x179a0>
   29054:	mov	r3, r0
   29058:	cmp	r0, #0
   2905c:	str	r6, [sp, #84]	; 0x54
   29060:	blt	290f8 <__assert_fail@plt+0x17998>
   29064:	mov	r0, #0
   29068:	mov	r6, r0
   2906c:	ldr	r0, [r7, r0, lsl #2]
   29070:	ldr	r1, [r5, r6, lsl #2]
   29074:	cmp	r1, #0
   29078:	beq	290e8 <__assert_fail@plt+0x17988>
   2907c:	cmp	r0, #0
   29080:	beq	290d8 <__assert_fail@plt+0x17978>
   29084:	sub	r4, fp, #44	; 0x2c
   29088:	add	r2, r0, #4
   2908c:	add	r1, r1, #4
   29090:	mov	r0, r4
   29094:	bl	2435c <__assert_fail@plt+0x12bfc>
   29098:	cmp	r0, #0
   2909c:	str	r0, [fp, #-32]	; 0xffffffe0
   290a0:	bne	294bc <__assert_fail@plt+0x17d5c>
   290a4:	ldr	r1, [sp, #60]	; 0x3c
   290a8:	sub	r0, fp, #32
   290ac:	mov	r2, r4
   290b0:	bl	259d0 <__assert_fail@plt+0x14270>
   290b4:	str	r0, [r5, r6, lsl #2]
   290b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   290bc:	bl	14538 <__assert_fail@plt+0x2dd8>
   290c0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   290c4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   290c8:	ldr	r4, [sp, #72]	; 0x48
   290cc:	mov	r7, r8
   290d0:	cmp	r9, #0
   290d4:	bne	29430 <__assert_fail@plt+0x17cd0>
   290d8:	add	r0, r6, #1
   290dc:	cmp	r6, r3
   290e0:	blt	29068 <__assert_fail@plt+0x17908>
   290e4:	b	290f8 <__assert_fail@plt+0x17998>
   290e8:	str	r0, [r5, r6, lsl #2]
   290ec:	add	r0, r6, #1
   290f0:	cmp	r6, r3
   290f4:	blt	29068 <__assert_fail@plt+0x17908>
   290f8:	ldr	r6, [sp, #84]	; 0x54
   290fc:	mov	r0, r3
   29100:	str	r6, [r7, r0, lsl #2]
   29104:	ldr	r0, [sp, #40]	; 0x28
   29108:	str	r7, [sp, #32]
   2910c:	str	sl, [sp, #48]	; 0x30
   29110:	cmp	r0, #1
   29114:	blt	291a8 <__assert_fail@plt+0x17a48>
   29118:	ldr	r5, [sp, #80]	; 0x50
   2911c:	ldr	ip, [sp, #24]
   29120:	ldr	r8, [sp, #56]	; 0x38
   29124:	subs	r0, r0, #1
   29128:	mov	r9, #1
   2912c:	mov	r1, #0
   29130:	beq	29158 <__assert_fail@plt+0x179f8>
   29134:	mov	r2, r0
   29138:	add	r3, r1, r2
   2913c:	lsr	r7, r3, #1
   29140:	ldr	r6, [sl, r7, lsl #2]
   29144:	cmp	r6, r4
   29148:	movge	r2, r7
   2914c:	addlt	r1, r9, r3, lsr #1
   29150:	cmp	r1, r2
   29154:	bcc	29138 <__assert_fail@plt+0x179d8>
   29158:	ldr	r2, [sl, r1, lsl #2]
   2915c:	cmp	r2, r4
   29160:	mov	r2, r1
   29164:	mvnne	r2, #0
   29168:	cmp	r2, #0
   2916c:	blt	291c4 <__assert_fail@plt+0x17a64>
   29170:	ldr	r3, [sp, #40]	; 0x28
   29174:	ldr	r7, [sp, #60]	; 0x3c
   29178:	cmp	r3, r2
   2917c:	ble	291d4 <__assert_fail@plt+0x17a74>
   29180:	cmp	r0, r2
   29184:	str	r0, [fp, #-52]	; 0xffffffcc
   29188:	ble	291e0 <__assert_fail@plt+0x17a80>
   2918c:	ldr	r3, [sp, #40]	; 0x28
   29190:	mvn	r2, r1
   29194:	add	r3, r3, r2
   29198:	cmp	r3, #4
   2919c:	bcs	291ec <__assert_fail@plt+0x17a8c>
   291a0:	mov	r2, r1
   291a4:	b	29244 <__assert_fail@plt+0x17ae4>
   291a8:	ldr	r5, [sp, #80]	; 0x50
   291ac:	ldr	ip, [sp, #24]
   291b0:	ldr	lr, [sp, #36]	; 0x24
   291b4:	ldr	r8, [sp, #56]	; 0x38
   291b8:	ldr	r7, [sp, #60]	; 0x3c
   291bc:	mov	r9, #1
   291c0:	b	29230 <__assert_fail@plt+0x17ad0>
   291c4:	ldr	r0, [sp, #12]
   291c8:	ldr	r7, [sp, #60]	; 0x3c
   291cc:	str	r0, [sp, #28]
   291d0:	b	2922c <__assert_fail@plt+0x17acc>
   291d4:	ldr	r0, [sp, #12]
   291d8:	str	r0, [sp, #28]
   291dc:	b	2922c <__assert_fail@plt+0x17acc>
   291e0:	ldr	r1, [sp, #12]
   291e4:	str	r1, [sp, #28]
   291e8:	b	29228 <__assert_fail@plt+0x17ac8>
   291ec:	bic	r6, r3, #3
   291f0:	add	r2, r1, r6
   291f4:	add	r1, sl, r1, lsl #2
   291f8:	mov	r7, r6
   291fc:	add	r1, r1, #4
   29200:	sub	r5, r1, #4
   29204:	vld1.32	{d16-d17}, [r1]!
   29208:	subs	r7, r7, #4
   2920c:	vst1.32	{d16-d17}, [r5]
   29210:	bne	29200 <__assert_fail@plt+0x17aa0>
   29214:	ldr	r5, [sp, #80]	; 0x50
   29218:	ldr	r7, [sp, #60]	; 0x3c
   2921c:	cmp	r3, r6
   29220:	bne	29244 <__assert_fail@plt+0x17ae4>
   29224:	str	sl, [sp, #28]
   29228:	str	r0, [sp, #40]	; 0x28
   2922c:	ldr	lr, [sp, #36]	; 0x24
   29230:	ldr	r0, [sp, #64]	; 0x40
   29234:	add	r1, r4, r4, lsl #1
   29238:	ldr	r0, [r0, #116]	; 0x74
   2923c:	add	r0, r0, r1, lsl #3
   29240:	b	293fc <__assert_fail@plt+0x17c9c>
   29244:	ldr	lr, [sp, #36]	; 0x24
   29248:	add	r1, sl, r2, lsl #2
   2924c:	ldr	r1, [r1, #4]
   29250:	str	r1, [sl, r2, lsl #2]
   29254:	add	r2, r2, #1
   29258:	cmp	r0, r2
   2925c:	bne	29248 <__assert_fail@plt+0x17ae8>
   29260:	str	sl, [sp, #28]
   29264:	str	r0, [sp, #40]	; 0x28
   29268:	b	29230 <__assert_fail@plt+0x17ad0>
   2926c:	ldr	r0, [sp, #16]
   29270:	ldr	sl, [sp, #48]	; 0x30
   29274:	ldr	r6, [sp, #28]
   29278:	cmp	r0, r4
   2927c:	beq	28edc <__assert_fail@plt+0x1777c>
   29280:	b	28f0c <__assert_fail@plt+0x177ac>
   29284:	ldr	r0, [sl]
   29288:	cmp	r0, r8
   2928c:	bne	293f8 <__assert_fail@plt+0x17c98>
   29290:	ldr	r0, [sl, #8]
   29294:	ldr	r1, [sl, #12]
   29298:	subs	r0, r1, r0
   2929c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   292a0:	add	r0, r0, r1
   292a4:	str	r0, [sp, #84]	; 0x54
   292a8:	beq	293cc <__assert_fail@plt+0x17c6c>
   292ac:	ldr	r0, [r7, #12]
   292b0:	add	r0, r0, r8, lsl #2
   292b4:	ldr	r1, [r5, #12]
   292b8:	ldr	r2, [sp, #84]	; 0x54
   292bc:	cmp	r2, r1
   292c0:	bgt	293f8 <__assert_fail@plt+0x17c98>
   292c4:	ldr	r1, [r5]
   292c8:	ldr	r1, [r1, r2, lsl #2]
   292cc:	cmp	r1, #0
   292d0:	beq	293f8 <__assert_fail@plt+0x17c98>
   292d4:	ldr	r2, [r1, #8]
   292d8:	cmp	r2, #1
   292dc:	blt	293f8 <__assert_fail@plt+0x17c98>
   292e0:	ldr	r7, [r0]
   292e4:	ldr	r0, [r1, #12]
   292e8:	subs	r2, r2, #1
   292ec:	mov	r1, #0
   292f0:	beq	29314 <__assert_fail@plt+0x17bb4>
   292f4:	add	r3, r1, r2
   292f8:	lsr	r6, r3, #1
   292fc:	ldr	r5, [r0, r6, lsl #2]
   29300:	cmp	r5, r7
   29304:	movge	r2, r6
   29308:	addlt	r1, r9, r3, lsr #1
   2930c:	cmp	r1, r2
   29310:	bcc	292f4 <__assert_fail@plt+0x17b94>
   29314:	ldr	r0, [r0, r1, lsl #2]
   29318:	cmp	r0, r7
   2931c:	bne	293f0 <__assert_fail@plt+0x17c90>
   29320:	str	r7, [sp, #44]	; 0x2c
   29324:	ldr	r7, [sp, #64]	; 0x40
   29328:	str	r4, [sp, #72]	; 0x48
   2932c:	ldr	r0, [r7, #108]	; 0x6c
   29330:	cmp	r0, #1
   29334:	blt	28bdc <__assert_fail@plt+0x1747c>
   29338:	ldr	r1, [r7, #116]	; 0x74
   2933c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   29340:	mov	r9, #0
   29344:	mov	r2, r0
   29348:	mov	r8, #1
   2934c:	add	r3, r2, r9
   29350:	add	r3, r3, r3, lsr #31
   29354:	asr	r6, r3, #1
   29358:	add	r5, r6, r6, lsl #1
   2935c:	add	r5, r1, r5, lsl #3
   29360:	ldr	r5, [r5, #4]
   29364:	cmp	r5, r4
   29368:	addlt	r9, r8, r3, asr #1
   2936c:	movge	r2, r6
   29370:	cmp	r9, r2
   29374:	blt	2934c <__assert_fail@plt+0x17bec>
   29378:	cmp	r9, r0
   2937c:	bge	28bec <__assert_fail@plt+0x1748c>
   29380:	ldr	r1, [r7, #116]	; 0x74
   29384:	add	r2, r9, r9, lsl #1
   29388:	add	r1, r1, r2, lsl #3
   2938c:	ldr	r1, [r1, #4]
   29390:	cmp	r1, r4
   29394:	mvnne	r9, #0
   29398:	cmp	r0, #1
   2939c:	bge	28bf8 <__assert_fail@plt+0x17498>
   293a0:	ldr	r4, [sp, #84]	; 0x54
   293a4:	mov	r8, #0
   293a8:	ldr	lr, [sp, #64]	; 0x40
   293ac:	cmp	r8, r0
   293b0:	blt	28c44 <__assert_fail@plt+0x174e4>
   293b4:	mvn	r8, #0
   293b8:	ldr	r5, [sp, #80]	; 0x50
   293bc:	ldr	r4, [r5, #20]
   293c0:	cmp	r4, #1
   293c4:	bge	28c6c <__assert_fail@plt+0x1750c>
   293c8:	b	28de0 <__assert_fail@plt+0x17680>
   293cc:	ldr	r0, [r7, #20]
   293d0:	add	r1, r8, r8, lsl #1
   293d4:	add	r0, r0, r1, lsl #2
   293d8:	ldr	r0, [r0, #8]
   293dc:	ldr	r1, [r5, #12]
   293e0:	ldr	r2, [sp, #84]	; 0x54
   293e4:	cmp	r2, r1
   293e8:	bgt	293f8 <__assert_fail@plt+0x17c98>
   293ec:	b	292c4 <__assert_fail@plt+0x17b64>
   293f0:	ldr	r5, [sp, #80]	; 0x50
   293f4:	ldr	r7, [sp, #60]	; 0x3c
   293f8:	mov	r0, sl
   293fc:	add	sl, r0, #24
   29400:	ldrb	r0, [r0, #20]
   29404:	add	r4, r4, #1
   29408:	cmp	r0, #0
   2940c:	bne	29284 <__assert_fail@plt+0x17b24>
   29410:	ldr	r1, [sp, #68]	; 0x44
   29414:	ldr	sl, [sp, #48]	; 0x30
   29418:	ldr	r4, [fp, #-80]	; 0xffffffb0
   2941c:	add	lr, lr, #1
   29420:	ldr	r0, [r1, #4]
   29424:	cmp	lr, r0
   29428:	blt	28b78 <__assert_fail@plt+0x17418>
   2942c:	mov	r9, #0
   29430:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29434:	cmp	r0, #0
   29438:	beq	29444 <__assert_fail@plt+0x17ce4>
   2943c:	mov	r0, sl
   29440:	bl	14538 <__assert_fail@plt+0x2dd8>
   29444:	cmp	r9, #0
   29448:	str	r9, [fp, #-76]	; 0xffffffb4
   2944c:	moveq	r9, #0
   29450:	mov	r0, r9
   29454:	sub	sp, fp, #28
   29458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2945c:	mov	ip, #0
   29460:	cmp	ip, lr
   29464:	blt	28b10 <__assert_fail@plt+0x173b0>
   29468:	mov	r0, #0
   2946c:	str	r0, [fp, #-76]	; 0xffffffb4
   29470:	mov	r9, #0
   29474:	mov	r0, r9
   29478:	sub	sp, fp, #28
   2947c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29480:	mov	r9, r0
   29484:	str	r0, [fp, #-76]	; 0xffffffb4
   29488:	mov	r0, r9
   2948c:	sub	sp, fp, #28
   29490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29494:	str	r2, [fp, #-76]	; 0xffffffb4
   29498:	mov	r9, #0
   2949c:	mov	r0, r9
   294a0:	sub	sp, fp, #28
   294a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294a8:	str	r0, [fp, #-72]	; 0xffffffb8
   294ac:	str	r9, [fp, #-76]	; 0xffffffb4
   294b0:	mov	r0, r9
   294b4:	sub	sp, fp, #28
   294b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294bc:	mov	r9, r0
   294c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   294c4:	cmp	r0, #0
   294c8:	bne	2943c <__assert_fail@plt+0x17cdc>
   294cc:	b	29444 <__assert_fail@plt+0x17ce4>
   294d0:	mov	r9, r0
   294d4:	mov	r0, r9
   294d8:	sub	sp, fp, #28
   294dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294e0:	mov	sl, #0
   294e4:	mov	r9, #12
   294e8:	str	sl, [fp, #-56]	; 0xffffffc8
   294ec:	str	sl, [fp, #-52]	; 0xffffffcc
   294f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   294f4:	cmp	r0, #0
   294f8:	bne	2943c <__assert_fail@plt+0x17cdc>
   294fc:	b	29444 <__assert_fail@plt+0x17ce4>
   29500:	mov	r9, #12
   29504:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29508:	cmp	r0, #0
   2950c:	bne	2943c <__assert_fail@plt+0x17cdc>
   29510:	b	29444 <__assert_fail@plt+0x17ce4>
   29514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29518:	add	fp, sp, #28
   2951c:	sub	sp, sp, #12
   29520:	ldr	ip, [r1, #4]
   29524:	mov	sl, r0
   29528:	mov	r0, #0
   2952c:	cmp	ip, #0
   29530:	ldrne	lr, [r2, #4]
   29534:	cmpne	lr, #0
   29538:	bne	29544 <__assert_fail@plt+0x17de4>
   2953c:	sub	sp, fp, #28
   29540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29544:	mov	r7, r1
   29548:	ldr	r1, [sl, #4]
   2954c:	ldr	r6, [sl]
   29550:	add	r3, lr, ip
   29554:	add	r4, r1, r3
   29558:	cmp	r4, r6
   2955c:	ble	295a0 <__assert_fail@plt+0x17e40>
   29560:	mov	r5, r2
   29564:	mov	r2, sl
   29568:	add	r4, r6, r3
   2956c:	ldr	r0, [r2, #8]!
   29570:	lsl	r1, r4, #2
   29574:	str	r2, [sp, #8]
   29578:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   2957c:	cmp	r0, #0
   29580:	beq	29724 <__assert_fail@plt+0x17fc4>
   29584:	str	r4, [sl]
   29588:	str	r0, [sl, #8]
   2958c:	mov	r2, r5
   29590:	ldr	r1, [sl, #4]
   29594:	ldr	lr, [r5, #4]
   29598:	ldr	ip, [r7, #4]
   2959c:	b	295a8 <__assert_fail@plt+0x17e48>
   295a0:	add	r0, sl, #8
   295a4:	str	r0, [sp, #8]
   295a8:	str	r2, [sp, #4]
   295ac:	ldr	r2, [r2, #8]
   295b0:	ldr	r4, [r7, #8]
   295b4:	add	r3, ip, r1
   295b8:	sub	r8, r1, #1
   295bc:	add	r9, r3, lr
   295c0:	sub	ip, ip, #1
   295c4:	sub	r3, lr, #1
   295c8:	ldr	r1, [r2, r3, lsl #2]
   295cc:	ldr	r6, [r4, ip, lsl #2]
   295d0:	cmp	r6, r1
   295d4:	beq	29600 <__assert_fail@plt+0x17ea0>
   295d8:	blt	295f0 <__assert_fail@plt+0x17e90>
   295dc:	sub	r5, ip, #1
   295e0:	cmp	ip, #0
   295e4:	mov	ip, r5
   295e8:	bgt	295cc <__assert_fail@plt+0x17e6c>
   295ec:	b	2967c <__assert_fail@plt+0x17f1c>
   295f0:	cmp	lr, #2
   295f4:	mov	lr, r3
   295f8:	bge	295c4 <__assert_fail@plt+0x17e64>
   295fc:	b	2967c <__assert_fail@plt+0x17f1c>
   29600:	mov	r0, r9
   29604:	cmp	r8, #0
   29608:	blt	29654 <__assert_fail@plt+0x17ef4>
   2960c:	ldr	r1, [sp, #8]
   29610:	ldr	r9, [r1]
   29614:	mov	r1, r8
   29618:	ldr	r5, [r9, r1, lsl #2]
   2961c:	cmp	r5, r6
   29620:	ble	29638 <__assert_fail@plt+0x17ed8>
   29624:	sub	r8, r1, #1
   29628:	cmp	r1, #0
   2962c:	mov	r1, r8
   29630:	bgt	29618 <__assert_fail@plt+0x17eb8>
   29634:	b	29654 <__assert_fail@plt+0x17ef4>
   29638:	mov	r8, r1
   2963c:	bne	29654 <__assert_fail@plt+0x17ef4>
   29640:	mov	r8, r1
   29644:	mov	r9, r0
   29648:	cmp	ip, #1
   2964c:	bge	29670 <__assert_fail@plt+0x17f10>
   29650:	b	2967c <__assert_fail@plt+0x17f1c>
   29654:	ldr	r1, [sp, #8]
   29658:	mov	r9, r0
   2965c:	sub	r9, r0, #1
   29660:	ldr	r1, [r1]
   29664:	str	r6, [r1, r9, lsl #2]
   29668:	cmp	ip, #1
   2966c:	blt	2967c <__assert_fail@plt+0x17f1c>
   29670:	cmp	lr, #2
   29674:	mov	lr, r3
   29678:	bge	295c0 <__assert_fail@plt+0x17e60>
   2967c:	ldr	lr, [r7, #4]
   29680:	ldr	r7, [sp, #4]
   29684:	ldr	r2, [sl, #4]
   29688:	ldr	r0, [sl, #8]
   2968c:	ldr	r4, [r7, #4]
   29690:	subs	r1, r2, #1
   29694:	add	r3, r1, lr
   29698:	add	r3, r3, r4
   2969c:	sub	r5, r3, r9
   296a0:	add	r6, r5, #1
   296a4:	cmpge	r5, #0
   296a8:	add	r7, r6, r2
   296ac:	str	r7, [sl, #4]
   296b0:	blt	29708 <__assert_fail@plt+0x17fa8>
   296b4:	add	r2, r2, r4
   296b8:	add	r2, r2, lr
   296bc:	sub	r2, r2, r9
   296c0:	add	r7, r0, r2, lsl #2
   296c4:	ldr	r2, [r0, r1, lsl #2]
   296c8:	ldr	r5, [r0, r3, lsl #2]
   296cc:	cmp	r5, r2
   296d0:	bgt	296ec <__assert_fail@plt+0x17f8c>
   296d4:	str	r2, [r7, r1, lsl #2]
   296d8:	sub	r2, r1, #1
   296dc:	cmp	r1, #0
   296e0:	mov	r1, r2
   296e4:	bgt	296c4 <__assert_fail@plt+0x17f64>
   296e8:	b	29708 <__assert_fail@plt+0x17fa8>
   296ec:	str	r5, [r7, r1, lsl #2]
   296f0:	sub	r7, r7, #4
   296f4:	subs	r6, r6, #1
   296f8:	sub	r3, r3, #1
   296fc:	mov	r2, #0
   29700:	bne	296c4 <__assert_fail@plt+0x17f64>
   29704:	b	2970c <__assert_fail@plt+0x17fac>
   29708:	mov	r2, r6
   2970c:	add	r1, r0, r9, lsl #2
   29710:	lsl	r2, r2, #2
   29714:	bl	11484 <memcpy@plt>
   29718:	mov	r0, #0
   2971c:	sub	sp, fp, #28
   29720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29724:	mov	r0, #12
   29728:	sub	sp, fp, #28
   2972c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29734:	add	fp, sp, #28
   29738:	sub	sp, sp, #44	; 0x2c
   2973c:	mov	ip, r0
   29740:	ldr	r0, [r0, #28]
   29744:	str	r3, [sp, #4]
   29748:	add	r3, r1, r1, lsl #1
   2974c:	mov	r9, #0
   29750:	str	r9, [sp, #36]	; 0x24
   29754:	str	r9, [sp, #32]
   29758:	str	r9, [sp, #40]	; 0x28
   2975c:	add	r3, r0, r3, lsl #2
   29760:	mov	r0, r3
   29764:	ldr	lr, [r0, #4]!
   29768:	cmp	lr, #1
   2976c:	str	r0, [sp, #24]
   29770:	blt	29a80 <__assert_fail@plt+0x18320>
   29774:	add	r4, r3, #8
   29778:	mov	sl, #1
   2977c:	str	r2, [sp, #28]
   29780:	str	r3, [sp]
   29784:	str	r1, [sp, #12]
   29788:	str	ip, [sp, #8]
   2978c:	str	r4, [sp, #20]
   29790:	ldr	r3, [r4]
   29794:	ldr	r0, [r3, r9, lsl #2]
   29798:	cmp	r0, r1
   2979c:	beq	29944 <__assert_fail@plt+0x181e4>
   297a0:	ldr	r2, [ip]
   297a4:	add	r2, r2, r0, lsl #3
   297a8:	ldrb	r2, [r2, #4]
   297ac:	tst	r2, #8
   297b0:	beq	29944 <__assert_fail@plt+0x181e4>
   297b4:	ldr	r2, [ip, #20]
   297b8:	add	r0, r0, r0, lsl #1
   297bc:	mvn	r8, #0
   297c0:	str	r0, [sp, #16]
   297c4:	add	r0, r2, r0, lsl #2
   297c8:	ldr	r7, [r0, #4]
   297cc:	ldr	r0, [r0, #8]
   297d0:	cmp	r7, #2
   297d4:	ldr	r5, [r0]
   297d8:	ldrge	r8, [r0, #4]
   297dc:	cmp	lr, #1
   297e0:	blt	29820 <__assert_fail@plt+0x180c0>
   297e4:	mov	r2, #0
   297e8:	subs	r7, lr, #1
   297ec:	beq	29810 <__assert_fail@plt+0x180b0>
   297f0:	add	r6, r2, r7
   297f4:	lsr	r4, r6, #1
   297f8:	ldr	r0, [r3, r4, lsl #2]
   297fc:	cmp	r0, r5
   29800:	movge	r7, r4
   29804:	addlt	r2, sl, r6, lsr #1
   29808:	cmp	r2, r7
   2980c:	bcc	297f0 <__assert_fail@plt+0x18090>
   29810:	ldr	r0, [r3, r2, lsl #2]
   29814:	ldr	r4, [sp, #20]
   29818:	cmp	r0, r5
   2981c:	beq	2987c <__assert_fail@plt+0x1811c>
   29820:	ldr	r0, [sp, #28]
   29824:	ldr	r0, [r0, #4]
   29828:	cmp	r0, #1
   2982c:	blt	2987c <__assert_fail@plt+0x1811c>
   29830:	subs	r6, r0, #1
   29834:	ldr	r0, [sp, #28]
   29838:	mov	r7, #0
   2983c:	ldr	r1, [r0, #8]
   29840:	beq	29864 <__assert_fail@plt+0x18104>
   29844:	add	r0, r7, r6
   29848:	lsr	r4, r0, #1
   2984c:	ldr	ip, [r1, r4, lsl #2]
   29850:	cmp	ip, r5
   29854:	movge	r6, r4
   29858:	addlt	r7, sl, r0, lsr #1
   2985c:	cmp	r7, r6
   29860:	bcc	29844 <__assert_fail@plt+0x180e4>
   29864:	ldr	r0, [r1, r7, lsl #2]
   29868:	ldr	r1, [sp, #12]
   2986c:	ldr	ip, [sp, #8]
   29870:	ldr	r4, [sp, #20]
   29874:	cmp	r0, r5
   29878:	beq	29914 <__assert_fail@plt+0x181b4>
   2987c:	cmp	r8, #1
   29880:	blt	29944 <__assert_fail@plt+0x181e4>
   29884:	cmp	lr, #1
   29888:	blt	298c4 <__assert_fail@plt+0x18164>
   2988c:	mov	r2, #0
   29890:	subs	r7, lr, #1
   29894:	beq	298b8 <__assert_fail@plt+0x18158>
   29898:	add	r0, r2, r7
   2989c:	lsr	r6, r0, #1
   298a0:	ldr	r5, [r3, r6, lsl #2]
   298a4:	cmp	r5, r8
   298a8:	movge	r7, r6
   298ac:	addlt	r2, sl, r0, lsr #1
   298b0:	cmp	r2, r7
   298b4:	bcc	29898 <__assert_fail@plt+0x18138>
   298b8:	ldr	r0, [r3, r2, lsl #2]
   298bc:	cmp	r0, r8
   298c0:	beq	29944 <__assert_fail@plt+0x181e4>
   298c4:	ldr	r2, [sp, #28]
   298c8:	ldr	r0, [r2, #4]
   298cc:	cmp	r0, #1
   298d0:	blt	29944 <__assert_fail@plt+0x181e4>
   298d4:	ldr	r4, [r2, #8]
   298d8:	subs	r7, r0, #1
   298dc:	mov	r3, #0
   298e0:	beq	29904 <__assert_fail@plt+0x181a4>
   298e4:	add	r0, r3, r7
   298e8:	lsr	r6, r0, #1
   298ec:	ldr	r5, [r4, r6, lsl #2]
   298f0:	cmp	r5, r8
   298f4:	movge	r7, r6
   298f8:	addlt	r3, sl, r0, lsr #1
   298fc:	cmp	r3, r7
   29900:	bcc	298e4 <__assert_fail@plt+0x18184>
   29904:	ldr	r0, [r4, r3, lsl #2]
   29908:	ldr	r4, [sp, #20]
   2990c:	cmp	r0, r8
   29910:	bne	29944 <__assert_fail@plt+0x181e4>
   29914:	ldr	r0, [ip, #28]
   29918:	ldr	r1, [sp, #16]
   2991c:	add	r2, r0, r1, lsl #2
   29920:	ldr	r1, [sp, #4]
   29924:	add	r0, sp, #32
   29928:	bl	29514 <__assert_fail@plt+0x17db4>
   2992c:	cmp	r0, #0
   29930:	bne	29b58 <__assert_fail@plt+0x183f8>
   29934:	ldr	r0, [sp, #24]
   29938:	ldr	r1, [sp, #12]
   2993c:	ldr	ip, [sp, #8]
   29940:	ldr	lr, [r0]
   29944:	add	r9, r9, #1
   29948:	cmp	r9, lr
   2994c:	blt	29790 <__assert_fail@plt+0x18030>
   29950:	ldr	r2, [sp, #28]
   29954:	ldr	r0, [sp]
   29958:	cmp	lr, #0
   2995c:	ble	29a80 <__assert_fail@plt+0x18320>
   29960:	ldr	r1, [sp, #36]	; 0x24
   29964:	ldr	r9, [r0, #8]
   29968:	ldr	r0, [sp, #40]	; 0x28
   2996c:	subs	lr, r1, #1
   29970:	str	r9, [sp, #20]
   29974:	blt	29a98 <__assert_fail@plt+0x18338>
   29978:	mov	ip, #0
   2997c:	mov	r7, #1
   29980:	b	299a4 <__assert_fail@plt+0x18244>
   29984:	add	r2, r5, r1, lsl #2
   29988:	ldr	r2, [r2, #4]
   2998c:	str	r2, [r5, r1, lsl #2]
   29990:	add	r1, r1, #1
   29994:	ldr	r2, [r3, #4]
   29998:	cmp	r1, r2
   2999c:	blt	29984 <__assert_fail@plt+0x18224>
   299a0:	b	29a68 <__assert_fail@plt+0x18308>
   299a4:	ldr	r6, [r9, ip, lsl #2]
   299a8:	cmp	lr, #0
   299ac:	mov	r1, #0
   299b0:	beq	299dc <__assert_fail@plt+0x1827c>
   299b4:	mov	r1, #0
   299b8:	mov	r2, lr
   299bc:	add	r5, r1, r2
   299c0:	lsr	r4, r5, #1
   299c4:	ldr	r3, [r0, r4, lsl #2]
   299c8:	cmp	r3, r6
   299cc:	movge	r2, r4
   299d0:	addlt	r1, r7, r5, lsr #1
   299d4:	cmp	r1, r2
   299d8:	bcc	299bc <__assert_fail@plt+0x1825c>
   299dc:	ldr	r1, [r0, r1, lsl #2]
   299e0:	cmp	r1, r6
   299e4:	ldr	r1, [sp, #28]
   299e8:	beq	29a68 <__assert_fail@plt+0x18308>
   299ec:	ldr	sl, [r1, #4]
   299f0:	cmp	sl, #1
   299f4:	blt	29a68 <__assert_fail@plt+0x18308>
   299f8:	ldr	r5, [r1, #8]
   299fc:	subs	r4, sl, #1
   29a00:	beq	29a30 <__assert_fail@plt+0x182d0>
   29a04:	mov	r1, #0
   29a08:	mov	r8, r4
   29a0c:	add	r3, r1, r4
   29a10:	lsr	r2, r3, #1
   29a14:	ldr	r9, [r5, r2, lsl #2]
   29a18:	cmp	r9, r6
   29a1c:	movge	r4, r2
   29a20:	addlt	r1, r7, r3, lsr #1
   29a24:	cmp	r1, r4
   29a28:	bcc	29a0c <__assert_fail@plt+0x182ac>
   29a2c:	b	29a38 <__assert_fail@plt+0x182d8>
   29a30:	mov	r8, r4
   29a34:	mov	r1, #0
   29a38:	ldr	r2, [r5, r1, lsl #2]
   29a3c:	ldr	r3, [sp, #28]
   29a40:	ldr	r9, [sp, #20]
   29a44:	mov	r4, r1
   29a48:	cmp	r2, r6
   29a4c:	mvnne	r4, #0
   29a50:	cmp	r4, #0
   29a54:	blt	29a68 <__assert_fail@plt+0x18308>
   29a58:	cmp	sl, r4
   29a5c:	strgt	r8, [r3, #4]
   29a60:	cmpgt	r8, r4
   29a64:	bgt	29984 <__assert_fail@plt+0x18224>
   29a68:	ldr	r1, [sp, #24]
   29a6c:	add	ip, ip, #1
   29a70:	ldr	r1, [r1]
   29a74:	cmp	ip, r1
   29a78:	blt	299a4 <__assert_fail@plt+0x18244>
   29a7c:	b	29a84 <__assert_fail@plt+0x18324>
   29a80:	ldr	r0, [sp, #40]	; 0x28
   29a84:	bl	14538 <__assert_fail@plt+0x2dd8>
   29a88:	mov	r5, #0
   29a8c:	mov	r0, r5
   29a90:	sub	sp, fp, #28
   29a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a98:	ldr	r7, [r2, #4]
   29a9c:	mov	sl, #0
   29aa0:	mov	r9, #1
   29aa4:	cmp	r7, #1
   29aa8:	blt	29b40 <__assert_fail@plt+0x183e0>
   29aac:	ldr	r1, [sp, #20]
   29ab0:	ldr	r6, [r2, #8]
   29ab4:	subs	lr, r7, #1
   29ab8:	mov	r5, #0
   29abc:	ldr	r1, [r1, sl, lsl #2]
   29ac0:	beq	29ae8 <__assert_fail@plt+0x18388>
   29ac4:	mov	r4, lr
   29ac8:	add	r3, r5, r4
   29acc:	lsr	r2, r3, #1
   29ad0:	ldr	ip, [r6, r2, lsl #2]
   29ad4:	cmp	ip, r1
   29ad8:	movge	r4, r2
   29adc:	addlt	r5, r9, r3, lsr #1
   29ae0:	cmp	r5, r4
   29ae4:	bcc	29ac8 <__assert_fail@plt+0x18368>
   29ae8:	ldr	r2, [r6, r5, lsl #2]
   29aec:	cmp	r2, r1
   29af0:	mov	r1, r5
   29af4:	mvnne	r1, #0
   29af8:	cmp	r1, #0
   29afc:	blt	29b3c <__assert_fail@plt+0x183dc>
   29b00:	ldr	r2, [sp, #28]
   29b04:	cmp	r7, r1
   29b08:	ble	29b40 <__assert_fail@plt+0x183e0>
   29b0c:	cmp	lr, r1
   29b10:	mov	r7, lr
   29b14:	str	lr, [r2, #4]
   29b18:	ble	29b40 <__assert_fail@plt+0x183e0>
   29b1c:	add	r1, r6, r5, lsl #2
   29b20:	ldr	r1, [r1, #4]
   29b24:	str	r1, [r6, r5, lsl #2]
   29b28:	add	r5, r5, #1
   29b2c:	ldr	r7, [r2, #4]
   29b30:	cmp	r5, r7
   29b34:	blt	29b1c <__assert_fail@plt+0x183bc>
   29b38:	b	29b40 <__assert_fail@plt+0x183e0>
   29b3c:	ldr	r2, [sp, #28]
   29b40:	ldr	r1, [sp, #24]
   29b44:	add	sl, sl, #1
   29b48:	ldr	r1, [r1]
   29b4c:	cmp	sl, r1
   29b50:	blt	29aa4 <__assert_fail@plt+0x18344>
   29b54:	b	29a84 <__assert_fail@plt+0x18324>
   29b58:	mov	r5, r0
   29b5c:	ldr	r0, [sp, #40]	; 0x28
   29b60:	bl	14538 <__assert_fail@plt+0x2dd8>
   29b64:	mov	r0, r5
   29b68:	sub	sp, fp, #28
   29b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b74:	add	fp, sp, #28
   29b78:	sub	sp, sp, #44	; 0x2c
   29b7c:	ldr	r4, [r0, #84]	; 0x54
   29b80:	mov	r7, r0
   29b84:	str	r1, [fp, #-32]	; 0xffffffe0
   29b88:	add	r1, r3, r3, lsl #1
   29b8c:	mov	r6, r2
   29b90:	str	r3, [sp, #36]	; 0x24
   29b94:	ldr	r0, [r4, #24]
   29b98:	add	r0, r0, r1, lsl #2
   29b9c:	mov	r2, r0
   29ba0:	ldr	r1, [r2, #4]!
   29ba4:	cmp	r1, #1
   29ba8:	str	r2, [sp, #28]
   29bac:	blt	29e60 <__assert_fail@plt+0x18700>
   29bb0:	mov	r1, #1
   29bb4:	cmp	r6, #31
   29bb8:	add	r0, r0, #8
   29bbc:	mov	sl, #0
   29bc0:	mvn	r2, r1, lsl r6
   29bc4:	lsl	r1, r1, r6
   29bc8:	str	r0, [sp, #32]
   29bcc:	str	r2, [sp, #16]
   29bd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29bd4:	str	r1, [sp, #24]
   29bd8:	mov	r1, #0
   29bdc:	movwgt	r1, #1
   29be0:	and	r3, r2, #2
   29be4:	and	r0, r2, #1
   29be8:	orr	r1, r1, r3, lsr #1
   29bec:	str	r3, [sp, #20]
   29bf0:	str	r0, [sp, #8]
   29bf4:	str	r1, [sp, #12]
   29bf8:	b	29d18 <__assert_fail@plt+0x185b8>
   29bfc:	ldr	r2, [sp, #12]
   29c00:	cmp	r2, #0
   29c04:	beq	29c84 <__assert_fail@plt+0x18524>
   29c08:	add	r5, r0, r1, lsl #3
   29c0c:	ldr	r0, [r5]
   29c10:	cmp	r0, r8
   29c14:	bne	29c70 <__assert_fail@plt+0x18510>
   29c18:	ldr	r0, [r4, #20]
   29c1c:	add	r1, r8, r8, lsl #1
   29c20:	add	r0, r0, r1, lsl #2
   29c24:	ldr	r0, [r0, #8]
   29c28:	ldr	r3, [r0]
   29c2c:	ldr	r0, [sp, #36]	; 0x24
   29c30:	cmp	r3, r0
   29c34:	beq	29e70 <__assert_fail@plt+0x18710>
   29c38:	ldr	r0, [fp, #8]
   29c3c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29c40:	mov	r2, r6
   29c44:	str	r0, [sp]
   29c48:	mov	r0, r7
   29c4c:	bl	29b70 <__assert_fail@plt+0x18410>
   29c50:	cmp	r0, #0
   29c54:	beq	29c64 <__assert_fail@plt+0x18504>
   29c58:	cmn	r0, #1
   29c5c:	bne	29c70 <__assert_fail@plt+0x18510>
   29c60:	b	29e84 <__assert_fail@plt+0x18724>
   29c64:	ldr	r0, [sp, #20]
   29c68:	cmp	r0, #0
   29c6c:	bne	29e80 <__assert_fail@plt+0x18720>
   29c70:	ldrb	r0, [r5, #20]
   29c74:	add	r5, r5, #24
   29c78:	cmp	r0, #0
   29c7c:	bne	29c0c <__assert_fail@plt+0x184ac>
   29c80:	b	29e4c <__assert_fail@plt+0x186ec>
   29c84:	add	r0, r0, r1, lsl #3
   29c88:	add	r5, r0, #16
   29c8c:	ldr	r0, [r5, #-16]
   29c90:	cmp	r0, r8
   29c94:	bne	29ce0 <__assert_fail@plt+0x18580>
   29c98:	ldr	r0, [r4, #20]
   29c9c:	add	r1, r8, r8, lsl #1
   29ca0:	add	r0, r0, r1, lsl #2
   29ca4:	ldr	r0, [r0, #8]
   29ca8:	ldr	r3, [r0]
   29cac:	ldr	r0, [sp, #36]	; 0x24
   29cb0:	cmp	r3, r0
   29cb4:	beq	29e70 <__assert_fail@plt+0x18710>
   29cb8:	ldr	r0, [fp, #8]
   29cbc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29cc0:	mov	r2, r6
   29cc4:	str	r0, [sp]
   29cc8:	mov	r0, r7
   29ccc:	bl	29b70 <__assert_fail@plt+0x18410>
   29cd0:	cmp	r0, #0
   29cd4:	beq	29cf4 <__assert_fail@plt+0x18594>
   29cd8:	cmn	r0, #1
   29cdc:	beq	29e84 <__assert_fail@plt+0x18724>
   29ce0:	ldrb	r0, [r5, #4]
   29ce4:	add	r5, r5, #24
   29ce8:	cmp	r0, #0
   29cec:	bne	29c8c <__assert_fail@plt+0x1852c>
   29cf0:	b	29e4c <__assert_fail@plt+0x186ec>
   29cf4:	ldr	r0, [r5]
   29cf8:	ldr	r1, [sp, #16]
   29cfc:	and	r0, r0, r1
   29d00:	str	r0, [r5]
   29d04:	ldrb	r0, [r5, #4]
   29d08:	add	r5, r5, #24
   29d0c:	cmp	r0, #0
   29d10:	bne	29c8c <__assert_fail@plt+0x1852c>
   29d14:	b	29e4c <__assert_fail@plt+0x186ec>
   29d18:	ldr	r0, [sp, #32]
   29d1c:	ldr	r0, [r0]
   29d20:	ldr	r8, [r0, sl, lsl #2]
   29d24:	ldr	r0, [r4]
   29d28:	add	r1, r0, r8, lsl #3
   29d2c:	ldrb	r1, [r1, #4]
   29d30:	cmp	r1, #9
   29d34:	beq	29e18 <__assert_fail@plt+0x186b8>
   29d38:	cmp	r1, #8
   29d3c:	beq	29e34 <__assert_fail@plt+0x186d4>
   29d40:	cmp	r1, #4
   29d44:	bne	29e4c <__assert_fail@plt+0x186ec>
   29d48:	ldr	r0, [fp, #8]
   29d4c:	cmn	r0, #1
   29d50:	beq	29e4c <__assert_fail@plt+0x186ec>
   29d54:	ldr	r1, [fp, #8]
   29d58:	ldr	r0, [r7, #116]	; 0x74
   29d5c:	cmp	r6, #31
   29d60:	add	r1, r1, r1, lsl #1
   29d64:	bgt	29bfc <__assert_fail@plt+0x1849c>
   29d68:	add	r0, r0, r1, lsl #3
   29d6c:	add	r9, r0, #16
   29d70:	ldr	r0, [r9, #-16]
   29d74:	cmp	r0, r8
   29d78:	bne	29e04 <__assert_fail@plt+0x186a4>
   29d7c:	ldr	r0, [r9]
   29d80:	ldr	r1, [sp, #24]
   29d84:	tst	r0, r1
   29d88:	beq	29e04 <__assert_fail@plt+0x186a4>
   29d8c:	ldr	r0, [r4, #20]
   29d90:	add	r1, r8, r8, lsl #1
   29d94:	add	r0, r0, r1, lsl #2
   29d98:	ldr	r0, [r0, #8]
   29d9c:	ldr	r3, [r0]
   29da0:	ldr	r0, [sp, #36]	; 0x24
   29da4:	cmp	r3, r0
   29da8:	beq	29e70 <__assert_fail@plt+0x18710>
   29dac:	ldr	r0, [fp, #8]
   29db0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29db4:	mov	r2, r6
   29db8:	str	r0, [sp]
   29dbc:	mov	r0, r7
   29dc0:	bl	29b70 <__assert_fail@plt+0x18410>
   29dc4:	cmp	r0, #0
   29dc8:	beq	29dd8 <__assert_fail@plt+0x18678>
   29dcc:	cmn	r0, #1
   29dd0:	bne	29df4 <__assert_fail@plt+0x18694>
   29dd4:	b	29e84 <__assert_fail@plt+0x18724>
   29dd8:	ldr	r0, [sp, #12]
   29ddc:	cmp	r0, #0
   29de0:	beq	29df4 <__assert_fail@plt+0x18694>
   29de4:	ldr	r0, [sp, #20]
   29de8:	cmp	r0, #0
   29dec:	beq	29e04 <__assert_fail@plt+0x186a4>
   29df0:	b	29e80 <__assert_fail@plt+0x18720>
   29df4:	ldr	r0, [r9]
   29df8:	ldr	r1, [sp, #16]
   29dfc:	and	r0, r0, r1
   29e00:	str	r0, [r9]
   29e04:	ldrb	r0, [r9, #4]
   29e08:	add	r9, r9, #24
   29e0c:	cmp	r0, #0
   29e10:	bne	29d70 <__assert_fail@plt+0x18610>
   29e14:	b	29e4c <__assert_fail@plt+0x186ec>
   29e18:	ldr	r1, [sp, #20]
   29e1c:	cmp	r1, #0
   29e20:	beq	29e4c <__assert_fail@plt+0x186ec>
   29e24:	ldr	r0, [r0, r8, lsl #3]
   29e28:	cmp	r0, r6
   29e2c:	bne	29e4c <__assert_fail@plt+0x186ec>
   29e30:	b	29e80 <__assert_fail@plt+0x18720>
   29e34:	ldr	r1, [sp, #8]
   29e38:	cmp	r1, #0
   29e3c:	beq	29e4c <__assert_fail@plt+0x186ec>
   29e40:	ldr	r0, [r0, r8, lsl #3]
   29e44:	cmp	r0, r6
   29e48:	beq	29e8c <__assert_fail@plt+0x1872c>
   29e4c:	ldr	r0, [sp, #28]
   29e50:	add	sl, sl, #1
   29e54:	ldr	r0, [r0]
   29e58:	cmp	sl, r0
   29e5c:	blt	29d18 <__assert_fail@plt+0x185b8>
   29e60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29e64:	ubfx	r0, r0, #1, #1
   29e68:	sub	sp, fp, #28
   29e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e70:	ldr	r0, [sp, #8]
   29e74:	rsb	r0, r0, #0
   29e78:	sub	sp, fp, #28
   29e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e80:	mov	r0, #0
   29e84:	sub	sp, fp, #28
   29e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e8c:	mvn	r0, #0
   29e90:	sub	sp, fp, #28
   29e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29e9c:	add	fp, sp, #24
   29ea0:	movw	r8, #0
   29ea4:	mov	r6, r2
   29ea8:	mov	r4, r1
   29eac:	mov	r5, r0
   29eb0:	movt	r8, #32752	; 0x7ff0
   29eb4:	mov	r0, r5
   29eb8:	mov	r1, r4
   29ebc:	mov	r2, r6
   29ec0:	bl	11424 <read@plt>
   29ec4:	mov	r7, r0
   29ec8:	cmn	r0, #1
   29ecc:	bgt	29ef4 <__assert_fail@plt+0x18794>
   29ed0:	bl	11640 <__errno_location@plt>
   29ed4:	ldr	r0, [r0]
   29ed8:	cmp	r0, #4
   29edc:	beq	29eb4 <__assert_fail@plt+0x18754>
   29ee0:	cmp	r6, r8
   29ee4:	bls	29ef4 <__assert_fail@plt+0x18794>
   29ee8:	cmp	r0, #22
   29eec:	mov	r6, r8
   29ef0:	beq	29eb4 <__assert_fail@plt+0x18754>
   29ef4:	mov	r0, r7
   29ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29efc:	mov	r1, #0
   29f00:	mov	r2, #3
   29f04:	b	2d468 <__assert_fail@plt+0x1bd08>
   29f08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29f0c:	add	fp, sp, #24
   29f10:	sub	sp, sp, #32
   29f14:	ldr	r6, [fp, #12]
   29f18:	ldr	r7, [fp, #8]
   29f1c:	mov	r4, r2
   29f20:	mov	r8, r0
   29f24:	cmp	r1, #0
   29f28:	beq	29f50 <__assert_fail@plt+0x187f0>
   29f2c:	movw	r2, #59905	; 0xea01
   29f30:	mov	r5, r1
   29f34:	str	r3, [sp, #4]
   29f38:	str	r4, [sp]
   29f3c:	mov	r0, r8
   29f40:	mov	r1, #1
   29f44:	movt	r2, #2
   29f48:	mov	r3, r5
   29f4c:	b	29f68 <__assert_fail@plt+0x18808>
   29f50:	movw	r2, #59917	; 0xea0d
   29f54:	str	r3, [sp]
   29f58:	mov	r0, r8
   29f5c:	mov	r1, #1
   29f60:	mov	r3, r4
   29f64:	movt	r2, #2
   29f68:	bl	116a0 <__fprintf_chk@plt>
   29f6c:	movw	r1, #59924	; 0xea14
   29f70:	mov	r0, #0
   29f74:	mov	r2, #5
   29f78:	movt	r1, #2
   29f7c:	bl	114e4 <dcgettext@plt>
   29f80:	movw	r2, #60642	; 0xece2
   29f84:	mov	r3, r0
   29f88:	movw	r0, #2022	; 0x7e6
   29f8c:	mov	r1, #1
   29f90:	str	r0, [sp]
   29f94:	movt	r2, #2
   29f98:	mov	r0, r8
   29f9c:	bl	116a0 <__fprintf_chk@plt>
   29fa0:	movw	r4, #57458	; 0xe072
   29fa4:	mov	r1, r8
   29fa8:	movt	r4, #2
   29fac:	mov	r0, r4
   29fb0:	bl	113dc <fputs_unlocked@plt>
   29fb4:	movw	r1, #59928	; 0xea18
   29fb8:	mov	r0, #0
   29fbc:	mov	r2, #5
   29fc0:	movt	r1, #2
   29fc4:	bl	114e4 <dcgettext@plt>
   29fc8:	movw	r3, #60099	; 0xeac3
   29fcc:	mov	r2, r0
   29fd0:	mov	r0, r8
   29fd4:	mov	r1, #1
   29fd8:	movt	r3, #2
   29fdc:	bl	116a0 <__fprintf_chk@plt>
   29fe0:	mov	r0, r4
   29fe4:	mov	r1, r8
   29fe8:	bl	113dc <fputs_unlocked@plt>
   29fec:	cmp	r6, #9
   29ff0:	bhi	2a02c <__assert_fail@plt+0x188cc>
   29ff4:	add	r0, pc, #0
   29ff8:	ldr	pc, [r0, r6, lsl #2]
   29ffc:	andeq	sl, r2, r4, lsr #32
   2a000:	andeq	sl, r2, r8, lsr r0
   2a004:	andeq	sl, r2, r8, rrx
   2a008:	muleq	r2, r0, r0
   2a00c:	strheq	sl, [r2], -r8
   2a010:	andeq	sl, r2, r0, ror #1
   2a014:	andeq	sl, r2, r8, lsl #2
   2a018:	andeq	sl, r2, r0, asr #2
   2a01c:	andeq	sl, r2, r8, ror #3
   2a020:	muleq	r2, r0, r1
   2a024:	sub	sp, fp, #24
   2a028:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a02c:	movw	r1, #60452	; 0xec24
   2a030:	movt	r1, #2
   2a034:	b	2a198 <__assert_fail@plt+0x18a38>
   2a038:	movw	r1, #60133	; 0xeae5
   2a03c:	mov	r0, #0
   2a040:	mov	r2, #5
   2a044:	movt	r1, #2
   2a048:	bl	114e4 <dcgettext@plt>
   2a04c:	ldr	r3, [r7]
   2a050:	mov	r2, r0
   2a054:	mov	r0, r8
   2a058:	mov	r1, #1
   2a05c:	sub	sp, fp, #24
   2a060:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a064:	b	116a0 <__fprintf_chk@plt>
   2a068:	movw	r1, #60149	; 0xeaf5
   2a06c:	mov	r0, #0
   2a070:	mov	r2, #5
   2a074:	movt	r1, #2
   2a078:	bl	114e4 <dcgettext@plt>
   2a07c:	mov	r2, r0
   2a080:	ldr	r3, [r7]
   2a084:	ldr	r0, [r7, #4]
   2a088:	str	r0, [sp]
   2a08c:	b	2a17c <__assert_fail@plt+0x18a1c>
   2a090:	movw	r1, #60172	; 0xeb0c
   2a094:	mov	r0, #0
   2a098:	mov	r2, #5
   2a09c:	movt	r1, #2
   2a0a0:	bl	114e4 <dcgettext@plt>
   2a0a4:	ldr	r3, [r7]
   2a0a8:	mov	r2, r0
   2a0ac:	ldmib	r7, {r0, r1}
   2a0b0:	stm	sp, {r0, r1}
   2a0b4:	b	2a17c <__assert_fail@plt+0x18a1c>
   2a0b8:	movw	r1, #60200	; 0xeb28
   2a0bc:	mov	r0, #0
   2a0c0:	mov	r2, #5
   2a0c4:	movt	r1, #2
   2a0c8:	bl	114e4 <dcgettext@plt>
   2a0cc:	ldr	r3, [r7]
   2a0d0:	mov	r2, r0
   2a0d4:	ldmib	r7, {r0, r1, r7}
   2a0d8:	stm	sp, {r0, r1, r7}
   2a0dc:	b	2a17c <__assert_fail@plt+0x18a1c>
   2a0e0:	movw	r1, #60232	; 0xeb48
   2a0e4:	mov	r0, #0
   2a0e8:	mov	r2, #5
   2a0ec:	movt	r1, #2
   2a0f0:	bl	114e4 <dcgettext@plt>
   2a0f4:	ldr	r3, [r7]
   2a0f8:	mov	r2, r0
   2a0fc:	ldmib	r7, {r0, r1, r6, r7}
   2a100:	stm	sp, {r0, r1, r6, r7}
   2a104:	b	2a17c <__assert_fail@plt+0x18a1c>
   2a108:	movw	r1, #60268	; 0xeb6c
   2a10c:	mov	r0, #0
   2a110:	mov	r2, #5
   2a114:	movt	r1, #2
   2a118:	bl	114e4 <dcgettext@plt>
   2a11c:	ldr	r3, [r7]
   2a120:	mov	r2, r0
   2a124:	ldmib	r7, {r0, r1, r6}
   2a128:	ldr	r5, [r7, #16]
   2a12c:	ldr	r7, [r7, #20]
   2a130:	stm	sp, {r0, r1, r6}
   2a134:	str	r5, [sp, #12]
   2a138:	str	r7, [sp, #16]
   2a13c:	b	2a17c <__assert_fail@plt+0x18a1c>
   2a140:	movw	r1, #60308	; 0xeb94
   2a144:	mov	r0, #0
   2a148:	mov	r2, #5
   2a14c:	movt	r1, #2
   2a150:	bl	114e4 <dcgettext@plt>
   2a154:	ldr	r3, [r7]
   2a158:	mov	r2, r0
   2a15c:	ldmib	r7, {r0, r1, r6}
   2a160:	ldr	r5, [r7, #16]
   2a164:	ldr	r4, [r7, #20]
   2a168:	ldr	r7, [r7, #24]
   2a16c:	stm	sp, {r0, r1, r6}
   2a170:	str	r5, [sp, #12]
   2a174:	str	r4, [sp, #16]
   2a178:	str	r7, [sp, #20]
   2a17c:	mov	r0, r8
   2a180:	mov	r1, #1
   2a184:	bl	116a0 <__fprintf_chk@plt>
   2a188:	sub	sp, fp, #24
   2a18c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a190:	movw	r1, #60400	; 0xebf0
   2a194:	movt	r1, #2
   2a198:	mov	r0, #0
   2a19c:	mov	r2, #5
   2a1a0:	bl	114e4 <dcgettext@plt>
   2a1a4:	mov	ip, r0
   2a1a8:	ldr	r3, [r7]
   2a1ac:	ldr	r0, [r7, #4]
   2a1b0:	ldr	r1, [r7, #8]
   2a1b4:	ldr	r6, [r7, #12]
   2a1b8:	ldr	r5, [r7, #16]
   2a1bc:	ldr	r4, [r7, #20]
   2a1c0:	ldr	r2, [r7, #24]
   2a1c4:	ldr	lr, [r7, #28]
   2a1c8:	ldr	r7, [r7, #32]
   2a1cc:	stm	sp, {r0, r1, r6}
   2a1d0:	str	r5, [sp, #12]
   2a1d4:	str	r4, [sp, #16]
   2a1d8:	str	r2, [sp, #20]
   2a1dc:	str	lr, [sp, #24]
   2a1e0:	str	r7, [sp, #28]
   2a1e4:	b	2a22c <__assert_fail@plt+0x18acc>
   2a1e8:	movw	r1, #60352	; 0xebc0
   2a1ec:	mov	r0, #0
   2a1f0:	mov	r2, #5
   2a1f4:	movt	r1, #2
   2a1f8:	bl	114e4 <dcgettext@plt>
   2a1fc:	mov	ip, r0
   2a200:	ldr	r3, [r7]
   2a204:	ldmib	r7, {r0, r1, r6}
   2a208:	ldr	r5, [r7, #16]
   2a20c:	ldr	r4, [r7, #20]
   2a210:	ldr	r2, [r7, #24]
   2a214:	ldr	r7, [r7, #28]
   2a218:	stm	sp, {r0, r1, r6}
   2a21c:	str	r5, [sp, #12]
   2a220:	str	r4, [sp, #16]
   2a224:	str	r2, [sp, #20]
   2a228:	str	r7, [sp, #24]
   2a22c:	mov	r0, r8
   2a230:	mov	r1, #1
   2a234:	mov	r2, ip
   2a238:	bl	116a0 <__fprintf_chk@plt>
   2a23c:	sub	sp, fp, #24
   2a240:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a244:	push	{r4, sl, fp, lr}
   2a248:	add	fp, sp, #8
   2a24c:	sub	sp, sp, #8
   2a250:	ldr	ip, [fp, #8]
   2a254:	mov	lr, #0
   2a258:	ldr	r4, [ip, lr, lsl #2]
   2a25c:	add	lr, lr, #1
   2a260:	cmp	r4, #0
   2a264:	bne	2a258 <__assert_fail@plt+0x18af8>
   2a268:	sub	r4, lr, #1
   2a26c:	str	ip, [sp]
   2a270:	str	r4, [sp, #4]
   2a274:	bl	29f08 <__assert_fail@plt+0x187a8>
   2a278:	sub	sp, fp, #8
   2a27c:	pop	{r4, sl, fp, pc}
   2a280:	push	{fp, lr}
   2a284:	mov	fp, sp
   2a288:	sub	sp, sp, #48	; 0x30
   2a28c:	ldr	ip, [fp, #8]
   2a290:	ldr	lr, [ip]
   2a294:	cmp	lr, #0
   2a298:	str	lr, [sp, #8]
   2a29c:	beq	2a338 <__assert_fail@plt+0x18bd8>
   2a2a0:	ldr	lr, [ip, #4]
   2a2a4:	cmp	lr, #0
   2a2a8:	str	lr, [sp, #12]
   2a2ac:	beq	2a340 <__assert_fail@plt+0x18be0>
   2a2b0:	ldr	lr, [ip, #8]
   2a2b4:	cmp	lr, #0
   2a2b8:	str	lr, [sp, #16]
   2a2bc:	beq	2a348 <__assert_fail@plt+0x18be8>
   2a2c0:	ldr	lr, [ip, #12]
   2a2c4:	cmp	lr, #0
   2a2c8:	str	lr, [sp, #20]
   2a2cc:	beq	2a350 <__assert_fail@plt+0x18bf0>
   2a2d0:	ldr	lr, [ip, #16]
   2a2d4:	cmp	lr, #0
   2a2d8:	str	lr, [sp, #24]
   2a2dc:	beq	2a358 <__assert_fail@plt+0x18bf8>
   2a2e0:	ldr	lr, [ip, #20]
   2a2e4:	cmp	lr, #0
   2a2e8:	str	lr, [sp, #28]
   2a2ec:	beq	2a360 <__assert_fail@plt+0x18c00>
   2a2f0:	ldr	lr, [ip, #24]
   2a2f4:	cmp	lr, #0
   2a2f8:	str	lr, [sp, #32]
   2a2fc:	beq	2a368 <__assert_fail@plt+0x18c08>
   2a300:	ldr	lr, [ip, #28]
   2a304:	cmp	lr, #0
   2a308:	str	lr, [sp, #36]	; 0x24
   2a30c:	beq	2a370 <__assert_fail@plt+0x18c10>
   2a310:	ldr	lr, [ip, #32]
   2a314:	cmp	lr, #0
   2a318:	str	lr, [sp, #40]	; 0x28
   2a31c:	beq	2a378 <__assert_fail@plt+0x18c18>
   2a320:	ldr	lr, [ip, #36]	; 0x24
   2a324:	mov	ip, #10
   2a328:	cmp	lr, #0
   2a32c:	str	lr, [sp, #44]	; 0x2c
   2a330:	movweq	ip, #9
   2a334:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a338:	mov	ip, #0
   2a33c:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a340:	mov	ip, #1
   2a344:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a348:	mov	ip, #2
   2a34c:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a350:	mov	ip, #3
   2a354:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a358:	mov	ip, #4
   2a35c:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a360:	mov	ip, #5
   2a364:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a368:	mov	ip, #6
   2a36c:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a370:	mov	ip, #7
   2a374:	b	2a37c <__assert_fail@plt+0x18c1c>
   2a378:	mov	ip, #8
   2a37c:	add	lr, sp, #8
   2a380:	str	ip, [sp, #4]
   2a384:	str	lr, [sp]
   2a388:	bl	29f08 <__assert_fail@plt+0x187a8>
   2a38c:	mov	sp, fp
   2a390:	pop	{fp, pc}
   2a394:	push	{fp, lr}
   2a398:	mov	fp, sp
   2a39c:	sub	sp, sp, #56	; 0x38
   2a3a0:	add	ip, fp, #8
   2a3a4:	str	ip, [sp, #12]
   2a3a8:	ldr	lr, [fp, #8]
   2a3ac:	cmp	lr, #0
   2a3b0:	str	lr, [sp, #16]
   2a3b4:	beq	2a450 <__assert_fail@plt+0x18cf0>
   2a3b8:	ldr	lr, [ip, #4]
   2a3bc:	cmp	lr, #0
   2a3c0:	str	lr, [sp, #20]
   2a3c4:	beq	2a458 <__assert_fail@plt+0x18cf8>
   2a3c8:	ldr	lr, [ip, #8]
   2a3cc:	cmp	lr, #0
   2a3d0:	str	lr, [sp, #24]
   2a3d4:	beq	2a460 <__assert_fail@plt+0x18d00>
   2a3d8:	ldr	lr, [ip, #12]
   2a3dc:	cmp	lr, #0
   2a3e0:	str	lr, [sp, #28]
   2a3e4:	beq	2a468 <__assert_fail@plt+0x18d08>
   2a3e8:	ldr	lr, [ip, #16]
   2a3ec:	cmp	lr, #0
   2a3f0:	str	lr, [sp, #32]
   2a3f4:	beq	2a470 <__assert_fail@plt+0x18d10>
   2a3f8:	ldr	lr, [ip, #20]
   2a3fc:	cmp	lr, #0
   2a400:	str	lr, [sp, #36]	; 0x24
   2a404:	beq	2a478 <__assert_fail@plt+0x18d18>
   2a408:	ldr	lr, [ip, #24]
   2a40c:	cmp	lr, #0
   2a410:	str	lr, [sp, #40]	; 0x28
   2a414:	beq	2a480 <__assert_fail@plt+0x18d20>
   2a418:	ldr	lr, [ip, #28]
   2a41c:	cmp	lr, #0
   2a420:	str	lr, [sp, #44]	; 0x2c
   2a424:	beq	2a488 <__assert_fail@plt+0x18d28>
   2a428:	ldr	lr, [ip, #32]
   2a42c:	cmp	lr, #0
   2a430:	str	lr, [sp, #48]	; 0x30
   2a434:	beq	2a490 <__assert_fail@plt+0x18d30>
   2a438:	ldr	lr, [ip, #36]	; 0x24
   2a43c:	mov	ip, #10
   2a440:	cmp	lr, #0
   2a444:	str	lr, [sp, #52]	; 0x34
   2a448:	movweq	ip, #9
   2a44c:	b	2a494 <__assert_fail@plt+0x18d34>
   2a450:	mov	ip, #0
   2a454:	b	2a494 <__assert_fail@plt+0x18d34>
   2a458:	mov	ip, #1
   2a45c:	b	2a494 <__assert_fail@plt+0x18d34>
   2a460:	mov	ip, #2
   2a464:	b	2a494 <__assert_fail@plt+0x18d34>
   2a468:	mov	ip, #3
   2a46c:	b	2a494 <__assert_fail@plt+0x18d34>
   2a470:	mov	ip, #4
   2a474:	b	2a494 <__assert_fail@plt+0x18d34>
   2a478:	mov	ip, #5
   2a47c:	b	2a494 <__assert_fail@plt+0x18d34>
   2a480:	mov	ip, #6
   2a484:	b	2a494 <__assert_fail@plt+0x18d34>
   2a488:	mov	ip, #7
   2a48c:	b	2a494 <__assert_fail@plt+0x18d34>
   2a490:	mov	ip, #8
   2a494:	add	lr, sp, #16
   2a498:	str	ip, [sp, #4]
   2a49c:	str	lr, [sp]
   2a4a0:	bl	29f08 <__assert_fail@plt+0x187a8>
   2a4a4:	mov	sp, fp
   2a4a8:	pop	{fp, pc}
   2a4ac:	push	{fp, lr}
   2a4b0:	mov	fp, sp
   2a4b4:	movw	r0, #61884	; 0xf1bc
   2a4b8:	movt	r0, #3
   2a4bc:	ldr	r1, [r0]
   2a4c0:	movw	r0, #57458	; 0xe072
   2a4c4:	movt	r0, #2
   2a4c8:	bl	113dc <fputs_unlocked@plt>
   2a4cc:	movw	r1, #60512	; 0xec60
   2a4d0:	mov	r0, #0
   2a4d4:	mov	r2, #5
   2a4d8:	movt	r1, #2
   2a4dc:	bl	114e4 <dcgettext@plt>
   2a4e0:	movw	r2, #60532	; 0xec74
   2a4e4:	mov	r1, r0
   2a4e8:	mov	r0, #1
   2a4ec:	movt	r2, #2
   2a4f0:	bl	11688 <__printf_chk@plt>
   2a4f4:	movw	r1, #60554	; 0xec8a
   2a4f8:	mov	r0, #0
   2a4fc:	mov	r2, #5
   2a500:	movt	r1, #2
   2a504:	bl	114e4 <dcgettext@plt>
   2a508:	movw	r2, #56129	; 0xdb41
   2a50c:	movw	r3, #58623	; 0xe4ff
   2a510:	mov	r1, r0
   2a514:	mov	r0, #1
   2a518:	movt	r2, #2
   2a51c:	movt	r3, #2
   2a520:	bl	11688 <__printf_chk@plt>
   2a524:	movw	r1, #60574	; 0xec9e
   2a528:	mov	r0, #0
   2a52c:	mov	r2, #5
   2a530:	movt	r1, #2
   2a534:	bl	114e4 <dcgettext@plt>
   2a538:	movw	r2, #60613	; 0xecc5
   2a53c:	mov	r1, r0
   2a540:	mov	r0, #1
   2a544:	movt	r2, #2
   2a548:	pop	{fp, lr}
   2a54c:	b	11688 <__printf_chk@plt>
   2a550:	push	{r4, r5, r6, sl, fp, lr}
   2a554:	add	fp, sp, #16
   2a558:	mov	r4, r2
   2a55c:	mov	r5, r1
   2a560:	mov	r6, r0
   2a564:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a568:	cmp	r0, #0
   2a56c:	popne	{r4, r5, r6, sl, fp, pc}
   2a570:	cmp	r6, #0
   2a574:	beq	2a588 <__assert_fail@plt+0x18e28>
   2a578:	cmp	r5, #0
   2a57c:	cmpne	r4, #0
   2a580:	bne	2a588 <__assert_fail@plt+0x18e28>
   2a584:	pop	{r4, r5, r6, sl, fp, pc}
   2a588:	bl	11860 <__assert_fail@plt+0x100>
   2a58c:	push	{r4, r5, r6, sl, fp, lr}
   2a590:	add	fp, sp, #16
   2a594:	mov	r4, r2
   2a598:	mov	r5, r1
   2a59c:	mov	r6, r0
   2a5a0:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a5a4:	cmp	r0, #0
   2a5a8:	popne	{r4, r5, r6, sl, fp, pc}
   2a5ac:	cmp	r6, #0
   2a5b0:	beq	2a5c4 <__assert_fail@plt+0x18e64>
   2a5b4:	cmp	r5, #0
   2a5b8:	cmpne	r4, #0
   2a5bc:	bne	2a5c4 <__assert_fail@plt+0x18e64>
   2a5c0:	pop	{r4, r5, r6, sl, fp, pc}
   2a5c4:	bl	11860 <__assert_fail@plt+0x100>
   2a5c8:	push	{fp, lr}
   2a5cc:	mov	fp, sp
   2a5d0:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2a5d4:	cmp	r0, #0
   2a5d8:	popne	{fp, pc}
   2a5dc:	bl	11860 <__assert_fail@plt+0x100>
   2a5e0:	push	{fp, lr}
   2a5e4:	mov	fp, sp
   2a5e8:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2a5ec:	cmp	r0, #0
   2a5f0:	popne	{fp, pc}
   2a5f4:	bl	11860 <__assert_fail@plt+0x100>
   2a5f8:	push	{fp, lr}
   2a5fc:	mov	fp, sp
   2a600:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2a604:	cmp	r0, #0
   2a608:	popne	{fp, pc}
   2a60c:	bl	11860 <__assert_fail@plt+0x100>
   2a610:	push	{r4, r5, fp, lr}
   2a614:	add	fp, sp, #8
   2a618:	mov	r4, r1
   2a61c:	mov	r5, r0
   2a620:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   2a624:	cmp	r0, #0
   2a628:	popne	{r4, r5, fp, pc}
   2a62c:	cmp	r5, #0
   2a630:	beq	2a640 <__assert_fail@plt+0x18ee0>
   2a634:	cmp	r4, #0
   2a638:	bne	2a640 <__assert_fail@plt+0x18ee0>
   2a63c:	pop	{r4, r5, fp, pc}
   2a640:	bl	11860 <__assert_fail@plt+0x100>
   2a644:	push	{fp, lr}
   2a648:	mov	fp, sp
   2a64c:	cmp	r1, #0
   2a650:	orreq	r1, r1, #1
   2a654:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   2a658:	cmp	r0, #0
   2a65c:	popne	{fp, pc}
   2a660:	bl	11860 <__assert_fail@plt+0x100>
   2a664:	push	{fp, lr}
   2a668:	mov	fp, sp
   2a66c:	clz	r3, r2
   2a670:	lsr	ip, r3, #5
   2a674:	clz	r3, r1
   2a678:	lsr	r3, r3, #5
   2a67c:	orrs	r3, r3, ip
   2a680:	movwne	r1, #1
   2a684:	movwne	r2, #1
   2a688:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a68c:	cmp	r0, #0
   2a690:	popne	{fp, pc}
   2a694:	bl	11860 <__assert_fail@plt+0x100>
   2a698:	push	{fp, lr}
   2a69c:	mov	fp, sp
   2a6a0:	mov	r2, r1
   2a6a4:	mov	r1, r0
   2a6a8:	mov	r0, #0
   2a6ac:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a6b0:	cmp	r0, #0
   2a6b4:	popne	{fp, pc}
   2a6b8:	bl	11860 <__assert_fail@plt+0x100>
   2a6bc:	push	{fp, lr}
   2a6c0:	mov	fp, sp
   2a6c4:	mov	r2, r1
   2a6c8:	mov	r1, r0
   2a6cc:	clz	r0, r2
   2a6d0:	clz	r3, r1
   2a6d4:	lsr	r0, r0, #5
   2a6d8:	lsr	r3, r3, #5
   2a6dc:	orrs	r0, r3, r0
   2a6e0:	movwne	r1, #1
   2a6e4:	movwne	r2, #1
   2a6e8:	mov	r0, #0
   2a6ec:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a6f0:	cmp	r0, #0
   2a6f4:	popne	{fp, pc}
   2a6f8:	bl	11860 <__assert_fail@plt+0x100>
   2a6fc:	push	{r4, r5, r6, sl, fp, lr}
   2a700:	add	fp, sp, #16
   2a704:	ldr	r5, [r1]
   2a708:	mov	r4, r1
   2a70c:	mov	r6, r0
   2a710:	cmp	r0, #0
   2a714:	beq	2a72c <__assert_fail@plt+0x18fcc>
   2a718:	mov	r0, #1
   2a71c:	add	r0, r0, r5, lsr #1
   2a720:	adds	r5, r5, r0
   2a724:	bcc	2a734 <__assert_fail@plt+0x18fd4>
   2a728:	b	2a770 <__assert_fail@plt+0x19010>
   2a72c:	cmp	r5, #0
   2a730:	movweq	r5, #64	; 0x40
   2a734:	mov	r0, r6
   2a738:	mov	r1, r5
   2a73c:	mov	r2, #1
   2a740:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a744:	cmp	r5, #0
   2a748:	mov	r1, r5
   2a74c:	movwne	r1, #1
   2a750:	cmp	r0, #0
   2a754:	bne	2a768 <__assert_fail@plt+0x19008>
   2a758:	clz	r2, r6
   2a75c:	lsr	r2, r2, #5
   2a760:	orrs	r1, r2, r1
   2a764:	bne	2a770 <__assert_fail@plt+0x19010>
   2a768:	str	r5, [r4]
   2a76c:	pop	{r4, r5, r6, sl, fp, pc}
   2a770:	bl	11860 <__assert_fail@plt+0x100>
   2a774:	push	{r4, r5, r6, r7, fp, lr}
   2a778:	add	fp, sp, #16
   2a77c:	ldr	r5, [r1]
   2a780:	mov	r6, r2
   2a784:	mov	r4, r1
   2a788:	mov	r7, r0
   2a78c:	cmp	r0, #0
   2a790:	beq	2a7a8 <__assert_fail@plt+0x19048>
   2a794:	mov	r0, #1
   2a798:	add	r0, r0, r5, lsr #1
   2a79c:	adds	r5, r5, r0
   2a7a0:	bcc	2a7c0 <__assert_fail@plt+0x19060>
   2a7a4:	b	2a7f4 <__assert_fail@plt+0x19094>
   2a7a8:	cmp	r5, #0
   2a7ac:	bne	2a7c0 <__assert_fail@plt+0x19060>
   2a7b0:	mov	r0, #64	; 0x40
   2a7b4:	cmp	r6, #64	; 0x40
   2a7b8:	udiv	r5, r0, r6
   2a7bc:	addhi	r5, r5, #1
   2a7c0:	mov	r0, r7
   2a7c4:	mov	r1, r5
   2a7c8:	mov	r2, r6
   2a7cc:	bl	2d6e0 <__assert_fail@plt+0x1bf80>
   2a7d0:	cmp	r0, #0
   2a7d4:	bne	2a7ec <__assert_fail@plt+0x1908c>
   2a7d8:	cmp	r7, #0
   2a7dc:	beq	2a7f4 <__assert_fail@plt+0x19094>
   2a7e0:	cmp	r6, #0
   2a7e4:	cmpne	r5, #0
   2a7e8:	bne	2a7f4 <__assert_fail@plt+0x19094>
   2a7ec:	str	r5, [r4]
   2a7f0:	pop	{r4, r5, r6, r7, fp, pc}
   2a7f4:	bl	11860 <__assert_fail@plt+0x100>
   2a7f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a7fc:	add	fp, sp, #24
   2a800:	mov	r8, r1
   2a804:	ldr	r1, [r1]
   2a808:	mov	r5, r0
   2a80c:	add	r0, r1, r1, asr #1
   2a810:	cmp	r0, r1
   2a814:	mvnvs	r0, #-2147483648	; 0x80000000
   2a818:	cmp	r0, r3
   2a81c:	mov	r7, r0
   2a820:	movgt	r7, r3
   2a824:	cmn	r3, #1
   2a828:	movle	r7, r0
   2a82c:	ldr	r0, [fp, #8]
   2a830:	cmn	r0, #1
   2a834:	ble	2a85c <__assert_fail@plt+0x190fc>
   2a838:	cmp	r0, #0
   2a83c:	beq	2a8b0 <__assert_fail@plt+0x19150>
   2a840:	cmn	r7, #1
   2a844:	ble	2a884 <__assert_fail@plt+0x19124>
   2a848:	mvn	r4, #-2147483648	; 0x80000000
   2a84c:	udiv	r6, r4, r0
   2a850:	cmp	r6, r7
   2a854:	bge	2a8b0 <__assert_fail@plt+0x19150>
   2a858:	b	2a8c0 <__assert_fail@plt+0x19160>
   2a85c:	cmn	r7, #1
   2a860:	ble	2a8a0 <__assert_fail@plt+0x19140>
   2a864:	cmn	r0, #1
   2a868:	beq	2a8b0 <__assert_fail@plt+0x19150>
   2a86c:	mov	r6, #-2147483648	; 0x80000000
   2a870:	mvn	r4, #-2147483648	; 0x80000000
   2a874:	sdiv	r6, r6, r0
   2a878:	cmp	r6, r7
   2a87c:	bge	2a8b0 <__assert_fail@plt+0x19150>
   2a880:	b	2a8c0 <__assert_fail@plt+0x19160>
   2a884:	beq	2a8b0 <__assert_fail@plt+0x19150>
   2a888:	mov	r6, #-2147483648	; 0x80000000
   2a88c:	mvn	r4, #-2147483648	; 0x80000000
   2a890:	sdiv	r6, r6, r7
   2a894:	cmp	r6, r0
   2a898:	bge	2a8b0 <__assert_fail@plt+0x19150>
   2a89c:	b	2a8c0 <__assert_fail@plt+0x19160>
   2a8a0:	mvn	r4, #-2147483648	; 0x80000000
   2a8a4:	sdiv	r6, r4, r0
   2a8a8:	cmp	r7, r6
   2a8ac:	blt	2a8c0 <__assert_fail@plt+0x19160>
   2a8b0:	mul	r6, r7, r0
   2a8b4:	mov	r4, #64	; 0x40
   2a8b8:	cmp	r6, #63	; 0x3f
   2a8bc:	bgt	2a8c8 <__assert_fail@plt+0x19168>
   2a8c0:	sdiv	r7, r4, r0
   2a8c4:	mul	r6, r7, r0
   2a8c8:	cmp	r5, #0
   2a8cc:	moveq	r4, #0
   2a8d0:	streq	r4, [r8]
   2a8d4:	sub	r4, r7, r1
   2a8d8:	cmp	r4, r2
   2a8dc:	bge	2a988 <__assert_fail@plt+0x19228>
   2a8e0:	add	r7, r1, r2
   2a8e4:	mov	r6, #0
   2a8e8:	mov	r2, #0
   2a8ec:	cmp	r7, r3
   2a8f0:	movwgt	r6, #1
   2a8f4:	cmn	r3, #1
   2a8f8:	movwgt	r2, #1
   2a8fc:	cmp	r7, r1
   2a900:	bvs	2a9bc <__assert_fail@plt+0x1925c>
   2a904:	ands	r1, r2, r6
   2a908:	bne	2a9bc <__assert_fail@plt+0x1925c>
   2a90c:	cmn	r0, #1
   2a910:	ble	2a938 <__assert_fail@plt+0x191d8>
   2a914:	cmp	r0, #0
   2a918:	beq	2a984 <__assert_fail@plt+0x19224>
   2a91c:	cmn	r7, #1
   2a920:	ble	2a95c <__assert_fail@plt+0x191fc>
   2a924:	mvn	r1, #-2147483648	; 0x80000000
   2a928:	udiv	r1, r1, r0
   2a92c:	cmp	r1, r7
   2a930:	bge	2a984 <__assert_fail@plt+0x19224>
   2a934:	b	2a9bc <__assert_fail@plt+0x1925c>
   2a938:	cmn	r7, #1
   2a93c:	ble	2a974 <__assert_fail@plt+0x19214>
   2a940:	cmn	r0, #1
   2a944:	beq	2a984 <__assert_fail@plt+0x19224>
   2a948:	mov	r1, #-2147483648	; 0x80000000
   2a94c:	sdiv	r1, r1, r0
   2a950:	cmp	r1, r7
   2a954:	bge	2a984 <__assert_fail@plt+0x19224>
   2a958:	b	2a9bc <__assert_fail@plt+0x1925c>
   2a95c:	beq	2a984 <__assert_fail@plt+0x19224>
   2a960:	mov	r1, #-2147483648	; 0x80000000
   2a964:	sdiv	r1, r1, r7
   2a968:	cmp	r1, r0
   2a96c:	bge	2a984 <__assert_fail@plt+0x19224>
   2a970:	b	2a9bc <__assert_fail@plt+0x1925c>
   2a974:	mvn	r1, #-2147483648	; 0x80000000
   2a978:	sdiv	r1, r1, r0
   2a97c:	cmp	r7, r1
   2a980:	blt	2a9bc <__assert_fail@plt+0x1925c>
   2a984:	mul	r6, r7, r0
   2a988:	mov	r0, r5
   2a98c:	mov	r1, r6
   2a990:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   2a994:	cmp	r6, #0
   2a998:	movwne	r6, #1
   2a99c:	cmp	r0, #0
   2a9a0:	bne	2a9b4 <__assert_fail@plt+0x19254>
   2a9a4:	clz	r1, r5
   2a9a8:	lsr	r1, r1, #5
   2a9ac:	orrs	r1, r1, r6
   2a9b0:	bne	2a9bc <__assert_fail@plt+0x1925c>
   2a9b4:	str	r7, [r8]
   2a9b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a9bc:	bl	11860 <__assert_fail@plt+0x100>
   2a9c0:	push	{fp, lr}
   2a9c4:	mov	fp, sp
   2a9c8:	mov	r1, #1
   2a9cc:	bl	2d24c <__assert_fail@plt+0x1baec>
   2a9d0:	cmp	r0, #0
   2a9d4:	popne	{fp, pc}
   2a9d8:	bl	11860 <__assert_fail@plt+0x100>
   2a9dc:	push	{fp, lr}
   2a9e0:	mov	fp, sp
   2a9e4:	bl	2d24c <__assert_fail@plt+0x1baec>
   2a9e8:	cmp	r0, #0
   2a9ec:	popne	{fp, pc}
   2a9f0:	bl	11860 <__assert_fail@plt+0x100>
   2a9f4:	push	{fp, lr}
   2a9f8:	mov	fp, sp
   2a9fc:	mov	r1, #1
   2aa00:	bl	2d24c <__assert_fail@plt+0x1baec>
   2aa04:	cmp	r0, #0
   2aa08:	popne	{fp, pc}
   2aa0c:	bl	11860 <__assert_fail@plt+0x100>
   2aa10:	push	{fp, lr}
   2aa14:	mov	fp, sp
   2aa18:	bl	2d24c <__assert_fail@plt+0x1baec>
   2aa1c:	cmp	r0, #0
   2aa20:	popne	{fp, pc}
   2aa24:	bl	11860 <__assert_fail@plt+0x100>
   2aa28:	push	{r4, r5, r6, sl, fp, lr}
   2aa2c:	add	fp, sp, #16
   2aa30:	mov	r5, r0
   2aa34:	mov	r0, r1
   2aa38:	mov	r4, r1
   2aa3c:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2aa40:	cmp	r0, #0
   2aa44:	beq	2aa60 <__assert_fail@plt+0x19300>
   2aa48:	mov	r1, r5
   2aa4c:	mov	r2, r4
   2aa50:	mov	r6, r0
   2aa54:	bl	11484 <memcpy@plt>
   2aa58:	mov	r0, r6
   2aa5c:	pop	{r4, r5, r6, sl, fp, pc}
   2aa60:	bl	11860 <__assert_fail@plt+0x100>
   2aa64:	push	{r4, r5, r6, sl, fp, lr}
   2aa68:	add	fp, sp, #16
   2aa6c:	mov	r5, r0
   2aa70:	mov	r0, r1
   2aa74:	mov	r4, r1
   2aa78:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2aa7c:	cmp	r0, #0
   2aa80:	beq	2aa9c <__assert_fail@plt+0x1933c>
   2aa84:	mov	r1, r5
   2aa88:	mov	r2, r4
   2aa8c:	mov	r6, r0
   2aa90:	bl	11484 <memcpy@plt>
   2aa94:	mov	r0, r6
   2aa98:	pop	{r4, r5, r6, sl, fp, pc}
   2aa9c:	bl	11860 <__assert_fail@plt+0x100>
   2aaa0:	push	{r4, r5, r6, sl, fp, lr}
   2aaa4:	add	fp, sp, #16
   2aaa8:	mov	r5, r0
   2aaac:	add	r0, r1, #1
   2aab0:	mov	r4, r1
   2aab4:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2aab8:	cmp	r0, #0
   2aabc:	beq	2aae4 <__assert_fail@plt+0x19384>
   2aac0:	mov	r6, r0
   2aac4:	mov	r0, #0
   2aac8:	mov	r1, r5
   2aacc:	mov	r2, r4
   2aad0:	strb	r0, [r6, r4]
   2aad4:	mov	r0, r6
   2aad8:	bl	11484 <memcpy@plt>
   2aadc:	mov	r0, r6
   2aae0:	pop	{r4, r5, r6, sl, fp, pc}
   2aae4:	bl	11860 <__assert_fail@plt+0x100>
   2aae8:	push	{r4, r5, r6, sl, fp, lr}
   2aaec:	add	fp, sp, #16
   2aaf0:	mov	r4, r0
   2aaf4:	bl	11628 <strlen@plt>
   2aaf8:	add	r5, r0, #1
   2aafc:	mov	r0, r5
   2ab00:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2ab04:	cmp	r0, #0
   2ab08:	beq	2ab24 <__assert_fail@plt+0x193c4>
   2ab0c:	mov	r1, r4
   2ab10:	mov	r2, r5
   2ab14:	mov	r6, r0
   2ab18:	bl	11484 <memcpy@plt>
   2ab1c:	mov	r0, r6
   2ab20:	pop	{r4, r5, r6, sl, fp, pc}
   2ab24:	bl	11860 <__assert_fail@plt+0x100>
   2ab28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ab2c:	add	fp, sp, #24
   2ab30:	sub	sp, sp, #16
   2ab34:	mov	r8, r0
   2ab38:	ldr	r0, [fp, #16]
   2ab3c:	mov	r7, r3
   2ab40:	mov	r4, r2
   2ab44:	mov	r2, r1
   2ab48:	add	r3, sp, #8
   2ab4c:	mov	r1, #0
   2ab50:	str	r0, [sp]
   2ab54:	mov	r0, r8
   2ab58:	bl	2ac38 <__assert_fail@plt+0x194d8>
   2ab5c:	cmp	r0, #0
   2ab60:	bne	2ac0c <__assert_fail@plt+0x194ac>
   2ab64:	ldr	r6, [sp, #8]
   2ab68:	ldr	r5, [sp, #12]
   2ab6c:	subs	r0, r6, r4
   2ab70:	sbcs	r0, r5, r7
   2ab74:	blt	2ab98 <__assert_fail@plt+0x19438>
   2ab78:	ldr	r1, [fp, #8]
   2ab7c:	ldr	r0, [fp, #12]
   2ab80:	subs	r1, r1, r6
   2ab84:	sbcs	r0, r0, r5
   2ab88:	movge	r0, r6
   2ab8c:	movge	r1, r5
   2ab90:	subge	sp, fp, #24
   2ab94:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab98:	subs	r0, r6, #1073741824	; 0x40000000
   2ab9c:	sbcs	r0, r5, #0
   2aba0:	blt	2abb0 <__assert_fail@plt+0x19450>
   2aba4:	bl	11640 <__errno_location@plt>
   2aba8:	mov	r1, #75	; 0x4b
   2abac:	b	2abcc <__assert_fail@plt+0x1946c>
   2abb0:	bl	11640 <__errno_location@plt>
   2abb4:	mvn	r2, #1073741824	; 0x40000000
   2abb8:	mvn	r1, #0
   2abbc:	subs	r2, r2, r6
   2abc0:	sbcs	r1, r1, r5
   2abc4:	movlt	r1, #34	; 0x22
   2abc8:	movge	r1, #75	; 0x4b
   2abcc:	str	r1, [r0]
   2abd0:	ldr	r6, [r0]
   2abd4:	ldr	r4, [fp, #24]
   2abd8:	ldr	r5, [fp, #20]
   2abdc:	mov	r0, r8
   2abe0:	bl	16640 <__assert_fail@plt+0x4ee0>
   2abe4:	subs	r1, r6, #22
   2abe8:	movw	r2, #59075	; 0xe6c3
   2abec:	str	r0, [sp]
   2abf0:	mov	r3, r5
   2abf4:	movne	r1, r6
   2abf8:	cmp	r4, #0
   2abfc:	movt	r2, #2
   2ac00:	movweq	r4, #1
   2ac04:	mov	r0, r4
   2ac08:	bl	11598 <error@plt>
   2ac0c:	cmp	r0, #1
   2ac10:	beq	2aba4 <__assert_fail@plt+0x19444>
   2ac14:	cmp	r0, #3
   2ac18:	bne	2ac28 <__assert_fail@plt+0x194c8>
   2ac1c:	bl	11640 <__errno_location@plt>
   2ac20:	mov	r1, #0
   2ac24:	b	2abcc <__assert_fail@plt+0x1946c>
   2ac28:	bl	11640 <__errno_location@plt>
   2ac2c:	b	2abd0 <__assert_fail@plt+0x19470>
   2ac30:	mov	r1, #10
   2ac34:	b	2ab28 <__assert_fail@plt+0x193c8>
   2ac38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac3c:	add	fp, sp, #28
   2ac40:	sub	sp, sp, #36	; 0x24
   2ac44:	cmp	r2, #37	; 0x25
   2ac48:	bcs	2c578 <__assert_fail@plt+0x1ae18>
   2ac4c:	ldr	r8, [fp, #8]
   2ac50:	mov	r9, r3
   2ac54:	mov	r6, r2
   2ac58:	mov	r7, r1
   2ac5c:	mov	r4, r0
   2ac60:	bl	11640 <__errno_location@plt>
   2ac64:	add	sl, sp, #32
   2ac68:	cmp	r7, #0
   2ac6c:	mov	r5, r0
   2ac70:	mov	r0, #0
   2ac74:	mov	r2, r6
   2ac78:	mov	r3, #0
   2ac7c:	movne	sl, r7
   2ac80:	str	r0, [r5]
   2ac84:	mov	r0, r4
   2ac88:	mov	r1, sl
   2ac8c:	bl	11700 <__strtoll_internal@plt>
   2ac90:	mov	r7, r1
   2ac94:	ldr	r1, [sl]
   2ac98:	cmp	r1, r4
   2ac9c:	beq	2acd8 <__assert_fail@plt+0x19578>
   2aca0:	mov	r6, r0
   2aca4:	ldr	r0, [r5]
   2aca8:	cmp	r0, #0
   2acac:	beq	2ae64 <__assert_fail@plt+0x19704>
   2acb0:	mov	r5, #4
   2acb4:	cmp	r0, #34	; 0x22
   2acb8:	bne	2b0bc <__assert_fail@plt+0x1995c>
   2acbc:	mov	r5, #1
   2acc0:	cmp	r8, #0
   2acc4:	beq	2ae70 <__assert_fail@plt+0x19710>
   2acc8:	ldrb	r4, [r1]
   2accc:	cmp	r4, #0
   2acd0:	bne	2ad20 <__assert_fail@plt+0x195c0>
   2acd4:	b	2ae70 <__assert_fail@plt+0x19710>
   2acd8:	mov	r5, #4
   2acdc:	cmp	r8, #0
   2ace0:	beq	2b0bc <__assert_fail@plt+0x1995c>
   2ace4:	mov	r6, r1
   2ace8:	ldrb	r1, [r4]
   2acec:	cmp	r1, #0
   2acf0:	beq	2b0bc <__assert_fail@plt+0x1995c>
   2acf4:	mov	r0, r8
   2acf8:	bl	11634 <strchr@plt>
   2acfc:	cmp	r0, #0
   2ad00:	beq	2b0bc <__assert_fail@plt+0x1995c>
   2ad04:	mov	r1, r6
   2ad08:	mov	r5, #0
   2ad0c:	mov	r6, #1
   2ad10:	mov	r7, #0
   2ad14:	ldrb	r4, [r1]
   2ad18:	cmp	r4, #0
   2ad1c:	beq	2ae70 <__assert_fail@plt+0x19710>
   2ad20:	str	r1, [sp, #20]
   2ad24:	mov	r0, r8
   2ad28:	mov	r1, r4
   2ad2c:	bl	11634 <strchr@plt>
   2ad30:	cmp	r0, #0
   2ad34:	beq	2b0b4 <__assert_fail@plt+0x19954>
   2ad38:	sub	r0, r4, #69	; 0x45
   2ad3c:	mov	r1, #1
   2ad40:	mov	r3, #0
   2ad44:	mov	r2, #1024	; 0x400
   2ad48:	cmp	r0, #47	; 0x2f
   2ad4c:	str	r1, [sp, #16]
   2ad50:	bhi	2ae88 <__assert_fail@plt+0x19728>
   2ad54:	add	r1, pc, #0
   2ad58:	ldr	pc, [r1, r0, lsl #2]
   2ad5c:	andeq	sl, r2, ip, lsl lr
   2ad60:	andeq	sl, r2, r8, lsl #29
   2ad64:	andeq	sl, r2, ip, lsl lr
   2ad68:	andeq	sl, r2, r8, lsl #29
   2ad6c:	andeq	sl, r2, r8, lsl #29
   2ad70:	andeq	sl, r2, r8, lsl #29
   2ad74:	andeq	sl, r2, ip, lsl lr
   2ad78:	andeq	sl, r2, r8, lsl #29
   2ad7c:	andeq	sl, r2, ip, lsl lr
   2ad80:	andeq	sl, r2, r8, lsl #29
   2ad84:	andeq	sl, r2, r8, lsl #29
   2ad88:	andeq	sl, r2, ip, lsl lr
   2ad8c:	andeq	sl, r2, r8, lsl #29
   2ad90:	andeq	sl, r2, r8, lsl #29
   2ad94:	andeq	sl, r2, r8, lsl #29
   2ad98:	andeq	sl, r2, ip, lsl lr
   2ad9c:	andeq	sl, r2, r8, lsl #29
   2ada0:	andeq	sl, r2, r8, lsl #29
   2ada4:	andeq	sl, r2, r8, lsl #29
   2ada8:	andeq	sl, r2, r8, lsl #29
   2adac:	andeq	sl, r2, ip, lsl lr
   2adb0:	andeq	sl, r2, ip, lsl lr
   2adb4:	andeq	sl, r2, r8, lsl #29
   2adb8:	andeq	sl, r2, r8, lsl #29
   2adbc:	andeq	sl, r2, r8, lsl #29
   2adc0:	andeq	sl, r2, r8, lsl #29
   2adc4:	andeq	sl, r2, r8, lsl #29
   2adc8:	andeq	sl, r2, r8, lsl #29
   2adcc:	andeq	sl, r2, r8, lsl #29
   2add0:	andeq	sl, r2, r8, lsl #29
   2add4:	andeq	sl, r2, r8, lsl #29
   2add8:	andeq	sl, r2, r8, lsl #29
   2addc:	andeq	sl, r2, r8, lsl #29
   2ade0:	andeq	sl, r2, r8, lsl #29
   2ade4:	andeq	sl, r2, ip, lsl lr
   2ade8:	andeq	sl, r2, r8, lsl #29
   2adec:	andeq	sl, r2, r8, lsl #29
   2adf0:	andeq	sl, r2, r8, lsl #29
   2adf4:	andeq	sl, r2, ip, lsl lr
   2adf8:	andeq	sl, r2, r8, lsl #29
   2adfc:	andeq	sl, r2, ip, lsl lr
   2ae00:	andeq	sl, r2, r8, lsl #29
   2ae04:	andeq	sl, r2, r8, lsl #29
   2ae08:	andeq	sl, r2, r8, lsl #29
   2ae0c:	andeq	sl, r2, r8, lsl #29
   2ae10:	andeq	sl, r2, r8, lsl #29
   2ae14:	andeq	sl, r2, r8, lsl #29
   2ae18:	andeq	sl, r2, ip, lsl lr
   2ae1c:	mov	r0, r8
   2ae20:	mov	r1, #48	; 0x30
   2ae24:	bl	11634 <strchr@plt>
   2ae28:	cmp	r0, #0
   2ae2c:	beq	2ae80 <__assert_fail@plt+0x19720>
   2ae30:	ldr	r1, [sp, #20]
   2ae34:	ldrb	r0, [r1, #1]
   2ae38:	cmp	r0, #66	; 0x42
   2ae3c:	cmpne	r0, #68	; 0x44
   2ae40:	bne	2afbc <__assert_fail@plt+0x1985c>
   2ae44:	mov	r0, #2
   2ae48:	mov	r2, #1000	; 0x3e8
   2ae4c:	mov	r3, #0
   2ae50:	str	r0, [sp, #16]
   2ae54:	sub	r0, r4, #66	; 0x42
   2ae58:	cmp	r0, #53	; 0x35
   2ae5c:	bls	2ae94 <__assert_fail@plt+0x19734>
   2ae60:	b	2b0b4 <__assert_fail@plt+0x19954>
   2ae64:	mov	r5, r0
   2ae68:	cmp	r8, #0
   2ae6c:	bne	2acc8 <__assert_fail@plt+0x19568>
   2ae70:	strd	r6, [r9]
   2ae74:	mov	r0, r5
   2ae78:	sub	sp, fp, #28
   2ae7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae80:	mov	r3, #0
   2ae84:	mov	r2, #1024	; 0x400
   2ae88:	sub	r0, r4, #66	; 0x42
   2ae8c:	cmp	r0, #53	; 0x35
   2ae90:	bhi	2b0b4 <__assert_fail@plt+0x19954>
   2ae94:	add	r1, pc, #8
   2ae98:	str	r3, [sp, #28]
   2ae9c:	str	r2, [sp, #24]
   2aea0:	ldr	pc, [r1, r0, lsl #2]
   2aea4:	andeq	fp, r2, ip, lsl #2
   2aea8:	strheq	fp, [r2], -r4
   2aeac:	strheq	fp, [r2], -r4
   2aeb0:	andeq	fp, r2, r0, lsr #2
   2aeb4:	strheq	fp, [r2], -r4
   2aeb8:	andeq	sl, r2, ip, ror pc
   2aebc:	strheq	fp, [r2], -r4
   2aec0:	strheq	fp, [r2], -r4
   2aec4:	strheq	fp, [r2], -r4
   2aec8:	strdeq	sl, [r2], -r0
   2aecc:	strheq	fp, [r2], -r4
   2aed0:	andeq	fp, r2, r0, lsr #32
   2aed4:	strheq	fp, [r2], -r4
   2aed8:	strheq	fp, [r2], -r4
   2aedc:	andeq	fp, r2, r4, ror #2
   2aee0:	strheq	fp, [r2], -r4
   2aee4:	strheq	fp, [r2], -r4
   2aee8:	strheq	fp, [r2], -r4
   2aeec:	andeq	fp, r2, r0, rrx
   2aef0:	strheq	fp, [r2], -r4
   2aef4:	strheq	fp, [r2], -r4
   2aef8:	strheq	fp, [r2], -r4
   2aefc:	strheq	fp, [r2], -r4
   2af00:	andeq	fp, r2, r8, lsr #3
   2af04:	andeq	fp, r2, r8, asr #1
   2af08:	strheq	fp, [r2], -r4
   2af0c:	strheq	fp, [r2], -r4
   2af10:	strheq	fp, [r2], -r4
   2af14:	strheq	fp, [r2], -r4
   2af18:	strheq	fp, [r2], -r4
   2af1c:	strheq	fp, [r2], -r4
   2af20:	strheq	fp, [r2], -r4
   2af24:	andeq	fp, r2, ip, ror #3
   2af28:	andeq	ip, r2, r4, ror #2
   2af2c:	strheq	fp, [r2], -r4
   2af30:	strheq	fp, [r2], -r4
   2af34:	strheq	fp, [r2], -r4
   2af38:	andeq	sl, r2, ip, ror pc
   2af3c:	strheq	fp, [r2], -r4
   2af40:	strheq	fp, [r2], -r4
   2af44:	strheq	fp, [r2], -r4
   2af48:	strdeq	sl, [r2], -r0
   2af4c:	strheq	fp, [r2], -r4
   2af50:	andeq	fp, r2, r0, lsr #32
   2af54:	strheq	fp, [r2], -r4
   2af58:	strheq	fp, [r2], -r4
   2af5c:	strheq	fp, [r2], -r4
   2af60:	strheq	fp, [r2], -r4
   2af64:	strheq	fp, [r2], -r4
   2af68:	strheq	fp, [r2], -r4
   2af6c:	andeq	fp, r2, r0, rrx
   2af70:	strheq	fp, [r2], -r4
   2af74:	strheq	fp, [r2], -r4
   2af78:	andeq	fp, r2, r0, lsl #4
   2af7c:	cmn	r7, #1
   2af80:	str	r9, [sp, #12]
   2af84:	ble	2b214 <__assert_fail@plt+0x19ab4>
   2af88:	ldr	r3, [sp, #28]
   2af8c:	mvn	r0, #0
   2af90:	mvn	r1, #-2147483648	; 0x80000000
   2af94:	mvn	r8, #0
   2af98:	mvn	r9, #-2147483648	; 0x80000000
   2af9c:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2afa0:	ldr	r2, [sp, #24]
   2afa4:	ldr	r3, [sp, #28]
   2afa8:	subs	r0, r0, r6
   2afac:	mov	r4, #1
   2afb0:	sbcs	r0, r1, r7
   2afb4:	bge	2b254 <__assert_fail@plt+0x19af4>
   2afb8:	b	2b26c <__assert_fail@plt+0x19b0c>
   2afbc:	cmp	r0, #105	; 0x69
   2afc0:	mov	r3, #0
   2afc4:	bne	2b0a4 <__assert_fail@plt+0x19944>
   2afc8:	ldrb	r0, [r1, #2]
   2afcc:	mov	r1, #1
   2afd0:	mov	r2, #1024	; 0x400
   2afd4:	cmp	r0, #66	; 0x42
   2afd8:	movweq	r1, #3
   2afdc:	str	r1, [sp, #16]
   2afe0:	sub	r0, r4, #66	; 0x42
   2afe4:	cmp	r0, #53	; 0x35
   2afe8:	bls	2ae94 <__assert_fail@plt+0x19734>
   2afec:	b	2b0b4 <__assert_fail@plt+0x19954>
   2aff0:	cmn	r7, #1
   2aff4:	ble	2b2a8 <__assert_fail@plt+0x19b48>
   2aff8:	ldr	r3, [sp, #28]
   2affc:	mvn	r0, #0
   2b000:	mvn	r1, #-2147483648	; 0x80000000
   2b004:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b008:	ldr	r2, [sp, #24]
   2b00c:	ldr	r3, [sp, #28]
   2b010:	subs	r0, r0, r6
   2b014:	sbcs	r0, r1, r7
   2b018:	bge	2b2dc <__assert_fail@plt+0x19b7c>
   2b01c:	b	2b9ec <__assert_fail@plt+0x1a28c>
   2b020:	cmn	r7, #1
   2b024:	str	r9, [sp, #12]
   2b028:	ble	2b2f0 <__assert_fail@plt+0x19b90>
   2b02c:	ldr	r3, [sp, #28]
   2b030:	mvn	r0, #0
   2b034:	mvn	r1, #-2147483648	; 0x80000000
   2b038:	mvn	r8, #0
   2b03c:	mvn	r9, #-2147483648	; 0x80000000
   2b040:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b044:	ldr	r2, [sp, #24]
   2b048:	ldr	r3, [sp, #28]
   2b04c:	subs	r0, r0, r6
   2b050:	mov	r4, #1
   2b054:	sbcs	r0, r1, r7
   2b058:	bge	2b330 <__assert_fail@plt+0x19bd0>
   2b05c:	b	2b348 <__assert_fail@plt+0x19be8>
   2b060:	cmn	r7, #1
   2b064:	str	r9, [sp, #12]
   2b068:	ble	2b380 <__assert_fail@plt+0x19c20>
   2b06c:	ldr	r3, [sp, #28]
   2b070:	mvn	r0, #0
   2b074:	mvn	r1, #-2147483648	; 0x80000000
   2b078:	mvn	r9, #-2147483648	; 0x80000000
   2b07c:	str	r0, [sp, #8]
   2b080:	mvn	r0, #0
   2b084:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b088:	ldr	r2, [sp, #24]
   2b08c:	ldr	r3, [sp, #28]
   2b090:	subs	r0, r0, r6
   2b094:	mov	r4, #1
   2b098:	sbcs	r0, r1, r7
   2b09c:	bge	2b3c4 <__assert_fail@plt+0x19c64>
   2b0a0:	b	2b3e0 <__assert_fail@plt+0x19c80>
   2b0a4:	mov	r2, #1024	; 0x400
   2b0a8:	sub	r0, r4, #66	; 0x42
   2b0ac:	cmp	r0, #53	; 0x35
   2b0b0:	bls	2ae94 <__assert_fail@plt+0x19734>
   2b0b4:	orr	r5, r5, #2
   2b0b8:	strd	r6, [r9]
   2b0bc:	mov	r0, r5
   2b0c0:	sub	sp, fp, #28
   2b0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0c8:	cmp	r7, #0
   2b0cc:	str	r9, [sp, #12]
   2b0d0:	blt	2b6c8 <__assert_fail@plt+0x19f68>
   2b0d4:	ldr	r3, [sp, #28]
   2b0d8:	mvn	r0, #0
   2b0dc:	mvn	r1, #-2147483648	; 0x80000000
   2b0e0:	mvn	r9, #-2147483648	; 0x80000000
   2b0e4:	str	r0, [sp, #8]
   2b0e8:	mvn	r0, #0
   2b0ec:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b0f0:	ldr	r2, [sp, #24]
   2b0f4:	ldr	r3, [sp, #28]
   2b0f8:	subs	r0, r0, r6
   2b0fc:	mov	r4, #1
   2b100:	sbcs	r0, r1, r7
   2b104:	bge	2b70c <__assert_fail@plt+0x19fac>
   2b108:	b	2b728 <__assert_fail@plt+0x19fc8>
   2b10c:	cmn	r7, #1
   2b110:	ble	2b764 <__assert_fail@plt+0x1a004>
   2b114:	cmp	r7, #2097152	; 0x200000
   2b118:	blt	2b794 <__assert_fail@plt+0x1a034>
   2b11c:	b	2b9ec <__assert_fail@plt+0x1a28c>
   2b120:	cmp	r7, #0
   2b124:	str	r9, [sp, #12]
   2b128:	blt	2b7a4 <__assert_fail@plt+0x1a044>
   2b12c:	ldr	r3, [sp, #28]
   2b130:	mvn	r0, #0
   2b134:	mvn	r1, #-2147483648	; 0x80000000
   2b138:	mvn	r9, #-2147483648	; 0x80000000
   2b13c:	str	r0, [sp, #8]
   2b140:	mvn	r0, #0
   2b144:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b148:	ldr	r2, [sp, #24]
   2b14c:	ldr	r3, [sp, #28]
   2b150:	subs	r0, r0, r6
   2b154:	mov	r4, #1
   2b158:	sbcs	r0, r1, r7
   2b15c:	bge	2b7e8 <__assert_fail@plt+0x1a088>
   2b160:	b	2b804 <__assert_fail@plt+0x1a0a4>
   2b164:	cmp	r7, #0
   2b168:	str	r9, [sp, #12]
   2b16c:	blt	2b840 <__assert_fail@plt+0x1a0e0>
   2b170:	ldr	r3, [sp, #28]
   2b174:	mvn	r0, #0
   2b178:	mvn	r1, #-2147483648	; 0x80000000
   2b17c:	mvn	r8, #-2147483648	; 0x80000000
   2b180:	str	r0, [sp, #8]
   2b184:	mvn	r0, #0
   2b188:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b18c:	ldr	r2, [sp, #24]
   2b190:	ldr	r3, [sp, #28]
   2b194:	subs	r0, r0, r6
   2b198:	mov	r4, #1
   2b19c:	sbcs	r0, r1, r7
   2b1a0:	bge	2b884 <__assert_fail@plt+0x1a124>
   2b1a4:	b	2b8a0 <__assert_fail@plt+0x1a140>
   2b1a8:	cmp	r7, #0
   2b1ac:	str	r9, [sp, #12]
   2b1b0:	blt	2b8dc <__assert_fail@plt+0x1a17c>
   2b1b4:	ldr	r3, [sp, #28]
   2b1b8:	mvn	r0, #0
   2b1bc:	mvn	r1, #-2147483648	; 0x80000000
   2b1c0:	mvn	r9, #-2147483648	; 0x80000000
   2b1c4:	str	r0, [sp, #8]
   2b1c8:	mvn	r0, #0
   2b1cc:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b1d0:	ldr	r2, [sp, #24]
   2b1d4:	ldr	r3, [sp, #28]
   2b1d8:	subs	r0, r0, r6
   2b1dc:	mov	r4, #1
   2b1e0:	sbcs	r0, r1, r7
   2b1e4:	bge	2b920 <__assert_fail@plt+0x1a1c0>
   2b1e8:	b	2b93c <__assert_fail@plt+0x1a1dc>
   2b1ec:	cmn	r7, #1
   2b1f0:	ble	2b97c <__assert_fail@plt+0x1a21c>
   2b1f4:	cmp	r7, #4194304	; 0x400000
   2b1f8:	blt	2b9ac <__assert_fail@plt+0x1a24c>
   2b1fc:	b	2b9ec <__assert_fail@plt+0x1a28c>
   2b200:	cmn	r7, #1
   2b204:	ble	2b9bc <__assert_fail@plt+0x1a25c>
   2b208:	cmp	r7, #1073741824	; 0x40000000
   2b20c:	bge	2b9ec <__assert_fail@plt+0x1a28c>
   2b210:	b	2ba0c <__assert_fail@plt+0x1a2ac>
   2b214:	and	r0, r6, r7
   2b218:	cmn	r0, #1
   2b21c:	beq	2b254 <__assert_fail@plt+0x19af4>
   2b220:	mov	r0, #0
   2b224:	mov	r1, #-2147483648	; 0x80000000
   2b228:	mov	r2, r6
   2b22c:	mov	r3, r7
   2b230:	mov	r8, #0
   2b234:	mov	r9, #-2147483648	; 0x80000000
   2b238:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b23c:	ldr	r2, [sp, #24]
   2b240:	ldr	r3, [sp, #28]
   2b244:	mov	r4, #1
   2b248:	subs	r0, r0, r2
   2b24c:	sbcs	r0, r1, r3
   2b250:	blt	2b41c <__assert_fail@plt+0x19cbc>
   2b254:	umull	r8, r0, r6, r2
   2b258:	mov	r4, #0
   2b25c:	mla	r0, r6, r3, r0
   2b260:	mla	r9, r7, r2, r0
   2b264:	cmp	r9, #0
   2b268:	blt	2b41c <__assert_fail@plt+0x19cbc>
   2b26c:	ldr	r3, [sp, #28]
   2b270:	mvn	r0, #-2147483648	; 0x80000000
   2b274:	mvn	r1, #-2147483648	; 0x80000000
   2b278:	mov	r6, r4
   2b27c:	mvn	r4, #0
   2b280:	str	r0, [sp, #8]
   2b284:	mvn	r0, #0
   2b288:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b28c:	ldr	r2, [sp, #24]
   2b290:	ldr	r3, [sp, #28]
   2b294:	subs	r0, r0, r8
   2b298:	mov	r7, #1
   2b29c:	sbcs	r0, r1, r9
   2b2a0:	bge	2b458 <__assert_fail@plt+0x19cf8>
   2b2a4:	b	2b474 <__assert_fail@plt+0x19d14>
   2b2a8:	and	r0, r6, r7
   2b2ac:	cmn	r0, #1
   2b2b0:	beq	2b2dc <__assert_fail@plt+0x19b7c>
   2b2b4:	mov	r0, #0
   2b2b8:	mov	r1, #-2147483648	; 0x80000000
   2b2bc:	mov	r2, r6
   2b2c0:	mov	r3, r7
   2b2c4:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b2c8:	ldr	r2, [sp, #24]
   2b2cc:	ldr	r3, [sp, #28]
   2b2d0:	subs	r0, r0, r2
   2b2d4:	sbcs	r0, r1, r3
   2b2d8:	blt	2b9ec <__assert_fail@plt+0x1a28c>
   2b2dc:	umull	r0, r1, r6, r2
   2b2e0:	mla	r1, r6, r3, r1
   2b2e4:	mov	r6, r0
   2b2e8:	mla	r7, r7, r2, r1
   2b2ec:	b	2c164 <__assert_fail@plt+0x1aa04>
   2b2f0:	and	r0, r6, r7
   2b2f4:	cmn	r0, #1
   2b2f8:	beq	2b330 <__assert_fail@plt+0x19bd0>
   2b2fc:	mov	r0, #0
   2b300:	mov	r1, #-2147483648	; 0x80000000
   2b304:	mov	r2, r6
   2b308:	mov	r3, r7
   2b30c:	mov	r8, #0
   2b310:	mov	r9, #-2147483648	; 0x80000000
   2b314:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b318:	ldr	r2, [sp, #24]
   2b31c:	ldr	r3, [sp, #28]
   2b320:	mov	r4, #1
   2b324:	subs	r0, r0, r2
   2b328:	sbcs	r0, r1, r3
   2b32c:	blt	2b508 <__assert_fail@plt+0x19da8>
   2b330:	umull	r8, r0, r6, r2
   2b334:	mov	r4, #0
   2b338:	mla	r0, r6, r3, r0
   2b33c:	mla	r9, r7, r2, r0
   2b340:	cmp	r9, #0
   2b344:	blt	2b508 <__assert_fail@plt+0x19da8>
   2b348:	ldr	r3, [sp, #28]
   2b34c:	mvn	r0, #0
   2b350:	mvn	r1, #-2147483648	; 0x80000000
   2b354:	str	r4, [sp, #8]
   2b358:	mvn	r6, #0
   2b35c:	mvn	r7, #-2147483648	; 0x80000000
   2b360:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b364:	ldr	r4, [sp, #24]
   2b368:	ldr	r3, [sp, #28]
   2b36c:	subs	r0, r0, r8
   2b370:	mov	r2, #1
   2b374:	sbcs	r0, r1, r9
   2b378:	bge	2b540 <__assert_fail@plt+0x19de0>
   2b37c:	b	2b678 <__assert_fail@plt+0x19f18>
   2b380:	and	r0, r6, r7
   2b384:	cmn	r0, #1
   2b388:	beq	2b3c4 <__assert_fail@plt+0x19c64>
   2b38c:	mov	r0, #0
   2b390:	mov	r1, #-2147483648	; 0x80000000
   2b394:	mov	r2, r6
   2b398:	mov	r3, r7
   2b39c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b3a0:	ldr	r2, [sp, #24]
   2b3a4:	ldr	r3, [sp, #28]
   2b3a8:	mov	r4, #1
   2b3ac:	mov	r9, #-2147483648	; 0x80000000
   2b3b0:	subs	r0, r0, r2
   2b3b4:	sbcs	r0, r1, r3
   2b3b8:	mov	r0, #0
   2b3bc:	str	r0, [sp, #8]
   2b3c0:	blt	2b554 <__assert_fail@plt+0x19df4>
   2b3c4:	umull	r1, r0, r6, r2
   2b3c8:	mov	r4, #0
   2b3cc:	mla	r0, r6, r3, r0
   2b3d0:	str	r1, [sp, #8]
   2b3d4:	mla	r9, r7, r2, r0
   2b3d8:	cmp	r9, #0
   2b3dc:	blt	2b554 <__assert_fail@plt+0x19df4>
   2b3e0:	ldr	r3, [sp, #28]
   2b3e4:	mvn	r0, #0
   2b3e8:	mvn	r1, #-2147483648	; 0x80000000
   2b3ec:	str	r4, [sp, #4]
   2b3f0:	mvn	r6, #0
   2b3f4:	mvn	r8, #-2147483648	; 0x80000000
   2b3f8:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b3fc:	ldr	r4, [sp, #8]
   2b400:	ldr	r2, [sp, #24]
   2b404:	ldr	r3, [sp, #28]
   2b408:	mov	r7, #1
   2b40c:	subs	r0, r0, r4
   2b410:	sbcs	r0, r1, r9
   2b414:	bge	2b590 <__assert_fail@plt+0x19e30>
   2b418:	b	2b5a8 <__assert_fail@plt+0x19e48>
   2b41c:	mov	r0, #-2147483648	; 0x80000000
   2b420:	mov	r1, #-2147483648	; 0x80000000
   2b424:	mov	r2, r8
   2b428:	mov	r3, r9
   2b42c:	mov	r6, r4
   2b430:	mov	r4, #0
   2b434:	str	r0, [sp, #8]
   2b438:	mov	r0, #0
   2b43c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b440:	ldr	r2, [sp, #24]
   2b444:	ldr	r3, [sp, #28]
   2b448:	mov	r7, #1
   2b44c:	subs	r0, r0, r2
   2b450:	sbcs	r0, r1, r3
   2b454:	blt	2b4c8 <__assert_fail@plt+0x19d68>
   2b458:	umull	r4, r0, r8, r2
   2b45c:	mov	r7, r6
   2b460:	mla	r0, r8, r3, r0
   2b464:	mla	r0, r9, r2, r0
   2b468:	cmp	r0, #0
   2b46c:	str	r0, [sp, #8]
   2b470:	blt	2b4c8 <__assert_fail@plt+0x19d68>
   2b474:	ldr	r3, [sp, #28]
   2b478:	mvn	r0, #0
   2b47c:	mvn	r1, #-2147483648	; 0x80000000
   2b480:	mov	r9, r7
   2b484:	mvn	r6, #0
   2b488:	mvn	r7, #-2147483648	; 0x80000000
   2b48c:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b490:	ldr	r8, [sp, #8]
   2b494:	ldr	r3, [sp, #24]
   2b498:	ldr	ip, [sp, #28]
   2b49c:	subs	r0, r0, r4
   2b4a0:	mov	r2, #1
   2b4a4:	sbcs	r0, r1, r8
   2b4a8:	blt	2b4bc <__assert_fail@plt+0x19d5c>
   2b4ac:	umull	r6, r0, r4, r3
   2b4b0:	mov	r2, #0
   2b4b4:	mla	r0, r4, ip, r0
   2b4b8:	mla	r7, r8, r3, r0
   2b4bc:	orr	r3, r2, r9
   2b4c0:	ldr	r9, [sp, #12]
   2b4c4:	b	2c164 <__assert_fail@plt+0x1aa04>
   2b4c8:	ldr	r8, [sp, #8]
   2b4cc:	mov	r0, #0
   2b4d0:	mov	r1, #-2147483648	; 0x80000000
   2b4d4:	mov	r2, r4
   2b4d8:	mov	r9, r7
   2b4dc:	mov	r6, #0
   2b4e0:	mov	r7, #-2147483648	; 0x80000000
   2b4e4:	mov	r3, r8
   2b4e8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b4ec:	ldr	r3, [sp, #24]
   2b4f0:	ldr	ip, [sp, #28]
   2b4f4:	mov	r2, #1
   2b4f8:	subs	r0, r0, r3
   2b4fc:	sbcs	r0, r1, ip
   2b500:	bge	2b4ac <__assert_fail@plt+0x19d4c>
   2b504:	b	2b4bc <__assert_fail@plt+0x19d5c>
   2b508:	mov	r0, #0
   2b50c:	mov	r1, #-2147483648	; 0x80000000
   2b510:	mov	r2, r8
   2b514:	mov	r3, r9
   2b518:	str	r4, [sp, #8]
   2b51c:	mov	r6, #0
   2b520:	mov	r7, #-2147483648	; 0x80000000
   2b524:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b528:	ldr	r4, [sp, #24]
   2b52c:	ldr	r3, [sp, #28]
   2b530:	mov	r2, #1
   2b534:	subs	r0, r0, r4
   2b538:	sbcs	r0, r1, r3
   2b53c:	blt	2b678 <__assert_fail@plt+0x19f18>
   2b540:	umull	r6, r0, r8, r4
   2b544:	mov	r2, #0
   2b548:	mla	r0, r8, r3, r0
   2b54c:	mla	r7, r9, r4, r0
   2b550:	b	2b678 <__assert_fail@plt+0x19f18>
   2b554:	str	r4, [sp, #4]
   2b558:	ldr	r4, [sp, #8]
   2b55c:	mov	r0, #0
   2b560:	mov	r1, #-2147483648	; 0x80000000
   2b564:	mov	r3, r9
   2b568:	mov	r2, r4
   2b56c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b570:	ldr	r2, [sp, #24]
   2b574:	ldr	r3, [sp, #28]
   2b578:	mov	r7, #1
   2b57c:	mov	r6, #0
   2b580:	mov	r8, #-2147483648	; 0x80000000
   2b584:	subs	r0, r0, r2
   2b588:	sbcs	r0, r1, r3
   2b58c:	blt	2b5e0 <__assert_fail@plt+0x19e80>
   2b590:	umull	r6, r0, r4, r2
   2b594:	ldr	r7, [sp, #4]
   2b598:	mla	r0, r4, r3, r0
   2b59c:	mla	r8, r9, r2, r0
   2b5a0:	cmp	r8, #0
   2b5a4:	blt	2b5e0 <__assert_fail@plt+0x19e80>
   2b5a8:	ldr	r3, [sp, #28]
   2b5ac:	mvn	r0, #0
   2b5b0:	mvn	r1, #-2147483648	; 0x80000000
   2b5b4:	str	r7, [sp, #8]
   2b5b8:	mvn	r4, #0
   2b5bc:	mvn	r9, #-2147483648	; 0x80000000
   2b5c0:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b5c4:	ldr	r2, [sp, #24]
   2b5c8:	ldr	r3, [sp, #28]
   2b5cc:	subs	r0, r0, r6
   2b5d0:	mov	r7, #1
   2b5d4:	sbcs	r0, r1, r8
   2b5d8:	bge	2b618 <__assert_fail@plt+0x19eb8>
   2b5dc:	b	2b630 <__assert_fail@plt+0x19ed0>
   2b5e0:	mov	r0, #0
   2b5e4:	mov	r1, #-2147483648	; 0x80000000
   2b5e8:	mov	r2, r6
   2b5ec:	mov	r3, r8
   2b5f0:	str	r7, [sp, #8]
   2b5f4:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b5f8:	ldr	r2, [sp, #24]
   2b5fc:	ldr	r3, [sp, #28]
   2b600:	mov	r7, #1
   2b604:	mov	r4, #0
   2b608:	mov	r9, #-2147483648	; 0x80000000
   2b60c:	subs	r0, r0, r2
   2b610:	sbcs	r0, r1, r3
   2b614:	blt	2b688 <__assert_fail@plt+0x19f28>
   2b618:	umull	r4, r0, r6, r2
   2b61c:	ldr	r7, [sp, #8]
   2b620:	mla	r0, r6, r3, r0
   2b624:	mla	r9, r8, r2, r0
   2b628:	cmp	r9, #0
   2b62c:	blt	2b688 <__assert_fail@plt+0x19f28>
   2b630:	ldr	r3, [sp, #28]
   2b634:	mvn	r0, #0
   2b638:	mvn	r1, #-2147483648	; 0x80000000
   2b63c:	str	r7, [sp, #8]
   2b640:	mvn	r6, #0
   2b644:	mvn	r7, #-2147483648	; 0x80000000
   2b648:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b64c:	ldr	r3, [sp, #24]
   2b650:	ldr	ip, [sp, #28]
   2b654:	subs	r0, r0, r4
   2b658:	mov	r2, #1
   2b65c:	mov	r8, r4
   2b660:	sbcs	r0, r1, r9
   2b664:	blt	2b678 <__assert_fail@plt+0x19f18>
   2b668:	umull	r6, r0, r8, r3
   2b66c:	mov	r2, #0
   2b670:	mla	r0, r8, ip, r0
   2b674:	mla	r7, r9, r3, r0
   2b678:	ldr	r0, [sp, #8]
   2b67c:	ldr	r9, [sp, #12]
   2b680:	orr	r3, r2, r0
   2b684:	b	2c164 <__assert_fail@plt+0x1aa04>
   2b688:	mov	r0, #0
   2b68c:	mov	r1, #-2147483648	; 0x80000000
   2b690:	mov	r2, r4
   2b694:	mov	r3, r9
   2b698:	str	r7, [sp, #8]
   2b69c:	mov	r8, r4
   2b6a0:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b6a4:	ldr	r3, [sp, #24]
   2b6a8:	ldr	ip, [sp, #28]
   2b6ac:	mov	r2, #1
   2b6b0:	mov	r6, #0
   2b6b4:	mov	r7, #-2147483648	; 0x80000000
   2b6b8:	subs	r0, r0, r3
   2b6bc:	sbcs	r0, r1, ip
   2b6c0:	bge	2b668 <__assert_fail@plt+0x19f08>
   2b6c4:	b	2b678 <__assert_fail@plt+0x19f18>
   2b6c8:	and	r0, r6, r7
   2b6cc:	cmn	r0, #1
   2b6d0:	beq	2b70c <__assert_fail@plt+0x19fac>
   2b6d4:	mov	r0, #0
   2b6d8:	mov	r1, #-2147483648	; 0x80000000
   2b6dc:	mov	r2, r6
   2b6e0:	mov	r3, r7
   2b6e4:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b6e8:	ldr	r2, [sp, #24]
   2b6ec:	ldr	r3, [sp, #28]
   2b6f0:	mov	r4, #1
   2b6f4:	mov	r9, #-2147483648	; 0x80000000
   2b6f8:	subs	r0, r0, r2
   2b6fc:	sbcs	r0, r1, r3
   2b700:	mov	r0, #0
   2b704:	str	r0, [sp, #8]
   2b708:	blt	2ba1c <__assert_fail@plt+0x1a2bc>
   2b70c:	umull	r1, r0, r6, r2
   2b710:	mov	r4, #0
   2b714:	mla	r0, r6, r3, r0
   2b718:	str	r1, [sp, #8]
   2b71c:	mla	r9, r7, r2, r0
   2b720:	cmp	r9, #0
   2b724:	blt	2ba1c <__assert_fail@plt+0x1a2bc>
   2b728:	ldr	r3, [sp, #28]
   2b72c:	mvn	r0, #0
   2b730:	mvn	r1, #-2147483648	; 0x80000000
   2b734:	str	r4, [sp, #4]
   2b738:	mvn	r8, #0
   2b73c:	mvn	r4, #-2147483648	; 0x80000000
   2b740:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b744:	ldr	r6, [sp, #8]
   2b748:	ldr	r2, [sp, #24]
   2b74c:	ldr	r3, [sp, #28]
   2b750:	mov	r7, #1
   2b754:	subs	r0, r0, r6
   2b758:	sbcs	r0, r1, r9
   2b75c:	bge	2ba58 <__assert_fail@plt+0x1a2f8>
   2b760:	b	2ba70 <__assert_fail@plt+0x1a310>
   2b764:	and	r0, r6, r7
   2b768:	cmn	r0, #1
   2b76c:	beq	2b794 <__assert_fail@plt+0x1a034>
   2b770:	mov	r0, #0
   2b774:	mov	r1, #-2147483648	; 0x80000000
   2b778:	mov	r2, r6
   2b77c:	mov	r3, r7
   2b780:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b784:	ldr	r3, [sp, #28]
   2b788:	subs	r0, r0, #1024	; 0x400
   2b78c:	sbcs	r0, r1, #0
   2b790:	blt	2b9ec <__assert_fail@plt+0x1a28c>
   2b794:	lsl	r0, r7, #10
   2b798:	orr	r7, r0, r6, lsr #22
   2b79c:	lsl	r6, r6, #10
   2b7a0:	b	2c164 <__assert_fail@plt+0x1aa04>
   2b7a4:	and	r0, r6, r7
   2b7a8:	cmn	r0, #1
   2b7ac:	beq	2b7e8 <__assert_fail@plt+0x1a088>
   2b7b0:	mov	r0, #0
   2b7b4:	mov	r1, #-2147483648	; 0x80000000
   2b7b8:	mov	r2, r6
   2b7bc:	mov	r3, r7
   2b7c0:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b7c4:	ldr	r2, [sp, #24]
   2b7c8:	ldr	r3, [sp, #28]
   2b7cc:	mov	r4, #1
   2b7d0:	mov	r9, #-2147483648	; 0x80000000
   2b7d4:	subs	r0, r0, r2
   2b7d8:	sbcs	r0, r1, r3
   2b7dc:	mov	r0, #0
   2b7e0:	str	r0, [sp, #8]
   2b7e4:	blt	2bd34 <__assert_fail@plt+0x1a5d4>
   2b7e8:	umull	r1, r0, r6, r2
   2b7ec:	mov	r4, #0
   2b7f0:	mla	r0, r6, r3, r0
   2b7f4:	str	r1, [sp, #8]
   2b7f8:	mla	r9, r7, r2, r0
   2b7fc:	cmp	r9, #0
   2b800:	blt	2bd34 <__assert_fail@plt+0x1a5d4>
   2b804:	ldr	r3, [sp, #28]
   2b808:	mvn	r0, #0
   2b80c:	mvn	r1, #-2147483648	; 0x80000000
   2b810:	str	r4, [sp, #4]
   2b814:	mvn	r8, #0
   2b818:	mvn	r4, #-2147483648	; 0x80000000
   2b81c:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b820:	ldr	r6, [sp, #8]
   2b824:	ldr	r2, [sp, #24]
   2b828:	ldr	r3, [sp, #28]
   2b82c:	mov	r7, #1
   2b830:	subs	r0, r0, r6
   2b834:	sbcs	r0, r1, r9
   2b838:	bge	2bd70 <__assert_fail@plt+0x1a610>
   2b83c:	b	2bd88 <__assert_fail@plt+0x1a628>
   2b840:	and	r0, r6, r7
   2b844:	cmn	r0, #1
   2b848:	beq	2b884 <__assert_fail@plt+0x1a124>
   2b84c:	mov	r0, #0
   2b850:	mov	r1, #-2147483648	; 0x80000000
   2b854:	mov	r2, r6
   2b858:	mov	r3, r7
   2b85c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b860:	ldr	r2, [sp, #24]
   2b864:	ldr	r3, [sp, #28]
   2b868:	mov	r4, #1
   2b86c:	mov	r8, #-2147483648	; 0x80000000
   2b870:	subs	r0, r0, r2
   2b874:	sbcs	r0, r1, r3
   2b878:	mov	r0, #0
   2b87c:	str	r0, [sp, #8]
   2b880:	blt	2bfb0 <__assert_fail@plt+0x1a850>
   2b884:	umull	r1, r0, r6, r2
   2b888:	mov	r4, #0
   2b88c:	mla	r0, r6, r3, r0
   2b890:	str	r1, [sp, #8]
   2b894:	mla	r8, r7, r2, r0
   2b898:	cmp	r8, #0
   2b89c:	blt	2bfb0 <__assert_fail@plt+0x1a850>
   2b8a0:	ldr	r3, [sp, #28]
   2b8a4:	mvn	r0, #0
   2b8a8:	mvn	r1, #-2147483648	; 0x80000000
   2b8ac:	str	r4, [sp, #4]
   2b8b0:	mvn	r9, #0
   2b8b4:	mvn	r4, #-2147483648	; 0x80000000
   2b8b8:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b8bc:	ldr	r6, [sp, #8]
   2b8c0:	ldr	r2, [sp, #24]
   2b8c4:	ldr	r3, [sp, #28]
   2b8c8:	mov	r7, #1
   2b8cc:	subs	r0, r0, r6
   2b8d0:	sbcs	r0, r1, r8
   2b8d4:	bge	2bfec <__assert_fail@plt+0x1a88c>
   2b8d8:	b	2c004 <__assert_fail@plt+0x1a8a4>
   2b8dc:	and	r0, r6, r7
   2b8e0:	cmn	r0, #1
   2b8e4:	beq	2b920 <__assert_fail@plt+0x1a1c0>
   2b8e8:	mov	r0, #0
   2b8ec:	mov	r1, #-2147483648	; 0x80000000
   2b8f0:	mov	r2, r6
   2b8f4:	mov	r3, r7
   2b8f8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b8fc:	ldr	r2, [sp, #24]
   2b900:	ldr	r3, [sp, #28]
   2b904:	mov	r4, #1
   2b908:	mov	r9, #-2147483648	; 0x80000000
   2b90c:	subs	r0, r0, r2
   2b910:	sbcs	r0, r1, r3
   2b914:	mov	r0, #0
   2b918:	str	r0, [sp, #8]
   2b91c:	blt	2c1cc <__assert_fail@plt+0x1aa6c>
   2b920:	umull	r1, r0, r6, r2
   2b924:	mov	r4, #0
   2b928:	mla	r0, r6, r3, r0
   2b92c:	str	r1, [sp, #8]
   2b930:	mla	r9, r7, r2, r0
   2b934:	cmp	r9, #0
   2b938:	blt	2c1cc <__assert_fail@plt+0x1aa6c>
   2b93c:	ldr	r3, [sp, #28]
   2b940:	mvn	r0, #0
   2b944:	mvn	r1, #-2147483648	; 0x80000000
   2b948:	str	r4, [sp]
   2b94c:	mvn	r8, #-2147483648	; 0x80000000
   2b950:	str	r0, [sp, #4]
   2b954:	mvn	r0, #0
   2b958:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2b95c:	ldr	r6, [sp, #8]
   2b960:	ldr	r2, [sp, #24]
   2b964:	ldr	r3, [sp, #28]
   2b968:	mov	r7, #1
   2b96c:	subs	r0, r0, r6
   2b970:	sbcs	r0, r1, r9
   2b974:	bge	2c20c <__assert_fail@plt+0x1aaac>
   2b978:	b	2c228 <__assert_fail@plt+0x1aac8>
   2b97c:	and	r0, r6, r7
   2b980:	cmn	r0, #1
   2b984:	beq	2b9ac <__assert_fail@plt+0x1a24c>
   2b988:	mov	r0, #0
   2b98c:	mov	r1, #-2147483648	; 0x80000000
   2b990:	mov	r2, r6
   2b994:	mov	r3, r7
   2b998:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b99c:	ldr	r3, [sp, #28]
   2b9a0:	subs	r0, r0, #512	; 0x200
   2b9a4:	sbcs	r0, r1, #0
   2b9a8:	blt	2b9ec <__assert_fail@plt+0x1a28c>
   2b9ac:	lsl	r0, r7, #9
   2b9b0:	orr	r7, r0, r6, lsr #23
   2b9b4:	lsl	r6, r6, #9
   2b9b8:	b	2c164 <__assert_fail@plt+0x1aa04>
   2b9bc:	and	r0, r6, r7
   2b9c0:	cmn	r0, #1
   2b9c4:	beq	2ba0c <__assert_fail@plt+0x1a2ac>
   2b9c8:	mov	r0, #0
   2b9cc:	mov	r1, #-2147483648	; 0x80000000
   2b9d0:	mov	r2, r6
   2b9d4:	mov	r3, r7
   2b9d8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2b9dc:	ldr	r3, [sp, #28]
   2b9e0:	subs	r0, r0, #2
   2b9e4:	sbcs	r0, r1, #0
   2b9e8:	bge	2ba0c <__assert_fail@plt+0x1a2ac>
   2b9ec:	mvn	r0, #-2147483648	; 0x80000000
   2b9f0:	cmp	r7, #0
   2b9f4:	mvn	r6, #0
   2b9f8:	mov	r3, #1
   2b9fc:	movlt	r0, #-2147483648	; 0x80000000
   2ba00:	movwlt	r6, #0
   2ba04:	mov	r7, r0
   2ba08:	b	2c164 <__assert_fail@plt+0x1aa04>
   2ba0c:	lsl	r0, r7, #1
   2ba10:	orr	r7, r0, r6, lsr #31
   2ba14:	lsl	r6, r6, #1
   2ba18:	b	2c164 <__assert_fail@plt+0x1aa04>
   2ba1c:	ldr	r6, [sp, #8]
   2ba20:	mov	r0, #0
   2ba24:	mov	r1, #-2147483648	; 0x80000000
   2ba28:	mov	r3, r9
   2ba2c:	str	r4, [sp, #4]
   2ba30:	mov	r2, r6
   2ba34:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2ba38:	ldr	r2, [sp, #24]
   2ba3c:	ldr	r3, [sp, #28]
   2ba40:	mov	r7, #1
   2ba44:	mov	r8, #0
   2ba48:	mov	r4, #-2147483648	; 0x80000000
   2ba4c:	subs	r0, r0, r2
   2ba50:	sbcs	r0, r1, r3
   2ba54:	blt	2baa8 <__assert_fail@plt+0x1a348>
   2ba58:	umull	r8, r0, r6, r2
   2ba5c:	ldr	r7, [sp, #4]
   2ba60:	mla	r0, r6, r3, r0
   2ba64:	mla	r4, r9, r2, r0
   2ba68:	cmp	r4, #0
   2ba6c:	blt	2baa8 <__assert_fail@plt+0x1a348>
   2ba70:	ldr	r3, [sp, #28]
   2ba74:	mvn	r0, #0
   2ba78:	mvn	r1, #-2147483648	; 0x80000000
   2ba7c:	str	r7, [sp, #8]
   2ba80:	mvn	r7, #0
   2ba84:	mvn	r9, #-2147483648	; 0x80000000
   2ba88:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2ba8c:	ldr	r2, [sp, #24]
   2ba90:	ldr	r3, [sp, #28]
   2ba94:	subs	r0, r0, r8
   2ba98:	mov	r6, #1
   2ba9c:	sbcs	r0, r1, r4
   2baa0:	bge	2bae0 <__assert_fail@plt+0x1a380>
   2baa4:	b	2baf8 <__assert_fail@plt+0x1a398>
   2baa8:	mov	r0, #0
   2baac:	mov	r1, #-2147483648	; 0x80000000
   2bab0:	mov	r2, r8
   2bab4:	mov	r3, r4
   2bab8:	str	r7, [sp, #8]
   2babc:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bac0:	ldr	r2, [sp, #24]
   2bac4:	ldr	r3, [sp, #28]
   2bac8:	mov	r6, #1
   2bacc:	mov	r7, #0
   2bad0:	mov	r9, #-2147483648	; 0x80000000
   2bad4:	subs	r0, r0, r2
   2bad8:	sbcs	r0, r1, r3
   2badc:	blt	2bb38 <__assert_fail@plt+0x1a3d8>
   2bae0:	umull	r7, r0, r8, r2
   2bae4:	ldr	r6, [sp, #8]
   2bae8:	mla	r0, r8, r3, r0
   2baec:	mla	r9, r4, r2, r0
   2baf0:	cmp	r9, #0
   2baf4:	blt	2bb38 <__assert_fail@plt+0x1a3d8>
   2baf8:	ldr	r3, [sp, #28]
   2bafc:	mvn	r0, #0
   2bb00:	mvn	r1, #-2147483648	; 0x80000000
   2bb04:	str	r6, [sp, #8]
   2bb08:	mvn	r8, #0
   2bb0c:	mvn	r4, #-2147483648	; 0x80000000
   2bb10:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bb14:	ldr	r2, [sp, #24]
   2bb18:	ldr	r3, [sp, #28]
   2bb1c:	subs	r0, r0, r7
   2bb20:	sbcs	r0, r1, r9
   2bb24:	bge	2bb7c <__assert_fail@plt+0x1a41c>
   2bb28:	mov	r0, #1
   2bb2c:	mov	r6, #0
   2bb30:	str	r0, [sp, #8]
   2bb34:	b	2bb94 <__assert_fail@plt+0x1a434>
   2bb38:	mov	r0, #0
   2bb3c:	mov	r1, #-2147483648	; 0x80000000
   2bb40:	mov	r2, r7
   2bb44:	mov	r3, r9
   2bb48:	str	r6, [sp, #8]
   2bb4c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bb50:	ldr	r2, [sp, #24]
   2bb54:	ldr	r3, [sp, #28]
   2bb58:	subs	r0, r0, r2
   2bb5c:	sbcs	r0, r1, r3
   2bb60:	bge	2bb7c <__assert_fail@plt+0x1a41c>
   2bb64:	mov	r0, #1
   2bb68:	mov	r8, #0
   2bb6c:	mov	r4, #-2147483648	; 0x80000000
   2bb70:	mov	r6, #0
   2bb74:	str	r0, [sp, #8]
   2bb78:	b	2bbcc <__assert_fail@plt+0x1a46c>
   2bb7c:	umull	r8, r0, r7, r2
   2bb80:	mov	r6, #0
   2bb84:	mla	r0, r7, r3, r0
   2bb88:	mla	r4, r9, r2, r0
   2bb8c:	cmp	r4, #0
   2bb90:	blt	2bbcc <__assert_fail@plt+0x1a46c>
   2bb94:	ldr	r3, [sp, #28]
   2bb98:	mvn	r0, #0
   2bb9c:	mvn	r1, #-2147483648	; 0x80000000
   2bba0:	mvn	r9, #0
   2bba4:	mvn	r7, #-2147483648	; 0x80000000
   2bba8:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bbac:	ldr	r2, [sp, #24]
   2bbb0:	ldr	r3, [sp, #28]
   2bbb4:	subs	r0, r0, r8
   2bbb8:	sbcs	r0, r1, r4
   2bbbc:	bge	2bc08 <__assert_fail@plt+0x1a4a8>
   2bbc0:	mov	r0, #1
   2bbc4:	str	r0, [sp, #8]
   2bbc8:	b	2bc1c <__assert_fail@plt+0x1a4bc>
   2bbcc:	mov	r0, #0
   2bbd0:	mov	r1, #-2147483648	; 0x80000000
   2bbd4:	mov	r2, r8
   2bbd8:	mov	r3, r4
   2bbdc:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bbe0:	ldr	r2, [sp, #24]
   2bbe4:	ldr	r3, [sp, #28]
   2bbe8:	subs	r0, r0, r2
   2bbec:	sbcs	r0, r1, r3
   2bbf0:	bge	2bc08 <__assert_fail@plt+0x1a4a8>
   2bbf4:	mov	r0, #1
   2bbf8:	mov	r9, #0
   2bbfc:	mov	r7, #-2147483648	; 0x80000000
   2bc00:	str	r0, [sp, #8]
   2bc04:	b	2bc58 <__assert_fail@plt+0x1a4f8>
   2bc08:	umull	r9, r0, r8, r2
   2bc0c:	mla	r0, r8, r3, r0
   2bc10:	mla	r7, r4, r2, r0
   2bc14:	cmp	r7, #0
   2bc18:	blt	2bc58 <__assert_fail@plt+0x1a4f8>
   2bc1c:	ldr	r3, [sp, #28]
   2bc20:	mvn	r0, #0
   2bc24:	mvn	r1, #-2147483648	; 0x80000000
   2bc28:	mvn	r8, #0
   2bc2c:	mvn	r4, #-2147483648	; 0x80000000
   2bc30:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bc34:	ldr	r2, [sp, #24]
   2bc38:	ldr	r3, [sp, #28]
   2bc3c:	subs	r0, r0, r9
   2bc40:	sbcs	r0, r1, r7
   2bc44:	bge	2bc98 <__assert_fail@plt+0x1a538>
   2bc48:	ldr	r9, [sp, #12]
   2bc4c:	mov	r0, #1
   2bc50:	str	r0, [sp, #8]
   2bc54:	b	2bcb0 <__assert_fail@plt+0x1a550>
   2bc58:	mov	r0, #0
   2bc5c:	mov	r1, #-2147483648	; 0x80000000
   2bc60:	mov	r2, r9
   2bc64:	mov	r3, r7
   2bc68:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bc6c:	ldr	r2, [sp, #24]
   2bc70:	ldr	r3, [sp, #28]
   2bc74:	subs	r0, r0, r2
   2bc78:	sbcs	r0, r1, r3
   2bc7c:	bge	2bc98 <__assert_fail@plt+0x1a538>
   2bc80:	ldr	r9, [sp, #12]
   2bc84:	mov	r0, #1
   2bc88:	mov	r8, #0
   2bc8c:	mov	r4, #-2147483648	; 0x80000000
   2bc90:	str	r0, [sp, #8]
   2bc94:	b	2bd00 <__assert_fail@plt+0x1a5a0>
   2bc98:	umull	r8, r0, r9, r2
   2bc9c:	mla	r0, r9, r3, r0
   2bca0:	ldr	r9, [sp, #12]
   2bca4:	mla	r4, r7, r2, r0
   2bca8:	cmp	r4, #0
   2bcac:	blt	2bd00 <__assert_fail@plt+0x1a5a0>
   2bcb0:	ldr	r3, [sp, #28]
   2bcb4:	mvn	r0, #0
   2bcb8:	mvn	r1, #-2147483648	; 0x80000000
   2bcbc:	mvn	r6, #0
   2bcc0:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bcc4:	ldr	r7, [sp, #24]
   2bcc8:	ldr	r3, [sp, #28]
   2bccc:	subs	r0, r0, r8
   2bcd0:	mov	r2, #1
   2bcd4:	sbcs	r0, r1, r4
   2bcd8:	mvn	r0, #-2147483648	; 0x80000000
   2bcdc:	blt	2bcf0 <__assert_fail@plt+0x1a590>
   2bce0:	umull	r6, r0, r8, r7
   2bce4:	mov	r2, #0
   2bce8:	mla	r0, r8, r3, r0
   2bcec:	mla	r0, r4, r7, r0
   2bcf0:	ldr	r1, [sp, #8]
   2bcf4:	mov	r7, r0
   2bcf8:	orr	r3, r2, r1
   2bcfc:	b	2c164 <__assert_fail@plt+0x1aa04>
   2bd00:	mov	r0, #0
   2bd04:	mov	r1, #-2147483648	; 0x80000000
   2bd08:	mov	r2, r8
   2bd0c:	mov	r3, r4
   2bd10:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bd14:	ldr	r7, [sp, #24]
   2bd18:	ldr	r3, [sp, #28]
   2bd1c:	mov	r2, #1
   2bd20:	subs	r0, r0, r7
   2bd24:	sbcs	r0, r1, r3
   2bd28:	mov	r0, #-2147483648	; 0x80000000
   2bd2c:	bge	2bce0 <__assert_fail@plt+0x1a580>
   2bd30:	b	2bcf0 <__assert_fail@plt+0x1a590>
   2bd34:	ldr	r6, [sp, #8]
   2bd38:	mov	r0, #0
   2bd3c:	mov	r1, #-2147483648	; 0x80000000
   2bd40:	mov	r3, r9
   2bd44:	str	r4, [sp, #4]
   2bd48:	mov	r2, r6
   2bd4c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bd50:	ldr	r2, [sp, #24]
   2bd54:	ldr	r3, [sp, #28]
   2bd58:	mov	r7, #1
   2bd5c:	mov	r8, #0
   2bd60:	mov	r4, #-2147483648	; 0x80000000
   2bd64:	subs	r0, r0, r2
   2bd68:	sbcs	r0, r1, r3
   2bd6c:	blt	2bdc4 <__assert_fail@plt+0x1a664>
   2bd70:	umull	r8, r0, r6, r2
   2bd74:	ldr	r7, [sp, #4]
   2bd78:	mla	r0, r6, r3, r0
   2bd7c:	mla	r4, r9, r2, r0
   2bd80:	cmp	r4, #0
   2bd84:	blt	2bdc4 <__assert_fail@plt+0x1a664>
   2bd88:	ldr	r3, [sp, #28]
   2bd8c:	mvn	r0, #0
   2bd90:	mvn	r1, #-2147483648	; 0x80000000
   2bd94:	str	r7, [sp, #4]
   2bd98:	mvn	r7, #0
   2bd9c:	mvn	r9, #-2147483648	; 0x80000000
   2bda0:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bda4:	ldr	r2, [sp, #24]
   2bda8:	ldr	r3, [sp, #28]
   2bdac:	subs	r0, r0, r8
   2bdb0:	mov	r6, #1
   2bdb4:	sbcs	r0, r1, r4
   2bdb8:	str	r6, [sp, #8]
   2bdbc:	bge	2be00 <__assert_fail@plt+0x1a6a0>
   2bdc0:	b	2be1c <__assert_fail@plt+0x1a6bc>
   2bdc4:	mov	r0, #0
   2bdc8:	mov	r1, #-2147483648	; 0x80000000
   2bdcc:	mov	r2, r8
   2bdd0:	mov	r3, r4
   2bdd4:	str	r7, [sp, #4]
   2bdd8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bddc:	ldr	r2, [sp, #24]
   2bde0:	ldr	r3, [sp, #28]
   2bde4:	mov	r7, #1
   2bde8:	mov	r9, #-2147483648	; 0x80000000
   2bdec:	str	r7, [sp, #8]
   2bdf0:	mov	r7, #0
   2bdf4:	subs	r0, r0, r2
   2bdf8:	sbcs	r0, r1, r3
   2bdfc:	blt	2be54 <__assert_fail@plt+0x1a6f4>
   2be00:	umull	r7, r0, r8, r2
   2be04:	mla	r0, r8, r3, r0
   2be08:	mla	r9, r4, r2, r0
   2be0c:	ldr	r0, [sp, #4]
   2be10:	cmp	r9, #0
   2be14:	str	r0, [sp, #8]
   2be18:	blt	2be54 <__assert_fail@plt+0x1a6f4>
   2be1c:	ldr	r3, [sp, #28]
   2be20:	mvn	r0, #0
   2be24:	mvn	r1, #-2147483648	; 0x80000000
   2be28:	mvn	r4, #0
   2be2c:	mvn	r8, #-2147483648	; 0x80000000
   2be30:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2be34:	ldr	r2, [sp, #24]
   2be38:	ldr	r3, [sp, #28]
   2be3c:	subs	r0, r0, r7
   2be40:	sbcs	r0, r1, r9
   2be44:	bge	2be90 <__assert_fail@plt+0x1a730>
   2be48:	mov	r0, #1
   2be4c:	str	r0, [sp, #8]
   2be50:	b	2bea4 <__assert_fail@plt+0x1a744>
   2be54:	mov	r0, #0
   2be58:	mov	r1, #-2147483648	; 0x80000000
   2be5c:	mov	r2, r7
   2be60:	mov	r3, r9
   2be64:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2be68:	ldr	r2, [sp, #24]
   2be6c:	ldr	r3, [sp, #28]
   2be70:	subs	r0, r0, r2
   2be74:	sbcs	r0, r1, r3
   2be78:	bge	2be90 <__assert_fail@plt+0x1a730>
   2be7c:	mov	r0, #1
   2be80:	mov	r4, #0
   2be84:	mov	r8, #-2147483648	; 0x80000000
   2be88:	str	r0, [sp, #8]
   2be8c:	b	2bed8 <__assert_fail@plt+0x1a778>
   2be90:	umull	r4, r0, r7, r2
   2be94:	mla	r0, r7, r3, r0
   2be98:	mla	r8, r9, r2, r0
   2be9c:	cmp	r8, #0
   2bea0:	blt	2bed8 <__assert_fail@plt+0x1a778>
   2bea4:	ldr	r3, [sp, #28]
   2bea8:	mvn	r0, #0
   2beac:	mvn	r1, #-2147483648	; 0x80000000
   2beb0:	mvn	r6, #0
   2beb4:	mvn	r9, #-2147483648	; 0x80000000
   2beb8:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bebc:	ldr	r2, [sp, #24]
   2bec0:	ldr	r3, [sp, #28]
   2bec4:	subs	r0, r0, r4
   2bec8:	sbcs	r0, r1, r8
   2becc:	bge	2bf10 <__assert_fail@plt+0x1a7b0>
   2bed0:	mov	r8, #1
   2bed4:	b	2bf28 <__assert_fail@plt+0x1a7c8>
   2bed8:	mov	r0, #0
   2bedc:	mov	r1, #-2147483648	; 0x80000000
   2bee0:	mov	r2, r4
   2bee4:	mov	r3, r8
   2bee8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2beec:	ldr	r2, [sp, #24]
   2bef0:	ldr	r3, [sp, #28]
   2bef4:	subs	r0, r0, r2
   2bef8:	sbcs	r0, r1, r3
   2befc:	bge	2bf10 <__assert_fail@plt+0x1a7b0>
   2bf00:	mov	r8, #1
   2bf04:	mov	r6, #0
   2bf08:	mov	r9, #-2147483648	; 0x80000000
   2bf0c:	b	2bf78 <__assert_fail@plt+0x1a818>
   2bf10:	umull	r6, r0, r4, r2
   2bf14:	mla	r0, r4, r3, r0
   2bf18:	mla	r9, r8, r2, r0
   2bf1c:	ldr	r8, [sp, #8]
   2bf20:	cmp	r9, #0
   2bf24:	blt	2bf78 <__assert_fail@plt+0x1a818>
   2bf28:	ldr	r3, [sp, #28]
   2bf2c:	mvn	r0, #0
   2bf30:	mvn	r1, #-2147483648	; 0x80000000
   2bf34:	mvn	r4, #0
   2bf38:	mvn	r7, #-2147483648	; 0x80000000
   2bf3c:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2bf40:	ldr	r3, [sp, #24]
   2bf44:	ldr	ip, [sp, #28]
   2bf48:	subs	r0, r0, r6
   2bf4c:	mov	r2, #1
   2bf50:	sbcs	r0, r1, r9
   2bf54:	blt	2bf68 <__assert_fail@plt+0x1a808>
   2bf58:	umull	r4, r0, r6, r3
   2bf5c:	mov	r2, #0
   2bf60:	mla	r0, r6, ip, r0
   2bf64:	mla	r7, r9, r3, r0
   2bf68:	ldr	r9, [sp, #12]
   2bf6c:	orr	r3, r2, r8
   2bf70:	mov	r6, r4
   2bf74:	b	2c164 <__assert_fail@plt+0x1aa04>
   2bf78:	mov	r0, #0
   2bf7c:	mov	r1, #-2147483648	; 0x80000000
   2bf80:	mov	r2, r6
   2bf84:	mov	r3, r9
   2bf88:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bf8c:	ldr	r3, [sp, #24]
   2bf90:	ldr	ip, [sp, #28]
   2bf94:	mov	r2, #1
   2bf98:	mov	r4, #0
   2bf9c:	mov	r7, #-2147483648	; 0x80000000
   2bfa0:	subs	r0, r0, r3
   2bfa4:	sbcs	r0, r1, ip
   2bfa8:	bge	2bf58 <__assert_fail@plt+0x1a7f8>
   2bfac:	b	2bf68 <__assert_fail@plt+0x1a808>
   2bfb0:	ldr	r6, [sp, #8]
   2bfb4:	mov	r0, #0
   2bfb8:	mov	r1, #-2147483648	; 0x80000000
   2bfbc:	mov	r3, r8
   2bfc0:	str	r4, [sp, #4]
   2bfc4:	mov	r2, r6
   2bfc8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2bfcc:	ldr	r2, [sp, #24]
   2bfd0:	ldr	r3, [sp, #28]
   2bfd4:	mov	r7, #1
   2bfd8:	mov	r9, #0
   2bfdc:	mov	r4, #-2147483648	; 0x80000000
   2bfe0:	subs	r0, r0, r2
   2bfe4:	sbcs	r0, r1, r3
   2bfe8:	blt	2c040 <__assert_fail@plt+0x1a8e0>
   2bfec:	umull	r9, r0, r6, r2
   2bff0:	ldr	r7, [sp, #4]
   2bff4:	mla	r0, r6, r3, r0
   2bff8:	mla	r4, r8, r2, r0
   2bffc:	cmp	r4, #0
   2c000:	blt	2c040 <__assert_fail@plt+0x1a8e0>
   2c004:	ldr	r3, [sp, #28]
   2c008:	mvn	r0, #0
   2c00c:	mvn	r1, #-2147483648	; 0x80000000
   2c010:	str	r7, [sp, #4]
   2c014:	mvn	r8, #0
   2c018:	mvn	r7, #-2147483648	; 0x80000000
   2c01c:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c020:	ldr	r2, [sp, #24]
   2c024:	ldr	r3, [sp, #28]
   2c028:	subs	r0, r0, r9
   2c02c:	mov	r6, #1
   2c030:	sbcs	r0, r1, r4
   2c034:	str	r6, [sp, #8]
   2c038:	bge	2c07c <__assert_fail@plt+0x1a91c>
   2c03c:	b	2c098 <__assert_fail@plt+0x1a938>
   2c040:	mov	r0, #0
   2c044:	mov	r1, #-2147483648	; 0x80000000
   2c048:	mov	r2, r9
   2c04c:	mov	r3, r4
   2c050:	str	r7, [sp, #4]
   2c054:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c058:	ldr	r2, [sp, #24]
   2c05c:	ldr	r3, [sp, #28]
   2c060:	mov	r7, #1
   2c064:	mov	r8, #0
   2c068:	str	r7, [sp, #8]
   2c06c:	mov	r7, #-2147483648	; 0x80000000
   2c070:	subs	r0, r0, r2
   2c074:	sbcs	r0, r1, r3
   2c078:	blt	2c0cc <__assert_fail@plt+0x1a96c>
   2c07c:	umull	r8, r0, r9, r2
   2c080:	mla	r0, r9, r3, r0
   2c084:	mla	r7, r4, r2, r0
   2c088:	ldr	r0, [sp, #4]
   2c08c:	cmp	r7, #0
   2c090:	str	r0, [sp, #8]
   2c094:	blt	2c0cc <__assert_fail@plt+0x1a96c>
   2c098:	ldr	r3, [sp, #28]
   2c09c:	mvn	r0, #0
   2c0a0:	mvn	r1, #-2147483648	; 0x80000000
   2c0a4:	mvn	r4, #0
   2c0a8:	mvn	r9, #-2147483648	; 0x80000000
   2c0ac:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c0b0:	ldr	r2, [sp, #24]
   2c0b4:	ldr	r3, [sp, #28]
   2c0b8:	subs	r0, r0, r8
   2c0bc:	sbcs	r0, r1, r7
   2c0c0:	bge	2c104 <__assert_fail@plt+0x1a9a4>
   2c0c4:	mov	r8, #1
   2c0c8:	b	2c11c <__assert_fail@plt+0x1a9bc>
   2c0cc:	mov	r0, #0
   2c0d0:	mov	r1, #-2147483648	; 0x80000000
   2c0d4:	mov	r2, r8
   2c0d8:	mov	r3, r7
   2c0dc:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c0e0:	ldr	r2, [sp, #24]
   2c0e4:	ldr	r3, [sp, #28]
   2c0e8:	subs	r0, r0, r2
   2c0ec:	sbcs	r0, r1, r3
   2c0f0:	bge	2c104 <__assert_fail@plt+0x1a9a4>
   2c0f4:	mov	r8, #1
   2c0f8:	mov	r4, #0
   2c0fc:	mov	r9, #-2147483648	; 0x80000000
   2c100:	b	2c194 <__assert_fail@plt+0x1aa34>
   2c104:	umull	r4, r0, r8, r2
   2c108:	mla	r0, r8, r3, r0
   2c10c:	ldr	r8, [sp, #8]
   2c110:	mla	r9, r7, r2, r0
   2c114:	cmp	r9, #0
   2c118:	blt	2c194 <__assert_fail@plt+0x1aa34>
   2c11c:	ldr	r3, [sp, #28]
   2c120:	mvn	r0, #0
   2c124:	mvn	r1, #-2147483648	; 0x80000000
   2c128:	mvn	r6, #0
   2c12c:	mvn	r7, #-2147483648	; 0x80000000
   2c130:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c134:	ldr	r3, [sp, #24]
   2c138:	ldr	ip, [sp, #28]
   2c13c:	subs	r0, r0, r4
   2c140:	mov	r2, #1
   2c144:	sbcs	r0, r1, r9
   2c148:	blt	2c15c <__assert_fail@plt+0x1a9fc>
   2c14c:	umull	r6, r0, r4, r3
   2c150:	mov	r2, #0
   2c154:	mla	r0, r4, ip, r0
   2c158:	mla	r7, r9, r3, r0
   2c15c:	ldr	r9, [sp, #12]
   2c160:	orr	r3, r2, r8
   2c164:	ldr	r1, [sp, #20]
   2c168:	ldr	r2, [sp, #16]
   2c16c:	orr	r5, r3, r5
   2c170:	add	r0, r1, r2
   2c174:	str	r0, [sl]
   2c178:	ldrb	r0, [r1, r2]
   2c17c:	cmp	r0, #0
   2c180:	orrne	r5, r5, #2
   2c184:	strd	r6, [r9]
   2c188:	mov	r0, r5
   2c18c:	sub	sp, fp, #28
   2c190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c194:	mov	r0, #0
   2c198:	mov	r1, #-2147483648	; 0x80000000
   2c19c:	mov	r2, r4
   2c1a0:	mov	r3, r9
   2c1a4:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c1a8:	ldr	r3, [sp, #24]
   2c1ac:	ldr	ip, [sp, #28]
   2c1b0:	mov	r2, #1
   2c1b4:	mov	r6, #0
   2c1b8:	mov	r7, #-2147483648	; 0x80000000
   2c1bc:	subs	r0, r0, r3
   2c1c0:	sbcs	r0, r1, ip
   2c1c4:	bge	2c14c <__assert_fail@plt+0x1a9ec>
   2c1c8:	b	2c15c <__assert_fail@plt+0x1a9fc>
   2c1cc:	ldr	r6, [sp, #8]
   2c1d0:	mov	r0, #0
   2c1d4:	mov	r1, #-2147483648	; 0x80000000
   2c1d8:	mov	r3, r9
   2c1dc:	str	r4, [sp]
   2c1e0:	mov	r2, r6
   2c1e4:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c1e8:	ldr	r2, [sp, #24]
   2c1ec:	ldr	r3, [sp, #28]
   2c1f0:	mov	r7, #1
   2c1f4:	mov	r8, #-2147483648	; 0x80000000
   2c1f8:	subs	r0, r0, r2
   2c1fc:	sbcs	r0, r1, r3
   2c200:	mov	r0, #0
   2c204:	str	r0, [sp, #4]
   2c208:	blt	2c268 <__assert_fail@plt+0x1ab08>
   2c20c:	umull	r1, r0, r6, r2
   2c210:	ldr	r7, [sp]
   2c214:	mla	r0, r6, r3, r0
   2c218:	str	r1, [sp, #4]
   2c21c:	mla	r8, r9, r2, r0
   2c220:	cmp	r8, #0
   2c224:	blt	2c268 <__assert_fail@plt+0x1ab08>
   2c228:	ldr	r3, [sp, #28]
   2c22c:	mvn	r0, #0
   2c230:	mvn	r1, #-2147483648	; 0x80000000
   2c234:	str	r7, [sp]
   2c238:	mvn	r7, #0
   2c23c:	mvn	r4, #-2147483648	; 0x80000000
   2c240:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c244:	mov	r6, #1
   2c248:	ldr	r2, [sp, #24]
   2c24c:	ldr	r3, [sp, #28]
   2c250:	str	r6, [sp, #8]
   2c254:	ldr	r6, [sp, #4]
   2c258:	subs	r0, r0, r6
   2c25c:	sbcs	r0, r1, r8
   2c260:	bge	2c2a8 <__assert_fail@plt+0x1ab48>
   2c264:	b	2c2c4 <__assert_fail@plt+0x1ab64>
   2c268:	ldr	r6, [sp, #4]
   2c26c:	mov	r0, #0
   2c270:	mov	r1, #-2147483648	; 0x80000000
   2c274:	mov	r3, r8
   2c278:	str	r7, [sp]
   2c27c:	mov	r2, r6
   2c280:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c284:	ldr	r2, [sp, #24]
   2c288:	ldr	r3, [sp, #28]
   2c28c:	mov	r7, #1
   2c290:	mov	r4, #-2147483648	; 0x80000000
   2c294:	str	r7, [sp, #8]
   2c298:	mov	r7, #0
   2c29c:	subs	r0, r0, r2
   2c2a0:	sbcs	r0, r1, r3
   2c2a4:	blt	2c2fc <__assert_fail@plt+0x1ab9c>
   2c2a8:	umull	r7, r0, r6, r2
   2c2ac:	mla	r0, r6, r3, r0
   2c2b0:	mla	r4, r8, r2, r0
   2c2b4:	ldr	r0, [sp]
   2c2b8:	cmp	r4, #0
   2c2bc:	str	r0, [sp, #8]
   2c2c0:	blt	2c2fc <__assert_fail@plt+0x1ab9c>
   2c2c4:	ldr	r3, [sp, #28]
   2c2c8:	mvn	r0, #0
   2c2cc:	mvn	r1, #-2147483648	; 0x80000000
   2c2d0:	mvn	r9, #0
   2c2d4:	mvn	r8, #-2147483648	; 0x80000000
   2c2d8:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c2dc:	ldr	r2, [sp, #24]
   2c2e0:	ldr	r3, [sp, #28]
   2c2e4:	subs	r0, r0, r7
   2c2e8:	sbcs	r0, r1, r4
   2c2ec:	bge	2c338 <__assert_fail@plt+0x1abd8>
   2c2f0:	mov	r0, #1
   2c2f4:	str	r0, [sp, #8]
   2c2f8:	b	2c34c <__assert_fail@plt+0x1abec>
   2c2fc:	mov	r0, #0
   2c300:	mov	r1, #-2147483648	; 0x80000000
   2c304:	mov	r2, r7
   2c308:	mov	r3, r4
   2c30c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c310:	ldr	r2, [sp, #24]
   2c314:	ldr	r3, [sp, #28]
   2c318:	subs	r0, r0, r2
   2c31c:	sbcs	r0, r1, r3
   2c320:	bge	2c338 <__assert_fail@plt+0x1abd8>
   2c324:	mov	r0, #1
   2c328:	mov	r9, #0
   2c32c:	mov	r8, #-2147483648	; 0x80000000
   2c330:	str	r0, [sp, #8]
   2c334:	b	2c384 <__assert_fail@plt+0x1ac24>
   2c338:	umull	r9, r0, r7, r2
   2c33c:	mla	r0, r7, r3, r0
   2c340:	mla	r8, r4, r2, r0
   2c344:	cmp	r8, #0
   2c348:	blt	2c384 <__assert_fail@plt+0x1ac24>
   2c34c:	ldr	r3, [sp, #28]
   2c350:	mvn	r0, #0
   2c354:	mvn	r1, #-2147483648	; 0x80000000
   2c358:	mvn	r4, #0
   2c35c:	mvn	r7, #-2147483648	; 0x80000000
   2c360:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c364:	ldr	r2, [sp, #24]
   2c368:	ldr	r3, [sp, #28]
   2c36c:	subs	r0, r0, r9
   2c370:	sbcs	r0, r1, r8
   2c374:	bge	2c3c0 <__assert_fail@plt+0x1ac60>
   2c378:	mov	r0, #1
   2c37c:	str	r0, [sp, #8]
   2c380:	b	2c3d4 <__assert_fail@plt+0x1ac74>
   2c384:	mov	r0, #0
   2c388:	mov	r1, #-2147483648	; 0x80000000
   2c38c:	mov	r2, r9
   2c390:	mov	r3, r8
   2c394:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c398:	ldr	r2, [sp, #24]
   2c39c:	ldr	r3, [sp, #28]
   2c3a0:	subs	r0, r0, r2
   2c3a4:	sbcs	r0, r1, r3
   2c3a8:	bge	2c3c0 <__assert_fail@plt+0x1ac60>
   2c3ac:	mov	r0, #1
   2c3b0:	mov	r4, #0
   2c3b4:	mov	r7, #-2147483648	; 0x80000000
   2c3b8:	str	r0, [sp, #8]
   2c3bc:	b	2c40c <__assert_fail@plt+0x1acac>
   2c3c0:	umull	r4, r0, r9, r2
   2c3c4:	mla	r0, r9, r3, r0
   2c3c8:	mla	r7, r8, r2, r0
   2c3cc:	cmp	r7, #0
   2c3d0:	blt	2c40c <__assert_fail@plt+0x1acac>
   2c3d4:	ldr	r3, [sp, #28]
   2c3d8:	mvn	r0, #0
   2c3dc:	mvn	r1, #-2147483648	; 0x80000000
   2c3e0:	mvn	r8, #0
   2c3e4:	mvn	r9, #-2147483648	; 0x80000000
   2c3e8:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c3ec:	ldr	r2, [sp, #24]
   2c3f0:	ldr	r3, [sp, #28]
   2c3f4:	subs	r0, r0, r4
   2c3f8:	sbcs	r0, r1, r7
   2c3fc:	bge	2c448 <__assert_fail@plt+0x1ace8>
   2c400:	mov	r0, #1
   2c404:	str	r0, [sp, #8]
   2c408:	b	2c45c <__assert_fail@plt+0x1acfc>
   2c40c:	mov	r0, #0
   2c410:	mov	r1, #-2147483648	; 0x80000000
   2c414:	mov	r2, r4
   2c418:	mov	r3, r7
   2c41c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c420:	ldr	r2, [sp, #24]
   2c424:	ldr	r3, [sp, #28]
   2c428:	subs	r0, r0, r2
   2c42c:	sbcs	r0, r1, r3
   2c430:	bge	2c448 <__assert_fail@plt+0x1ace8>
   2c434:	mov	r0, #1
   2c438:	mov	r8, #0
   2c43c:	mov	r9, #-2147483648	; 0x80000000
   2c440:	str	r0, [sp, #8]
   2c444:	b	2c498 <__assert_fail@plt+0x1ad38>
   2c448:	umull	r8, r0, r4, r2
   2c44c:	mla	r0, r4, r3, r0
   2c450:	mla	r9, r7, r2, r0
   2c454:	cmp	r9, #0
   2c458:	blt	2c498 <__assert_fail@plt+0x1ad38>
   2c45c:	ldr	r3, [sp, #28]
   2c460:	mvn	r0, #0
   2c464:	mvn	r1, #-2147483648	; 0x80000000
   2c468:	mvn	r4, #0
   2c46c:	mvn	r6, #-2147483648	; 0x80000000
   2c470:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c474:	ldr	r2, [sp, #24]
   2c478:	ldr	r3, [sp, #28]
   2c47c:	subs	r0, r0, r8
   2c480:	sbcs	r0, r1, r9
   2c484:	bge	2c4d8 <__assert_fail@plt+0x1ad78>
   2c488:	ldr	r9, [sp, #12]
   2c48c:	mov	r0, #1
   2c490:	str	r0, [sp, #8]
   2c494:	b	2c4f0 <__assert_fail@plt+0x1ad90>
   2c498:	mov	r0, #0
   2c49c:	mov	r1, #-2147483648	; 0x80000000
   2c4a0:	mov	r2, r8
   2c4a4:	mov	r3, r9
   2c4a8:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c4ac:	ldr	r2, [sp, #24]
   2c4b0:	ldr	r3, [sp, #28]
   2c4b4:	subs	r0, r0, r2
   2c4b8:	sbcs	r0, r1, r3
   2c4bc:	bge	2c4d8 <__assert_fail@plt+0x1ad78>
   2c4c0:	ldr	r9, [sp, #12]
   2c4c4:	mov	r0, #1
   2c4c8:	mov	r4, #0
   2c4cc:	mov	r6, #-2147483648	; 0x80000000
   2c4d0:	str	r0, [sp, #8]
   2c4d4:	b	2c53c <__assert_fail@plt+0x1addc>
   2c4d8:	umull	r4, r0, r8, r2
   2c4dc:	mla	r0, r8, r3, r0
   2c4e0:	mla	r6, r9, r2, r0
   2c4e4:	ldr	r9, [sp, #12]
   2c4e8:	cmp	r6, #0
   2c4ec:	blt	2c53c <__assert_fail@plt+0x1addc>
   2c4f0:	ldr	r3, [sp, #28]
   2c4f4:	mvn	r0, #0
   2c4f8:	mvn	r1, #-2147483648	; 0x80000000
   2c4fc:	mov	r8, r6
   2c500:	mvn	r6, #0
   2c504:	mvn	r7, #-2147483648	; 0x80000000
   2c508:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c50c:	ldr	r3, [sp, #24]
   2c510:	ldr	ip, [sp, #28]
   2c514:	subs	r0, r0, r4
   2c518:	mov	r2, #1
   2c51c:	sbcs	r0, r1, r8
   2c520:	blt	2c534 <__assert_fail@plt+0x1add4>
   2c524:	umull	r6, r0, r4, r3
   2c528:	mov	r2, #0
   2c52c:	mla	r0, r4, ip, r0
   2c530:	mla	r7, r8, r3, r0
   2c534:	ldr	r0, [sp, #8]
   2c538:	b	2b680 <__assert_fail@plt+0x19f20>
   2c53c:	mov	r0, #0
   2c540:	mov	r1, #-2147483648	; 0x80000000
   2c544:	mov	r2, r4
   2c548:	mov	r3, r6
   2c54c:	bl	2d824 <__assert_fail@plt+0x1c0c4>
   2c550:	ldr	r3, [sp, #24]
   2c554:	ldr	ip, [sp, #28]
   2c558:	mov	r8, r6
   2c55c:	mov	r2, #1
   2c560:	mov	r6, #0
   2c564:	mov	r7, #-2147483648	; 0x80000000
   2c568:	subs	r0, r0, r3
   2c56c:	sbcs	r0, r1, ip
   2c570:	bge	2c524 <__assert_fail@plt+0x1adc4>
   2c574:	b	2c534 <__assert_fail@plt+0x1add4>
   2c578:	movw	r0, #60689	; 0xed11
   2c57c:	movw	r1, #60727	; 0xed37
   2c580:	movw	r3, #60743	; 0xed47
   2c584:	mov	r2, #85	; 0x55
   2c588:	movt	r0, #2
   2c58c:	movt	r1, #2
   2c590:	movt	r3, #2
   2c594:	bl	11760 <__assert_fail@plt>
   2c598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c59c:	add	fp, sp, #28
   2c5a0:	sub	sp, sp, #44	; 0x2c
   2c5a4:	cmp	r2, #37	; 0x25
   2c5a8:	bcs	2d22c <__assert_fail@plt+0x1bacc>
   2c5ac:	ldr	sl, [fp, #8]
   2c5b0:	mov	r6, r2
   2c5b4:	mov	r7, r1
   2c5b8:	mov	r4, r0
   2c5bc:	str	r3, [sp, #36]	; 0x24
   2c5c0:	bl	11640 <__errno_location@plt>
   2c5c4:	mov	r5, r0
   2c5c8:	mov	r0, #0
   2c5cc:	str	r0, [r5]
   2c5d0:	bl	11610 <__ctype_b_loc@plt>
   2c5d4:	ldr	r1, [r0]
   2c5d8:	mov	r2, r4
   2c5dc:	ldrb	r0, [r2], #1
   2c5e0:	add	r3, r1, r0, lsl #1
   2c5e4:	ldrb	r3, [r3, #1]
   2c5e8:	tst	r3, #32
   2c5ec:	bne	2c5dc <__assert_fail@plt+0x1ae7c>
   2c5f0:	sub	r9, fp, #32
   2c5f4:	cmp	r7, #0
   2c5f8:	mov	r8, #4
   2c5fc:	movne	r9, r7
   2c600:	cmp	r0, #45	; 0x2d
   2c604:	beq	2c9c4 <__assert_fail@plt+0x1b264>
   2c608:	mov	r0, r4
   2c60c:	mov	r1, r9
   2c610:	mov	r2, r6
   2c614:	mov	r3, #0
   2c618:	bl	1149c <__strtoull_internal@plt>
   2c61c:	mov	r7, r1
   2c620:	ldr	r1, [r9]
   2c624:	cmp	r1, r4
   2c628:	beq	2c660 <__assert_fail@plt+0x1af00>
   2c62c:	mov	r6, r0
   2c630:	ldr	r0, [r5]
   2c634:	cmp	r0, #0
   2c638:	beq	2c97c <__assert_fail@plt+0x1b21c>
   2c63c:	cmp	r0, #34	; 0x22
   2c640:	bne	2c9c4 <__assert_fail@plt+0x1b264>
   2c644:	mov	r8, #1
   2c648:	cmp	sl, #0
   2c64c:	beq	2d218 <__assert_fail@plt+0x1bab8>
   2c650:	ldrb	r4, [r1]
   2c654:	cmp	r4, #0
   2c658:	bne	2c6a4 <__assert_fail@plt+0x1af44>
   2c65c:	b	2d218 <__assert_fail@plt+0x1bab8>
   2c660:	cmp	sl, #0
   2c664:	beq	2c9c4 <__assert_fail@plt+0x1b264>
   2c668:	mov	r5, r1
   2c66c:	ldrb	r1, [r4]
   2c670:	cmp	r1, #0
   2c674:	beq	2c9c4 <__assert_fail@plt+0x1b264>
   2c678:	mov	r0, sl
   2c67c:	bl	11634 <strchr@plt>
   2c680:	cmp	r0, #0
   2c684:	beq	2c9c4 <__assert_fail@plt+0x1b264>
   2c688:	mov	r1, r5
   2c68c:	mov	r8, #0
   2c690:	mov	r6, #1
   2c694:	mov	r7, #0
   2c698:	ldrb	r4, [r1]
   2c69c:	cmp	r4, #0
   2c6a0:	beq	2d218 <__assert_fail@plt+0x1bab8>
   2c6a4:	str	r1, [sp, #32]
   2c6a8:	mov	r0, sl
   2c6ac:	mov	r1, r4
   2c6b0:	bl	11634 <strchr@plt>
   2c6b4:	cmp	r0, #0
   2c6b8:	beq	2c9b8 <__assert_fail@plt+0x1b258>
   2c6bc:	sub	r0, r4, #69	; 0x45
   2c6c0:	mov	r1, #1
   2c6c4:	mov	r3, #0
   2c6c8:	mov	r5, #1024	; 0x400
   2c6cc:	cmp	r0, #47	; 0x2f
   2c6d0:	str	r1, [sp, #28]
   2c6d4:	bhi	2c7d8 <__assert_fail@plt+0x1b078>
   2c6d8:	add	r1, pc, #0
   2c6dc:	ldr	pc, [r1, r0, lsl #2]
   2c6e0:	andeq	ip, r2, r0, lsr #15
   2c6e4:	ldrdeq	ip, [r2], -r8
   2c6e8:	andeq	ip, r2, r0, lsr #15
   2c6ec:	ldrdeq	ip, [r2], -r8
   2c6f0:	ldrdeq	ip, [r2], -r8
   2c6f4:	ldrdeq	ip, [r2], -r8
   2c6f8:	andeq	ip, r2, r0, lsr #15
   2c6fc:	ldrdeq	ip, [r2], -r8
   2c700:	andeq	ip, r2, r0, lsr #15
   2c704:	ldrdeq	ip, [r2], -r8
   2c708:	ldrdeq	ip, [r2], -r8
   2c70c:	andeq	ip, r2, r0, lsr #15
   2c710:	ldrdeq	ip, [r2], -r8
   2c714:	ldrdeq	ip, [r2], -r8
   2c718:	ldrdeq	ip, [r2], -r8
   2c71c:	andeq	ip, r2, r0, lsr #15
   2c720:	ldrdeq	ip, [r2], -r8
   2c724:	ldrdeq	ip, [r2], -r8
   2c728:	ldrdeq	ip, [r2], -r8
   2c72c:	ldrdeq	ip, [r2], -r8
   2c730:	andeq	ip, r2, r0, lsr #15
   2c734:	andeq	ip, r2, r0, lsr #15
   2c738:	ldrdeq	ip, [r2], -r8
   2c73c:	ldrdeq	ip, [r2], -r8
   2c740:	ldrdeq	ip, [r2], -r8
   2c744:	ldrdeq	ip, [r2], -r8
   2c748:	ldrdeq	ip, [r2], -r8
   2c74c:	ldrdeq	ip, [r2], -r8
   2c750:	ldrdeq	ip, [r2], -r8
   2c754:	ldrdeq	ip, [r2], -r8
   2c758:	ldrdeq	ip, [r2], -r8
   2c75c:	ldrdeq	ip, [r2], -r8
   2c760:	ldrdeq	ip, [r2], -r8
   2c764:	ldrdeq	ip, [r2], -r8
   2c768:	andeq	ip, r2, r0, lsr #15
   2c76c:	ldrdeq	ip, [r2], -r8
   2c770:	ldrdeq	ip, [r2], -r8
   2c774:	ldrdeq	ip, [r2], -r8
   2c778:	andeq	ip, r2, r0, lsr #15
   2c77c:	ldrdeq	ip, [r2], -r8
   2c780:	andeq	ip, r2, r0, lsr #15
   2c784:	ldrdeq	ip, [r2], -r8
   2c788:	ldrdeq	ip, [r2], -r8
   2c78c:	ldrdeq	ip, [r2], -r8
   2c790:	ldrdeq	ip, [r2], -r8
   2c794:	ldrdeq	ip, [r2], -r8
   2c798:	ldrdeq	ip, [r2], -r8
   2c79c:	andeq	ip, r2, r0, lsr #15
   2c7a0:	mov	r0, sl
   2c7a4:	mov	r1, #48	; 0x30
   2c7a8:	bl	11634 <strchr@plt>
   2c7ac:	cmp	r0, #0
   2c7b0:	beq	2c7d4 <__assert_fail@plt+0x1b074>
   2c7b4:	ldr	r1, [sp, #32]
   2c7b8:	ldrb	r0, [r1, #1]
   2c7bc:	cmp	r0, #66	; 0x42
   2c7c0:	cmpne	r0, #68	; 0x44
   2c7c4:	bne	2c98c <__assert_fail@plt+0x1b22c>
   2c7c8:	mov	r5, #1000	; 0x3e8
   2c7cc:	mov	r0, #2
   2c7d0:	str	r0, [sp, #28]
   2c7d4:	mov	r3, #0
   2c7d8:	sub	r0, r4, #66	; 0x42
   2c7dc:	cmp	r0, #53	; 0x35
   2c7e0:	bhi	2c9b8 <__assert_fail@plt+0x1b258>
   2c7e4:	add	r1, pc, #0
   2c7e8:	ldr	pc, [r1, r0, lsl #2]
   2c7ec:	andeq	ip, r2, r8, lsr #26
   2c7f0:			; <UNDEFINED> instruction: 0x0002c9b8
   2c7f4:			; <UNDEFINED> instruction: 0x0002c9b8
   2c7f8:	andeq	ip, r2, r0, asr sp
   2c7fc:			; <UNDEFINED> instruction: 0x0002c9b8
   2c800:	andeq	ip, r2, r4, asr #17
   2c804:			; <UNDEFINED> instruction: 0x0002c9b8
   2c808:			; <UNDEFINED> instruction: 0x0002c9b8
   2c80c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c810:	ldrdeq	ip, [r2], -r0
   2c814:			; <UNDEFINED> instruction: 0x0002c9b8
   2c818:	andeq	ip, r2, r8, lsl sl
   2c81c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c820:			; <UNDEFINED> instruction: 0x0002c9b8
   2c824:	andeq	ip, r2, r4, lsr #29
   2c828:			; <UNDEFINED> instruction: 0x0002c9b8
   2c82c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c830:			; <UNDEFINED> instruction: 0x0002c9b8
   2c834:	andeq	ip, r2, r4, lsr #21
   2c838:			; <UNDEFINED> instruction: 0x0002c9b8
   2c83c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c840:			; <UNDEFINED> instruction: 0x0002c9b8
   2c844:			; <UNDEFINED> instruction: 0x0002c9b8
   2c848:	andeq	ip, r2, ip, asr #31
   2c84c:	andeq	ip, r2, ip, lsl #23
   2c850:			; <UNDEFINED> instruction: 0x0002c9b8
   2c854:			; <UNDEFINED> instruction: 0x0002c9b8
   2c858:			; <UNDEFINED> instruction: 0x0002c9b8
   2c85c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c860:			; <UNDEFINED> instruction: 0x0002c9b8
   2c864:			; <UNDEFINED> instruction: 0x0002c9b8
   2c868:			; <UNDEFINED> instruction: 0x0002c9b8
   2c86c:	andeq	sp, r2, r0, lsr #3
   2c870:	strdeq	sp, [r2], -r8
   2c874:			; <UNDEFINED> instruction: 0x0002c9b8
   2c878:			; <UNDEFINED> instruction: 0x0002c9b8
   2c87c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c880:	andeq	ip, r2, r4, asr #17
   2c884:			; <UNDEFINED> instruction: 0x0002c9b8
   2c888:			; <UNDEFINED> instruction: 0x0002c9b8
   2c88c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c890:	ldrdeq	ip, [r2], -r0
   2c894:			; <UNDEFINED> instruction: 0x0002c9b8
   2c898:	andeq	ip, r2, r8, lsl sl
   2c89c:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8a0:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8a4:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8a8:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8ac:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8b0:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8b4:	andeq	ip, r2, r4, lsr #21
   2c8b8:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8bc:			; <UNDEFINED> instruction: 0x0002c9b8
   2c8c0:	ldrdeq	sp, [r2], -r4
   2c8c4:	mvn	r0, #0
   2c8c8:	mvn	r1, #0
   2c8cc:	mov	r2, r5
   2c8d0:	mov	sl, r3
   2c8d4:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c8d8:	subs	r3, r0, r6
   2c8dc:	mov	lr, #0
   2c8e0:	umull	r4, r2, r6, r5
   2c8e4:	str	r1, [sp, #20]
   2c8e8:	sbcs	r3, r1, r7
   2c8ec:	mla	ip, r6, sl, r2
   2c8f0:	mov	r2, r1
   2c8f4:	movwcc	lr, #1
   2c8f8:	mla	r7, r7, r5, ip
   2c8fc:	mov	r2, #0
   2c900:	cmp	lr, #0
   2c904:	mvnne	r4, #0
   2c908:	mvnne	r7, #0
   2c90c:	subs	r6, r0, r4
   2c910:	sbcs	r6, r1, r7
   2c914:	movwcc	r2, #1
   2c918:	umull	r3, r6, r4, r5
   2c91c:	cmp	r2, #0
   2c920:	str	r6, [sp, #16]
   2c924:	mvnne	r3, #0
   2c928:	cmp	r2, #0
   2c92c:	umull	r6, ip, r3, r5
   2c930:	mla	r1, r3, sl, ip
   2c934:	ldr	ip, [sp, #16]
   2c938:	str	r1, [sp, #12]
   2c93c:	mla	r4, r4, sl, ip
   2c940:	mla	r4, r7, r5, r4
   2c944:	ldr	r7, [sp, #12]
   2c948:	mvnne	r4, #0
   2c94c:	subs	r0, r0, r3
   2c950:	ldr	r0, [sp, #20]
   2c954:	mla	r7, r4, r5, r7
   2c958:	sbcs	r0, r0, r4
   2c95c:	mov	r0, #0
   2c960:	movwcc	r0, #1
   2c964:	cmp	r0, #0
   2c968:	mov	r1, r0
   2c96c:	orr	r0, lr, r2
   2c970:	mvnne	r7, #0
   2c974:	mvnne	r6, #0
   2c978:	b	2cfc4 <__assert_fail@plt+0x1b864>
   2c97c:	mov	r8, r0
   2c980:	cmp	sl, #0
   2c984:	bne	2c650 <__assert_fail@plt+0x1aef0>
   2c988:	b	2d218 <__assert_fail@plt+0x1bab8>
   2c98c:	cmp	r0, #105	; 0x69
   2c990:	mov	r3, #0
   2c994:	bne	2c7d8 <__assert_fail@plt+0x1b078>
   2c998:	ldrb	r0, [r1, #2]
   2c99c:	mov	r1, #1
   2c9a0:	cmp	r0, #66	; 0x42
   2c9a4:	movweq	r1, #3
   2c9a8:	str	r1, [sp, #28]
   2c9ac:	sub	r0, r4, #66	; 0x42
   2c9b0:	cmp	r0, #53	; 0x35
   2c9b4:	bls	2c7e4 <__assert_fail@plt+0x1b084>
   2c9b8:	ldr	r0, [sp, #36]	; 0x24
   2c9bc:	orr	r8, r8, #2
   2c9c0:	strd	r6, [r0]
   2c9c4:	mov	r0, r8
   2c9c8:	sub	sp, fp, #28
   2c9cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c9d0:	mvn	r0, #0
   2c9d4:	mvn	r1, #0
   2c9d8:	mov	r2, r5
   2c9dc:	mov	r4, r3
   2c9e0:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2c9e4:	subs	r0, r0, r6
   2c9e8:	mov	r2, #0
   2c9ec:	sbcs	r0, r1, r7
   2c9f0:	movwcc	r2, #1
   2c9f4:	umull	r0, r1, r6, r5
   2c9f8:	mla	r1, r6, r4, r1
   2c9fc:	cmp	r2, #0
   2ca00:	mov	r3, r2
   2ca04:	mla	r7, r7, r5, r1
   2ca08:	mvnne	r0, #0
   2ca0c:	mvnne	r7, #0
   2ca10:	mov	r6, r0
   2ca14:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2ca18:	mvn	r0, #0
   2ca1c:	mvn	r1, #0
   2ca20:	mov	r2, r5
   2ca24:	str	r3, [sp, #24]
   2ca28:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2ca2c:	subs	r3, r0, r6
   2ca30:	mov	ip, r0
   2ca34:	umull	r4, r0, r6, r5
   2ca38:	mov	sl, #0
   2ca3c:	sbcs	r3, r1, r7
   2ca40:	str	r0, [sp, #20]
   2ca44:	ldr	r0, [sp, #24]
   2ca48:	mov	r3, #0
   2ca4c:	movwcc	r3, #1
   2ca50:	cmp	r3, #0
   2ca54:	mvnne	r4, #0
   2ca58:	cmp	r3, #0
   2ca5c:	umull	lr, r2, r4, r5
   2ca60:	mla	r2, r4, r0, r2
   2ca64:	str	r2, [sp, #16]
   2ca68:	ldr	r2, [sp, #20]
   2ca6c:	mla	r6, r6, r0, r2
   2ca70:	ldr	r0, [sp, #16]
   2ca74:	mla	r6, r7, r5, r6
   2ca78:	mvnne	r6, #0
   2ca7c:	mla	r7, r6, r5, r0
   2ca80:	subs	r0, ip, r4
   2ca84:	sbcs	r0, r1, r6
   2ca88:	movwcc	sl, #1
   2ca8c:	cmp	sl, #0
   2ca90:	orr	r3, r3, sl
   2ca94:	mvnne	lr, #0
   2ca98:	mvnne	r7, #0
   2ca9c:	mov	r6, lr
   2caa0:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2caa4:	mvn	r0, #0
   2caa8:	mvn	r1, #0
   2caac:	mov	r2, r5
   2cab0:	mov	sl, r3
   2cab4:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2cab8:	subs	r3, r0, r6
   2cabc:	mov	ip, r1
   2cac0:	umull	r2, lr, r6, r5
   2cac4:	str	r0, [sp, #20]
   2cac8:	sbcs	r3, r1, r7
   2cacc:	mov	r1, #0
   2cad0:	mla	r6, r6, sl, lr
   2cad4:	mov	lr, #0
   2cad8:	str	ip, [sp, #16]
   2cadc:	movwcc	r1, #1
   2cae0:	mla	r7, r7, r5, r6
   2cae4:	cmp	r1, #0
   2cae8:	mvnne	r2, #0
   2caec:	cmp	r1, #0
   2caf0:	umull	r3, r4, r2, r5
   2caf4:	mvnne	r7, #0
   2caf8:	mla	r4, r2, sl, r4
   2cafc:	subs	r2, r0, r2
   2cb00:	sbcs	r2, ip, r7
   2cb04:	mla	r4, r7, r5, r4
   2cb08:	movwcc	lr, #1
   2cb0c:	mov	r2, #0
   2cb10:	cmp	lr, #0
   2cb14:	mvnne	r3, #0
   2cb18:	mvnne	r4, #0
   2cb1c:	subs	r7, r0, r3
   2cb20:	mov	r0, r5
   2cb24:	sbcs	r7, ip, r4
   2cb28:	movwcc	r2, #1
   2cb2c:	umull	r5, r7, r3, r5
   2cb30:	cmp	r2, #0
   2cb34:	mla	r3, r3, sl, r7
   2cb38:	mvnne	r5, #0
   2cb3c:	mla	r3, r4, r0, r3
   2cb40:	cmp	r2, #0
   2cb44:	umull	r6, ip, r5, r0
   2cb48:	mvnne	r3, #0
   2cb4c:	mla	ip, r5, sl, ip
   2cb50:	mla	r7, r3, r0, ip
   2cb54:	ldr	r0, [sp, #20]
   2cb58:	subs	r0, r0, r5
   2cb5c:	ldr	r0, [sp, #16]
   2cb60:	sbcs	r0, r0, r3
   2cb64:	mov	r0, #0
   2cb68:	movwcc	r0, #1
   2cb6c:	cmp	r0, #0
   2cb70:	mov	r3, r0
   2cb74:	orr	r0, r1, lr
   2cb78:	orr	r0, r0, r2
   2cb7c:	mvnne	r7, #0
   2cb80:	mvnne	r6, #0
   2cb84:	orr	r3, r0, r3
   2cb88:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2cb8c:	mvn	r0, #0
   2cb90:	mvn	r1, #0
   2cb94:	mov	r2, r5
   2cb98:	mov	r4, r3
   2cb9c:	str	r3, [sp, #24]
   2cba0:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2cba4:	umull	r3, r2, r6, r5
   2cba8:	mla	r2, r6, r4, r2
   2cbac:	subs	r6, r0, r6
   2cbb0:	sbcs	r6, r1, r7
   2cbb4:	mla	r2, r7, r5, r2
   2cbb8:	mov	r7, #0
   2cbbc:	mov	r6, #0
   2cbc0:	movwcc	r6, #1
   2cbc4:	cmp	r6, #0
   2cbc8:	str	r6, [sp, #20]
   2cbcc:	mvnne	r3, #0
   2cbd0:	mvnne	r2, #0
   2cbd4:	subs	r4, r0, r3
   2cbd8:	umull	r6, ip, r3, r5
   2cbdc:	sbcs	r4, r1, r2
   2cbe0:	ldr	r4, [sp, #24]
   2cbe4:	movwcc	r7, #1
   2cbe8:	cmp	r7, #0
   2cbec:	mov	lr, r7
   2cbf0:	str	r7, [sp, #16]
   2cbf4:	mvnne	r6, #0
   2cbf8:	cmp	lr, #0
   2cbfc:	mov	lr, #0
   2cc00:	umull	sl, r7, r6, r5
   2cc04:	mla	r3, r3, r4, ip
   2cc08:	mla	r7, r6, r4, r7
   2cc0c:	mov	r4, r0
   2cc10:	mla	r2, r2, r5, r3
   2cc14:	mvnne	r2, #0
   2cc18:	subs	r3, r0, r6
   2cc1c:	mov	r0, #0
   2cc20:	mla	r7, r2, r5, r7
   2cc24:	sbcs	r2, r1, r2
   2cc28:	mov	r3, r4
   2cc2c:	movwcc	r0, #1
   2cc30:	str	r3, [sp, #4]
   2cc34:	cmp	r0, #0
   2cc38:	str	r0, [sp, #12]
   2cc3c:	mov	r0, r1
   2cc40:	mvnne	sl, #0
   2cc44:	mvnne	r7, #0
   2cc48:	str	r0, [sp, #8]
   2cc4c:	subs	r2, r4, sl
   2cc50:	ldr	r4, [sp, #24]
   2cc54:	sbcs	r2, r1, r7
   2cc58:	movwcc	lr, #1
   2cc5c:	umull	r6, r2, sl, r5
   2cc60:	cmp	lr, #0
   2cc64:	mvnne	r6, #0
   2cc68:	mla	r2, sl, r4, r2
   2cc6c:	cmp	lr, #0
   2cc70:	umull	r1, ip, r6, r5
   2cc74:	mla	r2, r7, r5, r2
   2cc78:	mla	ip, r6, r4, ip
   2cc7c:	mvnne	r2, #0
   2cc80:	subs	r6, r3, r6
   2cc84:	mla	r7, r2, r5, ip
   2cc88:	sbcs	r2, r0, r2
   2cc8c:	mov	ip, #0
   2cc90:	movwcc	ip, #1
   2cc94:	mov	r2, #0
   2cc98:	cmp	ip, #0
   2cc9c:	mvnne	r1, #0
   2cca0:	mvnne	r7, #0
   2cca4:	subs	r6, r3, r1
   2cca8:	ldr	r3, [sp, #24]
   2ccac:	sbcs	r6, r0, r7
   2ccb0:	umull	r0, sl, r1, r5
   2ccb4:	movwcc	r2, #1
   2ccb8:	cmp	r2, #0
   2ccbc:	mvnne	r0, #0
   2ccc0:	mla	r1, r1, r3, sl
   2ccc4:	cmp	r2, #0
   2ccc8:	umull	r6, r4, r0, r5
   2cccc:	mla	r1, r7, r5, r1
   2ccd0:	mla	r4, r0, r3, r4
   2ccd4:	ldr	r3, [sp, #4]
   2ccd8:	mvnne	r1, #0
   2ccdc:	mla	r7, r1, r5, r4
   2cce0:	ldr	r5, [sp, #16]
   2cce4:	subs	r0, r3, r0
   2cce8:	ldr	r0, [sp, #8]
   2ccec:	sbcs	r0, r0, r1
   2ccf0:	mov	r0, #0
   2ccf4:	movwcc	r0, #1
   2ccf8:	cmp	r0, #0
   2ccfc:	mov	r1, r0
   2cd00:	ldr	r0, [sp, #20]
   2cd04:	mvnne	r7, #0
   2cd08:	mvnne	r6, #0
   2cd0c:	orr	r0, r0, r5
   2cd10:	ldr	r5, [sp, #12]
   2cd14:	orr	r0, r0, r5
   2cd18:	orr	r0, r0, lr
   2cd1c:	orr	r0, r0, ip
   2cd20:	orr	r0, r0, r2
   2cd24:	b	2d194 <__assert_fail@plt+0x1ba34>
   2cd28:	mov	r1, #0
   2cd2c:	lsl	r2, r7, #10
   2cd30:	lsl	r0, r6, #10
   2cd34:	lsr	r3, r7, #22
   2cd38:	cmp	r1, r7, lsr #22
   2cd3c:	orr	r2, r2, r6, lsr #22
   2cd40:	mvnne	r0, #0
   2cd44:	movwne	r3, #1
   2cd48:	cmp	r1, r7, lsr #22
   2cd4c:	b	2d1c4 <__assert_fail@plt+0x1ba64>
   2cd50:	mvn	r0, #0
   2cd54:	mvn	r1, #0
   2cd58:	mov	r2, r5
   2cd5c:	mov	sl, r3
   2cd60:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2cd64:	subs	r2, r0, r6
   2cd68:	mov	ip, r0
   2cd6c:	mov	r0, #0
   2cd70:	sbcs	r2, r1, r7
   2cd74:	movwcc	r0, #1
   2cd78:	umull	r4, r2, r6, r5
   2cd7c:	cmp	r0, #0
   2cd80:	mla	r2, r6, sl, r2
   2cd84:	str	r0, [sp, #20]
   2cd88:	mvnne	r4, #0
   2cd8c:	cmp	r0, #0
   2cd90:	mla	r2, r7, r5, r2
   2cd94:	mov	r0, #0
   2cd98:	umull	lr, r3, r4, r5
   2cd9c:	mvnne	r2, #0
   2cda0:	mla	r3, r4, sl, r3
   2cda4:	mla	r6, r2, r5, r3
   2cda8:	subs	r3, ip, r4
   2cdac:	sbcs	r2, r1, r2
   2cdb0:	mov	r3, r1
   2cdb4:	movwcc	r0, #1
   2cdb8:	str	r3, [sp, #8]
   2cdbc:	cmp	r0, #0
   2cdc0:	str	r0, [sp, #16]
   2cdc4:	mov	r0, ip
   2cdc8:	mvnne	lr, #0
   2cdcc:	mvnne	r6, #0
   2cdd0:	str	r0, [sp, #12]
   2cdd4:	subs	r2, ip, lr
   2cdd8:	umull	r7, r4, lr, r5
   2cddc:	sbcs	r2, r1, r6
   2cde0:	mla	r4, lr, sl, r4
   2cde4:	mov	r2, #0
   2cde8:	mla	r6, r6, r5, r4
   2cdec:	mov	r4, #0
   2cdf0:	movwcc	r2, #1
   2cdf4:	cmp	r2, #0
   2cdf8:	mvnne	r7, #0
   2cdfc:	cmp	r2, #0
   2ce00:	umull	r1, ip, r7, r5
   2ce04:	mvnne	r6, #0
   2ce08:	mla	ip, r7, sl, ip
   2ce0c:	subs	r7, r0, r7
   2ce10:	mla	lr, r6, r5, ip
   2ce14:	sbcs	r7, r3, r6
   2ce18:	mov	ip, #0
   2ce1c:	movwcc	ip, #1
   2ce20:	cmp	ip, #0
   2ce24:	mvnne	r1, #0
   2ce28:	mvnne	lr, #0
   2ce2c:	subs	r7, r0, r1
   2ce30:	sbcs	r7, r3, lr
   2ce34:	movwcc	r4, #1
   2ce38:	umull	r0, r7, r1, r5
   2ce3c:	cmp	r4, #0
   2ce40:	mla	r1, r1, sl, r7
   2ce44:	mvnne	r0, #0
   2ce48:	mla	r1, lr, r5, r1
   2ce4c:	cmp	r4, #0
   2ce50:	umull	r6, r3, r0, r5
   2ce54:	mvnne	r1, #0
   2ce58:	mla	r3, r0, sl, r3
   2ce5c:	mla	r7, r1, r5, r3
   2ce60:	ldr	r3, [sp, #12]
   2ce64:	subs	r0, r3, r0
   2ce68:	ldr	r3, [sp, #16]
   2ce6c:	ldr	r0, [sp, #8]
   2ce70:	sbcs	r0, r0, r1
   2ce74:	mov	r0, #0
   2ce78:	movwcc	r0, #1
   2ce7c:	cmp	r0, #0
   2ce80:	mov	r1, r0
   2ce84:	ldr	r0, [sp, #20]
   2ce88:	mvnne	r7, #0
   2ce8c:	mvnne	r6, #0
   2ce90:	orr	r0, r0, r3
   2ce94:	orr	r0, r0, r2
   2ce98:	orr	r0, r0, ip
   2ce9c:	orr	r0, r0, r4
   2cea0:	b	2cfc4 <__assert_fail@plt+0x1b864>
   2cea4:	mvn	r0, #0
   2cea8:	mvn	r1, #0
   2ceac:	mov	r2, r5
   2ceb0:	mov	sl, r3
   2ceb4:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2ceb8:	umull	r3, r2, r6, r5
   2cebc:	mov	lr, r1
   2cec0:	mov	r1, r0
   2cec4:	mla	r2, r6, sl, r2
   2cec8:	subs	r6, r0, r6
   2cecc:	mov	r0, #0
   2ced0:	sbcs	r6, lr, r7
   2ced4:	mla	r2, r7, r5, r2
   2ced8:	movwcc	r0, #1
   2cedc:	cmp	r0, #0
   2cee0:	str	r0, [sp, #20]
   2cee4:	mov	r0, r1
   2cee8:	mvnne	r3, #0
   2ceec:	mvnne	r2, #0
   2cef0:	str	r0, [sp, #16]
   2cef4:	subs	r4, r1, r3
   2cef8:	umull	r7, ip, r3, r5
   2cefc:	sbcs	r4, lr, r2
   2cf00:	mla	r3, r3, sl, ip
   2cf04:	mov	ip, #0
   2cf08:	mov	r4, #0
   2cf0c:	mla	r2, r2, r5, r3
   2cf10:	movwcc	r4, #1
   2cf14:	cmp	r4, #0
   2cf18:	mvnne	r7, #0
   2cf1c:	cmp	r4, #0
   2cf20:	umull	r1, r6, r7, r5
   2cf24:	mvnne	r2, #0
   2cf28:	mla	r6, r7, sl, r6
   2cf2c:	mla	r3, r2, r5, r6
   2cf30:	subs	r6, r0, r7
   2cf34:	sbcs	r2, lr, r2
   2cf38:	movwcc	ip, #1
   2cf3c:	mov	r2, #0
   2cf40:	cmp	ip, #0
   2cf44:	mvnne	r1, #0
   2cf48:	mvnne	r3, #0
   2cf4c:	subs	r6, r0, r1
   2cf50:	sbcs	r6, lr, r3
   2cf54:	movwcc	r2, #1
   2cf58:	umull	r0, r6, r1, r5
   2cf5c:	cmp	r2, #0
   2cf60:	str	r6, [sp, #12]
   2cf64:	mvnne	r0, #0
   2cf68:	cmp	r2, #0
   2cf6c:	umull	r6, r7, r0, r5
   2cf70:	mla	r7, r0, sl, r7
   2cf74:	str	r7, [sp, #8]
   2cf78:	ldr	r7, [sp, #12]
   2cf7c:	mla	r1, r1, sl, r7
   2cf80:	mla	r1, r3, r5, r1
   2cf84:	ldr	r3, [sp, #8]
   2cf88:	mvnne	r1, #0
   2cf8c:	mla	r7, r1, r5, r3
   2cf90:	ldr	r3, [sp, #16]
   2cf94:	subs	r0, r3, r0
   2cf98:	sbcs	r0, lr, r1
   2cf9c:	mov	r0, #0
   2cfa0:	movwcc	r0, #1
   2cfa4:	cmp	r0, #0
   2cfa8:	mov	r1, r0
   2cfac:	ldr	r0, [sp, #20]
   2cfb0:	mvnne	r7, #0
   2cfb4:	mvnne	r6, #0
   2cfb8:	orr	r0, r0, r4
   2cfbc:	orr	r0, r0, ip
   2cfc0:	orr	r0, r0, r2
   2cfc4:	orr	r3, r0, r1
   2cfc8:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2cfcc:	mvn	r0, #0
   2cfd0:	mvn	r1, #0
   2cfd4:	mov	r2, r5
   2cfd8:	mov	sl, r3
   2cfdc:	bl	2d8f8 <__assert_fail@plt+0x1c198>
   2cfe0:	mov	ip, r1
   2cfe4:	subs	r1, r0, r6
   2cfe8:	umull	r3, lr, r6, r5
   2cfec:	mov	r2, r5
   2cff0:	sbcs	r1, ip, r7
   2cff4:	mla	r6, r6, sl, lr
   2cff8:	str	ip, [sp, #4]
   2cffc:	mov	r1, #0
   2d000:	mla	r7, r7, r2, r6
   2d004:	movwcc	r1, #1
   2d008:	cmp	r1, #0
   2d00c:	str	r1, [sp, #20]
   2d010:	mvnne	r3, #0
   2d014:	cmp	r1, #0
   2d018:	mov	r1, r0
   2d01c:	umull	r4, r5, r3, r5
   2d020:	mvnne	r7, #0
   2d024:	mov	lr, r1
   2d028:	mla	r5, r3, sl, r5
   2d02c:	subs	r3, r0, r3
   2d030:	sbcs	r0, ip, r7
   2d034:	mla	r5, r7, r2, r5
   2d038:	mov	r0, #0
   2d03c:	movwcc	r0, #1
   2d040:	cmp	r0, #0
   2d044:	str	r0, [sp, #16]
   2d048:	mvnne	r4, #0
   2d04c:	mvnne	r5, #0
   2d050:	subs	r0, r1, r4
   2d054:	mov	r1, #0
   2d058:	sbcs	r0, ip, r5
   2d05c:	movwcc	r1, #1
   2d060:	umull	r3, r0, r4, r2
   2d064:	cmp	r1, #0
   2d068:	mla	r0, r4, sl, r0
   2d06c:	mov	r4, lr
   2d070:	str	r1, [sp, #12]
   2d074:	mvnne	r3, #0
   2d078:	mla	r0, r5, r2, r0
   2d07c:	cmp	r1, #0
   2d080:	str	r4, [sp]
   2d084:	umull	r7, r6, r3, r2
   2d088:	mvnne	r0, #0
   2d08c:	mla	r6, r3, sl, r6
   2d090:	subs	r3, lr, r3
   2d094:	mla	r5, r0, r2, r6
   2d098:	sbcs	r0, ip, r0
   2d09c:	mov	r3, #0
   2d0a0:	mov	r0, #0
   2d0a4:	movwcc	r0, #1
   2d0a8:	cmp	r0, #0
   2d0ac:	str	r0, [sp, #8]
   2d0b0:	mvnne	r7, #0
   2d0b4:	mvnne	r5, #0
   2d0b8:	subs	r0, lr, r7
   2d0bc:	sbcs	r0, ip, r5
   2d0c0:	movwcc	r3, #1
   2d0c4:	umull	r6, r0, r7, r2
   2d0c8:	cmp	r3, #0
   2d0cc:	mla	r7, r7, sl, r0
   2d0d0:	mov	r0, ip
   2d0d4:	mvnne	r6, #0
   2d0d8:	mla	r7, r5, r2, r7
   2d0dc:	cmp	r3, #0
   2d0e0:	mov	r5, #0
   2d0e4:	umull	r1, lr, r6, r2
   2d0e8:	mvnne	r7, #0
   2d0ec:	mla	lr, r6, sl, lr
   2d0f0:	subs	r6, r4, r6
   2d0f4:	mla	lr, r7, r2, lr
   2d0f8:	sbcs	r7, ip, r7
   2d0fc:	mov	ip, #0
   2d100:	movwcc	ip, #1
   2d104:	cmp	ip, #0
   2d108:	mvnne	r1, #0
   2d10c:	mvnne	lr, #0
   2d110:	subs	r7, r4, r1
   2d114:	sbcs	r7, r0, lr
   2d118:	movwcc	r5, #1
   2d11c:	umull	r0, r7, r1, r2
   2d120:	cmp	r5, #0
   2d124:	mla	r1, r1, sl, r7
   2d128:	mvnne	r0, #0
   2d12c:	mla	r1, lr, r2, r1
   2d130:	cmp	r5, #0
   2d134:	umull	r6, r4, r0, r2
   2d138:	mvnne	r1, #0
   2d13c:	mla	r4, r0, sl, r4
   2d140:	mla	r7, r1, r2, r4
   2d144:	ldr	r2, [sp]
   2d148:	subs	r0, r2, r0
   2d14c:	ldr	r2, [sp, #16]
   2d150:	ldr	r0, [sp, #4]
   2d154:	sbcs	r0, r0, r1
   2d158:	mov	r0, #0
   2d15c:	movwcc	r0, #1
   2d160:	cmp	r0, #0
   2d164:	mov	r1, r0
   2d168:	ldr	r0, [sp, #20]
   2d16c:	mvnne	r7, #0
   2d170:	mvnne	r6, #0
   2d174:	orr	r0, r0, r2
   2d178:	ldr	r2, [sp, #12]
   2d17c:	orr	r0, r0, r2
   2d180:	ldr	r2, [sp, #8]
   2d184:	orr	r0, r0, r2
   2d188:	orr	r0, r0, r3
   2d18c:	orr	r0, r0, ip
   2d190:	orr	r0, r0, r5
   2d194:	orr	r0, r0, r1
   2d198:	and	r3, r0, #1
   2d19c:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2d1a0:	mov	r1, #0
   2d1a4:	lsl	r2, r7, #9
   2d1a8:	lsl	r0, r6, #9
   2d1ac:	lsr	r3, r7, #23
   2d1b0:	cmp	r1, r7, lsr #23
   2d1b4:	orr	r2, r2, r6, lsr #23
   2d1b8:	mvnne	r0, #0
   2d1bc:	movwne	r3, #1
   2d1c0:	cmp	r1, r7, lsr #23
   2d1c4:	mvnne	r2, #0
   2d1c8:	mov	r6, r0
   2d1cc:	mov	r7, r2
   2d1d0:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2d1d4:	lsl	r1, r7, #1
   2d1d8:	lsl	r0, r6, #1
   2d1dc:	cmp	r7, #0
   2d1e0:	lsr	r3, r7, #31
   2d1e4:	orr	r1, r1, r6, lsr #31
   2d1e8:	mvnlt	r0, #0
   2d1ec:	mvnlt	r1, #0
   2d1f0:	mov	r6, r0
   2d1f4:	mov	r7, r1
   2d1f8:	ldr	r1, [sp, #32]
   2d1fc:	ldr	r2, [sp, #28]
   2d200:	orr	r8, r3, r8
   2d204:	add	r0, r1, r2
   2d208:	str	r0, [r9]
   2d20c:	ldrb	r0, [r1, r2]
   2d210:	cmp	r0, #0
   2d214:	orrne	r8, r8, #2
   2d218:	ldr	r0, [sp, #36]	; 0x24
   2d21c:	strd	r6, [r0]
   2d220:	mov	r0, r8
   2d224:	sub	sp, fp, #28
   2d228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d22c:	movw	r0, #60689	; 0xed11
   2d230:	movw	r1, #60727	; 0xed37
   2d234:	movw	r3, #60821	; 0xed95
   2d238:	mov	r2, #85	; 0x55
   2d23c:	movt	r0, #2
   2d240:	movt	r1, #2
   2d244:	movt	r3, #2
   2d248:	bl	11760 <__assert_fail@plt>
   2d24c:	clz	r2, r1
   2d250:	clz	r3, r0
   2d254:	lsr	r2, r2, #5
   2d258:	lsr	r3, r3, #5
   2d25c:	orrs	r2, r3, r2
   2d260:	movwne	r1, #1
   2d264:	movwne	r0, #1
   2d268:	cmp	r1, #0
   2d26c:	beq	2d29c <__assert_fail@plt+0x1bb3c>
   2d270:	mvn	r2, #-2147483648	; 0x80000000
   2d274:	udiv	r2, r2, r1
   2d278:	cmp	r2, r0
   2d27c:	bcs	2d29c <__assert_fail@plt+0x1bb3c>
   2d280:	push	{fp, lr}
   2d284:	mov	fp, sp
   2d288:	bl	11640 <__errno_location@plt>
   2d28c:	mov	r1, #12
   2d290:	str	r1, [r0]
   2d294:	mov	r0, #0
   2d298:	pop	{fp, pc}
   2d29c:	b	113d0 <calloc@plt>
   2d2a0:	cmp	r0, #0
   2d2a4:	movweq	r0, #1
   2d2a8:	cmn	r0, #1
   2d2ac:	ble	2d2b4 <__assert_fail@plt+0x1bb54>
   2d2b0:	b	115b0 <malloc@plt>
   2d2b4:	push	{fp, lr}
   2d2b8:	mov	fp, sp
   2d2bc:	bl	11640 <__errno_location@plt>
   2d2c0:	mov	r1, #12
   2d2c4:	str	r1, [r0]
   2d2c8:	mov	r0, #0
   2d2cc:	pop	{fp, pc}
   2d2d0:	push	{fp, lr}
   2d2d4:	mov	fp, sp
   2d2d8:	cmp	r0, #0
   2d2dc:	beq	2d2f8 <__assert_fail@plt+0x1bb98>
   2d2e0:	cmp	r1, #0
   2d2e4:	beq	2d304 <__assert_fail@plt+0x1bba4>
   2d2e8:	cmn	r1, #1
   2d2ec:	ble	2d310 <__assert_fail@plt+0x1bbb0>
   2d2f0:	pop	{fp, lr}
   2d2f4:	b	11508 <realloc@plt>
   2d2f8:	mov	r0, r1
   2d2fc:	pop	{fp, lr}
   2d300:	b	2d2a0 <__assert_fail@plt+0x1bb40>
   2d304:	bl	14538 <__assert_fail@plt+0x2dd8>
   2d308:	mov	r0, #0
   2d30c:	pop	{fp, pc}
   2d310:	bl	11640 <__errno_location@plt>
   2d314:	mov	r1, #12
   2d318:	str	r1, [r0]
   2d31c:	mov	r0, #0
   2d320:	pop	{fp, pc}
   2d324:	push	{r4, r5, r6, sl, fp, lr}
   2d328:	add	fp, sp, #16
   2d32c:	mov	r4, r0
   2d330:	bl	11580 <__fpending@plt>
   2d334:	ldr	r6, [r4]
   2d338:	mov	r5, r0
   2d33c:	mov	r0, r4
   2d340:	bl	14318 <__assert_fail@plt+0x2bb8>
   2d344:	tst	r6, #32
   2d348:	bne	2d380 <__assert_fail@plt+0x1bc20>
   2d34c:	cmp	r0, #0
   2d350:	mov	r4, r0
   2d354:	mvnne	r4, #0
   2d358:	cmp	r5, #0
   2d35c:	bne	2d38c <__assert_fail@plt+0x1bc2c>
   2d360:	cmp	r0, #0
   2d364:	beq	2d38c <__assert_fail@plt+0x1bc2c>
   2d368:	bl	11640 <__errno_location@plt>
   2d36c:	ldr	r0, [r0]
   2d370:	subs	r4, r0, #9
   2d374:	mvnne	r4, #0
   2d378:	mov	r0, r4
   2d37c:	pop	{r4, r5, r6, sl, fp, pc}
   2d380:	mvn	r4, #0
   2d384:	cmp	r0, #0
   2d388:	beq	2d394 <__assert_fail@plt+0x1bc34>
   2d38c:	mov	r0, r4
   2d390:	pop	{r4, r5, r6, sl, fp, pc}
   2d394:	bl	11640 <__errno_location@plt>
   2d398:	mov	r1, #0
   2d39c:	str	r1, [r0]
   2d3a0:	mov	r0, r4
   2d3a4:	pop	{r4, r5, r6, sl, fp, pc}
   2d3a8:	push	{r4, r5, r6, r7, fp, lr}
   2d3ac:	add	fp, sp, #16
   2d3b0:	mov	r4, r0
   2d3b4:	ldr	r0, [r0, #4]
   2d3b8:	mov	r5, r1
   2d3bc:	cmp	r0, r1
   2d3c0:	movcs	r0, #1
   2d3c4:	strcs	r5, [r4]
   2d3c8:	popcs	{r4, r5, r6, r7, fp, pc}
   2d3cc:	mov	r6, r3
   2d3d0:	cmp	r3, #0
   2d3d4:	beq	2d3fc <__assert_fail@plt+0x1bc9c>
   2d3d8:	mvn	r0, #0
   2d3dc:	udiv	r0, r0, r6
   2d3e0:	cmp	r0, r5
   2d3e4:	bcs	2d3fc <__assert_fail@plt+0x1bc9c>
   2d3e8:	bl	11640 <__errno_location@plt>
   2d3ec:	mov	r1, #12
   2d3f0:	str	r1, [r0]
   2d3f4:	mov	r0, #0
   2d3f8:	pop	{r4, r5, r6, r7, fp, pc}
   2d3fc:	ldr	r0, [r4, #8]
   2d400:	mul	r1, r6, r5
   2d404:	cmp	r0, r2
   2d408:	beq	2d420 <__assert_fail@plt+0x1bcc0>
   2d40c:	bl	2d2d0 <__assert_fail@plt+0x1bb70>
   2d410:	mov	r7, r0
   2d414:	cmp	r0, #0
   2d418:	bne	2d450 <__assert_fail@plt+0x1bcf0>
   2d41c:	b	2d460 <__assert_fail@plt+0x1bd00>
   2d420:	mov	r0, r1
   2d424:	bl	2d2a0 <__assert_fail@plt+0x1bb40>
   2d428:	cmp	r0, #0
   2d42c:	beq	2d460 <__assert_fail@plt+0x1bd00>
   2d430:	ldr	r1, [r4, #8]
   2d434:	mov	r7, r0
   2d438:	cmp	r1, #0
   2d43c:	beq	2d450 <__assert_fail@plt+0x1bcf0>
   2d440:	ldr	r0, [r4]
   2d444:	mul	r2, r0, r6
   2d448:	mov	r0, r7
   2d44c:	bl	11484 <memcpy@plt>
   2d450:	mov	r0, #1
   2d454:	str	r5, [r4]
   2d458:	stmib	r4, {r5, r7}
   2d45c:	pop	{r4, r5, r6, r7, fp, pc}
   2d460:	mov	r0, #0
   2d464:	pop	{r4, r5, r6, r7, fp, pc}
   2d468:	sub	sp, sp, #8
   2d46c:	push	{r4, r5, r6, r7, fp, lr}
   2d470:	add	fp, sp, #16
   2d474:	sub	sp, sp, #8
   2d478:	mov	r5, r0
   2d47c:	add	r0, fp, #8
   2d480:	cmp	r1, #11
   2d484:	str	r3, [fp, #12]
   2d488:	str	r2, [fp, #8]
   2d48c:	str	r0, [sp, #4]
   2d490:	bhi	2d4cc <__assert_fail@plt+0x1bd6c>
   2d494:	mov	r0, #1
   2d498:	movw	r2, #1300	; 0x514
   2d49c:	tst	r2, r0, lsl r1
   2d4a0:	bne	2d58c <__assert_fail@plt+0x1be2c>
   2d4a4:	movw	r2, #2570	; 0xa0a
   2d4a8:	tst	r2, r0, lsl r1
   2d4ac:	bne	2d4f4 <__assert_fail@plt+0x1bd94>
   2d4b0:	cmp	r1, #0
   2d4b4:	bne	2d4cc <__assert_fail@plt+0x1bd6c>
   2d4b8:	ldr	r0, [sp, #4]
   2d4bc:	add	r1, r0, #4
   2d4c0:	str	r1, [sp, #4]
   2d4c4:	mov	r1, #0
   2d4c8:	b	2d598 <__assert_fail@plt+0x1be38>
   2d4cc:	sub	r0, r1, #1024	; 0x400
   2d4d0:	cmp	r0, #10
   2d4d4:	bhi	2d58c <__assert_fail@plt+0x1be2c>
   2d4d8:	mov	r2, #1
   2d4dc:	movw	r3, #645	; 0x285
   2d4e0:	tst	r3, r2, lsl r0
   2d4e4:	bne	2d58c <__assert_fail@plt+0x1be2c>
   2d4e8:	movw	r3, #1282	; 0x502
   2d4ec:	tst	r3, r2, lsl r0
   2d4f0:	beq	2d500 <__assert_fail@plt+0x1bda0>
   2d4f4:	mov	r0, r5
   2d4f8:	bl	116c4 <fcntl64@plt>
   2d4fc:	b	2d5a4 <__assert_fail@plt+0x1be44>
   2d500:	cmp	r0, #6
   2d504:	bne	2d58c <__assert_fail@plt+0x1be2c>
   2d508:	ldr	r0, [sp, #4]
   2d50c:	movw	r7, #62440	; 0xf3e8
   2d510:	movt	r7, #3
   2d514:	add	r1, r0, #4
   2d518:	str	r1, [sp, #4]
   2d51c:	ldr	r6, [r0]
   2d520:	ldr	r0, [r7]
   2d524:	cmp	r0, #0
   2d528:	blt	2d5c8 <__assert_fail@plt+0x1be68>
   2d52c:	mov	r0, r5
   2d530:	movw	r1, #1030	; 0x406
   2d534:	mov	r2, r6
   2d538:	bl	116c4 <fcntl64@plt>
   2d53c:	mov	r4, r0
   2d540:	cmn	r0, #1
   2d544:	bgt	2d5bc <__assert_fail@plt+0x1be5c>
   2d548:	bl	11640 <__errno_location@plt>
   2d54c:	ldr	r0, [r0]
   2d550:	cmp	r0, #22
   2d554:	bne	2d5bc <__assert_fail@plt+0x1be5c>
   2d558:	mov	r0, r5
   2d55c:	mov	r1, #0
   2d560:	mov	r2, r6
   2d564:	bl	116c4 <fcntl64@plt>
   2d568:	mov	r4, r0
   2d56c:	cmp	r0, #0
   2d570:	blt	2d5a8 <__assert_fail@plt+0x1be48>
   2d574:	mvn	r0, #0
   2d578:	str	r0, [r7]
   2d57c:	mov	r0, #1
   2d580:	cmp	r0, #0
   2d584:	bne	2d5f4 <__assert_fail@plt+0x1be94>
   2d588:	b	2d5a8 <__assert_fail@plt+0x1be48>
   2d58c:	ldr	r0, [sp, #4]
   2d590:	add	r2, r0, #4
   2d594:	str	r2, [sp, #4]
   2d598:	ldr	r2, [r0]
   2d59c:	mov	r0, r5
   2d5a0:	bl	116c4 <fcntl64@plt>
   2d5a4:	mov	r4, r0
   2d5a8:	mov	r0, r4
   2d5ac:	sub	sp, fp, #16
   2d5b0:	pop	{r4, r5, r6, r7, fp, lr}
   2d5b4:	add	sp, sp, #8
   2d5b8:	bx	lr
   2d5bc:	mov	r0, #1
   2d5c0:	str	r0, [r7]
   2d5c4:	b	2d5a8 <__assert_fail@plt+0x1be48>
   2d5c8:	mov	r0, r5
   2d5cc:	mov	r1, #0
   2d5d0:	mov	r2, r6
   2d5d4:	bl	116c4 <fcntl64@plt>
   2d5d8:	mov	r4, r0
   2d5dc:	ldr	r0, [r7]
   2d5e0:	add	r0, r0, #1
   2d5e4:	clz	r0, r0
   2d5e8:	lsr	r0, r0, #5
   2d5ec:	cmp	r0, #0
   2d5f0:	beq	2d5a8 <__assert_fail@plt+0x1be48>
   2d5f4:	cmp	r4, #0
   2d5f8:	blt	2d5a8 <__assert_fail@plt+0x1be48>
   2d5fc:	mov	r0, r4
   2d600:	mov	r1, #1
   2d604:	bl	116c4 <fcntl64@plt>
   2d608:	cmp	r0, #0
   2d60c:	blt	2d628 <__assert_fail@plt+0x1bec8>
   2d610:	orr	r2, r0, #1
   2d614:	mov	r0, r4
   2d618:	mov	r1, #2
   2d61c:	bl	116c4 <fcntl64@plt>
   2d620:	cmn	r0, #1
   2d624:	bne	2d5a8 <__assert_fail@plt+0x1be48>
   2d628:	bl	11640 <__errno_location@plt>
   2d62c:	ldr	r6, [r0]
   2d630:	mov	r5, r0
   2d634:	mov	r0, r4
   2d638:	bl	11748 <close@plt>
   2d63c:	str	r6, [r5]
   2d640:	mvn	r4, #0
   2d644:	b	2d5a8 <__assert_fail@plt+0x1be48>
   2d648:	push	{fp, lr}
   2d64c:	mov	fp, sp
   2d650:	mov	r0, #14
   2d654:	bl	116f4 <nl_langinfo@plt>
   2d658:	movw	r1, #57459	; 0xe073
   2d65c:	cmp	r0, #0
   2d660:	movt	r1, #2
   2d664:	movne	r1, r0
   2d668:	movw	r0, #60900	; 0xede4
   2d66c:	ldrb	r2, [r1]
   2d670:	movt	r0, #2
   2d674:	cmp	r2, #0
   2d678:	movne	r0, r1
   2d67c:	pop	{fp, pc}
   2d680:	push	{r4, r5, r6, r7, fp, lr}
   2d684:	add	fp, sp, #16
   2d688:	sub	sp, sp, #8
   2d68c:	add	r5, sp, #4
   2d690:	cmp	r0, #0
   2d694:	mov	r7, r2
   2d698:	mov	r4, r1
   2d69c:	movne	r5, r0
   2d6a0:	mov	r0, r5
   2d6a4:	bl	1158c <mbrtowc@plt>
   2d6a8:	mov	r6, r0
   2d6ac:	cmp	r7, #0
   2d6b0:	beq	2d6d4 <__assert_fail@plt+0x1bf74>
   2d6b4:	cmn	r6, #2
   2d6b8:	bcc	2d6d4 <__assert_fail@plt+0x1bf74>
   2d6bc:	mov	r0, #0
   2d6c0:	bl	2d71c <__assert_fail@plt+0x1bfbc>
   2d6c4:	cmp	r0, #0
   2d6c8:	ldrbeq	r0, [r4]
   2d6cc:	moveq	r6, #1
   2d6d0:	streq	r0, [r5]
   2d6d4:	mov	r0, r6
   2d6d8:	sub	sp, fp, #16
   2d6dc:	pop	{r4, r5, r6, r7, fp, pc}
   2d6e0:	cmp	r2, #0
   2d6e4:	beq	2d714 <__assert_fail@plt+0x1bfb4>
   2d6e8:	mvn	r3, #0
   2d6ec:	udiv	r3, r3, r2
   2d6f0:	cmp	r3, r1
   2d6f4:	bcs	2d714 <__assert_fail@plt+0x1bfb4>
   2d6f8:	push	{fp, lr}
   2d6fc:	mov	fp, sp
   2d700:	bl	11640 <__errno_location@plt>
   2d704:	mov	r1, #12
   2d708:	str	r1, [r0]
   2d70c:	mov	r0, #0
   2d710:	pop	{fp, pc}
   2d714:	mul	r1, r2, r1
   2d718:	b	2d2d0 <__assert_fail@plt+0x1bb70>
   2d71c:	push	{r4, sl, fp, lr}
   2d720:	add	fp, sp, #8
   2d724:	sub	sp, sp, #264	; 0x108
   2d728:	add	r1, sp, #7
   2d72c:	movw	r2, #257	; 0x101
   2d730:	bl	2d780 <__assert_fail@plt+0x1c020>
   2d734:	mov	r4, #0
   2d738:	cmp	r0, #0
   2d73c:	bne	2d774 <__assert_fail@plt+0x1c014>
   2d740:	movw	r1, #60906	; 0xedea
   2d744:	add	r0, sp, #7
   2d748:	movt	r1, #2
   2d74c:	bl	11418 <strcmp@plt>
   2d750:	cmp	r0, #0
   2d754:	beq	2d774 <__assert_fail@plt+0x1c014>
   2d758:	movw	r1, #60908	; 0xedec
   2d75c:	add	r0, sp, #7
   2d760:	movt	r1, #2
   2d764:	bl	11418 <strcmp@plt>
   2d768:	mov	r4, r0
   2d76c:	cmp	r0, #0
   2d770:	movwne	r4, #1
   2d774:	mov	r0, r4
   2d778:	sub	sp, fp, #8
   2d77c:	pop	{r4, sl, fp, pc}
   2d780:	push	{r4, r5, r6, r7, fp, lr}
   2d784:	add	fp, sp, #16
   2d788:	mov	r4, r1
   2d78c:	mov	r1, #0
   2d790:	mov	r6, r2
   2d794:	bl	116d0 <setlocale@plt>
   2d798:	cmp	r0, #0
   2d79c:	beq	2d7cc <__assert_fail@plt+0x1c06c>
   2d7a0:	mov	r7, r0
   2d7a4:	bl	11628 <strlen@plt>
   2d7a8:	cmp	r0, r6
   2d7ac:	bcs	2d7ec <__assert_fail@plt+0x1c08c>
   2d7b0:	add	r2, r0, #1
   2d7b4:	mov	r0, r4
   2d7b8:	mov	r1, r7
   2d7bc:	bl	11484 <memcpy@plt>
   2d7c0:	mov	r5, #0
   2d7c4:	mov	r0, r5
   2d7c8:	pop	{r4, r5, r6, r7, fp, pc}
   2d7cc:	cmp	r6, #0
   2d7d0:	mov	r5, #22
   2d7d4:	movne	r0, #0
   2d7d8:	strbne	r0, [r4]
   2d7dc:	movne	r0, r5
   2d7e0:	popne	{r4, r5, r6, r7, fp, pc}
   2d7e4:	mov	r0, r5
   2d7e8:	pop	{r4, r5, r6, r7, fp, pc}
   2d7ec:	mov	r5, #34	; 0x22
   2d7f0:	cmp	r6, #0
   2d7f4:	beq	2d814 <__assert_fail@plt+0x1c0b4>
   2d7f8:	sub	r6, r6, #1
   2d7fc:	mov	r0, r4
   2d800:	mov	r1, r7
   2d804:	mov	r2, r6
   2d808:	bl	11484 <memcpy@plt>
   2d80c:	mov	r0, #0
   2d810:	strb	r0, [r4, r6]
   2d814:	mov	r0, r5
   2d818:	pop	{r4, r5, r6, r7, fp, pc}
   2d81c:	mov	r1, #0
   2d820:	b	116d0 <setlocale@plt>
   2d824:	cmp	r3, #0
   2d828:	cmpeq	r2, #0
   2d82c:	bne	2d850 <__assert_fail@plt+0x1c0f0>
   2d830:	cmp	r1, #0
   2d834:	movlt	r1, #-2147483648	; 0x80000000
   2d838:	movlt	r0, #0
   2d83c:	blt	2d84c <__assert_fail@plt+0x1c0ec>
   2d840:	cmpeq	r0, #0
   2d844:	mvnne	r1, #-2147483648	; 0x80000000
   2d848:	mvnne	r0, #0
   2d84c:	b	2d934 <__assert_fail@plt+0x1c1d4>
   2d850:	sub	sp, sp, #8
   2d854:	push	{sp, lr}
   2d858:	cmp	r1, #0
   2d85c:	blt	2d87c <__assert_fail@plt+0x1c11c>
   2d860:	cmp	r3, #0
   2d864:	blt	2d8b0 <__assert_fail@plt+0x1c150>
   2d868:	bl	2d944 <__assert_fail@plt+0x1c1e4>
   2d86c:	ldr	lr, [sp, #4]
   2d870:	add	sp, sp, #8
   2d874:	pop	{r2, r3}
   2d878:	bx	lr
   2d87c:	rsbs	r0, r0, #0
   2d880:	sbc	r1, r1, r1, lsl #1
   2d884:	cmp	r3, #0
   2d888:	blt	2d8d4 <__assert_fail@plt+0x1c174>
   2d88c:	bl	2d944 <__assert_fail@plt+0x1c1e4>
   2d890:	ldr	lr, [sp, #4]
   2d894:	add	sp, sp, #8
   2d898:	pop	{r2, r3}
   2d89c:	rsbs	r0, r0, #0
   2d8a0:	sbc	r1, r1, r1, lsl #1
   2d8a4:	rsbs	r2, r2, #0
   2d8a8:	sbc	r3, r3, r3, lsl #1
   2d8ac:	bx	lr
   2d8b0:	rsbs	r2, r2, #0
   2d8b4:	sbc	r3, r3, r3, lsl #1
   2d8b8:	bl	2d944 <__assert_fail@plt+0x1c1e4>
   2d8bc:	ldr	lr, [sp, #4]
   2d8c0:	add	sp, sp, #8
   2d8c4:	pop	{r2, r3}
   2d8c8:	rsbs	r0, r0, #0
   2d8cc:	sbc	r1, r1, r1, lsl #1
   2d8d0:	bx	lr
   2d8d4:	rsbs	r2, r2, #0
   2d8d8:	sbc	r3, r3, r3, lsl #1
   2d8dc:	bl	2d944 <__assert_fail@plt+0x1c1e4>
   2d8e0:	ldr	lr, [sp, #4]
   2d8e4:	add	sp, sp, #8
   2d8e8:	pop	{r2, r3}
   2d8ec:	rsbs	r2, r2, #0
   2d8f0:	sbc	r3, r3, r3, lsl #1
   2d8f4:	bx	lr
   2d8f8:	cmp	r3, #0
   2d8fc:	cmpeq	r2, #0
   2d900:	bne	2d918 <__assert_fail@plt+0x1c1b8>
   2d904:	cmp	r1, #0
   2d908:	cmpeq	r0, #0
   2d90c:	mvnne	r1, #0
   2d910:	mvnne	r0, #0
   2d914:	b	2d934 <__assert_fail@plt+0x1c1d4>
   2d918:	sub	sp, sp, #8
   2d91c:	push	{sp, lr}
   2d920:	bl	2d944 <__assert_fail@plt+0x1c1e4>
   2d924:	ldr	lr, [sp, #4]
   2d928:	add	sp, sp, #8
   2d92c:	pop	{r2, r3}
   2d930:	bx	lr
   2d934:	push	{r1, lr}
   2d938:	mov	r0, #8
   2d93c:	bl	113f4 <raise@plt>
   2d940:	pop	{r1, pc}
   2d944:	cmp	r1, r3
   2d948:	cmpeq	r0, r2
   2d94c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d950:	mov	r4, r0
   2d954:	movcc	r0, #0
   2d958:	mov	r5, r1
   2d95c:	ldr	lr, [sp, #36]	; 0x24
   2d960:	movcc	r1, r0
   2d964:	bcc	2da60 <__assert_fail@plt+0x1c300>
   2d968:	cmp	r3, #0
   2d96c:	clzeq	ip, r2
   2d970:	clzne	ip, r3
   2d974:	addeq	ip, ip, #32
   2d978:	cmp	r5, #0
   2d97c:	clzeq	r1, r4
   2d980:	addeq	r1, r1, #32
   2d984:	clzne	r1, r5
   2d988:	sub	ip, ip, r1
   2d98c:	sub	sl, ip, #32
   2d990:	lsl	r9, r3, ip
   2d994:	rsb	fp, ip, #32
   2d998:	orr	r9, r9, r2, lsl sl
   2d99c:	orr	r9, r9, r2, lsr fp
   2d9a0:	lsl	r8, r2, ip
   2d9a4:	cmp	r5, r9
   2d9a8:	cmpeq	r4, r8
   2d9ac:	movcc	r0, #0
   2d9b0:	movcc	r1, r0
   2d9b4:	bcc	2d9d0 <__assert_fail@plt+0x1c270>
   2d9b8:	mov	r0, #1
   2d9bc:	subs	r4, r4, r8
   2d9c0:	lsl	r1, r0, sl
   2d9c4:	orr	r1, r1, r0, lsr fp
   2d9c8:	lsl	r0, r0, ip
   2d9cc:	sbc	r5, r5, r9
   2d9d0:	cmp	ip, #0
   2d9d4:	beq	2da60 <__assert_fail@plt+0x1c300>
   2d9d8:	lsr	r6, r8, #1
   2d9dc:	orr	r6, r6, r9, lsl #31
   2d9e0:	lsr	r7, r9, #1
   2d9e4:	mov	r2, ip
   2d9e8:	b	2da0c <__assert_fail@plt+0x1c2ac>
   2d9ec:	subs	r3, r4, r6
   2d9f0:	sbc	r8, r5, r7
   2d9f4:	adds	r3, r3, r3
   2d9f8:	adc	r8, r8, r8
   2d9fc:	adds	r4, r3, #1
   2da00:	adc	r5, r8, #0
   2da04:	subs	r2, r2, #1
   2da08:	beq	2da28 <__assert_fail@plt+0x1c2c8>
   2da0c:	cmp	r5, r7
   2da10:	cmpeq	r4, r6
   2da14:	bcs	2d9ec <__assert_fail@plt+0x1c28c>
   2da18:	adds	r4, r4, r4
   2da1c:	adc	r5, r5, r5
   2da20:	subs	r2, r2, #1
   2da24:	bne	2da0c <__assert_fail@plt+0x1c2ac>
   2da28:	lsr	r3, r4, ip
   2da2c:	orr	r3, r3, r5, lsl fp
   2da30:	lsr	r2, r5, ip
   2da34:	orr	r3, r3, r5, lsr sl
   2da38:	adds	r0, r0, r4
   2da3c:	mov	r4, r3
   2da40:	lsl	r3, r2, ip
   2da44:	orr	r3, r3, r4, lsl sl
   2da48:	lsl	ip, r4, ip
   2da4c:	orr	r3, r3, r4, lsr fp
   2da50:	adc	r1, r1, r5
   2da54:	subs	r0, r0, ip
   2da58:	mov	r5, r2
   2da5c:	sbc	r1, r1, r3
   2da60:	cmp	lr, #0
   2da64:	strdne	r4, [lr]
   2da68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2da70:	mov	r7, r0
   2da74:	ldr	r6, [pc, #72]	; 2dac4 <__assert_fail@plt+0x1c364>
   2da78:	ldr	r5, [pc, #72]	; 2dac8 <__assert_fail@plt+0x1c368>
   2da7c:	add	r6, pc, r6
   2da80:	add	r5, pc, r5
   2da84:	sub	r6, r6, r5
   2da88:	mov	r8, r1
   2da8c:	mov	r9, r2
   2da90:	bl	11398 <pthread_mutex_unlock@plt-0x20>
   2da94:	asrs	r6, r6, #2
   2da98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2da9c:	mov	r4, #0
   2daa0:	add	r4, r4, #1
   2daa4:	ldr	r3, [r5], #4
   2daa8:	mov	r2, r9
   2daac:	mov	r1, r8
   2dab0:	mov	r0, r7
   2dab4:	blx	r3
   2dab8:	cmp	r6, r4
   2dabc:	bne	2daa0 <__assert_fail@plt+0x1c340>
   2dac0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dac4:	andeq	r1, r1, r8, lsl #9
   2dac8:	andeq	r1, r1, r0, lsl #9
   2dacc:	bx	lr
   2dad0:	ldr	r3, [pc, #12]	; 2dae4 <__assert_fail@plt+0x1c384>
   2dad4:	mov	r1, #0
   2dad8:	add	r3, pc, r3
   2dadc:	ldr	r2, [r3]
   2dae0:	b	11664 <__cxa_atexit@plt>
   2dae4:	andeq	r1, r1, r4, ror r6

Disassembly of section .fini:

0002dae8 <.fini>:
   2dae8:	push	{r3, lr}
   2daec:	pop	{r3, pc}
