
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fec <.init>:
   10fec:	push	{r3, lr}
   10ff0:	bl	1183c <__assert_fail@plt+0x4dc>
   10ff4:	pop	{r3, pc}

Disassembly of section .plt:

00010ff8 <fstatfs64@plt-0x14>:
   10ff8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ffc:	ldr	lr, [pc, #4]	; 11008 <fstatfs64@plt-0x4>
   11000:	add	lr, pc, lr
   11004:	ldr	pc, [lr, #8]!
   11008:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0001100c <fstatfs64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #4088]!	; 0xff8

00011018 <calloc@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #4080]!	; 0xff0

00011024 <endgrent@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #4072]!	; 0xfe8

00011030 <fputs_unlocked@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #4064]!	; 0xfe0

0001103c <raise@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #4056]!	; 0xfd8

00011048 <strcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #4048]!	; 0xfd0

00011054 <getpwuid@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011060 <fflush@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #4032]!	; 0xfc0

0001106c <memmove@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #4024]!	; 0xfb8

00011078 <free@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #4016]!	; 0xfb0

00011084 <__openat64_2@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011090 <_exit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #4000]!	; 0xfa0

0001109c <memcpy@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #3992]!	; 0xf98

000110a8 <mbsinit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #3984]!	; 0xf90

000110b4 <memcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #3976]!	; 0xf88

000110c0 <stpcpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #3968]!	; 0xf80

000110cc <fputc_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #24, 20	; 0x18000
   110d4:	ldr	pc, [ip, #3960]!	; 0xf78

000110d8 <dcgettext@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #24, 20	; 0x18000
   110e0:	ldr	pc, [ip, #3952]!	; 0xf70

000110e4 <realloc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #24, 20	; 0x18000
   110ec:	ldr	pc, [ip, #3944]!	; 0xf68

000110f0 <textdomain@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #24, 20	; 0x18000
   110f8:	ldr	pc, [ip, #3936]!	; 0xf60

000110fc <__fxstatat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #24, 20	; 0x18000
   11104:	ldr	pc, [ip, #3928]!	; 0xf58

00011108 <iswprint@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #24, 20	; 0x18000
   11110:	ldr	pc, [ip, #3920]!	; 0xf50

00011114 <__fxstat64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #24, 20	; 0x18000
   1111c:	ldr	pc, [ip, #3912]!	; 0xf48

00011120 <lseek64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #24, 20	; 0x18000
   11128:	ldr	pc, [ip, #3904]!	; 0xf40

0001112c <__ctype_get_mb_cur_max@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #24, 20	; 0x18000
   11134:	ldr	pc, [ip, #3896]!	; 0xf38

00011138 <strcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #24, 20	; 0x18000
   11140:	ldr	pc, [ip, #3888]!	; 0xf30

00011144 <__fpending@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #24, 20	; 0x18000
   1114c:	ldr	pc, [ip, #3880]!	; 0xf28

00011150 <ferror_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #24, 20	; 0x18000
   11158:	ldr	pc, [ip, #3872]!	; 0xf20

0001115c <mbrtowc@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #24, 20	; 0x18000
   11164:	ldr	pc, [ip, #3864]!	; 0xf18

00011168 <error@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #24, 20	; 0x18000
   11170:	ldr	pc, [ip, #3856]!	; 0xf10

00011174 <open64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #24, 20	; 0x18000
   1117c:	ldr	pc, [ip, #3848]!	; 0xf08

00011180 <malloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #24, 20	; 0x18000
   11188:	ldr	pc, [ip, #3840]!	; 0xf00

0001118c <__libc_start_main@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #24, 20	; 0x18000
   11194:	ldr	pc, [ip, #3832]!	; 0xef8

00011198 <__freading@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #24, 20	; 0x18000
   111a0:	ldr	pc, [ip, #3824]!	; 0xef0

000111a4 <__gmon_start__@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #24, 20	; 0x18000
   111ac:	ldr	pc, [ip, #3816]!	; 0xee8

000111b0 <getopt_long@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #24, 20	; 0x18000
   111b8:	ldr	pc, [ip, #3808]!	; 0xee0

000111bc <__ctype_b_loc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #24, 20	; 0x18000
   111c4:	ldr	pc, [ip, #3800]!	; 0xed8

000111c8 <exit@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #24, 20	; 0x18000
   111d0:	ldr	pc, [ip, #3792]!	; 0xed0

000111d4 <strlen@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #24, 20	; 0x18000
   111dc:	ldr	pc, [ip, #3784]!	; 0xec8

000111e0 <strchr@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #24, 20	; 0x18000
   111e8:	ldr	pc, [ip, #3776]!	; 0xec0

000111ec <openat64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #24, 20	; 0x18000
   111f4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111f8 <fchown@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #24, 20	; 0x18000
   11200:	ldr	pc, [ip, #3760]!	; 0xeb0

00011204 <__errno_location@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #24, 20	; 0x18000
   1120c:	ldr	pc, [ip, #3752]!	; 0xea8

00011210 <__cxa_atexit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #24, 20	; 0x18000
   11218:	ldr	pc, [ip, #3744]!	; 0xea0

0001121c <memset@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #24, 20	; 0x18000
   11224:	ldr	pc, [ip, #3736]!	; 0xe98

00011228 <__printf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #24, 20	; 0x18000
   11230:	ldr	pc, [ip, #3728]!	; 0xe90

00011234 <fileno@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #24, 20	; 0x18000
   1123c:	ldr	pc, [ip, #3720]!	; 0xe88

00011240 <strtoumax@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #24, 20	; 0x18000
   11248:	ldr	pc, [ip, #3712]!	; 0xe80

0001124c <__fprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #24, 20	; 0x18000
   11254:	ldr	pc, [ip, #3704]!	; 0xe78

00011258 <fclose@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #24, 20	; 0x18000
   11260:	ldr	pc, [ip, #3696]!	; 0xe70

00011264 <fseeko64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #24, 20	; 0x18000
   1126c:	ldr	pc, [ip, #3688]!	; 0xe68

00011270 <fcntl64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #24, 20	; 0x18000
   11278:	ldr	pc, [ip, #3680]!	; 0xe60

0001127c <setlocale@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #24, 20	; 0x18000
   11284:	ldr	pc, [ip, #3672]!	; 0xe58

00011288 <strrchr@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #24, 20	; 0x18000
   11290:	ldr	pc, [ip, #3664]!	; 0xe50

00011294 <nl_langinfo@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #24, 20	; 0x18000
   1129c:	ldr	pc, [ip, #3656]!	; 0xe48

000112a0 <readdir64@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #24, 20	; 0x18000
   112a8:	ldr	pc, [ip, #3648]!	; 0xe40

000112ac <fdopendir@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #24, 20	; 0x18000
   112b4:	ldr	pc, [ip, #3640]!	; 0xe38

000112b8 <dirfd@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #24, 20	; 0x18000
   112c0:	ldr	pc, [ip, #3632]!	; 0xe30

000112c4 <fchdir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #24, 20	; 0x18000
   112cc:	ldr	pc, [ip, #3624]!	; 0xe28

000112d0 <qsort@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #24, 20	; 0x18000
   112d8:	ldr	pc, [ip, #3616]!	; 0xe20

000112dc <fchownat@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #24, 20	; 0x18000
   112e4:	ldr	pc, [ip, #3608]!	; 0xe18

000112e8 <bindtextdomain@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #24, 20	; 0x18000
   112f0:	ldr	pc, [ip, #3600]!	; 0xe10

000112f4 <__xstat64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #24, 20	; 0x18000
   112fc:	ldr	pc, [ip, #3592]!	; 0xe08

00011300 <fputs@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #24, 20	; 0x18000
   11308:	ldr	pc, [ip, #3584]!	; 0xe00

0001130c <strncmp@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #24, 20	; 0x18000
   11314:	ldr	pc, [ip, #3576]!	; 0xdf8

00011318 <abort@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #24, 20	; 0x18000
   11320:	ldr	pc, [ip, #3568]!	; 0xdf0

00011324 <close@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #24, 20	; 0x18000
   1132c:	ldr	pc, [ip, #3560]!	; 0xde8

00011330 <__lxstat64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #24, 20	; 0x18000
   11338:	ldr	pc, [ip, #3552]!	; 0xde0

0001133c <closedir@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #24, 20	; 0x18000
   11344:	ldr	pc, [ip, #3544]!	; 0xdd8

00011348 <getgrgid@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #24, 20	; 0x18000
   11350:	ldr	pc, [ip, #3536]!	; 0xdd0

00011354 <getgrnam@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #24, 20	; 0x18000
   1135c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011360 <__assert_fail@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #24, 20	; 0x18000
   11368:	ldr	pc, [ip, #3520]!	; 0xdc0

Disassembly of section .text:

00011370 <.text>:
   11370:	push	{r4, lr}
   11374:	bl	11204 <__errno_location@plt>
   11378:	mov	r3, #12
   1137c:	str	r3, [r0]
   11380:	mov	r0, #0
   11384:	pop	{r4, pc}
   11388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1138c:	mov	r7, r0
   11390:	sub	sp, sp, #148	; 0x94
   11394:	mov	r8, r1
   11398:	add	sl, sp, #16
   1139c:	mvn	r5, #0
   113a0:	mov	r6, #16
   113a4:	ldr	r0, [r1]
   113a8:	mov	r9, #0
   113ac:	bl	155a8 <__assert_fail@plt+0x4248>
   113b0:	ldr	r1, [pc, #1008]	; 117a8 <__assert_fail@plt+0x448>
   113b4:	mov	r0, #6
   113b8:	bl	1127c <setlocale@plt>
   113bc:	ldr	r1, [pc, #1000]	; 117ac <__assert_fail@plt+0x44c>
   113c0:	ldr	r0, [pc, #1000]	; 117b0 <__assert_fail@plt+0x450>
   113c4:	bl	112e8 <bindtextdomain@plt>
   113c8:	ldr	r0, [pc, #992]	; 117b0 <__assert_fail@plt+0x450>
   113cc:	bl	110f0 <textdomain@plt>
   113d0:	ldr	r0, [pc, #988]	; 117b4 <__assert_fail@plt+0x454>
   113d4:	bl	181e8 <__assert_fail@plt+0x6e88>
   113d8:	mov	r0, sl
   113dc:	ldr	fp, [pc, #980]	; 117b8 <__assert_fail@plt+0x458>
   113e0:	bl	11c78 <__assert_fail@plt+0x918>
   113e4:	mov	r4, #0
   113e8:	ldr	r3, [pc, #972]	; 117bc <__assert_fail@plt+0x45c>
   113ec:	mov	r1, r8
   113f0:	mov	r0, r7
   113f4:	ldr	r2, [pc, #964]	; 117c0 <__assert_fail@plt+0x460>
   113f8:	str	r4, [sp]
   113fc:	bl	111b0 <getopt_long@plt>
   11400:	cmn	r0, #1
   11404:	bne	11448 <__assert_fail@plt+0xe8>
   11408:	ldrb	r3, [sp, #20]
   1140c:	cmp	r3, r4
   11410:	beq	1157c <__assert_fail@plt+0x21c>
   11414:	cmp	r6, #16
   11418:	bne	11580 <__assert_fail@plt+0x220>
   1141c:	cmp	r5, #1
   11420:	movne	r5, r4
   11424:	bne	11580 <__assert_fail@plt+0x220>
   11428:	mov	r2, #5
   1142c:	ldr	r1, [pc, #912]	; 117c4 <__assert_fail@plt+0x464>
   11430:	mov	r0, r4
   11434:	bl	110d8 <dcgettext@plt>
   11438:	mov	r2, r0
   1143c:	mov	r1, r4
   11440:	mov	r0, r5
   11444:	bl	11168 <error@plt>
   11448:	cmp	r0, #99	; 0x63
   1144c:	beq	11504 <__assert_fail@plt+0x1a4>
   11450:	bgt	1149c <__assert_fail@plt+0x13c>
   11454:	cmp	r0, #72	; 0x48
   11458:	beq	1154c <__assert_fail@plt+0x1ec>
   1145c:	bgt	1147c <__assert_fail@plt+0x11c>
   11460:	cmn	r0, #3
   11464:	beq	11518 <__assert_fail@plt+0x1b8>
   11468:	cmn	r0, #2
   1146c:	moveq	r0, r4
   11470:	beq	11478 <__assert_fail@plt+0x118>
   11474:	mov	r0, #1
   11478:	bl	118f0 <__assert_fail@plt+0x590>
   1147c:	cmp	r0, #80	; 0x50
   11480:	beq	11554 <__assert_fail@plt+0x1f4>
   11484:	cmp	r0, #82	; 0x52
   11488:	beq	114f8 <__assert_fail@plt+0x198>
   1148c:	cmp	r0, #76	; 0x4c
   11490:	bne	11474 <__assert_fail@plt+0x114>
   11494:	mov	r6, #2
   11498:	b	113e4 <__assert_fail@plt+0x84>
   1149c:	cmp	r0, #256	; 0x100
   114a0:	beq	1155c <__assert_fail@plt+0x1fc>
   114a4:	bgt	114cc <__assert_fail@plt+0x16c>
   114a8:	cmp	r0, #104	; 0x68
   114ac:	beq	11564 <__assert_fail@plt+0x204>
   114b0:	cmp	r0, #118	; 0x76
   114b4:	beq	11510 <__assert_fail@plt+0x1b0>
   114b8:	cmp	r0, #102	; 0x66
   114bc:	bne	11474 <__assert_fail@plt+0x114>
   114c0:	mov	r3, #1
   114c4:	strb	r3, [sp, #29]
   114c8:	b	113e4 <__assert_fail@plt+0x84>
   114cc:	movw	r3, #258	; 0x102
   114d0:	cmp	r0, r3
   114d4:	beq	1156c <__assert_fail@plt+0x20c>
   114d8:	blt	11574 <__assert_fail@plt+0x214>
   114dc:	movw	r3, #259	; 0x103
   114e0:	cmp	r0, r3
   114e4:	bne	11474 <__assert_fail@plt+0x114>
   114e8:	ldr	r3, [pc, #728]	; 117c8 <__assert_fail@plt+0x468>
   114ec:	ldr	r3, [r3]
   114f0:	str	r3, [fp]
   114f4:	b	113e4 <__assert_fail@plt+0x84>
   114f8:	mov	r3, #1
   114fc:	strb	r3, [sp, #20]
   11500:	b	113e4 <__assert_fail@plt+0x84>
   11504:	mov	r3, #1
   11508:	str	r3, [sp, #16]
   1150c:	b	113e4 <__assert_fail@plt+0x84>
   11510:	str	r4, [sp, #16]
   11514:	b	113e4 <__assert_fail@plt+0x84>
   11518:	ldr	r3, [pc, #684]	; 117cc <__assert_fail@plt+0x46c>
   1151c:	ldr	r0, [pc, #684]	; 117d0 <__assert_fail@plt+0x470>
   11520:	ldr	r2, [pc, #684]	; 117d4 <__assert_fail@plt+0x474>
   11524:	stmib	sp, {r3, r4}
   11528:	ldr	r3, [pc, #680]	; 117d8 <__assert_fail@plt+0x478>
   1152c:	ldr	r1, [pc, #680]	; 117dc <__assert_fail@plt+0x47c>
   11530:	str	r3, [sp]
   11534:	ldr	r3, [pc, #676]	; 117e0 <__assert_fail@plt+0x480>
   11538:	ldr	r0, [r0]
   1153c:	ldr	r3, [r3]
   11540:	bl	17070 <__assert_fail@plt+0x5d10>
   11544:	mov	r0, r4
   11548:	bl	111c8 <exit@plt>
   1154c:	mov	r6, #17
   11550:	b	113e4 <__assert_fail@plt+0x84>
   11554:	mov	r6, #16
   11558:	b	113e4 <__assert_fail@plt+0x84>
   1155c:	mov	r5, #1
   11560:	b	113e4 <__assert_fail@plt+0x84>
   11564:	mov	r5, r4
   11568:	b	113e4 <__assert_fail@plt+0x84>
   1156c:	mov	r9, #1
   11570:	b	113e4 <__assert_fail@plt+0x84>
   11574:	mov	r9, r4
   11578:	b	113e4 <__assert_fail@plt+0x84>
   1157c:	mov	r6, #16
   11580:	ldr	r1, [pc, #560]	; 117b8 <__assert_fail@plt+0x458>
   11584:	adds	r5, r5, #0
   11588:	movne	r5, #1
   1158c:	ldr	r4, [pc, #592]	; 117e4 <__assert_fail@plt+0x484>
   11590:	strb	r5, [sp, #28]
   11594:	ldr	fp, [r1]
   11598:	ldr	r3, [r4]
   1159c:	cmp	fp, #0
   115a0:	sub	r2, r7, r3
   115a4:	bne	11754 <__assert_fail@plt+0x3f4>
   115a8:	cmp	r2, #1
   115ac:	bgt	11668 <__assert_fail@plt+0x308>
   115b0:	cmp	r3, r7
   115b4:	mov	r2, #5
   115b8:	blt	115dc <__assert_fail@plt+0x27c>
   115bc:	ldr	r1, [pc, #548]	; 117e8 <__assert_fail@plt+0x488>
   115c0:	mov	r0, #0
   115c4:	bl	110d8 <dcgettext@plt>
   115c8:	mov	r1, #0
   115cc:	mov	r2, r0
   115d0:	mov	r0, r1
   115d4:	bl	11168 <error@plt>
   115d8:	b	11474 <__assert_fail@plt+0x114>
   115dc:	ldr	r1, [pc, #520]	; 117ec <__assert_fail@plt+0x48c>
   115e0:	mov	r0, #0
   115e4:	sub	r7, r7, #-1073741823	; 0xc0000001
   115e8:	bl	110d8 <dcgettext@plt>
   115ec:	mov	r4, r0
   115f0:	ldr	r0, [r8, r7, lsl #2]
   115f4:	bl	16ba8 <__assert_fail@plt+0x5848>
   115f8:	mov	r1, #0
   115fc:	mov	r3, r0
   11600:	mov	r2, r4
   11604:	mov	r0, r1
   11608:	bl	11168 <error@plt>
   1160c:	b	11474 <__assert_fail@plt+0x114>
   11610:	ldr	r5, [sp, #68]	; 0x44
   11614:	mov	r0, r5
   11618:	bl	11cbc <__assert_fail@plt+0x95c>
   1161c:	str	r0, [sp, #36]	; 0x24
   11620:	ldrb	r3, [sp, #20]
   11624:	tst	r9, r3
   11628:	beq	11728 <__assert_fail@plt+0x3c8>
   1162c:	ldr	r0, [pc, #444]	; 117f0 <__assert_fail@plt+0x490>
   11630:	bl	16bb4 <__assert_fail@plt+0x5854>
   11634:	cmp	r0, #0
   11638:	mov	r7, r0
   1163c:	str	r0, [sp, #24]
   11640:	bne	11728 <__assert_fail@plt+0x3c8>
   11644:	bl	11204 <__errno_location@plt>
   11648:	ldr	r1, [pc, #420]	; 117f4 <__assert_fail@plt+0x494>
   1164c:	mov	r2, #5
   11650:	ldr	r4, [r0]
   11654:	mov	r0, r7
   11658:	bl	110d8 <dcgettext@plt>
   1165c:	mov	r5, r0
   11660:	ldr	r1, [pc, #400]	; 117f8 <__assert_fail@plt+0x498>
   11664:	b	11790 <__assert_fail@plt+0x430>
   11668:	ldr	r5, [r8, r3, lsl #2]
   1166c:	add	r2, r3, #1
   11670:	str	r2, [r4]
   11674:	ldrb	r3, [r5]
   11678:	cmp	r3, #0
   1167c:	beq	1168c <__assert_fail@plt+0x32c>
   11680:	mov	r0, r5
   11684:	bl	173d4 <__assert_fail@plt+0x6074>
   11688:	mov	fp, r0
   1168c:	str	fp, [sp, #36]	; 0x24
   11690:	ldrb	r3, [r5]
   11694:	cmp	r3, #0
   11698:	mvneq	r5, #0
   1169c:	beq	11620 <__assert_fail@plt+0x2c0>
   116a0:	mov	r0, r5
   116a4:	bl	11354 <getgrnam@plt>
   116a8:	subs	r1, r0, #0
   116ac:	ldrne	r5, [r1, #8]
   116b0:	bne	11720 <__assert_fail@plt+0x3c0>
   116b4:	mov	r2, #10
   116b8:	mov	r0, r5
   116bc:	ldr	r3, [pc, #228]	; 117a8 <__assert_fail@plt+0x448>
   116c0:	str	r3, [sp]
   116c4:	add	r3, sp, #40	; 0x28
   116c8:	bl	17544 <__assert_fail@plt+0x61e4>
   116cc:	cmp	r0, #0
   116d0:	bne	116f0 <__assert_fail@plt+0x390>
   116d4:	ldrd	r0, [sp, #40]	; 0x28
   116d8:	mov	r3, #0
   116dc:	mvn	r2, #0
   116e0:	cmp	r1, r3
   116e4:	cmpeq	r0, r2
   116e8:	movls	r5, r0
   116ec:	bls	11720 <__assert_fail@plt+0x3c0>
   116f0:	mov	r2, #5
   116f4:	ldr	r1, [pc, #256]	; 117fc <__assert_fail@plt+0x49c>
   116f8:	mov	r0, #0
   116fc:	bl	110d8 <dcgettext@plt>
   11700:	mov	r4, r0
   11704:	mov	r0, r5
   11708:	bl	16ba8 <__assert_fail@plt+0x5848>
   1170c:	mov	r3, r0
   11710:	mov	r2, r4
   11714:	mov	r1, #0
   11718:	mov	r0, #1
   1171c:	bl	11168 <error@plt>
   11720:	bl	11024 <endgrent@plt>
   11724:	b	11620 <__assert_fail@plt+0x2c0>
   11728:	ldr	r0, [r4]
   1172c:	mvn	r2, #0
   11730:	mov	r3, r5
   11734:	orr	r1, r6, #1024	; 0x400
   11738:	str	r2, [sp]
   1173c:	stmib	sp, {r2, sl}
   11740:	add	r0, r8, r0, lsl #2
   11744:	bl	11d24 <__assert_fail@plt+0x9c4>
   11748:	eor	r0, r0, #1
   1174c:	uxtb	r0, r0
   11750:	b	11548 <__assert_fail@plt+0x1e8>
   11754:	cmp	r2, #0
   11758:	ble	115b0 <__assert_fail@plt+0x250>
   1175c:	add	r1, sp, #40	; 0x28
   11760:	mov	r0, fp
   11764:	bl	18200 <__assert_fail@plt+0x6ea0>
   11768:	cmp	r0, #0
   1176c:	beq	11610 <__assert_fail@plt+0x2b0>
   11770:	bl	11204 <__errno_location@plt>
   11774:	ldr	r1, [pc, #120]	; 117f4 <__assert_fail@plt+0x494>
   11778:	mov	r2, #5
   1177c:	ldr	r4, [r0]
   11780:	mov	r0, #0
   11784:	bl	110d8 <dcgettext@plt>
   11788:	mov	r5, r0
   1178c:	mov	r1, fp
   11790:	mov	r0, #4
   11794:	bl	169c4 <__assert_fail@plt+0x5664>
   11798:	mov	r3, r0
   1179c:	mov	r2, r5
   117a0:	mov	r1, r4
   117a4:	b	11718 <__assert_fail@plt+0x3b8>
   117a8:	andeq	r8, r1, r2, lsl #19
   117ac:	andeq	r8, r1, r1, asr fp
   117b0:	andeq	r8, r1, lr, lsr #21
   117b4:	andeq	r2, r1, r8, lsr #17
   117b8:	andeq	sl, r2, r0, lsr #3
   117bc:	muleq	r1, ip, r2
   117c0:	andeq	r8, r1, r6, lsl #23
   117c4:	andeq	r8, r1, pc, lsl #23
   117c8:	muleq	r2, r8, r1
   117cc:	andeq	r8, r1, r9, ror #22
   117d0:	muleq	r2, r4, r1
   117d4:	andeq	r8, r1, sl, lsr #21
   117d8:	andeq	r8, r1, r6, ror fp
   117dc:	andeq	r8, r1, ip, ror #6
   117e0:	andeq	sl, r2, r8, lsr r1
   117e4:	andeq	sl, r2, r8, lsl #3
   117e8:			; <UNDEFINED> instruction: 0x00018bb9
   117ec:	andeq	r8, r1, r9, asr #23
   117f0:	andeq	sl, r2, r8, lsr #3
   117f4:	andeq	r8, r1, r2, ror #23
   117f8:	andeq	r9, r1, r0, lsl #10
   117fc:	andeq	r8, r1, r1, lsl #24
   11800:	mov	fp, #0
   11804:	mov	lr, #0
   11808:	pop	{r1}		; (ldr r1, [sp], #4)
   1180c:	mov	r2, sp
   11810:	push	{r2}		; (str r2, [sp, #-4]!)
   11814:	push	{r0}		; (str r0, [sp, #-4]!)
   11818:	ldr	ip, [pc, #16]	; 11830 <__assert_fail@plt+0x4d0>
   1181c:	push	{ip}		; (str ip, [sp, #-4]!)
   11820:	ldr	r0, [pc, #12]	; 11834 <__assert_fail@plt+0x4d4>
   11824:	ldr	r3, [pc, #12]	; 11838 <__assert_fail@plt+0x4d8>
   11828:	bl	1118c <__libc_start_main@plt>
   1182c:	bl	11318 <abort@plt>
   11830:	andeq	r8, r1, r4, ror #3
   11834:	andeq	r1, r1, r8, lsl #7
   11838:	andeq	r8, r1, r4, lsl #3
   1183c:	ldr	r3, [pc, #20]	; 11858 <__assert_fail@plt+0x4f8>
   11840:	ldr	r2, [pc, #20]	; 1185c <__assert_fail@plt+0x4fc>
   11844:	add	r3, pc, r3
   11848:	ldr	r2, [r3, r2]
   1184c:	cmp	r2, #0
   11850:	bxeq	lr
   11854:	b	111a4 <__gmon_start__@plt>
   11858:			; <UNDEFINED> instruction: 0x000187b4
   1185c:	andeq	r0, r0, ip, lsr #2
   11860:	ldr	r0, [pc, #24]	; 11880 <__assert_fail@plt+0x520>
   11864:	ldr	r3, [pc, #24]	; 11884 <__assert_fail@plt+0x524>
   11868:	cmp	r3, r0
   1186c:	bxeq	lr
   11870:	ldr	r3, [pc, #16]	; 11888 <__assert_fail@plt+0x528>
   11874:	cmp	r3, #0
   11878:	bxeq	lr
   1187c:	bx	r3
   11880:	andeq	sl, r2, r0, lsl #3
   11884:	andeq	sl, r2, r0, lsl #3
   11888:	andeq	r0, r0, r0
   1188c:	ldr	r0, [pc, #36]	; 118b8 <__assert_fail@plt+0x558>
   11890:	ldr	r1, [pc, #36]	; 118bc <__assert_fail@plt+0x55c>
   11894:	sub	r1, r1, r0
   11898:	asr	r1, r1, #2
   1189c:	add	r1, r1, r1, lsr #31
   118a0:	asrs	r1, r1, #1
   118a4:	bxeq	lr
   118a8:	ldr	r3, [pc, #16]	; 118c0 <__assert_fail@plt+0x560>
   118ac:	cmp	r3, #0
   118b0:	bxeq	lr
   118b4:	bx	r3
   118b8:	andeq	sl, r2, r0, lsl #3
   118bc:	andeq	sl, r2, r0, lsl #3
   118c0:	andeq	r0, r0, r0
   118c4:	push	{r4, lr}
   118c8:	ldr	r4, [pc, #24]	; 118e8 <__assert_fail@plt+0x588>
   118cc:	ldrb	r3, [r4]
   118d0:	cmp	r3, #0
   118d4:	popne	{r4, pc}
   118d8:	bl	11860 <__assert_fail@plt+0x500>
   118dc:	mov	r3, #1
   118e0:	strb	r3, [r4]
   118e4:	pop	{r4, pc}
   118e8:	muleq	r2, ip, r1
   118ec:	b	1188c <__assert_fail@plt+0x52c>
   118f0:	subs	r5, r0, #0
   118f4:	push	{r7, lr}
   118f8:	sub	sp, sp, #56	; 0x38
   118fc:	ldr	r6, [pc, #656]	; 11b94 <__assert_fail@plt+0x834>
   11900:	beq	11938 <__assert_fail@plt+0x5d8>
   11904:	mov	r2, #5
   11908:	mov	r0, #0
   1190c:	ldr	r3, [pc, #644]	; 11b98 <__assert_fail@plt+0x838>
   11910:	ldr	r1, [pc, #644]	; 11b9c <__assert_fail@plt+0x83c>
   11914:	ldr	r4, [r3]
   11918:	bl	110d8 <dcgettext@plt>
   1191c:	mov	r2, r0
   11920:	mov	r1, #1
   11924:	ldr	r3, [r6]
   11928:	mov	r0, r4
   1192c:	bl	1124c <__fprintf_chk@plt>
   11930:	mov	r0, r5
   11934:	bl	111c8 <exit@plt>
   11938:	mov	r2, #5
   1193c:	ldr	r1, [pc, #604]	; 11ba0 <__assert_fail@plt+0x840>
   11940:	bl	110d8 <dcgettext@plt>
   11944:	ldr	r3, [r6]
   11948:	mov	r1, r0
   1194c:	mov	r0, #1
   11950:	ldr	r4, [pc, #588]	; 11ba4 <__assert_fail@plt+0x844>
   11954:	ldr	r7, [pc, #588]	; 11ba8 <__assert_fail@plt+0x848>
   11958:	mov	r2, r3
   1195c:	bl	11228 <__printf_chk@plt>
   11960:	mov	r2, #5
   11964:	ldr	r1, [pc, #576]	; 11bac <__assert_fail@plt+0x84c>
   11968:	mov	r0, r5
   1196c:	bl	110d8 <dcgettext@plt>
   11970:	ldr	r1, [r4]
   11974:	bl	11030 <fputs_unlocked@plt>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #556]	; 11bb0 <__assert_fail@plt+0x850>
   11980:	mov	r0, r5
   11984:	bl	110d8 <dcgettext@plt>
   11988:	ldr	r1, [r4]
   1198c:	bl	11030 <fputs_unlocked@plt>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #536]	; 11bb4 <__assert_fail@plt+0x854>
   11998:	mov	r0, r5
   1199c:	bl	110d8 <dcgettext@plt>
   119a0:	ldr	r1, [r4]
   119a4:	bl	11030 <fputs_unlocked@plt>
   119a8:	mov	r2, #5
   119ac:	ldr	r1, [pc, #516]	; 11bb8 <__assert_fail@plt+0x858>
   119b0:	mov	r0, r5
   119b4:	bl	110d8 <dcgettext@plt>
   119b8:	ldr	r1, [r4]
   119bc:	bl	11030 <fputs_unlocked@plt>
   119c0:	mov	r2, #5
   119c4:	ldr	r1, [pc, #496]	; 11bbc <__assert_fail@plt+0x85c>
   119c8:	mov	r0, r5
   119cc:	bl	110d8 <dcgettext@plt>
   119d0:	ldr	r1, [r4]
   119d4:	bl	11030 <fputs_unlocked@plt>
   119d8:	mov	r2, #5
   119dc:	ldr	r1, [pc, #476]	; 11bc0 <__assert_fail@plt+0x860>
   119e0:	mov	r0, r5
   119e4:	bl	110d8 <dcgettext@plt>
   119e8:	ldr	r1, [r4]
   119ec:	bl	11030 <fputs_unlocked@plt>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #456]	; 11bc4 <__assert_fail@plt+0x864>
   119f8:	mov	r0, r5
   119fc:	bl	110d8 <dcgettext@plt>
   11a00:	ldr	r1, [r4]
   11a04:	bl	11030 <fputs_unlocked@plt>
   11a08:	mov	r2, #5
   11a0c:	ldr	r1, [pc, #436]	; 11bc8 <__assert_fail@plt+0x868>
   11a10:	mov	r0, r5
   11a14:	bl	110d8 <dcgettext@plt>
   11a18:	ldr	r1, [r4]
   11a1c:	bl	11030 <fputs_unlocked@plt>
   11a20:	mov	r2, #5
   11a24:	ldr	r1, [pc, #416]	; 11bcc <__assert_fail@plt+0x86c>
   11a28:	mov	r0, r5
   11a2c:	bl	110d8 <dcgettext@plt>
   11a30:	ldr	r1, [r4]
   11a34:	bl	11030 <fputs_unlocked@plt>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #396]	; 11bd0 <__assert_fail@plt+0x870>
   11a40:	mov	r0, r5
   11a44:	bl	110d8 <dcgettext@plt>
   11a48:	ldr	r1, [r4]
   11a4c:	bl	11030 <fputs_unlocked@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #376]	; 11bd4 <__assert_fail@plt+0x874>
   11a58:	mov	r0, r5
   11a5c:	bl	110d8 <dcgettext@plt>
   11a60:	ldr	r3, [r6]
   11a64:	mov	r1, r0
   11a68:	mov	r0, #1
   11a6c:	mov	r6, sp
   11a70:	mov	r2, r3
   11a74:	bl	11228 <__printf_chk@plt>
   11a78:	ldr	lr, [pc, #344]	; 11bd8 <__assert_fail@plt+0x878>
   11a7c:	mov	ip, sp
   11a80:	ldm	lr!, {r0, r1, r2, r3}
   11a84:	stmia	ip!, {r0, r1, r2, r3}
   11a88:	ldm	lr!, {r0, r1, r2, r3}
   11a8c:	stmia	ip!, {r0, r1, r2, r3}
   11a90:	ldm	lr!, {r0, r1, r2, r3}
   11a94:	stmia	ip!, {r0, r1, r2, r3}
   11a98:	ldm	lr, {r0, r1}
   11a9c:	stm	ip, {r0, r1}
   11aa0:	ldr	r1, [r6]
   11aa4:	cmp	r1, #0
   11aa8:	bne	11b4c <__assert_fail@plt+0x7ec>
   11aac:	ldr	r6, [r6, #4]
   11ab0:	mov	r2, #5
   11ab4:	mov	r0, #0
   11ab8:	ldr	r7, [pc, #232]	; 11ba8 <__assert_fail@plt+0x848>
   11abc:	ldr	r1, [pc, #280]	; 11bdc <__assert_fail@plt+0x87c>
   11ac0:	cmp	r6, #0
   11ac4:	moveq	r6, r7
   11ac8:	bl	110d8 <dcgettext@plt>
   11acc:	mov	r1, r0
   11ad0:	ldr	r3, [pc, #264]	; 11be0 <__assert_fail@plt+0x880>
   11ad4:	mov	r0, #1
   11ad8:	ldr	r2, [pc, #260]	; 11be4 <__assert_fail@plt+0x884>
   11adc:	bl	11228 <__printf_chk@plt>
   11ae0:	mov	r1, #0
   11ae4:	mov	r0, #5
   11ae8:	bl	1127c <setlocale@plt>
   11aec:	cmp	r0, #0
   11af0:	bne	11b64 <__assert_fail@plt+0x804>
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #232]	; 11be8 <__assert_fail@plt+0x888>
   11afc:	mov	r0, #0
   11b00:	bl	110d8 <dcgettext@plt>
   11b04:	mov	r1, r0
   11b08:	ldr	r3, [pc, #152]	; 11ba8 <__assert_fail@plt+0x848>
   11b0c:	mov	r0, #1
   11b10:	ldr	r2, [pc, #200]	; 11be0 <__assert_fail@plt+0x880>
   11b14:	bl	11228 <__printf_chk@plt>
   11b18:	mov	r2, #5
   11b1c:	ldr	r1, [pc, #200]	; 11bec <__assert_fail@plt+0x88c>
   11b20:	mov	r0, #0
   11b24:	bl	110d8 <dcgettext@plt>
   11b28:	ldr	r2, [pc, #192]	; 11bf0 <__assert_fail@plt+0x890>
   11b2c:	cmp	r6, r7
   11b30:	mov	r1, r0
   11b34:	mov	r0, #1
   11b38:	ldr	r3, [pc, #180]	; 11bf4 <__assert_fail@plt+0x894>
   11b3c:	moveq	r3, r2
   11b40:	mov	r2, r6
   11b44:	bl	11228 <__printf_chk@plt>
   11b48:	b	11930 <__assert_fail@plt+0x5d0>
   11b4c:	mov	r0, r7
   11b50:	bl	11048 <strcmp@plt>
   11b54:	cmp	r0, #0
   11b58:	beq	11aac <__assert_fail@plt+0x74c>
   11b5c:	add	r6, r6, #8
   11b60:	b	11aa0 <__assert_fail@plt+0x740>
   11b64:	mov	r2, #3
   11b68:	ldr	r1, [pc, #136]	; 11bf8 <__assert_fail@plt+0x898>
   11b6c:	bl	1130c <strncmp@plt>
   11b70:	cmp	r0, #0
   11b74:	beq	11af4 <__assert_fail@plt+0x794>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #120]	; 11bfc <__assert_fail@plt+0x89c>
   11b80:	mov	r0, #0
   11b84:	bl	110d8 <dcgettext@plt>
   11b88:	ldr	r1, [r4]
   11b8c:	bl	11030 <fputs_unlocked@plt>
   11b90:	b	11af4 <__assert_fail@plt+0x794>
   11b94:	andeq	sl, r2, r0, asr #3
   11b98:	muleq	r2, r0, r1
   11b9c:	andeq	r8, r1, r2, ror r3
   11ba0:	muleq	r1, r9, r3
   11ba4:	muleq	r2, r4, r1
   11ba8:	andeq	r8, r1, ip, ror #6
   11bac:	andeq	r8, r1, lr, ror #7
   11bb0:	andeq	r8, r1, sl, asr r4
   11bb4:	andeq	r8, r1, r3, lsr #10
   11bb8:	andeq	r8, r1, sl, lsl #12
   11bbc:	andeq	r8, r1, r1, lsl #13
   11bc0:	andeq	r8, r1, r1, lsl #14
   11bc4:	andeq	r8, r1, fp, ror #14
   11bc8:			; <UNDEFINED> instruction: 0x000187b2
   11bcc:	andeq	r8, r1, r3, lsl #19
   11bd0:			; <UNDEFINED> instruction: 0x000189b0
   11bd4:	andeq	r8, r1, r6, ror #19
   11bd8:	andeq	r8, r1, r4, ror #4
   11bdc:	andeq	r8, r1, fp, ror #20
   11be0:	andeq	r8, r1, r2, lsl #21
   11be4:	andeq	r8, r1, sl, lsr #21
   11be8:	andeq	r8, r1, r3, lsl #22
   11bec:	andeq	r8, r1, lr, lsl fp
   11bf0:	andeq	r8, r1, pc, lsr #24
   11bf4:	andeq	r8, r1, r2, lsl #19
   11bf8:			; <UNDEFINED> instruction: 0x00018ab8
   11bfc:			; <UNDEFINED> instruction: 0x00018abc
   11c00:	push	{r4, r5, r6, lr}
   11c04:	subs	r6, r0, #0
   11c08:	mov	r4, r1
   11c0c:	beq	11c60 <__assert_fail@plt+0x900>
   11c10:	cmp	r1, #0
   11c14:	beq	11c6c <__assert_fail@plt+0x90c>
   11c18:	bl	111d4 <strlen@plt>
   11c1c:	mov	r5, r0
   11c20:	mov	r0, r4
   11c24:	bl	111d4 <strlen@plt>
   11c28:	add	r0, r5, r0
   11c2c:	add	r0, r0, #2
   11c30:	bl	17138 <__assert_fail@plt+0x5dd8>
   11c34:	mov	r1, r6
   11c38:	mov	r5, r0
   11c3c:	bl	110c0 <stpcpy@plt>
   11c40:	ldr	r3, [pc, #44]	; 11c74 <__assert_fail@plt+0x914>
   11c44:	mov	r1, r4
   11c48:	mov	r4, r5
   11c4c:	ldrh	r3, [r3]
   11c50:	strh	r3, [r0], #1
   11c54:	bl	11138 <strcpy@plt>
   11c58:	mov	r0, r4
   11c5c:	pop	{r4, r5, r6, pc}
   11c60:	cmp	r1, #0
   11c64:	beq	11c58 <__assert_fail@plt+0x8f8>
   11c68:	mov	r0, r1
   11c6c:	pop	{r4, r5, r6, lr}
   11c70:	b	173d4 <__assert_fail@plt+0x6074>
   11c74:	andeq	r8, r1, r6, asr #25
   11c78:	mov	r3, #2
   11c7c:	mov	r2, #1
   11c80:	str	r3, [r0]
   11c84:	mov	r3, #0
   11c88:	strb	r3, [r0, #4]
   11c8c:	str	r3, [r0, #8]
   11c90:	strh	r2, [r0, #12]
   11c94:	str	r3, [r0, #16]
   11c98:	str	r3, [r0, #20]
   11c9c:	bx	lr
   11ca0:	push	{r4, lr}
   11ca4:	mov	r4, r0
   11ca8:	ldr	r0, [r0, #16]
   11cac:	bl	1297c <__assert_fail@plt+0x161c>
   11cb0:	ldr	r0, [r4, #20]
   11cb4:	pop	{r4, lr}
   11cb8:	b	1297c <__assert_fail@plt+0x161c>
   11cbc:	push	{r4, lr}
   11cc0:	sub	sp, sp, #24
   11cc4:	mov	r4, r0
   11cc8:	bl	11348 <getgrgid@plt>
   11ccc:	subs	r1, r0, #0
   11cd0:	ldrne	r0, [r1]
   11cd4:	bne	11ce4 <__assert_fail@plt+0x984>
   11cd8:	mov	r2, sp
   11cdc:	mov	r0, r4
   11ce0:	bl	154bc <__assert_fail@plt+0x415c>
   11ce4:	bl	173d4 <__assert_fail@plt+0x6074>
   11ce8:	add	sp, sp, #24
   11cec:	pop	{r4, pc}
   11cf0:	push	{r4, lr}
   11cf4:	sub	sp, sp, #24
   11cf8:	mov	r4, r0
   11cfc:	bl	11054 <getpwuid@plt>
   11d00:	subs	r1, r0, #0
   11d04:	ldrne	r0, [r1]
   11d08:	bne	11d18 <__assert_fail@plt+0x9b8>
   11d0c:	mov	r2, sp
   11d10:	mov	r0, r4
   11d14:	bl	154bc <__assert_fail@plt+0x415c>
   11d18:	bl	173d4 <__assert_fail@plt+0x6074>
   11d1c:	add	sp, sp, #24
   11d20:	pop	{r4, pc}
   11d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d28:	sub	sp, sp, #252	; 0xfc
   11d2c:	str	r2, [sp, #20]
   11d30:	str	r3, [sp, #28]
   11d34:	ldr	r3, [sp, #288]	; 0x120
   11d38:	ldr	r2, [sp, #292]	; 0x124
   11d3c:	ldr	r7, [sp, #296]	; 0x128
   11d40:	and	r3, r3, r2
   11d44:	cmn	r3, #1
   11d48:	str	r3, [sp, #32]
   11d4c:	bne	11e24 <__assert_fail@plt+0xac4>
   11d50:	ldrb	r3, [r7, #12]
   11d54:	cmp	r3, #0
   11d58:	bne	11e24 <__assert_fail@plt+0xac4>
   11d5c:	ldr	r3, [r7]
   11d60:	cmp	r3, #2
   11d64:	movne	r3, #0
   11d68:	moveq	r3, #8
   11d6c:	orr	r1, r3, r1
   11d70:	mov	r2, #0
   11d74:	bl	17430 <__assert_fail@plt+0x60d0>
   11d78:	mov	r3, #1
   11d7c:	str	r0, [sp, #8]
   11d80:	ldr	r0, [sp, #8]
   11d84:	str	r3, [sp, #12]
   11d88:	bl	13f84 <__assert_fail@plt+0x2c24>
   11d8c:	subs	r9, r0, #0
   11d90:	bne	11e2c <__assert_fail@plt+0xacc>
   11d94:	bl	11204 <__errno_location@plt>
   11d98:	ldr	r5, [r0]
   11d9c:	mov	r4, r0
   11da0:	cmp	r5, #0
   11da4:	beq	11ddc <__assert_fail@plt+0xa7c>
   11da8:	ldrb	r3, [r7, #13]
   11dac:	cmp	r3, #0
   11db0:	str	r3, [sp, #12]
   11db4:	strne	r9, [sp, #12]
   11db8:	bne	11ddc <__assert_fail@plt+0xa7c>
   11dbc:	mov	r2, #5
   11dc0:	ldr	r1, [pc, #2604]	; 127f4 <__assert_fail@plt+0x1494>
   11dc4:	mov	r0, r3
   11dc8:	bl	110d8 <dcgettext@plt>
   11dcc:	mov	r2, r0
   11dd0:	mov	r1, r5
   11dd4:	ldr	r0, [sp, #12]
   11dd8:	bl	11168 <error@plt>
   11ddc:	ldr	r0, [sp, #8]
   11de0:	bl	13e6c <__assert_fail@plt+0x2b0c>
   11de4:	cmp	r0, #0
   11de8:	beq	11e18 <__assert_fail@plt+0xab8>
   11dec:	ldr	r4, [r4]
   11df0:	mov	r2, #5
   11df4:	mov	r0, #0
   11df8:	ldr	r1, [pc, #2552]	; 127f8 <__assert_fail@plt+0x1498>
   11dfc:	bl	110d8 <dcgettext@plt>
   11e00:	mov	r2, r0
   11e04:	mov	r0, #0
   11e08:	mov	r1, r4
   11e0c:	bl	11168 <error@plt>
   11e10:	mov	r3, #0
   11e14:	str	r3, [sp, #12]
   11e18:	ldr	r0, [sp, #12]
   11e1c:	add	sp, sp, #252	; 0xfc
   11e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e24:	mov	r3, #0
   11e28:	b	11d6c <__assert_fail@plt+0xa0c>
   11e2c:	ldrh	r3, [r9, #56]	; 0x38
   11e30:	ldr	fp, [r9, #28]
   11e34:	sub	r3, r3, #1
   11e38:	cmp	r3, #9
   11e3c:	ldrls	pc, [pc, r3, lsl #2]
   11e40:	b	11f98 <__assert_fail@plt+0xc38>
   11e44:	andeq	r1, r1, ip, ror #28
   11e48:	andeq	r2, r1, r4, lsr #2
   11e4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11e50:	andeq	r2, r1, r8, lsl #2
   11e54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11e58:	andeq	r1, r1, r8, lsl #31
   11e5c:	andeq	r2, r1, r0, asr #1
   11e60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11e64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11e68:	andeq	r2, r1, r0, rrx
   11e6c:	ldrb	r5, [r7, #4]
   11e70:	cmp	r5, #0
   11e74:	beq	11f98 <__assert_fail@plt+0xc38>
   11e78:	ldr	ip, [r7, #8]
   11e7c:	cmp	ip, #0
   11e80:	beq	11f2c <__assert_fail@plt+0xbcc>
   11e84:	ldrd	r2, [ip]
   11e88:	ldrd	r0, [r9, #160]	; 0xa0
   11e8c:	cmp	r1, r3
   11e90:	cmpeq	r0, r2
   11e94:	bne	11f2c <__assert_fail@plt+0xbcc>
   11e98:	ldrd	r0, [ip, #8]
   11e9c:	ldrd	r2, [r9, #64]	; 0x40
   11ea0:	cmp	r3, r1
   11ea4:	cmpeq	r2, r0
   11ea8:	bne	11f2c <__assert_fail@plt+0xbcc>
   11eac:	ldr	r1, [pc, #2376]	; 127fc <__assert_fail@plt+0x149c>
   11eb0:	mov	r0, fp
   11eb4:	bl	11048 <strcmp@plt>
   11eb8:	subs	r4, r0, #0
   11ebc:	mov	r2, #5
   11ec0:	bne	11f38 <__assert_fail@plt+0xbd8>
   11ec4:	ldr	r1, [pc, #2356]	; 12800 <__assert_fail@plt+0x14a0>
   11ec8:	bl	110d8 <dcgettext@plt>
   11ecc:	mov	r5, r0
   11ed0:	mov	r1, fp
   11ed4:	mov	r0, #4
   11ed8:	bl	169c4 <__assert_fail@plt+0x5664>
   11edc:	mov	r3, r0
   11ee0:	mov	r2, r5
   11ee4:	mov	r1, r4
   11ee8:	mov	r0, r4
   11eec:	bl	11168 <error@plt>
   11ef0:	mov	r2, #5
   11ef4:	ldr	r1, [pc, #2312]	; 12804 <__assert_fail@plt+0x14a4>
   11ef8:	mov	r0, #0
   11efc:	bl	110d8 <dcgettext@plt>
   11f00:	mov	r1, #0
   11f04:	mov	r2, r0
   11f08:	mov	r0, r1
   11f0c:	bl	11168 <error@plt>
   11f10:	mov	r2, #4
   11f14:	mov	r1, r9
   11f18:	ldr	r0, [sp, #8]
   11f1c:	bl	14548 <__assert_fail@plt+0x31e8>
   11f20:	ldr	r0, [sp, #8]
   11f24:	bl	13f84 <__assert_fail@plt+0x2c24>
   11f28:	mov	r5, #0
   11f2c:	ldr	r3, [sp, #12]
   11f30:	and	r3, r3, r5
   11f34:	b	11d80 <__assert_fail@plt+0xa20>
   11f38:	ldr	r1, [pc, #2248]	; 12808 <__assert_fail@plt+0x14a8>
   11f3c:	mov	r0, #0
   11f40:	bl	110d8 <dcgettext@plt>
   11f44:	mov	r4, r0
   11f48:	mov	r2, fp
   11f4c:	mov	r1, #4
   11f50:	mov	r0, #0
   11f54:	bl	16958 <__assert_fail@plt+0x55f8>
   11f58:	mov	r5, r0
   11f5c:	ldr	r2, [pc, #2200]	; 127fc <__assert_fail@plt+0x149c>
   11f60:	mov	r1, #4
   11f64:	mov	r0, #1
   11f68:	bl	16958 <__assert_fail@plt+0x55f8>
   11f6c:	mov	r1, #0
   11f70:	mov	r3, r5
   11f74:	str	r0, [sp]
   11f78:	mov	r2, r4
   11f7c:	mov	r0, r1
   11f80:	bl	11168 <error@plt>
   11f84:	b	11ef0 <__assert_fail@plt+0xb90>
   11f88:	ldrb	r3, [r7, #4]
   11f8c:	cmp	r3, #0
   11f90:	moveq	r5, #1
   11f94:	beq	11f2c <__assert_fail@plt+0xbcc>
   11f98:	ldr	r2, [sp, #32]
   11f9c:	add	r6, r9, #64	; 0x40
   11fa0:	ldr	r3, [r9, #24]
   11fa4:	cmn	r2, #1
   11fa8:	str	r3, [sp, #24]
   11fac:	ldrb	r3, [r7, #12]
   11fb0:	bne	12174 <__assert_fail@plt+0xe14>
   11fb4:	ldr	r2, [r7]
   11fb8:	cmp	r2, #2
   11fbc:	bne	12174 <__assert_fail@plt+0xe14>
   11fc0:	ldr	r2, [r7, #8]
   11fc4:	cmp	r2, #0
   11fc8:	bne	12174 <__assert_fail@plt+0xe14>
   11fcc:	cmp	r3, #0
   11fd0:	moveq	r4, #1
   11fd4:	beq	121c8 <__assert_fail@plt+0xe68>
   11fd8:	ldr	r3, [r9, #80]	; 0x50
   11fdc:	and	r3, r3, #61440	; 0xf000
   11fe0:	cmp	r3, #40960	; 0xa000
   11fe4:	bne	1217c <__assert_fail@plt+0xe1c>
   11fe8:	ldr	r0, [sp, #8]
   11fec:	mov	r3, #0
   11ff0:	add	r2, sp, #40	; 0x28
   11ff4:	ldr	r1, [sp, #24]
   11ff8:	ldr	r0, [r0, #32]
   11ffc:	bl	18230 <__assert_fail@plt+0x6ed0>
   12000:	cmp	r0, #0
   12004:	beq	12284 <__assert_fail@plt+0xf24>
   12008:	ldrb	r5, [r7, #13]
   1200c:	cmp	r5, #0
   12010:	movne	r5, #0
   12014:	bne	12054 <__assert_fail@plt+0xcf4>
   12018:	bl	11204 <__errno_location@plt>
   1201c:	ldr	r4, [r0]
   12020:	mov	r2, #5
   12024:	mov	r0, r5
   12028:	ldr	r1, [pc, #2012]	; 1280c <__assert_fail@plt+0x14ac>
   1202c:	bl	110d8 <dcgettext@plt>
   12030:	mov	r6, r0
   12034:	mov	r1, fp
   12038:	mov	r0, #4
   1203c:	bl	169c4 <__assert_fail@plt+0x5664>
   12040:	mov	r3, r0
   12044:	mov	r2, r6
   12048:	mov	r1, r4
   1204c:	mov	r0, r5
   12050:	bl	11168 <error@plt>
   12054:	add	r6, sp, #40	; 0x28
   12058:	mov	r4, r5
   1205c:	b	121c0 <__assert_fail@plt+0xe60>
   12060:	ldr	r3, [r9, #48]	; 0x30
   12064:	cmp	r3, #0
   12068:	bne	12084 <__assert_fail@plt+0xd24>
   1206c:	ldr	r3, [r9, #16]
   12070:	cmp	r3, #0
   12074:	moveq	r5, #1
   12078:	moveq	r2, r5
   1207c:	streq	r5, [r9, #16]
   12080:	beq	127dc <__assert_fail@plt+0x147c>
   12084:	ldrb	r4, [r7, #13]
   12088:	cmp	r4, #0
   1208c:	bne	120f4 <__assert_fail@plt+0xd94>
   12090:	ldr	r1, [pc, #1912]	; 12810 <__assert_fail@plt+0x14b0>
   12094:	mov	r2, #5
   12098:	ldr	r5, [r9, #32]
   1209c:	mov	r0, r4
   120a0:	bl	110d8 <dcgettext@plt>
   120a4:	mov	r6, r0
   120a8:	mov	r1, fp
   120ac:	mov	r0, #4
   120b0:	bl	169c4 <__assert_fail@plt+0x5664>
   120b4:	mov	r3, r0
   120b8:	mov	r2, r6
   120bc:	b	120e8 <__assert_fail@plt+0xd88>
   120c0:	ldrb	r4, [r7, #13]
   120c4:	cmp	r4, #0
   120c8:	bne	120f4 <__assert_fail@plt+0xd94>
   120cc:	mov	r2, fp
   120d0:	mov	r1, #3
   120d4:	ldr	r5, [r9, #32]
   120d8:	mov	r0, r4
   120dc:	bl	16a68 <__assert_fail@plt+0x5708>
   120e0:	ldr	r2, [pc, #1836]	; 12814 <__assert_fail@plt+0x14b4>
   120e4:	mov	r3, r0
   120e8:	mov	r1, r5
   120ec:	mov	r0, r4
   120f0:	bl	11168 <error@plt>
   120f4:	mov	r6, #0
   120f8:	mov	r8, #1
   120fc:	mov	r4, r6
   12100:	mov	r5, #0
   12104:	b	123b8 <__assert_fail@plt+0x1058>
   12108:	ldrb	r4, [r7, #13]
   1210c:	cmp	r4, #0
   12110:	bne	120f4 <__assert_fail@plt+0xd94>
   12114:	mov	r2, #5
   12118:	ldr	r1, [pc, #1784]	; 12818 <__assert_fail@plt+0x14b8>
   1211c:	ldr	r5, [r9, #32]
   12120:	b	1209c <__assert_fail@plt+0xd3c>
   12124:	mov	r1, r9
   12128:	ldr	r0, [sp, #8]
   1212c:	bl	17478 <__assert_fail@plt+0x6118>
   12130:	cmp	r0, #0
   12134:	beq	11f98 <__assert_fail@plt+0xc38>
   12138:	mov	r2, #5
   1213c:	ldr	r1, [pc, #1752]	; 1281c <__assert_fail@plt+0x14bc>
   12140:	mov	r0, #0
   12144:	bl	110d8 <dcgettext@plt>
   12148:	mov	r4, r0
   1214c:	mov	r2, fp
   12150:	mov	r1, #3
   12154:	mov	r0, #0
   12158:	bl	16a68 <__assert_fail@plt+0x5708>
   1215c:	mov	r1, #0
   12160:	mov	r3, r0
   12164:	mov	r2, r4
   12168:	mov	r0, r1
   1216c:	bl	11168 <error@plt>
   12170:	b	11f28 <__assert_fail@plt+0xbc8>
   12174:	cmp	r3, #0
   12178:	bne	11fd8 <__assert_fail@plt+0xc78>
   1217c:	ldr	r3, [sp, #288]	; 0x120
   12180:	cmn	r3, #1
   12184:	beq	121a0 <__assert_fail@plt+0xe40>
   12188:	ldr	r3, [r6, #24]
   1218c:	ldr	r2, [sp, #288]	; 0x120
   12190:	cmp	r2, r3
   12194:	movne	r5, #1
   12198:	movne	r4, #0
   1219c:	bne	121c0 <__assert_fail@plt+0xe60>
   121a0:	ldr	r3, [sp, #292]	; 0x124
   121a4:	cmn	r3, #1
   121a8:	beq	1228c <__assert_fail@plt+0xf2c>
   121ac:	ldr	r4, [r6, #28]
   121b0:	mov	r5, #1
   121b4:	sub	r4, r4, r3
   121b8:	clz	r4, r4
   121bc:	lsr	r4, r4, #5
   121c0:	cmp	r5, #0
   121c4:	beq	122e8 <__assert_fail@plt+0xf88>
   121c8:	ldrh	r5, [r9, #56]	; 0x38
   121cc:	sub	r3, r5, #1
   121d0:	bic	r5, r5, #2
   121d4:	cmp	r5, #4
   121d8:	cmpne	r3, #1
   121dc:	movls	r5, #1
   121e0:	movhi	r5, #0
   121e4:	bhi	122e4 <__assert_fail@plt+0xf84>
   121e8:	ldr	ip, [r7, #8]
   121ec:	cmp	ip, #0
   121f0:	beq	122e8 <__assert_fail@plt+0xf88>
   121f4:	ldrd	r2, [ip]
   121f8:	ldrd	r0, [r6, #96]	; 0x60
   121fc:	cmp	r1, r3
   12200:	cmpeq	r0, r2
   12204:	bne	122e8 <__assert_fail@plt+0xf88>
   12208:	ldrd	r2, [r6]
   1220c:	ldrd	r0, [ip, #8]
   12210:	cmp	r3, r1
   12214:	cmpeq	r2, r0
   12218:	bne	122e8 <__assert_fail@plt+0xf88>
   1221c:	ldr	r1, [pc, #1496]	; 127fc <__assert_fail@plt+0x149c>
   12220:	mov	r0, fp
   12224:	bl	11048 <strcmp@plt>
   12228:	subs	r4, r0, #0
   1222c:	mov	r2, #5
   12230:	bne	12294 <__assert_fail@plt+0xf34>
   12234:	ldr	r1, [pc, #1476]	; 12800 <__assert_fail@plt+0x14a0>
   12238:	bl	110d8 <dcgettext@plt>
   1223c:	mov	r5, r0
   12240:	mov	r1, fp
   12244:	mov	r0, #4
   12248:	bl	169c4 <__assert_fail@plt+0x5664>
   1224c:	mov	r3, r0
   12250:	mov	r2, r5
   12254:	mov	r1, r4
   12258:	mov	r0, r4
   1225c:	bl	11168 <error@plt>
   12260:	mov	r2, #5
   12264:	ldr	r1, [pc, #1432]	; 12804 <__assert_fail@plt+0x14a4>
   12268:	mov	r0, #0
   1226c:	bl	110d8 <dcgettext@plt>
   12270:	mov	r1, #0
   12274:	mov	r2, r0
   12278:	mov	r0, r1
   1227c:	bl	11168 <error@plt>
   12280:	b	11f28 <__assert_fail@plt+0xbc8>
   12284:	add	r6, sp, #40	; 0x28
   12288:	b	1217c <__assert_fail@plt+0xe1c>
   1228c:	mov	r5, #1
   12290:	b	12058 <__assert_fail@plt+0xcf8>
   12294:	ldr	r1, [pc, #1388]	; 12808 <__assert_fail@plt+0x14a8>
   12298:	mov	r0, #0
   1229c:	bl	110d8 <dcgettext@plt>
   122a0:	mov	r4, r0
   122a4:	mov	r2, fp
   122a8:	mov	r1, #4
   122ac:	mov	r0, #0
   122b0:	bl	16958 <__assert_fail@plt+0x55f8>
   122b4:	mov	r5, r0
   122b8:	ldr	r2, [pc, #1340]	; 127fc <__assert_fail@plt+0x149c>
   122bc:	mov	r1, #4
   122c0:	mov	r0, #1
   122c4:	bl	16958 <__assert_fail@plt+0x55f8>
   122c8:	mov	r1, #0
   122cc:	mov	r3, r5
   122d0:	str	r0, [sp]
   122d4:	mov	r2, r4
   122d8:	mov	r0, r1
   122dc:	bl	11168 <error@plt>
   122e0:	b	12260 <__assert_fail@plt+0xf00>
   122e4:	mov	r5, #1
   122e8:	bl	11204 <__errno_location@plt>
   122ec:	cmp	r4, #0
   122f0:	str	r0, [sp, #16]
   122f4:	moveq	r8, #1
   122f8:	beq	123b8 <__assert_fail@plt+0x1058>
   122fc:	ldrb	r8, [r7, #12]
   12300:	ldr	r3, [sp, #8]
   12304:	cmp	r8, #0
   12308:	ldr	sl, [r3, #32]
   1230c:	bne	124c0 <__assert_fail@plt+0x1160>
   12310:	mov	r0, sl
   12314:	ldr	r2, [sp, #20]
   12318:	ldr	r1, [sp, #24]
   1231c:	ldr	r3, [sp, #28]
   12320:	bl	12870 <__assert_fail@plt+0x1510>
   12324:	cmp	r0, #0
   12328:	moveq	r5, #1
   1232c:	movne	r5, #0
   12330:	moveq	r8, r4
   12334:	beq	1234c <__assert_fail@plt+0xfec>
   12338:	ldr	r3, [sp, #16]
   1233c:	ldr	r3, [r3]
   12340:	cmp	r3, #95	; 0x5f
   12344:	moveq	r5, r4
   12348:	movne	r8, r4
   1234c:	eor	sl, r5, #1
   12350:	and	sl, sl, r4
   12354:	ands	sl, sl, #255	; 0xff
   12358:	beq	123b8 <__assert_fail@plt+0x1058>
   1235c:	ldrb	r4, [r7, #13]
   12360:	cmp	r4, #0
   12364:	bne	12100 <__assert_fail@plt+0xda0>
   12368:	ldr	r3, [sp, #16]
   1236c:	mov	r2, #5
   12370:	mov	r0, r4
   12374:	ldr	r5, [r3]
   12378:	ldr	r3, [sp, #20]
   1237c:	cmn	r3, #1
   12380:	ldrne	r1, [pc, #1176]	; 12820 <__assert_fail@plt+0x14c0>
   12384:	ldreq	r1, [pc, #1176]	; 12824 <__assert_fail@plt+0x14c4>
   12388:	bl	110d8 <dcgettext@plt>
   1238c:	mov	r4, r0
   12390:	mov	r1, fp
   12394:	mov	r0, #4
   12398:	bl	169c4 <__assert_fail@plt+0x5664>
   1239c:	mov	r3, r0
   123a0:	mov	r2, r4
   123a4:	mov	r1, r5
   123a8:	mov	r0, #0
   123ac:	mov	r5, #0
   123b0:	mov	r4, sl
   123b4:	bl	11168 <error@plt>
   123b8:	ldr	r3, [r7]
   123bc:	cmp	r3, #2
   123c0:	beq	127cc <__assert_fail@plt+0x146c>
   123c4:	and	r4, r4, r5
   123c8:	and	r4, r4, r8
   123cc:	ands	r4, r4, #255	; 0xff
   123d0:	beq	12410 <__assert_fail@plt+0x10b0>
   123d4:	ldr	r2, [sp, #20]
   123d8:	cmn	r2, #1
   123dc:	beq	123f4 <__assert_fail@plt+0x1094>
   123e0:	ldr	r1, [sp, #20]
   123e4:	ldr	r2, [r6, #24]
   123e8:	cmp	r1, r2
   123ec:	movne	r4, #1
   123f0:	bne	12410 <__assert_fail@plt+0x10b0>
   123f4:	ldr	r2, [sp, #28]
   123f8:	cmn	r2, #1
   123fc:	moveq	r4, #0
   12400:	beq	12410 <__assert_fail@plt+0x10b0>
   12404:	ldr	r4, [r6, #28]
   12408:	subs	r4, r4, r2
   1240c:	movne	r4, #1
   12410:	cmp	r3, #0
   12414:	movne	r3, r4
   12418:	moveq	r3, #1
   1241c:	cmp	r3, #0
   12420:	beq	127cc <__assert_fail@plt+0x146c>
   12424:	cmp	r5, #0
   12428:	beq	127ec <__assert_fail@plt+0x148c>
   1242c:	cmp	r8, #0
   12430:	beq	12754 <__assert_fail@plt+0x13f4>
   12434:	cmp	r4, #0
   12438:	moveq	r3, #4
   1243c:	movne	r3, #2
   12440:	cmp	r6, #0
   12444:	streq	r6, [sp, #16]
   12448:	bne	12764 <__assert_fail@plt+0x1404>
   1244c:	ldr	sl, [r7, #16]
   12450:	str	r3, [sp, #36]	; 0x24
   12454:	ldr	r4, [r7, #20]
   12458:	mov	r0, sl
   1245c:	mov	r1, r4
   12460:	bl	11c00 <__assert_fail@plt+0x8a0>
   12464:	ldr	r3, [sp, #16]
   12468:	cmp	sl, #0
   1246c:	str	r0, [sp, #24]
   12470:	moveq	r0, #0
   12474:	movne	r0, r3
   12478:	cmp	r4, #0
   1247c:	movne	r1, r6
   12480:	moveq	r1, #0
   12484:	bl	11c00 <__assert_fail@plt+0x8a0>
   12488:	ldr	r3, [sp, #36]	; 0x24
   1248c:	mov	r8, r0
   12490:	mov	r2, #5
   12494:	cmp	r3, #3
   12498:	beq	1269c <__assert_fail@plt+0x133c>
   1249c:	cmp	r3, #4
   124a0:	beq	12734 <__assert_fail@plt+0x13d4>
   124a4:	cmp	sl, #0
   124a8:	beq	12684 <__assert_fail@plt+0x1324>
   124ac:	ldr	r1, [pc, #884]	; 12828 <__assert_fail@plt+0x14c8>
   124b0:	mov	r0, #0
   124b4:	bl	110d8 <dcgettext@plt>
   124b8:	mov	r4, r0
   124bc:	b	126f8 <__assert_fail@plt+0x1398>
   124c0:	ldr	r3, [sp, #32]
   124c4:	cmn	r3, #1
   124c8:	beq	124e8 <__assert_fail@plt+0x1188>
   124cc:	ldr	r3, [r6, #16]
   124d0:	and	r3, r3, #61440	; 0xf000
   124d4:	cmp	r3, #32768	; 0x8000
   124d8:	beq	1250c <__assert_fail@plt+0x11ac>
   124dc:	cmp	r3, #16384	; 0x4000
   124e0:	moveq	r3, #18688	; 0x4900
   124e4:	beq	12510 <__assert_fail@plt+0x11b0>
   124e8:	ldr	r0, [sp, #8]
   124ec:	ldr	r2, [sp, #20]
   124f0:	ldr	r1, [sp, #24]
   124f4:	ldr	r3, [sp, #28]
   124f8:	ldr	r0, [r0, #32]
   124fc:	bl	12858 <__assert_fail@plt+0x14f8>
   12500:	clz	r5, r0
   12504:	lsr	r5, r5, #5
   12508:	b	12620 <__assert_fail@plt+0x12c0>
   1250c:	mov	r3, #2304	; 0x900
   12510:	mov	r2, r3
   12514:	mov	r0, sl
   12518:	ldr	r1, [sp, #24]
   1251c:	str	r3, [sp, #36]	; 0x24
   12520:	bl	11084 <__openat64_2@plt>
   12524:	subs	r4, r0, #0
   12528:	bge	12584 <__assert_fail@plt+0x1224>
   1252c:	ldr	r3, [sp, #16]
   12530:	ldr	r2, [r3]
   12534:	cmp	r2, #13
   12538:	bne	12578 <__assert_fail@plt+0x1218>
   1253c:	ldr	r2, [r6, #16]
   12540:	and	r2, r2, #61440	; 0xf000
   12544:	cmp	r2, #32768	; 0x8000
   12548:	bne	124e8 <__assert_fail@plt+0x1188>
   1254c:	mov	r0, sl
   12550:	ldr	r1, [sp, #24]
   12554:	ldr	r3, [sp, #36]	; 0x24
   12558:	orr	r2, r3, #1
   1255c:	bl	11084 <__openat64_2@plt>
   12560:	subs	r4, r0, #0
   12564:	bge	12584 <__assert_fail@plt+0x1224>
   12568:	ldr	r3, [sp, #16]
   1256c:	ldr	r3, [r3]
   12570:	cmp	r3, #13
   12574:	beq	124e8 <__assert_fail@plt+0x1188>
   12578:	mov	r4, r8
   1257c:	mov	r5, #0
   12580:	b	1234c <__assert_fail@plt+0xfec>
   12584:	add	r1, sp, #144	; 0x90
   12588:	mov	r0, r4
   1258c:	bl	18210 <__assert_fail@plt+0x6eb0>
   12590:	cmp	r0, #0
   12594:	bne	12628 <__assert_fail@plt+0x12c8>
   12598:	ldrd	r0, [r6, #96]	; 0x60
   1259c:	ldrd	r2, [sp, #240]	; 0xf0
   125a0:	cmp	r1, r3
   125a4:	cmpeq	r0, r2
   125a8:	bne	1266c <__assert_fail@plt+0x130c>
   125ac:	ldrd	r0, [r6]
   125b0:	ldrd	r2, [sp, #144]	; 0x90
   125b4:	cmp	r1, r3
   125b8:	cmpeq	r0, r2
   125bc:	bne	1266c <__assert_fail@plt+0x130c>
   125c0:	ldr	r3, [sp, #288]	; 0x120
   125c4:	cmn	r3, #1
   125c8:	beq	125dc <__assert_fail@plt+0x127c>
   125cc:	ldr	r3, [sp, #168]	; 0xa8
   125d0:	ldr	r2, [sp, #288]	; 0x120
   125d4:	cmp	r2, r3
   125d8:	bne	12674 <__assert_fail@plt+0x1314>
   125dc:	ldr	r3, [sp, #292]	; 0x124
   125e0:	cmn	r3, #1
   125e4:	beq	125f8 <__assert_fail@plt+0x1298>
   125e8:	ldr	r3, [sp, #172]	; 0xac
   125ec:	ldr	r2, [sp, #292]	; 0x124
   125f0:	cmp	r2, r3
   125f4:	bne	12674 <__assert_fail@plt+0x1314>
   125f8:	mov	r0, r4
   125fc:	ldr	r1, [sp, #20]
   12600:	ldr	r2, [sp, #28]
   12604:	bl	111f8 <fchown@plt>
   12608:	cmp	r0, #0
   1260c:	bne	12628 <__assert_fail@plt+0x12c8>
   12610:	mov	r0, r4
   12614:	bl	11324 <close@plt>
   12618:	cmp	r0, #0
   1261c:	bne	12578 <__assert_fail@plt+0x1218>
   12620:	mov	r4, r8
   12624:	b	1234c <__assert_fail@plt+0xfec>
   12628:	mov	sl, #6
   1262c:	ldr	r3, [sp, #16]
   12630:	mov	r0, r4
   12634:	sub	sl, sl, #3
   12638:	ldr	r3, [r3]
   1263c:	str	r3, [sp, #36]	; 0x24
   12640:	bl	11324 <close@plt>
   12644:	ldr	r2, [sp, #16]
   12648:	ldr	r3, [sp, #36]	; 0x24
   1264c:	str	r3, [r2]
   12650:	cmp	sl, #3
   12654:	ldrls	pc, [pc, sl, lsl #2]
   12658:	b	12620 <__assert_fail@plt+0x12c0>
   1265c:	andeq	r2, r1, ip, ror r6
   12660:	andeq	r2, r1, ip, ror r6
   12664:	andeq	r2, r1, r8, ror #9
   12668:	andeq	r2, r1, r8, ror r5
   1266c:	mov	sl, #4
   12670:	b	1262c <__assert_fail@plt+0x12cc>
   12674:	mov	sl, #2
   12678:	b	1262c <__assert_fail@plt+0x12cc>
   1267c:	mov	r4, #0
   12680:	b	1257c <__assert_fail@plt+0x121c>
   12684:	cmp	r4, #0
   12688:	ldrne	r1, [pc, #412]	; 1282c <__assert_fail@plt+0x14cc>
   1268c:	ldreq	r1, [pc, #412]	; 12830 <__assert_fail@plt+0x14d0>
   12690:	bne	124b0 <__assert_fail@plt+0x1150>
   12694:	mov	r0, r4
   12698:	b	124b4 <__assert_fail@plt+0x1154>
   1269c:	cmp	r0, #0
   126a0:	beq	126c4 <__assert_fail@plt+0x1364>
   126a4:	cmp	sl, #0
   126a8:	ldrne	r1, [pc, #388]	; 12834 <__assert_fail@plt+0x14d4>
   126ac:	bne	124b0 <__assert_fail@plt+0x1150>
   126b0:	cmp	r4, #0
   126b4:	ldrne	r1, [pc, #380]	; 12838 <__assert_fail@plt+0x14d8>
   126b8:	ldreq	r1, [pc, #380]	; 1283c <__assert_fail@plt+0x14dc>
   126bc:	bne	124b0 <__assert_fail@plt+0x1150>
   126c0:	b	12694 <__assert_fail@plt+0x1334>
   126c4:	cmp	sl, #0
   126c8:	ldrne	r1, [pc, #368]	; 12840 <__assert_fail@plt+0x14e0>
   126cc:	bne	126dc <__assert_fail@plt+0x137c>
   126d0:	cmp	r4, #0
   126d4:	ldrne	r1, [pc, #360]	; 12844 <__assert_fail@plt+0x14e4>
   126d8:	ldreq	r1, [pc, #348]	; 1283c <__assert_fail@plt+0x14dc>
   126dc:	bl	110d8 <dcgettext@plt>
   126e0:	mov	r4, r0
   126e4:	mov	r0, #0
   126e8:	bl	1297c <__assert_fail@plt+0x161c>
   126ec:	mov	r3, #0
   126f0:	ldr	r8, [sp, #24]
   126f4:	str	r3, [sp, #24]
   126f8:	mov	r1, fp
   126fc:	mov	r0, #4
   12700:	bl	169c4 <__assert_fail@plt+0x5664>
   12704:	ldr	r3, [sp, #24]
   12708:	mov	r2, r0
   1270c:	mov	r1, r4
   12710:	mov	r0, #1
   12714:	str	r3, [sp]
   12718:	mov	r3, r8
   1271c:	bl	11228 <__printf_chk@plt>
   12720:	mov	r0, r8
   12724:	bl	1297c <__assert_fail@plt+0x161c>
   12728:	ldr	r0, [sp, #24]
   1272c:	bl	1297c <__assert_fail@plt+0x161c>
   12730:	b	127bc <__assert_fail@plt+0x145c>
   12734:	cmp	sl, #0
   12738:	ldrne	r1, [pc, #264]	; 12848 <__assert_fail@plt+0x14e8>
   1273c:	bne	124b0 <__assert_fail@plt+0x1150>
   12740:	cmp	r4, #0
   12744:	ldrne	r1, [pc, #256]	; 1284c <__assert_fail@plt+0x14ec>
   12748:	bne	124b0 <__assert_fail@plt+0x1150>
   1274c:	ldr	r1, [pc, #252]	; 12850 <__assert_fail@plt+0x14f0>
   12750:	b	12694 <__assert_fail@plt+0x1334>
   12754:	cmp	r6, #0
   12758:	streq	r6, [sp, #16]
   1275c:	beq	1278c <__assert_fail@plt+0x142c>
   12760:	mov	r3, #1
   12764:	ldr	r0, [r6, #24]
   12768:	str	r3, [sp, #24]
   1276c:	bl	11cf0 <__assert_fail@plt+0x990>
   12770:	str	r0, [sp, #16]
   12774:	ldr	r0, [r6, #28]
   12778:	bl	11cbc <__assert_fail@plt+0x95c>
   1277c:	ldr	r3, [sp, #24]
   12780:	mov	r6, r0
   12784:	cmp	r3, #1
   12788:	bne	1244c <__assert_fail@plt+0x10ec>
   1278c:	mov	r2, #5
   12790:	ldr	r1, [pc, #188]	; 12854 <__assert_fail@plt+0x14f4>
   12794:	mov	r0, #0
   12798:	bl	110d8 <dcgettext@plt>
   1279c:	mov	r4, r0
   127a0:	mov	r1, fp
   127a4:	mov	r0, #4
   127a8:	bl	169c4 <__assert_fail@plt+0x5664>
   127ac:	mov	r2, r0
   127b0:	mov	r1, r4
   127b4:	mov	r0, #1
   127b8:	bl	11228 <__printf_chk@plt>
   127bc:	ldr	r0, [sp, #16]
   127c0:	bl	1297c <__assert_fail@plt+0x161c>
   127c4:	mov	r0, r6
   127c8:	bl	1297c <__assert_fail@plt+0x161c>
   127cc:	ldrb	r3, [r7, #4]
   127d0:	cmp	r3, #0
   127d4:	bne	11f2c <__assert_fail@plt+0xbcc>
   127d8:	mov	r2, #4
   127dc:	mov	r1, r9
   127e0:	ldr	r0, [sp, #8]
   127e4:	bl	14548 <__assert_fail@plt+0x31e8>
   127e8:	b	11f2c <__assert_fail@plt+0xbcc>
   127ec:	mov	r3, #3
   127f0:	b	12440 <__assert_fail@plt+0x10e0>
   127f4:	andeq	r8, r1, r8, asr #25
   127f8:	andeq	r9, r1, r8, asr r0
   127fc:	andeq	r9, r1, r0, lsl #10
   12800:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12804:	andeq	r8, r1, pc, lsr sp
   12808:	andeq	r8, r1, r5, lsl #26
   1280c:	andeq	r8, r1, r4, asr lr
   12810:	andeq	r8, r1, r0, ror sp
   12814:	andeq	r8, r1, r0, lsl ip
   12818:	andeq	r8, r1, r1, lsl #27
   1281c:	muleq	r1, sl, sp
   12820:	andeq	r8, r1, sl, ror #28
   12824:	andeq	r8, r1, r3, lsl #29
   12828:	ldrdeq	r8, [r1], -r0
   1282c:	strdeq	r8, [r1], -r7
   12830:	andeq	r8, r1, sl, lsl pc
   12834:	andeq	r8, r1, r8, lsr pc
   12838:	andeq	r8, r1, r8, ror #30
   1283c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12840:			; <UNDEFINED> instruction: 0x00018fb6
   12844:	ldrdeq	r8, [r1], -lr
   12848:	andeq	r9, r1, r2
   1284c:	andeq	r9, r1, r2, lsr #32
   12850:	andeq	r9, r1, lr, lsr r0
   12854:	muleq	r1, r8, lr
   12858:	mov	ip, #0
   1285c:	push	{r0, r1, r2, lr}
   12860:	str	ip, [sp]
   12864:	bl	112dc <fchownat@plt>
   12868:	add	sp, sp, #12
   1286c:	pop	{pc}		; (ldr pc, [sp], #4)
   12870:	mov	ip, #256	; 0x100
   12874:	push	{r0, r1, r2, lr}
   12878:	str	ip, [sp]
   1287c:	bl	112dc <fchownat@plt>
   12880:	add	sp, sp, #12
   12884:	pop	{pc}		; (ldr pc, [sp], #4)
   12888:	ldr	r3, [pc, #4]	; 12894 <__assert_fail@plt+0x1534>
   1288c:	str	r0, [r3]
   12890:	bx	lr
   12894:			; <UNDEFINED> instruction: 0x0002a1b8
   12898:	ldr	r3, [pc, #4]	; 128a4 <__assert_fail@plt+0x1544>
   1289c:	strb	r0, [r3, #4]
   128a0:	bx	lr
   128a4:			; <UNDEFINED> instruction: 0x0002a1b8
   128a8:	ldr	r3, [pc, #176]	; 12960 <__assert_fail@plt+0x1600>
   128ac:	push	{r0, r1, r4, r5, r6, lr}
   128b0:	ldr	r0, [r3]
   128b4:	bl	1799c <__assert_fail@plt+0x663c>
   128b8:	cmp	r0, #0
   128bc:	beq	12944 <__assert_fail@plt+0x15e4>
   128c0:	ldr	r4, [pc, #156]	; 12964 <__assert_fail@plt+0x1604>
   128c4:	bl	11204 <__errno_location@plt>
   128c8:	mov	r5, r0
   128cc:	ldrb	r6, [r4, #4]
   128d0:	cmp	r6, #0
   128d4:	beq	128e4 <__assert_fail@plt+0x1584>
   128d8:	ldr	r3, [r0]
   128dc:	cmp	r3, #32
   128e0:	beq	12944 <__assert_fail@plt+0x15e4>
   128e4:	mov	r2, #5
   128e8:	ldr	r1, [pc, #120]	; 12968 <__assert_fail@plt+0x1608>
   128ec:	mov	r0, #0
   128f0:	bl	110d8 <dcgettext@plt>
   128f4:	mov	r6, r0
   128f8:	ldr	r0, [r4]
   128fc:	cmp	r0, #0
   12900:	beq	12930 <__assert_fail@plt+0x15d0>
   12904:	ldr	r4, [r5]
   12908:	bl	16a58 <__assert_fail@plt+0x56f8>
   1290c:	mov	r3, r0
   12910:	ldr	r2, [pc, #84]	; 1296c <__assert_fail@plt+0x160c>
   12914:	mov	r0, #0
   12918:	str	r6, [sp]
   1291c:	mov	r1, r4
   12920:	bl	11168 <error@plt>
   12924:	ldr	r3, [pc, #68]	; 12970 <__assert_fail@plt+0x1610>
   12928:	ldr	r0, [r3]
   1292c:	bl	11090 <_exit@plt>
   12930:	mov	r3, r6
   12934:	ldr	r2, [pc, #56]	; 12974 <__assert_fail@plt+0x1614>
   12938:	ldr	r1, [r5]
   1293c:	bl	11168 <error@plt>
   12940:	b	12924 <__assert_fail@plt+0x15c4>
   12944:	ldr	r3, [pc, #44]	; 12978 <__assert_fail@plt+0x1618>
   12948:	ldr	r0, [r3]
   1294c:	bl	1799c <__assert_fail@plt+0x663c>
   12950:	cmp	r0, #0
   12954:	bne	12924 <__assert_fail@plt+0x15c4>
   12958:	add	sp, sp, #8
   1295c:	pop	{r4, r5, r6, pc}
   12960:	muleq	r2, r4, r1
   12964:			; <UNDEFINED> instruction: 0x0002a1b8
   12968:	andeq	r9, r1, r8, ror r0
   1296c:	andeq	r9, r1, r4, lsl #1
   12970:	andeq	sl, r2, ip, lsr r1
   12974:	andeq	r8, r1, r0, lsl ip
   12978:	muleq	r2, r0, r1
   1297c:	push	{r0, r1, r2, r4, r5, lr}
   12980:	mov	r5, r0
   12984:	bl	11204 <__errno_location@plt>
   12988:	mov	r4, r0
   1298c:	mov	r0, r5
   12990:	ldr	r3, [r4]
   12994:	str	r3, [sp]
   12998:	str	r3, [sp, #4]
   1299c:	mov	r3, #0
   129a0:	str	r3, [r4]
   129a4:	bl	11078 <free@plt>
   129a8:	ldr	r3, [r4]
   129ac:	add	r2, sp, #8
   129b0:	clz	r3, r3
   129b4:	lsr	r3, r3, #5
   129b8:	add	r3, r2, r3, lsl #2
   129bc:	ldr	r3, [r3, #-8]
   129c0:	str	r3, [r4]
   129c4:	add	sp, sp, #12
   129c8:	pop	{r4, r5, pc}
   129cc:	push	{r4, r5, lr}
   129d0:	ldrd	r2, [r1, #8]
   129d4:	ldrd	r4, [r0, #8]
   129d8:	cmp	r5, r3
   129dc:	cmpeq	r4, r2
   129e0:	bne	12a00 <__assert_fail@plt+0x16a0>
   129e4:	ldrd	r4, [r0]
   129e8:	ldrd	r2, [r1]
   129ec:	cmp	r5, r3
   129f0:	cmpeq	r4, r2
   129f4:	moveq	r0, #1
   129f8:	movne	r0, #0
   129fc:	pop	{r4, r5, pc}
   12a00:	mov	r0, #0
   12a04:	pop	{r4, r5, pc}
   12a08:	push	{r4, lr}
   12a0c:	mov	r2, r1
   12a10:	mov	r3, #0
   12a14:	ldrd	r0, [r0, #8]
   12a18:	bl	18010 <__assert_fail@plt+0x6cb0>
   12a1c:	mov	r0, r2
   12a20:	pop	{r4, pc}
   12a24:	push	{r4, lr}
   12a28:	mov	r2, r1
   12a2c:	mov	r3, #0
   12a30:	ldrd	r0, [r0]
   12a34:	bl	18010 <__assert_fail@plt+0x6cb0>
   12a38:	mov	r0, r2
   12a3c:	pop	{r4, pc}
   12a40:	push	{r4, r5, lr}
   12a44:	ldrd	r2, [r1]
   12a48:	ldrd	r4, [r0]
   12a4c:	cmp	r5, r3
   12a50:	cmpeq	r4, r2
   12a54:	moveq	r0, #1
   12a58:	movne	r0, #0
   12a5c:	pop	{r4, r5, pc}
   12a60:	ldr	r3, [r0]
   12a64:	push	{r4, r5, lr}
   12a68:	ldrd	r4, [r3, #160]	; 0xa0
   12a6c:	ldr	r3, [r1]
   12a70:	ldrd	r2, [r3, #160]	; 0xa0
   12a74:	cmp	r5, r3
   12a78:	cmpeq	r4, r2
   12a7c:	movhi	r0, #1
   12a80:	movls	r0, #0
   12a84:	movcc	r3, #1
   12a88:	movcs	r3, #0
   12a8c:	sub	r0, r0, r3
   12a90:	pop	{r4, r5, pc}
   12a94:	push	{r4, r5, r6, lr}
   12a98:	mov	r4, r1
   12a9c:	add	r5, r1, #64	; 0x40
   12aa0:	ldr	r1, [r1, #48]	; 0x30
   12aa4:	ldr	r3, [r0, #48]	; 0x30
   12aa8:	cmp	r1, #0
   12aac:	bne	12ab8 <__assert_fail@plt+0x1758>
   12ab0:	tst	r3, #1
   12ab4:	bne	12ac4 <__assert_fail@plt+0x1764>
   12ab8:	ubfx	r3, r3, #1, #1
   12abc:	orrs	r3, r2, r3
   12ac0:	beq	12b2c <__assert_fail@plt+0x17cc>
   12ac4:	mov	r1, r5
   12ac8:	ldr	r0, [r4, #24]
   12acc:	bl	18200 <__assert_fail@plt+0x6ea0>
   12ad0:	cmp	r0, #0
   12ad4:	beq	12b54 <__assert_fail@plt+0x17f4>
   12ad8:	bl	11204 <__errno_location@plt>
   12adc:	ldr	r3, [r0]
   12ae0:	mov	r6, r0
   12ae4:	cmp	r3, #2
   12ae8:	bne	12b0c <__assert_fail@plt+0x17ac>
   12aec:	mov	r1, r5
   12af0:	ldr	r0, [r4, #24]
   12af4:	bl	18220 <__assert_fail@plt+0x6ec0>
   12af8:	cmp	r0, #0
   12afc:	bne	12b0c <__assert_fail@plt+0x17ac>
   12b00:	str	r0, [r6]
   12b04:	mov	r0, #13
   12b08:	pop	{r4, r5, r6, pc}
   12b0c:	ldr	r3, [r6]
   12b10:	mov	r2, #104	; 0x68
   12b14:	mov	r1, #0
   12b18:	str	r3, [r4, #32]
   12b1c:	mov	r0, r5
   12b20:	bl	1121c <memset@plt>
   12b24:	mov	r0, #10
   12b28:	pop	{r4, r5, r6, pc}
   12b2c:	mov	r3, #256	; 0x100
   12b30:	mov	r2, r5
   12b34:	ldr	r1, [r4, #24]
   12b38:	ldr	r0, [r0, #32]
   12b3c:	bl	18230 <__assert_fail@plt+0x6ed0>
   12b40:	cmp	r0, #0
   12b44:	beq	12b54 <__assert_fail@plt+0x17f4>
   12b48:	bl	11204 <__errno_location@plt>
   12b4c:	ldr	r3, [r0]
   12b50:	b	12b10 <__assert_fail@plt+0x17b0>
   12b54:	ldr	r3, [r4, #80]	; 0x50
   12b58:	and	r3, r3, #61440	; 0xf000
   12b5c:	cmp	r3, #16384	; 0x4000
   12b60:	bne	12ba4 <__assert_fail@plt+0x1844>
   12b64:	ldrb	r3, [r4, #168]	; 0xa8
   12b68:	cmp	r3, #46	; 0x2e
   12b6c:	bne	12bbc <__assert_fail@plt+0x185c>
   12b70:	ldrb	r3, [r4, #169]	; 0xa9
   12b74:	cmp	r3, #0
   12b78:	beq	12b90 <__assert_fail@plt+0x1830>
   12b7c:	ldr	r3, [r4, #168]	; 0xa8
   12b80:	bic	r3, r3, #-16777216	; 0xff000000
   12b84:	bic	r3, r3, #255	; 0xff
   12b88:	cmp	r3, #11776	; 0x2e00
   12b8c:	bne	12bbc <__assert_fail@plt+0x185c>
   12b90:	ldr	r3, [r4, #48]	; 0x30
   12b94:	cmp	r3, #0
   12b98:	moveq	r0, #1
   12b9c:	movne	r0, #5
   12ba0:	pop	{r4, r5, r6, pc}
   12ba4:	cmp	r3, #40960	; 0xa000
   12ba8:	beq	12bc4 <__assert_fail@plt+0x1864>
   12bac:	cmp	r3, #32768	; 0x8000
   12bb0:	movne	r0, #3
   12bb4:	moveq	r0, #8
   12bb8:	pop	{r4, r5, r6, pc}
   12bbc:	mov	r0, #1
   12bc0:	pop	{r4, r5, r6, pc}
   12bc4:	mov	r0, #12
   12bc8:	pop	{r4, r5, r6, pc}
   12bcc:	ldr	r3, [r0, #40]	; 0x28
   12bd0:	push	{r4, r5, r6, r7, r8, lr}
   12bd4:	mov	r4, r0
   12bd8:	mov	r6, r1
   12bdc:	mov	r5, r2
   12be0:	ldr	r7, [r0, #44]	; 0x2c
   12be4:	cmp	r3, r2
   12be8:	bcs	12c30 <__assert_fail@plt+0x18d0>
   12bec:	add	r1, r2, #40	; 0x28
   12bf0:	ldr	r0, [r0, #8]
   12bf4:	cmn	r1, #-1073741823	; 0xc0000001
   12bf8:	str	r1, [r4, #40]	; 0x28
   12bfc:	bls	12c1c <__assert_fail@plt+0x18bc>
   12c00:	ldr	r0, [r4, #8]
   12c04:	bl	1297c <__assert_fail@plt+0x161c>
   12c08:	mov	r3, #0
   12c0c:	str	r3, [r4, #8]
   12c10:	str	r3, [r4, #40]	; 0x28
   12c14:	mov	r0, r6
   12c18:	pop	{r4, r5, r6, r7, r8, pc}
   12c1c:	lsl	r1, r1, #2
   12c20:	bl	17958 <__assert_fail@plt+0x65f8>
   12c24:	cmp	r0, #0
   12c28:	beq	12c00 <__assert_fail@plt+0x18a0>
   12c2c:	str	r0, [r4, #8]
   12c30:	ldr	r0, [r4, #8]
   12c34:	mov	r2, r0
   12c38:	cmp	r6, #0
   12c3c:	bne	12c6c <__assert_fail@plt+0x190c>
   12c40:	mov	r3, r7
   12c44:	mov	r2, #4
   12c48:	mov	r1, r5
   12c4c:	bl	112d0 <qsort@plt>
   12c50:	ldr	r3, [r4, #8]
   12c54:	ldr	r6, [r3]
   12c58:	subs	r5, r5, #1
   12c5c:	ldr	r2, [r3]
   12c60:	bne	12c78 <__assert_fail@plt+0x1918>
   12c64:	str	r5, [r2, #8]
   12c68:	b	12c14 <__assert_fail@plt+0x18b4>
   12c6c:	str	r6, [r2], #4
   12c70:	ldr	r6, [r6, #8]
   12c74:	b	12c38 <__assert_fail@plt+0x18d8>
   12c78:	ldr	r1, [r3, #4]!
   12c7c:	str	r1, [r2, #8]
   12c80:	b	12c58 <__assert_fail@plt+0x18f8>
   12c84:	push	{r4, r5, r6, r7, r8, lr}
   12c88:	mov	r6, r0
   12c8c:	add	r0, r2, #176	; 0xb0
   12c90:	bic	r0, r0, #7
   12c94:	mov	r7, r1
   12c98:	mov	r5, r2
   12c9c:	bl	1792c <__assert_fail@plt+0x65cc>
   12ca0:	subs	r4, r0, #0
   12ca4:	beq	12cf0 <__assert_fail@plt+0x1990>
   12ca8:	mov	r2, r5
   12cac:	mov	r1, r7
   12cb0:	add	r0, r4, #168	; 0xa8
   12cb4:	bl	1109c <memcpy@plt>
   12cb8:	mov	r3, #0
   12cbc:	add	r2, r4, r5
   12cc0:	strb	r3, [r2, #168]	; 0xa8
   12cc4:	ldr	r2, [r6, #24]
   12cc8:	str	r3, [r4, #12]
   12ccc:	str	r3, [r4, #16]
   12cd0:	str	r3, [r4, #20]
   12cd4:	str	r2, [r4, #28]
   12cd8:	mov	r2, #3
   12cdc:	str	r3, [r4, #32]
   12ce0:	str	r6, [r4, #44]	; 0x2c
   12ce4:	str	r5, [r4, #52]	; 0x34
   12ce8:	strh	r3, [r4, #58]	; 0x3a
   12cec:	strh	r2, [r4, #60]	; 0x3c
   12cf0:	mov	r0, r4
   12cf4:	pop	{r4, r5, r6, r7, r8, pc}
   12cf8:	mov	r3, r0
   12cfc:	mov	r0, r1
   12d00:	ldr	ip, [r3, #48]	; 0x30
   12d04:	lsl	r2, ip, #11
   12d08:	tst	ip, #512	; 0x200
   12d0c:	and	r2, r2, #32768	; 0x8000
   12d10:	orr	r2, r2, #540672	; 0x84000
   12d14:	orr	r2, r2, #2304	; 0x900
   12d18:	beq	12d24 <__assert_fail@plt+0x19c4>
   12d1c:	ldr	r0, [r3, #32]
   12d20:	b	15524 <__assert_fail@plt+0x41c4>
   12d24:	mov	r1, r2
   12d28:	b	17d30 <__assert_fail@plt+0x69d0>
   12d2c:	push	{r4, r5, r6, lr}
   12d30:	mov	r4, r0
   12d34:	cmp	r4, #0
   12d38:	popeq	{r4, r5, r6, pc}
   12d3c:	ldr	r5, [r4, #8]
   12d40:	ldr	r0, [r4, #12]
   12d44:	cmp	r0, #0
   12d48:	beq	12d50 <__assert_fail@plt+0x19f0>
   12d4c:	bl	1133c <closedir@plt>
   12d50:	mov	r0, r4
   12d54:	mov	r4, r5
   12d58:	bl	1297c <__assert_fail@plt+0x161c>
   12d5c:	b	12d34 <__assert_fail@plt+0x19d4>
   12d60:	push	{r4, lr}
   12d64:	mov	r4, r0
   12d68:	mov	r0, r4
   12d6c:	bl	15428 <__assert_fail@plt+0x40c8>
   12d70:	cmp	r0, #0
   12d74:	popne	{r4, pc}
   12d78:	mov	r0, r4
   12d7c:	bl	15474 <__assert_fail@plt+0x4114>
   12d80:	cmp	r0, #0
   12d84:	blt	12d68 <__assert_fail@plt+0x1a08>
   12d88:	bl	11324 <close@plt>
   12d8c:	b	12d68 <__assert_fail@plt+0x1a08>
   12d90:	push	{r4, r5, r6, r7, lr}
   12d94:	sub	sp, sp, #100	; 0x64
   12d98:	ldr	r5, [r0, #44]	; 0x2c
   12d9c:	ldr	r3, [r5, #48]	; 0x30
   12da0:	tst	r3, #512	; 0x200
   12da4:	bne	12db4 <__assert_fail@plt+0x1a54>
   12da8:	mov	r0, #0
   12dac:	add	sp, sp, #100	; 0x64
   12db0:	pop	{r4, r5, r6, r7, pc}
   12db4:	ldr	r4, [r5, #52]	; 0x34
   12db8:	mov	r7, r1
   12dbc:	mov	r6, r0
   12dc0:	cmp	r4, #0
   12dc4:	bne	12df4 <__assert_fail@plt+0x1a94>
   12dc8:	ldr	r3, [pc, #184]	; 12e88 <__assert_fail@plt+0x1b28>
   12dcc:	mov	r1, r4
   12dd0:	mov	r0, #13
   12dd4:	ldr	r2, [pc, #176]	; 12e8c <__assert_fail@plt+0x1b2c>
   12dd8:	str	r3, [sp]
   12ddc:	ldr	r3, [pc, #172]	; 12e90 <__assert_fail@plt+0x1b30>
   12de0:	bl	14e08 <__assert_fail@plt+0x3aa8>
   12de4:	cmp	r0, #0
   12de8:	mov	r4, r0
   12dec:	str	r0, [r5, #52]	; 0x34
   12df0:	beq	12e14 <__assert_fail@plt+0x1ab4>
   12df4:	ldrd	r2, [r6, #64]	; 0x40
   12df8:	add	r1, sp, #8
   12dfc:	mov	r0, r4
   12e00:	strd	r2, [sp, #8]
   12e04:	bl	14bf8 <__assert_fail@plt+0x3898>
   12e08:	cmp	r0, #0
   12e0c:	ldrne	r0, [r0, #8]
   12e10:	bne	12dac <__assert_fail@plt+0x1a4c>
   12e14:	cmp	r7, #0
   12e18:	blt	12da8 <__assert_fail@plt+0x1a48>
   12e1c:	add	r1, sp, #8
   12e20:	mov	r0, r7
   12e24:	bl	1100c <fstatfs64@plt>
   12e28:	cmp	r0, #0
   12e2c:	bne	12da8 <__assert_fail@plt+0x1a48>
   12e30:	cmp	r4, #0
   12e34:	beq	12e80 <__assert_fail@plt+0x1b20>
   12e38:	mov	r0, #16
   12e3c:	bl	1792c <__assert_fail@plt+0x65cc>
   12e40:	subs	r5, r0, #0
   12e44:	beq	12e80 <__assert_fail@plt+0x1b20>
   12e48:	ldrd	r2, [r6, #64]	; 0x40
   12e4c:	mov	r1, r5
   12e50:	mov	r0, r4
   12e54:	strd	r2, [r5]
   12e58:	ldr	r3, [sp, #8]
   12e5c:	str	r3, [r5, #8]
   12e60:	bl	152d0 <__assert_fail@plt+0x3f70>
   12e64:	cmp	r0, #0
   12e68:	beq	12e78 <__assert_fail@plt+0x1b18>
   12e6c:	cmp	r5, r0
   12e70:	beq	12e80 <__assert_fail@plt+0x1b20>
   12e74:	bl	11318 <abort@plt>
   12e78:	mov	r0, r5
   12e7c:	bl	1297c <__assert_fail@plt+0x161c>
   12e80:	ldr	r0, [sp, #8]
   12e84:	b	12dac <__assert_fail@plt+0x1a4c>
   12e88:	andeq	r2, r1, ip, ror r9
   12e8c:	andeq	r2, r1, r4, lsr #20
   12e90:	andeq	r2, r1, r0, asr #20
   12e94:	push	{r4, r5, r6, lr}
   12e98:	mov	r5, r1
   12e9c:	ldr	r1, [r0, #32]
   12ea0:	sub	r3, r1, r5
   12ea4:	cmn	r1, #100	; 0x64
   12ea8:	clz	r3, r3
   12eac:	lsr	r3, r3, #5
   12eb0:	moveq	r3, #0
   12eb4:	cmp	r3, #0
   12eb8:	beq	12ec0 <__assert_fail@plt+0x1b60>
   12ebc:	bl	11318 <abort@plt>
   12ec0:	cmp	r2, #0
   12ec4:	mov	r4, r0
   12ec8:	beq	12ee8 <__assert_fail@plt+0x1b88>
   12ecc:	add	r0, r0, #60	; 0x3c
   12ed0:	bl	15430 <__assert_fail@plt+0x40d0>
   12ed4:	cmp	r0, #0
   12ed8:	blt	12ee0 <__assert_fail@plt+0x1b80>
   12edc:	bl	11324 <close@plt>
   12ee0:	str	r5, [r4, #32]
   12ee4:	pop	{r4, r5, r6, pc}
   12ee8:	ldr	r3, [r0, #48]	; 0x30
   12eec:	mvn	r2, r1
   12ef0:	lsr	r2, r2, #31
   12ef4:	eor	r3, r3, #4
   12ef8:	ands	r3, r2, r3, lsr #2
   12efc:	beq	12ee0 <__assert_fail@plt+0x1b80>
   12f00:	mov	r0, r1
   12f04:	b	12edc <__assert_fail@plt+0x1b7c>
   12f08:	ldr	r3, [r0, #48]	; 0x30
   12f0c:	push	{r4, r5, r6, lr}
   12f10:	mov	r5, r0
   12f14:	ands	r4, r3, #4
   12f18:	movne	r4, #0
   12f1c:	bne	12f34 <__assert_fail@plt+0x1bd4>
   12f20:	tst	r3, #512	; 0x200
   12f24:	beq	12f44 <__assert_fail@plt+0x1be4>
   12f28:	mov	r2, #1
   12f2c:	mvn	r1, #99	; 0x63
   12f30:	bl	12e94 <__assert_fail@plt+0x1b34>
   12f34:	add	r0, r5, #60	; 0x3c
   12f38:	bl	12d60 <__assert_fail@plt+0x1a00>
   12f3c:	mov	r0, r4
   12f40:	pop	{r4, r5, r6, pc}
   12f44:	ldr	r0, [r0, #28]
   12f48:	bl	112c4 <fchdir@plt>
   12f4c:	adds	r4, r0, #0
   12f50:	movne	r4, #1
   12f54:	b	12f34 <__assert_fail@plt+0x1bd4>
   12f58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f5c:	subs	sl, r3, #0
   12f60:	sub	sp, sp, #104	; 0x68
   12f64:	mov	r7, r0
   12f68:	mov	r8, r1
   12f6c:	mov	r6, r2
   12f70:	moveq	r9, sl
   12f74:	beq	12f8c <__assert_fail@plt+0x1c2c>
   12f78:	ldr	r1, [pc, #368]	; 130f0 <__assert_fail@plt+0x1d90>
   12f7c:	mov	r0, sl
   12f80:	bl	11048 <strcmp@plt>
   12f84:	clz	r9, r0
   12f88:	lsr	r9, r9, #5
   12f8c:	ldr	r3, [r7, #48]	; 0x30
   12f90:	ands	r4, r3, #4
   12f94:	beq	12fc0 <__assert_fail@plt+0x1c60>
   12f98:	mvn	r4, r6
   12f9c:	lsr	r4, r4, #31
   12fa0:	ands	r4, r4, r3, lsr #9
   12fa4:	beq	12fb4 <__assert_fail@plt+0x1c54>
   12fa8:	mov	r0, r6
   12fac:	mov	r4, #0
   12fb0:	bl	11324 <close@plt>
   12fb4:	mov	r0, r4
   12fb8:	add	sp, sp, #104	; 0x68
   12fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fc0:	ands	r2, r9, r6, lsr #31
   12fc4:	beq	130b0 <__assert_fail@plt+0x1d50>
   12fc8:	tst	r3, #512	; 0x200
   12fcc:	bne	12fec <__assert_fail@plt+0x1c8c>
   12fd0:	mov	r1, sl
   12fd4:	mov	r0, r7
   12fd8:	bl	12cf8 <__assert_fail@plt+0x1998>
   12fdc:	subs	r5, r0, #0
   12fe0:	bge	13018 <__assert_fail@plt+0x1cb8>
   12fe4:	mvn	r4, #0
   12fe8:	b	12fb4 <__assert_fail@plt+0x1c54>
   12fec:	add	r5, r7, #60	; 0x3c
   12ff0:	mov	r0, r5
   12ff4:	bl	15428 <__assert_fail@plt+0x40c8>
   12ff8:	cmp	r0, #0
   12ffc:	bne	12fd0 <__assert_fail@plt+0x1c70>
   13000:	mov	r0, r5
   13004:	bl	15474 <__assert_fail@plt+0x4114>
   13008:	subs	r5, r0, #0
   1300c:	movge	r6, r5
   13010:	movge	sl, r4
   13014:	blt	12fd0 <__assert_fail@plt+0x1c70>
   13018:	ldr	r3, [r7, #48]	; 0x30
   1301c:	tst	r3, #2
   13020:	bne	13040 <__assert_fail@plt+0x1ce0>
   13024:	cmp	sl, #0
   13028:	beq	130c0 <__assert_fail@plt+0x1d60>
   1302c:	ldr	r1, [pc, #188]	; 130f0 <__assert_fail@plt+0x1d90>
   13030:	mov	r0, sl
   13034:	bl	11048 <strcmp@plt>
   13038:	cmp	r0, #0
   1303c:	bne	130c0 <__assert_fail@plt+0x1d60>
   13040:	mov	r1, sp
   13044:	mov	r0, r5
   13048:	bl	18210 <__assert_fail@plt+0x6eb0>
   1304c:	cmp	r0, #0
   13050:	bne	13088 <__assert_fail@plt+0x1d28>
   13054:	ldrd	r2, [sp]
   13058:	ldrd	r0, [r8, #64]	; 0x40
   1305c:	cmp	r1, r3
   13060:	cmpeq	r0, r2
   13064:	bne	1307c <__assert_fail@plt+0x1d1c>
   13068:	ldrd	r2, [sp, #96]	; 0x60
   1306c:	ldrd	r0, [r8, #160]	; 0xa0
   13070:	cmp	r1, r3
   13074:	cmpeq	r0, r2
   13078:	beq	130c0 <__assert_fail@plt+0x1d60>
   1307c:	bl	11204 <__errno_location@plt>
   13080:	mov	r3, #2
   13084:	str	r3, [r0]
   13088:	mvn	r4, #0
   1308c:	cmp	r6, #0
   13090:	bge	12fb4 <__assert_fail@plt+0x1c54>
   13094:	bl	11204 <__errno_location@plt>
   13098:	mov	r6, r0
   1309c:	mov	r0, r5
   130a0:	ldr	r7, [r6]
   130a4:	bl	11324 <close@plt>
   130a8:	str	r7, [r6]
   130ac:	b	12fb4 <__assert_fail@plt+0x1c54>
   130b0:	cmp	r6, #0
   130b4:	movge	r5, r6
   130b8:	bge	13018 <__assert_fail@plt+0x1cb8>
   130bc:	b	12fd0 <__assert_fail@plt+0x1c70>
   130c0:	ldr	r3, [r7, #48]	; 0x30
   130c4:	tst	r3, #512	; 0x200
   130c8:	beq	130e0 <__assert_fail@plt+0x1d80>
   130cc:	eor	r2, r9, #1
   130d0:	mov	r1, r5
   130d4:	mov	r0, r7
   130d8:	bl	12e94 <__assert_fail@plt+0x1b34>
   130dc:	b	12fb4 <__assert_fail@plt+0x1c54>
   130e0:	mov	r0, r5
   130e4:	bl	112c4 <fchdir@plt>
   130e8:	mov	r4, r0
   130ec:	b	1308c <__assert_fail@plt+0x1d2c>
   130f0:	andeq	r9, r1, r4, lsr #1
   130f4:	ldr	r3, [r0, #36]	; 0x24
   130f8:	add	r1, r1, #256	; 0x100
   130fc:	push	{r4, r5, r6, lr}
   13100:	mov	r5, r0
   13104:	ldr	r0, [r0, #24]
   13108:	adds	r1, r3, r1
   1310c:	bcc	13130 <__assert_fail@plt+0x1dd0>
   13110:	mov	r4, #0
   13114:	bl	1297c <__assert_fail@plt+0x161c>
   13118:	str	r4, [r5, #24]
   1311c:	bl	11204 <__errno_location@plt>
   13120:	mov	r3, #36	; 0x24
   13124:	str	r3, [r0]
   13128:	mov	r0, r4
   1312c:	pop	{r4, r5, r6, pc}
   13130:	str	r1, [r5, #36]	; 0x24
   13134:	bl	17958 <__assert_fail@plt+0x65f8>
   13138:	subs	r4, r0, #0
   1313c:	bne	13150 <__assert_fail@plt+0x1df0>
   13140:	ldr	r0, [r5, #24]
   13144:	bl	1297c <__assert_fail@plt+0x161c>
   13148:	str	r4, [r5, #24]
   1314c:	b	13128 <__assert_fail@plt+0x1dc8>
   13150:	mov	r0, #1
   13154:	str	r4, [r5, #24]
   13158:	pop	{r4, r5, r6, pc}
   1315c:	ldr	r3, [r0, #48]	; 0x30
   13160:	movw	r2, #258	; 0x102
   13164:	push	{r0, r1, r4, lr}
   13168:	mov	r4, r0
   1316c:	tst	r2, r3
   13170:	beq	131a4 <__assert_fail@plt+0x1e44>
   13174:	ldr	r3, [pc, #72]	; 131c4 <__assert_fail@plt+0x1e64>
   13178:	mov	r1, #0
   1317c:	mov	r0, #31
   13180:	ldr	r2, [pc, #64]	; 131c8 <__assert_fail@plt+0x1e68>
   13184:	str	r3, [sp]
   13188:	ldr	r3, [pc, #60]	; 131cc <__assert_fail@plt+0x1e6c>
   1318c:	bl	14e08 <__assert_fail@plt+0x3aa8>
   13190:	str	r0, [r4, #56]	; 0x38
   13194:	adds	r0, r0, #0
   13198:	movne	r0, #1
   1319c:	add	sp, sp, #8
   131a0:	pop	{r4, pc}
   131a4:	mov	r0, #32
   131a8:	bl	1792c <__assert_fail@plt+0x65cc>
   131ac:	cmp	r0, #0
   131b0:	str	r0, [r4, #56]	; 0x38
   131b4:	beq	1319c <__assert_fail@plt+0x1e3c>
   131b8:	bl	17a0c <__assert_fail@plt+0x66ac>
   131bc:	mov	r0, #1
   131c0:	b	1319c <__assert_fail@plt+0x1e3c>
   131c4:	andeq	r2, r1, ip, ror r9
   131c8:	andeq	r2, r1, r8, lsl #20
   131cc:	andeq	r2, r1, ip, asr #19
   131d0:	mov	r3, r0
   131d4:	movw	r2, #258	; 0x102
   131d8:	ldr	r0, [r0, #56]	; 0x38
   131dc:	ldr	r3, [r3, #48]	; 0x30
   131e0:	tst	r2, r3
   131e4:	beq	131f4 <__assert_fail@plt+0x1e94>
   131e8:	cmp	r0, #0
   131ec:	bxeq	lr
   131f0:	b	14f70 <__assert_fail@plt+0x3c10>
   131f4:	b	1297c <__assert_fail@plt+0x161c>
   131f8:	ldr	r3, [r0, #48]	; 0x30
   131fc:	movw	r2, #258	; 0x102
   13200:	push	{r4, r5, r6, lr}
   13204:	mov	r6, r0
   13208:	mov	r4, r1
   1320c:	tst	r2, r3
   13210:	beq	13284 <__assert_fail@plt+0x1f24>
   13214:	mov	r0, #24
   13218:	bl	1792c <__assert_fail@plt+0x65cc>
   1321c:	subs	r5, r0, #0
   13220:	bne	1322c <__assert_fail@plt+0x1ecc>
   13224:	mov	r0, #0
   13228:	pop	{r4, r5, r6, pc}
   1322c:	ldrd	r2, [r4, #64]	; 0x40
   13230:	mov	r1, r5
   13234:	ldr	r0, [r6, #56]	; 0x38
   13238:	strd	r2, [r5]
   1323c:	ldrd	r2, [r4, #160]	; 0xa0
   13240:	str	r4, [r5, #16]
   13244:	strd	r2, [r5, #8]
   13248:	bl	152d0 <__assert_fail@plt+0x3f70>
   1324c:	cmp	r5, r0
   13250:	mov	r6, r0
   13254:	bne	13260 <__assert_fail@plt+0x1f00>
   13258:	mov	r0, #1
   1325c:	pop	{r4, r5, r6, pc}
   13260:	mov	r0, r5
   13264:	bl	1297c <__assert_fail@plt+0x161c>
   13268:	cmp	r6, #0
   1326c:	beq	13224 <__assert_fail@plt+0x1ec4>
   13270:	ldr	r3, [r6, #16]
   13274:	str	r3, [r4]
   13278:	mov	r3, #2
   1327c:	strh	r3, [r4, #56]	; 0x38
   13280:	b	13258 <__assert_fail@plt+0x1ef8>
   13284:	add	r1, r1, #64	; 0x40
   13288:	ldr	r0, [r0, #56]	; 0x38
   1328c:	bl	17a28 <__assert_fail@plt+0x66c8>
   13290:	cmp	r0, #0
   13294:	beq	13258 <__assert_fail@plt+0x1ef8>
   13298:	mov	r3, #2
   1329c:	str	r4, [r4]
   132a0:	strh	r3, [r4, #56]	; 0x38
   132a4:	pop	{r4, r5, r6, pc}
   132a8:	ldr	r3, [r0, #48]	; 0x30
   132ac:	mov	r2, r1
   132b0:	movw	r1, #258	; 0x102
   132b4:	push	{r4, r5, lr}
   132b8:	sub	sp, sp, #28
   132bc:	tst	r1, r3
   132c0:	beq	132f8 <__assert_fail@plt+0x1f98>
   132c4:	ldrd	r4, [r2, #64]	; 0x40
   132c8:	mov	r1, sp
   132cc:	ldrd	r2, [r2, #160]	; 0xa0
   132d0:	ldr	r0, [r0, #56]	; 0x38
   132d4:	strd	r4, [sp]
   132d8:	strd	r2, [sp, #8]
   132dc:	bl	15300 <__assert_fail@plt+0x3fa0>
   132e0:	cmp	r0, #0
   132e4:	bne	132ec <__assert_fail@plt+0x1f8c>
   132e8:	bl	11318 <abort@plt>
   132ec:	bl	1297c <__assert_fail@plt+0x161c>
   132f0:	add	sp, sp, #28
   132f4:	pop	{r4, r5, pc}
   132f8:	ldr	ip, [r2, #4]
   132fc:	cmp	ip, #0
   13300:	beq	132f0 <__assert_fail@plt+0x1f90>
   13304:	ldr	r3, [ip, #48]	; 0x30
   13308:	cmp	r3, #0
   1330c:	blt	132f0 <__assert_fail@plt+0x1f90>
   13310:	ldr	r3, [r0, #56]	; 0x38
   13314:	ldrd	r0, [r3, #16]
   13318:	orrs	r1, r0, r1
   1331c:	beq	132e8 <__assert_fail@plt+0x1f88>
   13320:	ldrd	r4, [r3]
   13324:	ldrd	r0, [r2, #160]	; 0xa0
   13328:	cmp	r5, r1
   1332c:	cmpeq	r4, r0
   13330:	bne	132f0 <__assert_fail@plt+0x1f90>
   13334:	ldrd	r0, [r3, #8]
   13338:	ldrd	r4, [r2, #64]	; 0x40
   1333c:	cmp	r1, r5
   13340:	cmpeq	r0, r4
   13344:	ldrdeq	r0, [ip, #64]	; 0x40
   13348:	strdeq	r0, [r3, #8]
   1334c:	ldrdeq	r0, [ip, #160]	; 0xa0
   13350:	strdeq	r0, [r3]
   13354:	b	132f0 <__assert_fail@plt+0x1f90>
   13358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1335c:	sub	sp, sp, #60	; 0x3c
   13360:	mov	r4, r0
   13364:	ldr	r5, [r0]
   13368:	str	r1, [sp, #8]
   1336c:	ldr	r3, [r5, #12]
   13370:	cmp	r3, #0
   13374:	str	r3, [sp]
   13378:	beq	133cc <__assert_fail@plt+0x206c>
   1337c:	mov	r0, r3
   13380:	bl	112b8 <dirfd@plt>
   13384:	cmp	r0, #0
   13388:	str	r0, [sp, #52]	; 0x34
   1338c:	bge	1343c <__assert_fail@plt+0x20dc>
   13390:	mov	r6, #0
   13394:	ldr	r0, [r5, #12]
   13398:	bl	1133c <closedir@plt>
   1339c:	str	r6, [r5, #12]
   133a0:	ldr	r3, [sp, #8]
   133a4:	cmp	r3, #3
   133a8:	bne	135c4 <__assert_fail@plt+0x2264>
   133ac:	mov	r3, #4
   133b0:	strh	r3, [r5, #56]	; 0x38
   133b4:	bl	11204 <__errno_location@plt>
   133b8:	ldr	r3, [r0]
   133bc:	str	r3, [r5, #32]
   133c0:	mov	r0, r6
   133c4:	add	sp, sp, #60	; 0x3c
   133c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133cc:	ldr	r3, [r0, #48]	; 0x30
   133d0:	ldr	r1, [r5, #24]
   133d4:	and	r2, r3, #516	; 0x204
   133d8:	cmp	r2, #512	; 0x200
   133dc:	ldreq	r0, [r0, #32]
   133e0:	mvnne	r0, #99	; 0x63
   133e4:	ands	r2, r3, #16
   133e8:	beq	13404 <__assert_fail@plt+0x20a4>
   133ec:	tst	r3, #1
   133f0:	moveq	r2, #32768	; 0x8000
   133f4:	beq	13404 <__assert_fail@plt+0x20a4>
   133f8:	ldr	r2, [r5, #48]	; 0x30
   133fc:	cmp	r2, #0
   13400:	movne	r2, #32768	; 0x8000
   13404:	add	r3, sp, #52	; 0x34
   13408:	bl	15558 <__assert_fail@plt+0x41f8>
   1340c:	cmp	r0, #0
   13410:	mov	r6, r0
   13414:	str	r0, [r5, #12]
   13418:	beq	133a0 <__assert_fail@plt+0x2040>
   1341c:	ldrh	r3, [r5, #56]	; 0x38
   13420:	cmp	r3, #11
   13424:	bne	135cc <__assert_fail@plt+0x226c>
   13428:	mov	r2, #0
   1342c:	mov	r1, r5
   13430:	mov	r0, r4
   13434:	bl	12a94 <__assert_fail@plt+0x1734>
   13438:	strh	r0, [r5, #56]	; 0x38
   1343c:	ldr	r3, [r4, #44]	; 0x2c
   13440:	cmp	r3, #0
   13444:	ldr	r3, [pc, #1812]	; 13b60 <__assert_fail@plt+0x2800>
   13448:	mvnne	r3, #0
   1344c:	str	r3, [sp, #36]	; 0x24
   13450:	ldr	r3, [sp]
   13454:	cmp	r3, #0
   13458:	beq	13618 <__assert_fail@plt+0x22b8>
   1345c:	mov	r3, #1
   13460:	str	r3, [sp, #24]
   13464:	ldr	r2, [r5, #28]
   13468:	mov	r8, #0
   1346c:	mov	r9, r8
   13470:	mov	r6, r8
   13474:	ldr	r3, [r5, #40]	; 0x28
   13478:	str	r8, [sp, #20]
   1347c:	str	r8, [sp, #32]
   13480:	sub	fp, r3, #1
   13484:	ldrb	r2, [r2, fp]
   13488:	cmp	r2, #47	; 0x2f
   1348c:	movne	fp, r3
   13490:	ldr	r3, [r4, #48]	; 0x30
   13494:	ands	r3, r3, #4
   13498:	ldrne	r3, [r4, #24]
   1349c:	streq	r3, [sp, #4]
   134a0:	addne	r2, r3, fp
   134a4:	addne	r2, r2, #1
   134a8:	strne	r2, [sp, #4]
   134ac:	movne	r2, #47	; 0x2f
   134b0:	strbne	r2, [r3, fp]
   134b4:	add	r3, fp, #1
   134b8:	add	r2, fp, #1
   134bc:	str	r3, [sp, #16]
   134c0:	ldr	r3, [r4, #36]	; 0x24
   134c4:	sub	r3, r3, r2
   134c8:	str	r3, [sp, #28]
   134cc:	ldr	r3, [r5, #48]	; 0x30
   134d0:	add	r3, r3, #1
   134d4:	str	r3, [sp, #40]	; 0x28
   134d8:	ldr	r7, [r5, #12]
   134dc:	cmp	r7, #0
   134e0:	beq	1352c <__assert_fail@plt+0x21cc>
   134e4:	bl	11204 <__errno_location@plt>
   134e8:	mov	r3, #0
   134ec:	str	r0, [sp, #12]
   134f0:	str	r3, [r0]
   134f4:	mov	r0, r7
   134f8:	bl	112a0 <readdir64@plt>
   134fc:	subs	r3, r0, #0
   13500:	bne	1375c <__assert_fail@plt+0x23fc>
   13504:	ldr	r3, [sp, #12]
   13508:	ldr	r3, [r3]
   1350c:	cmp	r3, #0
   13510:	beq	1352c <__assert_fail@plt+0x21cc>
   13514:	str	r3, [r5, #32]
   13518:	ldr	r3, [sp]
   1351c:	orrs	r3, r3, r9
   13520:	moveq	r3, #4
   13524:	movne	r3, #7
   13528:	strh	r3, [r5, #56]	; 0x38
   1352c:	ldr	r0, [r5, #12]
   13530:	cmp	r0, #0
   13534:	beq	13544 <__assert_fail@plt+0x21e4>
   13538:	bl	1133c <closedir@plt>
   1353c:	mov	r3, #0
   13540:	str	r3, [r5, #12]
   13544:	ldr	r3, [sp, #20]
   13548:	cmp	r3, #0
   1354c:	bne	13a1c <__assert_fail@plt+0x26bc>
   13550:	ldr	r3, [r4, #48]	; 0x30
   13554:	tst	r3, #4
   13558:	bne	13a98 <__assert_fail@plt+0x2738>
   1355c:	ldr	r2, [sp]
   13560:	ldr	r3, [sp, #24]
   13564:	cmp	r2, #0
   13568:	movne	r3, #0
   1356c:	cmp	r3, #0
   13570:	beq	13adc <__assert_fail@plt+0x277c>
   13574:	ldr	r3, [sp, #8]
   13578:	cmp	r9, #0
   1357c:	cmpne	r3, #1
   13580:	bne	13b08 <__assert_fail@plt+0x27a8>
   13584:	ldr	r3, [r5, #48]	; 0x30
   13588:	cmp	r3, #0
   1358c:	bne	13ac4 <__assert_fail@plt+0x2764>
   13590:	mov	r0, r4
   13594:	bl	12f08 <__assert_fail@plt+0x1ba8>
   13598:	adds	r0, r0, #0
   1359c:	movne	r0, #1
   135a0:	cmp	r0, #0
   135a4:	beq	13adc <__assert_fail@plt+0x277c>
   135a8:	mov	r3, #7
   135ac:	strh	r3, [r5, #56]	; 0x38
   135b0:	ldr	r3, [r4, #48]	; 0x30
   135b4:	orr	r3, r3, #8192	; 0x2000
   135b8:	str	r3, [r4, #48]	; 0x30
   135bc:	mov	r0, r6
   135c0:	bl	12d2c <__assert_fail@plt+0x19cc>
   135c4:	mov	r6, #0
   135c8:	b	133c0 <__assert_fail@plt+0x2060>
   135cc:	ldr	r3, [r4, #48]	; 0x30
   135d0:	tst	r3, #256	; 0x100
   135d4:	beq	1343c <__assert_fail@plt+0x20dc>
   135d8:	mov	r1, r5
   135dc:	mov	r0, r4
   135e0:	bl	132a8 <__assert_fail@plt+0x1f48>
   135e4:	mov	r2, #0
   135e8:	mov	r1, r5
   135ec:	mov	r0, r4
   135f0:	bl	12a94 <__assert_fail@plt+0x1734>
   135f4:	mov	r1, r5
   135f8:	mov	r0, r4
   135fc:	bl	131f8 <__assert_fail@plt+0x1e98>
   13600:	subs	r6, r0, #0
   13604:	bne	1343c <__assert_fail@plt+0x20dc>
   13608:	bl	11204 <__errno_location@plt>
   1360c:	mov	r3, #12
   13610:	str	r3, [r0]
   13614:	b	133c0 <__assert_fail@plt+0x2060>
   13618:	ldr	r3, [sp, #8]
   1361c:	cmp	r3, #2
   13620:	ldreq	r0, [sp]
   13624:	beq	13698 <__assert_fail@plt+0x2338>
   13628:	ldr	r3, [r4, #48]	; 0x30
   1362c:	and	r3, r3, #56	; 0x38
   13630:	cmp	r3, #24
   13634:	bne	13674 <__assert_fail@plt+0x2314>
   13638:	ldr	r3, [r5, #84]	; 0x54
   1363c:	cmp	r3, #2
   13640:	bne	13674 <__assert_fail@plt+0x2314>
   13644:	mov	r0, r5
   13648:	ldr	r1, [sp, #52]	; 0x34
   1364c:	bl	12d90 <__assert_fail@plt+0x1a30>
   13650:	movw	r3, #26985	; 0x6969
   13654:	cmp	r0, r3
   13658:	beq	13674 <__assert_fail@plt+0x2314>
   1365c:	bgt	1367c <__assert_fail@plt+0x231c>
   13660:	ldr	r3, [pc, #1276]	; 13b64 <__assert_fail@plt+0x2804>
   13664:	cmp	r0, r3
   13668:	clzne	r0, r0
   1366c:	lsrne	r0, r0, #5
   13670:	bne	13698 <__assert_fail@plt+0x2338>
   13674:	mov	r0, #1
   13678:	b	13698 <__assert_fail@plt+0x2338>
   1367c:	movw	r3, #40864	; 0x9fa0
   13680:	cmp	r0, r3
   13684:	beq	13674 <__assert_fail@plt+0x2314>
   13688:	ldr	r3, [pc, #1240]	; 13b68 <__assert_fail@plt+0x2808>
   1368c:	sub	r0, r0, r3
   13690:	clz	r0, r0
   13694:	lsr	r0, r0, #5
   13698:	ldr	r3, [sp, #8]
   1369c:	mov	r6, r0
   136a0:	sub	r7, r3, #3
   136a4:	clz	r7, r7
   136a8:	lsr	r7, r7, #5
   136ac:	orrs	r3, r7, r0
   136b0:	str	r3, [sp, #24]
   136b4:	beq	13464 <__assert_fail@plt+0x2104>
   136b8:	ldr	r3, [r4, #48]	; 0x30
   136bc:	tst	r3, #512	; 0x200
   136c0:	beq	136d8 <__assert_fail@plt+0x2378>
   136c4:	mov	r2, #3
   136c8:	movw	r1, #1030	; 0x406
   136cc:	ldr	r0, [sp, #52]	; 0x34
   136d0:	bl	17b80 <__assert_fail@plt+0x6820>
   136d4:	str	r0, [sp, #52]	; 0x34
   136d8:	ldr	r2, [sp, #52]	; 0x34
   136dc:	cmp	r2, #0
   136e0:	bge	13730 <__assert_fail@plt+0x23d0>
   136e4:	tst	r7, r6
   136e8:	bne	1374c <__assert_fail@plt+0x23ec>
   136ec:	ldrh	r3, [r5, #58]	; 0x3a
   136f0:	ldr	r0, [r5, #12]
   136f4:	orr	r3, r3, #1
   136f8:	strh	r3, [r5, #58]	; 0x3a
   136fc:	bl	1133c <closedir@plt>
   13700:	mov	r3, #0
   13704:	str	r3, [r5, #12]
   13708:	ldr	r3, [r4, #48]	; 0x30
   1370c:	tst	r3, #512	; 0x200
   13710:	beq	13724 <__assert_fail@plt+0x23c4>
   13714:	ldr	r0, [sp, #52]	; 0x34
   13718:	cmp	r0, #0
   1371c:	blt	13724 <__assert_fail@plt+0x23c4>
   13720:	bl	11324 <close@plt>
   13724:	mov	r3, #0
   13728:	str	r3, [r5, #12]
   1372c:	b	13460 <__assert_fail@plt+0x2100>
   13730:	mov	r3, #0
   13734:	mov	r1, r5
   13738:	mov	r0, r4
   1373c:	bl	12f58 <__assert_fail@plt+0x1bf8>
   13740:	cmp	r0, #0
   13744:	bne	136e4 <__assert_fail@plt+0x2384>
   13748:	b	1345c <__assert_fail@plt+0x20fc>
   1374c:	bl	11204 <__errno_location@plt>
   13750:	ldr	r3, [r0]
   13754:	str	r3, [r5, #32]
   13758:	b	136ec <__assert_fail@plt+0x238c>
   1375c:	ldr	r2, [r4, #48]	; 0x30
   13760:	tst	r2, #32
   13764:	bne	1378c <__assert_fail@plt+0x242c>
   13768:	ldrb	r2, [r3, #19]
   1376c:	cmp	r2, #46	; 0x2e
   13770:	bne	1378c <__assert_fail@plt+0x242c>
   13774:	ldrb	r2, [r3, #20]
   13778:	cmp	r2, #0
   1377c:	beq	134d8 <__assert_fail@plt+0x2178>
   13780:	ldrh	r2, [r3, #20]
   13784:	cmp	r2, #46	; 0x2e
   13788:	beq	134d8 <__assert_fail@plt+0x2178>
   1378c:	add	r7, r3, #19
   13790:	str	r3, [sp, #44]	; 0x2c
   13794:	mov	r0, r7
   13798:	bl	111d4 <strlen@plt>
   1379c:	mov	r2, r0
   137a0:	mov	r1, r7
   137a4:	mov	sl, r0
   137a8:	mov	r0, r4
   137ac:	bl	12c84 <__assert_fail@plt+0x1924>
   137b0:	subs	r7, r0, #0
   137b4:	beq	137f0 <__assert_fail@plt+0x2490>
   137b8:	ldr	r3, [sp, #28]
   137bc:	cmp	r3, sl
   137c0:	ldr	r3, [sp, #44]	; 0x2c
   137c4:	bhi	13870 <__assert_fail@plt+0x2510>
   137c8:	ldr	r2, [r4, #24]
   137cc:	add	r1, fp, #2
   137d0:	mov	r0, r4
   137d4:	add	r1, r1, sl
   137d8:	str	r2, [sp, #28]
   137dc:	bl	130f4 <__assert_fail@plt+0x1d94>
   137e0:	cmp	r0, #0
   137e4:	ldr	r2, [sp, #28]
   137e8:	ldr	r3, [sp, #44]	; 0x2c
   137ec:	bne	13838 <__assert_fail@plt+0x24d8>
   137f0:	ldr	r3, [sp, #12]
   137f4:	mov	r0, r7
   137f8:	ldr	r8, [r3]
   137fc:	bl	1297c <__assert_fail@plt+0x161c>
   13800:	mov	r0, r6
   13804:	mov	r6, #0
   13808:	bl	12d2c <__assert_fail@plt+0x19cc>
   1380c:	ldr	r0, [r5, #12]
   13810:	bl	1133c <closedir@plt>
   13814:	mov	r3, #7
   13818:	str	r6, [r5, #12]
   1381c:	strh	r3, [r5, #56]	; 0x38
   13820:	ldr	r3, [r4, #48]	; 0x30
   13824:	orr	r3, r3, #8192	; 0x2000
   13828:	str	r3, [r4, #48]	; 0x30
   1382c:	ldr	r3, [sp, #12]
   13830:	str	r8, [r3]
   13834:	b	133c0 <__assert_fail@plt+0x2060>
   13838:	ldr	r1, [r4, #24]
   1383c:	cmp	r1, r2
   13840:	ldreq	r0, [sp, #20]
   13844:	beq	1385c <__assert_fail@plt+0x24fc>
   13848:	ldr	r2, [r4, #48]	; 0x30
   1384c:	tst	r2, #4
   13850:	ldrne	r2, [sp, #16]
   13854:	addne	r2, r1, r2
   13858:	strne	r2, [sp, #4]
   1385c:	ldr	r1, [sp, #16]
   13860:	str	r0, [sp, #20]
   13864:	ldr	r2, [r4, #36]	; 0x24
   13868:	sub	r2, r2, r1
   1386c:	str	r2, [sp, #28]
   13870:	ldr	r2, [sp, #16]
   13874:	adds	r2, r2, sl
   13878:	movcs	sl, #1
   1387c:	movcc	sl, #0
   13880:	bcc	138c8 <__assert_fail@plt+0x2568>
   13884:	mov	r0, r7
   13888:	bl	1297c <__assert_fail@plt+0x161c>
   1388c:	mov	r0, r6
   13890:	mov	r6, #0
   13894:	bl	12d2c <__assert_fail@plt+0x19cc>
   13898:	ldr	r0, [r5, #12]
   1389c:	bl	1133c <closedir@plt>
   138a0:	mov	r3, #7
   138a4:	ldr	r2, [sp, #12]
   138a8:	str	r6, [r5, #12]
   138ac:	strh	r3, [r5, #56]	; 0x38
   138b0:	ldr	r3, [r4, #48]	; 0x30
   138b4:	orr	r3, r3, #8192	; 0x2000
   138b8:	str	r3, [r4, #48]	; 0x30
   138bc:	mov	r3, #36	; 0x24
   138c0:	str	r3, [r2]
   138c4:	b	133c0 <__assert_fail@plt+0x2060>
   138c8:	ldr	r1, [sp, #40]	; 0x28
   138cc:	str	r1, [r7, #48]	; 0x30
   138d0:	ldr	r1, [r4]
   138d4:	str	r1, [r7, #4]
   138d8:	str	r2, [r7, #40]	; 0x28
   138dc:	ldrd	r0, [r3]
   138e0:	ldr	r2, [r4, #48]	; 0x30
   138e4:	strd	r0, [r7, #160]	; 0xa0
   138e8:	add	r1, r7, #168	; 0xa8
   138ec:	tst	r2, #4
   138f0:	streq	r1, [r7, #24]
   138f4:	beq	13918 <__assert_fail@plt+0x25b8>
   138f8:	ldr	r2, [r7, #28]
   138fc:	str	r3, [sp, #12]
   13900:	ldr	r0, [sp, #4]
   13904:	str	r2, [r7, #24]
   13908:	ldr	r2, [r7, #52]	; 0x34
   1390c:	add	r2, r2, #1
   13910:	bl	1106c <memmove@plt>
   13914:	ldr	r3, [sp, #12]
   13918:	ldr	r2, [r4, #44]	; 0x2c
   1391c:	ldr	r1, [r4, #48]	; 0x30
   13920:	cmp	r2, #0
   13924:	beq	13930 <__assert_fail@plt+0x25d0>
   13928:	ands	r2, r1, #1024	; 0x400
   1392c:	beq	13a00 <__assert_fail@plt+0x26a0>
   13930:	ands	r2, r1, #8
   13934:	ldrb	r3, [r3, #18]
   13938:	beq	13954 <__assert_fail@plt+0x25f4>
   1393c:	ands	r2, r3, #251	; 0xfb
   13940:	beq	13954 <__assert_fail@plt+0x25f4>
   13944:	ubfx	r1, r1, #4, #1
   13948:	cmp	r3, #10
   1394c:	moveq	r2, r1
   13950:	orrne	r2, r1, #1
   13954:	mov	r1, #11
   13958:	sub	r3, r3, #1
   1395c:	cmp	r3, r1
   13960:	strh	r1, [r7, #56]	; 0x38
   13964:	lslls	r3, r3, #1
   13968:	ldrls	r1, [pc, #508]	; 13b6c <__assert_fail@plt+0x280c>
   1396c:	ldrhls	sl, [r1, r3]
   13970:	cmp	r2, #0
   13974:	mov	r3, #0
   13978:	movne	r2, #1
   1397c:	moveq	r2, #2
   13980:	str	sl, [r7, #80]	; 0x50
   13984:	strd	r2, [r7, #112]	; 0x70
   13988:	mov	r3, #0
   1398c:	cmp	r6, r3
   13990:	str	r3, [r7, #8]
   13994:	moveq	r6, r7
   13998:	ldrne	r3, [sp, #32]
   1399c:	strne	r7, [r3, #8]
   139a0:	movw	r3, #10000	; 0x2710
   139a4:	cmp	r9, r3
   139a8:	bne	139e8 <__assert_fail@plt+0x2688>
   139ac:	ldr	sl, [r4, #44]	; 0x2c
   139b0:	cmp	sl, #0
   139b4:	bne	139e8 <__assert_fail@plt+0x2688>
   139b8:	mov	r0, r5
   139bc:	ldr	r1, [sp, #52]	; 0x34
   139c0:	bl	12d90 <__assert_fail@plt+0x1a30>
   139c4:	movw	r3, #26985	; 0x6969
   139c8:	cmp	r0, r3
   139cc:	beq	13a14 <__assert_fail@plt+0x26b4>
   139d0:	ldr	r3, [pc, #408]	; 13b70 <__assert_fail@plt+0x2810>
   139d4:	cmp	r0, r3
   139d8:	beq	13a14 <__assert_fail@plt+0x26b4>
   139dc:	ldr	r3, [pc, #384]	; 13b64 <__assert_fail@plt+0x2804>
   139e0:	subs	r8, r0, r3
   139e4:	movne	r8, #1
   139e8:	ldr	r3, [sp, #36]	; 0x24
   139ec:	add	r9, r9, #1
   139f0:	cmp	r3, r9
   139f4:	bls	13544 <__assert_fail@plt+0x21e4>
   139f8:	str	r7, [sp, #32]
   139fc:	b	134d8 <__assert_fail@plt+0x2178>
   13a00:	mov	r1, r7
   13a04:	mov	r0, r4
   13a08:	bl	12a94 <__assert_fail@plt+0x1734>
   13a0c:	strh	r0, [r7, #56]	; 0x38
   13a10:	b	13988 <__assert_fail@plt+0x2628>
   13a14:	mov	r8, sl
   13a18:	b	139e8 <__assert_fail@plt+0x2688>
   13a1c:	ldr	r3, [r4, #4]
   13a20:	ldr	r1, [r4, #24]
   13a24:	cmp	r3, #0
   13a28:	bne	13a70 <__assert_fail@plt+0x2710>
   13a2c:	mov	r3, r6
   13a30:	ldr	r2, [r3, #48]	; 0x30
   13a34:	cmp	r2, #0
   13a38:	blt	13550 <__assert_fail@plt+0x21f0>
   13a3c:	ldr	r2, [r3, #24]
   13a40:	add	r0, r3, #168	; 0xa8
   13a44:	cmp	r2, r0
   13a48:	ldrne	r0, [r3, #28]
   13a4c:	str	r1, [r3, #28]
   13a50:	subne	r2, r2, r0
   13a54:	addne	r2, r1, r2
   13a58:	strne	r2, [r3, #24]
   13a5c:	ldr	r2, [r3, #8]
   13a60:	cmp	r2, #0
   13a64:	ldreq	r2, [r3, #4]
   13a68:	mov	r3, r2
   13a6c:	b	13a30 <__assert_fail@plt+0x26d0>
   13a70:	ldr	r2, [r3, #24]
   13a74:	add	r0, r3, #168	; 0xa8
   13a78:	cmp	r2, r0
   13a7c:	ldrne	r0, [r3, #28]
   13a80:	str	r1, [r3, #28]
   13a84:	subne	r2, r2, r0
   13a88:	addne	r2, r1, r2
   13a8c:	strne	r2, [r3, #24]
   13a90:	ldr	r3, [r3, #8]
   13a94:	b	13a24 <__assert_fail@plt+0x26c4>
   13a98:	ldr	r2, [sp, #16]
   13a9c:	ldr	r3, [r4, #36]	; 0x24
   13aa0:	cmp	r9, #0
   13aa4:	cmpne	r3, r2
   13aa8:	ldreq	r3, [sp, #4]
   13aac:	subeq	r3, r3, #1
   13ab0:	streq	r3, [sp, #4]
   13ab4:	mov	r3, #0
   13ab8:	ldr	r2, [sp, #4]
   13abc:	strb	r3, [r2]
   13ac0:	b	1355c <__assert_fail@plt+0x21fc>
   13ac4:	ldr	r3, [pc, #168]	; 13b74 <__assert_fail@plt+0x2814>
   13ac8:	mvn	r2, #0
   13acc:	mov	r0, r4
   13ad0:	ldr	r1, [r5, #4]
   13ad4:	bl	12f58 <__assert_fail@plt+0x1bf8>
   13ad8:	b	13598 <__assert_fail@plt+0x2238>
   13adc:	cmp	r9, #0
   13ae0:	bne	13b08 <__assert_fail@plt+0x27a8>
   13ae4:	ldr	r3, [sp, #8]
   13ae8:	cmp	r3, #3
   13aec:	bne	135bc <__assert_fail@plt+0x225c>
   13af0:	ldrh	r3, [r5, #56]	; 0x38
   13af4:	cmp	r3, #4
   13af8:	cmpne	r3, #7
   13afc:	movne	r3, #6
   13b00:	strhne	r3, [r5, #56]	; 0x38
   13b04:	b	135bc <__assert_fail@plt+0x225c>
   13b08:	cmp	r8, #0
   13b0c:	beq	13b38 <__assert_fail@plt+0x27d8>
   13b10:	ldr	r3, [pc, #96]	; 13b78 <__assert_fail@plt+0x2818>
   13b14:	mov	r1, r6
   13b18:	mov	r2, r9
   13b1c:	mov	r0, r4
   13b20:	str	r3, [r4, #44]	; 0x2c
   13b24:	bl	12bcc <__assert_fail@plt+0x186c>
   13b28:	mov	r3, #0
   13b2c:	mov	r6, r0
   13b30:	str	r3, [r4, #44]	; 0x2c
   13b34:	b	133c0 <__assert_fail@plt+0x2060>
   13b38:	ldr	r3, [r4, #44]	; 0x2c
   13b3c:	cmp	r3, #0
   13b40:	cmpne	r9, #1
   13b44:	beq	133c0 <__assert_fail@plt+0x2060>
   13b48:	mov	r1, r6
   13b4c:	mov	r2, r9
   13b50:	mov	r0, r4
   13b54:	bl	12bcc <__assert_fail@plt+0x186c>
   13b58:	mov	r6, r0
   13b5c:	b	133c0 <__assert_fail@plt+0x2060>
   13b60:	andeq	r8, r1, r0, lsr #13
   13b64:			; <UNDEFINED> instruction: 0xff534d42
   13b68:	movtpl	r4, #24911	; 0x614f
   13b6c:	andeq	r9, r1, ip, lsl #1
   13b70:			; <UNDEFINED> instruction: 0x01021994
   13b74:	andeq	r9, r1, r4, lsr #1
   13b78:	andeq	r2, r1, r0, ror #20
   13b7c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b80:	bic	r4, r1, #4080	; 0xff0
   13b84:	bic	r4, r4, #15
   13b88:	cmp	r4, #0
   13b8c:	str	r0, [sp]
   13b90:	beq	13ba8 <__assert_fail@plt+0x2848>
   13b94:	bl	11204 <__errno_location@plt>
   13b98:	mov	r3, #22
   13b9c:	str	r3, [r0]
   13ba0:	mov	r4, #0
   13ba4:	b	13bc4 <__assert_fail@plt+0x2864>
   13ba8:	and	r3, r1, #516	; 0x204
   13bac:	mov	r6, r1
   13bb0:	cmp	r3, #516	; 0x204
   13bb4:	bne	13bd0 <__assert_fail@plt+0x2870>
   13bb8:	bl	11204 <__errno_location@plt>
   13bbc:	mov	r3, #22
   13bc0:	str	r3, [r0]
   13bc4:	mov	r0, r4
   13bc8:	add	sp, sp, #12
   13bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd0:	ands	r4, r1, #18
   13bd4:	beq	13bb8 <__assert_fail@plt+0x2858>
   13bd8:	mov	r1, #96	; 0x60
   13bdc:	mov	r0, #1
   13be0:	mov	sl, r2
   13be4:	bl	178d8 <__assert_fail@plt+0x6578>
   13be8:	subs	r4, r0, #0
   13bec:	beq	13bc4 <__assert_fail@plt+0x2864>
   13bf0:	tst	r6, #2
   13bf4:	mov	r5, #0
   13bf8:	str	sl, [r4, #44]	; 0x2c
   13bfc:	bicne	r3, r6, #512	; 0x200
   13c00:	orrne	r3, r3, #4
   13c04:	streq	r6, [r4, #48]	; 0x30
   13c08:	strne	r3, [r4, #48]	; 0x30
   13c0c:	mvn	r3, #99	; 0x63
   13c10:	str	r3, [r4, #32]
   13c14:	ldr	r3, [sp]
   13c18:	sub	r8, r3, #4
   13c1c:	ldr	r7, [r8, #4]!
   13c20:	cmp	r7, #0
   13c24:	bne	13d48 <__assert_fail@plt+0x29e8>
   13c28:	add	r1, r5, #1
   13c2c:	mov	r0, r4
   13c30:	cmp	r1, #4096	; 0x1000
   13c34:	movcc	r1, #4096	; 0x1000
   13c38:	bl	130f4 <__assert_fail@plt+0x1d94>
   13c3c:	cmp	r0, #0
   13c40:	beq	13e58 <__assert_fail@plt+0x2af8>
   13c44:	ldr	r3, [sp]
   13c48:	ldr	r8, [r3]
   13c4c:	cmp	r8, #0
   13c50:	beq	13c74 <__assert_fail@plt+0x2914>
   13c54:	mov	r2, r7
   13c58:	ldr	r1, [pc, #516]	; 13e64 <__assert_fail@plt+0x2b04>
   13c5c:	mov	r0, r4
   13c60:	bl	12c84 <__assert_fail@plt+0x1924>
   13c64:	subs	r8, r0, #0
   13c68:	beq	13e50 <__assert_fail@plt+0x2af0>
   13c6c:	mvn	r3, #0
   13c70:	str	r3, [r8, #48]	; 0x30
   13c74:	cmp	sl, #0
   13c78:	eor	r6, r6, #2048	; 0x800
   13c7c:	ldrne	r3, [r4, #48]	; 0x30
   13c80:	mov	fp, #0
   13c84:	ubfx	r6, r6, #11, #1
   13c88:	moveq	r3, #1
   13c8c:	mov	r7, fp
   13c90:	mov	r9, fp
   13c94:	ubfxne	r3, r3, #10, #1
   13c98:	str	r3, [sp, #4]
   13c9c:	ldr	r3, [sp]
   13ca0:	ldr	r5, [r3, r9, lsl #2]
   13ca4:	cmp	r5, #0
   13ca8:	bne	13d5c <__assert_fail@plt+0x29fc>
   13cac:	cmp	sl, #0
   13cb0:	cmpne	r9, #1
   13cb4:	bls	13ccc <__assert_fail@plt+0x296c>
   13cb8:	mov	r1, r7
   13cbc:	mov	r2, r9
   13cc0:	mov	r0, r4
   13cc4:	bl	12bcc <__assert_fail@plt+0x186c>
   13cc8:	mov	r7, r0
   13ccc:	mov	r2, #0
   13cd0:	ldr	r1, [pc, #396]	; 13e64 <__assert_fail@plt+0x2b04>
   13cd4:	mov	r0, r4
   13cd8:	bl	12c84 <__assert_fail@plt+0x1924>
   13cdc:	cmp	r0, #0
   13ce0:	str	r0, [r4]
   13ce4:	beq	13e40 <__assert_fail@plt+0x2ae0>
   13ce8:	mov	r3, #9
   13cec:	str	r7, [r0, #8]
   13cf0:	strh	r3, [r0, #56]	; 0x38
   13cf4:	mov	r3, #1
   13cf8:	str	r3, [r0, #48]	; 0x30
   13cfc:	mov	r0, r4
   13d00:	bl	1315c <__assert_fail@plt+0x1dfc>
   13d04:	cmp	r0, #0
   13d08:	beq	13e40 <__assert_fail@plt+0x2ae0>
   13d0c:	ldr	r3, [r4, #48]	; 0x30
   13d10:	tst	r3, #516	; 0x204
   13d14:	bne	13d38 <__assert_fail@plt+0x29d8>
   13d18:	ldr	r1, [pc, #328]	; 13e68 <__assert_fail@plt+0x2b08>
   13d1c:	mov	r0, r4
   13d20:	bl	12cf8 <__assert_fail@plt+0x1998>
   13d24:	cmp	r0, #0
   13d28:	str	r0, [r4, #28]
   13d2c:	ldrlt	r3, [r4, #48]	; 0x30
   13d30:	orrlt	r3, r3, #4
   13d34:	strlt	r3, [r4, #48]	; 0x30
   13d38:	mvn	r1, #0
   13d3c:	add	r0, r4, #60	; 0x3c
   13d40:	bl	153fc <__assert_fail@plt+0x409c>
   13d44:	b	13bc4 <__assert_fail@plt+0x2864>
   13d48:	mov	r0, r7
   13d4c:	bl	111d4 <strlen@plt>
   13d50:	cmp	r5, r0
   13d54:	movcc	r5, r0
   13d58:	b	13c1c <__assert_fail@plt+0x28bc>
   13d5c:	mov	r0, r5
   13d60:	bl	111d4 <strlen@plt>
   13d64:	cmp	r0, #2
   13d68:	movls	r1, #0
   13d6c:	andhi	r1, r6, #1
   13d70:	mov	r2, r0
   13d74:	cmp	r1, #0
   13d78:	beq	13d90 <__assert_fail@plt+0x2a30>
   13d7c:	add	r1, r5, r0
   13d80:	ldrb	r1, [r1, #-1]
   13d84:	cmp	r1, #47	; 0x2f
   13d88:	subeq	r0, r5, #2
   13d8c:	beq	13e1c <__assert_fail@plt+0x2abc>
   13d90:	mov	r1, r5
   13d94:	mov	r0, r4
   13d98:	bl	12c84 <__assert_fail@plt+0x1924>
   13d9c:	subs	r5, r0, #0
   13da0:	beq	13e40 <__assert_fail@plt+0x2ae0>
   13da4:	mov	r2, #0
   13da8:	cmp	r7, #0
   13dac:	str	r8, [r5, #4]
   13db0:	str	r2, [r5, #48]	; 0x30
   13db4:	add	r2, r5, #168	; 0xa8
   13db8:	str	r2, [r5, #24]
   13dbc:	ldr	r2, [sp, #4]
   13dc0:	moveq	r2, #0
   13dc4:	cmp	r2, #0
   13dc8:	beq	13e2c <__assert_fail@plt+0x2acc>
   13dcc:	mov	r2, #11
   13dd0:	mov	r0, #2
   13dd4:	mov	r1, #0
   13dd8:	strh	r2, [r5, #56]	; 0x38
   13ddc:	strd	r0, [r5, #112]	; 0x70
   13de0:	cmp	sl, #0
   13de4:	strne	r7, [r5, #8]
   13de8:	bne	13e04 <__assert_fail@plt+0x2aa4>
   13dec:	cmp	r7, #0
   13df0:	str	sl, [r5, #8]
   13df4:	moveq	fp, r5
   13df8:	strne	r5, [fp, #8]
   13dfc:	movne	fp, r5
   13e00:	movne	r5, r7
   13e04:	add	r9, r9, #1
   13e08:	mov	r7, r5
   13e0c:	b	13c9c <__assert_fail@plt+0x293c>
   13e10:	sub	r2, r2, #1
   13e14:	cmp	r2, #1
   13e18:	beq	13d90 <__assert_fail@plt+0x2a30>
   13e1c:	ldrb	r1, [r0, r2]
   13e20:	cmp	r1, #47	; 0x2f
   13e24:	beq	13e10 <__assert_fail@plt+0x2ab0>
   13e28:	b	13d90 <__assert_fail@plt+0x2a30>
   13e2c:	mov	r1, r5
   13e30:	mov	r0, r4
   13e34:	bl	12a94 <__assert_fail@plt+0x1734>
   13e38:	strh	r0, [r5, #56]	; 0x38
   13e3c:	b	13de0 <__assert_fail@plt+0x2a80>
   13e40:	mov	r0, r7
   13e44:	bl	12d2c <__assert_fail@plt+0x19cc>
   13e48:	mov	r0, r8
   13e4c:	bl	1297c <__assert_fail@plt+0x161c>
   13e50:	ldr	r0, [r4, #24]
   13e54:	bl	1297c <__assert_fail@plt+0x161c>
   13e58:	mov	r0, r4
   13e5c:	bl	1297c <__assert_fail@plt+0x161c>
   13e60:	b	13ba0 <__assert_fail@plt+0x2840>
   13e64:	andeq	r8, r1, r2, lsl #19
   13e68:	andeq	r9, r1, r5, lsr #1
   13e6c:	push	{r4, r5, r6, lr}
   13e70:	mov	r4, r0
   13e74:	ldr	r0, [r0]
   13e78:	cmp	r0, #0
   13e7c:	bne	13f14 <__assert_fail@plt+0x2bb4>
   13e80:	ldr	r0, [r4, #4]
   13e84:	cmp	r0, #0
   13e88:	beq	13e90 <__assert_fail@plt+0x2b30>
   13e8c:	bl	12d2c <__assert_fail@plt+0x19cc>
   13e90:	ldr	r0, [r4, #8]
   13e94:	bl	1297c <__assert_fail@plt+0x161c>
   13e98:	ldr	r0, [r4, #24]
   13e9c:	bl	1297c <__assert_fail@plt+0x161c>
   13ea0:	ldr	r3, [r4, #48]	; 0x30
   13ea4:	tst	r3, #512	; 0x200
   13ea8:	beq	13f40 <__assert_fail@plt+0x2be0>
   13eac:	ldr	r0, [r4, #32]
   13eb0:	cmp	r0, #0
   13eb4:	bge	13f28 <__assert_fail@plt+0x2bc8>
   13eb8:	mov	r5, #0
   13ebc:	add	r0, r4, #60	; 0x3c
   13ec0:	bl	12d60 <__assert_fail@plt+0x1a00>
   13ec4:	ldr	r0, [r4, #52]	; 0x34
   13ec8:	cmp	r0, #0
   13ecc:	beq	13ed4 <__assert_fail@plt+0x2b74>
   13ed0:	bl	14f70 <__assert_fail@plt+0x3c10>
   13ed4:	mov	r0, r4
   13ed8:	bl	131d0 <__assert_fail@plt+0x1e70>
   13edc:	mov	r0, r4
   13ee0:	bl	1297c <__assert_fail@plt+0x161c>
   13ee4:	cmp	r5, #0
   13ee8:	beq	13ef8 <__assert_fail@plt+0x2b98>
   13eec:	bl	11204 <__errno_location@plt>
   13ef0:	str	r5, [r0]
   13ef4:	mvn	r5, #0
   13ef8:	mov	r0, r5
   13efc:	pop	{r4, r5, r6, pc}
   13f00:	ldr	r5, [r0, #8]
   13f04:	cmp	r5, #0
   13f08:	ldreq	r5, [r0, #4]
   13f0c:	bl	1297c <__assert_fail@plt+0x161c>
   13f10:	mov	r0, r5
   13f14:	ldr	r3, [r0, #48]	; 0x30
   13f18:	cmp	r3, #0
   13f1c:	bge	13f00 <__assert_fail@plt+0x2ba0>
   13f20:	bl	1297c <__assert_fail@plt+0x161c>
   13f24:	b	13e80 <__assert_fail@plt+0x2b20>
   13f28:	bl	11324 <close@plt>
   13f2c:	cmp	r0, #0
   13f30:	beq	13eb8 <__assert_fail@plt+0x2b58>
   13f34:	bl	11204 <__errno_location@plt>
   13f38:	ldr	r5, [r0]
   13f3c:	b	13ebc <__assert_fail@plt+0x2b5c>
   13f40:	tst	r3, #4
   13f44:	bne	13eb8 <__assert_fail@plt+0x2b58>
   13f48:	ldr	r0, [r4, #28]
   13f4c:	bl	112c4 <fchdir@plt>
   13f50:	subs	r5, r0, #0
   13f54:	beq	13f60 <__assert_fail@plt+0x2c00>
   13f58:	bl	11204 <__errno_location@plt>
   13f5c:	ldr	r5, [r0]
   13f60:	ldr	r0, [r4, #28]
   13f64:	bl	11324 <close@plt>
   13f68:	adds	r0, r0, #0
   13f6c:	movne	r0, #1
   13f70:	cmp	r5, #0
   13f74:	movne	r0, #0
   13f78:	cmp	r0, #0
   13f7c:	beq	13ebc <__assert_fail@plt+0x2b5c>
   13f80:	b	13f34 <__assert_fail@plt+0x2bd4>
   13f84:	push	{r4, r5, r6, r7, r8, lr}
   13f88:	ldr	r4, [r0]
   13f8c:	cmp	r4, #0
   13f90:	bne	13fa0 <__assert_fail@plt+0x2c40>
   13f94:	mov	r4, #0
   13f98:	mov	r0, r4
   13f9c:	pop	{r4, r5, r6, r7, r8, pc}
   13fa0:	ldr	r1, [r0, #48]	; 0x30
   13fa4:	mov	r5, r0
   13fa8:	ands	r2, r1, #8192	; 0x2000
   13fac:	bne	13f94 <__assert_fail@plt+0x2c34>
   13fb0:	ldrh	ip, [r4, #60]	; 0x3c
   13fb4:	mov	r3, #3
   13fb8:	strh	r3, [r4, #60]	; 0x3c
   13fbc:	cmp	ip, #1
   13fc0:	bne	13fd4 <__assert_fail@plt+0x2c74>
   13fc4:	mov	r1, r4
   13fc8:	bl	12a94 <__assert_fail@plt+0x1734>
   13fcc:	strh	r0, [r4, #56]	; 0x38
   13fd0:	b	13f98 <__assert_fail@plt+0x2c38>
   13fd4:	cmp	ip, #2
   13fd8:	ldrh	r3, [r4, #56]	; 0x38
   13fdc:	bne	140bc <__assert_fail@plt+0x2d5c>
   13fe0:	sub	r2, r3, #12
   13fe4:	cmp	r2, #1
   13fe8:	bhi	144b0 <__assert_fail@plt+0x3150>
   13fec:	mov	r2, #1
   13ff0:	mov	r1, r4
   13ff4:	bl	12a94 <__assert_fail@plt+0x1734>
   13ff8:	cmp	r0, #1
   13ffc:	strh	r0, [r4, #56]	; 0x38
   14000:	bne	14048 <__assert_fail@plt+0x2ce8>
   14004:	ldr	r3, [r5, #48]	; 0x30
   14008:	tst	r3, #4
   1400c:	bne	14048 <__assert_fail@plt+0x2ce8>
   14010:	ldr	r1, [pc, #1320]	; 14540 <__assert_fail@plt+0x31e0>
   14014:	mov	r0, r5
   14018:	bl	12cf8 <__assert_fail@plt+0x1998>
   1401c:	cmp	r0, #0
   14020:	str	r0, [r4, #36]	; 0x24
   14024:	ldrhge	r3, [r4, #58]	; 0x3a
   14028:	orrge	r3, r3, #2
   1402c:	strhge	r3, [r4, #58]	; 0x3a
   14030:	bge	14048 <__assert_fail@plt+0x2ce8>
   14034:	bl	11204 <__errno_location@plt>
   14038:	ldr	r3, [r0]
   1403c:	str	r3, [r4, #32]
   14040:	mov	r3, #7
   14044:	strh	r3, [r4, #56]	; 0x38
   14048:	ldrh	r3, [r4, #56]	; 0x38
   1404c:	str	r4, [r5]
   14050:	cmp	r3, #11
   14054:	bne	1407c <__assert_fail@plt+0x2d1c>
   14058:	ldrd	r2, [r4, #112]	; 0x70
   1405c:	cmp	r3, #0
   14060:	cmpeq	r2, #2
   14064:	bne	142f8 <__assert_fail@plt+0x2f98>
   14068:	mov	r2, #0
   1406c:	mov	r1, r4
   14070:	mov	r0, r5
   14074:	bl	12a94 <__assert_fail@plt+0x1734>
   14078:	strh	r0, [r4, #56]	; 0x38
   1407c:	ldrh	r3, [r4, #56]	; 0x38
   14080:	cmp	r3, #1
   14084:	bne	13f98 <__assert_fail@plt+0x2c38>
   14088:	ldr	r3, [r4, #48]	; 0x30
   1408c:	mov	r0, r5
   14090:	mov	r1, r4
   14094:	cmp	r3, #0
   14098:	ldrdeq	r2, [r4, #64]	; 0x40
   1409c:	strdeq	r2, [r5, #16]
   140a0:	bl	131f8 <__assert_fail@plt+0x1e98>
   140a4:	subs	r5, r0, #0
   140a8:	bne	13f98 <__assert_fail@plt+0x2c38>
   140ac:	bl	11204 <__errno_location@plt>
   140b0:	mov	r3, #12
   140b4:	str	r3, [r0]
   140b8:	b	13f94 <__assert_fail@plt+0x2c34>
   140bc:	cmp	r3, #1
   140c0:	bne	144b8 <__assert_fail@plt+0x3158>
   140c4:	cmp	ip, #4
   140c8:	beq	140e8 <__assert_fail@plt+0x2d88>
   140cc:	tst	r1, #64	; 0x40
   140d0:	beq	1412c <__assert_fail@plt+0x2dcc>
   140d4:	ldrd	r2, [r5, #16]
   140d8:	ldrd	r6, [r4, #64]	; 0x40
   140dc:	cmp	r7, r3
   140e0:	cmpeq	r6, r2
   140e4:	beq	1412c <__assert_fail@plt+0x2dcc>
   140e8:	ldrh	r3, [r4, #58]	; 0x3a
   140ec:	tst	r3, #2
   140f0:	beq	140fc <__assert_fail@plt+0x2d9c>
   140f4:	ldr	r0, [r4, #36]	; 0x24
   140f8:	bl	11324 <close@plt>
   140fc:	ldr	r0, [r5, #4]
   14100:	cmp	r0, #0
   14104:	beq	14114 <__assert_fail@plt+0x2db4>
   14108:	bl	12d2c <__assert_fail@plt+0x19cc>
   1410c:	mov	r3, #0
   14110:	str	r3, [r5, #4]
   14114:	mov	r3, #6
   14118:	strh	r3, [r4, #56]	; 0x38
   1411c:	mov	r1, r4
   14120:	mov	r0, r5
   14124:	bl	132a8 <__assert_fail@plt+0x1f48>
   14128:	b	13f98 <__assert_fail@plt+0x2c38>
   1412c:	ldr	r0, [r5, #4]
   14130:	cmp	r0, #0
   14134:	beq	14154 <__assert_fail@plt+0x2df4>
   14138:	tst	r1, #4096	; 0x1000
   1413c:	beq	14420 <__assert_fail@plt+0x30c0>
   14140:	bic	r1, r1, #4096	; 0x1000
   14144:	str	r1, [r5, #48]	; 0x30
   14148:	bl	12d2c <__assert_fail@plt+0x19cc>
   1414c:	mov	r3, #0
   14150:	str	r3, [r5, #4]
   14154:	mov	r1, #3
   14158:	mov	r0, r5
   1415c:	bl	13358 <__assert_fail@plt+0x1ff8>
   14160:	cmp	r0, #0
   14164:	str	r0, [r5, #4]
   14168:	bne	14460 <__assert_fail@plt+0x3100>
   1416c:	ldr	r3, [r5, #48]	; 0x30
   14170:	tst	r3, #8192	; 0x2000
   14174:	bne	13f94 <__assert_fail@plt+0x2c34>
   14178:	ldr	r3, [r4, #32]
   1417c:	cmp	r3, #0
   14180:	beq	1411c <__assert_fail@plt+0x2dbc>
   14184:	ldrh	r3, [r4, #56]	; 0x38
   14188:	cmp	r3, #4
   1418c:	beq	1411c <__assert_fail@plt+0x2dbc>
   14190:	mov	r3, #7
   14194:	b	14118 <__assert_fail@plt+0x2db8>
   14198:	ldr	r2, [r3, #4]
   1419c:	ldr	r2, [r2, #24]
   141a0:	str	r2, [r3, #24]
   141a4:	ldr	r3, [r3, #8]
   141a8:	b	14458 <__assert_fail@plt+0x30f8>
   141ac:	mov	r0, r6
   141b0:	bl	1297c <__assert_fail@plt+0x161c>
   141b4:	b	1446c <__assert_fail@plt+0x310c>
   141b8:	mov	r0, r6
   141bc:	str	r4, [r5]
   141c0:	bl	1297c <__assert_fail@plt+0x161c>
   141c4:	ldr	r6, [r4, #48]	; 0x30
   141c8:	cmp	r6, #0
   141cc:	bne	14274 <__assert_fail@plt+0x2f14>
   141d0:	mov	r0, r5
   141d4:	bl	12f08 <__assert_fail@plt+0x1ba8>
   141d8:	cmp	r0, #0
   141dc:	ldrne	r3, [r5, #48]	; 0x30
   141e0:	orrne	r3, r3, #8192	; 0x2000
   141e4:	strne	r3, [r5, #48]	; 0x30
   141e8:	bne	13f94 <__assert_fail@plt+0x2c34>
   141ec:	mov	r0, r5
   141f0:	add	r6, r4, #168	; 0xa8
   141f4:	bl	131d0 <__assert_fail@plt+0x1e70>
   141f8:	ldr	r2, [r4, #52]	; 0x34
   141fc:	mov	r1, r6
   14200:	ldr	r0, [r5, #24]
   14204:	str	r2, [r4, #40]	; 0x28
   14208:	add	r2, r2, #1
   1420c:	bl	1106c <memmove@plt>
   14210:	mov	r1, #47	; 0x2f
   14214:	mov	r0, r6
   14218:	bl	11288 <strrchr@plt>
   1421c:	cmp	r0, #0
   14220:	beq	1425c <__assert_fail@plt+0x2efc>
   14224:	cmp	r6, r0
   14228:	bne	14238 <__assert_fail@plt+0x2ed8>
   1422c:	ldrb	r3, [r6, #1]
   14230:	cmp	r3, #0
   14234:	beq	1425c <__assert_fail@plt+0x2efc>
   14238:	add	r7, r0, #1
   1423c:	mov	r0, r7
   14240:	bl	111d4 <strlen@plt>
   14244:	mov	r8, r0
   14248:	add	r2, r0, #1
   1424c:	mov	r1, r7
   14250:	mov	r0, r6
   14254:	bl	1106c <memmove@plt>
   14258:	str	r8, [r4, #52]	; 0x34
   1425c:	ldr	r3, [r5, #24]
   14260:	mov	r0, r5
   14264:	str	r3, [r4, #24]
   14268:	str	r3, [r4, #28]
   1426c:	bl	1315c <__assert_fail@plt+0x1dfc>
   14270:	b	14048 <__assert_fail@plt+0x2ce8>
   14274:	ldrh	r3, [r4, #60]	; 0x3c
   14278:	mov	r6, r4
   1427c:	cmp	r3, #4
   14280:	beq	144bc <__assert_fail@plt+0x315c>
   14284:	cmp	r3, #2
   14288:	bne	1446c <__assert_fail@plt+0x310c>
   1428c:	mov	r2, #1
   14290:	mov	r1, r4
   14294:	mov	r0, r5
   14298:	bl	12a94 <__assert_fail@plt+0x1734>
   1429c:	cmp	r0, #1
   142a0:	strh	r0, [r4, #56]	; 0x38
   142a4:	bne	142ec <__assert_fail@plt+0x2f8c>
   142a8:	ldr	r3, [r5, #48]	; 0x30
   142ac:	tst	r3, #4
   142b0:	bne	142ec <__assert_fail@plt+0x2f8c>
   142b4:	ldr	r1, [pc, #644]	; 14540 <__assert_fail@plt+0x31e0>
   142b8:	mov	r0, r5
   142bc:	bl	12cf8 <__assert_fail@plt+0x1998>
   142c0:	cmp	r0, #0
   142c4:	str	r0, [r4, #36]	; 0x24
   142c8:	ldrhge	r3, [r4, #58]	; 0x3a
   142cc:	orrge	r3, r3, #2
   142d0:	strhge	r3, [r4, #58]	; 0x3a
   142d4:	bge	142ec <__assert_fail@plt+0x2f8c>
   142d8:	bl	11204 <__errno_location@plt>
   142dc:	ldr	r3, [r0]
   142e0:	str	r3, [r4, #32]
   142e4:	mov	r3, #7
   142e8:	strh	r3, [r4, #56]	; 0x38
   142ec:	mov	r3, #3
   142f0:	strh	r3, [r4, #60]	; 0x3c
   142f4:	b	1446c <__assert_fail@plt+0x310c>
   142f8:	cmp	r3, #0
   142fc:	cmpeq	r2, #1
   14300:	beq	13f98 <__assert_fail@plt+0x2c38>
   14304:	bl	11318 <abort@plt>
   14308:	ldrh	r3, [r4, #56]	; 0x38
   1430c:	cmp	r3, #11
   14310:	beq	14304 <__assert_fail@plt+0x2fa4>
   14314:	ldr	r2, [r5, #24]
   14318:	mov	r1, #0
   1431c:	ldr	r3, [r4, #40]	; 0x28
   14320:	strb	r1, [r2, r3]
   14324:	ldr	r3, [r4, #48]	; 0x30
   14328:	cmp	r3, r1
   1432c:	bne	1435c <__assert_fail@plt+0x2ffc>
   14330:	mov	r0, r5
   14334:	bl	12f08 <__assert_fail@plt+0x1ba8>
   14338:	cmp	r0, #0
   1433c:	beq	14394 <__assert_fail@plt+0x3034>
   14340:	bl	11204 <__errno_location@plt>
   14344:	ldr	r3, [r0]
   14348:	str	r3, [r4, #32]
   1434c:	ldr	r3, [r5, #48]	; 0x30
   14350:	orr	r3, r3, #8192	; 0x2000
   14354:	str	r3, [r5, #48]	; 0x30
   14358:	b	14394 <__assert_fail@plt+0x3034>
   1435c:	ldrh	r3, [r4, #58]	; 0x3a
   14360:	tst	r3, #2
   14364:	beq	14400 <__assert_fail@plt+0x30a0>
   14368:	ldr	r3, [r5, #48]	; 0x30
   1436c:	tst	r3, #4
   14370:	bne	1438c <__assert_fail@plt+0x302c>
   14374:	tst	r3, #512	; 0x200
   14378:	ldr	r1, [r4, #36]	; 0x24
   1437c:	beq	143d4 <__assert_fail@plt+0x3074>
   14380:	mov	r2, #1
   14384:	mov	r0, r5
   14388:	bl	12e94 <__assert_fail@plt+0x1b34>
   1438c:	ldr	r0, [r4, #36]	; 0x24
   14390:	bl	11324 <close@plt>
   14394:	ldrh	r3, [r4, #56]	; 0x38
   14398:	cmp	r3, #2
   1439c:	beq	143c4 <__assert_fail@plt+0x3064>
   143a0:	ldr	r3, [r4, #32]
   143a4:	cmp	r3, #0
   143a8:	movne	r3, #7
   143ac:	moveq	r3, #6
   143b0:	strh	r3, [r4, #56]	; 0x38
   143b4:	bne	143c4 <__assert_fail@plt+0x3064>
   143b8:	mov	r1, r4
   143bc:	mov	r0, r5
   143c0:	bl	132a8 <__assert_fail@plt+0x1f48>
   143c4:	ldr	r3, [r5, #48]	; 0x30
   143c8:	tst	r3, #8192	; 0x2000
   143cc:	beq	13f98 <__assert_fail@plt+0x2c38>
   143d0:	b	13f94 <__assert_fail@plt+0x2c34>
   143d4:	mov	r0, r1
   143d8:	bl	112c4 <fchdir@plt>
   143dc:	cmp	r0, #0
   143e0:	beq	1438c <__assert_fail@plt+0x302c>
   143e4:	bl	11204 <__errno_location@plt>
   143e8:	ldr	r3, [r0]
   143ec:	str	r3, [r4, #32]
   143f0:	ldr	r3, [r5, #48]	; 0x30
   143f4:	orr	r3, r3, #8192	; 0x2000
   143f8:	str	r3, [r5, #48]	; 0x30
   143fc:	b	1438c <__assert_fail@plt+0x302c>
   14400:	tst	r3, #1
   14404:	bne	14394 <__assert_fail@plt+0x3034>
   14408:	ldr	r3, [pc, #308]	; 14544 <__assert_fail@plt+0x31e4>
   1440c:	mvn	r2, #0
   14410:	mov	r0, r5
   14414:	ldr	r1, [r4, #4]
   14418:	bl	12f58 <__assert_fail@plt+0x1bf8>
   1441c:	b	14338 <__assert_fail@plt+0x2fd8>
   14420:	mvn	r2, #0
   14424:	mov	r1, r4
   14428:	ldr	r3, [r4, #24]
   1442c:	mov	r0, r5
   14430:	bl	12f58 <__assert_fail@plt+0x1bf8>
   14434:	cmp	r0, #0
   14438:	beq	14460 <__assert_fail@plt+0x3100>
   1443c:	bl	11204 <__errno_location@plt>
   14440:	ldr	r3, [r0]
   14444:	str	r3, [r4, #32]
   14448:	ldrh	r3, [r4, #58]	; 0x3a
   1444c:	orr	r3, r3, #1
   14450:	strh	r3, [r4, #58]	; 0x3a
   14454:	ldr	r3, [r5, #4]
   14458:	cmp	r3, #0
   1445c:	bne	14198 <__assert_fail@plt+0x2e38>
   14460:	mov	r3, #0
   14464:	ldr	r4, [r5, #4]
   14468:	str	r3, [r5, #4]
   1446c:	ldr	r0, [r4, #4]
   14470:	ldr	r2, [r5, #24]
   14474:	ldr	r1, [r0, #40]	; 0x28
   14478:	ldr	r0, [r0, #28]
   1447c:	sub	r3, r1, #1
   14480:	ldrb	r0, [r0, r3]
   14484:	cmp	r0, #47	; 0x2f
   14488:	movne	r3, r1
   1448c:	mov	r1, #47	; 0x2f
   14490:	add	r0, r2, r3
   14494:	strb	r1, [r2, r3]
   14498:	add	r0, r0, #1
   1449c:	add	r1, r4, #168	; 0xa8
   144a0:	ldr	r2, [r4, #52]	; 0x34
   144a4:	add	r2, r2, #1
   144a8:	bl	1106c <memmove@plt>
   144ac:	b	14048 <__assert_fail@plt+0x2ce8>
   144b0:	cmp	r3, #1
   144b4:	beq	140cc <__assert_fail@plt+0x2d6c>
   144b8:	mov	r6, r4
   144bc:	ldr	r4, [r6, #8]
   144c0:	cmp	r4, #0
   144c4:	bne	141b8 <__assert_fail@plt+0x2e58>
   144c8:	ldr	r3, [r6, #4]
   144cc:	ldr	r2, [r3, #12]
   144d0:	cmp	r2, #0
   144d4:	beq	14508 <__assert_fail@plt+0x31a8>
   144d8:	str	r3, [r5]
   144dc:	mov	r1, #3
   144e0:	mov	r0, r5
   144e4:	ldr	r2, [r5, #24]
   144e8:	ldr	r3, [r3, #40]	; 0x28
   144ec:	strb	r4, [r2, r3]
   144f0:	bl	13358 <__assert_fail@plt+0x1ff8>
   144f4:	subs	r4, r0, #0
   144f8:	bne	141ac <__assert_fail@plt+0x2e4c>
   144fc:	ldr	r3, [r5, #48]	; 0x30
   14500:	tst	r3, #8192	; 0x2000
   14504:	bne	13f94 <__assert_fail@plt+0x2c34>
   14508:	ldr	r4, [r6, #4]
   1450c:	mov	r0, r6
   14510:	str	r4, [r5]
   14514:	bl	1297c <__assert_fail@plt+0x161c>
   14518:	ldr	r3, [r4, #48]	; 0x30
   1451c:	cmn	r3, #1
   14520:	bne	14308 <__assert_fail@plt+0x2fa8>
   14524:	mov	r0, r4
   14528:	mov	r4, #0
   1452c:	bl	1297c <__assert_fail@plt+0x161c>
   14530:	bl	11204 <__errno_location@plt>
   14534:	str	r4, [r0]
   14538:	str	r4, [r5]
   1453c:	b	13f98 <__assert_fail@plt+0x2c38>
   14540:	andeq	r9, r1, r5, lsr #1
   14544:	andeq	r9, r1, r4, lsr #1
   14548:	cmp	r2, #4
   1454c:	bls	14568 <__assert_fail@plt+0x3208>
   14550:	push	{r4, lr}
   14554:	bl	11204 <__errno_location@plt>
   14558:	mov	r3, #22
   1455c:	str	r3, [r0]
   14560:	mov	r0, #1
   14564:	pop	{r4, pc}
   14568:	mov	r0, #0
   1456c:	strh	r2, [r1, #60]	; 0x3c
   14570:	bx	lr
   14574:	push	{r4, r5, r6, r7, r8, lr}
   14578:	mov	r7, r1
   1457c:	mov	r5, r0
   14580:	bl	11204 <__errno_location@plt>
   14584:	bics	r2, r7, #4096	; 0x1000
   14588:	mov	r6, r0
   1458c:	beq	145a0 <__assert_fail@plt+0x3240>
   14590:	mov	r3, #22
   14594:	str	r3, [r0]
   14598:	mov	r0, #0
   1459c:	pop	{r4, r5, r6, r7, r8, pc}
   145a0:	ldr	r4, [r5]
   145a4:	str	r2, [r0]
   145a8:	ldr	r3, [r5, #48]	; 0x30
   145ac:	ands	r0, r3, #8192	; 0x2000
   145b0:	bne	14598 <__assert_fail@plt+0x3238>
   145b4:	ldrh	r3, [r4, #56]	; 0x38
   145b8:	cmp	r3, #9
   145bc:	bne	145c8 <__assert_fail@plt+0x3268>
   145c0:	ldr	r0, [r4, #8]
   145c4:	pop	{r4, r5, r6, r7, r8, pc}
   145c8:	cmp	r3, #1
   145cc:	popne	{r4, r5, r6, r7, r8, pc}
   145d0:	ldr	r0, [r5, #4]
   145d4:	cmp	r0, #0
   145d8:	beq	145e0 <__assert_fail@plt+0x3280>
   145dc:	bl	12d2c <__assert_fail@plt+0x19cc>
   145e0:	cmp	r7, #4096	; 0x1000
   145e4:	ldreq	r3, [r5, #48]	; 0x30
   145e8:	moveq	r8, #2
   145ec:	movne	r8, #1
   145f0:	orreq	r3, r3, #4096	; 0x1000
   145f4:	streq	r3, [r5, #48]	; 0x30
   145f8:	ldr	r3, [r4, #48]	; 0x30
   145fc:	cmp	r3, #0
   14600:	bne	14620 <__assert_fail@plt+0x32c0>
   14604:	ldr	r3, [r4, #24]
   14608:	ldrb	r3, [r3]
   1460c:	cmp	r3, #47	; 0x2f
   14610:	beq	14620 <__assert_fail@plt+0x32c0>
   14614:	ldr	r0, [r5, #48]	; 0x30
   14618:	ands	r4, r0, #4
   1461c:	beq	14634 <__assert_fail@plt+0x32d4>
   14620:	mov	r1, r8
   14624:	mov	r0, r5
   14628:	bl	13358 <__assert_fail@plt+0x1ff8>
   1462c:	str	r0, [r5, #4]
   14630:	pop	{r4, r5, r6, r7, r8, pc}
   14634:	ldr	r1, [pc, #116]	; 146b0 <__assert_fail@plt+0x3350>
   14638:	mov	r0, r5
   1463c:	bl	12cf8 <__assert_fail@plt+0x1998>
   14640:	subs	r7, r0, #0
   14644:	strlt	r4, [r5, #4]
   14648:	blt	14598 <__assert_fail@plt+0x3238>
   1464c:	mov	r1, r8
   14650:	mov	r0, r5
   14654:	bl	13358 <__assert_fail@plt+0x1ff8>
   14658:	str	r0, [r5, #4]
   1465c:	ldr	r0, [r5, #48]	; 0x30
   14660:	ands	r4, r0, #512	; 0x200
   14664:	beq	14680 <__assert_fail@plt+0x3320>
   14668:	mov	r2, #1
   1466c:	mov	r1, r7
   14670:	mov	r0, r5
   14674:	bl	12e94 <__assert_fail@plt+0x1b34>
   14678:	ldr	r0, [r5, #4]
   1467c:	pop	{r4, r5, r6, r7, r8, pc}
   14680:	mov	r0, r7
   14684:	bl	112c4 <fchdir@plt>
   14688:	cmp	r0, #0
   1468c:	beq	146a4 <__assert_fail@plt+0x3344>
   14690:	ldr	r5, [r6]
   14694:	mov	r0, r7
   14698:	bl	11324 <close@plt>
   1469c:	str	r5, [r6]
   146a0:	b	14598 <__assert_fail@plt+0x3238>
   146a4:	mov	r0, r7
   146a8:	bl	11324 <close@plt>
   146ac:	b	14678 <__assert_fail@plt+0x3318>
   146b0:	andeq	r9, r1, r5, lsr #1
   146b4:	andeq	r0, r0, r0
   146b8:	ror	r0, r0, #3
   146bc:	udiv	r3, r0, r1
   146c0:	mls	r0, r3, r1, r0
   146c4:	bx	lr
   146c8:	sub	r0, r1, r0
   146cc:	clz	r0, r0
   146d0:	lsr	r0, r0, #5
   146d4:	bx	lr
   146d8:	ldrb	r3, [r1, #16]
   146dc:	cmp	r3, #0
   146e0:	bne	1470c <__assert_fail@plt+0x33ac>
   146e4:	vmov	s15, r0
   146e8:	vldr	s14, [r1, #8]
   146ec:	vcvt.f32.u32	s13, s15
   146f0:	vdiv.f32	s15, s13, s14
   146f4:	vldr	s14, [pc, #140]	; 14788 <__assert_fail@plt+0x3428>
   146f8:	vcmpe.f32	s15, s14
   146fc:	vmrs	APSR_nzcv, fpscr
   14700:	bge	14720 <__assert_fail@plt+0x33c0>
   14704:	vcvt.u32.f32	s15, s15
   14708:	vmov	r0, s15
   1470c:	cmp	r0, #10
   14710:	movcc	r0, #10
   14714:	orr	r0, r0, #1
   14718:	cmn	r0, #1
   1471c:	bne	14754 <__assert_fail@plt+0x33f4>
   14720:	mov	r0, #0
   14724:	bx	lr
   14728:	add	r2, r3, #1
   1472c:	add	r3, r3, #2
   14730:	add	r1, r1, r2, lsl #2
   14734:	udiv	r2, r0, r3
   14738:	cmp	r0, r1
   1473c:	mls	r2, r3, r2, r0
   14740:	bls	14760 <__assert_fail@plt+0x3400>
   14744:	cmp	r2, #0
   14748:	bne	14728 <__assert_fail@plt+0x33c8>
   1474c:	add	r0, r0, #2
   14750:	b	14718 <__assert_fail@plt+0x33b8>
   14754:	mov	r1, #9
   14758:	mov	r3, #3
   1475c:	b	14734 <__assert_fail@plt+0x33d4>
   14760:	cmp	r2, #0
   14764:	beq	1474c <__assert_fail@plt+0x33ec>
   14768:	lsrs	r3, r0, #30
   1476c:	movne	r3, #1
   14770:	moveq	r3, #0
   14774:	tst	r0, #536870912	; 0x20000000
   14778:	bne	14720 <__assert_fail@plt+0x33c0>
   1477c:	cmp	r3, #0
   14780:	bxeq	lr
   14784:	b	14720 <__assert_fail@plt+0x33c0>
   14788:	svcmi	0x00800000
   1478c:	push	{r4, lr}
   14790:	mov	r4, r0
   14794:	mov	r0, r1
   14798:	ldr	r1, [r4, #8]
   1479c:	ldr	r3, [r4, #24]
   147a0:	blx	r3
   147a4:	ldr	r3, [r4, #8]
   147a8:	cmp	r3, r0
   147ac:	bhi	147b4 <__assert_fail@plt+0x3454>
   147b0:	bl	11318 <abort@plt>
   147b4:	ldr	r3, [r4]
   147b8:	add	r0, r3, r0, lsl #3
   147bc:	pop	{r4, pc}
   147c0:	push	{r4, r5, r6, r7, r8, lr}
   147c4:	mov	r8, r2
   147c8:	mov	r6, r1
   147cc:	mov	r5, r0
   147d0:	mov	r7, r3
   147d4:	bl	1478c <__assert_fail@plt+0x342c>
   147d8:	str	r0, [r8]
   147dc:	ldr	r1, [r0]
   147e0:	cmp	r1, #0
   147e4:	bne	147f4 <__assert_fail@plt+0x3494>
   147e8:	mov	r2, #0
   147ec:	mov	r0, r2
   147f0:	pop	{r4, r5, r6, r7, r8, pc}
   147f4:	cmp	r1, r6
   147f8:	mov	r4, r0
   147fc:	beq	14814 <__assert_fail@plt+0x34b4>
   14800:	mov	r0, r6
   14804:	ldr	r3, [r5, #28]
   14808:	blx	r3
   1480c:	cmp	r0, #0
   14810:	beq	14868 <__assert_fail@plt+0x3508>
   14814:	cmp	r7, #0
   14818:	ldr	r2, [r4]
   1481c:	beq	147ec <__assert_fail@plt+0x348c>
   14820:	ldr	r3, [r4, #4]
   14824:	cmp	r3, #0
   14828:	streq	r3, [r4]
   1482c:	beq	147ec <__assert_fail@plt+0x348c>
   14830:	ldm	r3, {r0, r1}
   14834:	stm	r4, {r0, r1}
   14838:	mov	r1, #0
   1483c:	str	r1, [r3]
   14840:	ldr	r1, [r5, #36]	; 0x24
   14844:	str	r1, [r3, #4]
   14848:	str	r3, [r5, #36]	; 0x24
   1484c:	b	147ec <__assert_fail@plt+0x348c>
   14850:	mov	r0, r6
   14854:	ldr	r3, [r5, #28]
   14858:	blx	r3
   1485c:	cmp	r0, #0
   14860:	bne	14880 <__assert_fail@plt+0x3520>
   14864:	ldr	r4, [r4, #4]
   14868:	ldr	r3, [r4, #4]
   1486c:	cmp	r3, #0
   14870:	beq	147e8 <__assert_fail@plt+0x3488>
   14874:	ldr	r1, [r3]
   14878:	cmp	r1, r6
   1487c:	bne	14850 <__assert_fail@plt+0x34f0>
   14880:	ldr	r3, [r4, #4]
   14884:	cmp	r7, #0
   14888:	ldr	r2, [r3]
   1488c:	beq	147ec <__assert_fail@plt+0x348c>
   14890:	ldr	r1, [r3, #4]
   14894:	str	r1, [r4, #4]
   14898:	b	14838 <__assert_fail@plt+0x34d8>
   1489c:	ldr	r2, [pc, #164]	; 14948 <__assert_fail@plt+0x35e8>
   148a0:	ldr	r3, [r0]
   148a4:	cmp	r3, r2
   148a8:	beq	14930 <__assert_fail@plt+0x35d0>
   148ac:	vldr	s13, [pc, #132]	; 14938 <__assert_fail@plt+0x35d8>
   148b0:	vldr	s14, [r3, #8]
   148b4:	vcmpe.f32	s14, s13
   148b8:	vmrs	APSR_nzcv, fpscr
   148bc:	ble	14924 <__assert_fail@plt+0x35c4>
   148c0:	vldr	s15, [pc, #116]	; 1493c <__assert_fail@plt+0x35dc>
   148c4:	vcmpe.f32	s14, s15
   148c8:	vmrs	APSR_nzcv, fpscr
   148cc:	bpl	14924 <__assert_fail@plt+0x35c4>
   148d0:	vldr	s15, [pc, #104]	; 14940 <__assert_fail@plt+0x35e0>
   148d4:	vldr	s12, [r3, #12]
   148d8:	vcmpe.f32	s12, s15
   148dc:	vmrs	APSR_nzcv, fpscr
   148e0:	ble	14924 <__assert_fail@plt+0x35c4>
   148e4:	vldr	s15, [r3]
   148e8:	vcmpe.f32	s15, #0.0
   148ec:	vmrs	APSR_nzcv, fpscr
   148f0:	blt	14924 <__assert_fail@plt+0x35c4>
   148f4:	vadd.f32	s15, s15, s13
   148f8:	vldr	s13, [r3, #4]
   148fc:	vcmpe.f32	s15, s13
   14900:	vmrs	APSR_nzcv, fpscr
   14904:	bpl	14924 <__assert_fail@plt+0x35c4>
   14908:	vldr	s12, [pc, #52]	; 14944 <__assert_fail@plt+0x35e4>
   1490c:	vcmpe.f32	s13, s12
   14910:	vmrs	APSR_nzcv, fpscr
   14914:	bhi	14924 <__assert_fail@plt+0x35c4>
   14918:	vcmpe.f32	s14, s15
   1491c:	vmrs	APSR_nzcv, fpscr
   14920:	bgt	14930 <__assert_fail@plt+0x35d0>
   14924:	str	r2, [r0]
   14928:	mov	r0, #0
   1492c:	bx	lr
   14930:	mov	r0, #1
   14934:	bx	lr
   14938:	stclcc	12, cr12, [ip, #820]	; 0x334
   1493c:	svccc	0x00666666
   14940:	svccc	0x008ccccd
   14944:	svccc	0x00800000
   14948:	andeq	r9, r1, r8, lsr #1
   1494c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14950:	mov	r5, r0
   14954:	mov	r7, r1
   14958:	mov	r8, r2
   1495c:	mov	r9, #0
   14960:	ldr	r4, [r1]
   14964:	add	r4, r4, #8
   14968:	ldr	r2, [r7, #4]
   1496c:	sub	r3, r4, #8
   14970:	cmp	r2, r3
   14974:	bhi	14984 <__assert_fail@plt+0x3624>
   14978:	mov	r8, #1
   1497c:	mov	r0, r8
   14980:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14984:	ldr	r3, [r4, #-8]
   14988:	cmp	r3, #0
   1498c:	ldrne	r6, [r4, #-4]
   14990:	bne	149ec <__assert_fail@plt+0x368c>
   14994:	add	r4, r4, #8
   14998:	b	14968 <__assert_fail@plt+0x3608>
   1499c:	ldr	sl, [r6]
   149a0:	mov	r0, r5
   149a4:	mov	r1, sl
   149a8:	bl	1478c <__assert_fail@plt+0x342c>
   149ac:	ldr	r2, [r0]
   149b0:	ldr	r1, [r6, #4]
   149b4:	cmp	r2, #0
   149b8:	ldrne	r3, [r0, #4]
   149bc:	strne	r3, [r6, #4]
   149c0:	strne	r6, [r0, #4]
   149c4:	bne	149e8 <__assert_fail@plt+0x3688>
   149c8:	ldr	r3, [r5, #12]
   149cc:	str	sl, [r0]
   149d0:	add	r3, r3, #1
   149d4:	str	r3, [r5, #12]
   149d8:	str	r2, [r6]
   149dc:	ldr	r3, [r5, #36]	; 0x24
   149e0:	str	r3, [r6, #4]
   149e4:	str	r6, [r5, #36]	; 0x24
   149e8:	mov	r6, r1
   149ec:	cmp	r6, #0
   149f0:	bne	1499c <__assert_fail@plt+0x363c>
   149f4:	cmp	r8, #0
   149f8:	str	r6, [r4, #-4]
   149fc:	ldr	sl, [r4, #-8]
   14a00:	bne	14994 <__assert_fail@plt+0x3634>
   14a04:	mov	r1, sl
   14a08:	mov	r0, r5
   14a0c:	bl	1478c <__assert_fail@plt+0x342c>
   14a10:	ldr	r3, [r0]
   14a14:	mov	r6, r0
   14a18:	cmp	r3, #0
   14a1c:	beq	14a68 <__assert_fail@plt+0x3708>
   14a20:	ldr	r0, [r5, #36]	; 0x24
   14a24:	cmp	r0, #0
   14a28:	ldrne	r3, [r0, #4]
   14a2c:	strne	r3, [r5, #36]	; 0x24
   14a30:	bne	14a44 <__assert_fail@plt+0x36e4>
   14a34:	mov	r0, #8
   14a38:	bl	1792c <__assert_fail@plt+0x65cc>
   14a3c:	cmp	r0, #0
   14a40:	beq	1497c <__assert_fail@plt+0x361c>
   14a44:	ldr	r3, [r6, #4]
   14a48:	str	sl, [r0]
   14a4c:	str	r3, [r0, #4]
   14a50:	str	r0, [r6, #4]
   14a54:	ldr	r3, [r7, #12]
   14a58:	str	r9, [r4, #-8]
   14a5c:	sub	r3, r3, #1
   14a60:	str	r3, [r7, #12]
   14a64:	b	14994 <__assert_fail@plt+0x3634>
   14a68:	ldr	r3, [r5, #12]
   14a6c:	str	sl, [r0]
   14a70:	add	r3, r3, #1
   14a74:	str	r3, [r5, #12]
   14a78:	b	14a54 <__assert_fail@plt+0x36f4>
   14a7c:	ldr	r0, [r0, #8]
   14a80:	bx	lr
   14a84:	ldr	r0, [r0, #12]
   14a88:	bx	lr
   14a8c:	ldr	r0, [r0, #16]
   14a90:	bx	lr
   14a94:	ldm	r0, {r3, ip}
   14a98:	mov	r0, #0
   14a9c:	cmp	ip, r3
   14aa0:	bxls	lr
   14aa4:	ldr	r2, [r3]
   14aa8:	cmp	r2, #0
   14aac:	beq	14ad4 <__assert_fail@plt+0x3774>
   14ab0:	mov	r1, r3
   14ab4:	mov	r2, #1
   14ab8:	b	14ac0 <__assert_fail@plt+0x3760>
   14abc:	add	r2, r2, #1
   14ac0:	ldr	r1, [r1, #4]
   14ac4:	cmp	r1, #0
   14ac8:	bne	14abc <__assert_fail@plt+0x375c>
   14acc:	cmp	r0, r2
   14ad0:	movcc	r0, r2
   14ad4:	add	r3, r3, #8
   14ad8:	b	14a9c <__assert_fail@plt+0x373c>
   14adc:	push	{lr}		; (str lr, [sp, #-4]!)
   14ae0:	mov	r3, #0
   14ae4:	mov	r1, r3
   14ae8:	ldm	r0, {r2, lr}
   14aec:	cmp	lr, r2
   14af0:	bhi	14b14 <__assert_fail@plt+0x37b4>
   14af4:	ldr	r2, [r0, #12]
   14af8:	cmp	r2, r1
   14afc:	ldreq	r0, [r0, #16]
   14b00:	subeq	r0, r0, r3
   14b04:	clzeq	r0, r0
   14b08:	lsreq	r0, r0, #5
   14b0c:	movne	r0, #0
   14b10:	pop	{pc}		; (ldr pc, [sp], #4)
   14b14:	ldr	ip, [r2]
   14b18:	cmp	ip, #0
   14b1c:	addne	r1, r1, #1
   14b20:	addne	r3, r3, #1
   14b24:	movne	ip, r2
   14b28:	bne	14b38 <__assert_fail@plt+0x37d8>
   14b2c:	add	r2, r2, #8
   14b30:	b	14aec <__assert_fail@plt+0x378c>
   14b34:	add	r3, r3, #1
   14b38:	ldr	ip, [ip, #4]
   14b3c:	cmp	ip, #0
   14b40:	bne	14b34 <__assert_fail@plt+0x37d4>
   14b44:	b	14b2c <__assert_fail@plt+0x37cc>
   14b48:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14b4c:	mov	r6, r0
   14b50:	mov	r4, r1
   14b54:	bl	14a94 <__assert_fail@plt+0x3734>
   14b58:	ldr	r5, [r6, #8]
   14b5c:	mov	r8, r0
   14b60:	mov	r1, #1
   14b64:	mov	r0, r4
   14b68:	ldr	r7, [r6, #12]
   14b6c:	ldr	r2, [pc, #116]	; 14be8 <__assert_fail@plt+0x3888>
   14b70:	ldr	r3, [r6, #16]
   14b74:	bl	1124c <__fprintf_chk@plt>
   14b78:	mov	r3, r5
   14b7c:	ldr	r2, [pc, #104]	; 14bec <__assert_fail@plt+0x388c>
   14b80:	mov	r1, #1
   14b84:	mov	r0, r4
   14b88:	bl	1124c <__fprintf_chk@plt>
   14b8c:	vmov	s15, r7
   14b90:	mov	r3, r7
   14b94:	mov	r1, #1
   14b98:	ldr	r2, [pc, #80]	; 14bf0 <__assert_fail@plt+0x3890>
   14b9c:	mov	r0, r4
   14ba0:	vcvt.f64.u32	d6, s15
   14ba4:	vldr	d7, [pc, #52]	; 14be0 <__assert_fail@plt+0x3880>
   14ba8:	vmul.f64	d6, d6, d7
   14bac:	vmov	s15, r5
   14bb0:	vcvt.f64.u32	d7, s15
   14bb4:	vdiv.f64	d5, d6, d7
   14bb8:	vstr	d5, [sp]
   14bbc:	bl	1124c <__fprintf_chk@plt>
   14bc0:	ldr	r2, [pc, #44]	; 14bf4 <__assert_fail@plt+0x3894>
   14bc4:	mov	r3, r8
   14bc8:	mov	r1, #1
   14bcc:	mov	r0, r4
   14bd0:	add	sp, sp, #8
   14bd4:	pop	{r4, r5, r6, r7, r8, lr}
   14bd8:	b	1124c <__fprintf_chk@plt>
   14bdc:	nop	{0}
   14be0:	andeq	r0, r0, r0
   14be4:	subsmi	r0, r9, r0
   14be8:	strheq	r9, [r1], -ip
   14bec:	ldrdeq	r9, [r1], -r4
   14bf0:	andeq	r9, r1, ip, ror #1
   14bf4:	andeq	r9, r1, sp, lsl #2
   14bf8:	push	{r4, r5, r6, lr}
   14bfc:	mov	r6, r0
   14c00:	mov	r5, r1
   14c04:	bl	1478c <__assert_fail@plt+0x342c>
   14c08:	ldr	r3, [r0]
   14c0c:	cmp	r3, #0
   14c10:	beq	14c4c <__assert_fail@plt+0x38ec>
   14c14:	mov	r4, r0
   14c18:	ldr	r1, [r4]
   14c1c:	cmp	r1, r5
   14c20:	bne	14c2c <__assert_fail@plt+0x38cc>
   14c24:	ldr	r0, [r4]
   14c28:	pop	{r4, r5, r6, pc}
   14c2c:	mov	r0, r5
   14c30:	ldr	r3, [r6, #28]
   14c34:	blx	r3
   14c38:	cmp	r0, #0
   14c3c:	bne	14c24 <__assert_fail@plt+0x38c4>
   14c40:	ldr	r4, [r4, #4]
   14c44:	cmp	r4, #0
   14c48:	bne	14c18 <__assert_fail@plt+0x38b8>
   14c4c:	mov	r0, #0
   14c50:	pop	{r4, r5, r6, pc}
   14c54:	ldr	r3, [r0, #16]
   14c58:	cmp	r3, #0
   14c5c:	beq	14c8c <__assert_fail@plt+0x392c>
   14c60:	ldr	r3, [r0]
   14c64:	ldr	r2, [r0, #4]
   14c68:	cmp	r2, r3
   14c6c:	bhi	14c78 <__assert_fail@plt+0x3918>
   14c70:	push	{r4, lr}
   14c74:	bl	11318 <abort@plt>
   14c78:	ldr	r0, [r3]
   14c7c:	cmp	r0, #0
   14c80:	bxne	lr
   14c84:	add	r3, r3, #8
   14c88:	b	14c68 <__assert_fail@plt+0x3908>
   14c8c:	mov	r0, r3
   14c90:	bx	lr
   14c94:	push	{r4, r5, r6, lr}
   14c98:	mov	r4, r0
   14c9c:	mov	r5, r1
   14ca0:	bl	1478c <__assert_fail@plt+0x342c>
   14ca4:	mov	r2, r0
   14ca8:	mov	r3, r0
   14cac:	ldm	r3, {r1, r3}
   14cb0:	cmp	r1, r5
   14cb4:	bne	14cc8 <__assert_fail@plt+0x3968>
   14cb8:	cmp	r3, #0
   14cbc:	beq	14cd0 <__assert_fail@plt+0x3970>
   14cc0:	ldr	r0, [r3]
   14cc4:	pop	{r4, r5, r6, pc}
   14cc8:	cmp	r3, #0
   14ccc:	bne	14cac <__assert_fail@plt+0x394c>
   14cd0:	ldr	r3, [r4, #4]
   14cd4:	add	r2, r2, #8
   14cd8:	cmp	r3, r2
   14cdc:	bhi	14ce8 <__assert_fail@plt+0x3988>
   14ce0:	mov	r0, #0
   14ce4:	pop	{r4, r5, r6, pc}
   14ce8:	ldr	r0, [r2]
   14cec:	cmp	r0, #0
   14cf0:	beq	14cd4 <__assert_fail@plt+0x3974>
   14cf4:	pop	{r4, r5, r6, pc}
   14cf8:	ldr	ip, [r0]
   14cfc:	mov	r3, #0
   14d00:	push	{r4, r5, lr}
   14d04:	ldr	lr, [r0, #4]
   14d08:	cmp	lr, ip
   14d0c:	bhi	14d18 <__assert_fail@plt+0x39b8>
   14d10:	mov	r0, r3
   14d14:	pop	{r4, r5, pc}
   14d18:	ldr	lr, [ip]
   14d1c:	cmp	lr, #0
   14d20:	beq	14d4c <__assert_fail@plt+0x39ec>
   14d24:	add	r4, r1, r3, lsl #2
   14d28:	mov	lr, ip
   14d2c:	cmp	r2, r3
   14d30:	bls	14d10 <__assert_fail@plt+0x39b0>
   14d34:	ldr	r5, [lr]
   14d38:	add	r3, r3, #1
   14d3c:	str	r5, [r4], #4
   14d40:	ldr	lr, [lr, #4]
   14d44:	cmp	lr, #0
   14d48:	bne	14d2c <__assert_fail@plt+0x39cc>
   14d4c:	add	ip, ip, #8
   14d50:	b	14d04 <__assert_fail@plt+0x39a4>
   14d54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d58:	mov	r7, r0
   14d5c:	mov	r8, r1
   14d60:	mov	r9, r2
   14d64:	mov	r6, #0
   14d68:	ldr	r4, [r0]
   14d6c:	ldr	r3, [r7, #4]
   14d70:	cmp	r3, r4
   14d74:	bhi	14d80 <__assert_fail@plt+0x3a20>
   14d78:	mov	r0, r6
   14d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d80:	ldr	r3, [r4]
   14d84:	cmp	r3, #0
   14d88:	beq	14db4 <__assert_fail@plt+0x3a54>
   14d8c:	mov	r5, r4
   14d90:	mov	r1, r9
   14d94:	ldr	r0, [r5]
   14d98:	blx	r8
   14d9c:	cmp	r0, #0
   14da0:	beq	14d78 <__assert_fail@plt+0x3a18>
   14da4:	ldr	r5, [r5, #4]
   14da8:	add	r6, r6, #1
   14dac:	cmp	r5, #0
   14db0:	bne	14d90 <__assert_fail@plt+0x3a30>
   14db4:	add	r4, r4, #8
   14db8:	b	14d6c <__assert_fail@plt+0x3a0c>
   14dbc:	sub	r2, r0, #1
   14dc0:	mov	r0, #0
   14dc4:	ldrb	r3, [r2, #1]!
   14dc8:	cmp	r3, #0
   14dcc:	bxeq	lr
   14dd0:	rsb	r0, r0, r0, lsl #5
   14dd4:	add	r0, r0, r3
   14dd8:	udiv	r3, r0, r1
   14ddc:	mls	r0, r1, r3, r0
   14de0:	b	14dc4 <__assert_fail@plt+0x3a64>
   14de4:	push	{lr}		; (str lr, [sp, #-4]!)
   14de8:	mov	ip, r0
   14dec:	ldr	lr, [pc, #16]	; 14e04 <__assert_fail@plt+0x3aa4>
   14df0:	ldm	lr!, {r0, r1, r2, r3}
   14df4:	stmia	ip!, {r0, r1, r2, r3}
   14df8:	ldr	r3, [lr]
   14dfc:	str	r3, [ip]
   14e00:	pop	{pc}		; (ldr pc, [sp], #4)
   14e04:	andeq	r9, r1, r8, lsr #1
   14e08:	cmp	r2, #0
   14e0c:	push	{r4, r5, r6, r7, r8, lr}
   14e10:	mov	r8, r0
   14e14:	mov	r0, #40	; 0x28
   14e18:	mov	r5, r1
   14e1c:	ldr	r7, [pc, #164]	; 14ec8 <__assert_fail@plt+0x3b68>
   14e20:	movne	r7, r2
   14e24:	cmp	r3, #0
   14e28:	ldr	r6, [pc, #156]	; 14ecc <__assert_fail@plt+0x3b6c>
   14e2c:	movne	r6, r3
   14e30:	bl	1792c <__assert_fail@plt+0x65cc>
   14e34:	subs	r4, r0, #0
   14e38:	beq	14eb0 <__assert_fail@plt+0x3b50>
   14e3c:	ldr	r3, [pc, #140]	; 14ed0 <__assert_fail@plt+0x3b70>
   14e40:	cmp	r5, #0
   14e44:	mov	r0, r4
   14e48:	moveq	r5, r3
   14e4c:	str	r5, [r0, #20]!
   14e50:	bl	1489c <__assert_fail@plt+0x353c>
   14e54:	cmp	r0, #0
   14e58:	beq	14eb8 <__assert_fail@plt+0x3b58>
   14e5c:	mov	r1, r5
   14e60:	mov	r0, r8
   14e64:	bl	146d8 <__assert_fail@plt+0x3378>
   14e68:	cmp	r0, #0
   14e6c:	str	r0, [r4, #8]
   14e70:	beq	14eb8 <__assert_fail@plt+0x3b58>
   14e74:	mov	r1, #8
   14e78:	bl	178d8 <__assert_fail@plt+0x6578>
   14e7c:	cmp	r0, #0
   14e80:	str	r0, [r4]
   14e84:	beq	14eb8 <__assert_fail@plt+0x3b58>
   14e88:	ldr	r3, [r4, #8]
   14e8c:	str	r7, [r4, #24]
   14e90:	ldr	r2, [sp, #24]
   14e94:	str	r6, [r4, #28]
   14e98:	add	r0, r0, r3, lsl #3
   14e9c:	mov	r3, #0
   14ea0:	str	r0, [r4, #4]
   14ea4:	str	r3, [r4, #12]
   14ea8:	str	r3, [r4, #16]
   14eac:	strd	r2, [r4, #32]
   14eb0:	mov	r0, r4
   14eb4:	pop	{r4, r5, r6, r7, r8, pc}
   14eb8:	mov	r0, r4
   14ebc:	mov	r4, #0
   14ec0:	bl	1297c <__assert_fail@plt+0x161c>
   14ec4:	b	14eb0 <__assert_fail@plt+0x3b50>
   14ec8:			; <UNDEFINED> instruction: 0x000146b8
   14ecc:	andeq	r4, r1, r8, asr #13
   14ed0:	andeq	r9, r1, r8, lsr #1
   14ed4:	push	{r4, r5, r6, r7, r8, lr}
   14ed8:	mov	r5, r0
   14edc:	mov	r7, #0
   14ee0:	ldr	r4, [r0]
   14ee4:	add	r4, r4, #8
   14ee8:	ldr	r2, [r5, #4]
   14eec:	sub	r3, r4, #8
   14ef0:	cmp	r2, r3
   14ef4:	bhi	14f08 <__assert_fail@plt+0x3ba8>
   14ef8:	mov	r3, #0
   14efc:	str	r3, [r5, #12]
   14f00:	str	r3, [r5, #16]
   14f04:	pop	{r4, r5, r6, r7, r8, pc}
   14f08:	ldr	r3, [r4, #-8]
   14f0c:	cmp	r3, #0
   14f10:	ldrne	r6, [r4, #-4]
   14f14:	bne	14f48 <__assert_fail@plt+0x3be8>
   14f18:	add	r4, r4, #8
   14f1c:	b	14ee8 <__assert_fail@plt+0x3b88>
   14f20:	cmp	r3, #0
   14f24:	beq	14f30 <__assert_fail@plt+0x3bd0>
   14f28:	ldr	r0, [r6]
   14f2c:	blx	r3
   14f30:	ldr	r3, [r6, #4]
   14f34:	ldr	r2, [r5, #36]	; 0x24
   14f38:	str	r7, [r6]
   14f3c:	str	r2, [r6, #4]
   14f40:	str	r6, [r5, #36]	; 0x24
   14f44:	mov	r6, r3
   14f48:	cmp	r6, #0
   14f4c:	ldr	r3, [r5, #32]
   14f50:	bne	14f20 <__assert_fail@plt+0x3bc0>
   14f54:	cmp	r3, #0
   14f58:	beq	14f64 <__assert_fail@plt+0x3c04>
   14f5c:	ldr	r0, [r4, #-8]
   14f60:	blx	r3
   14f64:	str	r7, [r4, #-8]
   14f68:	str	r7, [r4, #-4]
   14f6c:	b	14f18 <__assert_fail@plt+0x3bb8>
   14f70:	ldr	r3, [r0, #32]
   14f74:	push	{r4, r5, r6, lr}
   14f78:	mov	r4, r0
   14f7c:	cmp	r3, #0
   14f80:	bne	14fb4 <__assert_fail@plt+0x3c54>
   14f84:	ldr	r5, [r4]
   14f88:	ldr	r3, [r4, #4]
   14f8c:	cmp	r3, r5
   14f90:	bhi	15004 <__assert_fail@plt+0x3ca4>
   14f94:	ldr	r0, [r4, #36]	; 0x24
   14f98:	cmp	r0, #0
   14f9c:	bne	15024 <__assert_fail@plt+0x3cc4>
   14fa0:	ldr	r0, [r4]
   14fa4:	bl	1297c <__assert_fail@plt+0x161c>
   14fa8:	mov	r0, r4
   14fac:	pop	{r4, r5, r6, lr}
   14fb0:	b	1297c <__assert_fail@plt+0x161c>
   14fb4:	ldr	r3, [r0, #16]
   14fb8:	cmp	r3, #0
   14fbc:	ldrne	r5, [r0]
   14fc0:	beq	14f84 <__assert_fail@plt+0x3c24>
   14fc4:	ldr	r3, [r4, #4]
   14fc8:	cmp	r3, r5
   14fcc:	bls	14f84 <__assert_fail@plt+0x3c24>
   14fd0:	ldr	r3, [r5]
   14fd4:	cmp	r3, #0
   14fd8:	bne	14fe4 <__assert_fail@plt+0x3c84>
   14fdc:	add	r5, r5, #8
   14fe0:	b	14fc4 <__assert_fail@plt+0x3c64>
   14fe4:	mov	r6, r5
   14fe8:	ldr	r0, [r6]
   14fec:	ldr	r3, [r4, #32]
   14ff0:	blx	r3
   14ff4:	ldr	r6, [r6, #4]
   14ff8:	cmp	r6, #0
   14ffc:	bne	14fe8 <__assert_fail@plt+0x3c88>
   15000:	b	14fdc <__assert_fail@plt+0x3c7c>
   15004:	ldr	r0, [r5, #4]
   15008:	cmp	r0, #0
   1500c:	addeq	r5, r5, #8
   15010:	beq	14f88 <__assert_fail@plt+0x3c28>
   15014:	ldr	r6, [r0, #4]
   15018:	bl	1297c <__assert_fail@plt+0x161c>
   1501c:	mov	r0, r6
   15020:	b	15008 <__assert_fail@plt+0x3ca8>
   15024:	ldr	r5, [r0, #4]
   15028:	bl	1297c <__assert_fail@plt+0x161c>
   1502c:	mov	r0, r5
   15030:	b	14f98 <__assert_fail@plt+0x3c38>
   15034:	push	{r4, r5, lr}
   15038:	mov	r4, r0
   1503c:	sub	sp, sp, #44	; 0x2c
   15040:	mov	r0, r1
   15044:	ldr	r1, [r4, #20]
   15048:	bl	146d8 <__assert_fail@plt+0x3378>
   1504c:	subs	r5, r0, #0
   15050:	bne	15064 <__assert_fail@plt+0x3d04>
   15054:	mov	r5, #0
   15058:	mov	r0, r5
   1505c:	add	sp, sp, #44	; 0x2c
   15060:	pop	{r4, r5, pc}
   15064:	ldr	r3, [r4, #8]
   15068:	cmp	r3, r5
   1506c:	beq	1514c <__assert_fail@plt+0x3dec>
   15070:	mov	r1, #8
   15074:	bl	178d8 <__assert_fail@plt+0x6578>
   15078:	cmp	r0, #0
   1507c:	str	r0, [sp]
   15080:	beq	15054 <__assert_fail@plt+0x3cf4>
   15084:	ldr	r3, [r4, #20]
   15088:	mov	r2, #0
   1508c:	add	r0, r0, r5, lsl #3
   15090:	mov	r1, r4
   15094:	stmib	sp, {r0, r5}
   15098:	mov	r0, sp
   1509c:	str	r2, [sp, #12]
   150a0:	strd	r2, [sp, #16]
   150a4:	ldr	r3, [r4, #24]
   150a8:	str	r3, [sp, #24]
   150ac:	ldr	r3, [r4, #28]
   150b0:	str	r3, [sp, #28]
   150b4:	ldr	r3, [r4, #32]
   150b8:	str	r3, [sp, #32]
   150bc:	ldr	r3, [r4, #36]	; 0x24
   150c0:	str	r3, [sp, #36]	; 0x24
   150c4:	bl	1494c <__assert_fail@plt+0x35ec>
   150c8:	subs	r5, r0, #0
   150cc:	beq	15104 <__assert_fail@plt+0x3da4>
   150d0:	ldr	r0, [r4]
   150d4:	bl	1297c <__assert_fail@plt+0x161c>
   150d8:	ldr	r3, [sp]
   150dc:	str	r3, [r4]
   150e0:	ldr	r3, [sp, #4]
   150e4:	str	r3, [r4, #4]
   150e8:	ldr	r3, [sp, #8]
   150ec:	str	r3, [r4, #8]
   150f0:	ldr	r3, [sp, #12]
   150f4:	str	r3, [r4, #12]
   150f8:	ldr	r3, [sp, #36]	; 0x24
   150fc:	str	r3, [r4, #36]	; 0x24
   15100:	b	15058 <__assert_fail@plt+0x3cf8>
   15104:	ldr	r3, [sp, #36]	; 0x24
   15108:	mov	r2, #1
   1510c:	mov	r1, sp
   15110:	mov	r0, r4
   15114:	str	r3, [r4, #36]	; 0x24
   15118:	bl	1494c <__assert_fail@plt+0x35ec>
   1511c:	cmp	r0, #0
   15120:	bne	15128 <__assert_fail@plt+0x3dc8>
   15124:	bl	11318 <abort@plt>
   15128:	mov	r2, r5
   1512c:	mov	r1, sp
   15130:	mov	r0, r4
   15134:	bl	1494c <__assert_fail@plt+0x35ec>
   15138:	cmp	r0, #0
   1513c:	beq	15124 <__assert_fail@plt+0x3dc4>
   15140:	ldr	r0, [sp]
   15144:	bl	1297c <__assert_fail@plt+0x161c>
   15148:	b	15058 <__assert_fail@plt+0x3cf8>
   1514c:	mov	r5, #1
   15150:	b	15058 <__assert_fail@plt+0x3cf8>
   15154:	push	{r0, r1, r4, r5, r6, lr}
   15158:	subs	r6, r1, #0
   1515c:	bne	15164 <__assert_fail@plt+0x3e04>
   15160:	bl	11318 <abort@plt>
   15164:	mov	r5, r2
   15168:	mov	r3, #0
   1516c:	add	r2, sp, #4
   15170:	mov	r4, r0
   15174:	bl	147c0 <__assert_fail@plt+0x3460>
   15178:	cmp	r0, #0
   1517c:	beq	15194 <__assert_fail@plt+0x3e34>
   15180:	cmp	r5, #0
   15184:	strne	r0, [r5]
   15188:	movne	r0, #0
   1518c:	moveq	r0, r5
   15190:	b	15214 <__assert_fail@plt+0x3eb4>
   15194:	vldr	s15, [r4, #12]
   15198:	ldr	r3, [r4, #20]
   1519c:	vcvt.f32.u32	s14, s15
   151a0:	vldr	s15, [r4, #8]
   151a4:	vldr	s13, [r3, #8]
   151a8:	vcvt.f32.u32	s15, s15
   151ac:	vmul.f32	s15, s15, s13
   151b0:	vcmpe.f32	s14, s15
   151b4:	vmrs	APSR_nzcv, fpscr
   151b8:	ble	15250 <__assert_fail@plt+0x3ef0>
   151bc:	add	r0, r4, #20
   151c0:	bl	1489c <__assert_fail@plt+0x353c>
   151c4:	vldr	s15, [r4, #8]
   151c8:	vldr	s14, [r4, #12]
   151cc:	ldr	r3, [r4, #20]
   151d0:	vcvt.f32.u32	s15, s15
   151d4:	vcvt.f32.u32	s14, s14
   151d8:	vldr	s13, [r3, #8]
   151dc:	vmul.f32	s12, s13, s15
   151e0:	vcmpe.f32	s14, s12
   151e4:	vmrs	APSR_nzcv, fpscr
   151e8:	ble	15250 <__assert_fail@plt+0x3ef0>
   151ec:	vldr	s14, [r3, #12]
   151f0:	ldrb	r3, [r3, #16]
   151f4:	vmul.f32	s15, s15, s14
   151f8:	vldr	s14, [pc, #204]	; 152cc <__assert_fail@plt+0x3f6c>
   151fc:	cmp	r3, #0
   15200:	vmuleq.f32	s15, s15, s13
   15204:	vcmpe.f32	s15, s14
   15208:	vmrs	APSR_nzcv, fpscr
   1520c:	blt	1521c <__assert_fail@plt+0x3ebc>
   15210:	mvn	r0, #0
   15214:	add	sp, sp, #8
   15218:	pop	{r4, r5, r6, pc}
   1521c:	vcvt.u32.f32	s15, s15
   15220:	mov	r0, r4
   15224:	vmov	r1, s15
   15228:	bl	15034 <__assert_fail@plt+0x3cd4>
   1522c:	cmp	r0, #0
   15230:	beq	15210 <__assert_fail@plt+0x3eb0>
   15234:	mov	r3, #0
   15238:	add	r2, sp, #4
   1523c:	mov	r1, r6
   15240:	mov	r0, r4
   15244:	bl	147c0 <__assert_fail@plt+0x3460>
   15248:	cmp	r0, #0
   1524c:	bne	15160 <__assert_fail@plt+0x3e00>
   15250:	ldr	r3, [sp, #4]
   15254:	ldr	r2, [r3]
   15258:	cmp	r2, #0
   1525c:	beq	152ac <__assert_fail@plt+0x3f4c>
   15260:	ldr	r0, [r4, #36]	; 0x24
   15264:	cmp	r0, #0
   15268:	ldrne	r3, [r0, #4]
   1526c:	strne	r3, [r4, #36]	; 0x24
   15270:	bne	15284 <__assert_fail@plt+0x3f24>
   15274:	mov	r0, #8
   15278:	bl	1792c <__assert_fail@plt+0x65cc>
   1527c:	cmp	r0, #0
   15280:	beq	15210 <__assert_fail@plt+0x3eb0>
   15284:	ldr	r3, [sp, #4]
   15288:	ldr	r2, [r3, #4]
   1528c:	str	r6, [r0]
   15290:	str	r2, [r0, #4]
   15294:	str	r0, [r3, #4]
   15298:	ldr	r3, [r4, #16]
   1529c:	add	r3, r3, #1
   152a0:	str	r3, [r4, #16]
   152a4:	mov	r0, #1
   152a8:	b	15214 <__assert_fail@plt+0x3eb4>
   152ac:	str	r6, [r3]
   152b0:	ldr	r3, [r4, #16]
   152b4:	add	r3, r3, #1
   152b8:	str	r3, [r4, #16]
   152bc:	ldr	r3, [r4, #12]
   152c0:	add	r3, r3, #1
   152c4:	str	r3, [r4, #12]
   152c8:	b	152a4 <__assert_fail@plt+0x3f44>
   152cc:	svcmi	0x00800000
   152d0:	push	{r0, r1, r4, lr}
   152d4:	add	r2, sp, #4
   152d8:	mov	r4, r1
   152dc:	bl	15154 <__assert_fail@plt+0x3df4>
   152e0:	cmn	r0, #1
   152e4:	moveq	r4, #0
   152e8:	beq	152f4 <__assert_fail@plt+0x3f94>
   152ec:	cmp	r0, #0
   152f0:	ldreq	r4, [sp, #4]
   152f4:	mov	r0, r4
   152f8:	add	sp, sp, #8
   152fc:	pop	{r4, pc}
   15300:	push	{r0, r1, r4, r5, r6, lr}
   15304:	mov	r3, #1
   15308:	add	r2, sp, #4
   1530c:	mov	r4, r0
   15310:	bl	147c0 <__assert_fail@plt+0x3460>
   15314:	subs	r5, r0, #0
   15318:	beq	153d0 <__assert_fail@plt+0x4070>
   1531c:	ldr	r3, [r4, #16]
   15320:	sub	r3, r3, #1
   15324:	str	r3, [r4, #16]
   15328:	ldr	r3, [sp, #4]
   1532c:	ldr	r3, [r3]
   15330:	cmp	r3, #0
   15334:	bne	153d0 <__assert_fail@plt+0x4070>
   15338:	vldr	s14, [r4, #8]
   1533c:	ldr	r3, [r4, #12]
   15340:	vcvt.f32.u32	s14, s14
   15344:	sub	r3, r3, #1
   15348:	vmov	s15, r3
   1534c:	str	r3, [r4, #12]
   15350:	ldr	r3, [r4, #20]
   15354:	vldr	s13, [r3]
   15358:	vcvt.f32.u32	s15, s15
   1535c:	vmul.f32	s14, s14, s13
   15360:	vcmpe.f32	s15, s14
   15364:	vmrs	APSR_nzcv, fpscr
   15368:	bpl	153d0 <__assert_fail@plt+0x4070>
   1536c:	add	r0, r4, #20
   15370:	bl	1489c <__assert_fail@plt+0x353c>
   15374:	vldr	s15, [r4, #8]
   15378:	vldr	s14, [r4, #12]
   1537c:	ldr	r3, [r4, #20]
   15380:	vcvt.f32.u32	s15, s15
   15384:	vcvt.f32.u32	s13, s14
   15388:	vldr	s14, [r3]
   1538c:	vmul.f32	s14, s15, s14
   15390:	vcmpe.f32	s13, s14
   15394:	vmrs	APSR_nzcv, fpscr
   15398:	bpl	153d0 <__assert_fail@plt+0x4070>
   1539c:	ldrb	r2, [r3, #16]
   153a0:	mov	r0, r4
   153a4:	vldr	s14, [r3, #4]
   153a8:	cmp	r2, #0
   153ac:	vmul.f32	s15, s15, s14
   153b0:	vldreq	s14, [r3, #8]
   153b4:	vmuleq.f32	s15, s15, s14
   153b8:	vcvt.u32.f32	s15, s15
   153bc:	vmov	r1, s15
   153c0:	bl	15034 <__assert_fail@plt+0x3cd4>
   153c4:	cmp	r0, #0
   153c8:	ldreq	r0, [r4, #36]	; 0x24
   153cc:	beq	153e8 <__assert_fail@plt+0x4088>
   153d0:	mov	r0, r5
   153d4:	add	sp, sp, #8
   153d8:	pop	{r4, r5, r6, pc}
   153dc:	ldr	r6, [r0, #4]
   153e0:	bl	1297c <__assert_fail@plt+0x161c>
   153e4:	mov	r0, r6
   153e8:	cmp	r0, #0
   153ec:	bne	153dc <__assert_fail@plt+0x407c>
   153f0:	str	r0, [r4, #36]	; 0x24
   153f4:	b	153d0 <__assert_fail@plt+0x4070>
   153f8:	b	15300 <__assert_fail@plt+0x3fa0>
   153fc:	mov	r3, #1
   15400:	str	r1, [r0]
   15404:	str	r1, [r0, #4]
   15408:	str	r1, [r0, #8]
   1540c:	strb	r3, [r0, #28]
   15410:	mov	r3, #0
   15414:	str	r1, [r0, #12]
   15418:	str	r1, [r0, #16]
   1541c:	str	r3, [r0, #20]
   15420:	str	r3, [r0, #24]
   15424:	bx	lr
   15428:	ldrb	r0, [r0, #28]
   1542c:	bx	lr
   15430:	ldrb	r2, [r0, #28]
   15434:	mov	r3, r0
   15438:	ldr	ip, [r0, #20]
   1543c:	eor	r2, r2, #1
   15440:	add	ip, r2, ip
   15444:	and	ip, ip, #3
   15448:	ldr	r0, [r0, ip, lsl #2]
   1544c:	str	r1, [r3, ip, lsl #2]
   15450:	ldr	r1, [r3, #24]
   15454:	str	ip, [r3, #20]
   15458:	cmp	r1, ip
   1545c:	addeq	r2, r2, r1
   15460:	andeq	r2, r2, #3
   15464:	streq	r2, [r3, #24]
   15468:	mov	r2, #0
   1546c:	strb	r2, [r3, #28]
   15470:	bx	lr
   15474:	ldrb	r2, [r0, #28]
   15478:	cmp	r2, #0
   1547c:	beq	15488 <__assert_fail@plt+0x4128>
   15480:	push	{r4, lr}
   15484:	bl	11318 <abort@plt>
   15488:	ldr	r1, [r0, #16]
   1548c:	mov	r3, r0
   15490:	ldr	r2, [r0, #20]
   15494:	ldr	r0, [r0, r2, lsl #2]
   15498:	str	r1, [r3, r2, lsl #2]
   1549c:	ldr	r1, [r3, #24]
   154a0:	cmp	r2, r1
   154a4:	addne	r2, r2, #3
   154a8:	moveq	r2, #1
   154ac:	andne	r2, r2, #3
   154b0:	strbeq	r2, [r3, #28]
   154b4:	strne	r2, [r3, #20]
   154b8:	bx	lr
   154bc:	push	{r4, r5, r6, lr}
   154c0:	mov	r3, #0
   154c4:	mov	r4, r0
   154c8:	mov	r5, r1
   154cc:	add	r6, r2, #20
   154d0:	strb	r3, [r2, #20]
   154d4:	mov	r2, #10
   154d8:	mov	r3, #0
   154dc:	mov	r0, r4
   154e0:	mov	r1, r5
   154e4:	bl	18010 <__assert_fail@plt+0x6cb0>
   154e8:	add	r2, r2, #48	; 0x30
   154ec:	mov	r3, #0
   154f0:	mov	r0, r4
   154f4:	mov	r1, r5
   154f8:	strb	r2, [r6, #-1]!
   154fc:	mov	r2, #10
   15500:	bl	18010 <__assert_fail@plt+0x6cb0>
   15504:	cmp	r5, #0
   15508:	cmpeq	r4, #9
   1550c:	bhi	15518 <__assert_fail@plt+0x41b8>
   15510:	mov	r0, r6
   15514:	pop	{r4, r5, r6, pc}
   15518:	mov	r4, r0
   1551c:	mov	r5, r1
   15520:	b	154d4 <__assert_fail@plt+0x4174>
   15524:	push	{r2, r3}
   15528:	push	{r0, r1, r2, lr}
   1552c:	ldr	r2, [sp, #16]
   15530:	ands	r3, r2, #64	; 0x40
   15534:	addne	r3, sp, #20
   15538:	strne	r3, [sp, #4]
   1553c:	ldrne	r3, [sp, #20]
   15540:	bl	111ec <openat64@plt>
   15544:	bl	16bf4 <__assert_fail@plt+0x5894>
   15548:	add	sp, sp, #12
   1554c:	pop	{lr}		; (ldr lr, [sp], #4)
   15550:	add	sp, sp, #8
   15554:	bx	lr
   15558:	orr	r2, r2, #540672	; 0x84000
   1555c:	push	{r4, r5, r6, r7, r8, lr}
   15560:	mov	r5, r3
   15564:	orr	r2, r2, #2304	; 0x900
   15568:	bl	15524 <__assert_fail@plt+0x41c4>
   1556c:	subs	r6, r0, #0
   15570:	movlt	r4, #0
   15574:	blt	155a0 <__assert_fail@plt+0x4240>
   15578:	bl	112ac <fdopendir@plt>
   1557c:	subs	r4, r0, #0
   15580:	strne	r6, [r5]
   15584:	bne	155a0 <__assert_fail@plt+0x4240>
   15588:	bl	11204 <__errno_location@plt>
   1558c:	mov	r5, r0
   15590:	mov	r0, r6
   15594:	ldr	r7, [r5]
   15598:	bl	11324 <close@plt>
   1559c:	str	r7, [r5]
   155a0:	mov	r0, r4
   155a4:	pop	{r4, r5, r6, r7, r8, pc}
   155a8:	push	{r4, r5, r6, lr}
   155ac:	subs	r4, r0, #0
   155b0:	bne	155c8 <__assert_fail@plt+0x4268>
   155b4:	ldr	r3, [pc, #124]	; 15638 <__assert_fail@plt+0x42d8>
   155b8:	ldr	r0, [pc, #124]	; 1563c <__assert_fail@plt+0x42dc>
   155bc:	ldr	r1, [r3]
   155c0:	bl	11300 <fputs@plt>
   155c4:	bl	11318 <abort@plt>
   155c8:	mov	r1, #47	; 0x2f
   155cc:	bl	11288 <strrchr@plt>
   155d0:	subs	r6, r0, #0
   155d4:	beq	15624 <__assert_fail@plt+0x42c4>
   155d8:	add	r5, r6, #1
   155dc:	sub	r3, r5, r4
   155e0:	cmp	r3, #6
   155e4:	ble	15624 <__assert_fail@plt+0x42c4>
   155e8:	mov	r2, #7
   155ec:	ldr	r1, [pc, #76]	; 15640 <__assert_fail@plt+0x42e0>
   155f0:	sub	r0, r6, #6
   155f4:	bl	1130c <strncmp@plt>
   155f8:	cmp	r0, #0
   155fc:	bne	15624 <__assert_fail@plt+0x42c4>
   15600:	mov	r2, #3
   15604:	ldr	r1, [pc, #56]	; 15644 <__assert_fail@plt+0x42e4>
   15608:	mov	r0, r5
   1560c:	bl	1130c <strncmp@plt>
   15610:	cmp	r0, #0
   15614:	ldreq	r3, [pc, #44]	; 15648 <__assert_fail@plt+0x42e8>
   15618:	addeq	r4, r6, #4
   1561c:	movne	r4, r5
   15620:	streq	r4, [r3]
   15624:	ldr	r3, [pc, #32]	; 1564c <__assert_fail@plt+0x42ec>
   15628:	str	r4, [r3]
   1562c:	ldr	r3, [pc, #28]	; 15650 <__assert_fail@plt+0x42f0>
   15630:	str	r4, [r3]
   15634:	pop	{r4, r5, r6, pc}
   15638:	muleq	r2, r0, r1
   1563c:	andeq	r9, r1, r5, lsr #2
   15640:	andeq	r9, r1, sp, asr r1
   15644:	andeq	r9, r1, r5, ror #2
   15648:	andeq	sl, r2, r0, lsl #3
   1564c:	andeq	sl, r2, r0, asr #3
   15650:	andeq	sl, r2, r4, lsl #3
   15654:	push	{r4, lr}
   15658:	mov	r2, #48	; 0x30
   1565c:	mov	r4, r1
   15660:	mov	r1, #0
   15664:	bl	1121c <memset@plt>
   15668:	cmp	r4, #10
   1566c:	bne	15674 <__assert_fail@plt+0x4314>
   15670:	bl	11318 <abort@plt>
   15674:	str	r4, [r0]
   15678:	pop	{r4, pc}
   1567c:	push	{r4, r5, r6, lr}
   15680:	mov	r2, #5
   15684:	mov	r6, r0
   15688:	mov	r5, r1
   1568c:	mov	r1, r0
   15690:	mov	r0, #0
   15694:	bl	110d8 <dcgettext@plt>
   15698:	cmp	r6, r0
   1569c:	mov	r4, r0
   156a0:	bne	15710 <__assert_fail@plt+0x43b0>
   156a4:	bl	17e74 <__assert_fail@plt+0x6b14>
   156a8:	ldrb	r3, [r0]
   156ac:	bic	r3, r3, #32
   156b0:	cmp	r3, #85	; 0x55
   156b4:	bne	15718 <__assert_fail@plt+0x43b8>
   156b8:	ldrb	r3, [r0, #1]
   156bc:	bic	r3, r3, #32
   156c0:	cmp	r3, #84	; 0x54
   156c4:	bne	15788 <__assert_fail@plt+0x4428>
   156c8:	ldrb	r3, [r0, #2]
   156cc:	bic	r3, r3, #32
   156d0:	cmp	r3, #70	; 0x46
   156d4:	bne	15788 <__assert_fail@plt+0x4428>
   156d8:	ldrb	r3, [r0, #3]
   156dc:	cmp	r3, #45	; 0x2d
   156e0:	bne	15788 <__assert_fail@plt+0x4428>
   156e4:	ldrb	r3, [r0, #4]
   156e8:	cmp	r3, #56	; 0x38
   156ec:	bne	15788 <__assert_fail@plt+0x4428>
   156f0:	ldrb	r3, [r0, #5]
   156f4:	cmp	r3, #0
   156f8:	bne	15788 <__assert_fail@plt+0x4428>
   156fc:	ldrb	r2, [r4]
   15700:	ldr	r3, [pc, #144]	; 15798 <__assert_fail@plt+0x4438>
   15704:	ldr	r4, [pc, #144]	; 1579c <__assert_fail@plt+0x443c>
   15708:	cmp	r2, #96	; 0x60
   1570c:	movne	r4, r3
   15710:	mov	r0, r4
   15714:	pop	{r4, r5, r6, pc}
   15718:	cmp	r3, #71	; 0x47
   1571c:	bne	15788 <__assert_fail@plt+0x4428>
   15720:	ldrb	r3, [r0, #1]
   15724:	bic	r3, r3, #32
   15728:	cmp	r3, #66	; 0x42
   1572c:	bne	15788 <__assert_fail@plt+0x4428>
   15730:	ldrb	r3, [r0, #2]
   15734:	cmp	r3, #49	; 0x31
   15738:	bne	15788 <__assert_fail@plt+0x4428>
   1573c:	ldrb	r3, [r0, #3]
   15740:	cmp	r3, #56	; 0x38
   15744:	bne	15788 <__assert_fail@plt+0x4428>
   15748:	ldrb	r3, [r0, #4]
   1574c:	cmp	r3, #48	; 0x30
   15750:	bne	15788 <__assert_fail@plt+0x4428>
   15754:	ldrb	r3, [r0, #5]
   15758:	cmp	r3, #51	; 0x33
   1575c:	bne	15788 <__assert_fail@plt+0x4428>
   15760:	ldrb	r3, [r0, #6]
   15764:	cmp	r3, #48	; 0x30
   15768:	bne	15788 <__assert_fail@plt+0x4428>
   1576c:	ldrb	r3, [r0, #7]
   15770:	cmp	r3, #0
   15774:	bne	15788 <__assert_fail@plt+0x4428>
   15778:	ldrb	r2, [r4]
   1577c:	ldr	r3, [pc, #28]	; 157a0 <__assert_fail@plt+0x4440>
   15780:	ldr	r4, [pc, #28]	; 157a4 <__assert_fail@plt+0x4444>
   15784:	b	15708 <__assert_fail@plt+0x43a8>
   15788:	ldr	r4, [pc, #24]	; 157a8 <__assert_fail@plt+0x4448>
   1578c:	cmp	r5, #9
   15790:	ldr	r3, [pc, #20]	; 157ac <__assert_fail@plt+0x444c>
   15794:	b	1570c <__assert_fail@plt+0x43ac>
   15798:	andeq	r9, r1, r2, asr #3
   1579c:	andeq	r9, r1, sp, asr #3
   157a0:	andeq	r9, r1, r6, asr #3
   157a4:	andeq	r9, r1, r9, asr #3
   157a8:	andeq	r9, r1, r0, asr #3
   157ac:	ldrdeq	r9, [r1], -r1
   157b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b4:	sub	sp, sp, #108	; 0x6c
   157b8:	mov	r8, r0
   157bc:	mov	r5, r1
   157c0:	mov	r6, #0
   157c4:	str	r3, [sp, #40]	; 0x28
   157c8:	str	r2, [sp, #48]	; 0x30
   157cc:	ldr	sl, [sp, #144]	; 0x90
   157d0:	bl	1112c <__ctype_get_mb_cur_max@plt>
   157d4:	ldr	r3, [sp, #148]	; 0x94
   157d8:	str	r6, [sp, #24]
   157dc:	str	r6, [sp, #32]
   157e0:	str	r6, [sp, #44]	; 0x2c
   157e4:	str	r6, [sp, #52]	; 0x34
   157e8:	ubfx	r7, r3, #1, #1
   157ec:	mov	r3, #1
   157f0:	str	r6, [sp, #60]	; 0x3c
   157f4:	str	r3, [sp, #72]	; 0x48
   157f8:	str	r0, [sp, #76]	; 0x4c
   157fc:	cmp	sl, #10
   15800:	ldrls	pc, [pc, sl, lsl #2]
   15804:	b	15a48 <__assert_fail@plt+0x46e8>
   15808:	andeq	r5, r1, r4, lsr r8
   1580c:	andeq	r5, r1, r0, ror #20
   15810:	andeq	r5, r1, r4, ror #19
   15814:	strdeq	r5, [r1], -ip
   15818:	andeq	r5, r1, ip, asr #19
   1581c:	andeq	r5, r1, r4, lsr #18
   15820:	andeq	r5, r1, r4, lsl #18
   15824:	andeq	r5, r1, ip, asr #20
   15828:	andeq	r5, r1, r4, asr r9
   1582c:	andeq	r5, r1, r4, asr r9
   15830:	andeq	r5, r1, r4, asr r9
   15834:	mov	r4, sl
   15838:	mov	r7, #0
   1583c:	mov	r9, r5
   15840:	mov	r3, #0
   15844:	str	r6, [sp, #68]	; 0x44
   15848:	str	r3, [sp, #28]
   1584c:	ldr	r3, [sp, #40]	; 0x28
   15850:	cmn	r3, #1
   15854:	bne	163f4 <__assert_fail@plt+0x5094>
   15858:	ldr	r2, [sp, #28]
   1585c:	ldr	r3, [sp, #48]	; 0x30
   15860:	ldrb	r3, [r3, r2]
   15864:	adds	r3, r3, #0
   15868:	movne	r3, #1
   1586c:	str	r3, [sp, #36]	; 0x24
   15870:	ldr	r3, [sp, #36]	; 0x24
   15874:	cmp	r3, #0
   15878:	bne	15a84 <__assert_fail@plt+0x4724>
   1587c:	sub	r3, sl, #2
   15880:	cmp	r4, #0
   15884:	clz	r3, r3
   15888:	movne	r2, #0
   1588c:	lsr	r3, r3, #5
   15890:	andeq	r2, r3, r7
   15894:	cmp	r2, #0
   15898:	bne	15c48 <__assert_fail@plt+0x48e8>
   1589c:	eor	r7, r7, #1
   158a0:	ands	r3, r3, r7
   158a4:	beq	1646c <__assert_fail@plt+0x510c>
   158a8:	ldr	r2, [sp, #68]	; 0x44
   158ac:	cmp	r2, #0
   158b0:	beq	16434 <__assert_fail@plt+0x50d4>
   158b4:	ldr	r3, [sp, #72]	; 0x48
   158b8:	cmp	r3, #0
   158bc:	beq	16408 <__assert_fail@plt+0x50a8>
   158c0:	ldr	r2, [sp, #48]	; 0x30
   158c4:	ldr	r3, [sp, #160]	; 0xa0
   158c8:	ldr	r1, [sp, #60]	; 0x3c
   158cc:	str	r3, [sp, #16]
   158d0:	ldr	r3, [sp, #156]	; 0x9c
   158d4:	str	r3, [sp, #12]
   158d8:	ldr	r3, [sp, #152]	; 0x98
   158dc:	str	r3, [sp, #8]
   158e0:	ldr	r3, [sp, #148]	; 0x94
   158e4:	str	r3, [sp, #4]
   158e8:	mov	r3, #5
   158ec:	str	r3, [sp]
   158f0:	ldr	r3, [sp, #40]	; 0x28
   158f4:	mov	r0, r8
   158f8:	bl	157b0 <__assert_fail@plt+0x4450>
   158fc:	mov	r4, r0
   15900:	b	16460 <__assert_fail@plt+0x5100>
   15904:	ldr	r3, [pc, #2948]	; 16490 <__assert_fail@plt+0x5130>
   15908:	mov	r7, #1
   1590c:	mov	r4, #0
   15910:	mov	sl, #5
   15914:	str	r7, [sp, #24]
   15918:	str	r7, [sp, #32]
   1591c:	str	r3, [sp, #44]	; 0x2c
   15920:	b	1583c <__assert_fail@plt+0x44dc>
   15924:	cmp	r7, #0
   15928:	bne	15a6c <__assert_fail@plt+0x470c>
   1592c:	cmp	r5, #0
   15930:	mov	r4, #1
   15934:	movne	r3, #34	; 0x22
   15938:	strbne	r3, [r8]
   1593c:	mov	r3, #1
   15940:	str	r3, [sp, #24]
   15944:	str	r3, [sp, #32]
   15948:	ldr	r3, [pc, #2880]	; 16490 <__assert_fail@plt+0x5130>
   1594c:	str	r3, [sp, #44]	; 0x2c
   15950:	b	1583c <__assert_fail@plt+0x44dc>
   15954:	cmp	sl, #10
   15958:	beq	1597c <__assert_fail@plt+0x461c>
   1595c:	mov	r1, sl
   15960:	ldr	r0, [pc, #2860]	; 16494 <__assert_fail@plt+0x5134>
   15964:	bl	1567c <__assert_fail@plt+0x431c>
   15968:	mov	r1, sl
   1596c:	str	r0, [sp, #156]	; 0x9c
   15970:	ldr	r0, [pc, #2848]	; 16498 <__assert_fail@plt+0x5138>
   15974:	bl	1567c <__assert_fail@plt+0x431c>
   15978:	str	r0, [sp, #160]	; 0xa0
   1597c:	cmp	r7, #0
   15980:	moveq	r4, r7
   15984:	beq	1599c <__assert_fail@plt+0x463c>
   15988:	mov	r4, #0
   1598c:	b	159ac <__assert_fail@plt+0x464c>
   15990:	cmp	r5, r4
   15994:	strbhi	r3, [r8, r4]
   15998:	add	r4, r4, #1
   1599c:	ldr	r3, [sp, #156]	; 0x9c
   159a0:	ldrb	r3, [r3, r4]
   159a4:	cmp	r3, #0
   159a8:	bne	15990 <__assert_fail@plt+0x4630>
   159ac:	ldr	r0, [sp, #160]	; 0xa0
   159b0:	bl	111d4 <strlen@plt>
   159b4:	ldr	r3, [sp, #160]	; 0xa0
   159b8:	str	r0, [sp, #32]
   159bc:	str	r3, [sp, #44]	; 0x2c
   159c0:	mov	r3, #1
   159c4:	str	r3, [sp, #24]
   159c8:	b	1583c <__assert_fail@plt+0x44dc>
   159cc:	mov	r3, #1
   159d0:	cmp	r7, #0
   159d4:	streq	r3, [sp, #24]
   159d8:	beq	15a1c <__assert_fail@plt+0x46bc>
   159dc:	str	r3, [sp, #32]
   159e0:	b	15a08 <__assert_fail@plt+0x46a8>
   159e4:	cmp	r7, #0
   159e8:	beq	15a1c <__assert_fail@plt+0x46bc>
   159ec:	mov	r3, #1
   159f0:	str	r3, [sp, #32]
   159f4:	ldr	r3, [pc, #2716]	; 16498 <__assert_fail@plt+0x5138>
   159f8:	b	15a7c <__assert_fail@plt+0x471c>
   159fc:	mov	r7, #1
   15a00:	str	r7, [sp, #24]
   15a04:	str	r7, [sp, #32]
   15a08:	ldr	r3, [pc, #2696]	; 16498 <__assert_fail@plt+0x5138>
   15a0c:	mov	r4, #0
   15a10:	str	r3, [sp, #44]	; 0x2c
   15a14:	mov	sl, #2
   15a18:	b	1583c <__assert_fail@plt+0x44dc>
   15a1c:	cmp	r5, #0
   15a20:	movne	r3, #39	; 0x27
   15a24:	movne	r7, #0
   15a28:	strbne	r3, [r8]
   15a2c:	moveq	r7, r5
   15a30:	mov	r3, #1
   15a34:	mov	r4, #1
   15a38:	str	r3, [sp, #32]
   15a3c:	ldr	r3, [pc, #2644]	; 16498 <__assert_fail@plt+0x5138>
   15a40:	str	r3, [sp, #44]	; 0x2c
   15a44:	b	15a14 <__assert_fail@plt+0x46b4>
   15a48:	bl	11318 <abort@plt>
   15a4c:	mov	r3, #1
   15a50:	mov	r7, #0
   15a54:	str	r3, [sp, #24]
   15a58:	mov	r4, #0
   15a5c:	b	1583c <__assert_fail@plt+0x44dc>
   15a60:	mov	r7, #1
   15a64:	str	sl, [sp, #32]
   15a68:	b	15a08 <__assert_fail@plt+0x46a8>
   15a6c:	mov	r3, #1
   15a70:	str	r7, [sp, #24]
   15a74:	str	r3, [sp, #32]
   15a78:	ldr	r3, [pc, #2576]	; 16490 <__assert_fail@plt+0x5130>
   15a7c:	str	r3, [sp, #44]	; 0x2c
   15a80:	b	15a58 <__assert_fail@plt+0x46f8>
   15a84:	ldr	fp, [sp, #24]
   15a88:	ldr	r3, [sp, #32]
   15a8c:	cmp	sl, #2
   15a90:	moveq	fp, #0
   15a94:	andne	fp, fp, #1
   15a98:	adds	r5, r3, #0
   15a9c:	movne	r5, #1
   15aa0:	ands	r3, fp, r5
   15aa4:	str	r3, [sp, #64]	; 0x40
   15aa8:	beq	15b78 <__assert_fail@plt+0x4818>
   15aac:	ldr	r3, [sp, #28]
   15ab0:	ldr	r2, [sp, #32]
   15ab4:	cmp	r2, #1
   15ab8:	add	r6, r3, r2
   15abc:	mov	r3, r2
   15ac0:	ldr	r2, [sp, #40]	; 0x28
   15ac4:	movls	r3, #0
   15ac8:	movhi	r3, #1
   15acc:	cmn	r2, #1
   15ad0:	movne	r3, #0
   15ad4:	cmp	r3, #0
   15ad8:	beq	15ae8 <__assert_fail@plt+0x4788>
   15adc:	ldr	r0, [sp, #48]	; 0x30
   15ae0:	bl	111d4 <strlen@plt>
   15ae4:	str	r0, [sp, #40]	; 0x28
   15ae8:	ldr	r3, [sp, #40]	; 0x28
   15aec:	cmp	r6, r3
   15af0:	bhi	15b70 <__assert_fail@plt+0x4810>
   15af4:	ldr	r0, [sp, #28]
   15af8:	ldr	r2, [sp, #32]
   15afc:	ldr	r3, [sp, #48]	; 0x30
   15b00:	ldr	r1, [sp, #44]	; 0x2c
   15b04:	add	r0, r3, r0
   15b08:	bl	110b4 <memcmp@plt>
   15b0c:	cmp	r0, #0
   15b10:	bne	15b70 <__assert_fail@plt+0x4810>
   15b14:	cmp	r7, #0
   15b18:	beq	15b78 <__assert_fail@plt+0x4818>
   15b1c:	str	r7, [sp, #24]
   15b20:	ldr	r3, [sp, #24]
   15b24:	mov	r1, r9
   15b28:	ldr	r2, [sp, #48]	; 0x30
   15b2c:	cmp	sl, #2
   15b30:	movne	r3, #0
   15b34:	andeq	r3, r3, #1
   15b38:	cmp	r3, #0
   15b3c:	ldr	r3, [sp, #160]	; 0xa0
   15b40:	movne	sl, #4
   15b44:	str	sl, [sp]
   15b48:	str	r3, [sp, #16]
   15b4c:	ldr	r3, [sp, #156]	; 0x9c
   15b50:	str	r3, [sp, #12]
   15b54:	mov	r3, #0
   15b58:	str	r3, [sp, #8]
   15b5c:	ldr	r3, [sp, #148]	; 0x94
   15b60:	bic	r3, r3, #2
   15b64:	str	r3, [sp, #4]
   15b68:	ldr	r3, [sp, #40]	; 0x28
   15b6c:	b	158f4 <__assert_fail@plt+0x4594>
   15b70:	mov	r3, #0
   15b74:	str	r3, [sp, #64]	; 0x40
   15b78:	ldr	r2, [sp, #28]
   15b7c:	ldr	r3, [sp, #48]	; 0x30
   15b80:	add	r3, r3, r2
   15b84:	str	r3, [sp, #80]	; 0x50
   15b88:	ldr	r3, [sp, #48]	; 0x30
   15b8c:	ldrb	r6, [r3, r2]
   15b90:	cmp	r6, #58	; 0x3a
   15b94:	bhi	15cf8 <__assert_fail@plt+0x4998>
   15b98:	cmp	r6, #43	; 0x2b
   15b9c:	bcs	15eb8 <__assert_fail@plt+0x4b58>
   15ba0:	cmp	r6, #32
   15ba4:	beq	15f0c <__assert_fail@plt+0x4bac>
   15ba8:	bhi	15c50 <__assert_fail@plt+0x48f0>
   15bac:	cmp	r6, #9
   15bb0:	beq	160b4 <__assert_fail@plt+0x4d54>
   15bb4:	bhi	15c14 <__assert_fail@plt+0x48b4>
   15bb8:	cmp	r6, #7
   15bbc:	beq	160c4 <__assert_fail@plt+0x4d64>
   15bc0:	bhi	160e0 <__assert_fail@plt+0x4d80>
   15bc4:	cmp	r6, #0
   15bc8:	beq	15f28 <__assert_fail@plt+0x4bc8>
   15bcc:	ldr	r3, [sp, #76]	; 0x4c
   15bd0:	cmp	r3, #1
   15bd4:	bne	1612c <__assert_fail@plt+0x4dcc>
   15bd8:	bl	111bc <__ctype_b_loc@plt>
   15bdc:	ldr	r2, [r0]
   15be0:	sxth	r3, r6
   15be4:	lsl	r3, r3, #1
   15be8:	ldrh	r5, [r2, r3]
   15bec:	ldr	r3, [sp, #76]	; 0x4c
   15bf0:	ubfx	r5, r5, #14, #1
   15bf4:	str	r3, [sp, #56]	; 0x38
   15bf8:	ldr	r3, [sp, #24]
   15bfc:	eor	fp, r5, #1
   15c00:	and	fp, fp, r3
   15c04:	ands	fp, fp, #255	; 0xff
   15c08:	beq	15de8 <__assert_fail@plt+0x4a88>
   15c0c:	mov	r5, #0
   15c10:	b	161d8 <__assert_fail@plt+0x4e78>
   15c14:	cmp	r6, #11
   15c18:	beq	160e8 <__assert_fail@plt+0x4d88>
   15c1c:	bcc	160bc <__assert_fail@plt+0x4d5c>
   15c20:	cmp	r6, #12
   15c24:	beq	160f0 <__assert_fail@plt+0x4d90>
   15c28:	cmp	r6, #13
   15c2c:	moveq	r3, #114	; 0x72
   15c30:	bne	15bcc <__assert_fail@plt+0x486c>
   15c34:	cmp	sl, #2
   15c38:	movne	r2, #0
   15c3c:	andeq	r2, r7, #1
   15c40:	cmp	r2, #0
   15c44:	beq	160c8 <__assert_fail@plt+0x4d68>
   15c48:	mov	sl, #2
   15c4c:	b	15b20 <__assert_fail@plt+0x47c0>
   15c50:	cmp	r6, #37	; 0x25
   15c54:	beq	15eb8 <__assert_fail@plt+0x4b58>
   15c58:	bhi	15c6c <__assert_fail@plt+0x490c>
   15c5c:	cmp	r6, #35	; 0x23
   15c60:	beq	15f00 <__assert_fail@plt+0x4ba0>
   15c64:	mov	r5, #0
   15c68:	b	15f10 <__assert_fail@plt+0x4bb0>
   15c6c:	cmp	r6, #39	; 0x27
   15c70:	bne	15c64 <__assert_fail@plt+0x4904>
   15c74:	cmp	sl, #2
   15c78:	ldrne	r5, [sp, #36]	; 0x24
   15c7c:	movne	r3, r5
   15c80:	strne	r3, [sp, #68]	; 0x44
   15c84:	bne	16004 <__assert_fail@plt+0x4ca4>
   15c88:	cmp	r7, #0
   15c8c:	bne	15b20 <__assert_fail@plt+0x47c0>
   15c90:	ldr	r3, [sp, #60]	; 0x3c
   15c94:	cmp	r9, #0
   15c98:	clz	r3, r3
   15c9c:	lsr	r3, r3, #5
   15ca0:	moveq	r3, #0
   15ca4:	cmp	r3, #0
   15ca8:	strne	r9, [sp, #60]	; 0x3c
   15cac:	movne	r9, #0
   15cb0:	bne	15cc0 <__assert_fail@plt+0x4960>
   15cb4:	cmp	r9, r4
   15cb8:	movhi	r3, #39	; 0x27
   15cbc:	strbhi	r3, [r8, r4]
   15cc0:	add	r3, r4, #1
   15cc4:	ldr	r5, [sp, #36]	; 0x24
   15cc8:	mov	fp, #0
   15ccc:	cmp	r3, r9
   15cd0:	movcc	r2, #92	; 0x5c
   15cd4:	str	fp, [sp, #52]	; 0x34
   15cd8:	strbcc	r2, [r8, r3]
   15cdc:	add	r3, r4, #2
   15ce0:	add	r4, r4, #3
   15ce4:	cmp	r3, r9
   15ce8:	str	r5, [sp, #68]	; 0x44
   15cec:	movcc	r2, #39	; 0x27
   15cf0:	strbcc	r2, [r8, r3]
   15cf4:	b	15de8 <__assert_fail@plt+0x4a88>
   15cf8:	cmp	r6, #94	; 0x5e
   15cfc:	beq	15c64 <__assert_fail@plt+0x4904>
   15d00:	bhi	15ec0 <__assert_fail@plt+0x4b60>
   15d04:	cmp	r6, #90	; 0x5a
   15d08:	bhi	15eac <__assert_fail@plt+0x4b4c>
   15d0c:	cmp	r6, #65	; 0x41
   15d10:	bcs	15eb8 <__assert_fail@plt+0x4b58>
   15d14:	cmp	r6, #62	; 0x3e
   15d18:	bls	15c64 <__assert_fail@plt+0x4904>
   15d1c:	cmp	r6, #63	; 0x3f
   15d20:	bne	15bcc <__assert_fail@plt+0x486c>
   15d24:	cmp	sl, #2
   15d28:	beq	1600c <__assert_fail@plt+0x4cac>
   15d2c:	cmp	sl, #5
   15d30:	movne	fp, #0
   15d34:	bne	163dc <__assert_fail@plt+0x507c>
   15d38:	ldr	r3, [sp, #148]	; 0x94
   15d3c:	tst	r3, #4
   15d40:	beq	16014 <__assert_fail@plt+0x4cb4>
   15d44:	ldr	r3, [sp, #28]
   15d48:	add	r2, r3, #2
   15d4c:	ldr	r3, [sp, #40]	; 0x28
   15d50:	cmp	r2, r3
   15d54:	bcs	16014 <__assert_fail@plt+0x4cb4>
   15d58:	ldr	r1, [sp, #28]
   15d5c:	ldr	r3, [sp, #48]	; 0x30
   15d60:	add	r3, r3, r1
   15d64:	ldrb	r1, [r3, #1]
   15d68:	cmp	r1, #63	; 0x3f
   15d6c:	bne	16014 <__assert_fail@plt+0x4cb4>
   15d70:	ldr	r3, [sp, #48]	; 0x30
   15d74:	ldrb	r6, [r3, r2]
   15d78:	sub	r3, r6, #33	; 0x21
   15d7c:	uxtb	r3, r3
   15d80:	cmp	r3, #29
   15d84:	bhi	163e4 <__assert_fail@plt+0x5084>
   15d88:	ldr	r0, [pc, #1804]	; 1649c <__assert_fail@plt+0x513c>
   15d8c:	mov	r5, #1
   15d90:	ands	r5, r0, r5, lsl r3
   15d94:	beq	163ec <__assert_fail@plt+0x508c>
   15d98:	cmp	r7, #0
   15d9c:	bne	15b20 <__assert_fail@plt+0x47c0>
   15da0:	cmp	r9, r4
   15da4:	add	r3, r4, #1
   15da8:	str	r2, [sp, #28]
   15dac:	mov	r5, #0
   15db0:	strbhi	r1, [r8, r4]
   15db4:	cmp	r9, r3
   15db8:	mov	fp, r5
   15dbc:	movhi	r1, #34	; 0x22
   15dc0:	strbhi	r1, [r8, r3]
   15dc4:	add	r3, r4, #2
   15dc8:	cmp	r9, r3
   15dcc:	movhi	r1, #34	; 0x22
   15dd0:	strbhi	r1, [r8, r3]
   15dd4:	add	r3, r4, #3
   15dd8:	add	r4, r4, #4
   15ddc:	cmp	r9, r3
   15de0:	movhi	r1, #63	; 0x3f
   15de4:	strbhi	r1, [r8, r3]
   15de8:	ldr	r3, [sp, #24]
   15dec:	eor	r3, r3, #1
   15df0:	cmp	sl, #2
   15df4:	orreq	r3, r3, #1
   15df8:	eor	r3, r3, #1
   15dfc:	orr	r3, r7, r3
   15e00:	tst	r3, #255	; 0xff
   15e04:	beq	15e30 <__assert_fail@plt+0x4ad0>
   15e08:	ldr	r3, [sp, #152]	; 0x98
   15e0c:	cmp	r3, #0
   15e10:	beq	15e30 <__assert_fail@plt+0x4ad0>
   15e14:	ldr	r1, [sp, #152]	; 0x98
   15e18:	ubfx	r2, r6, #5, #8
   15e1c:	and	r3, r6, #31
   15e20:	ldr	r2, [r1, r2, lsl #2]
   15e24:	lsr	r3, r2, r3
   15e28:	tst	r3, #1
   15e2c:	bne	15e3c <__assert_fail@plt+0x4adc>
   15e30:	ldr	r3, [sp, #64]	; 0x40
   15e34:	cmp	r3, #0
   15e38:	beq	16034 <__assert_fail@plt+0x4cd4>
   15e3c:	sub	r3, sl, #2
   15e40:	cmp	r7, #0
   15e44:	clz	r3, r3
   15e48:	lsr	r3, r3, #5
   15e4c:	bne	15b20 <__assert_fail@plt+0x47c0>
   15e50:	ldr	r2, [sp, #52]	; 0x34
   15e54:	eor	r2, r2, #1
   15e58:	ands	r3, r3, r2
   15e5c:	beq	15e94 <__assert_fail@plt+0x4b34>
   15e60:	cmp	r9, r4
   15e64:	str	r3, [sp, #52]	; 0x34
   15e68:	movhi	r2, #39	; 0x27
   15e6c:	strbhi	r2, [r8, r4]
   15e70:	add	r2, r4, #1
   15e74:	cmp	r9, r2
   15e78:	movhi	r1, #36	; 0x24
   15e7c:	strbhi	r1, [r8, r2]
   15e80:	add	r2, r4, #2
   15e84:	add	r4, r4, #3
   15e88:	cmp	r9, r2
   15e8c:	movhi	r1, #39	; 0x27
   15e90:	strbhi	r1, [r8, r2]
   15e94:	cmp	r9, r4
   15e98:	ldr	fp, [sp, #36]	; 0x24
   15e9c:	movhi	r3, #92	; 0x5c
   15ea0:	strbhi	r3, [r8, r4]
   15ea4:	add	r4, r4, #1
   15ea8:	b	16034 <__assert_fail@plt+0x4cd4>
   15eac:	cmp	r6, #92	; 0x5c
   15eb0:	beq	1601c <__assert_fail@plt+0x4cbc>
   15eb4:	bls	15c64 <__assert_fail@plt+0x4904>
   15eb8:	ldr	r5, [sp, #36]	; 0x24
   15ebc:	b	16004 <__assert_fail@plt+0x4ca4>
   15ec0:	cmp	r6, #122	; 0x7a
   15ec4:	bhi	15ee4 <__assert_fail@plt+0x4b84>
   15ec8:	cmp	r6, #97	; 0x61
   15ecc:	bcs	15eb8 <__assert_fail@plt+0x4b58>
   15ed0:	cmp	r6, #95	; 0x5f
   15ed4:	beq	15eb8 <__assert_fail@plt+0x4b58>
   15ed8:	cmp	r6, #96	; 0x60
   15edc:	bne	15bcc <__assert_fail@plt+0x486c>
   15ee0:	b	15c64 <__assert_fail@plt+0x4904>
   15ee4:	cmp	r6, #124	; 0x7c
   15ee8:	beq	15c64 <__assert_fail@plt+0x4904>
   15eec:	bcc	160f8 <__assert_fail@plt+0x4d98>
   15ef0:	cmp	r6, #125	; 0x7d
   15ef4:	beq	160f8 <__assert_fail@plt+0x4d98>
   15ef8:	cmp	r6, #126	; 0x7e
   15efc:	bne	15bcc <__assert_fail@plt+0x486c>
   15f00:	ldr	r3, [sp, #28]
   15f04:	cmp	r3, #0
   15f08:	bne	16014 <__assert_fail@plt+0x4cb4>
   15f0c:	ldr	r5, [sp, #36]	; 0x24
   15f10:	cmp	sl, #2
   15f14:	movne	fp, #0
   15f18:	andeq	fp, r7, #1
   15f1c:	cmp	fp, #0
   15f20:	beq	15de8 <__assert_fail@plt+0x4a88>
   15f24:	b	15c48 <__assert_fail@plt+0x48e8>
   15f28:	ldr	r3, [sp, #24]
   15f2c:	cmp	r3, #0
   15f30:	beq	15ff8 <__assert_fail@plt+0x4c98>
   15f34:	sub	r2, sl, #2
   15f38:	cmp	r7, #0
   15f3c:	clz	r2, r2
   15f40:	lsr	r2, r2, #5
   15f44:	bne	15b1c <__assert_fail@plt+0x47bc>
   15f48:	ldr	r3, [sp, #52]	; 0x34
   15f4c:	eor	r3, r3, #1
   15f50:	ands	r2, r2, r3
   15f54:	moveq	r3, r4
   15f58:	beq	15f90 <__assert_fail@plt+0x4c30>
   15f5c:	cmp	r9, r4
   15f60:	str	r2, [sp, #52]	; 0x34
   15f64:	movhi	r3, #39	; 0x27
   15f68:	strbhi	r3, [r8, r4]
   15f6c:	add	r3, r4, #1
   15f70:	cmp	r9, r3
   15f74:	movhi	r1, #36	; 0x24
   15f78:	strbhi	r1, [r8, r3]
   15f7c:	add	r3, r4, #2
   15f80:	cmp	r9, r3
   15f84:	movhi	r1, #39	; 0x27
   15f88:	strbhi	r1, [r8, r3]
   15f8c:	add	r3, r4, #3
   15f90:	cmp	r9, r3
   15f94:	add	r4, r3, #1
   15f98:	movhi	r2, #92	; 0x5c
   15f9c:	strbhi	r2, [r8, r3]
   15fa0:	cmp	fp, #0
   15fa4:	beq	163cc <__assert_fail@plt+0x506c>
   15fa8:	ldr	r2, [sp, #28]
   15fac:	ldr	r1, [sp, #40]	; 0x28
   15fb0:	add	r2, r2, #1
   15fb4:	cmp	r2, r1
   15fb8:	bcs	15ff0 <__assert_fail@plt+0x4c90>
   15fbc:	ldr	r1, [sp, #48]	; 0x30
   15fc0:	mov	r6, #48	; 0x30
   15fc4:	ldrb	r2, [r1, r2]
   15fc8:	sub	r2, r2, #48	; 0x30
   15fcc:	cmp	r2, #9
   15fd0:	bhi	163dc <__assert_fail@plt+0x507c>
   15fd4:	cmp	r9, r4
   15fd8:	add	r2, r3, #2
   15fdc:	strbhi	r6, [r8, r4]
   15fe0:	cmp	r9, r2
   15fe4:	add	r4, r3, #3
   15fe8:	movhi	r1, #48	; 0x30
   15fec:	strbhi	r1, [r8, r2]
   15ff0:	mov	r5, #0
   15ff4:	b	163d4 <__assert_fail@plt+0x5074>
   15ff8:	ldr	r3, [sp, #148]	; 0x94
   15ffc:	ands	r5, r3, #1
   16000:	bne	16088 <__assert_fail@plt+0x4d28>
   16004:	mov	fp, #0
   16008:	b	15de8 <__assert_fail@plt+0x4a88>
   1600c:	cmp	r7, #0
   16010:	bne	15b20 <__assert_fail@plt+0x47c0>
   16014:	mov	r5, #0
   16018:	b	16004 <__assert_fail@plt+0x4ca4>
   1601c:	cmp	sl, #2
   16020:	bne	16094 <__assert_fail@plt+0x4d34>
   16024:	cmp	r7, #0
   16028:	bne	15b20 <__assert_fail@plt+0x47c0>
   1602c:	mov	r5, r7
   16030:	mov	fp, r7
   16034:	ldr	r3, [sp, #52]	; 0x34
   16038:	eor	fp, fp, #1
   1603c:	tst	r3, fp
   16040:	beq	1606c <__assert_fail@plt+0x4d0c>
   16044:	cmp	r9, r4
   16048:	movhi	r3, #39	; 0x27
   1604c:	strbhi	r3, [r8, r4]
   16050:	add	r3, r4, #1
   16054:	add	r4, r4, #2
   16058:	cmp	r9, r3
   1605c:	movhi	r2, #39	; 0x27
   16060:	strbhi	r2, [r8, r3]
   16064:	mov	r3, #0
   16068:	str	r3, [sp, #52]	; 0x34
   1606c:	cmp	r9, r4
   16070:	ldr	r3, [sp, #72]	; 0x48
   16074:	strbhi	r6, [r8, r4]
   16078:	cmp	r5, #0
   1607c:	add	r4, r4, #1
   16080:	moveq	r3, #0
   16084:	str	r3, [sp, #72]	; 0x48
   16088:	ldr	r3, [sp, #28]
   1608c:	add	r3, r3, #1
   16090:	b	15848 <__assert_fail@plt+0x44e8>
   16094:	ldr	r3, [sp, #24]
   16098:	and	r3, r3, r7
   1609c:	tst	r5, r3
   160a0:	moveq	r3, r6
   160a4:	beq	15c34 <__assert_fail@plt+0x48d4>
   160a8:	mov	fp, #0
   160ac:	mov	r5, fp
   160b0:	b	16034 <__assert_fail@plt+0x4cd4>
   160b4:	mov	r3, #116	; 0x74
   160b8:	b	15c34 <__assert_fail@plt+0x48d4>
   160bc:	mov	r3, #110	; 0x6e
   160c0:	b	15c34 <__assert_fail@plt+0x48d4>
   160c4:	mov	r3, #97	; 0x61
   160c8:	ldr	r2, [sp, #24]
   160cc:	cmp	r2, #0
   160d0:	beq	16014 <__assert_fail@plt+0x4cb4>
   160d4:	mov	r6, r3
   160d8:	mov	r5, #0
   160dc:	b	15e3c <__assert_fail@plt+0x4adc>
   160e0:	mov	r3, #98	; 0x62
   160e4:	b	160c8 <__assert_fail@plt+0x4d68>
   160e8:	mov	r3, #118	; 0x76
   160ec:	b	160c8 <__assert_fail@plt+0x4d68>
   160f0:	mov	r3, #102	; 0x66
   160f4:	b	160c8 <__assert_fail@plt+0x4d68>
   160f8:	ldr	r3, [sp, #40]	; 0x28
   160fc:	cmn	r3, #1
   16100:	bne	16120 <__assert_fail@plt+0x4dc0>
   16104:	ldr	r3, [sp, #48]	; 0x30
   16108:	ldrb	r3, [r3, #1]
   1610c:	adds	r3, r3, #0
   16110:	movne	r3, #1
   16114:	cmp	r3, #0
   16118:	bne	16014 <__assert_fail@plt+0x4cb4>
   1611c:	b	15f00 <__assert_fail@plt+0x4ba0>
   16120:	ldr	r3, [sp, #40]	; 0x28
   16124:	subs	r3, r3, #1
   16128:	b	16110 <__assert_fail@plt+0x4db0>
   1612c:	mov	r3, #0
   16130:	mov	r2, #0
   16134:	strd	r2, [sp, #96]	; 0x60
   16138:	ldr	r3, [sp, #40]	; 0x28
   1613c:	cmn	r3, #1
   16140:	bne	16150 <__assert_fail@plt+0x4df0>
   16144:	ldr	r0, [sp, #48]	; 0x30
   16148:	bl	111d4 <strlen@plt>
   1614c:	str	r0, [sp, #40]	; 0x28
   16150:	ldr	r5, [sp, #36]	; 0x24
   16154:	mov	r3, #0
   16158:	str	r3, [sp, #56]	; 0x38
   1615c:	ldr	r3, [sp, #28]
   16160:	add	r0, sp, #92	; 0x5c
   16164:	ldr	r1, [sp, #40]	; 0x28
   16168:	ldr	r2, [sp, #56]	; 0x38
   1616c:	add	r2, r3, r2
   16170:	ldr	r3, [sp, #48]	; 0x30
   16174:	add	fp, r3, r2
   16178:	sub	r2, r1, r2
   1617c:	add	r3, sp, #96	; 0x60
   16180:	mov	r1, fp
   16184:	bl	17ea8 <__assert_fail@plt+0x6b48>
   16188:	subs	r2, r0, #0
   1618c:	beq	161cc <__assert_fail@plt+0x4e6c>
   16190:	cmn	r2, #1
   16194:	beq	163a0 <__assert_fail@plt+0x5040>
   16198:	cmn	r2, #2
   1619c:	bne	16310 <__assert_fail@plt+0x4fb0>
   161a0:	ldr	r3, [sp, #28]
   161a4:	ldr	r2, [sp, #56]	; 0x38
   161a8:	add	r3, r3, r2
   161ac:	ldr	r2, [sp, #40]	; 0x28
   161b0:	cmp	r2, r3
   161b4:	bls	163a0 <__assert_fail@plt+0x5040>
   161b8:	ldr	r2, [sp, #56]	; 0x38
   161bc:	ldr	r3, [sp, #80]	; 0x50
   161c0:	ldrb	r5, [r3, r2]
   161c4:	cmp	r5, #0
   161c8:	bne	16300 <__assert_fail@plt+0x4fa0>
   161cc:	ldr	r3, [sp, #56]	; 0x38
   161d0:	cmp	r3, #1
   161d4:	bls	15bf8 <__assert_fail@plt+0x4898>
   161d8:	ldr	r3, [sp, #28]
   161dc:	mov	fp, #0
   161e0:	mov	ip, #92	; 0x5c
   161e4:	ldr	r2, [sp, #56]	; 0x38
   161e8:	add	r3, r3, r2
   161ec:	ldr	r2, [sp, #24]
   161f0:	str	r3, [sp, #36]	; 0x24
   161f4:	eor	r3, r5, #1
   161f8:	and	r3, r3, r2
   161fc:	mov	r2, #39	; 0x27
   16200:	uxtb	r3, r3
   16204:	cmp	r3, #0
   16208:	beq	163a8 <__assert_fail@plt+0x5048>
   1620c:	sub	r0, sl, #2
   16210:	cmp	r7, #0
   16214:	clz	r0, r0
   16218:	lsr	r0, r0, #5
   1621c:	bne	15b1c <__assert_fail@plt+0x47bc>
   16220:	ldr	r1, [sp, #52]	; 0x34
   16224:	eor	r1, r1, #1
   16228:	ands	r1, r0, r1
   1622c:	beq	1625c <__assert_fail@plt+0x4efc>
   16230:	cmp	r9, r4
   16234:	add	r0, r4, #1
   16238:	str	r1, [sp, #52]	; 0x34
   1623c:	strbhi	r2, [r8, r4]
   16240:	cmp	r9, r0
   16244:	movhi	lr, #36	; 0x24
   16248:	strbhi	lr, [r8, r0]
   1624c:	add	r0, r4, #2
   16250:	add	r4, r4, #3
   16254:	cmp	r9, r0
   16258:	strbhi	r2, [r8, r0]
   1625c:	cmp	r9, r4
   16260:	add	r0, r4, #1
   16264:	mov	fp, r3
   16268:	strbhi	ip, [r8, r4]
   1626c:	cmp	r9, r0
   16270:	lsrhi	r1, r6, #6
   16274:	addhi	r1, r1, #48	; 0x30
   16278:	strbhi	r1, [r8, r0]
   1627c:	add	r0, r4, #2
   16280:	add	r4, r4, #3
   16284:	cmp	r9, r0
   16288:	ubfxhi	r1, r6, #3, #3
   1628c:	and	r6, r6, #7
   16290:	add	r6, r6, #48	; 0x30
   16294:	addhi	r1, r1, #48	; 0x30
   16298:	strbhi	r1, [r8, r0]
   1629c:	eor	r0, fp, #1
   162a0:	ldr	r1, [sp, #28]
   162a4:	ldr	lr, [sp, #52]	; 0x34
   162a8:	add	r1, r1, #1
   162ac:	and	r0, r0, lr
   162b0:	ldr	lr, [sp, #36]	; 0x24
   162b4:	cmp	r1, lr
   162b8:	bcs	16034 <__assert_fail@plt+0x4cd4>
   162bc:	cmp	r0, #0
   162c0:	beq	162e4 <__assert_fail@plt+0x4f84>
   162c4:	cmp	r9, r4
   162c8:	add	r0, r4, #1
   162cc:	strbhi	r2, [r8, r4]
   162d0:	cmp	r9, r0
   162d4:	add	r4, r4, #2
   162d8:	strbhi	r2, [r8, r0]
   162dc:	mov	r0, #0
   162e0:	str	r0, [sp, #52]	; 0x34
   162e4:	ldr	r0, [sp, #48]	; 0x30
   162e8:	cmp	r9, r4
   162ec:	str	r1, [sp, #28]
   162f0:	strbhi	r6, [r8, r4]
   162f4:	add	r4, r4, #1
   162f8:	ldrb	r6, [r0, r1]
   162fc:	b	16204 <__assert_fail@plt+0x4ea4>
   16300:	ldr	r3, [sp, #56]	; 0x38
   16304:	add	r3, r3, #1
   16308:	str	r3, [sp, #56]	; 0x38
   1630c:	b	161a0 <__assert_fail@plt+0x4e40>
   16310:	cmp	sl, #2
   16314:	movne	r3, #0
   16318:	andeq	r3, r7, #1
   1631c:	cmp	r3, #0
   16320:	movne	r1, #1
   16324:	bne	16380 <__assert_fail@plt+0x5020>
   16328:	ldr	r0, [sp, #92]	; 0x5c
   1632c:	str	r2, [sp, #84]	; 0x54
   16330:	bl	11108 <iswprint@plt>
   16334:	ldr	r3, [sp, #56]	; 0x38
   16338:	cmp	r0, #0
   1633c:	add	r0, sp, #96	; 0x60
   16340:	moveq	r5, #0
   16344:	ldr	r2, [sp, #84]	; 0x54
   16348:	add	r3, r3, r2
   1634c:	str	r3, [sp, #56]	; 0x38
   16350:	bl	110a8 <mbsinit@plt>
   16354:	cmp	r0, #0
   16358:	beq	1615c <__assert_fail@plt+0x4dfc>
   1635c:	b	161cc <__assert_fail@plt+0x4e6c>
   16360:	ldrb	r3, [fp, #1]!
   16364:	cmp	r3, #94	; 0x5e
   16368:	beq	15c48 <__assert_fail@plt+0x48e8>
   1636c:	bhi	1638c <__assert_fail@plt+0x502c>
   16370:	sub	r3, r3, #91	; 0x5b
   16374:	cmp	r3, #1
   16378:	bls	15c48 <__assert_fail@plt+0x48e8>
   1637c:	add	r1, r1, #1
   16380:	cmp	r1, r2
   16384:	bne	16360 <__assert_fail@plt+0x5000>
   16388:	b	16328 <__assert_fail@plt+0x4fc8>
   1638c:	cmp	r3, #96	; 0x60
   16390:	beq	15c48 <__assert_fail@plt+0x48e8>
   16394:	cmp	r3, #124	; 0x7c
   16398:	bne	1637c <__assert_fail@plt+0x501c>
   1639c:	b	15c48 <__assert_fail@plt+0x48e8>
   163a0:	mov	r5, #0
   163a4:	b	161cc <__assert_fail@plt+0x4e6c>
   163a8:	ldr	r1, [sp, #64]	; 0x40
   163ac:	cmp	r1, #0
   163b0:	beq	1629c <__assert_fail@plt+0x4f3c>
   163b4:	cmp	r9, r4
   163b8:	mov	r1, #0
   163bc:	strbhi	ip, [r8, r4]
   163c0:	add	r4, r4, #1
   163c4:	str	r1, [sp, #64]	; 0x40
   163c8:	b	1629c <__assert_fail@plt+0x4f3c>
   163cc:	mov	r5, fp
   163d0:	ldr	fp, [sp, #24]
   163d4:	mov	r6, #48	; 0x30
   163d8:	b	15de8 <__assert_fail@plt+0x4a88>
   163dc:	mov	r5, #0
   163e0:	b	15de8 <__assert_fail@plt+0x4a88>
   163e4:	mov	r6, r1
   163e8:	b	16014 <__assert_fail@plt+0x4cb4>
   163ec:	mov	r6, r1
   163f0:	b	16004 <__assert_fail@plt+0x4ca4>
   163f4:	ldr	r2, [sp, #28]
   163f8:	ldr	r3, [sp, #40]	; 0x28
   163fc:	subs	r3, r3, r2
   16400:	movne	r3, #1
   16404:	b	1586c <__assert_fail@plt+0x450c>
   16408:	ldr	r3, [sp, #60]	; 0x3c
   1640c:	mov	sl, #2
   16410:	ldr	r7, [sp, #72]	; 0x48
   16414:	adds	r6, r3, #0
   16418:	mov	r5, r3
   1641c:	movne	r6, #1
   16420:	cmp	r9, #0
   16424:	movne	r6, #0
   16428:	cmp	r6, #0
   1642c:	bne	157fc <__assert_fail@plt+0x449c>
   16430:	ldr	r3, [sp, #68]	; 0x44
   16434:	ldr	r2, [sp, #44]	; 0x2c
   16438:	cmp	r2, #0
   1643c:	moveq	r3, #0
   16440:	andne	r3, r3, #1
   16444:	cmp	r3, #0
   16448:	movne	r3, r2
   1644c:	subne	r3, r3, #1
   16450:	bne	16480 <__assert_fail@plt+0x5120>
   16454:	cmp	r9, r4
   16458:	movhi	r3, #0
   1645c:	strbhi	r3, [r8, r4]
   16460:	mov	r0, r4
   16464:	add	sp, sp, #108	; 0x6c
   16468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1646c:	mov	r3, r7
   16470:	b	16434 <__assert_fail@plt+0x50d4>
   16474:	cmp	r9, r4
   16478:	strbhi	r2, [r8, r4]
   1647c:	add	r4, r4, #1
   16480:	ldrb	r2, [r3, #1]!
   16484:	cmp	r2, #0
   16488:	bne	16474 <__assert_fail@plt+0x5114>
   1648c:	b	16454 <__assert_fail@plt+0x50f4>
   16490:	andeq	r9, r1, r0, asr #3
   16494:	ldrdeq	r9, [r1], -r3
   16498:	ldrdeq	r9, [r1], -r1
   1649c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   164a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164a4:	sub	sp, sp, #52	; 0x34
   164a8:	mov	r6, r0
   164ac:	mov	r5, r3
   164b0:	mov	r8, r1
   164b4:	mov	r9, r2
   164b8:	bl	11204 <__errno_location@plt>
   164bc:	ldr	r3, [r0]
   164c0:	cmn	r6, #-2147483647	; 0x80000001
   164c4:	str	r0, [sp, #24]
   164c8:	ldr	r7, [pc, #368]	; 16640 <__assert_fail@plt+0x52e0>
   164cc:	str	r3, [sp, #32]
   164d0:	movne	r3, #0
   164d4:	moveq	r3, #1
   164d8:	orrs	r3, r3, r6, lsr #31
   164dc:	ldr	r4, [r7]
   164e0:	beq	164e8 <__assert_fail@plt+0x5188>
   164e4:	bl	11318 <abort@plt>
   164e8:	ldr	r2, [r7, #4]
   164ec:	cmp	r2, r6
   164f0:	bgt	16560 <__assert_fail@plt+0x5200>
   164f4:	add	sl, r7, #8
   164f8:	mov	r3, #8
   164fc:	cmp	r4, sl
   16500:	add	r1, sp, #44	; 0x2c
   16504:	str	r2, [sp, #44]	; 0x2c
   16508:	sub	r2, r6, r2
   1650c:	movne	r0, r4
   16510:	moveq	r0, #0
   16514:	add	r2, r2, #1
   16518:	str	r3, [sp]
   1651c:	mvn	r3, #-2147483648	; 0x80000000
   16520:	bl	17270 <__assert_fail@plt+0x5f10>
   16524:	cmp	r4, sl
   16528:	mov	fp, r0
   1652c:	str	r0, [r7]
   16530:	ldmeq	r4, {r0, r1}
   16534:	mov	r4, fp
   16538:	ldr	r2, [sp, #44]	; 0x2c
   1653c:	stmeq	fp, {r0, r1}
   16540:	mov	r1, #0
   16544:	ldr	r0, [r7, #4]
   16548:	sub	r2, r2, r0
   1654c:	add	r0, fp, r0, lsl #3
   16550:	lsl	r2, r2, #3
   16554:	bl	1121c <memset@plt>
   16558:	ldr	r3, [sp, #44]	; 0x2c
   1655c:	str	r3, [r7, #4]
   16560:	ldr	r3, [r5, #4]
   16564:	add	sl, r4, r6, lsl #3
   16568:	mov	r2, r8
   1656c:	ldr	fp, [r4, r6, lsl #3]
   16570:	ldr	r7, [sl, #4]
   16574:	orr	r3, r3, #1
   16578:	str	r3, [sp, #28]
   1657c:	add	r3, r5, #8
   16580:	mov	r1, fp
   16584:	str	r3, [sp, #36]	; 0x24
   16588:	mov	r0, r7
   1658c:	ldr	r3, [r5, #44]	; 0x2c
   16590:	str	r3, [sp, #16]
   16594:	ldr	r3, [r5, #40]	; 0x28
   16598:	str	r3, [sp, #12]
   1659c:	add	r3, r5, #8
   165a0:	str	r3, [sp, #8]
   165a4:	ldr	r3, [sp, #28]
   165a8:	str	r3, [sp, #4]
   165ac:	ldr	r3, [r5]
   165b0:	str	r3, [sp]
   165b4:	mov	r3, r9
   165b8:	bl	157b0 <__assert_fail@plt+0x4450>
   165bc:	cmp	fp, r0
   165c0:	bhi	16628 <__assert_fail@plt+0x52c8>
   165c4:	ldr	r3, [pc, #120]	; 16644 <__assert_fail@plt+0x52e4>
   165c8:	add	fp, r0, #1
   165cc:	str	fp, [r4, r6, lsl #3]
   165d0:	cmp	r7, r3
   165d4:	beq	165e0 <__assert_fail@plt+0x5280>
   165d8:	mov	r0, r7
   165dc:	bl	1297c <__assert_fail@plt+0x161c>
   165e0:	mov	r0, fp
   165e4:	bl	17160 <__assert_fail@plt+0x5e00>
   165e8:	ldr	r3, [r5, #44]	; 0x2c
   165ec:	mov	r2, r8
   165f0:	mov	r1, fp
   165f4:	str	r0, [sl, #4]
   165f8:	mov	r7, r0
   165fc:	str	r3, [sp, #16]
   16600:	ldr	r3, [r5, #40]	; 0x28
   16604:	str	r3, [sp, #12]
   16608:	add	r3, r5, #8
   1660c:	str	r3, [sp, #8]
   16610:	ldr	r3, [sp, #28]
   16614:	str	r3, [sp, #4]
   16618:	ldr	r3, [r5]
   1661c:	str	r3, [sp]
   16620:	mov	r3, r9
   16624:	bl	157b0 <__assert_fail@plt+0x4450>
   16628:	ldr	r3, [sp, #24]
   1662c:	mov	r0, r7
   16630:	ldr	r2, [sp, #32]
   16634:	str	r2, [r3]
   16638:	add	sp, sp, #52	; 0x34
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	andeq	sl, r2, r0, asr #2
   16644:	andeq	sl, r2, r4, asr #3
   16648:	push	{r4, r5, r6, lr}
   1664c:	mov	r5, r0
   16650:	bl	11204 <__errno_location@plt>
   16654:	mov	r4, r0
   16658:	cmp	r5, #0
   1665c:	ldr	r0, [pc, #20]	; 16678 <__assert_fail@plt+0x5318>
   16660:	mov	r1, #48	; 0x30
   16664:	movne	r0, r5
   16668:	ldr	r6, [r4]
   1666c:	bl	17360 <__assert_fail@plt+0x6000>
   16670:	str	r6, [r4]
   16674:	pop	{r4, r5, r6, pc}
   16678:	andeq	sl, r2, r4, asr #5
   1667c:	ldr	r3, [pc, #12]	; 16690 <__assert_fail@plt+0x5330>
   16680:	cmp	r0, #0
   16684:	moveq	r0, r3
   16688:	ldr	r0, [r0]
   1668c:	bx	lr
   16690:	andeq	sl, r2, r4, asr #5
   16694:	ldr	r3, [pc, #12]	; 166a8 <__assert_fail@plt+0x5348>
   16698:	cmp	r0, #0
   1669c:	moveq	r0, r3
   166a0:	str	r1, [r0]
   166a4:	bx	lr
   166a8:	andeq	sl, r2, r4, asr #5
   166ac:	ldr	r3, [pc, #52]	; 166e8 <__assert_fail@plt+0x5388>
   166b0:	cmp	r0, #0
   166b4:	push	{lr}		; (str lr, [sp, #-4]!)
   166b8:	lsr	lr, r1, #5
   166bc:	and	r1, r1, #31
   166c0:	moveq	r0, r3
   166c4:	add	r3, r0, #8
   166c8:	ldr	ip, [r3, lr, lsl #2]
   166cc:	lsr	r0, ip, r1
   166d0:	eor	r2, r2, r0
   166d4:	and	r0, r0, #1
   166d8:	and	r2, r2, #1
   166dc:	eor	r1, ip, r2, lsl r1
   166e0:	str	r1, [r3, lr, lsl #2]
   166e4:	pop	{pc}		; (ldr pc, [sp], #4)
   166e8:	andeq	sl, r2, r4, asr #5
   166ec:	ldr	r3, [pc, #16]	; 16704 <__assert_fail@plt+0x53a4>
   166f0:	cmp	r0, #0
   166f4:	movne	r3, r0
   166f8:	ldr	r0, [r3, #4]
   166fc:	str	r1, [r3, #4]
   16700:	bx	lr
   16704:	andeq	sl, r2, r4, asr #5
   16708:	ldr	r3, [pc, #44]	; 1673c <__assert_fail@plt+0x53dc>
   1670c:	cmp	r0, #0
   16710:	moveq	r0, r3
   16714:	mov	r3, #10
   16718:	cmp	r2, #0
   1671c:	cmpne	r1, #0
   16720:	str	r3, [r0]
   16724:	bne	16730 <__assert_fail@plt+0x53d0>
   16728:	push	{r4, lr}
   1672c:	bl	11318 <abort@plt>
   16730:	str	r1, [r0, #40]	; 0x28
   16734:	str	r2, [r0, #44]	; 0x2c
   16738:	bx	lr
   1673c:	andeq	sl, r2, r4, asr #5
   16740:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16744:	sub	sp, sp, #24
   16748:	mov	sl, r3
   1674c:	mov	r7, r0
   16750:	mov	r8, r1
   16754:	mov	r9, r2
   16758:	ldr	r4, [sp, #56]	; 0x38
   1675c:	ldr	r3, [pc, #88]	; 167bc <__assert_fail@plt+0x545c>
   16760:	cmp	r4, #0
   16764:	moveq	r4, r3
   16768:	bl	11204 <__errno_location@plt>
   1676c:	ldr	r3, [r4, #44]	; 0x2c
   16770:	mov	r5, r0
   16774:	mov	r2, r9
   16778:	mov	r1, r8
   1677c:	mov	r0, r7
   16780:	ldr	r6, [r5]
   16784:	str	r3, [sp, #16]
   16788:	ldr	r3, [r4, #40]	; 0x28
   1678c:	str	r3, [sp, #12]
   16790:	add	r3, r4, #8
   16794:	str	r3, [sp, #8]
   16798:	ldr	r3, [r4, #4]
   1679c:	str	r3, [sp, #4]
   167a0:	ldr	r3, [r4]
   167a4:	str	r3, [sp]
   167a8:	mov	r3, sl
   167ac:	bl	157b0 <__assert_fail@plt+0x4450>
   167b0:	str	r6, [r5]
   167b4:	add	sp, sp, #24
   167b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167bc:	andeq	sl, r2, r4, asr #5
   167c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c4:	cmp	r3, #0
   167c8:	sub	sp, sp, #44	; 0x2c
   167cc:	mov	r6, r2
   167d0:	mov	sl, r1
   167d4:	mov	r9, r0
   167d8:	ldr	r4, [pc, #176]	; 16890 <__assert_fail@plt+0x5530>
   167dc:	movne	r4, r3
   167e0:	bl	11204 <__errno_location@plt>
   167e4:	ldr	r3, [r0]
   167e8:	mov	r1, #0
   167ec:	mov	r2, r9
   167f0:	mov	r8, r0
   167f4:	mov	r0, r1
   167f8:	ldr	r5, [r4, #4]
   167fc:	add	fp, r4, #8
   16800:	str	r3, [sp, #28]
   16804:	ldr	r3, [r4, #44]	; 0x2c
   16808:	cmp	r6, #0
   1680c:	orreq	r5, r5, #1
   16810:	str	r3, [sp, #16]
   16814:	ldr	r3, [r4, #40]	; 0x28
   16818:	stmib	sp, {r5, fp}
   1681c:	str	r3, [sp, #12]
   16820:	ldr	r3, [r4]
   16824:	str	r3, [sp]
   16828:	mov	r3, sl
   1682c:	bl	157b0 <__assert_fail@plt+0x4450>
   16830:	add	r1, r0, #1
   16834:	mov	r7, r0
   16838:	mov	r0, r1
   1683c:	str	r1, [sp, #36]	; 0x24
   16840:	bl	17160 <__assert_fail@plt+0x5e00>
   16844:	ldr	r3, [r4, #44]	; 0x2c
   16848:	mov	r2, r9
   1684c:	ldr	r1, [sp, #36]	; 0x24
   16850:	str	r3, [sp, #16]
   16854:	ldr	r3, [r4, #40]	; 0x28
   16858:	stmib	sp, {r5, fp}
   1685c:	str	r0, [sp, #32]
   16860:	str	r3, [sp, #12]
   16864:	ldr	r3, [r4]
   16868:	str	r3, [sp]
   1686c:	mov	r3, sl
   16870:	bl	157b0 <__assert_fail@plt+0x4450>
   16874:	ldr	r3, [sp, #28]
   16878:	cmp	r6, #0
   1687c:	ldr	r0, [sp, #32]
   16880:	str	r3, [r8]
   16884:	strne	r7, [r6]
   16888:	add	sp, sp, #44	; 0x2c
   1688c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16890:	andeq	sl, r2, r4, asr #5
   16894:	mov	r3, r2
   16898:	mov	r2, #0
   1689c:	b	167c0 <__assert_fail@plt+0x5460>
   168a0:	push	{r4, r5, r6, r7, r8, lr}
   168a4:	mov	r6, #1
   168a8:	ldr	r4, [pc, #100]	; 16914 <__assert_fail@plt+0x55b4>
   168ac:	ldr	r5, [r4]
   168b0:	add	r7, r5, #4
   168b4:	ldr	r3, [r4, #4]
   168b8:	cmp	r3, r6
   168bc:	bgt	16904 <__assert_fail@plt+0x55a4>
   168c0:	ldr	r6, [pc, #80]	; 16918 <__assert_fail@plt+0x55b8>
   168c4:	ldr	r0, [r5, #4]
   168c8:	cmp	r0, r6
   168cc:	beq	168e0 <__assert_fail@plt+0x5580>
   168d0:	bl	1297c <__assert_fail@plt+0x161c>
   168d4:	mov	r3, #256	; 0x100
   168d8:	str	r3, [r4, #8]
   168dc:	str	r6, [r4, #12]
   168e0:	ldr	r6, [pc, #52]	; 1691c <__assert_fail@plt+0x55bc>
   168e4:	cmp	r5, r6
   168e8:	beq	168f8 <__assert_fail@plt+0x5598>
   168ec:	mov	r0, r5
   168f0:	bl	1297c <__assert_fail@plt+0x161c>
   168f4:	str	r6, [r4]
   168f8:	mov	r3, #1
   168fc:	str	r3, [r4, #4]
   16900:	pop	{r4, r5, r6, r7, r8, pc}
   16904:	ldr	r0, [r7, r6, lsl #3]
   16908:	add	r6, r6, #1
   1690c:	bl	1297c <__assert_fail@plt+0x161c>
   16910:	b	168b4 <__assert_fail@plt+0x5554>
   16914:	andeq	sl, r2, r0, asr #2
   16918:	andeq	sl, r2, r4, asr #3
   1691c:	andeq	sl, r2, r8, asr #2
   16920:	ldr	r3, [pc, #4]	; 1692c <__assert_fail@plt+0x55cc>
   16924:	mvn	r2, #0
   16928:	b	164a0 <__assert_fail@plt+0x5140>
   1692c:	andeq	sl, r2, r4, asr #5
   16930:	ldr	r3, [pc]	; 16938 <__assert_fail@plt+0x55d8>
   16934:	b	164a0 <__assert_fail@plt+0x5140>
   16938:	andeq	sl, r2, r4, asr #5
   1693c:	mov	r1, r0
   16940:	mov	r0, #0
   16944:	b	16920 <__assert_fail@plt+0x55c0>
   16948:	mov	r2, r1
   1694c:	mov	r1, r0
   16950:	mov	r0, #0
   16954:	b	16930 <__assert_fail@plt+0x55d0>
   16958:	push	{r4, r5, lr}
   1695c:	sub	sp, sp, #52	; 0x34
   16960:	mov	r5, r2
   16964:	mov	r4, r0
   16968:	mov	r0, sp
   1696c:	bl	15654 <__assert_fail@plt+0x42f4>
   16970:	mov	r3, sp
   16974:	mvn	r2, #0
   16978:	mov	r1, r5
   1697c:	mov	r0, r4
   16980:	bl	164a0 <__assert_fail@plt+0x5140>
   16984:	add	sp, sp, #52	; 0x34
   16988:	pop	{r4, r5, pc}
   1698c:	push	{r4, r5, r6, lr}
   16990:	sub	sp, sp, #48	; 0x30
   16994:	mov	r5, r2
   16998:	mov	r6, r3
   1699c:	mov	r4, r0
   169a0:	mov	r0, sp
   169a4:	bl	15654 <__assert_fail@plt+0x42f4>
   169a8:	mov	r3, sp
   169ac:	mov	r2, r6
   169b0:	mov	r1, r5
   169b4:	mov	r0, r4
   169b8:	bl	164a0 <__assert_fail@plt+0x5140>
   169bc:	add	sp, sp, #48	; 0x30
   169c0:	pop	{r4, r5, r6, pc}
   169c4:	mov	r2, r1
   169c8:	mov	r1, r0
   169cc:	mov	r0, #0
   169d0:	b	16958 <__assert_fail@plt+0x55f8>
   169d4:	mov	r3, r2
   169d8:	mov	r2, r1
   169dc:	mov	r1, r0
   169e0:	mov	r0, #0
   169e4:	b	1698c <__assert_fail@plt+0x562c>
   169e8:	push	{r4, r5, r6, lr}
   169ec:	mov	r4, r0
   169f0:	mov	r5, r1
   169f4:	mov	r6, r2
   169f8:	sub	sp, sp, #48	; 0x30
   169fc:	mov	ip, sp
   16a00:	ldr	lr, [pc, #64]	; 16a48 <__assert_fail@plt+0x56e8>
   16a04:	ldm	lr!, {r0, r1, r2, r3}
   16a08:	stmia	ip!, {r0, r1, r2, r3}
   16a0c:	ldm	lr!, {r0, r1, r2, r3}
   16a10:	stmia	ip!, {r0, r1, r2, r3}
   16a14:	ldm	lr, {r0, r1, r2, r3}
   16a18:	stm	ip, {r0, r1, r2, r3}
   16a1c:	mov	r1, r6
   16a20:	mov	r2, #1
   16a24:	mov	r0, sp
   16a28:	bl	166ac <__assert_fail@plt+0x534c>
   16a2c:	mov	r3, sp
   16a30:	mov	r2, r5
   16a34:	mov	r1, r4
   16a38:	mov	r0, #0
   16a3c:	bl	164a0 <__assert_fail@plt+0x5140>
   16a40:	add	sp, sp, #48	; 0x30
   16a44:	pop	{r4, r5, r6, pc}
   16a48:	andeq	sl, r2, r4, asr #5
   16a4c:	mov	r2, r1
   16a50:	mvn	r1, #0
   16a54:	b	169e8 <__assert_fail@plt+0x5688>
   16a58:	mov	r1, #58	; 0x3a
   16a5c:	b	16a4c <__assert_fail@plt+0x56ec>
   16a60:	mov	r2, #58	; 0x3a
   16a64:	b	169e8 <__assert_fail@plt+0x5688>
   16a68:	push	{r4, r5, lr}
   16a6c:	sub	sp, sp, #100	; 0x64
   16a70:	mov	r4, r0
   16a74:	mov	r0, sp
   16a78:	mov	r5, r2
   16a7c:	bl	15654 <__assert_fail@plt+0x42f4>
   16a80:	mov	ip, sp
   16a84:	add	lr, sp, #48	; 0x30
   16a88:	ldm	ip!, {r0, r1, r2, r3}
   16a8c:	stmia	lr!, {r0, r1, r2, r3}
   16a90:	ldm	ip!, {r0, r1, r2, r3}
   16a94:	stmia	lr!, {r0, r1, r2, r3}
   16a98:	ldm	ip, {r0, r1, r2, r3}
   16a9c:	stm	lr, {r0, r1, r2, r3}
   16aa0:	mov	r2, #1
   16aa4:	mov	r1, #58	; 0x3a
   16aa8:	add	r0, sp, #48	; 0x30
   16aac:	bl	166ac <__assert_fail@plt+0x534c>
   16ab0:	add	r3, sp, #48	; 0x30
   16ab4:	mvn	r2, #0
   16ab8:	mov	r1, r5
   16abc:	mov	r0, r4
   16ac0:	bl	164a0 <__assert_fail@plt+0x5140>
   16ac4:	add	sp, sp, #100	; 0x64
   16ac8:	pop	{r4, r5, pc}
   16acc:	push	{r4, r5, r6, r7, lr}
   16ad0:	mov	r4, r0
   16ad4:	mov	r6, r1
   16ad8:	mov	r7, r2
   16adc:	mov	r5, r3
   16ae0:	sub	sp, sp, #52	; 0x34
   16ae4:	ldr	lr, [pc, #68]	; 16b30 <__assert_fail@plt+0x57d0>
   16ae8:	mov	ip, sp
   16aec:	ldm	lr!, {r0, r1, r2, r3}
   16af0:	stmia	ip!, {r0, r1, r2, r3}
   16af4:	ldm	lr!, {r0, r1, r2, r3}
   16af8:	stmia	ip!, {r0, r1, r2, r3}
   16afc:	ldm	lr, {r0, r1, r2, r3}
   16b00:	stm	ip, {r0, r1, r2, r3}
   16b04:	mov	r2, r7
   16b08:	mov	r1, r6
   16b0c:	mov	r0, sp
   16b10:	bl	16708 <__assert_fail@plt+0x53a8>
   16b14:	ldr	r2, [sp, #72]	; 0x48
   16b18:	mov	r3, sp
   16b1c:	mov	r1, r5
   16b20:	mov	r0, r4
   16b24:	bl	164a0 <__assert_fail@plt+0x5140>
   16b28:	add	sp, sp, #52	; 0x34
   16b2c:	pop	{r4, r5, r6, r7, pc}
   16b30:	andeq	sl, r2, r4, asr #5
   16b34:	mvn	ip, #0
   16b38:	push	{r0, r1, r2, lr}
   16b3c:	str	ip, [sp]
   16b40:	bl	16acc <__assert_fail@plt+0x576c>
   16b44:	add	sp, sp, #12
   16b48:	pop	{pc}		; (ldr pc, [sp], #4)
   16b4c:	mov	r3, r2
   16b50:	mov	r2, r1
   16b54:	mov	r1, r0
   16b58:	mov	r0, #0
   16b5c:	b	16b34 <__assert_fail@plt+0x57d4>
   16b60:	push	{r0, r1, r2, lr}
   16b64:	str	r3, [sp]
   16b68:	mov	r3, r2
   16b6c:	mov	r2, r1
   16b70:	mov	r1, r0
   16b74:	mov	r0, #0
   16b78:	bl	16acc <__assert_fail@plt+0x576c>
   16b7c:	add	sp, sp, #12
   16b80:	pop	{pc}		; (ldr pc, [sp], #4)
   16b84:	ldr	r3, [pc]	; 16b8c <__assert_fail@plt+0x582c>
   16b88:	b	164a0 <__assert_fail@plt+0x5140>
   16b8c:	andeq	sl, r2, r0, asr r1
   16b90:	mov	r2, r1
   16b94:	mov	r1, r0
   16b98:	mov	r0, #0
   16b9c:	b	16b84 <__assert_fail@plt+0x5824>
   16ba0:	mvn	r2, #0
   16ba4:	b	16b84 <__assert_fail@plt+0x5824>
   16ba8:	mov	r1, r0
   16bac:	mov	r0, #0
   16bb0:	b	16ba0 <__assert_fail@plt+0x5840>
   16bb4:	push	{r4, lr}
   16bb8:	sub	sp, sp, #104	; 0x68
   16bbc:	mov	r4, r0
   16bc0:	mov	r1, sp
   16bc4:	ldr	r0, [pc, #36]	; 16bf0 <__assert_fail@plt+0x5890>
   16bc8:	bl	18220 <__assert_fail@plt+0x6ec0>
   16bcc:	cmp	r0, #0
   16bd0:	ldrdeq	r2, [sp, #96]	; 0x60
   16bd4:	movne	r4, #0
   16bd8:	mov	r0, r4
   16bdc:	strdeq	r2, [r4]
   16be0:	ldrdeq	r2, [sp]
   16be4:	strdeq	r2, [r4, #8]
   16be8:	add	sp, sp, #104	; 0x68
   16bec:	pop	{r4, pc}
   16bf0:	andeq	r9, r1, r0, lsl #10
   16bf4:	cmp	r0, #2
   16bf8:	push	{r4, r5, r6, r7, r8, lr}
   16bfc:	mov	r4, r0
   16c00:	bhi	16c28 <__assert_fail@plt+0x58c8>
   16c04:	bl	17f24 <__assert_fail@plt+0x6bc4>
   16c08:	mov	r6, r0
   16c0c:	bl	11204 <__errno_location@plt>
   16c10:	mov	r5, r0
   16c14:	mov	r0, r4
   16c18:	ldr	r7, [r5]
   16c1c:	mov	r4, r6
   16c20:	bl	11324 <close@plt>
   16c24:	str	r7, [r5]
   16c28:	mov	r0, r4
   16c2c:	pop	{r4, r5, r6, r7, r8, pc}
   16c30:	push	{r4, r5, r6, lr}
   16c34:	cmp	r1, #0
   16c38:	sub	sp, sp, #32
   16c3c:	mov	r5, r0
   16c40:	ldr	r4, [sp, #48]	; 0x30
   16c44:	ldr	r6, [sp, #52]	; 0x34
   16c48:	beq	16cfc <__assert_fail@plt+0x599c>
   16c4c:	strd	r2, [sp]
   16c50:	mov	r3, r1
   16c54:	mov	r1, #1
   16c58:	ldr	r2, [pc, #856]	; 16fb8 <__assert_fail@plt+0x5c58>
   16c5c:	bl	1124c <__fprintf_chk@plt>
   16c60:	mov	r2, #5
   16c64:	ldr	r1, [pc, #848]	; 16fbc <__assert_fail@plt+0x5c5c>
   16c68:	mov	r0, #0
   16c6c:	bl	110d8 <dcgettext@plt>
   16c70:	movw	r3, #2022	; 0x7e6
   16c74:	ldr	r2, [pc, #836]	; 16fc0 <__assert_fail@plt+0x5c60>
   16c78:	mov	r1, #1
   16c7c:	str	r3, [sp]
   16c80:	mov	r3, r0
   16c84:	mov	r0, r5
   16c88:	bl	1124c <__fprintf_chk@plt>
   16c8c:	mov	r1, r5
   16c90:	mov	r0, #10
   16c94:	bl	110cc <fputc_unlocked@plt>
   16c98:	mov	r2, #5
   16c9c:	ldr	r1, [pc, #800]	; 16fc4 <__assert_fail@plt+0x5c64>
   16ca0:	mov	r0, #0
   16ca4:	bl	110d8 <dcgettext@plt>
   16ca8:	mov	r2, r0
   16cac:	mov	r1, #1
   16cb0:	ldr	r3, [pc, #784]	; 16fc8 <__assert_fail@plt+0x5c68>
   16cb4:	mov	r0, r5
   16cb8:	bl	1124c <__fprintf_chk@plt>
   16cbc:	mov	r1, r5
   16cc0:	mov	r0, #10
   16cc4:	bl	110cc <fputc_unlocked@plt>
   16cc8:	cmp	r6, #9
   16ccc:	ldrls	pc, [pc, r6, lsl #2]
   16cd0:	b	16fac <__assert_fail@plt+0x5c4c>
   16cd4:	andeq	r6, r1, ip, ror #27
   16cd8:	andeq	r6, r1, r4, lsl sp
   16cdc:	andeq	r6, r1, r0, asr #26
   16ce0:	andeq	r6, r1, r4, ror sp
   16ce4:			; <UNDEFINED> instruction: 0x00016db0
   16ce8:	strdeq	r6, [r1], -r4
   16cec:	andeq	r6, r1, ip, lsr lr
   16cf0:	andeq	r6, r1, ip, lsl #29
   16cf4:	andeq	r6, r1, r4, ror #29
   16cf8:	andeq	r6, r1, r4, asr #30
   16cfc:	mov	r1, #1
   16d00:	str	r3, [sp]
   16d04:	mov	r3, r2
   16d08:	ldr	r2, [pc, #700]	; 16fcc <__assert_fail@plt+0x5c6c>
   16d0c:	bl	1124c <__fprintf_chk@plt>
   16d10:	b	16c60 <__assert_fail@plt+0x5900>
   16d14:	mov	r2, #5
   16d18:	ldr	r1, [pc, #688]	; 16fd0 <__assert_fail@plt+0x5c70>
   16d1c:	mov	r0, #0
   16d20:	bl	110d8 <dcgettext@plt>
   16d24:	ldr	r3, [r4]
   16d28:	mov	r2, r0
   16d2c:	mov	r1, #1
   16d30:	mov	r0, r5
   16d34:	add	sp, sp, #32
   16d38:	pop	{r4, r5, r6, lr}
   16d3c:	b	1124c <__fprintf_chk@plt>
   16d40:	mov	r2, #5
   16d44:	ldr	r1, [pc, #648]	; 16fd4 <__assert_fail@plt+0x5c74>
   16d48:	mov	r0, #0
   16d4c:	bl	110d8 <dcgettext@plt>
   16d50:	ldr	r3, [r4, #4]
   16d54:	mov	r2, r0
   16d58:	mov	r1, #1
   16d5c:	mov	r0, r5
   16d60:	str	r3, [sp, #48]	; 0x30
   16d64:	ldr	r3, [r4]
   16d68:	add	sp, sp, #32
   16d6c:	pop	{r4, r5, r6, lr}
   16d70:	b	1124c <__fprintf_chk@plt>
   16d74:	mov	r2, #5
   16d78:	ldr	r1, [pc, #600]	; 16fd8 <__assert_fail@plt+0x5c78>
   16d7c:	mov	r0, #0
   16d80:	bl	110d8 <dcgettext@plt>
   16d84:	ldr	r3, [r4, #8]
   16d88:	mov	r2, r0
   16d8c:	mov	r1, #1
   16d90:	mov	r0, r5
   16d94:	str	r3, [sp, #52]	; 0x34
   16d98:	ldr	r3, [r4, #4]
   16d9c:	str	r3, [sp, #48]	; 0x30
   16da0:	ldr	r3, [r4]
   16da4:	add	sp, sp, #32
   16da8:	pop	{r4, r5, r6, lr}
   16dac:	b	1124c <__fprintf_chk@plt>
   16db0:	mov	r2, #5
   16db4:	ldr	r1, [pc, #544]	; 16fdc <__assert_fail@plt+0x5c7c>
   16db8:	mov	r0, #0
   16dbc:	bl	110d8 <dcgettext@plt>
   16dc0:	ldr	r3, [r4, #12]
   16dc4:	mov	r2, r0
   16dc8:	mov	r1, #1
   16dcc:	mov	r0, r5
   16dd0:	str	r3, [sp, #8]
   16dd4:	ldr	r3, [r4, #8]
   16dd8:	str	r3, [sp, #4]
   16ddc:	ldr	r3, [r4, #4]
   16de0:	str	r3, [sp]
   16de4:	ldr	r3, [r4]
   16de8:	bl	1124c <__fprintf_chk@plt>
   16dec:	add	sp, sp, #32
   16df0:	pop	{r4, r5, r6, pc}
   16df4:	mov	r2, #5
   16df8:	ldr	r1, [pc, #480]	; 16fe0 <__assert_fail@plt+0x5c80>
   16dfc:	mov	r0, #0
   16e00:	bl	110d8 <dcgettext@plt>
   16e04:	ldr	r3, [r4, #16]
   16e08:	mov	r2, r0
   16e0c:	mov	r1, #1
   16e10:	mov	r0, r5
   16e14:	str	r3, [sp, #12]
   16e18:	ldr	r3, [r4, #12]
   16e1c:	str	r3, [sp, #8]
   16e20:	ldr	r3, [r4, #8]
   16e24:	str	r3, [sp, #4]
   16e28:	ldr	r3, [r4, #4]
   16e2c:	str	r3, [sp]
   16e30:	ldr	r3, [r4]
   16e34:	bl	1124c <__fprintf_chk@plt>
   16e38:	b	16dec <__assert_fail@plt+0x5a8c>
   16e3c:	mov	r2, #5
   16e40:	ldr	r1, [pc, #412]	; 16fe4 <__assert_fail@plt+0x5c84>
   16e44:	mov	r0, #0
   16e48:	bl	110d8 <dcgettext@plt>
   16e4c:	ldr	r3, [r4, #20]
   16e50:	mov	r2, r0
   16e54:	mov	r1, #1
   16e58:	mov	r0, r5
   16e5c:	str	r3, [sp, #16]
   16e60:	ldr	r3, [r4, #16]
   16e64:	str	r3, [sp, #12]
   16e68:	ldr	r3, [r4, #12]
   16e6c:	str	r3, [sp, #8]
   16e70:	ldr	r3, [r4, #8]
   16e74:	str	r3, [sp, #4]
   16e78:	ldr	r3, [r4, #4]
   16e7c:	str	r3, [sp]
   16e80:	ldr	r3, [r4]
   16e84:	bl	1124c <__fprintf_chk@plt>
   16e88:	b	16dec <__assert_fail@plt+0x5a8c>
   16e8c:	mov	r2, #5
   16e90:	ldr	r1, [pc, #336]	; 16fe8 <__assert_fail@plt+0x5c88>
   16e94:	mov	r0, #0
   16e98:	bl	110d8 <dcgettext@plt>
   16e9c:	ldr	r3, [r4, #24]
   16ea0:	mov	r2, r0
   16ea4:	mov	r1, #1
   16ea8:	mov	r0, r5
   16eac:	str	r3, [sp, #20]
   16eb0:	ldr	r3, [r4, #20]
   16eb4:	str	r3, [sp, #16]
   16eb8:	ldr	r3, [r4, #16]
   16ebc:	str	r3, [sp, #12]
   16ec0:	ldr	r3, [r4, #12]
   16ec4:	str	r3, [sp, #8]
   16ec8:	ldr	r3, [r4, #8]
   16ecc:	str	r3, [sp, #4]
   16ed0:	ldr	r3, [r4, #4]
   16ed4:	str	r3, [sp]
   16ed8:	ldr	r3, [r4]
   16edc:	bl	1124c <__fprintf_chk@plt>
   16ee0:	b	16dec <__assert_fail@plt+0x5a8c>
   16ee4:	mov	r2, #5
   16ee8:	ldr	r1, [pc, #252]	; 16fec <__assert_fail@plt+0x5c8c>
   16eec:	mov	r0, #0
   16ef0:	bl	110d8 <dcgettext@plt>
   16ef4:	ldr	r3, [r4, #28]
   16ef8:	mov	r2, r0
   16efc:	mov	r1, #1
   16f00:	mov	r0, r5
   16f04:	str	r3, [sp, #24]
   16f08:	ldr	r3, [r4, #24]
   16f0c:	str	r3, [sp, #20]
   16f10:	ldr	r3, [r4, #20]
   16f14:	str	r3, [sp, #16]
   16f18:	ldr	r3, [r4, #16]
   16f1c:	str	r3, [sp, #12]
   16f20:	ldr	r3, [r4, #12]
   16f24:	str	r3, [sp, #8]
   16f28:	ldr	r3, [r4, #8]
   16f2c:	str	r3, [sp, #4]
   16f30:	ldr	r3, [r4, #4]
   16f34:	str	r3, [sp]
   16f38:	ldr	r3, [r4]
   16f3c:	bl	1124c <__fprintf_chk@plt>
   16f40:	b	16dec <__assert_fail@plt+0x5a8c>
   16f44:	ldr	r1, [pc, #164]	; 16ff0 <__assert_fail@plt+0x5c90>
   16f48:	mov	r2, #5
   16f4c:	mov	r0, #0
   16f50:	bl	110d8 <dcgettext@plt>
   16f54:	ldr	r3, [r4, #32]
   16f58:	mov	r2, r0
   16f5c:	mov	r1, #1
   16f60:	mov	r0, r5
   16f64:	str	r3, [sp, #28]
   16f68:	ldr	r3, [r4, #28]
   16f6c:	str	r3, [sp, #24]
   16f70:	ldr	r3, [r4, #24]
   16f74:	str	r3, [sp, #20]
   16f78:	ldr	r3, [r4, #20]
   16f7c:	str	r3, [sp, #16]
   16f80:	ldr	r3, [r4, #16]
   16f84:	str	r3, [sp, #12]
   16f88:	ldr	r3, [r4, #12]
   16f8c:	str	r3, [sp, #8]
   16f90:	ldr	r3, [r4, #8]
   16f94:	str	r3, [sp, #4]
   16f98:	ldr	r3, [r4, #4]
   16f9c:	str	r3, [sp]
   16fa0:	ldr	r3, [r4]
   16fa4:	bl	1124c <__fprintf_chk@plt>
   16fa8:	b	16dec <__assert_fail@plt+0x5a8c>
   16fac:	mov	r2, #5
   16fb0:	ldr	r1, [pc, #60]	; 16ff4 <__assert_fail@plt+0x5c94>
   16fb4:	b	16f4c <__assert_fail@plt+0x5bec>
   16fb8:	andeq	r9, r1, r1, lsr #4
   16fbc:	andeq	r9, r1, r4, lsr r2
   16fc0:	andeq	r9, r1, r2, lsl #10
   16fc4:	andeq	r9, r1, r8, lsr r2
   16fc8:	andeq	r9, r1, r3, ror #5
   16fcc:	andeq	r9, r1, sp, lsr #4
   16fd0:	andeq	r9, r1, r5, lsl #6
   16fd4:	andeq	r9, r1, r5, lsl r3
   16fd8:	andeq	r9, r1, ip, lsr #6
   16fdc:	andeq	r9, r1, r8, asr #6
   16fe0:	andeq	r9, r1, r8, ror #6
   16fe4:	andeq	r9, r1, ip, lsl #7
   16fe8:			; <UNDEFINED> instruction: 0x000193b4
   16fec:	andeq	r9, r1, r0, ror #7
   16ff0:	andeq	r9, r1, r0, lsl r4
   16ff4:	andeq	r9, r1, r4, asr #8
   16ff8:	push	{r0, r1, r4, lr}
   16ffc:	mov	ip, #0
   17000:	ldr	lr, [sp, #16]
   17004:	ldr	r4, [lr, ip, lsl #2]
   17008:	cmp	r4, #0
   1700c:	bne	17024 <__assert_fail@plt+0x5cc4>
   17010:	str	lr, [sp]
   17014:	str	ip, [sp, #4]
   17018:	bl	16c30 <__assert_fail@plt+0x58d0>
   1701c:	add	sp, sp, #8
   17020:	pop	{r4, pc}
   17024:	add	ip, ip, #1
   17028:	b	17004 <__assert_fail@plt+0x5ca4>
   1702c:	push	{r4, r5, r6, lr}
   17030:	sub	sp, sp, #48	; 0x30
   17034:	mov	ip, #0
   17038:	add	lr, sp, #8
   1703c:	mov	r5, lr
   17040:	ldr	r6, [sp, #64]	; 0x40
   17044:	ldr	r4, [r6, ip, lsl #2]
   17048:	cmp	r4, #0
   1704c:	str	r4, [lr], #4
   17050:	beq	17060 <__assert_fail@plt+0x5d00>
   17054:	add	ip, ip, #1
   17058:	cmp	ip, #10
   1705c:	bne	17044 <__assert_fail@plt+0x5ce4>
   17060:	stm	sp, {r5, ip}
   17064:	bl	16c30 <__assert_fail@plt+0x58d0>
   17068:	add	sp, sp, #48	; 0x30
   1706c:	pop	{r4, r5, r6, pc}
   17070:	push	{r3}		; (str r3, [sp, #-4]!)
   17074:	push	{r0, r1, r2, r3, lr}
   17078:	add	r3, sp, #24
   1707c:	str	r3, [sp]
   17080:	str	r3, [sp, #12]
   17084:	ldr	r3, [sp, #20]
   17088:	bl	1702c <__assert_fail@plt+0x5ccc>
   1708c:	add	sp, sp, #16
   17090:	pop	{lr}		; (ldr lr, [sp], #4)
   17094:	add	sp, sp, #4
   17098:	bx	lr
   1709c:	ldr	r3, [pc, #116]	; 17118 <__assert_fail@plt+0x5db8>
   170a0:	mov	r0, #10
   170a4:	push	{r4, lr}
   170a8:	ldr	r1, [r3]
   170ac:	bl	110cc <fputc_unlocked@plt>
   170b0:	mov	r2, #5
   170b4:	ldr	r1, [pc, #96]	; 1711c <__assert_fail@plt+0x5dbc>
   170b8:	mov	r0, #0
   170bc:	bl	110d8 <dcgettext@plt>
   170c0:	mov	r1, r0
   170c4:	ldr	r2, [pc, #84]	; 17120 <__assert_fail@plt+0x5dc0>
   170c8:	mov	r0, #1
   170cc:	bl	11228 <__printf_chk@plt>
   170d0:	mov	r2, #5
   170d4:	ldr	r1, [pc, #72]	; 17124 <__assert_fail@plt+0x5dc4>
   170d8:	mov	r0, #0
   170dc:	bl	110d8 <dcgettext@plt>
   170e0:	mov	r1, r0
   170e4:	ldr	r3, [pc, #60]	; 17128 <__assert_fail@plt+0x5dc8>
   170e8:	mov	r0, #1
   170ec:	ldr	r2, [pc, #56]	; 1712c <__assert_fail@plt+0x5dcc>
   170f0:	bl	11228 <__printf_chk@plt>
   170f4:	mov	r2, #5
   170f8:	ldr	r1, [pc, #48]	; 17130 <__assert_fail@plt+0x5dd0>
   170fc:	mov	r0, #0
   17100:	bl	110d8 <dcgettext@plt>
   17104:	mov	r1, r0
   17108:	ldr	r2, [pc, #36]	; 17134 <__assert_fail@plt+0x5dd4>
   1710c:	mov	r0, #1
   17110:	pop	{r4, lr}
   17114:	b	11228 <__printf_chk@plt>
   17118:	muleq	r2, r4, r1
   1711c:	andeq	r9, r1, r0, lsl #9
   17120:	muleq	r1, r4, r4
   17124:	andeq	r9, r1, sl, lsr #9
   17128:	andeq	r8, r1, r2, lsl #21
   1712c:	andeq	r8, r1, sl, lsr #21
   17130:			; <UNDEFINED> instruction: 0x000194be
   17134:	andeq	r9, r1, r5, ror #9
   17138:	push	{r4, lr}
   1713c:	bl	1792c <__assert_fail@plt+0x65cc>
   17140:	cmp	r0, #0
   17144:	popne	{r4, pc}
   17148:	bl	173f0 <__assert_fail@plt+0x6090>
   1714c:	push	{r4, lr}
   17150:	bl	1792c <__assert_fail@plt+0x65cc>
   17154:	cmp	r0, #0
   17158:	popne	{r4, pc}
   1715c:	bl	173f0 <__assert_fail@plt+0x6090>
   17160:	b	17138 <__assert_fail@plt+0x5dd8>
   17164:	push	{r4, r5, r6, lr}
   17168:	mov	r5, r0
   1716c:	mov	r4, r1
   17170:	bl	17958 <__assert_fail@plt+0x65f8>
   17174:	cmp	r0, #0
   17178:	popne	{r4, r5, r6, pc}
   1717c:	adds	r4, r4, #0
   17180:	movne	r4, #1
   17184:	cmp	r5, #0
   17188:	moveq	r4, #1
   1718c:	cmp	r4, #0
   17190:	popeq	{r4, r5, r6, pc}
   17194:	bl	173f0 <__assert_fail@plt+0x6090>
   17198:	push	{r4, lr}
   1719c:	bl	17e50 <__assert_fail@plt+0x6af0>
   171a0:	cmp	r0, #0
   171a4:	popne	{r4, pc}
   171a8:	bl	173f0 <__assert_fail@plt+0x6090>
   171ac:	push	{r4, r5, r6, lr}
   171b0:	mov	r6, r0
   171b4:	mov	r5, r1
   171b8:	mov	r4, r2
   171bc:	bl	17ef8 <__assert_fail@plt+0x6b98>
   171c0:	cmp	r0, #0
   171c4:	popne	{r4, r5, r6, pc}
   171c8:	cmp	r6, #0
   171cc:	beq	171dc <__assert_fail@plt+0x5e7c>
   171d0:	cmp	r5, #0
   171d4:	cmpne	r4, #0
   171d8:	popeq	{r4, r5, r6, pc}
   171dc:	bl	173f0 <__assert_fail@plt+0x6090>
   171e0:	b	171ac <__assert_fail@plt+0x5e4c>
   171e4:	push	{r4, lr}
   171e8:	bl	17e60 <__assert_fail@plt+0x6b00>
   171ec:	cmp	r0, #0
   171f0:	popne	{r4, pc}
   171f4:	bl	173f0 <__assert_fail@plt+0x6090>
   171f8:	mov	r2, r1
   171fc:	mov	r1, r0
   17200:	mov	r0, #0
   17204:	b	171ac <__assert_fail@plt+0x5e4c>
   17208:	mov	r2, r1
   1720c:	mov	r1, r0
   17210:	mov	r0, #0
   17214:	b	171e4 <__assert_fail@plt+0x5e84>
   17218:	cmp	r0, #0
   1721c:	push	{r4, r5, r6, lr}
   17220:	mov	r5, r1
   17224:	ldr	r4, [r1]
   17228:	bne	17254 <__assert_fail@plt+0x5ef4>
   1722c:	cmp	r4, #0
   17230:	bne	17244 <__assert_fail@plt+0x5ee4>
   17234:	mov	r4, #64	; 0x40
   17238:	udiv	r4, r4, r2
   1723c:	cmp	r2, #64	; 0x40
   17240:	addhi	r4, r4, #1
   17244:	mov	r1, r4
   17248:	bl	171ac <__assert_fail@plt+0x5e4c>
   1724c:	str	r4, [r5]
   17250:	pop	{r4, r5, r6, pc}
   17254:	lsr	r3, r4, #1
   17258:	add	r3, r3, #1
   1725c:	adds	r4, r4, r3
   17260:	bcc	17244 <__assert_fail@plt+0x5ee4>
   17264:	bl	173f0 <__assert_fail@plt+0x6090>
   17268:	mov	r2, #1
   1726c:	b	17218 <__assert_fail@plt+0x5eb8>
   17270:	ldr	ip, [r1]
   17274:	push	{r4, r5, r6, r7, r8, lr}
   17278:	mov	r5, r1
   1727c:	mvn	r8, r3
   17280:	lsr	r8, r8, #31
   17284:	ldr	lr, [sp, #24]
   17288:	asr	r1, ip, #1
   1728c:	adds	r4, ip, r1
   17290:	mvnvs	r4, #-2147483648	; 0x80000000
   17294:	cmp	r3, r4
   17298:	movge	r1, #0
   1729c:	andlt	r1, r8, #1
   172a0:	cmp	r1, #0
   172a4:	movne	r4, r3
   172a8:	smull	r6, r7, r4, lr
   172ac:	cmp	r7, r6, asr #31
   172b0:	bne	172c8 <__assert_fail@plt+0x5f68>
   172b4:	cmp	r6, #63	; 0x3f
   172b8:	mov	r1, r6
   172bc:	bgt	172d8 <__assert_fail@plt+0x5f78>
   172c0:	mov	r1, #64	; 0x40
   172c4:	b	172cc <__assert_fail@plt+0x5f6c>
   172c8:	mvn	r1, #-2147483648	; 0x80000000
   172cc:	sdiv	r4, r1, lr
   172d0:	mls	r6, lr, r4, r1
   172d4:	sub	r1, r1, r6
   172d8:	cmp	r0, #0
   172dc:	sub	r6, r4, ip
   172e0:	streq	r0, [r5]
   172e4:	cmp	r6, r2
   172e8:	bge	1731c <__assert_fail@plt+0x5fbc>
   172ec:	adds	r4, ip, r2
   172f0:	bvs	17318 <__assert_fail@plt+0x5fb8>
   172f4:	cmp	r4, r3
   172f8:	movle	r3, #0
   172fc:	andgt	r3, r8, #1
   17300:	cmp	r3, #0
   17304:	bne	17318 <__assert_fail@plt+0x5fb8>
   17308:	smull	r2, r3, r4, lr
   1730c:	cmp	r3, r2, asr #31
   17310:	mov	r1, r2
   17314:	beq	1731c <__assert_fail@plt+0x5fbc>
   17318:	bl	173f0 <__assert_fail@plt+0x6090>
   1731c:	bl	17164 <__assert_fail@plt+0x5e04>
   17320:	str	r4, [r5]
   17324:	pop	{r4, r5, r6, r7, r8, pc}
   17328:	push	{r4, lr}
   1732c:	bl	178d8 <__assert_fail@plt+0x6578>
   17330:	cmp	r0, #0
   17334:	popne	{r4, pc}
   17338:	bl	173f0 <__assert_fail@plt+0x6090>
   1733c:	mov	r1, #1
   17340:	b	17328 <__assert_fail@plt+0x5fc8>
   17344:	push	{r4, lr}
   17348:	bl	178d8 <__assert_fail@plt+0x6578>
   1734c:	cmp	r0, #0
   17350:	popne	{r4, pc}
   17354:	bl	173f0 <__assert_fail@plt+0x6090>
   17358:	mov	r1, #1
   1735c:	b	17344 <__assert_fail@plt+0x5fe4>
   17360:	push	{r4, r5, r6, lr}
   17364:	mov	r4, r1
   17368:	mov	r5, r0
   1736c:	mov	r0, r1
   17370:	bl	17138 <__assert_fail@plt+0x5dd8>
   17374:	mov	r2, r4
   17378:	mov	r1, r5
   1737c:	pop	{r4, r5, r6, lr}
   17380:	b	1109c <memcpy@plt>
   17384:	push	{r4, r5, r6, lr}
   17388:	mov	r4, r1
   1738c:	mov	r5, r0
   17390:	mov	r0, r1
   17394:	bl	1714c <__assert_fail@plt+0x5dec>
   17398:	mov	r2, r4
   1739c:	mov	r1, r5
   173a0:	pop	{r4, r5, r6, lr}
   173a4:	b	1109c <memcpy@plt>
   173a8:	push	{r4, r5, r6, lr}
   173ac:	mov	r5, r0
   173b0:	add	r0, r1, #1
   173b4:	mov	r4, r1
   173b8:	bl	1714c <__assert_fail@plt+0x5dec>
   173bc:	mov	r2, #0
   173c0:	mov	r1, r5
   173c4:	strb	r2, [r0, r4]
   173c8:	mov	r2, r4
   173cc:	pop	{r4, r5, r6, lr}
   173d0:	b	1109c <memcpy@plt>
   173d4:	push	{r4, lr}
   173d8:	mov	r4, r0
   173dc:	bl	111d4 <strlen@plt>
   173e0:	add	r1, r0, #1
   173e4:	mov	r0, r4
   173e8:	pop	{r4, lr}
   173ec:	b	17360 <__assert_fail@plt+0x6000>
   173f0:	ldr	r3, [pc, #44]	; 17424 <__assert_fail@plt+0x60c4>
   173f4:	mov	r2, #5
   173f8:	mov	r0, #0
   173fc:	push	{r4, lr}
   17400:	ldr	r1, [pc, #32]	; 17428 <__assert_fail@plt+0x60c8>
   17404:	ldr	r4, [r3]
   17408:	bl	110d8 <dcgettext@plt>
   1740c:	mov	r3, r0
   17410:	ldr	r2, [pc, #20]	; 1742c <__assert_fail@plt+0x60cc>
   17414:	mov	r1, #0
   17418:	mov	r0, r4
   1741c:	bl	11168 <error@plt>
   17420:	bl	11318 <abort@plt>
   17424:	andeq	sl, r2, ip, lsr r1
   17428:	andeq	r9, r1, r1, lsr r5
   1742c:	andeq	r8, r1, r0, lsl ip
   17430:	push	{r4, lr}
   17434:	orr	r1, r1, #512	; 0x200
   17438:	bl	13b7c <__assert_fail@plt+0x281c>
   1743c:	cmp	r0, #0
   17440:	popne	{r4, pc}
   17444:	bl	11204 <__errno_location@plt>
   17448:	ldr	r3, [r0]
   1744c:	cmp	r3, #22
   17450:	bne	17468 <__assert_fail@plt+0x6108>
   17454:	ldr	r3, [pc, #16]	; 1746c <__assert_fail@plt+0x610c>
   17458:	mov	r2, #41	; 0x29
   1745c:	ldr	r1, [pc, #12]	; 17470 <__assert_fail@plt+0x6110>
   17460:	ldr	r0, [pc, #12]	; 17474 <__assert_fail@plt+0x6114>
   17464:	bl	11360 <__assert_fail@plt>
   17468:	bl	173f0 <__assert_fail@plt+0x6090>
   1746c:	andeq	r9, r1, r2, asr #10
   17470:	andeq	r9, r1, ip, asr #10
   17474:	andeq	r9, r1, r7, asr r5
   17478:	ldr	r3, [r0, #48]	; 0x30
   1747c:	and	r3, r3, #17
   17480:	cmp	r3, #16
   17484:	beq	174a0 <__assert_fail@plt+0x6140>
   17488:	cmp	r3, #17
   1748c:	bne	174a8 <__assert_fail@plt+0x6148>
   17490:	ldr	r0, [r1, #48]	; 0x30
   17494:	adds	r0, r0, #0
   17498:	movne	r0, #1
   1749c:	bx	lr
   174a0:	mov	r0, #1
   174a4:	bx	lr
   174a8:	mov	r0, #0
   174ac:	bx	lr
   174b0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b4:	mov	ip, r0
   174b8:	asr	fp, r1, #31
   174bc:	mov	r0, #0
   174c0:	mov	lr, r0
   174c4:	subs	r2, r2, #1
   174c8:	bcs	174d4 <__assert_fail@plt+0x6174>
   174cc:	add	sp, sp, #12
   174d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d4:	ldrd	r8, [ip]
   174d8:	mov	r3, #0
   174dc:	cmp	r9, r3
   174e0:	umulleq	r8, r9, r8, r1
   174e4:	moveq	r6, r8
   174e8:	moveq	r4, r9
   174ec:	beq	17524 <__assert_fail@plt+0x61c4>
   174f0:	umull	r4, r5, r8, r1
   174f4:	strd	r4, [sp]
   174f8:	mov	r5, lr
   174fc:	ldr	r4, [sp, #4]
   17500:	umlal	r4, r5, r9, r1
   17504:	cmp	r5, #0
   17508:	ldrne	r3, [sp, #4]
   1750c:	mulne	r4, r1, r9
   17510:	ldreq	r6, [sp]
   17514:	mlane	r4, r8, fp, r4
   17518:	ldrne	r6, [sp]
   1751c:	addne	r4, r4, r3
   17520:	movne	r3, #1
   17524:	cmp	r3, #0
   17528:	mvnne	r6, #0
   1752c:	movne	r3, #1
   17530:	movne	r4, r6
   17534:	orr	r0, r0, r3
   17538:	str	r6, [ip]
   1753c:	str	r4, [ip, #4]
   17540:	b	174c4 <__assert_fail@plt+0x6164>
   17544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17548:	cmp	r2, #36	; 0x24
   1754c:	sub	sp, sp, #20
   17550:	ldr	r5, [sp, #56]	; 0x38
   17554:	bls	1756c <__assert_fail@plt+0x620c>
   17558:	ldr	r3, [pc, #876]	; 178cc <__assert_fail@plt+0x656c>
   1755c:	mov	r2, #85	; 0x55
   17560:	ldr	r1, [pc, #872]	; 178d0 <__assert_fail@plt+0x6570>
   17564:	ldr	r0, [pc, #872]	; 178d4 <__assert_fail@plt+0x6574>
   17568:	bl	11360 <__assert_fail@plt>
   1756c:	cmp	r1, #0
   17570:	mov	r6, r1
   17574:	mov	r8, r0
   17578:	mov	fp, r2
   1757c:	mov	r7, r3
   17580:	addeq	r6, sp, #4
   17584:	bl	11204 <__errno_location@plt>
   17588:	mov	r3, #0
   1758c:	mov	sl, r0
   17590:	str	r3, [r0]
   17594:	bl	111bc <__ctype_b_loc@plt>
   17598:	ldrb	r9, [r8]
   1759c:	mov	r3, r8
   175a0:	ldr	r1, [r0]
   175a4:	lsl	r2, r9, #1
   175a8:	ldrh	r4, [r1, r2]
   175ac:	ands	r4, r4, #8192	; 0x2000
   175b0:	bne	175cc <__assert_fail@plt+0x626c>
   175b4:	cmp	r9, #45	; 0x2d
   175b8:	bne	175d4 <__assert_fail@plt+0x6274>
   175bc:	mov	r4, #4
   175c0:	mov	r0, r4
   175c4:	add	sp, sp, #20
   175c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175cc:	ldrb	r9, [r3, #1]!
   175d0:	b	175a4 <__assert_fail@plt+0x6244>
   175d4:	mov	r2, fp
   175d8:	mov	r1, r6
   175dc:	mov	r0, r8
   175e0:	bl	11240 <strtoumax@plt>
   175e4:	ldr	r9, [r6]
   175e8:	strd	r0, [sp, #8]
   175ec:	cmp	r9, r8
   175f0:	bne	17654 <__assert_fail@plt+0x62f4>
   175f4:	cmp	r5, #0
   175f8:	beq	175bc <__assert_fail@plt+0x625c>
   175fc:	ldrb	r1, [r8]
   17600:	cmp	r1, #0
   17604:	beq	175bc <__assert_fail@plt+0x625c>
   17608:	mov	r0, r5
   1760c:	bl	111e0 <strchr@plt>
   17610:	cmp	r0, #0
   17614:	movne	r2, #1
   17618:	movne	r3, #0
   1761c:	strdne	r2, [sp, #8]
   17620:	beq	175bc <__assert_fail@plt+0x625c>
   17624:	ldrb	r8, [r9]
   17628:	cmp	r8, #0
   1762c:	beq	17884 <__assert_fail@plt+0x6524>
   17630:	mov	r1, r8
   17634:	mov	r0, r5
   17638:	bl	111e0 <strchr@plt>
   1763c:	cmp	r0, #0
   17640:	bne	1767c <__assert_fail@plt+0x631c>
   17644:	ldrd	r2, [sp, #8]
   17648:	orr	r4, r4, #2
   1764c:	strd	r2, [r7]
   17650:	b	175c0 <__assert_fail@plt+0x6260>
   17654:	ldr	r4, [sl]
   17658:	cmp	r4, #0
   1765c:	beq	1766c <__assert_fail@plt+0x630c>
   17660:	cmp	r4, #34	; 0x22
   17664:	bne	175bc <__assert_fail@plt+0x625c>
   17668:	mov	r4, #1
   1766c:	cmp	r5, #0
   17670:	strdeq	r0, [r7]
   17674:	bne	17624 <__assert_fail@plt+0x62c4>
   17678:	b	175c0 <__assert_fail@plt+0x6260>
   1767c:	cmp	r8, #84	; 0x54
   17680:	beq	176d4 <__assert_fail@plt+0x6374>
   17684:	bhi	176bc <__assert_fail@plt+0x635c>
   17688:	cmp	r8, #75	; 0x4b
   1768c:	beq	176d4 <__assert_fail@plt+0x6374>
   17690:	bhi	176ac <__assert_fail@plt+0x634c>
   17694:	cmp	r8, #69	; 0x45
   17698:	beq	176d4 <__assert_fail@plt+0x6374>
   1769c:	cmp	r8, #71	; 0x47
   176a0:	beq	176d4 <__assert_fail@plt+0x6374>
   176a4:	mov	r5, #1
   176a8:	b	1778c <__assert_fail@plt+0x642c>
   176ac:	cmp	r8, #77	; 0x4d
   176b0:	beq	176d4 <__assert_fail@plt+0x6374>
   176b4:	cmp	r8, #80	; 0x50
   176b8:	b	176a0 <__assert_fail@plt+0x6340>
   176bc:	cmp	r8, #103	; 0x67
   176c0:	beq	176d4 <__assert_fail@plt+0x6374>
   176c4:	bhi	17764 <__assert_fail@plt+0x6404>
   176c8:	sub	r3, r8, #89	; 0x59
   176cc:	cmp	r3, #1
   176d0:	bhi	176a4 <__assert_fail@plt+0x6344>
   176d4:	mov	r1, #48	; 0x30
   176d8:	mov	r0, r5
   176dc:	bl	111e0 <strchr@plt>
   176e0:	cmp	r0, #0
   176e4:	beq	176a4 <__assert_fail@plt+0x6344>
   176e8:	ldrb	r3, [r9, #1]
   176ec:	cmp	r3, #68	; 0x44
   176f0:	moveq	r5, #2
   176f4:	moveq	r1, #1000	; 0x3e8
   176f8:	beq	17718 <__assert_fail@plt+0x63b8>
   176fc:	cmp	r3, #105	; 0x69
   17700:	beq	1777c <__assert_fail@plt+0x641c>
   17704:	cmp	r3, #66	; 0x42
   17708:	moveq	r5, #2
   1770c:	movne	r5, #1
   17710:	moveq	r1, #1000	; 0x3e8
   17714:	movne	r1, #1024	; 0x400
   17718:	cmp	r8, #89	; 0x59
   1771c:	beq	178b4 <__assert_fail@plt+0x6554>
   17720:	bhi	177b4 <__assert_fail@plt+0x6454>
   17724:	cmp	r8, #75	; 0x4b
   17728:	beq	177f4 <__assert_fail@plt+0x6494>
   1772c:	bhi	17794 <__assert_fail@plt+0x6434>
   17730:	cmp	r8, #69	; 0x45
   17734:	beq	17890 <__assert_fail@plt+0x6530>
   17738:	cmp	r8, #71	; 0x47
   1773c:	beq	1789c <__assert_fail@plt+0x653c>
   17740:	cmp	r8, #66	; 0x42
   17744:	bne	17644 <__assert_fail@plt+0x62e4>
   17748:	ldr	r3, [sp, #8]
   1774c:	ldr	r1, [sp, #12]
   17750:	lsl	r2, r1, #10
   17754:	lsr	r0, r1, #22
   17758:	orr	r2, r2, r3, lsr #22
   1775c:	lsl	r3, r3, #10
   17760:	b	17840 <__assert_fail@plt+0x64e0>
   17764:	cmp	r8, #109	; 0x6d
   17768:	beq	176d4 <__assert_fail@plt+0x6374>
   1776c:	cmp	r8, #116	; 0x74
   17770:	beq	176d4 <__assert_fail@plt+0x6374>
   17774:	cmp	r8, #107	; 0x6b
   17778:	b	176a0 <__assert_fail@plt+0x6340>
   1777c:	ldrb	r3, [r9, #2]
   17780:	cmp	r3, #66	; 0x42
   17784:	movne	r5, #1
   17788:	moveq	r5, #3
   1778c:	mov	r1, #1024	; 0x400
   17790:	b	17718 <__assert_fail@plt+0x63b8>
   17794:	cmp	r8, #80	; 0x50
   17798:	beq	178a4 <__assert_fail@plt+0x6544>
   1779c:	cmp	r8, #84	; 0x54
   177a0:	beq	178ac <__assert_fail@plt+0x654c>
   177a4:	cmp	r8, #77	; 0x4d
   177a8:	bne	17644 <__assert_fail@plt+0x62e4>
   177ac:	mov	r2, #2
   177b0:	b	17894 <__assert_fail@plt+0x6534>
   177b4:	cmp	r8, #103	; 0x67
   177b8:	beq	1789c <__assert_fail@plt+0x653c>
   177bc:	bhi	177e0 <__assert_fail@plt+0x6480>
   177c0:	cmp	r8, #98	; 0x62
   177c4:	beq	17828 <__assert_fail@plt+0x64c8>
   177c8:	cmp	r8, #99	; 0x63
   177cc:	beq	178c4 <__assert_fail@plt+0x6564>
   177d0:	cmp	r8, #90	; 0x5a
   177d4:	bne	17644 <__assert_fail@plt+0x62e4>
   177d8:	mov	r2, #7
   177dc:	b	17894 <__assert_fail@plt+0x6534>
   177e0:	cmp	r8, #109	; 0x6d
   177e4:	beq	177ac <__assert_fail@plt+0x644c>
   177e8:	bhi	177fc <__assert_fail@plt+0x649c>
   177ec:	cmp	r8, #107	; 0x6b
   177f0:	bne	17644 <__assert_fail@plt+0x62e4>
   177f4:	mov	r2, #1
   177f8:	b	17894 <__assert_fail@plt+0x6534>
   177fc:	cmp	r8, #116	; 0x74
   17800:	beq	178ac <__assert_fail@plt+0x654c>
   17804:	cmp	r8, #119	; 0x77
   17808:	bne	17644 <__assert_fail@plt+0x62e4>
   1780c:	ldr	r3, [sp, #8]
   17810:	ldr	r2, [sp, #12]
   17814:	ldr	r0, [sp, #12]
   17818:	adds	r3, r3, r3
   1781c:	adc	r2, r2, r2
   17820:	lsr	r0, r0, #31
   17824:	b	17840 <__assert_fail@plt+0x64e0>
   17828:	ldr	r3, [sp, #8]
   1782c:	ldr	r1, [sp, #12]
   17830:	lsl	r2, r1, #9
   17834:	lsr	r0, r1, #23
   17838:	orr	r2, r2, r3, lsr #23
   1783c:	lsl	r3, r3, #9
   17840:	adds	r0, r0, #0
   17844:	movne	r0, #1
   17848:	cmp	r0, #0
   1784c:	streq	r3, [sp, #8]
   17850:	streq	r2, [sp, #12]
   17854:	beq	17868 <__assert_fail@plt+0x6508>
   17858:	mvn	r2, #0
   1785c:	mvn	r3, #0
   17860:	mov	r0, #1
   17864:	strd	r2, [sp, #8]
   17868:	ldr	r3, [r6]
   1786c:	orr	r4, r4, r0
   17870:	add	r2, r3, r5
   17874:	str	r2, [r6]
   17878:	ldrb	r3, [r3, r5]
   1787c:	cmp	r3, #0
   17880:	orrne	r4, r4, #2
   17884:	ldrd	r2, [sp, #8]
   17888:	strd	r2, [r7]
   1788c:	b	175c0 <__assert_fail@plt+0x6260>
   17890:	mov	r2, #6
   17894:	add	r0, sp, #8
   17898:	b	178bc <__assert_fail@plt+0x655c>
   1789c:	mov	r2, #3
   178a0:	b	17894 <__assert_fail@plt+0x6534>
   178a4:	mov	r2, #5
   178a8:	b	17894 <__assert_fail@plt+0x6534>
   178ac:	mov	r2, #4
   178b0:	b	17894 <__assert_fail@plt+0x6534>
   178b4:	mov	r2, #8
   178b8:	add	r0, sp, r2
   178bc:	bl	174b0 <__assert_fail@plt+0x6150>
   178c0:	b	17868 <__assert_fail@plt+0x6508>
   178c4:	mov	r0, #0
   178c8:	b	17868 <__assert_fail@plt+0x6508>
   178cc:	andeq	r9, r1, r7, ror #10
   178d0:	andeq	r9, r1, r2, ror r5
   178d4:	andeq	r9, r1, r0, lsl #11
   178d8:	cmp	r1, #0
   178dc:	cmpne	r0, #0
   178e0:	beq	17918 <__assert_fail@plt+0x65b8>
   178e4:	push	{r4, r5, r6, lr}
   178e8:	umull	r4, r5, r0, r1
   178ec:	adds	r3, r5, #0
   178f0:	movne	r3, #1
   178f4:	cmp	r4, #0
   178f8:	blt	17904 <__assert_fail@plt+0x65a4>
   178fc:	cmp	r3, #0
   17900:	beq	17924 <__assert_fail@plt+0x65c4>
   17904:	bl	11204 <__errno_location@plt>
   17908:	mov	r3, #12
   1790c:	str	r3, [r0]
   17910:	mov	r0, #0
   17914:	pop	{r4, r5, r6, pc}
   17918:	mov	r1, #1
   1791c:	mov	r0, r1
   17920:	b	11018 <calloc@plt>
   17924:	pop	{r4, r5, r6, lr}
   17928:	b	17920 <__assert_fail@plt+0x65c0>
   1792c:	cmp	r0, #0
   17930:	beq	17950 <__assert_fail@plt+0x65f0>
   17934:	bge	17954 <__assert_fail@plt+0x65f4>
   17938:	push	{r4, lr}
   1793c:	bl	11204 <__errno_location@plt>
   17940:	mov	r3, #12
   17944:	str	r3, [r0]
   17948:	mov	r0, #0
   1794c:	pop	{r4, pc}
   17950:	mov	r0, #1
   17954:	b	11180 <malloc@plt>
   17958:	cmp	r0, #0
   1795c:	bne	17968 <__assert_fail@plt+0x6608>
   17960:	mov	r0, r1
   17964:	b	1792c <__assert_fail@plt+0x65cc>
   17968:	cmp	r1, #0
   1796c:	push	{r4, lr}
   17970:	bne	17980 <__assert_fail@plt+0x6620>
   17974:	bl	1297c <__assert_fail@plt+0x161c>
   17978:	mov	r0, #0
   1797c:	pop	{r4, pc}
   17980:	blt	1798c <__assert_fail@plt+0x662c>
   17984:	pop	{r4, lr}
   17988:	b	110e4 <realloc@plt>
   1798c:	bl	11204 <__errno_location@plt>
   17990:	mov	r3, #12
   17994:	str	r3, [r0]
   17998:	b	17978 <__assert_fail@plt+0x6618>
   1799c:	push	{r4, r5, r6, lr}
   179a0:	mov	r4, r0
   179a4:	bl	11144 <__fpending@plt>
   179a8:	mov	r5, r0
   179ac:	mov	r0, r4
   179b0:	bl	11150 <ferror_unlocked@plt>
   179b4:	mov	r6, r0
   179b8:	mov	r0, r4
   179bc:	bl	17ad8 <__assert_fail@plt+0x6778>
   179c0:	cmp	r6, #0
   179c4:	mov	r4, r0
   179c8:	bne	179f4 <__assert_fail@plt+0x6694>
   179cc:	cmp	r0, #0
   179d0:	beq	179ec <__assert_fail@plt+0x668c>
   179d4:	cmp	r5, #0
   179d8:	bne	17a04 <__assert_fail@plt+0x66a4>
   179dc:	bl	11204 <__errno_location@plt>
   179e0:	ldr	r4, [r0]
   179e4:	subs	r4, r4, #9
   179e8:	mvnne	r4, #0
   179ec:	mov	r0, r4
   179f0:	pop	{r4, r5, r6, pc}
   179f4:	cmp	r0, #0
   179f8:	bne	17a04 <__assert_fail@plt+0x66a4>
   179fc:	bl	11204 <__errno_location@plt>
   17a00:	str	r4, [r0]
   17a04:	mvn	r4, #0
   17a08:	b	179ec <__assert_fail@plt+0x668c>
   17a0c:	mov	r3, #0
   17a10:	mov	r2, #0
   17a14:	strd	r2, [r0, #16]
   17a18:	ldr	r3, [pc, #4]	; 17a24 <__assert_fail@plt+0x66c4>
   17a1c:	str	r3, [r0, #24]
   17a20:	bx	lr
   17a24:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17a28:	ldr	r3, [pc, #152]	; 17ac8 <__assert_fail@plt+0x6768>
   17a2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a30:	ldr	r2, [r0, #24]
   17a34:	cmp	r2, r3
   17a38:	beq	17a50 <__assert_fail@plt+0x66f0>
   17a3c:	ldr	r3, [pc, #136]	; 17acc <__assert_fail@plt+0x676c>
   17a40:	mov	r2, #60	; 0x3c
   17a44:	ldr	r1, [pc, #132]	; 17ad0 <__assert_fail@plt+0x6770>
   17a48:	ldr	r0, [pc, #132]	; 17ad4 <__assert_fail@plt+0x6774>
   17a4c:	bl	11360 <__assert_fail@plt>
   17a50:	ldrd	r6, [r0, #16]
   17a54:	orrs	r3, r6, r7
   17a58:	beq	17a8c <__assert_fail@plt+0x672c>
   17a5c:	ldrd	r2, [r0]
   17a60:	ldrd	r4, [r1, #96]	; 0x60
   17a64:	cmp	r5, r3
   17a68:	cmpeq	r4, r2
   17a6c:	bne	17a8c <__assert_fail@plt+0x672c>
   17a70:	ldrd	r4, [r1]
   17a74:	ldrd	r2, [r0, #8]
   17a78:	cmp	r5, r3
   17a7c:	cmpeq	r4, r2
   17a80:	bne	17a8c <__assert_fail@plt+0x672c>
   17a84:	mov	r0, #1
   17a88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a8c:	adds	r8, r6, #1
   17a90:	adc	r9, r7, #0
   17a94:	and	r2, r6, r8
   17a98:	and	r3, r7, r9
   17a9c:	orrs	r3, r2, r3
   17aa0:	strd	r8, [r0, #16]
   17aa4:	bne	17ac0 <__assert_fail@plt+0x6760>
   17aa8:	orrs	r3, r8, r9
   17aac:	beq	17a84 <__assert_fail@plt+0x6724>
   17ab0:	ldrd	r2, [r1]
   17ab4:	strd	r2, [r0, #8]
   17ab8:	ldrd	r2, [r1, #96]	; 0x60
   17abc:	strd	r2, [r0]
   17ac0:	mov	r0, #0
   17ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ac8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17acc:	andeq	r9, r1, r6, lsr #11
   17ad0:			; <UNDEFINED> instruction: 0x000195b2
   17ad4:	andeq	r9, r1, r4, asr #11
   17ad8:	push	{r0, r1, r2, r4, r5, lr}
   17adc:	mov	r4, r0
   17ae0:	bl	11234 <fileno@plt>
   17ae4:	cmp	r0, #0
   17ae8:	mov	r0, r4
   17aec:	bge	17afc <__assert_fail@plt+0x679c>
   17af0:	add	sp, sp, #12
   17af4:	pop	{r4, r5, lr}
   17af8:	b	11258 <fclose@plt>
   17afc:	bl	11198 <__freading@plt>
   17b00:	cmp	r0, #0
   17b04:	bne	17b40 <__assert_fail@plt+0x67e0>
   17b08:	mov	r0, r4
   17b0c:	bl	17d64 <__assert_fail@plt+0x6a04>
   17b10:	cmp	r0, #0
   17b14:	bne	17b74 <__assert_fail@plt+0x6814>
   17b18:	mov	r5, #0
   17b1c:	mov	r0, r4
   17b20:	bl	11258 <fclose@plt>
   17b24:	cmp	r5, #0
   17b28:	beq	17b38 <__assert_fail@plt+0x67d8>
   17b2c:	bl	11204 <__errno_location@plt>
   17b30:	str	r5, [r0]
   17b34:	mvn	r0, #0
   17b38:	add	sp, sp, #12
   17b3c:	pop	{r4, r5, pc}
   17b40:	mov	r0, r4
   17b44:	bl	11234 <fileno@plt>
   17b48:	mov	r3, #1
   17b4c:	mov	r2, #0
   17b50:	str	r3, [sp]
   17b54:	mov	r3, #0
   17b58:	bl	11120 <lseek64@plt>
   17b5c:	mvn	r3, #0
   17b60:	mvn	r2, #0
   17b64:	cmp	r1, r3
   17b68:	cmpeq	r0, r2
   17b6c:	bne	17b08 <__assert_fail@plt+0x67a8>
   17b70:	b	17b18 <__assert_fail@plt+0x67b8>
   17b74:	bl	11204 <__errno_location@plt>
   17b78:	ldr	r5, [r0]
   17b7c:	b	17b1c <__assert_fail@plt+0x67bc>
   17b80:	push	{r1, r2, r3}
   17b84:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   17b88:	add	r2, sp, #40	; 0x28
   17b8c:	ldr	r1, [sp, #36]	; 0x24
   17b90:	str	r2, [sp, #4]
   17b94:	cmp	r1, #0
   17b98:	beq	17be8 <__assert_fail@plt+0x6888>
   17b9c:	movw	r3, #1030	; 0x406
   17ba0:	mov	r5, r0
   17ba4:	cmp	r1, r3
   17ba8:	beq	17bf4 <__assert_fail@plt+0x6894>
   17bac:	cmp	r1, #11
   17bb0:	beq	17bd8 <__assert_fail@plt+0x6878>
   17bb4:	bgt	17ce8 <__assert_fail@plt+0x6988>
   17bb8:	cmp	r1, #4
   17bbc:	beq	17d00 <__assert_fail@plt+0x69a0>
   17bc0:	bgt	17ce0 <__assert_fail@plt+0x6980>
   17bc4:	cmp	r1, #2
   17bc8:	beq	17d00 <__assert_fail@plt+0x69a0>
   17bcc:	bgt	17bd8 <__assert_fail@plt+0x6878>
   17bd0:	cmp	r1, #1
   17bd4:	bne	17d00 <__assert_fail@plt+0x69a0>
   17bd8:	mov	r0, r5
   17bdc:	bl	11270 <fcntl64@plt>
   17be0:	mov	r4, r0
   17be4:	b	17c3c <__assert_fail@plt+0x68dc>
   17be8:	ldr	r2, [sp, #40]	; 0x28
   17bec:	bl	11270 <fcntl64@plt>
   17bf0:	b	17be0 <__assert_fail@plt+0x6880>
   17bf4:	ldr	r6, [pc, #304]	; 17d2c <__assert_fail@plt+0x69cc>
   17bf8:	add	r3, sp, #44	; 0x2c
   17bfc:	str	r3, [sp, #4]
   17c00:	ldr	r7, [r2]
   17c04:	ldr	r3, [r6]
   17c08:	mov	r8, r6
   17c0c:	mov	r2, r7
   17c10:	cmp	r3, #0
   17c14:	blt	17ca4 <__assert_fail@plt+0x6944>
   17c18:	bl	11270 <fcntl64@plt>
   17c1c:	subs	r4, r0, #0
   17c20:	bge	17c34 <__assert_fail@plt+0x68d4>
   17c24:	bl	11204 <__errno_location@plt>
   17c28:	ldr	r3, [r0]
   17c2c:	cmp	r3, #22
   17c30:	beq	17c50 <__assert_fail@plt+0x68f0>
   17c34:	mov	r3, #1
   17c38:	str	r3, [r8]
   17c3c:	mov	r0, r4
   17c40:	add	sp, sp, #12
   17c44:	pop	{r4, r5, r6, r7, r8, lr}
   17c48:	add	sp, sp, #12
   17c4c:	bx	lr
   17c50:	mov	r2, r7
   17c54:	mov	r1, #0
   17c58:	mov	r0, r5
   17c5c:	bl	11270 <fcntl64@plt>
   17c60:	subs	r4, r0, #0
   17c64:	mvnge	r3, #0
   17c68:	strge	r3, [r6]
   17c6c:	blt	17c3c <__assert_fail@plt+0x68dc>
   17c70:	mov	r1, #1
   17c74:	mov	r0, r4
   17c78:	bl	11270 <fcntl64@plt>
   17c7c:	subs	r2, r0, #0
   17c80:	bge	17cc4 <__assert_fail@plt+0x6964>
   17c84:	bl	11204 <__errno_location@plt>
   17c88:	mov	r5, r0
   17c8c:	mov	r0, r4
   17c90:	ldr	r6, [r5]
   17c94:	mvn	r4, #0
   17c98:	bl	11324 <close@plt>
   17c9c:	str	r6, [r5]
   17ca0:	b	17c3c <__assert_fail@plt+0x68dc>
   17ca4:	mov	r1, #0
   17ca8:	bl	11270 <fcntl64@plt>
   17cac:	subs	r4, r0, #0
   17cb0:	blt	17c3c <__assert_fail@plt+0x68dc>
   17cb4:	ldr	r3, [r6]
   17cb8:	cmn	r3, #1
   17cbc:	bne	17c3c <__assert_fail@plt+0x68dc>
   17cc0:	b	17c70 <__assert_fail@plt+0x6910>
   17cc4:	orr	r2, r2, #1
   17cc8:	mov	r1, #2
   17ccc:	mov	r0, r4
   17cd0:	bl	11270 <fcntl64@plt>
   17cd4:	cmn	r0, #1
   17cd8:	bne	17c3c <__assert_fail@plt+0x68dc>
   17cdc:	b	17c84 <__assert_fail@plt+0x6924>
   17ce0:	cmp	r1, #9
   17ce4:	b	17bd4 <__assert_fail@plt+0x6874>
   17ce8:	movw	r2, #1031	; 0x407
   17cec:	cmp	r1, r2
   17cf0:	bgt	17d10 <__assert_fail@plt+0x69b0>
   17cf4:	cmp	r1, r3
   17cf8:	movwlt	r3, #1025	; 0x401
   17cfc:	blt	17d24 <__assert_fail@plt+0x69c4>
   17d00:	ldr	r3, [sp, #4]
   17d04:	mov	r0, r5
   17d08:	ldr	r2, [r3]
   17d0c:	b	17bec <__assert_fail@plt+0x688c>
   17d10:	movw	r3, #1033	; 0x409
   17d14:	cmp	r1, r3
   17d18:	beq	17d00 <__assert_fail@plt+0x69a0>
   17d1c:	blt	17bd8 <__assert_fail@plt+0x6878>
   17d20:	movw	r3, #1034	; 0x40a
   17d24:	cmp	r1, r3
   17d28:	b	17bd4 <__assert_fail@plt+0x6874>
   17d2c:	strdeq	sl, [r2], -r4
   17d30:	push	{r1, r2, r3}
   17d34:	push	{r0, r1, lr}
   17d38:	ldr	r1, [sp, #12]
   17d3c:	ands	r2, r1, #64	; 0x40
   17d40:	ldrne	r2, [sp, #16]
   17d44:	addne	r3, sp, #16
   17d48:	strne	r3, [sp, #4]
   17d4c:	bl	11174 <open64@plt>
   17d50:	bl	16bf4 <__assert_fail@plt+0x5894>
   17d54:	add	sp, sp, #8
   17d58:	pop	{lr}		; (ldr lr, [sp], #4)
   17d5c:	add	sp, sp, #12
   17d60:	bx	lr
   17d64:	push	{r0, r1, r4, lr}
   17d68:	subs	r4, r0, #0
   17d6c:	bne	17d80 <__assert_fail@plt+0x6a20>
   17d70:	mov	r0, r4
   17d74:	add	sp, sp, #8
   17d78:	pop	{r4, lr}
   17d7c:	b	11060 <fflush@plt>
   17d80:	bl	11198 <__freading@plt>
   17d84:	cmp	r0, #0
   17d88:	beq	17d70 <__assert_fail@plt+0x6a10>
   17d8c:	ldr	r3, [r4]
   17d90:	tst	r3, #256	; 0x100
   17d94:	beq	17d70 <__assert_fail@plt+0x6a10>
   17d98:	mov	r3, #1
   17d9c:	mov	r2, #0
   17da0:	mov	r0, r4
   17da4:	str	r3, [sp]
   17da8:	mov	r3, #0
   17dac:	bl	17db4 <__assert_fail@plt+0x6a54>
   17db0:	b	17d70 <__assert_fail@plt+0x6a10>
   17db4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   17db8:	mov	r4, r0
   17dbc:	ldmib	r0, {ip, lr}
   17dc0:	ldr	r8, [sp, #32]
   17dc4:	cmp	lr, ip
   17dc8:	bne	17e38 <__assert_fail@plt+0x6ad8>
   17dcc:	ldr	ip, [r0, #16]
   17dd0:	ldr	lr, [r0, #20]
   17dd4:	cmp	lr, ip
   17dd8:	bne	17e38 <__assert_fail@plt+0x6ad8>
   17ddc:	ldr	r5, [r0, #36]	; 0x24
   17de0:	cmp	r5, #0
   17de4:	bne	17e38 <__assert_fail@plt+0x6ad8>
   17de8:	mov	r6, r2
   17dec:	mov	r7, r3
   17df0:	bl	11234 <fileno@plt>
   17df4:	mov	r2, r6
   17df8:	mov	r3, r7
   17dfc:	str	r8, [sp]
   17e00:	bl	11120 <lseek64@plt>
   17e04:	mvn	r3, #0
   17e08:	mvn	r2, #0
   17e0c:	cmp	r1, r3
   17e10:	cmpeq	r0, r2
   17e14:	mvneq	r0, #0
   17e18:	beq	17e30 <__assert_fail@plt+0x6ad0>
   17e1c:	ldr	r3, [r4]
   17e20:	strd	r0, [r4, #80]	; 0x50
   17e24:	mov	r0, r5
   17e28:	bic	r3, r3, #16
   17e2c:	str	r3, [r4]
   17e30:	add	sp, sp, #8
   17e34:	pop	{r4, r5, r6, r7, r8, pc}
   17e38:	mov	r0, r4
   17e3c:	str	r8, [sp, #32]
   17e40:	add	sp, sp, #8
   17e44:	pop	{r4, r5, r6, r7, r8, lr}
   17e48:	b	11264 <fseeko64@plt>
   17e4c:	b	1792c <__assert_fail@plt+0x65cc>
   17e50:	cmp	r1, #0
   17e54:	orreq	r1, r1, #1
   17e58:	b	17958 <__assert_fail@plt+0x65f8>
   17e5c:	b	178d8 <__assert_fail@plt+0x6578>
   17e60:	cmp	r2, #0
   17e64:	cmpne	r1, #0
   17e68:	moveq	r2, #1
   17e6c:	moveq	r1, r2
   17e70:	b	17ef8 <__assert_fail@plt+0x6b98>
   17e74:	push	{r4, lr}
   17e78:	mov	r0, #14
   17e7c:	bl	11294 <nl_langinfo@plt>
   17e80:	cmp	r0, #0
   17e84:	beq	17e9c <__assert_fail@plt+0x6b3c>
   17e88:	ldrb	r2, [r0]
   17e8c:	ldr	r3, [pc, #16]	; 17ea4 <__assert_fail@plt+0x6b44>
   17e90:	cmp	r2, #0
   17e94:	moveq	r0, r3
   17e98:	pop	{r4, pc}
   17e9c:	ldr	r0, [pc]	; 17ea4 <__assert_fail@plt+0x6b44>
   17ea0:	pop	{r4, pc}
   17ea4:	ldrdeq	r9, [r1], -ip
   17ea8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17eac:	subs	r5, r0, #0
   17eb0:	mov	r7, r2
   17eb4:	addeq	r5, sp, #4
   17eb8:	mov	r6, r1
   17ebc:	mov	r0, r5
   17ec0:	bl	1115c <mbrtowc@plt>
   17ec4:	cmp	r7, #0
   17ec8:	cmnne	r0, #3
   17ecc:	mov	r4, r0
   17ed0:	bls	17eec <__assert_fail@plt+0x6b8c>
   17ed4:	mov	r0, #0
   17ed8:	bl	17f30 <__assert_fail@plt+0x6bd0>
   17edc:	cmp	r0, #0
   17ee0:	ldrbeq	r3, [r6]
   17ee4:	moveq	r4, #1
   17ee8:	streq	r3, [r5]
   17eec:	mov	r0, r4
   17ef0:	add	sp, sp, #12
   17ef4:	pop	{r4, r5, r6, r7, pc}
   17ef8:	umull	r2, r3, r1, r2
   17efc:	cmp	r3, #0
   17f00:	bne	17f0c <__assert_fail@plt+0x6bac>
   17f04:	mov	r1, r2
   17f08:	b	17958 <__assert_fail@plt+0x65f8>
   17f0c:	push	{r4, lr}
   17f10:	bl	11204 <__errno_location@plt>
   17f14:	mov	r3, #12
   17f18:	str	r3, [r0]
   17f1c:	mov	r0, #0
   17f20:	pop	{r4, pc}
   17f24:	mov	r2, #3
   17f28:	mov	r1, #0
   17f2c:	b	17b80 <__assert_fail@plt+0x6820>
   17f30:	push	{lr}		; (str lr, [sp, #-4]!)
   17f34:	sub	sp, sp, #268	; 0x10c
   17f38:	movw	r2, #257	; 0x101
   17f3c:	add	r1, sp, #4
   17f40:	bl	17f8c <__assert_fail@plt+0x6c2c>
   17f44:	cmp	r0, #0
   17f48:	movne	r0, #0
   17f4c:	bne	17f7c <__assert_fail@plt+0x6c1c>
   17f50:	ldr	r1, [pc, #44]	; 17f84 <__assert_fail@plt+0x6c24>
   17f54:	add	r0, sp, #4
   17f58:	bl	11048 <strcmp@plt>
   17f5c:	cmp	r0, #0
   17f60:	beq	17f78 <__assert_fail@plt+0x6c18>
   17f64:	ldr	r1, [pc, #28]	; 17f88 <__assert_fail@plt+0x6c28>
   17f68:	add	r0, sp, #4
   17f6c:	bl	11048 <strcmp@plt>
   17f70:	adds	r0, r0, #0
   17f74:	movne	r0, #1
   17f78:	and	r0, r0, #1
   17f7c:	add	sp, sp, #268	; 0x10c
   17f80:	pop	{pc}		; (ldr pc, [sp], #4)
   17f84:	andeq	r9, r1, r2, ror #11
   17f88:	andeq	r9, r1, r4, ror #11
   17f8c:	push	{r4, r5, r6, lr}
   17f90:	mov	r5, r1
   17f94:	mov	r1, #0
   17f98:	mov	r4, r2
   17f9c:	bl	1127c <setlocale@plt>
   17fa0:	subs	r6, r0, #0
   17fa4:	bne	17fb8 <__assert_fail@plt+0x6c58>
   17fa8:	cmp	r4, #0
   17fac:	mov	r0, #22
   17fb0:	strbne	r6, [r5]
   17fb4:	pop	{r4, r5, r6, pc}
   17fb8:	bl	111d4 <strlen@plt>
   17fbc:	cmp	r4, r0
   17fc0:	bls	17fdc <__assert_fail@plt+0x6c7c>
   17fc4:	add	r2, r0, #1
   17fc8:	mov	r1, r6
   17fcc:	mov	r0, r5
   17fd0:	bl	1109c <memcpy@plt>
   17fd4:	mov	r0, #0
   17fd8:	pop	{r4, r5, r6, pc}
   17fdc:	cmp	r4, #0
   17fe0:	beq	18000 <__assert_fail@plt+0x6ca0>
   17fe4:	sub	r4, r4, #1
   17fe8:	mov	r1, r6
   17fec:	mov	r2, r4
   17ff0:	mov	r0, r5
   17ff4:	bl	1109c <memcpy@plt>
   17ff8:	mov	r3, #0
   17ffc:	strb	r3, [r5, r4]
   18000:	mov	r0, #34	; 0x22
   18004:	pop	{r4, r5, r6, pc}
   18008:	mov	r1, #0
   1800c:	b	1127c <setlocale@plt>
   18010:	cmp	r3, #0
   18014:	cmpeq	r2, #0
   18018:	bne	18030 <__assert_fail@plt+0x6cd0>
   1801c:	cmp	r1, #0
   18020:	cmpeq	r0, #0
   18024:	mvnne	r1, #0
   18028:	mvnne	r0, #0
   1802c:	b	1804c <__assert_fail@plt+0x6cec>
   18030:	sub	sp, sp, #8
   18034:	push	{sp, lr}
   18038:	bl	1805c <__assert_fail@plt+0x6cfc>
   1803c:	ldr	lr, [sp, #4]
   18040:	add	sp, sp, #8
   18044:	pop	{r2, r3}
   18048:	bx	lr
   1804c:	push	{r1, lr}
   18050:	mov	r0, #8
   18054:	bl	1103c <raise@plt>
   18058:	pop	{r1, pc}
   1805c:	cmp	r1, r3
   18060:	cmpeq	r0, r2
   18064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18068:	mov	r4, r0
   1806c:	movcc	r0, #0
   18070:	mov	r5, r1
   18074:	ldr	lr, [sp, #36]	; 0x24
   18078:	movcc	r1, r0
   1807c:	bcc	18178 <__assert_fail@plt+0x6e18>
   18080:	cmp	r3, #0
   18084:	clzeq	ip, r2
   18088:	clzne	ip, r3
   1808c:	addeq	ip, ip, #32
   18090:	cmp	r5, #0
   18094:	clzeq	r1, r4
   18098:	addeq	r1, r1, #32
   1809c:	clzne	r1, r5
   180a0:	sub	ip, ip, r1
   180a4:	sub	sl, ip, #32
   180a8:	lsl	r9, r3, ip
   180ac:	rsb	fp, ip, #32
   180b0:	orr	r9, r9, r2, lsl sl
   180b4:	orr	r9, r9, r2, lsr fp
   180b8:	lsl	r8, r2, ip
   180bc:	cmp	r5, r9
   180c0:	cmpeq	r4, r8
   180c4:	movcc	r0, #0
   180c8:	movcc	r1, r0
   180cc:	bcc	180e8 <__assert_fail@plt+0x6d88>
   180d0:	mov	r0, #1
   180d4:	subs	r4, r4, r8
   180d8:	lsl	r1, r0, sl
   180dc:	orr	r1, r1, r0, lsr fp
   180e0:	lsl	r0, r0, ip
   180e4:	sbc	r5, r5, r9
   180e8:	cmp	ip, #0
   180ec:	beq	18178 <__assert_fail@plt+0x6e18>
   180f0:	lsr	r6, r8, #1
   180f4:	orr	r6, r6, r9, lsl #31
   180f8:	lsr	r7, r9, #1
   180fc:	mov	r2, ip
   18100:	b	18124 <__assert_fail@plt+0x6dc4>
   18104:	subs	r3, r4, r6
   18108:	sbc	r8, r5, r7
   1810c:	adds	r3, r3, r3
   18110:	adc	r8, r8, r8
   18114:	adds	r4, r3, #1
   18118:	adc	r5, r8, #0
   1811c:	subs	r2, r2, #1
   18120:	beq	18140 <__assert_fail@plt+0x6de0>
   18124:	cmp	r5, r7
   18128:	cmpeq	r4, r6
   1812c:	bcs	18104 <__assert_fail@plt+0x6da4>
   18130:	adds	r4, r4, r4
   18134:	adc	r5, r5, r5
   18138:	subs	r2, r2, #1
   1813c:	bne	18124 <__assert_fail@plt+0x6dc4>
   18140:	lsr	r3, r4, ip
   18144:	orr	r3, r3, r5, lsl fp
   18148:	lsr	r2, r5, ip
   1814c:	orr	r3, r3, r5, lsr sl
   18150:	adds	r0, r0, r4
   18154:	mov	r4, r3
   18158:	lsl	r3, r2, ip
   1815c:	orr	r3, r3, r4, lsl sl
   18160:	lsl	ip, r4, ip
   18164:	orr	r3, r3, r4, lsr fp
   18168:	adc	r1, r1, r5
   1816c:	subs	r0, r0, ip
   18170:	mov	r5, r2
   18174:	sbc	r1, r1, r3
   18178:	cmp	lr, #0
   1817c:	strdne	r4, [lr]
   18180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18184:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18188:	mov	r7, r0
   1818c:	ldr	r6, [pc, #72]	; 181dc <__assert_fail@plt+0x6e7c>
   18190:	ldr	r5, [pc, #72]	; 181e0 <__assert_fail@plt+0x6e80>
   18194:	add	r6, pc, r6
   18198:	add	r5, pc, r5
   1819c:	sub	r6, r6, r5
   181a0:	mov	r8, r1
   181a4:	mov	r9, r2
   181a8:	bl	10fec <fstatfs64@plt-0x20>
   181ac:	asrs	r6, r6, #2
   181b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   181b4:	mov	r4, #0
   181b8:	add	r4, r4, #1
   181bc:	ldr	r3, [r5], #4
   181c0:	mov	r2, r9
   181c4:	mov	r1, r8
   181c8:	mov	r0, r7
   181cc:	blx	r3
   181d0:	cmp	r6, r4
   181d4:	bne	181b8 <__assert_fail@plt+0x6e58>
   181d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   181dc:	andeq	r1, r1, r8, ror sp
   181e0:	andeq	r1, r1, r0, ror sp
   181e4:	bx	lr
   181e8:	ldr	r3, [pc, #12]	; 181fc <__assert_fail@plt+0x6e9c>
   181ec:	mov	r1, #0
   181f0:	add	r3, pc, r3
   181f4:	ldr	r2, [r3]
   181f8:	b	11210 <__cxa_atexit@plt>
   181fc:	andeq	r1, r1, ip, lsr pc
   18200:	mov	r2, r1
   18204:	mov	r1, r0
   18208:	mov	r0, #3
   1820c:	b	112f4 <__xstat64@plt>
   18210:	mov	r2, r1
   18214:	mov	r1, r0
   18218:	mov	r0, #3
   1821c:	b	11114 <__fxstat64@plt>
   18220:	mov	r2, r1
   18224:	mov	r1, r0
   18228:	mov	r0, #3
   1822c:	b	11330 <__lxstat64@plt>
   18230:	push	{lr}		; (str lr, [sp, #-4]!)
   18234:	sub	sp, sp, #12
   18238:	str	r3, [sp]
   1823c:	mov	r3, r2
   18240:	mov	r2, r1
   18244:	mov	r1, r0
   18248:	mov	r0, #3
   1824c:	bl	110fc <__fxstatat64@plt>
   18250:	add	sp, sp, #12
   18254:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018258 <.fini>:
   18258:	push	{r3, lr}
   1825c:	pop	{r3, pc}
