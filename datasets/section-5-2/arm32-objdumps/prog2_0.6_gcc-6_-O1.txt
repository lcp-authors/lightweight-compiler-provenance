
../repos/prog2/0.6:     file format elf32-littlearm


Disassembly of section .init:

00010610 <.init>:
   10610:	push	{r3, lr}
   10614:	bl	106d8 <_start@@Base+0x3c>
   10618:	pop	{r3, pc}

Disassembly of section .plt:

0001061c <printf@plt-0x14>:
   1061c:	push	{lr}		; (str lr, [sp, #-4]!)
   10620:	ldr	lr, [pc, #4]	; 1062c <printf@plt-0x4>
   10624:	add	lr, pc, lr
   10628:	ldr	pc, [lr, #8]!
   1062c:	ldrdeq	r0, [r1], -r4

00010630 <printf@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2516]!	; 0x9d4

0001063c <realloc@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2508]!	; 0x9cc

00010648 <strcpy@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2500]!	; 0x9c4

00010654 <malloc@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2492]!	; 0x9bc

00010660 <__libc_start_main@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2484]!	; 0x9b4

0001066c <__gmon_start__@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2476]!	; 0x9ac

00010678 <strlen@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2468]!	; 0x9a4

00010684 <__isoc99_scanf@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2460]!	; 0x99c

00010690 <abort@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2452]!	; 0x994

Disassembly of section .text:

0001069c <_start@@Base>:
   1069c:	mov	fp, #0
   106a0:	mov	lr, #0
   106a4:	pop	{r1}		; (ldr r1, [sp], #4)
   106a8:	mov	r2, sp
   106ac:	push	{r2}		; (str r2, [sp, #-4]!)
   106b0:	push	{r0}		; (str r0, [sp, #-4]!)
   106b4:	ldr	ip, [pc, #16]	; 106cc <_start@@Base+0x30>
   106b8:	push	{ip}		; (str ip, [sp, #-4]!)
   106bc:	ldr	r0, [pc, #12]	; 106d0 <_start@@Base+0x34>
   106c0:	ldr	r3, [pc, #12]	; 106d4 <_start@@Base+0x38>
   106c4:	bl	10660 <__libc_start_main@plt>
   106c8:	bl	10690 <abort@plt>
   106cc:	andeq	r0, r1, ip, asr #18
   106d0:	andeq	r0, r1, r4, asr #15
   106d4:	andeq	r0, r1, ip, ror #17
   106d8:	ldr	r3, [pc, #20]	; 106f4 <_start@@Base+0x58>
   106dc:	ldr	r2, [pc, #20]	; 106f8 <_start@@Base+0x5c>
   106e0:	add	r3, pc, r3
   106e4:	ldr	r2, [r3, r2]
   106e8:	cmp	r2, #0
   106ec:	bxeq	lr
   106f0:	b	1066c <__gmon_start__@plt>
   106f4:	andeq	r0, r1, r8, lsl r9
   106f8:	andeq	r0, r0, r0, lsr r0
   106fc:	ldr	r3, [pc, #28]	; 10720 <_start@@Base+0x84>
   10700:	ldr	r0, [pc, #28]	; 10724 <_start@@Base+0x88>
   10704:	sub	r3, r3, r0
   10708:	cmp	r3, #6
   1070c:	bxls	lr
   10710:	ldr	r3, [pc, #16]	; 10728 <_start@@Base+0x8c>
   10714:	cmp	r3, #0
   10718:	bxeq	lr
   1071c:	bx	r3
   10720:	andeq	r1, r2, pc, lsr r0
   10724:	andeq	r1, r2, ip, lsr r0
   10728:	andeq	r0, r0, r0
   1072c:	ldr	r1, [pc, #36]	; 10758 <_start@@Base+0xbc>
   10730:	ldr	r0, [pc, #36]	; 1075c <_start@@Base+0xc0>
   10734:	sub	r1, r1, r0
   10738:	asr	r1, r1, #2
   1073c:	add	r1, r1, r1, lsr #31
   10740:	asrs	r1, r1, #1
   10744:	bxeq	lr
   10748:	ldr	r3, [pc, #16]	; 10760 <_start@@Base+0xc4>
   1074c:	cmp	r3, #0
   10750:	bxeq	lr
   10754:	bx	r3
   10758:	andeq	r1, r2, ip, lsr r0
   1075c:	andeq	r1, r2, ip, lsr r0
   10760:	andeq	r0, r0, r0
   10764:	push	{r4, lr}
   10768:	ldr	r4, [pc, #24]	; 10788 <_start@@Base+0xec>
   1076c:	ldrb	r3, [r4]
   10770:	cmp	r3, #0
   10774:	popne	{r4, pc}
   10778:	bl	106fc <_start@@Base+0x60>
   1077c:	mov	r3, #1
   10780:	strb	r3, [r4]
   10784:	pop	{r4, pc}
   10788:	andeq	r1, r2, ip, lsr r0
   1078c:	ldr	r0, [pc, #40]	; 107bc <_start@@Base+0x120>
   10790:	ldr	r3, [r0]
   10794:	cmp	r3, #0
   10798:	bne	107a0 <_start@@Base+0x104>
   1079c:	b	1072c <_start@@Base+0x90>
   107a0:	ldr	r3, [pc, #24]	; 107c0 <_start@@Base+0x124>
   107a4:	cmp	r3, #0
   107a8:	beq	1079c <_start@@Base+0x100>
   107ac:	push	{r4, lr}
   107b0:	blx	r3
   107b4:	pop	{r4, lr}
   107b8:	b	1072c <_start@@Base+0x90>
   107bc:	andeq	r0, r2, r4, lsl pc
   107c0:	andeq	r0, r0, r0

000107c4 <main@@Base>:
   107c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107c8:	sub	sp, sp, #12
   107cc:	ldr	r0, [pc, #260]	; 108d8 <main@@Base+0x114>
   107d0:	bl	10630 <printf@plt>
   107d4:	mov	r0, #1
   107d8:	bl	10654 <malloc@plt>
   107dc:	mov	r8, r0
   107e0:	mov	r0, #1
   107e4:	bl	10654 <malloc@plt>
   107e8:	mov	r5, r0
   107ec:	mov	r7, #0
   107f0:	mov	sl, r7
   107f4:	mov	r6, r7
   107f8:	ldr	r9, [pc, #220]	; 108dc <main@@Base+0x118>
   107fc:	b	10810 <main@@Base+0x4c>
   10800:	add	r6, r6, #1
   10804:	cmp	r4, #10
   10808:	beq	10890 <main@@Base+0xcc>
   1080c:	mov	r7, #0
   10810:	add	r1, sp, #7
   10814:	mov	r0, r9
   10818:	bl	10684 <__isoc99_scanf@plt>
   1081c:	cmp	r0, #1
   10820:	bne	10890 <main@@Base+0xcc>
   10824:	ldrb	r4, [sp, #7]
   10828:	cmp	r4, #10
   1082c:	cmpne	r4, #32
   10830:	bne	1086c <main@@Base+0xa8>
   10834:	mov	r0, r5
   10838:	bl	10678 <strlen@plt>
   1083c:	mov	r7, r0
   10840:	mov	r0, r8
   10844:	bl	10678 <strlen@plt>
   10848:	cmp	r7, r0
   1084c:	bls	10800 <main@@Base+0x3c>
   10850:	mov	r1, r7
   10854:	mov	r0, r8
   10858:	bl	1063c <realloc@plt>
   1085c:	mov	r8, r0
   10860:	mov	r1, r5
   10864:	bl	10648 <strcpy@plt>
   10868:	b	10800 <main@@Base+0x3c>
   1086c:	add	fp, r7, #1
   10870:	mov	r1, fp
   10874:	mov	r0, r5
   10878:	bl	1063c <realloc@plt>
   1087c:	mov	r5, r0
   10880:	strb	r4, [r0, r7]
   10884:	add	sl, sl, #1
   10888:	mov	r7, fp
   1088c:	b	10810 <main@@Base+0x4c>
   10890:	mov	r1, r6
   10894:	ldr	r0, [pc, #68]	; 108e0 <main@@Base+0x11c>
   10898:	bl	10630 <printf@plt>
   1089c:	mov	r1, r8
   108a0:	ldr	r0, [pc, #60]	; 108e4 <main@@Base+0x120>
   108a4:	bl	10630 <printf@plt>
   108a8:	vmov	s15, sl
   108ac:	vcvt.f32.s32	s14, s15
   108b0:	vmov	s15, r6
   108b4:	vcvt.f32.s32	s15, s15
   108b8:	vdiv.f32	s13, s14, s15
   108bc:	vcvt.f64.f32	d7, s13
   108c0:	vmov	r2, r3, d7
   108c4:	ldr	r0, [pc, #28]	; 108e8 <main@@Base+0x124>
   108c8:	bl	10630 <printf@plt>
   108cc:	mov	r0, #0
   108d0:	add	sp, sp, #12
   108d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108d8:	andeq	r0, r1, ip, asr r9
   108dc:	andeq	r0, r1, r4, ror #18
   108e0:	andeq	r0, r1, r8, ror #18
   108e4:	andeq	r0, r1, r0, lsl #19
   108e8:	muleq	r1, r4, r9

000108ec <__libc_csu_init@@Base>:
   108ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108f0:	mov	r7, r0
   108f4:	ldr	r6, [pc, #72]	; 10944 <__libc_csu_init@@Base+0x58>
   108f8:	ldr	r5, [pc, #72]	; 10948 <__libc_csu_init@@Base+0x5c>
   108fc:	add	r6, pc, r6
   10900:	add	r5, pc, r5
   10904:	sub	r6, r6, r5
   10908:	mov	r8, r1
   1090c:	mov	r9, r2
   10910:	bl	10610 <printf@plt-0x20>
   10914:	asrs	r6, r6, #2
   10918:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1091c:	mov	r4, #0
   10920:	add	r4, r4, #1
   10924:	ldr	r3, [r5], #4
   10928:	mov	r2, r9
   1092c:	mov	r1, r8
   10930:	mov	r0, r7
   10934:	blx	r3
   10938:	cmp	r6, r4
   1093c:	bne	10920 <__libc_csu_init@@Base+0x34>
   10940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10944:	andeq	r0, r1, ip, lsl #12
   10948:	andeq	r0, r1, r4, lsl #12

0001094c <__libc_csu_fini@@Base>:
   1094c:	bx	lr

Disassembly of section .fini:

00010950 <.fini>:
   10950:	push	{r3, lr}
   10954:	pop	{r3, pc}
