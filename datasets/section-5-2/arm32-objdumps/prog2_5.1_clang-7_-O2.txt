
../repos/prog2/5.1:     file format elf32-littlearm


Disassembly of section .init:

00010b50 <.init>:
   10b50:	push	{r3, lr}
   10b54:	bl	10c30 <_start@@Base+0x3c>
   10b58:	pop	{r3, pc}

Disassembly of section .plt:

00010b5c <calloc@plt-0x14>:
   10b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b60:	ldr	lr, [pc, #4]	; 10b6c <calloc@plt-0x4>
   10b64:	add	lr, pc, lr
   10b68:	ldr	pc, [lr, #8]!
   10b6c:	muleq	r1, r4, r4

00010b70 <calloc@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #69632	; 0x11000
   10b78:	ldr	pc, [ip, #1172]!	; 0x494

00010b7c <printf@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #69632	; 0x11000
   10b84:	ldr	pc, [ip, #1164]!	; 0x48c

00010b88 <free@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #69632	; 0x11000
   10b90:	ldr	pc, [ip, #1156]!	; 0x484

00010b94 <strcpy@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #69632	; 0x11000
   10b9c:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba0 <puts@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #69632	; 0x11000
   10ba8:	ldr	pc, [ip, #1140]!	; 0x474

00010bac <malloc@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #69632	; 0x11000
   10bb4:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb8 <__libc_start_main@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #69632	; 0x11000
   10bc0:	ldr	pc, [ip, #1124]!	; 0x464

00010bc4 <__gmon_start__@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #69632	; 0x11000
   10bcc:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd0 <strlen@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #69632	; 0x11000
   10bd8:	ldr	pc, [ip, #1108]!	; 0x454

00010bdc <putchar@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #69632	; 0x11000
   10be4:	ldr	pc, [ip, #1100]!	; 0x44c

00010be8 <abort@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #69632	; 0x11000
   10bf0:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00010bf4 <_start@@Base>:
   10bf4:	mov	fp, #0
   10bf8:	mov	lr, #0
   10bfc:	pop	{r1}		; (ldr r1, [sp], #4)
   10c00:	mov	r2, sp
   10c04:	push	{r2}		; (str r2, [sp, #-4]!)
   10c08:	push	{r0}		; (str r0, [sp, #-4]!)
   10c0c:	ldr	ip, [pc, #16]	; 10c24 <_start@@Base+0x30>
   10c10:	push	{ip}		; (str ip, [sp, #-4]!)
   10c14:	ldr	r0, [pc, #12]	; 10c28 <_start@@Base+0x34>
   10c18:	ldr	r3, [pc, #12]	; 10c2c <_start@@Base+0x38>
   10c1c:	bl	10bb8 <__libc_start_main@plt>
   10c20:	bl	10be8 <abort@plt>
   10c24:	andeq	r1, r1, r8, asr #22
   10c28:	andeq	r0, r1, r4, ror #25
   10c2c:	andeq	r1, r1, r8, ror #21
   10c30:	ldr	r3, [pc, #20]	; 10c4c <_start@@Base+0x58>
   10c34:	ldr	r2, [pc, #20]	; 10c50 <_start@@Base+0x5c>
   10c38:	add	r3, pc, r3
   10c3c:	ldr	r2, [r3, r2]
   10c40:	cmp	r2, #0
   10c44:	bxeq	lr
   10c48:	b	10bc4 <__gmon_start__@plt>
   10c4c:	andeq	r1, r1, r0, asr #7
   10c50:	andeq	r0, r0, r8, lsr r0
   10c54:	ldr	r0, [pc, #24]	; 10c74 <_start@@Base+0x80>
   10c58:	ldr	r3, [pc, #24]	; 10c78 <_start@@Base+0x84>
   10c5c:	cmp	r3, r0
   10c60:	bxeq	lr
   10c64:	ldr	r3, [pc, #16]	; 10c7c <_start@@Base+0x88>
   10c68:	cmp	r3, #0
   10c6c:	bxeq	lr
   10c70:	bx	r3
   10c74:	andeq	r2, r2, r4, asr #32
   10c78:	andeq	r2, r2, r4, asr #32
   10c7c:	andeq	r0, r0, r0
   10c80:	ldr	r0, [pc, #36]	; 10cac <_start@@Base+0xb8>
   10c84:	ldr	r1, [pc, #36]	; 10cb0 <_start@@Base+0xbc>
   10c88:	sub	r1, r1, r0
   10c8c:	asr	r1, r1, #2
   10c90:	add	r1, r1, r1, lsr #31
   10c94:	asrs	r1, r1, #1
   10c98:	bxeq	lr
   10c9c:	ldr	r3, [pc, #16]	; 10cb4 <_start@@Base+0xc0>
   10ca0:	cmp	r3, #0
   10ca4:	bxeq	lr
   10ca8:	bx	r3
   10cac:	andeq	r2, r2, r4, asr #32
   10cb0:	andeq	r2, r2, r4, asr #32
   10cb4:	andeq	r0, r0, r0
   10cb8:	push	{r4, lr}
   10cbc:	ldr	r4, [pc, #24]	; 10cdc <_start@@Base+0xe8>
   10cc0:	ldrb	r3, [r4]
   10cc4:	cmp	r3, #0
   10cc8:	popne	{r4, pc}
   10ccc:	bl	10c54 <_start@@Base+0x60>
   10cd0:	mov	r3, #1
   10cd4:	strb	r3, [r4]
   10cd8:	pop	{r4, pc}
   10cdc:	andeq	r2, r2, r4, asr #32
   10ce0:	b	10c80 <_start@@Base+0x8c>

00010ce4 <main@@Base>:
   10ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ce8:	add	fp, sp, #28
   10cec:	sub	sp, sp, #4
   10cf0:	vpush	{d8}
   10cf4:	sub	sp, sp, #40	; 0x28
   10cf8:	mov	r0, #4
   10cfc:	mov	r1, #3
   10d00:	bl	11484 <armazem_novo@@Base>
   10d04:	mov	r4, r0
   10d08:	ldr	r0, [pc, #1416]	; 11298 <main@@Base+0x5b4>
   10d0c:	add	r0, pc, r0
   10d10:	bl	10ba0 <puts@plt>
   10d14:	ldr	r0, [pc, #1408]	; 1129c <main@@Base+0x5b8>
   10d18:	vldr	s0, [pc, #836]	; 11064 <main@@Base+0x380>
   10d1c:	add	r0, pc, r0
   10d20:	bl	116b4 <contentor_novo@@Base>
   10d24:	mov	r8, r0
   10d28:	ldr	r0, [pc, #1392]	; 112a0 <main@@Base+0x5bc>
   10d2c:	vldr	s0, [pc, #820]	; 11068 <main@@Base+0x384>
   10d30:	add	r0, pc, r0
   10d34:	bl	116b4 <contentor_novo@@Base>
   10d38:	mov	sl, r0
   10d3c:	ldr	r0, [pc, #1376]	; 112a4 <main@@Base+0x5c0>
   10d40:	vldr	s0, [pc, #804]	; 1106c <main@@Base+0x388>
   10d44:	add	r0, pc, r0
   10d48:	bl	116b4 <contentor_novo@@Base>
   10d4c:	str	r0, [sp, #24]
   10d50:	vldr	s0, [pc, #792]	; 11070 <main@@Base+0x38c>
   10d54:	ldr	r0, [pc, #1356]	; 112a8 <main@@Base+0x5c4>
   10d58:	add	r0, pc, r0
   10d5c:	bl	116b4 <contentor_novo@@Base>
   10d60:	mov	r5, r0
   10d64:	ldr	r0, [pc, #1344]	; 112ac <main@@Base+0x5c8>
   10d68:	vldr	s16, [pc, #772]	; 11074 <main@@Base+0x390>
   10d6c:	add	r0, pc, r0
   10d70:	vmov.f32	s0, s16
   10d74:	bl	116b4 <contentor_novo@@Base>
   10d78:	str	r0, [sp, #8]
   10d7c:	vldr	s0, [pc, #756]	; 11078 <main@@Base+0x394>
   10d80:	ldr	r0, [pc, #1320]	; 112b0 <main@@Base+0x5cc>
   10d84:	add	r0, pc, r0
   10d88:	bl	116b4 <contentor_novo@@Base>
   10d8c:	str	r0, [sp, #16]
   10d90:	vldr	s0, [pc, #740]	; 1107c <main@@Base+0x398>
   10d94:	ldr	r0, [pc, #1304]	; 112b4 <main@@Base+0x5d0>
   10d98:	add	r0, pc, r0
   10d9c:	bl	116b4 <contentor_novo@@Base>
   10da0:	str	r0, [sp, #20]
   10da4:	vldr	s0, [pc, #724]	; 11080 <main@@Base+0x39c>
   10da8:	ldr	r0, [pc, #1288]	; 112b8 <main@@Base+0x5d4>
   10dac:	add	r0, pc, r0
   10db0:	bl	116b4 <contentor_novo@@Base>
   10db4:	str	r0, [sp, #12]
   10db8:	vmov.f32	s0, s16
   10dbc:	ldr	r0, [pc, #1272]	; 112bc <main@@Base+0x5d8>
   10dc0:	add	r0, pc, r0
   10dc4:	bl	116b4 <contentor_novo@@Base>
   10dc8:	mov	r9, r0
   10dcc:	ldr	r0, [pc, #1260]	; 112c0 <main@@Base+0x5dc>
   10dd0:	vldr	s0, [pc, #684]	; 11084 <main@@Base+0x3a0>
   10dd4:	add	r0, pc, r0
   10dd8:	bl	116b4 <contentor_novo@@Base>
   10ddc:	mov	r7, r0
   10de0:	ldr	r0, [pc, #1244]	; 112c4 <main@@Base+0x5e0>
   10de4:	vldr	s0, [pc, #668]	; 11088 <main@@Base+0x3a4>
   10de8:	add	r0, pc, r0
   10dec:	bl	116b4 <contentor_novo@@Base>
   10df0:	str	r0, [sp, #28]
   10df4:	vldr	s0, [pc, #656]	; 1108c <main@@Base+0x3a8>
   10df8:	ldr	r0, [pc, #1224]	; 112c8 <main@@Base+0x5e4>
   10dfc:	add	r0, pc, r0
   10e00:	bl	116b4 <contentor_novo@@Base>
   10e04:	str	r0, [sp, #32]
   10e08:	vldr	s0, [pc, #640]	; 11090 <main@@Base+0x3ac>
   10e0c:	ldr	r0, [pc, #1208]	; 112cc <main@@Base+0x5e8>
   10e10:	add	r0, pc, r0
   10e14:	bl	116b4 <contentor_novo@@Base>
   10e18:	str	r0, [sp, #36]	; 0x24
   10e1c:	ldr	r0, [pc, #1196]	; 112d0 <main@@Base+0x5ec>
   10e20:	add	r0, pc, r0
   10e24:	bl	10ba0 <puts@plt>
   10e28:	mov	r0, r4
   10e2c:	bl	1133c <imprimeArmazem@@Base>
   10e30:	ldr	r0, [pc, #1180]	; 112d4 <main@@Base+0x5f0>
   10e34:	add	r0, pc, r0
   10e38:	bl	10ba0 <puts@plt>
   10e3c:	mov	r0, r4
   10e40:	mov	r1, r8
   10e44:	bl	1154c <armazenar_contentor@@Base>
   10e48:	cmp	r0, #0
   10e4c:	beq	10e60 <main@@Base+0x17c>
   10e50:	ldr	r1, [r8]
   10e54:	ldr	r0, [pc, #1148]	; 112d8 <main@@Base+0x5f4>
   10e58:	add	r0, pc, r0
   10e5c:	bl	10b7c <printf@plt>
   10e60:	mov	r0, r4
   10e64:	mov	r1, sl
   10e68:	bl	1154c <armazenar_contentor@@Base>
   10e6c:	cmp	r0, #0
   10e70:	beq	10e84 <main@@Base+0x1a0>
   10e74:	ldr	r1, [sl]
   10e78:	ldr	r0, [pc, #1116]	; 112dc <main@@Base+0x5f8>
   10e7c:	add	r0, pc, r0
   10e80:	bl	10b7c <printf@plt>
   10e84:	ldr	r8, [sp, #24]
   10e88:	mov	r0, r4
   10e8c:	mov	r1, r8
   10e90:	bl	1154c <armazenar_contentor@@Base>
   10e94:	cmp	r0, #0
   10e98:	str	r7, [sp, #4]
   10e9c:	beq	10eb0 <main@@Base+0x1cc>
   10ea0:	ldr	r1, [r8]
   10ea4:	ldr	r0, [pc, #1076]	; 112e0 <main@@Base+0x5fc>
   10ea8:	add	r0, pc, r0
   10eac:	bl	10b7c <printf@plt>
   10eb0:	mov	r0, r4
   10eb4:	mov	r1, r5
   10eb8:	bl	1154c <armazenar_contentor@@Base>
   10ebc:	ldr	r7, [sp, #12]
   10ec0:	cmp	r0, #0
   10ec4:	beq	10ed8 <main@@Base+0x1f4>
   10ec8:	ldr	r1, [r5]
   10ecc:	ldr	r0, [pc, #1040]	; 112e4 <main@@Base+0x600>
   10ed0:	add	r0, pc, r0
   10ed4:	bl	10b7c <printf@plt>
   10ed8:	ldr	r0, [pc, #1032]	; 112e8 <main@@Base+0x604>
   10edc:	add	r0, pc, r0
   10ee0:	bl	10ba0 <puts@plt>
   10ee4:	mov	r0, r4
   10ee8:	bl	1133c <imprimeArmazem@@Base>
   10eec:	ldr	r0, [pc, #1016]	; 112ec <main@@Base+0x608>
   10ef0:	add	r0, pc, r0
   10ef4:	bl	10ba0 <puts@plt>
   10ef8:	ldr	r5, [sp, #8]
   10efc:	mov	r0, r4
   10f00:	mov	r1, r5
   10f04:	bl	1154c <armazenar_contentor@@Base>
   10f08:	ldr	r6, [sp, #20]
   10f0c:	cmp	r0, #0
   10f10:	beq	10f24 <main@@Base+0x240>
   10f14:	ldr	r1, [r5]
   10f18:	ldr	r0, [pc, #976]	; 112f0 <main@@Base+0x60c>
   10f1c:	add	r0, pc, r0
   10f20:	bl	10b7c <printf@plt>
   10f24:	ldr	sl, [sp, #16]
   10f28:	mov	r0, r4
   10f2c:	mov	r1, sl
   10f30:	bl	1154c <armazenar_contentor@@Base>
   10f34:	ldr	r5, [sp, #32]
   10f38:	cmp	r0, #0
   10f3c:	beq	10f50 <main@@Base+0x26c>
   10f40:	ldr	r1, [sl]
   10f44:	ldr	r0, [pc, #936]	; 112f4 <main@@Base+0x610>
   10f48:	add	r0, pc, r0
   10f4c:	bl	10b7c <printf@plt>
   10f50:	mov	r0, r4
   10f54:	mov	r1, r6
   10f58:	bl	1154c <armazenar_contentor@@Base>
   10f5c:	cmp	r0, #0
   10f60:	mov	r0, r6
   10f64:	ldr	r6, [sp, #28]
   10f68:	beq	10f7c <main@@Base+0x298>
   10f6c:	ldr	r1, [r0]
   10f70:	ldr	r0, [pc, #896]	; 112f8 <main@@Base+0x614>
   10f74:	add	r0, pc, r0
   10f78:	bl	10b7c <printf@plt>
   10f7c:	mov	r0, r4
   10f80:	mov	r1, r7
   10f84:	bl	1154c <armazenar_contentor@@Base>
   10f88:	cmp	r0, #0
   10f8c:	beq	10fa0 <main@@Base+0x2bc>
   10f90:	ldr	r1, [r7]
   10f94:	ldr	r0, [pc, #864]	; 112fc <main@@Base+0x618>
   10f98:	add	r0, pc, r0
   10f9c:	bl	10b7c <printf@plt>
   10fa0:	mov	r0, r4
   10fa4:	mov	r1, r9
   10fa8:	bl	1154c <armazenar_contentor@@Base>
   10fac:	cmp	r0, #0
   10fb0:	beq	10fc4 <main@@Base+0x2e0>
   10fb4:	ldr	r1, [r9]
   10fb8:	ldr	r0, [pc, #832]	; 11300 <main@@Base+0x61c>
   10fbc:	add	r0, pc, r0
   10fc0:	bl	10b7c <printf@plt>
   10fc4:	ldr	r7, [sp, #4]
   10fc8:	mov	r0, r4
   10fcc:	mov	r1, r7
   10fd0:	bl	1154c <armazenar_contentor@@Base>
   10fd4:	cmp	r0, #0
   10fd8:	beq	10fec <main@@Base+0x308>
   10fdc:	ldr	r1, [r7]
   10fe0:	ldr	r0, [pc, #796]	; 11304 <main@@Base+0x620>
   10fe4:	add	r0, pc, r0
   10fe8:	bl	10b7c <printf@plt>
   10fec:	mov	r0, r4
   10ff0:	mov	r1, r6
   10ff4:	bl	1154c <armazenar_contentor@@Base>
   10ff8:	cmp	r0, #0
   10ffc:	beq	11010 <main@@Base+0x32c>
   11000:	ldr	r1, [r6]
   11004:	ldr	r0, [pc, #764]	; 11308 <main@@Base+0x624>
   11008:	add	r0, pc, r0
   1100c:	bl	10b7c <printf@plt>
   11010:	mov	r0, r4
   11014:	mov	r1, r5
   11018:	bl	1154c <armazenar_contentor@@Base>
   1101c:	cmp	r0, #0
   11020:	beq	11034 <main@@Base+0x350>
   11024:	ldr	r1, [r5]
   11028:	ldr	r0, [pc, #732]	; 1130c <main@@Base+0x628>
   1102c:	add	r0, pc, r0
   11030:	bl	10b7c <printf@plt>
   11034:	ldr	r0, [pc, #724]	; 11310 <main@@Base+0x62c>
   11038:	add	r0, pc, r0
   1103c:	bl	10ba0 <puts@plt>
   11040:	mov	r0, r4
   11044:	bl	1133c <imprimeArmazem@@Base>
   11048:	mov	r0, r4
   1104c:	bl	114e0 <armazem_cheio@@Base>
   11050:	cmp	r0, #0
   11054:	beq	11094 <main@@Base+0x3b0>
   11058:	ldr	r0, [pc, #692]	; 11314 <main@@Base+0x630>
   1105c:	add	r0, pc, r0
   11060:	b	1109c <main@@Base+0x3b8>
   11064:	cmnmi	r6, #0
   11068:	cmnmi	sl, #0
   1106c:	strmi	r8, [r4], #-0
   11070:	ldrtmi	r8, [r1], #-0
   11074:			; <UNDEFINED> instruction: 0x43be0000
   11078:	bicmi	r0, r3, #0
   1107c:	sbcmi	r0, r8, #0
   11080:	adcmi	r0, r0, #0
   11084:	tstmi	r6, #0
   11088:	orrmi	r0, r7, #0
   1108c:	bicsmi	r0, r7, #0
   11090:	movtmi	r0, #32768	; 0x8000
   11094:	ldr	r0, [pc, #636]	; 11318 <main@@Base+0x634>
   11098:	add	r0, pc, r0
   1109c:	bl	10ba0 <puts@plt>
   110a0:	ldr	r1, [sp, #36]	; 0x24
   110a4:	mov	r0, r4
   110a8:	bl	1154c <armazenar_contentor@@Base>
   110ac:	cmp	r0, #0
   110b0:	beq	110c4 <main@@Base+0x3e0>
   110b4:	ldr	r1, [r8]
   110b8:	ldr	r0, [pc, #604]	; 1131c <main@@Base+0x638>
   110bc:	add	r0, pc, r0
   110c0:	bl	10b7c <printf@plt>
   110c4:	ldr	r0, [pc, #596]	; 11320 <main@@Base+0x63c>
   110c8:	add	r0, pc, r0
   110cc:	bl	10ba0 <puts@plt>
   110d0:	mov	r0, r4
   110d4:	bl	11614 <expedir_contentor@@Base>
   110d8:	ldr	r5, [pc, #580]	; 11324 <main@@Base+0x640>
   110dc:	mov	r6, r0
   110e0:	add	r5, pc, r5
   110e4:	mov	r0, r5
   110e8:	bl	10ba0 <puts@plt>
   110ec:	mov	r0, r6
   110f0:	bl	11720 <contentor_imprime@@Base>
   110f4:	mov	r0, r4
   110f8:	bl	11614 <expedir_contentor@@Base>
   110fc:	mov	r6, r0
   11100:	mov	r0, r5
   11104:	bl	10ba0 <puts@plt>
   11108:	mov	r0, r6
   1110c:	bl	11720 <contentor_imprime@@Base>
   11110:	mov	r0, r4
   11114:	bl	11614 <expedir_contentor@@Base>
   11118:	mov	r6, r0
   1111c:	mov	r0, r5
   11120:	bl	10ba0 <puts@plt>
   11124:	mov	r0, r6
   11128:	bl	11720 <contentor_imprime@@Base>
   1112c:	mov	r0, r4
   11130:	bl	11614 <expedir_contentor@@Base>
   11134:	mov	r6, r0
   11138:	mov	r0, r5
   1113c:	bl	10ba0 <puts@plt>
   11140:	mov	r0, r6
   11144:	bl	11720 <contentor_imprime@@Base>
   11148:	mov	r0, r4
   1114c:	bl	11614 <expedir_contentor@@Base>
   11150:	mov	r6, r0
   11154:	mov	r0, r5
   11158:	bl	10ba0 <puts@plt>
   1115c:	mov	r0, r6
   11160:	bl	11720 <contentor_imprime@@Base>
   11164:	mov	r0, r4
   11168:	bl	11614 <expedir_contentor@@Base>
   1116c:	mov	r6, r0
   11170:	mov	r0, r5
   11174:	bl	10ba0 <puts@plt>
   11178:	mov	r0, r6
   1117c:	bl	11720 <contentor_imprime@@Base>
   11180:	mov	r0, r4
   11184:	bl	11614 <expedir_contentor@@Base>
   11188:	mov	r6, r0
   1118c:	mov	r0, r5
   11190:	bl	10ba0 <puts@plt>
   11194:	mov	r0, r6
   11198:	bl	11720 <contentor_imprime@@Base>
   1119c:	mov	r0, r4
   111a0:	bl	11614 <expedir_contentor@@Base>
   111a4:	mov	r6, r0
   111a8:	mov	r0, r5
   111ac:	bl	10ba0 <puts@plt>
   111b0:	mov	r0, r6
   111b4:	bl	11720 <contentor_imprime@@Base>
   111b8:	ldr	r0, [pc, #360]	; 11328 <main@@Base+0x644>
   111bc:	add	r0, pc, r0
   111c0:	bl	10ba0 <puts@plt>
   111c4:	mov	r0, r4
   111c8:	bl	1133c <imprimeArmazem@@Base>
   111cc:	ldr	r0, [pc, #344]	; 1132c <main@@Base+0x648>
   111d0:	add	r0, pc, r0
   111d4:	bl	10ba0 <puts@plt>
   111d8:	mov	r0, r4
   111dc:	bl	11614 <expedir_contentor@@Base>
   111e0:	mov	r6, r0
   111e4:	mov	r0, r5
   111e8:	bl	10ba0 <puts@plt>
   111ec:	mov	r0, r6
   111f0:	bl	11720 <contentor_imprime@@Base>
   111f4:	mov	r0, r4
   111f8:	bl	11614 <expedir_contentor@@Base>
   111fc:	mov	r6, r0
   11200:	mov	r0, r5
   11204:	bl	10ba0 <puts@plt>
   11208:	mov	r0, r6
   1120c:	bl	11720 <contentor_imprime@@Base>
   11210:	mov	r0, r4
   11214:	bl	11614 <expedir_contentor@@Base>
   11218:	mov	r6, r0
   1121c:	mov	r0, r5
   11220:	bl	10ba0 <puts@plt>
   11224:	mov	r0, r6
   11228:	bl	11720 <contentor_imprime@@Base>
   1122c:	mov	r0, r4
   11230:	bl	11614 <expedir_contentor@@Base>
   11234:	mov	r6, r0
   11238:	mov	r0, r5
   1123c:	bl	10ba0 <puts@plt>
   11240:	mov	r0, r6
   11244:	bl	11720 <contentor_imprime@@Base>
   11248:	ldr	r0, [pc, #224]	; 11330 <main@@Base+0x64c>
   1124c:	add	r0, pc, r0
   11250:	bl	10ba0 <puts@plt>
   11254:	mov	r0, r4
   11258:	bl	1133c <imprimeArmazem@@Base>
   1125c:	mov	r0, r4
   11260:	bl	114b8 <armazem_vazio@@Base>
   11264:	cmp	r0, #0
   11268:	beq	11278 <main@@Base+0x594>
   1126c:	ldr	r0, [pc, #192]	; 11334 <main@@Base+0x650>
   11270:	add	r0, pc, r0
   11274:	b	11280 <main@@Base+0x59c>
   11278:	ldr	r0, [pc, #184]	; 11338 <main@@Base+0x654>
   1127c:	add	r0, pc, r0
   11280:	bl	10ba0 <puts@plt>
   11284:	mov	r0, #0
   11288:	sub	sp, fp, #40	; 0x28
   1128c:	vpop	{d8}
   11290:	add	sp, sp, #4
   11294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11298:	andeq	r0, r0, ip, asr pc
   1129c:	andeq	r0, r0, r0, asr #28
   112a0:	andeq	r0, r0, r3, lsr lr
   112a4:	andeq	r0, r0, r2, lsr #28
   112a8:	andeq	r0, r0, r5, lsl lr
   112ac:	andeq	r0, r0, r7, lsl #28
   112b0:	strdeq	r0, [r0], -r5
   112b4:	andeq	r0, r0, r9, ror #27
   112b8:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   112bc:	ldrdeq	r0, [r0], -r2
   112c0:	andeq	r0, r0, sl, asr #27
   112c4:			; <UNDEFINED> instruction: 0x00000dbe
   112c8:			; <UNDEFINED> instruction: 0x00000db3
   112cc:	andeq	r0, r0, r5, lsr #27
   112d0:	andeq	r0, r0, r8, ror #28
   112d4:	andeq	r0, r0, r4, ror lr
   112d8:	andeq	r0, r0, r5, ror #26
   112dc:	andeq	r0, r0, r1, asr #26
   112e0:	andeq	r0, r0, r5, lsl sp
   112e4:	andeq	r0, r0, sp, ror #25
   112e8:	strdeq	r0, [r0], -ip
   112ec:	andeq	r0, r0, r8, lsl #28
   112f0:	andeq	r0, r0, r1, lsr #25
   112f4:	andeq	r0, r0, r5, ror ip
   112f8:	andeq	r0, r0, r9, asr #24
   112fc:	andeq	r0, r0, r5, lsr #24
   11300:	andeq	r0, r0, r1, lsl #24
   11304:	ldrdeq	r0, [r0], -r9
   11308:			; <UNDEFINED> instruction: 0x00000bb5
   1130c:	muleq	r0, r1, fp
   11310:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11314:	andeq	r0, r0, pc, ror #23
   11318:			; <UNDEFINED> instruction: 0x00000cb0
   1131c:	andeq	r0, r0, r7, lsr #22
   11320:			; <UNDEFINED> instruction: 0x00000cb0
   11324:	andeq	r0, r0, r8, ror #26
   11328:	andeq	r0, r0, ip, ror #23
   1132c:	strdeq	r0, [r0], -r8
   11330:	andeq	r0, r0, ip, lsr #23
   11334:	andeq	r0, r0, sp, asr #19
   11338:	muleq	r0, ip, fp

0001133c <imprimeArmazem@@Base>:
   1133c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11340:	add	fp, sp, #28
   11344:	sub	sp, sp, #4
   11348:	cmp	r0, #0
   1134c:	beq	11464 <imprimeArmazem@@Base+0x128>
   11350:	ldr	r4, [r0, #8]
   11354:	mov	sl, r0
   11358:	cmp	r4, #0
   1135c:	beq	11464 <imprimeArmazem@@Base+0x128>
   11360:	ldr	r8, [r4, #4]
   11364:	mov	r1, #4
   11368:	mov	r0, r8
   1136c:	bl	10b70 <calloc@plt>
   11370:	str	r0, [sp]
   11374:	ldr	r0, [r4]
   11378:	cmp	r0, #0
   1137c:	beq	1139c <imprimeArmazem@@Base+0x60>
   11380:	ldr	r1, [sp]
   11384:	ldr	r2, [r0]
   11388:	ldr	r2, [r2, #4]
   1138c:	str	r2, [r1], #4
   11390:	ldr	r0, [r0, #4]
   11394:	cmp	r0, #0
   11398:	bne	11384 <imprimeArmazem@@Base+0x48>
   1139c:	mov	r0, #10
   113a0:	bl	10bdc <putchar@plt>
   113a4:	ldr	r4, [sl, #4]
   113a8:	cmp	r4, #1
   113ac:	blt	1140c <imprimeArmazem@@Base+0xd0>
   113b0:	ldr	r5, [pc, #180]	; 1146c <imprimeArmazem@@Base+0x130>
   113b4:	ldr	r7, [pc, #180]	; 11470 <imprimeArmazem@@Base+0x134>
   113b8:	add	r5, pc, r5
   113bc:	add	r7, pc, r7
   113c0:	ldr	r0, [pc, #172]	; 11474 <imprimeArmazem@@Base+0x138>
   113c4:	add	r0, pc, r0
   113c8:	bl	10b7c <printf@plt>
   113cc:	cmp	r8, #1
   113d0:	blt	113fc <imprimeArmazem@@Base+0xc0>
   113d4:	ldr	r9, [sp]
   113d8:	mov	r6, r8
   113dc:	ldr	r0, [r9]
   113e0:	cmp	r0, r4
   113e4:	movlt	r0, r5
   113e8:	movge	r0, r7
   113ec:	bl	10b7c <printf@plt>
   113f0:	subs	r6, r6, #1
   113f4:	add	r9, r9, #4
   113f8:	bne	113dc <imprimeArmazem@@Base+0xa0>
   113fc:	mov	r0, #10
   11400:	bl	10bdc <putchar@plt>
   11404:	subs	r4, r4, #1
   11408:	bgt	113c0 <imprimeArmazem@@Base+0x84>
   1140c:	ldr	r0, [pc, #100]	; 11478 <imprimeArmazem@@Base+0x13c>
   11410:	add	r0, pc, r0
   11414:	bl	10b7c <printf@plt>
   11418:	ldr	r0, [sl]
   1141c:	cmp	r0, #1
   11420:	blt	11448 <imprimeArmazem@@Base+0x10c>
   11424:	ldr	r5, [pc, #80]	; 1147c <imprimeArmazem@@Base+0x140>
   11428:	mov	r4, #0
   1142c:	add	r5, pc, r5
   11430:	mov	r0, r5
   11434:	bl	10b7c <printf@plt>
   11438:	ldr	r0, [sl]
   1143c:	add	r4, r4, #1
   11440:	cmp	r4, r0
   11444:	blt	11430 <imprimeArmazem@@Base+0xf4>
   11448:	ldr	r0, [pc, #48]	; 11480 <imprimeArmazem@@Base+0x144>
   1144c:	add	r0, pc, r0
   11450:	bl	10ba0 <puts@plt>
   11454:	ldr	r0, [sp]
   11458:	sub	sp, fp, #28
   1145c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11460:	b	10b88 <free@plt>
   11464:	sub	sp, fp, #28
   11468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1146c:	andeq	r0, r0, fp, ror r8
   11470:	andeq	r0, r0, r2, ror r8
   11474:	andeq	r0, r0, r1, ror r8
   11478:	andeq	r0, r0, sl, lsr #16
   1147c:	andeq	r0, r0, ip, lsl #16
   11480:	muleq	r0, r5, r7

00011484 <armazem_novo@@Base>:
   11484:	push	{r4, r5, r6, sl, fp, lr}
   11488:	add	fp, sp, #16
   1148c:	mov	r5, r0
   11490:	mov	r0, #12
   11494:	mov	r4, r1
   11498:	bl	10bac <malloc@plt>
   1149c:	str	r5, [r0]
   114a0:	mov	r6, r0
   114a4:	str	r4, [r0, #4]
   114a8:	bl	117a4 <fila_nova@@Base>
   114ac:	str	r0, [r6, #8]
   114b0:	mov	r0, r6
   114b4:	pop	{r4, r5, r6, sl, fp, pc}

000114b8 <armazem_vazio@@Base>:
   114b8:	cmp	r0, #0
   114bc:	moveq	r0, #1
   114c0:	bxeq	lr
   114c4:	push	{fp, lr}
   114c8:	mov	fp, sp
   114cc:	ldr	r0, [r0, #8]
   114d0:	bl	11814 <fila_tamanho@@Base>
   114d4:	clz	r0, r0
   114d8:	lsr	r0, r0, #5
   114dc:	pop	{fp, pc}

000114e0 <armazem_cheio@@Base>:
   114e0:	push	{r4, r5, fp, lr}
   114e4:	add	fp, sp, #8
   114e8:	mov	r5, #0
   114ec:	cmp	r0, #0
   114f0:	beq	11538 <armazem_cheio@@Base+0x58>
   114f4:	mov	r4, r0
   114f8:	ldr	r0, [r0, #8]
   114fc:	bl	11814 <fila_tamanho@@Base>
   11500:	cmp	r0, #0
   11504:	beq	11538 <armazem_cheio@@Base+0x58>
   11508:	ldr	r0, [r4, #8]
   1150c:	bl	11814 <fila_tamanho@@Base>
   11510:	ldr	r1, [r4]
   11514:	cmp	r0, r1
   11518:	bne	11540 <armazem_cheio@@Base+0x60>
   1151c:	ldr	r0, [r4, #8]
   11520:	bl	11844 <fila_back@@Base>
   11524:	ldr	r1, [r4, #4]
   11528:	ldr	r0, [r0, #4]
   1152c:	mov	r5, #1
   11530:	cmp	r0, r1
   11534:	movne	r5, #0
   11538:	mov	r0, r5
   1153c:	pop	{r4, r5, fp, pc}
   11540:	mov	r5, #0
   11544:	mov	r0, r5
   11548:	pop	{r4, r5, fp, pc}

0001154c <armazenar_contentor@@Base>:
   1154c:	push	{r4, r5, r6, r7, fp, lr}
   11550:	add	fp, sp, #16
   11554:	mov	r4, r1
   11558:	mov	r5, r0
   1155c:	bl	11994 <pilha_nova@@Base>
   11560:	cmp	r5, #0
   11564:	mov	r7, #0
   11568:	cmpne	r4, #0
   1156c:	beq	1160c <armazenar_contentor@@Base+0xc0>
   11570:	mov	r6, r0
   11574:	ldr	r0, [r5, #8]
   11578:	bl	11814 <fila_tamanho@@Base>
   1157c:	cmp	r0, #0
   11580:	beq	115b0 <armazenar_contentor@@Base+0x64>
   11584:	ldr	r0, [r5, #8]
   11588:	bl	11814 <fila_tamanho@@Base>
   1158c:	ldr	r1, [r5]
   11590:	cmp	r0, r1
   11594:	bne	115b0 <armazenar_contentor@@Base+0x64>
   11598:	ldr	r0, [r5, #8]
   1159c:	bl	11844 <fila_back@@Base>
   115a0:	ldr	r1, [r5, #4]
   115a4:	ldr	r0, [r0, #4]
   115a8:	cmp	r0, r1
   115ac:	beq	1160c <armazenar_contentor@@Base+0xc0>
   115b0:	ldr	r0, [r5, #8]
   115b4:	bl	11814 <fila_tamanho@@Base>
   115b8:	cmp	r0, #0
   115bc:	bne	115d4 <armazenar_contentor@@Base+0x88>
   115c0:	ldr	r7, [r5, #8]
   115c4:	bl	11994 <pilha_nova@@Base>
   115c8:	mov	r1, r0
   115cc:	mov	r0, r7
   115d0:	bl	1187c <fila_push@@Base>
   115d4:	ldr	r0, [r5, #8]
   115d8:	bl	11844 <fila_back@@Base>
   115dc:	ldr	r1, [r5, #4]
   115e0:	ldr	r0, [r0, #4]
   115e4:	cmp	r0, r1
   115e8:	bne	115f8 <armazenar_contentor@@Base+0xac>
   115ec:	ldr	r0, [r5, #8]
   115f0:	mov	r1, r6
   115f4:	bl	1187c <fila_push@@Base>
   115f8:	ldr	r0, [r5, #8]
   115fc:	bl	11844 <fila_back@@Base>
   11600:	mov	r1, r4
   11604:	bl	11a34 <pilha_push@@Base>
   11608:	mov	r7, #1
   1160c:	mov	r0, r7
   11610:	pop	{r4, r5, r6, r7, fp, pc}

00011614 <expedir_contentor@@Base>:
   11614:	push	{r4, r5, fp, lr}
   11618:	add	fp, sp, #8
   1161c:	mov	r4, #0
   11620:	cmp	r0, #0
   11624:	beq	116ac <expedir_contentor@@Base+0x98>
   11628:	mov	r5, r0
   1162c:	ldr	r0, [r0, #8]
   11630:	bl	11814 <fila_tamanho@@Base>
   11634:	cmp	r0, #0
   11638:	beq	116ac <expedir_contentor@@Base+0x98>
   1163c:	ldr	r0, [r5, #8]
   11640:	bl	11824 <fila_front@@Base>
   11644:	bl	11a14 <pilha_top@@Base>
   11648:	cmp	r0, #0
   1164c:	beq	116ac <expedir_contentor@@Base+0x98>
   11650:	ldr	r0, [r5, #8]
   11654:	bl	11824 <fila_front@@Base>
   11658:	bl	11a14 <pilha_top@@Base>
   1165c:	ldr	r4, [r0]
   11660:	ldr	r0, [r5, #8]
   11664:	bl	11824 <fila_front@@Base>
   11668:	bl	11a14 <pilha_top@@Base>
   1166c:	vldr	s0, [r0, #4]
   11670:	mov	r0, r4
   11674:	bl	116b4 <contentor_novo@@Base>
   11678:	mov	r4, r0
   1167c:	ldr	r0, [r5, #8]
   11680:	bl	11824 <fila_front@@Base>
   11684:	mov	r1, r0
   11688:	ldr	r0, [r5, #8]
   1168c:	ldr	r1, [r1, #4]
   11690:	cmp	r1, #1
   11694:	bgt	116a4 <expedir_contentor@@Base+0x90>
   11698:	bl	118f4 <fila_pop@@Base>
   1169c:	mov	r0, r4
   116a0:	pop	{r4, r5, fp, pc}
   116a4:	bl	11824 <fila_front@@Base>
   116a8:	bl	11aa8 <pilha_pop@@Base>
   116ac:	mov	r0, r4
   116b0:	pop	{r4, r5, fp, pc}

000116b4 <contentor_novo@@Base>:
   116b4:	push	{r4, r5, fp, lr}
   116b8:	add	fp, sp, #8
   116bc:	vpush	{d8}
   116c0:	mov	r4, r0
   116c4:	mov	r0, #8
   116c8:	vmov.f32	s16, s0
   116cc:	bl	10bac <malloc@plt>
   116d0:	mov	r5, r0
   116d4:	mov	r0, r4
   116d8:	bl	10bd0 <strlen@plt>
   116dc:	add	r0, r0, #1
   116e0:	bl	10bac <malloc@plt>
   116e4:	mov	r1, r4
   116e8:	str	r0, [r5]
   116ec:	bl	10b94 <strcpy@plt>
   116f0:	vstr	s16, [r5, #4]
   116f4:	mov	r0, r5
   116f8:	vpop	{d8}
   116fc:	pop	{r4, r5, fp, pc}

00011700 <contentor_apaga@@Base>:
   11700:	push	{r4, sl, fp, lr}
   11704:	add	fp, sp, #8
   11708:	mov	r4, r0
   1170c:	ldr	r0, [r0]
   11710:	bl	10b88 <free@plt>
   11714:	mov	r0, r4
   11718:	pop	{r4, sl, fp, lr}
   1171c:	b	10b88 <free@plt>

00011720 <contentor_imprime@@Base>:
   11720:	cmp	r0, #0
   11724:	beq	11744 <contentor_imprime@@Base+0x24>
   11728:	vldr	s0, [r0, #4]
   1172c:	ldr	r1, [r0]
   11730:	ldr	r0, [pc, #28]	; 11754 <contentor_imprime@@Base+0x34>
   11734:	vcvt.f64.f32	d16, s0
   11738:	add	r0, pc, r0
   1173c:	vmov	r2, r3, d16
   11740:	b	10b7c <printf@plt>
   11744:	ldr	r0, [pc, #4]	; 11750 <contentor_imprime@@Base+0x30>
   11748:	add	r0, pc, r0
   1174c:	b	10ba0 <puts@plt>
   11750:	andeq	r0, r0, fp, asr #14
   11754:	andeq	r0, r0, r0, lsr r7

00011758 <fila_novo_elemento@@Base>:
   11758:	push	{r4, r5, fp, lr}
   1175c:	add	fp, sp, #8
   11760:	mov	r5, r0
   11764:	mov	r0, #8
   11768:	bl	10bac <malloc@plt>
   1176c:	mov	r4, #0
   11770:	cmp	r0, #0
   11774:	beq	11790 <fila_novo_elemento@@Base+0x38>
   11778:	cmp	r5, #0
   1177c:	str	r5, [r0]
   11780:	beq	11798 <fila_novo_elemento@@Base+0x40>
   11784:	mov	r1, #0
   11788:	mov	r4, r0
   1178c:	str	r1, [r0, #4]
   11790:	mov	r0, r4
   11794:	pop	{r4, r5, fp, pc}
   11798:	bl	10b88 <free@plt>
   1179c:	mov	r0, r4
   117a0:	pop	{r4, r5, fp, pc}

000117a4 <fila_nova@@Base>:
   117a4:	push	{fp, lr}
   117a8:	mov	fp, sp
   117ac:	mov	r0, #8
   117b0:	bl	10bac <malloc@plt>
   117b4:	cmp	r0, #0
   117b8:	moveq	r0, #0
   117bc:	movne	r1, #0
   117c0:	strne	r1, [r0]
   117c4:	strne	r1, [r0, #4]
   117c8:	pop	{fp, pc}

000117cc <fila_apaga@@Base>:
   117cc:	cmp	r0, #0
   117d0:	bxeq	lr
   117d4:	push	{r4, r5, fp, lr}
   117d8:	add	fp, sp, #8
   117dc:	mov	r4, r0
   117e0:	b	117fc <fila_apaga@@Base+0x30>
   117e4:	ldr	r0, [r5, #4]
   117e8:	str	r0, [r4]
   117ec:	ldr	r0, [r5]
   117f0:	bl	119bc <pilha_apaga@@Base>
   117f4:	mov	r0, r5
   117f8:	bl	10b88 <free@plt>
   117fc:	ldr	r5, [r4]
   11800:	cmp	r5, #0
   11804:	bne	117e4 <fila_apaga@@Base+0x18>
   11808:	mov	r0, r4
   1180c:	pop	{r4, r5, fp, lr}
   11810:	b	10b88 <free@plt>

00011814 <fila_tamanho@@Base>:
   11814:	cmp	r0, #0
   11818:	ldrne	r0, [r0, #4]
   1181c:	mvneq	r0, #0
   11820:	bx	lr

00011824 <fila_front@@Base>:
   11824:	mov	r1, r0
   11828:	mov	r0, #0
   1182c:	cmp	r1, #0
   11830:	ldrne	r2, [r1, #4]
   11834:	cmpne	r2, #0
   11838:	ldrne	r0, [r1]
   1183c:	ldrne	r0, [r0]
   11840:	bx	lr

00011844 <fila_back@@Base>:
   11844:	mov	r1, r0
   11848:	mov	r0, #0
   1184c:	cmp	r1, #0
   11850:	ldrne	r2, [r1, #4]
   11854:	cmpne	r2, #0
   11858:	bne	11860 <fila_back@@Base+0x1c>
   1185c:	bx	lr
   11860:	ldr	r0, [r1]
   11864:	mov	r1, r0
   11868:	ldr	r0, [r0, #4]
   1186c:	cmp	r0, #0
   11870:	bne	11864 <fila_back@@Base+0x20>
   11874:	ldr	r0, [r1]
   11878:	bx	lr

0001187c <fila_push@@Base>:
   1187c:	push	{r4, r5, r6, sl, fp, lr}
   11880:	add	fp, sp, #16
   11884:	cmp	r0, #0
   11888:	beq	118e8 <fila_push@@Base+0x6c>
   1188c:	ldr	r6, [r0]
   11890:	mov	r4, r0
   11894:	mov	r0, #8
   11898:	mov	r5, r1
   1189c:	bl	10bac <malloc@plt>
   118a0:	cmp	r0, #0
   118a4:	popeq	{r4, r5, r6, sl, fp, pc}
   118a8:	cmp	r5, #0
   118ac:	str	r5, [r0]
   118b0:	beq	118ec <fila_push@@Base+0x70>
   118b4:	mov	r1, #0
   118b8:	cmp	r6, #0
   118bc:	str	r1, [r0, #4]
   118c0:	ldr	r1, [r4, #4]
   118c4:	add	r1, r1, #1
   118c8:	str	r1, [r4, #4]
   118cc:	streq	r0, [r4]
   118d0:	popeq	{r4, r5, r6, sl, fp, pc}
   118d4:	mov	r1, r6
   118d8:	ldr	r6, [r6, #4]
   118dc:	cmp	r6, #0
   118e0:	bne	118d4 <fila_push@@Base+0x58>
   118e4:	str	r0, [r1, #4]
   118e8:	pop	{r4, r5, r6, sl, fp, pc}
   118ec:	pop	{r4, r5, r6, sl, fp, lr}
   118f0:	b	10b88 <free@plt>

000118f4 <fila_pop@@Base>:
   118f4:	cmp	r0, #0
   118f8:	ldrne	r1, [r0, #4]
   118fc:	cmpne	r1, #0
   11900:	bxeq	lr
   11904:	push	{r4, sl, fp, lr}
   11908:	add	fp, sp, #8
   1190c:	sub	r1, r1, #1
   11910:	str	r1, [r0, #4]
   11914:	ldr	r4, [r0]
   11918:	ldr	r1, [r4, #4]
   1191c:	str	r1, [r0]
   11920:	ldr	r0, [r4]
   11924:	bl	119bc <pilha_apaga@@Base>
   11928:	mov	r0, r4
   1192c:	pop	{r4, sl, fp, lr}
   11930:	b	10b88 <free@plt>

00011934 <pilha_novo_elemento@@Base>:
   11934:	push	{r4, r5, r6, sl, fp, lr}
   11938:	add	fp, sp, #16
   1193c:	mov	r6, r0
   11940:	mov	r0, #8
   11944:	bl	10bac <malloc@plt>
   11948:	mov	r4, #0
   1194c:	cmp	r0, #0
   11950:	beq	1197c <pilha_novo_elemento@@Base+0x48>
   11954:	mov	r5, r0
   11958:	vldr	s0, [r6, #4]
   1195c:	ldr	r0, [r6]
   11960:	bl	116b4 <contentor_novo@@Base>
   11964:	cmp	r0, #0
   11968:	str	r0, [r5]
   1196c:	beq	11984 <pilha_novo_elemento@@Base+0x50>
   11970:	mov	r0, #0
   11974:	mov	r4, r5
   11978:	str	r0, [r5, #4]
   1197c:	mov	r0, r4
   11980:	pop	{r4, r5, r6, sl, fp, pc}
   11984:	mov	r0, r5
   11988:	bl	10b88 <free@plt>
   1198c:	mov	r0, r4
   11990:	pop	{r4, r5, r6, sl, fp, pc}

00011994 <pilha_nova@@Base>:
   11994:	push	{fp, lr}
   11998:	mov	fp, sp
   1199c:	mov	r0, #8
   119a0:	bl	10bac <malloc@plt>
   119a4:	cmp	r0, #0
   119a8:	moveq	r0, #0
   119ac:	movne	r1, #0
   119b0:	strne	r1, [r0]
   119b4:	strne	r1, [r0, #4]
   119b8:	pop	{fp, pc}

000119bc <pilha_apaga@@Base>:
   119bc:	cmp	r0, #0
   119c0:	bxeq	lr
   119c4:	push	{r4, r5, fp, lr}
   119c8:	add	fp, sp, #8
   119cc:	mov	r4, r0
   119d0:	b	119ec <pilha_apaga@@Base+0x30>
   119d4:	ldr	r0, [r5, #4]
   119d8:	str	r0, [r4]
   119dc:	ldr	r0, [r5]
   119e0:	bl	11700 <contentor_apaga@@Base>
   119e4:	mov	r0, r5
   119e8:	bl	10b88 <free@plt>
   119ec:	ldr	r5, [r4]
   119f0:	cmp	r5, #0
   119f4:	bne	119d4 <pilha_apaga@@Base+0x18>
   119f8:	mov	r0, r4
   119fc:	pop	{r4, r5, fp, lr}
   11a00:	b	10b88 <free@plt>

00011a04 <pilha_tamanho@@Base>:
   11a04:	cmp	r0, #0
   11a08:	ldrne	r0, [r0, #4]
   11a0c:	mvneq	r0, #0
   11a10:	bx	lr

00011a14 <pilha_top@@Base>:
   11a14:	mov	r1, r0
   11a18:	mov	r0, #0
   11a1c:	cmp	r1, #0
   11a20:	ldrne	r2, [r1, #4]
   11a24:	cmpne	r2, #0
   11a28:	ldrne	r0, [r1]
   11a2c:	ldrne	r0, [r0]
   11a30:	bx	lr

00011a34 <pilha_push@@Base>:
   11a34:	push	{r4, r5, r6, sl, fp, lr}
   11a38:	add	fp, sp, #16
   11a3c:	cmp	r0, #0
   11a40:	beq	11a98 <pilha_push@@Base+0x64>
   11a44:	mov	r4, r0
   11a48:	mov	r0, #8
   11a4c:	mov	r6, r1
   11a50:	bl	10bac <malloc@plt>
   11a54:	cmp	r0, #0
   11a58:	popeq	{r4, r5, r6, sl, fp, pc}
   11a5c:	mov	r5, r0
   11a60:	vldr	s0, [r6, #4]
   11a64:	ldr	r0, [r6]
   11a68:	bl	116b4 <contentor_novo@@Base>
   11a6c:	cmp	r0, #0
   11a70:	str	r0, [r5]
   11a74:	beq	11a9c <pilha_push@@Base+0x68>
   11a78:	mov	r0, #0
   11a7c:	str	r0, [r5, #4]
   11a80:	ldm	r4, {r0, r1}
   11a84:	add	r1, r1, #1
   11a88:	cmp	r0, #0
   11a8c:	str	r1, [r4, #4]
   11a90:	strne	r0, [r5, #4]
   11a94:	str	r5, [r4]
   11a98:	pop	{r4, r5, r6, sl, fp, pc}
   11a9c:	mov	r0, r5
   11aa0:	pop	{r4, r5, r6, sl, fp, lr}
   11aa4:	b	10b88 <free@plt>

00011aa8 <pilha_pop@@Base>:
   11aa8:	cmp	r0, #0
   11aac:	ldrne	r1, [r0, #4]
   11ab0:	cmpne	r1, #0
   11ab4:	bxeq	lr
   11ab8:	push	{r4, sl, fp, lr}
   11abc:	add	fp, sp, #8
   11ac0:	ldr	r4, [r0]
   11ac4:	sub	r1, r1, #1
   11ac8:	ldr	r2, [r4, #4]
   11acc:	str	r2, [r0]
   11ad0:	str	r1, [r0, #4]
   11ad4:	ldr	r0, [r4]
   11ad8:	bl	11700 <contentor_apaga@@Base>
   11adc:	mov	r0, r4
   11ae0:	pop	{r4, sl, fp, lr}
   11ae4:	b	10b88 <free@plt>

00011ae8 <__libc_csu_init@@Base>:
   11ae8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11aec:	mov	r7, r0
   11af0:	ldr	r6, [pc, #72]	; 11b40 <__libc_csu_init@@Base+0x58>
   11af4:	ldr	r5, [pc, #72]	; 11b44 <__libc_csu_init@@Base+0x5c>
   11af8:	add	r6, pc, r6
   11afc:	add	r5, pc, r5
   11b00:	sub	r6, r6, r5
   11b04:	mov	r8, r1
   11b08:	mov	r9, r2
   11b0c:	bl	10b50 <calloc@plt-0x20>
   11b10:	asrs	r6, r6, #2
   11b14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b18:	mov	r4, #0
   11b1c:	add	r4, r4, #1
   11b20:	ldr	r3, [r5], #4
   11b24:	mov	r2, r9
   11b28:	mov	r1, r8
   11b2c:	mov	r0, r7
   11b30:	blx	r3
   11b34:	cmp	r6, r4
   11b38:	bne	11b1c <__libc_csu_init@@Base+0x34>
   11b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b40:	andeq	r0, r1, ip, lsl #8
   11b44:	andeq	r0, r1, r4, lsl #8

00011b48 <__libc_csu_fini@@Base>:
   11b48:	bx	lr

Disassembly of section .fini:

00011b4c <.fini>:
   11b4c:	push	{r3, lr}
   11b50:	pop	{r3, pc}
