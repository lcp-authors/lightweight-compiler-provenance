
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010cb8 <.init>:
   10cb8:	push	{r3, lr}
   10cbc:	bl	1113c <_start@@Base+0x3c>
   10cc0:	pop	{r3, pc}

Disassembly of section .plt:

00010cc4 <strcmp@plt-0x14>:
   10cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc8:	ldr	lr, [pc, #4]	; 10cd4 <strcmp@plt-0x4>
   10ccc:	add	lr, pc, lr
   10cd0:	ldr	pc, [lr, #8]!
   10cd4:	andeq	r3, r1, ip, lsr #6

00010cd8 <strcmp@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #77824	; 0x13000
   10ce0:	ldr	pc, [ip, #812]!	; 0x32c

00010ce4 <printf@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #77824	; 0x13000
   10cec:	ldr	pc, [ip, #804]!	; 0x324

00010cf0 <fopen@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #77824	; 0x13000
   10cf8:	ldr	pc, [ip, #796]!	; 0x31c

00010cfc <free@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #77824	; 0x13000
   10d04:	ldr	pc, [ip, #788]!	; 0x314

00010d08 <memcpy@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #77824	; 0x13000
   10d10:	ldr	pc, [ip, #780]!	; 0x30c

00010d14 <ftell@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #77824	; 0x13000
   10d1c:	ldr	pc, [ip, #772]!	; 0x304

00010d20 <rewind@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #77824	; 0x13000
   10d28:	ldr	pc, [ip, #764]!	; 0x2fc

00010d2c <fread@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #77824	; 0x13000
   10d34:	ldr	pc, [ip, #756]!	; 0x2f4

00010d38 <puts@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #77824	; 0x13000
   10d40:	ldr	pc, [ip, #748]!	; 0x2ec

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #77824	; 0x13000
   10d4c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #77824	; 0x13000
   10d58:	ldr	pc, [ip, #732]!	; 0x2dc

00010d5c <__gmon_start__@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #77824	; 0x13000
   10d64:	ldr	pc, [ip, #724]!	; 0x2d4

00010d68 <exit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #77824	; 0x13000
   10d70:	ldr	pc, [ip, #716]!	; 0x2cc

00010d74 <fprintf@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #77824	; 0x13000
   10d7c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d80 <posix_memalign@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #77824	; 0x13000
   10d88:	ldr	pc, [ip, #700]!	; 0x2bc

00010d8c <strncpy@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #77824	; 0x13000
   10d94:	ldr	pc, [ip, #692]!	; 0x2b4

00010d98 <fclose@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #77824	; 0x13000
   10da0:	ldr	pc, [ip, #684]!	; 0x2ac

00010da4 <fputc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #77824	; 0x13000
   10dac:	ldr	pc, [ip, #676]!	; 0x2a4

00010db0 <fseek@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #77824	; 0x13000
   10db8:	ldr	pc, [ip, #668]!	; 0x29c

00010dbc <fputs@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #77824	; 0x13000
   10dc4:	ldr	pc, [ip, #660]!	; 0x294

00010dc8 <abort@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #77824	; 0x13000
   10dd0:	ldr	pc, [ip, #652]!	; 0x28c

00010dd4 <__assert_fail@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #77824	; 0x13000
   10ddc:	ldr	pc, [ip, #644]!	; 0x284

Disassembly of section .text:

00010de0 <main@@Base-0x48>:
   10de0:	push	{r4, lr}
   10de4:	mov	r2, #108	; 0x6c
   10de8:	ldr	r3, [pc, #8]	; 10df8 <__assert_fail@plt+0x24>
   10dec:	ldr	r1, [pc, #8]	; 10dfc <__assert_fail@plt+0x28>
   10df0:	ldr	r0, [pc, #8]	; 10e00 <__assert_fail@plt+0x2c>
   10df4:	bl	10dd4 <__assert_fail@plt>
   10df8:	andeq	r2, r1, r4, ror lr
   10dfc:	ldrdeq	r2, [r1], -r4
   10e00:	andeq	r2, r1, ip, lsr pc
   10e04:	push	{r4, lr}
   10e08:	mov	r2, #380	; 0x17c
   10e0c:	ldr	r3, [pc, #8]	; 10e1c <__assert_fail@plt+0x48>
   10e10:	ldr	r1, [pc, #8]	; 10e20 <__assert_fail@plt+0x4c>
   10e14:	ldr	r0, [pc, #8]	; 10e24 <__assert_fail@plt+0x50>
   10e18:	bl	10dd4 <__assert_fail@plt>
   10e1c:	andeq	r2, r1, sl, lsr #29
   10e20:	andeq	r2, r1, r3, ror pc
   10e24:	andeq	r2, r1, ip, lsr pc

00010e28 <main@@Base>:
   10e28:	sub	r3, r0, #1
   10e2c:	cmp	r3, #1
   10e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e34:	sub	sp, sp, #28
   10e38:	bls	10e54 <main@@Base+0x2c>
   10e3c:	ldr	r3, [pc, #644]	; 110c8 <main@@Base+0x2a0>
   10e40:	ldr	r0, [pc, #644]	; 110cc <main@@Base+0x2a4>
   10e44:	ldr	r1, [r3]
   10e48:	bl	10dbc <fputs@plt>
   10e4c:	mov	r0, #1
   10e50:	bl	10d68 <exit@plt>
   10e54:	cmp	r0, #2
   10e58:	ldr	r3, [pc, #624]	; 110d0 <main@@Base+0x2a8>
   10e5c:	ldreq	r2, [r1, #4]
   10e60:	ldr	r1, [pc, #620]	; 110d4 <main@@Base+0x2ac>
   10e64:	streq	r2, [r3]
   10e68:	ldr	r0, [r3]
   10e6c:	bl	10cf0 <fopen@plt>
   10e70:	subs	r6, r0, #0
   10e74:	moveq	r5, r6
   10e78:	moveq	r4, r5
   10e7c:	beq	10f1c <main@@Base+0xf4>
   10e80:	mov	r2, #2
   10e84:	mov	r1, #0
   10e88:	bl	10db0 <fseek@plt>
   10e8c:	mov	r0, r6
   10e90:	bl	10d14 <ftell@plt>
   10e94:	cmp	r0, #1024	; 0x400
   10e98:	mov	r5, r0
   10e9c:	bhi	10ec8 <main@@Base+0xa0>
   10ea0:	mov	r0, r6
   10ea4:	bl	10d20 <rewind@plt>
   10ea8:	cmp	r5, #0
   10eac:	movne	r0, r5
   10eb0:	moveq	r0, #1
   10eb4:	bl	10d44 <malloc@plt>
   10eb8:	subs	r4, r0, #0
   10ebc:	movne	r7, #0
   10ec0:	movne	r8, #1
   10ec4:	bne	10ef0 <main@@Base+0xc8>
   10ec8:	mov	r4, #0
   10ecc:	mov	r0, r6
   10ed0:	bl	10d98 <fclose@plt>
   10ed4:	cmp	r4, #0
   10ed8:	beq	10f1c <main@@Base+0xf4>
   10edc:	mov	r0, r4
   10ee0:	bl	10cfc <free@plt>
   10ee4:	mov	r4, #0
   10ee8:	b	10f1c <main@@Base+0xf4>
   10eec:	add	r7, r7, r0
   10ef0:	mov	r3, r6
   10ef4:	sub	r2, r5, r7
   10ef8:	mov	r1, r8
   10efc:	add	r0, r4, r7
   10f00:	bl	10d2c <fread@plt>
   10f04:	cmp	r0, #0
   10f08:	bne	10eec <main@@Base+0xc4>
   10f0c:	cmp	r5, r7
   10f10:	bne	10ecc <main@@Base+0xa4>
   10f14:	mov	r0, r6
   10f18:	bl	10d98 <fclose@plt>
   10f1c:	add	r9, sp, #24
   10f20:	mov	r6, #0
   10f24:	add	r2, r5, #255	; 0xff
   10f28:	str	r6, [r9, #-20]!	; 0xffffffec
   10f2c:	bic	r2, r2, #255	; 0xff
   10f30:	mov	r1, #256	; 0x100
   10f34:	mov	r0, r9
   10f38:	bl	10d80 <posix_memalign@plt>
   10f3c:	cmp	r0, r6
   10f40:	beq	10f58 <main@@Base+0x130>
   10f44:	ldr	r0, [sp, #4]
   10f48:	cmp	r0, r6
   10f4c:	beq	10f58 <main@@Base+0x130>
   10f50:	bl	10cfc <free@plt>
   10f54:	str	r6, [sp, #4]
   10f58:	ldr	r7, [sp, #4]
   10f5c:	ldr	r8, [pc, #356]	; 110c8 <main@@Base+0x2a0>
   10f60:	mov	r1, r4
   10f64:	mov	r2, r5
   10f68:	mov	r0, r7
   10f6c:	bl	10d08 <memcpy@plt>
   10f70:	mov	r0, r4
   10f74:	bl	10cfc <free@plt>
   10f78:	ldr	r6, [r8]
   10f7c:	ldr	r2, [pc, #340]	; 110d8 <main@@Base+0x2b0>
   10f80:	ldr	r1, [pc, #340]	; 110dc <main@@Base+0x2b4>
   10f84:	mov	r0, r6
   10f88:	bl	10d74 <fprintf@plt>
   10f8c:	sub	fp, r7, #1
   10f90:	mov	r4, #0
   10f94:	cmp	r4, r5
   10f98:	bne	11020 <main@@Base+0x1f8>
   10f9c:	ldr	sl, [pc, #316]	; 110e0 <main@@Base+0x2b8>
   10fa0:	mov	r5, r4
   10fa4:	tst	r5, #15
   10fa8:	bne	110a4 <main@@Base+0x27c>
   10fac:	mov	r2, r9
   10fb0:	ldr	r1, [pc, #300]	; 110e4 <main@@Base+0x2bc>
   10fb4:	mov	r0, r6
   10fb8:	bl	10d74 <fprintf@plt>
   10fbc:	mov	r1, r4
   10fc0:	ldr	r3, [pc, #288]	; 110e8 <main@@Base+0x2c0>
   10fc4:	ldr	r2, [pc, #288]	; 110ec <main@@Base+0x2c4>
   10fc8:	mov	r0, r7
   10fcc:	bl	128ec <flatcc_verify_table_as_root@@Base>
   10fd0:	cmp	r0, #0
   10fd4:	ldrne	r1, [r8]
   10fd8:	ldrne	r0, [pc, #272]	; 110f0 <main@@Base+0x2c8>
   10fdc:	bne	11004 <main@@Base+0x1dc>
   10fe0:	ldr	r3, [pc, #256]	; 110e8 <main@@Base+0x2c0>
   10fe4:	ldr	r2, [pc, #256]	; 110ec <main@@Base+0x2c4>
   10fe8:	mov	r1, r4
   10fec:	mov	r0, r7
   10ff0:	bl	128ec <flatcc_verify_table_as_root@@Base>
   10ff4:	cmp	r0, #0
   10ff8:	beq	110b8 <main@@Base+0x290>
   10ffc:	ldr	r1, [r8]
   11000:	ldr	r0, [pc, #236]	; 110f4 <main@@Base+0x2cc>
   11004:	bl	10dbc <fputs@plt>
   11008:	mvn	r4, #0
   1100c:	mov	r0, r7
   11010:	bl	10cfc <free@plt>
   11014:	mov	r0, r4
   11018:	add	sp, sp, #28
   1101c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11020:	ands	sl, r4, #15
   11024:	bne	1108c <main@@Base+0x264>
   11028:	cmp	r4, #0
   1102c:	beq	11040 <main@@Base+0x218>
   11030:	mov	r2, r9
   11034:	ldr	r1, [pc, #168]	; 110e4 <main@@Base+0x2bc>
   11038:	mov	r0, r6
   1103c:	bl	10d74 <fprintf@plt>
   11040:	mov	r2, r4
   11044:	ldr	r1, [pc, #172]	; 110f8 <main@@Base+0x2d0>
   11048:	mov	r0, r6
   1104c:	bl	10d74 <fprintf@plt>
   11050:	ldrb	r2, [fp, #1]
   11054:	ldr	r1, [pc, #160]	; 110fc <main@@Base+0x2d4>
   11058:	mov	r0, r6
   1105c:	bl	10d74 <fprintf@plt>
   11060:	ldrb	r3, [fp, #1]!
   11064:	add	r4, r4, #1
   11068:	sub	r2, r3, #32
   1106c:	cmp	r2, #94	; 0x5e
   11070:	add	r2, sp, #24
   11074:	add	sl, r2, sl
   11078:	movhi	r3, #46	; 0x2e
   1107c:	strb	r3, [sl, #-20]	; 0xffffffec
   11080:	mov	r3, #0
   11084:	strb	r3, [sl, #-19]	; 0xffffffed
   11088:	b	10f94 <main@@Base+0x16c>
   1108c:	tst	r4, #7
   11090:	bne	11050 <main@@Base+0x228>
   11094:	mov	r1, r6
   11098:	mov	r0, #32
   1109c:	bl	10da4 <fputc@plt>
   110a0:	b	11050 <main@@Base+0x228>
   110a4:	mov	r1, r6
   110a8:	mov	r0, sl
   110ac:	bl	10dbc <fputs@plt>
   110b0:	add	r5, r5, #1
   110b4:	b	10fa4 <main@@Base+0x17c>
   110b8:	mov	r0, r7
   110bc:	bl	11b4c <verify_monster@@Base>
   110c0:	mov	r4, r0
   110c4:	b	1100c <main@@Base+0x1e4>
   110c8:	andeq	r4, r2, r8, ror r0
   110cc:	andeq	r3, r1, sp, lsl r5
   110d0:	andeq	r4, r2, r0, ror r0
   110d4:	andeq	r3, r1, sp, asr r5
   110d8:	andeq	r3, r1, r0, ror #10
   110dc:	andeq	r3, r1, r5, ror r5
   110e0:	andeq	r3, r1, lr, lsl #11
   110e4:	andeq	r3, r1, sl, ror r5
   110e8:	andeq	r1, r1, r4, lsl #10
   110ec:	muleq	r1, r2, r5
   110f0:	muleq	r1, r7, r5
   110f4:			; <UNDEFINED> instruction: 0x000135be
   110f8:	andeq	r3, r1, r0, lsl #11
   110fc:	andeq	r3, r1, r8, lsl #11

00011100 <_start@@Base>:
   11100:	mov	fp, #0
   11104:	mov	lr, #0
   11108:	pop	{r1}		; (ldr r1, [sp], #4)
   1110c:	mov	r2, sp
   11110:	push	{r2}		; (str r2, [sp, #-4]!)
   11114:	push	{r0}		; (str r0, [sp, #-4]!)
   11118:	ldr	ip, [pc, #16]	; 11130 <_start@@Base+0x30>
   1111c:	push	{ip}		; (str ip, [sp, #-4]!)
   11120:	ldr	r0, [pc, #12]	; 11134 <_start@@Base+0x34>
   11124:	ldr	r3, [pc, #12]	; 11138 <_start@@Base+0x38>
   11128:	bl	10d50 <__libc_start_main@plt>
   1112c:	bl	10dc8 <abort@plt>
   11130:	andeq	r2, r1, r4, ror #28
   11134:	andeq	r0, r1, r8, lsr #28
   11138:	andeq	r2, r1, r4, lsl #28
   1113c:	ldr	r3, [pc, #20]	; 11158 <_start@@Base+0x58>
   11140:	ldr	r2, [pc, #20]	; 1115c <_start@@Base+0x5c>
   11144:	add	r3, pc, r3
   11148:	ldr	r2, [r3, r2]
   1114c:	cmp	r2, #0
   11150:	bxeq	lr
   11154:	b	10d5c <__gmon_start__@plt>
   11158:			; <UNDEFINED> instruction: 0x00012eb4
   1115c:	andeq	r0, r0, r4, rrx
   11160:	ldr	r3, [pc, #28]	; 11184 <_start@@Base+0x84>
   11164:	ldr	r0, [pc, #28]	; 11188 <_start@@Base+0x88>
   11168:	sub	r3, r3, r0
   1116c:	cmp	r3, #6
   11170:	bxls	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <_start@@Base+0x8c>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r4, r2, r7, ror r0
   11188:	andeq	r4, r2, r4, ror r0
   1118c:	andeq	r0, r0, r0
   11190:	ldr	r1, [pc, #36]	; 111bc <_start@@Base+0xbc>
   11194:	ldr	r0, [pc, #36]	; 111c0 <_start@@Base+0xc0>
   11198:	sub	r1, r1, r0
   1119c:	asr	r1, r1, #2
   111a0:	add	r1, r1, r1, lsr #31
   111a4:	asrs	r1, r1, #1
   111a8:	bxeq	lr
   111ac:	ldr	r3, [pc, #16]	; 111c4 <_start@@Base+0xc4>
   111b0:	cmp	r3, #0
   111b4:	bxeq	lr
   111b8:	bx	r3
   111bc:	andeq	r4, r2, r4, ror r0
   111c0:	andeq	r4, r2, r4, ror r0
   111c4:	andeq	r0, r0, r0
   111c8:	push	{r4, lr}
   111cc:	ldr	r4, [pc, #24]	; 111ec <_start@@Base+0xec>
   111d0:	ldrb	r3, [r4]
   111d4:	cmp	r3, #0
   111d8:	popne	{r4, pc}
   111dc:	bl	11160 <_start@@Base+0x60>
   111e0:	mov	r3, #1
   111e4:	strb	r3, [r4]
   111e8:	pop	{r4, pc}
   111ec:	andeq	r4, r2, ip, ror r0
   111f0:	ldr	r0, [pc, #40]	; 11220 <_start@@Base+0x120>
   111f4:	ldr	r3, [r0]
   111f8:	cmp	r3, #0
   111fc:	bne	11204 <_start@@Base+0x104>
   11200:	b	11190 <_start@@Base+0x90>
   11204:	ldr	r3, [pc, #24]	; 11224 <_start@@Base+0x124>
   11208:	cmp	r3, #0
   1120c:	beq	11200 <_start@@Base+0x100>
   11210:	push	{r4, lr}
   11214:	blx	r3
   11218:	pop	{r4, lr}
   1121c:	b	11190 <_start@@Base+0x90>
   11220:	andeq	r3, r2, r4, lsl pc
   11224:	andeq	r0, r0, r0
   11228:	mov	r0, #0
   1122c:	bx	lr
   11230:	mov	r3, #4
   11234:	mov	r2, r3
   11238:	mov	r1, #0
   1123c:	b	12398 <flatcc_verify_field@@Base>
   11240:	cmp	r0, #0
   11244:	push	{r4, lr}
   11248:	bne	11260 <_start@@Base+0x160>
   1124c:	ldr	r3, [pc, #84]	; 112a8 <_start@@Base+0x1a8>
   11250:	ldr	r2, [pc, #84]	; 112ac <_start@@Base+0x1ac>
   11254:	ldr	r1, [pc, #84]	; 112b0 <_start@@Base+0x1b0>
   11258:	ldr	r0, [pc, #84]	; 112b4 <_start@@Base+0x1b4>
   1125c:	bl	10dd4 <__assert_fail@plt>
   11260:	ldr	r3, [r0]
   11264:	sub	r3, r0, r3
   11268:	ldrh	r2, [r3]
   1126c:	cmp	r2, #11
   11270:	bls	11280 <_start@@Base+0x180>
   11274:	ldrh	r2, [r3, #10]
   11278:	cmp	r2, #0
   1127c:	bne	11294 <_start@@Base+0x194>
   11280:	ldr	r3, [pc, #32]	; 112a8 <_start@@Base+0x1a8>
   11284:	ldr	r2, [pc, #32]	; 112ac <_start@@Base+0x1ac>
   11288:	ldr	r1, [pc, #32]	; 112b0 <_start@@Base+0x1b0>
   1128c:	ldr	r0, [pc, #36]	; 112b8 <_start@@Base+0x1b8>
   11290:	b	1125c <_start@@Base+0x15c>
   11294:	add	r3, r0, r2
   11298:	ldr	r0, [r0, r2]
   1129c:	add	r0, r0, #4
   112a0:	add	r0, r3, r0
   112a4:	pop	{r4, pc}
   112a8:	andeq	r2, r1, lr, lsl #29
   112ac:			; <UNDEFINED> instruction: 0x000002bb
   112b0:	andeq	r2, r1, r3, ror pc
   112b4:	ldrdeq	r2, [r1], -r5
   112b8:	strdeq	r2, [r1], -fp
   112bc:	mov	r3, #8
   112c0:	push	{r4, lr}
   112c4:	mov	r2, r3
   112c8:	mov	r1, #0
   112cc:	mov	r4, r0
   112d0:	bl	12398 <flatcc_verify_field@@Base>
   112d4:	cmp	r0, #0
   112d8:	popne	{r4, pc}
   112dc:	mov	r3, #4
   112e0:	mov	r0, r4
   112e4:	mov	r2, r3
   112e8:	mov	r1, #1
   112ec:	pop	{r4, lr}
   112f0:	b	12398 <flatcc_verify_field@@Base>
   112f4:	mov	r3, #1
   112f8:	push	{r4, lr}
   112fc:	mov	r2, r3
   11300:	mov	r1, #0
   11304:	mov	r4, r0
   11308:	bl	12398 <flatcc_verify_field@@Base>
   1130c:	cmp	r0, #0
   11310:	popne	{r4, pc}
   11314:	mov	r3, #1
   11318:	mov	r2, r3
   1131c:	mov	r1, r3
   11320:	mov	r0, r4
   11324:	bl	12398 <flatcc_verify_field@@Base>
   11328:	cmp	r0, #0
   1132c:	popne	{r4, pc}
   11330:	mov	r3, #1
   11334:	mov	r2, r3
   11338:	mov	r1, #2
   1133c:	mov	r0, r4
   11340:	bl	12398 <flatcc_verify_field@@Base>
   11344:	cmp	r0, #0
   11348:	popne	{r4, pc}
   1134c:	mov	r3, #1
   11350:	mov	r0, r4
   11354:	mov	r2, r3
   11358:	mov	r1, #3
   1135c:	pop	{r4, lr}
   11360:	b	12398 <flatcc_verify_field@@Base>
   11364:	mov	r2, #0
   11368:	push	{r4, lr}
   1136c:	mov	r1, r2
   11370:	mov	r4, r0
   11374:	bl	123f8 <flatcc_verify_string_field@@Base>
   11378:	cmp	r0, #0
   1137c:	popne	{r4, pc}
   11380:	mov	r3, #8
   11384:	mov	r2, r3
   11388:	mov	r1, #1
   1138c:	mov	r0, r4
   11390:	bl	12398 <flatcc_verify_field@@Base>
   11394:	cmp	r0, #0
   11398:	popne	{r4, pc}
   1139c:	mov	r3, #2
   113a0:	mov	r0, r4
   113a4:	mov	r2, r3
   113a8:	mov	r1, r3
   113ac:	pop	{r4, lr}
   113b0:	b	12398 <flatcc_verify_field@@Base>
   113b4:	mov	r2, #0
   113b8:	push	{r4, lr}
   113bc:	mov	r1, r2
   113c0:	mov	r4, r0
   113c4:	bl	123f8 <flatcc_verify_string_field@@Base>
   113c8:	subs	r2, r0, #0
   113cc:	bne	1149c <_start@@Base+0x39c>
   113d0:	mov	r3, #4
   113d4:	mov	r2, r3
   113d8:	mov	r1, #1
   113dc:	mov	r0, r4
   113e0:	bl	12398 <flatcc_verify_field@@Base>
   113e4:	subs	r2, r0, #0
   113e8:	bne	1149c <_start@@Base+0x39c>
   113ec:	mov	r1, #2
   113f0:	mov	r0, r4
   113f4:	bl	123f8 <flatcc_verify_string_field@@Base>
   113f8:	subs	r2, r0, #0
   113fc:	bne	1149c <_start@@Base+0x39c>
   11400:	mov	r3, #8
   11404:	mov	r2, r3
   11408:	mov	r1, #3
   1140c:	mov	r0, r4
   11410:	bl	12398 <flatcc_verify_field@@Base>
   11414:	subs	r2, r0, #0
   11418:	bne	1149c <_start@@Base+0x39c>
   1141c:	mov	r1, #4
   11420:	mov	r0, r4
   11424:	bl	123f8 <flatcc_verify_string_field@@Base>
   11428:	subs	r2, r0, #0
   1142c:	bne	1149c <_start@@Base+0x39c>
   11430:	mov	r3, #8
   11434:	mov	r2, r3
   11438:	mov	r1, #5
   1143c:	mov	r0, r4
   11440:	bl	12398 <flatcc_verify_field@@Base>
   11444:	subs	r2, r0, #0
   11448:	bne	1149c <_start@@Base+0x39c>
   1144c:	mov	r3, #4
   11450:	mov	r2, r3
   11454:	mov	r1, #6
   11458:	mov	r0, r4
   1145c:	bl	12398 <flatcc_verify_field@@Base>
   11460:	subs	r2, r0, #0
   11464:	bne	1149c <_start@@Base+0x39c>
   11468:	mov	r3, #8
   1146c:	mov	r2, r3
   11470:	mov	r1, #7
   11474:	mov	r0, r4
   11478:	bl	12398 <flatcc_verify_field@@Base>
   1147c:	subs	r2, r0, #0
   11480:	bne	1149c <_start@@Base+0x39c>
   11484:	mov	r3, #4
   11488:	mov	r0, r4
   1148c:	mov	r2, r3
   11490:	mov	r1, #8
   11494:	pop	{r4, lr}
   11498:	b	12398 <flatcc_verify_field@@Base>
   1149c:	mov	r0, r2
   114a0:	pop	{r4, pc}
   114a4:	mov	r2, #0
   114a8:	push	{r4, lr}
   114ac:	mov	r1, r2
   114b0:	ldr	r3, [pc, #64]	; 114f8 <_start@@Base+0x3f8>
   114b4:	mov	r4, r0
   114b8:	bl	1253c <flatcc_verify_table_field@@Base>
   114bc:	subs	r2, r0, #0
   114c0:	bne	114f0 <_start@@Base+0x3f0>
   114c4:	ldr	r3, [pc, #48]	; 114fc <_start@@Base+0x3fc>
   114c8:	mov	r1, #1
   114cc:	mov	r0, r4
   114d0:	bl	1253c <flatcc_verify_table_field@@Base>
   114d4:	subs	r2, r0, #0
   114d8:	bne	114f0 <_start@@Base+0x3f0>
   114dc:	mov	r0, r4
   114e0:	ldr	r3, [pc, #24]	; 11500 <_start@@Base+0x400>
   114e4:	mov	r1, #2
   114e8:	pop	{r4, lr}
   114ec:	b	1253c <flatcc_verify_table_field@@Base>
   114f0:	mov	r0, r2
   114f4:	pop	{r4, pc}
   114f8:			; <UNDEFINED> instruction: 0x000113b4
   114fc:	andeq	r1, r1, r4, lsl fp
   11500:			; <UNDEFINED> instruction: 0x000112bc
   11504:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11508:	mov	r2, #32
   1150c:	mov	r3, #16
   11510:	mov	r1, #0
   11514:	mov	r4, r0
   11518:	bl	12398 <flatcc_verify_field@@Base>
   1151c:	subs	r2, r0, #0
   11520:	bne	118d4 <_start@@Base+0x7d4>
   11524:	mov	r3, #2
   11528:	mov	r2, r3
   1152c:	mov	r1, r3
   11530:	mov	r0, r4
   11534:	bl	12398 <flatcc_verify_field@@Base>
   11538:	subs	r2, r0, #0
   1153c:	bne	118d4 <_start@@Base+0x7d4>
   11540:	mov	r3, #2
   11544:	mov	r2, r3
   11548:	mov	r1, #1
   1154c:	mov	r0, r4
   11550:	bl	12398 <flatcc_verify_field@@Base>
   11554:	subs	r2, r0, #0
   11558:	bne	118d4 <_start@@Base+0x7d4>
   1155c:	mov	r2, #1
   11560:	mov	r1, #3
   11564:	mov	r0, r4
   11568:	bl	123f8 <flatcc_verify_string_field@@Base>
   1156c:	subs	r2, r0, #0
   11570:	bne	118d4 <_start@@Base+0x7d4>
   11574:	mov	r3, #1
   11578:	mov	r2, r3
   1157c:	mov	r1, #6
   11580:	mov	r0, r4
   11584:	bl	12398 <flatcc_verify_field@@Base>
   11588:	subs	r2, r0, #0
   1158c:	bne	118d4 <_start@@Base+0x7d4>
   11590:	mov	r5, #1
   11594:	mvn	r6, #0
   11598:	mov	r3, r5
   1159c:	stm	sp, {r5, r6}
   115a0:	mov	r1, #5
   115a4:	mov	r0, r4
   115a8:	bl	12434 <flatcc_verify_vector_field@@Base>
   115ac:	subs	r2, r0, #0
   115b0:	bne	118d4 <_start@@Base+0x7d4>
   115b4:	ldr	r3, [pc, #804]	; 118e0 <_start@@Base+0x7e0>
   115b8:	mov	r1, #11
   115bc:	mov	r0, r4
   115c0:	bl	1258c <flatcc_verify_table_vector_field@@Base>
   115c4:	subs	r2, r0, #0
   115c8:	bne	118d4 <_start@@Base+0x7d4>
   115cc:	mov	r1, #10
   115d0:	mov	r0, r4
   115d4:	bl	1248c <flatcc_verify_string_vector_field@@Base>
   115d8:	subs	r2, r0, #0
   115dc:	bne	118d4 <_start@@Base+0x7d4>
   115e0:	mov	r1, #28
   115e4:	mov	r0, r4
   115e8:	bl	1248c <flatcc_verify_string_vector_field@@Base>
   115ec:	subs	r2, r0, #0
   115f0:	bne	118d4 <_start@@Base+0x7d4>
   115f4:	stm	sp, {r5, r6}
   115f8:	mov	r3, r5
   115fc:	mov	r1, #24
   11600:	mov	r0, r4
   11604:	bl	12434 <flatcc_verify_vector_field@@Base>
   11608:	subs	r2, r0, #0
   1160c:	bne	118d4 <_start@@Base+0x7d4>
   11610:	mvn	r3, #-536870912	; 0xe0000000
   11614:	mov	r5, #4
   11618:	str	r3, [sp, #4]
   1161c:	mov	r2, #0
   11620:	str	r5, [sp]
   11624:	mov	r3, #8
   11628:	mov	r1, #29
   1162c:	mov	r0, r4
   11630:	bl	12434 <flatcc_verify_vector_field@@Base>
   11634:	subs	r2, r0, #0
   11638:	bne	118d4 <_start@@Base+0x7d4>
   1163c:	ldr	r6, [pc, #668]	; 118e0 <_start@@Base+0x7e0>
   11640:	mov	r1, #12
   11644:	mov	r3, r6
   11648:	mov	r0, r4
   1164c:	bl	1253c <flatcc_verify_table_field@@Base>
   11650:	subs	r2, r0, #0
   11654:	bne	118d4 <_start@@Base+0x7d4>
   11658:	ldr	r3, [pc, #644]	; 118e4 <_start@@Base+0x7e4>
   1165c:	mov	r1, #8
   11660:	mov	r0, r4
   11664:	bl	12afc <flatcc_verify_union_field@@Base>
   11668:	subs	r2, r0, #0
   1166c:	bne	118d4 <_start@@Base+0x7d4>
   11670:	mov	r7, #2
   11674:	mvn	r8, #-1073741824	; 0xc0000000
   11678:	mov	r3, r5
   1167c:	stm	sp, {r7, r8}
   11680:	mov	r1, #9
   11684:	mov	r0, r4
   11688:	bl	12434 <flatcc_verify_vector_field@@Base>
   1168c:	subs	r2, r0, #0
   11690:	bne	118d4 <_start@@Base+0x7d4>
   11694:	stm	sp, {r7, r8}
   11698:	mov	r3, r5
   1169c:	mov	r1, #31
   116a0:	mov	r0, r4
   116a4:	bl	12434 <flatcc_verify_vector_field@@Base>
   116a8:	subs	r2, r0, #0
   116ac:	bne	118d4 <_start@@Base+0x7d4>
   116b0:	str	r6, [sp, #4]
   116b4:	mov	r6, #1
   116b8:	mov	r3, r2
   116bc:	str	r6, [sp]
   116c0:	mov	r1, #13
   116c4:	mov	r0, r4
   116c8:	bl	12a20 <flatcc_verify_table_as_nested_root@@Base>
   116cc:	subs	r2, r0, #0
   116d0:	bne	118d4 <_start@@Base+0x7d4>
   116d4:	ldr	r3, [pc, #524]	; 118e8 <_start@@Base+0x7e8>
   116d8:	mov	r1, #14
   116dc:	mov	r0, r4
   116e0:	bl	1253c <flatcc_verify_table_field@@Base>
   116e4:	subs	r2, r0, #0
   116e8:	bne	118d4 <_start@@Base+0x7d4>
   116ec:	mov	r2, r6
   116f0:	mov	r3, r6
   116f4:	mov	r1, #15
   116f8:	mov	r0, r4
   116fc:	bl	12398 <flatcc_verify_field@@Base>
   11700:	subs	r2, r0, #0
   11704:	bne	118d4 <_start@@Base+0x7d4>
   11708:	mov	r2, r5
   1170c:	mov	r3, r5
   11710:	mov	r1, #16
   11714:	mov	r0, r4
   11718:	bl	12398 <flatcc_verify_field@@Base>
   1171c:	subs	r2, r0, #0
   11720:	bne	118d4 <_start@@Base+0x7d4>
   11724:	mov	r2, r5
   11728:	mov	r3, r5
   1172c:	mov	r1, #17
   11730:	mov	r0, r4
   11734:	bl	12398 <flatcc_verify_field@@Base>
   11738:	subs	r2, r0, #0
   1173c:	bne	118d4 <_start@@Base+0x7d4>
   11740:	mov	r3, #8
   11744:	mov	r2, r3
   11748:	mov	r1, #18
   1174c:	mov	r0, r4
   11750:	bl	12398 <flatcc_verify_field@@Base>
   11754:	subs	r2, r0, #0
   11758:	bne	118d4 <_start@@Base+0x7d4>
   1175c:	mov	r3, #8
   11760:	mov	r2, r3
   11764:	mov	r1, #19
   11768:	mov	r0, r4
   1176c:	bl	12398 <flatcc_verify_field@@Base>
   11770:	subs	r2, r0, #0
   11774:	bne	118d4 <_start@@Base+0x7d4>
   11778:	mov	r2, r5
   1177c:	mov	r3, r5
   11780:	mov	r1, #20
   11784:	mov	r0, r4
   11788:	bl	12398 <flatcc_verify_field@@Base>
   1178c:	subs	r2, r0, #0
   11790:	bne	118d4 <_start@@Base+0x7d4>
   11794:	mov	r2, r5
   11798:	mov	r3, r5
   1179c:	mov	r1, #21
   117a0:	mov	r0, r4
   117a4:	bl	12398 <flatcc_verify_field@@Base>
   117a8:	subs	r2, r0, #0
   117ac:	bne	118d4 <_start@@Base+0x7d4>
   117b0:	mov	r3, #8
   117b4:	mov	r2, r3
   117b8:	mov	r1, #22
   117bc:	mov	r0, r4
   117c0:	bl	12398 <flatcc_verify_field@@Base>
   117c4:	subs	r2, r0, #0
   117c8:	bne	118d4 <_start@@Base+0x7d4>
   117cc:	mov	r3, #8
   117d0:	mov	r2, r3
   117d4:	mov	r1, #23
   117d8:	mov	r0, r4
   117dc:	bl	12398 <flatcc_verify_field@@Base>
   117e0:	subs	r2, r0, #0
   117e4:	bne	118d4 <_start@@Base+0x7d4>
   117e8:	mov	r2, r5
   117ec:	mov	r3, r5
   117f0:	mov	r1, #25
   117f4:	mov	r0, r4
   117f8:	bl	12398 <flatcc_verify_field@@Base>
   117fc:	subs	r2, r0, #0
   11800:	bne	118d4 <_start@@Base+0x7d4>
   11804:	mov	r2, r5
   11808:	mov	r3, r5
   1180c:	mov	r1, #26
   11810:	mov	r0, r4
   11814:	bl	12398 <flatcc_verify_field@@Base>
   11818:	subs	r2, r0, #0
   1181c:	bne	118d4 <_start@@Base+0x7d4>
   11820:	mov	r2, r5
   11824:	mov	r3, r5
   11828:	mov	r1, #27
   1182c:	mov	r0, r4
   11830:	bl	12398 <flatcc_verify_field@@Base>
   11834:	subs	r2, r0, #0
   11838:	bne	118d4 <_start@@Base+0x7d4>
   1183c:	mvn	r3, #0
   11840:	str	r3, [sp, #4]
   11844:	str	r6, [sp]
   11848:	mov	r3, r6
   1184c:	mov	r1, #30
   11850:	mov	r0, r4
   11854:	bl	12434 <flatcc_verify_vector_field@@Base>
   11858:	subs	r2, r0, #0
   1185c:	bne	118d4 <_start@@Base+0x7d4>
   11860:	mov	r5, #8
   11864:	mvn	r6, #-536870912	; 0xe0000000
   11868:	mov	r2, #0
   1186c:	stm	sp, {r5, r6}
   11870:	mov	r3, r5
   11874:	mov	r1, #32
   11878:	mov	r0, r4
   1187c:	bl	12434 <flatcc_verify_vector_field@@Base>
   11880:	subs	r2, r0, #0
   11884:	bne	118d4 <_start@@Base+0x7d4>
   11888:	stm	sp, {r5, r6}
   1188c:	mov	r3, r5
   11890:	mov	r1, #33	; 0x21
   11894:	mov	r0, r4
   11898:	bl	12434 <flatcc_verify_vector_field@@Base>
   1189c:	subs	r2, r0, #0
   118a0:	bne	118d4 <_start@@Base+0x7d4>
   118a4:	ldr	r3, [pc, #64]	; 118ec <_start@@Base+0x7ec>
   118a8:	mov	r1, #34	; 0x22
   118ac:	mov	r0, r4
   118b0:	bl	1253c <flatcc_verify_table_field@@Base>
   118b4:	subs	r2, r0, #0
   118b8:	bne	118d4 <_start@@Base+0x7d4>
   118bc:	ldr	r3, [pc, #44]	; 118f0 <_start@@Base+0x7f0>
   118c0:	mov	r1, #35	; 0x23
   118c4:	mov	r0, r4
   118c8:	add	sp, sp, #8
   118cc:	pop	{r4, r5, r6, r7, r8, lr}
   118d0:	b	1253c <flatcc_verify_table_field@@Base>
   118d4:	mov	r0, r2
   118d8:	add	sp, sp, #8
   118dc:	pop	{r4, r5, r6, r7, r8, pc}
   118e0:	andeq	r1, r1, r4, lsl #10
   118e4:	andeq	r1, r1, ip, ror #18
   118e8:	andeq	r1, r1, r4, ror #6
   118ec:	andeq	r1, r1, ip, lsl #22
   118f0:	strdeq	r1, [r1], -r4
   118f4:	push	{r0, r1, r4, r5, r6, lr}
   118f8:	mov	r4, #1
   118fc:	mvn	r6, #0
   11900:	mov	r2, #0
   11904:	stm	sp, {r4, r6}
   11908:	mov	r3, r4
   1190c:	mov	r1, r2
   11910:	mov	r5, r0
   11914:	bl	12434 <flatcc_verify_vector_field@@Base>
   11918:	cmp	r0, #0
   1191c:	bne	11960 <_start@@Base+0x860>
   11920:	mov	r2, r0
   11924:	stm	sp, {r4, r6}
   11928:	mov	r3, r4
   1192c:	mov	r1, r4
   11930:	mov	r0, r5
   11934:	bl	12434 <flatcc_verify_vector_field@@Base>
   11938:	cmp	r0, #0
   1193c:	bne	11960 <_start@@Base+0x860>
   11940:	ldr	r3, [pc, #32]	; 11968 <_start@@Base+0x868>
   11944:	mov	r2, r0
   11948:	str	r3, [sp, #4]
   1194c:	str	r4, [sp]
   11950:	mov	r3, r0
   11954:	mov	r1, #2
   11958:	mov	r0, r5
   1195c:	bl	12a20 <flatcc_verify_table_as_nested_root@@Base>
   11960:	add	sp, sp, #8
   11964:	pop	{r4, r5, r6, pc}
   11968:	andeq	r1, r1, r4, lsl #10
   1196c:	ldrb	r3, [r0, #12]
   11970:	sub	r3, r3, #1
   11974:	cmp	r3, #3
   11978:	ldrls	pc, [pc, r3, lsl #2]
   1197c:	b	119b0 <_start@@Base+0x8b0>
   11980:	muleq	r1, r0, r9
   11984:	muleq	r1, r8, r9
   11988:	andeq	r1, r1, r0, lsr #19
   1198c:	andeq	r1, r1, r8, lsr #19
   11990:	ldr	r1, [pc, #32]	; 119b8 <_start@@Base+0x8b8>
   11994:	b	1268c <flatcc_verify_union_table@@Base>
   11998:	ldr	r1, [pc, #28]	; 119bc <_start@@Base+0x8bc>
   1199c:	b	11994 <_start@@Base+0x894>
   119a0:	ldr	r1, [pc, #24]	; 119c0 <_start@@Base+0x8c0>
   119a4:	b	11994 <_start@@Base+0x894>
   119a8:	ldr	r1, [pc, #20]	; 119c4 <_start@@Base+0x8c4>
   119ac:	b	11994 <_start@@Base+0x894>
   119b0:	mov	r0, #0
   119b4:	bx	lr
   119b8:	andeq	r1, r1, r4, lsl #10
   119bc:	strdeq	r1, [r1], -r4
   119c0:	andeq	r1, r1, r8, lsr #4
   119c4:	andeq	r1, r1, r8, asr #19
   119c8:	mov	r2, #0
   119cc:	push	{r4, lr}
   119d0:	mov	r1, r2
   119d4:	ldr	r3, [pc, #64]	; 11a1c <_start@@Base+0x91c>
   119d8:	mov	r4, r0
   119dc:	bl	1253c <flatcc_verify_table_field@@Base>
   119e0:	subs	r2, r0, #0
   119e4:	bne	11a14 <_start@@Base+0x914>
   119e8:	ldr	r3, [pc, #48]	; 11a20 <_start@@Base+0x920>
   119ec:	mov	r1, #1
   119f0:	mov	r0, r4
   119f4:	bl	1253c <flatcc_verify_table_field@@Base>
   119f8:	subs	r2, r0, #0
   119fc:	bne	11a14 <_start@@Base+0x914>
   11a00:	mov	r0, r4
   11a04:	ldr	r3, [pc, #24]	; 11a24 <_start@@Base+0x924>
   11a08:	mov	r1, #3
   11a0c:	pop	{r4, lr}
   11a10:	b	12c18 <flatcc_verify_union_vector_field@@Base>
   11a14:	mov	r0, r2
   11a18:	pop	{r4, pc}
   11a1c:	andeq	r1, r1, r4, lsr #9
   11a20:	andeq	r1, r1, r8, lsr #20
   11a24:	andeq	r1, r1, ip, ror #18
   11a28:	push	{r4, lr}
   11a2c:	mov	r2, #0
   11a30:	ldr	r3, [pc, #116]	; 11aac <_start@@Base+0x9ac>
   11a34:	mov	r1, #1
   11a38:	mov	r4, r0
   11a3c:	bl	12afc <flatcc_verify_union_field@@Base>
   11a40:	subs	r2, r0, #0
   11a44:	bne	11aa4 <_start@@Base+0x9a4>
   11a48:	ldr	r3, [pc, #92]	; 11aac <_start@@Base+0x9ac>
   11a4c:	mov	r1, #3
   11a50:	mov	r0, r4
   11a54:	bl	12afc <flatcc_verify_union_field@@Base>
   11a58:	subs	r2, r0, #0
   11a5c:	bne	11aa4 <_start@@Base+0x9a4>
   11a60:	ldr	r3, [pc, #68]	; 11aac <_start@@Base+0x9ac>
   11a64:	mov	r1, #5
   11a68:	mov	r0, r4
   11a6c:	bl	12afc <flatcc_verify_union_field@@Base>
   11a70:	subs	r2, r0, #0
   11a74:	bne	11aa4 <_start@@Base+0x9a4>
   11a78:	ldr	r3, [pc, #44]	; 11aac <_start@@Base+0x9ac>
   11a7c:	mov	r1, #7
   11a80:	mov	r0, r4
   11a84:	bl	12afc <flatcc_verify_union_field@@Base>
   11a88:	subs	r2, r0, #0
   11a8c:	bne	11aa4 <_start@@Base+0x9a4>
   11a90:	mov	r0, r4
   11a94:	ldr	r3, [pc, #16]	; 11aac <_start@@Base+0x9ac>
   11a98:	mov	r1, #9
   11a9c:	pop	{r4, lr}
   11aa0:	b	12c18 <flatcc_verify_union_vector_field@@Base>
   11aa4:	mov	r0, r2
   11aa8:	pop	{r4, pc}
   11aac:			; <UNDEFINED> instruction: 0x00011ab0
   11ab0:	ldrb	r3, [r0, #12]
   11ab4:	cmp	r3, #9
   11ab8:	beq	11afc <_start@@Base+0x9fc>
   11abc:	bhi	11adc <_start@@Base+0x9dc>
   11ac0:	cmp	r3, #2
   11ac4:	beq	11af4 <_start@@Base+0x9f4>
   11ac8:	cmp	r3, #8
   11acc:	moveq	r2, #2
   11ad0:	beq	11b00 <_start@@Base+0xa00>
   11ad4:	mov	r0, #0
   11ad8:	bx	lr
   11adc:	cmp	r3, #11
   11ae0:	beq	11af0 <_start@@Base+0x9f0>
   11ae4:	bcc	11afc <_start@@Base+0x9fc>
   11ae8:	cmp	r3, #255	; 0xff
   11aec:	bne	11ad4 <_start@@Base+0x9d4>
   11af0:	b	12710 <flatcc_verify_union_string@@Base>
   11af4:	ldr	r1, [pc, #12]	; 11b08 <_start@@Base+0xa08>
   11af8:	b	1268c <flatcc_verify_union_table@@Base>
   11afc:	mov	r2, #4
   11b00:	mov	r1, r2
   11b04:	b	126b4 <flatcc_verify_union_struct@@Base>
   11b08:	andeq	r1, r1, r0, lsr r2
   11b0c:	mov	r0, #0
   11b10:	bx	lr
   11b14:	mov	r3, #8
   11b18:	push	{r4, lr}
   11b1c:	mov	r2, r3
   11b20:	mov	r1, #0
   11b24:	mov	r4, r0
   11b28:	bl	12398 <flatcc_verify_field@@Base>
   11b2c:	cmp	r0, #0
   11b30:	popne	{r4, pc}
   11b34:	mov	r3, #4
   11b38:	mov	r0, r4
   11b3c:	mov	r2, r3
   11b40:	mov	r1, #1
   11b44:	pop	{r4, lr}
   11b48:	b	12398 <flatcc_verify_field@@Base>

00011b4c <verify_monster@@Base>:
   11b4c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11b50:	cmp	r0, #0
   11b54:	beq	11b6c <verify_monster@@Base+0x20>
   11b58:	ldr	r3, [pc, #1044]	; 11f74 <verify_monster@@Base+0x428>
   11b5c:	ldr	r2, [r0, #4]
   11b60:	str	r3, [sp, #4]
   11b64:	cmp	r2, r3
   11b68:	beq	120c0 <verify_monster@@Base+0x574>
   11b6c:	ldr	r0, [pc, #1028]	; 11f78 <verify_monster@@Base+0x42c>
   11b70:	bl	10d38 <puts@plt>
   11b74:	b	11cbc <verify_monster@@Base+0x170>
   11b78:	ldrh	r3, [r5, #4]
   11b7c:	cmp	r3, #0
   11b80:	beq	11b8c <verify_monster@@Base+0x40>
   11b84:	adds	r3, r4, r3
   11b88:	bne	11b94 <verify_monster@@Base+0x48>
   11b8c:	ldr	r0, [pc, #1000]	; 11f7c <verify_monster@@Base+0x430>
   11b90:	b	11b70 <verify_monster@@Base+0x24>
   11b94:	sub	r0, r3, r0
   11b98:	tst	r0, #15
   11b9c:	ldrne	r0, [pc, #988]	; 11f80 <verify_monster@@Base+0x434>
   11ba0:	bne	11b70 <verify_monster@@Base+0x24>
   11ba4:	vldr	s14, [r3]
   11ba8:	vldr	s15, [pc, #952]	; 11f68 <verify_monster@@Base+0x41c>
   11bac:	vcmp.f32	s14, s15
   11bb0:	vmrs	APSR_nzcv, fpscr
   11bb4:	ldrne	r0, [pc, #968]	; 11f84 <verify_monster@@Base+0x438>
   11bb8:	bne	11b70 <verify_monster@@Base+0x24>
   11bbc:	vldr	s14, [r3, #4]
   11bc0:	vldr	s15, [pc, #932]	; 11f6c <verify_monster@@Base+0x420>
   11bc4:	vcmp.f32	s14, s15
   11bc8:	vmrs	APSR_nzcv, fpscr
   11bcc:	ldrne	r0, [pc, #948]	; 11f88 <verify_monster@@Base+0x43c>
   11bd0:	bne	11b70 <verify_monster@@Base+0x24>
   11bd4:	vldr	s14, [r3, #8]
   11bd8:	vldr	s15, [pc, #912]	; 11f70 <verify_monster@@Base+0x424>
   11bdc:	vcmp.f32	s14, s15
   11be0:	vmrs	APSR_nzcv, fpscr
   11be4:	ldrne	r0, [pc, #928]	; 11f8c <verify_monster@@Base+0x440>
   11be8:	bne	11b70 <verify_monster@@Base+0x24>
   11bec:	vldr	d6, [r3, #16]
   11bf0:	vldr	d7, [pc, #864]	; 11f58 <verify_monster@@Base+0x40c>
   11bf4:	vcmp.f64	d6, d7
   11bf8:	vmrs	APSR_nzcv, fpscr
   11bfc:	ldrne	r0, [pc, #908]	; 11f90 <verify_monster@@Base+0x444>
   11c00:	bne	11b70 <verify_monster@@Base+0x24>
   11c04:	ldrsb	r2, [r3, #24]
   11c08:	cmp	r2, #2
   11c0c:	ldrne	r0, [pc, #896]	; 11f94 <verify_monster@@Base+0x448>
   11c10:	bne	11b70 <verify_monster@@Base+0x24>
   11c14:	ldrsh	r2, [r3, #26]
   11c18:	cmp	r2, #5
   11c1c:	bne	11c2c <verify_monster@@Base+0xe0>
   11c20:	ldrsb	r3, [r3, #28]
   11c24:	cmp	r3, #6
   11c28:	beq	11c34 <verify_monster@@Base+0xe8>
   11c2c:	ldr	r0, [pc, #868]	; 11f98 <verify_monster@@Base+0x44c>
   11c30:	b	11b70 <verify_monster@@Base+0x24>
   11c34:	mov	r0, r4
   11c38:	bl	11240 <_start@@Base+0x140>
   11c3c:	subs	r3, r0, #0
   11c40:	beq	11c50 <verify_monster@@Base+0x104>
   11c44:	ldr	r3, [r3, #-4]
   11c48:	cmp	r3, #9
   11c4c:	beq	11c58 <verify_monster@@Base+0x10c>
   11c50:	ldr	r0, [pc, #836]	; 11f9c <verify_monster@@Base+0x450>
   11c54:	b	11b70 <verify_monster@@Base+0x24>
   11c58:	ldr	r1, [pc, #832]	; 11fa0 <verify_monster@@Base+0x454>
   11c5c:	bl	10cd8 <strcmp@plt>
   11c60:	subs	r1, r0, #0
   11c64:	ldrne	r0, [pc, #824]	; 11fa4 <verify_monster@@Base+0x458>
   11c68:	bne	11b70 <verify_monster@@Base+0x24>
   11c6c:	cmp	r6, #15
   11c70:	bls	11ca0 <verify_monster@@Base+0x154>
   11c74:	ldrh	r2, [r5, #14]
   11c78:	cmp	r2, #0
   11c7c:	beq	11ca0 <verify_monster@@Base+0x154>
   11c80:	add	r3, r4, r2
   11c84:	ldr	r2, [r4, r2]
   11c88:	add	r2, r2, #4
   11c8c:	adds	r3, r3, r2
   11c90:	beq	11ca0 <verify_monster@@Base+0x154>
   11c94:	ldr	r2, [r3, #-4]
   11c98:	cmp	r2, #5
   11c9c:	beq	11ca8 <verify_monster@@Base+0x15c>
   11ca0:	ldr	r0, [pc, #768]	; 11fa8 <verify_monster@@Base+0x45c>
   11ca4:	b	11b70 <verify_monster@@Base+0x24>
   11ca8:	ldrb	r2, [r3, r1]
   11cac:	cmp	r2, r1
   11cb0:	beq	11cc8 <verify_monster@@Base+0x17c>
   11cb4:	ldr	r0, [pc, #752]	; 11fac <verify_monster@@Base+0x460>
   11cb8:	bl	10ce4 <printf@plt>
   11cbc:	mvn	r0, #0
   11cc0:	add	sp, sp, #12
   11cc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11cc8:	add	r1, r1, #1
   11ccc:	cmp	r1, #5
   11cd0:	bne	11ca8 <verify_monster@@Base+0x15c>
   11cd4:	cmp	r6, #25
   11cd8:	bls	11cfc <verify_monster@@Base+0x1b0>
   11cdc:	ldrh	r3, [r5, #24]
   11ce0:	cmp	r3, #0
   11ce4:	beq	11cfc <verify_monster@@Base+0x1b0>
   11ce8:	add	r2, r4, r3
   11cec:	ldr	r3, [r4, r3]
   11cf0:	add	r3, r3, #4
   11cf4:	adds	r7, r2, r3
   11cf8:	bne	11d04 <verify_monster@@Base+0x1b8>
   11cfc:	ldr	r0, [pc, #684]	; 11fb0 <verify_monster@@Base+0x464>
   11d00:	b	11b70 <verify_monster@@Base+0x24>
   11d04:	ldr	r1, [r7, #-4]
   11d08:	cmp	r1, #2
   11d0c:	ldrne	r0, [pc, #672]	; 11fb4 <verify_monster@@Base+0x468>
   11d10:	bne	11b70 <verify_monster@@Base+0x24>
   11d14:	ldr	r0, [r2, r3]
   11d18:	ldr	r1, [pc, #664]	; 11fb8 <verify_monster@@Base+0x46c>
   11d1c:	add	r0, r0, #4
   11d20:	add	r0, r7, r0
   11d24:	bl	10cd8 <strcmp@plt>
   11d28:	cmp	r0, #0
   11d2c:	ldrne	r0, [pc, #648]	; 11fbc <verify_monster@@Base+0x470>
   11d30:	bne	11b70 <verify_monster@@Base+0x24>
   11d34:	ldr	r0, [r7, #4]
   11d38:	ldr	r1, [pc, #640]	; 11fc0 <verify_monster@@Base+0x474>
   11d3c:	add	r0, r0, #8
   11d40:	add	r0, r7, r0
   11d44:	bl	10cd8 <strcmp@plt>
   11d48:	cmp	r0, #0
   11d4c:	ldrne	r0, [pc, #624]	; 11fc4 <verify_monster@@Base+0x478>
   11d50:	bne	11b70 <verify_monster@@Base+0x24>
   11d54:	ldrh	r3, [r5, #18]
   11d58:	cmp	r3, #0
   11d5c:	beq	11d6c <verify_monster@@Base+0x220>
   11d60:	ldrb	r3, [r4, r3]
   11d64:	cmp	r3, #1
   11d68:	beq	11d74 <verify_monster@@Base+0x228>
   11d6c:	ldr	r0, [pc, #596]	; 11fc8 <verify_monster@@Base+0x47c>
   11d70:	b	11b70 <verify_monster@@Base+0x24>
   11d74:	ldrh	r3, [r5, #20]
   11d78:	cmp	r3, #0
   11d7c:	beq	11d90 <verify_monster@@Base+0x244>
   11d80:	add	r0, r4, r3
   11d84:	ldr	r3, [r4, r3]
   11d88:	adds	r0, r0, r3
   11d8c:	bne	11d98 <verify_monster@@Base+0x24c>
   11d90:	ldr	r0, [pc, #564]	; 11fcc <verify_monster@@Base+0x480>
   11d94:	b	11b70 <verify_monster@@Base+0x24>
   11d98:	bl	11240 <_start@@Base+0x140>
   11d9c:	ldr	r1, [pc, #556]	; 11fd0 <verify_monster@@Base+0x484>
   11da0:	bl	10cd8 <strcmp@plt>
   11da4:	cmp	r0, #0
   11da8:	ldrne	r0, [pc, #548]	; 11fd4 <verify_monster@@Base+0x488>
   11dac:	bne	11b70 <verify_monster@@Base+0x24>
   11db0:	ldrh	r3, [r5, #22]
   11db4:	cmp	r3, #0
   11db8:	beq	11ddc <verify_monster@@Base+0x290>
   11dbc:	ldr	r2, [r4, r3]
   11dc0:	add	r1, r4, r3
   11dc4:	add	r2, r2, #4
   11dc8:	adds	r3, r1, r2
   11dcc:	beq	11ddc <verify_monster@@Base+0x290>
   11dd0:	ldr	ip, [r3, #-4]
   11dd4:	cmp	ip, #2
   11dd8:	beq	11de4 <verify_monster@@Base+0x298>
   11ddc:	ldr	r0, [pc, #500]	; 11fd8 <verify_monster@@Base+0x48c>
   11de0:	b	11b70 <verify_monster@@Base+0x24>
   11de4:	ldrsh	r2, [r1, r2]
   11de8:	cmp	r2, #10
   11dec:	ldrne	r0, [pc, #488]	; 11fdc <verify_monster@@Base+0x490>
   11df0:	bne	11b70 <verify_monster@@Base+0x24>
   11df4:	ldrsb	r2, [r3, #2]
   11df8:	cmp	r2, #20
   11dfc:	ldrne	r0, [pc, #476]	; 11fe0 <verify_monster@@Base+0x494>
   11e00:	bne	11b70 <verify_monster@@Base+0x24>
   11e04:	cmn	r3, #4
   11e08:	beq	11e18 <verify_monster@@Base+0x2cc>
   11e0c:	ldrsh	r2, [r3, #4]
   11e10:	cmp	r2, #30
   11e14:	beq	11e20 <verify_monster@@Base+0x2d4>
   11e18:	ldr	r0, [pc, #452]	; 11fe4 <verify_monster@@Base+0x498>
   11e1c:	b	11b70 <verify_monster@@Base+0x24>
   11e20:	ldrsb	r3, [r3, #6]
   11e24:	cmp	r3, #40	; 0x28
   11e28:	ldrne	r0, [pc, #440]	; 11fe8 <verify_monster@@Base+0x49c>
   11e2c:	bne	11b70 <verify_monster@@Base+0x24>
   11e30:	cmp	r6, #37	; 0x25
   11e34:	bls	11e54 <verify_monster@@Base+0x308>
   11e38:	ldrh	r3, [r5, #36]	; 0x24
   11e3c:	cmp	r3, #0
   11e40:	beq	11e54 <verify_monster@@Base+0x308>
   11e44:	ldr	r3, [r4, r3]
   11e48:	ldr	r2, [pc, #412]	; 11fec <verify_monster@@Base+0x4a0>
   11e4c:	cmp	r3, r2
   11e50:	beq	11e68 <verify_monster@@Base+0x31c>
   11e54:	ldr	r3, [pc, #428]	; 12008 <verify_monster@@Base+0x4bc>
   11e58:	ldr	r1, [pc, #428]	; 1200c <verify_monster@@Base+0x4c0>
   11e5c:	ldr	r0, [pc, #396]	; 11ff0 <verify_monster@@Base+0x4a4>
   11e60:	mov	r2, #148	; 0x94
   11e64:	bl	10dd4 <__assert_fail@plt>
   11e68:	cmp	r6, #39	; 0x27
   11e6c:	bls	11e88 <verify_monster@@Base+0x33c>
   11e70:	ldrh	r2, [r5, #38]	; 0x26
   11e74:	cmp	r2, #0
   11e78:	beq	11e88 <verify_monster@@Base+0x33c>
   11e7c:	ldr	r2, [r4, r2]
   11e80:	cmp	r2, r3
   11e84:	beq	11e9c <verify_monster@@Base+0x350>
   11e88:	ldr	r3, [pc, #376]	; 12008 <verify_monster@@Base+0x4bc>
   11e8c:	mov	r2, #149	; 0x95
   11e90:	ldr	r1, [pc, #372]	; 1200c <verify_monster@@Base+0x4c0>
   11e94:	ldr	r0, [pc, #344]	; 11ff4 <verify_monster@@Base+0x4a8>
   11e98:	b	11e64 <verify_monster@@Base+0x318>
   11e9c:	cmp	r6, #41	; 0x29
   11ea0:	bls	11ed0 <verify_monster@@Base+0x384>
   11ea4:	ldrh	r1, [r5, #40]	; 0x28
   11ea8:	cmp	r1, #0
   11eac:	beq	11ed0 <verify_monster@@Base+0x384>
   11eb0:	add	r3, pc, #168	; 0xa8
   11eb4:	ldrd	r2, [r3]
   11eb8:	ldrd	r8, [r4, r1]
   11ebc:	cmp	r9, r3
   11ec0:	cmpeq	r8, r2
   11ec4:	mov	r9, r3
   11ec8:	mov	r8, r2
   11ecc:	beq	11ee4 <verify_monster@@Base+0x398>
   11ed0:	ldr	r3, [pc, #304]	; 12008 <verify_monster@@Base+0x4bc>
   11ed4:	mov	r2, #150	; 0x96
   11ed8:	ldr	r1, [pc, #300]	; 1200c <verify_monster@@Base+0x4c0>
   11edc:	ldr	r0, [pc, #276]	; 11ff8 <verify_monster@@Base+0x4ac>
   11ee0:	b	11e64 <verify_monster@@Base+0x318>
   11ee4:	cmp	r6, #43	; 0x2b
   11ee8:	bls	11f08 <verify_monster@@Base+0x3bc>
   11eec:	ldrh	r3, [r5, #42]	; 0x2a
   11ef0:	cmp	r3, #0
   11ef4:	beq	11f08 <verify_monster@@Base+0x3bc>
   11ef8:	ldrd	r2, [r3, r4]
   11efc:	cmp	r3, r9
   11f00:	cmpeq	r2, r8
   11f04:	beq	11f1c <verify_monster@@Base+0x3d0>
   11f08:	ldr	r3, [pc, #248]	; 12008 <verify_monster@@Base+0x4bc>
   11f0c:	mov	r2, #151	; 0x97
   11f10:	ldr	r1, [pc, #244]	; 1200c <verify_monster@@Base+0x4c0>
   11f14:	ldr	r0, [pc, #224]	; 11ffc <verify_monster@@Base+0x4b0>
   11f18:	b	11e64 <verify_monster@@Base+0x318>
   11f1c:	cmp	r6, #45	; 0x2d
   11f20:	bls	11f40 <verify_monster@@Base+0x3f4>
   11f24:	ldrh	r3, [r5, #44]	; 0x2c
   11f28:	cmp	r3, #0
   11f2c:	beq	11f40 <verify_monster@@Base+0x3f4>
   11f30:	ldr	r3, [r4, r3]
   11f34:	ldr	r2, [pc, #196]	; 12000 <verify_monster@@Base+0x4b4>
   11f38:	cmp	r3, r2
   11f3c:	beq	12014 <verify_monster@@Base+0x4c8>
   11f40:	ldr	r3, [pc, #192]	; 12008 <verify_monster@@Base+0x4bc>
   11f44:	mov	r2, #152	; 0x98
   11f48:	ldr	r1, [pc, #188]	; 1200c <verify_monster@@Base+0x4c0>
   11f4c:	ldr	r0, [pc, #176]	; 12004 <verify_monster@@Base+0x4b8>
   11f50:	b	11e64 <verify_monster@@Base+0x318>
   11f54:	nop			; (mov r0, r0)
   11f58:	andeq	r0, r0, r0
   11f5c:	andmi	r0, r8, r0
   11f60:	vrhadd.s<illegal width 64>	d25, d27, d1
   11f64:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   11f68:	svccc	0x00800000
   11f6c:	andmi	r0, r0, r0
   11f70:	submi	r0, r0, r0
   11f74:	movtpl	r4, #61261	; 0xef4d
   11f78:	andeq	r3, r1, ip, lsl r0
   11f7c:	andeq	r3, r1, r4, asr r0
   11f80:	andeq	r3, r1, r7, rrx
   11f84:	andeq	r3, r1, lr, lsl #1
   11f88:	andeq	r3, r1, pc, lsr #1
   11f8c:	ldrdeq	r3, [r1], -r0
   11f90:	strdeq	r3, [r1], -r1
   11f94:	andeq	r3, r1, r5, lsl #2
   11f98:	andeq	r3, r1, sl, lsl r1
   11f9c:	andeq	r3, r1, r2, lsr r1
   11fa0:	andeq	r3, r1, sp, asr #2
   11fa4:	andeq	r3, r1, r7, asr r1
   11fa8:	andeq	r3, r1, fp, ror #2
   11fac:	andeq	r3, r1, r6, lsl #3
   11fb0:	andeq	r3, r1, r3, lsr #3
   11fb4:			; <UNDEFINED> instruction: 0x000131bf
   11fb8:	andeq	r3, r1, r7, ror #3
   11fbc:	andeq	r3, r1, sp, ror #3
   11fc0:	andeq	r3, r1, r1, lsl r2
   11fc4:	andeq	r3, r1, r7, lsl r2
   11fc8:	andeq	r3, r1, ip, lsr r2
   11fcc:	andeq	r3, r1, ip, asr #4
   11fd0:	andeq	r3, r1, r6, ror r2
   11fd4:	andeq	r3, r1, r3, ror #4
   11fd8:	andeq	r3, r1, fp, ror r2
   11fdc:	muleq	r1, pc, r2	; <UNPREDICTABLE>
   11fe0:			; <UNDEFINED> instruction: 0x000132b5
   11fe4:	andeq	r3, r1, fp, asr #5
   11fe8:	andeq	r3, r1, r1, ror #5
   11fec:			; <UNDEFINED> instruction: 0xdd79c941
   11ff0:	andeq	r3, r1, r8, asr #6
   11ff4:	andeq	r3, r1, sp, ror r3
   11ff8:			; <UNDEFINED> instruction: 0x000133b2
   11ffc:	strdeq	r3, [r1], -r1
   12000:	mcrhi	4, 4, sl, cr1, cr1, {3}
   12004:	andeq	r3, r1, r0, lsr r4
   12008:	andeq	r2, r1, r5, asr #29
   1200c:	strdeq	r3, [r1], -r7
   12010:	andeq	r3, r1, r7, ror #8
   12014:	cmp	r6, #47	; 0x2f
   12018:	bls	12034 <verify_monster@@Base+0x4e8>
   1201c:	ldrh	r2, [r5, #46]	; 0x2e
   12020:	cmp	r2, #0
   12024:	beq	12034 <verify_monster@@Base+0x4e8>
   12028:	ldr	r2, [r4, r2]
   1202c:	cmp	r2, r3
   12030:	beq	12048 <verify_monster@@Base+0x4fc>
   12034:	ldr	r3, [pc, #-52]	; 12008 <verify_monster@@Base+0x4bc>
   12038:	mov	r2, #153	; 0x99
   1203c:	ldr	r1, [pc, #-56]	; 1200c <verify_monster@@Base+0x4c0>
   12040:	ldr	r0, [pc, #-56]	; 12010 <verify_monster@@Base+0x4c4>
   12044:	b	11e64 <verify_monster@@Base+0x318>
   12048:	cmp	r6, #49	; 0x31
   1204c:	bls	12074 <verify_monster@@Base+0x528>
   12050:	ldrh	r3, [r5, #48]	; 0x30
   12054:	cmp	r3, #0
   12058:	beq	12074 <verify_monster@@Base+0x528>
   1205c:	ldrd	r8, [r4, r3]
   12060:	add	r3, pc, #152	; 0x98
   12064:	ldrd	r2, [r3]
   12068:	cmp	r9, r3
   1206c:	cmpeq	r8, r2
   12070:	beq	12088 <verify_monster@@Base+0x53c>
   12074:	ldr	r3, [pc, #140]	; 12108 <verify_monster@@Base+0x5bc>
   12078:	mov	r2, #154	; 0x9a
   1207c:	ldr	r1, [pc, #136]	; 1210c <verify_monster@@Base+0x5c0>
   12080:	ldr	r0, [pc, #136]	; 12110 <verify_monster@@Base+0x5c4>
   12084:	b	11e64 <verify_monster@@Base+0x318>
   12088:	cmp	r6, #51	; 0x33
   1208c:	bls	120ac <verify_monster@@Base+0x560>
   12090:	ldrh	r3, [r5, #50]	; 0x32
   12094:	cmp	r3, #0
   12098:	beq	120ac <verify_monster@@Base+0x560>
   1209c:	ldrd	r2, [r3, r4]
   120a0:	cmp	r3, r9
   120a4:	cmpeq	r2, r8
   120a8:	beq	11cc0 <verify_monster@@Base+0x174>
   120ac:	ldr	r3, [pc, #84]	; 12108 <verify_monster@@Base+0x5bc>
   120b0:	mov	r2, #155	; 0x9b
   120b4:	ldr	r1, [pc, #80]	; 1210c <verify_monster@@Base+0x5c0>
   120b8:	ldr	r0, [pc, #84]	; 12114 <verify_monster@@Base+0x5c8>
   120bc:	b	11e64 <verify_monster@@Base+0x318>
   120c0:	ldr	r3, [r0]
   120c4:	adds	r4, r0, r3
   120c8:	beq	11b6c <verify_monster@@Base+0x20>
   120cc:	ldr	r5, [r0, r3]
   120d0:	sub	r5, r4, r5
   120d4:	ldrh	r6, [r5]
   120d8:	cmp	r6, #9
   120dc:	bls	120f8 <verify_monster@@Base+0x5ac>
   120e0:	ldrh	r3, [r5, #8]
   120e4:	cmp	r3, #0
   120e8:	beq	120f8 <verify_monster@@Base+0x5ac>
   120ec:	ldrsh	r3, [r4, r3]
   120f0:	cmp	r3, #80	; 0x50
   120f4:	beq	11b78 <verify_monster@@Base+0x2c>
   120f8:	ldr	r0, [pc, #24]	; 12118 <verify_monster@@Base+0x5cc>
   120fc:	b	11b70 <verify_monster@@Base+0x24>
   12100:			; <UNDEFINED> instruction: 0xc767ddf1
   12104:	mvnsmi	r4, #220, 16	; 0xdc0000
   12108:	andeq	r2, r1, r5, asr #29
   1210c:	strdeq	r3, [r1], -r7
   12110:	muleq	r1, sp, r4
   12114:	ldrdeq	r3, [r1], -sp
   12118:	andeq	r3, r1, r2, lsr r0
   1211c:	add	r1, r1, #2
   12120:	ldrh	r3, [r0, #22]
   12124:	lsl	r1, r1, #1
   12128:	uxth	r1, r1
   1212c:	cmp	r3, r1
   12130:	ldrhi	r3, [r0, #12]
   12134:	ldrhhi	r0, [r3, r1]
   12138:	movls	r0, #0
   1213c:	bx	lr
   12140:	push	{r4, lr}
   12144:	mov	r2, r0
   12148:	bl	1211c <verify_monster@@Base+0x5d0>
   1214c:	uxth	r3, r0
   12150:	cmp	r3, #0
   12154:	ldrne	r3, [r2, #16]
   12158:	uxtahne	r3, r3, r0
   1215c:	ldrne	r0, [r2]
   12160:	addne	r0, r0, r3
   12164:	moveq	r0, r3
   12168:	pop	{r4, pc}
   1216c:	push	{r4, r5, r6, lr}
   12170:	mov	r4, r3
   12174:	mov	r5, r0
   12178:	bl	1211c <verify_monster@@Base+0x5d0>
   1217c:	uxth	r3, r0
   12180:	cmp	r3, #0
   12184:	bne	121a0 <verify_monster@@Base+0x654>
   12188:	cmp	r2, #0
   1218c:	movne	r2, #4
   12190:	moveq	r2, #0
   12194:	str	r3, [r4]
   12198:	mov	r0, r2
   1219c:	pop	{r4, r5, r6, pc}
   121a0:	ldrh	r3, [r5, #20]
   121a4:	uxth	r1, r0
   121a8:	add	r2, r1, #4
   121ac:	cmp	r2, r3
   121b0:	movhi	r2, #13
   121b4:	bhi	12198 <verify_monster@@Base+0x64c>
   121b8:	ldr	r0, [r5, #16]
   121bc:	add	r1, r1, r0
   121c0:	ands	r2, r1, #3
   121c4:	streq	r1, [r4]
   121c8:	movne	r2, #12
   121cc:	b	12198 <verify_monster@@Base+0x64c>
   121d0:	push	{r4, lr}
   121d4:	sub	sp, sp, #24
   121d8:	ldr	ip, [sp, #32]
   121dc:	sub	ip, ip, #1
   121e0:	cmp	ip, #0
   121e4:	str	ip, [sp, #8]
   121e8:	moveq	r0, #3
   121ec:	beq	122a8 <verify_monster@@Base+0x75c>
   121f0:	add	r3, r2, r3
   121f4:	cmp	r2, r3
   121f8:	bcs	12210 <verify_monster@@Base+0x6c4>
   121fc:	add	r2, r3, #4
   12200:	cmp	r1, r2
   12204:	bcc	12210 <verify_monster@@Base+0x6c4>
   12208:	tst	r3, #3
   1220c:	beq	12218 <verify_monster@@Base+0x6cc>
   12210:	mov	r0, #15
   12214:	b	122a8 <verify_monster@@Base+0x75c>
   12218:	ldr	r2, [r0, r3]
   1221c:	str	r3, [sp, #16]
   12220:	subs	r2, r3, r2
   12224:	bmi	12230 <verify_monster@@Base+0x6e4>
   12228:	tst	r2, #1
   1222c:	beq	12238 <verify_monster@@Base+0x6ec>
   12230:	mov	r0, #29
   12234:	b	122a8 <verify_monster@@Base+0x75c>
   12238:	add	lr, r2, #2
   1223c:	cmp	r1, lr
   12240:	movcc	r0, #27
   12244:	bcc	122a8 <verify_monster@@Base+0x75c>
   12248:	ldrh	ip, [r0, r2]
   1224c:	add	r4, r0, r2
   12250:	add	r2, ip, r2
   12254:	cmp	r1, r2
   12258:	strh	ip, [sp, #22]
   1225c:	bcc	12268 <verify_monster@@Base+0x71c>
   12260:	tst	ip, #1
   12264:	beq	12270 <verify_monster@@Base+0x724>
   12268:	mov	r0, #30
   1226c:	b	122a8 <verify_monster@@Base+0x75c>
   12270:	cmp	ip, #3
   12274:	movls	r0, #28
   12278:	bls	122a8 <verify_monster@@Base+0x75c>
   1227c:	ldrh	r2, [r0, lr]
   12280:	sub	r3, r1, r3
   12284:	cmp	r3, r2
   12288:	strh	r2, [sp, #20]
   1228c:	movcc	r0, #20
   12290:	bcc	122a8 <verify_monster@@Base+0x75c>
   12294:	stm	sp, {r0, r1}
   12298:	ldr	r3, [sp, #36]	; 0x24
   1229c:	mov	r0, sp
   122a0:	str	r4, [sp, #12]
   122a4:	blx	r3
   122a8:	add	sp, sp, #24
   122ac:	pop	{r4, pc}
   122b0:	add	r3, r2, r3
   122b4:	cmp	r2, r3
   122b8:	ldrh	ip, [sp, #4]
   122bc:	bcs	122e4 <verify_monster@@Base+0x798>
   122c0:	add	r2, r3, #4
   122c4:	cmp	r1, r2
   122c8:	bcc	122e4 <verify_monster@@Base+0x798>
   122cc:	cmp	ip, #4
   122d0:	movcc	ip, #4
   122d4:	sub	ip, ip, #1
   122d8:	orr	ip, ip, #3
   122dc:	tst	ip, r2
   122e0:	beq	122f4 <verify_monster@@Base+0x7a8>
   122e4:	mov	r0, #16
   122e8:	bx	lr
   122ec:	mov	r0, #25
   122f0:	bx	lr
   122f4:	ldr	r3, [r0, r3]
   122f8:	ldr	r0, [sp, #8]
   122fc:	cmp	r0, r3
   12300:	bcc	122ec <verify_monster@@Base+0x7a0>
   12304:	ldr	r0, [sp]
   12308:	sub	r1, r1, r2
   1230c:	mul	r0, r3, r0
   12310:	cmp	r1, r0
   12314:	movcc	r0, #26
   12318:	movcs	r0, #0
   1231c:	bx	lr
   12320:	add	r3, r2, r3
   12324:	cmp	r2, r3
   12328:	bcs	12340 <verify_monster@@Base+0x7f4>
   1232c:	add	r2, r3, #4
   12330:	cmp	r1, r2
   12334:	bcc	12340 <verify_monster@@Base+0x7f4>
   12338:	tst	r3, #3
   1233c:	beq	12350 <verify_monster@@Base+0x804>
   12340:	mov	r0, #17
   12344:	bx	lr
   12348:	mov	r0, #8
   1234c:	bx	lr
   12350:	ldr	r3, [r0, r3]
   12354:	sub	r1, r1, r2
   12358:	add	ip, r3, #1
   1235c:	cmp	r1, ip
   12360:	bcc	12348 <verify_monster@@Base+0x7fc>
   12364:	add	r0, r0, r2
   12368:	ldrb	r0, [r0, r3]
   1236c:	cmp	r0, #0
   12370:	movne	r0, #7
   12374:	moveq	r0, #0
   12378:	bx	lr

0001237c <flatcc_verify_error_string@@Base>:
   1237c:	cmp	r0, #36	; 0x24
   12380:	ldrls	r3, [pc, #8]	; 12390 <flatcc_verify_error_string@@Base+0x14>
   12384:	ldrls	r0, [r3, r0, lsl #2]
   12388:	ldrhi	r0, [pc, #4]	; 12394 <flatcc_verify_error_string@@Base+0x18>
   1238c:	bx	lr
   12390:	andeq	r3, r1, r0, lsl #12
   12394:	muleq	r1, r4, r6

00012398 <flatcc_verify_field@@Base>:
   12398:	push	{r4, r5, r6, lr}
   1239c:	mov	r5, r0
   123a0:	mov	r4, r3
   123a4:	bl	1211c <verify_monster@@Base+0x5d0>
   123a8:	uxth	r1, r0
   123ac:	cmp	r1, #0
   123b0:	beq	123e8 <flatcc_verify_field@@Base+0x50>
   123b4:	ldrh	r3, [r5, #20]
   123b8:	add	r2, r2, r1
   123bc:	cmp	r2, r3
   123c0:	bhi	123f0 <flatcc_verify_field@@Base+0x58>
   123c4:	ldr	r0, [r5]
   123c8:	ldr	r3, [r5, #16]
   123cc:	sub	r4, r4, #1
   123d0:	add	r0, r0, r3
   123d4:	add	r0, r0, r1
   123d8:	tst	r0, r4
   123dc:	moveq	r0, #0
   123e0:	movne	r0, #12
   123e4:	pop	{r4, r5, r6, pc}
   123e8:	mov	r0, r1
   123ec:	pop	{r4, r5, r6, pc}
   123f0:	mov	r0, #13
   123f4:	pop	{r4, r5, r6, pc}

000123f8 <flatcc_verify_string_field@@Base>:
   123f8:	push	{r0, r1, r4, lr}
   123fc:	add	r3, sp, #4
   12400:	mov	r4, r0
   12404:	bl	1216c <verify_monster@@Base+0x620>
   12408:	cmp	r0, #0
   1240c:	bne	1242c <flatcc_verify_string_field@@Base+0x34>
   12410:	ldr	r2, [sp, #4]
   12414:	cmp	r2, #0
   12418:	beq	1242c <flatcc_verify_string_field@@Base+0x34>
   1241c:	ldr	r0, [r4]
   12420:	ldr	r1, [r4, #4]
   12424:	ldr	r3, [r0, r2]
   12428:	bl	12320 <verify_monster@@Base+0x7d4>
   1242c:	add	sp, sp, #8
   12430:	pop	{r4, pc}

00012434 <flatcc_verify_vector_field@@Base>:
   12434:	push	{r4, r5, lr}
   12438:	sub	sp, sp, #28
   1243c:	mov	r5, r3
   12440:	add	r3, sp, #20
   12444:	mov	r4, r0
   12448:	bl	1216c <verify_monster@@Base+0x620>
   1244c:	cmp	r0, #0
   12450:	bne	12484 <flatcc_verify_vector_field@@Base+0x50>
   12454:	ldr	r2, [sp, #20]
   12458:	cmp	r2, #0
   1245c:	beq	12484 <flatcc_verify_vector_field@@Base+0x50>
   12460:	ldr	r3, [sp, #44]	; 0x2c
   12464:	ldr	r0, [r4]
   12468:	str	r3, [sp, #8]
   1246c:	ldrh	r3, [sp, #40]	; 0x28
   12470:	str	r5, [sp]
   12474:	ldr	r1, [r4, #4]
   12478:	str	r3, [sp, #4]
   1247c:	ldr	r3, [r0, r2]
   12480:	bl	122b0 <verify_monster@@Base+0x764>
   12484:	add	sp, sp, #28
   12488:	pop	{r4, r5, pc}

0001248c <flatcc_verify_string_vector_field@@Base>:
   1248c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12490:	sub	sp, sp, #28
   12494:	add	r3, sp, #20
   12498:	mov	r7, r0
   1249c:	bl	1216c <verify_monster@@Base+0x620>
   124a0:	subs	r6, r0, #0
   124a4:	bne	12504 <flatcc_verify_string_vector_field@@Base+0x78>
   124a8:	ldr	r4, [sp, #20]
   124ac:	cmp	r4, #0
   124b0:	beq	12504 <flatcc_verify_string_vector_field@@Base+0x78>
   124b4:	ldm	r7, {r5, r8}
   124b8:	mvn	r3, #-1073741824	; 0xc0000000
   124bc:	mov	r2, r4
   124c0:	ldr	r7, [r5, r4]
   124c4:	str	r3, [sp, #8]
   124c8:	mov	r3, #4
   124cc:	str	r3, [sp, #4]
   124d0:	str	r3, [sp]
   124d4:	mov	r1, r8
   124d8:	mov	r3, r7
   124dc:	mov	r0, r5
   124e0:	bl	122b0 <verify_monster@@Base+0x764>
   124e4:	subs	r6, r0, #0
   124e8:	bne	12504 <flatcc_verify_string_vector_field@@Base+0x78>
   124ec:	add	r4, r4, r7
   124f0:	mov	r7, r6
   124f4:	ldr	r9, [r5, r4]
   124f8:	add	r4, r4, #4
   124fc:	cmp	r9, r7
   12500:	bne	12510 <flatcc_verify_string_vector_field@@Base+0x84>
   12504:	mov	r0, r6
   12508:	add	sp, sp, #28
   1250c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12510:	ldr	r3, [r5, r4]
   12514:	mov	r2, r4
   12518:	mov	r1, r8
   1251c:	mov	r0, r5
   12520:	bl	12320 <verify_monster@@Base+0x7d4>
   12524:	cmp	r0, #0
   12528:	addeq	r7, r7, #1
   1252c:	addeq	r4, r4, #4
   12530:	beq	124fc <flatcc_verify_string_vector_field@@Base+0x70>
   12534:	mov	r6, r0
   12538:	b	12504 <flatcc_verify_string_vector_field@@Base+0x78>

0001253c <flatcc_verify_table_field@@Base>:
   1253c:	push	{r4, r5, lr}
   12540:	sub	sp, sp, #20
   12544:	mov	r5, r3
   12548:	add	r3, sp, #12
   1254c:	mov	r4, r0
   12550:	bl	1216c <verify_monster@@Base+0x620>
   12554:	cmp	r0, #0
   12558:	bne	12584 <flatcc_verify_table_field@@Base+0x48>
   1255c:	ldr	r2, [sp, #12]
   12560:	cmp	r2, #0
   12564:	beq	12584 <flatcc_verify_table_field@@Base+0x48>
   12568:	ldr	r0, [r4]
   1256c:	ldr	r3, [r4, #8]
   12570:	str	r5, [sp, #4]
   12574:	str	r3, [sp]
   12578:	ldr	r1, [r4, #4]
   1257c:	ldr	r3, [r0, r2]
   12580:	bl	121d0 <verify_monster@@Base+0x684>
   12584:	add	sp, sp, #20
   12588:	pop	{r4, r5, pc}

0001258c <flatcc_verify_table_vector_field@@Base>:
   1258c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12590:	sub	sp, sp, #36	; 0x24
   12594:	mov	sl, r3
   12598:	add	r3, sp, #28
   1259c:	mov	r7, r0
   125a0:	bl	1216c <verify_monster@@Base+0x620>
   125a4:	subs	r6, r0, #0
   125a8:	bne	12630 <flatcc_verify_table_vector_field@@Base+0xa4>
   125ac:	ldr	r4, [sp, #28]
   125b0:	cmp	r4, #0
   125b4:	beq	12630 <flatcc_verify_table_vector_field@@Base+0xa4>
   125b8:	ldr	r9, [r7, #8]
   125bc:	cmp	r9, #0
   125c0:	movle	r6, #3
   125c4:	ble	12630 <flatcc_verify_table_vector_field@@Base+0xa4>
   125c8:	ldm	r7, {r5, r8}
   125cc:	mvn	r3, #-1073741824	; 0xc0000000
   125d0:	mov	r2, r4
   125d4:	ldr	r7, [r5, r4]
   125d8:	str	r3, [sp, #8]
   125dc:	mov	r3, #4
   125e0:	str	r3, [sp, #4]
   125e4:	str	r3, [sp]
   125e8:	mov	r1, r8
   125ec:	mov	r3, r7
   125f0:	mov	r0, r5
   125f4:	bl	122b0 <verify_monster@@Base+0x764>
   125f8:	cmp	r0, #0
   125fc:	bne	1267c <flatcc_verify_table_vector_field@@Base+0xf0>
   12600:	add	r4, r4, r7
   12604:	sub	r9, r9, #1
   12608:	ldr	r3, [r5, r4]
   1260c:	add	r4, r4, #4
   12610:	add	r4, r5, r4
   12614:	mov	r7, r6
   12618:	str	r3, [sp, #20]
   1261c:	sub	r3, r4, r5
   12620:	str	r3, [sp, #16]
   12624:	ldr	r3, [sp, #20]
   12628:	cmp	r3, r7
   1262c:	bne	1263c <flatcc_verify_table_vector_field@@Base+0xb0>
   12630:	mov	r0, r6
   12634:	add	sp, sp, #36	; 0x24
   12638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1263c:	mov	fp, r4
   12640:	stm	sp, {r9, sl}
   12644:	ldr	r2, [sp, #16]
   12648:	ldr	r3, [fp]
   1264c:	mov	r1, r8
   12650:	mov	r0, r5
   12654:	bl	121d0 <verify_monster@@Base+0x684>
   12658:	add	r4, r4, #4
   1265c:	cmp	r0, #0
   12660:	beq	12684 <flatcc_verify_table_vector_field@@Base+0xf8>
   12664:	stm	sp, {r9, sl}
   12668:	ldr	r2, [sp, #16]
   1266c:	ldr	r3, [fp]
   12670:	mov	r1, r8
   12674:	mov	r0, r5
   12678:	bl	121d0 <verify_monster@@Base+0x684>
   1267c:	mov	r6, r0
   12680:	b	12630 <flatcc_verify_table_vector_field@@Base+0xa4>
   12684:	add	r7, r7, #1
   12688:	b	1261c <flatcc_verify_table_vector_field@@Base+0x90>

0001268c <flatcc_verify_union_table@@Base>:
   1268c:	push	{r0, r1, r2, lr}
   12690:	str	r1, [sp, #4]
   12694:	ldr	r3, [r0, #8]
   12698:	str	r3, [sp]
   1269c:	ldr	r3, [r0, #20]
   126a0:	ldr	r2, [r0, #16]
   126a4:	ldm	r0, {r0, r1}
   126a8:	bl	121d0 <verify_monster@@Base+0x684>
   126ac:	add	sp, sp, #12
   126b0:	pop	{pc}		; (ldr pc, [sp], #4)

000126b4 <flatcc_verify_union_struct@@Base>:
   126b4:	ldr	ip, [r0, #4]
   126b8:	ldr	r3, [r0, #16]
   126bc:	ldr	r0, [r0, #20]
   126c0:	cmp	r0, #0
   126c4:	beq	126f8 <flatcc_verify_union_struct@@Base+0x44>
   126c8:	add	r3, r3, r0
   126cc:	cmp	ip, r3
   126d0:	bcc	126f8 <flatcc_verify_union_struct@@Base+0x44>
   126d4:	adds	r1, r1, r3
   126d8:	bcs	12700 <flatcc_verify_union_struct@@Base+0x4c>
   126dc:	cmp	ip, r1
   126e0:	bcc	12708 <flatcc_verify_union_struct@@Base+0x54>
   126e4:	sub	r2, r2, #1
   126e8:	tst	r2, r3
   126ec:	movne	r0, #11
   126f0:	moveq	r0, #0
   126f4:	bx	lr
   126f8:	mov	r0, #18
   126fc:	bx	lr
   12700:	mov	r0, #10
   12704:	bx	lr
   12708:	mov	r0, #9
   1270c:	bx	lr

00012710 <flatcc_verify_union_string@@Base>:
   12710:	ldr	r3, [r0, #20]
   12714:	ldr	r2, [r0, #16]
   12718:	ldm	r0, {r0, r1}
   1271c:	b	12320 <verify_monster@@Base+0x7d4>

00012720 <flatcc_verify_buffer_header@@Base>:
   12720:	ands	r3, r0, #3
   12724:	push	{r0, r1, r4, lr}
   12728:	movne	r0, #5
   1272c:	bne	12784 <flatcc_verify_buffer_header@@Base+0x64>
   12730:	cmn	r1, #9
   12734:	movhi	r0, #6
   12738:	bhi	12784 <flatcc_verify_buffer_header@@Base+0x64>
   1273c:	cmp	r1, #7
   12740:	movls	r0, #1
   12744:	bls	12784 <flatcc_verify_buffer_header@@Base+0x64>
   12748:	cmp	r2, #0
   1274c:	beq	12780 <flatcc_verify_buffer_header@@Base+0x60>
   12750:	mov	r4, r0
   12754:	add	r0, sp, #8
   12758:	mov	r1, r2
   1275c:	str	r3, [r0, #-4]!
   12760:	mov	r2, #4
   12764:	bl	10d8c <strncpy@plt>
   12768:	ldr	r3, [sp, #4]
   1276c:	ldr	r2, [r4, #4]
   12770:	cmp	r3, #0
   12774:	cmpne	r2, r3
   12778:	movne	r0, #2
   1277c:	bne	12784 <flatcc_verify_buffer_header@@Base+0x64>
   12780:	mov	r0, #0
   12784:	add	sp, sp, #8
   12788:	pop	{r4, pc}

0001278c <flatcc_verify_typed_buffer_header@@Base>:
   1278c:	tst	r0, #3
   12790:	bne	127c0 <flatcc_verify_typed_buffer_header@@Base+0x34>
   12794:	cmn	r1, #9
   12798:	bhi	127c8 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   1279c:	cmp	r1, #7
   127a0:	bls	127d0 <flatcc_verify_typed_buffer_header@@Base+0x44>
   127a4:	cmp	r2, #0
   127a8:	beq	127d8 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   127ac:	ldr	r0, [r0, #4]
   127b0:	cmp	r2, r0
   127b4:	movne	r0, #2
   127b8:	moveq	r0, #0
   127bc:	bx	lr
   127c0:	mov	r0, #5
   127c4:	bx	lr
   127c8:	mov	r0, #6
   127cc:	bx	lr
   127d0:	mov	r0, #1
   127d4:	bx	lr
   127d8:	mov	r0, r2
   127dc:	bx	lr

000127e0 <flatcc_verify_struct_as_root@@Base>:
   127e0:	push	{r4, r5, r6, r7, r8, lr}
   127e4:	mov	r7, r0
   127e8:	mov	r6, r1
   127ec:	mov	r8, r2
   127f0:	mov	r4, r3
   127f4:	ldrh	r5, [sp, #24]
   127f8:	bl	12720 <flatcc_verify_buffer_header@@Base>
   127fc:	cmp	r0, #0
   12800:	beq	12818 <flatcc_verify_struct_as_root@@Base+0x38>
   12804:	mov	r2, r8
   12808:	mov	r1, r6
   1280c:	mov	r0, r7
   12810:	pop	{r4, r5, r6, r7, r8, lr}
   12814:	b	12720 <flatcc_verify_buffer_header@@Base>
   12818:	ldr	r2, [r7]
   1281c:	cmp	r6, r2
   12820:	movcs	r3, #0
   12824:	movcc	r3, #1
   12828:	cmp	r2, #0
   1282c:	orreq	r3, r3, #1
   12830:	cmp	r3, #0
   12834:	bne	1285c <flatcc_verify_struct_as_root@@Base+0x7c>
   12838:	adds	r4, r2, r4
   1283c:	bcs	12864 <flatcc_verify_struct_as_root@@Base+0x84>
   12840:	cmp	r6, r4
   12844:	bcc	1286c <flatcc_verify_struct_as_root@@Base+0x8c>
   12848:	sub	r5, r5, #1
   1284c:	tst	r5, r2
   12850:	moveq	r0, #0
   12854:	movne	r0, #11
   12858:	pop	{r4, r5, r6, r7, r8, pc}
   1285c:	mov	r0, #18
   12860:	pop	{r4, r5, r6, r7, r8, pc}
   12864:	mov	r0, #10
   12868:	pop	{r4, r5, r6, r7, r8, pc}
   1286c:	mov	r0, #9
   12870:	pop	{r4, r5, r6, r7, r8, pc}

00012874 <flatcc_verify_struct_as_typed_root@@Base>:
   12874:	push	{r4, r5, r6, lr}
   12878:	mov	r5, r0
   1287c:	bl	1278c <flatcc_verify_typed_buffer_header@@Base>
   12880:	cmp	r0, #0
   12884:	popne	{r4, r5, r6, pc}
   12888:	ldr	r2, [r5]
   1288c:	mov	r4, r1
   12890:	cmp	r1, r2
   12894:	movcs	r1, #0
   12898:	movcc	r1, #1
   1289c:	cmp	r2, #0
   128a0:	orreq	r1, r1, #1
   128a4:	cmp	r1, #0
   128a8:	bne	128d4 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   128ac:	adds	r3, r2, r3
   128b0:	bcs	128dc <flatcc_verify_struct_as_typed_root@@Base+0x68>
   128b4:	cmp	r4, r3
   128b8:	bcc	128e4 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   128bc:	ldrh	r3, [sp, #16]
   128c0:	sub	r3, r3, #1
   128c4:	tst	r3, r2
   128c8:	moveq	r0, #0
   128cc:	movne	r0, #11
   128d0:	pop	{r4, r5, r6, pc}
   128d4:	mov	r0, #18
   128d8:	pop	{r4, r5, r6, pc}
   128dc:	mov	r0, #10
   128e0:	pop	{r4, r5, r6, pc}
   128e4:	mov	r0, #9
   128e8:	pop	{r4, r5, r6, pc}

000128ec <flatcc_verify_table_as_root@@Base>:
   128ec:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   128f0:	mov	r7, r2
   128f4:	mov	r4, r0
   128f8:	mov	r5, r1
   128fc:	mov	r6, r3
   12900:	bl	12720 <flatcc_verify_buffer_header@@Base>
   12904:	subs	r2, r0, #0
   12908:	beq	12924 <flatcc_verify_table_as_root@@Base+0x38>
   1290c:	mov	r2, r7
   12910:	mov	r1, r5
   12914:	mov	r0, r4
   12918:	add	sp, sp, #12
   1291c:	pop	{r4, r5, r6, r7, lr}
   12920:	b	12720 <flatcc_verify_buffer_header@@Base>
   12924:	mov	r3, #100	; 0x64
   12928:	str	r3, [sp]
   1292c:	str	r6, [sp, #4]
   12930:	ldr	r3, [r4]
   12934:	mov	r1, r5
   12938:	mov	r0, r4
   1293c:	bl	121d0 <verify_monster@@Base+0x684>
   12940:	add	sp, sp, #12
   12944:	pop	{r4, r5, r6, r7, pc}

00012948 <flatcc_verify_table_as_typed_root@@Base>:
   12948:	push	{r0, r1, r2, r4, r5, lr}
   1294c:	mov	r4, r0
   12950:	bl	1278c <flatcc_verify_typed_buffer_header@@Base>
   12954:	cmp	r0, #0
   12958:	bne	12978 <flatcc_verify_table_as_typed_root@@Base+0x30>
   1295c:	str	r3, [sp, #4]
   12960:	mov	r3, #100	; 0x64
   12964:	str	r3, [sp]
   12968:	mov	r2, r0
   1296c:	ldr	r3, [r4]
   12970:	mov	r0, r4
   12974:	bl	121d0 <verify_monster@@Base+0x684>
   12978:	add	sp, sp, #12
   1297c:	pop	{r4, r5, pc}

00012980 <flatcc_verify_struct_as_nested_root@@Base>:
   12980:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12984:	mov	r7, #1
   12988:	ldrh	r4, [sp, #52]	; 0x34
   1298c:	mvn	sl, #0
   12990:	mov	r8, r3
   12994:	stm	sp, {r7, sl}
   12998:	mov	r3, r4
   1299c:	mov	r5, r0
   129a0:	mov	r6, r1
   129a4:	mov	fp, r2
   129a8:	ldr	r9, [sp, #48]	; 0x30
   129ac:	bl	12434 <flatcc_verify_vector_field@@Base>
   129b0:	cmp	r0, #0
   129b4:	beq	129dc <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   129b8:	str	sl, [sp, #52]	; 0x34
   129bc:	str	r7, [sp, #48]	; 0x30
   129c0:	mov	r3, r4
   129c4:	mov	r2, fp
   129c8:	mov	r1, r6
   129cc:	mov	r0, r5
   129d0:	add	sp, sp, #12
   129d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d8:	b	12434 <flatcc_verify_vector_field@@Base>
   129dc:	mov	r1, r6
   129e0:	mov	r0, r5
   129e4:	bl	12140 <verify_monster@@Base+0x5f4>
   129e8:	subs	r1, r0, #0
   129ec:	beq	12a18 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   129f0:	ldr	ip, [r1]
   129f4:	mov	r3, r9
   129f8:	add	r0, r1, ip
   129fc:	str	r4, [sp, #48]	; 0x30
   12a00:	mov	r2, r8
   12a04:	ldr	r1, [r1, ip]
   12a08:	add	r0, r0, #4
   12a0c:	add	sp, sp, #12
   12a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a14:	b	127e0 <flatcc_verify_struct_as_root@@Base>
   12a18:	add	sp, sp, #12
   12a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a20 <flatcc_verify_table_as_nested_root@@Base>:
   12a20:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a24:	mov	r7, #1
   12a28:	ldrh	r5, [sp, #48]	; 0x30
   12a2c:	mvn	sl, #0
   12a30:	mov	r8, r3
   12a34:	stm	sp, {r7, sl}
   12a38:	mov	r3, r5
   12a3c:	mov	r6, r0
   12a40:	mov	r4, r1
   12a44:	mov	fp, r2
   12a48:	ldr	r9, [sp, #52]	; 0x34
   12a4c:	bl	12434 <flatcc_verify_vector_field@@Base>
   12a50:	cmp	r0, #0
   12a54:	beq	12a7c <flatcc_verify_table_as_nested_root@@Base+0x5c>
   12a58:	str	sl, [sp, #52]	; 0x34
   12a5c:	str	r7, [sp, #48]	; 0x30
   12a60:	mov	r3, r5
   12a64:	mov	r2, fp
   12a68:	mov	r1, r4
   12a6c:	mov	r0, r6
   12a70:	add	sp, sp, #12
   12a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a78:	b	12434 <flatcc_verify_vector_field@@Base>
   12a7c:	mov	r1, r4
   12a80:	mov	r0, r6
   12a84:	bl	12140 <verify_monster@@Base+0x5f4>
   12a88:	subs	r3, r0, #0
   12a8c:	beq	12af4 <flatcc_verify_table_as_nested_root@@Base+0xd4>
   12a90:	ldr	r2, [r3]
   12a94:	add	r7, r3, r2
   12a98:	ldr	r5, [r3, r2]
   12a9c:	add	r4, r7, #4
   12aa0:	mov	r2, r8
   12aa4:	mov	r1, r5
   12aa8:	mov	r0, r4
   12aac:	bl	12720 <flatcc_verify_buffer_header@@Base>
   12ab0:	subs	r2, r0, #0
   12ab4:	beq	12ad0 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   12ab8:	mov	r2, r8
   12abc:	mov	r1, r5
   12ac0:	mov	r0, r4
   12ac4:	add	sp, sp, #12
   12ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12acc:	b	12720 <flatcc_verify_buffer_header@@Base>
   12ad0:	ldr	r3, [r6, #8]
   12ad4:	str	r9, [sp, #52]	; 0x34
   12ad8:	str	r3, [sp, #48]	; 0x30
   12adc:	mov	r1, r5
   12ae0:	ldr	r3, [r7, #4]
   12ae4:	mov	r0, r4
   12ae8:	add	sp, sp, #12
   12aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af0:	b	121d0 <verify_monster@@Base+0x684>
   12af4:	add	sp, sp, #12
   12af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012afc <flatcc_verify_union_field@@Base>:
   12afc:	push	{r4, r5, r6, r7, r8, lr}
   12b00:	mov	r6, r1
   12b04:	sub	r1, r1, #1
   12b08:	sub	sp, sp, #32
   12b0c:	uxth	r1, r1
   12b10:	mov	r7, r3
   12b14:	mov	r4, r0
   12b18:	bl	1211c <verify_monster@@Base+0x5d0>
   12b1c:	uxth	r3, r0
   12b20:	cmp	r3, #0
   12b24:	bne	12b5c <flatcc_verify_union_field@@Base+0x60>
   12b28:	mov	r1, r6
   12b2c:	mov	r0, r4
   12b30:	bl	1211c <verify_monster@@Base+0x5d0>
   12b34:	uxth	r0, r0
   12b38:	cmp	r0, #0
   12b3c:	movne	r0, #23
   12b40:	bne	12b54 <flatcc_verify_union_field@@Base+0x58>
   12b44:	cmp	r2, #0
   12b48:	movne	r0, #21
   12b4c:	bne	12b54 <flatcc_verify_union_field@@Base+0x58>
   12b50:	mov	r0, #0
   12b54:	add	sp, sp, #32
   12b58:	pop	{r4, r5, r6, r7, r8, pc}
   12b5c:	ldrh	r3, [r4, #20]
   12b60:	uxth	r5, r0
   12b64:	add	r1, r5, #1
   12b68:	cmp	r1, r3
   12b6c:	movhi	r0, #13
   12b70:	bhi	12b54 <flatcc_verify_union_field@@Base+0x58>
   12b74:	mov	r1, r6
   12b78:	mov	r0, r4
   12b7c:	bl	1211c <verify_monster@@Base+0x5d0>
   12b80:	ldr	r3, [r4, #16]
   12b84:	ldr	r8, [r4]
   12b88:	add	r5, r5, r3
   12b8c:	ldrb	r1, [r8, r5]
   12b90:	adds	r3, r1, #0
   12b94:	movne	r3, #1
   12b98:	uxth	r0, r0
   12b9c:	cmp	r0, #0
   12ba0:	movne	r0, r3
   12ba4:	orreq	r0, r3, #1
   12ba8:	cmp	r0, #0
   12bac:	moveq	r0, #24
   12bb0:	beq	12b54 <flatcc_verify_union_field@@Base+0x58>
   12bb4:	cmp	r1, #0
   12bb8:	beq	12b50 <flatcc_verify_union_field@@Base+0x54>
   12bbc:	add	r3, sp, #4
   12bc0:	mov	r1, r6
   12bc4:	mov	r0, r4
   12bc8:	bl	1216c <verify_monster@@Base+0x620>
   12bcc:	cmp	r0, #0
   12bd0:	bne	12b54 <flatcc_verify_union_field@@Base+0x58>
   12bd4:	ldr	r3, [sp, #4]
   12bd8:	cmp	r3, #0
   12bdc:	beq	12b50 <flatcc_verify_union_field@@Base+0x54>
   12be0:	ldr	r1, [r4, #4]
   12be4:	ldr	r2, [r4]
   12be8:	str	r1, [sp, #12]
   12bec:	ldr	r1, [r4, #8]
   12bf0:	str	r3, [sp, #24]
   12bf4:	str	r1, [sp, #16]
   12bf8:	ldr	r3, [r2, r3]
   12bfc:	str	r2, [sp, #8]
   12c00:	str	r3, [sp, #28]
   12c04:	ldrb	r3, [r8, r5]
   12c08:	add	r0, sp, #8
   12c0c:	strb	r3, [sp, #20]
   12c10:	blx	r7
   12c14:	b	12b54 <flatcc_verify_union_field@@Base+0x58>

00012c18 <flatcc_verify_union_vector_field@@Base>:
   12c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c1c:	sub	r5, r1, #1
   12c20:	sub	sp, sp, #60	; 0x3c
   12c24:	uxth	r5, r5
   12c28:	mov	r9, r1
   12c2c:	mov	r1, r5
   12c30:	mov	r4, r0
   12c34:	mov	r8, r2
   12c38:	mov	sl, r3
   12c3c:	bl	1211c <verify_monster@@Base+0x5d0>
   12c40:	uxth	r0, r0
   12c44:	cmp	r0, #0
   12c48:	bne	12c78 <flatcc_verify_union_vector_field@@Base+0x60>
   12c4c:	mov	r1, r9
   12c50:	mov	r0, r4
   12c54:	bl	1211c <verify_monster@@Base+0x5d0>
   12c58:	cmp	r2, #0
   12c5c:	uxth	r0, r0
   12c60:	clz	r0, r0
   12c64:	lsr	r0, r0, #5
   12c68:	moveq	r0, #0
   12c6c:	cmp	r0, #0
   12c70:	movne	r3, #22
   12c74:	bne	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12c78:	mov	r7, #1
   12c7c:	mvn	fp, #0
   12c80:	mov	r3, r7
   12c84:	stm	sp, {r7, fp}
   12c88:	mov	r2, r8
   12c8c:	mov	r1, r5
   12c90:	mov	r0, r4
   12c94:	bl	12434 <flatcc_verify_vector_field@@Base>
   12c98:	subs	r6, r0, #0
   12c9c:	beq	12cc0 <flatcc_verify_union_vector_field@@Base+0xa8>
   12ca0:	stm	sp, {r7, fp}
   12ca4:	mov	r3, r7
   12ca8:	mov	r2, r8
   12cac:	mov	r1, r5
   12cb0:	mov	r0, r4
   12cb4:	bl	12434 <flatcc_verify_vector_field@@Base>
   12cb8:	mov	r3, r0
   12cbc:	b	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12cc0:	mov	r1, r5
   12cc4:	mov	r0, r4
   12cc8:	bl	12140 <verify_monster@@Base+0x5f4>
   12ccc:	cmp	r0, #0
   12cd0:	bne	12ce4 <flatcc_verify_union_vector_field@@Base+0xcc>
   12cd4:	mov	r3, r6
   12cd8:	mov	r0, r3
   12cdc:	add	sp, sp, #60	; 0x3c
   12ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce4:	ldr	r3, [r0]
   12ce8:	mov	r2, r8
   12cec:	add	r5, r0, r3
   12cf0:	ldr	r7, [r0, r3]
   12cf4:	mov	r1, r9
   12cf8:	add	r3, sp, #28
   12cfc:	mov	r0, r4
   12d00:	bl	1216c <verify_monster@@Base+0x620>
   12d04:	subs	r3, r0, #0
   12d08:	bne	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12d0c:	ldr	r9, [sp, #28]
   12d10:	cmp	r9, #0
   12d14:	beq	12cd4 <flatcc_verify_union_vector_field@@Base+0xbc>
   12d18:	ldr	r8, [r4, #8]
   12d1c:	cmp	r8, #0
   12d20:	movle	r3, #3
   12d24:	ble	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12d28:	ldm	r4, {r6, fp}
   12d2c:	mvn	r3, #-1073741824	; 0xc0000000
   12d30:	mov	r2, r9
   12d34:	ldr	r4, [r6, r9]
   12d38:	str	r3, [sp, #8]
   12d3c:	mov	r3, #4
   12d40:	str	r3, [sp, #4]
   12d44:	str	r3, [sp]
   12d48:	mov	r1, fp
   12d4c:	mov	r3, r4
   12d50:	mov	r0, r6
   12d54:	bl	122b0 <verify_monster@@Base+0x764>
   12d58:	subs	r3, r0, #0
   12d5c:	bne	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12d60:	add	r4, r4, r9
   12d64:	ldr	r2, [r6, r4]
   12d68:	cmp	r7, r2
   12d6c:	movne	r3, #34	; 0x22
   12d70:	bne	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12d74:	add	r5, r5, #4
   12d78:	add	r4, r4, #4
   12d7c:	add	r7, r7, r5
   12d80:	sub	r8, r8, #1
   12d84:	str	r6, [sp, #32]
   12d88:	str	fp, [sp, #36]	; 0x24
   12d8c:	str	r8, [sp, #40]	; 0x28
   12d90:	cmp	r5, r7
   12d94:	beq	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12d98:	ldr	r1, [r6, r4]
   12d9c:	ldrb	r2, [r5]
   12da0:	cmp	r1, #0
   12da4:	bne	12db8 <flatcc_verify_union_vector_field@@Base+0x1a0>
   12da8:	cmp	r2, #0
   12dac:	beq	12df0 <flatcc_verify_union_vector_field@@Base+0x1d8>
   12db0:	mov	r3, #32
   12db4:	b	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>
   12db8:	cmp	r2, #0
   12dbc:	str	r3, [sp, #20]
   12dc0:	beq	12dfc <flatcc_verify_union_vector_field@@Base+0x1e4>
   12dc4:	add	r0, sp, #32
   12dc8:	strb	r2, [sp, #44]	; 0x2c
   12dcc:	str	r4, [sp, #48]	; 0x30
   12dd0:	str	r1, [sp, #52]	; 0x34
   12dd4:	blx	sl
   12dd8:	ldr	r3, [sp, #20]
   12ddc:	cmp	r0, #0
   12de0:	beq	12df0 <flatcc_verify_union_vector_field@@Base+0x1d8>
   12de4:	add	r0, sp, #32
   12de8:	blx	sl
   12dec:	b	12cb8 <flatcc_verify_union_vector_field@@Base+0xa0>
   12df0:	add	r4, r4, #4
   12df4:	add	r5, r5, #1
   12df8:	b	12d90 <flatcc_verify_union_vector_field@@Base+0x178>
   12dfc:	mov	r3, #33	; 0x21
   12e00:	b	12cd8 <flatcc_verify_union_vector_field@@Base+0xc0>

00012e04 <__libc_csu_init@@Base>:
   12e04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e08:	mov	r7, r0
   12e0c:	ldr	r6, [pc, #72]	; 12e5c <__libc_csu_init@@Base+0x58>
   12e10:	ldr	r5, [pc, #72]	; 12e60 <__libc_csu_init@@Base+0x5c>
   12e14:	add	r6, pc, r6
   12e18:	add	r5, pc, r5
   12e1c:	sub	r6, r6, r5
   12e20:	mov	r8, r1
   12e24:	mov	r9, r2
   12e28:	bl	10cb8 <strcmp@plt-0x20>
   12e2c:	asrs	r6, r6, #2
   12e30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e34:	mov	r4, #0
   12e38:	add	r4, r4, #1
   12e3c:	ldr	r3, [r5], #4
   12e40:	mov	r2, r9
   12e44:	mov	r1, r8
   12e48:	mov	r0, r7
   12e4c:	blx	r3
   12e50:	cmp	r6, r4
   12e54:	bne	12e38 <__libc_csu_init@@Base+0x34>
   12e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e5c:	strdeq	r1, [r1], -r4
   12e60:	andeq	r1, r1, ip, ror #1

00012e64 <__libc_csu_fini@@Base>:
   12e64:	bx	lr

Disassembly of section .fini:

00012e68 <.fini>:
   12e68:	push	{r3, lr}
   12e6c:	pop	{r3, pc}
