
../repos/coreutils/src/mktemp:     file format elf32-littlearm


Disassembly of section .init:

00010e44 <.init>:
   10e44:	push	{r3, lr}
   10e48:	bl	11128 <__mempcpy_chk@plt+0x48>
   10e4c:	pop	{r3, pc}

Disassembly of section .plt:

00010e50 <calloc@plt-0x14>:
   10e50:	push	{lr}		; (str lr, [sp, #-4]!)
   10e54:	ldr	lr, [pc, #4]	; 10e60 <calloc@plt-0x4>
   10e58:	add	lr, pc, lr
   10e5c:	ldr	pc, [lr, #8]!
   10e60:	andeq	r6, r1, r0, lsr #3

00010e64 <calloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e70 <fputs_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #408]!	; 0x198

00010e7c <raise@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #400]!	; 0x190

00010e88 <strcmp@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #392]!	; 0x188

00010e94 <fflush@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #384]!	; 0x180

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #376]!	; 0x178

00010eac <clock_gettime@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #368]!	; 0x170

00010eb8 <_exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #360]!	; 0x168

00010ec4 <memcpy@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #352]!	; 0x160

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #344]!	; 0x158

00010edc <dcgettext@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #336]!	; 0x150

00010ee8 <realloc@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #328]!	; 0x148

00010ef4 <textdomain@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #320]!	; 0x140

00010f00 <iswprint@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #312]!	; 0x138

00010f0c <fwrite@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #304]!	; 0x130

00010f18 <lseek64@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #296]!	; 0x128

00010f24 <__ctype_get_mb_cur_max@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #288]!	; 0x120

00010f30 <__fpending@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #280]!	; 0x118

00010f3c <ferror_unlocked@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #272]!	; 0x110

00010f48 <mbrtowc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #264]!	; 0x108

00010f54 <error@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #256]!	; 0x100

00010f60 <open64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #248]!	; 0xf8

00010f6c <getenv@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #240]!	; 0xf0

00010f78 <puts@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #232]!	; 0xe8

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #224]!	; 0xe0

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #216]!	; 0xd8

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #208]!	; 0xd0

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #200]!	; 0xc8

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #192]!	; 0xc0

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #184]!	; 0xb8

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #176]!	; 0xb0

00010fd8 <bcmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #168]!	; 0xa8

00010fe4 <strlen@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #160]!	; 0xa0

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #152]!	; 0x98

00010ffc <__cxa_atexit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #144]!	; 0x90

00011008 <mkdir@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #136]!	; 0x88

00011014 <memset@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #128]!	; 0x80

00011020 <__printf_chk@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #120]!	; 0x78

0001102c <fileno@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #112]!	; 0x70

00011038 <__fprintf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #104]!	; 0x68

00011044 <fclose@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #96]!	; 0x60

00011050 <fseeko64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #88]!	; 0x58

0001105c <setlocale@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #80]!	; 0x50

00011068 <strrchr@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #72]!	; 0x48

00011074 <nl_langinfo@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #64]!	; 0x40

00011080 <remove@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #56]!	; 0x38

0001108c <bindtextdomain@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #48]!	; 0x30

00011098 <getrandom@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #40]!	; 0x28

000110a4 <strncmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #32]!

000110b0 <abort@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #24]!

000110bc <close@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #16]!

000110c8 <__lxstat64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #8]!

000110d4 <strspn@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #0]!

000110e0 <__mempcpy_chk@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4088]!	; 0xff8

Disassembly of section .text:

000110ec <.text>:
   110ec:	mov	fp, #0
   110f0:	mov	lr, #0
   110f4:	pop	{r1}		; (ldr r1, [sp], #4)
   110f8:	mov	r2, sp
   110fc:	push	{r2}		; (str r2, [sp, #-4]!)
   11100:	push	{r0}		; (str r0, [sp, #-4]!)
   11104:	ldr	ip, [pc, #16]	; 1111c <__mempcpy_chk@plt+0x3c>
   11108:	push	{ip}		; (str ip, [sp, #-4]!)
   1110c:	ldr	r0, [pc, #12]	; 11120 <__mempcpy_chk@plt+0x40>
   11110:	ldr	r3, [pc, #12]	; 11124 <__mempcpy_chk@plt+0x44>
   11114:	bl	10f90 <__libc_start_main@plt>
   11118:	bl	110b0 <abort@plt>
   1111c:	andeq	r5, r1, ip, ror #1
   11120:	andeq	r1, r1, ip, ror #9
   11124:	andeq	r5, r1, ip, lsl #1
   11128:	ldr	r3, [pc, #20]	; 11144 <__mempcpy_chk@plt+0x64>
   1112c:	ldr	r2, [pc, #20]	; 11148 <__mempcpy_chk@plt+0x68>
   11130:	add	r3, pc, r3
   11134:	ldr	r2, [r3, r2]
   11138:	cmp	r2, #0
   1113c:	bxeq	lr
   11140:	b	10fa8 <__gmon_start__@plt>
   11144:	andeq	r5, r1, r8, asr #29
   11148:	andeq	r0, r0, r4, ror #1
   1114c:	ldr	r0, [pc, #24]	; 1116c <__mempcpy_chk@plt+0x8c>
   11150:	ldr	r3, [pc, #24]	; 11170 <__mempcpy_chk@plt+0x90>
   11154:	cmp	r3, r0
   11158:	bxeq	lr
   1115c:	ldr	r3, [pc, #16]	; 11174 <__mempcpy_chk@plt+0x94>
   11160:	cmp	r3, #0
   11164:	bxeq	lr
   11168:	bx	r3
   1116c:	andeq	r7, r2, r8, lsr r1
   11170:	andeq	r7, r2, r8, lsr r1
   11174:	andeq	r0, r0, r0
   11178:	ldr	r0, [pc, #36]	; 111a4 <__mempcpy_chk@plt+0xc4>
   1117c:	ldr	r1, [pc, #36]	; 111a8 <__mempcpy_chk@plt+0xc8>
   11180:	sub	r1, r1, r0
   11184:	asr	r1, r1, #2
   11188:	add	r1, r1, r1, lsr #31
   1118c:	asrs	r1, r1, #1
   11190:	bxeq	lr
   11194:	ldr	r3, [pc, #16]	; 111ac <__mempcpy_chk@plt+0xcc>
   11198:	cmp	r3, #0
   1119c:	bxeq	lr
   111a0:	bx	r3
   111a4:	andeq	r7, r2, r8, lsr r1
   111a8:	andeq	r7, r2, r8, lsr r1
   111ac:	andeq	r0, r0, r0
   111b0:	push	{r4, lr}
   111b4:	ldr	r4, [pc, #24]	; 111d4 <__mempcpy_chk@plt+0xf4>
   111b8:	ldrb	r3, [r4]
   111bc:	cmp	r3, #0
   111c0:	popne	{r4, pc}
   111c4:	bl	1114c <__mempcpy_chk@plt+0x6c>
   111c8:	mov	r3, #1
   111cc:	strb	r3, [r4]
   111d0:	pop	{r4, pc}
   111d4:	andeq	r7, r2, r4, asr r1
   111d8:	b	11178 <__mempcpy_chk@plt+0x98>
   111dc:	push	{fp, lr}
   111e0:	mov	fp, sp
   111e4:	mov	r4, r0
   111e8:	cmp	r0, #0
   111ec:	bne	11320 <__mempcpy_chk@plt+0x240>
   111f0:	movw	r1, #20811	; 0x514b
   111f4:	movt	r1, #1
   111f8:	mov	r0, #0
   111fc:	mov	r2, #5
   11200:	bl	10edc <dcgettext@plt>
   11204:	mov	r1, r0
   11208:	movw	r0, #29024	; 0x7160
   1120c:	movt	r0, #2
   11210:	ldr	r2, [r0]
   11214:	mov	r0, #1
   11218:	bl	11020 <__printf_chk@plt>
   1121c:	movw	r1, #20845	; 0x516d
   11220:	movt	r1, #1
   11224:	mov	r0, #0
   11228:	mov	r2, #5
   1122c:	bl	10edc <dcgettext@plt>
   11230:	movw	r5, #29004	; 0x714c
   11234:	movt	r5, #2
   11238:	ldr	r1, [r5]
   1123c:	bl	10e70 <fputs_unlocked@plt>
   11240:	movw	r1, #21056	; 0x5240
   11244:	movt	r1, #1
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	bl	10edc <dcgettext@plt>
   11254:	ldr	r1, [r5]
   11258:	bl	10e70 <fputs_unlocked@plt>
   1125c:	ldr	r1, [r5]
   11260:	movw	r0, #22914	; 0x5982
   11264:	movt	r0, #1
   11268:	bl	10e70 <fputs_unlocked@plt>
   1126c:	movw	r1, #21130	; 0x528a
   11270:	movt	r1, #1
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	bl	10edc <dcgettext@plt>
   11280:	ldr	r1, [r5]
   11284:	bl	10e70 <fputs_unlocked@plt>
   11288:	movw	r1, #21334	; 0x5356
   1128c:	movt	r1, #1
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	bl	10edc <dcgettext@plt>
   1129c:	ldr	r1, [r5]
   112a0:	bl	10e70 <fputs_unlocked@plt>
   112a4:	movw	r1, #21490	; 0x53f2
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	bl	10edc <dcgettext@plt>
   112b8:	ldr	r1, [r5]
   112bc:	bl	10e70 <fputs_unlocked@plt>
   112c0:	movw	r1, #21853	; 0x555d
   112c4:	movt	r1, #1
   112c8:	mov	r0, #0
   112cc:	mov	r2, #5
   112d0:	bl	10edc <dcgettext@plt>
   112d4:	ldr	r1, [r5]
   112d8:	bl	10e70 <fputs_unlocked@plt>
   112dc:	movw	r1, #22078	; 0x563e
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	bl	10edc <dcgettext@plt>
   112f0:	ldr	r1, [r5]
   112f4:	bl	10e70 <fputs_unlocked@plt>
   112f8:	movw	r1, #22123	; 0x566b
   112fc:	movt	r1, #1
   11300:	mov	r0, #0
   11304:	mov	r2, #5
   11308:	bl	10edc <dcgettext@plt>
   1130c:	ldr	r1, [r5]
   11310:	bl	10e70 <fputs_unlocked@plt>
   11314:	bl	11364 <__mempcpy_chk@plt+0x284>
   11318:	mov	r0, r4
   1131c:	bl	10fcc <exit@plt>
   11320:	movw	r0, #29000	; 0x7148
   11324:	movt	r0, #2
   11328:	ldr	r5, [r0]
   1132c:	movw	r1, #20772	; 0x5124
   11330:	movt	r1, #1
   11334:	mov	r0, #0
   11338:	mov	r2, #5
   1133c:	bl	10edc <dcgettext@plt>
   11340:	mov	r2, r0
   11344:	movw	r0, #29024	; 0x7160
   11348:	movt	r0, #2
   1134c:	ldr	r3, [r0]
   11350:	mov	r0, r5
   11354:	mov	r1, #1
   11358:	bl	11038 <__fprintf_chk@plt>
   1135c:	mov	r0, r4
   11360:	bl	10fcc <exit@plt>
   11364:	push	{r4, r5, r6, sl, fp, lr}
   11368:	add	fp, sp, #16
   1136c:	sub	sp, sp, #56	; 0x38
   11370:	movw	r0, #23112	; 0x5a48
   11374:	movt	r0, #1
   11378:	add	r1, r0, #32
   1137c:	mov	r2, #48	; 0x30
   11380:	vld1.64	{d16-d17}, [r1]
   11384:	mov	r6, sp
   11388:	add	r1, r6, #32
   1138c:	add	r3, r0, #16
   11390:	vld1.64	{d18-d19}, [r0], r2
   11394:	vld1.64	{d20-d21}, [r3]
   11398:	vldr	d22, [r0]
   1139c:	vst1.64	{d16-d17}, [r1]
   113a0:	add	r0, r6, #16
   113a4:	vst1.64	{d20-d21}, [r0]
   113a8:	mov	r0, r6
   113ac:	vst1.64	{d18-d19}, [r0], r2
   113b0:	vstr	d22, [r0]
   113b4:	ldr	r1, [sp]
   113b8:	cmp	r1, #0
   113bc:	movw	r4, #22177	; 0x56a1
   113c0:	movt	r4, #1
   113c4:	beq	113ec <__mempcpy_chk@plt+0x30c>
   113c8:	mov	r6, sp
   113cc:	movw	r5, #22177	; 0x56a1
   113d0:	movt	r5, #1
   113d4:	mov	r0, r5
   113d8:	bl	10e88 <strcmp@plt>
   113dc:	cmp	r0, #0
   113e0:	ldrne	r1, [r6, #8]!
   113e4:	cmpne	r1, #0
   113e8:	bne	113d4 <__mempcpy_chk@plt+0x2f4>
   113ec:	ldr	r5, [r6, #4]
   113f0:	movw	r1, #22700	; 0x58ac
   113f4:	movt	r1, #1
   113f8:	mov	r0, #0
   113fc:	mov	r2, #5
   11400:	bl	10edc <dcgettext@plt>
   11404:	mov	r1, r0
   11408:	movw	r2, #22216	; 0x56c8
   1140c:	movt	r2, #1
   11410:	movw	r3, #22723	; 0x58c3
   11414:	movt	r3, #1
   11418:	mov	r0, #1
   1141c:	bl	11020 <__printf_chk@plt>
   11420:	cmp	r5, #0
   11424:	moveq	r5, r4
   11428:	mov	r0, #5
   1142c:	mov	r1, #0
   11430:	bl	1105c <setlocale@plt>
   11434:	cmp	r0, #0
   11438:	beq	11478 <__mempcpy_chk@plt+0x398>
   1143c:	movw	r1, #22763	; 0x58eb
   11440:	movt	r1, #1
   11444:	mov	r2, #3
   11448:	bl	110a4 <strncmp@plt>
   1144c:	cmp	r0, #0
   11450:	beq	11478 <__mempcpy_chk@plt+0x398>
   11454:	movw	r1, #22767	; 0x58ef
   11458:	movt	r1, #1
   1145c:	mov	r0, #0
   11460:	mov	r2, #5
   11464:	bl	10edc <dcgettext@plt>
   11468:	movw	r1, #29004	; 0x714c
   1146c:	movt	r1, #2
   11470:	ldr	r1, [r1]
   11474:	bl	10e70 <fputs_unlocked@plt>
   11478:	movw	r1, #22838	; 0x5936
   1147c:	movt	r1, #1
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	bl	10edc <dcgettext@plt>
   1148c:	mov	r1, r0
   11490:	movw	r2, #22723	; 0x58c3
   11494:	movt	r2, #1
   11498:	mov	r0, #1
   1149c:	mov	r3, r4
   114a0:	bl	11020 <__printf_chk@plt>
   114a4:	movw	r0, #22633	; 0x5869
   114a8:	movt	r0, #1
   114ac:	movw	r6, #22915	; 0x5983
   114b0:	movt	r6, #1
   114b4:	cmp	r5, r4
   114b8:	moveq	r6, r0
   114bc:	movw	r1, #22865	; 0x5951
   114c0:	movt	r1, #1
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	bl	10edc <dcgettext@plt>
   114d0:	mov	r1, r0
   114d4:	mov	r0, #1
   114d8:	mov	r2, r5
   114dc:	mov	r3, r6
   114e0:	sub	sp, fp, #16
   114e4:	pop	{r4, r5, r6, sl, fp, lr}
   114e8:	b	11020 <__printf_chk@plt>
   114ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f0:	add	fp, sp, #28
   114f4:	sub	sp, sp, #36	; 0x24
   114f8:	mov	r4, r1
   114fc:	mov	r5, r0
   11500:	ldr	r0, [r1]
   11504:	bl	12114 <__mempcpy_chk@plt+0x1034>
   11508:	movw	r1, #22915	; 0x5983
   1150c:	movt	r1, #1
   11510:	mov	r0, #6
   11514:	bl	1105c <setlocale@plt>
   11518:	movw	r6, #22220	; 0x56cc
   1151c:	movt	r6, #1
   11520:	movw	r1, #22184	; 0x56a8
   11524:	movt	r1, #1
   11528:	mov	r0, r6
   1152c:	bl	1108c <bindtextdomain@plt>
   11530:	mov	r0, r6
   11534:	bl	10ef4 <textdomain@plt>
   11538:	movw	r0, #7012	; 0x1b64
   1153c:	movt	r0, #1
   11540:	bl	150f0 <__mempcpy_chk@plt+0x4010>
   11544:	mov	r9, #0
   11548:	movw	r7, #22208	; 0x56c0
   1154c:	movt	r7, #1
   11550:	movw	r6, #22984	; 0x59c8
   11554:	movt	r6, #1
   11558:	mov	r0, #0
   1155c:	str	r0, [sp, #20]
   11560:	mov	r0, #0
   11564:	str	r0, [sp, #16]
   11568:	mov	r0, #0
   1156c:	str	r0, [sp, #24]
   11570:	mov	r0, #0
   11574:	str	r0, [sp, #32]
   11578:	mov	r8, #0
   1157c:	mov	r0, #0
   11580:	mov	r1, #0
   11584:	str	r1, [sp, #28]
   11588:	b	115a0 <__mempcpy_chk@plt+0x4c0>
   1158c:	mov	r0, #1
   11590:	str	r0, [sp, #16]
   11594:	mov	r0, #1
   11598:	str	r0, [sp, #32]
   1159c:	mov	r0, sl
   115a0:	mov	sl, r0
   115a4:	str	r9, [sp]
   115a8:	mov	r0, r5
   115ac:	mov	r1, r4
   115b0:	mov	r2, r7
   115b4:	mov	r3, r6
   115b8:	bl	10fb4 <getopt_long@plt>
   115bc:	cmp	r0, #85	; 0x55
   115c0:	ble	116a0 <__mempcpy_chk@plt+0x5c0>
   115c4:	sub	r1, r0, #86	; 0x56
   115c8:	cmp	r1, #31
   115cc:	bhi	1167c <__mempcpy_chk@plt+0x59c>
   115d0:	mov	r0, #1
   115d4:	add	r2, pc, #0
   115d8:	ldr	pc, [r2, r1, lsl #2]
   115dc:	andeq	r1, r1, ip, asr #20
   115e0:			; <UNDEFINED> instruction: 0x00011ab0
   115e4:			; <UNDEFINED> instruction: 0x00011ab0
   115e8:			; <UNDEFINED> instruction: 0x00011ab0
   115ec:			; <UNDEFINED> instruction: 0x00011ab0
   115f0:			; <UNDEFINED> instruction: 0x00011ab0
   115f4:			; <UNDEFINED> instruction: 0x00011ab0
   115f8:			; <UNDEFINED> instruction: 0x00011ab0
   115fc:			; <UNDEFINED> instruction: 0x00011ab0
   11600:			; <UNDEFINED> instruction: 0x00011ab0
   11604:			; <UNDEFINED> instruction: 0x00011ab0
   11608:			; <UNDEFINED> instruction: 0x00011ab0
   1160c:			; <UNDEFINED> instruction: 0x00011ab0
   11610:			; <UNDEFINED> instruction: 0x00011ab0
   11614:	andeq	r1, r1, ip, asr r6
   11618:			; <UNDEFINED> instruction: 0x00011ab0
   1161c:			; <UNDEFINED> instruction: 0x00011ab0
   11620:			; <UNDEFINED> instruction: 0x00011ab0
   11624:			; <UNDEFINED> instruction: 0x00011ab0
   11628:			; <UNDEFINED> instruction: 0x00011ab0
   1162c:			; <UNDEFINED> instruction: 0x00011ab0
   11630:			; <UNDEFINED> instruction: 0x00011ab0
   11634:			; <UNDEFINED> instruction: 0x00011ab0
   11638:			; <UNDEFINED> instruction: 0x00011ab0
   1163c:			; <UNDEFINED> instruction: 0x00011ab0
   11640:			; <UNDEFINED> instruction: 0x00011ab0
   11644:	andeq	r1, r1, r8, ror #12
   11648:	andeq	r1, r1, r0, lsr #11
   1164c:			; <UNDEFINED> instruction: 0x00011ab0
   11650:			; <UNDEFINED> instruction: 0x00011ab0
   11654:	andeq	r1, r1, ip, lsl #11
   11658:	muleq	r1, r4, r6
   1165c:	mov	r0, #1
   11660:	str	r0, [sp, #20]
   11664:	b	1159c <__mempcpy_chk@plt+0x4bc>
   11668:	movw	r0, #29008	; 0x7150
   1166c:	movt	r0, #2
   11670:	ldr	r0, [r0]
   11674:	str	r0, [sp, #28]
   11678:	b	11594 <__mempcpy_chk@plt+0x4b4>
   1167c:	cmp	r0, #256	; 0x100
   11680:	bne	11ab0 <__mempcpy_chk@plt+0x9d0>
   11684:	movw	r0, #29008	; 0x7150
   11688:	movt	r0, #2
   1168c:	ldr	r8, [r0]
   11690:	b	1159c <__mempcpy_chk@plt+0x4bc>
   11694:	mov	r0, #1
   11698:	str	r0, [sp, #24]
   1169c:	b	1159c <__mempcpy_chk@plt+0x4bc>
   116a0:	cmn	r0, #1
   116a4:	bne	11a44 <__mempcpy_chk@plt+0x964>
   116a8:	movw	r0, #28992	; 0x7140
   116ac:	movt	r0, #2
   116b0:	ldr	r0, [r0]
   116b4:	sub	r1, r5, r0
   116b8:	cmp	r1, #2
   116bc:	bcs	11ac4 <__mempcpy_chk@plt+0x9e4>
   116c0:	cmp	r1, #0
   116c4:	beq	11744 <__mempcpy_chk@plt+0x664>
   116c8:	ldr	r6, [r4, r0, lsl #2]
   116cc:	cmp	r8, #0
   116d0:	beq	1175c <__mempcpy_chk@plt+0x67c>
   116d4:	mov	r0, r6
   116d8:	bl	10fe4 <strlen@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11ab8 <__mempcpy_chk@plt+0x9d8>
   116e4:	mov	r7, r0
   116e8:	add	r0, r0, r6
   116ec:	ldrb	r0, [r0, #-1]
   116f0:	cmp	r0, #88	; 0x58
   116f4:	bne	11ab8 <__mempcpy_chk@plt+0x9d8>
   116f8:	mov	r0, r8
   116fc:	bl	10fe4 <strlen@plt>
   11700:	mov	r9, r0
   11704:	add	r5, r0, #1
   11708:	add	r0, r5, r7
   1170c:	bl	14554 <__mempcpy_chk@plt+0x3474>
   11710:	mov	r4, r0
   11714:	mov	r1, r6
   11718:	mov	r2, r7
   1171c:	bl	10ec4 <memcpy@plt>
   11720:	add	r6, r4, r7
   11724:	mov	r0, r6
   11728:	mov	r1, r8
   1172c:	mov	r2, r5
   11730:	bl	10ec4 <memcpy@plt>
   11734:	ldr	r8, [sp, #24]
   11738:	cmp	r9, #0
   1173c:	bne	117a4 <__mempcpy_chk@plt+0x6c4>
   11740:	b	117b4 <__mempcpy_chk@plt+0x6d4>
   11744:	movw	r6, #22967	; 0x59b7
   11748:	movt	r6, #1
   1174c:	mov	r0, #1
   11750:	str	r0, [sp, #32]
   11754:	cmp	r8, #0
   11758:	bne	116d4 <__mempcpy_chk@plt+0x5f4>
   1175c:	mov	r0, r6
   11760:	bl	14880 <__mempcpy_chk@plt+0x37a0>
   11764:	mov	r4, r0
   11768:	mov	r1, #88	; 0x58
   1176c:	bl	11068 <strrchr@plt>
   11770:	cmp	r0, #0
   11774:	beq	11780 <__mempcpy_chk@plt+0x6a0>
   11778:	add	r6, r0, #1
   1177c:	b	1178c <__mempcpy_chk@plt+0x6ac>
   11780:	mov	r0, r4
   11784:	bl	10fe4 <strlen@plt>
   11788:	add	r6, r4, r0
   1178c:	ldr	r8, [sp, #24]
   11790:	mov	r0, r6
   11794:	bl	10fe4 <strlen@plt>
   11798:	mov	r9, r0
   1179c:	cmp	r9, #0
   117a0:	beq	117b4 <__mempcpy_chk@plt+0x6d4>
   117a4:	mov	r0, r6
   117a8:	bl	11c34 <__mempcpy_chk@plt+0xb54>
   117ac:	cmp	r0, r6
   117b0:	bne	11afc <__mempcpy_chk@plt+0xa1c>
   117b4:	sub	r1, r6, r4
   117b8:	mov	r0, r4
   117bc:	bl	11ba8 <__mempcpy_chk@plt+0xac8>
   117c0:	cmp	r0, #2
   117c4:	bls	11af0 <__mempcpy_chk@plt+0xa10>
   117c8:	mov	r6, r0
   117cc:	ldr	r0, [sp, #32]
   117d0:	tst	r0, #1
   117d4:	ldr	r7, [sp, #28]
   117d8:	beq	1184c <__mempcpy_chk@plt+0x76c>
   117dc:	ldr	r0, [sp, #16]
   117e0:	tst	r0, #1
   117e4:	beq	11854 <__mempcpy_chk@plt+0x774>
   117e8:	movw	r0, #22389	; 0x5775
   117ec:	movt	r0, #1
   117f0:	bl	10f6c <getenv@plt>
   117f4:	ldr	r1, [sp, #28]
   117f8:	cmp	r0, #0
   117fc:	beq	11810 <__mempcpy_chk@plt+0x730>
   11800:	mov	r7, r0
   11804:	ldrb	r0, [r0]
   11808:	cmp	r0, #0
   1180c:	bne	11830 <__mempcpy_chk@plt+0x750>
   11810:	cmp	r1, #0
   11814:	beq	11828 <__mempcpy_chk@plt+0x748>
   11818:	ldrb	r0, [r1]
   1181c:	cmp	r0, #0
   11820:	mov	r7, r1
   11824:	bne	11830 <__mempcpy_chk@plt+0x750>
   11828:	movw	r7, #22396	; 0x577c
   1182c:	movt	r7, #1
   11830:	mov	r0, r4
   11834:	bl	11c34 <__mempcpy_chk@plt+0xb54>
   11838:	cmp	r0, r4
   1183c:	beq	118a8 <__mempcpy_chk@plt+0x7c8>
   11840:	movw	r1, #22401	; 0x5781
   11844:	movt	r1, #1
   11848:	b	11b38 <__mempcpy_chk@plt+0xa58>
   1184c:	mov	r7, r4
   11850:	b	118c4 <__mempcpy_chk@plt+0x7e4>
   11854:	cmp	r7, #0
   11858:	beq	11868 <__mempcpy_chk@plt+0x788>
   1185c:	ldrb	r0, [r7]
   11860:	cmp	r0, #0
   11864:	bne	1189c <__mempcpy_chk@plt+0x7bc>
   11868:	movw	r0, #22389	; 0x5775
   1186c:	movt	r0, #1
   11870:	bl	10f6c <getenv@plt>
   11874:	cmp	r0, #0
   11878:	beq	11894 <__mempcpy_chk@plt+0x7b4>
   1187c:	ldrb	r1, [r0]
   11880:	movw	r7, #22396	; 0x577c
   11884:	movt	r7, #1
   11888:	cmp	r1, #0
   1188c:	movne	r7, r0
   11890:	b	1189c <__mempcpy_chk@plt+0x7bc>
   11894:	movw	r7, #22396	; 0x577c
   11898:	movt	r7, #1
   1189c:	ldrb	r0, [r4]
   118a0:	cmp	r0, #47	; 0x2f
   118a4:	beq	11b30 <__mempcpy_chk@plt+0xa50>
   118a8:	mov	r0, r7
   118ac:	mov	r1, r4
   118b0:	mov	r2, #0
   118b4:	bl	11f4c <__mempcpy_chk@plt+0xe6c>
   118b8:	mov	r7, r0
   118bc:	mov	r0, r4
   118c0:	bl	12044 <__mempcpy_chk@plt+0xf64>
   118c4:	mov	r0, r7
   118c8:	bl	14880 <__mempcpy_chk@plt+0x37a0>
   118cc:	mov	r4, r0
   118d0:	ldr	r0, [sp, #20]
   118d4:	and	r3, r8, #1
   118d8:	tst	r0, #1
   118dc:	beq	11918 <__mempcpy_chk@plt+0x838>
   118e0:	mov	r0, r4
   118e4:	mov	r1, r9
   118e8:	mov	r2, r6
   118ec:	bl	11bdc <__mempcpy_chk@plt+0xafc>
   118f0:	clz	r0, r0
   118f4:	lsr	r0, r0, #5
   118f8:	orr	r1, sl, r0
   118fc:	tst	r1, #1
   11900:	bne	11970 <__mempcpy_chk@plt+0x890>
   11904:	bl	10ff0 <__errno_location@plt>
   11908:	ldr	r4, [r0]
   1190c:	movw	r1, #22512	; 0x57f0
   11910:	movt	r1, #1
   11914:	b	11a08 <__mempcpy_chk@plt+0x928>
   11918:	mov	r0, r4
   1191c:	mov	r1, r9
   11920:	mov	r2, r6
   11924:	bl	11c0c <__mempcpy_chk@plt+0xb2c>
   11928:	cmp	r0, #0
   1192c:	bmi	11948 <__mempcpy_chk@plt+0x868>
   11930:	tst	r8, #1
   11934:	beq	11958 <__mempcpy_chk@plt+0x878>
   11938:	mov	r0, r4
   1193c:	bl	10f78 <puts@plt>
   11940:	mov	r5, #0
   11944:	b	11a38 <__mempcpy_chk@plt+0x958>
   11948:	mov	r5, #1
   1194c:	tst	sl, #1
   11950:	beq	119f8 <__mempcpy_chk@plt+0x918>
   11954:	b	11a38 <__mempcpy_chk@plt+0x958>
   11958:	bl	110bc <close@plt>
   1195c:	clz	r0, r0
   11960:	lsr	r0, r0, #5
   11964:	orr	r1, sl, r0
   11968:	tst	r1, #1
   1196c:	beq	119f8 <__mempcpy_chk@plt+0x918>
   11970:	mov	r5, #1
   11974:	cmp	r0, #0
   11978:	beq	11a38 <__mempcpy_chk@plt+0x958>
   1197c:	mov	r0, r4
   11980:	bl	10f78 <puts@plt>
   11984:	mov	r5, #0
   11988:	tst	r8, #1
   1198c:	bne	11a38 <__mempcpy_chk@plt+0x958>
   11990:	movw	r0, #29013	; 0x7155
   11994:	movt	r0, #2
   11998:	mov	r1, #1
   1199c:	strb	r1, [r0]
   119a0:	movw	r0, #29004	; 0x714c
   119a4:	movt	r0, #2
   119a8:	ldr	r0, [r0]
   119ac:	bl	11cb8 <__mempcpy_chk@plt+0xbd8>
   119b0:	cmp	r0, #0
   119b4:	beq	11a38 <__mempcpy_chk@plt+0x958>
   119b8:	bl	10ff0 <__errno_location@plt>
   119bc:	ldr	r5, [r0]
   119c0:	mov	r0, r4
   119c4:	bl	11080 <remove@plt>
   119c8:	tst	sl, #1
   119cc:	bne	11a34 <__mempcpy_chk@plt+0x954>
   119d0:	movw	r1, #22593	; 0x5841
   119d4:	movt	r1, #1
   119d8:	mov	r0, #0
   119dc:	mov	r2, #5
   119e0:	bl	10edc <dcgettext@plt>
   119e4:	mov	r2, r0
   119e8:	mov	r0, #0
   119ec:	mov	r1, r5
   119f0:	bl	10f54 <error@plt>
   119f4:	b	11a34 <__mempcpy_chk@plt+0x954>
   119f8:	bl	10ff0 <__errno_location@plt>
   119fc:	ldr	r4, [r0]
   11a00:	movw	r1, #22555	; 0x581b
   11a04:	movt	r1, #1
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	bl	10edc <dcgettext@plt>
   11a14:	mov	r5, r0
   11a18:	mov	r0, r7
   11a1c:	bl	13908 <__mempcpy_chk@plt+0x2828>
   11a20:	mov	r3, r0
   11a24:	mov	r0, #0
   11a28:	mov	r1, r4
   11a2c:	mov	r2, r5
   11a30:	bl	10f54 <error@plt>
   11a34:	mov	r5, #1
   11a38:	mov	r0, r5
   11a3c:	sub	sp, fp, #28
   11a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a44:	cmn	r0, #3
   11a48:	bne	11aa0 <__mempcpy_chk@plt+0x9c0>
   11a4c:	movw	r0, #28912	; 0x70f0
   11a50:	movt	r0, #2
   11a54:	ldr	r3, [r0]
   11a58:	movw	r0, #29004	; 0x714c
   11a5c:	movt	r0, #2
   11a60:	ldr	r0, [r0]
   11a64:	mov	r1, #0
   11a68:	movw	r2, #22243	; 0x56e3
   11a6c:	movt	r2, #1
   11a70:	movw	r7, #22230	; 0x56d6
   11a74:	movt	r7, #1
   11a78:	str	r7, [sp]
   11a7c:	str	r2, [sp, #4]
   11a80:	str	r1, [sp, #8]
   11a84:	movw	r1, #22177	; 0x56a1
   11a88:	movt	r1, #1
   11a8c:	movw	r2, #22216	; 0x56c8
   11a90:	movt	r2, #1
   11a94:	bl	14410 <__mempcpy_chk@plt+0x3330>
   11a98:	mov	r0, #0
   11a9c:	bl	10fcc <exit@plt>
   11aa0:	cmn	r0, #2
   11aa4:	bne	11ab0 <__mempcpy_chk@plt+0x9d0>
   11aa8:	mov	r0, #0
   11aac:	bl	111dc <__mempcpy_chk@plt+0xfc>
   11ab0:	mov	r0, #1
   11ab4:	bl	111dc <__mempcpy_chk@plt+0xfc>
   11ab8:	movw	r1, #22273	; 0x5701
   11abc:	movt	r1, #1
   11ac0:	b	11b04 <__mempcpy_chk@plt+0xa24>
   11ac4:	movw	r1, #22254	; 0x56ee
   11ac8:	movt	r1, #1
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	bl	10edc <dcgettext@plt>
   11ad8:	mov	r2, r0
   11adc:	mov	r0, #0
   11ae0:	mov	r1, #0
   11ae4:	bl	10f54 <error@plt>
   11ae8:	mov	r0, #1
   11aec:	bl	111dc <__mempcpy_chk@plt+0xfc>
   11af0:	movw	r1, #22362	; 0x575a
   11af4:	movt	r1, #1
   11af8:	b	11b38 <__mempcpy_chk@plt+0xa58>
   11afc:	movw	r1, #22314	; 0x572a
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	bl	10edc <dcgettext@plt>
   11b10:	mov	r4, r0
   11b14:	mov	r0, r6
   11b18:	bl	13908 <__mempcpy_chk@plt+0x2828>
   11b1c:	mov	r3, r0
   11b20:	mov	r0, #1
   11b24:	mov	r1, #0
   11b28:	mov	r2, r4
   11b2c:	bl	10f54 <error@plt>
   11b30:	movw	r1, #22452	; 0x57b4
   11b34:	movt	r1, #1
   11b38:	mov	r0, #0
   11b3c:	mov	r2, #5
   11b40:	bl	10edc <dcgettext@plt>
   11b44:	mov	r5, r0
   11b48:	mov	r0, r4
   11b4c:	bl	13908 <__mempcpy_chk@plt+0x2828>
   11b50:	mov	r3, r0
   11b54:	mov	r0, #1
   11b58:	mov	r1, #0
   11b5c:	mov	r2, r5
   11b60:	bl	10f54 <error@plt>
   11b64:	push	{fp, lr}
   11b68:	mov	fp, sp
   11b6c:	movw	r0, #29013	; 0x7155
   11b70:	movt	r0, #2
   11b74:	ldrb	r0, [r0]
   11b78:	cmp	r0, #0
   11b7c:	beq	11ba0 <__mempcpy_chk@plt+0xac0>
   11b80:	movw	r0, #29000	; 0x7148
   11b84:	movt	r0, #2
   11b88:	ldr	r0, [r0]
   11b8c:	bl	11cb8 <__mempcpy_chk@plt+0xbd8>
   11b90:	cmp	r0, #0
   11b94:	popeq	{fp, pc}
   11b98:	mov	r0, #1
   11b9c:	bl	10eb8 <_exit@plt>
   11ba0:	pop	{fp, lr}
   11ba4:	b	11d5c <__mempcpy_chk@plt+0xc7c>
   11ba8:	cmp	r1, #0
   11bac:	moveq	r0, #0
   11bb0:	bxeq	lr
   11bb4:	add	r0, r0, r1
   11bb8:	sub	r2, r0, #1
   11bbc:	mov	r0, #0
   11bc0:	ldrb	r3, [r2, -r0]
   11bc4:	cmp	r3, #88	; 0x58
   11bc8:	bxne	lr
   11bcc:	add	r0, r0, #1
   11bd0:	cmp	r1, r0
   11bd4:	bne	11bc0 <__mempcpy_chk@plt+0xae0>
   11bd8:	bx	lr
   11bdc:	push	{fp, lr}
   11be0:	mov	fp, sp
   11be4:	sub	sp, sp, #8
   11be8:	str	r2, [sp]
   11bec:	mov	ip, #1
   11bf0:	cmp	r3, #0
   11bf4:	movwne	ip, #2
   11bf8:	mov	r2, #0
   11bfc:	mov	r3, ip
   11c00:	bl	13d20 <__mempcpy_chk@plt+0x2c40>
   11c04:	mov	sp, fp
   11c08:	pop	{fp, pc}
   11c0c:	push	{fp, lr}
   11c10:	mov	fp, sp
   11c14:	sub	sp, sp, #8
   11c18:	str	r2, [sp]
   11c1c:	cmp	r3, #0
   11c20:	movwne	r3, #2
   11c24:	mov	r2, #0
   11c28:	bl	13d20 <__mempcpy_chk@plt+0x2c40>
   11c2c:	mov	sp, fp
   11c30:	pop	{fp, pc}
   11c34:	sub	r0, r0, #1
   11c38:	ldrb	r3, [r0, #1]!
   11c3c:	cmp	r3, #47	; 0x2f
   11c40:	beq	11c38 <__mempcpy_chk@plt+0xb58>
   11c44:	mov	r2, #0
   11c48:	mov	r1, r0
   11c4c:	b	11c58 <__mempcpy_chk@plt+0xb78>
   11c50:	mov	r2, #1
   11c54:	ldrb	r3, [r1, #1]!
   11c58:	uxtb	r3, r3
   11c5c:	cmp	r3, #47	; 0x2f
   11c60:	beq	11c50 <__mempcpy_chk@plt+0xb70>
   11c64:	cmp	r3, #0
   11c68:	bxeq	lr
   11c6c:	tst	r2, #1
   11c70:	movne	r0, r1
   11c74:	mov	r2, #0
   11c78:	ldrb	r3, [r1, #1]!
   11c7c:	b	11c58 <__mempcpy_chk@plt+0xb78>
   11c80:	push	{r4, sl, fp, lr}
   11c84:	add	fp, sp, #8
   11c88:	mov	r4, r0
   11c8c:	bl	10fe4 <strlen@plt>
   11c90:	mov	r1, r0
   11c94:	sub	r2, r4, #1
   11c98:	mov	r0, r1
   11c9c:	cmp	r1, #2
   11ca0:	bcc	11cb4 <__mempcpy_chk@plt+0xbd4>
   11ca4:	ldrb	r3, [r2, r0]
   11ca8:	sub	r1, r0, #1
   11cac:	cmp	r3, #47	; 0x2f
   11cb0:	beq	11c98 <__mempcpy_chk@plt+0xbb8>
   11cb4:	pop	{r4, sl, fp, pc}
   11cb8:	push	{r4, r5, r6, sl, fp, lr}
   11cbc:	add	fp, sp, #16
   11cc0:	mov	r4, r0
   11cc4:	bl	10f30 <__fpending@plt>
   11cc8:	mov	r5, r0
   11ccc:	mov	r0, r4
   11cd0:	bl	10f3c <ferror_unlocked@plt>
   11cd4:	mov	r6, r0
   11cd8:	mov	r0, r4
   11cdc:	bl	11e44 <__mempcpy_chk@plt+0xd64>
   11ce0:	cmp	r6, #0
   11ce4:	beq	11d08 <__mempcpy_chk@plt+0xc28>
   11ce8:	mvn	r4, #0
   11cec:	cmp	r0, #0
   11cf0:	bne	11d34 <__mempcpy_chk@plt+0xc54>
   11cf4:	bl	10ff0 <__errno_location@plt>
   11cf8:	mov	r1, #0
   11cfc:	str	r1, [r0]
   11d00:	mov	r0, r4
   11d04:	pop	{r4, r5, r6, sl, fp, pc}
   11d08:	cmp	r0, #0
   11d0c:	mov	r4, r0
   11d10:	mvnne	r4, #0
   11d14:	cmp	r5, #0
   11d18:	bne	11d34 <__mempcpy_chk@plt+0xc54>
   11d1c:	cmp	r0, #0
   11d20:	beq	11d34 <__mempcpy_chk@plt+0xc54>
   11d24:	bl	10ff0 <__errno_location@plt>
   11d28:	ldr	r0, [r0]
   11d2c:	subs	r4, r0, #9
   11d30:	mvnne	r4, #0
   11d34:	mov	r0, r4
   11d38:	pop	{r4, r5, r6, sl, fp, pc}
   11d3c:	movw	r1, #29016	; 0x7158
   11d40:	movt	r1, #2
   11d44:	str	r0, [r1]
   11d48:	bx	lr
   11d4c:	movw	r1, #29020	; 0x715c
   11d50:	movt	r1, #2
   11d54:	strb	r0, [r1]
   11d58:	bx	lr
   11d5c:	push	{r4, r5, r6, sl, fp, lr}
   11d60:	add	fp, sp, #16
   11d64:	sub	sp, sp, #8
   11d68:	movw	r0, #29004	; 0x714c
   11d6c:	movt	r0, #2
   11d70:	ldr	r0, [r0]
   11d74:	bl	11cb8 <__mempcpy_chk@plt+0xbd8>
   11d78:	cmp	r0, #0
   11d7c:	beq	11da4 <__mempcpy_chk@plt+0xcc4>
   11d80:	movw	r0, #29020	; 0x715c
   11d84:	movt	r0, #2
   11d88:	ldrb	r0, [r0]
   11d8c:	cmp	r0, #0
   11d90:	beq	11dc4 <__mempcpy_chk@plt+0xce4>
   11d94:	bl	10ff0 <__errno_location@plt>
   11d98:	ldr	r0, [r0]
   11d9c:	cmp	r0, #32
   11da0:	bne	11dc4 <__mempcpy_chk@plt+0xce4>
   11da4:	movw	r0, #29000	; 0x7148
   11da8:	movt	r0, #2
   11dac:	ldr	r0, [r0]
   11db0:	bl	11cb8 <__mempcpy_chk@plt+0xbd8>
   11db4:	cmp	r0, #0
   11db8:	subeq	sp, fp, #16
   11dbc:	popeq	{r4, r5, r6, sl, fp, pc}
   11dc0:	b	11e34 <__mempcpy_chk@plt+0xd54>
   11dc4:	movw	r1, #22593	; 0x5841
   11dc8:	movt	r1, #1
   11dcc:	mov	r0, #0
   11dd0:	mov	r2, #5
   11dd4:	bl	10edc <dcgettext@plt>
   11dd8:	mov	r4, r0
   11ddc:	movw	r0, #29016	; 0x7158
   11de0:	movt	r0, #2
   11de4:	ldr	r6, [r0]
   11de8:	bl	10ff0 <__errno_location@plt>
   11dec:	ldr	r5, [r0]
   11df0:	cmp	r6, #0
   11df4:	bne	11e10 <__mempcpy_chk@plt+0xd30>
   11df8:	movw	r2, #23187	; 0x5a93
   11dfc:	movt	r2, #1
   11e00:	mov	r0, #0
   11e04:	mov	r1, r5
   11e08:	mov	r3, r4
   11e0c:	b	11e30 <__mempcpy_chk@plt+0xd50>
   11e10:	mov	r0, r6
   11e14:	bl	137b8 <__mempcpy_chk@plt+0x26d8>
   11e18:	mov	r3, r0
   11e1c:	str	r4, [sp]
   11e20:	movw	r2, #23183	; 0x5a8f
   11e24:	movt	r2, #1
   11e28:	mov	r0, #0
   11e2c:	mov	r1, r5
   11e30:	bl	10f54 <error@plt>
   11e34:	movw	r0, #28916	; 0x70f4
   11e38:	movt	r0, #2
   11e3c:	ldr	r0, [r0]
   11e40:	bl	10eb8 <_exit@plt>
   11e44:	push	{r4, r5, fp, lr}
   11e48:	add	fp, sp, #8
   11e4c:	sub	sp, sp, #8
   11e50:	mov	r4, r0
   11e54:	bl	1102c <fileno@plt>
   11e58:	cmn	r0, #1
   11e5c:	ble	11ed4 <__mempcpy_chk@plt+0xdf4>
   11e60:	mov	r0, r4
   11e64:	bl	10f9c <__freading@plt>
   11e68:	cmp	r0, #0
   11e6c:	beq	11e98 <__mempcpy_chk@plt+0xdb8>
   11e70:	mov	r0, r4
   11e74:	bl	1102c <fileno@plt>
   11e78:	mov	r1, #1
   11e7c:	str	r1, [sp]
   11e80:	mov	r2, #0
   11e84:	mov	r3, #0
   11e88:	bl	10f18 <lseek64@plt>
   11e8c:	and	r0, r0, r1
   11e90:	cmn	r0, #1
   11e94:	beq	11ed4 <__mempcpy_chk@plt+0xdf4>
   11e98:	mov	r0, r4
   11e9c:	bl	11ee4 <__mempcpy_chk@plt+0xe04>
   11ea0:	cmp	r0, #0
   11ea4:	beq	11ed4 <__mempcpy_chk@plt+0xdf4>
   11ea8:	bl	10ff0 <__errno_location@plt>
   11eac:	ldr	r5, [r0]
   11eb0:	mov	r0, r4
   11eb4:	bl	11044 <fclose@plt>
   11eb8:	cmp	r5, #0
   11ebc:	beq	11ecc <__mempcpy_chk@plt+0xdec>
   11ec0:	bl	10ff0 <__errno_location@plt>
   11ec4:	str	r5, [r0]
   11ec8:	mvn	r0, #0
   11ecc:	sub	sp, fp, #8
   11ed0:	pop	{r4, r5, fp, pc}
   11ed4:	mov	r0, r4
   11ed8:	sub	sp, fp, #8
   11edc:	pop	{r4, r5, fp, lr}
   11ee0:	b	11044 <fclose@plt>
   11ee4:	push	{r4, sl, fp, lr}
   11ee8:	add	fp, sp, #8
   11eec:	mov	r4, r0
   11ef0:	cmp	r0, #0
   11ef4:	beq	11f0c <__mempcpy_chk@plt+0xe2c>
   11ef8:	mov	r0, r4
   11efc:	bl	10f9c <__freading@plt>
   11f00:	cmp	r0, #0
   11f04:	movne	r0, r4
   11f08:	blne	11f18 <__mempcpy_chk@plt+0xe38>
   11f0c:	mov	r0, r4
   11f10:	pop	{r4, sl, fp, lr}
   11f14:	b	10e94 <fflush@plt>
   11f18:	push	{fp, lr}
   11f1c:	mov	fp, sp
   11f20:	sub	sp, sp, #8
   11f24:	ldrb	r1, [r0, #1]
   11f28:	tst	r1, #1
   11f2c:	beq	11f44 <__mempcpy_chk@plt+0xe64>
   11f30:	mov	r1, #1
   11f34:	str	r1, [sp]
   11f38:	mov	r2, #0
   11f3c:	mov	r3, #0
   11f40:	bl	1206c <__mempcpy_chk@plt+0xf8c>
   11f44:	mov	sp, fp
   11f48:	pop	{fp, pc}
   11f4c:	push	{fp, lr}
   11f50:	mov	fp, sp
   11f54:	bl	11f64 <__mempcpy_chk@plt+0xe84>
   11f58:	cmp	r0, #0
   11f5c:	popne	{fp, pc}
   11f60:	bl	148a0 <__mempcpy_chk@plt+0x37c0>
   11f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f68:	add	fp, sp, #28
   11f6c:	push	{r2}		; (str r2, [sp, #-4]!)
   11f70:	mov	sl, r1
   11f74:	mov	r7, r0
   11f78:	bl	11c34 <__mempcpy_chk@plt+0xb54>
   11f7c:	sub	r4, r0, r7
   11f80:	bl	11c80 <__mempcpy_chk@plt+0xba0>
   11f84:	mov	r6, r0
   11f88:	add	r5, r4, r0
   11f8c:	mov	r0, sl
   11f90:	bl	10fe4 <strlen@plt>
   11f94:	mov	r9, r0
   11f98:	cmp	r6, #0
   11f9c:	beq	11fc4 <__mempcpy_chk@plt+0xee4>
   11fa0:	add	r0, r5, r7
   11fa4:	ldrb	r0, [r0, #-1]
   11fa8:	mov	r4, #0
   11fac:	cmp	r0, #47	; 0x2f
   11fb0:	beq	11fd4 <__mempcpy_chk@plt+0xef4>
   11fb4:	ldrb	r0, [sl]
   11fb8:	subs	r4, r0, #47	; 0x2f
   11fbc:	movwne	r4, #47	; 0x2f
   11fc0:	b	11fd4 <__mempcpy_chk@plt+0xef4>
   11fc4:	ldrb	r0, [sl]
   11fc8:	mov	r4, #0
   11fcc:	cmp	r0, #47	; 0x2f
   11fd0:	movweq	r4, #46	; 0x2e
   11fd4:	add	r0, r9, r5
   11fd8:	uxtb	r8, r4
   11fdc:	cmp	r8, #0
   11fe0:	movwne	r8, #1
   11fe4:	add	r0, r0, r8
   11fe8:	add	r0, r0, #1
   11fec:	bl	14938 <__mempcpy_chk@plt+0x3858>
   11ff0:	mov	r6, r0
   11ff4:	cmp	r0, #0
   11ff8:	beq	12038 <__mempcpy_chk@plt+0xf58>
   11ffc:	mov	r0, r6
   12000:	mov	r1, r7
   12004:	mov	r2, r5
   12008:	mvn	r3, #0
   1200c:	bl	110e0 <__mempcpy_chk@plt>
   12010:	strb	r4, [r0], r8
   12014:	ldr	r1, [sp]
   12018:	cmp	r1, #0
   1201c:	strne	r0, [r1]
   12020:	mov	r1, sl
   12024:	mov	r2, r9
   12028:	mvn	r3, #0
   1202c:	bl	110e0 <__mempcpy_chk@plt>
   12030:	mov	r1, #0
   12034:	strb	r1, [r0]
   12038:	mov	r0, r6
   1203c:	sub	sp, fp, #28
   12040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12044:	push	{r4, r5, r6, sl, fp, lr}
   12048:	add	fp, sp, #16
   1204c:	mov	r4, r0
   12050:	bl	10ff0 <__errno_location@plt>
   12054:	mov	r5, r0
   12058:	ldr	r6, [r0]
   1205c:	mov	r0, r4
   12060:	bl	10ea0 <free@plt>
   12064:	str	r6, [r5]
   12068:	pop	{r4, r5, r6, sl, fp, pc}
   1206c:	push	{r4, r5, r6, r7, fp, lr}
   12070:	add	fp, sp, #16
   12074:	sub	sp, sp, #8
   12078:	mov	r5, r3
   1207c:	mov	r6, r2
   12080:	mov	r4, r0
   12084:	ldr	r0, [r0, #4]
   12088:	ldr	r1, [r4, #8]
   1208c:	cmp	r1, r0
   12090:	bne	120ac <__mempcpy_chk@plt+0xfcc>
   12094:	ldrd	r0, [r4, #16]
   12098:	cmp	r1, r0
   1209c:	bne	120ac <__mempcpy_chk@plt+0xfcc>
   120a0:	ldr	r0, [r4, #36]	; 0x24
   120a4:	cmp	r0, #0
   120a8:	beq	120c4 <__mempcpy_chk@plt+0xfe4>
   120ac:	mov	r0, r4
   120b0:	mov	r2, r6
   120b4:	mov	r3, r5
   120b8:	sub	sp, fp, #16
   120bc:	pop	{r4, r5, r6, r7, fp, lr}
   120c0:	b	11050 <fseeko64@plt>
   120c4:	ldr	r7, [fp, #8]
   120c8:	mov	r0, r4
   120cc:	bl	1102c <fileno@plt>
   120d0:	str	r7, [sp]
   120d4:	mov	r2, r6
   120d8:	mov	r3, r5
   120dc:	bl	10f18 <lseek64@plt>
   120e0:	and	r2, r0, r1
   120e4:	cmn	r2, #1
   120e8:	beq	12108 <__mempcpy_chk@plt+0x1028>
   120ec:	strd	r0, [r4, #80]	; 0x50
   120f0:	ldr	r0, [r4]
   120f4:	bic	r0, r0, #16
   120f8:	str	r0, [r4]
   120fc:	mov	r0, #0
   12100:	sub	sp, fp, #16
   12104:	pop	{r4, r5, r6, r7, fp, pc}
   12108:	mvn	r0, #0
   1210c:	sub	sp, fp, #16
   12110:	pop	{r4, r5, r6, r7, fp, pc}
   12114:	push	{r4, r5, fp, lr}
   12118:	add	fp, sp, #8
   1211c:	cmp	r0, #0
   12120:	beq	121b4 <__mempcpy_chk@plt+0x10d4>
   12124:	mov	r4, r0
   12128:	mov	r1, #47	; 0x2f
   1212c:	bl	11068 <strrchr@plt>
   12130:	cmp	r0, #0
   12134:	mov	r5, r4
   12138:	addne	r5, r0, #1
   1213c:	sub	r0, r5, r4
   12140:	cmp	r0, #7
   12144:	blt	12198 <__mempcpy_chk@plt+0x10b8>
   12148:	sub	r0, r5, #7
   1214c:	movw	r1, #23246	; 0x5ace
   12150:	movt	r1, #1
   12154:	mov	r2, #7
   12158:	bl	110a4 <strncmp@plt>
   1215c:	cmp	r0, #0
   12160:	bne	12198 <__mempcpy_chk@plt+0x10b8>
   12164:	movw	r1, #23254	; 0x5ad6
   12168:	movt	r1, #1
   1216c:	mov	r0, r5
   12170:	mov	r2, #3
   12174:	bl	110a4 <strncmp@plt>
   12178:	cmp	r0, #0
   1217c:	beq	12188 <__mempcpy_chk@plt+0x10a8>
   12180:	mov	r4, r5
   12184:	b	12198 <__mempcpy_chk@plt+0x10b8>
   12188:	add	r4, r5, #3
   1218c:	movw	r0, #28984	; 0x7138
   12190:	movt	r0, #2
   12194:	str	r4, [r0]
   12198:	movw	r0, #28988	; 0x713c
   1219c:	movt	r0, #2
   121a0:	str	r4, [r0]
   121a4:	movw	r0, #29024	; 0x7160
   121a8:	movt	r0, #2
   121ac:	str	r4, [r0]
   121b0:	pop	{r4, r5, fp, pc}
   121b4:	movw	r0, #29000	; 0x7148
   121b8:	movt	r0, #2
   121bc:	ldr	r3, [r0]
   121c0:	movw	r0, #23190	; 0x5a96
   121c4:	movt	r0, #1
   121c8:	mov	r1, #55	; 0x37
   121cc:	mov	r2, #1
   121d0:	bl	10f0c <fwrite@plt>
   121d4:	bl	110b0 <abort@plt>
   121d8:	push	{r4, r5, r6, sl, fp, lr}
   121dc:	add	fp, sp, #16
   121e0:	mov	r4, r0
   121e4:	movw	r0, #29032	; 0x7168
   121e8:	movt	r0, #2
   121ec:	cmp	r4, #0
   121f0:	moveq	r4, r0
   121f4:	bl	10ff0 <__errno_location@plt>
   121f8:	mov	r5, r0
   121fc:	ldr	r6, [r0]
   12200:	mov	r0, r4
   12204:	mov	r1, #48	; 0x30
   12208:	bl	14800 <__mempcpy_chk@plt+0x3720>
   1220c:	str	r6, [r5]
   12210:	pop	{r4, r5, r6, sl, fp, pc}
   12214:	movw	r1, #29032	; 0x7168
   12218:	movt	r1, #2
   1221c:	cmp	r0, #0
   12220:	movne	r1, r0
   12224:	ldr	r0, [r1]
   12228:	bx	lr
   1222c:	movw	r2, #29032	; 0x7168
   12230:	movt	r2, #2
   12234:	cmp	r0, #0
   12238:	movne	r2, r0
   1223c:	str	r1, [r2]
   12240:	bx	lr
   12244:	movw	r3, #29032	; 0x7168
   12248:	movt	r3, #2
   1224c:	cmp	r0, #0
   12250:	movne	r3, r0
   12254:	ubfx	r0, r1, #5, #3
   12258:	add	ip, r3, r0, lsl #2
   1225c:	ldr	r3, [ip, #8]
   12260:	and	r1, r1, #31
   12264:	mov	r0, #1
   12268:	and	r0, r0, r3, lsr r1
   1226c:	and	r2, r2, #1
   12270:	eor	r2, r0, r2
   12274:	eor	r1, r3, r2, lsl r1
   12278:	str	r1, [ip, #8]
   1227c:	bx	lr
   12280:	movw	r2, #29032	; 0x7168
   12284:	movt	r2, #2
   12288:	cmp	r0, #0
   1228c:	movne	r2, r0
   12290:	ldr	r0, [r2, #4]
   12294:	str	r1, [r2, #4]
   12298:	bx	lr
   1229c:	push	{fp, lr}
   122a0:	mov	fp, sp
   122a4:	movw	r3, #29032	; 0x7168
   122a8:	movt	r3, #2
   122ac:	cmp	r0, #0
   122b0:	movne	r3, r0
   122b4:	mov	r0, #10
   122b8:	str	r0, [r3]
   122bc:	cmp	r1, #0
   122c0:	cmpne	r2, #0
   122c4:	bne	122cc <__mempcpy_chk@plt+0x11ec>
   122c8:	bl	110b0 <abort@plt>
   122cc:	str	r1, [r3, #40]	; 0x28
   122d0:	str	r2, [r3, #44]	; 0x2c
   122d4:	pop	{fp, pc}
   122d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122dc:	add	fp, sp, #28
   122e0:	sub	sp, sp, #20
   122e4:	mov	r8, r3
   122e8:	mov	r9, r2
   122ec:	mov	sl, r1
   122f0:	mov	r7, r0
   122f4:	ldr	r0, [fp, #8]
   122f8:	movw	r5, #29032	; 0x7168
   122fc:	movt	r5, #2
   12300:	cmp	r0, #0
   12304:	movne	r5, r0
   12308:	bl	10ff0 <__errno_location@plt>
   1230c:	mov	r4, r0
   12310:	ldm	r5, {r0, r1}
   12314:	ldr	r2, [r5, #40]	; 0x28
   12318:	ldr	r3, [r5, #44]	; 0x2c
   1231c:	ldr	r6, [r4]
   12320:	add	r5, r5, #8
   12324:	stm	sp, {r0, r1, r5}
   12328:	str	r2, [sp, #12]
   1232c:	str	r3, [sp, #16]
   12330:	mov	r0, r7
   12334:	mov	r1, sl
   12338:	mov	r2, r9
   1233c:	mov	r3, r8
   12340:	bl	12350 <__mempcpy_chk@plt+0x1270>
   12344:	str	r6, [r4]
   12348:	sub	sp, fp, #28
   1234c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12354:	add	fp, sp, #28
   12358:	sub	sp, sp, #156	; 0x9c
   1235c:	mov	r9, r3
   12360:	mov	r7, r1
   12364:	mov	r6, r0
   12368:	str	r2, [fp, #-80]	; 0xffffffb0
   1236c:	add	r0, r2, #1
   12370:	str	r0, [sp, #76]	; 0x4c
   12374:	ldr	r0, [fp, #12]
   12378:	and	r1, r0, #1
   1237c:	str	r1, [sp, #40]	; 0x28
   12380:	and	r1, r0, #4
   12384:	str	r1, [sp, #36]	; 0x24
   12388:	ubfx	r4, r0, #1, #1
   1238c:	bl	10f24 <__ctype_get_mb_cur_max@plt>
   12390:	str	r0, [sp, #44]	; 0x2c
   12394:	ldr	r0, [fp, #24]
   12398:	str	r0, [sp, #88]	; 0x58
   1239c:	ldr	r0, [fp, #20]
   123a0:	str	r0, [sp, #80]	; 0x50
   123a4:	ldr	r1, [fp, #8]
   123a8:	mov	r0, #0
   123ac:	str	r0, [sp, #84]	; 0x54
   123b0:	mov	r0, #0
   123b4:	str	r0, [fp, #-84]	; 0xffffffac
   123b8:	mov	r0, #0
   123bc:	str	r0, [fp, #-72]	; 0xffffffb8
   123c0:	mov	r0, #0
   123c4:	mov	r2, #0
   123c8:	str	r2, [fp, #-56]	; 0xffffffc8
   123cc:	mov	r2, #0
   123d0:	str	r2, [sp, #64]	; 0x40
   123d4:	mov	r2, #1
   123d8:	str	r2, [fp, #-48]	; 0xffffffd0
   123dc:	cmp	r1, #10
   123e0:	bhi	1330c <__mempcpy_chk@plt+0x222c>
   123e4:	mov	sl, r7
   123e8:	mov	r7, r1
   123ec:	add	r1, pc, #24
   123f0:	mov	r8, #0
   123f4:	mov	r2, #1
   123f8:	mov	r3, #0
   123fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12400:	mov	lr, r9
   12404:	mov	r5, r6
   12408:	ldr	pc, [r1, r7, lsl #2]
   1240c:	andeq	r2, r1, r0, ror #9
   12410:	andeq	r2, r1, r0, lsr #10
   12414:	strdeq	r2, [r1], -r0
   12418:	ldrdeq	r2, [r1], -r8
   1241c:	andeq	r2, r1, r4, lsl r5
   12420:	andeq	r2, r1, r4, ror r5
   12424:	andeq	r2, r1, r0, lsl #10
   12428:	ldrdeq	r2, [r1], -r0
   1242c:	andeq	r2, r1, r8, lsr r4
   12430:	andeq	r2, r1, r8, lsr r4
   12434:	andeq	r2, r1, r4, ror #8
   12438:	movw	r0, #23338	; 0x5b2a
   1243c:	movt	r0, #1
   12440:	mov	r1, r7
   12444:	bl	13914 <__mempcpy_chk@plt+0x2834>
   12448:	str	r0, [sp, #80]	; 0x50
   1244c:	movw	r0, #23340	; 0x5b2c
   12450:	movt	r0, #1
   12454:	mov	r1, r7
   12458:	bl	13914 <__mempcpy_chk@plt+0x2834>
   1245c:	mov	r5, r6
   12460:	str	r0, [sp, #88]	; 0x58
   12464:	mov	r8, #0
   12468:	tst	r4, #1
   1246c:	str	r7, [fp, #-64]	; 0xffffffc0
   12470:	bne	124a8 <__mempcpy_chk@plt+0x13c8>
   12474:	ldr	r0, [sp, #80]	; 0x50
   12478:	ldrb	r0, [r0]
   1247c:	cmp	r0, #0
   12480:	beq	124a8 <__mempcpy_chk@plt+0x13c8>
   12484:	ldr	r1, [sp, #80]	; 0x50
   12488:	add	r1, r1, #1
   1248c:	mov	r8, #0
   12490:	cmp	r8, sl
   12494:	strbcc	r0, [r5, r8]
   12498:	ldrb	r0, [r1, r8]
   1249c:	add	r8, r8, #1
   124a0:	cmp	r0, #0
   124a4:	bne	12490 <__mempcpy_chk@plt+0x13b0>
   124a8:	ldr	r7, [sp, #88]	; 0x58
   124ac:	mov	r0, r7
   124b0:	bl	10fe4 <strlen@plt>
   124b4:	mov	r5, r6
   124b8:	str	r0, [fp, #-72]	; 0xffffffb8
   124bc:	str	r7, [fp, #-84]	; 0xffffffac
   124c0:	mov	r2, #1
   124c4:	mov	r3, r4
   124c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124cc:	mov	lr, r9
   124d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   124d4:	b	125d0 <__mempcpy_chk@plt+0x14f0>
   124d8:	mov	r0, #1
   124dc:	b	12520 <__mempcpy_chk@plt+0x1440>
   124e0:	mov	r7, #0
   124e4:	mov	r8, #0
   124e8:	mov	r2, r0
   124ec:	b	125cc <__mempcpy_chk@plt+0x14ec>
   124f0:	tst	r4, #1
   124f4:	bne	12520 <__mempcpy_chk@plt+0x1440>
   124f8:	mov	r2, r0
   124fc:	b	12548 <__mempcpy_chk@plt+0x1468>
   12500:	mov	r0, #1
   12504:	str	r0, [fp, #-72]	; 0xffffffb8
   12508:	mov	r8, #0
   1250c:	mov	r7, #5
   12510:	b	1258c <__mempcpy_chk@plt+0x14ac>
   12514:	mov	r2, #1
   12518:	tst	r4, #1
   1251c:	beq	12548 <__mempcpy_chk@plt+0x1468>
   12520:	mov	r1, #1
   12524:	str	r1, [fp, #-72]	; 0xffffffb8
   12528:	mov	r8, #0
   1252c:	mov	r7, #2
   12530:	movw	r1, #23340	; 0x5b2c
   12534:	movt	r1, #1
   12538:	str	r1, [fp, #-84]	; 0xffffffac
   1253c:	mov	r2, r0
   12540:	mov	r3, #1
   12544:	b	125d0 <__mempcpy_chk@plt+0x14f0>
   12548:	mov	r8, #1
   1254c:	mov	r7, #2
   12550:	cmp	sl, #0
   12554:	movne	r0, #39	; 0x27
   12558:	strbne	r0, [r5]
   1255c:	movw	r0, #23340	; 0x5b2c
   12560:	movt	r0, #1
   12564:	str	r0, [fp, #-84]	; 0xffffffac
   12568:	mov	r0, #1
   1256c:	str	r0, [fp, #-72]	; 0xffffffb8
   12570:	b	125cc <__mempcpy_chk@plt+0x14ec>
   12574:	mov	r7, #5
   12578:	tst	r4, #1
   1257c:	beq	125a4 <__mempcpy_chk@plt+0x14c4>
   12580:	mov	r0, #1
   12584:	str	r0, [fp, #-72]	; 0xffffffb8
   12588:	mov	r8, #0
   1258c:	movw	r0, #23336	; 0x5b28
   12590:	movt	r0, #1
   12594:	str	r0, [fp, #-84]	; 0xffffffac
   12598:	mov	r2, #1
   1259c:	mov	r3, #1
   125a0:	b	125d0 <__mempcpy_chk@plt+0x14f0>
   125a4:	cmp	sl, #0
   125a8:	movne	r0, #34	; 0x22
   125ac:	strbne	r0, [r5]
   125b0:	mov	r8, #1
   125b4:	movw	r0, #23336	; 0x5b28
   125b8:	movt	r0, #1
   125bc:	str	r0, [fp, #-84]	; 0xffffffac
   125c0:	mov	r0, #1
   125c4:	str	r0, [fp, #-72]	; 0xffffffb8
   125c8:	mov	r2, #1
   125cc:	mov	r3, #0
   125d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125d4:	cmp	r0, #0
   125d8:	movwne	r0, #1
   125dc:	and	r1, r0, r3
   125e0:	and	r1, r2, r1
   125e4:	str	r1, [sp, #56]	; 0x38
   125e8:	sub	r1, r7, #2
   125ec:	clz	r1, r1
   125f0:	lsr	r1, r1, #5
   125f4:	and	r1, r1, r3
   125f8:	str	r1, [sp, #68]	; 0x44
   125fc:	str	r7, [fp, #-64]	; 0xffffffc0
   12600:	subs	r1, r7, #2
   12604:	movwne	r1, #1
   12608:	eor	r4, r3, #1
   1260c:	str	r4, [fp, #-88]	; 0xffffffa8
   12610:	orr	r4, r1, r4
   12614:	str	r4, [sp, #72]	; 0x48
   12618:	and	r1, r1, r2
   1261c:	and	r0, r0, r1
   12620:	str	r0, [fp, #-60]	; 0xffffffc4
   12624:	str	r3, [fp, #-76]	; 0xffffffb4
   12628:	orr	r0, r1, r3
   1262c:	eor	r0, r0, #1
   12630:	ldr	r1, [fp, #16]
   12634:	clz	r1, r1
   12638:	lsr	r1, r1, #5
   1263c:	orr	r0, r1, r0
   12640:	str	r0, [fp, #-68]	; 0xffffffbc
   12644:	str	r2, [sp, #92]	; 0x5c
   12648:	eor	r0, r2, #1
   1264c:	str	r0, [sp, #60]	; 0x3c
   12650:	mov	r7, #0
   12654:	cmn	lr, #1
   12658:	beq	12668 <__mempcpy_chk@plt+0x1588>
   1265c:	cmp	r7, lr
   12660:	bne	12674 <__mempcpy_chk@plt+0x1594>
   12664:	b	13180 <__mempcpy_chk@plt+0x20a0>
   12668:	ldrb	r0, [ip, r7]
   1266c:	cmp	r0, #0
   12670:	beq	13180 <__mempcpy_chk@plt+0x20a0>
   12674:	mov	r9, #0
   12678:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1267c:	cmp	r0, #0
   12680:	beq	126b4 <__mempcpy_chk@plt+0x15d4>
   12684:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12688:	add	r4, r7, r0
   1268c:	cmp	r0, #2
   12690:	bcc	126ac <__mempcpy_chk@plt+0x15cc>
   12694:	cmn	lr, #1
   12698:	bne	126ac <__mempcpy_chk@plt+0x15cc>
   1269c:	mov	r0, ip
   126a0:	bl	10fe4 <strlen@plt>
   126a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   126a8:	mov	lr, r0
   126ac:	cmp	r4, lr
   126b0:	bls	126c0 <__mempcpy_chk@plt+0x15e0>
   126b4:	mov	r0, #0
   126b8:	str	r0, [fp, #-52]	; 0xffffffcc
   126bc:	b	12704 <__mempcpy_chk@plt+0x1624>
   126c0:	mov	r4, lr
   126c4:	add	r0, ip, r7
   126c8:	ldr	r1, [fp, #-84]	; 0xffffffac
   126cc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   126d0:	bl	10fd8 <bcmp@plt>
   126d4:	cmp	r0, #0
   126d8:	mov	r1, r0
   126dc:	movwne	r1, #1
   126e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   126e4:	orr	r1, r1, r2
   126e8:	tst	r1, #1
   126ec:	beq	13254 <__mempcpy_chk@plt+0x2174>
   126f0:	clz	r0, r0
   126f4:	lsr	r0, r0, #5
   126f8:	str	r0, [fp, #-52]	; 0xffffffcc
   126fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12700:	mov	lr, r4
   12704:	ldrb	r4, [ip, r7]
   12708:	cmp	r4, #126	; 0x7e
   1270c:	bhi	12c3c <__mempcpy_chk@plt+0x1b5c>
   12710:	mov	r6, #1
   12714:	mov	r2, #110	; 0x6e
   12718:	mov	r0, #97	; 0x61
   1271c:	add	r3, pc, #4
   12720:	mov	r1, #0
   12724:	ldr	pc, [r3, r4, lsl #2]
   12728:	muleq	r1, ip, sl
   1272c:	andeq	r2, r1, ip, lsr ip
   12730:	andeq	r2, r1, ip, lsr ip
   12734:	andeq	r2, r1, ip, lsr ip
   12738:	andeq	r2, r1, ip, lsr ip
   1273c:	andeq	r2, r1, ip, lsr ip
   12740:	andeq	r2, r1, ip, lsr ip
   12744:	andeq	r2, r1, r0, lsl sp
   12748:	andeq	r2, r1, ip, ror sl
   1274c:	andeq	r2, r1, r4, ror sl
   12750:	andeq	r2, r1, r8, lsl #21
   12754:	andeq	r2, r1, r4, lsr #23
   12758:	andeq	r2, r1, ip, ror #20
   1275c:	andeq	r2, r1, r4, lsl #21
   12760:	andeq	r2, r1, ip, lsr ip
   12764:	andeq	r2, r1, ip, lsr ip
   12768:	andeq	r2, r1, ip, lsr ip
   1276c:	andeq	r2, r1, ip, lsr ip
   12770:	andeq	r2, r1, ip, lsr ip
   12774:	andeq	r2, r1, ip, lsr ip
   12778:	andeq	r2, r1, ip, lsr ip
   1277c:	andeq	r2, r1, ip, lsr ip
   12780:	andeq	r2, r1, ip, lsr ip
   12784:	andeq	r2, r1, ip, lsr ip
   12788:	andeq	r2, r1, ip, lsr ip
   1278c:	andeq	r2, r1, ip, lsr ip
   12790:	andeq	r2, r1, ip, lsr ip
   12794:	andeq	r2, r1, ip, lsr ip
   12798:	andeq	r2, r1, ip, lsr ip
   1279c:	andeq	r2, r1, ip, lsr ip
   127a0:	andeq	r2, r1, ip, lsr ip
   127a4:	andeq	r2, r1, ip, lsr ip
   127a8:	andeq	r2, r1, r0, lsr #20
   127ac:	andeq	r2, r1, r4, lsr #20
   127b0:	andeq	r2, r1, r4, lsr #20
   127b4:	andeq	r2, r1, ip, lsl #20
   127b8:	andeq	r2, r1, r4, lsr #20
   127bc:	andeq	r2, r1, r4, lsr #18
   127c0:	andeq	r2, r1, r4, lsr #20
   127c4:	andeq	r2, r1, ip, lsr #23
   127c8:	andeq	r2, r1, r4, lsr #20
   127cc:	andeq	r2, r1, r4, lsr #20
   127d0:	andeq	r2, r1, r4, lsr #20
   127d4:	andeq	r2, r1, r4, lsr #18
   127d8:	andeq	r2, r1, r4, lsr #18
   127dc:	andeq	r2, r1, r4, lsr #18
   127e0:	andeq	r2, r1, r4, lsr #18
   127e4:	andeq	r2, r1, r4, lsr #18
   127e8:	andeq	r2, r1, r4, lsr #18
   127ec:	andeq	r2, r1, r4, lsr #18
   127f0:	andeq	r2, r1, r4, lsr #18
   127f4:	andeq	r2, r1, r4, lsr #18
   127f8:	andeq	r2, r1, r4, lsr #18
   127fc:	andeq	r2, r1, r4, lsr #18
   12800:	andeq	r2, r1, r4, lsr #18
   12804:	andeq	r2, r1, r4, lsr #18
   12808:	andeq	r2, r1, r4, lsr #18
   1280c:	andeq	r2, r1, r4, lsr #18
   12810:	andeq	r2, r1, r4, lsr #18
   12814:	andeq	r2, r1, r4, lsr #20
   12818:	andeq	r2, r1, r4, lsr #20
   1281c:	andeq	r2, r1, r4, lsr #20
   12820:	andeq	r2, r1, r4, lsr #20
   12824:	andeq	r2, r1, r4, ror fp
   12828:	andeq	r2, r1, ip, lsr ip
   1282c:	andeq	r2, r1, r4, lsr #18
   12830:	andeq	r2, r1, r4, lsr #18
   12834:	andeq	r2, r1, r4, lsr #18
   12838:	andeq	r2, r1, r4, lsr #18
   1283c:	andeq	r2, r1, r4, lsr #18
   12840:	andeq	r2, r1, r4, lsr #18
   12844:	andeq	r2, r1, r4, lsr #18
   12848:	andeq	r2, r1, r4, lsr #18
   1284c:	andeq	r2, r1, r4, lsr #18
   12850:	andeq	r2, r1, r4, lsr #18
   12854:	andeq	r2, r1, r4, lsr #18
   12858:	andeq	r2, r1, r4, lsr #18
   1285c:	andeq	r2, r1, r4, lsr #18
   12860:	andeq	r2, r1, r4, lsr #18
   12864:	andeq	r2, r1, r4, lsr #18
   12868:	andeq	r2, r1, r4, lsr #18
   1286c:	andeq	r2, r1, r4, lsr #18
   12870:	andeq	r2, r1, r4, lsr #18
   12874:	andeq	r2, r1, r4, lsr #18
   12878:	andeq	r2, r1, r4, lsr #18
   1287c:	andeq	r2, r1, r4, lsr #18
   12880:	andeq	r2, r1, r4, lsr #18
   12884:	andeq	r2, r1, r4, lsr #18
   12888:	andeq	r2, r1, r4, lsr #18
   1288c:	andeq	r2, r1, r4, lsr #18
   12890:	andeq	r2, r1, r4, lsr #18
   12894:	andeq	r2, r1, r4, lsr #20
   12898:	andeq	r2, r1, ip, asr #20
   1289c:	andeq	r2, r1, r4, lsr #18
   128a0:	andeq	r2, r1, r4, lsr #20
   128a4:	andeq	r2, r1, r4, lsr #18
   128a8:	andeq	r2, r1, r4, lsr #20
   128ac:	andeq	r2, r1, r4, lsr #18
   128b0:	andeq	r2, r1, r4, lsr #18
   128b4:	andeq	r2, r1, r4, lsr #18
   128b8:	andeq	r2, r1, r4, lsr #18
   128bc:	andeq	r2, r1, r4, lsr #18
   128c0:	andeq	r2, r1, r4, lsr #18
   128c4:	andeq	r2, r1, r4, lsr #18
   128c8:	andeq	r2, r1, r4, lsr #18
   128cc:	andeq	r2, r1, r4, lsr #18
   128d0:	andeq	r2, r1, r4, lsr #18
   128d4:	andeq	r2, r1, r4, lsr #18
   128d8:	andeq	r2, r1, r4, lsr #18
   128dc:	andeq	r2, r1, r4, lsr #18
   128e0:	andeq	r2, r1, r4, lsr #18
   128e4:	andeq	r2, r1, r4, lsr #18
   128e8:	andeq	r2, r1, r4, lsr #18
   128ec:	andeq	r2, r1, r4, lsr #18
   128f0:	andeq	r2, r1, r4, lsr #18
   128f4:	andeq	r2, r1, r4, lsr #18
   128f8:	andeq	r2, r1, r4, lsr #18
   128fc:	andeq	r2, r1, r4, lsr #18
   12900:	andeq	r2, r1, r4, lsr #18
   12904:	andeq	r2, r1, r4, lsr #18
   12908:	andeq	r2, r1, r4, lsr #18
   1290c:	andeq	r2, r1, r4, lsr #18
   12910:	andeq	r2, r1, r4, lsr #18
   12914:	andeq	r2, r1, r0, ror #19
   12918:	andeq	r2, r1, r4, lsr #20
   1291c:	andeq	r2, r1, r0, ror #19
   12920:	andeq	r2, r1, ip, lsl #20
   12924:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12928:	tst	r0, #1
   1292c:	bne	12958 <__mempcpy_chk@plt+0x1878>
   12930:	ubfx	r0, r4, #5, #3
   12934:	ldr	r1, [fp, #16]
   12938:	ldr	r0, [r1, r0, lsl #2]
   1293c:	and	r1, r4, #31
   12940:	mov	r2, #1
   12944:	tst	r0, r2, lsl r1
   12948:	beq	12958 <__mempcpy_chk@plt+0x1878>
   1294c:	mov	r0, r4
   12950:	mov	r1, r6
   12954:	b	1296c <__mempcpy_chk@plt+0x188c>
   12958:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1295c:	cmp	r0, #0
   12960:	mov	r0, r4
   12964:	mov	r1, r6
   12968:	beq	12ca4 <__mempcpy_chk@plt+0x1bc4>
   1296c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12970:	tst	r2, #1
   12974:	bne	13268 <__mempcpy_chk@plt+0x2188>
   12978:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1297c:	subs	r2, r2, #2
   12980:	movwne	r2, #1
   12984:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12988:	orr	r2, r2, r3
   1298c:	tst	r2, #1
   12990:	bne	129cc <__mempcpy_chk@plt+0x18ec>
   12994:	cmp	r8, sl
   12998:	movcc	r2, #39	; 0x27
   1299c:	strbcc	r2, [r5, r8]
   129a0:	add	r2, r8, #1
   129a4:	cmp	r2, sl
   129a8:	movcc	r3, #36	; 0x24
   129ac:	strbcc	r3, [r5, r2]
   129b0:	add	r2, r8, #2
   129b4:	cmp	r2, sl
   129b8:	movcc	r3, #39	; 0x27
   129bc:	strbcc	r3, [r5, r2]
   129c0:	add	r8, r8, #3
   129c4:	mov	r2, #1
   129c8:	str	r2, [fp, #-56]	; 0xffffffc8
   129cc:	cmp	r8, sl
   129d0:	movcc	r2, #92	; 0x5c
   129d4:	strbcc	r2, [r5, r8]
   129d8:	add	r8, r8, #1
   129dc:	b	12ce8 <__mempcpy_chk@plt+0x1c08>
   129e0:	cmp	lr, #1
   129e4:	beq	12a0c <__mempcpy_chk@plt+0x192c>
   129e8:	mov	r6, #0
   129ec:	cmn	lr, #1
   129f0:	bne	12a18 <__mempcpy_chk@plt+0x1938>
   129f4:	ldrb	r0, [ip, #1]
   129f8:	cmp	r0, #0
   129fc:	beq	12a0c <__mempcpy_chk@plt+0x192c>
   12a00:	mvn	lr, #0
   12a04:	mov	r9, #0
   12a08:	b	12924 <__mempcpy_chk@plt+0x1844>
   12a0c:	mov	r6, #0
   12a10:	cmp	r7, #0
   12a14:	beq	12a20 <__mempcpy_chk@plt+0x1940>
   12a18:	mov	r9, #0
   12a1c:	b	12924 <__mempcpy_chk@plt+0x1844>
   12a20:	mov	r1, #1
   12a24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a28:	cmp	r0, #2
   12a2c:	bne	12a44 <__mempcpy_chk@plt+0x1964>
   12a30:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a34:	tst	r0, #1
   12a38:	mov	r6, r1
   12a3c:	beq	12924 <__mempcpy_chk@plt+0x1844>
   12a40:	b	13268 <__mempcpy_chk@plt+0x2188>
   12a44:	mov	r6, r1
   12a48:	b	12924 <__mempcpy_chk@plt+0x1844>
   12a4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a50:	cmp	r0, #2
   12a54:	bne	12c88 <__mempcpy_chk@plt+0x1ba8>
   12a58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a5c:	tst	r0, #1
   12a60:	bne	13268 <__mempcpy_chk@plt+0x2188>
   12a64:	mov	r9, #0
   12a68:	b	12c9c <__mempcpy_chk@plt+0x1bbc>
   12a6c:	mov	r0, #102	; 0x66
   12a70:	b	12d10 <__mempcpy_chk@plt+0x1c30>
   12a74:	mov	r2, #116	; 0x74
   12a78:	b	12a88 <__mempcpy_chk@plt+0x19a8>
   12a7c:	mov	r0, #98	; 0x62
   12a80:	b	12d10 <__mempcpy_chk@plt+0x1c30>
   12a84:	mov	r2, #114	; 0x72
   12a88:	ldr	r0, [sp, #72]	; 0x48
   12a8c:	tst	r0, #1
   12a90:	mov	r0, r2
   12a94:	bne	12d10 <__mempcpy_chk@plt+0x1c30>
   12a98:	b	13268 <__mempcpy_chk@plt+0x2188>
   12a9c:	ldr	r0, [sp, #92]	; 0x5c
   12aa0:	tst	r0, #1
   12aa4:	beq	12d2c <__mempcpy_chk@plt+0x1c4c>
   12aa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12aac:	tst	r0, #1
   12ab0:	bne	13268 <__mempcpy_chk@plt+0x2188>
   12ab4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ab8:	subs	r0, r0, #2
   12abc:	movwne	r0, #1
   12ac0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12ac4:	orr	r0, r0, r1
   12ac8:	tst	r0, #1
   12acc:	bne	12b08 <__mempcpy_chk@plt+0x1a28>
   12ad0:	cmp	r8, sl
   12ad4:	movcc	r0, #39	; 0x27
   12ad8:	strbcc	r0, [r5, r8]
   12adc:	add	r0, r8, #1
   12ae0:	cmp	r0, sl
   12ae4:	movcc	r1, #36	; 0x24
   12ae8:	strbcc	r1, [r5, r0]
   12aec:	add	r0, r8, #2
   12af0:	cmp	r0, sl
   12af4:	movcc	r1, #39	; 0x27
   12af8:	strbcc	r1, [r5, r0]
   12afc:	add	r8, r8, #3
   12b00:	mov	r0, #1
   12b04:	str	r0, [fp, #-56]	; 0xffffffc8
   12b08:	cmp	r8, sl
   12b0c:	movcc	r0, #92	; 0x5c
   12b10:	strbcc	r0, [r5, r8]
   12b14:	add	r0, r8, #1
   12b18:	mov	r6, #0
   12b1c:	mov	r9, #1
   12b20:	mov	r4, #48	; 0x30
   12b24:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12b28:	cmp	r1, #2
   12b2c:	beq	12ef0 <__mempcpy_chk@plt+0x1e10>
   12b30:	add	r1, r7, #1
   12b34:	cmp	r1, lr
   12b38:	bcs	12ef0 <__mempcpy_chk@plt+0x1e10>
   12b3c:	ldrb	r1, [ip, r1]
   12b40:	sub	r1, r1, #48	; 0x30
   12b44:	uxtb	r1, r1
   12b48:	cmp	r1, #9
   12b4c:	bhi	12ef0 <__mempcpy_chk@plt+0x1e10>
   12b50:	cmp	r0, sl
   12b54:	movcc	r1, #48	; 0x30
   12b58:	strbcc	r1, [r5, r0]
   12b5c:	add	r0, r8, #2
   12b60:	cmp	r0, sl
   12b64:	movcc	r1, #48	; 0x30
   12b68:	strbcc	r1, [r5, r0]
   12b6c:	add	r8, r8, #3
   12b70:	b	12924 <__mempcpy_chk@plt+0x1844>
   12b74:	mov	r9, #0
   12b78:	mov	r4, #63	; 0x3f
   12b7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b80:	cmp	r0, #5
   12b84:	beq	12ef8 <__mempcpy_chk@plt+0x1e18>
   12b88:	cmp	r0, #2
   12b8c:	bne	12fa0 <__mempcpy_chk@plt+0x1ec0>
   12b90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b94:	tst	r0, #1
   12b98:	mov	r6, #0
   12b9c:	beq	12924 <__mempcpy_chk@plt+0x1844>
   12ba0:	b	13268 <__mempcpy_chk@plt+0x2188>
   12ba4:	mov	r0, #118	; 0x76
   12ba8:	b	12d10 <__mempcpy_chk@plt+0x1c30>
   12bac:	mov	r4, #39	; 0x27
   12bb0:	mov	r0, #1
   12bb4:	str	r0, [sp, #64]	; 0x40
   12bb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bbc:	cmp	r0, #2
   12bc0:	bne	12d48 <__mempcpy_chk@plt+0x1c68>
   12bc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bc8:	tst	r0, #1
   12bcc:	bne	13268 <__mempcpy_chk@plt+0x2188>
   12bd0:	ldr	r2, [sp, #84]	; 0x54
   12bd4:	cmp	r2, #0
   12bd8:	mov	r0, r2
   12bdc:	movwne	r0, #1
   12be0:	clz	r1, sl
   12be4:	lsr	r1, r1, #5
   12be8:	orrs	r0, r0, r1
   12bec:	moveq	r2, sl
   12bf0:	str	r2, [sp, #84]	; 0x54
   12bf4:	moveq	sl, r0
   12bf8:	cmp	r8, sl
   12bfc:	movcc	r0, #39	; 0x27
   12c00:	strbcc	r0, [r5, r8]
   12c04:	add	r0, r8, #1
   12c08:	cmp	r0, sl
   12c0c:	movcc	r1, #92	; 0x5c
   12c10:	strbcc	r1, [r5, r0]
   12c14:	add	r0, r8, #2
   12c18:	cmp	r0, sl
   12c1c:	movcc	r1, #39	; 0x27
   12c20:	strbcc	r1, [r5, r0]
   12c24:	add	r8, r8, #3
   12c28:	mov	r0, #0
   12c2c:	str	r0, [fp, #-56]	; 0xffffffc8
   12c30:	mov	r9, #0
   12c34:	mov	r6, #1
   12c38:	b	12924 <__mempcpy_chk@plt+0x1844>
   12c3c:	ldr	r0, [sp, #44]	; 0x2c
   12c40:	cmp	r0, #1
   12c44:	bne	12d50 <__mempcpy_chk@plt+0x1c70>
   12c48:	str	lr, [sp, #32]
   12c4c:	bl	10fc0 <__ctype_b_loc@plt>
   12c50:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c54:	ldr	r0, [r0]
   12c58:	add	r0, r0, r4, lsl #1
   12c5c:	ldrb	r0, [r0, #1]
   12c60:	ubfx	r6, r0, #6, #1
   12c64:	mov	r2, #1
   12c68:	ldr	r0, [sp, #60]	; 0x3c
   12c6c:	orr	r1, r6, r0
   12c70:	cmp	r2, #1
   12c74:	bhi	12fa8 <__mempcpy_chk@plt+0x1ec8>
   12c78:	tst	r1, #1
   12c7c:	beq	12fa8 <__mempcpy_chk@plt+0x1ec8>
   12c80:	ldr	lr, [sp, #32]
   12c84:	b	12924 <__mempcpy_chk@plt+0x1844>
   12c88:	mov	r9, #0
   12c8c:	mov	r0, #92	; 0x5c
   12c90:	ldr	r1, [sp, #56]	; 0x38
   12c94:	cmp	r1, #0
   12c98:	beq	12d10 <__mempcpy_chk@plt+0x1c30>
   12c9c:	mov	r4, #92	; 0x5c
   12ca0:	mov	r6, #0
   12ca4:	cmp	r9, #0
   12ca8:	bne	12ce0 <__mempcpy_chk@plt+0x1c00>
   12cac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cb0:	tst	r0, #1
   12cb4:	beq	12ce0 <__mempcpy_chk@plt+0x1c00>
   12cb8:	cmp	r8, sl
   12cbc:	movcc	r0, #39	; 0x27
   12cc0:	strbcc	r0, [r5, r8]
   12cc4:	add	r0, r8, #1
   12cc8:	cmp	r0, sl
   12ccc:	movcc	r1, #39	; 0x27
   12cd0:	strbcc	r1, [r5, r0]
   12cd4:	add	r8, r8, #2
   12cd8:	mov	r0, #0
   12cdc:	str	r0, [fp, #-56]	; 0xffffffc8
   12ce0:	mov	r1, r6
   12ce4:	mov	r0, r4
   12ce8:	cmp	r8, sl
   12cec:	strbcc	r0, [r5, r8]
   12cf0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12cf4:	and	r0, r0, r1
   12cf8:	str	r0, [fp, #-48]	; 0xffffffd0
   12cfc:	add	r8, r8, #1
   12d00:	add	r7, r7, #1
   12d04:	cmn	lr, #1
   12d08:	bne	1265c <__mempcpy_chk@plt+0x157c>
   12d0c:	b	12668 <__mempcpy_chk@plt+0x1588>
   12d10:	mov	r9, #0
   12d14:	ldr	r1, [sp, #92]	; 0x5c
   12d18:	tst	r1, #1
   12d1c:	mov	r6, #0
   12d20:	mov	r1, #0
   12d24:	beq	12924 <__mempcpy_chk@plt+0x1844>
   12d28:	b	1296c <__mempcpy_chk@plt+0x188c>
   12d2c:	mov	r4, #0
   12d30:	ldr	r0, [sp, #40]	; 0x28
   12d34:	cmp	r0, #0
   12d38:	mov	r9, #0
   12d3c:	mov	r6, #0
   12d40:	beq	12924 <__mempcpy_chk@plt+0x1844>
   12d44:	b	12d00 <__mempcpy_chk@plt+0x1c20>
   12d48:	mov	r6, #1
   12d4c:	b	12924 <__mempcpy_chk@plt+0x1844>
   12d50:	mov	r0, #0
   12d54:	str	r0, [fp, #-36]	; 0xffffffdc
   12d58:	str	r0, [fp, #-40]	; 0xffffffd8
   12d5c:	cmn	lr, #1
   12d60:	bne	12d74 <__mempcpy_chk@plt+0x1c94>
   12d64:	mov	r0, ip
   12d68:	bl	10fe4 <strlen@plt>
   12d6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d70:	mov	lr, r0
   12d74:	ldr	r0, [sp, #76]	; 0x4c
   12d78:	add	r0, r0, r7
   12d7c:	str	r0, [sp, #24]
   12d80:	mov	r6, #1
   12d84:	mov	r2, #0
   12d88:	sub	r0, fp, #40	; 0x28
   12d8c:	mov	r3, r0
   12d90:	str	r5, [sp, #28]
   12d94:	str	lr, [sp, #32]
   12d98:	b	12ddc <__mempcpy_chk@plt+0x1cfc>
   12d9c:	ldr	r5, [sp, #52]	; 0x34
   12da0:	add	r5, r0, r5
   12da4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12da8:	bl	10f00 <iswprint@plt>
   12dac:	cmp	r0, #0
   12db0:	movwne	r0, #1
   12db4:	and	r6, r6, r0
   12db8:	sub	r0, fp, #40	; 0x28
   12dbc:	bl	10ed0 <mbsinit@plt>
   12dc0:	sub	r3, fp, #40	; 0x28
   12dc4:	mov	r2, r5
   12dc8:	ldr	lr, [sp, #32]
   12dcc:	cmp	r0, #0
   12dd0:	ldr	r5, [sp, #28]
   12dd4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12dd8:	bne	12c68 <__mempcpy_chk@plt+0x1b88>
   12ddc:	str	r2, [sp, #52]	; 0x34
   12de0:	add	r0, r2, r7
   12de4:	add	r1, ip, r0
   12de8:	str	r0, [sp, #48]	; 0x30
   12dec:	sub	r2, lr, r0
   12df0:	sub	r0, fp, #44	; 0x2c
   12df4:	bl	14d68 <__mempcpy_chk@plt+0x3c88>
   12df8:	cmp	r0, #0
   12dfc:	beq	13174 <__mempcpy_chk@plt+0x2094>
   12e00:	cmn	r0, #1
   12e04:	beq	13130 <__mempcpy_chk@plt+0x2050>
   12e08:	cmn	r0, #2
   12e0c:	ldr	lr, [sp, #32]
   12e10:	beq	13138 <__mempcpy_chk@plt+0x2058>
   12e14:	cmp	r0, #2
   12e18:	mov	r1, #0
   12e1c:	movwcc	r1, #1
   12e20:	ldr	r2, [sp, #68]	; 0x44
   12e24:	eor	r2, r2, #1
   12e28:	orrs	r1, r2, r1
   12e2c:	bne	12d9c <__mempcpy_chk@plt+0x1cbc>
   12e30:	ldr	r1, [sp, #52]	; 0x34
   12e34:	ldr	r2, [sp, #24]
   12e38:	add	r1, r2, r1
   12e3c:	sub	r2, r0, #1
   12e40:	b	12e50 <__mempcpy_chk@plt+0x1d70>
   12e44:	add	r1, r1, #1
   12e48:	subs	r2, r2, #1
   12e4c:	beq	12d9c <__mempcpy_chk@plt+0x1cbc>
   12e50:	ldrb	r3, [r1]
   12e54:	sub	r3, r3, #91	; 0x5b
   12e58:	cmp	r3, #33	; 0x21
   12e5c:	bhi	12e44 <__mempcpy_chk@plt+0x1d64>
   12e60:	add	r5, pc, #0
   12e64:	ldr	pc, [r5, r3, lsl #2]
   12e68:	andeq	r3, r1, r0, ror #4
   12e6c:	andeq	r3, r1, r0, ror #4
   12e70:	andeq	r2, r1, r4, asr #28
   12e74:	andeq	r3, r1, r0, ror #4
   12e78:	andeq	r2, r1, r4, asr #28
   12e7c:	andeq	r3, r1, r0, ror #4
   12e80:	andeq	r2, r1, r4, asr #28
   12e84:	andeq	r2, r1, r4, asr #28
   12e88:	andeq	r2, r1, r4, asr #28
   12e8c:	andeq	r2, r1, r4, asr #28
   12e90:	andeq	r2, r1, r4, asr #28
   12e94:	andeq	r2, r1, r4, asr #28
   12e98:	andeq	r2, r1, r4, asr #28
   12e9c:	andeq	r2, r1, r4, asr #28
   12ea0:	andeq	r2, r1, r4, asr #28
   12ea4:	andeq	r2, r1, r4, asr #28
   12ea8:	andeq	r2, r1, r4, asr #28
   12eac:	andeq	r2, r1, r4, asr #28
   12eb0:	andeq	r2, r1, r4, asr #28
   12eb4:	andeq	r2, r1, r4, asr #28
   12eb8:	andeq	r2, r1, r4, asr #28
   12ebc:	andeq	r2, r1, r4, asr #28
   12ec0:	andeq	r2, r1, r4, asr #28
   12ec4:	andeq	r2, r1, r4, asr #28
   12ec8:	andeq	r2, r1, r4, asr #28
   12ecc:	andeq	r2, r1, r4, asr #28
   12ed0:	andeq	r2, r1, r4, asr #28
   12ed4:	andeq	r2, r1, r4, asr #28
   12ed8:	andeq	r2, r1, r4, asr #28
   12edc:	andeq	r2, r1, r4, asr #28
   12ee0:	andeq	r2, r1, r4, asr #28
   12ee4:	andeq	r2, r1, r4, asr #28
   12ee8:	andeq	r2, r1, r4, asr #28
   12eec:	andeq	r3, r1, r0, ror #4
   12ef0:	mov	r8, r0
   12ef4:	b	12924 <__mempcpy_chk@plt+0x1844>
   12ef8:	ldr	r0, [sp, #36]	; 0x24
   12efc:	cmp	r0, #0
   12f00:	beq	12fa0 <__mempcpy_chk@plt+0x1ec0>
   12f04:	add	r0, r7, #2
   12f08:	cmp	r0, lr
   12f0c:	bcs	12fa0 <__mempcpy_chk@plt+0x1ec0>
   12f10:	add	r1, r7, ip
   12f14:	ldrb	r1, [r1, #1]
   12f18:	cmp	r1, #63	; 0x3f
   12f1c:	bne	12fa0 <__mempcpy_chk@plt+0x1ec0>
   12f20:	ldrb	r1, [ip, r0]
   12f24:	sub	r2, r1, #33	; 0x21
   12f28:	cmp	r2, #29
   12f2c:	bhi	12fa0 <__mempcpy_chk@plt+0x1ec0>
   12f30:	mov	r3, #1
   12f34:	movw	r6, #20929	; 0x51c1
   12f38:	movt	r6, #14336	; 0x3800
   12f3c:	tst	r6, r3, lsl r2
   12f40:	beq	12fa0 <__mempcpy_chk@plt+0x1ec0>
   12f44:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f48:	tst	r2, #1
   12f4c:	bne	13268 <__mempcpy_chk@plt+0x2188>
   12f50:	cmp	r8, sl
   12f54:	movcc	r2, #63	; 0x3f
   12f58:	strbcc	r2, [r5, r8]
   12f5c:	add	r2, r8, #1
   12f60:	cmp	r2, sl
   12f64:	movcc	r3, #34	; 0x22
   12f68:	strbcc	r3, [r5, r2]
   12f6c:	add	r2, r8, #2
   12f70:	cmp	r2, sl
   12f74:	movcc	r3, #34	; 0x22
   12f78:	strbcc	r3, [r5, r2]
   12f7c:	add	r2, r8, #3
   12f80:	cmp	r2, sl
   12f84:	movcc	r3, #63	; 0x3f
   12f88:	strbcc	r3, [r5, r2]
   12f8c:	add	r8, r8, #4
   12f90:	mov	r7, r0
   12f94:	mov	r4, r1
   12f98:	mov	r6, #0
   12f9c:	b	12924 <__mempcpy_chk@plt+0x1844>
   12fa0:	mov	r6, #0
   12fa4:	b	12924 <__mempcpy_chk@plt+0x1844>
   12fa8:	add	r0, r2, r7
   12fac:	str	r0, [sp, #52]	; 0x34
   12fb0:	mov	r2, #0
   12fb4:	ldr	lr, [sp, #32]
   12fb8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12fbc:	str	r1, [sp, #48]	; 0x30
   12fc0:	tst	r1, #1
   12fc4:	bne	130a0 <__mempcpy_chk@plt+0x1fc0>
   12fc8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fcc:	tst	r1, #1
   12fd0:	bne	13268 <__mempcpy_chk@plt+0x2188>
   12fd4:	mov	r3, r0
   12fd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fdc:	subs	r1, r0, #2
   12fe0:	movwne	r1, #1
   12fe4:	orr	r1, r1, r3
   12fe8:	tst	r1, #1
   12fec:	bne	13024 <__mempcpy_chk@plt+0x1f44>
   12ff0:	cmp	r8, sl
   12ff4:	movcc	r0, #39	; 0x27
   12ff8:	strbcc	r0, [r5, r8]
   12ffc:	add	r2, r8, #1
   13000:	cmp	r2, sl
   13004:	movcc	r0, #36	; 0x24
   13008:	strbcc	r0, [r5, r2]
   1300c:	add	r2, r8, #2
   13010:	cmp	r2, sl
   13014:	movcc	r0, #39	; 0x27
   13018:	strbcc	r0, [r5, r2]
   1301c:	add	r8, r8, #3
   13020:	mov	r3, #1
   13024:	cmp	r8, sl
   13028:	movcc	r1, #92	; 0x5c
   1302c:	strbcc	r1, [r5, r8]
   13030:	add	r2, r8, #1
   13034:	cmp	r2, sl
   13038:	bcs	1304c <__mempcpy_chk@plt+0x1f6c>
   1303c:	uxtb	r1, r4
   13040:	mov	r0, #48	; 0x30
   13044:	orr	r1, r0, r1, lsr #6
   13048:	strb	r1, [r5, r2]
   1304c:	add	r2, r8, #2
   13050:	cmp	r2, sl
   13054:	lsrcc	r1, r4, #3
   13058:	movcc	r0, #6
   1305c:	bficc	r1, r0, #3, #29
   13060:	strbcc	r1, [r5, r2]
   13064:	mov	r0, #6
   13068:	bfi	r4, r0, #3, #29
   1306c:	add	r8, r8, #3
   13070:	mov	r2, #1
   13074:	mov	r0, r3
   13078:	b	130c4 <__mempcpy_chk@plt+0x1fe4>
   1307c:	cmp	r8, sl
   13080:	strbcc	r4, [r5, r8]
   13084:	ldr	r1, [sp, #76]	; 0x4c
   13088:	ldrb	r4, [r1, r7]
   1308c:	add	r8, r8, #1
   13090:	mov	r7, r3
   13094:	ldr	r1, [sp, #48]	; 0x30
   13098:	tst	r1, #1
   1309c:	beq	12fc8 <__mempcpy_chk@plt+0x1ee8>
   130a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   130a4:	tst	r1, #1
   130a8:	beq	130bc <__mempcpy_chk@plt+0x1fdc>
   130ac:	cmp	r8, sl
   130b0:	movcc	r1, #92	; 0x5c
   130b4:	strbcc	r1, [r5, r8]
   130b8:	add	r8, r8, #1
   130bc:	mov	r1, #0
   130c0:	str	r1, [fp, #-52]	; 0xffffffcc
   130c4:	and	r9, r2, #1
   130c8:	add	r3, r7, #1
   130cc:	ldr	r1, [sp, #52]	; 0x34
   130d0:	cmp	r1, r3
   130d4:	bls	13118 <__mempcpy_chk@plt+0x2038>
   130d8:	cmp	r9, #0
   130dc:	movwne	r9, #1
   130e0:	mvn	r1, r0
   130e4:	orr	r1, r1, r9
   130e8:	tst	r1, #1
   130ec:	bne	1307c <__mempcpy_chk@plt+0x1f9c>
   130f0:	cmp	r8, sl
   130f4:	movcc	r1, #39	; 0x27
   130f8:	strbcc	r1, [r5, r8]
   130fc:	add	r1, r8, #1
   13100:	cmp	r1, sl
   13104:	movcc	r0, #39	; 0x27
   13108:	strbcc	r0, [r5, r1]
   1310c:	add	r8, r8, #2
   13110:	mov	r0, #0
   13114:	b	1307c <__mempcpy_chk@plt+0x1f9c>
   13118:	str	r0, [fp, #-56]	; 0xffffffc8
   1311c:	cmp	r9, #0
   13120:	movwne	r9, #1
   13124:	cmp	r9, #0
   13128:	beq	12cac <__mempcpy_chk@plt+0x1bcc>
   1312c:	b	12ce0 <__mempcpy_chk@plt+0x1c00>
   13130:	mov	r6, #0
   13134:	b	13174 <__mempcpy_chk@plt+0x2094>
   13138:	mov	r6, #0
   1313c:	ldr	r0, [sp, #48]	; 0x30
   13140:	cmp	r0, lr
   13144:	bcs	13174 <__mempcpy_chk@plt+0x2094>
   13148:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1314c:	add	r0, ip, r7
   13150:	ldr	r2, [sp, #52]	; 0x34
   13154:	ldrb	r1, [r0, r2]
   13158:	cmp	r1, #0
   1315c:	beq	12c68 <__mempcpy_chk@plt+0x1b88>
   13160:	add	r2, r2, #1
   13164:	add	r1, r7, r2
   13168:	cmp	r1, lr
   1316c:	bcc	13154 <__mempcpy_chk@plt+0x2074>
   13170:	b	12c68 <__mempcpy_chk@plt+0x1b88>
   13174:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13178:	ldr	r2, [sp, #52]	; 0x34
   1317c:	b	12c68 <__mempcpy_chk@plt+0x1b88>
   13180:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13184:	eor	r0, r1, #2
   13188:	orr	r0, r0, r8
   1318c:	clz	r0, r0
   13190:	lsr	r0, r0, #5
   13194:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13198:	tst	r3, r0
   1319c:	bne	13268 <__mempcpy_chk@plt+0x2188>
   131a0:	mov	r6, r5
   131a4:	subs	r0, r1, #2
   131a8:	movwne	r0, #1
   131ac:	orr	r0, r3, r0
   131b0:	tst	r0, #1
   131b4:	ldr	r2, [sp, #92]	; 0x5c
   131b8:	ldreq	r0, [sp, #64]	; 0x40
   131bc:	eoreq	r0, r0, #1
   131c0:	tsteq	r0, #1
   131c4:	bne	13204 <__mempcpy_chk@plt+0x2124>
   131c8:	mov	r9, lr
   131cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131d0:	tst	r0, #1
   131d4:	bne	132d0 <__mempcpy_chk@plt+0x21f0>
   131d8:	ldr	r0, [sp, #84]	; 0x54
   131dc:	cmp	r0, #0
   131e0:	beq	13204 <__mempcpy_chk@plt+0x2124>
   131e4:	mov	r0, #0
   131e8:	str	r0, [fp, #-48]	; 0xffffffd0
   131ec:	mov	r1, #2
   131f0:	cmp	sl, #0
   131f4:	mov	r0, r2
   131f8:	mov	r4, r3
   131fc:	ldr	r7, [sp, #84]	; 0x54
   13200:	beq	123dc <__mempcpy_chk@plt+0x12fc>
   13204:	ldr	r1, [fp, #-84]	; 0xffffffac
   13208:	clz	r0, r1
   1320c:	lsr	r0, r0, #5
   13210:	orr	r0, r0, r3
   13214:	tst	r0, #1
   13218:	bne	13244 <__mempcpy_chk@plt+0x2164>
   1321c:	ldrb	r0, [r1]
   13220:	cmp	r0, #0
   13224:	beq	13244 <__mempcpy_chk@plt+0x2164>
   13228:	add	r1, r1, #1
   1322c:	cmp	r8, sl
   13230:	strbcc	r0, [r6, r8]
   13234:	add	r8, r8, #1
   13238:	ldrb	r0, [r1], #1
   1323c:	cmp	r0, #0
   13240:	bne	1322c <__mempcpy_chk@plt+0x214c>
   13244:	cmp	r8, sl
   13248:	movcc	r0, #0
   1324c:	strbcc	r0, [r6, r8]
   13250:	b	132c4 <__mempcpy_chk@plt+0x21e4>
   13254:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13258:	mov	lr, r4
   1325c:	b	13268 <__mempcpy_chk@plt+0x2188>
   13260:	ldr	r5, [sp, #28]
   13264:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13268:	mov	r0, #0
   1326c:	ldr	r1, [fp, #12]
   13270:	bic	r1, r1, #2
   13274:	mov	r2, #2
   13278:	ldr	r3, [sp, #92]	; 0x5c
   1327c:	tst	r3, #1
   13280:	movwne	r2, #4
   13284:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13288:	cmp	r3, #2
   1328c:	movne	r2, r3
   13290:	str	r2, [sp]
   13294:	str	r1, [sp, #4]
   13298:	str	r0, [sp, #8]
   1329c:	ldr	r0, [sp, #80]	; 0x50
   132a0:	str	r0, [sp, #12]
   132a4:	ldr	r0, [sp, #88]	; 0x58
   132a8:	str	r0, [sp, #16]
   132ac:	mov	r0, r5
   132b0:	mov	r1, sl
   132b4:	mov	r2, ip
   132b8:	mov	r3, lr
   132bc:	bl	12350 <__mempcpy_chk@plt+0x1270>
   132c0:	mov	r8, r0
   132c4:	mov	r0, r8
   132c8:	sub	sp, fp, #28
   132cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d0:	mov	r0, #5
   132d4:	str	r0, [sp]
   132d8:	ldr	r0, [fp, #12]
   132dc:	str	r0, [sp, #4]
   132e0:	ldr	r0, [fp, #16]
   132e4:	str	r0, [sp, #8]
   132e8:	ldr	r0, [sp, #80]	; 0x50
   132ec:	str	r0, [sp, #12]
   132f0:	ldr	r0, [sp, #88]	; 0x58
   132f4:	str	r0, [sp, #16]
   132f8:	mov	r0, r6
   132fc:	ldr	r1, [sp, #84]	; 0x54
   13300:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13304:	mov	r3, r9
   13308:	b	132bc <__mempcpy_chk@plt+0x21dc>
   1330c:	bl	110b0 <abort@plt>
   13310:	mov	r3, r2
   13314:	mov	r2, #0
   13318:	b	1331c <__mempcpy_chk@plt+0x223c>
   1331c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13320:	add	fp, sp, #28
   13324:	sub	sp, sp, #36	; 0x24
   13328:	mov	r4, r2
   1332c:	str	r2, [sp, #24]
   13330:	mov	r5, r1
   13334:	mov	r6, r0
   13338:	str	r0, [sp, #20]
   1333c:	movw	r8, #29032	; 0x7168
   13340:	movt	r8, #2
   13344:	cmp	r3, #0
   13348:	movne	r8, r3
   1334c:	bl	10ff0 <__errno_location@plt>
   13350:	str	r0, [sp, #28]
   13354:	ldm	r8, {r3, r9}
   13358:	ldr	r1, [r8, #40]	; 0x28
   1335c:	ldr	r2, [r8, #44]	; 0x2c
   13360:	ldr	r7, [r0]
   13364:	str	r7, [sp, #32]
   13368:	add	sl, r8, #8
   1336c:	cmp	r4, #0
   13370:	orreq	r9, r9, #1
   13374:	stm	sp, {r3, r9, sl}
   13378:	str	r1, [sp, #12]
   1337c:	str	r2, [sp, #16]
   13380:	mov	r0, #0
   13384:	mov	r1, #0
   13388:	mov	r2, r6
   1338c:	mov	r3, r5
   13390:	mov	r7, r5
   13394:	bl	12350 <__mempcpy_chk@plt+0x1270>
   13398:	mov	r5, r0
   1339c:	add	r4, r0, #1
   133a0:	mov	r0, r4
   133a4:	bl	14554 <__mempcpy_chk@plt+0x3474>
   133a8:	mov	r6, r0
   133ac:	ldr	r0, [r8]
   133b0:	ldr	r1, [r8, #40]	; 0x28
   133b4:	ldr	r2, [r8, #44]	; 0x2c
   133b8:	stm	sp, {r0, r9, sl}
   133bc:	str	r1, [sp, #12]
   133c0:	str	r2, [sp, #16]
   133c4:	mov	r0, r6
   133c8:	mov	r1, r4
   133cc:	ldr	r2, [sp, #20]
   133d0:	mov	r3, r7
   133d4:	bl	12350 <__mempcpy_chk@plt+0x1270>
   133d8:	ldr	r0, [sp, #24]
   133dc:	ldr	r1, [sp, #32]
   133e0:	ldr	r2, [sp, #28]
   133e4:	str	r1, [r2]
   133e8:	cmp	r0, #0
   133ec:	strne	r5, [r0]
   133f0:	mov	r0, r6
   133f4:	sub	sp, fp, #28
   133f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13400:	add	fp, sp, #24
   13404:	movw	r8, #28920	; 0x70f8
   13408:	movt	r8, #2
   1340c:	ldr	r4, [r8]
   13410:	movw	r5, #28924	; 0x70fc
   13414:	movt	r5, #2
   13418:	ldr	r0, [r5]
   1341c:	cmp	r0, #2
   13420:	blt	1344c <__mempcpy_chk@plt+0x236c>
   13424:	add	r7, r4, #12
   13428:	mov	r6, #0
   1342c:	ldr	r0, [r7, r6, lsl #3]
   13430:	bl	12044 <__mempcpy_chk@plt+0xf64>
   13434:	add	r0, r6, #1
   13438:	ldr	r1, [r5]
   1343c:	add	r2, r6, #2
   13440:	cmp	r2, r1
   13444:	mov	r6, r0
   13448:	blt	1342c <__mempcpy_chk@plt+0x234c>
   1344c:	ldr	r0, [r4, #4]
   13450:	movw	r9, #29080	; 0x7198
   13454:	movt	r9, #2
   13458:	cmp	r0, r9
   1345c:	movw	r7, #28928	; 0x7100
   13460:	movt	r7, #2
   13464:	beq	13474 <__mempcpy_chk@plt+0x2394>
   13468:	bl	12044 <__mempcpy_chk@plt+0xf64>
   1346c:	mov	r0, #256	; 0x100
   13470:	stm	r7, {r0, r9}
   13474:	cmp	r4, r7
   13478:	beq	13488 <__mempcpy_chk@plt+0x23a8>
   1347c:	mov	r0, r4
   13480:	bl	12044 <__mempcpy_chk@plt+0xf64>
   13484:	str	r7, [r8]
   13488:	mov	r0, #1
   1348c:	str	r0, [r5]
   13490:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13494:	movw	r3, #29032	; 0x7168
   13498:	movt	r3, #2
   1349c:	mvn	r2, #0
   134a0:	b	134a4 <__mempcpy_chk@plt+0x23c4>
   134a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134a8:	add	fp, sp, #28
   134ac:	sub	sp, sp, #44	; 0x2c
   134b0:	mov	r7, r3
   134b4:	str	r2, [sp, #36]	; 0x24
   134b8:	str	r1, [sp, #32]
   134bc:	mov	r5, r0
   134c0:	bl	10ff0 <__errno_location@plt>
   134c4:	cmp	r5, #0
   134c8:	bmi	13638 <__mempcpy_chk@plt+0x2558>
   134cc:	cmn	r5, #-2147483647	; 0x80000001
   134d0:	beq	13638 <__mempcpy_chk@plt+0x2558>
   134d4:	movw	r4, #28920	; 0x70f8
   134d8:	movt	r4, #2
   134dc:	ldr	r6, [r4]
   134e0:	str	r0, [sp, #28]
   134e4:	ldr	r0, [r0]
   134e8:	str	r0, [sp, #24]
   134ec:	movw	r8, #28924	; 0x70fc
   134f0:	movt	r8, #2
   134f4:	ldr	r1, [r8]
   134f8:	cmp	r1, r5
   134fc:	ble	13508 <__mempcpy_chk@plt+0x2428>
   13500:	mov	sl, r6
   13504:	b	13574 <__mempcpy_chk@plt+0x2494>
   13508:	str	r1, [fp, #-32]	; 0xffffffe0
   1350c:	mov	r0, #8
   13510:	str	r0, [sp]
   13514:	movw	r9, #28928	; 0x7100
   13518:	movt	r9, #2
   1351c:	subs	r0, r6, r9
   13520:	movne	r0, r6
   13524:	sub	r1, r5, r1
   13528:	add	r2, r1, #1
   1352c:	sub	r1, fp, #32
   13530:	mvn	r3, #-2147483648	; 0x80000000
   13534:	bl	14630 <__mempcpy_chk@plt+0x3550>
   13538:	mov	sl, r0
   1353c:	str	r0, [r4]
   13540:	cmp	r6, r9
   13544:	bne	13550 <__mempcpy_chk@plt+0x2470>
   13548:	ldrd	r0, [r9]
   1354c:	stm	sl, {r0, r1}
   13550:	ldr	r1, [r8]
   13554:	add	r0, sl, r1, lsl #3
   13558:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1355c:	sub	r1, r2, r1
   13560:	lsl	r2, r1, #3
   13564:	mov	r1, #0
   13568:	bl	11014 <memset@plt>
   1356c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13570:	str	r0, [r8]
   13574:	mov	r9, sl
   13578:	ldr	r6, [r9, r5, lsl #3]!
   1357c:	ldr	r4, [r9, #4]!
   13580:	ldm	r7, {r0, r1}
   13584:	ldr	r2, [r7, #40]	; 0x28
   13588:	ldr	r3, [r7, #44]	; 0x2c
   1358c:	orr	r8, r1, #1
   13590:	add	r1, r7, #8
   13594:	stm	sp, {r0, r8}
   13598:	str	r1, [sp, #20]
   1359c:	add	r0, sp, #8
   135a0:	stm	r0, {r1, r2, r3}
   135a4:	mov	r0, r4
   135a8:	mov	r1, r6
   135ac:	ldr	r2, [sp, #32]
   135b0:	ldr	r3, [sp, #36]	; 0x24
   135b4:	bl	12350 <__mempcpy_chk@plt+0x1270>
   135b8:	cmp	r6, r0
   135bc:	bhi	13620 <__mempcpy_chk@plt+0x2540>
   135c0:	add	r6, r0, #1
   135c4:	str	r6, [sl, r5, lsl #3]
   135c8:	movw	r0, #29080	; 0x7198
   135cc:	movt	r0, #2
   135d0:	cmp	r4, r0
   135d4:	beq	135e0 <__mempcpy_chk@plt+0x2500>
   135d8:	mov	r0, r4
   135dc:	bl	12044 <__mempcpy_chk@plt+0xf64>
   135e0:	mov	r0, r6
   135e4:	bl	14554 <__mempcpy_chk@plt+0x3474>
   135e8:	mov	r4, r0
   135ec:	str	r0, [r9]
   135f0:	ldr	r0, [r7]
   135f4:	ldr	r1, [r7, #40]	; 0x28
   135f8:	ldr	r2, [r7, #44]	; 0x2c
   135fc:	stm	sp, {r0, r8}
   13600:	ldr	r0, [sp, #20]
   13604:	add	r3, sp, #8
   13608:	stm	r3, {r0, r1, r2}
   1360c:	mov	r0, r4
   13610:	mov	r1, r6
   13614:	ldr	r2, [sp, #32]
   13618:	ldr	r3, [sp, #36]	; 0x24
   1361c:	bl	12350 <__mempcpy_chk@plt+0x1270>
   13620:	ldr	r0, [sp, #28]
   13624:	ldr	r1, [sp, #24]
   13628:	str	r1, [r0]
   1362c:	mov	r0, r4
   13630:	sub	sp, fp, #28
   13634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13638:	bl	110b0 <abort@plt>
   1363c:	movw	r3, #29032	; 0x7168
   13640:	movt	r3, #2
   13644:	b	134a4 <__mempcpy_chk@plt+0x23c4>
   13648:	mov	r1, r0
   1364c:	mov	r0, #0
   13650:	b	13494 <__mempcpy_chk@plt+0x23b4>
   13654:	mov	r2, r1
   13658:	mov	r1, r0
   1365c:	mov	r0, #0
   13660:	b	1363c <__mempcpy_chk@plt+0x255c>
   13664:	push	{r4, r5, r6, sl, fp, lr}
   13668:	add	fp, sp, #16
   1366c:	sub	sp, sp, #48	; 0x30
   13670:	mov	r4, r2
   13674:	mov	r5, r0
   13678:	mov	r6, sp
   1367c:	mov	r0, r6
   13680:	bl	136a0 <__mempcpy_chk@plt+0x25c0>
   13684:	mov	r0, r5
   13688:	mov	r1, r4
   1368c:	mvn	r2, #0
   13690:	mov	r3, r6
   13694:	bl	134a4 <__mempcpy_chk@plt+0x23c4>
   13698:	sub	sp, fp, #16
   1369c:	pop	{r4, r5, r6, sl, fp, pc}
   136a0:	push	{fp, lr}
   136a4:	mov	fp, sp
   136a8:	vmov.i32	q8, #0	; 0x00000000
   136ac:	mov	r2, #32
   136b0:	mov	r3, r0
   136b4:	vst1.32	{d16-d17}, [r3], r2
   136b8:	vst1.32	{d16-d17}, [r3]
   136bc:	add	r2, r0, #16
   136c0:	vst1.32	{d16-d17}, [r2]
   136c4:	cmp	r1, #10
   136c8:	strne	r1, [r0]
   136cc:	popne	{fp, pc}
   136d0:	bl	110b0 <abort@plt>
   136d4:	push	{r4, r5, r6, r7, fp, lr}
   136d8:	add	fp, sp, #16
   136dc:	sub	sp, sp, #48	; 0x30
   136e0:	mov	r4, r3
   136e4:	mov	r5, r2
   136e8:	mov	r6, r0
   136ec:	mov	r7, sp
   136f0:	mov	r0, r7
   136f4:	bl	136a0 <__mempcpy_chk@plt+0x25c0>
   136f8:	mov	r0, r6
   136fc:	mov	r1, r5
   13700:	mov	r2, r4
   13704:	mov	r3, r7
   13708:	bl	134a4 <__mempcpy_chk@plt+0x23c4>
   1370c:	sub	sp, fp, #16
   13710:	pop	{r4, r5, r6, r7, fp, pc}
   13714:	mov	r2, r1
   13718:	mov	r1, r0
   1371c:	mov	r0, #0
   13720:	b	13664 <__mempcpy_chk@plt+0x2584>
   13724:	mov	r3, r2
   13728:	mov	r2, r1
   1372c:	mov	r1, r0
   13730:	mov	r0, #0
   13734:	b	136d4 <__mempcpy_chk@plt+0x25f4>
   13738:	push	{r4, r5, r6, sl, fp, lr}
   1373c:	add	fp, sp, #16
   13740:	sub	sp, sp, #48	; 0x30
   13744:	mov	r4, r1
   13748:	mov	r5, r0
   1374c:	movw	r0, #29032	; 0x7168
   13750:	movt	r0, #2
   13754:	add	r1, r0, #16
   13758:	mov	r3, #32
   1375c:	vld1.64	{d16-d17}, [r0], r3
   13760:	vld1.64	{d18-d19}, [r1]
   13764:	mov	r6, sp
   13768:	add	r1, r6, #16
   1376c:	vld1.64	{d20-d21}, [r0]
   13770:	vst1.64	{d18-d19}, [r1]
   13774:	mov	r0, r6
   13778:	vst1.64	{d16-d17}, [r0], r3
   1377c:	vst1.64	{d20-d21}, [r0]
   13780:	mov	r0, r6
   13784:	mov	r1, r2
   13788:	mov	r2, #1
   1378c:	bl	12244 <__mempcpy_chk@plt+0x1164>
   13790:	mov	r0, #0
   13794:	mov	r1, r5
   13798:	mov	r2, r4
   1379c:	mov	r3, r6
   137a0:	bl	134a4 <__mempcpy_chk@plt+0x23c4>
   137a4:	sub	sp, fp, #16
   137a8:	pop	{r4, r5, r6, sl, fp, pc}
   137ac:	mov	r2, r1
   137b0:	mvn	r1, #0
   137b4:	b	13738 <__mempcpy_chk@plt+0x2658>
   137b8:	mov	r1, #58	; 0x3a
   137bc:	b	137ac <__mempcpy_chk@plt+0x26cc>
   137c0:	mov	r2, #58	; 0x3a
   137c4:	b	13738 <__mempcpy_chk@plt+0x2658>
   137c8:	push	{r4, r5, r6, sl, fp, lr}
   137cc:	add	fp, sp, #16
   137d0:	sub	sp, sp, #48	; 0x30
   137d4:	mov	r4, r2
   137d8:	mov	r5, r0
   137dc:	mov	r6, sp
   137e0:	mov	r0, r6
   137e4:	bl	136a0 <__mempcpy_chk@plt+0x25c0>
   137e8:	mov	r0, r6
   137ec:	mov	r1, #58	; 0x3a
   137f0:	mov	r2, #1
   137f4:	bl	12244 <__mempcpy_chk@plt+0x1164>
   137f8:	mov	r0, r5
   137fc:	mov	r1, r4
   13800:	mvn	r2, #0
   13804:	mov	r3, r6
   13808:	bl	134a4 <__mempcpy_chk@plt+0x23c4>
   1380c:	sub	sp, fp, #16
   13810:	pop	{r4, r5, r6, sl, fp, pc}
   13814:	push	{fp, lr}
   13818:	mov	fp, sp
   1381c:	sub	sp, sp, #8
   13820:	mvn	ip, #0
   13824:	str	ip, [sp]
   13828:	bl	13834 <__mempcpy_chk@plt+0x2754>
   1382c:	mov	sp, fp
   13830:	pop	{fp, pc}
   13834:	push	{r4, r5, r6, r7, fp, lr}
   13838:	add	fp, sp, #16
   1383c:	sub	sp, sp, #48	; 0x30
   13840:	mov	r7, r3
   13844:	mov	r5, r0
   13848:	movw	r0, #29032	; 0x7168
   1384c:	movt	r0, #2
   13850:	add	r3, r0, #16
   13854:	mov	r4, #32
   13858:	vld1.64	{d16-d17}, [r0], r4
   1385c:	vld1.64	{d18-d19}, [r3]
   13860:	mov	r6, sp
   13864:	add	r3, r6, #16
   13868:	vld1.64	{d20-d21}, [r0]
   1386c:	vst1.64	{d18-d19}, [r3]
   13870:	mov	r0, r6
   13874:	vst1.64	{d16-d17}, [r0], r4
   13878:	vst1.64	{d20-d21}, [r0]
   1387c:	mov	r0, r6
   13880:	bl	1229c <__mempcpy_chk@plt+0x11bc>
   13884:	ldr	r2, [fp, #8]
   13888:	mov	r0, r5
   1388c:	mov	r1, r7
   13890:	mov	r3, r6
   13894:	bl	134a4 <__mempcpy_chk@plt+0x23c4>
   13898:	sub	sp, fp, #16
   1389c:	pop	{r4, r5, r6, r7, fp, pc}
   138a0:	mov	r3, r2
   138a4:	mov	r2, r1
   138a8:	mov	r1, r0
   138ac:	mov	r0, #0
   138b0:	b	13814 <__mempcpy_chk@plt+0x2734>
   138b4:	push	{fp, lr}
   138b8:	mov	fp, sp
   138bc:	sub	sp, sp, #8
   138c0:	mov	ip, r2
   138c4:	mov	r2, r1
   138c8:	mov	r1, r0
   138cc:	str	r3, [sp]
   138d0:	mov	r0, #0
   138d4:	mov	r3, ip
   138d8:	bl	13834 <__mempcpy_chk@plt+0x2754>
   138dc:	mov	sp, fp
   138e0:	pop	{fp, pc}
   138e4:	movw	r3, #28936	; 0x7108
   138e8:	movt	r3, #2
   138ec:	b	134a4 <__mempcpy_chk@plt+0x23c4>
   138f0:	mov	r2, r1
   138f4:	mov	r1, r0
   138f8:	mov	r0, #0
   138fc:	b	138e4 <__mempcpy_chk@plt+0x2804>
   13900:	mvn	r2, #0
   13904:	b	138e4 <__mempcpy_chk@plt+0x2804>
   13908:	mov	r1, r0
   1390c:	mov	r0, #0
   13910:	b	13900 <__mempcpy_chk@plt+0x2820>
   13914:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13918:	add	fp, sp, #24
   1391c:	sub	sp, sp, #16
   13920:	mov	r4, r1
   13924:	mov	r5, r0
   13928:	mov	r7, #0
   1392c:	mov	r0, #0
   13930:	mov	r1, r5
   13934:	mov	r2, #5
   13938:	bl	10edc <dcgettext@plt>
   1393c:	cmp	r0, r5
   13940:	beq	1394c <__mempcpy_chk@plt+0x286c>
   13944:	sub	sp, fp, #24
   13948:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1394c:	bl	14d30 <__mempcpy_chk@plt+0x3c50>
   13950:	mov	r6, r0
   13954:	mov	r8, #56	; 0x38
   13958:	mov	r0, #45	; 0x2d
   1395c:	stm	sp, {r0, r8}
   13960:	str	r7, [sp, #8]
   13964:	str	r7, [sp, #12]
   13968:	mov	r0, r6
   1396c:	mov	r1, #85	; 0x55
   13970:	mov	r2, #84	; 0x54
   13974:	mov	r3, #70	; 0x46
   13978:	bl	13a10 <__mempcpy_chk@plt+0x2930>
   1397c:	cmp	r0, #0
   13980:	beq	1399c <__mempcpy_chk@plt+0x28bc>
   13984:	ldrb	r1, [r5]
   13988:	movw	r2, #23342	; 0x5b2e
   1398c:	movt	r2, #1
   13990:	movw	r0, #23346	; 0x5b32
   13994:	movt	r0, #1
   13998:	b	139e0 <__mempcpy_chk@plt+0x2900>
   1399c:	mov	r0, #48	; 0x30
   139a0:	mov	r1, #51	; 0x33
   139a4:	str	r8, [sp]
   139a8:	stmib	sp, {r0, r1}
   139ac:	str	r0, [sp, #12]
   139b0:	mov	r0, r6
   139b4:	mov	r1, #71	; 0x47
   139b8:	mov	r2, #66	; 0x42
   139bc:	mov	r3, #49	; 0x31
   139c0:	bl	13a10 <__mempcpy_chk@plt+0x2930>
   139c4:	cmp	r0, #0
   139c8:	beq	139f0 <__mempcpy_chk@plt+0x2910>
   139cc:	ldrb	r1, [r5]
   139d0:	movw	r2, #23350	; 0x5b36
   139d4:	movt	r2, #1
   139d8:	movw	r0, #23354	; 0x5b3a
   139dc:	movt	r0, #1
   139e0:	cmp	r1, #96	; 0x60
   139e4:	moveq	r0, r2
   139e8:	sub	sp, fp, #24
   139ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139f0:	movw	r1, #23336	; 0x5b28
   139f4:	movt	r1, #1
   139f8:	movw	r0, #23340	; 0x5b2c
   139fc:	movt	r0, #1
   13a00:	cmp	r4, #9
   13a04:	moveq	r0, r1
   13a08:	sub	sp, fp, #24
   13a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a10:	push	{r4, r5, r6, r7, fp, lr}
   13a14:	add	fp, sp, #16
   13a18:	sub	sp, sp, #16
   13a1c:	mov	r4, r3
   13a20:	mov	r5, r2
   13a24:	mov	r7, r1
   13a28:	mov	r6, r0
   13a2c:	mov	r0, r1
   13a30:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13a34:	ldrb	r1, [r6]
   13a38:	cmp	r0, #0
   13a3c:	andne	r1, r1, #223	; 0xdf
   13a40:	mov	r0, #0
   13a44:	cmp	r1, r7
   13a48:	bne	13a80 <__mempcpy_chk@plt+0x29a0>
   13a4c:	cmp	r7, #0
   13a50:	beq	13a88 <__mempcpy_chk@plt+0x29a8>
   13a54:	ldr	r0, [fp, #20]
   13a58:	ldr	r1, [fp, #16]
   13a5c:	ldr	r2, [fp, #12]
   13a60:	ldr	r3, [fp, #8]
   13a64:	str	r2, [sp]
   13a68:	str	r1, [sp, #4]
   13a6c:	str	r0, [sp, #8]
   13a70:	mov	r0, r6
   13a74:	mov	r1, r5
   13a78:	mov	r2, r4
   13a7c:	bl	13a94 <__mempcpy_chk@plt+0x29b4>
   13a80:	sub	sp, fp, #16
   13a84:	pop	{r4, r5, r6, r7, fp, pc}
   13a88:	mov	r0, #1
   13a8c:	sub	sp, fp, #16
   13a90:	pop	{r4, r5, r6, r7, fp, pc}
   13a94:	push	{r4, r5, r6, r7, fp, lr}
   13a98:	add	fp, sp, #16
   13a9c:	sub	sp, sp, #8
   13aa0:	mov	r4, r3
   13aa4:	mov	r5, r2
   13aa8:	mov	r7, r1
   13aac:	mov	r6, r0
   13ab0:	mov	r0, r1
   13ab4:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13ab8:	ldrb	r1, [r6, #1]
   13abc:	cmp	r0, #0
   13ac0:	andne	r1, r1, #223	; 0xdf
   13ac4:	mov	r0, #0
   13ac8:	cmp	r1, r7
   13acc:	bne	13afc <__mempcpy_chk@plt+0x2a1c>
   13ad0:	cmp	r7, #0
   13ad4:	beq	13b04 <__mempcpy_chk@plt+0x2a24>
   13ad8:	ldr	r0, [fp, #16]
   13adc:	ldr	r1, [fp, #12]
   13ae0:	ldr	r3, [fp, #8]
   13ae4:	str	r1, [sp]
   13ae8:	str	r0, [sp, #4]
   13aec:	mov	r0, r6
   13af0:	mov	r1, r5
   13af4:	mov	r2, r4
   13af8:	bl	13b10 <__mempcpy_chk@plt+0x2a30>
   13afc:	sub	sp, fp, #16
   13b00:	pop	{r4, r5, r6, r7, fp, pc}
   13b04:	mov	r0, #1
   13b08:	sub	sp, fp, #16
   13b0c:	pop	{r4, r5, r6, r7, fp, pc}
   13b10:	push	{r4, r5, r6, r7, fp, lr}
   13b14:	add	fp, sp, #16
   13b18:	sub	sp, sp, #8
   13b1c:	mov	r4, r3
   13b20:	mov	r5, r2
   13b24:	mov	r7, r1
   13b28:	mov	r6, r0
   13b2c:	mov	r0, r1
   13b30:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13b34:	ldrb	r1, [r6, #2]
   13b38:	cmp	r0, #0
   13b3c:	andne	r1, r1, #223	; 0xdf
   13b40:	mov	r0, #0
   13b44:	cmp	r1, r7
   13b48:	bne	13b70 <__mempcpy_chk@plt+0x2a90>
   13b4c:	cmp	r7, #0
   13b50:	beq	13b78 <__mempcpy_chk@plt+0x2a98>
   13b54:	ldr	r0, [fp, #12]
   13b58:	ldr	r3, [fp, #8]
   13b5c:	str	r0, [sp]
   13b60:	mov	r0, r6
   13b64:	mov	r1, r5
   13b68:	mov	r2, r4
   13b6c:	bl	13b84 <__mempcpy_chk@plt+0x2aa4>
   13b70:	sub	sp, fp, #16
   13b74:	pop	{r4, r5, r6, r7, fp, pc}
   13b78:	mov	r0, #1
   13b7c:	sub	sp, fp, #16
   13b80:	pop	{r4, r5, r6, r7, fp, pc}
   13b84:	push	{r4, r5, r6, r7, fp, lr}
   13b88:	add	fp, sp, #16
   13b8c:	mov	r4, r3
   13b90:	mov	r5, r2
   13b94:	mov	r7, r1
   13b98:	mov	r6, r0
   13b9c:	mov	r0, r1
   13ba0:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13ba4:	ldrb	r1, [r6, #3]
   13ba8:	ldr	r3, [fp, #8]
   13bac:	cmp	r0, #0
   13bb0:	andne	r1, r1, #223	; 0xdf
   13bb4:	mov	r0, #0
   13bb8:	cmp	r1, r7
   13bbc:	bne	13be0 <__mempcpy_chk@plt+0x2b00>
   13bc0:	cmp	r7, #0
   13bc4:	beq	13bdc <__mempcpy_chk@plt+0x2afc>
   13bc8:	mov	r0, r6
   13bcc:	mov	r1, r5
   13bd0:	mov	r2, r4
   13bd4:	pop	{r4, r5, r6, r7, fp, lr}
   13bd8:	b	13be4 <__mempcpy_chk@plt+0x2b04>
   13bdc:	mov	r0, #1
   13be0:	pop	{r4, r5, r6, r7, fp, pc}
   13be4:	push	{r4, r5, r6, r7, fp, lr}
   13be8:	add	fp, sp, #16
   13bec:	mov	r4, r3
   13bf0:	mov	r5, r2
   13bf4:	mov	r7, r1
   13bf8:	mov	r6, r0
   13bfc:	mov	r0, r1
   13c00:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13c04:	ldrb	r1, [r6, #4]
   13c08:	cmp	r0, #0
   13c0c:	andne	r1, r1, #223	; 0xdf
   13c10:	mov	r0, #0
   13c14:	cmp	r1, r7
   13c18:	bne	13c3c <__mempcpy_chk@plt+0x2b5c>
   13c1c:	cmp	r7, #0
   13c20:	beq	13c38 <__mempcpy_chk@plt+0x2b58>
   13c24:	mov	r0, r6
   13c28:	mov	r1, r5
   13c2c:	mov	r2, r4
   13c30:	pop	{r4, r5, r6, r7, fp, lr}
   13c34:	b	13c40 <__mempcpy_chk@plt+0x2b60>
   13c38:	mov	r0, #1
   13c3c:	pop	{r4, r5, r6, r7, fp, pc}
   13c40:	push	{r4, r5, r6, sl, fp, lr}
   13c44:	add	fp, sp, #16
   13c48:	mov	r4, r2
   13c4c:	mov	r6, r1
   13c50:	mov	r5, r0
   13c54:	mov	r0, r1
   13c58:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13c5c:	ldrb	r1, [r5, #5]
   13c60:	cmp	r0, #0
   13c64:	andne	r1, r1, #223	; 0xdf
   13c68:	mov	r0, #0
   13c6c:	cmp	r1, r6
   13c70:	bne	13c90 <__mempcpy_chk@plt+0x2bb0>
   13c74:	cmp	r6, #0
   13c78:	beq	13c8c <__mempcpy_chk@plt+0x2bac>
   13c7c:	mov	r0, r5
   13c80:	mov	r1, r4
   13c84:	pop	{r4, r5, r6, sl, fp, lr}
   13c88:	b	13c94 <__mempcpy_chk@plt+0x2bb4>
   13c8c:	mov	r0, #1
   13c90:	pop	{r4, r5, r6, sl, fp, pc}
   13c94:	push	{r4, r5, fp, lr}
   13c98:	add	fp, sp, #8
   13c9c:	mov	r5, r1
   13ca0:	mov	r4, r0
   13ca4:	mov	r0, r1
   13ca8:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13cac:	ldrb	r1, [r4, #6]
   13cb0:	cmp	r0, #0
   13cb4:	andne	r1, r1, #223	; 0xdf
   13cb8:	mov	r0, #0
   13cbc:	cmp	r1, r5
   13cc0:	popne	{r4, r5, fp, pc}
   13cc4:	cmp	r5, #0
   13cc8:	beq	13cd8 <__mempcpy_chk@plt+0x2bf8>
   13ccc:	mov	r0, r4
   13cd0:	pop	{r4, r5, fp, lr}
   13cd4:	b	13ce0 <__mempcpy_chk@plt+0x2c00>
   13cd8:	mov	r0, #1
   13cdc:	pop	{r4, r5, fp, pc}
   13ce0:	push	{r4, sl, fp, lr}
   13ce4:	add	fp, sp, #8
   13ce8:	mov	r4, r0
   13cec:	mov	r0, #0
   13cf0:	bl	14c70 <__mempcpy_chk@plt+0x3b90>
   13cf4:	ldrb	r1, [r4, #7]
   13cf8:	cmp	r0, #0
   13cfc:	beq	13d10 <__mempcpy_chk@plt+0x2c30>
   13d00:	tst	r1, #223	; 0xdf
   13d04:	bne	13d18 <__mempcpy_chk@plt+0x2c38>
   13d08:	mov	r0, #1
   13d0c:	pop	{r4, sl, fp, pc}
   13d10:	cmp	r1, #0
   13d14:	beq	13d08 <__mempcpy_chk@plt+0x2c28>
   13d18:	mov	r0, #0
   13d1c:	pop	{r4, sl, fp, pc}
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	sub	sp, sp, #8
   13d2c:	str	r2, [sp, #4]
   13d30:	ldr	r2, [fp, #8]
   13d34:	str	r2, [sp]
   13d38:	movw	r2, #23444	; 0x5b94
   13d3c:	movt	r2, #1
   13d40:	ldr	r3, [r2, r3, lsl #2]
   13d44:	add	r2, sp, #4
   13d48:	bl	13dc0 <__mempcpy_chk@plt+0x2ce0>
   13d4c:	mov	sp, fp
   13d50:	pop	{fp, pc}
   13d54:	ldr	r1, [r1]
   13d58:	orr	r1, r1, #194	; 0xc2
   13d5c:	bic	r1, r1, #1
   13d60:	mov	r2, #384	; 0x180
   13d64:	b	10f60 <open64@plt>
   13d68:	mov	r1, #448	; 0x1c0
   13d6c:	b	11008 <mkdir@plt>
   13d70:	push	{fp, lr}
   13d74:	mov	fp, sp
   13d78:	sub	sp, sp, #104	; 0x68
   13d7c:	mov	r1, sp
   13d80:	bl	15108 <__mempcpy_chk@plt+0x4028>
   13d84:	cmp	r0, #0
   13d88:	beq	13d9c <__mempcpy_chk@plt+0x2cbc>
   13d8c:	bl	10ff0 <__errno_location@plt>
   13d90:	ldr	r0, [r0]
   13d94:	cmp	r0, #75	; 0x4b
   13d98:	bne	13da8 <__mempcpy_chk@plt+0x2cc8>
   13d9c:	bl	10ff0 <__errno_location@plt>
   13da0:	mov	r1, #17
   13da4:	str	r1, [r0]
   13da8:	bl	10ff0 <__errno_location@plt>
   13dac:	ldr	r0, [r0]
   13db0:	subs	r0, r0, #2
   13db4:	mvnne	r0, #0
   13db8:	mov	sp, fp
   13dbc:	pop	{fp, pc}
   13dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dc4:	add	fp, sp, #28
   13dc8:	sub	sp, sp, #36	; 0x24
   13dcc:	str	r3, [sp, #12]
   13dd0:	mov	sl, r2
   13dd4:	mov	r5, r1
   13dd8:	mov	r7, r0
   13ddc:	bl	10ff0 <__errno_location@plt>
   13de0:	str	r0, [sp, #16]
   13de4:	ldr	r9, [r0]
   13de8:	mov	r0, #0
   13dec:	str	r0, [sp, #28]
   13df0:	add	r0, sp, #24
   13df4:	lsr	r0, r0, #3
   13df8:	str	r0, [sp, #24]
   13dfc:	ldr	r8, [fp, #8]
   13e00:	add	r6, r8, r5
   13e04:	mov	r0, r7
   13e08:	bl	10fe4 <strlen@plt>
   13e0c:	mvn	r5, #0
   13e10:	mov	r4, #22
   13e14:	cmp	r0, r6
   13e18:	bcc	13f64 <__mempcpy_chk@plt+0x2e84>
   13e1c:	sub	r0, r0, r6
   13e20:	add	r6, r7, r0
   13e24:	movw	r1, #22312	; 0x5728
   13e28:	movt	r1, #1
   13e2c:	mov	r0, r6
   13e30:	bl	110d4 <strspn@plt>
   13e34:	cmp	r0, r8
   13e38:	bcc	13f64 <__mempcpy_chk@plt+0x2e84>
   13e3c:	mov	r1, r8
   13e40:	str	r9, [sp]
   13e44:	stmib	sp, {r7, sl}
   13e48:	movw	r0, #15728	; 0x3d70
   13e4c:	movt	r0, #1
   13e50:	ldr	r2, [sp, #12]
   13e54:	sub	r0, r2, r0
   13e58:	clz	r0, r0
   13e5c:	lsr	r7, r0, #5
   13e60:	mov	sl, #0
   13e64:	movw	r8, #39131	; 0x98db
   13e68:	movt	r8, #62617	; 0xf499
   13e6c:	movw	r9, #21503	; 0x53ff
   13e70:	movt	r9, #2727	; 0xaa7
   13e74:	mov	r2, #0
   13e78:	cmp	r1, #0
   13e7c:	str	r2, [sp, #20]
   13e80:	beq	13f14 <__mempcpy_chk@plt+0x2e34>
   13e84:	mov	r4, #0
   13e88:	cmp	sl, #0
   13e8c:	beq	13ee4 <__mempcpy_chk@plt+0x2e04>
   13e90:	ldr	r5, [sp, #24]
   13e94:	ldr	r1, [sp, #28]
   13e98:	mov	r0, r5
   13e9c:	mov	r2, #62	; 0x3e
   13ea0:	mov	r3, #0
   13ea4:	bl	14f18 <__mempcpy_chk@plt+0x3e38>
   13ea8:	rsb	r2, r0, r0, lsl #5
   13eac:	sub	r2, r5, r2, lsl #1
   13eb0:	movw	r3, #23456	; 0x5ba0
   13eb4:	movt	r3, #1
   13eb8:	ldrb	r2, [r3, r2]
   13ebc:	strb	r2, [r6, r4]
   13ec0:	str	r1, [sp, #28]
   13ec4:	str	r0, [sp, #24]
   13ec8:	add	r4, r4, #1
   13ecc:	sub	sl, sl, #1
   13ed0:	ldr	r0, [fp, #8]
   13ed4:	cmp	r4, r0
   13ed8:	beq	13f14 <__mempcpy_chk@plt+0x2e34>
   13edc:	cmp	sl, #0
   13ee0:	bne	13e90 <__mempcpy_chk@plt+0x2db0>
   13ee4:	ldr	r0, [sp, #24]
   13ee8:	ldr	r1, [sp, #28]
   13eec:	and	r2, r7, #1
   13ef0:	bl	13f80 <__mempcpy_chk@plt+0x2ea0>
   13ef4:	str	r1, [sp, #28]
   13ef8:	str	r0, [sp, #24]
   13efc:	mov	r7, #1
   13f00:	subs	r0, r9, r0
   13f04:	sbcs	r0, r8, r1
   13f08:	bcc	13ee4 <__mempcpy_chk@plt+0x2e04>
   13f0c:	mov	sl, #10
   13f10:	b	13e90 <__mempcpy_chk@plt+0x2db0>
   13f14:	ldmib	sp, {r0, r1, r2}
   13f18:	blx	r2
   13f1c:	cmn	r0, #1
   13f20:	bgt	13f5c <__mempcpy_chk@plt+0x2e7c>
   13f24:	ldr	r0, [sp, #16]
   13f28:	ldr	r0, [r0]
   13f2c:	cmp	r0, #17
   13f30:	bne	13f78 <__mempcpy_chk@plt+0x2e98>
   13f34:	ldr	r2, [sp, #20]
   13f38:	add	r2, r2, #1
   13f3c:	movw	r0, #41720	; 0xa2f8
   13f40:	movt	r0, #3
   13f44:	cmp	r2, r0
   13f48:	ldr	r1, [fp, #8]
   13f4c:	bne	13e78 <__mempcpy_chk@plt+0x2d98>
   13f50:	mvn	r5, #0
   13f54:	mov	r4, #17
   13f58:	b	13f64 <__mempcpy_chk@plt+0x2e84>
   13f5c:	mov	r5, r0
   13f60:	ldr	r4, [sp]
   13f64:	ldr	r0, [sp, #16]
   13f68:	str	r4, [r0]
   13f6c:	mov	r0, r5
   13f70:	sub	sp, fp, #28
   13f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f78:	mvn	r5, #0
   13f7c:	b	13f6c <__mempcpy_chk@plt+0x2e8c>
   13f80:	push	{r4, r5, r6, sl, fp, lr}
   13f84:	add	fp, sp, #16
   13f88:	sub	sp, sp, #16
   13f8c:	mov	r6, r1
   13f90:	mov	r5, r0
   13f94:	cmp	r2, #0
   13f98:	beq	13fc4 <__mempcpy_chk@plt+0x2ee4>
   13f9c:	add	r0, sp, #8
   13fa0:	mov	r1, #8
   13fa4:	mov	r2, #1
   13fa8:	bl	11098 <getrandom@plt>
   13fac:	cmp	r0, #8
   13fb0:	bne	13fc4 <__mempcpy_chk@plt+0x2ee4>
   13fb4:	ldr	r0, [sp, #8]
   13fb8:	ldr	r1, [sp, #12]
   13fbc:	sub	sp, fp, #16
   13fc0:	pop	{r4, r5, r6, sl, fp, pc}
   13fc4:	mov	r1, sp
   13fc8:	mov	r0, #1
   13fcc:	bl	10eac <clock_gettime@plt>
   13fd0:	ldr	r0, [sp, #4]
   13fd4:	eor	r1, r0, r5
   13fd8:	movw	r2, #45309	; 0xb0fd
   13fdc:	movt	r2, #34736	; 0x87b0
   13fe0:	umull	r3, r5, r1, r2
   13fe4:	movw	r4, #12006	; 0x2ee6
   13fe8:	movt	r4, #10171	; 0x27bb
   13fec:	mla	r1, r1, r4, r5
   13ff0:	eor	r0, r6, r0, asr #31
   13ff4:	mul	r2, r0, r2
   13ff8:	movw	r0, #62253	; 0xf32d
   13ffc:	movt	r0, #46340	; 0xb504
   14000:	adds	r0, r3, r0
   14004:	adc	r1, r1, r2
   14008:	sub	sp, fp, #16
   1400c:	pop	{r4, r5, r6, sl, fp, pc}
   14010:	push	{fp, lr}
   14014:	mov	fp, sp
   14018:	sub	sp, sp, #8
   1401c:	mov	ip, #6
   14020:	str	ip, [sp]
   14024:	bl	13d20 <__mempcpy_chk@plt+0x2c40>
   14028:	mov	sp, fp
   1402c:	pop	{fp, pc}
   14030:	push	{fp, lr}
   14034:	mov	fp, sp
   14038:	sub	sp, sp, #8
   1403c:	mov	ip, #6
   14040:	str	ip, [sp]
   14044:	bl	13dc0 <__mempcpy_chk@plt+0x2ce0>
   14048:	mov	sp, fp
   1404c:	pop	{fp, pc}
   14050:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14054:	add	fp, sp, #24
   14058:	sub	sp, sp, #32
   1405c:	mov	r4, r2
   14060:	mov	r8, r0
   14064:	ldr	r6, [fp, #12]
   14068:	ldr	r7, [fp, #8]
   1406c:	cmp	r1, #0
   14070:	beq	14098 <__mempcpy_chk@plt+0x2fb8>
   14074:	mov	r5, r1
   14078:	str	r4, [sp]
   1407c:	str	r3, [sp, #4]
   14080:	movw	r2, #23519	; 0x5bdf
   14084:	movt	r2, #1
   14088:	mov	r0, r8
   1408c:	mov	r1, #1
   14090:	mov	r3, r5
   14094:	b	140b0 <__mempcpy_chk@plt+0x2fd0>
   14098:	str	r3, [sp]
   1409c:	movw	r2, #23531	; 0x5beb
   140a0:	movt	r2, #1
   140a4:	mov	r0, r8
   140a8:	mov	r1, #1
   140ac:	mov	r3, r4
   140b0:	bl	11038 <__fprintf_chk@plt>
   140b4:	movw	r1, #23538	; 0x5bf2
   140b8:	movt	r1, #1
   140bc:	mov	r0, #0
   140c0:	mov	r2, #5
   140c4:	bl	10edc <dcgettext@plt>
   140c8:	mov	r3, r0
   140cc:	movw	r0, #2022	; 0x7e6
   140d0:	str	r0, [sp]
   140d4:	movw	r2, #24256	; 0x5ec0
   140d8:	movt	r2, #1
   140dc:	mov	r0, r8
   140e0:	mov	r1, #1
   140e4:	bl	11038 <__fprintf_chk@plt>
   140e8:	movw	r4, #22914	; 0x5982
   140ec:	movt	r4, #1
   140f0:	mov	r0, r4
   140f4:	mov	r1, r8
   140f8:	bl	10e70 <fputs_unlocked@plt>
   140fc:	movw	r1, #23542	; 0x5bf6
   14100:	movt	r1, #1
   14104:	mov	r0, #0
   14108:	mov	r2, #5
   1410c:	bl	10edc <dcgettext@plt>
   14110:	mov	r2, r0
   14114:	movw	r3, #23713	; 0x5ca1
   14118:	movt	r3, #1
   1411c:	mov	r0, r8
   14120:	mov	r1, #1
   14124:	bl	11038 <__fprintf_chk@plt>
   14128:	mov	r0, r4
   1412c:	mov	r1, r8
   14130:	bl	10e70 <fputs_unlocked@plt>
   14134:	cmp	r6, #9
   14138:	bhi	14174 <__mempcpy_chk@plt+0x3094>
   1413c:	add	r0, pc, #0
   14140:	ldr	pc, [r0, r6, lsl #2]
   14144:	andeq	r4, r1, ip, ror #2
   14148:	andeq	r4, r1, r0, lsl #3
   1414c:			; <UNDEFINED> instruction: 0x000141b0
   14150:	ldrdeq	r4, [r1], -r8
   14154:	andeq	r4, r1, r0, lsl #4
   14158:	andeq	r4, r1, r8, lsr #4
   1415c:	andeq	r4, r1, r0, asr r2
   14160:	andeq	r4, r1, r8, lsl #5
   14164:	andeq	r4, r1, r8, lsr #6
   14168:	ldrdeq	r4, [r1], -r0
   1416c:	sub	sp, fp, #24
   14170:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14174:	movw	r1, #24066	; 0x5e02
   14178:	movt	r1, #1
   1417c:	b	142d8 <__mempcpy_chk@plt+0x31f8>
   14180:	movw	r1, #23747	; 0x5cc3
   14184:	movt	r1, #1
   14188:	mov	r0, #0
   1418c:	mov	r2, #5
   14190:	bl	10edc <dcgettext@plt>
   14194:	mov	r2, r0
   14198:	ldr	r3, [r7]
   1419c:	mov	r0, r8
   141a0:	mov	r1, #1
   141a4:	sub	sp, fp, #24
   141a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   141ac:	b	11038 <__fprintf_chk@plt>
   141b0:	movw	r1, #23763	; 0x5cd3
   141b4:	movt	r1, #1
   141b8:	mov	r0, #0
   141bc:	mov	r2, #5
   141c0:	bl	10edc <dcgettext@plt>
   141c4:	mov	r2, r0
   141c8:	ldr	r3, [r7]
   141cc:	ldr	r0, [r7, #4]
   141d0:	str	r0, [sp]
   141d4:	b	142c4 <__mempcpy_chk@plt+0x31e4>
   141d8:	movw	r1, #23786	; 0x5cea
   141dc:	movt	r1, #1
   141e0:	mov	r0, #0
   141e4:	mov	r2, #5
   141e8:	bl	10edc <dcgettext@plt>
   141ec:	mov	r2, r0
   141f0:	ldr	r3, [r7]
   141f4:	ldmib	r7, {r0, r1}
   141f8:	stm	sp, {r0, r1}
   141fc:	b	142c4 <__mempcpy_chk@plt+0x31e4>
   14200:	movw	r1, #23814	; 0x5d06
   14204:	movt	r1, #1
   14208:	mov	r0, #0
   1420c:	mov	r2, #5
   14210:	bl	10edc <dcgettext@plt>
   14214:	mov	r2, r0
   14218:	ldr	r3, [r7]
   1421c:	ldmib	r7, {r0, r1, r7}
   14220:	stm	sp, {r0, r1, r7}
   14224:	b	142c4 <__mempcpy_chk@plt+0x31e4>
   14228:	movw	r1, #23846	; 0x5d26
   1422c:	movt	r1, #1
   14230:	mov	r0, #0
   14234:	mov	r2, #5
   14238:	bl	10edc <dcgettext@plt>
   1423c:	mov	r2, r0
   14240:	ldr	r3, [r7]
   14244:	ldmib	r7, {r0, r1, r6, r7}
   14248:	stm	sp, {r0, r1, r6, r7}
   1424c:	b	142c4 <__mempcpy_chk@plt+0x31e4>
   14250:	movw	r1, #23882	; 0x5d4a
   14254:	movt	r1, #1
   14258:	mov	r0, #0
   1425c:	mov	r2, #5
   14260:	bl	10edc <dcgettext@plt>
   14264:	mov	r2, r0
   14268:	ldr	r3, [r7]
   1426c:	ldmib	r7, {r0, r1, r6}
   14270:	ldr	r5, [r7, #16]
   14274:	ldr	r7, [r7, #20]
   14278:	stm	sp, {r0, r1, r6}
   1427c:	str	r5, [sp, #12]
   14280:	str	r7, [sp, #16]
   14284:	b	142c4 <__mempcpy_chk@plt+0x31e4>
   14288:	movw	r1, #23922	; 0x5d72
   1428c:	movt	r1, #1
   14290:	mov	r0, #0
   14294:	mov	r2, #5
   14298:	bl	10edc <dcgettext@plt>
   1429c:	mov	r2, r0
   142a0:	ldr	r3, [r7]
   142a4:	ldmib	r7, {r0, r1, r6}
   142a8:	ldr	r5, [r7, #16]
   142ac:	ldr	r4, [r7, #20]
   142b0:	ldr	r7, [r7, #24]
   142b4:	stm	sp, {r0, r1, r6}
   142b8:	str	r5, [sp, #12]
   142bc:	str	r4, [sp, #16]
   142c0:	str	r7, [sp, #20]
   142c4:	mov	r0, r8
   142c8:	mov	r1, #1
   142cc:	b	14378 <__mempcpy_chk@plt+0x3298>
   142d0:	movw	r1, #24014	; 0x5dce
   142d4:	movt	r1, #1
   142d8:	mov	r0, #0
   142dc:	mov	r2, #5
   142e0:	bl	10edc <dcgettext@plt>
   142e4:	mov	ip, r0
   142e8:	ldr	r3, [r7]
   142ec:	ldr	r0, [r7, #4]
   142f0:	ldr	r1, [r7, #8]
   142f4:	ldr	r6, [r7, #12]
   142f8:	ldr	r5, [r7, #16]
   142fc:	ldr	r4, [r7, #20]
   14300:	ldr	r2, [r7, #24]
   14304:	ldr	lr, [r7, #28]
   14308:	ldr	r7, [r7, #32]
   1430c:	stm	sp, {r0, r1, r6}
   14310:	str	r5, [sp, #12]
   14314:	str	r4, [sp, #16]
   14318:	str	r2, [sp, #20]
   1431c:	str	lr, [sp, #24]
   14320:	str	r7, [sp, #28]
   14324:	b	1436c <__mempcpy_chk@plt+0x328c>
   14328:	movw	r1, #23966	; 0x5d9e
   1432c:	movt	r1, #1
   14330:	mov	r0, #0
   14334:	mov	r2, #5
   14338:	bl	10edc <dcgettext@plt>
   1433c:	mov	ip, r0
   14340:	ldr	r3, [r7]
   14344:	ldmib	r7, {r0, r1, r6}
   14348:	ldr	r5, [r7, #16]
   1434c:	ldr	r4, [r7, #20]
   14350:	ldr	r2, [r7, #24]
   14354:	ldr	r7, [r7, #28]
   14358:	stm	sp, {r0, r1, r6}
   1435c:	str	r5, [sp, #12]
   14360:	str	r4, [sp, #16]
   14364:	str	r2, [sp, #20]
   14368:	str	r7, [sp, #24]
   1436c:	mov	r0, r8
   14370:	mov	r1, #1
   14374:	mov	r2, ip
   14378:	bl	11038 <__fprintf_chk@plt>
   1437c:	sub	sp, fp, #24
   14380:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14384:	push	{r4, sl, fp, lr}
   14388:	add	fp, sp, #8
   1438c:	sub	sp, sp, #8
   14390:	mov	lr, #0
   14394:	ldr	ip, [fp, #8]
   14398:	ldr	r4, [ip, lr, lsl #2]
   1439c:	add	lr, lr, #1
   143a0:	cmp	r4, #0
   143a4:	bne	14398 <__mempcpy_chk@plt+0x32b8>
   143a8:	sub	r4, lr, #1
   143ac:	str	ip, [sp]
   143b0:	str	r4, [sp, #4]
   143b4:	bl	14050 <__mempcpy_chk@plt+0x2f70>
   143b8:	sub	sp, fp, #8
   143bc:	pop	{r4, sl, fp, pc}
   143c0:	push	{r4, r5, fp, lr}
   143c4:	add	fp, sp, #8
   143c8:	sub	sp, sp, #48	; 0x30
   143cc:	mov	ip, #0
   143d0:	ldr	r4, [fp, #8]
   143d4:	add	lr, sp, #8
   143d8:	ldr	r5, [r4]
   143dc:	str	r5, [lr, ip, lsl #2]
   143e0:	cmp	r5, #0
   143e4:	beq	143fc <__mempcpy_chk@plt+0x331c>
   143e8:	add	ip, ip, #1
   143ec:	add	r4, r4, #4
   143f0:	cmp	ip, #10
   143f4:	bne	143d8 <__mempcpy_chk@plt+0x32f8>
   143f8:	mov	ip, #10
   143fc:	str	lr, [sp]
   14400:	str	ip, [sp, #4]
   14404:	bl	14050 <__mempcpy_chk@plt+0x2f70>
   14408:	sub	sp, fp, #8
   1440c:	pop	{r4, r5, fp, pc}
   14410:	push	{fp, lr}
   14414:	mov	fp, sp
   14418:	sub	sp, sp, #8
   1441c:	add	ip, fp, #8
   14420:	str	ip, [sp, #4]
   14424:	str	ip, [sp]
   14428:	bl	143c0 <__mempcpy_chk@plt+0x32e0>
   1442c:	mov	sp, fp
   14430:	pop	{fp, pc}
   14434:	push	{fp, lr}
   14438:	mov	fp, sp
   1443c:	movw	r0, #29004	; 0x714c
   14440:	movt	r0, #2
   14444:	ldr	r1, [r0]
   14448:	movw	r0, #22914	; 0x5982
   1444c:	movt	r0, #1
   14450:	bl	10e70 <fputs_unlocked@plt>
   14454:	movw	r1, #24126	; 0x5e3e
   14458:	movt	r1, #1
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	bl	10edc <dcgettext@plt>
   14468:	mov	r1, r0
   1446c:	movw	r2, #24146	; 0x5e52
   14470:	movt	r2, #1
   14474:	mov	r0, #1
   14478:	bl	11020 <__printf_chk@plt>
   1447c:	movw	r1, #24168	; 0x5e68
   14480:	movt	r1, #1
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	bl	10edc <dcgettext@plt>
   14490:	mov	r1, r0
   14494:	movw	r2, #22216	; 0x56c8
   14498:	movt	r2, #1
   1449c:	movw	r3, #22723	; 0x58c3
   144a0:	movt	r3, #1
   144a4:	mov	r0, #1
   144a8:	bl	11020 <__printf_chk@plt>
   144ac:	movw	r1, #24188	; 0x5e7c
   144b0:	movt	r1, #1
   144b4:	mov	r0, #0
   144b8:	mov	r2, #5
   144bc:	bl	10edc <dcgettext@plt>
   144c0:	mov	r1, r0
   144c4:	movw	r2, #24227	; 0x5ea3
   144c8:	movt	r2, #1
   144cc:	mov	r0, #1
   144d0:	pop	{fp, lr}
   144d4:	b	11020 <__printf_chk@plt>
   144d8:	b	144dc <__mempcpy_chk@plt+0x33fc>
   144dc:	push	{r4, r5, r6, sl, fp, lr}
   144e0:	add	fp, sp, #16
   144e4:	mov	r4, r2
   144e8:	mov	r5, r1
   144ec:	mov	r6, r0
   144f0:	bl	14dcc <__mempcpy_chk@plt+0x3cec>
   144f4:	cmp	r0, #0
   144f8:	popne	{r4, r5, r6, sl, fp, pc}
   144fc:	cmp	r6, #0
   14500:	beq	14514 <__mempcpy_chk@plt+0x3434>
   14504:	cmp	r5, #0
   14508:	cmpne	r4, #0
   1450c:	bne	14514 <__mempcpy_chk@plt+0x3434>
   14510:	pop	{r4, r5, r6, sl, fp, pc}
   14514:	bl	148a0 <__mempcpy_chk@plt+0x37c0>
   14518:	push	{fp, lr}
   1451c:	mov	fp, sp
   14520:	bl	14938 <__mempcpy_chk@plt+0x3858>
   14524:	pop	{fp, lr}
   14528:	b	1452c <__mempcpy_chk@plt+0x344c>
   1452c:	cmp	r0, #0
   14530:	bxne	lr
   14534:	push	{fp, lr}
   14538:	mov	fp, sp
   1453c:	bl	148a0 <__mempcpy_chk@plt+0x37c0>
   14540:	push	{fp, lr}
   14544:	mov	fp, sp
   14548:	bl	14cfc <__mempcpy_chk@plt+0x3c1c>
   1454c:	pop	{fp, lr}
   14550:	b	1452c <__mempcpy_chk@plt+0x344c>
   14554:	b	14518 <__mempcpy_chk@plt+0x3438>
   14558:	push	{r4, r5, fp, lr}
   1455c:	add	fp, sp, #8
   14560:	mov	r4, r1
   14564:	mov	r5, r0
   14568:	bl	14968 <__mempcpy_chk@plt+0x3888>
   1456c:	cmp	r0, #0
   14570:	popne	{r4, r5, fp, pc}
   14574:	cmp	r5, #0
   14578:	beq	14588 <__mempcpy_chk@plt+0x34a8>
   1457c:	cmp	r4, #0
   14580:	bne	14588 <__mempcpy_chk@plt+0x34a8>
   14584:	pop	{r4, r5, fp, pc}
   14588:	bl	148a0 <__mempcpy_chk@plt+0x37c0>
   1458c:	push	{fp, lr}
   14590:	mov	fp, sp
   14594:	bl	14d00 <__mempcpy_chk@plt+0x3c20>
   14598:	pop	{fp, lr}
   1459c:	b	1452c <__mempcpy_chk@plt+0x344c>
   145a0:	push	{fp, lr}
   145a4:	mov	fp, sp
   145a8:	bl	14d10 <__mempcpy_chk@plt+0x3c30>
   145ac:	pop	{fp, lr}
   145b0:	b	1452c <__mempcpy_chk@plt+0x344c>
   145b4:	mov	r2, r1
   145b8:	mov	r1, r0
   145bc:	mov	r0, #0
   145c0:	b	144dc <__mempcpy_chk@plt+0x33fc>
   145c4:	mov	r2, r1
   145c8:	mov	r1, r0
   145cc:	mov	r0, #0
   145d0:	b	145a0 <__mempcpy_chk@plt+0x34c0>
   145d4:	mov	r2, #1
   145d8:	b	145dc <__mempcpy_chk@plt+0x34fc>
   145dc:	push	{r4, r5, fp, lr}
   145e0:	add	fp, sp, #8
   145e4:	mov	r4, r1
   145e8:	ldr	r5, [r1]
   145ec:	cmp	r0, #0
   145f0:	beq	14608 <__mempcpy_chk@plt+0x3528>
   145f4:	mov	r1, #1
   145f8:	add	r1, r1, r5, lsr #1
   145fc:	adds	r5, r5, r1
   14600:	bcc	14620 <__mempcpy_chk@plt+0x3540>
   14604:	bl	148a0 <__mempcpy_chk@plt+0x37c0>
   14608:	cmp	r5, #0
   1460c:	bne	14620 <__mempcpy_chk@plt+0x3540>
   14610:	mov	r1, #64	; 0x40
   14614:	udiv	r5, r1, r2
   14618:	cmp	r2, #64	; 0x40
   1461c:	addhi	r5, r5, #1
   14620:	mov	r1, r5
   14624:	bl	144dc <__mempcpy_chk@plt+0x33fc>
   14628:	str	r5, [r4]
   1462c:	pop	{r4, r5, fp, pc}
   14630:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14634:	add	fp, sp, #24
   14638:	mov	r8, r1
   1463c:	ldr	r6, [r1]
   14640:	add	r1, r6, r6, asr #1
   14644:	cmp	r1, r6
   14648:	mvnvs	r1, #-2147483648	; 0x80000000
   1464c:	cmp	r1, r3
   14650:	mov	r5, r1
   14654:	movgt	r5, r3
   14658:	cmn	r3, #1
   1465c:	movle	r5, r1
   14660:	ldr	r4, [fp, #8]
   14664:	cmn	r4, #1
   14668:	ble	14690 <__mempcpy_chk@plt+0x35b0>
   1466c:	cmp	r4, #0
   14670:	beq	146e4 <__mempcpy_chk@plt+0x3604>
   14674:	cmn	r5, #1
   14678:	ble	146b8 <__mempcpy_chk@plt+0x35d8>
   1467c:	mvn	r7, #-2147483648	; 0x80000000
   14680:	udiv	r1, r7, r4
   14684:	cmp	r1, r5
   14688:	bge	146e4 <__mempcpy_chk@plt+0x3604>
   1468c:	b	146f4 <__mempcpy_chk@plt+0x3614>
   14690:	cmn	r5, #1
   14694:	ble	146d4 <__mempcpy_chk@plt+0x35f4>
   14698:	cmn	r4, #1
   1469c:	beq	146e4 <__mempcpy_chk@plt+0x3604>
   146a0:	mov	r1, #-2147483648	; 0x80000000
   146a4:	sdiv	r1, r1, r4
   146a8:	mvn	r7, #-2147483648	; 0x80000000
   146ac:	cmp	r1, r5
   146b0:	bge	146e4 <__mempcpy_chk@plt+0x3604>
   146b4:	b	146f4 <__mempcpy_chk@plt+0x3614>
   146b8:	beq	146e4 <__mempcpy_chk@plt+0x3604>
   146bc:	mov	r1, #-2147483648	; 0x80000000
   146c0:	sdiv	r1, r1, r5
   146c4:	mvn	r7, #-2147483648	; 0x80000000
   146c8:	cmp	r1, r4
   146cc:	bge	146e4 <__mempcpy_chk@plt+0x3604>
   146d0:	b	146f4 <__mempcpy_chk@plt+0x3614>
   146d4:	mvn	r7, #-2147483648	; 0x80000000
   146d8:	sdiv	r1, r7, r4
   146dc:	cmp	r5, r1
   146e0:	blt	146f4 <__mempcpy_chk@plt+0x3614>
   146e4:	mul	r1, r5, r4
   146e8:	mov	r7, #64	; 0x40
   146ec:	cmp	r1, #63	; 0x3f
   146f0:	bgt	146fc <__mempcpy_chk@plt+0x361c>
   146f4:	sdiv	r5, r7, r4
   146f8:	mul	r1, r5, r4
   146fc:	cmp	r0, #0
   14700:	moveq	r7, #0
   14704:	streq	r7, [r8]
   14708:	sub	r7, r5, r6
   1470c:	cmp	r7, r2
   14710:	bge	147bc <__mempcpy_chk@plt+0x36dc>
   14714:	add	r5, r6, r2
   14718:	mov	r1, #0
   1471c:	cmp	r5, r3
   14720:	mov	r2, #0
   14724:	movwgt	r2, #1
   14728:	cmn	r3, #1
   1472c:	movwgt	r1, #1
   14730:	cmp	r5, r6
   14734:	bvs	147a4 <__mempcpy_chk@plt+0x36c4>
   14738:	ands	r1, r1, r2
   1473c:	bne	147a4 <__mempcpy_chk@plt+0x36c4>
   14740:	cmn	r4, #1
   14744:	ble	1476c <__mempcpy_chk@plt+0x368c>
   14748:	cmp	r4, #0
   1474c:	beq	147b8 <__mempcpy_chk@plt+0x36d8>
   14750:	cmn	r5, #1
   14754:	ble	14790 <__mempcpy_chk@plt+0x36b0>
   14758:	mvn	r1, #-2147483648	; 0x80000000
   1475c:	udiv	r1, r1, r4
   14760:	cmp	r1, r5
   14764:	bge	147b8 <__mempcpy_chk@plt+0x36d8>
   14768:	b	147a4 <__mempcpy_chk@plt+0x36c4>
   1476c:	cmn	r5, #1
   14770:	ble	147a8 <__mempcpy_chk@plt+0x36c8>
   14774:	cmn	r4, #1
   14778:	beq	147b8 <__mempcpy_chk@plt+0x36d8>
   1477c:	mov	r1, #-2147483648	; 0x80000000
   14780:	sdiv	r1, r1, r4
   14784:	cmp	r1, r5
   14788:	bge	147b8 <__mempcpy_chk@plt+0x36d8>
   1478c:	b	147a4 <__mempcpy_chk@plt+0x36c4>
   14790:	beq	147b8 <__mempcpy_chk@plt+0x36d8>
   14794:	mov	r1, #-2147483648	; 0x80000000
   14798:	sdiv	r1, r1, r5
   1479c:	cmp	r1, r4
   147a0:	bge	147b8 <__mempcpy_chk@plt+0x36d8>
   147a4:	bl	148a0 <__mempcpy_chk@plt+0x37c0>
   147a8:	mvn	r1, #-2147483648	; 0x80000000
   147ac:	sdiv	r1, r1, r4
   147b0:	cmp	r5, r1
   147b4:	blt	147a4 <__mempcpy_chk@plt+0x36c4>
   147b8:	mul	r1, r5, r4
   147bc:	bl	14558 <__mempcpy_chk@plt+0x3478>
   147c0:	str	r5, [r8]
   147c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147c8:	mov	r1, #1
   147cc:	b	147d0 <__mempcpy_chk@plt+0x36f0>
   147d0:	push	{fp, lr}
   147d4:	mov	fp, sp
   147d8:	bl	148e4 <__mempcpy_chk@plt+0x3804>
   147dc:	pop	{fp, lr}
   147e0:	b	1452c <__mempcpy_chk@plt+0x344c>
   147e4:	mov	r1, #1
   147e8:	b	147ec <__mempcpy_chk@plt+0x370c>
   147ec:	push	{fp, lr}
   147f0:	mov	fp, sp
   147f4:	bl	14d0c <__mempcpy_chk@plt+0x3c2c>
   147f8:	pop	{fp, lr}
   147fc:	b	1452c <__mempcpy_chk@plt+0x344c>
   14800:	push	{r4, r5, fp, lr}
   14804:	add	fp, sp, #8
   14808:	mov	r4, r1
   1480c:	mov	r5, r0
   14810:	mov	r0, r1
   14814:	bl	14518 <__mempcpy_chk@plt+0x3438>
   14818:	mov	r1, r5
   1481c:	mov	r2, r4
   14820:	pop	{r4, r5, fp, lr}
   14824:	b	10ec4 <memcpy@plt>
   14828:	push	{r4, r5, fp, lr}
   1482c:	add	fp, sp, #8
   14830:	mov	r4, r1
   14834:	mov	r5, r0
   14838:	mov	r0, r1
   1483c:	bl	14540 <__mempcpy_chk@plt+0x3460>
   14840:	mov	r1, r5
   14844:	mov	r2, r4
   14848:	pop	{r4, r5, fp, lr}
   1484c:	b	10ec4 <memcpy@plt>
   14850:	push	{r4, r5, fp, lr}
   14854:	add	fp, sp, #8
   14858:	mov	r4, r1
   1485c:	mov	r5, r0
   14860:	add	r0, r1, #1
   14864:	bl	14540 <__mempcpy_chk@plt+0x3460>
   14868:	mov	r1, #0
   1486c:	strb	r1, [r0, r4]
   14870:	mov	r1, r5
   14874:	mov	r2, r4
   14878:	pop	{r4, r5, fp, lr}
   1487c:	b	10ec4 <memcpy@plt>
   14880:	push	{r4, sl, fp, lr}
   14884:	add	fp, sp, #8
   14888:	mov	r4, r0
   1488c:	bl	10fe4 <strlen@plt>
   14890:	add	r1, r0, #1
   14894:	mov	r0, r4
   14898:	pop	{r4, sl, fp, lr}
   1489c:	b	14800 <__mempcpy_chk@plt+0x3720>
   148a0:	push	{fp, lr}
   148a4:	mov	fp, sp
   148a8:	movw	r0, #28916	; 0x70f4
   148ac:	movt	r0, #2
   148b0:	ldr	r4, [r0]
   148b4:	movw	r1, #24303	; 0x5eef
   148b8:	movt	r1, #1
   148bc:	mov	r0, #0
   148c0:	mov	r2, #5
   148c4:	bl	10edc <dcgettext@plt>
   148c8:	mov	r3, r0
   148cc:	movw	r2, #23187	; 0x5a93
   148d0:	movt	r2, #1
   148d4:	mov	r0, r4
   148d8:	mov	r1, #0
   148dc:	bl	10f54 <error@plt>
   148e0:	bl	110b0 <abort@plt>
   148e4:	clz	r2, r1
   148e8:	lsr	r2, r2, #5
   148ec:	clz	r3, r0
   148f0:	lsr	r3, r3, #5
   148f4:	orrs	r2, r3, r2
   148f8:	movwne	r1, #1
   148fc:	movwne	r0, #1
   14900:	cmp	r1, #0
   14904:	beq	14934 <__mempcpy_chk@plt+0x3854>
   14908:	mvn	r2, #-2147483648	; 0x80000000
   1490c:	udiv	r2, r2, r1
   14910:	cmp	r2, r0
   14914:	bcs	14934 <__mempcpy_chk@plt+0x3854>
   14918:	push	{fp, lr}
   1491c:	mov	fp, sp
   14920:	bl	10ff0 <__errno_location@plt>
   14924:	mov	r1, #12
   14928:	str	r1, [r0]
   1492c:	mov	r0, #0
   14930:	pop	{fp, pc}
   14934:	b	10e64 <calloc@plt>
   14938:	cmp	r0, #0
   1493c:	movweq	r0, #1
   14940:	cmn	r0, #1
   14944:	ble	1494c <__mempcpy_chk@plt+0x386c>
   14948:	b	10f84 <malloc@plt>
   1494c:	push	{fp, lr}
   14950:	mov	fp, sp
   14954:	bl	10ff0 <__errno_location@plt>
   14958:	mov	r1, #12
   1495c:	str	r1, [r0]
   14960:	mov	r0, #0
   14964:	pop	{fp, pc}
   14968:	push	{fp, lr}
   1496c:	mov	fp, sp
   14970:	cmp	r0, #0
   14974:	beq	14990 <__mempcpy_chk@plt+0x38b0>
   14978:	cmp	r1, #0
   1497c:	beq	1499c <__mempcpy_chk@plt+0x38bc>
   14980:	cmn	r1, #1
   14984:	ble	149a8 <__mempcpy_chk@plt+0x38c8>
   14988:	pop	{fp, lr}
   1498c:	b	10ee8 <realloc@plt>
   14990:	mov	r0, r1
   14994:	pop	{fp, lr}
   14998:	b	14938 <__mempcpy_chk@plt+0x3858>
   1499c:	bl	12044 <__mempcpy_chk@plt+0xf64>
   149a0:	mov	r0, #0
   149a4:	pop	{fp, pc}
   149a8:	bl	10ff0 <__errno_location@plt>
   149ac:	mov	r1, #12
   149b0:	str	r1, [r0]
   149b4:	mov	r0, #0
   149b8:	pop	{fp, pc}
   149bc:	mov	r1, r0
   149c0:	sub	r2, r0, #65	; 0x41
   149c4:	mov	r0, #1
   149c8:	cmp	r2, #26
   149cc:	subcs	r2, r1, #97	; 0x61
   149d0:	cmpcs	r2, #26
   149d4:	bcs	149dc <__mempcpy_chk@plt+0x38fc>
   149d8:	bx	lr
   149dc:	sub	r1, r1, #48	; 0x30
   149e0:	cmp	r1, #10
   149e4:	movcs	r0, #0
   149e8:	bx	lr
   149ec:	mov	r1, r0
   149f0:	sub	r2, r0, #65	; 0x41
   149f4:	mov	r0, #1
   149f8:	cmp	r2, #26
   149fc:	subcs	r1, r1, #97	; 0x61
   14a00:	cmpcs	r1, #26
   14a04:	movcs	r0, #0
   14a08:	bx	lr
   14a0c:	mov	r1, #0
   14a10:	cmp	r0, #128	; 0x80
   14a14:	movwcc	r1, #1
   14a18:	mov	r0, r1
   14a1c:	bx	lr
   14a20:	sub	r1, r0, #9
   14a24:	clz	r1, r1
   14a28:	lsr	r1, r1, #5
   14a2c:	sub	r0, r0, #32
   14a30:	clz	r0, r0
   14a34:	lsr	r0, r0, #5
   14a38:	orr	r0, r0, r1
   14a3c:	bx	lr
   14a40:	mov	r1, r0
   14a44:	mov	r0, #1
   14a48:	cmp	r1, #32
   14a4c:	bxcc	lr
   14a50:	cmp	r1, #127	; 0x7f
   14a54:	movne	r0, #0
   14a58:	bx	lr
   14a5c:	sub	r1, r0, #48	; 0x30
   14a60:	mov	r0, #0
   14a64:	cmp	r1, #10
   14a68:	movwcc	r0, #1
   14a6c:	bx	lr
   14a70:	sub	r1, r0, #33	; 0x21
   14a74:	mov	r0, #0
   14a78:	cmp	r1, #94	; 0x5e
   14a7c:	movwcc	r0, #1
   14a80:	bx	lr
   14a84:	sub	r1, r0, #97	; 0x61
   14a88:	mov	r0, #0
   14a8c:	cmp	r1, #26
   14a90:	movwcc	r0, #1
   14a94:	bx	lr
   14a98:	sub	r1, r0, #32
   14a9c:	mov	r0, #0
   14aa0:	cmp	r1, #95	; 0x5f
   14aa4:	movwcc	r0, #1
   14aa8:	bx	lr
   14aac:	sub	r1, r0, #33	; 0x21
   14ab0:	cmp	r1, #93	; 0x5d
   14ab4:	bhi	14c40 <__mempcpy_chk@plt+0x3b60>
   14ab8:	mov	r0, #1
   14abc:	add	r2, pc, #0
   14ac0:	ldr	pc, [r2, r1, lsl #2]
   14ac4:	andeq	r4, r1, ip, lsr ip
   14ac8:	andeq	r4, r1, ip, lsr ip
   14acc:	andeq	r4, r1, ip, lsr ip
   14ad0:	andeq	r4, r1, ip, lsr ip
   14ad4:	andeq	r4, r1, ip, lsr ip
   14ad8:	andeq	r4, r1, ip, lsr ip
   14adc:	andeq	r4, r1, ip, lsr ip
   14ae0:	andeq	r4, r1, ip, lsr ip
   14ae4:	andeq	r4, r1, ip, lsr ip
   14ae8:	andeq	r4, r1, ip, lsr ip
   14aec:	andeq	r4, r1, ip, lsr ip
   14af0:	andeq	r4, r1, ip, lsr ip
   14af4:	andeq	r4, r1, ip, lsr ip
   14af8:	andeq	r4, r1, ip, lsr ip
   14afc:	andeq	r4, r1, ip, lsr ip
   14b00:	andeq	r4, r1, r0, asr #24
   14b04:	andeq	r4, r1, r0, asr #24
   14b08:	andeq	r4, r1, r0, asr #24
   14b0c:	andeq	r4, r1, r0, asr #24
   14b10:	andeq	r4, r1, r0, asr #24
   14b14:	andeq	r4, r1, r0, asr #24
   14b18:	andeq	r4, r1, r0, asr #24
   14b1c:	andeq	r4, r1, r0, asr #24
   14b20:	andeq	r4, r1, r0, asr #24
   14b24:	andeq	r4, r1, r0, asr #24
   14b28:	andeq	r4, r1, ip, lsr ip
   14b2c:	andeq	r4, r1, ip, lsr ip
   14b30:	andeq	r4, r1, ip, lsr ip
   14b34:	andeq	r4, r1, ip, lsr ip
   14b38:	andeq	r4, r1, ip, lsr ip
   14b3c:	andeq	r4, r1, ip, lsr ip
   14b40:	andeq	r4, r1, ip, lsr ip
   14b44:	andeq	r4, r1, r0, asr #24
   14b48:	andeq	r4, r1, r0, asr #24
   14b4c:	andeq	r4, r1, r0, asr #24
   14b50:	andeq	r4, r1, r0, asr #24
   14b54:	andeq	r4, r1, r0, asr #24
   14b58:	andeq	r4, r1, r0, asr #24
   14b5c:	andeq	r4, r1, r0, asr #24
   14b60:	andeq	r4, r1, r0, asr #24
   14b64:	andeq	r4, r1, r0, asr #24
   14b68:	andeq	r4, r1, r0, asr #24
   14b6c:	andeq	r4, r1, r0, asr #24
   14b70:	andeq	r4, r1, r0, asr #24
   14b74:	andeq	r4, r1, r0, asr #24
   14b78:	andeq	r4, r1, r0, asr #24
   14b7c:	andeq	r4, r1, r0, asr #24
   14b80:	andeq	r4, r1, r0, asr #24
   14b84:	andeq	r4, r1, r0, asr #24
   14b88:	andeq	r4, r1, r0, asr #24
   14b8c:	andeq	r4, r1, r0, asr #24
   14b90:	andeq	r4, r1, r0, asr #24
   14b94:	andeq	r4, r1, r0, asr #24
   14b98:	andeq	r4, r1, r0, asr #24
   14b9c:	andeq	r4, r1, r0, asr #24
   14ba0:	andeq	r4, r1, r0, asr #24
   14ba4:	andeq	r4, r1, r0, asr #24
   14ba8:	andeq	r4, r1, r0, asr #24
   14bac:	andeq	r4, r1, ip, lsr ip
   14bb0:	andeq	r4, r1, ip, lsr ip
   14bb4:	andeq	r4, r1, ip, lsr ip
   14bb8:	andeq	r4, r1, ip, lsr ip
   14bbc:	andeq	r4, r1, ip, lsr ip
   14bc0:	andeq	r4, r1, ip, lsr ip
   14bc4:	andeq	r4, r1, r0, asr #24
   14bc8:	andeq	r4, r1, r0, asr #24
   14bcc:	andeq	r4, r1, r0, asr #24
   14bd0:	andeq	r4, r1, r0, asr #24
   14bd4:	andeq	r4, r1, r0, asr #24
   14bd8:	andeq	r4, r1, r0, asr #24
   14bdc:	andeq	r4, r1, r0, asr #24
   14be0:	andeq	r4, r1, r0, asr #24
   14be4:	andeq	r4, r1, r0, asr #24
   14be8:	andeq	r4, r1, r0, asr #24
   14bec:	andeq	r4, r1, r0, asr #24
   14bf0:	andeq	r4, r1, r0, asr #24
   14bf4:	andeq	r4, r1, r0, asr #24
   14bf8:	andeq	r4, r1, r0, asr #24
   14bfc:	andeq	r4, r1, r0, asr #24
   14c00:	andeq	r4, r1, r0, asr #24
   14c04:	andeq	r4, r1, r0, asr #24
   14c08:	andeq	r4, r1, r0, asr #24
   14c0c:	andeq	r4, r1, r0, asr #24
   14c10:	andeq	r4, r1, r0, asr #24
   14c14:	andeq	r4, r1, r0, asr #24
   14c18:	andeq	r4, r1, r0, asr #24
   14c1c:	andeq	r4, r1, r0, asr #24
   14c20:	andeq	r4, r1, r0, asr #24
   14c24:	andeq	r4, r1, r0, asr #24
   14c28:	andeq	r4, r1, r0, asr #24
   14c2c:	andeq	r4, r1, ip, lsr ip
   14c30:	andeq	r4, r1, ip, lsr ip
   14c34:	andeq	r4, r1, ip, lsr ip
   14c38:	andeq	r4, r1, ip, lsr ip
   14c3c:	bx	lr
   14c40:	mov	r0, #0
   14c44:	bx	lr
   14c48:	sub	r0, r0, #9
   14c4c:	cmp	r0, #23
   14c50:	movhi	r0, #0
   14c54:	bxhi	lr
   14c58:	bic	r0, r0, #-16777216	; 0xff000000
   14c5c:	movw	r1, #31
   14c60:	movt	r1, #128	; 0x80
   14c64:	mov	r2, #1
   14c68:	and	r0, r2, r1, lsr r0
   14c6c:	bx	lr
   14c70:	sub	r1, r0, #65	; 0x41
   14c74:	mov	r0, #0
   14c78:	cmp	r1, #26
   14c7c:	movwcc	r0, #1
   14c80:	bx	lr
   14c84:	mov	r1, r0
   14c88:	sub	r2, r0, #48	; 0x30
   14c8c:	mov	r0, #1
   14c90:	cmp	r2, #22
   14c94:	bhi	14cac <__mempcpy_chk@plt+0x3bcc>
   14c98:	mov	ip, #1
   14c9c:	movw	r3, #1023	; 0x3ff
   14ca0:	movt	r3, #126	; 0x7e
   14ca4:	tst	r3, ip, lsl r2
   14ca8:	bxne	lr
   14cac:	sub	r1, r1, #97	; 0x61
   14cb0:	cmp	r1, #6
   14cb4:	movcs	r0, #0
   14cb8:	bxcs	lr
   14cbc:	bx	lr
   14cc0:	sub	r1, r0, #65	; 0x41
   14cc4:	cmp	r1, #26
   14cc8:	addcc	r0, r0, #32
   14ccc:	bx	lr
   14cd0:	sub	r1, r0, #97	; 0x61
   14cd4:	cmp	r1, #26
   14cd8:	subcc	r0, r0, #32
   14cdc:	bx	lr
   14ce0:	push	{fp, lr}
   14ce4:	mov	fp, sp
   14ce8:	bl	10ff0 <__errno_location@plt>
   14cec:	mov	r1, #12
   14cf0:	str	r1, [r0]
   14cf4:	mov	r0, #0
   14cf8:	pop	{fp, pc}
   14cfc:	b	14938 <__mempcpy_chk@plt+0x3858>
   14d00:	cmp	r1, #0
   14d04:	orreq	r1, r1, #1
   14d08:	b	14968 <__mempcpy_chk@plt+0x3888>
   14d0c:	b	148e4 <__mempcpy_chk@plt+0x3804>
   14d10:	clz	r3, r2
   14d14:	lsr	ip, r3, #5
   14d18:	clz	r3, r1
   14d1c:	lsr	r3, r3, #5
   14d20:	orrs	r3, r3, ip
   14d24:	movwne	r1, #1
   14d28:	movwne	r2, #1
   14d2c:	b	14dcc <__mempcpy_chk@plt+0x3cec>
   14d30:	push	{fp, lr}
   14d34:	mov	fp, sp
   14d38:	mov	r0, #14
   14d3c:	bl	11074 <nl_langinfo@plt>
   14d40:	movw	r1, #22915	; 0x5983
   14d44:	movt	r1, #1
   14d48:	cmp	r0, #0
   14d4c:	movne	r1, r0
   14d50:	ldrb	r2, [r1]
   14d54:	movw	r0, #24320	; 0x5f00
   14d58:	movt	r0, #1
   14d5c:	cmp	r2, #0
   14d60:	movne	r0, r1
   14d64:	pop	{fp, pc}
   14d68:	push	{r4, r5, r6, r7, fp, lr}
   14d6c:	add	fp, sp, #16
   14d70:	sub	sp, sp, #8
   14d74:	mov	r7, r2
   14d78:	mov	r4, r1
   14d7c:	add	r5, sp, #4
   14d80:	cmp	r0, #0
   14d84:	movne	r5, r0
   14d88:	mov	r0, r5
   14d8c:	bl	10f48 <mbrtowc@plt>
   14d90:	mov	r6, r0
   14d94:	cmp	r7, #0
   14d98:	beq	14dc0 <__mempcpy_chk@plt+0x3ce0>
   14d9c:	cmn	r6, #2
   14da0:	bcc	14dc0 <__mempcpy_chk@plt+0x3ce0>
   14da4:	mov	r0, #0
   14da8:	bl	14e08 <__mempcpy_chk@plt+0x3d28>
   14dac:	cmp	r0, #0
   14db0:	bne	14dc0 <__mempcpy_chk@plt+0x3ce0>
   14db4:	ldrb	r0, [r4]
   14db8:	str	r0, [r5]
   14dbc:	mov	r6, #1
   14dc0:	mov	r0, r6
   14dc4:	sub	sp, fp, #16
   14dc8:	pop	{r4, r5, r6, r7, fp, pc}
   14dcc:	cmp	r2, #0
   14dd0:	beq	14e00 <__mempcpy_chk@plt+0x3d20>
   14dd4:	mvn	r3, #0
   14dd8:	udiv	r3, r3, r2
   14ddc:	cmp	r3, r1
   14de0:	bcs	14e00 <__mempcpy_chk@plt+0x3d20>
   14de4:	push	{fp, lr}
   14de8:	mov	fp, sp
   14dec:	bl	10ff0 <__errno_location@plt>
   14df0:	mov	r1, #12
   14df4:	str	r1, [r0]
   14df8:	mov	r0, #0
   14dfc:	pop	{fp, pc}
   14e00:	mul	r1, r2, r1
   14e04:	b	14968 <__mempcpy_chk@plt+0x3888>
   14e08:	push	{r4, sl, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	sub	sp, sp, #264	; 0x108
   14e14:	add	r1, sp, #7
   14e18:	movw	r2, #257	; 0x101
   14e1c:	bl	14e74 <__mempcpy_chk@plt+0x3d94>
   14e20:	mov	r4, #0
   14e24:	cmp	r0, #0
   14e28:	bne	14e68 <__mempcpy_chk@plt+0x3d88>
   14e2c:	add	r0, sp, #7
   14e30:	movw	r1, #24326	; 0x5f06
   14e34:	movt	r1, #1
   14e38:	mov	r2, #2
   14e3c:	bl	10fd8 <bcmp@plt>
   14e40:	cmp	r0, #0
   14e44:	beq	14e68 <__mempcpy_chk@plt+0x3d88>
   14e48:	add	r0, sp, #7
   14e4c:	movw	r1, #24328	; 0x5f08
   14e50:	movt	r1, #1
   14e54:	mov	r2, #6
   14e58:	bl	10fd8 <bcmp@plt>
   14e5c:	mov	r4, r0
   14e60:	cmp	r0, #0
   14e64:	movwne	r4, #1
   14e68:	mov	r0, r4
   14e6c:	sub	sp, fp, #8
   14e70:	pop	{r4, sl, fp, pc}
   14e74:	b	14e78 <__mempcpy_chk@plt+0x3d98>
   14e78:	push	{r4, r5, r6, r7, fp, lr}
   14e7c:	add	fp, sp, #16
   14e80:	mov	r6, r2
   14e84:	mov	r4, r1
   14e88:	bl	14f10 <__mempcpy_chk@plt+0x3e30>
   14e8c:	cmp	r0, #0
   14e90:	beq	14ec0 <__mempcpy_chk@plt+0x3de0>
   14e94:	mov	r7, r0
   14e98:	bl	10fe4 <strlen@plt>
   14e9c:	cmp	r0, r6
   14ea0:	bcs	14edc <__mempcpy_chk@plt+0x3dfc>
   14ea4:	add	r2, r0, #1
   14ea8:	mov	r0, r4
   14eac:	mov	r1, r7
   14eb0:	bl	10ec4 <memcpy@plt>
   14eb4:	mov	r5, #0
   14eb8:	mov	r0, r5
   14ebc:	pop	{r4, r5, r6, r7, fp, pc}
   14ec0:	mov	r5, #22
   14ec4:	cmp	r6, #0
   14ec8:	beq	14f04 <__mempcpy_chk@plt+0x3e24>
   14ecc:	mov	r0, #0
   14ed0:	strb	r0, [r4]
   14ed4:	mov	r0, r5
   14ed8:	pop	{r4, r5, r6, r7, fp, pc}
   14edc:	mov	r5, #34	; 0x22
   14ee0:	cmp	r6, #0
   14ee4:	beq	14f04 <__mempcpy_chk@plt+0x3e24>
   14ee8:	sub	r6, r6, #1
   14eec:	mov	r0, r4
   14ef0:	mov	r1, r7
   14ef4:	mov	r2, r6
   14ef8:	bl	10ec4 <memcpy@plt>
   14efc:	mov	r0, #0
   14f00:	strb	r0, [r4, r6]
   14f04:	mov	r0, r5
   14f08:	pop	{r4, r5, r6, r7, fp, pc}
   14f0c:	b	14f10 <__mempcpy_chk@plt+0x3e30>
   14f10:	mov	r1, #0
   14f14:	b	1105c <setlocale@plt>
   14f18:	cmp	r3, #0
   14f1c:	cmpeq	r2, #0
   14f20:	bne	14f38 <__mempcpy_chk@plt+0x3e58>
   14f24:	cmp	r1, #0
   14f28:	cmpeq	r0, #0
   14f2c:	mvnne	r1, #0
   14f30:	mvnne	r0, #0
   14f34:	b	14f54 <__mempcpy_chk@plt+0x3e74>
   14f38:	sub	sp, sp, #8
   14f3c:	push	{sp, lr}
   14f40:	bl	14f64 <__mempcpy_chk@plt+0x3e84>
   14f44:	ldr	lr, [sp, #4]
   14f48:	add	sp, sp, #8
   14f4c:	pop	{r2, r3}
   14f50:	bx	lr
   14f54:	push	{r1, lr}
   14f58:	mov	r0, #8
   14f5c:	bl	10e7c <raise@plt>
   14f60:	pop	{r1, pc}
   14f64:	cmp	r1, r3
   14f68:	cmpeq	r0, r2
   14f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f70:	mov	r4, r0
   14f74:	movcc	r0, #0
   14f78:	mov	r5, r1
   14f7c:	ldr	lr, [sp, #36]	; 0x24
   14f80:	movcc	r1, r0
   14f84:	bcc	15080 <__mempcpy_chk@plt+0x3fa0>
   14f88:	cmp	r3, #0
   14f8c:	clzeq	ip, r2
   14f90:	clzne	ip, r3
   14f94:	addeq	ip, ip, #32
   14f98:	cmp	r5, #0
   14f9c:	clzeq	r1, r4
   14fa0:	addeq	r1, r1, #32
   14fa4:	clzne	r1, r5
   14fa8:	sub	ip, ip, r1
   14fac:	sub	sl, ip, #32
   14fb0:	lsl	r9, r3, ip
   14fb4:	rsb	fp, ip, #32
   14fb8:	orr	r9, r9, r2, lsl sl
   14fbc:	orr	r9, r9, r2, lsr fp
   14fc0:	lsl	r8, r2, ip
   14fc4:	cmp	r5, r9
   14fc8:	cmpeq	r4, r8
   14fcc:	movcc	r0, #0
   14fd0:	movcc	r1, r0
   14fd4:	bcc	14ff0 <__mempcpy_chk@plt+0x3f10>
   14fd8:	mov	r0, #1
   14fdc:	subs	r4, r4, r8
   14fe0:	lsl	r1, r0, sl
   14fe4:	orr	r1, r1, r0, lsr fp
   14fe8:	lsl	r0, r0, ip
   14fec:	sbc	r5, r5, r9
   14ff0:	cmp	ip, #0
   14ff4:	beq	15080 <__mempcpy_chk@plt+0x3fa0>
   14ff8:	lsr	r6, r8, #1
   14ffc:	orr	r6, r6, r9, lsl #31
   15000:	lsr	r7, r9, #1
   15004:	mov	r2, ip
   15008:	b	1502c <__mempcpy_chk@plt+0x3f4c>
   1500c:	subs	r3, r4, r6
   15010:	sbc	r8, r5, r7
   15014:	adds	r3, r3, r3
   15018:	adc	r8, r8, r8
   1501c:	adds	r4, r3, #1
   15020:	adc	r5, r8, #0
   15024:	subs	r2, r2, #1
   15028:	beq	15048 <__mempcpy_chk@plt+0x3f68>
   1502c:	cmp	r5, r7
   15030:	cmpeq	r4, r6
   15034:	bcs	1500c <__mempcpy_chk@plt+0x3f2c>
   15038:	adds	r4, r4, r4
   1503c:	adc	r5, r5, r5
   15040:	subs	r2, r2, #1
   15044:	bne	1502c <__mempcpy_chk@plt+0x3f4c>
   15048:	lsr	r3, r4, ip
   1504c:	orr	r3, r3, r5, lsl fp
   15050:	lsr	r2, r5, ip
   15054:	orr	r3, r3, r5, lsr sl
   15058:	adds	r0, r0, r4
   1505c:	mov	r4, r3
   15060:	lsl	r3, r2, ip
   15064:	orr	r3, r3, r4, lsl sl
   15068:	lsl	ip, r4, ip
   1506c:	orr	r3, r3, r4, lsr fp
   15070:	adc	r1, r1, r5
   15074:	subs	r0, r0, ip
   15078:	mov	r5, r2
   1507c:	sbc	r1, r1, r3
   15080:	cmp	lr, #0
   15084:	strdne	r4, [lr]
   15088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1508c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15090:	mov	r7, r0
   15094:	ldr	r6, [pc, #72]	; 150e4 <__mempcpy_chk@plt+0x4004>
   15098:	ldr	r5, [pc, #72]	; 150e8 <__mempcpy_chk@plt+0x4008>
   1509c:	add	r6, pc, r6
   150a0:	add	r5, pc, r5
   150a4:	sub	r6, r6, r5
   150a8:	mov	r8, r1
   150ac:	mov	r9, r2
   150b0:	bl	10e44 <calloc@plt-0x20>
   150b4:	asrs	r6, r6, #2
   150b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   150bc:	mov	r4, #0
   150c0:	add	r4, r4, #1
   150c4:	ldr	r3, [r5], #4
   150c8:	mov	r2, r9
   150cc:	mov	r1, r8
   150d0:	mov	r0, r7
   150d4:	blx	r3
   150d8:	cmp	r6, r4
   150dc:	bne	150c0 <__mempcpy_chk@plt+0x3fe0>
   150e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150e4:	andeq	r1, r1, r8, ror #28
   150e8:	andeq	r1, r1, r0, ror #28
   150ec:	bx	lr
   150f0:	ldr	r3, [pc, #12]	; 15104 <__mempcpy_chk@plt+0x4024>
   150f4:	mov	r1, #0
   150f8:	add	r3, pc, r3
   150fc:	ldr	r2, [r3]
   15100:	b	10ffc <__cxa_atexit@plt>
   15104:	andeq	r1, r1, ip, ror #31
   15108:	mov	r2, r1
   1510c:	mov	r1, r0
   15110:	mov	r0, #3
   15114:	b	110c8 <__lxstat64@plt>

Disassembly of section .fini:

00015118 <.fini>:
   15118:	push	{r3, lr}
   1511c:	pop	{r3, pc}
