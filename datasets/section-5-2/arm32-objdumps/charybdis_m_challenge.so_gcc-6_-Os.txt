
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000086c <_init>:
 86c:	push	{r3, lr}
 870:	bl	a00 <call_weak_fn>
 874:	pop	{r3, pc}

Disassembly of section .plt:

00000878 <.plt>:
 878:	push	{lr}		; (str lr, [sp, #-4]!)
 87c:	ldr	lr, [pc, #4]	; 888 <.plt+0x10>
 880:	add	lr, pc, lr
 884:	ldr	pc, [lr, #8]!
 888:	.word	0x00011778

0000088c <calloc@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1912]!	; 0x778

00000898 <rb_current_time@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1904]!	; 0x770

000008a4 <__cxa_finalize@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1896]!	; 0x768

000008b0 <RSA_public_encrypt@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1888]!	; 0x760

000008bc <sendto_one@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1880]!	; 0x758

000008c8 <free@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1872]!	; 0x750

000008d4 <rb_strcasecmp@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1864]!	; 0x748

000008e0 <RSA_size@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1856]!	; 0x740

000008ec <rb_outofmemory@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1848]!	; 0x738

000008f8 <memcmp@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1840]!	; 0x730

00000904 <sendto_realops_snomask@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1832]!	; 0x728

00000910 <rb_base64_decode@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1824]!	; 0x720

0000091c <strcpy@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1816]!	; 0x718

00000928 <malloc@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1808]!	; 0x710

00000934 <rb_get_random@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1800]!	; 0x708

00000940 <__gmon_start__@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1792]!	; 0x700

0000094c <OPENSSL_init_crypto@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1784]!	; 0x6f8

00000958 <send_oper_motd@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1776]!	; 0x6f0

00000964 <sendto_one_numeric@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1768]!	; 0x6e8

00000970 <strlen@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1760]!	; 0x6e0

0000097c <SHA1_Update@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1752]!	; 0x6d8

00000988 <ERR_error_string@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1744]!	; 0x6d0

00000994 <ilog@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1736]!	; 0x6c8

000009a0 <SHA1_Init@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1728]!	; 0x6c0

000009ac <ERR_get_error@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1720]!	; 0x6b8

000009b8 <sendto_one_notice@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1712]!	; 0x6b0

000009c4 <rb_strlcpy@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1704]!	; 0x6a8

000009d0 <find_oper_conf@plt>:
 9d0:	add	ip, pc, #0, 12
 9d4:	add	ip, ip, #69632	; 0x11000
 9d8:	ldr	pc, [ip, #1696]!	; 0x6a0

000009dc <oper_up@plt>:
 9dc:	add	ip, pc, #0, 12
 9e0:	add	ip, ip, #69632	; 0x11000
 9e4:	ldr	pc, [ip, #1688]!	; 0x698

000009e8 <rb_base64_encode@plt>:
 9e8:	add	ip, pc, #0, 12
 9ec:	add	ip, ip, #69632	; 0x11000
 9f0:	ldr	pc, [ip, #1680]!	; 0x690

000009f4 <SHA1_Final@plt>:
 9f4:	add	ip, pc, #0, 12
 9f8:	add	ip, ip, #69632	; 0x11000
 9fc:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

00000a00 <call_weak_fn>:
     a00:	ldr	r3, [pc, #20]	; a1c <call_weak_fn+0x1c>
     a04:	ldr	r2, [pc, #20]	; a20 <call_weak_fn+0x20>
     a08:	add	r3, pc, r3
     a0c:	ldr	r2, [r3, r2]
     a10:	cmp	r2, #0
     a14:	bxeq	lr
     a18:	b	940 <__gmon_start__@plt>
     a1c:	.word	0x000115f0
     a20:	.word	0x00000090

00000a24 <deregister_tm_clones>:
     a24:	ldr	r3, [pc, #52]	; a60 <deregister_tm_clones+0x3c>
     a28:	ldr	r0, [pc, #52]	; a64 <deregister_tm_clones+0x40>
     a2c:	add	r3, pc, r3
     a30:	add	r0, pc, r0
     a34:	add	r3, r3, #3
     a38:	sub	r3, r3, r0
     a3c:	cmp	r3, #6
     a40:	ldr	r3, [pc, #32]	; a68 <deregister_tm_clones+0x44>
     a44:	add	r3, pc, r3
     a48:	bxls	lr
     a4c:	ldr	r2, [pc, #24]	; a6c <deregister_tm_clones+0x48>
     a50:	ldr	r3, [r3, r2]
     a54:	cmp	r3, #0
     a58:	bxeq	lr
     a5c:	bx	r3
     a60:	.word	0x000116e8
     a64:	.word	0x000116e4
     a68:	.word	0x000115b4
     a6c:	.word	0x0000008c

00000a70 <register_tm_clones>:
     a70:	ldr	r1, [pc, #56]	; ab0 <register_tm_clones+0x40>
     a74:	ldr	r0, [pc, #56]	; ab4 <register_tm_clones+0x44>
     a78:	add	r1, pc, r1
     a7c:	add	r0, pc, r0
     a80:	sub	r1, r1, r0
     a84:	ldr	r3, [pc, #44]	; ab8 <register_tm_clones+0x48>
     a88:	asr	r1, r1, #2
     a8c:	add	r3, pc, r3
     a90:	add	r1, r1, r1, lsr #31
     a94:	asrs	r1, r1, #1
     a98:	bxeq	lr
     a9c:	ldr	r2, [pc, #24]	; abc <register_tm_clones+0x4c>
     aa0:	ldr	r3, [r3, r2]
     aa4:	cmp	r3, #0
     aa8:	bxeq	lr
     aac:	bx	r3
     ab0:	.word	0x0001169c
     ab4:	.word	0x00011698
     ab8:	.word	0x0001156c
     abc:	.word	0x00000098

00000ac0 <__do_global_dtors_aux>:
     ac0:	ldr	r3, [pc, #76]	; b14 <__do_global_dtors_aux+0x54>
     ac4:	ldr	r2, [pc, #76]	; b18 <__do_global_dtors_aux+0x58>
     ac8:	add	r3, pc, r3
     acc:	add	r2, pc, r2
     ad0:	ldrb	r3, [r3]
     ad4:	cmp	r3, #0
     ad8:	bxne	lr
     adc:	ldr	r3, [pc, #56]	; b1c <__do_global_dtors_aux+0x5c>
     ae0:	push	{r4, lr}
     ae4:	ldr	r3, [r2, r3]
     ae8:	cmp	r3, #0
     aec:	beq	afc <__do_global_dtors_aux+0x3c>
     af0:	ldr	r3, [pc, #40]	; b20 <__do_global_dtors_aux+0x60>
     af4:	ldr	r0, [pc, r3]
     af8:	bl	8a4 <__cxa_finalize@plt>
     afc:	bl	a24 <deregister_tm_clones>
     b00:	ldr	r3, [pc, #28]	; b24 <__do_global_dtors_aux+0x64>
     b04:	mov	r2, #1
     b08:	add	r3, pc, r3
     b0c:	strb	r2, [r3]
     b10:	pop	{r4, pc}
     b14:	.word	0x0001164c
     b18:	.word	0x0001152c
     b1c:	.word	0x00000088
     b20:	.word	0x000115a8
     b24:	.word	0x0001160c

00000b28 <frame_dummy>:
     b28:	ldr	r0, [pc, #56]	; b68 <frame_dummy+0x40>
     b2c:	ldr	r3, [pc, #56]	; b6c <frame_dummy+0x44>
     b30:	add	r0, pc, r0
     b34:	ldr	r2, [r0]
     b38:	add	r3, pc, r3
     b3c:	cmp	r2, #0
     b40:	bne	b48 <frame_dummy+0x20>
     b44:	b	a70 <register_tm_clones>
     b48:	ldr	r2, [pc, #32]	; b70 <frame_dummy+0x48>
     b4c:	ldr	r3, [r3, r2]
     b50:	cmp	r3, #0
     b54:	beq	b44 <frame_dummy+0x1c>
     b58:	push	{r4, lr}
     b5c:	blx	r3
     b60:	pop	{r4, lr}
     b64:	b	a70 <register_tm_clones>
     b68:	.word	0x000113c4
     b6c:	.word	0x000114c0
     b70:	.word	0x00000094

00000b74 <rb_free>:
     b74:	cmp	r0, #0
     b78:	bxeq	lr
     b7c:	b	8c8 <free@plt>

00000b80 <cleanup_challenge>:
     b80:	ldr	r3, [r0, #432]	; 0x1b0
     b84:	cmp	r3, #0
     b88:	bxeq	lr
     b8c:	push	{r4, lr}
     b90:	mov	r4, r0
     b94:	ldr	r0, [r3, #284]	; 0x11c
     b98:	bl	b74 <rb_free>
     b9c:	ldr	r3, [r4, #24]
     ba0:	ldr	r0, [r3, #32]
     ba4:	bl	b74 <rb_free>
     ba8:	ldr	r2, [r4, #432]	; 0x1b0
     bac:	ldr	r1, [r4, #24]
     bb0:	mov	r3, #0
     bb4:	str	r3, [r2, #284]	; 0x11c
     bb8:	str	r3, [r1, #32]
     bbc:	str	r3, [r2, #304]	; 0x130
     bc0:	pop	{r4, pc}

00000bc4 <m_challenge>:
     bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bc8:	sub	sp, sp, #668	; 0x29c
     bcc:	mov	r3, #0
     bd0:	str	r3, [sp, #28]
     bd4:	ldr	r3, [r2, #56]	; 0x38
     bd8:	ldr	r5, [pc, #1600]	; 1220 <m_challenge+0x65c>
     bdc:	tst	r3, #4096	; 0x1000
     be0:	add	r5, pc, r5
     be4:	mov	r4, r2
     be8:	ldr	r8, [sp, #704]	; 0x2c0
     bec:	beq	c20 <m_challenge+0x5c>
     bf0:	ldr	r3, [pc, #1580]	; 1224 <m_challenge+0x660>
     bf4:	ldr	r1, [pc, #1580]	; 1228 <m_challenge+0x664>
     bf8:	mov	r0, r4
     bfc:	ldr	r2, [r5, r3]
     c00:	add	r1, pc, r1
     c04:	add	r3, r4, #88	; 0x58
     c08:	add	r2, r2, #88	; 0x58
     c0c:	bl	8bc <sendto_one@plt>
     c10:	mov	r0, r4
     c14:	bl	958 <send_oper_motd@plt>
     c18:	add	sp, sp, #668	; 0x29c
     c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c20:	ldr	r3, [r8, #4]
     c24:	ldrb	r3, [r3]
     c28:	cmp	r3, #43	; 0x2b
     c2c:	bne	e78 <m_challenge+0x2b4>
     c30:	ldr	r3, [r2, #432]	; 0x1b0
     c34:	ldr	r3, [r3, #284]	; 0x11c
     c38:	cmp	r3, #0
     c3c:	beq	c18 <m_challenge+0x54>
     c40:	bl	898 <rb_current_time@plt>
     c44:	ldr	r3, [r4, #432]	; 0x1b0
     c48:	add	sl, r4, #288	; 0x120
     c4c:	add	r6, r4, #88	; 0x58
     c50:	ldr	r3, [r3, #304]	; 0x130
     c54:	add	r7, r4, #152	; 0x98
     c58:	add	r9, r4, #163	; 0xa3
     c5c:	add	sl, sl, #3
     c60:	sub	r0, r0, r3
     c64:	cmp	r0, #180	; 0xb4
     c68:	ble	ce8 <m_challenge+0x124>
     c6c:	ldr	r3, [pc, #1456]	; 1224 <m_challenge+0x660>
     c70:	ldr	r1, [pc, #1460]	; 122c <m_challenge+0x668>
     c74:	mov	r0, r4
     c78:	ldr	r2, [r5, r3]
     c7c:	add	r1, pc, r1
     c80:	mov	r3, r6
     c84:	add	r2, r2, #88	; 0x58
     c88:	bl	8bc <sendto_one@plt>
     c8c:	ldr	r2, [r4, #24]
     c90:	ldr	r1, [pc, #1432]	; 1230 <m_challenge+0x66c>
     c94:	stm	sp, {r7, r9, sl}
     c98:	mov	r3, r6
     c9c:	ldr	r2, [r2, #32]
     ca0:	add	r1, pc, r1
     ca4:	mov	r0, #4
     ca8:	bl	994 <ilog@plt>
     cac:	ldr	r3, [pc, #1408]	; 1234 <m_challenge+0x670>
     cb0:	ldr	r3, [r5, r3]
     cb4:	ldr	r3, [r3, #84]	; 0x54
     cb8:	cmp	r3, #0
     cbc:	beq	cdc <m_challenge+0x118>
     cc0:	ldr	r2, [pc, #1392]	; 1238 <m_challenge+0x674>
     cc4:	mov	r1, #256	; 0x100
     cc8:	stm	sp, {r7, r9}
     ccc:	mov	r3, r6
     cd0:	add	r2, pc, r2
     cd4:	mov	r0, r1
     cd8:	bl	904 <sendto_realops_snomask@plt>
     cdc:	mov	r0, r4
     ce0:	bl	b80 <cleanup_challenge>
     ce4:	b	c18 <m_challenge+0x54>
     ce8:	ldr	fp, [r8, #4]
     cec:	add	fp, fp, #1
     cf0:	str	fp, [r8, #4]
     cf4:	mov	r0, fp
     cf8:	bl	970 <strlen@plt>
     cfc:	add	r2, sp, #28
     d00:	mov	r1, r0
     d04:	mov	r0, fp
     d08:	bl	910 <rb_base64_decode@plt>
     d0c:	ldr	r2, [sp, #28]
     d10:	cmp	r2, #20
     d14:	mov	r8, r0
     d18:	bne	d34 <m_challenge+0x170>
     d1c:	ldr	r3, [r4, #432]	; 0x1b0
     d20:	mov	r1, r0
     d24:	ldr	r0, [r3, #284]	; 0x11c
     d28:	bl	8f8 <memcmp@plt>
     d2c:	cmp	r0, #0
     d30:	beq	db0 <m_challenge+0x1ec>
     d34:	ldr	r3, [pc, #1256]	; 1224 <m_challenge+0x660>
     d38:	ldr	r1, [pc, #1276]	; 123c <m_challenge+0x678>
     d3c:	mov	r0, r4
     d40:	ldr	r2, [r5, r3]
     d44:	add	r1, pc, r1
     d48:	mov	r3, r6
     d4c:	add	r2, r2, #88	; 0x58
     d50:	bl	8bc <sendto_one@plt>
     d54:	ldr	r2, [r4, #24]
     d58:	ldr	r1, [pc, #1248]	; 1240 <m_challenge+0x67c>
     d5c:	stm	sp, {r7, r9, sl}
     d60:	mov	r3, r6
     d64:	ldr	r2, [r2, #32]
     d68:	add	r1, pc, r1
     d6c:	mov	r0, #4
     d70:	bl	994 <ilog@plt>
     d74:	ldr	r3, [pc, #1208]	; 1234 <m_challenge+0x670>
     d78:	ldr	r3, [r5, r3]
     d7c:	ldr	r3, [r3, #84]	; 0x54
     d80:	cmp	r3, #0
     d84:	beq	da4 <m_challenge+0x1e0>
     d88:	ldr	r2, [pc, #1204]	; 1244 <m_challenge+0x680>
     d8c:	mov	r1, #256	; 0x100
     d90:	stm	sp, {r7, r9}
     d94:	mov	r3, r6
     d98:	add	r2, pc, r2
     d9c:	mov	r0, r1
     da0:	bl	904 <sendto_realops_snomask@plt>
     da4:	mov	r0, r8
     da8:	bl	b74 <rb_free>
     dac:	b	cdc <m_challenge+0x118>
     db0:	mov	r0, r8
     db4:	bl	b74 <rb_free>
     db8:	ldr	r3, [r4, #24]
     dbc:	mov	r2, sl
     dc0:	add	r1, r4, #227	; 0xe3
     dc4:	ldr	r3, [r3, #32]
     dc8:	mov	r0, r7
     dcc:	bl	9d0 <find_oper_conf@plt>
     dd0:	subs	r8, r0, #0
     dd4:	bne	e40 <m_challenge+0x27c>
     dd8:	ldr	r2, [pc, #1128]	; 1248 <m_challenge+0x684>
     ddc:	ldr	r1, [pc, #1128]	; 124c <m_challenge+0x688>
     de0:	add	r2, pc, r2
     de4:	mov	r0, r4
     de8:	bl	964 <sendto_one_numeric@plt>
     dec:	ldr	r2, [r4, #24]
     df0:	ldr	r1, [pc, #1112]	; 1250 <m_challenge+0x68c>
     df4:	stm	sp, {r7, r9, sl}
     df8:	mov	r3, r6
     dfc:	ldr	r2, [r2, #32]
     e00:	add	r1, pc, r1
     e04:	mov	r0, #4
     e08:	bl	994 <ilog@plt>
     e0c:	ldr	r3, [pc, #1056]	; 1234 <m_challenge+0x670>
     e10:	ldr	r3, [r5, r3]
     e14:	ldr	r3, [r3, #84]	; 0x54
     e18:	cmp	r3, #0
     e1c:	beq	c18 <m_challenge+0x54>
     e20:	ldr	r2, [pc, #1068]	; 1254 <m_challenge+0x690>
     e24:	mov	r3, r6
     e28:	add	r2, pc, r2
     e2c:	stm	sp, {r7, r9}
     e30:	mov	r1, #256	; 0x100
     e34:	mov	r0, #256	; 0x100
     e38:	bl	904 <sendto_realops_snomask@plt>
     e3c:	b	c18 <m_challenge+0x54>
     e40:	mov	r0, r4
     e44:	bl	b80 <cleanup_challenge>
     e48:	mov	r1, r8
     e4c:	mov	r0, r4
     e50:	bl	9dc <oper_up@plt>
     e54:	ldr	r2, [r4, #24]
     e58:	ldr	r1, [pc, #1016]	; 1258 <m_challenge+0x694>
     e5c:	stm	sp, {r7, r9, sl}
     e60:	mov	r3, r6
     e64:	ldr	r2, [r2, #32]
     e68:	add	r1, pc, r1
     e6c:	mov	r0, #3
     e70:	bl	994 <ilog@plt>
     e74:	b	c18 <m_challenge+0x54>
     e78:	add	r9, r4, #288	; 0x120
     e7c:	mov	r0, r2
     e80:	add	r7, r4, #152	; 0x98
     e84:	add	r9, r9, #3
     e88:	bl	b80 <cleanup_challenge>
     e8c:	ldr	r3, [r8, #4]
     e90:	mov	r2, r9
     e94:	add	r1, r4, #227	; 0xe3
     e98:	mov	r0, r7
     e9c:	bl	9d0 <find_oper_conf@plt>
     ea0:	subs	r6, r0, #0
     ea4:	bne	f10 <m_challenge+0x34c>
     ea8:	ldr	r2, [pc, #940]	; 125c <m_challenge+0x698>
     eac:	mov	r0, r4
     eb0:	add	r2, pc, r2
     eb4:	ldr	r1, [pc, #912]	; 124c <m_challenge+0x688>
     eb8:	bl	964 <sendto_one_numeric@plt>
     ebc:	add	r6, r4, #88	; 0x58
     ec0:	ldr	r1, [pc, #920]	; 1260 <m_challenge+0x69c>
     ec4:	add	r4, r4, #163	; 0xa3
     ec8:	str	r7, [sp]
     ecc:	stmib	sp, {r4, r9}
     ed0:	mov	r3, r6
     ed4:	ldr	r2, [r8, #4]
     ed8:	add	r1, pc, r1
     edc:	mov	r0, #4
     ee0:	bl	994 <ilog@plt>
     ee4:	ldr	r3, [pc, #840]	; 1234 <m_challenge+0x670>
     ee8:	ldr	r3, [r5, r3]
     eec:	ldr	r3, [r3, #84]	; 0x54
     ef0:	cmp	r3, #0
     ef4:	beq	c18 <m_challenge+0x54>
     ef8:	ldr	r2, [pc, #868]	; 1264 <m_challenge+0x6a0>
     efc:	str	r4, [sp, #4]
     f00:	str	r7, [sp]
     f04:	mov	r3, r6
     f08:	add	r2, pc, r2
     f0c:	b	e30 <m_challenge+0x26c>
     f10:	ldr	r3, [r6, #40]	; 0x28
     f14:	cmp	r3, #0
     f18:	bne	f30 <m_challenge+0x36c>
     f1c:	ldr	r1, [pc, #836]	; 1268 <m_challenge+0x6a4>
     f20:	add	r1, pc, r1
     f24:	mov	r0, r4
     f28:	bl	9b8 <sendto_one_notice@plt>
     f2c:	b	c18 <m_challenge+0x54>
     f30:	ldr	r3, [r6, #20]
     f34:	tst	r3, #524288	; 0x80000
     f38:	beq	fb4 <m_challenge+0x3f0>
     f3c:	ldr	sl, [r4, #56]	; 0x38
     f40:	ands	sl, sl, #16384	; 0x4000
     f44:	bne	fb4 <m_challenge+0x3f0>
     f48:	ldr	r2, [pc, #796]	; 126c <m_challenge+0x6a8>
     f4c:	mov	r0, r4
     f50:	add	r2, pc, r2
     f54:	ldr	r1, [pc, #752]	; 124c <m_challenge+0x688>
     f58:	bl	964 <sendto_one_numeric@plt>
     f5c:	add	r6, r4, #88	; 0x58
     f60:	ldr	r1, [pc, #776]	; 1270 <m_challenge+0x6ac>
     f64:	add	r4, r4, #163	; 0xa3
     f68:	str	r7, [sp]
     f6c:	stmib	sp, {r4, r9}
     f70:	mov	r3, r6
     f74:	ldr	r2, [r8, #4]
     f78:	add	r1, pc, r1
     f7c:	mov	r0, #4
     f80:	bl	994 <ilog@plt>
     f84:	ldr	r3, [pc, #680]	; 1234 <m_challenge+0x670>
     f88:	ldr	r3, [r5, r3]
     f8c:	ldr	r3, [r3, #84]	; 0x54
     f90:	cmp	r3, #0
     f94:	beq	c18 <m_challenge+0x54>
     f98:	ldr	r2, [pc, #724]	; 1274 <m_challenge+0x6b0>
     f9c:	mov	r3, r6
     fa0:	add	r2, pc, r2
     fa4:	str	r4, [sp, #4]
     fa8:	str	r7, [sp]
     fac:	mov	r1, #0
     fb0:	b	e34 <m_challenge+0x270>
     fb4:	ldr	r1, [r6, #16]
     fb8:	cmp	r1, #0
     fbc:	beq	1040 <m_challenge+0x47c>
     fc0:	ldr	r0, [r4, #444]	; 0x1bc
     fc4:	cmp	r0, #0
     fc8:	bne	1034 <m_challenge+0x470>
     fcc:	ldr	r2, [pc, #676]	; 1278 <m_challenge+0x6b4>
     fd0:	mov	r0, r4
     fd4:	add	r2, pc, r2
     fd8:	ldr	r1, [pc, #620]	; 124c <m_challenge+0x688>
     fdc:	bl	964 <sendto_one_numeric@plt>
     fe0:	add	r6, r4, #88	; 0x58
     fe4:	ldr	r1, [pc, #656]	; 127c <m_challenge+0x6b8>
     fe8:	add	r4, r4, #163	; 0xa3
     fec:	str	r7, [sp]
     ff0:	stmib	sp, {r4, r9}
     ff4:	mov	r3, r6
     ff8:	ldr	r2, [r8, #4]
     ffc:	add	r1, pc, r1
    1000:	mov	r0, #4
    1004:	bl	994 <ilog@plt>
    1008:	ldr	r3, [pc, #548]	; 1234 <m_challenge+0x670>
    100c:	ldr	r3, [r5, r3]
    1010:	ldr	r3, [r3, #84]	; 0x54
    1014:	cmp	r3, #0
    1018:	beq	c18 <m_challenge+0x54>
    101c:	ldr	r2, [pc, #604]	; 1280 <m_challenge+0x6bc>
    1020:	str	r4, [sp, #4]
    1024:	str	r7, [sp]
    1028:	mov	r3, r6
    102c:	add	r2, pc, r2
    1030:	b	fac <m_challenge+0x3e8>
    1034:	bl	8d4 <rb_strcasecmp@plt>
    1038:	cmp	r0, #0
    103c:	bne	fcc <m_challenge+0x408>
    1040:	ldr	sl, [r6, #40]	; 0x28
    1044:	cmp	sl, #0
    1048:	beq	11c4 <m_challenge+0x600>
    104c:	add	r9, sp, #128	; 0x80
    1050:	mov	r1, #128	; 0x80
    1054:	mov	r0, r9
    1058:	ldr	r8, [r4, #432]	; 0x1b0
    105c:	bl	934 <rb_get_random@plt>
    1060:	cmp	r0, #0
    1064:	beq	1178 <m_challenge+0x5b4>
    1068:	add	r7, sp, #32
    106c:	mov	r0, r7
    1070:	bl	9a0 <SHA1_Init@plt>
    1074:	mov	r2, #128	; 0x80
    1078:	mov	r1, r9
    107c:	mov	r0, r7
    1080:	bl	97c <SHA1_Update@plt>
    1084:	mov	r0, #20
    1088:	bl	928 <malloc@plt>
    108c:	mov	r1, r7
    1090:	str	r0, [r8, #284]	; 0x11c
    1094:	bl	9f4 <SHA1_Final@plt>
    1098:	mov	r0, sl
    109c:	bl	8e0 <RSA_size@plt>
    10a0:	mov	r1, r0
    10a4:	mov	r0, #1
    10a8:	bl	88c <calloc@plt>
    10ac:	subs	r7, r0, #0
    10b0:	bne	10b8 <m_challenge+0x4f4>
    10b4:	bl	8ec <rb_outofmemory@plt>
    10b8:	mov	r3, #4
    10bc:	str	r3, [sp]
    10c0:	mov	r1, r9
    10c4:	mov	r3, sl
    10c8:	mov	r2, r7
    10cc:	mov	r0, #128	; 0x80
    10d0:	bl	8b0 <RSA_public_encrypt@plt>
    10d4:	subs	r1, r0, #0
    10d8:	mov	r0, r7
    10dc:	blt	1164 <m_challenge+0x5a0>
    10e0:	bl	9e8 <rb_base64_encode@plt>
    10e4:	add	fp, sp, #256	; 0x100
    10e8:	mov	r9, r0
    10ec:	mov	r0, r7
    10f0:	bl	b74 <rb_free>
    10f4:	ldr	r7, [r4, #432]	; 0x1b0
    10f8:	bl	898 <rb_current_time@plt>
    10fc:	ldr	r3, [pc, #384]	; 1284 <m_challenge+0x6c0>
    1100:	mov	r8, r9
    1104:	add	r3, pc, r3
    1108:	str	r3, [sp, #20]
    110c:	str	r0, [r7, #304]	; 0x130
    1110:	ldr	r2, [pc, #368]	; 1288 <m_challenge+0x6c4>
    1114:	mov	r1, r8
    1118:	mov	r0, fp
    111c:	bl	9c4 <rb_strlcpy@plt>
    1120:	ldr	r3, [pc, #252]	; 1224 <m_challenge+0x660>
    1124:	add	sl, r4, #88	; 0x58
    1128:	ldr	r1, [sp, #20]
    112c:	str	r0, [sp, #16]
    1130:	ldr	r7, [r5, r3]
    1134:	mov	r0, r4
    1138:	add	r7, r7, #88	; 0x58
    113c:	mov	r3, sl
    1140:	mov	r2, r7
    1144:	str	fp, [sp]
    1148:	bl	8bc <sendto_one@plt>
    114c:	ldr	r3, [sp, #16]
    1150:	ldr	r2, [pc, #304]	; 1288 <m_challenge+0x6c4>
    1154:	cmp	r3, r2
    1158:	bls	11d0 <m_challenge+0x60c>
    115c:	add	r8, r8, #404	; 0x194
    1160:	b	1110 <m_challenge+0x54c>
    1164:	bl	b74 <rb_free>
    1168:	ldr	r0, [r8, #284]	; 0x11c
    116c:	bl	b74 <rb_free>
    1170:	mov	r3, #0
    1174:	str	r3, [r8, #284]	; 0x11c
    1178:	mov	r2, #0
    117c:	mov	r0, #2
    1180:	mov	r1, #0
    1184:	bl	94c <OPENSSL_init_crypto@plt>
    1188:	ldr	r7, [pc, #252]	; 128c <m_challenge+0x6c8>
    118c:	mov	r5, #100	; 0x64
    1190:	mov	r6, #0
    1194:	add	r7, pc, r7
    1198:	bl	9ac <ERR_get_error@plt>
    119c:	cmp	r0, #0
    11a0:	beq	11c4 <m_challenge+0x600>
    11a4:	mov	r1, r6
    11a8:	bl	988 <ERR_error_string@plt>
    11ac:	mov	r1, r7
    11b0:	mov	r2, r0
    11b4:	mov	r0, r6
    11b8:	bl	994 <ilog@plt>
    11bc:	subs	r5, r5, #1
    11c0:	bne	1198 <m_challenge+0x5d4>
    11c4:	ldr	r1, [pc, #196]	; 1290 <m_challenge+0x6cc>
    11c8:	add	r1, pc, r1
    11cc:	b	f24 <m_challenge+0x360>
    11d0:	ldr	r1, [pc, #188]	; 1294 <m_challenge+0x6d0>
    11d4:	mov	r3, sl
    11d8:	mov	r2, r7
    11dc:	add	r1, pc, r1
    11e0:	mov	r0, r4
    11e4:	bl	8bc <sendto_one@plt>
    11e8:	mov	r0, r9
    11ec:	bl	b74 <rb_free>
    11f0:	ldr	r5, [r4, #24]
    11f4:	ldr	r4, [r6]
    11f8:	mov	r0, r4
    11fc:	bl	970 <strlen@plt>
    1200:	add	r0, r0, #1
    1204:	bl	928 <malloc@plt>
    1208:	subs	r6, r0, #0
    120c:	beq	10b4 <m_challenge+0x4f0>
    1210:	mov	r1, r4
    1214:	bl	91c <strcpy@plt>
    1218:	str	r6, [r5, #32]
    121c:	b	c18 <m_challenge+0x54>
    1220:	.word	0x00011418
    1224:	.word	0x0000009c
    1228:	.word	0x000006e3
    122c:	.word	0x000006f3
    1230:	.word	0x000006ee
    1234:	.word	0x000000a0
    1238:	.word	0x000006e8
    123c:	.word	0x0000062b
    1240:	.word	0x00000678
    1244:	.word	0x00000671
    1248:	.word	0x00000650
    124c:	.word	0x000001eb
    1250:	.word	0x00000669
    1254:	.word	0x00000665
    1258:	.word	0x0000065c
    125c:	.word	0x00000580
    1260:	.word	0x00000591
    1264:	.word	0x00000585
    1268:	.word	0x000005bd
    126c:	.word	0x000004e0
    1270:	.word	0x000005a9
    1274:	.word	0x000005be
    1278:	.word	0x0000045c
    127c:	.word	0x0000059b
    1280:	.word	0x000005ba
    1284:	.word	0x0000053c
    1288:	.word	0x00000195
    128c:	.word	0x0000049e
    1290:	.word	0x000004a4
    1294:	.word	0x00000473

Disassembly of section .fini:

00001298 <_fini>:
    1298:	push	{r3, lr}
    129c:	pop	{r3, pc}
