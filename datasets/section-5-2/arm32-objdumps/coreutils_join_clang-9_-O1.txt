
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00011094 <.init>:
   11094:	push	{r3, lr}
   11098:	bl	113cc <__assert_fail@plt+0x48>
   1109c:	pop	{r3, pc}

Disassembly of section .plt:

000110a0 <fdopen@plt-0x14>:
   110a0:	push	{lr}		; (str lr, [sp, #-4]!)
   110a4:	ldr	lr, [pc, #4]	; 110b0 <fdopen@plt-0x4>
   110a8:	add	lr, pc, lr
   110ac:	ldr	pc, [lr, #8]!
   110b0:	andeq	r7, r1, r0, asr pc

000110b4 <fdopen@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #3920]!	; 0xf50

000110c0 <calloc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #3912]!	; 0xf48

000110cc <fputs_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #3904]!	; 0xf40

000110d8 <raise@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #3896]!	; 0xf38

000110e4 <strcmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #3888]!	; 0xf30

000110f0 <posix_fadvise64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #3880]!	; 0xf28

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #3872]!	; 0xf20

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #94208	; 0x17000
   11110:	ldr	pc, [ip, #3864]!	; 0xf18

00011114 <_exit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #94208	; 0x17000
   1111c:	ldr	pc, [ip, #3856]!	; 0xf10

00011120 <memcpy@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #94208	; 0x17000
   11128:	ldr	pc, [ip, #3848]!	; 0xf08

0001112c <mbsinit@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #94208	; 0x17000
   11134:	ldr	pc, [ip, #3840]!	; 0xf00

00011138 <fwrite_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #94208	; 0x17000
   11140:	ldr	pc, [ip, #3832]!	; 0xef8

00011144 <memcmp@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #94208	; 0x17000
   1114c:	ldr	pc, [ip, #3824]!	; 0xef0

00011150 <getc_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #94208	; 0x17000
   11158:	ldr	pc, [ip, #3816]!	; 0xee8

0001115c <dcgettext@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #94208	; 0x17000
   11164:	ldr	pc, [ip, #3808]!	; 0xee0

00011168 <realloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #94208	; 0x17000
   11170:	ldr	pc, [ip, #3800]!	; 0xed8

00011174 <textdomain@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #94208	; 0x17000
   1117c:	ldr	pc, [ip, #3792]!	; 0xed0

00011180 <iswprint@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #94208	; 0x17000
   11188:	ldr	pc, [ip, #3784]!	; 0xec8

0001118c <fwrite@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #94208	; 0x17000
   11194:	ldr	pc, [ip, #3776]!	; 0xec0

00011198 <lseek64@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #94208	; 0x17000
   111a0:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a4 <__ctype_get_mb_cur_max@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #94208	; 0x17000
   111ac:	ldr	pc, [ip, #3760]!	; 0xeb0

000111b0 <__fpending@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #94208	; 0x17000
   111b8:	ldr	pc, [ip, #3752]!	; 0xea8

000111bc <ferror_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #94208	; 0x17000
   111c4:	ldr	pc, [ip, #3744]!	; 0xea0

000111c8 <mbrtowc@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #94208	; 0x17000
   111d0:	ldr	pc, [ip, #3736]!	; 0xe98

000111d4 <error@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #94208	; 0x17000
   111dc:	ldr	pc, [ip, #3728]!	; 0xe90

000111e0 <strcoll@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #94208	; 0x17000
   111e8:	ldr	pc, [ip, #3720]!	; 0xe88

000111ec <malloc@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #94208	; 0x17000
   111f4:	ldr	pc, [ip, #3712]!	; 0xe80

000111f8 <__libc_start_main@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #94208	; 0x17000
   11200:	ldr	pc, [ip, #3704]!	; 0xe78

00011204 <__freading@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #94208	; 0x17000
   1120c:	ldr	pc, [ip, #3696]!	; 0xe70

00011210 <__ctype_toupper_loc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #94208	; 0x17000
   11218:	ldr	pc, [ip, #3688]!	; 0xe68

0001121c <__gmon_start__@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #94208	; 0x17000
   11224:	ldr	pc, [ip, #3680]!	; 0xe60

00011228 <getopt_long@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #94208	; 0x17000
   11230:	ldr	pc, [ip, #3672]!	; 0xe58

00011234 <__ctype_b_loc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #94208	; 0x17000
   1123c:	ldr	pc, [ip, #3664]!	; 0xe50

00011240 <exit@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #94208	; 0x17000
   11248:	ldr	pc, [ip, #3656]!	; 0xe48

0001124c <bcmp@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #94208	; 0x17000
   11254:	ldr	pc, [ip, #3648]!	; 0xe40

00011258 <strtoul@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #94208	; 0x17000
   11260:	ldr	pc, [ip, #3640]!	; 0xe38

00011264 <strlen@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #94208	; 0x17000
   1126c:	ldr	pc, [ip, #3632]!	; 0xe30

00011270 <strchr@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #94208	; 0x17000
   11278:	ldr	pc, [ip, #3624]!	; 0xe28

0001127c <__errno_location@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #94208	; 0x17000
   11284:	ldr	pc, [ip, #3616]!	; 0xe20

00011288 <__cxa_atexit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #94208	; 0x17000
   11290:	ldr	pc, [ip, #3608]!	; 0xe18

00011294 <memset@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #94208	; 0x17000
   1129c:	ldr	pc, [ip, #3600]!	; 0xe10

000112a0 <__printf_chk@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #94208	; 0x17000
   112a8:	ldr	pc, [ip, #3592]!	; 0xe08

000112ac <fileno@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #94208	; 0x17000
   112b4:	ldr	pc, [ip, #3584]!	; 0xe00

000112b8 <strtoumax@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #94208	; 0x17000
   112c0:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c4 <__fprintf_chk@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #94208	; 0x17000
   112cc:	ldr	pc, [ip, #3568]!	; 0xdf0

000112d0 <memchr@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #94208	; 0x17000
   112d8:	ldr	pc, [ip, #3560]!	; 0xde8

000112dc <fclose@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #94208	; 0x17000
   112e4:	ldr	pc, [ip, #3552]!	; 0xde0

000112e8 <fseeko64@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #94208	; 0x17000
   112f0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f4 <fcntl64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #94208	; 0x17000
   112fc:	ldr	pc, [ip, #3536]!	; 0xdd0

00011300 <setlocale@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #94208	; 0x17000
   11308:	ldr	pc, [ip, #3528]!	; 0xdc8

0001130c <strrchr@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #94208	; 0x17000
   11314:	ldr	pc, [ip, #3520]!	; 0xdc0

00011318 <nl_langinfo@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #94208	; 0x17000
   11320:	ldr	pc, [ip, #3512]!	; 0xdb8

00011324 <fopen64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #94208	; 0x17000
   1132c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011330 <strpbrk@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #94208	; 0x17000
   11338:	ldr	pc, [ip, #3496]!	; 0xda8

0001133c <bindtextdomain@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #94208	; 0x17000
   11344:	ldr	pc, [ip, #3488]!	; 0xda0

00011348 <strncmp@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #94208	; 0x17000
   11350:	ldr	pc, [ip, #3480]!	; 0xd98

00011354 <abort@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #94208	; 0x17000
   1135c:	ldr	pc, [ip, #3472]!	; 0xd90

00011360 <feof_unlocked@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #94208	; 0x17000
   11368:	ldr	pc, [ip, #3464]!	; 0xd88

0001136c <close@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #94208	; 0x17000
   11374:	ldr	pc, [ip, #3456]!	; 0xd80

00011378 <putchar_unlocked@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #94208	; 0x17000
   11380:	ldr	pc, [ip, #3448]!	; 0xd78

00011384 <__assert_fail@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #94208	; 0x17000
   1138c:	ldr	pc, [ip, #3440]!	; 0xd70

Disassembly of section .text:

00011390 <.text>:
   11390:	mov	fp, #0
   11394:	mov	lr, #0
   11398:	pop	{r1}		; (ldr r1, [sp], #4)
   1139c:	mov	r2, sp
   113a0:	push	{r2}		; (str r2, [sp, #-4]!)
   113a4:	push	{r0}		; (str r0, [sp, #-4]!)
   113a8:	ldr	ip, [pc, #16]	; 113c0 <__assert_fail@plt+0x3c>
   113ac:	push	{ip}		; (str ip, [sp, #-4]!)
   113b0:	ldr	r0, [pc, #12]	; 113c4 <__assert_fail@plt+0x40>
   113b4:	ldr	r3, [pc, #12]	; 113c8 <__assert_fail@plt+0x44>
   113b8:	bl	111f8 <__libc_start_main@plt>
   113bc:	bl	11354 <abort@plt>
   113c0:	andeq	r7, r1, r8, lsr r6
   113c4:	muleq	r1, ip, r7
   113c8:	ldrdeq	r7, [r1], -r8
   113cc:	ldr	r3, [pc, #20]	; 113e8 <__assert_fail@plt+0x64>
   113d0:	ldr	r2, [pc, #20]	; 113ec <__assert_fail@plt+0x68>
   113d4:	add	r3, pc, r3
   113d8:	ldr	r2, [r3, r2]
   113dc:	cmp	r2, #0
   113e0:	bxeq	lr
   113e4:	b	1121c <__gmon_start__@plt>
   113e8:	andeq	r7, r1, r4, lsr #24
   113ec:	andeq	r0, r0, r0, lsl #2
   113f0:	ldr	r0, [pc, #24]	; 11410 <__assert_fail@plt+0x8c>
   113f4:	ldr	r3, [pc, #24]	; 11414 <__assert_fail@plt+0x90>
   113f8:	cmp	r3, r0
   113fc:	bxeq	lr
   11400:	ldr	r3, [pc, #16]	; 11418 <__assert_fail@plt+0x94>
   11404:	cmp	r3, #0
   11408:	bxeq	lr
   1140c:	bx	r3
   11410:	andeq	r9, r2, r8, ror #2
   11414:	andeq	r9, r2, r8, ror #2
   11418:	andeq	r0, r0, r0
   1141c:	ldr	r0, [pc, #36]	; 11448 <__assert_fail@plt+0xc4>
   11420:	ldr	r1, [pc, #36]	; 1144c <__assert_fail@plt+0xc8>
   11424:	sub	r1, r1, r0
   11428:	asr	r1, r1, #2
   1142c:	add	r1, r1, r1, lsr #31
   11430:	asrs	r1, r1, #1
   11434:	bxeq	lr
   11438:	ldr	r3, [pc, #16]	; 11450 <__assert_fail@plt+0xcc>
   1143c:	cmp	r3, #0
   11440:	bxeq	lr
   11444:	bx	r3
   11448:	andeq	r9, r2, r8, ror #2
   1144c:	andeq	r9, r2, r8, ror #2
   11450:	andeq	r0, r0, r0
   11454:	push	{r4, lr}
   11458:	ldr	r4, [pc, #24]	; 11478 <__assert_fail@plt+0xf4>
   1145c:	ldrb	r3, [r4]
   11460:	cmp	r3, #0
   11464:	popne	{r4, pc}
   11468:	bl	113f0 <__assert_fail@plt+0x6c>
   1146c:	mov	r3, #1
   11470:	strb	r3, [r4]
   11474:	pop	{r4, pc}
   11478:	andeq	r9, r2, ip, lsl #3
   1147c:	b	1141c <__assert_fail@plt+0x98>
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	mov	r4, r0
   1148c:	cmp	r0, #0
   11490:	bne	115d0 <__assert_fail@plt+0x24c>
   11494:	movw	r1, #30347	; 0x768b
   11498:	movt	r1, #1
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	bl	1115c <dcgettext@plt>
   114a8:	mov	r1, r0
   114ac:	movw	r0, #37384	; 0x9208
   114b0:	movt	r0, #2
   114b4:	ldr	r2, [r0]
   114b8:	mov	r0, #1
   114bc:	bl	112a0 <__printf_chk@plt>
   114c0:	movw	r1, #30382	; 0x76ae
   114c4:	movt	r1, #1
   114c8:	mov	r0, #0
   114cc:	mov	r2, #5
   114d0:	bl	1115c <dcgettext@plt>
   114d4:	movw	r5, #37252	; 0x9184
   114d8:	movt	r5, #2
   114dc:	ldr	r1, [r5]
   114e0:	bl	110cc <fputs_unlocked@plt>
   114e4:	movw	r1, #30532	; 0x7744
   114e8:	movt	r1, #1
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	bl	1115c <dcgettext@plt>
   114f8:	ldr	r1, [r5]
   114fc:	bl	110cc <fputs_unlocked@plt>
   11500:	movw	r1, #30592	; 0x7780
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	bl	1115c <dcgettext@plt>
   11514:	ldr	r1, [r5]
   11518:	bl	110cc <fputs_unlocked@plt>
   1151c:	movw	r1, #30815	; 0x785f
   11520:	movt	r1, #1
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	bl	1115c <dcgettext@plt>
   11530:	ldr	r1, [r5]
   11534:	bl	110cc <fputs_unlocked@plt>
   11538:	movw	r1, #31087	; 0x796f
   1153c:	movt	r1, #1
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	bl	1115c <dcgettext@plt>
   1154c:	ldr	r1, [r5]
   11550:	bl	110cc <fputs_unlocked@plt>
   11554:	movw	r1, #31618	; 0x7b82
   11558:	movt	r1, #1
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	bl	1115c <dcgettext@plt>
   11568:	ldr	r1, [r5]
   1156c:	bl	110cc <fputs_unlocked@plt>
   11570:	movw	r1, #31679	; 0x7bbf
   11574:	movt	r1, #1
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	bl	1115c <dcgettext@plt>
   11584:	ldr	r1, [r5]
   11588:	bl	110cc <fputs_unlocked@plt>
   1158c:	movw	r1, #31724	; 0x7bec
   11590:	movt	r1, #1
   11594:	mov	r0, #0
   11598:	mov	r2, #5
   1159c:	bl	1115c <dcgettext@plt>
   115a0:	ldr	r1, [r5]
   115a4:	bl	110cc <fputs_unlocked@plt>
   115a8:	movw	r1, #31778	; 0x7c22
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	bl	1115c <dcgettext@plt>
   115bc:	ldr	r1, [r5]
   115c0:	bl	110cc <fputs_unlocked@plt>
   115c4:	bl	11614 <__assert_fail@plt+0x290>
   115c8:	mov	r0, r4
   115cc:	bl	11240 <exit@plt>
   115d0:	movw	r0, #37240	; 0x9178
   115d4:	movt	r0, #2
   115d8:	ldr	r5, [r0]
   115dc:	movw	r1, #30308	; 0x7664
   115e0:	movt	r1, #1
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	bl	1115c <dcgettext@plt>
   115f0:	mov	r2, r0
   115f4:	movw	r0, #37384	; 0x9208
   115f8:	movt	r0, #2
   115fc:	ldr	r3, [r0]
   11600:	mov	r0, r5
   11604:	mov	r1, #1
   11608:	bl	112c4 <__fprintf_chk@plt>
   1160c:	mov	r0, r4
   11610:	bl	11240 <exit@plt>
   11614:	push	{r4, r5, r6, sl, fp, lr}
   11618:	add	fp, sp, #16
   1161c:	sub	sp, sp, #56	; 0x38
   11620:	movw	r0, #33664	; 0x8380
   11624:	movt	r0, #1
   11628:	add	r1, r0, #32
   1162c:	mov	r2, #48	; 0x30
   11630:	vld1.64	{d16-d17}, [r1]
   11634:	mov	r6, sp
   11638:	add	r1, r6, #32
   1163c:	add	r3, r0, #16
   11640:	vld1.64	{d18-d19}, [r0], r2
   11644:	vld1.64	{d20-d21}, [r3]
   11648:	vldr	d22, [r0]
   1164c:	vst1.64	{d16-d17}, [r1]
   11650:	add	r0, r6, #16
   11654:	vst1.64	{d20-d21}, [r0]
   11658:	mov	r0, r6
   1165c:	vst1.64	{d18-d19}, [r0], r2
   11660:	vstr	d22, [r0]
   11664:	ldr	r1, [sp]
   11668:	cmp	r1, #0
   1166c:	movw	r4, #32596	; 0x7f54
   11670:	movt	r4, #1
   11674:	beq	1169c <__assert_fail@plt+0x318>
   11678:	mov	r6, sp
   1167c:	movw	r5, #32596	; 0x7f54
   11680:	movt	r5, #1
   11684:	mov	r0, r5
   11688:	bl	110e4 <strcmp@plt>
   1168c:	cmp	r0, #0
   11690:	ldrne	r1, [r6, #8]!
   11694:	cmpne	r1, #0
   11698:	bne	11684 <__assert_fail@plt+0x300>
   1169c:	ldr	r5, [r6, #4]
   116a0:	movw	r1, #32991	; 0x80df
   116a4:	movt	r1, #1
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	bl	1115c <dcgettext@plt>
   116b4:	mov	r1, r0
   116b8:	movw	r2, #32763	; 0x7ffb
   116bc:	movt	r2, #1
   116c0:	movw	r3, #33014	; 0x80f6
   116c4:	movt	r3, #1
   116c8:	mov	r0, #1
   116cc:	bl	112a0 <__printf_chk@plt>
   116d0:	cmp	r5, #0
   116d4:	moveq	r5, r4
   116d8:	mov	r0, #5
   116dc:	mov	r1, #0
   116e0:	bl	11300 <setlocale@plt>
   116e4:	cmp	r0, #0
   116e8:	beq	11728 <__assert_fail@plt+0x3a4>
   116ec:	movw	r1, #33054	; 0x811e
   116f0:	movt	r1, #1
   116f4:	mov	r2, #3
   116f8:	bl	11348 <strncmp@plt>
   116fc:	cmp	r0, #0
   11700:	beq	11728 <__assert_fail@plt+0x3a4>
   11704:	movw	r1, #33058	; 0x8122
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	bl	1115c <dcgettext@plt>
   11718:	movw	r1, #37252	; 0x9184
   1171c:	movt	r1, #2
   11720:	ldr	r1, [r1]
   11724:	bl	110cc <fputs_unlocked@plt>
   11728:	movw	r1, #33129	; 0x8169
   1172c:	movt	r1, #1
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	bl	1115c <dcgettext@plt>
   1173c:	mov	r1, r0
   11740:	movw	r2, #33014	; 0x80f6
   11744:	movt	r2, #1
   11748:	mov	r0, #1
   1174c:	mov	r3, r4
   11750:	bl	112a0 <__printf_chk@plt>
   11754:	movw	r0, #32924	; 0x809c
   11758:	movt	r0, #1
   1175c:	movw	r6, #33306	; 0x821a
   11760:	movt	r6, #1
   11764:	cmp	r5, r4
   11768:	moveq	r6, r0
   1176c:	movw	r1, #33156	; 0x8184
   11770:	movt	r1, #1
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	bl	1115c <dcgettext@plt>
   11780:	mov	r1, r0
   11784:	mov	r0, #1
   11788:	mov	r2, r5
   1178c:	mov	r3, r6
   11790:	sub	sp, fp, #16
   11794:	pop	{r4, r5, r6, sl, fp, lr}
   11798:	b	112a0 <__printf_chk@plt>
   1179c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a0:	add	fp, sp, #28
   117a4:	sub	sp, sp, #44	; 0x2c
   117a8:	mov	r4, r1
   117ac:	mov	r7, r0
   117b0:	mov	r6, #0
   117b4:	str	r6, [sp, #36]	; 0x24
   117b8:	str	r6, [sp, #20]
   117bc:	str	r6, [sp, #16]
   117c0:	str	r6, [sp, #12]
   117c4:	ldr	r0, [r1]
   117c8:	bl	13a4c <__assert_fail@plt+0x26c8>
   117cc:	movw	r1, #33306	; 0x821a
   117d0:	movt	r1, #1
   117d4:	mov	r0, #6
   117d8:	bl	11300 <setlocale@plt>
   117dc:	movw	r5, #32767	; 0x7fff
   117e0:	movt	r5, #1
   117e4:	movw	r1, #32601	; 0x7f59
   117e8:	movt	r1, #1
   117ec:	mov	r0, r5
   117f0:	bl	1133c <bindtextdomain@plt>
   117f4:	mov	r0, r5
   117f8:	bl	11174 <textdomain@plt>
   117fc:	mov	r0, #3
   11800:	bl	13888 <__assert_fail@plt+0x2504>
   11804:	movw	r1, #37264	; 0x9190
   11808:	movt	r1, #2
   1180c:	strb	r0, [r1]
   11810:	movw	r0, #13528	; 0x34d8
   11814:	movt	r0, #1
   11818:	bl	1763c <__assert_fail@plt+0x62b8>
   1181c:	movw	r0, #8464	; 0x2110
   11820:	movt	r0, #1
   11824:	bl	1763c <__assert_fail@plt+0x62b8>
   11828:	movw	r0, #37265	; 0x9191
   1182c:	movt	r0, #2
   11830:	mov	r9, #1
   11834:	strb	r9, [r0]
   11838:	movw	r0, #37266	; 0x9192
   1183c:	movt	r0, #2
   11840:	strb	r6, [r0]
   11844:	movw	r0, #37267	; 0x9193
   11848:	movt	r0, #2
   1184c:	strh	r6, [r0]
   11850:	movw	r8, #37272	; 0x9198
   11854:	movt	r8, #2
   11858:	str	r6, [r8]
   1185c:	str	r6, [sp]
   11860:	movw	r2, #32625	; 0x7f71
   11864:	movt	r2, #1
   11868:	movw	r3, #33536	; 0x8300
   1186c:	movt	r3, #1
   11870:	mov	r0, r7
   11874:	mov	r1, r4
   11878:	bl	11228 <getopt_long@plt>
   1187c:	cmn	r0, #1
   11880:	beq	11d94 <__assert_fail@plt+0xa10>
   11884:	movw	sl, #37256	; 0x9188
   11888:	movt	sl, #2
   1188c:	movw	r5, #32625	; 0x7f71
   11890:	movt	r5, #1
   11894:	b	118d0 <__assert_fail@plt+0x54c>
   11898:	movw	r0, #37286	; 0x91a6
   1189c:	movt	r0, #2
   118a0:	strb	r9, [r0]
   118a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   118a8:	str	r0, [sp, #36]	; 0x24
   118ac:	str	r6, [sp]
   118b0:	mov	r0, r7
   118b4:	mov	r1, r4
   118b8:	mov	r2, r5
   118bc:	movw	r3, #33536	; 0x8300
   118c0:	movt	r3, #1
   118c4:	bl	11228 <getopt_long@plt>
   118c8:	cmn	r0, #1
   118cc:	beq	11d94 <__assert_fail@plt+0xa10>
   118d0:	str	r6, [fp, #-32]	; 0xffffffe0
   118d4:	cmp	r0, #255	; 0xff
   118d8:	bgt	11b10 <__assert_fail@plt+0x78c>
   118dc:	add	r0, r0, #3
   118e0:	cmp	r0, #125	; 0x7d
   118e4:	bhi	12108 <__assert_fail@plt+0xd84>
   118e8:	add	r1, pc, #0
   118ec:	ldr	pc, [r1, r0, lsl #2]
   118f0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   118f4:	andeq	r1, r1, r0, ror #31
   118f8:	andeq	r2, r1, r8, lsl #2
   118fc:	andeq	r2, r1, r8, lsl #2
   11900:	andeq	r1, r1, r8, ror #21
   11904:	andeq	r2, r1, r8, lsl #2
   11908:	andeq	r2, r1, r8, lsl #2
   1190c:	andeq	r2, r1, r8, lsl #2
   11910:	andeq	r2, r1, r8, lsl #2
   11914:	andeq	r2, r1, r8, lsl #2
   11918:	andeq	r2, r1, r8, lsl #2
   1191c:	andeq	r2, r1, r8, lsl #2
   11920:	andeq	r2, r1, r8, lsl #2
   11924:	andeq	r2, r1, r8, lsl #2
   11928:	andeq	r2, r1, r8, lsl #2
   1192c:	andeq	r2, r1, r8, lsl #2
   11930:	andeq	r2, r1, r8, lsl #2
   11934:	andeq	r2, r1, r8, lsl #2
   11938:	andeq	r2, r1, r8, lsl #2
   1193c:	andeq	r2, r1, r8, lsl #2
   11940:	andeq	r2, r1, r8, lsl #2
   11944:	andeq	r2, r1, r8, lsl #2
   11948:	andeq	r2, r1, r8, lsl #2
   1194c:	andeq	r2, r1, r8, lsl #2
   11950:	andeq	r2, r1, r8, lsl #2
   11954:	andeq	r2, r1, r8, lsl #2
   11958:	andeq	r2, r1, r8, lsl #2
   1195c:	andeq	r2, r1, r8, lsl #2
   11960:	andeq	r2, r1, r8, lsl #2
   11964:	andeq	r2, r1, r8, lsl #2
   11968:	andeq	r2, r1, r8, lsl #2
   1196c:	andeq	r2, r1, r8, lsl #2
   11970:	andeq	r2, r1, r8, lsl #2
   11974:	andeq	r2, r1, r8, lsl #2
   11978:	andeq	r2, r1, r8, lsl #2
   1197c:	andeq	r2, r1, r8, lsl #2
   11980:	andeq	r2, r1, r8, lsl #2
   11984:	andeq	r2, r1, r8, lsl #2
   11988:	andeq	r2, r1, r8, lsl #2
   1198c:	andeq	r2, r1, r8, lsl #2
   11990:	andeq	r2, r1, r8, lsl #2
   11994:	andeq	r2, r1, r8, lsl #2
   11998:	andeq	r2, r1, r8, lsl #2
   1199c:	andeq	r2, r1, r8, lsl #2
   119a0:	andeq	r2, r1, r8, lsl #2
   119a4:	andeq	r2, r1, r8, lsl #2
   119a8:	andeq	r2, r1, r8, lsl #2
   119ac:	andeq	r2, r1, r8, lsl #2
   119b0:	andeq	r2, r1, r8, lsl #2
   119b4:	andeq	r2, r1, r8, lsl #2
   119b8:	andeq	r2, r1, r8, lsl #2
   119bc:	andeq	r2, r1, r8, lsl #2
   119c0:	andeq	r1, r1, r0, ror #23
   119c4:	strdeq	r1, [r1], -ip
   119c8:	andeq	r2, r1, r8, lsl #2
   119cc:	andeq	r2, r1, r8, lsl #2
   119d0:	andeq	r2, r1, r8, lsl #2
   119d4:	andeq	r2, r1, r8, lsl #2
   119d8:	andeq	r2, r1, r8, lsl #2
   119dc:	andeq	r2, r1, r8, lsl #2
   119e0:	andeq	r2, r1, r8, lsl #2
   119e4:	andeq	r2, r1, r8, lsl #2
   119e8:	andeq	r2, r1, r8, lsl #2
   119ec:	andeq	r2, r1, r8, lsl #2
   119f0:	andeq	r2, r1, r8, lsl #2
   119f4:	andeq	r2, r1, r8, lsl #2
   119f8:	andeq	r2, r1, r8, lsl #2
   119fc:	andeq	r2, r1, r8, lsl #2
   11a00:	andeq	r2, r1, r8, lsl #2
   11a04:	andeq	r2, r1, r8, lsl #2
   11a08:	andeq	r2, r1, r8, lsl #2
   11a0c:	andeq	r2, r1, r8, lsl #2
   11a10:	andeq	r2, r1, r8, lsl #2
   11a14:	andeq	r2, r1, r8, lsl #2
   11a18:	andeq	r2, r1, r8, lsl #2
   11a1c:	andeq	r2, r1, r8, lsl #2
   11a20:	andeq	r2, r1, r8, lsl #2
   11a24:	andeq	r2, r1, r8, lsl #2
   11a28:	andeq	r2, r1, r8, lsl #2
   11a2c:	andeq	r2, r1, r8, lsl #2
   11a30:	andeq	r2, r1, r8, lsl #2
   11a34:	andeq	r2, r1, r8, lsl #2
   11a38:	andeq	r2, r1, r8, lsl #2
   11a3c:	andeq	r2, r1, r8, lsl #2
   11a40:	andeq	r2, r1, r8, lsl #2
   11a44:	andeq	r2, r1, r8, lsl #2
   11a48:	andeq	r2, r1, r8, lsl #2
   11a4c:	andeq	r2, r1, r8, lsl #2
   11a50:	andeq	r2, r1, r8, lsl #2
   11a54:	andeq	r2, r1, r8, lsl #2
   11a58:	andeq	r2, r1, r8, lsl #2
   11a5c:	andeq	r2, r1, r8, lsl #2
   11a60:	andeq	r2, r1, r8, lsl #2
   11a64:	andeq	r2, r1, r8, lsl #2
   11a68:	andeq	r2, r1, r8, lsl #2
   11a6c:	andeq	r2, r1, r8, lsl #2
   11a70:	andeq	r2, r1, r8, lsl #2
   11a74:	andeq	r2, r1, r8, lsl #2
   11a78:	andeq	r2, r1, r8, lsl #2
   11a7c:	andeq	r2, r1, r8, lsl #2
   11a80:			; <UNDEFINED> instruction: 0x00011cb4
   11a84:	andeq	r2, r1, r8, lsl #2
   11a88:	andeq	r2, r1, r8, lsl #2
   11a8c:	andeq	r2, r1, r8, lsl #2
   11a90:	andeq	r1, r1, r0, lsr ip
   11a94:	andeq	r2, r1, r8, lsl #2
   11a98:	andeq	r2, r1, r8, lsl #2
   11a9c:	andeq	r2, r1, r8, lsl #2
   11aa0:	andeq	r1, r1, r8, ror #24
   11aa4:	andeq	r1, r1, r0, lsr fp
   11aa8:	andeq	r2, r1, r8, lsl #2
   11aac:	andeq	r2, r1, r8, lsl #2
   11ab0:	andeq	r2, r1, r8, lsl #2
   11ab4:	andeq	r2, r1, r8, lsl #2
   11ab8:	andeq	r1, r1, r4, ror ip
   11abc:	andeq	r2, r1, r8, lsl #2
   11ac0:	andeq	r2, r1, r8, lsl #2
   11ac4:	andeq	r2, r1, r8, lsl #2
   11ac8:	andeq	r2, r1, r8, lsl #2
   11acc:	andeq	r1, r1, r8, lsr #23
   11ad0:	andeq	r2, r1, r8, lsl #2
   11ad4:	andeq	r1, r1, r8, lsr #25
   11ad8:	andeq	r2, r1, r8, lsl #2
   11adc:	andeq	r2, r1, r8, lsl #2
   11ae0:	andeq	r2, r1, r8, lsl #2
   11ae4:	muleq	r1, r8, r8
   11ae8:	ldr	r0, [sl]
   11aec:	add	r1, sp, #36	; 0x24
   11af0:	str	r1, [sp]
   11af4:	sub	r1, fp, #32
   11af8:	str	r1, [sp, #4]
   11afc:	add	r1, sp, #28
   11b00:	add	r2, sp, #16
   11b04:	add	r3, sp, #12
   11b08:	bl	122d8 <__assert_fail@plt+0xf54>
   11b0c:	b	118a4 <__assert_fail@plt+0x520>
   11b10:	cmp	r0, #256	; 0x100
   11b14:	beq	11ba0 <__assert_fail@plt+0x81c>
   11b18:	movw	r1, #257	; 0x101
   11b1c:	cmp	r0, r1
   11b20:	bne	11c18 <__assert_fail@plt+0x894>
   11b24:	mov	r0, #2
   11b28:	str	r0, [r8]
   11b2c:	b	118a4 <__assert_fail@plt+0x520>
   11b30:	ldr	r0, [sl]
   11b34:	ldrb	r1, [r0]
   11b38:	sub	r2, r1, #49	; 0x31
   11b3c:	uxtb	r2, r2
   11b40:	cmp	r2, #1
   11b44:	bhi	11b74 <__assert_fail@plt+0x7f0>
   11b48:	ldrb	r2, [r0, #1]
   11b4c:	cmp	r2, #0
   11b50:	bne	11b74 <__assert_fail@plt+0x7f0>
   11b54:	movw	r2, #37232	; 0x9170
   11b58:	movt	r2, #2
   11b5c:	ldr	r2, [r2]
   11b60:	add	r2, r4, r2, lsl #2
   11b64:	ldr	r2, [r2, #-4]
   11b68:	add	r2, r2, #2
   11b6c:	cmp	r0, r2
   11b70:	beq	11d64 <__assert_fail@plt+0x9e0>
   11b74:	bl	121b0 <__assert_fail@plt+0xe2c>
   11b78:	mov	r1, r0
   11b7c:	movw	r9, #37136	; 0x9110
   11b80:	movt	r9, #2
   11b84:	mov	r0, r9
   11b88:	bl	12154 <__assert_fail@plt+0xdd0>
   11b8c:	ldr	r1, [r9]
   11b90:	mov	r9, #1
   11b94:	movw	r5, #32625	; 0x7f71
   11b98:	movt	r5, #1
   11b9c:	b	11c08 <__assert_fail@plt+0x884>
   11ba0:	str	r9, [r8]
   11ba4:	b	118a4 <__assert_fail@plt+0x520>
   11ba8:	ldr	r0, [sl]
   11bac:	ldrb	r1, [r0]
   11bb0:	cmp	r1, #0
   11bb4:	beq	11d08 <__assert_fail@plt+0x984>
   11bb8:	ldrb	r2, [r0, #1]
   11bbc:	cmp	r2, #0
   11bc0:	beq	11d0c <__assert_fail@plt+0x988>
   11bc4:	movw	r1, #32719	; 0x7fcf
   11bc8:	movt	r1, #1
   11bcc:	bl	110e4 <strcmp@plt>
   11bd0:	mov	r1, #0
   11bd4:	cmp	r0, #0
   11bd8:	beq	11d0c <__assert_fail@plt+0x988>
   11bdc:	b	12080 <__assert_fail@plt+0xcfc>
   11be0:	ldr	r0, [sl]
   11be4:	bl	121b0 <__assert_fail@plt+0xe2c>
   11be8:	mov	r1, r0
   11bec:	movw	r0, #37136	; 0x9110
   11bf0:	movt	r0, #2
   11bf4:	bl	12154 <__assert_fail@plt+0xdd0>
   11bf8:	b	118a4 <__assert_fail@plt+0x520>
   11bfc:	ldr	r0, [sl]
   11c00:	bl	121b0 <__assert_fail@plt+0xe2c>
   11c04:	mov	r1, r0
   11c08:	movw	r0, #37140	; 0x9114
   11c0c:	movt	r0, #2
   11c10:	bl	12154 <__assert_fail@plt+0xdd0>
   11c14:	b	118a4 <__assert_fail@plt+0x520>
   11c18:	movw	r1, #258	; 0x102
   11c1c:	cmp	r0, r1
   11c20:	bne	12108 <__assert_fail@plt+0xd84>
   11c24:	movw	r0, #37296	; 0x91b0
   11c28:	movt	r0, #2
   11c2c:	b	118a0 <__assert_fail@plt+0x51c>
   11c30:	movw	r0, #37280	; 0x91a0
   11c34:	movt	r0, #2
   11c38:	ldr	r0, [r0]
   11c3c:	cmp	r0, #0
   11c40:	beq	11c54 <__assert_fail@plt+0x8d0>
   11c44:	ldr	r1, [sl]
   11c48:	bl	110e4 <strcmp@plt>
   11c4c:	cmp	r0, #0
   11c50:	bne	1208c <__assert_fail@plt+0xd08>
   11c54:	ldr	r0, [sl]
   11c58:	movw	r1, #37280	; 0x91a0
   11c5c:	movt	r1, #2
   11c60:	str	r0, [r1]
   11c64:	b	118a4 <__assert_fail@plt+0x520>
   11c68:	movw	r0, #37284	; 0x91a4
   11c6c:	movt	r0, #2
   11c70:	b	118a0 <__assert_fail@plt+0x51c>
   11c74:	mov	r8, sl
   11c78:	ldr	r5, [sl]
   11c7c:	mov	r0, r5
   11c80:	movw	r1, #32714	; 0x7fca
   11c84:	movt	r1, #1
   11c88:	bl	110e4 <strcmp@plt>
   11c8c:	cmp	r0, #0
   11c90:	beq	11d38 <__assert_fail@plt+0x9b4>
   11c94:	mov	r0, r5
   11c98:	bl	12268 <__assert_fail@plt+0xee4>
   11c9c:	mov	r0, #3
   11ca0:	str	r0, [fp, #-32]	; 0xffffffe0
   11ca4:	b	11d48 <__assert_fail@plt+0x9c4>
   11ca8:	movw	r0, #37265	; 0x9191
   11cac:	movt	r0, #2
   11cb0:	strb	r6, [r0]
   11cb4:	ldr	r0, [sl]
   11cb8:	movw	r1, #33306	; 0x821a
   11cbc:	movt	r1, #1
   11cc0:	str	r1, [sp]
   11cc4:	mov	r1, #0
   11cc8:	mov	r2, #10
   11ccc:	add	r3, sp, #8
   11cd0:	bl	1611c <__assert_fail@plt+0x4d98>
   11cd4:	cmp	r0, #0
   11cd8:	bne	11fe8 <__assert_fail@plt+0xc64>
   11cdc:	ldr	r0, [sp, #8]
   11ce0:	sub	r1, r0, #1
   11ce4:	cmp	r1, #2
   11ce8:	bcs	11fe8 <__assert_fail@plt+0xc64>
   11cec:	cmp	r0, #1
   11cf0:	movw	r0, #37277	; 0x919d
   11cf4:	movt	r0, #2
   11cf8:	movw	r1, #37276	; 0x919c
   11cfc:	movt	r1, #2
   11d00:	moveq	r0, r1
   11d04:	b	118a0 <__assert_fail@plt+0x51c>
   11d08:	mov	r1, #10
   11d0c:	movw	r0, #37144	; 0x9118
   11d10:	movt	r0, #2
   11d14:	ldr	r0, [r0]
   11d18:	cmp	r0, #0
   11d1c:	bmi	11d28 <__assert_fail@plt+0x9a4>
   11d20:	cmp	r0, r1
   11d24:	bne	12098 <__assert_fail@plt+0xd14>
   11d28:	movw	r0, #37144	; 0x9118
   11d2c:	movt	r0, #2
   11d30:	str	r1, [r0]
   11d34:	b	118a4 <__assert_fail@plt+0x520>
   11d38:	mov	r0, #1
   11d3c:	movw	r1, #37285	; 0x91a5
   11d40:	movt	r1, #2
   11d44:	strb	r0, [r1]
   11d48:	mov	r9, #1
   11d4c:	mov	sl, r8
   11d50:	movw	r8, #37272	; 0x9198
   11d54:	movt	r8, #2
   11d58:	movw	r5, #32625	; 0x7f71
   11d5c:	movt	r5, #1
   11d60:	b	118a4 <__assert_fail@plt+0x520>
   11d64:	subs	r0, r1, #50	; 0x32
   11d68:	clz	r0, r0
   11d6c:	lsr	r0, r0, #5
   11d70:	add	r1, sp, #16
   11d74:	orr	r0, r1, r0, lsl #2
   11d78:	ldr	r1, [r0]
   11d7c:	add	r1, r1, #1
   11d80:	str	r1, [r0]
   11d84:	mov	r0, #1
   11d88:	movweq	r0, #2
   11d8c:	str	r0, [fp, #-32]	; 0xffffffe0
   11d90:	b	118a4 <__assert_fail@plt+0x520>
   11d94:	str	r6, [sp, #36]	; 0x24
   11d98:	movw	r5, #37232	; 0x9170
   11d9c:	movt	r5, #2
   11da0:	ldr	r0, [r5]
   11da4:	cmp	r0, r7
   11da8:	bge	11df0 <__assert_fail@plt+0xa6c>
   11dac:	add	r9, sp, #36	; 0x24
   11db0:	add	r6, sp, #28
   11db4:	add	r8, sp, #16
   11db8:	add	sl, sp, #12
   11dbc:	add	r1, r0, #1
   11dc0:	str	r1, [r5]
   11dc4:	ldr	r0, [r4, r0, lsl #2]
   11dc8:	str	r9, [sp]
   11dcc:	sub	r1, fp, #32
   11dd0:	str	r1, [sp, #4]
   11dd4:	mov	r1, r6
   11dd8:	mov	r2, r8
   11ddc:	mov	r3, sl
   11de0:	bl	122d8 <__assert_fail@plt+0xf54>
   11de4:	ldr	r0, [r5]
   11de8:	cmp	r0, r7
   11dec:	blt	11dbc <__assert_fail@plt+0xa38>
   11df0:	ldr	r0, [sp, #12]
   11df4:	cmp	r0, #2
   11df8:	bne	1201c <__assert_fail@plt+0xc98>
   11dfc:	mov	r6, #0
   11e00:	add	r7, sp, #16
   11e04:	movw	r5, #37136	; 0x9110
   11e08:	movt	r5, #2
   11e0c:	movw	r4, #37140	; 0x9114
   11e10:	movt	r4, #2
   11e14:	b	11e24 <__assert_fail@plt+0xaa0>
   11e18:	add	r6, r6, #1
   11e1c:	cmp	r6, #2
   11e20:	beq	11e4c <__assert_fail@plt+0xac8>
   11e24:	ldr	r0, [r7, r6, lsl #2]
   11e28:	cmp	r0, #0
   11e2c:	beq	11e18 <__assert_fail@plt+0xa94>
   11e30:	mov	r0, r5
   11e34:	mov	r1, r6
   11e38:	bl	12154 <__assert_fail@plt+0xdd0>
   11e3c:	mov	r0, r4
   11e40:	mov	r1, r6
   11e44:	bl	12154 <__assert_fail@plt+0xdd0>
   11e48:	b	11e18 <__assert_fail@plt+0xa94>
   11e4c:	ldr	r0, [r5]
   11e50:	cmn	r0, #1
   11e54:	moveq	r0, #0
   11e58:	streq	r0, [r5]
   11e5c:	ldr	r0, [r4]
   11e60:	cmn	r0, #1
   11e64:	movw	r7, #37267	; 0x9193
   11e68:	movt	r7, #2
   11e6c:	moveq	r0, #0
   11e70:	streq	r0, [r4]
   11e74:	movw	r6, #37288	; 0x91a8
   11e78:	movt	r6, #2
   11e7c:	ldr	r4, [r6]
   11e80:	movw	r1, #33828	; 0x8424
   11e84:	movt	r1, #1
   11e88:	mov	r0, r4
   11e8c:	bl	110e4 <strcmp@plt>
   11e90:	cmp	r0, #0
   11e94:	beq	11eb8 <__assert_fail@plt+0xb34>
   11e98:	movw	r1, #33254	; 0x81e6
   11e9c:	movt	r1, #1
   11ea0:	mov	r0, r4
   11ea4:	bl	13708 <__assert_fail@plt+0x2384>
   11ea8:	mov	r4, r0
   11eac:	cmp	r4, #0
   11eb0:	bne	11ecc <__assert_fail@plt+0xb48>
   11eb4:	b	12050 <__assert_fail@plt+0xccc>
   11eb8:	movw	r0, #37248	; 0x9180
   11ebc:	movt	r0, #2
   11ec0:	ldr	r4, [r0]
   11ec4:	cmp	r4, #0
   11ec8:	beq	12050 <__assert_fail@plt+0xccc>
   11ecc:	ldr	r5, [r6, #4]
   11ed0:	movw	r1, #33828	; 0x8424
   11ed4:	movt	r1, #1
   11ed8:	mov	r0, r5
   11edc:	bl	110e4 <strcmp@plt>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11f74 <__assert_fail@plt+0xbf0>
   11ee8:	movw	r1, #33254	; 0x81e6
   11eec:	movt	r1, #1
   11ef0:	mov	r0, r5
   11ef4:	bl	13708 <__assert_fail@plt+0x2384>
   11ef8:	mov	r5, r0
   11efc:	cmp	r5, #0
   11f00:	beq	11f88 <__assert_fail@plt+0xc04>
   11f04:	cmp	r4, r5
   11f08:	beq	120a4 <__assert_fail@plt+0xd20>
   11f0c:	mov	r0, r4
   11f10:	mov	r1, r5
   11f14:	bl	12410 <__assert_fail@plt+0x108c>
   11f18:	mov	r0, r4
   11f1c:	bl	13600 <__assert_fail@plt+0x227c>
   11f20:	cmp	r0, #0
   11f24:	bne	12050 <__assert_fail@plt+0xccc>
   11f28:	mov	r0, r5
   11f2c:	bl	13600 <__assert_fail@plt+0x227c>
   11f30:	cmp	r0, #0
   11f34:	bne	11f88 <__assert_fail@plt+0xc04>
   11f38:	ldrb	r0, [r7]
   11f3c:	ldrb	r1, [r7, #1]
   11f40:	orrs	r0, r1, r0
   11f44:	moveq	r0, #0
   11f48:	subeq	sp, fp, #28
   11f4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f50:	movw	r1, #32867	; 0x8063
   11f54:	movt	r1, #1
   11f58:	mov	r0, #0
   11f5c:	mov	r2, #5
   11f60:	bl	1115c <dcgettext@plt>
   11f64:	mov	r2, r0
   11f68:	mov	r0, #1
   11f6c:	mov	r1, #0
   11f70:	bl	111d4 <error@plt>
   11f74:	movw	r0, #37248	; 0x9180
   11f78:	movt	r0, #2
   11f7c:	ldr	r5, [r0]
   11f80:	cmp	r5, #0
   11f84:	bne	11f04 <__assert_fail@plt+0xb80>
   11f88:	bl	1127c <__errno_location@plt>
   11f8c:	ldr	r4, [r0]
   11f90:	ldr	r2, [r6, #4]
   11f94:	b	1205c <__assert_fail@plt+0xcd8>
   11f98:	movw	r0, #37152	; 0x9120
   11f9c:	movt	r0, #2
   11fa0:	ldr	r3, [r0]
   11fa4:	movw	r0, #37252	; 0x9184
   11fa8:	movt	r0, #2
   11fac:	ldr	r0, [r0]
   11fb0:	mov	r1, #0
   11fb4:	movw	r2, #32777	; 0x8009
   11fb8:	movt	r2, #1
   11fbc:	str	r2, [sp]
   11fc0:	str	r1, [sp, #4]
   11fc4:	movw	r1, #32596	; 0x7f54
   11fc8:	movt	r1, #1
   11fcc:	movw	r2, #32763	; 0x7ffb
   11fd0:	movt	r2, #1
   11fd4:	bl	15ac8 <__assert_fail@plt+0x4744>
   11fd8:	mov	r0, #0
   11fdc:	bl	11240 <exit@plt>
   11fe0:	mov	r0, #0
   11fe4:	bl	11480 <__assert_fail@plt+0xfc>
   11fe8:	movw	r1, #32645	; 0x7f85
   11fec:	movt	r1, #1
   11ff0:	mov	r0, #0
   11ff4:	mov	r2, #5
   11ff8:	bl	1115c <dcgettext@plt>
   11ffc:	mov	r4, r0
   12000:	ldr	r0, [sl]
   12004:	bl	15240 <__assert_fail@plt+0x3ebc>
   12008:	mov	r3, r0
   1200c:	mov	r0, #1
   12010:	mov	r1, #0
   12014:	mov	r2, r4
   12018:	bl	111d4 <error@plt>
   1201c:	cmp	r0, #0
   12020:	bne	120d0 <__assert_fail@plt+0xd4c>
   12024:	movw	r1, #32790	; 0x8016
   12028:	movt	r1, #1
   1202c:	mov	r0, #0
   12030:	mov	r2, #5
   12034:	bl	1115c <dcgettext@plt>
   12038:	mov	r2, r0
   1203c:	mov	r0, #0
   12040:	mov	r1, #0
   12044:	bl	111d4 <error@plt>
   12048:	mov	r0, #1
   1204c:	bl	11480 <__assert_fail@plt+0xfc>
   12050:	bl	1127c <__errno_location@plt>
   12054:	ldr	r4, [r0]
   12058:	ldr	r2, [r6]
   1205c:	mov	r0, #0
   12060:	mov	r1, #3
   12064:	bl	15100 <__assert_fail@plt+0x3d7c>
   12068:	mov	r3, r0
   1206c:	movw	r2, #33370	; 0x825a
   12070:	movt	r2, #1
   12074:	mov	r0, #1
   12078:	mov	r1, r4
   1207c:	bl	111d4 <error@plt>
   12080:	movw	r1, #32722	; 0x7fd2
   12084:	movt	r1, #1
   12088:	b	11ff0 <__assert_fail@plt+0xc6c>
   1208c:	movw	r1, #32670	; 0x7f9e
   12090:	movt	r1, #1
   12094:	b	11f58 <__assert_fail@plt+0xbd4>
   12098:	movw	r1, #32745	; 0x7fe9
   1209c:	movt	r1, #1
   120a0:	b	11f58 <__assert_fail@plt+0xbd4>
   120a4:	bl	1127c <__errno_location@plt>
   120a8:	ldr	r4, [r0]
   120ac:	movw	r1, #32831	; 0x803f
   120b0:	movt	r1, #1
   120b4:	mov	r0, #0
   120b8:	mov	r2, #5
   120bc:	bl	1115c <dcgettext@plt>
   120c0:	mov	r2, r0
   120c4:	mov	r0, #1
   120c8:	mov	r1, r4
   120cc:	bl	111d4 <error@plt>
   120d0:	movw	r1, #32806	; 0x8026
   120d4:	movt	r1, #1
   120d8:	mov	r0, #0
   120dc:	mov	r2, #5
   120e0:	bl	1115c <dcgettext@plt>
   120e4:	mov	r5, r0
   120e8:	add	r0, r4, r7, lsl #2
   120ec:	ldr	r0, [r0, #-4]
   120f0:	bl	15240 <__assert_fail@plt+0x3ebc>
   120f4:	mov	r3, r0
   120f8:	mov	r0, #0
   120fc:	mov	r1, #0
   12100:	mov	r2, r5
   12104:	bl	111d4 <error@plt>
   12108:	mov	r0, #1
   1210c:	bl	11480 <__assert_fail@plt+0xfc>
   12110:	push	{r4, r5, fp, lr}
   12114:	add	fp, sp, #8
   12118:	mov	r4, #0
   1211c:	movw	r5, #37300	; 0x91b4
   12120:	movt	r5, #2
   12124:	b	12134 <__assert_fail@plt+0xdb0>
   12128:	add	r4, r4, #1
   1212c:	cmp	r4, #2
   12130:	beq	12150 <__assert_fail@plt+0xdcc>
   12134:	ldr	r0, [r5, r4, lsl #2]
   12138:	cmp	r0, #0
   1213c:	beq	12128 <__assert_fail@plt+0xda4>
   12140:	bl	12a58 <__assert_fail@plt+0x16d4>
   12144:	ldr	r0, [r5, r4, lsl #2]
   12148:	bl	137b8 <__assert_fail@plt+0x2434>
   1214c:	b	12128 <__assert_fail@plt+0xda4>
   12150:	pop	{r4, r5, fp, pc}
   12154:	push	{r4, r5, fp, lr}
   12158:	add	fp, sp, #8
   1215c:	sub	sp, sp, #8
   12160:	mov	r4, r1
   12164:	ldr	r5, [r0]
   12168:	cmn	r5, #1
   1216c:	cmpne	r5, r4
   12170:	bne	12180 <__assert_fail@plt+0xdfc>
   12174:	str	r4, [r0]
   12178:	sub	sp, fp, #8
   1217c:	pop	{r4, r5, fp, pc}
   12180:	movw	r1, #33269	; 0x81f5
   12184:	movt	r1, #1
   12188:	mov	r0, #0
   1218c:	mov	r2, #5
   12190:	bl	1115c <dcgettext@plt>
   12194:	mov	r2, r0
   12198:	add	r0, r4, #1
   1219c:	str	r0, [sp]
   121a0:	add	r3, r5, #1
   121a4:	mov	r0, #1
   121a8:	mov	r1, #0
   121ac:	bl	111d4 <error@plt>
   121b0:	push	{r4, r5, fp, lr}
   121b4:	add	fp, sp, #8
   121b8:	sub	sp, sp, #16
   121bc:	mov	r4, r0
   121c0:	movw	r0, #33306	; 0x821a
   121c4:	movt	r0, #1
   121c8:	str	r0, [sp]
   121cc:	mov	r5, #0
   121d0:	add	r3, sp, #8
   121d4:	mov	r0, r4
   121d8:	mov	r1, #0
   121dc:	mov	r2, #10
   121e0:	bl	16620 <__assert_fail@plt+0x529c>
   121e4:	cmp	r0, #1
   121e8:	beq	12204 <__assert_fail@plt+0xe80>
   121ec:	ldr	r1, [sp, #8]
   121f0:	ldr	r2, [sp, #12]
   121f4:	cmp	r0, #0
   121f8:	bne	12214 <__assert_fail@plt+0xe90>
   121fc:	cmp	r2, #0
   12200:	beq	12214 <__assert_fail@plt+0xe90>
   12204:	str	r5, [sp, #12]
   12208:	mvn	r0, #0
   1220c:	str	r0, [sp, #8]
   12210:	b	12224 <__assert_fail@plt+0xea0>
   12214:	cmp	r0, #0
   12218:	bne	12234 <__assert_fail@plt+0xeb0>
   1221c:	orrs	r0, r1, r2
   12220:	beq	12234 <__assert_fail@plt+0xeb0>
   12224:	ldr	r0, [sp, #8]
   12228:	sub	r0, r0, #1
   1222c:	sub	sp, fp, #8
   12230:	pop	{r4, r5, fp, pc}
   12234:	movw	r1, #32645	; 0x7f85
   12238:	movt	r1, #1
   1223c:	mov	r0, #0
   12240:	mov	r2, #5
   12244:	bl	1115c <dcgettext@plt>
   12248:	mov	r5, r0
   1224c:	mov	r0, r4
   12250:	bl	15240 <__assert_fail@plt+0x3ebc>
   12254:	mov	r3, r0
   12258:	mov	r0, #1
   1225c:	mov	r1, #0
   12260:	mov	r2, r5
   12264:	bl	111d4 <error@plt>
   12268:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1226c:	add	fp, sp, #24
   12270:	sub	sp, sp, #8
   12274:	mov	r7, r0
   12278:	movw	r9, #33303	; 0x8217
   1227c:	movt	r9, #1
   12280:	add	r5, sp, #4
   12284:	mov	r6, sp
   12288:	mov	r8, #0
   1228c:	mov	r0, r7
   12290:	mov	r1, r9
   12294:	bl	11330 <strpbrk@plt>
   12298:	cmp	r0, #0
   1229c:	mov	r4, #0
   122a0:	strbne	r8, [r0], #1
   122a4:	movne	r4, r0
   122a8:	mov	r0, r7
   122ac:	mov	r1, r5
   122b0:	mov	r2, r6
   122b4:	bl	12a90 <__assert_fail@plt+0x170c>
   122b8:	ldr	r1, [sp]
   122bc:	ldr	r0, [sp, #4]
   122c0:	bl	12b34 <__assert_fail@plt+0x17b0>
   122c4:	cmp	r4, #0
   122c8:	mov	r7, r4
   122cc:	bne	1228c <__assert_fail@plt+0xf08>
   122d0:	sub	sp, fp, #24
   122d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   122d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   122dc:	add	fp, sp, #24
   122e0:	mov	r5, r3
   122e4:	mov	r6, r1
   122e8:	mov	r4, r0
   122ec:	ldr	r0, [r3]
   122f0:	cmp	r0, #2
   122f4:	movw	r8, #37288	; 0x91a8
   122f8:	movt	r8, #2
   122fc:	bne	1239c <__assert_fail@plt+0x1018>
   12300:	ldr	r7, [r6]
   12304:	clz	r0, r7
   12308:	lsr	r0, r0, #5
   1230c:	ldr	r1, [r6, r0, lsl #2]
   12310:	cmp	r1, #3
   12314:	bhi	12380 <__assert_fail@plt+0xffc>
   12318:	ldr	r0, [r8, r0, lsl #2]
   1231c:	add	r3, pc, #0
   12320:	ldr	pc, [r3, r1, lsl #2]
   12324:	ldrdeq	r2, [r1], -r0
   12328:	andeq	r2, r1, r4, lsr r3
   1232c:	andeq	r2, r1, r8, asr r3
   12330:	andeq	r2, r1, ip, ror r3
   12334:	ldr	r1, [r2]
   12338:	sub	r1, r1, #1
   1233c:	str	r1, [r2]
   12340:	bl	121b0 <__assert_fail@plt+0xe2c>
   12344:	mov	r1, r0
   12348:	movw	r0, #37136	; 0x9110
   1234c:	movt	r0, #2
   12350:	bl	12154 <__assert_fail@plt+0xdd0>
   12354:	b	12380 <__assert_fail@plt+0xffc>
   12358:	ldr	r1, [r2, #4]
   1235c:	sub	r1, r1, #1
   12360:	str	r1, [r2, #4]
   12364:	bl	121b0 <__assert_fail@plt+0xe2c>
   12368:	mov	r1, r0
   1236c:	movw	r0, #37140	; 0x9114
   12370:	movt	r0, #2
   12374:	bl	12154 <__assert_fail@plt+0xdd0>
   12378:	b	12380 <__assert_fail@plt+0xffc>
   1237c:	bl	12268 <__assert_fail@plt+0xee4>
   12380:	mov	r0, #1
   12384:	cmp	r7, #0
   12388:	beq	1239c <__assert_fail@plt+0x1018>
   1238c:	ldr	r1, [r6, #4]
   12390:	str	r1, [r6]
   12394:	ldr	r1, [r8, #4]
   12398:	str	r1, [r8]
   1239c:	ldr	r1, [fp, #8]
   123a0:	ldr	r2, [r1]
   123a4:	str	r2, [r6, r0, lsl #2]
   123a8:	str	r4, [r8, r0, lsl #2]
   123ac:	add	r0, r0, #1
   123b0:	str	r0, [r5]
   123b4:	ldr	r0, [r1]
   123b8:	cmp	r0, #3
   123bc:	bne	123cc <__assert_fail@plt+0x1048>
   123c0:	ldr	r0, [fp, #12]
   123c4:	mov	r1, #3
   123c8:	str	r1, [r0]
   123cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123d0:	movw	r1, #33472	; 0x82c0
   123d4:	movt	r1, #1
   123d8:	mov	r0, #0
   123dc:	mov	r2, #5
   123e0:	bl	1115c <dcgettext@plt>
   123e4:	mov	r5, r0
   123e8:	mov	r0, #4
   123ec:	mov	r1, r4
   123f0:	bl	1504c <__assert_fail@plt+0x3cc8>
   123f4:	mov	r3, r0
   123f8:	mov	r0, #0
   123fc:	mov	r1, #0
   12400:	mov	r2, r5
   12404:	bl	111d4 <error@plt>
   12408:	mov	r0, #1
   1240c:	bl	11480 <__assert_fail@plt+0xfc>
   12410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12414:	add	fp, sp, #28
   12418:	sub	sp, sp, #36	; 0x24
   1241c:	mov	r7, r1
   12420:	mov	r5, r0
   12424:	mov	r1, #2
   12428:	bl	135c4 <__assert_fail@plt+0x2240>
   1242c:	mov	r0, r7
   12430:	mov	r1, #2
   12434:	bl	135c4 <__assert_fail@plt+0x2240>
   12438:	add	r6, sp, #24
   1243c:	mov	r0, r6
   12440:	bl	12bcc <__assert_fail@plt+0x1848>
   12444:	mov	r0, r5
   12448:	mov	r1, r6
   1244c:	mov	r2, #1
   12450:	bl	12be0 <__assert_fail@plt+0x185c>
   12454:	add	r6, sp, #12
   12458:	mov	r0, r6
   1245c:	bl	12bcc <__assert_fail@plt+0x1848>
   12460:	mov	r0, r7
   12464:	mov	r1, r6
   12468:	mov	r2, #2
   1246c:	bl	12be0 <__assert_fail@plt+0x185c>
   12470:	movw	r0, #37285	; 0x91a5
   12474:	movt	r0, #2
   12478:	ldrb	r0, [r0]
   1247c:	cmp	r0, #1
   12480:	bne	124d4 <__assert_fail@plt+0x1150>
   12484:	mov	r0, #0
   12488:	ldr	r1, [sp, #24]
   1248c:	cmp	r1, #0
   12490:	mov	r1, #0
   12494:	beq	124a4 <__assert_fail@plt+0x1120>
   12498:	ldr	r1, [sp, #32]
   1249c:	ldr	r1, [r1]
   124a0:	ldr	r1, [r1, #12]
   124a4:	movw	r2, #37320	; 0x91c8
   124a8:	movt	r2, #2
   124ac:	str	r1, [r2]
   124b0:	ldr	r1, [sp, #12]
   124b4:	cmp	r1, #0
   124b8:	beq	124c8 <__assert_fail@plt+0x1144>
   124bc:	ldr	r0, [sp, #20]
   124c0:	ldr	r0, [r0]
   124c4:	ldr	r0, [r0, #12]
   124c8:	movw	r1, #37324	; 0x91cc
   124cc:	movt	r1, #2
   124d0:	str	r0, [r1]
   124d4:	movw	r0, #37296	; 0x91b0
   124d8:	movt	r0, #2
   124dc:	ldrb	r0, [r0]
   124e0:	cmp	r0, #1
   124e4:	bne	1258c <__assert_fail@plt+0x1208>
   124e8:	ldr	r0, [sp, #24]
   124ec:	cmp	r0, #0
   124f0:	beq	12500 <__assert_fail@plt+0x117c>
   124f4:	ldr	r0, [sp, #32]
   124f8:	ldr	r0, [r0]
   124fc:	b	12514 <__assert_fail@plt+0x1190>
   12500:	ldr	r0, [sp, #12]
   12504:	cmp	r0, #0
   12508:	beq	1258c <__assert_fail@plt+0x1208>
   1250c:	movw	r0, #37328	; 0x91d0
   12510:	movt	r0, #2
   12514:	ldr	r1, [sp, #12]
   12518:	cmp	r1, #0
   1251c:	beq	1252c <__assert_fail@plt+0x11a8>
   12520:	ldr	r1, [sp, #20]
   12524:	ldr	r1, [r1]
   12528:	b	12534 <__assert_fail@plt+0x11b0>
   1252c:	movw	r1, #37328	; 0x91d0
   12530:	movt	r1, #2
   12534:	bl	12c80 <__assert_fail@plt+0x18fc>
   12538:	movw	r0, #37352	; 0x91e8
   1253c:	movt	r0, #2
   12540:	mov	r1, #0
   12544:	str	r1, [r0]
   12548:	str	r1, [r0, #4]
   1254c:	ldr	r0, [sp, #24]
   12550:	cmp	r0, #0
   12554:	beq	1256c <__assert_fail@plt+0x11e8>
   12558:	add	r1, sp, #24
   1255c:	mov	r0, r5
   12560:	mov	r2, #1
   12564:	mov	r3, #1
   12568:	bl	12de4 <__assert_fail@plt+0x1a60>
   1256c:	ldr	r0, [sp, #12]
   12570:	cmp	r0, #0
   12574:	beq	1258c <__assert_fail@plt+0x1208>
   12578:	add	r1, sp, #12
   1257c:	mov	r0, r7
   12580:	mov	r2, #1
   12584:	mov	r3, #2
   12588:	bl	12de4 <__assert_fail@plt+0x1a60>
   1258c:	ldr	r0, [sp, #24]
   12590:	cmp	r0, #0
   12594:	movw	sl, #37277	; 0x919d
   12598:	movt	sl, #2
   1259c:	ldrne	r1, [sp, #12]
   125a0:	cmpne	r1, #0
   125a4:	beq	12850 <__assert_fail@plt+0x14cc>
   125a8:	movw	r8, #37140	; 0x9114
   125ac:	movt	r8, #2
   125b0:	movw	r9, #37136	; 0x9110
   125b4:	movt	r9, #2
   125b8:	add	r6, sp, #24
   125bc:	mov	r4, #1
   125c0:	str	r7, [sp, #4]
   125c4:	b	125fc <__assert_fail@plt+0x1278>
   125c8:	mov	r0, r7
   125cc:	add	r1, sp, #12
   125d0:	mov	r2, #1
   125d4:	mov	r3, #2
   125d8:	bl	12de4 <__assert_fail@plt+0x1a60>
   125dc:	movw	r0, #37266	; 0x9192
   125e0:	movt	r0, #2
   125e4:	strb	r4, [r0]
   125e8:	ldr	r0, [sp, #24]
   125ec:	cmp	r0, #0
   125f0:	ldrne	r1, [sp, #12]
   125f4:	cmpne	r1, #0
   125f8:	beq	12850 <__assert_fail@plt+0x14cc>
   125fc:	ldr	r3, [r8]
   12600:	ldr	r2, [r9]
   12604:	ldr	r0, [sp, #20]
   12608:	ldr	r1, [r0]
   1260c:	ldr	r0, [sp, #32]
   12610:	ldr	r0, [r0]
   12614:	bl	12df8 <__assert_fail@plt+0x1a74>
   12618:	cmn	r0, #1
   1261c:	ble	1269c <__assert_fail@plt+0x1318>
   12620:	cmp	r0, #0
   12624:	beq	1264c <__assert_fail@plt+0x12c8>
   12628:	ldrb	r0, [sl]
   1262c:	cmp	r0, #1
   12630:	bne	125c8 <__assert_fail@plt+0x1244>
   12634:	ldr	r0, [sp, #20]
   12638:	ldr	r1, [r0]
   1263c:	movw	r0, #37328	; 0x91d0
   12640:	movt	r0, #2
   12644:	bl	12c80 <__assert_fail@plt+0x18fc>
   12648:	b	125c8 <__assert_fail@plt+0x1244>
   1264c:	mov	r0, r5
   12650:	mov	r1, r6
   12654:	mov	r2, #0
   12658:	mov	r3, #1
   1265c:	bl	12de4 <__assert_fail@plt+0x1a60>
   12660:	cmp	r0, #0
   12664:	beq	126d8 <__assert_fail@plt+0x1354>
   12668:	ldr	r3, [r8]
   1266c:	ldr	r2, [r9]
   12670:	ldr	r0, [sp, #20]
   12674:	ldr	r1, [r0]
   12678:	ldr	r0, [sp, #24]
   1267c:	ldr	r4, [sp, #32]
   12680:	add	r0, r4, r0, lsl #2
   12684:	ldr	r0, [r0, #-4]
   12688:	bl	12df8 <__assert_fail@plt+0x1a74>
   1268c:	cmp	r0, #0
   12690:	beq	1264c <__assert_fail@plt+0x12c8>
   12694:	mov	sl, #0
   12698:	b	126e8 <__assert_fail@plt+0x1364>
   1269c:	movw	r0, #37276	; 0x919c
   126a0:	movt	r0, #2
   126a4:	ldrb	r0, [r0]
   126a8:	cmp	r0, #1
   126ac:	bne	126c4 <__assert_fail@plt+0x1340>
   126b0:	ldr	r0, [sp, #32]
   126b4:	ldr	r0, [r0]
   126b8:	movw	r1, #37328	; 0x91d0
   126bc:	movt	r1, #2
   126c0:	bl	12c80 <__assert_fail@plt+0x18fc>
   126c4:	mov	r0, r5
   126c8:	mov	r1, r6
   126cc:	mov	r2, #1
   126d0:	mov	r3, #1
   126d4:	b	125d8 <__assert_fail@plt+0x1254>
   126d8:	ldr	r0, [sp, #24]
   126dc:	add	r0, r0, #1
   126e0:	str	r0, [sp, #24]
   126e4:	mov	sl, #1
   126e8:	add	r6, sp, #12
   126ec:	mov	r0, r7
   126f0:	mov	r1, r6
   126f4:	mov	r2, #0
   126f8:	mov	r3, #2
   126fc:	bl	12de4 <__assert_fail@plt+0x1a60>
   12700:	cmp	r0, #0
   12704:	beq	1273c <__assert_fail@plt+0x13b8>
   12708:	ldr	r3, [r8]
   1270c:	ldr	r2, [r9]
   12710:	ldr	r0, [sp, #32]
   12714:	ldr	r0, [r0]
   12718:	ldr	r1, [sp, #12]
   1271c:	ldr	r4, [sp, #20]
   12720:	add	r1, r4, r1, lsl #2
   12724:	ldr	r1, [r1, #-4]
   12728:	bl	12df8 <__assert_fail@plt+0x1a74>
   1272c:	cmp	r0, #0
   12730:	beq	126ec <__assert_fail@plt+0x1368>
   12734:	mov	r7, #0
   12738:	b	1274c <__assert_fail@plt+0x13c8>
   1273c:	ldr	r0, [sp, #12]
   12740:	add	r0, r0, #1
   12744:	str	r0, [sp, #12]
   12748:	mov	r7, #1
   1274c:	mov	r6, sl
   12750:	ldr	r0, [sp, #24]
   12754:	cmp	r0, #1
   12758:	beq	127c8 <__assert_fail@plt+0x1444>
   1275c:	movw	r0, #37265	; 0x9191
   12760:	movt	r0, #2
   12764:	ldrb	r0, [r0]
   12768:	cmp	r0, #0
   1276c:	beq	127c8 <__assert_fail@plt+0x1444>
   12770:	mov	sl, #0
   12774:	b	1278c <__assert_fail@plt+0x1408>
   12778:	add	sl, sl, #1
   1277c:	ldr	r0, [sp, #24]
   12780:	sub	r0, r0, #1
   12784:	cmp	sl, r0
   12788:	bcs	127c8 <__assert_fail@plt+0x1444>
   1278c:	ldr	r0, [sp, #12]
   12790:	cmp	r0, #1
   12794:	beq	12778 <__assert_fail@plt+0x13f4>
   12798:	mov	r4, #0
   1279c:	ldr	r0, [sp, #20]
   127a0:	ldr	r1, [r0, r4, lsl #2]
   127a4:	ldr	r0, [sp, #32]
   127a8:	ldr	r0, [r0, sl, lsl #2]
   127ac:	bl	12c80 <__assert_fail@plt+0x18fc>
   127b0:	add	r4, r4, #1
   127b4:	ldr	r0, [sp, #12]
   127b8:	sub	r0, r0, #1
   127bc:	cmp	r4, r0
   127c0:	bcc	1279c <__assert_fail@plt+0x1418>
   127c4:	b	12778 <__assert_fail@plt+0x13f4>
   127c8:	mov	r0, #0
   127cc:	cmp	r6, #0
   127d0:	mov	r1, #0
   127d4:	bne	12800 <__assert_fail@plt+0x147c>
   127d8:	ldr	r1, [sp, #24]
   127dc:	ldr	r2, [sp, #32]
   127e0:	mvn	r3, #3
   127e4:	add	r1, r3, r1, lsl #2
   127e8:	ldr	r3, [r2, r1]
   127ec:	ldr	r4, [r2]
   127f0:	str	r3, [r2]
   127f4:	ldr	r2, [sp, #32]
   127f8:	str	r4, [r2, r1]
   127fc:	mov	r1, #1
   12800:	str	r1, [sp, #24]
   12804:	cmp	r7, #0
   12808:	ldr	r7, [sp, #4]
   1280c:	movw	sl, #37277	; 0x919d
   12810:	movt	sl, #2
   12814:	add	r6, sp, #24
   12818:	mov	r4, #1
   1281c:	bne	12848 <__assert_fail@plt+0x14c4>
   12820:	ldr	r0, [sp, #12]
   12824:	ldr	r1, [sp, #20]
   12828:	mvn	r2, #3
   1282c:	add	r0, r2, r0, lsl #2
   12830:	ldr	r2, [r1, r0]
   12834:	ldr	r3, [r1]
   12838:	str	r2, [r1]
   1283c:	ldr	r1, [sp, #20]
   12840:	str	r3, [r1, r0]
   12844:	mov	r0, #1
   12848:	str	r0, [sp, #12]
   1284c:	b	125e8 <__assert_fail@plt+0x1264>
   12850:	mov	r9, #0
   12854:	str	r9, [sp, #8]
   12858:	movw	r1, #37272	; 0x9198
   1285c:	movt	r1, #2
   12860:	ldr	r1, [r1]
   12864:	cmp	r1, #2
   12868:	beq	12890 <__assert_fail@plt+0x150c>
   1286c:	movw	r1, #37267	; 0x9193
   12870:	movt	r1, #2
   12874:	ldrb	r2, [r1]
   12878:	ldrb	r1, [r1, #1]
   1287c:	clz	r1, r1
   12880:	lsr	r1, r1, #5
   12884:	clz	r2, r2
   12888:	lsr	r2, r2, #5
   1288c:	orr	r9, r2, r1
   12890:	cmp	r0, #0
   12894:	movwne	r0, #37276	; 0x919c
   12898:	movtne	r0, #2
   1289c:	ldrbne	r0, [r0]
   128a0:	orrsne	r1, r9, r0
   128a4:	bne	128e8 <__assert_fail@plt+0x1564>
   128a8:	ldr	r0, [sp, #12]
   128ac:	cmp	r0, #0
   128b0:	ldrbne	r0, [sl]
   128b4:	orrsne	r1, r9, r0
   128b8:	bne	129a8 <__assert_fail@plt+0x1624>
   128bc:	ldr	r4, [sp, #8]
   128c0:	mov	r0, r4
   128c4:	bl	12a58 <__assert_fail@plt+0x16d4>
   128c8:	mov	r0, r4
   128cc:	bl	137b8 <__assert_fail@plt+0x2434>
   128d0:	add	r0, sp, #24
   128d4:	bl	1301c <__assert_fail@plt+0x1c98>
   128d8:	add	r0, sp, #12
   128dc:	bl	1301c <__assert_fail@plt+0x1c98>
   128e0:	sub	sp, fp, #28
   128e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128e8:	cmp	r0, #0
   128ec:	beq	12904 <__assert_fail@plt+0x1580>
   128f0:	ldr	r0, [sp, #32]
   128f4:	ldr	r0, [r0]
   128f8:	movw	r1, #37328	; 0x91d0
   128fc:	movt	r1, #2
   12900:	bl	12c80 <__assert_fail@plt+0x18fc>
   12904:	ldr	r0, [sp, #12]
   12908:	cmp	r0, #0
   1290c:	movwne	r0, #37266	; 0x9192
   12910:	movtne	r0, #2
   12914:	movne	r1, #1
   12918:	strbne	r1, [r0]
   1291c:	add	r1, sp, #8
   12920:	mov	r0, r5
   12924:	mov	r2, #1
   12928:	bl	12ef0 <__assert_fail@plt+0x1b6c>
   1292c:	cmp	r0, #0
   12930:	beq	128a8 <__assert_fail@plt+0x1524>
   12934:	movw	r8, #37328	; 0x91d0
   12938:	movt	r8, #2
   1293c:	movw	r4, #37267	; 0x9193
   12940:	movt	r4, #2
   12944:	add	r6, sp, #8
   12948:	b	12964 <__assert_fail@plt+0x15e0>
   1294c:	mov	r0, r5
   12950:	mov	r1, r6
   12954:	mov	r2, #1
   12958:	bl	12ef0 <__assert_fail@plt+0x1b6c>
   1295c:	cmp	r0, #0
   12960:	beq	128a8 <__assert_fail@plt+0x1524>
   12964:	movw	r0, #37276	; 0x919c
   12968:	movt	r0, #2
   1296c:	ldrb	r0, [r0]
   12970:	cmp	r0, #1
   12974:	bne	12984 <__assert_fail@plt+0x1600>
   12978:	ldr	r0, [sp, #8]
   1297c:	mov	r1, r8
   12980:	bl	12c80 <__assert_fail@plt+0x18fc>
   12984:	ldrb	r0, [r4]
   12988:	cmp	r0, #0
   1298c:	beq	1294c <__assert_fail@plt+0x15c8>
   12990:	movw	r0, #37276	; 0x919c
   12994:	movt	r0, #2
   12998:	ldrb	r0, [r0]
   1299c:	cmp	r0, #1
   129a0:	beq	1294c <__assert_fail@plt+0x15c8>
   129a4:	b	128a8 <__assert_fail@plt+0x1524>
   129a8:	cmp	r0, #0
   129ac:	beq	129c4 <__assert_fail@plt+0x1640>
   129b0:	ldr	r0, [sp, #20]
   129b4:	ldr	r1, [r0]
   129b8:	movw	r0, #37328	; 0x91d0
   129bc:	movt	r0, #2
   129c0:	bl	12c80 <__assert_fail@plt+0x18fc>
   129c4:	ldr	r0, [sp, #24]
   129c8:	cmp	r0, #0
   129cc:	movwne	r0, #37266	; 0x9192
   129d0:	movtne	r0, #2
   129d4:	movne	r1, #1
   129d8:	strbne	r1, [r0]
   129dc:	add	r1, sp, #8
   129e0:	mov	r0, r7
   129e4:	mov	r2, #2
   129e8:	bl	12ef0 <__assert_fail@plt+0x1b6c>
   129ec:	cmp	r0, #0
   129f0:	beq	128bc <__assert_fail@plt+0x1538>
   129f4:	movw	r8, #37328	; 0x91d0
   129f8:	movt	r8, #2
   129fc:	movw	r5, #37267	; 0x9193
   12a00:	movt	r5, #2
   12a04:	add	r6, sp, #8
   12a08:	b	12a24 <__assert_fail@plt+0x16a0>
   12a0c:	mov	r0, r7
   12a10:	mov	r1, r6
   12a14:	mov	r2, #2
   12a18:	bl	12ef0 <__assert_fail@plt+0x1b6c>
   12a1c:	cmp	r0, #0
   12a20:	beq	128bc <__assert_fail@plt+0x1538>
   12a24:	ldrb	r0, [sl]
   12a28:	cmp	r0, #1
   12a2c:	bne	12a3c <__assert_fail@plt+0x16b8>
   12a30:	ldr	r1, [sp, #8]
   12a34:	mov	r0, r8
   12a38:	bl	12c80 <__assert_fail@plt+0x18fc>
   12a3c:	ldrb	r0, [r5, #1]
   12a40:	cmp	r0, #0
   12a44:	beq	12a0c <__assert_fail@plt+0x1688>
   12a48:	ldrb	r0, [sl]
   12a4c:	cmp	r0, #1
   12a50:	beq	12a0c <__assert_fail@plt+0x1688>
   12a54:	b	128bc <__assert_fail@plt+0x1538>
   12a58:	cmp	r0, #0
   12a5c:	bxeq	lr
   12a60:	push	{r4, r5, fp, lr}
   12a64:	add	fp, sp, #8
   12a68:	mov	r4, r0
   12a6c:	ldr	r0, [r0, #20]
   12a70:	bl	137b8 <__assert_fail@plt+0x2434>
   12a74:	mov	r5, #0
   12a78:	str	r5, [r4, #20]
   12a7c:	ldr	r0, [r4, #8]
   12a80:	bl	137b8 <__assert_fail@plt+0x2434>
   12a84:	str	r5, [r4, #8]
   12a88:	pop	{r4, r5, fp, lr}
   12a8c:	bx	lr
   12a90:	push	{r4, r5, fp, lr}
   12a94:	add	fp, sp, #8
   12a98:	mov	r5, r2
   12a9c:	mov	r4, r0
   12aa0:	ldrb	r0, [r0]
   12aa4:	sub	r2, r0, #49	; 0x31
   12aa8:	cmp	r2, #2
   12aac:	bcs	12ad4 <__assert_fail@plt+0x1750>
   12ab0:	ldrb	r2, [r4, #1]
   12ab4:	cmp	r2, #46	; 0x2e
   12ab8:	bne	12af4 <__assert_fail@plt+0x1770>
   12abc:	sub	r0, r0, #48	; 0x30
   12ac0:	str	r0, [r1]
   12ac4:	add	r0, r4, #2
   12ac8:	bl	121b0 <__assert_fail@plt+0xe2c>
   12acc:	str	r0, [r5]
   12ad0:	pop	{r4, r5, fp, pc}
   12ad4:	cmp	r0, #48	; 0x30
   12ad8:	bne	12b28 <__assert_fail@plt+0x17a4>
   12adc:	ldrb	r0, [r4, #1]
   12ae0:	cmp	r0, #0
   12ae4:	moveq	r0, #0
   12ae8:	streq	r0, [r1]
   12aec:	streq	r0, [r5]
   12af0:	popeq	{r4, r5, fp, pc}
   12af4:	movw	r1, #33307	; 0x821b
   12af8:	movt	r1, #1
   12afc:	mov	r0, #0
   12b00:	mov	r2, #5
   12b04:	bl	1115c <dcgettext@plt>
   12b08:	mov	r5, r0
   12b0c:	mov	r0, r4
   12b10:	bl	15240 <__assert_fail@plt+0x3ebc>
   12b14:	mov	r3, r0
   12b18:	mov	r0, #1
   12b1c:	mov	r1, #0
   12b20:	mov	r2, r5
   12b24:	bl	111d4 <error@plt>
   12b28:	movw	r1, #33335	; 0x8237
   12b2c:	movt	r1, #1
   12b30:	b	12afc <__assert_fail@plt+0x1778>
   12b34:	push	{r4, r5, fp, lr}
   12b38:	add	fp, sp, #8
   12b3c:	cmp	r0, #3
   12b40:	bcs	12b8c <__assert_fail@plt+0x1808>
   12b44:	mov	r4, r1
   12b48:	mov	r5, r0
   12b4c:	cmp	r0, #0
   12b50:	bne	12b5c <__assert_fail@plt+0x17d8>
   12b54:	cmp	r4, #0
   12b58:	bne	12bac <__assert_fail@plt+0x1828>
   12b5c:	mov	r0, #12
   12b60:	bl	15bd0 <__assert_fail@plt+0x484c>
   12b64:	mov	r1, #0
   12b68:	str	r5, [r0]
   12b6c:	str	r4, [r0, #4]
   12b70:	str	r1, [r0, #8]
   12b74:	movw	r1, #37148	; 0x911c
   12b78:	movt	r1, #2
   12b7c:	ldr	r2, [r1]
   12b80:	str	r0, [r2, #8]
   12b84:	str	r0, [r1]
   12b88:	pop	{r4, r5, fp, pc}
   12b8c:	movw	r0, #33373	; 0x825d
   12b90:	movt	r0, #1
   12b94:	movw	r1, #33409	; 0x8281
   12b98:	movt	r1, #1
   12b9c:	movw	r3, #33420	; 0x828c
   12ba0:	movt	r3, #1
   12ba4:	movw	r2, #819	; 0x333
   12ba8:	bl	11384 <__assert_fail@plt>
   12bac:	movw	r0, #33448	; 0x82a8
   12bb0:	movt	r0, #1
   12bb4:	movw	r1, #33409	; 0x8281
   12bb8:	movt	r1, #1
   12bbc:	movw	r3, #33420	; 0x828c
   12bc0:	movt	r3, #1
   12bc4:	mov	r2, #820	; 0x334
   12bc8:	bl	11384 <__assert_fail@plt>
   12bcc:	mov	r1, #0
   12bd0:	str	r1, [r0]
   12bd4:	str	r1, [r0, #4]
   12bd8:	str	r1, [r0, #8]
   12bdc:	bx	lr
   12be0:	push	{r4, r5, r6, r7, fp, lr}
   12be4:	add	fp, sp, #16
   12be8:	mov	r5, r2
   12bec:	mov	r4, r1
   12bf0:	mov	r6, r0
   12bf4:	mov	r7, r1
   12bf8:	ldr	r0, [r7, #4]!
   12bfc:	ldr	r1, [r1]
   12c00:	cmp	r1, r0
   12c04:	bne	12c44 <__assert_fail@plt+0x18c0>
   12c08:	ldr	r0, [r4, #8]
   12c0c:	mov	r1, r7
   12c10:	mov	r2, #4
   12c14:	bl	15c94 <__assert_fail@plt+0x4910>
   12c18:	str	r0, [r4, #8]
   12c1c:	ldm	r4, {r0, r1}
   12c20:	cmp	r0, r1
   12c24:	bcs	12c44 <__assert_fail@plt+0x18c0>
   12c28:	ldr	r1, [r7]
   12c2c:	mov	r2, #0
   12c30:	ldr	r3, [r4, #8]
   12c34:	str	r2, [r3, r0, lsl #2]
   12c38:	add	r0, r0, #1
   12c3c:	cmp	r0, r1
   12c40:	bcc	12c30 <__assert_fail@plt+0x18ac>
   12c44:	ldr	r0, [r4]
   12c48:	ldr	r1, [r4, #8]
   12c4c:	add	r1, r1, r0, lsl #2
   12c50:	mov	r0, r6
   12c54:	mov	r2, r5
   12c58:	bl	12ef0 <__assert_fail@plt+0x1b6c>
   12c5c:	mov	r1, r0
   12c60:	mov	r0, #0
   12c64:	cmp	r1, #0
   12c68:	beq	12c7c <__assert_fail@plt+0x18f8>
   12c6c:	ldr	r0, [r4]
   12c70:	add	r0, r0, #1
   12c74:	str	r0, [r4]
   12c78:	mov	r0, #1
   12c7c:	pop	{r4, r5, r6, r7, fp, pc}
   12c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c84:	add	fp, sp, #28
   12c88:	sub	sp, sp, #4
   12c8c:	mov	r8, r1
   12c90:	mov	sl, r0
   12c94:	movw	r0, #37308	; 0x91bc
   12c98:	movt	r0, #2
   12c9c:	ldr	r9, [r0, #8]
   12ca0:	cmp	r9, #0
   12ca4:	beq	12d5c <__assert_fail@plt+0x19d8>
   12ca8:	movw	r0, #37144	; 0x9118
   12cac:	movt	r0, #2
   12cb0:	ldr	r5, [r0]
   12cb4:	movw	r0, #37328	; 0x91d0
   12cb8:	movt	r0, #2
   12cbc:	cmp	sl, r0
   12cc0:	mov	r7, sl
   12cc4:	moveq	r7, r8
   12cc8:	ldr	r2, [r9]
   12ccc:	cmp	r2, #1
   12cd0:	mov	r1, r8
   12cd4:	moveq	r1, sl
   12cd8:	cmp	r2, #0
   12cdc:	moveq	r1, r7
   12ce0:	movw	r3, #37140	; 0x9114
   12ce4:	movt	r3, #2
   12ce8:	movw	r4, #37136	; 0x9110
   12cec:	movt	r4, #2
   12cf0:	cmp	sl, r0
   12cf4:	moveq	r4, r3
   12cf8:	cmp	r2, #0
   12cfc:	mov	r0, r4
   12d00:	addne	r0, r9, #4
   12d04:	ldr	r0, [r0]
   12d08:	bl	1306c <__assert_fail@plt+0x1ce8>
   12d0c:	uxtb	r6, r5
   12d10:	cmp	r5, #0
   12d14:	movwmi	r6, #32
   12d18:	ldr	r5, [r9, #8]
   12d1c:	cmp	r5, #0
   12d20:	beq	12dc0 <__assert_fail@plt+0x1a3c>
   12d24:	mov	r0, r6
   12d28:	bl	11378 <putchar_unlocked@plt>
   12d2c:	ldr	r0, [r5]
   12d30:	cmp	r0, #1
   12d34:	mov	r1, r8
   12d38:	moveq	r1, sl
   12d3c:	cmp	r0, #0
   12d40:	moveq	r1, r7
   12d44:	mov	r0, r4
   12d48:	addne	r0, r5, #4
   12d4c:	ldr	r0, [r0]
   12d50:	bl	1306c <__assert_fail@plt+0x1ce8>
   12d54:	ldr	r5, [r5, #8]
   12d58:	b	12d1c <__assert_fail@plt+0x1998>
   12d5c:	movw	r0, #37328	; 0x91d0
   12d60:	movt	r0, #2
   12d64:	movw	r4, #37140	; 0x9114
   12d68:	movt	r4, #2
   12d6c:	movw	r5, #37136	; 0x9110
   12d70:	movt	r5, #2
   12d74:	cmp	sl, r0
   12d78:	mov	r0, r5
   12d7c:	moveq	r0, r4
   12d80:	ldr	r0, [r0]
   12d84:	mov	r1, sl
   12d88:	moveq	r1, r8
   12d8c:	bl	1306c <__assert_fail@plt+0x1ce8>
   12d90:	movw	r0, #37320	; 0x91c8
   12d94:	movt	r0, #2
   12d98:	ldr	r2, [r0]
   12d9c:	ldr	r1, [r5]
   12da0:	mov	r0, sl
   12da4:	bl	130c8 <__assert_fail@plt+0x1d44>
   12da8:	movw	r0, #37324	; 0x91cc
   12dac:	movt	r0, #2
   12db0:	ldr	r2, [r0]
   12db4:	ldr	r1, [r4]
   12db8:	mov	r0, r8
   12dbc:	bl	130c8 <__assert_fail@plt+0x1d44>
   12dc0:	movw	r0, #37286	; 0x91a6
   12dc4:	movt	r0, #2
   12dc8:	ldrb	r1, [r0]
   12dcc:	mov	r0, #10
   12dd0:	cmp	r1, #0
   12dd4:	movwne	r0, #0
   12dd8:	sub	sp, fp, #28
   12ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de0:	b	11378 <putchar_unlocked@plt>
   12de4:	cmp	r2, #0
   12de8:	movne	r2, #0
   12dec:	strne	r2, [r1]
   12df0:	mov	r2, r3
   12df4:	b	12be0 <__assert_fail@plt+0x185c>
   12df8:	push	{r4, r5, fp, lr}
   12dfc:	add	fp, sp, #8
   12e00:	mov	r5, r0
   12e04:	ldr	r0, [r0, #12]
   12e08:	mov	ip, #0
   12e0c:	cmp	r0, r2
   12e10:	mov	r0, #0
   12e14:	mov	r4, #0
   12e18:	bls	12e28 <__assert_fail@plt+0x1aa4>
   12e1c:	ldr	r5, [r5, #20]
   12e20:	ldr	r0, [r5, r2, lsl #3]!
   12e24:	ldr	r4, [r5, #4]
   12e28:	ldr	r2, [r1, #12]
   12e2c:	cmp	r2, r3
   12e30:	mov	r5, #0
   12e34:	bls	12e44 <__assert_fail@plt+0x1ac0>
   12e38:	ldr	r1, [r1, #20]
   12e3c:	ldr	ip, [r1, r3, lsl #3]!
   12e40:	ldr	r5, [r1, #4]
   12e44:	cmp	r4, #0
   12e48:	beq	12e80 <__assert_fail@plt+0x1afc>
   12e4c:	cmp	r5, #0
   12e50:	beq	12e90 <__assert_fail@plt+0x1b0c>
   12e54:	movw	r1, #37284	; 0x91a4
   12e58:	movt	r1, #2
   12e5c:	ldrb	r1, [r1]
   12e60:	cmp	r1, #1
   12e64:	bne	12e98 <__assert_fail@plt+0x1b14>
   12e68:	cmp	r4, r5
   12e6c:	mov	r2, r5
   12e70:	movcc	r2, r4
   12e74:	mov	r1, ip
   12e78:	bl	139f8 <__assert_fail@plt+0x2674>
   12e7c:	b	12ed4 <__assert_fail@plt+0x1b50>
   12e80:	cmp	r5, #0
   12e84:	mvnne	r5, #0
   12e88:	mov	r0, r5
   12e8c:	pop	{r4, r5, fp, pc}
   12e90:	mov	r0, #1
   12e94:	pop	{r4, r5, fp, pc}
   12e98:	movw	r1, #37264	; 0x9190
   12e9c:	movt	r1, #2
   12ea0:	ldrb	r1, [r1]
   12ea4:	cmp	r1, #0
   12ea8:	beq	12ec0 <__assert_fail@plt+0x1b3c>
   12eac:	mov	r1, r4
   12eb0:	mov	r2, ip
   12eb4:	mov	r3, r5
   12eb8:	pop	{r4, r5, fp, lr}
   12ebc:	b	15f9c <__assert_fail@plt+0x4c18>
   12ec0:	cmp	r4, r5
   12ec4:	mov	r2, r5
   12ec8:	movcc	r2, r4
   12ecc:	mov	r1, ip
   12ed0:	bl	11144 <memcmp@plt>
   12ed4:	cmp	r0, #0
   12ed8:	popne	{r4, r5, fp, pc}
   12edc:	subs	r0, r4, r5
   12ee0:	movwne	r0, #1
   12ee4:	cmp	r4, r5
   12ee8:	mvncc	r0, #0
   12eec:	pop	{r4, r5, fp, pc}
   12ef0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ef4:	add	fp, sp, #24
   12ef8:	mov	r4, r2
   12efc:	mov	r6, r0
   12f00:	sub	r7, r2, #1
   12f04:	movw	r8, #37352	; 0x91e8
   12f08:	movt	r8, #2
   12f0c:	ldr	r2, [r8, r7, lsl #2]
   12f10:	ldr	r0, [r1]
   12f14:	cmp	r0, r2
   12f18:	beq	12f34 <__assert_fail@plt+0x1bb0>
   12f1c:	mov	r5, r0
   12f20:	cmp	r5, #0
   12f24:	beq	12f50 <__assert_fail@plt+0x1bcc>
   12f28:	mov	r0, r5
   12f2c:	bl	1317c <__assert_fail@plt+0x1df8>
   12f30:	b	12f5c <__assert_fail@plt+0x1bd8>
   12f34:	movw	r2, #37300	; 0x91b4
   12f38:	movt	r2, #2
   12f3c:	ldr	r5, [r2, r7, lsl #2]
   12f40:	str	r0, [r2, r7, lsl #2]
   12f44:	str	r5, [r1]
   12f48:	cmp	r5, #0
   12f4c:	bne	12f28 <__assert_fail@plt+0x1ba4>
   12f50:	mov	r0, r1
   12f54:	bl	13188 <__assert_fail@plt+0x1e04>
   12f58:	mov	r5, r0
   12f5c:	movw	r0, #37286	; 0x91a6
   12f60:	movt	r0, #2
   12f64:	ldrb	r0, [r0]
   12f68:	mov	r2, #10
   12f6c:	cmp	r0, #0
   12f70:	movwne	r2, #0
   12f74:	mov	r0, r5
   12f78:	mov	r1, r6
   12f7c:	bl	13910 <__assert_fail@plt+0x258c>
   12f80:	cmp	r0, #0
   12f84:	beq	12fd0 <__assert_fail@plt+0x1c4c>
   12f88:	movw	r0, #37360	; 0x91f0
   12f8c:	movt	r0, #2
   12f90:	ldr	r1, [r0, r7, lsl #3]!
   12f94:	adds	r1, r1, #1
   12f98:	str	r1, [r0]
   12f9c:	ldr	r1, [r0, #4]
   12fa0:	adc	r1, r1, #0
   12fa4:	str	r1, [r0, #4]
   12fa8:	mov	r0, r5
   12fac:	bl	131a8 <__assert_fail@plt+0x1e24>
   12fb0:	ldr	r0, [r8, r7, lsl #2]
   12fb4:	cmp	r0, #0
   12fb8:	movne	r1, r5
   12fbc:	movne	r2, r4
   12fc0:	blne	13308 <__assert_fail@plt+0x1f84>
   12fc4:	str	r5, [r8, r7, lsl #2]
   12fc8:	mov	r0, #1
   12fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fd0:	mov	r0, r6
   12fd4:	bl	111bc <ferror_unlocked@plt>
   12fd8:	cmp	r0, #0
   12fdc:	bne	12ff0 <__assert_fail@plt+0x1c6c>
   12fe0:	mov	r0, r5
   12fe4:	bl	12a58 <__assert_fail@plt+0x16d4>
   12fe8:	mov	r0, #0
   12fec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ff0:	bl	1127c <__errno_location@plt>
   12ff4:	ldr	r4, [r0]
   12ff8:	movw	r1, #33489	; 0x82d1
   12ffc:	movt	r1, #1
   13000:	mov	r0, #0
   13004:	mov	r2, #5
   13008:	bl	1115c <dcgettext@plt>
   1300c:	mov	r2, r0
   13010:	mov	r0, #1
   13014:	mov	r1, r4
   13018:	bl	111d4 <error@plt>
   1301c:	push	{r4, r5, fp, lr}
   13020:	add	fp, sp, #8
   13024:	mov	r4, r0
   13028:	ldr	r0, [r0, #4]
   1302c:	cmp	r0, #0
   13030:	beq	13060 <__assert_fail@plt+0x1cdc>
   13034:	mov	r5, #0
   13038:	ldr	r0, [r4, #8]
   1303c:	ldr	r0, [r0, r5, lsl #2]
   13040:	bl	12a58 <__assert_fail@plt+0x16d4>
   13044:	ldr	r0, [r4, #8]
   13048:	ldr	r0, [r0, r5, lsl #2]
   1304c:	bl	137b8 <__assert_fail@plt+0x2434>
   13050:	add	r5, r5, #1
   13054:	ldr	r0, [r4, #4]
   13058:	cmp	r5, r0
   1305c:	bcc	13038 <__assert_fail@plt+0x1cb4>
   13060:	ldr	r0, [r4, #8]
   13064:	pop	{r4, r5, fp, lr}
   13068:	b	137b8 <__assert_fail@plt+0x2434>
   1306c:	ldr	r2, [r1, #12]
   13070:	cmp	r2, r0
   13074:	bls	130a4 <__assert_fail@plt+0x1d20>
   13078:	ldr	r1, [r1, #20]
   1307c:	add	r2, r1, r0, lsl #3
   13080:	ldr	r2, [r2, #4]
   13084:	cmp	r2, #0
   13088:	beq	130a4 <__assert_fail@plt+0x1d20>
   1308c:	ldr	r0, [r1, r0, lsl #3]
   13090:	movw	r1, #37252	; 0x9184
   13094:	movt	r1, #2
   13098:	ldr	r3, [r1]
   1309c:	mov	r1, #1
   130a0:	b	11138 <fwrite_unlocked@plt>
   130a4:	movw	r0, #37280	; 0x91a0
   130a8:	movt	r0, #2
   130ac:	ldr	r0, [r0]
   130b0:	cmp	r0, #0
   130b4:	bxeq	lr
   130b8:	movw	r1, #37252	; 0x9184
   130bc:	movt	r1, #2
   130c0:	ldr	r1, [r1]
   130c4:	b	110cc <fputs_unlocked@plt>
   130c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130cc:	add	fp, sp, #24
   130d0:	mov	r4, r2
   130d4:	mov	r9, r1
   130d8:	mov	r5, r0
   130dc:	movw	r0, #37285	; 0x91a5
   130e0:	movt	r0, #2
   130e4:	ldrb	r0, [r0]
   130e8:	cmp	r0, #0
   130ec:	ldreq	r4, [r5, #12]
   130f0:	movw	r0, #37144	; 0x9118
   130f4:	movt	r0, #2
   130f8:	ldr	r8, [r0]
   130fc:	cmp	r8, #0
   13100:	movwmi	r8, #32
   13104:	cmp	r9, #0
   13108:	cmpne	r4, #0
   1310c:	bne	13144 <__assert_fail@plt+0x1dc0>
   13110:	add	r6, r9, #1
   13114:	cmp	r6, r4
   13118:	bcs	13140 <__assert_fail@plt+0x1dbc>
   1311c:	uxtb	r7, r8
   13120:	mov	r0, r7
   13124:	bl	11378 <putchar_unlocked@plt>
   13128:	mov	r0, r6
   1312c:	mov	r1, r5
   13130:	bl	1306c <__assert_fail@plt+0x1ce8>
   13134:	add	r6, r6, #1
   13138:	cmp	r4, r6
   1313c:	bne	13120 <__assert_fail@plt+0x1d9c>
   13140:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13144:	uxtb	r7, r8
   13148:	mov	r6, #1
   1314c:	mov	r0, r7
   13150:	bl	11378 <putchar_unlocked@plt>
   13154:	sub	r0, r6, #1
   13158:	mov	r1, r5
   1315c:	bl	1306c <__assert_fail@plt+0x1ce8>
   13160:	cmp	r6, r9
   13164:	bcs	13110 <__assert_fail@plt+0x1d8c>
   13168:	add	r0, r6, #1
   1316c:	cmp	r6, r4
   13170:	mov	r6, r0
   13174:	bcc	1314c <__assert_fail@plt+0x1dc8>
   13178:	b	13110 <__assert_fail@plt+0x1d8c>
   1317c:	mov	r1, #0
   13180:	str	r1, [r0, #12]
   13184:	bx	lr
   13188:	push	{r4, sl, fp, lr}
   1318c:	add	fp, sp, #8
   13190:	mov	r4, r0
   13194:	mov	r0, #1
   13198:	mov	r1, #24
   1319c:	bl	15e88 <__assert_fail@plt+0x4b04>
   131a0:	str	r0, [r4]
   131a4:	pop	{r4, sl, fp, pc}
   131a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   131ac:	add	fp, sp, #24
   131b0:	mov	r4, r0
   131b4:	ldr	r0, [r0, #4]
   131b8:	ldr	r5, [r4, #8]
   131bc:	add	r6, r5, r0
   131c0:	sub	r8, r6, #1
   131c4:	cmp	r5, r8
   131c8:	beq	13274 <__assert_fail@plt+0x1ef0>
   131cc:	movw	r7, #37144	; 0x9118
   131d0:	movt	r7, #2
   131d4:	ldr	r1, [r7]
   131d8:	cmp	r1, #0
   131dc:	bmi	13238 <__assert_fail@plt+0x1eb4>
   131e0:	cmp	r1, #10
   131e4:	beq	13238 <__assert_fail@plt+0x1eb4>
   131e8:	sub	r2, r8, r5
   131ec:	ldr	r1, [r7]
   131f0:	mov	r0, r5
   131f4:	bl	112d0 <memchr@plt>
   131f8:	cmp	r0, #0
   131fc:	beq	13240 <__assert_fail@plt+0x1ebc>
   13200:	mov	r6, r0
   13204:	sub	r2, r6, r5
   13208:	mov	r0, r4
   1320c:	mov	r1, r5
   13210:	bl	13434 <__assert_fail@plt+0x20b0>
   13214:	add	r5, r6, #1
   13218:	sub	r2, r8, r5
   1321c:	ldr	r1, [r7]
   13220:	mov	r0, r5
   13224:	bl	112d0 <memchr@plt>
   13228:	mov	r6, r0
   1322c:	cmp	r0, #0
   13230:	bne	13204 <__assert_fail@plt+0x1e80>
   13234:	b	13240 <__assert_fail@plt+0x1ebc>
   13238:	cmn	r1, #1
   1323c:	ble	13254 <__assert_fail@plt+0x1ed0>
   13240:	sub	r2, r8, r5
   13244:	mov	r0, r4
   13248:	mov	r1, r5
   1324c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13250:	b	13434 <__assert_fail@plt+0x20b0>
   13254:	sub	r7, r0, #1
   13258:	ldrb	r0, [r5]
   1325c:	bl	13488 <__assert_fail@plt+0x2104>
   13260:	cmp	r0, #0
   13264:	beq	13278 <__assert_fail@plt+0x1ef4>
   13268:	subs	r7, r7, #1
   1326c:	add	r5, r5, #1
   13270:	bne	13258 <__assert_fail@plt+0x1ed4>
   13274:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13278:	sub	r9, r6, #2
   1327c:	add	r1, r5, #1
   13280:	mov	r0, r5
   13284:	cmp	r9, r0
   13288:	beq	132fc <__assert_fail@plt+0x1f78>
   1328c:	mov	r7, r1
   13290:	add	r6, r0, #1
   13294:	ldrb	r0, [r0, #1]
   13298:	bl	13488 <__assert_fail@plt+0x2104>
   1329c:	add	r1, r7, #1
   132a0:	cmp	r0, #0
   132a4:	mov	r0, r6
   132a8:	beq	13284 <__assert_fail@plt+0x1f00>
   132ac:	sub	r2, r6, r5
   132b0:	mov	r0, r4
   132b4:	mov	r1, r5
   132b8:	bl	13434 <__assert_fail@plt+0x20b0>
   132bc:	cmp	r9, r6
   132c0:	beq	132ec <__assert_fail@plt+0x1f68>
   132c4:	ldrb	r0, [r7, #1]
   132c8:	bl	13488 <__assert_fail@plt+0x2104>
   132cc:	cmp	r0, #0
   132d0:	addne	r7, r7, #1
   132d4:	cmpne	r9, r7
   132d8:	bne	132c4 <__assert_fail@plt+0x1f40>
   132dc:	add	r5, r7, #1
   132e0:	cmp	r5, r8
   132e4:	bne	1327c <__assert_fail@plt+0x1ef8>
   132e8:	b	13240 <__assert_fail@plt+0x1ebc>
   132ec:	add	r5, r6, #1
   132f0:	cmp	r5, r8
   132f4:	bne	1327c <__assert_fail@plt+0x1ef8>
   132f8:	b	13240 <__assert_fail@plt+0x1ebc>
   132fc:	sub	r0, r0, r5
   13300:	add	r2, r0, #1
   13304:	b	13244 <__assert_fail@plt+0x1ec0>
   13308:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1330c:	add	fp, sp, #24
   13310:	sub	sp, sp, #16
   13314:	mov	r4, r1
   13318:	movw	r7, #37272	; 0x9198
   1331c:	movt	r7, #2
   13320:	ldr	r1, [r7]
   13324:	cmp	r1, #1
   13328:	beq	13348 <__assert_fail@plt+0x1fc4>
   1332c:	cmp	r1, #2
   13330:	beq	1342c <__assert_fail@plt+0x20a8>
   13334:	movw	r1, #37266	; 0x9192
   13338:	movt	r1, #2
   1333c:	ldrb	r1, [r1]
   13340:	cmp	r1, #1
   13344:	bne	1342c <__assert_fail@plt+0x20a8>
   13348:	sub	r5, r2, #1
   1334c:	movw	r6, #37267	; 0x9193
   13350:	movt	r6, #2
   13354:	ldrb	r1, [r6, r5]
   13358:	cmp	r1, #0
   1335c:	bne	1342c <__assert_fail@plt+0x20a8>
   13360:	movw	r1, #37136	; 0x9110
   13364:	movt	r1, #2
   13368:	movw	r3, #37140	; 0x9114
   1336c:	movt	r3, #2
   13370:	cmp	r2, #1
   13374:	moveq	r3, r1
   13378:	ldr	r2, [r3]
   1337c:	mov	r1, r4
   13380:	mov	r3, r2
   13384:	bl	12df8 <__assert_fail@plt+0x1a74>
   13388:	cmp	r0, #1
   1338c:	blt	1342c <__assert_fail@plt+0x20a8>
   13390:	ldr	r0, [r4, #4]
   13394:	cmp	r0, #0
   13398:	beq	133c0 <__assert_fail@plt+0x203c>
   1339c:	ldr	r1, [r4, #8]
   133a0:	sub	r2, r0, #1
   133a4:	ldrb	r1, [r1, r2]
   133a8:	cmp	r1, #10
   133ac:	moveq	r0, r2
   133b0:	mvn	r8, #-2147483648	; 0x80000000
   133b4:	cmn	r0, #-2147483646	; 0x80000002
   133b8:	movls	r8, r0
   133bc:	b	133c8 <__assert_fail@plt+0x2044>
   133c0:	mov	r0, #0
   133c4:	mov	r8, r0
   133c8:	ldr	r7, [r7]
   133cc:	movw	r1, #33500	; 0x82dc
   133d0:	movt	r1, #1
   133d4:	mov	r0, #0
   133d8:	mov	r2, #5
   133dc:	bl	1115c <dcgettext@plt>
   133e0:	mov	r2, r0
   133e4:	movw	r0, #37288	; 0x91a8
   133e8:	movt	r0, #2
   133ec:	ldr	r3, [r0, r5, lsl #2]
   133f0:	movw	r0, #37360	; 0x91f0
   133f4:	movt	r0, #2
   133f8:	ldr	r1, [r0, r5, lsl #3]!
   133fc:	ldr	r0, [r0, #4]
   13400:	ldr	r4, [r4, #8]
   13404:	str	r1, [sp]
   13408:	stmib	sp, {r0, r8}
   1340c:	str	r4, [sp, #12]
   13410:	sub	r0, r7, #1
   13414:	clz	r0, r0
   13418:	lsr	r0, r0, #5
   1341c:	mov	r1, #0
   13420:	bl	111d4 <error@plt>
   13424:	mov	r0, #1
   13428:	strb	r0, [r6, r5]
   1342c:	sub	sp, fp, #24
   13430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13434:	push	{r4, r5, r6, sl, fp, lr}
   13438:	add	fp, sp, #16
   1343c:	mov	r5, r2
   13440:	mov	r6, r1
   13444:	mov	r4, r0
   13448:	mov	r1, r0
   1344c:	ldr	r0, [r1, #16]!
   13450:	ldr	r2, [r1, #-4]
   13454:	cmp	r2, r0
   13458:	bcc	1346c <__assert_fail@plt+0x20e8>
   1345c:	ldr	r0, [r4, #20]
   13460:	mov	r2, #8
   13464:	bl	15c94 <__assert_fail@plt+0x4910>
   13468:	str	r0, [r4, #20]
   1346c:	ldr	r0, [r4, #12]
   13470:	ldr	r1, [r4, #20]
   13474:	str	r6, [r1, r0, lsl #3]!
   13478:	str	r5, [r1, #4]
   1347c:	add	r0, r0, #1
   13480:	str	r0, [r4, #12]
   13484:	pop	{r4, r5, r6, sl, fp, pc}
   13488:	push	{r4, sl, fp, lr}
   1348c:	add	fp, sp, #8
   13490:	mov	r4, r0
   13494:	bl	11234 <__ctype_b_loc@plt>
   13498:	ldr	r0, [r0]
   1349c:	ldrb	r0, [r0, r4, lsl #1]
   134a0:	and	r0, r0, #1
   134a4:	sub	r1, r4, #10
   134a8:	clz	r1, r1
   134ac:	lsr	r1, r1, #5
   134b0:	orr	r0, r1, r0
   134b4:	pop	{r4, sl, fp, pc}
   134b8:	movw	r1, #37376	; 0x9200
   134bc:	movt	r1, #2
   134c0:	str	r0, [r1]
   134c4:	bx	lr
   134c8:	movw	r1, #37380	; 0x9204
   134cc:	movt	r1, #2
   134d0:	strb	r0, [r1]
   134d4:	bx	lr
   134d8:	push	{r4, r5, r6, sl, fp, lr}
   134dc:	add	fp, sp, #16
   134e0:	sub	sp, sp, #8
   134e4:	movw	r0, #37252	; 0x9184
   134e8:	movt	r0, #2
   134ec:	ldr	r0, [r0]
   134f0:	bl	16f58 <__assert_fail@plt+0x5bd4>
   134f4:	cmp	r0, #0
   134f8:	beq	13520 <__assert_fail@plt+0x219c>
   134fc:	movw	r0, #37380	; 0x9204
   13500:	movt	r0, #2
   13504:	ldrb	r0, [r0]
   13508:	cmp	r0, #0
   1350c:	beq	13540 <__assert_fail@plt+0x21bc>
   13510:	bl	1127c <__errno_location@plt>
   13514:	ldr	r0, [r0]
   13518:	cmp	r0, #32
   1351c:	bne	13540 <__assert_fail@plt+0x21bc>
   13520:	movw	r0, #37240	; 0x9178
   13524:	movt	r0, #2
   13528:	ldr	r0, [r0]
   1352c:	bl	16f58 <__assert_fail@plt+0x5bd4>
   13530:	cmp	r0, #0
   13534:	subeq	sp, fp, #16
   13538:	popeq	{r4, r5, r6, sl, fp, pc}
   1353c:	b	135b0 <__assert_fail@plt+0x222c>
   13540:	movw	r1, #33735	; 0x83c7
   13544:	movt	r1, #1
   13548:	mov	r0, #0
   1354c:	mov	r2, #5
   13550:	bl	1115c <dcgettext@plt>
   13554:	mov	r4, r0
   13558:	movw	r0, #37376	; 0x9200
   1355c:	movt	r0, #2
   13560:	ldr	r6, [r0]
   13564:	bl	1127c <__errno_location@plt>
   13568:	ldr	r5, [r0]
   1356c:	cmp	r6, #0
   13570:	bne	1358c <__assert_fail@plt+0x2208>
   13574:	movw	r2, #33370	; 0x825a
   13578:	movt	r2, #1
   1357c:	mov	r0, #0
   13580:	mov	r1, r5
   13584:	mov	r3, r4
   13588:	b	135ac <__assert_fail@plt+0x2228>
   1358c:	mov	r0, r6
   13590:	bl	150f0 <__assert_fail@plt+0x3d6c>
   13594:	mov	r3, r0
   13598:	str	r4, [sp]
   1359c:	movw	r2, #33747	; 0x83d3
   135a0:	movt	r2, #1
   135a4:	mov	r0, #0
   135a8:	mov	r1, r5
   135ac:	bl	111d4 <error@plt>
   135b0:	movw	r0, #37156	; 0x9124
   135b4:	movt	r0, #2
   135b8:	ldr	r0, [r0]
   135bc:	bl	11114 <_exit@plt>
   135c0:	b	110f0 <posix_fadvise64@plt>
   135c4:	cmp	r0, #0
   135c8:	bxeq	lr
   135cc:	push	{r4, sl, fp, lr}
   135d0:	add	fp, sp, #8
   135d4:	sub	sp, sp, #16
   135d8:	mov	r4, r1
   135dc:	bl	112ac <fileno@plt>
   135e0:	mov	r1, #0
   135e4:	str	r1, [sp]
   135e8:	stmib	sp, {r1, r4}
   135ec:	mov	r2, #0
   135f0:	mov	r3, #0
   135f4:	bl	135c0 <__assert_fail@plt+0x223c>
   135f8:	sub	sp, fp, #8
   135fc:	pop	{r4, sl, fp, pc}
   13600:	push	{r4, r5, fp, lr}
   13604:	add	fp, sp, #8
   13608:	sub	sp, sp, #8
   1360c:	mov	r4, r0
   13610:	bl	112ac <fileno@plt>
   13614:	cmn	r0, #1
   13618:	ble	13690 <__assert_fail@plt+0x230c>
   1361c:	mov	r0, r4
   13620:	bl	11204 <__freading@plt>
   13624:	cmp	r0, #0
   13628:	beq	13654 <__assert_fail@plt+0x22d0>
   1362c:	mov	r0, r4
   13630:	bl	112ac <fileno@plt>
   13634:	mov	r1, #1
   13638:	str	r1, [sp]
   1363c:	mov	r2, #0
   13640:	mov	r3, #0
   13644:	bl	11198 <lseek64@plt>
   13648:	and	r0, r0, r1
   1364c:	cmn	r0, #1
   13650:	beq	13690 <__assert_fail@plt+0x230c>
   13654:	mov	r0, r4
   13658:	bl	136a0 <__assert_fail@plt+0x231c>
   1365c:	cmp	r0, #0
   13660:	beq	13690 <__assert_fail@plt+0x230c>
   13664:	bl	1127c <__errno_location@plt>
   13668:	ldr	r5, [r0]
   1366c:	mov	r0, r4
   13670:	bl	112dc <fclose@plt>
   13674:	cmp	r5, #0
   13678:	beq	13688 <__assert_fail@plt+0x2304>
   1367c:	bl	1127c <__errno_location@plt>
   13680:	str	r5, [r0]
   13684:	mvn	r0, #0
   13688:	sub	sp, fp, #8
   1368c:	pop	{r4, r5, fp, pc}
   13690:	mov	r0, r4
   13694:	sub	sp, fp, #8
   13698:	pop	{r4, r5, fp, lr}
   1369c:	b	112dc <fclose@plt>
   136a0:	push	{r4, sl, fp, lr}
   136a4:	add	fp, sp, #8
   136a8:	mov	r4, r0
   136ac:	cmp	r0, #0
   136b0:	beq	136c8 <__assert_fail@plt+0x2344>
   136b4:	mov	r0, r4
   136b8:	bl	11204 <__freading@plt>
   136bc:	cmp	r0, #0
   136c0:	movne	r0, r4
   136c4:	blne	136d4 <__assert_fail@plt+0x2350>
   136c8:	mov	r0, r4
   136cc:	pop	{r4, sl, fp, lr}
   136d0:	b	110fc <fflush@plt>
   136d4:	push	{fp, lr}
   136d8:	mov	fp, sp
   136dc:	sub	sp, sp, #8
   136e0:	ldrb	r1, [r0, #1]
   136e4:	tst	r1, #1
   136e8:	beq	13700 <__assert_fail@plt+0x237c>
   136ec:	mov	r1, #1
   136f0:	str	r1, [sp]
   136f4:	mov	r2, #0
   136f8:	mov	r3, #0
   136fc:	bl	137e0 <__assert_fail@plt+0x245c>
   13700:	mov	sp, fp
   13704:	pop	{fp, pc}
   13708:	push	{r4, r5, r6, r7, fp, lr}
   1370c:	add	fp, sp, #16
   13710:	mov	r5, r1
   13714:	bl	11324 <fopen64@plt>
   13718:	mov	r4, #0
   1371c:	cmp	r0, #0
   13720:	beq	13788 <__assert_fail@plt+0x2404>
   13724:	mov	r6, r0
   13728:	bl	112ac <fileno@plt>
   1372c:	cmp	r0, #2
   13730:	bhi	13790 <__assert_fail@plt+0x240c>
   13734:	bl	156fc <__assert_fail@plt+0x4378>
   13738:	cmn	r0, #1
   1373c:	ble	13798 <__assert_fail@plt+0x2414>
   13740:	mov	r7, r0
   13744:	mov	r0, r6
   13748:	bl	13600 <__assert_fail@plt+0x227c>
   1374c:	cmp	r0, #0
   13750:	bne	1376c <__assert_fail@plt+0x23e8>
   13754:	mov	r0, r7
   13758:	mov	r1, r5
   1375c:	bl	110b4 <fdopen@plt>
   13760:	mov	r4, r0
   13764:	cmp	r0, #0
   13768:	bne	13788 <__assert_fail@plt+0x2404>
   1376c:	bl	1127c <__errno_location@plt>
   13770:	mov	r4, r0
   13774:	ldr	r5, [r0]
   13778:	mov	r0, r7
   1377c:	bl	1136c <close@plt>
   13780:	str	r5, [r4]
   13784:	mov	r4, #0
   13788:	mov	r0, r4
   1378c:	pop	{r4, r5, r6, r7, fp, pc}
   13790:	mov	r0, r6
   13794:	pop	{r4, r5, r6, r7, fp, pc}
   13798:	bl	1127c <__errno_location@plt>
   1379c:	mov	r5, r0
   137a0:	ldr	r7, [r0]
   137a4:	mov	r0, r6
   137a8:	bl	13600 <__assert_fail@plt+0x227c>
   137ac:	str	r7, [r5]
   137b0:	mov	r0, r4
   137b4:	pop	{r4, r5, r6, r7, fp, pc}
   137b8:	push	{r4, r5, r6, sl, fp, lr}
   137bc:	add	fp, sp, #16
   137c0:	mov	r4, r0
   137c4:	bl	1127c <__errno_location@plt>
   137c8:	mov	r5, r0
   137cc:	ldr	r6, [r0]
   137d0:	mov	r0, r4
   137d4:	bl	11108 <free@plt>
   137d8:	str	r6, [r5]
   137dc:	pop	{r4, r5, r6, sl, fp, pc}
   137e0:	push	{r4, r5, r6, r7, fp, lr}
   137e4:	add	fp, sp, #16
   137e8:	sub	sp, sp, #8
   137ec:	mov	r5, r3
   137f0:	mov	r6, r2
   137f4:	mov	r4, r0
   137f8:	ldr	r0, [r0, #4]
   137fc:	ldr	r1, [r4, #8]
   13800:	cmp	r1, r0
   13804:	bne	13820 <__assert_fail@plt+0x249c>
   13808:	ldrd	r0, [r4, #16]
   1380c:	cmp	r1, r0
   13810:	bne	13820 <__assert_fail@plt+0x249c>
   13814:	ldr	r0, [r4, #36]	; 0x24
   13818:	cmp	r0, #0
   1381c:	beq	13838 <__assert_fail@plt+0x24b4>
   13820:	mov	r0, r4
   13824:	mov	r2, r6
   13828:	mov	r3, r5
   1382c:	sub	sp, fp, #16
   13830:	pop	{r4, r5, r6, r7, fp, lr}
   13834:	b	112e8 <fseeko64@plt>
   13838:	ldr	r7, [fp, #8]
   1383c:	mov	r0, r4
   13840:	bl	112ac <fileno@plt>
   13844:	str	r7, [sp]
   13848:	mov	r2, r6
   1384c:	mov	r3, r5
   13850:	bl	11198 <lseek64@plt>
   13854:	and	r2, r0, r1
   13858:	cmn	r2, #1
   1385c:	beq	1387c <__assert_fail@plt+0x24f8>
   13860:	strd	r0, [r4, #80]	; 0x50
   13864:	ldr	r0, [r4]
   13868:	bic	r0, r0, #16
   1386c:	str	r0, [r4]
   13870:	mov	r0, #0
   13874:	sub	sp, fp, #16
   13878:	pop	{r4, r5, r6, r7, fp, pc}
   1387c:	mvn	r0, #0
   13880:	sub	sp, fp, #16
   13884:	pop	{r4, r5, r6, r7, fp, pc}
   13888:	push	{r4, sl, fp, lr}
   1388c:	add	fp, sp, #8
   13890:	sub	sp, sp, #264	; 0x108
   13894:	add	r1, sp, #7
   13898:	movw	r2, #257	; 0x101
   1389c:	bl	15658 <__assert_fail@plt+0x42d4>
   138a0:	mov	r4, #0
   138a4:	cmp	r0, #0
   138a8:	bne	138e8 <__assert_fail@plt+0x2564>
   138ac:	add	r0, sp, #7
   138b0:	movw	r1, #33754	; 0x83da
   138b4:	movt	r1, #1
   138b8:	mov	r2, #2
   138bc:	bl	1124c <bcmp@plt>
   138c0:	cmp	r0, #0
   138c4:	beq	138e8 <__assert_fail@plt+0x2564>
   138c8:	add	r0, sp, #7
   138cc:	movw	r1, #33756	; 0x83dc
   138d0:	movt	r1, #1
   138d4:	mov	r2, #6
   138d8:	bl	1124c <bcmp@plt>
   138dc:	mov	r4, r0
   138e0:	cmp	r0, #0
   138e4:	movwne	r4, #1
   138e8:	mov	r0, r4
   138ec:	sub	sp, fp, #8
   138f0:	pop	{r4, sl, fp, pc}
   138f4:	mov	r1, #0
   138f8:	str	r1, [r0]
   138fc:	str	r1, [r0, #4]
   13900:	str	r1, [r0, #8]
   13904:	bx	lr
   13908:	mov	r2, #10
   1390c:	b	13910 <__assert_fail@plt+0x258c>
   13910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13914:	add	fp, sp, #28
   13918:	sub	sp, sp, #4
   1391c:	mov	sl, r2
   13920:	mov	r8, r1
   13924:	mov	r4, r0
   13928:	ldr	r5, [r0]
   1392c:	ldr	r6, [r0, #8]
   13930:	mov	r0, r1
   13934:	bl	11360 <feof_unlocked@plt>
   13938:	cmp	r0, #0
   1393c:	beq	13948 <__assert_fail@plt+0x25c4>
   13940:	mov	r4, #0
   13944:	b	139e4 <__assert_fail@plt+0x2660>
   13948:	add	r9, r6, r5
   1394c:	mov	r7, r6
   13950:	b	13960 <__assert_fail@plt+0x25dc>
   13954:	strb	r5, [r7], #1
   13958:	cmp	r5, sl
   1395c:	beq	139dc <__assert_fail@plt+0x2658>
   13960:	mov	r0, r8
   13964:	bl	11150 <getc_unlocked@plt>
   13968:	mov	r5, r0
   1396c:	cmn	r0, #1
   13970:	bne	1399c <__assert_fail@plt+0x2618>
   13974:	cmp	r7, r6
   13978:	beq	13940 <__assert_fail@plt+0x25bc>
   1397c:	mov	r0, r8
   13980:	bl	111bc <ferror_unlocked@plt>
   13984:	cmp	r0, #0
   13988:	bne	13940 <__assert_fail@plt+0x25bc>
   1398c:	ldrb	r0, [r7, #-1]
   13990:	cmp	r0, sl
   13994:	mov	r5, sl
   13998:	beq	139dc <__assert_fail@plt+0x2658>
   1399c:	cmp	r7, r9
   139a0:	bne	13954 <__assert_fail@plt+0x25d0>
   139a4:	ldr	r7, [r4]
   139a8:	mov	r0, #1
   139ac:	str	r0, [sp]
   139b0:	mov	r0, r6
   139b4:	mov	r1, r4
   139b8:	mov	r2, #1
   139bc:	mvn	r3, #0
   139c0:	bl	15ce8 <__assert_fail@plt+0x4964>
   139c4:	mov	r6, r0
   139c8:	str	r0, [r4, #8]
   139cc:	add	r7, r0, r7
   139d0:	ldr	r0, [r4]
   139d4:	add	r9, r6, r0
   139d8:	b	13954 <__assert_fail@plt+0x25d0>
   139dc:	sub	r0, r7, r6
   139e0:	str	r0, [r4, #4]
   139e4:	mov	r0, r4
   139e8:	sub	sp, fp, #28
   139ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f0:	ldr	r0, [r0, #8]
   139f4:	b	137b8 <__assert_fail@plt+0x2434>
   139f8:	push	{r4, r5, r6, sl, fp, lr}
   139fc:	add	fp, sp, #16
   13a00:	cmp	r2, #0
   13a04:	beq	13a44 <__assert_fail@plt+0x26c0>
   13a08:	mov	r4, r2
   13a0c:	mov	r5, r1
   13a10:	mov	r6, r0
   13a14:	bl	11210 <__ctype_toupper_loc@plt>
   13a18:	ldr	r1, [r0]
   13a1c:	ldrb	r0, [r5]
   13a20:	ldr	r0, [r1, r0, lsl #2]
   13a24:	ldrb	r2, [r6]
   13a28:	ldr	r2, [r1, r2, lsl #2]
   13a2c:	subs	r0, r2, r0
   13a30:	bne	13a48 <__assert_fail@plt+0x26c4>
   13a34:	add	r6, r6, #1
   13a38:	add	r5, r5, #1
   13a3c:	subs	r4, r4, #1
   13a40:	bne	13a1c <__assert_fail@plt+0x2698>
   13a44:	mov	r0, #0
   13a48:	pop	{r4, r5, r6, sl, fp, pc}
   13a4c:	push	{r4, r5, fp, lr}
   13a50:	add	fp, sp, #8
   13a54:	cmp	r0, #0
   13a58:	beq	13aec <__assert_fail@plt+0x2768>
   13a5c:	mov	r4, r0
   13a60:	mov	r1, #47	; 0x2f
   13a64:	bl	1130c <strrchr@plt>
   13a68:	cmp	r0, #0
   13a6c:	mov	r5, r4
   13a70:	addne	r5, r0, #1
   13a74:	sub	r0, r5, r4
   13a78:	cmp	r0, #7
   13a7c:	blt	13ad0 <__assert_fail@plt+0x274c>
   13a80:	sub	r0, r5, #7
   13a84:	movw	r1, #33818	; 0x841a
   13a88:	movt	r1, #1
   13a8c:	mov	r2, #7
   13a90:	bl	11348 <strncmp@plt>
   13a94:	cmp	r0, #0
   13a98:	bne	13ad0 <__assert_fail@plt+0x274c>
   13a9c:	movw	r1, #33826	; 0x8422
   13aa0:	movt	r1, #1
   13aa4:	mov	r0, r5
   13aa8:	mov	r2, #3
   13aac:	bl	11348 <strncmp@plt>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13ac0 <__assert_fail@plt+0x273c>
   13ab8:	mov	r4, r5
   13abc:	b	13ad0 <__assert_fail@plt+0x274c>
   13ac0:	add	r4, r5, #3
   13ac4:	movw	r0, #37224	; 0x9168
   13ac8:	movt	r0, #2
   13acc:	str	r4, [r0]
   13ad0:	movw	r0, #37228	; 0x916c
   13ad4:	movt	r0, #2
   13ad8:	str	r4, [r0]
   13adc:	movw	r0, #37384	; 0x9208
   13ae0:	movt	r0, #2
   13ae4:	str	r4, [r0]
   13ae8:	pop	{r4, r5, fp, pc}
   13aec:	movw	r0, #37240	; 0x9178
   13af0:	movt	r0, #2
   13af4:	ldr	r3, [r0]
   13af8:	movw	r0, #33762	; 0x83e2
   13afc:	movt	r0, #1
   13b00:	mov	r1, #55	; 0x37
   13b04:	mov	r2, #1
   13b08:	bl	1118c <fwrite@plt>
   13b0c:	bl	11354 <abort@plt>
   13b10:	push	{r4, r5, r6, sl, fp, lr}
   13b14:	add	fp, sp, #16
   13b18:	mov	r4, r0
   13b1c:	movw	r0, #37392	; 0x9210
   13b20:	movt	r0, #2
   13b24:	cmp	r4, #0
   13b28:	moveq	r4, r0
   13b2c:	bl	1127c <__errno_location@plt>
   13b30:	mov	r5, r0
   13b34:	ldr	r6, [r0]
   13b38:	mov	r0, r4
   13b3c:	mov	r1, #48	; 0x30
   13b40:	bl	15eb8 <__assert_fail@plt+0x4b34>
   13b44:	str	r6, [r5]
   13b48:	pop	{r4, r5, r6, sl, fp, pc}
   13b4c:	movw	r1, #37392	; 0x9210
   13b50:	movt	r1, #2
   13b54:	cmp	r0, #0
   13b58:	movne	r1, r0
   13b5c:	ldr	r0, [r1]
   13b60:	bx	lr
   13b64:	movw	r2, #37392	; 0x9210
   13b68:	movt	r2, #2
   13b6c:	cmp	r0, #0
   13b70:	movne	r2, r0
   13b74:	str	r1, [r2]
   13b78:	bx	lr
   13b7c:	movw	r3, #37392	; 0x9210
   13b80:	movt	r3, #2
   13b84:	cmp	r0, #0
   13b88:	movne	r3, r0
   13b8c:	ubfx	r0, r1, #5, #3
   13b90:	add	ip, r3, r0, lsl #2
   13b94:	ldr	r3, [ip, #8]
   13b98:	and	r1, r1, #31
   13b9c:	mov	r0, #1
   13ba0:	and	r0, r0, r3, lsr r1
   13ba4:	and	r2, r2, #1
   13ba8:	eor	r2, r0, r2
   13bac:	eor	r1, r3, r2, lsl r1
   13bb0:	str	r1, [ip, #8]
   13bb4:	bx	lr
   13bb8:	movw	r2, #37392	; 0x9210
   13bbc:	movt	r2, #2
   13bc0:	cmp	r0, #0
   13bc4:	movne	r2, r0
   13bc8:	ldr	r0, [r2, #4]
   13bcc:	str	r1, [r2, #4]
   13bd0:	bx	lr
   13bd4:	push	{fp, lr}
   13bd8:	mov	fp, sp
   13bdc:	movw	r3, #37392	; 0x9210
   13be0:	movt	r3, #2
   13be4:	cmp	r0, #0
   13be8:	movne	r3, r0
   13bec:	mov	r0, #10
   13bf0:	str	r0, [r3]
   13bf4:	cmp	r1, #0
   13bf8:	cmpne	r2, #0
   13bfc:	bne	13c04 <__assert_fail@plt+0x2880>
   13c00:	bl	11354 <abort@plt>
   13c04:	str	r1, [r3, #40]	; 0x28
   13c08:	str	r2, [r3, #44]	; 0x2c
   13c0c:	pop	{fp, pc}
   13c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c14:	add	fp, sp, #28
   13c18:	sub	sp, sp, #20
   13c1c:	mov	r8, r3
   13c20:	mov	r9, r2
   13c24:	mov	sl, r1
   13c28:	mov	r7, r0
   13c2c:	ldr	r0, [fp, #8]
   13c30:	movw	r5, #37392	; 0x9210
   13c34:	movt	r5, #2
   13c38:	cmp	r0, #0
   13c3c:	movne	r5, r0
   13c40:	bl	1127c <__errno_location@plt>
   13c44:	mov	r4, r0
   13c48:	ldm	r5, {r0, r1}
   13c4c:	ldr	r2, [r5, #40]	; 0x28
   13c50:	ldr	r3, [r5, #44]	; 0x2c
   13c54:	ldr	r6, [r4]
   13c58:	add	r5, r5, #8
   13c5c:	stm	sp, {r0, r1, r5}
   13c60:	str	r2, [sp, #12]
   13c64:	str	r3, [sp, #16]
   13c68:	mov	r0, r7
   13c6c:	mov	r1, sl
   13c70:	mov	r2, r9
   13c74:	mov	r3, r8
   13c78:	bl	13c88 <__assert_fail@plt+0x2904>
   13c7c:	str	r6, [r4]
   13c80:	sub	sp, fp, #28
   13c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c8c:	add	fp, sp, #28
   13c90:	sub	sp, sp, #156	; 0x9c
   13c94:	mov	r9, r3
   13c98:	mov	r7, r1
   13c9c:	mov	r6, r0
   13ca0:	str	r2, [fp, #-80]	; 0xffffffb0
   13ca4:	add	r0, r2, #1
   13ca8:	str	r0, [sp, #76]	; 0x4c
   13cac:	ldr	r0, [fp, #12]
   13cb0:	and	r1, r0, #1
   13cb4:	str	r1, [sp, #40]	; 0x28
   13cb8:	and	r1, r0, #4
   13cbc:	str	r1, [sp, #36]	; 0x24
   13cc0:	ubfx	r4, r0, #1, #1
   13cc4:	bl	111a4 <__ctype_get_mb_cur_max@plt>
   13cc8:	str	r0, [sp, #44]	; 0x2c
   13ccc:	ldr	r0, [fp, #24]
   13cd0:	str	r0, [sp, #88]	; 0x58
   13cd4:	ldr	r0, [fp, #20]
   13cd8:	str	r0, [sp, #80]	; 0x50
   13cdc:	ldr	r1, [fp, #8]
   13ce0:	mov	r0, #0
   13ce4:	str	r0, [sp, #84]	; 0x54
   13ce8:	mov	r0, #0
   13cec:	str	r0, [fp, #-84]	; 0xffffffac
   13cf0:	mov	r0, #0
   13cf4:	str	r0, [fp, #-72]	; 0xffffffb8
   13cf8:	mov	r0, #0
   13cfc:	mov	r2, #0
   13d00:	str	r2, [fp, #-56]	; 0xffffffc8
   13d04:	mov	r2, #0
   13d08:	str	r2, [sp, #64]	; 0x40
   13d0c:	mov	r2, #1
   13d10:	str	r2, [fp, #-48]	; 0xffffffd0
   13d14:	cmp	r1, #10
   13d18:	bhi	14c44 <__assert_fail@plt+0x38c0>
   13d1c:	mov	sl, r7
   13d20:	mov	r7, r1
   13d24:	add	r1, pc, #24
   13d28:	mov	r8, #0
   13d2c:	mov	r2, #1
   13d30:	mov	r3, #0
   13d34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13d38:	mov	lr, r9
   13d3c:	mov	r5, r6
   13d40:	ldr	pc, [r1, r7, lsl #2]
   13d44:	andeq	r3, r1, r8, lsl lr
   13d48:	andeq	r3, r1, r8, asr lr
   13d4c:	andeq	r3, r1, r8, lsr #28
   13d50:	andeq	r3, r1, r0, lsl lr
   13d54:	andeq	r3, r1, ip, asr #28
   13d58:	andeq	r3, r1, ip, lsr #29
   13d5c:	andeq	r3, r1, r8, lsr lr
   13d60:	andeq	r3, r1, r8, lsl #30
   13d64:	andeq	r3, r1, r0, ror sp
   13d68:	andeq	r3, r1, r0, ror sp
   13d6c:	muleq	r1, ip, sp
   13d70:	movw	r0, #33908	; 0x8474
   13d74:	movt	r0, #1
   13d78:	mov	r1, r7
   13d7c:	bl	1524c <__assert_fail@plt+0x3ec8>
   13d80:	str	r0, [sp, #80]	; 0x50
   13d84:	movw	r0, #33910	; 0x8476
   13d88:	movt	r0, #1
   13d8c:	mov	r1, r7
   13d90:	bl	1524c <__assert_fail@plt+0x3ec8>
   13d94:	mov	r5, r6
   13d98:	str	r0, [sp, #88]	; 0x58
   13d9c:	mov	r8, #0
   13da0:	tst	r4, #1
   13da4:	str	r7, [fp, #-64]	; 0xffffffc0
   13da8:	bne	13de0 <__assert_fail@plt+0x2a5c>
   13dac:	ldr	r0, [sp, #80]	; 0x50
   13db0:	ldrb	r0, [r0]
   13db4:	cmp	r0, #0
   13db8:	beq	13de0 <__assert_fail@plt+0x2a5c>
   13dbc:	ldr	r1, [sp, #80]	; 0x50
   13dc0:	add	r1, r1, #1
   13dc4:	mov	r8, #0
   13dc8:	cmp	r8, sl
   13dcc:	strbcc	r0, [r5, r8]
   13dd0:	ldrb	r0, [r1, r8]
   13dd4:	add	r8, r8, #1
   13dd8:	cmp	r0, #0
   13ddc:	bne	13dc8 <__assert_fail@plt+0x2a44>
   13de0:	ldr	r7, [sp, #88]	; 0x58
   13de4:	mov	r0, r7
   13de8:	bl	11264 <strlen@plt>
   13dec:	mov	r5, r6
   13df0:	str	r0, [fp, #-72]	; 0xffffffb8
   13df4:	str	r7, [fp, #-84]	; 0xffffffac
   13df8:	mov	r2, #1
   13dfc:	mov	r3, r4
   13e00:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e04:	mov	lr, r9
   13e08:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13e0c:	b	13f08 <__assert_fail@plt+0x2b84>
   13e10:	mov	r0, #1
   13e14:	b	13e58 <__assert_fail@plt+0x2ad4>
   13e18:	mov	r7, #0
   13e1c:	mov	r8, #0
   13e20:	mov	r2, r0
   13e24:	b	13f04 <__assert_fail@plt+0x2b80>
   13e28:	tst	r4, #1
   13e2c:	bne	13e58 <__assert_fail@plt+0x2ad4>
   13e30:	mov	r2, r0
   13e34:	b	13e80 <__assert_fail@plt+0x2afc>
   13e38:	mov	r0, #1
   13e3c:	str	r0, [fp, #-72]	; 0xffffffb8
   13e40:	mov	r8, #0
   13e44:	mov	r7, #5
   13e48:	b	13ec4 <__assert_fail@plt+0x2b40>
   13e4c:	mov	r2, #1
   13e50:	tst	r4, #1
   13e54:	beq	13e80 <__assert_fail@plt+0x2afc>
   13e58:	mov	r1, #1
   13e5c:	str	r1, [fp, #-72]	; 0xffffffb8
   13e60:	mov	r8, #0
   13e64:	mov	r7, #2
   13e68:	movw	r1, #33910	; 0x8476
   13e6c:	movt	r1, #1
   13e70:	str	r1, [fp, #-84]	; 0xffffffac
   13e74:	mov	r2, r0
   13e78:	mov	r3, #1
   13e7c:	b	13f08 <__assert_fail@plt+0x2b84>
   13e80:	mov	r8, #1
   13e84:	mov	r7, #2
   13e88:	cmp	sl, #0
   13e8c:	movne	r0, #39	; 0x27
   13e90:	strbne	r0, [r5]
   13e94:	movw	r0, #33910	; 0x8476
   13e98:	movt	r0, #1
   13e9c:	str	r0, [fp, #-84]	; 0xffffffac
   13ea0:	mov	r0, #1
   13ea4:	str	r0, [fp, #-72]	; 0xffffffb8
   13ea8:	b	13f04 <__assert_fail@plt+0x2b80>
   13eac:	mov	r7, #5
   13eb0:	tst	r4, #1
   13eb4:	beq	13edc <__assert_fail@plt+0x2b58>
   13eb8:	mov	r0, #1
   13ebc:	str	r0, [fp, #-72]	; 0xffffffb8
   13ec0:	mov	r8, #0
   13ec4:	movw	r0, #33906	; 0x8472
   13ec8:	movt	r0, #1
   13ecc:	str	r0, [fp, #-84]	; 0xffffffac
   13ed0:	mov	r2, #1
   13ed4:	mov	r3, #1
   13ed8:	b	13f08 <__assert_fail@plt+0x2b84>
   13edc:	cmp	sl, #0
   13ee0:	movne	r0, #34	; 0x22
   13ee4:	strbne	r0, [r5]
   13ee8:	mov	r8, #1
   13eec:	movw	r0, #33906	; 0x8472
   13ef0:	movt	r0, #1
   13ef4:	str	r0, [fp, #-84]	; 0xffffffac
   13ef8:	mov	r0, #1
   13efc:	str	r0, [fp, #-72]	; 0xffffffb8
   13f00:	mov	r2, #1
   13f04:	mov	r3, #0
   13f08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f0c:	cmp	r0, #0
   13f10:	movwne	r0, #1
   13f14:	and	r1, r0, r3
   13f18:	and	r1, r2, r1
   13f1c:	str	r1, [sp, #56]	; 0x38
   13f20:	sub	r1, r7, #2
   13f24:	clz	r1, r1
   13f28:	lsr	r1, r1, #5
   13f2c:	and	r1, r1, r3
   13f30:	str	r1, [sp, #68]	; 0x44
   13f34:	str	r7, [fp, #-64]	; 0xffffffc0
   13f38:	subs	r1, r7, #2
   13f3c:	movwne	r1, #1
   13f40:	eor	r4, r3, #1
   13f44:	str	r4, [fp, #-88]	; 0xffffffa8
   13f48:	orr	r4, r1, r4
   13f4c:	str	r4, [sp, #72]	; 0x48
   13f50:	and	r1, r1, r2
   13f54:	and	r0, r0, r1
   13f58:	str	r0, [fp, #-60]	; 0xffffffc4
   13f5c:	str	r3, [fp, #-76]	; 0xffffffb4
   13f60:	orr	r0, r1, r3
   13f64:	eor	r0, r0, #1
   13f68:	ldr	r1, [fp, #16]
   13f6c:	clz	r1, r1
   13f70:	lsr	r1, r1, #5
   13f74:	orr	r0, r1, r0
   13f78:	str	r0, [fp, #-68]	; 0xffffffbc
   13f7c:	str	r2, [sp, #92]	; 0x5c
   13f80:	eor	r0, r2, #1
   13f84:	str	r0, [sp, #60]	; 0x3c
   13f88:	mov	r7, #0
   13f8c:	cmn	lr, #1
   13f90:	beq	13fa0 <__assert_fail@plt+0x2c1c>
   13f94:	cmp	r7, lr
   13f98:	bne	13fac <__assert_fail@plt+0x2c28>
   13f9c:	b	14ab8 <__assert_fail@plt+0x3734>
   13fa0:	ldrb	r0, [ip, r7]
   13fa4:	cmp	r0, #0
   13fa8:	beq	14ab8 <__assert_fail@plt+0x3734>
   13fac:	mov	r9, #0
   13fb0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13fb4:	cmp	r0, #0
   13fb8:	beq	13fec <__assert_fail@plt+0x2c68>
   13fbc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13fc0:	add	r4, r7, r0
   13fc4:	cmp	r0, #2
   13fc8:	bcc	13fe4 <__assert_fail@plt+0x2c60>
   13fcc:	cmn	lr, #1
   13fd0:	bne	13fe4 <__assert_fail@plt+0x2c60>
   13fd4:	mov	r0, ip
   13fd8:	bl	11264 <strlen@plt>
   13fdc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13fe0:	mov	lr, r0
   13fe4:	cmp	r4, lr
   13fe8:	bls	13ff8 <__assert_fail@plt+0x2c74>
   13fec:	mov	r0, #0
   13ff0:	str	r0, [fp, #-52]	; 0xffffffcc
   13ff4:	b	1403c <__assert_fail@plt+0x2cb8>
   13ff8:	mov	r4, lr
   13ffc:	add	r0, ip, r7
   14000:	ldr	r1, [fp, #-84]	; 0xffffffac
   14004:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14008:	bl	1124c <bcmp@plt>
   1400c:	cmp	r0, #0
   14010:	mov	r1, r0
   14014:	movwne	r1, #1
   14018:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1401c:	orr	r1, r1, r2
   14020:	tst	r1, #1
   14024:	beq	14b8c <__assert_fail@plt+0x3808>
   14028:	clz	r0, r0
   1402c:	lsr	r0, r0, #5
   14030:	str	r0, [fp, #-52]	; 0xffffffcc
   14034:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14038:	mov	lr, r4
   1403c:	ldrb	r4, [ip, r7]
   14040:	cmp	r4, #126	; 0x7e
   14044:	bhi	14574 <__assert_fail@plt+0x31f0>
   14048:	mov	r6, #1
   1404c:	mov	r2, #110	; 0x6e
   14050:	mov	r0, #97	; 0x61
   14054:	add	r3, pc, #4
   14058:	mov	r1, #0
   1405c:	ldr	pc, [r3, r4, lsl #2]
   14060:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14064:	andeq	r4, r1, r4, ror r5
   14068:	andeq	r4, r1, r4, ror r5
   1406c:	andeq	r4, r1, r4, ror r5
   14070:	andeq	r4, r1, r4, ror r5
   14074:	andeq	r4, r1, r4, ror r5
   14078:	andeq	r4, r1, r4, ror r5
   1407c:	andeq	r4, r1, r8, asr #12
   14080:			; <UNDEFINED> instruction: 0x000143b4
   14084:	andeq	r4, r1, ip, lsr #7
   14088:	andeq	r4, r1, r0, asr #7
   1408c:	ldrdeq	r4, [r1], -ip
   14090:	andeq	r4, r1, r4, lsr #7
   14094:			; <UNDEFINED> instruction: 0x000143bc
   14098:	andeq	r4, r1, r4, ror r5
   1409c:	andeq	r4, r1, r4, ror r5
   140a0:	andeq	r4, r1, r4, ror r5
   140a4:	andeq	r4, r1, r4, ror r5
   140a8:	andeq	r4, r1, r4, ror r5
   140ac:	andeq	r4, r1, r4, ror r5
   140b0:	andeq	r4, r1, r4, ror r5
   140b4:	andeq	r4, r1, r4, ror r5
   140b8:	andeq	r4, r1, r4, ror r5
   140bc:	andeq	r4, r1, r4, ror r5
   140c0:	andeq	r4, r1, r4, ror r5
   140c4:	andeq	r4, r1, r4, ror r5
   140c8:	andeq	r4, r1, r4, ror r5
   140cc:	andeq	r4, r1, r4, ror r5
   140d0:	andeq	r4, r1, r4, ror r5
   140d4:	andeq	r4, r1, r4, ror r5
   140d8:	andeq	r4, r1, r4, ror r5
   140dc:	andeq	r4, r1, r4, ror r5
   140e0:	andeq	r4, r1, r8, asr r3
   140e4:	andeq	r4, r1, ip, asr r3
   140e8:	andeq	r4, r1, ip, asr r3
   140ec:	andeq	r4, r1, r4, asr #6
   140f0:	andeq	r4, r1, ip, asr r3
   140f4:	andeq	r4, r1, ip, asr r2
   140f8:	andeq	r4, r1, ip, asr r3
   140fc:	andeq	r4, r1, r4, ror #9
   14100:	andeq	r4, r1, ip, asr r3
   14104:	andeq	r4, r1, ip, asr r3
   14108:	andeq	r4, r1, ip, asr r3
   1410c:	andeq	r4, r1, ip, asr r2
   14110:	andeq	r4, r1, ip, asr r2
   14114:	andeq	r4, r1, ip, asr r2
   14118:	andeq	r4, r1, ip, asr r2
   1411c:	andeq	r4, r1, ip, asr r2
   14120:	andeq	r4, r1, ip, asr r2
   14124:	andeq	r4, r1, ip, asr r2
   14128:	andeq	r4, r1, ip, asr r2
   1412c:	andeq	r4, r1, ip, asr r2
   14130:	andeq	r4, r1, ip, asr r2
   14134:	andeq	r4, r1, ip, asr r2
   14138:	andeq	r4, r1, ip, asr r2
   1413c:	andeq	r4, r1, ip, asr r2
   14140:	andeq	r4, r1, ip, asr r2
   14144:	andeq	r4, r1, ip, asr r2
   14148:	andeq	r4, r1, ip, asr r2
   1414c:	andeq	r4, r1, ip, asr r3
   14150:	andeq	r4, r1, ip, asr r3
   14154:	andeq	r4, r1, ip, asr r3
   14158:	andeq	r4, r1, ip, asr r3
   1415c:	andeq	r4, r1, ip, lsr #9
   14160:	andeq	r4, r1, r4, ror r5
   14164:	andeq	r4, r1, ip, asr r2
   14168:	andeq	r4, r1, ip, asr r2
   1416c:	andeq	r4, r1, ip, asr r2
   14170:	andeq	r4, r1, ip, asr r2
   14174:	andeq	r4, r1, ip, asr r2
   14178:	andeq	r4, r1, ip, asr r2
   1417c:	andeq	r4, r1, ip, asr r2
   14180:	andeq	r4, r1, ip, asr r2
   14184:	andeq	r4, r1, ip, asr r2
   14188:	andeq	r4, r1, ip, asr r2
   1418c:	andeq	r4, r1, ip, asr r2
   14190:	andeq	r4, r1, ip, asr r2
   14194:	andeq	r4, r1, ip, asr r2
   14198:	andeq	r4, r1, ip, asr r2
   1419c:	andeq	r4, r1, ip, asr r2
   141a0:	andeq	r4, r1, ip, asr r2
   141a4:	andeq	r4, r1, ip, asr r2
   141a8:	andeq	r4, r1, ip, asr r2
   141ac:	andeq	r4, r1, ip, asr r2
   141b0:	andeq	r4, r1, ip, asr r2
   141b4:	andeq	r4, r1, ip, asr r2
   141b8:	andeq	r4, r1, ip, asr r2
   141bc:	andeq	r4, r1, ip, asr r2
   141c0:	andeq	r4, r1, ip, asr r2
   141c4:	andeq	r4, r1, ip, asr r2
   141c8:	andeq	r4, r1, ip, asr r2
   141cc:	andeq	r4, r1, ip, asr r3
   141d0:	andeq	r4, r1, r4, lsl #7
   141d4:	andeq	r4, r1, ip, asr r2
   141d8:	andeq	r4, r1, ip, asr r3
   141dc:	andeq	r4, r1, ip, asr r2
   141e0:	andeq	r4, r1, ip, asr r3
   141e4:	andeq	r4, r1, ip, asr r2
   141e8:	andeq	r4, r1, ip, asr r2
   141ec:	andeq	r4, r1, ip, asr r2
   141f0:	andeq	r4, r1, ip, asr r2
   141f4:	andeq	r4, r1, ip, asr r2
   141f8:	andeq	r4, r1, ip, asr r2
   141fc:	andeq	r4, r1, ip, asr r2
   14200:	andeq	r4, r1, ip, asr r2
   14204:	andeq	r4, r1, ip, asr r2
   14208:	andeq	r4, r1, ip, asr r2
   1420c:	andeq	r4, r1, ip, asr r2
   14210:	andeq	r4, r1, ip, asr r2
   14214:	andeq	r4, r1, ip, asr r2
   14218:	andeq	r4, r1, ip, asr r2
   1421c:	andeq	r4, r1, ip, asr r2
   14220:	andeq	r4, r1, ip, asr r2
   14224:	andeq	r4, r1, ip, asr r2
   14228:	andeq	r4, r1, ip, asr r2
   1422c:	andeq	r4, r1, ip, asr r2
   14230:	andeq	r4, r1, ip, asr r2
   14234:	andeq	r4, r1, ip, asr r2
   14238:	andeq	r4, r1, ip, asr r2
   1423c:	andeq	r4, r1, ip, asr r2
   14240:	andeq	r4, r1, ip, asr r2
   14244:	andeq	r4, r1, ip, asr r2
   14248:	andeq	r4, r1, ip, asr r2
   1424c:	andeq	r4, r1, r8, lsl r3
   14250:	andeq	r4, r1, ip, asr r3
   14254:	andeq	r4, r1, r8, lsl r3
   14258:	andeq	r4, r1, r4, asr #6
   1425c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14260:	tst	r0, #1
   14264:	bne	14290 <__assert_fail@plt+0x2f0c>
   14268:	ubfx	r0, r4, #5, #3
   1426c:	ldr	r1, [fp, #16]
   14270:	ldr	r0, [r1, r0, lsl #2]
   14274:	and	r1, r4, #31
   14278:	mov	r2, #1
   1427c:	tst	r0, r2, lsl r1
   14280:	beq	14290 <__assert_fail@plt+0x2f0c>
   14284:	mov	r0, r4
   14288:	mov	r1, r6
   1428c:	b	142a4 <__assert_fail@plt+0x2f20>
   14290:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14294:	cmp	r0, #0
   14298:	mov	r0, r4
   1429c:	mov	r1, r6
   142a0:	beq	145dc <__assert_fail@plt+0x3258>
   142a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   142a8:	tst	r2, #1
   142ac:	bne	14ba0 <__assert_fail@plt+0x381c>
   142b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   142b4:	subs	r2, r2, #2
   142b8:	movwne	r2, #1
   142bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   142c0:	orr	r2, r2, r3
   142c4:	tst	r2, #1
   142c8:	bne	14304 <__assert_fail@plt+0x2f80>
   142cc:	cmp	r8, sl
   142d0:	movcc	r2, #39	; 0x27
   142d4:	strbcc	r2, [r5, r8]
   142d8:	add	r2, r8, #1
   142dc:	cmp	r2, sl
   142e0:	movcc	r3, #36	; 0x24
   142e4:	strbcc	r3, [r5, r2]
   142e8:	add	r2, r8, #2
   142ec:	cmp	r2, sl
   142f0:	movcc	r3, #39	; 0x27
   142f4:	strbcc	r3, [r5, r2]
   142f8:	add	r8, r8, #3
   142fc:	mov	r2, #1
   14300:	str	r2, [fp, #-56]	; 0xffffffc8
   14304:	cmp	r8, sl
   14308:	movcc	r2, #92	; 0x5c
   1430c:	strbcc	r2, [r5, r8]
   14310:	add	r8, r8, #1
   14314:	b	14620 <__assert_fail@plt+0x329c>
   14318:	cmp	lr, #1
   1431c:	beq	14344 <__assert_fail@plt+0x2fc0>
   14320:	mov	r6, #0
   14324:	cmn	lr, #1
   14328:	bne	14350 <__assert_fail@plt+0x2fcc>
   1432c:	ldrb	r0, [ip, #1]
   14330:	cmp	r0, #0
   14334:	beq	14344 <__assert_fail@plt+0x2fc0>
   14338:	mvn	lr, #0
   1433c:	mov	r9, #0
   14340:	b	1425c <__assert_fail@plt+0x2ed8>
   14344:	mov	r6, #0
   14348:	cmp	r7, #0
   1434c:	beq	14358 <__assert_fail@plt+0x2fd4>
   14350:	mov	r9, #0
   14354:	b	1425c <__assert_fail@plt+0x2ed8>
   14358:	mov	r1, #1
   1435c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14360:	cmp	r0, #2
   14364:	bne	1437c <__assert_fail@plt+0x2ff8>
   14368:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1436c:	tst	r0, #1
   14370:	mov	r6, r1
   14374:	beq	1425c <__assert_fail@plt+0x2ed8>
   14378:	b	14ba0 <__assert_fail@plt+0x381c>
   1437c:	mov	r6, r1
   14380:	b	1425c <__assert_fail@plt+0x2ed8>
   14384:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14388:	cmp	r0, #2
   1438c:	bne	145c0 <__assert_fail@plt+0x323c>
   14390:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14394:	tst	r0, #1
   14398:	bne	14ba0 <__assert_fail@plt+0x381c>
   1439c:	mov	r9, #0
   143a0:	b	145d4 <__assert_fail@plt+0x3250>
   143a4:	mov	r0, #102	; 0x66
   143a8:	b	14648 <__assert_fail@plt+0x32c4>
   143ac:	mov	r2, #116	; 0x74
   143b0:	b	143c0 <__assert_fail@plt+0x303c>
   143b4:	mov	r0, #98	; 0x62
   143b8:	b	14648 <__assert_fail@plt+0x32c4>
   143bc:	mov	r2, #114	; 0x72
   143c0:	ldr	r0, [sp, #72]	; 0x48
   143c4:	tst	r0, #1
   143c8:	mov	r0, r2
   143cc:	bne	14648 <__assert_fail@plt+0x32c4>
   143d0:	b	14ba0 <__assert_fail@plt+0x381c>
   143d4:	ldr	r0, [sp, #92]	; 0x5c
   143d8:	tst	r0, #1
   143dc:	beq	14664 <__assert_fail@plt+0x32e0>
   143e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   143e4:	tst	r0, #1
   143e8:	bne	14ba0 <__assert_fail@plt+0x381c>
   143ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   143f0:	subs	r0, r0, #2
   143f4:	movwne	r0, #1
   143f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   143fc:	orr	r0, r0, r1
   14400:	tst	r0, #1
   14404:	bne	14440 <__assert_fail@plt+0x30bc>
   14408:	cmp	r8, sl
   1440c:	movcc	r0, #39	; 0x27
   14410:	strbcc	r0, [r5, r8]
   14414:	add	r0, r8, #1
   14418:	cmp	r0, sl
   1441c:	movcc	r1, #36	; 0x24
   14420:	strbcc	r1, [r5, r0]
   14424:	add	r0, r8, #2
   14428:	cmp	r0, sl
   1442c:	movcc	r1, #39	; 0x27
   14430:	strbcc	r1, [r5, r0]
   14434:	add	r8, r8, #3
   14438:	mov	r0, #1
   1443c:	str	r0, [fp, #-56]	; 0xffffffc8
   14440:	cmp	r8, sl
   14444:	movcc	r0, #92	; 0x5c
   14448:	strbcc	r0, [r5, r8]
   1444c:	add	r0, r8, #1
   14450:	mov	r6, #0
   14454:	mov	r9, #1
   14458:	mov	r4, #48	; 0x30
   1445c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14460:	cmp	r1, #2
   14464:	beq	14828 <__assert_fail@plt+0x34a4>
   14468:	add	r1, r7, #1
   1446c:	cmp	r1, lr
   14470:	bcs	14828 <__assert_fail@plt+0x34a4>
   14474:	ldrb	r1, [ip, r1]
   14478:	sub	r1, r1, #48	; 0x30
   1447c:	uxtb	r1, r1
   14480:	cmp	r1, #9
   14484:	bhi	14828 <__assert_fail@plt+0x34a4>
   14488:	cmp	r0, sl
   1448c:	movcc	r1, #48	; 0x30
   14490:	strbcc	r1, [r5, r0]
   14494:	add	r0, r8, #2
   14498:	cmp	r0, sl
   1449c:	movcc	r1, #48	; 0x30
   144a0:	strbcc	r1, [r5, r0]
   144a4:	add	r8, r8, #3
   144a8:	b	1425c <__assert_fail@plt+0x2ed8>
   144ac:	mov	r9, #0
   144b0:	mov	r4, #63	; 0x3f
   144b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   144b8:	cmp	r0, #5
   144bc:	beq	14830 <__assert_fail@plt+0x34ac>
   144c0:	cmp	r0, #2
   144c4:	bne	148d8 <__assert_fail@plt+0x3554>
   144c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   144cc:	tst	r0, #1
   144d0:	mov	r6, #0
   144d4:	beq	1425c <__assert_fail@plt+0x2ed8>
   144d8:	b	14ba0 <__assert_fail@plt+0x381c>
   144dc:	mov	r0, #118	; 0x76
   144e0:	b	14648 <__assert_fail@plt+0x32c4>
   144e4:	mov	r4, #39	; 0x27
   144e8:	mov	r0, #1
   144ec:	str	r0, [sp, #64]	; 0x40
   144f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   144f4:	cmp	r0, #2
   144f8:	bne	14680 <__assert_fail@plt+0x32fc>
   144fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14500:	tst	r0, #1
   14504:	bne	14ba0 <__assert_fail@plt+0x381c>
   14508:	ldr	r2, [sp, #84]	; 0x54
   1450c:	cmp	r2, #0
   14510:	mov	r0, r2
   14514:	movwne	r0, #1
   14518:	clz	r1, sl
   1451c:	lsr	r1, r1, #5
   14520:	orrs	r0, r0, r1
   14524:	moveq	r2, sl
   14528:	str	r2, [sp, #84]	; 0x54
   1452c:	moveq	sl, r0
   14530:	cmp	r8, sl
   14534:	movcc	r0, #39	; 0x27
   14538:	strbcc	r0, [r5, r8]
   1453c:	add	r0, r8, #1
   14540:	cmp	r0, sl
   14544:	movcc	r1, #92	; 0x5c
   14548:	strbcc	r1, [r5, r0]
   1454c:	add	r0, r8, #2
   14550:	cmp	r0, sl
   14554:	movcc	r1, #39	; 0x27
   14558:	strbcc	r1, [r5, r0]
   1455c:	add	r8, r8, #3
   14560:	mov	r0, #0
   14564:	str	r0, [fp, #-56]	; 0xffffffc8
   14568:	mov	r9, #0
   1456c:	mov	r6, #1
   14570:	b	1425c <__assert_fail@plt+0x2ed8>
   14574:	ldr	r0, [sp, #44]	; 0x2c
   14578:	cmp	r0, #1
   1457c:	bne	14688 <__assert_fail@plt+0x3304>
   14580:	str	lr, [sp, #32]
   14584:	bl	11234 <__ctype_b_loc@plt>
   14588:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1458c:	ldr	r0, [r0]
   14590:	add	r0, r0, r4, lsl #1
   14594:	ldrb	r0, [r0, #1]
   14598:	ubfx	r6, r0, #6, #1
   1459c:	mov	r2, #1
   145a0:	ldr	r0, [sp, #60]	; 0x3c
   145a4:	orr	r1, r6, r0
   145a8:	cmp	r2, #1
   145ac:	bhi	148e0 <__assert_fail@plt+0x355c>
   145b0:	tst	r1, #1
   145b4:	beq	148e0 <__assert_fail@plt+0x355c>
   145b8:	ldr	lr, [sp, #32]
   145bc:	b	1425c <__assert_fail@plt+0x2ed8>
   145c0:	mov	r9, #0
   145c4:	mov	r0, #92	; 0x5c
   145c8:	ldr	r1, [sp, #56]	; 0x38
   145cc:	cmp	r1, #0
   145d0:	beq	14648 <__assert_fail@plt+0x32c4>
   145d4:	mov	r4, #92	; 0x5c
   145d8:	mov	r6, #0
   145dc:	cmp	r9, #0
   145e0:	bne	14618 <__assert_fail@plt+0x3294>
   145e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   145e8:	tst	r0, #1
   145ec:	beq	14618 <__assert_fail@plt+0x3294>
   145f0:	cmp	r8, sl
   145f4:	movcc	r0, #39	; 0x27
   145f8:	strbcc	r0, [r5, r8]
   145fc:	add	r0, r8, #1
   14600:	cmp	r0, sl
   14604:	movcc	r1, #39	; 0x27
   14608:	strbcc	r1, [r5, r0]
   1460c:	add	r8, r8, #2
   14610:	mov	r0, #0
   14614:	str	r0, [fp, #-56]	; 0xffffffc8
   14618:	mov	r1, r6
   1461c:	mov	r0, r4
   14620:	cmp	r8, sl
   14624:	strbcc	r0, [r5, r8]
   14628:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1462c:	and	r0, r0, r1
   14630:	str	r0, [fp, #-48]	; 0xffffffd0
   14634:	add	r8, r8, #1
   14638:	add	r7, r7, #1
   1463c:	cmn	lr, #1
   14640:	bne	13f94 <__assert_fail@plt+0x2c10>
   14644:	b	13fa0 <__assert_fail@plt+0x2c1c>
   14648:	mov	r9, #0
   1464c:	ldr	r1, [sp, #92]	; 0x5c
   14650:	tst	r1, #1
   14654:	mov	r6, #0
   14658:	mov	r1, #0
   1465c:	beq	1425c <__assert_fail@plt+0x2ed8>
   14660:	b	142a4 <__assert_fail@plt+0x2f20>
   14664:	mov	r4, #0
   14668:	ldr	r0, [sp, #40]	; 0x28
   1466c:	cmp	r0, #0
   14670:	mov	r9, #0
   14674:	mov	r6, #0
   14678:	beq	1425c <__assert_fail@plt+0x2ed8>
   1467c:	b	14638 <__assert_fail@plt+0x32b4>
   14680:	mov	r6, #1
   14684:	b	1425c <__assert_fail@plt+0x2ed8>
   14688:	mov	r0, #0
   1468c:	str	r0, [fp, #-36]	; 0xffffffdc
   14690:	str	r0, [fp, #-40]	; 0xffffffd8
   14694:	cmn	lr, #1
   14698:	bne	146ac <__assert_fail@plt+0x3328>
   1469c:	mov	r0, ip
   146a0:	bl	11264 <strlen@plt>
   146a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   146a8:	mov	lr, r0
   146ac:	ldr	r0, [sp, #76]	; 0x4c
   146b0:	add	r0, r0, r7
   146b4:	str	r0, [sp, #24]
   146b8:	mov	r6, #1
   146bc:	mov	r2, #0
   146c0:	sub	r0, fp, #40	; 0x28
   146c4:	mov	r3, r0
   146c8:	str	r5, [sp, #28]
   146cc:	str	lr, [sp, #32]
   146d0:	b	14714 <__assert_fail@plt+0x3390>
   146d4:	ldr	r5, [sp, #52]	; 0x34
   146d8:	add	r5, r0, r5
   146dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   146e0:	bl	11180 <iswprint@plt>
   146e4:	cmp	r0, #0
   146e8:	movwne	r0, #1
   146ec:	and	r6, r6, r0
   146f0:	sub	r0, fp, #40	; 0x28
   146f4:	bl	1112c <mbsinit@plt>
   146f8:	sub	r3, fp, #40	; 0x28
   146fc:	mov	r2, r5
   14700:	ldr	lr, [sp, #32]
   14704:	cmp	r0, #0
   14708:	ldr	r5, [sp, #28]
   1470c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14710:	bne	145a0 <__assert_fail@plt+0x321c>
   14714:	str	r2, [sp, #52]	; 0x34
   14718:	add	r0, r2, r7
   1471c:	add	r1, ip, r0
   14720:	str	r0, [sp, #48]	; 0x30
   14724:	sub	r2, lr, r0
   14728:	sub	r0, fp, #44	; 0x2c
   1472c:	bl	17248 <__assert_fail@plt+0x5ec4>
   14730:	cmp	r0, #0
   14734:	beq	14aac <__assert_fail@plt+0x3728>
   14738:	cmn	r0, #1
   1473c:	beq	14a68 <__assert_fail@plt+0x36e4>
   14740:	cmn	r0, #2
   14744:	ldr	lr, [sp, #32]
   14748:	beq	14a70 <__assert_fail@plt+0x36ec>
   1474c:	cmp	r0, #2
   14750:	mov	r1, #0
   14754:	movwcc	r1, #1
   14758:	ldr	r2, [sp, #68]	; 0x44
   1475c:	eor	r2, r2, #1
   14760:	orrs	r1, r2, r1
   14764:	bne	146d4 <__assert_fail@plt+0x3350>
   14768:	ldr	r1, [sp, #52]	; 0x34
   1476c:	ldr	r2, [sp, #24]
   14770:	add	r1, r2, r1
   14774:	sub	r2, r0, #1
   14778:	b	14788 <__assert_fail@plt+0x3404>
   1477c:	add	r1, r1, #1
   14780:	subs	r2, r2, #1
   14784:	beq	146d4 <__assert_fail@plt+0x3350>
   14788:	ldrb	r3, [r1]
   1478c:	sub	r3, r3, #91	; 0x5b
   14790:	cmp	r3, #33	; 0x21
   14794:	bhi	1477c <__assert_fail@plt+0x33f8>
   14798:	add	r5, pc, #0
   1479c:	ldr	pc, [r5, r3, lsl #2]
   147a0:	muleq	r1, r8, fp
   147a4:	muleq	r1, r8, fp
   147a8:	andeq	r4, r1, ip, ror r7
   147ac:	muleq	r1, r8, fp
   147b0:	andeq	r4, r1, ip, ror r7
   147b4:	muleq	r1, r8, fp
   147b8:	andeq	r4, r1, ip, ror r7
   147bc:	andeq	r4, r1, ip, ror r7
   147c0:	andeq	r4, r1, ip, ror r7
   147c4:	andeq	r4, r1, ip, ror r7
   147c8:	andeq	r4, r1, ip, ror r7
   147cc:	andeq	r4, r1, ip, ror r7
   147d0:	andeq	r4, r1, ip, ror r7
   147d4:	andeq	r4, r1, ip, ror r7
   147d8:	andeq	r4, r1, ip, ror r7
   147dc:	andeq	r4, r1, ip, ror r7
   147e0:	andeq	r4, r1, ip, ror r7
   147e4:	andeq	r4, r1, ip, ror r7
   147e8:	andeq	r4, r1, ip, ror r7
   147ec:	andeq	r4, r1, ip, ror r7
   147f0:	andeq	r4, r1, ip, ror r7
   147f4:	andeq	r4, r1, ip, ror r7
   147f8:	andeq	r4, r1, ip, ror r7
   147fc:	andeq	r4, r1, ip, ror r7
   14800:	andeq	r4, r1, ip, ror r7
   14804:	andeq	r4, r1, ip, ror r7
   14808:	andeq	r4, r1, ip, ror r7
   1480c:	andeq	r4, r1, ip, ror r7
   14810:	andeq	r4, r1, ip, ror r7
   14814:	andeq	r4, r1, ip, ror r7
   14818:	andeq	r4, r1, ip, ror r7
   1481c:	andeq	r4, r1, ip, ror r7
   14820:	andeq	r4, r1, ip, ror r7
   14824:	muleq	r1, r8, fp
   14828:	mov	r8, r0
   1482c:	b	1425c <__assert_fail@plt+0x2ed8>
   14830:	ldr	r0, [sp, #36]	; 0x24
   14834:	cmp	r0, #0
   14838:	beq	148d8 <__assert_fail@plt+0x3554>
   1483c:	add	r0, r7, #2
   14840:	cmp	r0, lr
   14844:	bcs	148d8 <__assert_fail@plt+0x3554>
   14848:	add	r1, r7, ip
   1484c:	ldrb	r1, [r1, #1]
   14850:	cmp	r1, #63	; 0x3f
   14854:	bne	148d8 <__assert_fail@plt+0x3554>
   14858:	ldrb	r1, [ip, r0]
   1485c:	sub	r2, r1, #33	; 0x21
   14860:	cmp	r2, #29
   14864:	bhi	148d8 <__assert_fail@plt+0x3554>
   14868:	mov	r3, #1
   1486c:	movw	r6, #20929	; 0x51c1
   14870:	movt	r6, #14336	; 0x3800
   14874:	tst	r6, r3, lsl r2
   14878:	beq	148d8 <__assert_fail@plt+0x3554>
   1487c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14880:	tst	r2, #1
   14884:	bne	14ba0 <__assert_fail@plt+0x381c>
   14888:	cmp	r8, sl
   1488c:	movcc	r2, #63	; 0x3f
   14890:	strbcc	r2, [r5, r8]
   14894:	add	r2, r8, #1
   14898:	cmp	r2, sl
   1489c:	movcc	r3, #34	; 0x22
   148a0:	strbcc	r3, [r5, r2]
   148a4:	add	r2, r8, #2
   148a8:	cmp	r2, sl
   148ac:	movcc	r3, #34	; 0x22
   148b0:	strbcc	r3, [r5, r2]
   148b4:	add	r2, r8, #3
   148b8:	cmp	r2, sl
   148bc:	movcc	r3, #63	; 0x3f
   148c0:	strbcc	r3, [r5, r2]
   148c4:	add	r8, r8, #4
   148c8:	mov	r7, r0
   148cc:	mov	r4, r1
   148d0:	mov	r6, #0
   148d4:	b	1425c <__assert_fail@plt+0x2ed8>
   148d8:	mov	r6, #0
   148dc:	b	1425c <__assert_fail@plt+0x2ed8>
   148e0:	add	r0, r2, r7
   148e4:	str	r0, [sp, #52]	; 0x34
   148e8:	mov	r2, #0
   148ec:	ldr	lr, [sp, #32]
   148f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   148f4:	str	r1, [sp, #48]	; 0x30
   148f8:	tst	r1, #1
   148fc:	bne	149d8 <__assert_fail@plt+0x3654>
   14900:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14904:	tst	r1, #1
   14908:	bne	14ba0 <__assert_fail@plt+0x381c>
   1490c:	mov	r3, r0
   14910:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14914:	subs	r1, r0, #2
   14918:	movwne	r1, #1
   1491c:	orr	r1, r1, r3
   14920:	tst	r1, #1
   14924:	bne	1495c <__assert_fail@plt+0x35d8>
   14928:	cmp	r8, sl
   1492c:	movcc	r0, #39	; 0x27
   14930:	strbcc	r0, [r5, r8]
   14934:	add	r2, r8, #1
   14938:	cmp	r2, sl
   1493c:	movcc	r0, #36	; 0x24
   14940:	strbcc	r0, [r5, r2]
   14944:	add	r2, r8, #2
   14948:	cmp	r2, sl
   1494c:	movcc	r0, #39	; 0x27
   14950:	strbcc	r0, [r5, r2]
   14954:	add	r8, r8, #3
   14958:	mov	r3, #1
   1495c:	cmp	r8, sl
   14960:	movcc	r1, #92	; 0x5c
   14964:	strbcc	r1, [r5, r8]
   14968:	add	r2, r8, #1
   1496c:	cmp	r2, sl
   14970:	bcs	14984 <__assert_fail@plt+0x3600>
   14974:	uxtb	r1, r4
   14978:	mov	r0, #48	; 0x30
   1497c:	orr	r1, r0, r1, lsr #6
   14980:	strb	r1, [r5, r2]
   14984:	add	r2, r8, #2
   14988:	cmp	r2, sl
   1498c:	lsrcc	r1, r4, #3
   14990:	movcc	r0, #6
   14994:	bficc	r1, r0, #3, #29
   14998:	strbcc	r1, [r5, r2]
   1499c:	mov	r0, #6
   149a0:	bfi	r4, r0, #3, #29
   149a4:	add	r8, r8, #3
   149a8:	mov	r2, #1
   149ac:	mov	r0, r3
   149b0:	b	149fc <__assert_fail@plt+0x3678>
   149b4:	cmp	r8, sl
   149b8:	strbcc	r4, [r5, r8]
   149bc:	ldr	r1, [sp, #76]	; 0x4c
   149c0:	ldrb	r4, [r1, r7]
   149c4:	add	r8, r8, #1
   149c8:	mov	r7, r3
   149cc:	ldr	r1, [sp, #48]	; 0x30
   149d0:	tst	r1, #1
   149d4:	beq	14900 <__assert_fail@plt+0x357c>
   149d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   149dc:	tst	r1, #1
   149e0:	beq	149f4 <__assert_fail@plt+0x3670>
   149e4:	cmp	r8, sl
   149e8:	movcc	r1, #92	; 0x5c
   149ec:	strbcc	r1, [r5, r8]
   149f0:	add	r8, r8, #1
   149f4:	mov	r1, #0
   149f8:	str	r1, [fp, #-52]	; 0xffffffcc
   149fc:	and	r9, r2, #1
   14a00:	add	r3, r7, #1
   14a04:	ldr	r1, [sp, #52]	; 0x34
   14a08:	cmp	r1, r3
   14a0c:	bls	14a50 <__assert_fail@plt+0x36cc>
   14a10:	cmp	r9, #0
   14a14:	movwne	r9, #1
   14a18:	mvn	r1, r0
   14a1c:	orr	r1, r1, r9
   14a20:	tst	r1, #1
   14a24:	bne	149b4 <__assert_fail@plt+0x3630>
   14a28:	cmp	r8, sl
   14a2c:	movcc	r1, #39	; 0x27
   14a30:	strbcc	r1, [r5, r8]
   14a34:	add	r1, r8, #1
   14a38:	cmp	r1, sl
   14a3c:	movcc	r0, #39	; 0x27
   14a40:	strbcc	r0, [r5, r1]
   14a44:	add	r8, r8, #2
   14a48:	mov	r0, #0
   14a4c:	b	149b4 <__assert_fail@plt+0x3630>
   14a50:	str	r0, [fp, #-56]	; 0xffffffc8
   14a54:	cmp	r9, #0
   14a58:	movwne	r9, #1
   14a5c:	cmp	r9, #0
   14a60:	beq	145e4 <__assert_fail@plt+0x3260>
   14a64:	b	14618 <__assert_fail@plt+0x3294>
   14a68:	mov	r6, #0
   14a6c:	b	14aac <__assert_fail@plt+0x3728>
   14a70:	mov	r6, #0
   14a74:	ldr	r0, [sp, #48]	; 0x30
   14a78:	cmp	r0, lr
   14a7c:	bcs	14aac <__assert_fail@plt+0x3728>
   14a80:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14a84:	add	r0, ip, r7
   14a88:	ldr	r2, [sp, #52]	; 0x34
   14a8c:	ldrb	r1, [r0, r2]
   14a90:	cmp	r1, #0
   14a94:	beq	145a0 <__assert_fail@plt+0x321c>
   14a98:	add	r2, r2, #1
   14a9c:	add	r1, r7, r2
   14aa0:	cmp	r1, lr
   14aa4:	bcc	14a8c <__assert_fail@plt+0x3708>
   14aa8:	b	145a0 <__assert_fail@plt+0x321c>
   14aac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14ab0:	ldr	r2, [sp, #52]	; 0x34
   14ab4:	b	145a0 <__assert_fail@plt+0x321c>
   14ab8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14abc:	eor	r0, r1, #2
   14ac0:	orr	r0, r0, r8
   14ac4:	clz	r0, r0
   14ac8:	lsr	r0, r0, #5
   14acc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14ad0:	tst	r3, r0
   14ad4:	bne	14ba0 <__assert_fail@plt+0x381c>
   14ad8:	mov	r6, r5
   14adc:	subs	r0, r1, #2
   14ae0:	movwne	r0, #1
   14ae4:	orr	r0, r3, r0
   14ae8:	tst	r0, #1
   14aec:	ldr	r2, [sp, #92]	; 0x5c
   14af0:	ldreq	r0, [sp, #64]	; 0x40
   14af4:	eoreq	r0, r0, #1
   14af8:	tsteq	r0, #1
   14afc:	bne	14b3c <__assert_fail@plt+0x37b8>
   14b00:	mov	r9, lr
   14b04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b08:	tst	r0, #1
   14b0c:	bne	14c08 <__assert_fail@plt+0x3884>
   14b10:	ldr	r0, [sp, #84]	; 0x54
   14b14:	cmp	r0, #0
   14b18:	beq	14b3c <__assert_fail@plt+0x37b8>
   14b1c:	mov	r0, #0
   14b20:	str	r0, [fp, #-48]	; 0xffffffd0
   14b24:	mov	r1, #2
   14b28:	cmp	sl, #0
   14b2c:	mov	r0, r2
   14b30:	mov	r4, r3
   14b34:	ldr	r7, [sp, #84]	; 0x54
   14b38:	beq	13d14 <__assert_fail@plt+0x2990>
   14b3c:	ldr	r1, [fp, #-84]	; 0xffffffac
   14b40:	clz	r0, r1
   14b44:	lsr	r0, r0, #5
   14b48:	orr	r0, r0, r3
   14b4c:	tst	r0, #1
   14b50:	bne	14b7c <__assert_fail@plt+0x37f8>
   14b54:	ldrb	r0, [r1]
   14b58:	cmp	r0, #0
   14b5c:	beq	14b7c <__assert_fail@plt+0x37f8>
   14b60:	add	r1, r1, #1
   14b64:	cmp	r8, sl
   14b68:	strbcc	r0, [r6, r8]
   14b6c:	add	r8, r8, #1
   14b70:	ldrb	r0, [r1], #1
   14b74:	cmp	r0, #0
   14b78:	bne	14b64 <__assert_fail@plt+0x37e0>
   14b7c:	cmp	r8, sl
   14b80:	movcc	r0, #0
   14b84:	strbcc	r0, [r6, r8]
   14b88:	b	14bfc <__assert_fail@plt+0x3878>
   14b8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14b90:	mov	lr, r4
   14b94:	b	14ba0 <__assert_fail@plt+0x381c>
   14b98:	ldr	r5, [sp, #28]
   14b9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14ba0:	mov	r0, #0
   14ba4:	ldr	r1, [fp, #12]
   14ba8:	bic	r1, r1, #2
   14bac:	mov	r2, #2
   14bb0:	ldr	r3, [sp, #92]	; 0x5c
   14bb4:	tst	r3, #1
   14bb8:	movwne	r2, #4
   14bbc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14bc0:	cmp	r3, #2
   14bc4:	movne	r2, r3
   14bc8:	str	r2, [sp]
   14bcc:	str	r1, [sp, #4]
   14bd0:	str	r0, [sp, #8]
   14bd4:	ldr	r0, [sp, #80]	; 0x50
   14bd8:	str	r0, [sp, #12]
   14bdc:	ldr	r0, [sp, #88]	; 0x58
   14be0:	str	r0, [sp, #16]
   14be4:	mov	r0, r5
   14be8:	mov	r1, sl
   14bec:	mov	r2, ip
   14bf0:	mov	r3, lr
   14bf4:	bl	13c88 <__assert_fail@plt+0x2904>
   14bf8:	mov	r8, r0
   14bfc:	mov	r0, r8
   14c00:	sub	sp, fp, #28
   14c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c08:	mov	r0, #5
   14c0c:	str	r0, [sp]
   14c10:	ldr	r0, [fp, #12]
   14c14:	str	r0, [sp, #4]
   14c18:	ldr	r0, [fp, #16]
   14c1c:	str	r0, [sp, #8]
   14c20:	ldr	r0, [sp, #80]	; 0x50
   14c24:	str	r0, [sp, #12]
   14c28:	ldr	r0, [sp, #88]	; 0x58
   14c2c:	str	r0, [sp, #16]
   14c30:	mov	r0, r6
   14c34:	ldr	r1, [sp, #84]	; 0x54
   14c38:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14c3c:	mov	r3, r9
   14c40:	b	14bf4 <__assert_fail@plt+0x3870>
   14c44:	bl	11354 <abort@plt>
   14c48:	mov	r3, r2
   14c4c:	mov	r2, #0
   14c50:	b	14c54 <__assert_fail@plt+0x38d0>
   14c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c58:	add	fp, sp, #28
   14c5c:	sub	sp, sp, #36	; 0x24
   14c60:	mov	r4, r2
   14c64:	str	r2, [sp, #24]
   14c68:	mov	r5, r1
   14c6c:	mov	r6, r0
   14c70:	str	r0, [sp, #20]
   14c74:	movw	r8, #37392	; 0x9210
   14c78:	movt	r8, #2
   14c7c:	cmp	r3, #0
   14c80:	movne	r8, r3
   14c84:	bl	1127c <__errno_location@plt>
   14c88:	str	r0, [sp, #28]
   14c8c:	ldm	r8, {r3, r9}
   14c90:	ldr	r1, [r8, #40]	; 0x28
   14c94:	ldr	r2, [r8, #44]	; 0x2c
   14c98:	ldr	r7, [r0]
   14c9c:	str	r7, [sp, #32]
   14ca0:	add	sl, r8, #8
   14ca4:	cmp	r4, #0
   14ca8:	orreq	r9, r9, #1
   14cac:	stm	sp, {r3, r9, sl}
   14cb0:	str	r1, [sp, #12]
   14cb4:	str	r2, [sp, #16]
   14cb8:	mov	r0, #0
   14cbc:	mov	r1, #0
   14cc0:	mov	r2, r6
   14cc4:	mov	r3, r5
   14cc8:	mov	r7, r5
   14ccc:	bl	13c88 <__assert_fail@plt+0x2904>
   14cd0:	mov	r5, r0
   14cd4:	add	r4, r0, #1
   14cd8:	mov	r0, r4
   14cdc:	bl	15c0c <__assert_fail@plt+0x4888>
   14ce0:	mov	r6, r0
   14ce4:	ldr	r0, [r8]
   14ce8:	ldr	r1, [r8, #40]	; 0x28
   14cec:	ldr	r2, [r8, #44]	; 0x2c
   14cf0:	stm	sp, {r0, r9, sl}
   14cf4:	str	r1, [sp, #12]
   14cf8:	str	r2, [sp, #16]
   14cfc:	mov	r0, r6
   14d00:	mov	r1, r4
   14d04:	ldr	r2, [sp, #20]
   14d08:	mov	r3, r7
   14d0c:	bl	13c88 <__assert_fail@plt+0x2904>
   14d10:	ldr	r0, [sp, #24]
   14d14:	ldr	r1, [sp, #32]
   14d18:	ldr	r2, [sp, #28]
   14d1c:	str	r1, [r2]
   14d20:	cmp	r0, #0
   14d24:	strne	r5, [r0]
   14d28:	mov	r0, r6
   14d2c:	sub	sp, fp, #28
   14d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14d38:	add	fp, sp, #24
   14d3c:	movw	r8, #37160	; 0x9128
   14d40:	movt	r8, #2
   14d44:	ldr	r4, [r8]
   14d48:	movw	r5, #37164	; 0x912c
   14d4c:	movt	r5, #2
   14d50:	ldr	r0, [r5]
   14d54:	cmp	r0, #2
   14d58:	blt	14d84 <__assert_fail@plt+0x3a00>
   14d5c:	add	r7, r4, #12
   14d60:	mov	r6, #0
   14d64:	ldr	r0, [r7, r6, lsl #3]
   14d68:	bl	137b8 <__assert_fail@plt+0x2434>
   14d6c:	add	r0, r6, #1
   14d70:	ldr	r1, [r5]
   14d74:	add	r2, r6, #2
   14d78:	cmp	r2, r1
   14d7c:	mov	r6, r0
   14d80:	blt	14d64 <__assert_fail@plt+0x39e0>
   14d84:	ldr	r0, [r4, #4]
   14d88:	movw	r9, #37440	; 0x9240
   14d8c:	movt	r9, #2
   14d90:	cmp	r0, r9
   14d94:	movw	r7, #37168	; 0x9130
   14d98:	movt	r7, #2
   14d9c:	beq	14dac <__assert_fail@plt+0x3a28>
   14da0:	bl	137b8 <__assert_fail@plt+0x2434>
   14da4:	mov	r0, #256	; 0x100
   14da8:	stm	r7, {r0, r9}
   14dac:	cmp	r4, r7
   14db0:	beq	14dc0 <__assert_fail@plt+0x3a3c>
   14db4:	mov	r0, r4
   14db8:	bl	137b8 <__assert_fail@plt+0x2434>
   14dbc:	str	r7, [r8]
   14dc0:	mov	r0, #1
   14dc4:	str	r0, [r5]
   14dc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14dcc:	movw	r3, #37392	; 0x9210
   14dd0:	movt	r3, #2
   14dd4:	mvn	r2, #0
   14dd8:	b	14ddc <__assert_fail@plt+0x3a58>
   14ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de0:	add	fp, sp, #28
   14de4:	sub	sp, sp, #44	; 0x2c
   14de8:	mov	r7, r3
   14dec:	str	r2, [sp, #36]	; 0x24
   14df0:	str	r1, [sp, #32]
   14df4:	mov	r5, r0
   14df8:	bl	1127c <__errno_location@plt>
   14dfc:	cmp	r5, #0
   14e00:	bmi	14f70 <__assert_fail@plt+0x3bec>
   14e04:	cmn	r5, #-2147483647	; 0x80000001
   14e08:	beq	14f70 <__assert_fail@plt+0x3bec>
   14e0c:	movw	r4, #37160	; 0x9128
   14e10:	movt	r4, #2
   14e14:	ldr	r6, [r4]
   14e18:	str	r0, [sp, #28]
   14e1c:	ldr	r0, [r0]
   14e20:	str	r0, [sp, #24]
   14e24:	movw	r8, #37164	; 0x912c
   14e28:	movt	r8, #2
   14e2c:	ldr	r1, [r8]
   14e30:	cmp	r1, r5
   14e34:	ble	14e40 <__assert_fail@plt+0x3abc>
   14e38:	mov	sl, r6
   14e3c:	b	14eac <__assert_fail@plt+0x3b28>
   14e40:	str	r1, [fp, #-32]	; 0xffffffe0
   14e44:	mov	r0, #8
   14e48:	str	r0, [sp]
   14e4c:	movw	r9, #37168	; 0x9130
   14e50:	movt	r9, #2
   14e54:	subs	r0, r6, r9
   14e58:	movne	r0, r6
   14e5c:	sub	r1, r5, r1
   14e60:	add	r2, r1, #1
   14e64:	sub	r1, fp, #32
   14e68:	mvn	r3, #-2147483648	; 0x80000000
   14e6c:	bl	15ce8 <__assert_fail@plt+0x4964>
   14e70:	mov	sl, r0
   14e74:	str	r0, [r4]
   14e78:	cmp	r6, r9
   14e7c:	bne	14e88 <__assert_fail@plt+0x3b04>
   14e80:	ldrd	r0, [r9]
   14e84:	stm	sl, {r0, r1}
   14e88:	ldr	r1, [r8]
   14e8c:	add	r0, sl, r1, lsl #3
   14e90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14e94:	sub	r1, r2, r1
   14e98:	lsl	r2, r1, #3
   14e9c:	mov	r1, #0
   14ea0:	bl	11294 <memset@plt>
   14ea4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ea8:	str	r0, [r8]
   14eac:	mov	r9, sl
   14eb0:	ldr	r6, [r9, r5, lsl #3]!
   14eb4:	ldr	r4, [r9, #4]!
   14eb8:	ldm	r7, {r0, r1}
   14ebc:	ldr	r2, [r7, #40]	; 0x28
   14ec0:	ldr	r3, [r7, #44]	; 0x2c
   14ec4:	orr	r8, r1, #1
   14ec8:	add	r1, r7, #8
   14ecc:	stm	sp, {r0, r8}
   14ed0:	str	r1, [sp, #20]
   14ed4:	add	r0, sp, #8
   14ed8:	stm	r0, {r1, r2, r3}
   14edc:	mov	r0, r4
   14ee0:	mov	r1, r6
   14ee4:	ldr	r2, [sp, #32]
   14ee8:	ldr	r3, [sp, #36]	; 0x24
   14eec:	bl	13c88 <__assert_fail@plt+0x2904>
   14ef0:	cmp	r6, r0
   14ef4:	bhi	14f58 <__assert_fail@plt+0x3bd4>
   14ef8:	add	r6, r0, #1
   14efc:	str	r6, [sl, r5, lsl #3]
   14f00:	movw	r0, #37440	; 0x9240
   14f04:	movt	r0, #2
   14f08:	cmp	r4, r0
   14f0c:	beq	14f18 <__assert_fail@plt+0x3b94>
   14f10:	mov	r0, r4
   14f14:	bl	137b8 <__assert_fail@plt+0x2434>
   14f18:	mov	r0, r6
   14f1c:	bl	15c0c <__assert_fail@plt+0x4888>
   14f20:	mov	r4, r0
   14f24:	str	r0, [r9]
   14f28:	ldr	r0, [r7]
   14f2c:	ldr	r1, [r7, #40]	; 0x28
   14f30:	ldr	r2, [r7, #44]	; 0x2c
   14f34:	stm	sp, {r0, r8}
   14f38:	ldr	r0, [sp, #20]
   14f3c:	add	r3, sp, #8
   14f40:	stm	r3, {r0, r1, r2}
   14f44:	mov	r0, r4
   14f48:	mov	r1, r6
   14f4c:	ldr	r2, [sp, #32]
   14f50:	ldr	r3, [sp, #36]	; 0x24
   14f54:	bl	13c88 <__assert_fail@plt+0x2904>
   14f58:	ldr	r0, [sp, #28]
   14f5c:	ldr	r1, [sp, #24]
   14f60:	str	r1, [r0]
   14f64:	mov	r0, r4
   14f68:	sub	sp, fp, #28
   14f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f70:	bl	11354 <abort@plt>
   14f74:	movw	r3, #37392	; 0x9210
   14f78:	movt	r3, #2
   14f7c:	b	14ddc <__assert_fail@plt+0x3a58>
   14f80:	mov	r1, r0
   14f84:	mov	r0, #0
   14f88:	b	14dcc <__assert_fail@plt+0x3a48>
   14f8c:	mov	r2, r1
   14f90:	mov	r1, r0
   14f94:	mov	r0, #0
   14f98:	b	14f74 <__assert_fail@plt+0x3bf0>
   14f9c:	push	{r4, r5, r6, sl, fp, lr}
   14fa0:	add	fp, sp, #16
   14fa4:	sub	sp, sp, #48	; 0x30
   14fa8:	mov	r4, r2
   14fac:	mov	r5, r0
   14fb0:	mov	r6, sp
   14fb4:	mov	r0, r6
   14fb8:	bl	14fd8 <__assert_fail@plt+0x3c54>
   14fbc:	mov	r0, r5
   14fc0:	mov	r1, r4
   14fc4:	mvn	r2, #0
   14fc8:	mov	r3, r6
   14fcc:	bl	14ddc <__assert_fail@plt+0x3a58>
   14fd0:	sub	sp, fp, #16
   14fd4:	pop	{r4, r5, r6, sl, fp, pc}
   14fd8:	push	{fp, lr}
   14fdc:	mov	fp, sp
   14fe0:	vmov.i32	q8, #0	; 0x00000000
   14fe4:	mov	r2, #32
   14fe8:	mov	r3, r0
   14fec:	vst1.32	{d16-d17}, [r3], r2
   14ff0:	vst1.32	{d16-d17}, [r3]
   14ff4:	add	r2, r0, #16
   14ff8:	vst1.32	{d16-d17}, [r2]
   14ffc:	cmp	r1, #10
   15000:	strne	r1, [r0]
   15004:	popne	{fp, pc}
   15008:	bl	11354 <abort@plt>
   1500c:	push	{r4, r5, r6, r7, fp, lr}
   15010:	add	fp, sp, #16
   15014:	sub	sp, sp, #48	; 0x30
   15018:	mov	r4, r3
   1501c:	mov	r5, r2
   15020:	mov	r6, r0
   15024:	mov	r7, sp
   15028:	mov	r0, r7
   1502c:	bl	14fd8 <__assert_fail@plt+0x3c54>
   15030:	mov	r0, r6
   15034:	mov	r1, r5
   15038:	mov	r2, r4
   1503c:	mov	r3, r7
   15040:	bl	14ddc <__assert_fail@plt+0x3a58>
   15044:	sub	sp, fp, #16
   15048:	pop	{r4, r5, r6, r7, fp, pc}
   1504c:	mov	r2, r1
   15050:	mov	r1, r0
   15054:	mov	r0, #0
   15058:	b	14f9c <__assert_fail@plt+0x3c18>
   1505c:	mov	r3, r2
   15060:	mov	r2, r1
   15064:	mov	r1, r0
   15068:	mov	r0, #0
   1506c:	b	1500c <__assert_fail@plt+0x3c88>
   15070:	push	{r4, r5, r6, sl, fp, lr}
   15074:	add	fp, sp, #16
   15078:	sub	sp, sp, #48	; 0x30
   1507c:	mov	r4, r1
   15080:	mov	r5, r0
   15084:	movw	r0, #37392	; 0x9210
   15088:	movt	r0, #2
   1508c:	add	r1, r0, #16
   15090:	mov	r3, #32
   15094:	vld1.64	{d16-d17}, [r0], r3
   15098:	vld1.64	{d18-d19}, [r1]
   1509c:	mov	r6, sp
   150a0:	add	r1, r6, #16
   150a4:	vld1.64	{d20-d21}, [r0]
   150a8:	vst1.64	{d18-d19}, [r1]
   150ac:	mov	r0, r6
   150b0:	vst1.64	{d16-d17}, [r0], r3
   150b4:	vst1.64	{d20-d21}, [r0]
   150b8:	mov	r0, r6
   150bc:	mov	r1, r2
   150c0:	mov	r2, #1
   150c4:	bl	13b7c <__assert_fail@plt+0x27f8>
   150c8:	mov	r0, #0
   150cc:	mov	r1, r5
   150d0:	mov	r2, r4
   150d4:	mov	r3, r6
   150d8:	bl	14ddc <__assert_fail@plt+0x3a58>
   150dc:	sub	sp, fp, #16
   150e0:	pop	{r4, r5, r6, sl, fp, pc}
   150e4:	mov	r2, r1
   150e8:	mvn	r1, #0
   150ec:	b	15070 <__assert_fail@plt+0x3cec>
   150f0:	mov	r1, #58	; 0x3a
   150f4:	b	150e4 <__assert_fail@plt+0x3d60>
   150f8:	mov	r2, #58	; 0x3a
   150fc:	b	15070 <__assert_fail@plt+0x3cec>
   15100:	push	{r4, r5, r6, sl, fp, lr}
   15104:	add	fp, sp, #16
   15108:	sub	sp, sp, #48	; 0x30
   1510c:	mov	r4, r2
   15110:	mov	r5, r0
   15114:	mov	r6, sp
   15118:	mov	r0, r6
   1511c:	bl	14fd8 <__assert_fail@plt+0x3c54>
   15120:	mov	r0, r6
   15124:	mov	r1, #58	; 0x3a
   15128:	mov	r2, #1
   1512c:	bl	13b7c <__assert_fail@plt+0x27f8>
   15130:	mov	r0, r5
   15134:	mov	r1, r4
   15138:	mvn	r2, #0
   1513c:	mov	r3, r6
   15140:	bl	14ddc <__assert_fail@plt+0x3a58>
   15144:	sub	sp, fp, #16
   15148:	pop	{r4, r5, r6, sl, fp, pc}
   1514c:	push	{fp, lr}
   15150:	mov	fp, sp
   15154:	sub	sp, sp, #8
   15158:	mvn	ip, #0
   1515c:	str	ip, [sp]
   15160:	bl	1516c <__assert_fail@plt+0x3de8>
   15164:	mov	sp, fp
   15168:	pop	{fp, pc}
   1516c:	push	{r4, r5, r6, r7, fp, lr}
   15170:	add	fp, sp, #16
   15174:	sub	sp, sp, #48	; 0x30
   15178:	mov	r7, r3
   1517c:	mov	r5, r0
   15180:	movw	r0, #37392	; 0x9210
   15184:	movt	r0, #2
   15188:	add	r3, r0, #16
   1518c:	mov	r4, #32
   15190:	vld1.64	{d16-d17}, [r0], r4
   15194:	vld1.64	{d18-d19}, [r3]
   15198:	mov	r6, sp
   1519c:	add	r3, r6, #16
   151a0:	vld1.64	{d20-d21}, [r0]
   151a4:	vst1.64	{d18-d19}, [r3]
   151a8:	mov	r0, r6
   151ac:	vst1.64	{d16-d17}, [r0], r4
   151b0:	vst1.64	{d20-d21}, [r0]
   151b4:	mov	r0, r6
   151b8:	bl	13bd4 <__assert_fail@plt+0x2850>
   151bc:	ldr	r2, [fp, #8]
   151c0:	mov	r0, r5
   151c4:	mov	r1, r7
   151c8:	mov	r3, r6
   151cc:	bl	14ddc <__assert_fail@plt+0x3a58>
   151d0:	sub	sp, fp, #16
   151d4:	pop	{r4, r5, r6, r7, fp, pc}
   151d8:	mov	r3, r2
   151dc:	mov	r2, r1
   151e0:	mov	r1, r0
   151e4:	mov	r0, #0
   151e8:	b	1514c <__assert_fail@plt+0x3dc8>
   151ec:	push	{fp, lr}
   151f0:	mov	fp, sp
   151f4:	sub	sp, sp, #8
   151f8:	mov	ip, r2
   151fc:	mov	r2, r1
   15200:	mov	r1, r0
   15204:	str	r3, [sp]
   15208:	mov	r0, #0
   1520c:	mov	r3, ip
   15210:	bl	1516c <__assert_fail@plt+0x3de8>
   15214:	mov	sp, fp
   15218:	pop	{fp, pc}
   1521c:	movw	r3, #37176	; 0x9138
   15220:	movt	r3, #2
   15224:	b	14ddc <__assert_fail@plt+0x3a58>
   15228:	mov	r2, r1
   1522c:	mov	r1, r0
   15230:	mov	r0, #0
   15234:	b	1521c <__assert_fail@plt+0x3e98>
   15238:	mvn	r2, #0
   1523c:	b	1521c <__assert_fail@plt+0x3e98>
   15240:	mov	r1, r0
   15244:	mov	r0, #0
   15248:	b	15238 <__assert_fail@plt+0x3eb4>
   1524c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15250:	add	fp, sp, #24
   15254:	sub	sp, sp, #16
   15258:	mov	r4, r1
   1525c:	mov	r5, r0
   15260:	mov	r7, #0
   15264:	mov	r0, #0
   15268:	mov	r1, r5
   1526c:	mov	r2, #5
   15270:	bl	1115c <dcgettext@plt>
   15274:	cmp	r0, r5
   15278:	beq	15284 <__assert_fail@plt+0x3f00>
   1527c:	sub	sp, fp, #24
   15280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15284:	bl	17210 <__assert_fail@plt+0x5e8c>
   15288:	mov	r6, r0
   1528c:	mov	r8, #56	; 0x38
   15290:	mov	r0, #45	; 0x2d
   15294:	stm	sp, {r0, r8}
   15298:	str	r7, [sp, #8]
   1529c:	str	r7, [sp, #12]
   152a0:	mov	r0, r6
   152a4:	mov	r1, #85	; 0x55
   152a8:	mov	r2, #84	; 0x54
   152ac:	mov	r3, #70	; 0x46
   152b0:	bl	15348 <__assert_fail@plt+0x3fc4>
   152b4:	cmp	r0, #0
   152b8:	beq	152d4 <__assert_fail@plt+0x3f50>
   152bc:	ldrb	r1, [r5]
   152c0:	movw	r2, #33912	; 0x8478
   152c4:	movt	r2, #1
   152c8:	movw	r0, #33916	; 0x847c
   152cc:	movt	r0, #1
   152d0:	b	15318 <__assert_fail@plt+0x3f94>
   152d4:	mov	r0, #48	; 0x30
   152d8:	mov	r1, #51	; 0x33
   152dc:	str	r8, [sp]
   152e0:	stmib	sp, {r0, r1}
   152e4:	str	r0, [sp, #12]
   152e8:	mov	r0, r6
   152ec:	mov	r1, #71	; 0x47
   152f0:	mov	r2, #66	; 0x42
   152f4:	mov	r3, #49	; 0x31
   152f8:	bl	15348 <__assert_fail@plt+0x3fc4>
   152fc:	cmp	r0, #0
   15300:	beq	15328 <__assert_fail@plt+0x3fa4>
   15304:	ldrb	r1, [r5]
   15308:	movw	r2, #33920	; 0x8480
   1530c:	movt	r2, #1
   15310:	movw	r0, #33924	; 0x8484
   15314:	movt	r0, #1
   15318:	cmp	r1, #96	; 0x60
   1531c:	moveq	r0, r2
   15320:	sub	sp, fp, #24
   15324:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15328:	movw	r1, #33906	; 0x8472
   1532c:	movt	r1, #1
   15330:	movw	r0, #33910	; 0x8476
   15334:	movt	r0, #1
   15338:	cmp	r4, #9
   1533c:	moveq	r0, r1
   15340:	sub	sp, fp, #24
   15344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15348:	push	{r4, r5, r6, r7, fp, lr}
   1534c:	add	fp, sp, #16
   15350:	sub	sp, sp, #16
   15354:	mov	r4, r3
   15358:	mov	r5, r2
   1535c:	mov	r7, r1
   15360:	mov	r6, r0
   15364:	mov	r0, r1
   15368:	bl	16ee8 <__assert_fail@plt+0x5b64>
   1536c:	ldrb	r1, [r6]
   15370:	cmp	r0, #0
   15374:	andne	r1, r1, #223	; 0xdf
   15378:	mov	r0, #0
   1537c:	cmp	r1, r7
   15380:	bne	153b8 <__assert_fail@plt+0x4034>
   15384:	cmp	r7, #0
   15388:	beq	153c0 <__assert_fail@plt+0x403c>
   1538c:	ldr	r0, [fp, #20]
   15390:	ldr	r1, [fp, #16]
   15394:	ldr	r2, [fp, #12]
   15398:	ldr	r3, [fp, #8]
   1539c:	str	r2, [sp]
   153a0:	str	r1, [sp, #4]
   153a4:	str	r0, [sp, #8]
   153a8:	mov	r0, r6
   153ac:	mov	r1, r5
   153b0:	mov	r2, r4
   153b4:	bl	153cc <__assert_fail@plt+0x4048>
   153b8:	sub	sp, fp, #16
   153bc:	pop	{r4, r5, r6, r7, fp, pc}
   153c0:	mov	r0, #1
   153c4:	sub	sp, fp, #16
   153c8:	pop	{r4, r5, r6, r7, fp, pc}
   153cc:	push	{r4, r5, r6, r7, fp, lr}
   153d0:	add	fp, sp, #16
   153d4:	sub	sp, sp, #8
   153d8:	mov	r4, r3
   153dc:	mov	r5, r2
   153e0:	mov	r7, r1
   153e4:	mov	r6, r0
   153e8:	mov	r0, r1
   153ec:	bl	16ee8 <__assert_fail@plt+0x5b64>
   153f0:	ldrb	r1, [r6, #1]
   153f4:	cmp	r0, #0
   153f8:	andne	r1, r1, #223	; 0xdf
   153fc:	mov	r0, #0
   15400:	cmp	r1, r7
   15404:	bne	15434 <__assert_fail@plt+0x40b0>
   15408:	cmp	r7, #0
   1540c:	beq	1543c <__assert_fail@plt+0x40b8>
   15410:	ldr	r0, [fp, #16]
   15414:	ldr	r1, [fp, #12]
   15418:	ldr	r3, [fp, #8]
   1541c:	str	r1, [sp]
   15420:	str	r0, [sp, #4]
   15424:	mov	r0, r6
   15428:	mov	r1, r5
   1542c:	mov	r2, r4
   15430:	bl	15448 <__assert_fail@plt+0x40c4>
   15434:	sub	sp, fp, #16
   15438:	pop	{r4, r5, r6, r7, fp, pc}
   1543c:	mov	r0, #1
   15440:	sub	sp, fp, #16
   15444:	pop	{r4, r5, r6, r7, fp, pc}
   15448:	push	{r4, r5, r6, r7, fp, lr}
   1544c:	add	fp, sp, #16
   15450:	sub	sp, sp, #8
   15454:	mov	r4, r3
   15458:	mov	r5, r2
   1545c:	mov	r7, r1
   15460:	mov	r6, r0
   15464:	mov	r0, r1
   15468:	bl	16ee8 <__assert_fail@plt+0x5b64>
   1546c:	ldrb	r1, [r6, #2]
   15470:	cmp	r0, #0
   15474:	andne	r1, r1, #223	; 0xdf
   15478:	mov	r0, #0
   1547c:	cmp	r1, r7
   15480:	bne	154a8 <__assert_fail@plt+0x4124>
   15484:	cmp	r7, #0
   15488:	beq	154b0 <__assert_fail@plt+0x412c>
   1548c:	ldr	r0, [fp, #12]
   15490:	ldr	r3, [fp, #8]
   15494:	str	r0, [sp]
   15498:	mov	r0, r6
   1549c:	mov	r1, r5
   154a0:	mov	r2, r4
   154a4:	bl	154bc <__assert_fail@plt+0x4138>
   154a8:	sub	sp, fp, #16
   154ac:	pop	{r4, r5, r6, r7, fp, pc}
   154b0:	mov	r0, #1
   154b4:	sub	sp, fp, #16
   154b8:	pop	{r4, r5, r6, r7, fp, pc}
   154bc:	push	{r4, r5, r6, r7, fp, lr}
   154c0:	add	fp, sp, #16
   154c4:	mov	r4, r3
   154c8:	mov	r5, r2
   154cc:	mov	r7, r1
   154d0:	mov	r6, r0
   154d4:	mov	r0, r1
   154d8:	bl	16ee8 <__assert_fail@plt+0x5b64>
   154dc:	ldrb	r1, [r6, #3]
   154e0:	ldr	r3, [fp, #8]
   154e4:	cmp	r0, #0
   154e8:	andne	r1, r1, #223	; 0xdf
   154ec:	mov	r0, #0
   154f0:	cmp	r1, r7
   154f4:	bne	15518 <__assert_fail@plt+0x4194>
   154f8:	cmp	r7, #0
   154fc:	beq	15514 <__assert_fail@plt+0x4190>
   15500:	mov	r0, r6
   15504:	mov	r1, r5
   15508:	mov	r2, r4
   1550c:	pop	{r4, r5, r6, r7, fp, lr}
   15510:	b	1551c <__assert_fail@plt+0x4198>
   15514:	mov	r0, #1
   15518:	pop	{r4, r5, r6, r7, fp, pc}
   1551c:	push	{r4, r5, r6, r7, fp, lr}
   15520:	add	fp, sp, #16
   15524:	mov	r4, r3
   15528:	mov	r5, r2
   1552c:	mov	r7, r1
   15530:	mov	r6, r0
   15534:	mov	r0, r1
   15538:	bl	16ee8 <__assert_fail@plt+0x5b64>
   1553c:	ldrb	r1, [r6, #4]
   15540:	cmp	r0, #0
   15544:	andne	r1, r1, #223	; 0xdf
   15548:	mov	r0, #0
   1554c:	cmp	r1, r7
   15550:	bne	15574 <__assert_fail@plt+0x41f0>
   15554:	cmp	r7, #0
   15558:	beq	15570 <__assert_fail@plt+0x41ec>
   1555c:	mov	r0, r6
   15560:	mov	r1, r5
   15564:	mov	r2, r4
   15568:	pop	{r4, r5, r6, r7, fp, lr}
   1556c:	b	15578 <__assert_fail@plt+0x41f4>
   15570:	mov	r0, #1
   15574:	pop	{r4, r5, r6, r7, fp, pc}
   15578:	push	{r4, r5, r6, sl, fp, lr}
   1557c:	add	fp, sp, #16
   15580:	mov	r4, r2
   15584:	mov	r6, r1
   15588:	mov	r5, r0
   1558c:	mov	r0, r1
   15590:	bl	16ee8 <__assert_fail@plt+0x5b64>
   15594:	ldrb	r1, [r5, #5]
   15598:	cmp	r0, #0
   1559c:	andne	r1, r1, #223	; 0xdf
   155a0:	mov	r0, #0
   155a4:	cmp	r1, r6
   155a8:	bne	155c8 <__assert_fail@plt+0x4244>
   155ac:	cmp	r6, #0
   155b0:	beq	155c4 <__assert_fail@plt+0x4240>
   155b4:	mov	r0, r5
   155b8:	mov	r1, r4
   155bc:	pop	{r4, r5, r6, sl, fp, lr}
   155c0:	b	155cc <__assert_fail@plt+0x4248>
   155c4:	mov	r0, #1
   155c8:	pop	{r4, r5, r6, sl, fp, pc}
   155cc:	push	{r4, r5, fp, lr}
   155d0:	add	fp, sp, #8
   155d4:	mov	r5, r1
   155d8:	mov	r4, r0
   155dc:	mov	r0, r1
   155e0:	bl	16ee8 <__assert_fail@plt+0x5b64>
   155e4:	ldrb	r1, [r4, #6]
   155e8:	cmp	r0, #0
   155ec:	andne	r1, r1, #223	; 0xdf
   155f0:	mov	r0, #0
   155f4:	cmp	r1, r5
   155f8:	popne	{r4, r5, fp, pc}
   155fc:	cmp	r5, #0
   15600:	beq	15610 <__assert_fail@plt+0x428c>
   15604:	mov	r0, r4
   15608:	pop	{r4, r5, fp, lr}
   1560c:	b	15618 <__assert_fail@plt+0x4294>
   15610:	mov	r0, #1
   15614:	pop	{r4, r5, fp, pc}
   15618:	push	{r4, sl, fp, lr}
   1561c:	add	fp, sp, #8
   15620:	mov	r4, r0
   15624:	mov	r0, #0
   15628:	bl	16ee8 <__assert_fail@plt+0x5b64>
   1562c:	ldrb	r1, [r4, #7]
   15630:	cmp	r0, #0
   15634:	beq	15648 <__assert_fail@plt+0x42c4>
   15638:	tst	r1, #223	; 0xdf
   1563c:	bne	15650 <__assert_fail@plt+0x42cc>
   15640:	mov	r0, #1
   15644:	pop	{r4, sl, fp, pc}
   15648:	cmp	r1, #0
   1564c:	beq	15640 <__assert_fail@plt+0x42bc>
   15650:	mov	r0, #0
   15654:	pop	{r4, sl, fp, pc}
   15658:	b	1565c <__assert_fail@plt+0x42d8>
   1565c:	push	{r4, r5, r6, r7, fp, lr}
   15660:	add	fp, sp, #16
   15664:	mov	r6, r2
   15668:	mov	r4, r1
   1566c:	bl	156f4 <__assert_fail@plt+0x4370>
   15670:	cmp	r0, #0
   15674:	beq	156a4 <__assert_fail@plt+0x4320>
   15678:	mov	r7, r0
   1567c:	bl	11264 <strlen@plt>
   15680:	cmp	r0, r6
   15684:	bcs	156c0 <__assert_fail@plt+0x433c>
   15688:	add	r2, r0, #1
   1568c:	mov	r0, r4
   15690:	mov	r1, r7
   15694:	bl	11120 <memcpy@plt>
   15698:	mov	r5, #0
   1569c:	mov	r0, r5
   156a0:	pop	{r4, r5, r6, r7, fp, pc}
   156a4:	mov	r5, #22
   156a8:	cmp	r6, #0
   156ac:	beq	156e8 <__assert_fail@plt+0x4364>
   156b0:	mov	r0, #0
   156b4:	strb	r0, [r4]
   156b8:	mov	r0, r5
   156bc:	pop	{r4, r5, r6, r7, fp, pc}
   156c0:	mov	r5, #34	; 0x22
   156c4:	cmp	r6, #0
   156c8:	beq	156e8 <__assert_fail@plt+0x4364>
   156cc:	sub	r6, r6, #1
   156d0:	mov	r0, r4
   156d4:	mov	r1, r7
   156d8:	mov	r2, r6
   156dc:	bl	11120 <memcpy@plt>
   156e0:	mov	r0, #0
   156e4:	strb	r0, [r4, r6]
   156e8:	mov	r0, r5
   156ec:	pop	{r4, r5, r6, r7, fp, pc}
   156f0:	b	156f4 <__assert_fail@plt+0x4370>
   156f4:	mov	r1, #0
   156f8:	b	11300 <setlocale@plt>
   156fc:	mov	r1, #0
   15700:	mov	r2, #3
   15704:	b	16fdc <__assert_fail@plt+0x5c58>
   15708:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1570c:	add	fp, sp, #24
   15710:	sub	sp, sp, #32
   15714:	mov	r4, r2
   15718:	mov	r8, r0
   1571c:	ldr	r6, [fp, #12]
   15720:	ldr	r7, [fp, #8]
   15724:	cmp	r1, #0
   15728:	beq	15750 <__assert_fail@plt+0x43cc>
   1572c:	mov	r5, r1
   15730:	str	r4, [sp]
   15734:	str	r3, [sp, #4]
   15738:	movw	r2, #34012	; 0x84dc
   1573c:	movt	r2, #1
   15740:	mov	r0, r8
   15744:	mov	r1, #1
   15748:	mov	r3, r5
   1574c:	b	15768 <__assert_fail@plt+0x43e4>
   15750:	str	r3, [sp]
   15754:	movw	r2, #34024	; 0x84e8
   15758:	movt	r2, #1
   1575c:	mov	r0, r8
   15760:	mov	r1, #1
   15764:	mov	r3, r4
   15768:	bl	112c4 <__fprintf_chk@plt>
   1576c:	movw	r1, #34031	; 0x84ef
   15770:	movt	r1, #1
   15774:	mov	r0, #0
   15778:	mov	r2, #5
   1577c:	bl	1115c <dcgettext@plt>
   15780:	mov	r3, r0
   15784:	movw	r0, #2022	; 0x7e6
   15788:	str	r0, [sp]
   1578c:	movw	r2, #34749	; 0x87bd
   15790:	movt	r2, #1
   15794:	mov	r0, r8
   15798:	mov	r1, #1
   1579c:	bl	112c4 <__fprintf_chk@plt>
   157a0:	movw	r4, #33205	; 0x81b5
   157a4:	movt	r4, #1
   157a8:	mov	r0, r4
   157ac:	mov	r1, r8
   157b0:	bl	110cc <fputs_unlocked@plt>
   157b4:	movw	r1, #34035	; 0x84f3
   157b8:	movt	r1, #1
   157bc:	mov	r0, #0
   157c0:	mov	r2, #5
   157c4:	bl	1115c <dcgettext@plt>
   157c8:	mov	r2, r0
   157cc:	movw	r3, #34206	; 0x859e
   157d0:	movt	r3, #1
   157d4:	mov	r0, r8
   157d8:	mov	r1, #1
   157dc:	bl	112c4 <__fprintf_chk@plt>
   157e0:	mov	r0, r4
   157e4:	mov	r1, r8
   157e8:	bl	110cc <fputs_unlocked@plt>
   157ec:	cmp	r6, #9
   157f0:	bhi	1582c <__assert_fail@plt+0x44a8>
   157f4:	add	r0, pc, #0
   157f8:	ldr	pc, [r0, r6, lsl #2]
   157fc:	andeq	r5, r1, r4, lsr #16
   15800:	andeq	r5, r1, r8, lsr r8
   15804:	andeq	r5, r1, r8, ror #16
   15808:	muleq	r1, r0, r8
   1580c:			; <UNDEFINED> instruction: 0x000158b8
   15810:	andeq	r5, r1, r0, ror #17
   15814:	andeq	r5, r1, r8, lsl #18
   15818:	andeq	r5, r1, r0, asr #18
   1581c:	andeq	r5, r1, r0, ror #19
   15820:	andeq	r5, r1, r8, lsl #19
   15824:	sub	sp, fp, #24
   15828:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1582c:	movw	r1, #34559	; 0x86ff
   15830:	movt	r1, #1
   15834:	b	15990 <__assert_fail@plt+0x460c>
   15838:	movw	r1, #34240	; 0x85c0
   1583c:	movt	r1, #1
   15840:	mov	r0, #0
   15844:	mov	r2, #5
   15848:	bl	1115c <dcgettext@plt>
   1584c:	mov	r2, r0
   15850:	ldr	r3, [r7]
   15854:	mov	r0, r8
   15858:	mov	r1, #1
   1585c:	sub	sp, fp, #24
   15860:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15864:	b	112c4 <__fprintf_chk@plt>
   15868:	movw	r1, #34256	; 0x85d0
   1586c:	movt	r1, #1
   15870:	mov	r0, #0
   15874:	mov	r2, #5
   15878:	bl	1115c <dcgettext@plt>
   1587c:	mov	r2, r0
   15880:	ldr	r3, [r7]
   15884:	ldr	r0, [r7, #4]
   15888:	str	r0, [sp]
   1588c:	b	1597c <__assert_fail@plt+0x45f8>
   15890:	movw	r1, #34279	; 0x85e7
   15894:	movt	r1, #1
   15898:	mov	r0, #0
   1589c:	mov	r2, #5
   158a0:	bl	1115c <dcgettext@plt>
   158a4:	mov	r2, r0
   158a8:	ldr	r3, [r7]
   158ac:	ldmib	r7, {r0, r1}
   158b0:	stm	sp, {r0, r1}
   158b4:	b	1597c <__assert_fail@plt+0x45f8>
   158b8:	movw	r1, #34307	; 0x8603
   158bc:	movt	r1, #1
   158c0:	mov	r0, #0
   158c4:	mov	r2, #5
   158c8:	bl	1115c <dcgettext@plt>
   158cc:	mov	r2, r0
   158d0:	ldr	r3, [r7]
   158d4:	ldmib	r7, {r0, r1, r7}
   158d8:	stm	sp, {r0, r1, r7}
   158dc:	b	1597c <__assert_fail@plt+0x45f8>
   158e0:	movw	r1, #34339	; 0x8623
   158e4:	movt	r1, #1
   158e8:	mov	r0, #0
   158ec:	mov	r2, #5
   158f0:	bl	1115c <dcgettext@plt>
   158f4:	mov	r2, r0
   158f8:	ldr	r3, [r7]
   158fc:	ldmib	r7, {r0, r1, r6, r7}
   15900:	stm	sp, {r0, r1, r6, r7}
   15904:	b	1597c <__assert_fail@plt+0x45f8>
   15908:	movw	r1, #34375	; 0x8647
   1590c:	movt	r1, #1
   15910:	mov	r0, #0
   15914:	mov	r2, #5
   15918:	bl	1115c <dcgettext@plt>
   1591c:	mov	r2, r0
   15920:	ldr	r3, [r7]
   15924:	ldmib	r7, {r0, r1, r6}
   15928:	ldr	r5, [r7, #16]
   1592c:	ldr	r7, [r7, #20]
   15930:	stm	sp, {r0, r1, r6}
   15934:	str	r5, [sp, #12]
   15938:	str	r7, [sp, #16]
   1593c:	b	1597c <__assert_fail@plt+0x45f8>
   15940:	movw	r1, #34415	; 0x866f
   15944:	movt	r1, #1
   15948:	mov	r0, #0
   1594c:	mov	r2, #5
   15950:	bl	1115c <dcgettext@plt>
   15954:	mov	r2, r0
   15958:	ldr	r3, [r7]
   1595c:	ldmib	r7, {r0, r1, r6}
   15960:	ldr	r5, [r7, #16]
   15964:	ldr	r4, [r7, #20]
   15968:	ldr	r7, [r7, #24]
   1596c:	stm	sp, {r0, r1, r6}
   15970:	str	r5, [sp, #12]
   15974:	str	r4, [sp, #16]
   15978:	str	r7, [sp, #20]
   1597c:	mov	r0, r8
   15980:	mov	r1, #1
   15984:	b	15a30 <__assert_fail@plt+0x46ac>
   15988:	movw	r1, #34507	; 0x86cb
   1598c:	movt	r1, #1
   15990:	mov	r0, #0
   15994:	mov	r2, #5
   15998:	bl	1115c <dcgettext@plt>
   1599c:	mov	ip, r0
   159a0:	ldr	r3, [r7]
   159a4:	ldr	r0, [r7, #4]
   159a8:	ldr	r1, [r7, #8]
   159ac:	ldr	r6, [r7, #12]
   159b0:	ldr	r5, [r7, #16]
   159b4:	ldr	r4, [r7, #20]
   159b8:	ldr	r2, [r7, #24]
   159bc:	ldr	lr, [r7, #28]
   159c0:	ldr	r7, [r7, #32]
   159c4:	stm	sp, {r0, r1, r6}
   159c8:	str	r5, [sp, #12]
   159cc:	str	r4, [sp, #16]
   159d0:	str	r2, [sp, #20]
   159d4:	str	lr, [sp, #24]
   159d8:	str	r7, [sp, #28]
   159dc:	b	15a24 <__assert_fail@plt+0x46a0>
   159e0:	movw	r1, #34459	; 0x869b
   159e4:	movt	r1, #1
   159e8:	mov	r0, #0
   159ec:	mov	r2, #5
   159f0:	bl	1115c <dcgettext@plt>
   159f4:	mov	ip, r0
   159f8:	ldr	r3, [r7]
   159fc:	ldmib	r7, {r0, r1, r6}
   15a00:	ldr	r5, [r7, #16]
   15a04:	ldr	r4, [r7, #20]
   15a08:	ldr	r2, [r7, #24]
   15a0c:	ldr	r7, [r7, #28]
   15a10:	stm	sp, {r0, r1, r6}
   15a14:	str	r5, [sp, #12]
   15a18:	str	r4, [sp, #16]
   15a1c:	str	r2, [sp, #20]
   15a20:	str	r7, [sp, #24]
   15a24:	mov	r0, r8
   15a28:	mov	r1, #1
   15a2c:	mov	r2, ip
   15a30:	bl	112c4 <__fprintf_chk@plt>
   15a34:	sub	sp, fp, #24
   15a38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a3c:	push	{r4, sl, fp, lr}
   15a40:	add	fp, sp, #8
   15a44:	sub	sp, sp, #8
   15a48:	mov	lr, #0
   15a4c:	ldr	ip, [fp, #8]
   15a50:	ldr	r4, [ip, lr, lsl #2]
   15a54:	add	lr, lr, #1
   15a58:	cmp	r4, #0
   15a5c:	bne	15a50 <__assert_fail@plt+0x46cc>
   15a60:	sub	r4, lr, #1
   15a64:	str	ip, [sp]
   15a68:	str	r4, [sp, #4]
   15a6c:	bl	15708 <__assert_fail@plt+0x4384>
   15a70:	sub	sp, fp, #8
   15a74:	pop	{r4, sl, fp, pc}
   15a78:	push	{r4, r5, fp, lr}
   15a7c:	add	fp, sp, #8
   15a80:	sub	sp, sp, #48	; 0x30
   15a84:	mov	ip, #0
   15a88:	ldr	r4, [fp, #8]
   15a8c:	add	lr, sp, #8
   15a90:	ldr	r5, [r4]
   15a94:	str	r5, [lr, ip, lsl #2]
   15a98:	cmp	r5, #0
   15a9c:	beq	15ab4 <__assert_fail@plt+0x4730>
   15aa0:	add	ip, ip, #1
   15aa4:	add	r4, r4, #4
   15aa8:	cmp	ip, #10
   15aac:	bne	15a90 <__assert_fail@plt+0x470c>
   15ab0:	mov	ip, #10
   15ab4:	str	lr, [sp]
   15ab8:	str	ip, [sp, #4]
   15abc:	bl	15708 <__assert_fail@plt+0x4384>
   15ac0:	sub	sp, fp, #8
   15ac4:	pop	{r4, r5, fp, pc}
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	sub	sp, sp, #8
   15ad4:	add	ip, fp, #8
   15ad8:	str	ip, [sp, #4]
   15adc:	str	ip, [sp]
   15ae0:	bl	15a78 <__assert_fail@plt+0x46f4>
   15ae4:	mov	sp, fp
   15ae8:	pop	{fp, pc}
   15aec:	push	{fp, lr}
   15af0:	mov	fp, sp
   15af4:	movw	r0, #37252	; 0x9184
   15af8:	movt	r0, #2
   15afc:	ldr	r1, [r0]
   15b00:	movw	r0, #33205	; 0x81b5
   15b04:	movt	r0, #1
   15b08:	bl	110cc <fputs_unlocked@plt>
   15b0c:	movw	r1, #34619	; 0x873b
   15b10:	movt	r1, #1
   15b14:	mov	r0, #0
   15b18:	mov	r2, #5
   15b1c:	bl	1115c <dcgettext@plt>
   15b20:	mov	r1, r0
   15b24:	movw	r2, #34639	; 0x874f
   15b28:	movt	r2, #1
   15b2c:	mov	r0, #1
   15b30:	bl	112a0 <__printf_chk@plt>
   15b34:	movw	r1, #34661	; 0x8765
   15b38:	movt	r1, #1
   15b3c:	mov	r0, #0
   15b40:	mov	r2, #5
   15b44:	bl	1115c <dcgettext@plt>
   15b48:	mov	r1, r0
   15b4c:	movw	r2, #32763	; 0x7ffb
   15b50:	movt	r2, #1
   15b54:	movw	r3, #33014	; 0x80f6
   15b58:	movt	r3, #1
   15b5c:	mov	r0, #1
   15b60:	bl	112a0 <__printf_chk@plt>
   15b64:	movw	r1, #34681	; 0x8779
   15b68:	movt	r1, #1
   15b6c:	mov	r0, #0
   15b70:	mov	r2, #5
   15b74:	bl	1115c <dcgettext@plt>
   15b78:	mov	r1, r0
   15b7c:	movw	r2, #34720	; 0x87a0
   15b80:	movt	r2, #1
   15b84:	mov	r0, #1
   15b88:	pop	{fp, lr}
   15b8c:	b	112a0 <__printf_chk@plt>
   15b90:	b	15b94 <__assert_fail@plt+0x4810>
   15b94:	push	{r4, r5, r6, sl, fp, lr}
   15b98:	add	fp, sp, #16
   15b9c:	mov	r4, r2
   15ba0:	mov	r5, r1
   15ba4:	mov	r6, r0
   15ba8:	bl	17428 <__assert_fail@plt+0x60a4>
   15bac:	cmp	r0, #0
   15bb0:	popne	{r4, r5, r6, sl, fp, pc}
   15bb4:	cmp	r6, #0
   15bb8:	beq	15bcc <__assert_fail@plt+0x4848>
   15bbc:	cmp	r5, #0
   15bc0:	cmpne	r4, #0
   15bc4:	bne	15bcc <__assert_fail@plt+0x4848>
   15bc8:	pop	{r4, r5, r6, sl, fp, pc}
   15bcc:	bl	15f58 <__assert_fail@plt+0x4bd4>
   15bd0:	push	{fp, lr}
   15bd4:	mov	fp, sp
   15bd8:	bl	16bb0 <__assert_fail@plt+0x582c>
   15bdc:	pop	{fp, lr}
   15be0:	b	15be4 <__assert_fail@plt+0x4860>
   15be4:	cmp	r0, #0
   15be8:	bxne	lr
   15bec:	push	{fp, lr}
   15bf0:	mov	fp, sp
   15bf4:	bl	15f58 <__assert_fail@plt+0x4bd4>
   15bf8:	push	{fp, lr}
   15bfc:	mov	fp, sp
   15c00:	bl	171dc <__assert_fail@plt+0x5e58>
   15c04:	pop	{fp, lr}
   15c08:	b	15be4 <__assert_fail@plt+0x4860>
   15c0c:	b	15bd0 <__assert_fail@plt+0x484c>
   15c10:	push	{r4, r5, fp, lr}
   15c14:	add	fp, sp, #8
   15c18:	mov	r4, r1
   15c1c:	mov	r5, r0
   15c20:	bl	16be0 <__assert_fail@plt+0x585c>
   15c24:	cmp	r0, #0
   15c28:	popne	{r4, r5, fp, pc}
   15c2c:	cmp	r5, #0
   15c30:	beq	15c40 <__assert_fail@plt+0x48bc>
   15c34:	cmp	r4, #0
   15c38:	bne	15c40 <__assert_fail@plt+0x48bc>
   15c3c:	pop	{r4, r5, fp, pc}
   15c40:	bl	15f58 <__assert_fail@plt+0x4bd4>
   15c44:	push	{fp, lr}
   15c48:	mov	fp, sp
   15c4c:	bl	171e0 <__assert_fail@plt+0x5e5c>
   15c50:	pop	{fp, lr}
   15c54:	b	15be4 <__assert_fail@plt+0x4860>
   15c58:	push	{fp, lr}
   15c5c:	mov	fp, sp
   15c60:	bl	171f0 <__assert_fail@plt+0x5e6c>
   15c64:	pop	{fp, lr}
   15c68:	b	15be4 <__assert_fail@plt+0x4860>
   15c6c:	mov	r2, r1
   15c70:	mov	r1, r0
   15c74:	mov	r0, #0
   15c78:	b	15b94 <__assert_fail@plt+0x4810>
   15c7c:	mov	r2, r1
   15c80:	mov	r1, r0
   15c84:	mov	r0, #0
   15c88:	b	15c58 <__assert_fail@plt+0x48d4>
   15c8c:	mov	r2, #1
   15c90:	b	15c94 <__assert_fail@plt+0x4910>
   15c94:	push	{r4, r5, fp, lr}
   15c98:	add	fp, sp, #8
   15c9c:	mov	r4, r1
   15ca0:	ldr	r5, [r1]
   15ca4:	cmp	r0, #0
   15ca8:	beq	15cc0 <__assert_fail@plt+0x493c>
   15cac:	mov	r1, #1
   15cb0:	add	r1, r1, r5, lsr #1
   15cb4:	adds	r5, r5, r1
   15cb8:	bcc	15cd8 <__assert_fail@plt+0x4954>
   15cbc:	bl	15f58 <__assert_fail@plt+0x4bd4>
   15cc0:	cmp	r5, #0
   15cc4:	bne	15cd8 <__assert_fail@plt+0x4954>
   15cc8:	mov	r1, #64	; 0x40
   15ccc:	udiv	r5, r1, r2
   15cd0:	cmp	r2, #64	; 0x40
   15cd4:	addhi	r5, r5, #1
   15cd8:	mov	r1, r5
   15cdc:	bl	15b94 <__assert_fail@plt+0x4810>
   15ce0:	str	r5, [r4]
   15ce4:	pop	{r4, r5, fp, pc}
   15ce8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cec:	add	fp, sp, #24
   15cf0:	mov	r8, r1
   15cf4:	ldr	r6, [r1]
   15cf8:	add	r1, r6, r6, asr #1
   15cfc:	cmp	r1, r6
   15d00:	mvnvs	r1, #-2147483648	; 0x80000000
   15d04:	cmp	r1, r3
   15d08:	mov	r5, r1
   15d0c:	movgt	r5, r3
   15d10:	cmn	r3, #1
   15d14:	movle	r5, r1
   15d18:	ldr	r4, [fp, #8]
   15d1c:	cmn	r4, #1
   15d20:	ble	15d48 <__assert_fail@plt+0x49c4>
   15d24:	cmp	r4, #0
   15d28:	beq	15d9c <__assert_fail@plt+0x4a18>
   15d2c:	cmn	r5, #1
   15d30:	ble	15d70 <__assert_fail@plt+0x49ec>
   15d34:	mvn	r7, #-2147483648	; 0x80000000
   15d38:	udiv	r1, r7, r4
   15d3c:	cmp	r1, r5
   15d40:	bge	15d9c <__assert_fail@plt+0x4a18>
   15d44:	b	15dac <__assert_fail@plt+0x4a28>
   15d48:	cmn	r5, #1
   15d4c:	ble	15d8c <__assert_fail@plt+0x4a08>
   15d50:	cmn	r4, #1
   15d54:	beq	15d9c <__assert_fail@plt+0x4a18>
   15d58:	mov	r1, #-2147483648	; 0x80000000
   15d5c:	sdiv	r1, r1, r4
   15d60:	mvn	r7, #-2147483648	; 0x80000000
   15d64:	cmp	r1, r5
   15d68:	bge	15d9c <__assert_fail@plt+0x4a18>
   15d6c:	b	15dac <__assert_fail@plt+0x4a28>
   15d70:	beq	15d9c <__assert_fail@plt+0x4a18>
   15d74:	mov	r1, #-2147483648	; 0x80000000
   15d78:	sdiv	r1, r1, r5
   15d7c:	mvn	r7, #-2147483648	; 0x80000000
   15d80:	cmp	r1, r4
   15d84:	bge	15d9c <__assert_fail@plt+0x4a18>
   15d88:	b	15dac <__assert_fail@plt+0x4a28>
   15d8c:	mvn	r7, #-2147483648	; 0x80000000
   15d90:	sdiv	r1, r7, r4
   15d94:	cmp	r5, r1
   15d98:	blt	15dac <__assert_fail@plt+0x4a28>
   15d9c:	mul	r1, r5, r4
   15da0:	mov	r7, #64	; 0x40
   15da4:	cmp	r1, #63	; 0x3f
   15da8:	bgt	15db4 <__assert_fail@plt+0x4a30>
   15dac:	sdiv	r5, r7, r4
   15db0:	mul	r1, r5, r4
   15db4:	cmp	r0, #0
   15db8:	moveq	r7, #0
   15dbc:	streq	r7, [r8]
   15dc0:	sub	r7, r5, r6
   15dc4:	cmp	r7, r2
   15dc8:	bge	15e74 <__assert_fail@plt+0x4af0>
   15dcc:	add	r5, r6, r2
   15dd0:	mov	r1, #0
   15dd4:	cmp	r5, r3
   15dd8:	mov	r2, #0
   15ddc:	movwgt	r2, #1
   15de0:	cmn	r3, #1
   15de4:	movwgt	r1, #1
   15de8:	cmp	r5, r6
   15dec:	bvs	15e5c <__assert_fail@plt+0x4ad8>
   15df0:	ands	r1, r1, r2
   15df4:	bne	15e5c <__assert_fail@plt+0x4ad8>
   15df8:	cmn	r4, #1
   15dfc:	ble	15e24 <__assert_fail@plt+0x4aa0>
   15e00:	cmp	r4, #0
   15e04:	beq	15e70 <__assert_fail@plt+0x4aec>
   15e08:	cmn	r5, #1
   15e0c:	ble	15e48 <__assert_fail@plt+0x4ac4>
   15e10:	mvn	r1, #-2147483648	; 0x80000000
   15e14:	udiv	r1, r1, r4
   15e18:	cmp	r1, r5
   15e1c:	bge	15e70 <__assert_fail@plt+0x4aec>
   15e20:	b	15e5c <__assert_fail@plt+0x4ad8>
   15e24:	cmn	r5, #1
   15e28:	ble	15e60 <__assert_fail@plt+0x4adc>
   15e2c:	cmn	r4, #1
   15e30:	beq	15e70 <__assert_fail@plt+0x4aec>
   15e34:	mov	r1, #-2147483648	; 0x80000000
   15e38:	sdiv	r1, r1, r4
   15e3c:	cmp	r1, r5
   15e40:	bge	15e70 <__assert_fail@plt+0x4aec>
   15e44:	b	15e5c <__assert_fail@plt+0x4ad8>
   15e48:	beq	15e70 <__assert_fail@plt+0x4aec>
   15e4c:	mov	r1, #-2147483648	; 0x80000000
   15e50:	sdiv	r1, r1, r5
   15e54:	cmp	r1, r4
   15e58:	bge	15e70 <__assert_fail@plt+0x4aec>
   15e5c:	bl	15f58 <__assert_fail@plt+0x4bd4>
   15e60:	mvn	r1, #-2147483648	; 0x80000000
   15e64:	sdiv	r1, r1, r4
   15e68:	cmp	r5, r1
   15e6c:	blt	15e5c <__assert_fail@plt+0x4ad8>
   15e70:	mul	r1, r5, r4
   15e74:	bl	15c10 <__assert_fail@plt+0x488c>
   15e78:	str	r5, [r8]
   15e7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e80:	mov	r1, #1
   15e84:	b	15e88 <__assert_fail@plt+0x4b04>
   15e88:	push	{fp, lr}
   15e8c:	mov	fp, sp
   15e90:	bl	16b5c <__assert_fail@plt+0x57d8>
   15e94:	pop	{fp, lr}
   15e98:	b	15be4 <__assert_fail@plt+0x4860>
   15e9c:	mov	r1, #1
   15ea0:	b	15ea4 <__assert_fail@plt+0x4b20>
   15ea4:	push	{fp, lr}
   15ea8:	mov	fp, sp
   15eac:	bl	171ec <__assert_fail@plt+0x5e68>
   15eb0:	pop	{fp, lr}
   15eb4:	b	15be4 <__assert_fail@plt+0x4860>
   15eb8:	push	{r4, r5, fp, lr}
   15ebc:	add	fp, sp, #8
   15ec0:	mov	r4, r1
   15ec4:	mov	r5, r0
   15ec8:	mov	r0, r1
   15ecc:	bl	15bd0 <__assert_fail@plt+0x484c>
   15ed0:	mov	r1, r5
   15ed4:	mov	r2, r4
   15ed8:	pop	{r4, r5, fp, lr}
   15edc:	b	11120 <memcpy@plt>
   15ee0:	push	{r4, r5, fp, lr}
   15ee4:	add	fp, sp, #8
   15ee8:	mov	r4, r1
   15eec:	mov	r5, r0
   15ef0:	mov	r0, r1
   15ef4:	bl	15bf8 <__assert_fail@plt+0x4874>
   15ef8:	mov	r1, r5
   15efc:	mov	r2, r4
   15f00:	pop	{r4, r5, fp, lr}
   15f04:	b	11120 <memcpy@plt>
   15f08:	push	{r4, r5, fp, lr}
   15f0c:	add	fp, sp, #8
   15f10:	mov	r4, r1
   15f14:	mov	r5, r0
   15f18:	add	r0, r1, #1
   15f1c:	bl	15bf8 <__assert_fail@plt+0x4874>
   15f20:	mov	r1, #0
   15f24:	strb	r1, [r0, r4]
   15f28:	mov	r1, r5
   15f2c:	mov	r2, r4
   15f30:	pop	{r4, r5, fp, lr}
   15f34:	b	11120 <memcpy@plt>
   15f38:	push	{r4, sl, fp, lr}
   15f3c:	add	fp, sp, #8
   15f40:	mov	r4, r0
   15f44:	bl	11264 <strlen@plt>
   15f48:	add	r1, r0, #1
   15f4c:	mov	r0, r4
   15f50:	pop	{r4, sl, fp, lr}
   15f54:	b	15eb8 <__assert_fail@plt+0x4b34>
   15f58:	push	{fp, lr}
   15f5c:	mov	fp, sp
   15f60:	movw	r0, #37156	; 0x9124
   15f64:	movt	r0, #2
   15f68:	ldr	r4, [r0]
   15f6c:	movw	r1, #34796	; 0x87ec
   15f70:	movt	r1, #1
   15f74:	mov	r0, #0
   15f78:	mov	r2, #5
   15f7c:	bl	1115c <dcgettext@plt>
   15f80:	mov	r3, r0
   15f84:	movw	r2, #33370	; 0x825a
   15f88:	movt	r2, #1
   15f8c:	mov	r0, r4
   15f90:	mov	r1, #0
   15f94:	bl	111d4 <error@plt>
   15f98:	bl	11354 <abort@plt>
   15f9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fa0:	add	fp, sp, #24
   15fa4:	sub	sp, sp, #8
   15fa8:	mov	r6, r3
   15fac:	mov	r4, r2
   15fb0:	mov	r5, r1
   15fb4:	mov	r7, r0
   15fb8:	bl	172ac <__assert_fail@plt+0x5f28>
   15fbc:	mov	r8, r0
   15fc0:	bl	1127c <__errno_location@plt>
   15fc4:	ldr	r0, [r0]
   15fc8:	cmp	r0, #0
   15fcc:	beq	15fe4 <__assert_fail@plt+0x4c60>
   15fd0:	str	r6, [sp]
   15fd4:	mov	r1, r7
   15fd8:	mov	r2, r5
   15fdc:	mov	r3, r4
   15fe0:	bl	15ff0 <__assert_fail@plt+0x4c6c>
   15fe4:	mov	r0, r8
   15fe8:	sub	sp, fp, #24
   15fec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ff0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ff4:	add	fp, sp, #24
   15ff8:	sub	sp, sp, #8
   15ffc:	mov	r8, r3
   16000:	mov	r5, r2
   16004:	mov	r6, r1
   16008:	mov	r7, r0
   1600c:	movw	r1, #34813	; 0x87fd
   16010:	movt	r1, #1
   16014:	mov	r0, #0
   16018:	mov	r2, #5
   1601c:	bl	1115c <dcgettext@plt>
   16020:	mov	r2, r0
   16024:	mov	r0, #0
   16028:	mov	r1, r7
   1602c:	bl	111d4 <error@plt>
   16030:	movw	r1, #34838	; 0x8816
   16034:	movt	r1, #1
   16038:	mov	r0, #0
   1603c:	mov	r2, #5
   16040:	bl	1115c <dcgettext@plt>
   16044:	mov	r2, r0
   16048:	mov	r0, #0
   1604c:	mov	r1, #0
   16050:	bl	111d4 <error@plt>
   16054:	movw	r0, #37156	; 0x9124
   16058:	movt	r0, #2
   1605c:	ldr	r7, [r0]
   16060:	movw	r1, #34881	; 0x8841
   16064:	movt	r1, #1
   16068:	mov	r0, #0
   1606c:	mov	r2, #5
   16070:	bl	1115c <dcgettext@plt>
   16074:	mov	r4, r0
   16078:	mov	r0, #0
   1607c:	mov	r1, #8
   16080:	mov	r2, r6
   16084:	mov	r3, r5
   16088:	bl	1500c <__assert_fail@plt+0x3c88>
   1608c:	mov	r5, r0
   16090:	ldr	r3, [fp, #8]
   16094:	mov	r0, #1
   16098:	mov	r1, #8
   1609c:	mov	r2, r8
   160a0:	bl	1500c <__assert_fail@plt+0x3c88>
   160a4:	str	r0, [sp]
   160a8:	mov	r0, r7
   160ac:	mov	r1, #0
   160b0:	mov	r2, r4
   160b4:	mov	r3, r5
   160b8:	bl	111d4 <error@plt>
   160bc:	sub	sp, fp, #24
   160c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160c8:	add	fp, sp, #24
   160cc:	sub	sp, sp, #8
   160d0:	mov	r7, r3
   160d4:	mov	r4, r2
   160d8:	mov	r6, r1
   160dc:	mov	r5, r0
   160e0:	bl	173c4 <__assert_fail@plt+0x6040>
   160e4:	mov	r8, r0
   160e8:	bl	1127c <__errno_location@plt>
   160ec:	ldr	r0, [r0]
   160f0:	cmp	r0, #0
   160f4:	beq	16110 <__assert_fail@plt+0x4d8c>
   160f8:	sub	r1, r7, #1
   160fc:	str	r1, [sp]
   16100:	sub	r2, r6, #1
   16104:	mov	r1, r5
   16108:	mov	r3, r4
   1610c:	bl	15ff0 <__assert_fail@plt+0x4c6c>
   16110:	mov	r0, r8
   16114:	sub	sp, fp, #24
   16118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1611c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16120:	add	fp, sp, #28
   16124:	sub	sp, sp, #12
   16128:	cmp	r2, #37	; 0x25
   1612c:	bcs	16550 <__assert_fail@plt+0x51cc>
   16130:	mov	r7, r2
   16134:	mov	r6, r1
   16138:	mov	r4, r0
   1613c:	str	r3, [sp]
   16140:	ldr	sl, [fp, #8]
   16144:	bl	1127c <__errno_location@plt>
   16148:	mov	r5, r0
   1614c:	mov	r0, #0
   16150:	str	r0, [r5]
   16154:	bl	11234 <__ctype_b_loc@plt>
   16158:	ldr	r1, [r0]
   1615c:	mov	r2, r4
   16160:	ldrb	r0, [r2], #1
   16164:	add	r3, r1, r0, lsl #1
   16168:	ldrb	r3, [r3, #1]
   1616c:	tst	r3, #32
   16170:	bne	16160 <__assert_fail@plt+0x4ddc>
   16174:	add	r9, sp, #8
   16178:	cmp	r6, #0
   1617c:	movne	r9, r6
   16180:	mov	r8, #4
   16184:	cmp	r0, #45	; 0x2d
   16188:	beq	16544 <__assert_fail@plt+0x51c0>
   1618c:	mov	r0, r4
   16190:	mov	r1, r9
   16194:	mov	r2, r7
   16198:	bl	11258 <strtoul@plt>
   1619c:	str	r0, [sp, #4]
   161a0:	ldr	r7, [r9]
   161a4:	cmp	r7, r4
   161a8:	beq	161d0 <__assert_fail@plt+0x4e4c>
   161ac:	ldr	r0, [r5]
   161b0:	cmp	r0, #0
   161b4:	beq	16204 <__assert_fail@plt+0x4e80>
   161b8:	cmp	r0, #34	; 0x22
   161bc:	bne	16544 <__assert_fail@plt+0x51c0>
   161c0:	mov	r8, #1
   161c4:	cmp	sl, #0
   161c8:	bne	16210 <__assert_fail@plt+0x4e8c>
   161cc:	b	16538 <__assert_fail@plt+0x51b4>
   161d0:	cmp	sl, #0
   161d4:	beq	16544 <__assert_fail@plt+0x51c0>
   161d8:	ldrb	r1, [r7]
   161dc:	cmp	r1, #0
   161e0:	beq	16544 <__assert_fail@plt+0x51c0>
   161e4:	mov	r0, sl
   161e8:	bl	11270 <strchr@plt>
   161ec:	cmp	r0, #0
   161f0:	beq	16544 <__assert_fail@plt+0x51c0>
   161f4:	mov	r0, #1
   161f8:	str	r0, [sp, #4]
   161fc:	mov	r8, #0
   16200:	b	16210 <__assert_fail@plt+0x4e8c>
   16204:	mov	r8, r0
   16208:	cmp	sl, #0
   1620c:	beq	16538 <__assert_fail@plt+0x51b4>
   16210:	ldrb	r4, [r7]
   16214:	cmp	r4, #0
   16218:	beq	16538 <__assert_fail@plt+0x51b4>
   1621c:	mov	r0, sl
   16220:	mov	r1, r4
   16224:	bl	11270 <strchr@plt>
   16228:	cmp	r0, #0
   1622c:	beq	16458 <__assert_fail@plt+0x50d4>
   16230:	sub	r0, r4, #69	; 0x45
   16234:	mov	r6, #1
   16238:	mov	r5, #1024	; 0x400
   1623c:	cmp	r0, #47	; 0x2f
   16240:	bhi	16354 <__assert_fail@plt+0x4fd0>
   16244:	add	r1, pc, #0
   16248:	ldr	pc, [r1, r0, lsl #2]
   1624c:	andeq	r6, r1, ip, lsl #6
   16250:	andeq	r6, r1, r4, asr r3
   16254:	andeq	r6, r1, ip, lsl #6
   16258:	andeq	r6, r1, r4, asr r3
   1625c:	andeq	r6, r1, r4, asr r3
   16260:	andeq	r6, r1, r4, asr r3
   16264:	andeq	r6, r1, ip, lsl #6
   16268:	andeq	r6, r1, r4, asr r3
   1626c:	andeq	r6, r1, ip, lsl #6
   16270:	andeq	r6, r1, r4, asr r3
   16274:	andeq	r6, r1, r4, asr r3
   16278:	andeq	r6, r1, ip, lsl #6
   1627c:	andeq	r6, r1, r4, asr r3
   16280:	andeq	r6, r1, r4, asr r3
   16284:	andeq	r6, r1, r4, asr r3
   16288:	andeq	r6, r1, ip, lsl #6
   1628c:	andeq	r6, r1, r4, asr r3
   16290:	andeq	r6, r1, r4, asr r3
   16294:	andeq	r6, r1, r4, asr r3
   16298:	andeq	r6, r1, r4, asr r3
   1629c:	andeq	r6, r1, ip, lsl #6
   162a0:	andeq	r6, r1, ip, lsl #6
   162a4:	andeq	r6, r1, r4, asr r3
   162a8:	andeq	r6, r1, r4, asr r3
   162ac:	andeq	r6, r1, r4, asr r3
   162b0:	andeq	r6, r1, r4, asr r3
   162b4:	andeq	r6, r1, r4, asr r3
   162b8:	andeq	r6, r1, r4, asr r3
   162bc:	andeq	r6, r1, r4, asr r3
   162c0:	andeq	r6, r1, r4, asr r3
   162c4:	andeq	r6, r1, r4, asr r3
   162c8:	andeq	r6, r1, r4, asr r3
   162cc:	andeq	r6, r1, r4, asr r3
   162d0:	andeq	r6, r1, r4, asr r3
   162d4:	andeq	r6, r1, ip, lsl #6
   162d8:	andeq	r6, r1, r4, asr r3
   162dc:	andeq	r6, r1, r4, asr r3
   162e0:	andeq	r6, r1, r4, asr r3
   162e4:	andeq	r6, r1, ip, lsl #6
   162e8:	andeq	r6, r1, r4, asr r3
   162ec:	andeq	r6, r1, ip, lsl #6
   162f0:	andeq	r6, r1, r4, asr r3
   162f4:	andeq	r6, r1, r4, asr r3
   162f8:	andeq	r6, r1, r4, asr r3
   162fc:	andeq	r6, r1, r4, asr r3
   16300:	andeq	r6, r1, r4, asr r3
   16304:	andeq	r6, r1, r4, asr r3
   16308:	andeq	r6, r1, ip, lsl #6
   1630c:	mov	r0, sl
   16310:	mov	r1, #48	; 0x30
   16314:	bl	11270 <strchr@plt>
   16318:	cmp	r0, #0
   1631c:	beq	16354 <__assert_fail@plt+0x4fd0>
   16320:	ldrb	r0, [r7, #1]
   16324:	cmp	r0, #66	; 0x42
   16328:	cmpne	r0, #68	; 0x44
   1632c:	bne	1633c <__assert_fail@plt+0x4fb8>
   16330:	mov	r6, #2
   16334:	mov	r5, #1000	; 0x3e8
   16338:	b	16354 <__assert_fail@plt+0x4fd0>
   1633c:	cmp	r0, #105	; 0x69
   16340:	bne	16354 <__assert_fail@plt+0x4fd0>
   16344:	ldrb	r0, [r7, #2]
   16348:	mov	r6, #1
   1634c:	cmp	r0, #66	; 0x42
   16350:	movweq	r6, #3
   16354:	sub	r1, r4, #66	; 0x42
   16358:	cmp	r1, #53	; 0x35
   1635c:	bhi	16458 <__assert_fail@plt+0x50d4>
   16360:	mov	r0, #0
   16364:	add	r2, pc, #0
   16368:	ldr	pc, [r2, r1, lsl #2]
   1636c:			; <UNDEFINED> instruction: 0x000164bc
   16370:	andeq	r6, r1, r8, asr r4
   16374:	andeq	r6, r1, r8, asr r4
   16378:	andeq	r6, r1, r8, asr #9
   1637c:	andeq	r6, r1, r8, asr r4
   16380:	andeq	r6, r1, r4, asr #8
   16384:	andeq	r6, r1, r8, asr r4
   16388:	andeq	r6, r1, r8, asr r4
   1638c:	andeq	r6, r1, r8, asr r4
   16390:	andeq	r6, r1, ip, ror #8
   16394:	andeq	r6, r1, r8, asr r4
   16398:	andeq	r6, r1, r0, lsl #9
   1639c:	andeq	r6, r1, r8, asr r4
   163a0:	andeq	r6, r1, r8, asr r4
   163a4:	ldrdeq	r6, [r1], -ip
   163a8:	andeq	r6, r1, r8, asr r4
   163ac:	andeq	r6, r1, r8, asr r4
   163b0:	andeq	r6, r1, r8, asr r4
   163b4:	muleq	r1, r4, r4
   163b8:	andeq	r6, r1, r8, asr r4
   163bc:	andeq	r6, r1, r8, asr r4
   163c0:	andeq	r6, r1, r8, asr r4
   163c4:	andeq	r6, r1, r8, asr r4
   163c8:	strdeq	r6, [r1], -r0
   163cc:	andeq	r6, r1, r8, lsr #9
   163d0:	andeq	r6, r1, r8, asr r4
   163d4:	andeq	r6, r1, r8, asr r4
   163d8:	andeq	r6, r1, r8, asr r4
   163dc:	andeq	r6, r1, r8, asr r4
   163e0:	andeq	r6, r1, r8, asr r4
   163e4:	andeq	r6, r1, r8, asr r4
   163e8:	andeq	r6, r1, r8, asr r4
   163ec:	andeq	r6, r1, r4, lsl #10
   163f0:	andeq	r6, r1, ip, lsl r5
   163f4:	andeq	r6, r1, r8, asr r4
   163f8:	andeq	r6, r1, r8, asr r4
   163fc:	andeq	r6, r1, r8, asr r4
   16400:	andeq	r6, r1, r4, asr #8
   16404:	andeq	r6, r1, r8, asr r4
   16408:	andeq	r6, r1, r8, asr r4
   1640c:	andeq	r6, r1, r8, asr r4
   16410:	andeq	r6, r1, ip, ror #8
   16414:	andeq	r6, r1, r8, asr r4
   16418:	andeq	r6, r1, r0, lsl #9
   1641c:	andeq	r6, r1, r8, asr r4
   16420:	andeq	r6, r1, r8, asr r4
   16424:	andeq	r6, r1, r8, asr r4
   16428:	andeq	r6, r1, r8, asr r4
   1642c:	andeq	r6, r1, r8, asr r4
   16430:	andeq	r6, r1, r8, asr r4
   16434:	muleq	r1, r4, r4
   16438:	andeq	r6, r1, r8, asr r4
   1643c:	andeq	r6, r1, r8, asr r4
   16440:	andeq	r6, r1, r0, lsl r5
   16444:	add	r0, sp, #4
   16448:	mov	r1, r5
   1644c:	mov	r2, #3
   16450:	bl	165d4 <__assert_fail@plt+0x5250>
   16454:	b	1651c <__assert_fail@plt+0x5198>
   16458:	ldr	r0, [sp, #4]
   1645c:	ldr	r1, [sp]
   16460:	str	r0, [r1]
   16464:	orr	r8, r8, #2
   16468:	b	16544 <__assert_fail@plt+0x51c0>
   1646c:	add	r0, sp, #4
   16470:	mov	r1, r5
   16474:	mov	r2, #1
   16478:	bl	165d4 <__assert_fail@plt+0x5250>
   1647c:	b	1651c <__assert_fail@plt+0x5198>
   16480:	add	r0, sp, #4
   16484:	mov	r1, r5
   16488:	mov	r2, #2
   1648c:	bl	165d4 <__assert_fail@plt+0x5250>
   16490:	b	1651c <__assert_fail@plt+0x5198>
   16494:	add	r0, sp, #4
   16498:	mov	r1, r5
   1649c:	mov	r2, #4
   164a0:	bl	165d4 <__assert_fail@plt+0x5250>
   164a4:	b	1651c <__assert_fail@plt+0x5198>
   164a8:	add	r0, sp, #4
   164ac:	mov	r1, r5
   164b0:	mov	r2, #7
   164b4:	bl	165d4 <__assert_fail@plt+0x5250>
   164b8:	b	1651c <__assert_fail@plt+0x5198>
   164bc:	add	r0, sp, #4
   164c0:	mov	r1, #1024	; 0x400
   164c4:	b	16518 <__assert_fail@plt+0x5194>
   164c8:	add	r0, sp, #4
   164cc:	mov	r1, r5
   164d0:	mov	r2, #6
   164d4:	bl	165d4 <__assert_fail@plt+0x5250>
   164d8:	b	1651c <__assert_fail@plt+0x5198>
   164dc:	add	r0, sp, #4
   164e0:	mov	r1, r5
   164e4:	mov	r2, #5
   164e8:	bl	165d4 <__assert_fail@plt+0x5250>
   164ec:	b	1651c <__assert_fail@plt+0x5198>
   164f0:	add	r0, sp, #4
   164f4:	mov	r1, r5
   164f8:	mov	r2, #8
   164fc:	bl	165d4 <__assert_fail@plt+0x5250>
   16500:	b	1651c <__assert_fail@plt+0x5198>
   16504:	add	r0, sp, #4
   16508:	mov	r1, #512	; 0x200
   1650c:	b	16518 <__assert_fail@plt+0x5194>
   16510:	add	r0, sp, #4
   16514:	mov	r1, #2
   16518:	bl	16570 <__assert_fail@plt+0x51ec>
   1651c:	ldr	r1, [r9]
   16520:	add	r2, r1, r6
   16524:	str	r2, [r9]
   16528:	ldrb	r1, [r1, r6]
   1652c:	orr	r8, r0, r8
   16530:	cmp	r1, #0
   16534:	orrne	r8, r8, #2
   16538:	ldr	r0, [sp, #4]
   1653c:	ldr	r1, [sp]
   16540:	str	r0, [r1]
   16544:	mov	r0, r8
   16548:	sub	sp, fp, #28
   1654c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16550:	movw	r0, #34918	; 0x8866
   16554:	movt	r0, #1
   16558:	movw	r1, #34956	; 0x888c
   1655c:	movt	r1, #1
   16560:	movw	r3, #34972	; 0x889c
   16564:	movt	r3, #1
   16568:	mov	r2, #85	; 0x55
   1656c:	bl	11384 <__assert_fail@plt>
   16570:	push	{fp, lr}
   16574:	mov	fp, sp
   16578:	cmn	r1, #1
   1657c:	ble	165a4 <__assert_fail@plt+0x5220>
   16580:	cmp	r1, #0
   16584:	beq	165bc <__assert_fail@plt+0x5238>
   16588:	mvn	r3, #0
   1658c:	udiv	ip, r3, r1
   16590:	ldr	lr, [r0]
   16594:	mov	r2, #1
   16598:	cmp	ip, lr
   1659c:	bcs	165bc <__assert_fail@plt+0x5238>
   165a0:	b	165c8 <__assert_fail@plt+0x5244>
   165a4:	ldr	r2, [r0]
   165a8:	cmp	r2, #0
   165ac:	beq	165bc <__assert_fail@plt+0x5238>
   165b0:	mov	r2, #1
   165b4:	mvn	r3, #0
   165b8:	b	165c8 <__assert_fail@plt+0x5244>
   165bc:	ldr	r2, [r0]
   165c0:	mul	r3, r2, r1
   165c4:	mov	r2, #0
   165c8:	str	r3, [r0]
   165cc:	mov	r0, r2
   165d0:	pop	{fp, pc}
   165d4:	push	{r4, r5, r6, r7, fp, lr}
   165d8:	add	fp, sp, #16
   165dc:	cmp	r2, #0
   165e0:	beq	16614 <__assert_fail@plt+0x5290>
   165e4:	mov	r4, r2
   165e8:	mov	r5, r1
   165ec:	mov	r7, r0
   165f0:	mov	r6, #0
   165f4:	mov	r0, r7
   165f8:	mov	r1, r5
   165fc:	bl	16570 <__assert_fail@plt+0x51ec>
   16600:	orr	r6, r0, r6
   16604:	subs	r4, r4, #1
   16608:	bne	165f4 <__assert_fail@plt+0x5270>
   1660c:	mov	r0, r6
   16610:	pop	{r4, r5, r6, r7, fp, pc}
   16614:	mov	r6, #0
   16618:	mov	r0, r6
   1661c:	pop	{r4, r5, r6, r7, fp, pc}
   16620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16624:	add	fp, sp, #28
   16628:	sub	sp, sp, #20
   1662c:	cmp	r2, #37	; 0x25
   16630:	bcs	16a64 <__assert_fail@plt+0x56e0>
   16634:	mov	r5, r2
   16638:	mov	r6, r1
   1663c:	mov	r4, r0
   16640:	str	r3, [sp, #4]
   16644:	ldr	sl, [fp, #8]
   16648:	bl	1127c <__errno_location@plt>
   1664c:	mov	r7, r0
   16650:	mov	r0, #0
   16654:	str	r0, [r7]
   16658:	bl	11234 <__ctype_b_loc@plt>
   1665c:	ldr	r1, [r0]
   16660:	mov	r2, r4
   16664:	ldrb	r0, [r2], #1
   16668:	add	r3, r1, r0, lsl #1
   1666c:	ldrb	r3, [r3, #1]
   16670:	tst	r3, #32
   16674:	bne	16664 <__assert_fail@plt+0x52e0>
   16678:	add	r9, sp, #16
   1667c:	cmp	r6, #0
   16680:	movne	r9, r6
   16684:	mov	r8, #4
   16688:	cmp	r0, #45	; 0x2d
   1668c:	beq	16a58 <__assert_fail@plt+0x56d4>
   16690:	mov	r0, r4
   16694:	mov	r1, r9
   16698:	mov	r2, r5
   1669c:	bl	112b8 <strtoumax@plt>
   166a0:	str	r1, [sp, #12]
   166a4:	str	r0, [sp, #8]
   166a8:	ldr	r6, [r9]
   166ac:	cmp	r6, r4
   166b0:	beq	166d8 <__assert_fail@plt+0x5354>
   166b4:	ldr	r0, [r7]
   166b8:	cmp	r0, #0
   166bc:	beq	16710 <__assert_fail@plt+0x538c>
   166c0:	cmp	r0, #34	; 0x22
   166c4:	bne	16a58 <__assert_fail@plt+0x56d4>
   166c8:	mov	r8, #1
   166cc:	cmp	sl, #0
   166d0:	bne	1671c <__assert_fail@plt+0x5398>
   166d4:	b	16a48 <__assert_fail@plt+0x56c4>
   166d8:	cmp	sl, #0
   166dc:	beq	16a58 <__assert_fail@plt+0x56d4>
   166e0:	ldrb	r1, [r6]
   166e4:	cmp	r1, #0
   166e8:	beq	16a58 <__assert_fail@plt+0x56d4>
   166ec:	mov	r0, sl
   166f0:	bl	11270 <strchr@plt>
   166f4:	cmp	r0, #0
   166f8:	beq	16a58 <__assert_fail@plt+0x56d4>
   166fc:	mov	r8, #0
   16700:	str	r8, [sp, #12]
   16704:	mov	r0, #1
   16708:	str	r0, [sp, #8]
   1670c:	b	1671c <__assert_fail@plt+0x5398>
   16710:	mov	r8, r0
   16714:	cmp	sl, #0
   16718:	beq	16a48 <__assert_fail@plt+0x56c4>
   1671c:	ldrb	r4, [r6]
   16720:	cmp	r4, #0
   16724:	beq	16a48 <__assert_fail@plt+0x56c4>
   16728:	mov	r0, sl
   1672c:	mov	r1, r4
   16730:	bl	11270 <strchr@plt>
   16734:	cmp	r0, #0
   16738:	beq	16964 <__assert_fail@plt+0x55e0>
   1673c:	sub	r0, r4, #69	; 0x45
   16740:	mov	r7, #1
   16744:	mov	r5, #1024	; 0x400
   16748:	cmp	r0, #47	; 0x2f
   1674c:	bhi	16860 <__assert_fail@plt+0x54dc>
   16750:	add	r1, pc, #0
   16754:	ldr	pc, [r1, r0, lsl #2]
   16758:	andeq	r6, r1, r8, lsl r8
   1675c:	andeq	r6, r1, r0, ror #16
   16760:	andeq	r6, r1, r8, lsl r8
   16764:	andeq	r6, r1, r0, ror #16
   16768:	andeq	r6, r1, r0, ror #16
   1676c:	andeq	r6, r1, r0, ror #16
   16770:	andeq	r6, r1, r8, lsl r8
   16774:	andeq	r6, r1, r0, ror #16
   16778:	andeq	r6, r1, r8, lsl r8
   1677c:	andeq	r6, r1, r0, ror #16
   16780:	andeq	r6, r1, r0, ror #16
   16784:	andeq	r6, r1, r8, lsl r8
   16788:	andeq	r6, r1, r0, ror #16
   1678c:	andeq	r6, r1, r0, ror #16
   16790:	andeq	r6, r1, r0, ror #16
   16794:	andeq	r6, r1, r8, lsl r8
   16798:	andeq	r6, r1, r0, ror #16
   1679c:	andeq	r6, r1, r0, ror #16
   167a0:	andeq	r6, r1, r0, ror #16
   167a4:	andeq	r6, r1, r0, ror #16
   167a8:	andeq	r6, r1, r8, lsl r8
   167ac:	andeq	r6, r1, r8, lsl r8
   167b0:	andeq	r6, r1, r0, ror #16
   167b4:	andeq	r6, r1, r0, ror #16
   167b8:	andeq	r6, r1, r0, ror #16
   167bc:	andeq	r6, r1, r0, ror #16
   167c0:	andeq	r6, r1, r0, ror #16
   167c4:	andeq	r6, r1, r0, ror #16
   167c8:	andeq	r6, r1, r0, ror #16
   167cc:	andeq	r6, r1, r0, ror #16
   167d0:	andeq	r6, r1, r0, ror #16
   167d4:	andeq	r6, r1, r0, ror #16
   167d8:	andeq	r6, r1, r0, ror #16
   167dc:	andeq	r6, r1, r0, ror #16
   167e0:	andeq	r6, r1, r8, lsl r8
   167e4:	andeq	r6, r1, r0, ror #16
   167e8:	andeq	r6, r1, r0, ror #16
   167ec:	andeq	r6, r1, r0, ror #16
   167f0:	andeq	r6, r1, r8, lsl r8
   167f4:	andeq	r6, r1, r0, ror #16
   167f8:	andeq	r6, r1, r8, lsl r8
   167fc:	andeq	r6, r1, r0, ror #16
   16800:	andeq	r6, r1, r0, ror #16
   16804:	andeq	r6, r1, r0, ror #16
   16808:	andeq	r6, r1, r0, ror #16
   1680c:	andeq	r6, r1, r0, ror #16
   16810:	andeq	r6, r1, r0, ror #16
   16814:	andeq	r6, r1, r8, lsl r8
   16818:	mov	r0, sl
   1681c:	mov	r1, #48	; 0x30
   16820:	bl	11270 <strchr@plt>
   16824:	cmp	r0, #0
   16828:	beq	16860 <__assert_fail@plt+0x54dc>
   1682c:	ldrb	r0, [r6, #1]
   16830:	cmp	r0, #66	; 0x42
   16834:	cmpne	r0, #68	; 0x44
   16838:	bne	16848 <__assert_fail@plt+0x54c4>
   1683c:	mov	r7, #2
   16840:	mov	r5, #1000	; 0x3e8
   16844:	b	16860 <__assert_fail@plt+0x54dc>
   16848:	cmp	r0, #105	; 0x69
   1684c:	bne	16860 <__assert_fail@plt+0x54dc>
   16850:	ldrb	r0, [r6, #2]
   16854:	mov	r7, #1
   16858:	cmp	r0, #66	; 0x42
   1685c:	movweq	r7, #3
   16860:	sub	r1, r4, #66	; 0x42
   16864:	cmp	r1, #53	; 0x35
   16868:	bhi	16964 <__assert_fail@plt+0x55e0>
   1686c:	mov	r0, #0
   16870:	add	r2, pc, #0
   16874:	ldr	pc, [r2, r1, lsl #2]
   16878:	andeq	r6, r1, ip, asr #19
   1687c:	andeq	r6, r1, r4, ror #18
   16880:	andeq	r6, r1, r4, ror #18
   16884:	ldrdeq	r6, [r1], -r8
   16888:	andeq	r6, r1, r4, ror #18
   1688c:	andeq	r6, r1, r0, asr r9
   16890:	andeq	r6, r1, r4, ror #18
   16894:	andeq	r6, r1, r4, ror #18
   16898:	andeq	r6, r1, r4, ror #18
   1689c:	andeq	r6, r1, ip, ror r9
   168a0:	andeq	r6, r1, r4, ror #18
   168a4:	muleq	r1, r0, r9
   168a8:	andeq	r6, r1, r4, ror #18
   168ac:	andeq	r6, r1, r4, ror #18
   168b0:	andeq	r6, r1, ip, ror #19
   168b4:	andeq	r6, r1, r4, ror #18
   168b8:	andeq	r6, r1, r4, ror #18
   168bc:	andeq	r6, r1, r4, ror #18
   168c0:	andeq	r6, r1, r4, lsr #19
   168c4:	andeq	r6, r1, r4, ror #18
   168c8:	andeq	r6, r1, r4, ror #18
   168cc:	andeq	r6, r1, r4, ror #18
   168d0:	andeq	r6, r1, r4, ror #18
   168d4:	andeq	r6, r1, r0, lsl #20
   168d8:			; <UNDEFINED> instruction: 0x000169b8
   168dc:	andeq	r6, r1, r4, ror #18
   168e0:	andeq	r6, r1, r4, ror #18
   168e4:	andeq	r6, r1, r4, ror #18
   168e8:	andeq	r6, r1, r4, ror #18
   168ec:	andeq	r6, r1, r4, ror #18
   168f0:	andeq	r6, r1, r4, ror #18
   168f4:	andeq	r6, r1, r4, ror #18
   168f8:	andeq	r6, r1, r4, lsl sl
   168fc:	andeq	r6, r1, ip, lsr #20
   16900:	andeq	r6, r1, r4, ror #18
   16904:	andeq	r6, r1, r4, ror #18
   16908:	andeq	r6, r1, r4, ror #18
   1690c:	andeq	r6, r1, r0, asr r9
   16910:	andeq	r6, r1, r4, ror #18
   16914:	andeq	r6, r1, r4, ror #18
   16918:	andeq	r6, r1, r4, ror #18
   1691c:	andeq	r6, r1, ip, ror r9
   16920:	andeq	r6, r1, r4, ror #18
   16924:	muleq	r1, r0, r9
   16928:	andeq	r6, r1, r4, ror #18
   1692c:	andeq	r6, r1, r4, ror #18
   16930:	andeq	r6, r1, r4, ror #18
   16934:	andeq	r6, r1, r4, ror #18
   16938:	andeq	r6, r1, r4, ror #18
   1693c:	andeq	r6, r1, r4, ror #18
   16940:	andeq	r6, r1, r4, lsr #19
   16944:	andeq	r6, r1, r4, ror #18
   16948:	andeq	r6, r1, r4, ror #18
   1694c:	andeq	r6, r1, r0, lsr #20
   16950:	add	r0, sp, #8
   16954:	mov	r1, r5
   16958:	mov	r2, #3
   1695c:	bl	16b10 <__assert_fail@plt+0x578c>
   16960:	b	16a2c <__assert_fail@plt+0x56a8>
   16964:	ldr	r0, [sp, #8]
   16968:	ldr	r1, [sp, #12]
   1696c:	ldr	r2, [sp, #4]
   16970:	strd	r0, [r2]
   16974:	orr	r8, r8, #2
   16978:	b	16a58 <__assert_fail@plt+0x56d4>
   1697c:	add	r0, sp, #8
   16980:	mov	r1, r5
   16984:	mov	r2, #1
   16988:	bl	16b10 <__assert_fail@plt+0x578c>
   1698c:	b	16a2c <__assert_fail@plt+0x56a8>
   16990:	add	r0, sp, #8
   16994:	mov	r1, r5
   16998:	mov	r2, #2
   1699c:	bl	16b10 <__assert_fail@plt+0x578c>
   169a0:	b	16a2c <__assert_fail@plt+0x56a8>
   169a4:	add	r0, sp, #8
   169a8:	mov	r1, r5
   169ac:	mov	r2, #4
   169b0:	bl	16b10 <__assert_fail@plt+0x578c>
   169b4:	b	16a2c <__assert_fail@plt+0x56a8>
   169b8:	add	r0, sp, #8
   169bc:	mov	r1, r5
   169c0:	mov	r2, #7
   169c4:	bl	16b10 <__assert_fail@plt+0x578c>
   169c8:	b	16a2c <__assert_fail@plt+0x56a8>
   169cc:	add	r0, sp, #8
   169d0:	mov	r1, #1024	; 0x400
   169d4:	b	16a28 <__assert_fail@plt+0x56a4>
   169d8:	add	r0, sp, #8
   169dc:	mov	r1, r5
   169e0:	mov	r2, #6
   169e4:	bl	16b10 <__assert_fail@plt+0x578c>
   169e8:	b	16a2c <__assert_fail@plt+0x56a8>
   169ec:	add	r0, sp, #8
   169f0:	mov	r1, r5
   169f4:	mov	r2, #5
   169f8:	bl	16b10 <__assert_fail@plt+0x578c>
   169fc:	b	16a2c <__assert_fail@plt+0x56a8>
   16a00:	add	r0, sp, #8
   16a04:	mov	r1, r5
   16a08:	mov	r2, #8
   16a0c:	bl	16b10 <__assert_fail@plt+0x578c>
   16a10:	b	16a2c <__assert_fail@plt+0x56a8>
   16a14:	add	r0, sp, #8
   16a18:	mov	r1, #512	; 0x200
   16a1c:	b	16a28 <__assert_fail@plt+0x56a4>
   16a20:	add	r0, sp, #8
   16a24:	mov	r1, #2
   16a28:	bl	16a84 <__assert_fail@plt+0x5700>
   16a2c:	ldr	r1, [r9]
   16a30:	add	r2, r1, r7
   16a34:	str	r2, [r9]
   16a38:	ldrb	r1, [r1, r7]
   16a3c:	orr	r8, r0, r8
   16a40:	cmp	r1, #0
   16a44:	orrne	r8, r8, #2
   16a48:	ldr	r0, [sp, #8]
   16a4c:	ldr	r1, [sp, #12]
   16a50:	ldr	r2, [sp, #4]
   16a54:	strd	r0, [r2]
   16a58:	mov	r0, r8
   16a5c:	sub	sp, fp, #28
   16a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a64:	movw	r0, #34918	; 0x8866
   16a68:	movt	r0, #1
   16a6c:	movw	r1, #34956	; 0x888c
   16a70:	movt	r1, #1
   16a74:	movw	r3, #35053	; 0x88ed
   16a78:	movt	r3, #1
   16a7c:	mov	r2, #85	; 0x55
   16a80:	bl	11384 <__assert_fail@plt>
   16a84:	push	{r4, r5, r6, r7, fp, lr}
   16a88:	add	fp, sp, #16
   16a8c:	mov	r5, r1
   16a90:	mov	r4, r0
   16a94:	cmn	r1, #1
   16a98:	ble	16ad0 <__assert_fail@plt+0x574c>
   16a9c:	cmp	r5, #0
   16aa0:	beq	16af0 <__assert_fail@plt+0x576c>
   16aa4:	asr	r3, r5, #31
   16aa8:	mvn	r6, #0
   16aac:	mvn	r0, #0
   16ab0:	mvn	r1, #0
   16ab4:	mov	r2, r5
   16ab8:	bl	17464 <__assert_fail@plt+0x60e0>
   16abc:	ldrd	r2, [r4]
   16ac0:	subs	r0, r0, r2
   16ac4:	sbcs	r0, r1, r3
   16ac8:	bcc	16ae0 <__assert_fail@plt+0x575c>
   16acc:	b	16af0 <__assert_fail@plt+0x576c>
   16ad0:	ldrd	r0, [r4]
   16ad4:	orrs	r0, r0, r1
   16ad8:	beq	16af0 <__assert_fail@plt+0x576c>
   16adc:	mvn	r6, #0
   16ae0:	mov	r0, #1
   16ae4:	mvn	r7, #0
   16ae8:	strd	r6, [r4]
   16aec:	pop	{r4, r5, r6, r7, fp, pc}
   16af0:	ldrd	r0, [r4]
   16af4:	umull	r6, r2, r0, r5
   16af8:	asr	r3, r5, #31
   16afc:	mla	r0, r0, r3, r2
   16b00:	mla	r7, r1, r5, r0
   16b04:	mov	r0, #0
   16b08:	strd	r6, [r4]
   16b0c:	pop	{r4, r5, r6, r7, fp, pc}
   16b10:	push	{r4, r5, r6, r7, fp, lr}
   16b14:	add	fp, sp, #16
   16b18:	cmp	r2, #0
   16b1c:	beq	16b50 <__assert_fail@plt+0x57cc>
   16b20:	mov	r4, r2
   16b24:	mov	r5, r1
   16b28:	mov	r7, r0
   16b2c:	mov	r6, #0
   16b30:	mov	r0, r7
   16b34:	mov	r1, r5
   16b38:	bl	16a84 <__assert_fail@plt+0x5700>
   16b3c:	orr	r6, r0, r6
   16b40:	subs	r4, r4, #1
   16b44:	bne	16b30 <__assert_fail@plt+0x57ac>
   16b48:	mov	r0, r6
   16b4c:	pop	{r4, r5, r6, r7, fp, pc}
   16b50:	mov	r6, #0
   16b54:	mov	r0, r6
   16b58:	pop	{r4, r5, r6, r7, fp, pc}
   16b5c:	clz	r2, r1
   16b60:	lsr	r2, r2, #5
   16b64:	clz	r3, r0
   16b68:	lsr	r3, r3, #5
   16b6c:	orrs	r2, r3, r2
   16b70:	movwne	r1, #1
   16b74:	movwne	r0, #1
   16b78:	cmp	r1, #0
   16b7c:	beq	16bac <__assert_fail@plt+0x5828>
   16b80:	mvn	r2, #-2147483648	; 0x80000000
   16b84:	udiv	r2, r2, r1
   16b88:	cmp	r2, r0
   16b8c:	bcs	16bac <__assert_fail@plt+0x5828>
   16b90:	push	{fp, lr}
   16b94:	mov	fp, sp
   16b98:	bl	1127c <__errno_location@plt>
   16b9c:	mov	r1, #12
   16ba0:	str	r1, [r0]
   16ba4:	mov	r0, #0
   16ba8:	pop	{fp, pc}
   16bac:	b	110c0 <calloc@plt>
   16bb0:	cmp	r0, #0
   16bb4:	movweq	r0, #1
   16bb8:	cmn	r0, #1
   16bbc:	ble	16bc4 <__assert_fail@plt+0x5840>
   16bc0:	b	111ec <malloc@plt>
   16bc4:	push	{fp, lr}
   16bc8:	mov	fp, sp
   16bcc:	bl	1127c <__errno_location@plt>
   16bd0:	mov	r1, #12
   16bd4:	str	r1, [r0]
   16bd8:	mov	r0, #0
   16bdc:	pop	{fp, pc}
   16be0:	push	{fp, lr}
   16be4:	mov	fp, sp
   16be8:	cmp	r0, #0
   16bec:	beq	16c08 <__assert_fail@plt+0x5884>
   16bf0:	cmp	r1, #0
   16bf4:	beq	16c14 <__assert_fail@plt+0x5890>
   16bf8:	cmn	r1, #1
   16bfc:	ble	16c20 <__assert_fail@plt+0x589c>
   16c00:	pop	{fp, lr}
   16c04:	b	11168 <realloc@plt>
   16c08:	mov	r0, r1
   16c0c:	pop	{fp, lr}
   16c10:	b	16bb0 <__assert_fail@plt+0x582c>
   16c14:	bl	137b8 <__assert_fail@plt+0x2434>
   16c18:	mov	r0, #0
   16c1c:	pop	{fp, pc}
   16c20:	bl	1127c <__errno_location@plt>
   16c24:	mov	r1, #12
   16c28:	str	r1, [r0]
   16c2c:	mov	r0, #0
   16c30:	pop	{fp, pc}
   16c34:	mov	r1, r0
   16c38:	sub	r2, r0, #65	; 0x41
   16c3c:	mov	r0, #1
   16c40:	cmp	r2, #26
   16c44:	subcs	r2, r1, #97	; 0x61
   16c48:	cmpcs	r2, #26
   16c4c:	bcs	16c54 <__assert_fail@plt+0x58d0>
   16c50:	bx	lr
   16c54:	sub	r1, r1, #48	; 0x30
   16c58:	cmp	r1, #10
   16c5c:	movcs	r0, #0
   16c60:	bx	lr
   16c64:	mov	r1, r0
   16c68:	sub	r2, r0, #65	; 0x41
   16c6c:	mov	r0, #1
   16c70:	cmp	r2, #26
   16c74:	subcs	r1, r1, #97	; 0x61
   16c78:	cmpcs	r1, #26
   16c7c:	movcs	r0, #0
   16c80:	bx	lr
   16c84:	mov	r1, #0
   16c88:	cmp	r0, #128	; 0x80
   16c8c:	movwcc	r1, #1
   16c90:	mov	r0, r1
   16c94:	bx	lr
   16c98:	sub	r1, r0, #9
   16c9c:	clz	r1, r1
   16ca0:	lsr	r1, r1, #5
   16ca4:	sub	r0, r0, #32
   16ca8:	clz	r0, r0
   16cac:	lsr	r0, r0, #5
   16cb0:	orr	r0, r0, r1
   16cb4:	bx	lr
   16cb8:	mov	r1, r0
   16cbc:	mov	r0, #1
   16cc0:	cmp	r1, #32
   16cc4:	bxcc	lr
   16cc8:	cmp	r1, #127	; 0x7f
   16ccc:	movne	r0, #0
   16cd0:	bx	lr
   16cd4:	sub	r1, r0, #48	; 0x30
   16cd8:	mov	r0, #0
   16cdc:	cmp	r1, #10
   16ce0:	movwcc	r0, #1
   16ce4:	bx	lr
   16ce8:	sub	r1, r0, #33	; 0x21
   16cec:	mov	r0, #0
   16cf0:	cmp	r1, #94	; 0x5e
   16cf4:	movwcc	r0, #1
   16cf8:	bx	lr
   16cfc:	sub	r1, r0, #97	; 0x61
   16d00:	mov	r0, #0
   16d04:	cmp	r1, #26
   16d08:	movwcc	r0, #1
   16d0c:	bx	lr
   16d10:	sub	r1, r0, #32
   16d14:	mov	r0, #0
   16d18:	cmp	r1, #95	; 0x5f
   16d1c:	movwcc	r0, #1
   16d20:	bx	lr
   16d24:	sub	r1, r0, #33	; 0x21
   16d28:	cmp	r1, #93	; 0x5d
   16d2c:	bhi	16eb8 <__assert_fail@plt+0x5b34>
   16d30:	mov	r0, #1
   16d34:	add	r2, pc, #0
   16d38:	ldr	pc, [r2, r1, lsl #2]
   16d3c:			; <UNDEFINED> instruction: 0x00016eb4
   16d40:			; <UNDEFINED> instruction: 0x00016eb4
   16d44:			; <UNDEFINED> instruction: 0x00016eb4
   16d48:			; <UNDEFINED> instruction: 0x00016eb4
   16d4c:			; <UNDEFINED> instruction: 0x00016eb4
   16d50:			; <UNDEFINED> instruction: 0x00016eb4
   16d54:			; <UNDEFINED> instruction: 0x00016eb4
   16d58:			; <UNDEFINED> instruction: 0x00016eb4
   16d5c:			; <UNDEFINED> instruction: 0x00016eb4
   16d60:			; <UNDEFINED> instruction: 0x00016eb4
   16d64:			; <UNDEFINED> instruction: 0x00016eb4
   16d68:			; <UNDEFINED> instruction: 0x00016eb4
   16d6c:			; <UNDEFINED> instruction: 0x00016eb4
   16d70:			; <UNDEFINED> instruction: 0x00016eb4
   16d74:			; <UNDEFINED> instruction: 0x00016eb4
   16d78:			; <UNDEFINED> instruction: 0x00016eb8
   16d7c:			; <UNDEFINED> instruction: 0x00016eb8
   16d80:			; <UNDEFINED> instruction: 0x00016eb8
   16d84:			; <UNDEFINED> instruction: 0x00016eb8
   16d88:			; <UNDEFINED> instruction: 0x00016eb8
   16d8c:			; <UNDEFINED> instruction: 0x00016eb8
   16d90:			; <UNDEFINED> instruction: 0x00016eb8
   16d94:			; <UNDEFINED> instruction: 0x00016eb8
   16d98:			; <UNDEFINED> instruction: 0x00016eb8
   16d9c:			; <UNDEFINED> instruction: 0x00016eb8
   16da0:			; <UNDEFINED> instruction: 0x00016eb4
   16da4:			; <UNDEFINED> instruction: 0x00016eb4
   16da8:			; <UNDEFINED> instruction: 0x00016eb4
   16dac:			; <UNDEFINED> instruction: 0x00016eb4
   16db0:			; <UNDEFINED> instruction: 0x00016eb4
   16db4:			; <UNDEFINED> instruction: 0x00016eb4
   16db8:			; <UNDEFINED> instruction: 0x00016eb4
   16dbc:			; <UNDEFINED> instruction: 0x00016eb8
   16dc0:			; <UNDEFINED> instruction: 0x00016eb8
   16dc4:			; <UNDEFINED> instruction: 0x00016eb8
   16dc8:			; <UNDEFINED> instruction: 0x00016eb8
   16dcc:			; <UNDEFINED> instruction: 0x00016eb8
   16dd0:			; <UNDEFINED> instruction: 0x00016eb8
   16dd4:			; <UNDEFINED> instruction: 0x00016eb8
   16dd8:			; <UNDEFINED> instruction: 0x00016eb8
   16ddc:			; <UNDEFINED> instruction: 0x00016eb8
   16de0:			; <UNDEFINED> instruction: 0x00016eb8
   16de4:			; <UNDEFINED> instruction: 0x00016eb8
   16de8:			; <UNDEFINED> instruction: 0x00016eb8
   16dec:			; <UNDEFINED> instruction: 0x00016eb8
   16df0:			; <UNDEFINED> instruction: 0x00016eb8
   16df4:			; <UNDEFINED> instruction: 0x00016eb8
   16df8:			; <UNDEFINED> instruction: 0x00016eb8
   16dfc:			; <UNDEFINED> instruction: 0x00016eb8
   16e00:			; <UNDEFINED> instruction: 0x00016eb8
   16e04:			; <UNDEFINED> instruction: 0x00016eb8
   16e08:			; <UNDEFINED> instruction: 0x00016eb8
   16e0c:			; <UNDEFINED> instruction: 0x00016eb8
   16e10:			; <UNDEFINED> instruction: 0x00016eb8
   16e14:			; <UNDEFINED> instruction: 0x00016eb8
   16e18:			; <UNDEFINED> instruction: 0x00016eb8
   16e1c:			; <UNDEFINED> instruction: 0x00016eb8
   16e20:			; <UNDEFINED> instruction: 0x00016eb8
   16e24:			; <UNDEFINED> instruction: 0x00016eb4
   16e28:			; <UNDEFINED> instruction: 0x00016eb4
   16e2c:			; <UNDEFINED> instruction: 0x00016eb4
   16e30:			; <UNDEFINED> instruction: 0x00016eb4
   16e34:			; <UNDEFINED> instruction: 0x00016eb4
   16e38:			; <UNDEFINED> instruction: 0x00016eb4
   16e3c:			; <UNDEFINED> instruction: 0x00016eb8
   16e40:			; <UNDEFINED> instruction: 0x00016eb8
   16e44:			; <UNDEFINED> instruction: 0x00016eb8
   16e48:			; <UNDEFINED> instruction: 0x00016eb8
   16e4c:			; <UNDEFINED> instruction: 0x00016eb8
   16e50:			; <UNDEFINED> instruction: 0x00016eb8
   16e54:			; <UNDEFINED> instruction: 0x00016eb8
   16e58:			; <UNDEFINED> instruction: 0x00016eb8
   16e5c:			; <UNDEFINED> instruction: 0x00016eb8
   16e60:			; <UNDEFINED> instruction: 0x00016eb8
   16e64:			; <UNDEFINED> instruction: 0x00016eb8
   16e68:			; <UNDEFINED> instruction: 0x00016eb8
   16e6c:			; <UNDEFINED> instruction: 0x00016eb8
   16e70:			; <UNDEFINED> instruction: 0x00016eb8
   16e74:			; <UNDEFINED> instruction: 0x00016eb8
   16e78:			; <UNDEFINED> instruction: 0x00016eb8
   16e7c:			; <UNDEFINED> instruction: 0x00016eb8
   16e80:			; <UNDEFINED> instruction: 0x00016eb8
   16e84:			; <UNDEFINED> instruction: 0x00016eb8
   16e88:			; <UNDEFINED> instruction: 0x00016eb8
   16e8c:			; <UNDEFINED> instruction: 0x00016eb8
   16e90:			; <UNDEFINED> instruction: 0x00016eb8
   16e94:			; <UNDEFINED> instruction: 0x00016eb8
   16e98:			; <UNDEFINED> instruction: 0x00016eb8
   16e9c:			; <UNDEFINED> instruction: 0x00016eb8
   16ea0:			; <UNDEFINED> instruction: 0x00016eb8
   16ea4:			; <UNDEFINED> instruction: 0x00016eb4
   16ea8:			; <UNDEFINED> instruction: 0x00016eb4
   16eac:			; <UNDEFINED> instruction: 0x00016eb4
   16eb0:			; <UNDEFINED> instruction: 0x00016eb4
   16eb4:	bx	lr
   16eb8:	mov	r0, #0
   16ebc:	bx	lr
   16ec0:	sub	r0, r0, #9
   16ec4:	cmp	r0, #23
   16ec8:	movhi	r0, #0
   16ecc:	bxhi	lr
   16ed0:	bic	r0, r0, #-16777216	; 0xff000000
   16ed4:	movw	r1, #31
   16ed8:	movt	r1, #128	; 0x80
   16edc:	mov	r2, #1
   16ee0:	and	r0, r2, r1, lsr r0
   16ee4:	bx	lr
   16ee8:	sub	r1, r0, #65	; 0x41
   16eec:	mov	r0, #0
   16ef0:	cmp	r1, #26
   16ef4:	movwcc	r0, #1
   16ef8:	bx	lr
   16efc:	mov	r1, r0
   16f00:	sub	r2, r0, #48	; 0x30
   16f04:	mov	r0, #1
   16f08:	cmp	r2, #22
   16f0c:	bhi	16f24 <__assert_fail@plt+0x5ba0>
   16f10:	mov	ip, #1
   16f14:	movw	r3, #1023	; 0x3ff
   16f18:	movt	r3, #126	; 0x7e
   16f1c:	tst	r3, ip, lsl r2
   16f20:	bxne	lr
   16f24:	sub	r1, r1, #97	; 0x61
   16f28:	cmp	r1, #6
   16f2c:	movcs	r0, #0
   16f30:	bxcs	lr
   16f34:	bx	lr
   16f38:	sub	r1, r0, #65	; 0x41
   16f3c:	cmp	r1, #26
   16f40:	addcc	r0, r0, #32
   16f44:	bx	lr
   16f48:	sub	r1, r0, #97	; 0x61
   16f4c:	cmp	r1, #26
   16f50:	subcc	r0, r0, #32
   16f54:	bx	lr
   16f58:	push	{r4, r5, r6, sl, fp, lr}
   16f5c:	add	fp, sp, #16
   16f60:	mov	r4, r0
   16f64:	bl	111b0 <__fpending@plt>
   16f68:	mov	r5, r0
   16f6c:	mov	r0, r4
   16f70:	bl	111bc <ferror_unlocked@plt>
   16f74:	mov	r6, r0
   16f78:	mov	r0, r4
   16f7c:	bl	13600 <__assert_fail@plt+0x227c>
   16f80:	cmp	r6, #0
   16f84:	beq	16fa8 <__assert_fail@plt+0x5c24>
   16f88:	mvn	r4, #0
   16f8c:	cmp	r0, #0
   16f90:	bne	16fd4 <__assert_fail@plt+0x5c50>
   16f94:	bl	1127c <__errno_location@plt>
   16f98:	mov	r1, #0
   16f9c:	str	r1, [r0]
   16fa0:	mov	r0, r4
   16fa4:	pop	{r4, r5, r6, sl, fp, pc}
   16fa8:	cmp	r0, #0
   16fac:	mov	r4, r0
   16fb0:	mvnne	r4, #0
   16fb4:	cmp	r5, #0
   16fb8:	bne	16fd4 <__assert_fail@plt+0x5c50>
   16fbc:	cmp	r0, #0
   16fc0:	beq	16fd4 <__assert_fail@plt+0x5c50>
   16fc4:	bl	1127c <__errno_location@plt>
   16fc8:	ldr	r0, [r0]
   16fcc:	subs	r4, r0, #9
   16fd0:	mvnne	r4, #0
   16fd4:	mov	r0, r4
   16fd8:	pop	{r4, r5, r6, sl, fp, pc}
   16fdc:	sub	sp, sp, #8
   16fe0:	push	{fp, lr}
   16fe4:	mov	fp, sp
   16fe8:	sub	sp, sp, #8
   16fec:	str	r2, [fp, #8]
   16ff0:	str	r3, [fp, #12]
   16ff4:	add	r2, fp, #8
   16ff8:	str	r2, [sp, #4]
   16ffc:	cmp	r1, #11
   17000:	bhi	17040 <__assert_fail@plt+0x5cbc>
   17004:	mov	r2, #1
   17008:	movw	r3, #1300	; 0x514
   1700c:	tst	r3, r2, lsl r1
   17010:	bne	17090 <__assert_fail@plt+0x5d0c>
   17014:	movw	r3, #2570	; 0xa0a
   17018:	tst	r3, r2, lsl r1
   1701c:	bne	17068 <__assert_fail@plt+0x5ce4>
   17020:	cmp	r1, #0
   17024:	bne	17040 <__assert_fail@plt+0x5cbc>
   17028:	ldr	r1, [sp, #4]
   1702c:	add	r2, r1, #4
   17030:	str	r2, [sp, #4]
   17034:	ldr	r1, [r1]
   17038:	bl	170b4 <__assert_fail@plt+0x5d30>
   1703c:	b	170a4 <__assert_fail@plt+0x5d20>
   17040:	sub	r2, r1, #1024	; 0x400
   17044:	cmp	r2, #10
   17048:	bhi	17090 <__assert_fail@plt+0x5d0c>
   1704c:	mov	ip, #1
   17050:	movw	r3, #645	; 0x285
   17054:	tst	r3, ip, lsl r2
   17058:	bne	17090 <__assert_fail@plt+0x5d0c>
   1705c:	movw	r3, #1282	; 0x502
   17060:	tst	r3, ip, lsl r2
   17064:	beq	17070 <__assert_fail@plt+0x5cec>
   17068:	bl	112f4 <fcntl64@plt>
   1706c:	b	170a4 <__assert_fail@plt+0x5d20>
   17070:	cmp	r2, #6
   17074:	bne	17090 <__assert_fail@plt+0x5d0c>
   17078:	ldr	r1, [sp, #4]
   1707c:	add	r2, r1, #4
   17080:	str	r2, [sp, #4]
   17084:	ldr	r1, [r1]
   17088:	bl	170c0 <__assert_fail@plt+0x5d3c>
   1708c:	b	170a4 <__assert_fail@plt+0x5d20>
   17090:	ldr	r2, [sp, #4]
   17094:	add	r3, r2, #4
   17098:	str	r3, [sp, #4]
   1709c:	ldr	r2, [r2]
   170a0:	bl	112f4 <fcntl64@plt>
   170a4:	mov	sp, fp
   170a8:	pop	{fp, lr}
   170ac:	add	sp, sp, #8
   170b0:	bx	lr
   170b4:	mov	r2, r1
   170b8:	mov	r1, #0
   170bc:	b	112f4 <fcntl64@plt>
   170c0:	push	{r4, r5, r6, r7, fp, lr}
   170c4:	add	fp, sp, #16
   170c8:	mov	r5, r1
   170cc:	mov	r6, r0
   170d0:	movw	r7, #37696	; 0x9340
   170d4:	movt	r7, #2
   170d8:	ldr	r0, [r7]
   170dc:	cmp	r0, #0
   170e0:	bmi	17144 <__assert_fail@plt+0x5dc0>
   170e4:	mov	r0, r6
   170e8:	movw	r1, #1030	; 0x406
   170ec:	mov	r2, r5
   170f0:	bl	112f4 <fcntl64@plt>
   170f4:	mov	r4, r0
   170f8:	cmn	r0, #1
   170fc:	bgt	17130 <__assert_fail@plt+0x5dac>
   17100:	bl	1127c <__errno_location@plt>
   17104:	ldr	r0, [r0]
   17108:	cmp	r0, #22
   1710c:	bne	17130 <__assert_fail@plt+0x5dac>
   17110:	mov	r0, r6
   17114:	mov	r1, r5
   17118:	bl	170b4 <__assert_fail@plt+0x5d30>
   1711c:	mov	r4, r0
   17120:	cmp	r0, #0
   17124:	bmi	17194 <__assert_fail@plt+0x5e10>
   17128:	mvn	r0, #0
   1712c:	b	17134 <__assert_fail@plt+0x5db0>
   17130:	mov	r0, #1
   17134:	str	r0, [r7]
   17138:	cmp	r4, #0
   1713c:	bpl	1715c <__assert_fail@plt+0x5dd8>
   17140:	b	17194 <__assert_fail@plt+0x5e10>
   17144:	mov	r0, r6
   17148:	mov	r1, r5
   1714c:	bl	170b4 <__assert_fail@plt+0x5d30>
   17150:	mov	r4, r0
   17154:	cmp	r4, #0
   17158:	bmi	17194 <__assert_fail@plt+0x5e10>
   1715c:	ldr	r0, [r7]
   17160:	cmn	r0, #1
   17164:	bne	17194 <__assert_fail@plt+0x5e10>
   17168:	mov	r0, r4
   1716c:	mov	r1, #1
   17170:	bl	112f4 <fcntl64@plt>
   17174:	cmp	r0, #0
   17178:	bmi	1719c <__assert_fail@plt+0x5e18>
   1717c:	orr	r2, r0, #1
   17180:	mov	r0, r4
   17184:	mov	r1, #2
   17188:	bl	112f4 <fcntl64@plt>
   1718c:	cmn	r0, #1
   17190:	beq	1719c <__assert_fail@plt+0x5e18>
   17194:	mov	r0, r4
   17198:	pop	{r4, r5, r6, r7, fp, pc}
   1719c:	bl	1127c <__errno_location@plt>
   171a0:	mov	r5, r0
   171a4:	ldr	r6, [r0]
   171a8:	mov	r0, r4
   171ac:	bl	1136c <close@plt>
   171b0:	str	r6, [r5]
   171b4:	mvn	r4, #0
   171b8:	mov	r0, r4
   171bc:	pop	{r4, r5, r6, r7, fp, pc}
   171c0:	push	{fp, lr}
   171c4:	mov	fp, sp
   171c8:	bl	1127c <__errno_location@plt>
   171cc:	mov	r1, #12
   171d0:	str	r1, [r0]
   171d4:	mov	r0, #0
   171d8:	pop	{fp, pc}
   171dc:	b	16bb0 <__assert_fail@plt+0x582c>
   171e0:	cmp	r1, #0
   171e4:	orreq	r1, r1, #1
   171e8:	b	16be0 <__assert_fail@plt+0x585c>
   171ec:	b	16b5c <__assert_fail@plt+0x57d8>
   171f0:	clz	r3, r2
   171f4:	lsr	ip, r3, #5
   171f8:	clz	r3, r1
   171fc:	lsr	r3, r3, #5
   17200:	orrs	r3, r3, ip
   17204:	movwne	r1, #1
   17208:	movwne	r2, #1
   1720c:	b	17428 <__assert_fail@plt+0x60a4>
   17210:	push	{fp, lr}
   17214:	mov	fp, sp
   17218:	mov	r0, #14
   1721c:	bl	11318 <nl_langinfo@plt>
   17220:	movw	r1, #33306	; 0x821a
   17224:	movt	r1, #1
   17228:	cmp	r0, #0
   1722c:	movne	r1, r0
   17230:	ldrb	r2, [r1]
   17234:	movw	r0, #35132	; 0x893c
   17238:	movt	r0, #1
   1723c:	cmp	r2, #0
   17240:	movne	r0, r1
   17244:	pop	{fp, pc}
   17248:	push	{r4, r5, r6, r7, fp, lr}
   1724c:	add	fp, sp, #16
   17250:	sub	sp, sp, #8
   17254:	mov	r7, r2
   17258:	mov	r4, r1
   1725c:	add	r5, sp, #4
   17260:	cmp	r0, #0
   17264:	movne	r5, r0
   17268:	mov	r0, r5
   1726c:	bl	111c8 <mbrtowc@plt>
   17270:	mov	r6, r0
   17274:	cmp	r7, #0
   17278:	beq	172a0 <__assert_fail@plt+0x5f1c>
   1727c:	cmn	r6, #2
   17280:	bcc	172a0 <__assert_fail@plt+0x5f1c>
   17284:	mov	r0, #0
   17288:	bl	13888 <__assert_fail@plt+0x2504>
   1728c:	cmp	r0, #0
   17290:	bne	172a0 <__assert_fail@plt+0x5f1c>
   17294:	ldrb	r0, [r4]
   17298:	str	r0, [r5]
   1729c:	mov	r6, #1
   172a0:	mov	r0, r6
   172a4:	sub	sp, fp, #16
   172a8:	pop	{r4, r5, r6, r7, fp, pc}
   172ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   172b0:	add	fp, sp, #24
   172b4:	mov	r4, r3
   172b8:	mov	r5, r2
   172bc:	mov	r6, r1
   172c0:	mov	r7, r0
   172c4:	cmp	r1, r3
   172c8:	bne	172e4 <__assert_fail@plt+0x5f60>
   172cc:	mov	r0, r7
   172d0:	mov	r1, r5
   172d4:	mov	r2, r6
   172d8:	bl	1124c <bcmp@plt>
   172dc:	cmp	r0, #0
   172e0:	beq	17318 <__assert_fail@plt+0x5f94>
   172e4:	ldrb	r8, [r5, r4]
   172e8:	ldrb	r9, [r7, r6]
   172ec:	mov	r0, #0
   172f0:	strb	r0, [r7, r6]
   172f4:	strb	r0, [r5, r4]
   172f8:	add	r1, r6, #1
   172fc:	add	r3, r4, #1
   17300:	mov	r0, r7
   17304:	mov	r2, r5
   17308:	bl	1732c <__assert_fail@plt+0x5fa8>
   1730c:	strb	r9, [r7, r6]
   17310:	strb	r8, [r5, r4]
   17314:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17318:	bl	1127c <__errno_location@plt>
   1731c:	mov	r1, #0
   17320:	str	r1, [r0]
   17324:	mov	r0, #0
   17328:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1732c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17330:	add	fp, sp, #28
   17334:	sub	sp, sp, #4
   17338:	mov	sl, r3
   1733c:	mov	r5, r2
   17340:	mov	r6, r1
   17344:	mov	r7, r0
   17348:	bl	1127c <__errno_location@plt>
   1734c:	mov	r8, r0
   17350:	mov	r9, #0
   17354:	str	r9, [r8]
   17358:	mov	r0, r7
   1735c:	mov	r1, r5
   17360:	bl	111e0 <strcoll@plt>
   17364:	cmp	r0, #0
   17368:	bne	173a8 <__assert_fail@plt+0x6024>
   1736c:	mov	r0, r7
   17370:	bl	11264 <strlen@plt>
   17374:	add	r4, r0, #1
   17378:	sub	r6, r6, r4
   1737c:	mov	r0, r5
   17380:	bl	11264 <strlen@plt>
   17384:	add	r0, r0, #1
   17388:	sub	sl, sl, r0
   1738c:	cmp	r6, #0
   17390:	beq	173b0 <__assert_fail@plt+0x602c>
   17394:	add	r7, r7, r4
   17398:	add	r5, r5, r0
   1739c:	cmp	sl, #0
   173a0:	bne	17354 <__assert_fail@plt+0x5fd0>
   173a4:	mov	r0, #1
   173a8:	sub	sp, fp, #28
   173ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b0:	cmp	sl, #0
   173b4:	mvnne	sl, #0
   173b8:	mov	r0, sl
   173bc:	sub	sp, fp, #28
   173c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173c4:	push	{r4, r5, r6, r7, fp, lr}
   173c8:	add	fp, sp, #16
   173cc:	mov	r4, r3
   173d0:	mov	r5, r2
   173d4:	mov	r6, r1
   173d8:	mov	r7, r0
   173dc:	cmp	r1, r3
   173e0:	bne	173fc <__assert_fail@plt+0x6078>
   173e4:	mov	r0, r7
   173e8:	mov	r1, r5
   173ec:	mov	r2, r6
   173f0:	bl	1124c <bcmp@plt>
   173f4:	cmp	r0, #0
   173f8:	beq	17414 <__assert_fail@plt+0x6090>
   173fc:	mov	r0, r7
   17400:	mov	r1, r6
   17404:	mov	r2, r5
   17408:	mov	r3, r4
   1740c:	pop	{r4, r5, r6, r7, fp, lr}
   17410:	b	1732c <__assert_fail@plt+0x5fa8>
   17414:	bl	1127c <__errno_location@plt>
   17418:	mov	r1, #0
   1741c:	str	r1, [r0]
   17420:	mov	r0, #0
   17424:	pop	{r4, r5, r6, r7, fp, pc}
   17428:	cmp	r2, #0
   1742c:	beq	1745c <__assert_fail@plt+0x60d8>
   17430:	mvn	r3, #0
   17434:	udiv	r3, r3, r2
   17438:	cmp	r3, r1
   1743c:	bcs	1745c <__assert_fail@plt+0x60d8>
   17440:	push	{fp, lr}
   17444:	mov	fp, sp
   17448:	bl	1127c <__errno_location@plt>
   1744c:	mov	r1, #12
   17450:	str	r1, [r0]
   17454:	mov	r0, #0
   17458:	pop	{fp, pc}
   1745c:	mul	r1, r2, r1
   17460:	b	16be0 <__assert_fail@plt+0x585c>
   17464:	cmp	r3, #0
   17468:	cmpeq	r2, #0
   1746c:	bne	17484 <__assert_fail@plt+0x6100>
   17470:	cmp	r1, #0
   17474:	cmpeq	r0, #0
   17478:	mvnne	r1, #0
   1747c:	mvnne	r0, #0
   17480:	b	174a0 <__assert_fail@plt+0x611c>
   17484:	sub	sp, sp, #8
   17488:	push	{sp, lr}
   1748c:	bl	174b0 <__assert_fail@plt+0x612c>
   17490:	ldr	lr, [sp, #4]
   17494:	add	sp, sp, #8
   17498:	pop	{r2, r3}
   1749c:	bx	lr
   174a0:	push	{r1, lr}
   174a4:	mov	r0, #8
   174a8:	bl	110d8 <raise@plt>
   174ac:	pop	{r1, pc}
   174b0:	cmp	r1, r3
   174b4:	cmpeq	r0, r2
   174b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174bc:	mov	r4, r0
   174c0:	movcc	r0, #0
   174c4:	mov	r5, r1
   174c8:	ldr	lr, [sp, #36]	; 0x24
   174cc:	movcc	r1, r0
   174d0:	bcc	175cc <__assert_fail@plt+0x6248>
   174d4:	cmp	r3, #0
   174d8:	clzeq	ip, r2
   174dc:	clzne	ip, r3
   174e0:	addeq	ip, ip, #32
   174e4:	cmp	r5, #0
   174e8:	clzeq	r1, r4
   174ec:	addeq	r1, r1, #32
   174f0:	clzne	r1, r5
   174f4:	sub	ip, ip, r1
   174f8:	sub	sl, ip, #32
   174fc:	lsl	r9, r3, ip
   17500:	rsb	fp, ip, #32
   17504:	orr	r9, r9, r2, lsl sl
   17508:	orr	r9, r9, r2, lsr fp
   1750c:	lsl	r8, r2, ip
   17510:	cmp	r5, r9
   17514:	cmpeq	r4, r8
   17518:	movcc	r0, #0
   1751c:	movcc	r1, r0
   17520:	bcc	1753c <__assert_fail@plt+0x61b8>
   17524:	mov	r0, #1
   17528:	subs	r4, r4, r8
   1752c:	lsl	r1, r0, sl
   17530:	orr	r1, r1, r0, lsr fp
   17534:	lsl	r0, r0, ip
   17538:	sbc	r5, r5, r9
   1753c:	cmp	ip, #0
   17540:	beq	175cc <__assert_fail@plt+0x6248>
   17544:	lsr	r6, r8, #1
   17548:	orr	r6, r6, r9, lsl #31
   1754c:	lsr	r7, r9, #1
   17550:	mov	r2, ip
   17554:	b	17578 <__assert_fail@plt+0x61f4>
   17558:	subs	r3, r4, r6
   1755c:	sbc	r8, r5, r7
   17560:	adds	r3, r3, r3
   17564:	adc	r8, r8, r8
   17568:	adds	r4, r3, #1
   1756c:	adc	r5, r8, #0
   17570:	subs	r2, r2, #1
   17574:	beq	17594 <__assert_fail@plt+0x6210>
   17578:	cmp	r5, r7
   1757c:	cmpeq	r4, r6
   17580:	bcs	17558 <__assert_fail@plt+0x61d4>
   17584:	adds	r4, r4, r4
   17588:	adc	r5, r5, r5
   1758c:	subs	r2, r2, #1
   17590:	bne	17578 <__assert_fail@plt+0x61f4>
   17594:	lsr	r3, r4, ip
   17598:	orr	r3, r3, r5, lsl fp
   1759c:	lsr	r2, r5, ip
   175a0:	orr	r3, r3, r5, lsr sl
   175a4:	adds	r0, r0, r4
   175a8:	mov	r4, r3
   175ac:	lsl	r3, r2, ip
   175b0:	orr	r3, r3, r4, lsl sl
   175b4:	lsl	ip, r4, ip
   175b8:	orr	r3, r3, r4, lsr fp
   175bc:	adc	r1, r1, r5
   175c0:	subs	r0, r0, ip
   175c4:	mov	r5, r2
   175c8:	sbc	r1, r1, r3
   175cc:	cmp	lr, #0
   175d0:	strdne	r4, [lr]
   175d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175dc:	mov	r7, r0
   175e0:	ldr	r6, [pc, #72]	; 17630 <__assert_fail@plt+0x62ac>
   175e4:	ldr	r5, [pc, #72]	; 17634 <__assert_fail@plt+0x62b0>
   175e8:	add	r6, pc, r6
   175ec:	add	r5, pc, r5
   175f0:	sub	r6, r6, r5
   175f4:	mov	r8, r1
   175f8:	mov	r9, r2
   175fc:	bl	11094 <fdopen@plt-0x20>
   17600:	asrs	r6, r6, #2
   17604:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17608:	mov	r4, #0
   1760c:	add	r4, r4, #1
   17610:	ldr	r3, [r5], #4
   17614:	mov	r2, r9
   17618:	mov	r1, r8
   1761c:	mov	r0, r7
   17620:	blx	r3
   17624:	cmp	r6, r4
   17628:	bne	1760c <__assert_fail@plt+0x6288>
   1762c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17630:	andeq	r1, r1, ip, lsl r9
   17634:	andeq	r1, r1, r4, lsl r9
   17638:	bx	lr
   1763c:	ldr	r3, [pc, #12]	; 17650 <__assert_fail@plt+0x62cc>
   17640:	mov	r1, #0
   17644:	add	r3, pc, r3
   17648:	ldr	r2, [r3]
   1764c:	b	11288 <__cxa_atexit@plt>
   17650:	andeq	r1, r1, r0, asr #21

Disassembly of section .fini:

00017654 <.fini>:
   17654:	push	{r3, lr}
   17658:	pop	{r3, pc}
