
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

00011038 <.init>:
   11038:	push	{r3, lr}
   1103c:	bl	118dc <__assert_fail@plt+0x518>
   11040:	pop	{r3, pc}

Disassembly of section .plt:

00011044 <fstatfs64@plt-0x14>:
   11044:	push	{lr}		; (str lr, [sp, #-4]!)
   11048:	ldr	lr, [pc, #4]	; 11054 <fstatfs64@plt-0x4>
   1104c:	add	lr, pc, lr
   11050:	ldr	pc, [lr, #8]!
   11054:	andeq	r9, r1, ip, lsr #31

00011058 <fstatfs64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #4012]!	; 0xfac

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011070 <endgrent@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #3996]!	; 0xf9c

0001107c <fputs_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #3988]!	; 0xf94

00011088 <raise@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #3980]!	; 0xf8c

00011094 <getpwnam@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #3972]!	; 0xf84

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #3964]!	; 0xf7c

000110ac <getpwuid@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #3956]!	; 0xf74

000110b8 <fflush@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c4 <memmove@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #3940]!	; 0xf64

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #102400	; 0x19000
   110d8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110dc <__openat64_2@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #102400	; 0x19000
   110e4:	ldr	pc, [ip, #3924]!	; 0xf54

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #102400	; 0x19000
   110f0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #3908]!	; 0xf44

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #102400	; 0x19000
   11108:	ldr	pc, [ip, #3900]!	; 0xf3c

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #102400	; 0x19000
   11114:	ldr	pc, [ip, #3892]!	; 0xf34

00011118 <stpcpy@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #102400	; 0x19000
   11120:	ldr	pc, [ip, #3884]!	; 0xf2c

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #102400	; 0x19000
   1112c:	ldr	pc, [ip, #3876]!	; 0xf24

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #102400	; 0x19000
   11138:	ldr	pc, [ip, #3868]!	; 0xf1c

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #102400	; 0x19000
   11144:	ldr	pc, [ip, #3860]!	; 0xf14

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #102400	; 0x19000
   11150:	ldr	pc, [ip, #3852]!	; 0xf0c

00011154 <__fxstatat64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #102400	; 0x19000
   1115c:	ldr	pc, [ip, #3844]!	; 0xf04

00011160 <iswprint@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #102400	; 0x19000
   11168:	ldr	pc, [ip, #3836]!	; 0xefc

0001116c <__fxstat64@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #102400	; 0x19000
   11174:	ldr	pc, [ip, #3828]!	; 0xef4

00011178 <lseek64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3820]!	; 0xeec

00011184 <__ctype_get_mb_cur_max@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3812]!	; 0xee4

00011190 <strcpy@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3804]!	; 0xedc

0001119c <__fpending@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3796]!	; 0xed4

000111a8 <ferror_unlocked@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3788]!	; 0xecc

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #102400	; 0x19000
   111bc:	ldr	pc, [ip, #3780]!	; 0xec4

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3772]!	; 0xebc

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111d8 <malloc@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3756]!	; 0xeac

000111e4 <__libc_start_main@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3748]!	; 0xea4

000111f0 <__freading@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111fc <__gmon_start__@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3732]!	; 0xe94

00011208 <getopt_long@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3724]!	; 0xe8c

00011214 <__ctype_b_loc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3716]!	; 0xe84

00011220 <exit@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3708]!	; 0xe7c

0001122c <strtoul@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3700]!	; 0xe74

00011238 <strlen@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3692]!	; 0xe6c

00011244 <strchr@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3684]!	; 0xe64

00011250 <openat64@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3676]!	; 0xe5c

0001125c <fchown@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3668]!	; 0xe54

00011268 <__errno_location@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3660]!	; 0xe4c

00011274 <__cxa_atexit@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3652]!	; 0xe44

00011280 <memset@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3644]!	; 0xe3c

0001128c <__printf_chk@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3636]!	; 0xe34

00011298 <fileno@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a4 <__fprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3620]!	; 0xe24

000112b0 <fclose@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3612]!	; 0xe1c

000112bc <fseeko64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3604]!	; 0xe14

000112c8 <fcntl64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d4 <setlocale@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3588]!	; 0xe04

000112e0 <endpwent@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112ec <strrchr@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112f8 <nl_langinfo@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3564]!	; 0xdec

00011304 <readdir64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3556]!	; 0xde4

00011310 <fdopendir@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3548]!	; 0xddc

0001131c <dirfd@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3540]!	; 0xdd4

00011328 <fchdir@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3532]!	; 0xdcc

00011334 <qsort@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011340 <fchownat@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3516]!	; 0xdbc

0001134c <bindtextdomain@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3508]!	; 0xdb4

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3500]!	; 0xdac

00011364 <fputs@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3492]!	; 0xda4

00011370 <strncmp@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3484]!	; 0xd9c

0001137c <abort@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3476]!	; 0xd94

00011388 <close@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3468]!	; 0xd8c

00011394 <__lxstat64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #102400	; 0x19000
   1139c:	ldr	pc, [ip, #3460]!	; 0xd84

000113a0 <closedir@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3452]!	; 0xd7c

000113ac <getgrgid@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3444]!	; 0xd74

000113b8 <getgrnam@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3436]!	; 0xd6c

000113c4 <__assert_fail@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3428]!	; 0xd64

Disassembly of section .text:

000113d0 <.text>:
   113d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d4:	sub	sp, sp, #172	; 0xac
   113d8:	mvn	r4, #0
   113dc:	mov	r8, r0
   113e0:	ldr	r0, [r1]
   113e4:	mov	r7, r1
   113e8:	str	r4, [sp, #24]
   113ec:	str	r4, [sp, #28]
   113f0:	str	r4, [sp, #32]
   113f4:	str	r4, [sp, #36]	; 0x24
   113f8:	bl	157b8 <__assert_fail@plt+0x43f4>
   113fc:	ldr	r1, [pc, #1084]	; 11840 <__assert_fail@plt+0x47c>
   11400:	mov	r0, #6
   11404:	bl	112d4 <setlocale@plt>
   11408:	ldr	r1, [pc, #1076]	; 11844 <__assert_fail@plt+0x480>
   1140c:	ldr	r0, [pc, #1076]	; 11848 <__assert_fail@plt+0x484>
   11410:	bl	1134c <bindtextdomain@plt>
   11414:	ldr	r0, [pc, #1068]	; 11848 <__assert_fail@plt+0x484>
   11418:	bl	11148 <textdomain@plt>
   1141c:	add	r9, sp, #40	; 0x28
   11420:	ldr	r0, [pc, #1060]	; 1184c <__assert_fail@plt+0x488>
   11424:	bl	18d80 <__assert_fail@plt+0x79bc>
   11428:	mov	r0, r9
   1142c:	bl	11d94 <__assert_fail@plt+0x9d0>
   11430:	mov	r6, #16
   11434:	mov	sl, #0
   11438:	mov	r5, #0
   1143c:	str	r5, [sp]
   11440:	ldr	r3, [pc, #1032]	; 11850 <__assert_fail@plt+0x48c>
   11444:	ldr	r2, [pc, #1032]	; 11854 <__assert_fail@plt+0x490>
   11448:	mov	r1, r7
   1144c:	mov	r0, r8
   11450:	bl	11208 <getopt_long@plt>
   11454:	cmn	r0, #1
   11458:	bne	1149c <__assert_fail@plt+0xd8>
   1145c:	ldrb	r3, [sp, #44]	; 0x2c
   11460:	cmp	r3, r5
   11464:	beq	11624 <__assert_fail@plt+0x260>
   11468:	cmp	r6, #16
   1146c:	bne	11628 <__assert_fail@plt+0x264>
   11470:	cmp	r4, #1
   11474:	movne	r4, r5
   11478:	bne	11628 <__assert_fail@plt+0x264>
   1147c:	mov	r2, #5
   11480:	ldr	r1, [pc, #976]	; 11858 <__assert_fail@plt+0x494>
   11484:	mov	r0, r5
   11488:	bl	11130 <dcgettext@plt>
   1148c:	mov	r1, r5
   11490:	mov	r2, r0
   11494:	mov	r0, r4
   11498:	bl	111c0 <error@plt>
   1149c:	cmp	r0, #102	; 0x66
   114a0:	beq	11600 <__assert_fail@plt+0x23c>
   114a4:	bgt	11524 <__assert_fail@plt+0x160>
   114a8:	cmp	r0, #76	; 0x4c
   114ac:	beq	11574 <__assert_fail@plt+0x1b0>
   114b0:	bgt	11504 <__assert_fail@plt+0x140>
   114b4:	cmn	r0, #2
   114b8:	beq	11614 <__assert_fail@plt+0x250>
   114bc:	cmp	r0, #72	; 0x48
   114c0:	beq	1161c <__assert_fail@plt+0x258>
   114c4:	cmn	r0, #3
   114c8:	bne	1156c <__assert_fail@plt+0x1a8>
   114cc:	ldr	r3, [pc, #904]	; 1185c <__assert_fail@plt+0x498>
   114d0:	ldr	r0, [pc, #904]	; 11860 <__assert_fail@plt+0x49c>
   114d4:	str	r3, [sp, #4]
   114d8:	ldr	r3, [pc, #900]	; 11864 <__assert_fail@plt+0x4a0>
   114dc:	str	r5, [sp, #8]
   114e0:	str	r3, [sp]
   114e4:	ldr	r3, [pc, #892]	; 11868 <__assert_fail@plt+0x4a4>
   114e8:	ldr	r0, [r0]
   114ec:	ldr	r2, [pc, #888]	; 1186c <__assert_fail@plt+0x4a8>
   114f0:	ldr	r3, [r3]
   114f4:	ldr	r1, [pc, #884]	; 11870 <__assert_fail@plt+0x4ac>
   114f8:	bl	17620 <__assert_fail@plt+0x625c>
   114fc:	mov	r0, r5
   11500:	bl	11220 <exit@plt>
   11504:	cmp	r0, #82	; 0x52
   11508:	beq	115e8 <__assert_fail@plt+0x224>
   1150c:	cmp	r0, #99	; 0x63
   11510:	beq	115f4 <__assert_fail@plt+0x230>
   11514:	cmp	r0, #80	; 0x50
   11518:	bne	1156c <__assert_fail@plt+0x1a8>
   1151c:	mov	r6, #16
   11520:	b	11438 <__assert_fail@plt+0x74>
   11524:	ldr	r3, [pc, #840]	; 11874 <__assert_fail@plt+0x4b0>
   11528:	cmp	r0, r3
   1152c:	beq	115a0 <__assert_fail@plt+0x1dc>
   11530:	bgt	11554 <__assert_fail@plt+0x190>
   11534:	cmp	r0, #118	; 0x76
   11538:	beq	1160c <__assert_fail@plt+0x248>
   1153c:	cmp	r0, #256	; 0x100
   11540:	beq	1157c <__assert_fail@plt+0x1b8>
   11544:	cmp	r0, #104	; 0x68
   11548:	bne	1156c <__assert_fail@plt+0x1a8>
   1154c:	mov	r4, r5
   11550:	b	11438 <__assert_fail@plt+0x74>
   11554:	ldr	r3, [pc, #796]	; 11878 <__assert_fail@plt+0x4b4>
   11558:	cmp	r0, r3
   1155c:	beq	11584 <__assert_fail@plt+0x1c0>
   11560:	blt	11434 <__assert_fail@plt+0x70>
   11564:	cmp	r0, #260	; 0x104
   11568:	beq	1158c <__assert_fail@plt+0x1c8>
   1156c:	mov	r0, #1
   11570:	b	11618 <__assert_fail@plt+0x254>
   11574:	mov	r6, #2
   11578:	b	11438 <__assert_fail@plt+0x74>
   1157c:	mov	r4, #1
   11580:	b	11438 <__assert_fail@plt+0x74>
   11584:	mov	sl, #1
   11588:	b	11438 <__assert_fail@plt+0x74>
   1158c:	ldr	r3, [pc, #744]	; 1187c <__assert_fail@plt+0x4b8>
   11590:	ldr	r2, [r3]
   11594:	ldr	r3, [pc, #740]	; 11880 <__assert_fail@plt+0x4bc>
   11598:	str	r2, [r3]
   1159c:	b	11438 <__assert_fail@plt+0x74>
   115a0:	ldr	fp, [pc, #724]	; 1187c <__assert_fail@plt+0x4b8>
   115a4:	str	r5, [sp]
   115a8:	mov	r3, r5
   115ac:	add	r2, sp, #36	; 0x24
   115b0:	add	r1, sp, #32
   115b4:	ldr	r0, [fp]
   115b8:	bl	17134 <__assert_fail@plt+0x5d70>
   115bc:	subs	r3, r0, #0
   115c0:	beq	11438 <__assert_fail@plt+0x74>
   115c4:	ldr	r0, [fp]
   115c8:	str	r3, [sp, #20]
   115cc:	bl	16de8 <__assert_fail@plt+0x5a24>
   115d0:	ldr	r3, [sp, #20]
   115d4:	ldr	r2, [pc, #680]	; 11884 <__assert_fail@plt+0x4c0>
   115d8:	mov	r1, r5
   115dc:	str	r0, [sp]
   115e0:	mov	r0, #1
   115e4:	bl	111c0 <error@plt>
   115e8:	mov	r3, #1
   115ec:	strb	r3, [sp, #44]	; 0x2c
   115f0:	b	11438 <__assert_fail@plt+0x74>
   115f4:	mov	r3, #1
   115f8:	str	r3, [sp, #40]	; 0x28
   115fc:	b	11438 <__assert_fail@plt+0x74>
   11600:	mov	r3, #1
   11604:	strb	r3, [sp, #53]	; 0x35
   11608:	b	11438 <__assert_fail@plt+0x74>
   1160c:	str	r5, [sp, #40]	; 0x28
   11610:	b	11438 <__assert_fail@plt+0x74>
   11614:	mov	r0, r5
   11618:	bl	119c8 <__assert_fail@plt+0x604>
   1161c:	mov	r6, #17
   11620:	b	11438 <__assert_fail@plt+0x74>
   11624:	mov	r6, #16
   11628:	ldr	r2, [pc, #592]	; 11880 <__assert_fail@plt+0x4bc>
   1162c:	adds	r4, r4, #0
   11630:	ldr	fp, [pc, #592]	; 11888 <__assert_fail@plt+0x4c4>
   11634:	movne	r4, #1
   11638:	strb	r4, [sp, #52]	; 0x34
   1163c:	ldr	r4, [r2]
   11640:	ldr	r0, [fp]
   11644:	cmp	r4, #0
   11648:	sub	r3, r8, r0
   1164c:	mov	r5, fp
   11650:	bne	117e8 <__assert_fail@plt+0x424>
   11654:	cmp	r3, #1
   11658:	bgt	11738 <__assert_fail@plt+0x374>
   1165c:	cmp	r8, r0
   11660:	mov	r2, #5
   11664:	bgt	11688 <__assert_fail@plt+0x2c4>
   11668:	ldr	r1, [pc, #540]	; 1188c <__assert_fail@plt+0x4c8>
   1166c:	mov	r0, #0
   11670:	bl	11130 <dcgettext@plt>
   11674:	mov	r1, #0
   11678:	mov	r2, r0
   1167c:	mov	r0, r1
   11680:	bl	111c0 <error@plt>
   11684:	b	1156c <__assert_fail@plt+0x1a8>
   11688:	ldr	r1, [pc, #512]	; 11890 <__assert_fail@plt+0x4cc>
   1168c:	mov	r0, #0
   11690:	bl	11130 <dcgettext@plt>
   11694:	sub	r8, r8, #-1073741823	; 0xc0000001
   11698:	mov	r4, r0
   1169c:	ldr	r0, [r7, r8, lsl #2]
   116a0:	bl	16de8 <__assert_fail@plt+0x5a24>
   116a4:	mov	r1, #0
   116a8:	mov	r2, r4
   116ac:	mov	r3, r0
   116b0:	mov	r0, r1
   116b4:	bl	111c0 <error@plt>
   116b8:	b	1156c <__assert_fail@plt+0x1a8>
   116bc:	ldr	r3, [sp, #92]	; 0x5c
   116c0:	ldr	r0, [sp, #88]	; 0x58
   116c4:	str	r3, [sp, #28]
   116c8:	str	r0, [sp, #24]
   116cc:	bl	11e14 <__assert_fail@plt+0xa50>
   116d0:	str	r0, [sp, #56]	; 0x38
   116d4:	ldr	r0, [sp, #92]	; 0x5c
   116d8:	bl	11ddc <__assert_fail@plt+0xa18>
   116dc:	str	r0, [sp, #60]	; 0x3c
   116e0:	ldrb	r3, [sp, #44]	; 0x2c
   116e4:	tst	sl, r3
   116e8:	beq	117b0 <__assert_fail@plt+0x3ec>
   116ec:	ldr	r0, [pc, #416]	; 11894 <__assert_fail@plt+0x4d0>
   116f0:	bl	16df4 <__assert_fail@plt+0x5a30>
   116f4:	cmp	r0, #0
   116f8:	mov	r4, r0
   116fc:	str	r0, [sp, #48]	; 0x30
   11700:	bne	117b0 <__assert_fail@plt+0x3ec>
   11704:	bl	11268 <__errno_location@plt>
   11708:	mov	r2, #5
   1170c:	ldr	r1, [pc, #388]	; 11898 <__assert_fail@plt+0x4d4>
   11710:	ldr	r5, [r0]
   11714:	mov	r0, r4
   11718:	bl	11130 <dcgettext@plt>
   1171c:	ldr	r1, [pc, #376]	; 1189c <__assert_fail@plt+0x4d8>
   11720:	mov	r4, r0
   11724:	mov	r0, #4
   11728:	bl	16c04 <__assert_fail@plt+0x5840>
   1172c:	mov	r2, r4
   11730:	mov	r3, r0
   11734:	b	11834 <__assert_fail@plt+0x470>
   11738:	add	r3, r9, #20
   1173c:	str	r3, [sp]
   11740:	add	r2, sp, #28
   11744:	add	r3, r9, #16
   11748:	add	r1, sp, #24
   1174c:	ldr	r0, [r7, r0, lsl #2]
   11750:	bl	17134 <__assert_fail@plt+0x5d70>
   11754:	subs	r8, r0, #0
   11758:	beq	1177c <__assert_fail@plt+0x3b8>
   1175c:	ldr	r3, [fp]
   11760:	ldr	r0, [r7, r3, lsl #2]
   11764:	bl	16de8 <__assert_fail@plt+0x5a24>
   11768:	mov	r3, r8
   1176c:	ldr	r2, [pc, #272]	; 11884 <__assert_fail@plt+0x4c0>
   11770:	mov	r1, r4
   11774:	str	r0, [sp]
   11778:	b	115e0 <__assert_fail@plt+0x21c>
   1177c:	ldr	r3, [sp, #56]	; 0x38
   11780:	cmp	r3, #0
   11784:	bne	117a0 <__assert_fail@plt+0x3dc>
   11788:	ldr	r3, [sp, #60]	; 0x3c
   1178c:	cmp	r3, #0
   11790:	beq	117a0 <__assert_fail@plt+0x3dc>
   11794:	ldr	r0, [pc, #164]	; 11840 <__assert_fail@plt+0x47c>
   11798:	bl	17b60 <__assert_fail@plt+0x679c>
   1179c:	str	r0, [sp, #56]	; 0x38
   117a0:	ldr	r3, [r5]
   117a4:	add	r3, r3, #1
   117a8:	str	r3, [r5]
   117ac:	b	116e0 <__assert_fail@plt+0x31c>
   117b0:	ldr	r3, [sp, #36]	; 0x24
   117b4:	ldr	r0, [r5]
   117b8:	str	r3, [sp, #4]
   117bc:	ldr	r3, [sp, #32]
   117c0:	str	r9, [sp, #8]
   117c4:	str	r3, [sp]
   117c8:	ldr	r2, [sp, #24]
   117cc:	ldr	r3, [sp, #28]
   117d0:	orr	r1, r6, #1024	; 0x400
   117d4:	add	r0, r7, r0, lsl #2
   117d8:	bl	11e4c <__assert_fail@plt+0xa88>
   117dc:	eor	r0, r0, #1
   117e0:	uxtb	r0, r0
   117e4:	b	11500 <__assert_fail@plt+0x13c>
   117e8:	cmp	r3, #0
   117ec:	ble	1165c <__assert_fail@plt+0x298>
   117f0:	add	r1, sp, #64	; 0x40
   117f4:	mov	r0, r4
   117f8:	bl	18d98 <__assert_fail@plt+0x79d4>
   117fc:	cmp	r0, #0
   11800:	beq	116bc <__assert_fail@plt+0x2f8>
   11804:	bl	11268 <__errno_location@plt>
   11808:	mov	r2, #5
   1180c:	ldr	r1, [pc, #132]	; 11898 <__assert_fail@plt+0x4d4>
   11810:	ldr	r5, [r0]
   11814:	mov	r0, #0
   11818:	bl	11130 <dcgettext@plt>
   1181c:	mov	r1, r4
   11820:	mov	r6, r0
   11824:	mov	r0, #4
   11828:	bl	16c04 <__assert_fail@plt+0x5840>
   1182c:	mov	r2, r6
   11830:	mov	r3, r0
   11834:	mov	r1, r5
   11838:	mov	r0, #1
   1183c:	bl	111c0 <error@plt>
   11840:			; <UNDEFINED> instruction: 0x000196be
   11844:	muleq	r1, r1, r9
   11848:	andeq	r9, r1, lr, ror #17
   1184c:	andeq	r2, r1, ip, ror #19
   11850:	andeq	r8, r1, r4, lsr lr
   11854:	andeq	r9, r1, sp, asr #19
   11858:	ldrdeq	r9, [r1], -r6
   1185c:			; <UNDEFINED> instruction: 0x000199b0
   11860:	muleq	r2, ip, r1
   11864:			; <UNDEFINED> instruction: 0x000199bd
   11868:	andeq	fp, r2, r0, asr #2
   1186c:	andeq	r9, r1, sl, ror #17
   11870:	andeq	r8, r1, r4, lsl pc
   11874:	andeq	r0, r0, r1, lsl #2
   11878:	andeq	r0, r0, r3, lsl #2
   1187c:	andeq	fp, r2, r0, lsr #3
   11880:	andeq	fp, r2, r8, lsr #3
   11884:	andeq	r9, r1, r9, lsr #19
   11888:	muleq	r2, r0, r1
   1188c:	andeq	r9, r1, r0, lsl #20
   11890:	andeq	r9, r1, r0, lsl sl
   11894:			; <UNDEFINED> instruction: 0x0002b1b0
   11898:	andeq	r9, r1, r9, lsr #20
   1189c:	andeq	sl, r1, ip, asr r3
   118a0:	mov	fp, #0
   118a4:	mov	lr, #0
   118a8:	pop	{r1}		; (ldr r1, [sp], #4)
   118ac:	mov	r2, sp
   118b0:	push	{r2}		; (str r2, [sp, #-4]!)
   118b4:	push	{r0}		; (str r0, [sp, #-4]!)
   118b8:	ldr	ip, [pc, #16]	; 118d0 <__assert_fail@plt+0x50c>
   118bc:	push	{ip}		; (str ip, [sp, #-4]!)
   118c0:	ldr	r0, [pc, #12]	; 118d4 <__assert_fail@plt+0x510>
   118c4:	ldr	r3, [pc, #12]	; 118d8 <__assert_fail@plt+0x514>
   118c8:	bl	111e4 <__libc_start_main@plt>
   118cc:	bl	1137c <abort@plt>
   118d0:	andeq	r8, r1, ip, ror sp
   118d4:	ldrdeq	r1, [r1], -r0
   118d8:	andeq	r8, r1, ip, lsl sp
   118dc:	ldr	r3, [pc, #20]	; 118f8 <__assert_fail@plt+0x534>
   118e0:	ldr	r2, [pc, #20]	; 118fc <__assert_fail@plt+0x538>
   118e4:	add	r3, pc, r3
   118e8:	ldr	r2, [r3, r2]
   118ec:	cmp	r2, #0
   118f0:	bxeq	lr
   118f4:	b	111fc <__gmon_start__@plt>
   118f8:	andeq	r9, r1, r4, lsl r7
   118fc:	andeq	r0, r0, r4, lsr r1
   11900:	ldr	r3, [pc, #28]	; 11924 <__assert_fail@plt+0x560>
   11904:	ldr	r0, [pc, #28]	; 11928 <__assert_fail@plt+0x564>
   11908:	sub	r3, r3, r0
   1190c:	cmp	r3, #6
   11910:	bxls	lr
   11914:	ldr	r3, [pc, #16]	; 1192c <__assert_fail@plt+0x568>
   11918:	cmp	r3, #0
   1191c:	bxeq	lr
   11920:	bx	r3
   11924:	andeq	fp, r2, fp, lsl #3
   11928:	andeq	fp, r2, r8, lsl #3
   1192c:	andeq	r0, r0, r0
   11930:	ldr	r1, [pc, #36]	; 1195c <__assert_fail@plt+0x598>
   11934:	ldr	r0, [pc, #36]	; 11960 <__assert_fail@plt+0x59c>
   11938:	sub	r1, r1, r0
   1193c:	asr	r1, r1, #2
   11940:	add	r1, r1, r1, lsr #31
   11944:	asrs	r1, r1, #1
   11948:	bxeq	lr
   1194c:	ldr	r3, [pc, #16]	; 11964 <__assert_fail@plt+0x5a0>
   11950:	cmp	r3, #0
   11954:	bxeq	lr
   11958:	bx	r3
   1195c:	andeq	fp, r2, r8, lsl #3
   11960:	andeq	fp, r2, r8, lsl #3
   11964:	andeq	r0, r0, r0
   11968:	push	{r4, lr}
   1196c:	ldr	r4, [pc, #24]	; 1198c <__assert_fail@plt+0x5c8>
   11970:	ldrb	r3, [r4]
   11974:	cmp	r3, #0
   11978:	popne	{r4, pc}
   1197c:	bl	11900 <__assert_fail@plt+0x53c>
   11980:	mov	r3, #1
   11984:	strb	r3, [r4]
   11988:	pop	{r4, pc}
   1198c:	andeq	fp, r2, r4, lsr #3
   11990:	ldr	r0, [pc, #40]	; 119c0 <__assert_fail@plt+0x5fc>
   11994:	ldr	r3, [r0]
   11998:	cmp	r3, #0
   1199c:	bne	119a4 <__assert_fail@plt+0x5e0>
   119a0:	b	11930 <__assert_fail@plt+0x56c>
   119a4:	ldr	r3, [pc, #24]	; 119c4 <__assert_fail@plt+0x600>
   119a8:	cmp	r3, #0
   119ac:	beq	119a0 <__assert_fail@plt+0x5dc>
   119b0:	push	{r4, lr}
   119b4:	blx	r3
   119b8:	pop	{r4, lr}
   119bc:	b	11930 <__assert_fail@plt+0x56c>
   119c0:	andeq	sl, r2, r4, lsl pc
   119c4:	andeq	r0, r0, r0
   119c8:	subs	r4, r0, #0
   119cc:	push	{r7, lr}
   119d0:	sub	sp, sp, #64	; 0x40
   119d4:	ldr	r6, [pc, #716]	; 11ca8 <__assert_fail@plt+0x8e4>
   119d8:	beq	11a10 <__assert_fail@plt+0x64c>
   119dc:	ldr	r3, [pc, #712]	; 11cac <__assert_fail@plt+0x8e8>
   119e0:	mov	r2, #5
   119e4:	ldr	r1, [pc, #708]	; 11cb0 <__assert_fail@plt+0x8ec>
   119e8:	mov	r0, #0
   119ec:	ldr	r5, [r3]
   119f0:	bl	11130 <dcgettext@plt>
   119f4:	ldr	r3, [r6]
   119f8:	mov	r1, #1
   119fc:	mov	r2, r0
   11a00:	mov	r0, r5
   11a04:	bl	112a4 <__fprintf_chk@plt>
   11a08:	mov	r0, r4
   11a0c:	bl	11220 <exit@plt>
   11a10:	mov	r2, #5
   11a14:	ldr	r1, [pc, #664]	; 11cb4 <__assert_fail@plt+0x8f0>
   11a18:	bl	11130 <dcgettext@plt>
   11a1c:	ldr	r3, [r6]
   11a20:	ldr	r5, [pc, #656]	; 11cb8 <__assert_fail@plt+0x8f4>
   11a24:	mov	r2, r3
   11a28:	ldr	r9, [pc, #652]	; 11cbc <__assert_fail@plt+0x8f8>
   11a2c:	add	r7, sp, #8
   11a30:	mov	r1, r0
   11a34:	mov	r0, #1
   11a38:	bl	1128c <__printf_chk@plt>
   11a3c:	mov	r2, #5
   11a40:	ldr	r1, [pc, #632]	; 11cc0 <__assert_fail@plt+0x8fc>
   11a44:	mov	r0, r4
   11a48:	bl	11130 <dcgettext@plt>
   11a4c:	ldr	r1, [r5]
   11a50:	bl	1107c <fputs_unlocked@plt>
   11a54:	mov	r2, #5
   11a58:	ldr	r1, [pc, #612]	; 11cc4 <__assert_fail@plt+0x900>
   11a5c:	mov	r0, r4
   11a60:	bl	11130 <dcgettext@plt>
   11a64:	ldr	r1, [r5]
   11a68:	bl	1107c <fputs_unlocked@plt>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #592]	; 11cc8 <__assert_fail@plt+0x904>
   11a74:	mov	r0, r4
   11a78:	bl	11130 <dcgettext@plt>
   11a7c:	ldr	r1, [r5]
   11a80:	bl	1107c <fputs_unlocked@plt>
   11a84:	mov	r2, #5
   11a88:	ldr	r1, [pc, #572]	; 11ccc <__assert_fail@plt+0x908>
   11a8c:	mov	r0, r4
   11a90:	bl	11130 <dcgettext@plt>
   11a94:	ldr	r1, [r5]
   11a98:	bl	1107c <fputs_unlocked@plt>
   11a9c:	mov	r2, #5
   11aa0:	ldr	r1, [pc, #552]	; 11cd0 <__assert_fail@plt+0x90c>
   11aa4:	mov	r0, r4
   11aa8:	bl	11130 <dcgettext@plt>
   11aac:	ldr	r1, [r5]
   11ab0:	bl	1107c <fputs_unlocked@plt>
   11ab4:	mov	r2, #5
   11ab8:	ldr	r1, [pc, #532]	; 11cd4 <__assert_fail@plt+0x910>
   11abc:	mov	r0, r4
   11ac0:	bl	11130 <dcgettext@plt>
   11ac4:	ldr	r1, [r5]
   11ac8:	bl	1107c <fputs_unlocked@plt>
   11acc:	mov	r2, #5
   11ad0:	ldr	r1, [pc, #512]	; 11cd8 <__assert_fail@plt+0x914>
   11ad4:	mov	r0, r4
   11ad8:	bl	11130 <dcgettext@plt>
   11adc:	ldr	r1, [r5]
   11ae0:	bl	1107c <fputs_unlocked@plt>
   11ae4:	mov	r2, #5
   11ae8:	ldr	r1, [pc, #492]	; 11cdc <__assert_fail@plt+0x918>
   11aec:	mov	r0, r4
   11af0:	bl	11130 <dcgettext@plt>
   11af4:	ldr	r1, [r5]
   11af8:	bl	1107c <fputs_unlocked@plt>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #472]	; 11ce0 <__assert_fail@plt+0x91c>
   11b04:	mov	r0, r4
   11b08:	bl	11130 <dcgettext@plt>
   11b0c:	ldr	r1, [r5]
   11b10:	bl	1107c <fputs_unlocked@plt>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #452]	; 11ce4 <__assert_fail@plt+0x920>
   11b1c:	mov	r0, r4
   11b20:	bl	11130 <dcgettext@plt>
   11b24:	ldr	r1, [r5]
   11b28:	bl	1107c <fputs_unlocked@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #432]	; 11ce8 <__assert_fail@plt+0x924>
   11b34:	mov	r0, r4
   11b38:	bl	11130 <dcgettext@plt>
   11b3c:	ldr	r1, [r5]
   11b40:	bl	1107c <fputs_unlocked@plt>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #412]	; 11cec <__assert_fail@plt+0x928>
   11b4c:	mov	r0, r4
   11b50:	bl	11130 <dcgettext@plt>
   11b54:	ldr	r1, [r5]
   11b58:	bl	1107c <fputs_unlocked@plt>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #392]	; 11cf0 <__assert_fail@plt+0x92c>
   11b64:	mov	r0, r4
   11b68:	bl	11130 <dcgettext@plt>
   11b6c:	ldr	r3, [r6]
   11b70:	mov	r6, r4
   11b74:	str	r3, [sp]
   11b78:	mov	r2, r3
   11b7c:	mov	r1, r0
   11b80:	mov	r0, #1
   11b84:	bl	1128c <__printf_chk@plt>
   11b88:	ldr	lr, [pc, #356]	; 11cf4 <__assert_fail@plt+0x930>
   11b8c:	add	ip, sp, #8
   11b90:	ldm	lr!, {r0, r1, r2, r3}
   11b94:	stmia	ip!, {r0, r1, r2, r3}
   11b98:	ldm	lr!, {r0, r1, r2, r3}
   11b9c:	stmia	ip!, {r0, r1, r2, r3}
   11ba0:	ldm	lr!, {r0, r1, r2, r3}
   11ba4:	stmia	ip!, {r0, r1, r2, r3}
   11ba8:	ldm	lr, {r0, r1}
   11bac:	stm	ip, {r0, r1}
   11bb0:	ldr	r1, [r7, r6]
   11bb4:	add	r8, r7, r6
   11bb8:	cmp	r1, #0
   11bbc:	bne	11c60 <__assert_fail@plt+0x89c>
   11bc0:	ldr	r6, [r8, #4]
   11bc4:	ldr	r7, [pc, #240]	; 11cbc <__assert_fail@plt+0x8f8>
   11bc8:	cmp	r6, #0
   11bcc:	mov	r2, #5
   11bd0:	ldr	r1, [pc, #288]	; 11cf8 <__assert_fail@plt+0x934>
   11bd4:	mov	r0, #0
   11bd8:	moveq	r6, r7
   11bdc:	bl	11130 <dcgettext@plt>
   11be0:	ldr	r3, [pc, #276]	; 11cfc <__assert_fail@plt+0x938>
   11be4:	ldr	r2, [pc, #276]	; 11d00 <__assert_fail@plt+0x93c>
   11be8:	mov	r1, r0
   11bec:	mov	r0, #1
   11bf0:	bl	1128c <__printf_chk@plt>
   11bf4:	mov	r1, #0
   11bf8:	mov	r0, #5
   11bfc:	bl	112d4 <setlocale@plt>
   11c00:	cmp	r0, #0
   11c04:	bne	11c78 <__assert_fail@plt+0x8b4>
   11c08:	mov	r2, #5
   11c0c:	ldr	r1, [pc, #240]	; 11d04 <__assert_fail@plt+0x940>
   11c10:	mov	r0, #0
   11c14:	bl	11130 <dcgettext@plt>
   11c18:	ldr	r3, [pc, #156]	; 11cbc <__assert_fail@plt+0x8f8>
   11c1c:	ldr	r2, [pc, #216]	; 11cfc <__assert_fail@plt+0x938>
   11c20:	mov	r1, r0
   11c24:	mov	r0, #1
   11c28:	bl	1128c <__printf_chk@plt>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #208]	; 11d08 <__assert_fail@plt+0x944>
   11c34:	mov	r0, #0
   11c38:	bl	11130 <dcgettext@plt>
   11c3c:	ldr	r2, [pc, #200]	; 11d0c <__assert_fail@plt+0x948>
   11c40:	cmp	r6, r7
   11c44:	ldr	r3, [pc, #196]	; 11d10 <__assert_fail@plt+0x94c>
   11c48:	moveq	r3, r2
   11c4c:	mov	r2, r6
   11c50:	mov	r1, r0
   11c54:	mov	r0, #1
   11c58:	bl	1128c <__printf_chk@plt>
   11c5c:	b	11a08 <__assert_fail@plt+0x644>
   11c60:	mov	r0, r9
   11c64:	bl	110a0 <strcmp@plt>
   11c68:	add	r6, r6, #8
   11c6c:	cmp	r0, #0
   11c70:	bne	11bb0 <__assert_fail@plt+0x7ec>
   11c74:	b	11bc0 <__assert_fail@plt+0x7fc>
   11c78:	mov	r2, #3
   11c7c:	ldr	r1, [pc, #144]	; 11d14 <__assert_fail@plt+0x950>
   11c80:	bl	11370 <strncmp@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11c08 <__assert_fail@plt+0x844>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #128]	; 11d18 <__assert_fail@plt+0x954>
   11c94:	mov	r0, #0
   11c98:	bl	11130 <dcgettext@plt>
   11c9c:	ldr	r1, [r5]
   11ca0:	bl	1107c <fputs_unlocked@plt>
   11ca4:	b	11c08 <__assert_fail@plt+0x844>
   11ca8:	andeq	fp, r2, r8, asr #3
   11cac:	muleq	r2, r8, r1
   11cb0:	andeq	r8, r1, sl, lsl pc
   11cb4:	andeq	r8, r1, r1, asr #30
   11cb8:	muleq	r2, ip, r1
   11cbc:	andeq	r8, r1, r4, lsl pc
   11cc0:	andeq	r8, r1, r2, lsr #31
   11cc4:	andeq	r9, r1, r3, lsr r0
   11cc8:	strdeq	r9, [r1], -ip
   11ccc:	andeq	r9, r1, r3, ror #3
   11cd0:	andeq	r9, r1, sl, asr r2
   11cd4:	andeq	r9, r1, lr, lsr #7
   11cd8:	andeq	r9, r1, lr, lsr #8
   11cdc:	andeq	r9, r1, r7, lsr #9
   11ce0:	andeq	r9, r1, lr, ror #9
   11ce4:			; <UNDEFINED> instruction: 0x000196bf
   11ce8:	andeq	r9, r1, ip, ror #13
   11cec:	andeq	r9, r1, r2, lsr #14
   11cf0:	andeq	r9, r1, r2, ror #15
   11cf4:	strdeq	r8, [r1], -ip
   11cf8:	andeq	r9, r1, fp, lsr #17
   11cfc:	andeq	r9, r1, r2, asr #17
   11d00:	andeq	r9, r1, sl, ror #17
   11d04:	andeq	r9, r1, r3, asr #18
   11d08:	andeq	r9, r1, lr, asr r9
   11d0c:	andeq	r9, r1, r4, ror #20
   11d10:			; <UNDEFINED> instruction: 0x000196be
   11d14:	strdeq	r9, [r1], -r8
   11d18:	strdeq	r9, [r1], -ip
   11d1c:	push	{r4, r5, r6, lr}
   11d20:	subs	r5, r0, #0
   11d24:	beq	11d74 <__assert_fail@plt+0x9b0>
   11d28:	cmp	r1, #0
   11d2c:	beq	11d80 <__assert_fail@plt+0x9bc>
   11d30:	mov	r6, r1
   11d34:	bl	11238 <strlen@plt>
   11d38:	mov	r4, r0
   11d3c:	mov	r0, r6
   11d40:	bl	11238 <strlen@plt>
   11d44:	add	r0, r4, r0
   11d48:	add	r0, r0, #2
   11d4c:	bl	176e8 <__assert_fail@plt+0x6324>
   11d50:	mov	r1, r5
   11d54:	mov	r4, r0
   11d58:	bl	11118 <stpcpy@plt>
   11d5c:	ldr	r1, [pc, #44]	; 11d90 <__assert_fail@plt+0x9cc>
   11d60:	bl	11118 <stpcpy@plt>
   11d64:	mov	r1, r6
   11d68:	bl	11190 <strcpy@plt>
   11d6c:	mov	r0, r4
   11d70:	pop	{r4, r5, r6, pc}
   11d74:	cmp	r1, #0
   11d78:	beq	11d88 <__assert_fail@plt+0x9c4>
   11d7c:	mov	r0, r1
   11d80:	pop	{r4, r5, r6, lr}
   11d84:	b	17b60 <__assert_fail@plt+0x679c>
   11d88:	mov	r4, r1
   11d8c:	b	11d6c <__assert_fail@plt+0x9a8>
   11d90:	andeq	r9, r1, r0, lsl #22
   11d94:	mov	r3, #2
   11d98:	str	r3, [r0]
   11d9c:	mov	r2, #1
   11da0:	mov	r3, #0
   11da4:	str	r3, [r0, #8]
   11da8:	strb	r2, [r0, #12]
   11dac:	strb	r3, [r0, #4]
   11db0:	strb	r3, [r0, #13]
   11db4:	str	r3, [r0, #16]
   11db8:	str	r3, [r0, #20]
   11dbc:	bx	lr
   11dc0:	push	{r4, lr}
   11dc4:	mov	r4, r0
   11dc8:	ldr	r0, [r0, #16]
   11dcc:	bl	12ad0 <__assert_fail@plt+0x170c>
   11dd0:	ldr	r0, [r4, #20]
   11dd4:	pop	{r4, lr}
   11dd8:	b	12ad0 <__assert_fail@plt+0x170c>
   11ddc:	push	{r4, lr}
   11de0:	sub	sp, sp, #24
   11de4:	mov	r4, r0
   11de8:	bl	113ac <getgrgid@plt>
   11dec:	cmp	r0, #0
   11df0:	ldrne	r0, [r0]
   11df4:	bne	11e08 <__assert_fail@plt+0xa44>
   11df8:	mov	r2, sp
   11dfc:	mov	r0, r4
   11e00:	mov	r1, #0
   11e04:	bl	156cc <__assert_fail@plt+0x4308>
   11e08:	bl	17b60 <__assert_fail@plt+0x679c>
   11e0c:	add	sp, sp, #24
   11e10:	pop	{r4, pc}
   11e14:	push	{r4, lr}
   11e18:	sub	sp, sp, #24
   11e1c:	mov	r4, r0
   11e20:	bl	110ac <getpwuid@plt>
   11e24:	cmp	r0, #0
   11e28:	ldrne	r0, [r0]
   11e2c:	bne	11e40 <__assert_fail@plt+0xa7c>
   11e30:	mov	r2, sp
   11e34:	mov	r0, r4
   11e38:	mov	r1, #0
   11e3c:	bl	156cc <__assert_fail@plt+0x4308>
   11e40:	bl	17b60 <__assert_fail@plt+0x679c>
   11e44:	add	sp, sp, #24
   11e48:	pop	{r4, pc}
   11e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e50:	sub	sp, sp, #260	; 0x104
   11e54:	str	r2, [sp, #28]
   11e58:	add	r2, sp, #296	; 0x128
   11e5c:	str	r3, [sp, #36]	; 0x24
   11e60:	ldm	r2, {r2, r3, r8}
   11e64:	cmn	r2, #1
   11e68:	cmneq	r3, #1
   11e6c:	movne	r3, #1
   11e70:	moveq	r3, #0
   11e74:	movne	r3, #0
   11e78:	bne	11e98 <__assert_fail@plt+0xad4>
   11e7c:	ldrb	r2, [r8, #12]
   11e80:	cmp	r2, #0
   11e84:	bne	11e98 <__assert_fail@plt+0xad4>
   11e88:	ldr	r3, [r8]
   11e8c:	cmp	r3, #2
   11e90:	moveq	r3, #8
   11e94:	movne	r3, #0
   11e98:	orr	r1, r3, r1
   11e9c:	mov	r2, #0
   11ea0:	bl	17bbc <__assert_fail@plt+0x67f8>
   11ea4:	mov	r5, #0
   11ea8:	mov	r3, #1
   11eac:	str	r3, [sp, #24]
   11eb0:	str	r0, [sp, #20]
   11eb4:	ldr	r0, [sp, #20]
   11eb8:	bl	1414c <__assert_fail@plt+0x2d88>
   11ebc:	subs	fp, r0, #0
   11ec0:	bne	11f54 <__assert_fail@plt+0xb90>
   11ec4:	bl	11268 <__errno_location@plt>
   11ec8:	ldr	r5, [r0]
   11ecc:	mov	r4, r0
   11ed0:	cmp	r5, #0
   11ed4:	beq	11f0c <__assert_fail@plt+0xb48>
   11ed8:	ldrb	r3, [r8, #13]
   11edc:	cmp	r3, #0
   11ee0:	str	r3, [sp, #24]
   11ee4:	strne	fp, [sp, #24]
   11ee8:	bne	11f0c <__assert_fail@plt+0xb48>
   11eec:	mov	r2, #5
   11ef0:	ldr	r1, [pc, #2672]	; 12968 <__assert_fail@plt+0x15a4>
   11ef4:	mov	r0, r3
   11ef8:	bl	11130 <dcgettext@plt>
   11efc:	mov	r1, r5
   11f00:	mov	r2, r0
   11f04:	ldr	r0, [sp, #24]
   11f08:	bl	111c0 <error@plt>
   11f0c:	ldr	r0, [sp, #20]
   11f10:	bl	14034 <__assert_fail@plt+0x2c70>
   11f14:	cmp	r0, #0
   11f18:	beq	11f48 <__assert_fail@plt+0xb84>
   11f1c:	mov	r2, #5
   11f20:	ldr	r1, [pc, #2628]	; 1296c <__assert_fail@plt+0x15a8>
   11f24:	mov	r0, #0
   11f28:	ldr	r4, [r4]
   11f2c:	bl	11130 <dcgettext@plt>
   11f30:	mov	r1, r4
   11f34:	mov	r2, r0
   11f38:	mov	r0, #0
   11f3c:	bl	111c0 <error@plt>
   11f40:	mov	r3, #0
   11f44:	str	r3, [sp, #24]
   11f48:	ldr	r0, [sp, #24]
   11f4c:	add	sp, sp, #260	; 0x104
   11f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f54:	ldr	r3, [fp, #28]
   11f58:	str	r3, [sp, #12]
   11f5c:	ldrh	r3, [fp, #56]	; 0x38
   11f60:	sub	r3, r3, #1
   11f64:	cmp	r3, #9
   11f68:	ldrls	pc, [pc, r3, lsl #2]
   11f6c:	b	120c8 <__assert_fail@plt+0xd04>
   11f70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11f74:	andeq	r2, r1, r4, ror r2
   11f78:	andeq	r2, r1, r8, asr #1
   11f7c:	andeq	r2, r1, r8, asr r2
   11f80:	andeq	r2, r1, r8, asr #1
   11f84:	strheq	r2, [r1], -r8
   11f88:	andeq	r2, r1, ip, lsl #4
   11f8c:	andeq	r2, r1, r8, asr #1
   11f90:	andeq	r2, r1, r8, asr #1
   11f94:	andeq	r2, r1, ip, lsr #3
   11f98:	ldrb	r9, [r8, #4]
   11f9c:	cmp	r9, #0
   11fa0:	beq	120c8 <__assert_fail@plt+0xd04>
   11fa4:	ldr	ip, [r8, #8]
   11fa8:	cmp	ip, #0
   11fac:	beq	12058 <__assert_fail@plt+0xc94>
   11fb0:	ldrd	r0, [fp, #160]	; 0xa0
   11fb4:	ldrd	r2, [ip]
   11fb8:	cmp	r1, r3
   11fbc:	cmpeq	r0, r2
   11fc0:	bne	12058 <__assert_fail@plt+0xc94>
   11fc4:	ldrd	r2, [fp, #64]	; 0x40
   11fc8:	ldrd	r0, [ip, #8]
   11fcc:	cmp	r3, r1
   11fd0:	cmpeq	r2, r0
   11fd4:	bne	12058 <__assert_fail@plt+0xc94>
   11fd8:	ldr	r1, [pc, #2448]	; 12970 <__assert_fail@plt+0x15ac>
   11fdc:	ldr	r0, [sp, #12]
   11fe0:	bl	110a0 <strcmp@plt>
   11fe4:	mov	r2, #5
   11fe8:	subs	r4, r0, #0
   11fec:	bne	12068 <__assert_fail@plt+0xca4>
   11ff0:	ldr	r1, [pc, #2428]	; 12974 <__assert_fail@plt+0x15b0>
   11ff4:	bl	11130 <dcgettext@plt>
   11ff8:	ldr	r1, [sp, #12]
   11ffc:	mov	r6, r0
   12000:	mov	r0, #4
   12004:	bl	16c04 <__assert_fail@plt+0x5840>
   12008:	mov	r2, r6
   1200c:	mov	r1, r5
   12010:	mov	r3, r0
   12014:	mov	r0, r4
   12018:	bl	111c0 <error@plt>
   1201c:	mov	r2, #5
   12020:	ldr	r1, [pc, #2384]	; 12978 <__assert_fail@plt+0x15b4>
   12024:	mov	r0, r5
   12028:	bl	11130 <dcgettext@plt>
   1202c:	mov	r1, r5
   12030:	mov	r2, r0
   12034:	mov	r0, #0
   12038:	bl	111c0 <error@plt>
   1203c:	mov	r2, #4
   12040:	mov	r1, fp
   12044:	ldr	r0, [sp, #20]
   12048:	bl	14714 <__assert_fail@plt+0x3350>
   1204c:	ldr	r0, [sp, #20]
   12050:	bl	1414c <__assert_fail@plt+0x2d88>
   12054:	mov	r9, r5
   12058:	ldr	r3, [sp, #24]
   1205c:	and	r3, r3, r9
   12060:	str	r3, [sp, #24]
   12064:	b	11eb4 <__assert_fail@plt+0xaf0>
   12068:	ldr	r1, [pc, #2316]	; 1297c <__assert_fail@plt+0x15b8>
   1206c:	mov	r0, r5
   12070:	bl	11130 <dcgettext@plt>
   12074:	ldr	r2, [sp, #12]
   12078:	mov	r1, #4
   1207c:	mov	r4, r0
   12080:	mov	r0, r5
   12084:	bl	16b98 <__assert_fail@plt+0x57d4>
   12088:	ldr	r2, [pc, #2272]	; 12970 <__assert_fail@plt+0x15ac>
   1208c:	mov	r1, #4
   12090:	mov	r6, r0
   12094:	mov	r0, #1
   12098:	bl	16b98 <__assert_fail@plt+0x57d4>
   1209c:	mov	r3, r6
   120a0:	mov	r2, r4
   120a4:	mov	r1, r5
   120a8:	str	r0, [sp]
   120ac:	mov	r0, #0
   120b0:	bl	111c0 <error@plt>
   120b4:	b	1201c <__assert_fail@plt+0xc58>
   120b8:	ldrb	r3, [r8, #4]
   120bc:	cmp	r3, #0
   120c0:	moveq	r9, #1
   120c4:	beq	12058 <__assert_fail@plt+0xc94>
   120c8:	ldr	r3, [fp, #24]
   120cc:	ldr	r2, [sp, #296]	; 0x128
   120d0:	str	r3, [sp, #32]
   120d4:	ldr	r3, [sp, #300]	; 0x12c
   120d8:	add	r4, fp, #64	; 0x40
   120dc:	cmn	r3, #1
   120e0:	cmneq	r2, #1
   120e4:	moveq	r7, #1
   120e8:	movne	r7, #0
   120ec:	ldrb	r3, [r8, #12]
   120f0:	bne	12118 <__assert_fail@plt+0xd54>
   120f4:	ldr	r2, [r8]
   120f8:	cmp	r2, #2
   120fc:	bne	12118 <__assert_fail@plt+0xd54>
   12100:	ldr	r2, [r8, #8]
   12104:	cmp	r2, #0
   12108:	bne	12118 <__assert_fail@plt+0xd54>
   1210c:	cmp	r3, #0
   12110:	moveq	r6, r7
   12114:	beq	127ec <__assert_fail@plt+0x1428>
   12118:	cmp	r3, #0
   1211c:	beq	127a0 <__assert_fail@plt+0x13dc>
   12120:	ldr	r3, [fp, #80]	; 0x50
   12124:	and	r3, r3, #61440	; 0xf000
   12128:	cmp	r3, #40960	; 0xa000
   1212c:	bne	127a0 <__assert_fail@plt+0x13dc>
   12130:	ldr	r0, [sp, #20]
   12134:	mov	r3, r5
   12138:	add	r2, sp, #48	; 0x30
   1213c:	ldr	r1, [sp, #32]
   12140:	ldr	r0, [r0, #32]
   12144:	bl	18dc8 <__assert_fail@plt+0x7a04>
   12148:	cmp	r0, #0
   1214c:	beq	1279c <__assert_fail@plt+0x13d8>
   12150:	ldrb	r9, [r8, #13]
   12154:	cmp	r9, #0
   12158:	addne	r4, sp, #48	; 0x30
   1215c:	movne	r9, r5
   12160:	bne	121a4 <__assert_fail@plt+0xde0>
   12164:	bl	11268 <__errno_location@plt>
   12168:	mov	r2, #5
   1216c:	ldr	r1, [pc, #2060]	; 12980 <__assert_fail@plt+0x15bc>
   12170:	ldr	r4, [r0]
   12174:	mov	r0, r5
   12178:	bl	11130 <dcgettext@plt>
   1217c:	ldr	r1, [sp, #12]
   12180:	mov	r6, r0
   12184:	mov	r0, #4
   12188:	bl	16c04 <__assert_fail@plt+0x5840>
   1218c:	mov	r1, r4
   12190:	mov	r2, r6
   12194:	add	r4, sp, #48	; 0x30
   12198:	mov	r3, r0
   1219c:	mov	r0, r5
   121a0:	bl	111c0 <error@plt>
   121a4:	mov	r6, r5
   121a8:	b	127e4 <__assert_fail@plt+0x1420>
   121ac:	ldr	r3, [fp, #48]	; 0x30
   121b0:	cmp	r3, #0
   121b4:	bne	121d0 <__assert_fail@plt+0xe0c>
   121b8:	ldr	r3, [fp, #16]
   121bc:	cmp	r3, #0
   121c0:	moveq	r9, #1
   121c4:	streq	r9, [fp, #16]
   121c8:	moveq	r2, r9
   121cc:	beq	12924 <__assert_fail@plt+0x1560>
   121d0:	ldrb	r3, [r8, #13]
   121d4:	cmp	r3, #0
   121d8:	bne	12240 <__assert_fail@plt+0xe7c>
   121dc:	ldr	r4, [fp, #32]
   121e0:	ldr	r1, [pc, #1948]	; 12984 <__assert_fail@plt+0x15c0>
   121e4:	mov	r2, #5
   121e8:	mov	r0, r5
   121ec:	bl	11130 <dcgettext@plt>
   121f0:	ldr	r1, [sp, #12]
   121f4:	mov	r6, r0
   121f8:	mov	r0, #4
   121fc:	bl	16c04 <__assert_fail@plt+0x5840>
   12200:	mov	r2, r6
   12204:	mov	r3, r0
   12208:	b	12234 <__assert_fail@plt+0xe70>
   1220c:	ldrb	r3, [r8, #13]
   12210:	cmp	r3, #0
   12214:	bne	12240 <__assert_fail@plt+0xe7c>
   12218:	ldr	r2, [sp, #12]
   1221c:	mov	r1, #3
   12220:	mov	r0, r5
   12224:	ldr	r4, [fp, #32]
   12228:	bl	16ca8 <__assert_fail@plt+0x58e4>
   1222c:	ldr	r2, [pc, #1876]	; 12988 <__assert_fail@plt+0x15c4>
   12230:	mov	r3, r0
   12234:	mov	r1, r4
   12238:	mov	r0, r5
   1223c:	bl	111c0 <error@plt>
   12240:	mov	r4, r5
   12244:	mov	r6, r5
   12248:	mov	r3, #1
   1224c:	str	r3, [sp, #16]
   12250:	mov	r9, r5
   12254:	b	123f4 <__assert_fail@plt+0x1030>
   12258:	ldrb	r3, [r8, #13]
   1225c:	cmp	r3, #0
   12260:	bne	12240 <__assert_fail@plt+0xe7c>
   12264:	ldr	r4, [fp, #32]
   12268:	mov	r2, #5
   1226c:	ldr	r1, [pc, #1816]	; 1298c <__assert_fail@plt+0x15c8>
   12270:	b	121e8 <__assert_fail@plt+0xe24>
   12274:	mov	r1, fp
   12278:	ldr	r0, [sp, #20]
   1227c:	bl	17c04 <__assert_fail@plt+0x6840>
   12280:	cmp	r0, #0
   12284:	beq	120c8 <__assert_fail@plt+0xd04>
   12288:	mov	r2, #5
   1228c:	ldr	r1, [pc, #1788]	; 12990 <__assert_fail@plt+0x15cc>
   12290:	mov	r0, r5
   12294:	bl	11130 <dcgettext@plt>
   12298:	ldr	r2, [sp, #12]
   1229c:	mov	r1, #3
   122a0:	mov	r4, r0
   122a4:	mov	r0, r5
   122a8:	bl	16ca8 <__assert_fail@plt+0x58e4>
   122ac:	mov	r2, r4
   122b0:	mov	r1, r5
   122b4:	mov	r3, r0
   122b8:	mov	r0, #0
   122bc:	bl	111c0 <error@plt>
   122c0:	b	12054 <__assert_fail@plt+0xc90>
   122c4:	ldr	r1, [pc, #1712]	; 1297c <__assert_fail@plt+0x15b8>
   122c8:	mov	r0, r5
   122cc:	bl	11130 <dcgettext@plt>
   122d0:	ldr	r2, [sp, #12]
   122d4:	mov	r1, #4
   122d8:	mov	r4, r0
   122dc:	mov	r0, r5
   122e0:	bl	16b98 <__assert_fail@plt+0x57d4>
   122e4:	ldr	r2, [pc, #1668]	; 12970 <__assert_fail@plt+0x15ac>
   122e8:	mov	r1, #4
   122ec:	mov	r6, r0
   122f0:	mov	r0, #1
   122f4:	bl	16b98 <__assert_fail@plt+0x57d4>
   122f8:	mov	r3, r6
   122fc:	mov	r2, r4
   12300:	mov	r1, r5
   12304:	str	r0, [sp]
   12308:	mov	r0, #0
   1230c:	bl	111c0 <error@plt>
   12310:	b	12888 <__assert_fail@plt+0x14c4>
   12314:	cmp	r6, #0
   12318:	moveq	r3, #1
   1231c:	streq	r3, [sp, #16]
   12320:	beq	123f4 <__assert_fail@plt+0x1030>
   12324:	ldrb	r3, [r8, #12]
   12328:	cmp	r3, #0
   1232c:	str	r3, [sp, #16]
   12330:	bne	12510 <__assert_fail@plt+0x114c>
   12334:	ldr	r0, [sp, #20]
   12338:	mov	r3, #256	; 0x100
   1233c:	str	r3, [sp]
   12340:	ldr	r2, [sp, #28]
   12344:	ldr	r3, [sp, #36]	; 0x24
   12348:	ldr	r1, [sp, #32]
   1234c:	ldr	r0, [r0, #32]
   12350:	bl	11340 <fchownat@plt>
   12354:	cmp	r0, #0
   12358:	moveq	r7, #1
   1235c:	movne	r7, #0
   12360:	streq	r6, [sp, #16]
   12364:	beq	12384 <__assert_fail@plt+0xfc0>
   12368:	bl	11268 <__errno_location@plt>
   1236c:	ldr	r3, [r0]
   12370:	cmp	r3, #95	; 0x5f
   12374:	moveq	r7, r6
   12378:	moveq	r3, #0
   1237c:	movne	r3, r6
   12380:	str	r3, [sp, #16]
   12384:	eor	sl, r7, #1
   12388:	and	sl, sl, r6
   1238c:	ands	sl, sl, #255	; 0xff
   12390:	moveq	r9, r7
   12394:	beq	123f4 <__assert_fail@plt+0x1030>
   12398:	ldrb	r6, [r8, #13]
   1239c:	cmp	r6, #0
   123a0:	bne	12250 <__assert_fail@plt+0xe8c>
   123a4:	bl	11268 <__errno_location@plt>
   123a8:	ldr	r3, [sp, #28]
   123ac:	mov	r2, #5
   123b0:	cmn	r3, #1
   123b4:	ldrne	r1, [pc, #1496]	; 12994 <__assert_fail@plt+0x15d0>
   123b8:	ldreq	r1, [pc, #1496]	; 12998 <__assert_fail@plt+0x15d4>
   123bc:	ldr	r7, [r0]
   123c0:	mov	r0, r5
   123c4:	bl	11130 <dcgettext@plt>
   123c8:	ldr	r1, [sp, #12]
   123cc:	mov	r9, r0
   123d0:	mov	r0, #4
   123d4:	bl	16c04 <__assert_fail@plt+0x5840>
   123d8:	mov	r2, r9
   123dc:	mov	r1, r7
   123e0:	mov	r9, r6
   123e4:	mov	r6, sl
   123e8:	mov	r3, r0
   123ec:	mov	r0, r5
   123f0:	bl	111c0 <error@plt>
   123f4:	ldr	r2, [r8]
   123f8:	cmp	r2, #2
   123fc:	beq	12914 <__assert_fail@plt+0x1550>
   12400:	ldr	r3, [sp, #16]
   12404:	and	r6, r6, r9
   12408:	and	r6, r6, r3
   1240c:	tst	r6, #255	; 0xff
   12410:	beq	126e4 <__assert_fail@plt+0x1320>
   12414:	ldr	r3, [sp, #28]
   12418:	cmn	r3, #1
   1241c:	beq	12434 <__assert_fail@plt+0x1070>
   12420:	ldr	r3, [r4, #24]
   12424:	ldr	r1, [sp, #28]
   12428:	cmp	r1, r3
   1242c:	movne	r3, #1
   12430:	bne	12450 <__assert_fail@plt+0x108c>
   12434:	ldr	r3, [sp, #36]	; 0x24
   12438:	cmn	r3, #1
   1243c:	beq	126e4 <__assert_fail@plt+0x1320>
   12440:	ldr	r3, [r4, #28]
   12444:	ldr	r1, [sp, #36]	; 0x24
   12448:	subs	r3, r3, r1
   1244c:	movne	r3, #1
   12450:	cmp	r2, #0
   12454:	movne	r2, r3
   12458:	orreq	r2, r3, #1
   1245c:	cmp	r2, #0
   12460:	beq	12914 <__assert_fail@plt+0x1550>
   12464:	cmp	r9, #0
   12468:	beq	12960 <__assert_fail@plt+0x159c>
   1246c:	ldr	r2, [sp, #16]
   12470:	cmp	r2, #0
   12474:	beq	128ac <__assert_fail@plt+0x14e8>
   12478:	cmp	r3, #0
   1247c:	movne	r3, #2
   12480:	moveq	r3, #4
   12484:	cmp	r4, #0
   12488:	bne	12934 <__assert_fail@plt+0x1570>
   1248c:	ldr	sl, [r8, #16]
   12490:	ldr	r4, [r8, #20]
   12494:	mov	r6, r5
   12498:	str	r5, [sp, #16]
   1249c:	mov	r1, r4
   124a0:	mov	r0, sl
   124a4:	str	r3, [sp, #40]	; 0x28
   124a8:	bl	11d1c <__assert_fail@plt+0x958>
   124ac:	cmp	r4, #0
   124b0:	movne	r1, r6
   124b4:	moveq	r1, #0
   124b8:	cmp	sl, #0
   124bc:	str	r0, [sp, #32]
   124c0:	ldr	r0, [sp, #16]
   124c4:	moveq	r0, #0
   124c8:	bl	11d1c <__assert_fail@plt+0x958>
   124cc:	ldr	r3, [sp, #40]	; 0x28
   124d0:	mov	r2, #5
   124d4:	cmp	r3, #3
   124d8:	mov	r7, r0
   124dc:	beq	126ec <__assert_fail@plt+0x1328>
   124e0:	cmp	r3, #4
   124e4:	beq	12780 <__assert_fail@plt+0x13bc>
   124e8:	cmp	sl, #0
   124ec:	ldrne	r1, [pc, #1192]	; 1299c <__assert_fail@plt+0x15d8>
   124f0:	bne	12500 <__assert_fail@plt+0x113c>
   124f4:	cmp	r4, #0
   124f8:	ldrne	r1, [pc, #1184]	; 129a0 <__assert_fail@plt+0x15dc>
   124fc:	ldreq	r1, [pc, #1184]	; 129a4 <__assert_fail@plt+0x15e0>
   12500:	mov	r0, r5
   12504:	bl	11130 <dcgettext@plt>
   12508:	mov	r4, r0
   1250c:	b	12744 <__assert_fail@plt+0x1380>
   12510:	cmp	r7, #0
   12514:	bne	12534 <__assert_fail@plt+0x1170>
   12518:	ldr	r3, [r4, #16]
   1251c:	and	r3, r3, #61440	; 0xf000
   12520:	cmp	r3, #32768	; 0x8000
   12524:	beq	1255c <__assert_fail@plt+0x1198>
   12528:	cmp	r3, #16384	; 0x4000
   1252c:	moveq	sl, #18688	; 0x4900
   12530:	beq	12560 <__assert_fail@plt+0x119c>
   12534:	ldr	r0, [sp, #20]
   12538:	str	r5, [sp]
   1253c:	ldr	r3, [sp, #36]	; 0x24
   12540:	ldr	r2, [sp, #28]
   12544:	ldr	r1, [sp, #32]
   12548:	ldr	r0, [r0, #32]
   1254c:	bl	11340 <fchownat@plt>
   12550:	clz	r7, r0
   12554:	lsr	r7, r7, #5
   12558:	b	125a4 <__assert_fail@plt+0x11e0>
   1255c:	mov	sl, #2304	; 0x900
   12560:	ldr	r3, [sp, #20]
   12564:	mov	r2, sl
   12568:	ldr	r1, [sp, #32]
   1256c:	ldr	r3, [r3, #32]
   12570:	mov	r0, r3
   12574:	str	r3, [sp, #40]	; 0x28
   12578:	bl	110dc <__openat64_2@plt>
   1257c:	subs	r6, r0, #0
   12580:	bge	125dc <__assert_fail@plt+0x1218>
   12584:	bl	11268 <__errno_location@plt>
   12588:	ldr	r2, [r0]
   1258c:	mov	r3, r0
   12590:	cmp	r2, #13
   12594:	beq	125ac <__assert_fail@plt+0x11e8>
   12598:	ldr	r3, [r3]
   1259c:	cmp	r3, #13
   125a0:	beq	12534 <__assert_fail@plt+0x1170>
   125a4:	ldr	r6, [sp, #16]
   125a8:	b	12384 <__assert_fail@plt+0xfc0>
   125ac:	ldr	r2, [r4, #16]
   125b0:	and	r2, r2, #61440	; 0xf000
   125b4:	cmp	r2, #32768	; 0x8000
   125b8:	bne	12598 <__assert_fail@plt+0x11d4>
   125bc:	str	r0, [sp, #44]	; 0x2c
   125c0:	orr	r2, sl, #1
   125c4:	ldr	r1, [sp, #32]
   125c8:	ldr	r0, [sp, #40]	; 0x28
   125cc:	bl	110dc <__openat64_2@plt>
   125d0:	ldr	r3, [sp, #44]	; 0x2c
   125d4:	subs	r6, r0, #0
   125d8:	blt	12598 <__assert_fail@plt+0x11d4>
   125dc:	add	r1, sp, #152	; 0x98
   125e0:	mov	r0, r6
   125e4:	bl	18da8 <__assert_fail@plt+0x79e4>
   125e8:	cmp	r0, #0
   125ec:	bne	12684 <__assert_fail@plt+0x12c0>
   125f0:	ldrd	r0, [r4, #96]	; 0x60
   125f4:	ldrd	r2, [sp, #248]	; 0xf8
   125f8:	cmp	r1, r3
   125fc:	cmpeq	r0, r2
   12600:	bne	126cc <__assert_fail@plt+0x1308>
   12604:	ldrd	r0, [r4]
   12608:	ldrd	r2, [sp, #152]	; 0x98
   1260c:	cmp	r1, r3
   12610:	cmpeq	r0, r2
   12614:	bne	126cc <__assert_fail@plt+0x1308>
   12618:	ldr	r3, [sp, #296]	; 0x128
   1261c:	cmn	r3, #1
   12620:	beq	12640 <__assert_fail@plt+0x127c>
   12624:	ldr	r3, [sp, #176]	; 0xb0
   12628:	ldr	r2, [sp, #296]	; 0x128
   1262c:	cmp	r2, r3
   12630:	bne	126d4 <__assert_fail@plt+0x1310>
   12634:	ldr	r3, [sp, #300]	; 0x12c
   12638:	cmn	r3, #1
   1263c:	beq	12650 <__assert_fail@plt+0x128c>
   12640:	ldr	r3, [sp, #180]	; 0xb4
   12644:	ldr	r2, [sp, #300]	; 0x12c
   12648:	cmp	r2, r3
   1264c:	bne	126d4 <__assert_fail@plt+0x1310>
   12650:	ldr	r2, [sp, #36]	; 0x24
   12654:	ldr	r1, [sp, #28]
   12658:	mov	r0, r6
   1265c:	bl	1125c <fchown@plt>
   12660:	cmp	r0, #0
   12664:	bne	12684 <__assert_fail@plt+0x12c0>
   12668:	mov	r0, r6
   1266c:	bl	11388 <close@plt>
   12670:	cmp	r0, #0
   12674:	bne	125a4 <__assert_fail@plt+0x11e0>
   12678:	ldr	r6, [sp, #16]
   1267c:	mov	r7, r9
   12680:	b	12384 <__assert_fail@plt+0xfc0>
   12684:	mov	sl, #6
   12688:	bl	11268 <__errno_location@plt>
   1268c:	sub	sl, sl, #3
   12690:	ldr	r2, [r0]
   12694:	str	r0, [sp, #44]	; 0x2c
   12698:	mov	r0, r6
   1269c:	str	r2, [sp, #40]	; 0x28
   126a0:	bl	11388 <close@plt>
   126a4:	ldr	r3, [sp, #44]	; 0x2c
   126a8:	ldr	r2, [sp, #40]	; 0x28
   126ac:	str	r2, [r3]
   126b0:	cmp	sl, #3
   126b4:	ldrls	pc, [pc, sl, lsl #2]
   126b8:	b	12678 <__assert_fail@plt+0x12b4>
   126bc:	ldrdeq	r2, [r1], -ip
   126c0:	ldrdeq	r2, [r1], -ip
   126c4:	andeq	r2, r1, r4, lsr r5
   126c8:	andeq	r2, r1, r4, lsr #11
   126cc:	mov	sl, #4
   126d0:	b	12688 <__assert_fail@plt+0x12c4>
   126d4:	mov	sl, #2
   126d8:	b	12688 <__assert_fail@plt+0x12c4>
   126dc:	mov	r6, r7
   126e0:	b	12384 <__assert_fail@plt+0xfc0>
   126e4:	mov	r3, r5
   126e8:	b	12450 <__assert_fail@plt+0x108c>
   126ec:	cmp	r0, #0
   126f0:	beq	12710 <__assert_fail@plt+0x134c>
   126f4:	cmp	sl, #0
   126f8:	ldrne	r1, [pc, #680]	; 129a8 <__assert_fail@plt+0x15e4>
   126fc:	bne	12500 <__assert_fail@plt+0x113c>
   12700:	cmp	r4, #0
   12704:	ldrne	r1, [pc, #672]	; 129ac <__assert_fail@plt+0x15e8>
   12708:	ldreq	r1, [pc, #672]	; 129b0 <__assert_fail@plt+0x15ec>
   1270c:	b	12500 <__assert_fail@plt+0x113c>
   12710:	cmp	sl, #0
   12714:	ldrne	r1, [pc, #664]	; 129b4 <__assert_fail@plt+0x15f0>
   12718:	bne	12728 <__assert_fail@plt+0x1364>
   1271c:	cmp	r4, #0
   12720:	ldrne	r1, [pc, #656]	; 129b8 <__assert_fail@plt+0x15f4>
   12724:	ldreq	r1, [pc, #644]	; 129b0 <__assert_fail@plt+0x15ec>
   12728:	bl	11130 <dcgettext@plt>
   1272c:	mov	r4, r0
   12730:	mov	r0, r5
   12734:	bl	12ad0 <__assert_fail@plt+0x170c>
   12738:	mov	r3, r7
   1273c:	ldr	r7, [sp, #32]
   12740:	str	r3, [sp, #32]
   12744:	ldr	r1, [sp, #12]
   12748:	mov	r0, #4
   1274c:	bl	16c04 <__assert_fail@plt+0x5840>
   12750:	ldr	r3, [sp, #32]
   12754:	mov	r1, r4
   12758:	str	r3, [sp]
   1275c:	mov	r3, r7
   12760:	mov	r2, r0
   12764:	mov	r0, #1
   12768:	bl	1128c <__printf_chk@plt>
   1276c:	mov	r0, r7
   12770:	bl	12ad0 <__assert_fail@plt+0x170c>
   12774:	ldr	r0, [sp, #32]
   12778:	bl	12ad0 <__assert_fail@plt+0x170c>
   1277c:	b	12904 <__assert_fail@plt+0x1540>
   12780:	cmp	sl, #0
   12784:	ldrne	r1, [pc, #560]	; 129bc <__assert_fail@plt+0x15f8>
   12788:	bne	12500 <__assert_fail@plt+0x113c>
   1278c:	cmp	r4, #0
   12790:	ldrne	r1, [pc, #552]	; 129c0 <__assert_fail@plt+0x15fc>
   12794:	ldreq	r1, [pc, #552]	; 129c4 <__assert_fail@plt+0x1600>
   12798:	b	12500 <__assert_fail@plt+0x113c>
   1279c:	add	r4, sp, #48	; 0x30
   127a0:	ldr	r3, [sp, #296]	; 0x128
   127a4:	cmn	r3, #1
   127a8:	beq	127c0 <__assert_fail@plt+0x13fc>
   127ac:	ldr	r3, [r4, #24]
   127b0:	ldr	r2, [sp, #296]	; 0x128
   127b4:	cmp	r2, r3
   127b8:	movne	r9, #1
   127bc:	bne	121a4 <__assert_fail@plt+0xde0>
   127c0:	ldr	r3, [sp, #300]	; 0x12c
   127c4:	cmn	r3, #1
   127c8:	moveq	r9, #1
   127cc:	moveq	r6, r9
   127d0:	ldrne	r6, [r4, #28]
   127d4:	movne	r9, #1
   127d8:	subne	r6, r6, r3
   127dc:	clzne	r6, r6
   127e0:	lsrne	r6, r6, #5
   127e4:	cmp	r9, #0
   127e8:	beq	12314 <__assert_fail@plt+0xf50>
   127ec:	ldrh	r9, [fp, #56]	; 0x38
   127f0:	sub	r3, r9, #1
   127f4:	bic	r9, r9, #2
   127f8:	cmp	r9, #4
   127fc:	cmpne	r3, #1
   12800:	movhi	r9, #0
   12804:	movls	r9, #1
   12808:	movhi	r9, #1
   1280c:	bhi	12314 <__assert_fail@plt+0xf50>
   12810:	ldr	ip, [r8, #8]
   12814:	cmp	ip, #0
   12818:	beq	12314 <__assert_fail@plt+0xf50>
   1281c:	ldrd	r0, [r4, #96]	; 0x60
   12820:	ldrd	r2, [ip]
   12824:	cmp	r1, r3
   12828:	cmpeq	r0, r2
   1282c:	bne	12314 <__assert_fail@plt+0xf50>
   12830:	ldrd	r2, [r4]
   12834:	ldrd	r0, [ip, #8]
   12838:	cmp	r3, r1
   1283c:	cmpeq	r2, r0
   12840:	bne	12314 <__assert_fail@plt+0xf50>
   12844:	ldr	r1, [pc, #292]	; 12970 <__assert_fail@plt+0x15ac>
   12848:	ldr	r0, [sp, #12]
   1284c:	bl	110a0 <strcmp@plt>
   12850:	mov	r2, #5
   12854:	subs	r4, r0, #0
   12858:	bne	122c4 <__assert_fail@plt+0xf00>
   1285c:	ldr	r1, [pc, #272]	; 12974 <__assert_fail@plt+0x15b0>
   12860:	bl	11130 <dcgettext@plt>
   12864:	ldr	r1, [sp, #12]
   12868:	mov	r6, r0
   1286c:	mov	r0, #4
   12870:	bl	16c04 <__assert_fail@plt+0x5840>
   12874:	mov	r2, r6
   12878:	mov	r1, r5
   1287c:	mov	r3, r0
   12880:	mov	r0, r4
   12884:	bl	111c0 <error@plt>
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #228]	; 12978 <__assert_fail@plt+0x15b4>
   12890:	mov	r0, r5
   12894:	bl	11130 <dcgettext@plt>
   12898:	mov	r1, r5
   1289c:	mov	r2, r0
   128a0:	mov	r0, #0
   128a4:	bl	111c0 <error@plt>
   128a8:	b	12054 <__assert_fail@plt+0xc90>
   128ac:	cmp	r4, #0
   128b0:	streq	r5, [sp, #16]
   128b4:	moveq	r6, r5
   128b8:	beq	128d4 <__assert_fail@plt+0x1510>
   128bc:	ldr	r0, [r4, #24]
   128c0:	bl	11e14 <__assert_fail@plt+0xa50>
   128c4:	str	r0, [sp, #16]
   128c8:	ldr	r0, [r4, #28]
   128cc:	bl	11ddc <__assert_fail@plt+0xa18>
   128d0:	mov	r6, r0
   128d4:	mov	r2, #5
   128d8:	ldr	r1, [pc, #232]	; 129c8 <__assert_fail@plt+0x1604>
   128dc:	mov	r0, r5
   128e0:	bl	11130 <dcgettext@plt>
   128e4:	ldr	r1, [sp, #12]
   128e8:	mov	r4, r0
   128ec:	mov	r0, #4
   128f0:	bl	16c04 <__assert_fail@plt+0x5840>
   128f4:	mov	r1, r4
   128f8:	mov	r2, r0
   128fc:	mov	r0, #1
   12900:	bl	1128c <__printf_chk@plt>
   12904:	ldr	r0, [sp, #16]
   12908:	bl	12ad0 <__assert_fail@plt+0x170c>
   1290c:	mov	r0, r6
   12910:	bl	12ad0 <__assert_fail@plt+0x170c>
   12914:	ldrb	r3, [r8, #4]
   12918:	cmp	r3, #0
   1291c:	bne	12058 <__assert_fail@plt+0xc94>
   12920:	mov	r2, #4
   12924:	mov	r1, fp
   12928:	ldr	r0, [sp, #20]
   1292c:	bl	14714 <__assert_fail@plt+0x3350>
   12930:	b	12058 <__assert_fail@plt+0xc94>
   12934:	ldr	r0, [r4, #24]
   12938:	str	r3, [sp, #32]
   1293c:	bl	11e14 <__assert_fail@plt+0xa50>
   12940:	str	r0, [sp, #16]
   12944:	ldr	r0, [r4, #28]
   12948:	bl	11ddc <__assert_fail@plt+0xa18>
   1294c:	ldr	sl, [r8, #16]
   12950:	ldr	r4, [r8, #20]
   12954:	ldr	r3, [sp, #32]
   12958:	mov	r6, r0
   1295c:	b	1249c <__assert_fail@plt+0x10d8>
   12960:	mov	r3, #3
   12964:	b	12484 <__assert_fail@plt+0x10c0>
   12968:	andeq	r9, r1, r2, lsl #22
   1296c:	muleq	r1, r2, lr
   12970:	andeq	sl, r1, ip, asr r3
   12974:	andeq	r9, r1, r2, lsl fp
   12978:	andeq	r9, r1, r9, ror fp
   1297c:	andeq	r9, r1, pc, lsr fp
   12980:	andeq	r9, r1, lr, lsl #25
   12984:	andeq	r9, r1, sl, lsr #23
   12988:	andeq	r9, r1, sp, lsr #19
   1298c:			; <UNDEFINED> instruction: 0x00019bbb
   12990:	ldrdeq	r9, [r1], -r4
   12994:	andeq	r9, r1, r4, lsr #25
   12998:			; <UNDEFINED> instruction: 0x00019cbd
   1299c:	andeq	r9, r1, sl, lsl #26
   129a0:	andeq	r9, r1, r1, lsr sp
   129a4:	andeq	r9, r1, r4, asr sp
   129a8:	andeq	r9, r1, r2, ror sp
   129ac:	andeq	r9, r1, r2, lsr #27
   129b0:	andeq	r9, r1, lr, asr #27
   129b4:	strdeq	r9, [r1], -r0
   129b8:	andeq	r9, r1, r8, lsl lr
   129bc:	andeq	r9, r1, ip, lsr lr
   129c0:	andeq	r9, r1, ip, asr lr
   129c4:	andeq	r9, r1, r8, ror lr
   129c8:	ldrdeq	r9, [r1], -r2
   129cc:	ldr	r3, [pc, #4]	; 129d8 <__assert_fail@plt+0x1614>
   129d0:	str	r0, [r3]
   129d4:	bx	lr
   129d8:	andeq	fp, r2, r0, asr #3
   129dc:	ldr	r3, [pc, #4]	; 129e8 <__assert_fail@plt+0x1624>
   129e0:	strb	r0, [r3, #4]
   129e4:	bx	lr
   129e8:	andeq	fp, r2, r0, asr #3
   129ec:	ldr	r3, [pc, #192]	; 12ab4 <__assert_fail@plt+0x16f0>
   129f0:	push	{r0, r1, r4, r5, r6, lr}
   129f4:	ldr	r0, [r3]
   129f8:	bl	180e0 <__assert_fail@plt+0x6d1c>
   129fc:	cmp	r0, #0
   12a00:	beq	12a98 <__assert_fail@plt+0x16d4>
   12a04:	ldr	r3, [pc, #172]	; 12ab8 <__assert_fail@plt+0x16f4>
   12a08:	mov	r4, r3
   12a0c:	ldrb	r2, [r3, #4]
   12a10:	cmp	r2, #0
   12a14:	beq	12a28 <__assert_fail@plt+0x1664>
   12a18:	bl	11268 <__errno_location@plt>
   12a1c:	ldr	r3, [r0]
   12a20:	cmp	r3, #32
   12a24:	beq	12a98 <__assert_fail@plt+0x16d4>
   12a28:	mov	r2, #5
   12a2c:	ldr	r1, [pc, #136]	; 12abc <__assert_fail@plt+0x16f8>
   12a30:	mov	r0, #0
   12a34:	bl	11130 <dcgettext@plt>
   12a38:	ldr	r4, [r4]
   12a3c:	cmp	r4, #0
   12a40:	mov	r5, r0
   12a44:	beq	12a7c <__assert_fail@plt+0x16b8>
   12a48:	bl	11268 <__errno_location@plt>
   12a4c:	ldr	r6, [r0]
   12a50:	mov	r0, r4
   12a54:	bl	16c98 <__assert_fail@plt+0x58d4>
   12a58:	str	r5, [sp]
   12a5c:	ldr	r2, [pc, #92]	; 12ac0 <__assert_fail@plt+0x16fc>
   12a60:	mov	r1, r6
   12a64:	mov	r3, r0
   12a68:	mov	r0, #0
   12a6c:	bl	111c0 <error@plt>
   12a70:	ldr	r3, [pc, #76]	; 12ac4 <__assert_fail@plt+0x1700>
   12a74:	ldr	r0, [r3]
   12a78:	bl	110e8 <_exit@plt>
   12a7c:	bl	11268 <__errno_location@plt>
   12a80:	mov	r3, r5
   12a84:	ldr	r2, [pc, #60]	; 12ac8 <__assert_fail@plt+0x1704>
   12a88:	ldr	r1, [r0]
   12a8c:	mov	r0, r4
   12a90:	bl	111c0 <error@plt>
   12a94:	b	12a70 <__assert_fail@plt+0x16ac>
   12a98:	ldr	r3, [pc, #44]	; 12acc <__assert_fail@plt+0x1708>
   12a9c:	ldr	r0, [r3]
   12aa0:	bl	180e0 <__assert_fail@plt+0x6d1c>
   12aa4:	cmp	r0, #0
   12aa8:	bne	12a70 <__assert_fail@plt+0x16ac>
   12aac:	add	sp, sp, #8
   12ab0:	pop	{r4, r5, r6, pc}
   12ab4:	muleq	r2, ip, r1
   12ab8:	andeq	fp, r2, r0, asr #3
   12abc:			; <UNDEFINED> instruction: 0x00019eb2
   12ac0:	andeq	r9, r1, r9, lsr #19
   12ac4:	andeq	fp, r2, r4, asr #2
   12ac8:	andeq	r9, r1, sp, lsr #19
   12acc:	muleq	r2, r8, r1
   12ad0:	push	{r0, r1, r2, r4, r5, lr}
   12ad4:	mov	r5, r0
   12ad8:	bl	11268 <__errno_location@plt>
   12adc:	ldr	r3, [r0]
   12ae0:	mov	r4, r0
   12ae4:	str	r3, [sp]
   12ae8:	str	r3, [sp, #4]
   12aec:	mov	r3, #0
   12af0:	str	r3, [r0]
   12af4:	mov	r0, r5
   12af8:	bl	110d0 <free@plt>
   12afc:	ldr	r3, [r4]
   12b00:	add	r2, sp, #8
   12b04:	cmp	r3, #0
   12b08:	moveq	r3, #4
   12b0c:	movne	r3, #0
   12b10:	add	r3, r2, r3
   12b14:	ldr	r3, [r3, #-8]
   12b18:	str	r3, [r4]
   12b1c:	add	sp, sp, #12
   12b20:	pop	{r4, r5, pc}
   12b24:	ldrd	r2, [r1, #8]
   12b28:	push	{r4, r5, lr}
   12b2c:	ldrd	r4, [r0, #8]
   12b30:	cmp	r5, r3
   12b34:	cmpeq	r4, r2
   12b38:	bne	12b58 <__assert_fail@plt+0x1794>
   12b3c:	ldrd	r4, [r0]
   12b40:	ldrd	r2, [r1]
   12b44:	cmp	r5, r3
   12b48:	cmpeq	r4, r2
   12b4c:	moveq	r0, #1
   12b50:	movne	r0, #0
   12b54:	pop	{r4, r5, pc}
   12b58:	mov	r0, #0
   12b5c:	pop	{r4, r5, pc}
   12b60:	push	{r4, lr}
   12b64:	mov	r2, r1
   12b68:	mov	r3, #0
   12b6c:	ldrd	r0, [r0, #8]
   12b70:	bl	18ba8 <__assert_fail@plt+0x77e4>
   12b74:	mov	r0, r2
   12b78:	pop	{r4, pc}
   12b7c:	push	{r4, lr}
   12b80:	mov	r2, r1
   12b84:	mov	r3, #0
   12b88:	ldrd	r0, [r0]
   12b8c:	bl	18ba8 <__assert_fail@plt+0x77e4>
   12b90:	mov	r0, r2
   12b94:	pop	{r4, pc}
   12b98:	ldrd	r2, [r1]
   12b9c:	push	{r4, r5, lr}
   12ba0:	ldrd	r4, [r0]
   12ba4:	cmp	r5, r3
   12ba8:	cmpeq	r4, r2
   12bac:	moveq	r0, #1
   12bb0:	movne	r0, #0
   12bb4:	pop	{r4, r5, pc}
   12bb8:	ldr	r3, [r0]
   12bbc:	push	{r4, r5, lr}
   12bc0:	ldrd	r4, [r3, #160]	; 0xa0
   12bc4:	ldr	r3, [r1]
   12bc8:	ldrd	r2, [r3, #160]	; 0xa0
   12bcc:	cmp	r5, r3
   12bd0:	cmpeq	r4, r2
   12bd4:	movhi	r0, #1
   12bd8:	movls	r0, #0
   12bdc:	movcc	r3, #1
   12be0:	movcs	r3, #0
   12be4:	sub	r0, r0, r3
   12be8:	pop	{r4, r5, pc}
   12bec:	ldr	r3, [r1, #48]	; 0x30
   12bf0:	push	{r4, r5, r6, lr}
   12bf4:	cmp	r3, #0
   12bf8:	mov	r4, r1
   12bfc:	add	r5, r1, #64	; 0x40
   12c00:	ldr	r3, [r0, #48]	; 0x30
   12c04:	bne	12c10 <__assert_fail@plt+0x184c>
   12c08:	tst	r3, #1
   12c0c:	movne	r2, #1
   12c10:	lsl	r3, r3, #30
   12c14:	orrs	r3, r2, r3, lsr #31
   12c18:	beq	12c84 <__assert_fail@plt+0x18c0>
   12c1c:	mov	r1, r5
   12c20:	ldr	r0, [r4, #24]
   12c24:	bl	18d98 <__assert_fail@plt+0x79d4>
   12c28:	cmp	r0, #0
   12c2c:	beq	12cac <__assert_fail@plt+0x18e8>
   12c30:	bl	11268 <__errno_location@plt>
   12c34:	ldr	r3, [r0]
   12c38:	mov	r6, r0
   12c3c:	cmp	r3, #2
   12c40:	bne	12c64 <__assert_fail@plt+0x18a0>
   12c44:	mov	r1, r5
   12c48:	ldr	r0, [r4, #24]
   12c4c:	bl	18db8 <__assert_fail@plt+0x79f4>
   12c50:	cmp	r0, #0
   12c54:	bne	12c64 <__assert_fail@plt+0x18a0>
   12c58:	str	r0, [r6]
   12c5c:	mov	r0, #13
   12c60:	pop	{r4, r5, r6, pc}
   12c64:	ldr	r3, [r6]
   12c68:	str	r3, [r4, #32]
   12c6c:	mov	r2, #104	; 0x68
   12c70:	mov	r1, #0
   12c74:	mov	r0, r5
   12c78:	bl	11280 <memset@plt>
   12c7c:	mov	r0, #10
   12c80:	pop	{r4, r5, r6, pc}
   12c84:	mov	r3, #256	; 0x100
   12c88:	mov	r2, r5
   12c8c:	ldr	r1, [r4, #24]
   12c90:	ldr	r0, [r0, #32]
   12c94:	bl	18dc8 <__assert_fail@plt+0x7a04>
   12c98:	cmp	r0, #0
   12c9c:	beq	12cac <__assert_fail@plt+0x18e8>
   12ca0:	bl	11268 <__errno_location@plt>
   12ca4:	ldr	r3, [r0]
   12ca8:	b	12c68 <__assert_fail@plt+0x18a4>
   12cac:	ldr	r0, [r4, #80]	; 0x50
   12cb0:	and	r0, r0, #61440	; 0xf000
   12cb4:	cmp	r0, #16384	; 0x4000
   12cb8:	bne	12cfc <__assert_fail@plt+0x1938>
   12cbc:	ldrb	r3, [r4, #168]	; 0xa8
   12cc0:	cmp	r3, #46	; 0x2e
   12cc4:	bne	12d14 <__assert_fail@plt+0x1950>
   12cc8:	ldrb	r3, [r4, #169]	; 0xa9
   12ccc:	cmp	r3, #0
   12cd0:	beq	12ce8 <__assert_fail@plt+0x1924>
   12cd4:	ldr	r3, [r4, #168]	; 0xa8
   12cd8:	bic	r3, r3, #-16777216	; 0xff000000
   12cdc:	bic	r3, r3, #255	; 0xff
   12ce0:	cmp	r3, #11776	; 0x2e00
   12ce4:	bne	12d14 <__assert_fail@plt+0x1950>
   12ce8:	ldr	r0, [r4, #48]	; 0x30
   12cec:	cmp	r0, #0
   12cf0:	moveq	r0, #1
   12cf4:	movne	r0, #5
   12cf8:	pop	{r4, r5, r6, pc}
   12cfc:	cmp	r0, #40960	; 0xa000
   12d00:	beq	12d1c <__assert_fail@plt+0x1958>
   12d04:	cmp	r0, #32768	; 0x8000
   12d08:	moveq	r0, #8
   12d0c:	movne	r0, #3
   12d10:	pop	{r4, r5, r6, pc}
   12d14:	mov	r0, #1
   12d18:	pop	{r4, r5, r6, pc}
   12d1c:	mov	r0, #12
   12d20:	pop	{r4, r5, r6, pc}
   12d24:	ldr	r3, [r0, #40]	; 0x28
   12d28:	push	{r4, r5, r6, r7, r8, lr}
   12d2c:	cmp	r3, r2
   12d30:	mov	r4, r0
   12d34:	mov	r6, r1
   12d38:	mov	r5, r2
   12d3c:	ldr	r7, [r0, #44]	; 0x2c
   12d40:	bcs	12d88 <__assert_fail@plt+0x19c4>
   12d44:	add	r1, r2, #40	; 0x28
   12d48:	cmn	r1, #-1073741823	; 0xc0000001
   12d4c:	str	r1, [r0, #40]	; 0x28
   12d50:	bls	12d70 <__assert_fail@plt+0x19ac>
   12d54:	ldr	r0, [r4, #8]
   12d58:	bl	12ad0 <__assert_fail@plt+0x170c>
   12d5c:	mov	r3, #0
   12d60:	str	r3, [r4, #8]
   12d64:	str	r3, [r4, #40]	; 0x28
   12d68:	mov	r0, r6
   12d6c:	pop	{r4, r5, r6, r7, r8, pc}
   12d70:	lsl	r1, r1, #2
   12d74:	ldr	r0, [r0, #8]
   12d78:	bl	18084 <__assert_fail@plt+0x6cc0>
   12d7c:	cmp	r0, #0
   12d80:	beq	12d54 <__assert_fail@plt+0x1990>
   12d84:	str	r0, [r4, #8]
   12d88:	ldr	r0, [r4, #8]
   12d8c:	mov	r2, r0
   12d90:	cmp	r6, #0
   12d94:	bne	12dd0 <__assert_fail@plt+0x1a0c>
   12d98:	mov	r3, r7
   12d9c:	mov	r2, #4
   12da0:	mov	r1, r5
   12da4:	bl	11334 <qsort@plt>
   12da8:	ldr	r2, [r4, #8]
   12dac:	mov	r3, r5
   12db0:	mov	r1, r2
   12db4:	ldr	r6, [r2]
   12db8:	subs	r3, r3, #1
   12dbc:	bne	12ddc <__assert_fail@plt+0x1a18>
   12dc0:	sub	r5, r5, #-1073741823	; 0xc0000001
   12dc4:	ldr	r2, [r2, r5, lsl #2]
   12dc8:	str	r3, [r2, #8]
   12dcc:	b	12d68 <__assert_fail@plt+0x19a4>
   12dd0:	str	r6, [r2], #4
   12dd4:	ldr	r6, [r6, #8]
   12dd8:	b	12d90 <__assert_fail@plt+0x19cc>
   12ddc:	ldr	r0, [r1]
   12de0:	ldr	ip, [r1, #4]!
   12de4:	str	ip, [r0, #8]
   12de8:	b	12db8 <__assert_fail@plt+0x19f4>
   12dec:	push	{r4, r5, r6, r7, r8, lr}
   12df0:	mov	r6, r0
   12df4:	add	r0, r2, #176	; 0xb0
   12df8:	bic	r0, r0, #7
   12dfc:	mov	r7, r1
   12e00:	mov	r5, r2
   12e04:	bl	18044 <__assert_fail@plt+0x6c80>
   12e08:	subs	r4, r0, #0
   12e0c:	beq	12e58 <__assert_fail@plt+0x1a94>
   12e10:	mov	r2, r5
   12e14:	mov	r1, r7
   12e18:	add	r0, r4, #168	; 0xa8
   12e1c:	bl	110f4 <memcpy@plt>
   12e20:	add	r2, r4, r5
   12e24:	mov	r3, #0
   12e28:	strb	r3, [r2, #168]	; 0xa8
   12e2c:	ldr	r2, [r6, #24]
   12e30:	str	r5, [r4, #52]	; 0x34
   12e34:	str	r2, [r4, #28]
   12e38:	mov	r2, #3
   12e3c:	str	r6, [r4, #44]	; 0x2c
   12e40:	str	r3, [r4, #32]
   12e44:	str	r3, [r4, #12]
   12e48:	strh	r3, [r4, #58]	; 0x3a
   12e4c:	strh	r2, [r4, #60]	; 0x3c
   12e50:	str	r3, [r4, #16]
   12e54:	str	r3, [r4, #20]
   12e58:	mov	r0, r4
   12e5c:	pop	{r4, r5, r6, r7, r8, pc}
   12e60:	ldr	ip, [r0, #48]	; 0x30
   12e64:	push	{lr}		; (str lr, [sp, #-4]!)
   12e68:	tst	ip, #16
   12e6c:	ldr	lr, [pc, #40]	; 12e9c <__assert_fail@plt+0x1ad8>
   12e70:	ldr	r2, [pc, #40]	; 12ea0 <__assert_fail@plt+0x1adc>
   12e74:	moveq	r2, lr
   12e78:	tst	ip, #512	; 0x200
   12e7c:	beq	12e8c <__assert_fail@plt+0x1ac8>
   12e80:	ldr	r0, [r0, #32]
   12e84:	pop	{lr}		; (ldr lr, [sp], #4)
   12e88:	b	15734 <__assert_fail@plt+0x4370>
   12e8c:	mov	r0, r1
   12e90:	pop	{lr}		; (ldr lr, [sp], #4)
   12e94:	mov	r1, r2
   12e98:	b	18488 <__assert_fail@plt+0x70c4>
   12e9c:	andeq	r4, r8, r0, lsl #18
   12ea0:	andeq	ip, r8, r0, lsl #18
   12ea4:	push	{r4, r5, r6, lr}
   12ea8:	mov	r4, r0
   12eac:	cmp	r4, #0
   12eb0:	bne	12eb8 <__assert_fail@plt+0x1af4>
   12eb4:	pop	{r4, r5, r6, pc}
   12eb8:	ldr	r0, [r4, #12]
   12ebc:	ldr	r5, [r4, #8]
   12ec0:	cmp	r0, #0
   12ec4:	beq	12ecc <__assert_fail@plt+0x1b08>
   12ec8:	bl	113a0 <closedir@plt>
   12ecc:	mov	r0, r4
   12ed0:	bl	12ad0 <__assert_fail@plt+0x170c>
   12ed4:	mov	r4, r5
   12ed8:	b	12eac <__assert_fail@plt+0x1ae8>
   12edc:	ldr	r2, [r0, #48]	; 0x30
   12ee0:	ldr	r3, [pc, #28]	; 12f04 <__assert_fail@plt+0x1b40>
   12ee4:	ldr	r0, [r0, #56]	; 0x38
   12ee8:	and	r3, r3, r2
   12eec:	cmp	r3, #0
   12ef0:	beq	12f00 <__assert_fail@plt+0x1b3c>
   12ef4:	cmp	r0, #0
   12ef8:	bxeq	lr
   12efc:	b	15178 <__assert_fail@plt+0x3db4>
   12f00:	b	12ad0 <__assert_fail@plt+0x170c>
   12f04:	andeq	r0, r0, r2, lsl #2
   12f08:	push	{r4, lr}
   12f0c:	mov	r4, r0
   12f10:	mov	r0, r4
   12f14:	bl	15638 <__assert_fail@plt+0x4274>
   12f18:	cmp	r0, #0
   12f1c:	beq	12f24 <__assert_fail@plt+0x1b60>
   12f20:	pop	{r4, pc}
   12f24:	mov	r0, r4
   12f28:	bl	15684 <__assert_fail@plt+0x42c0>
   12f2c:	cmp	r0, #0
   12f30:	blt	12f10 <__assert_fail@plt+0x1b4c>
   12f34:	bl	11388 <close@plt>
   12f38:	b	12f10 <__assert_fail@plt+0x1b4c>
   12f3c:	push	{r4, r5, r6, r7, lr}
   12f40:	sub	sp, sp, #100	; 0x64
   12f44:	ldr	r5, [r0, #44]	; 0x2c
   12f48:	ldr	r3, [r5, #48]	; 0x30
   12f4c:	tst	r3, #512	; 0x200
   12f50:	bne	12f60 <__assert_fail@plt+0x1b9c>
   12f54:	mov	r0, #0
   12f58:	add	sp, sp, #100	; 0x64
   12f5c:	pop	{r4, r5, r6, r7, pc}
   12f60:	ldr	r4, [r5, #52]	; 0x34
   12f64:	mov	r7, r1
   12f68:	cmp	r4, #0
   12f6c:	mov	r6, r0
   12f70:	bne	12fa0 <__assert_fail@plt+0x1bdc>
   12f74:	ldr	r3, [pc, #184]	; 13034 <__assert_fail@plt+0x1c70>
   12f78:	mov	r1, r4
   12f7c:	str	r3, [sp]
   12f80:	ldr	r2, [pc, #176]	; 13038 <__assert_fail@plt+0x1c74>
   12f84:	ldr	r3, [pc, #176]	; 1303c <__assert_fail@plt+0x1c78>
   12f88:	mov	r0, #13
   12f8c:	bl	1500c <__assert_fail@plt+0x3c48>
   12f90:	cmp	r0, #0
   12f94:	mov	r4, r0
   12f98:	str	r0, [r5, #52]	; 0x34
   12f9c:	beq	12fc0 <__assert_fail@plt+0x1bfc>
   12fa0:	ldrd	r2, [r6, #64]	; 0x40
   12fa4:	add	r1, sp, #96	; 0x60
   12fa8:	mov	r0, r4
   12fac:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12fb0:	bl	14de8 <__assert_fail@plt+0x3a24>
   12fb4:	cmp	r0, #0
   12fb8:	ldrne	r0, [r0, #8]
   12fbc:	bne	12f58 <__assert_fail@plt+0x1b94>
   12fc0:	cmp	r7, #0
   12fc4:	blt	12f54 <__assert_fail@plt+0x1b90>
   12fc8:	add	r1, sp, #8
   12fcc:	mov	r0, r7
   12fd0:	bl	11058 <fstatfs64@plt>
   12fd4:	cmp	r0, #0
   12fd8:	bne	12f54 <__assert_fail@plt+0x1b90>
   12fdc:	cmp	r4, #0
   12fe0:	beq	1302c <__assert_fail@plt+0x1c68>
   12fe4:	mov	r0, #16
   12fe8:	bl	18044 <__assert_fail@plt+0x6c80>
   12fec:	subs	r5, r0, #0
   12ff0:	beq	1302c <__assert_fail@plt+0x1c68>
   12ff4:	ldrd	r2, [r6, #64]	; 0x40
   12ff8:	mov	r1, r5
   12ffc:	mov	r0, r4
   13000:	strd	r2, [r5]
   13004:	ldr	r3, [sp, #8]
   13008:	str	r3, [r5, #8]
   1300c:	bl	154e0 <__assert_fail@plt+0x411c>
   13010:	cmp	r0, #0
   13014:	beq	13024 <__assert_fail@plt+0x1c60>
   13018:	cmp	r5, r0
   1301c:	beq	1302c <__assert_fail@plt+0x1c68>
   13020:	bl	1137c <abort@plt>
   13024:	mov	r0, r5
   13028:	bl	12ad0 <__assert_fail@plt+0x170c>
   1302c:	ldr	r0, [sp, #8]
   13030:	b	12f58 <__assert_fail@plt+0x1b94>
   13034:	ldrdeq	r2, [r1], -r0
   13038:	andeq	r2, r1, ip, ror fp
   1303c:	muleq	r1, r8, fp
   13040:	push	{r4, r5, r6, lr}
   13044:	mov	r5, r1
   13048:	ldr	r1, [r0, #32]
   1304c:	cmn	r1, #100	; 0x64
   13050:	sub	r3, r1, r5
   13054:	clz	r3, r3
   13058:	lsr	r3, r3, #5
   1305c:	moveq	r3, #0
   13060:	cmp	r3, #0
   13064:	beq	1306c <__assert_fail@plt+0x1ca8>
   13068:	bl	1137c <abort@plt>
   1306c:	cmp	r2, #0
   13070:	mov	r4, r0
   13074:	beq	13094 <__assert_fail@plt+0x1cd0>
   13078:	add	r0, r0, #60	; 0x3c
   1307c:	bl	15640 <__assert_fail@plt+0x427c>
   13080:	cmp	r0, #0
   13084:	blt	1308c <__assert_fail@plt+0x1cc8>
   13088:	bl	11388 <close@plt>
   1308c:	str	r5, [r4, #32]
   13090:	pop	{r4, r5, r6, pc}
   13094:	ldr	r3, [r0, #48]	; 0x30
   13098:	lsr	r3, r3, #2
   1309c:	eor	r3, r3, #1
   130a0:	cmp	r1, #0
   130a4:	movlt	r3, #0
   130a8:	andge	r3, r3, #1
   130ac:	cmp	r3, #0
   130b0:	beq	1308c <__assert_fail@plt+0x1cc8>
   130b4:	mov	r0, r1
   130b8:	b	13088 <__assert_fail@plt+0x1cc4>
   130bc:	ldr	r3, [r0, #48]	; 0x30
   130c0:	push	{r4, r5, r6, lr}
   130c4:	ands	r4, r3, #4
   130c8:	mov	r5, r0
   130cc:	movne	r4, #0
   130d0:	bne	130e8 <__assert_fail@plt+0x1d24>
   130d4:	tst	r3, #512	; 0x200
   130d8:	beq	130f8 <__assert_fail@plt+0x1d34>
   130dc:	mov	r2, #1
   130e0:	mvn	r1, #99	; 0x63
   130e4:	bl	13040 <__assert_fail@plt+0x1c7c>
   130e8:	add	r0, r5, #60	; 0x3c
   130ec:	bl	12f08 <__assert_fail@plt+0x1b44>
   130f0:	mov	r0, r4
   130f4:	pop	{r4, r5, r6, pc}
   130f8:	ldr	r0, [r0, #28]
   130fc:	bl	11328 <fchdir@plt>
   13100:	adds	r4, r0, #0
   13104:	movne	r4, #1
   13108:	b	130e8 <__assert_fail@plt+0x1d24>
   1310c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13110:	subs	sl, r3, #0
   13114:	sub	sp, sp, #104	; 0x68
   13118:	mov	r7, r0
   1311c:	mov	r8, r1
   13120:	mov	r6, r2
   13124:	moveq	r9, sl
   13128:	beq	13140 <__assert_fail@plt+0x1d7c>
   1312c:	ldr	r1, [pc, #368]	; 132a4 <__assert_fail@plt+0x1ee0>
   13130:	mov	r0, sl
   13134:	bl	110a0 <strcmp@plt>
   13138:	clz	r9, r0
   1313c:	lsr	r9, r9, #5
   13140:	ldr	r3, [r7, #48]	; 0x30
   13144:	ands	r4, r3, #4
   13148:	beq	13174 <__assert_fail@plt+0x1db0>
   1314c:	mvn	r4, r6
   13150:	lsr	r4, r4, #31
   13154:	ands	r4, r4, r3, lsr #9
   13158:	beq	13168 <__assert_fail@plt+0x1da4>
   1315c:	mov	r0, r6
   13160:	bl	11388 <close@plt>
   13164:	mov	r4, #0
   13168:	mov	r0, r4
   1316c:	add	sp, sp, #104	; 0x68
   13170:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13174:	ands	r2, r9, r6, lsr #31
   13178:	beq	13264 <__assert_fail@plt+0x1ea0>
   1317c:	tst	r3, #512	; 0x200
   13180:	bne	131a0 <__assert_fail@plt+0x1ddc>
   13184:	mov	r1, sl
   13188:	mov	r0, r7
   1318c:	bl	12e60 <__assert_fail@plt+0x1a9c>
   13190:	subs	r5, r0, #0
   13194:	bge	131cc <__assert_fail@plt+0x1e08>
   13198:	mvn	r4, #0
   1319c:	b	13168 <__assert_fail@plt+0x1da4>
   131a0:	add	r5, r7, #60	; 0x3c
   131a4:	mov	r0, r5
   131a8:	bl	15638 <__assert_fail@plt+0x4274>
   131ac:	cmp	r0, #0
   131b0:	bne	13184 <__assert_fail@plt+0x1dc0>
   131b4:	mov	r0, r5
   131b8:	bl	15684 <__assert_fail@plt+0x42c0>
   131bc:	subs	r5, r0, #0
   131c0:	movge	r6, r5
   131c4:	movge	sl, r4
   131c8:	blt	13184 <__assert_fail@plt+0x1dc0>
   131cc:	ldr	r3, [r7, #48]	; 0x30
   131d0:	tst	r3, #2
   131d4:	bne	131f4 <__assert_fail@plt+0x1e30>
   131d8:	cmp	sl, #0
   131dc:	beq	13274 <__assert_fail@plt+0x1eb0>
   131e0:	ldr	r1, [pc, #188]	; 132a4 <__assert_fail@plt+0x1ee0>
   131e4:	mov	r0, sl
   131e8:	bl	110a0 <strcmp@plt>
   131ec:	cmp	r0, #0
   131f0:	bne	13274 <__assert_fail@plt+0x1eb0>
   131f4:	mov	r1, sp
   131f8:	mov	r0, r5
   131fc:	bl	18da8 <__assert_fail@plt+0x79e4>
   13200:	cmp	r0, #0
   13204:	bne	1323c <__assert_fail@plt+0x1e78>
   13208:	ldrd	r0, [r8, #64]	; 0x40
   1320c:	ldrd	r2, [sp]
   13210:	cmp	r1, r3
   13214:	cmpeq	r0, r2
   13218:	bne	13230 <__assert_fail@plt+0x1e6c>
   1321c:	ldrd	r0, [r8, #160]	; 0xa0
   13220:	ldrd	r2, [sp, #96]	; 0x60
   13224:	cmp	r1, r3
   13228:	cmpeq	r0, r2
   1322c:	beq	13274 <__assert_fail@plt+0x1eb0>
   13230:	bl	11268 <__errno_location@plt>
   13234:	mov	r3, #2
   13238:	str	r3, [r0]
   1323c:	mvn	r4, #0
   13240:	cmp	r6, #0
   13244:	bge	13168 <__assert_fail@plt+0x1da4>
   13248:	bl	11268 <__errno_location@plt>
   1324c:	ldr	r7, [r0]
   13250:	mov	r6, r0
   13254:	mov	r0, r5
   13258:	bl	11388 <close@plt>
   1325c:	str	r7, [r6]
   13260:	b	13168 <__assert_fail@plt+0x1da4>
   13264:	cmp	r6, #0
   13268:	movge	r5, r6
   1326c:	bge	131cc <__assert_fail@plt+0x1e08>
   13270:	b	13184 <__assert_fail@plt+0x1dc0>
   13274:	ldr	r3, [r7, #48]	; 0x30
   13278:	tst	r3, #512	; 0x200
   1327c:	beq	13294 <__assert_fail@plt+0x1ed0>
   13280:	eor	r2, r9, #1
   13284:	mov	r1, r5
   13288:	mov	r0, r7
   1328c:	bl	13040 <__assert_fail@plt+0x1c7c>
   13290:	b	13168 <__assert_fail@plt+0x1da4>
   13294:	mov	r0, r5
   13298:	bl	11328 <fchdir@plt>
   1329c:	mov	r4, r0
   132a0:	b	13240 <__assert_fail@plt+0x1e7c>
   132a4:	ldrdeq	r9, [r1], -r6
   132a8:	ldr	r2, [r0, #48]	; 0x30
   132ac:	ldr	r3, [pc, #164]	; 13358 <__assert_fail@plt+0x1f94>
   132b0:	push	{r4, r5, r6, r7, lr}
   132b4:	and	r3, r3, r2
   132b8:	cmp	r3, #0
   132bc:	sub	sp, sp, #28
   132c0:	beq	132f8 <__assert_fail@plt+0x1f34>
   132c4:	ldrd	r4, [r1, #64]	; 0x40
   132c8:	ldrd	r2, [r1, #160]	; 0xa0
   132cc:	ldr	r0, [r0, #56]	; 0x38
   132d0:	mov	r1, sp
   132d4:	strd	r4, [sp]
   132d8:	strd	r2, [sp, #8]
   132dc:	bl	15510 <__assert_fail@plt+0x414c>
   132e0:	cmp	r0, #0
   132e4:	bne	132ec <__assert_fail@plt+0x1f28>
   132e8:	bl	1137c <abort@plt>
   132ec:	bl	12ad0 <__assert_fail@plt+0x170c>
   132f0:	add	sp, sp, #28
   132f4:	pop	{r4, r5, r6, r7, pc}
   132f8:	ldr	ip, [r1, #4]
   132fc:	cmp	ip, #0
   13300:	beq	132f0 <__assert_fail@plt+0x1f2c>
   13304:	ldr	r3, [ip, #48]	; 0x30
   13308:	cmp	r3, #0
   1330c:	blt	132f0 <__assert_fail@plt+0x1f2c>
   13310:	ldr	r3, [r0, #56]	; 0x38
   13314:	ldrd	r4, [r3, #16]
   13318:	orrs	r2, r4, r5
   1331c:	beq	132e8 <__assert_fail@plt+0x1f24>
   13320:	ldrd	r4, [r3]
   13324:	ldrd	r6, [r1, #160]	; 0xa0
   13328:	cmp	r5, r7
   1332c:	cmpeq	r4, r6
   13330:	bne	132f0 <__assert_fail@plt+0x1f2c>
   13334:	ldrd	r6, [r3, #8]
   13338:	ldrd	r4, [r1, #64]	; 0x40
   1333c:	cmp	r7, r5
   13340:	cmpeq	r6, r4
   13344:	ldrdeq	r0, [ip, #64]	; 0x40
   13348:	strdeq	r0, [r3, #8]
   1334c:	ldrdeq	r0, [ip, #160]	; 0xa0
   13350:	strdeq	r0, [r3]
   13354:	b	132f0 <__assert_fail@plt+0x1f2c>
   13358:	andeq	r0, r0, r2, lsl #2
   1335c:	ldr	r3, [r0, #36]	; 0x24
   13360:	add	r1, r1, #256	; 0x100
   13364:	adds	r1, r1, r3
   13368:	push	{r4, r5, r6, lr}
   1336c:	mov	r5, r0
   13370:	bcc	13398 <__assert_fail@plt+0x1fd4>
   13374:	ldr	r0, [r0, #24]
   13378:	mov	r4, #0
   1337c:	bl	12ad0 <__assert_fail@plt+0x170c>
   13380:	str	r4, [r5, #24]
   13384:	bl	11268 <__errno_location@plt>
   13388:	mov	r3, #36	; 0x24
   1338c:	str	r3, [r0]
   13390:	mov	r0, r4
   13394:	pop	{r4, r5, r6, pc}
   13398:	str	r1, [r0, #36]	; 0x24
   1339c:	ldr	r0, [r0, #24]
   133a0:	bl	18084 <__assert_fail@plt+0x6cc0>
   133a4:	subs	r4, r0, #0
   133a8:	bne	133bc <__assert_fail@plt+0x1ff8>
   133ac:	ldr	r0, [r5, #24]
   133b0:	bl	12ad0 <__assert_fail@plt+0x170c>
   133b4:	str	r4, [r5, #24]
   133b8:	b	13390 <__assert_fail@plt+0x1fcc>
   133bc:	str	r4, [r5, #24]
   133c0:	mov	r0, #1
   133c4:	pop	{r4, r5, r6, pc}
   133c8:	ldr	r2, [r0, #48]	; 0x30
   133cc:	ldr	r3, [pc, #96]	; 13434 <__assert_fail@plt+0x2070>
   133d0:	push	{r0, r1, r4, lr}
   133d4:	and	r3, r3, r2
   133d8:	cmp	r3, #0
   133dc:	mov	r4, r0
   133e0:	beq	13414 <__assert_fail@plt+0x2050>
   133e4:	ldr	r3, [pc, #76]	; 13438 <__assert_fail@plt+0x2074>
   133e8:	ldr	r2, [pc, #76]	; 1343c <__assert_fail@plt+0x2078>
   133ec:	str	r3, [sp]
   133f0:	mov	r1, #0
   133f4:	ldr	r3, [pc, #68]	; 13440 <__assert_fail@plt+0x207c>
   133f8:	mov	r0, #31
   133fc:	bl	1500c <__assert_fail@plt+0x3c48>
   13400:	str	r0, [r4, #56]	; 0x38
   13404:	adds	r0, r0, #0
   13408:	movne	r0, #1
   1340c:	add	sp, sp, #8
   13410:	pop	{r4, pc}
   13414:	mov	r0, #32
   13418:	bl	18044 <__assert_fail@plt+0x6c80>
   1341c:	cmp	r0, #0
   13420:	str	r0, [r4, #56]	; 0x38
   13424:	beq	1340c <__assert_fail@plt+0x2048>
   13428:	bl	18150 <__assert_fail@plt+0x6d8c>
   1342c:	mov	r0, #1
   13430:	b	1340c <__assert_fail@plt+0x2048>
   13434:	andeq	r0, r0, r2, lsl #2
   13438:	ldrdeq	r2, [r1], -r0
   1343c:	andeq	r2, r1, r0, ror #22
   13440:	andeq	r2, r1, r4, lsr #22
   13444:	ldr	r2, [r0, #48]	; 0x30
   13448:	ldr	r3, [pc, #168]	; 134f8 <__assert_fail@plt+0x2134>
   1344c:	push	{r4, r5, r6, lr}
   13450:	and	r3, r3, r2
   13454:	cmp	r3, #0
   13458:	mov	r6, r0
   1345c:	mov	r4, r1
   13460:	beq	134d4 <__assert_fail@plt+0x2110>
   13464:	mov	r0, #24
   13468:	bl	18044 <__assert_fail@plt+0x6c80>
   1346c:	subs	r5, r0, #0
   13470:	bne	1347c <__assert_fail@plt+0x20b8>
   13474:	mov	r0, #0
   13478:	pop	{r4, r5, r6, pc}
   1347c:	ldrd	r2, [r4, #64]	; 0x40
   13480:	ldr	r0, [r6, #56]	; 0x38
   13484:	str	r4, [r5, #16]
   13488:	strd	r2, [r5]
   1348c:	ldrd	r2, [r4, #160]	; 0xa0
   13490:	mov	r1, r5
   13494:	strd	r2, [r5, #8]
   13498:	bl	154e0 <__assert_fail@plt+0x411c>
   1349c:	cmp	r5, r0
   134a0:	mov	r6, r0
   134a4:	bne	134b0 <__assert_fail@plt+0x20ec>
   134a8:	mov	r0, #1
   134ac:	pop	{r4, r5, r6, pc}
   134b0:	mov	r0, r5
   134b4:	bl	12ad0 <__assert_fail@plt+0x170c>
   134b8:	cmp	r6, #0
   134bc:	beq	13474 <__assert_fail@plt+0x20b0>
   134c0:	ldr	r3, [r6, #16]
   134c4:	str	r3, [r4]
   134c8:	mov	r3, #2
   134cc:	strh	r3, [r4, #56]	; 0x38
   134d0:	b	134a8 <__assert_fail@plt+0x20e4>
   134d4:	add	r1, r1, #64	; 0x40
   134d8:	ldr	r0, [r0, #56]	; 0x38
   134dc:	bl	1816c <__assert_fail@plt+0x6da8>
   134e0:	cmp	r0, #0
   134e4:	beq	134a8 <__assert_fail@plt+0x20e4>
   134e8:	mov	r3, #2
   134ec:	str	r4, [r4]
   134f0:	strh	r3, [r4, #56]	; 0x38
   134f4:	pop	{r4, r5, r6, pc}
   134f8:	andeq	r0, r0, r2, lsl #2
   134fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13500:	sub	sp, sp, #60	; 0x3c
   13504:	ldr	r5, [r0]
   13508:	mov	r4, r0
   1350c:	str	r1, [sp, #8]
   13510:	ldr	r3, [r5, #12]
   13514:	cmp	r3, #0
   13518:	str	r3, [sp, #4]
   1351c:	beq	13570 <__assert_fail@plt+0x21ac>
   13520:	mov	r0, r3
   13524:	bl	1131c <dirfd@plt>
   13528:	cmp	r0, #0
   1352c:	str	r0, [sp, #52]	; 0x34
   13530:	bge	135e4 <__assert_fail@plt+0x2220>
   13534:	ldr	r0, [r5, #12]
   13538:	mov	r6, #0
   1353c:	bl	113a0 <closedir@plt>
   13540:	str	r6, [r5, #12]
   13544:	ldr	r3, [sp, #8]
   13548:	cmp	r3, #3
   1354c:	bne	13710 <__assert_fail@plt+0x234c>
   13550:	mov	r3, #4
   13554:	strh	r3, [r5, #56]	; 0x38
   13558:	bl	11268 <__errno_location@plt>
   1355c:	ldr	r3, [r0]
   13560:	str	r3, [r5, #32]
   13564:	mov	r0, r6
   13568:	add	sp, sp, #60	; 0x3c
   1356c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13570:	ldr	r3, [r0, #48]	; 0x30
   13574:	ldr	r1, [r5, #24]
   13578:	and	r2, r3, #516	; 0x204
   1357c:	cmp	r2, #512	; 0x200
   13580:	mvnne	r0, #99	; 0x63
   13584:	ldreq	r0, [r0, #32]
   13588:	ands	r2, r3, #16
   1358c:	beq	135ac <__assert_fail@plt+0x21e8>
   13590:	tst	r3, #1
   13594:	moveq	r2, #32768	; 0x8000
   13598:	beq	135ac <__assert_fail@plt+0x21e8>
   1359c:	ldr	r2, [r5, #48]	; 0x30
   135a0:	cmp	r2, #0
   135a4:	movne	r2, #32768	; 0x8000
   135a8:	moveq	r2, #0
   135ac:	add	r3, sp, #52	; 0x34
   135b0:	bl	15768 <__assert_fail@plt+0x43a4>
   135b4:	cmp	r0, #0
   135b8:	mov	r6, r0
   135bc:	str	r0, [r5, #12]
   135c0:	beq	13544 <__assert_fail@plt+0x2180>
   135c4:	ldrh	r3, [r5, #56]	; 0x38
   135c8:	cmp	r3, #11
   135cc:	bne	13718 <__assert_fail@plt+0x2354>
   135d0:	mov	r2, #0
   135d4:	mov	r1, r5
   135d8:	mov	r0, r4
   135dc:	bl	12bec <__assert_fail@plt+0x1828>
   135e0:	strh	r0, [r5, #56]	; 0x38
   135e4:	ldr	r3, [r4, #44]	; 0x2c
   135e8:	cmp	r3, #0
   135ec:	ldr	r3, [pc, #1824]	; 13d14 <__assert_fail@plt+0x2950>
   135f0:	mvnne	r3, #0
   135f4:	str	r3, [sp, #36]	; 0x24
   135f8:	ldr	r3, [sp, #4]
   135fc:	cmp	r3, #0
   13600:	beq	13764 <__assert_fail@plt+0x23a0>
   13604:	mov	r3, #1
   13608:	str	r3, [sp, #20]
   1360c:	ldr	fp, [r5, #40]	; 0x28
   13610:	ldr	r2, [r5, #28]
   13614:	sub	r3, fp, #1
   13618:	mov	r9, #0
   1361c:	ldrb	r2, [r2, r3]
   13620:	mov	r8, r9
   13624:	mov	r6, r9
   13628:	cmp	r2, #47	; 0x2f
   1362c:	moveq	fp, r3
   13630:	ldr	r3, [r4, #48]	; 0x30
   13634:	str	r9, [sp, #24]
   13638:	ands	r3, r3, #4
   1363c:	streq	r3, [sp]
   13640:	ldrne	r3, [r4, #24]
   13644:	str	r9, [sp, #32]
   13648:	addne	r2, r3, fp
   1364c:	addne	r2, r2, #1
   13650:	strne	r2, [sp]
   13654:	movne	r2, #47	; 0x2f
   13658:	strbne	r2, [r3, fp]
   1365c:	add	r3, fp, #1
   13660:	str	r3, [sp, #16]
   13664:	ldr	r3, [r4, #36]	; 0x24
   13668:	add	r2, fp, #1
   1366c:	sub	r3, r3, r2
   13670:	str	r3, [sp, #28]
   13674:	ldr	r3, [r5, #48]	; 0x30
   13678:	add	r3, r3, #1
   1367c:	str	r3, [sp, #40]	; 0x28
   13680:	ldr	r7, [r5, #12]
   13684:	cmp	r7, #0
   13688:	bne	138a8 <__assert_fail@plt+0x24e4>
   1368c:	ldr	r3, [sp, #24]
   13690:	cmp	r3, #0
   13694:	bne	13bd4 <__assert_fail@plt+0x2810>
   13698:	ldr	r3, [r4, #48]	; 0x30
   1369c:	tst	r3, #4
   136a0:	bne	13c50 <__assert_fail@plt+0x288c>
   136a4:	ldr	r3, [sp, #20]
   136a8:	ldr	r2, [sp, #4]
   136ac:	cmp	r2, #0
   136b0:	movne	r3, #0
   136b4:	andeq	r3, r3, #1
   136b8:	cmp	r3, #0
   136bc:	beq	13c94 <__assert_fail@plt+0x28d0>
   136c0:	ldr	r3, [sp, #8]
   136c4:	cmp	r8, #0
   136c8:	cmpne	r3, #1
   136cc:	bne	13cc0 <__assert_fail@plt+0x28fc>
   136d0:	ldr	r3, [r5, #48]	; 0x30
   136d4:	cmp	r3, #0
   136d8:	bne	13c7c <__assert_fail@plt+0x28b8>
   136dc:	mov	r0, r4
   136e0:	bl	130bc <__assert_fail@plt+0x1cf8>
   136e4:	adds	r0, r0, #0
   136e8:	movne	r0, #1
   136ec:	cmp	r0, #0
   136f0:	beq	13c94 <__assert_fail@plt+0x28d0>
   136f4:	mov	r3, #7
   136f8:	strh	r3, [r5, #56]	; 0x38
   136fc:	ldr	r3, [r4, #48]	; 0x30
   13700:	orr	r3, r3, #8192	; 0x2000
   13704:	str	r3, [r4, #48]	; 0x30
   13708:	mov	r0, r6
   1370c:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   13710:	mov	r6, #0
   13714:	b	13564 <__assert_fail@plt+0x21a0>
   13718:	ldr	r3, [r4, #48]	; 0x30
   1371c:	tst	r3, #256	; 0x100
   13720:	beq	135e4 <__assert_fail@plt+0x2220>
   13724:	mov	r1, r5
   13728:	mov	r0, r4
   1372c:	bl	132a8 <__assert_fail@plt+0x1ee4>
   13730:	mov	r2, #0
   13734:	mov	r1, r5
   13738:	mov	r0, r4
   1373c:	bl	12bec <__assert_fail@plt+0x1828>
   13740:	mov	r1, r5
   13744:	mov	r0, r4
   13748:	bl	13444 <__assert_fail@plt+0x2080>
   1374c:	subs	r6, r0, #0
   13750:	bne	135e4 <__assert_fail@plt+0x2220>
   13754:	bl	11268 <__errno_location@plt>
   13758:	mov	r3, #12
   1375c:	str	r3, [r0]
   13760:	b	13564 <__assert_fail@plt+0x21a0>
   13764:	ldr	r3, [sp, #8]
   13768:	cmp	r3, #2
   1376c:	beq	137bc <__assert_fail@plt+0x23f8>
   13770:	ldr	r3, [r4, #48]	; 0x30
   13774:	and	r3, r3, #56	; 0x38
   13778:	cmp	r3, #24
   1377c:	bne	13874 <__assert_fail@plt+0x24b0>
   13780:	ldr	r3, [r5, #84]	; 0x54
   13784:	cmp	r3, #2
   13788:	bne	13874 <__assert_fail@plt+0x24b0>
   1378c:	ldr	r1, [sp, #52]	; 0x34
   13790:	mov	r0, r5
   13794:	bl	12f3c <__assert_fail@plt+0x1b78>
   13798:	ldr	r3, [pc, #1400]	; 13d18 <__assert_fail@plt+0x2954>
   1379c:	cmp	r0, r3
   137a0:	beq	13874 <__assert_fail@plt+0x24b0>
   137a4:	bgt	1385c <__assert_fail@plt+0x2498>
   137a8:	ldr	r3, [pc, #1388]	; 13d1c <__assert_fail@plt+0x2958>
   137ac:	cmp	r0, r3
   137b0:	beq	13874 <__assert_fail@plt+0x24b0>
   137b4:	cmp	r0, #0
   137b8:	beq	13874 <__assert_fail@plt+0x24b0>
   137bc:	mov	r3, #0
   137c0:	mov	r6, r3
   137c4:	ldr	r3, [sp, #8]
   137c8:	sub	r7, r3, #3
   137cc:	clz	r7, r7
   137d0:	lsr	r7, r7, #5
   137d4:	orrs	r3, r6, r7
   137d8:	str	r3, [sp, #20]
   137dc:	beq	1360c <__assert_fail@plt+0x2248>
   137e0:	ldr	r3, [r4, #48]	; 0x30
   137e4:	tst	r3, #512	; 0x200
   137e8:	beq	13800 <__assert_fail@plt+0x243c>
   137ec:	mov	r2, #3
   137f0:	ldr	r1, [pc, #1320]	; 13d20 <__assert_fail@plt+0x295c>
   137f4:	ldr	r0, [sp, #52]	; 0x34
   137f8:	bl	182c4 <__assert_fail@plt+0x6f00>
   137fc:	str	r0, [sp, #52]	; 0x34
   13800:	ldr	r2, [sp, #52]	; 0x34
   13804:	cmp	r2, #0
   13808:	bge	1387c <__assert_fail@plt+0x24b8>
   1380c:	tst	r6, r7
   13810:	bne	13898 <__assert_fail@plt+0x24d4>
   13814:	ldrh	r3, [r5, #58]	; 0x3a
   13818:	ldr	r0, [r5, #12]
   1381c:	orr	r3, r3, #1
   13820:	strh	r3, [r5, #58]	; 0x3a
   13824:	bl	113a0 <closedir@plt>
   13828:	ldr	r2, [r4, #48]	; 0x30
   1382c:	mov	r3, #0
   13830:	tst	r2, #512	; 0x200
   13834:	str	r3, [r5, #12]
   13838:	mov	r6, r3
   1383c:	beq	13850 <__assert_fail@plt+0x248c>
   13840:	ldr	r0, [sp, #52]	; 0x34
   13844:	cmp	r0, r3
   13848:	blt	13850 <__assert_fail@plt+0x248c>
   1384c:	bl	11388 <close@plt>
   13850:	str	r6, [r5, #12]
   13854:	mov	r3, #0
   13858:	b	13608 <__assert_fail@plt+0x2244>
   1385c:	ldr	r3, [pc, #1216]	; 13d24 <__assert_fail@plt+0x2960>
   13860:	cmp	r0, r3
   13864:	beq	13874 <__assert_fail@plt+0x24b0>
   13868:	ldr	r3, [pc, #1208]	; 13d28 <__assert_fail@plt+0x2964>
   1386c:	cmp	r0, r3
   13870:	b	137b8 <__assert_fail@plt+0x23f4>
   13874:	mov	r3, #1
   13878:	b	137c0 <__assert_fail@plt+0x23fc>
   1387c:	mov	r3, #0
   13880:	mov	r1, r5
   13884:	mov	r0, r4
   13888:	bl	1310c <__assert_fail@plt+0x1d48>
   1388c:	cmp	r0, #0
   13890:	bne	1380c <__assert_fail@plt+0x2448>
   13894:	b	13604 <__assert_fail@plt+0x2240>
   13898:	bl	11268 <__errno_location@plt>
   1389c:	ldr	r3, [r0]
   138a0:	str	r3, [r5, #32]
   138a4:	b	13814 <__assert_fail@plt+0x2450>
   138a8:	bl	11268 <__errno_location@plt>
   138ac:	mov	r3, #0
   138b0:	str	r0, [sp, #12]
   138b4:	str	r3, [r0]
   138b8:	mov	r0, r7
   138bc:	bl	11304 <readdir64@plt>
   138c0:	subs	sl, r0, #0
   138c4:	bne	13910 <__assert_fail@plt+0x254c>
   138c8:	ldr	r3, [sp, #12]
   138cc:	ldr	r3, [r3]
   138d0:	cmp	r3, #0
   138d4:	beq	138f4 <__assert_fail@plt+0x2530>
   138d8:	str	r3, [r5, #32]
   138dc:	ldr	r3, [sp, #4]
   138e0:	cmp	r8, #0
   138e4:	cmpeq	r3, #0
   138e8:	moveq	r3, #4
   138ec:	movne	r3, #7
   138f0:	strh	r3, [r5, #56]	; 0x38
   138f4:	ldr	r0, [r5, #12]
   138f8:	cmp	r0, #0
   138fc:	beq	1368c <__assert_fail@plt+0x22c8>
   13900:	bl	113a0 <closedir@plt>
   13904:	mov	r3, #0
   13908:	str	r3, [r5, #12]
   1390c:	b	1368c <__assert_fail@plt+0x22c8>
   13910:	ldr	r3, [r4, #48]	; 0x30
   13914:	tst	r3, #32
   13918:	bne	13940 <__assert_fail@plt+0x257c>
   1391c:	ldrb	r3, [sl, #19]
   13920:	cmp	r3, #46	; 0x2e
   13924:	bne	13940 <__assert_fail@plt+0x257c>
   13928:	ldrb	r3, [sl, #20]
   1392c:	cmp	r3, #0
   13930:	beq	13680 <__assert_fail@plt+0x22bc>
   13934:	ldrh	r3, [sl, #20]
   13938:	cmp	r3, #46	; 0x2e
   1393c:	beq	13680 <__assert_fail@plt+0x22bc>
   13940:	add	r7, sl, #19
   13944:	mov	r0, r7
   13948:	bl	11238 <strlen@plt>
   1394c:	mov	r1, r7
   13950:	mov	r2, r0
   13954:	str	r0, [sp, #44]	; 0x2c
   13958:	mov	r0, r4
   1395c:	bl	12dec <__assert_fail@plt+0x1a28>
   13960:	subs	r7, r0, #0
   13964:	beq	139a4 <__assert_fail@plt+0x25e0>
   13968:	ldr	r2, [sp, #28]
   1396c:	ldr	r3, [sp, #44]	; 0x2c
   13970:	cmp	r2, r3
   13974:	bhi	13a24 <__assert_fail@plt+0x2660>
   13978:	ldr	r2, [r4, #24]
   1397c:	add	r1, fp, #2
   13980:	add	r1, r1, r3
   13984:	mov	r0, r4
   13988:	str	r2, [sp, #44]	; 0x2c
   1398c:	str	r3, [sp, #28]
   13990:	bl	1335c <__assert_fail@plt+0x1f98>
   13994:	ldr	r3, [sp, #28]
   13998:	ldr	r2, [sp, #44]	; 0x2c
   1399c:	cmp	r0, #0
   139a0:	bne	139ec <__assert_fail@plt+0x2628>
   139a4:	ldr	r3, [sp, #12]
   139a8:	mov	r0, r7
   139ac:	ldr	r8, [r3]
   139b0:	bl	12ad0 <__assert_fail@plt+0x170c>
   139b4:	mov	r0, r6
   139b8:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   139bc:	ldr	r0, [r5, #12]
   139c0:	bl	113a0 <closedir@plt>
   139c4:	mov	r3, #7
   139c8:	strh	r3, [r5, #56]	; 0x38
   139cc:	ldr	r3, [r4, #48]	; 0x30
   139d0:	mov	r6, #0
   139d4:	orr	r3, r3, #8192	; 0x2000
   139d8:	str	r6, [r5, #12]
   139dc:	str	r3, [r4, #48]	; 0x30
   139e0:	ldr	r3, [sp, #12]
   139e4:	str	r8, [r3]
   139e8:	b	13564 <__assert_fail@plt+0x21a0>
   139ec:	ldr	r1, [r4, #24]
   139f0:	cmp	r2, r1
   139f4:	ldreq	r0, [sp, #24]
   139f8:	beq	13a10 <__assert_fail@plt+0x264c>
   139fc:	ldr	r2, [r4, #48]	; 0x30
   13a00:	tst	r2, #4
   13a04:	ldrne	r2, [sp, #16]
   13a08:	addne	r2, r1, r2
   13a0c:	strne	r2, [sp]
   13a10:	ldr	r2, [r4, #36]	; 0x24
   13a14:	ldr	r1, [sp, #16]
   13a18:	str	r0, [sp, #24]
   13a1c:	sub	r2, r2, r1
   13a20:	str	r2, [sp, #28]
   13a24:	ldr	r2, [sp, #16]
   13a28:	adds	r3, r2, r3
   13a2c:	bcc	13a74 <__assert_fail@plt+0x26b0>
   13a30:	mov	r0, r7
   13a34:	bl	12ad0 <__assert_fail@plt+0x170c>
   13a38:	mov	r0, r6
   13a3c:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   13a40:	ldr	r0, [r5, #12]
   13a44:	bl	113a0 <closedir@plt>
   13a48:	mov	r3, #7
   13a4c:	strh	r3, [r5, #56]	; 0x38
   13a50:	ldr	r3, [r4, #48]	; 0x30
   13a54:	ldr	r2, [sp, #12]
   13a58:	orr	r3, r3, #8192	; 0x2000
   13a5c:	mov	r6, #0
   13a60:	str	r6, [r5, #12]
   13a64:	str	r3, [r4, #48]	; 0x30
   13a68:	mov	r3, #36	; 0x24
   13a6c:	str	r3, [r2]
   13a70:	b	13564 <__assert_fail@plt+0x21a0>
   13a74:	ldr	r2, [sp, #40]	; 0x28
   13a78:	str	r2, [r7, #48]	; 0x30
   13a7c:	ldr	r2, [r4]
   13a80:	str	r3, [r7, #40]	; 0x28
   13a84:	str	r2, [r7, #4]
   13a88:	ldrd	r2, [sl]
   13a8c:	strd	r2, [r7, #160]	; 0xa0
   13a90:	ldr	r3, [r4, #48]	; 0x30
   13a94:	tst	r3, #4
   13a98:	addeq	r3, r7, #168	; 0xa8
   13a9c:	streq	r3, [r7, #24]
   13aa0:	beq	13ac0 <__assert_fail@plt+0x26fc>
   13aa4:	ldr	r3, [r7, #28]
   13aa8:	ldr	r2, [r7, #52]	; 0x34
   13aac:	str	r3, [r7, #24]
   13ab0:	add	r2, r2, #1
   13ab4:	add	r1, r7, #168	; 0xa8
   13ab8:	ldr	r0, [sp]
   13abc:	bl	110c4 <memmove@plt>
   13ac0:	ldr	r3, [r4, #44]	; 0x2c
   13ac4:	cmp	r3, #0
   13ac8:	beq	13ad8 <__assert_fail@plt+0x2714>
   13acc:	ldr	r2, [r4, #48]	; 0x30
   13ad0:	ands	r2, r2, #1024	; 0x400
   13ad4:	beq	13bc0 <__assert_fail@plt+0x27fc>
   13ad8:	ldr	r3, [r4, #48]	; 0x30
   13adc:	ands	r1, r3, #8
   13ae0:	beq	13b04 <__assert_fail@plt+0x2740>
   13ae4:	ldrb	r2, [sl, #18]
   13ae8:	ands	r1, r2, #251	; 0xfb
   13aec:	beq	13b04 <__assert_fail@plt+0x2740>
   13af0:	lsr	r3, r3, #4
   13af4:	and	r3, r3, #1
   13af8:	cmp	r2, #10
   13afc:	moveq	r1, r3
   13b00:	orrne	r1, r3, #1
   13b04:	mov	r3, #11
   13b08:	strh	r3, [r7, #56]	; 0x38
   13b0c:	ldrb	r2, [sl, #18]
   13b10:	sub	r2, r2, #1
   13b14:	cmp	r2, r3
   13b18:	lslls	r2, r2, #1
   13b1c:	ldrls	r3, [pc, #520]	; 13d2c <__assert_fail@plt+0x2968>
   13b20:	movhi	r3, #0
   13b24:	ldrhls	r3, [r3, r2]
   13b28:	cmp	r1, #0
   13b2c:	movne	r2, #1
   13b30:	str	r3, [r7, #80]	; 0x50
   13b34:	moveq	r2, #2
   13b38:	mov	r3, #0
   13b3c:	strd	r2, [r7, #112]	; 0x70
   13b40:	mov	r3, #0
   13b44:	cmp	r6, r3
   13b48:	str	r3, [r7, #8]
   13b4c:	ldrne	r3, [sp, #32]
   13b50:	moveq	r6, r7
   13b54:	strne	r7, [r3, #8]
   13b58:	ldr	r3, [pc, #464]	; 13d30 <__assert_fail@plt+0x296c>
   13b5c:	cmp	r8, r3
   13b60:	bne	13ba8 <__assert_fail@plt+0x27e4>
   13b64:	ldr	r3, [r4, #44]	; 0x2c
   13b68:	cmp	r3, #0
   13b6c:	bne	13ba8 <__assert_fail@plt+0x27e4>
   13b70:	ldr	r1, [sp, #52]	; 0x34
   13b74:	mov	r0, r5
   13b78:	bl	12f3c <__assert_fail@plt+0x1b78>
   13b7c:	ldr	r3, [pc, #404]	; 13d18 <__assert_fail@plt+0x2954>
   13b80:	cmp	r0, r3
   13b84:	beq	13ba4 <__assert_fail@plt+0x27e0>
   13b88:	ldr	r3, [pc, #420]	; 13d34 <__assert_fail@plt+0x2970>
   13b8c:	cmp	r0, r3
   13b90:	beq	13ba4 <__assert_fail@plt+0x27e0>
   13b94:	ldr	r3, [pc, #384]	; 13d1c <__assert_fail@plt+0x2958>
   13b98:	cmp	r0, r3
   13b9c:	movne	r9, #1
   13ba0:	bne	13ba8 <__assert_fail@plt+0x27e4>
   13ba4:	mov	r9, #0
   13ba8:	ldr	r3, [sp, #36]	; 0x24
   13bac:	add	r8, r8, #1
   13bb0:	cmp	r3, r8
   13bb4:	bls	1368c <__assert_fail@plt+0x22c8>
   13bb8:	str	r7, [sp, #32]
   13bbc:	b	13680 <__assert_fail@plt+0x22bc>
   13bc0:	mov	r1, r7
   13bc4:	mov	r0, r4
   13bc8:	bl	12bec <__assert_fail@plt+0x1828>
   13bcc:	strh	r0, [r7, #56]	; 0x38
   13bd0:	b	13b40 <__assert_fail@plt+0x277c>
   13bd4:	ldr	r1, [r4, #24]
   13bd8:	ldr	r3, [r4, #4]
   13bdc:	cmp	r3, #0
   13be0:	bne	13c28 <__assert_fail@plt+0x2864>
   13be4:	mov	r3, r6
   13be8:	ldr	r2, [r3, #48]	; 0x30
   13bec:	cmp	r2, #0
   13bf0:	blt	13698 <__assert_fail@plt+0x22d4>
   13bf4:	ldr	r2, [r3, #24]
   13bf8:	add	r0, r3, #168	; 0xa8
   13bfc:	cmp	r2, r0
   13c00:	ldrne	r0, [r3, #28]
   13c04:	str	r1, [r3, #28]
   13c08:	subne	r2, r2, r0
   13c0c:	addne	r2, r1, r2
   13c10:	strne	r2, [r3, #24]
   13c14:	ldr	r2, [r3, #8]
   13c18:	cmp	r2, #0
   13c1c:	ldreq	r2, [r3, #4]
   13c20:	mov	r3, r2
   13c24:	b	13be8 <__assert_fail@plt+0x2824>
   13c28:	ldr	r2, [r3, #24]
   13c2c:	add	r0, r3, #168	; 0xa8
   13c30:	cmp	r2, r0
   13c34:	ldrne	r0, [r3, #28]
   13c38:	str	r1, [r3, #28]
   13c3c:	subne	r2, r2, r0
   13c40:	addne	r2, r1, r2
   13c44:	strne	r2, [r3, #24]
   13c48:	ldr	r3, [r3, #8]
   13c4c:	b	13bdc <__assert_fail@plt+0x2818>
   13c50:	ldr	r3, [r4, #36]	; 0x24
   13c54:	ldr	r2, [sp, #16]
   13c58:	cmp	r8, #0
   13c5c:	cmpne	r3, r2
   13c60:	ldreq	r3, [sp]
   13c64:	subeq	r3, r3, #1
   13c68:	streq	r3, [sp]
   13c6c:	ldr	r2, [sp]
   13c70:	mov	r3, #0
   13c74:	strb	r3, [r2]
   13c78:	b	136a4 <__assert_fail@plt+0x22e0>
   13c7c:	ldr	r3, [pc, #180]	; 13d38 <__assert_fail@plt+0x2974>
   13c80:	mvn	r2, #0
   13c84:	ldr	r1, [r5, #4]
   13c88:	mov	r0, r4
   13c8c:	bl	1310c <__assert_fail@plt+0x1d48>
   13c90:	b	136e4 <__assert_fail@plt+0x2320>
   13c94:	cmp	r8, #0
   13c98:	bne	13cc0 <__assert_fail@plt+0x28fc>
   13c9c:	ldr	r3, [sp, #8]
   13ca0:	cmp	r3, #3
   13ca4:	bne	13708 <__assert_fail@plt+0x2344>
   13ca8:	ldrh	r3, [r5, #56]	; 0x38
   13cac:	cmp	r3, #4
   13cb0:	cmpne	r3, #7
   13cb4:	movne	r3, #6
   13cb8:	strhne	r3, [r5, #56]	; 0x38
   13cbc:	b	13708 <__assert_fail@plt+0x2344>
   13cc0:	cmp	r9, #0
   13cc4:	beq	13cec <__assert_fail@plt+0x2928>
   13cc8:	ldr	r3, [pc, #108]	; 13d3c <__assert_fail@plt+0x2978>
   13ccc:	mov	r1, r6
   13cd0:	str	r3, [r4, #44]	; 0x2c
   13cd4:	mov	r2, r8
   13cd8:	mov	r0, r4
   13cdc:	bl	12d24 <__assert_fail@plt+0x1960>
   13ce0:	mov	r3, #0
   13ce4:	str	r3, [r4, #44]	; 0x2c
   13ce8:	mov	r6, r0
   13cec:	ldr	r3, [r4, #44]	; 0x2c
   13cf0:	cmp	r3, #0
   13cf4:	cmpne	r8, #1
   13cf8:	bls	13564 <__assert_fail@plt+0x21a0>
   13cfc:	mov	r1, r6
   13d00:	mov	r2, r8
   13d04:	mov	r0, r4
   13d08:	bl	12d24 <__assert_fail@plt+0x1960>
   13d0c:	mov	r6, r0
   13d10:	b	13564 <__assert_fail@plt+0x21a0>
   13d14:	andeq	r8, r1, r0, lsr #13
   13d18:	andeq	r6, r0, r9, ror #18
   13d1c:			; <UNDEFINED> instruction: 0xff534d42
   13d20:	andeq	r0, r0, r6, lsl #8
   13d24:	andeq	r9, r0, r0, lsr #31
   13d28:	movtpl	r4, #24911	; 0x614f
   13d2c:			; <UNDEFINED> instruction: 0x00019ebe
   13d30:	andeq	r2, r0, r0, lsl r7
   13d34:			; <UNDEFINED> instruction: 0x01021994
   13d38:	ldrdeq	r9, [r1], -r6
   13d3c:			; <UNDEFINED> instruction: 0x00012bb8
   13d40:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d44:	bic	r4, r1, #4080	; 0xff0
   13d48:	bic	r4, r4, #15
   13d4c:	cmp	r4, #0
   13d50:	beq	13d68 <__assert_fail@plt+0x29a4>
   13d54:	bl	11268 <__errno_location@plt>
   13d58:	mov	r3, #22
   13d5c:	str	r3, [r0]
   13d60:	mov	r4, #0
   13d64:	b	13d84 <__assert_fail@plt+0x29c0>
   13d68:	and	r3, r1, #516	; 0x204
   13d6c:	cmp	r3, #516	; 0x204
   13d70:	mov	r5, r1
   13d74:	bne	13d90 <__assert_fail@plt+0x29cc>
   13d78:	bl	11268 <__errno_location@plt>
   13d7c:	mov	r3, #22
   13d80:	str	r3, [r0]
   13d84:	mov	r0, r4
   13d88:	add	sp, sp, #12
   13d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d90:	ands	r4, r1, #18
   13d94:	beq	13d78 <__assert_fail@plt+0x29b4>
   13d98:	mov	fp, r0
   13d9c:	mov	r1, #96	; 0x60
   13da0:	mov	r0, #1
   13da4:	mov	sl, r2
   13da8:	bl	17ffc <__assert_fail@plt+0x6c38>
   13dac:	subs	r4, r0, #0
   13db0:	beq	13d84 <__assert_fail@plt+0x29c0>
   13db4:	tst	r5, #2
   13db8:	bicne	r3, r5, #512	; 0x200
   13dbc:	orrne	r3, r3, #4
   13dc0:	sub	r7, fp, #4
   13dc4:	mov	r6, #0
   13dc8:	strne	r3, [r4, #48]	; 0x30
   13dcc:	mvn	r3, #99	; 0x63
   13dd0:	str	sl, [r4, #44]	; 0x2c
   13dd4:	streq	r5, [r4, #48]	; 0x30
   13dd8:	str	r3, [r4, #32]
   13ddc:	ldr	r9, [r7, #4]!
   13de0:	cmp	r9, #0
   13de4:	bne	13f0c <__assert_fail@plt+0x2b48>
   13de8:	add	r1, r6, #1
   13dec:	cmp	r1, #4096	; 0x1000
   13df0:	movcc	r1, #4096	; 0x1000
   13df4:	mov	r0, r4
   13df8:	bl	1335c <__assert_fail@plt+0x1f98>
   13dfc:	subs	r3, r0, #0
   13e00:	str	r3, [sp]
   13e04:	beq	14020 <__assert_fail@plt+0x2c5c>
   13e08:	ldr	r7, [fp]
   13e0c:	cmp	r7, #0
   13e10:	beq	13e34 <__assert_fail@plt+0x2a70>
   13e14:	mov	r2, r9
   13e18:	ldr	r1, [pc, #524]	; 1402c <__assert_fail@plt+0x2c68>
   13e1c:	mov	r0, r4
   13e20:	bl	12dec <__assert_fail@plt+0x1a28>
   13e24:	subs	r7, r0, #0
   13e28:	beq	14018 <__assert_fail@plt+0x2c54>
   13e2c:	mvn	r3, #0
   13e30:	str	r3, [r7, #48]	; 0x30
   13e34:	cmp	sl, #0
   13e38:	lsr	r5, r5, #11
   13e3c:	ldrne	r8, [r4, #48]	; 0x30
   13e40:	eor	r5, r5, #1
   13e44:	lsrne	r8, r8, #10
   13e48:	andne	r3, r8, #1
   13e4c:	mov	r8, #0
   13e50:	mov	r9, r8
   13e54:	mov	r6, r8
   13e58:	strne	r3, [sp]
   13e5c:	and	r3, r5, #1
   13e60:	str	r3, [sp, #4]
   13e64:	ldr	r5, [fp, r9, lsl #2]
   13e68:	cmp	r5, #0
   13e6c:	bne	13f20 <__assert_fail@plt+0x2b5c>
   13e70:	cmp	sl, #0
   13e74:	cmpne	r9, #1
   13e78:	bls	13e90 <__assert_fail@plt+0x2acc>
   13e7c:	mov	r1, r6
   13e80:	mov	r2, r9
   13e84:	mov	r0, r4
   13e88:	bl	12d24 <__assert_fail@plt+0x1960>
   13e8c:	mov	r6, r0
   13e90:	mov	r2, #0
   13e94:	ldr	r1, [pc, #400]	; 1402c <__assert_fail@plt+0x2c68>
   13e98:	mov	r0, r4
   13e9c:	bl	12dec <__assert_fail@plt+0x1a28>
   13ea0:	cmp	r0, #0
   13ea4:	str	r0, [r4]
   13ea8:	beq	14008 <__assert_fail@plt+0x2c44>
   13eac:	mov	r3, #9
   13eb0:	strh	r3, [r0, #56]	; 0x38
   13eb4:	mov	r3, #1
   13eb8:	str	r6, [r0, #8]
   13ebc:	str	r3, [r0, #48]	; 0x30
   13ec0:	mov	r0, r4
   13ec4:	bl	133c8 <__assert_fail@plt+0x2004>
   13ec8:	cmp	r0, #0
   13ecc:	beq	14008 <__assert_fail@plt+0x2c44>
   13ed0:	ldr	r3, [r4, #48]	; 0x30
   13ed4:	tst	r3, #516	; 0x204
   13ed8:	bne	13efc <__assert_fail@plt+0x2b38>
   13edc:	ldr	r1, [pc, #332]	; 14030 <__assert_fail@plt+0x2c6c>
   13ee0:	mov	r0, r4
   13ee4:	bl	12e60 <__assert_fail@plt+0x1a9c>
   13ee8:	cmp	r0, #0
   13eec:	str	r0, [r4, #28]
   13ef0:	ldrlt	r3, [r4, #48]	; 0x30
   13ef4:	orrlt	r3, r3, #4
   13ef8:	strlt	r3, [r4, #48]	; 0x30
   13efc:	mvn	r1, #0
   13f00:	add	r0, r4, #60	; 0x3c
   13f04:	bl	1560c <__assert_fail@plt+0x4248>
   13f08:	b	13d84 <__assert_fail@plt+0x29c0>
   13f0c:	mov	r0, r9
   13f10:	bl	11238 <strlen@plt>
   13f14:	cmp	r6, r0
   13f18:	movcc	r6, r0
   13f1c:	b	13ddc <__assert_fail@plt+0x2a18>
   13f20:	mov	r0, r5
   13f24:	bl	11238 <strlen@plt>
   13f28:	ldr	r1, [sp, #4]
   13f2c:	cmp	r0, #2
   13f30:	movls	r1, #0
   13f34:	andhi	r1, r1, #1
   13f38:	cmp	r1, #0
   13f3c:	mov	r2, r0
   13f40:	beq	13f70 <__assert_fail@plt+0x2bac>
   13f44:	sub	r0, r0, #1
   13f48:	add	r1, r5, r0
   13f4c:	ldrb	r0, [r5, r0]
   13f50:	cmp	r0, #47	; 0x2f
   13f54:	bne	13f70 <__assert_fail@plt+0x2bac>
   13f58:	ldrb	r0, [r1, #-1]!
   13f5c:	cmp	r0, #47	; 0x2f
   13f60:	bne	13f70 <__assert_fail@plt+0x2bac>
   13f64:	sub	r2, r2, #1
   13f68:	cmp	r2, #1
   13f6c:	bne	13f58 <__assert_fail@plt+0x2b94>
   13f70:	mov	r1, r5
   13f74:	mov	r0, r4
   13f78:	bl	12dec <__assert_fail@plt+0x1a28>
   13f7c:	subs	r5, r0, #0
   13f80:	beq	14008 <__assert_fail@plt+0x2c44>
   13f84:	mov	r2, #0
   13f88:	str	r2, [r5, #48]	; 0x30
   13f8c:	add	r2, r5, #168	; 0xa8
   13f90:	str	r2, [r5, #24]
   13f94:	ldr	r2, [sp]
   13f98:	str	r7, [r5, #4]
   13f9c:	cmp	r6, #0
   13fa0:	moveq	r2, #0
   13fa4:	andne	r2, r2, #1
   13fa8:	cmp	r2, #0
   13fac:	beq	13ff4 <__assert_fail@plt+0x2c30>
   13fb0:	mov	r0, #2
   13fb4:	mov	r1, #0
   13fb8:	mov	r2, #11
   13fbc:	strh	r2, [r5, #56]	; 0x38
   13fc0:	strd	r0, [r5, #112]	; 0x70
   13fc4:	cmp	sl, #0
   13fc8:	strne	r6, [r5, #8]
   13fcc:	bne	13fe8 <__assert_fail@plt+0x2c24>
   13fd0:	cmp	r6, #0
   13fd4:	str	sl, [r5, #8]
   13fd8:	moveq	r8, r5
   13fdc:	strne	r5, [r8, #8]
   13fe0:	movne	r8, r5
   13fe4:	movne	r5, r6
   13fe8:	add	r9, r9, #1
   13fec:	mov	r6, r5
   13ff0:	b	13e64 <__assert_fail@plt+0x2aa0>
   13ff4:	mov	r1, r5
   13ff8:	mov	r0, r4
   13ffc:	bl	12bec <__assert_fail@plt+0x1828>
   14000:	strh	r0, [r5, #56]	; 0x38
   14004:	b	13fc4 <__assert_fail@plt+0x2c00>
   14008:	mov	r0, r6
   1400c:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   14010:	mov	r0, r7
   14014:	bl	12ad0 <__assert_fail@plt+0x170c>
   14018:	ldr	r0, [r4, #24]
   1401c:	bl	12ad0 <__assert_fail@plt+0x170c>
   14020:	mov	r0, r4
   14024:	bl	12ad0 <__assert_fail@plt+0x170c>
   14028:	b	13d60 <__assert_fail@plt+0x299c>
   1402c:			; <UNDEFINED> instruction: 0x000196be
   14030:	ldrdeq	r9, [r1], -r7
   14034:	push	{r4, r5, r6, lr}
   14038:	mov	r4, r0
   1403c:	ldr	r0, [r0]
   14040:	cmp	r0, #0
   14044:	bne	140dc <__assert_fail@plt+0x2d18>
   14048:	ldr	r0, [r4, #4]
   1404c:	cmp	r0, #0
   14050:	beq	14058 <__assert_fail@plt+0x2c94>
   14054:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   14058:	ldr	r0, [r4, #8]
   1405c:	bl	12ad0 <__assert_fail@plt+0x170c>
   14060:	ldr	r0, [r4, #24]
   14064:	bl	12ad0 <__assert_fail@plt+0x170c>
   14068:	ldr	r3, [r4, #48]	; 0x30
   1406c:	tst	r3, #512	; 0x200
   14070:	beq	14108 <__assert_fail@plt+0x2d44>
   14074:	ldr	r0, [r4, #32]
   14078:	cmp	r0, #0
   1407c:	bge	140f0 <__assert_fail@plt+0x2d2c>
   14080:	mov	r5, #0
   14084:	add	r0, r4, #60	; 0x3c
   14088:	bl	12f08 <__assert_fail@plt+0x1b44>
   1408c:	ldr	r0, [r4, #52]	; 0x34
   14090:	cmp	r0, #0
   14094:	beq	1409c <__assert_fail@plt+0x2cd8>
   14098:	bl	15178 <__assert_fail@plt+0x3db4>
   1409c:	mov	r0, r4
   140a0:	bl	12edc <__assert_fail@plt+0x1b18>
   140a4:	mov	r0, r4
   140a8:	bl	12ad0 <__assert_fail@plt+0x170c>
   140ac:	cmp	r5, #0
   140b0:	beq	140c0 <__assert_fail@plt+0x2cfc>
   140b4:	bl	11268 <__errno_location@plt>
   140b8:	str	r5, [r0]
   140bc:	mvn	r5, #0
   140c0:	mov	r0, r5
   140c4:	pop	{r4, r5, r6, pc}
   140c8:	ldr	r5, [r0, #8]
   140cc:	cmp	r5, #0
   140d0:	ldreq	r5, [r0, #4]
   140d4:	bl	12ad0 <__assert_fail@plt+0x170c>
   140d8:	mov	r0, r5
   140dc:	ldr	r3, [r0, #48]	; 0x30
   140e0:	cmp	r3, #0
   140e4:	bge	140c8 <__assert_fail@plt+0x2d04>
   140e8:	bl	12ad0 <__assert_fail@plt+0x170c>
   140ec:	b	14048 <__assert_fail@plt+0x2c84>
   140f0:	bl	11388 <close@plt>
   140f4:	cmp	r0, #0
   140f8:	beq	14080 <__assert_fail@plt+0x2cbc>
   140fc:	bl	11268 <__errno_location@plt>
   14100:	ldr	r5, [r0]
   14104:	b	14084 <__assert_fail@plt+0x2cc0>
   14108:	tst	r3, #4
   1410c:	bne	14080 <__assert_fail@plt+0x2cbc>
   14110:	ldr	r0, [r4, #28]
   14114:	bl	11328 <fchdir@plt>
   14118:	subs	r5, r0, #0
   1411c:	beq	14128 <__assert_fail@plt+0x2d64>
   14120:	bl	11268 <__errno_location@plt>
   14124:	ldr	r5, [r0]
   14128:	ldr	r0, [r4, #28]
   1412c:	bl	11388 <close@plt>
   14130:	clz	r3, r5
   14134:	lsr	r3, r3, #5
   14138:	cmp	r0, #0
   1413c:	moveq	r3, #0
   14140:	cmp	r3, #0
   14144:	beq	14084 <__assert_fail@plt+0x2cc0>
   14148:	b	140fc <__assert_fail@plt+0x2d38>
   1414c:	push	{r4, r5, r6, r7, r8, lr}
   14150:	ldr	r4, [r0]
   14154:	cmp	r4, #0
   14158:	beq	14458 <__assert_fail@plt+0x3094>
   1415c:	ldr	r1, [r0, #48]	; 0x30
   14160:	mov	r5, r0
   14164:	ands	r2, r1, #8192	; 0x2000
   14168:	bne	14458 <__assert_fail@plt+0x3094>
   1416c:	ldrh	r3, [r4, #60]	; 0x3c
   14170:	mov	ip, #3
   14174:	strh	ip, [r4, #60]	; 0x3c
   14178:	cmp	r3, #1
   1417c:	bne	14194 <__assert_fail@plt+0x2dd0>
   14180:	mov	r1, r4
   14184:	bl	12bec <__assert_fail@plt+0x1828>
   14188:	strh	r0, [r4, #56]	; 0x38
   1418c:	mov	r0, r4
   14190:	pop	{r4, r5, r6, r7, r8, pc}
   14194:	cmp	r3, #2
   14198:	ldrh	r2, [r4, #56]	; 0x38
   1419c:	bne	1427c <__assert_fail@plt+0x2eb8>
   141a0:	sub	ip, r2, #12
   141a4:	cmp	ip, #1
   141a8:	bhi	1427c <__assert_fail@plt+0x2eb8>
   141ac:	mov	r2, #1
   141b0:	mov	r1, r4
   141b4:	bl	12bec <__assert_fail@plt+0x1828>
   141b8:	cmp	r0, #1
   141bc:	strh	r0, [r4, #56]	; 0x38
   141c0:	bne	14208 <__assert_fail@plt+0x2e44>
   141c4:	ldr	r3, [r5, #48]	; 0x30
   141c8:	tst	r3, #4
   141cc:	bne	14208 <__assert_fail@plt+0x2e44>
   141d0:	ldr	r1, [pc, #1332]	; 1470c <__assert_fail@plt+0x3348>
   141d4:	mov	r0, r5
   141d8:	bl	12e60 <__assert_fail@plt+0x1a9c>
   141dc:	cmp	r0, #0
   141e0:	str	r0, [r4, #36]	; 0x24
   141e4:	ldrhge	r3, [r4, #58]	; 0x3a
   141e8:	orrge	r3, r3, #2
   141ec:	strhge	r3, [r4, #58]	; 0x3a
   141f0:	bge	14208 <__assert_fail@plt+0x2e44>
   141f4:	bl	11268 <__errno_location@plt>
   141f8:	ldr	r3, [r0]
   141fc:	str	r3, [r4, #32]
   14200:	mov	r3, #7
   14204:	strh	r3, [r4, #56]	; 0x38
   14208:	ldrh	r3, [r4, #56]	; 0x38
   1420c:	str	r4, [r5]
   14210:	cmp	r3, #11
   14214:	bne	1423c <__assert_fail@plt+0x2e78>
   14218:	ldrd	r2, [r4, #112]	; 0x70
   1421c:	cmp	r3, #0
   14220:	cmpeq	r2, #2
   14224:	bne	145ac <__assert_fail@plt+0x31e8>
   14228:	mov	r2, #0
   1422c:	mov	r1, r4
   14230:	mov	r0, r5
   14234:	bl	12bec <__assert_fail@plt+0x1828>
   14238:	strh	r0, [r4, #56]	; 0x38
   1423c:	ldrh	r3, [r4, #56]	; 0x38
   14240:	cmp	r3, #1
   14244:	bne	1418c <__assert_fail@plt+0x2dc8>
   14248:	ldr	r3, [r4, #48]	; 0x30
   1424c:	cmp	r3, #0
   14250:	ldrdeq	r2, [r4, #64]	; 0x40
   14254:	strdeq	r2, [r5, #16]
   14258:	mov	r0, r5
   1425c:	mov	r1, r4
   14260:	bl	13444 <__assert_fail@plt+0x2080>
   14264:	subs	r5, r0, #0
   14268:	bne	1418c <__assert_fail@plt+0x2dc8>
   1426c:	bl	11268 <__errno_location@plt>
   14270:	mov	r3, #12
   14274:	str	r3, [r0]
   14278:	b	14458 <__assert_fail@plt+0x3094>
   1427c:	cmp	r2, #1
   14280:	movne	r6, r4
   14284:	bne	1440c <__assert_fail@plt+0x3048>
   14288:	cmp	r3, #4
   1428c:	beq	142ac <__assert_fail@plt+0x2ee8>
   14290:	tst	r1, #64	; 0x40
   14294:	beq	142f0 <__assert_fail@plt+0x2f2c>
   14298:	ldrd	r6, [r4, #64]	; 0x40
   1429c:	ldrd	r2, [r5, #16]
   142a0:	cmp	r7, r3
   142a4:	cmpeq	r6, r2
   142a8:	beq	142f0 <__assert_fail@plt+0x2f2c>
   142ac:	ldrh	r3, [r4, #58]	; 0x3a
   142b0:	tst	r3, #2
   142b4:	beq	142c0 <__assert_fail@plt+0x2efc>
   142b8:	ldr	r0, [r4, #36]	; 0x24
   142bc:	bl	11388 <close@plt>
   142c0:	ldr	r0, [r5, #4]
   142c4:	cmp	r0, #0
   142c8:	beq	142d8 <__assert_fail@plt+0x2f14>
   142cc:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   142d0:	mov	r3, #0
   142d4:	str	r3, [r5, #4]
   142d8:	mov	r3, #6
   142dc:	strh	r3, [r4, #56]	; 0x38
   142e0:	mov	r1, r4
   142e4:	mov	r0, r5
   142e8:	bl	132a8 <__assert_fail@plt+0x1ee4>
   142ec:	b	1418c <__assert_fail@plt+0x2dc8>
   142f0:	ldr	r0, [r5, #4]
   142f4:	cmp	r0, #0
   142f8:	beq	14318 <__assert_fail@plt+0x2f54>
   142fc:	tst	r1, #4096	; 0x1000
   14300:	beq	14318 <__assert_fail@plt+0x2f54>
   14304:	bic	r1, r1, #4096	; 0x1000
   14308:	str	r1, [r5, #48]	; 0x30
   1430c:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   14310:	mov	r3, #0
   14314:	str	r3, [r5, #4]
   14318:	ldr	r3, [r5, #4]
   1431c:	cmp	r3, #0
   14320:	beq	143c8 <__assert_fail@plt+0x3004>
   14324:	ldr	r3, [r4, #24]
   14328:	mvn	r2, #0
   1432c:	mov	r1, r4
   14330:	mov	r0, r5
   14334:	bl	1310c <__assert_fail@plt+0x1d48>
   14338:	cmp	r0, #0
   1433c:	beq	14364 <__assert_fail@plt+0x2fa0>
   14340:	bl	11268 <__errno_location@plt>
   14344:	ldr	r3, [r0]
   14348:	str	r3, [r4, #32]
   1434c:	ldrh	r3, [r4, #58]	; 0x3a
   14350:	orr	r3, r3, #1
   14354:	strh	r3, [r4, #58]	; 0x3a
   14358:	ldr	r3, [r5, #4]
   1435c:	cmp	r3, #0
   14360:	bne	143b4 <__assert_fail@plt+0x2ff0>
   14364:	mov	r3, #0
   14368:	ldr	r4, [r5, #4]
   1436c:	str	r3, [r5, #4]
   14370:	ldr	r0, [r4, #4]
   14374:	ldr	r2, [r5, #24]
   14378:	ldr	r1, [r0, #40]	; 0x28
   1437c:	ldr	r0, [r0, #28]
   14380:	sub	r3, r1, #1
   14384:	ldrb	r0, [r0, r3]
   14388:	cmp	r0, #47	; 0x2f
   1438c:	movne	r3, r1
   14390:	mov	r1, #47	; 0x2f
   14394:	add	r0, r2, r3
   14398:	strb	r1, [r2, r3]
   1439c:	ldr	r2, [r4, #52]	; 0x34
   143a0:	add	r1, r4, #168	; 0xa8
   143a4:	add	r2, r2, #1
   143a8:	add	r0, r0, #1
   143ac:	bl	110c4 <memmove@plt>
   143b0:	b	14208 <__assert_fail@plt+0x2e44>
   143b4:	ldr	r2, [r3, #4]
   143b8:	ldr	r2, [r2, #24]
   143bc:	str	r2, [r3, #24]
   143c0:	ldr	r3, [r3, #8]
   143c4:	b	1435c <__assert_fail@plt+0x2f98>
   143c8:	mov	r1, #3
   143cc:	mov	r0, r5
   143d0:	bl	134fc <__assert_fail@plt+0x2138>
   143d4:	cmp	r0, #0
   143d8:	str	r0, [r5, #4]
   143dc:	bne	14364 <__assert_fail@plt+0x2fa0>
   143e0:	ldr	r3, [r5, #48]	; 0x30
   143e4:	tst	r3, #8192	; 0x2000
   143e8:	bne	14458 <__assert_fail@plt+0x3094>
   143ec:	ldr	r3, [r4, #32]
   143f0:	cmp	r3, #0
   143f4:	beq	142e0 <__assert_fail@plt+0x2f1c>
   143f8:	ldrh	r3, [r4, #56]	; 0x38
   143fc:	cmp	r3, #4
   14400:	beq	142e0 <__assert_fail@plt+0x2f1c>
   14404:	mov	r3, #7
   14408:	b	142dc <__assert_fail@plt+0x2f18>
   1440c:	ldr	r4, [r4, #8]
   14410:	cmp	r4, #0
   14414:	bne	1446c <__assert_fail@plt+0x30a8>
   14418:	ldr	r3, [r6, #4]
   1441c:	ldr	r2, [r3, #12]
   14420:	cmp	r2, #0
   14424:	beq	145bc <__assert_fail@plt+0x31f8>
   14428:	str	r3, [r5]
   1442c:	ldr	r2, [r5, #24]
   14430:	ldr	r3, [r3, #40]	; 0x28
   14434:	mov	r1, #3
   14438:	mov	r0, r5
   1443c:	strb	r4, [r2, r3]
   14440:	bl	134fc <__assert_fail@plt+0x2138>
   14444:	subs	r4, r0, #0
   14448:	bne	14460 <__assert_fail@plt+0x309c>
   1444c:	ldr	r3, [r5, #48]	; 0x30
   14450:	tst	r3, #8192	; 0x2000
   14454:	beq	145bc <__assert_fail@plt+0x31f8>
   14458:	mov	r4, #0
   1445c:	b	1418c <__assert_fail@plt+0x2dc8>
   14460:	mov	r0, r6
   14464:	bl	12ad0 <__assert_fail@plt+0x170c>
   14468:	b	14370 <__assert_fail@plt+0x2fac>
   1446c:	mov	r0, r6
   14470:	str	r4, [r5]
   14474:	bl	12ad0 <__assert_fail@plt+0x170c>
   14478:	ldr	r6, [r4, #48]	; 0x30
   1447c:	cmp	r6, #0
   14480:	bne	14528 <__assert_fail@plt+0x3164>
   14484:	mov	r0, r5
   14488:	bl	130bc <__assert_fail@plt+0x1cf8>
   1448c:	cmp	r0, #0
   14490:	ldrne	r3, [r5, #48]	; 0x30
   14494:	orrne	r3, r3, #8192	; 0x2000
   14498:	strne	r3, [r5, #48]	; 0x30
   1449c:	bne	14458 <__assert_fail@plt+0x3094>
   144a0:	mov	r0, r5
   144a4:	bl	12edc <__assert_fail@plt+0x1b18>
   144a8:	ldr	r2, [r4, #52]	; 0x34
   144ac:	add	r7, r4, #168	; 0xa8
   144b0:	str	r2, [r4, #40]	; 0x28
   144b4:	mov	r1, r7
   144b8:	add	r2, r2, #1
   144bc:	ldr	r0, [r5, #24]
   144c0:	bl	110c4 <memmove@plt>
   144c4:	mov	r1, #47	; 0x2f
   144c8:	mov	r0, r7
   144cc:	bl	112ec <strrchr@plt>
   144d0:	cmp	r0, #0
   144d4:	beq	14510 <__assert_fail@plt+0x314c>
   144d8:	cmp	r7, r0
   144dc:	bne	144ec <__assert_fail@plt+0x3128>
   144e0:	ldrb	r3, [r4, #169]	; 0xa9
   144e4:	cmp	r3, #0
   144e8:	beq	14510 <__assert_fail@plt+0x314c>
   144ec:	add	r6, r0, #1
   144f0:	mov	r0, r6
   144f4:	bl	11238 <strlen@plt>
   144f8:	mov	r1, r6
   144fc:	mov	r8, r0
   14500:	add	r2, r0, #1
   14504:	mov	r0, r7
   14508:	bl	110c4 <memmove@plt>
   1450c:	str	r8, [r4, #52]	; 0x34
   14510:	ldr	r3, [r5, #24]
   14514:	mov	r0, r5
   14518:	str	r3, [r4, #28]
   1451c:	str	r3, [r4, #24]
   14520:	bl	133c8 <__assert_fail@plt+0x2004>
   14524:	b	14208 <__assert_fail@plt+0x2e44>
   14528:	ldrh	r3, [r4, #60]	; 0x3c
   1452c:	mov	r6, r4
   14530:	cmp	r3, #4
   14534:	beq	1440c <__assert_fail@plt+0x3048>
   14538:	cmp	r3, #2
   1453c:	bne	14370 <__assert_fail@plt+0x2fac>
   14540:	mov	r2, #1
   14544:	mov	r1, r4
   14548:	mov	r0, r5
   1454c:	bl	12bec <__assert_fail@plt+0x1828>
   14550:	cmp	r0, #1
   14554:	strh	r0, [r4, #56]	; 0x38
   14558:	bne	145a0 <__assert_fail@plt+0x31dc>
   1455c:	ldr	r3, [r5, #48]	; 0x30
   14560:	tst	r3, #4
   14564:	bne	145a0 <__assert_fail@plt+0x31dc>
   14568:	ldr	r1, [pc, #412]	; 1470c <__assert_fail@plt+0x3348>
   1456c:	mov	r0, r5
   14570:	bl	12e60 <__assert_fail@plt+0x1a9c>
   14574:	cmp	r0, #0
   14578:	str	r0, [r4, #36]	; 0x24
   1457c:	ldrhge	r3, [r4, #58]	; 0x3a
   14580:	orrge	r3, r3, #2
   14584:	strhge	r3, [r4, #58]	; 0x3a
   14588:	bge	145a0 <__assert_fail@plt+0x31dc>
   1458c:	bl	11268 <__errno_location@plt>
   14590:	ldr	r3, [r0]
   14594:	str	r3, [r4, #32]
   14598:	mov	r3, #7
   1459c:	strh	r3, [r4, #56]	; 0x38
   145a0:	mov	r3, #3
   145a4:	strh	r3, [r4, #60]	; 0x3c
   145a8:	b	14370 <__assert_fail@plt+0x2fac>
   145ac:	cmp	r3, #0
   145b0:	cmpeq	r2, #1
   145b4:	beq	1423c <__assert_fail@plt+0x2e78>
   145b8:	bl	1137c <abort@plt>
   145bc:	ldr	r4, [r6, #4]
   145c0:	mov	r0, r6
   145c4:	str	r4, [r5]
   145c8:	bl	12ad0 <__assert_fail@plt+0x170c>
   145cc:	ldr	r3, [r4, #48]	; 0x30
   145d0:	cmn	r3, #1
   145d4:	bne	145f4 <__assert_fail@plt+0x3230>
   145d8:	mov	r0, r4
   145dc:	bl	12ad0 <__assert_fail@plt+0x170c>
   145e0:	bl	11268 <__errno_location@plt>
   145e4:	mov	r4, #0
   145e8:	str	r4, [r0]
   145ec:	str	r4, [r5]
   145f0:	b	1418c <__assert_fail@plt+0x2dc8>
   145f4:	ldrh	r3, [r4, #56]	; 0x38
   145f8:	cmp	r3, #11
   145fc:	beq	145b8 <__assert_fail@plt+0x31f4>
   14600:	ldr	r3, [r4, #40]	; 0x28
   14604:	ldr	r2, [r5, #24]
   14608:	mov	r1, #0
   1460c:	strb	r1, [r2, r3]
   14610:	ldr	r3, [r4, #48]	; 0x30
   14614:	cmp	r3, r1
   14618:	bne	14648 <__assert_fail@plt+0x3284>
   1461c:	mov	r0, r5
   14620:	bl	130bc <__assert_fail@plt+0x1cf8>
   14624:	cmp	r0, #0
   14628:	beq	14680 <__assert_fail@plt+0x32bc>
   1462c:	bl	11268 <__errno_location@plt>
   14630:	ldr	r3, [r0]
   14634:	str	r3, [r4, #32]
   14638:	ldr	r3, [r5, #48]	; 0x30
   1463c:	orr	r3, r3, #8192	; 0x2000
   14640:	str	r3, [r5, #48]	; 0x30
   14644:	b	14680 <__assert_fail@plt+0x32bc>
   14648:	ldrh	r3, [r4, #58]	; 0x3a
   1464c:	tst	r3, #2
   14650:	beq	146ec <__assert_fail@plt+0x3328>
   14654:	ldr	r3, [r5, #48]	; 0x30
   14658:	tst	r3, #4
   1465c:	bne	14678 <__assert_fail@plt+0x32b4>
   14660:	tst	r3, #512	; 0x200
   14664:	beq	146c0 <__assert_fail@plt+0x32fc>
   14668:	mov	r2, #1
   1466c:	ldr	r1, [r4, #36]	; 0x24
   14670:	mov	r0, r5
   14674:	bl	13040 <__assert_fail@plt+0x1c7c>
   14678:	ldr	r0, [r4, #36]	; 0x24
   1467c:	bl	11388 <close@plt>
   14680:	ldrh	r3, [r4, #56]	; 0x38
   14684:	cmp	r3, #2
   14688:	beq	146b0 <__assert_fail@plt+0x32ec>
   1468c:	ldr	r3, [r4, #32]
   14690:	cmp	r3, #0
   14694:	movne	r3, #7
   14698:	moveq	r3, #6
   1469c:	strh	r3, [r4, #56]	; 0x38
   146a0:	bne	146b0 <__assert_fail@plt+0x32ec>
   146a4:	mov	r1, r4
   146a8:	mov	r0, r5
   146ac:	bl	132a8 <__assert_fail@plt+0x1ee4>
   146b0:	ldr	r3, [r5, #48]	; 0x30
   146b4:	tst	r3, #8192	; 0x2000
   146b8:	beq	1418c <__assert_fail@plt+0x2dc8>
   146bc:	b	14458 <__assert_fail@plt+0x3094>
   146c0:	ldr	r0, [r4, #36]	; 0x24
   146c4:	bl	11328 <fchdir@plt>
   146c8:	cmp	r0, #0
   146cc:	beq	14678 <__assert_fail@plt+0x32b4>
   146d0:	bl	11268 <__errno_location@plt>
   146d4:	ldr	r3, [r0]
   146d8:	str	r3, [r4, #32]
   146dc:	ldr	r3, [r5, #48]	; 0x30
   146e0:	orr	r3, r3, #8192	; 0x2000
   146e4:	str	r3, [r5, #48]	; 0x30
   146e8:	b	14678 <__assert_fail@plt+0x32b4>
   146ec:	tst	r3, #1
   146f0:	bne	14680 <__assert_fail@plt+0x32bc>
   146f4:	ldr	r3, [pc, #20]	; 14710 <__assert_fail@plt+0x334c>
   146f8:	mvn	r2, #0
   146fc:	ldr	r1, [r4, #4]
   14700:	mov	r0, r5
   14704:	bl	1310c <__assert_fail@plt+0x1d48>
   14708:	b	14624 <__assert_fail@plt+0x3260>
   1470c:	ldrdeq	r9, [r1], -r7
   14710:	ldrdeq	r9, [r1], -r6
   14714:	cmp	r2, #4
   14718:	bls	14734 <__assert_fail@plt+0x3370>
   1471c:	push	{r4, lr}
   14720:	bl	11268 <__errno_location@plt>
   14724:	mov	r3, #22
   14728:	str	r3, [r0]
   1472c:	mov	r0, #1
   14730:	pop	{r4, pc}
   14734:	strh	r2, [r1, #60]	; 0x3c
   14738:	mov	r0, #0
   1473c:	bx	lr
   14740:	push	{r4, r5, r6, r7, r8, lr}
   14744:	bics	r8, r1, #4096	; 0x1000
   14748:	beq	14760 <__assert_fail@plt+0x339c>
   1474c:	bl	11268 <__errno_location@plt>
   14750:	mov	r3, #22
   14754:	str	r3, [r0]
   14758:	mov	r0, #0
   1475c:	pop	{r4, r5, r6, r7, r8, pc}
   14760:	mov	r5, r0
   14764:	ldr	r4, [r0]
   14768:	mov	r7, r1
   1476c:	bl	11268 <__errno_location@plt>
   14770:	mov	r6, r0
   14774:	str	r8, [r0]
   14778:	ldr	r0, [r5, #48]	; 0x30
   1477c:	ands	r0, r0, #8192	; 0x2000
   14780:	bne	14758 <__assert_fail@plt+0x3394>
   14784:	ldrh	r3, [r4, #56]	; 0x38
   14788:	cmp	r3, #9
   1478c:	bne	14798 <__assert_fail@plt+0x33d4>
   14790:	ldr	r0, [r4, #8]
   14794:	pop	{r4, r5, r6, r7, r8, pc}
   14798:	cmp	r3, #1
   1479c:	popne	{r4, r5, r6, r7, r8, pc}
   147a0:	ldr	r0, [r5, #4]
   147a4:	cmp	r0, #0
   147a8:	beq	147b0 <__assert_fail@plt+0x33ec>
   147ac:	bl	12ea4 <__assert_fail@plt+0x1ae0>
   147b0:	cmp	r7, #4096	; 0x1000
   147b4:	moveq	r8, #2
   147b8:	ldreq	r3, [r5, #48]	; 0x30
   147bc:	movne	r8, #1
   147c0:	orreq	r3, r3, #4096	; 0x1000
   147c4:	streq	r3, [r5, #48]	; 0x30
   147c8:	ldr	r3, [r4, #48]	; 0x30
   147cc:	cmp	r3, #0
   147d0:	bne	147f0 <__assert_fail@plt+0x342c>
   147d4:	ldr	r3, [r4, #24]
   147d8:	ldrb	r3, [r3]
   147dc:	cmp	r3, #47	; 0x2f
   147e0:	beq	147f0 <__assert_fail@plt+0x342c>
   147e4:	ldr	r0, [r5, #48]	; 0x30
   147e8:	ands	r4, r0, #4
   147ec:	beq	14804 <__assert_fail@plt+0x3440>
   147f0:	mov	r1, r8
   147f4:	mov	r0, r5
   147f8:	bl	134fc <__assert_fail@plt+0x2138>
   147fc:	str	r0, [r5, #4]
   14800:	pop	{r4, r5, r6, r7, r8, pc}
   14804:	ldr	r1, [pc, #116]	; 14880 <__assert_fail@plt+0x34bc>
   14808:	mov	r0, r5
   1480c:	bl	12e60 <__assert_fail@plt+0x1a9c>
   14810:	subs	r7, r0, #0
   14814:	strlt	r4, [r5, #4]
   14818:	blt	14758 <__assert_fail@plt+0x3394>
   1481c:	mov	r1, r8
   14820:	mov	r0, r5
   14824:	bl	134fc <__assert_fail@plt+0x2138>
   14828:	str	r0, [r5, #4]
   1482c:	ldr	r0, [r5, #48]	; 0x30
   14830:	ands	r4, r0, #512	; 0x200
   14834:	beq	14850 <__assert_fail@plt+0x348c>
   14838:	mov	r2, #1
   1483c:	mov	r1, r7
   14840:	mov	r0, r5
   14844:	bl	13040 <__assert_fail@plt+0x1c7c>
   14848:	ldr	r0, [r5, #4]
   1484c:	pop	{r4, r5, r6, r7, r8, pc}
   14850:	mov	r0, r7
   14854:	bl	11328 <fchdir@plt>
   14858:	cmp	r0, #0
   1485c:	beq	14874 <__assert_fail@plt+0x34b0>
   14860:	ldr	r5, [r6]
   14864:	mov	r0, r7
   14868:	bl	11388 <close@plt>
   1486c:	str	r5, [r6]
   14870:	b	14758 <__assert_fail@plt+0x3394>
   14874:	mov	r0, r7
   14878:	bl	11388 <close@plt>
   1487c:	b	14848 <__assert_fail@plt+0x3484>
   14880:	ldrdeq	r9, [r1], -r7
   14884:	andeq	r0, r0, r0
   14888:	push	{r4, lr}
   1488c:	ror	r0, r0, #3
   14890:	bl	18948 <__assert_fail@plt+0x7584>
   14894:	mov	r0, r1
   14898:	pop	{r4, pc}
   1489c:	sub	r0, r1, r0
   148a0:	clz	r0, r0
   148a4:	lsr	r0, r0, #5
   148a8:	bx	lr
   148ac:	push	{r4, lr}
   148b0:	mov	r4, r0
   148b4:	mov	r0, r1
   148b8:	ldr	r3, [r4, #24]
   148bc:	ldr	r1, [r4, #8]
   148c0:	blx	r3
   148c4:	ldr	r3, [r4, #8]
   148c8:	cmp	r0, r3
   148cc:	bcc	148d4 <__assert_fail@plt+0x3510>
   148d0:	bl	1137c <abort@plt>
   148d4:	ldr	r3, [r4]
   148d8:	add	r0, r3, r0, lsl #3
   148dc:	pop	{r4, pc}
   148e0:	push	{r4, r5, r6, r7, r8, lr}
   148e4:	mov	r6, r1
   148e8:	mov	r8, r2
   148ec:	mov	r5, r0
   148f0:	mov	r7, r3
   148f4:	bl	148ac <__assert_fail@plt+0x34e8>
   148f8:	str	r0, [r8]
   148fc:	ldr	r1, [r0]
   14900:	cmp	r1, #0
   14904:	bne	14914 <__assert_fail@plt+0x3550>
   14908:	mov	r2, #0
   1490c:	mov	r0, r2
   14910:	pop	{r4, r5, r6, r7, r8, pc}
   14914:	cmp	r6, r1
   14918:	mov	r4, r0
   1491c:	bne	1495c <__assert_fail@plt+0x3598>
   14920:	cmp	r7, #0
   14924:	ldr	r2, [r4]
   14928:	beq	1490c <__assert_fail@plt+0x3548>
   1492c:	ldr	r3, [r4, #4]
   14930:	cmp	r3, #0
   14934:	streq	r3, [r4]
   14938:	beq	1490c <__assert_fail@plt+0x3548>
   1493c:	ldm	r3, {r0, r1}
   14940:	stm	r4, {r0, r1}
   14944:	mov	r1, #0
   14948:	str	r1, [r3]
   1494c:	ldr	r1, [r5, #36]	; 0x24
   14950:	str	r1, [r3, #4]
   14954:	str	r3, [r5, #36]	; 0x24
   14958:	b	1490c <__assert_fail@plt+0x3548>
   1495c:	ldr	r3, [r5, #28]
   14960:	mov	r0, r6
   14964:	blx	r3
   14968:	cmp	r0, #0
   1496c:	bne	14920 <__assert_fail@plt+0x355c>
   14970:	ldr	r3, [r4, #4]
   14974:	cmp	r3, #0
   14978:	beq	14908 <__assert_fail@plt+0x3544>
   1497c:	ldr	r1, [r3]
   14980:	cmp	r6, r1
   14984:	bne	149a4 <__assert_fail@plt+0x35e0>
   14988:	ldr	r3, [r4, #4]
   1498c:	cmp	r7, #0
   14990:	ldr	r2, [r3]
   14994:	beq	1490c <__assert_fail@plt+0x3548>
   14998:	ldr	r1, [r3, #4]
   1499c:	str	r1, [r4, #4]
   149a0:	b	14944 <__assert_fail@plt+0x3580>
   149a4:	ldr	r3, [r5, #28]
   149a8:	mov	r0, r6
   149ac:	blx	r3
   149b0:	cmp	r0, #0
   149b4:	bne	14988 <__assert_fail@plt+0x35c4>
   149b8:	ldr	r4, [r4, #4]
   149bc:	b	14970 <__assert_fail@plt+0x35ac>
   149c0:	push	{r4, r5, r6, lr}
   149c4:	ldrb	r4, [r1, #16]
   149c8:	cmp	r4, #0
   149cc:	bne	149f8 <__assert_fail@plt+0x3634>
   149d0:	vmov	s15, r0
   149d4:	vldr	s14, [r1, #8]
   149d8:	vcvt.f32.u32	s13, s15
   149dc:	vdiv.f32	s15, s13, s14
   149e0:	vldr	s14, [pc, #156]	; 14a84 <__assert_fail@plt+0x36c0>
   149e4:	vcmpe.f32	s15, s14
   149e8:	vmrs	APSR_nzcv, fpscr
   149ec:	bge	14a50 <__assert_fail@plt+0x368c>
   149f0:	vcvt.u32.f32	s15, s15
   149f4:	vmov	r0, s15
   149f8:	cmp	r0, #10
   149fc:	movcc	r0, #10
   14a00:	orr	r4, r0, #1
   14a04:	cmn	r4, #1
   14a08:	beq	14a30 <__assert_fail@plt+0x366c>
   14a0c:	mov	r6, #9
   14a10:	mov	r5, #3
   14a14:	cmp	r4, r6
   14a18:	bhi	14a60 <__assert_fail@plt+0x369c>
   14a1c:	mov	r1, r5
   14a20:	mov	r0, r4
   14a24:	bl	18948 <__assert_fail@plt+0x7584>
   14a28:	cmp	r1, #0
   14a2c:	beq	14a58 <__assert_fail@plt+0x3694>
   14a30:	lsrs	r3, r4, #30
   14a34:	movne	r3, #1
   14a38:	moveq	r3, #0
   14a3c:	tst	r4, #536870912	; 0x20000000
   14a40:	bne	14a4c <__assert_fail@plt+0x3688>
   14a44:	cmp	r3, #0
   14a48:	beq	14a50 <__assert_fail@plt+0x368c>
   14a4c:	mov	r4, #0
   14a50:	mov	r0, r4
   14a54:	pop	{r4, r5, r6, pc}
   14a58:	add	r4, r4, #2
   14a5c:	b	14a04 <__assert_fail@plt+0x3640>
   14a60:	mov	r1, r5
   14a64:	mov	r0, r4
   14a68:	bl	18948 <__assert_fail@plt+0x7584>
   14a6c:	cmp	r1, #0
   14a70:	beq	14a1c <__assert_fail@plt+0x3658>
   14a74:	add	r3, r5, #1
   14a78:	add	r5, r5, #2
   14a7c:	add	r6, r6, r3, lsl #2
   14a80:	b	14a14 <__assert_fail@plt+0x3650>
   14a84:	svcmi	0x00800000
   14a88:	ldr	r3, [r0]
   14a8c:	ldr	r2, [pc, #160]	; 14b34 <__assert_fail@plt+0x3770>
   14a90:	cmp	r3, r2
   14a94:	beq	14b1c <__assert_fail@plt+0x3758>
   14a98:	vldr	s14, [r3, #8]
   14a9c:	vldr	s13, [pc, #128]	; 14b24 <__assert_fail@plt+0x3760>
   14aa0:	vcmpe.f32	s14, s13
   14aa4:	vmrs	APSR_nzcv, fpscr
   14aa8:	ble	14b10 <__assert_fail@plt+0x374c>
   14aac:	vldr	s15, [pc, #116]	; 14b28 <__assert_fail@plt+0x3764>
   14ab0:	vcmpe.f32	s14, s15
   14ab4:	vmrs	APSR_nzcv, fpscr
   14ab8:	bpl	14b10 <__assert_fail@plt+0x374c>
   14abc:	vldr	s12, [r3, #12]
   14ac0:	vldr	s15, [pc, #100]	; 14b2c <__assert_fail@plt+0x3768>
   14ac4:	vcmpe.f32	s12, s15
   14ac8:	vmrs	APSR_nzcv, fpscr
   14acc:	ble	14b10 <__assert_fail@plt+0x374c>
   14ad0:	vldr	s15, [r3]
   14ad4:	vcmpe.f32	s15, #0.0
   14ad8:	vmrs	APSR_nzcv, fpscr
   14adc:	blt	14b10 <__assert_fail@plt+0x374c>
   14ae0:	vadd.f32	s15, s15, s13
   14ae4:	vldr	s13, [r3, #4]
   14ae8:	vcmpe.f32	s15, s13
   14aec:	vmrs	APSR_nzcv, fpscr
   14af0:	bpl	14b10 <__assert_fail@plt+0x374c>
   14af4:	vldr	s12, [pc, #52]	; 14b30 <__assert_fail@plt+0x376c>
   14af8:	vcmpe.f32	s13, s12
   14afc:	vmrs	APSR_nzcv, fpscr
   14b00:	bhi	14b10 <__assert_fail@plt+0x374c>
   14b04:	vcmpe.f32	s14, s15
   14b08:	vmrs	APSR_nzcv, fpscr
   14b0c:	bgt	14b1c <__assert_fail@plt+0x3758>
   14b10:	str	r2, [r0]
   14b14:	mov	r0, #0
   14b18:	bx	lr
   14b1c:	mov	r0, #1
   14b20:	bx	lr
   14b24:	stclcc	12, cr12, [ip, #820]	; 0x334
   14b28:	svccc	0x00666666
   14b2c:	svccc	0x008ccccd
   14b30:	svccc	0x00800000
   14b34:	ldrdeq	r9, [r1], -ip
   14b38:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b3c:	mov	r5, r0
   14b40:	ldr	r4, [r1]
   14b44:	mov	r7, r1
   14b48:	mov	r8, r2
   14b4c:	add	r4, r4, #8
   14b50:	mov	r9, #0
   14b54:	mov	sl, #8
   14b58:	ldr	r2, [r7, #4]
   14b5c:	sub	r3, r4, #8
   14b60:	cmp	r2, r3
   14b64:	bhi	14b74 <__assert_fail@plt+0x37b0>
   14b68:	mov	r8, #1
   14b6c:	mov	r0, r8
   14b70:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b74:	ldr	r3, [r4, #-8]
   14b78:	cmp	r3, #0
   14b7c:	ldrne	r6, [r4, #-4]
   14b80:	bne	14bd8 <__assert_fail@plt+0x3814>
   14b84:	add	r4, r4, #8
   14b88:	b	14b58 <__assert_fail@plt+0x3794>
   14b8c:	ldr	fp, [r6]
   14b90:	mov	r0, r5
   14b94:	mov	r1, fp
   14b98:	bl	148ac <__assert_fail@plt+0x34e8>
   14b9c:	ldr	r1, [r6, #4]
   14ba0:	ldr	r2, [r0]
   14ba4:	cmp	r2, #0
   14ba8:	streq	fp, [r0]
   14bac:	ldreq	r3, [r5, #12]
   14bb0:	ldrne	r3, [r0, #4]
   14bb4:	addeq	r3, r3, #1
   14bb8:	streq	r3, [r5, #12]
   14bbc:	streq	r2, [r6]
   14bc0:	ldreq	r3, [r5, #36]	; 0x24
   14bc4:	strne	r3, [r6, #4]
   14bc8:	streq	r3, [r6, #4]
   14bcc:	strne	r6, [r0, #4]
   14bd0:	streq	r6, [r5, #36]	; 0x24
   14bd4:	mov	r6, r1
   14bd8:	cmp	r6, #0
   14bdc:	bne	14b8c <__assert_fail@plt+0x37c8>
   14be0:	cmp	r8, #0
   14be4:	ldr	fp, [r4, #-8]
   14be8:	str	r6, [r4, #-4]
   14bec:	bne	14b84 <__assert_fail@plt+0x37c0>
   14bf0:	mov	r1, fp
   14bf4:	mov	r0, r5
   14bf8:	bl	148ac <__assert_fail@plt+0x34e8>
   14bfc:	ldr	r3, [r0]
   14c00:	mov	r6, r0
   14c04:	cmp	r3, #0
   14c08:	beq	14c54 <__assert_fail@plt+0x3890>
   14c0c:	ldr	r0, [r5, #36]	; 0x24
   14c10:	cmp	r0, #0
   14c14:	ldrne	r3, [r0, #4]
   14c18:	strne	r3, [r5, #36]	; 0x24
   14c1c:	bne	14c30 <__assert_fail@plt+0x386c>
   14c20:	mov	r0, sl
   14c24:	bl	18044 <__assert_fail@plt+0x6c80>
   14c28:	cmp	r0, #0
   14c2c:	beq	14b6c <__assert_fail@plt+0x37a8>
   14c30:	ldr	r3, [r6, #4]
   14c34:	str	fp, [r0]
   14c38:	str	r3, [r0, #4]
   14c3c:	str	r0, [r6, #4]
   14c40:	ldr	r3, [r7, #12]
   14c44:	str	r9, [r4, #-8]
   14c48:	sub	r3, r3, #1
   14c4c:	str	r3, [r7, #12]
   14c50:	b	14b84 <__assert_fail@plt+0x37c0>
   14c54:	ldr	r3, [r5, #12]
   14c58:	str	fp, [r0]
   14c5c:	add	r3, r3, #1
   14c60:	str	r3, [r5, #12]
   14c64:	b	14c40 <__assert_fail@plt+0x387c>
   14c68:	ldr	r0, [r0, #8]
   14c6c:	bx	lr
   14c70:	ldr	r0, [r0, #12]
   14c74:	bx	lr
   14c78:	ldr	r0, [r0, #16]
   14c7c:	bx	lr
   14c80:	ldm	r0, {r3, ip}
   14c84:	mov	r0, #0
   14c88:	cmp	r3, ip
   14c8c:	bcc	14c94 <__assert_fail@plt+0x38d0>
   14c90:	bx	lr
   14c94:	ldr	r2, [r3]
   14c98:	cmp	r2, #0
   14c9c:	movne	r1, r3
   14ca0:	movne	r2, #1
   14ca4:	bne	14cb4 <__assert_fail@plt+0x38f0>
   14ca8:	add	r3, r3, #8
   14cac:	b	14c88 <__assert_fail@plt+0x38c4>
   14cb0:	add	r2, r2, #1
   14cb4:	ldr	r1, [r1, #4]
   14cb8:	cmp	r1, #0
   14cbc:	bne	14cb0 <__assert_fail@plt+0x38ec>
   14cc0:	cmp	r0, r2
   14cc4:	movcc	r0, r2
   14cc8:	b	14ca8 <__assert_fail@plt+0x38e4>
   14ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   14cd0:	mov	r3, #0
   14cd4:	ldm	r0, {r2, lr}
   14cd8:	mov	r1, r3
   14cdc:	cmp	r2, lr
   14ce0:	bcc	14d04 <__assert_fail@plt+0x3940>
   14ce4:	ldr	r2, [r0, #12]
   14ce8:	cmp	r1, r2
   14cec:	ldreq	r0, [r0, #16]
   14cf0:	subeq	r0, r0, r3
   14cf4:	clzeq	r0, r0
   14cf8:	lsreq	r0, r0, #5
   14cfc:	movne	r0, #0
   14d00:	pop	{pc}		; (ldr pc, [sp], #4)
   14d04:	ldr	ip, [r2]
   14d08:	cmp	ip, #0
   14d0c:	addne	r1, r1, #1
   14d10:	addne	r3, r3, #1
   14d14:	movne	ip, r2
   14d18:	bne	14d28 <__assert_fail@plt+0x3964>
   14d1c:	add	r2, r2, #8
   14d20:	b	14cdc <__assert_fail@plt+0x3918>
   14d24:	add	r3, r3, #1
   14d28:	ldr	ip, [ip, #4]
   14d2c:	cmp	ip, #0
   14d30:	bne	14d24 <__assert_fail@plt+0x3960>
   14d34:	b	14d1c <__assert_fail@plt+0x3958>
   14d38:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14d3c:	mov	r4, r1
   14d40:	ldr	r5, [r0, #8]
   14d44:	ldr	r7, [r0, #12]
   14d48:	mov	r6, r0
   14d4c:	bl	14c80 <__assert_fail@plt+0x38bc>
   14d50:	ldr	r3, [r6, #16]
   14d54:	ldr	r2, [pc, #124]	; 14dd8 <__assert_fail@plt+0x3a14>
   14d58:	mov	r1, #1
   14d5c:	mov	r8, r0
   14d60:	mov	r0, r4
   14d64:	bl	112a4 <__fprintf_chk@plt>
   14d68:	mov	r3, r5
   14d6c:	ldr	r2, [pc, #104]	; 14ddc <__assert_fail@plt+0x3a18>
   14d70:	mov	r1, #1
   14d74:	mov	r0, r4
   14d78:	bl	112a4 <__fprintf_chk@plt>
   14d7c:	vmov	s15, r7
   14d80:	mov	r3, r7
   14d84:	ldr	r2, [pc, #84]	; 14de0 <__assert_fail@plt+0x3a1c>
   14d88:	mov	r1, #1
   14d8c:	vcvt.f64.u32	d6, s15
   14d90:	vldr	d7, [pc, #56]	; 14dd0 <__assert_fail@plt+0x3a0c>
   14d94:	mov	r0, r4
   14d98:	vmul.f64	d6, d6, d7
   14d9c:	vmov	s15, r5
   14da0:	vcvt.f64.u32	d7, s15
   14da4:	vdiv.f64	d5, d6, d7
   14da8:	vstr	d5, [sp]
   14dac:	bl	112a4 <__fprintf_chk@plt>
   14db0:	mov	r3, r8
   14db4:	ldr	r2, [pc, #40]	; 14de4 <__assert_fail@plt+0x3a20>
   14db8:	mov	r1, #1
   14dbc:	mov	r0, r4
   14dc0:	add	sp, sp, #8
   14dc4:	pop	{r4, r5, r6, r7, r8, lr}
   14dc8:	b	112a4 <__fprintf_chk@plt>
   14dcc:	nop			; (mov r0, r0)
   14dd0:	andeq	r0, r0, r0
   14dd4:	subsmi	r0, r9, r0
   14dd8:	strdeq	r9, [r1], -r0
   14ddc:	andeq	r9, r1, r8, lsl #30
   14de0:	andeq	r9, r1, r0, lsr #30
   14de4:	andeq	r9, r1, r1, asr #30
   14de8:	push	{r4, r5, r6, lr}
   14dec:	mov	r6, r0
   14df0:	mov	r5, r1
   14df4:	bl	148ac <__assert_fail@plt+0x34e8>
   14df8:	ldr	r3, [r0]
   14dfc:	cmp	r3, #0
   14e00:	movne	r4, r0
   14e04:	bne	14e30 <__assert_fail@plt+0x3a6c>
   14e08:	mov	r0, #0
   14e0c:	pop	{r4, r5, r6, pc}
   14e10:	ldr	r3, [r6, #28]
   14e14:	mov	r0, r5
   14e18:	blx	r3
   14e1c:	cmp	r0, #0
   14e20:	bne	14e3c <__assert_fail@plt+0x3a78>
   14e24:	ldr	r4, [r4, #4]
   14e28:	cmp	r4, #0
   14e2c:	beq	14e08 <__assert_fail@plt+0x3a44>
   14e30:	ldr	r1, [r4]
   14e34:	cmp	r5, r1
   14e38:	bne	14e10 <__assert_fail@plt+0x3a4c>
   14e3c:	ldr	r0, [r4]
   14e40:	pop	{r4, r5, r6, pc}
   14e44:	ldr	r3, [r0, #16]
   14e48:	cmp	r3, #0
   14e4c:	beq	14e7c <__assert_fail@plt+0x3ab8>
   14e50:	ldr	r3, [r0]
   14e54:	ldr	r2, [r0, #4]
   14e58:	cmp	r3, r2
   14e5c:	bcc	14e68 <__assert_fail@plt+0x3aa4>
   14e60:	push	{r4, lr}
   14e64:	bl	1137c <abort@plt>
   14e68:	ldr	r0, [r3]
   14e6c:	cmp	r0, #0
   14e70:	bne	14e80 <__assert_fail@plt+0x3abc>
   14e74:	add	r3, r3, #8
   14e78:	b	14e58 <__assert_fail@plt+0x3a94>
   14e7c:	mov	r0, r3
   14e80:	bx	lr
   14e84:	push	{r4, r5, r6, lr}
   14e88:	mov	r4, r0
   14e8c:	mov	r5, r1
   14e90:	bl	148ac <__assert_fail@plt+0x34e8>
   14e94:	mov	r2, r0
   14e98:	mov	r3, r0
   14e9c:	ldr	r1, [r3]
   14ea0:	ldr	r3, [r3, #4]
   14ea4:	cmp	r5, r1
   14ea8:	bne	14ebc <__assert_fail@plt+0x3af8>
   14eac:	cmp	r3, #0
   14eb0:	beq	14ebc <__assert_fail@plt+0x3af8>
   14eb4:	ldr	r0, [r3]
   14eb8:	pop	{r4, r5, r6, pc}
   14ebc:	cmp	r3, #0
   14ec0:	bne	14e9c <__assert_fail@plt+0x3ad8>
   14ec4:	ldr	r3, [r4, #4]
   14ec8:	add	r2, r2, #8
   14ecc:	cmp	r2, r3
   14ed0:	bcc	14edc <__assert_fail@plt+0x3b18>
   14ed4:	mov	r0, #0
   14ed8:	pop	{r4, r5, r6, pc}
   14edc:	ldr	r0, [r2]
   14ee0:	cmp	r0, #0
   14ee4:	beq	14ec8 <__assert_fail@plt+0x3b04>
   14ee8:	pop	{r4, r5, r6, pc}
   14eec:	ldr	ip, [r0]
   14ef0:	mov	r3, #0
   14ef4:	push	{r4, r5, lr}
   14ef8:	ldr	lr, [r0, #4]
   14efc:	cmp	ip, lr
   14f00:	bcc	14f0c <__assert_fail@plt+0x3b48>
   14f04:	mov	r0, r3
   14f08:	pop	{r4, r5, pc}
   14f0c:	ldr	lr, [ip]
   14f10:	cmp	lr, #0
   14f14:	beq	14f40 <__assert_fail@plt+0x3b7c>
   14f18:	add	r4, r1, r3, lsl #2
   14f1c:	mov	lr, ip
   14f20:	cmp	r2, r3
   14f24:	bls	14f04 <__assert_fail@plt+0x3b40>
   14f28:	ldr	r5, [lr]
   14f2c:	add	r3, r3, #1
   14f30:	str	r5, [r4], #4
   14f34:	ldr	lr, [lr, #4]
   14f38:	cmp	lr, #0
   14f3c:	bne	14f20 <__assert_fail@plt+0x3b5c>
   14f40:	add	ip, ip, #8
   14f44:	b	14ef8 <__assert_fail@plt+0x3b34>
   14f48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f4c:	mov	r7, r0
   14f50:	ldr	r4, [r0]
   14f54:	mov	r8, r1
   14f58:	mov	r9, r2
   14f5c:	mov	r6, #0
   14f60:	ldr	r3, [r7, #4]
   14f64:	cmp	r4, r3
   14f68:	bcc	14f74 <__assert_fail@plt+0x3bb0>
   14f6c:	mov	r0, r6
   14f70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f74:	ldr	r3, [r4]
   14f78:	cmp	r3, #0
   14f7c:	beq	14fa8 <__assert_fail@plt+0x3be4>
   14f80:	mov	r5, r4
   14f84:	mov	r1, r9
   14f88:	ldr	r0, [r5]
   14f8c:	blx	r8
   14f90:	cmp	r0, #0
   14f94:	beq	14f6c <__assert_fail@plt+0x3ba8>
   14f98:	ldr	r5, [r5, #4]
   14f9c:	add	r6, r6, #1
   14fa0:	cmp	r5, #0
   14fa4:	bne	14f84 <__assert_fail@plt+0x3bc0>
   14fa8:	add	r4, r4, #8
   14fac:	b	14f60 <__assert_fail@plt+0x3b9c>
   14fb0:	push	{r4, r5, r6, lr}
   14fb4:	sub	r4, r0, #1
   14fb8:	mov	r5, r1
   14fbc:	mov	r0, #0
   14fc0:	mov	r6, #31
   14fc4:	ldrb	r3, [r4, #1]!
   14fc8:	cmp	r3, #0
   14fcc:	bne	14fd4 <__assert_fail@plt+0x3c10>
   14fd0:	pop	{r4, r5, r6, pc}
   14fd4:	mov	r1, r5
   14fd8:	mla	r0, r6, r0, r3
   14fdc:	bl	18948 <__assert_fail@plt+0x7584>
   14fe0:	mov	r0, r1
   14fe4:	b	14fc4 <__assert_fail@plt+0x3c00>
   14fe8:	push	{lr}		; (str lr, [sp, #-4]!)
   14fec:	mov	ip, r0
   14ff0:	ldr	lr, [pc, #16]	; 15008 <__assert_fail@plt+0x3c44>
   14ff4:	ldm	lr!, {r0, r1, r2, r3}
   14ff8:	stmia	ip!, {r0, r1, r2, r3}
   14ffc:	ldr	r3, [lr]
   15000:	str	r3, [ip]
   15004:	pop	{pc}		; (ldr pc, [sp], #4)
   15008:	ldrdeq	r9, [r1], -ip
   1500c:	cmp	r2, #0
   15010:	push	{r4, r5, r6, r7, r8, lr}
   15014:	mov	r8, r0
   15018:	ldr	r7, [pc, #176]	; 150d0 <__assert_fail@plt+0x3d0c>
   1501c:	mov	r0, #40	; 0x28
   15020:	movne	r7, r2
   15024:	cmp	r3, #0
   15028:	mov	r5, r1
   1502c:	ldr	r6, [pc, #160]	; 150d4 <__assert_fail@plt+0x3d10>
   15030:	movne	r6, r3
   15034:	bl	18044 <__assert_fail@plt+0x6c80>
   15038:	subs	r4, r0, #0
   1503c:	beq	150b8 <__assert_fail@plt+0x3cf4>
   15040:	ldr	r3, [pc, #144]	; 150d8 <__assert_fail@plt+0x3d14>
   15044:	cmp	r5, #0
   15048:	mov	r0, r4
   1504c:	moveq	r5, r3
   15050:	str	r5, [r0, #20]!
   15054:	bl	14a88 <__assert_fail@plt+0x36c4>
   15058:	cmp	r0, #0
   1505c:	beq	150c0 <__assert_fail@plt+0x3cfc>
   15060:	mov	r1, r5
   15064:	mov	r0, r8
   15068:	bl	149c0 <__assert_fail@plt+0x35fc>
   1506c:	cmp	r0, #0
   15070:	str	r0, [r4, #8]
   15074:	beq	150c0 <__assert_fail@plt+0x3cfc>
   15078:	mov	r1, #8
   1507c:	bl	17ffc <__assert_fail@plt+0x6c38>
   15080:	cmp	r0, #0
   15084:	str	r0, [r4]
   15088:	beq	150c0 <__assert_fail@plt+0x3cfc>
   1508c:	ldr	r3, [r4, #8]
   15090:	ldr	r2, [sp, #24]
   15094:	str	r7, [r4, #24]
   15098:	add	r0, r0, r3, lsl #3
   1509c:	mov	r3, #0
   150a0:	str	r0, [r4, #4]
   150a4:	str	r3, [r4, #12]
   150a8:	str	r3, [r4, #16]
   150ac:	str	r6, [r4, #28]
   150b0:	str	r2, [r4, #32]
   150b4:	str	r3, [r4, #36]	; 0x24
   150b8:	mov	r0, r4
   150bc:	pop	{r4, r5, r6, r7, r8, pc}
   150c0:	mov	r0, r4
   150c4:	bl	12ad0 <__assert_fail@plt+0x170c>
   150c8:	mov	r4, #0
   150cc:	b	150b8 <__assert_fail@plt+0x3cf4>
   150d0:	andeq	r4, r1, r8, lsl #17
   150d4:	muleq	r1, ip, r8
   150d8:	ldrdeq	r9, [r1], -ip
   150dc:	push	{r4, r5, r6, r7, r8, lr}
   150e0:	mov	r5, r0
   150e4:	ldr	r4, [r0]
   150e8:	mov	r7, #0
   150ec:	add	r4, r4, #8
   150f0:	ldr	r2, [r5, #4]
   150f4:	sub	r3, r4, #8
   150f8:	cmp	r2, r3
   150fc:	bhi	15110 <__assert_fail@plt+0x3d4c>
   15100:	mov	r3, #0
   15104:	str	r3, [r5, #12]
   15108:	str	r3, [r5, #16]
   1510c:	pop	{r4, r5, r6, r7, r8, pc}
   15110:	ldr	r3, [r4, #-8]
   15114:	cmp	r3, #0
   15118:	ldrne	r6, [r4, #-4]
   1511c:	bne	15150 <__assert_fail@plt+0x3d8c>
   15120:	add	r4, r4, #8
   15124:	b	150f0 <__assert_fail@plt+0x3d2c>
   15128:	cmp	r3, #0
   1512c:	beq	15138 <__assert_fail@plt+0x3d74>
   15130:	ldr	r0, [r6]
   15134:	blx	r3
   15138:	ldr	r3, [r6, #4]
   1513c:	ldr	r2, [r5, #36]	; 0x24
   15140:	str	r7, [r6]
   15144:	str	r2, [r6, #4]
   15148:	str	r6, [r5, #36]	; 0x24
   1514c:	mov	r6, r3
   15150:	cmp	r6, #0
   15154:	ldr	r3, [r5, #32]
   15158:	bne	15128 <__assert_fail@plt+0x3d64>
   1515c:	cmp	r3, #0
   15160:	beq	1516c <__assert_fail@plt+0x3da8>
   15164:	ldr	r0, [r4, #-8]
   15168:	blx	r3
   1516c:	str	r7, [r4, #-8]
   15170:	str	r7, [r4, #-4]
   15174:	b	15120 <__assert_fail@plt+0x3d5c>
   15178:	ldr	r3, [r0, #32]
   1517c:	push	{r4, r5, r6, lr}
   15180:	cmp	r3, #0
   15184:	mov	r4, r0
   15188:	bne	151bc <__assert_fail@plt+0x3df8>
   1518c:	ldr	r5, [r4]
   15190:	ldr	r3, [r4, #4]
   15194:	cmp	r5, r3
   15198:	bcc	1520c <__assert_fail@plt+0x3e48>
   1519c:	ldr	r0, [r4, #36]	; 0x24
   151a0:	cmp	r0, #0
   151a4:	bne	1522c <__assert_fail@plt+0x3e68>
   151a8:	ldr	r0, [r4]
   151ac:	bl	12ad0 <__assert_fail@plt+0x170c>
   151b0:	mov	r0, r4
   151b4:	pop	{r4, r5, r6, lr}
   151b8:	b	12ad0 <__assert_fail@plt+0x170c>
   151bc:	ldr	r3, [r0, #16]
   151c0:	cmp	r3, #0
   151c4:	ldrne	r5, [r0]
   151c8:	beq	1518c <__assert_fail@plt+0x3dc8>
   151cc:	ldr	r3, [r4, #4]
   151d0:	cmp	r5, r3
   151d4:	bcs	1518c <__assert_fail@plt+0x3dc8>
   151d8:	ldr	r3, [r5]
   151dc:	cmp	r3, #0
   151e0:	movne	r6, r5
   151e4:	bne	151f0 <__assert_fail@plt+0x3e2c>
   151e8:	add	r5, r5, #8
   151ec:	b	151cc <__assert_fail@plt+0x3e08>
   151f0:	ldr	r0, [r6]
   151f4:	ldr	r3, [r4, #32]
   151f8:	blx	r3
   151fc:	ldr	r6, [r6, #4]
   15200:	cmp	r6, #0
   15204:	bne	151f0 <__assert_fail@plt+0x3e2c>
   15208:	b	151e8 <__assert_fail@plt+0x3e24>
   1520c:	ldr	r0, [r5, #4]
   15210:	cmp	r0, #0
   15214:	addeq	r5, r5, #8
   15218:	beq	15190 <__assert_fail@plt+0x3dcc>
   1521c:	ldr	r6, [r0, #4]
   15220:	bl	12ad0 <__assert_fail@plt+0x170c>
   15224:	mov	r0, r6
   15228:	b	15210 <__assert_fail@plt+0x3e4c>
   1522c:	ldr	r5, [r0, #4]
   15230:	bl	12ad0 <__assert_fail@plt+0x170c>
   15234:	mov	r0, r5
   15238:	b	151a0 <__assert_fail@plt+0x3ddc>
   1523c:	push	{r4, r5, lr}
   15240:	mov	r4, r0
   15244:	sub	sp, sp, #44	; 0x2c
   15248:	mov	r0, r1
   1524c:	ldr	r1, [r4, #20]
   15250:	bl	149c0 <__assert_fail@plt+0x35fc>
   15254:	subs	r5, r0, #0
   15258:	bne	1526c <__assert_fail@plt+0x3ea8>
   1525c:	mov	r5, #0
   15260:	mov	r0, r5
   15264:	add	sp, sp, #44	; 0x2c
   15268:	pop	{r4, r5, pc}
   1526c:	ldr	r3, [r4, #8]
   15270:	cmp	r5, r3
   15274:	beq	1535c <__assert_fail@plt+0x3f98>
   15278:	mov	r1, #8
   1527c:	bl	17ffc <__assert_fail@plt+0x6c38>
   15280:	cmp	r0, #0
   15284:	str	r0, [sp]
   15288:	beq	1525c <__assert_fail@plt+0x3e98>
   1528c:	ldr	r3, [r4, #20]
   15290:	add	r0, r0, r5, lsl #3
   15294:	str	r3, [sp, #20]
   15298:	ldr	r3, [r4, #24]
   1529c:	mov	r2, #0
   152a0:	str	r3, [sp, #24]
   152a4:	ldr	r3, [r4, #28]
   152a8:	str	r0, [sp, #4]
   152ac:	str	r3, [sp, #28]
   152b0:	ldr	r3, [r4, #32]
   152b4:	mov	r1, r4
   152b8:	str	r3, [sp, #32]
   152bc:	ldr	r3, [r4, #36]	; 0x24
   152c0:	mov	r0, sp
   152c4:	str	r5, [sp, #8]
   152c8:	str	r2, [sp, #12]
   152cc:	str	r2, [sp, #16]
   152d0:	str	r3, [sp, #36]	; 0x24
   152d4:	bl	14b38 <__assert_fail@plt+0x3774>
   152d8:	subs	r5, r0, #0
   152dc:	beq	15314 <__assert_fail@plt+0x3f50>
   152e0:	ldr	r0, [r4]
   152e4:	bl	12ad0 <__assert_fail@plt+0x170c>
   152e8:	ldr	r3, [sp]
   152ec:	str	r3, [r4]
   152f0:	ldr	r3, [sp, #4]
   152f4:	str	r3, [r4, #4]
   152f8:	ldr	r3, [sp, #8]
   152fc:	str	r3, [r4, #8]
   15300:	ldr	r3, [sp, #12]
   15304:	str	r3, [r4, #12]
   15308:	ldr	r3, [sp, #36]	; 0x24
   1530c:	str	r3, [r4, #36]	; 0x24
   15310:	b	15260 <__assert_fail@plt+0x3e9c>
   15314:	ldr	r3, [sp, #36]	; 0x24
   15318:	mov	r2, #1
   1531c:	str	r3, [r4, #36]	; 0x24
   15320:	mov	r1, sp
   15324:	mov	r0, r4
   15328:	bl	14b38 <__assert_fail@plt+0x3774>
   1532c:	cmp	r0, #0
   15330:	bne	15338 <__assert_fail@plt+0x3f74>
   15334:	bl	1137c <abort@plt>
   15338:	mov	r2, r5
   1533c:	mov	r1, sp
   15340:	mov	r0, r4
   15344:	bl	14b38 <__assert_fail@plt+0x3774>
   15348:	cmp	r0, #0
   1534c:	beq	15334 <__assert_fail@plt+0x3f70>
   15350:	ldr	r0, [sp]
   15354:	bl	12ad0 <__assert_fail@plt+0x170c>
   15358:	b	15260 <__assert_fail@plt+0x3e9c>
   1535c:	mov	r5, #1
   15360:	b	15260 <__assert_fail@plt+0x3e9c>
   15364:	push	{r0, r1, r4, r5, r6, lr}
   15368:	subs	r6, r1, #0
   1536c:	bne	15374 <__assert_fail@plt+0x3fb0>
   15370:	bl	1137c <abort@plt>
   15374:	mov	r5, r2
   15378:	mov	r3, #0
   1537c:	add	r2, sp, #4
   15380:	mov	r4, r0
   15384:	bl	148e0 <__assert_fail@plt+0x351c>
   15388:	cmp	r0, #0
   1538c:	beq	153a4 <__assert_fail@plt+0x3fe0>
   15390:	cmp	r5, #0
   15394:	strne	r0, [r5]
   15398:	movne	r0, #0
   1539c:	moveq	r0, r5
   153a0:	b	15424 <__assert_fail@plt+0x4060>
   153a4:	vldr	s15, [r4, #12]
   153a8:	ldr	r3, [r4, #20]
   153ac:	vcvt.f32.u32	s14, s15
   153b0:	vldr	s15, [r4, #8]
   153b4:	vldr	s13, [r3, #8]
   153b8:	vcvt.f32.u32	s15, s15
   153bc:	vmul.f32	s15, s15, s13
   153c0:	vcmpe.f32	s14, s15
   153c4:	vmrs	APSR_nzcv, fpscr
   153c8:	ble	15460 <__assert_fail@plt+0x409c>
   153cc:	add	r0, r4, #20
   153d0:	bl	14a88 <__assert_fail@plt+0x36c4>
   153d4:	vldr	s15, [r4, #8]
   153d8:	ldr	r3, [r4, #20]
   153dc:	vldr	s14, [r4, #12]
   153e0:	vcvt.f32.u32	s15, s15
   153e4:	vldr	s13, [r3, #8]
   153e8:	vcvt.f32.u32	s14, s14
   153ec:	vmul.f32	s12, s13, s15
   153f0:	vcmpe.f32	s14, s12
   153f4:	vmrs	APSR_nzcv, fpscr
   153f8:	ble	15460 <__assert_fail@plt+0x409c>
   153fc:	vldr	s14, [r3, #12]
   15400:	ldrb	r2, [r3, #16]
   15404:	vmul.f32	s15, s15, s14
   15408:	cmp	r2, #0
   1540c:	vldr	s14, [pc, #200]	; 154dc <__assert_fail@plt+0x4118>
   15410:	vmuleq.f32	s15, s15, s13
   15414:	vcmpe.f32	s15, s14
   15418:	vmrs	APSR_nzcv, fpscr
   1541c:	blt	1542c <__assert_fail@plt+0x4068>
   15420:	mvn	r0, #0
   15424:	add	sp, sp, #8
   15428:	pop	{r4, r5, r6, pc}
   1542c:	vcvt.u32.f32	s15, s15
   15430:	mov	r0, r4
   15434:	vmov	r1, s15
   15438:	bl	1523c <__assert_fail@plt+0x3e78>
   1543c:	cmp	r0, #0
   15440:	beq	15420 <__assert_fail@plt+0x405c>
   15444:	mov	r3, #0
   15448:	add	r2, sp, #4
   1544c:	mov	r1, r6
   15450:	mov	r0, r4
   15454:	bl	148e0 <__assert_fail@plt+0x351c>
   15458:	cmp	r0, #0
   1545c:	bne	15370 <__assert_fail@plt+0x3fac>
   15460:	ldr	r3, [sp, #4]
   15464:	ldr	r2, [r3]
   15468:	cmp	r2, #0
   1546c:	beq	154bc <__assert_fail@plt+0x40f8>
   15470:	ldr	r0, [r4, #36]	; 0x24
   15474:	cmp	r0, #0
   15478:	ldrne	r3, [r0, #4]
   1547c:	strne	r3, [r4, #36]	; 0x24
   15480:	bne	15494 <__assert_fail@plt+0x40d0>
   15484:	mov	r0, #8
   15488:	bl	18044 <__assert_fail@plt+0x6c80>
   1548c:	cmp	r0, #0
   15490:	beq	15420 <__assert_fail@plt+0x405c>
   15494:	ldr	r3, [sp, #4]
   15498:	str	r6, [r0]
   1549c:	ldr	r2, [r3, #4]
   154a0:	str	r2, [r0, #4]
   154a4:	str	r0, [r3, #4]
   154a8:	ldr	r3, [r4, #16]
   154ac:	add	r3, r3, #1
   154b0:	str	r3, [r4, #16]
   154b4:	mov	r0, #1
   154b8:	b	15424 <__assert_fail@plt+0x4060>
   154bc:	str	r6, [r3]
   154c0:	ldr	r3, [r4, #16]
   154c4:	add	r3, r3, #1
   154c8:	str	r3, [r4, #16]
   154cc:	ldr	r3, [r4, #12]
   154d0:	add	r3, r3, #1
   154d4:	str	r3, [r4, #12]
   154d8:	b	154b4 <__assert_fail@plt+0x40f0>
   154dc:	svcmi	0x00800000
   154e0:	push	{r0, r1, r4, lr}
   154e4:	add	r2, sp, #4
   154e8:	mov	r4, r1
   154ec:	bl	15364 <__assert_fail@plt+0x3fa0>
   154f0:	cmn	r0, #1
   154f4:	moveq	r0, #0
   154f8:	beq	15508 <__assert_fail@plt+0x4144>
   154fc:	cmp	r0, #0
   15500:	movne	r0, r4
   15504:	ldreq	r0, [sp, #4]
   15508:	add	sp, sp, #8
   1550c:	pop	{r4, pc}
   15510:	push	{r0, r1, r4, r5, r6, lr}
   15514:	mov	r3, #1
   15518:	add	r2, sp, #4
   1551c:	mov	r4, r0
   15520:	bl	148e0 <__assert_fail@plt+0x351c>
   15524:	subs	r5, r0, #0
   15528:	beq	155e0 <__assert_fail@plt+0x421c>
   1552c:	ldr	r3, [r4, #16]
   15530:	sub	r3, r3, #1
   15534:	str	r3, [r4, #16]
   15538:	ldr	r3, [sp, #4]
   1553c:	ldr	r3, [r3]
   15540:	cmp	r3, #0
   15544:	bne	155e0 <__assert_fail@plt+0x421c>
   15548:	vldr	s14, [r4, #8]
   1554c:	ldr	r3, [r4, #12]
   15550:	sub	r3, r3, #1
   15554:	vcvt.f32.u32	s14, s14
   15558:	vmov	s15, r3
   1555c:	str	r3, [r4, #12]
   15560:	ldr	r3, [r4, #20]
   15564:	vcvt.f32.u32	s15, s15
   15568:	vldr	s13, [r3]
   1556c:	vmul.f32	s14, s14, s13
   15570:	vcmpe.f32	s15, s14
   15574:	vmrs	APSR_nzcv, fpscr
   15578:	bpl	155e0 <__assert_fail@plt+0x421c>
   1557c:	add	r0, r4, #20
   15580:	bl	14a88 <__assert_fail@plt+0x36c4>
   15584:	vldr	s15, [r4, #8]
   15588:	vldr	s14, [r4, #12]
   1558c:	ldr	r3, [r4, #20]
   15590:	vcvt.f32.u32	s15, s15
   15594:	vcvt.f32.u32	s13, s14
   15598:	vldr	s14, [r3]
   1559c:	vmul.f32	s14, s15, s14
   155a0:	vcmpe.f32	s13, s14
   155a4:	vmrs	APSR_nzcv, fpscr
   155a8:	bpl	155e0 <__assert_fail@plt+0x421c>
   155ac:	vldr	s14, [r3, #4]
   155b0:	ldrb	r2, [r3, #16]
   155b4:	mov	r0, r4
   155b8:	vmul.f32	s15, s15, s14
   155bc:	cmp	r2, #0
   155c0:	vldreq	s14, [r3, #8]
   155c4:	vmuleq.f32	s15, s15, s14
   155c8:	vcvt.u32.f32	s15, s15
   155cc:	vmov	r1, s15
   155d0:	bl	1523c <__assert_fail@plt+0x3e78>
   155d4:	cmp	r0, #0
   155d8:	ldreq	r0, [r4, #36]	; 0x24
   155dc:	beq	155f8 <__assert_fail@plt+0x4234>
   155e0:	mov	r0, r5
   155e4:	add	sp, sp, #8
   155e8:	pop	{r4, r5, r6, pc}
   155ec:	ldr	r6, [r0, #4]
   155f0:	bl	12ad0 <__assert_fail@plt+0x170c>
   155f4:	mov	r0, r6
   155f8:	cmp	r0, #0
   155fc:	bne	155ec <__assert_fail@plt+0x4228>
   15600:	str	r0, [r4, #36]	; 0x24
   15604:	b	155e0 <__assert_fail@plt+0x421c>
   15608:	b	15510 <__assert_fail@plt+0x414c>
   1560c:	mov	r3, #1
   15610:	strb	r3, [r0, #28]
   15614:	mov	r3, #0
   15618:	str	r3, [r0, #20]
   1561c:	str	r3, [r0, #24]
   15620:	str	r1, [r0]
   15624:	str	r1, [r0, #4]
   15628:	str	r1, [r0, #8]
   1562c:	str	r1, [r0, #12]
   15630:	str	r1, [r0, #16]
   15634:	bx	lr
   15638:	ldrb	r0, [r0, #28]
   1563c:	bx	lr
   15640:	ldrb	ip, [r0, #28]
   15644:	ldr	r3, [r0, #20]
   15648:	mov	r2, r0
   1564c:	eor	ip, ip, #1
   15650:	add	r3, ip, r3
   15654:	and	r3, r3, #3
   15658:	ldr	r0, [r0, r3, lsl #2]
   1565c:	str	r1, [r2, r3, lsl #2]
   15660:	ldr	r1, [r2, #24]
   15664:	str	r3, [r2, #20]
   15668:	cmp	r3, r1
   1566c:	addeq	r3, ip, r3
   15670:	andeq	r3, r3, #3
   15674:	streq	r3, [r2, #24]
   15678:	mov	r3, #0
   1567c:	strb	r3, [r2, #28]
   15680:	bx	lr
   15684:	ldrb	r2, [r0, #28]
   15688:	cmp	r2, #0
   1568c:	beq	15698 <__assert_fail@plt+0x42d4>
   15690:	push	{r4, lr}
   15694:	bl	1137c <abort@plt>
   15698:	mov	r3, r0
   1569c:	ldr	r2, [r0, #20]
   156a0:	ldr	r1, [r3, #16]
   156a4:	ldr	r0, [r0, r2, lsl #2]
   156a8:	str	r1, [r3, r2, lsl #2]
   156ac:	ldr	r1, [r3, #24]
   156b0:	cmp	r2, r1
   156b4:	addne	r2, r2, #3
   156b8:	moveq	r2, #1
   156bc:	andne	r2, r2, #3
   156c0:	strbeq	r2, [r3, #28]
   156c4:	strne	r2, [r3, #20]
   156c8:	bx	lr
   156cc:	push	{r4, r5, r6, r8, r9, lr}
   156d0:	mov	r4, r0
   156d4:	mov	r5, r1
   156d8:	add	r6, r2, #20
   156dc:	mov	r8, #10
   156e0:	mov	r9, #0
   156e4:	mov	r3, #0
   156e8:	strb	r3, [r2, #20]
   156ec:	mov	r0, r4
   156f0:	mov	r1, r5
   156f4:	mov	r2, r8
   156f8:	mov	r3, r9
   156fc:	bl	18ba8 <__assert_fail@plt+0x77e4>
   15700:	mov	r3, r9
   15704:	mov	r0, r4
   15708:	mov	r1, r5
   1570c:	add	r2, r2, #48	; 0x30
   15710:	strb	r2, [r6, #-1]!
   15714:	mov	r2, r8
   15718:	bl	18ba8 <__assert_fail@plt+0x77e4>
   1571c:	mov	r4, r0
   15720:	mov	r5, r1
   15724:	orrs	r3, r4, r5
   15728:	bne	156ec <__assert_fail@plt+0x4328>
   1572c:	mov	r0, r6
   15730:	pop	{r4, r5, r6, r8, r9, pc}
   15734:	push	{r2, r3}
   15738:	push	{r0, r1, r2, lr}
   1573c:	ldr	r2, [sp, #16]
   15740:	ands	r3, r2, #64	; 0x40
   15744:	addne	r3, sp, #20
   15748:	strne	r3, [sp, #4]
   1574c:	ldrne	r3, [sp, #20]
   15750:	bl	11250 <openat64@plt>
   15754:	bl	16e34 <__assert_fail@plt+0x5a70>
   15758:	add	sp, sp, #12
   1575c:	pop	{lr}		; (ldr lr, [sp], #4)
   15760:	add	sp, sp, #8
   15764:	bx	lr
   15768:	orr	r2, r2, #540672	; 0x84000
   1576c:	push	{r4, r5, r6, r7, r8, lr}
   15770:	orr	r2, r2, #2304	; 0x900
   15774:	mov	r5, r3
   15778:	bl	15734 <__assert_fail@plt+0x4370>
   1577c:	subs	r6, r0, #0
   15780:	movlt	r4, #0
   15784:	blt	157b0 <__assert_fail@plt+0x43ec>
   15788:	bl	11310 <fdopendir@plt>
   1578c:	subs	r4, r0, #0
   15790:	strne	r6, [r5]
   15794:	bne	157b0 <__assert_fail@plt+0x43ec>
   15798:	bl	11268 <__errno_location@plt>
   1579c:	ldr	r7, [r0]
   157a0:	mov	r5, r0
   157a4:	mov	r0, r6
   157a8:	bl	11388 <close@plt>
   157ac:	str	r7, [r5]
   157b0:	mov	r0, r4
   157b4:	pop	{r4, r5, r6, r7, r8, pc}
   157b8:	push	{r4, r5, r6, lr}
   157bc:	subs	r5, r0, #0
   157c0:	bne	157d8 <__assert_fail@plt+0x4414>
   157c4:	ldr	r3, [pc, #124]	; 15848 <__assert_fail@plt+0x4484>
   157c8:	ldr	r0, [pc, #124]	; 1584c <__assert_fail@plt+0x4488>
   157cc:	ldr	r1, [r3]
   157d0:	bl	11364 <fputs@plt>
   157d4:	bl	1137c <abort@plt>
   157d8:	mov	r1, #47	; 0x2f
   157dc:	bl	112ec <strrchr@plt>
   157e0:	cmp	r0, #0
   157e4:	addne	r4, r0, #1
   157e8:	moveq	r4, r5
   157ec:	sub	r3, r4, r5
   157f0:	cmp	r3, #6
   157f4:	ble	15834 <__assert_fail@plt+0x4470>
   157f8:	mov	r2, #7
   157fc:	ldr	r1, [pc, #76]	; 15850 <__assert_fail@plt+0x448c>
   15800:	sub	r0, r4, #7
   15804:	bl	11370 <strncmp@plt>
   15808:	cmp	r0, #0
   1580c:	bne	15834 <__assert_fail@plt+0x4470>
   15810:	mov	r2, #3
   15814:	ldr	r1, [pc, #56]	; 15854 <__assert_fail@plt+0x4490>
   15818:	mov	r0, r4
   1581c:	bl	11370 <strncmp@plt>
   15820:	cmp	r0, #0
   15824:	movne	r5, r4
   15828:	ldreq	r3, [pc, #40]	; 15858 <__assert_fail@plt+0x4494>
   1582c:	addeq	r5, r4, #3
   15830:	streq	r5, [r3]
   15834:	ldr	r3, [pc, #32]	; 1585c <__assert_fail@plt+0x4498>
   15838:	str	r5, [r3]
   1583c:	ldr	r3, [pc, #28]	; 15860 <__assert_fail@plt+0x449c>
   15840:	str	r5, [r3]
   15844:	pop	{r4, r5, r6, pc}
   15848:	muleq	r2, r8, r1
   1584c:	andeq	r9, r1, r9, asr pc
   15850:	muleq	r1, r1, pc	; <UNPREDICTABLE>
   15854:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   15858:	andeq	fp, r2, r8, lsl #3
   1585c:	andeq	fp, r2, r8, asr #3
   15860:	andeq	fp, r2, ip, lsl #3
   15864:	push	{r4, r5, r6, lr}
   15868:	mov	r2, #48	; 0x30
   1586c:	mov	r5, r1
   15870:	mov	r1, #0
   15874:	mov	r4, r0
   15878:	bl	11280 <memset@plt>
   1587c:	cmp	r5, #10
   15880:	bne	15888 <__assert_fail@plt+0x44c4>
   15884:	bl	1137c <abort@plt>
   15888:	str	r5, [r4]
   1588c:	mov	r0, r4
   15890:	pop	{r4, r5, r6, pc}
   15894:	push	{r4, r5, r6, lr}
   15898:	mov	r4, r0
   1589c:	mov	r5, r1
   158a0:	bl	185a0 <__assert_fail@plt+0x71dc>
   158a4:	ldrb	r3, [r0]
   158a8:	bic	r3, r3, #32
   158ac:	cmp	r3, #85	; 0x55
   158b0:	bne	15920 <__assert_fail@plt+0x455c>
   158b4:	ldrb	r3, [r0, #1]
   158b8:	bic	r3, r3, #32
   158bc:	cmp	r3, #84	; 0x54
   158c0:	bne	158f8 <__assert_fail@plt+0x4534>
   158c4:	ldrb	r3, [r0, #2]
   158c8:	bic	r3, r3, #32
   158cc:	cmp	r3, #70	; 0x46
   158d0:	bne	158f8 <__assert_fail@plt+0x4534>
   158d4:	ldrb	r3, [r0, #3]
   158d8:	cmp	r3, #45	; 0x2d
   158dc:	bne	158f8 <__assert_fail@plt+0x4534>
   158e0:	ldrb	r3, [r0, #4]
   158e4:	cmp	r3, #56	; 0x38
   158e8:	bne	158f8 <__assert_fail@plt+0x4534>
   158ec:	ldrb	r3, [r0, #5]
   158f0:	cmp	r3, #0
   158f4:	beq	1590c <__assert_fail@plt+0x4548>
   158f8:	ldr	r1, [pc, #144]	; 15990 <__assert_fail@plt+0x45cc>
   158fc:	ldr	r0, [pc, #144]	; 15994 <__assert_fail@plt+0x45d0>
   15900:	cmp	r5, #9
   15904:	movne	r0, r1
   15908:	pop	{r4, r5, r6, pc}
   1590c:	ldrb	r3, [r4]
   15910:	ldr	r1, [pc, #128]	; 15998 <__assert_fail@plt+0x45d4>
   15914:	ldr	r0, [pc, #128]	; 1599c <__assert_fail@plt+0x45d8>
   15918:	cmp	r3, #96	; 0x60
   1591c:	b	15904 <__assert_fail@plt+0x4540>
   15920:	cmp	r3, #71	; 0x47
   15924:	bne	158f8 <__assert_fail@plt+0x4534>
   15928:	ldrb	r3, [r0, #1]
   1592c:	bic	r3, r3, #32
   15930:	cmp	r3, #66	; 0x42
   15934:	bne	158f8 <__assert_fail@plt+0x4534>
   15938:	ldrb	r3, [r0, #2]
   1593c:	cmp	r3, #49	; 0x31
   15940:	bne	158f8 <__assert_fail@plt+0x4534>
   15944:	ldrb	r3, [r0, #3]
   15948:	cmp	r3, #56	; 0x38
   1594c:	bne	158f8 <__assert_fail@plt+0x4534>
   15950:	ldrb	r3, [r0, #4]
   15954:	cmp	r3, #48	; 0x30
   15958:	bne	158f8 <__assert_fail@plt+0x4534>
   1595c:	ldrb	r3, [r0, #5]
   15960:	cmp	r3, #51	; 0x33
   15964:	bne	158f8 <__assert_fail@plt+0x4534>
   15968:	ldrb	r3, [r0, #6]
   1596c:	cmp	r3, #48	; 0x30
   15970:	bne	158f8 <__assert_fail@plt+0x4534>
   15974:	ldrb	r3, [r0, #7]
   15978:	cmp	r3, #0
   1597c:	bne	158f8 <__assert_fail@plt+0x4534>
   15980:	ldrb	r3, [r4]
   15984:	ldr	r1, [pc, #20]	; 159a0 <__assert_fail@plt+0x45dc>
   15988:	ldr	r0, [pc, #20]	; 159a4 <__assert_fail@plt+0x45e0>
   1598c:	b	15918 <__assert_fail@plt+0x4554>
   15990:	andeq	sl, r1, r5
   15994:	andeq	sl, r1, r3
   15998:	strdeq	r9, [r1], -r8
   1599c:	strdeq	r9, [r1], -r4
   159a0:	andeq	sl, r1, r0
   159a4:	strdeq	r9, [r1], -ip
   159a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159ac:	sub	sp, sp, #108	; 0x6c
   159b0:	mov	r8, r0
   159b4:	str	r3, [sp, #36]	; 0x24
   159b8:	mov	r5, r1
   159bc:	str	r2, [sp, #44]	; 0x2c
   159c0:	ldr	sl, [sp, #144]	; 0x90
   159c4:	bl	11184 <__ctype_get_mb_cur_max@plt>
   159c8:	ldr	r3, [sp, #148]	; 0x94
   159cc:	mov	r7, #0
   159d0:	str	r7, [sp, #48]	; 0x30
   159d4:	lsr	r6, r3, #1
   159d8:	and	r6, r6, #1
   159dc:	mov	r3, #1
   159e0:	str	r3, [sp, #72]	; 0x48
   159e4:	str	r7, [sp, #24]
   159e8:	str	r7, [sp, #32]
   159ec:	str	r7, [sp, #40]	; 0x28
   159f0:	str	r7, [sp, #60]	; 0x3c
   159f4:	str	r0, [sp, #76]	; 0x4c
   159f8:	cmp	sl, #10
   159fc:	ldrls	pc, [pc, sl, lsl #2]
   15a00:	b	15c3c <__assert_fail@plt+0x4878>
   15a04:	andeq	r5, r1, r0, lsr sl
   15a08:	andeq	r6, r1, r4, asr #13
   15a0c:	andeq	r5, r1, r8, lsl #24
   15a10:	andeq	r5, r1, r4, asr ip
   15a14:	andeq	r5, r1, r4, ror #23
   15a18:	andeq	r5, r1, ip, lsr sl
   15a1c:	andeq	r6, r1, r4, lsr #13
   15a20:	andeq	r5, r1, r0, asr #24
   15a24:	andeq	r5, r1, r4, lsr fp
   15a28:	andeq	r5, r1, r4, lsr fp
   15a2c:	andeq	r5, r1, r4, lsr fp
   15a30:	mov	r6, #0
   15a34:	mov	r4, #0
   15a38:	b	15a68 <__assert_fail@plt+0x46a4>
   15a3c:	cmp	r6, #0
   15a40:	bne	15c64 <__assert_fail@plt+0x48a0>
   15a44:	cmp	r5, #0
   15a48:	movne	r3, #34	; 0x22
   15a4c:	strbne	r3, [r8]
   15a50:	mov	r3, #1
   15a54:	str	r3, [sp, #24]
   15a58:	str	r3, [sp, #32]
   15a5c:	mov	r4, #1
   15a60:	ldr	r3, [pc, #3172]	; 166cc <__assert_fail@plt+0x5308>
   15a64:	str	r3, [sp, #40]	; 0x28
   15a68:	mov	r9, r5
   15a6c:	mov	r3, #0
   15a70:	str	r7, [sp, #68]	; 0x44
   15a74:	str	r3, [sp, #28]
   15a78:	ldr	r3, [sp, #36]	; 0x24
   15a7c:	cmn	r3, #1
   15a80:	bne	16610 <__assert_fail@plt+0x524c>
   15a84:	ldr	r3, [sp, #44]	; 0x2c
   15a88:	ldr	r2, [sp, #28]
   15a8c:	ldrb	r3, [r3, r2]
   15a90:	adds	r3, r3, #0
   15a94:	movne	r3, #1
   15a98:	str	r3, [sp, #52]	; 0x34
   15a9c:	ldr	r3, [sp, #52]	; 0x34
   15aa0:	cmp	r3, #0
   15aa4:	bne	15c8c <__assert_fail@plt+0x48c8>
   15aa8:	sub	r2, sl, #2
   15aac:	clz	r2, r2
   15ab0:	lsr	r2, r2, #5
   15ab4:	and	r3, r6, r2
   15ab8:	cmp	r4, #0
   15abc:	movne	r3, #0
   15ac0:	andeq	r3, r3, #1
   15ac4:	cmp	r3, #0
   15ac8:	bne	15e54 <__assert_fail@plt+0x4a90>
   15acc:	eor	r3, r6, #1
   15ad0:	ands	r2, r2, r3
   15ad4:	beq	16648 <__assert_fail@plt+0x5284>
   15ad8:	ldr	r3, [sp, #68]	; 0x44
   15adc:	cmp	r3, #0
   15ae0:	beq	16680 <__assert_fail@plt+0x52bc>
   15ae4:	ldr	r3, [sp, #72]	; 0x48
   15ae8:	cmp	r3, #0
   15aec:	beq	16624 <__assert_fail@plt+0x5260>
   15af0:	ldr	r3, [sp, #160]	; 0xa0
   15af4:	ldr	r2, [sp, #44]	; 0x2c
   15af8:	str	r3, [sp, #16]
   15afc:	ldr	r3, [sp, #156]	; 0x9c
   15b00:	ldr	r1, [sp, #60]	; 0x3c
   15b04:	str	r3, [sp, #12]
   15b08:	ldr	r3, [sp, #152]	; 0x98
   15b0c:	str	r3, [sp, #8]
   15b10:	ldr	r3, [sp, #148]	; 0x94
   15b14:	str	r3, [sp, #4]
   15b18:	mov	r3, #5
   15b1c:	str	r3, [sp]
   15b20:	ldr	r3, [sp, #36]	; 0x24
   15b24:	mov	r0, r8
   15b28:	bl	159a8 <__assert_fail@plt+0x45e4>
   15b2c:	mov	r4, r0
   15b30:	b	16674 <__assert_fail@plt+0x52b0>
   15b34:	cmp	sl, #10
   15b38:	beq	15b94 <__assert_fail@plt+0x47d0>
   15b3c:	ldr	r4, [pc, #2956]	; 166d0 <__assert_fail@plt+0x530c>
   15b40:	mov	r2, #5
   15b44:	mov	r1, r4
   15b48:	mov	r0, #0
   15b4c:	bl	11130 <dcgettext@plt>
   15b50:	cmp	r0, r4
   15b54:	str	r0, [sp, #156]	; 0x9c
   15b58:	bne	15b68 <__assert_fail@plt+0x47a4>
   15b5c:	mov	r1, sl
   15b60:	bl	15894 <__assert_fail@plt+0x44d0>
   15b64:	str	r0, [sp, #156]	; 0x9c
   15b68:	ldr	r4, [pc, #2916]	; 166d4 <__assert_fail@plt+0x5310>
   15b6c:	mov	r2, #5
   15b70:	mov	r1, r4
   15b74:	mov	r0, #0
   15b78:	bl	11130 <dcgettext@plt>
   15b7c:	cmp	r0, r4
   15b80:	str	r0, [sp, #160]	; 0xa0
   15b84:	bne	15b94 <__assert_fail@plt+0x47d0>
   15b88:	mov	r1, sl
   15b8c:	bl	15894 <__assert_fail@plt+0x44d0>
   15b90:	str	r0, [sp, #160]	; 0xa0
   15b94:	cmp	r6, #0
   15b98:	moveq	r4, r6
   15b9c:	beq	15bb4 <__assert_fail@plt+0x47f0>
   15ba0:	mov	r4, #0
   15ba4:	b	15bc4 <__assert_fail@plt+0x4800>
   15ba8:	cmp	r5, r4
   15bac:	strbhi	r3, [r8, r4]
   15bb0:	add	r4, r4, #1
   15bb4:	ldr	r3, [sp, #156]	; 0x9c
   15bb8:	ldrb	r3, [r3, r4]
   15bbc:	cmp	r3, #0
   15bc0:	bne	15ba8 <__assert_fail@plt+0x47e4>
   15bc4:	ldr	r0, [sp, #160]	; 0xa0
   15bc8:	bl	11238 <strlen@plt>
   15bcc:	ldr	r3, [sp, #160]	; 0xa0
   15bd0:	str	r3, [sp, #40]	; 0x28
   15bd4:	mov	r3, #1
   15bd8:	str	r3, [sp, #24]
   15bdc:	str	r0, [sp, #32]
   15be0:	b	15a68 <__assert_fail@plt+0x46a4>
   15be4:	mov	r3, #1
   15be8:	cmp	r6, #0
   15bec:	streq	r3, [sp, #24]
   15bf0:	beq	15c10 <__assert_fail@plt+0x484c>
   15bf4:	str	r3, [sp, #32]
   15bf8:	ldr	r3, [pc, #2772]	; 166d4 <__assert_fail@plt+0x5310>
   15bfc:	mov	r4, #0
   15c00:	str	r3, [sp, #40]	; 0x28
   15c04:	b	15c34 <__assert_fail@plt+0x4870>
   15c08:	cmp	r6, #0
   15c0c:	bne	15c7c <__assert_fail@plt+0x48b8>
   15c10:	cmp	r5, #0
   15c14:	movne	r3, #39	; 0x27
   15c18:	strbne	r3, [r8]
   15c1c:	mov	r3, #1
   15c20:	str	r3, [sp, #32]
   15c24:	mov	r6, #0
   15c28:	ldr	r3, [pc, #2724]	; 166d4 <__assert_fail@plt+0x5310>
   15c2c:	mov	r4, #1
   15c30:	str	r3, [sp, #40]	; 0x28
   15c34:	mov	sl, #2
   15c38:	b	15a68 <__assert_fail@plt+0x46a4>
   15c3c:	bl	1137c <abort@plt>
   15c40:	mov	r6, #0
   15c44:	mov	r3, #1
   15c48:	str	r3, [sp, #24]
   15c4c:	mov	r4, r6
   15c50:	b	15a68 <__assert_fail@plt+0x46a4>
   15c54:	mov	r6, #1
   15c58:	str	r6, [sp, #24]
   15c5c:	str	r6, [sp, #32]
   15c60:	b	15bf8 <__assert_fail@plt+0x4834>
   15c64:	mov	r3, #1
   15c68:	str	r3, [sp, #32]
   15c6c:	ldr	r3, [pc, #2648]	; 166cc <__assert_fail@plt+0x5308>
   15c70:	str	r6, [sp, #24]
   15c74:	str	r3, [sp, #40]	; 0x28
   15c78:	b	15a34 <__assert_fail@plt+0x4670>
   15c7c:	mov	r3, #1
   15c80:	str	r3, [sp, #32]
   15c84:	ldr	r3, [pc, #2632]	; 166d4 <__assert_fail@plt+0x5310>
   15c88:	b	15c74 <__assert_fail@plt+0x48b0>
   15c8c:	ldr	r3, [sp, #32]
   15c90:	ldr	fp, [sp, #24]
   15c94:	cmp	sl, #2
   15c98:	moveq	fp, #0
   15c9c:	andne	fp, fp, #1
   15ca0:	adds	r5, r3, #0
   15ca4:	movne	r5, #1
   15ca8:	ands	r3, r5, fp
   15cac:	str	r3, [sp, #64]	; 0x40
   15cb0:	beq	15d80 <__assert_fail@plt+0x49bc>
   15cb4:	ldr	r2, [sp, #32]
   15cb8:	ldr	r3, [sp, #28]
   15cbc:	add	r7, r3, r2
   15cc0:	mov	r3, r2
   15cc4:	ldr	r2, [sp, #36]	; 0x24
   15cc8:	cmp	r3, #1
   15ccc:	movls	r3, #0
   15cd0:	movhi	r3, #1
   15cd4:	cmn	r2, #1
   15cd8:	movne	r3, #0
   15cdc:	cmp	r3, #0
   15ce0:	beq	15cf0 <__assert_fail@plt+0x492c>
   15ce4:	ldr	r0, [sp, #44]	; 0x2c
   15ce8:	bl	11238 <strlen@plt>
   15cec:	str	r0, [sp, #36]	; 0x24
   15cf0:	ldr	r3, [sp, #36]	; 0x24
   15cf4:	cmp	r3, r7
   15cf8:	bcc	15d78 <__assert_fail@plt+0x49b4>
   15cfc:	ldr	r3, [sp, #44]	; 0x2c
   15d00:	ldr	r0, [sp, #28]
   15d04:	ldr	r2, [sp, #32]
   15d08:	ldr	r1, [sp, #40]	; 0x28
   15d0c:	add	r0, r3, r0
   15d10:	bl	1110c <memcmp@plt>
   15d14:	cmp	r0, #0
   15d18:	bne	15d78 <__assert_fail@plt+0x49b4>
   15d1c:	cmp	r6, #0
   15d20:	beq	15d80 <__assert_fail@plt+0x49bc>
   15d24:	str	r6, [sp, #24]
   15d28:	ldr	r3, [sp, #24]
   15d2c:	ldr	r2, [sp, #44]	; 0x2c
   15d30:	cmp	sl, #2
   15d34:	movne	r3, #0
   15d38:	andeq	r3, r3, #1
   15d3c:	cmp	r3, #0
   15d40:	ldr	r3, [sp, #160]	; 0xa0
   15d44:	movne	sl, #4
   15d48:	str	r3, [sp, #16]
   15d4c:	ldr	r3, [sp, #156]	; 0x9c
   15d50:	str	sl, [sp]
   15d54:	str	r3, [sp, #12]
   15d58:	mov	r3, #0
   15d5c:	str	r3, [sp, #8]
   15d60:	ldr	r3, [sp, #148]	; 0x94
   15d64:	mov	r1, r9
   15d68:	bic	r3, r3, #2
   15d6c:	str	r3, [sp, #4]
   15d70:	ldr	r3, [sp, #36]	; 0x24
   15d74:	b	15b24 <__assert_fail@plt+0x4760>
   15d78:	mov	r3, #0
   15d7c:	str	r3, [sp, #64]	; 0x40
   15d80:	ldr	r2, [sp, #28]
   15d84:	ldr	r3, [sp, #44]	; 0x2c
   15d88:	add	r3, r3, r2
   15d8c:	str	r3, [sp, #80]	; 0x50
   15d90:	ldr	r3, [sp, #44]	; 0x2c
   15d94:	ldrb	r7, [r3, r2]
   15d98:	cmp	r7, #58	; 0x3a
   15d9c:	bhi	15f04 <__assert_fail@plt+0x4b40>
   15da0:	cmp	r7, #43	; 0x2b
   15da4:	bcs	15f58 <__assert_fail@plt+0x4b94>
   15da8:	cmp	r7, #32
   15dac:	beq	15fb0 <__assert_fail@plt+0x4bec>
   15db0:	bhi	15e5c <__assert_fail@plt+0x4a98>
   15db4:	cmp	r7, #9
   15db8:	beq	16264 <__assert_fail@plt+0x4ea0>
   15dbc:	bhi	15e20 <__assert_fail@plt+0x4a5c>
   15dc0:	cmp	r7, #7
   15dc4:	beq	16310 <__assert_fail@plt+0x4f4c>
   15dc8:	bhi	15fcc <__assert_fail@plt+0x4c08>
   15dcc:	cmp	r7, #0
   15dd0:	beq	15fe8 <__assert_fail@plt+0x4c24>
   15dd4:	ldr	r3, [sp, #76]	; 0x4c
   15dd8:	cmp	r3, #1
   15ddc:	bne	16354 <__assert_fail@plt+0x4f90>
   15de0:	bl	11214 <__ctype_b_loc@plt>
   15de4:	sxth	r3, r7
   15de8:	lsl	r3, r3, #1
   15dec:	ldr	r2, [r0]
   15df0:	ldrh	r5, [r2, r3]
   15df4:	ldr	r3, [sp, #76]	; 0x4c
   15df8:	str	r3, [sp, #56]	; 0x38
   15dfc:	lsr	r5, r5, #14
   15e00:	and	r5, r5, #1
   15e04:	ldr	r3, [sp, #24]
   15e08:	eor	fp, r5, #1
   15e0c:	and	fp, fp, r3
   15e10:	ands	fp, fp, #255	; 0xff
   15e14:	beq	1619c <__assert_fail@plt+0x4dd8>
   15e18:	mov	r5, #0
   15e1c:	b	16400 <__assert_fail@plt+0x503c>
   15e20:	cmp	r7, #11
   15e24:	beq	1626c <__assert_fail@plt+0x4ea8>
   15e28:	bcc	16308 <__assert_fail@plt+0x4f44>
   15e2c:	cmp	r7, #12
   15e30:	beq	16318 <__assert_fail@plt+0x4f54>
   15e34:	cmp	r7, #13
   15e38:	moveq	r3, #114	; 0x72
   15e3c:	bne	15dd4 <__assert_fail@plt+0x4a10>
   15e40:	cmp	sl, #2
   15e44:	movne	r2, #0
   15e48:	andeq	r2, r6, #1
   15e4c:	cmp	r2, #0
   15e50:	beq	15fd0 <__assert_fail@plt+0x4c0c>
   15e54:	mov	sl, #2
   15e58:	b	15d28 <__assert_fail@plt+0x4964>
   15e5c:	cmp	r7, #37	; 0x25
   15e60:	beq	15f58 <__assert_fail@plt+0x4b94>
   15e64:	bhi	15e78 <__assert_fail@plt+0x4ab4>
   15e68:	cmp	r7, #35	; 0x23
   15e6c:	beq	15fa4 <__assert_fail@plt+0x4be0>
   15e70:	mov	r5, #0
   15e74:	b	15fb4 <__assert_fail@plt+0x4bf0>
   15e78:	cmp	r7, #39	; 0x27
   15e7c:	bne	15e70 <__assert_fail@plt+0x4aac>
   15e80:	cmp	sl, #2
   15e84:	ldrne	r5, [sp, #52]	; 0x34
   15e88:	movne	r3, r5
   15e8c:	strne	r3, [sp, #68]	; 0x44
   15e90:	bne	15f5c <__assert_fail@plt+0x4b98>
   15e94:	cmp	r6, #0
   15e98:	bne	15d28 <__assert_fail@plt+0x4964>
   15e9c:	ldr	r2, [sp, #60]	; 0x3c
   15ea0:	adds	r3, r9, #0
   15ea4:	movne	r3, #1
   15ea8:	cmp	r2, #0
   15eac:	movne	r3, #0
   15eb0:	cmp	r3, #0
   15eb4:	strne	r9, [sp, #60]	; 0x3c
   15eb8:	movne	r9, #0
   15ebc:	bne	15ecc <__assert_fail@plt+0x4b08>
   15ec0:	cmp	r9, r4
   15ec4:	movhi	r3, #39	; 0x27
   15ec8:	strbhi	r3, [r8, r4]
   15ecc:	add	r3, r4, #1
   15ed0:	cmp	r3, r9
   15ed4:	movcc	r2, #92	; 0x5c
   15ed8:	strbcc	r2, [r8, r3]
   15edc:	add	r3, r4, #2
   15ee0:	cmp	r3, r9
   15ee4:	ldr	r5, [sp, #52]	; 0x34
   15ee8:	movcc	r2, #39	; 0x27
   15eec:	strbcc	r2, [r8, r3]
   15ef0:	add	r4, r4, #3
   15ef4:	mov	fp, r6
   15ef8:	str	r5, [sp, #68]	; 0x44
   15efc:	str	r6, [sp, #48]	; 0x30
   15f00:	b	1619c <__assert_fail@plt+0x4dd8>
   15f04:	cmp	r7, #94	; 0x5e
   15f08:	beq	15e70 <__assert_fail@plt+0x4aac>
   15f0c:	bhi	15f64 <__assert_fail@plt+0x4ba0>
   15f10:	cmp	r7, #90	; 0x5a
   15f14:	bhi	15f4c <__assert_fail@plt+0x4b88>
   15f18:	cmp	r7, #65	; 0x41
   15f1c:	bcs	15f58 <__assert_fail@plt+0x4b94>
   15f20:	cmp	r7, #62	; 0x3e
   15f24:	bls	15e70 <__assert_fail@plt+0x4aac>
   15f28:	cmp	r7, #63	; 0x3f
   15f2c:	bne	15dd4 <__assert_fail@plt+0x4a10>
   15f30:	cmp	sl, #2
   15f34:	beq	160d8 <__assert_fail@plt+0x4d14>
   15f38:	cmp	sl, #5
   15f3c:	beq	160e8 <__assert_fail@plt+0x4d24>
   15f40:	mov	fp, #0
   15f44:	mov	r5, fp
   15f48:	b	1619c <__assert_fail@plt+0x4dd8>
   15f4c:	cmp	r7, #92	; 0x5c
   15f50:	beq	16274 <__assert_fail@plt+0x4eb0>
   15f54:	bls	15e70 <__assert_fail@plt+0x4aac>
   15f58:	ldr	r5, [sp, #52]	; 0x34
   15f5c:	mov	fp, #0
   15f60:	b	1619c <__assert_fail@plt+0x4dd8>
   15f64:	cmp	r7, #122	; 0x7a
   15f68:	bhi	15f88 <__assert_fail@plt+0x4bc4>
   15f6c:	cmp	r7, #97	; 0x61
   15f70:	bcs	15f58 <__assert_fail@plt+0x4b94>
   15f74:	cmp	r7, #95	; 0x5f
   15f78:	beq	15f58 <__assert_fail@plt+0x4b94>
   15f7c:	cmp	r7, #96	; 0x60
   15f80:	bne	15dd4 <__assert_fail@plt+0x4a10>
   15f84:	b	15e70 <__assert_fail@plt+0x4aac>
   15f88:	cmp	r7, #124	; 0x7c
   15f8c:	beq	15e70 <__assert_fail@plt+0x4aac>
   15f90:	bcc	16320 <__assert_fail@plt+0x4f5c>
   15f94:	cmp	r7, #125	; 0x7d
   15f98:	beq	16320 <__assert_fail@plt+0x4f5c>
   15f9c:	cmp	r7, #126	; 0x7e
   15fa0:	bne	15dd4 <__assert_fail@plt+0x4a10>
   15fa4:	ldr	r3, [sp, #28]
   15fa8:	cmp	r3, #0
   15fac:	bne	160e0 <__assert_fail@plt+0x4d1c>
   15fb0:	ldr	r5, [sp, #52]	; 0x34
   15fb4:	cmp	sl, #2
   15fb8:	movne	fp, #0
   15fbc:	andeq	fp, r6, #1
   15fc0:	cmp	fp, #0
   15fc4:	beq	1619c <__assert_fail@plt+0x4dd8>
   15fc8:	b	15e54 <__assert_fail@plt+0x4a90>
   15fcc:	mov	r3, #98	; 0x62
   15fd0:	ldr	r2, [sp, #24]
   15fd4:	cmp	r2, #0
   15fd8:	beq	160e0 <__assert_fail@plt+0x4d1c>
   15fdc:	mov	r7, r3
   15fe0:	mov	r5, #0
   15fe4:	b	161f4 <__assert_fail@plt+0x4e30>
   15fe8:	ldr	r3, [sp, #24]
   15fec:	cmp	r3, #0
   15ff0:	beq	160bc <__assert_fail@plt+0x4cf8>
   15ff4:	cmp	r6, #0
   15ff8:	bne	15d24 <__assert_fail@plt+0x4960>
   15ffc:	ldr	r3, [sp, #48]	; 0x30
   16000:	eor	r2, r3, #1
   16004:	cmp	sl, #2
   16008:	movne	r2, #0
   1600c:	andeq	r2, r2, #1
   16010:	cmp	r2, #0
   16014:	moveq	r3, r4
   16018:	beq	16050 <__assert_fail@plt+0x4c8c>
   1601c:	cmp	r9, r4
   16020:	movhi	r3, #39	; 0x27
   16024:	strbhi	r3, [r8, r4]
   16028:	add	r3, r4, #1
   1602c:	cmp	r9, r3
   16030:	movhi	r1, #36	; 0x24
   16034:	strbhi	r1, [r8, r3]
   16038:	add	r3, r4, #2
   1603c:	cmp	r9, r3
   16040:	movhi	r1, #39	; 0x27
   16044:	strbhi	r1, [r8, r3]
   16048:	add	r3, r4, #3
   1604c:	str	r2, [sp, #48]	; 0x30
   16050:	cmp	r9, r3
   16054:	movhi	r2, #92	; 0x5c
   16058:	strbhi	r2, [r8, r3]
   1605c:	cmp	fp, #0
   16060:	add	r4, r3, #1
   16064:	beq	165f4 <__assert_fail@plt+0x5230>
   16068:	ldr	r2, [sp, #28]
   1606c:	ldr	r1, [sp, #36]	; 0x24
   16070:	add	r2, r2, #1
   16074:	cmp	r1, r2
   16078:	bls	160b4 <__assert_fail@plt+0x4cf0>
   1607c:	ldr	r1, [sp, #44]	; 0x2c
   16080:	mov	r7, #48	; 0x30
   16084:	ldrb	r2, [r1, r2]
   16088:	sub	r2, r2, #48	; 0x30
   1608c:	cmp	r2, #9
   16090:	movhi	r5, r6
   16094:	bhi	1619c <__assert_fail@plt+0x4dd8>
   16098:	cmp	r9, r4
   1609c:	add	r2, r3, #2
   160a0:	strbhi	r7, [r8, r4]
   160a4:	cmp	r9, r2
   160a8:	add	r4, r3, #3
   160ac:	movhi	r1, #48	; 0x30
   160b0:	strbhi	r1, [r8, r2]
   160b4:	mov	r5, r6
   160b8:	b	165fc <__assert_fail@plt+0x5238>
   160bc:	ldr	r3, [sp, #148]	; 0x94
   160c0:	tst	r3, #1
   160c4:	ldreq	r5, [sp, #24]
   160c8:	beq	16608 <__assert_fail@plt+0x5244>
   160cc:	ldr	r3, [sp, #28]
   160d0:	add	r3, r3, #1
   160d4:	b	15a74 <__assert_fail@plt+0x46b0>
   160d8:	cmp	r6, #0
   160dc:	bne	15d28 <__assert_fail@plt+0x4964>
   160e0:	mov	r5, #0
   160e4:	b	15f5c <__assert_fail@plt+0x4b98>
   160e8:	ldr	r3, [sp, #148]	; 0x94
   160ec:	tst	r3, #4
   160f0:	beq	160e0 <__assert_fail@plt+0x4d1c>
   160f4:	ldr	r3, [sp, #28]
   160f8:	add	r2, r3, #2
   160fc:	ldr	r3, [sp, #36]	; 0x24
   16100:	cmp	r3, r2
   16104:	bls	160e0 <__assert_fail@plt+0x4d1c>
   16108:	ldr	r3, [sp, #44]	; 0x2c
   1610c:	ldr	r1, [sp, #28]
   16110:	add	r3, r3, r1
   16114:	ldrb	r0, [r3, #1]
   16118:	cmp	r0, #63	; 0x3f
   1611c:	bne	160e0 <__assert_fail@plt+0x4d1c>
   16120:	ldr	r3, [sp, #44]	; 0x2c
   16124:	ldrb	r1, [r3, r2]
   16128:	sub	r3, r1, #33	; 0x21
   1612c:	uxtb	r3, r3
   16130:	cmp	r3, #29
   16134:	bhi	16604 <__assert_fail@plt+0x5240>
   16138:	mov	ip, #1
   1613c:	ldr	r5, [pc, #1428]	; 166d8 <__assert_fail@plt+0x5314>
   16140:	ands	r5, r5, ip, lsl r3
   16144:	beq	15f5c <__assert_fail@plt+0x4b98>
   16148:	cmp	r6, #0
   1614c:	bne	15d28 <__assert_fail@plt+0x4964>
   16150:	add	r3, r4, #1
   16154:	cmp	r9, r4
   16158:	strbhi	r0, [r8, r4]
   1615c:	cmp	r9, r3
   16160:	movhi	r0, #34	; 0x22
   16164:	strbhi	r0, [r8, r3]
   16168:	add	r3, r4, #2
   1616c:	cmp	r9, r3
   16170:	movhi	r0, #34	; 0x22
   16174:	strbhi	r0, [r8, r3]
   16178:	add	r3, r4, #3
   1617c:	cmp	r9, r3
   16180:	add	r4, r4, #4
   16184:	mov	r5, r6
   16188:	mov	fp, r6
   1618c:	mov	r7, r1
   16190:	movhi	r0, #63	; 0x3f
   16194:	strbhi	r0, [r8, r3]
   16198:	str	r2, [sp, #28]
   1619c:	ldr	r3, [sp, #24]
   161a0:	eor	r3, r3, #1
   161a4:	cmp	sl, #2
   161a8:	orreq	r3, r3, #1
   161ac:	eor	r3, r3, #1
   161b0:	orr	r3, r6, r3
   161b4:	tst	r3, #255	; 0xff
   161b8:	beq	161e8 <__assert_fail@plt+0x4e24>
   161bc:	ldr	r3, [sp, #152]	; 0x98
   161c0:	cmp	r3, #0
   161c4:	beq	161e8 <__assert_fail@plt+0x4e24>
   161c8:	lsr	r2, r7, #5
   161cc:	ldr	r1, [sp, #152]	; 0x98
   161d0:	uxtb	r2, r2
   161d4:	and	r3, r7, #31
   161d8:	ldr	r2, [r1, r2, lsl #2]
   161dc:	lsr	r3, r2, r3
   161e0:	tst	r3, #1
   161e4:	bne	161f4 <__assert_fail@plt+0x4e30>
   161e8:	ldr	r3, [sp, #64]	; 0x40
   161ec:	cmp	r3, #0
   161f0:	beq	1628c <__assert_fail@plt+0x4ec8>
   161f4:	cmp	r6, #0
   161f8:	bne	15d28 <__assert_fail@plt+0x4964>
   161fc:	ldr	r3, [sp, #48]	; 0x30
   16200:	eor	r3, r3, #1
   16204:	cmp	sl, #2
   16208:	movne	r3, #0
   1620c:	andeq	r3, r3, #1
   16210:	cmp	r3, #0
   16214:	beq	1624c <__assert_fail@plt+0x4e88>
   16218:	cmp	r9, r4
   1621c:	movhi	r2, #39	; 0x27
   16220:	strbhi	r2, [r8, r4]
   16224:	add	r2, r4, #1
   16228:	cmp	r9, r2
   1622c:	movhi	r1, #36	; 0x24
   16230:	strbhi	r1, [r8, r2]
   16234:	add	r2, r4, #2
   16238:	cmp	r9, r2
   1623c:	add	r4, r4, #3
   16240:	movhi	r1, #39	; 0x27
   16244:	strbhi	r1, [r8, r2]
   16248:	str	r3, [sp, #48]	; 0x30
   1624c:	cmp	r9, r4
   16250:	movhi	r3, #92	; 0x5c
   16254:	strbhi	r3, [r8, r4]
   16258:	ldr	fp, [sp, #52]	; 0x34
   1625c:	add	r4, r4, #1
   16260:	b	1628c <__assert_fail@plt+0x4ec8>
   16264:	mov	r3, #116	; 0x74
   16268:	b	15e40 <__assert_fail@plt+0x4a7c>
   1626c:	mov	r3, #118	; 0x76
   16270:	b	15fd0 <__assert_fail@plt+0x4c0c>
   16274:	cmp	sl, #2
   16278:	bne	162e8 <__assert_fail@plt+0x4f24>
   1627c:	cmp	r6, #0
   16280:	bne	15d28 <__assert_fail@plt+0x4964>
   16284:	mov	r5, r6
   16288:	mov	fp, r6
   1628c:	ldr	r3, [sp, #48]	; 0x30
   16290:	eor	fp, fp, #1
   16294:	and	fp, fp, r3
   16298:	tst	fp, #255	; 0xff
   1629c:	beq	162c8 <__assert_fail@plt+0x4f04>
   162a0:	cmp	r9, r4
   162a4:	movhi	r3, #39	; 0x27
   162a8:	strbhi	r3, [r8, r4]
   162ac:	add	r3, r4, #1
   162b0:	cmp	r9, r3
   162b4:	movhi	r2, #39	; 0x27
   162b8:	add	r4, r4, #2
   162bc:	strbhi	r2, [r8, r3]
   162c0:	mov	r3, #0
   162c4:	str	r3, [sp, #48]	; 0x30
   162c8:	cmp	r9, r4
   162cc:	strbhi	r7, [r8, r4]
   162d0:	ldr	r3, [sp, #72]	; 0x48
   162d4:	cmp	r5, #0
   162d8:	moveq	r3, #0
   162dc:	add	r4, r4, #1
   162e0:	str	r3, [sp, #72]	; 0x48
   162e4:	b	160cc <__assert_fail@plt+0x4d08>
   162e8:	ldr	r3, [sp, #24]
   162ec:	and	r3, r3, r6
   162f0:	tst	r5, r3
   162f4:	moveq	r3, r7
   162f8:	beq	15e40 <__assert_fail@plt+0x4a7c>
   162fc:	mov	fp, #0
   16300:	mov	r5, fp
   16304:	b	1628c <__assert_fail@plt+0x4ec8>
   16308:	mov	r3, #110	; 0x6e
   1630c:	b	15e40 <__assert_fail@plt+0x4a7c>
   16310:	mov	r3, #97	; 0x61
   16314:	b	15fd0 <__assert_fail@plt+0x4c0c>
   16318:	mov	r3, #102	; 0x66
   1631c:	b	15fd0 <__assert_fail@plt+0x4c0c>
   16320:	ldr	r3, [sp, #36]	; 0x24
   16324:	cmn	r3, #1
   16328:	bne	16348 <__assert_fail@plt+0x4f84>
   1632c:	ldr	r3, [sp, #44]	; 0x2c
   16330:	ldrb	r3, [r3, #1]
   16334:	adds	r3, r3, #0
   16338:	movne	r3, #1
   1633c:	cmp	r3, #0
   16340:	bne	160e0 <__assert_fail@plt+0x4d1c>
   16344:	b	15fa4 <__assert_fail@plt+0x4be0>
   16348:	ldr	r3, [sp, #36]	; 0x24
   1634c:	subs	r3, r3, #1
   16350:	b	16338 <__assert_fail@plt+0x4f74>
   16354:	mov	r3, #0
   16358:	str	r3, [sp, #96]	; 0x60
   1635c:	str	r3, [sp, #100]	; 0x64
   16360:	ldr	r3, [sp, #36]	; 0x24
   16364:	cmn	r3, #1
   16368:	bne	16378 <__assert_fail@plt+0x4fb4>
   1636c:	ldr	r0, [sp, #44]	; 0x2c
   16370:	bl	11238 <strlen@plt>
   16374:	str	r0, [sp, #36]	; 0x24
   16378:	ldr	r5, [sp, #52]	; 0x34
   1637c:	mov	r3, #0
   16380:	str	r3, [sp, #56]	; 0x38
   16384:	ldr	r3, [sp, #28]
   16388:	ldr	r2, [sp, #56]	; 0x38
   1638c:	ldr	r1, [sp, #36]	; 0x24
   16390:	add	r2, r3, r2
   16394:	ldr	r3, [sp, #44]	; 0x2c
   16398:	add	r0, sp, #92	; 0x5c
   1639c:	add	fp, r3, r2
   163a0:	sub	r2, r1, r2
   163a4:	add	r3, sp, #96	; 0x60
   163a8:	mov	r1, fp
   163ac:	bl	185d4 <__assert_fail@plt+0x7210>
   163b0:	subs	r2, r0, #0
   163b4:	beq	163f4 <__assert_fail@plt+0x5030>
   163b8:	cmn	r2, #1
   163bc:	beq	165cc <__assert_fail@plt+0x5208>
   163c0:	cmn	r2, #2
   163c4:	bne	1653c <__assert_fail@plt+0x5178>
   163c8:	ldr	r2, [sp, #56]	; 0x38
   163cc:	ldr	r3, [sp, #28]
   163d0:	add	r3, r3, r2
   163d4:	ldr	r2, [sp, #36]	; 0x24
   163d8:	cmp	r2, r3
   163dc:	bls	165cc <__assert_fail@plt+0x5208>
   163e0:	ldr	r3, [sp, #80]	; 0x50
   163e4:	ldr	r2, [sp, #56]	; 0x38
   163e8:	ldrb	r5, [r3, r2]
   163ec:	cmp	r5, #0
   163f0:	bne	1652c <__assert_fail@plt+0x5168>
   163f4:	ldr	r3, [sp, #56]	; 0x38
   163f8:	cmp	r3, #1
   163fc:	bls	15e04 <__assert_fail@plt+0x4a40>
   16400:	ldr	r2, [sp, #56]	; 0x38
   16404:	ldr	r3, [sp, #28]
   16408:	mov	fp, #0
   1640c:	add	r3, r3, r2
   16410:	ldr	r2, [sp, #24]
   16414:	str	r3, [sp, #52]	; 0x34
   16418:	eor	r3, r5, #1
   1641c:	and	r3, r3, r2
   16420:	mov	ip, #92	; 0x5c
   16424:	uxtb	r3, r3
   16428:	mov	r2, #39	; 0x27
   1642c:	cmp	r3, #0
   16430:	beq	165d4 <__assert_fail@plt+0x5210>
   16434:	cmp	r6, #0
   16438:	bne	15d24 <__assert_fail@plt+0x4960>
   1643c:	ldr	r1, [sp, #48]	; 0x30
   16440:	eor	r1, r1, #1
   16444:	cmp	sl, #2
   16448:	movne	r1, #0
   1644c:	andeq	r1, r1, #1
   16450:	cmp	r1, #0
   16454:	beq	16484 <__assert_fail@plt+0x50c0>
   16458:	add	r0, r4, #1
   1645c:	cmp	r9, r4
   16460:	strbhi	r2, [r8, r4]
   16464:	cmp	r9, r0
   16468:	movhi	lr, #36	; 0x24
   1646c:	strbhi	lr, [r8, r0]
   16470:	add	r0, r4, #2
   16474:	add	r4, r4, #3
   16478:	cmp	r9, r0
   1647c:	strbhi	r2, [r8, r0]
   16480:	str	r1, [sp, #48]	; 0x30
   16484:	add	r0, r4, #1
   16488:	cmp	r9, r4
   1648c:	strbhi	ip, [r8, r4]
   16490:	cmp	r9, r0
   16494:	lsrhi	r1, r7, #6
   16498:	addhi	r1, r1, #48	; 0x30
   1649c:	strbhi	r1, [r8, r0]
   164a0:	add	r0, r4, #2
   164a4:	cmp	r9, r0
   164a8:	lsrhi	r1, r7, #3
   164ac:	and	r7, r7, #7
   164b0:	andhi	r1, r1, #7
   164b4:	add	r4, r4, #3
   164b8:	add	r7, r7, #48	; 0x30
   164bc:	mov	fp, r3
   164c0:	addhi	r1, r1, #48	; 0x30
   164c4:	strbhi	r1, [r8, r0]
   164c8:	ldr	r1, [sp, #28]
   164cc:	ldr	r0, [sp, #52]	; 0x34
   164d0:	add	r1, r1, #1
   164d4:	cmp	r0, r1
   164d8:	bls	1628c <__assert_fail@plt+0x4ec8>
   164dc:	ldr	lr, [sp, #48]	; 0x30
   164e0:	eor	r0, fp, #1
   164e4:	and	r0, r0, lr
   164e8:	tst	r0, #255	; 0xff
   164ec:	beq	16510 <__assert_fail@plt+0x514c>
   164f0:	add	r0, r4, #1
   164f4:	cmp	r9, r4
   164f8:	strbhi	r2, [r8, r4]
   164fc:	cmp	r9, r0
   16500:	add	r4, r4, #2
   16504:	strbhi	r2, [r8, r0]
   16508:	mov	r0, #0
   1650c:	str	r0, [sp, #48]	; 0x30
   16510:	ldr	r0, [sp, #44]	; 0x2c
   16514:	cmp	r9, r4
   16518:	strbhi	r7, [r8, r4]
   1651c:	str	r1, [sp, #28]
   16520:	add	r4, r4, #1
   16524:	ldrb	r7, [r0, r1]
   16528:	b	1642c <__assert_fail@plt+0x5068>
   1652c:	ldr	r3, [sp, #56]	; 0x38
   16530:	add	r3, r3, #1
   16534:	str	r3, [sp, #56]	; 0x38
   16538:	b	163c8 <__assert_fail@plt+0x5004>
   1653c:	cmp	sl, #2
   16540:	movne	r3, #0
   16544:	andeq	r3, r6, #1
   16548:	cmp	r3, #0
   1654c:	movne	r1, #1
   16550:	bne	165ac <__assert_fail@plt+0x51e8>
   16554:	ldr	r0, [sp, #92]	; 0x5c
   16558:	str	r2, [sp, #84]	; 0x54
   1655c:	bl	11160 <iswprint@plt>
   16560:	ldr	r3, [sp, #56]	; 0x38
   16564:	ldr	r2, [sp, #84]	; 0x54
   16568:	add	r3, r3, r2
   1656c:	str	r3, [sp, #56]	; 0x38
   16570:	cmp	r0, #0
   16574:	add	r0, sp, #96	; 0x60
   16578:	moveq	r5, #0
   1657c:	bl	11100 <mbsinit@plt>
   16580:	cmp	r0, #0
   16584:	beq	16384 <__assert_fail@plt+0x4fc0>
   16588:	b	163f4 <__assert_fail@plt+0x5030>
   1658c:	ldrb	r3, [fp, r1]
   16590:	cmp	r3, #94	; 0x5e
   16594:	beq	15e54 <__assert_fail@plt+0x4a90>
   16598:	bhi	165b8 <__assert_fail@plt+0x51f4>
   1659c:	sub	r3, r3, #91	; 0x5b
   165a0:	cmp	r3, #1
   165a4:	bls	15e54 <__assert_fail@plt+0x4a90>
   165a8:	add	r1, r1, #1
   165ac:	cmp	r1, r2
   165b0:	bne	1658c <__assert_fail@plt+0x51c8>
   165b4:	b	16554 <__assert_fail@plt+0x5190>
   165b8:	cmp	r3, #96	; 0x60
   165bc:	beq	15e54 <__assert_fail@plt+0x4a90>
   165c0:	cmp	r3, #124	; 0x7c
   165c4:	bne	165a8 <__assert_fail@plt+0x51e4>
   165c8:	b	15e54 <__assert_fail@plt+0x4a90>
   165cc:	mov	r5, #0
   165d0:	b	163f4 <__assert_fail@plt+0x5030>
   165d4:	ldr	r1, [sp, #64]	; 0x40
   165d8:	cmp	r1, #0
   165dc:	beq	164c8 <__assert_fail@plt+0x5104>
   165e0:	cmp	r9, r4
   165e4:	strbhi	ip, [r8, r4]
   165e8:	str	r3, [sp, #64]	; 0x40
   165ec:	add	r4, r4, #1
   165f0:	b	164c8 <__assert_fail@plt+0x5104>
   165f4:	mov	r5, fp
   165f8:	ldr	fp, [sp, #24]
   165fc:	mov	r7, #48	; 0x30
   16600:	b	1619c <__assert_fail@plt+0x4dd8>
   16604:	mov	r5, #0
   16608:	mov	fp, r5
   1660c:	b	1619c <__assert_fail@plt+0x4dd8>
   16610:	ldr	r3, [sp, #36]	; 0x24
   16614:	ldr	r2, [sp, #28]
   16618:	subs	r3, r3, r2
   1661c:	movne	r3, #1
   16620:	b	15a98 <__assert_fail@plt+0x46d4>
   16624:	ldr	r3, [sp, #60]	; 0x3c
   16628:	clz	r7, r9
   1662c:	cmp	r3, #0
   16630:	lsr	r7, r7, #5
   16634:	moveq	r7, #0
   16638:	cmp	r7, #0
   1663c:	mov	r5, r3
   16640:	bne	159f8 <__assert_fail@plt+0x4634>
   16644:	ldr	r3, [sp, #68]	; 0x44
   16648:	ldr	r2, [sp, #40]	; 0x28
   1664c:	cmp	r2, #0
   16650:	moveq	r3, #0
   16654:	andne	r3, r3, #1
   16658:	cmp	r3, #0
   1665c:	movne	r3, r2
   16660:	subne	r2, r3, #1
   16664:	bne	16694 <__assert_fail@plt+0x52d0>
   16668:	cmp	r9, r4
   1666c:	movhi	r3, #0
   16670:	strbhi	r3, [r8, r4]
   16674:	mov	r0, r4
   16678:	add	sp, sp, #108	; 0x6c
   1667c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16680:	mov	r3, r2
   16684:	b	16648 <__assert_fail@plt+0x5284>
   16688:	cmp	r9, r4
   1668c:	strbhi	r3, [r8, r4]
   16690:	add	r4, r4, #1
   16694:	ldrb	r3, [r2, #1]!
   16698:	cmp	r3, #0
   1669c:	bne	16688 <__assert_fail@plt+0x52c4>
   166a0:	b	16668 <__assert_fail@plt+0x52a4>
   166a4:	ldr	r3, [pc, #32]	; 166cc <__assert_fail@plt+0x5308>
   166a8:	mov	r6, #1
   166ac:	str	r6, [sp, #24]
   166b0:	str	r6, [sp, #32]
   166b4:	str	r3, [sp, #40]	; 0x28
   166b8:	mov	r4, #0
   166bc:	mov	sl, #5
   166c0:	b	15a68 <__assert_fail@plt+0x46a4>
   166c4:	mov	r6, #1
   166c8:	b	15c5c <__assert_fail@plt+0x4898>
   166cc:	andeq	sl, r1, r3
   166d0:	andeq	sl, r1, r7
   166d4:	andeq	sl, r1, r5
   166d8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   166dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166e0:	sub	sp, sp, #52	; 0x34
   166e4:	mov	r6, r0
   166e8:	mov	r5, r3
   166ec:	mov	r8, r1
   166f0:	mov	r9, r2
   166f4:	bl	11268 <__errno_location@plt>
   166f8:	ldr	r7, [pc, #380]	; 1687c <__assert_fail@plt+0x54b8>
   166fc:	cmn	r6, #-2147483647	; 0x80000001
   16700:	ldr	r4, [r7]
   16704:	ldr	r3, [r0]
   16708:	str	r0, [sp, #24]
   1670c:	str	r3, [sp, #32]
   16710:	movne	r3, #0
   16714:	moveq	r3, #1
   16718:	orrs	r3, r3, r6, lsr #31
   1671c:	beq	16724 <__assert_fail@plt+0x5360>
   16720:	bl	1137c <abort@plt>
   16724:	ldr	r2, [r7, #4]
   16728:	cmp	r6, r2
   1672c:	blt	1679c <__assert_fail@plt+0x53d8>
   16730:	add	r1, sp, #48	; 0x30
   16734:	add	sl, r7, #8
   16738:	str	r2, [r1, #-4]!
   1673c:	cmp	r4, sl
   16740:	mov	r3, #8
   16744:	sub	r2, r6, r2
   16748:	movne	r0, r4
   1674c:	str	r3, [sp]
   16750:	add	r2, r2, #1
   16754:	mvn	r3, #-2147483648	; 0x80000000
   16758:	moveq	r0, #0
   1675c:	bl	17858 <__assert_fail@plt+0x6494>
   16760:	cmp	r4, sl
   16764:	ldr	r2, [sp, #44]	; 0x2c
   16768:	mov	fp, r0
   1676c:	str	r0, [r7]
   16770:	ldmeq	r4, {r0, r1}
   16774:	mov	r4, fp
   16778:	stmeq	fp, {r0, r1}
   1677c:	ldr	r0, [r7, #4]
   16780:	mov	r1, #0
   16784:	sub	r2, r2, r0
   16788:	add	r0, fp, r0, lsl #3
   1678c:	lsl	r2, r2, #3
   16790:	bl	11280 <memset@plt>
   16794:	ldr	r3, [sp, #44]	; 0x2c
   16798:	str	r3, [r7, #4]
   1679c:	ldr	r3, [r5, #4]
   167a0:	add	sl, r4, r6, lsl #3
   167a4:	orr	r3, r3, #1
   167a8:	str	r3, [sp, #28]
   167ac:	add	r3, r5, #8
   167b0:	str	r3, [sp, #36]	; 0x24
   167b4:	ldr	r3, [r5, #44]	; 0x2c
   167b8:	ldr	fp, [r4, r6, lsl #3]
   167bc:	ldr	r7, [sl, #4]
   167c0:	str	r3, [sp, #16]
   167c4:	ldr	r3, [r5, #40]	; 0x28
   167c8:	mov	r2, r8
   167cc:	str	r3, [sp, #12]
   167d0:	add	r3, r5, #8
   167d4:	str	r3, [sp, #8]
   167d8:	ldr	r3, [sp, #28]
   167dc:	mov	r1, fp
   167e0:	str	r3, [sp, #4]
   167e4:	ldr	r3, [r5]
   167e8:	mov	r0, r7
   167ec:	str	r3, [sp]
   167f0:	mov	r3, r9
   167f4:	bl	159a8 <__assert_fail@plt+0x45e4>
   167f8:	cmp	fp, r0
   167fc:	bhi	16864 <__assert_fail@plt+0x54a0>
   16800:	ldr	r3, [pc, #120]	; 16880 <__assert_fail@plt+0x54bc>
   16804:	add	fp, r0, #1
   16808:	cmp	r7, r3
   1680c:	str	fp, [r4, r6, lsl #3]
   16810:	beq	1681c <__assert_fail@plt+0x5458>
   16814:	mov	r0, r7
   16818:	bl	12ad0 <__assert_fail@plt+0x170c>
   1681c:	mov	r0, fp
   16820:	bl	17710 <__assert_fail@plt+0x634c>
   16824:	ldr	r3, [r5, #44]	; 0x2c
   16828:	mov	r2, r8
   1682c:	mov	r1, fp
   16830:	str	r0, [sl, #4]
   16834:	str	r3, [sp, #16]
   16838:	ldr	r3, [r5, #40]	; 0x28
   1683c:	mov	r7, r0
   16840:	str	r3, [sp, #12]
   16844:	add	r3, r5, #8
   16848:	str	r3, [sp, #8]
   1684c:	ldr	r3, [sp, #28]
   16850:	str	r3, [sp, #4]
   16854:	ldr	r3, [r5]
   16858:	str	r3, [sp]
   1685c:	mov	r3, r9
   16860:	bl	159a8 <__assert_fail@plt+0x45e4>
   16864:	ldr	r3, [sp, #24]
   16868:	ldr	r2, [sp, #32]
   1686c:	mov	r0, r7
   16870:	str	r2, [r3]
   16874:	add	sp, sp, #52	; 0x34
   16878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1687c:	andeq	fp, r2, r8, asr #2
   16880:	andeq	fp, r2, ip, asr #3
   16884:	push	{r4, r5, r6, lr}
   16888:	mov	r5, r0
   1688c:	bl	11268 <__errno_location@plt>
   16890:	cmp	r5, #0
   16894:	mov	r1, #48	; 0x30
   16898:	ldr	r6, [r0]
   1689c:	mov	r4, r0
   168a0:	ldr	r0, [pc, #12]	; 168b4 <__assert_fail@plt+0x54f0>
   168a4:	movne	r0, r5
   168a8:	bl	17aec <__assert_fail@plt+0x6728>
   168ac:	str	r6, [r4]
   168b0:	pop	{r4, r5, r6, pc}
   168b4:	andeq	fp, r2, ip, asr #5
   168b8:	ldr	r3, [pc, #12]	; 168cc <__assert_fail@plt+0x5508>
   168bc:	cmp	r0, #0
   168c0:	moveq	r0, r3
   168c4:	ldr	r0, [r0]
   168c8:	bx	lr
   168cc:	andeq	fp, r2, ip, asr #5
   168d0:	ldr	r3, [pc, #12]	; 168e4 <__assert_fail@plt+0x5520>
   168d4:	cmp	r0, #0
   168d8:	moveq	r0, r3
   168dc:	str	r1, [r0]
   168e0:	bx	lr
   168e4:	andeq	fp, r2, ip, asr #5
   168e8:	ldr	r3, [pc, #52]	; 16924 <__assert_fail@plt+0x5560>
   168ec:	cmp	r0, #0
   168f0:	moveq	r0, r3
   168f4:	add	r3, r0, #8
   168f8:	push	{lr}		; (str lr, [sp, #-4]!)
   168fc:	lsr	lr, r1, #5
   16900:	and	r1, r1, #31
   16904:	ldr	ip, [r3, lr, lsl #2]
   16908:	lsr	r0, ip, r1
   1690c:	eor	r2, r2, r0
   16910:	and	r2, r2, #1
   16914:	and	r0, r0, #1
   16918:	eor	r1, ip, r2, lsl r1
   1691c:	str	r1, [r3, lr, lsl #2]
   16920:	pop	{pc}		; (ldr pc, [sp], #4)
   16924:	andeq	fp, r2, ip, asr #5
   16928:	ldr	r3, [pc, #16]	; 16940 <__assert_fail@plt+0x557c>
   1692c:	cmp	r0, #0
   16930:	movne	r3, r0
   16934:	ldr	r0, [r3, #4]
   16938:	str	r1, [r3, #4]
   1693c:	bx	lr
   16940:	andeq	fp, r2, ip, asr #5
   16944:	ldr	r3, [pc, #44]	; 16978 <__assert_fail@plt+0x55b4>
   16948:	cmp	r0, #0
   1694c:	moveq	r0, r3
   16950:	mov	r3, #10
   16954:	cmp	r2, #0
   16958:	cmpne	r1, #0
   1695c:	str	r3, [r0]
   16960:	bne	1696c <__assert_fail@plt+0x55a8>
   16964:	push	{r4, lr}
   16968:	bl	1137c <abort@plt>
   1696c:	str	r1, [r0, #40]	; 0x28
   16970:	str	r2, [r0, #44]	; 0x2c
   16974:	bx	lr
   16978:	andeq	fp, r2, ip, asr #5
   1697c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16980:	sub	sp, sp, #24
   16984:	mov	sl, r3
   16988:	ldr	r4, [sp, #56]	; 0x38
   1698c:	ldr	r3, [pc, #100]	; 169f8 <__assert_fail@plt+0x5634>
   16990:	cmp	r4, #0
   16994:	moveq	r4, r3
   16998:	mov	r7, r0
   1699c:	mov	r8, r1
   169a0:	mov	r9, r2
   169a4:	bl	11268 <__errno_location@plt>
   169a8:	ldr	r3, [r4, #44]	; 0x2c
   169ac:	mov	r2, r9
   169b0:	mov	r1, r8
   169b4:	ldr	r6, [r0]
   169b8:	str	r3, [sp, #16]
   169bc:	ldr	r3, [r4, #40]	; 0x28
   169c0:	mov	r5, r0
   169c4:	str	r3, [sp, #12]
   169c8:	add	r3, r4, #8
   169cc:	str	r3, [sp, #8]
   169d0:	ldr	r3, [r4, #4]
   169d4:	mov	r0, r7
   169d8:	str	r3, [sp, #4]
   169dc:	ldr	r3, [r4]
   169e0:	str	r3, [sp]
   169e4:	mov	r3, sl
   169e8:	bl	159a8 <__assert_fail@plt+0x45e4>
   169ec:	str	r6, [r5]
   169f0:	add	sp, sp, #24
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169f8:	andeq	fp, r2, ip, asr #5
   169fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a00:	cmp	r3, #0
   16a04:	sub	sp, sp, #44	; 0x2c
   16a08:	ldr	r4, [pc, #188]	; 16acc <__assert_fail@plt+0x5708>
   16a0c:	mov	r6, r2
   16a10:	movne	r4, r3
   16a14:	mov	sl, r1
   16a18:	mov	r9, r0
   16a1c:	bl	11268 <__errno_location@plt>
   16a20:	ldr	r5, [r4, #4]
   16a24:	add	fp, r4, #8
   16a28:	cmp	r6, #0
   16a2c:	orreq	r5, r5, #1
   16a30:	mov	r1, #0
   16a34:	mov	r2, r9
   16a38:	ldr	r3, [r0]
   16a3c:	mov	r8, r0
   16a40:	str	r3, [sp, #28]
   16a44:	ldr	r3, [r4, #44]	; 0x2c
   16a48:	mov	r0, r1
   16a4c:	str	r3, [sp, #16]
   16a50:	ldr	r3, [r4, #40]	; 0x28
   16a54:	stmib	sp, {r5, fp}
   16a58:	str	r3, [sp, #12]
   16a5c:	ldr	r3, [r4]
   16a60:	str	r3, [sp]
   16a64:	mov	r3, sl
   16a68:	bl	159a8 <__assert_fail@plt+0x45e4>
   16a6c:	add	r1, r0, #1
   16a70:	mov	r7, r0
   16a74:	mov	r0, r1
   16a78:	str	r1, [sp, #36]	; 0x24
   16a7c:	bl	17710 <__assert_fail@plt+0x634c>
   16a80:	ldr	r3, [r4, #44]	; 0x2c
   16a84:	mov	r2, r9
   16a88:	str	r3, [sp, #16]
   16a8c:	ldr	r3, [r4, #40]	; 0x28
   16a90:	stmib	sp, {r5, fp}
   16a94:	str	r3, [sp, #12]
   16a98:	ldr	r3, [r4]
   16a9c:	ldr	r1, [sp, #36]	; 0x24
   16aa0:	str	r3, [sp]
   16aa4:	mov	r3, sl
   16aa8:	str	r0, [sp, #32]
   16aac:	bl	159a8 <__assert_fail@plt+0x45e4>
   16ab0:	ldr	r3, [sp, #28]
   16ab4:	cmp	r6, #0
   16ab8:	str	r3, [r8]
   16abc:	ldr	r0, [sp, #32]
   16ac0:	strne	r7, [r6]
   16ac4:	add	sp, sp, #44	; 0x2c
   16ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16acc:	andeq	fp, r2, ip, asr #5
   16ad0:	mov	r3, r2
   16ad4:	mov	r2, #0
   16ad8:	b	169fc <__assert_fail@plt+0x5638>
   16adc:	push	{r4, r5, r6, r7, r8, lr}
   16ae0:	mov	r6, #1
   16ae4:	ldr	r4, [pc, #104]	; 16b54 <__assert_fail@plt+0x5790>
   16ae8:	ldr	r5, [r4]
   16aec:	add	r7, r5, #12
   16af0:	ldr	r3, [r4, #4]
   16af4:	add	r7, r7, #8
   16af8:	cmp	r6, r3
   16afc:	blt	16b44 <__assert_fail@plt+0x5780>
   16b00:	ldr	r0, [r5, #4]
   16b04:	ldr	r6, [pc, #76]	; 16b58 <__assert_fail@plt+0x5794>
   16b08:	cmp	r0, r6
   16b0c:	beq	16b20 <__assert_fail@plt+0x575c>
   16b10:	bl	12ad0 <__assert_fail@plt+0x170c>
   16b14:	mov	r3, #256	; 0x100
   16b18:	str	r3, [r4, #8]
   16b1c:	str	r6, [r4, #12]
   16b20:	ldr	r6, [pc, #52]	; 16b5c <__assert_fail@plt+0x5798>
   16b24:	cmp	r5, r6
   16b28:	beq	16b38 <__assert_fail@plt+0x5774>
   16b2c:	mov	r0, r5
   16b30:	bl	12ad0 <__assert_fail@plt+0x170c>
   16b34:	str	r6, [r4]
   16b38:	mov	r3, #1
   16b3c:	str	r3, [r4, #4]
   16b40:	pop	{r4, r5, r6, r7, r8, pc}
   16b44:	ldr	r0, [r7, #-8]
   16b48:	bl	12ad0 <__assert_fail@plt+0x170c>
   16b4c:	add	r6, r6, #1
   16b50:	b	16af0 <__assert_fail@plt+0x572c>
   16b54:	andeq	fp, r2, r8, asr #2
   16b58:	andeq	fp, r2, ip, asr #3
   16b5c:	andeq	fp, r2, r0, asr r1
   16b60:	ldr	r3, [pc, #4]	; 16b6c <__assert_fail@plt+0x57a8>
   16b64:	mvn	r2, #0
   16b68:	b	166dc <__assert_fail@plt+0x5318>
   16b6c:	andeq	fp, r2, ip, asr #5
   16b70:	ldr	r3, [pc]	; 16b78 <__assert_fail@plt+0x57b4>
   16b74:	b	166dc <__assert_fail@plt+0x5318>
   16b78:	andeq	fp, r2, ip, asr #5
   16b7c:	mov	r1, r0
   16b80:	mov	r0, #0
   16b84:	b	16b60 <__assert_fail@plt+0x579c>
   16b88:	mov	r2, r1
   16b8c:	mov	r1, r0
   16b90:	mov	r0, #0
   16b94:	b	16b70 <__assert_fail@plt+0x57ac>
   16b98:	push	{r4, r5, lr}
   16b9c:	sub	sp, sp, #52	; 0x34
   16ba0:	mov	r5, r2
   16ba4:	mov	r4, r0
   16ba8:	mov	r0, sp
   16bac:	bl	15864 <__assert_fail@plt+0x44a0>
   16bb0:	mov	r3, sp
   16bb4:	mvn	r2, #0
   16bb8:	mov	r1, r5
   16bbc:	mov	r0, r4
   16bc0:	bl	166dc <__assert_fail@plt+0x5318>
   16bc4:	add	sp, sp, #52	; 0x34
   16bc8:	pop	{r4, r5, pc}
   16bcc:	push	{r4, r5, r6, lr}
   16bd0:	sub	sp, sp, #48	; 0x30
   16bd4:	mov	r5, r2
   16bd8:	mov	r6, r3
   16bdc:	mov	r4, r0
   16be0:	mov	r0, sp
   16be4:	bl	15864 <__assert_fail@plt+0x44a0>
   16be8:	mov	r3, sp
   16bec:	mov	r2, r6
   16bf0:	mov	r1, r5
   16bf4:	mov	r0, r4
   16bf8:	bl	166dc <__assert_fail@plt+0x5318>
   16bfc:	add	sp, sp, #48	; 0x30
   16c00:	pop	{r4, r5, r6, pc}
   16c04:	mov	r2, r1
   16c08:	mov	r1, r0
   16c0c:	mov	r0, #0
   16c10:	b	16b98 <__assert_fail@plt+0x57d4>
   16c14:	mov	r3, r2
   16c18:	mov	r2, r1
   16c1c:	mov	r1, r0
   16c20:	mov	r0, #0
   16c24:	b	16bcc <__assert_fail@plt+0x5808>
   16c28:	push	{r4, r5, r6, lr}
   16c2c:	mov	r4, r0
   16c30:	ldr	lr, [pc, #80]	; 16c88 <__assert_fail@plt+0x58c4>
   16c34:	mov	r5, r1
   16c38:	mov	r6, r2
   16c3c:	ldm	lr!, {r0, r1, r2, r3}
   16c40:	sub	sp, sp, #48	; 0x30
   16c44:	mov	ip, sp
   16c48:	stmia	ip!, {r0, r1, r2, r3}
   16c4c:	ldm	lr!, {r0, r1, r2, r3}
   16c50:	stmia	ip!, {r0, r1, r2, r3}
   16c54:	ldm	lr, {r0, r1, r2, r3}
   16c58:	stm	ip, {r0, r1, r2, r3}
   16c5c:	mov	r1, r6
   16c60:	mov	r2, #1
   16c64:	mov	r0, sp
   16c68:	bl	168e8 <__assert_fail@plt+0x5524>
   16c6c:	mov	r3, sp
   16c70:	mov	r2, r5
   16c74:	mov	r1, r4
   16c78:	mov	r0, #0
   16c7c:	bl	166dc <__assert_fail@plt+0x5318>
   16c80:	add	sp, sp, #48	; 0x30
   16c84:	pop	{r4, r5, r6, pc}
   16c88:	andeq	fp, r2, ip, asr #5
   16c8c:	mov	r2, r1
   16c90:	mvn	r1, #0
   16c94:	b	16c28 <__assert_fail@plt+0x5864>
   16c98:	mov	r1, #58	; 0x3a
   16c9c:	b	16c8c <__assert_fail@plt+0x58c8>
   16ca0:	mov	r2, #58	; 0x3a
   16ca4:	b	16c28 <__assert_fail@plt+0x5864>
   16ca8:	push	{r4, r5, lr}
   16cac:	sub	sp, sp, #100	; 0x64
   16cb0:	mov	r4, r0
   16cb4:	mov	r0, sp
   16cb8:	mov	r5, r2
   16cbc:	bl	15864 <__assert_fail@plt+0x44a0>
   16cc0:	mov	ip, sp
   16cc4:	add	lr, sp, #48	; 0x30
   16cc8:	ldm	ip!, {r0, r1, r2, r3}
   16ccc:	stmia	lr!, {r0, r1, r2, r3}
   16cd0:	ldm	ip!, {r0, r1, r2, r3}
   16cd4:	stmia	lr!, {r0, r1, r2, r3}
   16cd8:	ldm	ip, {r0, r1, r2, r3}
   16cdc:	stm	lr, {r0, r1, r2, r3}
   16ce0:	mov	r2, #1
   16ce4:	mov	r1, #58	; 0x3a
   16ce8:	add	r0, sp, #48	; 0x30
   16cec:	bl	168e8 <__assert_fail@plt+0x5524>
   16cf0:	add	r3, sp, #48	; 0x30
   16cf4:	mvn	r2, #0
   16cf8:	mov	r1, r5
   16cfc:	mov	r0, r4
   16d00:	bl	166dc <__assert_fail@plt+0x5318>
   16d04:	add	sp, sp, #100	; 0x64
   16d08:	pop	{r4, r5, pc}
   16d0c:	push	{r4, r5, r6, r7, lr}
   16d10:	mov	r4, r0
   16d14:	ldr	lr, [pc, #84]	; 16d70 <__assert_fail@plt+0x59ac>
   16d18:	mov	r6, r1
   16d1c:	mov	r7, r2
   16d20:	mov	r5, r3
   16d24:	ldm	lr!, {r0, r1, r2, r3}
   16d28:	sub	sp, sp, #52	; 0x34
   16d2c:	mov	ip, sp
   16d30:	stmia	ip!, {r0, r1, r2, r3}
   16d34:	ldm	lr!, {r0, r1, r2, r3}
   16d38:	stmia	ip!, {r0, r1, r2, r3}
   16d3c:	ldm	lr, {r0, r1, r2, r3}
   16d40:	stm	ip, {r0, r1, r2, r3}
   16d44:	mov	r2, r7
   16d48:	mov	r1, r6
   16d4c:	mov	r0, sp
   16d50:	bl	16944 <__assert_fail@plt+0x5580>
   16d54:	mov	r3, sp
   16d58:	ldr	r2, [sp, #72]	; 0x48
   16d5c:	mov	r1, r5
   16d60:	mov	r0, r4
   16d64:	bl	166dc <__assert_fail@plt+0x5318>
   16d68:	add	sp, sp, #52	; 0x34
   16d6c:	pop	{r4, r5, r6, r7, pc}
   16d70:	andeq	fp, r2, ip, asr #5
   16d74:	mvn	ip, #0
   16d78:	push	{r0, r1, r2, lr}
   16d7c:	str	ip, [sp]
   16d80:	bl	16d0c <__assert_fail@plt+0x5948>
   16d84:	add	sp, sp, #12
   16d88:	pop	{pc}		; (ldr pc, [sp], #4)
   16d8c:	mov	r3, r2
   16d90:	mov	r2, r1
   16d94:	mov	r1, r0
   16d98:	mov	r0, #0
   16d9c:	b	16d74 <__assert_fail@plt+0x59b0>
   16da0:	push	{r0, r1, r2, lr}
   16da4:	str	r3, [sp]
   16da8:	mov	r3, r2
   16dac:	mov	r2, r1
   16db0:	mov	r1, r0
   16db4:	mov	r0, #0
   16db8:	bl	16d0c <__assert_fail@plt+0x5948>
   16dbc:	add	sp, sp, #12
   16dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc4:	ldr	r3, [pc]	; 16dcc <__assert_fail@plt+0x5a08>
   16dc8:	b	166dc <__assert_fail@plt+0x5318>
   16dcc:	andeq	fp, r2, r8, asr r1
   16dd0:	mov	r2, r1
   16dd4:	mov	r1, r0
   16dd8:	mov	r0, #0
   16ddc:	b	16dc4 <__assert_fail@plt+0x5a00>
   16de0:	mvn	r2, #0
   16de4:	b	16dc4 <__assert_fail@plt+0x5a00>
   16de8:	mov	r1, r0
   16dec:	mov	r0, #0
   16df0:	b	16de0 <__assert_fail@plt+0x5a1c>
   16df4:	push	{r4, lr}
   16df8:	sub	sp, sp, #104	; 0x68
   16dfc:	mov	r4, r0
   16e00:	mov	r1, sp
   16e04:	ldr	r0, [pc, #36]	; 16e30 <__assert_fail@plt+0x5a6c>
   16e08:	bl	18db8 <__assert_fail@plt+0x79f4>
   16e0c:	cmp	r0, #0
   16e10:	movne	r4, #0
   16e14:	ldrdeq	r2, [sp, #96]	; 0x60
   16e18:	strdeq	r2, [r4]
   16e1c:	ldrdeq	r2, [sp]
   16e20:	strdeq	r2, [r4, #8]
   16e24:	mov	r0, r4
   16e28:	add	sp, sp, #104	; 0x68
   16e2c:	pop	{r4, pc}
   16e30:	andeq	sl, r1, ip, asr r3
   16e34:	cmp	r0, #2
   16e38:	push	{r4, r5, r6, r7, r8, lr}
   16e3c:	mov	r4, r0
   16e40:	bhi	16e68 <__assert_fail@plt+0x5aa4>
   16e44:	bl	18670 <__assert_fail@plt+0x72ac>
   16e48:	mov	r6, r0
   16e4c:	bl	11268 <__errno_location@plt>
   16e50:	ldr	r7, [r0]
   16e54:	mov	r5, r0
   16e58:	mov	r0, r4
   16e5c:	mov	r4, r6
   16e60:	bl	11388 <close@plt>
   16e64:	str	r7, [r5]
   16e68:	mov	r0, r4
   16e6c:	pop	{r4, r5, r6, r7, r8, pc}
   16e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e74:	sub	sp, sp, #44	; 0x2c
   16e78:	subs	sl, r3, #0
   16e7c:	ldr	r3, [sp, #80]	; 0x50
   16e80:	ldrne	r7, [sl]
   16e84:	mvneq	r7, #0
   16e88:	cmp	r3, #0
   16e8c:	ldr	r8, [r2]
   16e90:	str	r2, [sp, #12]
   16e94:	ldrne	r2, [sp, #80]	; 0x50
   16e98:	movne	r3, #0
   16e9c:	mov	r4, r1
   16ea0:	strne	r3, [r2]
   16ea4:	ldr	r3, [sp, #84]	; 0x54
   16ea8:	cmp	r3, #0
   16eac:	movne	r3, #0
   16eb0:	ldrne	r2, [sp, #84]	; 0x54
   16eb4:	strne	r3, [r2]
   16eb8:	cmp	r1, #0
   16ebc:	bne	16f5c <__assert_fail@plt+0x5b98>
   16ec0:	ldrb	r3, [r0]
   16ec4:	cmp	r3, #0
   16ec8:	moveq	r6, r1
   16ecc:	moveq	r9, r1
   16ed0:	moveq	r5, r1
   16ed4:	beq	16fb0 <__assert_fail@plt+0x5bec>
   16ed8:	bl	17b60 <__assert_fail@plt+0x679c>
   16edc:	mov	r6, r4
   16ee0:	mov	r5, r0
   16ee4:	ldrb	r3, [r5]
   16ee8:	cmp	r3, #43	; 0x2b
   16eec:	bne	17014 <__assert_fail@plt+0x5c50>
   16ef0:	adds	r1, r4, #0
   16ef4:	movne	r1, #1
   16ef8:	cmp	r6, #0
   16efc:	movne	r1, #0
   16f00:	cmp	r1, #0
   16f04:	movne	fp, #0
   16f08:	ldrne	r4, [pc, #532]	; 17124 <__assert_fail@plt+0x5d60>
   16f0c:	bne	16f4c <__assert_fail@plt+0x5b88>
   16f10:	ldr	r3, [pc, #528]	; 17128 <__assert_fail@plt+0x5d64>
   16f14:	mov	r2, #10
   16f18:	str	r3, [sp]
   16f1c:	mov	r0, r5
   16f20:	add	r3, sp, #16
   16f24:	bl	17cd8 <__assert_fail@plt+0x6914>
   16f28:	cmp	r0, #0
   16f2c:	ldrne	r4, [pc, #504]	; 1712c <__assert_fail@plt+0x5d68>
   16f30:	bne	16f48 <__assert_fail@plt+0x5b84>
   16f34:	ldr	r3, [sp, #16]
   16f38:	ldr	r4, [pc, #492]	; 1712c <__assert_fail@plt+0x5d68>
   16f3c:	cmn	r3, #1
   16f40:	movne	r8, r3
   16f44:	movne	r4, #0
   16f48:	mov	fp, #0
   16f4c:	mov	r9, r5
   16f50:	bl	112e0 <endpwent@plt>
   16f54:	mov	r5, fp
   16f58:	b	16fb0 <__assert_fail@plt+0x5bec>
   16f5c:	subs	r6, r1, r0
   16f60:	moveq	r5, r6
   16f64:	beq	16f7c <__assert_fail@plt+0x5bb8>
   16f68:	add	r1, r6, #1
   16f6c:	bl	17b10 <__assert_fail@plt+0x674c>
   16f70:	mov	r3, #0
   16f74:	mov	r5, r0
   16f78:	strb	r3, [r0, r6]
   16f7c:	ldrb	r6, [r4, #1]
   16f80:	cmp	r6, #0
   16f84:	bne	16f9c <__assert_fail@plt+0x5bd8>
   16f88:	cmp	r5, #0
   16f8c:	moveq	r6, r5
   16f90:	moveq	r4, r5
   16f94:	bne	16ee4 <__assert_fail@plt+0x5b20>
   16f98:	b	170bc <__assert_fail@plt+0x5cf8>
   16f9c:	cmp	r5, #0
   16fa0:	add	r6, r4, #1
   16fa4:	moveq	r9, r5
   16fa8:	moveq	r4, r5
   16fac:	bne	16ee4 <__assert_fail@plt+0x5b20>
   16fb0:	adds	r3, r6, #0
   16fb4:	movne	r3, #1
   16fb8:	cmp	r4, #0
   16fbc:	movne	r3, #0
   16fc0:	cmp	r3, #0
   16fc4:	beq	170ac <__assert_fail@plt+0x5ce8>
   16fc8:	ldrb	r3, [r6]
   16fcc:	cmp	r3, #43	; 0x2b
   16fd0:	bne	17084 <__assert_fail@plt+0x5cc0>
   16fd4:	ldr	r3, [pc, #332]	; 17128 <__assert_fail@plt+0x5d64>
   16fd8:	mov	r2, #10
   16fdc:	str	r3, [sp]
   16fe0:	mov	r1, #0
   16fe4:	add	r3, sp, #16
   16fe8:	mov	r0, r6
   16fec:	bl	17cd8 <__assert_fail@plt+0x6914>
   16ff0:	cmp	r0, #0
   16ff4:	ldrne	r4, [pc, #308]	; 17130 <__assert_fail@plt+0x5d6c>
   16ff8:	bne	1709c <__assert_fail@plt+0x5cd8>
   16ffc:	ldr	r3, [sp, #16]
   17000:	ldr	r4, [pc, #296]	; 17130 <__assert_fail@plt+0x5d6c>
   17004:	cmn	r3, #1
   17008:	movne	r7, r3
   1700c:	movne	r4, #0
   17010:	b	1709c <__assert_fail@plt+0x5cd8>
   17014:	mov	r0, r5
   17018:	bl	11094 <getpwnam@plt>
   1701c:	cmp	r0, #0
   17020:	beq	16ef0 <__assert_fail@plt+0x5b2c>
   17024:	cmp	r4, #0
   17028:	clz	r3, r6
   1702c:	lsr	r3, r3, #5
   17030:	moveq	r3, #0
   17034:	cmp	r3, #0
   17038:	moveq	r4, r3
   1703c:	ldr	r8, [r0, #8]
   17040:	moveq	fp, r4
   17044:	beq	16f4c <__assert_fail@plt+0x5b88>
   17048:	ldr	r7, [r0, #12]
   1704c:	mov	r0, r7
   17050:	bl	113ac <getgrgid@plt>
   17054:	cmp	r0, #0
   17058:	ldrne	r0, [r0]
   1705c:	bne	17070 <__assert_fail@plt+0x5cac>
   17060:	add	r2, sp, #16
   17064:	mov	r0, r7
   17068:	mov	r1, #0
   1706c:	bl	156cc <__assert_fail@plt+0x4308>
   17070:	bl	17b60 <__assert_fail@plt+0x679c>
   17074:	mov	r4, #0
   17078:	mov	fp, r0
   1707c:	bl	11070 <endgrent@plt>
   17080:	b	16f4c <__assert_fail@plt+0x5b88>
   17084:	mov	r0, r6
   17088:	bl	113b8 <getgrnam@plt>
   1708c:	cmp	r0, #0
   17090:	movne	r4, #0
   17094:	ldrne	r7, [r0, #8]
   17098:	beq	16fd4 <__assert_fail@plt+0x5c10>
   1709c:	bl	11070 <endgrent@plt>
   170a0:	mov	r0, r6
   170a4:	bl	17b60 <__assert_fail@plt+0x679c>
   170a8:	mov	r5, r0
   170ac:	cmp	r4, #0
   170b0:	mov	r6, r5
   170b4:	mov	r5, r9
   170b8:	bne	170ec <__assert_fail@plt+0x5d28>
   170bc:	ldr	r3, [sp, #12]
   170c0:	cmp	sl, #0
   170c4:	str	r8, [r3]
   170c8:	ldr	r3, [sp, #80]	; 0x50
   170cc:	strne	r7, [sl]
   170d0:	cmp	r3, #0
   170d4:	strne	r5, [r3]
   170d8:	ldr	r3, [sp, #84]	; 0x54
   170dc:	movne	r5, #0
   170e0:	cmp	r3, #0
   170e4:	strne	r6, [r3]
   170e8:	movne	r6, #0
   170ec:	mov	r0, r5
   170f0:	bl	12ad0 <__assert_fail@plt+0x170c>
   170f4:	mov	r0, r6
   170f8:	bl	12ad0 <__assert_fail@plt+0x170c>
   170fc:	cmp	r4, #0
   17100:	beq	17118 <__assert_fail@plt+0x5d54>
   17104:	mov	r1, r4
   17108:	mov	r2, #5
   1710c:	mov	r0, #0
   17110:	bl	11130 <dcgettext@plt>
   17114:	mov	r4, r0
   17118:	mov	r0, r4
   1711c:	add	sp, sp, #44	; 0x2c
   17120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17124:	andeq	sl, r1, r2, rrx
   17128:			; <UNDEFINED> instruction: 0x000196be
   1712c:	andeq	sl, r1, r5, asr r0
   17130:	andeq	sl, r1, pc, rrx
   17134:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17138:	subs	r4, r2, #0
   1713c:	mov	r6, r0
   17140:	mov	r8, r1
   17144:	mov	r9, r3
   17148:	ldr	sl, [sp, #40]	; 0x28
   1714c:	moveq	r7, r4
   17150:	beq	17160 <__assert_fail@plt+0x5d9c>
   17154:	mov	r1, #58	; 0x3a
   17158:	bl	11244 <strchr@plt>
   1715c:	mov	r7, r0
   17160:	mov	r3, r4
   17164:	stm	sp, {r9, sl}
   17168:	mov	r2, r8
   1716c:	mov	r1, r7
   17170:	mov	r0, r6
   17174:	bl	16e70 <__assert_fail@plt+0x5aac>
   17178:	adds	r3, r4, #0
   1717c:	movne	r3, #1
   17180:	cmp	r7, #0
   17184:	movne	r3, #0
   17188:	cmp	r3, #0
   1718c:	mov	r5, r0
   17190:	beq	171d0 <__assert_fail@plt+0x5e0c>
   17194:	cmp	r0, #0
   17198:	beq	171cc <__assert_fail@plt+0x5e08>
   1719c:	mov	r1, #46	; 0x2e
   171a0:	mov	r0, r6
   171a4:	bl	11244 <strchr@plt>
   171a8:	subs	r1, r0, #0
   171ac:	beq	171d0 <__assert_fail@plt+0x5e0c>
   171b0:	stm	sp, {r9, sl}
   171b4:	mov	r3, r4
   171b8:	mov	r2, r8
   171bc:	mov	r0, r6
   171c0:	bl	16e70 <__assert_fail@plt+0x5aac>
   171c4:	cmp	r0, #0
   171c8:	bne	171d0 <__assert_fail@plt+0x5e0c>
   171cc:	mov	r5, #0
   171d0:	mov	r0, r5
   171d4:	add	sp, sp, #8
   171d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171dc:	push	{r4, r5, r6, lr}
   171e0:	sub	sp, sp, #32
   171e4:	cmp	r1, #0
   171e8:	mov	r5, r0
   171ec:	ldr	r4, [sp, #48]	; 0x30
   171f0:	ldr	r6, [sp, #52]	; 0x34
   171f4:	beq	172a8 <__assert_fail@plt+0x5ee4>
   171f8:	stm	sp, {r2, r3}
   171fc:	mov	r3, r1
   17200:	ldr	r2, [pc, #860]	; 17564 <__assert_fail@plt+0x61a0>
   17204:	mov	r1, #1
   17208:	bl	112a4 <__fprintf_chk@plt>
   1720c:	mov	r2, #5
   17210:	ldr	r1, [pc, #848]	; 17568 <__assert_fail@plt+0x61a4>
   17214:	mov	r0, #0
   17218:	bl	11130 <dcgettext@plt>
   1721c:	ldr	r3, [pc, #840]	; 1756c <__assert_fail@plt+0x61a8>
   17220:	ldr	r2, [pc, #840]	; 17570 <__assert_fail@plt+0x61ac>
   17224:	str	r3, [sp]
   17228:	mov	r1, #1
   1722c:	mov	r3, r0
   17230:	mov	r0, r5
   17234:	bl	112a4 <__fprintf_chk@plt>
   17238:	mov	r1, r5
   1723c:	mov	r0, #10
   17240:	bl	11124 <fputc_unlocked@plt>
   17244:	mov	r2, #5
   17248:	ldr	r1, [pc, #804]	; 17574 <__assert_fail@plt+0x61b0>
   1724c:	mov	r0, #0
   17250:	bl	11130 <dcgettext@plt>
   17254:	mov	r1, #1
   17258:	ldr	r3, [pc, #792]	; 17578 <__assert_fail@plt+0x61b4>
   1725c:	mov	r2, r0
   17260:	mov	r0, r5
   17264:	bl	112a4 <__fprintf_chk@plt>
   17268:	mov	r1, r5
   1726c:	mov	r0, #10
   17270:	bl	11124 <fputc_unlocked@plt>
   17274:	cmp	r6, #9
   17278:	ldrls	pc, [pc, r6, lsl #2]
   1727c:	b	17558 <__assert_fail@plt+0x6194>
   17280:	muleq	r1, r8, r3
   17284:	andeq	r7, r1, r0, asr #5
   17288:	andeq	r7, r1, ip, ror #5
   1728c:	andeq	r7, r1, r0, lsr #6
   17290:	andeq	r7, r1, ip, asr r3
   17294:	andeq	r7, r1, r0, lsr #7
   17298:	andeq	r7, r1, r8, ror #7
   1729c:	andeq	r7, r1, r8, lsr r4
   172a0:	muleq	r1, r0, r4
   172a4:	strdeq	r7, [r1], -r0
   172a8:	str	r3, [sp]
   172ac:	mov	r1, #1
   172b0:	mov	r3, r2
   172b4:	ldr	r2, [pc, #704]	; 1757c <__assert_fail@plt+0x61b8>
   172b8:	bl	112a4 <__fprintf_chk@plt>
   172bc:	b	1720c <__assert_fail@plt+0x5e48>
   172c0:	mov	r2, #5
   172c4:	ldr	r1, [pc, #692]	; 17580 <__assert_fail@plt+0x61bc>
   172c8:	mov	r0, #0
   172cc:	bl	11130 <dcgettext@plt>
   172d0:	ldr	r3, [r4]
   172d4:	mov	r1, #1
   172d8:	mov	r2, r0
   172dc:	mov	r0, r5
   172e0:	add	sp, sp, #32
   172e4:	pop	{r4, r5, r6, lr}
   172e8:	b	112a4 <__fprintf_chk@plt>
   172ec:	mov	r2, #5
   172f0:	ldr	r1, [pc, #652]	; 17584 <__assert_fail@plt+0x61c0>
   172f4:	mov	r0, #0
   172f8:	bl	11130 <dcgettext@plt>
   172fc:	ldr	r3, [r4, #4]
   17300:	mov	r1, #1
   17304:	str	r3, [sp, #48]	; 0x30
   17308:	ldr	r3, [r4]
   1730c:	mov	r2, r0
   17310:	mov	r0, r5
   17314:	add	sp, sp, #32
   17318:	pop	{r4, r5, r6, lr}
   1731c:	b	112a4 <__fprintf_chk@plt>
   17320:	mov	r2, #5
   17324:	ldr	r1, [pc, #604]	; 17588 <__assert_fail@plt+0x61c4>
   17328:	mov	r0, #0
   1732c:	bl	11130 <dcgettext@plt>
   17330:	ldr	r3, [r4, #8]
   17334:	mov	r1, #1
   17338:	str	r3, [sp, #52]	; 0x34
   1733c:	ldr	r3, [r4, #4]
   17340:	str	r3, [sp, #48]	; 0x30
   17344:	ldr	r3, [r4]
   17348:	mov	r2, r0
   1734c:	mov	r0, r5
   17350:	add	sp, sp, #32
   17354:	pop	{r4, r5, r6, lr}
   17358:	b	112a4 <__fprintf_chk@plt>
   1735c:	mov	r2, #5
   17360:	ldr	r1, [pc, #548]	; 1758c <__assert_fail@plt+0x61c8>
   17364:	mov	r0, #0
   17368:	bl	11130 <dcgettext@plt>
   1736c:	ldr	r3, [r4, #12]
   17370:	mov	r1, #1
   17374:	str	r3, [sp, #8]
   17378:	ldr	r3, [r4, #8]
   1737c:	str	r3, [sp, #4]
   17380:	ldr	r3, [r4, #4]
   17384:	str	r3, [sp]
   17388:	ldr	r3, [r4]
   1738c:	mov	r2, r0
   17390:	mov	r0, r5
   17394:	bl	112a4 <__fprintf_chk@plt>
   17398:	add	sp, sp, #32
   1739c:	pop	{r4, r5, r6, pc}
   173a0:	mov	r2, #5
   173a4:	ldr	r1, [pc, #484]	; 17590 <__assert_fail@plt+0x61cc>
   173a8:	mov	r0, #0
   173ac:	bl	11130 <dcgettext@plt>
   173b0:	ldr	r3, [r4, #16]
   173b4:	mov	r1, #1
   173b8:	str	r3, [sp, #12]
   173bc:	ldr	r3, [r4, #12]
   173c0:	str	r3, [sp, #8]
   173c4:	ldr	r3, [r4, #8]
   173c8:	str	r3, [sp, #4]
   173cc:	ldr	r3, [r4, #4]
   173d0:	str	r3, [sp]
   173d4:	ldr	r3, [r4]
   173d8:	mov	r2, r0
   173dc:	mov	r0, r5
   173e0:	bl	112a4 <__fprintf_chk@plt>
   173e4:	b	17398 <__assert_fail@plt+0x5fd4>
   173e8:	mov	r2, #5
   173ec:	ldr	r1, [pc, #416]	; 17594 <__assert_fail@plt+0x61d0>
   173f0:	mov	r0, #0
   173f4:	bl	11130 <dcgettext@plt>
   173f8:	ldr	r3, [r4, #20]
   173fc:	mov	r1, #1
   17400:	str	r3, [sp, #16]
   17404:	ldr	r3, [r4, #16]
   17408:	str	r3, [sp, #12]
   1740c:	ldr	r3, [r4, #12]
   17410:	str	r3, [sp, #8]
   17414:	ldr	r3, [r4, #8]
   17418:	str	r3, [sp, #4]
   1741c:	ldr	r3, [r4, #4]
   17420:	str	r3, [sp]
   17424:	ldr	r3, [r4]
   17428:	mov	r2, r0
   1742c:	mov	r0, r5
   17430:	bl	112a4 <__fprintf_chk@plt>
   17434:	b	17398 <__assert_fail@plt+0x5fd4>
   17438:	mov	r2, #5
   1743c:	ldr	r1, [pc, #340]	; 17598 <__assert_fail@plt+0x61d4>
   17440:	mov	r0, #0
   17444:	bl	11130 <dcgettext@plt>
   17448:	ldr	r3, [r4, #24]
   1744c:	mov	r1, #1
   17450:	str	r3, [sp, #20]
   17454:	ldr	r3, [r4, #20]
   17458:	str	r3, [sp, #16]
   1745c:	ldr	r3, [r4, #16]
   17460:	str	r3, [sp, #12]
   17464:	ldr	r3, [r4, #12]
   17468:	str	r3, [sp, #8]
   1746c:	ldr	r3, [r4, #8]
   17470:	str	r3, [sp, #4]
   17474:	ldr	r3, [r4, #4]
   17478:	str	r3, [sp]
   1747c:	ldr	r3, [r4]
   17480:	mov	r2, r0
   17484:	mov	r0, r5
   17488:	bl	112a4 <__fprintf_chk@plt>
   1748c:	b	17398 <__assert_fail@plt+0x5fd4>
   17490:	mov	r2, #5
   17494:	ldr	r1, [pc, #256]	; 1759c <__assert_fail@plt+0x61d8>
   17498:	mov	r0, #0
   1749c:	bl	11130 <dcgettext@plt>
   174a0:	ldr	r3, [r4, #28]
   174a4:	mov	r1, #1
   174a8:	str	r3, [sp, #24]
   174ac:	ldr	r3, [r4, #24]
   174b0:	str	r3, [sp, #20]
   174b4:	ldr	r3, [r4, #20]
   174b8:	str	r3, [sp, #16]
   174bc:	ldr	r3, [r4, #16]
   174c0:	str	r3, [sp, #12]
   174c4:	ldr	r3, [r4, #12]
   174c8:	str	r3, [sp, #8]
   174cc:	ldr	r3, [r4, #8]
   174d0:	str	r3, [sp, #4]
   174d4:	ldr	r3, [r4, #4]
   174d8:	str	r3, [sp]
   174dc:	ldr	r3, [r4]
   174e0:	mov	r2, r0
   174e4:	mov	r0, r5
   174e8:	bl	112a4 <__fprintf_chk@plt>
   174ec:	b	17398 <__assert_fail@plt+0x5fd4>
   174f0:	ldr	r1, [pc, #168]	; 175a0 <__assert_fail@plt+0x61dc>
   174f4:	mov	r2, #5
   174f8:	mov	r0, #0
   174fc:	bl	11130 <dcgettext@plt>
   17500:	ldr	r3, [r4, #32]
   17504:	mov	r1, #1
   17508:	str	r3, [sp, #28]
   1750c:	ldr	r3, [r4, #28]
   17510:	str	r3, [sp, #24]
   17514:	ldr	r3, [r4, #24]
   17518:	str	r3, [sp, #20]
   1751c:	ldr	r3, [r4, #20]
   17520:	str	r3, [sp, #16]
   17524:	ldr	r3, [r4, #16]
   17528:	str	r3, [sp, #12]
   1752c:	ldr	r3, [r4, #12]
   17530:	str	r3, [sp, #8]
   17534:	ldr	r3, [r4, #8]
   17538:	str	r3, [sp, #4]
   1753c:	ldr	r3, [r4, #4]
   17540:	str	r3, [sp]
   17544:	ldr	r3, [r4]
   17548:	mov	r2, r0
   1754c:	mov	r0, r5
   17550:	bl	112a4 <__fprintf_chk@plt>
   17554:	b	17398 <__assert_fail@plt+0x5fd4>
   17558:	mov	r2, #5
   1755c:	ldr	r1, [pc, #64]	; 175a4 <__assert_fail@plt+0x61e0>
   17560:	b	174f8 <__assert_fail@plt+0x6134>
   17564:	andeq	sl, r1, sp, ror r0
   17568:	muleq	r1, r0, r0
   1756c:	andeq	r0, r0, r6, ror #15
   17570:	andeq	sl, r1, lr, asr r3
   17574:	muleq	r1, r4, r0
   17578:	andeq	sl, r1, pc, lsr r1
   1757c:	andeq	sl, r1, r9, lsl #1
   17580:	andeq	sl, r1, r1, ror #2
   17584:	andeq	sl, r1, r1, ror r1
   17588:	andeq	sl, r1, r8, lsl #3
   1758c:	andeq	sl, r1, r4, lsr #3
   17590:	andeq	sl, r1, r4, asr #3
   17594:	andeq	sl, r1, r8, ror #3
   17598:	andeq	sl, r1, r0, lsl r2
   1759c:	andeq	sl, r1, ip, lsr r2
   175a0:	andeq	sl, r1, ip, ror #4
   175a4:	andeq	sl, r1, r0, lsr #5
   175a8:	push	{r0, r1, r4, lr}
   175ac:	mov	ip, #0
   175b0:	ldr	lr, [sp, #16]
   175b4:	ldr	r4, [lr, ip, lsl #2]
   175b8:	cmp	r4, #0
   175bc:	bne	175d4 <__assert_fail@plt+0x6210>
   175c0:	str	ip, [sp, #4]
   175c4:	str	lr, [sp]
   175c8:	bl	171dc <__assert_fail@plt+0x5e18>
   175cc:	add	sp, sp, #8
   175d0:	pop	{r4, pc}
   175d4:	add	ip, ip, #1
   175d8:	b	175b4 <__assert_fail@plt+0x61f0>
   175dc:	push	{r4, r5, lr}
   175e0:	sub	sp, sp, #52	; 0x34
   175e4:	mov	ip, #0
   175e8:	ldr	r5, [sp, #64]	; 0x40
   175ec:	add	lr, sp, #8
   175f0:	ldr	r4, [r5, ip, lsl #2]
   175f4:	cmp	r4, #0
   175f8:	str	r4, [lr, ip, lsl #2]
   175fc:	beq	1760c <__assert_fail@plt+0x6248>
   17600:	add	ip, ip, #1
   17604:	cmp	ip, #10
   17608:	bne	175f0 <__assert_fail@plt+0x622c>
   1760c:	str	ip, [sp, #4]
   17610:	str	lr, [sp]
   17614:	bl	171dc <__assert_fail@plt+0x5e18>
   17618:	add	sp, sp, #52	; 0x34
   1761c:	pop	{r4, r5, pc}
   17620:	push	{r3}		; (str r3, [sp, #-4]!)
   17624:	push	{r0, r1, r2, r3, lr}
   17628:	add	r3, sp, #24
   1762c:	str	r3, [sp, #12]
   17630:	str	r3, [sp]
   17634:	ldr	r3, [sp, #20]
   17638:	bl	175dc <__assert_fail@plt+0x6218>
   1763c:	add	sp, sp, #16
   17640:	pop	{lr}		; (ldr lr, [sp], #4)
   17644:	add	sp, sp, #4
   17648:	bx	lr
   1764c:	ldr	r3, [pc, #116]	; 176c8 <__assert_fail@plt+0x6304>
   17650:	push	{r4, lr}
   17654:	mov	r0, #10
   17658:	ldr	r1, [r3]
   1765c:	bl	11124 <fputc_unlocked@plt>
   17660:	mov	r2, #5
   17664:	ldr	r1, [pc, #96]	; 176cc <__assert_fail@plt+0x6308>
   17668:	mov	r0, #0
   1766c:	bl	11130 <dcgettext@plt>
   17670:	ldr	r2, [pc, #88]	; 176d0 <__assert_fail@plt+0x630c>
   17674:	mov	r1, r0
   17678:	mov	r0, #1
   1767c:	bl	1128c <__printf_chk@plt>
   17680:	mov	r2, #5
   17684:	ldr	r1, [pc, #72]	; 176d4 <__assert_fail@plt+0x6310>
   17688:	mov	r0, #0
   1768c:	bl	11130 <dcgettext@plt>
   17690:	ldr	r3, [pc, #64]	; 176d8 <__assert_fail@plt+0x6314>
   17694:	ldr	r2, [pc, #64]	; 176dc <__assert_fail@plt+0x6318>
   17698:	mov	r1, r0
   1769c:	mov	r0, #1
   176a0:	bl	1128c <__printf_chk@plt>
   176a4:	mov	r2, #5
   176a8:	ldr	r1, [pc, #48]	; 176e0 <__assert_fail@plt+0x631c>
   176ac:	mov	r0, #0
   176b0:	bl	11130 <dcgettext@plt>
   176b4:	ldr	r2, [pc, #40]	; 176e4 <__assert_fail@plt+0x6320>
   176b8:	pop	{r4, lr}
   176bc:	mov	r1, r0
   176c0:	mov	r0, #1
   176c4:	b	1128c <__printf_chk@plt>
   176c8:	muleq	r2, ip, r1
   176cc:	ldrdeq	sl, [r1], -ip
   176d0:	strdeq	sl, [r1], -r0
   176d4:	andeq	sl, r1, r6, lsl #6
   176d8:	andeq	r9, r1, r2, asr #17
   176dc:	andeq	r9, r1, sl, ror #17
   176e0:	andeq	sl, r1, sl, lsl r3
   176e4:	andeq	sl, r1, r1, asr #6
   176e8:	push	{r4, lr}
   176ec:	bl	18044 <__assert_fail@plt+0x6c80>
   176f0:	cmp	r0, #0
   176f4:	popne	{r4, pc}
   176f8:	bl	17b7c <__assert_fail@plt+0x67b8>
   176fc:	push	{r4, lr}
   17700:	bl	18044 <__assert_fail@plt+0x6c80>
   17704:	cmp	r0, #0
   17708:	popne	{r4, pc}
   1770c:	bl	17b7c <__assert_fail@plt+0x67b8>
   17710:	b	176e8 <__assert_fail@plt+0x6324>
   17714:	push	{r4, r5, r6, lr}
   17718:	mov	r5, r0
   1771c:	mov	r4, r1
   17720:	bl	18084 <__assert_fail@plt+0x6cc0>
   17724:	cmp	r0, #0
   17728:	popne	{r4, r5, r6, pc}
   1772c:	adds	r4, r4, #0
   17730:	movne	r4, #1
   17734:	cmp	r5, #0
   17738:	orreq	r4, r4, #1
   1773c:	cmp	r4, #0
   17740:	popeq	{r4, r5, r6, pc}
   17744:	bl	17b7c <__assert_fail@plt+0x67b8>
   17748:	push	{r4, lr}
   1774c:	cmp	r1, #0
   17750:	orreq	r1, r1, #1
   17754:	bl	18084 <__assert_fail@plt+0x6cc0>
   17758:	cmp	r0, #0
   1775c:	popne	{r4, pc}
   17760:	bl	17b7c <__assert_fail@plt+0x67b8>
   17764:	push	{r4, r5, r6, lr}
   17768:	mov	r6, r0
   1776c:	mov	r5, r1
   17770:	mov	r4, r2
   17774:	bl	18624 <__assert_fail@plt+0x7260>
   17778:	cmp	r0, #0
   1777c:	popne	{r4, r5, r6, pc}
   17780:	cmp	r6, #0
   17784:	beq	17794 <__assert_fail@plt+0x63d0>
   17788:	cmp	r5, #0
   1778c:	cmpne	r4, #0
   17790:	popeq	{r4, r5, r6, pc}
   17794:	bl	17b7c <__assert_fail@plt+0x67b8>
   17798:	b	17764 <__assert_fail@plt+0x63a0>
   1779c:	cmp	r2, #0
   177a0:	cmpne	r1, #0
   177a4:	moveq	r2, #1
   177a8:	moveq	r1, r2
   177ac:	push	{r4, lr}
   177b0:	bl	18624 <__assert_fail@plt+0x7260>
   177b4:	cmp	r0, #0
   177b8:	popne	{r4, pc}
   177bc:	bl	17b7c <__assert_fail@plt+0x67b8>
   177c0:	mov	r2, r1
   177c4:	mov	r1, r0
   177c8:	mov	r0, #0
   177cc:	b	17764 <__assert_fail@plt+0x63a0>
   177d0:	mov	r2, r1
   177d4:	mov	r1, r0
   177d8:	mov	r0, #0
   177dc:	b	1779c <__assert_fail@plt+0x63d8>
   177e0:	push	{r4, r5, r6, r7, r8, lr}
   177e4:	subs	r7, r0, #0
   177e8:	mov	r5, r1
   177ec:	mov	r6, r2
   177f0:	ldr	r4, [r1]
   177f4:	bne	17830 <__assert_fail@plt+0x646c>
   177f8:	cmp	r4, #0
   177fc:	bne	17818 <__assert_fail@plt+0x6454>
   17800:	mov	r1, r2
   17804:	mov	r0, #64	; 0x40
   17808:	bl	1875c <__assert_fail@plt+0x7398>
   1780c:	cmp	r0, #0
   17810:	movne	r4, r0
   17814:	addeq	r4, r0, #1
   17818:	mov	r2, r6
   1781c:	mov	r1, r4
   17820:	mov	r0, r7
   17824:	bl	17764 <__assert_fail@plt+0x63a0>
   17828:	str	r4, [r5]
   1782c:	pop	{r4, r5, r6, r7, r8, pc}
   17830:	lsr	r2, r4, #1
   17834:	add	r3, r2, #1
   17838:	mvn	r3, r3
   1783c:	cmp	r4, r3
   17840:	addls	r4, r4, #1
   17844:	addls	r4, r4, r2
   17848:	bls	17818 <__assert_fail@plt+0x6454>
   1784c:	bl	17b7c <__assert_fail@plt+0x67b8>
   17850:	mov	r2, #1
   17854:	b	177e0 <__assert_fail@plt+0x641c>
   17858:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1785c:	mov	sl, r0
   17860:	ldr	r8, [r1]
   17864:	mov	fp, r1
   17868:	mov	r5, r2
   1786c:	asrs	r4, r8, #1
   17870:	mov	r9, r3
   17874:	ldr	r7, [sp, #48]	; 0x30
   17878:	bpl	17914 <__assert_fail@plt+0x6550>
   1787c:	rsb	r2, r4, #-2147483648	; 0x80000000
   17880:	cmp	r8, r2
   17884:	movge	r2, #0
   17888:	movlt	r2, #1
   1788c:	mvn	r3, r9
   17890:	cmp	r2, #0
   17894:	lsr	r3, r3, #31
   17898:	addeq	r4, r4, r8
   1789c:	mvnne	r4, #-2147483648	; 0x80000000
   178a0:	mov	r0, r3
   178a4:	cmp	r9, r4
   178a8:	movge	r0, #0
   178ac:	andlt	r0, r0, #1
   178b0:	cmp	r0, #0
   178b4:	str	r3, [sp, #4]
   178b8:	bne	17a88 <__assert_fail@plt+0x66c4>
   178bc:	cmp	r7, #0
   178c0:	bge	179d4 <__assert_fail@plt+0x6610>
   178c4:	cmp	r4, #0
   178c8:	bge	1792c <__assert_fail@plt+0x6568>
   178cc:	mov	r1, r7
   178d0:	mvn	r0, #-2147483648	; 0x80000000
   178d4:	bl	18968 <__assert_fail@plt+0x75a4>
   178d8:	cmp	r0, r4
   178dc:	movle	r0, #0
   178e0:	movgt	r0, #1
   178e4:	cmp	r0, #0
   178e8:	mvnne	r6, #-2147483648	; 0x80000000
   178ec:	beq	1793c <__assert_fail@plt+0x6578>
   178f0:	mov	r1, r7
   178f4:	mov	r0, r6
   178f8:	bl	18968 <__assert_fail@plt+0x75a4>
   178fc:	mov	r1, r7
   17900:	mov	r4, r0
   17904:	mov	r0, r6
   17908:	bl	18b88 <__assert_fail@plt+0x77c4>
   1790c:	sub	r1, r6, r1
   17910:	b	1794c <__assert_fail@plt+0x6588>
   17914:	mvn	r2, #-2147483648	; 0x80000000
   17918:	sub	r2, r2, r4
   1791c:	cmp	r8, r2
   17920:	movle	r2, #0
   17924:	movgt	r2, #1
   17928:	b	1788c <__assert_fail@plt+0x64c8>
   1792c:	cmn	r7, #1
   17930:	movne	r1, r7
   17934:	movne	r0, #-2147483648	; 0x80000000
   17938:	bne	17aa0 <__assert_fail@plt+0x66dc>
   1793c:	mul	r1, r7, r4
   17940:	cmp	r1, #63	; 0x3f
   17944:	movle	r6, #64	; 0x40
   17948:	ble	178f0 <__assert_fail@plt+0x652c>
   1794c:	cmp	sl, #0
   17950:	sub	r2, r4, r8
   17954:	streq	sl, [fp]
   17958:	cmp	r2, r5
   1795c:	bge	17a30 <__assert_fail@plt+0x666c>
   17960:	cmp	r5, #0
   17964:	bge	179fc <__assert_fail@plt+0x6638>
   17968:	rsb	r2, r5, #-2147483648	; 0x80000000
   1796c:	cmp	r8, r2
   17970:	movge	r2, #0
   17974:	movlt	r2, #1
   17978:	cmp	r2, #0
   1797c:	bne	179d0 <__assert_fail@plt+0x660c>
   17980:	ldr	r0, [sp, #4]
   17984:	add	r5, r8, r5
   17988:	cmp	r9, r5
   1798c:	movge	r0, #0
   17990:	andlt	r0, r0, #1
   17994:	cmp	r0, #0
   17998:	mov	r4, r5
   1799c:	bne	179d0 <__assert_fail@plt+0x660c>
   179a0:	cmp	r7, #0
   179a4:	bge	17a44 <__assert_fail@plt+0x6680>
   179a8:	cmp	r5, #0
   179ac:	bge	17a1c <__assert_fail@plt+0x6658>
   179b0:	mov	r1, r7
   179b4:	mvn	r0, #-2147483648	; 0x80000000
   179b8:	bl	18968 <__assert_fail@plt+0x75a4>
   179bc:	cmp	r5, r0
   179c0:	movge	r0, #0
   179c4:	movlt	r0, #1
   179c8:	cmp	r0, #0
   179cc:	beq	17a2c <__assert_fail@plt+0x6668>
   179d0:	bl	17b7c <__assert_fail@plt+0x67b8>
   179d4:	beq	1793c <__assert_fail@plt+0x6578>
   179d8:	cmp	r4, #0
   179dc:	bge	17a98 <__assert_fail@plt+0x66d4>
   179e0:	cmn	r4, #1
   179e4:	beq	1793c <__assert_fail@plt+0x6578>
   179e8:	mov	r1, r4
   179ec:	mov	r0, #-2147483648	; 0x80000000
   179f0:	bl	18968 <__assert_fail@plt+0x75a4>
   179f4:	cmp	r7, r0
   179f8:	b	178dc <__assert_fail@plt+0x6518>
   179fc:	cmp	r8, #0
   17a00:	blt	17980 <__assert_fail@plt+0x65bc>
   17a04:	mvn	r2, #-2147483648	; 0x80000000
   17a08:	sub	r2, r2, r5
   17a0c:	cmp	r8, r2
   17a10:	movle	r2, #0
   17a14:	movgt	r2, #1
   17a18:	b	17978 <__assert_fail@plt+0x65b4>
   17a1c:	cmn	r7, #1
   17a20:	movne	r1, r7
   17a24:	movne	r0, #-2147483648	; 0x80000000
   17a28:	bne	17a7c <__assert_fail@plt+0x66b8>
   17a2c:	mul	r1, r5, r7
   17a30:	mov	r0, sl
   17a34:	bl	17714 <__assert_fail@plt+0x6350>
   17a38:	str	r4, [fp]
   17a3c:	add	sp, sp, #12
   17a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a44:	beq	17a2c <__assert_fail@plt+0x6668>
   17a48:	cmp	r5, #0
   17a4c:	movge	r1, r7
   17a50:	mvnge	r0, #-2147483648	; 0x80000000
   17a54:	bge	17a7c <__assert_fail@plt+0x66b8>
   17a58:	cmn	r5, #1
   17a5c:	beq	17a2c <__assert_fail@plt+0x6668>
   17a60:	mov	r1, r5
   17a64:	mov	r0, #-2147483648	; 0x80000000
   17a68:	bl	18968 <__assert_fail@plt+0x75a4>
   17a6c:	cmp	r7, r0
   17a70:	movle	r0, #0
   17a74:	movgt	r0, #1
   17a78:	b	179c8 <__assert_fail@plt+0x6604>
   17a7c:	bl	18968 <__assert_fail@plt+0x75a4>
   17a80:	cmp	r5, r0
   17a84:	b	17a70 <__assert_fail@plt+0x66ac>
   17a88:	cmp	r7, #0
   17a8c:	mov	r4, r9
   17a90:	blt	1792c <__assert_fail@plt+0x6568>
   17a94:	beq	1793c <__assert_fail@plt+0x6578>
   17a98:	mov	r1, r7
   17a9c:	mvn	r0, #-2147483648	; 0x80000000
   17aa0:	bl	18968 <__assert_fail@plt+0x75a4>
   17aa4:	cmp	r0, r4
   17aa8:	movge	r0, #0
   17aac:	movlt	r0, #1
   17ab0:	b	178e4 <__assert_fail@plt+0x6520>
   17ab4:	push	{r4, lr}
   17ab8:	bl	17ffc <__assert_fail@plt+0x6c38>
   17abc:	cmp	r0, #0
   17ac0:	popne	{r4, pc}
   17ac4:	bl	17b7c <__assert_fail@plt+0x67b8>
   17ac8:	mov	r1, #1
   17acc:	b	17ab4 <__assert_fail@plt+0x66f0>
   17ad0:	push	{r4, lr}
   17ad4:	bl	17ffc <__assert_fail@plt+0x6c38>
   17ad8:	cmp	r0, #0
   17adc:	popne	{r4, pc}
   17ae0:	bl	17b7c <__assert_fail@plt+0x67b8>
   17ae4:	mov	r1, #1
   17ae8:	b	17ad0 <__assert_fail@plt+0x670c>
   17aec:	push	{r4, r5, r6, lr}
   17af0:	mov	r4, r1
   17af4:	mov	r5, r0
   17af8:	mov	r0, r1
   17afc:	bl	176e8 <__assert_fail@plt+0x6324>
   17b00:	mov	r2, r4
   17b04:	mov	r1, r5
   17b08:	pop	{r4, r5, r6, lr}
   17b0c:	b	110f4 <memcpy@plt>
   17b10:	push	{r4, r5, r6, lr}
   17b14:	mov	r4, r1
   17b18:	mov	r5, r0
   17b1c:	mov	r0, r1
   17b20:	bl	176fc <__assert_fail@plt+0x6338>
   17b24:	mov	r2, r4
   17b28:	mov	r1, r5
   17b2c:	pop	{r4, r5, r6, lr}
   17b30:	b	110f4 <memcpy@plt>
   17b34:	push	{r4, r5, r6, lr}
   17b38:	mov	r5, r0
   17b3c:	add	r0, r1, #1
   17b40:	mov	r4, r1
   17b44:	bl	176fc <__assert_fail@plt+0x6338>
   17b48:	mov	r2, #0
   17b4c:	mov	r1, r5
   17b50:	strb	r2, [r0, r4]
   17b54:	mov	r2, r4
   17b58:	pop	{r4, r5, r6, lr}
   17b5c:	b	110f4 <memcpy@plt>
   17b60:	push	{r4, lr}
   17b64:	mov	r4, r0
   17b68:	bl	11238 <strlen@plt>
   17b6c:	add	r1, r0, #1
   17b70:	mov	r0, r4
   17b74:	pop	{r4, lr}
   17b78:	b	17aec <__assert_fail@plt+0x6728>
   17b7c:	ldr	r3, [pc, #44]	; 17bb0 <__assert_fail@plt+0x67ec>
   17b80:	push	{r4, lr}
   17b84:	mov	r2, #5
   17b88:	ldr	r1, [pc, #36]	; 17bb4 <__assert_fail@plt+0x67f0>
   17b8c:	mov	r0, #0
   17b90:	ldr	r4, [r3]
   17b94:	bl	11130 <dcgettext@plt>
   17b98:	ldr	r2, [pc, #24]	; 17bb8 <__assert_fail@plt+0x67f4>
   17b9c:	mov	r1, #0
   17ba0:	mov	r3, r0
   17ba4:	mov	r0, r4
   17ba8:	bl	111c0 <error@plt>
   17bac:	bl	1137c <abort@plt>
   17bb0:	andeq	fp, r2, r4, asr #2
   17bb4:	andeq	sl, r1, sp, lsl #7
   17bb8:	andeq	r9, r1, sp, lsr #19
   17bbc:	push	{r4, lr}
   17bc0:	orr	r1, r1, #512	; 0x200
   17bc4:	bl	13d40 <__assert_fail@plt+0x297c>
   17bc8:	cmp	r0, #0
   17bcc:	popne	{r4, pc}
   17bd0:	bl	11268 <__errno_location@plt>
   17bd4:	ldr	r3, [r0]
   17bd8:	cmp	r3, #22
   17bdc:	bne	17bf4 <__assert_fail@plt+0x6830>
   17be0:	ldr	r3, [pc, #16]	; 17bf8 <__assert_fail@plt+0x6834>
   17be4:	mov	r2, #41	; 0x29
   17be8:	ldr	r1, [pc, #12]	; 17bfc <__assert_fail@plt+0x6838>
   17bec:	ldr	r0, [pc, #12]	; 17c00 <__assert_fail@plt+0x683c>
   17bf0:	bl	113c4 <__assert_fail@plt>
   17bf4:	bl	17b7c <__assert_fail@plt+0x67b8>
   17bf8:	muleq	r1, lr, r3
   17bfc:	andeq	sl, r1, r8, lsr #7
   17c00:			; <UNDEFINED> instruction: 0x0001a3b3
   17c04:	ldr	r3, [r0, #48]	; 0x30
   17c08:	and	r3, r3, #17
   17c0c:	cmp	r3, #16
   17c10:	beq	17c2c <__assert_fail@plt+0x6868>
   17c14:	cmp	r3, #17
   17c18:	bne	17c34 <__assert_fail@plt+0x6870>
   17c1c:	ldr	r0, [r1, #48]	; 0x30
   17c20:	adds	r0, r0, #0
   17c24:	movne	r0, #1
   17c28:	bx	lr
   17c2c:	mov	r0, #1
   17c30:	bx	lr
   17c34:	mov	r0, #0
   17c38:	bx	lr
   17c3c:	push	{r4, r5, r6, lr}
   17c40:	subs	r5, r1, #0
   17c44:	mov	r4, r0
   17c48:	bge	17c78 <__assert_fail@plt+0x68b4>
   17c4c:	ldr	r0, [r0]
   17c50:	adds	r0, r0, #0
   17c54:	movne	r0, #1
   17c58:	cmp	r0, #0
   17c5c:	mvnne	r3, #0
   17c60:	ldreq	r3, [r4]
   17c64:	strne	r3, [r4]
   17c68:	movne	r0, #1
   17c6c:	muleq	r5, r5, r3
   17c70:	streq	r5, [r4]
   17c74:	pop	{r4, r5, r6, pc}
   17c78:	moveq	r0, r5
   17c7c:	beq	17c58 <__assert_fail@plt+0x6894>
   17c80:	mvn	r0, #0
   17c84:	bl	1875c <__assert_fail@plt+0x7398>
   17c88:	ldr	r3, [r4]
   17c8c:	cmp	r0, r3
   17c90:	movcs	r0, #0
   17c94:	movcc	r0, #1
   17c98:	b	17c58 <__assert_fail@plt+0x6894>
   17c9c:	push	{r4, r5, r6, r7, r8, lr}
   17ca0:	mov	r6, r0
   17ca4:	mov	r7, r1
   17ca8:	mov	r5, r2
   17cac:	mov	r4, #0
   17cb0:	cmp	r5, #0
   17cb4:	bne	17cc0 <__assert_fail@plt+0x68fc>
   17cb8:	mov	r0, r4
   17cbc:	pop	{r4, r5, r6, r7, r8, pc}
   17cc0:	mov	r1, r7
   17cc4:	mov	r0, r6
   17cc8:	bl	17c3c <__assert_fail@plt+0x6878>
   17ccc:	sub	r5, r5, #1
   17cd0:	orr	r4, r4, r0
   17cd4:	b	17cb0 <__assert_fail@plt+0x68ec>
   17cd8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cdc:	cmp	r2, #36	; 0x24
   17ce0:	ldr	r9, [sp, #48]	; 0x30
   17ce4:	bls	17cfc <__assert_fail@plt+0x6938>
   17ce8:	ldr	r3, [pc, #768]	; 17ff0 <__assert_fail@plt+0x6c2c>
   17cec:	mov	r2, #85	; 0x55
   17cf0:	ldr	r1, [pc, #764]	; 17ff4 <__assert_fail@plt+0x6c30>
   17cf4:	ldr	r0, [pc, #764]	; 17ff8 <__assert_fail@plt+0x6c34>
   17cf8:	bl	113c4 <__assert_fail@plt>
   17cfc:	cmp	r1, #0
   17d00:	mov	r7, r1
   17d04:	mov	r4, r0
   17d08:	mov	fp, r2
   17d0c:	mov	r8, r3
   17d10:	moveq	r7, sp
   17d14:	bl	11268 <__errno_location@plt>
   17d18:	mov	r3, #0
   17d1c:	str	r3, [r0]
   17d20:	mov	sl, r0
   17d24:	bl	11214 <__ctype_b_loc@plt>
   17d28:	ldrb	r6, [r4]
   17d2c:	mov	r3, r4
   17d30:	ldr	r1, [r0]
   17d34:	lsl	r2, r6, #1
   17d38:	ldrh	r5, [r1, r2]
   17d3c:	ands	r5, r5, #8192	; 0x2000
   17d40:	bne	17d5c <__assert_fail@plt+0x6998>
   17d44:	cmp	r6, #45	; 0x2d
   17d48:	bne	17d64 <__assert_fail@plt+0x69a0>
   17d4c:	mov	r5, #4
   17d50:	mov	r0, r5
   17d54:	add	sp, sp, #12
   17d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d5c:	ldrb	r6, [r3, #1]!
   17d60:	b	17d34 <__assert_fail@plt+0x6970>
   17d64:	mov	r2, fp
   17d68:	mov	r1, r7
   17d6c:	mov	r0, r4
   17d70:	bl	1122c <strtoul@plt>
   17d74:	ldr	r6, [r7]
   17d78:	cmp	r4, r6
   17d7c:	str	r0, [sp, #4]
   17d80:	bne	17de0 <__assert_fail@plt+0x6a1c>
   17d84:	cmp	r9, #0
   17d88:	beq	17d4c <__assert_fail@plt+0x6988>
   17d8c:	ldrb	r1, [r6]
   17d90:	cmp	r1, #0
   17d94:	beq	17d4c <__assert_fail@plt+0x6988>
   17d98:	mov	r0, r9
   17d9c:	bl	11244 <strchr@plt>
   17da0:	cmp	r0, #0
   17da4:	movne	r3, #1
   17da8:	strne	r3, [sp, #4]
   17dac:	beq	17d4c <__assert_fail@plt+0x6988>
   17db0:	ldrb	r4, [r6]
   17db4:	cmp	r4, #0
   17db8:	beq	17ef0 <__assert_fail@plt+0x6b2c>
   17dbc:	mov	r1, r4
   17dc0:	mov	r0, r9
   17dc4:	bl	11244 <strchr@plt>
   17dc8:	cmp	r0, #0
   17dcc:	bne	17e08 <__assert_fail@plt+0x6a44>
   17dd0:	ldr	r3, [sp, #4]
   17dd4:	orr	r5, r5, #2
   17dd8:	str	r3, [r8]
   17ddc:	b	17d50 <__assert_fail@plt+0x698c>
   17de0:	ldr	r5, [sl]
   17de4:	cmp	r5, #0
   17de8:	beq	17df8 <__assert_fail@plt+0x6a34>
   17dec:	cmp	r5, #34	; 0x22
   17df0:	bne	17d4c <__assert_fail@plt+0x6988>
   17df4:	mov	r5, #1
   17df8:	cmp	r9, #0
   17dfc:	streq	r0, [r8]
   17e00:	bne	17db0 <__assert_fail@plt+0x69ec>
   17e04:	b	17d50 <__assert_fail@plt+0x698c>
   17e08:	cmp	r4, #84	; 0x54
   17e0c:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17e10:	bhi	17e48 <__assert_fail@plt+0x6a84>
   17e14:	cmp	r4, #75	; 0x4b
   17e18:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17e1c:	bhi	17e38 <__assert_fail@plt+0x6a74>
   17e20:	cmp	r4, #69	; 0x45
   17e24:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17e28:	cmp	r4, #71	; 0x47
   17e2c:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17e30:	mov	r6, #1
   17e34:	b	17f24 <__assert_fail@plt+0x6b60>
   17e38:	cmp	r4, #77	; 0x4d
   17e3c:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17e40:	cmp	r4, #80	; 0x50
   17e44:	b	17e2c <__assert_fail@plt+0x6a68>
   17e48:	cmp	r4, #103	; 0x67
   17e4c:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17e50:	bhi	17efc <__assert_fail@plt+0x6b38>
   17e54:	sub	r3, r4, #89	; 0x59
   17e58:	cmp	r3, #1
   17e5c:	bhi	17e30 <__assert_fail@plt+0x6a6c>
   17e60:	mov	r1, #48	; 0x30
   17e64:	mov	r0, r9
   17e68:	bl	11244 <strchr@plt>
   17e6c:	cmp	r0, #0
   17e70:	beq	17e30 <__assert_fail@plt+0x6a6c>
   17e74:	ldrb	r3, [r6, #1]
   17e78:	cmp	r3, #68	; 0x44
   17e7c:	beq	17e90 <__assert_fail@plt+0x6acc>
   17e80:	cmp	r3, #105	; 0x69
   17e84:	beq	17f14 <__assert_fail@plt+0x6b50>
   17e88:	cmp	r3, #66	; 0x42
   17e8c:	bne	17e30 <__assert_fail@plt+0x6a6c>
   17e90:	mov	r6, #2
   17e94:	mov	r1, #1000	; 0x3e8
   17e98:	cmp	r4, #89	; 0x59
   17e9c:	beq	17fe0 <__assert_fail@plt+0x6c1c>
   17ea0:	bhi	17f4c <__assert_fail@plt+0x6b88>
   17ea4:	cmp	r4, #75	; 0x4b
   17ea8:	beq	17f8c <__assert_fail@plt+0x6bc8>
   17eac:	bhi	17f2c <__assert_fail@plt+0x6b68>
   17eb0:	cmp	r4, #69	; 0x45
   17eb4:	beq	17fb4 <__assert_fail@plt+0x6bf0>
   17eb8:	cmp	r4, #71	; 0x47
   17ebc:	beq	17fc0 <__assert_fail@plt+0x6bfc>
   17ec0:	cmp	r4, #66	; 0x42
   17ec4:	moveq	r1, #1024	; 0x400
   17ec8:	bne	17dd0 <__assert_fail@plt+0x6a0c>
   17ecc:	add	r0, sp, #4
   17ed0:	bl	17c3c <__assert_fail@plt+0x6878>
   17ed4:	ldr	r3, [r7]
   17ed8:	orr	r5, r5, r0
   17edc:	add	r2, r3, r6
   17ee0:	str	r2, [r7]
   17ee4:	ldrb	r3, [r3, r6]
   17ee8:	cmp	r3, #0
   17eec:	orrne	r5, r5, #2
   17ef0:	ldr	r3, [sp, #4]
   17ef4:	str	r3, [r8]
   17ef8:	b	17d50 <__assert_fail@plt+0x698c>
   17efc:	cmp	r4, #109	; 0x6d
   17f00:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17f04:	cmp	r4, #116	; 0x74
   17f08:	beq	17e60 <__assert_fail@plt+0x6a9c>
   17f0c:	cmp	r4, #107	; 0x6b
   17f10:	b	17e2c <__assert_fail@plt+0x6a68>
   17f14:	ldrb	r6, [r6, #2]
   17f18:	cmp	r6, #66	; 0x42
   17f1c:	movne	r6, #1
   17f20:	moveq	r6, #3
   17f24:	mov	r1, #1024	; 0x400
   17f28:	b	17e98 <__assert_fail@plt+0x6ad4>
   17f2c:	cmp	r4, #80	; 0x50
   17f30:	beq	17fc8 <__assert_fail@plt+0x6c04>
   17f34:	cmp	r4, #84	; 0x54
   17f38:	beq	17fd0 <__assert_fail@plt+0x6c0c>
   17f3c:	cmp	r4, #77	; 0x4d
   17f40:	bne	17dd0 <__assert_fail@plt+0x6a0c>
   17f44:	mov	r2, #2
   17f48:	b	17fb8 <__assert_fail@plt+0x6bf4>
   17f4c:	cmp	r4, #103	; 0x67
   17f50:	beq	17fc0 <__assert_fail@plt+0x6bfc>
   17f54:	bhi	17f78 <__assert_fail@plt+0x6bb4>
   17f58:	cmp	r4, #98	; 0x62
   17f5c:	beq	17fac <__assert_fail@plt+0x6be8>
   17f60:	cmp	r4, #99	; 0x63
   17f64:	beq	17fe8 <__assert_fail@plt+0x6c24>
   17f68:	cmp	r4, #90	; 0x5a
   17f6c:	bne	17dd0 <__assert_fail@plt+0x6a0c>
   17f70:	mov	r2, #7
   17f74:	b	17fb8 <__assert_fail@plt+0x6bf4>
   17f78:	cmp	r4, #109	; 0x6d
   17f7c:	beq	17f44 <__assert_fail@plt+0x6b80>
   17f80:	bhi	17f94 <__assert_fail@plt+0x6bd0>
   17f84:	cmp	r4, #107	; 0x6b
   17f88:	bne	17dd0 <__assert_fail@plt+0x6a0c>
   17f8c:	mov	r2, #1
   17f90:	b	17fb8 <__assert_fail@plt+0x6bf4>
   17f94:	cmp	r4, #116	; 0x74
   17f98:	beq	17fd0 <__assert_fail@plt+0x6c0c>
   17f9c:	cmp	r4, #119	; 0x77
   17fa0:	moveq	r1, #2
   17fa4:	beq	17ecc <__assert_fail@plt+0x6b08>
   17fa8:	b	17dd0 <__assert_fail@plt+0x6a0c>
   17fac:	mov	r1, #512	; 0x200
   17fb0:	b	17ecc <__assert_fail@plt+0x6b08>
   17fb4:	mov	r2, #6
   17fb8:	add	r0, sp, #4
   17fbc:	b	17fd8 <__assert_fail@plt+0x6c14>
   17fc0:	mov	r2, #3
   17fc4:	b	17fb8 <__assert_fail@plt+0x6bf4>
   17fc8:	mov	r2, #5
   17fcc:	b	17fb8 <__assert_fail@plt+0x6bf4>
   17fd0:	mov	r2, #4
   17fd4:	add	r0, sp, r2
   17fd8:	bl	17c9c <__assert_fail@plt+0x68d8>
   17fdc:	b	17ed4 <__assert_fail@plt+0x6b10>
   17fe0:	mov	r2, #8
   17fe4:	b	17fb8 <__assert_fail@plt+0x6bf4>
   17fe8:	mov	r0, #0
   17fec:	b	17ed4 <__assert_fail@plt+0x6b10>
   17ff0:	andeq	sl, r1, r3, asr #7
   17ff4:	andeq	sl, r1, ip, asr #7
   17ff8:	ldrdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   17ffc:	cmp	r1, #0
   18000:	cmpne	r0, #0
   18004:	moveq	r1, #1
   18008:	moveq	r0, r1
   1800c:	umull	r2, r3, r0, r1
   18010:	adds	r3, r3, #0
   18014:	movne	r3, #1
   18018:	cmp	r2, #0
   1801c:	blt	1802c <__assert_fail@plt+0x6c68>
   18020:	cmp	r3, #0
   18024:	bne	1802c <__assert_fail@plt+0x6c68>
   18028:	b	11064 <calloc@plt>
   1802c:	push	{r4, lr}
   18030:	bl	11268 <__errno_location@plt>
   18034:	mov	r3, #12
   18038:	str	r3, [r0]
   1803c:	mov	r0, #0
   18040:	pop	{r4, pc}
   18044:	cmp	r0, #0
   18048:	mov	r3, #0
   1804c:	moveq	r0, #1
   18050:	adds	r3, r3, #0
   18054:	movne	r3, #1
   18058:	cmp	r0, #0
   1805c:	blt	1806c <__assert_fail@plt+0x6ca8>
   18060:	cmp	r3, #0
   18064:	bne	1806c <__assert_fail@plt+0x6ca8>
   18068:	b	111d8 <malloc@plt>
   1806c:	push	{r4, lr}
   18070:	bl	11268 <__errno_location@plt>
   18074:	mov	r3, #12
   18078:	str	r3, [r0]
   1807c:	mov	r0, #0
   18080:	pop	{r4, pc}
   18084:	cmp	r0, #0
   18088:	push	{r4, lr}
   1808c:	mov	r4, r1
   18090:	bne	180a0 <__assert_fail@plt+0x6cdc>
   18094:	mov	r0, r1
   18098:	pop	{r4, lr}
   1809c:	b	18044 <__assert_fail@plt+0x6c80>
   180a0:	cmp	r1, #0
   180a4:	bne	180b4 <__assert_fail@plt+0x6cf0>
   180a8:	bl	12ad0 <__assert_fail@plt+0x170c>
   180ac:	mov	r0, #0
   180b0:	pop	{r4, pc}
   180b4:	cmp	r1, #0
   180b8:	blt	180c8 <__assert_fail@plt+0x6d04>
   180bc:	mov	r3, #0
   180c0:	cmp	r3, r3
   180c4:	beq	180d8 <__assert_fail@plt+0x6d14>
   180c8:	bl	11268 <__errno_location@plt>
   180cc:	mov	r3, #12
   180d0:	str	r3, [r0]
   180d4:	b	180ac <__assert_fail@plt+0x6ce8>
   180d8:	pop	{r4, lr}
   180dc:	b	1113c <realloc@plt>
   180e0:	push	{r4, r5, r6, lr}
   180e4:	mov	r4, r0
   180e8:	bl	1119c <__fpending@plt>
   180ec:	mov	r5, r0
   180f0:	mov	r0, r4
   180f4:	bl	111a8 <ferror_unlocked@plt>
   180f8:	mov	r6, r0
   180fc:	mov	r0, r4
   18100:	bl	1821c <__assert_fail@plt+0x6e58>
   18104:	cmp	r6, #0
   18108:	mov	r4, r0
   1810c:	bne	18138 <__assert_fail@plt+0x6d74>
   18110:	cmp	r0, #0
   18114:	beq	18130 <__assert_fail@plt+0x6d6c>
   18118:	cmp	r5, #0
   1811c:	bne	18148 <__assert_fail@plt+0x6d84>
   18120:	bl	11268 <__errno_location@plt>
   18124:	ldr	r4, [r0]
   18128:	subs	r4, r4, #9
   1812c:	mvnne	r4, #0
   18130:	mov	r0, r4
   18134:	pop	{r4, r5, r6, pc}
   18138:	cmp	r0, #0
   1813c:	bne	18148 <__assert_fail@plt+0x6d84>
   18140:	bl	11268 <__errno_location@plt>
   18144:	str	r4, [r0]
   18148:	mvn	r4, #0
   1814c:	b	18130 <__assert_fail@plt+0x6d6c>
   18150:	mov	r3, #0
   18154:	mov	r2, #0
   18158:	strd	r2, [r0, #16]
   1815c:	ldr	r3, [pc, #4]	; 18168 <__assert_fail@plt+0x6da4>
   18160:	str	r3, [r0, #24]
   18164:	bx	lr
   18168:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1816c:	ldr	r2, [r0, #24]
   18170:	ldr	r3, [pc, #148]	; 1820c <__assert_fail@plt+0x6e48>
   18174:	push	{r4, r5, r6, r7, r8, lr}
   18178:	cmp	r2, r3
   1817c:	beq	18194 <__assert_fail@plt+0x6dd0>
   18180:	ldr	r3, [pc, #136]	; 18210 <__assert_fail@plt+0x6e4c>
   18184:	mov	r2, #60	; 0x3c
   18188:	ldr	r1, [pc, #132]	; 18214 <__assert_fail@plt+0x6e50>
   1818c:	ldr	r0, [pc, #132]	; 18218 <__assert_fail@plt+0x6e54>
   18190:	bl	113c4 <__assert_fail@plt>
   18194:	ldrd	r6, [r0, #16]
   18198:	orrs	r3, r6, r7
   1819c:	beq	181d0 <__assert_fail@plt+0x6e0c>
   181a0:	ldrd	r4, [r1, #96]	; 0x60
   181a4:	ldrd	r2, [r0]
   181a8:	cmp	r5, r3
   181ac:	cmpeq	r4, r2
   181b0:	bne	181d0 <__assert_fail@plt+0x6e0c>
   181b4:	ldrd	r4, [r1]
   181b8:	ldrd	r2, [r0, #8]
   181bc:	cmp	r5, r3
   181c0:	cmpeq	r4, r2
   181c4:	bne	181d0 <__assert_fail@plt+0x6e0c>
   181c8:	mov	r0, #1
   181cc:	pop	{r4, r5, r6, r7, r8, pc}
   181d0:	adds	r2, r6, #1
   181d4:	adc	r3, r7, #0
   181d8:	and	r6, r6, r2
   181dc:	and	r7, r7, r3
   181e0:	orrs	ip, r6, r7
   181e4:	strd	r2, [r0, #16]
   181e8:	bne	18204 <__assert_fail@plt+0x6e40>
   181ec:	orrs	r3, r2, r3
   181f0:	beq	181c8 <__assert_fail@plt+0x6e04>
   181f4:	ldrd	r2, [r1]
   181f8:	strd	r2, [r0, #8]
   181fc:	ldrd	r2, [r1, #96]	; 0x60
   18200:	strd	r2, [r0]
   18204:	mov	r0, #0
   18208:	pop	{r4, r5, r6, r7, r8, pc}
   1820c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18210:	andeq	sl, r1, r0, lsl #8
   18214:	andeq	sl, r1, ip, lsl #8
   18218:	andeq	sl, r1, lr, lsl r4
   1821c:	push	{r0, r1, r2, r4, r5, lr}
   18220:	mov	r4, r0
   18224:	bl	11298 <fileno@plt>
   18228:	cmp	r0, #0
   1822c:	mov	r0, r4
   18230:	bge	18240 <__assert_fail@plt+0x6e7c>
   18234:	add	sp, sp, #12
   18238:	pop	{r4, r5, lr}
   1823c:	b	112b0 <fclose@plt>
   18240:	bl	111f0 <__freading@plt>
   18244:	cmp	r0, #0
   18248:	bne	18284 <__assert_fail@plt+0x6ec0>
   1824c:	mov	r0, r4
   18250:	bl	184bc <__assert_fail@plt+0x70f8>
   18254:	cmp	r0, #0
   18258:	bne	182b8 <__assert_fail@plt+0x6ef4>
   1825c:	mov	r5, #0
   18260:	mov	r0, r4
   18264:	bl	112b0 <fclose@plt>
   18268:	cmp	r5, #0
   1826c:	beq	1827c <__assert_fail@plt+0x6eb8>
   18270:	bl	11268 <__errno_location@plt>
   18274:	str	r5, [r0]
   18278:	mvn	r0, #0
   1827c:	add	sp, sp, #12
   18280:	pop	{r4, r5, pc}
   18284:	mov	r0, r4
   18288:	bl	11298 <fileno@plt>
   1828c:	mov	r3, #1
   18290:	str	r3, [sp]
   18294:	mov	r2, #0
   18298:	mov	r3, #0
   1829c:	bl	11178 <lseek64@plt>
   182a0:	mvn	r3, #0
   182a4:	mvn	r2, #0
   182a8:	cmp	r1, r3
   182ac:	cmpeq	r0, r2
   182b0:	bne	1824c <__assert_fail@plt+0x6e88>
   182b4:	b	1825c <__assert_fail@plt+0x6e98>
   182b8:	bl	11268 <__errno_location@plt>
   182bc:	ldr	r5, [r0]
   182c0:	b	18260 <__assert_fail@plt+0x6e9c>
   182c4:	push	{r1, r2, r3}
   182c8:	push	{r0, r1, r4, r5, r6, r7, lr}
   182cc:	add	r2, sp, #32
   182d0:	ldr	r1, [sp, #28]
   182d4:	str	r2, [sp, #4]
   182d8:	cmp	r1, #0
   182dc:	beq	18320 <__assert_fail@plt+0x6f5c>
   182e0:	ldr	r3, [pc, #396]	; 18474 <__assert_fail@plt+0x70b0>
   182e4:	mov	r6, r0
   182e8:	cmp	r1, r3
   182ec:	beq	1832c <__assert_fail@plt+0x6f68>
   182f0:	cmp	r1, #11
   182f4:	beq	18310 <__assert_fail@plt+0x6f4c>
   182f8:	bgt	1843c <__assert_fail@plt+0x7078>
   182fc:	cmp	r1, #3
   18300:	beq	18310 <__assert_fail@plt+0x6f4c>
   18304:	bgt	18418 <__assert_fail@plt+0x7054>
   18308:	cmp	r1, #1
   1830c:	bne	18424 <__assert_fail@plt+0x7060>
   18310:	mov	r0, r6
   18314:	bl	112c8 <fcntl64@plt>
   18318:	mov	r4, r0
   1831c:	b	183d8 <__assert_fail@plt+0x7014>
   18320:	ldr	r2, [sp, #32]
   18324:	bl	112c8 <fcntl64@plt>
   18328:	b	18318 <__assert_fail@plt+0x6f54>
   1832c:	ldr	r5, [pc, #324]	; 18478 <__assert_fail@plt+0x70b4>
   18330:	add	r3, sp, #36	; 0x24
   18334:	str	r3, [sp, #4]
   18338:	ldr	r3, [r5]
   1833c:	ldr	r7, [r2]
   18340:	cmp	r3, #0
   18344:	mov	r2, r7
   18348:	blt	183ec <__assert_fail@plt+0x7028>
   1834c:	bl	112c8 <fcntl64@plt>
   18350:	subs	r4, r0, #0
   18354:	bge	18368 <__assert_fail@plt+0x6fa4>
   18358:	bl	11268 <__errno_location@plt>
   1835c:	ldr	r3, [r0]
   18360:	cmp	r3, #22
   18364:	beq	183b8 <__assert_fail@plt+0x6ff4>
   18368:	mov	r3, #1
   1836c:	str	r3, [r5]
   18370:	cmp	r4, #0
   18374:	blt	183d8 <__assert_fail@plt+0x7014>
   18378:	ldr	r5, [r5]
   1837c:	cmn	r5, #1
   18380:	bne	183d8 <__assert_fail@plt+0x7014>
   18384:	mov	r1, #1
   18388:	mov	r0, r4
   1838c:	bl	112c8 <fcntl64@plt>
   18390:	subs	r2, r0, #0
   18394:	bge	183fc <__assert_fail@plt+0x7038>
   18398:	bl	11268 <__errno_location@plt>
   1839c:	ldr	r7, [r0]
   183a0:	mov	r6, r0
   183a4:	mov	r0, r4
   183a8:	bl	11388 <close@plt>
   183ac:	mov	r4, r5
   183b0:	str	r7, [r6]
   183b4:	b	183d8 <__assert_fail@plt+0x7014>
   183b8:	mov	r2, r7
   183bc:	mov	r1, #0
   183c0:	mov	r0, r6
   183c4:	bl	112c8 <fcntl64@plt>
   183c8:	subs	r4, r0, #0
   183cc:	mvnge	r3, #0
   183d0:	strge	r3, [r5]
   183d4:	bge	18378 <__assert_fail@plt+0x6fb4>
   183d8:	mov	r0, r4
   183dc:	add	sp, sp, #8
   183e0:	pop	{r4, r5, r6, r7, lr}
   183e4:	add	sp, sp, #12
   183e8:	bx	lr
   183ec:	mov	r1, #0
   183f0:	bl	112c8 <fcntl64@plt>
   183f4:	mov	r4, r0
   183f8:	b	18370 <__assert_fail@plt+0x6fac>
   183fc:	orr	r2, r2, #1
   18400:	mov	r1, #2
   18404:	mov	r0, r4
   18408:	bl	112c8 <fcntl64@plt>
   1840c:	cmn	r0, #1
   18410:	bne	183d8 <__assert_fail@plt+0x7014>
   18414:	b	18398 <__assert_fail@plt+0x6fd4>
   18418:	cmp	r1, #8
   1841c:	beq	18424 <__assert_fail@plt+0x7060>
   18420:	bgt	18434 <__assert_fail@plt+0x7070>
   18424:	ldr	r3, [sp, #4]
   18428:	mov	r0, r6
   1842c:	ldr	r2, [r3]
   18430:	b	18324 <__assert_fail@plt+0x6f60>
   18434:	cmp	r1, #9
   18438:	b	1830c <__assert_fail@plt+0x6f48>
   1843c:	ldr	r2, [pc, #56]	; 1847c <__assert_fail@plt+0x70b8>
   18440:	cmp	r1, r2
   18444:	bgt	1845c <__assert_fail@plt+0x7098>
   18448:	cmp	r1, r3
   1844c:	ldrlt	r3, [pc, #44]	; 18480 <__assert_fail@plt+0x70bc>
   18450:	bge	18424 <__assert_fail@plt+0x7060>
   18454:	cmp	r1, r3
   18458:	b	1830c <__assert_fail@plt+0x6f48>
   1845c:	ldr	r3, [pc, #32]	; 18484 <__assert_fail@plt+0x70c0>
   18460:	cmp	r1, r3
   18464:	beq	18424 <__assert_fail@plt+0x7060>
   18468:	blt	18310 <__assert_fail@plt+0x6f4c>
   1846c:	add	r3, r3, #1
   18470:	b	18454 <__assert_fail@plt+0x7090>
   18474:	andeq	r0, r0, r6, lsl #8
   18478:	strdeq	fp, [r2], -ip
   1847c:	andeq	r0, r0, r7, lsl #8
   18480:	andeq	r0, r0, r1, lsl #8
   18484:	andeq	r0, r0, r9, lsl #8
   18488:	push	{r1, r2, r3}
   1848c:	push	{r0, r1, lr}
   18490:	ldr	r1, [sp, #12]
   18494:	ands	r2, r1, #64	; 0x40
   18498:	addne	r3, sp, #16
   1849c:	ldrne	r2, [sp, #16]
   184a0:	strne	r3, [sp, #4]
   184a4:	bl	111cc <open64@plt>
   184a8:	bl	16e34 <__assert_fail@plt+0x5a70>
   184ac:	add	sp, sp, #8
   184b0:	pop	{lr}		; (ldr lr, [sp], #4)
   184b4:	add	sp, sp, #12
   184b8:	bx	lr
   184bc:	push	{r0, r1, r4, lr}
   184c0:	subs	r4, r0, #0
   184c4:	bne	184d8 <__assert_fail@plt+0x7114>
   184c8:	mov	r0, r4
   184cc:	add	sp, sp, #8
   184d0:	pop	{r4, lr}
   184d4:	b	110b8 <fflush@plt>
   184d8:	bl	111f0 <__freading@plt>
   184dc:	cmp	r0, #0
   184e0:	beq	184c8 <__assert_fail@plt+0x7104>
   184e4:	ldr	r3, [r4]
   184e8:	tst	r3, #256	; 0x100
   184ec:	beq	184c8 <__assert_fail@plt+0x7104>
   184f0:	mov	r3, #1
   184f4:	str	r3, [sp]
   184f8:	mov	r2, #0
   184fc:	mov	r3, #0
   18500:	mov	r0, r4
   18504:	bl	1850c <__assert_fail@plt+0x7148>
   18508:	b	184c8 <__assert_fail@plt+0x7104>
   1850c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18510:	mov	r4, r0
   18514:	ldmib	r0, {ip, lr}
   18518:	ldr	r8, [sp, #32]
   1851c:	cmp	lr, ip
   18520:	bne	1858c <__assert_fail@plt+0x71c8>
   18524:	ldr	lr, [r0, #20]
   18528:	ldr	ip, [r0, #16]
   1852c:	cmp	lr, ip
   18530:	bne	1858c <__assert_fail@plt+0x71c8>
   18534:	ldr	r5, [r0, #36]	; 0x24
   18538:	cmp	r5, #0
   1853c:	bne	1858c <__assert_fail@plt+0x71c8>
   18540:	mov	r6, r2
   18544:	mov	r7, r3
   18548:	bl	11298 <fileno@plt>
   1854c:	mov	r2, r6
   18550:	mov	r3, r7
   18554:	str	r8, [sp]
   18558:	bl	11178 <lseek64@plt>
   1855c:	mvn	r3, #0
   18560:	mvn	r2, #0
   18564:	cmp	r1, r3
   18568:	cmpeq	r0, r2
   1856c:	mvneq	r0, #0
   18570:	ldrne	r3, [r4]
   18574:	strdne	r0, [r4, #80]	; 0x50
   18578:	movne	r0, r5
   1857c:	bicne	r3, r3, #16
   18580:	strne	r3, [r4]
   18584:	add	sp, sp, #8
   18588:	pop	{r4, r5, r6, r7, r8, pc}
   1858c:	str	r8, [sp, #32]
   18590:	mov	r0, r4
   18594:	add	sp, sp, #8
   18598:	pop	{r4, r5, r6, r7, r8, lr}
   1859c:	b	112bc <fseeko64@plt>
   185a0:	push	{r4, lr}
   185a4:	mov	r0, #14
   185a8:	bl	112f8 <nl_langinfo@plt>
   185ac:	ldr	r3, [pc, #24]	; 185cc <__assert_fail@plt+0x7208>
   185b0:	cmp	r0, #0
   185b4:	moveq	r0, r3
   185b8:	ldr	r3, [pc, #16]	; 185d0 <__assert_fail@plt+0x720c>
   185bc:	ldrb	r2, [r0]
   185c0:	cmp	r2, #0
   185c4:	moveq	r0, r3
   185c8:	pop	{r4, pc}
   185cc:			; <UNDEFINED> instruction: 0x000196be
   185d0:	andeq	sl, r1, r6, lsr r4
   185d4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   185d8:	subs	r5, r0, #0
   185dc:	addeq	r5, sp, #4
   185e0:	mov	r0, r5
   185e4:	mov	r7, r2
   185e8:	mov	r6, r1
   185ec:	bl	111b4 <mbrtowc@plt>
   185f0:	cmp	r7, #0
   185f4:	cmnne	r0, #3
   185f8:	mov	r4, r0
   185fc:	bls	18618 <__assert_fail@plt+0x7254>
   18600:	mov	r0, #0
   18604:	bl	1867c <__assert_fail@plt+0x72b8>
   18608:	cmp	r0, #0
   1860c:	moveq	r4, #1
   18610:	ldrbeq	r3, [r6]
   18614:	streq	r3, [r5]
   18618:	mov	r0, r4
   1861c:	add	sp, sp, #12
   18620:	pop	{r4, r5, r6, r7, pc}
   18624:	push	{r4, r5, r6, lr}
   18628:	subs	r4, r2, #0
   1862c:	mov	r6, r0
   18630:	mov	r5, r1
   18634:	beq	1864c <__assert_fail@plt+0x7288>
   18638:	mov	r1, r4
   1863c:	mvn	r0, #0
   18640:	bl	1875c <__assert_fail@plt+0x7398>
   18644:	cmp	r0, r5
   18648:	bcc	1865c <__assert_fail@plt+0x7298>
   1864c:	mul	r1, r5, r4
   18650:	mov	r0, r6
   18654:	pop	{r4, r5, r6, lr}
   18658:	b	18084 <__assert_fail@plt+0x6cc0>
   1865c:	bl	11268 <__errno_location@plt>
   18660:	mov	r3, #12
   18664:	str	r3, [r0]
   18668:	mov	r0, #0
   1866c:	pop	{r4, r5, r6, pc}
   18670:	mov	r2, #3
   18674:	mov	r1, #0
   18678:	b	182c4 <__assert_fail@plt+0x6f00>
   1867c:	push	{lr}		; (str lr, [sp, #-4]!)
   18680:	sub	sp, sp, #268	; 0x10c
   18684:	ldr	r2, [pc, #64]	; 186cc <__assert_fail@plt+0x7308>
   18688:	add	r1, sp, #4
   1868c:	bl	186d8 <__assert_fail@plt+0x7314>
   18690:	cmp	r0, #0
   18694:	movne	r0, #0
   18698:	bne	186c4 <__assert_fail@plt+0x7300>
   1869c:	ldr	r1, [pc, #44]	; 186d0 <__assert_fail@plt+0x730c>
   186a0:	add	r0, sp, #4
   186a4:	bl	110a0 <strcmp@plt>
   186a8:	cmp	r0, #0
   186ac:	beq	186c4 <__assert_fail@plt+0x7300>
   186b0:	ldr	r1, [pc, #28]	; 186d4 <__assert_fail@plt+0x7310>
   186b4:	add	r0, sp, #4
   186b8:	bl	110a0 <strcmp@plt>
   186bc:	adds	r0, r0, #0
   186c0:	movne	r0, #1
   186c4:	add	sp, sp, #268	; 0x10c
   186c8:	pop	{pc}		; (ldr pc, [sp], #4)
   186cc:	andeq	r0, r0, r1, lsl #2
   186d0:	andeq	sl, r1, ip, lsr r4
   186d4:	andeq	sl, r1, lr, lsr r4
   186d8:	push	{r4, r5, r6, lr}
   186dc:	mov	r5, r1
   186e0:	mov	r1, #0
   186e4:	mov	r4, r2
   186e8:	bl	112d4 <setlocale@plt>
   186ec:	subs	r6, r0, #0
   186f0:	bne	18704 <__assert_fail@plt+0x7340>
   186f4:	cmp	r4, #0
   186f8:	strbne	r6, [r5]
   186fc:	mov	r0, #22
   18700:	pop	{r4, r5, r6, pc}
   18704:	bl	11238 <strlen@plt>
   18708:	cmp	r4, r0
   1870c:	bls	18728 <__assert_fail@plt+0x7364>
   18710:	add	r2, r0, #1
   18714:	mov	r1, r6
   18718:	mov	r0, r5
   1871c:	bl	110f4 <memcpy@plt>
   18720:	mov	r0, #0
   18724:	pop	{r4, r5, r6, pc}
   18728:	cmp	r4, #0
   1872c:	beq	1874c <__assert_fail@plt+0x7388>
   18730:	sub	r4, r4, #1
   18734:	mov	r2, r4
   18738:	mov	r1, r6
   1873c:	mov	r0, r5
   18740:	bl	110f4 <memcpy@plt>
   18744:	mov	r3, #0
   18748:	strb	r3, [r5, r4]
   1874c:	mov	r0, #34	; 0x22
   18750:	pop	{r4, r5, r6, pc}
   18754:	mov	r1, #0
   18758:	b	112d4 <setlocale@plt>
   1875c:	subs	r2, r1, #1
   18760:	bxeq	lr
   18764:	bcc	1893c <__assert_fail@plt+0x7578>
   18768:	cmp	r0, r1
   1876c:	bls	18920 <__assert_fail@plt+0x755c>
   18770:	tst	r1, r2
   18774:	beq	1892c <__assert_fail@plt+0x7568>
   18778:	clz	r3, r0
   1877c:	clz	r2, r1
   18780:	sub	r3, r2, r3
   18784:	rsbs	r3, r3, #31
   18788:	addne	r3, r3, r3, lsl #1
   1878c:	mov	r2, #0
   18790:	addne	pc, pc, r3, lsl #2
   18794:	nop			; (mov r0, r0)
   18798:	cmp	r0, r1, lsl #31
   1879c:	adc	r2, r2, r2
   187a0:	subcs	r0, r0, r1, lsl #31
   187a4:	cmp	r0, r1, lsl #30
   187a8:	adc	r2, r2, r2
   187ac:	subcs	r0, r0, r1, lsl #30
   187b0:	cmp	r0, r1, lsl #29
   187b4:	adc	r2, r2, r2
   187b8:	subcs	r0, r0, r1, lsl #29
   187bc:	cmp	r0, r1, lsl #28
   187c0:	adc	r2, r2, r2
   187c4:	subcs	r0, r0, r1, lsl #28
   187c8:	cmp	r0, r1, lsl #27
   187cc:	adc	r2, r2, r2
   187d0:	subcs	r0, r0, r1, lsl #27
   187d4:	cmp	r0, r1, lsl #26
   187d8:	adc	r2, r2, r2
   187dc:	subcs	r0, r0, r1, lsl #26
   187e0:	cmp	r0, r1, lsl #25
   187e4:	adc	r2, r2, r2
   187e8:	subcs	r0, r0, r1, lsl #25
   187ec:	cmp	r0, r1, lsl #24
   187f0:	adc	r2, r2, r2
   187f4:	subcs	r0, r0, r1, lsl #24
   187f8:	cmp	r0, r1, lsl #23
   187fc:	adc	r2, r2, r2
   18800:	subcs	r0, r0, r1, lsl #23
   18804:	cmp	r0, r1, lsl #22
   18808:	adc	r2, r2, r2
   1880c:	subcs	r0, r0, r1, lsl #22
   18810:	cmp	r0, r1, lsl #21
   18814:	adc	r2, r2, r2
   18818:	subcs	r0, r0, r1, lsl #21
   1881c:	cmp	r0, r1, lsl #20
   18820:	adc	r2, r2, r2
   18824:	subcs	r0, r0, r1, lsl #20
   18828:	cmp	r0, r1, lsl #19
   1882c:	adc	r2, r2, r2
   18830:	subcs	r0, r0, r1, lsl #19
   18834:	cmp	r0, r1, lsl #18
   18838:	adc	r2, r2, r2
   1883c:	subcs	r0, r0, r1, lsl #18
   18840:	cmp	r0, r1, lsl #17
   18844:	adc	r2, r2, r2
   18848:	subcs	r0, r0, r1, lsl #17
   1884c:	cmp	r0, r1, lsl #16
   18850:	adc	r2, r2, r2
   18854:	subcs	r0, r0, r1, lsl #16
   18858:	cmp	r0, r1, lsl #15
   1885c:	adc	r2, r2, r2
   18860:	subcs	r0, r0, r1, lsl #15
   18864:	cmp	r0, r1, lsl #14
   18868:	adc	r2, r2, r2
   1886c:	subcs	r0, r0, r1, lsl #14
   18870:	cmp	r0, r1, lsl #13
   18874:	adc	r2, r2, r2
   18878:	subcs	r0, r0, r1, lsl #13
   1887c:	cmp	r0, r1, lsl #12
   18880:	adc	r2, r2, r2
   18884:	subcs	r0, r0, r1, lsl #12
   18888:	cmp	r0, r1, lsl #11
   1888c:	adc	r2, r2, r2
   18890:	subcs	r0, r0, r1, lsl #11
   18894:	cmp	r0, r1, lsl #10
   18898:	adc	r2, r2, r2
   1889c:	subcs	r0, r0, r1, lsl #10
   188a0:	cmp	r0, r1, lsl #9
   188a4:	adc	r2, r2, r2
   188a8:	subcs	r0, r0, r1, lsl #9
   188ac:	cmp	r0, r1, lsl #8
   188b0:	adc	r2, r2, r2
   188b4:	subcs	r0, r0, r1, lsl #8
   188b8:	cmp	r0, r1, lsl #7
   188bc:	adc	r2, r2, r2
   188c0:	subcs	r0, r0, r1, lsl #7
   188c4:	cmp	r0, r1, lsl #6
   188c8:	adc	r2, r2, r2
   188cc:	subcs	r0, r0, r1, lsl #6
   188d0:	cmp	r0, r1, lsl #5
   188d4:	adc	r2, r2, r2
   188d8:	subcs	r0, r0, r1, lsl #5
   188dc:	cmp	r0, r1, lsl #4
   188e0:	adc	r2, r2, r2
   188e4:	subcs	r0, r0, r1, lsl #4
   188e8:	cmp	r0, r1, lsl #3
   188ec:	adc	r2, r2, r2
   188f0:	subcs	r0, r0, r1, lsl #3
   188f4:	cmp	r0, r1, lsl #2
   188f8:	adc	r2, r2, r2
   188fc:	subcs	r0, r0, r1, lsl #2
   18900:	cmp	r0, r1, lsl #1
   18904:	adc	r2, r2, r2
   18908:	subcs	r0, r0, r1, lsl #1
   1890c:	cmp	r0, r1
   18910:	adc	r2, r2, r2
   18914:	subcs	r0, r0, r1
   18918:	mov	r0, r2
   1891c:	bx	lr
   18920:	moveq	r0, #1
   18924:	movne	r0, #0
   18928:	bx	lr
   1892c:	clz	r2, r1
   18930:	rsb	r2, r2, #31
   18934:	lsr	r0, r0, r2
   18938:	bx	lr
   1893c:	cmp	r0, #0
   18940:	mvnne	r0, #0
   18944:	b	18be4 <__assert_fail@plt+0x7820>
   18948:	cmp	r1, #0
   1894c:	beq	1893c <__assert_fail@plt+0x7578>
   18950:	push	{r0, r1, lr}
   18954:	bl	1875c <__assert_fail@plt+0x7398>
   18958:	pop	{r1, r2, lr}
   1895c:	mul	r3, r2, r0
   18960:	sub	r1, r1, r3
   18964:	bx	lr
   18968:	cmp	r1, #0
   1896c:	beq	18b78 <__assert_fail@plt+0x77b4>
   18970:	eor	ip, r0, r1
   18974:	rsbmi	r1, r1, #0
   18978:	subs	r2, r1, #1
   1897c:	beq	18b44 <__assert_fail@plt+0x7780>
   18980:	movs	r3, r0
   18984:	rsbmi	r3, r0, #0
   18988:	cmp	r3, r1
   1898c:	bls	18b50 <__assert_fail@plt+0x778c>
   18990:	tst	r1, r2
   18994:	beq	18b60 <__assert_fail@plt+0x779c>
   18998:	clz	r2, r3
   1899c:	clz	r0, r1
   189a0:	sub	r2, r0, r2
   189a4:	rsbs	r2, r2, #31
   189a8:	addne	r2, r2, r2, lsl #1
   189ac:	mov	r0, #0
   189b0:	addne	pc, pc, r2, lsl #2
   189b4:	nop			; (mov r0, r0)
   189b8:	cmp	r3, r1, lsl #31
   189bc:	adc	r0, r0, r0
   189c0:	subcs	r3, r3, r1, lsl #31
   189c4:	cmp	r3, r1, lsl #30
   189c8:	adc	r0, r0, r0
   189cc:	subcs	r3, r3, r1, lsl #30
   189d0:	cmp	r3, r1, lsl #29
   189d4:	adc	r0, r0, r0
   189d8:	subcs	r3, r3, r1, lsl #29
   189dc:	cmp	r3, r1, lsl #28
   189e0:	adc	r0, r0, r0
   189e4:	subcs	r3, r3, r1, lsl #28
   189e8:	cmp	r3, r1, lsl #27
   189ec:	adc	r0, r0, r0
   189f0:	subcs	r3, r3, r1, lsl #27
   189f4:	cmp	r3, r1, lsl #26
   189f8:	adc	r0, r0, r0
   189fc:	subcs	r3, r3, r1, lsl #26
   18a00:	cmp	r3, r1, lsl #25
   18a04:	adc	r0, r0, r0
   18a08:	subcs	r3, r3, r1, lsl #25
   18a0c:	cmp	r3, r1, lsl #24
   18a10:	adc	r0, r0, r0
   18a14:	subcs	r3, r3, r1, lsl #24
   18a18:	cmp	r3, r1, lsl #23
   18a1c:	adc	r0, r0, r0
   18a20:	subcs	r3, r3, r1, lsl #23
   18a24:	cmp	r3, r1, lsl #22
   18a28:	adc	r0, r0, r0
   18a2c:	subcs	r3, r3, r1, lsl #22
   18a30:	cmp	r3, r1, lsl #21
   18a34:	adc	r0, r0, r0
   18a38:	subcs	r3, r3, r1, lsl #21
   18a3c:	cmp	r3, r1, lsl #20
   18a40:	adc	r0, r0, r0
   18a44:	subcs	r3, r3, r1, lsl #20
   18a48:	cmp	r3, r1, lsl #19
   18a4c:	adc	r0, r0, r0
   18a50:	subcs	r3, r3, r1, lsl #19
   18a54:	cmp	r3, r1, lsl #18
   18a58:	adc	r0, r0, r0
   18a5c:	subcs	r3, r3, r1, lsl #18
   18a60:	cmp	r3, r1, lsl #17
   18a64:	adc	r0, r0, r0
   18a68:	subcs	r3, r3, r1, lsl #17
   18a6c:	cmp	r3, r1, lsl #16
   18a70:	adc	r0, r0, r0
   18a74:	subcs	r3, r3, r1, lsl #16
   18a78:	cmp	r3, r1, lsl #15
   18a7c:	adc	r0, r0, r0
   18a80:	subcs	r3, r3, r1, lsl #15
   18a84:	cmp	r3, r1, lsl #14
   18a88:	adc	r0, r0, r0
   18a8c:	subcs	r3, r3, r1, lsl #14
   18a90:	cmp	r3, r1, lsl #13
   18a94:	adc	r0, r0, r0
   18a98:	subcs	r3, r3, r1, lsl #13
   18a9c:	cmp	r3, r1, lsl #12
   18aa0:	adc	r0, r0, r0
   18aa4:	subcs	r3, r3, r1, lsl #12
   18aa8:	cmp	r3, r1, lsl #11
   18aac:	adc	r0, r0, r0
   18ab0:	subcs	r3, r3, r1, lsl #11
   18ab4:	cmp	r3, r1, lsl #10
   18ab8:	adc	r0, r0, r0
   18abc:	subcs	r3, r3, r1, lsl #10
   18ac0:	cmp	r3, r1, lsl #9
   18ac4:	adc	r0, r0, r0
   18ac8:	subcs	r3, r3, r1, lsl #9
   18acc:	cmp	r3, r1, lsl #8
   18ad0:	adc	r0, r0, r0
   18ad4:	subcs	r3, r3, r1, lsl #8
   18ad8:	cmp	r3, r1, lsl #7
   18adc:	adc	r0, r0, r0
   18ae0:	subcs	r3, r3, r1, lsl #7
   18ae4:	cmp	r3, r1, lsl #6
   18ae8:	adc	r0, r0, r0
   18aec:	subcs	r3, r3, r1, lsl #6
   18af0:	cmp	r3, r1, lsl #5
   18af4:	adc	r0, r0, r0
   18af8:	subcs	r3, r3, r1, lsl #5
   18afc:	cmp	r3, r1, lsl #4
   18b00:	adc	r0, r0, r0
   18b04:	subcs	r3, r3, r1, lsl #4
   18b08:	cmp	r3, r1, lsl #3
   18b0c:	adc	r0, r0, r0
   18b10:	subcs	r3, r3, r1, lsl #3
   18b14:	cmp	r3, r1, lsl #2
   18b18:	adc	r0, r0, r0
   18b1c:	subcs	r3, r3, r1, lsl #2
   18b20:	cmp	r3, r1, lsl #1
   18b24:	adc	r0, r0, r0
   18b28:	subcs	r3, r3, r1, lsl #1
   18b2c:	cmp	r3, r1
   18b30:	adc	r0, r0, r0
   18b34:	subcs	r3, r3, r1
   18b38:	cmp	ip, #0
   18b3c:	rsbmi	r0, r0, #0
   18b40:	bx	lr
   18b44:	teq	ip, r0
   18b48:	rsbmi	r0, r0, #0
   18b4c:	bx	lr
   18b50:	movcc	r0, #0
   18b54:	asreq	r0, ip, #31
   18b58:	orreq	r0, r0, #1
   18b5c:	bx	lr
   18b60:	clz	r2, r1
   18b64:	rsb	r2, r2, #31
   18b68:	cmp	ip, #0
   18b6c:	lsr	r0, r3, r2
   18b70:	rsbmi	r0, r0, #0
   18b74:	bx	lr
   18b78:	cmp	r0, #0
   18b7c:	mvngt	r0, #-2147483648	; 0x80000000
   18b80:	movlt	r0, #-2147483648	; 0x80000000
   18b84:	b	18be4 <__assert_fail@plt+0x7820>
   18b88:	cmp	r1, #0
   18b8c:	beq	18b78 <__assert_fail@plt+0x77b4>
   18b90:	push	{r0, r1, lr}
   18b94:	bl	18970 <__assert_fail@plt+0x75ac>
   18b98:	pop	{r1, r2, lr}
   18b9c:	mul	r3, r2, r0
   18ba0:	sub	r1, r1, r3
   18ba4:	bx	lr
   18ba8:	cmp	r3, #0
   18bac:	cmpeq	r2, #0
   18bb0:	bne	18bc8 <__assert_fail@plt+0x7804>
   18bb4:	cmp	r1, #0
   18bb8:	cmpeq	r0, #0
   18bbc:	mvnne	r1, #0
   18bc0:	mvnne	r0, #0
   18bc4:	b	18be4 <__assert_fail@plt+0x7820>
   18bc8:	sub	sp, sp, #8
   18bcc:	push	{sp, lr}
   18bd0:	bl	18bf4 <__assert_fail@plt+0x7830>
   18bd4:	ldr	lr, [sp, #4]
   18bd8:	add	sp, sp, #8
   18bdc:	pop	{r2, r3}
   18be0:	bx	lr
   18be4:	push	{r1, lr}
   18be8:	mov	r0, #8
   18bec:	bl	11088 <raise@plt>
   18bf0:	pop	{r1, pc}
   18bf4:	cmp	r1, r3
   18bf8:	push	{r4, r5, r6, r7, r8, r9, lr}
   18bfc:	cmpeq	r0, r2
   18c00:	mov	r4, r0
   18c04:	mov	r5, r1
   18c08:	ldr	r9, [sp, #28]
   18c0c:	movcc	r0, #0
   18c10:	movcc	r1, #0
   18c14:	bcc	18d0c <__assert_fail@plt+0x7948>
   18c18:	cmp	r3, #0
   18c1c:	clzeq	ip, r2
   18c20:	clzne	ip, r3
   18c24:	addeq	ip, ip, #32
   18c28:	cmp	r5, #0
   18c2c:	clzeq	r1, r4
   18c30:	addeq	r1, r1, #32
   18c34:	clzne	r1, r5
   18c38:	sub	ip, ip, r1
   18c3c:	sub	lr, ip, #32
   18c40:	lsl	r7, r3, ip
   18c44:	rsb	r8, ip, #32
   18c48:	orr	r7, r7, r2, lsl lr
   18c4c:	orr	r7, r7, r2, lsr r8
   18c50:	lsl	r6, r2, ip
   18c54:	cmp	r5, r7
   18c58:	cmpeq	r4, r6
   18c5c:	movcc	r0, #0
   18c60:	movcc	r1, #0
   18c64:	bcc	18c80 <__assert_fail@plt+0x78bc>
   18c68:	mov	r3, #1
   18c6c:	subs	r4, r4, r6
   18c70:	lsl	r1, r3, lr
   18c74:	lsl	r0, r3, ip
   18c78:	orr	r1, r1, r3, lsr r8
   18c7c:	sbc	r5, r5, r7
   18c80:	cmp	ip, #0
   18c84:	beq	18d0c <__assert_fail@plt+0x7948>
   18c88:	lsrs	r3, r7, #1
   18c8c:	rrx	r2, r6
   18c90:	mov	r6, ip
   18c94:	b	18cb8 <__assert_fail@plt+0x78f4>
   18c98:	subs	r4, r4, r2
   18c9c:	sbc	r5, r5, r3
   18ca0:	adds	r4, r4, r4
   18ca4:	adc	r5, r5, r5
   18ca8:	adds	r4, r4, #1
   18cac:	adc	r5, r5, #0
   18cb0:	subs	r6, r6, #1
   18cb4:	beq	18cd4 <__assert_fail@plt+0x7910>
   18cb8:	cmp	r5, r3
   18cbc:	cmpeq	r4, r2
   18cc0:	bcs	18c98 <__assert_fail@plt+0x78d4>
   18cc4:	adds	r4, r4, r4
   18cc8:	adc	r5, r5, r5
   18ccc:	subs	r6, r6, #1
   18cd0:	bne	18cb8 <__assert_fail@plt+0x78f4>
   18cd4:	lsr	r6, r4, ip
   18cd8:	lsr	r7, r5, ip
   18cdc:	orr	r6, r6, r5, lsl r8
   18ce0:	adds	r2, r0, r4
   18ce4:	orr	r6, r6, r5, lsr lr
   18ce8:	adc	r3, r1, r5
   18cec:	lsl	r1, r7, ip
   18cf0:	orr	r1, r1, r6, lsl lr
   18cf4:	lsl	r0, r6, ip
   18cf8:	orr	r1, r1, r6, lsr r8
   18cfc:	subs	r0, r2, r0
   18d00:	mov	r4, r6
   18d04:	mov	r5, r7
   18d08:	sbc	r1, r3, r1
   18d0c:	cmp	r9, #0
   18d10:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18d14:	strd	r4, [r9]
   18d18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18d1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d20:	mov	r7, r0
   18d24:	ldr	r6, [pc, #72]	; 18d74 <__assert_fail@plt+0x79b0>
   18d28:	ldr	r5, [pc, #72]	; 18d78 <__assert_fail@plt+0x79b4>
   18d2c:	add	r6, pc, r6
   18d30:	add	r5, pc, r5
   18d34:	sub	r6, r6, r5
   18d38:	mov	r8, r1
   18d3c:	mov	r9, r2
   18d40:	bl	11038 <fstatfs64@plt-0x20>
   18d44:	asrs	r6, r6, #2
   18d48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d4c:	mov	r4, #0
   18d50:	add	r4, r4, #1
   18d54:	ldr	r3, [r5], #4
   18d58:	mov	r2, r9
   18d5c:	mov	r1, r8
   18d60:	mov	r0, r7
   18d64:	blx	r3
   18d68:	cmp	r6, r4
   18d6c:	bne	18d50 <__assert_fail@plt+0x798c>
   18d70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d74:	ldrdeq	r2, [r1], -ip
   18d78:	ldrdeq	r2, [r1], -r4
   18d7c:	bx	lr
   18d80:	ldr	r3, [pc, #12]	; 18d94 <__assert_fail@plt+0x79d0>
   18d84:	mov	r1, #0
   18d88:	add	r3, pc, r3
   18d8c:	ldr	r2, [r3]
   18d90:	b	11274 <__cxa_atexit@plt>
   18d94:	andeq	r2, r1, ip, lsr #7
   18d98:	mov	r2, r1
   18d9c:	mov	r1, r0
   18da0:	mov	r0, #3
   18da4:	b	11358 <__xstat64@plt>
   18da8:	mov	r2, r1
   18dac:	mov	r1, r0
   18db0:	mov	r0, #3
   18db4:	b	1116c <__fxstat64@plt>
   18db8:	mov	r2, r1
   18dbc:	mov	r1, r0
   18dc0:	mov	r0, #3
   18dc4:	b	11394 <__lxstat64@plt>
   18dc8:	push	{lr}		; (str lr, [sp, #-4]!)
   18dcc:	sub	sp, sp, #12
   18dd0:	str	r3, [sp]
   18dd4:	mov	r3, r2
   18dd8:	mov	r2, r1
   18ddc:	mov	r1, r0
   18de0:	mov	r0, #3
   18de4:	bl	11154 <__fxstatat64@plt>
   18de8:	add	sp, sp, #12
   18dec:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018df0 <.fini>:
   18df0:	push	{r3, lr}
   18df4:	pop	{r3, pc}
