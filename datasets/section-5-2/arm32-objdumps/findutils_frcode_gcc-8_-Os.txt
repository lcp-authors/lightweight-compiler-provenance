
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	1122c <__assert_fail@plt+0x4e0>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r4, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #20, 20	; 0x14000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #20, 20	; 0x14000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <strtol@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #20, 20	; 0x14000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <printf@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #20, 20	; 0x14000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <fflush@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #20, 20	; 0x14000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <free@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #20, 20	; 0x14000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <ferror@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #20, 20	; 0x14000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <_exit@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #20, 20	; 0x14000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <memcpy@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #20, 20	; 0x14000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <mbsinit@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #20, 20	; 0x14000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <memcmp@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #20, 20	; 0x14000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <dcgettext@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #20, 20	; 0x14000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <realloc@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #20, 20	; 0x14000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <iswprint@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #20, 20	; 0x14000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fwrite@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #20, 20	; 0x14000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <lseek64@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #20, 20	; 0x14000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <__ctype_get_mb_cur_max@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #20, 20	; 0x14000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <__fpending@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #20, 20	; 0x14000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <mbrtowc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #20, 20	; 0x14000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <error@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #20, 20	; 0x14000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <malloc@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #20, 20	; 0x14000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <__libc_start_main@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #20, 20	; 0x14000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <__freading@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <__gmon_start__@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <getopt_long@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <__ctype_b_loc@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <exit@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <strlen@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <fprintf@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <__errno_location@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <__cxa_atexit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <memset@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fileno@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <fclose@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <fseeko64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <setlocale@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <strrchr@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

00010cf8 <nl_langinfo@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #928]!	; 0x3a0

00010d04 <fputc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #920]!	; 0x398

00010d10 <putc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #912]!	; 0x390

00010d1c <getdelim@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #904]!	; 0x388

00010d28 <fputs@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #896]!	; 0x380

00010d34 <strncmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #888]!	; 0x378

00010d40 <abort@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #880]!	; 0x370

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #872]!	; 0x368

Disassembly of section .text:

00010d58 <.text>:
   10d58:	push	{r4, lr}
   10d5c:	bl	10c98 <__errno_location@plt>
   10d60:	mov	r3, #12
   10d64:	str	r3, [r0]
   10d68:	mov	r0, #0
   10d6c:	pop	{r4, pc}
   10d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d74:	mov	r9, r0
   10d78:	sub	sp, sp, #36	; 0x24
   10d7c:	mov	sl, r1
   10d80:	ldr	r0, [r1]
   10d84:	cmp	r0, #0
   10d88:	ldreq	r0, [pc, #1036]	; 1119c <__assert_fail@plt+0x450>
   10d8c:	bl	1159c <__assert_fail@plt+0x850>
   10d90:	ldr	r0, [pc, #1032]	; 111a0 <__assert_fail@plt+0x454>
   10d94:	bl	137a4 <__assert_fail@plt+0x2a58>
   10d98:	subs	r7, r0, #0
   10d9c:	beq	10dc8 <__assert_fail@plt+0x7c>
   10da0:	bl	10c98 <__errno_location@plt>
   10da4:	ldr	r1, [pc, #1016]	; 111a4 <__assert_fail@plt+0x458>
   10da8:	mov	r2, #5
   10dac:	ldr	r4, [r0]
   10db0:	mov	r0, #0
   10db4:	bl	10bc0 <dcgettext@plt>
   10db8:	mov	r2, r0
   10dbc:	mov	r1, r4
   10dc0:	mov	r0, #1
   10dc4:	bl	10c20 <error@plt>
   10dc8:	movw	r4, #1026	; 0x402
   10dcc:	ldr	fp, [pc, #980]	; 111a8 <__assert_fail@plt+0x45c>
   10dd0:	mov	r6, r7
   10dd4:	mov	r0, r4
   10dd8:	mov	r8, #10
   10ddc:	str	r4, [sp, #24]
   10de0:	bl	13024 <__assert_fail@plt+0x22d8>
   10de4:	str	r0, [sp, #20]
   10de8:	mov	r0, r4
   10dec:	bl	13024 <__assert_fail@plt+0x22d8>
   10df0:	mov	r5, r0
   10df4:	strb	r7, [r0]
   10df8:	mov	r4, #0
   10dfc:	ldr	r3, [pc, #936]	; 111ac <__assert_fail@plt+0x460>
   10e00:	mov	r1, sl
   10e04:	mov	r0, r9
   10e08:	str	r4, [sp]
   10e0c:	ldr	r2, [pc, #924]	; 111b0 <__assert_fail@plt+0x464>
   10e10:	bl	10c5c <getopt_long@plt>
   10e14:	cmn	r0, #1
   10e18:	bne	10e50 <__assert_fail@plt+0x104>
   10e1c:	ldr	r3, [pc, #912]	; 111b4 <__assert_fail@plt+0x468>
   10e20:	ldr	r3, [r3]
   10e24:	cmp	r3, r9
   10e28:	beq	10f90 <__assert_fail@plt+0x244>
   10e2c:	mov	r2, #5
   10e30:	ldr	r1, [pc, #896]	; 111b8 <__assert_fail@plt+0x46c>
   10e34:	mov	r0, #0
   10e38:	bl	10bc0 <dcgettext@plt>
   10e3c:	mov	r1, #0
   10e40:	mov	r2, r0
   10e44:	mov	r0, r1
   10e48:	bl	10c20 <error@plt>
   10e4c:	b	10e68 <__assert_fail@plt+0x11c>
   10e50:	cmp	r0, #83	; 0x53
   10e54:	beq	10e94 <__assert_fail@plt+0x148>
   10e58:	bgt	10e70 <__assert_fail@plt+0x124>
   10e5c:	cmp	r0, #48	; 0x30
   10e60:	mov	r8, #0
   10e64:	beq	10dfc <__assert_fail@plt+0xb0>
   10e68:	mov	r0, #1
   10e6c:	b	10f8c <__assert_fail@plt+0x240>
   10e70:	cmp	r0, #104	; 0x68
   10e74:	beq	10f88 <__assert_fail@plt+0x23c>
   10e78:	cmp	r0, #118	; 0x76
   10e7c:	bne	10e68 <__assert_fail@plt+0x11c>
   10e80:	ldr	r0, [pc, #788]	; 1119c <__assert_fail@plt+0x450>
   10e84:	bl	1139c <__assert_fail@plt+0x650>
   10e88:	mov	r0, #0
   10e8c:	add	sp, sp, #36	; 0x24
   10e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e94:	bl	10c98 <__errno_location@plt>
   10e98:	ldr	r6, [fp]
   10e9c:	mov	r3, r0
   10ea0:	mov	r2, #10
   10ea4:	add	r1, sp, #28
   10ea8:	str	r4, [r3]
   10eac:	str	r3, [sp, #12]
   10eb0:	mov	r0, r6
   10eb4:	bl	10b54 <strtol@plt>
   10eb8:	subs	r7, r0, #0
   10ebc:	ldr	r3, [sp, #12]
   10ec0:	bne	10eec <__assert_fail@plt+0x1a0>
   10ec4:	ldr	r2, [fp]
   10ec8:	ldr	r1, [sp, #28]
   10ecc:	cmp	r1, r2
   10ed0:	bne	10eec <__assert_fail@plt+0x1a0>
   10ed4:	mov	r2, #5
   10ed8:	ldr	r1, [pc, #732]	; 111bc <__assert_fail@plt+0x470>
   10edc:	bl	10bc0 <dcgettext@plt>
   10ee0:	mov	r2, r0
   10ee4:	mov	r1, r7
   10ee8:	b	10dc0 <__assert_fail@plt+0x74>
   10eec:	sub	r2, r7, #-2147483647	; 0x80000001
   10ef0:	cmn	r2, #3
   10ef4:	bls	10f28 <__assert_fail@plt+0x1dc>
   10ef8:	ldr	r3, [r3]
   10efc:	cmp	r3, #0
   10f00:	beq	10f28 <__assert_fail@plt+0x1dc>
   10f04:	mov	r2, #5
   10f08:	ldr	r1, [pc, #688]	; 111c0 <__assert_fail@plt+0x474>
   10f0c:	mov	r0, #0
   10f10:	bl	10bc0 <dcgettext@plt>
   10f14:	mov	r3, r6
   10f18:	mov	r2, r0
   10f1c:	mov	r1, #0
   10f20:	mov	r0, #1
   10f24:	bl	10c20 <error@plt>
   10f28:	ldr	r3, [sp, #28]
   10f2c:	ldrb	r4, [r3]
   10f30:	cmp	r4, #0
   10f34:	beq	10f64 <__assert_fail@plt+0x218>
   10f38:	mov	r2, #5
   10f3c:	ldr	r1, [pc, #640]	; 111c4 <__assert_fail@plt+0x478>
   10f40:	mov	r0, #0
   10f44:	bl	10bc0 <dcgettext@plt>
   10f48:	ldr	r3, [sp, #28]
   10f4c:	mov	r2, r0
   10f50:	mov	r1, #0
   10f54:	mov	r0, #1
   10f58:	str	r3, [sp]
   10f5c:	mov	r3, r6
   10f60:	bl	10c20 <error@plt>
   10f64:	mov	r6, #1
   10f68:	cmp	r7, r6
   10f6c:	bls	10df8 <__assert_fail@plt+0xac>
   10f70:	mov	r2, #5
   10f74:	ldr	r1, [pc, #588]	; 111c8 <__assert_fail@plt+0x47c>
   10f78:	mov	r0, r4
   10f7c:	bl	10bc0 <dcgettext@plt>
   10f80:	mov	r3, r7
   10f84:	b	10f18 <__assert_fail@plt+0x1cc>
   10f88:	mov	r0, #0
   10f8c:	bl	11310 <__assert_fail@plt+0x5c4>
   10f90:	ldr	r4, [pc, #564]	; 111cc <__assert_fail@plt+0x480>
   10f94:	cmp	r6, #0
   10f98:	ldr	r3, [r4]
   10f9c:	beq	10ffc <__assert_fail@plt+0x2b0>
   10fa0:	cmp	r7, #0
   10fa4:	mov	r1, r3
   10fa8:	movne	r0, #49	; 0x31
   10fac:	moveq	r0, #48	; 0x30
   10fb0:	bl	10d04 <fputc@plt>
   10fb4:	mov	r0, #0
   10fb8:	ldr	r1, [r4]
   10fbc:	bl	10d04 <fputc@plt>
   10fc0:	mov	r9, #0
   10fc4:	movw	sl, #1026	; 0x402
   10fc8:	ldr	r3, [pc, #512]	; 111d0 <__assert_fail@plt+0x484>
   10fcc:	mov	r2, r8
   10fd0:	add	r1, sp, #24
   10fd4:	add	r0, sp, #20
   10fd8:	ldr	r3, [r3]
   10fdc:	bl	10d1c <getdelim@plt>
   10fe0:	cmp	r0, #0
   10fe4:	bgt	11028 <__assert_fail@plt+0x2dc>
   10fe8:	ldr	r0, [sp, #20]
   10fec:	bl	133c0 <__assert_fail@plt+0x2674>
   10ff0:	mov	r0, r5
   10ff4:	bl	133c0 <__assert_fail@plt+0x2674>
   10ff8:	b	10e88 <__assert_fail@plt+0x13c>
   10ffc:	mov	r2, #10
   11000:	mov	r1, #1
   11004:	ldr	r0, [pc, #456]	; 111d4 <__assert_fail@plt+0x488>
   11008:	bl	10be4 <fwrite@plt>
   1100c:	cmp	r0, #10
   11010:	beq	10fc0 <__assert_fail@plt+0x274>
   11014:	bl	10c98 <__errno_location@plt>
   11018:	mov	r2, #5
   1101c:	ldr	r1, [pc, #436]	; 111d8 <__assert_fail@plt+0x48c>
   11020:	ldr	r4, [r0]
   11024:	b	10db0 <__assert_fail@plt+0x64>
   11028:	ldr	r3, [sp, #20]
   1102c:	sub	r0, r0, #1
   11030:	ldrb	r2, [r3, r0]
   11034:	cmp	r2, r8
   11038:	moveq	r2, #0
   1103c:	strbeq	r2, [r3, r0]
   11040:	beq	11064 <__assert_fail@plt+0x318>
   11044:	mov	r2, #5
   11048:	ldr	r1, [pc, #396]	; 111dc <__assert_fail@plt+0x490>
   1104c:	mov	r0, #0
   11050:	bl	10bc0 <dcgettext@plt>
   11054:	mov	r1, #0
   11058:	mov	r2, r0
   1105c:	mov	r0, r1
   11060:	bl	10c20 <error@plt>
   11064:	ldr	r3, [sp, #20]
   11068:	mov	r2, r5
   1106c:	sub	ip, r5, #-2147483647	; 0x80000001
   11070:	sub	r3, r3, #1
   11074:	mov	r7, r2
   11078:	ldrb	lr, [r3, #1]!
   1107c:	ldrb	r0, [r2], #1
   11080:	sub	r1, lr, r0
   11084:	cmp	r0, #0
   11088:	clz	r1, r1
   1108c:	lsr	r1, r1, #5
   11090:	moveq	r1, #0
   11094:	cmp	r1, #0
   11098:	beq	110a4 <__assert_fail@plt+0x358>
   1109c:	cmp	ip, r2
   110a0:	bne	11074 <__assert_fail@plt+0x328>
   110a4:	sub	r7, r7, r5
   110a8:	sub	fp, r7, r9
   110ac:	add	r2, fp, #32768	; 0x8000
   110b0:	cmp	r2, #65536	; 0x10000
   110b4:	rsbcs	fp, r9, #0
   110b8:	movcs	r7, #0
   110bc:	cmp	r6, #0
   110c0:	bne	1114c <__assert_fail@plt+0x400>
   110c4:	add	r2, fp, #127	; 0x7f
   110c8:	ldr	r1, [r4]
   110cc:	cmp	r2, #254	; 0xfe
   110d0:	bls	1113c <__assert_fail@plt+0x3f0>
   110d4:	mov	r0, #128	; 0x80
   110d8:	bl	10d10 <putc@plt>
   110dc:	cmn	r0, #1
   110e0:	bne	110e8 <__assert_fail@plt+0x39c>
   110e4:	bl	112e0 <__assert_fail@plt+0x594>
   110e8:	cmp	fp, #32768	; 0x8000
   110ec:	ldr	r6, [r4]
   110f0:	blt	11108 <__assert_fail@plt+0x3bc>
   110f4:	ldr	r3, [pc, #228]	; 111e0 <__assert_fail@plt+0x494>
   110f8:	mov	r2, #104	; 0x68
   110fc:	ldr	r1, [pc, #224]	; 111e4 <__assert_fail@plt+0x498>
   11100:	ldr	r0, [pc, #224]	; 111e8 <__assert_fail@plt+0x49c>
   11104:	bl	10d4c <__assert_fail@plt>
   11108:	cmn	fp, #32768	; 0x8000
   1110c:	bge	11124 <__assert_fail@plt+0x3d8>
   11110:	ldr	r3, [pc, #200]	; 111e0 <__assert_fail@plt+0x494>
   11114:	mov	r2, #105	; 0x69
   11118:	ldr	r1, [pc, #196]	; 111e4 <__assert_fail@plt+0x498>
   1111c:	ldr	r0, [pc, #200]	; 111ec <__assert_fail@plt+0x4a0>
   11120:	b	11104 <__assert_fail@plt+0x3b8>
   11124:	mov	r1, r6
   11128:	asr	r0, fp, #8
   1112c:	bl	10d10 <putc@plt>
   11130:	cmn	r0, #1
   11134:	beq	110e4 <__assert_fail@plt+0x398>
   11138:	mov	r1, r6
   1113c:	mov	r0, fp
   11140:	bl	10d10 <putc@plt>
   11144:	cmn	r0, #1
   11148:	beq	110e4 <__assert_fail@plt+0x398>
   1114c:	ldr	r0, [sp, #20]
   11150:	ldr	r1, [r4]
   11154:	add	r0, r0, r7
   11158:	bl	10d28 <fputs@plt>
   1115c:	cmn	r0, #1
   11160:	beq	110e4 <__assert_fail@plt+0x398>
   11164:	mov	r0, #0
   11168:	ldr	r1, [r4]
   1116c:	bl	10d10 <putc@plt>
   11170:	cmn	r0, #1
   11174:	beq	110e4 <__assert_fail@plt+0x398>
   11178:	ldr	r3, [sp, #20]
   1117c:	mov	r6, #0
   11180:	mov	r9, r7
   11184:	str	r5, [sp, #20]
   11188:	ldr	r2, [sp, #24]
   1118c:	str	sl, [sp, #24]
   11190:	mov	r5, r3
   11194:	mov	sl, r2
   11198:	b	10fc8 <__assert_fail@plt+0x27c>
   1119c:	andeq	r3, r1, sp, ror r8
   111a0:	andeq	r1, r1, r8, asr #9
   111a4:	andeq	r3, r1, r4, lsl #17
   111a8:	andeq	r5, r2, r8, lsr r1
   111ac:	andeq	r3, r1, r8, asr #15
   111b0:	andeq	r3, r1, sp, ror #18
   111b4:	andeq	r5, r2, r0, lsr #2
   111b8:	andeq	r3, r1, r3, ror r9
   111bc:	andeq	r3, r1, r7, lsr #17
   111c0:	andeq	r3, r1, r2, ror #17
   111c4:	andeq	r3, r1, r6, lsl r9
   111c8:	andeq	r3, r1, r2, asr #18
   111cc:	andeq	r5, r2, r4, lsr r1
   111d0:	andeq	r5, r2, r0, lsr r1
   111d4:	andeq	r3, r1, r8, lsl #16
   111d8:	andeq	r3, r1, r9, lsl #19
   111dc:	andeq	r3, r1, ip, lsr #19
   111e0:	andeq	r3, r1, r2, lsl r8
   111e4:	ldrdeq	r3, [r1], -r9
   111e8:	andeq	r3, r1, r2, ror #19
   111ec:	strdeq	r3, [r1], -r0
   111f0:	mov	fp, #0
   111f4:	mov	lr, #0
   111f8:	pop	{r1}		; (ldr r1, [sp], #4)
   111fc:	mov	r2, sp
   11200:	push	{r2}		; (str r2, [sp, #-4]!)
   11204:	push	{r0}		; (str r0, [sp, #-4]!)
   11208:	ldr	ip, [pc, #16]	; 11220 <__assert_fail@plt+0x4d4>
   1120c:	push	{ip}		; (str ip, [sp, #-4]!)
   11210:	ldr	r0, [pc, #12]	; 11224 <__assert_fail@plt+0x4d8>
   11214:	ldr	r3, [pc, #12]	; 11228 <__assert_fail@plt+0x4dc>
   11218:	bl	10c38 <__libc_start_main@plt>
   1121c:	bl	10d40 <abort@plt>
   11220:	andeq	r3, r1, r0, lsr #15
   11224:	andeq	r0, r1, r0, ror sp
   11228:	andeq	r3, r1, r0, asr #14
   1122c:	ldr	r3, [pc, #20]	; 11248 <__assert_fail@plt+0x4fc>
   11230:	ldr	r2, [pc, #20]	; 1124c <__assert_fail@plt+0x500>
   11234:	add	r3, pc, r3
   11238:	ldr	r2, [r3, r2]
   1123c:	cmp	r2, #0
   11240:	bxeq	lr
   11244:	b	10c50 <__gmon_start__@plt>
   11248:	andeq	r3, r1, r4, asr #27
   1124c:	andeq	r0, r0, r0, asr #1
   11250:	ldr	r0, [pc, #24]	; 11270 <__assert_fail@plt+0x524>
   11254:	ldr	r3, [pc, #24]	; 11274 <__assert_fail@plt+0x528>
   11258:	cmp	r3, r0
   1125c:	bxeq	lr
   11260:	ldr	r3, [pc, #16]	; 11278 <__assert_fail@plt+0x52c>
   11264:	cmp	r3, #0
   11268:	bxeq	lr
   1126c:	bx	r3
   11270:	andeq	r5, r2, r4, lsl r1
   11274:	andeq	r5, r2, r4, lsl r1
   11278:	andeq	r0, r0, r0
   1127c:	ldr	r0, [pc, #36]	; 112a8 <__assert_fail@plt+0x55c>
   11280:	ldr	r1, [pc, #36]	; 112ac <__assert_fail@plt+0x560>
   11284:	sub	r1, r1, r0
   11288:	asr	r1, r1, #2
   1128c:	add	r1, r1, r1, lsr #31
   11290:	asrs	r1, r1, #1
   11294:	bxeq	lr
   11298:	ldr	r3, [pc, #16]	; 112b0 <__assert_fail@plt+0x564>
   1129c:	cmp	r3, #0
   112a0:	bxeq	lr
   112a4:	bx	r3
   112a8:	andeq	r5, r2, r4, lsl r1
   112ac:	andeq	r5, r2, r4, lsl r1
   112b0:	andeq	r0, r0, r0
   112b4:	push	{r4, lr}
   112b8:	ldr	r4, [pc, #24]	; 112d8 <__assert_fail@plt+0x58c>
   112bc:	ldrb	r3, [r4]
   112c0:	cmp	r3, #0
   112c4:	popne	{r4, pc}
   112c8:	bl	11250 <__assert_fail@plt+0x504>
   112cc:	mov	r3, #1
   112d0:	strb	r3, [r4]
   112d4:	pop	{r4, pc}
   112d8:	andeq	r5, r2, ip, lsr r1
   112dc:	b	1127c <__assert_fail@plt+0x530>
   112e0:	push	{r4, lr}
   112e4:	bl	10c98 <__errno_location@plt>
   112e8:	ldr	r4, [r0]
   112ec:	mov	r2, #5
   112f0:	mov	r0, #0
   112f4:	ldr	r1, [pc, #16]	; 1130c <__assert_fail@plt+0x5c0>
   112f8:	bl	10bc0 <dcgettext@plt>
   112fc:	mov	r2, r0
   11300:	mov	r0, #1
   11304:	mov	r1, r4
   11308:	bl	10c20 <error@plt>
   1130c:	andeq	r3, r1, ip, lsl r8
   11310:	subs	r6, r0, #0
   11314:	push	{r7, lr}
   11318:	ldr	r4, [pc, #104]	; 11388 <__assert_fail@plt+0x63c>
   1131c:	beq	11350 <__assert_fail@plt+0x604>
   11320:	mov	r2, #5
   11324:	mov	r0, #0
   11328:	ldr	r3, [pc, #92]	; 1138c <__assert_fail@plt+0x640>
   1132c:	ldr	r1, [pc, #92]	; 11390 <__assert_fail@plt+0x644>
   11330:	ldr	r5, [r3]
   11334:	bl	10bc0 <dcgettext@plt>
   11338:	mov	r1, r0
   1133c:	ldr	r2, [r4]
   11340:	mov	r0, r5
   11344:	bl	10c8c <fprintf@plt>
   11348:	mov	r0, #1
   1134c:	bl	10c74 <exit@plt>
   11350:	ldr	r5, [pc, #60]	; 11394 <__assert_fail@plt+0x648>
   11354:	mov	r2, #5
   11358:	ldr	r1, [pc, #56]	; 11398 <__assert_fail@plt+0x64c>
   1135c:	ldr	r7, [r5]
   11360:	bl	10bc0 <dcgettext@plt>
   11364:	mov	r1, r0
   11368:	ldr	r2, [r4]
   1136c:	mov	r0, r7
   11370:	bl	10c8c <fprintf@plt>
   11374:	ldr	r1, [r4]
   11378:	ldr	r0, [r5]
   1137c:	bl	11440 <__assert_fail@plt+0x6f4>
   11380:	mov	r0, r6
   11384:	b	1134c <__assert_fail@plt+0x600>
   11388:	andeq	r5, r2, r8, asr #2
   1138c:	andeq	r5, r2, r8, lsr #2
   11390:	andeq	r3, r1, r8, lsr #16
   11394:	andeq	r5, r2, r4, lsr r1
   11398:	andeq	r3, r1, pc, asr #16
   1139c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   113a0:	mov	r5, r0
   113a4:	ldr	r3, [pc, #120]	; 11424 <__assert_fail@plt+0x6d8>
   113a8:	ldr	r0, [r3]
   113ac:	bl	13370 <__assert_fail@plt+0x2624>
   113b0:	ldr	r3, [pc, #112]	; 11428 <__assert_fail@plt+0x6dc>
   113b4:	mov	r2, #5
   113b8:	mov	r0, #0
   113bc:	ldr	r1, [pc, #104]	; 1142c <__assert_fail@plt+0x6e0>
   113c0:	ldr	r4, [r3]
   113c4:	ldr	r3, [pc, #100]	; 11430 <__assert_fail@plt+0x6e4>
   113c8:	ldr	r6, [r3]
   113cc:	bl	10bc0 <dcgettext@plt>
   113d0:	mov	r7, r0
   113d4:	mov	r2, #5
   113d8:	ldr	r1, [pc, #84]	; 11434 <__assert_fail@plt+0x6e8>
   113dc:	mov	r0, #0
   113e0:	bl	10bc0 <dcgettext@plt>
   113e4:	mov	r8, r0
   113e8:	mov	r2, #5
   113ec:	ldr	r1, [pc, #68]	; 11438 <__assert_fail@plt+0x6ec>
   113f0:	mov	r0, #0
   113f4:	bl	10bc0 <dcgettext@plt>
   113f8:	ldr	r2, [pc, #60]	; 1143c <__assert_fail@plt+0x6f0>
   113fc:	mov	r3, #0
   11400:	mov	r1, r5
   11404:	stm	sp, {r7, r8}
   11408:	str	r0, [sp, #8]
   1140c:	mov	r0, r4
   11410:	str	r3, [sp, #12]
   11414:	mov	r3, r6
   11418:	bl	12f74 <__assert_fail@plt+0x2228>
   1141c:	add	sp, sp, #16
   11420:	pop	{r4, r5, r6, r7, r8, pc}
   11424:	andeq	r5, r2, r8, lsr #2
   11428:	andeq	r5, r2, r4, lsr r1
   1142c:	andeq	r3, r1, r0, lsl sl
   11430:	andeq	r5, r2, ip, asr #1
   11434:	andeq	r3, r1, pc, lsl sl
   11438:	andeq	r3, r1, lr, lsr #20
   1143c:	andeq	r3, r1, fp, lsr sl
   11440:	push	{r4, r5, lr}
   11444:	mov	r2, #5
   11448:	sub	sp, sp, #20
   1144c:	mov	r4, r0
   11450:	mov	r5, r1
   11454:	mov	r0, #0
   11458:	ldr	r1, [pc, #52]	; 11494 <__assert_fail@plt+0x748>
   1145c:	bl	10bc0 <dcgettext@plt>
   11460:	ldr	r3, [pc, #48]	; 11498 <__assert_fail@plt+0x74c>
   11464:	mov	r1, r0
   11468:	mov	r0, r4
   1146c:	ldr	r2, [pc, #40]	; 1149c <__assert_fail@plt+0x750>
   11470:	str	r3, [sp, #8]
   11474:	ldr	r3, [pc, #36]	; 114a0 <__assert_fail@plt+0x754>
   11478:	str	r3, [sp, #4]
   1147c:	ldr	r3, [pc, #32]	; 114a4 <__assert_fail@plt+0x758>
   11480:	str	r3, [sp]
   11484:	mov	r3, r5
   11488:	bl	10c8c <fprintf@plt>
   1148c:	add	sp, sp, #20
   11490:	pop	{r4, r5, pc}
   11494:	andeq	r3, r1, r7, asr sl
   11498:	andeq	r3, r1, ip, asr #22
   1149c:	andeq	r3, r1, r5, lsr #22
   114a0:	andeq	r3, r1, r2, ror #22
   114a4:	andeq	r3, r1, fp, lsr sl
   114a8:	ldr	r3, [pc, #4]	; 114b4 <__assert_fail@plt+0x768>
   114ac:	str	r0, [r3]
   114b0:	bx	lr
   114b4:	andeq	r5, r2, r0, asr #2
   114b8:	ldr	r3, [pc, #4]	; 114c4 <__assert_fail@plt+0x778>
   114bc:	strb	r0, [r3, #4]
   114c0:	bx	lr
   114c4:	andeq	r5, r2, r0, asr #2
   114c8:	ldr	r3, [pc, #176]	; 11580 <__assert_fail@plt+0x834>
   114cc:	push	{r0, r1, r4, r5, r6, lr}
   114d0:	ldr	r0, [r3]
   114d4:	bl	13594 <__assert_fail@plt+0x2848>
   114d8:	cmp	r0, #0
   114dc:	beq	11564 <__assert_fail@plt+0x818>
   114e0:	ldr	r4, [pc, #156]	; 11584 <__assert_fail@plt+0x838>
   114e4:	bl	10c98 <__errno_location@plt>
   114e8:	mov	r5, r0
   114ec:	ldrb	r6, [r4, #4]
   114f0:	cmp	r6, #0
   114f4:	beq	11504 <__assert_fail@plt+0x7b8>
   114f8:	ldr	r3, [r0]
   114fc:	cmp	r3, #32
   11500:	beq	11564 <__assert_fail@plt+0x818>
   11504:	mov	r2, #5
   11508:	ldr	r1, [pc, #120]	; 11588 <__assert_fail@plt+0x83c>
   1150c:	mov	r0, #0
   11510:	bl	10bc0 <dcgettext@plt>
   11514:	mov	r6, r0
   11518:	ldr	r0, [r4]
   1151c:	cmp	r0, #0
   11520:	beq	11550 <__assert_fail@plt+0x804>
   11524:	ldr	r4, [r5]
   11528:	bl	12a4c <__assert_fail@plt+0x1d00>
   1152c:	mov	r3, r0
   11530:	ldr	r2, [pc, #84]	; 1158c <__assert_fail@plt+0x840>
   11534:	mov	r0, #0
   11538:	str	r6, [sp]
   1153c:	mov	r1, r4
   11540:	bl	10c20 <error@plt>
   11544:	ldr	r3, [pc, #68]	; 11590 <__assert_fail@plt+0x844>
   11548:	ldr	r0, [r3]
   1154c:	bl	10b90 <_exit@plt>
   11550:	mov	r3, r6
   11554:	ldr	r2, [pc, #56]	; 11594 <__assert_fail@plt+0x848>
   11558:	ldr	r1, [r5]
   1155c:	bl	10c20 <error@plt>
   11560:	b	11544 <__assert_fail@plt+0x7f8>
   11564:	ldr	r3, [pc, #44]	; 11598 <__assert_fail@plt+0x84c>
   11568:	ldr	r0, [r3]
   1156c:	bl	13594 <__assert_fail@plt+0x2848>
   11570:	cmp	r0, #0
   11574:	bne	11544 <__assert_fail@plt+0x7f8>
   11578:	add	sp, sp, #8
   1157c:	pop	{r4, r5, r6, pc}
   11580:	andeq	r5, r2, r4, lsr r1
   11584:	andeq	r5, r2, r0, asr #2
   11588:	andeq	r3, r1, ip, lsl r8
   1158c:	muleq	r1, r1, fp
   11590:	ldrdeq	r5, [r2], -r0
   11594:	muleq	r1, r5, fp
   11598:	andeq	r5, r2, r8, lsr #2
   1159c:	push	{r4, r5, r6, lr}
   115a0:	subs	r4, r0, #0
   115a4:	bne	115bc <__assert_fail@plt+0x870>
   115a8:	ldr	r3, [pc, #124]	; 1162c <__assert_fail@plt+0x8e0>
   115ac:	ldr	r0, [pc, #124]	; 11630 <__assert_fail@plt+0x8e4>
   115b0:	ldr	r1, [r3]
   115b4:	bl	10d28 <fputs@plt>
   115b8:	bl	10d40 <abort@plt>
   115bc:	mov	r1, #47	; 0x2f
   115c0:	bl	10cec <strrchr@plt>
   115c4:	subs	r6, r0, #0
   115c8:	beq	11618 <__assert_fail@plt+0x8cc>
   115cc:	add	r5, r6, #1
   115d0:	sub	r3, r5, r4
   115d4:	cmp	r3, #6
   115d8:	ble	11618 <__assert_fail@plt+0x8cc>
   115dc:	mov	r2, #7
   115e0:	ldr	r1, [pc, #76]	; 11634 <__assert_fail@plt+0x8e8>
   115e4:	sub	r0, r6, #6
   115e8:	bl	10d34 <strncmp@plt>
   115ec:	cmp	r0, #0
   115f0:	bne	11618 <__assert_fail@plt+0x8cc>
   115f4:	mov	r2, #3
   115f8:	ldr	r1, [pc, #56]	; 11638 <__assert_fail@plt+0x8ec>
   115fc:	mov	r0, r5
   11600:	bl	10d34 <strncmp@plt>
   11604:	cmp	r0, #0
   11608:	ldreq	r3, [pc, #44]	; 1163c <__assert_fail@plt+0x8f0>
   1160c:	addeq	r4, r6, #4
   11610:	movne	r4, r5
   11614:	streq	r4, [r3]
   11618:	ldr	r3, [pc, #32]	; 11640 <__assert_fail@plt+0x8f4>
   1161c:	str	r4, [r3]
   11620:	ldr	r3, [pc, #28]	; 11644 <__assert_fail@plt+0x8f8>
   11624:	str	r4, [r3]
   11628:	pop	{r4, r5, r6, pc}
   1162c:	andeq	r5, r2, r8, lsr #2
   11630:	muleq	r1, r8, fp
   11634:	ldrdeq	r3, [r1], -r0
   11638:	ldrdeq	r3, [r1], -r8
   1163c:	andeq	r5, r2, r8, lsl r1
   11640:	andeq	r5, r2, r8, asr #2
   11644:	andeq	r5, r2, ip, lsl r1
   11648:	push	{r4, lr}
   1164c:	mov	r2, #48	; 0x30
   11650:	mov	r4, r1
   11654:	mov	r1, #0
   11658:	bl	10cb0 <memset@plt>
   1165c:	cmp	r4, #10
   11660:	bne	11668 <__assert_fail@plt+0x91c>
   11664:	bl	10d40 <abort@plt>
   11668:	str	r4, [r0]
   1166c:	pop	{r4, pc}
   11670:	push	{r4, r5, r6, lr}
   11674:	mov	r2, #5
   11678:	mov	r6, r0
   1167c:	mov	r5, r1
   11680:	mov	r1, r0
   11684:	mov	r0, #0
   11688:	bl	10bc0 <dcgettext@plt>
   1168c:	cmp	r6, r0
   11690:	mov	r4, r0
   11694:	bne	11704 <__assert_fail@plt+0x9b8>
   11698:	bl	13688 <__assert_fail@plt+0x293c>
   1169c:	ldrb	r3, [r0]
   116a0:	bic	r3, r3, #32
   116a4:	cmp	r3, #85	; 0x55
   116a8:	bne	1170c <__assert_fail@plt+0x9c0>
   116ac:	ldrb	r3, [r0, #1]
   116b0:	bic	r3, r3, #32
   116b4:	cmp	r3, #84	; 0x54
   116b8:	bne	1177c <__assert_fail@plt+0xa30>
   116bc:	ldrb	r3, [r0, #2]
   116c0:	bic	r3, r3, #32
   116c4:	cmp	r3, #70	; 0x46
   116c8:	bne	1177c <__assert_fail@plt+0xa30>
   116cc:	ldrb	r3, [r0, #3]
   116d0:	cmp	r3, #45	; 0x2d
   116d4:	bne	1177c <__assert_fail@plt+0xa30>
   116d8:	ldrb	r3, [r0, #4]
   116dc:	cmp	r3, #56	; 0x38
   116e0:	bne	1177c <__assert_fail@plt+0xa30>
   116e4:	ldrb	r3, [r0, #5]
   116e8:	cmp	r3, #0
   116ec:	bne	1177c <__assert_fail@plt+0xa30>
   116f0:	ldrb	r2, [r4]
   116f4:	ldr	r3, [pc, #144]	; 1178c <__assert_fail@plt+0xa40>
   116f8:	ldr	r4, [pc, #144]	; 11790 <__assert_fail@plt+0xa44>
   116fc:	cmp	r2, #96	; 0x60
   11700:	movne	r4, r3
   11704:	mov	r0, r4
   11708:	pop	{r4, r5, r6, pc}
   1170c:	cmp	r3, #71	; 0x47
   11710:	bne	1177c <__assert_fail@plt+0xa30>
   11714:	ldrb	r3, [r0, #1]
   11718:	bic	r3, r3, #32
   1171c:	cmp	r3, #66	; 0x42
   11720:	bne	1177c <__assert_fail@plt+0xa30>
   11724:	ldrb	r3, [r0, #2]
   11728:	cmp	r3, #49	; 0x31
   1172c:	bne	1177c <__assert_fail@plt+0xa30>
   11730:	ldrb	r3, [r0, #3]
   11734:	cmp	r3, #56	; 0x38
   11738:	bne	1177c <__assert_fail@plt+0xa30>
   1173c:	ldrb	r3, [r0, #4]
   11740:	cmp	r3, #48	; 0x30
   11744:	bne	1177c <__assert_fail@plt+0xa30>
   11748:	ldrb	r3, [r0, #5]
   1174c:	cmp	r3, #51	; 0x33
   11750:	bne	1177c <__assert_fail@plt+0xa30>
   11754:	ldrb	r3, [r0, #6]
   11758:	cmp	r3, #48	; 0x30
   1175c:	bne	1177c <__assert_fail@plt+0xa30>
   11760:	ldrb	r3, [r0, #7]
   11764:	cmp	r3, #0
   11768:	bne	1177c <__assert_fail@plt+0xa30>
   1176c:	ldrb	r2, [r4]
   11770:	ldr	r3, [pc, #28]	; 11794 <__assert_fail@plt+0xa48>
   11774:	ldr	r4, [pc, #28]	; 11798 <__assert_fail@plt+0xa4c>
   11778:	b	116fc <__assert_fail@plt+0x9b0>
   1177c:	ldr	r4, [pc, #24]	; 1179c <__assert_fail@plt+0xa50>
   11780:	cmp	r5, #9
   11784:	ldr	r3, [pc, #20]	; 117a0 <__assert_fail@plt+0xa54>
   11788:	b	11700 <__assert_fail@plt+0x9b4>
   1178c:	andeq	r3, r1, r2, lsr ip
   11790:	andeq	r3, r1, sp, lsr ip
   11794:	andeq	r3, r1, r6, lsr ip
   11798:	andeq	r3, r1, r9, lsr ip
   1179c:	andeq	r3, r1, r0, lsr ip
   117a0:	andeq	r3, r1, r1, asr #24
   117a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a8:	sub	sp, sp, #108	; 0x6c
   117ac:	mov	r8, r0
   117b0:	mov	r5, r1
   117b4:	mov	r6, #0
   117b8:	str	r3, [sp, #40]	; 0x28
   117bc:	str	r2, [sp, #48]	; 0x30
   117c0:	ldr	sl, [sp, #144]	; 0x90
   117c4:	bl	10bfc <__ctype_get_mb_cur_max@plt>
   117c8:	ldr	r3, [sp, #148]	; 0x94
   117cc:	str	r6, [sp, #24]
   117d0:	str	r6, [sp, #32]
   117d4:	str	r6, [sp, #44]	; 0x2c
   117d8:	str	r6, [sp, #52]	; 0x34
   117dc:	ubfx	r7, r3, #1, #1
   117e0:	mov	r3, #1
   117e4:	str	r6, [sp, #60]	; 0x3c
   117e8:	str	r3, [sp, #72]	; 0x48
   117ec:	str	r0, [sp, #76]	; 0x4c
   117f0:	cmp	sl, #10
   117f4:	ldrls	pc, [pc, sl, lsl #2]
   117f8:	b	11a3c <__assert_fail@plt+0xcf0>
   117fc:	andeq	r1, r1, r8, lsr #16
   11800:	andeq	r1, r1, r4, asr sl
   11804:	ldrdeq	r1, [r1], -r8
   11808:	strdeq	r1, [r1], -r0
   1180c:	andeq	r1, r1, r0, asr #19
   11810:	andeq	r1, r1, r8, lsl r9
   11814:	strdeq	r1, [r1], -r8
   11818:	andeq	r1, r1, r0, asr #20
   1181c:	andeq	r1, r1, r8, asr #18
   11820:	andeq	r1, r1, r8, asr #18
   11824:	andeq	r1, r1, r8, asr #18
   11828:	mov	r4, sl
   1182c:	mov	r7, #0
   11830:	mov	r9, r5
   11834:	mov	r3, #0
   11838:	str	r6, [sp, #68]	; 0x44
   1183c:	str	r3, [sp, #28]
   11840:	ldr	r3, [sp, #40]	; 0x28
   11844:	cmn	r3, #1
   11848:	bne	123e8 <__assert_fail@plt+0x169c>
   1184c:	ldr	r2, [sp, #28]
   11850:	ldr	r3, [sp, #48]	; 0x30
   11854:	ldrb	r3, [r3, r2]
   11858:	adds	r3, r3, #0
   1185c:	movne	r3, #1
   11860:	str	r3, [sp, #36]	; 0x24
   11864:	ldr	r3, [sp, #36]	; 0x24
   11868:	cmp	r3, #0
   1186c:	bne	11a78 <__assert_fail@plt+0xd2c>
   11870:	sub	r3, sl, #2
   11874:	cmp	r4, #0
   11878:	clz	r3, r3
   1187c:	movne	r2, #0
   11880:	lsr	r3, r3, #5
   11884:	andeq	r2, r3, r7
   11888:	cmp	r2, #0
   1188c:	bne	11c3c <__assert_fail@plt+0xef0>
   11890:	eor	r7, r7, #1
   11894:	ands	r3, r3, r7
   11898:	beq	12460 <__assert_fail@plt+0x1714>
   1189c:	ldr	r2, [sp, #68]	; 0x44
   118a0:	cmp	r2, #0
   118a4:	beq	12428 <__assert_fail@plt+0x16dc>
   118a8:	ldr	r3, [sp, #72]	; 0x48
   118ac:	cmp	r3, #0
   118b0:	beq	123fc <__assert_fail@plt+0x16b0>
   118b4:	ldr	r2, [sp, #48]	; 0x30
   118b8:	ldr	r3, [sp, #160]	; 0xa0
   118bc:	ldr	r1, [sp, #60]	; 0x3c
   118c0:	str	r3, [sp, #16]
   118c4:	ldr	r3, [sp, #156]	; 0x9c
   118c8:	str	r3, [sp, #12]
   118cc:	ldr	r3, [sp, #152]	; 0x98
   118d0:	str	r3, [sp, #8]
   118d4:	ldr	r3, [sp, #148]	; 0x94
   118d8:	str	r3, [sp, #4]
   118dc:	mov	r3, #5
   118e0:	str	r3, [sp]
   118e4:	ldr	r3, [sp, #40]	; 0x28
   118e8:	mov	r0, r8
   118ec:	bl	117a4 <__assert_fail@plt+0xa58>
   118f0:	mov	r4, r0
   118f4:	b	12454 <__assert_fail@plt+0x1708>
   118f8:	ldr	r3, [pc, #2948]	; 12484 <__assert_fail@plt+0x1738>
   118fc:	mov	r7, #1
   11900:	mov	r4, #0
   11904:	mov	sl, #5
   11908:	str	r7, [sp, #24]
   1190c:	str	r7, [sp, #32]
   11910:	str	r3, [sp, #44]	; 0x2c
   11914:	b	11830 <__assert_fail@plt+0xae4>
   11918:	cmp	r7, #0
   1191c:	bne	11a60 <__assert_fail@plt+0xd14>
   11920:	cmp	r5, #0
   11924:	mov	r4, #1
   11928:	movne	r3, #34	; 0x22
   1192c:	strbne	r3, [r8]
   11930:	mov	r3, #1
   11934:	str	r3, [sp, #24]
   11938:	str	r3, [sp, #32]
   1193c:	ldr	r3, [pc, #2880]	; 12484 <__assert_fail@plt+0x1738>
   11940:	str	r3, [sp, #44]	; 0x2c
   11944:	b	11830 <__assert_fail@plt+0xae4>
   11948:	cmp	sl, #10
   1194c:	beq	11970 <__assert_fail@plt+0xc24>
   11950:	mov	r1, sl
   11954:	ldr	r0, [pc, #2860]	; 12488 <__assert_fail@plt+0x173c>
   11958:	bl	11670 <__assert_fail@plt+0x924>
   1195c:	mov	r1, sl
   11960:	str	r0, [sp, #156]	; 0x9c
   11964:	ldr	r0, [pc, #2848]	; 1248c <__assert_fail@plt+0x1740>
   11968:	bl	11670 <__assert_fail@plt+0x924>
   1196c:	str	r0, [sp, #160]	; 0xa0
   11970:	cmp	r7, #0
   11974:	moveq	r4, r7
   11978:	beq	11990 <__assert_fail@plt+0xc44>
   1197c:	mov	r4, #0
   11980:	b	119a0 <__assert_fail@plt+0xc54>
   11984:	cmp	r5, r4
   11988:	strbhi	r3, [r8, r4]
   1198c:	add	r4, r4, #1
   11990:	ldr	r3, [sp, #156]	; 0x9c
   11994:	ldrb	r3, [r3, r4]
   11998:	cmp	r3, #0
   1199c:	bne	11984 <__assert_fail@plt+0xc38>
   119a0:	ldr	r0, [sp, #160]	; 0xa0
   119a4:	bl	10c80 <strlen@plt>
   119a8:	ldr	r3, [sp, #160]	; 0xa0
   119ac:	str	r0, [sp, #32]
   119b0:	str	r3, [sp, #44]	; 0x2c
   119b4:	mov	r3, #1
   119b8:	str	r3, [sp, #24]
   119bc:	b	11830 <__assert_fail@plt+0xae4>
   119c0:	mov	r3, #1
   119c4:	cmp	r7, #0
   119c8:	streq	r3, [sp, #24]
   119cc:	beq	11a10 <__assert_fail@plt+0xcc4>
   119d0:	str	r3, [sp, #32]
   119d4:	b	119fc <__assert_fail@plt+0xcb0>
   119d8:	cmp	r7, #0
   119dc:	beq	11a10 <__assert_fail@plt+0xcc4>
   119e0:	mov	r3, #1
   119e4:	str	r3, [sp, #32]
   119e8:	ldr	r3, [pc, #2716]	; 1248c <__assert_fail@plt+0x1740>
   119ec:	b	11a70 <__assert_fail@plt+0xd24>
   119f0:	mov	r7, #1
   119f4:	str	r7, [sp, #24]
   119f8:	str	r7, [sp, #32]
   119fc:	ldr	r3, [pc, #2696]	; 1248c <__assert_fail@plt+0x1740>
   11a00:	mov	r4, #0
   11a04:	str	r3, [sp, #44]	; 0x2c
   11a08:	mov	sl, #2
   11a0c:	b	11830 <__assert_fail@plt+0xae4>
   11a10:	cmp	r5, #0
   11a14:	movne	r3, #39	; 0x27
   11a18:	movne	r7, #0
   11a1c:	strbne	r3, [r8]
   11a20:	moveq	r7, r5
   11a24:	mov	r3, #1
   11a28:	mov	r4, #1
   11a2c:	str	r3, [sp, #32]
   11a30:	ldr	r3, [pc, #2644]	; 1248c <__assert_fail@plt+0x1740>
   11a34:	str	r3, [sp, #44]	; 0x2c
   11a38:	b	11a08 <__assert_fail@plt+0xcbc>
   11a3c:	bl	10d40 <abort@plt>
   11a40:	mov	r3, #1
   11a44:	mov	r7, #0
   11a48:	str	r3, [sp, #24]
   11a4c:	mov	r4, #0
   11a50:	b	11830 <__assert_fail@plt+0xae4>
   11a54:	mov	r7, #1
   11a58:	str	sl, [sp, #32]
   11a5c:	b	119fc <__assert_fail@plt+0xcb0>
   11a60:	mov	r3, #1
   11a64:	str	r7, [sp, #24]
   11a68:	str	r3, [sp, #32]
   11a6c:	ldr	r3, [pc, #2576]	; 12484 <__assert_fail@plt+0x1738>
   11a70:	str	r3, [sp, #44]	; 0x2c
   11a74:	b	11a4c <__assert_fail@plt+0xd00>
   11a78:	ldr	fp, [sp, #24]
   11a7c:	ldr	r3, [sp, #32]
   11a80:	cmp	sl, #2
   11a84:	moveq	fp, #0
   11a88:	andne	fp, fp, #1
   11a8c:	adds	r5, r3, #0
   11a90:	movne	r5, #1
   11a94:	ands	r3, fp, r5
   11a98:	str	r3, [sp, #64]	; 0x40
   11a9c:	beq	11b6c <__assert_fail@plt+0xe20>
   11aa0:	ldr	r3, [sp, #28]
   11aa4:	ldr	r2, [sp, #32]
   11aa8:	cmp	r2, #1
   11aac:	add	r6, r3, r2
   11ab0:	mov	r3, r2
   11ab4:	ldr	r2, [sp, #40]	; 0x28
   11ab8:	movls	r3, #0
   11abc:	movhi	r3, #1
   11ac0:	cmn	r2, #1
   11ac4:	movne	r3, #0
   11ac8:	cmp	r3, #0
   11acc:	beq	11adc <__assert_fail@plt+0xd90>
   11ad0:	ldr	r0, [sp, #48]	; 0x30
   11ad4:	bl	10c80 <strlen@plt>
   11ad8:	str	r0, [sp, #40]	; 0x28
   11adc:	ldr	r3, [sp, #40]	; 0x28
   11ae0:	cmp	r6, r3
   11ae4:	bhi	11b64 <__assert_fail@plt+0xe18>
   11ae8:	ldr	r0, [sp, #28]
   11aec:	ldr	r2, [sp, #32]
   11af0:	ldr	r3, [sp, #48]	; 0x30
   11af4:	ldr	r1, [sp, #44]	; 0x2c
   11af8:	add	r0, r3, r0
   11afc:	bl	10bb4 <memcmp@plt>
   11b00:	cmp	r0, #0
   11b04:	bne	11b64 <__assert_fail@plt+0xe18>
   11b08:	cmp	r7, #0
   11b0c:	beq	11b6c <__assert_fail@plt+0xe20>
   11b10:	str	r7, [sp, #24]
   11b14:	ldr	r3, [sp, #24]
   11b18:	mov	r1, r9
   11b1c:	ldr	r2, [sp, #48]	; 0x30
   11b20:	cmp	sl, #2
   11b24:	movne	r3, #0
   11b28:	andeq	r3, r3, #1
   11b2c:	cmp	r3, #0
   11b30:	ldr	r3, [sp, #160]	; 0xa0
   11b34:	movne	sl, #4
   11b38:	str	sl, [sp]
   11b3c:	str	r3, [sp, #16]
   11b40:	ldr	r3, [sp, #156]	; 0x9c
   11b44:	str	r3, [sp, #12]
   11b48:	mov	r3, #0
   11b4c:	str	r3, [sp, #8]
   11b50:	ldr	r3, [sp, #148]	; 0x94
   11b54:	bic	r3, r3, #2
   11b58:	str	r3, [sp, #4]
   11b5c:	ldr	r3, [sp, #40]	; 0x28
   11b60:	b	118e8 <__assert_fail@plt+0xb9c>
   11b64:	mov	r3, #0
   11b68:	str	r3, [sp, #64]	; 0x40
   11b6c:	ldr	r2, [sp, #28]
   11b70:	ldr	r3, [sp, #48]	; 0x30
   11b74:	add	r3, r3, r2
   11b78:	str	r3, [sp, #80]	; 0x50
   11b7c:	ldr	r3, [sp, #48]	; 0x30
   11b80:	ldrb	r6, [r3, r2]
   11b84:	cmp	r6, #58	; 0x3a
   11b88:	bhi	11cec <__assert_fail@plt+0xfa0>
   11b8c:	cmp	r6, #43	; 0x2b
   11b90:	bcs	11eac <__assert_fail@plt+0x1160>
   11b94:	cmp	r6, #32
   11b98:	beq	11f00 <__assert_fail@plt+0x11b4>
   11b9c:	bhi	11c44 <__assert_fail@plt+0xef8>
   11ba0:	cmp	r6, #9
   11ba4:	beq	120a8 <__assert_fail@plt+0x135c>
   11ba8:	bhi	11c08 <__assert_fail@plt+0xebc>
   11bac:	cmp	r6, #7
   11bb0:	beq	120b8 <__assert_fail@plt+0x136c>
   11bb4:	bhi	120d4 <__assert_fail@plt+0x1388>
   11bb8:	cmp	r6, #0
   11bbc:	beq	11f1c <__assert_fail@plt+0x11d0>
   11bc0:	ldr	r3, [sp, #76]	; 0x4c
   11bc4:	cmp	r3, #1
   11bc8:	bne	12120 <__assert_fail@plt+0x13d4>
   11bcc:	bl	10c68 <__ctype_b_loc@plt>
   11bd0:	ldr	r2, [r0]
   11bd4:	sxth	r3, r6
   11bd8:	lsl	r3, r3, #1
   11bdc:	ldrh	r5, [r2, r3]
   11be0:	ldr	r3, [sp, #76]	; 0x4c
   11be4:	ubfx	r5, r5, #14, #1
   11be8:	str	r3, [sp, #56]	; 0x38
   11bec:	ldr	r3, [sp, #24]
   11bf0:	eor	fp, r5, #1
   11bf4:	and	fp, fp, r3
   11bf8:	ands	fp, fp, #255	; 0xff
   11bfc:	beq	11ddc <__assert_fail@plt+0x1090>
   11c00:	mov	r5, #0
   11c04:	b	121cc <__assert_fail@plt+0x1480>
   11c08:	cmp	r6, #11
   11c0c:	beq	120dc <__assert_fail@plt+0x1390>
   11c10:	bcc	120b0 <__assert_fail@plt+0x1364>
   11c14:	cmp	r6, #12
   11c18:	beq	120e4 <__assert_fail@plt+0x1398>
   11c1c:	cmp	r6, #13
   11c20:	moveq	r3, #114	; 0x72
   11c24:	bne	11bc0 <__assert_fail@plt+0xe74>
   11c28:	cmp	sl, #2
   11c2c:	movne	r2, #0
   11c30:	andeq	r2, r7, #1
   11c34:	cmp	r2, #0
   11c38:	beq	120bc <__assert_fail@plt+0x1370>
   11c3c:	mov	sl, #2
   11c40:	b	11b14 <__assert_fail@plt+0xdc8>
   11c44:	cmp	r6, #37	; 0x25
   11c48:	beq	11eac <__assert_fail@plt+0x1160>
   11c4c:	bhi	11c60 <__assert_fail@plt+0xf14>
   11c50:	cmp	r6, #35	; 0x23
   11c54:	beq	11ef4 <__assert_fail@plt+0x11a8>
   11c58:	mov	r5, #0
   11c5c:	b	11f04 <__assert_fail@plt+0x11b8>
   11c60:	cmp	r6, #39	; 0x27
   11c64:	bne	11c58 <__assert_fail@plt+0xf0c>
   11c68:	cmp	sl, #2
   11c6c:	ldrne	r5, [sp, #36]	; 0x24
   11c70:	movne	r3, r5
   11c74:	strne	r3, [sp, #68]	; 0x44
   11c78:	bne	11ff8 <__assert_fail@plt+0x12ac>
   11c7c:	cmp	r7, #0
   11c80:	bne	11b14 <__assert_fail@plt+0xdc8>
   11c84:	ldr	r3, [sp, #60]	; 0x3c
   11c88:	cmp	r9, #0
   11c8c:	clz	r3, r3
   11c90:	lsr	r3, r3, #5
   11c94:	moveq	r3, #0
   11c98:	cmp	r3, #0
   11c9c:	strne	r9, [sp, #60]	; 0x3c
   11ca0:	movne	r9, #0
   11ca4:	bne	11cb4 <__assert_fail@plt+0xf68>
   11ca8:	cmp	r9, r4
   11cac:	movhi	r3, #39	; 0x27
   11cb0:	strbhi	r3, [r8, r4]
   11cb4:	add	r3, r4, #1
   11cb8:	ldr	r5, [sp, #36]	; 0x24
   11cbc:	mov	fp, #0
   11cc0:	cmp	r3, r9
   11cc4:	movcc	r2, #92	; 0x5c
   11cc8:	str	fp, [sp, #52]	; 0x34
   11ccc:	strbcc	r2, [r8, r3]
   11cd0:	add	r3, r4, #2
   11cd4:	add	r4, r4, #3
   11cd8:	cmp	r3, r9
   11cdc:	str	r5, [sp, #68]	; 0x44
   11ce0:	movcc	r2, #39	; 0x27
   11ce4:	strbcc	r2, [r8, r3]
   11ce8:	b	11ddc <__assert_fail@plt+0x1090>
   11cec:	cmp	r6, #94	; 0x5e
   11cf0:	beq	11c58 <__assert_fail@plt+0xf0c>
   11cf4:	bhi	11eb4 <__assert_fail@plt+0x1168>
   11cf8:	cmp	r6, #90	; 0x5a
   11cfc:	bhi	11ea0 <__assert_fail@plt+0x1154>
   11d00:	cmp	r6, #65	; 0x41
   11d04:	bcs	11eac <__assert_fail@plt+0x1160>
   11d08:	cmp	r6, #62	; 0x3e
   11d0c:	bls	11c58 <__assert_fail@plt+0xf0c>
   11d10:	cmp	r6, #63	; 0x3f
   11d14:	bne	11bc0 <__assert_fail@plt+0xe74>
   11d18:	cmp	sl, #2
   11d1c:	beq	12000 <__assert_fail@plt+0x12b4>
   11d20:	cmp	sl, #5
   11d24:	movne	fp, #0
   11d28:	bne	123d0 <__assert_fail@plt+0x1684>
   11d2c:	ldr	r3, [sp, #148]	; 0x94
   11d30:	tst	r3, #4
   11d34:	beq	12008 <__assert_fail@plt+0x12bc>
   11d38:	ldr	r3, [sp, #28]
   11d3c:	add	r2, r3, #2
   11d40:	ldr	r3, [sp, #40]	; 0x28
   11d44:	cmp	r2, r3
   11d48:	bcs	12008 <__assert_fail@plt+0x12bc>
   11d4c:	ldr	r1, [sp, #28]
   11d50:	ldr	r3, [sp, #48]	; 0x30
   11d54:	add	r3, r3, r1
   11d58:	ldrb	r1, [r3, #1]
   11d5c:	cmp	r1, #63	; 0x3f
   11d60:	bne	12008 <__assert_fail@plt+0x12bc>
   11d64:	ldr	r3, [sp, #48]	; 0x30
   11d68:	ldrb	r6, [r3, r2]
   11d6c:	sub	r3, r6, #33	; 0x21
   11d70:	uxtb	r3, r3
   11d74:	cmp	r3, #29
   11d78:	bhi	123d8 <__assert_fail@plt+0x168c>
   11d7c:	ldr	r0, [pc, #1804]	; 12490 <__assert_fail@plt+0x1744>
   11d80:	mov	r5, #1
   11d84:	ands	r5, r0, r5, lsl r3
   11d88:	beq	123e0 <__assert_fail@plt+0x1694>
   11d8c:	cmp	r7, #0
   11d90:	bne	11b14 <__assert_fail@plt+0xdc8>
   11d94:	cmp	r9, r4
   11d98:	add	r3, r4, #1
   11d9c:	str	r2, [sp, #28]
   11da0:	mov	r5, #0
   11da4:	strbhi	r1, [r8, r4]
   11da8:	cmp	r9, r3
   11dac:	mov	fp, r5
   11db0:	movhi	r1, #34	; 0x22
   11db4:	strbhi	r1, [r8, r3]
   11db8:	add	r3, r4, #2
   11dbc:	cmp	r9, r3
   11dc0:	movhi	r1, #34	; 0x22
   11dc4:	strbhi	r1, [r8, r3]
   11dc8:	add	r3, r4, #3
   11dcc:	add	r4, r4, #4
   11dd0:	cmp	r9, r3
   11dd4:	movhi	r1, #63	; 0x3f
   11dd8:	strbhi	r1, [r8, r3]
   11ddc:	ldr	r3, [sp, #24]
   11de0:	eor	r3, r3, #1
   11de4:	cmp	sl, #2
   11de8:	orreq	r3, r3, #1
   11dec:	eor	r3, r3, #1
   11df0:	orr	r3, r7, r3
   11df4:	tst	r3, #255	; 0xff
   11df8:	beq	11e24 <__assert_fail@plt+0x10d8>
   11dfc:	ldr	r3, [sp, #152]	; 0x98
   11e00:	cmp	r3, #0
   11e04:	beq	11e24 <__assert_fail@plt+0x10d8>
   11e08:	ldr	r1, [sp, #152]	; 0x98
   11e0c:	ubfx	r2, r6, #5, #8
   11e10:	and	r3, r6, #31
   11e14:	ldr	r2, [r1, r2, lsl #2]
   11e18:	lsr	r3, r2, r3
   11e1c:	tst	r3, #1
   11e20:	bne	11e30 <__assert_fail@plt+0x10e4>
   11e24:	ldr	r3, [sp, #64]	; 0x40
   11e28:	cmp	r3, #0
   11e2c:	beq	12028 <__assert_fail@plt+0x12dc>
   11e30:	sub	r3, sl, #2
   11e34:	cmp	r7, #0
   11e38:	clz	r3, r3
   11e3c:	lsr	r3, r3, #5
   11e40:	bne	11b14 <__assert_fail@plt+0xdc8>
   11e44:	ldr	r2, [sp, #52]	; 0x34
   11e48:	eor	r2, r2, #1
   11e4c:	ands	r3, r3, r2
   11e50:	beq	11e88 <__assert_fail@plt+0x113c>
   11e54:	cmp	r9, r4
   11e58:	str	r3, [sp, #52]	; 0x34
   11e5c:	movhi	r2, #39	; 0x27
   11e60:	strbhi	r2, [r8, r4]
   11e64:	add	r2, r4, #1
   11e68:	cmp	r9, r2
   11e6c:	movhi	r1, #36	; 0x24
   11e70:	strbhi	r1, [r8, r2]
   11e74:	add	r2, r4, #2
   11e78:	add	r4, r4, #3
   11e7c:	cmp	r9, r2
   11e80:	movhi	r1, #39	; 0x27
   11e84:	strbhi	r1, [r8, r2]
   11e88:	cmp	r9, r4
   11e8c:	ldr	fp, [sp, #36]	; 0x24
   11e90:	movhi	r3, #92	; 0x5c
   11e94:	strbhi	r3, [r8, r4]
   11e98:	add	r4, r4, #1
   11e9c:	b	12028 <__assert_fail@plt+0x12dc>
   11ea0:	cmp	r6, #92	; 0x5c
   11ea4:	beq	12010 <__assert_fail@plt+0x12c4>
   11ea8:	bls	11c58 <__assert_fail@plt+0xf0c>
   11eac:	ldr	r5, [sp, #36]	; 0x24
   11eb0:	b	11ff8 <__assert_fail@plt+0x12ac>
   11eb4:	cmp	r6, #122	; 0x7a
   11eb8:	bhi	11ed8 <__assert_fail@plt+0x118c>
   11ebc:	cmp	r6, #97	; 0x61
   11ec0:	bcs	11eac <__assert_fail@plt+0x1160>
   11ec4:	cmp	r6, #95	; 0x5f
   11ec8:	beq	11eac <__assert_fail@plt+0x1160>
   11ecc:	cmp	r6, #96	; 0x60
   11ed0:	bne	11bc0 <__assert_fail@plt+0xe74>
   11ed4:	b	11c58 <__assert_fail@plt+0xf0c>
   11ed8:	cmp	r6, #124	; 0x7c
   11edc:	beq	11c58 <__assert_fail@plt+0xf0c>
   11ee0:	bcc	120ec <__assert_fail@plt+0x13a0>
   11ee4:	cmp	r6, #125	; 0x7d
   11ee8:	beq	120ec <__assert_fail@plt+0x13a0>
   11eec:	cmp	r6, #126	; 0x7e
   11ef0:	bne	11bc0 <__assert_fail@plt+0xe74>
   11ef4:	ldr	r3, [sp, #28]
   11ef8:	cmp	r3, #0
   11efc:	bne	12008 <__assert_fail@plt+0x12bc>
   11f00:	ldr	r5, [sp, #36]	; 0x24
   11f04:	cmp	sl, #2
   11f08:	movne	fp, #0
   11f0c:	andeq	fp, r7, #1
   11f10:	cmp	fp, #0
   11f14:	beq	11ddc <__assert_fail@plt+0x1090>
   11f18:	b	11c3c <__assert_fail@plt+0xef0>
   11f1c:	ldr	r3, [sp, #24]
   11f20:	cmp	r3, #0
   11f24:	beq	11fec <__assert_fail@plt+0x12a0>
   11f28:	sub	r2, sl, #2
   11f2c:	cmp	r7, #0
   11f30:	clz	r2, r2
   11f34:	lsr	r2, r2, #5
   11f38:	bne	11b10 <__assert_fail@plt+0xdc4>
   11f3c:	ldr	r3, [sp, #52]	; 0x34
   11f40:	eor	r3, r3, #1
   11f44:	ands	r2, r2, r3
   11f48:	moveq	r3, r4
   11f4c:	beq	11f84 <__assert_fail@plt+0x1238>
   11f50:	cmp	r9, r4
   11f54:	str	r2, [sp, #52]	; 0x34
   11f58:	movhi	r3, #39	; 0x27
   11f5c:	strbhi	r3, [r8, r4]
   11f60:	add	r3, r4, #1
   11f64:	cmp	r9, r3
   11f68:	movhi	r1, #36	; 0x24
   11f6c:	strbhi	r1, [r8, r3]
   11f70:	add	r3, r4, #2
   11f74:	cmp	r9, r3
   11f78:	movhi	r1, #39	; 0x27
   11f7c:	strbhi	r1, [r8, r3]
   11f80:	add	r3, r4, #3
   11f84:	cmp	r9, r3
   11f88:	add	r4, r3, #1
   11f8c:	movhi	r2, #92	; 0x5c
   11f90:	strbhi	r2, [r8, r3]
   11f94:	cmp	fp, #0
   11f98:	beq	123c0 <__assert_fail@plt+0x1674>
   11f9c:	ldr	r2, [sp, #28]
   11fa0:	ldr	r1, [sp, #40]	; 0x28
   11fa4:	add	r2, r2, #1
   11fa8:	cmp	r2, r1
   11fac:	bcs	11fe4 <__assert_fail@plt+0x1298>
   11fb0:	ldr	r1, [sp, #48]	; 0x30
   11fb4:	mov	r6, #48	; 0x30
   11fb8:	ldrb	r2, [r1, r2]
   11fbc:	sub	r2, r2, #48	; 0x30
   11fc0:	cmp	r2, #9
   11fc4:	bhi	123d0 <__assert_fail@plt+0x1684>
   11fc8:	cmp	r9, r4
   11fcc:	add	r2, r3, #2
   11fd0:	strbhi	r6, [r8, r4]
   11fd4:	cmp	r9, r2
   11fd8:	add	r4, r3, #3
   11fdc:	movhi	r1, #48	; 0x30
   11fe0:	strbhi	r1, [r8, r2]
   11fe4:	mov	r5, #0
   11fe8:	b	123c8 <__assert_fail@plt+0x167c>
   11fec:	ldr	r3, [sp, #148]	; 0x94
   11ff0:	ands	r5, r3, #1
   11ff4:	bne	1207c <__assert_fail@plt+0x1330>
   11ff8:	mov	fp, #0
   11ffc:	b	11ddc <__assert_fail@plt+0x1090>
   12000:	cmp	r7, #0
   12004:	bne	11b14 <__assert_fail@plt+0xdc8>
   12008:	mov	r5, #0
   1200c:	b	11ff8 <__assert_fail@plt+0x12ac>
   12010:	cmp	sl, #2
   12014:	bne	12088 <__assert_fail@plt+0x133c>
   12018:	cmp	r7, #0
   1201c:	bne	11b14 <__assert_fail@plt+0xdc8>
   12020:	mov	r5, r7
   12024:	mov	fp, r7
   12028:	ldr	r3, [sp, #52]	; 0x34
   1202c:	eor	fp, fp, #1
   12030:	tst	r3, fp
   12034:	beq	12060 <__assert_fail@plt+0x1314>
   12038:	cmp	r9, r4
   1203c:	movhi	r3, #39	; 0x27
   12040:	strbhi	r3, [r8, r4]
   12044:	add	r3, r4, #1
   12048:	add	r4, r4, #2
   1204c:	cmp	r9, r3
   12050:	movhi	r2, #39	; 0x27
   12054:	strbhi	r2, [r8, r3]
   12058:	mov	r3, #0
   1205c:	str	r3, [sp, #52]	; 0x34
   12060:	cmp	r9, r4
   12064:	ldr	r3, [sp, #72]	; 0x48
   12068:	strbhi	r6, [r8, r4]
   1206c:	cmp	r5, #0
   12070:	add	r4, r4, #1
   12074:	moveq	r3, #0
   12078:	str	r3, [sp, #72]	; 0x48
   1207c:	ldr	r3, [sp, #28]
   12080:	add	r3, r3, #1
   12084:	b	1183c <__assert_fail@plt+0xaf0>
   12088:	ldr	r3, [sp, #24]
   1208c:	and	r3, r3, r7
   12090:	tst	r5, r3
   12094:	moveq	r3, r6
   12098:	beq	11c28 <__assert_fail@plt+0xedc>
   1209c:	mov	fp, #0
   120a0:	mov	r5, fp
   120a4:	b	12028 <__assert_fail@plt+0x12dc>
   120a8:	mov	r3, #116	; 0x74
   120ac:	b	11c28 <__assert_fail@plt+0xedc>
   120b0:	mov	r3, #110	; 0x6e
   120b4:	b	11c28 <__assert_fail@plt+0xedc>
   120b8:	mov	r3, #97	; 0x61
   120bc:	ldr	r2, [sp, #24]
   120c0:	cmp	r2, #0
   120c4:	beq	12008 <__assert_fail@plt+0x12bc>
   120c8:	mov	r6, r3
   120cc:	mov	r5, #0
   120d0:	b	11e30 <__assert_fail@plt+0x10e4>
   120d4:	mov	r3, #98	; 0x62
   120d8:	b	120bc <__assert_fail@plt+0x1370>
   120dc:	mov	r3, #118	; 0x76
   120e0:	b	120bc <__assert_fail@plt+0x1370>
   120e4:	mov	r3, #102	; 0x66
   120e8:	b	120bc <__assert_fail@plt+0x1370>
   120ec:	ldr	r3, [sp, #40]	; 0x28
   120f0:	cmn	r3, #1
   120f4:	bne	12114 <__assert_fail@plt+0x13c8>
   120f8:	ldr	r3, [sp, #48]	; 0x30
   120fc:	ldrb	r3, [r3, #1]
   12100:	adds	r3, r3, #0
   12104:	movne	r3, #1
   12108:	cmp	r3, #0
   1210c:	bne	12008 <__assert_fail@plt+0x12bc>
   12110:	b	11ef4 <__assert_fail@plt+0x11a8>
   12114:	ldr	r3, [sp, #40]	; 0x28
   12118:	subs	r3, r3, #1
   1211c:	b	12104 <__assert_fail@plt+0x13b8>
   12120:	mov	r3, #0
   12124:	mov	r2, #0
   12128:	strd	r2, [sp, #96]	; 0x60
   1212c:	ldr	r3, [sp, #40]	; 0x28
   12130:	cmn	r3, #1
   12134:	bne	12144 <__assert_fail@plt+0x13f8>
   12138:	ldr	r0, [sp, #48]	; 0x30
   1213c:	bl	10c80 <strlen@plt>
   12140:	str	r0, [sp, #40]	; 0x28
   12144:	ldr	r5, [sp, #36]	; 0x24
   12148:	mov	r3, #0
   1214c:	str	r3, [sp, #56]	; 0x38
   12150:	ldr	r3, [sp, #28]
   12154:	add	r0, sp, #92	; 0x5c
   12158:	ldr	r1, [sp, #40]	; 0x28
   1215c:	ldr	r2, [sp, #56]	; 0x38
   12160:	add	r2, r3, r2
   12164:	ldr	r3, [sp, #48]	; 0x30
   12168:	add	fp, r3, r2
   1216c:	sub	r2, r1, r2
   12170:	add	r3, sp, #96	; 0x60
   12174:	mov	r1, fp
   12178:	bl	134d4 <__assert_fail@plt+0x2788>
   1217c:	subs	r2, r0, #0
   12180:	beq	121c0 <__assert_fail@plt+0x1474>
   12184:	cmn	r2, #1
   12188:	beq	12394 <__assert_fail@plt+0x1648>
   1218c:	cmn	r2, #2
   12190:	bne	12304 <__assert_fail@plt+0x15b8>
   12194:	ldr	r3, [sp, #28]
   12198:	ldr	r2, [sp, #56]	; 0x38
   1219c:	add	r3, r3, r2
   121a0:	ldr	r2, [sp, #40]	; 0x28
   121a4:	cmp	r2, r3
   121a8:	bls	12394 <__assert_fail@plt+0x1648>
   121ac:	ldr	r2, [sp, #56]	; 0x38
   121b0:	ldr	r3, [sp, #80]	; 0x50
   121b4:	ldrb	r5, [r3, r2]
   121b8:	cmp	r5, #0
   121bc:	bne	122f4 <__assert_fail@plt+0x15a8>
   121c0:	ldr	r3, [sp, #56]	; 0x38
   121c4:	cmp	r3, #1
   121c8:	bls	11bec <__assert_fail@plt+0xea0>
   121cc:	ldr	r3, [sp, #28]
   121d0:	mov	fp, #0
   121d4:	mov	ip, #92	; 0x5c
   121d8:	ldr	r2, [sp, #56]	; 0x38
   121dc:	add	r3, r3, r2
   121e0:	ldr	r2, [sp, #24]
   121e4:	str	r3, [sp, #36]	; 0x24
   121e8:	eor	r3, r5, #1
   121ec:	and	r3, r3, r2
   121f0:	mov	r2, #39	; 0x27
   121f4:	uxtb	r3, r3
   121f8:	cmp	r3, #0
   121fc:	beq	1239c <__assert_fail@plt+0x1650>
   12200:	sub	r0, sl, #2
   12204:	cmp	r7, #0
   12208:	clz	r0, r0
   1220c:	lsr	r0, r0, #5
   12210:	bne	11b10 <__assert_fail@plt+0xdc4>
   12214:	ldr	r1, [sp, #52]	; 0x34
   12218:	eor	r1, r1, #1
   1221c:	ands	r1, r0, r1
   12220:	beq	12250 <__assert_fail@plt+0x1504>
   12224:	cmp	r9, r4
   12228:	add	r0, r4, #1
   1222c:	str	r1, [sp, #52]	; 0x34
   12230:	strbhi	r2, [r8, r4]
   12234:	cmp	r9, r0
   12238:	movhi	lr, #36	; 0x24
   1223c:	strbhi	lr, [r8, r0]
   12240:	add	r0, r4, #2
   12244:	add	r4, r4, #3
   12248:	cmp	r9, r0
   1224c:	strbhi	r2, [r8, r0]
   12250:	cmp	r9, r4
   12254:	add	r0, r4, #1
   12258:	mov	fp, r3
   1225c:	strbhi	ip, [r8, r4]
   12260:	cmp	r9, r0
   12264:	lsrhi	r1, r6, #6
   12268:	addhi	r1, r1, #48	; 0x30
   1226c:	strbhi	r1, [r8, r0]
   12270:	add	r0, r4, #2
   12274:	add	r4, r4, #3
   12278:	cmp	r9, r0
   1227c:	ubfxhi	r1, r6, #3, #3
   12280:	and	r6, r6, #7
   12284:	add	r6, r6, #48	; 0x30
   12288:	addhi	r1, r1, #48	; 0x30
   1228c:	strbhi	r1, [r8, r0]
   12290:	eor	r0, fp, #1
   12294:	ldr	r1, [sp, #28]
   12298:	ldr	lr, [sp, #52]	; 0x34
   1229c:	add	r1, r1, #1
   122a0:	and	r0, r0, lr
   122a4:	ldr	lr, [sp, #36]	; 0x24
   122a8:	cmp	r1, lr
   122ac:	bcs	12028 <__assert_fail@plt+0x12dc>
   122b0:	cmp	r0, #0
   122b4:	beq	122d8 <__assert_fail@plt+0x158c>
   122b8:	cmp	r9, r4
   122bc:	add	r0, r4, #1
   122c0:	strbhi	r2, [r8, r4]
   122c4:	cmp	r9, r0
   122c8:	add	r4, r4, #2
   122cc:	strbhi	r2, [r8, r0]
   122d0:	mov	r0, #0
   122d4:	str	r0, [sp, #52]	; 0x34
   122d8:	ldr	r0, [sp, #48]	; 0x30
   122dc:	cmp	r9, r4
   122e0:	str	r1, [sp, #28]
   122e4:	strbhi	r6, [r8, r4]
   122e8:	add	r4, r4, #1
   122ec:	ldrb	r6, [r0, r1]
   122f0:	b	121f8 <__assert_fail@plt+0x14ac>
   122f4:	ldr	r3, [sp, #56]	; 0x38
   122f8:	add	r3, r3, #1
   122fc:	str	r3, [sp, #56]	; 0x38
   12300:	b	12194 <__assert_fail@plt+0x1448>
   12304:	cmp	sl, #2
   12308:	movne	r3, #0
   1230c:	andeq	r3, r7, #1
   12310:	cmp	r3, #0
   12314:	movne	r1, #1
   12318:	bne	12374 <__assert_fail@plt+0x1628>
   1231c:	ldr	r0, [sp, #92]	; 0x5c
   12320:	str	r2, [sp, #84]	; 0x54
   12324:	bl	10bd8 <iswprint@plt>
   12328:	ldr	r3, [sp, #56]	; 0x38
   1232c:	cmp	r0, #0
   12330:	add	r0, sp, #96	; 0x60
   12334:	moveq	r5, #0
   12338:	ldr	r2, [sp, #84]	; 0x54
   1233c:	add	r3, r3, r2
   12340:	str	r3, [sp, #56]	; 0x38
   12344:	bl	10ba8 <mbsinit@plt>
   12348:	cmp	r0, #0
   1234c:	beq	12150 <__assert_fail@plt+0x1404>
   12350:	b	121c0 <__assert_fail@plt+0x1474>
   12354:	ldrb	r3, [fp, #1]!
   12358:	cmp	r3, #94	; 0x5e
   1235c:	beq	11c3c <__assert_fail@plt+0xef0>
   12360:	bhi	12380 <__assert_fail@plt+0x1634>
   12364:	sub	r3, r3, #91	; 0x5b
   12368:	cmp	r3, #1
   1236c:	bls	11c3c <__assert_fail@plt+0xef0>
   12370:	add	r1, r1, #1
   12374:	cmp	r1, r2
   12378:	bne	12354 <__assert_fail@plt+0x1608>
   1237c:	b	1231c <__assert_fail@plt+0x15d0>
   12380:	cmp	r3, #96	; 0x60
   12384:	beq	11c3c <__assert_fail@plt+0xef0>
   12388:	cmp	r3, #124	; 0x7c
   1238c:	bne	12370 <__assert_fail@plt+0x1624>
   12390:	b	11c3c <__assert_fail@plt+0xef0>
   12394:	mov	r5, #0
   12398:	b	121c0 <__assert_fail@plt+0x1474>
   1239c:	ldr	r1, [sp, #64]	; 0x40
   123a0:	cmp	r1, #0
   123a4:	beq	12290 <__assert_fail@plt+0x1544>
   123a8:	cmp	r9, r4
   123ac:	mov	r1, #0
   123b0:	strbhi	ip, [r8, r4]
   123b4:	add	r4, r4, #1
   123b8:	str	r1, [sp, #64]	; 0x40
   123bc:	b	12290 <__assert_fail@plt+0x1544>
   123c0:	mov	r5, fp
   123c4:	ldr	fp, [sp, #24]
   123c8:	mov	r6, #48	; 0x30
   123cc:	b	11ddc <__assert_fail@plt+0x1090>
   123d0:	mov	r5, #0
   123d4:	b	11ddc <__assert_fail@plt+0x1090>
   123d8:	mov	r6, r1
   123dc:	b	12008 <__assert_fail@plt+0x12bc>
   123e0:	mov	r6, r1
   123e4:	b	11ff8 <__assert_fail@plt+0x12ac>
   123e8:	ldr	r2, [sp, #28]
   123ec:	ldr	r3, [sp, #40]	; 0x28
   123f0:	subs	r3, r3, r2
   123f4:	movne	r3, #1
   123f8:	b	11860 <__assert_fail@plt+0xb14>
   123fc:	ldr	r3, [sp, #60]	; 0x3c
   12400:	mov	sl, #2
   12404:	ldr	r7, [sp, #72]	; 0x48
   12408:	adds	r6, r3, #0
   1240c:	mov	r5, r3
   12410:	movne	r6, #1
   12414:	cmp	r9, #0
   12418:	movne	r6, #0
   1241c:	cmp	r6, #0
   12420:	bne	117f0 <__assert_fail@plt+0xaa4>
   12424:	ldr	r3, [sp, #68]	; 0x44
   12428:	ldr	r2, [sp, #44]	; 0x2c
   1242c:	cmp	r2, #0
   12430:	moveq	r3, #0
   12434:	andne	r3, r3, #1
   12438:	cmp	r3, #0
   1243c:	movne	r3, r2
   12440:	subne	r3, r3, #1
   12444:	bne	12474 <__assert_fail@plt+0x1728>
   12448:	cmp	r9, r4
   1244c:	movhi	r3, #0
   12450:	strbhi	r3, [r8, r4]
   12454:	mov	r0, r4
   12458:	add	sp, sp, #108	; 0x6c
   1245c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12460:	mov	r3, r7
   12464:	b	12428 <__assert_fail@plt+0x16dc>
   12468:	cmp	r9, r4
   1246c:	strbhi	r2, [r8, r4]
   12470:	add	r4, r4, #1
   12474:	ldrb	r2, [r3, #1]!
   12478:	cmp	r2, #0
   1247c:	bne	12468 <__assert_fail@plt+0x171c>
   12480:	b	12448 <__assert_fail@plt+0x16fc>
   12484:	andeq	r3, r1, r0, lsr ip
   12488:	andeq	r3, r1, r3, asr #24
   1248c:	andeq	r3, r1, r1, asr #24
   12490:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12498:	sub	sp, sp, #52	; 0x34
   1249c:	mov	r6, r0
   124a0:	mov	r5, r3
   124a4:	mov	r8, r1
   124a8:	mov	r9, r2
   124ac:	bl	10c98 <__errno_location@plt>
   124b0:	ldr	r3, [r0]
   124b4:	cmn	r6, #-2147483647	; 0x80000001
   124b8:	str	r0, [sp, #24]
   124bc:	ldr	r7, [pc, #368]	; 12634 <__assert_fail@plt+0x18e8>
   124c0:	str	r3, [sp, #32]
   124c4:	movne	r3, #0
   124c8:	moveq	r3, #1
   124cc:	orrs	r3, r3, r6, lsr #31
   124d0:	ldr	r4, [r7]
   124d4:	beq	124dc <__assert_fail@plt+0x1790>
   124d8:	bl	10d40 <abort@plt>
   124dc:	ldr	r2, [r7, #4]
   124e0:	cmp	r2, r6
   124e4:	bgt	12554 <__assert_fail@plt+0x1808>
   124e8:	add	sl, r7, #8
   124ec:	mov	r3, #8
   124f0:	cmp	r4, sl
   124f4:	add	r1, sp, #44	; 0x2c
   124f8:	str	r2, [sp, #44]	; 0x2c
   124fc:	sub	r2, r6, r2
   12500:	movne	r0, r4
   12504:	moveq	r0, #0
   12508:	add	r2, r2, #1
   1250c:	str	r3, [sp]
   12510:	mvn	r3, #-2147483648	; 0x80000000
   12514:	bl	1315c <__assert_fail@plt+0x2410>
   12518:	cmp	r4, sl
   1251c:	mov	fp, r0
   12520:	str	r0, [r7]
   12524:	ldmeq	r4, {r0, r1}
   12528:	mov	r4, fp
   1252c:	ldr	r2, [sp, #44]	; 0x2c
   12530:	stmeq	fp, {r0, r1}
   12534:	mov	r1, #0
   12538:	ldr	r0, [r7, #4]
   1253c:	sub	r2, r2, r0
   12540:	add	r0, fp, r0, lsl #3
   12544:	lsl	r2, r2, #3
   12548:	bl	10cb0 <memset@plt>
   1254c:	ldr	r3, [sp, #44]	; 0x2c
   12550:	str	r3, [r7, #4]
   12554:	ldr	r3, [r5, #4]
   12558:	add	sl, r4, r6, lsl #3
   1255c:	mov	r2, r8
   12560:	ldr	fp, [r4, r6, lsl #3]
   12564:	ldr	r7, [sl, #4]
   12568:	orr	r3, r3, #1
   1256c:	str	r3, [sp, #28]
   12570:	add	r3, r5, #8
   12574:	mov	r1, fp
   12578:	str	r3, [sp, #36]	; 0x24
   1257c:	mov	r0, r7
   12580:	ldr	r3, [r5, #44]	; 0x2c
   12584:	str	r3, [sp, #16]
   12588:	ldr	r3, [r5, #40]	; 0x28
   1258c:	str	r3, [sp, #12]
   12590:	add	r3, r5, #8
   12594:	str	r3, [sp, #8]
   12598:	ldr	r3, [sp, #28]
   1259c:	str	r3, [sp, #4]
   125a0:	ldr	r3, [r5]
   125a4:	str	r3, [sp]
   125a8:	mov	r3, r9
   125ac:	bl	117a4 <__assert_fail@plt+0xa58>
   125b0:	cmp	fp, r0
   125b4:	bhi	1261c <__assert_fail@plt+0x18d0>
   125b8:	ldr	r3, [pc, #120]	; 12638 <__assert_fail@plt+0x18ec>
   125bc:	add	fp, r0, #1
   125c0:	str	fp, [r4, r6, lsl #3]
   125c4:	cmp	r7, r3
   125c8:	beq	125d4 <__assert_fail@plt+0x1888>
   125cc:	mov	r0, r7
   125d0:	bl	133c0 <__assert_fail@plt+0x2674>
   125d4:	mov	r0, fp
   125d8:	bl	1304c <__assert_fail@plt+0x2300>
   125dc:	ldr	r3, [r5, #44]	; 0x2c
   125e0:	mov	r2, r8
   125e4:	mov	r1, fp
   125e8:	str	r0, [sl, #4]
   125ec:	mov	r7, r0
   125f0:	str	r3, [sp, #16]
   125f4:	ldr	r3, [r5, #40]	; 0x28
   125f8:	str	r3, [sp, #12]
   125fc:	add	r3, r5, #8
   12600:	str	r3, [sp, #8]
   12604:	ldr	r3, [sp, #28]
   12608:	str	r3, [sp, #4]
   1260c:	ldr	r3, [r5]
   12610:	str	r3, [sp]
   12614:	mov	r3, r9
   12618:	bl	117a4 <__assert_fail@plt+0xa58>
   1261c:	ldr	r3, [sp, #24]
   12620:	mov	r0, r7
   12624:	ldr	r2, [sp, #32]
   12628:	str	r2, [r3]
   1262c:	add	sp, sp, #52	; 0x34
   12630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12634:	ldrdeq	r5, [r2], -r4
   12638:	andeq	r5, r2, ip, asr #2
   1263c:	push	{r4, r5, r6, lr}
   12640:	mov	r5, r0
   12644:	bl	10c98 <__errno_location@plt>
   12648:	mov	r4, r0
   1264c:	cmp	r5, #0
   12650:	ldr	r0, [pc, #20]	; 1266c <__assert_fail@plt+0x1920>
   12654:	mov	r1, #48	; 0x30
   12658:	movne	r0, r5
   1265c:	ldr	r6, [r4]
   12660:	bl	1324c <__assert_fail@plt+0x2500>
   12664:	str	r6, [r4]
   12668:	pop	{r4, r5, r6, pc}
   1266c:	andeq	r5, r2, ip, asr #4
   12670:	ldr	r3, [pc, #12]	; 12684 <__assert_fail@plt+0x1938>
   12674:	cmp	r0, #0
   12678:	moveq	r0, r3
   1267c:	ldr	r0, [r0]
   12680:	bx	lr
   12684:	andeq	r5, r2, ip, asr #4
   12688:	ldr	r3, [pc, #12]	; 1269c <__assert_fail@plt+0x1950>
   1268c:	cmp	r0, #0
   12690:	moveq	r0, r3
   12694:	str	r1, [r0]
   12698:	bx	lr
   1269c:	andeq	r5, r2, ip, asr #4
   126a0:	ldr	r3, [pc, #52]	; 126dc <__assert_fail@plt+0x1990>
   126a4:	cmp	r0, #0
   126a8:	push	{lr}		; (str lr, [sp, #-4]!)
   126ac:	lsr	lr, r1, #5
   126b0:	and	r1, r1, #31
   126b4:	moveq	r0, r3
   126b8:	add	r3, r0, #8
   126bc:	ldr	ip, [r3, lr, lsl #2]
   126c0:	lsr	r0, ip, r1
   126c4:	eor	r2, r2, r0
   126c8:	and	r0, r0, #1
   126cc:	and	r2, r2, #1
   126d0:	eor	r1, ip, r2, lsl r1
   126d4:	str	r1, [r3, lr, lsl #2]
   126d8:	pop	{pc}		; (ldr pc, [sp], #4)
   126dc:	andeq	r5, r2, ip, asr #4
   126e0:	ldr	r3, [pc, #16]	; 126f8 <__assert_fail@plt+0x19ac>
   126e4:	cmp	r0, #0
   126e8:	movne	r3, r0
   126ec:	ldr	r0, [r3, #4]
   126f0:	str	r1, [r3, #4]
   126f4:	bx	lr
   126f8:	andeq	r5, r2, ip, asr #4
   126fc:	ldr	r3, [pc, #44]	; 12730 <__assert_fail@plt+0x19e4>
   12700:	cmp	r0, #0
   12704:	moveq	r0, r3
   12708:	mov	r3, #10
   1270c:	cmp	r2, #0
   12710:	cmpne	r1, #0
   12714:	str	r3, [r0]
   12718:	bne	12724 <__assert_fail@plt+0x19d8>
   1271c:	push	{r4, lr}
   12720:	bl	10d40 <abort@plt>
   12724:	str	r1, [r0, #40]	; 0x28
   12728:	str	r2, [r0, #44]	; 0x2c
   1272c:	bx	lr
   12730:	andeq	r5, r2, ip, asr #4
   12734:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12738:	sub	sp, sp, #24
   1273c:	mov	sl, r3
   12740:	mov	r7, r0
   12744:	mov	r8, r1
   12748:	mov	r9, r2
   1274c:	ldr	r4, [sp, #56]	; 0x38
   12750:	ldr	r3, [pc, #88]	; 127b0 <__assert_fail@plt+0x1a64>
   12754:	cmp	r4, #0
   12758:	moveq	r4, r3
   1275c:	bl	10c98 <__errno_location@plt>
   12760:	ldr	r3, [r4, #44]	; 0x2c
   12764:	mov	r5, r0
   12768:	mov	r2, r9
   1276c:	mov	r1, r8
   12770:	mov	r0, r7
   12774:	ldr	r6, [r5]
   12778:	str	r3, [sp, #16]
   1277c:	ldr	r3, [r4, #40]	; 0x28
   12780:	str	r3, [sp, #12]
   12784:	add	r3, r4, #8
   12788:	str	r3, [sp, #8]
   1278c:	ldr	r3, [r4, #4]
   12790:	str	r3, [sp, #4]
   12794:	ldr	r3, [r4]
   12798:	str	r3, [sp]
   1279c:	mov	r3, sl
   127a0:	bl	117a4 <__assert_fail@plt+0xa58>
   127a4:	str	r6, [r5]
   127a8:	add	sp, sp, #24
   127ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127b0:	andeq	r5, r2, ip, asr #4
   127b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127b8:	cmp	r3, #0
   127bc:	sub	sp, sp, #44	; 0x2c
   127c0:	mov	r6, r2
   127c4:	mov	sl, r1
   127c8:	mov	r9, r0
   127cc:	ldr	r4, [pc, #176]	; 12884 <__assert_fail@plt+0x1b38>
   127d0:	movne	r4, r3
   127d4:	bl	10c98 <__errno_location@plt>
   127d8:	ldr	r3, [r0]
   127dc:	mov	r1, #0
   127e0:	mov	r2, r9
   127e4:	mov	r8, r0
   127e8:	mov	r0, r1
   127ec:	ldr	r5, [r4, #4]
   127f0:	add	fp, r4, #8
   127f4:	str	r3, [sp, #28]
   127f8:	ldr	r3, [r4, #44]	; 0x2c
   127fc:	cmp	r6, #0
   12800:	orreq	r5, r5, #1
   12804:	str	r3, [sp, #16]
   12808:	ldr	r3, [r4, #40]	; 0x28
   1280c:	stmib	sp, {r5, fp}
   12810:	str	r3, [sp, #12]
   12814:	ldr	r3, [r4]
   12818:	str	r3, [sp]
   1281c:	mov	r3, sl
   12820:	bl	117a4 <__assert_fail@plt+0xa58>
   12824:	add	r1, r0, #1
   12828:	mov	r7, r0
   1282c:	mov	r0, r1
   12830:	str	r1, [sp, #36]	; 0x24
   12834:	bl	1304c <__assert_fail@plt+0x2300>
   12838:	ldr	r3, [r4, #44]	; 0x2c
   1283c:	mov	r2, r9
   12840:	ldr	r1, [sp, #36]	; 0x24
   12844:	str	r3, [sp, #16]
   12848:	ldr	r3, [r4, #40]	; 0x28
   1284c:	stmib	sp, {r5, fp}
   12850:	str	r0, [sp, #32]
   12854:	str	r3, [sp, #12]
   12858:	ldr	r3, [r4]
   1285c:	str	r3, [sp]
   12860:	mov	r3, sl
   12864:	bl	117a4 <__assert_fail@plt+0xa58>
   12868:	ldr	r3, [sp, #28]
   1286c:	cmp	r6, #0
   12870:	ldr	r0, [sp, #32]
   12874:	str	r3, [r8]
   12878:	strne	r7, [r6]
   1287c:	add	sp, sp, #44	; 0x2c
   12880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12884:	andeq	r5, r2, ip, asr #4
   12888:	mov	r3, r2
   1288c:	mov	r2, #0
   12890:	b	127b4 <__assert_fail@plt+0x1a68>
   12894:	push	{r4, r5, r6, r7, r8, lr}
   12898:	mov	r6, #1
   1289c:	ldr	r4, [pc, #100]	; 12908 <__assert_fail@plt+0x1bbc>
   128a0:	ldr	r5, [r4]
   128a4:	add	r7, r5, #4
   128a8:	ldr	r3, [r4, #4]
   128ac:	cmp	r3, r6
   128b0:	bgt	128f8 <__assert_fail@plt+0x1bac>
   128b4:	ldr	r6, [pc, #80]	; 1290c <__assert_fail@plt+0x1bc0>
   128b8:	ldr	r0, [r5, #4]
   128bc:	cmp	r0, r6
   128c0:	beq	128d4 <__assert_fail@plt+0x1b88>
   128c4:	bl	133c0 <__assert_fail@plt+0x2674>
   128c8:	mov	r3, #256	; 0x100
   128cc:	str	r3, [r4, #8]
   128d0:	str	r6, [r4, #12]
   128d4:	ldr	r6, [pc, #52]	; 12910 <__assert_fail@plt+0x1bc4>
   128d8:	cmp	r5, r6
   128dc:	beq	128ec <__assert_fail@plt+0x1ba0>
   128e0:	mov	r0, r5
   128e4:	bl	133c0 <__assert_fail@plt+0x2674>
   128e8:	str	r6, [r4]
   128ec:	mov	r3, #1
   128f0:	str	r3, [r4, #4]
   128f4:	pop	{r4, r5, r6, r7, r8, pc}
   128f8:	ldr	r0, [r7, r6, lsl #3]
   128fc:	add	r6, r6, #1
   12900:	bl	133c0 <__assert_fail@plt+0x2674>
   12904:	b	128a8 <__assert_fail@plt+0x1b5c>
   12908:	ldrdeq	r5, [r2], -r4
   1290c:	andeq	r5, r2, ip, asr #2
   12910:	ldrdeq	r5, [r2], -ip
   12914:	ldr	r3, [pc, #4]	; 12920 <__assert_fail@plt+0x1bd4>
   12918:	mvn	r2, #0
   1291c:	b	12494 <__assert_fail@plt+0x1748>
   12920:	andeq	r5, r2, ip, asr #4
   12924:	ldr	r3, [pc]	; 1292c <__assert_fail@plt+0x1be0>
   12928:	b	12494 <__assert_fail@plt+0x1748>
   1292c:	andeq	r5, r2, ip, asr #4
   12930:	mov	r1, r0
   12934:	mov	r0, #0
   12938:	b	12914 <__assert_fail@plt+0x1bc8>
   1293c:	mov	r2, r1
   12940:	mov	r1, r0
   12944:	mov	r0, #0
   12948:	b	12924 <__assert_fail@plt+0x1bd8>
   1294c:	push	{r4, r5, lr}
   12950:	sub	sp, sp, #52	; 0x34
   12954:	mov	r5, r2
   12958:	mov	r4, r0
   1295c:	mov	r0, sp
   12960:	bl	11648 <__assert_fail@plt+0x8fc>
   12964:	mov	r3, sp
   12968:	mvn	r2, #0
   1296c:	mov	r1, r5
   12970:	mov	r0, r4
   12974:	bl	12494 <__assert_fail@plt+0x1748>
   12978:	add	sp, sp, #52	; 0x34
   1297c:	pop	{r4, r5, pc}
   12980:	push	{r4, r5, r6, lr}
   12984:	sub	sp, sp, #48	; 0x30
   12988:	mov	r5, r2
   1298c:	mov	r6, r3
   12990:	mov	r4, r0
   12994:	mov	r0, sp
   12998:	bl	11648 <__assert_fail@plt+0x8fc>
   1299c:	mov	r3, sp
   129a0:	mov	r2, r6
   129a4:	mov	r1, r5
   129a8:	mov	r0, r4
   129ac:	bl	12494 <__assert_fail@plt+0x1748>
   129b0:	add	sp, sp, #48	; 0x30
   129b4:	pop	{r4, r5, r6, pc}
   129b8:	mov	r2, r1
   129bc:	mov	r1, r0
   129c0:	mov	r0, #0
   129c4:	b	1294c <__assert_fail@plt+0x1c00>
   129c8:	mov	r3, r2
   129cc:	mov	r2, r1
   129d0:	mov	r1, r0
   129d4:	mov	r0, #0
   129d8:	b	12980 <__assert_fail@plt+0x1c34>
   129dc:	push	{r4, r5, r6, lr}
   129e0:	mov	r4, r0
   129e4:	mov	r5, r1
   129e8:	mov	r6, r2
   129ec:	sub	sp, sp, #48	; 0x30
   129f0:	mov	ip, sp
   129f4:	ldr	lr, [pc, #64]	; 12a3c <__assert_fail@plt+0x1cf0>
   129f8:	ldm	lr!, {r0, r1, r2, r3}
   129fc:	stmia	ip!, {r0, r1, r2, r3}
   12a00:	ldm	lr!, {r0, r1, r2, r3}
   12a04:	stmia	ip!, {r0, r1, r2, r3}
   12a08:	ldm	lr, {r0, r1, r2, r3}
   12a0c:	stm	ip, {r0, r1, r2, r3}
   12a10:	mov	r1, r6
   12a14:	mov	r2, #1
   12a18:	mov	r0, sp
   12a1c:	bl	126a0 <__assert_fail@plt+0x1954>
   12a20:	mov	r3, sp
   12a24:	mov	r2, r5
   12a28:	mov	r1, r4
   12a2c:	mov	r0, #0
   12a30:	bl	12494 <__assert_fail@plt+0x1748>
   12a34:	add	sp, sp, #48	; 0x30
   12a38:	pop	{r4, r5, r6, pc}
   12a3c:	andeq	r5, r2, ip, asr #4
   12a40:	mov	r2, r1
   12a44:	mvn	r1, #0
   12a48:	b	129dc <__assert_fail@plt+0x1c90>
   12a4c:	mov	r1, #58	; 0x3a
   12a50:	b	12a40 <__assert_fail@plt+0x1cf4>
   12a54:	mov	r2, #58	; 0x3a
   12a58:	b	129dc <__assert_fail@plt+0x1c90>
   12a5c:	push	{r4, r5, lr}
   12a60:	sub	sp, sp, #100	; 0x64
   12a64:	mov	r4, r0
   12a68:	mov	r0, sp
   12a6c:	mov	r5, r2
   12a70:	bl	11648 <__assert_fail@plt+0x8fc>
   12a74:	mov	ip, sp
   12a78:	add	lr, sp, #48	; 0x30
   12a7c:	ldm	ip!, {r0, r1, r2, r3}
   12a80:	stmia	lr!, {r0, r1, r2, r3}
   12a84:	ldm	ip!, {r0, r1, r2, r3}
   12a88:	stmia	lr!, {r0, r1, r2, r3}
   12a8c:	ldm	ip, {r0, r1, r2, r3}
   12a90:	stm	lr, {r0, r1, r2, r3}
   12a94:	mov	r2, #1
   12a98:	mov	r1, #58	; 0x3a
   12a9c:	add	r0, sp, #48	; 0x30
   12aa0:	bl	126a0 <__assert_fail@plt+0x1954>
   12aa4:	add	r3, sp, #48	; 0x30
   12aa8:	mvn	r2, #0
   12aac:	mov	r1, r5
   12ab0:	mov	r0, r4
   12ab4:	bl	12494 <__assert_fail@plt+0x1748>
   12ab8:	add	sp, sp, #100	; 0x64
   12abc:	pop	{r4, r5, pc}
   12ac0:	push	{r4, r5, r6, r7, lr}
   12ac4:	mov	r4, r0
   12ac8:	mov	r6, r1
   12acc:	mov	r7, r2
   12ad0:	mov	r5, r3
   12ad4:	sub	sp, sp, #52	; 0x34
   12ad8:	ldr	lr, [pc, #68]	; 12b24 <__assert_fail@plt+0x1dd8>
   12adc:	mov	ip, sp
   12ae0:	ldm	lr!, {r0, r1, r2, r3}
   12ae4:	stmia	ip!, {r0, r1, r2, r3}
   12ae8:	ldm	lr!, {r0, r1, r2, r3}
   12aec:	stmia	ip!, {r0, r1, r2, r3}
   12af0:	ldm	lr, {r0, r1, r2, r3}
   12af4:	stm	ip, {r0, r1, r2, r3}
   12af8:	mov	r2, r7
   12afc:	mov	r1, r6
   12b00:	mov	r0, sp
   12b04:	bl	126fc <__assert_fail@plt+0x19b0>
   12b08:	ldr	r2, [sp, #72]	; 0x48
   12b0c:	mov	r3, sp
   12b10:	mov	r1, r5
   12b14:	mov	r0, r4
   12b18:	bl	12494 <__assert_fail@plt+0x1748>
   12b1c:	add	sp, sp, #52	; 0x34
   12b20:	pop	{r4, r5, r6, r7, pc}
   12b24:	andeq	r5, r2, ip, asr #4
   12b28:	mvn	ip, #0
   12b2c:	push	{r0, r1, r2, lr}
   12b30:	str	ip, [sp]
   12b34:	bl	12ac0 <__assert_fail@plt+0x1d74>
   12b38:	add	sp, sp, #12
   12b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b40:	mov	r3, r2
   12b44:	mov	r2, r1
   12b48:	mov	r1, r0
   12b4c:	mov	r0, #0
   12b50:	b	12b28 <__assert_fail@plt+0x1ddc>
   12b54:	push	{r0, r1, r2, lr}
   12b58:	str	r3, [sp]
   12b5c:	mov	r3, r2
   12b60:	mov	r2, r1
   12b64:	mov	r1, r0
   12b68:	mov	r0, #0
   12b6c:	bl	12ac0 <__assert_fail@plt+0x1d74>
   12b70:	add	sp, sp, #12
   12b74:	pop	{pc}		; (ldr pc, [sp], #4)
   12b78:	ldr	r3, [pc]	; 12b80 <__assert_fail@plt+0x1e34>
   12b7c:	b	12494 <__assert_fail@plt+0x1748>
   12b80:	andeq	r5, r2, r4, ror #1
   12b84:	mov	r2, r1
   12b88:	mov	r1, r0
   12b8c:	mov	r0, #0
   12b90:	b	12b78 <__assert_fail@plt+0x1e2c>
   12b94:	mvn	r2, #0
   12b98:	b	12b78 <__assert_fail@plt+0x1e2c>
   12b9c:	mov	r1, r0
   12ba0:	mov	r0, #0
   12ba4:	b	12b94 <__assert_fail@plt+0x1e48>
   12ba8:	push	{r4, r5, r6, lr}
   12bac:	cmp	r1, #0
   12bb0:	sub	sp, sp, #32
   12bb4:	mov	r5, r0
   12bb8:	ldr	r4, [sp, #48]	; 0x30
   12bbc:	ldr	r6, [sp, #52]	; 0x34
   12bc0:	beq	12c6c <__assert_fail@plt+0x1f20>
   12bc4:	mov	lr, r3
   12bc8:	mov	r3, r2
   12bcc:	mov	r2, r1
   12bd0:	ldr	r1, [pc, #740]	; 12ebc <__assert_fail@plt+0x2170>
   12bd4:	str	lr, [sp]
   12bd8:	bl	10c8c <fprintf@plt>
   12bdc:	mov	r2, #5
   12be0:	ldr	r1, [pc, #728]	; 12ec0 <__assert_fail@plt+0x2174>
   12be4:	mov	r0, #0
   12be8:	bl	10bc0 <dcgettext@plt>
   12bec:	mov	r2, r0
   12bf0:	movw	r3, #2022	; 0x7e6
   12bf4:	ldr	r1, [pc, #712]	; 12ec4 <__assert_fail@plt+0x2178>
   12bf8:	mov	r0, r5
   12bfc:	bl	10c8c <fprintf@plt>
   12c00:	mov	r1, r5
   12c04:	mov	r0, #10
   12c08:	bl	10d04 <fputc@plt>
   12c0c:	mov	r2, #5
   12c10:	ldr	r1, [pc, #688]	; 12ec8 <__assert_fail@plt+0x217c>
   12c14:	mov	r0, #0
   12c18:	bl	10bc0 <dcgettext@plt>
   12c1c:	mov	r1, r0
   12c20:	ldr	r2, [pc, #676]	; 12ecc <__assert_fail@plt+0x2180>
   12c24:	mov	r0, r5
   12c28:	bl	10c8c <fprintf@plt>
   12c2c:	mov	r1, r5
   12c30:	mov	r0, #10
   12c34:	bl	10d04 <fputc@plt>
   12c38:	cmp	r6, #9
   12c3c:	ldrls	pc, [pc, r6, lsl #2]
   12c40:	b	12eb0 <__assert_fail@plt+0x2164>
   12c44:	andeq	r2, r1, r8, ror #26
   12c48:	andeq	r2, r1, r8, ror ip
   12c4c:	andeq	r2, r1, r0, lsr #25
   12c50:	andeq	r2, r1, r8, asr #25
   12c54:	strdeq	r2, [r1], -r8
   12c58:	andeq	r2, r1, r0, lsr sp
   12c5c:	andeq	r2, r1, r0, ror sp
   12c60:			; <UNDEFINED> instruction: 0x00012db4
   12c64:	andeq	r2, r1, r0, lsl #28
   12c68:	andeq	r2, r1, r4, asr lr
   12c6c:	ldr	r1, [pc, #604]	; 12ed0 <__assert_fail@plt+0x2184>
   12c70:	bl	10c8c <fprintf@plt>
   12c74:	b	12bdc <__assert_fail@plt+0x1e90>
   12c78:	mov	r2, #5
   12c7c:	ldr	r1, [pc, #592]	; 12ed4 <__assert_fail@plt+0x2188>
   12c80:	mov	r0, #0
   12c84:	bl	10bc0 <dcgettext@plt>
   12c88:	ldr	r2, [r4]
   12c8c:	mov	r1, r0
   12c90:	mov	r0, r5
   12c94:	add	sp, sp, #32
   12c98:	pop	{r4, r5, r6, lr}
   12c9c:	b	10c8c <fprintf@plt>
   12ca0:	mov	r2, #5
   12ca4:	ldr	r1, [pc, #556]	; 12ed8 <__assert_fail@plt+0x218c>
   12ca8:	mov	r0, #0
   12cac:	bl	10bc0 <dcgettext@plt>
   12cb0:	ldrd	r2, [r4]
   12cb4:	mov	r1, r0
   12cb8:	mov	r0, r5
   12cbc:	add	sp, sp, #32
   12cc0:	pop	{r4, r5, r6, lr}
   12cc4:	b	10c8c <fprintf@plt>
   12cc8:	mov	r2, #5
   12ccc:	ldr	r1, [pc, #520]	; 12edc <__assert_fail@plt+0x2190>
   12cd0:	mov	r0, #0
   12cd4:	bl	10bc0 <dcgettext@plt>
   12cd8:	ldr	r3, [r4, #8]
   12cdc:	mov	r1, r0
   12ce0:	mov	r0, r5
   12ce4:	str	r3, [sp, #48]	; 0x30
   12ce8:	ldrd	r2, [r4]
   12cec:	add	sp, sp, #32
   12cf0:	pop	{r4, r5, r6, lr}
   12cf4:	b	10c8c <fprintf@plt>
   12cf8:	mov	r2, #5
   12cfc:	ldr	r1, [pc, #476]	; 12ee0 <__assert_fail@plt+0x2194>
   12d00:	mov	r0, #0
   12d04:	bl	10bc0 <dcgettext@plt>
   12d08:	ldr	r3, [r4, #12]
   12d0c:	mov	r1, r0
   12d10:	mov	r0, r5
   12d14:	str	r3, [sp, #52]	; 0x34
   12d18:	ldr	r3, [r4, #8]
   12d1c:	str	r3, [sp, #48]	; 0x30
   12d20:	ldrd	r2, [r4]
   12d24:	add	sp, sp, #32
   12d28:	pop	{r4, r5, r6, lr}
   12d2c:	b	10c8c <fprintf@plt>
   12d30:	mov	r2, #5
   12d34:	ldr	r1, [pc, #424]	; 12ee4 <__assert_fail@plt+0x2198>
   12d38:	mov	r0, #0
   12d3c:	bl	10bc0 <dcgettext@plt>
   12d40:	ldr	r3, [r4, #16]
   12d44:	mov	r1, r0
   12d48:	mov	r0, r5
   12d4c:	str	r3, [sp, #8]
   12d50:	ldr	r3, [r4, #12]
   12d54:	str	r3, [sp, #4]
   12d58:	ldr	r3, [r4, #8]
   12d5c:	str	r3, [sp]
   12d60:	ldrd	r2, [r4]
   12d64:	bl	10c8c <fprintf@plt>
   12d68:	add	sp, sp, #32
   12d6c:	pop	{r4, r5, r6, pc}
   12d70:	mov	r2, #5
   12d74:	ldr	r1, [pc, #364]	; 12ee8 <__assert_fail@plt+0x219c>
   12d78:	mov	r0, #0
   12d7c:	bl	10bc0 <dcgettext@plt>
   12d80:	ldr	r3, [r4, #20]
   12d84:	mov	r1, r0
   12d88:	mov	r0, r5
   12d8c:	str	r3, [sp, #12]
   12d90:	ldr	r3, [r4, #16]
   12d94:	str	r3, [sp, #8]
   12d98:	ldr	r3, [r4, #12]
   12d9c:	str	r3, [sp, #4]
   12da0:	ldr	r3, [r4, #8]
   12da4:	str	r3, [sp]
   12da8:	ldrd	r2, [r4]
   12dac:	bl	10c8c <fprintf@plt>
   12db0:	b	12d68 <__assert_fail@plt+0x201c>
   12db4:	mov	r2, #5
   12db8:	ldr	r1, [pc, #300]	; 12eec <__assert_fail@plt+0x21a0>
   12dbc:	mov	r0, #0
   12dc0:	bl	10bc0 <dcgettext@plt>
   12dc4:	ldr	r3, [r4, #24]
   12dc8:	mov	r1, r0
   12dcc:	mov	r0, r5
   12dd0:	str	r3, [sp, #16]
   12dd4:	ldr	r3, [r4, #20]
   12dd8:	str	r3, [sp, #12]
   12ddc:	ldr	r3, [r4, #16]
   12de0:	str	r3, [sp, #8]
   12de4:	ldr	r3, [r4, #12]
   12de8:	str	r3, [sp, #4]
   12dec:	ldr	r3, [r4, #8]
   12df0:	str	r3, [sp]
   12df4:	ldrd	r2, [r4]
   12df8:	bl	10c8c <fprintf@plt>
   12dfc:	b	12d68 <__assert_fail@plt+0x201c>
   12e00:	mov	r2, #5
   12e04:	ldr	r1, [pc, #228]	; 12ef0 <__assert_fail@plt+0x21a4>
   12e08:	mov	r0, #0
   12e0c:	bl	10bc0 <dcgettext@plt>
   12e10:	ldr	r3, [r4, #28]
   12e14:	mov	r1, r0
   12e18:	mov	r0, r5
   12e1c:	str	r3, [sp, #20]
   12e20:	ldr	r3, [r4, #24]
   12e24:	str	r3, [sp, #16]
   12e28:	ldr	r3, [r4, #20]
   12e2c:	str	r3, [sp, #12]
   12e30:	ldr	r3, [r4, #16]
   12e34:	str	r3, [sp, #8]
   12e38:	ldr	r3, [r4, #12]
   12e3c:	str	r3, [sp, #4]
   12e40:	ldr	r3, [r4, #8]
   12e44:	str	r3, [sp]
   12e48:	ldrd	r2, [r4]
   12e4c:	bl	10c8c <fprintf@plt>
   12e50:	b	12d68 <__assert_fail@plt+0x201c>
   12e54:	ldr	r1, [pc, #152]	; 12ef4 <__assert_fail@plt+0x21a8>
   12e58:	mov	r2, #5
   12e5c:	mov	r0, #0
   12e60:	bl	10bc0 <dcgettext@plt>
   12e64:	ldr	r3, [r4, #32]
   12e68:	mov	r1, r0
   12e6c:	mov	r0, r5
   12e70:	str	r3, [sp, #24]
   12e74:	ldr	r3, [r4, #28]
   12e78:	str	r3, [sp, #20]
   12e7c:	ldr	r3, [r4, #24]
   12e80:	str	r3, [sp, #16]
   12e84:	ldr	r3, [r4, #20]
   12e88:	str	r3, [sp, #12]
   12e8c:	ldr	r3, [r4, #16]
   12e90:	str	r3, [sp, #8]
   12e94:	ldr	r3, [r4, #12]
   12e98:	str	r3, [sp, #4]
   12e9c:	ldr	r3, [r4, #8]
   12ea0:	str	r3, [sp]
   12ea4:	ldrd	r2, [r4]
   12ea8:	bl	10c8c <fprintf@plt>
   12eac:	b	12d68 <__assert_fail@plt+0x201c>
   12eb0:	mov	r2, #5
   12eb4:	ldr	r1, [pc, #60]	; 12ef8 <__assert_fail@plt+0x21ac>
   12eb8:	b	12e5c <__assert_fail@plt+0x2110>
   12ebc:	muleq	r1, r1, ip
   12ec0:	andeq	r3, r1, r4, lsr #25
   12ec4:	andeq	r3, r1, ip, asr pc
   12ec8:	andeq	r3, r1, r8, lsr #25
   12ecc:	andeq	r3, r1, r3, asr sp
   12ed0:	muleq	r1, sp, ip
   12ed4:	andeq	r3, r1, r5, ror sp
   12ed8:	andeq	r3, r1, r5, lsl #27
   12edc:	muleq	r1, ip, sp
   12ee0:			; <UNDEFINED> instruction: 0x00013db8
   12ee4:	ldrdeq	r3, [r1], -r8
   12ee8:	strdeq	r3, [r1], -ip
   12eec:	andeq	r3, r1, r4, lsr #28
   12ef0:	andeq	r3, r1, r0, asr lr
   12ef4:	andeq	r3, r1, r0, lsl #29
   12ef8:			; <UNDEFINED> instruction: 0x00013eb4
   12efc:	push	{r0, r1, r4, lr}
   12f00:	mov	ip, #0
   12f04:	ldr	lr, [sp, #16]
   12f08:	ldr	r4, [lr, ip, lsl #2]
   12f0c:	cmp	r4, #0
   12f10:	bne	12f28 <__assert_fail@plt+0x21dc>
   12f14:	str	lr, [sp]
   12f18:	str	ip, [sp, #4]
   12f1c:	bl	12ba8 <__assert_fail@plt+0x1e5c>
   12f20:	add	sp, sp, #8
   12f24:	pop	{r4, pc}
   12f28:	add	ip, ip, #1
   12f2c:	b	12f08 <__assert_fail@plt+0x21bc>
   12f30:	push	{r4, r5, r6, lr}
   12f34:	sub	sp, sp, #48	; 0x30
   12f38:	mov	ip, #0
   12f3c:	add	lr, sp, #8
   12f40:	mov	r5, lr
   12f44:	ldr	r6, [sp, #64]	; 0x40
   12f48:	ldr	r4, [r6, ip, lsl #2]
   12f4c:	cmp	r4, #0
   12f50:	str	r4, [lr], #4
   12f54:	beq	12f64 <__assert_fail@plt+0x2218>
   12f58:	add	ip, ip, #1
   12f5c:	cmp	ip, #10
   12f60:	bne	12f48 <__assert_fail@plt+0x21fc>
   12f64:	stm	sp, {r5, ip}
   12f68:	bl	12ba8 <__assert_fail@plt+0x1e5c>
   12f6c:	add	sp, sp, #48	; 0x30
   12f70:	pop	{r4, r5, r6, pc}
   12f74:	push	{r3}		; (str r3, [sp, #-4]!)
   12f78:	push	{r0, r1, r2, r3, lr}
   12f7c:	add	r3, sp, #24
   12f80:	str	r3, [sp]
   12f84:	str	r3, [sp, #12]
   12f88:	ldr	r3, [sp, #20]
   12f8c:	bl	12f30 <__assert_fail@plt+0x21e4>
   12f90:	add	sp, sp, #16
   12f94:	pop	{lr}		; (ldr lr, [sp], #4)
   12f98:	add	sp, sp, #4
   12f9c:	bx	lr
   12fa0:	ldr	r3, [pc, #92]	; 13004 <__assert_fail@plt+0x22b8>
   12fa4:	mov	r0, #10
   12fa8:	push	{r4, lr}
   12fac:	ldr	r1, [r3]
   12fb0:	bl	10d04 <fputc@plt>
   12fb4:	mov	r2, #5
   12fb8:	ldr	r1, [pc, #72]	; 13008 <__assert_fail@plt+0x22bc>
   12fbc:	mov	r0, #0
   12fc0:	bl	10bc0 <dcgettext@plt>
   12fc4:	ldr	r1, [pc, #64]	; 1300c <__assert_fail@plt+0x22c0>
   12fc8:	bl	10b60 <printf@plt>
   12fcc:	mov	r2, #5
   12fd0:	ldr	r1, [pc, #56]	; 13010 <__assert_fail@plt+0x22c4>
   12fd4:	mov	r0, #0
   12fd8:	bl	10bc0 <dcgettext@plt>
   12fdc:	ldr	r2, [pc, #48]	; 13014 <__assert_fail@plt+0x22c8>
   12fe0:	ldr	r1, [pc, #48]	; 13018 <__assert_fail@plt+0x22cc>
   12fe4:	bl	10b60 <printf@plt>
   12fe8:	ldr	r1, [pc, #44]	; 1301c <__assert_fail@plt+0x22d0>
   12fec:	mov	r2, #5
   12ff0:	mov	r0, #0
   12ff4:	bl	10bc0 <dcgettext@plt>
   12ff8:	ldr	r1, [pc, #32]	; 13020 <__assert_fail@plt+0x22d4>
   12ffc:	pop	{r4, lr}
   13000:	b	10b60 <printf@plt>
   13004:	andeq	r5, r2, r4, lsr r1
   13008:	strdeq	r3, [r1], -r0
   1300c:	andeq	r3, r1, ip, asr #22
   13010:	andeq	r3, r1, r4, lsl #30
   13014:	andeq	r3, r1, r5, lsr #22
   13018:	andeq	r3, r1, fp, lsr sl
   1301c:	andeq	r3, r1, r8, lsl pc
   13020:	andeq	r3, r1, pc, lsr pc
   13024:	push	{r4, lr}
   13028:	bl	134a8 <__assert_fail@plt+0x275c>
   1302c:	cmp	r0, #0
   13030:	popne	{r4, pc}
   13034:	bl	132dc <__assert_fail@plt+0x2590>
   13038:	push	{r4, lr}
   1303c:	bl	134a8 <__assert_fail@plt+0x275c>
   13040:	cmp	r0, #0
   13044:	popne	{r4, pc}
   13048:	bl	132dc <__assert_fail@plt+0x2590>
   1304c:	b	13024 <__assert_fail@plt+0x22d8>
   13050:	push	{r4, r5, r6, lr}
   13054:	mov	r5, r0
   13058:	mov	r4, r1
   1305c:	bl	13524 <__assert_fail@plt+0x27d8>
   13060:	cmp	r0, #0
   13064:	popne	{r4, r5, r6, pc}
   13068:	adds	r4, r4, #0
   1306c:	movne	r4, #1
   13070:	cmp	r5, #0
   13074:	moveq	r4, #1
   13078:	cmp	r4, #0
   1307c:	popeq	{r4, r5, r6, pc}
   13080:	bl	132dc <__assert_fail@plt+0x2590>
   13084:	push	{r4, lr}
   13088:	bl	13664 <__assert_fail@plt+0x2918>
   1308c:	cmp	r0, #0
   13090:	popne	{r4, pc}
   13094:	bl	132dc <__assert_fail@plt+0x2590>
   13098:	push	{r4, r5, r6, lr}
   1309c:	mov	r6, r0
   130a0:	mov	r5, r1
   130a4:	mov	r4, r2
   130a8:	bl	13568 <__assert_fail@plt+0x281c>
   130ac:	cmp	r0, #0
   130b0:	popne	{r4, r5, r6, pc}
   130b4:	cmp	r6, #0
   130b8:	beq	130c8 <__assert_fail@plt+0x237c>
   130bc:	cmp	r5, #0
   130c0:	cmpne	r4, #0
   130c4:	popeq	{r4, r5, r6, pc}
   130c8:	bl	132dc <__assert_fail@plt+0x2590>
   130cc:	b	13098 <__assert_fail@plt+0x234c>
   130d0:	push	{r4, lr}
   130d4:	bl	13674 <__assert_fail@plt+0x2928>
   130d8:	cmp	r0, #0
   130dc:	popne	{r4, pc}
   130e0:	bl	132dc <__assert_fail@plt+0x2590>
   130e4:	mov	r2, r1
   130e8:	mov	r1, r0
   130ec:	mov	r0, #0
   130f0:	b	13098 <__assert_fail@plt+0x234c>
   130f4:	mov	r2, r1
   130f8:	mov	r1, r0
   130fc:	mov	r0, #0
   13100:	b	130d0 <__assert_fail@plt+0x2384>
   13104:	cmp	r0, #0
   13108:	push	{r4, r5, r6, lr}
   1310c:	mov	r5, r1
   13110:	ldr	r4, [r1]
   13114:	bne	13140 <__assert_fail@plt+0x23f4>
   13118:	cmp	r4, #0
   1311c:	bne	13130 <__assert_fail@plt+0x23e4>
   13120:	mov	r4, #64	; 0x40
   13124:	udiv	r4, r4, r2
   13128:	cmp	r2, #64	; 0x40
   1312c:	addhi	r4, r4, #1
   13130:	mov	r1, r4
   13134:	bl	13098 <__assert_fail@plt+0x234c>
   13138:	str	r4, [r5]
   1313c:	pop	{r4, r5, r6, pc}
   13140:	lsr	r3, r4, #1
   13144:	add	r3, r3, #1
   13148:	adds	r4, r4, r3
   1314c:	bcc	13130 <__assert_fail@plt+0x23e4>
   13150:	bl	132dc <__assert_fail@plt+0x2590>
   13154:	mov	r2, #1
   13158:	b	13104 <__assert_fail@plt+0x23b8>
   1315c:	ldr	ip, [r1]
   13160:	push	{r4, r5, r6, r7, r8, lr}
   13164:	mov	r5, r1
   13168:	mvn	r8, r3
   1316c:	lsr	r8, r8, #31
   13170:	ldr	lr, [sp, #24]
   13174:	asr	r1, ip, #1
   13178:	adds	r4, ip, r1
   1317c:	mvnvs	r4, #-2147483648	; 0x80000000
   13180:	cmp	r3, r4
   13184:	movge	r1, #0
   13188:	andlt	r1, r8, #1
   1318c:	cmp	r1, #0
   13190:	movne	r4, r3
   13194:	smull	r6, r7, r4, lr
   13198:	cmp	r7, r6, asr #31
   1319c:	bne	131b4 <__assert_fail@plt+0x2468>
   131a0:	cmp	r6, #63	; 0x3f
   131a4:	mov	r1, r6
   131a8:	bgt	131c4 <__assert_fail@plt+0x2478>
   131ac:	mov	r1, #64	; 0x40
   131b0:	b	131b8 <__assert_fail@plt+0x246c>
   131b4:	mvn	r1, #-2147483648	; 0x80000000
   131b8:	sdiv	r4, r1, lr
   131bc:	mls	r6, lr, r4, r1
   131c0:	sub	r1, r1, r6
   131c4:	cmp	r0, #0
   131c8:	sub	r6, r4, ip
   131cc:	streq	r0, [r5]
   131d0:	cmp	r6, r2
   131d4:	bge	13208 <__assert_fail@plt+0x24bc>
   131d8:	adds	r4, ip, r2
   131dc:	bvs	13204 <__assert_fail@plt+0x24b8>
   131e0:	cmp	r4, r3
   131e4:	movle	r3, #0
   131e8:	andgt	r3, r8, #1
   131ec:	cmp	r3, #0
   131f0:	bne	13204 <__assert_fail@plt+0x24b8>
   131f4:	smull	r2, r3, r4, lr
   131f8:	cmp	r3, r2, asr #31
   131fc:	mov	r1, r2
   13200:	beq	13208 <__assert_fail@plt+0x24bc>
   13204:	bl	132dc <__assert_fail@plt+0x2590>
   13208:	bl	13050 <__assert_fail@plt+0x2304>
   1320c:	str	r4, [r5]
   13210:	pop	{r4, r5, r6, r7, r8, pc}
   13214:	push	{r4, lr}
   13218:	bl	1331c <__assert_fail@plt+0x25d0>
   1321c:	cmp	r0, #0
   13220:	popne	{r4, pc}
   13224:	bl	132dc <__assert_fail@plt+0x2590>
   13228:	mov	r1, #1
   1322c:	b	13214 <__assert_fail@plt+0x24c8>
   13230:	push	{r4, lr}
   13234:	bl	1331c <__assert_fail@plt+0x25d0>
   13238:	cmp	r0, #0
   1323c:	popne	{r4, pc}
   13240:	bl	132dc <__assert_fail@plt+0x2590>
   13244:	mov	r1, #1
   13248:	b	13230 <__assert_fail@plt+0x24e4>
   1324c:	push	{r4, r5, r6, lr}
   13250:	mov	r4, r1
   13254:	mov	r5, r0
   13258:	mov	r0, r1
   1325c:	bl	13024 <__assert_fail@plt+0x22d8>
   13260:	mov	r2, r4
   13264:	mov	r1, r5
   13268:	pop	{r4, r5, r6, lr}
   1326c:	b	10b9c <memcpy@plt>
   13270:	push	{r4, r5, r6, lr}
   13274:	mov	r4, r1
   13278:	mov	r5, r0
   1327c:	mov	r0, r1
   13280:	bl	13038 <__assert_fail@plt+0x22ec>
   13284:	mov	r2, r4
   13288:	mov	r1, r5
   1328c:	pop	{r4, r5, r6, lr}
   13290:	b	10b9c <memcpy@plt>
   13294:	push	{r4, r5, r6, lr}
   13298:	mov	r5, r0
   1329c:	add	r0, r1, #1
   132a0:	mov	r4, r1
   132a4:	bl	13038 <__assert_fail@plt+0x22ec>
   132a8:	mov	r2, #0
   132ac:	mov	r1, r5
   132b0:	strb	r2, [r0, r4]
   132b4:	mov	r2, r4
   132b8:	pop	{r4, r5, r6, lr}
   132bc:	b	10b9c <memcpy@plt>
   132c0:	push	{r4, lr}
   132c4:	mov	r4, r0
   132c8:	bl	10c80 <strlen@plt>
   132cc:	add	r1, r0, #1
   132d0:	mov	r0, r4
   132d4:	pop	{r4, lr}
   132d8:	b	1324c <__assert_fail@plt+0x2500>
   132dc:	ldr	r3, [pc, #44]	; 13310 <__assert_fail@plt+0x25c4>
   132e0:	mov	r2, #5
   132e4:	mov	r0, #0
   132e8:	push	{r4, lr}
   132ec:	ldr	r1, [pc, #32]	; 13314 <__assert_fail@plt+0x25c8>
   132f0:	ldr	r4, [r3]
   132f4:	bl	10bc0 <dcgettext@plt>
   132f8:	mov	r3, r0
   132fc:	ldr	r2, [pc, #20]	; 13318 <__assert_fail@plt+0x25cc>
   13300:	mov	r1, #0
   13304:	mov	r0, r4
   13308:	bl	10c20 <error@plt>
   1330c:	bl	10d40 <abort@plt>
   13310:	ldrdeq	r5, [r2], -r0
   13314:	andeq	r3, r1, fp, lsl #31
   13318:	muleq	r1, r5, fp
   1331c:	cmp	r1, #0
   13320:	cmpne	r0, #0
   13324:	beq	1335c <__assert_fail@plt+0x2610>
   13328:	push	{r4, r5, r6, lr}
   1332c:	umull	r4, r5, r0, r1
   13330:	adds	r3, r5, #0
   13334:	movne	r3, #1
   13338:	cmp	r4, #0
   1333c:	blt	13348 <__assert_fail@plt+0x25fc>
   13340:	cmp	r3, #0
   13344:	beq	13368 <__assert_fail@plt+0x261c>
   13348:	bl	10c98 <__errno_location@plt>
   1334c:	mov	r3, #12
   13350:	str	r3, [r0]
   13354:	mov	r0, #0
   13358:	pop	{r4, r5, r6, pc}
   1335c:	mov	r1, #1
   13360:	mov	r0, r1
   13364:	b	10b3c <calloc@plt>
   13368:	pop	{r4, r5, r6, lr}
   1336c:	b	13364 <__assert_fail@plt+0x2618>
   13370:	push	{r0, r1, r4, lr}
   13374:	subs	r4, r0, #0
   13378:	bne	1338c <__assert_fail@plt+0x2640>
   1337c:	mov	r0, r4
   13380:	add	sp, sp, #8
   13384:	pop	{r4, lr}
   13388:	b	10b6c <fflush@plt>
   1338c:	bl	10c44 <__freading@plt>
   13390:	cmp	r0, #0
   13394:	beq	1337c <__assert_fail@plt+0x2630>
   13398:	ldr	r3, [r4]
   1339c:	tst	r3, #256	; 0x100
   133a0:	beq	1337c <__assert_fail@plt+0x2630>
   133a4:	mov	r3, #1
   133a8:	mov	r2, #0
   133ac:	mov	r0, r4
   133b0:	str	r3, [sp]
   133b4:	mov	r3, #0
   133b8:	bl	13410 <__assert_fail@plt+0x26c4>
   133bc:	b	1337c <__assert_fail@plt+0x2630>
   133c0:	push	{r0, r1, r2, r4, r5, lr}
   133c4:	mov	r5, r0
   133c8:	bl	10c98 <__errno_location@plt>
   133cc:	mov	r4, r0
   133d0:	mov	r0, r5
   133d4:	ldr	r3, [r4]
   133d8:	str	r3, [sp]
   133dc:	str	r3, [sp, #4]
   133e0:	mov	r3, #0
   133e4:	str	r3, [r4]
   133e8:	bl	10b78 <free@plt>
   133ec:	ldr	r3, [r4]
   133f0:	add	r2, sp, #8
   133f4:	clz	r3, r3
   133f8:	lsr	r3, r3, #5
   133fc:	add	r3, r2, r3, lsl #2
   13400:	ldr	r3, [r3, #-8]
   13404:	str	r3, [r4]
   13408:	add	sp, sp, #12
   1340c:	pop	{r4, r5, pc}
   13410:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13414:	mov	r4, r0
   13418:	ldmib	r0, {ip, lr}
   1341c:	ldr	r8, [sp, #32]
   13420:	cmp	lr, ip
   13424:	bne	13494 <__assert_fail@plt+0x2748>
   13428:	ldr	ip, [r0, #16]
   1342c:	ldr	lr, [r0, #20]
   13430:	cmp	lr, ip
   13434:	bne	13494 <__assert_fail@plt+0x2748>
   13438:	ldr	r5, [r0, #36]	; 0x24
   1343c:	cmp	r5, #0
   13440:	bne	13494 <__assert_fail@plt+0x2748>
   13444:	mov	r6, r2
   13448:	mov	r7, r3
   1344c:	bl	10cbc <fileno@plt>
   13450:	mov	r2, r6
   13454:	mov	r3, r7
   13458:	str	r8, [sp]
   1345c:	bl	10bf0 <lseek64@plt>
   13460:	mvn	r3, #0
   13464:	mvn	r2, #0
   13468:	cmp	r1, r3
   1346c:	cmpeq	r0, r2
   13470:	mvneq	r0, #0
   13474:	beq	1348c <__assert_fail@plt+0x2740>
   13478:	ldr	r3, [r4]
   1347c:	strd	r0, [r4, #80]	; 0x50
   13480:	mov	r0, r5
   13484:	bic	r3, r3, #16
   13488:	str	r3, [r4]
   1348c:	add	sp, sp, #8
   13490:	pop	{r4, r5, r6, r7, r8, pc}
   13494:	mov	r0, r4
   13498:	str	r8, [sp, #32]
   1349c:	add	sp, sp, #8
   134a0:	pop	{r4, r5, r6, r7, r8, lr}
   134a4:	b	10cd4 <fseeko64@plt>
   134a8:	cmp	r0, #0
   134ac:	beq	134cc <__assert_fail@plt+0x2780>
   134b0:	bge	134d0 <__assert_fail@plt+0x2784>
   134b4:	push	{r4, lr}
   134b8:	bl	10c98 <__errno_location@plt>
   134bc:	mov	r3, #12
   134c0:	str	r3, [r0]
   134c4:	mov	r0, #0
   134c8:	pop	{r4, pc}
   134cc:	mov	r0, #1
   134d0:	b	10c2c <malloc@plt>
   134d4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134d8:	subs	r5, r0, #0
   134dc:	mov	r7, r2
   134e0:	addeq	r5, sp, #4
   134e4:	mov	r6, r1
   134e8:	mov	r0, r5
   134ec:	bl	10c14 <mbrtowc@plt>
   134f0:	cmp	r7, #0
   134f4:	cmnne	r0, #3
   134f8:	mov	r4, r0
   134fc:	bls	13518 <__assert_fail@plt+0x27cc>
   13500:	mov	r0, #0
   13504:	bl	13604 <__assert_fail@plt+0x28b8>
   13508:	cmp	r0, #0
   1350c:	ldrbeq	r3, [r6]
   13510:	moveq	r4, #1
   13514:	streq	r3, [r5]
   13518:	mov	r0, r4
   1351c:	add	sp, sp, #12
   13520:	pop	{r4, r5, r6, r7, pc}
   13524:	cmp	r0, #0
   13528:	bne	13534 <__assert_fail@plt+0x27e8>
   1352c:	mov	r0, r1
   13530:	b	134a8 <__assert_fail@plt+0x275c>
   13534:	cmp	r1, #0
   13538:	push	{r4, lr}
   1353c:	bne	1354c <__assert_fail@plt+0x2800>
   13540:	bl	133c0 <__assert_fail@plt+0x2674>
   13544:	mov	r0, #0
   13548:	pop	{r4, pc}
   1354c:	blt	13558 <__assert_fail@plt+0x280c>
   13550:	pop	{r4, lr}
   13554:	b	10bcc <realloc@plt>
   13558:	bl	10c98 <__errno_location@plt>
   1355c:	mov	r3, #12
   13560:	str	r3, [r0]
   13564:	b	13544 <__assert_fail@plt+0x27f8>
   13568:	umull	r2, r3, r1, r2
   1356c:	cmp	r3, #0
   13570:	bne	1357c <__assert_fail@plt+0x2830>
   13574:	mov	r1, r2
   13578:	b	13524 <__assert_fail@plt+0x27d8>
   1357c:	push	{r4, lr}
   13580:	bl	10c98 <__errno_location@plt>
   13584:	mov	r3, #12
   13588:	str	r3, [r0]
   1358c:	mov	r0, #0
   13590:	pop	{r4, pc}
   13594:	push	{r4, r5, r6, lr}
   13598:	mov	r4, r0
   1359c:	bl	10c08 <__fpending@plt>
   135a0:	mov	r5, r0
   135a4:	mov	r0, r4
   135a8:	bl	10b84 <ferror@plt>
   135ac:	mov	r6, r0
   135b0:	mov	r0, r4
   135b4:	bl	10cc8 <fclose@plt>
   135b8:	cmp	r6, #0
   135bc:	mov	r4, r0
   135c0:	bne	135ec <__assert_fail@plt+0x28a0>
   135c4:	cmp	r0, #0
   135c8:	beq	135e4 <__assert_fail@plt+0x2898>
   135cc:	cmp	r5, #0
   135d0:	bne	135fc <__assert_fail@plt+0x28b0>
   135d4:	bl	10c98 <__errno_location@plt>
   135d8:	ldr	r4, [r0]
   135dc:	subs	r4, r4, #9
   135e0:	mvnne	r4, #0
   135e4:	mov	r0, r4
   135e8:	pop	{r4, r5, r6, pc}
   135ec:	cmp	r0, #0
   135f0:	bne	135fc <__assert_fail@plt+0x28b0>
   135f4:	bl	10c98 <__errno_location@plt>
   135f8:	str	r4, [r0]
   135fc:	mvn	r4, #0
   13600:	b	135e4 <__assert_fail@plt+0x2898>
   13604:	push	{lr}		; (str lr, [sp, #-4]!)
   13608:	sub	sp, sp, #268	; 0x10c
   1360c:	movw	r2, #257	; 0x101
   13610:	add	r1, sp, #4
   13614:	bl	136bc <__assert_fail@plt+0x2970>
   13618:	cmp	r0, #0
   1361c:	movne	r0, #0
   13620:	bne	13650 <__assert_fail@plt+0x2904>
   13624:	ldr	r1, [pc, #44]	; 13658 <__assert_fail@plt+0x290c>
   13628:	add	r0, sp, #4
   1362c:	bl	10b48 <strcmp@plt>
   13630:	cmp	r0, #0
   13634:	beq	1364c <__assert_fail@plt+0x2900>
   13638:	ldr	r1, [pc, #28]	; 1365c <__assert_fail@plt+0x2910>
   1363c:	add	r0, sp, #4
   13640:	bl	10b48 <strcmp@plt>
   13644:	adds	r0, r0, #0
   13648:	movne	r0, #1
   1364c:	and	r0, r0, #1
   13650:	add	sp, sp, #268	; 0x10c
   13654:	pop	{pc}		; (ldr pc, [sp], #4)
   13658:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1365c:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   13660:	b	134a8 <__assert_fail@plt+0x275c>
   13664:	cmp	r1, #0
   13668:	orreq	r1, r1, #1
   1366c:	b	13524 <__assert_fail@plt+0x27d8>
   13670:	b	1331c <__assert_fail@plt+0x25d0>
   13674:	cmp	r2, #0
   13678:	cmpne	r1, #0
   1367c:	moveq	r2, #1
   13680:	moveq	r1, r2
   13684:	b	13568 <__assert_fail@plt+0x281c>
   13688:	push	{r4, lr}
   1368c:	mov	r0, #14
   13690:	bl	10cf8 <nl_langinfo@plt>
   13694:	cmp	r0, #0
   13698:	beq	136b0 <__assert_fail@plt+0x2964>
   1369c:	ldrb	r2, [r0]
   136a0:	ldr	r3, [pc, #16]	; 136b8 <__assert_fail@plt+0x296c>
   136a4:	cmp	r2, #0
   136a8:	moveq	r0, r3
   136ac:	pop	{r4, pc}
   136b0:	ldr	r0, [pc]	; 136b8 <__assert_fail@plt+0x296c>
   136b4:	pop	{r4, pc}
   136b8:	andeq	r3, r1, r4, lsr #31
   136bc:	push	{r4, r5, r6, lr}
   136c0:	mov	r5, r1
   136c4:	mov	r1, #0
   136c8:	mov	r4, r2
   136cc:	bl	10ce0 <setlocale@plt>
   136d0:	subs	r6, r0, #0
   136d4:	bne	136e8 <__assert_fail@plt+0x299c>
   136d8:	cmp	r4, #0
   136dc:	mov	r0, #22
   136e0:	strbne	r6, [r5]
   136e4:	pop	{r4, r5, r6, pc}
   136e8:	bl	10c80 <strlen@plt>
   136ec:	cmp	r4, r0
   136f0:	bls	1370c <__assert_fail@plt+0x29c0>
   136f4:	add	r2, r0, #1
   136f8:	mov	r1, r6
   136fc:	mov	r0, r5
   13700:	bl	10b9c <memcpy@plt>
   13704:	mov	r0, #0
   13708:	pop	{r4, r5, r6, pc}
   1370c:	cmp	r4, #0
   13710:	beq	13730 <__assert_fail@plt+0x29e4>
   13714:	sub	r4, r4, #1
   13718:	mov	r1, r6
   1371c:	mov	r2, r4
   13720:	mov	r0, r5
   13724:	bl	10b9c <memcpy@plt>
   13728:	mov	r3, #0
   1372c:	strb	r3, [r5, r4]
   13730:	mov	r0, #34	; 0x22
   13734:	pop	{r4, r5, r6, pc}
   13738:	mov	r1, #0
   1373c:	b	10ce0 <setlocale@plt>
   13740:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13744:	mov	r7, r0
   13748:	ldr	r6, [pc, #72]	; 13798 <__assert_fail@plt+0x2a4c>
   1374c:	ldr	r5, [pc, #72]	; 1379c <__assert_fail@plt+0x2a50>
   13750:	add	r6, pc, r6
   13754:	add	r5, pc, r5
   13758:	sub	r6, r6, r5
   1375c:	mov	r8, r1
   13760:	mov	r9, r2
   13764:	bl	10b1c <calloc@plt-0x20>
   13768:	asrs	r6, r6, #2
   1376c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13770:	mov	r4, #0
   13774:	add	r4, r4, #1
   13778:	ldr	r3, [r5], #4
   1377c:	mov	r2, r9
   13780:	mov	r1, r8
   13784:	mov	r0, r7
   13788:	blx	r3
   1378c:	cmp	r6, r4
   13790:	bne	13774 <__assert_fail@plt+0x2a28>
   13794:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13798:			; <UNDEFINED> instruction: 0x000117bc
   1379c:			; <UNDEFINED> instruction: 0x000117b4
   137a0:	bx	lr
   137a4:	ldr	r3, [pc, #12]	; 137b8 <__assert_fail@plt+0x2a6c>
   137a8:	mov	r1, #0
   137ac:	add	r3, pc, r3
   137b0:	ldr	r2, [r3]
   137b4:	b	10ca4 <__cxa_atexit@plt>
   137b8:	andeq	r1, r1, r4, lsl r9

Disassembly of section .fini:

000137bc <.fini>:
   137bc:	push	{r3, lr}
   137c0:	pop	{r3, pc}
