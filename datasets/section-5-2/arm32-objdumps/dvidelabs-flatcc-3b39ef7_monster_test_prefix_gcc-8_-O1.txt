
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

00012268 <.init>:
   12268:	push	{r3, lr}
   1226c:	bl	1236c <_start@@Base+0x3c>
   12270:	pop	{r3, pc}

Disassembly of section .plt:

00012274 <free@plt-0x14>:
   12274:	push	{lr}		; (str lr, [sp, #-4]!)
   12278:	ldr	lr, [pc, #4]	; 12284 <free@plt-0x4>
   1227c:	add	lr, pc, lr
   12280:	ldr	pc, [lr, #8]!
   12284:	andeq	r8, r1, ip, ror sp

00012288 <free@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #24, 20	; 0x18000
   12290:	ldr	pc, [ip, #3452]!	; 0xd7c

00012294 <memcpy@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #24, 20	; 0x18000
   1229c:	ldr	pc, [ip, #3444]!	; 0xd74

000122a0 <memcmp@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #24, 20	; 0x18000
   122a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000122ac <realloc@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #24, 20	; 0x18000
   122b4:	ldr	pc, [ip, #3428]!	; 0xd64

000122b8 <malloc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #24, 20	; 0x18000
   122c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000122c4 <__libc_start_main@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #24, 20	; 0x18000
   122cc:	ldr	pc, [ip, #3412]!	; 0xd54

000122d0 <__gmon_start__@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #24, 20	; 0x18000
   122d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000122dc <strlen@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #24, 20	; 0x18000
   122e4:	ldr	pc, [ip, #3396]!	; 0xd44

000122e8 <posix_memalign@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #24, 20	; 0x18000
   122f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000122f4 <memset@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #24, 20	; 0x18000
   122fc:	ldr	pc, [ip, #3380]!	; 0xd34

00012300 <strncpy@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #24, 20	; 0x18000
   12308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001230c <memchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #24, 20	; 0x18000
   12314:	ldr	pc, [ip, #3364]!	; 0xd24

00012318 <abort@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #24, 20	; 0x18000
   12320:	ldr	pc, [ip, #3356]!	; 0xd1c

00012324 <__assert_fail@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #24, 20	; 0x18000
   1232c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00012330 <_start@@Base>:
   12330:	mov	fp, #0
   12334:	mov	lr, #0
   12338:	pop	{r1}		; (ldr r1, [sp], #4)
   1233c:	mov	r2, sp
   12340:	push	{r2}		; (str r2, [sp, #-4]!)
   12344:	push	{r0}		; (str r0, [sp, #-4]!)
   12348:	ldr	ip, [pc, #16]	; 12360 <_start@@Base+0x30>
   1234c:	push	{ip}		; (str ip, [sp, #-4]!)
   12350:	ldr	r0, [pc, #12]	; 12364 <_start@@Base+0x34>
   12354:	ldr	r3, [pc, #12]	; 12368 <_start@@Base+0x38>
   12358:	bl	122c4 <__libc_start_main@plt>
   1235c:	bl	12318 <abort@plt>
   12360:	andeq	r9, r1, r4, asr #5
   12364:	andeq	r2, r1, r0, ror #28
   12368:	andeq	r9, r1, r4, ror #4
   1236c:	ldr	r3, [pc, #20]	; 12388 <_start@@Base+0x58>
   12370:	ldr	r2, [pc, #20]	; 1238c <_start@@Base+0x5c>
   12374:	add	r3, pc, r3
   12378:	ldr	r2, [r3, r2]
   1237c:	cmp	r2, #0
   12380:	bxeq	lr
   12384:	b	122d0 <__gmon_start__@plt>
   12388:	andeq	r8, r1, r4, lsl #25
   1238c:	andeq	r0, r0, r4, asr #32
   12390:	ldr	r0, [pc, #24]	; 123b0 <_start@@Base+0x80>
   12394:	ldr	r3, [pc, #24]	; 123b4 <_start@@Base+0x84>
   12398:	cmp	r3, r0
   1239c:	bxeq	lr
   123a0:	ldr	r3, [pc, #16]	; 123b8 <_start@@Base+0x88>
   123a4:	cmp	r3, #0
   123a8:	bxeq	lr
   123ac:	bx	r3
   123b0:	andeq	fp, r2, r0, asr r0
   123b4:	andeq	fp, r2, r0, asr r0
   123b8:	andeq	r0, r0, r0
   123bc:	ldr	r0, [pc, #36]	; 123e8 <_start@@Base+0xb8>
   123c0:	ldr	r1, [pc, #36]	; 123ec <_start@@Base+0xbc>
   123c4:	sub	r1, r1, r0
   123c8:	asr	r1, r1, #2
   123cc:	add	r1, r1, r1, lsr #31
   123d0:	asrs	r1, r1, #1
   123d4:	bxeq	lr
   123d8:	ldr	r3, [pc, #16]	; 123f0 <_start@@Base+0xc0>
   123dc:	cmp	r3, #0
   123e0:	bxeq	lr
   123e4:	bx	r3
   123e8:	andeq	fp, r2, r0, asr r0
   123ec:	andeq	fp, r2, r0, asr r0
   123f0:	andeq	r0, r0, r0
   123f4:	push	{r4, lr}
   123f8:	ldr	r4, [pc, #24]	; 12418 <_start@@Base+0xe8>
   123fc:	ldrb	r3, [r4]
   12400:	cmp	r3, #0
   12404:	popne	{r4, pc}
   12408:	bl	12390 <_start@@Base+0x60>
   1240c:	mov	r3, #1
   12410:	strb	r3, [r4]
   12414:	pop	{r4, pc}
   12418:	andeq	fp, r2, r0, asr r0
   1241c:	b	123bc <_start@@Base+0x8c>
   12420:	mov	r0, #0
   12424:	bx	lr
   12428:	mov	r0, #0
   1242c:	bx	lr
   12430:	str	r4, [sp, #-8]!
   12434:	str	lr, [sp, #4]
   12438:	mov	r3, #4
   1243c:	mov	r2, r3
   12440:	mov	r1, #0
   12444:	bl	17e4c <flatcc_verify_field@@Base>
   12448:	ldr	r4, [sp]
   1244c:	add	sp, sp, #4
   12450:	pop	{pc}		; (ldr pc, [sp], #4)
   12454:	str	r4, [sp, #-8]!
   12458:	str	lr, [sp, #4]
   1245c:	mov	r4, r0
   12460:	mov	r3, #8
   12464:	mov	r2, r3
   12468:	mov	r1, #0
   1246c:	bl	17e4c <flatcc_verify_field@@Base>
   12470:	cmp	r0, #0
   12474:	beq	12484 <_start@@Base+0x154>
   12478:	ldr	r4, [sp]
   1247c:	add	sp, sp, #4
   12480:	pop	{pc}		; (ldr pc, [sp], #4)
   12484:	mov	r3, #4
   12488:	mov	r2, r3
   1248c:	mov	r1, #1
   12490:	mov	r0, r4
   12494:	bl	17e4c <flatcc_verify_field@@Base>
   12498:	b	12478 <_start@@Base+0x148>
   1249c:	str	r4, [sp, #-8]!
   124a0:	str	lr, [sp, #4]
   124a4:	mov	r4, r0
   124a8:	mov	r3, #8
   124ac:	mov	r2, r3
   124b0:	mov	r1, #0
   124b4:	bl	17e4c <flatcc_verify_field@@Base>
   124b8:	cmp	r0, #0
   124bc:	beq	124cc <_start@@Base+0x19c>
   124c0:	ldr	r4, [sp]
   124c4:	add	sp, sp, #4
   124c8:	pop	{pc}		; (ldr pc, [sp], #4)
   124cc:	mov	r3, #4
   124d0:	mov	r2, r3
   124d4:	mov	r1, #1
   124d8:	mov	r0, r4
   124dc:	bl	17e4c <flatcc_verify_field@@Base>
   124e0:	b	124c0 <_start@@Base+0x190>
   124e4:	str	r4, [sp, #-8]!
   124e8:	str	lr, [sp, #4]
   124ec:	mov	r4, r0
   124f0:	mov	r3, #1
   124f4:	mov	r2, r3
   124f8:	mov	r1, #0
   124fc:	bl	17e4c <flatcc_verify_field@@Base>
   12500:	cmp	r0, #0
   12504:	beq	12514 <_start@@Base+0x1e4>
   12508:	ldr	r4, [sp]
   1250c:	add	sp, sp, #4
   12510:	pop	{pc}		; (ldr pc, [sp], #4)
   12514:	mov	r3, #1
   12518:	mov	r2, r3
   1251c:	mov	r1, r3
   12520:	mov	r0, r4
   12524:	bl	17e4c <flatcc_verify_field@@Base>
   12528:	cmp	r0, #0
   1252c:	bne	12508 <_start@@Base+0x1d8>
   12530:	mov	r3, #1
   12534:	mov	r2, r3
   12538:	mov	r1, #2
   1253c:	mov	r0, r4
   12540:	bl	17e4c <flatcc_verify_field@@Base>
   12544:	cmp	r0, #0
   12548:	bne	12508 <_start@@Base+0x1d8>
   1254c:	mov	r3, #1
   12550:	mov	r2, r3
   12554:	mov	r1, #3
   12558:	mov	r0, r4
   1255c:	bl	17e4c <flatcc_verify_field@@Base>
   12560:	b	12508 <_start@@Base+0x1d8>
   12564:	str	r4, [sp, #-8]!
   12568:	str	lr, [sp, #4]
   1256c:	mov	r4, r0
   12570:	mov	r2, #0
   12574:	mov	r1, r2
   12578:	bl	17ec4 <flatcc_verify_string_field@@Base>
   1257c:	cmp	r0, #0
   12580:	beq	12590 <_start@@Base+0x260>
   12584:	ldr	r4, [sp]
   12588:	add	sp, sp, #4
   1258c:	pop	{pc}		; (ldr pc, [sp], #4)
   12590:	mov	r3, #8
   12594:	mov	r2, r3
   12598:	mov	r1, #1
   1259c:	mov	r0, r4
   125a0:	bl	17e4c <flatcc_verify_field@@Base>
   125a4:	cmp	r0, #0
   125a8:	bne	12584 <_start@@Base+0x254>
   125ac:	mov	r3, #2
   125b0:	mov	r2, r3
   125b4:	mov	r1, r3
   125b8:	mov	r0, r4
   125bc:	bl	17e4c <flatcc_verify_field@@Base>
   125c0:	b	12584 <_start@@Base+0x254>
   125c4:	str	r4, [sp, #-8]!
   125c8:	str	lr, [sp, #4]
   125cc:	mov	r4, r0
   125d0:	mov	r2, #0
   125d4:	mov	r1, r2
   125d8:	bl	17ec4 <flatcc_verify_string_field@@Base>
   125dc:	cmp	r0, #0
   125e0:	beq	125f0 <_start@@Base+0x2c0>
   125e4:	ldr	r4, [sp]
   125e8:	add	sp, sp, #4
   125ec:	pop	{pc}		; (ldr pc, [sp], #4)
   125f0:	mov	r3, #4
   125f4:	mov	r2, r3
   125f8:	mov	r1, #1
   125fc:	mov	r0, r4
   12600:	bl	17e4c <flatcc_verify_field@@Base>
   12604:	cmp	r0, #0
   12608:	bne	125e4 <_start@@Base+0x2b4>
   1260c:	mov	r2, #0
   12610:	mov	r1, #2
   12614:	mov	r0, r4
   12618:	bl	17ec4 <flatcc_verify_string_field@@Base>
   1261c:	cmp	r0, #0
   12620:	bne	125e4 <_start@@Base+0x2b4>
   12624:	mov	r3, #8
   12628:	mov	r2, r3
   1262c:	mov	r1, #3
   12630:	mov	r0, r4
   12634:	bl	17e4c <flatcc_verify_field@@Base>
   12638:	cmp	r0, #0
   1263c:	bne	125e4 <_start@@Base+0x2b4>
   12640:	mov	r2, #0
   12644:	mov	r1, #4
   12648:	mov	r0, r4
   1264c:	bl	17ec4 <flatcc_verify_string_field@@Base>
   12650:	cmp	r0, #0
   12654:	bne	125e4 <_start@@Base+0x2b4>
   12658:	mov	r3, #8
   1265c:	mov	r2, r3
   12660:	mov	r1, #5
   12664:	mov	r0, r4
   12668:	bl	17e4c <flatcc_verify_field@@Base>
   1266c:	cmp	r0, #0
   12670:	bne	125e4 <_start@@Base+0x2b4>
   12674:	mov	r3, #4
   12678:	mov	r2, r3
   1267c:	mov	r1, #6
   12680:	mov	r0, r4
   12684:	bl	17e4c <flatcc_verify_field@@Base>
   12688:	cmp	r0, #0
   1268c:	bne	125e4 <_start@@Base+0x2b4>
   12690:	mov	r3, #8
   12694:	mov	r2, r3
   12698:	mov	r1, #7
   1269c:	mov	r0, r4
   126a0:	bl	17e4c <flatcc_verify_field@@Base>
   126a4:	cmp	r0, #0
   126a8:	bne	125e4 <_start@@Base+0x2b4>
   126ac:	mov	r3, #4
   126b0:	mov	r2, r3
   126b4:	mov	r1, #8
   126b8:	mov	r0, r4
   126bc:	bl	17e4c <flatcc_verify_field@@Base>
   126c0:	b	125e4 <_start@@Base+0x2b4>
   126c4:	str	r4, [sp, #-8]!
   126c8:	str	lr, [sp, #4]
   126cc:	mov	r4, r0
   126d0:	movw	r3, #9668	; 0x25c4
   126d4:	movt	r3, #1
   126d8:	mov	r2, #0
   126dc:	mov	r1, r2
   126e0:	bl	181e8 <flatcc_verify_table_field@@Base>
   126e4:	cmp	r0, #0
   126e8:	beq	126f8 <_start@@Base+0x3c8>
   126ec:	ldr	r4, [sp]
   126f0:	add	sp, sp, #4
   126f4:	pop	{pc}		; (ldr pc, [sp], #4)
   126f8:	movw	r3, #9372	; 0x249c
   126fc:	movt	r3, #1
   12700:	mov	r2, #0
   12704:	mov	r1, #1
   12708:	mov	r0, r4
   1270c:	bl	181e8 <flatcc_verify_table_field@@Base>
   12710:	cmp	r0, #0
   12714:	bne	126ec <_start@@Base+0x3bc>
   12718:	movw	r3, #9300	; 0x2454
   1271c:	movt	r3, #1
   12720:	mov	r2, #0
   12724:	mov	r1, #2
   12728:	mov	r0, r4
   1272c:	bl	181e8 <flatcc_verify_table_field@@Base>
   12730:	b	126ec <_start@@Base+0x3bc>
   12734:	str	r4, [sp, #-8]!
   12738:	str	lr, [sp, #4]
   1273c:	sub	sp, sp, #8
   12740:	mov	r4, r0
   12744:	mov	r3, #16
   12748:	mov	r2, #32
   1274c:	mov	r1, #0
   12750:	bl	17e4c <flatcc_verify_field@@Base>
   12754:	cmp	r0, #0
   12758:	beq	1276c <_start@@Base+0x43c>
   1275c:	add	sp, sp, #8
   12760:	ldr	r4, [sp]
   12764:	add	sp, sp, #4
   12768:	pop	{pc}		; (ldr pc, [sp], #4)
   1276c:	mov	r3, #2
   12770:	mov	r2, r3
   12774:	mov	r1, r3
   12778:	mov	r0, r4
   1277c:	bl	17e4c <flatcc_verify_field@@Base>
   12780:	cmp	r0, #0
   12784:	bne	1275c <_start@@Base+0x42c>
   12788:	mov	r3, #2
   1278c:	mov	r2, r3
   12790:	mov	r1, #1
   12794:	mov	r0, r4
   12798:	bl	17e4c <flatcc_verify_field@@Base>
   1279c:	cmp	r0, #0
   127a0:	bne	1275c <_start@@Base+0x42c>
   127a4:	mov	r2, #1
   127a8:	mov	r1, #3
   127ac:	mov	r0, r4
   127b0:	bl	17ec4 <flatcc_verify_string_field@@Base>
   127b4:	cmp	r0, #0
   127b8:	bne	1275c <_start@@Base+0x42c>
   127bc:	mov	r3, #1
   127c0:	mov	r2, r3
   127c4:	mov	r1, #6
   127c8:	mov	r0, r4
   127cc:	bl	17e4c <flatcc_verify_field@@Base>
   127d0:	cmp	r0, #0
   127d4:	bne	1275c <_start@@Base+0x42c>
   127d8:	mvn	r3, #0
   127dc:	str	r3, [sp, #4]
   127e0:	mov	r3, #1
   127e4:	str	r3, [sp]
   127e8:	mov	r2, #0
   127ec:	mov	r1, #5
   127f0:	mov	r0, r4
   127f4:	bl	17f60 <flatcc_verify_vector_field@@Base>
   127f8:	cmp	r0, #0
   127fc:	bne	1275c <_start@@Base+0x42c>
   12800:	movw	r3, #10036	; 0x2734
   12804:	movt	r3, #1
   12808:	mov	r2, #0
   1280c:	mov	r1, #11
   12810:	mov	r0, r4
   12814:	bl	1830c <flatcc_verify_table_vector_field@@Base>
   12818:	cmp	r0, #0
   1281c:	bne	1275c <_start@@Base+0x42c>
   12820:	mov	r2, #0
   12824:	mov	r1, #10
   12828:	mov	r0, r4
   1282c:	bl	18018 <flatcc_verify_string_vector_field@@Base>
   12830:	cmp	r0, #0
   12834:	bne	1275c <_start@@Base+0x42c>
   12838:	mov	r2, #0
   1283c:	mov	r1, #28
   12840:	mov	r0, r4
   12844:	bl	18018 <flatcc_verify_string_vector_field@@Base>
   12848:	cmp	r0, #0
   1284c:	bne	1275c <_start@@Base+0x42c>
   12850:	mvn	r3, #0
   12854:	str	r3, [sp, #4]
   12858:	mov	r3, #1
   1285c:	str	r3, [sp]
   12860:	mov	r2, #0
   12864:	mov	r1, #24
   12868:	mov	r0, r4
   1286c:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12870:	cmp	r0, #0
   12874:	bne	1275c <_start@@Base+0x42c>
   12878:	mvn	r3, #-536870912	; 0xe0000000
   1287c:	str	r3, [sp, #4]
   12880:	mov	r3, #4
   12884:	str	r3, [sp]
   12888:	mov	r3, #8
   1288c:	mov	r2, #0
   12890:	mov	r1, #29
   12894:	mov	r0, r4
   12898:	bl	17f60 <flatcc_verify_vector_field@@Base>
   1289c:	cmp	r0, #0
   128a0:	bne	1275c <_start@@Base+0x42c>
   128a4:	movw	r3, #10036	; 0x2734
   128a8:	movt	r3, #1
   128ac:	mov	r2, #0
   128b0:	mov	r1, #12
   128b4:	mov	r0, r4
   128b8:	bl	181e8 <flatcc_verify_table_field@@Base>
   128bc:	cmp	r0, #0
   128c0:	bne	1275c <_start@@Base+0x42c>
   128c4:	movw	r3, #11304	; 0x2c28
   128c8:	movt	r3, #1
   128cc:	mov	r2, #0
   128d0:	mov	r1, #8
   128d4:	mov	r0, r4
   128d8:	bl	18e74 <flatcc_verify_union_field@@Base>
   128dc:	cmp	r0, #0
   128e0:	bne	1275c <_start@@Base+0x42c>
   128e4:	mvn	r3, #-1073741824	; 0xc0000000
   128e8:	str	r3, [sp, #4]
   128ec:	mov	r3, #2
   128f0:	str	r3, [sp]
   128f4:	mov	r3, #4
   128f8:	mov	r2, #0
   128fc:	mov	r1, #9
   12900:	mov	r0, r4
   12904:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12908:	cmp	r0, #0
   1290c:	bne	1275c <_start@@Base+0x42c>
   12910:	mvn	r3, #-1073741824	; 0xc0000000
   12914:	str	r3, [sp, #4]
   12918:	mov	r3, #2
   1291c:	str	r3, [sp]
   12920:	mov	r3, #4
   12924:	mov	r2, #0
   12928:	mov	r1, #31
   1292c:	mov	r0, r4
   12930:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12934:	cmp	r0, #0
   12938:	bne	1275c <_start@@Base+0x42c>
   1293c:	movw	r3, #10036	; 0x2734
   12940:	movt	r3, #1
   12944:	str	r3, [sp, #4]
   12948:	mov	r3, #1
   1294c:	str	r3, [sp]
   12950:	mov	r3, #0
   12954:	mov	r2, r3
   12958:	mov	r1, #13
   1295c:	mov	r0, r4
   12960:	bl	18c9c <flatcc_verify_table_as_nested_root@@Base>
   12964:	cmp	r0, #0
   12968:	bne	1275c <_start@@Base+0x42c>
   1296c:	movw	r3, #9572	; 0x2564
   12970:	movt	r3, #1
   12974:	mov	r2, #0
   12978:	mov	r1, #14
   1297c:	mov	r0, r4
   12980:	bl	181e8 <flatcc_verify_table_field@@Base>
   12984:	cmp	r0, #0
   12988:	bne	1275c <_start@@Base+0x42c>
   1298c:	mov	r3, #1
   12990:	mov	r2, r3
   12994:	mov	r1, #15
   12998:	mov	r0, r4
   1299c:	bl	17e4c <flatcc_verify_field@@Base>
   129a0:	cmp	r0, #0
   129a4:	bne	1275c <_start@@Base+0x42c>
   129a8:	mov	r3, #4
   129ac:	mov	r2, r3
   129b0:	mov	r1, #16
   129b4:	mov	r0, r4
   129b8:	bl	17e4c <flatcc_verify_field@@Base>
   129bc:	cmp	r0, #0
   129c0:	bne	1275c <_start@@Base+0x42c>
   129c4:	mov	r3, #4
   129c8:	mov	r2, r3
   129cc:	mov	r1, #17
   129d0:	mov	r0, r4
   129d4:	bl	17e4c <flatcc_verify_field@@Base>
   129d8:	cmp	r0, #0
   129dc:	bne	1275c <_start@@Base+0x42c>
   129e0:	mov	r3, #8
   129e4:	mov	r2, r3
   129e8:	mov	r1, #18
   129ec:	mov	r0, r4
   129f0:	bl	17e4c <flatcc_verify_field@@Base>
   129f4:	cmp	r0, #0
   129f8:	bne	1275c <_start@@Base+0x42c>
   129fc:	mov	r3, #8
   12a00:	mov	r2, r3
   12a04:	mov	r1, #19
   12a08:	mov	r0, r4
   12a0c:	bl	17e4c <flatcc_verify_field@@Base>
   12a10:	cmp	r0, #0
   12a14:	bne	1275c <_start@@Base+0x42c>
   12a18:	mov	r3, #4
   12a1c:	mov	r2, r3
   12a20:	mov	r1, #20
   12a24:	mov	r0, r4
   12a28:	bl	17e4c <flatcc_verify_field@@Base>
   12a2c:	cmp	r0, #0
   12a30:	bne	1275c <_start@@Base+0x42c>
   12a34:	mov	r3, #4
   12a38:	mov	r2, r3
   12a3c:	mov	r1, #21
   12a40:	mov	r0, r4
   12a44:	bl	17e4c <flatcc_verify_field@@Base>
   12a48:	cmp	r0, #0
   12a4c:	bne	1275c <_start@@Base+0x42c>
   12a50:	mov	r3, #8
   12a54:	mov	r2, r3
   12a58:	mov	r1, #22
   12a5c:	mov	r0, r4
   12a60:	bl	17e4c <flatcc_verify_field@@Base>
   12a64:	cmp	r0, #0
   12a68:	bne	1275c <_start@@Base+0x42c>
   12a6c:	mov	r3, #8
   12a70:	mov	r2, r3
   12a74:	mov	r1, #23
   12a78:	mov	r0, r4
   12a7c:	bl	17e4c <flatcc_verify_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	1275c <_start@@Base+0x42c>
   12a88:	mov	r3, #4
   12a8c:	mov	r2, r3
   12a90:	mov	r1, #25
   12a94:	mov	r0, r4
   12a98:	bl	17e4c <flatcc_verify_field@@Base>
   12a9c:	cmp	r0, #0
   12aa0:	bne	1275c <_start@@Base+0x42c>
   12aa4:	mov	r3, #4
   12aa8:	mov	r2, r3
   12aac:	mov	r1, #26
   12ab0:	mov	r0, r4
   12ab4:	bl	17e4c <flatcc_verify_field@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	1275c <_start@@Base+0x42c>
   12ac0:	mov	r3, #4
   12ac4:	mov	r2, r3
   12ac8:	mov	r1, #27
   12acc:	mov	r0, r4
   12ad0:	bl	17e4c <flatcc_verify_field@@Base>
   12ad4:	cmp	r0, #0
   12ad8:	bne	1275c <_start@@Base+0x42c>
   12adc:	mvn	r3, #0
   12ae0:	str	r3, [sp, #4]
   12ae4:	mov	r3, #1
   12ae8:	str	r3, [sp]
   12aec:	mov	r2, #0
   12af0:	mov	r1, #30
   12af4:	mov	r0, r4
   12af8:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12afc:	cmp	r0, #0
   12b00:	bne	1275c <_start@@Base+0x42c>
   12b04:	mvn	r3, #-536870912	; 0xe0000000
   12b08:	str	r3, [sp, #4]
   12b0c:	mov	r3, #8
   12b10:	str	r3, [sp]
   12b14:	mov	r2, #0
   12b18:	mov	r1, #32
   12b1c:	mov	r0, r4
   12b20:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12b24:	cmp	r0, #0
   12b28:	bne	1275c <_start@@Base+0x42c>
   12b2c:	mvn	r3, #-536870912	; 0xe0000000
   12b30:	str	r3, [sp, #4]
   12b34:	mov	r3, #8
   12b38:	str	r3, [sp]
   12b3c:	mov	r2, #0
   12b40:	mov	r1, #33	; 0x21
   12b44:	mov	r0, r4
   12b48:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	1275c <_start@@Base+0x42c>
   12b54:	movw	r3, #9248	; 0x2420
   12b58:	movt	r3, #1
   12b5c:	mov	r2, #0
   12b60:	mov	r1, #34	; 0x22
   12b64:	mov	r0, r4
   12b68:	bl	181e8 <flatcc_verify_table_field@@Base>
   12b6c:	cmp	r0, #0
   12b70:	bne	1275c <_start@@Base+0x42c>
   12b74:	movw	r3, #11152	; 0x2b90
   12b78:	movt	r3, #1
   12b7c:	mov	r2, #0
   12b80:	mov	r1, #35	; 0x23
   12b84:	mov	r0, r4
   12b88:	bl	181e8 <flatcc_verify_table_field@@Base>
   12b8c:	b	1275c <_start@@Base+0x42c>
   12b90:	str	r4, [sp, #-8]!
   12b94:	str	lr, [sp, #4]
   12b98:	sub	sp, sp, #8
   12b9c:	mov	r4, r0
   12ba0:	mvn	r3, #0
   12ba4:	str	r3, [sp, #4]
   12ba8:	mov	r3, #1
   12bac:	str	r3, [sp]
   12bb0:	mov	r2, #0
   12bb4:	mov	r1, r2
   12bb8:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	beq	12bd4 <_start@@Base+0x8a4>
   12bc4:	add	sp, sp, #8
   12bc8:	ldr	r4, [sp]
   12bcc:	add	sp, sp, #4
   12bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12bd4:	mvn	r3, #0
   12bd8:	str	r3, [sp, #4]
   12bdc:	mov	r1, #1
   12be0:	str	r1, [sp]
   12be4:	mov	r3, r1
   12be8:	mov	r2, #0
   12bec:	mov	r0, r4
   12bf0:	bl	17f60 <flatcc_verify_vector_field@@Base>
   12bf4:	cmp	r0, #0
   12bf8:	bne	12bc4 <_start@@Base+0x894>
   12bfc:	movw	r3, #10036	; 0x2734
   12c00:	movt	r3, #1
   12c04:	str	r3, [sp, #4]
   12c08:	mov	r3, #1
   12c0c:	str	r3, [sp]
   12c10:	mov	r3, #0
   12c14:	mov	r2, r3
   12c18:	mov	r1, #2
   12c1c:	mov	r0, r4
   12c20:	bl	18c9c <flatcc_verify_table_as_nested_root@@Base>
   12c24:	b	12bc4 <_start@@Base+0x894>
   12c28:	str	r4, [sp, #-8]!
   12c2c:	str	lr, [sp, #4]
   12c30:	ldrb	r3, [r0, #12]
   12c34:	sub	r3, r3, #1
   12c38:	cmp	r3, #3
   12c3c:	ldrls	pc, [pc, r3, lsl #2]
   12c40:	b	12c9c <_start@@Base+0x96c>
   12c44:	andeq	r2, r1, r4, asr ip
   12c48:	andeq	r2, r1, ip, ror #24
   12c4c:	andeq	r2, r1, ip, ror ip
   12c50:	andeq	r2, r1, ip, lsl #25
   12c54:	movw	r1, #10036	; 0x2734
   12c58:	movt	r1, #1
   12c5c:	bl	185b0 <flatcc_verify_union_table@@Base>
   12c60:	ldr	r4, [sp]
   12c64:	add	sp, sp, #4
   12c68:	pop	{pc}		; (ldr pc, [sp], #4)
   12c6c:	movw	r1, #9444	; 0x24e4
   12c70:	movt	r1, #1
   12c74:	bl	185b0 <flatcc_verify_union_table@@Base>
   12c78:	b	12c60 <_start@@Base+0x930>
   12c7c:	movw	r1, #9256	; 0x2428
   12c80:	movt	r1, #1
   12c84:	bl	185b0 <flatcc_verify_union_table@@Base>
   12c88:	b	12c60 <_start@@Base+0x930>
   12c8c:	movw	r1, #11428	; 0x2ca4
   12c90:	movt	r1, #1
   12c94:	bl	185b0 <flatcc_verify_union_table@@Base>
   12c98:	b	12c60 <_start@@Base+0x930>
   12c9c:	mov	r0, #0
   12ca0:	b	12c60 <_start@@Base+0x930>
   12ca4:	str	r4, [sp, #-8]!
   12ca8:	str	lr, [sp, #4]
   12cac:	mov	r4, r0
   12cb0:	movw	r3, #9924	; 0x26c4
   12cb4:	movt	r3, #1
   12cb8:	mov	r2, #0
   12cbc:	mov	r1, r2
   12cc0:	bl	181e8 <flatcc_verify_table_field@@Base>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12cd8 <_start@@Base+0x9a8>
   12ccc:	ldr	r4, [sp]
   12cd0:	add	sp, sp, #4
   12cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd8:	movw	r3, #11540	; 0x2d14
   12cdc:	movt	r3, #1
   12ce0:	mov	r2, #0
   12ce4:	mov	r1, #1
   12ce8:	mov	r0, r4
   12cec:	bl	181e8 <flatcc_verify_table_field@@Base>
   12cf0:	cmp	r0, #0
   12cf4:	bne	12ccc <_start@@Base+0x99c>
   12cf8:	movw	r3, #11304	; 0x2c28
   12cfc:	movt	r3, #1
   12d00:	mov	r2, #0
   12d04:	mov	r1, #3
   12d08:	mov	r0, r4
   12d0c:	bl	18fc8 <flatcc_verify_union_vector_field@@Base>
   12d10:	b	12ccc <_start@@Base+0x99c>
   12d14:	str	r4, [sp, #-8]!
   12d18:	str	lr, [sp, #4]
   12d1c:	mov	r4, r0
   12d20:	movw	r3, #11716	; 0x2dc4
   12d24:	movt	r3, #1
   12d28:	mov	r2, #0
   12d2c:	mov	r1, #1
   12d30:	bl	18e74 <flatcc_verify_union_field@@Base>
   12d34:	cmp	r0, #0
   12d38:	beq	12d48 <_start@@Base+0xa18>
   12d3c:	ldr	r4, [sp]
   12d40:	add	sp, sp, #4
   12d44:	pop	{pc}		; (ldr pc, [sp], #4)
   12d48:	movw	r3, #11716	; 0x2dc4
   12d4c:	movt	r3, #1
   12d50:	mov	r2, #0
   12d54:	mov	r1, #3
   12d58:	mov	r0, r4
   12d5c:	bl	18e74 <flatcc_verify_union_field@@Base>
   12d60:	cmp	r0, #0
   12d64:	bne	12d3c <_start@@Base+0xa0c>
   12d68:	movw	r3, #11716	; 0x2dc4
   12d6c:	movt	r3, #1
   12d70:	mov	r2, #0
   12d74:	mov	r1, #5
   12d78:	mov	r0, r4
   12d7c:	bl	18e74 <flatcc_verify_union_field@@Base>
   12d80:	cmp	r0, #0
   12d84:	bne	12d3c <_start@@Base+0xa0c>
   12d88:	movw	r3, #11716	; 0x2dc4
   12d8c:	movt	r3, #1
   12d90:	mov	r2, #0
   12d94:	mov	r1, #7
   12d98:	mov	r0, r4
   12d9c:	bl	18e74 <flatcc_verify_union_field@@Base>
   12da0:	cmp	r0, #0
   12da4:	bne	12d3c <_start@@Base+0xa0c>
   12da8:	movw	r3, #11716	; 0x2dc4
   12dac:	movt	r3, #1
   12db0:	mov	r2, #0
   12db4:	mov	r1, #9
   12db8:	mov	r0, r4
   12dbc:	bl	18fc8 <flatcc_verify_union_vector_field@@Base>
   12dc0:	b	12d3c <_start@@Base+0xa0c>
   12dc4:	str	r4, [sp, #-8]!
   12dc8:	str	lr, [sp, #4]
   12dcc:	ldrb	r3, [r0, #12]
   12dd0:	cmp	r3, #9
   12dd4:	beq	12e38 <_start@@Base+0xb08>
   12dd8:	bls	12dfc <_start@@Base+0xacc>
   12ddc:	cmp	r3, #11
   12de0:	beq	12e58 <_start@@Base+0xb28>
   12de4:	bcc	12e48 <_start@@Base+0xb18>
   12de8:	cmp	r3, #255	; 0xff
   12dec:	movne	r0, #0
   12df0:	bne	12e2c <_start@@Base+0xafc>
   12df4:	bl	18718 <flatcc_verify_union_string@@Base>
   12df8:	b	12e2c <_start@@Base+0xafc>
   12dfc:	cmp	r3, #2
   12e00:	beq	12e20 <_start@@Base+0xaf0>
   12e04:	cmp	r3, #8
   12e08:	movne	r0, #0
   12e0c:	bne	12e2c <_start@@Base+0xafc>
   12e10:	mov	r2, #2
   12e14:	mov	r1, r2
   12e18:	bl	186b0 <flatcc_verify_union_struct@@Base>
   12e1c:	b	12e2c <_start@@Base+0xafc>
   12e20:	movw	r1, #9264	; 0x2430
   12e24:	movt	r1, #1
   12e28:	bl	185b0 <flatcc_verify_union_table@@Base>
   12e2c:	ldr	r4, [sp]
   12e30:	add	sp, sp, #4
   12e34:	pop	{pc}		; (ldr pc, [sp], #4)
   12e38:	mov	r2, #4
   12e3c:	mov	r1, r2
   12e40:	bl	186b0 <flatcc_verify_union_struct@@Base>
   12e44:	b	12e2c <_start@@Base+0xafc>
   12e48:	mov	r2, #4
   12e4c:	mov	r1, r2
   12e50:	bl	186b0 <flatcc_verify_union_struct@@Base>
   12e54:	b	12e2c <_start@@Base+0xafc>
   12e58:	bl	18718 <flatcc_verify_union_string@@Base>
   12e5c:	b	12e2c <_start@@Base+0xafc>

00012e60 <main@@Base>:
   12e60:	str	r4, [sp, #-8]!
   12e64:	str	lr, [sp, #4]
   12e68:	sub	sp, sp, #240	; 0xf0
   12e6c:	add	r0, sp, #4
   12e70:	bl	13674 <flatcc_builder_init@@Base>
   12e74:	mov	r3, #0
   12e78:	mov	r2, r3
   12e7c:	movw	r1, #37624	; 0x92f8
   12e80:	movt	r1, #1
   12e84:	add	r0, sp, #4
   12e88:	bl	14068 <flatcc_builder_start_buffer@@Base>
   12e8c:	cmp	r0, #0
   12e90:	bne	12ea0 <main@@Base+0x40>
   12e94:	mov	r1, #36	; 0x24
   12e98:	add	r0, sp, #4
   12e9c:	bl	15028 <flatcc_builder_start_table@@Base>
   12ea0:	movw	r1, #37632	; 0x9300
   12ea4:	movt	r1, #1
   12ea8:	add	r0, sp, #4
   12eac:	bl	16a40 <flatcc_builder_create_string_str@@Base>
   12eb0:	subs	r4, r0, #0
   12eb4:	beq	12ecc <main@@Base+0x6c>
   12eb8:	mov	r1, #3
   12ebc:	add	r0, sp, #4
   12ec0:	bl	16ddc <flatcc_builder_table_add_offset@@Base>
   12ec4:	cmp	r0, #0
   12ec8:	strne	r4, [r0]
   12ecc:	mov	r2, #1
   12ed0:	movw	r1, #37588	; 0x92d4
   12ed4:	movt	r1, #1
   12ed8:	add	r0, sp, #4
   12edc:	bl	15a50 <flatcc_builder_check_required@@Base>
   12ee0:	cmp	r0, #0
   12ee4:	beq	12f40 <main@@Base+0xe0>
   12ee8:	add	r0, sp, #4
   12eec:	bl	15b00 <flatcc_builder_end_table@@Base>
   12ef0:	mov	r1, r0
   12ef4:	add	r0, sp, #4
   12ef8:	bl	1413c <flatcc_builder_end_buffer@@Base>
   12efc:	add	r1, sp, #236	; 0xec
   12f00:	add	r0, sp, #4
   12f04:	bl	17260 <flatcc_builder_get_direct_buffer@@Base>
   12f08:	movw	r3, #10036	; 0x2734
   12f0c:	movt	r3, #1
   12f10:	movw	r2, #37624	; 0x92f8
   12f14:	movt	r2, #1
   12f18:	ldr	r1, [sp, #236]	; 0xec
   12f1c:	bl	1899c <flatcc_verify_table_as_root@@Base>
   12f20:	mov	r4, r0
   12f24:	add	r0, sp, #4
   12f28:	bl	13858 <flatcc_builder_clear@@Base>
   12f2c:	mov	r0, r4
   12f30:	add	sp, sp, #240	; 0xf0
   12f34:	ldr	r4, [sp]
   12f38:	add	sp, sp, #4
   12f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f40:	ldr	r3, [pc, #20]	; 12f5c <main@@Base+0xfc>
   12f44:	movw	r2, #2398	; 0x95e
   12f48:	movw	r1, #37644	; 0x930c
   12f4c:	movt	r1, #1
   12f50:	movw	r0, #37748	; 0x9374
   12f54:	movt	r0, #1
   12f58:	bl	12324 <__assert_fail@plt>
   12f5c:	ldrdeq	r9, [r1], -r8
   12f60:	strd	r4, [sp, #-16]!
   12f64:	str	r6, [sp, #8]
   12f68:	str	lr, [sp, #12]
   12f6c:	sub	sp, sp, #8
   12f70:	mov	r4, r0
   12f74:	mov	r5, r2
   12f78:	ldr	r2, [r0, #28]
   12f7c:	mov	r3, #1
   12f80:	str	r3, [sp]
   12f84:	ldr	r6, [r0, #48]	; 0x30
   12f88:	add	r2, r1, r2
   12f8c:	add	r1, r0, #60	; 0x3c
   12f90:	ldr	r0, [r0, #40]	; 0x28
   12f94:	blx	r6
   12f98:	cmp	r0, #0
   12f9c:	bne	12fe0 <main@@Base+0x180>
   12fa0:	ldr	r1, [r4, #28]
   12fa4:	ldr	r2, [r4, #60]	; 0x3c
   12fa8:	add	r2, r2, r1
   12fac:	str	r2, [r4, #16]
   12fb0:	ldr	r3, [r4, #64]	; 0x40
   12fb4:	sub	r3, r3, r1
   12fb8:	cmp	r3, r5
   12fbc:	movcs	r3, r5
   12fc0:	str	r3, [r4, #24]
   12fc4:	ldr	r3, [r4, #32]
   12fc8:	str	r5, [r3, #4]
   12fcc:	add	sp, sp, #8
   12fd0:	ldrd	r4, [sp]
   12fd4:	ldr	r6, [sp, #8]
   12fd8:	add	sp, sp, #12
   12fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe0:	mvn	r0, #0
   12fe4:	b	12fcc <main@@Base+0x16c>

00012fe8 <flatcc_builder_default_alloc@@Base>:
   12fe8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12fec:	strd	r6, [sp, #8]
   12ff0:	str	r8, [sp, #16]
   12ff4:	str	lr, [sp, #20]
   12ff8:	mov	r5, r1
   12ffc:	cmp	r2, #0
   13000:	beq	13038 <flatcc_builder_default_alloc@@Base+0x50>
   13004:	mov	r6, r3
   13008:	ldr	r3, [sp, #24]
   1300c:	sub	r3, r3, #1
   13010:	cmp	r3, #6
   13014:	ldrls	pc, [pc, r3, lsl #2]
   13018:	b	130e4 <flatcc_builder_default_alloc@@Base+0xfc>
   1301c:	andeq	r3, r1, r4, rrx
   13020:	andeq	r3, r1, r4, ror #1
   13024:	andeq	r3, r1, r4, ror #1
   13028:	andeq	r3, r1, ip, asr r0
   1302c:	andeq	r3, r1, ip, ror #1
   13030:	andeq	r3, r1, r4, ror #1
   13034:	ldrdeq	r3, [r1], -ip
   13038:	ldr	r0, [r1]
   1303c:	cmp	r0, #0
   13040:	moveq	r0, #0
   13044:	beq	130c8 <flatcc_builder_default_alloc@@Base+0xe0>
   13048:	bl	12288 <free@plt>
   1304c:	mov	r0, #0
   13050:	str	r0, [r5]
   13054:	str	r0, [r5, #4]
   13058:	b	130c8 <flatcc_builder_default_alloc@@Base+0xe0>
   1305c:	mov	r4, #288	; 0x120
   13060:	b	13068 <flatcc_builder_default_alloc@@Base+0x80>
   13064:	mov	r4, #256	; 0x100
   13068:	cmp	r4, r2
   1306c:	bcs	1307c <flatcc_builder_default_alloc@@Base+0x94>
   13070:	lsl	r4, r4, #1
   13074:	cmp	r2, r4
   13078:	bhi	13070 <flatcc_builder_default_alloc@@Base+0x88>
   1307c:	ldr	r3, [r5, #4]
   13080:	cmp	r3, r2
   13084:	bcc	13094 <flatcc_builder_default_alloc@@Base+0xac>
   13088:	cmp	r4, r3, lsr #1
   1308c:	movls	r0, #0
   13090:	bls	130c8 <flatcc_builder_default_alloc@@Base+0xe0>
   13094:	mov	r1, r4
   13098:	ldr	r0, [r5]
   1309c:	bl	122ac <realloc@plt>
   130a0:	subs	r7, r0, #0
   130a4:	beq	13108 <flatcc_builder_default_alloc@@Base+0x120>
   130a8:	cmp	r6, #0
   130ac:	beq	130bc <flatcc_builder_default_alloc@@Base+0xd4>
   130b0:	ldr	r0, [r5, #4]
   130b4:	cmp	r0, r4
   130b8:	bcc	130f4 <flatcc_builder_default_alloc@@Base+0x10c>
   130bc:	str	r7, [r5]
   130c0:	str	r4, [r5, #4]
   130c4:	mov	r0, #0
   130c8:	ldrd	r4, [sp]
   130cc:	ldrd	r6, [sp, #8]
   130d0:	ldr	r8, [sp, #16]
   130d4:	add	sp, sp, #20
   130d8:	pop	{pc}		; (ldr pc, [sp], #4)
   130dc:	mov	r4, #64	; 0x40
   130e0:	b	13068 <flatcc_builder_default_alloc@@Base+0x80>
   130e4:	mov	r4, #32
   130e8:	b	13068 <flatcc_builder_default_alloc@@Base+0x80>
   130ec:	mov	r4, r2
   130f0:	b	1307c <flatcc_builder_default_alloc@@Base+0x94>
   130f4:	sub	r2, r4, r0
   130f8:	mov	r1, #0
   130fc:	add	r0, r7, r0
   13100:	bl	122f4 <memset@plt>
   13104:	b	130bc <flatcc_builder_default_alloc@@Base+0xd4>
   13108:	mvn	r0, #0
   1310c:	b	130c8 <flatcc_builder_default_alloc@@Base+0xe0>
   13110:	cmp	r2, #0
   13114:	bne	13124 <flatcc_builder_default_alloc@@Base+0x13c>
   13118:	ldrh	r2, [r0, #132]	; 0x84
   1311c:	cmp	r2, #0
   13120:	moveq	r2, #1
   13124:	ldrh	ip, [r1]
   13128:	cmp	ip, #3
   1312c:	movls	ip, #4
   13130:	strhls	ip, [r1]
   13134:	ldrh	ip, [r1]
   13138:	cmp	ip, r2
   1313c:	strhcc	r2, [r1]
   13140:	cmp	r3, #0
   13144:	bne	13224 <flatcc_builder_default_alloc@@Base+0x23c>
   13148:	strd	r4, [sp, #-12]!
   1314c:	str	lr, [sp, #8]
   13150:	sub	sp, sp, #84	; 0x54
   13154:	ldr	r4, [r0, #140]	; 0x8c
   13158:	sub	r2, r2, #1
   1315c:	ands	r2, r2, r4
   13160:	bne	13178 <flatcc_builder_default_alloc@@Base+0x190>
   13164:	mov	r0, #0
   13168:	add	sp, sp, #84	; 0x54
   1316c:	ldrd	r4, [sp]
   13170:	add	sp, sp, #8
   13174:	pop	{pc}		; (ldr pc, [sp], #4)
   13178:	str	r2, [sp, #8]
   1317c:	movw	r3, #37924	; 0x9424
   13180:	movt	r3, #1
   13184:	str	r3, [sp, #16]
   13188:	str	r2, [sp, #20]
   1318c:	mov	r3, #1
   13190:	str	r3, [sp, #12]
   13194:	add	r3, r4, r2
   13198:	str	r3, [r0, #140]	; 0x8c
   1319c:	cmp	r4, r3
   131a0:	bgt	131ec <flatcc_builder_default_alloc@@Base+0x204>
   131a4:	str	r2, [sp]
   131a8:	ldr	r5, [r0, #44]	; 0x2c
   131ac:	mov	r3, r4
   131b0:	mov	r2, #1
   131b4:	add	r1, sp, #16
   131b8:	ldr	r0, [r0, #36]	; 0x24
   131bc:	blx	r5
   131c0:	cmp	r0, #0
   131c4:	bne	13208 <flatcc_builder_default_alloc@@Base+0x220>
   131c8:	cmn	r4, #1
   131cc:	bne	13164 <flatcc_builder_default_alloc@@Base+0x17c>
   131d0:	ldr	r3, [pc, #84]	; 1322c <flatcc_builder_default_alloc@@Base+0x244>
   131d4:	movw	r2, #702	; 0x2be
   131d8:	movw	r1, #39796	; 0x9b74
   131dc:	movt	r1, #1
   131e0:	movw	r0, #39880	; 0x9bc8
   131e4:	movt	r0, #1
   131e8:	bl	12324 <__assert_fail@plt>
   131ec:	ldr	r3, [pc, #60]	; 13230 <flatcc_builder_default_alloc@@Base+0x248>
   131f0:	movw	r2, #673	; 0x2a1
   131f4:	movw	r1, #39796	; 0x9b74
   131f8:	movt	r1, #1
   131fc:	movw	r0, #39880	; 0x9bc8
   13200:	movt	r0, #1
   13204:	bl	12324 <__assert_fail@plt>
   13208:	ldr	r3, [pc, #32]	; 13230 <flatcc_builder_default_alloc@@Base+0x248>
   1320c:	movw	r2, #677	; 0x2a5
   13210:	movw	r1, #39796	; 0x9b74
   13214:	movt	r1, #1
   13218:	movw	r0, #39880	; 0x9bc8
   1321c:	movt	r0, #1
   13220:	bl	12324 <__assert_fail@plt>
   13224:	mov	r0, #0
   13228:	bx	lr
   1322c:	andeq	r9, r1, r0, lsr r6
   13230:	andeq	r9, r1, r4, lsr #12
   13234:	strd	r4, [sp, #-20]!	; 0xffffffec
   13238:	strd	r6, [sp, #8]
   1323c:	str	lr, [sp, #16]
   13240:	sub	sp, sp, #12
   13244:	mov	r4, r0
   13248:	mov	r6, r1
   1324c:	ldr	r3, [r0, #156]	; 0x9c
   13250:	add	r2, r3, #1
   13254:	str	r2, [r0, #156]	; 0x9c
   13258:	ldr	r1, [r0, #160]	; 0xa0
   1325c:	cmp	r2, r1
   13260:	ble	13318 <flatcc_builder_default_alloc@@Base+0x330>
   13264:	ldr	r1, [r0, #176]	; 0xb0
   13268:	cmp	r2, r1
   1326c:	cmpgt	r1, #0
   13270:	bgt	1338c <flatcc_builder_default_alloc@@Base+0x3a4>
   13274:	add	r3, r3, r3, lsl #3
   13278:	lsl	r5, r3, #2
   1327c:	add	r2, r5, #36	; 0x24
   13280:	ldr	r3, [r0, #88]	; 0x58
   13284:	cmp	r2, r3
   13288:	bls	132b0 <flatcc_builder_default_alloc@@Base+0x2c8>
   1328c:	mov	r3, #4
   13290:	str	r3, [sp]
   13294:	ldr	r7, [r0, #48]	; 0x30
   13298:	mov	r3, #0
   1329c:	add	r1, r0, #84	; 0x54
   132a0:	ldr	r0, [r0, #40]	; 0x28
   132a4:	blx	r7
   132a8:	cmp	r0, #0
   132ac:	bne	132fc <flatcc_builder_default_alloc@@Base+0x314>
   132b0:	ldr	r3, [r4, #84]	; 0x54
   132b4:	add	r5, r3, r5
   132b8:	str	r5, [r4, #32]
   132bc:	cmp	r5, #0
   132c0:	beq	13394 <flatcc_builder_default_alloc@@Base+0x3ac>
   132c4:	ldr	r3, [r4, #88]	; 0x58
   132c8:	movw	r2, #36409	; 0x8e39
   132cc:	movt	r2, #14563	; 0x38e3
   132d0:	umull	r2, r3, r2, r3
   132d4:	lsr	r3, r3, #3
   132d8:	ldr	r2, [r4, #176]	; 0xb0
   132dc:	cmp	r2, #0
   132e0:	cmpgt	r3, r2
   132e4:	movgt	r1, #1
   132e8:	movle	r1, #0
   132ec:	cmp	r1, #0
   132f0:	movne	r3, r2
   132f4:	str	r3, [r4, #160]	; 0xa0
   132f8:	b	13324 <flatcc_builder_default_alloc@@Base+0x33c>
   132fc:	ldr	r3, [pc, #152]	; 1339c <flatcc_builder_default_alloc@@Base+0x3b4>
   13300:	mov	r2, #308	; 0x134
   13304:	movw	r1, #39796	; 0x9b74
   13308:	movt	r1, #1
   1330c:	movw	r0, #39880	; 0x9bc8
   13310:	movt	r0, #1
   13314:	bl	12324 <__assert_fail@plt>
   13318:	ldr	r3, [r0, #32]
   1331c:	add	r3, r3, #36	; 0x24
   13320:	str	r3, [r0, #32]
   13324:	ldr	r3, [r4, #32]
   13328:	ldr	r2, [r4, #20]
   1332c:	str	r2, [r3, #8]
   13330:	ldr	r3, [r4, #32]
   13334:	ldrh	r2, [r4, #130]	; 0x82
   13338:	strh	r2, [r3, #12]
   1333c:	strh	r6, [r4, #130]	; 0x82
   13340:	ldr	r3, [r4, #32]
   13344:	ldr	r2, [r4, #28]
   13348:	str	r2, [r3]
   1334c:	ldr	r3, [r4, #32]
   13350:	mvn	r2, #3
   13354:	str	r2, [r3, #4]
   13358:	ldr	r3, [r4, #28]
   1335c:	ldr	r2, [r4, #20]
   13360:	add	r3, r3, r2
   13364:	add	r3, r3, #7
   13368:	bic	r3, r3, #7
   1336c:	str	r3, [r4, #28]
   13370:	mov	r0, #0
   13374:	str	r0, [r4, #20]
   13378:	add	sp, sp, #12
   1337c:	ldrd	r4, [sp]
   13380:	ldrd	r6, [sp, #8]
   13384:	add	sp, sp, #16
   13388:	pop	{pc}		; (ldr pc, [sp], #4)
   1338c:	mvn	r0, #0
   13390:	b	13378 <flatcc_builder_default_alloc@@Base+0x390>
   13394:	mvn	r0, #0
   13398:	b	13378 <flatcc_builder_default_alloc@@Base+0x390>
   1339c:	andeq	r9, r1, r0, asr #12
   133a0:	strd	r4, [sp, #-16]!
   133a4:	str	r6, [sp, #8]
   133a8:	str	lr, [sp, #12]
   133ac:	sub	sp, sp, #88	; 0x58
   133b0:	cmn	r2, #-1073741823	; 0xc0000001
   133b4:	bhi	13598 <flatcc_builder_default_alloc@@Base+0x5b0>
   133b8:	ldrh	ip, [r0, #128]	; 0x80
   133bc:	cmp	ip, #3
   133c0:	movls	ip, #4
   133c4:	strhls	ip, [r0, #128]	; 0x80
   133c8:	str	r2, [sp, #84]	; 0x54
   133cc:	ldr	lr, [r0, #136]	; 0x88
   133d0:	and	ip, lr, #3
   133d4:	mov	r4, #4
   133d8:	str	r4, [sp, #12]
   133dc:	add	r5, sp, #84	; 0x54
   133e0:	str	r5, [sp, #20]
   133e4:	str	r4, [sp, #24]
   133e8:	mov	r4, #1
   133ec:	str	r4, [sp, #16]
   133f0:	lsls	r4, r2, #2
   133f4:	beq	13410 <flatcc_builder_default_alloc@@Base+0x428>
   133f8:	add	r5, r4, #4
   133fc:	str	r5, [sp, #12]
   13400:	str	r1, [sp, #28]
   13404:	str	r4, [sp, #32]
   13408:	mov	r4, #2
   1340c:	str	r4, [sp, #16]
   13410:	cmp	ip, #0
   13414:	beq	13448 <flatcc_builder_default_alloc@@Base+0x460>
   13418:	ldr	r4, [sp, #12]
   1341c:	add	r4, r4, ip
   13420:	str	r4, [sp, #12]
   13424:	ldr	r4, [sp, #16]
   13428:	add	r4, r4, #1
   1342c:	add	r5, sp, #88	; 0x58
   13430:	add	r6, r5, r4, lsl #3
   13434:	movw	r5, #37924	; 0x9424
   13438:	movt	r5, #1
   1343c:	str	r5, [r6, #-76]	; 0xffffffb4
   13440:	str	ip, [r6, #-72]	; 0xffffffb8
   13444:	str	r4, [sp, #16]
   13448:	mov	r5, r0
   1344c:	ldr	r6, [sp, #12]
   13450:	cmp	r2, #0
   13454:	beq	13510 <flatcc_builder_default_alloc@@Base+0x528>
   13458:	mov	ip, r3
   1345c:	add	r4, r2, r3
   13460:	mov	r2, r1
   13464:	add	r1, r1, r6
   13468:	sub	r0, r1, lr
   1346c:	b	13490 <flatcc_builder_default_alloc@@Base+0x4a8>
   13470:	cmp	r3, #0
   13474:	beq	134f4 <flatcc_builder_default_alloc@@Base+0x50c>
   13478:	ldrb	r1, [ip]
   1347c:	cmp	r1, #0
   13480:	bne	134d8 <flatcc_builder_default_alloc@@Base+0x4f0>
   13484:	add	ip, ip, #1
   13488:	cmp	ip, r4
   1348c:	beq	13510 <flatcc_builder_default_alloc@@Base+0x528>
   13490:	ldr	r1, [r2], #4
   13494:	cmp	r1, #0
   13498:	beq	13470 <flatcc_builder_default_alloc@@Base+0x488>
   1349c:	sub	lr, r0, r2
   134a0:	add	r1, lr, r1
   134a4:	str	r1, [r2, #-4]
   134a8:	cmp	r3, #0
   134ac:	beq	13484 <flatcc_builder_default_alloc@@Base+0x49c>
   134b0:	ldrb	r1, [ip]
   134b4:	cmp	r1, #0
   134b8:	bne	13484 <flatcc_builder_default_alloc@@Base+0x49c>
   134bc:	ldr	r3, [pc, #220]	; 135a0 <flatcc_builder_default_alloc@@Base+0x5b8>
   134c0:	movw	r2, #1457	; 0x5b1
   134c4:	movw	r1, #39796	; 0x9b74
   134c8:	movt	r1, #1
   134cc:	movw	r0, #39868	; 0x9bbc
   134d0:	movt	r0, #1
   134d4:	bl	12324 <__assert_fail@plt>
   134d8:	ldr	r3, [pc, #192]	; 135a0 <flatcc_builder_default_alloc@@Base+0x5b8>
   134dc:	movw	r2, #1461	; 0x5b5
   134e0:	movw	r1, #39796	; 0x9b74
   134e4:	movt	r1, #1
   134e8:	movw	r0, #39884	; 0x9bcc
   134ec:	movt	r0, #1
   134f0:	bl	12324 <__assert_fail@plt>
   134f4:	ldr	r3, [pc, #164]	; 135a0 <flatcc_builder_default_alloc@@Base+0x5b8>
   134f8:	movw	r2, #1463	; 0x5b7
   134fc:	movw	r1, #39796	; 0x9b74
   13500:	movt	r1, #1
   13504:	movw	r0, #39880	; 0x9bc8
   13508:	movt	r0, #1
   1350c:	bl	12324 <__assert_fail@plt>
   13510:	ldr	r3, [r5, #136]	; 0x88
   13514:	sub	r4, r3, r6
   13518:	cmp	r3, r4
   1351c:	ble	13560 <flatcc_builder_default_alloc@@Base+0x578>
   13520:	str	r6, [sp]
   13524:	ldr	r6, [r5, #44]	; 0x2c
   13528:	mov	r3, r4
   1352c:	ldr	r2, [sp, #16]
   13530:	add	r1, sp, #20
   13534:	ldr	r0, [r5, #36]	; 0x24
   13538:	blx	r6
   1353c:	cmp	r0, #0
   13540:	streq	r4, [r5, #136]	; 0x88
   13544:	bne	1357c <flatcc_builder_default_alloc@@Base+0x594>
   13548:	mov	r0, r4
   1354c:	add	sp, sp, #88	; 0x58
   13550:	ldrd	r4, [sp]
   13554:	ldr	r6, [sp, #8]
   13558:	add	sp, sp, #12
   1355c:	pop	{pc}		; (ldr pc, [sp], #4)
   13560:	ldr	r3, [pc, #60]	; 135a4 <flatcc_builder_default_alloc@@Base+0x5bc>
   13564:	movw	r2, #647	; 0x287
   13568:	movw	r1, #39796	; 0x9b74
   1356c:	movt	r1, #1
   13570:	movw	r0, #39880	; 0x9bc8
   13574:	movt	r0, #1
   13578:	bl	12324 <__assert_fail@plt>
   1357c:	ldr	r3, [pc, #32]	; 135a4 <flatcc_builder_default_alloc@@Base+0x5bc>
   13580:	movw	r2, #651	; 0x28b
   13584:	movw	r1, #39796	; 0x9b74
   13588:	movt	r1, #1
   1358c:	movw	r0, #39880	; 0x9bc8
   13590:	movt	r0, #1
   13594:	bl	12324 <__assert_fail@plt>
   13598:	mov	r4, #0
   1359c:	b	13548 <flatcc_builder_default_alloc@@Base+0x560>
   135a0:	andeq	r9, r1, r0, asr r6
   135a4:	andeq	r9, r1, r0, ror r6

000135a8 <flatcc_builder_flush_vtable_cache@@Base>:
   135a8:	ldr	r3, [r0, #116]	; 0x74
   135ac:	cmp	r3, #0
   135b0:	bxeq	lr
   135b4:	str	r4, [sp, #-8]!
   135b8:	str	lr, [sp, #4]
   135bc:	mov	r4, r0
   135c0:	ldr	r2, [r0, #96]	; 0x60
   135c4:	mov	r1, #0
   135c8:	ldr	r0, [r0, #92]	; 0x5c
   135cc:	bl	122f4 <memset@plt>
   135d0:	mov	r3, #16
   135d4:	str	r3, [r4, #124]	; 0x7c
   135d8:	mov	r3, #0
   135dc:	str	r3, [r4, #120]	; 0x78
   135e0:	ldr	r4, [sp]
   135e4:	add	sp, sp, #4
   135e8:	pop	{pc}		; (ldr pc, [sp], #4)

000135ec <flatcc_builder_custom_init@@Base>:
   135ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   135f0:	strd	r6, [sp, #8]
   135f4:	str	r8, [sp, #16]
   135f8:	str	lr, [sp, #20]
   135fc:	mov	r4, r0
   13600:	mov	r6, r1
   13604:	mov	r7, r2
   13608:	mov	r5, r3
   1360c:	mov	r2, #232	; 0xe8
   13610:	mov	r1, #0
   13614:	bl	122f4 <memset@plt>
   13618:	cmp	r6, #0
   1361c:	beq	1365c <flatcc_builder_custom_init@@Base+0x70>
   13620:	movw	r3, #12264	; 0x2fe8
   13624:	movt	r3, #1
   13628:	cmp	r5, #0
   1362c:	moveq	r5, r3
   13630:	ldr	r3, [sp, #24]
   13634:	str	r3, [r4, #40]	; 0x28
   13638:	str	r5, [r4, #48]	; 0x30
   1363c:	str	r7, [r4, #36]	; 0x24
   13640:	str	r6, [r4, #44]	; 0x2c
   13644:	mov	r0, #0
   13648:	ldrd	r4, [sp]
   1364c:	ldrd	r6, [sp, #8]
   13650:	ldr	r8, [sp, #16]
   13654:	add	sp, sp, #20
   13658:	pop	{pc}		; (ldr pc, [sp], #4)
   1365c:	mov	r3, #1
   13660:	str	r3, [r4, #184]	; 0xb8
   13664:	add	r7, r4, #188	; 0xbc
   13668:	movw	r6, #30392	; 0x76b8
   1366c:	movt	r6, #1
   13670:	b	13620 <flatcc_builder_custom_init@@Base+0x34>

00013674 <flatcc_builder_init@@Base>:
   13674:	str	r4, [sp, #-8]!
   13678:	str	lr, [sp, #4]
   1367c:	mov	r4, r0
   13680:	mov	r2, #232	; 0xe8
   13684:	mov	r1, #0
   13688:	bl	122f4 <memset@plt>
   1368c:	mov	r3, #1
   13690:	str	r3, [r4, #184]	; 0xb8
   13694:	movw	r3, #12264	; 0x2fe8
   13698:	movt	r3, #1
   1369c:	str	r3, [r4, #48]	; 0x30
   136a0:	add	r3, r4, #188	; 0xbc
   136a4:	str	r3, [r4, #36]	; 0x24
   136a8:	movw	r3, #30392	; 0x76b8
   136ac:	movt	r3, #1
   136b0:	str	r3, [r4, #44]	; 0x2c
   136b4:	mov	r0, #0
   136b8:	ldr	r4, [sp]
   136bc:	add	sp, sp, #4
   136c0:	pop	{pc}		; (ldr pc, [sp], #4)

000136c4 <flatcc_builder_custom_reset@@Base>:
   136c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   136c8:	strd	r6, [sp, #8]
   136cc:	strd	r8, [sp, #16]
   136d0:	strd	sl, [sp, #24]
   136d4:	str	lr, [sp, #32]
   136d8:	sub	sp, sp, #12
   136dc:	mov	r6, r0
   136e0:	mov	fp, r1
   136e4:	mov	r9, r2
   136e8:	mov	r4, r0
   136ec:	mov	r5, #0
   136f0:	mov	sl, r5
   136f4:	mov	r8, #1
   136f8:	b	1371c <flatcc_builder_custom_reset@@Base+0x58>
   136fc:	ldr	r2, [r7, #56]	; 0x38
   13700:	mov	r1, sl
   13704:	ldr	r0, [r7, #52]	; 0x34
   13708:	bl	122f4 <memset@plt>
   1370c:	add	r5, r5, #1
   13710:	add	r4, r4, #8
   13714:	cmp	r5, #8
   13718:	beq	1378c <flatcc_builder_custom_reset@@Base+0xc8>
   1371c:	add	r1, r4, #52	; 0x34
   13720:	mov	r7, r4
   13724:	ldr	r3, [r4, #52]	; 0x34
   13728:	cmp	r3, #0
   1372c:	beq	13764 <flatcc_builder_custom_reset@@Base+0xa0>
   13730:	cmp	r5, #5
   13734:	cmpne	r9, #0
   13738:	beq	136fc <flatcc_builder_custom_reset@@Base+0x38>
   1373c:	str	r5, [sp]
   13740:	mov	r3, r8
   13744:	mov	r2, r8
   13748:	ldr	r0, [r6, #40]	; 0x28
   1374c:	ldr	ip, [r6, #48]	; 0x30
   13750:	blx	ip
   13754:	cmp	r0, #0
   13758:	beq	136fc <flatcc_builder_custom_reset@@Base+0x38>
   1375c:	mvn	r0, #0
   13760:	b	13808 <flatcc_builder_custom_reset@@Base+0x144>
   13764:	ldr	r3, [r4, #56]	; 0x38
   13768:	cmp	r3, #0
   1376c:	beq	1370c <flatcc_builder_custom_reset@@Base+0x48>
   13770:	ldr	r3, [pc, #188]	; 13834 <flatcc_builder_custom_reset@@Base+0x170>
   13774:	movw	r2, #434	; 0x1b2
   13778:	movw	r1, #39796	; 0x9b74
   1377c:	movt	r1, #1
   13780:	movw	r0, #39900	; 0x9bdc
   13784:	movt	r0, #1
   13788:	bl	12324 <__assert_fail@plt>
   1378c:	mov	r3, #0
   13790:	str	r3, [r6, #120]	; 0x78
   13794:	ldr	r3, [r6, #124]	; 0x7c
   13798:	cmp	r3, #0
   1379c:	movne	r3, #16
   137a0:	strne	r3, [r6, #124]	; 0x7c
   137a4:	mov	r3, #0
   137a8:	strh	r3, [r6, #128]	; 0x80
   137ac:	str	r3, [r6, #136]	; 0x88
   137b0:	str	r3, [r6, #140]	; 0x8c
   137b4:	str	r3, [r6, #156]	; 0x9c
   137b8:	str	r3, [r6, #160]	; 0xa0
   137bc:	str	r3, [r6, #20]
   137c0:	str	r3, [r6, #24]
   137c4:	str	r3, [r6, #148]	; 0x94
   137c8:	str	r3, [r6, #152]	; 0x98
   137cc:	ldr	r2, [r6, #60]	; 0x3c
   137d0:	str	r2, [r6, #16]
   137d4:	ldr	r2, [r6, #76]	; 0x4c
   137d8:	str	r2, [r6]
   137dc:	ldr	r2, [r6, #52]	; 0x34
   137e0:	str	r2, [r6, #4]
   137e4:	str	r3, [r6, #32]
   137e8:	cmp	fp, r3
   137ec:	beq	137fc <flatcc_builder_custom_reset@@Base+0x138>
   137f0:	str	r3, [r6, #172]	; 0xac
   137f4:	str	r3, [r6, #176]	; 0xb0
   137f8:	str	r3, [r6, #180]	; 0xb4
   137fc:	ldr	r0, [r6, #184]	; 0xb8
   13800:	cmp	r0, #0
   13804:	bne	13824 <flatcc_builder_custom_reset@@Base+0x160>
   13808:	add	sp, sp, #12
   1380c:	ldrd	r4, [sp]
   13810:	ldrd	r6, [sp, #8]
   13814:	ldrd	r8, [sp, #16]
   13818:	ldrd	sl, [sp, #24]
   1381c:	add	sp, sp, #32
   13820:	pop	{pc}		; (ldr pc, [sp], #4)
   13824:	add	r0, r6, #188	; 0xbc
   13828:	bl	17560 <flatcc_emitter_reset@@Base>
   1382c:	mov	r0, #0
   13830:	b	13808 <flatcc_builder_custom_reset@@Base+0x144>
   13834:	andeq	r9, r1, ip, ror r6

00013838 <flatcc_builder_reset@@Base>:
   13838:	str	r4, [sp, #-8]!
   1383c:	str	lr, [sp, #4]
   13840:	mov	r2, #0
   13844:	mov	r1, r2
   13848:	bl	136c4 <flatcc_builder_custom_reset@@Base>
   1384c:	ldr	r4, [sp]
   13850:	add	sp, sp, #4
   13854:	pop	{pc}		; (ldr pc, [sp], #4)

00013858 <flatcc_builder_clear@@Base>:
   13858:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1385c:	strd	r6, [sp, #8]
   13860:	str	r8, [sp, #16]
   13864:	str	lr, [sp, #20]
   13868:	sub	sp, sp, #8
   1386c:	mov	r6, r0
   13870:	add	r5, r0, #52	; 0x34
   13874:	mov	r4, #0
   13878:	mov	r8, r4
   1387c:	str	r4, [sp]
   13880:	ldr	r7, [r6, #48]	; 0x30
   13884:	mov	r3, r8
   13888:	mov	r2, r8
   1388c:	mov	r1, r5
   13890:	ldr	r0, [r6, #40]	; 0x28
   13894:	blx	r7
   13898:	add	r4, r4, #1
   1389c:	add	r5, r5, #8
   138a0:	cmp	r4, #8
   138a4:	bne	1387c <flatcc_builder_clear@@Base+0x24>
   138a8:	ldr	r3, [r6, #184]	; 0xb8
   138ac:	cmp	r3, #0
   138b0:	bne	138dc <flatcc_builder_clear@@Base+0x84>
   138b4:	mov	r2, #232	; 0xe8
   138b8:	mov	r1, #0
   138bc:	mov	r0, r6
   138c0:	bl	122f4 <memset@plt>
   138c4:	add	sp, sp, #8
   138c8:	ldrd	r4, [sp]
   138cc:	ldrd	r6, [sp, #8]
   138d0:	ldr	r8, [sp, #16]
   138d4:	add	sp, sp, #20
   138d8:	pop	{pc}		; (ldr pc, [sp], #4)
   138dc:	add	r0, r6, #188	; 0xbc
   138e0:	bl	1763c <flatcc_emitter_clear@@Base>
   138e4:	b	138b4 <flatcc_builder_clear@@Base+0x5c>

000138e8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   138e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138ec:	strd	r6, [sp, #8]
   138f0:	str	r8, [sp, #16]
   138f4:	str	lr, [sp, #20]
   138f8:	sub	sp, sp, #8
   138fc:	mov	r4, r0
   13900:	add	r5, r1, #3
   13904:	bic	r5, r5, #3
   13908:	add	r5, r5, #4
   1390c:	ldr	r6, [r0, #228]	; 0xe4
   13910:	add	r2, r6, r5
   13914:	ldr	r3, [r0, #112]	; 0x70
   13918:	cmp	r2, r3
   1391c:	bls	13944 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   13920:	mov	r3, #7
   13924:	str	r3, [sp]
   13928:	ldr	r7, [r0, #48]	; 0x30
   1392c:	mov	r3, #0
   13930:	add	r1, r0, #108	; 0x6c
   13934:	ldr	r0, [r0, #40]	; 0x28
   13938:	blx	r7
   1393c:	cmp	r0, #0
   13940:	bne	1399c <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   13944:	ldr	r8, [r4, #108]	; 0x6c
   13948:	adds	r7, r8, r6
   1394c:	moveq	r0, #0
   13950:	beq	13984 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   13954:	mov	r2, r5
   13958:	mov	r1, #0
   1395c:	mov	r0, r7
   13960:	bl	122f4 <memset@plt>
   13964:	add	r0, r7, #4
   13968:	ldr	r3, [r4, #224]	; 0xe0
   1396c:	str	r3, [r8, r6]
   13970:	ldr	r1, [r4, #228]	; 0xe4
   13974:	add	r3, r1, #4
   13978:	str	r3, [r4, #224]	; 0xe0
   1397c:	add	r5, r1, r5
   13980:	str	r5, [r4, #228]	; 0xe4
   13984:	add	sp, sp, #8
   13988:	ldrd	r4, [sp]
   1398c:	ldrd	r6, [sp, #8]
   13990:	ldr	r8, [sp, #16]
   13994:	add	sp, sp, #20
   13998:	pop	{pc}		; (ldr pc, [sp], #4)
   1399c:	ldr	r3, [pc, #20]	; 139b8 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   139a0:	mov	r2, #308	; 0x134
   139a4:	movw	r1, #39796	; 0x9b74
   139a8:	movt	r1, #1
   139ac:	movw	r0, #39880	; 0x9bc8
   139b0:	movt	r0, #1
   139b4:	bl	12324 <__assert_fail@plt>
   139b8:	andeq	r9, r1, r0, asr #12

000139bc <flatcc_builder_enter_user_frame@@Base>:
   139bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   139c0:	strd	r6, [sp, #8]
   139c4:	str	lr, [sp, #16]
   139c8:	sub	sp, sp, #12
   139cc:	mov	r4, r0
   139d0:	add	r5, r1, #3
   139d4:	bic	r5, r5, #3
   139d8:	add	r5, r5, #4
   139dc:	ldr	r6, [r0, #228]	; 0xe4
   139e0:	add	r2, r6, r5
   139e4:	ldr	r3, [r0, #112]	; 0x70
   139e8:	cmp	r2, r3
   139ec:	bls	13a14 <flatcc_builder_enter_user_frame@@Base+0x58>
   139f0:	mov	r3, #7
   139f4:	str	r3, [sp]
   139f8:	ldr	r7, [r0, #48]	; 0x30
   139fc:	mov	r3, #0
   13a00:	add	r1, r0, #108	; 0x6c
   13a04:	ldr	r0, [r0, #40]	; 0x28
   13a08:	blx	r7
   13a0c:	cmp	r0, #0
   13a10:	bne	13a5c <flatcc_builder_enter_user_frame@@Base+0xa0>
   13a14:	ldr	r7, [r4, #108]	; 0x6c
   13a18:	adds	r0, r7, r6
   13a1c:	beq	13a48 <flatcc_builder_enter_user_frame@@Base+0x8c>
   13a20:	mov	r2, r5
   13a24:	mov	r1, #0
   13a28:	bl	122f4 <memset@plt>
   13a2c:	ldr	r3, [r4, #224]	; 0xe0
   13a30:	str	r3, [r7, r6]
   13a34:	ldr	r1, [r4, #228]	; 0xe4
   13a38:	add	r0, r1, #4
   13a3c:	str	r0, [r4, #224]	; 0xe0
   13a40:	add	r5, r1, r5
   13a44:	str	r5, [r4, #228]	; 0xe4
   13a48:	add	sp, sp, #12
   13a4c:	ldrd	r4, [sp]
   13a50:	ldrd	r6, [sp, #8]
   13a54:	add	sp, sp, #16
   13a58:	pop	{pc}		; (ldr pc, [sp], #4)
   13a5c:	ldr	r3, [pc, #20]	; 13a78 <flatcc_builder_enter_user_frame@@Base+0xbc>
   13a60:	mov	r2, #308	; 0x134
   13a64:	movw	r1, #39796	; 0x9b74
   13a68:	movt	r1, #1
   13a6c:	movw	r0, #39880	; 0x9bc8
   13a70:	movt	r0, #1
   13a74:	bl	12324 <__assert_fail@plt>
   13a78:	andeq	r9, r1, r0, asr #12

00013a7c <flatcc_builder_exit_user_frame@@Base>:
   13a7c:	ldr	r3, [r0, #224]	; 0xe0
   13a80:	cmp	r3, #0
   13a84:	beq	13aa8 <flatcc_builder_exit_user_frame@@Base+0x2c>
   13a88:	ldr	r2, [r0, #108]	; 0x6c
   13a8c:	add	r2, r2, r3
   13a90:	sub	r3, r3, #4
   13a94:	str	r3, [r0, #228]	; 0xe4
   13a98:	ldr	r3, [r2, #-4]
   13a9c:	str	r3, [r0, #224]	; 0xe0
   13aa0:	mov	r0, r3
   13aa4:	bx	lr
   13aa8:	str	r4, [sp, #-8]!
   13aac:	str	lr, [sp, #4]
   13ab0:	ldr	r3, [pc, #20]	; 13acc <flatcc_builder_exit_user_frame@@Base+0x50>
   13ab4:	movw	r2, #542	; 0x21e
   13ab8:	movw	r1, #39796	; 0x9b74
   13abc:	movt	r1, #1
   13ac0:	movw	r0, #39920	; 0x9bf0
   13ac4:	movt	r0, #1
   13ac8:	bl	12324 <__assert_fail@plt>
   13acc:	muleq	r1, r8, r6

00013ad0 <flatcc_builder_exit_user_frame_at@@Base>:
   13ad0:	str	r4, [sp, #-8]!
   13ad4:	str	lr, [sp, #4]
   13ad8:	ldr	r3, [r0, #224]	; 0xe0
   13adc:	cmp	r3, r1
   13ae0:	bcc	13af8 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   13ae4:	str	r1, [r0, #224]	; 0xe0
   13ae8:	bl	13a7c <flatcc_builder_exit_user_frame@@Base>
   13aec:	ldr	r4, [sp]
   13af0:	add	sp, sp, #4
   13af4:	pop	{pc}		; (ldr pc, [sp], #4)
   13af8:	ldr	r3, [pc, #20]	; 13b14 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13afc:	movw	r2, #551	; 0x227
   13b00:	movw	r1, #39796	; 0x9b74
   13b04:	movt	r1, #1
   13b08:	movw	r0, #39948	; 0x9c0c
   13b0c:	movt	r0, #1
   13b10:	bl	12324 <__assert_fail@plt>
   13b14:			; <UNDEFINED> instruction: 0x000196b8

00013b18 <flatcc_builder_get_current_user_frame@@Base>:
   13b18:	ldr	r0, [r0, #224]	; 0xe0
   13b1c:	bx	lr

00013b20 <flatcc_builder_get_user_frame_ptr@@Base>:
   13b20:	ldr	r0, [r0, #108]	; 0x6c
   13b24:	add	r0, r0, r1
   13b28:	bx	lr

00013b2c <flatcc_builder_embed_buffer@@Base>:
   13b2c:	strd	r4, [sp, #-16]!
   13b30:	str	r6, [sp, #8]
   13b34:	str	lr, [sp, #12]
   13b38:	sub	sp, sp, #88	; 0x58
   13b3c:	mov	r4, r0
   13b40:	mov	r6, r2
   13b44:	mov	r5, r3
   13b48:	ldr	r3, [r0, #152]	; 0x98
   13b4c:	adds	r3, r3, #0
   13b50:	movne	r3, #1
   13b54:	mov	r2, r1
   13b58:	add	r1, sp, #104	; 0x68
   13b5c:	bl	13110 <flatcc_builder_default_alloc@@Base+0x128>
   13b60:	cmp	r0, #0
   13b64:	bne	13cc0 <flatcc_builder_embed_buffer@@Base+0x194>
   13b68:	ldr	r3, [sp, #108]	; 0x6c
   13b6c:	and	r3, r3, #2
   13b70:	cmp	r3, #0
   13b74:	movne	r2, #4
   13b78:	moveq	r2, #0
   13b7c:	ldr	r1, [r4, #136]	; 0x88
   13b80:	sub	r3, r1, r5
   13b84:	sub	r2, r3, r2
   13b88:	ldrh	r3, [sp, #104]	; 0x68
   13b8c:	sub	r3, r3, #1
   13b90:	and	r3, r3, r2
   13b94:	add	r2, r5, r3
   13b98:	str	r2, [sp, #84]	; 0x54
   13b9c:	mov	r2, #0
   13ba0:	str	r2, [sp, #12]
   13ba4:	str	r2, [sp, #16]
   13ba8:	ldr	r2, [r4, #152]	; 0x98
   13bac:	cmp	r2, #0
   13bb0:	beq	13bd0 <flatcc_builder_embed_buffer@@Base+0xa4>
   13bb4:	mov	r2, #4
   13bb8:	str	r2, [sp, #12]
   13bbc:	add	r0, sp, #84	; 0x54
   13bc0:	str	r0, [sp, #20]
   13bc4:	str	r2, [sp, #24]
   13bc8:	mov	r2, #1
   13bcc:	str	r2, [sp, #16]
   13bd0:	cmp	r5, #0
   13bd4:	beq	13c00 <flatcc_builder_embed_buffer@@Base+0xd4>
   13bd8:	ldr	r2, [sp, #12]
   13bdc:	add	r2, r2, r5
   13be0:	str	r2, [sp, #12]
   13be4:	ldr	r2, [sp, #16]
   13be8:	add	r2, r2, #1
   13bec:	add	r0, sp, #88	; 0x58
   13bf0:	add	r0, r0, r2, lsl #3
   13bf4:	str	r6, [r0, #-76]	; 0xffffffb4
   13bf8:	str	r5, [r0, #-72]	; 0xffffffb8
   13bfc:	str	r2, [sp, #16]
   13c00:	cmp	r3, #0
   13c04:	beq	13c38 <flatcc_builder_embed_buffer@@Base+0x10c>
   13c08:	ldr	r2, [sp, #12]
   13c0c:	add	r2, r2, r3
   13c10:	str	r2, [sp, #12]
   13c14:	ldr	r2, [sp, #16]
   13c18:	add	r2, r2, #1
   13c1c:	add	r0, sp, #88	; 0x58
   13c20:	add	ip, r0, r2, lsl #3
   13c24:	movw	r0, #37924	; 0x9424
   13c28:	movt	r0, #1
   13c2c:	str	r0, [ip, #-76]	; 0xffffffb4
   13c30:	str	r3, [ip, #-72]	; 0xffffffb8
   13c34:	str	r2, [sp, #16]
   13c38:	ldr	r3, [sp, #12]
   13c3c:	sub	r5, r1, r3
   13c40:	cmp	r1, r5
   13c44:	ble	13c88 <flatcc_builder_embed_buffer@@Base+0x15c>
   13c48:	str	r3, [sp]
   13c4c:	ldr	r6, [r4, #44]	; 0x2c
   13c50:	mov	r3, r5
   13c54:	ldr	r2, [sp, #16]
   13c58:	add	r1, sp, #20
   13c5c:	ldr	r0, [r4, #36]	; 0x24
   13c60:	blx	r6
   13c64:	cmp	r0, #0
   13c68:	streq	r5, [r4, #136]	; 0x88
   13c6c:	bne	13ca4 <flatcc_builder_embed_buffer@@Base+0x178>
   13c70:	mov	r0, r5
   13c74:	add	sp, sp, #88	; 0x58
   13c78:	ldrd	r4, [sp]
   13c7c:	ldr	r6, [sp, #8]
   13c80:	add	sp, sp, #12
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	ldr	r3, [pc, #56]	; 13cc8 <flatcc_builder_embed_buffer@@Base+0x19c>
   13c8c:	movw	r2, #647	; 0x287
   13c90:	movw	r1, #39796	; 0x9b74
   13c94:	movt	r1, #1
   13c98:	movw	r0, #39880	; 0x9bc8
   13c9c:	movt	r0, #1
   13ca0:	bl	12324 <__assert_fail@plt>
   13ca4:	ldr	r3, [pc, #28]	; 13cc8 <flatcc_builder_embed_buffer@@Base+0x19c>
   13ca8:	movw	r2, #651	; 0x28b
   13cac:	movw	r1, #39796	; 0x9b74
   13cb0:	movt	r1, #1
   13cb4:	movw	r0, #39880	; 0x9bc8
   13cb8:	movt	r0, #1
   13cbc:	bl	12324 <__assert_fail@plt>
   13cc0:	mov	r5, #0
   13cc4:	b	13c70 <flatcc_builder_embed_buffer@@Base+0x144>
   13cc8:	andeq	r9, r1, r0, ror r6

00013ccc <flatcc_builder_create_buffer@@Base>:
   13ccc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13cd0:	strd	r6, [sp, #8]
   13cd4:	strd	r8, [sp, #16]
   13cd8:	str	lr, [sp, #24]
   13cdc:	sub	sp, sp, #100	; 0x64
   13ce0:	mov	r5, r0
   13ce4:	mov	r8, r1
   13ce8:	mov	r4, r3
   13cec:	ldr	r7, [sp, #132]	; 0x84
   13cf0:	mov	r3, #0
   13cf4:	str	r3, [sp, #12]
   13cf8:	and	r6, r7, #1
   13cfc:	mov	r3, r6
   13d00:	add	r1, sp, #128	; 0x80
   13d04:	bl	13110 <flatcc_builder_default_alloc@@Base+0x128>
   13d08:	cmp	r0, #0
   13d0c:	bne	13f08 <flatcc_builder_create_buffer@@Base+0x23c>
   13d10:	ldrh	r2, [sp, #128]	; 0x80
   13d14:	ldrh	r3, [r5, #128]	; 0x80
   13d18:	cmp	r3, r2
   13d1c:	strhcc	r2, [r5, #128]	; 0x80
   13d20:	cmp	r8, #0
   13d24:	ldrne	r3, [r8]
   13d28:	strne	r3, [sp, #12]
   13d2c:	ldr	r1, [sp, #12]
   13d30:	cmp	r1, #0
   13d34:	movne	r1, #4
   13d38:	and	r3, r7, #2
   13d3c:	cmp	r3, #0
   13d40:	movne	ip, #4
   13d44:	moveq	ip, #0
   13d48:	ldr	r0, [r5, #136]	; 0x88
   13d4c:	sub	r3, r0, #4
   13d50:	sub	r3, r3, r1
   13d54:	sub	r3, r3, ip
   13d58:	sub	r2, r2, #1
   13d5c:	and	r3, r3, r2
   13d60:	mov	r2, #0
   13d64:	str	r2, [sp, #16]
   13d68:	str	r2, [sp, #20]
   13d6c:	ands	r7, r7, #3
   13d70:	beq	13d90 <flatcc_builder_create_buffer@@Base+0xc4>
   13d74:	mov	r2, #4
   13d78:	str	r2, [sp, #16]
   13d7c:	add	ip, sp, #88	; 0x58
   13d80:	str	ip, [sp, #24]
   13d84:	str	r2, [sp, #28]
   13d88:	mov	r2, #1
   13d8c:	str	r2, [sp, #20]
   13d90:	ldr	ip, [sp, #16]
   13d94:	add	ip, ip, #4
   13d98:	str	ip, [sp, #16]
   13d9c:	ldr	lr, [sp, #20]
   13da0:	add	r2, lr, #1
   13da4:	add	r8, sp, #96	; 0x60
   13da8:	add	r8, r8, r2, lsl #3
   13dac:	add	r9, sp, #92	; 0x5c
   13db0:	str	r9, [r8, #-80]	; 0xffffffb0
   13db4:	mov	r9, #4
   13db8:	str	r9, [r8, #-76]	; 0xffffffb4
   13dbc:	str	r2, [sp, #20]
   13dc0:	cmp	r1, #0
   13dc4:	beq	13df0 <flatcc_builder_create_buffer@@Base+0x124>
   13dc8:	add	ip, ip, r1
   13dcc:	str	ip, [sp, #16]
   13dd0:	add	r2, lr, #2
   13dd4:	add	ip, sp, #96	; 0x60
   13dd8:	add	r2, ip, r2, lsl #3
   13ddc:	add	ip, sp, #12
   13de0:	str	ip, [r2, #-80]	; 0xffffffb0
   13de4:	str	r1, [r2, #-76]	; 0xffffffb4
   13de8:	add	lr, lr, #2
   13dec:	str	lr, [sp, #20]
   13df0:	cmp	r3, #0
   13df4:	beq	13e28 <flatcc_builder_create_buffer@@Base+0x15c>
   13df8:	ldr	r2, [sp, #16]
   13dfc:	add	r2, r2, r3
   13e00:	str	r2, [sp, #16]
   13e04:	ldr	r2, [sp, #20]
   13e08:	add	r2, r2, #1
   13e0c:	add	r1, sp, #96	; 0x60
   13e10:	add	ip, r1, r2, lsl #3
   13e14:	movw	r1, #37924	; 0x9424
   13e18:	movt	r1, #1
   13e1c:	str	r1, [ip, #-80]	; 0xffffffb0
   13e20:	str	r3, [ip, #-76]	; 0xffffffb4
   13e24:	str	r2, [sp, #20]
   13e28:	ldr	r1, [sp, #16]
   13e2c:	sub	r3, r0, r1
   13e30:	cmp	r7, #0
   13e34:	movne	r2, #4
   13e38:	moveq	r2, #0
   13e3c:	add	r3, r3, r2
   13e40:	cmp	r6, #0
   13e44:	ldrne	r2, [r5, #144]	; 0x90
   13e48:	ldreq	r2, [r5, #140]	; 0x8c
   13e4c:	sub	r2, r2, r3
   13e50:	str	r2, [sp, #88]	; 0x58
   13e54:	sub	r4, r4, r3
   13e58:	str	r4, [sp, #92]	; 0x5c
   13e5c:	sub	r4, r0, r1
   13e60:	cmp	r0, r4
   13e64:	ble	13eb4 <flatcc_builder_create_buffer@@Base+0x1e8>
   13e68:	str	r1, [sp]
   13e6c:	ldr	r6, [r5, #44]	; 0x2c
   13e70:	mov	r3, r4
   13e74:	ldr	r2, [sp, #20]
   13e78:	add	r1, sp, #24
   13e7c:	ldr	r0, [r5, #36]	; 0x24
   13e80:	blx	r6
   13e84:	cmp	r0, #0
   13e88:	bne	13ed0 <flatcc_builder_create_buffer@@Base+0x204>
   13e8c:	str	r4, [r5, #136]	; 0x88
   13e90:	cmp	r4, #0
   13e94:	beq	13eec <flatcc_builder_create_buffer@@Base+0x220>
   13e98:	mov	r0, r4
   13e9c:	add	sp, sp, #100	; 0x64
   13ea0:	ldrd	r4, [sp]
   13ea4:	ldrd	r6, [sp, #8]
   13ea8:	ldrd	r8, [sp, #16]
   13eac:	add	sp, sp, #24
   13eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb4:	ldr	r3, [pc, #84]	; 13f10 <flatcc_builder_create_buffer@@Base+0x244>
   13eb8:	movw	r2, #647	; 0x287
   13ebc:	movw	r1, #39796	; 0x9b74
   13ec0:	movt	r1, #1
   13ec4:	movw	r0, #39880	; 0x9bc8
   13ec8:	movt	r0, #1
   13ecc:	bl	12324 <__assert_fail@plt>
   13ed0:	ldr	r3, [pc, #56]	; 13f10 <flatcc_builder_create_buffer@@Base+0x244>
   13ed4:	movw	r2, #651	; 0x28b
   13ed8:	movw	r1, #39796	; 0x9b74
   13edc:	movt	r1, #1
   13ee0:	movw	r0, #39880	; 0x9bc8
   13ee4:	movt	r0, #1
   13ee8:	bl	12324 <__assert_fail@plt>
   13eec:	ldr	r3, [pc, #32]	; 13f14 <flatcc_builder_create_buffer@@Base+0x248>
   13ef0:	mov	r2, #772	; 0x304
   13ef4:	movw	r1, #39796	; 0x9b74
   13ef8:	movt	r1, #1
   13efc:	movw	r0, #39880	; 0x9bc8
   13f00:	movt	r0, #1
   13f04:	bl	12324 <__assert_fail@plt>
   13f08:	mov	r4, #0
   13f0c:	b	13e98 <flatcc_builder_create_buffer@@Base+0x1cc>
   13f10:	andeq	r9, r1, r0, ror r6
   13f14:	ldrdeq	r9, [r1], -ip

00013f18 <flatcc_builder_create_struct@@Base>:
   13f18:	strd	r4, [sp, #-16]!
   13f1c:	str	r6, [sp, #8]
   13f20:	str	lr, [sp, #12]
   13f24:	sub	sp, sp, #80	; 0x50
   13f28:	cmp	r3, #0
   13f2c:	beq	13f84 <flatcc_builder_create_struct@@Base+0x6c>
   13f30:	mov	r4, r0
   13f34:	ldrh	r0, [r0, #128]	; 0x80
   13f38:	cmp	r0, r3
   13f3c:	strhcc	r3, [r4, #128]	; 0x80
   13f40:	ldr	ip, [r4, #136]	; 0x88
   13f44:	sub	r0, ip, r2
   13f48:	sub	r3, r3, #1
   13f4c:	and	r3, r3, r0
   13f50:	mov	r0, #0
   13f54:	str	r0, [sp, #8]
   13f58:	str	r0, [sp, #12]
   13f5c:	cmp	r2, r0
   13f60:	beq	13fd8 <flatcc_builder_create_struct@@Base+0xc0>
   13f64:	str	r2, [sp, #8]
   13f68:	str	r1, [sp, #16]
   13f6c:	str	r2, [sp, #20]
   13f70:	mov	r2, #1
   13f74:	str	r2, [sp, #12]
   13f78:	cmp	r3, r0
   13f7c:	beq	14010 <flatcc_builder_create_struct@@Base+0xf8>
   13f80:	b	13fe0 <flatcc_builder_create_struct@@Base+0xc8>
   13f84:	ldr	r3, [pc, #212]	; 14060 <flatcc_builder_create_struct@@Base+0x148>
   13f88:	movw	r2, #783	; 0x30f
   13f8c:	movw	r1, #39796	; 0x9b74
   13f90:	movt	r1, #1
   13f94:	movw	r0, #39980	; 0x9c2c
   13f98:	movt	r0, #1
   13f9c:	bl	12324 <__assert_fail@plt>
   13fa0:	ldr	r3, [pc, #188]	; 14064 <flatcc_builder_create_struct@@Base+0x14c>
   13fa4:	movw	r2, #647	; 0x287
   13fa8:	movw	r1, #39796	; 0x9b74
   13fac:	movt	r1, #1
   13fb0:	movw	r0, #39880	; 0x9bc8
   13fb4:	movt	r0, #1
   13fb8:	bl	12324 <__assert_fail@plt>
   13fbc:	ldr	r3, [pc, #160]	; 14064 <flatcc_builder_create_struct@@Base+0x14c>
   13fc0:	movw	r2, #651	; 0x28b
   13fc4:	movw	r1, #39796	; 0x9b74
   13fc8:	movt	r1, #1
   13fcc:	movw	r0, #39880	; 0x9bc8
   13fd0:	movt	r0, #1
   13fd4:	bl	12324 <__assert_fail@plt>
   13fd8:	cmp	r3, #0
   13fdc:	beq	13fa0 <flatcc_builder_create_struct@@Base+0x88>
   13fe0:	ldr	r2, [sp, #8]
   13fe4:	add	r2, r2, r3
   13fe8:	str	r2, [sp, #8]
   13fec:	ldr	r2, [sp, #12]
   13ff0:	add	r2, r2, #1
   13ff4:	add	r1, sp, #80	; 0x50
   13ff8:	add	r0, r1, r2, lsl #3
   13ffc:	movw	r1, #37924	; 0x9424
   14000:	movt	r1, #1
   14004:	str	r1, [r0, #-72]	; 0xffffffb8
   14008:	str	r3, [r0, #-68]	; 0xffffffbc
   1400c:	str	r2, [sp, #12]
   14010:	ldr	r3, [sp, #8]
   14014:	sub	r5, ip, r3
   14018:	cmp	ip, r5
   1401c:	ble	13fa0 <flatcc_builder_create_struct@@Base+0x88>
   14020:	str	r3, [sp]
   14024:	ldr	r6, [r4, #44]	; 0x2c
   14028:	mov	r3, r5
   1402c:	ldr	r2, [sp, #12]
   14030:	add	r1, sp, #16
   14034:	ldr	r0, [r4, #36]	; 0x24
   14038:	blx	r6
   1403c:	cmp	r0, #0
   14040:	bne	13fbc <flatcc_builder_create_struct@@Base+0xa4>
   14044:	str	r5, [r4, #136]	; 0x88
   14048:	mov	r0, r5
   1404c:	add	sp, sp, #80	; 0x50
   14050:	ldrd	r4, [sp]
   14054:	ldr	r6, [sp, #8]
   14058:	add	sp, sp, #12
   1405c:	pop	{pc}		; (ldr pc, [sp], #4)
   14060:	strdeq	r9, [r1], -ip
   14064:	andeq	r9, r1, r0, ror r6

00014068 <flatcc_builder_start_buffer@@Base>:
   14068:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1406c:	strd	r6, [sp, #8]
   14070:	str	r8, [sp, #16]
   14074:	str	lr, [sp, #20]
   14078:	mov	r4, r0
   1407c:	mov	r5, r1
   14080:	mov	r7, r2
   14084:	mov	r6, r3
   14088:	ldrh	r1, [r0, #128]	; 0x80
   1408c:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   14090:	cmp	r0, #0
   14094:	bne	14134 <flatcc_builder_start_buffer@@Base+0xcc>
   14098:	mov	r3, #1
   1409c:	strh	r3, [r4, #128]	; 0x80
   140a0:	ldr	r3, [r4, #32]
   140a4:	ldrh	r2, [r4, #132]	; 0x84
   140a8:	strh	r2, [r3, #34]	; 0x22
   140ac:	strh	r7, [r4, #132]	; 0x84
   140b0:	ldr	r3, [r4, #32]
   140b4:	ldrh	r2, [r4, #164]	; 0xa4
   140b8:	strh	r2, [r3, #32]
   140bc:	strh	r6, [r4, #164]	; 0xa4
   140c0:	ldr	r3, [r4, #32]
   140c4:	ldr	r2, [r4, #144]	; 0x90
   140c8:	str	r2, [r3, #20]
   140cc:	ldr	r3, [r4, #32]
   140d0:	ldr	r2, [r4, #152]	; 0x98
   140d4:	str	r2, [r3, #28]
   140d8:	ldr	r3, [r4, #136]	; 0x88
   140dc:	str	r3, [r4, #144]	; 0x90
   140e0:	ldr	r3, [r4, #148]	; 0x94
   140e4:	add	r2, r3, #1
   140e8:	str	r2, [r4, #148]	; 0x94
   140ec:	str	r3, [r4, #152]	; 0x98
   140f0:	ldr	r3, [r4, #32]
   140f4:	ldr	r2, [r4, #168]	; 0xa8
   140f8:	str	r2, [r3, #16]
   140fc:	movw	r3, #37924	; 0x9424
   14100:	movt	r3, #1
   14104:	cmp	r5, #0
   14108:	moveq	r5, r3
   1410c:	ldr	r3, [r5]
   14110:	str	r3, [r4, #168]	; 0xa8
   14114:	ldr	r3, [r4, #32]
   14118:	mov	r2, #1
   1411c:	strh	r2, [r3, #14]
   14120:	ldrd	r4, [sp]
   14124:	ldrd	r6, [sp, #8]
   14128:	ldr	r8, [sp, #16]
   1412c:	add	sp, sp, #20
   14130:	pop	{pc}		; (ldr pc, [sp], #4)
   14134:	mvn	r0, #0
   14138:	b	14120 <flatcc_builder_start_buffer@@Base+0xb8>

0001413c <flatcc_builder_end_buffer@@Base>:
   1413c:	strd	r4, [sp, #-12]!
   14140:	str	lr, [sp, #8]
   14144:	sub	sp, sp, #12
   14148:	mov	r4, r0
   1414c:	ldrh	r2, [r0, #164]	; 0xa4
   14150:	and	r2, r2, #2
   14154:	ldr	r0, [r0, #152]	; 0x98
   14158:	cmp	r0, #0
   1415c:	moveq	r0, r2
   14160:	orrne	r0, r2, #1
   14164:	ldr	r2, [r4, #32]
   14168:	ldrh	r2, [r2, #14]
   1416c:	cmp	r2, #1
   14170:	bne	141bc <flatcc_builder_end_buffer@@Base+0x80>
   14174:	ldrh	r2, [r4, #132]	; 0x84
   14178:	ldrh	r3, [r4, #128]	; 0x80
   1417c:	cmp	r3, r2
   14180:	strhcc	r2, [r4, #128]	; 0x80
   14184:	str	r0, [sp, #4]
   14188:	ldrh	r3, [r4, #128]	; 0x80
   1418c:	str	r3, [sp]
   14190:	mov	r3, r1
   14194:	add	r1, r4, #168	; 0xa8
   14198:	mov	r0, r4
   1419c:	bl	13ccc <flatcc_builder_create_buffer@@Base>
   141a0:	subs	r5, r0, #0
   141a4:	bne	141d8 <flatcc_builder_end_buffer@@Base+0x9c>
   141a8:	mov	r0, r5
   141ac:	add	sp, sp, #12
   141b0:	ldrd	r4, [sp]
   141b4:	add	sp, sp, #8
   141b8:	pop	{pc}		; (ldr pc, [sp], #4)
   141bc:	ldr	r3, [pc, #184]	; 1427c <flatcc_builder_end_buffer@@Base+0x140>
   141c0:	movw	r2, #838	; 0x346
   141c4:	movw	r1, #39796	; 0x9b74
   141c8:	movt	r1, #1
   141cc:	movw	r0, #39992	; 0x9c38
   141d0:	movt	r0, #1
   141d4:	bl	12324 <__assert_fail@plt>
   141d8:	ldr	r3, [r4, #32]
   141dc:	ldr	r2, [r3, #20]
   141e0:	str	r2, [r4, #144]	; 0x90
   141e4:	ldr	r2, [r3, #28]
   141e8:	str	r2, [r4, #152]	; 0x98
   141ec:	ldr	r2, [r3, #16]
   141f0:	str	r2, [r4, #168]	; 0xa8
   141f4:	ldrh	r3, [r3, #32]
   141f8:	strh	r3, [r4, #164]	; 0xa4
   141fc:	ldr	r2, [r4, #20]
   14200:	mov	r1, #0
   14204:	ldr	r0, [r4, #16]
   14208:	bl	122f4 <memset@plt>
   1420c:	ldr	r2, [r4, #32]
   14210:	ldr	r3, [r2, #8]
   14214:	str	r3, [r4, #20]
   14218:	ldr	r0, [r2]
   1421c:	str	r0, [r4, #28]
   14220:	ldr	r1, [r2, #4]
   14224:	ldr	r3, [r4, #60]	; 0x3c
   14228:	add	r3, r3, r0
   1422c:	str	r3, [r4, #16]
   14230:	ldr	r3, [r4, #64]	; 0x40
   14234:	sub	r3, r3, r0
   14238:	cmp	r3, r1
   1423c:	movcs	r3, r1
   14240:	str	r3, [r4, #24]
   14244:	str	r1, [r2, #4]
   14248:	ldrh	r3, [r4, #130]	; 0x82
   1424c:	ldrh	r2, [r4, #128]	; 0x80
   14250:	cmp	r2, r3
   14254:	strhcc	r3, [r4, #128]	; 0x80
   14258:	ldr	r3, [r4, #32]
   1425c:	ldrh	r2, [r3, #12]
   14260:	strh	r2, [r4, #130]	; 0x82
   14264:	sub	r3, r3, #36	; 0x24
   14268:	str	r3, [r4, #32]
   1426c:	ldr	r3, [r4, #156]	; 0x9c
   14270:	sub	r3, r3, #1
   14274:	str	r3, [r4, #156]	; 0x9c
   14278:	b	141a8 <flatcc_builder_end_buffer@@Base+0x6c>
   1427c:	andeq	r9, r1, ip, lsl r7

00014280 <flatcc_builder_start_struct@@Base>:
   14280:	strd	r4, [sp, #-16]!
   14284:	str	r6, [sp, #8]
   14288:	str	lr, [sp, #12]
   1428c:	mov	r4, r0
   14290:	mov	r5, r1
   14294:	mov	r1, r2
   14298:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   1429c:	cmp	r0, #0
   142a0:	movne	r0, #0
   142a4:	bne	14304 <flatcc_builder_start_struct@@Base+0x84>
   142a8:	ldr	r3, [r4, #32]
   142ac:	mov	r2, #2
   142b0:	strh	r2, [r3, #14]
   142b4:	ldr	r1, [r4, #28]
   142b8:	ldr	r2, [r4, #60]	; 0x3c
   142bc:	add	r2, r2, r1
   142c0:	str	r2, [r4, #16]
   142c4:	ldr	r3, [r4, #64]	; 0x40
   142c8:	sub	r3, r3, r1
   142cc:	cmn	r3, #4
   142d0:	mvnhi	r3, #3
   142d4:	str	r3, [r4, #24]
   142d8:	ldr	r3, [r4, #32]
   142dc:	mvn	r2, #3
   142e0:	str	r2, [r3, #4]
   142e4:	ldr	r6, [r4, #20]
   142e8:	add	r5, r5, r6
   142ec:	str	r5, [r4, #20]
   142f0:	ldr	r3, [r4, #24]
   142f4:	cmp	r5, r3
   142f8:	bcs	14314 <flatcc_builder_start_struct@@Base+0x94>
   142fc:	ldr	r0, [r4, #16]
   14300:	add	r0, r0, r6
   14304:	ldrd	r4, [sp]
   14308:	ldr	r6, [sp, #8]
   1430c:	add	sp, sp, #12
   14310:	pop	{pc}		; (ldr pc, [sp], #4)
   14314:	add	r1, r5, #1
   14318:	mov	r0, r4
   1431c:	bl	12f60 <main@@Base+0x100>
   14320:	cmp	r0, #0
   14324:	movne	r0, #0
   14328:	beq	142fc <flatcc_builder_start_struct@@Base+0x7c>
   1432c:	b	14304 <flatcc_builder_start_struct@@Base+0x84>

00014330 <flatcc_builder_struct_edit@@Base>:
   14330:	ldr	r0, [r0, #16]
   14334:	bx	lr

00014338 <flatcc_builder_end_struct@@Base>:
   14338:	strd	r4, [sp, #-16]!
   1433c:	str	r6, [sp, #8]
   14340:	str	lr, [sp, #12]
   14344:	ldr	r3, [r0, #32]
   14348:	ldrh	r3, [r3, #14]
   1434c:	cmp	r3, #2
   14350:	bne	14384 <flatcc_builder_end_struct@@Base+0x4c>
   14354:	mov	r4, r0
   14358:	ldrh	r3, [r0, #130]	; 0x82
   1435c:	ldr	r2, [r0, #20]
   14360:	ldr	r1, [r0, #16]
   14364:	bl	13f18 <flatcc_builder_create_struct@@Base>
   14368:	subs	r5, r0, #0
   1436c:	bne	143a0 <flatcc_builder_end_struct@@Base+0x68>
   14370:	mov	r0, r5
   14374:	ldrd	r4, [sp]
   14378:	ldr	r6, [sp, #8]
   1437c:	add	sp, sp, #12
   14380:	pop	{pc}		; (ldr pc, [sp], #4)
   14384:	ldr	r3, [pc, #148]	; 14420 <flatcc_builder_end_struct@@Base+0xe8>
   14388:	mov	r2, #872	; 0x368
   1438c:	movw	r1, #39796	; 0x9b74
   14390:	movt	r1, #1
   14394:	movw	r0, #40036	; 0x9c64
   14398:	movt	r0, #1
   1439c:	bl	12324 <__assert_fail@plt>
   143a0:	ldr	r2, [r4, #20]
   143a4:	mov	r1, #0
   143a8:	ldr	r0, [r4, #16]
   143ac:	bl	122f4 <memset@plt>
   143b0:	ldr	r2, [r4, #32]
   143b4:	ldr	r3, [r2, #8]
   143b8:	str	r3, [r4, #20]
   143bc:	ldr	r0, [r2]
   143c0:	str	r0, [r4, #28]
   143c4:	ldr	r1, [r2, #4]
   143c8:	ldr	r3, [r4, #60]	; 0x3c
   143cc:	add	r3, r3, r0
   143d0:	str	r3, [r4, #16]
   143d4:	ldr	r3, [r4, #64]	; 0x40
   143d8:	sub	r3, r3, r0
   143dc:	cmp	r3, r1
   143e0:	movcs	r3, r1
   143e4:	str	r3, [r4, #24]
   143e8:	str	r1, [r2, #4]
   143ec:	ldrh	r3, [r4, #130]	; 0x82
   143f0:	ldrh	r2, [r4, #128]	; 0x80
   143f4:	cmp	r2, r3
   143f8:	strhcc	r3, [r4, #128]	; 0x80
   143fc:	ldr	r3, [r4, #32]
   14400:	ldrh	r2, [r3, #12]
   14404:	strh	r2, [r4, #130]	; 0x82
   14408:	sub	r3, r3, #36	; 0x24
   1440c:	str	r3, [r4, #32]
   14410:	ldr	r3, [r4, #156]	; 0x9c
   14414:	sub	r3, r3, #1
   14418:	str	r3, [r4, #156]	; 0x9c
   1441c:	b	14370 <flatcc_builder_end_struct@@Base+0x38>
   14420:	andeq	r9, r1, r8, lsr r7

00014424 <flatcc_builder_extend_vector@@Base>:
   14424:	strd	r4, [sp, #-16]!
   14428:	str	r6, [sp, #8]
   1442c:	str	lr, [sp, #12]
   14430:	mov	r4, r0
   14434:	ldr	r2, [r0, #32]
   14438:	ldr	r3, [r2, #20]
   1443c:	add	r0, r1, r3
   14440:	ldr	ip, [r2, #24]
   14444:	cmp	r3, r0
   14448:	movls	r3, #0
   1444c:	movhi	r3, #1
   14450:	cmp	ip, r0
   14454:	orrcc	r3, r3, #1
   14458:	cmp	r3, #0
   1445c:	bne	1449c <flatcc_builder_extend_vector@@Base+0x78>
   14460:	str	r0, [r2, #20]
   14464:	ldr	r5, [r4, #20]
   14468:	ldr	r3, [r4, #32]
   1446c:	ldr	r3, [r3, #16]
   14470:	mla	r1, r3, r1, r5
   14474:	str	r1, [r4, #20]
   14478:	ldr	r3, [r4, #24]
   1447c:	cmp	r1, r3
   14480:	bcs	144b8 <flatcc_builder_extend_vector@@Base+0x94>
   14484:	ldr	r0, [r4, #16]
   14488:	add	r0, r0, r5
   1448c:	ldrd	r4, [sp]
   14490:	ldr	r6, [sp, #8]
   14494:	add	sp, sp, #12
   14498:	pop	{pc}		; (ldr pc, [sp], #4)
   1449c:	ldr	r3, [pc, #52]	; 144d8 <flatcc_builder_extend_vector@@Base+0xb4>
   144a0:	mov	r2, #892	; 0x37c
   144a4:	movw	r1, #39796	; 0x9b74
   144a8:	movt	r1, #1
   144ac:	movw	r0, #40080	; 0x9c90
   144b0:	movt	r0, #1
   144b4:	bl	12324 <__assert_fail@plt>
   144b8:	mvn	r2, #3
   144bc:	add	r1, r1, #1
   144c0:	mov	r0, r4
   144c4:	bl	12f60 <main@@Base+0x100>
   144c8:	cmp	r0, #0
   144cc:	movne	r0, #0
   144d0:	beq	14484 <flatcc_builder_extend_vector@@Base+0x60>
   144d4:	b	1448c <flatcc_builder_extend_vector@@Base+0x68>
   144d8:	andeq	r9, r1, r4, asr r7

000144dc <flatcc_builder_vector_push@@Base>:
   144dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144e0:	strd	r6, [sp, #8]
   144e4:	str	r8, [sp, #16]
   144e8:	str	lr, [sp, #20]
   144ec:	ldr	r3, [r0, #32]
   144f0:	ldrh	r2, [r3, #14]
   144f4:	cmp	r2, #4
   144f8:	bne	14570 <flatcc_builder_vector_push@@Base+0x94>
   144fc:	mov	r4, r0
   14500:	mov	r6, r1
   14504:	ldr	r2, [r3, #20]
   14508:	ldr	r1, [r3, #24]
   1450c:	cmp	r2, r1
   14510:	bhi	1458c <flatcc_builder_vector_push@@Base+0xb0>
   14514:	add	r2, r2, #1
   14518:	str	r2, [r3, #20]
   1451c:	ldr	r3, [r0, #32]
   14520:	ldr	r7, [r3, #16]
   14524:	ldr	r5, [r0, #20]
   14528:	add	r1, r7, r5
   1452c:	str	r1, [r0, #20]
   14530:	ldr	r3, [r0, #24]
   14534:	cmp	r1, r3
   14538:	bcs	145a8 <flatcc_builder_vector_push@@Base+0xcc>
   1453c:	ldr	r4, [r4, #16]
   14540:	adds	r4, r4, r5
   14544:	beq	14558 <flatcc_builder_vector_push@@Base+0x7c>
   14548:	mov	r2, r7
   1454c:	mov	r1, r6
   14550:	mov	r0, r4
   14554:	bl	12294 <memcpy@plt>
   14558:	mov	r0, r4
   1455c:	ldrd	r4, [sp]
   14560:	ldrd	r6, [sp, #8]
   14564:	ldr	r8, [sp, #16]
   14568:	add	sp, sp, #20
   1456c:	pop	{pc}		; (ldr pc, [sp], #4)
   14570:	ldr	r3, [pc, #76]	; 145c4 <flatcc_builder_vector_push@@Base+0xe8>
   14574:	movw	r2, #907	; 0x38b
   14578:	movw	r1, #39796	; 0x9b74
   1457c:	movt	r1, #1
   14580:	movw	r0, #40108	; 0x9cac
   14584:	movt	r0, #1
   14588:	bl	12324 <__assert_fail@plt>
   1458c:	ldr	r3, [pc, #48]	; 145c4 <flatcc_builder_vector_push@@Base+0xe8>
   14590:	mov	r2, #908	; 0x38c
   14594:	movw	r1, #39796	; 0x9b74
   14598:	movt	r1, #1
   1459c:	movw	r0, #40152	; 0x9cd8
   145a0:	movt	r0, #1
   145a4:	bl	12324 <__assert_fail@plt>
   145a8:	mvn	r2, #3
   145ac:	add	r1, r1, #1
   145b0:	bl	12f60 <main@@Base+0x100>
   145b4:	cmp	r0, #0
   145b8:	movne	r4, #0
   145bc:	beq	1453c <flatcc_builder_vector_push@@Base+0x60>
   145c0:	b	14558 <flatcc_builder_vector_push@@Base+0x7c>
   145c4:	andeq	r9, r1, r8, ror #14

000145c8 <flatcc_builder_append_vector@@Base>:
   145c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145cc:	strd	r6, [sp, #8]
   145d0:	str	r8, [sp, #16]
   145d4:	str	lr, [sp, #20]
   145d8:	mov	r6, r1
   145dc:	ldr	r1, [r0, #32]
   145e0:	ldrh	r3, [r1, #14]
   145e4:	cmp	r3, #4
   145e8:	bne	14674 <flatcc_builder_append_vector@@Base+0xac>
   145ec:	mov	r4, r0
   145f0:	ldr	r3, [r1, #20]
   145f4:	add	r0, r2, r3
   145f8:	ldr	ip, [r1, #24]
   145fc:	cmp	r3, r0
   14600:	movls	r3, #0
   14604:	movhi	r3, #1
   14608:	cmp	ip, r0
   1460c:	orrcc	r3, r3, #1
   14610:	cmp	r3, #0
   14614:	bne	14690 <flatcc_builder_append_vector@@Base+0xc8>
   14618:	str	r0, [r1, #20]
   1461c:	ldr	r3, [r4, #32]
   14620:	ldr	r5, [r3, #16]
   14624:	mul	r5, r5, r2
   14628:	ldr	r7, [r4, #20]
   1462c:	add	r1, r5, r7
   14630:	str	r1, [r4, #20]
   14634:	ldr	r3, [r4, #24]
   14638:	cmp	r1, r3
   1463c:	bcs	146ac <flatcc_builder_append_vector@@Base+0xe4>
   14640:	ldr	r4, [r4, #16]
   14644:	adds	r4, r4, r7
   14648:	beq	1465c <flatcc_builder_append_vector@@Base+0x94>
   1464c:	mov	r2, r5
   14650:	mov	r1, r6
   14654:	mov	r0, r4
   14658:	bl	12294 <memcpy@plt>
   1465c:	mov	r0, r4
   14660:	ldrd	r4, [sp]
   14664:	ldrd	r6, [sp, #8]
   14668:	ldr	r8, [sp, #16]
   1466c:	add	sp, sp, #20
   14670:	pop	{pc}		; (ldr pc, [sp], #4)
   14674:	ldr	r3, [pc, #80]	; 146cc <flatcc_builder_append_vector@@Base+0x104>
   14678:	movw	r2, #915	; 0x393
   1467c:	movw	r1, #39796	; 0x9b74
   14680:	movt	r1, #1
   14684:	movw	r0, #40108	; 0x9cac
   14688:	movt	r0, #1
   1468c:	bl	12324 <__assert_fail@plt>
   14690:	ldr	r3, [pc, #56]	; 146d0 <flatcc_builder_append_vector@@Base+0x108>
   14694:	mov	r2, #892	; 0x37c
   14698:	movw	r1, #39796	; 0x9b74
   1469c:	movt	r1, #1
   146a0:	movw	r0, #40080	; 0x9c90
   146a4:	movt	r0, #1
   146a8:	bl	12324 <__assert_fail@plt>
   146ac:	mvn	r2, #3
   146b0:	add	r1, r1, #1
   146b4:	mov	r0, r4
   146b8:	bl	12f60 <main@@Base+0x100>
   146bc:	cmp	r0, #0
   146c0:	movne	r4, #0
   146c4:	beq	14640 <flatcc_builder_append_vector@@Base+0x78>
   146c8:	b	1465c <flatcc_builder_append_vector@@Base+0x94>
   146cc:	andeq	r9, r1, r4, lsl #15
   146d0:	andeq	r9, r1, r4, asr r7

000146d4 <flatcc_builder_extend_offset_vector@@Base>:
   146d4:	strd	r4, [sp, #-16]!
   146d8:	str	r6, [sp, #8]
   146dc:	str	lr, [sp, #12]
   146e0:	mov	r4, r0
   146e4:	ldr	r2, [r0, #32]
   146e8:	ldr	r3, [r2, #20]
   146ec:	adds	r3, r1, r3
   146f0:	movcs	ip, #1
   146f4:	movcc	ip, #0
   146f8:	cmn	r3, #-1073741823	; 0xc0000001
   146fc:	movls	r0, #0
   14700:	movhi	r0, #1
   14704:	orrs	r0, ip, r0
   14708:	bne	14740 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   1470c:	str	r3, [r2, #20]
   14710:	ldr	r5, [r4, #20]
   14714:	add	r1, r5, r1, lsl #2
   14718:	str	r1, [r4, #20]
   1471c:	ldr	r3, [r4, #24]
   14720:	cmp	r1, r3
   14724:	bcs	1475c <flatcc_builder_extend_offset_vector@@Base+0x88>
   14728:	ldr	r0, [r4, #16]
   1472c:	add	r0, r0, r5
   14730:	ldrd	r4, [sp]
   14734:	ldr	r6, [sp, #8]
   14738:	add	sp, sp, #12
   1473c:	pop	{pc}		; (ldr pc, [sp], #4)
   14740:	ldr	r3, [pc, #52]	; 1477c <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14744:	mov	r2, #892	; 0x37c
   14748:	movw	r1, #39796	; 0x9b74
   1474c:	movt	r1, #1
   14750:	movw	r0, #40080	; 0x9c90
   14754:	movt	r0, #1
   14758:	bl	12324 <__assert_fail@plt>
   1475c:	mvn	r2, #3
   14760:	add	r1, r1, #1
   14764:	mov	r0, r4
   14768:	bl	12f60 <main@@Base+0x100>
   1476c:	cmp	r0, #0
   14770:	movne	r0, #0
   14774:	beq	14728 <flatcc_builder_extend_offset_vector@@Base+0x54>
   14778:	b	14730 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   1477c:	andeq	r9, r1, r4, asr r7

00014780 <flatcc_builder_offset_vector_push@@Base>:
   14780:	strd	r4, [sp, #-16]!
   14784:	str	r6, [sp, #8]
   14788:	str	lr, [sp, #12]
   1478c:	ldr	r2, [r0, #32]
   14790:	ldrh	r3, [r2, #14]
   14794:	cmp	r3, #5
   14798:	bne	147f0 <flatcc_builder_offset_vector_push@@Base+0x70>
   1479c:	mov	r4, r0
   147a0:	mov	r6, r1
   147a4:	ldr	r3, [r2, #20]
   147a8:	cmn	r3, #-1073741823	; 0xc0000001
   147ac:	moveq	r0, #0
   147b0:	beq	147e0 <flatcc_builder_offset_vector_push@@Base+0x60>
   147b4:	add	r3, r3, #1
   147b8:	str	r3, [r2, #20]
   147bc:	ldr	r5, [r4, #20]
   147c0:	add	r3, r5, #4
   147c4:	str	r3, [r4, #20]
   147c8:	ldr	r2, [r4, #24]
   147cc:	cmp	r3, r2
   147d0:	bcs	1480c <flatcc_builder_offset_vector_push@@Base+0x8c>
   147d4:	ldr	r3, [r4, #16]
   147d8:	adds	r0, r3, r5
   147dc:	strne	r6, [r3, r5]
   147e0:	ldrd	r4, [sp]
   147e4:	ldr	r6, [sp, #8]
   147e8:	add	sp, sp, #12
   147ec:	pop	{pc}		; (ldr pc, [sp], #4)
   147f0:	ldr	r3, [pc, #52]	; 1482c <flatcc_builder_offset_vector_push@@Base+0xac>
   147f4:	movw	r2, #934	; 0x3a6
   147f8:	movw	r1, #39796	; 0x9b74
   147fc:	movt	r1, #1
   14800:	movw	r0, #40216	; 0x9d18
   14804:	movt	r0, #1
   14808:	bl	12324 <__assert_fail@plt>
   1480c:	mvn	r2, #3
   14810:	add	r1, r5, #5
   14814:	mov	r0, r4
   14818:	bl	12f60 <main@@Base+0x100>
   1481c:	cmp	r0, #0
   14820:	movne	r0, #0
   14824:	beq	147d4 <flatcc_builder_offset_vector_push@@Base+0x54>
   14828:	b	147e0 <flatcc_builder_offset_vector_push@@Base+0x60>
   1482c:	andeq	r9, r1, r4, lsr #15

00014830 <flatcc_builder_append_offset_vector@@Base>:
   14830:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14834:	strd	r6, [sp, #8]
   14838:	str	r8, [sp, #16]
   1483c:	str	lr, [sp, #20]
   14840:	mov	r6, r1
   14844:	ldr	r1, [r0, #32]
   14848:	ldrh	r3, [r1, #14]
   1484c:	cmp	r3, #5
   14850:	bne	148d0 <flatcc_builder_append_offset_vector@@Base+0xa0>
   14854:	mov	r5, r0
   14858:	ldr	r3, [r1, #20]
   1485c:	adds	r3, r2, r3
   14860:	movcs	ip, #1
   14864:	movcc	ip, #0
   14868:	cmn	r3, #-1073741823	; 0xc0000001
   1486c:	movls	r0, #0
   14870:	movhi	r0, #1
   14874:	orrs	r0, ip, r0
   14878:	bne	148ec <flatcc_builder_append_offset_vector@@Base+0xbc>
   1487c:	str	r3, [r1, #20]
   14880:	lsl	r4, r2, #2
   14884:	ldr	r7, [r5, #20]
   14888:	add	r1, r4, r7
   1488c:	str	r1, [r5, #20]
   14890:	ldr	r3, [r5, #24]
   14894:	cmp	r1, r3
   14898:	bcs	14908 <flatcc_builder_append_offset_vector@@Base+0xd8>
   1489c:	ldr	r5, [r5, #16]
   148a0:	adds	r5, r5, r7
   148a4:	beq	148b8 <flatcc_builder_append_offset_vector@@Base+0x88>
   148a8:	mov	r2, r4
   148ac:	mov	r1, r6
   148b0:	mov	r0, r5
   148b4:	bl	12294 <memcpy@plt>
   148b8:	mov	r0, r5
   148bc:	ldrd	r4, [sp]
   148c0:	ldrd	r6, [sp, #8]
   148c4:	ldr	r8, [sp, #16]
   148c8:	add	sp, sp, #20
   148cc:	pop	{pc}		; (ldr pc, [sp], #4)
   148d0:	ldr	r3, [pc, #80]	; 14928 <flatcc_builder_append_offset_vector@@Base+0xf8>
   148d4:	mov	r2, #948	; 0x3b4
   148d8:	movw	r1, #39796	; 0x9b74
   148dc:	movt	r1, #1
   148e0:	movw	r0, #40216	; 0x9d18
   148e4:	movt	r0, #1
   148e8:	bl	12324 <__assert_fail@plt>
   148ec:	ldr	r3, [pc, #56]	; 1492c <flatcc_builder_append_offset_vector@@Base+0xfc>
   148f0:	mov	r2, #892	; 0x37c
   148f4:	movw	r1, #39796	; 0x9b74
   148f8:	movt	r1, #1
   148fc:	movw	r0, #40080	; 0x9c90
   14900:	movt	r0, #1
   14904:	bl	12324 <__assert_fail@plt>
   14908:	mvn	r2, #3
   1490c:	add	r1, r1, #1
   14910:	mov	r0, r5
   14914:	bl	12f60 <main@@Base+0x100>
   14918:	cmp	r0, #0
   1491c:	movne	r5, #0
   14920:	beq	1489c <flatcc_builder_append_offset_vector@@Base+0x6c>
   14924:	b	148b8 <flatcc_builder_append_offset_vector@@Base+0x88>
   14928:	andeq	r9, r1, r8, asr #15
   1492c:	andeq	r9, r1, r4, asr r7

00014930 <flatcc_builder_extend_string@@Base>:
   14930:	strd	r4, [sp, #-16]!
   14934:	str	r6, [sp, #8]
   14938:	str	lr, [sp, #12]
   1493c:	ldr	r2, [r0, #32]
   14940:	ldrh	r3, [r2, #14]
   14944:	cmp	r3, #6
   14948:	bne	14990 <flatcc_builder_extend_string@@Base+0x60>
   1494c:	mov	r4, r0
   14950:	ldr	r3, [r2, #20]
   14954:	adds	r3, r1, r3
   14958:	bcs	149ac <flatcc_builder_extend_string@@Base+0x7c>
   1495c:	str	r3, [r2, #20]
   14960:	ldr	r5, [r0, #20]
   14964:	add	r1, r1, r5
   14968:	str	r1, [r0, #20]
   1496c:	ldr	r3, [r0, #24]
   14970:	cmp	r1, r3
   14974:	bcs	149c8 <flatcc_builder_extend_string@@Base+0x98>
   14978:	ldr	r0, [r4, #16]
   1497c:	add	r0, r0, r5
   14980:	ldrd	r4, [sp]
   14984:	ldr	r6, [sp, #8]
   14988:	add	sp, sp, #12
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	ldr	r3, [pc, #76]	; 149e4 <flatcc_builder_extend_string@@Base+0xb4>
   14994:	movw	r2, #957	; 0x3bd
   14998:	movw	r1, #39796	; 0x9b74
   1499c:	movt	r1, #1
   149a0:	movw	r0, #40268	; 0x9d4c
   149a4:	movt	r0, #1
   149a8:	bl	12324 <__assert_fail@plt>
   149ac:	ldr	r3, [pc, #52]	; 149e8 <flatcc_builder_extend_string@@Base+0xb8>
   149b0:	mov	r2, #892	; 0x37c
   149b4:	movw	r1, #39796	; 0x9b74
   149b8:	movt	r1, #1
   149bc:	movw	r0, #40080	; 0x9c90
   149c0:	movt	r0, #1
   149c4:	bl	12324 <__assert_fail@plt>
   149c8:	mvn	r2, #3
   149cc:	add	r1, r1, #1
   149d0:	bl	12f60 <main@@Base+0x100>
   149d4:	cmp	r0, #0
   149d8:	movne	r0, #0
   149dc:	beq	14978 <flatcc_builder_extend_string@@Base+0x48>
   149e0:	b	14980 <flatcc_builder_extend_string@@Base+0x50>
   149e4:	andeq	r9, r1, ip, ror #15
   149e8:	andeq	r9, r1, r4, asr r7

000149ec <flatcc_builder_append_string@@Base>:
   149ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   149f0:	strd	r6, [sp, #8]
   149f4:	str	r8, [sp, #16]
   149f8:	str	lr, [sp, #20]
   149fc:	mov	r5, r2
   14a00:	ldr	r2, [r0, #32]
   14a04:	ldrh	r3, [r2, #14]
   14a08:	cmp	r3, #6
   14a0c:	bne	14a74 <flatcc_builder_append_string@@Base+0x88>
   14a10:	mov	r4, r0
   14a14:	mov	r6, r1
   14a18:	ldr	r3, [r2, #20]
   14a1c:	adds	r3, r5, r3
   14a20:	bcs	14a90 <flatcc_builder_append_string@@Base+0xa4>
   14a24:	str	r3, [r2, #20]
   14a28:	ldr	r7, [r0, #20]
   14a2c:	add	r1, r5, r7
   14a30:	str	r1, [r0, #20]
   14a34:	ldr	r3, [r0, #24]
   14a38:	cmp	r1, r3
   14a3c:	bcs	14aac <flatcc_builder_append_string@@Base+0xc0>
   14a40:	ldr	r4, [r4, #16]
   14a44:	adds	r4, r4, r7
   14a48:	beq	14a5c <flatcc_builder_append_string@@Base+0x70>
   14a4c:	mov	r2, r5
   14a50:	mov	r1, r6
   14a54:	mov	r0, r4
   14a58:	bl	12294 <memcpy@plt>
   14a5c:	mov	r0, r4
   14a60:	ldrd	r4, [sp]
   14a64:	ldrd	r6, [sp, #8]
   14a68:	ldr	r8, [sp, #16]
   14a6c:	add	sp, sp, #20
   14a70:	pop	{pc}		; (ldr pc, [sp], #4)
   14a74:	ldr	r3, [pc, #76]	; 14ac8 <flatcc_builder_append_string@@Base+0xdc>
   14a78:	movw	r2, #966	; 0x3c6
   14a7c:	movw	r1, #39796	; 0x9b74
   14a80:	movt	r1, #1
   14a84:	movw	r0, #40268	; 0x9d4c
   14a88:	movt	r0, #1
   14a8c:	bl	12324 <__assert_fail@plt>
   14a90:	ldr	r3, [pc, #52]	; 14acc <flatcc_builder_append_string@@Base+0xe0>
   14a94:	mov	r2, #892	; 0x37c
   14a98:	movw	r1, #39796	; 0x9b74
   14a9c:	movt	r1, #1
   14aa0:	movw	r0, #40080	; 0x9c90
   14aa4:	movt	r0, #1
   14aa8:	bl	12324 <__assert_fail@plt>
   14aac:	mvn	r2, #3
   14ab0:	add	r1, r1, #1
   14ab4:	bl	12f60 <main@@Base+0x100>
   14ab8:	cmp	r0, #0
   14abc:	movne	r4, #0
   14ac0:	beq	14a40 <flatcc_builder_append_string@@Base+0x54>
   14ac4:	b	14a5c <flatcc_builder_append_string@@Base+0x70>
   14ac8:	andeq	r9, r1, ip, lsl #16
   14acc:	andeq	r9, r1, r4, asr r7

00014ad0 <flatcc_builder_append_string_str@@Base>:
   14ad0:	strd	r4, [sp, #-16]!
   14ad4:	str	r6, [sp, #8]
   14ad8:	str	lr, [sp, #12]
   14adc:	mov	r5, r0
   14ae0:	mov	r4, r1
   14ae4:	mov	r0, r1
   14ae8:	bl	122dc <strlen@plt>
   14aec:	mov	r2, r0
   14af0:	mov	r1, r4
   14af4:	mov	r0, r5
   14af8:	bl	149ec <flatcc_builder_append_string@@Base>
   14afc:	ldrd	r4, [sp]
   14b00:	ldr	r6, [sp, #8]
   14b04:	add	sp, sp, #12
   14b08:	pop	{pc}		; (ldr pc, [sp], #4)

00014b0c <flatcc_builder_append_string_strn@@Base>:
   14b0c:	strd	r4, [sp, #-16]!
   14b10:	str	r6, [sp, #8]
   14b14:	str	lr, [sp, #12]
   14b18:	mov	r6, r0
   14b1c:	mov	r4, r1
   14b20:	mov	r5, r2
   14b24:	mov	r1, #0
   14b28:	mov	r0, r4
   14b2c:	bl	1230c <memchr@plt>
   14b30:	cmp	r0, #0
   14b34:	subne	r5, r0, r4
   14b38:	mov	r2, r5
   14b3c:	mov	r1, r4
   14b40:	mov	r0, r6
   14b44:	bl	149ec <flatcc_builder_append_string@@Base>
   14b48:	ldrd	r4, [sp]
   14b4c:	ldr	r6, [sp, #8]
   14b50:	add	sp, sp, #12
   14b54:	pop	{pc}		; (ldr pc, [sp], #4)

00014b58 <flatcc_builder_truncate_vector@@Base>:
   14b58:	str	r4, [sp, #-8]!
   14b5c:	str	lr, [sp, #4]
   14b60:	ldr	ip, [r0, #32]
   14b64:	ldrh	r3, [ip, #14]
   14b68:	cmp	r3, #4
   14b6c:	bne	14bbc <flatcc_builder_truncate_vector@@Base+0x64>
   14b70:	ldr	r3, [ip, #20]
   14b74:	cmp	r3, r1
   14b78:	bcc	14bd8 <flatcc_builder_truncate_vector@@Base+0x80>
   14b7c:	sub	r3, r3, r1
   14b80:	str	r3, [ip, #20]
   14b84:	ldr	r3, [r0, #32]
   14b88:	ldr	r2, [r3, #16]
   14b8c:	mul	r2, r2, r1
   14b90:	ldr	r3, [r0, #20]
   14b94:	sub	r3, r3, r2
   14b98:	str	r3, [r0, #20]
   14b9c:	ldr	r0, [r0, #16]
   14ba0:	mov	r1, #0
   14ba4:	add	r0, r0, r3
   14ba8:	bl	122f4 <memset@plt>
   14bac:	mov	r0, #0
   14bb0:	ldr	r4, [sp]
   14bb4:	add	sp, sp, #4
   14bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bbc:	ldr	r3, [pc, #48]	; 14bf4 <flatcc_builder_truncate_vector@@Base+0x9c>
   14bc0:	movw	r2, #985	; 0x3d9
   14bc4:	movw	r1, #39796	; 0x9b74
   14bc8:	movt	r1, #1
   14bcc:	movw	r0, #40108	; 0x9cac
   14bd0:	movt	r0, #1
   14bd4:	bl	12324 <__assert_fail@plt>
   14bd8:	ldr	r3, [pc, #20]	; 14bf4 <flatcc_builder_truncate_vector@@Base+0x9c>
   14bdc:	movw	r2, #986	; 0x3da
   14be0:	movw	r1, #39796	; 0x9b74
   14be4:	movt	r1, #1
   14be8:	movw	r0, #40312	; 0x9d78
   14bec:	movt	r0, #1
   14bf0:	bl	12324 <__assert_fail@plt>
   14bf4:	andeq	r9, r1, ip, lsr #16

00014bf8 <flatcc_builder_truncate_offset_vector@@Base>:
   14bf8:	str	r4, [sp, #-8]!
   14bfc:	str	lr, [sp, #4]
   14c00:	ldr	ip, [r0, #32]
   14c04:	ldrh	r3, [ip, #14]
   14c08:	cmp	r3, #5
   14c0c:	bne	14c5c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14c10:	ldr	r3, [ip, #20]
   14c14:	cmp	r3, r1
   14c18:	bcc	14c78 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14c1c:	sub	r3, r3, r1
   14c20:	str	r3, [ip, #20]
   14c24:	ldr	r3, [r0, #32]
   14c28:	ldr	r2, [r3, #16]
   14c2c:	mul	r2, r2, r1
   14c30:	ldr	r3, [r0, #20]
   14c34:	sub	r3, r3, r2
   14c38:	str	r3, [r0, #20]
   14c3c:	ldr	r0, [r0, #16]
   14c40:	mov	r1, #0
   14c44:	add	r0, r0, r3
   14c48:	bl	122f4 <memset@plt>
   14c4c:	mov	r0, #0
   14c50:	ldr	r4, [sp]
   14c54:	add	sp, sp, #4
   14c58:	pop	{pc}		; (ldr pc, [sp], #4)
   14c5c:	ldr	r3, [pc, #48]	; 14c94 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14c60:	movw	r2, #994	; 0x3e2
   14c64:	movw	r1, #39796	; 0x9b74
   14c68:	movt	r1, #1
   14c6c:	movw	r0, #40216	; 0x9d18
   14c70:	movt	r0, #1
   14c74:	bl	12324 <__assert_fail@plt>
   14c78:	ldr	r3, [pc, #20]	; 14c94 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14c7c:	movw	r2, #995	; 0x3e3
   14c80:	movw	r1, #39796	; 0x9b74
   14c84:	movt	r1, #1
   14c88:	movw	r0, #40348	; 0x9d9c
   14c8c:	movt	r0, #1
   14c90:	bl	12324 <__assert_fail@plt>
   14c94:	andeq	r9, r1, ip, asr #16

00014c98 <flatcc_builder_truncate_string@@Base>:
   14c98:	str	r4, [sp, #-8]!
   14c9c:	str	lr, [sp, #4]
   14ca0:	ldr	r2, [r0, #32]
   14ca4:	ldrh	r3, [r2, #14]
   14ca8:	cmp	r3, #6
   14cac:	bne	14cf4 <flatcc_builder_truncate_string@@Base+0x5c>
   14cb0:	ldr	r3, [r2, #20]
   14cb4:	cmp	r3, r1
   14cb8:	bcc	14d10 <flatcc_builder_truncate_string@@Base+0x78>
   14cbc:	sub	r3, r3, r1
   14cc0:	str	r3, [r2, #20]
   14cc4:	ldr	r3, [r0, #20]
   14cc8:	sub	r3, r3, r1
   14ccc:	str	r3, [r0, #20]
   14cd0:	ldr	r0, [r0, #16]
   14cd4:	mov	r2, r1
   14cd8:	mov	r1, #0
   14cdc:	add	r0, r0, r3
   14ce0:	bl	122f4 <memset@plt>
   14ce4:	mov	r0, #0
   14ce8:	ldr	r4, [sp]
   14cec:	add	sp, sp, #4
   14cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf4:	ldr	r3, [pc, #48]	; 14d2c <flatcc_builder_truncate_string@@Base+0x94>
   14cf8:	movw	r2, #1003	; 0x3eb
   14cfc:	movw	r1, #39796	; 0x9b74
   14d00:	movt	r1, #1
   14d04:	movw	r0, #40268	; 0x9d4c
   14d08:	movt	r0, #1
   14d0c:	bl	12324 <__assert_fail@plt>
   14d10:	ldr	r3, [pc, #20]	; 14d2c <flatcc_builder_truncate_string@@Base+0x94>
   14d14:	mov	r2, #1004	; 0x3ec
   14d18:	movw	r1, #39796	; 0x9b74
   14d1c:	movt	r1, #1
   14d20:	movw	r0, #40408	; 0x9dd8
   14d24:	movt	r0, #1
   14d28:	bl	12324 <__assert_fail@plt>
   14d2c:	andeq	r9, r1, r4, ror r8

00014d30 <flatcc_builder_start_vector@@Base>:
   14d30:	strd	r4, [sp, #-16]!
   14d34:	str	r6, [sp, #8]
   14d38:	str	lr, [sp, #12]
   14d3c:	mov	r4, r0
   14d40:	mov	r6, r1
   14d44:	mov	r5, r3
   14d48:	cmp	r2, #4
   14d4c:	movcs	r1, r2
   14d50:	movcc	r1, #4
   14d54:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   14d58:	cmp	r0, #0
   14d5c:	bne	14dc8 <flatcc_builder_start_vector@@Base+0x98>
   14d60:	ldr	r3, [r4, #32]
   14d64:	str	r6, [r3, #16]
   14d68:	ldr	r3, [r4, #32]
   14d6c:	mov	r2, #0
   14d70:	str	r2, [r3, #20]
   14d74:	ldr	r3, [r4, #32]
   14d78:	str	r5, [r3, #24]
   14d7c:	ldr	r3, [r4, #32]
   14d80:	mov	r2, #4
   14d84:	strh	r2, [r3, #14]
   14d88:	ldr	r1, [r4, #28]
   14d8c:	ldr	r2, [r4, #60]	; 0x3c
   14d90:	add	r2, r2, r1
   14d94:	str	r2, [r4, #16]
   14d98:	ldr	r3, [r4, #64]	; 0x40
   14d9c:	sub	r3, r3, r1
   14da0:	cmn	r3, #4
   14da4:	mvnhi	r3, #3
   14da8:	str	r3, [r4, #24]
   14dac:	ldr	r3, [r4, #32]
   14db0:	mvn	r2, #3
   14db4:	str	r2, [r3, #4]
   14db8:	ldrd	r4, [sp]
   14dbc:	ldr	r6, [sp, #8]
   14dc0:	add	sp, sp, #12
   14dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc8:	mvn	r0, #0
   14dcc:	b	14db8 <flatcc_builder_start_vector@@Base+0x88>

00014dd0 <flatcc_builder_start_offset_vector@@Base>:
   14dd0:	str	r4, [sp, #-8]!
   14dd4:	str	lr, [sp, #4]
   14dd8:	mov	r4, r0
   14ddc:	mov	r1, #4
   14de0:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   14de4:	cmp	r0, #0
   14de8:	bne	14e4c <flatcc_builder_start_offset_vector@@Base+0x7c>
   14dec:	ldr	r3, [r4, #32]
   14df0:	mov	r2, #4
   14df4:	str	r2, [r3, #16]
   14df8:	ldr	r3, [r4, #32]
   14dfc:	mov	r2, #0
   14e00:	str	r2, [r3, #20]
   14e04:	ldr	r3, [r4, #32]
   14e08:	mov	r2, #5
   14e0c:	strh	r2, [r3, #14]
   14e10:	ldr	r1, [r4, #28]
   14e14:	ldr	r2, [r4, #60]	; 0x3c
   14e18:	add	r2, r2, r1
   14e1c:	str	r2, [r4, #16]
   14e20:	ldr	r3, [r4, #64]	; 0x40
   14e24:	sub	r3, r3, r1
   14e28:	cmn	r3, #4
   14e2c:	mvnhi	r3, #3
   14e30:	str	r3, [r4, #24]
   14e34:	ldr	r3, [r4, #32]
   14e38:	mvn	r2, #3
   14e3c:	str	r2, [r3, #4]
   14e40:	ldr	r4, [sp]
   14e44:	add	sp, sp, #4
   14e48:	pop	{pc}		; (ldr pc, [sp], #4)
   14e4c:	mvn	r0, #0
   14e50:	b	14e40 <flatcc_builder_start_offset_vector@@Base+0x70>

00014e54 <flatcc_builder_start_string@@Base>:
   14e54:	str	r4, [sp, #-8]!
   14e58:	str	lr, [sp, #4]
   14e5c:	mov	r4, r0
   14e60:	mov	r1, #1
   14e64:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   14e68:	cmp	r0, #0
   14e6c:	bne	14ed0 <flatcc_builder_start_string@@Base+0x7c>
   14e70:	ldr	r3, [r4, #32]
   14e74:	mov	r2, #1
   14e78:	str	r2, [r3, #16]
   14e7c:	ldr	r3, [r4, #32]
   14e80:	mov	r2, #0
   14e84:	str	r2, [r3, #20]
   14e88:	ldr	r3, [r4, #32]
   14e8c:	mov	r2, #6
   14e90:	strh	r2, [r3, #14]
   14e94:	ldr	r1, [r4, #28]
   14e98:	ldr	r2, [r4, #60]	; 0x3c
   14e9c:	add	r2, r2, r1
   14ea0:	str	r2, [r4, #16]
   14ea4:	ldr	r3, [r4, #64]	; 0x40
   14ea8:	sub	r3, r3, r1
   14eac:	cmn	r3, #4
   14eb0:	mvnhi	r3, #3
   14eb4:	str	r3, [r4, #24]
   14eb8:	ldr	r3, [r4, #32]
   14ebc:	mvn	r2, #3
   14ec0:	str	r2, [r3, #4]
   14ec4:	ldr	r4, [sp]
   14ec8:	add	sp, sp, #4
   14ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed0:	mvn	r0, #0
   14ed4:	b	14ec4 <flatcc_builder_start_string@@Base+0x70>

00014ed8 <flatcc_builder_reserve_table@@Base>:
   14ed8:	strd	r4, [sp, #-20]!	; 0xffffffec
   14edc:	strd	r6, [sp, #8]
   14ee0:	str	lr, [sp, #16]
   14ee4:	sub	sp, sp, #12
   14ee8:	cmp	r1, #0
   14eec:	blt	14fcc <flatcc_builder_reserve_table@@Base+0xf4>
   14ef0:	mov	r4, r0
   14ef4:	ldr	r2, [r0, #32]
   14ef8:	ldrh	r6, [r2, #28]
   14efc:	ldr	r3, [r2, #16]
   14f00:	add	r6, r3, r6, lsl #1
   14f04:	add	r1, r1, #2
   14f08:	lsl	r5, r1, #1
   14f0c:	add	r2, r6, r5
   14f10:	ldr	r3, [r0, #56]	; 0x38
   14f14:	cmp	r2, r3
   14f18:	bls	14f40 <flatcc_builder_reserve_table@@Base+0x68>
   14f1c:	mov	r3, #0
   14f20:	str	r3, [sp]
   14f24:	ldr	r7, [r0, #48]	; 0x30
   14f28:	mov	r3, #1
   14f2c:	add	r1, r0, #52	; 0x34
   14f30:	ldr	r0, [r0, #40]	; 0x28
   14f34:	blx	r7
   14f38:	cmp	r0, #0
   14f3c:	bne	14fe8 <flatcc_builder_reserve_table@@Base+0x110>
   14f40:	ldr	r3, [r4, #52]	; 0x34
   14f44:	adds	r3, r3, r6
   14f48:	moveq	r3, #0
   14f4c:	streq	r3, [r4, #4]
   14f50:	mvneq	r0, #0
   14f54:	beq	14fb8 <flatcc_builder_reserve_table@@Base+0xe0>
   14f58:	add	r3, r3, #4
   14f5c:	str	r3, [r4, #4]
   14f60:	ldr	r3, [r4, #32]
   14f64:	ldr	r6, [r3, #20]
   14f68:	add	r2, r5, r6
   14f6c:	sub	r2, r2, #3
   14f70:	ldr	r3, [r4, #80]	; 0x50
   14f74:	cmp	r2, r3
   14f78:	bls	14fa0 <flatcc_builder_reserve_table@@Base+0xc8>
   14f7c:	mov	r3, #3
   14f80:	str	r3, [sp]
   14f84:	ldr	r5, [r4, #48]	; 0x30
   14f88:	mov	r3, #0
   14f8c:	add	r1, r4, #76	; 0x4c
   14f90:	ldr	r0, [r4, #40]	; 0x28
   14f94:	blx	r5
   14f98:	cmp	r0, #0
   14f9c:	bne	15004 <flatcc_builder_reserve_table@@Base+0x12c>
   14fa0:	ldr	r0, [r4, #76]	; 0x4c
   14fa4:	add	r0, r0, r6
   14fa8:	str	r0, [r4]
   14fac:	clz	r0, r0
   14fb0:	lsr	r0, r0, #5
   14fb4:	rsb	r0, r0, #0
   14fb8:	add	sp, sp, #12
   14fbc:	ldrd	r4, [sp]
   14fc0:	ldrd	r6, [sp, #8]
   14fc4:	add	sp, sp, #16
   14fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fcc:	ldr	r3, [pc, #76]	; 15020 <flatcc_builder_reserve_table@@Base+0x148>
   14fd0:	movw	r2, #1065	; 0x429
   14fd4:	movw	r1, #39796	; 0x9b74
   14fd8:	movt	r1, #1
   14fdc:	movw	r0, #40444	; 0x9dfc
   14fe0:	movt	r0, #1
   14fe4:	bl	12324 <__assert_fail@plt>
   14fe8:	ldr	r3, [pc, #52]	; 15024 <flatcc_builder_reserve_table@@Base+0x14c>
   14fec:	mov	r2, #308	; 0x134
   14ff0:	movw	r1, #39796	; 0x9b74
   14ff4:	movt	r1, #1
   14ff8:	movw	r0, #39880	; 0x9bc8
   14ffc:	movt	r0, #1
   15000:	bl	12324 <__assert_fail@plt>
   15004:	ldr	r3, [pc, #24]	; 15024 <flatcc_builder_reserve_table@@Base+0x14c>
   15008:	mov	r2, #308	; 0x134
   1500c:	movw	r1, #39796	; 0x9b74
   15010:	movt	r1, #1
   15014:	movw	r0, #39880	; 0x9bc8
   15018:	movt	r0, #1
   1501c:	bl	12324 <__assert_fail@plt>
   15020:	muleq	r1, r4, r8
   15024:	andeq	r9, r1, r0, asr #12

00015028 <flatcc_builder_start_table@@Base>:
   15028:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1502c:	strd	r6, [sp, #8]
   15030:	str	r8, [sp, #16]
   15034:	str	lr, [sp, #20]
   15038:	sub	sp, sp, #8
   1503c:	mov	r4, r0
   15040:	mov	r5, r1
   15044:	mov	r1, #4
   15048:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   1504c:	subs	r6, r0, #0
   15050:	bne	151fc <flatcc_builder_start_table@@Base+0x1d4>
   15054:	ldr	r2, [r4, #32]
   15058:	ldr	r3, [r4, #4]
   1505c:	ldr	r1, [r4, #52]	; 0x34
   15060:	sub	r3, r3, r1
   15064:	str	r3, [r2, #16]
   15068:	ldr	r2, [r4, #32]
   1506c:	ldr	r3, [r4]
   15070:	ldr	r1, [r4, #76]	; 0x4c
   15074:	sub	r3, r3, r1
   15078:	str	r3, [r2, #20]
   1507c:	ldr	r3, [r4, #32]
   15080:	ldr	r2, [r4, #12]
   15084:	str	r2, [r3, #24]
   15088:	ldr	r3, [r4, #32]
   1508c:	ldrh	r2, [r4, #8]
   15090:	strh	r2, [r3, #28]
   15094:	movw	r3, #15186	; 0x3b52
   15098:	movt	r3, #12137	; 0x2f69
   1509c:	str	r3, [r4, #12]
   150a0:	mov	r3, #0
   150a4:	strh	r3, [r4, #8]
   150a8:	ldr	r3, [r4, #32]
   150ac:	mov	r2, #3
   150b0:	strh	r2, [r3, #14]
   150b4:	ldr	r2, [r4, #32]
   150b8:	ldrh	r7, [r2, #28]
   150bc:	ldr	r3, [r2, #16]
   150c0:	add	r7, r3, r7, lsl #1
   150c4:	add	r5, r5, #2
   150c8:	lsl	r5, r5, #1
   150cc:	add	r2, r7, r5
   150d0:	ldr	r3, [r4, #56]	; 0x38
   150d4:	cmp	r2, r3
   150d8:	bls	15100 <flatcc_builder_start_table@@Base+0xd8>
   150dc:	mov	r3, #0
   150e0:	str	r3, [sp]
   150e4:	ldr	r8, [r4, #48]	; 0x30
   150e8:	mov	r3, #1
   150ec:	add	r1, r4, #52	; 0x34
   150f0:	ldr	r0, [r4, #40]	; 0x28
   150f4:	blx	r8
   150f8:	cmp	r0, #0
   150fc:	bne	151c4 <flatcc_builder_start_table@@Base+0x19c>
   15100:	ldr	r3, [r4, #52]	; 0x34
   15104:	adds	r3, r3, r7
   15108:	moveq	r3, #0
   1510c:	streq	r3, [r4, #4]
   15110:	mvneq	r6, #0
   15114:	beq	151a8 <flatcc_builder_start_table@@Base+0x180>
   15118:	add	r3, r3, #4
   1511c:	str	r3, [r4, #4]
   15120:	ldr	r3, [r4, #32]
   15124:	ldr	r7, [r3, #20]
   15128:	sub	r2, r5, #3
   1512c:	add	r2, r2, r7
   15130:	ldr	r3, [r4, #80]	; 0x50
   15134:	cmp	r2, r3
   15138:	bls	15160 <flatcc_builder_start_table@@Base+0x138>
   1513c:	mov	r3, #3
   15140:	str	r3, [sp]
   15144:	ldr	r5, [r4, #48]	; 0x30
   15148:	mov	r3, #0
   1514c:	add	r1, r4, #76	; 0x4c
   15150:	ldr	r0, [r4, #40]	; 0x28
   15154:	blx	r5
   15158:	cmp	r0, #0
   1515c:	bne	151e0 <flatcc_builder_start_table@@Base+0x1b8>
   15160:	ldr	r3, [r4, #76]	; 0x4c
   15164:	add	r3, r3, r7
   15168:	str	r3, [r4]
   1516c:	cmp	r3, #0
   15170:	beq	15204 <flatcc_builder_start_table@@Base+0x1dc>
   15174:	ldr	r1, [r4, #28]
   15178:	ldr	r2, [r4, #60]	; 0x3c
   1517c:	add	r2, r2, r1
   15180:	str	r2, [r4, #16]
   15184:	ldr	r3, [r4, #64]	; 0x40
   15188:	sub	r3, r3, r1
   1518c:	movw	r2, #65532	; 0xfffc
   15190:	cmp	r3, r2
   15194:	movwhi	r3, #65532	; 0xfffc
   15198:	str	r3, [r4, #24]
   1519c:	ldr	r3, [r4, #32]
   151a0:	movw	r2, #65532	; 0xfffc
   151a4:	str	r2, [r3, #4]
   151a8:	mov	r0, r6
   151ac:	add	sp, sp, #8
   151b0:	ldrd	r4, [sp]
   151b4:	ldrd	r6, [sp, #8]
   151b8:	ldr	r8, [sp, #16]
   151bc:	add	sp, sp, #20
   151c0:	pop	{pc}		; (ldr pc, [sp], #4)
   151c4:	ldr	r3, [pc, #64]	; 1520c <flatcc_builder_start_table@@Base+0x1e4>
   151c8:	mov	r2, #308	; 0x134
   151cc:	movw	r1, #39796	; 0x9b74
   151d0:	movt	r1, #1
   151d4:	movw	r0, #39880	; 0x9bc8
   151d8:	movt	r0, #1
   151dc:	bl	12324 <__assert_fail@plt>
   151e0:	ldr	r3, [pc, #36]	; 1520c <flatcc_builder_start_table@@Base+0x1e4>
   151e4:	mov	r2, #308	; 0x134
   151e8:	movw	r1, #39796	; 0x9b74
   151ec:	movt	r1, #1
   151f0:	movw	r0, #39880	; 0x9bc8
   151f4:	movt	r0, #1
   151f8:	bl	12324 <__assert_fail@plt>
   151fc:	mvn	r6, #0
   15200:	b	151a8 <flatcc_builder_start_table@@Base+0x180>
   15204:	mvn	r6, #0
   15208:	b	151a8 <flatcc_builder_start_table@@Base+0x180>
   1520c:	andeq	r9, r1, r0, asr #12

00015210 <flatcc_builder_create_vtable@@Base>:
   15210:	strd	r4, [sp, #-16]!
   15214:	str	r6, [sp, #8]
   15218:	str	lr, [sp, #12]
   1521c:	sub	sp, sp, #80	; 0x50
   15220:	mov	r5, r0
   15224:	mov	r3, #0
   15228:	str	r3, [sp, #8]
   1522c:	str	r3, [sp, #12]
   15230:	cmp	r2, #0
   15234:	beq	152d0 <flatcc_builder_create_vtable@@Base+0xc0>
   15238:	str	r2, [sp, #8]
   1523c:	str	r1, [sp, #16]
   15240:	str	r2, [sp, #20]
   15244:	mov	r3, #1
   15248:	str	r3, [sp, #12]
   1524c:	ldr	r3, [r0, #152]	; 0x98
   15250:	cmp	r3, #0
   15254:	bne	152e8 <flatcc_builder_create_vtable@@Base+0xd8>
   15258:	ldr	r3, [r0, #180]	; 0xb4
   1525c:	cmp	r3, #0
   15260:	bne	152e8 <flatcc_builder_create_vtable@@Base+0xd8>
   15264:	ldr	r4, [r0, #140]	; 0x8c
   15268:	mov	r3, r2
   1526c:	add	r2, r2, r4
   15270:	str	r2, [r0, #140]	; 0x8c
   15274:	cmp	r4, r2
   15278:	ble	15354 <flatcc_builder_create_vtable@@Base+0x144>
   1527c:	ldr	r3, [pc, #276]	; 15398 <flatcc_builder_create_vtable@@Base+0x188>
   15280:	movw	r2, #673	; 0x2a1
   15284:	movw	r1, #39796	; 0x9b74
   15288:	movt	r1, #1
   1528c:	movw	r0, #39880	; 0x9bc8
   15290:	movt	r0, #1
   15294:	bl	12324 <__assert_fail@plt>
   15298:	ldr	r3, [pc, #252]	; 1539c <flatcc_builder_create_vtable@@Base+0x18c>
   1529c:	movw	r2, #647	; 0x287
   152a0:	movw	r1, #39796	; 0x9b74
   152a4:	movt	r1, #1
   152a8:	movw	r0, #39880	; 0x9bc8
   152ac:	movt	r0, #1
   152b0:	bl	12324 <__assert_fail@plt>
   152b4:	ldr	r3, [pc, #224]	; 1539c <flatcc_builder_create_vtable@@Base+0x18c>
   152b8:	movw	r2, #651	; 0x28b
   152bc:	movw	r1, #39796	; 0x9b74
   152c0:	movt	r1, #1
   152c4:	movw	r0, #39880	; 0x9bc8
   152c8:	movt	r0, #1
   152cc:	bl	12324 <__assert_fail@plt>
   152d0:	ldr	r3, [r0, #152]	; 0x98
   152d4:	cmp	r3, #0
   152d8:	bne	15298 <flatcc_builder_create_vtable@@Base+0x88>
   152dc:	ldr	r3, [r0, #180]	; 0xb4
   152e0:	cmp	r3, #0
   152e4:	beq	15344 <flatcc_builder_create_vtable@@Base+0x134>
   152e8:	ldr	r2, [r5, #136]	; 0x88
   152ec:	ldr	r3, [sp, #8]
   152f0:	sub	r4, r2, r3
   152f4:	cmp	r2, r4
   152f8:	ble	15298 <flatcc_builder_create_vtable@@Base+0x88>
   152fc:	str	r3, [sp]
   15300:	ldr	r6, [r5, #44]	; 0x2c
   15304:	mov	r3, r4
   15308:	ldr	r2, [sp, #12]
   1530c:	add	r1, sp, #16
   15310:	ldr	r0, [r5, #36]	; 0x24
   15314:	blx	r6
   15318:	cmp	r0, #0
   1531c:	bne	152b4 <flatcc_builder_create_vtable@@Base+0xa4>
   15320:	str	r4, [r5, #136]	; 0x88
   15324:	cmp	r4, #0
   15328:	addne	r4, r4, #1
   1532c:	mov	r0, r4
   15330:	add	sp, sp, #80	; 0x50
   15334:	ldrd	r4, [sp]
   15338:	ldr	r6, [sp, #8]
   1533c:	add	sp, sp, #12
   15340:	pop	{pc}		; (ldr pc, [sp], #4)
   15344:	ldr	r4, [r5, #140]	; 0x8c
   15348:	ldr	r3, [sp, #8]
   1534c:	add	r2, r3, r4
   15350:	str	r2, [r5, #140]	; 0x8c
   15354:	str	r3, [sp]
   15358:	ldr	r6, [r5, #44]	; 0x2c
   1535c:	mov	r3, r4
   15360:	ldr	r2, [sp, #12]
   15364:	add	r1, sp, #16
   15368:	ldr	r0, [r5, #36]	; 0x24
   1536c:	blx	r6
   15370:	cmp	r0, #0
   15374:	addeq	r4, r4, #1
   15378:	beq	1532c <flatcc_builder_create_vtable@@Base+0x11c>
   1537c:	ldr	r3, [pc, #20]	; 15398 <flatcc_builder_create_vtable@@Base+0x188>
   15380:	movw	r2, #677	; 0x2a5
   15384:	movw	r1, #39796	; 0x9b74
   15388:	movt	r1, #1
   1538c:	movw	r0, #39880	; 0x9bc8
   15390:	movt	r0, #1
   15394:	bl	12324 <__assert_fail@plt>
   15398:	andeq	r9, r1, r4, lsr #12
   1539c:	andeq	r9, r1, r0, ror r6

000153a0 <flatcc_builder_create_cached_vtable@@Base>:
   153a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153a4:	strd	r6, [sp, #8]
   153a8:	strd	r8, [sp, #16]
   153ac:	strd	sl, [sp, #24]
   153b0:	str	lr, [sp, #32]
   153b4:	sub	sp, sp, #36	; 0x24
   153b8:	mov	r5, r0
   153bc:	str	r1, [sp, #12]
   153c0:	str	r2, [sp, #16]
   153c4:	mov	r6, r3
   153c8:	ldr	r3, [r0, #116]	; 0x74
   153cc:	cmp	r3, #0
   153d0:	beq	15418 <flatcc_builder_create_cached_vtable@@Base+0x78>
   153d4:	ldr	r8, [r5, #116]	; 0x74
   153d8:	rsb	r3, r8, #32
   153dc:	lsr	r8, r6, r3
   153e0:	ldr	sl, [r5, #92]	; 0x5c
   153e4:	adds	r9, sl, r8, lsl #2
   153e8:	str	r9, [sp, #20]
   153ec:	beq	15728 <flatcc_builder_create_cached_vtable@@Base+0x388>
   153f0:	ldr	r6, [sl, r8, lsl #2]
   153f4:	cmp	r6, #0
   153f8:	beq	15650 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   153fc:	ldr	fp, [r5, #100]	; 0x64
   15400:	ldr	r7, [r5, #68]	; 0x44
   15404:	mov	r3, #0
   15408:	str	r3, [sp, #28]
   1540c:	str	r8, [sp, #24]
   15410:	ldr	r8, [sp, #16]
   15414:	b	15520 <flatcc_builder_create_cached_vtable@@Base+0x180>
   15418:	add	r8, r0, #92	; 0x5c
   1541c:	ldr	r4, [r0, #124]	; 0x7c
   15420:	cmp	r4, #0
   15424:	bne	154a4 <flatcc_builder_create_cached_vtable@@Base+0x104>
   15428:	ldr	r3, [r0, #104]	; 0x68
   1542c:	cmp	r3, #15
   15430:	bhi	1545c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   15434:	mov	r3, #6
   15438:	str	r3, [sp]
   1543c:	ldr	r7, [r0, #48]	; 0x30
   15440:	mov	r3, #0
   15444:	mov	r2, #16
   15448:	add	r1, r0, #100	; 0x64
   1544c:	ldr	r0, [r0, #40]	; 0x28
   15450:	blx	r7
   15454:	cmp	r0, #0
   15458:	bne	154c0 <flatcc_builder_create_cached_vtable@@Base+0x120>
   1545c:	ldr	r3, [r5, #100]	; 0x64
   15460:	cmp	r3, #0
   15464:	beq	15740 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   15468:	mov	r3, #16
   1546c:	str	r3, [r5, #124]	; 0x7c
   15470:	mov	r3, #5
   15474:	str	r3, [sp]
   15478:	ldr	r7, [r5, #48]	; 0x30
   1547c:	mov	r3, #1
   15480:	mov	r2, #256	; 0x100
   15484:	mov	r1, r8
   15488:	ldr	r0, [r5, #40]	; 0x28
   1548c:	blx	r7
   15490:	cmp	r0, #0
   15494:	bne	15740 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   15498:	ldr	r1, [r5, #96]	; 0x60
   1549c:	mov	r2, #256	; 0x100
   154a0:	b	154e0 <flatcc_builder_create_cached_vtable@@Base+0x140>
   154a4:	ldr	r3, [pc, #668]	; 15748 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   154a8:	movw	r2, #342	; 0x156
   154ac:	movw	r1, #39796	; 0x9b74
   154b0:	movt	r1, #1
   154b4:	movw	r0, #40456	; 0x9e08
   154b8:	movt	r0, #1
   154bc:	bl	12324 <__assert_fail@plt>
   154c0:	ldr	r3, [pc, #644]	; 1574c <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   154c4:	mov	r2, #308	; 0x134
   154c8:	movw	r1, #39796	; 0x9b74
   154cc:	movt	r1, #1
   154d0:	movw	r0, #39880	; 0x9bc8
   154d4:	movt	r0, #1
   154d8:	bl	12324 <__assert_fail@plt>
   154dc:	mov	r2, r3
   154e0:	lsl	r3, r2, #1
   154e4:	cmp	r3, r1
   154e8:	bls	154dc <flatcc_builder_create_cached_vtable@@Base+0x13c>
   154ec:	lsr	r3, r2, #2
   154f0:	cmp	r2, #7
   154f4:	bls	15508 <flatcc_builder_create_cached_vtable@@Base+0x168>
   154f8:	mov	r2, #1
   154fc:	add	r4, r4, #1
   15500:	cmp	r3, r2, lsl r4
   15504:	bhi	154fc <flatcc_builder_create_cached_vtable@@Base+0x15c>
   15508:	str	r4, [r5, #116]	; 0x74
   1550c:	b	153d4 <flatcc_builder_create_cached_vtable@@Base+0x34>
   15510:	add	r9, r4, #12
   15514:	ldr	r6, [r4, #12]
   15518:	cmp	r6, #0
   1551c:	beq	155b0 <flatcc_builder_create_cached_vtable@@Base+0x210>
   15520:	add	r4, fp, r6
   15524:	ldr	r3, [r4, #8]
   15528:	add	r1, r7, r3
   1552c:	ldrh	r3, [r7, r3]
   15530:	cmp	r3, r8
   15534:	bne	15510 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15538:	mov	r2, r8
   1553c:	ldr	r0, [sp, #12]
   15540:	bl	122a0 <memcmp@plt>
   15544:	cmp	r0, #0
   15548:	bne	15510 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1554c:	ldr	r2, [r4, #4]
   15550:	ldr	r3, [r5, #152]	; 0x98
   15554:	cmp	r2, r3
   15558:	bne	155a0 <flatcc_builder_create_cached_vtable@@Base+0x200>
   1555c:	ldr	r8, [sp, #24]
   15560:	ldr	r3, [sp, #20]
   15564:	cmp	r3, r9
   15568:	beq	15580 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1556c:	ldr	r3, [r4, #12]
   15570:	str	r3, [r9]
   15574:	ldr	r3, [sl, r8, lsl #2]
   15578:	str	r3, [r4, #12]
   1557c:	str	r6, [sl, r8, lsl #2]
   15580:	ldr	r0, [r4]
   15584:	add	sp, sp, #36	; 0x24
   15588:	ldrd	r4, [sp]
   1558c:	ldrd	r6, [sp, #8]
   15590:	ldrd	r8, [sp, #16]
   15594:	ldrd	sl, [sp, #24]
   15598:	add	sp, sp, #32
   1559c:	pop	{pc}		; (ldr pc, [sp], #4)
   155a0:	add	r9, r4, #12
   155a4:	ldr	r6, [r4, #12]
   155a8:	str	r4, [sp, #28]
   155ac:	b	15518 <flatcc_builder_create_cached_vtable@@Base+0x178>
   155b0:	ldr	r8, [sp, #24]
   155b4:	ldr	r4, [r5, #124]	; 0x7c
   155b8:	add	r2, r4, #16
   155bc:	ldr	r3, [r5, #104]	; 0x68
   155c0:	cmp	r2, r3
   155c4:	bls	155ec <flatcc_builder_create_cached_vtable@@Base+0x24c>
   155c8:	mov	r3, #6
   155cc:	str	r3, [sp]
   155d0:	ldr	r6, [r5, #48]	; 0x30
   155d4:	mov	r3, #0
   155d8:	add	r1, r5, #100	; 0x64
   155dc:	ldr	r0, [r5, #40]	; 0x28
   155e0:	blx	r6
   155e4:	cmp	r0, #0
   155e8:	bne	1565c <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   155ec:	ldr	r6, [r5, #100]	; 0x64
   155f0:	adds	r7, r6, r4
   155f4:	beq	15730 <flatcc_builder_create_cached_vtable@@Base+0x390>
   155f8:	ldr	r3, [r5, #124]	; 0x7c
   155fc:	add	r2, r3, #16
   15600:	str	r2, [r5, #124]	; 0x7c
   15604:	ldr	r2, [r5, #152]	; 0x98
   15608:	str	r2, [r7, #4]
   1560c:	ldr	r2, [sl, r8, lsl #2]
   15610:	str	r2, [r7, #12]
   15614:	str	r3, [sl, r8, lsl #2]
   15618:	ldr	r2, [sp, #16]
   1561c:	ldr	r1, [sp, #12]
   15620:	mov	r0, r5
   15624:	bl	15210 <flatcc_builder_create_vtable@@Base>
   15628:	str	r0, [r6, r4]
   1562c:	cmp	r0, #0
   15630:	beq	15584 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15634:	ldr	r3, [sp, #28]
   15638:	cmp	r3, #0
   1563c:	beq	15678 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   15640:	ldr	r3, [r3, #8]
   15644:	str	r3, [r7, #8]
   15648:	ldr	r0, [r6, r4]
   1564c:	b	15584 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15650:	mov	r3, #0
   15654:	str	r3, [sp, #28]
   15658:	b	155b4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1565c:	ldr	r3, [pc, #232]	; 1574c <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   15660:	mov	r2, #308	; 0x134
   15664:	movw	r1, #39796	; 0x9b74
   15668:	movt	r1, #1
   1566c:	movw	r0, #39880	; 0x9bc8
   15670:	movt	r0, #1
   15674:	bl	12324 <__assert_fail@plt>
   15678:	ldr	r2, [r5, #172]	; 0xac
   1567c:	cmp	r2, #0
   15680:	beq	15698 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15684:	ldr	r3, [r5, #120]	; 0x78
   15688:	ldr	r1, [sp, #16]
   1568c:	add	r3, r1, r3
   15690:	cmp	r2, r3
   15694:	bcc	15700 <flatcc_builder_create_cached_vtable@@Base+0x360>
   15698:	ldr	r8, [r5, #120]	; 0x78
   1569c:	ldr	r3, [sp, #16]
   156a0:	add	r2, r8, r3
   156a4:	ldr	r3, [r5, #72]	; 0x48
   156a8:	cmp	r2, r3
   156ac:	bls	156d4 <flatcc_builder_create_cached_vtable@@Base+0x334>
   156b0:	mov	r3, #2
   156b4:	str	r3, [sp]
   156b8:	ldr	sl, [r5, #48]	; 0x30
   156bc:	mov	r3, #0
   156c0:	add	r1, r5, #68	; 0x44
   156c4:	ldr	r0, [r5, #40]	; 0x28
   156c8:	blx	sl
   156cc:	cmp	r0, #0
   156d0:	bne	1570c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   156d4:	ldr	r3, [r5, #68]	; 0x44
   156d8:	adds	r0, r3, r8
   156dc:	beq	15738 <flatcc_builder_create_cached_vtable@@Base+0x398>
   156e0:	ldr	r3, [r5, #120]	; 0x78
   156e4:	str	r3, [r7, #8]
   156e8:	ldr	r2, [sp, #16]
   156ec:	add	r3, r2, r3
   156f0:	str	r3, [r5, #120]	; 0x78
   156f4:	ldr	r1, [sp, #12]
   156f8:	bl	12294 <memcpy@plt>
   156fc:	b	15648 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   15700:	mov	r0, r5
   15704:	bl	135a8 <flatcc_builder_flush_vtable_cache@@Base>
   15708:	b	15648 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   1570c:	ldr	r3, [pc, #56]	; 1574c <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   15710:	mov	r2, #308	; 0x134
   15714:	movw	r1, #39796	; 0x9b74
   15718:	movt	r1, #1
   1571c:	movw	r0, #39880	; 0x9bc8
   15720:	movt	r0, #1
   15724:	bl	12324 <__assert_fail@plt>
   15728:	mov	r0, #0
   1572c:	b	15584 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15730:	mov	r0, #0
   15734:	b	15584 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15738:	mvn	r0, #0
   1573c:	b	15584 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15740:	mov	r0, #0
   15744:	b	15584 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15748:			; <UNDEFINED> instruction: 0x000198b4
   1574c:	andeq	r9, r1, r0, asr #12

00015750 <flatcc_builder_create_table@@Base>:
   15750:	strd	r4, [sp, #-20]!	; 0xffffffec
   15754:	strd	r6, [sp, #8]
   15758:	str	lr, [sp, #16]
   1575c:	sub	sp, sp, #92	; 0x5c
   15760:	ldr	r7, [sp, #116]	; 0x74
   15764:	ldr	ip, [sp, #120]	; 0x78
   15768:	cmp	r7, #0
   1576c:	blt	158b4 <flatcc_builder_create_table@@Base+0x164>
   15770:	mov	r4, r0
   15774:	tst	ip, #1
   15778:	beq	158d0 <flatcc_builder_create_table@@Base+0x180>
   1577c:	cmp	r3, #4
   15780:	movcc	r3, #4
   15784:	ldrh	r0, [r0, #128]	; 0x80
   15788:	cmp	r0, r3
   1578c:	strhcc	r3, [r4, #128]	; 0x80
   15790:	ldr	r0, [r4, #136]	; 0x88
   15794:	sub	r6, r0, r2
   15798:	sub	r3, r3, #1
   1579c:	and	r6, r6, r3
   157a0:	sub	r0, r0, r2
   157a4:	sub	r0, r0, #4
   157a8:	sub	ip, ip, #1
   157ac:	sub	ip, r0, ip
   157b0:	sub	ip, ip, r6
   157b4:	str	ip, [sp, #84]	; 0x54
   157b8:	cmp	r7, #0
   157bc:	ble	157ec <flatcc_builder_create_table@@Base+0x9c>
   157c0:	ldr	ip, [sp, #112]	; 0x70
   157c4:	add	r7, ip, r7, lsl #1
   157c8:	sub	r0, r6, r0
   157cc:	sub	lr, r0, #4
   157d0:	ldrh	r3, [ip], #2
   157d4:	sub	r5, lr, r3
   157d8:	ldr	r0, [r1, r3]
   157dc:	add	r0, r0, r5
   157e0:	str	r0, [r1, r3]
   157e4:	cmp	r7, ip
   157e8:	bne	157d0 <flatcc_builder_create_table@@Base+0x80>
   157ec:	mov	r3, #4
   157f0:	str	r3, [sp, #12]
   157f4:	add	r0, sp, #84	; 0x54
   157f8:	str	r0, [sp, #20]
   157fc:	str	r3, [sp, #24]
   15800:	mov	r3, #1
   15804:	str	r3, [sp, #16]
   15808:	cmp	r2, #0
   1580c:	beq	15828 <flatcc_builder_create_table@@Base+0xd8>
   15810:	add	r3, r2, #4
   15814:	str	r3, [sp, #12]
   15818:	str	r1, [sp, #28]
   1581c:	str	r2, [sp, #32]
   15820:	mov	r3, #2
   15824:	str	r3, [sp, #16]
   15828:	cmp	r6, #0
   1582c:	beq	15860 <flatcc_builder_create_table@@Base+0x110>
   15830:	ldr	r3, [sp, #12]
   15834:	add	r3, r3, r6
   15838:	str	r3, [sp, #12]
   1583c:	ldr	r3, [sp, #16]
   15840:	add	r3, r3, #1
   15844:	add	r2, sp, #88	; 0x58
   15848:	add	r1, r2, r3, lsl #3
   1584c:	movw	r2, #37924	; 0x9424
   15850:	movt	r2, #1
   15854:	str	r2, [r1, #-76]	; 0xffffffb4
   15858:	str	r6, [r1, #-72]	; 0xffffffb8
   1585c:	str	r3, [sp, #16]
   15860:	ldr	r2, [r4, #136]	; 0x88
   15864:	ldr	r3, [sp, #12]
   15868:	sub	r5, r2, r3
   1586c:	cmp	r2, r5
   15870:	ble	158ec <flatcc_builder_create_table@@Base+0x19c>
   15874:	str	r3, [sp]
   15878:	ldr	r6, [r4, #44]	; 0x2c
   1587c:	mov	r3, r5
   15880:	ldr	r2, [sp, #16]
   15884:	add	r1, sp, #20
   15888:	ldr	r0, [r4, #36]	; 0x24
   1588c:	blx	r6
   15890:	cmp	r0, #0
   15894:	bne	15908 <flatcc_builder_create_table@@Base+0x1b8>
   15898:	str	r5, [r4, #136]	; 0x88
   1589c:	mov	r0, r5
   158a0:	add	sp, sp, #92	; 0x5c
   158a4:	ldrd	r4, [sp]
   158a8:	ldrd	r6, [sp, #8]
   158ac:	add	sp, sp, #16
   158b0:	pop	{pc}		; (ldr pc, [sp], #4)
   158b4:	ldr	r3, [pc, #104]	; 15924 <flatcc_builder_create_table@@Base+0x1d4>
   158b8:	movw	r2, #1237	; 0x4d5
   158bc:	movw	r1, #39796	; 0x9b74
   158c0:	movt	r1, #1
   158c4:	movw	r0, #40472	; 0x9e18
   158c8:	movt	r0, #1
   158cc:	bl	12324 <__assert_fail@plt>
   158d0:	ldr	r3, [pc, #76]	; 15924 <flatcc_builder_create_table@@Base+0x1d4>
   158d4:	movw	r2, #1243	; 0x4db
   158d8:	movw	r1, #39796	; 0x9b74
   158dc:	movt	r1, #1
   158e0:	movw	r0, #40492	; 0x9e2c
   158e4:	movt	r0, #1
   158e8:	bl	12324 <__assert_fail@plt>
   158ec:	ldr	r3, [pc, #52]	; 15928 <flatcc_builder_create_table@@Base+0x1d8>
   158f0:	movw	r2, #647	; 0x287
   158f4:	movw	r1, #39796	; 0x9b74
   158f8:	movt	r1, #1
   158fc:	movw	r0, #39880	; 0x9bc8
   15900:	movt	r0, #1
   15904:	bl	12324 <__assert_fail@plt>
   15908:	ldr	r3, [pc, #24]	; 15928 <flatcc_builder_create_table@@Base+0x1d8>
   1590c:	movw	r2, #651	; 0x28b
   15910:	movw	r1, #39796	; 0x9b74
   15914:	movt	r1, #1
   15918:	movw	r0, #39880	; 0x9bc8
   1591c:	movt	r0, #1
   15920:	bl	12324 <__assert_fail@plt>
   15924:	andeq	r9, r1, r0, asr #17
   15928:	andeq	r9, r1, r0, ror r6

0001592c <flatcc_builder_check_required_field@@Base>:
   1592c:	ldr	r3, [r0, #32]
   15930:	ldrh	r3, [r3, #14]
   15934:	cmp	r3, #3
   15938:	bne	15960 <flatcc_builder_check_required_field@@Base+0x34>
   1593c:	ldrh	r3, [r0, #8]
   15940:	cmp	r3, r1
   15944:	bls	15984 <flatcc_builder_check_required_field@@Base+0x58>
   15948:	ldr	r3, [r0, #4]
   1594c:	lsl	r1, r1, #1
   15950:	ldrh	r0, [r3, r1]
   15954:	adds	r0, r0, #0
   15958:	movne	r0, #1
   1595c:	bx	lr
   15960:	str	r4, [sp, #-8]!
   15964:	str	lr, [sp, #4]
   15968:	ldr	r3, [pc, #28]	; 1598c <flatcc_builder_check_required_field@@Base+0x60>
   1596c:	movw	r2, #1272	; 0x4f8
   15970:	movw	r1, #39796	; 0x9b74
   15974:	movt	r1, #1
   15978:	movw	r0, #40504	; 0x9e38
   1597c:	movt	r0, #1
   15980:	bl	12324 <__assert_fail@plt>
   15984:	mov	r0, #0
   15988:	bx	lr
   1598c:	ldrdeq	r9, [r1], -ip

00015990 <flatcc_builder_check_union_field@@Base>:
   15990:	ldr	r3, [r0, #32]
   15994:	ldrh	r3, [r3, #14]
   15998:	cmp	r3, #3
   1599c:	bne	159f0 <flatcc_builder_check_union_field@@Base+0x60>
   159a0:	cmp	r1, #0
   159a4:	beq	15a3c <flatcc_builder_check_union_field@@Base+0xac>
   159a8:	ldrh	r3, [r0, #8]
   159ac:	cmp	r3, r1
   159b0:	bls	15a44 <flatcc_builder_check_union_field@@Base+0xb4>
   159b4:	ldr	r3, [r0, #4]
   159b8:	sub	r1, r1, #-2147483647	; 0x80000001
   159bc:	lsl	r1, r1, #1
   159c0:	ldrh	r2, [r3, r1]
   159c4:	cmp	r2, #0
   159c8:	beq	15a14 <flatcc_builder_check_union_field@@Base+0x84>
   159cc:	ldr	r0, [r0, #16]
   159d0:	ldrb	r2, [r0, r2]
   159d4:	cmp	r2, #0
   159d8:	bne	15a28 <flatcc_builder_check_union_field@@Base+0x98>
   159dc:	add	r1, r3, r1
   159e0:	ldrh	r0, [r1, #2]
   159e4:	clz	r0, r0
   159e8:	lsr	r0, r0, #5
   159ec:	bx	lr
   159f0:	str	r4, [sp, #-8]!
   159f4:	str	lr, [sp, #4]
   159f8:	ldr	r3, [pc, #76]	; 15a4c <flatcc_builder_check_union_field@@Base+0xbc>
   159fc:	movw	r2, #1279	; 0x4ff
   15a00:	movw	r1, #39796	; 0x9b74
   15a04:	movt	r1, #1
   15a08:	movw	r0, #40504	; 0x9e38
   15a0c:	movt	r0, #1
   15a10:	bl	12324 <__assert_fail@plt>
   15a14:	add	r1, r3, r1
   15a18:	ldrh	r0, [r1, #2]
   15a1c:	clz	r0, r0
   15a20:	lsr	r0, r0, #5
   15a24:	bx	lr
   15a28:	add	r1, r3, r1
   15a2c:	ldrh	r0, [r1, #2]
   15a30:	adds	r0, r0, #0
   15a34:	movne	r0, #1
   15a38:	bx	lr
   15a3c:	mov	r0, #0
   15a40:	bx	lr
   15a44:	mov	r0, #0
   15a48:	bx	lr
   15a4c:	andeq	r9, r1, r0, lsl #18

00015a50 <flatcc_builder_check_required@@Base>:
   15a50:	ldr	r3, [r0, #32]
   15a54:	ldrh	r3, [r3, #14]
   15a58:	cmp	r3, #3
   15a5c:	bne	15ab8 <flatcc_builder_check_required@@Base+0x68>
   15a60:	ldrh	r3, [r0, #8]
   15a64:	cmp	r3, r2
   15a68:	blt	15ae4 <flatcc_builder_check_required@@Base+0x94>
   15a6c:	cmp	r2, #0
   15a70:	ble	15aec <flatcc_builder_check_required@@Base+0x9c>
   15a74:	ldr	ip, [r0, #4]
   15a78:	ldrh	r3, [r1]
   15a7c:	lsl	r3, r3, #1
   15a80:	ldrh	r3, [ip, r3]
   15a84:	cmp	r3, #0
   15a88:	beq	15af4 <flatcc_builder_check_required@@Base+0xa4>
   15a8c:	add	r0, r1, #2
   15a90:	add	r2, r1, r2, lsl #1
   15a94:	cmp	r0, r2
   15a98:	beq	15adc <flatcc_builder_check_required@@Base+0x8c>
   15a9c:	ldrh	r3, [r0], #2
   15aa0:	lsl	r3, r3, #1
   15aa4:	ldrh	r3, [ip, r3]
   15aa8:	cmp	r3, #0
   15aac:	bne	15a94 <flatcc_builder_check_required@@Base+0x44>
   15ab0:	mov	r0, #0
   15ab4:	bx	lr
   15ab8:	str	r4, [sp, #-8]!
   15abc:	str	lr, [sp, #4]
   15ac0:	ldr	r3, [pc, #52]	; 15afc <flatcc_builder_check_required@@Base+0xac>
   15ac4:	movw	r2, #1297	; 0x511
   15ac8:	movw	r1, #39796	; 0x9b74
   15acc:	movt	r1, #1
   15ad0:	movw	r0, #40504	; 0x9e38
   15ad4:	movt	r0, #1
   15ad8:	bl	12324 <__assert_fail@plt>
   15adc:	mov	r0, #1
   15ae0:	bx	lr
   15ae4:	mov	r0, #0
   15ae8:	bx	lr
   15aec:	mov	r0, #1
   15af0:	bx	lr
   15af4:	mov	r0, #0
   15af8:	bx	lr
   15afc:	andeq	r9, r1, r4, lsr #18

00015b00 <flatcc_builder_end_table@@Base>:
   15b00:	strd	r4, [sp, #-20]!	; 0xffffffec
   15b04:	strd	r6, [sp, #8]
   15b08:	str	lr, [sp, #16]
   15b0c:	sub	sp, sp, #20
   15b10:	ldr	r3, [r0, #32]
   15b14:	ldrh	r3, [r3, #14]
   15b18:	cmp	r3, #3
   15b1c:	bne	15b9c <flatcc_builder_end_table@@Base+0x9c>
   15b20:	mov	r4, r0
   15b24:	ldr	r2, [r0, #4]
   15b28:	sub	r6, r2, #4
   15b2c:	ldrh	r5, [r0, #8]
   15b30:	add	r5, r5, #2
   15b34:	lsl	r5, r5, #1
   15b38:	uxth	r5, r5
   15b3c:	strh	r5, [r2, #-4]
   15b40:	ldr	r3, [r0, #20]
   15b44:	add	r3, r3, #4
   15b48:	uxth	r1, r3
   15b4c:	strh	r1, [r2, #-2]
   15b50:	ldr	r3, [r0, #12]
   15b54:	eor	r3, r3, r5
   15b58:	movw	r2, #31153	; 0x79b1
   15b5c:	movt	r2, #40503	; 0x9e37
   15b60:	mul	r3, r2, r3
   15b64:	eor	r3, r3, r1
   15b68:	mul	r3, r2, r3
   15b6c:	str	r3, [r0, #12]
   15b70:	mov	r2, r5
   15b74:	mov	r1, r6
   15b78:	bl	153a0 <flatcc_builder_create_cached_vtable@@Base>
   15b7c:	subs	r7, r0, #0
   15b80:	bne	15bb8 <flatcc_builder_end_table@@Base+0xb8>
   15b84:	mov	r0, r7
   15b88:	add	sp, sp, #20
   15b8c:	ldrd	r4, [sp]
   15b90:	ldrd	r6, [sp, #8]
   15b94:	add	sp, sp, #16
   15b98:	pop	{pc}		; (ldr pc, [sp], #4)
   15b9c:	ldr	r3, [pc, #284]	; 15cc0 <flatcc_builder_end_table@@Base+0x1c0>
   15ba0:	movw	r2, #1317	; 0x525
   15ba4:	movw	r1, #39796	; 0x9b74
   15ba8:	movt	r1, #1
   15bac:	movw	r0, #40504	; 0x9e38
   15bb0:	movt	r0, #1
   15bb4:	bl	12324 <__assert_fail@plt>
   15bb8:	mov	r2, r5
   15bbc:	mov	r1, #0
   15bc0:	mov	r0, r6
   15bc4:	bl	122f4 <memset@plt>
   15bc8:	ldr	r3, [r4, #32]
   15bcc:	ldr	r2, [r4, #76]	; 0x4c
   15bd0:	ldr	r3, [r3, #20]
   15bd4:	add	r2, r2, r3
   15bd8:	str	r7, [sp, #8]
   15bdc:	ldr	r3, [r4]
   15be0:	sub	r3, r3, r2
   15be4:	asr	r3, r3, #1
   15be8:	str	r3, [sp, #4]
   15bec:	str	r2, [sp]
   15bf0:	ldrh	r3, [r4, #130]	; 0x82
   15bf4:	ldr	r2, [r4, #20]
   15bf8:	ldr	r1, [r4, #16]
   15bfc:	mov	r0, r4
   15c00:	bl	15750 <flatcc_builder_create_table@@Base>
   15c04:	subs	r7, r0, #0
   15c08:	beq	15b84 <flatcc_builder_end_table@@Base+0x84>
   15c0c:	ldr	r3, [r4, #32]
   15c10:	ldr	r2, [r3, #24]
   15c14:	str	r2, [r4, #12]
   15c18:	ldrh	r2, [r3, #28]
   15c1c:	strh	r2, [r4, #8]
   15c20:	ldr	r2, [r4, #52]	; 0x34
   15c24:	ldr	r1, [r3, #16]
   15c28:	add	r2, r2, r1
   15c2c:	str	r2, [r4, #4]
   15c30:	ldr	r2, [r4, #76]	; 0x4c
   15c34:	ldr	r3, [r3, #20]
   15c38:	add	r3, r2, r3
   15c3c:	str	r3, [r4]
   15c40:	ldr	r2, [r4, #20]
   15c44:	mov	r1, #0
   15c48:	ldr	r0, [r4, #16]
   15c4c:	bl	122f4 <memset@plt>
   15c50:	ldr	r2, [r4, #32]
   15c54:	ldr	r3, [r2, #8]
   15c58:	str	r3, [r4, #20]
   15c5c:	ldr	r0, [r2]
   15c60:	str	r0, [r4, #28]
   15c64:	ldr	r1, [r2, #4]
   15c68:	ldr	r3, [r4, #60]	; 0x3c
   15c6c:	add	r3, r3, r0
   15c70:	str	r3, [r4, #16]
   15c74:	ldr	r3, [r4, #64]	; 0x40
   15c78:	sub	r3, r3, r0
   15c7c:	cmp	r3, r1
   15c80:	movcs	r3, r1
   15c84:	str	r3, [r4, #24]
   15c88:	str	r1, [r2, #4]
   15c8c:	ldrh	r3, [r4, #130]	; 0x82
   15c90:	ldrh	r2, [r4, #128]	; 0x80
   15c94:	cmp	r2, r3
   15c98:	strhcc	r3, [r4, #128]	; 0x80
   15c9c:	ldr	r3, [r4, #32]
   15ca0:	ldrh	r2, [r3, #12]
   15ca4:	strh	r2, [r4, #130]	; 0x82
   15ca8:	sub	r3, r3, #36	; 0x24
   15cac:	str	r3, [r4, #32]
   15cb0:	ldr	r3, [r4, #156]	; 0x9c
   15cb4:	sub	r3, r3, #1
   15cb8:	str	r3, [r4, #156]	; 0x9c
   15cbc:	b	15b84 <flatcc_builder_end_table@@Base+0x84>
   15cc0:	andeq	r9, r1, r4, asr #18

00015cc4 <flatcc_builder_create_vector@@Base>:
   15cc4:	strd	r4, [sp, #-16]!
   15cc8:	str	r6, [sp, #8]
   15ccc:	str	lr, [sp, #12]
   15cd0:	sub	sp, sp, #88	; 0x58
   15cd4:	mov	r4, r0
   15cd8:	ldrh	r0, [sp, #104]	; 0x68
   15cdc:	ldr	ip, [sp, #108]	; 0x6c
   15ce0:	cmp	r2, ip
   15ce4:	bhi	15dd8 <flatcc_builder_create_vector@@Base+0x114>
   15ce8:	cmp	r0, #4
   15cec:	movcc	r0, #4
   15cf0:	ldrh	ip, [r4, #128]	; 0x80
   15cf4:	cmp	ip, r0
   15cf8:	strhcc	r0, [r4, #128]	; 0x80
   15cfc:	mul	r3, r3, r2
   15d00:	str	r2, [sp, #84]	; 0x54
   15d04:	ldr	r2, [r4, #136]	; 0x88
   15d08:	sub	ip, r2, r3
   15d0c:	sub	r0, r0, #1
   15d10:	and	r0, r0, ip
   15d14:	mov	ip, #4
   15d18:	str	ip, [sp, #12]
   15d1c:	add	lr, sp, #84	; 0x54
   15d20:	str	lr, [sp, #20]
   15d24:	str	ip, [sp, #24]
   15d28:	mov	ip, #1
   15d2c:	str	ip, [sp, #16]
   15d30:	cmp	r3, #0
   15d34:	beq	15d50 <flatcc_builder_create_vector@@Base+0x8c>
   15d38:	add	ip, r3, #4
   15d3c:	str	ip, [sp, #12]
   15d40:	str	r1, [sp, #28]
   15d44:	str	r3, [sp, #32]
   15d48:	mov	r3, #2
   15d4c:	str	r3, [sp, #16]
   15d50:	cmp	r0, #0
   15d54:	beq	15d88 <flatcc_builder_create_vector@@Base+0xc4>
   15d58:	ldr	r3, [sp, #12]
   15d5c:	add	r3, r3, r0
   15d60:	str	r3, [sp, #12]
   15d64:	ldr	r3, [sp, #16]
   15d68:	add	r3, r3, #1
   15d6c:	add	r1, sp, #88	; 0x58
   15d70:	add	ip, r1, r3, lsl #3
   15d74:	movw	r1, #37924	; 0x9424
   15d78:	movt	r1, #1
   15d7c:	str	r1, [ip, #-76]	; 0xffffffb4
   15d80:	str	r0, [ip, #-72]	; 0xffffffb8
   15d84:	str	r3, [sp, #16]
   15d88:	ldr	r3, [sp, #12]
   15d8c:	sub	r5, r2, r3
   15d90:	cmp	r2, r5
   15d94:	ble	15df4 <flatcc_builder_create_vector@@Base+0x130>
   15d98:	str	r3, [sp]
   15d9c:	ldr	r6, [r4, #44]	; 0x2c
   15da0:	mov	r3, r5
   15da4:	ldr	r2, [sp, #16]
   15da8:	add	r1, sp, #20
   15dac:	ldr	r0, [r4, #36]	; 0x24
   15db0:	blx	r6
   15db4:	cmp	r0, #0
   15db8:	bne	15e10 <flatcc_builder_create_vector@@Base+0x14c>
   15dbc:	str	r5, [r4, #136]	; 0x88
   15dc0:	mov	r0, r5
   15dc4:	add	sp, sp, #88	; 0x58
   15dc8:	ldrd	r4, [sp]
   15dcc:	ldr	r6, [sp, #8]
   15dd0:	add	sp, sp, #12
   15dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15dd8:	ldr	r3, [pc, #76]	; 15e2c <flatcc_builder_create_vector@@Base+0x168>
   15ddc:	movw	r2, #1365	; 0x555
   15de0:	movw	r1, #39796	; 0x9b74
   15de4:	movt	r1, #1
   15de8:	movw	r0, #40548	; 0x9e64
   15dec:	movt	r0, #1
   15df0:	bl	12324 <__assert_fail@plt>
   15df4:	ldr	r3, [pc, #52]	; 15e30 <flatcc_builder_create_vector@@Base+0x16c>
   15df8:	movw	r2, #647	; 0x287
   15dfc:	movw	r1, #39796	; 0x9b74
   15e00:	movt	r1, #1
   15e04:	movw	r0, #39880	; 0x9bc8
   15e08:	movt	r0, #1
   15e0c:	bl	12324 <__assert_fail@plt>
   15e10:	ldr	r3, [pc, #24]	; 15e30 <flatcc_builder_create_vector@@Base+0x16c>
   15e14:	movw	r2, #651	; 0x28b
   15e18:	movw	r1, #39796	; 0x9b74
   15e1c:	movt	r1, #1
   15e20:	movw	r0, #39880	; 0x9bc8
   15e24:	movt	r0, #1
   15e28:	bl	12324 <__assert_fail@plt>
   15e2c:	andeq	r9, r1, r0, ror #18
   15e30:	andeq	r9, r1, r0, ror r6

00015e34 <flatcc_builder_end_vector@@Base>:
   15e34:	strd	r4, [sp, #-12]!
   15e38:	str	lr, [sp, #8]
   15e3c:	sub	sp, sp, #12
   15e40:	ldr	r1, [r0, #32]
   15e44:	ldrh	r3, [r1, #14]
   15e48:	cmp	r3, #4
   15e4c:	bne	15e90 <flatcc_builder_end_vector@@Base+0x5c>
   15e50:	mov	r4, r0
   15e54:	ldr	r3, [r1, #16]
   15e58:	ldr	r2, [r1, #20]
   15e5c:	ldr	r1, [r1, #24]
   15e60:	str	r1, [sp, #4]
   15e64:	ldrh	r1, [r0, #130]	; 0x82
   15e68:	str	r1, [sp]
   15e6c:	ldr	r1, [r0, #16]
   15e70:	bl	15cc4 <flatcc_builder_create_vector@@Base>
   15e74:	subs	r5, r0, #0
   15e78:	bne	15eac <flatcc_builder_end_vector@@Base+0x78>
   15e7c:	mov	r0, r5
   15e80:	add	sp, sp, #12
   15e84:	ldrd	r4, [sp]
   15e88:	add	sp, sp, #8
   15e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e90:	ldr	r3, [pc, #148]	; 15f2c <flatcc_builder_end_vector@@Base+0xf8>
   15e94:	movw	r2, #1400	; 0x578
   15e98:	movw	r1, #39796	; 0x9b74
   15e9c:	movt	r1, #1
   15ea0:	movw	r0, #40108	; 0x9cac
   15ea4:	movt	r0, #1
   15ea8:	bl	12324 <__assert_fail@plt>
   15eac:	ldr	r2, [r4, #20]
   15eb0:	mov	r1, #0
   15eb4:	ldr	r0, [r4, #16]
   15eb8:	bl	122f4 <memset@plt>
   15ebc:	ldr	r2, [r4, #32]
   15ec0:	ldr	r3, [r2, #8]
   15ec4:	str	r3, [r4, #20]
   15ec8:	ldr	r0, [r2]
   15ecc:	str	r0, [r4, #28]
   15ed0:	ldr	r1, [r2, #4]
   15ed4:	ldr	r3, [r4, #60]	; 0x3c
   15ed8:	add	r3, r3, r0
   15edc:	str	r3, [r4, #16]
   15ee0:	ldr	r3, [r4, #64]	; 0x40
   15ee4:	sub	r3, r3, r0
   15ee8:	cmp	r3, r1
   15eec:	movcs	r3, r1
   15ef0:	str	r3, [r4, #24]
   15ef4:	str	r1, [r2, #4]
   15ef8:	ldrh	r3, [r4, #130]	; 0x82
   15efc:	ldrh	r2, [r4, #128]	; 0x80
   15f00:	cmp	r2, r3
   15f04:	strhcc	r3, [r4, #128]	; 0x80
   15f08:	ldr	r3, [r4, #32]
   15f0c:	ldrh	r2, [r3, #12]
   15f10:	strh	r2, [r4, #130]	; 0x82
   15f14:	sub	r3, r3, #36	; 0x24
   15f18:	str	r3, [r4, #32]
   15f1c:	ldr	r3, [r4, #156]	; 0x9c
   15f20:	sub	r3, r3, #1
   15f24:	str	r3, [r4, #156]	; 0x9c
   15f28:	b	15e7c <flatcc_builder_end_vector@@Base+0x48>
   15f2c:	andeq	r9, r1, r0, lsl #19

00015f30 <flatcc_builder_vector_count@@Base>:
   15f30:	ldr	r3, [r0, #32]
   15f34:	ldr	r0, [r3, #20]
   15f38:	bx	lr

00015f3c <flatcc_builder_vector_edit@@Base>:
   15f3c:	ldr	r0, [r0, #16]
   15f40:	bx	lr

00015f44 <flatcc_builder_create_offset_vector_direct@@Base>:
   15f44:	str	r4, [sp, #-8]!
   15f48:	str	lr, [sp, #4]
   15f4c:	mov	r3, #0
   15f50:	bl	133a0 <flatcc_builder_default_alloc@@Base+0x3b8>
   15f54:	ldr	r4, [sp]
   15f58:	add	sp, sp, #4
   15f5c:	pop	{pc}		; (ldr pc, [sp], #4)

00015f60 <flatcc_builder_end_offset_vector@@Base>:
   15f60:	strd	r4, [sp, #-16]!
   15f64:	str	r6, [sp, #8]
   15f68:	str	lr, [sp, #12]
   15f6c:	ldr	r3, [r0, #32]
   15f70:	ldrh	r2, [r3, #14]
   15f74:	cmp	r2, #5
   15f78:	bne	15fa8 <flatcc_builder_end_offset_vector@@Base+0x48>
   15f7c:	mov	r4, r0
   15f80:	ldr	r2, [r3, #20]
   15f84:	ldr	r1, [r0, #16]
   15f88:	bl	15f44 <flatcc_builder_create_offset_vector_direct@@Base>
   15f8c:	subs	r5, r0, #0
   15f90:	bne	15fc4 <flatcc_builder_end_offset_vector@@Base+0x64>
   15f94:	mov	r0, r5
   15f98:	ldrd	r4, [sp]
   15f9c:	ldr	r6, [sp, #8]
   15fa0:	add	sp, sp, #12
   15fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa8:	ldr	r3, [pc, #148]	; 16044 <flatcc_builder_end_offset_vector@@Base+0xe4>
   15fac:	movw	r2, #1480	; 0x5c8
   15fb0:	movw	r1, #39796	; 0x9b74
   15fb4:	movt	r1, #1
   15fb8:	movw	r0, #40216	; 0x9d18
   15fbc:	movt	r0, #1
   15fc0:	bl	12324 <__assert_fail@plt>
   15fc4:	ldr	r2, [r4, #20]
   15fc8:	mov	r1, #0
   15fcc:	ldr	r0, [r4, #16]
   15fd0:	bl	122f4 <memset@plt>
   15fd4:	ldr	r2, [r4, #32]
   15fd8:	ldr	r3, [r2, #8]
   15fdc:	str	r3, [r4, #20]
   15fe0:	ldr	r0, [r2]
   15fe4:	str	r0, [r4, #28]
   15fe8:	ldr	r1, [r2, #4]
   15fec:	ldr	r3, [r4, #60]	; 0x3c
   15ff0:	add	r3, r3, r0
   15ff4:	str	r3, [r4, #16]
   15ff8:	ldr	r3, [r4, #64]	; 0x40
   15ffc:	sub	r3, r3, r0
   16000:	cmp	r3, r1
   16004:	movcs	r3, r1
   16008:	str	r3, [r4, #24]
   1600c:	str	r1, [r2, #4]
   16010:	ldrh	r3, [r4, #130]	; 0x82
   16014:	ldrh	r2, [r4, #128]	; 0x80
   16018:	cmp	r2, r3
   1601c:	strhcc	r3, [r4, #128]	; 0x80
   16020:	ldr	r3, [r4, #32]
   16024:	ldrh	r2, [r3, #12]
   16028:	strh	r2, [r4, #130]	; 0x82
   1602c:	sub	r3, r3, #36	; 0x24
   16030:	str	r3, [r4, #32]
   16034:	ldr	r3, [r4, #156]	; 0x9c
   16038:	sub	r3, r3, #1
   1603c:	str	r3, [r4, #156]	; 0x9c
   16040:	b	15f94 <flatcc_builder_end_offset_vector@@Base+0x34>
   16044:	muleq	r1, ip, r9

00016048 <flatcc_builder_create_offset_vector@@Base>:
   16048:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1604c:	strd	r6, [sp, #8]
   16050:	str	r8, [sp, #16]
   16054:	str	lr, [sp, #20]
   16058:	mov	r5, r0
   1605c:	mov	r7, r1
   16060:	mov	r6, r2
   16064:	bl	14dd0 <flatcc_builder_start_offset_vector@@Base>
   16068:	subs	r4, r0, #0
   1606c:	movne	r4, #0
   16070:	beq	1608c <flatcc_builder_create_offset_vector@@Base+0x44>
   16074:	mov	r0, r4
   16078:	ldrd	r4, [sp]
   1607c:	ldrd	r6, [sp, #8]
   16080:	ldr	r8, [sp, #16]
   16084:	add	sp, sp, #20
   16088:	pop	{pc}		; (ldr pc, [sp], #4)
   1608c:	mov	r1, r6
   16090:	mov	r0, r5
   16094:	bl	146d4 <flatcc_builder_extend_offset_vector@@Base>
   16098:	cmp	r0, #0
   1609c:	beq	16074 <flatcc_builder_create_offset_vector@@Base+0x2c>
   160a0:	lsl	r2, r6, #2
   160a4:	mov	r1, r7
   160a8:	bl	12294 <memcpy@plt>
   160ac:	mov	r0, r5
   160b0:	bl	15f60 <flatcc_builder_end_offset_vector@@Base>
   160b4:	mov	r4, r0
   160b8:	b	16074 <flatcc_builder_create_offset_vector@@Base+0x2c>

000160bc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   160bc:	strd	r4, [sp, #-16]!
   160c0:	str	r6, [sp, #8]
   160c4:	str	lr, [sp, #12]
   160c8:	mov	r4, r0
   160cc:	ldr	r2, [r0, #32]
   160d0:	ldrh	r0, [r2, #14]
   160d4:	cmp	r0, #5
   160d8:	bne	1610c <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   160dc:	mov	r3, r1
   160e0:	ldr	r2, [r2, #20]
   160e4:	ldr	r1, [r4, #16]
   160e8:	mov	r0, r4
   160ec:	bl	133a0 <flatcc_builder_default_alloc@@Base+0x3b8>
   160f0:	subs	r5, r0, #0
   160f4:	bne	16128 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   160f8:	mov	r0, r5
   160fc:	ldrd	r4, [sp]
   16100:	ldr	r6, [sp, #8]
   16104:	add	sp, sp, #12
   16108:	pop	{pc}		; (ldr pc, [sp], #4)
   1610c:	ldr	r3, [pc, #148]	; 161a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   16110:	movw	r2, #1493	; 0x5d5
   16114:	movw	r1, #39796	; 0x9b74
   16118:	movt	r1, #1
   1611c:	movw	r0, #40216	; 0x9d18
   16120:	movt	r0, #1
   16124:	bl	12324 <__assert_fail@plt>
   16128:	ldr	r2, [r4, #20]
   1612c:	mov	r1, #0
   16130:	ldr	r0, [r4, #16]
   16134:	bl	122f4 <memset@plt>
   16138:	ldr	r2, [r4, #32]
   1613c:	ldr	r3, [r2, #8]
   16140:	str	r3, [r4, #20]
   16144:	ldr	r0, [r2]
   16148:	str	r0, [r4, #28]
   1614c:	ldr	r1, [r2, #4]
   16150:	ldr	r3, [r4, #60]	; 0x3c
   16154:	add	r3, r3, r0
   16158:	str	r3, [r4, #16]
   1615c:	ldr	r3, [r4, #64]	; 0x40
   16160:	sub	r3, r3, r0
   16164:	cmp	r3, r1
   16168:	movcs	r3, r1
   1616c:	str	r3, [r4, #24]
   16170:	str	r1, [r2, #4]
   16174:	ldrh	r3, [r4, #130]	; 0x82
   16178:	ldrh	r2, [r4, #128]	; 0x80
   1617c:	cmp	r2, r3
   16180:	strhcc	r3, [r4, #128]	; 0x80
   16184:	ldr	r3, [r4, #32]
   16188:	ldrh	r2, [r3, #12]
   1618c:	strh	r2, [r4, #130]	; 0x82
   16190:	sub	r3, r3, #36	; 0x24
   16194:	str	r3, [r4, #32]
   16198:	ldr	r3, [r4, #156]	; 0x9c
   1619c:	sub	r3, r3, #1
   161a0:	str	r3, [r4, #156]	; 0x9c
   161a4:	b	160f8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   161a8:	andeq	r9, r1, r0, asr #19

000161ac <flatcc_builder_offset_vector_edit@@Base>:
   161ac:	ldr	r0, [r0, #16]
   161b0:	bx	lr

000161b4 <flatcc_builder_offset_vector_count@@Base>:
   161b4:	ldr	r3, [r0, #32]
   161b8:	ldr	r0, [r3, #20]
   161bc:	bx	lr

000161c0 <flatcc_builder_create_union_vector_direct@@Base>:
   161c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   161c4:	strd	r6, [sp, #8]
   161c8:	str	lr, [sp, #16]
   161cc:	sub	sp, sp, #12
   161d0:	mov	r4, r0
   161d4:	mov	r5, r1
   161d8:	mov	r6, r2
   161dc:	mov	r1, r3
   161e0:	mov	r3, r2
   161e4:	ldr	r2, [sp, #32]
   161e8:	mov	r0, r5
   161ec:	bl	133a0 <flatcc_builder_default_alloc@@Base+0x3b8>
   161f0:	subs	r7, r0, #0
   161f4:	bne	1621c <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   161f8:	mov	r3, #0
   161fc:	str	r3, [r4]
   16200:	str	r3, [r4, #4]
   16204:	mov	r0, r4
   16208:	add	sp, sp, #12
   1620c:	ldrd	r4, [sp]
   16210:	ldrd	r6, [sp, #8]
   16214:	add	sp, sp, #16
   16218:	pop	{pc}		; (ldr pc, [sp], #4)
   1621c:	mvn	r3, #0
   16220:	str	r3, [sp, #4]
   16224:	mov	r3, #1
   16228:	str	r3, [sp]
   1622c:	ldr	r2, [sp, #32]
   16230:	mov	r1, r6
   16234:	mov	r0, r5
   16238:	bl	15cc4 <flatcc_builder_create_vector@@Base>
   1623c:	cmp	r0, #0
   16240:	moveq	r3, #0
   16244:	streq	r3, [r4]
   16248:	strne	r0, [r4]
   1624c:	str	r7, [r4, #4]
   16250:	b	16204 <flatcc_builder_create_union_vector_direct@@Base+0x44>

00016254 <flatcc_builder_create_union_vector@@Base>:
   16254:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16258:	strd	r6, [sp, #8]
   1625c:	str	r8, [sp, #16]
   16260:	str	lr, [sp, #20]
   16264:	sub	sp, sp, #16
   16268:	mov	r5, r0
   1626c:	mov	r4, r1
   16270:	mov	r7, r2
   16274:	mov	r6, r3
   16278:	mov	r0, r1
   1627c:	bl	14dd0 <flatcc_builder_start_offset_vector@@Base>
   16280:	cmp	r0, #0
   16284:	beq	162b0 <flatcc_builder_create_union_vector@@Base+0x5c>
   16288:	mov	r3, #0
   1628c:	str	r3, [r5]
   16290:	str	r3, [r5, #4]
   16294:	mov	r0, r5
   16298:	add	sp, sp, #16
   1629c:	ldrd	r4, [sp]
   162a0:	ldrd	r6, [sp, #8]
   162a4:	ldr	r8, [sp, #16]
   162a8:	add	sp, sp, #20
   162ac:	pop	{pc}		; (ldr pc, [sp], #4)
   162b0:	mov	r1, r6
   162b4:	mov	r0, r4
   162b8:	bl	146d4 <flatcc_builder_extend_offset_vector@@Base>
   162bc:	cmp	r0, #0
   162c0:	moveq	r3, #0
   162c4:	streq	r3, [r5]
   162c8:	streq	r3, [r5, #4]
   162cc:	beq	16294 <flatcc_builder_create_union_vector@@Base+0x40>
   162d0:	ldr	r8, [r4, #20]
   162d4:	add	r1, r6, r8
   162d8:	str	r1, [r4, #20]
   162dc:	ldr	r3, [r4, #24]
   162e0:	cmp	r1, r3
   162e4:	bcs	163c8 <flatcc_builder_create_union_vector@@Base+0x174>
   162e8:	ldr	r3, [r4, #16]
   162ec:	adds	r2, r3, r8
   162f0:	beq	163e0 <flatcc_builder_create_union_vector@@Base+0x18c>
   162f4:	cmp	r6, #0
   162f8:	beq	16328 <flatcc_builder_create_union_vector@@Base+0xd4>
   162fc:	mov	r1, r7
   16300:	sub	ip, r2, #1
   16304:	sub	r0, r3, #4
   16308:	add	r7, r7, r6, lsl #3
   1630c:	ldrb	lr, [r1]
   16310:	strb	lr, [ip, #1]!
   16314:	ldr	lr, [r1, #4]
   16318:	str	lr, [r0, #4]!
   1631c:	add	r1, r1, #8
   16320:	cmp	r1, r7
   16324:	bne	1630c <flatcc_builder_create_union_vector@@Base+0xb8>
   16328:	str	r6, [sp]
   1632c:	mov	r1, r4
   16330:	add	r0, sp, #8
   16334:	bl	161c0 <flatcc_builder_create_union_vector_direct@@Base>
   16338:	ldr	r7, [sp, #8]
   1633c:	ldr	r6, [sp, #12]
   16340:	ldr	r2, [r4, #20]
   16344:	mov	r1, #0
   16348:	ldr	r0, [r4, #16]
   1634c:	bl	122f4 <memset@plt>
   16350:	ldr	r2, [r4, #32]
   16354:	ldr	r3, [r2, #8]
   16358:	str	r3, [r4, #20]
   1635c:	ldr	r0, [r2]
   16360:	str	r0, [r4, #28]
   16364:	ldr	r1, [r2, #4]
   16368:	ldr	r3, [r4, #60]	; 0x3c
   1636c:	add	r3, r3, r0
   16370:	str	r3, [r4, #16]
   16374:	ldr	r3, [r4, #64]	; 0x40
   16378:	sub	r3, r3, r0
   1637c:	cmp	r3, r1
   16380:	movcs	r3, r1
   16384:	str	r3, [r4, #24]
   16388:	str	r1, [r2, #4]
   1638c:	ldrh	r3, [r4, #130]	; 0x82
   16390:	ldrh	r2, [r4, #128]	; 0x80
   16394:	cmp	r2, r3
   16398:	strhcc	r3, [r4, #128]	; 0x80
   1639c:	ldr	r3, [r4, #32]
   163a0:	ldrh	r2, [r3, #12]
   163a4:	strh	r2, [r4, #130]	; 0x82
   163a8:	sub	r3, r3, #36	; 0x24
   163ac:	str	r3, [r4, #32]
   163b0:	ldr	r3, [r4, #156]	; 0x9c
   163b4:	sub	r3, r3, #1
   163b8:	str	r3, [r4, #156]	; 0x9c
   163bc:	str	r7, [r5]
   163c0:	str	r6, [r5, #4]
   163c4:	b	16294 <flatcc_builder_create_union_vector@@Base+0x40>
   163c8:	mvn	r2, #3
   163cc:	add	r1, r1, #1
   163d0:	mov	r0, r4
   163d4:	bl	12f60 <main@@Base+0x100>
   163d8:	cmp	r0, #0
   163dc:	beq	162e8 <flatcc_builder_create_union_vector@@Base+0x94>
   163e0:	mov	r3, #0
   163e4:	str	r3, [r5]
   163e8:	str	r3, [r5, #4]
   163ec:	b	16294 <flatcc_builder_create_union_vector@@Base+0x40>

000163f0 <flatcc_builder_start_union_vector@@Base>:
   163f0:	str	r4, [sp, #-8]!
   163f4:	str	lr, [sp, #4]
   163f8:	mov	r4, r0
   163fc:	mov	r1, #4
   16400:	bl	13234 <flatcc_builder_default_alloc@@Base+0x24c>
   16404:	cmp	r0, #0
   16408:	bne	1646c <flatcc_builder_start_union_vector@@Base+0x7c>
   1640c:	ldr	r3, [r4, #32]
   16410:	mov	r2, #8
   16414:	str	r2, [r3, #16]
   16418:	ldr	r3, [r4, #32]
   1641c:	mov	r2, #0
   16420:	str	r2, [r3, #20]
   16424:	ldr	r3, [r4, #32]
   16428:	mov	r2, #7
   1642c:	strh	r2, [r3, #14]
   16430:	ldr	r1, [r4, #28]
   16434:	ldr	r2, [r4, #60]	; 0x3c
   16438:	add	r2, r2, r1
   1643c:	str	r2, [r4, #16]
   16440:	ldr	r3, [r4, #64]	; 0x40
   16444:	sub	r3, r3, r1
   16448:	cmn	r3, #4
   1644c:	mvnhi	r3, #3
   16450:	str	r3, [r4, #24]
   16454:	ldr	r3, [r4, #32]
   16458:	mvn	r2, #3
   1645c:	str	r2, [r3, #4]
   16460:	ldr	r4, [sp]
   16464:	add	sp, sp, #4
   16468:	pop	{pc}		; (ldr pc, [sp], #4)
   1646c:	mvn	r0, #0
   16470:	b	16460 <flatcc_builder_start_union_vector@@Base+0x70>

00016474 <flatcc_builder_end_union_vector@@Base>:
   16474:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16478:	strd	r6, [sp, #8]
   1647c:	str	r8, [sp, #16]
   16480:	str	lr, [sp, #20]
   16484:	sub	sp, sp, #16
   16488:	ldr	r3, [r1, #32]
   1648c:	ldrh	r2, [r3, #14]
   16490:	cmp	r2, #7
   16494:	bne	165bc <flatcc_builder_end_union_vector@@Base+0x148>
   16498:	mov	r6, r0
   1649c:	mov	r4, r1
   164a0:	ldr	r5, [r3, #20]
   164a4:	ldr	r8, [r1, #20]
   164a8:	add	r1, r5, r5, lsl #2
   164ac:	add	r1, r1, r8
   164b0:	str	r1, [r4, #20]
   164b4:	ldr	r3, [r4, #24]
   164b8:	cmp	r1, r3
   164bc:	bcs	165d8 <flatcc_builder_end_union_vector@@Base+0x164>
   164c0:	ldr	r7, [r4, #16]
   164c4:	adds	r3, r7, r8
   164c8:	beq	165f0 <flatcc_builder_end_union_vector@@Base+0x17c>
   164cc:	add	r2, r3, r5, lsl #2
   164d0:	cmp	r5, #0
   164d4:	beq	16504 <flatcc_builder_end_union_vector@@Base+0x90>
   164d8:	mov	r1, r7
   164dc:	sub	ip, r2, #1
   164e0:	sub	r0, r3, #4
   164e4:	add	r7, r7, r5, lsl #3
   164e8:	ldrb	lr, [r1]
   164ec:	strb	lr, [ip, #1]!
   164f0:	ldr	lr, [r1, #4]
   164f4:	str	lr, [r0, #4]!
   164f8:	add	r1, r1, #8
   164fc:	cmp	r1, r7
   16500:	bne	164e8 <flatcc_builder_end_union_vector@@Base+0x74>
   16504:	str	r5, [sp]
   16508:	mov	r1, r4
   1650c:	add	r0, sp, #8
   16510:	bl	161c0 <flatcc_builder_create_union_vector_direct@@Base>
   16514:	ldr	r7, [sp, #8]
   16518:	ldr	r5, [sp, #12]
   1651c:	ldr	r2, [r4, #20]
   16520:	mov	r1, #0
   16524:	ldr	r0, [r4, #16]
   16528:	bl	122f4 <memset@plt>
   1652c:	ldr	r2, [r4, #32]
   16530:	ldr	r3, [r2, #8]
   16534:	str	r3, [r4, #20]
   16538:	ldr	r0, [r2]
   1653c:	str	r0, [r4, #28]
   16540:	ldr	r1, [r2, #4]
   16544:	ldr	r3, [r4, #60]	; 0x3c
   16548:	add	r3, r3, r0
   1654c:	str	r3, [r4, #16]
   16550:	ldr	r3, [r4, #64]	; 0x40
   16554:	sub	r3, r3, r0
   16558:	cmp	r3, r1
   1655c:	movcs	r3, r1
   16560:	str	r3, [r4, #24]
   16564:	str	r1, [r2, #4]
   16568:	ldrh	r3, [r4, #130]	; 0x82
   1656c:	ldrh	r2, [r4, #128]	; 0x80
   16570:	cmp	r2, r3
   16574:	strhcc	r3, [r4, #128]	; 0x80
   16578:	ldr	r3, [r4, #32]
   1657c:	ldrh	r2, [r3, #12]
   16580:	strh	r2, [r4, #130]	; 0x82
   16584:	sub	r3, r3, #36	; 0x24
   16588:	str	r3, [r4, #32]
   1658c:	ldr	r3, [r4, #156]	; 0x9c
   16590:	sub	r3, r3, #1
   16594:	str	r3, [r4, #156]	; 0x9c
   16598:	str	r7, [r6]
   1659c:	str	r5, [r6, #4]
   165a0:	mov	r0, r6
   165a4:	add	sp, sp, #16
   165a8:	ldrd	r4, [sp]
   165ac:	ldrd	r6, [sp, #8]
   165b0:	ldr	r8, [sp, #16]
   165b4:	add	sp, sp, #20
   165b8:	pop	{pc}		; (ldr pc, [sp], #4)
   165bc:	ldr	r3, [pc, #60]	; 16600 <flatcc_builder_end_union_vector@@Base+0x18c>
   165c0:	movw	r2, #1617	; 0x651
   165c4:	movw	r1, #39796	; 0x9b74
   165c8:	movt	r1, #1
   165cc:	movw	r0, #40568	; 0x9e78
   165d0:	movt	r0, #1
   165d4:	bl	12324 <__assert_fail@plt>
   165d8:	mvn	r2, #3
   165dc:	add	r1, r1, #1
   165e0:	mov	r0, r4
   165e4:	bl	12f60 <main@@Base+0x100>
   165e8:	cmp	r0, #0
   165ec:	beq	164c0 <flatcc_builder_end_union_vector@@Base+0x4c>
   165f0:	mov	r3, #0
   165f4:	str	r3, [r6]
   165f8:	str	r3, [r6, #4]
   165fc:	b	165a0 <flatcc_builder_end_union_vector@@Base+0x12c>
   16600:	andeq	r9, r1, ip, ror #19

00016604 <flatcc_builder_union_vector_edit@@Base>:
   16604:	ldr	r0, [r0, #16]
   16608:	bx	lr

0001660c <flatcc_builder_union_vector_count@@Base>:
   1660c:	ldr	r3, [r0, #32]
   16610:	ldr	r0, [r3, #20]
   16614:	bx	lr

00016618 <flatcc_builder_extend_union_vector@@Base>:
   16618:	strd	r4, [sp, #-16]!
   1661c:	str	r6, [sp, #8]
   16620:	str	lr, [sp, #12]
   16624:	mov	r4, r0
   16628:	ldr	r2, [r0, #32]
   1662c:	ldr	r3, [r2, #20]
   16630:	adds	r3, r1, r3
   16634:	movcs	ip, #1
   16638:	movcc	ip, #0
   1663c:	cmn	r3, #-536870911	; 0xe0000001
   16640:	movls	r0, #0
   16644:	movhi	r0, #1
   16648:	orrs	r0, ip, r0
   1664c:	bne	16684 <flatcc_builder_extend_union_vector@@Base+0x6c>
   16650:	str	r3, [r2, #20]
   16654:	ldr	r5, [r4, #20]
   16658:	add	r1, r5, r1, lsl #3
   1665c:	str	r1, [r4, #20]
   16660:	ldr	r3, [r4, #24]
   16664:	cmp	r1, r3
   16668:	bcs	166a0 <flatcc_builder_extend_union_vector@@Base+0x88>
   1666c:	ldr	r0, [r4, #16]
   16670:	add	r0, r0, r5
   16674:	ldrd	r4, [sp]
   16678:	ldr	r6, [sp, #8]
   1667c:	add	sp, sp, #12
   16680:	pop	{pc}		; (ldr pc, [sp], #4)
   16684:	ldr	r3, [pc, #52]	; 166c0 <flatcc_builder_extend_union_vector@@Base+0xa8>
   16688:	mov	r2, #892	; 0x37c
   1668c:	movw	r1, #39796	; 0x9b74
   16690:	movt	r1, #1
   16694:	movw	r0, #40080	; 0x9c90
   16698:	movt	r0, #1
   1669c:	bl	12324 <__assert_fail@plt>
   166a0:	mvn	r2, #3
   166a4:	add	r1, r1, #1
   166a8:	mov	r0, r4
   166ac:	bl	12f60 <main@@Base+0x100>
   166b0:	cmp	r0, #0
   166b4:	movne	r0, #0
   166b8:	beq	1666c <flatcc_builder_extend_union_vector@@Base+0x54>
   166bc:	b	16674 <flatcc_builder_extend_union_vector@@Base+0x5c>
   166c0:	andeq	r9, r1, r4, asr r7

000166c4 <flatcc_builder_truncate_union_vector@@Base>:
   166c4:	str	r4, [sp, #-8]!
   166c8:	str	lr, [sp, #4]
   166cc:	ldr	ip, [r0, #32]
   166d0:	ldrh	r3, [ip, #14]
   166d4:	cmp	r3, #7
   166d8:	bne	16728 <flatcc_builder_truncate_union_vector@@Base+0x64>
   166dc:	ldr	r3, [ip, #20]
   166e0:	cmp	r3, r1
   166e4:	bcc	16744 <flatcc_builder_truncate_union_vector@@Base+0x80>
   166e8:	sub	r3, r3, r1
   166ec:	str	r3, [ip, #20]
   166f0:	ldr	r3, [r0, #32]
   166f4:	ldr	r2, [r3, #16]
   166f8:	mul	r2, r2, r1
   166fc:	ldr	r3, [r0, #20]
   16700:	sub	r3, r3, r2
   16704:	str	r3, [r0, #20]
   16708:	ldr	r0, [r0, #16]
   1670c:	mov	r1, #0
   16710:	add	r0, r0, r3
   16714:	bl	122f4 <memset@plt>
   16718:	mov	r0, #0
   1671c:	ldr	r4, [sp]
   16720:	add	sp, sp, #4
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	ldr	r3, [pc, #48]	; 16760 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1672c:	movw	r2, #1665	; 0x681
   16730:	movw	r1, #39796	; 0x9b74
   16734:	movt	r1, #1
   16738:	movw	r0, #40568	; 0x9e78
   1673c:	movt	r0, #1
   16740:	bl	12324 <__assert_fail@plt>
   16744:	ldr	r3, [pc, #20]	; 16760 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16748:	movw	r2, #1666	; 0x682
   1674c:	movw	r1, #39796	; 0x9b74
   16750:	movt	r1, #1
   16754:	movw	r0, #40348	; 0x9d9c
   16758:	movt	r0, #1
   1675c:	bl	12324 <__assert_fail@plt>
   16760:	andeq	r9, r1, ip, lsl #20

00016764 <flatcc_builder_union_vector_push@@Base>:
   16764:	strd	r4, [sp, #-20]!	; 0xffffffec
   16768:	strd	r6, [sp, #8]
   1676c:	str	lr, [sp, #16]
   16770:	sub	sp, sp, #12
   16774:	add	r3, sp, #8
   16778:	stmdb	r3, {r1, r2}
   1677c:	ldr	r2, [r0, #32]
   16780:	ldrh	r3, [r2, #14]
   16784:	cmp	r3, #7
   16788:	bne	167e4 <flatcc_builder_union_vector_push@@Base+0x80>
   1678c:	mov	r4, r0
   16790:	ldr	r3, [r2, #20]
   16794:	cmn	r3, #-536870911	; 0xe0000001
   16798:	moveq	r0, #0
   1679c:	beq	167d0 <flatcc_builder_union_vector_push@@Base+0x6c>
   167a0:	add	r3, r3, #1
   167a4:	str	r3, [r2, #20]
   167a8:	ldr	r5, [r4, #20]
   167ac:	add	r3, r5, #8
   167b0:	str	r3, [r4, #20]
   167b4:	ldr	r2, [r4, #24]
   167b8:	cmp	r3, r2
   167bc:	bcs	16800 <flatcc_builder_union_vector_push@@Base+0x9c>
   167c0:	ldr	r3, [r4, #16]
   167c4:	adds	r0, r3, r5
   167c8:	ldrdne	r6, [sp]
   167cc:	strdne	r6, [r3, r5]
   167d0:	add	sp, sp, #12
   167d4:	ldrd	r4, [sp]
   167d8:	ldrd	r6, [sp, #8]
   167dc:	add	sp, sp, #16
   167e0:	pop	{pc}		; (ldr pc, [sp], #4)
   167e4:	ldr	r3, [pc, #52]	; 16820 <flatcc_builder_union_vector_push@@Base+0xbc>
   167e8:	movw	r2, #1677	; 0x68d
   167ec:	movw	r1, #39796	; 0x9b74
   167f0:	movt	r1, #1
   167f4:	movw	r0, #40568	; 0x9e78
   167f8:	movt	r0, #1
   167fc:	bl	12324 <__assert_fail@plt>
   16800:	mvn	r2, #3
   16804:	add	r1, r5, #9
   16808:	mov	r0, r4
   1680c:	bl	12f60 <main@@Base+0x100>
   16810:	cmp	r0, #0
   16814:	movne	r0, #0
   16818:	beq	167c0 <flatcc_builder_union_vector_push@@Base+0x5c>
   1681c:	b	167d0 <flatcc_builder_union_vector_push@@Base+0x6c>
   16820:	andeq	r9, r1, r4, lsr sl

00016824 <flatcc_builder_append_union_vector@@Base>:
   16824:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16828:	strd	r6, [sp, #8]
   1682c:	str	r8, [sp, #16]
   16830:	str	lr, [sp, #20]
   16834:	mov	r6, r1
   16838:	ldr	r1, [r0, #32]
   1683c:	ldrh	r3, [r1, #14]
   16840:	cmp	r3, #7
   16844:	bne	168c4 <flatcc_builder_append_union_vector@@Base+0xa0>
   16848:	mov	r5, r0
   1684c:	ldr	r3, [r1, #20]
   16850:	adds	r3, r2, r3
   16854:	movcs	ip, #1
   16858:	movcc	ip, #0
   1685c:	cmn	r3, #-536870911	; 0xe0000001
   16860:	movls	r0, #0
   16864:	movhi	r0, #1
   16868:	orrs	r0, ip, r0
   1686c:	bne	168e0 <flatcc_builder_append_union_vector@@Base+0xbc>
   16870:	str	r3, [r1, #20]
   16874:	lsl	r4, r2, #3
   16878:	ldr	r7, [r5, #20]
   1687c:	add	r1, r4, r7
   16880:	str	r1, [r5, #20]
   16884:	ldr	r3, [r5, #24]
   16888:	cmp	r1, r3
   1688c:	bcs	168fc <flatcc_builder_append_union_vector@@Base+0xd8>
   16890:	ldr	r5, [r5, #16]
   16894:	adds	r5, r5, r7
   16898:	beq	168ac <flatcc_builder_append_union_vector@@Base+0x88>
   1689c:	mov	r2, r4
   168a0:	mov	r1, r6
   168a4:	mov	r0, r5
   168a8:	bl	12294 <memcpy@plt>
   168ac:	mov	r0, r5
   168b0:	ldrd	r4, [sp]
   168b4:	ldrd	r6, [sp, #8]
   168b8:	ldr	r8, [sp, #16]
   168bc:	add	sp, sp, #20
   168c0:	pop	{pc}		; (ldr pc, [sp], #4)
   168c4:	ldr	r3, [pc, #80]	; 1691c <flatcc_builder_append_union_vector@@Base+0xf8>
   168c8:	movw	r2, #1692	; 0x69c
   168cc:	movw	r1, #39796	; 0x9b74
   168d0:	movt	r1, #1
   168d4:	movw	r0, #40568	; 0x9e78
   168d8:	movt	r0, #1
   168dc:	bl	12324 <__assert_fail@plt>
   168e0:	ldr	r3, [pc, #56]	; 16920 <flatcc_builder_append_union_vector@@Base+0xfc>
   168e4:	mov	r2, #892	; 0x37c
   168e8:	movw	r1, #39796	; 0x9b74
   168ec:	movt	r1, #1
   168f0:	movw	r0, #40080	; 0x9c90
   168f4:	movt	r0, #1
   168f8:	bl	12324 <__assert_fail@plt>
   168fc:	mvn	r2, #3
   16900:	add	r1, r1, #1
   16904:	mov	r0, r5
   16908:	bl	12f60 <main@@Base+0x100>
   1690c:	cmp	r0, #0
   16910:	movne	r5, #0
   16914:	beq	16890 <flatcc_builder_append_union_vector@@Base+0x6c>
   16918:	b	168ac <flatcc_builder_append_union_vector@@Base+0x88>
   1691c:	andeq	r9, r1, r8, asr sl
   16920:	andeq	r9, r1, r4, asr r7

00016924 <flatcc_builder_create_string@@Base>:
   16924:	strd	r4, [sp, #-16]!
   16928:	str	r6, [sp, #8]
   1692c:	str	lr, [sp, #12]
   16930:	sub	sp, sp, #88	; 0x58
   16934:	mov	r4, r0
   16938:	str	r2, [sp, #84]	; 0x54
   1693c:	ldr	r0, [r0, #136]	; 0x88
   16940:	sub	r3, r0, r2
   16944:	sub	r3, r3, #1
   16948:	and	r3, r3, #3
   1694c:	add	r3, r3, #1
   16950:	mov	ip, #4
   16954:	str	ip, [sp, #12]
   16958:	add	lr, sp, #84	; 0x54
   1695c:	str	lr, [sp, #20]
   16960:	str	ip, [sp, #24]
   16964:	mov	ip, #1
   16968:	str	ip, [sp, #16]
   1696c:	cmp	r2, #0
   16970:	beq	1698c <flatcc_builder_create_string@@Base+0x68>
   16974:	add	ip, r2, #4
   16978:	str	ip, [sp, #12]
   1697c:	str	r1, [sp, #28]
   16980:	str	r2, [sp, #32]
   16984:	mov	r2, #2
   16988:	str	r2, [sp, #16]
   1698c:	ldr	r1, [sp, #12]
   16990:	add	r1, r3, r1
   16994:	str	r1, [sp, #12]
   16998:	ldr	r2, [sp, #16]
   1699c:	add	r2, r2, #1
   169a0:	add	ip, sp, #88	; 0x58
   169a4:	add	lr, ip, r2, lsl #3
   169a8:	movw	ip, #37924	; 0x9424
   169ac:	movt	ip, #1
   169b0:	str	ip, [lr, #-76]	; 0xffffffb4
   169b4:	str	r3, [lr, #-72]	; 0xffffffb8
   169b8:	str	r2, [sp, #16]
   169bc:	sub	r5, r0, r1
   169c0:	cmp	r0, r5
   169c4:	ble	16a04 <flatcc_builder_create_string@@Base+0xe0>
   169c8:	str	r1, [sp]
   169cc:	ldr	r6, [r4, #44]	; 0x2c
   169d0:	mov	r3, r5
   169d4:	add	r1, sp, #20
   169d8:	ldr	r0, [r4, #36]	; 0x24
   169dc:	blx	r6
   169e0:	cmp	r0, #0
   169e4:	bne	16a20 <flatcc_builder_create_string@@Base+0xfc>
   169e8:	str	r5, [r4, #136]	; 0x88
   169ec:	mov	r0, r5
   169f0:	add	sp, sp, #88	; 0x58
   169f4:	ldrd	r4, [sp]
   169f8:	ldr	r6, [sp, #8]
   169fc:	add	sp, sp, #12
   16a00:	pop	{pc}		; (ldr pc, [sp], #4)
   16a04:	add	r3, ip, #588	; 0x24c
   16a08:	movw	r2, #647	; 0x287
   16a0c:	movw	r1, #39796	; 0x9b74
   16a10:	movt	r1, #1
   16a14:	movw	r0, #39880	; 0x9bc8
   16a18:	movt	r0, #1
   16a1c:	bl	12324 <__assert_fail@plt>
   16a20:	ldr	r3, [pc, #20]	; 16a3c <flatcc_builder_create_string@@Base+0x118>
   16a24:	movw	r2, #651	; 0x28b
   16a28:	movw	r1, #39796	; 0x9b74
   16a2c:	movt	r1, #1
   16a30:	movw	r0, #39880	; 0x9bc8
   16a34:	movt	r0, #1
   16a38:	bl	12324 <__assert_fail@plt>
   16a3c:	andeq	r9, r1, r0, ror r6

00016a40 <flatcc_builder_create_string_str@@Base>:
   16a40:	strd	r4, [sp, #-16]!
   16a44:	str	r6, [sp, #8]
   16a48:	str	lr, [sp, #12]
   16a4c:	mov	r5, r0
   16a50:	mov	r4, r1
   16a54:	mov	r0, r1
   16a58:	bl	122dc <strlen@plt>
   16a5c:	mov	r2, r0
   16a60:	mov	r1, r4
   16a64:	mov	r0, r5
   16a68:	bl	16924 <flatcc_builder_create_string@@Base>
   16a6c:	ldrd	r4, [sp]
   16a70:	ldr	r6, [sp, #8]
   16a74:	add	sp, sp, #12
   16a78:	pop	{pc}		; (ldr pc, [sp], #4)

00016a7c <flatcc_builder_create_string_strn@@Base>:
   16a7c:	strd	r4, [sp, #-16]!
   16a80:	str	r6, [sp, #8]
   16a84:	str	lr, [sp, #12]
   16a88:	mov	r6, r0
   16a8c:	mov	r4, r1
   16a90:	mov	r5, r2
   16a94:	mov	r1, #0
   16a98:	mov	r0, r4
   16a9c:	bl	1230c <memchr@plt>
   16aa0:	cmp	r0, #0
   16aa4:	subne	r5, r0, r4
   16aa8:	mov	r2, r5
   16aac:	mov	r1, r4
   16ab0:	mov	r0, r6
   16ab4:	bl	16924 <flatcc_builder_create_string@@Base>
   16ab8:	ldrd	r4, [sp]
   16abc:	ldr	r6, [sp, #8]
   16ac0:	add	sp, sp, #12
   16ac4:	pop	{pc}		; (ldr pc, [sp], #4)

00016ac8 <flatcc_builder_end_string@@Base>:
   16ac8:	strd	r4, [sp, #-16]!
   16acc:	str	r6, [sp, #8]
   16ad0:	str	lr, [sp, #12]
   16ad4:	ldr	r3, [r0, #32]
   16ad8:	ldrh	r2, [r3, #14]
   16adc:	cmp	r2, #6
   16ae0:	bne	16b1c <flatcc_builder_end_string@@Base+0x54>
   16ae4:	mov	r4, r0
   16ae8:	ldr	r2, [r0, #20]
   16aec:	ldr	r3, [r3, #20]
   16af0:	cmp	r3, r2
   16af4:	bne	16b38 <flatcc_builder_end_string@@Base+0x70>
   16af8:	ldr	r1, [r0, #16]
   16afc:	bl	16924 <flatcc_builder_create_string@@Base>
   16b00:	subs	r5, r0, #0
   16b04:	bne	16b54 <flatcc_builder_end_string@@Base+0x8c>
   16b08:	mov	r0, r5
   16b0c:	ldrd	r4, [sp]
   16b10:	ldr	r6, [sp, #8]
   16b14:	add	sp, sp, #12
   16b18:	pop	{pc}		; (ldr pc, [sp], #4)
   16b1c:	ldr	r3, [pc, #176]	; 16bd4 <flatcc_builder_end_string@@Base+0x10c>
   16b20:	movw	r2, #1732	; 0x6c4
   16b24:	movw	r1, #39796	; 0x9b74
   16b28:	movt	r1, #1
   16b2c:	movw	r0, #40268	; 0x9d4c
   16b30:	movt	r0, #1
   16b34:	bl	12324 <__assert_fail@plt>
   16b38:	ldr	r3, [pc, #148]	; 16bd4 <flatcc_builder_end_string@@Base+0x10c>
   16b3c:	movw	r2, #1733	; 0x6c5
   16b40:	movw	r1, #39796	; 0x9b74
   16b44:	movt	r1, #1
   16b48:	movw	r0, #40620	; 0x9eac
   16b4c:	movt	r0, #1
   16b50:	bl	12324 <__assert_fail@plt>
   16b54:	ldr	r2, [r4, #20]
   16b58:	mov	r1, #0
   16b5c:	ldr	r0, [r4, #16]
   16b60:	bl	122f4 <memset@plt>
   16b64:	ldr	r2, [r4, #32]
   16b68:	ldr	r3, [r2, #8]
   16b6c:	str	r3, [r4, #20]
   16b70:	ldr	r0, [r2]
   16b74:	str	r0, [r4, #28]
   16b78:	ldr	r1, [r2, #4]
   16b7c:	ldr	r3, [r4, #60]	; 0x3c
   16b80:	add	r3, r3, r0
   16b84:	str	r3, [r4, #16]
   16b88:	ldr	r3, [r4, #64]	; 0x40
   16b8c:	sub	r3, r3, r0
   16b90:	cmp	r3, r1
   16b94:	movcs	r3, r1
   16b98:	str	r3, [r4, #24]
   16b9c:	str	r1, [r2, #4]
   16ba0:	ldrh	r3, [r4, #130]	; 0x82
   16ba4:	ldrh	r2, [r4, #128]	; 0x80
   16ba8:	cmp	r2, r3
   16bac:	strhcc	r3, [r4, #128]	; 0x80
   16bb0:	ldr	r3, [r4, #32]
   16bb4:	ldrh	r2, [r3, #12]
   16bb8:	strh	r2, [r4, #130]	; 0x82
   16bbc:	sub	r3, r3, #36	; 0x24
   16bc0:	str	r3, [r4, #32]
   16bc4:	ldr	r3, [r4, #156]	; 0x9c
   16bc8:	sub	r3, r3, #1
   16bcc:	str	r3, [r4, #156]	; 0x9c
   16bd0:	b	16b08 <flatcc_builder_end_string@@Base+0x40>
   16bd4:	andeq	r9, r1, ip, ror sl

00016bd8 <flatcc_builder_string_edit@@Base>:
   16bd8:	ldr	r0, [r0, #16]
   16bdc:	bx	lr

00016be0 <flatcc_builder_string_len@@Base>:
   16be0:	ldr	r3, [r0, #32]
   16be4:	ldr	r0, [r3, #20]
   16be8:	bx	lr

00016bec <flatcc_builder_table_add@@Base>:
   16bec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16bf0:	strd	r6, [sp, #8]
   16bf4:	str	r8, [sp, #16]
   16bf8:	str	lr, [sp, #20]
   16bfc:	mov	r5, r1
   16c00:	ldr	r1, [r0, #32]
   16c04:	ldrh	r1, [r1, #14]
   16c08:	cmp	r1, #3
   16c0c:	bne	16ccc <flatcc_builder_table_add@@Base+0xe0>
   16c10:	mov	r4, r0
   16c14:	movw	r1, #32764	; 0x7ffc
   16c18:	cmp	r5, r1
   16c1c:	bhi	16ce8 <flatcc_builder_table_add@@Base+0xfc>
   16c20:	ldrh	r1, [r0, #130]	; 0x82
   16c24:	cmp	r1, r3
   16c28:	strhcc	r3, [r0, #130]	; 0x82
   16c2c:	ldr	r0, [r0, #4]
   16c30:	lsl	r1, r5, #1
   16c34:	ldrh	r1, [r0, r1]
   16c38:	cmp	r1, #0
   16c3c:	bne	16d04 <flatcc_builder_table_add@@Base+0x118>
   16c40:	ldr	r0, [r4, #12]
   16c44:	eor	r0, r0, r5
   16c48:	movw	r1, #31153	; 0x79b1
   16c4c:	movt	r1, #40503	; 0x9e37
   16c50:	mul	r0, r1, r0
   16c54:	eor	r0, r0, r2
   16c58:	mul	r0, r1, r0
   16c5c:	str	r0, [r4, #12]
   16c60:	uxth	r7, r5
   16c64:	sub	r6, r3, #1
   16c68:	ldr	r0, [r4, #20]
   16c6c:	add	r6, r6, r0
   16c70:	rsb	r3, r3, #0
   16c74:	and	r6, r6, r3
   16c78:	add	r1, r2, r6
   16c7c:	str	r1, [r4, #20]
   16c80:	ldr	r3, [r4, #24]
   16c84:	cmp	r1, r3
   16c88:	bcs	16d20 <flatcc_builder_table_add@@Base+0x134>
   16c8c:	uxth	r5, r5
   16c90:	ldr	r3, [r4, #4]
   16c94:	lsl	r5, r5, #1
   16c98:	add	r2, r6, #4
   16c9c:	strh	r2, [r3, r5]
   16ca0:	ldrh	r3, [r4, #8]
   16ca4:	cmp	r3, r7
   16ca8:	addls	r7, r7, #1
   16cac:	strhls	r7, [r4, #8]
   16cb0:	ldr	r0, [r4, #16]
   16cb4:	add	r0, r0, r6
   16cb8:	ldrd	r4, [sp]
   16cbc:	ldrd	r6, [sp, #8]
   16cc0:	ldr	r8, [sp, #16]
   16cc4:	add	sp, sp, #20
   16cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ccc:	ldr	r3, [pc, #108]	; 16d40 <flatcc_builder_table_add@@Base+0x154>
   16cd0:	movw	r2, #1773	; 0x6ed
   16cd4:	movw	r1, #39796	; 0x9b74
   16cd8:	movt	r1, #1
   16cdc:	movw	r0, #40504	; 0x9e38
   16ce0:	movt	r0, #1
   16ce4:	bl	12324 <__assert_fail@plt>
   16ce8:	ldr	r3, [pc, #80]	; 16d40 <flatcc_builder_table_add@@Base+0x154>
   16cec:	movw	r2, #1774	; 0x6ee
   16cf0:	movw	r1, #39796	; 0x9b74
   16cf4:	movt	r1, #1
   16cf8:	movw	r0, #40656	; 0x9ed0
   16cfc:	movt	r0, #1
   16d00:	bl	12324 <__assert_fail@plt>
   16d04:	ldr	r3, [pc, #52]	; 16d40 <flatcc_builder_table_add@@Base+0x154>
   16d08:	movw	r2, #1784	; 0x6f8
   16d0c:	movw	r1, #39796	; 0x9b74
   16d10:	movt	r1, #1
   16d14:	movw	r0, #39880	; 0x9bc8
   16d18:	movt	r0, #1
   16d1c:	bl	12324 <__assert_fail@plt>
   16d20:	movw	r2, #65532	; 0xfffc
   16d24:	add	r1, r1, #1
   16d28:	mov	r0, r4
   16d2c:	bl	12f60 <main@@Base+0x100>
   16d30:	cmp	r0, #0
   16d34:	movne	r0, #0
   16d38:	beq	16c8c <flatcc_builder_table_add@@Base+0xa0>
   16d3c:	b	16cb8 <flatcc_builder_table_add@@Base+0xcc>
   16d40:	muleq	r1, r8, sl

00016d44 <flatcc_builder_table_edit@@Base>:
   16d44:	ldr	r2, [r0, #32]
   16d48:	ldrh	r2, [r2, #14]
   16d4c:	cmp	r2, #3
   16d50:	bne	16d68 <flatcc_builder_table_edit@@Base+0x24>
   16d54:	ldr	r3, [r0, #20]
   16d58:	sub	r3, r3, r1
   16d5c:	ldr	r0, [r0, #16]
   16d60:	add	r0, r0, r3
   16d64:	bx	lr
   16d68:	str	r4, [sp, #-8]!
   16d6c:	str	lr, [sp, #4]
   16d70:	ldr	r3, [pc, #20]	; 16d8c <flatcc_builder_table_edit@@Base+0x48>
   16d74:	movw	r2, #1794	; 0x702
   16d78:	movw	r1, #39796	; 0x9b74
   16d7c:	movt	r1, #1
   16d80:	movw	r0, #40504	; 0x9e38
   16d84:	movt	r0, #1
   16d88:	bl	12324 <__assert_fail@plt>
   16d8c:			; <UNDEFINED> instruction: 0x00019ab4

00016d90 <flatcc_builder_table_add_copy@@Base>:
   16d90:	strd	r4, [sp, #-16]!
   16d94:	str	r6, [sp, #8]
   16d98:	str	lr, [sp, #12]
   16d9c:	mov	r6, r2
   16da0:	mov	r5, r3
   16da4:	ldrh	r3, [sp, #16]
   16da8:	mov	r2, r5
   16dac:	bl	16bec <flatcc_builder_table_add@@Base>
   16db0:	subs	r4, r0, #0
   16db4:	beq	16dc8 <flatcc_builder_table_add_copy@@Base+0x38>
   16db8:	mov	r2, r5
   16dbc:	mov	r1, r6
   16dc0:	mov	r0, r4
   16dc4:	bl	12294 <memcpy@plt>
   16dc8:	mov	r0, r4
   16dcc:	ldrd	r4, [sp]
   16dd0:	ldr	r6, [sp, #8]
   16dd4:	add	sp, sp, #12
   16dd8:	pop	{pc}		; (ldr pc, [sp], #4)

00016ddc <flatcc_builder_table_add_offset@@Base>:
   16ddc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16de0:	strd	r6, [sp, #8]
   16de4:	str	r8, [sp, #16]
   16de8:	str	lr, [sp, #20]
   16dec:	ldr	r3, [r0, #32]
   16df0:	ldrh	r3, [r3, #14]
   16df4:	cmp	r3, #3
   16df8:	bne	16ebc <flatcc_builder_table_add_offset@@Base+0xe0>
   16dfc:	mov	r4, r0
   16e00:	mov	r5, r1
   16e04:	movw	r3, #32764	; 0x7ffc
   16e08:	cmp	r1, r3
   16e0c:	bhi	16ed8 <flatcc_builder_table_add_offset@@Base+0xfc>
   16e10:	ldr	r2, [r0, #4]
   16e14:	lsl	r3, r1, #1
   16e18:	ldrh	r3, [r2, r3]
   16e1c:	cmp	r3, #0
   16e20:	bne	16ef4 <flatcc_builder_table_add_offset@@Base+0x118>
   16e24:	ldr	r3, [r0, #12]
   16e28:	eor	r3, r3, r1
   16e2c:	movw	r2, #31153	; 0x79b1
   16e30:	movt	r2, #40503	; 0x9e37
   16e34:	mul	r3, r2, r3
   16e38:	eor	r3, r3, #4
   16e3c:	mul	r3, r2, r3
   16e40:	str	r3, [r0, #12]
   16e44:	uxth	r7, r1
   16e48:	ldr	r6, [r0, #20]
   16e4c:	add	r6, r6, #3
   16e50:	bic	r6, r6, #3
   16e54:	add	r1, r6, #4
   16e58:	str	r1, [r0, #20]
   16e5c:	ldr	r3, [r0, #24]
   16e60:	cmp	r1, r3
   16e64:	bhi	16f10 <flatcc_builder_table_add_offset@@Base+0x134>
   16e68:	uxth	r2, r6
   16e6c:	uxth	r5, r5
   16e70:	ldr	r3, [r4, #4]
   16e74:	lsl	r5, r5, #1
   16e78:	add	r1, r2, #4
   16e7c:	strh	r1, [r3, r5]
   16e80:	ldrh	r3, [r4, #8]
   16e84:	cmp	r3, r7
   16e88:	addls	r7, r7, #1
   16e8c:	strhls	r7, [r4, #8]
   16e90:	ldr	r3, [r4]
   16e94:	add	r1, r3, #2
   16e98:	str	r1, [r4]
   16e9c:	strh	r2, [r3]
   16ea0:	ldr	r0, [r4, #16]
   16ea4:	add	r0, r0, r6
   16ea8:	ldrd	r4, [sp]
   16eac:	ldrd	r6, [sp, #8]
   16eb0:	ldr	r8, [sp, #16]
   16eb4:	add	sp, sp, #20
   16eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ebc:	ldr	r3, [pc, #100]	; 16f28 <flatcc_builder_table_add_offset@@Base+0x14c>
   16ec0:	movw	r2, #1811	; 0x713
   16ec4:	movw	r1, #39796	; 0x9b74
   16ec8:	movt	r1, #1
   16ecc:	movw	r0, #40504	; 0x9e38
   16ed0:	movt	r0, #1
   16ed4:	bl	12324 <__assert_fail@plt>
   16ed8:	ldr	r3, [pc, #72]	; 16f28 <flatcc_builder_table_add_offset@@Base+0x14c>
   16edc:	movw	r2, #1812	; 0x714
   16ee0:	movw	r1, #39796	; 0x9b74
   16ee4:	movt	r1, #1
   16ee8:	movw	r0, #40656	; 0x9ed0
   16eec:	movt	r0, #1
   16ef0:	bl	12324 <__assert_fail@plt>
   16ef4:	ldr	r3, [pc, #44]	; 16f28 <flatcc_builder_table_add_offset@@Base+0x14c>
   16ef8:	movw	r2, #1819	; 0x71b
   16efc:	movw	r1, #39796	; 0x9b74
   16f00:	movt	r1, #1
   16f04:	movw	r0, #39880	; 0x9bc8
   16f08:	movt	r0, #1
   16f0c:	bl	12324 <__assert_fail@plt>
   16f10:	movw	r2, #65532	; 0xfffc
   16f14:	bl	12f60 <main@@Base+0x100>
   16f18:	cmp	r0, #0
   16f1c:	movne	r0, #0
   16f20:	beq	16e68 <flatcc_builder_table_add_offset@@Base+0x8c>
   16f24:	b	16ea8 <flatcc_builder_table_add_offset@@Base+0xcc>
   16f28:	ldrdeq	r9, [r1], -r0

00016f2c <flatcc_builder_table_add_union@@Base>:
   16f2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16f30:	strd	r6, [sp, #8]
   16f34:	str	lr, [sp, #16]
   16f38:	sub	sp, sp, #12
   16f3c:	mov	r7, r1
   16f40:	add	r1, sp, #8
   16f44:	stmdb	r1, {r2, r3}
   16f48:	ldrb	r6, [sp]
   16f4c:	ldr	r5, [sp, #4]
   16f50:	ldr	r3, [r0, #32]
   16f54:	ldrh	r3, [r3, #14]
   16f58:	cmp	r3, #3
   16f5c:	bne	16fd0 <flatcc_builder_table_add_union@@Base+0xa4>
   16f60:	mov	r4, r0
   16f64:	clz	r3, r6
   16f68:	lsr	r3, r3, #5
   16f6c:	cmp	r5, #0
   16f70:	moveq	r3, #0
   16f74:	cmp	r3, #0
   16f78:	bne	16fec <flatcc_builder_table_add_union@@Base+0xc0>
   16f7c:	cmp	r5, #0
   16f80:	beq	16f98 <flatcc_builder_table_add_union@@Base+0x6c>
   16f84:	mov	r1, r7
   16f88:	bl	16ddc <flatcc_builder_table_add_offset@@Base>
   16f8c:	cmp	r0, #0
   16f90:	strne	r5, [r0]
   16f94:	beq	17008 <flatcc_builder_table_add_union@@Base+0xdc>
   16f98:	mov	r3, #1
   16f9c:	mov	r2, r3
   16fa0:	sub	r1, r7, #1
   16fa4:	mov	r0, r4
   16fa8:	bl	16bec <flatcc_builder_table_add@@Base>
   16fac:	cmp	r0, #0
   16fb0:	beq	17024 <flatcc_builder_table_add_union@@Base+0xf8>
   16fb4:	strb	r6, [r0]
   16fb8:	mov	r0, #0
   16fbc:	add	sp, sp, #12
   16fc0:	ldrd	r4, [sp]
   16fc4:	ldrd	r6, [sp, #8]
   16fc8:	add	sp, sp, #16
   16fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd0:	ldr	r3, [pc, #104]	; 17040 <flatcc_builder_table_add_union@@Base+0x114>
   16fd4:	movw	r2, #1518	; 0x5ee
   16fd8:	movw	r1, #39796	; 0x9b74
   16fdc:	movt	r1, #1
   16fe0:	movw	r0, #40504	; 0x9e38
   16fe4:	movt	r0, #1
   16fe8:	bl	12324 <__assert_fail@plt>
   16fec:	ldr	r3, [pc, #76]	; 17040 <flatcc_builder_table_add_union@@Base+0x114>
   16ff0:	movw	r2, #1519	; 0x5ef
   16ff4:	movw	r1, #39796	; 0x9b74
   16ff8:	movt	r1, #1
   16ffc:	movw	r0, #40724	; 0x9f14
   17000:	movt	r0, #1
   17004:	bl	12324 <__assert_fail@plt>
   17008:	ldr	r3, [pc, #48]	; 17040 <flatcc_builder_table_add_union@@Base+0x114>
   1700c:	movw	r2, #1522	; 0x5f2
   17010:	movw	r1, #39796	; 0x9b74
   17014:	movt	r1, #1
   17018:	movw	r0, #40760	; 0x9f38
   1701c:	movt	r0, #1
   17020:	bl	12324 <__assert_fail@plt>
   17024:	ldr	r3, [pc, #20]	; 17040 <flatcc_builder_table_add_union@@Base+0x114>
   17028:	movw	r2, #1526	; 0x5f6
   1702c:	movw	r1, #39796	; 0x9b74
   17030:	movt	r1, #1
   17034:	movw	r0, #40772	; 0x9f44
   17038:	movt	r0, #1
   1703c:	bl	12324 <__assert_fail@plt>
   17040:	strdeq	r9, [r1], -r0

00017044 <flatcc_builder_table_add_union_vector@@Base>:
   17044:	strd	r4, [sp, #-20]!	; 0xffffffec
   17048:	strd	r6, [sp, #8]
   1704c:	str	lr, [sp, #16]
   17050:	sub	sp, sp, #12
   17054:	mov	r7, r1
   17058:	add	r1, sp, #8
   1705c:	stmdb	r1, {r2, r3}
   17060:	ldr	r4, [sp]
   17064:	ldr	r6, [sp, #4]
   17068:	ldr	r3, [r0, #32]
   1706c:	ldrh	r3, [r3, #14]
   17070:	cmp	r3, #3
   17074:	bne	170c0 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   17078:	mov	r5, r0
   1707c:	clz	r3, r6
   17080:	lsr	r3, r3, #5
   17084:	clz	r2, r4
   17088:	lsr	r2, r2, #5
   1708c:	cmp	r2, r3
   17090:	beq	170f8 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   17094:	adds	r4, r4, #0
   17098:	movne	r4, #1
   1709c:	cmp	r4, r3
   170a0:	mvnne	r4, #0
   170a4:	beq	170dc <flatcc_builder_table_add_union_vector@@Base+0x98>
   170a8:	mov	r0, r4
   170ac:	add	sp, sp, #12
   170b0:	ldrd	r4, [sp]
   170b4:	ldrd	r6, [sp, #8]
   170b8:	add	sp, sp, #16
   170bc:	pop	{pc}		; (ldr pc, [sp], #4)
   170c0:	ldr	r3, [pc, #160]	; 17168 <flatcc_builder_table_add_union_vector@@Base+0x124>
   170c4:	mov	r2, #1536	; 0x600
   170c8:	movw	r1, #39796	; 0x9b74
   170cc:	movt	r1, #1
   170d0:	movw	r0, #40504	; 0x9e38
   170d4:	movt	r0, #1
   170d8:	bl	12324 <__assert_fail@plt>
   170dc:	ldr	r3, [pc, #132]	; 17168 <flatcc_builder_table_add_union_vector@@Base+0x124>
   170e0:	movw	r2, #1537	; 0x601
   170e4:	movw	r1, #39796	; 0x9b74
   170e8:	movt	r1, #1
   170ec:	movw	r0, #40784	; 0x9f50
   170f0:	movt	r0, #1
   170f4:	bl	12324 <__assert_fail@plt>
   170f8:	cmp	r4, #0
   170fc:	beq	170a8 <flatcc_builder_table_add_union_vector@@Base+0x64>
   17100:	sub	r1, r7, #1
   17104:	bl	16ddc <flatcc_builder_table_add_offset@@Base>
   17108:	cmp	r0, #0
   1710c:	beq	1714c <flatcc_builder_table_add_union_vector@@Base+0x108>
   17110:	str	r4, [r0]
   17114:	mov	r1, r7
   17118:	mov	r0, r5
   1711c:	bl	16ddc <flatcc_builder_table_add_offset@@Base>
   17120:	cmp	r0, #0
   17124:	strne	r6, [r0]
   17128:	movne	r4, #0
   1712c:	bne	170a8 <flatcc_builder_table_add_union_vector@@Base+0x64>
   17130:	ldr	r3, [pc, #48]	; 17168 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17134:	movw	r2, #1544	; 0x608
   17138:	movw	r1, #39796	; 0x9b74
   1713c:	movt	r1, #1
   17140:	movw	r0, #40760	; 0x9f38
   17144:	movt	r0, #1
   17148:	bl	12324 <__assert_fail@plt>
   1714c:	ldr	r3, [pc, #20]	; 17168 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17150:	movw	r2, #1540	; 0x604
   17154:	movw	r1, #39796	; 0x9b74
   17158:	movt	r1, #1
   1715c:	movw	r0, #40760	; 0x9f38
   17160:	movt	r0, #1
   17164:	bl	12324 <__assert_fail@plt>
   17168:	andeq	r9, r1, r0, lsl fp

0001716c <flatcc_builder_push_buffer_alignment@@Base>:
   1716c:	mov	r3, r0
   17170:	ldrh	r0, [r0, #128]	; 0x80
   17174:	mov	r2, #4
   17178:	strh	r2, [r3, #128]	; 0x80
   1717c:	bx	lr

00017180 <flatcc_builder_pop_buffer_alignment@@Base>:
   17180:	ldrh	r3, [r0, #128]	; 0x80
   17184:	cmp	r3, r1
   17188:	strhcc	r1, [r0, #128]	; 0x80
   1718c:	bx	lr

00017190 <flatcc_builder_get_buffer_alignment@@Base>:
   17190:	ldrh	r0, [r0, #128]	; 0x80
   17194:	bx	lr

00017198 <flatcc_builder_set_vtable_clustering@@Base>:
   17198:	clz	r1, r1
   1719c:	lsr	r1, r1, #5
   171a0:	str	r1, [r0, #180]	; 0xb4
   171a4:	bx	lr

000171a8 <flatcc_builder_set_block_align@@Base>:
   171a8:	strh	r1, [r0, #132]	; 0x84
   171ac:	bx	lr

000171b0 <flatcc_builder_get_level@@Base>:
   171b0:	ldr	r0, [r0, #156]	; 0x9c
   171b4:	bx	lr

000171b8 <flatcc_builder_set_max_level@@Base>:
   171b8:	str	r1, [r0, #176]	; 0xb0
   171bc:	ldr	r3, [r0, #160]	; 0xa0
   171c0:	cmp	r3, r1
   171c4:	strlt	r1, [r0, #160]	; 0xa0
   171c8:	bx	lr

000171cc <flatcc_builder_get_buffer_size@@Base>:
   171cc:	ldr	r2, [r0, #140]	; 0x8c
   171d0:	ldr	r0, [r0, #136]	; 0x88
   171d4:	sub	r0, r2, r0
   171d8:	bx	lr

000171dc <flatcc_builder_get_buffer_start@@Base>:
   171dc:	ldr	r0, [r0, #136]	; 0x88
   171e0:	bx	lr

000171e4 <flatcc_builder_get_buffer_end@@Base>:
   171e4:	ldr	r0, [r0, #140]	; 0x8c
   171e8:	bx	lr

000171ec <flatcc_builder_set_vtable_cache_limit@@Base>:
   171ec:	str	r1, [r0, #172]	; 0xac
   171f0:	bx	lr

000171f4 <flatcc_builder_set_identifier@@Base>:
   171f4:	movw	r3, #37924	; 0x9424
   171f8:	movt	r3, #1
   171fc:	cmp	r1, #0
   17200:	moveq	r1, r3
   17204:	ldr	r3, [r1]
   17208:	str	r3, [r0, #168]	; 0xa8
   1720c:	bx	lr

00017210 <flatcc_builder_get_type@@Base>:
   17210:	ldr	r3, [r0, #32]
   17214:	cmp	r3, #0
   17218:	ldrhne	r0, [r3, #14]
   1721c:	moveq	r0, #0
   17220:	bx	lr

00017224 <flatcc_builder_get_type_at@@Base>:
   17224:	cmp	r1, #0
   17228:	ble	17250 <flatcc_builder_get_type_at@@Base+0x2c>
   1722c:	ldr	r3, [r0, #156]	; 0x9c
   17230:	cmp	r3, r1
   17234:	blt	17258 <flatcc_builder_get_type_at@@Base+0x34>
   17238:	sub	r1, r1, r3
   1723c:	ldr	r3, [r0, #32]
   17240:	add	r1, r1, r1, lsl #3
   17244:	add	r1, r3, r1, lsl #2
   17248:	ldrh	r0, [r1, #14]
   1724c:	bx	lr
   17250:	mov	r0, #0
   17254:	bx	lr
   17258:	mov	r0, #0
   1725c:	bx	lr

00017260 <flatcc_builder_get_direct_buffer@@Base>:
   17260:	ldr	r3, [r0, #184]	; 0xb8
   17264:	cmp	r3, #0
   17268:	bne	17280 <flatcc_builder_get_direct_buffer@@Base+0x20>
   1726c:	cmp	r1, #0
   17270:	beq	172c0 <flatcc_builder_get_direct_buffer@@Base+0x60>
   17274:	mov	r0, #0
   17278:	str	r0, [r1]
   1727c:	bx	lr
   17280:	ldr	r2, [r0, #188]	; 0xbc
   17284:	ldr	r3, [r0, #192]	; 0xc0
   17288:	cmp	r2, r3
   1728c:	beq	172a4 <flatcc_builder_get_direct_buffer@@Base+0x44>
   17290:	cmp	r1, #0
   17294:	beq	172b8 <flatcc_builder_get_direct_buffer@@Base+0x58>
   17298:	mov	r0, #0
   1729c:	str	r0, [r1]
   172a0:	bx	lr
   172a4:	cmp	r1, #0
   172a8:	ldrne	r3, [r0, #212]	; 0xd4
   172ac:	strne	r3, [r1]
   172b0:	ldr	r0, [r0, #196]	; 0xc4
   172b4:	bx	lr
   172b8:	mov	r0, r1
   172bc:	bx	lr
   172c0:	mov	r0, r1
   172c4:	bx	lr

000172c8 <flatcc_builder_copy_buffer@@Base>:
   172c8:	ldr	r3, [r0, #184]	; 0xb8
   172cc:	cmp	r3, #0
   172d0:	beq	17314 <flatcc_builder_copy_buffer@@Base+0x4c>
   172d4:	str	r4, [sp, #-8]!
   172d8:	str	lr, [sp, #4]
   172dc:	add	r0, r0, #188	; 0xbc
   172e0:	bl	17a84 <flatcc_emitter_copy_buffer@@Base>
   172e4:	cmp	r0, #0
   172e8:	beq	172f8 <flatcc_builder_copy_buffer@@Base+0x30>
   172ec:	ldr	r4, [sp]
   172f0:	add	sp, sp, #4
   172f4:	pop	{pc}		; (ldr pc, [sp], #4)
   172f8:	ldr	r3, [pc, #28]	; 1731c <flatcc_builder_copy_buffer@@Base+0x54>
   172fc:	movw	r2, #1926	; 0x786
   17300:	movw	r1, #39796	; 0x9b74
   17304:	movt	r1, #1
   17308:	movw	r0, #40824	; 0x9f78
   1730c:	movt	r0, #1
   17310:	bl	12324 <__assert_fail@plt>
   17314:	mov	r0, #0
   17318:	bx	lr
   1731c:	andeq	r9, r1, r8, lsr fp

00017320 <flatcc_builder_finalize_buffer@@Base>:
   17320:	strd	r4, [sp, #-16]!
   17324:	str	r6, [sp, #8]
   17328:	str	lr, [sp, #12]
   1732c:	mov	r5, r0
   17330:	ldr	r4, [r0, #140]	; 0x8c
   17334:	ldr	r3, [r0, #136]	; 0x88
   17338:	sub	r4, r4, r3
   1733c:	cmp	r1, #0
   17340:	strne	r4, [r1]
   17344:	mov	r0, r4
   17348:	bl	122b8 <malloc@plt>
   1734c:	subs	r6, r0, #0
   17350:	beq	17380 <flatcc_builder_finalize_buffer@@Base+0x60>
   17354:	mov	r2, r4
   17358:	mov	r1, r6
   1735c:	mov	r0, r5
   17360:	bl	172c8 <flatcc_builder_copy_buffer@@Base>
   17364:	cmp	r0, #0
   17368:	beq	1739c <flatcc_builder_finalize_buffer@@Base+0x7c>
   1736c:	mov	r0, r6
   17370:	ldrd	r4, [sp]
   17374:	ldr	r6, [sp, #8]
   17378:	add	sp, sp, #12
   1737c:	pop	{pc}		; (ldr pc, [sp], #4)
   17380:	ldr	r3, [pc, #48]	; 173b8 <flatcc_builder_finalize_buffer@@Base+0x98>
   17384:	movw	r2, #1944	; 0x798
   17388:	movw	r1, #39796	; 0x9b74
   1738c:	movt	r1, #1
   17390:	movw	r0, #39880	; 0x9bc8
   17394:	movt	r0, #1
   17398:	bl	12324 <__assert_fail@plt>
   1739c:	ldr	r3, [pc, #20]	; 173b8 <flatcc_builder_finalize_buffer@@Base+0x98>
   173a0:	movw	r2, #1948	; 0x79c
   173a4:	movw	r1, #39796	; 0x9b74
   173a8:	movt	r1, #1
   173ac:	movw	r0, #39880	; 0x9bc8
   173b0:	movt	r0, #1
   173b4:	bl	12324 <__assert_fail@plt>
   173b8:	andeq	r9, r1, r4, asr fp

000173bc <flatcc_builder_finalize_aligned_buffer@@Base>:
   173bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   173c0:	strd	r6, [sp, #8]
   173c4:	str	lr, [sp, #16]
   173c8:	sub	sp, sp, #12
   173cc:	mov	r7, r0
   173d0:	ldr	r4, [r0, #140]	; 0x8c
   173d4:	ldr	r3, [r0, #136]	; 0x88
   173d8:	sub	r3, r4, r3
   173dc:	subs	r6, r1, #0
   173e0:	strne	r3, [r6]
   173e4:	ldrh	r1, [r0, #128]	; 0x80
   173e8:	sub	r4, r1, #1
   173ec:	add	r4, r4, r3
   173f0:	rsb	r3, r1, #0
   173f4:	and	r4, r4, r3
   173f8:	mov	r3, #0
   173fc:	str	r3, [sp, #4]
   17400:	mov	r2, r4
   17404:	cmp	r1, #4
   17408:	movcc	r1, #4
   1740c:	add	r0, sp, #4
   17410:	bl	122e8 <posix_memalign@plt>
   17414:	cmp	r0, #0
   17418:	beq	17440 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   1741c:	ldr	r0, [sp, #4]
   17420:	cmp	r0, #0
   17424:	beq	1742c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   17428:	bl	12288 <free@plt>
   1742c:	cmp	r6, #0
   17430:	movne	r5, #0
   17434:	strne	r5, [r6]
   17438:	moveq	r5, r6
   1743c:	b	17464 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   17440:	ldr	r5, [sp, #4]
   17444:	cmp	r5, #0
   17448:	beq	1742c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   1744c:	mov	r2, r4
   17450:	mov	r1, r5
   17454:	mov	r0, r7
   17458:	bl	172c8 <flatcc_builder_copy_buffer@@Base>
   1745c:	cmp	r0, #0
   17460:	beq	1747c <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   17464:	mov	r0, r5
   17468:	add	sp, sp, #12
   1746c:	ldrd	r4, [sp]
   17470:	ldrd	r6, [sp, #8]
   17474:	add	sp, sp, #16
   17478:	pop	{pc}		; (ldr pc, [sp], #4)
   1747c:	mov	r0, r5
   17480:	bl	12288 <free@plt>
   17484:	b	1742c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

00017488 <flatcc_builder_aligned_alloc@@Base>:
   17488:	push	{lr}		; (str lr, [sp, #-4]!)
   1748c:	sub	sp, sp, #12
   17490:	mov	r3, #0
   17494:	str	r3, [sp, #4]
   17498:	mov	r2, r1
   1749c:	cmp	r0, #4
   174a0:	movcs	r1, r0
   174a4:	movcc	r1, #4
   174a8:	add	r0, sp, #4
   174ac:	bl	122e8 <posix_memalign@plt>
   174b0:	cmp	r0, #0
   174b4:	beq	174d0 <flatcc_builder_aligned_alloc@@Base+0x48>
   174b8:	ldr	r0, [sp, #4]
   174bc:	cmp	r0, #0
   174c0:	beq	174d0 <flatcc_builder_aligned_alloc@@Base+0x48>
   174c4:	bl	12288 <free@plt>
   174c8:	mov	r3, #0
   174cc:	str	r3, [sp, #4]
   174d0:	ldr	r0, [sp, #4]
   174d4:	add	sp, sp, #12
   174d8:	pop	{pc}		; (ldr pc, [sp], #4)

000174dc <flatcc_builder_aligned_free@@Base>:
   174dc:	str	r4, [sp, #-8]!
   174e0:	str	lr, [sp, #4]
   174e4:	bl	12288 <free@plt>
   174e8:	ldr	r4, [sp]
   174ec:	add	sp, sp, #4
   174f0:	pop	{pc}		; (ldr pc, [sp], #4)

000174f4 <flatcc_builder_get_emit_context@@Base>:
   174f4:	ldr	r0, [r0, #36]	; 0x24
   174f8:	bx	lr

000174fc <flatcc_emitter_recycle_page@@Base>:
   174fc:	ldr	r3, [r0]
   17500:	cmp	r3, r1
   17504:	beq	17550 <flatcc_emitter_recycle_page@@Base+0x54>
   17508:	ldr	r3, [r0, #4]
   1750c:	cmp	r3, r1
   17510:	beq	17558 <flatcc_emitter_recycle_page@@Base+0x5c>
   17514:	ldr	r2, [r1, #2944]	; 0xb80
   17518:	ldr	r3, [r1, #2948]	; 0xb84
   1751c:	str	r3, [r2, #2948]	; 0xb84
   17520:	ldr	r2, [r1, #2944]	; 0xb80
   17524:	str	r2, [r3, #2944]	; 0xb80
   17528:	ldr	r3, [r0]
   1752c:	ldr	r3, [r3, #2948]	; 0xb84
   17530:	str	r3, [r1, #2948]	; 0xb84
   17534:	ldr	r2, [r0]
   17538:	str	r2, [r1, #2944]	; 0xb80
   1753c:	str	r1, [r3, #2944]	; 0xb80
   17540:	ldr	r3, [r1, #2944]	; 0xb80
   17544:	str	r1, [r3, #2948]	; 0xb84
   17548:	mov	r0, #0
   1754c:	bx	lr
   17550:	mvn	r0, #0
   17554:	bx	lr
   17558:	mvn	r0, #0
   1755c:	bx	lr

00017560 <flatcc_emitter_reset@@Base>:
   17560:	ldr	r3, [r0]
   17564:	cmp	r3, #0
   17568:	bxeq	lr
   1756c:	str	r3, [r0, #4]
   17570:	add	r2, r3, #1472	; 0x5c0
   17574:	str	r2, [r0, #8]
   17578:	str	r2, [r0, #16]
   1757c:	mov	r2, #1472	; 0x5c0
   17580:	str	r2, [r0, #12]
   17584:	str	r2, [r0, #20]
   17588:	movw	r2, #64064	; 0xfa40
   1758c:	movt	r2, #65535	; 0xffff
   17590:	str	r2, [r3, #2952]	; 0xb88
   17594:	ldr	r3, [r0, #32]
   17598:	cmp	r3, #0
   1759c:	ldreq	r3, [r0, #24]
   175a0:	streq	r3, [r0, #32]
   175a4:	ldr	r3, [r0, #32]
   175a8:	add	r2, r3, r3, lsl #1
   175ac:	ldr	r3, [r0, #24]
   175b0:	lsr	r3, r3, #2
   175b4:	add	r3, r3, r2, lsr #2
   175b8:	str	r3, [r0, #32]
   175bc:	mov	r2, #0
   175c0:	str	r2, [r0, #24]
   175c4:	ldr	r2, [r0, #28]
   175c8:	cmp	r2, r3, lsl #1
   175cc:	bxls	lr
   175d0:	str	r4, [sp, #-8]!
   175d4:	str	lr, [sp, #4]
   175d8:	mov	r4, r0
   175dc:	ldr	r3, [r0, #4]
   175e0:	ldr	r0, [r3, #2944]	; 0xb80
   175e4:	ldr	r2, [r4]
   175e8:	cmp	r0, r2
   175ec:	beq	17630 <flatcc_emitter_reset@@Base+0xd0>
   175f0:	ldr	r2, [r0, #2944]	; 0xb80
   175f4:	str	r2, [r3, #2944]	; 0xb80
   175f8:	ldr	r3, [r4, #4]
   175fc:	str	r3, [r2, #2948]	; 0xb84
   17600:	bl	12288 <free@plt>
   17604:	ldr	r3, [r4, #28]
   17608:	sub	r3, r3, #2944	; 0xb80
   1760c:	str	r3, [r4, #28]
   17610:	ldr	r2, [r4, #32]
   17614:	cmp	r3, r2, lsl #1
   17618:	bls	17630 <flatcc_emitter_reset@@Base+0xd0>
   1761c:	ldr	r3, [r4, #4]
   17620:	ldr	r0, [r3, #2944]	; 0xb80
   17624:	ldr	r2, [r4]
   17628:	cmp	r0, r2
   1762c:	bne	175f0 <flatcc_emitter_reset@@Base+0x90>
   17630:	ldr	r4, [sp]
   17634:	add	sp, sp, #4
   17638:	pop	{pc}		; (ldr pc, [sp], #4)

0001763c <flatcc_emitter_clear@@Base>:
   1763c:	ldr	r3, [r0]
   17640:	cmp	r3, #0
   17644:	bxeq	lr
   17648:	strd	r4, [sp, #-16]!
   1764c:	str	r6, [sp, #8]
   17650:	str	lr, [sp, #12]
   17654:	mov	r5, r0
   17658:	ldr	r2, [r3, #2948]	; 0xb84
   1765c:	mov	r1, #0
   17660:	str	r1, [r2, #2944]	; 0xb80
   17664:	ldr	r4, [r3, #2944]	; 0xb80
   17668:	cmp	r4, r1
   1766c:	bne	1767c <flatcc_emitter_clear@@Base+0x40>
   17670:	mov	r4, r3
   17674:	b	17690 <flatcc_emitter_clear@@Base+0x54>
   17678:	mov	r4, r3
   1767c:	ldr	r0, [r4, #2948]	; 0xb84
   17680:	bl	12288 <free@plt>
   17684:	ldr	r3, [r4, #2944]	; 0xb80
   17688:	cmp	r3, #0
   1768c:	bne	17678 <flatcc_emitter_clear@@Base+0x3c>
   17690:	mov	r0, r4
   17694:	bl	12288 <free@plt>
   17698:	mov	r2, #36	; 0x24
   1769c:	mov	r1, #0
   176a0:	mov	r0, r5
   176a4:	bl	122f4 <memset@plt>
   176a8:	ldrd	r4, [sp]
   176ac:	ldr	r6, [sp, #8]
   176b0:	add	sp, sp, #12
   176b4:	pop	{pc}		; (ldr pc, [sp], #4)

000176b8 <flatcc_emitter@@Base>:
   176b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   176bc:	strd	r6, [sp, #8]
   176c0:	strd	r8, [sp, #16]
   176c4:	strd	sl, [sp, #24]
   176c8:	str	lr, [sp, #32]
   176cc:	sub	sp, sp, #4
   176d0:	mov	r4, r0
   176d4:	ldr	ip, [sp, #40]	; 0x28
   176d8:	ldr	r0, [r0, #24]
   176dc:	add	r0, r0, ip
   176e0:	str	r0, [r4, #24]
   176e4:	cmp	r3, #0
   176e8:	blt	17718 <flatcc_emitter@@Base+0x60>
   176ec:	ldr	r3, [r4, #20]
   176f0:	cmp	r3, ip
   176f4:	bcs	17800 <flatcc_emitter@@Base+0x148>
   176f8:	cmp	r2, #0
   176fc:	moveq	r0, r2
   17700:	beq	17900 <flatcc_emitter@@Base+0x248>
   17704:	add	r5, r1, #8
   17708:	mov	r8, r2
   1770c:	movw	fp, #64064	; 0xfa40
   17710:	movt	fp, #65535	; 0xffff
   17714:	b	1795c <flatcc_emitter@@Base+0x2a4>
   17718:	ldr	r3, [r4, #12]
   1771c:	cmp	r3, ip
   17720:	bcs	17738 <flatcc_emitter@@Base+0x80>
   17724:	add	r5, r1, r2, lsl #3
   17728:	sub	r8, r2, #1
   1772c:	movw	fp, #64064	; 0xfa40
   17730:	movt	fp, #65535	; 0xffff
   17734:	b	1792c <flatcc_emitter@@Base+0x274>
   17738:	ldr	r6, [r4, #8]
   1773c:	sub	r6, r6, ip
   17740:	str	r6, [r4, #8]
   17744:	sub	ip, r3, ip
   17748:	str	ip, [r4, #12]
   1774c:	b	17814 <flatcc_emitter@@Base+0x15c>
   17750:	mov	r2, r6
   17754:	rsb	r1, r2, #0
   17758:	ldr	r0, [r4, #8]
   1775c:	add	r0, r0, r1
   17760:	str	r0, [r4, #8]
   17764:	sub	r3, r3, r2
   17768:	str	r3, [r4, #12]
   1776c:	add	r9, r9, r1
   17770:	sub	r6, r6, r2
   17774:	mov	r1, r9
   17778:	bl	12294 <memcpy@plt>
   1777c:	cmp	r6, #0
   17780:	beq	17924 <flatcc_emitter@@Base+0x26c>
   17784:	ldr	r3, [r4, #12]
   17788:	cmp	r3, r6
   1778c:	bcs	17750 <flatcc_emitter@@Base+0x98>
   17790:	cmp	r3, #0
   17794:	movne	r2, r3
   17798:	bne	17754 <flatcc_emitter@@Base+0x9c>
   1779c:	ldr	r7, [r4]
   177a0:	cmp	r7, #0
   177a4:	beq	179b8 <flatcc_emitter@@Base+0x300>
   177a8:	ldr	r2, [r7, #2948]	; 0xb84
   177ac:	ldr	r3, [r4, #4]
   177b0:	cmp	r2, r3
   177b4:	beq	1797c <flatcc_emitter@@Base+0x2c4>
   177b8:	ldr	r3, [r7, #2952]	; 0xb88
   177bc:	sub	r3, r3, #2944	; 0xb80
   177c0:	str	r3, [r2, #2952]	; 0xb88
   177c4:	ldr	r3, [r4]
   177c8:	ldr	r3, [r3, #2948]	; 0xb84
   177cc:	str	r3, [r4]
   177d0:	ldr	r3, [r4]
   177d4:	add	r2, r3, #2944	; 0xb80
   177d8:	str	r2, [r4, #8]
   177dc:	mov	r2, #2944	; 0xb80
   177e0:	str	r2, [r4, #12]
   177e4:	ldr	r2, [r3, #2944]	; 0xb80
   177e8:	ldr	r2, [r2, #2952]	; 0xb88
   177ec:	sub	r2, r2, #2944	; 0xb80
   177f0:	str	r2, [r3, #2952]	; 0xb88
   177f4:	b	1777c <flatcc_emitter@@Base+0xc4>
   177f8:	mov	r0, #0
   177fc:	b	17900 <flatcc_emitter@@Base+0x248>
   17800:	ldr	r6, [r4, #16]
   17804:	add	r0, r6, ip
   17808:	str	r0, [r4, #16]
   1780c:	sub	ip, r3, ip
   17810:	str	ip, [r4, #20]
   17814:	sub	r4, r2, #1
   17818:	cmp	r2, #0
   1781c:	moveq	r0, r2
   17820:	beq	17900 <flatcc_emitter@@Base+0x248>
   17824:	add	r5, r1, #8
   17828:	ldr	r2, [r5, #-4]
   1782c:	ldr	r1, [r5, #-8]
   17830:	mov	r0, r6
   17834:	bl	12294 <memcpy@plt>
   17838:	ldr	r3, [r5, #-4]
   1783c:	add	r6, r6, r3
   17840:	sub	r4, r4, #1
   17844:	add	r5, r5, #8
   17848:	cmn	r4, #1
   1784c:	bne	17828 <flatcc_emitter@@Base+0x170>
   17850:	mov	r0, #0
   17854:	b	17900 <flatcc_emitter@@Base+0x248>
   17858:	mov	r6, r7
   1785c:	mov	r2, r6
   17860:	mov	r1, r9
   17864:	ldr	r0, [r4, #16]
   17868:	bl	12294 <memcpy@plt>
   1786c:	sub	r7, r7, r6
   17870:	add	r9, r9, r6
   17874:	ldr	r3, [r4, #16]
   17878:	add	r3, r3, r6
   1787c:	str	r3, [r4, #16]
   17880:	ldr	r3, [r4, #20]
   17884:	sub	r6, r3, r6
   17888:	str	r6, [r4, #20]
   1788c:	cmp	r7, #0
   17890:	beq	17950 <flatcc_emitter@@Base+0x298>
   17894:	ldr	r6, [r4, #20]
   17898:	cmp	r6, r7
   1789c:	bcs	17858 <flatcc_emitter@@Base+0x1a0>
   178a0:	cmp	r6, #0
   178a4:	bne	1785c <flatcc_emitter@@Base+0x1a4>
   178a8:	ldr	r6, [r4, #4]
   178ac:	cmp	r6, #0
   178b0:	beq	17a3c <flatcc_emitter@@Base+0x384>
   178b4:	ldr	r3, [r6, #2944]	; 0xb80
   178b8:	ldr	r2, [r4]
   178bc:	cmp	r3, r2
   178c0:	beq	17a00 <flatcc_emitter@@Base+0x348>
   178c4:	str	r3, [r4, #4]
   178c8:	ldr	r3, [r4, #4]
   178cc:	str	r3, [r4, #16]
   178d0:	mov	r2, #2944	; 0xb80
   178d4:	str	r2, [r4, #20]
   178d8:	ldr	r2, [r3, #2948]	; 0xb84
   178dc:	ldr	r2, [r2, #2952]	; 0xb88
   178e0:	add	r2, r2, #2944	; 0xb80
   178e4:	str	r2, [r3, #2952]	; 0xb88
   178e8:	b	1788c <flatcc_emitter@@Base+0x1d4>
   178ec:	mvn	r0, #0
   178f0:	b	17900 <flatcc_emitter@@Base+0x248>
   178f4:	mvn	r0, #0
   178f8:	b	17900 <flatcc_emitter@@Base+0x248>
   178fc:	mvn	r0, #0
   17900:	add	sp, sp, #4
   17904:	ldrd	r4, [sp]
   17908:	ldrd	r6, [sp, #8]
   1790c:	ldrd	r8, [sp, #16]
   17910:	ldrd	sl, [sp, #24]
   17914:	add	sp, sp, #32
   17918:	pop	{pc}		; (ldr pc, [sp], #4)
   1791c:	mvn	r0, #0
   17920:	b	17900 <flatcc_emitter@@Base+0x248>
   17924:	sub	r5, r5, #8
   17928:	sub	r8, r8, #1
   1792c:	cmn	r8, #1
   17930:	beq	177f8 <flatcc_emitter@@Base+0x140>
   17934:	ldr	r6, [r5, #-4]
   17938:	ldr	r9, [r5, #-8]
   1793c:	add	r9, r9, r6
   17940:	cmp	r6, #0
   17944:	beq	17924 <flatcc_emitter@@Base+0x26c>
   17948:	mov	sl, #1472	; 0x5c0
   1794c:	b	17784 <flatcc_emitter@@Base+0xcc>
   17950:	add	r5, r5, #8
   17954:	subs	r8, r8, #1
   17958:	beq	17974 <flatcc_emitter@@Base+0x2bc>
   1795c:	ldr	r9, [r5, #-8]
   17960:	ldr	r7, [r5, #-4]
   17964:	cmp	r7, #0
   17968:	beq	17950 <flatcc_emitter@@Base+0x298>
   1796c:	mov	sl, #1472	; 0x5c0
   17970:	b	17894 <flatcc_emitter@@Base+0x1dc>
   17974:	mov	r0, #0
   17978:	b	17900 <flatcc_emitter@@Base+0x248>
   1797c:	movw	r0, #2956	; 0xb8c
   17980:	bl	122b8 <malloc@plt>
   17984:	cmp	r0, #0
   17988:	beq	178ec <flatcc_emitter@@Base+0x234>
   1798c:	ldr	r3, [r4, #28]
   17990:	add	r3, r3, #2944	; 0xb80
   17994:	str	r3, [r4, #28]
   17998:	ldr	r3, [r4, #4]
   1799c:	str	r3, [r0, #2948]	; 0xb84
   179a0:	str	r7, [r0, #2944]	; 0xb80
   179a4:	str	r0, [r7, #2948]	; 0xb84
   179a8:	ldr	r3, [r4, #4]
   179ac:	str	r0, [r3, #2944]	; 0xb80
   179b0:	str	r0, [r4]
   179b4:	b	177d0 <flatcc_emitter@@Base+0x118>
   179b8:	movw	r0, #2956	; 0xb8c
   179bc:	bl	122b8 <malloc@plt>
   179c0:	cmp	r0, #0
   179c4:	beq	178f4 <flatcc_emitter@@Base+0x23c>
   179c8:	ldr	r3, [r4, #28]
   179cc:	add	r3, r3, #2944	; 0xb80
   179d0:	str	r3, [r4, #28]
   179d4:	str	r0, [r4]
   179d8:	str	r0, [r4, #4]
   179dc:	str	r0, [r0, #2944]	; 0xb80
   179e0:	str	r0, [r0, #2948]	; 0xb84
   179e4:	add	r3, r0, #1472	; 0x5c0
   179e8:	str	r3, [r4, #8]
   179ec:	str	r3, [r4, #16]
   179f0:	str	sl, [r4, #12]
   179f4:	str	sl, [r4, #20]
   179f8:	str	fp, [r0, #2952]	; 0xb88
   179fc:	b	1777c <flatcc_emitter@@Base+0xc4>
   17a00:	movw	r0, #2956	; 0xb8c
   17a04:	bl	122b8 <malloc@plt>
   17a08:	cmp	r0, #0
   17a0c:	beq	178fc <flatcc_emitter@@Base+0x244>
   17a10:	ldr	r3, [r4, #28]
   17a14:	add	r3, r3, #2944	; 0xb80
   17a18:	str	r3, [r4, #28]
   17a1c:	str	r6, [r0, #2948]	; 0xb84
   17a20:	ldr	r3, [r4]
   17a24:	str	r3, [r0, #2944]	; 0xb80
   17a28:	str	r0, [r3, #2948]	; 0xb84
   17a2c:	ldr	r3, [r4, #4]
   17a30:	str	r0, [r3, #2944]	; 0xb80
   17a34:	str	r0, [r4, #4]
   17a38:	b	178c8 <flatcc_emitter@@Base+0x210>
   17a3c:	movw	r0, #2956	; 0xb8c
   17a40:	bl	122b8 <malloc@plt>
   17a44:	cmp	r0, #0
   17a48:	beq	1791c <flatcc_emitter@@Base+0x264>
   17a4c:	ldr	r3, [r4, #28]
   17a50:	add	r3, r3, #2944	; 0xb80
   17a54:	str	r3, [r4, #28]
   17a58:	str	r0, [r4]
   17a5c:	str	r0, [r4, #4]
   17a60:	str	r0, [r0, #2944]	; 0xb80
   17a64:	str	r0, [r0, #2948]	; 0xb84
   17a68:	add	r3, r0, #1472	; 0x5c0
   17a6c:	str	r3, [r4, #8]
   17a70:	str	r3, [r4, #16]
   17a74:	str	sl, [r4, #12]
   17a78:	str	sl, [r4, #20]
   17a7c:	str	fp, [r0, #2952]	; 0xb88
   17a80:	b	1788c <flatcc_emitter@@Base+0x1d4>

00017a84 <flatcc_emitter_copy_buffer@@Base>:
   17a84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17a88:	strd	r6, [sp, #8]
   17a8c:	str	r8, [sp, #16]
   17a90:	str	lr, [sp, #20]
   17a94:	ldr	r3, [r0, #24]
   17a98:	cmp	r3, r2
   17a9c:	movhi	r4, #0
   17aa0:	bhi	17b30 <flatcc_emitter_copy_buffer@@Base+0xac>
   17aa4:	ldr	r4, [r0]
   17aa8:	cmp	r4, #0
   17aac:	beq	17b30 <flatcc_emitter_copy_buffer@@Base+0xac>
   17ab0:	mov	r5, r1
   17ab4:	mov	r7, r0
   17ab8:	ldr	r2, [r0, #4]
   17abc:	cmp	r4, r2
   17ac0:	beq	17b48 <flatcc_emitter_copy_buffer@@Base+0xc4>
   17ac4:	ldr	r4, [r0, #12]
   17ac8:	rsb	r4, r4, #2944	; 0xb80
   17acc:	mov	r2, r4
   17ad0:	ldr	r1, [r0, #8]
   17ad4:	mov	r0, r5
   17ad8:	bl	12294 <memcpy@plt>
   17adc:	add	r4, r5, r4
   17ae0:	ldr	r3, [r7]
   17ae4:	ldr	r5, [r3, #2944]	; 0xb80
   17ae8:	ldr	r3, [r7, #4]
   17aec:	cmp	r5, r3
   17af0:	beq	17b60 <flatcc_emitter_copy_buffer@@Base+0xdc>
   17af4:	mov	r6, #2944	; 0xb80
   17af8:	mov	r2, r6
   17afc:	mov	r1, r5
   17b00:	mov	r0, r4
   17b04:	bl	12294 <memcpy@plt>
   17b08:	add	r4, r4, #2944	; 0xb80
   17b0c:	ldr	r5, [r5, #2944]	; 0xb80
   17b10:	ldr	r3, [r7, #4]
   17b14:	cmp	r3, r5
   17b18:	bne	17af8 <flatcc_emitter_copy_buffer@@Base+0x74>
   17b1c:	ldr	r2, [r7, #20]
   17b20:	rsb	r2, r2, #2944	; 0xb80
   17b24:	mov	r1, r5
   17b28:	mov	r0, r4
   17b2c:	bl	12294 <memcpy@plt>
   17b30:	mov	r0, r4
   17b34:	ldrd	r4, [sp]
   17b38:	ldrd	r6, [sp, #8]
   17b3c:	ldr	r8, [sp, #16]
   17b40:	add	sp, sp, #20
   17b44:	pop	{pc}		; (ldr pc, [sp], #4)
   17b48:	mov	r2, r3
   17b4c:	ldr	r1, [r0, #8]
   17b50:	mov	r0, r5
   17b54:	bl	12294 <memcpy@plt>
   17b58:	mov	r4, r5
   17b5c:	b	17b30 <flatcc_emitter_copy_buffer@@Base+0xac>
   17b60:	mov	r5, r3
   17b64:	b	17b1c <flatcc_emitter_copy_buffer@@Base+0x98>
   17b68:	add	r1, r1, #2
   17b6c:	lsl	r1, r1, #1
   17b70:	uxth	r1, r1
   17b74:	ldrh	ip, [r0, #22]
   17b78:	cmp	ip, r1
   17b7c:	bls	17bbc <flatcc_emitter_copy_buffer@@Base+0x138>
   17b80:	ldr	ip, [r0, #12]
   17b84:	ldrh	r1, [ip, r1]
   17b88:	cmp	r1, #0
   17b8c:	beq	17bbc <flatcc_emitter_copy_buffer@@Base+0x138>
   17b90:	ldrh	ip, [r0, #20]
   17b94:	add	r2, r1, #4
   17b98:	cmp	ip, r2
   17b9c:	bcc	17bd4 <flatcc_emitter_copy_buffer@@Base+0x150>
   17ba0:	ldr	r2, [r0, #16]
   17ba4:	add	r1, r1, r2
   17ba8:	tst	r1, #3
   17bac:	bne	17bdc <flatcc_emitter_copy_buffer@@Base+0x158>
   17bb0:	str	r1, [r3]
   17bb4:	mov	r0, #0
   17bb8:	bx	lr
   17bbc:	mov	r1, #0
   17bc0:	str	r1, [r3]
   17bc4:	cmp	r2, r1
   17bc8:	moveq	r0, r2
   17bcc:	movne	r0, #4
   17bd0:	bx	lr
   17bd4:	mov	r0, #13
   17bd8:	bx	lr
   17bdc:	mov	r0, #12
   17be0:	bx	lr

00017be4 <flatcc_verify_error_string@@Base>:
   17be4:	cmp	r0, #36	; 0x24
   17be8:	ldrls	pc, [pc, r0, lsl #2]
   17bec:	b	17e34 <flatcc_verify_error_string@@Base+0x250>
   17bf0:	andeq	r7, r1, r0, asr #28
   17bf4:	andeq	r7, r1, r4, lsl #25
   17bf8:	muleq	r1, r0, ip
   17bfc:	muleq	r1, ip, ip
   17c00:	andeq	r7, r1, r8, lsr #25
   17c04:			; <UNDEFINED> instruction: 0x00017cb4
   17c08:	andeq	r7, r1, r0, asr #25
   17c0c:	andeq	r7, r1, ip, asr #25
   17c10:	ldrdeq	r7, [r1], -r8
   17c14:	andeq	r7, r1, r4, ror #25
   17c18:	strdeq	r7, [r1], -r0
   17c1c:	strdeq	r7, [r1], -ip
   17c20:	andeq	r7, r1, r8, lsl #26
   17c24:	andeq	r7, r1, r4, lsl sp
   17c28:	andeq	r7, r1, r0, lsr #26
   17c2c:	andeq	r7, r1, ip, lsr #26
   17c30:	andeq	r7, r1, r8, lsr sp
   17c34:	andeq	r7, r1, r4, asr #26
   17c38:	andeq	r7, r1, r0, asr sp
   17c3c:	andeq	r7, r1, ip, asr sp
   17c40:	andeq	r7, r1, r8, ror #26
   17c44:	andeq	r7, r1, r4, ror sp
   17c48:	andeq	r7, r1, r0, lsl #27
   17c4c:	andeq	r7, r1, ip, lsl #27
   17c50:	muleq	r1, r8, sp
   17c54:	andeq	r7, r1, r4, lsr #27
   17c58:			; <UNDEFINED> instruction: 0x00017db0
   17c5c:			; <UNDEFINED> instruction: 0x00017dbc
   17c60:	andeq	r7, r1, r8, asr #27
   17c64:	ldrdeq	r7, [r1], -r4
   17c68:	andeq	r7, r1, r0, ror #27
   17c6c:	andeq	r7, r1, ip, ror #27
   17c70:	strdeq	r7, [r1], -r8
   17c74:	andeq	r7, r1, r4, lsl #28
   17c78:	andeq	r7, r1, r0, lsl lr
   17c7c:	andeq	r7, r1, ip, lsl lr
   17c80:	andeq	r7, r1, r8, lsr #28
   17c84:	movw	r0, #41976	; 0xa3f8
   17c88:	movt	r0, #1
   17c8c:	bx	lr
   17c90:	movw	r0, #40844	; 0x9f8c
   17c94:	movt	r0, #1
   17c98:	bx	lr
   17c9c:	movw	r0, #40864	; 0x9fa0
   17ca0:	movt	r0, #1
   17ca4:	bx	lr
   17ca8:	movw	r0, #40892	; 0x9fbc
   17cac:	movt	r0, #1
   17cb0:	bx	lr
   17cb4:	movw	r0, #40916	; 0x9fd4
   17cb8:	movt	r0, #1
   17cbc:	bx	lr
   17cc0:	movw	r0, #40952	; 0x9ff8
   17cc4:	movt	r0, #1
   17cc8:	bx	lr
   17ccc:	movw	r0, #40984	; 0xa018
   17cd0:	movt	r0, #1
   17cd4:	bx	lr
   17cd8:	movw	r0, #41012	; 0xa034
   17cdc:	movt	r0, #1
   17ce0:	bx	lr
   17ce4:	movw	r0, #41032	; 0xa048
   17ce8:	movt	r0, #1
   17cec:	bx	lr
   17cf0:	movw	r0, #41052	; 0xa05c
   17cf4:	movt	r0, #1
   17cf8:	bx	lr
   17cfc:	movw	r0, #41076	; 0xa074
   17d00:	movt	r0, #1
   17d04:	bx	lr
   17d08:	movw	r0, #41096	; 0xa088
   17d0c:	movt	r0, #1
   17d10:	bx	lr
   17d14:	movw	r0, #41120	; 0xa0a0
   17d18:	movt	r0, #1
   17d1c:	bx	lr
   17d20:	movw	r0, #41148	; 0xa0bc
   17d24:	movt	r0, #1
   17d28:	bx	lr
   17d2c:	movw	r0, #41176	; 0xa0d8
   17d30:	movt	r0, #1
   17d34:	bx	lr
   17d38:	movw	r0, #41216	; 0xa100
   17d3c:	movt	r0, #1
   17d40:	bx	lr
   17d44:	movw	r0, #41256	; 0xa128
   17d48:	movt	r0, #1
   17d4c:	bx	lr
   17d50:	movw	r0, #41296	; 0xa150
   17d54:	movt	r0, #1
   17d58:	bx	lr
   17d5c:	movw	r0, #41316	; 0xa164
   17d60:	movt	r0, #1
   17d64:	bx	lr
   17d68:	movw	r0, #41356	; 0xa18c
   17d6c:	movt	r0, #1
   17d70:	bx	lr
   17d74:	movw	r0, #41380	; 0xa1a4
   17d78:	movt	r0, #1
   17d7c:	bx	lr
   17d80:	movw	r0, #41424	; 0xa1d0
   17d84:	movt	r0, #1
   17d88:	bx	lr
   17d8c:	movw	r0, #41476	; 0xa204
   17d90:	movt	r0, #1
   17d94:	bx	lr
   17d98:	movw	r0, #41520	; 0xa230
   17d9c:	movt	r0, #1
   17da0:	bx	lr
   17da4:	movw	r0, #41564	; 0xa25c
   17da8:	movt	r0, #1
   17dac:	bx	lr
   17db0:	movw	r0, #41612	; 0xa28c
   17db4:	movt	r0, #1
   17db8:	bx	lr
   17dbc:	movw	r0, #41632	; 0xa2a0
   17dc0:	movt	r0, #1
   17dc4:	bx	lr
   17dc8:	movw	r0, #41660	; 0xa2bc
   17dcc:	movt	r0, #1
   17dd0:	bx	lr
   17dd4:	movw	r0, #41684	; 0xa2d4
   17dd8:	movt	r0, #1
   17ddc:	bx	lr
   17de0:	movw	r0, #41724	; 0xa2fc
   17de4:	movt	r0, #1
   17de8:	bx	lr
   17dec:	movw	r0, #41764	; 0xa324
   17df0:	movt	r0, #1
   17df4:	bx	lr
   17df8:	movw	r0, #41788	; 0xa33c
   17dfc:	movt	r0, #1
   17e00:	bx	lr
   17e04:	movw	r0, #41828	; 0xa364
   17e08:	movt	r0, #1
   17e0c:	bx	lr
   17e10:	movw	r0, #41868	; 0xa38c
   17e14:	movt	r0, #1
   17e18:	bx	lr
   17e1c:	movw	r0, #41920	; 0xa3c0
   17e20:	movt	r0, #1
   17e24:	bx	lr
   17e28:	movw	r0, #41960	; 0xa3e8
   17e2c:	movt	r0, #1
   17e30:	bx	lr
   17e34:	movw	r0, #40832	; 0x9f80
   17e38:	movt	r0, #1
   17e3c:	bx	lr
   17e40:	movw	r0, #40840	; 0x9f88
   17e44:	movt	r0, #1
   17e48:	bx	lr

00017e4c <flatcc_verify_field@@Base>:
   17e4c:	add	r1, r1, #2
   17e50:	lsl	r1, r1, #1
   17e54:	uxth	r1, r1
   17e58:	ldrh	ip, [r0, #22]
   17e5c:	cmp	ip, r1
   17e60:	bls	17eac <flatcc_verify_field@@Base+0x60>
   17e64:	ldr	ip, [r0, #12]
   17e68:	ldrh	r1, [ip, r1]
   17e6c:	cmp	r1, #0
   17e70:	beq	17eb4 <flatcc_verify_field@@Base+0x68>
   17e74:	add	r2, r2, r1
   17e78:	ldrh	ip, [r0, #20]
   17e7c:	cmp	r2, ip
   17e80:	bhi	17ebc <flatcc_verify_field@@Base+0x70>
   17e84:	ldr	r2, [r0]
   17e88:	ldr	r0, [r0, #16]
   17e8c:	add	r2, r2, r0
   17e90:	add	r2, r2, r1
   17e94:	sub	r3, r3, #1
   17e98:	and	r2, r2, r3
   17e9c:	cmp	r2, #0
   17ea0:	moveq	r0, #0
   17ea4:	movne	r0, #12
   17ea8:	bx	lr
   17eac:	mov	r0, #0
   17eb0:	bx	lr
   17eb4:	mov	r0, #0
   17eb8:	bx	lr
   17ebc:	mov	r0, #13
   17ec0:	bx	lr

00017ec4 <flatcc_verify_string_field@@Base>:
   17ec4:	str	r4, [sp, #-8]!
   17ec8:	str	lr, [sp, #4]
   17ecc:	sub	sp, sp, #8
   17ed0:	mov	r4, r0
   17ed4:	add	r3, sp, #4
   17ed8:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   17edc:	cmp	r0, #0
   17ee0:	bne	17f50 <flatcc_verify_string_field@@Base+0x8c>
   17ee4:	ldr	r3, [sp, #4]
   17ee8:	cmp	r3, #0
   17eec:	beq	17f50 <flatcc_verify_string_field@@Base+0x8c>
   17ef0:	ldr	r1, [r4]
   17ef4:	ldr	r2, [r1, r3]
   17ef8:	add	r2, r3, r2
   17efc:	cmp	r3, r2
   17f00:	movcs	r0, #17
   17f04:	bcs	17f50 <flatcc_verify_string_field@@Base+0x8c>
   17f08:	ldr	r3, [r4, #4]
   17f0c:	add	ip, r2, #4
   17f10:	cmp	r3, ip
   17f14:	movcc	r0, #17
   17f18:	bcc	17f50 <flatcc_verify_string_field@@Base+0x8c>
   17f1c:	tst	r2, #3
   17f20:	movne	r0, #17
   17f24:	bne	17f50 <flatcc_verify_string_field@@Base+0x8c>
   17f28:	ldr	r2, [r1, r2]
   17f2c:	sub	r3, r3, ip
   17f30:	add	lr, r2, #1
   17f34:	cmp	r3, lr
   17f38:	movcc	r0, #8
   17f3c:	bcc	17f50 <flatcc_verify_string_field@@Base+0x8c>
   17f40:	add	r1, r1, ip
   17f44:	ldrb	r3, [r1, r2]
   17f48:	cmp	r3, #0
   17f4c:	movne	r0, #7
   17f50:	add	sp, sp, #8
   17f54:	ldr	r4, [sp]
   17f58:	add	sp, sp, #4
   17f5c:	pop	{pc}		; (ldr pc, [sp], #4)

00017f60 <flatcc_verify_vector_field@@Base>:
   17f60:	strd	r4, [sp, #-16]!
   17f64:	str	r6, [sp, #8]
   17f68:	str	lr, [sp, #12]
   17f6c:	sub	sp, sp, #8
   17f70:	mov	r6, r0
   17f74:	mov	r5, r3
   17f78:	ldrh	r4, [sp, #24]
   17f7c:	add	r3, sp, #4
   17f80:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   17f84:	cmp	r0, #0
   17f88:	bne	18004 <flatcc_verify_vector_field@@Base+0xa4>
   17f8c:	ldr	r3, [sp, #4]
   17f90:	cmp	r3, #0
   17f94:	beq	18004 <flatcc_verify_vector_field@@Base+0xa4>
   17f98:	ldr	r1, [r6]
   17f9c:	ldr	r2, [r1, r3]
   17fa0:	add	r2, r3, r2
   17fa4:	cmp	r3, r2
   17fa8:	movcs	r0, #16
   17fac:	bcs	18004 <flatcc_verify_vector_field@@Base+0xa4>
   17fb0:	ldr	ip, [r6, #4]
   17fb4:	add	r3, r2, #4
   17fb8:	cmp	ip, r3
   17fbc:	movcc	r0, #16
   17fc0:	bcc	18004 <flatcc_verify_vector_field@@Base+0xa4>
   17fc4:	cmp	r4, #4
   17fc8:	movcc	r4, #4
   17fcc:	sub	r4, r4, #1
   17fd0:	orr	r4, r4, #3
   17fd4:	tst	r4, r3
   17fd8:	movne	r0, #16
   17fdc:	bne	18004 <flatcc_verify_vector_field@@Base+0xa4>
   17fe0:	ldr	r2, [r1, r2]
   17fe4:	ldr	r1, [sp, #28]
   17fe8:	cmp	r1, r2
   17fec:	movcc	r0, #25
   17ff0:	bcc	18004 <flatcc_verify_vector_field@@Base+0xa4>
   17ff4:	sub	r3, ip, r3
   17ff8:	mul	r5, r2, r5
   17ffc:	cmp	r3, r5
   18000:	movcc	r0, #26
   18004:	add	sp, sp, #8
   18008:	ldrd	r4, [sp]
   1800c:	ldr	r6, [sp, #8]
   18010:	add	sp, sp, #12
   18014:	pop	{pc}		; (ldr pc, [sp], #4)

00018018 <flatcc_verify_string_vector_field@@Base>:
   18018:	strd	r4, [sp, #-20]!	; 0xffffffec
   1801c:	strd	r6, [sp, #8]
   18020:	str	lr, [sp, #16]
   18024:	sub	sp, sp, #12
   18028:	mov	r4, r0
   1802c:	add	r3, sp, #4
   18030:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   18034:	cmp	r0, #0
   18038:	bne	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   1803c:	ldr	r3, [sp, #4]
   18040:	cmp	r3, #0
   18044:	beq	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18048:	ldr	r1, [r4]
   1804c:	ldr	r2, [r1, r3]
   18050:	add	r2, r3, r2
   18054:	cmp	r3, r2
   18058:	movcs	r0, #16
   1805c:	bcs	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18060:	ldr	r4, [r4, #4]
   18064:	add	r3, r2, #4
   18068:	cmp	r4, r3
   1806c:	movcc	r0, #16
   18070:	bcc	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18074:	tst	r3, #3
   18078:	bne	181a8 <flatcc_verify_string_vector_field@@Base+0x190>
   1807c:	ldr	ip, [r1, r2]
   18080:	cmn	ip, #-1073741823	; 0xc0000001
   18084:	bhi	181a8 <flatcc_verify_string_vector_field@@Base+0x190>
   18088:	lsl	r5, ip, #2
   1808c:	sub	lr, r4, r3
   18090:	cmp	lr, r5
   18094:	bcc	181a8 <flatcc_verify_string_vector_field@@Base+0x190>
   18098:	cmp	ip, #0
   1809c:	beq	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   180a0:	ldr	r2, [r1, r3]
   180a4:	add	r2, r3, r2
   180a8:	cmp	r2, r3
   180ac:	movls	r0, #17
   180b0:	bls	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   180b4:	add	lr, r2, #4
   180b8:	cmp	r4, lr
   180bc:	movcc	r0, #17
   180c0:	bcc	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   180c4:	tst	r2, #3
   180c8:	bne	18138 <flatcc_verify_string_vector_field@@Base+0x120>
   180cc:	ldr	r7, [r1, r2]
   180d0:	sub	ip, r4, lr
   180d4:	add	r6, r7, #1
   180d8:	cmp	ip, r6
   180dc:	addcs	ip, r3, r5
   180e0:	bcc	18138 <flatcc_verify_string_vector_field@@Base+0x120>
   180e4:	add	lr, r1, lr
   180e8:	ldrb	lr, [lr, r7]
   180ec:	cmp	lr, #0
   180f0:	bne	18174 <flatcc_verify_string_vector_field@@Base+0x15c>
   180f4:	add	r3, r3, #4
   180f8:	cmp	r3, ip
   180fc:	beq	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18100:	ldr	r2, [r1, r3]
   18104:	add	r2, r3, r2
   18108:	cmp	r2, r3
   1810c:	bls	18190 <flatcc_verify_string_vector_field@@Base+0x178>
   18110:	add	lr, r2, #4
   18114:	cmp	r4, lr
   18118:	bcc	18198 <flatcc_verify_string_vector_field@@Base+0x180>
   1811c:	tst	r2, #3
   18120:	bne	18138 <flatcc_verify_string_vector_field@@Base+0x120>
   18124:	ldr	r7, [r1, r2]
   18128:	sub	r5, r4, lr
   1812c:	add	r6, r7, #1
   18130:	cmp	r5, r6
   18134:	bcs	180e4 <flatcc_verify_string_vector_field@@Base+0xcc>
   18138:	add	ip, r2, #4
   1813c:	tst	r2, #3
   18140:	movne	r0, #17
   18144:	bne	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18148:	ldr	r2, [r1, r2]
   1814c:	sub	r3, r4, ip
   18150:	add	lr, r2, #1
   18154:	cmp	r3, lr
   18158:	movcc	r0, #8
   1815c:	bcc	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18160:	add	r1, r1, ip
   18164:	ldrb	r3, [r1, r2]
   18168:	cmp	r3, #0
   1816c:	movne	r0, #7
   18170:	b	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18174:	cmp	r3, r2
   18178:	bcs	181a0 <flatcc_verify_string_vector_field@@Base+0x188>
   1817c:	add	ip, r2, #4
   18180:	cmp	r4, ip
   18184:	bcs	1813c <flatcc_verify_string_vector_field@@Base+0x124>
   18188:	mov	r0, #17
   1818c:	b	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18190:	mov	r0, #17
   18194:	b	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   18198:	mov	r0, #17
   1819c:	b	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   181a0:	mov	r0, #17
   181a4:	b	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   181a8:	tst	r3, #3
   181ac:	movne	r0, #16
   181b0:	bne	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   181b4:	ldr	r2, [r1, r2]
   181b8:	cmn	r2, #-1073741823	; 0xc0000001
   181bc:	movhi	r0, #25
   181c0:	bhi	181d4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   181c4:	sub	r3, r4, r3
   181c8:	lsl	r2, r2, #2
   181cc:	cmp	r3, r2
   181d0:	movcc	r0, #26
   181d4:	add	sp, sp, #12
   181d8:	ldrd	r4, [sp]
   181dc:	ldrd	r6, [sp, #8]
   181e0:	add	sp, sp, #16
   181e4:	pop	{pc}		; (ldr pc, [sp], #4)

000181e8 <flatcc_verify_table_field@@Base>:
   181e8:	strd	r4, [sp, #-12]!
   181ec:	str	lr, [sp, #8]
   181f0:	sub	sp, sp, #36	; 0x24
   181f4:	mov	r4, r0
   181f8:	mov	r5, r3
   181fc:	add	r3, sp, #28
   18200:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   18204:	cmp	r0, #0
   18208:	bne	18218 <flatcc_verify_table_field@@Base+0x30>
   1820c:	ldr	r3, [sp, #28]
   18210:	cmp	r3, #0
   18214:	bne	18228 <flatcc_verify_table_field@@Base+0x40>
   18218:	add	sp, sp, #36	; 0x24
   1821c:	ldrd	r4, [sp]
   18220:	add	sp, sp, #8
   18224:	pop	{pc}		; (ldr pc, [sp], #4)
   18228:	ldr	r0, [r4]
   1822c:	ldr	ip, [r4, #4]
   18230:	ldr	r1, [r0, r3]
   18234:	ldr	r2, [r4, #8]
   18238:	sub	r2, r2, #1
   1823c:	str	r2, [sp, #12]
   18240:	cmp	r2, #0
   18244:	moveq	r0, #3
   18248:	beq	18218 <flatcc_verify_table_field@@Base+0x30>
   1824c:	add	r2, r3, r1
   18250:	cmp	r3, r2
   18254:	movcs	r0, #15
   18258:	bcs	18218 <flatcc_verify_table_field@@Base+0x30>
   1825c:	add	r3, r2, #4
   18260:	cmp	ip, r3
   18264:	movcc	r0, #15
   18268:	bcc	18218 <flatcc_verify_table_field@@Base+0x30>
   1826c:	tst	r2, #3
   18270:	movne	r0, #15
   18274:	bne	18218 <flatcc_verify_table_field@@Base+0x30>
   18278:	str	r2, [sp, #20]
   1827c:	ldr	r3, [r0, r2]
   18280:	subs	r3, r2, r3
   18284:	movmi	r0, #29
   18288:	bmi	18218 <flatcc_verify_table_field@@Base+0x30>
   1828c:	tst	r3, #1
   18290:	movne	r0, #29
   18294:	bne	18218 <flatcc_verify_table_field@@Base+0x30>
   18298:	add	lr, r3, #2
   1829c:	cmp	ip, lr
   182a0:	movcc	r0, #27
   182a4:	bcc	18218 <flatcc_verify_table_field@@Base+0x30>
   182a8:	add	r4, r0, r3
   182ac:	ldrh	r1, [r0, r3]
   182b0:	strh	r1, [sp, #26]
   182b4:	add	r3, r1, r3
   182b8:	cmp	ip, r3
   182bc:	movcc	r0, #30
   182c0:	bcc	18218 <flatcc_verify_table_field@@Base+0x30>
   182c4:	tst	r1, #1
   182c8:	movne	r0, #30
   182cc:	bne	18218 <flatcc_verify_table_field@@Base+0x30>
   182d0:	cmp	r1, #3
   182d4:	movls	r0, #28
   182d8:	bls	18218 <flatcc_verify_table_field@@Base+0x30>
   182dc:	ldrh	r3, [r0, lr]
   182e0:	strh	r3, [sp, #24]
   182e4:	sub	r2, ip, r2
   182e8:	cmp	r2, r3
   182ec:	movcc	r0, #20
   182f0:	bcc	18218 <flatcc_verify_table_field@@Base+0x30>
   182f4:	str	r4, [sp, #16]
   182f8:	str	r0, [sp, #4]
   182fc:	str	ip, [sp, #8]
   18300:	add	r0, sp, #4
   18304:	blx	r5
   18308:	b	18218 <flatcc_verify_table_field@@Base+0x30>

0001830c <flatcc_verify_table_vector_field@@Base>:
   1830c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18310:	strd	r6, [sp, #8]
   18314:	strd	r8, [sp, #16]
   18318:	strd	sl, [sp, #24]
   1831c:	str	lr, [sp, #32]
   18320:	sub	sp, sp, #36	; 0x24
   18324:	mov	r4, r0
   18328:	mov	r5, r3
   1832c:	add	r3, sp, #28
   18330:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   18334:	cmp	r0, #0
   18338:	bne	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   1833c:	ldr	r3, [sp, #28]
   18340:	cmp	r3, #0
   18344:	bne	18364 <flatcc_verify_table_vector_field@@Base+0x58>
   18348:	add	sp, sp, #36	; 0x24
   1834c:	ldrd	r4, [sp]
   18350:	ldrd	r6, [sp, #8]
   18354:	ldrd	r8, [sp, #16]
   18358:	ldrd	sl, [sp, #24]
   1835c:	add	sp, sp, #32
   18360:	pop	{pc}		; (ldr pc, [sp], #4)
   18364:	ldr	r7, [r4]
   18368:	ldr	r2, [r7, r3]
   1836c:	ldr	r6, [r4, #8]
   18370:	cmp	r6, #0
   18374:	movle	r0, #3
   18378:	ble	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   1837c:	add	r2, r3, r2
   18380:	cmp	r3, r2
   18384:	movcs	r0, #16
   18388:	bcs	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   1838c:	ldr	r8, [r4, #4]
   18390:	add	r4, r2, #4
   18394:	cmp	r8, r4
   18398:	movcc	r0, #16
   1839c:	bcc	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   183a0:	tst	r4, #3
   183a4:	bne	185a0 <flatcc_verify_table_vector_field@@Base+0x294>
   183a8:	ldr	r3, [r7, r2]
   183ac:	cmn	r3, #-1073741823	; 0xc0000001
   183b0:	bhi	185a0 <flatcc_verify_table_vector_field@@Base+0x294>
   183b4:	lsl	sl, r3, #2
   183b8:	sub	r1, r8, r4
   183bc:	cmp	r1, sl
   183c0:	bcc	185a0 <flatcc_verify_table_vector_field@@Base+0x294>
   183c4:	cmp	r3, #0
   183c8:	addne	r9, r7, r4
   183cc:	addne	sl, r4, sl
   183d0:	subne	r6, r6, #2
   183d4:	bne	18428 <flatcc_verify_table_vector_field@@Base+0x11c>
   183d8:	b	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   183dc:	ldr	r3, [r7, r2]
   183e0:	cmn	r3, #-1073741823	; 0xc0000001
   183e4:	movhi	r0, #25
   183e8:	bhi	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   183ec:	sub	r4, r8, r4
   183f0:	lsl	r3, r3, #2
   183f4:	cmp	r4, r3
   183f8:	movcc	r0, #26
   183fc:	b	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18400:	str	r2, [sp, #16]
   18404:	str	r7, [sp, #4]
   18408:	str	r8, [sp, #8]
   1840c:	add	r0, sp, #4
   18410:	blx	r5
   18414:	cmp	r0, #0
   18418:	bne	1858c <flatcc_verify_table_vector_field@@Base+0x280>
   1841c:	add	r4, r4, #4
   18420:	cmp	r4, sl
   18424:	beq	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18428:	mov	fp, r9
   1842c:	ldr	r3, [r9], #4
   18430:	str	r6, [sp, #12]
   18434:	cmp	r6, #0
   18438:	beq	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   1843c:	add	r3, r3, r4
   18440:	cmp	r4, r3
   18444:	bcs	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   18448:	add	r2, r3, #4
   1844c:	cmp	r8, r2
   18450:	bcc	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   18454:	tst	r3, #3
   18458:	bne	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   1845c:	str	r3, [sp, #20]
   18460:	ldr	r1, [r7, r3]
   18464:	subs	r1, r3, r1
   18468:	bmi	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   1846c:	tst	r1, #1
   18470:	bne	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   18474:	add	ip, r1, #2
   18478:	cmp	r8, ip
   1847c:	bcc	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   18480:	add	r2, r7, r1
   18484:	ldrh	r0, [r7, r1]
   18488:	strh	r0, [sp, #26]
   1848c:	add	r1, r0, r1
   18490:	cmp	r8, r1
   18494:	bcc	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   18498:	tst	r0, #1
   1849c:	bne	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   184a0:	cmp	r0, #3
   184a4:	bls	184bc <flatcc_verify_table_vector_field@@Base+0x1b0>
   184a8:	ldrh	r1, [r7, ip]
   184ac:	strh	r1, [sp, #24]
   184b0:	sub	r3, r8, r3
   184b4:	cmp	r3, r1
   184b8:	bcs	18400 <flatcc_verify_table_vector_field@@Base+0xf4>
   184bc:	ldr	r3, [fp]
   184c0:	str	r6, [sp, #12]
   184c4:	cmp	r6, #0
   184c8:	beq	18598 <flatcc_verify_table_vector_field@@Base+0x28c>
   184cc:	add	r3, r4, r3
   184d0:	cmp	r4, r3
   184d4:	movcs	r0, #15
   184d8:	bcs	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   184dc:	add	r2, r3, #4
   184e0:	cmp	r8, r2
   184e4:	movcc	r0, #15
   184e8:	bcc	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   184ec:	tst	r3, #3
   184f0:	movne	r0, #15
   184f4:	bne	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   184f8:	str	r3, [sp, #20]
   184fc:	ldr	r2, [r7, r3]
   18500:	subs	r2, r3, r2
   18504:	movmi	r0, #29
   18508:	bmi	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   1850c:	tst	r2, #1
   18510:	movne	r0, #29
   18514:	bne	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18518:	add	r0, r2, #2
   1851c:	cmp	r8, r0
   18520:	movcc	r0, #27
   18524:	bcc	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18528:	add	ip, r7, r2
   1852c:	ldrh	r1, [r7, r2]
   18530:	strh	r1, [sp, #26]
   18534:	add	r2, r1, r2
   18538:	cmp	r8, r2
   1853c:	movcc	r0, #30
   18540:	bcc	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18544:	tst	r1, #1
   18548:	movne	r0, #30
   1854c:	bne	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18550:	cmp	r1, #3
   18554:	movls	r0, #28
   18558:	bls	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   1855c:	ldrh	r2, [r7, r0]
   18560:	strh	r2, [sp, #24]
   18564:	sub	r3, r8, r3
   18568:	cmp	r3, r2
   1856c:	movcc	r0, #20
   18570:	bcc	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   18574:	str	ip, [sp, #16]
   18578:	str	r7, [sp, #4]
   1857c:	str	r8, [sp, #8]
   18580:	add	r0, sp, #4
   18584:	blx	r5
   18588:	b	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   1858c:	ldr	r3, [fp]
   18590:	str	r6, [sp, #12]
   18594:	b	184cc <flatcc_verify_table_vector_field@@Base+0x1c0>
   18598:	mov	r0, #3
   1859c:	b	18348 <flatcc_verify_table_vector_field@@Base+0x3c>
   185a0:	tst	r4, #3
   185a4:	beq	183dc <flatcc_verify_table_vector_field@@Base+0xd0>
   185a8:	mov	r0, #16
   185ac:	b	18348 <flatcc_verify_table_vector_field@@Base+0x3c>

000185b0 <flatcc_verify_union_table@@Base>:
   185b0:	strd	r4, [sp, #-12]!
   185b4:	str	lr, [sp, #8]
   185b8:	sub	sp, sp, #28
   185bc:	ldr	r4, [r0]
   185c0:	ldr	lr, [r0, #4]
   185c4:	ldr	ip, [r0, #16]
   185c8:	ldr	r2, [r0, #20]
   185cc:	ldr	r3, [r0, #8]
   185d0:	sub	r3, r3, #1
   185d4:	str	r3, [sp, #8]
   185d8:	cmp	r3, #0
   185dc:	moveq	r0, #3
   185e0:	beq	186a0 <flatcc_verify_union_table@@Base+0xf0>
   185e4:	add	r3, ip, r2
   185e8:	cmp	ip, r3
   185ec:	movcs	r0, #15
   185f0:	bcs	186a0 <flatcc_verify_union_table@@Base+0xf0>
   185f4:	add	r2, r3, #4
   185f8:	cmp	lr, r2
   185fc:	movcc	r0, #15
   18600:	bcc	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18604:	tst	r3, #3
   18608:	movne	r0, #15
   1860c:	bne	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18610:	str	r3, [sp, #16]
   18614:	ldr	r2, [r4, r3]
   18618:	subs	r2, r3, r2
   1861c:	movmi	r0, #29
   18620:	bmi	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18624:	tst	r2, #1
   18628:	movne	r0, #29
   1862c:	bne	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18630:	add	ip, r2, #2
   18634:	cmp	lr, ip
   18638:	movcc	r0, #27
   1863c:	bcc	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18640:	add	r5, r4, r2
   18644:	ldrh	r0, [r4, r2]
   18648:	strh	r0, [sp, #22]
   1864c:	add	r2, r0, r2
   18650:	cmp	lr, r2
   18654:	movcc	r0, #30
   18658:	bcc	186a0 <flatcc_verify_union_table@@Base+0xf0>
   1865c:	tst	r0, #1
   18660:	movne	r0, #30
   18664:	bne	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18668:	cmp	r0, #3
   1866c:	movls	r0, #28
   18670:	bls	186a0 <flatcc_verify_union_table@@Base+0xf0>
   18674:	ldrh	r2, [r4, ip]
   18678:	strh	r2, [sp, #20]
   1867c:	sub	r3, lr, r3
   18680:	cmp	r3, r2
   18684:	movcc	r0, #20
   18688:	bcc	186a0 <flatcc_verify_union_table@@Base+0xf0>
   1868c:	str	r5, [sp, #12]
   18690:	str	r4, [sp]
   18694:	str	lr, [sp, #4]
   18698:	mov	r0, sp
   1869c:	blx	r1
   186a0:	add	sp, sp, #28
   186a4:	ldrd	r4, [sp]
   186a8:	add	sp, sp, #8
   186ac:	pop	{pc}		; (ldr pc, [sp], #4)

000186b0 <flatcc_verify_union_struct@@Base>:
   186b0:	ldr	ip, [r0, #4]
   186b4:	ldr	r3, [r0, #16]
   186b8:	ldr	r0, [r0, #20]
   186bc:	cmp	r0, #0
   186c0:	beq	186f8 <flatcc_verify_union_struct@@Base+0x48>
   186c4:	add	r3, r3, r0
   186c8:	cmp	ip, r3
   186cc:	bcc	18700 <flatcc_verify_union_struct@@Base+0x50>
   186d0:	adds	r1, r1, r3
   186d4:	bcs	18708 <flatcc_verify_union_struct@@Base+0x58>
   186d8:	cmp	ip, r1
   186dc:	bcc	18710 <flatcc_verify_union_struct@@Base+0x60>
   186e0:	sub	r2, r2, #1
   186e4:	and	r3, r3, r2
   186e8:	cmp	r3, #0
   186ec:	moveq	r0, #0
   186f0:	movne	r0, #11
   186f4:	bx	lr
   186f8:	mov	r0, #18
   186fc:	bx	lr
   18700:	mov	r0, #18
   18704:	bx	lr
   18708:	mov	r0, #10
   1870c:	bx	lr
   18710:	mov	r0, #9
   18714:	bx	lr

00018718 <flatcc_verify_union_string@@Base>:
   18718:	ldr	r2, [r0, #16]
   1871c:	ldr	r3, [r0, #20]
   18720:	add	r3, r2, r3
   18724:	cmp	r2, r3
   18728:	bcs	18774 <flatcc_verify_union_string@@Base+0x5c>
   1872c:	ldr	r2, [r0, #4]
   18730:	add	r1, r3, #4
   18734:	cmp	r2, r1
   18738:	bcc	1877c <flatcc_verify_union_string@@Base+0x64>
   1873c:	tst	r3, #3
   18740:	bne	18784 <flatcc_verify_union_string@@Base+0x6c>
   18744:	ldr	r0, [r0]
   18748:	ldr	r3, [r0, r3]
   1874c:	sub	r2, r2, r1
   18750:	add	ip, r3, #1
   18754:	cmp	r2, ip
   18758:	bcc	1878c <flatcc_verify_union_string@@Base+0x74>
   1875c:	add	r1, r0, r1
   18760:	ldrb	r3, [r1, r3]
   18764:	cmp	r3, #0
   18768:	moveq	r0, #0
   1876c:	movne	r0, #7
   18770:	bx	lr
   18774:	mov	r0, #17
   18778:	bx	lr
   1877c:	mov	r0, #17
   18780:	bx	lr
   18784:	mov	r0, #17
   18788:	bx	lr
   1878c:	mov	r0, #8
   18790:	bx	lr

00018794 <flatcc_verify_buffer_header@@Base>:
   18794:	tst	r0, #3
   18798:	bne	18808 <flatcc_verify_buffer_header@@Base+0x74>
   1879c:	cmn	r1, #9
   187a0:	bhi	18810 <flatcc_verify_buffer_header@@Base+0x7c>
   187a4:	cmp	r1, #7
   187a8:	bls	18818 <flatcc_verify_buffer_header@@Base+0x84>
   187ac:	cmp	r2, #0
   187b0:	beq	18820 <flatcc_verify_buffer_header@@Base+0x8c>
   187b4:	str	r4, [sp, #-8]!
   187b8:	str	lr, [sp, #4]
   187bc:	sub	sp, sp, #8
   187c0:	mov	r1, r2
   187c4:	mov	r4, r0
   187c8:	mov	r2, #4
   187cc:	add	r0, sp, r2
   187d0:	bl	12300 <strncpy@plt>
   187d4:	ldr	r3, [sp, #4]
   187d8:	ldr	r2, [r4, #4]
   187dc:	cmp	r3, #0
   187e0:	cmpne	r2, r3
   187e4:	moveq	r3, #1
   187e8:	movne	r3, #0
   187ec:	cmp	r3, #0
   187f0:	movne	r0, #0
   187f4:	moveq	r0, #2
   187f8:	add	sp, sp, #8
   187fc:	ldr	r4, [sp]
   18800:	add	sp, sp, #4
   18804:	pop	{pc}		; (ldr pc, [sp], #4)
   18808:	mov	r0, #5
   1880c:	bx	lr
   18810:	mov	r0, #6
   18814:	bx	lr
   18818:	mov	r0, #1
   1881c:	bx	lr
   18820:	mov	r0, #0
   18824:	bx	lr

00018828 <flatcc_verify_typed_buffer_header@@Base>:
   18828:	tst	r0, #3
   1882c:	bne	1885c <flatcc_verify_typed_buffer_header@@Base+0x34>
   18830:	cmn	r1, #9
   18834:	bhi	18864 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   18838:	cmp	r1, #7
   1883c:	bls	1886c <flatcc_verify_typed_buffer_header@@Base+0x44>
   18840:	cmp	r2, #0
   18844:	beq	18874 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   18848:	ldr	r0, [r0, #4]
   1884c:	cmp	r2, r0
   18850:	movne	r0, #2
   18854:	moveq	r0, #0
   18858:	bx	lr
   1885c:	mov	r0, #5
   18860:	bx	lr
   18864:	mov	r0, #6
   18868:	bx	lr
   1886c:	mov	r0, #1
   18870:	bx	lr
   18874:	mov	r0, #0
   18878:	bx	lr

0001887c <flatcc_verify_struct_as_root@@Base>:
   1887c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18880:	strd	r6, [sp, #8]
   18884:	str	r8, [sp, #16]
   18888:	str	lr, [sp, #20]
   1888c:	mov	r6, r0
   18890:	mov	r5, r1
   18894:	mov	r7, r2
   18898:	mov	r4, r3
   1889c:	bl	18794 <flatcc_verify_buffer_header@@Base>
   188a0:	cmp	r0, #0
   188a4:	bne	18908 <flatcc_verify_struct_as_root@@Base+0x8c>
   188a8:	ldr	r2, [r6]
   188ac:	clz	r3, r2
   188b0:	lsr	r3, r3, #5
   188b4:	cmp	r5, r2
   188b8:	orrcc	r3, r3, #1
   188bc:	cmp	r3, #0
   188c0:	movne	r0, #18
   188c4:	bne	188f4 <flatcc_verify_struct_as_root@@Base+0x78>
   188c8:	adds	r4, r4, r2
   188cc:	movcs	r0, #10
   188d0:	bcs	188f4 <flatcc_verify_struct_as_root@@Base+0x78>
   188d4:	cmp	r5, r4
   188d8:	movcc	r0, #9
   188dc:	bcc	188f4 <flatcc_verify_struct_as_root@@Base+0x78>
   188e0:	ldrh	r3, [sp, #24]
   188e4:	sub	r3, r3, #1
   188e8:	and	r2, r2, r3
   188ec:	cmp	r2, #0
   188f0:	movne	r0, #11
   188f4:	ldrd	r4, [sp]
   188f8:	ldrd	r6, [sp, #8]
   188fc:	ldr	r8, [sp, #16]
   18900:	add	sp, sp, #20
   18904:	pop	{pc}		; (ldr pc, [sp], #4)
   18908:	mov	r2, r7
   1890c:	mov	r1, r5
   18910:	mov	r0, r6
   18914:	bl	18794 <flatcc_verify_buffer_header@@Base>
   18918:	b	188f4 <flatcc_verify_struct_as_root@@Base+0x78>

0001891c <flatcc_verify_struct_as_typed_root@@Base>:
   1891c:	strd	r4, [sp, #-16]!
   18920:	str	r6, [sp, #8]
   18924:	str	lr, [sp, #12]
   18928:	mov	r6, r0
   1892c:	mov	r5, r1
   18930:	mov	r4, r3
   18934:	bl	18828 <flatcc_verify_typed_buffer_header@@Base>
   18938:	cmp	r0, #0
   1893c:	bne	1898c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   18940:	ldr	r2, [r6]
   18944:	clz	r3, r2
   18948:	lsr	r3, r3, #5
   1894c:	cmp	r5, r2
   18950:	orrcc	r3, r3, #1
   18954:	cmp	r3, #0
   18958:	movne	r0, #18
   1895c:	bne	1898c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   18960:	adds	r4, r4, r2
   18964:	movcs	r0, #10
   18968:	bcs	1898c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   1896c:	cmp	r5, r4
   18970:	movcc	r0, #9
   18974:	bcc	1898c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   18978:	ldrh	r3, [sp, #16]
   1897c:	sub	r3, r3, #1
   18980:	and	r2, r2, r3
   18984:	cmp	r2, #0
   18988:	movne	r0, #11
   1898c:	ldrd	r4, [sp]
   18990:	ldr	r6, [sp, #8]
   18994:	add	sp, sp, #12
   18998:	pop	{pc}		; (ldr pc, [sp], #4)

0001899c <flatcc_verify_table_as_root@@Base>:
   1899c:	strd	r4, [sp, #-20]!	; 0xffffffec
   189a0:	strd	r6, [sp, #8]
   189a4:	str	lr, [sp, #16]
   189a8:	sub	sp, sp, #28
   189ac:	mov	r4, r0
   189b0:	mov	r5, r1
   189b4:	mov	r6, r2
   189b8:	mov	r7, r3
   189bc:	bl	18794 <flatcc_verify_buffer_header@@Base>
   189c0:	cmp	r0, #0
   189c4:	bne	18a90 <flatcc_verify_table_as_root@@Base+0xf4>
   189c8:	ldr	r3, [r4]
   189cc:	mov	r2, #99	; 0x63
   189d0:	str	r2, [sp, #8]
   189d4:	cmp	r3, #0
   189d8:	moveq	r0, #15
   189dc:	beq	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   189e0:	add	r2, r3, #4
   189e4:	cmp	r5, r2
   189e8:	movcc	r0, #15
   189ec:	bcc	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   189f0:	tst	r3, #3
   189f4:	movne	r0, #15
   189f8:	bne	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   189fc:	str	r3, [sp, #16]
   18a00:	ldr	r2, [r4, r3]
   18a04:	subs	r2, r3, r2
   18a08:	movmi	r0, #29
   18a0c:	bmi	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a10:	tst	r2, #1
   18a14:	movne	r0, #29
   18a18:	bne	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a1c:	add	r0, r2, #2
   18a20:	cmp	r5, r0
   18a24:	movcc	r0, #27
   18a28:	bcc	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a2c:	add	ip, r4, r2
   18a30:	ldrh	r1, [r4, r2]
   18a34:	strh	r1, [sp, #22]
   18a38:	add	r2, r1, r2
   18a3c:	cmp	r5, r2
   18a40:	movcc	r0, #30
   18a44:	bcc	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a48:	tst	r1, #1
   18a4c:	movne	r0, #30
   18a50:	bne	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a54:	cmp	r1, #3
   18a58:	movls	r0, #28
   18a5c:	bls	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a60:	ldrh	r2, [r4, r0]
   18a64:	strh	r2, [sp, #20]
   18a68:	sub	r3, r5, r3
   18a6c:	cmp	r3, r2
   18a70:	movcc	r0, #20
   18a74:	bcc	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a78:	str	ip, [sp, #12]
   18a7c:	str	r4, [sp]
   18a80:	str	r5, [sp, #4]
   18a84:	mov	r0, sp
   18a88:	blx	r7
   18a8c:	b	18aa0 <flatcc_verify_table_as_root@@Base+0x104>
   18a90:	mov	r2, r6
   18a94:	mov	r1, r5
   18a98:	mov	r0, r4
   18a9c:	bl	18794 <flatcc_verify_buffer_header@@Base>
   18aa0:	add	sp, sp, #28
   18aa4:	ldrd	r4, [sp]
   18aa8:	ldrd	r6, [sp, #8]
   18aac:	add	sp, sp, #16
   18ab0:	pop	{pc}		; (ldr pc, [sp], #4)

00018ab4 <flatcc_verify_table_as_typed_root@@Base>:
   18ab4:	strd	r4, [sp, #-16]!
   18ab8:	str	r6, [sp, #8]
   18abc:	str	lr, [sp, #12]
   18ac0:	sub	sp, sp, #24
   18ac4:	mov	r4, r0
   18ac8:	mov	r5, r1
   18acc:	mov	r6, r3
   18ad0:	bl	18828 <flatcc_verify_typed_buffer_header@@Base>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18af0 <flatcc_verify_table_as_typed_root@@Base+0x3c>
   18adc:	add	sp, sp, #24
   18ae0:	ldrd	r4, [sp]
   18ae4:	ldr	r6, [sp, #8]
   18ae8:	add	sp, sp, #12
   18aec:	pop	{pc}		; (ldr pc, [sp], #4)
   18af0:	ldr	r3, [r4]
   18af4:	mov	r2, #99	; 0x63
   18af8:	str	r2, [sp, #8]
   18afc:	cmp	r3, #0
   18b00:	moveq	r0, #15
   18b04:	beq	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b08:	add	r2, r3, #4
   18b0c:	cmp	r5, r2
   18b10:	movcc	r0, #15
   18b14:	bcc	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b18:	tst	r3, #3
   18b1c:	movne	r0, #15
   18b20:	bne	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b24:	str	r3, [sp, #16]
   18b28:	ldr	r2, [r4, r3]
   18b2c:	subs	r2, r3, r2
   18b30:	movmi	r0, #29
   18b34:	bmi	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b38:	tst	r2, #1
   18b3c:	movne	r0, #29
   18b40:	bne	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b44:	add	r0, r2, #2
   18b48:	cmp	r5, r0
   18b4c:	movcc	r0, #27
   18b50:	bcc	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b54:	add	ip, r4, r2
   18b58:	ldrh	r1, [r4, r2]
   18b5c:	strh	r1, [sp, #22]
   18b60:	add	r2, r1, r2
   18b64:	cmp	r5, r2
   18b68:	movcc	r0, #30
   18b6c:	bcc	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b70:	tst	r1, #1
   18b74:	movne	r0, #30
   18b78:	bne	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b7c:	cmp	r1, #3
   18b80:	movls	r0, #28
   18b84:	bls	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18b88:	ldrh	r2, [r4, r0]
   18b8c:	strh	r2, [sp, #20]
   18b90:	sub	r3, r5, r3
   18b94:	cmp	r3, r2
   18b98:	movcc	r0, #20
   18b9c:	bcc	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>
   18ba0:	str	ip, [sp, #12]
   18ba4:	str	r4, [sp]
   18ba8:	str	r5, [sp, #4]
   18bac:	mov	r0, sp
   18bb0:	blx	r6
   18bb4:	b	18adc <flatcc_verify_table_as_typed_root@@Base+0x28>

00018bb8 <flatcc_verify_struct_as_nested_root@@Base>:
   18bb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18bbc:	strd	r6, [sp, #8]
   18bc0:	str	r8, [sp, #16]
   18bc4:	str	lr, [sp, #20]
   18bc8:	sub	sp, sp, #8
   18bcc:	mov	r5, r0
   18bd0:	mov	r4, r1
   18bd4:	mov	r8, r2
   18bd8:	mov	r7, r3
   18bdc:	ldrh	r6, [sp, #36]	; 0x24
   18be0:	mvn	r3, #0
   18be4:	str	r3, [sp, #4]
   18be8:	mov	r3, #1
   18bec:	str	r3, [sp]
   18bf0:	mov	r3, r6
   18bf4:	bl	17f60 <flatcc_verify_vector_field@@Base>
   18bf8:	cmp	r0, #0
   18bfc:	bne	18c74 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   18c00:	add	r1, r4, #2
   18c04:	lsl	r1, r1, #1
   18c08:	uxth	r1, r1
   18c0c:	ldrh	r3, [r5, #22]
   18c10:	cmp	r3, r1
   18c14:	bls	18c5c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   18c18:	ldr	r3, [r5, #12]
   18c1c:	ldrh	r3, [r3, r1]
   18c20:	cmp	r3, #0
   18c24:	beq	18c5c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   18c28:	ldr	r2, [r5, #16]
   18c2c:	add	r3, r3, r2
   18c30:	ldr	r2, [r5]
   18c34:	adds	r1, r2, r3
   18c38:	beq	18c5c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   18c3c:	ldr	r3, [r2, r3]
   18c40:	add	r0, r1, r3
   18c44:	ldr	r1, [r1, r3]
   18c48:	str	r6, [sp]
   18c4c:	ldr	r3, [sp, #32]
   18c50:	mov	r2, r7
   18c54:	add	r0, r0, #4
   18c58:	bl	1887c <flatcc_verify_struct_as_root@@Base>
   18c5c:	add	sp, sp, #8
   18c60:	ldrd	r4, [sp]
   18c64:	ldrd	r6, [sp, #8]
   18c68:	ldr	r8, [sp, #16]
   18c6c:	add	sp, sp, #20
   18c70:	pop	{pc}		; (ldr pc, [sp], #4)
   18c74:	mvn	r3, #0
   18c78:	str	r3, [sp, #4]
   18c7c:	mov	r3, #1
   18c80:	str	r3, [sp]
   18c84:	mov	r3, r6
   18c88:	mov	r2, r8
   18c8c:	mov	r1, r4
   18c90:	mov	r0, r5
   18c94:	bl	17f60 <flatcc_verify_vector_field@@Base>
   18c98:	b	18c5c <flatcc_verify_struct_as_nested_root@@Base+0xa4>

00018c9c <flatcc_verify_table_as_nested_root@@Base>:
   18c9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ca0:	strd	r6, [sp, #8]
   18ca4:	str	r8, [sp, #16]
   18ca8:	str	lr, [sp, #20]
   18cac:	sub	sp, sp, #32
   18cb0:	mov	r5, r0
   18cb4:	mov	r4, r1
   18cb8:	mov	r8, r2
   18cbc:	mov	r6, r3
   18cc0:	ldrh	r7, [sp, #56]	; 0x38
   18cc4:	mvn	r3, #0
   18cc8:	str	r3, [sp, #4]
   18ccc:	mov	r3, #1
   18cd0:	str	r3, [sp]
   18cd4:	mov	r3, r7
   18cd8:	bl	17f60 <flatcc_verify_vector_field@@Base>
   18cdc:	cmp	r0, #0
   18ce0:	bne	18e24 <flatcc_verify_table_as_nested_root@@Base+0x188>
   18ce4:	add	r1, r4, #2
   18ce8:	lsl	r1, r1, #1
   18cec:	uxth	r1, r1
   18cf0:	ldrh	r3, [r5, #22]
   18cf4:	cmp	r3, r1
   18cf8:	bls	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18cfc:	ldr	r3, [r5, #12]
   18d00:	ldrh	r3, [r3, r1]
   18d04:	cmp	r3, #0
   18d08:	beq	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18d0c:	ldr	r2, [r5, #16]
   18d10:	add	r3, r3, r2
   18d14:	ldr	r2, [r5]
   18d18:	adds	r1, r2, r3
   18d1c:	beq	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18d20:	ldr	r3, [r2, r3]
   18d24:	add	r7, r1, r3
   18d28:	ldr	r4, [r1, r3]
   18d2c:	add	r8, r7, #4
   18d30:	mov	r2, r6
   18d34:	mov	r1, r4
   18d38:	mov	r0, r8
   18d3c:	bl	18794 <flatcc_verify_buffer_header@@Base>
   18d40:	cmp	r0, #0
   18d44:	bne	18e60 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   18d48:	ldr	r2, [r7, #4]
   18d4c:	ldr	r3, [r5, #8]
   18d50:	sub	r3, r3, #1
   18d54:	str	r3, [sp, #16]
   18d58:	cmp	r3, #0
   18d5c:	moveq	r0, #3
   18d60:	beq	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18d64:	cmp	r2, #0
   18d68:	moveq	r0, #15
   18d6c:	beq	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18d70:	add	r3, r2, #4
   18d74:	cmp	r4, r3
   18d78:	movcc	r0, #15
   18d7c:	bcc	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18d80:	tst	r2, #3
   18d84:	movne	r0, #15
   18d88:	bne	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18d8c:	str	r2, [sp, #24]
   18d90:	ldr	r3, [r8, r2]
   18d94:	subs	r3, r2, r3
   18d98:	movmi	r0, #29
   18d9c:	bmi	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18da0:	tst	r3, #1
   18da4:	movne	r0, #29
   18da8:	bne	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18dac:	add	r0, r3, #2
   18db0:	cmp	r4, r0
   18db4:	movcc	r0, #27
   18db8:	bcc	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18dbc:	add	ip, r8, r3
   18dc0:	ldrh	r1, [r8, r3]
   18dc4:	strh	r1, [sp, #30]
   18dc8:	add	r3, r1, r3
   18dcc:	cmp	r4, r3
   18dd0:	movcc	r0, #30
   18dd4:	bcc	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18dd8:	tst	r1, #1
   18ddc:	movne	r0, #30
   18de0:	bne	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18de4:	cmp	r1, #3
   18de8:	movls	r0, #28
   18dec:	bls	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18df0:	ldrh	r3, [r8, r0]
   18df4:	strh	r3, [sp, #28]
   18df8:	sub	r2, r4, r2
   18dfc:	cmp	r2, r3
   18e00:	movcc	r0, #20
   18e04:	bcc	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18e08:	str	ip, [sp, #20]
   18e0c:	str	r8, [sp, #8]
   18e10:	str	r4, [sp, #12]
   18e14:	add	r0, sp, #8
   18e18:	ldr	r3, [sp, #60]	; 0x3c
   18e1c:	blx	r3
   18e20:	b	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   18e24:	mvn	r3, #0
   18e28:	str	r3, [sp, #4]
   18e2c:	mov	r3, #1
   18e30:	str	r3, [sp]
   18e34:	mov	r3, r7
   18e38:	mov	r2, r8
   18e3c:	mov	r1, r4
   18e40:	mov	r0, r5
   18e44:	bl	17f60 <flatcc_verify_vector_field@@Base>
   18e48:	add	sp, sp, #32
   18e4c:	ldrd	r4, [sp]
   18e50:	ldrd	r6, [sp, #8]
   18e54:	ldr	r8, [sp, #16]
   18e58:	add	sp, sp, #20
   18e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e60:	mov	r2, r6
   18e64:	mov	r1, r4
   18e68:	mov	r0, r8
   18e6c:	bl	18794 <flatcc_verify_buffer_header@@Base>
   18e70:	b	18e48 <flatcc_verify_table_as_nested_root@@Base+0x1ac>

00018e74 <flatcc_verify_union_field@@Base>:
   18e74:	strd	r4, [sp, #-20]!	; 0xffffffec
   18e78:	strd	r6, [sp, #8]
   18e7c:	str	lr, [sp, #16]
   18e80:	sub	sp, sp, #36	; 0x24
   18e84:	add	ip, r1, #1
   18e88:	lsl	ip, ip, #1
   18e8c:	uxth	ip, ip
   18e90:	ldrh	lr, [r0, #22]
   18e94:	cmp	lr, ip
   18e98:	bls	18f68 <flatcc_verify_union_field@@Base+0xf4>
   18e9c:	ldr	r6, [r0, #12]
   18ea0:	ldrh	r4, [r6, ip]
   18ea4:	cmp	r4, #0
   18ea8:	beq	18f68 <flatcc_verify_union_field@@Base+0xf4>
   18eac:	add	r5, r4, #1
   18eb0:	ldrh	r7, [r0, #20]
   18eb4:	cmp	r5, r7
   18eb8:	bhi	18fac <flatcc_verify_union_field@@Base+0x138>
   18ebc:	ldr	r7, [r0]
   18ec0:	add	ip, ip, #2
   18ec4:	uxth	ip, ip
   18ec8:	cmp	lr, ip
   18ecc:	bls	18fb4 <flatcc_verify_union_field@@Base+0x140>
   18ed0:	ldr	lr, [r0, #16]
   18ed4:	add	r4, r4, lr
   18ed8:	add	r5, r7, r4
   18edc:	ldrb	lr, [r7, r4]
   18ee0:	ldrh	r4, [r6, ip]
   18ee4:	adds	ip, lr, #0
   18ee8:	movne	ip, #1
   18eec:	cmp	r4, #0
   18ef0:	moveq	ip, #1
   18ef4:	cmp	ip, #0
   18ef8:	moveq	r0, #24
   18efc:	beq	18f98 <flatcc_verify_union_field@@Base+0x124>
   18f00:	cmp	lr, #0
   18f04:	moveq	r0, #0
   18f08:	beq	18f98 <flatcc_verify_union_field@@Base+0x124>
   18f0c:	mov	r6, r3
   18f10:	mov	r4, r0
   18f14:	add	r3, sp, #28
   18f18:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   18f1c:	cmp	r0, #0
   18f20:	bne	18f98 <flatcc_verify_union_field@@Base+0x124>
   18f24:	ldr	r3, [sp, #28]
   18f28:	cmp	r3, #0
   18f2c:	beq	18f98 <flatcc_verify_union_field@@Base+0x124>
   18f30:	ldr	r2, [r4]
   18f34:	str	r2, [sp, #4]
   18f38:	ldr	r1, [r4, #4]
   18f3c:	str	r1, [sp, #8]
   18f40:	ldr	r1, [r4, #8]
   18f44:	str	r1, [sp, #12]
   18f48:	str	r3, [sp, #20]
   18f4c:	ldr	r3, [r2, r3]
   18f50:	str	r3, [sp, #24]
   18f54:	ldrb	r3, [r5]
   18f58:	strb	r3, [sp, #16]
   18f5c:	add	r0, sp, #4
   18f60:	blx	r6
   18f64:	b	18f98 <flatcc_verify_union_field@@Base+0x124>
   18f68:	add	ip, ip, #2
   18f6c:	uxth	ip, ip
   18f70:	cmp	lr, ip
   18f74:	bls	18f8c <flatcc_verify_union_field@@Base+0x118>
   18f78:	ldr	r3, [r0, #12]
   18f7c:	ldrh	r3, [r3, ip]
   18f80:	cmp	r3, #0
   18f84:	movne	r0, #23
   18f88:	bne	18f98 <flatcc_verify_union_field@@Base+0x124>
   18f8c:	cmp	r2, #0
   18f90:	moveq	r0, r2
   18f94:	movne	r0, #21
   18f98:	add	sp, sp, #36	; 0x24
   18f9c:	ldrd	r4, [sp]
   18fa0:	ldrd	r6, [sp, #8]
   18fa4:	add	sp, sp, #16
   18fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fac:	mov	r0, #13
   18fb0:	b	18f98 <flatcc_verify_union_field@@Base+0x124>
   18fb4:	ldr	ip, [r0, #16]
   18fb8:	add	r4, r4, ip
   18fbc:	add	r5, r7, r4
   18fc0:	ldrb	lr, [r7, r4]
   18fc4:	b	18f00 <flatcc_verify_union_field@@Base+0x8c>

00018fc8 <flatcc_verify_union_vector_field@@Base>:
   18fc8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18fcc:	strd	r6, [sp, #8]
   18fd0:	strd	r8, [sp, #16]
   18fd4:	str	sl, [sp, #24]
   18fd8:	str	lr, [sp, #28]
   18fdc:	sub	sp, sp, #40	; 0x28
   18fe0:	sub	r7, r1, #1
   18fe4:	uxth	r7, r7
   18fe8:	add	r5, r1, #1
   18fec:	lsl	r5, r5, #1
   18ff0:	uxth	r5, r5
   18ff4:	ldrh	lr, [r0, #22]
   18ff8:	cmp	lr, r5
   18ffc:	bls	19010 <flatcc_verify_union_vector_field@@Base+0x48>
   19000:	ldr	ip, [r0, #12]
   19004:	ldrh	ip, [ip, r5]
   19008:	cmp	ip, #0
   1900c:	bne	19044 <flatcc_verify_union_vector_field@@Base+0x7c>
   19010:	add	ip, r5, #2
   19014:	uxth	ip, ip
   19018:	cmp	lr, ip
   1901c:	ldrhi	lr, [r0, #12]
   19020:	ldrhhi	ip, [lr, ip]
   19024:	movls	ip, #0
   19028:	uxth	lr, ip
   1902c:	adds	ip, r2, #0
   19030:	movne	ip, #1
   19034:	cmp	lr, #0
   19038:	movne	ip, #0
   1903c:	cmp	ip, #0
   19040:	bne	1924c <flatcc_verify_union_vector_field@@Base+0x284>
   19044:	mov	r9, r3
   19048:	mov	r8, r2
   1904c:	mov	r6, r1
   19050:	mov	r4, r0
   19054:	mvn	r3, #0
   19058:	str	r3, [sp, #4]
   1905c:	mov	r3, #1
   19060:	str	r3, [sp]
   19064:	mov	r1, r7
   19068:	bl	17f60 <flatcc_verify_vector_field@@Base>
   1906c:	subs	sl, r0, #0
   19070:	bne	1916c <flatcc_verify_union_vector_field@@Base+0x1a4>
   19074:	ldrh	r3, [r4, #22]
   19078:	cmp	r3, r5
   1907c:	bls	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19080:	ldr	r3, [r4, #12]
   19084:	ldrh	r3, [r3, r5]
   19088:	cmp	r3, #0
   1908c:	beq	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19090:	ldr	r2, [r4, #16]
   19094:	add	r3, r3, r2
   19098:	ldr	r2, [r4]
   1909c:	adds	r1, r2, r3
   190a0:	beq	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   190a4:	ldr	r3, [r2, r3]
   190a8:	add	r5, r1, r3
   190ac:	ldr	r7, [r1, r3]
   190b0:	add	r3, sp, #36	; 0x24
   190b4:	mov	r2, r8
   190b8:	mov	r1, r6
   190bc:	mov	r0, r4
   190c0:	bl	17b68 <flatcc_emitter_copy_buffer@@Base+0xe4>
   190c4:	subs	sl, r0, #0
   190c8:	bne	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   190cc:	ldr	r3, [sp, #36]	; 0x24
   190d0:	cmp	r3, #0
   190d4:	beq	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   190d8:	ldr	r1, [r4]
   190dc:	ldr	r2, [r1, r3]
   190e0:	ldr	r0, [r4, #8]
   190e4:	cmp	r0, #0
   190e8:	movle	sl, #3
   190ec:	ble	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   190f0:	add	r2, r3, r2
   190f4:	cmp	r3, r2
   190f8:	movcs	sl, #16
   190fc:	bcs	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19100:	ldr	ip, [r4, #4]
   19104:	add	r3, r2, #4
   19108:	cmp	ip, r3
   1910c:	movcc	sl, #16
   19110:	bcc	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19114:	tst	r3, #3
   19118:	bne	19254 <flatcc_verify_union_vector_field@@Base+0x28c>
   1911c:	add	r6, r1, r2
   19120:	ldr	lr, [r1, r2]
   19124:	cmn	lr, #-1073741823	; 0xc0000001
   19128:	bhi	19254 <flatcc_verify_union_vector_field@@Base+0x28c>
   1912c:	sub	r4, ip, r3
   19130:	cmp	r4, lr, lsl #2
   19134:	bcc	19254 <flatcc_verify_union_vector_field@@Base+0x28c>
   19138:	cmp	r7, lr
   1913c:	bne	1923c <flatcc_verify_union_vector_field@@Base+0x274>
   19140:	str	r1, [sp, #12]
   19144:	str	ip, [sp, #16]
   19148:	sub	r0, r0, #1
   1914c:	str	r0, [sp, #20]
   19150:	cmp	lr, #0
   19154:	beq	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19158:	add	r4, r5, #4
   1915c:	add	lr, lr, #4
   19160:	add	r5, lr, r5
   19164:	rsb	r7, r1, #4
   19168:	b	19208 <flatcc_verify_union_vector_field@@Base+0x240>
   1916c:	mvn	r3, #0
   19170:	str	r3, [sp, #4]
   19174:	mov	r3, #1
   19178:	str	r3, [sp]
   1917c:	mov	r2, r8
   19180:	mov	r1, r7
   19184:	mov	r0, r4
   19188:	bl	17f60 <flatcc_verify_vector_field@@Base>
   1918c:	mov	sl, r0
   19190:	mov	r0, sl
   19194:	add	sp, sp, #40	; 0x28
   19198:	ldrd	r4, [sp]
   1919c:	ldrd	r6, [sp, #8]
   191a0:	ldrd	r8, [sp, #16]
   191a4:	ldr	sl, [sp, #24]
   191a8:	add	sp, sp, #28
   191ac:	pop	{pc}		; (ldr pc, [sp], #4)
   191b0:	ldr	r2, [r1, r2]
   191b4:	cmn	r2, #-1073741823	; 0xc0000001
   191b8:	movhi	sl, #25
   191bc:	bhi	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   191c0:	sub	r3, ip, r3
   191c4:	lsl	r2, r2, #2
   191c8:	cmp	r3, r2
   191cc:	movcc	sl, #26
   191d0:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   191d4:	ldrb	r1, [r4]
   191d8:	cmp	r1, #0
   191dc:	beq	19244 <flatcc_verify_union_vector_field@@Base+0x27c>
   191e0:	strb	r1, [sp, #24]
   191e4:	str	r2, [sp, #28]
   191e8:	str	r3, [sp, #32]
   191ec:	add	r0, sp, #12
   191f0:	blx	r9
   191f4:	cmp	r0, #0
   191f8:	bne	1922c <flatcc_verify_union_vector_field@@Base+0x264>
   191fc:	add	r4, r4, #1
   19200:	cmp	r5, r4
   19204:	beq	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19208:	add	r2, r7, r6
   1920c:	ldr	r3, [r6, #4]!
   19210:	cmp	r3, #0
   19214:	bne	191d4 <flatcc_verify_union_vector_field@@Base+0x20c>
   19218:	ldrb	r3, [r4]
   1921c:	cmp	r3, #0
   19220:	beq	191fc <flatcc_verify_union_vector_field@@Base+0x234>
   19224:	mov	sl, #32
   19228:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   1922c:	add	r0, sp, #12
   19230:	blx	r9
   19234:	mov	sl, r0
   19238:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   1923c:	mov	sl, #34	; 0x22
   19240:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19244:	mov	sl, #33	; 0x21
   19248:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   1924c:	mov	sl, #22
   19250:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>
   19254:	tst	r3, #3
   19258:	beq	191b0 <flatcc_verify_union_vector_field@@Base+0x1e8>
   1925c:	mov	sl, #16
   19260:	b	19190 <flatcc_verify_union_vector_field@@Base+0x1c8>

00019264 <__libc_csu_init@@Base>:
   19264:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19268:	mov	r7, r0
   1926c:	ldr	r6, [pc, #72]	; 192bc <__libc_csu_init@@Base+0x58>
   19270:	ldr	r5, [pc, #72]	; 192c0 <__libc_csu_init@@Base+0x5c>
   19274:	add	r6, pc, r6
   19278:	add	r5, pc, r5
   1927c:	sub	r6, r6, r5
   19280:	mov	r8, r1
   19284:	mov	r9, r2
   19288:	bl	12268 <free@plt-0x20>
   1928c:	asrs	r6, r6, #2
   19290:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19294:	mov	r4, #0
   19298:	add	r4, r4, #1
   1929c:	ldr	r3, [r5], #4
   192a0:	mov	r2, r9
   192a4:	mov	r1, r8
   192a8:	mov	r0, r7
   192ac:	blx	r3
   192b0:	cmp	r6, r4
   192b4:	bne	19298 <__libc_csu_init@@Base+0x34>
   192b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192bc:	muleq	r1, r8, ip
   192c0:	muleq	r1, r0, ip

000192c4 <__libc_csu_fini@@Base>:
   192c4:	bx	lr

Disassembly of section .fini:

000192c8 <.fini>:
   192c8:	push	{r3, lr}
   192cc:	pop	{r3, pc}
