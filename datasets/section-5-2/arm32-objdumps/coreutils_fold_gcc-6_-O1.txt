
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010ca4 <.init>:
   10ca4:	push	{r3, lr}
   10ca8:	bl	10f7c <__assert_fail@plt+0x48>
   10cac:	pop	{r3, pc}

Disassembly of section .plt:

00010cb0 <calloc@plt-0x14>:
   10cb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb4:	ldr	lr, [pc, #4]	; 10cc0 <calloc@plt-0x4>
   10cb8:	add	lr, pc, lr
   10cbc:	ldr	pc, [lr, #8]!
   10cc0:	andeq	r5, r1, r0, asr #6

00010cc4 <calloc@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #832]!	; 0x340

00010cd0 <fputs_unlocked@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #824]!	; 0x338

00010cdc <raise@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #816]!	; 0x330

00010ce8 <strcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #808]!	; 0x328

00010cf4 <posix_fadvise64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #800]!	; 0x320

00010d00 <fflush@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #792]!	; 0x318

00010d0c <memmove@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #784]!	; 0x310

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #776]!	; 0x308

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #768]!	; 0x300

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #760]!	; 0x2f8

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #752]!	; 0x2f0

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #744]!	; 0x2e8

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #728]!	; 0x2d8

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #720]!	; 0x2d0

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #712]!	; 0x2c8

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #696]!	; 0x2b8

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #688]!	; 0x2b0

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #680]!	; 0x2a8

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #664]!	; 0x298

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #656]!	; 0x290

00010dd8 <mbrtowc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #648]!	; 0x288

00010de4 <error@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #640]!	; 0x280

00010df0 <malloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #632]!	; 0x278

00010dfc <__libc_start_main@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #624]!	; 0x270

00010e08 <__freading@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #616]!	; 0x268

00010e14 <__gmon_start__@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #608]!	; 0x260

00010e20 <getopt_long@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #600]!	; 0x258

00010e2c <__ctype_b_loc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #592]!	; 0x250

00010e38 <exit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #584]!	; 0x248

00010e44 <strlen@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #576]!	; 0x240

00010e50 <strchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #568]!	; 0x238

00010e5c <__errno_location@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #560]!	; 0x230

00010e68 <__cxa_atexit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #552]!	; 0x228

00010e74 <memset@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #544]!	; 0x220

00010e80 <__printf_chk@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #536]!	; 0x218

00010e8c <fileno@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #528]!	; 0x210

00010e98 <__fprintf_chk@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #520]!	; 0x208

00010ea4 <fclose@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #512]!	; 0x200

00010eb0 <fseeko64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ebc <__uflow@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ec8 <__overflow@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ed4 <setlocale@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ee0 <strrchr@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #472]!	; 0x1d8

00010eec <nl_langinfo@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ef8 <clearerr_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #456]!	; 0x1c8

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #448]!	; 0x1c0

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #440]!	; 0x1b8

00010f1c <strncmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #432]!	; 0x1b0

00010f28 <abort@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #424]!	; 0x1a8

00010f34 <__assert_fail@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #416]!	; 0x1a0

Disassembly of section .text:

00010f40 <.text>:
   10f40:	mov	fp, #0
   10f44:	mov	lr, #0
   10f48:	pop	{r1}		; (ldr r1, [sp], #4)
   10f4c:	mov	r2, sp
   10f50:	push	{r2}		; (str r2, [sp, #-4]!)
   10f54:	push	{r0}		; (str r0, [sp, #-4]!)
   10f58:	ldr	ip, [pc, #16]	; 10f70 <__assert_fail@plt+0x3c>
   10f5c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f60:	ldr	r0, [pc, #12]	; 10f74 <__assert_fail@plt+0x40>
   10f64:	ldr	r3, [pc, #12]	; 10f78 <__assert_fail@plt+0x44>
   10f68:	bl	10dfc <__libc_start_main@plt>
   10f6c:	bl	10f28 <abort@plt>
   10f70:	andeq	r5, r1, ip, lsr r4
   10f74:	andeq	r1, r1, r0, ror r7
   10f78:	ldrdeq	r5, [r1], -ip
   10f7c:	ldr	r3, [pc, #20]	; 10f98 <__assert_fail@plt+0x64>
   10f80:	ldr	r2, [pc, #20]	; 10f9c <__assert_fail@plt+0x68>
   10f84:	add	r3, pc, r3
   10f88:	ldr	r2, [r3, r2]
   10f8c:	cmp	r2, #0
   10f90:	bxeq	lr
   10f94:	b	10e14 <__gmon_start__@plt>
   10f98:	andeq	r5, r1, r4, ror r0
   10f9c:	andeq	r0, r0, r0, ror #1
   10fa0:	ldr	r3, [pc, #28]	; 10fc4 <__assert_fail@plt+0x90>
   10fa4:	ldr	r0, [pc, #28]	; 10fc8 <__assert_fail@plt+0x94>
   10fa8:	sub	r3, r3, r0
   10fac:	cmp	r3, #6
   10fb0:	bxls	lr
   10fb4:	ldr	r3, [pc, #16]	; 10fcc <__assert_fail@plt+0x98>
   10fb8:	cmp	r3, #0
   10fbc:	bxeq	lr
   10fc0:	bx	r3
   10fc4:	andeq	r6, r2, r7, lsr r1
   10fc8:	andeq	r6, r2, r4, lsr r1
   10fcc:	andeq	r0, r0, r0
   10fd0:	ldr	r1, [pc, #36]	; 10ffc <__assert_fail@plt+0xc8>
   10fd4:	ldr	r0, [pc, #36]	; 11000 <__assert_fail@plt+0xcc>
   10fd8:	sub	r1, r1, r0
   10fdc:	asr	r1, r1, #2
   10fe0:	add	r1, r1, r1, lsr #31
   10fe4:	asrs	r1, r1, #1
   10fe8:	bxeq	lr
   10fec:	ldr	r3, [pc, #16]	; 11004 <__assert_fail@plt+0xd0>
   10ff0:	cmp	r3, #0
   10ff4:	bxeq	lr
   10ff8:	bx	r3
   10ffc:	andeq	r6, r2, r4, lsr r1
   11000:	andeq	r6, r2, r4, lsr r1
   11004:	andeq	r0, r0, r0
   11008:	push	{r4, lr}
   1100c:	ldr	r4, [pc, #24]	; 1102c <__assert_fail@plt+0xf8>
   11010:	ldrb	r3, [r4]
   11014:	cmp	r3, #0
   11018:	popne	{r4, pc}
   1101c:	bl	10fa0 <__assert_fail@plt+0x6c>
   11020:	mov	r3, #1
   11024:	strb	r3, [r4]
   11028:	pop	{r4, pc}
   1102c:	andeq	r6, r2, ip, asr r1
   11030:	ldr	r0, [pc, #40]	; 11060 <__assert_fail@plt+0x12c>
   11034:	ldr	r3, [r0]
   11038:	cmp	r3, #0
   1103c:	bne	11044 <__assert_fail@plt+0x110>
   11040:	b	10fd0 <__assert_fail@plt+0x9c>
   11044:	ldr	r3, [pc, #24]	; 11064 <__assert_fail@plt+0x130>
   11048:	cmp	r3, #0
   1104c:	beq	11040 <__assert_fail@plt+0x10c>
   11050:	push	{r4, lr}
   11054:	blx	r3
   11058:	pop	{r4, lr}
   1105c:	b	10fd0 <__assert_fail@plt+0x9c>
   11060:	andeq	r5, r2, r4, lsl pc
   11064:	andeq	r0, r0, r0
   11068:	ldr	r3, [pc, #72]	; 110b8 <__assert_fail@plt+0x184>
   1106c:	ldrb	r3, [r3]
   11070:	cmp	r3, #0
   11074:	bne	110a8 <__assert_fail@plt+0x174>
   11078:	cmp	r1, #8
   1107c:	beq	1109c <__assert_fail@plt+0x168>
   11080:	cmp	r1, #13
   11084:	beq	110b0 <__assert_fail@plt+0x17c>
   11088:	cmp	r1, #9
   1108c:	biceq	r0, r0, #7
   11090:	addeq	r0, r0, #8
   11094:	addne	r0, r0, #1
   11098:	bx	lr
   1109c:	cmp	r0, #0
   110a0:	subne	r0, r0, #1
   110a4:	bx	lr
   110a8:	add	r0, r0, #1
   110ac:	bx	lr
   110b0:	mov	r0, #0
   110b4:	bx	lr
   110b8:	andeq	r6, r2, r0, ror #2
   110bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110c0:	sub	sp, sp, #12
   110c4:	str	r0, [sp, #4]
   110c8:	mov	r8, r1
   110cc:	ldr	r1, [pc, #804]	; 113f8 <__assert_fail@plt+0x4c4>
   110d0:	bl	10ce8 <strcmp@plt>
   110d4:	cmp	r0, #0
   110d8:	bne	11120 <__assert_fail@plt+0x1ec>
   110dc:	ldr	r3, [pc, #792]	; 113fc <__assert_fail@plt+0x4c8>
   110e0:	ldr	sl, [r3]
   110e4:	mov	r2, #1
   110e8:	ldr	r3, [pc, #784]	; 11400 <__assert_fail@plt+0x4cc>
   110ec:	strb	r2, [r3, #1]
   110f0:	cmp	sl, #0
   110f4:	beq	11134 <__assert_fail@plt+0x200>
   110f8:	mov	r1, #2
   110fc:	mov	r0, sl
   11100:	bl	11b10 <__assert_fail@plt+0xbdc>
   11104:	mov	r6, #0
   11108:	mov	r4, r6
   1110c:	ldr	r9, [pc, #748]	; 11400 <__assert_fail@plt+0x4cc>
   11110:	add	r3, r9, #4
   11114:	str	r3, [sp]
   11118:	ldr	fp, [pc, #740]	; 11404 <__assert_fail@plt+0x4d0>
   1111c:	b	11224 <__assert_fail@plt+0x2f0>
   11120:	ldr	r1, [pc, #736]	; 11408 <__assert_fail@plt+0x4d4>
   11124:	ldr	r0, [sp, #4]
   11128:	bl	10f04 <fopen64@plt>
   1112c:	mov	sl, r0
   11130:	b	110f0 <__assert_fail@plt+0x1bc>
   11134:	bl	10e5c <__errno_location@plt>
   11138:	ldr	r4, [r0]
   1113c:	ldr	r2, [sp, #4]
   11140:	mov	r1, #3
   11144:	mov	r0, #0
   11148:	bl	136e0 <__assert_fail@plt+0x27ac>
   1114c:	mov	r3, r0
   11150:	ldr	r2, [pc, #692]	; 1140c <__assert_fail@plt+0x4d8>
   11154:	mov	r1, r4
   11158:	mov	r0, #0
   1115c:	bl	10de4 <error@plt>
   11160:	mov	r0, #0
   11164:	b	1132c <__assert_fail@plt+0x3f8>
   11168:	ldr	r1, [sp]
   1116c:	ldr	r0, [r9, #8]
   11170:	bl	13f7c <__assert_fail@plt+0x3048>
   11174:	str	r0, [r9, #8]
   11178:	b	11258 <__assert_fail@plt+0x324>
   1117c:	ldr	r0, [r9, #8]
   11180:	mov	r3, #10
   11184:	strb	r3, [r0, r6]
   11188:	ldr	r3, [fp]
   1118c:	mov	r2, r5
   11190:	mov	r1, #1
   11194:	bl	10d54 <fwrite_unlocked@plt>
   11198:	mov	r6, #0
   1119c:	mov	r4, r6
   111a0:	b	11224 <__assert_fail@plt+0x2f0>
   111a4:	mov	r0, r6
   111a8:	b	11268 <__assert_fail@plt+0x334>
   111ac:	cmp	r6, #0
   111b0:	beq	11214 <__assert_fail@plt+0x2e0>
   111b4:	bl	10e2c <__ctype_b_loc@plt>
   111b8:	ldr	ip, [r0]
   111bc:	ldr	r0, [r9, #8]
   111c0:	add	r1, r0, r6
   111c4:	mov	r4, r6
   111c8:	sub	r2, r4, #1
   111cc:	ldrb	r3, [r1, #-1]!
   111d0:	lsl	r3, r3, #1
   111d4:	ldrh	r3, [ip, r3]
   111d8:	tst	r3, #1
   111dc:	bne	11384 <__assert_fail@plt+0x450>
   111e0:	mov	r4, r2
   111e4:	cmp	r2, #0
   111e8:	bne	111c8 <__assert_fail@plt+0x294>
   111ec:	ldr	r0, [r9, #8]
   111f0:	mov	r3, #10
   111f4:	strb	r3, [r0, r6]
   111f8:	ldr	r3, [fp]
   111fc:	add	r2, r6, #1
   11200:	mov	r1, #1
   11204:	bl	10d54 <fwrite_unlocked@plt>
   11208:	mov	r6, #0
   1120c:	mov	r0, r6
   11210:	b	11268 <__assert_fail@plt+0x334>
   11214:	mov	r4, r0
   11218:	ldr	r3, [r9, #8]
   1121c:	strb	r7, [r3]
   11220:	mov	r6, #1
   11224:	ldr	r3, [sl, #4]
   11228:	ldr	r2, [sl, #8]
   1122c:	cmp	r3, r2
   11230:	bcs	112b4 <__assert_fail@plt+0x380>
   11234:	add	r2, r3, #1
   11238:	str	r2, [sl, #4]
   1123c:	ldrb	r7, [r3]
   11240:	cmn	r7, #1
   11244:	beq	112c4 <__assert_fail@plt+0x390>
   11248:	add	r5, r6, #1
   1124c:	ldr	r3, [r9, #4]
   11250:	cmp	r5, r3
   11254:	bcs	11168 <__assert_fail@plt+0x234>
   11258:	cmp	r7, #10
   1125c:	uxtbne	r7, r7
   11260:	movne	r0, r4
   11264:	beq	1117c <__assert_fail@plt+0x248>
   11268:	mov	r1, r7
   1126c:	bl	11068 <__assert_fail@plt+0x134>
   11270:	cmp	r0, r8
   11274:	bls	112a0 <__assert_fail@plt+0x36c>
   11278:	ldrb	r3, [r9, #12]
   1127c:	cmp	r3, #0
   11280:	bne	111ac <__assert_fail@plt+0x278>
   11284:	cmp	r6, #0
   11288:	bne	111ec <__assert_fail@plt+0x2b8>
   1128c:	mov	r4, r0
   11290:	b	11218 <__assert_fail@plt+0x2e4>
   11294:	mov	r1, #10
   11298:	bl	10ec8 <__overflow@plt>
   1129c:	b	113b8 <__assert_fail@plt+0x484>
   112a0:	mov	r4, r0
   112a4:	ldr	r3, [r9, #8]
   112a8:	strb	r7, [r3, r6]
   112ac:	add	r6, r6, #1
   112b0:	b	11224 <__assert_fail@plt+0x2f0>
   112b4:	mov	r0, sl
   112b8:	bl	10ebc <__uflow@plt>
   112bc:	mov	r7, r0
   112c0:	b	11240 <__assert_fail@plt+0x30c>
   112c4:	bl	10e5c <__errno_location@plt>
   112c8:	mov	r5, r0
   112cc:	ldr	r4, [r0]
   112d0:	ldr	r3, [sl]
   112d4:	and	r3, r3, #32
   112d8:	cmp	r3, #0
   112dc:	moveq	r4, #0
   112e0:	cmp	r6, #0
   112e4:	beq	11304 <__assert_fail@plt+0x3d0>
   112e8:	ldr	r3, [pc, #276]	; 11404 <__assert_fail@plt+0x4d0>
   112ec:	ldr	r3, [r3]
   112f0:	mov	r2, r6
   112f4:	mov	r1, #1
   112f8:	ldr	r0, [pc, #256]	; 11400 <__assert_fail@plt+0x4cc>
   112fc:	ldr	r0, [r0, #8]
   11300:	bl	10d54 <fwrite_unlocked@plt>
   11304:	ldr	r1, [pc, #236]	; 113f8 <__assert_fail@plt+0x4c4>
   11308:	ldr	r0, [sp, #4]
   1130c:	bl	10ce8 <strcmp@plt>
   11310:	cmp	r0, #0
   11314:	bne	11334 <__assert_fail@plt+0x400>
   11318:	mov	r0, sl
   1131c:	bl	10ef8 <clearerr_unlocked@plt>
   11320:	cmp	r4, #0
   11324:	moveq	r0, #1
   11328:	bne	11358 <__assert_fail@plt+0x424>
   1132c:	add	sp, sp, #12
   11330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11334:	mov	r0, sl
   11338:	bl	11b44 <__assert_fail@plt+0xc10>
   1133c:	adds	r0, r0, #0
   11340:	movne	r0, #1
   11344:	cmp	r4, #0
   11348:	movne	r0, #0
   1134c:	cmp	r0, #0
   11350:	ldrne	r4, [r5]
   11354:	b	11320 <__assert_fail@plt+0x3ec>
   11358:	ldr	r2, [sp, #4]
   1135c:	mov	r1, #3
   11360:	mov	r0, #0
   11364:	bl	136e0 <__assert_fail@plt+0x27ac>
   11368:	mov	r3, r0
   1136c:	ldr	r2, [pc, #152]	; 1140c <__assert_fail@plt+0x4d8>
   11370:	mov	r1, r4
   11374:	mov	r0, #0
   11378:	bl	10de4 <error@plt>
   1137c:	mov	r0, #0
   11380:	b	1132c <__assert_fail@plt+0x3f8>
   11384:	ldr	r3, [fp]
   11388:	mov	r2, r4
   1138c:	mov	r1, #1
   11390:	bl	10d54 <fwrite_unlocked@plt>
   11394:	ldr	r0, [fp]
   11398:	ldr	r3, [r0, #20]
   1139c:	ldr	r2, [r0, #24]
   113a0:	cmp	r3, r2
   113a4:	addcc	r2, r3, #1
   113a8:	strcc	r2, [r0, #20]
   113ac:	movcc	r2, #10
   113b0:	strbcc	r2, [r3]
   113b4:	bcs	11294 <__assert_fail@plt+0x360>
   113b8:	ldr	r5, [r9, #8]
   113bc:	sub	r6, r6, r4
   113c0:	mov	r2, r6
   113c4:	add	r1, r5, r4
   113c8:	mov	r0, r5
   113cc:	bl	10d0c <memmove@plt>
   113d0:	cmp	r6, #0
   113d4:	beq	111a4 <__assert_fail@plt+0x270>
   113d8:	mov	r4, r5
   113dc:	add	r5, r5, r6
   113e0:	mov	r0, #0
   113e4:	ldrb	r1, [r4], #1
   113e8:	bl	11068 <__assert_fail@plt+0x134>
   113ec:	cmp	r5, r4
   113f0:	bne	113e4 <__assert_fail@plt+0x4b0>
   113f4:	b	11268 <__assert_fail@plt+0x334>
   113f8:	andeq	r5, r1, r0, lsr #10
   113fc:	andeq	r6, r2, r0, asr r1
   11400:	andeq	r6, r2, r0, ror #2
   11404:	andeq	r6, r2, r4, asr r1
   11408:	andeq	r5, r1, r4, lsr #10
   1140c:	andeq	r5, r1, ip, lsl r9
   11410:	push	{lr}		; (str lr, [sp, #-4]!)
   11414:	sub	sp, sp, #60	; 0x3c
   11418:	subs	r6, r0, #0
   1141c:	beq	11458 <__assert_fail@plt+0x524>
   11420:	ldr	r3, [pc, #752]	; 11718 <__assert_fail@plt+0x7e4>
   11424:	ldr	r4, [r3]
   11428:	mov	r2, #5
   1142c:	ldr	r1, [pc, #744]	; 1171c <__assert_fail@plt+0x7e8>
   11430:	mov	r0, #0
   11434:	bl	10d78 <dcgettext@plt>
   11438:	ldr	r3, [pc, #736]	; 11720 <__assert_fail@plt+0x7ec>
   1143c:	ldr	r3, [r3]
   11440:	mov	r2, r0
   11444:	mov	r1, #1
   11448:	mov	r0, r4
   1144c:	bl	10e98 <__fprintf_chk@plt>
   11450:	mov	r0, r6
   11454:	bl	10e38 <exit@plt>
   11458:	mov	r2, #5
   1145c:	ldr	r1, [pc, #704]	; 11724 <__assert_fail@plt+0x7f0>
   11460:	mov	r0, #0
   11464:	bl	10d78 <dcgettext@plt>
   11468:	ldr	r3, [pc, #688]	; 11720 <__assert_fail@plt+0x7ec>
   1146c:	ldr	r2, [r3]
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	bl	10e80 <__printf_chk@plt>
   1147c:	mov	r2, #5
   11480:	ldr	r1, [pc, #672]	; 11728 <__assert_fail@plt+0x7f4>
   11484:	mov	r0, #0
   11488:	bl	10d78 <dcgettext@plt>
   1148c:	ldr	r4, [pc, #664]	; 1172c <__assert_fail@plt+0x7f8>
   11490:	ldr	r1, [r4]
   11494:	bl	10cd0 <fputs_unlocked@plt>
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #652]	; 11730 <__assert_fail@plt+0x7fc>
   114a0:	mov	r0, #0
   114a4:	bl	10d78 <dcgettext@plt>
   114a8:	ldr	r1, [r4]
   114ac:	bl	10cd0 <fputs_unlocked@plt>
   114b0:	mov	r2, #5
   114b4:	ldr	r1, [pc, #632]	; 11734 <__assert_fail@plt+0x800>
   114b8:	mov	r0, #0
   114bc:	bl	10d78 <dcgettext@plt>
   114c0:	ldr	r1, [r4]
   114c4:	bl	10cd0 <fputs_unlocked@plt>
   114c8:	mov	r2, #5
   114cc:	ldr	r1, [pc, #612]	; 11738 <__assert_fail@plt+0x804>
   114d0:	mov	r0, #0
   114d4:	bl	10d78 <dcgettext@plt>
   114d8:	ldr	r1, [r4]
   114dc:	bl	10cd0 <fputs_unlocked@plt>
   114e0:	mov	r2, #5
   114e4:	ldr	r1, [pc, #592]	; 1173c <__assert_fail@plt+0x808>
   114e8:	mov	r0, #0
   114ec:	bl	10d78 <dcgettext@plt>
   114f0:	ldr	r1, [r4]
   114f4:	bl	10cd0 <fputs_unlocked@plt>
   114f8:	mov	r2, #5
   114fc:	ldr	r1, [pc, #572]	; 11740 <__assert_fail@plt+0x80c>
   11500:	mov	r0, #0
   11504:	bl	10d78 <dcgettext@plt>
   11508:	ldr	r1, [r4]
   1150c:	bl	10cd0 <fputs_unlocked@plt>
   11510:	mov	ip, sp
   11514:	ldr	lr, [pc, #552]	; 11744 <__assert_fail@plt+0x810>
   11518:	ldm	lr!, {r0, r1, r2, r3}
   1151c:	stmia	ip!, {r0, r1, r2, r3}
   11520:	ldm	lr!, {r0, r1, r2, r3}
   11524:	stmia	ip!, {r0, r1, r2, r3}
   11528:	ldm	lr!, {r0, r1, r2, r3}
   1152c:	stmia	ip!, {r0, r1, r2, r3}
   11530:	ldm	lr, {r0, r1}
   11534:	stm	ip, {r0, r1}
   11538:	ldr	r1, [sp]
   1153c:	cmp	r1, #0
   11540:	moveq	r4, sp
   11544:	beq	1156c <__assert_fail@plt+0x638>
   11548:	mov	r4, sp
   1154c:	ldr	r5, [pc, #500]	; 11748 <__assert_fail@plt+0x814>
   11550:	mov	r0, r5
   11554:	bl	10ce8 <strcmp@plt>
   11558:	cmp	r0, #0
   1155c:	beq	1156c <__assert_fail@plt+0x638>
   11560:	ldr	r1, [r4, #8]!
   11564:	cmp	r1, #0
   11568:	bne	11550 <__assert_fail@plt+0x61c>
   1156c:	ldr	r4, [r4, #4]
   11570:	cmp	r4, #0
   11574:	beq	11688 <__assert_fail@plt+0x754>
   11578:	mov	r2, #5
   1157c:	ldr	r1, [pc, #456]	; 1174c <__assert_fail@plt+0x818>
   11580:	mov	r0, #0
   11584:	bl	10d78 <dcgettext@plt>
   11588:	ldr	r3, [pc, #448]	; 11750 <__assert_fail@plt+0x81c>
   1158c:	ldr	r2, [pc, #448]	; 11754 <__assert_fail@plt+0x820>
   11590:	mov	r1, r0
   11594:	mov	r0, #1
   11598:	bl	10e80 <__printf_chk@plt>
   1159c:	mov	r1, #0
   115a0:	mov	r0, #5
   115a4:	bl	10ed4 <setlocale@plt>
   115a8:	cmp	r0, #0
   115ac:	beq	115c4 <__assert_fail@plt+0x690>
   115b0:	mov	r2, #3
   115b4:	ldr	r1, [pc, #412]	; 11758 <__assert_fail@plt+0x824>
   115b8:	bl	10f1c <strncmp@plt>
   115bc:	cmp	r0, #0
   115c0:	bne	11624 <__assert_fail@plt+0x6f0>
   115c4:	mov	r2, #5
   115c8:	ldr	r1, [pc, #396]	; 1175c <__assert_fail@plt+0x828>
   115cc:	mov	r0, #0
   115d0:	bl	10d78 <dcgettext@plt>
   115d4:	ldr	r5, [pc, #364]	; 11748 <__assert_fail@plt+0x814>
   115d8:	mov	r3, r5
   115dc:	ldr	r2, [pc, #364]	; 11750 <__assert_fail@plt+0x81c>
   115e0:	mov	r1, r0
   115e4:	mov	r0, #1
   115e8:	bl	10e80 <__printf_chk@plt>
   115ec:	mov	r2, #5
   115f0:	ldr	r1, [pc, #360]	; 11760 <__assert_fail@plt+0x82c>
   115f4:	mov	r0, #0
   115f8:	bl	10d78 <dcgettext@plt>
   115fc:	mov	r1, r0
   11600:	ldr	r2, [pc, #348]	; 11764 <__assert_fail@plt+0x830>
   11604:	ldr	r3, [pc, #348]	; 11768 <__assert_fail@plt+0x834>
   11608:	cmp	r4, r5
   1160c:	movne	r3, r2
   11610:	mov	r2, r4
   11614:	mov	r0, #1
   11618:	bl	10e80 <__printf_chk@plt>
   1161c:	b	11450 <__assert_fail@plt+0x51c>
   11620:	ldr	r4, [pc, #288]	; 11748 <__assert_fail@plt+0x814>
   11624:	mov	r2, #5
   11628:	ldr	r1, [pc, #316]	; 1176c <__assert_fail@plt+0x838>
   1162c:	mov	r0, #0
   11630:	bl	10d78 <dcgettext@plt>
   11634:	ldr	r3, [pc, #240]	; 1172c <__assert_fail@plt+0x7f8>
   11638:	ldr	r1, [r3]
   1163c:	bl	10cd0 <fputs_unlocked@plt>
   11640:	b	115c4 <__assert_fail@plt+0x690>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #268]	; 1175c <__assert_fail@plt+0x828>
   1164c:	mov	r0, #0
   11650:	bl	10d78 <dcgettext@plt>
   11654:	ldr	r4, [pc, #236]	; 11748 <__assert_fail@plt+0x814>
   11658:	mov	r3, r4
   1165c:	ldr	r2, [pc, #236]	; 11750 <__assert_fail@plt+0x81c>
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	bl	10e80 <__printf_chk@plt>
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #232]	; 11760 <__assert_fail@plt+0x82c>
   11674:	mov	r0, #0
   11678:	bl	10d78 <dcgettext@plt>
   1167c:	mov	r1, r0
   11680:	ldr	r3, [pc, #224]	; 11768 <__assert_fail@plt+0x834>
   11684:	b	11610 <__assert_fail@plt+0x6dc>
   11688:	mov	r2, #5
   1168c:	ldr	r1, [pc, #184]	; 1174c <__assert_fail@plt+0x818>
   11690:	mov	r0, #0
   11694:	bl	10d78 <dcgettext@plt>
   11698:	ldr	r3, [pc, #176]	; 11750 <__assert_fail@plt+0x81c>
   1169c:	ldr	r2, [pc, #176]	; 11754 <__assert_fail@plt+0x820>
   116a0:	mov	r1, r0
   116a4:	mov	r0, #1
   116a8:	bl	10e80 <__printf_chk@plt>
   116ac:	mov	r1, #0
   116b0:	mov	r0, #5
   116b4:	bl	10ed4 <setlocale@plt>
   116b8:	cmp	r0, #0
   116bc:	beq	11644 <__assert_fail@plt+0x710>
   116c0:	mov	r2, #3
   116c4:	ldr	r1, [pc, #140]	; 11758 <__assert_fail@plt+0x824>
   116c8:	bl	10f1c <strncmp@plt>
   116cc:	cmp	r0, #0
   116d0:	bne	11620 <__assert_fail@plt+0x6ec>
   116d4:	mov	r2, #5
   116d8:	ldr	r1, [pc, #124]	; 1175c <__assert_fail@plt+0x828>
   116dc:	mov	r0, #0
   116e0:	bl	10d78 <dcgettext@plt>
   116e4:	ldr	r4, [pc, #92]	; 11748 <__assert_fail@plt+0x814>
   116e8:	mov	r3, r4
   116ec:	ldr	r2, [pc, #92]	; 11750 <__assert_fail@plt+0x81c>
   116f0:	mov	r1, r0
   116f4:	mov	r0, #1
   116f8:	bl	10e80 <__printf_chk@plt>
   116fc:	mov	r2, #5
   11700:	ldr	r1, [pc, #88]	; 11760 <__assert_fail@plt+0x82c>
   11704:	mov	r0, #0
   11708:	bl	10d78 <dcgettext@plt>
   1170c:	mov	r1, r0
   11710:	ldr	r3, [pc, #80]	; 11768 <__assert_fail@plt+0x834>
   11714:	b	11610 <__assert_fail@plt+0x6dc>
   11718:	andeq	r6, r2, r8, asr #2
   1171c:	andeq	r5, r1, r0, lsr r5
   11720:	andeq	r6, r2, r8, ror r1
   11724:	andeq	r5, r1, r8, asr r5
   11728:	andeq	r5, r1, ip, ror r5
   1172c:	andeq	r6, r2, r4, asr r1
   11730:			; <UNDEFINED> instruction: 0x000155b8
   11734:	strdeq	r5, [r1], -r0
   11738:	andeq	r5, r1, ip, lsr r6
   1173c:	ldrdeq	r5, [r1], -r0
   11740:	andeq	r5, r1, r0, lsl #14
   11744:	andeq	r5, r1, r4, ror #8
   11748:	andeq	r5, r1, r8, lsr #10
   1174c:	andeq	r5, r1, r8, lsr r7
   11750:	andeq	r5, r1, r0, asr r7
   11754:	andeq	r5, r1, r8, ror r7
   11758:	andeq	r5, r1, r8, lsl #15
   1175c:	ldrdeq	r5, [r1], -r4
   11760:	strdeq	r5, [r1], -r0
   11764:	andeq	r5, r1, r8, ror r5
   11768:	andeq	r5, r1, r0, ror r8
   1176c:	andeq	r5, r1, ip, lsl #15
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11774:	sub	sp, sp, #36	; 0x24
   11778:	mov	r6, r0
   1177c:	mov	r4, r1
   11780:	ldr	r0, [r1]
   11784:	bl	11cf8 <__assert_fail@plt+0xdc4>
   11788:	ldr	r1, [pc, #520]	; 11998 <__assert_fail@plt+0xa64>
   1178c:	mov	r0, #6
   11790:	bl	10ed4 <setlocale@plt>
   11794:	ldr	r5, [pc, #512]	; 1199c <__assert_fail@plt+0xa68>
   11798:	ldr	r1, [pc, #512]	; 119a0 <__assert_fail@plt+0xa6c>
   1179c:	mov	r0, r5
   117a0:	bl	10f10 <bindtextdomain@plt>
   117a4:	mov	r0, r5
   117a8:	bl	10d90 <textdomain@plt>
   117ac:	ldr	r0, [pc, #496]	; 119a4 <__assert_fail@plt+0xa70>
   117b0:	bl	15440 <__assert_fail@plt+0x450c>
   117b4:	ldr	r3, [pc, #492]	; 119a8 <__assert_fail@plt+0xa74>
   117b8:	mov	r2, #0
   117bc:	strb	r2, [r3, #1]
   117c0:	strb	r2, [r3]
   117c4:	strb	r2, [r3, #12]
   117c8:	mov	r9, #80	; 0x50
   117cc:	ldr	r5, [pc, #472]	; 119ac <__assert_fail@plt+0xa78>
   117d0:	add	r7, r5, #56	; 0x38
   117d4:	ldr	r8, [pc, #468]	; 119b0 <__assert_fail@plt+0xa7c>
   117d8:	ldr	fp, [pc, #468]	; 119b4 <__assert_fail@plt+0xa80>
   117dc:	ldr	sl, [pc, #436]	; 11998 <__assert_fail@plt+0xa64>
   117e0:	mov	r3, #0
   117e4:	str	r3, [sp]
   117e8:	mov	r3, r7
   117ec:	add	r2, r5, #152	; 0x98
   117f0:	mov	r1, r4
   117f4:	mov	r0, r6
   117f8:	bl	10e20 <getopt_long@plt>
   117fc:	cmn	r0, #1
   11800:	beq	11908 <__assert_fail@plt+0x9d4>
   11804:	cmp	r0, #57	; 0x39
   11808:	bgt	1182c <__assert_fail@plt+0x8f8>
   1180c:	cmp	r0, #48	; 0x30
   11810:	bge	1186c <__assert_fail@plt+0x938>
   11814:	cmn	r0, #3
   11818:	beq	118d4 <__assert_fail@plt+0x9a0>
   1181c:	cmn	r0, #2
   11820:	bne	11844 <__assert_fail@plt+0x910>
   11824:	mov	r0, #0
   11828:	bl	11410 <__assert_fail@plt+0x4dc>
   1182c:	cmp	r0, #115	; 0x73
   11830:	beq	1185c <__assert_fail@plt+0x928>
   11834:	cmp	r0, #119	; 0x77
   11838:	beq	1188c <__assert_fail@plt+0x958>
   1183c:	cmp	r0, #98	; 0x62
   11840:	beq	1184c <__assert_fail@plt+0x918>
   11844:	mov	r0, #1
   11848:	bl	11410 <__assert_fail@plt+0x4dc>
   1184c:	mov	r2, #1
   11850:	ldr	r3, [pc, #336]	; 119a8 <__assert_fail@plt+0xa74>
   11854:	strb	r2, [r3]
   11858:	b	117e0 <__assert_fail@plt+0x8ac>
   1185c:	mov	r2, #1
   11860:	ldr	r3, [pc, #320]	; 119a8 <__assert_fail@plt+0xa74>
   11864:	strb	r2, [r3, #12]
   11868:	b	117e0 <__assert_fail@plt+0x8ac>
   1186c:	ldr	r3, [r8]
   11870:	cmp	r3, #0
   11874:	subne	r3, r3, #1
   11878:	strbeq	r0, [sp, #28]
   1187c:	moveq	r3, #0
   11880:	strbeq	r3, [sp, #29]
   11884:	addeq	r3, sp, #28
   11888:	str	r3, [r8]
   1188c:	ldr	r9, [r8]
   11890:	mov	r2, #5
   11894:	mov	r1, fp
   11898:	mov	r0, #0
   1189c:	bl	10d78 <dcgettext@plt>
   118a0:	mov	r3, #0
   118a4:	str	r3, [sp, #16]
   118a8:	str	r0, [sp, #12]
   118ac:	str	sl, [sp, #8]
   118b0:	mvn	r2, #9
   118b4:	mov	r3, #0
   118b8:	strd	r2, [sp]
   118bc:	mov	r2, #1
   118c0:	mov	r3, #0
   118c4:	mov	r0, r9
   118c8:	bl	144fc <__assert_fail@plt+0x35c8>
   118cc:	mov	r9, r0
   118d0:	b	117e0 <__assert_fail@plt+0x8ac>
   118d4:	mov	r4, #0
   118d8:	str	r4, [sp, #4]
   118dc:	ldr	r3, [pc, #212]	; 119b8 <__assert_fail@plt+0xa84>
   118e0:	str	r3, [sp]
   118e4:	ldr	r3, [pc, #208]	; 119bc <__assert_fail@plt+0xa88>
   118e8:	ldr	r3, [r3]
   118ec:	ldr	r2, [pc, #204]	; 119c0 <__assert_fail@plt+0xa8c>
   118f0:	ldr	r1, [pc, #204]	; 119c4 <__assert_fail@plt+0xa90>
   118f4:	ldr	r0, [pc, #204]	; 119c8 <__assert_fail@plt+0xa94>
   118f8:	ldr	r0, [r0]
   118fc:	bl	13d14 <__assert_fail@plt+0x2de0>
   11900:	mov	r0, r4
   11904:	bl	10e38 <exit@plt>
   11908:	ldr	r3, [pc, #188]	; 119cc <__assert_fail@plt+0xa98>
   1190c:	ldr	r7, [r3]
   11910:	cmp	r6, r7
   11914:	movne	r5, #1
   11918:	bne	11948 <__assert_fail@plt+0xa14>
   1191c:	mov	r1, r9
   11920:	ldr	r0, [pc, #168]	; 119d0 <__assert_fail@plt+0xa9c>
   11924:	bl	110bc <__assert_fail@plt+0x188>
   11928:	mov	r5, r0
   1192c:	b	11950 <__assert_fail@plt+0xa1c>
   11930:	mov	r1, r9
   11934:	ldr	r0, [r4, r7, lsl #2]
   11938:	bl	110bc <__assert_fail@plt+0x188>
   1193c:	and	r5, r5, r0
   11940:	uxtb	r5, r5
   11944:	add	r7, r7, #1
   11948:	cmp	r7, r6
   1194c:	blt	11930 <__assert_fail@plt+0x9fc>
   11950:	ldr	r3, [pc, #80]	; 119a8 <__assert_fail@plt+0xa74>
   11954:	ldrb	r3, [r3, #1]
   11958:	cmp	r3, #0
   1195c:	bne	11970 <__assert_fail@plt+0xa3c>
   11960:	eor	r0, r5, #1
   11964:	uxtb	r0, r0
   11968:	add	sp, sp, #36	; 0x24
   1196c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11970:	ldr	r3, [pc, #92]	; 119d4 <__assert_fail@plt+0xaa0>
   11974:	ldr	r0, [r3]
   11978:	bl	11b44 <__assert_fail@plt+0xc10>
   1197c:	cmn	r0, #1
   11980:	bne	11960 <__assert_fail@plt+0xa2c>
   11984:	bl	10e5c <__errno_location@plt>
   11988:	ldr	r2, [pc, #64]	; 119d0 <__assert_fail@plt+0xa9c>
   1198c:	ldr	r1, [r0]
   11990:	mov	r0, #1
   11994:	bl	10de4 <error@plt>
   11998:	andeq	r5, r1, r8, ror r5
   1199c:	andeq	r5, r1, ip, ror r7
   119a0:	andeq	r5, r1, r4, lsr #16
   119a4:	strdeq	r1, [r1], -r8
   119a8:	andeq	r6, r2, r0, ror #2
   119ac:	andeq	r5, r1, r4, ror #8
   119b0:	andeq	r6, r2, r8, asr r1
   119b4:	andeq	r5, r1, ip, lsr r8
   119b8:	andeq	r5, r1, r8, asr r8
   119bc:	andeq	r6, r2, ip, ror #1
   119c0:	andeq	r5, r1, r8, ror r7
   119c4:	andeq	r5, r1, r8, lsr #10
   119c8:	andeq	r6, r2, r4, asr r1
   119cc:	andeq	r6, r2, r0, asr #2
   119d0:	andeq	r5, r1, r0, lsr #10
   119d4:	andeq	r6, r2, r0, asr r1
   119d8:	ldr	r3, [pc, #4]	; 119e4 <__assert_fail@plt+0xab0>
   119dc:	str	r0, [r3]
   119e0:	bx	lr
   119e4:	andeq	r6, r2, r0, ror r1
   119e8:	ldr	r3, [pc, #4]	; 119f4 <__assert_fail@plt+0xac0>
   119ec:	strb	r0, [r3, #4]
   119f0:	bx	lr
   119f4:	andeq	r6, r2, r0, ror r1
   119f8:	push	{r4, r5, r6, lr}
   119fc:	sub	sp, sp, #8
   11a00:	ldr	r3, [pc, #200]	; 11ad0 <__assert_fail@plt+0xb9c>
   11a04:	ldr	r0, [r3]
   11a08:	bl	14b6c <__assert_fail@plt+0x3c38>
   11a0c:	cmp	r0, #0
   11a10:	beq	11a34 <__assert_fail@plt+0xb00>
   11a14:	ldr	r3, [pc, #184]	; 11ad4 <__assert_fail@plt+0xba0>
   11a18:	ldrb	r3, [r3, #4]
   11a1c:	cmp	r3, #0
   11a20:	beq	11a50 <__assert_fail@plt+0xb1c>
   11a24:	bl	10e5c <__errno_location@plt>
   11a28:	ldr	r3, [r0]
   11a2c:	cmp	r3, #32
   11a30:	bne	11a50 <__assert_fail@plt+0xb1c>
   11a34:	ldr	r3, [pc, #156]	; 11ad8 <__assert_fail@plt+0xba4>
   11a38:	ldr	r0, [r3]
   11a3c:	bl	14b6c <__assert_fail@plt+0x3c38>
   11a40:	cmp	r0, #0
   11a44:	bne	11ac4 <__assert_fail@plt+0xb90>
   11a48:	add	sp, sp, #8
   11a4c:	pop	{r4, r5, r6, pc}
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #128]	; 11adc <__assert_fail@plt+0xba8>
   11a58:	mov	r0, #0
   11a5c:	bl	10d78 <dcgettext@plt>
   11a60:	mov	r4, r0
   11a64:	ldr	r3, [pc, #104]	; 11ad4 <__assert_fail@plt+0xba0>
   11a68:	ldr	r5, [r3]
   11a6c:	cmp	r5, #0
   11a70:	beq	11aa8 <__assert_fail@plt+0xb74>
   11a74:	bl	10e5c <__errno_location@plt>
   11a78:	ldr	r6, [r0]
   11a7c:	mov	r0, r5
   11a80:	bl	136c0 <__assert_fail@plt+0x278c>
   11a84:	str	r4, [sp]
   11a88:	mov	r3, r0
   11a8c:	ldr	r2, [pc, #76]	; 11ae0 <__assert_fail@plt+0xbac>
   11a90:	mov	r1, r6
   11a94:	mov	r0, #0
   11a98:	bl	10de4 <error@plt>
   11a9c:	ldr	r3, [pc, #64]	; 11ae4 <__assert_fail@plt+0xbb0>
   11aa0:	ldr	r0, [r3]
   11aa4:	bl	10d24 <_exit@plt>
   11aa8:	bl	10e5c <__errno_location@plt>
   11aac:	mov	r3, r4
   11ab0:	ldr	r2, [pc, #48]	; 11ae8 <__assert_fail@plt+0xbb4>
   11ab4:	ldr	r1, [r0]
   11ab8:	mov	r0, #0
   11abc:	bl	10de4 <error@plt>
   11ac0:	b	11a9c <__assert_fail@plt+0xb68>
   11ac4:	ldr	r3, [pc, #24]	; 11ae4 <__assert_fail@plt+0xbb0>
   11ac8:	ldr	r0, [r3]
   11acc:	bl	10d24 <_exit@plt>
   11ad0:	andeq	r6, r2, r4, asr r1
   11ad4:	andeq	r6, r2, r0, ror r1
   11ad8:	andeq	r6, r2, r8, asr #2
   11adc:	andeq	r5, r1, ip, lsl #18
   11ae0:	andeq	r5, r1, r8, lsl r9
   11ae4:	strdeq	r6, [r2], -r0
   11ae8:	andeq	r5, r1, ip, lsl r9
   11aec:	push	{r4, r5, lr}
   11af0:	sub	sp, sp, #20
   11af4:	ldr	r1, [sp, #40]	; 0x28
   11af8:	str	r1, [sp, #8]
   11afc:	ldrd	r4, [sp, #32]
   11b00:	strd	r4, [sp]
   11b04:	bl	10cf4 <posix_fadvise64@plt>
   11b08:	add	sp, sp, #20
   11b0c:	pop	{r4, r5, pc}
   11b10:	cmp	r0, #0
   11b14:	bxeq	lr
   11b18:	push	{r4, lr}
   11b1c:	sub	sp, sp, #16
   11b20:	mov	r4, r1
   11b24:	bl	10e8c <fileno@plt>
   11b28:	str	r4, [sp, #8]
   11b2c:	mov	r2, #0
   11b30:	mov	r3, #0
   11b34:	strd	r2, [sp]
   11b38:	bl	10cf4 <posix_fadvise64@plt>
   11b3c:	add	sp, sp, #16
   11b40:	pop	{r4, pc}
   11b44:	push	{r4, r5, r6, lr}
   11b48:	sub	sp, sp, #8
   11b4c:	mov	r4, r0
   11b50:	bl	10e8c <fileno@plt>
   11b54:	cmp	r0, #0
   11b58:	blt	11bd0 <__assert_fail@plt+0xc9c>
   11b5c:	mov	r0, r4
   11b60:	bl	10e08 <__freading@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11b9c <__assert_fail@plt+0xc68>
   11b6c:	mov	r0, r4
   11b70:	bl	10e8c <fileno@plt>
   11b74:	mov	r3, #1
   11b78:	str	r3, [sp]
   11b7c:	mov	r2, #0
   11b80:	mov	r3, #0
   11b84:	bl	10db4 <lseek64@plt>
   11b88:	mvn	r2, #0
   11b8c:	mvn	r3, #0
   11b90:	cmp	r1, r3
   11b94:	cmpeq	r0, r2
   11b98:	beq	11bdc <__assert_fail@plt+0xca8>
   11b9c:	mov	r0, r4
   11ba0:	bl	11bec <__assert_fail@plt+0xcb8>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11bdc <__assert_fail@plt+0xca8>
   11bac:	bl	10e5c <__errno_location@plt>
   11bb0:	mov	r5, r0
   11bb4:	ldr	r6, [r0]
   11bb8:	mov	r0, r4
   11bbc:	bl	10ea4 <fclose@plt>
   11bc0:	cmp	r6, #0
   11bc4:	strne	r6, [r5]
   11bc8:	mvnne	r0, #0
   11bcc:	b	11be4 <__assert_fail@plt+0xcb0>
   11bd0:	mov	r0, r4
   11bd4:	bl	10ea4 <fclose@plt>
   11bd8:	b	11be4 <__assert_fail@plt+0xcb0>
   11bdc:	mov	r0, r4
   11be0:	bl	10ea4 <fclose@plt>
   11be4:	add	sp, sp, #8
   11be8:	pop	{r4, r5, r6, pc}
   11bec:	push	{r4, lr}
   11bf0:	sub	sp, sp, #8
   11bf4:	subs	r4, r0, #0
   11bf8:	beq	11c0c <__assert_fail@plt+0xcd8>
   11bfc:	mov	r0, r4
   11c00:	bl	10e08 <__freading@plt>
   11c04:	cmp	r0, #0
   11c08:	bne	11c1c <__assert_fail@plt+0xce8>
   11c0c:	mov	r0, r4
   11c10:	bl	10d00 <fflush@plt>
   11c14:	add	sp, sp, #8
   11c18:	pop	{r4, pc}
   11c1c:	ldr	r3, [r4]
   11c20:	tst	r3, #256	; 0x100
   11c24:	bne	11c34 <__assert_fail@plt+0xd00>
   11c28:	mov	r0, r4
   11c2c:	bl	10d00 <fflush@plt>
   11c30:	b	11c14 <__assert_fail@plt+0xce0>
   11c34:	mov	r3, #1
   11c38:	str	r3, [sp]
   11c3c:	mov	r2, #0
   11c40:	mov	r3, #0
   11c44:	mov	r0, r4
   11c48:	bl	11c50 <__assert_fail@plt+0xd1c>
   11c4c:	b	11c28 <__assert_fail@plt+0xcf4>
   11c50:	push	{r4, r5, r6, r7, lr}
   11c54:	sub	sp, sp, #12
   11c58:	mov	r4, r0
   11c5c:	mov	r6, r2
   11c60:	mov	r7, r3
   11c64:	ldr	r5, [sp, #32]
   11c68:	ldr	r2, [r0, #8]
   11c6c:	ldr	r3, [r0, #4]
   11c70:	cmp	r2, r3
   11c74:	beq	11c94 <__assert_fail@plt+0xd60>
   11c78:	str	r5, [sp]
   11c7c:	mov	r2, r6
   11c80:	mov	r3, r7
   11c84:	mov	r0, r4
   11c88:	bl	10eb0 <fseeko64@plt>
   11c8c:	add	sp, sp, #12
   11c90:	pop	{r4, r5, r6, r7, pc}
   11c94:	ldr	r2, [r0, #20]
   11c98:	ldr	r3, [r0, #16]
   11c9c:	cmp	r2, r3
   11ca0:	bne	11c78 <__assert_fail@plt+0xd44>
   11ca4:	ldr	r3, [r0, #36]	; 0x24
   11ca8:	cmp	r3, #0
   11cac:	bne	11c78 <__assert_fail@plt+0xd44>
   11cb0:	bl	10e8c <fileno@plt>
   11cb4:	str	r5, [sp]
   11cb8:	mov	r2, r6
   11cbc:	mov	r3, r7
   11cc0:	bl	10db4 <lseek64@plt>
   11cc4:	mvn	r2, #0
   11cc8:	mvn	r3, #0
   11ccc:	cmp	r1, r3
   11cd0:	cmpeq	r0, r2
   11cd4:	beq	11cf0 <__assert_fail@plt+0xdbc>
   11cd8:	ldr	r3, [r4]
   11cdc:	bic	r3, r3, #16
   11ce0:	str	r3, [r4]
   11ce4:	strd	r0, [r4, #80]	; 0x50
   11ce8:	mov	r0, #0
   11cec:	b	11c8c <__assert_fail@plt+0xd58>
   11cf0:	mvn	r0, #0
   11cf4:	b	11c8c <__assert_fail@plt+0xd58>
   11cf8:	push	{r4, r5, r6, lr}
   11cfc:	subs	r4, r0, #0
   11d00:	beq	11d78 <__assert_fail@plt+0xe44>
   11d04:	mov	r1, #47	; 0x2f
   11d08:	mov	r0, r4
   11d0c:	bl	10ee0 <strrchr@plt>
   11d10:	cmp	r0, #0
   11d14:	addne	r5, r0, #1
   11d18:	moveq	r5, r4
   11d1c:	sub	r3, r5, r4
   11d20:	cmp	r3, #6
   11d24:	ble	11d64 <__assert_fail@plt+0xe30>
   11d28:	mov	r2, #7
   11d2c:	ldr	r1, [pc, #96]	; 11d94 <__assert_fail@plt+0xe60>
   11d30:	sub	r0, r5, #7
   11d34:	bl	10f1c <strncmp@plt>
   11d38:	cmp	r0, #0
   11d3c:	bne	11d64 <__assert_fail@plt+0xe30>
   11d40:	mov	r2, #3
   11d44:	ldr	r1, [pc, #76]	; 11d98 <__assert_fail@plt+0xe64>
   11d48:	mov	r0, r5
   11d4c:	bl	10f1c <strncmp@plt>
   11d50:	cmp	r0, #0
   11d54:	addeq	r4, r5, #3
   11d58:	ldreq	r3, [pc, #60]	; 11d9c <__assert_fail@plt+0xe68>
   11d5c:	streq	r4, [r3]
   11d60:	movne	r4, r5
   11d64:	ldr	r3, [pc, #52]	; 11da0 <__assert_fail@plt+0xe6c>
   11d68:	str	r4, [r3]
   11d6c:	ldr	r3, [pc, #48]	; 11da4 <__assert_fail@plt+0xe70>
   11d70:	str	r4, [r3]
   11d74:	pop	{r4, r5, r6, pc}
   11d78:	ldr	r3, [pc, #40]	; 11da8 <__assert_fail@plt+0xe74>
   11d7c:	ldr	r3, [r3]
   11d80:	mov	r2, #55	; 0x37
   11d84:	mov	r1, #1
   11d88:	ldr	r0, [pc, #28]	; 11dac <__assert_fail@plt+0xe78>
   11d8c:	bl	10da8 <fwrite@plt>
   11d90:	bl	10f28 <abort@plt>
   11d94:	andeq	r5, r1, r8, asr r9
   11d98:	andeq	r5, r1, r0, ror #18
   11d9c:	andeq	r6, r2, r8, lsr r1
   11da0:	andeq	r6, r2, r8, ror r1
   11da4:	andeq	r6, r2, ip, lsr r1
   11da8:	andeq	r6, r2, r8, asr #2
   11dac:	andeq	r5, r1, r0, lsr #18
   11db0:	push	{r4, r5, r6, lr}
   11db4:	mov	r5, r0
   11db8:	mov	r4, r1
   11dbc:	mov	r2, #48	; 0x30
   11dc0:	mov	r1, #0
   11dc4:	bl	10e74 <memset@plt>
   11dc8:	cmp	r4, #10
   11dcc:	beq	11ddc <__assert_fail@plt+0xea8>
   11dd0:	str	r4, [r5]
   11dd4:	mov	r0, r5
   11dd8:	pop	{r4, r5, r6, pc}
   11ddc:	bl	10f28 <abort@plt>
   11de0:	push	{r4, r5, r6, lr}
   11de4:	mov	r4, r0
   11de8:	mov	r5, r1
   11dec:	mov	r2, #5
   11df0:	mov	r1, r0
   11df4:	mov	r0, #0
   11df8:	bl	10d78 <dcgettext@plt>
   11dfc:	cmp	r4, r0
   11e00:	popne	{r4, r5, r6, pc}
   11e04:	bl	14c3c <__assert_fail@plt+0x3d08>
   11e08:	ldrb	r3, [r0]
   11e0c:	bic	r3, r3, #32
   11e10:	cmp	r3, #85	; 0x55
   11e14:	beq	11e90 <__assert_fail@plt+0xf5c>
   11e18:	cmp	r3, #71	; 0x47
   11e1c:	bne	11eec <__assert_fail@plt+0xfb8>
   11e20:	ldrb	r3, [r0, #1]
   11e24:	bic	r3, r3, #32
   11e28:	cmp	r3, #66	; 0x42
   11e2c:	bne	11eec <__assert_fail@plt+0xfb8>
   11e30:	ldrb	r3, [r0, #2]
   11e34:	cmp	r3, #49	; 0x31
   11e38:	bne	11eec <__assert_fail@plt+0xfb8>
   11e3c:	ldrb	r3, [r0, #3]
   11e40:	cmp	r3, #56	; 0x38
   11e44:	bne	11eec <__assert_fail@plt+0xfb8>
   11e48:	ldrb	r3, [r0, #4]
   11e4c:	cmp	r3, #48	; 0x30
   11e50:	bne	11eec <__assert_fail@plt+0xfb8>
   11e54:	ldrb	r3, [r0, #5]
   11e58:	cmp	r3, #51	; 0x33
   11e5c:	bne	11eec <__assert_fail@plt+0xfb8>
   11e60:	ldrb	r3, [r0, #6]
   11e64:	cmp	r3, #48	; 0x30
   11e68:	bne	11eec <__assert_fail@plt+0xfb8>
   11e6c:	ldrb	r3, [r0, #7]
   11e70:	cmp	r3, #0
   11e74:	bne	11eec <__assert_fail@plt+0xfb8>
   11e78:	ldrb	r2, [r4]
   11e7c:	ldr	r3, [pc, #124]	; 11f00 <__assert_fail@plt+0xfcc>
   11e80:	ldr	r0, [pc, #124]	; 11f04 <__assert_fail@plt+0xfd0>
   11e84:	cmp	r2, #96	; 0x60
   11e88:	movne	r0, r3
   11e8c:	pop	{r4, r5, r6, pc}
   11e90:	ldrb	r3, [r0, #1]
   11e94:	bic	r3, r3, #32
   11e98:	cmp	r3, #84	; 0x54
   11e9c:	bne	11eec <__assert_fail@plt+0xfb8>
   11ea0:	ldrb	r3, [r0, #2]
   11ea4:	bic	r3, r3, #32
   11ea8:	cmp	r3, #70	; 0x46
   11eac:	bne	11eec <__assert_fail@plt+0xfb8>
   11eb0:	ldrb	r3, [r0, #3]
   11eb4:	cmp	r3, #45	; 0x2d
   11eb8:	bne	11eec <__assert_fail@plt+0xfb8>
   11ebc:	ldrb	r3, [r0, #4]
   11ec0:	cmp	r3, #56	; 0x38
   11ec4:	bne	11eec <__assert_fail@plt+0xfb8>
   11ec8:	ldrb	r3, [r0, #5]
   11ecc:	cmp	r3, #0
   11ed0:	bne	11eec <__assert_fail@plt+0xfb8>
   11ed4:	ldrb	r2, [r4]
   11ed8:	ldr	r3, [pc, #40]	; 11f08 <__assert_fail@plt+0xfd4>
   11edc:	ldr	r0, [pc, #40]	; 11f0c <__assert_fail@plt+0xfd8>
   11ee0:	cmp	r2, #96	; 0x60
   11ee4:	movne	r0, r3
   11ee8:	pop	{r4, r5, r6, pc}
   11eec:	ldr	r3, [pc, #28]	; 11f10 <__assert_fail@plt+0xfdc>
   11ef0:	ldr	r0, [pc, #28]	; 11f14 <__assert_fail@plt+0xfe0>
   11ef4:	cmp	r5, #9
   11ef8:	movne	r0, r3
   11efc:	pop	{r4, r5, r6, pc}
   11f00:			; <UNDEFINED> instruction: 0x000159bc
   11f04:	andeq	r5, r1, r8, asr #19
   11f08:			; <UNDEFINED> instruction: 0x000159b8
   11f0c:	andeq	r5, r1, ip, asr #19
   11f10:	andeq	r5, r1, r0, asr #19
   11f14:	andeq	r5, r1, r4, asr #19
   11f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f1c:	sub	sp, sp, #116	; 0x74
   11f20:	str	r0, [sp, #36]	; 0x24
   11f24:	mov	sl, r1
   11f28:	str	r2, [sp, #52]	; 0x34
   11f2c:	str	r3, [sp, #28]
   11f30:	ldr	r8, [sp, #152]	; 0x98
   11f34:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   11f38:	str	r0, [sp, #84]	; 0x54
   11f3c:	ldr	r3, [sp, #156]	; 0x9c
   11f40:	lsr	r3, r3, #1
   11f44:	and	r3, r3, #1
   11f48:	str	r3, [sp, #32]
   11f4c:	mov	r3, #1
   11f50:	str	r3, [sp, #40]	; 0x28
   11f54:	mov	r3, #0
   11f58:	str	r3, [sp, #80]	; 0x50
   11f5c:	str	r3, [sp, #44]	; 0x2c
   11f60:	str	r3, [sp, #48]	; 0x30
   11f64:	str	r3, [sp, #60]	; 0x3c
   11f68:	str	r3, [sp, #72]	; 0x48
   11f6c:	str	r3, [sp, #76]	; 0x4c
   11f70:	mov	r7, sl
   11f74:	mov	sl, r8
   11f78:	cmp	sl, #10
   11f7c:	ldrls	pc, [pc, sl, lsl #2]
   11f80:	b	12138 <__assert_fail@plt+0x1204>
   11f84:	andeq	r1, r1, r8, ror #31
   11f88:			; <UNDEFINED> instruction: 0x00011fb8
   11f8c:	andeq	r2, r1, r4, lsl r1
   11f90:			; <UNDEFINED> instruction: 0x00011fb0
   11f94:	andeq	r2, r1, r8, asr #1
   11f98:	strdeq	r1, [r1], -r8
   11f9c:	andeq	r3, r1, r4, rrx
   11fa0:	andeq	r2, r1, ip, lsr r1
   11fa4:	andeq	r2, r1, r4, lsr r0
   11fa8:	andeq	r2, r1, r4, lsr r0
   11fac:	andeq	r2, r1, r4, lsr r0
   11fb0:	mov	r3, #1
   11fb4:	str	r3, [sp, #48]	; 0x30
   11fb8:	mov	r3, #1
   11fbc:	str	r3, [sp, #32]
   11fc0:	str	r3, [sp, #60]	; 0x3c
   11fc4:	ldr	r3, [pc, #4068]	; 12fb0 <__assert_fail@plt+0x207c>
   11fc8:	str	r3, [sp, #72]	; 0x48
   11fcc:	mov	fp, #0
   11fd0:	mov	sl, #2
   11fd4:	mov	r6, #0
   11fd8:	ldr	r3, [sp, #48]	; 0x30
   11fdc:	eor	r3, r3, #1
   11fe0:	str	r3, [sp, #68]	; 0x44
   11fe4:	b	128cc <__assert_fail@plt+0x1998>
   11fe8:	mov	r3, #0
   11fec:	str	r3, [sp, #32]
   11ff0:	mov	fp, r3
   11ff4:	b	11fd4 <__assert_fail@plt+0x10a0>
   11ff8:	ldr	r3, [sp, #32]
   11ffc:	cmp	r3, #0
   12000:	bne	12154 <__assert_fail@plt+0x1220>
   12004:	cmp	r7, #0
   12008:	beq	12174 <__assert_fail@plt+0x1240>
   1200c:	ldr	r3, [sp, #36]	; 0x24
   12010:	mov	r2, #34	; 0x22
   12014:	strb	r2, [r3]
   12018:	mov	r3, #1
   1201c:	str	r3, [sp, #48]	; 0x30
   12020:	str	r3, [sp, #60]	; 0x3c
   12024:	ldr	r3, [pc, #3980]	; 12fb8 <__assert_fail@plt+0x2084>
   12028:	str	r3, [sp, #72]	; 0x48
   1202c:	mov	fp, #1
   12030:	b	11fd4 <__assert_fail@plt+0x10a0>
   12034:	cmp	sl, #10
   12038:	beq	1205c <__assert_fail@plt+0x1128>
   1203c:	mov	r1, sl
   12040:	ldr	r0, [pc, #3948]	; 12fb4 <__assert_fail@plt+0x2080>
   12044:	bl	11de0 <__assert_fail@plt+0xeac>
   12048:	str	r0, [sp, #164]	; 0xa4
   1204c:	mov	r1, sl
   12050:	ldr	r0, [pc, #3928]	; 12fb0 <__assert_fail@plt+0x207c>
   12054:	bl	11de0 <__assert_fail@plt+0xeac>
   12058:	str	r0, [sp, #168]	; 0xa8
   1205c:	ldr	r3, [sp, #32]
   12060:	cmp	r3, #0
   12064:	movne	fp, #0
   12068:	bne	120a0 <__assert_fail@plt+0x116c>
   1206c:	ldr	r3, [sp, #164]	; 0xa4
   12070:	ldrb	r3, [r3]
   12074:	cmp	r3, #0
   12078:	beq	120c0 <__assert_fail@plt+0x118c>
   1207c:	ldr	r2, [sp, #164]	; 0xa4
   12080:	mov	fp, #0
   12084:	ldr	r1, [sp, #36]	; 0x24
   12088:	cmp	r7, fp
   1208c:	strbhi	r3, [r1, fp]
   12090:	add	fp, fp, #1
   12094:	ldrb	r3, [r2, #1]!
   12098:	cmp	r3, #0
   1209c:	bne	12088 <__assert_fail@plt+0x1154>
   120a0:	ldr	r0, [sp, #168]	; 0xa8
   120a4:	bl	10e44 <strlen@plt>
   120a8:	str	r0, [sp, #60]	; 0x3c
   120ac:	ldr	r3, [sp, #168]	; 0xa8
   120b0:	str	r3, [sp, #72]	; 0x48
   120b4:	mov	r3, #1
   120b8:	str	r3, [sp, #48]	; 0x30
   120bc:	b	11fd4 <__assert_fail@plt+0x10a0>
   120c0:	mov	fp, #0
   120c4:	b	120a0 <__assert_fail@plt+0x116c>
   120c8:	ldr	r3, [sp, #32]
   120cc:	cmp	r3, #0
   120d0:	bne	12190 <__assert_fail@plt+0x125c>
   120d4:	mov	r3, #1
   120d8:	str	r3, [sp, #48]	; 0x30
   120dc:	cmp	r7, #0
   120e0:	beq	121ac <__assert_fail@plt+0x1278>
   120e4:	ldr	r3, [sp, #36]	; 0x24
   120e8:	mov	r2, #39	; 0x27
   120ec:	strb	r2, [r3]
   120f0:	mov	r3, #0
   120f4:	str	r3, [sp, #32]
   120f8:	mov	r3, #1
   120fc:	str	r3, [sp, #60]	; 0x3c
   12100:	ldr	r3, [pc, #3752]	; 12fb0 <__assert_fail@plt+0x207c>
   12104:	str	r3, [sp, #72]	; 0x48
   12108:	mov	fp, #1
   1210c:	mov	sl, #2
   12110:	b	11fd4 <__assert_fail@plt+0x10a0>
   12114:	ldr	r3, [sp, #32]
   12118:	cmp	r3, #0
   1211c:	beq	120dc <__assert_fail@plt+0x11a8>
   12120:	mov	r3, #1
   12124:	str	r3, [sp, #60]	; 0x3c
   12128:	ldr	r3, [pc, #3712]	; 12fb0 <__assert_fail@plt+0x207c>
   1212c:	str	r3, [sp, #72]	; 0x48
   12130:	mov	fp, #0
   12134:	b	11fd4 <__assert_fail@plt+0x10a0>
   12138:	bl	10f28 <abort@plt>
   1213c:	mov	r3, #0
   12140:	str	r3, [sp, #32]
   12144:	mov	r3, #1
   12148:	str	r3, [sp, #48]	; 0x30
   1214c:	mov	fp, #0
   12150:	b	11fd4 <__assert_fail@plt+0x10a0>
   12154:	ldr	r3, [sp, #32]
   12158:	str	r3, [sp, #48]	; 0x30
   1215c:	mov	r3, #1
   12160:	str	r3, [sp, #60]	; 0x3c
   12164:	ldr	r3, [pc, #3660]	; 12fb8 <__assert_fail@plt+0x2084>
   12168:	str	r3, [sp, #72]	; 0x48
   1216c:	mov	fp, #0
   12170:	b	11fd4 <__assert_fail@plt+0x10a0>
   12174:	mov	r3, #1
   12178:	str	r3, [sp, #48]	; 0x30
   1217c:	str	r3, [sp, #60]	; 0x3c
   12180:	ldr	r3, [pc, #3632]	; 12fb8 <__assert_fail@plt+0x2084>
   12184:	str	r3, [sp, #72]	; 0x48
   12188:	mov	fp, #1
   1218c:	b	11fd4 <__assert_fail@plt+0x10a0>
   12190:	mov	r3, #1
   12194:	str	r3, [sp, #60]	; 0x3c
   12198:	ldr	r3, [pc, #3600]	; 12fb0 <__assert_fail@plt+0x207c>
   1219c:	str	r3, [sp, #72]	; 0x48
   121a0:	mov	fp, #0
   121a4:	mov	sl, #2
   121a8:	b	11fd4 <__assert_fail@plt+0x10a0>
   121ac:	mov	r3, #0
   121b0:	str	r3, [sp, #32]
   121b4:	mov	r3, #1
   121b8:	str	r3, [sp, #60]	; 0x3c
   121bc:	ldr	r3, [pc, #3564]	; 12fb0 <__assert_fail@plt+0x207c>
   121c0:	str	r3, [sp, #72]	; 0x48
   121c4:	mov	fp, #1
   121c8:	mov	sl, #2
   121cc:	b	11fd4 <__assert_fail@plt+0x10a0>
   121d0:	mov	r3, #0
   121d4:	str	r3, [sp, #56]	; 0x38
   121d8:	ldr	r3, [sp, #52]	; 0x34
   121dc:	add	r2, r3, r6
   121e0:	str	r2, [sp, #64]	; 0x40
   121e4:	ldrb	r4, [r3, r6]
   121e8:	cmp	r4, #126	; 0x7e
   121ec:	ldrls	pc, [pc, r4, lsl #2]
   121f0:	b	12a2c <__assert_fail@plt+0x1af8>
   121f4:	andeq	r2, r1, ip, lsl #8
   121f8:	andeq	r2, r1, ip, lsr #20
   121fc:	andeq	r2, r1, ip, lsr #20
   12200:	andeq	r2, r1, ip, lsr #20
   12204:	andeq	r2, r1, ip, lsr #20
   12208:	andeq	r2, r1, ip, lsr #20
   1220c:	andeq	r2, r1, ip, lsr #20
   12210:	andeq	r2, r1, r8, ror #14
   12214:	andeq	r2, r1, r4, lsl #8
   12218:	andeq	r2, r1, r0, lsr #14
   1221c:	andeq	r2, r1, r8, lsl r7
   12220:	andeq	r2, r1, r8, lsl #13
   12224:	andeq	r2, r1, r0, lsl #13
   12228:	strdeq	r2, [r1], -ip
   1222c:	andeq	r2, r1, ip, lsr #20
   12230:	andeq	r2, r1, ip, lsr #20
   12234:	andeq	r2, r1, ip, lsr #20
   12238:	andeq	r2, r1, ip, lsr #20
   1223c:	andeq	r2, r1, ip, lsr #20
   12240:	andeq	r2, r1, ip, lsr #20
   12244:	andeq	r2, r1, ip, lsr #20
   12248:	andeq	r2, r1, ip, lsr #20
   1224c:	andeq	r2, r1, ip, lsr #20
   12250:	andeq	r2, r1, ip, lsr #20
   12254:	andeq	r2, r1, ip, lsr #20
   12258:	andeq	r2, r1, ip, lsr #20
   1225c:	andeq	r2, r1, ip, lsr #20
   12260:	andeq	r2, r1, ip, lsr #20
   12264:	andeq	r2, r1, ip, lsr #20
   12268:	andeq	r2, r1, ip, lsr #20
   1226c:	andeq	r2, r1, ip, lsr #20
   12270:	andeq	r2, r1, ip, lsr #20
   12274:			; <UNDEFINED> instruction: 0x000127bc
   12278:			; <UNDEFINED> instruction: 0x000127b8
   1227c:			; <UNDEFINED> instruction: 0x000127b8
   12280:	muleq	r1, r0, r7
   12284:			; <UNDEFINED> instruction: 0x000127b8
   12288:	andeq	r2, r1, r0, lsl #28
   1228c:			; <UNDEFINED> instruction: 0x000127b8
   12290:	muleq	r1, r0, r9
   12294:			; <UNDEFINED> instruction: 0x000127b8
   12298:			; <UNDEFINED> instruction: 0x000127b8
   1229c:			; <UNDEFINED> instruction: 0x000127b8
   122a0:	andeq	r2, r1, r0, lsl #28
   122a4:	andeq	r2, r1, r0, lsl #28
   122a8:	andeq	r2, r1, r0, lsl #28
   122ac:	andeq	r2, r1, r0, lsl #28
   122b0:	andeq	r2, r1, r0, lsl #28
   122b4:	andeq	r2, r1, r0, lsl #28
   122b8:	andeq	r2, r1, r0, lsl #28
   122bc:	andeq	r2, r1, r0, lsl #28
   122c0:	andeq	r2, r1, r0, lsl #28
   122c4:	andeq	r2, r1, r0, lsl #28
   122c8:	andeq	r2, r1, r0, lsl #28
   122cc:	andeq	r2, r1, r0, lsl #28
   122d0:	andeq	r2, r1, r0, lsl #28
   122d4:	andeq	r2, r1, r0, lsl #28
   122d8:	andeq	r2, r1, r0, lsl #28
   122dc:	andeq	r2, r1, r0, lsl #28
   122e0:			; <UNDEFINED> instruction: 0x000127b8
   122e4:			; <UNDEFINED> instruction: 0x000127b8
   122e8:			; <UNDEFINED> instruction: 0x000127b8
   122ec:			; <UNDEFINED> instruction: 0x000127b8
   122f0:	andeq	r2, r1, r4, lsl r5
   122f4:	andeq	r2, r1, ip, lsr #20
   122f8:	andeq	r2, r1, r0, lsl #28
   122fc:	andeq	r2, r1, r0, lsl #28
   12300:	andeq	r2, r1, r0, lsl #28
   12304:	andeq	r2, r1, r0, lsl #28
   12308:	andeq	r2, r1, r0, lsl #28
   1230c:	andeq	r2, r1, r0, lsl #28
   12310:	andeq	r2, r1, r0, lsl #28
   12314:	andeq	r2, r1, r0, lsl #28
   12318:	andeq	r2, r1, r0, lsl #28
   1231c:	andeq	r2, r1, r0, lsl #28
   12320:	andeq	r2, r1, r0, lsl #28
   12324:	andeq	r2, r1, r0, lsl #28
   12328:	andeq	r2, r1, r0, lsl #28
   1232c:	andeq	r2, r1, r0, lsl #28
   12330:	andeq	r2, r1, r0, lsl #28
   12334:	andeq	r2, r1, r0, lsl #28
   12338:	andeq	r2, r1, r0, lsl #28
   1233c:	andeq	r2, r1, r0, lsl #28
   12340:	andeq	r2, r1, r0, lsl #28
   12344:	andeq	r2, r1, r0, lsl #28
   12348:	andeq	r2, r1, r0, lsl #28
   1234c:	andeq	r2, r1, r0, lsl #28
   12350:	andeq	r2, r1, r0, lsl #28
   12354:	andeq	r2, r1, r0, lsl #28
   12358:	andeq	r2, r1, r0, lsl #28
   1235c:	andeq	r2, r1, r0, lsl #28
   12360:			; <UNDEFINED> instruction: 0x000127b8
   12364:	muleq	r1, r0, r6
   12368:	andeq	r2, r1, r0, lsl #28
   1236c:			; <UNDEFINED> instruction: 0x000127b8
   12370:	andeq	r2, r1, r0, lsl #28
   12374:			; <UNDEFINED> instruction: 0x000127b8
   12378:	andeq	r2, r1, r0, lsl #28
   1237c:	andeq	r2, r1, r0, lsl #28
   12380:	andeq	r2, r1, r0, lsl #28
   12384:	andeq	r2, r1, r0, lsl #28
   12388:	andeq	r2, r1, r0, lsl #28
   1238c:	andeq	r2, r1, r0, lsl #28
   12390:	andeq	r2, r1, r0, lsl #28
   12394:	andeq	r2, r1, r0, lsl #28
   12398:	andeq	r2, r1, r0, lsl #28
   1239c:	andeq	r2, r1, r0, lsl #28
   123a0:	andeq	r2, r1, r0, lsl #28
   123a4:	andeq	r2, r1, r0, lsl #28
   123a8:	andeq	r2, r1, r0, lsl #28
   123ac:	andeq	r2, r1, r0, lsl #28
   123b0:	andeq	r2, r1, r0, lsl #28
   123b4:	andeq	r2, r1, r0, lsl #28
   123b8:	andeq	r2, r1, r0, lsl #28
   123bc:	andeq	r2, r1, r0, lsl #28
   123c0:	andeq	r2, r1, r0, lsl #28
   123c4:	andeq	r2, r1, r0, lsl #28
   123c8:	andeq	r2, r1, r0, lsl #28
   123cc:	andeq	r2, r1, r0, lsl #28
   123d0:	andeq	r2, r1, r0, lsl #28
   123d4:	andeq	r2, r1, r0, lsl #28
   123d8:	andeq	r2, r1, r0, lsl #28
   123dc:	andeq	r2, r1, r0, lsl #28
   123e0:	andeq	r2, r1, r0, ror r7
   123e4:			; <UNDEFINED> instruction: 0x000127b8
   123e8:	andeq	r2, r1, r0, ror r7
   123ec:	muleq	r1, r0, r7
   123f0:	mov	r3, #0
   123f4:	str	r3, [sp, #56]	; 0x38
   123f8:	b	121d8 <__assert_fail@plt+0x12a4>
   123fc:	mov	r3, #114	; 0x72
   12400:	b	12724 <__assert_fail@plt+0x17f0>
   12404:	mov	r3, #98	; 0x62
   12408:	b	1273c <__assert_fail@plt+0x1808>
   1240c:	ldr	r3, [sp, #48]	; 0x30
   12410:	cmp	r3, #0
   12414:	beq	124fc <__assert_fail@plt+0x15c8>
   12418:	ldr	r3, [sp, #32]
   1241c:	cmp	r3, #0
   12420:	bne	12f84 <__assert_fail@plt+0x2050>
   12424:	ldr	r3, [sp, #44]	; 0x2c
   12428:	eor	r3, r3, #1
   1242c:	cmp	sl, #2
   12430:	movne	r3, #0
   12434:	andeq	r3, r3, #1
   12438:	cmp	r3, #0
   1243c:	moveq	r2, fp
   12440:	beq	12484 <__assert_fail@plt+0x1550>
   12444:	cmp	r7, fp
   12448:	ldrhi	r2, [sp, #36]	; 0x24
   1244c:	movhi	r1, #39	; 0x27
   12450:	strbhi	r1, [r2, fp]
   12454:	add	r2, fp, #1
   12458:	cmp	r7, r2
   1245c:	ldrhi	r1, [sp, #36]	; 0x24
   12460:	movhi	r0, #36	; 0x24
   12464:	strbhi	r0, [r1, r2]
   12468:	add	r2, fp, #2
   1246c:	cmp	r7, r2
   12470:	ldrhi	r1, [sp, #36]	; 0x24
   12474:	movhi	r0, #39	; 0x27
   12478:	strbhi	r0, [r1, r2]
   1247c:	add	r2, fp, #3
   12480:	str	r3, [sp, #44]	; 0x2c
   12484:	cmp	r7, r2
   12488:	ldrhi	r3, [sp, #36]	; 0x24
   1248c:	movhi	r1, #92	; 0x5c
   12490:	strbhi	r1, [r3, r2]
   12494:	add	fp, r2, #1
   12498:	cmp	r5, #0
   1249c:	beq	12e08 <__assert_fail@plt+0x1ed4>
   124a0:	add	r3, r6, #1
   124a4:	ldr	r1, [sp, #28]
   124a8:	cmp	r1, r3
   124ac:	bls	12e18 <__assert_fail@plt+0x1ee4>
   124b0:	ldr	r1, [sp, #52]	; 0x34
   124b4:	ldrb	r3, [r1, r3]
   124b8:	sub	r3, r3, #48	; 0x30
   124bc:	uxtb	r3, r3
   124c0:	cmp	r3, #9
   124c4:	bhi	12e24 <__assert_fail@plt+0x1ef0>
   124c8:	cmp	r7, fp
   124cc:	movhi	r3, #48	; 0x30
   124d0:	ldrhi	r1, [sp, #36]	; 0x24
   124d4:	strbhi	r3, [r1, fp]
   124d8:	add	r3, r2, #2
   124dc:	cmp	r7, r3
   124e0:	movhi	r1, #48	; 0x30
   124e4:	ldrhi	r0, [sp, #36]	; 0x24
   124e8:	strbhi	r1, [r0, r3]
   124ec:	add	fp, r2, #3
   124f0:	ldr	r8, [sp, #32]
   124f4:	mov	r4, #48	; 0x30
   124f8:	b	127d4 <__assert_fail@plt+0x18a0>
   124fc:	ldr	r3, [sp, #156]	; 0x9c
   12500:	tst	r3, #1
   12504:	bne	128c8 <__assert_fail@plt+0x1994>
   12508:	ldr	r5, [sp, #48]	; 0x30
   1250c:	mov	r8, r5
   12510:	b	127d4 <__assert_fail@plt+0x18a0>
   12514:	cmp	sl, #2
   12518:	beq	12530 <__assert_fail@plt+0x15fc>
   1251c:	cmp	sl, #5
   12520:	beq	12548 <__assert_fail@plt+0x1614>
   12524:	mov	r8, #0
   12528:	mov	r5, r8
   1252c:	b	127d4 <__assert_fail@plt+0x18a0>
   12530:	ldr	r3, [sp, #32]
   12534:	cmp	r3, #0
   12538:	bne	12f98 <__assert_fail@plt+0x2064>
   1253c:	mov	r8, r3
   12540:	mov	r5, r3
   12544:	b	127d4 <__assert_fail@plt+0x18a0>
   12548:	ldr	r3, [sp, #156]	; 0x9c
   1254c:	tst	r3, #4
   12550:	beq	12e30 <__assert_fail@plt+0x1efc>
   12554:	add	r3, r6, #2
   12558:	ldr	r2, [sp, #28]
   1255c:	cmp	r2, r3
   12560:	bls	12e3c <__assert_fail@plt+0x1f08>
   12564:	ldr	r2, [sp, #52]	; 0x34
   12568:	add	r2, r2, r6
   1256c:	ldrb	r2, [r2, #1]
   12570:	cmp	r2, #63	; 0x3f
   12574:	movne	r8, #0
   12578:	movne	r5, r8
   1257c:	bne	127d4 <__assert_fail@plt+0x18a0>
   12580:	ldr	r2, [sp, #52]	; 0x34
   12584:	ldrb	r2, [r2, r3]
   12588:	sub	r1, r2, #33	; 0x21
   1258c:	cmp	r1, #29
   12590:	ldrls	pc, [pc, r1, lsl #2]
   12594:	b	12e48 <__assert_fail@plt+0x1f14>
   12598:	andeq	r2, r1, r0, lsl r6
   1259c:	andeq	r2, r1, r8, asr #28
   125a0:	andeq	r2, r1, r8, asr #28
   125a4:	andeq	r2, r1, r8, asr #28
   125a8:	andeq	r2, r1, r8, asr #28
   125ac:	andeq	r2, r1, r8, asr #28
   125b0:	andeq	r2, r1, r0, lsl r6
   125b4:	andeq	r2, r1, r0, lsl r6
   125b8:	andeq	r2, r1, r0, lsl r6
   125bc:	andeq	r2, r1, r8, asr #28
   125c0:	andeq	r2, r1, r8, asr #28
   125c4:	andeq	r2, r1, r8, asr #28
   125c8:	andeq	r2, r1, r0, lsl r6
   125cc:	andeq	r2, r1, r8, asr #28
   125d0:	andeq	r2, r1, r0, lsl r6
   125d4:	andeq	r2, r1, r8, asr #28
   125d8:	andeq	r2, r1, r8, asr #28
   125dc:	andeq	r2, r1, r8, asr #28
   125e0:	andeq	r2, r1, r8, asr #28
   125e4:	andeq	r2, r1, r8, asr #28
   125e8:	andeq	r2, r1, r8, asr #28
   125ec:	andeq	r2, r1, r8, asr #28
   125f0:	andeq	r2, r1, r8, asr #28
   125f4:	andeq	r2, r1, r8, asr #28
   125f8:	andeq	r2, r1, r8, asr #28
   125fc:	andeq	r2, r1, r8, asr #28
   12600:	andeq	r2, r1, r8, asr #28
   12604:	andeq	r2, r1, r0, lsl r6
   12608:	andeq	r2, r1, r0, lsl r6
   1260c:	andeq	r2, r1, r0, lsl r6
   12610:	ldr	r1, [sp, #32]
   12614:	cmp	r1, #0
   12618:	bne	13058 <__assert_fail@plt+0x2124>
   1261c:	cmp	r7, fp
   12620:	movhi	r1, #63	; 0x3f
   12624:	ldrhi	r0, [sp, #36]	; 0x24
   12628:	strbhi	r1, [r0, fp]
   1262c:	add	r1, fp, #1
   12630:	cmp	r7, r1
   12634:	ldrhi	r0, [sp, #36]	; 0x24
   12638:	movhi	ip, #34	; 0x22
   1263c:	strbhi	ip, [r0, r1]
   12640:	add	r1, fp, #2
   12644:	cmp	r7, r1
   12648:	ldrhi	r0, [sp, #36]	; 0x24
   1264c:	movhi	ip, #34	; 0x22
   12650:	strbhi	ip, [r0, r1]
   12654:	add	r1, fp, #3
   12658:	cmp	r7, r1
   1265c:	movhi	r0, #63	; 0x3f
   12660:	ldrhi	ip, [sp, #36]	; 0x24
   12664:	strbhi	r0, [ip, r1]
   12668:	add	fp, fp, #4
   1266c:	ldr	r5, [sp, #32]
   12670:	mov	r8, r5
   12674:	mov	r4, r2
   12678:	mov	r6, r3
   1267c:	b	127d4 <__assert_fail@plt+0x18a0>
   12680:	mov	r3, #102	; 0x66
   12684:	b	1273c <__assert_fail@plt+0x1808>
   12688:	mov	r3, #118	; 0x76
   1268c:	b	1273c <__assert_fail@plt+0x1808>
   12690:	cmp	sl, #2
   12694:	beq	12700 <__assert_fail@plt+0x17cc>
   12698:	ldr	r3, [sp, #48]	; 0x30
   1269c:	ldr	r2, [sp, #32]
   126a0:	and	r3, r3, r2
   126a4:	tst	r9, r3
   126a8:	moveq	r3, r4
   126ac:	beq	1273c <__assert_fail@plt+0x1808>
   126b0:	mov	r8, #0
   126b4:	mov	r5, r8
   126b8:	eor	r5, r5, #1
   126bc:	ldr	r3, [sp, #44]	; 0x2c
   126c0:	and	r5, r5, r3
   126c4:	tst	r5, #255	; 0xff
   126c8:	beq	128a8 <__assert_fail@plt+0x1974>
   126cc:	cmp	r7, fp
   126d0:	ldrhi	r3, [sp, #36]	; 0x24
   126d4:	movhi	r2, #39	; 0x27
   126d8:	strbhi	r2, [r3, fp]
   126dc:	add	r3, fp, #1
   126e0:	cmp	r7, r3
   126e4:	ldrhi	r2, [sp, #36]	; 0x24
   126e8:	movhi	r1, #39	; 0x27
   126ec:	strbhi	r1, [r2, r3]
   126f0:	add	fp, fp, #2
   126f4:	mov	r3, #0
   126f8:	str	r3, [sp, #44]	; 0x2c
   126fc:	b	128a8 <__assert_fail@plt+0x1974>
   12700:	ldr	r3, [sp, #32]
   12704:	cmp	r3, #0
   12708:	bne	12fa4 <__assert_fail@plt+0x2070>
   1270c:	mov	r8, r3
   12710:	mov	r5, r3
   12714:	b	126b8 <__assert_fail@plt+0x1784>
   12718:	mov	r3, #110	; 0x6e
   1271c:	b	12724 <__assert_fail@plt+0x17f0>
   12720:	mov	r3, #116	; 0x74
   12724:	ldr	r2, [sp, #32]
   12728:	cmp	sl, #2
   1272c:	movne	r2, #0
   12730:	andeq	r2, r2, #1
   12734:	cmp	r2, #0
   12738:	bne	1275c <__assert_fail@plt+0x1828>
   1273c:	ldr	r2, [sp, #48]	; 0x30
   12740:	cmp	r2, #0
   12744:	moveq	r8, r2
   12748:	moveq	r5, r2
   1274c:	beq	127d4 <__assert_fail@plt+0x18a0>
   12750:	mov	r4, r3
   12754:	mov	r8, #0
   12758:	b	1282c <__assert_fail@plt+0x18f8>
   1275c:	mov	r8, sl
   12760:	mov	sl, r7
   12764:	b	12fd0 <__assert_fail@plt+0x209c>
   12768:	mov	r3, #97	; 0x61
   1276c:	b	1273c <__assert_fail@plt+0x1808>
   12770:	ldr	r3, [sp, #28]
   12774:	cmn	r3, #1
   12778:	beq	127a4 <__assert_fail@plt+0x1870>
   1277c:	ldr	r3, [sp, #28]
   12780:	subs	r3, r3, #1
   12784:	movne	r3, #1
   12788:	cmp	r3, #0
   1278c:	bne	12e54 <__assert_fail@plt+0x1f20>
   12790:	cmp	r6, #0
   12794:	beq	127bc <__assert_fail@plt+0x1888>
   12798:	mov	r8, #0
   1279c:	mov	r5, r8
   127a0:	b	127d4 <__assert_fail@plt+0x18a0>
   127a4:	ldr	r3, [sp, #52]	; 0x34
   127a8:	ldrb	r3, [r3, #1]
   127ac:	adds	r3, r3, #0
   127b0:	movne	r3, #1
   127b4:	b	12788 <__assert_fail@plt+0x1854>
   127b8:	mov	r8, #0
   127bc:	ldr	r5, [sp, #32]
   127c0:	cmp	sl, #2
   127c4:	movne	r5, #0
   127c8:	andeq	r5, r5, #1
   127cc:	cmp	r5, #0
   127d0:	bne	12984 <__assert_fail@plt+0x1a50>
   127d4:	ldr	r3, [sp, #68]	; 0x44
   127d8:	cmp	sl, #2
   127dc:	orreq	r3, r3, #1
   127e0:	eor	r3, r3, #1
   127e4:	ldr	r2, [sp, #32]
   127e8:	orr	r3, r2, r3
   127ec:	tst	r3, #255	; 0xff
   127f0:	beq	12820 <__assert_fail@plt+0x18ec>
   127f4:	ldr	r3, [sp, #160]	; 0xa0
   127f8:	cmp	r3, #0
   127fc:	beq	12820 <__assert_fail@plt+0x18ec>
   12800:	lsr	r2, r4, #5
   12804:	uxtb	r2, r2
   12808:	and	r3, r4, #31
   1280c:	ldr	r1, [sp, #160]	; 0xa0
   12810:	ldr	r2, [r1, r2, lsl #2]
   12814:	lsr	r3, r2, r3
   12818:	tst	r3, #1
   1281c:	bne	1282c <__assert_fail@plt+0x18f8>
   12820:	ldr	r3, [sp, #56]	; 0x38
   12824:	cmp	r3, #0
   12828:	beq	126b8 <__assert_fail@plt+0x1784>
   1282c:	ldr	r3, [sp, #32]
   12830:	cmp	r3, #0
   12834:	bne	13040 <__assert_fail@plt+0x210c>
   12838:	ldr	r3, [sp, #44]	; 0x2c
   1283c:	eor	r3, r3, #1
   12840:	cmp	sl, #2
   12844:	movne	r3, #0
   12848:	andeq	r3, r3, #1
   1284c:	cmp	r3, #0
   12850:	beq	12894 <__assert_fail@plt+0x1960>
   12854:	cmp	r7, fp
   12858:	ldrhi	r2, [sp, #36]	; 0x24
   1285c:	movhi	r1, #39	; 0x27
   12860:	strbhi	r1, [r2, fp]
   12864:	add	r2, fp, #1
   12868:	cmp	r7, r2
   1286c:	ldrhi	r1, [sp, #36]	; 0x24
   12870:	movhi	r0, #36	; 0x24
   12874:	strbhi	r0, [r1, r2]
   12878:	add	r2, fp, #2
   1287c:	cmp	r7, r2
   12880:	ldrhi	r1, [sp, #36]	; 0x24
   12884:	movhi	r0, #39	; 0x27
   12888:	strbhi	r0, [r1, r2]
   1288c:	add	fp, fp, #3
   12890:	str	r3, [sp, #44]	; 0x2c
   12894:	cmp	r7, fp
   12898:	ldrhi	r3, [sp, #36]	; 0x24
   1289c:	movhi	r2, #92	; 0x5c
   128a0:	strbhi	r2, [r3, fp]
   128a4:	add	fp, fp, #1
   128a8:	cmp	fp, r7
   128ac:	ldrcc	r3, [sp, #36]	; 0x24
   128b0:	strbcc	r4, [r3, fp]
   128b4:	add	fp, fp, #1
   128b8:	ldr	r3, [sp, #40]	; 0x28
   128bc:	cmp	r8, #0
   128c0:	moveq	r3, #0
   128c4:	str	r3, [sp, #40]	; 0x28
   128c8:	add	r6, r6, #1
   128cc:	ldr	r3, [sp, #28]
   128d0:	cmn	r3, #1
   128d4:	beq	12e60 <__assert_fail@plt+0x1f2c>
   128d8:	ldr	r3, [sp, #28]
   128dc:	subs	r8, r3, r6
   128e0:	movne	r8, #1
   128e4:	cmp	r8, #0
   128e8:	beq	12e74 <__assert_fail@plt+0x1f40>
   128ec:	ldr	r5, [sp, #48]	; 0x30
   128f0:	cmp	sl, #2
   128f4:	moveq	r5, #0
   128f8:	andne	r5, r5, #1
   128fc:	ldr	r3, [sp, #60]	; 0x3c
   12900:	adds	r9, r3, #0
   12904:	movne	r9, #1
   12908:	ands	r2, r5, r9
   1290c:	str	r2, [sp, #56]	; 0x38
   12910:	beq	121d8 <__assert_fail@plt+0x12a4>
   12914:	add	r4, r6, r3
   12918:	ldr	r2, [sp, #28]
   1291c:	cmp	r3, #1
   12920:	movls	r3, #0
   12924:	movhi	r3, #1
   12928:	cmn	r2, #1
   1292c:	movne	r3, #0
   12930:	cmp	r3, #0
   12934:	beq	12944 <__assert_fail@plt+0x1a10>
   12938:	ldr	r0, [sp, #52]	; 0x34
   1293c:	bl	10e44 <strlen@plt>
   12940:	str	r0, [sp, #28]
   12944:	ldr	r3, [sp, #28]
   12948:	cmp	r3, r4
   1294c:	bcc	121d0 <__assert_fail@plt+0x129c>
   12950:	ldr	r2, [sp, #60]	; 0x3c
   12954:	ldr	r1, [sp, #72]	; 0x48
   12958:	ldr	r3, [sp, #52]	; 0x34
   1295c:	add	r0, r3, r6
   12960:	bl	10d60 <memcmp@plt>
   12964:	cmp	r0, #0
   12968:	bne	123f0 <__assert_fail@plt+0x14bc>
   1296c:	ldr	r3, [sp, #32]
   12970:	cmp	r3, #0
   12974:	beq	121d8 <__assert_fail@plt+0x12a4>
   12978:	mov	r8, sl
   1297c:	mov	sl, r7
   12980:	b	12fd0 <__assert_fail@plt+0x209c>
   12984:	mov	r8, sl
   12988:	mov	sl, r7
   1298c:	b	12fd0 <__assert_fail@plt+0x209c>
   12990:	cmp	sl, #2
   12994:	strne	r8, [sp, #80]	; 0x50
   12998:	movne	r5, #0
   1299c:	bne	127d4 <__assert_fail@plt+0x18a0>
   129a0:	ldr	r3, [sp, #32]
   129a4:	cmp	r3, #0
   129a8:	bne	12fbc <__assert_fail@plt+0x2088>
   129ac:	ldr	r2, [sp, #76]	; 0x4c
   129b0:	adds	r3, r7, #0
   129b4:	movne	r3, #1
   129b8:	cmp	r2, #0
   129bc:	movne	r3, #0
   129c0:	cmp	r3, #0
   129c4:	movne	r3, #0
   129c8:	bne	129f8 <__assert_fail@plt+0x1ac4>
   129cc:	cmp	r7, fp
   129d0:	ldrhi	r3, [sp, #36]	; 0x24
   129d4:	movhi	r2, #39	; 0x27
   129d8:	strbhi	r2, [r3, fp]
   129dc:	add	r3, fp, #1
   129e0:	cmp	r7, r3
   129e4:	ldrhi	r2, [sp, #36]	; 0x24
   129e8:	movhi	r1, #92	; 0x5c
   129ec:	strbhi	r1, [r2, r3]
   129f0:	mov	r3, r7
   129f4:	ldr	r7, [sp, #76]	; 0x4c
   129f8:	add	r2, fp, #2
   129fc:	cmp	r2, r3
   12a00:	ldrcc	r1, [sp, #36]	; 0x24
   12a04:	movcc	r0, #39	; 0x27
   12a08:	strbcc	r0, [r1, r2]
   12a0c:	add	fp, fp, #3
   12a10:	ldr	r2, [sp, #32]
   12a14:	mov	r5, r2
   12a18:	str	r8, [sp, #80]	; 0x50
   12a1c:	str	r2, [sp, #44]	; 0x2c
   12a20:	str	r7, [sp, #76]	; 0x4c
   12a24:	mov	r7, r3
   12a28:	b	127d4 <__assert_fail@plt+0x18a0>
   12a2c:	ldr	r5, [sp, #84]	; 0x54
   12a30:	cmp	r5, #1
   12a34:	beq	12a64 <__assert_fail@plt+0x1b30>
   12a38:	mov	r3, #0
   12a3c:	str	r3, [sp, #104]	; 0x68
   12a40:	str	r3, [sp, #108]	; 0x6c
   12a44:	ldr	r3, [sp, #28]
   12a48:	cmn	r3, #1
   12a4c:	beq	12a98 <__assert_fail@plt+0x1b64>
   12a50:	mov	r3, #0
   12a54:	str	r4, [sp, #88]	; 0x58
   12a58:	str	fp, [sp, #92]	; 0x5c
   12a5c:	mov	fp, r3
   12a60:	b	12bc0 <__assert_fail@plt+0x1c8c>
   12a64:	bl	10e2c <__ctype_b_loc@plt>
   12a68:	ldr	r2, [r0]
   12a6c:	lsl	r3, r4, #1
   12a70:	ldrh	r8, [r2, r3]
   12a74:	lsr	r8, r8, #14
   12a78:	and	r8, r8, #1
   12a7c:	mov	r2, r5
   12a80:	eor	r5, r8, #1
   12a84:	ldr	r3, [sp, #48]	; 0x30
   12a88:	and	r5, r5, r3
   12a8c:	ands	r5, r5, #255	; 0xff
   12a90:	beq	127d4 <__assert_fail@plt+0x18a0>
   12a94:	b	12c58 <__assert_fail@plt+0x1d24>
   12a98:	ldr	r0, [sp, #52]	; 0x34
   12a9c:	bl	10e44 <strlen@plt>
   12aa0:	str	r0, [sp, #28]
   12aa4:	b	12a50 <__assert_fail@plt+0x1b1c>
   12aa8:	mov	r2, fp
   12aac:	mov	r1, r4
   12ab0:	ldr	r4, [sp, #88]	; 0x58
   12ab4:	ldr	fp, [sp, #92]	; 0x5c
   12ab8:	ldr	r0, [sp, #28]
   12abc:	cmp	r0, r5
   12ac0:	bls	12c8c <__assert_fail@plt+0x1d58>
   12ac4:	ldrb	r3, [r1]
   12ac8:	cmp	r3, #0
   12acc:	beq	12c94 <__assert_fail@plt+0x1d60>
   12ad0:	mov	r3, r1
   12ad4:	add	r2, r2, #1
   12ad8:	add	r1, r6, r2
   12adc:	cmp	r0, r1
   12ae0:	bls	12c9c <__assert_fail@plt+0x1d68>
   12ae4:	ldrb	r1, [r3, #1]!
   12ae8:	cmp	r1, #0
   12aec:	bne	12ad4 <__assert_fail@plt+0x1ba0>
   12af0:	mov	r8, #0
   12af4:	b	12c50 <__assert_fail@plt+0x1d1c>
   12af8:	cmp	r4, r5
   12afc:	beq	12b9c <__assert_fail@plt+0x1c68>
   12b00:	ldrb	r3, [r4, #1]!
   12b04:	sub	r3, r3, #91	; 0x5b
   12b08:	cmp	r3, #33	; 0x21
   12b0c:	ldrls	pc, [pc, r3, lsl #2]
   12b10:	b	12af8 <__assert_fail@plt+0x1bc4>
   12b14:	andeq	r2, r1, r8, asr #31
   12b18:	andeq	r2, r1, r8, asr #31
   12b1c:	strdeq	r2, [r1], -r8
   12b20:	andeq	r2, r1, r8, asr #31
   12b24:	strdeq	r2, [r1], -r8
   12b28:	andeq	r2, r1, r8, asr #31
   12b2c:	strdeq	r2, [r1], -r8
   12b30:	strdeq	r2, [r1], -r8
   12b34:	strdeq	r2, [r1], -r8
   12b38:	strdeq	r2, [r1], -r8
   12b3c:	strdeq	r2, [r1], -r8
   12b40:	strdeq	r2, [r1], -r8
   12b44:	strdeq	r2, [r1], -r8
   12b48:	strdeq	r2, [r1], -r8
   12b4c:	strdeq	r2, [r1], -r8
   12b50:	strdeq	r2, [r1], -r8
   12b54:	strdeq	r2, [r1], -r8
   12b58:	strdeq	r2, [r1], -r8
   12b5c:	strdeq	r2, [r1], -r8
   12b60:	strdeq	r2, [r1], -r8
   12b64:	strdeq	r2, [r1], -r8
   12b68:	strdeq	r2, [r1], -r8
   12b6c:	strdeq	r2, [r1], -r8
   12b70:	strdeq	r2, [r1], -r8
   12b74:	strdeq	r2, [r1], -r8
   12b78:	strdeq	r2, [r1], -r8
   12b7c:	strdeq	r2, [r1], -r8
   12b80:	strdeq	r2, [r1], -r8
   12b84:	strdeq	r2, [r1], -r8
   12b88:	strdeq	r2, [r1], -r8
   12b8c:	strdeq	r2, [r1], -r8
   12b90:	strdeq	r2, [r1], -r8
   12b94:	strdeq	r2, [r1], -r8
   12b98:	andeq	r2, r1, r8, asr #31
   12b9c:	ldr	r0, [sp, #100]	; 0x64
   12ba0:	bl	10d9c <iswprint@plt>
   12ba4:	cmp	r0, #0
   12ba8:	moveq	r8, #0
   12bac:	add	fp, fp, r9
   12bb0:	add	r0, sp, #104	; 0x68
   12bb4:	bl	10d48 <mbsinit@plt>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12c30 <__assert_fail@plt+0x1cfc>
   12bc0:	add	r5, r6, fp
   12bc4:	ldr	r3, [sp, #52]	; 0x34
   12bc8:	add	r4, r3, r5
   12bcc:	add	r3, sp, #104	; 0x68
   12bd0:	ldr	r2, [sp, #28]
   12bd4:	sub	r2, r2, r5
   12bd8:	mov	r1, r4
   12bdc:	add	r0, sp, #100	; 0x64
   12be0:	bl	14c70 <__assert_fail@plt+0x3d3c>
   12be4:	subs	r9, r0, #0
   12be8:	beq	12ca4 <__assert_fail@plt+0x1d70>
   12bec:	cmn	r9, #1
   12bf0:	beq	12c40 <__assert_fail@plt+0x1d0c>
   12bf4:	cmn	r9, #2
   12bf8:	beq	12aa8 <__assert_fail@plt+0x1b74>
   12bfc:	ldr	r3, [sp, #32]
   12c00:	cmp	sl, #2
   12c04:	movne	r3, #0
   12c08:	andeq	r3, r3, #1
   12c0c:	cmp	r3, #0
   12c10:	beq	12b9c <__assert_fail@plt+0x1c68>
   12c14:	cmp	r9, #1
   12c18:	bls	12b9c <__assert_fail@plt+0x1c68>
   12c1c:	sub	r3, r9, #1
   12c20:	add	r5, r3, r5
   12c24:	ldr	r3, [sp, #52]	; 0x34
   12c28:	add	r5, r3, r5
   12c2c:	b	12b00 <__assert_fail@plt+0x1bcc>
   12c30:	ldr	r4, [sp, #88]	; 0x58
   12c34:	mov	r2, fp
   12c38:	ldr	fp, [sp, #92]	; 0x5c
   12c3c:	b	12c50 <__assert_fail@plt+0x1d1c>
   12c40:	ldr	r4, [sp, #88]	; 0x58
   12c44:	mov	r2, fp
   12c48:	ldr	fp, [sp, #92]	; 0x5c
   12c4c:	mov	r8, #0
   12c50:	cmp	r2, #1
   12c54:	bls	12a80 <__assert_fail@plt+0x1b4c>
   12c58:	add	r1, r6, r2
   12c5c:	ldr	ip, [sp, #64]	; 0x40
   12c60:	mov	r5, #0
   12c64:	eor	r3, r8, #1
   12c68:	ldr	r2, [sp, #48]	; 0x30
   12c6c:	and	r3, r3, r2
   12c70:	uxtb	r3, r3
   12c74:	ldr	r9, [sp, #32]
   12c78:	ldr	lr, [sp, #44]	; 0x2c
   12c7c:	ldr	r2, [sp, #56]	; 0x38
   12c80:	str	r8, [sp, #56]	; 0x38
   12c84:	ldr	r0, [sp, #36]	; 0x24
   12c88:	b	12d24 <__assert_fail@plt+0x1df0>
   12c8c:	mov	r8, #0
   12c90:	b	12c50 <__assert_fail@plt+0x1d1c>
   12c94:	mov	r8, #0
   12c98:	b	12c50 <__assert_fail@plt+0x1d1c>
   12c9c:	mov	r8, #0
   12ca0:	b	12c50 <__assert_fail@plt+0x1d1c>
   12ca4:	ldr	r4, [sp, #88]	; 0x58
   12ca8:	mov	r2, fp
   12cac:	ldr	fp, [sp, #92]	; 0x5c
   12cb0:	b	12c50 <__assert_fail@plt+0x1d1c>
   12cb4:	cmp	r2, #0
   12cb8:	beq	12ccc <__assert_fail@plt+0x1d98>
   12cbc:	cmp	r7, fp
   12cc0:	movhi	r2, #92	; 0x5c
   12cc4:	strbhi	r2, [r0, fp]
   12cc8:	add	fp, fp, #1
   12ccc:	add	r8, r6, #1
   12cd0:	cmp	r1, r8
   12cd4:	bls	12ddc <__assert_fail@plt+0x1ea8>
   12cd8:	eor	r2, r5, #1
   12cdc:	and	r2, r2, lr
   12ce0:	ands	r2, r2, #255	; 0xff
   12ce4:	beq	12df8 <__assert_fail@plt+0x1ec4>
   12ce8:	cmp	r7, fp
   12cec:	movhi	r2, #39	; 0x27
   12cf0:	strbhi	r2, [r0, fp]
   12cf4:	add	r2, fp, #1
   12cf8:	cmp	r7, r2
   12cfc:	movhi	lr, #39	; 0x27
   12d00:	strbhi	lr, [r0, r2]
   12d04:	add	fp, fp, #2
   12d08:	mov	r6, r8
   12d0c:	mov	r2, r3
   12d10:	mov	lr, r3
   12d14:	cmp	r7, fp
   12d18:	strbhi	r4, [r0, fp]
   12d1c:	add	fp, fp, #1
   12d20:	ldrb	r4, [ip, #1]!
   12d24:	cmp	r3, #0
   12d28:	beq	12cb4 <__assert_fail@plt+0x1d80>
   12d2c:	cmp	r9, #0
   12d30:	bne	13034 <__assert_fail@plt+0x2100>
   12d34:	eor	r5, lr, #1
   12d38:	cmp	sl, #2
   12d3c:	movne	r5, #0
   12d40:	andeq	r5, r5, #1
   12d44:	cmp	r5, #0
   12d48:	beq	12d80 <__assert_fail@plt+0x1e4c>
   12d4c:	cmp	r7, fp
   12d50:	movhi	lr, #39	; 0x27
   12d54:	strbhi	lr, [r0, fp]
   12d58:	add	lr, fp, #1
   12d5c:	cmp	r7, lr
   12d60:	movhi	r8, #36	; 0x24
   12d64:	strbhi	r8, [r0, lr]
   12d68:	add	lr, fp, #2
   12d6c:	cmp	r7, lr
   12d70:	movhi	r8, #39	; 0x27
   12d74:	strbhi	r8, [r0, lr]
   12d78:	add	fp, fp, #3
   12d7c:	mov	lr, r5
   12d80:	cmp	r7, fp
   12d84:	movhi	r5, #92	; 0x5c
   12d88:	strbhi	r5, [r0, fp]
   12d8c:	add	r5, fp, #1
   12d90:	cmp	r7, r5
   12d94:	lsrhi	r8, r4, #6
   12d98:	addhi	r8, r8, #48	; 0x30
   12d9c:	strbhi	r8, [r0, r5]
   12da0:	add	r8, fp, #2
   12da4:	cmp	r7, r8
   12da8:	lsrhi	r5, r4, #3
   12dac:	andhi	r5, r5, #7
   12db0:	addhi	r5, r5, #48	; 0x30
   12db4:	strbhi	r5, [r0, r8]
   12db8:	add	fp, fp, #3
   12dbc:	and	r4, r4, #7
   12dc0:	add	r4, r4, #48	; 0x30
   12dc4:	add	r5, r6, #1
   12dc8:	cmp	r1, r5
   12dcc:	bls	12de8 <__assert_fail@plt+0x1eb4>
   12dd0:	mov	r6, r5
   12dd4:	mov	r5, r3
   12dd8:	b	12d14 <__assert_fail@plt+0x1de0>
   12ddc:	str	lr, [sp, #44]	; 0x2c
   12de0:	ldr	r8, [sp, #56]	; 0x38
   12de4:	b	126b8 <__assert_fail@plt+0x1784>
   12de8:	str	lr, [sp, #44]	; 0x2c
   12dec:	ldr	r8, [sp, #56]	; 0x38
   12df0:	mov	r5, r3
   12df4:	b	126b8 <__assert_fail@plt+0x1784>
   12df8:	mov	r6, r8
   12dfc:	b	12d14 <__assert_fail@plt+0x1de0>
   12e00:	mov	r5, #0
   12e04:	b	127d4 <__assert_fail@plt+0x18a0>
   12e08:	mov	r8, r5
   12e0c:	ldr	r5, [sp, #48]	; 0x30
   12e10:	mov	r4, #48	; 0x30
   12e14:	b	127d4 <__assert_fail@plt+0x18a0>
   12e18:	ldr	r8, [sp, #32]
   12e1c:	mov	r4, #48	; 0x30
   12e20:	b	127d4 <__assert_fail@plt+0x18a0>
   12e24:	ldr	r8, [sp, #32]
   12e28:	mov	r4, #48	; 0x30
   12e2c:	b	127d4 <__assert_fail@plt+0x18a0>
   12e30:	mov	r8, #0
   12e34:	mov	r5, r8
   12e38:	b	127d4 <__assert_fail@plt+0x18a0>
   12e3c:	mov	r8, #0
   12e40:	mov	r5, r8
   12e44:	b	127d4 <__assert_fail@plt+0x18a0>
   12e48:	mov	r8, #0
   12e4c:	mov	r5, r8
   12e50:	b	127d4 <__assert_fail@plt+0x18a0>
   12e54:	mov	r8, #0
   12e58:	mov	r5, r8
   12e5c:	b	127d4 <__assert_fail@plt+0x18a0>
   12e60:	ldr	r3, [sp, #52]	; 0x34
   12e64:	ldrb	r8, [r3, r6]
   12e68:	adds	r8, r8, #0
   12e6c:	movne	r8, #1
   12e70:	b	128e4 <__assert_fail@plt+0x19b0>
   12e74:	cmp	sl, #2
   12e78:	movne	r3, #0
   12e7c:	moveq	r3, #1
   12e80:	ldr	r1, [sp, #32]
   12e84:	mov	r2, r1
   12e88:	and	r2, r2, r3
   12e8c:	cmp	fp, #0
   12e90:	movne	r2, #0
   12e94:	andeq	r2, r2, #1
   12e98:	cmp	r2, #0
   12e9c:	bne	1304c <__assert_fail@plt+0x2118>
   12ea0:	eor	r2, r1, #1
   12ea4:	and	r3, r3, r2
   12ea8:	ldr	r1, [sp, #80]	; 0x50
   12eac:	tst	r1, r3
   12eb0:	beq	12f28 <__assert_fail@plt+0x1ff4>
   12eb4:	ldr	r3, [sp, #40]	; 0x28
   12eb8:	cmp	r3, #0
   12ebc:	bne	12ee4 <__assert_fail@plt+0x1fb0>
   12ec0:	ldr	r1, [sp, #76]	; 0x4c
   12ec4:	clz	r3, r7
   12ec8:	lsr	r3, r3, #5
   12ecc:	cmp	r1, #0
   12ed0:	moveq	r3, #0
   12ed4:	cmp	r3, #0
   12ed8:	beq	12f28 <__assert_fail@plt+0x1ff4>
   12edc:	ldr	r7, [sp, #76]	; 0x4c
   12ee0:	b	11f78 <__assert_fail@plt+0x1044>
   12ee4:	ldr	r3, [sp, #168]	; 0xa8
   12ee8:	str	r3, [sp, #16]
   12eec:	ldr	r3, [sp, #164]	; 0xa4
   12ef0:	str	r3, [sp, #12]
   12ef4:	ldr	r3, [sp, #160]	; 0xa0
   12ef8:	str	r3, [sp, #8]
   12efc:	ldr	r3, [sp, #156]	; 0x9c
   12f00:	str	r3, [sp, #4]
   12f04:	mov	r3, #5
   12f08:	str	r3, [sp]
   12f0c:	ldr	r3, [sp, #28]
   12f10:	ldr	r2, [sp, #52]	; 0x34
   12f14:	ldr	r1, [sp, #76]	; 0x4c
   12f18:	ldr	r0, [sp, #36]	; 0x24
   12f1c:	bl	11f18 <__assert_fail@plt+0xfe4>
   12f20:	mov	fp, r0
   12f24:	b	13028 <__assert_fail@plt+0x20f4>
   12f28:	mov	sl, r7
   12f2c:	ldr	r3, [sp, #72]	; 0x48
   12f30:	cmp	r3, #0
   12f34:	moveq	r2, #0
   12f38:	andne	r2, r2, #1
   12f3c:	cmp	r2, #0
   12f40:	beq	12f70 <__assert_fail@plt+0x203c>
   12f44:	mov	r2, r3
   12f48:	ldrb	r3, [r3]
   12f4c:	cmp	r3, #0
   12f50:	beq	12f70 <__assert_fail@plt+0x203c>
   12f54:	ldr	r1, [sp, #36]	; 0x24
   12f58:	cmp	sl, fp
   12f5c:	strbhi	r3, [r1, fp]
   12f60:	add	fp, fp, #1
   12f64:	ldrb	r3, [r2, #1]!
   12f68:	cmp	r3, #0
   12f6c:	bne	12f58 <__assert_fail@plt+0x2024>
   12f70:	cmp	sl, fp
   12f74:	movhi	r3, #0
   12f78:	ldrhi	r2, [sp, #36]	; 0x24
   12f7c:	strbhi	r3, [r2, fp]
   12f80:	b	13028 <__assert_fail@plt+0x20f4>
   12f84:	mov	r8, sl
   12f88:	mov	sl, r7
   12f8c:	ldr	r3, [sp, #32]
   12f90:	str	r3, [sp, #48]	; 0x30
   12f94:	b	12fd0 <__assert_fail@plt+0x209c>
   12f98:	mov	r8, sl
   12f9c:	mov	sl, r7
   12fa0:	b	12fd0 <__assert_fail@plt+0x209c>
   12fa4:	mov	r8, sl
   12fa8:	mov	sl, r7
   12fac:	b	12fd0 <__assert_fail@plt+0x209c>
   12fb0:	andeq	r5, r1, r0, asr #19
   12fb4:	ldrdeq	r5, [r1], -r0
   12fb8:	andeq	r5, r1, r4, asr #19
   12fbc:	mov	r8, sl
   12fc0:	mov	sl, r7
   12fc4:	b	12fd0 <__assert_fail@plt+0x209c>
   12fc8:	mov	r8, sl
   12fcc:	mov	sl, r7
   12fd0:	ldr	r3, [sp, #48]	; 0x30
   12fd4:	cmp	r8, #2
   12fd8:	movne	r3, #0
   12fdc:	andeq	r3, r3, #1
   12fe0:	cmp	r3, #0
   12fe4:	movne	r8, #4
   12fe8:	ldr	r3, [sp, #168]	; 0xa8
   12fec:	str	r3, [sp, #16]
   12ff0:	ldr	r3, [sp, #164]	; 0xa4
   12ff4:	str	r3, [sp, #12]
   12ff8:	mov	r3, #0
   12ffc:	str	r3, [sp, #8]
   13000:	ldr	r3, [sp, #156]	; 0x9c
   13004:	bic	r3, r3, #2
   13008:	str	r3, [sp, #4]
   1300c:	str	r8, [sp]
   13010:	ldr	r3, [sp, #28]
   13014:	ldr	r2, [sp, #52]	; 0x34
   13018:	mov	r1, sl
   1301c:	ldr	r0, [sp, #36]	; 0x24
   13020:	bl	11f18 <__assert_fail@plt+0xfe4>
   13024:	mov	fp, r0
   13028:	mov	r0, fp
   1302c:	add	sp, sp, #116	; 0x74
   13030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13034:	mov	r8, sl
   13038:	mov	sl, r7
   1303c:	b	12fd0 <__assert_fail@plt+0x209c>
   13040:	mov	r8, sl
   13044:	mov	sl, r7
   13048:	b	12fd0 <__assert_fail@plt+0x209c>
   1304c:	mov	r8, sl
   13050:	mov	sl, r7
   13054:	b	12fd0 <__assert_fail@plt+0x209c>
   13058:	mov	r8, sl
   1305c:	mov	sl, r7
   13060:	b	12fe8 <__assert_fail@plt+0x20b4>
   13064:	mov	r3, #1
   13068:	str	r3, [sp, #32]
   1306c:	str	r3, [sp, #48]	; 0x30
   13070:	str	r3, [sp, #60]	; 0x3c
   13074:	ldr	r3, [pc, #-196]	; 12fb8 <__assert_fail@plt+0x2084>
   13078:	str	r3, [sp, #72]	; 0x48
   1307c:	mov	fp, #0
   13080:	mov	sl, #5
   13084:	b	11fd4 <__assert_fail@plt+0x10a0>
   13088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1308c:	sub	sp, sp, #52	; 0x34
   13090:	mov	r5, r0
   13094:	str	r1, [sp, #24]
   13098:	str	r2, [sp, #28]
   1309c:	mov	r4, r3
   130a0:	bl	10e5c <__errno_location@plt>
   130a4:	str	r0, [sp, #32]
   130a8:	ldr	r3, [r0]
   130ac:	str	r3, [sp, #36]	; 0x24
   130b0:	ldr	r3, [pc, #396]	; 13244 <__assert_fail@plt+0x2310>
   130b4:	ldr	r6, [r3]
   130b8:	cmn	r5, #-2147483647	; 0x80000001
   130bc:	movne	r3, #0
   130c0:	moveq	r3, #1
   130c4:	orrs	r3, r3, r5, lsr #31
   130c8:	bne	13208 <__assert_fail@plt+0x22d4>
   130cc:	ldr	r3, [pc, #368]	; 13244 <__assert_fail@plt+0x2310>
   130d0:	ldr	r2, [r3, #4]
   130d4:	cmp	r5, r2
   130d8:	blt	13140 <__assert_fail@plt+0x220c>
   130dc:	str	r2, [sp, #44]	; 0x2c
   130e0:	add	r3, r3, #8
   130e4:	cmp	r6, r3
   130e8:	beq	1320c <__assert_fail@plt+0x22d8>
   130ec:	sub	r2, r5, r2
   130f0:	mov	r3, #8
   130f4:	str	r3, [sp]
   130f8:	mvn	r3, #-2147483648	; 0x80000000
   130fc:	add	r2, r2, #1
   13100:	add	r1, sp, #44	; 0x2c
   13104:	mov	r0, r6
   13108:	bl	13f8c <__assert_fail@plt+0x3058>
   1310c:	mov	r6, r0
   13110:	ldr	r3, [pc, #300]	; 13244 <__assert_fail@plt+0x2310>
   13114:	str	r0, [r3]
   13118:	ldr	r7, [pc, #292]	; 13244 <__assert_fail@plt+0x2310>
   1311c:	ldr	r0, [r7, #4]
   13120:	ldr	r2, [sp, #44]	; 0x2c
   13124:	sub	r2, r2, r0
   13128:	lsl	r2, r2, #3
   1312c:	mov	r1, #0
   13130:	add	r0, r6, r0, lsl #3
   13134:	bl	10e74 <memset@plt>
   13138:	ldr	r3, [sp, #44]	; 0x2c
   1313c:	str	r3, [r7, #4]
   13140:	add	fp, r6, r5, lsl #3
   13144:	ldr	r8, [r6, r5, lsl #3]
   13148:	ldr	r7, [fp, #4]
   1314c:	ldr	r9, [r4, #4]
   13150:	orr	r9, r9, #1
   13154:	add	sl, r4, #8
   13158:	ldr	r3, [r4, #44]	; 0x2c
   1315c:	str	r3, [sp, #16]
   13160:	ldr	r3, [r4, #40]	; 0x28
   13164:	str	r3, [sp, #12]
   13168:	str	sl, [sp, #8]
   1316c:	str	r9, [sp, #4]
   13170:	ldr	r3, [r4]
   13174:	str	r3, [sp]
   13178:	ldr	r3, [sp, #28]
   1317c:	ldr	r2, [sp, #24]
   13180:	mov	r1, r8
   13184:	mov	r0, r7
   13188:	bl	11f18 <__assert_fail@plt+0xfe4>
   1318c:	cmp	r8, r0
   13190:	bhi	131f0 <__assert_fail@plt+0x22bc>
   13194:	add	r8, r0, #1
   13198:	str	r8, [r6, r5, lsl #3]
   1319c:	ldr	r3, [pc, #164]	; 13248 <__assert_fail@plt+0x2314>
   131a0:	cmp	r7, r3
   131a4:	beq	131b0 <__assert_fail@plt+0x227c>
   131a8:	mov	r0, r7
   131ac:	bl	14be4 <__assert_fail@plt+0x3cb0>
   131b0:	mov	r0, r8
   131b4:	bl	13e08 <__assert_fail@plt+0x2ed4>
   131b8:	mov	r7, r0
   131bc:	str	r0, [fp, #4]
   131c0:	ldr	r3, [r4, #44]	; 0x2c
   131c4:	str	r3, [sp, #16]
   131c8:	ldr	r3, [r4, #40]	; 0x28
   131cc:	str	r3, [sp, #12]
   131d0:	str	sl, [sp, #8]
   131d4:	str	r9, [sp, #4]
   131d8:	ldr	r3, [r4]
   131dc:	str	r3, [sp]
   131e0:	ldr	r3, [sp, #28]
   131e4:	ldr	r2, [sp, #24]
   131e8:	mov	r1, r8
   131ec:	bl	11f18 <__assert_fail@plt+0xfe4>
   131f0:	ldr	r3, [sp, #32]
   131f4:	ldr	r2, [sp, #36]	; 0x24
   131f8:	str	r2, [r3]
   131fc:	mov	r0, r7
   13200:	add	sp, sp, #52	; 0x34
   13204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13208:	bl	10f28 <abort@plt>
   1320c:	sub	r2, r5, r2
   13210:	mov	r3, #8
   13214:	str	r3, [sp]
   13218:	mvn	r3, #-2147483648	; 0x80000000
   1321c:	add	r2, r2, #1
   13220:	add	r1, sp, #44	; 0x2c
   13224:	mov	r0, #0
   13228:	bl	13f8c <__assert_fail@plt+0x3058>
   1322c:	mov	r6, r0
   13230:	ldr	r3, [pc, #12]	; 13244 <__assert_fail@plt+0x2310>
   13234:	str	r0, [r3], #8
   13238:	ldm	r3, {r0, r1}
   1323c:	stm	r6, {r0, r1}
   13240:	b	13118 <__assert_fail@plt+0x21e4>
   13244:	strdeq	r6, [r2], -r4
   13248:	andeq	r6, r2, ip, ror r1
   1324c:	push	{r4, r5, r6, lr}
   13250:	mov	r4, r0
   13254:	bl	10e5c <__errno_location@plt>
   13258:	mov	r5, r0
   1325c:	ldr	r6, [r0]
   13260:	cmp	r4, #0
   13264:	ldr	r3, [pc, #20]	; 13280 <__assert_fail@plt+0x234c>
   13268:	moveq	r4, r3
   1326c:	mov	r1, #48	; 0x30
   13270:	mov	r0, r4
   13274:	bl	142f4 <__assert_fail@plt+0x33c0>
   13278:	str	r6, [r5]
   1327c:	pop	{r4, r5, r6, pc}
   13280:	andeq	r6, r2, ip, ror r2
   13284:	subs	r3, r0, #0
   13288:	ldr	r2, [pc, #8]	; 13298 <__assert_fail@plt+0x2364>
   1328c:	moveq	r3, r2
   13290:	ldr	r0, [r3]
   13294:	bx	lr
   13298:	andeq	r6, r2, ip, ror r2
   1329c:	subs	r3, r0, #0
   132a0:	ldr	r2, [pc, #8]	; 132b0 <__assert_fail@plt+0x237c>
   132a4:	moveq	r3, r2
   132a8:	str	r1, [r3]
   132ac:	bx	lr
   132b0:	andeq	r6, r2, ip, ror r2
   132b4:	push	{lr}		; (str lr, [sp, #-4]!)
   132b8:	subs	r3, r0, #0
   132bc:	ldr	r0, [pc, #44]	; 132f0 <__assert_fail@plt+0x23bc>
   132c0:	moveq	r3, r0
   132c4:	add	r3, r3, #8
   132c8:	lsr	lr, r1, #5
   132cc:	and	r1, r1, #31
   132d0:	ldr	ip, [r3, lr, lsl #2]
   132d4:	lsr	r0, ip, r1
   132d8:	eor	r2, r2, r0
   132dc:	and	r2, r2, #1
   132e0:	eor	r1, ip, r2, lsl r1
   132e4:	str	r1, [r3, lr, lsl #2]
   132e8:	and	r0, r0, #1
   132ec:	pop	{pc}		; (ldr pc, [sp], #4)
   132f0:	andeq	r6, r2, ip, ror r2
   132f4:	subs	r3, r0, #0
   132f8:	ldr	r2, [pc, #12]	; 1330c <__assert_fail@plt+0x23d8>
   132fc:	moveq	r3, r2
   13300:	ldr	r0, [r3, #4]
   13304:	str	r1, [r3, #4]
   13308:	bx	lr
   1330c:	andeq	r6, r2, ip, ror r2
   13310:	subs	r3, r0, #0
   13314:	ldr	r0, [pc, #40]	; 13344 <__assert_fail@plt+0x2410>
   13318:	moveq	r3, r0
   1331c:	mov	r0, #10
   13320:	str	r0, [r3]
   13324:	cmp	r2, #0
   13328:	cmpne	r1, #0
   1332c:	beq	1333c <__assert_fail@plt+0x2408>
   13330:	str	r1, [r3, #40]	; 0x28
   13334:	str	r2, [r3, #44]	; 0x2c
   13338:	bx	lr
   1333c:	push	{r4, lr}
   13340:	bl	10f28 <abort@plt>
   13344:	andeq	r6, r2, ip, ror r2
   13348:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1334c:	sub	sp, sp, #24
   13350:	mov	r7, r0
   13354:	mov	r8, r1
   13358:	mov	r9, r2
   1335c:	mov	sl, r3
   13360:	ldr	r4, [sp, #56]	; 0x38
   13364:	cmp	r4, #0
   13368:	ldr	r3, [pc, #84]	; 133c4 <__assert_fail@plt+0x2490>
   1336c:	moveq	r4, r3
   13370:	bl	10e5c <__errno_location@plt>
   13374:	mov	r5, r0
   13378:	ldr	r6, [r0]
   1337c:	ldr	r3, [r4, #44]	; 0x2c
   13380:	str	r3, [sp, #16]
   13384:	ldr	r3, [r4, #40]	; 0x28
   13388:	str	r3, [sp, #12]
   1338c:	add	r3, r4, #8
   13390:	str	r3, [sp, #8]
   13394:	ldr	r3, [r4, #4]
   13398:	str	r3, [sp, #4]
   1339c:	ldr	r3, [r4]
   133a0:	str	r3, [sp]
   133a4:	mov	r3, sl
   133a8:	mov	r2, r9
   133ac:	mov	r1, r8
   133b0:	mov	r0, r7
   133b4:	bl	11f18 <__assert_fail@plt+0xfe4>
   133b8:	str	r6, [r5]
   133bc:	add	sp, sp, #24
   133c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133c4:	andeq	r6, r2, ip, ror r2
   133c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133cc:	sub	sp, sp, #44	; 0x2c
   133d0:	str	r0, [sp, #28]
   133d4:	str	r1, [sp, #32]
   133d8:	mov	r6, r2
   133dc:	subs	r4, r3, #0
   133e0:	ldr	r3, [pc, #172]	; 13494 <__assert_fail@plt+0x2560>
   133e4:	moveq	r4, r3
   133e8:	bl	10e5c <__errno_location@plt>
   133ec:	mov	r7, r0
   133f0:	ldr	fp, [r0]
   133f4:	ldr	r5, [r4, #4]
   133f8:	cmp	r6, #0
   133fc:	orreq	r5, r5, #1
   13400:	add	r9, r4, #8
   13404:	ldr	r3, [r4, #44]	; 0x2c
   13408:	str	r3, [sp, #16]
   1340c:	ldr	r3, [r4, #40]	; 0x28
   13410:	str	r3, [sp, #12]
   13414:	str	r9, [sp, #8]
   13418:	str	r5, [sp, #4]
   1341c:	ldr	r3, [r4]
   13420:	str	r3, [sp]
   13424:	ldr	r3, [sp, #32]
   13428:	ldr	r2, [sp, #28]
   1342c:	mov	r1, #0
   13430:	mov	r0, r1
   13434:	bl	11f18 <__assert_fail@plt+0xfe4>
   13438:	mov	sl, r0
   1343c:	add	r8, r0, #1
   13440:	mov	r0, r8
   13444:	bl	13e08 <__assert_fail@plt+0x2ed4>
   13448:	str	r0, [sp, #36]	; 0x24
   1344c:	ldr	r3, [r4, #44]	; 0x2c
   13450:	str	r3, [sp, #16]
   13454:	ldr	r3, [r4, #40]	; 0x28
   13458:	str	r3, [sp, #12]
   1345c:	str	r9, [sp, #8]
   13460:	str	r5, [sp, #4]
   13464:	ldr	r3, [r4]
   13468:	str	r3, [sp]
   1346c:	ldr	r3, [sp, #32]
   13470:	ldr	r2, [sp, #28]
   13474:	mov	r1, r8
   13478:	bl	11f18 <__assert_fail@plt+0xfe4>
   1347c:	str	fp, [r7]
   13480:	cmp	r6, #0
   13484:	strne	sl, [r6]
   13488:	ldr	r0, [sp, #36]	; 0x24
   1348c:	add	sp, sp, #44	; 0x2c
   13490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13494:	andeq	r6, r2, ip, ror r2
   13498:	push	{r4, lr}
   1349c:	mov	r3, r2
   134a0:	mov	r2, #0
   134a4:	bl	133c8 <__assert_fail@plt+0x2494>
   134a8:	pop	{r4, pc}
   134ac:	push	{r4, r5, r6, r7, r8, lr}
   134b0:	ldr	r3, [pc, #140]	; 13544 <__assert_fail@plt+0x2610>
   134b4:	ldr	r7, [r3]
   134b8:	ldr	r3, [r3, #4]
   134bc:	cmp	r3, #1
   134c0:	ble	134ec <__assert_fail@plt+0x25b8>
   134c4:	mov	r5, r7
   134c8:	mov	r4, #1
   134cc:	ldr	r6, [pc, #112]	; 13544 <__assert_fail@plt+0x2610>
   134d0:	ldr	r0, [r5, #12]
   134d4:	bl	14be4 <__assert_fail@plt+0x3cb0>
   134d8:	add	r4, r4, #1
   134dc:	add	r5, r5, #8
   134e0:	ldr	r3, [r6, #4]
   134e4:	cmp	r3, r4
   134e8:	bgt	134d0 <__assert_fail@plt+0x259c>
   134ec:	ldr	r0, [r7, #4]
   134f0:	ldr	r3, [pc, #80]	; 13548 <__assert_fail@plt+0x2614>
   134f4:	cmp	r0, r3
   134f8:	beq	13514 <__assert_fail@plt+0x25e0>
   134fc:	bl	14be4 <__assert_fail@plt+0x3cb0>
   13500:	ldr	r3, [pc, #60]	; 13544 <__assert_fail@plt+0x2610>
   13504:	mov	r2, #256	; 0x100
   13508:	str	r2, [r3, #8]
   1350c:	ldr	r2, [pc, #52]	; 13548 <__assert_fail@plt+0x2614>
   13510:	str	r2, [r3, #12]
   13514:	ldr	r3, [pc, #48]	; 1354c <__assert_fail@plt+0x2618>
   13518:	cmp	r7, r3
   1351c:	beq	13534 <__assert_fail@plt+0x2600>
   13520:	mov	r0, r7
   13524:	bl	14be4 <__assert_fail@plt+0x3cb0>
   13528:	ldr	r3, [pc, #20]	; 13544 <__assert_fail@plt+0x2610>
   1352c:	add	r2, r3, #8
   13530:	str	r2, [r3]
   13534:	mov	r2, #1
   13538:	ldr	r3, [pc, #4]	; 13544 <__assert_fail@plt+0x2610>
   1353c:	str	r2, [r3, #4]
   13540:	pop	{r4, r5, r6, r7, r8, pc}
   13544:	strdeq	r6, [r2], -r4
   13548:	andeq	r6, r2, ip, ror r1
   1354c:	strdeq	r6, [r2], -ip
   13550:	push	{r4, lr}
   13554:	ldr	r3, [pc, #8]	; 13564 <__assert_fail@plt+0x2630>
   13558:	mvn	r2, #0
   1355c:	bl	13088 <__assert_fail@plt+0x2154>
   13560:	pop	{r4, pc}
   13564:	andeq	r6, r2, ip, ror r2
   13568:	push	{r4, lr}
   1356c:	ldr	r3, [pc, #4]	; 13578 <__assert_fail@plt+0x2644>
   13570:	bl	13088 <__assert_fail@plt+0x2154>
   13574:	pop	{r4, pc}
   13578:	andeq	r6, r2, ip, ror r2
   1357c:	push	{r4, lr}
   13580:	mov	r1, r0
   13584:	mov	r0, #0
   13588:	bl	13550 <__assert_fail@plt+0x261c>
   1358c:	pop	{r4, pc}
   13590:	push	{r4, lr}
   13594:	mov	r2, r1
   13598:	mov	r1, r0
   1359c:	mov	r0, #0
   135a0:	bl	13568 <__assert_fail@plt+0x2634>
   135a4:	pop	{r4, pc}
   135a8:	push	{r4, r5, lr}
   135ac:	sub	sp, sp, #52	; 0x34
   135b0:	mov	r4, r0
   135b4:	mov	r5, r2
   135b8:	mov	r0, sp
   135bc:	bl	11db0 <__assert_fail@plt+0xe7c>
   135c0:	mov	r3, sp
   135c4:	mvn	r2, #0
   135c8:	mov	r1, r5
   135cc:	mov	r0, r4
   135d0:	bl	13088 <__assert_fail@plt+0x2154>
   135d4:	add	sp, sp, #52	; 0x34
   135d8:	pop	{r4, r5, pc}
   135dc:	push	{r4, r5, r6, lr}
   135e0:	sub	sp, sp, #48	; 0x30
   135e4:	mov	r4, r0
   135e8:	mov	r5, r2
   135ec:	mov	r6, r3
   135f0:	mov	r0, sp
   135f4:	bl	11db0 <__assert_fail@plt+0xe7c>
   135f8:	mov	r3, sp
   135fc:	mov	r2, r6
   13600:	mov	r1, r5
   13604:	mov	r0, r4
   13608:	bl	13088 <__assert_fail@plt+0x2154>
   1360c:	add	sp, sp, #48	; 0x30
   13610:	pop	{r4, r5, r6, pc}
   13614:	push	{r4, lr}
   13618:	mov	r2, r1
   1361c:	mov	r1, r0
   13620:	mov	r0, #0
   13624:	bl	135a8 <__assert_fail@plt+0x2674>
   13628:	pop	{r4, pc}
   1362c:	push	{r4, lr}
   13630:	mov	r3, r2
   13634:	mov	r2, r1
   13638:	mov	r1, r0
   1363c:	mov	r0, #0
   13640:	bl	135dc <__assert_fail@plt+0x26a8>
   13644:	pop	{r4, pc}
   13648:	push	{r4, r5, r6, lr}
   1364c:	sub	sp, sp, #48	; 0x30
   13650:	mov	r4, r0
   13654:	mov	r5, r1
   13658:	mov	r6, r2
   1365c:	mov	ip, sp
   13660:	ldr	lr, [pc, #64]	; 136a8 <__assert_fail@plt+0x2774>
   13664:	ldm	lr!, {r0, r1, r2, r3}
   13668:	stmia	ip!, {r0, r1, r2, r3}
   1366c:	ldm	lr!, {r0, r1, r2, r3}
   13670:	stmia	ip!, {r0, r1, r2, r3}
   13674:	ldm	lr, {r0, r1, r2, r3}
   13678:	stm	ip, {r0, r1, r2, r3}
   1367c:	mov	r2, #1
   13680:	mov	r1, r6
   13684:	mov	r0, sp
   13688:	bl	132b4 <__assert_fail@plt+0x2380>
   1368c:	mov	r3, sp
   13690:	mov	r2, r5
   13694:	mov	r1, r4
   13698:	mov	r0, #0
   1369c:	bl	13088 <__assert_fail@plt+0x2154>
   136a0:	add	sp, sp, #48	; 0x30
   136a4:	pop	{r4, r5, r6, pc}
   136a8:	andeq	r6, r2, ip, ror r2
   136ac:	push	{r4, lr}
   136b0:	mov	r2, r1
   136b4:	mvn	r1, #0
   136b8:	bl	13648 <__assert_fail@plt+0x2714>
   136bc:	pop	{r4, pc}
   136c0:	push	{r4, lr}
   136c4:	mov	r1, #58	; 0x3a
   136c8:	bl	136ac <__assert_fail@plt+0x2778>
   136cc:	pop	{r4, pc}
   136d0:	push	{r4, lr}
   136d4:	mov	r2, #58	; 0x3a
   136d8:	bl	13648 <__assert_fail@plt+0x2714>
   136dc:	pop	{r4, pc}
   136e0:	push	{r4, r5, lr}
   136e4:	sub	sp, sp, #100	; 0x64
   136e8:	mov	r4, r0
   136ec:	mov	r5, r2
   136f0:	mov	r0, sp
   136f4:	bl	11db0 <__assert_fail@plt+0xe7c>
   136f8:	add	lr, sp, #48	; 0x30
   136fc:	mov	ip, sp
   13700:	ldm	ip!, {r0, r1, r2, r3}
   13704:	stmia	lr!, {r0, r1, r2, r3}
   13708:	ldm	ip!, {r0, r1, r2, r3}
   1370c:	stmia	lr!, {r0, r1, r2, r3}
   13710:	ldm	ip, {r0, r1, r2, r3}
   13714:	stm	lr, {r0, r1, r2, r3}
   13718:	mov	r2, #1
   1371c:	mov	r1, #58	; 0x3a
   13720:	add	r0, sp, #48	; 0x30
   13724:	bl	132b4 <__assert_fail@plt+0x2380>
   13728:	add	r3, sp, #48	; 0x30
   1372c:	mvn	r2, #0
   13730:	mov	r1, r5
   13734:	mov	r0, r4
   13738:	bl	13088 <__assert_fail@plt+0x2154>
   1373c:	add	sp, sp, #100	; 0x64
   13740:	pop	{r4, r5, pc}
   13744:	push	{r4, r5, r6, r7, lr}
   13748:	sub	sp, sp, #52	; 0x34
   1374c:	mov	r4, r0
   13750:	mov	r6, r1
   13754:	mov	r7, r2
   13758:	mov	r5, r3
   1375c:	mov	ip, sp
   13760:	ldr	lr, [pc, #64]	; 137a8 <__assert_fail@plt+0x2874>
   13764:	ldm	lr!, {r0, r1, r2, r3}
   13768:	stmia	ip!, {r0, r1, r2, r3}
   1376c:	ldm	lr!, {r0, r1, r2, r3}
   13770:	stmia	ip!, {r0, r1, r2, r3}
   13774:	ldm	lr, {r0, r1, r2, r3}
   13778:	stm	ip, {r0, r1, r2, r3}
   1377c:	mov	r2, r7
   13780:	mov	r1, r6
   13784:	mov	r0, sp
   13788:	bl	13310 <__assert_fail@plt+0x23dc>
   1378c:	mov	r3, sp
   13790:	ldr	r2, [sp, #72]	; 0x48
   13794:	mov	r1, r5
   13798:	mov	r0, r4
   1379c:	bl	13088 <__assert_fail@plt+0x2154>
   137a0:	add	sp, sp, #52	; 0x34
   137a4:	pop	{r4, r5, r6, r7, pc}
   137a8:	andeq	r6, r2, ip, ror r2
   137ac:	push	{lr}		; (str lr, [sp, #-4]!)
   137b0:	sub	sp, sp, #12
   137b4:	mvn	ip, #0
   137b8:	str	ip, [sp]
   137bc:	bl	13744 <__assert_fail@plt+0x2810>
   137c0:	add	sp, sp, #12
   137c4:	pop	{pc}		; (ldr pc, [sp], #4)
   137c8:	push	{r4, lr}
   137cc:	mov	r3, r2
   137d0:	mov	r2, r1
   137d4:	mov	r1, r0
   137d8:	mov	r0, #0
   137dc:	bl	137ac <__assert_fail@plt+0x2878>
   137e0:	pop	{r4, pc}
   137e4:	push	{lr}		; (str lr, [sp, #-4]!)
   137e8:	sub	sp, sp, #12
   137ec:	str	r3, [sp]
   137f0:	mov	r3, r2
   137f4:	mov	r2, r1
   137f8:	mov	r1, r0
   137fc:	mov	r0, #0
   13800:	bl	13744 <__assert_fail@plt+0x2810>
   13804:	add	sp, sp, #12
   13808:	pop	{pc}		; (ldr pc, [sp], #4)
   1380c:	push	{r4, lr}
   13810:	ldr	r3, [pc, #4]	; 1381c <__assert_fail@plt+0x28e8>
   13814:	bl	13088 <__assert_fail@plt+0x2154>
   13818:	pop	{r4, pc}
   1381c:	andeq	r6, r2, r4, lsl #2
   13820:	push	{r4, lr}
   13824:	mov	r2, r1
   13828:	mov	r1, r0
   1382c:	mov	r0, #0
   13830:	bl	1380c <__assert_fail@plt+0x28d8>
   13834:	pop	{r4, pc}
   13838:	push	{r4, lr}
   1383c:	mvn	r2, #0
   13840:	bl	1380c <__assert_fail@plt+0x28d8>
   13844:	pop	{r4, pc}
   13848:	push	{r4, lr}
   1384c:	mov	r1, r0
   13850:	mov	r0, #0
   13854:	bl	13838 <__assert_fail@plt+0x2904>
   13858:	pop	{r4, pc}
   1385c:	push	{r4, r5, r6, lr}
   13860:	sub	sp, sp, #32
   13864:	mov	r4, r0
   13868:	ldr	r5, [sp, #48]	; 0x30
   1386c:	ldr	r6, [sp, #52]	; 0x34
   13870:	cmp	r1, #0
   13874:	beq	1392c <__assert_fail@plt+0x29f8>
   13878:	str	r3, [sp, #4]
   1387c:	str	r2, [sp]
   13880:	mov	r3, r1
   13884:	ldr	r2, [pc, #940]	; 13c38 <__assert_fail@plt+0x2d04>
   13888:	mov	r1, #1
   1388c:	bl	10e98 <__fprintf_chk@plt>
   13890:	mov	r2, #5
   13894:	ldr	r1, [pc, #928]	; 13c3c <__assert_fail@plt+0x2d08>
   13898:	mov	r0, #0
   1389c:	bl	10d78 <dcgettext@plt>
   138a0:	ldr	r3, [pc, #920]	; 13c40 <__assert_fail@plt+0x2d0c>
   138a4:	str	r3, [sp]
   138a8:	mov	r3, r0
   138ac:	ldr	r2, [pc, #912]	; 13c44 <__assert_fail@plt+0x2d10>
   138b0:	mov	r1, #1
   138b4:	mov	r0, r4
   138b8:	bl	10e98 <__fprintf_chk@plt>
   138bc:	mov	r1, r4
   138c0:	mov	r0, #10
   138c4:	bl	10d6c <fputc_unlocked@plt>
   138c8:	mov	r2, #5
   138cc:	ldr	r1, [pc, #884]	; 13c48 <__assert_fail@plt+0x2d14>
   138d0:	mov	r0, #0
   138d4:	bl	10d78 <dcgettext@plt>
   138d8:	ldr	r3, [pc, #876]	; 13c4c <__assert_fail@plt+0x2d18>
   138dc:	mov	r2, r0
   138e0:	mov	r1, #1
   138e4:	mov	r0, r4
   138e8:	bl	10e98 <__fprintf_chk@plt>
   138ec:	mov	r1, r4
   138f0:	mov	r0, #10
   138f4:	bl	10d6c <fputc_unlocked@plt>
   138f8:	cmp	r6, #9
   138fc:	ldrls	pc, [pc, r6, lsl #2]
   13900:	b	13bd0 <__assert_fail@plt+0x2c9c>
   13904:	andeq	r3, r1, r8, ror #18
   13908:	andeq	r3, r1, r4, asr #18
   1390c:	andeq	r3, r1, r0, ror r9
   13910:	andeq	r3, r1, r0, lsr #19
   13914:	ldrdeq	r3, [r1], -r8
   13918:	andeq	r3, r1, r8, lsl sl
   1391c:	andeq	r3, r1, r0, ror #20
   13920:			; <UNDEFINED> instruction: 0x00013ab0
   13924:	andeq	r3, r1, r8, lsl #22
   13928:	andeq	r3, r1, r8, ror #22
   1392c:	str	r3, [sp]
   13930:	mov	r3, r2
   13934:	ldr	r2, [pc, #788]	; 13c50 <__assert_fail@plt+0x2d1c>
   13938:	mov	r1, #1
   1393c:	bl	10e98 <__fprintf_chk@plt>
   13940:	b	13890 <__assert_fail@plt+0x295c>
   13944:	mov	r2, #5
   13948:	ldr	r1, [pc, #772]	; 13c54 <__assert_fail@plt+0x2d20>
   1394c:	mov	r0, #0
   13950:	bl	10d78 <dcgettext@plt>
   13954:	ldr	r3, [r5]
   13958:	mov	r2, r0
   1395c:	mov	r1, #1
   13960:	mov	r0, r4
   13964:	bl	10e98 <__fprintf_chk@plt>
   13968:	add	sp, sp, #32
   1396c:	pop	{r4, r5, r6, pc}
   13970:	mov	r2, #5
   13974:	ldr	r1, [pc, #732]	; 13c58 <__assert_fail@plt+0x2d24>
   13978:	mov	r0, #0
   1397c:	bl	10d78 <dcgettext@plt>
   13980:	ldr	r3, [r5]
   13984:	ldr	r2, [r5, #4]
   13988:	str	r2, [sp]
   1398c:	mov	r2, r0
   13990:	mov	r1, #1
   13994:	mov	r0, r4
   13998:	bl	10e98 <__fprintf_chk@plt>
   1399c:	b	13968 <__assert_fail@plt+0x2a34>
   139a0:	mov	r2, #5
   139a4:	ldr	r1, [pc, #688]	; 13c5c <__assert_fail@plt+0x2d28>
   139a8:	mov	r0, #0
   139ac:	bl	10d78 <dcgettext@plt>
   139b0:	ldr	r3, [r5]
   139b4:	ldr	r2, [r5, #8]
   139b8:	str	r2, [sp, #4]
   139bc:	ldr	r2, [r5, #4]
   139c0:	str	r2, [sp]
   139c4:	mov	r2, r0
   139c8:	mov	r1, #1
   139cc:	mov	r0, r4
   139d0:	bl	10e98 <__fprintf_chk@plt>
   139d4:	b	13968 <__assert_fail@plt+0x2a34>
   139d8:	mov	r2, #5
   139dc:	ldr	r1, [pc, #636]	; 13c60 <__assert_fail@plt+0x2d2c>
   139e0:	mov	r0, #0
   139e4:	bl	10d78 <dcgettext@plt>
   139e8:	ldr	r3, [r5]
   139ec:	ldr	r2, [r5, #12]
   139f0:	str	r2, [sp, #8]
   139f4:	ldr	r2, [r5, #8]
   139f8:	str	r2, [sp, #4]
   139fc:	ldr	r2, [r5, #4]
   13a00:	str	r2, [sp]
   13a04:	mov	r2, r0
   13a08:	mov	r1, #1
   13a0c:	mov	r0, r4
   13a10:	bl	10e98 <__fprintf_chk@plt>
   13a14:	b	13968 <__assert_fail@plt+0x2a34>
   13a18:	mov	r2, #5
   13a1c:	ldr	r1, [pc, #576]	; 13c64 <__assert_fail@plt+0x2d30>
   13a20:	mov	r0, #0
   13a24:	bl	10d78 <dcgettext@plt>
   13a28:	ldr	r3, [r5]
   13a2c:	ldr	r2, [r5, #16]
   13a30:	str	r2, [sp, #12]
   13a34:	ldr	r2, [r5, #12]
   13a38:	str	r2, [sp, #8]
   13a3c:	ldr	r2, [r5, #8]
   13a40:	str	r2, [sp, #4]
   13a44:	ldr	r2, [r5, #4]
   13a48:	str	r2, [sp]
   13a4c:	mov	r2, r0
   13a50:	mov	r1, #1
   13a54:	mov	r0, r4
   13a58:	bl	10e98 <__fprintf_chk@plt>
   13a5c:	b	13968 <__assert_fail@plt+0x2a34>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #508]	; 13c68 <__assert_fail@plt+0x2d34>
   13a68:	mov	r0, #0
   13a6c:	bl	10d78 <dcgettext@plt>
   13a70:	ldr	r3, [r5]
   13a74:	ldr	r2, [r5, #20]
   13a78:	str	r2, [sp, #16]
   13a7c:	ldr	r2, [r5, #16]
   13a80:	str	r2, [sp, #12]
   13a84:	ldr	r2, [r5, #12]
   13a88:	str	r2, [sp, #8]
   13a8c:	ldr	r2, [r5, #8]
   13a90:	str	r2, [sp, #4]
   13a94:	ldr	r2, [r5, #4]
   13a98:	str	r2, [sp]
   13a9c:	mov	r2, r0
   13aa0:	mov	r1, #1
   13aa4:	mov	r0, r4
   13aa8:	bl	10e98 <__fprintf_chk@plt>
   13aac:	b	13968 <__assert_fail@plt+0x2a34>
   13ab0:	mov	r2, #5
   13ab4:	ldr	r1, [pc, #432]	; 13c6c <__assert_fail@plt+0x2d38>
   13ab8:	mov	r0, #0
   13abc:	bl	10d78 <dcgettext@plt>
   13ac0:	ldr	r3, [r5]
   13ac4:	ldr	r2, [r5, #24]
   13ac8:	str	r2, [sp, #20]
   13acc:	ldr	r2, [r5, #20]
   13ad0:	str	r2, [sp, #16]
   13ad4:	ldr	r2, [r5, #16]
   13ad8:	str	r2, [sp, #12]
   13adc:	ldr	r2, [r5, #12]
   13ae0:	str	r2, [sp, #8]
   13ae4:	ldr	r2, [r5, #8]
   13ae8:	str	r2, [sp, #4]
   13aec:	ldr	r2, [r5, #4]
   13af0:	str	r2, [sp]
   13af4:	mov	r2, r0
   13af8:	mov	r1, #1
   13afc:	mov	r0, r4
   13b00:	bl	10e98 <__fprintf_chk@plt>
   13b04:	b	13968 <__assert_fail@plt+0x2a34>
   13b08:	mov	r2, #5
   13b0c:	ldr	r1, [pc, #348]	; 13c70 <__assert_fail@plt+0x2d3c>
   13b10:	mov	r0, #0
   13b14:	bl	10d78 <dcgettext@plt>
   13b18:	ldr	r3, [r5]
   13b1c:	ldr	r2, [r5, #28]
   13b20:	str	r2, [sp, #24]
   13b24:	ldr	r2, [r5, #24]
   13b28:	str	r2, [sp, #20]
   13b2c:	ldr	r2, [r5, #20]
   13b30:	str	r2, [sp, #16]
   13b34:	ldr	r2, [r5, #16]
   13b38:	str	r2, [sp, #12]
   13b3c:	ldr	r2, [r5, #12]
   13b40:	str	r2, [sp, #8]
   13b44:	ldr	r2, [r5, #8]
   13b48:	str	r2, [sp, #4]
   13b4c:	ldr	r2, [r5, #4]
   13b50:	str	r2, [sp]
   13b54:	mov	r2, r0
   13b58:	mov	r1, #1
   13b5c:	mov	r0, r4
   13b60:	bl	10e98 <__fprintf_chk@plt>
   13b64:	b	13968 <__assert_fail@plt+0x2a34>
   13b68:	mov	r2, #5
   13b6c:	ldr	r1, [pc, #256]	; 13c74 <__assert_fail@plt+0x2d40>
   13b70:	mov	r0, #0
   13b74:	bl	10d78 <dcgettext@plt>
   13b78:	ldr	r3, [r5]
   13b7c:	ldr	r2, [r5, #32]
   13b80:	str	r2, [sp, #28]
   13b84:	ldr	r2, [r5, #28]
   13b88:	str	r2, [sp, #24]
   13b8c:	ldr	r2, [r5, #24]
   13b90:	str	r2, [sp, #20]
   13b94:	ldr	r2, [r5, #20]
   13b98:	str	r2, [sp, #16]
   13b9c:	ldr	r2, [r5, #16]
   13ba0:	str	r2, [sp, #12]
   13ba4:	ldr	r2, [r5, #12]
   13ba8:	str	r2, [sp, #8]
   13bac:	ldr	r2, [r5, #8]
   13bb0:	str	r2, [sp, #4]
   13bb4:	ldr	r2, [r5, #4]
   13bb8:	str	r2, [sp]
   13bbc:	mov	r2, r0
   13bc0:	mov	r1, #1
   13bc4:	mov	r0, r4
   13bc8:	bl	10e98 <__fprintf_chk@plt>
   13bcc:	b	13968 <__assert_fail@plt+0x2a34>
   13bd0:	mov	r2, #5
   13bd4:	ldr	r1, [pc, #156]	; 13c78 <__assert_fail@plt+0x2d44>
   13bd8:	mov	r0, #0
   13bdc:	bl	10d78 <dcgettext@plt>
   13be0:	ldr	r3, [r5]
   13be4:	ldr	r2, [r5, #32]
   13be8:	str	r2, [sp, #28]
   13bec:	ldr	r2, [r5, #28]
   13bf0:	str	r2, [sp, #24]
   13bf4:	ldr	r2, [r5, #24]
   13bf8:	str	r2, [sp, #20]
   13bfc:	ldr	r2, [r5, #20]
   13c00:	str	r2, [sp, #16]
   13c04:	ldr	r2, [r5, #16]
   13c08:	str	r2, [sp, #12]
   13c0c:	ldr	r2, [r5, #12]
   13c10:	str	r2, [sp, #8]
   13c14:	ldr	r2, [r5, #8]
   13c18:	str	r2, [sp, #4]
   13c1c:	ldr	r2, [r5, #4]
   13c20:	str	r2, [sp]
   13c24:	mov	r2, r0
   13c28:	mov	r1, #1
   13c2c:	mov	r0, r4
   13c30:	bl	10e98 <__fprintf_chk@plt>
   13c34:	b	13968 <__assert_fail@plt+0x2a34>
   13c38:	andeq	r5, r1, r8, lsr sl
   13c3c:	andeq	r5, r1, ip, asr #20
   13c40:	andeq	r0, r0, r6, ror #15
   13c44:	andeq	r5, r1, r4, lsr #26
   13c48:	andeq	r5, r1, r0, asr sl
   13c4c:	strdeq	r5, [r1], -ip
   13c50:	andeq	r5, r1, r4, asr #20
   13c54:	andeq	r5, r1, r0, lsr #22
   13c58:	andeq	r5, r1, r0, lsr fp
   13c5c:	andeq	r5, r1, r8, asr #22
   13c60:	andeq	r5, r1, r4, ror #22
   13c64:	andeq	r5, r1, r4, lsl #23
   13c68:	andeq	r5, r1, r8, lsr #23
   13c6c:	ldrdeq	r5, [r1], -r0
   13c70:	strdeq	r5, [r1], -ip
   13c74:	andeq	r5, r1, ip, lsr #24
   13c78:	andeq	r5, r1, r0, ror #24
   13c7c:	push	{r4, r5, lr}
   13c80:	sub	sp, sp, #12
   13c84:	ldr	r5, [sp, #24]
   13c88:	ldr	ip, [r5]
   13c8c:	cmp	ip, #0
   13c90:	beq	13cc0 <__assert_fail@plt+0x2d8c>
   13c94:	mov	lr, r5
   13c98:	mov	ip, #0
   13c9c:	add	ip, ip, #1
   13ca0:	ldr	r4, [lr, #4]!
   13ca4:	cmp	r4, #0
   13ca8:	bne	13c9c <__assert_fail@plt+0x2d68>
   13cac:	str	ip, [sp, #4]
   13cb0:	str	r5, [sp]
   13cb4:	bl	1385c <__assert_fail@plt+0x2928>
   13cb8:	add	sp, sp, #12
   13cbc:	pop	{r4, r5, pc}
   13cc0:	mov	ip, #0
   13cc4:	b	13cac <__assert_fail@plt+0x2d78>
   13cc8:	push	{r4, r5, lr}
   13ccc:	sub	sp, sp, #52	; 0x34
   13cd0:	ldr	r4, [sp, #64]	; 0x40
   13cd4:	sub	r4, r4, #4
   13cd8:	add	r5, sp, #4
   13cdc:	mov	ip, #0
   13ce0:	ldr	lr, [r4, #4]!
   13ce4:	str	lr, [r5, #4]!
   13ce8:	cmp	lr, #0
   13cec:	beq	13cfc <__assert_fail@plt+0x2dc8>
   13cf0:	add	ip, ip, #1
   13cf4:	cmp	ip, #10
   13cf8:	bne	13ce0 <__assert_fail@plt+0x2dac>
   13cfc:	str	ip, [sp, #4]
   13d00:	add	ip, sp, #8
   13d04:	str	ip, [sp]
   13d08:	bl	1385c <__assert_fail@plt+0x2928>
   13d0c:	add	sp, sp, #52	; 0x34
   13d10:	pop	{r4, r5, pc}
   13d14:	push	{r3}		; (str r3, [sp, #-4]!)
   13d18:	push	{lr}		; (str lr, [sp, #-4]!)
   13d1c:	sub	sp, sp, #16
   13d20:	add	r3, sp, #24
   13d24:	str	r3, [sp, #12]
   13d28:	str	r3, [sp]
   13d2c:	ldr	r3, [sp, #20]
   13d30:	bl	13cc8 <__assert_fail@plt+0x2d94>
   13d34:	add	sp, sp, #16
   13d38:	pop	{lr}		; (ldr lr, [sp], #4)
   13d3c:	add	sp, sp, #4
   13d40:	bx	lr
   13d44:	push	{r4, lr}
   13d48:	ldr	r3, [pc, #112]	; 13dc0 <__assert_fail@plt+0x2e8c>
   13d4c:	ldr	r1, [r3]
   13d50:	mov	r0, #10
   13d54:	bl	10d6c <fputc_unlocked@plt>
   13d58:	mov	r2, #5
   13d5c:	ldr	r1, [pc, #96]	; 13dc4 <__assert_fail@plt+0x2e90>
   13d60:	mov	r0, #0
   13d64:	bl	10d78 <dcgettext@plt>
   13d68:	ldr	r2, [pc, #88]	; 13dc8 <__assert_fail@plt+0x2e94>
   13d6c:	mov	r1, r0
   13d70:	mov	r0, #1
   13d74:	bl	10e80 <__printf_chk@plt>
   13d78:	mov	r2, #5
   13d7c:	ldr	r1, [pc, #72]	; 13dcc <__assert_fail@plt+0x2e98>
   13d80:	mov	r0, #0
   13d84:	bl	10d78 <dcgettext@plt>
   13d88:	ldr	r3, [pc, #64]	; 13dd0 <__assert_fail@plt+0x2e9c>
   13d8c:	ldr	r2, [pc, #64]	; 13dd4 <__assert_fail@plt+0x2ea0>
   13d90:	mov	r1, r0
   13d94:	mov	r0, #1
   13d98:	bl	10e80 <__printf_chk@plt>
   13d9c:	mov	r2, #5
   13da0:	ldr	r1, [pc, #48]	; 13dd8 <__assert_fail@plt+0x2ea4>
   13da4:	mov	r0, #0
   13da8:	bl	10d78 <dcgettext@plt>
   13dac:	ldr	r2, [pc, #40]	; 13ddc <__assert_fail@plt+0x2ea8>
   13db0:	mov	r1, r0
   13db4:	mov	r0, #1
   13db8:	bl	10e80 <__printf_chk@plt>
   13dbc:	pop	{r4, pc}
   13dc0:	andeq	r6, r2, r4, asr r1
   13dc4:	muleq	r1, ip, ip
   13dc8:			; <UNDEFINED> instruction: 0x00015cb0
   13dcc:	andeq	r5, r1, r8, asr #25
   13dd0:	andeq	r5, r1, r0, asr r7
   13dd4:	andeq	r5, r1, r8, ror r7
   13dd8:	ldrdeq	r5, [r1], -ip
   13ddc:	andeq	r5, r1, r4, lsl #26
   13de0:	push	{r4, lr}
   13de4:	bl	14aec <__assert_fail@plt+0x3bb8>
   13de8:	cmp	r0, #0
   13dec:	popne	{r4, pc}
   13df0:	bl	14384 <__assert_fail@plt+0x3450>
   13df4:	push	{r4, lr}
   13df8:	bl	14aec <__assert_fail@plt+0x3bb8>
   13dfc:	cmp	r0, #0
   13e00:	popne	{r4, pc}
   13e04:	bl	14384 <__assert_fail@plt+0x3450>
   13e08:	push	{r4, lr}
   13e0c:	bl	13de0 <__assert_fail@plt+0x2eac>
   13e10:	pop	{r4, pc}
   13e14:	push	{r4, r5, r6, lr}
   13e18:	mov	r5, r0
   13e1c:	mov	r4, r1
   13e20:	bl	14b1c <__assert_fail@plt+0x3be8>
   13e24:	cmp	r0, #0
   13e28:	popne	{r4, r5, r6, pc}
   13e2c:	adds	r4, r4, #0
   13e30:	movne	r4, #1
   13e34:	cmp	r5, #0
   13e38:	orreq	r4, r4, #1
   13e3c:	cmp	r4, #0
   13e40:	popeq	{r4, r5, r6, pc}
   13e44:	bl	14384 <__assert_fail@plt+0x3450>
   13e48:	push	{r4, lr}
   13e4c:	cmp	r1, #0
   13e50:	orreq	r1, r1, #1
   13e54:	bl	14b1c <__assert_fail@plt+0x3be8>
   13e58:	cmp	r0, #0
   13e5c:	popne	{r4, pc}
   13e60:	bl	14384 <__assert_fail@plt+0x3450>
   13e64:	push	{r4, r5, r6, lr}
   13e68:	mov	r6, r0
   13e6c:	mov	r5, r1
   13e70:	mov	r4, r2
   13e74:	bl	14cc8 <__assert_fail@plt+0x3d94>
   13e78:	cmp	r0, #0
   13e7c:	popne	{r4, r5, r6, pc}
   13e80:	cmp	r6, #0
   13e84:	beq	13e94 <__assert_fail@plt+0x2f60>
   13e88:	cmp	r5, #0
   13e8c:	cmpne	r4, #0
   13e90:	popeq	{r4, r5, r6, pc}
   13e94:	bl	14384 <__assert_fail@plt+0x3450>
   13e98:	push	{r4, lr}
   13e9c:	bl	13e64 <__assert_fail@plt+0x2f30>
   13ea0:	pop	{r4, pc}
   13ea4:	push	{r4, lr}
   13ea8:	mov	ip, r1
   13eac:	mov	r3, r2
   13eb0:	cmp	r2, #0
   13eb4:	cmpne	r1, #0
   13eb8:	moveq	r3, #1
   13ebc:	moveq	ip, r3
   13ec0:	mov	r2, r3
   13ec4:	mov	r1, ip
   13ec8:	bl	14cc8 <__assert_fail@plt+0x3d94>
   13ecc:	cmp	r0, #0
   13ed0:	popne	{r4, pc}
   13ed4:	bl	14384 <__assert_fail@plt+0x3450>
   13ed8:	push	{r4, lr}
   13edc:	mov	r2, r1
   13ee0:	mov	r1, r0
   13ee4:	mov	r0, #0
   13ee8:	bl	13e64 <__assert_fail@plt+0x2f30>
   13eec:	pop	{r4, pc}
   13ef0:	push	{r4, lr}
   13ef4:	mov	r2, r1
   13ef8:	mov	r1, r0
   13efc:	mov	r0, #0
   13f00:	bl	13ea4 <__assert_fail@plt+0x2f70>
   13f04:	pop	{r4, pc}
   13f08:	push	{r4, r5, r6, r7, r8, lr}
   13f0c:	mov	r5, r1
   13f10:	mov	r6, r2
   13f14:	ldr	r4, [r1]
   13f18:	subs	r7, r0, #0
   13f1c:	beq	13f38 <__assert_fail@plt+0x3004>
   13f20:	lsr	r2, r4, #1
   13f24:	add	r3, r2, #1
   13f28:	mvn	r3, r3
   13f2c:	cmp	r4, r3
   13f30:	bls	13f5c <__assert_fail@plt+0x3028>
   13f34:	bl	14384 <__assert_fail@plt+0x3450>
   13f38:	cmp	r4, #0
   13f3c:	bne	13f64 <__assert_fail@plt+0x3030>
   13f40:	mov	r1, r2
   13f44:	mov	r0, #64	; 0x40
   13f48:	bl	14e1c <__assert_fail@plt+0x3ee8>
   13f4c:	cmp	r0, #0
   13f50:	movne	r4, r0
   13f54:	addeq	r4, r0, #1
   13f58:	b	13f64 <__assert_fail@plt+0x3030>
   13f5c:	add	r4, r4, #1
   13f60:	add	r4, r4, r2
   13f64:	mov	r2, r6
   13f68:	mov	r1, r4
   13f6c:	mov	r0, r7
   13f70:	bl	13e64 <__assert_fail@plt+0x2f30>
   13f74:	str	r4, [r5]
   13f78:	pop	{r4, r5, r6, r7, r8, pc}
   13f7c:	push	{r4, lr}
   13f80:	mov	r2, #1
   13f84:	bl	13f08 <__assert_fail@plt+0x2fd4>
   13f88:	pop	{r4, pc}
   13f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f90:	sub	sp, sp, #12
   13f94:	mov	fp, r0
   13f98:	mov	sl, r1
   13f9c:	mov	r9, r2
   13fa0:	mov	r7, r3
   13fa4:	ldr	r6, [sp, #48]	; 0x30
   13fa8:	ldr	r5, [r1]
   13fac:	asrs	r4, r5, #1
   13fb0:	bmi	1410c <__assert_fail@plt+0x31d8>
   13fb4:	cmp	r5, #0
   13fb8:	blt	14120 <__assert_fail@plt+0x31ec>
   13fbc:	mvn	r3, #-2147483648	; 0x80000000
   13fc0:	sub	r3, r3, r4
   13fc4:	cmp	r5, r3
   13fc8:	movle	r3, #0
   13fcc:	movgt	r3, #1
   13fd0:	cmp	r3, #0
   13fd4:	addeq	r4, r4, r5
   13fd8:	mvnne	r4, #-2147483648	; 0x80000000
   13fdc:	mvn	r8, r7
   13fe0:	lsr	r8, r8, #31
   13fe4:	cmp	r7, r4
   13fe8:	movge	r3, #0
   13fec:	andlt	r3, r8, #1
   13ff0:	cmp	r3, #0
   13ff4:	movne	r4, r7
   13ff8:	cmp	r6, #0
   13ffc:	blt	14134 <__assert_fail@plt+0x3200>
   14000:	cmp	r6, #0
   14004:	beq	141e0 <__assert_fail@plt+0x32ac>
   14008:	cmp	r4, #0
   1400c:	blt	14190 <__assert_fail@plt+0x325c>
   14010:	mov	r1, r6
   14014:	mvn	r0, #-2147483648	; 0x80000000
   14018:	bl	15028 <__assert_fail@plt+0x40f4>
   1401c:	cmp	r0, r4
   14020:	movge	r0, #0
   14024:	movlt	r0, #1
   14028:	cmp	r0, #0
   1402c:	mvnne	r3, #-2147483648	; 0x80000000
   14030:	strne	r3, [sp, #4]
   14034:	beq	141c8 <__assert_fail@plt+0x3294>
   14038:	mov	r1, r6
   1403c:	ldr	r0, [sp, #4]
   14040:	bl	15028 <__assert_fail@plt+0x40f4>
   14044:	mov	r4, r0
   14048:	mov	r1, r6
   1404c:	ldr	r0, [sp, #4]
   14050:	bl	15248 <__assert_fail@plt+0x4314>
   14054:	ldr	r3, [sp, #4]
   14058:	sub	r1, r3, r1
   1405c:	cmp	fp, #0
   14060:	moveq	r3, #0
   14064:	streq	r3, [sl]
   14068:	sub	r3, r4, r5
   1406c:	cmp	r3, r9
   14070:	bge	140f8 <__assert_fail@plt+0x31c4>
   14074:	cmp	r9, #0
   14078:	blt	141ec <__assert_fail@plt+0x32b8>
   1407c:	cmp	r5, #0
   14080:	blt	14200 <__assert_fail@plt+0x32cc>
   14084:	mvn	r3, #-2147483648	; 0x80000000
   14088:	sub	r3, r3, r9
   1408c:	cmp	r5, r3
   14090:	movle	r3, #0
   14094:	movgt	r3, #1
   14098:	cmp	r3, #0
   1409c:	bne	142a8 <__assert_fail@plt+0x3374>
   140a0:	add	r5, r5, r9
   140a4:	mov	r4, r5
   140a8:	cmp	r7, r5
   140ac:	movge	r7, #0
   140b0:	andlt	r7, r8, #1
   140b4:	cmp	r7, #0
   140b8:	bne	142a8 <__assert_fail@plt+0x3374>
   140bc:	cmp	r6, #0
   140c0:	blt	14214 <__assert_fail@plt+0x32e0>
   140c4:	cmp	r6, #0
   140c8:	beq	140f4 <__assert_fail@plt+0x31c0>
   140cc:	cmp	r5, #0
   140d0:	blt	14270 <__assert_fail@plt+0x333c>
   140d4:	mov	r1, r6
   140d8:	mvn	r0, #-2147483648	; 0x80000000
   140dc:	bl	15028 <__assert_fail@plt+0x40f4>
   140e0:	cmp	r5, r0
   140e4:	movle	r0, #0
   140e8:	movgt	r0, #1
   140ec:	cmp	r0, #0
   140f0:	bne	142a8 <__assert_fail@plt+0x3374>
   140f4:	mul	r1, r5, r6
   140f8:	mov	r0, fp
   140fc:	bl	13e14 <__assert_fail@plt+0x2ee0>
   14100:	str	r4, [sl]
   14104:	add	sp, sp, #12
   14108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1410c:	rsb	r3, r4, #-2147483648	; 0x80000000
   14110:	cmp	r5, r3
   14114:	movge	r3, #0
   14118:	movlt	r3, #1
   1411c:	b	13fd0 <__assert_fail@plt+0x309c>
   14120:	rsb	r3, r5, #-2147483648	; 0x80000000
   14124:	cmp	r4, r3
   14128:	movge	r3, #0
   1412c:	movlt	r3, #1
   14130:	b	13fd0 <__assert_fail@plt+0x309c>
   14134:	cmp	r4, #0
   14138:	blt	14160 <__assert_fail@plt+0x322c>
   1413c:	cmn	r6, #1
   14140:	beq	1417c <__assert_fail@plt+0x3248>
   14144:	mov	r1, r6
   14148:	mov	r0, #-2147483648	; 0x80000000
   1414c:	bl	15028 <__assert_fail@plt+0x40f4>
   14150:	cmp	r0, r4
   14154:	movge	r0, #0
   14158:	movlt	r0, #1
   1415c:	b	14028 <__assert_fail@plt+0x30f4>
   14160:	mov	r1, r6
   14164:	mvn	r0, #-2147483648	; 0x80000000
   14168:	bl	15028 <__assert_fail@plt+0x40f4>
   1416c:	cmp	r0, r4
   14170:	movle	r0, #0
   14174:	movgt	r0, #1
   14178:	b	14028 <__assert_fail@plt+0x30f4>
   1417c:	add	r0, r4, #-2147483648	; 0x80000000
   14180:	cmp	r0, #0
   14184:	movle	r0, #0
   14188:	movgt	r0, #1
   1418c:	b	14028 <__assert_fail@plt+0x30f4>
   14190:	cmn	r4, #1
   14194:	beq	141b4 <__assert_fail@plt+0x3280>
   14198:	mov	r1, r4
   1419c:	mov	r0, #-2147483648	; 0x80000000
   141a0:	bl	15028 <__assert_fail@plt+0x40f4>
   141a4:	cmp	r6, r0
   141a8:	movle	r0, #0
   141ac:	movgt	r0, #1
   141b0:	b	14028 <__assert_fail@plt+0x30f4>
   141b4:	add	r0, r6, #-2147483648	; 0x80000000
   141b8:	cmp	r0, #0
   141bc:	movle	r0, #0
   141c0:	movgt	r0, #1
   141c4:	b	14028 <__assert_fail@plt+0x30f4>
   141c8:	mul	r1, r6, r4
   141cc:	cmp	r1, #63	; 0x3f
   141d0:	movle	r3, #64	; 0x40
   141d4:	strle	r3, [sp, #4]
   141d8:	bgt	1405c <__assert_fail@plt+0x3128>
   141dc:	b	14038 <__assert_fail@plt+0x3104>
   141e0:	mov	r3, #64	; 0x40
   141e4:	str	r3, [sp, #4]
   141e8:	b	14038 <__assert_fail@plt+0x3104>
   141ec:	rsb	r3, r9, #-2147483648	; 0x80000000
   141f0:	cmp	r5, r3
   141f4:	movge	r3, #0
   141f8:	movlt	r3, #1
   141fc:	b	14098 <__assert_fail@plt+0x3164>
   14200:	rsb	r3, r5, #-2147483648	; 0x80000000
   14204:	cmp	r9, r3
   14208:	movge	r3, #0
   1420c:	movlt	r3, #1
   14210:	b	14098 <__assert_fail@plt+0x3164>
   14214:	cmp	r5, #0
   14218:	blt	14240 <__assert_fail@plt+0x330c>
   1421c:	cmn	r6, #1
   14220:	beq	1425c <__assert_fail@plt+0x3328>
   14224:	mov	r1, r6
   14228:	mov	r0, #-2147483648	; 0x80000000
   1422c:	bl	15028 <__assert_fail@plt+0x40f4>
   14230:	cmp	r5, r0
   14234:	movle	r0, #0
   14238:	movgt	r0, #1
   1423c:	b	140ec <__assert_fail@plt+0x31b8>
   14240:	mov	r1, r6
   14244:	mvn	r0, #-2147483648	; 0x80000000
   14248:	bl	15028 <__assert_fail@plt+0x40f4>
   1424c:	cmp	r5, r0
   14250:	movge	r0, #0
   14254:	movlt	r0, #1
   14258:	b	140ec <__assert_fail@plt+0x31b8>
   1425c:	add	r0, r5, #-2147483648	; 0x80000000
   14260:	cmp	r0, #0
   14264:	movle	r0, #0
   14268:	movgt	r0, #1
   1426c:	b	140ec <__assert_fail@plt+0x31b8>
   14270:	cmn	r5, #1
   14274:	beq	14294 <__assert_fail@plt+0x3360>
   14278:	mov	r1, r5
   1427c:	mov	r0, #-2147483648	; 0x80000000
   14280:	bl	15028 <__assert_fail@plt+0x40f4>
   14284:	cmp	r6, r0
   14288:	movle	r0, #0
   1428c:	movgt	r0, #1
   14290:	b	140ec <__assert_fail@plt+0x31b8>
   14294:	add	r0, r6, #-2147483648	; 0x80000000
   14298:	cmp	r0, #0
   1429c:	movle	r0, #0
   142a0:	movgt	r0, #1
   142a4:	b	140ec <__assert_fail@plt+0x31b8>
   142a8:	bl	14384 <__assert_fail@plt+0x3450>
   142ac:	push	{r4, lr}
   142b0:	bl	14a9c <__assert_fail@plt+0x3b68>
   142b4:	cmp	r0, #0
   142b8:	popne	{r4, pc}
   142bc:	bl	14384 <__assert_fail@plt+0x3450>
   142c0:	push	{r4, lr}
   142c4:	mov	r1, #1
   142c8:	bl	142ac <__assert_fail@plt+0x3378>
   142cc:	pop	{r4, pc}
   142d0:	push	{r4, lr}
   142d4:	bl	14a9c <__assert_fail@plt+0x3b68>
   142d8:	cmp	r0, #0
   142dc:	popne	{r4, pc}
   142e0:	bl	14384 <__assert_fail@plt+0x3450>
   142e4:	push	{r4, lr}
   142e8:	mov	r1, #1
   142ec:	bl	142d0 <__assert_fail@plt+0x339c>
   142f0:	pop	{r4, pc}
   142f4:	push	{r4, r5, r6, lr}
   142f8:	mov	r5, r0
   142fc:	mov	r4, r1
   14300:	mov	r0, r1
   14304:	bl	13de0 <__assert_fail@plt+0x2eac>
   14308:	mov	r2, r4
   1430c:	mov	r1, r5
   14310:	bl	10d30 <memcpy@plt>
   14314:	pop	{r4, r5, r6, pc}
   14318:	push	{r4, r5, r6, lr}
   1431c:	mov	r5, r0
   14320:	mov	r4, r1
   14324:	mov	r0, r1
   14328:	bl	13df4 <__assert_fail@plt+0x2ec0>
   1432c:	mov	r2, r4
   14330:	mov	r1, r5
   14334:	bl	10d30 <memcpy@plt>
   14338:	pop	{r4, r5, r6, pc}
   1433c:	push	{r4, r5, r6, lr}
   14340:	mov	r5, r0
   14344:	mov	r4, r1
   14348:	add	r0, r1, #1
   1434c:	bl	13df4 <__assert_fail@plt+0x2ec0>
   14350:	mov	r2, #0
   14354:	strb	r2, [r0, r4]
   14358:	mov	r2, r4
   1435c:	mov	r1, r5
   14360:	bl	10d30 <memcpy@plt>
   14364:	pop	{r4, r5, r6, pc}
   14368:	push	{r4, lr}
   1436c:	mov	r4, r0
   14370:	bl	10e44 <strlen@plt>
   14374:	add	r1, r0, #1
   14378:	mov	r0, r4
   1437c:	bl	142f4 <__assert_fail@plt+0x33c0>
   14380:	pop	{r4, pc}
   14384:	push	{r4, lr}
   14388:	ldr	r3, [pc, #40]	; 143b8 <__assert_fail@plt+0x3484>
   1438c:	ldr	r4, [r3]
   14390:	mov	r2, #5
   14394:	ldr	r1, [pc, #32]	; 143bc <__assert_fail@plt+0x3488>
   14398:	mov	r0, #0
   1439c:	bl	10d78 <dcgettext@plt>
   143a0:	mov	r3, r0
   143a4:	ldr	r2, [pc, #20]	; 143c0 <__assert_fail@plt+0x348c>
   143a8:	mov	r1, #0
   143ac:	mov	r0, r4
   143b0:	bl	10de4 <error@plt>
   143b4:	bl	10f28 <abort@plt>
   143b8:	strdeq	r6, [r2], -r0
   143bc:	andeq	r5, r1, r4, asr sp
   143c0:	andeq	r5, r1, ip, lsl r9
   143c4:	push	{r4, r5, r6, r7, lr}
   143c8:	sub	sp, sp, #20
   143cc:	mov	r7, r0
   143d0:	mov	r4, r2
   143d4:	mov	r5, r3
   143d8:	ldr	r6, [sp, #56]	; 0x38
   143dc:	ldr	r3, [sp, #48]	; 0x30
   143e0:	str	r3, [sp]
   143e4:	add	r3, sp, #8
   143e8:	mov	r2, r1
   143ec:	mov	r1, #0
   143f0:	bl	1461c <__assert_fail@plt+0x36e8>
   143f4:	cmp	r0, #0
   143f8:	bne	14478 <__assert_fail@plt+0x3544>
   143fc:	ldrd	r0, [sp, #8]
   14400:	ldrd	r2, [sp, #40]	; 0x28
   14404:	cmp	r1, r3
   14408:	cmpeq	r0, r2
   1440c:	movhi	r3, #1
   14410:	movls	r3, #0
   14414:	cmp	r1, r5
   14418:	cmpeq	r0, r4
   1441c:	orrcc	r3, r3, #1
   14420:	cmp	r3, #0
   14424:	beq	144f0 <__assert_fail@plt+0x35bc>
   14428:	mvn	r2, #-1073741824	; 0xc0000000
   1442c:	mov	r3, #0
   14430:	cmp	r1, r3
   14434:	cmpeq	r0, r2
   14438:	bls	14468 <__assert_fail@plt+0x3534>
   1443c:	bl	10e5c <__errno_location@plt>
   14440:	mov	r3, #75	; 0x4b
   14444:	str	r3, [r0]
   14448:	cmp	r6, #0
   1444c:	bne	144c8 <__assert_fail@plt+0x3594>
   14450:	mov	r6, #1
   14454:	bl	10e5c <__errno_location@plt>
   14458:	ldr	r4, [r0]
   1445c:	cmp	r4, #22
   14460:	moveq	r4, #0
   14464:	b	144d0 <__assert_fail@plt+0x359c>
   14468:	bl	10e5c <__errno_location@plt>
   1446c:	mov	r3, #34	; 0x22
   14470:	str	r3, [r0]
   14474:	b	14448 <__assert_fail@plt+0x3514>
   14478:	cmp	r0, #1
   1447c:	beq	14494 <__assert_fail@plt+0x3560>
   14480:	cmp	r0, #3
   14484:	beq	144b8 <__assert_fail@plt+0x3584>
   14488:	cmp	r6, #0
   1448c:	moveq	r6, #1
   14490:	b	14454 <__assert_fail@plt+0x3520>
   14494:	bl	10e5c <__errno_location@plt>
   14498:	mov	r3, #75	; 0x4b
   1449c:	str	r3, [r0]
   144a0:	cmp	r6, #0
   144a4:	bne	14454 <__assert_fail@plt+0x3520>
   144a8:	bl	10e5c <__errno_location@plt>
   144ac:	ldr	r4, [r0]
   144b0:	mov	r6, #1
   144b4:	b	144d0 <__assert_fail@plt+0x359c>
   144b8:	bl	10e5c <__errno_location@plt>
   144bc:	mov	r3, #0
   144c0:	str	r3, [r0]
   144c4:	b	144a0 <__assert_fail@plt+0x356c>
   144c8:	bl	10e5c <__errno_location@plt>
   144cc:	ldr	r4, [r0]
   144d0:	mov	r0, r7
   144d4:	bl	13848 <__assert_fail@plt+0x2914>
   144d8:	str	r0, [sp]
   144dc:	ldr	r3, [sp, #52]	; 0x34
   144e0:	ldr	r2, [pc, #16]	; 144f8 <__assert_fail@plt+0x35c4>
   144e4:	mov	r1, r4
   144e8:	mov	r0, r6
   144ec:	bl	10de4 <error@plt>
   144f0:	add	sp, sp, #20
   144f4:	pop	{r4, r5, r6, r7, pc}
   144f8:	andeq	r5, r1, r8, lsl r9
   144fc:	push	{r4, r5, lr}
   14500:	sub	sp, sp, #28
   14504:	ldr	r1, [sp, #56]	; 0x38
   14508:	str	r1, [sp, #16]
   1450c:	ldr	r1, [sp, #52]	; 0x34
   14510:	str	r1, [sp, #12]
   14514:	ldr	r1, [sp, #48]	; 0x30
   14518:	str	r1, [sp, #8]
   1451c:	ldrd	r4, [sp, #40]	; 0x28
   14520:	strd	r4, [sp]
   14524:	mov	r1, #10
   14528:	bl	143c4 <__assert_fail@plt+0x3490>
   1452c:	add	sp, sp, #28
   14530:	pop	{r4, r5, pc}
   14534:	push	{r4, r5, r6, lr}
   14538:	mov	r5, r0
   1453c:	subs	r4, r1, #0
   14540:	blt	14594 <__assert_fail@plt+0x3660>
   14544:	cmp	r4, #0
   14548:	moveq	r3, #0
   1454c:	beq	14578 <__assert_fail@plt+0x3644>
   14550:	mov	r2, r4
   14554:	asr	r3, r4, #31
   14558:	mvn	r0, #0
   1455c:	mvn	r1, #0
   14560:	bl	15268 <__assert_fail@plt+0x4334>
   14564:	ldrd	r2, [r5]
   14568:	cmp	r1, r3
   1456c:	cmpeq	r0, r2
   14570:	movcc	r3, #1
   14574:	movcs	r3, #0
   14578:	cmp	r3, #0
   1457c:	beq	145b4 <__assert_fail@plt+0x3680>
   14580:	mvn	r2, #0
   14584:	mvn	r3, #0
   14588:	strd	r2, [r5]
   1458c:	mov	r0, #1
   14590:	pop	{r4, r5, r6, pc}
   14594:	mov	r1, r4
   14598:	mov	r0, #0
   1459c:	bl	15028 <__assert_fail@plt+0x40f4>
   145a0:	ldrd	r2, [r5]
   145a4:	orrs	r3, r2, r3
   145a8:	movne	r3, #1
   145ac:	moveq	r3, #0
   145b0:	b	14578 <__assert_fail@plt+0x3644>
   145b4:	asr	r3, r4, #31
   145b8:	ldr	r1, [r5, #4]
   145bc:	ldr	r2, [r5]
   145c0:	mul	r3, r3, r2
   145c4:	mla	r1, r4, r1, r3
   145c8:	umull	r2, r3, r2, r4
   145cc:	add	r3, r1, r3
   145d0:	strd	r2, [r5]
   145d4:	mov	r0, #0
   145d8:	pop	{r4, r5, r6, pc}
   145dc:	push	{r4, r5, r6, r7, r8, lr}
   145e0:	subs	r4, r2, #0
   145e4:	beq	14614 <__assert_fail@plt+0x36e0>
   145e8:	mov	r7, r1
   145ec:	mov	r6, r0
   145f0:	mov	r5, #0
   145f4:	mov	r1, r7
   145f8:	mov	r0, r6
   145fc:	bl	14534 <__assert_fail@plt+0x3600>
   14600:	orr	r5, r5, r0
   14604:	subs	r4, r4, #1
   14608:	bne	145f4 <__assert_fail@plt+0x36c0>
   1460c:	mov	r0, r5
   14610:	pop	{r4, r5, r6, r7, r8, pc}
   14614:	mov	r5, #0
   14618:	b	1460c <__assert_fail@plt+0x36d8>
   1461c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14620:	sub	sp, sp, #20
   14624:	cmp	r2, #36	; 0x24
   14628:	bhi	14668 <__assert_fail@plt+0x3734>
   1462c:	mov	r5, r0
   14630:	mov	r6, r1
   14634:	mov	r7, r2
   14638:	mov	r9, r3
   1463c:	cmp	r1, #0
   14640:	addeq	r6, sp, #12
   14644:	bl	10e5c <__errno_location@plt>
   14648:	mov	r8, r0
   1464c:	mov	r3, #0
   14650:	str	r3, [r0]
   14654:	ldrb	r4, [r5]
   14658:	bl	10e2c <__ctype_b_loc@plt>
   1465c:	ldr	r1, [r0]
   14660:	mov	r2, r5
   14664:	b	14680 <__assert_fail@plt+0x374c>
   14668:	ldr	r3, [pc, #1056]	; 14a90 <__assert_fail@plt+0x3b5c>
   1466c:	mov	r2, #85	; 0x55
   14670:	ldr	r1, [pc, #1052]	; 14a94 <__assert_fail@plt+0x3b60>
   14674:	ldr	r0, [pc, #1052]	; 14a98 <__assert_fail@plt+0x3b64>
   14678:	bl	10f34 <__assert_fail@plt>
   1467c:	ldrb	r4, [r2, #1]!
   14680:	lsl	r3, r4, #1
   14684:	ldrh	r3, [r1, r3]
   14688:	tst	r3, #8192	; 0x2000
   1468c:	bne	1467c <__assert_fail@plt+0x3748>
   14690:	cmp	r4, #45	; 0x2d
   14694:	moveq	r4, #4
   14698:	bne	146a8 <__assert_fail@plt+0x3774>
   1469c:	mov	r0, r4
   146a0:	add	sp, sp, #20
   146a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   146a8:	mov	r3, #0
   146ac:	mov	r2, r7
   146b0:	mov	r1, r6
   146b4:	mov	r0, r5
   146b8:	bl	10d3c <__strtoull_internal@plt>
   146bc:	strd	r0, [sp]
   146c0:	ldr	r7, [r6]
   146c4:	cmp	r5, r7
   146c8:	beq	146ec <__assert_fail@plt+0x37b8>
   146cc:	ldr	r3, [r8]
   146d0:	cmp	r3, #0
   146d4:	beq	14734 <__assert_fail@plt+0x3800>
   146d8:	cmp	r3, #34	; 0x22
   146dc:	moveq	r4, #1
   146e0:	beq	14738 <__assert_fail@plt+0x3804>
   146e4:	mov	r4, #4
   146e8:	b	1469c <__assert_fail@plt+0x3768>
   146ec:	ldr	r3, [sp, #48]	; 0x30
   146f0:	cmp	r3, #0
   146f4:	moveq	r4, #4
   146f8:	beq	1469c <__assert_fail@plt+0x3768>
   146fc:	ldrb	r1, [r7]
   14700:	cmp	r1, #0
   14704:	moveq	r4, #4
   14708:	beq	1469c <__assert_fail@plt+0x3768>
   1470c:	mov	r0, r3
   14710:	bl	10e50 <strchr@plt>
   14714:	cmp	r0, #0
   14718:	moveq	r4, #4
   1471c:	beq	1469c <__assert_fail@plt+0x3768>
   14720:	mov	r2, #1
   14724:	mov	r3, #0
   14728:	strd	r2, [sp]
   1472c:	mov	r4, #0
   14730:	b	14744 <__assert_fail@plt+0x3810>
   14734:	mov	r4, #0
   14738:	ldr	r3, [sp, #48]	; 0x30
   1473c:	cmp	r3, #0
   14740:	beq	14834 <__assert_fail@plt+0x3900>
   14744:	ldrb	r5, [r7]
   14748:	cmp	r5, #0
   1474c:	beq	149cc <__assert_fail@plt+0x3a98>
   14750:	mov	r1, r5
   14754:	ldr	r0, [sp, #48]	; 0x30
   14758:	bl	10e50 <strchr@plt>
   1475c:	cmp	r0, #0
   14760:	beq	1483c <__assert_fail@plt+0x3908>
   14764:	sub	r3, r5, #69	; 0x45
   14768:	cmp	r3, #47	; 0x2f
   1476c:	ldrls	pc, [pc, r3, lsl #2]
   14770:	b	148a8 <__assert_fail@plt+0x3974>
   14774:	andeq	r4, r1, ip, asr #16
   14778:	andeq	r4, r1, r8, lsr #17
   1477c:	andeq	r4, r1, ip, asr #16
   14780:	andeq	r4, r1, r8, lsr #17
   14784:	andeq	r4, r1, r8, lsr #17
   14788:	andeq	r4, r1, r8, lsr #17
   1478c:	andeq	r4, r1, ip, asr #16
   14790:	andeq	r4, r1, r8, lsr #17
   14794:	andeq	r4, r1, ip, asr #16
   14798:	andeq	r4, r1, r8, lsr #17
   1479c:	andeq	r4, r1, r8, lsr #17
   147a0:	andeq	r4, r1, ip, asr #16
   147a4:	andeq	r4, r1, r8, lsr #17
   147a8:	andeq	r4, r1, r8, lsr #17
   147ac:	andeq	r4, r1, r8, lsr #17
   147b0:	andeq	r4, r1, ip, asr #16
   147b4:	andeq	r4, r1, r8, lsr #17
   147b8:	andeq	r4, r1, r8, lsr #17
   147bc:	andeq	r4, r1, r8, lsr #17
   147c0:	andeq	r4, r1, r8, lsr #17
   147c4:	andeq	r4, r1, ip, asr #16
   147c8:	andeq	r4, r1, ip, asr #16
   147cc:	andeq	r4, r1, r8, lsr #17
   147d0:	andeq	r4, r1, r8, lsr #17
   147d4:	andeq	r4, r1, r8, lsr #17
   147d8:	andeq	r4, r1, r8, lsr #17
   147dc:	andeq	r4, r1, r8, lsr #17
   147e0:	andeq	r4, r1, r8, lsr #17
   147e4:	andeq	r4, r1, r8, lsr #17
   147e8:	andeq	r4, r1, r8, lsr #17
   147ec:	andeq	r4, r1, r8, lsr #17
   147f0:	andeq	r4, r1, r8, lsr #17
   147f4:	andeq	r4, r1, r8, lsr #17
   147f8:	andeq	r4, r1, r8, lsr #17
   147fc:	andeq	r4, r1, ip, asr #16
   14800:	andeq	r4, r1, r8, lsr #17
   14804:	andeq	r4, r1, r8, lsr #17
   14808:	andeq	r4, r1, r8, lsr #17
   1480c:	andeq	r4, r1, ip, asr #16
   14810:	andeq	r4, r1, r8, lsr #17
   14814:	andeq	r4, r1, ip, asr #16
   14818:	andeq	r4, r1, r8, lsr #17
   1481c:	andeq	r4, r1, r8, lsr #17
   14820:	andeq	r4, r1, r8, lsr #17
   14824:	andeq	r4, r1, r8, lsr #17
   14828:	andeq	r4, r1, r8, lsr #17
   1482c:	andeq	r4, r1, r8, lsr #17
   14830:	andeq	r4, r1, ip, asr #16
   14834:	strd	r0, [r9]
   14838:	b	1469c <__assert_fail@plt+0x3768>
   1483c:	ldrd	r2, [sp]
   14840:	strd	r2, [r9]
   14844:	orr	r4, r4, #2
   14848:	b	1469c <__assert_fail@plt+0x3768>
   1484c:	mov	r1, #48	; 0x30
   14850:	ldr	r0, [sp, #48]	; 0x30
   14854:	bl	10e50 <strchr@plt>
   14858:	cmp	r0, #0
   1485c:	beq	14998 <__assert_fail@plt+0x3a64>
   14860:	ldrb	r3, [r7, #1]
   14864:	cmp	r3, #68	; 0x44
   14868:	beq	14884 <__assert_fail@plt+0x3950>
   1486c:	cmp	r3, #105	; 0x69
   14870:	beq	14890 <__assert_fail@plt+0x395c>
   14874:	cmp	r3, #66	; 0x42
   14878:	movne	r7, #1
   1487c:	movne	r1, #1024	; 0x400
   14880:	bne	148b0 <__assert_fail@plt+0x397c>
   14884:	mov	r7, #2
   14888:	mov	r1, #1000	; 0x3e8
   1488c:	b	148b0 <__assert_fail@plt+0x397c>
   14890:	ldrb	r7, [r7, #2]
   14894:	cmp	r7, #66	; 0x42
   14898:	movne	r7, #1
   1489c:	moveq	r7, #3
   148a0:	mov	r1, #1024	; 0x400
   148a4:	b	148b0 <__assert_fail@plt+0x397c>
   148a8:	mov	r7, #1
   148ac:	mov	r1, #1024	; 0x400
   148b0:	sub	r5, r5, #66	; 0x42
   148b4:	cmp	r5, #53	; 0x35
   148b8:	ldrls	pc, [pc, r5, lsl #2]
   148bc:	b	14a78 <__assert_fail@plt+0x3b44>
   148c0:	ldrdeq	r4, [r1], -r8
   148c4:	andeq	r4, r1, r8, ror sl
   148c8:	andeq	r4, r1, r8, ror sl
   148cc:	andeq	r4, r1, r8, ror #19
   148d0:	andeq	r4, r1, r8, ror sl
   148d4:	strdeq	r4, [r1], -r8
   148d8:	andeq	r4, r1, r8, ror sl
   148dc:	andeq	r4, r1, r8, ror sl
   148e0:	andeq	r4, r1, r8, ror sl
   148e4:	andeq	r4, r1, r8, lsl #20
   148e8:	andeq	r4, r1, r8, ror sl
   148ec:	andeq	r4, r1, r8, lsl sl
   148f0:	andeq	r4, r1, r8, ror sl
   148f4:	andeq	r4, r1, r8, ror sl
   148f8:	andeq	r4, r1, r8, lsr #20
   148fc:	andeq	r4, r1, r8, ror sl
   14900:	andeq	r4, r1, r8, ror sl
   14904:	andeq	r4, r1, r8, ror sl
   14908:	andeq	r4, r1, r8, lsr sl
   1490c:	andeq	r4, r1, r8, ror sl
   14910:	andeq	r4, r1, r8, ror sl
   14914:	andeq	r4, r1, r8, ror sl
   14918:	andeq	r4, r1, r8, ror sl
   1491c:	andeq	r4, r1, r8, asr sl
   14920:	andeq	r4, r1, r8, ror #20
   14924:	andeq	r4, r1, r8, ror sl
   14928:	andeq	r4, r1, r8, ror sl
   1492c:	andeq	r4, r1, r8, ror sl
   14930:	andeq	r4, r1, r8, ror sl
   14934:	andeq	r4, r1, r8, ror sl
   14938:	andeq	r4, r1, r8, ror sl
   1493c:	andeq	r4, r1, r8, ror sl
   14940:	andeq	r4, r1, r4, lsr #19
   14944:	andeq	r4, r1, r8, lsl #21
   14948:	andeq	r4, r1, r8, ror sl
   1494c:	andeq	r4, r1, r8, ror sl
   14950:	andeq	r4, r1, r8, ror sl
   14954:	strdeq	r4, [r1], -r8
   14958:	andeq	r4, r1, r8, ror sl
   1495c:	andeq	r4, r1, r8, ror sl
   14960:	andeq	r4, r1, r8, ror sl
   14964:	andeq	r4, r1, r8, lsl #20
   14968:	andeq	r4, r1, r8, ror sl
   1496c:	andeq	r4, r1, r8, lsl sl
   14970:	andeq	r4, r1, r8, ror sl
   14974:	andeq	r4, r1, r8, ror sl
   14978:	andeq	r4, r1, r8, ror sl
   1497c:	andeq	r4, r1, r8, ror sl
   14980:	andeq	r4, r1, r8, ror sl
   14984:	andeq	r4, r1, r8, ror sl
   14988:	andeq	r4, r1, r8, lsr sl
   1498c:	andeq	r4, r1, r8, ror sl
   14990:	andeq	r4, r1, r8, ror sl
   14994:	andeq	r4, r1, r8, asr #20
   14998:	mov	r7, #1
   1499c:	mov	r1, #1024	; 0x400
   149a0:	b	148b0 <__assert_fail@plt+0x397c>
   149a4:	mov	r1, #512	; 0x200
   149a8:	mov	r0, sp
   149ac:	bl	14534 <__assert_fail@plt+0x3600>
   149b0:	orr	r4, r4, r0
   149b4:	ldr	r3, [r6]
   149b8:	add	r2, r3, r7
   149bc:	str	r2, [r6]
   149c0:	ldrb	r3, [r3, r7]
   149c4:	cmp	r3, #0
   149c8:	orrne	r4, r4, #2
   149cc:	ldrd	r2, [sp]
   149d0:	strd	r2, [r9]
   149d4:	b	1469c <__assert_fail@plt+0x3768>
   149d8:	mov	r1, #1024	; 0x400
   149dc:	mov	r0, sp
   149e0:	bl	14534 <__assert_fail@plt+0x3600>
   149e4:	b	149b0 <__assert_fail@plt+0x3a7c>
   149e8:	mov	r2, #6
   149ec:	mov	r0, sp
   149f0:	bl	145dc <__assert_fail@plt+0x36a8>
   149f4:	b	149b0 <__assert_fail@plt+0x3a7c>
   149f8:	mov	r2, #3
   149fc:	mov	r0, sp
   14a00:	bl	145dc <__assert_fail@plt+0x36a8>
   14a04:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a08:	mov	r2, #1
   14a0c:	mov	r0, sp
   14a10:	bl	145dc <__assert_fail@plt+0x36a8>
   14a14:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a18:	mov	r2, #2
   14a1c:	mov	r0, sp
   14a20:	bl	145dc <__assert_fail@plt+0x36a8>
   14a24:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a28:	mov	r2, #5
   14a2c:	mov	r0, sp
   14a30:	bl	145dc <__assert_fail@plt+0x36a8>
   14a34:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a38:	mov	r2, #4
   14a3c:	mov	r0, sp
   14a40:	bl	145dc <__assert_fail@plt+0x36a8>
   14a44:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a48:	mov	r1, #2
   14a4c:	mov	r0, sp
   14a50:	bl	14534 <__assert_fail@plt+0x3600>
   14a54:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a58:	mov	r2, #8
   14a5c:	mov	r0, sp
   14a60:	bl	145dc <__assert_fail@plt+0x36a8>
   14a64:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a68:	mov	r2, #7
   14a6c:	mov	r0, sp
   14a70:	bl	145dc <__assert_fail@plt+0x36a8>
   14a74:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a78:	ldrd	r2, [sp]
   14a7c:	strd	r2, [r9]
   14a80:	orr	r4, r4, #2
   14a84:	b	1469c <__assert_fail@plt+0x3768>
   14a88:	mov	r0, #0
   14a8c:	b	149b0 <__assert_fail@plt+0x3a7c>
   14a90:	andeq	r5, r1, r8, ror #26
   14a94:	andeq	r5, r1, r4, ror sp
   14a98:	andeq	r5, r1, r4, lsl #27
   14a9c:	push	{r4, lr}
   14aa0:	mov	r2, r0
   14aa4:	mov	r3, r1
   14aa8:	cmp	r1, #0
   14aac:	cmpne	r0, #0
   14ab0:	moveq	r3, #1
   14ab4:	moveq	r2, r3
   14ab8:	umull	r0, r1, r2, r3
   14abc:	cmp	r0, #0
   14ac0:	cmpge	r1, #0
   14ac4:	bne	14ad8 <__assert_fail@plt+0x3ba4>
   14ac8:	mov	r1, r3
   14acc:	mov	r0, r2
   14ad0:	bl	10cc4 <calloc@plt>
   14ad4:	pop	{r4, pc}
   14ad8:	bl	10e5c <__errno_location@plt>
   14adc:	mov	r3, #12
   14ae0:	str	r3, [r0]
   14ae4:	mov	r0, #0
   14ae8:	pop	{r4, pc}
   14aec:	push	{r4, lr}
   14af0:	cmp	r0, #0
   14af4:	moveq	r0, #1
   14af8:	cmp	r0, #0
   14afc:	blt	14b08 <__assert_fail@plt+0x3bd4>
   14b00:	bl	10df0 <malloc@plt>
   14b04:	pop	{r4, pc}
   14b08:	bl	10e5c <__errno_location@plt>
   14b0c:	mov	r3, #12
   14b10:	str	r3, [r0]
   14b14:	mov	r0, #0
   14b18:	pop	{r4, pc}
   14b1c:	push	{r4, lr}
   14b20:	cmp	r0, #0
   14b24:	beq	14b40 <__assert_fail@plt+0x3c0c>
   14b28:	cmp	r1, #0
   14b2c:	beq	14b4c <__assert_fail@plt+0x3c18>
   14b30:	cmp	r1, #0
   14b34:	blt	14b58 <__assert_fail@plt+0x3c24>
   14b38:	bl	10d84 <realloc@plt>
   14b3c:	pop	{r4, pc}
   14b40:	mov	r0, r1
   14b44:	bl	14aec <__assert_fail@plt+0x3bb8>
   14b48:	pop	{r4, pc}
   14b4c:	bl	14be4 <__assert_fail@plt+0x3cb0>
   14b50:	mov	r0, #0
   14b54:	pop	{r4, pc}
   14b58:	bl	10e5c <__errno_location@plt>
   14b5c:	mov	r3, #12
   14b60:	str	r3, [r0]
   14b64:	mov	r0, #0
   14b68:	pop	{r4, pc}
   14b6c:	push	{r4, r5, r6, lr}
   14b70:	mov	r5, r0
   14b74:	bl	10dcc <__fpending@plt>
   14b78:	mov	r6, r0
   14b7c:	ldr	r4, [r5]
   14b80:	and	r4, r4, #32
   14b84:	mov	r0, r5
   14b88:	bl	11b44 <__assert_fail@plt+0xc10>
   14b8c:	cmp	r4, #0
   14b90:	bne	14bb8 <__assert_fail@plt+0x3c84>
   14b94:	cmp	r0, #0
   14b98:	popeq	{r4, r5, r6, pc}
   14b9c:	cmp	r6, #0
   14ba0:	bne	14bd4 <__assert_fail@plt+0x3ca0>
   14ba4:	bl	10e5c <__errno_location@plt>
   14ba8:	ldr	r0, [r0]
   14bac:	subs	r0, r0, #9
   14bb0:	mvnne	r0, #0
   14bb4:	pop	{r4, r5, r6, pc}
   14bb8:	cmp	r0, #0
   14bbc:	bne	14bdc <__assert_fail@plt+0x3ca8>
   14bc0:	bl	10e5c <__errno_location@plt>
   14bc4:	mov	r3, #0
   14bc8:	str	r3, [r0]
   14bcc:	mvn	r0, #0
   14bd0:	pop	{r4, r5, r6, pc}
   14bd4:	mvn	r0, #0
   14bd8:	pop	{r4, r5, r6, pc}
   14bdc:	mvn	r0, #0
   14be0:	pop	{r4, r5, r6, pc}
   14be4:	push	{r4, r5, lr}
   14be8:	sub	sp, sp, #12
   14bec:	mov	r5, r0
   14bf0:	bl	10e5c <__errno_location@plt>
   14bf4:	mov	r4, r0
   14bf8:	ldr	r3, [r0]
   14bfc:	str	r3, [sp]
   14c00:	str	r3, [sp, #4]
   14c04:	mov	r3, #0
   14c08:	str	r3, [r0]
   14c0c:	mov	r0, r5
   14c10:	bl	10d18 <free@plt>
   14c14:	ldr	r3, [r4]
   14c18:	cmp	r3, #0
   14c1c:	moveq	r3, #4
   14c20:	movne	r3, #0
   14c24:	add	r2, sp, #8
   14c28:	add	r3, r2, r3
   14c2c:	ldr	r3, [r3, #-8]
   14c30:	str	r3, [r4]
   14c34:	add	sp, sp, #12
   14c38:	pop	{r4, r5, pc}
   14c3c:	push	{r4, lr}
   14c40:	mov	r0, #14
   14c44:	bl	10eec <nl_langinfo@plt>
   14c48:	cmp	r0, #0
   14c4c:	beq	14c64 <__assert_fail@plt+0x3d30>
   14c50:	ldrb	r2, [r0]
   14c54:	ldr	r3, [pc, #16]	; 14c6c <__assert_fail@plt+0x3d38>
   14c58:	cmp	r2, #0
   14c5c:	moveq	r0, r3
   14c60:	pop	{r4, pc}
   14c64:	ldr	r0, [pc]	; 14c6c <__assert_fail@plt+0x3d38>
   14c68:	pop	{r4, pc}
   14c6c:	andeq	r5, r1, ip, lsr #27
   14c70:	push	{r4, r5, r6, r7, lr}
   14c74:	sub	sp, sp, #12
   14c78:	mov	r7, r1
   14c7c:	mov	r5, r2
   14c80:	subs	r6, r0, #0
   14c84:	addeq	r6, sp, #4
   14c88:	mov	r0, r6
   14c8c:	bl	10dd8 <mbrtowc@plt>
   14c90:	mov	r4, r0
   14c94:	cmp	r5, #0
   14c98:	cmnne	r0, #3
   14c9c:	bhi	14cac <__assert_fail@plt+0x3d78>
   14ca0:	mov	r0, r4
   14ca4:	add	sp, sp, #12
   14ca8:	pop	{r4, r5, r6, r7, pc}
   14cac:	mov	r0, #0
   14cb0:	bl	14d14 <__assert_fail@plt+0x3de0>
   14cb4:	cmp	r0, #0
   14cb8:	ldrbeq	r3, [r7]
   14cbc:	streq	r3, [r6]
   14cc0:	moveq	r4, #1
   14cc4:	b	14ca0 <__assert_fail@plt+0x3d6c>
   14cc8:	push	{r4, r5, r6, lr}
   14ccc:	mov	r6, r0
   14cd0:	mov	r5, r1
   14cd4:	subs	r4, r2, #0
   14cd8:	beq	14d04 <__assert_fail@plt+0x3dd0>
   14cdc:	mov	r1, r4
   14ce0:	mvn	r0, #0
   14ce4:	bl	14e1c <__assert_fail@plt+0x3ee8>
   14ce8:	cmp	r0, r5
   14cec:	bcs	14d04 <__assert_fail@plt+0x3dd0>
   14cf0:	bl	10e5c <__errno_location@plt>
   14cf4:	mov	r3, #12
   14cf8:	str	r3, [r0]
   14cfc:	mov	r0, #0
   14d00:	pop	{r4, r5, r6, pc}
   14d04:	mul	r1, r5, r4
   14d08:	mov	r0, r6
   14d0c:	bl	14b1c <__assert_fail@plt+0x3be8>
   14d10:	pop	{r4, r5, r6, pc}
   14d14:	push	{lr}		; (str lr, [sp, #-4]!)
   14d18:	sub	sp, sp, #268	; 0x10c
   14d1c:	ldr	r2, [pc, #68]	; 14d68 <__assert_fail@plt+0x3e34>
   14d20:	add	r1, sp, #4
   14d24:	bl	14d74 <__assert_fail@plt+0x3e40>
   14d28:	cmp	r0, #0
   14d2c:	movne	r0, #0
   14d30:	bne	14d60 <__assert_fail@plt+0x3e2c>
   14d34:	ldr	r1, [pc, #48]	; 14d6c <__assert_fail@plt+0x3e38>
   14d38:	add	r0, sp, #4
   14d3c:	bl	10ce8 <strcmp@plt>
   14d40:	cmp	r0, #0
   14d44:	moveq	r0, #0
   14d48:	beq	14d60 <__assert_fail@plt+0x3e2c>
   14d4c:	ldr	r1, [pc, #28]	; 14d70 <__assert_fail@plt+0x3e3c>
   14d50:	add	r0, sp, #4
   14d54:	bl	10ce8 <strcmp@plt>
   14d58:	adds	r0, r0, #0
   14d5c:	movne	r0, #1
   14d60:	add	sp, sp, #268	; 0x10c
   14d64:	pop	{pc}		; (ldr pc, [sp], #4)
   14d68:	andeq	r0, r0, r1, lsl #2
   14d6c:			; <UNDEFINED> instruction: 0x00015db4
   14d70:			; <UNDEFINED> instruction: 0x00015db8
   14d74:	push	{r4, r5, r6, lr}
   14d78:	mov	r6, r1
   14d7c:	mov	r4, r2
   14d80:	mov	r1, #0
   14d84:	bl	10ed4 <setlocale@plt>
   14d88:	subs	r5, r0, #0
   14d8c:	beq	14db0 <__assert_fail@plt+0x3e7c>
   14d90:	mov	r0, r5
   14d94:	bl	10e44 <strlen@plt>
   14d98:	cmp	r4, r0
   14d9c:	bhi	14dc8 <__assert_fail@plt+0x3e94>
   14da0:	cmp	r4, #0
   14da4:	bne	14de0 <__assert_fail@plt+0x3eac>
   14da8:	mov	r0, #34	; 0x22
   14dac:	pop	{r4, r5, r6, pc}
   14db0:	cmp	r4, #0
   14db4:	beq	14e04 <__assert_fail@plt+0x3ed0>
   14db8:	mov	r3, #0
   14dbc:	strb	r3, [r6]
   14dc0:	mov	r0, #22
   14dc4:	pop	{r4, r5, r6, pc}
   14dc8:	add	r2, r0, #1
   14dcc:	mov	r1, r5
   14dd0:	mov	r0, r6
   14dd4:	bl	10d30 <memcpy@plt>
   14dd8:	mov	r0, #0
   14ddc:	pop	{r4, r5, r6, pc}
   14de0:	sub	r4, r4, #1
   14de4:	mov	r2, r4
   14de8:	mov	r1, r5
   14dec:	mov	r0, r6
   14df0:	bl	10d30 <memcpy@plt>
   14df4:	mov	r3, #0
   14df8:	strb	r3, [r6, r4]
   14dfc:	mov	r0, #34	; 0x22
   14e00:	pop	{r4, r5, r6, pc}
   14e04:	mov	r0, #22
   14e08:	pop	{r4, r5, r6, pc}
   14e0c:	push	{r4, lr}
   14e10:	mov	r1, #0
   14e14:	bl	10ed4 <setlocale@plt>
   14e18:	pop	{r4, pc}
   14e1c:	subs	r2, r1, #1
   14e20:	bxeq	lr
   14e24:	bcc	14ffc <__assert_fail@plt+0x40c8>
   14e28:	cmp	r0, r1
   14e2c:	bls	14fe0 <__assert_fail@plt+0x40ac>
   14e30:	tst	r1, r2
   14e34:	beq	14fec <__assert_fail@plt+0x40b8>
   14e38:	clz	r3, r0
   14e3c:	clz	r2, r1
   14e40:	sub	r3, r2, r3
   14e44:	rsbs	r3, r3, #31
   14e48:	addne	r3, r3, r3, lsl #1
   14e4c:	mov	r2, #0
   14e50:	addne	pc, pc, r3, lsl #2
   14e54:	nop			; (mov r0, r0)
   14e58:	cmp	r0, r1, lsl #31
   14e5c:	adc	r2, r2, r2
   14e60:	subcs	r0, r0, r1, lsl #31
   14e64:	cmp	r0, r1, lsl #30
   14e68:	adc	r2, r2, r2
   14e6c:	subcs	r0, r0, r1, lsl #30
   14e70:	cmp	r0, r1, lsl #29
   14e74:	adc	r2, r2, r2
   14e78:	subcs	r0, r0, r1, lsl #29
   14e7c:	cmp	r0, r1, lsl #28
   14e80:	adc	r2, r2, r2
   14e84:	subcs	r0, r0, r1, lsl #28
   14e88:	cmp	r0, r1, lsl #27
   14e8c:	adc	r2, r2, r2
   14e90:	subcs	r0, r0, r1, lsl #27
   14e94:	cmp	r0, r1, lsl #26
   14e98:	adc	r2, r2, r2
   14e9c:	subcs	r0, r0, r1, lsl #26
   14ea0:	cmp	r0, r1, lsl #25
   14ea4:	adc	r2, r2, r2
   14ea8:	subcs	r0, r0, r1, lsl #25
   14eac:	cmp	r0, r1, lsl #24
   14eb0:	adc	r2, r2, r2
   14eb4:	subcs	r0, r0, r1, lsl #24
   14eb8:	cmp	r0, r1, lsl #23
   14ebc:	adc	r2, r2, r2
   14ec0:	subcs	r0, r0, r1, lsl #23
   14ec4:	cmp	r0, r1, lsl #22
   14ec8:	adc	r2, r2, r2
   14ecc:	subcs	r0, r0, r1, lsl #22
   14ed0:	cmp	r0, r1, lsl #21
   14ed4:	adc	r2, r2, r2
   14ed8:	subcs	r0, r0, r1, lsl #21
   14edc:	cmp	r0, r1, lsl #20
   14ee0:	adc	r2, r2, r2
   14ee4:	subcs	r0, r0, r1, lsl #20
   14ee8:	cmp	r0, r1, lsl #19
   14eec:	adc	r2, r2, r2
   14ef0:	subcs	r0, r0, r1, lsl #19
   14ef4:	cmp	r0, r1, lsl #18
   14ef8:	adc	r2, r2, r2
   14efc:	subcs	r0, r0, r1, lsl #18
   14f00:	cmp	r0, r1, lsl #17
   14f04:	adc	r2, r2, r2
   14f08:	subcs	r0, r0, r1, lsl #17
   14f0c:	cmp	r0, r1, lsl #16
   14f10:	adc	r2, r2, r2
   14f14:	subcs	r0, r0, r1, lsl #16
   14f18:	cmp	r0, r1, lsl #15
   14f1c:	adc	r2, r2, r2
   14f20:	subcs	r0, r0, r1, lsl #15
   14f24:	cmp	r0, r1, lsl #14
   14f28:	adc	r2, r2, r2
   14f2c:	subcs	r0, r0, r1, lsl #14
   14f30:	cmp	r0, r1, lsl #13
   14f34:	adc	r2, r2, r2
   14f38:	subcs	r0, r0, r1, lsl #13
   14f3c:	cmp	r0, r1, lsl #12
   14f40:	adc	r2, r2, r2
   14f44:	subcs	r0, r0, r1, lsl #12
   14f48:	cmp	r0, r1, lsl #11
   14f4c:	adc	r2, r2, r2
   14f50:	subcs	r0, r0, r1, lsl #11
   14f54:	cmp	r0, r1, lsl #10
   14f58:	adc	r2, r2, r2
   14f5c:	subcs	r0, r0, r1, lsl #10
   14f60:	cmp	r0, r1, lsl #9
   14f64:	adc	r2, r2, r2
   14f68:	subcs	r0, r0, r1, lsl #9
   14f6c:	cmp	r0, r1, lsl #8
   14f70:	adc	r2, r2, r2
   14f74:	subcs	r0, r0, r1, lsl #8
   14f78:	cmp	r0, r1, lsl #7
   14f7c:	adc	r2, r2, r2
   14f80:	subcs	r0, r0, r1, lsl #7
   14f84:	cmp	r0, r1, lsl #6
   14f88:	adc	r2, r2, r2
   14f8c:	subcs	r0, r0, r1, lsl #6
   14f90:	cmp	r0, r1, lsl #5
   14f94:	adc	r2, r2, r2
   14f98:	subcs	r0, r0, r1, lsl #5
   14f9c:	cmp	r0, r1, lsl #4
   14fa0:	adc	r2, r2, r2
   14fa4:	subcs	r0, r0, r1, lsl #4
   14fa8:	cmp	r0, r1, lsl #3
   14fac:	adc	r2, r2, r2
   14fb0:	subcs	r0, r0, r1, lsl #3
   14fb4:	cmp	r0, r1, lsl #2
   14fb8:	adc	r2, r2, r2
   14fbc:	subcs	r0, r0, r1, lsl #2
   14fc0:	cmp	r0, r1, lsl #1
   14fc4:	adc	r2, r2, r2
   14fc8:	subcs	r0, r0, r1, lsl #1
   14fcc:	cmp	r0, r1
   14fd0:	adc	r2, r2, r2
   14fd4:	subcs	r0, r0, r1
   14fd8:	mov	r0, r2
   14fdc:	bx	lr
   14fe0:	moveq	r0, #1
   14fe4:	movne	r0, #0
   14fe8:	bx	lr
   14fec:	clz	r2, r1
   14ff0:	rsb	r2, r2, #31
   14ff4:	lsr	r0, r0, r2
   14ff8:	bx	lr
   14ffc:	cmp	r0, #0
   15000:	mvnne	r0, #0
   15004:	b	152a4 <__assert_fail@plt+0x4370>
   15008:	cmp	r1, #0
   1500c:	beq	14ffc <__assert_fail@plt+0x40c8>
   15010:	push	{r0, r1, lr}
   15014:	bl	14e1c <__assert_fail@plt+0x3ee8>
   15018:	pop	{r1, r2, lr}
   1501c:	mul	r3, r2, r0
   15020:	sub	r1, r1, r3
   15024:	bx	lr
   15028:	cmp	r1, #0
   1502c:	beq	15238 <__assert_fail@plt+0x4304>
   15030:	eor	ip, r0, r1
   15034:	rsbmi	r1, r1, #0
   15038:	subs	r2, r1, #1
   1503c:	beq	15204 <__assert_fail@plt+0x42d0>
   15040:	movs	r3, r0
   15044:	rsbmi	r3, r0, #0
   15048:	cmp	r3, r1
   1504c:	bls	15210 <__assert_fail@plt+0x42dc>
   15050:	tst	r1, r2
   15054:	beq	15220 <__assert_fail@plt+0x42ec>
   15058:	clz	r2, r3
   1505c:	clz	r0, r1
   15060:	sub	r2, r0, r2
   15064:	rsbs	r2, r2, #31
   15068:	addne	r2, r2, r2, lsl #1
   1506c:	mov	r0, #0
   15070:	addne	pc, pc, r2, lsl #2
   15074:	nop			; (mov r0, r0)
   15078:	cmp	r3, r1, lsl #31
   1507c:	adc	r0, r0, r0
   15080:	subcs	r3, r3, r1, lsl #31
   15084:	cmp	r3, r1, lsl #30
   15088:	adc	r0, r0, r0
   1508c:	subcs	r3, r3, r1, lsl #30
   15090:	cmp	r3, r1, lsl #29
   15094:	adc	r0, r0, r0
   15098:	subcs	r3, r3, r1, lsl #29
   1509c:	cmp	r3, r1, lsl #28
   150a0:	adc	r0, r0, r0
   150a4:	subcs	r3, r3, r1, lsl #28
   150a8:	cmp	r3, r1, lsl #27
   150ac:	adc	r0, r0, r0
   150b0:	subcs	r3, r3, r1, lsl #27
   150b4:	cmp	r3, r1, lsl #26
   150b8:	adc	r0, r0, r0
   150bc:	subcs	r3, r3, r1, lsl #26
   150c0:	cmp	r3, r1, lsl #25
   150c4:	adc	r0, r0, r0
   150c8:	subcs	r3, r3, r1, lsl #25
   150cc:	cmp	r3, r1, lsl #24
   150d0:	adc	r0, r0, r0
   150d4:	subcs	r3, r3, r1, lsl #24
   150d8:	cmp	r3, r1, lsl #23
   150dc:	adc	r0, r0, r0
   150e0:	subcs	r3, r3, r1, lsl #23
   150e4:	cmp	r3, r1, lsl #22
   150e8:	adc	r0, r0, r0
   150ec:	subcs	r3, r3, r1, lsl #22
   150f0:	cmp	r3, r1, lsl #21
   150f4:	adc	r0, r0, r0
   150f8:	subcs	r3, r3, r1, lsl #21
   150fc:	cmp	r3, r1, lsl #20
   15100:	adc	r0, r0, r0
   15104:	subcs	r3, r3, r1, lsl #20
   15108:	cmp	r3, r1, lsl #19
   1510c:	adc	r0, r0, r0
   15110:	subcs	r3, r3, r1, lsl #19
   15114:	cmp	r3, r1, lsl #18
   15118:	adc	r0, r0, r0
   1511c:	subcs	r3, r3, r1, lsl #18
   15120:	cmp	r3, r1, lsl #17
   15124:	adc	r0, r0, r0
   15128:	subcs	r3, r3, r1, lsl #17
   1512c:	cmp	r3, r1, lsl #16
   15130:	adc	r0, r0, r0
   15134:	subcs	r3, r3, r1, lsl #16
   15138:	cmp	r3, r1, lsl #15
   1513c:	adc	r0, r0, r0
   15140:	subcs	r3, r3, r1, lsl #15
   15144:	cmp	r3, r1, lsl #14
   15148:	adc	r0, r0, r0
   1514c:	subcs	r3, r3, r1, lsl #14
   15150:	cmp	r3, r1, lsl #13
   15154:	adc	r0, r0, r0
   15158:	subcs	r3, r3, r1, lsl #13
   1515c:	cmp	r3, r1, lsl #12
   15160:	adc	r0, r0, r0
   15164:	subcs	r3, r3, r1, lsl #12
   15168:	cmp	r3, r1, lsl #11
   1516c:	adc	r0, r0, r0
   15170:	subcs	r3, r3, r1, lsl #11
   15174:	cmp	r3, r1, lsl #10
   15178:	adc	r0, r0, r0
   1517c:	subcs	r3, r3, r1, lsl #10
   15180:	cmp	r3, r1, lsl #9
   15184:	adc	r0, r0, r0
   15188:	subcs	r3, r3, r1, lsl #9
   1518c:	cmp	r3, r1, lsl #8
   15190:	adc	r0, r0, r0
   15194:	subcs	r3, r3, r1, lsl #8
   15198:	cmp	r3, r1, lsl #7
   1519c:	adc	r0, r0, r0
   151a0:	subcs	r3, r3, r1, lsl #7
   151a4:	cmp	r3, r1, lsl #6
   151a8:	adc	r0, r0, r0
   151ac:	subcs	r3, r3, r1, lsl #6
   151b0:	cmp	r3, r1, lsl #5
   151b4:	adc	r0, r0, r0
   151b8:	subcs	r3, r3, r1, lsl #5
   151bc:	cmp	r3, r1, lsl #4
   151c0:	adc	r0, r0, r0
   151c4:	subcs	r3, r3, r1, lsl #4
   151c8:	cmp	r3, r1, lsl #3
   151cc:	adc	r0, r0, r0
   151d0:	subcs	r3, r3, r1, lsl #3
   151d4:	cmp	r3, r1, lsl #2
   151d8:	adc	r0, r0, r0
   151dc:	subcs	r3, r3, r1, lsl #2
   151e0:	cmp	r3, r1, lsl #1
   151e4:	adc	r0, r0, r0
   151e8:	subcs	r3, r3, r1, lsl #1
   151ec:	cmp	r3, r1
   151f0:	adc	r0, r0, r0
   151f4:	subcs	r3, r3, r1
   151f8:	cmp	ip, #0
   151fc:	rsbmi	r0, r0, #0
   15200:	bx	lr
   15204:	teq	ip, r0
   15208:	rsbmi	r0, r0, #0
   1520c:	bx	lr
   15210:	movcc	r0, #0
   15214:	asreq	r0, ip, #31
   15218:	orreq	r0, r0, #1
   1521c:	bx	lr
   15220:	clz	r2, r1
   15224:	rsb	r2, r2, #31
   15228:	cmp	ip, #0
   1522c:	lsr	r0, r3, r2
   15230:	rsbmi	r0, r0, #0
   15234:	bx	lr
   15238:	cmp	r0, #0
   1523c:	mvngt	r0, #-2147483648	; 0x80000000
   15240:	movlt	r0, #-2147483648	; 0x80000000
   15244:	b	152a4 <__assert_fail@plt+0x4370>
   15248:	cmp	r1, #0
   1524c:	beq	15238 <__assert_fail@plt+0x4304>
   15250:	push	{r0, r1, lr}
   15254:	bl	15030 <__assert_fail@plt+0x40fc>
   15258:	pop	{r1, r2, lr}
   1525c:	mul	r3, r2, r0
   15260:	sub	r1, r1, r3
   15264:	bx	lr
   15268:	cmp	r3, #0
   1526c:	cmpeq	r2, #0
   15270:	bne	15288 <__assert_fail@plt+0x4354>
   15274:	cmp	r1, #0
   15278:	cmpeq	r0, #0
   1527c:	mvnne	r1, #0
   15280:	mvnne	r0, #0
   15284:	b	152a4 <__assert_fail@plt+0x4370>
   15288:	sub	sp, sp, #8
   1528c:	push	{sp, lr}
   15290:	bl	152b4 <__assert_fail@plt+0x4380>
   15294:	ldr	lr, [sp, #4]
   15298:	add	sp, sp, #8
   1529c:	pop	{r2, r3}
   152a0:	bx	lr
   152a4:	push	{r1, lr}
   152a8:	mov	r0, #8
   152ac:	bl	10cdc <raise@plt>
   152b0:	pop	{r1, pc}
   152b4:	cmp	r1, r3
   152b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   152bc:	cmpeq	r0, r2
   152c0:	mov	r4, r0
   152c4:	mov	r5, r1
   152c8:	ldr	r9, [sp, #28]
   152cc:	movcc	r0, #0
   152d0:	movcc	r1, #0
   152d4:	bcc	153cc <__assert_fail@plt+0x4498>
   152d8:	cmp	r3, #0
   152dc:	clzeq	ip, r2
   152e0:	clzne	ip, r3
   152e4:	addeq	ip, ip, #32
   152e8:	cmp	r5, #0
   152ec:	clzeq	r1, r4
   152f0:	addeq	r1, r1, #32
   152f4:	clzne	r1, r5
   152f8:	sub	ip, ip, r1
   152fc:	sub	lr, ip, #32
   15300:	lsl	r7, r3, ip
   15304:	rsb	r8, ip, #32
   15308:	orr	r7, r7, r2, lsl lr
   1530c:	orr	r7, r7, r2, lsr r8
   15310:	lsl	r6, r2, ip
   15314:	cmp	r5, r7
   15318:	cmpeq	r4, r6
   1531c:	movcc	r0, #0
   15320:	movcc	r1, #0
   15324:	bcc	15340 <__assert_fail@plt+0x440c>
   15328:	mov	r3, #1
   1532c:	subs	r4, r4, r6
   15330:	lsl	r1, r3, lr
   15334:	lsl	r0, r3, ip
   15338:	orr	r1, r1, r3, lsr r8
   1533c:	sbc	r5, r5, r7
   15340:	cmp	ip, #0
   15344:	beq	153cc <__assert_fail@plt+0x4498>
   15348:	lsrs	r3, r7, #1
   1534c:	rrx	r2, r6
   15350:	mov	r6, ip
   15354:	b	15378 <__assert_fail@plt+0x4444>
   15358:	subs	r4, r4, r2
   1535c:	sbc	r5, r5, r3
   15360:	adds	r4, r4, r4
   15364:	adc	r5, r5, r5
   15368:	adds	r4, r4, #1
   1536c:	adc	r5, r5, #0
   15370:	subs	r6, r6, #1
   15374:	beq	15394 <__assert_fail@plt+0x4460>
   15378:	cmp	r5, r3
   1537c:	cmpeq	r4, r2
   15380:	bcs	15358 <__assert_fail@plt+0x4424>
   15384:	adds	r4, r4, r4
   15388:	adc	r5, r5, r5
   1538c:	subs	r6, r6, #1
   15390:	bne	15378 <__assert_fail@plt+0x4444>
   15394:	lsr	r6, r4, ip
   15398:	lsr	r7, r5, ip
   1539c:	orr	r6, r6, r5, lsl r8
   153a0:	adds	r2, r0, r4
   153a4:	orr	r6, r6, r5, lsr lr
   153a8:	adc	r3, r1, r5
   153ac:	lsl	r1, r7, ip
   153b0:	orr	r1, r1, r6, lsl lr
   153b4:	lsl	r0, r6, ip
   153b8:	orr	r1, r1, r6, lsr r8
   153bc:	subs	r0, r2, r0
   153c0:	mov	r4, r6
   153c4:	mov	r5, r7
   153c8:	sbc	r1, r3, r1
   153cc:	cmp	r9, #0
   153d0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   153d4:	strd	r4, [r9]
   153d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153e0:	mov	r7, r0
   153e4:	ldr	r6, [pc, #72]	; 15434 <__assert_fail@plt+0x4500>
   153e8:	ldr	r5, [pc, #72]	; 15438 <__assert_fail@plt+0x4504>
   153ec:	add	r6, pc, r6
   153f0:	add	r5, pc, r5
   153f4:	sub	r6, r6, r5
   153f8:	mov	r8, r1
   153fc:	mov	r9, r2
   15400:	bl	10ca4 <calloc@plt-0x20>
   15404:	asrs	r6, r6, #2
   15408:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1540c:	mov	r4, #0
   15410:	add	r4, r4, #1
   15414:	ldr	r3, [r5], #4
   15418:	mov	r2, r9
   1541c:	mov	r1, r8
   15420:	mov	r0, r7
   15424:	blx	r3
   15428:	cmp	r6, r4
   1542c:	bne	15410 <__assert_fail@plt+0x44dc>
   15430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15434:	andeq	r0, r1, ip, lsl fp
   15438:	andeq	r0, r1, r4, lsl fp
   1543c:	bx	lr
   15440:	ldr	r3, [pc, #12]	; 15454 <__assert_fail@plt+0x4520>
   15444:	mov	r1, #0
   15448:	add	r3, pc, r3
   1544c:	ldr	r2, [r3]
   15450:	b	10e68 <__cxa_atexit@plt>
   15454:	muleq	r1, r8, ip

Disassembly of section .fini:

00015458 <.fini>:
   15458:	push	{r3, lr}
   1545c:	pop	{r3, pc}
