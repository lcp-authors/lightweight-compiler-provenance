
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00011040 <.init>:
   11040:	push	{r3, lr}
   11044:	bl	1136c <__assert_fail@plt+0x48>
   11048:	pop	{r3, pc}

Disassembly of section .plt:

0001104c <calloc@plt-0x14>:
   1104c:	push	{lr}		; (str lr, [sp, #-4]!)
   11050:	ldr	lr, [pc, #4]	; 1105c <calloc@plt-0x4>
   11054:	add	lr, pc, lr
   11058:	ldr	pc, [lr, #8]!
   1105c:	andeq	fp, r1, r4, lsr #31

00011060 <calloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #4004]!	; 0xfa4

0001106c <fputs_unlocked@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #3996]!	; 0xf9c

00011078 <raise@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #3988]!	; 0xf94

00011084 <__strncat_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011090 <strcmp@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #3972]!	; 0xf84

0001109c <strtol@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a8 <fflush@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #3956]!	; 0xf74

000110b4 <wcwidth@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c0 <memmove@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #3940]!	; 0xf64

000110cc <free@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d8 <_exit@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3924]!	; 0xf54

000110e4 <memcpy@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f0 <__strtoull_internal@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3908]!	; 0xf44

000110fc <mbsinit@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3900]!	; 0xf3c

00011108 <memcmp@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3892]!	; 0xf34

00011114 <dcgettext@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011120 <realloc@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3876]!	; 0xf24

0001112c <textdomain@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3868]!	; 0xf1c

00011138 <iswprint@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3860]!	; 0xf14

00011144 <fwrite@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011150 <lseek64@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3844]!	; 0xf04

0001115c <__ctype_get_mb_cur_max@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3836]!	; 0xefc

00011168 <strcpy@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3828]!	; 0xef4

00011174 <__fpending@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3820]!	; 0xeec

00011180 <mbrtowc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3812]!	; 0xee4

0001118c <wcstombs@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3804]!	; 0xedc

00011198 <error@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3796]!	; 0xed4

000111a4 <malloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3788]!	; 0xecc

000111b0 <__libc_start_main@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3780]!	; 0xec4

000111bc <__freading@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3772]!	; 0xebc

000111c8 <__gmon_start__@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111d4 <getopt_long@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3756]!	; 0xeac

000111e0 <__ctype_b_loc@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ec <exit@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f8 <strlen@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3732]!	; 0xe94

00011204 <strchr@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011210 <__errno_location@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3716]!	; 0xe84

0001121c <__cxa_atexit@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3708]!	; 0xe7c

00011228 <memset@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3700]!	; 0xe74

00011234 <__printf_chk@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011240 <fileno@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3684]!	; 0xe64

0001124c <__fprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3676]!	; 0xe5c

00011258 <memchr@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3668]!	; 0xe54

00011264 <fclose@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011270 <fseeko64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3652]!	; 0xe44

0001127c <__overflow@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3644]!	; 0xe3c

00011288 <setlocale@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3636]!	; 0xe34

00011294 <wcswidth@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a0 <strrchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3620]!	; 0xe24

000112ac <nl_langinfo@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b8 <mbstowcs@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3604]!	; 0xe14

000112c4 <qsort@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d0 <bindtextdomain@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3588]!	; 0xe04

000112dc <getdelim@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e8 <strncmp@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112f4 <abort@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3564]!	; 0xdec

00011300 <__snprintf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3556]!	; 0xde4

0001130c <strspn@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3548]!	; 0xddc

00011318 <__mempcpy_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3540]!	; 0xdd4

00011324 <__assert_fail@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3532]!	; 0xdcc

Disassembly of section .text:

00011330 <.text>:
   11330:	mov	fp, #0
   11334:	mov	lr, #0
   11338:	pop	{r1}		; (ldr r1, [sp], #4)
   1133c:	mov	r2, sp
   11340:	push	{r2}		; (str r2, [sp, #-4]!)
   11344:	push	{r0}		; (str r0, [sp, #-4]!)
   11348:	ldr	ip, [pc, #16]	; 11360 <__assert_fail@plt+0x3c>
   1134c:	push	{ip}		; (str ip, [sp, #-4]!)
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x40>
   11354:	ldr	r3, [pc, #12]	; 11368 <__assert_fail@plt+0x44>
   11358:	bl	111b0 <__libc_start_main@plt>
   1135c:	bl	112f4 <abort@plt>
   11360:	andeq	sl, r1, r8, lsr r1
   11364:	andeq	r1, r1, ip, ror #18
   11368:	ldrdeq	sl, [r1], -r8
   1136c:	ldr	r3, [pc, #20]	; 11388 <__assert_fail@plt+0x64>
   11370:	ldr	r2, [pc, #20]	; 1138c <__assert_fail@plt+0x68>
   11374:	add	r3, pc, r3
   11378:	ldr	r2, [r3, r2]
   1137c:	cmp	r2, #0
   11380:	bxeq	lr
   11384:	b	111c8 <__gmon_start__@plt>
   11388:	andeq	fp, r1, r4, lsl #25
   1138c:	strdeq	r0, [r0], -ip
   11390:	ldr	r0, [pc, #24]	; 113b0 <__assert_fail@plt+0x8c>
   11394:	ldr	r3, [pc, #24]	; 113b4 <__assert_fail@plt+0x90>
   11398:	cmp	r3, r0
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x94>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	andeq	sp, r2, r8, ror r1
   113b4:	andeq	sp, r2, r8, ror r1
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r0, [pc, #36]	; 113e8 <__assert_fail@plt+0xc4>
   113c0:	ldr	r1, [pc, #36]	; 113ec <__assert_fail@plt+0xc8>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <__assert_fail@plt+0xcc>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	andeq	sp, r2, r8, ror r1
   113ec:	andeq	sp, r2, r8, ror r1
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <__assert_fail@plt+0xf4>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	11390 <__assert_fail@plt+0x6c>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	muleq	r2, ip, r1
   1141c:	b	113bc <__assert_fail@plt+0x98>
   11420:	push	{fp, lr}
   11424:	mov	fp, sp
   11428:	sub	sp, sp, #88	; 0x58
   1142c:	mov	r4, r0
   11430:	cmp	r0, #0
   11434:	bne	11928 <__assert_fail@plt+0x604>
   11438:	movw	r1, #41355	; 0xa18b
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #1
   11448:	bl	11114 <dcgettext@plt>
   1144c:	movw	r5, #53760	; 0xd200
   11450:	mov	r1, r0
   11454:	mov	r0, #1
   11458:	movt	r5, #2
   1145c:	ldr	r2, [r5]
   11460:	bl	11234 <__printf_chk@plt>
   11464:	movw	r1, #41390	; 0xa1ae
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	11114 <dcgettext@plt>
   11478:	movw	r7, #53652	; 0xd194
   1147c:	movt	r7, #2
   11480:	ldr	r1, [r7]
   11484:	bl	1106c <fputs_unlocked@plt>
   11488:	movw	r1, #45992	; 0xb3a8
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	11114 <dcgettext@plt>
   1149c:	ldr	r1, [r7]
   114a0:	bl	1106c <fputs_unlocked@plt>
   114a4:	movw	r1, #41469	; 0xa1fd
   114a8:	mov	r0, #0
   114ac:	mov	r2, #5
   114b0:	movt	r1, #1
   114b4:	bl	11114 <dcgettext@plt>
   114b8:	ldr	r1, [r7]
   114bc:	bl	1106c <fputs_unlocked@plt>
   114c0:	movw	r1, #41528	; 0xa238
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	11114 <dcgettext@plt>
   114d4:	ldr	r1, [r7]
   114d8:	bl	1106c <fputs_unlocked@plt>
   114dc:	movw	r1, #41600	; 0xa280
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	11114 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	1106c <fputs_unlocked@plt>
   114f8:	movw	r1, #41721	; 0xa2f9
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11114 <dcgettext@plt>
   1150c:	ldr	r1, [r7]
   11510:	bl	1106c <fputs_unlocked@plt>
   11514:	movw	r1, #41839	; 0xa36f
   11518:	mov	r0, #0
   1151c:	mov	r2, #5
   11520:	movt	r1, #1
   11524:	bl	11114 <dcgettext@plt>
   11528:	ldr	r1, [r7]
   1152c:	bl	1106c <fputs_unlocked@plt>
   11530:	movw	r1, #41957	; 0xa3e5
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	movt	r1, #1
   11540:	bl	11114 <dcgettext@plt>
   11544:	ldr	r1, [r7]
   11548:	bl	1106c <fputs_unlocked@plt>
   1154c:	movw	r1, #42036	; 0xa434
   11550:	mov	r0, #0
   11554:	mov	r2, #5
   11558:	movt	r1, #1
   1155c:	bl	11114 <dcgettext@plt>
   11560:	ldr	r1, [r7]
   11564:	bl	1106c <fputs_unlocked@plt>
   11568:	movw	r1, #42192	; 0xa4d0
   1156c:	mov	r0, #0
   11570:	mov	r2, #5
   11574:	movt	r1, #1
   11578:	bl	11114 <dcgettext@plt>
   1157c:	ldr	r1, [r7]
   11580:	bl	1106c <fputs_unlocked@plt>
   11584:	movw	r1, #42327	; 0xa557
   11588:	mov	r0, #0
   1158c:	mov	r2, #5
   11590:	movt	r1, #1
   11594:	bl	11114 <dcgettext@plt>
   11598:	ldr	r1, [r7]
   1159c:	bl	1106c <fputs_unlocked@plt>
   115a0:	movw	r1, #42459	; 0xa5db
   115a4:	mov	r0, #0
   115a8:	mov	r2, #5
   115ac:	movt	r1, #1
   115b0:	bl	11114 <dcgettext@plt>
   115b4:	ldr	r1, [r7]
   115b8:	bl	1106c <fputs_unlocked@plt>
   115bc:	movw	r1, #42783	; 0xa71f
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	movt	r1, #1
   115cc:	bl	11114 <dcgettext@plt>
   115d0:	ldr	r1, [r7]
   115d4:	bl	1106c <fputs_unlocked@plt>
   115d8:	movw	r1, #42938	; 0xa7ba
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	11114 <dcgettext@plt>
   115ec:	ldr	r1, [r7]
   115f0:	bl	1106c <fputs_unlocked@plt>
   115f4:	movw	r1, #43061	; 0xa835
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #1
   11604:	bl	11114 <dcgettext@plt>
   11608:	ldr	r1, [r7]
   1160c:	bl	1106c <fputs_unlocked@plt>
   11610:	movw	r1, #43136	; 0xa880
   11614:	mov	r0, #0
   11618:	mov	r2, #5
   1161c:	movt	r1, #1
   11620:	bl	11114 <dcgettext@plt>
   11624:	ldr	r1, [r7]
   11628:	bl	1106c <fputs_unlocked@plt>
   1162c:	movw	r1, #43208	; 0xa8c8
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11114 <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	1106c <fputs_unlocked@plt>
   11648:	movw	r1, #43271	; 0xa907
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11114 <dcgettext@plt>
   1165c:	ldr	r1, [r7]
   11660:	bl	1106c <fputs_unlocked@plt>
   11664:	movw	r1, #43316	; 0xa934
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11114 <dcgettext@plt>
   11678:	ldr	r1, [r7]
   1167c:	bl	1106c <fputs_unlocked@plt>
   11680:	movw	r1, #43370	; 0xa96a
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	11114 <dcgettext@plt>
   11694:	ldr	r1, [r7]
   11698:	bl	1106c <fputs_unlocked@plt>
   1169c:	movw	r1, #43386	; 0xa97a
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	11114 <dcgettext@plt>
   116b0:	ldr	r1, [r7]
   116b4:	bl	1106c <fputs_unlocked@plt>
   116b8:	movw	r1, #43456	; 0xa9c0
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	11114 <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	1106c <fputs_unlocked@plt>
   116d4:	movw	r1, #43624	; 0xaa68
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	11114 <dcgettext@plt>
   116e8:	ldr	r1, [r7]
   116ec:	bl	1106c <fputs_unlocked@plt>
   116f0:	movw	r1, #43750	; 0xaae6
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	11114 <dcgettext@plt>
   11704:	ldr	r1, [r7]
   11708:	bl	1106c <fputs_unlocked@plt>
   1170c:	movw	r1, #43876	; 0xab64
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #1
   1171c:	bl	11114 <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	1106c <fputs_unlocked@plt>
   11728:	movw	r1, #44001	; 0xabe1
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #1
   11738:	bl	11114 <dcgettext@plt>
   1173c:	ldr	r1, [r7]
   11740:	bl	1106c <fputs_unlocked@plt>
   11744:	movw	r1, #44276	; 0xacf4
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	11114 <dcgettext@plt>
   11758:	ldr	r1, [r7]
   1175c:	bl	1106c <fputs_unlocked@plt>
   11760:	movw	r1, #44648	; 0xae68
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	movt	r1, #1
   11770:	bl	11114 <dcgettext@plt>
   11774:	ldr	r2, [r5]
   11778:	mov	r1, r0
   1177c:	mov	r0, #1
   11780:	bl	11234 <__printf_chk@plt>
   11784:	movw	r1, #45059	; 0xb003
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	movt	r1, #1
   11794:	bl	11114 <dcgettext@plt>
   11798:	ldr	r2, [r5]
   1179c:	mov	r1, r0
   117a0:	mov	r0, #1
   117a4:	mov	r3, r2
   117a8:	str	r2, [sp]
   117ac:	str	r2, [sp, #4]
   117b0:	str	r2, [sp, #8]
   117b4:	str	r2, [sp, #12]
   117b8:	str	r2, [sp, #16]
   117bc:	str	r2, [sp, #20]
   117c0:	str	r2, [sp, #24]
   117c4:	bl	11234 <__printf_chk@plt>
   117c8:	movw	r0, #48592	; 0xbdd0
   117cc:	mov	r2, #48	; 0x30
   117d0:	add	r6, sp, #32
   117d4:	movw	r5, #45506	; 0xb1c2
   117d8:	movt	r0, #1
   117dc:	movt	r5, #1
   117e0:	add	r1, r0, #32
   117e4:	add	r3, r0, #16
   117e8:	vld1.64	{d18-d19}, [r0], r2
   117ec:	vld1.64	{d16-d17}, [r1]
   117f0:	vld1.64	{d20-d21}, [r3]
   117f4:	add	r1, r6, #32
   117f8:	vldr	d22, [r0]
   117fc:	add	r0, r6, #16
   11800:	vst1.64	{d16-d17}, [r1]
   11804:	movw	r1, #46067	; 0xb3f3
   11808:	vst1.64	{d20-d21}, [r0]
   1180c:	mov	r0, r6
   11810:	vst1.64	{d18-d19}, [r0], r2
   11814:	movt	r1, #1
   11818:	vstr	d22, [r0]
   1181c:	mov	r0, r5
   11820:	bl	11090 <strcmp@plt>
   11824:	cmp	r0, #0
   11828:	ldrne	r1, [r6, #8]!
   1182c:	cmpne	r1, #0
   11830:	bne	1181c <__assert_fail@plt+0x4f8>
   11834:	ldr	r6, [r6, #4]
   11838:	movw	r1, #46162	; 0xb452
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	11114 <dcgettext@plt>
   1184c:	movw	r2, #45688	; 0xb278
   11850:	movw	r3, #46185	; 0xb469
   11854:	mov	r1, r0
   11858:	mov	r0, #1
   1185c:	movt	r2, #1
   11860:	movt	r3, #1
   11864:	bl	11234 <__printf_chk@plt>
   11868:	cmp	r6, #0
   1186c:	mov	r0, #5
   11870:	mov	r1, #0
   11874:	moveq	r6, r5
   11878:	bl	11288 <setlocale@plt>
   1187c:	cmp	r0, #0
   11880:	beq	118b8 <__assert_fail@plt+0x594>
   11884:	movw	r1, #46225	; 0xb491
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	112e8 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118b8 <__assert_fail@plt+0x594>
   1189c:	movw	r1, #46229	; 0xb495
   118a0:	mov	r0, #0
   118a4:	mov	r2, #5
   118a8:	movt	r1, #1
   118ac:	bl	11114 <dcgettext@plt>
   118b0:	ldr	r1, [r7]
   118b4:	bl	1106c <fputs_unlocked@plt>
   118b8:	movw	r1, #46300	; 0xb4dc
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	11114 <dcgettext@plt>
   118cc:	movw	r2, #46185	; 0xb469
   118d0:	mov	r1, r0
   118d4:	mov	r0, #1
   118d8:	mov	r3, r5
   118dc:	movt	r2, #1
   118e0:	bl	11234 <__printf_chk@plt>
   118e4:	movw	r1, #46327	; 0xb4f7
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11114 <dcgettext@plt>
   118f8:	movw	r3, #46377	; 0xb529
   118fc:	mov	r1, r0
   11900:	movw	r0, #46095	; 0xb40f
   11904:	cmp	r6, r5
   11908:	mov	r2, r6
   1190c:	movt	r0, #1
   11910:	movt	r3, #1
   11914:	moveq	r3, r0
   11918:	mov	r0, #1
   1191c:	bl	11234 <__printf_chk@plt>
   11920:	mov	r0, r4
   11924:	bl	111ec <exit@plt>
   11928:	movw	r0, #53640	; 0xd188
   1192c:	movw	r1, #41316	; 0xa164
   11930:	mov	r2, #5
   11934:	movt	r0, #2
   11938:	movt	r1, #1
   1193c:	ldr	r5, [r0]
   11940:	mov	r0, #0
   11944:	bl	11114 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	movw	r0, #53760	; 0xd200
   11950:	mov	r1, #1
   11954:	movt	r0, #2
   11958:	ldr	r3, [r0]
   1195c:	mov	r0, r5
   11960:	bl	1124c <__fprintf_chk@plt>
   11964:	mov	r0, r4
   11968:	bl	111ec <exit@plt>
   1196c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11970:	add	fp, sp, #28
   11974:	sub	sp, sp, #44	; 0x2c
   11978:	str	r0, [sp, #28]
   1197c:	ldr	r0, [r1]
   11980:	mov	sl, r1
   11984:	bl	15218 <__assert_fail@plt+0x3ef4>
   11988:	movw	r1, #46377	; 0xb529
   1198c:	mov	r0, #6
   11990:	movt	r1, #1
   11994:	bl	11288 <setlocale@plt>
   11998:	movw	r4, #45692	; 0xb27c
   1199c:	movw	r1, #45513	; 0xb1c9
   119a0:	str	r0, [sp, #24]
   119a4:	movt	r4, #1
   119a8:	movt	r1, #1
   119ac:	mov	r0, r4
   119b0:	bl	112d0 <bindtextdomain@plt>
   119b4:	mov	r0, r4
   119b8:	bl	1112c <textdomain@plt>
   119bc:	mov	r0, #65536	; 0x10000
   119c0:	bl	112ac <nl_langinfo@plt>
   119c4:	movw	r8, #53664	; 0xd1a0
   119c8:	cmp	r0, #0
   119cc:	movt	r8, #2
   119d0:	str	r0, [r8, #12]
   119d4:	ldrbne	r1, [r0]
   119d8:	cmpne	r1, #0
   119dc:	bne	119ec <__assert_fail@plt+0x6c8>
   119e0:	movw	r0, #45537	; 0xb1e1
   119e4:	movt	r0, #1
   119e8:	str	r0, [r8, #12]
   119ec:	bl	111f8 <strlen@plt>
   119f0:	str	r0, [r8, #16]
   119f4:	movw	r0, #19592	; 0x4c88
   119f8:	movt	r0, #1
   119fc:	bl	1a13c <__assert_fail@plt+0x8e18>
   11a00:	movw	r7, #45539	; 0xb1e3
   11a04:	movw	r6, #48128	; 0xbc00
   11a08:	movw	r9, #48476	; 0xbd5c
   11a0c:	mov	r5, #0
   11a10:	movt	r7, #1
   11a14:	movt	r6, #1
   11a18:	movt	r9, #1
   11a1c:	b	11a28 <__assert_fail@plt+0x704>
   11a20:	movw	r0, #257	; 0x101
   11a24:	strh	r0, [r8, #6]
   11a28:	ldr	r0, [sp, #28]
   11a2c:	mov	r1, sl
   11a30:	mov	r2, r7
   11a34:	mov	r3, r6
   11a38:	str	r5, [sp]
   11a3c:	bl	111d4 <getopt_long@plt>
   11a40:	cmp	r0, #99	; 0x63
   11a44:	ble	11fb4 <__assert_fail@plt+0xc90>
   11a48:	sub	r1, r0, #122	; 0x7a
   11a4c:	cmp	r1, #147	; 0x93
   11a50:	bhi	11d38 <__assert_fail@plt+0xa14>
   11a54:	add	r0, pc, #0
   11a58:	ldr	pc, [r0, r1, lsl #2]
   11a5c:	andeq	r1, r1, ip, lsr #25
   11a60:	andeq	r2, r1, ip, lsr #15
   11a64:	andeq	r2, r1, ip, lsr #15
   11a68:	andeq	r2, r1, ip, lsr #15
   11a6c:	andeq	r2, r1, ip, lsr #15
   11a70:	andeq	r2, r1, ip, lsr #15
   11a74:	andeq	r2, r1, ip, lsr #15
   11a78:	andeq	r2, r1, ip, lsr #15
   11a7c:	andeq	r2, r1, ip, lsr #15
   11a80:	andeq	r2, r1, ip, lsr #15
   11a84:	andeq	r2, r1, ip, lsr #15
   11a88:	andeq	r2, r1, ip, lsr #15
   11a8c:	andeq	r2, r1, ip, lsr #15
   11a90:	andeq	r2, r1, ip, lsr #15
   11a94:	andeq	r2, r1, ip, lsr #15
   11a98:	andeq	r2, r1, ip, lsr #15
   11a9c:	andeq	r2, r1, ip, lsr #15
   11aa0:	andeq	r2, r1, ip, lsr #15
   11aa4:	andeq	r2, r1, ip, lsr #15
   11aa8:	andeq	r2, r1, ip, lsr #15
   11aac:	andeq	r2, r1, ip, lsr #15
   11ab0:	andeq	r2, r1, ip, lsr #15
   11ab4:	andeq	r2, r1, ip, lsr #15
   11ab8:	andeq	r2, r1, ip, lsr #15
   11abc:	andeq	r2, r1, ip, lsr #15
   11ac0:	andeq	r2, r1, ip, lsr #15
   11ac4:	andeq	r2, r1, ip, lsr #15
   11ac8:	andeq	r2, r1, ip, lsr #15
   11acc:	andeq	r2, r1, ip, lsr #15
   11ad0:	andeq	r2, r1, ip, lsr #15
   11ad4:	andeq	r2, r1, ip, lsr #15
   11ad8:	andeq	r2, r1, ip, lsr #15
   11adc:	andeq	r2, r1, ip, lsr #15
   11ae0:	andeq	r2, r1, ip, lsr #15
   11ae4:	andeq	r2, r1, ip, lsr #15
   11ae8:	andeq	r2, r1, ip, lsr #15
   11aec:	andeq	r2, r1, ip, lsr #15
   11af0:	andeq	r2, r1, ip, lsr #15
   11af4:	andeq	r2, r1, ip, lsr #15
   11af8:	andeq	r2, r1, ip, lsr #15
   11afc:	andeq	r2, r1, ip, lsr #15
   11b00:	andeq	r2, r1, ip, lsr #15
   11b04:	andeq	r2, r1, ip, lsr #15
   11b08:	andeq	r2, r1, ip, lsr #15
   11b0c:	andeq	r2, r1, ip, lsr #15
   11b10:	andeq	r2, r1, ip, lsr #15
   11b14:	andeq	r2, r1, ip, lsr #15
   11b18:	andeq	r2, r1, ip, lsr #15
   11b1c:	andeq	r2, r1, ip, lsr #15
   11b20:	andeq	r2, r1, ip, lsr #15
   11b24:	andeq	r2, r1, ip, lsr #15
   11b28:	andeq	r2, r1, ip, lsr #15
   11b2c:	andeq	r2, r1, ip, lsr #15
   11b30:	andeq	r2, r1, ip, lsr #15
   11b34:	andeq	r2, r1, ip, lsr #15
   11b38:	andeq	r2, r1, ip, lsr #15
   11b3c:	andeq	r2, r1, ip, lsr #15
   11b40:	andeq	r2, r1, ip, lsr #15
   11b44:	andeq	r2, r1, ip, lsr #15
   11b48:	andeq	r2, r1, ip, lsr #15
   11b4c:	andeq	r2, r1, ip, lsr #15
   11b50:	andeq	r2, r1, ip, lsr #15
   11b54:	andeq	r2, r1, ip, lsr #15
   11b58:	andeq	r2, r1, ip, lsr #15
   11b5c:	andeq	r2, r1, ip, lsr #15
   11b60:	andeq	r2, r1, ip, lsr #15
   11b64:	andeq	r2, r1, ip, lsr #15
   11b68:	andeq	r2, r1, ip, lsr #15
   11b6c:	andeq	r2, r1, ip, lsr #15
   11b70:	andeq	r2, r1, ip, lsr #15
   11b74:	andeq	r2, r1, ip, lsr #15
   11b78:	andeq	r2, r1, ip, lsr #15
   11b7c:	andeq	r2, r1, ip, lsr #15
   11b80:	andeq	r2, r1, ip, lsr #15
   11b84:	andeq	r2, r1, ip, lsr #15
   11b88:	andeq	r2, r1, ip, lsr #15
   11b8c:	andeq	r2, r1, ip, lsr #15
   11b90:	andeq	r2, r1, ip, lsr #15
   11b94:	andeq	r2, r1, ip, lsr #15
   11b98:	andeq	r2, r1, ip, lsr #15
   11b9c:	andeq	r2, r1, ip, lsr #15
   11ba0:	andeq	r2, r1, ip, lsr #15
   11ba4:	andeq	r2, r1, ip, lsr #15
   11ba8:	andeq	r2, r1, ip, lsr #15
   11bac:	andeq	r2, r1, ip, lsr #15
   11bb0:	andeq	r2, r1, ip, lsr #15
   11bb4:	andeq	r2, r1, ip, lsr #15
   11bb8:	andeq	r2, r1, ip, lsr #15
   11bbc:	andeq	r2, r1, ip, lsr #15
   11bc0:	andeq	r2, r1, ip, lsr #15
   11bc4:	andeq	r2, r1, ip, lsr #15
   11bc8:	andeq	r2, r1, ip, lsr #15
   11bcc:	andeq	r2, r1, ip, lsr #15
   11bd0:	andeq	r2, r1, ip, lsr #15
   11bd4:	andeq	r2, r1, ip, lsr #15
   11bd8:	andeq	r2, r1, ip, lsr #15
   11bdc:	andeq	r2, r1, ip, lsr #15
   11be0:	andeq	r2, r1, ip, lsr #15
   11be4:	andeq	r2, r1, ip, lsr #15
   11be8:	andeq	r2, r1, ip, lsr #15
   11bec:	andeq	r2, r1, ip, lsr #15
   11bf0:	andeq	r2, r1, ip, lsr #15
   11bf4:	andeq	r2, r1, ip, lsr #15
   11bf8:	andeq	r2, r1, ip, lsr #15
   11bfc:	andeq	r2, r1, ip, lsr #15
   11c00:	andeq	r2, r1, ip, lsr #15
   11c04:	andeq	r2, r1, ip, lsr #15
   11c08:	andeq	r2, r1, ip, lsr #15
   11c0c:	andeq	r2, r1, ip, lsr #15
   11c10:	andeq	r2, r1, ip, lsr #15
   11c14:	andeq	r2, r1, ip, lsr #15
   11c18:	andeq	r2, r1, ip, lsr #15
   11c1c:	andeq	r2, r1, ip, lsr #15
   11c20:	andeq	r2, r1, ip, lsr #15
   11c24:	andeq	r2, r1, ip, lsr #15
   11c28:	andeq	r2, r1, ip, lsr #15
   11c2c:	andeq	r2, r1, ip, lsr #15
   11c30:	andeq	r2, r1, ip, lsr #15
   11c34:	andeq	r2, r1, ip, lsr #15
   11c38:	andeq	r2, r1, ip, lsr #15
   11c3c:	andeq	r2, r1, ip, lsr #15
   11c40:	andeq	r2, r1, ip, lsr #15
   11c44:	andeq	r2, r1, ip, lsr #15
   11c48:	andeq	r2, r1, ip, lsr #15
   11c4c:	andeq	r2, r1, ip, lsr #15
   11c50:	andeq	r2, r1, ip, lsr #15
   11c54:	andeq	r2, r1, ip, lsr #15
   11c58:	andeq	r2, r1, ip, lsr #15
   11c5c:	andeq	r2, r1, ip, lsr #15
   11c60:	andeq	r2, r1, ip, lsr #15
   11c64:	andeq	r2, r1, ip, lsr #15
   11c68:	andeq	r2, r1, ip, lsr #15
   11c6c:	andeq	r2, r1, ip, lsr #15
   11c70:	andeq	r2, r1, ip, lsr #15
   11c74:	strdeq	r1, [r1], -r0
   11c78:	strdeq	r1, [r1], -r8
   11c7c:	andeq	r1, r1, r0, lsr #29
   11c80:	andeq	r1, r1, r4, lsr #28
   11c84:	andeq	r1, r1, r0, ror sp
   11c88:	andeq	r1, r1, r4, ror #27
   11c8c:	andeq	r1, r1, ip, lsr #26
   11c90:	andeq	r1, r1, r4, asr #28
   11c94:	andeq	r1, r1, r0, lsl #26
   11c98:	andeq	r1, r1, r8, lsl lr
   11c9c:	andeq	r1, r1, r0, lsr #20
   11ca0:			; <UNDEFINED> instruction: 0x00011cb8
   11ca4:	ldrdeq	r1, [r1], -r0
   11ca8:	andeq	r1, r1, ip, asr #30
   11cac:	mov	r0, #1
   11cb0:	strb	r0, [r8, #5]
   11cb4:	b	11a28 <__assert_fail@plt+0x704>
   11cb8:	movw	r0, #53656	; 0xd198
   11cbc:	movt	r0, #2
   11cc0:	ldr	r0, [r0]
   11cc4:	cmp	r0, #0
   11cc8:	beq	11fa4 <__assert_fail@plt+0xc80>
   11ccc:	movw	r1, #46377	; 0xb529
   11cd0:	add	r3, r8, #72	; 0x48
   11cd4:	mov	r2, #10
   11cd8:	movt	r1, #1
   11cdc:	str	r1, [sp]
   11ce0:	mov	r1, #0
   11ce4:	bl	189a4 <__assert_fail@plt+0x7680>
   11ce8:	cmp	r0, #0
   11cec:	bne	127c0 <__assert_fail@plt+0x149c>
   11cf0:	ldrd	r0, [r8, #72]	; 0x48
   11cf4:	orrs	r0, r0, r1
   11cf8:	bne	11a28 <__assert_fail@plt+0x704>
   11cfc:	b	127c0 <__assert_fail@plt+0x149c>
   11d00:	movw	r0, #54076	; 0xd33c
   11d04:	movt	r0, #2
   11d08:	ldr	r0, [r0]
   11d0c:	cmp	r0, #0
   11d10:	bne	127cc <__assert_fail@plt+0x14a8>
   11d14:	movw	r0, #53656	; 0xd198
   11d18:	mov	r1, #1
   11d1c:	movt	r0, #2
   11d20:	ldr	r0, [r0]
   11d24:	bl	13f40 <__assert_fail@plt+0x2c1c>
   11d28:	b	11a28 <__assert_fail@plt+0x704>
   11d2c:	mov	r0, #1
   11d30:	strb	r0, [r8]
   11d34:	b	11a28 <__assert_fail@plt+0x704>
   11d38:	cmp	r0, #100	; 0x64
   11d3c:	bne	127ac <__assert_fail@plt+0x1488>
   11d40:	movw	r0, #53656	; 0xd198
   11d44:	movt	r0, #2
   11d48:	ldr	r1, [r0]
   11d4c:	ldrb	r0, [r1]
   11d50:	cmp	r0, #0
   11d54:	ldrbne	r1, [r1, #1]
   11d58:	cmpne	r1, #0
   11d5c:	bne	127d8 <__assert_fail@plt+0x14b4>
   11d60:	movw	r1, #53512	; 0xd108
   11d64:	movt	r1, #2
   11d68:	str	r0, [r1, #4]
   11d6c:	b	11a28 <__assert_fail@plt+0x704>
   11d70:	movw	r0, #53656	; 0xd198
   11d74:	movw	r4, #48512	; 0xbd80
   11d78:	mov	r2, #4
   11d7c:	movt	r0, #2
   11d80:	str	r2, [sp]
   11d84:	movw	r2, #48532	; 0xbd94
   11d88:	movt	r4, #1
   11d8c:	ldr	r1, [r0]
   11d90:	movw	r0, #53548	; 0xd12c
   11d94:	movt	r2, #1
   11d98:	mov	r3, r4
   11d9c:	movt	r0, #2
   11da0:	ldr	r0, [r0]
   11da4:	str	r0, [sp, #4]
   11da8:	mov	r0, #1
   11dac:	str	r0, [sp, #8]
   11db0:	movw	r0, #45550	; 0xb1ee
   11db4:	movt	r0, #1
   11db8:	bl	14ab4 <__assert_fail@plt+0x3790>
   11dbc:	ldr	r0, [r4, r0, lsl #2]
   11dc0:	movw	r1, #53512	; 0xd108
   11dc4:	movt	r1, #2
   11dc8:	str	r0, [r1]
   11dcc:	b	11a28 <__assert_fail@plt+0x704>
   11dd0:	movw	r0, #53656	; 0xd198
   11dd4:	movt	r0, #2
   11dd8:	ldr	r0, [r0]
   11ddc:	str	r0, [r8, #36]	; 0x24
   11de0:	b	11a28 <__assert_fail@plt+0x704>
   11de4:	movw	r0, #53656	; 0xd198
   11de8:	movt	r0, #2
   11dec:	ldr	r0, [r0]
   11df0:	str	r0, [r8, #32]
   11df4:	b	11a28 <__assert_fail@plt+0x704>
   11df8:	movw	r0, #53656	; 0xd198
   11dfc:	movt	r0, #2
   11e00:	ldr	r0, [r0]
   11e04:	bl	12868 <__assert_fail@plt+0x1544>
   11e08:	movw	r2, #53512	; 0xd108
   11e0c:	movt	r2, #2
   11e10:	strd	r0, [r2, #16]
   11e14:	b	11a28 <__assert_fail@plt+0x704>
   11e18:	mov	r0, #1
   11e1c:	strb	r0, [r8, #6]
   11e20:	b	11a28 <__assert_fail@plt+0x704>
   11e24:	movw	r0, #53656	; 0xd198
   11e28:	movt	r0, #2
   11e2c:	ldr	r0, [r0]
   11e30:	bl	12868 <__assert_fail@plt+0x1544>
   11e34:	movw	r2, #53512	; 0xd108
   11e38:	movt	r2, #2
   11e3c:	strd	r0, [r2, #24]
   11e40:	b	11a28 <__assert_fail@plt+0x704>
   11e44:	movw	r0, #53656	; 0xd198
   11e48:	movw	r1, #46377	; 0xb529
   11e4c:	add	r3, r8, #28
   11e50:	mov	r2, #10
   11e54:	movt	r0, #2
   11e58:	movt	r1, #1
   11e5c:	ldr	r0, [r0]
   11e60:	str	r1, [sp]
   11e64:	mov	r1, #0
   11e68:	bl	17e10 <__assert_fail@plt+0x6aec>
   11e6c:	cmp	r0, #0
   11e70:	bne	127e4 <__assert_fail@plt+0x14c0>
   11e74:	ldr	r0, [r8, #28]
   11e78:	orr	r1, r0, #-2147483648	; 0x80000000
   11e7c:	cmp	r1, #-2147483648	; 0x80000000
   11e80:	beq	127e4 <__assert_fail@plt+0x14c0>
   11e84:	cmn	r0, #1
   11e88:	bgt	11a28 <__assert_fail@plt+0x704>
   11e8c:	mov	r1, #1
   11e90:	rsb	r0, r0, #0
   11e94:	strb	r1, [r8, #4]
   11e98:	str	r0, [r8, #28]
   11e9c:	b	11a28 <__assert_fail@plt+0x704>
   11ea0:	movw	r0, #53656	; 0xd198
   11ea4:	mov	r2, #4
   11ea8:	mov	r3, r9
   11eac:	movt	r0, #2
   11eb0:	str	r2, [sp]
   11eb4:	movw	r2, #48492	; 0xbd6c
   11eb8:	ldr	r1, [r0]
   11ebc:	movw	r0, #53548	; 0xd12c
   11ec0:	movt	r2, #1
   11ec4:	movt	r0, #2
   11ec8:	ldr	r0, [r0]
   11ecc:	str	r0, [sp, #4]
   11ed0:	mov	r0, #1
   11ed4:	str	r0, [sp, #8]
   11ed8:	movw	r0, #45844	; 0xb314
   11edc:	movt	r0, #1
   11ee0:	bl	14ab4 <__assert_fail@plt+0x3790>
   11ee4:	ldr	r0, [r9, r0, lsl #2]
   11ee8:	str	r0, [r8, #24]
   11eec:	b	11a28 <__assert_fail@plt+0x704>
   11ef0:	movw	r0, #53656	; 0xd198
   11ef4:	movw	r4, #48432	; 0xbd30
   11ef8:	mov	r2, #4
   11efc:	movt	r0, #2
   11f00:	str	r2, [sp]
   11f04:	movw	r2, #48452	; 0xbd44
   11f08:	movt	r4, #1
   11f0c:	ldr	r1, [r0]
   11f10:	movw	r0, #53548	; 0xd12c
   11f14:	movt	r2, #1
   11f18:	mov	r3, r4
   11f1c:	movt	r0, #2
   11f20:	ldr	r0, [r0]
   11f24:	str	r0, [sp, #4]
   11f28:	mov	r0, #1
   11f2c:	str	r0, [sp, #8]
   11f30:	movw	r0, #45543	; 0xb1e7
   11f34:	movt	r0, #1
   11f38:	bl	14ab4 <__assert_fail@plt+0x3790>
   11f3c:	ldr	r0, [r4, r0, lsl #2]
   11f40:	mov	r5, #0
   11f44:	str	r0, [r8, #20]
   11f48:	b	11a28 <__assert_fail@plt+0x704>
   11f4c:	movw	r0, #53656	; 0xd198
   11f50:	movw	r4, #48556	; 0xbdac
   11f54:	mov	r2, #4
   11f58:	movt	r0, #2
   11f5c:	str	r2, [sp]
   11f60:	movw	r2, #48572	; 0xbdbc
   11f64:	movt	r4, #1
   11f68:	ldr	r1, [r0]
   11f6c:	movw	r0, #53548	; 0xd12c
   11f70:	movt	r2, #1
   11f74:	mov	r3, r4
   11f78:	movt	r0, #2
   11f7c:	ldr	r0, [r0]
   11f80:	str	r0, [sp, #4]
   11f84:	mov	r0, #1
   11f88:	str	r0, [sp, #8]
   11f8c:	movw	r0, #45678	; 0xb26e
   11f90:	movt	r0, #1
   11f94:	bl	14ab4 <__assert_fail@plt+0x3790>
   11f98:	ldr	r0, [r4, r0, lsl #2]
   11f9c:	str	r0, [r8, #40]	; 0x28
   11fa0:	b	11a28 <__assert_fail@plt+0x704>
   11fa4:	mov	r0, #1
   11fa8:	str	r0, [r8, #72]	; 0x48
   11fac:	str	r5, [r8, #76]	; 0x4c
   11fb0:	b	11a28 <__assert_fail@plt+0x704>
   11fb4:	cmn	r0, #1
   11fb8:	bne	1274c <__assert_fail@plt+0x1428>
   11fbc:	ldr	r7, [r8, #36]	; 0x24
   11fc0:	ldrb	r0, [r8]
   11fc4:	cmp	r7, #0
   11fc8:	cmpne	r0, #0
   11fcc:	bne	12820 <__assert_fail@plt+0x14fc>
   11fd0:	ldr	r2, [sp, #24]
   11fd4:	ldrb	r1, [r8, #6]
   11fd8:	cmp	r2, #0
   11fdc:	bne	12018 <__assert_fail@plt+0xcf4>
   11fe0:	cmp	r1, #0
   11fe4:	beq	12018 <__assert_fail@plt+0xcf4>
   11fe8:	movw	r1, #45759	; 0xb2bf
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	movt	r1, #1
   11ff8:	bl	11114 <dcgettext@plt>
   11ffc:	mov	r2, r0
   12000:	mov	r0, #0
   12004:	mov	r1, #0
   12008:	bl	11198 <error@plt>
   1200c:	ldr	r7, [r8, #36]	; 0x24
   12010:	ldrb	r0, [r8]
   12014:	ldrb	r1, [r8, #6]
   12018:	cmp	r7, #0
   1201c:	ldreq	r2, [r8, #28]
   12020:	cmpeq	r2, #0
   12024:	bne	1206c <__assert_fail@plt+0xd48>
   12028:	cmp	r1, #0
   1202c:	beq	1206c <__assert_fail@plt+0xd48>
   12030:	ldr	r1, [r8, #20]
   12034:	ldr	r2, [r8, #24]
   12038:	orrs	r1, r2, r1
   1203c:	cmpeq	r0, #0
   12040:	bne	1206c <__assert_fail@plt+0xd48>
   12044:	movw	r1, #45780	; 0xb2d4
   12048:	mov	r0, #0
   1204c:	mov	r2, #5
   12050:	movt	r1, #1
   12054:	bl	11114 <dcgettext@plt>
   12058:	mov	r2, r0
   1205c:	mov	r0, #0
   12060:	mov	r1, #0
   12064:	bl	11198 <error@plt>
   12068:	ldr	r7, [r8, #36]	; 0x24
   1206c:	cmp	r7, #0
   12070:	beq	123e4 <__assert_fail@plt+0x10c0>
   12074:	mov	r6, #0
   12078:	mov	r0, #0
   1207c:	str	r6, [fp, #-32]	; 0xffffffe0
   12080:	ldrb	r1, [r7, r0]
   12084:	cmp	r1, #37	; 0x25
   12088:	bne	120c4 <__assert_fail@plt+0xda0>
   1208c:	b	120b0 <__assert_fail@plt+0xd8c>
   12090:	cmp	r1, #37	; 0x25
   12094:	mov	r1, #1
   12098:	add	r6, r6, #1
   1209c:	movweq	r1, #2
   120a0:	add	r0, r1, r0
   120a4:	ldrb	r1, [r7, r0]
   120a8:	cmp	r1, #37	; 0x25
   120ac:	bne	120c4 <__assert_fail@plt+0xda0>
   120b0:	add	r5, r0, #1
   120b4:	ldrb	r2, [r7, r5]
   120b8:	cmp	r2, #37	; 0x25
   120bc:	beq	12090 <__assert_fail@plt+0xd6c>
   120c0:	b	120d8 <__assert_fail@plt+0xdb4>
   120c4:	cmp	r1, #0
   120c8:	bne	12090 <__assert_fail@plt+0xd6c>
   120cc:	movw	r1, #46597	; 0xb605
   120d0:	movt	r1, #1
   120d4:	b	122c4 <__assert_fail@plt+0xfa0>
   120d8:	movw	r4, #46627	; 0xb623
   120dc:	mov	r0, #0
   120e0:	str	sl, [sp, #20]
   120e4:	mov	sl, #1
   120e8:	str	r0, [sp, #24]
   120ec:	movt	r4, #1
   120f0:	b	120fc <__assert_fail@plt+0xdd8>
   120f4:	add	r5, r5, #1
   120f8:	strb	sl, [r8]
   120fc:	add	r0, r7, r5
   12100:	mov	r1, r4
   12104:	bl	1130c <strspn@plt>
   12108:	add	r5, r0, r5
   1210c:	ldrb	r1, [r7, r5]
   12110:	cmp	r1, #39	; 0x27
   12114:	beq	120f4 <__assert_fail@plt+0xdd0>
   12118:	cmp	r1, #48	; 0x30
   1211c:	beq	1212c <__assert_fail@plt+0xe08>
   12120:	cmp	r0, #0
   12124:	bne	120fc <__assert_fail@plt+0xdd8>
   12128:	b	1213c <__assert_fail@plt+0xe18>
   1212c:	mov	r0, #1
   12130:	add	r5, r5, #1
   12134:	str	r0, [sp, #24]
   12138:	b	120fc <__assert_fail@plt+0xdd8>
   1213c:	bl	11210 <__errno_location@plt>
   12140:	mov	r4, r0
   12144:	mov	r0, #0
   12148:	add	r5, r7, r5
   1214c:	sub	r1, fp, #32
   12150:	mov	r2, #10
   12154:	str	r0, [r4]
   12158:	mov	r0, r5
   1215c:	bl	1109c <strtol@plt>
   12160:	cmp	r0, #-2147483648	; 0x80000000
   12164:	movne	r9, r0
   12168:	ldrne	r0, [r4]
   1216c:	cmpne	r0, #34	; 0x22
   12170:	beq	1282c <__assert_fail@plt+0x1508>
   12174:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12178:	cmp	r9, #0
   1217c:	cmpne	sl, r5
   12180:	bne	121a4 <__assert_fail@plt+0xe80>
   12184:	ldrb	r0, [sl], -r7
   12188:	cmp	r0, #46	; 0x2e
   1218c:	beq	121f0 <__assert_fail@plt+0xecc>
   12190:	cmp	r0, #0
   12194:	bne	12260 <__assert_fail@plt+0xf3c>
   12198:	movw	r1, #46702	; 0xb66e
   1219c:	movt	r1, #1
   121a0:	b	122c4 <__assert_fail@plt+0xfa0>
   121a4:	ldr	r5, [sp, #24]
   121a8:	mov	r0, #0
   121ac:	cmp	r9, #0
   121b0:	movwgt	r0, #1
   121b4:	tst	r5, r0
   121b8:	bne	121d0 <__assert_fail@plt+0xeac>
   121bc:	ldrb	r0, [r8, #6]
   121c0:	cmp	r0, #0
   121c4:	ldrne	r0, [r8, #28]
   121c8:	cmpne	r0, #0
   121cc:	bne	12700 <__assert_fail@plt+0x13dc>
   121d0:	cmn	r9, #1
   121d4:	ble	1272c <__assert_fail@plt+0x1408>
   121d8:	tst	r5, #1
   121dc:	streq	r9, [r8, #28]
   121e0:	strne	r9, [r8, #48]	; 0x30
   121e4:	ldrb	r0, [sl], -r7
   121e8:	cmp	r0, #46	; 0x2e
   121ec:	bne	12190 <__assert_fail@plt+0xe6c>
   121f0:	mov	r0, #0
   121f4:	mov	r5, r4
   121f8:	sub	r1, fp, #32
   121fc:	mov	r2, #10
   12200:	str	r0, [r4]
   12204:	add	r0, r7, sl
   12208:	add	r4, r0, #1
   1220c:	mov	r0, r4
   12210:	bl	1109c <strtol@plt>
   12214:	movw	r1, #53512	; 0xd108
   12218:	cmp	r0, #0
   1221c:	movt	r1, #2
   12220:	str	r0, [r1, #8]
   12224:	blt	127b4 <__assert_fail@plt+0x1490>
   12228:	ldr	r0, [r5]
   1222c:	cmp	r0, #34	; 0x22
   12230:	beq	127b4 <__assert_fail@plt+0x1490>
   12234:	bl	111e0 <__ctype_b_loc@plt>
   12238:	ldrb	r1, [r4]
   1223c:	cmp	r1, #43	; 0x2b
   12240:	beq	127b4 <__assert_fail@plt+0x1490>
   12244:	ldr	r0, [r0]
   12248:	add	r0, r0, r1, lsl #1
   1224c:	ldrh	r0, [r0]
   12250:	ands	r0, r0, #1
   12254:	bne	127b4 <__assert_fail@plt+0x1490>
   12258:	ldr	sl, [fp, #-32]	; 0xffffffe0
   1225c:	ldrb	r0, [sl], -r7
   12260:	cmp	r0, #102	; 0x66
   12264:	bne	12838 <__assert_fail@plt+0x1514>
   12268:	add	r4, sl, #1
   1226c:	ldr	sl, [sp, #20]
   12270:	mov	r0, r4
   12274:	ldrb	r1, [r7, r0]
   12278:	cmp	r1, #37	; 0x25
   1227c:	bne	122a0 <__assert_fail@plt+0xf7c>
   12280:	b	122ac <__assert_fail@plt+0xf88>
   12284:	cmp	r1, #37	; 0x25
   12288:	mov	r1, #1
   1228c:	movweq	r1, #2
   12290:	add	r0, r1, r0
   12294:	ldrb	r1, [r7, r0]
   12298:	cmp	r1, #37	; 0x25
   1229c:	beq	122ac <__assert_fail@plt+0xf88>
   122a0:	cmp	r1, #0
   122a4:	bne	12284 <__assert_fail@plt+0xf60>
   122a8:	b	122f0 <__assert_fail@plt+0xfcc>
   122ac:	add	r2, r7, r0
   122b0:	ldrb	r2, [r2, #1]
   122b4:	cmp	r2, #37	; 0x25
   122b8:	beq	12284 <__assert_fail@plt+0xf60>
   122bc:	movw	r1, #46813	; 0xb6dd
   122c0:	movt	r1, #1
   122c4:	mov	r0, #0
   122c8:	mov	r2, #5
   122cc:	bl	11114 <dcgettext@plt>
   122d0:	mov	r4, r0
   122d4:	mov	r0, r7
   122d8:	bl	17194 <__assert_fail@plt+0x5e70>
   122dc:	mov	r3, r0
   122e0:	mov	r0, #1
   122e4:	mov	r1, #0
   122e8:	mov	r2, r4
   122ec:	bl	11198 <error@plt>
   122f0:	cmp	r6, #0
   122f4:	beq	12308 <__assert_fail@plt+0xfe4>
   122f8:	mov	r0, r7
   122fc:	mov	r1, r6
   12300:	bl	17d44 <__assert_fail@plt+0x6a20>
   12304:	str	r0, [r8, #52]	; 0x34
   12308:	mov	r0, r7
   1230c:	ldrb	r1, [r0, r4]!
   12310:	cmp	r1, #0
   12314:	beq	12320 <__assert_fail@plt+0xffc>
   12318:	bl	17d8c <__assert_fail@plt+0x6a68>
   1231c:	str	r0, [r8, #56]	; 0x38
   12320:	ldrb	r0, [r8, #7]
   12324:	cmp	r0, #1
   12328:	bne	123e4 <__assert_fail@plt+0x10c0>
   1232c:	movw	r0, #53640	; 0xd188
   12330:	mov	r1, r7
   12334:	movt	r0, #2
   12338:	ldr	r9, [r0]
   1233c:	mov	r0, #0
   12340:	bl	17184 <__assert_fail@plt+0x5e60>
   12344:	ldr	r1, [r8, #52]	; 0x34
   12348:	movw	r6, #46377	; 0xb529
   1234c:	ldr	r7, [r8, #28]
   12350:	ldrb	r4, [r8]
   12354:	ldrb	sl, [r8, #4]
   12358:	str	r0, [sp, #24]
   1235c:	mov	r0, #1
   12360:	movt	r6, #1
   12364:	cmp	r1, #0
   12368:	moveq	r1, r6
   1236c:	bl	17184 <__assert_fail@plt+0x5e60>
   12370:	ldr	r1, [r8, #56]	; 0x38
   12374:	mov	r5, r0
   12378:	mov	r0, #2
   1237c:	cmp	r1, #0
   12380:	moveq	r1, r6
   12384:	bl	17184 <__assert_fail@plt+0x5e60>
   12388:	movw	r1, #46963	; 0xb773
   1238c:	movw	r2, #46968	; 0xb778
   12390:	cmp	sl, #0
   12394:	movw	r3, #46960	; 0xb770
   12398:	ldr	sl, [sp, #20]
   1239c:	movt	r1, #1
   123a0:	movt	r2, #1
   123a4:	movt	r3, #1
   123a8:	movne	r2, r1
   123ac:	movw	r1, #46956	; 0xb76c
   123b0:	cmp	r4, #0
   123b4:	movt	r1, #1
   123b8:	movne	r3, r1
   123bc:	mov	r1, #1
   123c0:	stm	sp, {r3, r7}
   123c4:	str	r2, [sp, #8]
   123c8:	movw	r2, #46850	; 0xb702
   123cc:	str	r0, [sp, #16]
   123d0:	mov	r0, r9
   123d4:	str	r5, [sp, #12]
   123d8:	ldr	r3, [sp, #24]
   123dc:	movt	r2, #1
   123e0:	bl	1124c <__fprintf_chk@plt>
   123e4:	ldrb	r0, [r8]
   123e8:	cmp	r0, #1
   123ec:	bne	12444 <__assert_fail@plt+0x1120>
   123f0:	ldr	r0, [r8, #24]
   123f4:	cmp	r0, #0
   123f8:	bne	12844 <__assert_fail@plt+0x1520>
   123fc:	ldrb	r0, [r8, #6]
   12400:	cmp	r0, #1
   12404:	bne	12444 <__assert_fail@plt+0x1120>
   12408:	movw	r0, #1
   1240c:	movt	r0, #1
   12410:	bl	112ac <nl_langinfo@plt>
   12414:	ldrb	r0, [r0]
   12418:	cmp	r0, #0
   1241c:	bne	12444 <__assert_fail@plt+0x1120>
   12420:	movw	r1, #45849	; 0xb319
   12424:	mov	r0, #0
   12428:	mov	r2, #5
   1242c:	movt	r1, #1
   12430:	bl	11114 <dcgettext@plt>
   12434:	mov	r2, r0
   12438:	mov	r0, #0
   1243c:	mov	r1, #0
   12440:	bl	11198 <error@plt>
   12444:	ldr	r0, [r8, #28]
   12448:	ldr	r1, [r8, #60]	; 0x3c
   1244c:	cmp	r1, r0
   12450:	bhi	1246c <__assert_fail@plt+0x1148>
   12454:	add	r1, r0, #1
   12458:	str	r1, [r8, #60]	; 0x3c
   1245c:	ldr	r0, [r8, #64]	; 0x40
   12460:	bl	178b4 <__assert_fail@plt+0x6590>
   12464:	str	r0, [r8, #64]	; 0x40
   12468:	ldr	r0, [r8, #28]
   1246c:	movw	r1, #53512	; 0xd108
   12470:	movw	r4, #53632	; 0xd180
   12474:	movt	r1, #2
   12478:	movt	r4, #2
   1247c:	ldr	r1, [r1, #4]
   12480:	eor	r1, r1, #256	; 0x100
   12484:	orr	r0, r0, r1
   12488:	ldr	r1, [r4]
   1248c:	clz	r0, r0
   12490:	lsr	r0, r0, #5
   12494:	str	r0, [r8, #44]	; 0x2c
   12498:	ldr	r0, [r8, #40]	; 0x28
   1249c:	cmp	r0, #0
   124a0:	movne	r0, #1
   124a4:	strbne	r0, [r8, #8]
   124a8:	ldr	r0, [sp, #28]
   124ac:	cmp	r1, r0
   124b0:	bge	12538 <__assert_fail@plt+0x1214>
   124b4:	ldrb	r0, [r8, #6]
   124b8:	cmp	r0, #1
   124bc:	bne	124f8 <__assert_fail@plt+0x11d4>
   124c0:	ldr	r0, [r8, #72]	; 0x48
   124c4:	ldr	r3, [r8, #76]	; 0x4c
   124c8:	orrs	r0, r0, r3
   124cc:	beq	124f8 <__assert_fail@plt+0x11d4>
   124d0:	movw	r1, #45887	; 0xb33f
   124d4:	mov	r0, #0
   124d8:	mov	r2, #5
   124dc:	movt	r1, #1
   124e0:	bl	11114 <dcgettext@plt>
   124e4:	mov	r2, r0
   124e8:	mov	r0, #0
   124ec:	mov	r1, #0
   124f0:	bl	11198 <error@plt>
   124f4:	ldr	r1, [r4]
   124f8:	ldr	r0, [sp, #28]
   124fc:	mov	r6, #1
   12500:	cmp	r1, r0
   12504:	bge	126dc <__assert_fail@plt+0x13b8>
   12508:	mov	r6, #1
   1250c:	ldr	r0, [sl, r1, lsl #2]
   12510:	mov	r1, #1
   12514:	bl	129b8 <__assert_fail@plt+0x1694>
   12518:	ldr	r1, [r4]
   1251c:	and	r6, r0, r6
   12520:	ldr	r0, [sp, #28]
   12524:	add	r1, r1, #1
   12528:	cmp	r1, r0
   1252c:	str	r1, [r4]
   12530:	blt	1250c <__assert_fail@plt+0x11e8>
   12534:	b	126a0 <__assert_fail@plt+0x137c>
   12538:	ldrd	r2, [r8, #72]	; 0x48
   1253c:	mov	r0, #0
   12540:	str	r0, [sp, #36]	; 0x24
   12544:	str	r0, [sp, #32]
   12548:	subs	r4, r2, #1
   1254c:	sbc	r5, r3, #0
   12550:	orrs	r0, r2, r3
   12554:	strd	r4, [r8, #72]	; 0x48
   12558:	beq	125c0 <__assert_fail@plt+0x129c>
   1255c:	movw	r6, #53648	; 0xd190
   12560:	movw	r7, #53652	; 0xd194
   12564:	add	r4, sp, #36	; 0x24
   12568:	add	r5, sp, #32
   1256c:	movt	r6, #2
   12570:	movt	r7, #2
   12574:	ldrb	r0, [r8, #5]
   12578:	ldr	r3, [r6]
   1257c:	mov	r2, #10
   12580:	mov	r1, r5
   12584:	cmp	r0, #0
   12588:	mov	r0, r4
   1258c:	movwne	r2, #0
   12590:	bl	112dc <getdelim@plt>
   12594:	cmp	r0, #1
   12598:	blt	125c0 <__assert_fail@plt+0x129c>
   1259c:	ldr	r1, [r7]
   125a0:	ldr	r0, [sp, #36]	; 0x24
   125a4:	bl	1106c <fputs_unlocked@plt>
   125a8:	ldrd	r0, [r8, #72]	; 0x48
   125ac:	subs	r2, r0, #1
   125b0:	sbc	r3, r1, #0
   125b4:	orrs	r0, r0, r1
   125b8:	strd	r2, [r8, #72]	; 0x48
   125bc:	bne	12574 <__assert_fail@plt+0x1250>
   125c0:	movw	r7, #53648	; 0xd190
   125c4:	ldrb	r0, [r8, #5]
   125c8:	mov	r2, #10
   125cc:	add	r1, sp, #32
   125d0:	movt	r7, #2
   125d4:	ldr	r3, [r7]
   125d8:	cmp	r0, #0
   125dc:	add	r0, sp, #36	; 0x24
   125e0:	movwne	r2, #0
   125e4:	bl	112dc <getdelim@plt>
   125e8:	mov	r6, #1
   125ec:	cmp	r0, #1
   125f0:	blt	12664 <__assert_fail@plt+0x1340>
   125f4:	mov	r9, #0
   125f8:	add	r4, sp, #36	; 0x24
   125fc:	add	r5, sp, #32
   12600:	sub	r3, r0, #1
   12604:	ldr	r0, [sp, #36]	; 0x24
   12608:	ldrb	r2, [r8, #5]
   1260c:	ldrb	r1, [r0, r3]
   12610:	cmp	r2, #0
   12614:	mov	r2, #10
   12618:	movwne	r2, #0
   1261c:	cmp	r2, r1
   12620:	sub	r1, r2, r1
   12624:	strbeq	r9, [r0, r3]
   12628:	clz	r1, r1
   1262c:	ldreq	r0, [sp, #36]	; 0x24
   12630:	lsr	r1, r1, #5
   12634:	bl	129b8 <__assert_fail@plt+0x1694>
   12638:	and	r6, r0, r6
   1263c:	ldrb	r0, [r8, #5]
   12640:	ldr	r3, [r7]
   12644:	mov	r2, #10
   12648:	mov	r1, r5
   1264c:	cmp	r0, #0
   12650:	mov	r0, r4
   12654:	movwne	r2, #0
   12658:	bl	112dc <getdelim@plt>
   1265c:	cmp	r0, #0
   12660:	bgt	12600 <__assert_fail@plt+0x12dc>
   12664:	ldr	r0, [r7]
   12668:	ldrb	r0, [r0]
   1266c:	tst	r0, #32
   12670:	beq	126a0 <__assert_fail@plt+0x137c>
   12674:	bl	11210 <__errno_location@plt>
   12678:	ldr	r4, [r0]
   1267c:	movw	r1, #45928	; 0xb368
   12680:	mov	r0, #0
   12684:	mov	r2, #5
   12688:	movt	r1, #1
   1268c:	bl	11114 <dcgettext@plt>
   12690:	mov	r2, r0
   12694:	mov	r0, #0
   12698:	mov	r1, r4
   1269c:	bl	11198 <error@plt>
   126a0:	cmp	r6, #0
   126a4:	bne	126dc <__assert_fail@plt+0x13b8>
   126a8:	ldrb	r0, [r8, #6]
   126ac:	cmp	r0, #0
   126b0:	beq	126dc <__assert_fail@plt+0x13b8>
   126b4:	movw	r1, #45948	; 0xb37c
   126b8:	mov	r0, #0
   126bc:	mov	r2, #5
   126c0:	mov	r6, #0
   126c4:	movt	r1, #1
   126c8:	bl	11114 <dcgettext@plt>
   126cc:	mov	r2, r0
   126d0:	mov	r0, #0
   126d4:	mov	r1, #0
   126d8:	bl	11198 <error@plt>
   126dc:	ldr	r0, [r8, #40]	; 0x28
   126e0:	orr	r0, r0, #1
   126e4:	subs	r1, r0, #3
   126e8:	mov	r0, #0
   126ec:	movwne	r1, #1
   126f0:	cmp	r6, #0
   126f4:	lsleq	r0, r1, #1
   126f8:	sub	sp, fp, #28
   126fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12700:	movw	r1, #46664	; 0xb648
   12704:	mov	r0, #0
   12708:	mov	r2, #5
   1270c:	movt	r1, #1
   12710:	bl	11114 <dcgettext@plt>
   12714:	mov	r2, r0
   12718:	mov	r0, #0
   1271c:	mov	r1, #0
   12720:	bl	11198 <error@plt>
   12724:	cmn	r9, #1
   12728:	bgt	121d8 <__assert_fail@plt+0xeb4>
   1272c:	mov	r0, #1
   12730:	strb	r0, [r8, #4]
   12734:	rsb	r0, r9, #0
   12738:	str	r0, [r8, #28]
   1273c:	ldrb	r0, [sl], -r7
   12740:	cmp	r0, #46	; 0x2e
   12744:	bne	12190 <__assert_fail@plt+0xe6c>
   12748:	b	121f0 <__assert_fail@plt+0xecc>
   1274c:	cmn	r0, #3
   12750:	bne	1279c <__assert_fail@plt+0x1478>
   12754:	movw	r0, #53544	; 0xd128
   12758:	movw	r2, #45702	; 0xb286
   1275c:	mov	r1, #0
   12760:	movt	r0, #2
   12764:	movt	r2, #1
   12768:	str	r1, [sp, #4]
   1276c:	movw	r1, #45506	; 0xb1c2
   12770:	ldr	r3, [r0]
   12774:	movw	r0, #53652	; 0xd194
   12778:	str	r2, [sp]
   1277c:	movw	r2, #45688	; 0xb278
   12780:	movt	r1, #1
   12784:	movt	r0, #2
   12788:	movt	r2, #1
   1278c:	ldr	r0, [r0]
   12790:	bl	17638 <__assert_fail@plt+0x6314>
   12794:	mov	r0, #0
   12798:	bl	111ec <exit@plt>
   1279c:	cmn	r0, #2
   127a0:	bne	127ac <__assert_fail@plt+0x1488>
   127a4:	mov	r0, #0
   127a8:	bl	11420 <__assert_fail@plt+0xfc>
   127ac:	mov	r0, #1
   127b0:	bl	11420 <__assert_fail@plt+0xfc>
   127b4:	movw	r1, #46723	; 0xb683
   127b8:	movt	r1, #1
   127bc:	b	122c4 <__assert_fail@plt+0xfa0>
   127c0:	movw	r1, #45654	; 0xb256
   127c4:	movt	r1, #1
   127c8:	b	127ec <__assert_fail@plt+0x14c8>
   127cc:	movw	r1, #45583	; 0xb20f
   127d0:	movt	r1, #1
   127d4:	b	1284c <__assert_fail@plt+0x1528>
   127d8:	movw	r1, #45613	; 0xb22d
   127dc:	movt	r1, #1
   127e0:	b	1284c <__assert_fail@plt+0x1528>
   127e4:	movw	r1, #45558	; 0xb1f6
   127e8:	movt	r1, #1
   127ec:	mov	r0, #0
   127f0:	mov	r2, #5
   127f4:	bl	11114 <dcgettext@plt>
   127f8:	mov	r5, r0
   127fc:	movw	r0, #53656	; 0xd198
   12800:	movt	r0, #2
   12804:	ldr	r0, [r0]
   12808:	bl	17194 <__assert_fail@plt+0x5e70>
   1280c:	mov	r3, r0
   12810:	mov	r0, #1
   12814:	mov	r1, #0
   12818:	mov	r2, r5
   1281c:	bl	11198 <error@plt>
   12820:	movw	r1, #45715	; 0xb293
   12824:	movt	r1, #1
   12828:	b	1284c <__assert_fail@plt+0x1528>
   1282c:	movw	r1, #46629	; 0xb625
   12830:	movt	r1, #1
   12834:	b	122c4 <__assert_fail@plt+0xfa0>
   12838:	movw	r1, #46754	; 0xb6a2
   1283c:	movt	r1, #1
   12840:	b	122c4 <__assert_fail@plt+0xfa0>
   12844:	movw	r1, #45811	; 0xb2f3
   12848:	movt	r1, #1
   1284c:	mov	r0, #0
   12850:	mov	r2, #5
   12854:	bl	11114 <dcgettext@plt>
   12858:	mov	r2, r0
   1285c:	mov	r0, #1
   12860:	mov	r1, #0
   12864:	bl	11198 <error@plt>
   12868:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1286c:	add	fp, sp, #24
   12870:	sub	sp, sp, #24
   12874:	mov	r4, r0
   12878:	bl	111f8 <strlen@plt>
   1287c:	movw	r8, #46494	; 0xb59e
   12880:	mov	r5, #0
   12884:	cmp	r0, #0
   12888:	movt	r8, #1
   1288c:	str	r5, [sp, #20]
   12890:	beq	128ac <__assert_fail@plt+0x1588>
   12894:	mov	r6, r0
   12898:	add	r0, r4, r0
   1289c:	ldrb	r0, [r0, #-1]
   128a0:	sub	r0, r0, #48	; 0x30
   128a4:	cmp	r0, #10
   128a8:	bcs	128b4 <__assert_fail@plt+0x1590>
   128ac:	mov	r0, r4
   128b0:	b	1292c <__assert_fail@plt+0x1608>
   128b4:	add	r0, r6, #2
   128b8:	bl	1786c <__assert_fail@plt+0x6548>
   128bc:	add	r9, r0, r6
   128c0:	mov	r1, r4
   128c4:	mov	r2, r6
   128c8:	mov	r5, r0
   128cc:	sub	r7, r9, #1
   128d0:	str	r7, [sp, #20]
   128d4:	bl	110e4 <memcpy@plt>
   128d8:	cmp	r6, #2
   128dc:	bcc	128fc <__assert_fail@plt+0x15d8>
   128e0:	ldrb	r0, [r9, #-1]
   128e4:	cmp	r0, #105	; 0x69
   128e8:	bne	128fc <__assert_fail@plt+0x15d8>
   128ec:	ldrb	r0, [r7, #-1]
   128f0:	sub	r0, r0, #48	; 0x30
   128f4:	cmp	r0, #10
   128f8:	bcs	12920 <__assert_fail@plt+0x15fc>
   128fc:	mov	r0, #66	; 0x42
   12900:	movw	r8, #46503	; 0xb5a7
   12904:	strb	r0, [r7, #1]
   12908:	add	r0, r7, #2
   1290c:	movt	r8, #1
   12910:	str	r0, [sp, #20]
   12914:	mov	r0, #0
   12918:	strb	r0, [r7, #2]
   1291c:	b	12928 <__assert_fail@plt+0x1604>
   12920:	mov	r0, #0
   12924:	strb	r0, [r7]
   12928:	mov	r0, r5
   1292c:	add	r1, sp, #20
   12930:	add	r3, sp, #8
   12934:	mov	r2, #10
   12938:	str	r8, [sp]
   1293c:	bl	189a4 <__assert_fail@plt+0x7680>
   12940:	cmp	r0, #0
   12944:	ldreq	r0, [sp, #20]
   12948:	ldrbeq	r0, [r0]
   1294c:	cmpeq	r0, #0
   12950:	beq	12990 <__assert_fail@plt+0x166c>
   12954:	mov	r0, r5
   12958:	bl	14d74 <__assert_fail@plt+0x3a50>
   1295c:	movw	r1, #46513	; 0xb5b1
   12960:	mov	r0, #0
   12964:	mov	r2, #5
   12968:	movt	r1, #1
   1296c:	bl	11114 <dcgettext@plt>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	17194 <__assert_fail@plt+0x5e70>
   1297c:	mov	r3, r0
   12980:	mov	r0, #1
   12984:	mov	r1, #0
   12988:	mov	r2, r5
   1298c:	bl	11198 <error@plt>
   12990:	ldr	r0, [sp, #8]
   12994:	ldr	r1, [sp, #12]
   12998:	orrs	r0, r0, r1
   1299c:	beq	12954 <__assert_fail@plt+0x1630>
   129a0:	mov	r0, r5
   129a4:	bl	14d74 <__assert_fail@plt+0x3a50>
   129a8:	ldr	r0, [sp, #8]
   129ac:	ldr	r1, [sp, #12]
   129b0:	sub	sp, fp, #24
   129b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   129b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129bc:	add	fp, sp, #28
   129c0:	push	{r1}		; (str r1, [sp, #-4]!)
   129c4:	movw	sl, #53512	; 0xd108
   129c8:	mov	r8, r0
   129cc:	mov	r4, #1
   129d0:	mov	r5, #0
   129d4:	mov	r6, #0
   129d8:	movt	sl, #2
   129dc:	b	129f0 <__assert_fail@plt+0x16cc>
   129e0:	add	r3, r2, #1
   129e4:	add	r8, r7, #1
   129e8:	str	r3, [r0, #20]
   129ec:	strb	r1, [r2]
   129f0:	ldr	r0, [sl, #4]
   129f4:	ldrb	r9, [r8]
   129f8:	adds	r5, r5, #1
   129fc:	adc	r6, r6, #0
   12a00:	cmp	r0, #256	; 0x100
   12a04:	bne	12a48 <__assert_fail@plt+0x1724>
   12a08:	cmp	r9, #0
   12a0c:	beq	12b14 <__assert_fail@plt+0x17f0>
   12a10:	bl	111e0 <__ctype_b_loc@plt>
   12a14:	ldr	r0, [r0]
   12a18:	mov	r7, r8
   12a1c:	uxtb	r1, r9
   12a20:	cmp	r1, #10
   12a24:	beq	12a38 <__assert_fail@plt+0x1714>
   12a28:	add	r2, r0, r1, lsl #1
   12a2c:	ldrh	r2, [r2]
   12a30:	ands	r2, r2, #1
   12a34:	beq	12a7c <__assert_fail@plt+0x1758>
   12a38:	ldrb	r9, [r7, #1]!
   12a3c:	cmp	r9, #0
   12a40:	bne	12a1c <__assert_fail@plt+0x16f8>
   12a44:	b	12b14 <__assert_fail@plt+0x17f0>
   12a48:	cmp	r9, #0
   12a4c:	beq	12ab4 <__assert_fail@plt+0x1790>
   12a50:	cmp	r0, r9
   12a54:	mov	r7, r8
   12a58:	beq	12a70 <__assert_fail@plt+0x174c>
   12a5c:	mov	r7, r8
   12a60:	ldrb	r9, [r7, #1]!
   12a64:	cmp	r9, #0
   12a68:	cmpne	r0, r9
   12a6c:	bne	12a60 <__assert_fail@plt+0x173c>
   12a70:	cmp	r9, #0
   12a74:	bne	12ac0 <__assert_fail@plt+0x179c>
   12a78:	b	12b14 <__assert_fail@plt+0x17f0>
   12a7c:	cmp	r1, #10
   12a80:	beq	12ac0 <__assert_fail@plt+0x179c>
   12a84:	cmp	r2, #0
   12a88:	bne	12ac0 <__assert_fail@plt+0x179c>
   12a8c:	ldrb	r1, [r7, #1]!
   12a90:	cmp	r1, #0
   12a94:	beq	12b14 <__assert_fail@plt+0x17f0>
   12a98:	cmp	r1, #10
   12a9c:	beq	12ac0 <__assert_fail@plt+0x179c>
   12aa0:	add	r1, r0, r1, lsl #1
   12aa4:	ldrh	r1, [r1]
   12aa8:	ands	r1, r1, #1
   12aac:	beq	12a8c <__assert_fail@plt+0x1768>
   12ab0:	b	12ac0 <__assert_fail@plt+0x179c>
   12ab4:	mov	r7, r8
   12ab8:	cmp	r9, #0
   12abc:	beq	12b14 <__assert_fail@plt+0x17f0>
   12ac0:	mov	r0, #0
   12ac4:	mov	r2, r5
   12ac8:	mov	r3, r6
   12acc:	strb	r0, [r7]
   12ad0:	mov	r0, r8
   12ad4:	bl	12b90 <__assert_fail@plt+0x186c>
   12ad8:	and	r4, r4, r0
   12adc:	movw	r0, #53652	; 0xd194
   12ae0:	ldr	r1, [sl, #4]
   12ae4:	movt	r0, #2
   12ae8:	ldr	r0, [r0]
   12aec:	cmp	r1, #256	; 0x100
   12af0:	movweq	r1, #32
   12af4:	ldr	r2, [r0, #20]
   12af8:	ldr	r3, [r0, #24]
   12afc:	cmp	r2, r3
   12b00:	bcc	129e0 <__assert_fail@plt+0x16bc>
   12b04:	uxtb	r1, r1
   12b08:	bl	1127c <__overflow@plt>
   12b0c:	add	r8, r7, #1
   12b10:	b	129f0 <__assert_fail@plt+0x16cc>
   12b14:	mov	r0, r8
   12b18:	mov	r2, r5
   12b1c:	mov	r3, r6
   12b20:	bl	12b90 <__assert_fail@plt+0x186c>
   12b24:	and	r5, r4, r0
   12b28:	ldr	r0, [sp]
   12b2c:	cmp	r0, #0
   12b30:	beq	12b74 <__assert_fail@plt+0x1850>
   12b34:	movw	r0, #53664	; 0xd1a0
   12b38:	mov	r1, #10
   12b3c:	movt	r0, #2
   12b40:	ldrb	r0, [r0, #5]
   12b44:	cmp	r0, #0
   12b48:	movw	r0, #53652	; 0xd194
   12b4c:	movt	r0, #2
   12b50:	movwne	r1, #0
   12b54:	ldr	r0, [r0]
   12b58:	ldr	r2, [r0, #20]
   12b5c:	ldr	r3, [r0, #24]
   12b60:	cmp	r2, r3
   12b64:	bcs	12b80 <__assert_fail@plt+0x185c>
   12b68:	add	r3, r2, #1
   12b6c:	str	r3, [r0, #20]
   12b70:	strb	r1, [r2]
   12b74:	mov	r0, r5
   12b78:	sub	sp, fp, #28
   12b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b80:	bl	1127c <__overflow@plt>
   12b84:	mov	r0, r5
   12b88:	sub	sp, fp, #28
   12b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b94:	add	fp, sp, #28
   12b98:	sub	sp, sp, #4
   12b9c:	vpush	{d8-d11}
   12ba0:	sub	sp, sp, #240	; 0xf0
   12ba4:	mov	r8, r0
   12ba8:	movw	r0, #54072	; 0xd338
   12bac:	mov	r5, r2
   12bb0:	movt	r0, #2
   12bb4:	ldr	r1, [r0]
   12bb8:	cmp	r1, #0
   12bbc:	beq	12c14 <__assert_fail@plt+0x18f0>
   12bc0:	ldrd	r6, [r1]
   12bc4:	and	r0, r6, r7
   12bc8:	cmn	r0, #1
   12bcc:	beq	12ca8 <__assert_fail@plt+0x1984>
   12bd0:	mvn	r0, #0
   12bd4:	add	r1, r1, #16
   12bd8:	subs	r2, r5, r6
   12bdc:	sbcs	r2, r3, r7
   12be0:	bcc	12bf8 <__assert_fail@plt+0x18d4>
   12be4:	ldr	r2, [r1, #-8]
   12be8:	ldr	r7, [r1, #-4]
   12bec:	subs	r2, r2, r5
   12bf0:	sbcs	r2, r7, r3
   12bf4:	bcs	12c20 <__assert_fail@plt+0x18fc>
   12bf8:	ldrd	r6, [r1]
   12bfc:	add	r1, r1, #16
   12c00:	eor	r2, r7, r0
   12c04:	eor	r4, r6, r0
   12c08:	orrs	r2, r4, r2
   12c0c:	bne	12bd8 <__assert_fail@plt+0x18b4>
   12c10:	b	12ca8 <__assert_fail@plt+0x1984>
   12c14:	eor	r0, r5, #1
   12c18:	orrs	r0, r0, r3
   12c1c:	bne	12ca8 <__assert_fail@plt+0x1984>
   12c20:	movw	r9, #53664	; 0xd1a0
   12c24:	movt	r9, #2
   12c28:	ldr	r4, [r9, #32]
   12c2c:	cmp	r4, #0
   12c30:	beq	12d04 <__assert_fail@plt+0x19e0>
   12c34:	mov	r0, r8
   12c38:	bl	111f8 <strlen@plt>
   12c3c:	mov	r6, r0
   12c40:	mov	r0, r4
   12c44:	bl	111f8 <strlen@plt>
   12c48:	cmp	r6, r0
   12c4c:	bls	12d04 <__assert_fail@plt+0x19e0>
   12c50:	add	r1, r8, r6
   12c54:	sub	r6, r1, r0
   12c58:	mov	r0, r4
   12c5c:	mov	r1, r6
   12c60:	bl	11090 <strcmp@plt>
   12c64:	cmp	r0, #0
   12c68:	beq	12cc4 <__assert_fail@plt+0x19a0>
   12c6c:	ldrb	r0, [r9, #7]
   12c70:	cmp	r0, #1
   12c74:	bne	12d04 <__assert_fail@plt+0x19e0>
   12c78:	movw	r0, #53640	; 0xd188
   12c7c:	movw	r2, #46994	; 0xb792
   12c80:	mov	r1, #1
   12c84:	movt	r0, #2
   12c88:	movt	r2, #1
   12c8c:	ldr	r0, [r0]
   12c90:	bl	1124c <__fprintf_chk@plt>
   12c94:	ldrb	r6, [r8]
   12c98:	mov	r4, r8
   12c9c:	cmp	r6, #0
   12ca0:	bne	12d14 <__assert_fail@plt+0x19f0>
   12ca4:	b	12d38 <__assert_fail@plt+0x1a14>
   12ca8:	movw	r0, #53652	; 0xd194
   12cac:	movt	r0, #2
   12cb0:	ldr	r1, [r0]
   12cb4:	mov	r0, r8
   12cb8:	bl	1106c <fputs_unlocked@plt>
   12cbc:	mov	r4, #1
   12cc0:	b	13898 <__assert_fail@plt+0x2574>
   12cc4:	mov	r0, #0
   12cc8:	strb	r0, [r6]
   12ccc:	ldrb	r0, [r9, #7]
   12cd0:	cmp	r0, #1
   12cd4:	bne	12d04 <__assert_fail@plt+0x19e0>
   12cd8:	movw	r0, #53640	; 0xd188
   12cdc:	movt	r0, #2
   12ce0:	ldr	r6, [r0]
   12ce4:	mov	r0, r4
   12ce8:	bl	17194 <__assert_fail@plt+0x5e70>
   12cec:	movw	r2, #46974	; 0xb77e
   12cf0:	mov	r3, r0
   12cf4:	mov	r0, r6
   12cf8:	mov	r1, #1
   12cfc:	movt	r2, #1
   12d00:	bl	1124c <__fprintf_chk@plt>
   12d04:	ldrb	r6, [r8]
   12d08:	mov	r4, r8
   12d0c:	cmp	r6, #0
   12d10:	beq	12d38 <__assert_fail@plt+0x1a14>
   12d14:	bl	111e0 <__ctype_b_loc@plt>
   12d18:	ldr	r0, [r0]
   12d1c:	mov	r4, r8
   12d20:	uxtb	r1, r6
   12d24:	ldrb	r1, [r0, r1, lsl #1]
   12d28:	tst	r1, #1
   12d2c:	ldrbne	r6, [r4, #1]!
   12d30:	cmpne	r6, #0
   12d34:	bne	12d20 <__assert_fail@plt+0x19fc>
   12d38:	ldr	r0, [r9, #44]	; 0x2c
   12d3c:	cmp	r0, #0
   12d40:	beq	12dd8 <__assert_fail@plt+0x1ab4>
   12d44:	cmp	r5, #1
   12d48:	bgt	12d80 <__assert_fail@plt+0x1a5c>
   12d4c:	cmp	r4, r8
   12d50:	bne	12d80 <__assert_fail@plt+0x1a5c>
   12d54:	mov	r0, #0
   12d58:	str	r0, [r9, #28]
   12d5c:	ldrb	r0, [r9, #7]
   12d60:	cmp	r0, #0
   12d64:	bne	12db8 <__assert_fail@plt+0x1a94>
   12d68:	ldr	sl, [r9, #20]
   12d6c:	mov	r5, #1000	; 0x3e8
   12d70:	sub	r0, sl, #3
   12d74:	cmp	r0, #2
   12d78:	movwcc	r5, #1024	; 0x400
   12d7c:	b	12e40 <__assert_fail@plt+0x1b1c>
   12d80:	mov	r0, r8
   12d84:	bl	111f8 <strlen@plt>
   12d88:	str	r0, [r9, #28]
   12d8c:	ldr	r1, [r9, #60]	; 0x3c
   12d90:	cmp	r1, r0
   12d94:	bhi	12dac <__assert_fail@plt+0x1a88>
   12d98:	add	r1, r0, #1
   12d9c:	str	r1, [r9, #60]	; 0x3c
   12da0:	ldr	r0, [r9, #64]	; 0x40
   12da4:	bl	178b4 <__assert_fail@plt+0x6590>
   12da8:	str	r0, [r9, #64]	; 0x40
   12dac:	ldrb	r0, [r9, #7]
   12db0:	cmp	r0, #0
   12db4:	beq	12d68 <__assert_fail@plt+0x1a44>
   12db8:	movw	r0, #53640	; 0xd188
   12dbc:	ldr	r3, [r9, #28]
   12dc0:	movw	r2, #47017	; 0xb7a9
   12dc4:	mov	r1, #1
   12dc8:	movt	r0, #2
   12dcc:	movt	r2, #1
   12dd0:	ldr	r0, [r0]
   12dd4:	bl	1124c <__fprintf_chk@plt>
   12dd8:	ldr	sl, [r9, #20]
   12ddc:	mov	r5, #1000	; 0x3e8
   12de0:	sub	r0, sl, #3
   12de4:	cmp	r0, #2
   12de8:	ldrb	r0, [r9, #7]
   12dec:	movwcc	r5, #1024	; 0x400
   12df0:	cmp	r0, #1
   12df4:	bne	12e40 <__assert_fail@plt+0x1b1c>
   12df8:	movw	r0, #53640	; 0xd188
   12dfc:	mov	r1, r4
   12e00:	movt	r0, #2
   12e04:	ldr	r7, [r0]
   12e08:	mov	r0, #0
   12e0c:	bl	17184 <__assert_fail@plt+0x5e60>
   12e10:	ldr	r1, [r9, #12]
   12e14:	mov	r6, r0
   12e18:	mov	r0, #1
   12e1c:	bl	17184 <__assert_fail@plt+0x5e60>
   12e20:	movw	r2, #47134	; 0xb81e
   12e24:	mov	r1, #15
   12e28:	mov	r3, r6
   12e2c:	stm	sp, {r0, r1}
   12e30:	movt	r2, #1
   12e34:	mov	r0, r7
   12e38:	mov	r1, #1
   12e3c:	bl	1124c <__fprintf_chk@plt>
   12e40:	mov	r6, r4
   12e44:	str	r8, [sp, #36]	; 0x24
   12e48:	ldrb	ip, [r6], #1
   12e4c:	cmp	ip, #45	; 0x2d
   12e50:	movne	r6, r4
   12e54:	ldrb	r7, [r6]
   12e58:	sub	r0, r7, #48	; 0x30
   12e5c:	cmp	r0, #9
   12e60:	bhi	12f00 <__assert_fail@plt+0x1bdc>
   12e64:	str	sl, [sp, #40]	; 0x28
   12e68:	str	r5, [sp, #28]
   12e6c:	vmov.i32	d9, #0	; 0x00000000
   12e70:	mov	r5, #0
   12e74:	vmov.f64	d16, #36	; 0x41200000  10.0
   12e78:	mov	r1, #0
   12e7c:	vmov.i32	d17, #0	; 0x00000000
   12e80:	mov	sl, #0
   12e84:	vcmp.f64	d17, #0.0
   12e88:	mov	r2, #0
   12e8c:	mov	r3, r0
   12e90:	vmrs	APSR_nzcv, fpscr
   12e94:	movwne	r2, #1
   12e98:	cmp	r0, #0
   12e9c:	movwne	r3, #1
   12ea0:	orr	r2, r3, r2
   12ea4:	add	r1, r1, r2
   12ea8:	cmp	r1, #27
   12eac:	bhi	13430 <__assert_fail@plt+0x210c>
   12eb0:	ldrb	r7, [r6, #1]!
   12eb4:	vmov	s0, r0
   12eb8:	cmp	r1, #15
   12ebc:	vcvt.f64.s32	d18, s0
   12ec0:	movwhi	sl, #1
   12ec4:	vmla.f64	d18, d17, d16
   12ec8:	sub	r0, r7, #48	; 0x30
   12ecc:	cmp	r0, #10
   12ed0:	vmov.f64	d17, d18
   12ed4:	bcc	12e84 <__assert_fail@plt+0x1b60>
   12ed8:	vneg.f64	d16, d18
   12edc:	cmp	ip, #45	; 0x2d
   12ee0:	mov	r5, #0
   12ee4:	vseleq.f64	d9, d16, d18
   12ee8:	cmp	sl, #1
   12eec:	bhi	13400 <__assert_fail@plt+0x20dc>
   12ef0:	ldr	r5, [r9, #12]
   12ef4:	ldr	r9, [r9, #16]
   12ef8:	str	ip, [sp, #32]
   12efc:	b	12f7c <__assert_fail@plt+0x1c58>
   12f00:	ldr	r8, [r9, #12]
   12f04:	ldr	r9, [r9, #16]
   12f08:	mov	r0, r6
   12f0c:	str	ip, [sp, #32]
   12f10:	mov	r1, r8
   12f14:	mov	r2, r9
   12f18:	bl	112e8 <strncmp@plt>
   12f1c:	cmp	r0, #0
   12f20:	beq	12f58 <__assert_fail@plt+0x1c34>
   12f24:	vmov.i32	d9, #0	; 0x00000000
   12f28:	mov	r5, #0
   12f2c:	movw	r9, #53664	; 0xd1a0
   12f30:	movt	r9, #2
   12f34:	ldr	r8, [sp, #36]	; 0x24
   12f38:	movw	r1, #47423	; 0xb93f
   12f3c:	mov	sl, #3
   12f40:	movt	r1, #1
   12f44:	ldr	r0, [r9, #40]	; 0x28
   12f48:	str	r5, [sp, #40]	; 0x28
   12f4c:	cmp	r0, #3
   12f50:	bne	134ac <__assert_fail@plt+0x2188>
   12f54:	b	134e8 <__assert_fail@plt+0x21c4>
   12f58:	str	sl, [sp, #40]	; 0x28
   12f5c:	str	r5, [sp, #28]
   12f60:	add	r0, pc, #992	; 0x3e0
   12f64:	ldr	r1, [sp, #32]
   12f68:	mov	sl, #0
   12f6c:	mov	r5, r8
   12f70:	cmp	r1, #45	; 0x2d
   12f74:	addeq	r0, r0, #8
   12f78:	vldr	d9, [r0]
   12f7c:	mov	r0, r6
   12f80:	mov	r1, r5
   12f84:	mov	r2, r9
   12f88:	bl	112e8 <strncmp@plt>
   12f8c:	cmp	r0, #0
   12f90:	beq	130a4 <__assert_fail@plt+0x1d80>
   12f94:	movw	r9, #53664	; 0xd1a0
   12f98:	mov	r8, r6
   12f9c:	mov	r5, #0
   12fa0:	movt	r9, #2
   12fa4:	ldrb	r0, [r9, #7]
   12fa8:	cmp	r0, #1
   12fac:	bne	12fd8 <__assert_fail@plt+0x1cb4>
   12fb0:	movw	r0, #53640	; 0xd188
   12fb4:	movw	r2, #47228	; 0xb87c
   12fb8:	mov	r1, #1
   12fbc:	str	r5, [sp, #8]
   12fc0:	vstr	d9, [sp]
   12fc4:	movt	r0, #2
   12fc8:	movt	r2, #1
   12fcc:	ldr	r0, [r0]
   12fd0:	bl	1124c <__fprintf_chk@plt>
   12fd4:	ldrb	r7, [r8]
   12fd8:	cmp	r7, #0
   12fdc:	beq	13174 <__assert_fail@plt+0x1e50>
   12fe0:	bl	111e0 <__ctype_b_loc@plt>
   12fe4:	ldr	r0, [r0]
   12fe8:	ldrb	r1, [r0, r7, lsl #1]
   12fec:	tst	r1, #1
   12ff0:	beq	13004 <__assert_fail@plt+0x1ce0>
   12ff4:	ldrb	r7, [r8, #1]!
   12ff8:	ldrb	r1, [r0, r7, lsl #1]
   12ffc:	tst	r1, #1
   13000:	bne	12ff4 <__assert_fail@plt+0x1cd0>
   13004:	movw	r0, #46494	; 0xb59e
   13008:	mov	r1, r7
   1300c:	mov	r2, #9
   13010:	movt	r0, #1
   13014:	bl	11258 <memchr@plt>
   13018:	cmp	r0, #0
   1301c:	beq	131e8 <__assert_fail@plt+0x1ec4>
   13020:	ldr	r0, [sp, #40]	; 0x28
   13024:	cmp	r0, #0
   13028:	beq	131f0 <__assert_fail@plt+0x1ecc>
   1302c:	sub	r0, r7, #69	; 0x45
   13030:	cmp	r0, #21
   13034:	bhi	13260 <__assert_fail@plt+0x1f3c>
   13038:	add	r1, pc, #4
   1303c:	mov	r7, #1
   13040:	ldr	pc, [r1, r0, lsl #2]
   13044:	muleq	r1, ip, r0
   13048:	andeq	r3, r1, r0, ror #4
   1304c:	andeq	r3, r1, r0, ror r2
   13050:	andeq	r3, r1, r0, ror #4
   13054:	andeq	r3, r1, r0, ror #4
   13058:	andeq	r3, r1, r0, ror #4
   1305c:	muleq	r1, r4, r2
   13060:	andeq	r3, r1, r0, ror #4
   13064:	andeq	r3, r1, r8, lsl #5
   13068:	andeq	r3, r1, r0, ror #4
   1306c:	andeq	r3, r1, r0, ror #4
   13070:	muleq	r1, r0, r2
   13074:	andeq	r3, r1, r0, ror #4
   13078:	andeq	r3, r1, r0, ror #4
   1307c:	andeq	r3, r1, r0, ror #4
   13080:	andeq	r3, r1, r8, ror #4
   13084:	andeq	r3, r1, r0, ror #4
   13088:	andeq	r3, r1, r0, ror #4
   1308c:	andeq	r3, r1, r0, ror #4
   13090:	andeq	r3, r1, r0, ror #4
   13094:	andeq	r3, r1, r8, ror r2
   13098:	andeq	r3, r1, r0, lsl #5
   1309c:	mov	r7, #6
   130a0:	b	13294 <__assert_fail@plt+0x1f70>
   130a4:	ldrb	r0, [r6, r9]!
   130a8:	mov	r1, r5
   130ac:	add	lr, r6, #1
   130b0:	cmp	r0, #45	; 0x2d
   130b4:	mov	r8, r6
   130b8:	str	r0, [sp, #24]
   130bc:	moveq	r8, lr
   130c0:	ldrb	r7, [r8]
   130c4:	sub	r5, r7, #48	; 0x30
   130c8:	cmp	r5, #9
   130cc:	bhi	13198 <__assert_fail@plt+0x1e74>
   130d0:	ldr	ip, [sp, #32]
   130d4:	movw	r9, #53664	; 0xd1a0
   130d8:	vmov.i32	d17, #0	; 0x00000000
   130dc:	vmov.f64	d16, #36	; 0x41200000  10.0
   130e0:	mov	r2, #0
   130e4:	mov	r0, #0
   130e8:	movt	r9, #2
   130ec:	vcmp.f64	d17, #0.0
   130f0:	mov	r3, #0
   130f4:	mov	r1, r5
   130f8:	vmrs	APSR_nzcv, fpscr
   130fc:	movwne	r3, #1
   13100:	cmp	r5, #0
   13104:	movwne	r1, #1
   13108:	orr	r1, r1, r3
   1310c:	add	r2, r2, r1
   13110:	cmp	r2, #27
   13114:	bhi	131f8 <__assert_fail@plt+0x1ed4>
   13118:	ldrb	r7, [r8, #1]!
   1311c:	vmov	s0, r5
   13120:	cmp	r2, #15
   13124:	vcvt.f64.s32	d18, s0
   13128:	movwhi	r0, #1
   1312c:	vmla.f64	d18, d17, d16
   13130:	sub	r5, r7, #48	; 0x30
   13134:	cmp	r5, #10
   13138:	vmov.f64	d17, d18
   1313c:	bcc	130ec <__assert_fail@plt+0x1dc8>
   13140:	mov	r5, #0
   13144:	cmp	r0, #1
   13148:	bls	1320c <__assert_fail@plt+0x1ee8>
   1314c:	mov	sl, r0
   13150:	cmp	sl, #6
   13154:	bls	13408 <__assert_fail@plt+0x20e4>
   13158:	ldr	r8, [sp, #36]	; 0x24
   1315c:	mov	r1, #0
   13160:	ldr	r0, [r9, #40]	; 0x28
   13164:	str	r5, [sp, #40]	; 0x28
   13168:	cmp	r0, #3
   1316c:	bne	134ac <__assert_fail@plt+0x2188>
   13170:	b	134e8 <__assert_fail@plt+0x21c4>
   13174:	mov	r7, #0
   13178:	ldr	r0, [sp, #40]	; 0x28
   1317c:	cmp	r0, #4
   13180:	bne	1330c <__assert_fail@plt+0x1fe8>
   13184:	ldrb	r0, [r8]
   13188:	cmp	r0, #105	; 0x69
   1318c:	bne	13204 <__assert_fail@plt+0x1ee0>
   13190:	add	r6, r8, #1
   13194:	b	13310 <__assert_fail@plt+0x1fec>
   13198:	mov	r0, r8
   1319c:	mov	r2, r9
   131a0:	str	lr, [sp, #20]
   131a4:	bl	112e8 <strncmp@plt>
   131a8:	mov	r5, #0
   131ac:	cmp	r0, #0
   131b0:	bne	12f2c <__assert_fail@plt+0x1c08>
   131b4:	add	r0, pc, #396	; 0x18c
   131b8:	ldr	r1, [sp, #24]
   131bc:	ldr	ip, [sp, #32]
   131c0:	ldr	lr, [sp, #20]
   131c4:	movw	r9, #53664	; 0xd1a0
   131c8:	movt	r9, #2
   131cc:	cmp	r1, #45	; 0x2d
   131d0:	addeq	r0, r0, #8
   131d4:	vldr	d16, [r0]
   131d8:	mov	r5, #0
   131dc:	cmp	r1, #45	; 0x2d
   131e0:	beq	12f34 <__assert_fail@plt+0x1c10>
   131e4:	b	1322c <__assert_fail@plt+0x1f08>
   131e8:	ldr	r8, [sp, #36]	; 0x24
   131ec:	b	13450 <__assert_fail@plt+0x212c>
   131f0:	ldr	r8, [sp, #36]	; 0x24
   131f4:	b	13470 <__assert_fail@plt+0x214c>
   131f8:	ldr	r8, [sp, #36]	; 0x24
   131fc:	mov	r5, #0
   13200:	b	13430 <__assert_fail@plt+0x210c>
   13204:	ldr	r8, [sp, #36]	; 0x24
   13208:	b	13490 <__assert_fail@plt+0x216c>
   1320c:	ldr	r1, [sp, #24]
   13210:	moveq	sl, r0
   13214:	vneg.f64	d16, d18
   13218:	cmp	r1, #45	; 0x2d
   1321c:	vseleq.f64	d16, d16, d18
   13220:	mov	r5, #0
   13224:	cmp	r1, #45	; 0x2d
   13228:	beq	12f34 <__assert_fail@plt+0x1c10>
   1322c:	subs	r5, r8, r6
   13230:	beq	13258 <__assert_fail@plt+0x1f34>
   13234:	cmp	r5, #1
   13238:	beq	13db4 <__assert_fail@plt+0x2a90>
   1323c:	vmov.f64	d18, #36	; 0x41200000  10.0
   13240:	sub	r0, lr, r8
   13244:	vmov.f64	d17, d18
   13248:	adds	r0, r0, #1
   1324c:	vmul.f64	d17, d17, d18
   13250:	bne	13248 <__assert_fail@plt+0x1f24>
   13254:	b	13db8 <__assert_fail@plt+0x2a94>
   13258:	vmov.f64	d17, #112	; 0x3f800000  1.0
   1325c:	b	13db8 <__assert_fail@plt+0x2a94>
   13260:	mov	r7, #0
   13264:	b	13294 <__assert_fail@plt+0x1f70>
   13268:	mov	r7, #4
   1326c:	b	13294 <__assert_fail@plt+0x1f70>
   13270:	mov	r7, #3
   13274:	b	13294 <__assert_fail@plt+0x1f70>
   13278:	mov	r7, #8
   1327c:	b	13294 <__assert_fail@plt+0x1f70>
   13280:	mov	r7, #7
   13284:	b	13294 <__assert_fail@plt+0x1f70>
   13288:	mov	r7, #2
   1328c:	b	13294 <__assert_fail@plt+0x1f70>
   13290:	mov	r7, #5
   13294:	ldr	r0, [sp, #40]	; 0x28
   13298:	add	r6, r8, #1
   1329c:	mov	r5, #0
   132a0:	cmp	r0, #1
   132a4:	bne	132fc <__assert_fail@plt+0x1fd8>
   132a8:	ldrb	r0, [r6]
   132ac:	cmp	r0, #105	; 0x69
   132b0:	bne	132f4 <__assert_fail@plt+0x1fd0>
   132b4:	ldrb	r0, [r9, #7]
   132b8:	mov	r1, #1024	; 0x400
   132bc:	add	r6, r8, #2
   132c0:	str	r1, [sp, #28]
   132c4:	cmp	r0, #1
   132c8:	bne	132f4 <__assert_fail@plt+0x1fd0>
   132cc:	movw	r0, #53640	; 0xd188
   132d0:	movw	r2, #47280	; 0xb8b0
   132d4:	mov	r1, #1024	; 0x400
   132d8:	mov	r3, #1024	; 0x400
   132dc:	movt	r0, #2
   132e0:	str	r1, [sp, #28]
   132e4:	movt	r2, #1
   132e8:	mov	r1, #1
   132ec:	ldr	r0, [r0]
   132f0:	bl	1124c <__fprintf_chk@plt>
   132f4:	mov	r5, #0
   132f8:	b	13310 <__assert_fail@plt+0x1fec>
   132fc:	mov	r8, r6
   13300:	ldr	r0, [sp, #40]	; 0x28
   13304:	cmp	r0, #4
   13308:	beq	13184 <__assert_fail@plt+0x1e60>
   1330c:	mov	r6, r8
   13310:	ldr	r0, [sp, #28]
   13314:	cmp	r7, #0
   13318:	vmov	s0, r0
   1331c:	vcvt.f64.s32	d16, s0
   13320:	ldr	r8, [sp, #36]	; 0x24
   13324:	beq	13358 <__assert_fail@plt+0x2034>
   13328:	cmp	r7, #1
   1332c:	beq	13380 <__assert_fail@plt+0x205c>
   13330:	rsb	r0, r7, #1
   13334:	vmov.f64	d8, d16
   13338:	adds	r0, r0, #1
   1333c:	vmul.f64	d8, d8, d16
   13340:	bne	13338 <__assert_fail@plt+0x2014>
   13344:	b	13384 <__assert_fail@plt+0x2060>
	...
   13354:	andhi	r0, r0, r0
   13358:	vmov.f64	d8, #112	; 0x3f800000  1.0
   1335c:	ldrb	r0, [r9, #7]
   13360:	cmp	r0, #0
   13364:	bne	13390 <__assert_fail@plt+0x206c>
   13368:	vmul.f64	d9, d9, d8
   1336c:	b	133f8 <__assert_fail@plt+0x20d4>
   13370:			; <UNDEFINED> instruction: 0xffffffff
   13374:	svcvc	0x00efffff
   13378:			; <UNDEFINED> instruction: 0xffffffff
   1337c:			; <UNDEFINED> instruction: 0xffefffff
   13380:	vmov.f64	d8, d16
   13384:	ldrb	r0, [r9, #7]
   13388:	cmp	r0, #0
   1338c:	beq	13368 <__assert_fail@plt+0x2044>
   13390:	movw	r0, #53640	; 0xd188
   13394:	ldr	r3, [sp, #28]
   13398:	movw	r2, #47329	; 0xb8e1
   1339c:	mov	r1, #1
   133a0:	vstr	d8, [sp, #8]
   133a4:	str	r7, [sp]
   133a8:	movt	r0, #2
   133ac:	movt	r2, #1
   133b0:	ldr	r0, [r0]
   133b4:	bl	1124c <__fprintf_chk@plt>
   133b8:	ldrb	r0, [r9, #7]
   133bc:	vmul.f64	d9, d9, d8
   133c0:	cmp	r0, #1
   133c4:	bne	133f8 <__assert_fail@plt+0x20d4>
   133c8:	movw	r0, #53640	; 0xd188
   133cc:	movw	r2, #47357	; 0xb8fd
   133d0:	mov	r1, #1
   133d4:	vstr	d9, [sp]
   133d8:	vstr	d9, [sp, #8]
   133dc:	movt	r0, #2
   133e0:	movt	r2, #1
   133e4:	ldr	r0, [r0]
   133e8:	bl	1124c <__fprintf_chk@plt>
   133ec:	cmp	sl, #2
   133f0:	bcs	13400 <__assert_fail@plt+0x20dc>
   133f4:	b	137b8 <__assert_fail@plt+0x2494>
   133f8:	cmp	sl, #2
   133fc:	bcc	137b8 <__assert_fail@plt+0x2494>
   13400:	cmp	sl, #6
   13404:	bhi	13158 <__assert_fail@plt+0x1e34>
   13408:	add	r0, pc, #4
   1340c:	ldr	r8, [sp, #36]	; 0x24
   13410:	ldr	pc, [r0, sl, lsl #2]
   13414:	ldrdeq	r3, [r1], -r8
   13418:	ldrdeq	r3, [r1], -r8
   1341c:	andeq	r3, r1, r0, lsr r4
   13420:	andeq	r2, r1, r8, lsr pc
   13424:	andeq	r3, r1, r0, ror r4
   13428:	andeq	r3, r1, r0, asr r4
   1342c:	muleq	r1, r0, r4
   13430:	movw	r1, #47387	; 0xb91b
   13434:	mov	sl, #2
   13438:	movt	r1, #1
   1343c:	ldr	r0, [r9, #40]	; 0x28
   13440:	str	r5, [sp, #40]	; 0x28
   13444:	cmp	r0, #3
   13448:	bne	134ac <__assert_fail@plt+0x2188>
   1344c:	b	134e8 <__assert_fail@plt+0x21c4>
   13450:	movw	r1, #47496	; 0xb988
   13454:	mov	sl, #5
   13458:	movt	r1, #1
   1345c:	ldr	r0, [r9, #40]	; 0x28
   13460:	str	r5, [sp, #40]	; 0x28
   13464:	cmp	r0, #3
   13468:	bne	134ac <__assert_fail@plt+0x2188>
   1346c:	b	134e8 <__assert_fail@plt+0x21c4>
   13470:	movw	r1, #47442	; 0xb952
   13474:	mov	sl, #4
   13478:	movt	r1, #1
   1347c:	ldr	r0, [r9, #40]	; 0x28
   13480:	str	r5, [sp, #40]	; 0x28
   13484:	cmp	r0, #3
   13488:	bne	134ac <__assert_fail@plt+0x2188>
   1348c:	b	134e8 <__assert_fail@plt+0x21c4>
   13490:	movw	r1, #47524	; 0xb9a4
   13494:	mov	sl, #6
   13498:	movt	r1, #1
   1349c:	ldr	r0, [r9, #40]	; 0x28
   134a0:	str	r5, [sp, #40]	; 0x28
   134a4:	cmp	r0, #3
   134a8:	beq	134e8 <__assert_fail@plt+0x21c4>
   134ac:	ldrb	r7, [r9, #8]
   134b0:	mov	r0, #0
   134b4:	mov	r2, #5
   134b8:	bl	11114 <dcgettext@plt>
   134bc:	mov	r5, r0
   134c0:	mov	r0, r4
   134c4:	mov	r6, #2
   134c8:	cmp	r7, #0
   134cc:	movwne	r6, #0
   134d0:	bl	17194 <__assert_fail@plt+0x5e70>
   134d4:	mov	r3, r0
   134d8:	mov	r0, r6
   134dc:	mov	r1, #0
   134e0:	mov	r2, r5
   134e4:	bl	11198 <error@plt>
   134e8:	movw	r7, #53512	; 0xd108
   134ec:	movt	r7, #2
   134f0:	add	r5, r7, #16
   134f4:	ldm	r5, {r0, r1, r4, r5}
   134f8:	eor	r2, r0, #1
   134fc:	orrs	r2, r2, r1
   13500:	eoreq	r2, r4, #1
   13504:	orrseq	r2, r2, r5
   13508:	beq	1352c <__assert_fail@plt+0x2208>
   1350c:	bl	19e84 <__assert_fail@plt+0x8b60>
   13510:	vmov	d8, r0, r1
   13514:	mov	r0, r4
   13518:	mov	r1, r5
   1351c:	bl	19e84 <__assert_fail@plt+0x8b60>
   13520:	vmov	d16, r0, r1
   13524:	vmul.f64	d17, d9, d8
   13528:	vdiv.f64	d9, d17, d16
   1352c:	ldr	r5, [sp, #40]	; 0x28
   13530:	cmp	sl, #1
   13534:	bhi	13880 <__assert_fail@plt+0x255c>
   13538:	vldr	d16, [pc, #-464]	; 13370 <__assert_fail@plt+0x204c>
   1353c:	vldr	d17, [pc, #-460]	; 13378 <__assert_fail@plt+0x2054>
   13540:	mov	r1, #0
   13544:	mov	r2, #0
   13548:	mov	r3, r8
   1354c:	mov	r0, #0
   13550:	vcmpe.f64	d9, d16
   13554:	vmrs	APSR_nzcv, fpscr
   13558:	vcmpe.f64	d9, d17
   1355c:	movwls	r1, #1
   13560:	vmrs	APSR_nzcv, fpscr
   13564:	movwge	r2, #1
   13568:	and	r8, r2, r1
   1356c:	ldr	r1, [r7, #8]
   13570:	cmn	r1, #1
   13574:	movne	r5, r1
   13578:	cmp	r8, #1
   1357c:	bne	135d4 <__assert_fail@plt+0x22b0>
   13580:	vcmpe.f64	d9, #0.0
   13584:	vneg.f64	d17, d9
   13588:	vmov.f64	d18, d9
   1358c:	vmov.f64	d16, #36	; 0x41200000  10.0
   13590:	vmrs	APSR_nzcv, fpscr
   13594:	vmovmi.f64	d18, d17
   13598:	vcmpe.f64	d18, d16
   1359c:	vmrs	APSR_nzcv, fpscr
   135a0:	blt	135d4 <__assert_fail@plt+0x22b0>
   135a4:	mov	r0, #0
   135a8:	vmov.f64	d17, d9
   135ac:	vdiv.f64	d17, d17, d16
   135b0:	add	r0, r0, #1
   135b4:	vcmpe.f64	d17, #0.0
   135b8:	vneg.f64	d18, d17
   135bc:	vmov.f64	d19, d17
   135c0:	vmrs	APSR_nzcv, fpscr
   135c4:	vmovmi.f64	d19, d18
   135c8:	vcmpe.f64	d19, d16
   135cc:	vmrs	APSR_nzcv, fpscr
   135d0:	bge	135ac <__assert_fail@plt+0x2288>
   135d4:	ldr	sl, [r9, #24]
   135d8:	cmp	sl, #0
   135dc:	bne	13640 <__assert_fail@plt+0x231c>
   135e0:	add	r1, r0, r5
   135e4:	cmp	r1, #16
   135e8:	bcc	13640 <__assert_fail@plt+0x231c>
   135ec:	ldr	r0, [r9, #40]	; 0x28
   135f0:	mov	r8, r3
   135f4:	cmp	r0, #3
   135f8:	beq	13880 <__assert_fail@plt+0x255c>
   135fc:	ldrb	r0, [r9, #8]
   13600:	mov	r4, #2
   13604:	cmp	r0, #0
   13608:	movwne	r4, #0
   1360c:	cmp	r5, #0
   13610:	beq	13858 <__assert_fail@plt+0x2534>
   13614:	movw	r1, #47571	; 0xb9d3
   13618:	mov	r0, #0
   1361c:	mov	r2, #5
   13620:	mov	r6, r5
   13624:	mov	r5, #0
   13628:	movt	r1, #1
   1362c:	bl	11114 <dcgettext@plt>
   13630:	mov	r2, r0
   13634:	str	r6, [sp, #8]
   13638:	str	r5, [sp, #12]
   1363c:	b	13870 <__assert_fail@plt+0x254c>
   13640:	cmp	r0, #27
   13644:	bcc	13688 <__assert_fail@plt+0x2364>
   13648:	ldr	r0, [r9, #40]	; 0x28
   1364c:	mov	r8, r3
   13650:	cmp	r0, #3
   13654:	beq	13880 <__assert_fail@plt+0x255c>
   13658:	ldrb	r4, [r9, #8]
   1365c:	movw	r1, #47704	; 0xba58
   13660:	mov	r0, #0
   13664:	mov	r2, #5
   13668:	movt	r1, #1
   1366c:	bl	11114 <dcgettext@plt>
   13670:	mov	r2, r0
   13674:	mov	r0, #2
   13678:	cmp	r4, #0
   1367c:	vstr	d9, [sp]
   13680:	movwne	r0, #0
   13684:	b	13878 <__assert_fail@plt+0x2554>
   13688:	ldr	r0, [r7]
   1368c:	ldrb	r4, [r9]
   13690:	mov	r6, r9
   13694:	sub	r1, fp, #132	; 0x84
   13698:	str	r0, [sp, #40]	; 0x28
   1369c:	mov	r0, #37	; 0x25
   136a0:	cmp	r4, #1
   136a4:	strb	r0, [fp, #-132]	; 0xffffff7c
   136a8:	bne	137a4 <__assert_fail@plt+0x2480>
   136ac:	mov	r0, #39	; 0x27
   136b0:	add	r9, r1, #2
   136b4:	strb	r0, [fp, #-131]	; 0xffffff7d
   136b8:	ldr	r0, [r6, #48]	; 0x30
   136bc:	cmp	r0, #0
   136c0:	beq	136ec <__assert_fail@plt+0x23c8>
   136c4:	movw	r1, #47841	; 0xbae1
   136c8:	str	r0, [sp, #4]
   136cc:	mov	r0, r9
   136d0:	mov	r2, #1
   136d4:	mvn	r3, #0
   136d8:	movt	r1, #1
   136dc:	str	r1, [sp]
   136e0:	mov	r1, #62	; 0x3e
   136e4:	bl	11300 <__snprintf_chk@plt>
   136e8:	add	r9, r9, r0
   136ec:	ldrb	r0, [r6, #7]
   136f0:	cmp	r0, #1
   136f4:	bne	13714 <__assert_fail@plt+0x23f0>
   136f8:	movw	r0, #53640	; 0xd188
   136fc:	movw	r2, #47846	; 0xbae6
   13700:	mov	r1, #1
   13704:	movt	r0, #2
   13708:	movt	r2, #1
   1370c:	ldr	r0, [r0]
   13710:	bl	1124c <__fprintf_chk@plt>
   13714:	cmp	sl, #0
   13718:	beq	13810 <__assert_fail@plt+0x24ec>
   1371c:	sub	r1, sl, #3
   13720:	mov	r0, #1000	; 0x3e8
   13724:	mov	r5, #0
   13728:	cmp	r1, #2
   1372c:	movwcc	r0, #1024	; 0x400
   13730:	cmp	r8, #0
   13734:	vmov	s0, r0
   13738:	vcvt.f64.s32	d10, s0
   1373c:	beq	138ac <__assert_fail@plt+0x2588>
   13740:	vmov	s0, r0
   13744:	vcmpe.f64	d9, #0.0
   13748:	vneg.f64	d17, d9
   1374c:	vmov.f64	d18, d9
   13750:	vmov.f64	d8, d9
   13754:	vcvt.f64.u32	d16, s0
   13758:	vmrs	APSR_nzcv, fpscr
   1375c:	ldr	r4, [sp, #40]	; 0x28
   13760:	vmovmi.f64	d18, d17
   13764:	vcmpe.f64	d18, d16
   13768:	vmrs	APSR_nzcv, fpscr
   1376c:	blt	138b4 <__assert_fail@plt+0x2590>
   13770:	mov	r5, #0
   13774:	vmov.f64	d8, d9
   13778:	vdiv.f64	d8, d8, d16
   1377c:	add	r5, r5, #1
   13780:	vcmpe.f64	d8, #0.0
   13784:	vneg.f64	d17, d8
   13788:	vmov.f64	d18, d8
   1378c:	vmrs	APSR_nzcv, fpscr
   13790:	vmovmi.f64	d18, d17
   13794:	vcmpe.f64	d18, d16
   13798:	vmrs	APSR_nzcv, fpscr
   1379c:	bge	13778 <__assert_fail@plt+0x2454>
   137a0:	b	138b4 <__assert_fail@plt+0x2590>
   137a4:	add	r9, r1, #1
   137a8:	ldr	r0, [r6, #48]	; 0x30
   137ac:	cmp	r0, #0
   137b0:	bne	136c4 <__assert_fail@plt+0x23a0>
   137b4:	b	136ec <__assert_fail@plt+0x23c8>
   137b8:	cmp	r6, #0
   137bc:	str	r5, [sp, #40]	; 0x28
   137c0:	ldrbne	r0, [r6]
   137c4:	cmpne	r0, #0
   137c8:	bne	13b3c <__assert_fail@plt+0x2818>
   137cc:	cmp	sl, #1
   137d0:	bne	13b28 <__assert_fail@plt+0x2804>
   137d4:	ldrb	r0, [r9, #6]
   137d8:	mov	sl, #1
   137dc:	cmp	r0, #1
   137e0:	bne	134e8 <__assert_fail@plt+0x21c4>
   137e4:	movw	r1, #47057	; 0xb7d1
   137e8:	mov	r0, #0
   137ec:	mov	r2, #5
   137f0:	movt	r1, #1
   137f4:	bl	11114 <dcgettext@plt>
   137f8:	mov	r5, r0
   137fc:	mov	r0, r4
   13800:	bl	17194 <__assert_fail@plt+0x5e70>
   13804:	mov	r3, r0
   13808:	mov	r0, #0
   1380c:	b	134dc <__assert_fail@plt+0x21b8>
   13810:	cmp	r5, #0
   13814:	beq	13b30 <__assert_fail@plt+0x280c>
   13818:	cmp	r5, #1
   1381c:	beq	13ba8 <__assert_fail@plt+0x2884>
   13820:	vmov.f64	d17, #36	; 0x41200000  10.0
   13824:	rsb	r0, r5, #1
   13828:	vmov.f64	d16, d17
   1382c:	adds	r0, r0, #1
   13830:	vmul.f64	d16, d16, d17
   13834:	bne	1382c <__assert_fail@plt+0x2508>
   13838:	vmov.f64	d17, #36	; 0x41200000  10.0
   1383c:	rsb	r0, r5, #1
   13840:	vmov.f64	d8, d17
   13844:	adds	r0, r0, #1
   13848:	vmul.f64	d8, d8, d17
   1384c:	bne	13844 <__assert_fail@plt+0x2520>
   13850:	vmul.f64	d0, d9, d16
   13854:	b	13bb0 <__assert_fail@plt+0x288c>
   13858:	movw	r1, #47645	; 0xba1d
   1385c:	mov	r0, #0
   13860:	mov	r2, #5
   13864:	movt	r1, #1
   13868:	bl	11114 <dcgettext@plt>
   1386c:	mov	r2, r0
   13870:	mov	r0, r4
   13874:	vstr	d9, [sp]
   13878:	mov	r1, #0
   1387c:	bl	11198 <error@plt>
   13880:	movw	r0, #53652	; 0xd194
   13884:	movt	r0, #2
   13888:	ldr	r1, [r0]
   1388c:	mov	r0, r8
   13890:	bl	1106c <fputs_unlocked@plt>
   13894:	mov	r4, #0
   13898:	mov	r0, r4
   1389c:	sub	sp, fp, #64	; 0x40
   138a0:	vpop	{d8-d11}
   138a4:	add	sp, sp, #4
   138a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ac:	ldr	r4, [sp, #40]	; 0x28
   138b0:	vmov.f64	d8, d9
   138b4:	ldrb	r0, [r6, #7]
   138b8:	cmp	r0, #1
   138bc:	bne	138e8 <__assert_fail@plt+0x25c4>
   138c0:	movw	r0, #53640	; 0xd188
   138c4:	movw	r2, #47999	; 0xbb7f
   138c8:	mov	r1, #1
   138cc:	str	r5, [sp, #16]
   138d0:	vstr	d8, [sp]
   138d4:	vstr	d10, [sp, #8]
   138d8:	movt	r0, #2
   138dc:	movt	r2, #1
   138e0:	ldr	r0, [r0]
   138e4:	bl	1124c <__fprintf_chk@plt>
   138e8:	ldr	r8, [r7, #8]
   138ec:	cmn	r8, #1
   138f0:	beq	13968 <__assert_fail@plt+0x2644>
   138f4:	add	r0, r5, r5, lsl #1
   138f8:	mov	r1, r8
   138fc:	cmp	r0, r8
   13900:	movcc	r1, r0
   13904:	cmp	r1, #0
   13908:	beq	13998 <__assert_fail@plt+0x2674>
   1390c:	cmp	r1, #1
   13910:	beq	1398c <__assert_fail@plt+0x2668>
   13914:	mvn	r0, r0
   13918:	mvn	r1, r8
   1391c:	vmov.f64	d17, #36	; 0x41200000  10.0
   13920:	cmp	r1, r0
   13924:	mov	r2, r0
   13928:	vmov.f64	d16, d17
   1392c:	movhi	r2, r1
   13930:	add	r2, r2, #2
   13934:	adds	r2, r2, #1
   13938:	vmul.f64	d16, d16, d17
   1393c:	bne	13934 <__assert_fail@plt+0x2610>
   13940:	cmp	r1, r0
   13944:	vmov.f64	d17, #36	; 0x41200000  10.0
   13948:	movhi	r0, r1
   1394c:	vmov.f64	d11, d17
   13950:	add	r0, r0, #2
   13954:	adds	r0, r0, #1
   13958:	vmul.f64	d11, d11, d17
   1395c:	bne	13954 <__assert_fail@plt+0x2630>
   13960:	vmul.f64	d8, d8, d16
   13964:	b	1399c <__assert_fail@plt+0x2678>
   13968:	vcmpe.f64	d8, #0.0
   1396c:	vneg.f64	d16, d8
   13970:	vmov.f64	d18, d8
   13974:	vmov.f64	d17, #36	; 0x41200000  10.0
   13978:	vmrs	APSR_nzcv, fpscr
   1397c:	vmovmi.f64	d18, d16
   13980:	vcmpe.f64	d18, d17
   13984:	vmrs	APSR_nzcv, fpscr
   13988:	bpl	13998 <__assert_fail@plt+0x2674>
   1398c:	vmov.f64	d11, #36	; 0x41200000  10.0
   13990:	vmul.f64	d8, d8, d11
   13994:	b	1399c <__assert_fail@plt+0x2678>
   13998:	vmov.f64	d11, #112	; 0x3f800000  1.0
   1399c:	vmov.f64	d0, d8
   139a0:	mov	r0, r4
   139a4:	bl	13e08 <__assert_fail@plt+0x2ae4>
   139a8:	vdiv.f64	d8, d0, d11
   139ac:	mov	r4, #0
   139b0:	vcmpe.f64	d8, #0.0
   139b4:	vneg.f64	d16, d8
   139b8:	vmov.f64	d17, d8
   139bc:	vmrs	APSR_nzcv, fpscr
   139c0:	vmovmi.f64	d17, d16
   139c4:	vcmpe.f64	d17, d10
   139c8:	vmrs	APSR_nzcv, fpscr
   139cc:	vdivge.f64	d8, d8, d10
   139d0:	addge	r5, r5, #1
   139d4:	vcmp.f64	d8, #0.0
   139d8:	vmrs	APSR_nzcv, fpscr
   139dc:	beq	13a10 <__assert_fail@plt+0x26ec>
   139e0:	vcmpe.f64	d8, #0.0
   139e4:	vneg.f64	d16, d8
   139e8:	vmov.f64	d18, d8
   139ec:	vmov.f64	d17, #36	; 0x41200000  10.0
   139f0:	vmrs	APSR_nzcv, fpscr
   139f4:	vmovmi.f64	d18, d16
   139f8:	vcmpe.f64	d18, d17
   139fc:	vmrs	APSR_nzcv, fpscr
   13a00:	bpl	13a10 <__assert_fail@plt+0x26ec>
   13a04:	cmp	r5, #0
   13a08:	mov	r4, r5
   13a0c:	movwne	r4, #1
   13a10:	ldrb	r0, [r6, #7]
   13a14:	cmp	r0, #1
   13a18:	bne	13a48 <__assert_fail@plt+0x2724>
   13a1c:	movw	r0, #53640	; 0xd188
   13a20:	movw	r2, #48034	; 0xbba2
   13a24:	mov	r1, #1
   13a28:	str	r5, [sp, #16]
   13a2c:	vstr	d8, [sp]
   13a30:	vstr	d10, [sp, #8]
   13a34:	movt	r0, #2
   13a38:	movt	r2, #1
   13a3c:	ldr	r0, [r0]
   13a40:	bl	1124c <__fprintf_chk@plt>
   13a44:	ldr	r8, [r7, #8]
   13a48:	mov	r0, #0
   13a4c:	cmn	r8, #1
   13a50:	strb	r0, [r9, #6]
   13a54:	movw	r0, #29477	; 0x7325
   13a58:	movne	r4, r8
   13a5c:	cmp	r5, #8
   13a60:	strh	r0, [r9, #4]
   13a64:	movw	r0, #10798	; 0x2a2e
   13a68:	movt	r0, #26188	; 0x664c
   13a6c:	str	r0, [r9]
   13a70:	bhi	13a84 <__assert_fail@plt+0x2760>
   13a74:	movw	r0, #48656	; 0xbe10
   13a78:	movt	r0, #1
   13a7c:	ldr	r0, [r0, r5, lsl #2]
   13a80:	b	13a8c <__assert_fail@plt+0x2768>
   13a84:	movw	r0, #48119	; 0xbbf7
   13a88:	movt	r0, #1
   13a8c:	sub	r1, fp, #132	; 0x84
   13a90:	str	r0, [sp, #16]
   13a94:	vstr	d8, [sp, #8]
   13a98:	add	r0, sp, #44	; 0x2c
   13a9c:	mov	r2, #1
   13aa0:	mov	r3, #128	; 0x80
   13aa4:	stm	sp, {r1, r4}
   13aa8:	mov	r1, #127	; 0x7f
   13aac:	bl	11300 <__snprintf_chk@plt>
   13ab0:	cmp	r0, #127	; 0x7f
   13ab4:	bcs	13ddc <__assert_fail@plt+0x2ab8>
   13ab8:	cmp	sl, #4
   13abc:	bne	13ae0 <__assert_fail@plt+0x27bc>
   13ac0:	cmp	r5, #0
   13ac4:	beq	13ae0 <__assert_fail@plt+0x27bc>
   13ac8:	movw	r1, #46492	; 0xb59c
   13acc:	rsb	r2, r0, #127	; 0x7f
   13ad0:	add	r0, sp, #44	; 0x2c
   13ad4:	mov	r3, #128	; 0x80
   13ad8:	movt	r1, #1
   13adc:	bl	11084 <__strncat_chk@plt>
   13ae0:	ldrb	r0, [r6, #7]
   13ae4:	cmp	r0, #1
   13ae8:	bne	13c38 <__assert_fail@plt+0x2914>
   13aec:	movw	r0, #53640	; 0xd188
   13af0:	movt	r0, #2
   13af4:	ldr	r4, [r0]
   13af8:	add	r0, sp, #44	; 0x2c
   13afc:	bl	17194 <__assert_fail@plt+0x5e70>
   13b00:	movw	r2, #48082	; 0xbbd2
   13b04:	mov	r3, r0
   13b08:	mov	r0, r4
   13b0c:	mov	r1, #1
   13b10:	movt	r2, #1
   13b14:	bl	1124c <__fprintf_chk@plt>
   13b18:	ldr	r4, [r6, #32]
   13b1c:	cmp	r4, #0
   13b20:	bne	13c44 <__assert_fail@plt+0x2920>
   13b24:	b	13c64 <__assert_fail@plt+0x2940>
   13b28:	mov	sl, #0
   13b2c:	b	134e8 <__assert_fail@plt+0x21c4>
   13b30:	vmov.f64	d8, #112	; 0x3f800000  1.0
   13b34:	vmov.f64	d0, d9
   13b38:	b	13bb0 <__assert_fail@plt+0x288c>
   13b3c:	ldr	r0, [r9, #40]	; 0x28
   13b40:	mov	sl, #5
   13b44:	cmp	r0, #3
   13b48:	beq	134e8 <__assert_fail@plt+0x21c4>
   13b4c:	ldrb	r7, [r9, #8]
   13b50:	movw	r1, #47103	; 0xb7ff
   13b54:	mov	r0, #0
   13b58:	mov	r2, #5
   13b5c:	mov	sl, #5
   13b60:	movt	r1, #1
   13b64:	bl	11114 <dcgettext@plt>
   13b68:	mov	r5, r0
   13b6c:	mov	r0, #0
   13b70:	mov	r1, r4
   13b74:	bl	17184 <__assert_fail@plt+0x5e60>
   13b78:	mov	r4, r0
   13b7c:	mov	r0, #1
   13b80:	mov	r1, r6
   13b84:	bl	17184 <__assert_fail@plt+0x5e60>
   13b88:	str	r0, [sp]
   13b8c:	mov	r0, #2
   13b90:	cmp	r7, #0
   13b94:	mov	r1, #0
   13b98:	mov	r2, r5
   13b9c:	mov	r3, r4
   13ba0:	movwne	r0, #0
   13ba4:	b	134e4 <__assert_fail@plt+0x21c0>
   13ba8:	vmov.f64	d8, #36	; 0x41200000  10.0
   13bac:	vmul.f64	d0, d9, d8
   13bb0:	ldr	r0, [sp, #40]	; 0x28
   13bb4:	bl	13e08 <__assert_fail@plt+0x2ae4>
   13bb8:	ldrb	r0, [r6, #7]
   13bbc:	vdiv.f64	d8, d0, d8
   13bc0:	cmp	r0, #1
   13bc4:	bne	13bfc <__assert_fail@plt+0x28d8>
   13bc8:	movw	r0, #53640	; 0xd188
   13bcc:	movw	r1, #47864	; 0xbaf8
   13bd0:	movw	r2, #47913	; 0xbb29
   13bd4:	cmp	r4, #0
   13bd8:	mov	r3, r5
   13bdc:	vstr	d8, [sp]
   13be0:	movt	r0, #2
   13be4:	movt	r1, #1
   13be8:	movt	r2, #1
   13bec:	ldr	r0, [r0]
   13bf0:	movne	r2, r1
   13bf4:	mov	r1, #1
   13bf8:	bl	1124c <__fprintf_chk@plt>
   13bfc:	mov	r0, #0
   13c00:	vstr	d8, [sp, #8]
   13c04:	mov	r1, #128	; 0x80
   13c08:	mov	r2, #1
   13c0c:	mov	r3, #128	; 0x80
   13c10:	strb	r0, [r9, #4]
   13c14:	movw	r0, #10798	; 0x2a2e
   13c18:	movt	r0, #26188	; 0x664c
   13c1c:	str	r0, [r9]
   13c20:	sub	r0, fp, #132	; 0x84
   13c24:	stm	sp, {r0, r5}
   13c28:	add	r0, sp, #44	; 0x2c
   13c2c:	bl	11300 <__snprintf_chk@plt>
   13c30:	cmp	r0, #128	; 0x80
   13c34:	bcs	13ddc <__assert_fail@plt+0x2ab8>
   13c38:	ldr	r4, [r6, #32]
   13c3c:	cmp	r4, #0
   13c40:	beq	13c64 <__assert_fail@plt+0x2940>
   13c44:	add	r5, sp, #44	; 0x2c
   13c48:	mov	r0, r5
   13c4c:	bl	111f8 <strlen@plt>
   13c50:	rsb	r2, r0, #127	; 0x7f
   13c54:	mov	r0, r5
   13c58:	mov	r1, r4
   13c5c:	mov	r3, #128	; 0x80
   13c60:	bl	11084 <__strncat_chk@plt>
   13c64:	ldrb	r0, [r6, #7]
   13c68:	cmp	r0, #1
   13c6c:	bne	13ca0 <__assert_fail@plt+0x297c>
   13c70:	movw	r0, #53640	; 0xd188
   13c74:	movt	r0, #2
   13c78:	ldr	r4, [r0]
   13c7c:	add	r0, sp, #44	; 0x2c
   13c80:	bl	17194 <__assert_fail@plt+0x5e70>
   13c84:	movw	r2, #47771	; 0xba9b
   13c88:	str	r0, [sp, #8]
   13c8c:	mov	r0, r4
   13c90:	mov	r1, #1
   13c94:	vstr	d9, [sp]
   13c98:	movt	r2, #1
   13c9c:	bl	1124c <__fprintf_chk@plt>
   13ca0:	ldr	r4, [r6, #28]
   13ca4:	cmp	r4, #0
   13ca8:	beq	13d2c <__assert_fail@plt+0x2a08>
   13cac:	add	r0, sp, #44	; 0x2c
   13cb0:	bl	111f8 <strlen@plt>
   13cb4:	cmp	r0, r4
   13cb8:	bcs	13d2c <__assert_fail@plt+0x2a08>
   13cbc:	ldrb	r0, [r6, #4]
   13cc0:	ldr	r2, [r6, #60]	; 0x3c
   13cc4:	ldr	r1, [r6, #64]	; 0x40
   13cc8:	mov	r3, #2
   13ccc:	str	r4, [fp, #-132]	; 0xffffff7c
   13cd0:	eor	r0, r0, #1
   13cd4:	stm	sp, {r0, r3}
   13cd8:	add	r0, sp, #44	; 0x2c
   13cdc:	sub	r3, fp, #132	; 0x84
   13ce0:	bl	14d9c <__assert_fail@plt+0x3a78>
   13ce4:	ldrb	r0, [r6, #7]
   13ce8:	cmp	r0, #1
   13cec:	bne	13d68 <__assert_fail@plt+0x2a44>
   13cf0:	movw	r0, #53640	; 0xd188
   13cf4:	movt	r0, #2
   13cf8:	ldr	r4, [r0]
   13cfc:	ldr	r0, [r6, #64]	; 0x40
   13d00:	bl	17194 <__assert_fail@plt+0x5e70>
   13d04:	movw	r2, #47820	; 0xbacc
   13d08:	mov	r3, r0
   13d0c:	mov	r0, r4
   13d10:	mov	r1, #1
   13d14:	movt	r2, #1
   13d18:	bl	1124c <__fprintf_chk@plt>
   13d1c:	ldr	r0, [r6, #52]	; 0x34
   13d20:	cmp	r0, #0
   13d24:	bne	13d74 <__assert_fail@plt+0x2a50>
   13d28:	b	13d84 <__assert_fail@plt+0x2a60>
   13d2c:	add	r0, sp, #44	; 0x2c
   13d30:	bl	111f8 <strlen@plt>
   13d34:	ldr	r1, [r6, #60]	; 0x3c
   13d38:	add	r2, r0, #1
   13d3c:	cmp	r1, r2
   13d40:	bls	13d4c <__assert_fail@plt+0x2a28>
   13d44:	ldr	r0, [r6, #64]	; 0x40
   13d48:	b	13d60 <__assert_fail@plt+0x2a3c>
   13d4c:	add	r1, r0, #2
   13d50:	str	r1, [r6, #60]	; 0x3c
   13d54:	ldr	r0, [r6, #64]	; 0x40
   13d58:	bl	178b4 <__assert_fail@plt+0x6590>
   13d5c:	str	r0, [r6, #64]	; 0x40
   13d60:	add	r1, sp, #44	; 0x2c
   13d64:	bl	11168 <strcpy@plt>
   13d68:	ldr	r0, [r6, #52]	; 0x34
   13d6c:	cmp	r0, #0
   13d70:	beq	13d84 <__assert_fail@plt+0x2a60>
   13d74:	movw	r1, #53652	; 0xd194
   13d78:	movt	r1, #2
   13d7c:	ldr	r1, [r1]
   13d80:	bl	1106c <fputs_unlocked@plt>
   13d84:	movw	r5, #53652	; 0xd194
   13d88:	ldr	r0, [r6, #64]	; 0x40
   13d8c:	movt	r5, #2
   13d90:	ldr	r1, [r5]
   13d94:	bl	1106c <fputs_unlocked@plt>
   13d98:	ldr	r0, [r6, #56]	; 0x38
   13d9c:	mov	r4, #1
   13da0:	cmp	r0, #0
   13da4:	beq	13898 <__assert_fail@plt+0x2574>
   13da8:	ldr	r1, [r5]
   13dac:	bl	1106c <fputs_unlocked@plt>
   13db0:	b	13898 <__assert_fail@plt+0x2574>
   13db4:	vmov.f64	d17, #36	; 0x41200000  10.0
   13db8:	vdiv.f64	d16, d16, d17
   13dbc:	cmp	ip, #45	; 0x2d
   13dc0:	vneg.f64	d17, d16
   13dc4:	vseleq.f64	d16, d17, d16
   13dc8:	cmp	sl, #1
   13dcc:	vadd.f64	d9, d9, d16
   13dd0:	bls	12fa4 <__assert_fail@plt+0x1c80>
   13dd4:	b	13400 <__assert_fail@plt+0x20dc>
   13dd8:	bl	112f4 <abort@plt>
   13ddc:	movw	r1, #47956	; 0xbb54
   13de0:	mov	r0, #0
   13de4:	mov	r2, #5
   13de8:	movt	r1, #1
   13dec:	bl	11114 <dcgettext@plt>
   13df0:	mov	r2, r0
   13df4:	mov	r0, #1
   13df8:	mov	r1, #0
   13dfc:	vstr	d8, [sp]
   13e00:	bl	11198 <error@plt>
   13e04:	nop	{0}
   13e08:	push	{r4, r5, fp, lr}
   13e0c:	add	fp, sp, #8
   13e10:	vpush	{d8-d9}
   13e14:	vldr	d16, [pc, #276]	; 13f30 <__assert_fail@plt+0x2c0c>
   13e18:	mov	r4, r0
   13e1c:	vmov.f64	d8, d0
   13e20:	vmul.f64	d16, d0, d16
   13e24:	vmov	r0, r1, d16
   13e28:	bl	19f44 <__assert_fail@plt+0x8c20>
   13e2c:	bl	19e98 <__assert_fail@plt+0x8b74>
   13e30:	cmp	r4, #4
   13e34:	bhi	13ee8 <__assert_fail@plt+0x2bc4>
   13e38:	vldr	d16, [pc, #248]	; 13f38 <__assert_fail@plt+0x2c14>
   13e3c:	vmov	d17, r0, r1
   13e40:	add	r0, pc, #8
   13e44:	vmul.f64	d9, d17, d16
   13e48:	vsub.f64	d8, d8, d9
   13e4c:	ldr	pc, [r0, r4, lsl #2]
   13e50:			; <UNDEFINED> instruction: 0x00013eb0
   13e54:	andeq	r3, r1, r0, ror lr
   13e58:	andeq	r3, r1, r4, ror #28
   13e5c:	strdeq	r3, [r1], -r4
   13e60:	strdeq	r3, [r1], -ip
   13e64:	vcmpe.f64	d8, #0.0
   13e68:	vmrs	APSR_nzcv, fpscr
   13e6c:	bpl	13eb0 <__assert_fail@plt+0x2b8c>
   13e70:	vneg.f64	d8, d8
   13e74:	vmov	r0, r1, d8
   13e78:	bl	19f44 <__assert_fail@plt+0x8c20>
   13e7c:	mov	r4, r0
   13e80:	mov	r5, r1
   13e84:	bl	19e98 <__assert_fail@plt+0x8b74>
   13e88:	vmov	d16, r0, r1
   13e8c:	adds	r2, r4, #1
   13e90:	vcmpe.f64	d16, d8
   13e94:	adc	r1, r5, #0
   13e98:	vmrs	APSR_nzcv, fpscr
   13e9c:	movpl	r2, r4
   13ea0:	movpl	r1, r5
   13ea4:	rsbs	r0, r2, #0
   13ea8:	rsc	r1, r1, #0
   13eac:	b	13f1c <__assert_fail@plt+0x2bf8>
   13eb0:	vmov	r0, r1, d8
   13eb4:	bl	19f44 <__assert_fail@plt+0x8c20>
   13eb8:	mov	r4, r0
   13ebc:	mov	r5, r1
   13ec0:	bl	19e98 <__assert_fail@plt+0x8b74>
   13ec4:	mov	r2, r0
   13ec8:	adds	r0, r4, #1
   13ecc:	vmov	d16, r2, r1
   13ed0:	adc	r1, r5, #0
   13ed4:	vcmpe.f64	d8, d16
   13ed8:	vmrs	APSR_nzcv, fpscr
   13edc:	movle	r0, r4
   13ee0:	movle	r1, r5
   13ee4:	b	13f1c <__assert_fail@plt+0x2bf8>
   13ee8:	vmov.i32	d0, #0	; 0x00000000
   13eec:	vpop	{d8-d9}
   13ef0:	pop	{r4, r5, fp, pc}
   13ef4:	vmov	r0, r1, d8
   13ef8:	b	13f18 <__assert_fail@plt+0x2bf4>
   13efc:	vcmpe.f64	d8, #0.0
   13f00:	vmov.f64	d16, #224	; 0xbf000000 -0.5
   13f04:	vmov.f64	d17, #96	; 0x3f000000  0.5
   13f08:	vmrs	APSR_nzcv, fpscr
   13f0c:	vmovmi.f64	d17, d16
   13f10:	vadd.f64	d16, d8, d17
   13f14:	vmov	r0, r1, d16
   13f18:	bl	19f44 <__assert_fail@plt+0x8c20>
   13f1c:	bl	19e98 <__assert_fail@plt+0x8b74>
   13f20:	vmov	d16, r0, r1
   13f24:	vadd.f64	d0, d9, d16
   13f28:	vpop	{d8-d9}
   13f2c:	pop	{r4, r5, fp, pc}
   13f30:	andeq	r0, r0, r0
   13f34:	stccc	0, cr0, [r0], {-0}
   13f38:	andeq	r0, r0, r0
   13f3c:	mvnmi	r0, #0
   13f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f44:	add	fp, sp, #28
   13f48:	sub	sp, sp, #20
   13f4c:	mov	r5, r0
   13f50:	ands	r0, r1, #1
   13f54:	mov	r2, #0
   13f58:	str	r1, [sp]
   13f5c:	str	r0, [sp, #4]
   13f60:	beq	13f94 <__assert_fail@plt+0x2c70>
   13f64:	movw	r1, #48848	; 0xbed0
   13f68:	mov	r0, r5
   13f6c:	movt	r1, #1
   13f70:	bl	11090 <strcmp@plt>
   13f74:	cmp	r0, #0
   13f78:	clz	r0, r0
   13f7c:	mov	r2, #0
   13f80:	mov	r8, #0
   13f84:	lsr	r9, r0, #5
   13f88:	addeq	r5, r5, #1
   13f8c:	mov	r1, r9
   13f90:	b	13fa0 <__assert_fail@plt+0x2c7c>
   13f94:	mov	r9, #0
   13f98:	mov	r8, #0
   13f9c:	mov	r1, #0
   13fa0:	movw	ip, #54076	; 0xd33c
   13fa4:	movw	lr, #53744	; 0xd1f0
   13fa8:	mov	r0, #1
   13fac:	mov	r7, r1
   13fb0:	mov	r4, #0
   13fb4:	mov	r3, #0
   13fb8:	movt	ip, #2
   13fbc:	movt	lr, #2
   13fc0:	str	r0, [sp, #12]
   13fc4:	ldrb	r6, [r5]
   13fc8:	str	r5, [sp, #16]
   13fcc:	cmp	r6, #44	; 0x2c
   13fd0:	beq	14140 <__assert_fail@plt+0x2e1c>
   13fd4:	cmp	r6, #45	; 0x2d
   13fd8:	bne	14030 <__assert_fail@plt+0x2d0c>
   13fdc:	tst	r7, #1
   13fe0:	bne	14684 <__assert_fail@plt+0x3360>
   13fe4:	ldr	r5, [sp, #16]
   13fe8:	orrs	r0, r9, r8
   13fec:	eoreq	r0, r1, #1
   13ff0:	tsteq	r0, #1
   13ff4:	beq	145f8 <__assert_fail@plt+0x32d4>
   13ff8:	ands	r3, r1, #1
   13ffc:	mov	r7, #1
   14000:	mov	r4, #0
   14004:	add	r5, r5, #1
   14008:	moveq	r9, r7
   1400c:	movne	r3, r8
   14010:	mov	r8, #0
   14014:	str	r9, [sp, #12]
   14018:	mov	r9, #0
   1401c:	ldrb	r6, [r5]
   14020:	str	r5, [sp, #16]
   14024:	cmp	r6, #44	; 0x2c
   14028:	bne	13fd4 <__assert_fail@plt+0x2cb0>
   1402c:	b	14140 <__assert_fail@plt+0x2e1c>
   14030:	str	r3, [sp, #8]
   14034:	mov	r5, r2
   14038:	mov	sl, r1
   1403c:	bl	111e0 <__ctype_b_loc@plt>
   14040:	ldr	r3, [sp, #8]
   14044:	movw	lr, #53744	; 0xd1f0
   14048:	movw	ip, #54076	; 0xd33c
   1404c:	mov	r1, sl
   14050:	mov	r2, r5
   14054:	cmp	r6, #0
   14058:	movt	lr, #2
   1405c:	movt	ip, #2
   14060:	beq	14140 <__assert_fail@plt+0x2e1c>
   14064:	ldr	r0, [r0]
   14068:	add	r0, r0, r6, lsl #1
   1406c:	ldrh	r0, [r0]
   14070:	ands	r0, r0, #1
   14074:	bne	14140 <__assert_fail@plt+0x2e1c>
   14078:	sub	r0, r6, #48	; 0x30
   1407c:	cmp	r0, #9
   14080:	bhi	146b0 <__assert_fail@plt+0x338c>
   14084:	ldr	r6, [lr]
   14088:	cmp	r6, #0
   1408c:	mov	r1, r6
   14090:	movwne	r1, #1
   14094:	tst	r4, r1
   14098:	movw	r1, #39321	; 0x9999
   1409c:	ldreq	r6, [sp, #16]
   140a0:	movt	r1, #39321	; 0x9999
   140a4:	streq	r6, [lr]
   140a8:	subs	r1, r1, r9
   140ac:	movw	r1, #39321	; 0x9999
   140b0:	movt	r1, #6553	; 0x1999
   140b4:	sbcs	r1, r1, r8
   140b8:	bcc	1460c <__assert_fail@plt+0x32e8>
   140bc:	mov	r1, #10
   140c0:	add	r3, r8, r8, lsl #2
   140c4:	umull	r1, r2, r9, r1
   140c8:	add	r2, r2, r3, lsl #1
   140cc:	adds	r1, r1, r0
   140d0:	adc	r0, r2, r0, asr #31
   140d4:	subs	r2, r1, r9
   140d8:	sbcs	r2, r0, r8
   140dc:	mov	r2, #0
   140e0:	movwcc	r2, #1
   140e4:	cmp	r2, #0
   140e8:	moveq	r8, r0
   140ec:	moveq	r9, r1
   140f0:	cmp	r2, #0
   140f4:	bne	1460c <__assert_fail@plt+0x32e8>
   140f8:	mvn	r1, #0
   140fc:	eor	r0, r9, r1
   14100:	eor	r1, r8, r1
   14104:	orrs	r0, r0, r1
   14108:	beq	1460c <__assert_fail@plt+0x32e8>
   1410c:	mov	r2, r5
   14110:	ldr	r3, [sp, #8]
   14114:	eor	r0, r7, #1
   14118:	mov	r1, sl
   1411c:	mov	r4, #1
   14120:	orr	r2, r5, r7
   14124:	ldr	r5, [sp, #16]
   14128:	orr	r1, sl, r0
   1412c:	add	r5, r5, #1
   14130:	ldrb	r6, [r5]
   14134:	str	r5, [sp, #16]
   14138:	cmp	r6, #44	; 0x2c
   1413c:	bne	13fd4 <__assert_fail@plt+0x2cb0>
   14140:	tst	r7, #1
   14144:	beq	141d4 <__assert_fail@plt+0x2eb0>
   14148:	orr	r0, r1, r2
   1414c:	ldr	r1, [sp, #12]
   14150:	mov	sl, #1
   14154:	movw	r4, #54072	; 0xd338
   14158:	ands	r6, r0, #1
   1415c:	movt	r4, #2
   14160:	movne	r6, r3
   14164:	movne	sl, r1
   14168:	ldr	r1, [sp, #4]
   1416c:	cmp	r1, #0
   14170:	tsteq	r0, #1
   14174:	beq	146a4 <__assert_fail@plt+0x3380>
   14178:	ldr	r5, [sp, #16]
   1417c:	tst	r2, #1
   14180:	beq	14228 <__assert_fail@plt+0x2f04>
   14184:	subs	r0, r9, sl
   14188:	sbcs	r0, r8, r6
   1418c:	bcc	14700 <__assert_fail@plt+0x33dc>
   14190:	ldr	r1, [ip]
   14194:	ldr	r0, [lr, #4]
   14198:	cmp	r1, r0
   1419c:	bne	142a8 <__assert_fail@plt+0x2f84>
   141a0:	ldr	r0, [r4]
   141a4:	add	r1, lr, #4
   141a8:	mov	r2, #16
   141ac:	mov	r7, r3
   141b0:	bl	17a18 <__assert_fail@plt+0x66f4>
   141b4:	movw	ip, #54076	; 0xd33c
   141b8:	movw	lr, #53744	; 0xd1f0
   141bc:	mov	r3, r7
   141c0:	str	r0, [r4]
   141c4:	movt	ip, #2
   141c8:	movt	lr, #2
   141cc:	ldr	r1, [ip]
   141d0:	b	142ac <__assert_fail@plt+0x2f88>
   141d4:	movw	r4, #54072	; 0xd338
   141d8:	orrs	r0, r9, r8
   141dc:	movt	r4, #2
   141e0:	beq	145f8 <__assert_fail@plt+0x32d4>
   141e4:	ldr	r1, [ip]
   141e8:	ldr	r0, [lr, #4]
   141ec:	cmp	r1, r0
   141f0:	bne	14264 <__assert_fail@plt+0x2f40>
   141f4:	ldr	r0, [r4]
   141f8:	add	r1, lr, #4
   141fc:	mov	r2, #16
   14200:	mov	r6, r3
   14204:	bl	17a18 <__assert_fail@plt+0x66f4>
   14208:	movw	ip, #54076	; 0xd33c
   1420c:	movw	lr, #53744	; 0xd1f0
   14210:	mov	r3, r6
   14214:	str	r0, [r4]
   14218:	movt	ip, #2
   1421c:	movt	lr, #2
   14220:	ldr	r1, [ip]
   14224:	b	14268 <__assert_fail@plt+0x2f44>
   14228:	ldr	r1, [ip]
   1422c:	ldr	r0, [lr, #4]
   14230:	cmp	r1, r0
   14234:	bne	14288 <__assert_fail@plt+0x2f64>
   14238:	ldr	r0, [r4]
   1423c:	add	r1, lr, #4
   14240:	mov	r2, #16
   14244:	bl	17a18 <__assert_fail@plt+0x66f4>
   14248:	movw	ip, #54076	; 0xd33c
   1424c:	movw	lr, #53744	; 0xd1f0
   14250:	str	r0, [r4]
   14254:	movt	ip, #2
   14258:	movt	lr, #2
   1425c:	ldr	r1, [ip]
   14260:	b	1428c <__assert_fail@plt+0x2f68>
   14264:	ldr	r0, [r4]
   14268:	ldr	r5, [sp, #16]
   1426c:	ldr	sl, [sp, #12]
   14270:	vmov.32	d16[0], r9
   14274:	add	r2, r0, r1, lsl #4
   14278:	vmov.32	d16[1], r8
   1427c:	vorr	d17, d16, d16
   14280:	vst1.64	{d16-d17}, [r2]
   14284:	b	142c0 <__assert_fail@plt+0x2f9c>
   14288:	ldr	r0, [r4]
   1428c:	mov	r2, r0
   14290:	mvn	r3, #0
   14294:	str	sl, [r2, r1, lsl #4]!
   14298:	str	r6, [r2, #4]
   1429c:	str	r3, [r2, #8]
   142a0:	str	r3, [r2, #12]
   142a4:	b	142c4 <__assert_fail@plt+0x2fa0>
   142a8:	ldr	r0, [r4]
   142ac:	mov	r2, r0
   142b0:	str	sl, [r2, r1, lsl #4]!
   142b4:	stmib	r2, {r6, r9}
   142b8:	str	r8, [r2, #12]
   142bc:	ldr	sl, [sp, #12]
   142c0:	mov	r6, r3
   142c4:	add	r1, r1, #1
   142c8:	str	r1, [ip]
   142cc:	ldrb	r2, [r5]
   142d0:	cmp	r2, #0
   142d4:	beq	142fc <__assert_fail@plt+0x2fd8>
   142d8:	mov	r9, #0
   142dc:	mov	r8, #0
   142e0:	mov	r1, #0
   142e4:	mov	r2, #0
   142e8:	mov	r7, #0
   142ec:	mov	r4, #0
   142f0:	str	sl, [sp, #12]
   142f4:	mov	r3, r6
   142f8:	b	1412c <__assert_fail@plt+0x2e08>
   142fc:	cmp	r1, #0
   14300:	beq	1472c <__assert_fail@plt+0x3408>
   14304:	movw	r3, #18240	; 0x4740
   14308:	mov	r2, #16
   1430c:	movt	r3, #1
   14310:	bl	112c4 <qsort@plt>
   14314:	movw	lr, #54076	; 0xd33c
   14318:	movt	lr, #2
   1431c:	ldr	r8, [lr]
   14320:	cmp	r8, #0
   14324:	beq	143e0 <__assert_fail@plt+0x30bc>
   14328:	mov	r6, #0
   1432c:	mov	sl, r6
   14330:	add	r6, r6, #1
   14334:	cmp	r6, r8
   14338:	bcs	143c8 <__assert_fail@plt+0x30a4>
   1433c:	mvn	r0, #-268435455	; 0xf0000001
   14340:	sub	r9, r0, sl
   14344:	ldr	r5, [r4]
   14348:	add	r1, r5, sl, lsl #4
   1434c:	mov	r0, r5
   14350:	ldr	r7, [r0, r6, lsl #4]!
   14354:	ldr	r2, [r1, #8]!
   14358:	ldr	r3, [r1, #4]
   1435c:	ldr	r0, [r0, #4]
   14360:	subs	r7, r2, r7
   14364:	sbcs	r0, r3, r0
   14368:	bcc	143c8 <__assert_fail@plt+0x30a4>
   1436c:	add	r0, r5, r6, lsl #4
   14370:	ldrd	r4, [r0, #8]
   14374:	subs	r7, r2, r4
   14378:	sbcs	r7, r3, r5
   1437c:	mov	r7, #0
   14380:	movwcc	r7, #1
   14384:	cmp	r7, #0
   14388:	movne	r2, r4
   1438c:	movne	r3, r5
   14390:	movw	r4, #54072	; 0xd338
   14394:	strd	r2, [r1]
   14398:	add	r2, r9, r8
   1439c:	add	r1, r0, #16
   143a0:	movt	r4, #2
   143a4:	lsl	r2, r2, #4
   143a8:	bl	110c0 <memmove@plt>
   143ac:	movw	lr, #54076	; 0xd33c
   143b0:	movt	lr, #2
   143b4:	ldr	r0, [lr]
   143b8:	sub	r8, r0, #1
   143bc:	cmp	r6, r8
   143c0:	str	r8, [lr]
   143c4:	bcc	14344 <__assert_fail@plt+0x3020>
   143c8:	cmp	r6, r8
   143cc:	bcc	1432c <__assert_fail@plt+0x3008>
   143d0:	ldr	r0, [sp]
   143d4:	tst	r0, #2
   143d8:	bne	143f0 <__assert_fail@plt+0x30cc>
   143dc:	b	145b4 <__assert_fail@plt+0x3290>
   143e0:	mov	r8, #0
   143e4:	ldr	r0, [sp]
   143e8:	tst	r0, #2
   143ec:	beq	145b4 <__assert_fail@plt+0x3290>
   143f0:	ldr	r7, [r4]
   143f4:	movw	r2, #53744	; 0xd1f0
   143f8:	mov	r0, #0
   143fc:	movt	r2, #2
   14400:	str	r0, [lr]
   14404:	str	r0, [r4]
   14408:	str	r0, [r2, #4]
   1440c:	ldr	r6, [r7]
   14410:	ldr	r5, [r7, #4]
   14414:	subs	r1, r6, #2
   14418:	sbcs	r1, r5, #0
   1441c:	bcc	1447c <__assert_fail@plt+0x3158>
   14420:	add	r1, r2, #4
   14424:	mov	r0, #0
   14428:	mov	r2, #16
   1442c:	mov	r9, #0
   14430:	bl	17a18 <__assert_fail@plt+0x66f4>
   14434:	movw	lr, #54076	; 0xd33c
   14438:	mov	r2, #1
   1443c:	mov	r3, r0
   14440:	str	r0, [r4]
   14444:	movt	lr, #2
   14448:	ldr	r1, [lr]
   1444c:	str	r2, [r3, r1, lsl #4]!
   14450:	subs	r2, r6, #1
   14454:	add	ip, r1, #1
   14458:	sbc	r6, r5, #0
   1445c:	str	r9, [r3, #4]
   14460:	str	r2, [r3, #8]
   14464:	str	r6, [r3, #12]
   14468:	str	ip, [lr]
   1446c:	cmp	r8, #2
   14470:	str	r7, [sp, #16]
   14474:	bcs	1448c <__assert_fail@plt+0x3168>
   14478:	b	1451c <__assert_fail@plt+0x31f8>
   1447c:	mov	ip, #0
   14480:	cmp	r8, #2
   14484:	str	r7, [sp, #16]
   14488:	bcc	1451c <__assert_fail@plt+0x31f8>
   1448c:	add	r6, r7, #16
   14490:	sub	r7, r8, #1
   14494:	ldr	r5, [r6, #-8]
   14498:	ldr	r4, [r6, #-4]
   1449c:	ldm	r6, {r2, r3}
   144a0:	adds	r9, r5, #1
   144a4:	adc	r5, r4, #0
   144a8:	eor	r1, r9, r2
   144ac:	eor	r4, r5, r3
   144b0:	orrs	r1, r1, r4
   144b4:	beq	14510 <__assert_fail@plt+0x31ec>
   144b8:	subs	sl, r2, #1
   144bc:	movw	r2, #53744	; 0xd1f0
   144c0:	movt	r2, #2
   144c4:	sbc	r4, r3, #0
   144c8:	ldr	r1, [r2, #4]
   144cc:	cmp	ip, r1
   144d0:	bne	144f8 <__assert_fail@plt+0x31d4>
   144d4:	add	r1, r2, #4
   144d8:	mov	r2, #16
   144dc:	bl	17a18 <__assert_fail@plt+0x66f4>
   144e0:	movw	lr, #54076	; 0xd33c
   144e4:	movw	r1, #54072	; 0xd338
   144e8:	movt	lr, #2
   144ec:	movt	r1, #2
   144f0:	ldr	ip, [lr]
   144f4:	str	r0, [r1]
   144f8:	mov	r1, r0
   144fc:	str	r9, [r1, ip, lsl #4]!
   14500:	add	ip, ip, #1
   14504:	stmib	r1, {r5, sl}
   14508:	str	r4, [r1, #12]
   1450c:	str	ip, [lr]
   14510:	add	r6, r6, #16
   14514:	subs	r7, r7, #1
   14518:	bne	14494 <__assert_fail@plt+0x3170>
   1451c:	ldr	r4, [sp, #16]
   14520:	mvn	r1, #0
   14524:	add	r2, r4, r8, lsl #4
   14528:	ldrd	r2, [r2, #-8]
   1452c:	eor	r7, r3, r1
   14530:	eor	r6, r2, r1
   14534:	orrs	r7, r6, r7
   14538:	beq	14598 <__assert_fail@plt+0x3274>
   1453c:	adds	r6, r2, #1
   14540:	movw	r2, #53744	; 0xd1f0
   14544:	movt	r2, #2
   14548:	adc	r5, r3, #0
   1454c:	ldr	r1, [r2, #4]
   14550:	cmp	ip, r1
   14554:	bne	1457c <__assert_fail@plt+0x3258>
   14558:	add	r1, r2, #4
   1455c:	mov	r2, #16
   14560:	bl	17a18 <__assert_fail@plt+0x66f4>
   14564:	movw	lr, #54076	; 0xd33c
   14568:	movw	r1, #54072	; 0xd338
   1456c:	movt	lr, #2
   14570:	movt	r1, #2
   14574:	ldr	ip, [lr]
   14578:	str	r0, [r1]
   1457c:	str	r6, [r0, ip, lsl #4]!
   14580:	mvn	r1, #0
   14584:	str	r5, [r0, #4]
   14588:	str	r1, [r0, #8]
   1458c:	str	r1, [r0, #12]
   14590:	add	r0, ip, #1
   14594:	str	r0, [lr]
   14598:	mov	r0, r4
   1459c:	bl	14d74 <__assert_fail@plt+0x3a50>
   145a0:	movw	lr, #54076	; 0xd33c
   145a4:	movw	r4, #54072	; 0xd338
   145a8:	movt	lr, #2
   145ac:	movt	r4, #2
   145b0:	ldr	r8, [lr]
   145b4:	ldr	r0, [r4]
   145b8:	add	r1, r8, #1
   145bc:	mov	r5, r4
   145c0:	mov	r4, lr
   145c4:	str	r1, [lr]
   145c8:	lsl	r1, r1, #4
   145cc:	bl	178b4 <__assert_fail@plt+0x6590>
   145d0:	ldr	r1, [r4]
   145d4:	str	r0, [r5]
   145d8:	add	r0, r0, r1, lsl #4
   145dc:	mvn	r1, #0
   145e0:	str	r1, [r0, #-16]
   145e4:	str	r1, [r0, #-12]
   145e8:	str	r1, [r0, #-8]
   145ec:	str	r1, [r0, #-4]
   145f0:	sub	sp, fp, #28
   145f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f8:	movw	r0, #48789	; 0xbe95
   145fc:	movw	r1, #48744	; 0xbe68
   14600:	movt	r0, #1
   14604:	movt	r1, #1
   14608:	b	14694 <__assert_fail@plt+0x3370>
   1460c:	movw	r1, #48875	; 0xbeeb
   14610:	mov	r0, r6
   14614:	movt	r1, #1
   14618:	bl	1130c <strspn@plt>
   1461c:	mov	r1, r0
   14620:	mov	r0, r6
   14624:	bl	17d44 <__assert_fail@plt+0x6a20>
   14628:	ldr	r2, [sp]
   1462c:	movw	r1, #48886	; 0xbef6
   14630:	mov	r5, r0
   14634:	movw	r0, #48924	; 0xbf1c
   14638:	movt	r0, #1
   1463c:	movt	r1, #1
   14640:	tst	r2, #4
   14644:	mov	r2, #5
   14648:	moveq	r1, r0
   1464c:	mov	r0, #0
   14650:	bl	11114 <dcgettext@plt>
   14654:	mov	r4, r0
   14658:	mov	r0, r5
   1465c:	bl	17194 <__assert_fail@plt+0x5e70>
   14660:	mov	r3, r0
   14664:	mov	r0, #0
   14668:	mov	r1, #0
   1466c:	mov	r2, r4
   14670:	bl	11198 <error@plt>
   14674:	mov	r0, r5
   14678:	bl	14d74 <__assert_fail@plt+0x3a50>
   1467c:	mov	r0, #1
   14680:	bl	11420 <__assert_fail@plt+0xfc>
   14684:	movw	r0, #48724	; 0xbe54
   14688:	movw	r1, #48692	; 0xbe34
   1468c:	movt	r0, #1
   14690:	movt	r1, #1
   14694:	ldr	r2, [sp]
   14698:	tst	r2, #4
   1469c:	moveq	r1, r0
   146a0:	b	14708 <__assert_fail@plt+0x33e4>
   146a4:	movw	r1, #48816	; 0xbeb0
   146a8:	movt	r1, #1
   146ac:	b	14708 <__assert_fail@plt+0x33e4>
   146b0:	ldr	r2, [sp]
   146b4:	movw	r0, #48988	; 0xbf5c
   146b8:	movw	r1, #48953	; 0xbf39
   146bc:	movt	r0, #1
   146c0:	movt	r1, #1
   146c4:	tst	r2, #4
   146c8:	mov	r2, #5
   146cc:	moveq	r1, r0
   146d0:	mov	r0, #0
   146d4:	bl	11114 <dcgettext@plt>
   146d8:	mov	r4, r0
   146dc:	ldr	r0, [sp, #16]
   146e0:	bl	17194 <__assert_fail@plt+0x5e70>
   146e4:	mov	r3, r0
   146e8:	mov	r0, #0
   146ec:	mov	r1, #0
   146f0:	mov	r2, r4
   146f4:	bl	11198 <error@plt>
   146f8:	mov	r0, #1
   146fc:	bl	11420 <__assert_fail@plt+0xfc>
   14700:	movw	r1, #48850	; 0xbed2
   14704:	movt	r1, #1
   14708:	mov	r0, #0
   1470c:	mov	r2, #5
   14710:	bl	11114 <dcgettext@plt>
   14714:	mov	r2, r0
   14718:	mov	r0, #0
   1471c:	mov	r1, #0
   14720:	bl	11198 <error@plt>
   14724:	mov	r0, #1
   14728:	bl	11420 <__assert_fail@plt+0xfc>
   1472c:	movw	r0, #49052	; 0xbf9c
   14730:	movw	r1, #49011	; 0xbf73
   14734:	movt	r0, #1
   14738:	movt	r1, #1
   1473c:	b	14694 <__assert_fail@plt+0x3370>
   14740:	ldr	r2, [r0]
   14744:	ldr	r1, [r1]
   14748:	mov	r0, #0
   1474c:	cmp	r2, r1
   14750:	movwgt	r0, #1
   14754:	mvnlt	r0, #0
   14758:	bx	lr
   1475c:	mov	r0, #1
   14760:	b	11420 <__assert_fail@plt+0xfc>
   14764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14768:	add	fp, sp, #28
   1476c:	sub	sp, sp, #12
   14770:	mov	r4, r3
   14774:	mov	r9, r2
   14778:	mov	r7, r1
   1477c:	mov	r8, r0
   14780:	bl	111f8 <strlen@plt>
   14784:	ldr	r6, [r7]
   14788:	cmp	r6, #0
   1478c:	beq	14838 <__assert_fail@plt+0x3514>
   14790:	mov	r5, r0
   14794:	cmp	r9, #0
   14798:	beq	14848 <__assert_fail@plt+0x3524>
   1479c:	add	r0, r7, #4
   147a0:	mvn	sl, #0
   147a4:	mov	r7, #0
   147a8:	str	r9, [sp]
   147ac:	str	r0, [sp, #8]
   147b0:	mov	r0, #0
   147b4:	str	r0, [sp, #4]
   147b8:	mov	r0, r9
   147bc:	mov	r0, r6
   147c0:	mov	r1, r8
   147c4:	mov	r2, r5
   147c8:	bl	112e8 <strncmp@plt>
   147cc:	cmp	r0, #0
   147d0:	bne	1481c <__assert_fail@plt+0x34f8>
   147d4:	mov	r0, r6
   147d8:	bl	111f8 <strlen@plt>
   147dc:	cmp	r0, r5
   147e0:	beq	1483c <__assert_fail@plt+0x3518>
   147e4:	cmn	sl, #1
   147e8:	beq	14818 <__assert_fail@plt+0x34f4>
   147ec:	ldr	r0, [sp]
   147f0:	mov	r1, r9
   147f4:	mov	r2, r4
   147f8:	mla	r0, sl, r4, r0
   147fc:	bl	11108 <memcmp@plt>
   14800:	ldr	r1, [sp, #4]
   14804:	cmp	r0, #0
   14808:	movwne	r0, #1
   1480c:	orr	r1, r1, r0
   14810:	str	r1, [sp, #4]
   14814:	b	1481c <__assert_fail@plt+0x34f8>
   14818:	mov	sl, r7
   1481c:	ldr	r0, [sp, #8]
   14820:	add	r9, r9, r4
   14824:	ldr	r6, [r0, r7, lsl #2]
   14828:	add	r7, r7, #1
   1482c:	cmp	r6, #0
   14830:	bne	147bc <__assert_fail@plt+0x3498>
   14834:	b	148b0 <__assert_fail@plt+0x358c>
   14838:	mvn	r7, #0
   1483c:	mov	r0, r7
   14840:	sub	sp, fp, #28
   14844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14848:	add	r4, r7, #4
   1484c:	mov	r0, #0
   14850:	mvn	sl, #0
   14854:	mov	r7, #0
   14858:	str	r0, [sp, #4]
   1485c:	mov	r0, r6
   14860:	mov	r1, r8
   14864:	mov	r2, r5
   14868:	bl	112e8 <strncmp@plt>
   1486c:	cmp	r0, #0
   14870:	bne	148a0 <__assert_fail@plt+0x357c>
   14874:	mov	r0, r6
   14878:	bl	111f8 <strlen@plt>
   1487c:	cmp	r0, r5
   14880:	beq	1483c <__assert_fail@plt+0x3518>
   14884:	ldr	r1, [sp, #4]
   14888:	cmn	sl, #1
   1488c:	add	r0, sl, #1
   14890:	movwne	r0, #1
   14894:	moveq	sl, r7
   14898:	orr	r1, r1, r0
   1489c:	str	r1, [sp, #4]
   148a0:	ldr	r6, [r4, r7, lsl #2]
   148a4:	add	r7, r7, #1
   148a8:	cmp	r6, #0
   148ac:	bne	1485c <__assert_fail@plt+0x3538>
   148b0:	ldr	r0, [sp, #4]
   148b4:	tst	r0, #1
   148b8:	mvnne	sl, #1
   148bc:	mov	r0, sl
   148c0:	sub	sp, fp, #28
   148c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c8:	push	{r4, r5, r6, r7, fp, lr}
   148cc:	add	fp, sp, #16
   148d0:	mov	r5, r0
   148d4:	ldr	r0, [r1]
   148d8:	mvn	r4, #0
   148dc:	cmp	r0, #0
   148e0:	beq	14910 <__assert_fail@plt+0x35ec>
   148e4:	add	r7, r1, #4
   148e8:	mov	r6, #0
   148ec:	mov	r1, r5
   148f0:	bl	11090 <strcmp@plt>
   148f4:	cmp	r0, #0
   148f8:	moveq	r0, r6
   148fc:	popeq	{r4, r5, r6, r7, fp, pc}
   14900:	ldr	r0, [r7, r6, lsl #2]
   14904:	add	r6, r6, #1
   14908:	cmp	r0, #0
   1490c:	bne	148ec <__assert_fail@plt+0x35c8>
   14910:	mov	r0, r4
   14914:	pop	{r4, r5, r6, r7, fp, pc}
   14918:	push	{r4, r5, r6, sl, fp, lr}
   1491c:	add	fp, sp, #16
   14920:	sub	sp, sp, #8
   14924:	mov	r4, r1
   14928:	movw	r1, #49117	; 0xbfdd
   1492c:	mov	r5, r0
   14930:	movw	r0, #49090	; 0xbfc2
   14934:	cmn	r2, #1
   14938:	mov	r2, #5
   1493c:	movt	r0, #1
   14940:	movt	r1, #1
   14944:	moveq	r1, r0
   14948:	mov	r0, #0
   1494c:	bl	11114 <dcgettext@plt>
   14950:	mov	r6, r0
   14954:	mov	r0, #0
   14958:	mov	r1, #8
   1495c:	mov	r2, r4
   14960:	bl	16bc4 <__assert_fail@plt+0x58a0>
   14964:	mov	r4, r0
   14968:	mov	r0, #1
   1496c:	mov	r1, r5
   14970:	bl	17184 <__assert_fail@plt+0x5e60>
   14974:	str	r0, [sp]
   14978:	mov	r0, #0
   1497c:	mov	r1, #0
   14980:	mov	r2, r6
   14984:	mov	r3, r4
   14988:	bl	11198 <error@plt>
   1498c:	sub	sp, fp, #16
   14990:	pop	{r4, r5, r6, sl, fp, pc}
   14994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14998:	add	fp, sp, #28
   1499c:	sub	sp, sp, #4
   149a0:	mov	r5, r1
   149a4:	movw	r1, #49146	; 0xbffa
   149a8:	mov	sl, r2
   149ac:	mov	r7, r0
   149b0:	mov	r0, #0
   149b4:	mov	r2, #5
   149b8:	mov	r8, #0
   149bc:	movt	r1, #1
   149c0:	bl	11114 <dcgettext@plt>
   149c4:	movw	r4, #53640	; 0xd188
   149c8:	movt	r4, #2
   149cc:	ldr	r1, [r4]
   149d0:	bl	1106c <fputs_unlocked@plt>
   149d4:	ldr	r6, [r7]
   149d8:	cmp	r6, #0
   149dc:	beq	14a7c <__assert_fail@plt+0x3758>
   149e0:	add	r9, r7, #4
   149e4:	mov	r7, #0
   149e8:	str	sl, [sp]
   149ec:	cmp	r8, #0
   149f0:	beq	14a0c <__assert_fail@plt+0x36e8>
   149f4:	mov	r0, r7
   149f8:	mov	r1, r5
   149fc:	mov	r2, sl
   14a00:	bl	11108 <memcmp@plt>
   14a04:	cmp	r0, #0
   14a08:	beq	14a38 <__assert_fail@plt+0x3714>
   14a0c:	ldr	r7, [r4]
   14a10:	mov	r0, r6
   14a14:	bl	17194 <__assert_fail@plt+0x5e70>
   14a18:	movw	r2, #49167	; 0xc00f
   14a1c:	mov	r3, r0
   14a20:	mov	r0, r7
   14a24:	mov	r1, #1
   14a28:	movt	r2, #1
   14a2c:	bl	1124c <__fprintf_chk@plt>
   14a30:	mov	r7, r5
   14a34:	b	14a68 <__assert_fail@plt+0x3744>
   14a38:	mov	sl, r9
   14a3c:	ldr	r9, [r4]
   14a40:	mov	r0, r6
   14a44:	bl	17194 <__assert_fail@plt+0x5e70>
   14a48:	mov	r3, r0
   14a4c:	mov	r0, r9
   14a50:	mov	r9, sl
   14a54:	ldr	sl, [sp]
   14a58:	movw	r2, #49175	; 0xc017
   14a5c:	mov	r1, #1
   14a60:	movt	r2, #1
   14a64:	bl	1124c <__fprintf_chk@plt>
   14a68:	ldr	r6, [r9, -r8, lsl #2]
   14a6c:	add	r5, r5, sl
   14a70:	sub	r8, r8, #1
   14a74:	cmp	r6, #0
   14a78:	bne	149ec <__assert_fail@plt+0x36c8>
   14a7c:	ldr	r0, [r4]
   14a80:	ldr	r1, [r0, #20]
   14a84:	ldr	r2, [r0, #24]
   14a88:	cmp	r1, r2
   14a8c:	addcc	r2, r1, #1
   14a90:	strcc	r2, [r0, #20]
   14a94:	movcc	r0, #10
   14a98:	strbcc	r0, [r1]
   14a9c:	subcc	sp, fp, #28
   14aa0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa4:	mov	r1, #10
   14aa8:	sub	sp, fp, #28
   14aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab0:	b	1127c <__overflow@plt>
   14ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab8:	add	fp, sp, #28
   14abc:	sub	sp, sp, #12
   14ac0:	mov	sl, r0
   14ac4:	ldr	r0, [fp, #16]
   14ac8:	ldr	r9, [fp, #8]
   14acc:	mov	r5, r3
   14ad0:	mov	r8, r2
   14ad4:	mov	r6, r1
   14ad8:	cmp	r0, #0
   14adc:	beq	14b0c <__assert_fail@plt+0x37e8>
   14ae0:	mov	r0, r6
   14ae4:	mov	r1, r8
   14ae8:	mov	r2, r5
   14aec:	mov	r3, r9
   14af0:	bl	14764 <__assert_fail@plt+0x3440>
   14af4:	mov	r4, r0
   14af8:	cmn	r4, #1
   14afc:	ble	14b5c <__assert_fail@plt+0x3838>
   14b00:	mov	r0, r4
   14b04:	sub	sp, fp, #28
   14b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b0c:	ldr	r0, [r8]
   14b10:	movw	r7, #49090	; 0xbfc2
   14b14:	str	r5, [sp, #8]
   14b18:	movt	r7, #1
   14b1c:	cmp	r0, #0
   14b20:	beq	14b74 <__assert_fail@plt+0x3850>
   14b24:	add	r5, r8, #4
   14b28:	mov	r4, #0
   14b2c:	mov	r1, r6
   14b30:	bl	11090 <strcmp@plt>
   14b34:	cmp	r0, #0
   14b38:	beq	14b50 <__assert_fail@plt+0x382c>
   14b3c:	ldr	r0, [r5, r4, lsl #2]
   14b40:	add	r4, r4, #1
   14b44:	cmp	r0, #0
   14b48:	bne	14b2c <__assert_fail@plt+0x3808>
   14b4c:	b	14b74 <__assert_fail@plt+0x3850>
   14b50:	ldr	r5, [sp, #8]
   14b54:	cmn	r4, #1
   14b58:	bgt	14b00 <__assert_fail@plt+0x37dc>
   14b5c:	movw	r0, #49090	; 0xbfc2
   14b60:	movw	r7, #49117	; 0xbfdd
   14b64:	str	r5, [sp, #8]
   14b68:	movt	r0, #1
   14b6c:	movt	r7, #1
   14b70:	moveq	r7, r0
   14b74:	ldr	r5, [fp, #12]
   14b78:	mov	r0, #0
   14b7c:	mov	r1, r7
   14b80:	mov	r2, #5
   14b84:	bl	11114 <dcgettext@plt>
   14b88:	mov	r4, r0
   14b8c:	mov	r0, #0
   14b90:	mov	r1, #8
   14b94:	mov	r2, r6
   14b98:	bl	16bc4 <__assert_fail@plt+0x58a0>
   14b9c:	mov	r6, r0
   14ba0:	mov	r0, #1
   14ba4:	mov	r1, sl
   14ba8:	bl	17184 <__assert_fail@plt+0x5e60>
   14bac:	str	r0, [sp]
   14bb0:	mov	r0, #0
   14bb4:	mov	r1, #0
   14bb8:	mov	r2, r4
   14bbc:	mov	r3, r6
   14bc0:	bl	11198 <error@plt>
   14bc4:	ldr	r1, [sp, #8]
   14bc8:	mov	r0, r8
   14bcc:	mov	r2, r9
   14bd0:	bl	14994 <__assert_fail@plt+0x3670>
   14bd4:	blx	r5
   14bd8:	mvn	r4, #0
   14bdc:	mov	r0, r4
   14be0:	sub	sp, fp, #28
   14be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14be8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14bec:	add	fp, sp, #24
   14bf0:	ldr	r6, [r1]
   14bf4:	cmp	r6, #0
   14bf8:	beq	14c5c <__assert_fail@plt+0x3938>
   14bfc:	mov	r8, r1
   14c00:	mov	r7, r2
   14c04:	mov	r1, r2
   14c08:	mov	r2, r3
   14c0c:	mov	r4, r3
   14c10:	mov	r9, r0
   14c14:	bl	11108 <memcmp@plt>
   14c18:	cmp	r0, #0
   14c1c:	beq	14c54 <__assert_fail@plt+0x3930>
   14c20:	add	r7, r7, r4
   14c24:	add	r5, r8, #4
   14c28:	ldr	r6, [r5]
   14c2c:	cmp	r6, #0
   14c30:	beq	14c5c <__assert_fail@plt+0x3938>
   14c34:	mov	r0, r9
   14c38:	mov	r1, r7
   14c3c:	mov	r2, r4
   14c40:	bl	11108 <memcmp@plt>
   14c44:	add	r7, r7, r4
   14c48:	add	r5, r5, #4
   14c4c:	cmp	r0, #0
   14c50:	bne	14c28 <__assert_fail@plt+0x3904>
   14c54:	mov	r0, r6
   14c58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c5c:	mov	r6, #0
   14c60:	mov	r0, r6
   14c64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c68:	movw	r1, #53752	; 0xd1f8
   14c6c:	movt	r1, #2
   14c70:	str	r0, [r1, #4]
   14c74:	bx	lr
   14c78:	movw	r1, #53752	; 0xd1f8
   14c7c:	movt	r1, #2
   14c80:	strb	r0, [r1]
   14c84:	bx	lr
   14c88:	push	{r4, r5, r6, sl, fp, lr}
   14c8c:	add	fp, sp, #16
   14c90:	sub	sp, sp, #8
   14c94:	movw	r0, #53652	; 0xd194
   14c98:	movt	r0, #2
   14c9c:	ldr	r0, [r0]
   14ca0:	bl	19730 <__assert_fail@plt+0x840c>
   14ca4:	cmp	r0, #0
   14ca8:	beq	14cd0 <__assert_fail@plt+0x39ac>
   14cac:	movw	r5, #53752	; 0xd1f8
   14cb0:	movt	r5, #2
   14cb4:	ldrb	r0, [r5]
   14cb8:	cmp	r0, #0
   14cbc:	beq	14cfc <__assert_fail@plt+0x39d8>
   14cc0:	bl	11210 <__errno_location@plt>
   14cc4:	ldr	r0, [r0]
   14cc8:	cmp	r0, #32
   14ccc:	bne	14cfc <__assert_fail@plt+0x39d8>
   14cd0:	movw	r0, #53640	; 0xd188
   14cd4:	movt	r0, #2
   14cd8:	ldr	r0, [r0]
   14cdc:	bl	19730 <__assert_fail@plt+0x840c>
   14ce0:	cmp	r0, #0
   14ce4:	subeq	sp, fp, #16
   14ce8:	popeq	{r4, r5, r6, sl, fp, pc}
   14cec:	movw	r0, #53552	; 0xd130
   14cf0:	movt	r0, #2
   14cf4:	ldr	r0, [r0]
   14cf8:	bl	110d8 <_exit@plt>
   14cfc:	movw	r1, #49180	; 0xc01c
   14d00:	mov	r0, #0
   14d04:	mov	r2, #5
   14d08:	movt	r1, #1
   14d0c:	bl	11114 <dcgettext@plt>
   14d10:	ldr	r6, [r5, #4]
   14d14:	mov	r4, r0
   14d18:	bl	11210 <__errno_location@plt>
   14d1c:	ldr	r5, [r0]
   14d20:	cmp	r6, #0
   14d24:	bne	14d40 <__assert_fail@plt+0x3a1c>
   14d28:	movw	r2, #49177	; 0xc019
   14d2c:	mov	r0, #0
   14d30:	mov	r1, r5
   14d34:	mov	r3, r4
   14d38:	movt	r2, #1
   14d3c:	b	14d60 <__assert_fail@plt+0x3a3c>
   14d40:	mov	r0, r6
   14d44:	bl	16e0c <__assert_fail@plt+0x5ae8>
   14d48:	movw	r2, #47127	; 0xb817
   14d4c:	mov	r3, r0
   14d50:	str	r4, [sp]
   14d54:	mov	r0, #0
   14d58:	mov	r1, r5
   14d5c:	movt	r2, #1
   14d60:	bl	11198 <error@plt>
   14d64:	movw	r0, #53552	; 0xd130
   14d68:	movt	r0, #2
   14d6c:	ldr	r0, [r0]
   14d70:	bl	110d8 <_exit@plt>
   14d74:	push	{r4, r5, r6, sl, fp, lr}
   14d78:	add	fp, sp, #16
   14d7c:	mov	r4, r0
   14d80:	bl	11210 <__errno_location@plt>
   14d84:	ldr	r6, [r0]
   14d88:	mov	r5, r0
   14d8c:	mov	r0, r4
   14d90:	bl	110cc <free@plt>
   14d94:	str	r6, [r5]
   14d98:	pop	{r4, r5, r6, sl, fp, pc}
   14d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da0:	add	fp, sp, #28
   14da4:	sub	sp, sp, #20
   14da8:	mov	r5, r3
   14dac:	str	r2, [sp, #12]
   14db0:	str	r1, [sp, #16]
   14db4:	mov	r4, r0
   14db8:	bl	111f8 <strlen@plt>
   14dbc:	ldr	r3, [fp, #12]
   14dc0:	mov	r8, r0
   14dc4:	mov	sl, #0
   14dc8:	tst	r3, #2
   14dcc:	bne	14ea0 <__assert_fail@plt+0x3b7c>
   14dd0:	bl	1115c <__ctype_get_mb_cur_max@plt>
   14dd4:	mov	r6, #0
   14dd8:	cmp	r0, #2
   14ddc:	bcc	14eb0 <__assert_fail@plt+0x3b8c>
   14de0:	mov	r0, #0
   14de4:	mov	r1, r4
   14de8:	mov	r2, #0
   14dec:	bl	112b8 <mbstowcs@plt>
   14df0:	cmn	r0, #1
   14df4:	beq	1504c <__assert_fail@plt+0x3d28>
   14df8:	add	r9, r0, #1
   14dfc:	mov	r7, r0
   14e00:	lsl	r0, r9, #2
   14e04:	bl	196ac <__assert_fail@plt+0x8388>
   14e08:	cmp	r0, #0
   14e0c:	beq	15048 <__assert_fail@plt+0x3d24>
   14e10:	mov	r1, r4
   14e14:	mov	r2, r9
   14e18:	mov	r6, r0
   14e1c:	bl	112b8 <mbstowcs@plt>
   14e20:	cmp	r0, #0
   14e24:	beq	1506c <__assert_fail@plt+0x3d48>
   14e28:	str	r4, [sp, #4]
   14e2c:	mov	r4, #0
   14e30:	mov	r1, r6
   14e34:	str	r6, [sp]
   14e38:	str	r4, [r6, r7, lsl #2]
   14e3c:	ldr	r0, [r6]
   14e40:	cmp	r0, #0
   14e44:	beq	1507c <__assert_fail@plt+0x3d58>
   14e48:	add	r6, r1, #4
   14e4c:	movw	r7, #65533	; 0xfffd
   14e50:	bl	11138 <iswprint@plt>
   14e54:	cmp	r0, #0
   14e58:	streq	r7, [r6, #-4]
   14e5c:	moveq	r4, #1
   14e60:	ldr	r0, [r6], #4
   14e64:	cmp	r0, #0
   14e68:	bne	14e50 <__assert_fail@plt+0x3b2c>
   14e6c:	ldr	r6, [sp]
   14e70:	mov	r1, r9
   14e74:	mov	r0, r6
   14e78:	bl	11294 <wcswidth@plt>
   14e7c:	mov	r7, r0
   14e80:	tst	r4, #1
   14e84:	beq	1508c <__assert_fail@plt+0x3d68>
   14e88:	mov	r0, #0
   14e8c:	mov	r1, r6
   14e90:	mov	r2, #0
   14e94:	bl	1118c <wcstombs@plt>
   14e98:	ldr	r4, [sp, #4]
   14e9c:	b	150a4 <__assert_fail@plt+0x3d80>
   14ea0:	mov	r6, #0
   14ea4:	mov	r2, #0
   14ea8:	mov	r7, r8
   14eac:	b	14ebc <__assert_fail@plt+0x3b98>
   14eb0:	mov	r2, #0
   14eb4:	mov	r7, r8
   14eb8:	ldr	r3, [fp, #12]
   14ebc:	ldr	r0, [r5]
   14ec0:	str	r4, [sp, #4]
   14ec4:	ldr	r4, [fp, #8]
   14ec8:	mov	r1, r7
   14ecc:	str	r6, [sp, #8]
   14ed0:	cmp	r7, r0
   14ed4:	movhi	r1, r0
   14ed8:	movhi	r8, r0
   14edc:	cmp	r0, r7
   14ee0:	subhi	sl, r0, r1
   14ee4:	cmp	r4, #0
   14ee8:	str	r1, [r5]
   14eec:	beq	14f04 <__assert_fail@plt+0x3be0>
   14ef0:	cmp	r4, #1
   14ef4:	bne	14f0c <__assert_fail@plt+0x3be8>
   14ef8:	mov	r9, #0
   14efc:	mov	r4, sl
   14f00:	b	14f18 <__assert_fail@plt+0x3bf4>
   14f04:	mov	r9, sl
   14f08:	b	14f18 <__assert_fail@plt+0x3bf4>
   14f0c:	and	r0, sl, #1
   14f10:	lsr	r9, sl, #1
   14f14:	add	r4, r0, sl, lsr #1
   14f18:	ldr	r5, [sp, #12]
   14f1c:	ldr	r1, [sp, #16]
   14f20:	tst	r3, #8
   14f24:	mov	r6, #0
   14f28:	mov	r7, #0
   14f2c:	moveq	r6, r9
   14f30:	tst	r3, #4
   14f34:	moveq	r7, r4
   14f38:	cmp	r5, #0
   14f3c:	beq	15020 <__assert_fail@plt+0x3cfc>
   14f40:	add	r0, r1, r5
   14f44:	str	r2, [sp]
   14f48:	sub	sl, r0, #1
   14f4c:	cmp	sl, r1
   14f50:	bls	14f9c <__assert_fail@plt+0x3c78>
   14f54:	cmp	r7, #0
   14f58:	mov	r0, r1
   14f5c:	beq	14fa0 <__assert_fail@plt+0x3c7c>
   14f60:	sub	r0, r1, sl
   14f64:	rsb	r1, r7, #0
   14f68:	cmp	r0, r1
   14f6c:	movcc	r0, r1
   14f70:	mov	r1, #32
   14f74:	rsb	r2, r0, #0
   14f78:	ldr	r0, [sp, #16]
   14f7c:	bl	11228 <memset@plt>
   14f80:	rsb	r0, r4, #0
   14f84:	rsb	r1, r5, #1
   14f88:	cmp	r1, r0
   14f8c:	movcc	r1, r0
   14f90:	ldr	r0, [sp, #16]
   14f94:	sub	r0, r0, r1
   14f98:	b	14fa0 <__assert_fail@plt+0x3c7c>
   14f9c:	mov	r0, r1
   14fa0:	ldr	r1, [sp, #4]
   14fa4:	sub	r2, sl, r0
   14fa8:	mov	r5, #0
   14fac:	mvn	r3, #0
   14fb0:	cmp	r8, r2
   14fb4:	strb	r5, [r0]
   14fb8:	movcc	r2, r8
   14fbc:	bl	11318 <__mempcpy_chk@plt>
   14fc0:	mov	r4, r0
   14fc4:	cmp	r6, #0
   14fc8:	beq	15018 <__assert_fail@plt+0x3cf4>
   14fcc:	cmp	r4, sl
   14fd0:	bcs	15018 <__assert_fail@plt+0x3cf4>
   14fd4:	sub	r0, r4, sl
   14fd8:	rsb	r1, r6, #0
   14fdc:	cmp	r0, r1
   14fe0:	movcc	r0, r1
   14fe4:	mov	r1, #32
   14fe8:	rsb	r2, r0, #0
   14fec:	mov	r0, r4
   14ff0:	bl	11228 <memset@plt>
   14ff4:	ldr	r0, [sp, #16]
   14ff8:	ldr	r1, [sp, #12]
   14ffc:	rsb	r0, r0, #1
   15000:	sub	r0, r0, r1
   15004:	rsb	r1, r9, #0
   15008:	add	r0, r4, r0
   1500c:	cmp	r1, r0
   15010:	movhi	r0, r1
   15014:	sub	r4, r4, r0
   15018:	ldr	r2, [sp]
   1501c:	strb	r5, [r4]
   15020:	add	r0, r7, r8
   15024:	add	r9, r0, r6
   15028:	ldr	r6, [sp, #8]
   1502c:	mov	r0, r2
   15030:	bl	14d74 <__assert_fail@plt+0x3a50>
   15034:	mov	r0, r6
   15038:	bl	14d74 <__assert_fail@plt+0x3a50>
   1503c:	mov	r0, r9
   15040:	sub	sp, fp, #28
   15044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15048:	mov	r6, #0
   1504c:	ldr	r3, [fp, #12]
   15050:	mvn	r9, #0
   15054:	mov	r2, #0
   15058:	mov	r7, r8
   1505c:	mov	r0, #0
   15060:	tst	r3, #1
   15064:	bne	14ebc <__assert_fail@plt+0x3b98>
   15068:	b	15030 <__assert_fail@plt+0x3d0c>
   1506c:	mov	r2, r6
   15070:	mov	r7, r8
   15074:	mov	r6, #0
   15078:	b	14eb8 <__assert_fail@plt+0x3b94>
   1507c:	mov	r0, r1
   15080:	mov	r1, r9
   15084:	bl	11294 <wcswidth@plt>
   15088:	mov	r7, r0
   1508c:	ldr	r0, [r5]
   15090:	ldr	r4, [sp, #4]
   15094:	mov	r6, #0
   15098:	cmp	r7, r0
   1509c:	mov	r0, r8
   150a0:	bls	15110 <__assert_fail@plt+0x3dec>
   150a4:	add	r6, r0, #1
   150a8:	mov	r0, r6
   150ac:	bl	196ac <__assert_fail@plt+0x8388>
   150b0:	cmp	r0, #0
   150b4:	beq	15118 <__assert_fail@plt+0x3df4>
   150b8:	ldr	r1, [sp]
   150bc:	str	r0, [sp, #8]
   150c0:	str	r6, [sp, #4]
   150c4:	ldr	r0, [r1]
   150c8:	cmp	r0, #0
   150cc:	beq	15138 <__assert_fail@plt+0x3e14>
   150d0:	ldr	r4, [r5]
   150d4:	mov	r8, #0
   150d8:	movw	r9, #65533	; 0xfffd
   150dc:	mov	r6, r1
   150e0:	bl	110b4 <wcwidth@plt>
   150e4:	cmn	r0, #1
   150e8:	moveq	r0, #1
   150ec:	streq	r9, [r6]
   150f0:	add	r7, r0, r8
   150f4:	cmp	r7, r4
   150f8:	bhi	15144 <__assert_fail@plt+0x3e20>
   150fc:	ldr	r0, [r6, #4]!
   15100:	mov	r8, r7
   15104:	cmp	r0, #0
   15108:	bne	150e0 <__assert_fail@plt+0x3dbc>
   1510c:	b	15148 <__assert_fail@plt+0x3e24>
   15110:	ldr	r2, [sp]
   15114:	b	14eb8 <__assert_fail@plt+0x3b94>
   15118:	ldr	r3, [fp, #12]
   1511c:	ldr	r2, [sp]
   15120:	mov	r6, #0
   15124:	mvn	r9, #0
   15128:	tst	r3, #1
   1512c:	mov	r0, r2
   15130:	bne	14ebc <__assert_fail@plt+0x3b98>
   15134:	b	15030 <__assert_fail@plt+0x3d0c>
   15138:	mov	r6, r1
   1513c:	mov	r7, #0
   15140:	b	15148 <__assert_fail@plt+0x3e24>
   15144:	mov	r7, r8
   15148:	mov	r0, #0
   1514c:	ldr	r4, [sp]
   15150:	ldr	r2, [sp, #4]
   15154:	str	r0, [r6]
   15158:	ldr	r6, [sp, #8]
   1515c:	mov	r1, r4
   15160:	mov	r0, r6
   15164:	bl	1118c <wcstombs@plt>
   15168:	mov	r2, r4
   1516c:	mov	r8, r0
   15170:	mov	r4, r6
   15174:	b	14eb8 <__assert_fail@plt+0x3b94>
   15178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1517c:	add	fp, sp, #28
   15180:	sub	sp, sp, #12
   15184:	ldr	r8, [r1]
   15188:	mov	sl, r0
   1518c:	mov	r9, r2
   15190:	mov	r6, r1
   15194:	mov	r7, #0
   15198:	str	r3, [sp, #8]
   1519c:	mov	r0, r8
   151a0:	mov	r5, r8
   151a4:	cmp	r0, r5
   151a8:	bcc	1520c <__assert_fail@plt+0x3ee8>
   151ac:	add	r5, r0, #1
   151b0:	mov	r0, r7
   151b4:	mov	r1, r5
   151b8:	bl	196dc <__assert_fail@plt+0x83b8>
   151bc:	cmp	r0, #0
   151c0:	beq	15200 <__assert_fail@plt+0x3edc>
   151c4:	mov	r4, r0
   151c8:	ldr	r0, [sp, #8]
   151cc:	str	r8, [r6]
   151d0:	mov	r2, r5
   151d4:	mov	r3, r6
   151d8:	str	r9, [sp]
   151dc:	mov	r1, r4
   151e0:	str	r0, [sp, #4]
   151e4:	mov	r0, sl
   151e8:	bl	14d9c <__assert_fail@plt+0x3a78>
   151ec:	cmn	r0, #1
   151f0:	mov	r7, r4
   151f4:	bne	151a4 <__assert_fail@plt+0x3e80>
   151f8:	mov	r0, r4
   151fc:	b	15204 <__assert_fail@plt+0x3ee0>
   15200:	mov	r0, r7
   15204:	bl	14d74 <__assert_fail@plt+0x3a50>
   15208:	mov	r7, #0
   1520c:	mov	r0, r7
   15210:	sub	sp, fp, #28
   15214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15218:	push	{r4, r5, fp, lr}
   1521c:	add	fp, sp, #8
   15220:	cmp	r0, #0
   15224:	beq	152b8 <__assert_fail@plt+0x3f94>
   15228:	mov	r1, #47	; 0x2f
   1522c:	mov	r4, r0
   15230:	bl	112a0 <strrchr@plt>
   15234:	cmp	r0, #0
   15238:	mov	r5, r4
   1523c:	addne	r5, r0, #1
   15240:	sub	r0, r5, r4
   15244:	cmp	r0, #7
   15248:	blt	1529c <__assert_fail@plt+0x3f78>
   1524c:	movw	r1, #49248	; 0xc060
   15250:	sub	r0, r5, #7
   15254:	mov	r2, #7
   15258:	movt	r1, #1
   1525c:	bl	112e8 <strncmp@plt>
   15260:	cmp	r0, #0
   15264:	bne	1529c <__assert_fail@plt+0x3f78>
   15268:	movw	r1, #49256	; 0xc068
   1526c:	mov	r0, r5
   15270:	mov	r2, #3
   15274:	movt	r1, #1
   15278:	bl	112e8 <strncmp@plt>
   1527c:	cmp	r0, #0
   15280:	beq	1528c <__assert_fail@plt+0x3f68>
   15284:	mov	r4, r5
   15288:	b	1529c <__assert_fail@plt+0x3f78>
   1528c:	movw	r0, #53624	; 0xd178
   15290:	add	r4, r5, #3
   15294:	movt	r0, #2
   15298:	str	r4, [r0]
   1529c:	movw	r0, #53628	; 0xd17c
   152a0:	movt	r0, #2
   152a4:	str	r4, [r0]
   152a8:	movw	r0, #53760	; 0xd200
   152ac:	movt	r0, #2
   152b0:	str	r4, [r0]
   152b4:	pop	{r4, r5, fp, pc}
   152b8:	movw	r0, #53640	; 0xd188
   152bc:	mov	r1, #55	; 0x37
   152c0:	mov	r2, #1
   152c4:	movt	r0, #2
   152c8:	ldr	r3, [r0]
   152cc:	movw	r0, #49192	; 0xc028
   152d0:	movt	r0, #1
   152d4:	bl	11144 <fwrite@plt>
   152d8:	bl	112f4 <abort@plt>
   152dc:	push	{r4, r5, r6, sl, fp, lr}
   152e0:	add	fp, sp, #16
   152e4:	mov	r4, r0
   152e8:	movw	r0, #53768	; 0xd208
   152ec:	movt	r0, #2
   152f0:	cmp	r4, #0
   152f4:	moveq	r4, r0
   152f8:	bl	11210 <__errno_location@plt>
   152fc:	ldr	r6, [r0]
   15300:	mov	r5, r0
   15304:	mov	r0, r4
   15308:	mov	r1, #48	; 0x30
   1530c:	bl	17ccc <__assert_fail@plt+0x69a8>
   15310:	str	r6, [r5]
   15314:	pop	{r4, r5, r6, sl, fp, pc}
   15318:	movw	r1, #53768	; 0xd208
   1531c:	cmp	r0, #0
   15320:	movt	r1, #2
   15324:	movne	r1, r0
   15328:	ldr	r0, [r1]
   1532c:	bx	lr
   15330:	movw	r2, #53768	; 0xd208
   15334:	cmp	r0, #0
   15338:	movt	r2, #2
   1533c:	movne	r2, r0
   15340:	str	r1, [r2]
   15344:	bx	lr
   15348:	movw	r3, #53768	; 0xd208
   1534c:	cmp	r0, #0
   15350:	movt	r3, #2
   15354:	movne	r3, r0
   15358:	ubfx	r0, r1, #5, #3
   1535c:	and	r1, r1, #31
   15360:	add	r0, r3, r0, lsl #2
   15364:	ldr	r3, [r0, #8]
   15368:	eor	r2, r2, r3, lsr r1
   1536c:	and	r2, r2, #1
   15370:	eor	r2, r3, r2, lsl r1
   15374:	str	r2, [r0, #8]
   15378:	mov	r0, #1
   1537c:	and	r0, r0, r3, lsr r1
   15380:	bx	lr
   15384:	movw	r2, #53768	; 0xd208
   15388:	cmp	r0, #0
   1538c:	movt	r2, #2
   15390:	movne	r2, r0
   15394:	ldr	r0, [r2, #4]
   15398:	str	r1, [r2, #4]
   1539c:	bx	lr
   153a0:	movw	r3, #53768	; 0xd208
   153a4:	cmp	r0, #0
   153a8:	movt	r3, #2
   153ac:	movne	r3, r0
   153b0:	cmp	r1, #0
   153b4:	mov	r0, #10
   153b8:	cmpne	r2, #0
   153bc:	str	r0, [r3]
   153c0:	bne	153d0 <__assert_fail@plt+0x40ac>
   153c4:	push	{fp, lr}
   153c8:	mov	fp, sp
   153cc:	bl	112f4 <abort@plt>
   153d0:	str	r1, [r3, #40]	; 0x28
   153d4:	str	r2, [r3, #44]	; 0x2c
   153d8:	bx	lr
   153dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153e0:	add	fp, sp, #28
   153e4:	sub	sp, sp, #20
   153e8:	mov	r7, r0
   153ec:	ldr	r0, [fp, #8]
   153f0:	movw	r5, #53768	; 0xd208
   153f4:	mov	r8, r3
   153f8:	mov	r9, r2
   153fc:	mov	sl, r1
   15400:	movt	r5, #2
   15404:	cmp	r0, #0
   15408:	movne	r5, r0
   1540c:	bl	11210 <__errno_location@plt>
   15410:	mov	r4, r0
   15414:	ldm	r5, {r0, r1}
   15418:	ldr	r2, [r5, #40]	; 0x28
   1541c:	ldr	r3, [r5, #44]	; 0x2c
   15420:	add	r5, r5, #8
   15424:	ldr	r6, [r4]
   15428:	stm	sp, {r0, r1, r5}
   1542c:	str	r2, [sp, #12]
   15430:	str	r3, [sp, #16]
   15434:	mov	r0, r7
   15438:	mov	r1, sl
   1543c:	mov	r2, r9
   15440:	mov	r3, r8
   15444:	bl	15454 <__assert_fail@plt+0x4130>
   15448:	str	r6, [r4]
   1544c:	sub	sp, fp, #28
   15450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15458:	add	fp, sp, #28
   1545c:	sub	sp, sp, #156	; 0x9c
   15460:	str	r0, [sp, #76]	; 0x4c
   15464:	ldr	r0, [fp, #12]
   15468:	mov	r6, r1
   1546c:	str	r3, [sp, #84]	; 0x54
   15470:	str	r2, [fp, #-84]	; 0xffffffac
   15474:	and	r1, r0, #4
   15478:	str	r1, [sp, #24]
   1547c:	and	r1, r0, #1
   15480:	str	r1, [sp, #28]
   15484:	ubfx	r8, r0, #1, #1
   15488:	bl	1115c <__ctype_get_mb_cur_max@plt>
   1548c:	str	r0, [sp, #32]
   15490:	ldr	r0, [fp, #24]
   15494:	ldr	r7, [fp, #8]
   15498:	mov	r1, #0
   1549c:	mov	r2, #0
   154a0:	mov	r4, #1
   154a4:	str	r1, [sp, #52]	; 0x34
   154a8:	str	r0, [sp, #72]	; 0x48
   154ac:	ldr	r0, [fp, #20]
   154b0:	str	r0, [sp, #68]	; 0x44
   154b4:	mov	r0, #0
   154b8:	str	r0, [sp, #48]	; 0x30
   154bc:	mov	r0, #0
   154c0:	str	r0, [sp, #92]	; 0x5c
   154c4:	mov	r0, #0
   154c8:	str	r0, [fp, #-76]	; 0xffffffb4
   154cc:	mov	r0, #0
   154d0:	cmp	r7, #10
   154d4:	bhi	167bc <__assert_fail@plt+0x5498>
   154d8:	add	r1, pc, #28
   154dc:	mov	sl, r6
   154e0:	ldr	r6, [sp, #76]	; 0x4c
   154e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   154e8:	ldr	lr, [sp, #84]	; 0x54
   154ec:	mov	r9, #0
   154f0:	mov	r3, #1
   154f4:	mov	r5, #0
   154f8:	ldr	pc, [r1, r7, lsl #2]
   154fc:	andeq	r5, r1, ip, asr #11
   15500:	andeq	r5, r1, r8, lsl #12
   15504:	ldrdeq	r5, [r1], -ip
   15508:	andeq	r5, r1, r4, asr #11
   1550c:	strdeq	r5, [r1], -ip
   15510:	andeq	r5, r1, r0, lsr r6
   15514:	andeq	r5, r1, ip, ror #11
   15518:	andeq	r5, r1, ip, lsr r8
   1551c:	andeq	r5, r1, r8, lsr #10
   15520:	andeq	r5, r1, r8, lsr #10
   15524:	ldrdeq	r5, [r1], -r0
   15528:	mov	r9, r4
   1552c:	movw	r4, #49338	; 0xc0ba
   15530:	mov	r5, r8
   15534:	mov	r8, r2
   15538:	mov	r0, #0
   1553c:	mov	r2, #5
   15540:	movt	r4, #1
   15544:	mov	r1, r4
   15548:	bl	11114 <dcgettext@plt>
   1554c:	cmp	r0, r4
   15550:	str	r0, [sp, #68]	; 0x44
   15554:	bne	156e4 <__assert_fail@plt+0x43c0>
   15558:	bl	1995c <__assert_fail@plt+0x8638>
   1555c:	ldrb	r1, [r0]
   15560:	and	r1, r1, #223	; 0xdf
   15564:	cmp	r1, #71	; 0x47
   15568:	beq	156b0 <__assert_fail@plt+0x438c>
   1556c:	cmp	r1, #85	; 0x55
   15570:	bne	156c8 <__assert_fail@plt+0x43a4>
   15574:	ldrb	r1, [r0, #1]
   15578:	and	r1, r1, #223	; 0xdf
   1557c:	cmp	r1, #84	; 0x54
   15580:	bne	156c8 <__assert_fail@plt+0x43a4>
   15584:	ldrb	r1, [r0, #2]
   15588:	and	r1, r1, #223	; 0xdf
   1558c:	cmp	r1, #70	; 0x46
   15590:	bne	156c8 <__assert_fail@plt+0x43a4>
   15594:	ldrb	r1, [r0, #3]
   15598:	cmp	r1, #45	; 0x2d
   1559c:	ldrbeq	r1, [r0, #4]
   155a0:	cmpeq	r1, #56	; 0x38
   155a4:	bne	156c8 <__assert_fail@plt+0x43a4>
   155a8:	ldrb	r0, [r0, #5]
   155ac:	cmp	r0, #0
   155b0:	movw	r0, #49342	; 0xc0be
   155b4:	movt	r0, #1
   155b8:	str	r0, [sp, #68]	; 0x44
   155bc:	bne	156c8 <__assert_fail@plt+0x43a4>
   155c0:	b	156e4 <__assert_fail@plt+0x43c0>
   155c4:	mov	r0, #1
   155c8:	b	15608 <__assert_fail@plt+0x42e4>
   155cc:	mov	r7, #0
   155d0:	mov	r9, #0
   155d4:	mov	r3, r0
   155d8:	b	156a8 <__assert_fail@plt+0x4384>
   155dc:	tst	r8, #1
   155e0:	bne	15608 <__assert_fail@plt+0x42e4>
   155e4:	mov	r3, r0
   155e8:	b	15660 <__assert_fail@plt+0x433c>
   155ec:	mov	r0, #1
   155f0:	mov	r9, #0
   155f4:	mov	r7, #5
   155f8:	b	15644 <__assert_fail@plt+0x4320>
   155fc:	mov	r3, #1
   15600:	tst	r8, #1
   15604:	beq	15660 <__assert_fail@plt+0x433c>
   15608:	mov	r1, #1
   1560c:	mov	r9, #0
   15610:	mov	r7, #2
   15614:	mov	r3, r0
   15618:	mov	r5, #1
   1561c:	str	r1, [fp, #-76]	; 0xffffffb4
   15620:	movw	r1, #49340	; 0xc0bc
   15624:	movt	r1, #1
   15628:	str	r1, [sp, #92]	; 0x5c
   1562c:	b	1583c <__assert_fail@plt+0x4518>
   15630:	mov	r7, #5
   15634:	tst	r8, #1
   15638:	beq	15680 <__assert_fail@plt+0x435c>
   1563c:	mov	r0, #1
   15640:	mov	r9, #0
   15644:	str	r0, [fp, #-76]	; 0xffffffb4
   15648:	movw	r0, #49336	; 0xc0b8
   1564c:	mov	r3, #1
   15650:	mov	r5, #1
   15654:	movt	r0, #1
   15658:	str	r0, [sp, #92]	; 0x5c
   1565c:	b	1583c <__assert_fail@plt+0x4518>
   15660:	cmp	sl, #0
   15664:	mov	r9, #1
   15668:	mov	r7, #2
   1566c:	movne	r0, #39	; 0x27
   15670:	strbne	r0, [r6]
   15674:	movw	r0, #49340	; 0xc0bc
   15678:	movt	r0, #1
   1567c:	b	1569c <__assert_fail@plt+0x4378>
   15680:	cmp	sl, #0
   15684:	mov	r9, #1
   15688:	mov	r3, #1
   1568c:	movne	r0, #34	; 0x22
   15690:	strbne	r0, [r6]
   15694:	movw	r0, #49336	; 0xc0b8
   15698:	movt	r0, #1
   1569c:	str	r0, [sp, #92]	; 0x5c
   156a0:	mov	r0, #1
   156a4:	str	r0, [fp, #-76]	; 0xffffffb4
   156a8:	mov	r5, #0
   156ac:	b	1583c <__assert_fail@plt+0x4518>
   156b0:	ldrb	r1, [r0, #1]
   156b4:	and	r1, r1, #223	; 0xdf
   156b8:	cmp	r1, #66	; 0x42
   156bc:	ldrbeq	r1, [r0, #2]
   156c0:	cmpeq	r1, #49	; 0x31
   156c4:	beq	165e4 <__assert_fail@plt+0x52c0>
   156c8:	movw	r0, #49340	; 0xc0bc
   156cc:	movw	r1, #49336	; 0xc0b8
   156d0:	cmp	r7, #9
   156d4:	movt	r0, #1
   156d8:	movt	r1, #1
   156dc:	moveq	r0, r1
   156e0:	str	r0, [sp, #68]	; 0x44
   156e4:	movw	r4, #49340	; 0xc0bc
   156e8:	mov	r0, #0
   156ec:	mov	r2, #5
   156f0:	movt	r4, #1
   156f4:	mov	r1, r4
   156f8:	bl	11114 <dcgettext@plt>
   156fc:	cmp	r0, r4
   15700:	str	r0, [sp, #72]	; 0x48
   15704:	beq	15714 <__assert_fail@plt+0x43f0>
   15708:	mov	r4, r9
   1570c:	mov	r2, r8
   15710:	b	157cc <__assert_fail@plt+0x44a8>
   15714:	bl	1995c <__assert_fail@plt+0x8638>
   15718:	ldrb	r1, [r0]
   1571c:	mov	r4, r9
   15720:	and	r1, r1, #223	; 0xdf
   15724:	cmp	r1, #71	; 0x47
   15728:	beq	15784 <__assert_fail@plt+0x4460>
   1572c:	cmp	r1, #85	; 0x55
   15730:	mov	r2, r8
   15734:	bne	157ac <__assert_fail@plt+0x4488>
   15738:	ldrb	r1, [r0, #1]
   1573c:	and	r1, r1, #223	; 0xdf
   15740:	cmp	r1, #84	; 0x54
   15744:	bne	157ac <__assert_fail@plt+0x4488>
   15748:	ldrb	r1, [r0, #2]
   1574c:	and	r1, r1, #223	; 0xdf
   15750:	cmp	r1, #70	; 0x46
   15754:	ldrbeq	r1, [r0, #3]
   15758:	cmpeq	r1, #45	; 0x2d
   1575c:	bne	157ac <__assert_fail@plt+0x4488>
   15760:	ldrb	r1, [r0, #4]
   15764:	cmp	r1, #56	; 0x38
   15768:	ldrbeq	r0, [r0, #5]
   1576c:	cmpeq	r0, #0
   15770:	bne	157ac <__assert_fail@plt+0x4488>
   15774:	movw	r0, #49346	; 0xc0c2
   15778:	movt	r0, #1
   1577c:	str	r0, [sp, #72]	; 0x48
   15780:	b	157cc <__assert_fail@plt+0x44a8>
   15784:	ldrb	r1, [r0, #1]
   15788:	mov	r2, r8
   1578c:	and	r1, r1, #223	; 0xdf
   15790:	cmp	r1, #66	; 0x42
   15794:	bne	157ac <__assert_fail@plt+0x4488>
   15798:	ldrb	r1, [r0, #2]
   1579c:	cmp	r1, #49	; 0x31
   157a0:	ldrbeq	r1, [r0, #3]
   157a4:	cmpeq	r1, #56	; 0x38
   157a8:	beq	16628 <__assert_fail@plt+0x5304>
   157ac:	movw	r0, #49340	; 0xc0bc
   157b0:	cmp	r7, #9
   157b4:	movt	r0, #1
   157b8:	mov	r1, r0
   157bc:	movw	r0, #49336	; 0xc0b8
   157c0:	movt	r0, #1
   157c4:	moveq	r1, r0
   157c8:	str	r1, [sp, #72]	; 0x48
   157cc:	mov	r8, r5
   157d0:	mov	r9, #0
   157d4:	tst	r8, #1
   157d8:	mov	r5, r8
   157dc:	str	r2, [fp, #-48]	; 0xffffffd0
   157e0:	bne	15818 <__assert_fail@plt+0x44f4>
   157e4:	ldr	r0, [sp, #68]	; 0x44
   157e8:	ldrb	r0, [r0]
   157ec:	cmp	r0, #0
   157f0:	beq	15818 <__assert_fail@plt+0x44f4>
   157f4:	ldr	r1, [sp, #68]	; 0x44
   157f8:	mov	r9, #0
   157fc:	add	r1, r1, #1
   15800:	cmp	r9, sl
   15804:	strbcc	r0, [r6, r9]
   15808:	ldrb	r0, [r1, r9]
   1580c:	add	r9, r9, #1
   15810:	cmp	r0, #0
   15814:	bne	15800 <__assert_fail@plt+0x44dc>
   15818:	ldr	r8, [sp, #72]	; 0x48
   1581c:	mov	r0, r8
   15820:	bl	111f8 <strlen@plt>
   15824:	ldr	ip, [fp, #-84]	; 0xffffffac
   15828:	ldr	lr, [sp, #84]	; 0x54
   1582c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15830:	str	r0, [fp, #-76]	; 0xffffffb4
   15834:	str	r8, [sp, #92]	; 0x5c
   15838:	mov	r3, #1
   1583c:	ldr	r0, [fp, #16]
   15840:	str	r7, [fp, #-64]	; 0xffffffc0
   15844:	str	r5, [fp, #-72]	; 0xffffffb8
   15848:	str	r3, [sp, #80]	; 0x50
   1584c:	cmp	r0, #0
   15850:	movwne	r0, #1
   15854:	and	r0, r0, r5
   15858:	str	r0, [fp, #-88]	; 0xffffffa8
   1585c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15860:	cmp	r0, #0
   15864:	movwne	r0, #1
   15868:	subs	r7, r7, #2
   1586c:	and	r1, r0, r5
   15870:	str	r7, [fp, #-80]	; 0xffffffb0
   15874:	and	r1, r3, r1
   15878:	str	r1, [sp, #40]	; 0x28
   1587c:	clz	r1, r7
   15880:	lsr	r1, r1, #5
   15884:	and	r1, r1, r5
   15888:	eor	r5, r5, #1
   1588c:	str	r1, [sp, #36]	; 0x24
   15890:	mov	r1, r7
   15894:	str	r5, [sp, #88]	; 0x58
   15898:	mov	r7, #0
   1589c:	movwne	r1, #1
   158a0:	orr	r5, r1, r5
   158a4:	and	r1, r1, r3
   158a8:	and	r0, r0, r1
   158ac:	str	r5, [sp, #60]	; 0x3c
   158b0:	str	r1, [fp, #-68]	; 0xffffffbc
   158b4:	str	r0, [fp, #-60]	; 0xffffffc4
   158b8:	eor	r0, r3, #1
   158bc:	str	r0, [sp, #44]	; 0x2c
   158c0:	cmn	lr, #1
   158c4:	beq	158d4 <__assert_fail@plt+0x45b0>
   158c8:	cmp	r7, lr
   158cc:	bne	158e0 <__assert_fail@plt+0x45bc>
   158d0:	b	16558 <__assert_fail@plt+0x5234>
   158d4:	ldrb	r0, [ip, r7]
   158d8:	cmp	r0, #0
   158dc:	beq	16560 <__assert_fail@plt+0x523c>
   158e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   158e4:	mov	r8, #0
   158e8:	str	r4, [fp, #-52]	; 0xffffffcc
   158ec:	str	r2, [fp, #-48]	; 0xffffffd0
   158f0:	cmp	r0, #0
   158f4:	beq	15928 <__assert_fail@plt+0x4604>
   158f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   158fc:	add	r4, r7, r0
   15900:	cmp	r0, #2
   15904:	bcc	15920 <__assert_fail@plt+0x45fc>
   15908:	cmn	lr, #1
   1590c:	bne	15920 <__assert_fail@plt+0x45fc>
   15910:	mov	r0, ip
   15914:	bl	111f8 <strlen@plt>
   15918:	ldr	ip, [fp, #-84]	; 0xffffffac
   1591c:	mov	lr, r0
   15920:	cmp	r4, lr
   15924:	bls	15940 <__assert_fail@plt+0x461c>
   15928:	mov	r0, #0
   1592c:	str	r0, [fp, #-56]	; 0xffffffc8
   15930:	ldrb	r5, [ip, r7]
   15934:	cmp	r5, #126	; 0x7e
   15938:	bls	15990 <__assert_fail@plt+0x466c>
   1593c:	b	15d98 <__assert_fail@plt+0x4a74>
   15940:	ldr	r1, [sp, #92]	; 0x5c
   15944:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15948:	add	r0, ip, r7
   1594c:	mov	r4, lr
   15950:	bl	11108 <memcmp@plt>
   15954:	ldr	r2, [sp, #88]	; 0x58
   15958:	cmp	r0, #0
   1595c:	mov	r1, r0
   15960:	movwne	r1, #1
   15964:	orr	r1, r1, r2
   15968:	tst	r1, #1
   1596c:	beq	1666c <__assert_fail@plt+0x5348>
   15970:	ldr	ip, [fp, #-84]	; 0xffffffac
   15974:	clz	r0, r0
   15978:	mov	lr, r4
   1597c:	lsr	r0, r0, #5
   15980:	str	r0, [fp, #-56]	; 0xffffffc8
   15984:	ldrb	r5, [ip, r7]
   15988:	cmp	r5, #126	; 0x7e
   1598c:	bhi	15d98 <__assert_fail@plt+0x4a74>
   15990:	add	r3, pc, #16
   15994:	mov	r4, #1
   15998:	mov	r2, #110	; 0x6e
   1599c:	mov	r0, #97	; 0x61
   159a0:	mov	r1, #0
   159a4:	ldr	pc, [r3, r5, lsl #2]
   159a8:	andeq	r5, r1, r8, ror ip
   159ac:	muleq	r1, r8, sp
   159b0:	muleq	r1, r8, sp
   159b4:	muleq	r1, r8, sp
   159b8:	muleq	r1, r8, sp
   159bc:	muleq	r1, r8, sp
   159c0:	muleq	r1, r8, sp
   159c4:	andeq	r5, r1, r4, ror lr
   159c8:	andeq	r5, r1, r8, asr ip
   159cc:	andeq	r5, r1, r0, asr #24
   159d0:	andeq	r5, r1, r4, ror #24
   159d4:	strdeq	r5, [r1], -r4
   159d8:	andeq	r5, r1, r8, lsr ip
   159dc:	andeq	r5, r1, r0, ror #24
   159e0:	muleq	r1, r8, sp
   159e4:	muleq	r1, r8, sp
   159e8:	muleq	r1, r8, sp
   159ec:	muleq	r1, r8, sp
   159f0:	muleq	r1, r8, sp
   159f4:	muleq	r1, r8, sp
   159f8:	muleq	r1, r8, sp
   159fc:	muleq	r1, r8, sp
   15a00:	muleq	r1, r8, sp
   15a04:	muleq	r1, r8, sp
   15a08:	muleq	r1, r8, sp
   15a0c:	muleq	r1, r8, sp
   15a10:	muleq	r1, r8, sp
   15a14:	muleq	r1, r8, sp
   15a18:	muleq	r1, r8, sp
   15a1c:	muleq	r1, r8, sp
   15a20:	muleq	r1, r8, sp
   15a24:	muleq	r1, r8, sp
   15a28:	strdeq	r5, [r1], -r0
   15a2c:	strdeq	r5, [r1], -r4
   15a30:	strdeq	r5, [r1], -r4
   15a34:	andeq	r5, r1, r4, asr #23
   15a38:	strdeq	r5, [r1], -r4
   15a3c:	andeq	r5, r1, r4, lsr #23
   15a40:	strdeq	r5, [r1], -r4
   15a44:	strdeq	r5, [r1], -ip
   15a48:	strdeq	r5, [r1], -r4
   15a4c:	strdeq	r5, [r1], -r4
   15a50:	strdeq	r5, [r1], -r4
   15a54:	andeq	r5, r1, r4, lsr #23
   15a58:	andeq	r5, r1, r4, lsr #23
   15a5c:	andeq	r5, r1, r4, lsr #23
   15a60:	andeq	r5, r1, r4, lsr #23
   15a64:	andeq	r5, r1, r4, lsr #23
   15a68:	andeq	r5, r1, r4, lsr #23
   15a6c:	andeq	r5, r1, r4, lsr #23
   15a70:	andeq	r5, r1, r4, lsr #23
   15a74:	andeq	r5, r1, r4, lsr #23
   15a78:	andeq	r5, r1, r4, lsr #23
   15a7c:	andeq	r5, r1, r4, lsr #23
   15a80:	andeq	r5, r1, r4, lsr #23
   15a84:	andeq	r5, r1, r4, lsr #23
   15a88:	andeq	r5, r1, r4, lsr #23
   15a8c:	andeq	r5, r1, r4, lsr #23
   15a90:	andeq	r5, r1, r4, lsr #23
   15a94:	strdeq	r5, [r1], -r4
   15a98:	strdeq	r5, [r1], -r4
   15a9c:	strdeq	r5, [r1], -r4
   15aa0:	strdeq	r5, [r1], -r4
   15aa4:			; <UNDEFINED> instruction: 0x00015cb8
   15aa8:	muleq	r1, r8, sp
   15aac:	andeq	r5, r1, r4, lsr #23
   15ab0:	andeq	r5, r1, r4, lsr #23
   15ab4:	andeq	r5, r1, r4, lsr #23
   15ab8:	andeq	r5, r1, r4, lsr #23
   15abc:	andeq	r5, r1, r4, lsr #23
   15ac0:	andeq	r5, r1, r4, lsr #23
   15ac4:	andeq	r5, r1, r4, lsr #23
   15ac8:	andeq	r5, r1, r4, lsr #23
   15acc:	andeq	r5, r1, r4, lsr #23
   15ad0:	andeq	r5, r1, r4, lsr #23
   15ad4:	andeq	r5, r1, r4, lsr #23
   15ad8:	andeq	r5, r1, r4, lsr #23
   15adc:	andeq	r5, r1, r4, lsr #23
   15ae0:	andeq	r5, r1, r4, lsr #23
   15ae4:	andeq	r5, r1, r4, lsr #23
   15ae8:	andeq	r5, r1, r4, lsr #23
   15aec:	andeq	r5, r1, r4, lsr #23
   15af0:	andeq	r5, r1, r4, lsr #23
   15af4:	andeq	r5, r1, r4, lsr #23
   15af8:	andeq	r5, r1, r4, lsr #23
   15afc:	andeq	r5, r1, r4, lsr #23
   15b00:	andeq	r5, r1, r4, lsr #23
   15b04:	andeq	r5, r1, r4, lsr #23
   15b08:	andeq	r5, r1, r4, lsr #23
   15b0c:	andeq	r5, r1, r4, lsr #23
   15b10:	andeq	r5, r1, r4, lsr #23
   15b14:	strdeq	r5, [r1], -r4
   15b18:	andeq	r5, r1, r4, lsl #24
   15b1c:	andeq	r5, r1, r4, lsr #23
   15b20:	strdeq	r5, [r1], -r4
   15b24:	andeq	r5, r1, r4, lsr #23
   15b28:	strdeq	r5, [r1], -r4
   15b2c:	andeq	r5, r1, r4, lsr #23
   15b30:	andeq	r5, r1, r4, lsr #23
   15b34:	andeq	r5, r1, r4, lsr #23
   15b38:	andeq	r5, r1, r4, lsr #23
   15b3c:	andeq	r5, r1, r4, lsr #23
   15b40:	andeq	r5, r1, r4, lsr #23
   15b44:	andeq	r5, r1, r4, lsr #23
   15b48:	andeq	r5, r1, r4, lsr #23
   15b4c:	andeq	r5, r1, r4, lsr #23
   15b50:	andeq	r5, r1, r4, lsr #23
   15b54:	andeq	r5, r1, r4, lsr #23
   15b58:	andeq	r5, r1, r4, lsr #23
   15b5c:	andeq	r5, r1, r4, lsr #23
   15b60:	andeq	r5, r1, r4, lsr #23
   15b64:	andeq	r5, r1, r4, lsr #23
   15b68:	andeq	r5, r1, r4, lsr #23
   15b6c:	andeq	r5, r1, r4, lsr #23
   15b70:	andeq	r5, r1, r4, lsr #23
   15b74:	andeq	r5, r1, r4, lsr #23
   15b78:	andeq	r5, r1, r4, lsr #23
   15b7c:	andeq	r5, r1, r4, lsr #23
   15b80:	andeq	r5, r1, r4, lsr #23
   15b84:	andeq	r5, r1, r4, lsr #23
   15b88:	andeq	r5, r1, r4, lsr #23
   15b8c:	andeq	r5, r1, r4, lsr #23
   15b90:	andeq	r5, r1, r4, lsr #23
   15b94:	andeq	r5, r1, r4, ror #23
   15b98:	strdeq	r5, [r1], -r4
   15b9c:	andeq	r5, r1, r4, ror #23
   15ba0:	andeq	r5, r1, r4, asr #23
   15ba4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ba8:	cmp	r0, #0
   15bac:	beq	15e88 <__assert_fail@plt+0x4b64>
   15bb0:	ldr	r0, [fp, #16]
   15bb4:	cmp	r0, #0
   15bb8:	mov	r0, r5
   15bbc:	bne	15e98 <__assert_fail@plt+0x4b74>
   15bc0:	b	15eb8 <__assert_fail@plt+0x4b94>
   15bc4:	mov	r4, #0
   15bc8:	cmp	r7, #0
   15bcc:	beq	15df0 <__assert_fail@plt+0x4acc>
   15bd0:	mov	r8, #0
   15bd4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15bd8:	cmp	r0, #0
   15bdc:	bne	15bb0 <__assert_fail@plt+0x488c>
   15be0:	b	15e88 <__assert_fail@plt+0x4b64>
   15be4:	mov	r4, #0
   15be8:	cmn	lr, #1
   15bec:	beq	15dc8 <__assert_fail@plt+0x4aa4>
   15bf0:	cmp	r7, #0
   15bf4:	bne	15bd0 <__assert_fail@plt+0x48ac>
   15bf8:	cmp	lr, #1
   15bfc:	beq	15df0 <__assert_fail@plt+0x4acc>
   15c00:	b	15bd0 <__assert_fail@plt+0x48ac>
   15c04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c08:	cmp	r0, #2
   15c0c:	bne	15e20 <__assert_fail@plt+0x4afc>
   15c10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c14:	tst	r0, #1
   15c18:	bne	16680 <__assert_fail@plt+0x535c>
   15c1c:	mov	r8, #0
   15c20:	mov	r0, #92	; 0x5c
   15c24:	mov	r4, #0
   15c28:	cmp	r8, #0
   15c2c:	beq	15e40 <__assert_fail@plt+0x4b1c>
   15c30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15c34:	b	15f34 <__assert_fail@plt+0x4c10>
   15c38:	mov	r0, #102	; 0x66
   15c3c:	b	15e74 <__assert_fail@plt+0x4b50>
   15c40:	mov	r2, #116	; 0x74
   15c44:	ldr	r0, [sp, #60]	; 0x3c
   15c48:	tst	r0, #1
   15c4c:	mov	r0, r2
   15c50:	bne	15e74 <__assert_fail@plt+0x4b50>
   15c54:	b	16680 <__assert_fail@plt+0x535c>
   15c58:	mov	r0, #98	; 0x62
   15c5c:	b	15e74 <__assert_fail@plt+0x4b50>
   15c60:	mov	r2, #114	; 0x72
   15c64:	ldr	r0, [sp, #60]	; 0x3c
   15c68:	tst	r0, #1
   15c6c:	mov	r0, r2
   15c70:	bne	15e74 <__assert_fail@plt+0x4b50>
   15c74:	b	16680 <__assert_fail@plt+0x535c>
   15c78:	ldr	r0, [sp, #80]	; 0x50
   15c7c:	tst	r0, #1
   15c80:	beq	15f5c <__assert_fail@plt+0x4c38>
   15c84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c88:	tst	r0, #1
   15c8c:	bne	167a8 <__assert_fail@plt+0x5484>
   15c90:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15c98:	cmp	r0, #2
   15c9c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15ca0:	movwne	r0, #1
   15ca4:	orr	r0, r0, r2
   15ca8:	tst	r0, #1
   15cac:	beq	16254 <__assert_fail@plt+0x4f30>
   15cb0:	mov	r0, r9
   15cb4:	b	16288 <__assert_fail@plt+0x4f64>
   15cb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15cbc:	mov	r8, #0
   15cc0:	mov	r5, #63	; 0x3f
   15cc4:	cmp	r0, #5
   15cc8:	beq	16110 <__assert_fail@plt+0x4dec>
   15ccc:	cmp	r0, #2
   15cd0:	bne	161c0 <__assert_fail@plt+0x4e9c>
   15cd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15cd8:	tst	r0, #1
   15cdc:	bne	16680 <__assert_fail@plt+0x535c>
   15ce0:	mov	r4, #0
   15ce4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ce8:	cmp	r0, #0
   15cec:	bne	15bb0 <__assert_fail@plt+0x488c>
   15cf0:	b	15e88 <__assert_fail@plt+0x4b64>
   15cf4:	mov	r0, #118	; 0x76
   15cf8:	b	15e74 <__assert_fail@plt+0x4b50>
   15cfc:	mov	r0, #1
   15d00:	mov	r5, #39	; 0x27
   15d04:	str	r0, [sp, #52]	; 0x34
   15d08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15d0c:	cmp	r0, #2
   15d10:	bne	15d84 <__assert_fail@plt+0x4a60>
   15d14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d18:	tst	r0, #1
   15d1c:	bne	16680 <__assert_fail@plt+0x535c>
   15d20:	ldr	r2, [sp, #48]	; 0x30
   15d24:	clz	r1, sl
   15d28:	mov	r8, #0
   15d2c:	lsr	r1, r1, #5
   15d30:	cmp	r2, #0
   15d34:	mov	r0, r2
   15d38:	movwne	r0, #1
   15d3c:	orrs	r0, r0, r1
   15d40:	moveq	r2, sl
   15d44:	moveq	sl, r0
   15d48:	cmp	r9, sl
   15d4c:	str	r2, [sp, #48]	; 0x30
   15d50:	movcc	r0, #39	; 0x27
   15d54:	strbcc	r0, [r6, r9]
   15d58:	add	r0, r9, #1
   15d5c:	cmp	r0, sl
   15d60:	movcc	r1, #92	; 0x5c
   15d64:	strbcc	r1, [r6, r0]
   15d68:	add	r0, r9, #2
   15d6c:	add	r9, r9, #3
   15d70:	cmp	r0, sl
   15d74:	movcc	r1, #39	; 0x27
   15d78:	strbcc	r1, [r6, r0]
   15d7c:	mov	r0, #0
   15d80:	str	r0, [fp, #-48]	; 0xffffffd0
   15d84:	mov	r4, #1
   15d88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15d8c:	cmp	r0, #0
   15d90:	bne	15bb0 <__assert_fail@plt+0x488c>
   15d94:	b	15e88 <__assert_fail@plt+0x4b64>
   15d98:	ldr	r0, [sp, #32]
   15d9c:	cmp	r0, #1
   15da0:	bne	15f8c <__assert_fail@plt+0x4c68>
   15da4:	str	lr, [sp, #84]	; 0x54
   15da8:	bl	111e0 <__ctype_b_loc@plt>
   15dac:	ldr	r0, [r0]
   15db0:	ldr	ip, [fp, #-84]	; 0xffffffac
   15db4:	mov	r1, #1
   15db8:	add	r0, r0, r5, lsl #1
   15dbc:	ldrb	r0, [r0, #1]
   15dc0:	ubfx	r4, r0, #6, #1
   15dc4:	b	16384 <__assert_fail@plt+0x5060>
   15dc8:	cmp	r7, #0
   15dcc:	ldrbeq	r0, [ip, #1]
   15dd0:	cmpeq	r0, #0
   15dd4:	beq	15df0 <__assert_fail@plt+0x4acc>
   15dd8:	mvn	lr, #0
   15ddc:	mov	r8, #0
   15de0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15de4:	cmp	r0, #0
   15de8:	bne	15bb0 <__assert_fail@plt+0x488c>
   15dec:	b	15e88 <__assert_fail@plt+0x4b64>
   15df0:	mov	r1, #1
   15df4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15df8:	cmp	r0, #2
   15dfc:	bne	15e0c <__assert_fail@plt+0x4ae8>
   15e00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15e04:	tst	r0, #1
   15e08:	bne	16680 <__assert_fail@plt+0x535c>
   15e0c:	mov	r4, r1
   15e10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15e14:	cmp	r0, #0
   15e18:	bne	15bb0 <__assert_fail@plt+0x488c>
   15e1c:	b	15e88 <__assert_fail@plt+0x4b64>
   15e20:	ldr	r1, [sp, #40]	; 0x28
   15e24:	mov	r8, #0
   15e28:	mov	r0, #92	; 0x5c
   15e2c:	cmp	r1, #0
   15e30:	beq	15e74 <__assert_fail@plt+0x4b50>
   15e34:	mov	r4, #0
   15e38:	cmp	r8, #0
   15e3c:	bne	15c30 <__assert_fail@plt+0x490c>
   15e40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15e44:	tst	r2, #1
   15e48:	beq	15f34 <__assert_fail@plt+0x4c10>
   15e4c:	cmp	r9, sl
   15e50:	movcc	r1, #39	; 0x27
   15e54:	strbcc	r1, [r6, r9]
   15e58:	add	r1, r9, #1
   15e5c:	add	r9, r9, #2
   15e60:	cmp	r1, sl
   15e64:	movcc	r2, #39	; 0x27
   15e68:	strbcc	r2, [r6, r1]
   15e6c:	mov	r2, #0
   15e70:	b	15f34 <__assert_fail@plt+0x4c10>
   15e74:	ldr	r1, [sp, #80]	; 0x50
   15e78:	mov	r4, #0
   15e7c:	mov	r8, #0
   15e80:	tst	r1, #1
   15e84:	bne	15ec4 <__assert_fail@plt+0x4ba0>
   15e88:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15e8c:	cmp	r0, #0
   15e90:	mov	r0, r5
   15e94:	beq	15eb8 <__assert_fail@plt+0x4b94>
   15e98:	ldr	r1, [fp, #16]
   15e9c:	ubfx	r0, r5, #5, #3
   15ea0:	mov	r2, #1
   15ea4:	ldr	r0, [r1, r0, lsl #2]
   15ea8:	and	r1, r5, #31
   15eac:	tst	r0, r2, lsl r1
   15eb0:	mov	r0, r5
   15eb4:	bne	15ec4 <__assert_fail@plt+0x4ba0>
   15eb8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15ebc:	cmp	r1, #0
   15ec0:	beq	1631c <__assert_fail@plt+0x4ff8>
   15ec4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15ec8:	tst	r1, #1
   15ecc:	bne	16660 <__assert_fail@plt+0x533c>
   15ed0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15ed4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15ed8:	cmp	r1, #2
   15edc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15ee0:	movwne	r1, #1
   15ee4:	orr	r1, r1, r2
   15ee8:	tst	r1, #1
   15eec:	bne	15f24 <__assert_fail@plt+0x4c00>
   15ef0:	cmp	r9, sl
   15ef4:	movcc	r1, #39	; 0x27
   15ef8:	strbcc	r1, [r6, r9]
   15efc:	add	r1, r9, #1
   15f00:	cmp	r1, sl
   15f04:	movcc	r2, #36	; 0x24
   15f08:	strbcc	r2, [r6, r1]
   15f0c:	add	r1, r9, #2
   15f10:	add	r9, r9, #3
   15f14:	cmp	r1, sl
   15f18:	movcc	r2, #39	; 0x27
   15f1c:	strbcc	r2, [r6, r1]
   15f20:	mov	r2, #1
   15f24:	cmp	r9, sl
   15f28:	movcc	r1, #92	; 0x5c
   15f2c:	strbcc	r1, [r6, r9]
   15f30:	add	r9, r9, #1
   15f34:	cmp	r9, sl
   15f38:	add	r7, r7, #1
   15f3c:	strbcc	r0, [r6, r9]
   15f40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15f44:	add	r9, r9, #1
   15f48:	and	r0, r0, r4
   15f4c:	mov	r4, r0
   15f50:	cmn	lr, #1
   15f54:	bne	158c8 <__assert_fail@plt+0x45a4>
   15f58:	b	158d4 <__assert_fail@plt+0x45b0>
   15f5c:	ldr	r0, [sp, #28]
   15f60:	mov	r4, #0
   15f64:	mov	r8, #0
   15f68:	mov	r5, #0
   15f6c:	cmp	r0, #0
   15f70:	beq	15e88 <__assert_fail@plt+0x4b64>
   15f74:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15f78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15f7c:	add	r7, r7, #1
   15f80:	cmn	lr, #1
   15f84:	bne	158c8 <__assert_fail@plt+0x45a4>
   15f88:	b	158d4 <__assert_fail@plt+0x45b0>
   15f8c:	mov	r0, #0
   15f90:	cmn	lr, #1
   15f94:	str	r0, [fp, #-36]	; 0xffffffdc
   15f98:	str	r0, [fp, #-40]	; 0xffffffd8
   15f9c:	bne	15fb0 <__assert_fail@plt+0x4c8c>
   15fa0:	mov	r0, ip
   15fa4:	bl	111f8 <strlen@plt>
   15fa8:	ldr	ip, [fp, #-84]	; 0xffffffac
   15fac:	mov	lr, r0
   15fb0:	ldr	r0, [sp, #36]	; 0x24
   15fb4:	str	sl, [sp, #56]	; 0x38
   15fb8:	str	lr, [sp, #84]	; 0x54
   15fbc:	cmp	r0, #0
   15fc0:	beq	161d8 <__assert_fail@plt+0x4eb4>
   15fc4:	add	r0, ip, r7
   15fc8:	mov	r4, #1
   15fcc:	mov	r6, #0
   15fd0:	sub	sl, fp, #40	; 0x28
   15fd4:	str	r0, [sp, #20]
   15fd8:	str	r6, [sp, #64]	; 0x40
   15fdc:	add	r6, r6, r7
   15fe0:	sub	r0, fp, #44	; 0x2c
   15fe4:	mov	r3, sl
   15fe8:	add	r1, ip, r6
   15fec:	sub	r2, lr, r6
   15ff0:	bl	19994 <__assert_fail@plt+0x8670>
   15ff4:	cmn	r0, #2
   15ff8:	beq	16334 <__assert_fail@plt+0x5010>
   15ffc:	ldr	sl, [sp, #56]	; 0x38
   16000:	cmn	r0, #1
   16004:	beq	16328 <__assert_fail@plt+0x5004>
   16008:	cmp	r0, #0
   1600c:	beq	1632c <__assert_fail@plt+0x5008>
   16010:	cmp	r0, #2
   16014:	bcc	160d4 <__assert_fail@plt+0x4db0>
   16018:	ldr	r1, [sp, #64]	; 0x40
   1601c:	ldr	r2, [sp, #20]
   16020:	add	r1, r2, r1
   16024:	mov	r2, #1
   16028:	ldrb	r3, [r1, r2]
   1602c:	sub	r3, r3, #91	; 0x5b
   16030:	cmp	r3, #33	; 0x21
   16034:	bhi	160c8 <__assert_fail@plt+0x4da4>
   16038:	add	r6, pc, #0
   1603c:	ldr	pc, [r6, r3, lsl #2]
   16040:	andeq	r6, r1, ip, lsl #13
   16044:	andeq	r6, r1, ip, lsl #13
   16048:	andeq	r6, r1, r8, asr #1
   1604c:	andeq	r6, r1, ip, lsl #13
   16050:	andeq	r6, r1, r8, asr #1
   16054:	andeq	r6, r1, ip, lsl #13
   16058:	andeq	r6, r1, r8, asr #1
   1605c:	andeq	r6, r1, r8, asr #1
   16060:	andeq	r6, r1, r8, asr #1
   16064:	andeq	r6, r1, r8, asr #1
   16068:	andeq	r6, r1, r8, asr #1
   1606c:	andeq	r6, r1, r8, asr #1
   16070:	andeq	r6, r1, r8, asr #1
   16074:	andeq	r6, r1, r8, asr #1
   16078:	andeq	r6, r1, r8, asr #1
   1607c:	andeq	r6, r1, r8, asr #1
   16080:	andeq	r6, r1, r8, asr #1
   16084:	andeq	r6, r1, r8, asr #1
   16088:	andeq	r6, r1, r8, asr #1
   1608c:	andeq	r6, r1, r8, asr #1
   16090:	andeq	r6, r1, r8, asr #1
   16094:	andeq	r6, r1, r8, asr #1
   16098:	andeq	r6, r1, r8, asr #1
   1609c:	andeq	r6, r1, r8, asr #1
   160a0:	andeq	r6, r1, r8, asr #1
   160a4:	andeq	r6, r1, r8, asr #1
   160a8:	andeq	r6, r1, r8, asr #1
   160ac:	andeq	r6, r1, r8, asr #1
   160b0:	andeq	r6, r1, r8, asr #1
   160b4:	andeq	r6, r1, r8, asr #1
   160b8:	andeq	r6, r1, r8, asr #1
   160bc:	andeq	r6, r1, r8, asr #1
   160c0:	andeq	r6, r1, r8, asr #1
   160c4:	andeq	r6, r1, ip, lsl #13
   160c8:	add	r2, r2, #1
   160cc:	cmp	r2, r0
   160d0:	bcc	16028 <__assert_fail@plt+0x4d04>
   160d4:	ldr	r6, [sp, #64]	; 0x40
   160d8:	add	r6, r0, r6
   160dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   160e0:	bl	11138 <iswprint@plt>
   160e4:	cmp	r0, #0
   160e8:	sub	sl, fp, #40	; 0x28
   160ec:	movwne	r0, #1
   160f0:	and	r4, r4, r0
   160f4:	mov	r0, sl
   160f8:	bl	110fc <mbsinit@plt>
   160fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   16100:	ldr	lr, [sp, #84]	; 0x54
   16104:	cmp	r0, #0
   16108:	beq	15fd8 <__assert_fail@plt+0x4cb4>
   1610c:	b	16378 <__assert_fail@plt+0x5054>
   16110:	ldr	r0, [sp, #24]
   16114:	cmp	r0, #0
   16118:	beq	161c0 <__assert_fail@plt+0x4e9c>
   1611c:	add	r0, r7, #2
   16120:	cmp	r0, lr
   16124:	bcs	161c0 <__assert_fail@plt+0x4e9c>
   16128:	add	r1, ip, r7
   1612c:	ldrb	r1, [r1, #1]
   16130:	cmp	r1, #63	; 0x3f
   16134:	bne	161c0 <__assert_fail@plt+0x4e9c>
   16138:	ldrb	r5, [ip, r0]
   1613c:	sub	r1, r5, #33	; 0x21
   16140:	cmp	r1, #29
   16144:	bhi	161c0 <__assert_fail@plt+0x4e9c>
   16148:	movw	r3, #20929	; 0x51c1
   1614c:	mov	r2, #1
   16150:	movt	r3, #14336	; 0x3800
   16154:	tst	r3, r2, lsl r1
   16158:	beq	161c0 <__assert_fail@plt+0x4e9c>
   1615c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16160:	tst	r1, #1
   16164:	bne	167b0 <__assert_fail@plt+0x548c>
   16168:	cmp	r9, sl
   1616c:	mov	r7, r0
   16170:	mov	r4, #0
   16174:	movcc	r1, #63	; 0x3f
   16178:	strbcc	r1, [r6, r9]
   1617c:	add	r1, r9, #1
   16180:	cmp	r1, sl
   16184:	movcc	r2, #34	; 0x22
   16188:	strbcc	r2, [r6, r1]
   1618c:	add	r1, r9, #2
   16190:	cmp	r1, sl
   16194:	movcc	r2, #34	; 0x22
   16198:	strbcc	r2, [r6, r1]
   1619c:	add	r1, r9, #3
   161a0:	add	r9, r9, #4
   161a4:	cmp	r1, sl
   161a8:	movcc	r2, #63	; 0x3f
   161ac:	strbcc	r2, [r6, r1]
   161b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   161b4:	cmp	r0, #0
   161b8:	bne	15bb0 <__assert_fail@plt+0x488c>
   161bc:	b	15e88 <__assert_fail@plt+0x4b64>
   161c0:	mov	r5, #63	; 0x3f
   161c4:	mov	r4, #0
   161c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   161cc:	cmp	r0, #0
   161d0:	bne	15bb0 <__assert_fail@plt+0x488c>
   161d4:	b	15e88 <__assert_fail@plt+0x4b64>
   161d8:	mov	r4, #1
   161dc:	mov	r6, #0
   161e0:	sub	sl, fp, #40	; 0x28
   161e4:	str	r6, [sp, #64]	; 0x40
   161e8:	add	r6, r6, r7
   161ec:	sub	r0, fp, #44	; 0x2c
   161f0:	mov	r3, sl
   161f4:	add	r1, ip, r6
   161f8:	sub	r2, lr, r6
   161fc:	bl	19994 <__assert_fail@plt+0x8670>
   16200:	cmn	r0, #2
   16204:	beq	16334 <__assert_fail@plt+0x5010>
   16208:	cmn	r0, #1
   1620c:	beq	16328 <__assert_fail@plt+0x5004>
   16210:	ldr	r6, [sp, #64]	; 0x40
   16214:	cmp	r0, #0
   16218:	beq	16374 <__assert_fail@plt+0x5050>
   1621c:	add	r6, r0, r6
   16220:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16224:	bl	11138 <iswprint@plt>
   16228:	cmp	r0, #0
   1622c:	sub	sl, fp, #40	; 0x28
   16230:	movwne	r0, #1
   16234:	and	r4, r4, r0
   16238:	mov	r0, sl
   1623c:	bl	110fc <mbsinit@plt>
   16240:	ldr	ip, [fp, #-84]	; 0xffffffac
   16244:	ldr	lr, [sp, #84]	; 0x54
   16248:	cmp	r0, #0
   1624c:	beq	161e4 <__assert_fail@plt+0x4ec0>
   16250:	b	16378 <__assert_fail@plt+0x5054>
   16254:	cmp	r9, sl
   16258:	mov	r2, #1
   1625c:	movcc	r0, #39	; 0x27
   16260:	strbcc	r0, [r6, r9]
   16264:	add	r0, r9, #1
   16268:	cmp	r0, sl
   1626c:	movcc	r1, #36	; 0x24
   16270:	strbcc	r1, [r6, r0]
   16274:	add	r0, r9, #2
   16278:	cmp	r0, sl
   1627c:	movcc	r1, #39	; 0x27
   16280:	strbcc	r1, [r6, r0]
   16284:	add	r0, r9, #3
   16288:	cmp	r0, sl
   1628c:	add	r9, r0, #1
   16290:	str	r2, [fp, #-48]	; 0xffffffd0
   16294:	movcc	r1, #92	; 0x5c
   16298:	strbcc	r1, [r6, r0]
   1629c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   162a0:	cmp	r1, #2
   162a4:	beq	16304 <__assert_fail@plt+0x4fe0>
   162a8:	add	r1, r7, #1
   162ac:	mov	r4, #0
   162b0:	mov	r8, #1
   162b4:	mov	r5, #48	; 0x30
   162b8:	cmp	r1, lr
   162bc:	bcs	15ba4 <__assert_fail@plt+0x4880>
   162c0:	ldrb	r1, [ip, r1]
   162c4:	sub	r1, r1, #48	; 0x30
   162c8:	uxtb	r1, r1
   162cc:	cmp	r1, #9
   162d0:	bhi	15ba4 <__assert_fail@plt+0x4880>
   162d4:	cmp	r9, sl
   162d8:	movcc	r1, #48	; 0x30
   162dc:	strbcc	r1, [r6, r9]
   162e0:	add	r1, r0, #2
   162e4:	add	r9, r0, #3
   162e8:	cmp	r1, sl
   162ec:	movcc	r2, #48	; 0x30
   162f0:	strbcc	r2, [r6, r1]
   162f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   162f8:	cmp	r0, #0
   162fc:	bne	15bb0 <__assert_fail@plt+0x488c>
   16300:	b	15e88 <__assert_fail@plt+0x4b64>
   16304:	mov	r0, #48	; 0x30
   16308:	mov	r8, #1
   1630c:	mov	r4, #0
   16310:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16314:	cmp	r1, #0
   16318:	bne	15ec4 <__assert_fail@plt+0x4ba0>
   1631c:	cmp	r8, #0
   16320:	beq	15e40 <__assert_fail@plt+0x4b1c>
   16324:	b	15c30 <__assert_fail@plt+0x490c>
   16328:	mov	r4, #0
   1632c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16330:	b	1636c <__assert_fail@plt+0x5048>
   16334:	ldr	r1, [sp, #84]	; 0x54
   16338:	ldr	ip, [fp, #-84]	; 0xffffffac
   1633c:	mov	r4, #0
   16340:	cmp	r6, r1
   16344:	bcs	1636c <__assert_fail@plt+0x5048>
   16348:	ldrb	r0, [ip, r6]
   1634c:	cmp	r0, #0
   16350:	beq	1636c <__assert_fail@plt+0x5048>
   16354:	ldr	r0, [sp, #64]	; 0x40
   16358:	add	r0, r0, #1
   1635c:	add	r6, r0, r7
   16360:	str	r0, [sp, #64]	; 0x40
   16364:	cmp	r6, r1
   16368:	bcc	16348 <__assert_fail@plt+0x5024>
   1636c:	ldr	r6, [sp, #64]	; 0x40
   16370:	b	16378 <__assert_fail@plt+0x5054>
   16374:	ldr	ip, [fp, #-84]	; 0xffffffac
   16378:	mov	r1, r6
   1637c:	ldr	r6, [sp, #76]	; 0x4c
   16380:	ldr	sl, [sp, #56]	; 0x38
   16384:	ldr	r0, [sp, #44]	; 0x2c
   16388:	cmp	r1, #1
   1638c:	orr	r2, r4, r0
   16390:	mov	r0, r1
   16394:	bhi	163b4 <__assert_fail@plt+0x5090>
   16398:	tst	r2, #1
   1639c:	beq	163b4 <__assert_fail@plt+0x5090>
   163a0:	ldr	lr, [sp, #84]	; 0x54
   163a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   163a8:	cmp	r0, #0
   163ac:	bne	15bb0 <__assert_fail@plt+0x488c>
   163b0:	b	15e88 <__assert_fail@plt+0x4b64>
   163b4:	str	r2, [sp, #64]	; 0x40
   163b8:	add	r0, r0, r7
   163bc:	add	r1, r7, #1
   163c0:	ldr	lr, [sp, #84]	; 0x54
   163c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   163c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   163cc:	mov	r3, #0
   163d0:	str	r0, [sp, #56]	; 0x38
   163d4:	ldr	r0, [sp, #64]	; 0x40
   163d8:	tst	r0, #1
   163dc:	bne	164c4 <__assert_fail@plt+0x51a0>
   163e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   163e4:	tst	r0, #1
   163e8:	bne	16664 <__assert_fail@plt+0x5340>
   163ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   163f0:	cmp	r7, #2
   163f4:	movwne	r3, #1
   163f8:	orr	r3, r3, r2
   163fc:	tst	r3, #1
   16400:	bne	16438 <__assert_fail@plt+0x5114>
   16404:	cmp	r9, sl
   16408:	add	r3, r9, #1
   1640c:	movcc	r2, #39	; 0x27
   16410:	strbcc	r2, [r6, r9]
   16414:	cmp	r3, sl
   16418:	movcc	r2, #36	; 0x24
   1641c:	strbcc	r2, [r6, r3]
   16420:	add	r3, r9, #2
   16424:	add	r9, r9, #3
   16428:	cmp	r3, sl
   1642c:	movcc	r2, #39	; 0x27
   16430:	strbcc	r2, [r6, r3]
   16434:	mov	r2, #1
   16438:	cmp	r9, sl
   1643c:	mov	r0, r2
   16440:	movcc	r3, #92	; 0x5c
   16444:	strbcc	r3, [r6, r9]
   16448:	add	r3, r9, #1
   1644c:	cmp	r3, sl
   16450:	andcc	r7, r5, #192	; 0xc0
   16454:	movcc	r2, #48	; 0x30
   16458:	orrcc	r7, r2, r7, lsr #6
   1645c:	strbcc	r7, [r6, r3]
   16460:	add	r3, r9, #2
   16464:	add	r9, r9, #3
   16468:	cmp	r3, sl
   1646c:	lsrcc	r7, r5, #3
   16470:	movcc	r2, #6
   16474:	bficc	r7, r2, #3, #29
   16478:	mov	r2, #6
   1647c:	strbcc	r7, [r6, r3]
   16480:	bfi	r5, r2, #3, #29
   16484:	mov	r3, #1
   16488:	mov	r2, r0
   1648c:	ldr	r0, [sp, #56]	; 0x38
   16490:	and	r8, r3, #1
   16494:	cmp	r0, r1
   16498:	bhi	164f8 <__assert_fail@plt+0x51d4>
   1649c:	b	16538 <__assert_fail@plt+0x5214>
   164a0:	cmp	r9, sl
   164a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   164a8:	strbcc	r5, [r6, r9]
   164ac:	add	r9, r9, #1
   164b0:	ldrb	r5, [ip, r1]
   164b4:	add	r1, r1, #1
   164b8:	ldr	r0, [sp, #64]	; 0x40
   164bc:	tst	r0, #1
   164c0:	beq	163e0 <__assert_fail@plt+0x50bc>
   164c4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   164c8:	tst	r7, #1
   164cc:	beq	164e0 <__assert_fail@plt+0x51bc>
   164d0:	cmp	r9, sl
   164d4:	movcc	r7, #92	; 0x5c
   164d8:	strbcc	r7, [r6, r9]
   164dc:	add	r9, r9, #1
   164e0:	mov	r7, #0
   164e4:	str	r7, [fp, #-56]	; 0xffffffc8
   164e8:	ldr	r0, [sp, #56]	; 0x38
   164ec:	and	r8, r3, #1
   164f0:	cmp	r0, r1
   164f4:	bls	16538 <__assert_fail@plt+0x5214>
   164f8:	cmp	r8, #0
   164fc:	mvn	r7, r2
   16500:	movwne	r8, #1
   16504:	orr	r7, r7, r8
   16508:	tst	r7, #1
   1650c:	bne	164a0 <__assert_fail@plt+0x517c>
   16510:	cmp	r9, sl
   16514:	movcc	r7, #39	; 0x27
   16518:	strbcc	r7, [r6, r9]
   1651c:	add	r7, r9, #1
   16520:	add	r9, r9, #2
   16524:	cmp	r7, sl
   16528:	movcc	r2, #39	; 0x27
   1652c:	strbcc	r2, [r6, r7]
   16530:	mov	r2, #0
   16534:	b	164a0 <__assert_fail@plt+0x517c>
   16538:	cmp	r8, #0
   1653c:	sub	r7, r1, #1
   16540:	mov	r0, r5
   16544:	str	r2, [fp, #-48]	; 0xffffffd0
   16548:	movwne	r8, #1
   1654c:	cmp	r8, #0
   16550:	beq	15e40 <__assert_fail@plt+0x4b1c>
   16554:	b	15c30 <__assert_fail@plt+0x490c>
   16558:	mov	lr, r7
   1655c:	b	16564 <__assert_fail@plt+0x5240>
   16560:	mvn	lr, #0
   16564:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16568:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1656c:	eor	r0, r7, #2
   16570:	orr	r0, r0, r9
   16574:	clz	r0, r0
   16578:	lsr	r0, r0, #5
   1657c:	tst	r1, r0
   16580:	bne	16680 <__assert_fail@plt+0x535c>
   16584:	mov	r0, r1
   16588:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1658c:	cmp	r7, #2
   16590:	movwne	r1, #1
   16594:	orr	r0, r0, r1
   16598:	tst	r0, #1
   1659c:	ldreq	r0, [sp, #52]	; 0x34
   165a0:	streq	lr, [sp, #84]	; 0x54
   165a4:	eoreq	r0, r0, #1
   165a8:	tsteq	r0, #1
   165ac:	bne	16744 <__assert_fail@plt+0x5420>
   165b0:	tst	r4, #1
   165b4:	bne	16700 <__assert_fail@plt+0x53dc>
   165b8:	ldr	r6, [sp, #48]	; 0x30
   165bc:	mov	r8, #0
   165c0:	cmp	r6, #0
   165c4:	beq	1673c <__assert_fail@plt+0x5418>
   165c8:	ldr	r0, [sp, #80]	; 0x50
   165cc:	mov	r1, #0
   165d0:	cmp	sl, #0
   165d4:	mov	r4, #0
   165d8:	str	r1, [fp, #-72]	; 0xffffffb8
   165dc:	beq	154d0 <__assert_fail@plt+0x41ac>
   165e0:	b	16744 <__assert_fail@plt+0x5420>
   165e4:	ldrb	r1, [r0, #3]
   165e8:	cmp	r1, #56	; 0x38
   165ec:	ldrbeq	r1, [r0, #4]
   165f0:	cmpeq	r1, #48	; 0x30
   165f4:	bne	156c8 <__assert_fail@plt+0x43a4>
   165f8:	ldrb	r1, [r0, #5]
   165fc:	cmp	r1, #51	; 0x33
   16600:	ldrbeq	r1, [r0, #6]
   16604:	cmpeq	r1, #48	; 0x30
   16608:	bne	156c8 <__assert_fail@plt+0x43a4>
   1660c:	ldrb	r0, [r0, #7]
   16610:	cmp	r0, #0
   16614:	movw	r0, #49350	; 0xc0c6
   16618:	movt	r0, #1
   1661c:	str	r0, [sp, #68]	; 0x44
   16620:	bne	156c8 <__assert_fail@plt+0x43a4>
   16624:	b	156e4 <__assert_fail@plt+0x43c0>
   16628:	ldrb	r1, [r0, #4]
   1662c:	cmp	r1, #48	; 0x30
   16630:	ldrbeq	r1, [r0, #5]
   16634:	cmpeq	r1, #51	; 0x33
   16638:	bne	157ac <__assert_fail@plt+0x4488>
   1663c:	ldrb	r1, [r0, #6]
   16640:	cmp	r1, #48	; 0x30
   16644:	ldrbeq	r0, [r0, #7]
   16648:	cmpeq	r0, #0
   1664c:	bne	157ac <__assert_fail@plt+0x4488>
   16650:	movw	r0, #49354	; 0xc0ca
   16654:	movt	r0, #1
   16658:	str	r0, [sp, #72]	; 0x48
   1665c:	b	157cc <__assert_fail@plt+0x44a8>
   16660:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16664:	ldr	r2, [sp, #80]	; 0x50
   16668:	b	166a0 <__assert_fail@plt+0x537c>
   1666c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16670:	mov	r2, #1
   16674:	mov	lr, r4
   16678:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1667c:	b	166a0 <__assert_fail@plt+0x537c>
   16680:	ldr	r2, [sp, #80]	; 0x50
   16684:	mov	r7, #2
   16688:	b	166a0 <__assert_fail@plt+0x537c>
   1668c:	ldr	r6, [sp, #76]	; 0x4c
   16690:	ldr	ip, [fp, #-84]	; 0xffffffac
   16694:	ldr	lr, [sp, #84]	; 0x54
   16698:	ldr	r2, [sp, #80]	; 0x50
   1669c:	mov	r7, #2
   166a0:	mov	r0, #0
   166a4:	ldr	r1, [fp, #12]
   166a8:	tst	r2, #1
   166ac:	mov	r2, r7
   166b0:	mov	r3, lr
   166b4:	str	r0, [sp, #8]
   166b8:	ldr	r0, [sp, #68]	; 0x44
   166bc:	movwne	r2, #4
   166c0:	cmp	r7, #2
   166c4:	movne	r2, r7
   166c8:	str	r2, [sp]
   166cc:	mov	r2, ip
   166d0:	bic	r1, r1, #2
   166d4:	str	r0, [sp, #12]
   166d8:	ldr	r0, [sp, #72]	; 0x48
   166dc:	str	r1, [sp, #4]
   166e0:	mov	r1, sl
   166e4:	str	r0, [sp, #16]
   166e8:	mov	r0, r6
   166ec:	bl	15454 <__assert_fail@plt+0x4130>
   166f0:	mov	r9, r0
   166f4:	mov	r0, r9
   166f8:	sub	sp, fp, #28
   166fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16700:	mov	r0, #5
   16704:	ldr	r1, [sp, #48]	; 0x30
   16708:	ldr	r2, [fp, #-84]	; 0xffffffac
   1670c:	ldr	r3, [sp, #84]	; 0x54
   16710:	str	r0, [sp]
   16714:	ldr	r0, [fp, #12]
   16718:	str	r0, [sp, #4]
   1671c:	ldr	r0, [fp, #16]
   16720:	str	r0, [sp, #8]
   16724:	ldr	r0, [sp, #68]	; 0x44
   16728:	str	r0, [sp, #12]
   1672c:	ldr	r0, [sp, #72]	; 0x48
   16730:	str	r0, [sp, #16]
   16734:	ldr	r0, [sp, #76]	; 0x4c
   16738:	b	166ec <__assert_fail@plt+0x53c8>
   1673c:	mov	r0, #0
   16740:	str	r0, [fp, #-72]	; 0xffffffb8
   16744:	ldr	r1, [sp, #92]	; 0x5c
   16748:	cmp	r1, #0
   1674c:	beq	1678c <__assert_fail@plt+0x5468>
   16750:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16754:	ldr	r2, [sp, #76]	; 0x4c
   16758:	tst	r0, #1
   1675c:	bne	16790 <__assert_fail@plt+0x546c>
   16760:	ldrb	r0, [r1]
   16764:	cmp	r0, #0
   16768:	beq	16790 <__assert_fail@plt+0x546c>
   1676c:	add	r1, r1, #1
   16770:	cmp	r9, sl
   16774:	strbcc	r0, [r2, r9]
   16778:	add	r9, r9, #1
   1677c:	ldrb	r0, [r1], #1
   16780:	cmp	r0, #0
   16784:	bne	16770 <__assert_fail@plt+0x544c>
   16788:	b	16790 <__assert_fail@plt+0x546c>
   1678c:	ldr	r2, [sp, #76]	; 0x4c
   16790:	cmp	r9, sl
   16794:	movcc	r0, #0
   16798:	strbcc	r0, [r2, r9]
   1679c:	mov	r0, r9
   167a0:	sub	sp, fp, #28
   167a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167a8:	mov	r2, #1
   167ac:	b	16678 <__assert_fail@plt+0x5354>
   167b0:	ldr	r2, [sp, #80]	; 0x50
   167b4:	mov	r7, #5
   167b8:	b	166a0 <__assert_fail@plt+0x537c>
   167bc:	bl	112f4 <abort@plt>
   167c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c4:	add	fp, sp, #28
   167c8:	sub	sp, sp, #28
   167cc:	movw	r5, #53768	; 0xd208
   167d0:	cmp	r2, #0
   167d4:	mov	r4, r1
   167d8:	mov	r7, r0
   167dc:	str	r0, [sp, #20]
   167e0:	movt	r5, #2
   167e4:	movne	r5, r2
   167e8:	bl	11210 <__errno_location@plt>
   167ec:	mov	sl, r0
   167f0:	ldm	r5, {r0, r1}
   167f4:	ldr	r2, [r5, #40]	; 0x28
   167f8:	ldr	r3, [r5, #44]	; 0x2c
   167fc:	add	r9, r5, #8
   16800:	ldr	r6, [sl]
   16804:	orr	r8, r1, #1
   16808:	mov	r1, #0
   1680c:	str	r6, [sp, #24]
   16810:	stm	sp, {r0, r8, r9}
   16814:	str	r2, [sp, #12]
   16818:	str	r3, [sp, #16]
   1681c:	mov	r0, #0
   16820:	mov	r2, r7
   16824:	mov	r3, r4
   16828:	mov	r6, r4
   1682c:	bl	15454 <__assert_fail@plt+0x4130>
   16830:	add	r7, r0, #1
   16834:	mov	r0, r7
   16838:	bl	1789c <__assert_fail@plt+0x6578>
   1683c:	mov	r4, r0
   16840:	ldr	r0, [r5]
   16844:	ldr	r2, [r5, #44]	; 0x2c
   16848:	ldr	r1, [r5, #40]	; 0x28
   1684c:	mov	r3, r6
   16850:	stm	sp, {r0, r8, r9}
   16854:	str	r2, [sp, #16]
   16858:	str	r1, [sp, #12]
   1685c:	mov	r0, r4
   16860:	mov	r1, r7
   16864:	ldr	r2, [sp, #20]
   16868:	bl	15454 <__assert_fail@plt+0x4130>
   1686c:	ldr	r0, [sp, #24]
   16870:	str	r0, [sl]
   16874:	mov	r0, r4
   16878:	sub	sp, fp, #28
   1687c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16884:	add	fp, sp, #28
   16888:	sub	sp, sp, #36	; 0x24
   1688c:	movw	r8, #53768	; 0xd208
   16890:	cmp	r3, #0
   16894:	mov	r4, r2
   16898:	str	r2, [sp, #24]
   1689c:	mov	r5, r1
   168a0:	mov	r6, r0
   168a4:	str	r0, [sp, #20]
   168a8:	movt	r8, #2
   168ac:	movne	r8, r3
   168b0:	bl	11210 <__errno_location@plt>
   168b4:	str	r0, [sp, #28]
   168b8:	cmp	r4, #0
   168bc:	add	sl, r8, #8
   168c0:	ldm	r8, {r3, r9}
   168c4:	ldr	r7, [r0]
   168c8:	ldr	r1, [r8, #40]	; 0x28
   168cc:	ldr	r2, [r8, #44]	; 0x2c
   168d0:	mov	r0, #0
   168d4:	orreq	r9, r9, #1
   168d8:	str	r7, [sp, #32]
   168dc:	mov	r7, r5
   168e0:	stm	sp, {r3, r9, sl}
   168e4:	str	r1, [sp, #12]
   168e8:	str	r2, [sp, #16]
   168ec:	mov	r1, #0
   168f0:	mov	r2, r6
   168f4:	mov	r3, r5
   168f8:	bl	15454 <__assert_fail@plt+0x4130>
   168fc:	add	r4, r0, #1
   16900:	mov	r5, r0
   16904:	mov	r0, r4
   16908:	bl	1789c <__assert_fail@plt+0x6578>
   1690c:	mov	r6, r0
   16910:	ldr	r0, [r8]
   16914:	ldr	r2, [r8, #44]	; 0x2c
   16918:	ldr	r1, [r8, #40]	; 0x28
   1691c:	mov	r3, r7
   16920:	stm	sp, {r0, r9, sl}
   16924:	str	r2, [sp, #16]
   16928:	str	r1, [sp, #12]
   1692c:	mov	r0, r6
   16930:	mov	r1, r4
   16934:	ldr	r2, [sp, #20]
   16938:	bl	15454 <__assert_fail@plt+0x4130>
   1693c:	ldr	r0, [sp, #24]
   16940:	ldr	r1, [sp, #32]
   16944:	ldr	r2, [sp, #28]
   16948:	cmp	r0, #0
   1694c:	str	r1, [r2]
   16950:	strne	r5, [r0]
   16954:	mov	r0, r6
   16958:	sub	sp, fp, #28
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	push	{r4, r5, r6, r7, fp, lr}
   16964:	add	fp, sp, #16
   16968:	movw	r4, #53608	; 0xd168
   1696c:	movt	r4, #2
   16970:	ldrd	r6, [r4]
   16974:	cmp	r7, #2
   16978:	blt	169a4 <__assert_fail@plt+0x5680>
   1697c:	add	r5, r6, #12
   16980:	mov	r7, #0
   16984:	ldr	r0, [r5, r7, lsl #3]
   16988:	bl	14d74 <__assert_fail@plt+0x3a50>
   1698c:	ldr	r1, [r4, #4]
   16990:	add	r2, r7, #2
   16994:	add	r0, r7, #1
   16998:	mov	r7, r0
   1699c:	cmp	r2, r1
   169a0:	blt	16984 <__assert_fail@plt+0x5660>
   169a4:	ldr	r0, [r6, #4]
   169a8:	movw	r5, #53816	; 0xd238
   169ac:	movt	r5, #2
   169b0:	cmp	r0, r5
   169b4:	beq	169c8 <__assert_fail@plt+0x56a4>
   169b8:	bl	14d74 <__assert_fail@plt+0x3a50>
   169bc:	mov	r0, #256	; 0x100
   169c0:	str	r0, [r4, #8]
   169c4:	str	r5, [r4, #12]
   169c8:	add	r5, r4, #8
   169cc:	cmp	r6, r5
   169d0:	beq	169e0 <__assert_fail@plt+0x56bc>
   169d4:	mov	r0, r6
   169d8:	bl	14d74 <__assert_fail@plt+0x3a50>
   169dc:	str	r5, [r4]
   169e0:	mov	r0, #1
   169e4:	str	r0, [r4, #4]
   169e8:	pop	{r4, r5, r6, r7, fp, pc}
   169ec:	movw	r3, #53768	; 0xd208
   169f0:	mvn	r2, #0
   169f4:	movt	r3, #2
   169f8:	b	169fc <__assert_fail@plt+0x56d8>
   169fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a00:	add	fp, sp, #28
   16a04:	sub	sp, sp, #44	; 0x2c
   16a08:	mov	r7, r3
   16a0c:	str	r2, [sp, #36]	; 0x24
   16a10:	str	r1, [sp, #32]
   16a14:	mov	r5, r0
   16a18:	bl	11210 <__errno_location@plt>
   16a1c:	cmp	r5, #0
   16a20:	blt	16b84 <__assert_fail@plt+0x5860>
   16a24:	cmn	r5, #-2147483647	; 0x80000001
   16a28:	beq	16b84 <__assert_fail@plt+0x5860>
   16a2c:	movw	r8, #53608	; 0xd168
   16a30:	mov	r4, r0
   16a34:	movt	r8, #2
   16a38:	ldr	r6, [r8]
   16a3c:	ldr	r1, [r8, #4]
   16a40:	ldr	r0, [r0]
   16a44:	str	r4, [sp, #28]
   16a48:	cmp	r1, r5
   16a4c:	str	r0, [sp, #24]
   16a50:	ble	16a5c <__assert_fail@plt+0x5738>
   16a54:	mov	sl, r6
   16a58:	b	16ac0 <__assert_fail@plt+0x579c>
   16a5c:	mov	r0, #8
   16a60:	add	r9, r8, #8
   16a64:	add	r2, r5, #1
   16a68:	str	r1, [fp, #-32]	; 0xffffffe0
   16a6c:	mvn	r3, #-2147483648	; 0x80000000
   16a70:	str	r0, [sp]
   16a74:	subs	r0, r6, r9
   16a78:	sub	r2, r2, r1
   16a7c:	sub	r1, fp, #32
   16a80:	movne	r0, r6
   16a84:	bl	17a9c <__assert_fail@plt+0x6778>
   16a88:	str	r0, [r8]
   16a8c:	cmp	r6, r9
   16a90:	mov	sl, r0
   16a94:	ldrdeq	r0, [r8, #8]
   16a98:	stmeq	sl, {r0, r1}
   16a9c:	ldr	r1, [r8, #4]
   16aa0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16aa4:	add	r0, sl, r1, lsl #3
   16aa8:	sub	r1, r2, r1
   16aac:	lsl	r2, r1, #3
   16ab0:	mov	r1, #0
   16ab4:	bl	11228 <memset@plt>
   16ab8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16abc:	str	r0, [r8, #4]
   16ac0:	mov	r9, sl
   16ac4:	ldr	r6, [r9, r5, lsl #3]!
   16ac8:	ldr	r4, [r9, #4]!
   16acc:	ldm	r7, {r0, r1}
   16ad0:	ldr	r2, [r7, #40]	; 0x28
   16ad4:	ldr	r3, [r7, #44]	; 0x2c
   16ad8:	orr	r8, r1, #1
   16adc:	add	r1, r7, #8
   16ae0:	stm	sp, {r0, r8}
   16ae4:	add	r0, sp, #8
   16ae8:	str	r1, [sp, #20]
   16aec:	stm	r0, {r1, r2, r3}
   16af0:	mov	r0, r4
   16af4:	mov	r1, r6
   16af8:	ldr	r2, [sp, #32]
   16afc:	ldr	r3, [sp, #36]	; 0x24
   16b00:	bl	15454 <__assert_fail@plt+0x4130>
   16b04:	cmp	r6, r0
   16b08:	bhi	16b6c <__assert_fail@plt+0x5848>
   16b0c:	add	r6, r0, #1
   16b10:	movw	r0, #53816	; 0xd238
   16b14:	movt	r0, #2
   16b18:	str	r6, [sl, r5, lsl #3]
   16b1c:	cmp	r4, r0
   16b20:	beq	16b2c <__assert_fail@plt+0x5808>
   16b24:	mov	r0, r4
   16b28:	bl	14d74 <__assert_fail@plt+0x3a50>
   16b2c:	mov	r0, r6
   16b30:	bl	1789c <__assert_fail@plt+0x6578>
   16b34:	str	r0, [r9]
   16b38:	mov	r4, r0
   16b3c:	add	r3, sp, #8
   16b40:	ldr	r0, [r7]
   16b44:	ldr	r1, [r7, #40]	; 0x28
   16b48:	ldr	r2, [r7, #44]	; 0x2c
   16b4c:	stm	sp, {r0, r8}
   16b50:	ldr	r0, [sp, #20]
   16b54:	stm	r3, {r0, r1, r2}
   16b58:	mov	r0, r4
   16b5c:	mov	r1, r6
   16b60:	ldr	r2, [sp, #32]
   16b64:	ldr	r3, [sp, #36]	; 0x24
   16b68:	bl	15454 <__assert_fail@plt+0x4130>
   16b6c:	ldr	r1, [sp, #24]
   16b70:	ldr	r0, [sp, #28]
   16b74:	str	r1, [r0]
   16b78:	mov	r0, r4
   16b7c:	sub	sp, fp, #28
   16b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b84:	bl	112f4 <abort@plt>
   16b88:	movw	r3, #53768	; 0xd208
   16b8c:	movt	r3, #2
   16b90:	b	169fc <__assert_fail@plt+0x56d8>
   16b94:	movw	r3, #53768	; 0xd208
   16b98:	mov	r1, r0
   16b9c:	mov	r0, #0
   16ba0:	mvn	r2, #0
   16ba4:	movt	r3, #2
   16ba8:	b	169fc <__assert_fail@plt+0x56d8>
   16bac:	movw	r3, #53768	; 0xd208
   16bb0:	mov	r2, r1
   16bb4:	mov	r1, r0
   16bb8:	mov	r0, #0
   16bbc:	movt	r3, #2
   16bc0:	b	169fc <__assert_fail@plt+0x56d8>
   16bc4:	push	{fp, lr}
   16bc8:	mov	fp, sp
   16bcc:	sub	sp, sp, #48	; 0x30
   16bd0:	vmov.i32	q8, #0	; 0x00000000
   16bd4:	mov	ip, #32
   16bd8:	mov	r3, sp
   16bdc:	mov	lr, r2
   16be0:	cmp	r1, #10
   16be4:	add	r2, r3, #16
   16be8:	vst1.64	{d16-d17}, [r3], ip
   16bec:	vst1.64	{d16-d17}, [r3]
   16bf0:	vst1.64	{d16-d17}, [r2]
   16bf4:	beq	16c14 <__assert_fail@plt+0x58f0>
   16bf8:	str	r1, [sp]
   16bfc:	mov	r3, sp
   16c00:	mov	r1, lr
   16c04:	mvn	r2, #0
   16c08:	bl	169fc <__assert_fail@plt+0x56d8>
   16c0c:	mov	sp, fp
   16c10:	pop	{fp, pc}
   16c14:	bl	112f4 <abort@plt>
   16c18:	push	{r4, sl, fp, lr}
   16c1c:	add	fp, sp, #8
   16c20:	sub	sp, sp, #48	; 0x30
   16c24:	mov	ip, r3
   16c28:	mov	r3, sp
   16c2c:	vmov.i32	q8, #0	; 0x00000000
   16c30:	mov	lr, #32
   16c34:	cmp	r1, #10
   16c38:	add	r4, r3, #16
   16c3c:	vst1.64	{d16-d17}, [r3], lr
   16c40:	vst1.64	{d16-d17}, [r3]
   16c44:	vst1.64	{d16-d17}, [r4]
   16c48:	beq	16c68 <__assert_fail@plt+0x5944>
   16c4c:	str	r1, [sp]
   16c50:	mov	r1, r2
   16c54:	mov	r3, sp
   16c58:	mov	r2, ip
   16c5c:	bl	169fc <__assert_fail@plt+0x56d8>
   16c60:	sub	sp, fp, #8
   16c64:	pop	{r4, sl, fp, pc}
   16c68:	bl	112f4 <abort@plt>
   16c6c:	push	{fp, lr}
   16c70:	mov	fp, sp
   16c74:	sub	sp, sp, #48	; 0x30
   16c78:	mov	r3, sp
   16c7c:	vmov.i32	q8, #0	; 0x00000000
   16c80:	mov	ip, #32
   16c84:	cmp	r0, #10
   16c88:	add	r2, r3, #16
   16c8c:	vst1.64	{d16-d17}, [r3], ip
   16c90:	vst1.64	{d16-d17}, [r3]
   16c94:	vst1.64	{d16-d17}, [r2]
   16c98:	beq	16cb8 <__assert_fail@plt+0x5994>
   16c9c:	str	r0, [sp]
   16ca0:	mov	r3, sp
   16ca4:	mov	r0, #0
   16ca8:	mvn	r2, #0
   16cac:	bl	169fc <__assert_fail@plt+0x56d8>
   16cb0:	mov	sp, fp
   16cb4:	pop	{fp, pc}
   16cb8:	bl	112f4 <abort@plt>
   16cbc:	push	{fp, lr}
   16cc0:	mov	fp, sp
   16cc4:	sub	sp, sp, #48	; 0x30
   16cc8:	mov	r3, sp
   16ccc:	vmov.i32	q8, #0	; 0x00000000
   16cd0:	mov	ip, #32
   16cd4:	cmp	r0, #10
   16cd8:	add	lr, r3, #16
   16cdc:	vst1.64	{d16-d17}, [r3], ip
   16ce0:	vst1.64	{d16-d17}, [r3]
   16ce4:	vst1.64	{d16-d17}, [lr]
   16ce8:	beq	16d04 <__assert_fail@plt+0x59e0>
   16cec:	str	r0, [sp]
   16cf0:	mov	r3, sp
   16cf4:	mov	r0, #0
   16cf8:	bl	169fc <__assert_fail@plt+0x56d8>
   16cfc:	mov	sp, fp
   16d00:	pop	{fp, pc}
   16d04:	bl	112f4 <abort@plt>
   16d08:	push	{r4, sl, fp, lr}
   16d0c:	add	fp, sp, #8
   16d10:	sub	sp, sp, #48	; 0x30
   16d14:	mov	lr, r0
   16d18:	movw	r0, #53768	; 0xd208
   16d1c:	mov	r3, #32
   16d20:	mov	ip, r1
   16d24:	mov	r4, #1
   16d28:	movt	r0, #2
   16d2c:	add	r1, r0, #16
   16d30:	vld1.64	{d16-d17}, [r0], r3
   16d34:	mov	r3, sp
   16d38:	vld1.64	{d18-d19}, [r1]
   16d3c:	add	r1, r3, #16
   16d40:	vld1.64	{d20-d21}, [r0]
   16d44:	add	r0, r3, #32
   16d48:	vst1.64	{d18-d19}, [r1]
   16d4c:	mov	r1, r3
   16d50:	vst1.64	{d20-d21}, [r0]
   16d54:	mov	r0, #28
   16d58:	and	r0, r0, r2, lsr #3
   16d5c:	and	r2, r2, #31
   16d60:	vst1.64	{d16-d17}, [r1], r0
   16d64:	ldr	r0, [r1, #8]
   16d68:	bic	r4, r4, r0, lsr r2
   16d6c:	eor	r0, r0, r4, lsl r2
   16d70:	mov	r2, ip
   16d74:	str	r0, [r1, #8]
   16d78:	mov	r0, #0
   16d7c:	mov	r1, lr
   16d80:	bl	169fc <__assert_fail@plt+0x56d8>
   16d84:	sub	sp, fp, #8
   16d88:	pop	{r4, sl, fp, pc}
   16d8c:	push	{fp, lr}
   16d90:	mov	fp, sp
   16d94:	sub	sp, sp, #48	; 0x30
   16d98:	mov	ip, r0
   16d9c:	movw	r0, #53768	; 0xd208
   16da0:	mov	r3, #32
   16da4:	movt	r0, #2
   16da8:	add	r2, r0, #16
   16dac:	vld1.64	{d16-d17}, [r0], r3
   16db0:	mov	r3, sp
   16db4:	vld1.64	{d18-d19}, [r2]
   16db8:	add	r2, r3, #16
   16dbc:	vld1.64	{d20-d21}, [r0]
   16dc0:	add	r0, r3, #32
   16dc4:	vst1.64	{d18-d19}, [r2]
   16dc8:	mov	r2, r3
   16dcc:	vst1.64	{d20-d21}, [r0]
   16dd0:	mov	r0, #28
   16dd4:	and	r0, r0, r1, lsr #3
   16dd8:	and	r1, r1, #31
   16ddc:	vst1.64	{d16-d17}, [r2], r0
   16de0:	mov	r0, #1
   16de4:	ldr	lr, [r2, #8]
   16de8:	bic	r0, r0, lr, lsr r1
   16dec:	eor	r0, lr, r0, lsl r1
   16df0:	mov	r1, ip
   16df4:	str	r0, [r2, #8]
   16df8:	mov	r0, #0
   16dfc:	mvn	r2, #0
   16e00:	bl	169fc <__assert_fail@plt+0x56d8>
   16e04:	mov	sp, fp
   16e08:	pop	{fp, pc}
   16e0c:	push	{fp, lr}
   16e10:	mov	fp, sp
   16e14:	sub	sp, sp, #48	; 0x30
   16e18:	movw	r2, #53768	; 0xd208
   16e1c:	mov	r3, #32
   16e20:	mov	r1, r0
   16e24:	movt	r2, #2
   16e28:	add	r0, r2, #16
   16e2c:	vld1.64	{d16-d17}, [r2], r3
   16e30:	mov	r3, sp
   16e34:	vld1.64	{d18-d19}, [r0]
   16e38:	add	r0, r3, #16
   16e3c:	vld1.64	{d20-d21}, [r2]
   16e40:	mov	r2, r3
   16e44:	vst1.64	{d18-d19}, [r0]
   16e48:	add	r0, r3, #32
   16e4c:	vst1.64	{d20-d21}, [r0]
   16e50:	mov	r0, #12
   16e54:	vst1.64	{d16-d17}, [r2], r0
   16e58:	ldr	r0, [r2]
   16e5c:	orr	r0, r0, #67108864	; 0x4000000
   16e60:	str	r0, [r2]
   16e64:	mov	r0, #0
   16e68:	mvn	r2, #0
   16e6c:	bl	169fc <__assert_fail@plt+0x56d8>
   16e70:	mov	sp, fp
   16e74:	pop	{fp, pc}
   16e78:	push	{fp, lr}
   16e7c:	mov	fp, sp
   16e80:	sub	sp, sp, #48	; 0x30
   16e84:	mov	ip, r1
   16e88:	mov	r1, r0
   16e8c:	movw	r0, #53768	; 0xd208
   16e90:	mov	r3, #32
   16e94:	movt	r0, #2
   16e98:	add	r2, r0, #16
   16e9c:	vld1.64	{d16-d17}, [r0], r3
   16ea0:	mov	r3, sp
   16ea4:	vld1.64	{d18-d19}, [r2]
   16ea8:	add	r2, r3, #16
   16eac:	vld1.64	{d20-d21}, [r0]
   16eb0:	add	r0, r3, #32
   16eb4:	vst1.64	{d18-d19}, [r2]
   16eb8:	mov	r2, r3
   16ebc:	vst1.64	{d20-d21}, [r0]
   16ec0:	mov	r0, #12
   16ec4:	vst1.64	{d16-d17}, [r2], r0
   16ec8:	ldr	r0, [r2]
   16ecc:	orr	r0, r0, #67108864	; 0x4000000
   16ed0:	str	r0, [r2]
   16ed4:	mov	r0, #0
   16ed8:	mov	r2, ip
   16edc:	bl	169fc <__assert_fail@plt+0x56d8>
   16ee0:	mov	sp, fp
   16ee4:	pop	{fp, pc}
   16ee8:	push	{r4, sl, fp, lr}
   16eec:	add	fp, sp, #8
   16ef0:	sub	sp, sp, #96	; 0x60
   16ef4:	mov	ip, r2
   16ef8:	mov	r2, sp
   16efc:	vmov.i32	q8, #0	; 0x00000000
   16f00:	mov	r4, #28
   16f04:	cmp	r1, #10
   16f08:	mov	r3, r2
   16f0c:	add	lr, r2, #16
   16f10:	vst1.64	{d16-d17}, [r3], r4
   16f14:	vst1.64	{d16-d17}, [lr]
   16f18:	vst1.32	{d16-d17}, [r3]
   16f1c:	beq	16f6c <__assert_fail@plt+0x5c48>
   16f20:	vld1.64	{d16-d17}, [r2], r4
   16f24:	vld1.64	{d18-d19}, [lr]
   16f28:	add	r3, sp, #48	; 0x30
   16f2c:	add	r4, r3, #4
   16f30:	vld1.32	{d20-d21}, [r2]
   16f34:	add	r2, r3, #20
   16f38:	vst1.32	{d16-d17}, [r4]
   16f3c:	vst1.32	{d18-d19}, [r2]
   16f40:	add	r2, r3, #32
   16f44:	vst1.32	{d20-d21}, [r2]
   16f48:	str	r1, [sp, #48]	; 0x30
   16f4c:	mvn	r2, #0
   16f50:	ldr	r1, [sp, #60]	; 0x3c
   16f54:	orr	r1, r1, #67108864	; 0x4000000
   16f58:	str	r1, [sp, #60]	; 0x3c
   16f5c:	mov	r1, ip
   16f60:	bl	169fc <__assert_fail@plt+0x56d8>
   16f64:	sub	sp, fp, #8
   16f68:	pop	{r4, sl, fp, pc}
   16f6c:	bl	112f4 <abort@plt>
   16f70:	push	{r4, r5, fp, lr}
   16f74:	add	fp, sp, #8
   16f78:	sub	sp, sp, #48	; 0x30
   16f7c:	mov	ip, r3
   16f80:	movw	r3, #53768	; 0xd208
   16f84:	mov	lr, #32
   16f88:	cmp	r1, #0
   16f8c:	mov	r5, sp
   16f90:	movt	r3, #2
   16f94:	cmpne	r2, #0
   16f98:	add	r4, r3, #16
   16f9c:	vld1.64	{d16-d17}, [r3], lr
   16fa0:	vld1.64	{d18-d19}, [r4]
   16fa4:	add	r4, r5, #16
   16fa8:	vld1.64	{d20-d21}, [r3]
   16fac:	vst1.64	{d16-d17}, [r5], lr
   16fb0:	mov	r3, #10
   16fb4:	vst1.64	{d18-d19}, [r4]
   16fb8:	vst1.64	{d20-d21}, [r5]
   16fbc:	str	r3, [sp]
   16fc0:	bne	16fc8 <__assert_fail@plt+0x5ca4>
   16fc4:	bl	112f4 <abort@plt>
   16fc8:	str	r2, [sp, #44]	; 0x2c
   16fcc:	str	r1, [sp, #40]	; 0x28
   16fd0:	mov	r3, sp
   16fd4:	mov	r1, ip
   16fd8:	mvn	r2, #0
   16fdc:	bl	169fc <__assert_fail@plt+0x56d8>
   16fe0:	sub	sp, fp, #8
   16fe4:	pop	{r4, r5, fp, pc}
   16fe8:	push	{r4, r5, fp, lr}
   16fec:	add	fp, sp, #8
   16ff0:	sub	sp, sp, #48	; 0x30
   16ff4:	mov	lr, r3
   16ff8:	movw	r3, #53768	; 0xd208
   16ffc:	mov	ip, #32
   17000:	cmp	r1, #0
   17004:	mov	r5, sp
   17008:	movt	r3, #2
   1700c:	cmpne	r2, #0
   17010:	add	r4, r3, #16
   17014:	vld1.64	{d16-d17}, [r3], ip
   17018:	vld1.64	{d18-d19}, [r4]
   1701c:	add	r4, r5, #16
   17020:	vld1.64	{d20-d21}, [r3]
   17024:	vst1.64	{d16-d17}, [r5], ip
   17028:	mov	r3, #10
   1702c:	vst1.64	{d18-d19}, [r4]
   17030:	vst1.64	{d20-d21}, [r5]
   17034:	str	r3, [sp]
   17038:	bne	17040 <__assert_fail@plt+0x5d1c>
   1703c:	bl	112f4 <abort@plt>
   17040:	ldr	ip, [fp, #8]
   17044:	str	r2, [sp, #44]	; 0x2c
   17048:	str	r1, [sp, #40]	; 0x28
   1704c:	mov	r3, sp
   17050:	mov	r1, lr
   17054:	mov	r2, ip
   17058:	bl	169fc <__assert_fail@plt+0x56d8>
   1705c:	sub	sp, fp, #8
   17060:	pop	{r4, r5, fp, pc}
   17064:	push	{r4, sl, fp, lr}
   17068:	add	fp, sp, #8
   1706c:	sub	sp, sp, #48	; 0x30
   17070:	mov	ip, r2
   17074:	movw	r2, #53768	; 0xd208
   17078:	mov	lr, #32
   1707c:	cmp	r0, #0
   17080:	mov	r4, sp
   17084:	movt	r2, #2
   17088:	cmpne	r1, #0
   1708c:	add	r3, r2, #16
   17090:	vld1.64	{d16-d17}, [r2], lr
   17094:	vld1.64	{d18-d19}, [r3]
   17098:	add	r3, r4, #16
   1709c:	vld1.64	{d20-d21}, [r2]
   170a0:	vst1.64	{d16-d17}, [r4], lr
   170a4:	mov	r2, #10
   170a8:	vst1.64	{d18-d19}, [r3]
   170ac:	vst1.64	{d20-d21}, [r4]
   170b0:	str	r2, [sp]
   170b4:	bne	170bc <__assert_fail@plt+0x5d98>
   170b8:	bl	112f4 <abort@plt>
   170bc:	str	r1, [sp, #44]	; 0x2c
   170c0:	str	r0, [sp, #40]	; 0x28
   170c4:	mov	r3, sp
   170c8:	mov	r0, #0
   170cc:	mov	r1, ip
   170d0:	mvn	r2, #0
   170d4:	bl	169fc <__assert_fail@plt+0x56d8>
   170d8:	sub	sp, fp, #8
   170dc:	pop	{r4, sl, fp, pc}
   170e0:	push	{r4, r5, fp, lr}
   170e4:	add	fp, sp, #8
   170e8:	sub	sp, sp, #48	; 0x30
   170ec:	mov	lr, r2
   170f0:	movw	r2, #53768	; 0xd208
   170f4:	mov	ip, r3
   170f8:	mov	r3, #32
   170fc:	cmp	r0, #0
   17100:	mov	r5, sp
   17104:	movt	r2, #2
   17108:	cmpne	r1, #0
   1710c:	add	r4, r2, #16
   17110:	vld1.64	{d16-d17}, [r2], r3
   17114:	vld1.64	{d18-d19}, [r4]
   17118:	add	r4, r5, #16
   1711c:	vld1.64	{d20-d21}, [r2]
   17120:	vst1.64	{d16-d17}, [r5], r3
   17124:	mov	r2, #10
   17128:	vst1.64	{d18-d19}, [r4]
   1712c:	vst1.64	{d20-d21}, [r5]
   17130:	str	r2, [sp]
   17134:	bne	1713c <__assert_fail@plt+0x5e18>
   17138:	bl	112f4 <abort@plt>
   1713c:	str	r1, [sp, #44]	; 0x2c
   17140:	str	r0, [sp, #40]	; 0x28
   17144:	mov	r3, sp
   17148:	mov	r0, #0
   1714c:	mov	r1, lr
   17150:	mov	r2, ip
   17154:	bl	169fc <__assert_fail@plt+0x56d8>
   17158:	sub	sp, fp, #8
   1715c:	pop	{r4, r5, fp, pc}
   17160:	movw	r3, #53560	; 0xd138
   17164:	movt	r3, #2
   17168:	b	169fc <__assert_fail@plt+0x56d8>
   1716c:	movw	r3, #53560	; 0xd138
   17170:	mov	r2, r1
   17174:	mov	r1, r0
   17178:	mov	r0, #0
   1717c:	movt	r3, #2
   17180:	b	169fc <__assert_fail@plt+0x56d8>
   17184:	movw	r3, #53560	; 0xd138
   17188:	mvn	r2, #0
   1718c:	movt	r3, #2
   17190:	b	169fc <__assert_fail@plt+0x56d8>
   17194:	movw	r3, #53560	; 0xd138
   17198:	mov	r1, r0
   1719c:	mov	r0, #0
   171a0:	mvn	r2, #0
   171a4:	movt	r3, #2
   171a8:	b	169fc <__assert_fail@plt+0x56d8>
   171ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   171b0:	add	fp, sp, #24
   171b4:	sub	sp, sp, #32
   171b8:	ldr	r6, [fp, #12]
   171bc:	ldr	r7, [fp, #8]
   171c0:	mov	r4, r2
   171c4:	mov	r8, r0
   171c8:	cmp	r1, #0
   171cc:	beq	171f4 <__assert_fail@plt+0x5ed0>
   171d0:	movw	r2, #49444	; 0xc124
   171d4:	mov	r5, r1
   171d8:	str	r3, [sp, #4]
   171dc:	str	r4, [sp]
   171e0:	mov	r0, r8
   171e4:	mov	r1, #1
   171e8:	movt	r2, #1
   171ec:	mov	r3, r5
   171f0:	b	1720c <__assert_fail@plt+0x5ee8>
   171f4:	movw	r2, #49456	; 0xc130
   171f8:	str	r3, [sp]
   171fc:	mov	r0, r8
   17200:	mov	r1, #1
   17204:	mov	r3, r4
   17208:	movt	r2, #1
   1720c:	bl	1124c <__fprintf_chk@plt>
   17210:	movw	r1, #49463	; 0xc137
   17214:	mov	r0, #0
   17218:	mov	r2, #5
   1721c:	movt	r1, #1
   17220:	bl	11114 <dcgettext@plt>
   17224:	movw	r2, #50181	; 0xc405
   17228:	mov	r3, r0
   1722c:	movw	r0, #2022	; 0x7e6
   17230:	mov	r1, #1
   17234:	str	r0, [sp]
   17238:	movt	r2, #1
   1723c:	mov	r0, r8
   17240:	bl	1124c <__fprintf_chk@plt>
   17244:	movw	r4, #46376	; 0xb528
   17248:	mov	r1, r8
   1724c:	movt	r4, #1
   17250:	mov	r0, r4
   17254:	bl	1106c <fputs_unlocked@plt>
   17258:	movw	r1, #49467	; 0xc13b
   1725c:	mov	r0, #0
   17260:	mov	r2, #5
   17264:	movt	r1, #1
   17268:	bl	11114 <dcgettext@plt>
   1726c:	movw	r3, #49638	; 0xc1e6
   17270:	mov	r2, r0
   17274:	mov	r0, r8
   17278:	mov	r1, #1
   1727c:	movt	r3, #1
   17280:	bl	1124c <__fprintf_chk@plt>
   17284:	mov	r0, r4
   17288:	mov	r1, r8
   1728c:	bl	1106c <fputs_unlocked@plt>
   17290:	cmp	r6, #9
   17294:	bhi	172d0 <__assert_fail@plt+0x5fac>
   17298:	add	r0, pc, #0
   1729c:	ldr	pc, [r0, r6, lsl #2]
   172a0:	andeq	r7, r1, r8, asr #5
   172a4:	ldrdeq	r7, [r1], -ip
   172a8:	andeq	r7, r1, ip, lsl #6
   172ac:	andeq	r7, r1, r4, lsr r3
   172b0:	andeq	r7, r1, ip, asr r3
   172b4:	andeq	r7, r1, r4, lsl #7
   172b8:	andeq	r7, r1, ip, lsr #7
   172bc:	andeq	r7, r1, r4, ror #7
   172c0:	andeq	r7, r1, ip, lsl #9
   172c4:	andeq	r7, r1, r4, lsr r4
   172c8:	sub	sp, fp, #24
   172cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172d0:	movw	r1, #49991	; 0xc347
   172d4:	movt	r1, #1
   172d8:	b	1743c <__assert_fail@plt+0x6118>
   172dc:	movw	r1, #49672	; 0xc208
   172e0:	mov	r0, #0
   172e4:	mov	r2, #5
   172e8:	movt	r1, #1
   172ec:	bl	11114 <dcgettext@plt>
   172f0:	ldr	r3, [r7]
   172f4:	mov	r2, r0
   172f8:	mov	r0, r8
   172fc:	mov	r1, #1
   17300:	sub	sp, fp, #24
   17304:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17308:	b	1124c <__fprintf_chk@plt>
   1730c:	movw	r1, #49688	; 0xc218
   17310:	mov	r0, #0
   17314:	mov	r2, #5
   17318:	movt	r1, #1
   1731c:	bl	11114 <dcgettext@plt>
   17320:	mov	r2, r0
   17324:	ldr	r3, [r7]
   17328:	ldr	r0, [r7, #4]
   1732c:	str	r0, [sp]
   17330:	b	17420 <__assert_fail@plt+0x60fc>
   17334:	movw	r1, #49711	; 0xc22f
   17338:	mov	r0, #0
   1733c:	mov	r2, #5
   17340:	movt	r1, #1
   17344:	bl	11114 <dcgettext@plt>
   17348:	ldr	r3, [r7]
   1734c:	mov	r2, r0
   17350:	ldmib	r7, {r0, r1}
   17354:	stm	sp, {r0, r1}
   17358:	b	17420 <__assert_fail@plt+0x60fc>
   1735c:	movw	r1, #49739	; 0xc24b
   17360:	mov	r0, #0
   17364:	mov	r2, #5
   17368:	movt	r1, #1
   1736c:	bl	11114 <dcgettext@plt>
   17370:	ldr	r3, [r7]
   17374:	mov	r2, r0
   17378:	ldmib	r7, {r0, r1, r7}
   1737c:	stm	sp, {r0, r1, r7}
   17380:	b	17420 <__assert_fail@plt+0x60fc>
   17384:	movw	r1, #49771	; 0xc26b
   17388:	mov	r0, #0
   1738c:	mov	r2, #5
   17390:	movt	r1, #1
   17394:	bl	11114 <dcgettext@plt>
   17398:	ldr	r3, [r7]
   1739c:	mov	r2, r0
   173a0:	ldmib	r7, {r0, r1, r6, r7}
   173a4:	stm	sp, {r0, r1, r6, r7}
   173a8:	b	17420 <__assert_fail@plt+0x60fc>
   173ac:	movw	r1, #49807	; 0xc28f
   173b0:	mov	r0, #0
   173b4:	mov	r2, #5
   173b8:	movt	r1, #1
   173bc:	bl	11114 <dcgettext@plt>
   173c0:	ldr	r3, [r7]
   173c4:	mov	r2, r0
   173c8:	ldmib	r7, {r0, r1, r6}
   173cc:	ldr	r5, [r7, #16]
   173d0:	ldr	r7, [r7, #20]
   173d4:	stm	sp, {r0, r1, r6}
   173d8:	str	r5, [sp, #12]
   173dc:	str	r7, [sp, #16]
   173e0:	b	17420 <__assert_fail@plt+0x60fc>
   173e4:	movw	r1, #49847	; 0xc2b7
   173e8:	mov	r0, #0
   173ec:	mov	r2, #5
   173f0:	movt	r1, #1
   173f4:	bl	11114 <dcgettext@plt>
   173f8:	ldr	r3, [r7]
   173fc:	mov	r2, r0
   17400:	ldmib	r7, {r0, r1, r6}
   17404:	ldr	r5, [r7, #16]
   17408:	ldr	r4, [r7, #20]
   1740c:	ldr	r7, [r7, #24]
   17410:	stm	sp, {r0, r1, r6}
   17414:	str	r5, [sp, #12]
   17418:	str	r4, [sp, #16]
   1741c:	str	r7, [sp, #20]
   17420:	mov	r0, r8
   17424:	mov	r1, #1
   17428:	bl	1124c <__fprintf_chk@plt>
   1742c:	sub	sp, fp, #24
   17430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17434:	movw	r1, #49939	; 0xc313
   17438:	movt	r1, #1
   1743c:	mov	r0, #0
   17440:	mov	r2, #5
   17444:	bl	11114 <dcgettext@plt>
   17448:	mov	ip, r0
   1744c:	ldr	r3, [r7]
   17450:	ldr	r0, [r7, #4]
   17454:	ldr	r1, [r7, #8]
   17458:	ldr	r6, [r7, #12]
   1745c:	ldr	r5, [r7, #16]
   17460:	ldr	r4, [r7, #20]
   17464:	ldr	r2, [r7, #24]
   17468:	ldr	lr, [r7, #28]
   1746c:	ldr	r7, [r7, #32]
   17470:	stm	sp, {r0, r1, r6}
   17474:	str	r5, [sp, #12]
   17478:	str	r4, [sp, #16]
   1747c:	str	r2, [sp, #20]
   17480:	str	lr, [sp, #24]
   17484:	str	r7, [sp, #28]
   17488:	b	174d0 <__assert_fail@plt+0x61ac>
   1748c:	movw	r1, #49891	; 0xc2e3
   17490:	mov	r0, #0
   17494:	mov	r2, #5
   17498:	movt	r1, #1
   1749c:	bl	11114 <dcgettext@plt>
   174a0:	mov	ip, r0
   174a4:	ldr	r3, [r7]
   174a8:	ldmib	r7, {r0, r1, r6}
   174ac:	ldr	r5, [r7, #16]
   174b0:	ldr	r4, [r7, #20]
   174b4:	ldr	r2, [r7, #24]
   174b8:	ldr	r7, [r7, #28]
   174bc:	stm	sp, {r0, r1, r6}
   174c0:	str	r5, [sp, #12]
   174c4:	str	r4, [sp, #16]
   174c8:	str	r2, [sp, #20]
   174cc:	str	r7, [sp, #24]
   174d0:	mov	r0, r8
   174d4:	mov	r1, #1
   174d8:	mov	r2, ip
   174dc:	bl	1124c <__fprintf_chk@plt>
   174e0:	sub	sp, fp, #24
   174e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   174e8:	push	{r4, sl, fp, lr}
   174ec:	add	fp, sp, #8
   174f0:	sub	sp, sp, #8
   174f4:	ldr	ip, [fp, #8]
   174f8:	mov	lr, #0
   174fc:	ldr	r4, [ip, lr, lsl #2]
   17500:	add	lr, lr, #1
   17504:	cmp	r4, #0
   17508:	bne	174fc <__assert_fail@plt+0x61d8>
   1750c:	sub	r4, lr, #1
   17510:	str	ip, [sp]
   17514:	str	r4, [sp, #4]
   17518:	bl	171ac <__assert_fail@plt+0x5e88>
   1751c:	sub	sp, fp, #8
   17520:	pop	{r4, sl, fp, pc}
   17524:	push	{fp, lr}
   17528:	mov	fp, sp
   1752c:	sub	sp, sp, #48	; 0x30
   17530:	ldr	ip, [fp, #8]
   17534:	ldr	lr, [ip]
   17538:	cmp	lr, #0
   1753c:	str	lr, [sp, #8]
   17540:	beq	175dc <__assert_fail@plt+0x62b8>
   17544:	ldr	lr, [ip, #4]
   17548:	cmp	lr, #0
   1754c:	str	lr, [sp, #12]
   17550:	beq	175e4 <__assert_fail@plt+0x62c0>
   17554:	ldr	lr, [ip, #8]
   17558:	cmp	lr, #0
   1755c:	str	lr, [sp, #16]
   17560:	beq	175ec <__assert_fail@plt+0x62c8>
   17564:	ldr	lr, [ip, #12]
   17568:	cmp	lr, #0
   1756c:	str	lr, [sp, #20]
   17570:	beq	175f4 <__assert_fail@plt+0x62d0>
   17574:	ldr	lr, [ip, #16]
   17578:	cmp	lr, #0
   1757c:	str	lr, [sp, #24]
   17580:	beq	175fc <__assert_fail@plt+0x62d8>
   17584:	ldr	lr, [ip, #20]
   17588:	cmp	lr, #0
   1758c:	str	lr, [sp, #28]
   17590:	beq	17604 <__assert_fail@plt+0x62e0>
   17594:	ldr	lr, [ip, #24]
   17598:	cmp	lr, #0
   1759c:	str	lr, [sp, #32]
   175a0:	beq	1760c <__assert_fail@plt+0x62e8>
   175a4:	ldr	lr, [ip, #28]
   175a8:	cmp	lr, #0
   175ac:	str	lr, [sp, #36]	; 0x24
   175b0:	beq	17614 <__assert_fail@plt+0x62f0>
   175b4:	ldr	lr, [ip, #32]
   175b8:	cmp	lr, #0
   175bc:	str	lr, [sp, #40]	; 0x28
   175c0:	beq	1761c <__assert_fail@plt+0x62f8>
   175c4:	ldr	lr, [ip, #36]	; 0x24
   175c8:	mov	ip, #10
   175cc:	cmp	lr, #0
   175d0:	str	lr, [sp, #44]	; 0x2c
   175d4:	movweq	ip, #9
   175d8:	b	17620 <__assert_fail@plt+0x62fc>
   175dc:	mov	ip, #0
   175e0:	b	17620 <__assert_fail@plt+0x62fc>
   175e4:	mov	ip, #1
   175e8:	b	17620 <__assert_fail@plt+0x62fc>
   175ec:	mov	ip, #2
   175f0:	b	17620 <__assert_fail@plt+0x62fc>
   175f4:	mov	ip, #3
   175f8:	b	17620 <__assert_fail@plt+0x62fc>
   175fc:	mov	ip, #4
   17600:	b	17620 <__assert_fail@plt+0x62fc>
   17604:	mov	ip, #5
   17608:	b	17620 <__assert_fail@plt+0x62fc>
   1760c:	mov	ip, #6
   17610:	b	17620 <__assert_fail@plt+0x62fc>
   17614:	mov	ip, #7
   17618:	b	17620 <__assert_fail@plt+0x62fc>
   1761c:	mov	ip, #8
   17620:	add	lr, sp, #8
   17624:	str	ip, [sp, #4]
   17628:	str	lr, [sp]
   1762c:	bl	171ac <__assert_fail@plt+0x5e88>
   17630:	mov	sp, fp
   17634:	pop	{fp, pc}
   17638:	push	{fp, lr}
   1763c:	mov	fp, sp
   17640:	sub	sp, sp, #56	; 0x38
   17644:	add	ip, fp, #8
   17648:	str	ip, [sp, #12]
   1764c:	ldr	lr, [fp, #8]
   17650:	cmp	lr, #0
   17654:	str	lr, [sp, #16]
   17658:	beq	176f4 <__assert_fail@plt+0x63d0>
   1765c:	ldr	lr, [ip, #4]
   17660:	cmp	lr, #0
   17664:	str	lr, [sp, #20]
   17668:	beq	176fc <__assert_fail@plt+0x63d8>
   1766c:	ldr	lr, [ip, #8]
   17670:	cmp	lr, #0
   17674:	str	lr, [sp, #24]
   17678:	beq	17704 <__assert_fail@plt+0x63e0>
   1767c:	ldr	lr, [ip, #12]
   17680:	cmp	lr, #0
   17684:	str	lr, [sp, #28]
   17688:	beq	1770c <__assert_fail@plt+0x63e8>
   1768c:	ldr	lr, [ip, #16]
   17690:	cmp	lr, #0
   17694:	str	lr, [sp, #32]
   17698:	beq	17714 <__assert_fail@plt+0x63f0>
   1769c:	ldr	lr, [ip, #20]
   176a0:	cmp	lr, #0
   176a4:	str	lr, [sp, #36]	; 0x24
   176a8:	beq	1771c <__assert_fail@plt+0x63f8>
   176ac:	ldr	lr, [ip, #24]
   176b0:	cmp	lr, #0
   176b4:	str	lr, [sp, #40]	; 0x28
   176b8:	beq	17724 <__assert_fail@plt+0x6400>
   176bc:	ldr	lr, [ip, #28]
   176c0:	cmp	lr, #0
   176c4:	str	lr, [sp, #44]	; 0x2c
   176c8:	beq	1772c <__assert_fail@plt+0x6408>
   176cc:	ldr	lr, [ip, #32]
   176d0:	cmp	lr, #0
   176d4:	str	lr, [sp, #48]	; 0x30
   176d8:	beq	17734 <__assert_fail@plt+0x6410>
   176dc:	ldr	lr, [ip, #36]	; 0x24
   176e0:	mov	ip, #10
   176e4:	cmp	lr, #0
   176e8:	str	lr, [sp, #52]	; 0x34
   176ec:	movweq	ip, #9
   176f0:	b	17738 <__assert_fail@plt+0x6414>
   176f4:	mov	ip, #0
   176f8:	b	17738 <__assert_fail@plt+0x6414>
   176fc:	mov	ip, #1
   17700:	b	17738 <__assert_fail@plt+0x6414>
   17704:	mov	ip, #2
   17708:	b	17738 <__assert_fail@plt+0x6414>
   1770c:	mov	ip, #3
   17710:	b	17738 <__assert_fail@plt+0x6414>
   17714:	mov	ip, #4
   17718:	b	17738 <__assert_fail@plt+0x6414>
   1771c:	mov	ip, #5
   17720:	b	17738 <__assert_fail@plt+0x6414>
   17724:	mov	ip, #6
   17728:	b	17738 <__assert_fail@plt+0x6414>
   1772c:	mov	ip, #7
   17730:	b	17738 <__assert_fail@plt+0x6414>
   17734:	mov	ip, #8
   17738:	add	lr, sp, #16
   1773c:	str	ip, [sp, #4]
   17740:	str	lr, [sp]
   17744:	bl	171ac <__assert_fail@plt+0x5e88>
   17748:	mov	sp, fp
   1774c:	pop	{fp, pc}
   17750:	push	{fp, lr}
   17754:	mov	fp, sp
   17758:	movw	r0, #53652	; 0xd194
   1775c:	movt	r0, #2
   17760:	ldr	r1, [r0]
   17764:	movw	r0, #46376	; 0xb528
   17768:	movt	r0, #1
   1776c:	bl	1106c <fputs_unlocked@plt>
   17770:	movw	r1, #50051	; 0xc383
   17774:	mov	r0, #0
   17778:	mov	r2, #5
   1777c:	movt	r1, #1
   17780:	bl	11114 <dcgettext@plt>
   17784:	movw	r2, #50071	; 0xc397
   17788:	mov	r1, r0
   1778c:	mov	r0, #1
   17790:	movt	r2, #1
   17794:	bl	11234 <__printf_chk@plt>
   17798:	movw	r1, #50093	; 0xc3ad
   1779c:	mov	r0, #0
   177a0:	mov	r2, #5
   177a4:	movt	r1, #1
   177a8:	bl	11114 <dcgettext@plt>
   177ac:	movw	r2, #45688	; 0xb278
   177b0:	movw	r3, #46185	; 0xb469
   177b4:	mov	r1, r0
   177b8:	mov	r0, #1
   177bc:	movt	r2, #1
   177c0:	movt	r3, #1
   177c4:	bl	11234 <__printf_chk@plt>
   177c8:	movw	r1, #50113	; 0xc3c1
   177cc:	mov	r0, #0
   177d0:	mov	r2, #5
   177d4:	movt	r1, #1
   177d8:	bl	11114 <dcgettext@plt>
   177dc:	movw	r2, #50152	; 0xc3e8
   177e0:	mov	r1, r0
   177e4:	mov	r0, #1
   177e8:	movt	r2, #1
   177ec:	pop	{fp, lr}
   177f0:	b	11234 <__printf_chk@plt>
   177f4:	push	{r4, r5, r6, sl, fp, lr}
   177f8:	add	fp, sp, #16
   177fc:	mov	r4, r2
   17800:	mov	r5, r1
   17804:	mov	r6, r0
   17808:	bl	199f4 <__assert_fail@plt+0x86d0>
   1780c:	cmp	r0, #0
   17810:	popne	{r4, r5, r6, sl, fp, pc}
   17814:	cmp	r6, #0
   17818:	beq	1782c <__assert_fail@plt+0x6508>
   1781c:	cmp	r5, #0
   17820:	cmpne	r4, #0
   17824:	bne	1782c <__assert_fail@plt+0x6508>
   17828:	pop	{r4, r5, r6, sl, fp, pc}
   1782c:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17830:	push	{r4, r5, r6, sl, fp, lr}
   17834:	add	fp, sp, #16
   17838:	mov	r4, r2
   1783c:	mov	r5, r1
   17840:	mov	r6, r0
   17844:	bl	199f4 <__assert_fail@plt+0x86d0>
   17848:	cmp	r0, #0
   1784c:	popne	{r4, r5, r6, sl, fp, pc}
   17850:	cmp	r6, #0
   17854:	beq	17868 <__assert_fail@plt+0x6544>
   17858:	cmp	r5, #0
   1785c:	cmpne	r4, #0
   17860:	bne	17868 <__assert_fail@plt+0x6544>
   17864:	pop	{r4, r5, r6, sl, fp, pc}
   17868:	bl	17dcc <__assert_fail@plt+0x6aa8>
   1786c:	push	{fp, lr}
   17870:	mov	fp, sp
   17874:	bl	196ac <__assert_fail@plt+0x8388>
   17878:	cmp	r0, #0
   1787c:	popne	{fp, pc}
   17880:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17884:	push	{fp, lr}
   17888:	mov	fp, sp
   1788c:	bl	196ac <__assert_fail@plt+0x8388>
   17890:	cmp	r0, #0
   17894:	popne	{fp, pc}
   17898:	bl	17dcc <__assert_fail@plt+0x6aa8>
   1789c:	push	{fp, lr}
   178a0:	mov	fp, sp
   178a4:	bl	196ac <__assert_fail@plt+0x8388>
   178a8:	cmp	r0, #0
   178ac:	popne	{fp, pc}
   178b0:	bl	17dcc <__assert_fail@plt+0x6aa8>
   178b4:	push	{r4, r5, fp, lr}
   178b8:	add	fp, sp, #8
   178bc:	mov	r4, r1
   178c0:	mov	r5, r0
   178c4:	bl	196dc <__assert_fail@plt+0x83b8>
   178c8:	cmp	r0, #0
   178cc:	popne	{r4, r5, fp, pc}
   178d0:	cmp	r5, #0
   178d4:	beq	178e4 <__assert_fail@plt+0x65c0>
   178d8:	cmp	r4, #0
   178dc:	bne	178e4 <__assert_fail@plt+0x65c0>
   178e0:	pop	{r4, r5, fp, pc}
   178e4:	bl	17dcc <__assert_fail@plt+0x6aa8>
   178e8:	push	{fp, lr}
   178ec:	mov	fp, sp
   178f0:	cmp	r1, #0
   178f4:	orreq	r1, r1, #1
   178f8:	bl	196dc <__assert_fail@plt+0x83b8>
   178fc:	cmp	r0, #0
   17900:	popne	{fp, pc}
   17904:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17908:	push	{fp, lr}
   1790c:	mov	fp, sp
   17910:	clz	r3, r2
   17914:	lsr	ip, r3, #5
   17918:	clz	r3, r1
   1791c:	lsr	r3, r3, #5
   17920:	orrs	r3, r3, ip
   17924:	movwne	r1, #1
   17928:	movwne	r2, #1
   1792c:	bl	199f4 <__assert_fail@plt+0x86d0>
   17930:	cmp	r0, #0
   17934:	popne	{fp, pc}
   17938:	bl	17dcc <__assert_fail@plt+0x6aa8>
   1793c:	push	{fp, lr}
   17940:	mov	fp, sp
   17944:	mov	r2, r1
   17948:	mov	r1, r0
   1794c:	mov	r0, #0
   17950:	bl	199f4 <__assert_fail@plt+0x86d0>
   17954:	cmp	r0, #0
   17958:	popne	{fp, pc}
   1795c:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17960:	push	{fp, lr}
   17964:	mov	fp, sp
   17968:	mov	r2, r1
   1796c:	mov	r1, r0
   17970:	clz	r0, r2
   17974:	clz	r3, r1
   17978:	lsr	r0, r0, #5
   1797c:	lsr	r3, r3, #5
   17980:	orrs	r0, r3, r0
   17984:	movwne	r1, #1
   17988:	movwne	r2, #1
   1798c:	mov	r0, #0
   17990:	bl	199f4 <__assert_fail@plt+0x86d0>
   17994:	cmp	r0, #0
   17998:	popne	{fp, pc}
   1799c:	bl	17dcc <__assert_fail@plt+0x6aa8>
   179a0:	push	{r4, r5, r6, sl, fp, lr}
   179a4:	add	fp, sp, #16
   179a8:	ldr	r5, [r1]
   179ac:	mov	r4, r1
   179b0:	mov	r6, r0
   179b4:	cmp	r0, #0
   179b8:	beq	179d0 <__assert_fail@plt+0x66ac>
   179bc:	mov	r0, #1
   179c0:	add	r0, r0, r5, lsr #1
   179c4:	adds	r5, r5, r0
   179c8:	bcc	179d8 <__assert_fail@plt+0x66b4>
   179cc:	b	17a14 <__assert_fail@plt+0x66f0>
   179d0:	cmp	r5, #0
   179d4:	movweq	r5, #64	; 0x40
   179d8:	mov	r0, r6
   179dc:	mov	r1, r5
   179e0:	mov	r2, #1
   179e4:	bl	199f4 <__assert_fail@plt+0x86d0>
   179e8:	cmp	r5, #0
   179ec:	mov	r1, r5
   179f0:	movwne	r1, #1
   179f4:	cmp	r0, #0
   179f8:	bne	17a0c <__assert_fail@plt+0x66e8>
   179fc:	clz	r2, r6
   17a00:	lsr	r2, r2, #5
   17a04:	orrs	r1, r2, r1
   17a08:	bne	17a14 <__assert_fail@plt+0x66f0>
   17a0c:	str	r5, [r4]
   17a10:	pop	{r4, r5, r6, sl, fp, pc}
   17a14:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17a18:	push	{r4, r5, r6, r7, fp, lr}
   17a1c:	add	fp, sp, #16
   17a20:	ldr	r5, [r1]
   17a24:	mov	r6, r2
   17a28:	mov	r4, r1
   17a2c:	mov	r7, r0
   17a30:	cmp	r0, #0
   17a34:	beq	17a4c <__assert_fail@plt+0x6728>
   17a38:	mov	r0, #1
   17a3c:	add	r0, r0, r5, lsr #1
   17a40:	adds	r5, r5, r0
   17a44:	bcc	17a64 <__assert_fail@plt+0x6740>
   17a48:	b	17a98 <__assert_fail@plt+0x6774>
   17a4c:	cmp	r5, #0
   17a50:	bne	17a64 <__assert_fail@plt+0x6740>
   17a54:	mov	r0, #64	; 0x40
   17a58:	cmp	r6, #64	; 0x40
   17a5c:	udiv	r5, r0, r6
   17a60:	addhi	r5, r5, #1
   17a64:	mov	r0, r7
   17a68:	mov	r1, r5
   17a6c:	mov	r2, r6
   17a70:	bl	199f4 <__assert_fail@plt+0x86d0>
   17a74:	cmp	r0, #0
   17a78:	bne	17a90 <__assert_fail@plt+0x676c>
   17a7c:	cmp	r7, #0
   17a80:	beq	17a98 <__assert_fail@plt+0x6774>
   17a84:	cmp	r6, #0
   17a88:	cmpne	r5, #0
   17a8c:	bne	17a98 <__assert_fail@plt+0x6774>
   17a90:	str	r5, [r4]
   17a94:	pop	{r4, r5, r6, r7, fp, pc}
   17a98:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17a9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17aa0:	add	fp, sp, #24
   17aa4:	mov	r8, r1
   17aa8:	ldr	r1, [r1]
   17aac:	mov	r5, r0
   17ab0:	add	r0, r1, r1, asr #1
   17ab4:	cmp	r0, r1
   17ab8:	mvnvs	r0, #-2147483648	; 0x80000000
   17abc:	cmp	r0, r3
   17ac0:	mov	r7, r0
   17ac4:	movgt	r7, r3
   17ac8:	cmn	r3, #1
   17acc:	movle	r7, r0
   17ad0:	ldr	r0, [fp, #8]
   17ad4:	cmn	r0, #1
   17ad8:	ble	17b00 <__assert_fail@plt+0x67dc>
   17adc:	cmp	r0, #0
   17ae0:	beq	17b54 <__assert_fail@plt+0x6830>
   17ae4:	cmn	r7, #1
   17ae8:	ble	17b28 <__assert_fail@plt+0x6804>
   17aec:	mvn	r4, #-2147483648	; 0x80000000
   17af0:	udiv	r6, r4, r0
   17af4:	cmp	r6, r7
   17af8:	bge	17b54 <__assert_fail@plt+0x6830>
   17afc:	b	17b64 <__assert_fail@plt+0x6840>
   17b00:	cmn	r7, #1
   17b04:	ble	17b44 <__assert_fail@plt+0x6820>
   17b08:	cmn	r0, #1
   17b0c:	beq	17b54 <__assert_fail@plt+0x6830>
   17b10:	mov	r6, #-2147483648	; 0x80000000
   17b14:	mvn	r4, #-2147483648	; 0x80000000
   17b18:	sdiv	r6, r6, r0
   17b1c:	cmp	r6, r7
   17b20:	bge	17b54 <__assert_fail@plt+0x6830>
   17b24:	b	17b64 <__assert_fail@plt+0x6840>
   17b28:	beq	17b54 <__assert_fail@plt+0x6830>
   17b2c:	mov	r6, #-2147483648	; 0x80000000
   17b30:	mvn	r4, #-2147483648	; 0x80000000
   17b34:	sdiv	r6, r6, r7
   17b38:	cmp	r6, r0
   17b3c:	bge	17b54 <__assert_fail@plt+0x6830>
   17b40:	b	17b64 <__assert_fail@plt+0x6840>
   17b44:	mvn	r4, #-2147483648	; 0x80000000
   17b48:	sdiv	r6, r4, r0
   17b4c:	cmp	r7, r6
   17b50:	blt	17b64 <__assert_fail@plt+0x6840>
   17b54:	mul	r6, r7, r0
   17b58:	mov	r4, #64	; 0x40
   17b5c:	cmp	r6, #63	; 0x3f
   17b60:	bgt	17b6c <__assert_fail@plt+0x6848>
   17b64:	sdiv	r7, r4, r0
   17b68:	mul	r6, r7, r0
   17b6c:	cmp	r5, #0
   17b70:	moveq	r4, #0
   17b74:	streq	r4, [r8]
   17b78:	sub	r4, r7, r1
   17b7c:	cmp	r4, r2
   17b80:	bge	17c2c <__assert_fail@plt+0x6908>
   17b84:	add	r7, r1, r2
   17b88:	mov	r6, #0
   17b8c:	mov	r2, #0
   17b90:	cmp	r7, r3
   17b94:	movwgt	r6, #1
   17b98:	cmn	r3, #1
   17b9c:	movwgt	r2, #1
   17ba0:	cmp	r7, r1
   17ba4:	bvs	17c60 <__assert_fail@plt+0x693c>
   17ba8:	ands	r1, r2, r6
   17bac:	bne	17c60 <__assert_fail@plt+0x693c>
   17bb0:	cmn	r0, #1
   17bb4:	ble	17bdc <__assert_fail@plt+0x68b8>
   17bb8:	cmp	r0, #0
   17bbc:	beq	17c28 <__assert_fail@plt+0x6904>
   17bc0:	cmn	r7, #1
   17bc4:	ble	17c00 <__assert_fail@plt+0x68dc>
   17bc8:	mvn	r1, #-2147483648	; 0x80000000
   17bcc:	udiv	r1, r1, r0
   17bd0:	cmp	r1, r7
   17bd4:	bge	17c28 <__assert_fail@plt+0x6904>
   17bd8:	b	17c60 <__assert_fail@plt+0x693c>
   17bdc:	cmn	r7, #1
   17be0:	ble	17c18 <__assert_fail@plt+0x68f4>
   17be4:	cmn	r0, #1
   17be8:	beq	17c28 <__assert_fail@plt+0x6904>
   17bec:	mov	r1, #-2147483648	; 0x80000000
   17bf0:	sdiv	r1, r1, r0
   17bf4:	cmp	r1, r7
   17bf8:	bge	17c28 <__assert_fail@plt+0x6904>
   17bfc:	b	17c60 <__assert_fail@plt+0x693c>
   17c00:	beq	17c28 <__assert_fail@plt+0x6904>
   17c04:	mov	r1, #-2147483648	; 0x80000000
   17c08:	sdiv	r1, r1, r7
   17c0c:	cmp	r1, r0
   17c10:	bge	17c28 <__assert_fail@plt+0x6904>
   17c14:	b	17c60 <__assert_fail@plt+0x693c>
   17c18:	mvn	r1, #-2147483648	; 0x80000000
   17c1c:	sdiv	r1, r1, r0
   17c20:	cmp	r7, r1
   17c24:	blt	17c60 <__assert_fail@plt+0x693c>
   17c28:	mul	r6, r7, r0
   17c2c:	mov	r0, r5
   17c30:	mov	r1, r6
   17c34:	bl	196dc <__assert_fail@plt+0x83b8>
   17c38:	cmp	r6, #0
   17c3c:	movwne	r6, #1
   17c40:	cmp	r0, #0
   17c44:	bne	17c58 <__assert_fail@plt+0x6934>
   17c48:	clz	r1, r5
   17c4c:	lsr	r1, r1, #5
   17c50:	orrs	r1, r1, r6
   17c54:	bne	17c60 <__assert_fail@plt+0x693c>
   17c58:	str	r7, [r8]
   17c5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c60:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17c64:	push	{fp, lr}
   17c68:	mov	fp, sp
   17c6c:	mov	r1, #1
   17c70:	bl	19658 <__assert_fail@plt+0x8334>
   17c74:	cmp	r0, #0
   17c78:	popne	{fp, pc}
   17c7c:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17c80:	push	{fp, lr}
   17c84:	mov	fp, sp
   17c88:	bl	19658 <__assert_fail@plt+0x8334>
   17c8c:	cmp	r0, #0
   17c90:	popne	{fp, pc}
   17c94:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17c98:	push	{fp, lr}
   17c9c:	mov	fp, sp
   17ca0:	mov	r1, #1
   17ca4:	bl	19658 <__assert_fail@plt+0x8334>
   17ca8:	cmp	r0, #0
   17cac:	popne	{fp, pc}
   17cb0:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17cb4:	push	{fp, lr}
   17cb8:	mov	fp, sp
   17cbc:	bl	19658 <__assert_fail@plt+0x8334>
   17cc0:	cmp	r0, #0
   17cc4:	popne	{fp, pc}
   17cc8:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17ccc:	push	{r4, r5, r6, sl, fp, lr}
   17cd0:	add	fp, sp, #16
   17cd4:	mov	r5, r0
   17cd8:	mov	r0, r1
   17cdc:	mov	r4, r1
   17ce0:	bl	196ac <__assert_fail@plt+0x8388>
   17ce4:	cmp	r0, #0
   17ce8:	beq	17d04 <__assert_fail@plt+0x69e0>
   17cec:	mov	r1, r5
   17cf0:	mov	r2, r4
   17cf4:	mov	r6, r0
   17cf8:	bl	110e4 <memcpy@plt>
   17cfc:	mov	r0, r6
   17d00:	pop	{r4, r5, r6, sl, fp, pc}
   17d04:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17d08:	push	{r4, r5, r6, sl, fp, lr}
   17d0c:	add	fp, sp, #16
   17d10:	mov	r5, r0
   17d14:	mov	r0, r1
   17d18:	mov	r4, r1
   17d1c:	bl	196ac <__assert_fail@plt+0x8388>
   17d20:	cmp	r0, #0
   17d24:	beq	17d40 <__assert_fail@plt+0x6a1c>
   17d28:	mov	r1, r5
   17d2c:	mov	r2, r4
   17d30:	mov	r6, r0
   17d34:	bl	110e4 <memcpy@plt>
   17d38:	mov	r0, r6
   17d3c:	pop	{r4, r5, r6, sl, fp, pc}
   17d40:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17d44:	push	{r4, r5, r6, sl, fp, lr}
   17d48:	add	fp, sp, #16
   17d4c:	mov	r5, r0
   17d50:	add	r0, r1, #1
   17d54:	mov	r4, r1
   17d58:	bl	196ac <__assert_fail@plt+0x8388>
   17d5c:	cmp	r0, #0
   17d60:	beq	17d88 <__assert_fail@plt+0x6a64>
   17d64:	mov	r6, r0
   17d68:	mov	r0, #0
   17d6c:	mov	r1, r5
   17d70:	mov	r2, r4
   17d74:	strb	r0, [r6, r4]
   17d78:	mov	r0, r6
   17d7c:	bl	110e4 <memcpy@plt>
   17d80:	mov	r0, r6
   17d84:	pop	{r4, r5, r6, sl, fp, pc}
   17d88:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17d8c:	push	{r4, r5, r6, sl, fp, lr}
   17d90:	add	fp, sp, #16
   17d94:	mov	r4, r0
   17d98:	bl	111f8 <strlen@plt>
   17d9c:	add	r5, r0, #1
   17da0:	mov	r0, r5
   17da4:	bl	196ac <__assert_fail@plt+0x8388>
   17da8:	cmp	r0, #0
   17dac:	beq	17dc8 <__assert_fail@plt+0x6aa4>
   17db0:	mov	r1, r4
   17db4:	mov	r2, r5
   17db8:	mov	r6, r0
   17dbc:	bl	110e4 <memcpy@plt>
   17dc0:	mov	r0, r6
   17dc4:	pop	{r4, r5, r6, sl, fp, pc}
   17dc8:	bl	17dcc <__assert_fail@plt+0x6aa8>
   17dcc:	push	{fp, lr}
   17dd0:	mov	fp, sp
   17dd4:	movw	r0, #53552	; 0xd130
   17dd8:	movw	r1, #50228	; 0xc434
   17ddc:	mov	r2, #5
   17de0:	movt	r0, #2
   17de4:	movt	r1, #1
   17de8:	ldr	r4, [r0]
   17dec:	mov	r0, #0
   17df0:	bl	11114 <dcgettext@plt>
   17df4:	movw	r2, #49177	; 0xc019
   17df8:	mov	r3, r0
   17dfc:	mov	r0, r4
   17e00:	mov	r1, #0
   17e04:	movt	r2, #1
   17e08:	bl	11198 <error@plt>
   17e0c:	bl	112f4 <abort@plt>
   17e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e14:	add	fp, sp, #28
   17e18:	sub	sp, sp, #12
   17e1c:	cmp	r2, #37	; 0x25
   17e20:	bcs	18984 <__assert_fail@plt+0x7660>
   17e24:	ldr	r8, [fp, #8]
   17e28:	mov	r9, r3
   17e2c:	mov	r7, r2
   17e30:	mov	r4, r1
   17e34:	mov	r5, r0
   17e38:	bl	11210 <__errno_location@plt>
   17e3c:	add	sl, sp, #8
   17e40:	cmp	r4, #0
   17e44:	mov	r6, r0
   17e48:	mov	r0, #0
   17e4c:	mov	r2, r7
   17e50:	movne	sl, r4
   17e54:	str	r0, [r6]
   17e58:	mov	r0, r5
   17e5c:	mov	r1, sl
   17e60:	bl	1109c <strtol@plt>
   17e64:	ldr	r4, [sl]
   17e68:	str	r9, [sp, #4]
   17e6c:	cmp	r4, r5
   17e70:	beq	17fd4 <__assert_fail@plt+0x6cb0>
   17e74:	mov	r7, r0
   17e78:	ldr	r0, [r6]
   17e7c:	cmp	r0, #0
   17e80:	beq	17ff4 <__assert_fail@plt+0x6cd0>
   17e84:	mov	r9, #4
   17e88:	cmp	r0, #34	; 0x22
   17e8c:	bne	17fe8 <__assert_fail@plt+0x6cc4>
   17e90:	mov	r9, #1
   17e94:	cmp	r8, #0
   17e98:	beq	18958 <__assert_fail@plt+0x7634>
   17e9c:	ldrb	r5, [r4]
   17ea0:	cmp	r5, #0
   17ea4:	beq	18958 <__assert_fail@plt+0x7634>
   17ea8:	mov	r0, r8
   17eac:	mov	r1, r5
   17eb0:	bl	11204 <strchr@plt>
   17eb4:	cmp	r0, #0
   17eb8:	beq	181d4 <__assert_fail@plt+0x6eb0>
   17ebc:	sub	r0, r5, #69	; 0x45
   17ec0:	mov	ip, #1
   17ec4:	mov	r6, #1024	; 0x400
   17ec8:	cmp	r0, #47	; 0x2f
   17ecc:	bhi	18030 <__assert_fail@plt+0x6d0c>
   17ed0:	add	r1, pc, #0
   17ed4:	ldr	pc, [r1, r0, lsl #2]
   17ed8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17edc:	andeq	r8, r1, r0, lsr r0
   17ee0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ee4:	andeq	r8, r1, r0, lsr r0
   17ee8:	andeq	r8, r1, r0, lsr r0
   17eec:	andeq	r8, r1, r0, lsr r0
   17ef0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ef4:	andeq	r8, r1, r0, lsr r0
   17ef8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17efc:	andeq	r8, r1, r0, lsr r0
   17f00:	andeq	r8, r1, r0, lsr r0
   17f04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f08:	andeq	r8, r1, r0, lsr r0
   17f0c:	andeq	r8, r1, r0, lsr r0
   17f10:	andeq	r8, r1, r0, lsr r0
   17f14:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f18:	andeq	r8, r1, r0, lsr r0
   17f1c:	andeq	r8, r1, r0, lsr r0
   17f20:	andeq	r8, r1, r0, lsr r0
   17f24:	andeq	r8, r1, r0, lsr r0
   17f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f30:	andeq	r8, r1, r0, lsr r0
   17f34:	andeq	r8, r1, r0, lsr r0
   17f38:	andeq	r8, r1, r0, lsr r0
   17f3c:	andeq	r8, r1, r0, lsr r0
   17f40:	andeq	r8, r1, r0, lsr r0
   17f44:	andeq	r8, r1, r0, lsr r0
   17f48:	andeq	r8, r1, r0, lsr r0
   17f4c:	andeq	r8, r1, r0, lsr r0
   17f50:	andeq	r8, r1, r0, lsr r0
   17f54:	andeq	r8, r1, r0, lsr r0
   17f58:	andeq	r8, r1, r0, lsr r0
   17f5c:	andeq	r8, r1, r0, lsr r0
   17f60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f64:	andeq	r8, r1, r0, lsr r0
   17f68:	andeq	r8, r1, r0, lsr r0
   17f6c:	andeq	r8, r1, r0, lsr r0
   17f70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f74:	andeq	r8, r1, r0, lsr r0
   17f78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f7c:	andeq	r8, r1, r0, lsr r0
   17f80:	andeq	r8, r1, r0, lsr r0
   17f84:	andeq	r8, r1, r0, lsr r0
   17f88:	andeq	r8, r1, r0, lsr r0
   17f8c:	andeq	r8, r1, r0, lsr r0
   17f90:	andeq	r8, r1, r0, lsr r0
   17f94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f98:	mov	r0, r8
   17f9c:	mov	r1, #48	; 0x30
   17fa0:	bl	11204 <strchr@plt>
   17fa4:	cmp	r0, #0
   17fa8:	beq	1802c <__assert_fail@plt+0x6d08>
   17fac:	ldrb	r0, [r4, #1]
   17fb0:	cmp	r0, #66	; 0x42
   17fb4:	cmpne	r0, #68	; 0x44
   17fb8:	bne	18140 <__assert_fail@plt+0x6e1c>
   17fbc:	mov	ip, #2
   17fc0:	mov	r6, #1000	; 0x3e8
   17fc4:	sub	r1, r5, #66	; 0x42
   17fc8:	cmp	r1, #53	; 0x35
   17fcc:	bls	1803c <__assert_fail@plt+0x6d18>
   17fd0:	b	181d4 <__assert_fail@plt+0x6eb0>
   17fd4:	cmp	r8, #0
   17fd8:	mov	r9, #4
   17fdc:	ldrbne	r1, [r5]
   17fe0:	cmpne	r1, #0
   17fe4:	bne	18004 <__assert_fail@plt+0x6ce0>
   17fe8:	mov	r0, r9
   17fec:	sub	sp, fp, #28
   17ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ff4:	mov	r9, r0
   17ff8:	cmp	r8, #0
   17ffc:	bne	17e9c <__assert_fail@plt+0x6b78>
   18000:	b	18958 <__assert_fail@plt+0x7634>
   18004:	mov	r0, r8
   18008:	bl	11204 <strchr@plt>
   1800c:	cmp	r0, #0
   18010:	beq	17fe8 <__assert_fail@plt+0x6cc4>
   18014:	mov	r7, #1
   18018:	mov	r9, #0
   1801c:	ldrb	r5, [r4]
   18020:	cmp	r5, #0
   18024:	bne	17ea8 <__assert_fail@plt+0x6b84>
   18028:	b	18958 <__assert_fail@plt+0x7634>
   1802c:	mov	ip, #1
   18030:	sub	r1, r5, #66	; 0x42
   18034:	cmp	r1, #53	; 0x35
   18038:	bhi	181d4 <__assert_fail@plt+0x6eb0>
   1803c:	add	r2, pc, #4
   18040:	mov	r0, #0
   18044:	ldr	pc, [r2, r1, lsl #2]
   18048:	andeq	r8, r1, ip, lsl #4
   1804c:	ldrdeq	r8, [r1], -r4
   18050:	ldrdeq	r8, [r1], -r4
   18054:	andeq	r8, r1, r0, lsr #4
   18058:	ldrdeq	r8, [r1], -r4
   1805c:	andeq	r8, r1, r0, lsr #2
   18060:	ldrdeq	r8, [r1], -r4
   18064:	ldrdeq	r8, [r1], -r4
   18068:	ldrdeq	r8, [r1], -r4
   1806c:	andeq	r8, r1, r8, ror #2
   18070:	ldrdeq	r8, [r1], -r4
   18074:	andeq	r8, r1, r4, lsl #3
   18078:	ldrdeq	r8, [r1], -r4
   1807c:	ldrdeq	r8, [r1], -r4
   18080:	andeq	r8, r1, r0, asr #4
   18084:	ldrdeq	r8, [r1], -r4
   18088:	ldrdeq	r8, [r1], -r4
   1808c:	ldrdeq	r8, [r1], -r4
   18090:	andeq	r8, r1, r4, lsr #3
   18094:	ldrdeq	r8, [r1], -r4
   18098:	ldrdeq	r8, [r1], -r4
   1809c:	ldrdeq	r8, [r1], -r4
   180a0:	ldrdeq	r8, [r1], -r4
   180a4:	andeq	r8, r1, r0, ror #4
   180a8:	andeq	r8, r1, ip, ror #3
   180ac:	ldrdeq	r8, [r1], -r4
   180b0:	ldrdeq	r8, [r1], -r4
   180b4:	ldrdeq	r8, [r1], -r4
   180b8:	ldrdeq	r8, [r1], -r4
   180bc:	ldrdeq	r8, [r1], -r4
   180c0:	ldrdeq	r8, [r1], -r4
   180c4:	ldrdeq	r8, [r1], -r4
   180c8:	andeq	r8, r1, r0, lsl #5
   180cc:	andeq	r8, r1, r0, asr #18
   180d0:	ldrdeq	r8, [r1], -r4
   180d4:	ldrdeq	r8, [r1], -r4
   180d8:	ldrdeq	r8, [r1], -r4
   180dc:	andeq	r8, r1, r0, lsr #2
   180e0:	ldrdeq	r8, [r1], -r4
   180e4:	ldrdeq	r8, [r1], -r4
   180e8:	ldrdeq	r8, [r1], -r4
   180ec:	andeq	r8, r1, r8, ror #2
   180f0:	ldrdeq	r8, [r1], -r4
   180f4:	andeq	r8, r1, r4, lsl #3
   180f8:	ldrdeq	r8, [r1], -r4
   180fc:	ldrdeq	r8, [r1], -r4
   18100:	ldrdeq	r8, [r1], -r4
   18104:	ldrdeq	r8, [r1], -r4
   18108:	ldrdeq	r8, [r1], -r4
   1810c:	ldrdeq	r8, [r1], -r4
   18110:	andeq	r8, r1, r4, lsr #3
   18114:	ldrdeq	r8, [r1], -r4
   18118:	ldrdeq	r8, [r1], -r4
   1811c:	andeq	r8, r1, r0, lsr #5
   18120:	cmn	r7, #1
   18124:	ble	182b4 <__assert_fail@plt+0x6f90>
   18128:	mvn	r2, #-2147483648	; 0x80000000
   1812c:	mov	r3, #1
   18130:	udiv	r0, r2, r6
   18134:	cmp	r0, r7
   18138:	bge	182cc <__assert_fail@plt+0x6fa8>
   1813c:	b	1838c <__assert_fail@plt+0x7068>
   18140:	cmp	r0, #105	; 0x69
   18144:	bne	181c4 <__assert_fail@plt+0x6ea0>
   18148:	ldrb	r0, [r4, #2]
   1814c:	mov	ip, #1
   18150:	cmp	r0, #66	; 0x42
   18154:	movweq	ip, #3
   18158:	sub	r1, r5, #66	; 0x42
   1815c:	cmp	r1, #53	; 0x35
   18160:	bls	1803c <__assert_fail@plt+0x6d18>
   18164:	b	181d4 <__assert_fail@plt+0x6eb0>
   18168:	cmn	r7, #1
   1816c:	ble	182e0 <__assert_fail@plt+0x6fbc>
   18170:	mvn	r1, #-2147483648	; 0x80000000
   18174:	udiv	r1, r1, r6
   18178:	cmp	r1, r7
   1817c:	bge	182f4 <__assert_fail@plt+0x6fd0>
   18180:	b	1855c <__assert_fail@plt+0x7238>
   18184:	cmn	r7, #1
   18188:	ble	182fc <__assert_fail@plt+0x6fd8>
   1818c:	mvn	r1, #-2147483648	; 0x80000000
   18190:	mov	r0, #1
   18194:	udiv	r2, r1, r6
   18198:	cmp	r2, r7
   1819c:	bge	18314 <__assert_fail@plt+0x6ff0>
   181a0:	b	183c8 <__assert_fail@plt+0x70a4>
   181a4:	cmn	r7, #1
   181a8:	ble	18328 <__assert_fail@plt+0x7004>
   181ac:	mvn	r0, #-2147483648	; 0x80000000
   181b0:	mov	r1, #1
   181b4:	udiv	r2, r0, r6
   181b8:	cmp	r2, r7
   181bc:	bge	18340 <__assert_fail@plt+0x701c>
   181c0:	b	18350 <__assert_fail@plt+0x702c>
   181c4:	mov	ip, #1
   181c8:	sub	r1, r5, #66	; 0x42
   181cc:	cmp	r1, #53	; 0x35
   181d0:	bls	1803c <__assert_fail@plt+0x6d18>
   181d4:	ldr	r0, [sp, #4]
   181d8:	orr	r9, r9, #2
   181dc:	str	r7, [r0]
   181e0:	mov	r0, r9
   181e4:	sub	sp, fp, #28
   181e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ec:	cmp	r7, #0
   181f0:	blt	18400 <__assert_fail@plt+0x70dc>
   181f4:	mvn	r0, #-2147483648	; 0x80000000
   181f8:	mov	r3, #1
   181fc:	udiv	r1, r0, r6
   18200:	cmp	r1, r7
   18204:	bge	1841c <__assert_fail@plt+0x70f8>
   18208:	b	1842c <__assert_fail@plt+0x7108>
   1820c:	cmn	r7, #1
   18210:	ble	18444 <__assert_fail@plt+0x7120>
   18214:	cmp	r7, #2097152	; 0x200000
   18218:	blt	18458 <__assert_fail@plt+0x7134>
   1821c:	b	1855c <__assert_fail@plt+0x7238>
   18220:	cmp	r7, #0
   18224:	blt	18460 <__assert_fail@plt+0x713c>
   18228:	mvn	r0, #-2147483648	; 0x80000000
   1822c:	mov	r3, #1
   18230:	udiv	r1, r0, r6
   18234:	cmp	r1, r7
   18238:	bge	1847c <__assert_fail@plt+0x7158>
   1823c:	b	1848c <__assert_fail@plt+0x7168>
   18240:	cmp	r7, #0
   18244:	blt	184a4 <__assert_fail@plt+0x7180>
   18248:	mvn	r0, #-2147483648	; 0x80000000
   1824c:	mov	r3, #1
   18250:	udiv	r1, r0, r6
   18254:	cmp	r1, r7
   18258:	bge	184c0 <__assert_fail@plt+0x719c>
   1825c:	b	184d0 <__assert_fail@plt+0x71ac>
   18260:	cmp	r7, #0
   18264:	blt	184e8 <__assert_fail@plt+0x71c4>
   18268:	mvn	r0, #-2147483648	; 0x80000000
   1826c:	mov	r3, #1
   18270:	udiv	r1, r0, r6
   18274:	cmp	r1, r7
   18278:	bge	18504 <__assert_fail@plt+0x71e0>
   1827c:	b	18514 <__assert_fail@plt+0x71f0>
   18280:	cmn	r7, #1
   18284:	ble	1852c <__assert_fail@plt+0x7208>
   18288:	movw	r1, #65535	; 0xffff
   1828c:	movt	r1, #31
   18290:	add	r1, r1, #2097152	; 0x200000
   18294:	cmp	r7, r1
   18298:	ble	18540 <__assert_fail@plt+0x721c>
   1829c:	b	1855c <__assert_fail@plt+0x7238>
   182a0:	cmn	r7, #1
   182a4:	ble	18548 <__assert_fail@plt+0x7224>
   182a8:	cmp	r7, #1073741824	; 0x40000000
   182ac:	bge	1855c <__assert_fail@plt+0x7238>
   182b0:	b	18574 <__assert_fail@plt+0x7250>
   182b4:	beq	182cc <__assert_fail@plt+0x6fa8>
   182b8:	mov	r2, #-2147483648	; 0x80000000
   182bc:	mov	r3, #1
   182c0:	sdiv	r0, r2, r7
   182c4:	cmp	r0, r6
   182c8:	blt	183a4 <__assert_fail@plt+0x7080>
   182cc:	mul	r2, r7, r6
   182d0:	mov	r3, #0
   182d4:	cmp	r2, #0
   182d8:	bge	1838c <__assert_fail@plt+0x7068>
   182dc:	b	183a4 <__assert_fail@plt+0x7080>
   182e0:	beq	182f4 <__assert_fail@plt+0x6fd0>
   182e4:	mov	r1, #-2147483648	; 0x80000000
   182e8:	sdiv	r1, r1, r7
   182ec:	cmp	r1, r6
   182f0:	blt	1855c <__assert_fail@plt+0x7238>
   182f4:	mul	r7, r7, r6
   182f8:	b	18940 <__assert_fail@plt+0x761c>
   182fc:	beq	18314 <__assert_fail@plt+0x6ff0>
   18300:	mov	r1, #-2147483648	; 0x80000000
   18304:	mov	r0, #1
   18308:	sdiv	r2, r1, r7
   1830c:	cmp	r2, r6
   18310:	blt	183e0 <__assert_fail@plt+0x70bc>
   18314:	mul	r1, r7, r6
   18318:	mov	r0, #0
   1831c:	cmp	r1, #0
   18320:	bge	183c8 <__assert_fail@plt+0x70a4>
   18324:	b	183e0 <__assert_fail@plt+0x70bc>
   18328:	beq	18340 <__assert_fail@plt+0x701c>
   1832c:	mov	r0, #-2147483648	; 0x80000000
   18330:	mov	r1, #1
   18334:	sdiv	r2, r0, r7
   18338:	cmp	r2, r6
   1833c:	blt	18368 <__assert_fail@plt+0x7044>
   18340:	mul	r0, r7, r6
   18344:	mov	r1, #0
   18348:	cmp	r0, #0
   1834c:	blt	18368 <__assert_fail@plt+0x7044>
   18350:	mvn	r2, #-2147483648	; 0x80000000
   18354:	mov	r3, #1
   18358:	udiv	r7, r2, r6
   1835c:	cmp	r7, r0
   18360:	blt	1838c <__assert_fail@plt+0x7068>
   18364:	b	1837c <__assert_fail@plt+0x7058>
   18368:	mov	r2, #-2147483648	; 0x80000000
   1836c:	mov	r3, #1
   18370:	sdiv	r7, r2, r0
   18374:	cmp	r7, r6
   18378:	blt	183a4 <__assert_fail@plt+0x7080>
   1837c:	mul	r2, r0, r6
   18380:	mov	r3, r1
   18384:	cmp	r2, #0
   18388:	blt	183a4 <__assert_fail@plt+0x7080>
   1838c:	mvn	r1, #-2147483648	; 0x80000000
   18390:	mov	r0, #1
   18394:	udiv	r7, r1, r6
   18398:	cmp	r7, r2
   1839c:	blt	183c8 <__assert_fail@plt+0x70a4>
   183a0:	b	183b8 <__assert_fail@plt+0x7094>
   183a4:	mov	r1, #-2147483648	; 0x80000000
   183a8:	mov	r0, #1
   183ac:	sdiv	r7, r1, r2
   183b0:	cmp	r7, r6
   183b4:	blt	183e0 <__assert_fail@plt+0x70bc>
   183b8:	mul	r1, r2, r6
   183bc:	mov	r0, r3
   183c0:	cmp	r1, #0
   183c4:	blt	183e0 <__assert_fail@plt+0x70bc>
   183c8:	mvn	r7, #-2147483648	; 0x80000000
   183cc:	mov	r2, #1
   183d0:	udiv	r3, r7, r6
   183d4:	cmp	r3, r1
   183d8:	blt	1893c <__assert_fail@plt+0x7618>
   183dc:	b	183f4 <__assert_fail@plt+0x70d0>
   183e0:	mov	r7, #-2147483648	; 0x80000000
   183e4:	mov	r2, #1
   183e8:	sdiv	r3, r7, r1
   183ec:	cmp	r3, r6
   183f0:	blt	1893c <__assert_fail@plt+0x7618>
   183f4:	mov	r2, #0
   183f8:	mul	r7, r1, r6
   183fc:	b	1893c <__assert_fail@plt+0x7618>
   18400:	cmn	r7, #1
   18404:	beq	1841c <__assert_fail@plt+0x70f8>
   18408:	mov	r0, #-2147483648	; 0x80000000
   1840c:	mov	r3, #1
   18410:	sdiv	r1, r0, r7
   18414:	cmp	r1, r6
   18418:	blt	1857c <__assert_fail@plt+0x7258>
   1841c:	mul	r0, r7, r6
   18420:	mov	r3, #0
   18424:	cmp	r0, #0
   18428:	blt	1857c <__assert_fail@plt+0x7258>
   1842c:	mvn	r1, #-2147483648	; 0x80000000
   18430:	mov	r2, #1
   18434:	udiv	r7, r1, r6
   18438:	cmp	r7, r0
   1843c:	bge	18590 <__assert_fail@plt+0x726c>
   18440:	b	185a0 <__assert_fail@plt+0x727c>
   18444:	beq	18458 <__assert_fail@plt+0x7134>
   18448:	mov	r1, #-2147483648	; 0x80000000
   1844c:	sdiv	r1, r1, r7
   18450:	cmp	r1, #1024	; 0x400
   18454:	blt	1855c <__assert_fail@plt+0x7238>
   18458:	lsl	r7, r7, #10
   1845c:	b	18940 <__assert_fail@plt+0x761c>
   18460:	cmn	r7, #1
   18464:	beq	1847c <__assert_fail@plt+0x7158>
   18468:	mov	r0, #-2147483648	; 0x80000000
   1846c:	mov	r3, #1
   18470:	sdiv	r1, r0, r7
   18474:	cmp	r1, r6
   18478:	blt	1865c <__assert_fail@plt+0x7338>
   1847c:	mul	r0, r7, r6
   18480:	mov	r3, #0
   18484:	cmp	r0, #0
   18488:	blt	1865c <__assert_fail@plt+0x7338>
   1848c:	mvn	r1, #-2147483648	; 0x80000000
   18490:	mov	r2, #1
   18494:	udiv	r7, r1, r6
   18498:	cmp	r7, r0
   1849c:	bge	18670 <__assert_fail@plt+0x734c>
   184a0:	b	18680 <__assert_fail@plt+0x735c>
   184a4:	cmn	r7, #1
   184a8:	beq	184c0 <__assert_fail@plt+0x719c>
   184ac:	mov	r0, #-2147483648	; 0x80000000
   184b0:	mov	r3, #1
   184b4:	sdiv	r1, r0, r7
   184b8:	cmp	r1, r6
   184bc:	blt	1873c <__assert_fail@plt+0x7418>
   184c0:	mul	r0, r7, r6
   184c4:	mov	r3, #0
   184c8:	cmp	r0, #0
   184cc:	blt	1873c <__assert_fail@plt+0x7418>
   184d0:	mvn	r1, #-2147483648	; 0x80000000
   184d4:	mov	r2, #1
   184d8:	udiv	r7, r1, r6
   184dc:	cmp	r7, r0
   184e0:	bge	18750 <__assert_fail@plt+0x742c>
   184e4:	b	18760 <__assert_fail@plt+0x743c>
   184e8:	cmn	r7, #1
   184ec:	beq	18504 <__assert_fail@plt+0x71e0>
   184f0:	mov	r0, #-2147483648	; 0x80000000
   184f4:	mov	r3, #1
   184f8:	sdiv	r1, r0, r7
   184fc:	cmp	r1, r6
   18500:	blt	187a0 <__assert_fail@plt+0x747c>
   18504:	mul	r0, r7, r6
   18508:	mov	r3, #0
   1850c:	cmp	r0, #0
   18510:	blt	187a0 <__assert_fail@plt+0x747c>
   18514:	mvn	r1, #-2147483648	; 0x80000000
   18518:	mov	r2, #1
   1851c:	udiv	r7, r1, r6
   18520:	cmp	r7, r0
   18524:	bge	187b4 <__assert_fail@plt+0x7490>
   18528:	b	187c4 <__assert_fail@plt+0x74a0>
   1852c:	beq	18540 <__assert_fail@plt+0x721c>
   18530:	mov	r1, #-2147483648	; 0x80000000
   18534:	sdiv	r1, r1, r7
   18538:	cmp	r1, #512	; 0x200
   1853c:	blt	1855c <__assert_fail@plt+0x7238>
   18540:	lsl	r7, r7, #9
   18544:	b	18940 <__assert_fail@plt+0x761c>
   18548:	beq	18574 <__assert_fail@plt+0x7250>
   1854c:	mov	r1, #-2147483648	; 0x80000000
   18550:	sdiv	r1, r1, r7
   18554:	cmp	r1, #2
   18558:	bge	18574 <__assert_fail@plt+0x7250>
   1855c:	mvn	r1, #-2147483648	; 0x80000000
   18560:	cmp	r7, #0
   18564:	mov	r0, #1
   18568:	movlt	r1, #-2147483648	; 0x80000000
   1856c:	mov	r7, r1
   18570:	b	18940 <__assert_fail@plt+0x761c>
   18574:	lsl	r7, r7, #1
   18578:	b	18940 <__assert_fail@plt+0x761c>
   1857c:	mov	r1, #-2147483648	; 0x80000000
   18580:	mov	r2, #1
   18584:	sdiv	r7, r1, r0
   18588:	cmp	r7, r6
   1858c:	blt	185b8 <__assert_fail@plt+0x7294>
   18590:	mul	r1, r0, r6
   18594:	mov	r2, r3
   18598:	cmp	r1, #0
   1859c:	blt	185b8 <__assert_fail@plt+0x7294>
   185a0:	mvn	r3, #-2147483648	; 0x80000000
   185a4:	mov	r0, #1
   185a8:	udiv	r7, r3, r6
   185ac:	cmp	r7, r1
   185b0:	bge	185cc <__assert_fail@plt+0x72a8>
   185b4:	b	185dc <__assert_fail@plt+0x72b8>
   185b8:	mov	r3, #-2147483648	; 0x80000000
   185bc:	mov	r0, #1
   185c0:	sdiv	r7, r3, r1
   185c4:	cmp	r7, r6
   185c8:	blt	18604 <__assert_fail@plt+0x72e0>
   185cc:	mul	r3, r1, r6
   185d0:	mov	r0, r2
   185d4:	cmp	r3, #0
   185d8:	blt	18604 <__assert_fail@plt+0x72e0>
   185dc:	mvn	r1, #-2147483648	; 0x80000000
   185e0:	udiv	r2, r1, r6
   185e4:	cmp	r2, r3
   185e8:	bge	1861c <__assert_fail@plt+0x72f8>
   185ec:	mov	r0, #1
   185f0:	mvn	r2, #-2147483648	; 0x80000000
   185f4:	udiv	r3, r2, r6
   185f8:	cmp	r3, r1
   185fc:	blt	186cc <__assert_fail@plt+0x73a8>
   18600:	b	1864c <__assert_fail@plt+0x7328>
   18604:	mov	r1, #-2147483648	; 0x80000000
   18608:	sdiv	r2, r1, r3
   1860c:	cmp	r2, r6
   18610:	bge	1861c <__assert_fail@plt+0x72f8>
   18614:	mov	r0, #1
   18618:	b	1863c <__assert_fail@plt+0x7318>
   1861c:	mul	r1, r3, r6
   18620:	cmp	r1, #0
   18624:	blt	1863c <__assert_fail@plt+0x7318>
   18628:	mvn	r2, #-2147483648	; 0x80000000
   1862c:	udiv	r3, r2, r6
   18630:	cmp	r3, r1
   18634:	bge	1864c <__assert_fail@plt+0x7328>
   18638:	b	186cc <__assert_fail@plt+0x73a8>
   1863c:	mov	r2, #-2147483648	; 0x80000000
   18640:	sdiv	r3, r2, r1
   18644:	cmp	r3, r6
   18648:	blt	186f4 <__assert_fail@plt+0x73d0>
   1864c:	mul	r2, r1, r6
   18650:	cmp	r2, #0
   18654:	bge	18708 <__assert_fail@plt+0x73e4>
   18658:	b	1871c <__assert_fail@plt+0x73f8>
   1865c:	mov	r1, #-2147483648	; 0x80000000
   18660:	mov	r2, #1
   18664:	sdiv	r7, r1, r0
   18668:	cmp	r7, r6
   1866c:	blt	18698 <__assert_fail@plt+0x7374>
   18670:	mul	r1, r0, r6
   18674:	mov	r2, r3
   18678:	cmp	r1, #0
   1867c:	blt	18698 <__assert_fail@plt+0x7374>
   18680:	mvn	r3, #-2147483648	; 0x80000000
   18684:	mov	r0, #1
   18688:	udiv	r7, r3, r6
   1868c:	cmp	r7, r1
   18690:	bge	186ac <__assert_fail@plt+0x7388>
   18694:	b	186bc <__assert_fail@plt+0x7398>
   18698:	mov	r3, #-2147483648	; 0x80000000
   1869c:	mov	r0, #1
   186a0:	sdiv	r7, r3, r1
   186a4:	cmp	r7, r6
   186a8:	blt	186e4 <__assert_fail@plt+0x73c0>
   186ac:	mul	r3, r1, r6
   186b0:	mov	r0, r2
   186b4:	cmp	r3, #0
   186b8:	blt	186e4 <__assert_fail@plt+0x73c0>
   186bc:	mvn	r2, #-2147483648	; 0x80000000
   186c0:	udiv	r1, r2, r6
   186c4:	cmp	r1, r3
   186c8:	bge	186fc <__assert_fail@plt+0x73d8>
   186cc:	mov	r0, #1
   186d0:	mvn	r1, #-2147483648	; 0x80000000
   186d4:	udiv	r3, r1, r6
   186d8:	cmp	r3, r2
   186dc:	bge	1872c <__assert_fail@plt+0x7408>
   186e0:	b	188f4 <__assert_fail@plt+0x75d0>
   186e4:	mov	r2, #-2147483648	; 0x80000000
   186e8:	sdiv	r1, r2, r3
   186ec:	cmp	r1, r6
   186f0:	bge	186fc <__assert_fail@plt+0x73d8>
   186f4:	mov	r0, #1
   186f8:	b	1871c <__assert_fail@plt+0x73f8>
   186fc:	mul	r2, r3, r6
   18700:	cmp	r2, #0
   18704:	blt	1871c <__assert_fail@plt+0x73f8>
   18708:	mvn	r1, #-2147483648	; 0x80000000
   1870c:	udiv	r3, r1, r6
   18710:	cmp	r3, r2
   18714:	blt	188f4 <__assert_fail@plt+0x75d0>
   18718:	b	1872c <__assert_fail@plt+0x7408>
   1871c:	mov	r1, #-2147483648	; 0x80000000
   18720:	sdiv	r3, r1, r2
   18724:	cmp	r3, r6
   18728:	blt	1890c <__assert_fail@plt+0x75e8>
   1872c:	mul	r1, r2, r6
   18730:	cmp	r1, #0
   18734:	bge	18920 <__assert_fail@plt+0x75fc>
   18738:	b	1896c <__assert_fail@plt+0x7648>
   1873c:	mov	r1, #-2147483648	; 0x80000000
   18740:	mov	r2, #1
   18744:	sdiv	r7, r1, r0
   18748:	cmp	r7, r6
   1874c:	blt	18778 <__assert_fail@plt+0x7454>
   18750:	mul	r1, r0, r6
   18754:	mov	r2, r3
   18758:	cmp	r1, #0
   1875c:	blt	18778 <__assert_fail@plt+0x7454>
   18760:	mvn	r3, #-2147483648	; 0x80000000
   18764:	mov	r0, #1
   18768:	udiv	r7, r3, r6
   1876c:	cmp	r7, r1
   18770:	bge	1878c <__assert_fail@plt+0x7468>
   18774:	b	188e4 <__assert_fail@plt+0x75c0>
   18778:	mov	r3, #-2147483648	; 0x80000000
   1877c:	mov	r0, #1
   18780:	sdiv	r7, r3, r1
   18784:	cmp	r7, r6
   18788:	blt	188fc <__assert_fail@plt+0x75d8>
   1878c:	mul	r3, r1, r6
   18790:	mov	r0, r2
   18794:	cmp	r3, #0
   18798:	bge	188e4 <__assert_fail@plt+0x75c0>
   1879c:	b	188fc <__assert_fail@plt+0x75d8>
   187a0:	mov	r1, #-2147483648	; 0x80000000
   187a4:	mov	r2, #1
   187a8:	sdiv	r7, r1, r0
   187ac:	cmp	r7, r6
   187b0:	blt	187dc <__assert_fail@plt+0x74b8>
   187b4:	mul	r1, r0, r6
   187b8:	mov	r2, r3
   187bc:	cmp	r1, #0
   187c0:	blt	187dc <__assert_fail@plt+0x74b8>
   187c4:	mvn	r3, #-2147483648	; 0x80000000
   187c8:	mov	r0, #1
   187cc:	udiv	r7, r3, r6
   187d0:	cmp	r7, r1
   187d4:	bge	187f0 <__assert_fail@plt+0x74cc>
   187d8:	b	18800 <__assert_fail@plt+0x74dc>
   187dc:	mov	r3, #-2147483648	; 0x80000000
   187e0:	mov	r0, #1
   187e4:	sdiv	r7, r3, r1
   187e8:	cmp	r7, r6
   187ec:	blt	18828 <__assert_fail@plt+0x7504>
   187f0:	mul	r3, r1, r6
   187f4:	mov	r0, r2
   187f8:	cmp	r3, #0
   187fc:	blt	18828 <__assert_fail@plt+0x7504>
   18800:	mvn	r1, #-2147483648	; 0x80000000
   18804:	udiv	r2, r1, r6
   18808:	cmp	r2, r3
   1880c:	bge	18840 <__assert_fail@plt+0x751c>
   18810:	mov	r0, #1
   18814:	mvn	r2, #-2147483648	; 0x80000000
   18818:	udiv	r3, r2, r6
   1881c:	cmp	r3, r1
   18820:	blt	1885c <__assert_fail@plt+0x7538>
   18824:	b	1888c <__assert_fail@plt+0x7568>
   18828:	mov	r1, #-2147483648	; 0x80000000
   1882c:	sdiv	r2, r1, r3
   18830:	cmp	r2, r6
   18834:	bge	18840 <__assert_fail@plt+0x751c>
   18838:	mov	r0, #1
   1883c:	b	18874 <__assert_fail@plt+0x7550>
   18840:	mul	r1, r3, r6
   18844:	cmp	r1, #0
   18848:	blt	18874 <__assert_fail@plt+0x7550>
   1884c:	mvn	r2, #-2147483648	; 0x80000000
   18850:	udiv	r3, r2, r6
   18854:	cmp	r3, r1
   18858:	bge	1888c <__assert_fail@plt+0x7568>
   1885c:	mov	r0, #1
   18860:	mvn	r3, #-2147483648	; 0x80000000
   18864:	udiv	r1, r3, r6
   18868:	cmp	r1, r2
   1886c:	bge	188d8 <__assert_fail@plt+0x75b4>
   18870:	b	188a8 <__assert_fail@plt+0x7584>
   18874:	mov	r2, #-2147483648	; 0x80000000
   18878:	sdiv	r3, r2, r1
   1887c:	cmp	r3, r6
   18880:	bge	1888c <__assert_fail@plt+0x7568>
   18884:	mov	r0, #1
   18888:	b	188c0 <__assert_fail@plt+0x759c>
   1888c:	mul	r2, r1, r6
   18890:	cmp	r2, #0
   18894:	blt	188c0 <__assert_fail@plt+0x759c>
   18898:	mvn	r3, #-2147483648	; 0x80000000
   1889c:	udiv	r1, r3, r6
   188a0:	cmp	r1, r2
   188a4:	bge	188d8 <__assert_fail@plt+0x75b4>
   188a8:	mov	r0, #1
   188ac:	mvn	r1, #-2147483648	; 0x80000000
   188b0:	udiv	r2, r1, r6
   188b4:	cmp	r2, r3
   188b8:	bge	18914 <__assert_fail@plt+0x75f0>
   188bc:	b	188f4 <__assert_fail@plt+0x75d0>
   188c0:	mov	r3, #-2147483648	; 0x80000000
   188c4:	sdiv	r1, r3, r2
   188c8:	cmp	r1, r6
   188cc:	bge	188d8 <__assert_fail@plt+0x75b4>
   188d0:	mov	r0, #1
   188d4:	b	188fc <__assert_fail@plt+0x75d8>
   188d8:	mul	r3, r2, r6
   188dc:	cmp	r3, #0
   188e0:	blt	188fc <__assert_fail@plt+0x75d8>
   188e4:	mvn	r1, #-2147483648	; 0x80000000
   188e8:	udiv	r2, r1, r6
   188ec:	cmp	r2, r3
   188f0:	bge	18914 <__assert_fail@plt+0x75f0>
   188f4:	mov	r0, #1
   188f8:	b	18920 <__assert_fail@plt+0x75fc>
   188fc:	mov	r1, #-2147483648	; 0x80000000
   18900:	sdiv	r2, r1, r3
   18904:	cmp	r2, r6
   18908:	bge	18914 <__assert_fail@plt+0x75f0>
   1890c:	mov	r0, #1
   18910:	b	1896c <__assert_fail@plt+0x7648>
   18914:	mul	r1, r3, r6
   18918:	cmp	r1, #0
   1891c:	blt	1896c <__assert_fail@plt+0x7648>
   18920:	mvn	r7, #-2147483648	; 0x80000000
   18924:	mov	r2, #1
   18928:	udiv	r3, r7, r6
   1892c:	cmp	r3, r1
   18930:	blt	1893c <__assert_fail@plt+0x7618>
   18934:	mul	r7, r1, r6
   18938:	mov	r2, #0
   1893c:	orr	r0, r2, r0
   18940:	add	r1, r4, ip
   18944:	orr	r9, r0, r9
   18948:	str	r1, [sl]
   1894c:	ldrb	r1, [r4, ip]
   18950:	cmp	r1, #0
   18954:	orrne	r9, r9, #2
   18958:	ldr	r0, [sp, #4]
   1895c:	str	r7, [r0]
   18960:	mov	r0, r9
   18964:	sub	sp, fp, #28
   18968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1896c:	mov	r7, #-2147483648	; 0x80000000
   18970:	mov	r2, #1
   18974:	sdiv	r3, r7, r1
   18978:	cmp	r3, r6
   1897c:	bge	18934 <__assert_fail@plt+0x7610>
   18980:	b	1893c <__assert_fail@plt+0x7618>
   18984:	movw	r0, #50245	; 0xc445
   18988:	movw	r1, #50356	; 0xc4b4
   1898c:	movw	r3, #50283	; 0xc46b
   18990:	mov	r2, #85	; 0x55
   18994:	movt	r0, #1
   18998:	movt	r1, #1
   1899c:	movt	r3, #1
   189a0:	bl	11324 <__assert_fail@plt>
   189a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189a8:	add	fp, sp, #28
   189ac:	sub	sp, sp, #44	; 0x2c
   189b0:	cmp	r2, #37	; 0x25
   189b4:	bcs	19638 <__assert_fail@plt+0x8314>
   189b8:	ldr	sl, [fp, #8]
   189bc:	mov	r6, r2
   189c0:	mov	r7, r1
   189c4:	mov	r4, r0
   189c8:	str	r3, [sp, #36]	; 0x24
   189cc:	bl	11210 <__errno_location@plt>
   189d0:	mov	r5, r0
   189d4:	mov	r0, #0
   189d8:	str	r0, [r5]
   189dc:	bl	111e0 <__ctype_b_loc@plt>
   189e0:	ldr	r1, [r0]
   189e4:	mov	r2, r4
   189e8:	ldrb	r0, [r2], #1
   189ec:	add	r3, r1, r0, lsl #1
   189f0:	ldrb	r3, [r3, #1]
   189f4:	tst	r3, #32
   189f8:	bne	189e8 <__assert_fail@plt+0x76c4>
   189fc:	sub	r9, fp, #32
   18a00:	cmp	r7, #0
   18a04:	mov	r8, #4
   18a08:	movne	r9, r7
   18a0c:	cmp	r0, #45	; 0x2d
   18a10:	beq	18dd0 <__assert_fail@plt+0x7aac>
   18a14:	mov	r0, r4
   18a18:	mov	r1, r9
   18a1c:	mov	r2, r6
   18a20:	mov	r3, #0
   18a24:	bl	110f0 <__strtoull_internal@plt>
   18a28:	mov	r7, r1
   18a2c:	ldr	r1, [r9]
   18a30:	cmp	r1, r4
   18a34:	beq	18a6c <__assert_fail@plt+0x7748>
   18a38:	mov	r6, r0
   18a3c:	ldr	r0, [r5]
   18a40:	cmp	r0, #0
   18a44:	beq	18d88 <__assert_fail@plt+0x7a64>
   18a48:	cmp	r0, #34	; 0x22
   18a4c:	bne	18dd0 <__assert_fail@plt+0x7aac>
   18a50:	mov	r8, #1
   18a54:	cmp	sl, #0
   18a58:	beq	19624 <__assert_fail@plt+0x8300>
   18a5c:	ldrb	r4, [r1]
   18a60:	cmp	r4, #0
   18a64:	bne	18ab0 <__assert_fail@plt+0x778c>
   18a68:	b	19624 <__assert_fail@plt+0x8300>
   18a6c:	cmp	sl, #0
   18a70:	beq	18dd0 <__assert_fail@plt+0x7aac>
   18a74:	mov	r5, r1
   18a78:	ldrb	r1, [r4]
   18a7c:	cmp	r1, #0
   18a80:	beq	18dd0 <__assert_fail@plt+0x7aac>
   18a84:	mov	r0, sl
   18a88:	bl	11204 <strchr@plt>
   18a8c:	cmp	r0, #0
   18a90:	beq	18dd0 <__assert_fail@plt+0x7aac>
   18a94:	mov	r1, r5
   18a98:	mov	r8, #0
   18a9c:	mov	r6, #1
   18aa0:	mov	r7, #0
   18aa4:	ldrb	r4, [r1]
   18aa8:	cmp	r4, #0
   18aac:	beq	19624 <__assert_fail@plt+0x8300>
   18ab0:	str	r1, [sp, #32]
   18ab4:	mov	r0, sl
   18ab8:	mov	r1, r4
   18abc:	bl	11204 <strchr@plt>
   18ac0:	cmp	r0, #0
   18ac4:	beq	18dc4 <__assert_fail@plt+0x7aa0>
   18ac8:	sub	r0, r4, #69	; 0x45
   18acc:	mov	r1, #1
   18ad0:	mov	r3, #0
   18ad4:	mov	r5, #1024	; 0x400
   18ad8:	cmp	r0, #47	; 0x2f
   18adc:	str	r1, [sp, #28]
   18ae0:	bhi	18be4 <__assert_fail@plt+0x78c0>
   18ae4:	add	r1, pc, #0
   18ae8:	ldr	pc, [r1, r0, lsl #2]
   18aec:	andeq	r8, r1, ip, lsr #23
   18af0:	andeq	r8, r1, r4, ror #23
   18af4:	andeq	r8, r1, ip, lsr #23
   18af8:	andeq	r8, r1, r4, ror #23
   18afc:	andeq	r8, r1, r4, ror #23
   18b00:	andeq	r8, r1, r4, ror #23
   18b04:	andeq	r8, r1, ip, lsr #23
   18b08:	andeq	r8, r1, r4, ror #23
   18b0c:	andeq	r8, r1, ip, lsr #23
   18b10:	andeq	r8, r1, r4, ror #23
   18b14:	andeq	r8, r1, r4, ror #23
   18b18:	andeq	r8, r1, ip, lsr #23
   18b1c:	andeq	r8, r1, r4, ror #23
   18b20:	andeq	r8, r1, r4, ror #23
   18b24:	andeq	r8, r1, r4, ror #23
   18b28:	andeq	r8, r1, ip, lsr #23
   18b2c:	andeq	r8, r1, r4, ror #23
   18b30:	andeq	r8, r1, r4, ror #23
   18b34:	andeq	r8, r1, r4, ror #23
   18b38:	andeq	r8, r1, r4, ror #23
   18b3c:	andeq	r8, r1, ip, lsr #23
   18b40:	andeq	r8, r1, ip, lsr #23
   18b44:	andeq	r8, r1, r4, ror #23
   18b48:	andeq	r8, r1, r4, ror #23
   18b4c:	andeq	r8, r1, r4, ror #23
   18b50:	andeq	r8, r1, r4, ror #23
   18b54:	andeq	r8, r1, r4, ror #23
   18b58:	andeq	r8, r1, r4, ror #23
   18b5c:	andeq	r8, r1, r4, ror #23
   18b60:	andeq	r8, r1, r4, ror #23
   18b64:	andeq	r8, r1, r4, ror #23
   18b68:	andeq	r8, r1, r4, ror #23
   18b6c:	andeq	r8, r1, r4, ror #23
   18b70:	andeq	r8, r1, r4, ror #23
   18b74:	andeq	r8, r1, ip, lsr #23
   18b78:	andeq	r8, r1, r4, ror #23
   18b7c:	andeq	r8, r1, r4, ror #23
   18b80:	andeq	r8, r1, r4, ror #23
   18b84:	andeq	r8, r1, ip, lsr #23
   18b88:	andeq	r8, r1, r4, ror #23
   18b8c:	andeq	r8, r1, ip, lsr #23
   18b90:	andeq	r8, r1, r4, ror #23
   18b94:	andeq	r8, r1, r4, ror #23
   18b98:	andeq	r8, r1, r4, ror #23
   18b9c:	andeq	r8, r1, r4, ror #23
   18ba0:	andeq	r8, r1, r4, ror #23
   18ba4:	andeq	r8, r1, r4, ror #23
   18ba8:	andeq	r8, r1, ip, lsr #23
   18bac:	mov	r0, sl
   18bb0:	mov	r1, #48	; 0x30
   18bb4:	bl	11204 <strchr@plt>
   18bb8:	cmp	r0, #0
   18bbc:	beq	18be0 <__assert_fail@plt+0x78bc>
   18bc0:	ldr	r1, [sp, #32]
   18bc4:	ldrb	r0, [r1, #1]
   18bc8:	cmp	r0, #66	; 0x42
   18bcc:	cmpne	r0, #68	; 0x44
   18bd0:	bne	18d98 <__assert_fail@plt+0x7a74>
   18bd4:	mov	r5, #1000	; 0x3e8
   18bd8:	mov	r0, #2
   18bdc:	str	r0, [sp, #28]
   18be0:	mov	r3, #0
   18be4:	sub	r0, r4, #66	; 0x42
   18be8:	cmp	r0, #53	; 0x35
   18bec:	bhi	18dc4 <__assert_fail@plt+0x7aa0>
   18bf0:	add	r1, pc, #0
   18bf4:	ldr	pc, [r1, r0, lsl #2]
   18bf8:	andeq	r9, r1, r4, lsr r1
   18bfc:	andeq	r8, r1, r4, asr #27
   18c00:	andeq	r8, r1, r4, asr #27
   18c04:	andeq	r9, r1, ip, asr r1
   18c08:	andeq	r8, r1, r4, asr #27
   18c0c:	ldrdeq	r8, [r1], -r0
   18c10:	andeq	r8, r1, r4, asr #27
   18c14:	andeq	r8, r1, r4, asr #27
   18c18:	andeq	r8, r1, r4, asr #27
   18c1c:	ldrdeq	r8, [r1], -ip
   18c20:	andeq	r8, r1, r4, asr #27
   18c24:	andeq	r8, r1, r4, lsr #28
   18c28:	andeq	r8, r1, r4, asr #27
   18c2c:	andeq	r8, r1, r4, asr #27
   18c30:			; <UNDEFINED> instruction: 0x000192b0
   18c34:	andeq	r8, r1, r4, asr #27
   18c38:	andeq	r8, r1, r4, asr #27
   18c3c:	andeq	r8, r1, r4, asr #27
   18c40:			; <UNDEFINED> instruction: 0x00018eb0
   18c44:	andeq	r8, r1, r4, asr #27
   18c48:	andeq	r8, r1, r4, asr #27
   18c4c:	andeq	r8, r1, r4, asr #27
   18c50:	andeq	r8, r1, r4, asr #27
   18c54:	ldrdeq	r9, [r1], -r8
   18c58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   18c5c:	andeq	r8, r1, r4, asr #27
   18c60:	andeq	r8, r1, r4, asr #27
   18c64:	andeq	r8, r1, r4, asr #27
   18c68:	andeq	r8, r1, r4, asr #27
   18c6c:	andeq	r8, r1, r4, asr #27
   18c70:	andeq	r8, r1, r4, asr #27
   18c74:	andeq	r8, r1, r4, asr #27
   18c78:	andeq	r9, r1, ip, lsr #11
   18c7c:	andeq	r9, r1, r4, lsl #12
   18c80:	andeq	r8, r1, r4, asr #27
   18c84:	andeq	r8, r1, r4, asr #27
   18c88:	andeq	r8, r1, r4, asr #27
   18c8c:	ldrdeq	r8, [r1], -r0
   18c90:	andeq	r8, r1, r4, asr #27
   18c94:	andeq	r8, r1, r4, asr #27
   18c98:	andeq	r8, r1, r4, asr #27
   18c9c:	ldrdeq	r8, [r1], -ip
   18ca0:	andeq	r8, r1, r4, asr #27
   18ca4:	andeq	r8, r1, r4, lsr #28
   18ca8:	andeq	r8, r1, r4, asr #27
   18cac:	andeq	r8, r1, r4, asr #27
   18cb0:	andeq	r8, r1, r4, asr #27
   18cb4:	andeq	r8, r1, r4, asr #27
   18cb8:	andeq	r8, r1, r4, asr #27
   18cbc:	andeq	r8, r1, r4, asr #27
   18cc0:			; <UNDEFINED> instruction: 0x00018eb0
   18cc4:	andeq	r8, r1, r4, asr #27
   18cc8:	andeq	r8, r1, r4, asr #27
   18ccc:	andeq	r9, r1, r0, ror #11
   18cd0:	mvn	r0, #0
   18cd4:	mvn	r1, #0
   18cd8:	mov	r2, r5
   18cdc:	mov	sl, r3
   18ce0:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   18ce4:	subs	r3, r0, r6
   18ce8:	mov	lr, #0
   18cec:	umull	r4, r2, r6, r5
   18cf0:	str	r1, [sp, #20]
   18cf4:	sbcs	r3, r1, r7
   18cf8:	mla	ip, r6, sl, r2
   18cfc:	mov	r2, r1
   18d00:	movwcc	lr, #1
   18d04:	mla	r7, r7, r5, ip
   18d08:	mov	r2, #0
   18d0c:	cmp	lr, #0
   18d10:	mvnne	r4, #0
   18d14:	mvnne	r7, #0
   18d18:	subs	r6, r0, r4
   18d1c:	sbcs	r6, r1, r7
   18d20:	movwcc	r2, #1
   18d24:	umull	r3, r6, r4, r5
   18d28:	cmp	r2, #0
   18d2c:	str	r6, [sp, #16]
   18d30:	mvnne	r3, #0
   18d34:	cmp	r2, #0
   18d38:	umull	r6, ip, r3, r5
   18d3c:	mla	r1, r3, sl, ip
   18d40:	ldr	ip, [sp, #16]
   18d44:	str	r1, [sp, #12]
   18d48:	mla	r4, r4, sl, ip
   18d4c:	mla	r4, r7, r5, r4
   18d50:	ldr	r7, [sp, #12]
   18d54:	mvnne	r4, #0
   18d58:	subs	r0, r0, r3
   18d5c:	ldr	r0, [sp, #20]
   18d60:	mla	r7, r4, r5, r7
   18d64:	sbcs	r0, r0, r4
   18d68:	mov	r0, #0
   18d6c:	movwcc	r0, #1
   18d70:	cmp	r0, #0
   18d74:	mov	r1, r0
   18d78:	orr	r0, lr, r2
   18d7c:	mvnne	r7, #0
   18d80:	mvnne	r6, #0
   18d84:	b	193d0 <__assert_fail@plt+0x80ac>
   18d88:	mov	r8, r0
   18d8c:	cmp	sl, #0
   18d90:	bne	18a5c <__assert_fail@plt+0x7738>
   18d94:	b	19624 <__assert_fail@plt+0x8300>
   18d98:	cmp	r0, #105	; 0x69
   18d9c:	mov	r3, #0
   18da0:	bne	18be4 <__assert_fail@plt+0x78c0>
   18da4:	ldrb	r0, [r1, #2]
   18da8:	mov	r1, #1
   18dac:	cmp	r0, #66	; 0x42
   18db0:	movweq	r1, #3
   18db4:	str	r1, [sp, #28]
   18db8:	sub	r0, r4, #66	; 0x42
   18dbc:	cmp	r0, #53	; 0x35
   18dc0:	bls	18bf0 <__assert_fail@plt+0x78cc>
   18dc4:	ldr	r0, [sp, #36]	; 0x24
   18dc8:	orr	r8, r8, #2
   18dcc:	strd	r6, [r0]
   18dd0:	mov	r0, r8
   18dd4:	sub	sp, fp, #28
   18dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ddc:	mvn	r0, #0
   18de0:	mvn	r1, #0
   18de4:	mov	r2, r5
   18de8:	mov	r4, r3
   18dec:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   18df0:	subs	r0, r0, r6
   18df4:	mov	r2, #0
   18df8:	sbcs	r0, r1, r7
   18dfc:	movwcc	r2, #1
   18e00:	umull	r0, r1, r6, r5
   18e04:	mla	r1, r6, r4, r1
   18e08:	cmp	r2, #0
   18e0c:	mov	r3, r2
   18e10:	mla	r7, r7, r5, r1
   18e14:	mvnne	r0, #0
   18e18:	mvnne	r7, #0
   18e1c:	mov	r6, r0
   18e20:	b	19604 <__assert_fail@plt+0x82e0>
   18e24:	mvn	r0, #0
   18e28:	mvn	r1, #0
   18e2c:	mov	r2, r5
   18e30:	str	r3, [sp, #24]
   18e34:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   18e38:	subs	r3, r0, r6
   18e3c:	mov	ip, r0
   18e40:	umull	r4, r0, r6, r5
   18e44:	mov	sl, #0
   18e48:	sbcs	r3, r1, r7
   18e4c:	str	r0, [sp, #20]
   18e50:	ldr	r0, [sp, #24]
   18e54:	mov	r3, #0
   18e58:	movwcc	r3, #1
   18e5c:	cmp	r3, #0
   18e60:	mvnne	r4, #0
   18e64:	cmp	r3, #0
   18e68:	umull	lr, r2, r4, r5
   18e6c:	mla	r2, r4, r0, r2
   18e70:	str	r2, [sp, #16]
   18e74:	ldr	r2, [sp, #20]
   18e78:	mla	r6, r6, r0, r2
   18e7c:	ldr	r0, [sp, #16]
   18e80:	mla	r6, r7, r5, r6
   18e84:	mvnne	r6, #0
   18e88:	mla	r7, r6, r5, r0
   18e8c:	subs	r0, ip, r4
   18e90:	sbcs	r0, r1, r6
   18e94:	movwcc	sl, #1
   18e98:	cmp	sl, #0
   18e9c:	orr	r3, r3, sl
   18ea0:	mvnne	lr, #0
   18ea4:	mvnne	r7, #0
   18ea8:	mov	r6, lr
   18eac:	b	19604 <__assert_fail@plt+0x82e0>
   18eb0:	mvn	r0, #0
   18eb4:	mvn	r1, #0
   18eb8:	mov	r2, r5
   18ebc:	mov	sl, r3
   18ec0:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   18ec4:	subs	r3, r0, r6
   18ec8:	mov	ip, r1
   18ecc:	umull	r2, lr, r6, r5
   18ed0:	str	r0, [sp, #20]
   18ed4:	sbcs	r3, r1, r7
   18ed8:	mov	r1, #0
   18edc:	mla	r6, r6, sl, lr
   18ee0:	mov	lr, #0
   18ee4:	str	ip, [sp, #16]
   18ee8:	movwcc	r1, #1
   18eec:	mla	r7, r7, r5, r6
   18ef0:	cmp	r1, #0
   18ef4:	mvnne	r2, #0
   18ef8:	cmp	r1, #0
   18efc:	umull	r3, r4, r2, r5
   18f00:	mvnne	r7, #0
   18f04:	mla	r4, r2, sl, r4
   18f08:	subs	r2, r0, r2
   18f0c:	sbcs	r2, ip, r7
   18f10:	mla	r4, r7, r5, r4
   18f14:	movwcc	lr, #1
   18f18:	mov	r2, #0
   18f1c:	cmp	lr, #0
   18f20:	mvnne	r3, #0
   18f24:	mvnne	r4, #0
   18f28:	subs	r7, r0, r3
   18f2c:	mov	r0, r5
   18f30:	sbcs	r7, ip, r4
   18f34:	movwcc	r2, #1
   18f38:	umull	r5, r7, r3, r5
   18f3c:	cmp	r2, #0
   18f40:	mla	r3, r3, sl, r7
   18f44:	mvnne	r5, #0
   18f48:	mla	r3, r4, r0, r3
   18f4c:	cmp	r2, #0
   18f50:	umull	r6, ip, r5, r0
   18f54:	mvnne	r3, #0
   18f58:	mla	ip, r5, sl, ip
   18f5c:	mla	r7, r3, r0, ip
   18f60:	ldr	r0, [sp, #20]
   18f64:	subs	r0, r0, r5
   18f68:	ldr	r0, [sp, #16]
   18f6c:	sbcs	r0, r0, r3
   18f70:	mov	r0, #0
   18f74:	movwcc	r0, #1
   18f78:	cmp	r0, #0
   18f7c:	mov	r3, r0
   18f80:	orr	r0, r1, lr
   18f84:	orr	r0, r0, r2
   18f88:	mvnne	r7, #0
   18f8c:	mvnne	r6, #0
   18f90:	orr	r3, r0, r3
   18f94:	b	19604 <__assert_fail@plt+0x82e0>
   18f98:	mvn	r0, #0
   18f9c:	mvn	r1, #0
   18fa0:	mov	r2, r5
   18fa4:	mov	r4, r3
   18fa8:	str	r3, [sp, #24]
   18fac:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   18fb0:	umull	r3, r2, r6, r5
   18fb4:	mla	r2, r6, r4, r2
   18fb8:	subs	r6, r0, r6
   18fbc:	sbcs	r6, r1, r7
   18fc0:	mla	r2, r7, r5, r2
   18fc4:	mov	r7, #0
   18fc8:	mov	r6, #0
   18fcc:	movwcc	r6, #1
   18fd0:	cmp	r6, #0
   18fd4:	str	r6, [sp, #20]
   18fd8:	mvnne	r3, #0
   18fdc:	mvnne	r2, #0
   18fe0:	subs	r4, r0, r3
   18fe4:	umull	r6, ip, r3, r5
   18fe8:	sbcs	r4, r1, r2
   18fec:	ldr	r4, [sp, #24]
   18ff0:	movwcc	r7, #1
   18ff4:	cmp	r7, #0
   18ff8:	mov	lr, r7
   18ffc:	str	r7, [sp, #16]
   19000:	mvnne	r6, #0
   19004:	cmp	lr, #0
   19008:	mov	lr, #0
   1900c:	umull	sl, r7, r6, r5
   19010:	mla	r3, r3, r4, ip
   19014:	mla	r7, r6, r4, r7
   19018:	mov	r4, r0
   1901c:	mla	r2, r2, r5, r3
   19020:	mvnne	r2, #0
   19024:	subs	r3, r0, r6
   19028:	mov	r0, #0
   1902c:	mla	r7, r2, r5, r7
   19030:	sbcs	r2, r1, r2
   19034:	mov	r3, r4
   19038:	movwcc	r0, #1
   1903c:	str	r3, [sp, #4]
   19040:	cmp	r0, #0
   19044:	str	r0, [sp, #12]
   19048:	mov	r0, r1
   1904c:	mvnne	sl, #0
   19050:	mvnne	r7, #0
   19054:	str	r0, [sp, #8]
   19058:	subs	r2, r4, sl
   1905c:	ldr	r4, [sp, #24]
   19060:	sbcs	r2, r1, r7
   19064:	movwcc	lr, #1
   19068:	umull	r6, r2, sl, r5
   1906c:	cmp	lr, #0
   19070:	mvnne	r6, #0
   19074:	mla	r2, sl, r4, r2
   19078:	cmp	lr, #0
   1907c:	umull	r1, ip, r6, r5
   19080:	mla	r2, r7, r5, r2
   19084:	mla	ip, r6, r4, ip
   19088:	mvnne	r2, #0
   1908c:	subs	r6, r3, r6
   19090:	mla	r7, r2, r5, ip
   19094:	sbcs	r2, r0, r2
   19098:	mov	ip, #0
   1909c:	movwcc	ip, #1
   190a0:	mov	r2, #0
   190a4:	cmp	ip, #0
   190a8:	mvnne	r1, #0
   190ac:	mvnne	r7, #0
   190b0:	subs	r6, r3, r1
   190b4:	ldr	r3, [sp, #24]
   190b8:	sbcs	r6, r0, r7
   190bc:	umull	r0, sl, r1, r5
   190c0:	movwcc	r2, #1
   190c4:	cmp	r2, #0
   190c8:	mvnne	r0, #0
   190cc:	mla	r1, r1, r3, sl
   190d0:	cmp	r2, #0
   190d4:	umull	r6, r4, r0, r5
   190d8:	mla	r1, r7, r5, r1
   190dc:	mla	r4, r0, r3, r4
   190e0:	ldr	r3, [sp, #4]
   190e4:	mvnne	r1, #0
   190e8:	mla	r7, r1, r5, r4
   190ec:	ldr	r5, [sp, #16]
   190f0:	subs	r0, r3, r0
   190f4:	ldr	r0, [sp, #8]
   190f8:	sbcs	r0, r0, r1
   190fc:	mov	r0, #0
   19100:	movwcc	r0, #1
   19104:	cmp	r0, #0
   19108:	mov	r1, r0
   1910c:	ldr	r0, [sp, #20]
   19110:	mvnne	r7, #0
   19114:	mvnne	r6, #0
   19118:	orr	r0, r0, r5
   1911c:	ldr	r5, [sp, #12]
   19120:	orr	r0, r0, r5
   19124:	orr	r0, r0, lr
   19128:	orr	r0, r0, ip
   1912c:	orr	r0, r0, r2
   19130:	b	195a0 <__assert_fail@plt+0x827c>
   19134:	mov	r1, #0
   19138:	lsl	r2, r7, #10
   1913c:	lsl	r0, r6, #10
   19140:	lsr	r3, r7, #22
   19144:	cmp	r1, r7, lsr #22
   19148:	orr	r2, r2, r6, lsr #22
   1914c:	mvnne	r0, #0
   19150:	movwne	r3, #1
   19154:	cmp	r1, r7, lsr #22
   19158:	b	195d0 <__assert_fail@plt+0x82ac>
   1915c:	mvn	r0, #0
   19160:	mvn	r1, #0
   19164:	mov	r2, r5
   19168:	mov	sl, r3
   1916c:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   19170:	subs	r2, r0, r6
   19174:	mov	ip, r0
   19178:	mov	r0, #0
   1917c:	sbcs	r2, r1, r7
   19180:	movwcc	r0, #1
   19184:	umull	r4, r2, r6, r5
   19188:	cmp	r0, #0
   1918c:	mla	r2, r6, sl, r2
   19190:	str	r0, [sp, #20]
   19194:	mvnne	r4, #0
   19198:	cmp	r0, #0
   1919c:	mla	r2, r7, r5, r2
   191a0:	mov	r0, #0
   191a4:	umull	lr, r3, r4, r5
   191a8:	mvnne	r2, #0
   191ac:	mla	r3, r4, sl, r3
   191b0:	mla	r6, r2, r5, r3
   191b4:	subs	r3, ip, r4
   191b8:	sbcs	r2, r1, r2
   191bc:	mov	r3, r1
   191c0:	movwcc	r0, #1
   191c4:	str	r3, [sp, #8]
   191c8:	cmp	r0, #0
   191cc:	str	r0, [sp, #16]
   191d0:	mov	r0, ip
   191d4:	mvnne	lr, #0
   191d8:	mvnne	r6, #0
   191dc:	str	r0, [sp, #12]
   191e0:	subs	r2, ip, lr
   191e4:	umull	r7, r4, lr, r5
   191e8:	sbcs	r2, r1, r6
   191ec:	mla	r4, lr, sl, r4
   191f0:	mov	r2, #0
   191f4:	mla	r6, r6, r5, r4
   191f8:	mov	r4, #0
   191fc:	movwcc	r2, #1
   19200:	cmp	r2, #0
   19204:	mvnne	r7, #0
   19208:	cmp	r2, #0
   1920c:	umull	r1, ip, r7, r5
   19210:	mvnne	r6, #0
   19214:	mla	ip, r7, sl, ip
   19218:	subs	r7, r0, r7
   1921c:	mla	lr, r6, r5, ip
   19220:	sbcs	r7, r3, r6
   19224:	mov	ip, #0
   19228:	movwcc	ip, #1
   1922c:	cmp	ip, #0
   19230:	mvnne	r1, #0
   19234:	mvnne	lr, #0
   19238:	subs	r7, r0, r1
   1923c:	sbcs	r7, r3, lr
   19240:	movwcc	r4, #1
   19244:	umull	r0, r7, r1, r5
   19248:	cmp	r4, #0
   1924c:	mla	r1, r1, sl, r7
   19250:	mvnne	r0, #0
   19254:	mla	r1, lr, r5, r1
   19258:	cmp	r4, #0
   1925c:	umull	r6, r3, r0, r5
   19260:	mvnne	r1, #0
   19264:	mla	r3, r0, sl, r3
   19268:	mla	r7, r1, r5, r3
   1926c:	ldr	r3, [sp, #12]
   19270:	subs	r0, r3, r0
   19274:	ldr	r3, [sp, #16]
   19278:	ldr	r0, [sp, #8]
   1927c:	sbcs	r0, r0, r1
   19280:	mov	r0, #0
   19284:	movwcc	r0, #1
   19288:	cmp	r0, #0
   1928c:	mov	r1, r0
   19290:	ldr	r0, [sp, #20]
   19294:	mvnne	r7, #0
   19298:	mvnne	r6, #0
   1929c:	orr	r0, r0, r3
   192a0:	orr	r0, r0, r2
   192a4:	orr	r0, r0, ip
   192a8:	orr	r0, r0, r4
   192ac:	b	193d0 <__assert_fail@plt+0x80ac>
   192b0:	mvn	r0, #0
   192b4:	mvn	r1, #0
   192b8:	mov	r2, r5
   192bc:	mov	sl, r3
   192c0:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   192c4:	umull	r3, r2, r6, r5
   192c8:	mov	lr, r1
   192cc:	mov	r1, r0
   192d0:	mla	r2, r6, sl, r2
   192d4:	subs	r6, r0, r6
   192d8:	mov	r0, #0
   192dc:	sbcs	r6, lr, r7
   192e0:	mla	r2, r7, r5, r2
   192e4:	movwcc	r0, #1
   192e8:	cmp	r0, #0
   192ec:	str	r0, [sp, #20]
   192f0:	mov	r0, r1
   192f4:	mvnne	r3, #0
   192f8:	mvnne	r2, #0
   192fc:	str	r0, [sp, #16]
   19300:	subs	r4, r1, r3
   19304:	umull	r7, ip, r3, r5
   19308:	sbcs	r4, lr, r2
   1930c:	mla	r3, r3, sl, ip
   19310:	mov	ip, #0
   19314:	mov	r4, #0
   19318:	mla	r2, r2, r5, r3
   1931c:	movwcc	r4, #1
   19320:	cmp	r4, #0
   19324:	mvnne	r7, #0
   19328:	cmp	r4, #0
   1932c:	umull	r1, r6, r7, r5
   19330:	mvnne	r2, #0
   19334:	mla	r6, r7, sl, r6
   19338:	mla	r3, r2, r5, r6
   1933c:	subs	r6, r0, r7
   19340:	sbcs	r2, lr, r2
   19344:	movwcc	ip, #1
   19348:	mov	r2, #0
   1934c:	cmp	ip, #0
   19350:	mvnne	r1, #0
   19354:	mvnne	r3, #0
   19358:	subs	r6, r0, r1
   1935c:	sbcs	r6, lr, r3
   19360:	movwcc	r2, #1
   19364:	umull	r0, r6, r1, r5
   19368:	cmp	r2, #0
   1936c:	str	r6, [sp, #12]
   19370:	mvnne	r0, #0
   19374:	cmp	r2, #0
   19378:	umull	r6, r7, r0, r5
   1937c:	mla	r7, r0, sl, r7
   19380:	str	r7, [sp, #8]
   19384:	ldr	r7, [sp, #12]
   19388:	mla	r1, r1, sl, r7
   1938c:	mla	r1, r3, r5, r1
   19390:	ldr	r3, [sp, #8]
   19394:	mvnne	r1, #0
   19398:	mla	r7, r1, r5, r3
   1939c:	ldr	r3, [sp, #16]
   193a0:	subs	r0, r3, r0
   193a4:	sbcs	r0, lr, r1
   193a8:	mov	r0, #0
   193ac:	movwcc	r0, #1
   193b0:	cmp	r0, #0
   193b4:	mov	r1, r0
   193b8:	ldr	r0, [sp, #20]
   193bc:	mvnne	r7, #0
   193c0:	mvnne	r6, #0
   193c4:	orr	r0, r0, r4
   193c8:	orr	r0, r0, ip
   193cc:	orr	r0, r0, r2
   193d0:	orr	r3, r0, r1
   193d4:	b	19604 <__assert_fail@plt+0x82e0>
   193d8:	mvn	r0, #0
   193dc:	mvn	r1, #0
   193e0:	mov	r2, r5
   193e4:	mov	sl, r3
   193e8:	bl	19ef8 <__assert_fail@plt+0x8bd4>
   193ec:	mov	ip, r1
   193f0:	subs	r1, r0, r6
   193f4:	umull	r3, lr, r6, r5
   193f8:	mov	r2, r5
   193fc:	sbcs	r1, ip, r7
   19400:	mla	r6, r6, sl, lr
   19404:	str	ip, [sp, #4]
   19408:	mov	r1, #0
   1940c:	mla	r7, r7, r2, r6
   19410:	movwcc	r1, #1
   19414:	cmp	r1, #0
   19418:	str	r1, [sp, #20]
   1941c:	mvnne	r3, #0
   19420:	cmp	r1, #0
   19424:	mov	r1, r0
   19428:	umull	r4, r5, r3, r5
   1942c:	mvnne	r7, #0
   19430:	mov	lr, r1
   19434:	mla	r5, r3, sl, r5
   19438:	subs	r3, r0, r3
   1943c:	sbcs	r0, ip, r7
   19440:	mla	r5, r7, r2, r5
   19444:	mov	r0, #0
   19448:	movwcc	r0, #1
   1944c:	cmp	r0, #0
   19450:	str	r0, [sp, #16]
   19454:	mvnne	r4, #0
   19458:	mvnne	r5, #0
   1945c:	subs	r0, r1, r4
   19460:	mov	r1, #0
   19464:	sbcs	r0, ip, r5
   19468:	movwcc	r1, #1
   1946c:	umull	r3, r0, r4, r2
   19470:	cmp	r1, #0
   19474:	mla	r0, r4, sl, r0
   19478:	mov	r4, lr
   1947c:	str	r1, [sp, #12]
   19480:	mvnne	r3, #0
   19484:	mla	r0, r5, r2, r0
   19488:	cmp	r1, #0
   1948c:	str	r4, [sp]
   19490:	umull	r7, r6, r3, r2
   19494:	mvnne	r0, #0
   19498:	mla	r6, r3, sl, r6
   1949c:	subs	r3, lr, r3
   194a0:	mla	r5, r0, r2, r6
   194a4:	sbcs	r0, ip, r0
   194a8:	mov	r3, #0
   194ac:	mov	r0, #0
   194b0:	movwcc	r0, #1
   194b4:	cmp	r0, #0
   194b8:	str	r0, [sp, #8]
   194bc:	mvnne	r7, #0
   194c0:	mvnne	r5, #0
   194c4:	subs	r0, lr, r7
   194c8:	sbcs	r0, ip, r5
   194cc:	movwcc	r3, #1
   194d0:	umull	r6, r0, r7, r2
   194d4:	cmp	r3, #0
   194d8:	mla	r7, r7, sl, r0
   194dc:	mov	r0, ip
   194e0:	mvnne	r6, #0
   194e4:	mla	r7, r5, r2, r7
   194e8:	cmp	r3, #0
   194ec:	mov	r5, #0
   194f0:	umull	r1, lr, r6, r2
   194f4:	mvnne	r7, #0
   194f8:	mla	lr, r6, sl, lr
   194fc:	subs	r6, r4, r6
   19500:	mla	lr, r7, r2, lr
   19504:	sbcs	r7, ip, r7
   19508:	mov	ip, #0
   1950c:	movwcc	ip, #1
   19510:	cmp	ip, #0
   19514:	mvnne	r1, #0
   19518:	mvnne	lr, #0
   1951c:	subs	r7, r4, r1
   19520:	sbcs	r7, r0, lr
   19524:	movwcc	r5, #1
   19528:	umull	r0, r7, r1, r2
   1952c:	cmp	r5, #0
   19530:	mla	r1, r1, sl, r7
   19534:	mvnne	r0, #0
   19538:	mla	r1, lr, r2, r1
   1953c:	cmp	r5, #0
   19540:	umull	r6, r4, r0, r2
   19544:	mvnne	r1, #0
   19548:	mla	r4, r0, sl, r4
   1954c:	mla	r7, r1, r2, r4
   19550:	ldr	r2, [sp]
   19554:	subs	r0, r2, r0
   19558:	ldr	r2, [sp, #16]
   1955c:	ldr	r0, [sp, #4]
   19560:	sbcs	r0, r0, r1
   19564:	mov	r0, #0
   19568:	movwcc	r0, #1
   1956c:	cmp	r0, #0
   19570:	mov	r1, r0
   19574:	ldr	r0, [sp, #20]
   19578:	mvnne	r7, #0
   1957c:	mvnne	r6, #0
   19580:	orr	r0, r0, r2
   19584:	ldr	r2, [sp, #12]
   19588:	orr	r0, r0, r2
   1958c:	ldr	r2, [sp, #8]
   19590:	orr	r0, r0, r2
   19594:	orr	r0, r0, r3
   19598:	orr	r0, r0, ip
   1959c:	orr	r0, r0, r5
   195a0:	orr	r0, r0, r1
   195a4:	and	r3, r0, #1
   195a8:	b	19604 <__assert_fail@plt+0x82e0>
   195ac:	mov	r1, #0
   195b0:	lsl	r2, r7, #9
   195b4:	lsl	r0, r6, #9
   195b8:	lsr	r3, r7, #23
   195bc:	cmp	r1, r7, lsr #23
   195c0:	orr	r2, r2, r6, lsr #23
   195c4:	mvnne	r0, #0
   195c8:	movwne	r3, #1
   195cc:	cmp	r1, r7, lsr #23
   195d0:	mvnne	r2, #0
   195d4:	mov	r6, r0
   195d8:	mov	r7, r2
   195dc:	b	19604 <__assert_fail@plt+0x82e0>
   195e0:	lsl	r1, r7, #1
   195e4:	lsl	r0, r6, #1
   195e8:	cmp	r7, #0
   195ec:	lsr	r3, r7, #31
   195f0:	orr	r1, r1, r6, lsr #31
   195f4:	mvnlt	r0, #0
   195f8:	mvnlt	r1, #0
   195fc:	mov	r6, r0
   19600:	mov	r7, r1
   19604:	ldr	r1, [sp, #32]
   19608:	ldr	r2, [sp, #28]
   1960c:	orr	r8, r3, r8
   19610:	add	r0, r1, r2
   19614:	str	r0, [r9]
   19618:	ldrb	r0, [r1, r2]
   1961c:	cmp	r0, #0
   19620:	orrne	r8, r8, #2
   19624:	ldr	r0, [sp, #36]	; 0x24
   19628:	strd	r6, [r0]
   1962c:	mov	r0, r8
   19630:	sub	sp, fp, #28
   19634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19638:	movw	r0, #50245	; 0xc445
   1963c:	movw	r1, #50354	; 0xc4b2
   19640:	movw	r3, #50370	; 0xc4c2
   19644:	mov	r2, #85	; 0x55
   19648:	movt	r0, #1
   1964c:	movt	r1, #1
   19650:	movt	r3, #1
   19654:	bl	11324 <__assert_fail@plt>
   19658:	clz	r2, r1
   1965c:	clz	r3, r0
   19660:	lsr	r2, r2, #5
   19664:	lsr	r3, r3, #5
   19668:	orrs	r2, r3, r2
   1966c:	movwne	r1, #1
   19670:	movwne	r0, #1
   19674:	cmp	r1, #0
   19678:	beq	196a8 <__assert_fail@plt+0x8384>
   1967c:	mvn	r2, #-2147483648	; 0x80000000
   19680:	udiv	r2, r2, r1
   19684:	cmp	r2, r0
   19688:	bcs	196a8 <__assert_fail@plt+0x8384>
   1968c:	push	{fp, lr}
   19690:	mov	fp, sp
   19694:	bl	11210 <__errno_location@plt>
   19698:	mov	r1, #12
   1969c:	str	r1, [r0]
   196a0:	mov	r0, #0
   196a4:	pop	{fp, pc}
   196a8:	b	11060 <calloc@plt>
   196ac:	cmp	r0, #0
   196b0:	movweq	r0, #1
   196b4:	cmn	r0, #1
   196b8:	ble	196c0 <__assert_fail@plt+0x839c>
   196bc:	b	111a4 <malloc@plt>
   196c0:	push	{fp, lr}
   196c4:	mov	fp, sp
   196c8:	bl	11210 <__errno_location@plt>
   196cc:	mov	r1, #12
   196d0:	str	r1, [r0]
   196d4:	mov	r0, #0
   196d8:	pop	{fp, pc}
   196dc:	push	{fp, lr}
   196e0:	mov	fp, sp
   196e4:	cmp	r0, #0
   196e8:	beq	19704 <__assert_fail@plt+0x83e0>
   196ec:	cmp	r1, #0
   196f0:	beq	19710 <__assert_fail@plt+0x83ec>
   196f4:	cmn	r1, #1
   196f8:	ble	1971c <__assert_fail@plt+0x83f8>
   196fc:	pop	{fp, lr}
   19700:	b	11120 <realloc@plt>
   19704:	mov	r0, r1
   19708:	pop	{fp, lr}
   1970c:	b	196ac <__assert_fail@plt+0x8388>
   19710:	bl	14d74 <__assert_fail@plt+0x3a50>
   19714:	mov	r0, #0
   19718:	pop	{fp, pc}
   1971c:	bl	11210 <__errno_location@plt>
   19720:	mov	r1, #12
   19724:	str	r1, [r0]
   19728:	mov	r0, #0
   1972c:	pop	{fp, pc}
   19730:	push	{r4, r5, r6, sl, fp, lr}
   19734:	add	fp, sp, #16
   19738:	mov	r4, r0
   1973c:	bl	11174 <__fpending@plt>
   19740:	ldr	r6, [r4]
   19744:	mov	r5, r0
   19748:	mov	r0, r4
   1974c:	bl	197b4 <__assert_fail@plt+0x8490>
   19750:	tst	r6, #32
   19754:	bne	1978c <__assert_fail@plt+0x8468>
   19758:	cmp	r0, #0
   1975c:	mov	r4, r0
   19760:	mvnne	r4, #0
   19764:	cmp	r5, #0
   19768:	bne	19798 <__assert_fail@plt+0x8474>
   1976c:	cmp	r0, #0
   19770:	beq	19798 <__assert_fail@plt+0x8474>
   19774:	bl	11210 <__errno_location@plt>
   19778:	ldr	r0, [r0]
   1977c:	subs	r4, r0, #9
   19780:	mvnne	r4, #0
   19784:	mov	r0, r4
   19788:	pop	{r4, r5, r6, sl, fp, pc}
   1978c:	mvn	r4, #0
   19790:	cmp	r0, #0
   19794:	beq	197a0 <__assert_fail@plt+0x847c>
   19798:	mov	r0, r4
   1979c:	pop	{r4, r5, r6, sl, fp, pc}
   197a0:	bl	11210 <__errno_location@plt>
   197a4:	mov	r1, #0
   197a8:	str	r1, [r0]
   197ac:	mov	r0, r4
   197b0:	pop	{r4, r5, r6, sl, fp, pc}
   197b4:	push	{r4, r5, r6, sl, fp, lr}
   197b8:	add	fp, sp, #16
   197bc:	sub	sp, sp, #8
   197c0:	mov	r4, r0
   197c4:	bl	11240 <fileno@plt>
   197c8:	cmn	r0, #1
   197cc:	ble	19840 <__assert_fail@plt+0x851c>
   197d0:	mov	r0, r4
   197d4:	bl	111bc <__freading@plt>
   197d8:	cmp	r0, #0
   197dc:	beq	19808 <__assert_fail@plt+0x84e4>
   197e0:	mov	r0, r4
   197e4:	bl	11240 <fileno@plt>
   197e8:	mov	r1, #1
   197ec:	mov	r2, #0
   197f0:	mov	r3, #0
   197f4:	str	r1, [sp]
   197f8:	bl	11150 <lseek64@plt>
   197fc:	and	r0, r0, r1
   19800:	cmn	r0, #1
   19804:	beq	19840 <__assert_fail@plt+0x851c>
   19808:	mov	r0, r4
   1980c:	bl	19850 <__assert_fail@plt+0x852c>
   19810:	cmp	r0, #0
   19814:	beq	19840 <__assert_fail@plt+0x851c>
   19818:	bl	11210 <__errno_location@plt>
   1981c:	ldr	r6, [r0]
   19820:	mov	r5, r0
   19824:	mov	r0, r4
   19828:	bl	11264 <fclose@plt>
   1982c:	cmp	r6, #0
   19830:	strne	r6, [r5]
   19834:	mvnne	r0, #0
   19838:	sub	sp, fp, #16
   1983c:	pop	{r4, r5, r6, sl, fp, pc}
   19840:	mov	r0, r4
   19844:	sub	sp, fp, #16
   19848:	pop	{r4, r5, r6, sl, fp, lr}
   1984c:	b	11264 <fclose@plt>
   19850:	push	{r4, sl, fp, lr}
   19854:	add	fp, sp, #8
   19858:	sub	sp, sp, #8
   1985c:	mov	r4, r0
   19860:	cmp	r0, #0
   19864:	beq	19880 <__assert_fail@plt+0x855c>
   19868:	mov	r0, r4
   1986c:	bl	111bc <__freading@plt>
   19870:	cmp	r0, #0
   19874:	ldrbne	r0, [r4, #1]
   19878:	tstne	r0, #1
   1987c:	bne	19890 <__assert_fail@plt+0x856c>
   19880:	mov	r0, r4
   19884:	sub	sp, fp, #8
   19888:	pop	{r4, sl, fp, lr}
   1988c:	b	110a8 <fflush@plt>
   19890:	mov	r0, #1
   19894:	mov	r2, #0
   19898:	mov	r3, #0
   1989c:	str	r0, [sp]
   198a0:	mov	r0, r4
   198a4:	bl	198b8 <__assert_fail@plt+0x8594>
   198a8:	mov	r0, r4
   198ac:	sub	sp, fp, #8
   198b0:	pop	{r4, sl, fp, lr}
   198b4:	b	110a8 <fflush@plt>
   198b8:	push	{r4, r5, r6, r7, fp, lr}
   198bc:	add	fp, sp, #16
   198c0:	sub	sp, sp, #8
   198c4:	mov	r4, r0
   198c8:	ldr	r0, [r0, #4]
   198cc:	mov	r5, r3
   198d0:	mov	r6, r2
   198d4:	ldr	r1, [r4, #8]
   198d8:	cmp	r1, r0
   198dc:	bne	198f8 <__assert_fail@plt+0x85d4>
   198e0:	ldrd	r0, [r4, #16]
   198e4:	cmp	r1, r0
   198e8:	bne	198f8 <__assert_fail@plt+0x85d4>
   198ec:	ldr	r0, [r4, #36]	; 0x24
   198f0:	cmp	r0, #0
   198f4:	beq	19910 <__assert_fail@plt+0x85ec>
   198f8:	mov	r0, r4
   198fc:	mov	r2, r6
   19900:	mov	r3, r5
   19904:	sub	sp, fp, #16
   19908:	pop	{r4, r5, r6, r7, fp, lr}
   1990c:	b	11270 <fseeko64@plt>
   19910:	ldr	r7, [fp, #8]
   19914:	mov	r0, r4
   19918:	bl	11240 <fileno@plt>
   1991c:	mov	r2, r6
   19920:	mov	r3, r5
   19924:	str	r7, [sp]
   19928:	bl	11150 <lseek64@plt>
   1992c:	and	r2, r0, r1
   19930:	cmn	r2, #1
   19934:	mvneq	r0, #0
   19938:	subeq	sp, fp, #16
   1993c:	popeq	{r4, r5, r6, r7, fp, pc}
   19940:	strd	r0, [r4, #80]	; 0x50
   19944:	ldr	r0, [r4]
   19948:	bic	r0, r0, #16
   1994c:	str	r0, [r4]
   19950:	mov	r0, #0
   19954:	sub	sp, fp, #16
   19958:	pop	{r4, r5, r6, r7, fp, pc}
   1995c:	push	{fp, lr}
   19960:	mov	fp, sp
   19964:	mov	r0, #14
   19968:	bl	112ac <nl_langinfo@plt>
   1996c:	movw	r1, #46377	; 0xb529
   19970:	cmp	r0, #0
   19974:	movt	r1, #1
   19978:	movne	r1, r0
   1997c:	movw	r0, #50449	; 0xc511
   19980:	ldrb	r2, [r1]
   19984:	movt	r0, #1
   19988:	cmp	r2, #0
   1998c:	movne	r0, r1
   19990:	pop	{fp, pc}
   19994:	push	{r4, r5, r6, r7, fp, lr}
   19998:	add	fp, sp, #16
   1999c:	sub	sp, sp, #8
   199a0:	add	r5, sp, #4
   199a4:	cmp	r0, #0
   199a8:	mov	r7, r2
   199ac:	mov	r4, r1
   199b0:	movne	r5, r0
   199b4:	mov	r0, r5
   199b8:	bl	11180 <mbrtowc@plt>
   199bc:	mov	r6, r0
   199c0:	cmp	r7, #0
   199c4:	beq	199e8 <__assert_fail@plt+0x86c4>
   199c8:	cmn	r6, #2
   199cc:	bcc	199e8 <__assert_fail@plt+0x86c4>
   199d0:	mov	r0, #0
   199d4:	bl	19a30 <__assert_fail@plt+0x870c>
   199d8:	cmp	r0, #0
   199dc:	ldrbeq	r0, [r4]
   199e0:	moveq	r6, #1
   199e4:	streq	r0, [r5]
   199e8:	mov	r0, r6
   199ec:	sub	sp, fp, #16
   199f0:	pop	{r4, r5, r6, r7, fp, pc}
   199f4:	cmp	r2, #0
   199f8:	beq	19a28 <__assert_fail@plt+0x8704>
   199fc:	mvn	r3, #0
   19a00:	udiv	r3, r3, r2
   19a04:	cmp	r3, r1
   19a08:	bcs	19a28 <__assert_fail@plt+0x8704>
   19a0c:	push	{fp, lr}
   19a10:	mov	fp, sp
   19a14:	bl	11210 <__errno_location@plt>
   19a18:	mov	r1, #12
   19a1c:	str	r1, [r0]
   19a20:	mov	r0, #0
   19a24:	pop	{fp, pc}
   19a28:	mul	r1, r2, r1
   19a2c:	b	196dc <__assert_fail@plt+0x83b8>
   19a30:	push	{r4, sl, fp, lr}
   19a34:	add	fp, sp, #8
   19a38:	sub	sp, sp, #264	; 0x108
   19a3c:	add	r1, sp, #7
   19a40:	movw	r2, #257	; 0x101
   19a44:	bl	19a94 <__assert_fail@plt+0x8770>
   19a48:	mov	r4, #0
   19a4c:	cmp	r0, #0
   19a50:	bne	19a88 <__assert_fail@plt+0x8764>
   19a54:	movw	r1, #50455	; 0xc517
   19a58:	add	r0, sp, #7
   19a5c:	movt	r1, #1
   19a60:	bl	11090 <strcmp@plt>
   19a64:	cmp	r0, #0
   19a68:	beq	19a88 <__assert_fail@plt+0x8764>
   19a6c:	movw	r1, #50457	; 0xc519
   19a70:	add	r0, sp, #7
   19a74:	movt	r1, #1
   19a78:	bl	11090 <strcmp@plt>
   19a7c:	mov	r4, r0
   19a80:	cmp	r0, #0
   19a84:	movwne	r4, #1
   19a88:	mov	r0, r4
   19a8c:	sub	sp, fp, #8
   19a90:	pop	{r4, sl, fp, pc}
   19a94:	push	{r4, r5, r6, r7, fp, lr}
   19a98:	add	fp, sp, #16
   19a9c:	mov	r4, r1
   19aa0:	mov	r1, #0
   19aa4:	mov	r6, r2
   19aa8:	bl	11288 <setlocale@plt>
   19aac:	cmp	r0, #0
   19ab0:	beq	19ae0 <__assert_fail@plt+0x87bc>
   19ab4:	mov	r7, r0
   19ab8:	bl	111f8 <strlen@plt>
   19abc:	cmp	r0, r6
   19ac0:	bcs	19b00 <__assert_fail@plt+0x87dc>
   19ac4:	add	r2, r0, #1
   19ac8:	mov	r0, r4
   19acc:	mov	r1, r7
   19ad0:	bl	110e4 <memcpy@plt>
   19ad4:	mov	r5, #0
   19ad8:	mov	r0, r5
   19adc:	pop	{r4, r5, r6, r7, fp, pc}
   19ae0:	cmp	r6, #0
   19ae4:	mov	r5, #22
   19ae8:	movne	r0, #0
   19aec:	strbne	r0, [r4]
   19af0:	movne	r0, r5
   19af4:	popne	{r4, r5, r6, r7, fp, pc}
   19af8:	mov	r0, r5
   19afc:	pop	{r4, r5, r6, r7, fp, pc}
   19b00:	mov	r5, #34	; 0x22
   19b04:	cmp	r6, #0
   19b08:	beq	19b28 <__assert_fail@plt+0x8804>
   19b0c:	sub	r6, r6, #1
   19b10:	mov	r0, r4
   19b14:	mov	r1, r7
   19b18:	mov	r2, r6
   19b1c:	bl	110e4 <memcpy@plt>
   19b20:	mov	r0, #0
   19b24:	strb	r0, [r4, r6]
   19b28:	mov	r0, r5
   19b2c:	pop	{r4, r5, r6, r7, fp, pc}
   19b30:	mov	r1, #0
   19b34:	b	11288 <setlocale@plt>
   19b38:	eor	r1, r1, #-2147483648	; 0x80000000
   19b3c:	b	19b44 <__assert_fail@plt+0x8820>
   19b40:	eor	r3, r3, #-2147483648	; 0x80000000
   19b44:	push	{r4, r5, lr}
   19b48:	lsl	r4, r1, #1
   19b4c:	lsl	r5, r3, #1
   19b50:	teq	r4, r5
   19b54:	teqeq	r0, r2
   19b58:	orrsne	ip, r4, r0
   19b5c:	orrsne	ip, r5, r2
   19b60:	mvnsne	ip, r4, asr #21
   19b64:	mvnsne	ip, r5, asr #21
   19b68:	beq	19d54 <__assert_fail@plt+0x8a30>
   19b6c:	lsr	r4, r4, #21
   19b70:	rsbs	r5, r4, r5, lsr #21
   19b74:	rsblt	r5, r5, #0
   19b78:	ble	19b98 <__assert_fail@plt+0x8874>
   19b7c:	add	r4, r4, r5
   19b80:	eor	r2, r0, r2
   19b84:	eor	r3, r1, r3
   19b88:	eor	r0, r2, r0
   19b8c:	eor	r1, r3, r1
   19b90:	eor	r2, r0, r2
   19b94:	eor	r3, r1, r3
   19b98:	cmp	r5, #54	; 0x36
   19b9c:	pophi	{r4, r5, pc}
   19ba0:	tst	r1, #-2147483648	; 0x80000000
   19ba4:	lsl	r1, r1, #12
   19ba8:	mov	ip, #1048576	; 0x100000
   19bac:	orr	r1, ip, r1, lsr #12
   19bb0:	beq	19bbc <__assert_fail@plt+0x8898>
   19bb4:	rsbs	r0, r0, #0
   19bb8:	rsc	r1, r1, #0
   19bbc:	tst	r3, #-2147483648	; 0x80000000
   19bc0:	lsl	r3, r3, #12
   19bc4:	orr	r3, ip, r3, lsr #12
   19bc8:	beq	19bd4 <__assert_fail@plt+0x88b0>
   19bcc:	rsbs	r2, r2, #0
   19bd0:	rsc	r3, r3, #0
   19bd4:	teq	r4, r5
   19bd8:	beq	19d3c <__assert_fail@plt+0x8a18>
   19bdc:	sub	r4, r4, #1
   19be0:	rsbs	lr, r5, #32
   19be4:	blt	19c00 <__assert_fail@plt+0x88dc>
   19be8:	lsl	ip, r2, lr
   19bec:	adds	r0, r0, r2, lsr r5
   19bf0:	adc	r1, r1, #0
   19bf4:	adds	r0, r0, r3, lsl lr
   19bf8:	adcs	r1, r1, r3, asr r5
   19bfc:	b	19c1c <__assert_fail@plt+0x88f8>
   19c00:	sub	r5, r5, #32
   19c04:	add	lr, lr, #32
   19c08:	cmp	r2, #1
   19c0c:	lsl	ip, r3, lr
   19c10:	orrcs	ip, ip, #2
   19c14:	adds	r0, r0, r3, asr r5
   19c18:	adcs	r1, r1, r3, asr #31
   19c1c:	and	r5, r1, #-2147483648	; 0x80000000
   19c20:	bpl	19c30 <__assert_fail@plt+0x890c>
   19c24:	rsbs	ip, ip, #0
   19c28:	rscs	r0, r0, #0
   19c2c:	rsc	r1, r1, #0
   19c30:	cmp	r1, #1048576	; 0x100000
   19c34:	bcc	19c74 <__assert_fail@plt+0x8950>
   19c38:	cmp	r1, #2097152	; 0x200000
   19c3c:	bcc	19c5c <__assert_fail@plt+0x8938>
   19c40:	lsrs	r1, r1, #1
   19c44:	rrxs	r0, r0
   19c48:	rrx	ip, ip
   19c4c:	add	r4, r4, #1
   19c50:	lsl	r2, r4, #21
   19c54:	cmn	r2, #4194304	; 0x400000
   19c58:	bcs	19db4 <__assert_fail@plt+0x8a90>
   19c5c:	cmp	ip, #-2147483648	; 0x80000000
   19c60:	lsrseq	ip, r0, #1
   19c64:	adcs	r0, r0, #0
   19c68:	adc	r1, r1, r4, lsl #20
   19c6c:	orr	r1, r1, r5
   19c70:	pop	{r4, r5, pc}
   19c74:	lsls	ip, ip, #1
   19c78:	adcs	r0, r0, r0
   19c7c:	adc	r1, r1, r1
   19c80:	tst	r1, #1048576	; 0x100000
   19c84:	sub	r4, r4, #1
   19c88:	bne	19c5c <__assert_fail@plt+0x8938>
   19c8c:	teq	r1, #0
   19c90:	moveq	r1, r0
   19c94:	moveq	r0, #0
   19c98:	clz	r3, r1
   19c9c:	addeq	r3, r3, #32
   19ca0:	sub	r3, r3, #11
   19ca4:	subs	r2, r3, #32
   19ca8:	bge	19ccc <__assert_fail@plt+0x89a8>
   19cac:	adds	r2, r2, #12
   19cb0:	ble	19cc8 <__assert_fail@plt+0x89a4>
   19cb4:	add	ip, r2, #20
   19cb8:	rsb	r2, r2, #12
   19cbc:	lsl	r0, r1, ip
   19cc0:	lsr	r1, r1, r2
   19cc4:	b	19cdc <__assert_fail@plt+0x89b8>
   19cc8:	add	r2, r2, #20
   19ccc:	rsble	ip, r2, #32
   19cd0:	lsl	r1, r1, r2
   19cd4:	orrle	r1, r1, r0, lsr ip
   19cd8:	lslle	r0, r0, r2
   19cdc:	subs	r4, r4, r3
   19ce0:	addge	r1, r1, r4, lsl #20
   19ce4:	orrge	r1, r1, r5
   19ce8:	popge	{r4, r5, pc}
   19cec:	mvn	r4, r4
   19cf0:	subs	r4, r4, #31
   19cf4:	bge	19d30 <__assert_fail@plt+0x8a0c>
   19cf8:	adds	r4, r4, #12
   19cfc:	bgt	19d18 <__assert_fail@plt+0x89f4>
   19d00:	add	r4, r4, #20
   19d04:	rsb	r2, r4, #32
   19d08:	lsr	r0, r0, r4
   19d0c:	orr	r0, r0, r1, lsl r2
   19d10:	orr	r1, r5, r1, lsr r4
   19d14:	pop	{r4, r5, pc}
   19d18:	rsb	r4, r4, #12
   19d1c:	rsb	r2, r4, #32
   19d20:	lsr	r0, r0, r2
   19d24:	orr	r0, r0, r1, lsl r4
   19d28:	mov	r1, r5
   19d2c:	pop	{r4, r5, pc}
   19d30:	lsr	r0, r1, r4
   19d34:	mov	r1, r5
   19d38:	pop	{r4, r5, pc}
   19d3c:	teq	r4, #0
   19d40:	eor	r3, r3, #1048576	; 0x100000
   19d44:	eoreq	r1, r1, #1048576	; 0x100000
   19d48:	addeq	r4, r4, #1
   19d4c:	subne	r5, r5, #1
   19d50:	b	19bdc <__assert_fail@plt+0x88b8>
   19d54:	mvns	ip, r4, asr #21
   19d58:	mvnsne	ip, r5, asr #21
   19d5c:	beq	19dc4 <__assert_fail@plt+0x8aa0>
   19d60:	teq	r4, r5
   19d64:	teqeq	r0, r2
   19d68:	beq	19d7c <__assert_fail@plt+0x8a58>
   19d6c:	orrs	ip, r4, r0
   19d70:	moveq	r1, r3
   19d74:	moveq	r0, r2
   19d78:	pop	{r4, r5, pc}
   19d7c:	teq	r1, r3
   19d80:	movne	r1, #0
   19d84:	movne	r0, #0
   19d88:	popne	{r4, r5, pc}
   19d8c:	lsrs	ip, r4, #21
   19d90:	bne	19da4 <__assert_fail@plt+0x8a80>
   19d94:	lsls	r0, r0, #1
   19d98:	adcs	r1, r1, r1
   19d9c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19da0:	pop	{r4, r5, pc}
   19da4:	adds	r4, r4, #4194304	; 0x400000
   19da8:	addcc	r1, r1, #1048576	; 0x100000
   19dac:	popcc	{r4, r5, pc}
   19db0:	and	r5, r1, #-2147483648	; 0x80000000
   19db4:	orr	r1, r5, #2130706432	; 0x7f000000
   19db8:	orr	r1, r1, #15728640	; 0xf00000
   19dbc:	mov	r0, #0
   19dc0:	pop	{r4, r5, pc}
   19dc4:	mvns	ip, r4, asr #21
   19dc8:	movne	r1, r3
   19dcc:	movne	r0, r2
   19dd0:	mvnseq	ip, r5, asr #21
   19dd4:	movne	r3, r1
   19dd8:	movne	r2, r0
   19ddc:	orrs	r4, r0, r1, lsl #12
   19de0:	orrseq	r5, r2, r3, lsl #12
   19de4:	teqeq	r1, r3
   19de8:	orrne	r1, r1, #524288	; 0x80000
   19dec:	pop	{r4, r5, pc}
   19df0:	teq	r0, #0
   19df4:	moveq	r1, #0
   19df8:	bxeq	lr
   19dfc:	push	{r4, r5, lr}
   19e00:	mov	r4, #1024	; 0x400
   19e04:	add	r4, r4, #50	; 0x32
   19e08:	mov	r5, #0
   19e0c:	mov	r1, #0
   19e10:	b	19c8c <__assert_fail@plt+0x8968>
   19e14:	teq	r0, #0
   19e18:	moveq	r1, #0
   19e1c:	bxeq	lr
   19e20:	push	{r4, r5, lr}
   19e24:	mov	r4, #1024	; 0x400
   19e28:	add	r4, r4, #50	; 0x32
   19e2c:	ands	r5, r0, #-2147483648	; 0x80000000
   19e30:	rsbmi	r0, r0, #0
   19e34:	mov	r1, #0
   19e38:	b	19c8c <__assert_fail@plt+0x8968>
   19e3c:	lsls	r2, r0, #1
   19e40:	asr	r1, r2, #3
   19e44:	rrx	r1, r1
   19e48:	lsl	r0, r2, #28
   19e4c:	andsne	r3, r2, #-16777216	; 0xff000000
   19e50:	teqne	r3, #-16777216	; 0xff000000
   19e54:	eorne	r1, r1, #939524096	; 0x38000000
   19e58:	bxne	lr
   19e5c:	bics	r2, r2, #-16777216	; 0xff000000
   19e60:	bxeq	lr
   19e64:	teq	r3, #-16777216	; 0xff000000
   19e68:	orreq	r1, r1, #524288	; 0x80000
   19e6c:	bxeq	lr
   19e70:	push	{r4, r5, lr}
   19e74:	mov	r4, #896	; 0x380
   19e78:	and	r5, r1, #-2147483648	; 0x80000000
   19e7c:	bic	r1, r1, #-2147483648	; 0x80000000
   19e80:	b	19c8c <__assert_fail@plt+0x8968>
   19e84:	orrs	r2, r0, r1
   19e88:	bxeq	lr
   19e8c:	push	{r4, r5, lr}
   19e90:	mov	r5, #0
   19e94:	b	19eb4 <__assert_fail@plt+0x8b90>
   19e98:	orrs	r2, r0, r1
   19e9c:	bxeq	lr
   19ea0:	push	{r4, r5, lr}
   19ea4:	ands	r5, r1, #-2147483648	; 0x80000000
   19ea8:	bpl	19eb4 <__assert_fail@plt+0x8b90>
   19eac:	rsbs	r0, r0, #0
   19eb0:	rsc	r1, r1, #0
   19eb4:	mov	r4, #1024	; 0x400
   19eb8:	add	r4, r4, #50	; 0x32
   19ebc:	lsrs	ip, r1, #22
   19ec0:	beq	19c30 <__assert_fail@plt+0x890c>
   19ec4:	mov	r2, #3
   19ec8:	lsrs	ip, ip, #3
   19ecc:	addne	r2, r2, #3
   19ed0:	lsrs	ip, ip, #3
   19ed4:	addne	r2, r2, #3
   19ed8:	add	r2, r2, ip, lsr #3
   19edc:	rsb	r3, r2, #32
   19ee0:	lsl	ip, r0, r3
   19ee4:	lsr	r0, r0, r2
   19ee8:	orr	r0, r0, r1, lsl r3
   19eec:	lsr	r1, r1, r2
   19ef0:	add	r4, r4, r2
   19ef4:	b	19c30 <__assert_fail@plt+0x890c>
   19ef8:	cmp	r3, #0
   19efc:	cmpeq	r2, #0
   19f00:	bne	19f18 <__assert_fail@plt+0x8bf4>
   19f04:	cmp	r1, #0
   19f08:	cmpeq	r0, #0
   19f0c:	mvnne	r1, #0
   19f10:	mvnne	r0, #0
   19f14:	b	19f34 <__assert_fail@plt+0x8c10>
   19f18:	sub	sp, sp, #8
   19f1c:	push	{sp, lr}
   19f20:	bl	19fb0 <__assert_fail@plt+0x8c8c>
   19f24:	ldr	lr, [sp, #4]
   19f28:	add	sp, sp, #8
   19f2c:	pop	{r2, r3}
   19f30:	bx	lr
   19f34:	push	{r1, lr}
   19f38:	mov	r0, #8
   19f3c:	bl	11078 <raise@plt>
   19f40:	pop	{r1, pc}
   19f44:	vmov	d7, r0, r1
   19f48:	vcmpe.f64	d7, #0.0
   19f4c:	vmrs	APSR_nzcv, fpscr
   19f50:	bmi	19f58 <__assert_fail@plt+0x8c34>
   19f54:	b	19f70 <__assert_fail@plt+0x8c4c>
   19f58:	push	{r4, lr}
   19f5c:	eor	r1, r1, #-2147483648	; 0x80000000
   19f60:	bl	19f70 <__assert_fail@plt+0x8c4c>
   19f64:	rsbs	r0, r0, #0
   19f68:	rsc	r1, r1, #0
   19f6c:	pop	{r4, pc}
   19f70:	vmov	d6, r0, r1
   19f74:	vldr	d7, [pc, #36]	; 19fa0 <__assert_fail@plt+0x8c7c>
   19f78:	vldr	d5, [pc, #40]	; 19fa8 <__assert_fail@plt+0x8c84>
   19f7c:	vmul.f64	d7, d6, d7
   19f80:	vcvt.u32.f64	s14, d7
   19f84:	vcvt.f64.u32	d4, s14
   19f88:	vmov	r1, s14
   19f8c:	vmls.f64	d6, d4, d5
   19f90:	vcvt.u32.f64	s15, d6
   19f94:	vmov	r0, s15
   19f98:	bx	lr
   19f9c:	nop			; (mov r0, r0)
   19fa0:	andeq	r0, r0, r0
   19fa4:	ldclcc	0, cr0, [r0]
   19fa8:	andeq	r0, r0, r0
   19fac:	mvnsmi	r0, r0
   19fb0:	cmp	r1, r3
   19fb4:	cmpeq	r0, r2
   19fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fbc:	mov	r4, r0
   19fc0:	movcc	r0, #0
   19fc4:	mov	r5, r1
   19fc8:	ldr	lr, [sp, #36]	; 0x24
   19fcc:	movcc	r1, r0
   19fd0:	bcc	1a0cc <__assert_fail@plt+0x8da8>
   19fd4:	cmp	r3, #0
   19fd8:	clzeq	ip, r2
   19fdc:	clzne	ip, r3
   19fe0:	addeq	ip, ip, #32
   19fe4:	cmp	r5, #0
   19fe8:	clzeq	r1, r4
   19fec:	addeq	r1, r1, #32
   19ff0:	clzne	r1, r5
   19ff4:	sub	ip, ip, r1
   19ff8:	sub	sl, ip, #32
   19ffc:	lsl	r9, r3, ip
   1a000:	rsb	fp, ip, #32
   1a004:	orr	r9, r9, r2, lsl sl
   1a008:	orr	r9, r9, r2, lsr fp
   1a00c:	lsl	r8, r2, ip
   1a010:	cmp	r5, r9
   1a014:	cmpeq	r4, r8
   1a018:	movcc	r0, #0
   1a01c:	movcc	r1, r0
   1a020:	bcc	1a03c <__assert_fail@plt+0x8d18>
   1a024:	mov	r0, #1
   1a028:	subs	r4, r4, r8
   1a02c:	lsl	r1, r0, sl
   1a030:	orr	r1, r1, r0, lsr fp
   1a034:	lsl	r0, r0, ip
   1a038:	sbc	r5, r5, r9
   1a03c:	cmp	ip, #0
   1a040:	beq	1a0cc <__assert_fail@plt+0x8da8>
   1a044:	lsr	r6, r8, #1
   1a048:	orr	r6, r6, r9, lsl #31
   1a04c:	lsr	r7, r9, #1
   1a050:	mov	r2, ip
   1a054:	b	1a078 <__assert_fail@plt+0x8d54>
   1a058:	subs	r3, r4, r6
   1a05c:	sbc	r8, r5, r7
   1a060:	adds	r3, r3, r3
   1a064:	adc	r8, r8, r8
   1a068:	adds	r4, r3, #1
   1a06c:	adc	r5, r8, #0
   1a070:	subs	r2, r2, #1
   1a074:	beq	1a094 <__assert_fail@plt+0x8d70>
   1a078:	cmp	r5, r7
   1a07c:	cmpeq	r4, r6
   1a080:	bcs	1a058 <__assert_fail@plt+0x8d34>
   1a084:	adds	r4, r4, r4
   1a088:	adc	r5, r5, r5
   1a08c:	subs	r2, r2, #1
   1a090:	bne	1a078 <__assert_fail@plt+0x8d54>
   1a094:	lsr	r3, r4, ip
   1a098:	orr	r3, r3, r5, lsl fp
   1a09c:	lsr	r2, r5, ip
   1a0a0:	orr	r3, r3, r5, lsr sl
   1a0a4:	adds	r0, r0, r4
   1a0a8:	mov	r4, r3
   1a0ac:	lsl	r3, r2, ip
   1a0b0:	orr	r3, r3, r4, lsl sl
   1a0b4:	lsl	ip, r4, ip
   1a0b8:	orr	r3, r3, r4, lsr fp
   1a0bc:	adc	r1, r1, r5
   1a0c0:	subs	r0, r0, ip
   1a0c4:	mov	r5, r2
   1a0c8:	sbc	r1, r1, r3
   1a0cc:	cmp	lr, #0
   1a0d0:	strdne	r4, [lr]
   1a0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a0dc:	mov	r7, r0
   1a0e0:	ldr	r6, [pc, #72]	; 1a130 <__assert_fail@plt+0x8e0c>
   1a0e4:	ldr	r5, [pc, #72]	; 1a134 <__assert_fail@plt+0x8e10>
   1a0e8:	add	r6, pc, r6
   1a0ec:	add	r5, pc, r5
   1a0f0:	sub	r6, r6, r5
   1a0f4:	mov	r8, r1
   1a0f8:	mov	r9, r2
   1a0fc:	bl	11040 <calloc@plt-0x20>
   1a100:	asrs	r6, r6, #2
   1a104:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a108:	mov	r4, #0
   1a10c:	add	r4, r4, #1
   1a110:	ldr	r3, [r5], #4
   1a114:	mov	r2, r9
   1a118:	mov	r1, r8
   1a11c:	mov	r0, r7
   1a120:	blx	r3
   1a124:	cmp	r6, r4
   1a128:	bne	1a10c <__assert_fail@plt+0x8de8>
   1a12c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a130:	andeq	r2, r1, ip, lsl lr
   1a134:	andeq	r2, r1, r4, lsl lr
   1a138:	bx	lr
   1a13c:	ldr	r3, [pc, #12]	; 1a150 <__assert_fail@plt+0x8e2c>
   1a140:	mov	r1, #0
   1a144:	add	r3, pc, r3
   1a148:	ldr	r2, [r3]
   1a14c:	b	1121c <__cxa_atexit@plt>
   1a150:			; <UNDEFINED> instruction: 0x00012fb8

Disassembly of section .fini:

0001a154 <.fini>:
   1a154:	push	{r3, lr}
   1a158:	pop	{r3, pc}
