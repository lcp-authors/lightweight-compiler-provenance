
../repos/inetutils/ping/ping:     file format elf32-littlearm


Disassembly of section .init:

000110e0 <.init>:
   110e0:	push	{r3, lr}
   110e4:	bl	114b4 <__assert_fail@plt+0x48>
   110e8:	pop	{r3, pc}

Disassembly of section .plt:

000110ec <calloc@plt-0x14>:
   110ec:	push	{lr}		; (str lr, [sp, #-4]!)
   110f0:	ldr	lr, [pc, #4]	; 110fc <calloc@plt-0x4>
   110f4:	add	lr, pc, lr
   110f8:	ldr	pc, [lr, #8]!
   110fc:	andeq	fp, r1, r4, lsl #30

00011100 <calloc@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #3844]!	; 0xf04

0001110c <fputs_unlocked@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #3836]!	; 0xefc

00011118 <raise@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #3828]!	; 0xef4

00011124 <strcmp@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #3820]!	; 0xeec

00011130 <strtol@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #3812]!	; 0xee4

0001113c <setsockopt@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #3804]!	; 0xedc

00011148 <printf@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #110592	; 0x1b000
   11150:	ldr	pc, [ip, #3796]!	; 0xed4

00011154 <getprotobyname@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #110592	; 0x1b000
   1115c:	ldr	pc, [ip, #3788]!	; 0xecc

00011160 <fflush@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #110592	; 0x1b000
   11168:	ldr	pc, [ip, #3780]!	; 0xec4

0001116c <getuid@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #110592	; 0x1b000
   11174:	ldr	pc, [ip, #3772]!	; 0xebc

00011178 <memmove@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #110592	; 0x1b000
   11180:	ldr	pc, [ip, #3764]!	; 0xeb4

00011184 <strchrnul@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #110592	; 0x1b000
   1118c:	ldr	pc, [ip, #3756]!	; 0xeac

00011190 <free@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #110592	; 0x1b000
   11198:	ldr	pc, [ip, #3748]!	; 0xea4

0001119c <gai_strerror@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111a8 <strndup@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3732]!	; 0xe94

000111b4 <memcpy@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c0 <signal@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3716]!	; 0xe84

000111cc <fwrite_unlocked@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111d8 <memcmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3700]!	; 0xe74

000111e4 <inet_ntoa@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f0 <select@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3684]!	; 0xe64

000111fc <sleep@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3676]!	; 0xe5c

00011208 <gethostbyaddr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3668]!	; 0xe54

00011214 <recvfrom@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011220 <strdup@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3652]!	; 0xe44

0001122c <realloc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3644]!	; 0xe3c

00011238 <strcasecmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3636]!	; 0xe34

00011244 <funlockfile@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011250 <fwrite@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3620]!	; 0xe24

0001125c <gettimeofday@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3612]!	; 0xe1c

00011268 <error@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3604]!	; 0xe14

00011274 <getenv@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011280 <puts@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3588]!	; 0xe04

0001128c <malloc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3580]!	; 0xdfc

00011298 <__libc_start_main@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112a4 <strerror@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3564]!	; 0xdec

000112b0 <__ctype_tolower_loc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3556]!	; 0xde4

000112bc <__gmon_start__@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3548]!	; 0xddc

000112c8 <mempcpy@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112d4 <__ctype_b_loc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e0 <getpid@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112ec <exit@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112f8 <strtoul@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3508]!	; 0xdb4

00011304 <strlen@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3500]!	; 0xdac

00011310 <strchr@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3492]!	; 0xda4

0001131c <fprintf@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3484]!	; 0xd9c

00011328 <__errno_location@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3476]!	; 0xd94

00011334 <snprintf@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011340 <strerror_r@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3460]!	; 0xd84

0001134c <setvbuf@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3452]!	; 0xd7c

00011358 <memset@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3444]!	; 0xd74

00011364 <putchar@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011370 <strtod@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3428]!	; 0xd64

0001137c <memchr@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3420]!	; 0xd5c

00011388 <sendto@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3412]!	; 0xd54

00011394 <__overflow@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a0 <setlocale@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3396]!	; 0xd44

000113ac <getnameinfo@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113b8 <strrchr@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3380]!	; 0xd34

000113c4 <vfprintf@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d0 <fputc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3364]!	; 0xd24

000113dc <setuid@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113e8 <sscanf@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3348]!	; 0xd14

000113f4 <putc@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3340]!	; 0xd0c

00011400 <flockfile@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3332]!	; 0xd04

0001140c <vsnprintf@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3324]!	; 0xcfc

00011418 <qsort@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3316]!	; 0xcf4

00011424 <freeaddrinfo@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3308]!	; 0xcec

00011430 <getaddrinfo@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3300]!	; 0xce4

0001143c <socket@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3292]!	; 0xcdc

00011448 <strncmp@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3284]!	; 0xcd4

00011454 <abort@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3276]!	; 0xccc

00011460 <close@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3268]!	; 0xcc4

0001146c <__assert_fail@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3260]!	; 0xcbc

Disassembly of section .text:

00011478 <argp_failure@@Base-0x4b70>:
   11478:	mov	fp, #0
   1147c:	mov	lr, #0
   11480:	pop	{r1}		; (ldr r1, [sp], #4)
   11484:	mov	r2, sp
   11488:	push	{r2}		; (str r2, [sp, #-4]!)
   1148c:	push	{r0}		; (str r0, [sp, #-4]!)
   11490:	ldr	ip, [pc, #16]	; 114a8 <__assert_fail@plt+0x3c>
   11494:	push	{ip}		; (str ip, [sp, #-4]!)
   11498:	ldr	r0, [pc, #12]	; 114ac <__assert_fail@plt+0x40>
   1149c:	ldr	r3, [pc, #12]	; 114b0 <__assert_fail@plt+0x44>
   114a0:	bl	11298 <__libc_start_main@plt>
   114a4:	bl	11454 <abort@plt>
   114a8:	andeq	sl, r1, r0, ror ip
   114ac:	andeq	r1, r1, r0, ror r6
   114b0:	andeq	sl, r1, r0, lsl ip
   114b4:	ldr	r3, [pc, #20]	; 114d0 <__assert_fail@plt+0x64>
   114b8:	ldr	r2, [pc, #20]	; 114d4 <__assert_fail@plt+0x68>
   114bc:	add	r3, pc, r3
   114c0:	ldr	r2, [r3, r2]
   114c4:	cmp	r2, #0
   114c8:	bxeq	lr
   114cc:	b	112bc <__gmon_start__@plt>
   114d0:	andeq	fp, r1, ip, lsr fp
   114d4:	andeq	r0, r0, r4, lsr r1
   114d8:	ldr	r3, [pc, #28]	; 114fc <__assert_fail@plt+0x90>
   114dc:	ldr	r0, [pc, #28]	; 11500 <__assert_fail@plt+0x94>
   114e0:	sub	r3, r3, r0
   114e4:	cmp	r3, #6
   114e8:	bxls	lr
   114ec:	ldr	r3, [pc, #16]	; 11504 <__assert_fail@plt+0x98>
   114f0:	cmp	r3, #0
   114f4:	bxeq	lr
   114f8:	bx	r3
   114fc:	andeq	sp, r2, r3, lsr #12
   11500:	andeq	sp, r2, r0, lsr #12
   11504:	andeq	r0, r0, r0
   11508:	ldr	r1, [pc, #36]	; 11534 <__assert_fail@plt+0xc8>
   1150c:	ldr	r0, [pc, #36]	; 11538 <__assert_fail@plt+0xcc>
   11510:	sub	r1, r1, r0
   11514:	asr	r1, r1, #2
   11518:	add	r1, r1, r1, lsr #31
   1151c:	asrs	r1, r1, #1
   11520:	bxeq	lr
   11524:	ldr	r3, [pc, #16]	; 1153c <__assert_fail@plt+0xd0>
   11528:	cmp	r3, #0
   1152c:	bxeq	lr
   11530:	bx	r3
   11534:	andeq	sp, r2, r0, lsr #12
   11538:	andeq	sp, r2, r0, lsr #12
   1153c:	andeq	r0, r0, r0
   11540:	push	{r4, lr}
   11544:	ldr	r4, [pc, #24]	; 11564 <__assert_fail@plt+0xf8>
   11548:	ldrb	r3, [r4]
   1154c:	cmp	r3, #0
   11550:	popne	{r4, pc}
   11554:	bl	114d8 <__assert_fail@plt+0x6c>
   11558:	mov	r3, #1
   1155c:	strb	r3, [r4]
   11560:	pop	{r4, pc}
   11564:	andeq	sp, r2, r0, lsr r6
   11568:	ldr	r0, [pc, #40]	; 11598 <__assert_fail@plt+0x12c>
   1156c:	ldr	r3, [r0]
   11570:	cmp	r3, #0
   11574:	bne	1157c <__assert_fail@plt+0x110>
   11578:	b	11508 <__assert_fail@plt+0x9c>
   1157c:	ldr	r3, [pc, #24]	; 1159c <__assert_fail@plt+0x130>
   11580:	cmp	r3, #0
   11584:	beq	11578 <__assert_fail@plt+0x10c>
   11588:	push	{r4, lr}
   1158c:	blx	r3
   11590:	pop	{r4, lr}
   11594:	b	11508 <__assert_fail@plt+0x9c>
   11598:	andeq	ip, r2, r4, lsl pc
   1159c:	andeq	r0, r0, r0
   115a0:	mov	r2, #1
   115a4:	ldr	r3, [pc, #4]	; 115b0 <__assert_fail@plt+0x144>
   115a8:	str	r2, [r3]
   115ac:	bx	lr
   115b0:	andeq	sp, r2, r4, lsr r6
   115b4:	push	{r4, lr}
   115b8:	sub	sp, sp, #16
   115bc:	mov	r4, r0
   115c0:	ldr	r3, [pc, #156]	; 11664 <__assert_fail@plt+0x1f8>
   115c4:	ldr	r3, [r3]
   115c8:	cmp	r3, #7
   115cc:	movls	r2, #0
   115d0:	bhi	11620 <__assert_fail@plt+0x1b4>
   115d4:	ldr	r3, [pc, #140]	; 11668 <__assert_fail@plt+0x1fc>
   115d8:	ldr	r1, [r3]
   115dc:	cmp	r1, #0
   115e0:	beq	11604 <__assert_fail@plt+0x198>
   115e4:	ldr	r3, [pc, #120]	; 11664 <__assert_fail@plt+0x1f8>
   115e8:	ldr	r3, [r3]
   115ec:	cmp	r2, r3
   115f0:	subcc	r3, r3, r2
   115f4:	mov	r0, #0
   115f8:	str	r0, [sp]
   115fc:	mov	r0, r4
   11600:	bl	126d8 <__assert_fail@plt+0x126c>
   11604:	mov	r0, r4
   11608:	bl	13cf8 <__assert_fail@plt+0x288c>
   1160c:	subs	r4, r0, #0
   11610:	blt	1164c <__assert_fail@plt+0x1e0>
   11614:	mov	r0, r4
   11618:	add	sp, sp, #16
   1161c:	pop	{r4, pc}
   11620:	mov	r1, #0
   11624:	add	r0, sp, #8
   11628:	bl	1125c <gettimeofday@plt>
   1162c:	mov	r2, #0
   11630:	str	r2, [sp]
   11634:	mov	r3, #8
   11638:	add	r1, sp, r3
   1163c:	mov	r0, r4
   11640:	bl	126d8 <__assert_fail@plt+0x126c>
   11644:	mov	r2, #8
   11648:	b	115d4 <__assert_fail@plt+0x168>
   1164c:	bl	11328 <__errno_location@plt>
   11650:	ldr	r2, [pc, #20]	; 1166c <__assert_fail@plt+0x200>
   11654:	ldr	r1, [r0]
   11658:	mov	r0, #1
   1165c:	bl	11268 <error@plt>
   11660:	b	11614 <__assert_fail@plt+0x1a8>
   11664:	andeq	sp, r2, r0, asr #2
   11668:	andeq	sp, r2, r4, asr #13
   1166c:	andeq	sl, r1, r0, lsl #26
   11670:	push	{r4, r5, r6, r7, r8, lr}
   11674:	sub	sp, sp, #16
   11678:	mov	r5, r0
   1167c:	mov	r8, r1
   11680:	mov	r3, #1
   11684:	str	r3, [sp, #8]
   11688:	ldr	r0, [r1]
   1168c:	bl	18894 <argp_parse@@Base+0xd04>
   11690:	ldr	r1, [pc, #608]	; 118f8 <__assert_fail@plt+0x48c>
   11694:	mov	r0, #6
   11698:	bl	113a0 <setlocale@plt>
   1169c:	bl	1116c <getuid@plt>
   116a0:	cmp	r0, #0
   116a4:	moveq	r2, #1
   116a8:	ldreq	r3, [pc, #588]	; 118fc <__assert_fail@plt+0x490>
   116ac:	strbeq	r2, [r3, #4]
   116b0:	ldr	r2, [pc, #584]	; 11900 <__assert_fail@plt+0x494>
   116b4:	ldr	r3, [pc, #584]	; 11904 <__assert_fail@plt+0x498>
   116b8:	str	r2, [r3]
   116bc:	ldr	r6, [pc, #580]	; 11908 <__assert_fail@plt+0x49c>
   116c0:	add	r1, r6, #4
   116c4:	ldr	r0, [pc, #576]	; 1190c <__assert_fail@plt+0x4a0>
   116c8:	bl	1869c <argp_parse@@Base+0xb0c>
   116cc:	mov	r3, #0
   116d0:	str	r3, [sp, #4]
   116d4:	add	r2, sp, #12
   116d8:	str	r2, [sp]
   116dc:	mov	r2, r8
   116e0:	mov	r1, r5
   116e4:	add	r0, r6, #12
   116e8:	bl	17b90 <argp_parse@@Base>
   116ec:	bl	112e0 <getpid@plt>
   116f0:	mov	r1, r0
   116f4:	mov	r0, #8
   116f8:	bl	13b50 <__assert_fail@plt+0x26e4>
   116fc:	ldr	r3, [pc, #524]	; 11910 <__assert_fail@plt+0x4a4>
   11700:	str	r0, [r3]
   11704:	cmp	r0, #0
   11708:	beq	11868 <__assert_fail@plt+0x3fc>
   1170c:	mov	r3, #4
   11710:	add	r2, sp, #8
   11714:	mov	r1, #6
   11718:	bl	12744 <__assert_fail@plt+0x12d8>
   1171c:	bl	1116c <getuid@plt>
   11720:	bl	113dc <setuid@plt>
   11724:	cmp	r0, #0
   11728:	bne	11870 <__assert_fail@plt+0x404>
   1172c:	mov	r3, #0
   11730:	mov	r2, #1
   11734:	mov	r1, r3
   11738:	ldr	r0, [pc, #468]	; 11914 <__assert_fail@plt+0x4a8>
   1173c:	ldr	r0, [r0]
   11740:	bl	1134c <setvbuf@plt>
   11744:	ldr	r3, [sp, #12]
   11748:	add	r8, r8, r3, lsl #2
   1174c:	sub	r5, r5, r3
   11750:	ldr	r3, [pc, #420]	; 118fc <__assert_fail@plt+0x490>
   11754:	ldr	r1, [r3, #8]
   11758:	cmp	r1, #0
   1175c:	bne	11888 <__assert_fail@plt+0x41c>
   11760:	ldr	r3, [pc, #432]	; 11918 <__assert_fail@plt+0x4ac>
   11764:	ldr	r1, [r3]
   11768:	cmp	r1, #0
   1176c:	bne	11898 <__assert_fail@plt+0x42c>
   11770:	ldr	r3, [pc, #420]	; 1191c <__assert_fail@plt+0x4b0>
   11774:	ldr	r3, [r3]
   11778:	tst	r3, #2
   1177c:	bne	118b0 <__assert_fail@plt+0x444>
   11780:	ldr	r3, [pc, #372]	; 118fc <__assert_fail@plt+0x490>
   11784:	ldr	r3, [r3, #12]
   11788:	cmp	r3, #0
   1178c:	ble	117bc <__assert_fail@plt+0x350>
   11790:	ldr	r3, [pc, #376]	; 11910 <__assert_fail@plt+0x4a4>
   11794:	ldr	r0, [r3]
   11798:	mov	r3, #4
   1179c:	str	r3, [sp]
   117a0:	ldr	r3, [pc, #376]	; 11920 <__assert_fail@plt+0x4b4>
   117a4:	mov	r2, #2
   117a8:	mov	r1, #0
   117ac:	ldr	r0, [r0]
   117b0:	bl	1113c <setsockopt@plt>
   117b4:	cmp	r0, #0
   117b8:	blt	118c8 <__assert_fail@plt+0x45c>
   117bc:	ldr	r3, [pc, #324]	; 11908 <__assert_fail@plt+0x49c>
   117c0:	ldr	r3, [r3, #40]	; 0x28
   117c4:	cmp	r3, #0
   117c8:	blt	117f8 <__assert_fail@plt+0x38c>
   117cc:	ldr	r3, [pc, #316]	; 11910 <__assert_fail@plt+0x4a4>
   117d0:	ldr	r0, [r3]
   117d4:	mov	r3, #4
   117d8:	str	r3, [sp]
   117dc:	ldr	r3, [pc, #320]	; 11924 <__assert_fail@plt+0x4b8>
   117e0:	mov	r2, #1
   117e4:	mov	r1, #0
   117e8:	ldr	r0, [r0]
   117ec:	bl	1113c <setsockopt@plt>
   117f0:	cmp	r0, #0
   117f4:	blt	118e0 <__assert_fail@plt+0x474>
   117f8:	ldr	r3, [pc, #264]	; 11908 <__assert_fail@plt+0x49c>
   117fc:	ldr	r1, [r3, #44]	; 0x2c
   11800:	ldr	r3, [pc, #288]	; 11928 <__assert_fail@plt+0x4bc>
   11804:	ldr	r0, [r3]
   11808:	bl	123d0 <__assert_fail@plt+0xf64>
   1180c:	cmp	r5, #0
   11810:	beq	11844 <__assert_fail@plt+0x3d8>
   11814:	mov	r4, r5
   11818:	mov	r5, #0
   1181c:	ldr	r7, [pc, #228]	; 11908 <__assert_fail@plt+0x49c>
   11820:	ldr	r6, [pc, #232]	; 11910 <__assert_fail@plt+0x4a4>
   11824:	ldr	r0, [r8], #4
   11828:	ldr	r3, [r7, #48]	; 0x30
   1182c:	blx	r3
   11830:	orr	r5, r5, r0
   11834:	ldr	r0, [r6]
   11838:	bl	13cdc <__assert_fail@plt+0x2870>
   1183c:	subs	r4, r4, #1
   11840:	bne	11824 <__assert_fail@plt+0x3b8>
   11844:	ldr	r3, [pc, #196]	; 11910 <__assert_fail@plt+0x4a4>
   11848:	ldr	r0, [r3]
   1184c:	bl	18784 <argp_parse@@Base+0xbf4>
   11850:	ldr	r3, [pc, #212]	; 1192c <__assert_fail@plt+0x4c0>
   11854:	ldr	r0, [r3]
   11858:	bl	18784 <argp_parse@@Base+0xbf4>
   1185c:	mov	r0, r5
   11860:	add	sp, sp, #16
   11864:	pop	{r4, r5, r6, r7, r8, pc}
   11868:	mov	r0, #1
   1186c:	bl	112ec <exit@plt>
   11870:	bl	11328 <__errno_location@plt>
   11874:	ldr	r2, [pc, #180]	; 11930 <__assert_fail@plt+0x4c4>
   11878:	ldr	r1, [r0]
   1187c:	mov	r0, #1
   11880:	bl	11268 <error@plt>
   11884:	b	1172c <__assert_fail@plt+0x2c0>
   11888:	ldr	r3, [pc, #128]	; 11910 <__assert_fail@plt+0x4a4>
   1188c:	ldr	r0, [r3]
   11890:	bl	1273c <__assert_fail@plt+0x12d0>
   11894:	b	11760 <__assert_fail@plt+0x2f4>
   11898:	mov	r3, #4
   1189c:	add	r2, sp, #8
   118a0:	ldr	r0, [pc, #104]	; 11910 <__assert_fail@plt+0x4a4>
   118a4:	ldr	r0, [r0]
   118a8:	bl	12744 <__assert_fail@plt+0x12d8>
   118ac:	b	11770 <__assert_fail@plt+0x304>
   118b0:	ldr	r3, [pc, #124]	; 11934 <__assert_fail@plt+0x4c8>
   118b4:	ldr	r1, [r3]
   118b8:	ldr	r3, [pc, #80]	; 11910 <__assert_fail@plt+0x4a4>
   118bc:	ldr	r0, [r3]
   118c0:	bl	12774 <__assert_fail@plt+0x1308>
   118c4:	b	11780 <__assert_fail@plt+0x314>
   118c8:	bl	11328 <__errno_location@plt>
   118cc:	ldr	r2, [pc, #100]	; 11938 <__assert_fail@plt+0x4cc>
   118d0:	ldr	r1, [r0]
   118d4:	mov	r0, #0
   118d8:	bl	11268 <error@plt>
   118dc:	b	117bc <__assert_fail@plt+0x350>
   118e0:	bl	11328 <__errno_location@plt>
   118e4:	ldr	r2, [pc, #80]	; 1193c <__assert_fail@plt+0x4d0>
   118e8:	ldr	r1, [r0]
   118ec:	mov	r0, #0
   118f0:	bl	11268 <error@plt>
   118f4:	b	117f8 <__assert_fail@plt+0x38c>
   118f8:	andeq	ip, r1, ip, asr r6
   118fc:	andeq	sp, r2, r4, lsr r6
   11900:	andeq	sl, r1, r0, lsl sp
   11904:	ldrdeq	sp, [r2], -ip
   11908:	andeq	sp, r2, r0, asr #2
   1190c:	andeq	sl, r1, r8, lsr #26
   11910:	ldrdeq	sp, [r2], -r0
   11914:	andeq	sp, r2, ip, lsr #12
   11918:	andeq	sp, r2, ip, asr #13
   1191c:	andeq	sp, r2, r8, asr #13
   11920:	andeq	sp, r2, r0, asr #12
   11924:	andeq	sp, r2, r8, ror #2
   11928:	andeq	sp, r2, r0, asr #13
   1192c:	andeq	sp, r2, r4, asr #13
   11930:	andeq	sl, r1, r0, lsr sp
   11934:	ldrdeq	sp, [r2], -r8
   11938:	andeq	sl, r1, r8, lsr sp
   1193c:	andeq	sl, r1, ip, asr #26
   11940:	push	{r4, lr}
   11944:	mov	r4, r0
   11948:	ldr	r1, [pc, #128]	; 119d0 <__assert_fail@plt+0x564>
   1194c:	bl	11238 <strcasecmp@plt>
   11950:	cmp	r0, #0
   11954:	beq	119b8 <__assert_fail@plt+0x54c>
   11958:	ldr	r1, [pc, #116]	; 119d4 <__assert_fail@plt+0x568>
   1195c:	mov	r0, r4
   11960:	bl	11238 <strcasecmp@plt>
   11964:	cmp	r0, #0
   11968:	beq	119c0 <__assert_fail@plt+0x554>
   1196c:	ldr	r1, [pc, #100]	; 119d8 <__assert_fail@plt+0x56c>
   11970:	mov	r0, r4
   11974:	bl	11238 <strcasecmp@plt>
   11978:	cmp	r0, #0
   1197c:	beq	119c8 <__assert_fail@plt+0x55c>
   11980:	ldr	r1, [pc, #84]	; 119dc <__assert_fail@plt+0x570>
   11984:	mov	r0, r4
   11988:	bl	11238 <strcasecmp@plt>
   1198c:	cmp	r0, #0
   11990:	bne	1199c <__assert_fail@plt+0x530>
   11994:	ldr	r0, [pc, #68]	; 119e0 <__assert_fail@plt+0x574>
   11998:	pop	{r4, pc}
   1199c:	mov	r3, r4
   119a0:	ldr	r2, [pc, #60]	; 119e4 <__assert_fail@plt+0x578>
   119a4:	mov	r1, #0
   119a8:	mov	r0, #1
   119ac:	bl	11268 <error@plt>
   119b0:	mov	r0, #0
   119b4:	pop	{r4, pc}
   119b8:	ldr	r0, [pc, #40]	; 119e8 <__assert_fail@plt+0x57c>
   119bc:	pop	{r4, pc}
   119c0:	ldr	r0, [pc, #36]	; 119ec <__assert_fail@plt+0x580>
   119c4:	pop	{r4, pc}
   119c8:	ldr	r0, [pc, #16]	; 119e0 <__assert_fail@plt+0x574>
   119cc:	pop	{r4, pc}
   119d0:	andeq	sl, r1, r0, ror #26
   119d4:	andeq	sl, r1, r8, ror #26
   119d8:	andeq	sl, r1, r4, ror sp
   119dc:	andeq	sl, r1, ip, ror sp
   119e0:	muleq	r1, r0, r8
   119e4:	andeq	sl, r1, r4, lsl #27
   119e8:	strdeq	r2, [r1], -ip
   119ec:	andeq	r3, r1, ip, lsr #21
   119f0:	cmp	r0, #114	; 0x72
   119f4:	beq	11cac <__assert_fail@plt+0x840>
   119f8:	push	{r4, r5, lr}
   119fc:	vpush	{d8}
   11a00:	sub	sp, sp, #12
   11a04:	mov	r5, r2
   11a08:	mov	r4, r1
   11a0c:	bgt	11b14 <__assert_fail@plt+0x6a8>
   11a10:	cmp	r0, #102	; 0x66
   11a14:	beq	11d90 <__assert_fail@plt+0x924>
   11a18:	bgt	11a80 <__assert_fail@plt+0x614>
   11a1c:	cmp	r0, #87	; 0x57
   11a20:	beq	11d58 <__assert_fail@plt+0x8ec>
   11a24:	bgt	11a58 <__assert_fail@plt+0x5ec>
   11a28:	cmp	r0, #82	; 0x52
   11a2c:	beq	11d40 <__assert_fail@plt+0x8d4>
   11a30:	cmp	r0, #84	; 0x54
   11a34:	bne	11e6c <__assert_fail@plt+0xa00>
   11a38:	mov	r2, #1
   11a3c:	mov	r1, #255	; 0xff
   11a40:	mov	r0, r4
   11a44:	bl	12320 <__assert_fail@plt+0xeb4>
   11a48:	ldr	r3, [pc, #1072]	; 11e80 <__assert_fail@plt+0xa14>
   11a4c:	str	r0, [r3, #40]	; 0x28
   11a50:	mov	r0, #0
   11a54:	b	11c04 <__assert_fail@plt+0x798>
   11a58:	cmp	r0, #99	; 0x63
   11a5c:	beq	11be8 <__assert_fail@plt+0x77c>
   11a60:	cmp	r0, #100	; 0x64
   11a64:	bne	11e6c <__assert_fail@plt+0xa00>
   11a68:	ldr	r2, [pc, #1044]	; 11e84 <__assert_fail@plt+0xa18>
   11a6c:	ldr	r3, [r2]
   11a70:	orr	r3, r3, #1
   11a74:	str	r3, [r2]
   11a78:	mov	r0, #0
   11a7c:	b	11c04 <__assert_fail@plt+0x798>
   11a80:	cmp	r0, #110	; 0x6e
   11a84:	beq	11ce4 <__assert_fail@plt+0x878>
   11a88:	bgt	11aec <__assert_fail@plt+0x680>
   11a8c:	cmp	r0, #105	; 0x69
   11a90:	beq	11c10 <__assert_fail@plt+0x7a4>
   11a94:	cmp	r0, #108	; 0x6c
   11a98:	bne	11e6c <__assert_fail@plt+0xa00>
   11a9c:	mov	r2, #0
   11aa0:	add	r1, sp, #4
   11aa4:	mov	r0, r4
   11aa8:	bl	112f8 <strtoul@plt>
   11aac:	ldr	r3, [pc, #980]	; 11e88 <__assert_fail@plt+0xa1c>
   11ab0:	str	r0, [r3, #32]
   11ab4:	ldr	r3, [sp, #4]
   11ab8:	ldrb	r3, [r3]
   11abc:	cmp	r3, #0
   11ac0:	bne	11ad0 <__assert_fail@plt+0x664>
   11ac4:	cmp	r0, #0
   11ac8:	movge	r0, #0
   11acc:	bge	11c04 <__assert_fail@plt+0x798>
   11ad0:	mov	r3, r4
   11ad4:	ldr	r2, [pc, #944]	; 11e8c <__assert_fail@plt+0xa20>
   11ad8:	mov	r1, #0
   11adc:	mov	r0, #1
   11ae0:	bl	11268 <error@plt>
   11ae4:	mov	r0, #0
   11ae8:	b	11c04 <__assert_fail@plt+0x798>
   11aec:	cmp	r0, #112	; 0x70
   11af0:	beq	11cfc <__assert_fail@plt+0x890>
   11af4:	cmp	r0, #113	; 0x71
   11af8:	bne	11e6c <__assert_fail@plt+0xa00>
   11afc:	ldr	r2, [pc, #908]	; 11e90 <__assert_fail@plt+0xa24>
   11b00:	ldr	r3, [r2]
   11b04:	orr	r3, r3, #8
   11b08:	str	r3, [r2]
   11b0c:	mov	r0, #0
   11b10:	b	11c04 <__assert_fail@plt+0x798>
   11b14:	ldr	r3, [pc, #888]	; 11e94 <__assert_fail@plt+0xa28>
   11b18:	cmp	r0, r3
   11b1c:	beq	11dc0 <__assert_fail@plt+0x954>
   11b20:	bgt	11b80 <__assert_fail@plt+0x714>
   11b24:	cmp	r0, #118	; 0x76
   11b28:	beq	11d78 <__assert_fail@plt+0x90c>
   11b2c:	bgt	11b58 <__assert_fail@plt+0x6ec>
   11b30:	cmp	r0, #115	; 0x73
   11b34:	beq	11cc4 <__assert_fail@plt+0x858>
   11b38:	cmp	r0, #116	; 0x74
   11b3c:	bne	11e6c <__assert_fail@plt+0xa00>
   11b40:	mov	r0, r1
   11b44:	bl	11940 <__assert_fail@plt+0x4d4>
   11b48:	ldr	r3, [pc, #816]	; 11e80 <__assert_fail@plt+0xa14>
   11b4c:	str	r0, [r3, #48]	; 0x30
   11b50:	mov	r0, #0
   11b54:	b	11c04 <__assert_fail@plt+0x798>
   11b58:	cmp	r0, #119	; 0x77
   11b5c:	beq	11d20 <__assert_fail@plt+0x8b4>
   11b60:	cmp	r0, #256	; 0x100
   11b64:	bne	11e6c <__assert_fail@plt+0xa00>
   11b68:	ldr	r0, [pc, #808]	; 11e98 <__assert_fail@plt+0xa2c>
   11b6c:	bl	11940 <__assert_fail@plt+0x4d4>
   11b70:	ldr	r3, [pc, #776]	; 11e80 <__assert_fail@plt+0xa14>
   11b74:	str	r0, [r3, #48]	; 0x30
   11b78:	mov	r0, #0
   11b7c:	b	11c04 <__assert_fail@plt+0x798>
   11b80:	cmp	r0, #260	; 0x104
   11b84:	beq	11dd8 <__assert_fail@plt+0x96c>
   11b88:	bgt	11bbc <__assert_fail@plt+0x750>
   11b8c:	ldr	r3, [pc, #776]	; 11e9c <__assert_fail@plt+0xa30>
   11b90:	cmp	r0, r3
   11b94:	beq	11da8 <__assert_fail@plt+0x93c>
   11b98:	add	r3, r3, #1
   11b9c:	cmp	r0, r3
   11ba0:	bne	11e6c <__assert_fail@plt+0xa00>
   11ba4:	ldr	r0, [pc, #756]	; 11ea0 <__assert_fail@plt+0xa34>
   11ba8:	bl	11940 <__assert_fail@plt+0x4d4>
   11bac:	ldr	r3, [pc, #716]	; 11e80 <__assert_fail@plt+0xa14>
   11bb0:	str	r0, [r3, #48]	; 0x30
   11bb4:	mov	r0, #0
   11bb8:	b	11c04 <__assert_fail@plt+0x798>
   11bbc:	ldr	r3, [pc, #736]	; 11ea4 <__assert_fail@plt+0xa38>
   11bc0:	cmp	r0, r3
   11bc4:	beq	11df8 <__assert_fail@plt+0x98c>
   11bc8:	ldr	r3, [pc, #728]	; 11ea8 <__assert_fail@plt+0xa3c>
   11bcc:	cmp	r0, r3
   11bd0:	bne	11e6c <__assert_fail@plt+0xa00>
   11bd4:	ldr	r1, [pc, #720]	; 11eac <__assert_fail@plt+0xa40>
   11bd8:	mov	r0, r2
   11bdc:	bl	17464 <argp_error@@Base>
   11be0:	mov	r0, #7
   11be4:	b	11c04 <__assert_fail@plt+0x798>
   11be8:	mov	r2, #1
   11bec:	mov	r1, #0
   11bf0:	mov	r0, r4
   11bf4:	bl	12320 <__assert_fail@plt+0xeb4>
   11bf8:	ldr	r3, [pc, #648]	; 11e88 <__assert_fail@plt+0xa1c>
   11bfc:	str	r0, [r3, #8]
   11c00:	mov	r0, #0
   11c04:	add	sp, sp, #12
   11c08:	vpop	{d8}
   11c0c:	pop	{r4, r5, pc}
   11c10:	add	r1, sp, #4
   11c14:	mov	r0, r4
   11c18:	bl	11370 <strtod@plt>
   11c1c:	vmov.f64	d8, d0
   11c20:	ldr	r3, [sp, #4]
   11c24:	ldrb	r2, [r3]
   11c28:	cmp	r2, #0
   11c2c:	bne	11c98 <__assert_fail@plt+0x82c>
   11c30:	ldr	r2, [pc, #600]	; 11e90 <__assert_fail@plt+0xa24>
   11c34:	ldr	r3, [r2]
   11c38:	orr	r3, r3, #2
   11c3c:	str	r3, [r2]
   11c40:	vldr	d7, [pc, #560]	; 11e78 <__assert_fail@plt+0xa0c>
   11c44:	vmul.f64	d8, d8, d7
   11c48:	vcvt.u32.f64	s15, d8
   11c4c:	vmov	r3, s15
   11c50:	ldr	r2, [pc, #600]	; 11eb0 <__assert_fail@plt+0xa44>
   11c54:	vstr	s15, [r2]
   11c58:	ldr	r2, [pc, #552]	; 11e88 <__assert_fail@plt+0xa1c>
   11c5c:	ldrb	r2, [r2, #4]
   11c60:	eor	r2, r2, #1
   11c64:	cmp	r3, #199	; 0xc7
   11c68:	movhi	r3, #0
   11c6c:	andls	r3, r2, #1
   11c70:	cmp	r3, #0
   11c74:	moveq	r0, #0
   11c78:	beq	11c04 <__assert_fail@plt+0x798>
   11c7c:	mov	r3, r4
   11c80:	ldr	r2, [pc, #556]	; 11eb4 <__assert_fail@plt+0xa48>
   11c84:	mov	r1, #0
   11c88:	mov	r0, #1
   11c8c:	bl	11268 <error@plt>
   11c90:	mov	r0, #0
   11c94:	b	11c04 <__assert_fail@plt+0x798>
   11c98:	mov	r2, r4
   11c9c:	ldr	r1, [pc, #532]	; 11eb8 <__assert_fail@plt+0xa4c>
   11ca0:	mov	r0, r5
   11ca4:	bl	17464 <argp_error@@Base>
   11ca8:	b	11c30 <__assert_fail@plt+0x7c4>
   11cac:	ldr	r2, [pc, #464]	; 11e84 <__assert_fail@plt+0xa18>
   11cb0:	ldr	r3, [r2]
   11cb4:	orr	r3, r3, #5
   11cb8:	str	r3, [r2]
   11cbc:	mov	r0, #0
   11cc0:	bx	lr
   11cc4:	mov	r2, #1
   11cc8:	ldr	r1, [pc, #492]	; 11ebc <__assert_fail@plt+0xa50>
   11ccc:	mov	r0, r4
   11cd0:	bl	12320 <__assert_fail@plt+0xeb4>
   11cd4:	ldr	r3, [pc, #420]	; 11e80 <__assert_fail@plt+0xa14>
   11cd8:	str	r0, [r3]
   11cdc:	mov	r0, #0
   11ce0:	b	11c04 <__assert_fail@plt+0x798>
   11ce4:	ldr	r2, [pc, #420]	; 11e90 <__assert_fail@plt+0xa24>
   11ce8:	ldr	r3, [r2]
   11cec:	orr	r3, r3, #4
   11cf0:	str	r3, [r2]
   11cf4:	mov	r0, #0
   11cf8:	b	11c04 <__assert_fail@plt+0x798>
   11cfc:	ldr	r5, [pc, #444]	; 11ec0 <__assert_fail@plt+0xa54>
   11d00:	mov	r2, r5
   11d04:	ldr	r1, [pc, #440]	; 11ec4 <__assert_fail@plt+0xa58>
   11d08:	mov	r0, r4
   11d0c:	bl	12488 <__assert_fail@plt+0x101c>
   11d10:	ldr	r3, [pc, #432]	; 11ec8 <__assert_fail@plt+0xa5c>
   11d14:	str	r5, [r3]
   11d18:	mov	r0, #0
   11d1c:	b	11c04 <__assert_fail@plt+0x798>
   11d20:	mov	r2, #0
   11d24:	mvn	r1, #-2147483648	; 0x80000000
   11d28:	mov	r0, r4
   11d2c:	bl	12320 <__assert_fail@plt+0xeb4>
   11d30:	ldr	r3, [pc, #328]	; 11e80 <__assert_fail@plt+0xa14>
   11d34:	str	r0, [r3, #52]	; 0x34
   11d38:	mov	r0, #0
   11d3c:	b	11c04 <__assert_fail@plt+0x798>
   11d40:	ldr	r2, [pc, #328]	; 11e90 <__assert_fail@plt+0xa24>
   11d44:	ldr	r3, [r2]
   11d48:	orr	r3, r3, #16
   11d4c:	str	r3, [r2]
   11d50:	mov	r0, #0
   11d54:	b	11c04 <__assert_fail@plt+0x798>
   11d58:	mov	r2, #0
   11d5c:	mvn	r1, #-2147483648	; 0x80000000
   11d60:	mov	r0, r4
   11d64:	bl	12320 <__assert_fail@plt+0xeb4>
   11d68:	ldr	r3, [pc, #272]	; 11e80 <__assert_fail@plt+0xa14>
   11d6c:	str	r0, [r3, #56]	; 0x38
   11d70:	mov	r0, #0
   11d74:	b	11c04 <__assert_fail@plt+0x798>
   11d78:	ldr	r2, [pc, #272]	; 11e90 <__assert_fail@plt+0xa24>
   11d7c:	ldr	r3, [r2]
   11d80:	orr	r3, r3, #32
   11d84:	str	r3, [r2]
   11d88:	mov	r0, #0
   11d8c:	b	11c04 <__assert_fail@plt+0x798>
   11d90:	ldr	r2, [pc, #248]	; 11e90 <__assert_fail@plt+0xa24>
   11d94:	ldr	r3, [r2]
   11d98:	orr	r3, r3, #1
   11d9c:	str	r3, [r2]
   11da0:	mov	r0, #0
   11da4:	b	11c04 <__assert_fail@plt+0x798>
   11da8:	ldr	r0, [pc, #284]	; 11ecc <__assert_fail@plt+0xa60>
   11dac:	bl	11940 <__assert_fail@plt+0x4d4>
   11db0:	ldr	r3, [pc, #200]	; 11e80 <__assert_fail@plt+0xa14>
   11db4:	str	r0, [r3, #48]	; 0x30
   11db8:	mov	r0, #0
   11dbc:	b	11c04 <__assert_fail@plt+0x798>
   11dc0:	ldr	r0, [pc, #264]	; 11ed0 <__assert_fail@plt+0xa64>
   11dc4:	bl	11940 <__assert_fail@plt+0x4d4>
   11dc8:	ldr	r3, [pc, #176]	; 11e80 <__assert_fail@plt+0xa14>
   11dcc:	str	r0, [r3, #48]	; 0x30
   11dd0:	mov	r0, #0
   11dd4:	b	11c04 <__assert_fail@plt+0x798>
   11dd8:	mov	r2, #0
   11ddc:	mov	r1, #255	; 0xff
   11de0:	mov	r0, r4
   11de4:	bl	12320 <__assert_fail@plt+0xeb4>
   11de8:	ldr	r3, [pc, #152]	; 11e88 <__assert_fail@plt+0xa1c>
   11dec:	str	r0, [r3, #12]
   11df0:	mov	r0, #0
   11df4:	b	11c04 <__assert_fail@plt+0x798>
   11df8:	ldr	r2, [pc, #144]	; 11e90 <__assert_fail@plt+0xa24>
   11dfc:	ldr	r3, [r2]
   11e00:	orr	r3, r3, #64	; 0x40
   11e04:	str	r3, [r2]
   11e08:	ldr	r1, [pc, #196]	; 11ed4 <__assert_fail@plt+0xa68>
   11e0c:	mov	r0, r4
   11e10:	bl	11238 <strcasecmp@plt>
   11e14:	cmp	r0, #0
   11e18:	moveq	r1, #1
   11e1c:	beq	11e38 <__assert_fail@plt+0x9cc>
   11e20:	ldr	r1, [pc, #176]	; 11ed8 <__assert_fail@plt+0xa6c>
   11e24:	mov	r0, r4
   11e28:	bl	11238 <strcasecmp@plt>
   11e2c:	cmp	r0, #0
   11e30:	moveq	r1, #2
   11e34:	bne	11e50 <__assert_fail@plt+0x9e4>
   11e38:	ldr	r2, [pc, #156]	; 11edc <__assert_fail@plt+0xa70>
   11e3c:	ldr	r3, [r2]
   11e40:	orr	r3, r3, r1
   11e44:	str	r3, [r2]
   11e48:	mov	r0, #0
   11e4c:	b	11c04 <__assert_fail@plt+0x798>
   11e50:	mov	r3, r4
   11e54:	ldr	r2, [pc, #132]	; 11ee0 <__assert_fail@plt+0xa74>
   11e58:	mov	r1, #0
   11e5c:	mov	r0, #1
   11e60:	bl	11268 <error@plt>
   11e64:	mov	r1, #0
   11e68:	b	11e38 <__assert_fail@plt+0x9cc>
   11e6c:	mov	r0, #7
   11e70:	b	11c04 <__assert_fail@plt+0x798>
   11e74:	nop			; (mov r0, r0)
   11e78:	andeq	r0, r0, r0
   11e7c:	addmi	r4, pc, r0
   11e80:	andeq	sp, r2, r0, asr #2
   11e84:	andeq	sp, r2, ip, asr #13
   11e88:	andeq	sp, r2, r4, lsr r6
   11e8c:	ldrdeq	sl, [r1], -ip
   11e90:	andeq	sp, r2, r8, asr #13
   11e94:	andeq	r0, r0, r1, lsl #2
   11e98:	andeq	sl, r1, r0, ror #26
   11e9c:	andeq	r0, r0, r2, lsl #2
   11ea0:	strdeq	sl, [r1], -r8
   11ea4:	andeq	r0, r0, r5, lsl #2
   11ea8:	tsteq	r0, r2
   11eac:	andeq	sl, r1, r0, lsr lr
   11eb0:	ldrdeq	sp, [r2], -r8
   11eb4:	andeq	sl, r1, r0, asr #27
   11eb8:	andeq	sl, r1, r0, lsr #27
   11ebc:	andeq	pc, r0, r7, ror pc	; <UNPREDICTABLE>
   11ec0:	andeq	sp, r2, r4, asr #12
   11ec4:	andeq	sp, r2, ip, ror #2
   11ec8:	andeq	sp, r2, r0, asr #13
   11ecc:	andeq	sl, r1, r8, ror #26
   11ed0:	andeq	sl, r1, r4, ror sp
   11ed4:	andeq	sl, r1, r0, lsl #28
   11ed8:	andeq	sl, r1, r8, lsl #28
   11edc:	ldrdeq	sp, [r2], -r4
   11ee0:	andeq	sl, r1, r0, lsl lr
   11ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee8:	sub	sp, sp, #180	; 0xb4
   11eec:	mov	r5, r0
   11ef0:	str	r1, [sp, #12]
   11ef4:	ldr	r1, [pc, #808]	; 12224 <__assert_fail@plt+0xdb8>
   11ef8:	mov	r0, #2
   11efc:	bl	111c0 <signal@plt>
   11f00:	ldr	r6, [r5]
   11f04:	add	r6, r6, #1
   11f08:	mov	r3, #0
   11f0c:	str	r3, [sp, #40]	; 0x28
   11f10:	str	r3, [sp, #44]	; 0x2c
   11f14:	str	r3, [sp, #24]
   11f18:	str	r3, [sp, #28]
   11f1c:	str	r3, [sp, #16]
   11f20:	str	r3, [sp, #20]
   11f24:	ldr	r3, [pc, #764]	; 12228 <__assert_fail@plt+0xdbc>
   11f28:	ldr	r3, [r3, #32]
   11f2c:	cmp	r3, #0
   11f30:	beq	11f54 <__assert_fail@plt+0xae8>
   11f34:	mov	r4, #0
   11f38:	ldr	r7, [pc, #744]	; 12228 <__assert_fail@plt+0xdbc>
   11f3c:	mov	r0, r5
   11f40:	bl	115b4 <__assert_fail@plt+0x148>
   11f44:	add	r4, r4, #1
   11f48:	ldr	r3, [r7, #32]
   11f4c:	cmp	r3, r4
   11f50:	bhi	11f3c <__assert_fail@plt+0xad0>
   11f54:	ldr	r3, [pc, #720]	; 1222c <__assert_fail@plt+0xdc0>
   11f58:	ldr	r3, [r3]
   11f5c:	tst	r3, #1
   11f60:	beq	11fa0 <__assert_fail@plt+0xb34>
   11f64:	ldr	r3, [pc, #708]	; 12230 <__assert_fail@plt+0xdc4>
   11f68:	str	r3, [sp, #28]
   11f6c:	mov	r1, #0
   11f70:	add	r0, sp, #32
   11f74:	bl	1125c <gettimeofday@plt>
   11f78:	mov	r0, r5
   11f7c:	bl	115b4 <__assert_fail@plt+0x148>
   11f80:	mov	fp, #0
   11f84:	mov	sl, fp
   11f88:	str	fp, [sp, #8]
   11f8c:	ldr	r7, [pc, #660]	; 12228 <__assert_fail@plt+0xdbc>
   11f90:	ldr	r4, [pc, #668]	; 12234 <__assert_fail@plt+0xdc8>
   11f94:	ldr	r9, [pc, #656]	; 1222c <__assert_fail@plt+0xdc0>
   11f98:	ldr	r8, [pc, #664]	; 12238 <__assert_fail@plt+0xdcc>
   11f9c:	b	120ac <__assert_fail@plt+0xc40>
   11fa0:	ldr	r1, [r5, #20]
   11fa4:	ldr	r3, [pc, #656]	; 1223c <__assert_fail@plt+0xdd0>
   11fa8:	umull	r2, r3, r3, r1
   11fac:	lsr	r3, r3, #6
   11fb0:	str	r3, [sp, #24]
   11fb4:	mov	r2, #1000	; 0x3e8
   11fb8:	mul	r3, r2, r3
   11fbc:	sub	r3, r1, r3
   11fc0:	mul	r2, r2, r3
   11fc4:	str	r2, [sp, #28]
   11fc8:	b	11f6c <__assert_fail@plt+0xb00>
   11fcc:	bl	11328 <__errno_location@plt>
   11fd0:	ldr	r1, [r0]
   11fd4:	cmp	r1, #4
   11fd8:	beq	120ac <__assert_fail@plt+0xc40>
   11fdc:	ldr	r2, [pc, #604]	; 12240 <__assert_fail@plt+0xdd4>
   11fe0:	mov	r0, #1
   11fe4:	bl	11268 <error@plt>
   11fe8:	b	120ac <__assert_fail@plt+0xc40>
   11fec:	mov	r0, r5
   11ff0:	bl	13e54 <__assert_fail@plt+0x29e8>
   11ff4:	cmp	r0, #0
   11ff8:	addeq	fp, fp, #1
   11ffc:	ldr	r3, [sp, #8]
   12000:	cmp	r3, #0
   12004:	beq	1205c <__assert_fail@plt+0xbf0>
   12008:	ldr	r1, [r8, #52]	; 0x34
   1200c:	add	r0, r5, #12
   12010:	bl	127b8 <__assert_fail@plt+0x134c>
   12014:	cmp	r0, #0
   12018:	bne	12038 <__assert_fail@plt+0xbcc>
   1201c:	ldr	r3, [r5, #8]
   12020:	adds	r2, r3, #0
   12024:	movne	r2, #1
   12028:	cmp	fp, r3
   1202c:	movcc	r2, #0
   12030:	cmp	r2, #0
   12034:	beq	120ac <__assert_fail@plt+0xc40>
   12038:	mov	r0, r5
   1203c:	bl	1277c <__assert_fail@plt+0x1310>
   12040:	ldr	r3, [sp, #12]
   12044:	cmp	r3, #0
   12048:	moveq	r0, #0
   1204c:	beq	12054 <__assert_fail@plt+0xbe8>
   12050:	blx	r3
   12054:	add	sp, sp, #180	; 0xb4
   12058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1205c:	mov	r1, #0
   12060:	add	r0, sp, #16
   12064:	bl	1125c <gettimeofday@plt>
   12068:	add	r3, sp, #16
   1206c:	str	r3, [sp, #8]
   12070:	b	12008 <__assert_fail@plt+0xb9c>
   12074:	mov	r0, r5
   12078:	bl	115b4 <__assert_fail@plt+0x148>
   1207c:	ldr	r3, [r9]
   12080:	and	r3, r3, #9
   12084:	cmp	r3, #1
   12088:	beq	12210 <__assert_fail@plt+0xda4>
   1208c:	ldr	r1, [r8, #52]	; 0x34
   12090:	add	r0, r5, #12
   12094:	bl	127b8 <__assert_fail@plt+0x134c>
   12098:	cmp	r0, #0
   1209c:	bne	12038 <__assert_fail@plt+0xbcc>
   120a0:	mov	r1, #0
   120a4:	add	r0, sp, #32
   120a8:	bl	1125c <gettimeofday@plt>
   120ac:	ldr	r3, [r7]
   120b0:	cmp	r3, #0
   120b4:	bne	12038 <__assert_fail@plt+0xbcc>
   120b8:	add	r3, sp, #44	; 0x2c
   120bc:	add	r1, sp, #172	; 0xac
   120c0:	mov	r2, #0
   120c4:	str	r2, [r3, #4]!
   120c8:	cmp	r1, r3
   120cc:	bne	120c4 <__assert_fail@plt+0xc58>
   120d0:	ldr	r3, [r5]
   120d4:	add	r2, r3, #31
   120d8:	cmp	r3, #0
   120dc:	movge	r2, r3
   120e0:	asr	r2, r2, #5
   120e4:	add	r1, sp, #176	; 0xb0
   120e8:	add	r2, r1, r2, lsl #2
   120ec:	asr	r1, r3, #31
   120f0:	lsr	r1, r1, #27
   120f4:	add	r3, r3, r1
   120f8:	and	r3, r3, #31
   120fc:	sub	r3, r3, r1
   12100:	ldr	r1, [r2, #-128]	; 0xffffff80
   12104:	mov	r0, #1
   12108:	orr	r3, r1, r0, lsl r3
   1210c:	str	r3, [r2, #-128]	; 0xffffff80
   12110:	mov	r1, #0
   12114:	add	r0, sp, #16
   12118:	bl	1125c <gettimeofday@plt>
   1211c:	ldr	r3, [sp, #24]
   12120:	ldr	r2, [sp, #32]
   12124:	add	r2, r2, r3
   12128:	ldr	r3, [sp, #16]
   1212c:	sub	r2, r2, r3
   12130:	str	r2, [sp, #40]	; 0x28
   12134:	ldr	r1, [sp, #28]
   12138:	ldr	r3, [sp, #36]	; 0x24
   1213c:	add	r3, r3, r1
   12140:	ldr	r1, [sp, #20]
   12144:	sub	r3, r3, r1
   12148:	str	r3, [sp, #44]	; 0x2c
   1214c:	cmp	r3, #0
   12150:	bge	12174 <__assert_fail@plt+0xd08>
   12154:	sub	r2, r2, #1
   12158:	add	r3, r3, #999424	; 0xf4000
   1215c:	mov	r1, r2
   12160:	sub	r2, r2, #1
   12164:	adds	r3, r3, #576	; 0x240
   12168:	bmi	12158 <__assert_fail@plt+0xcec>
   1216c:	str	r3, [sp, #44]	; 0x2c
   12170:	str	r1, [sp, #40]	; 0x28
   12174:	ldr	r3, [sp, #44]	; 0x2c
   12178:	cmp	r3, r4
   1217c:	ble	121a0 <__assert_fail@plt+0xd34>
   12180:	ldr	r2, [sp, #40]	; 0x28
   12184:	sub	r3, r3, #999424	; 0xf4000
   12188:	sub	r3, r3, #576	; 0x240
   1218c:	add	r2, r2, #1
   12190:	cmp	r3, r4
   12194:	bgt	12184 <__assert_fail@plt+0xd18>
   12198:	str	r3, [sp, #44]	; 0x2c
   1219c:	str	r2, [sp, #40]	; 0x28
   121a0:	ldr	r3, [sp, #40]	; 0x28
   121a4:	cmp	r3, #0
   121a8:	movlt	r3, #0
   121ac:	strlt	r3, [sp, #44]	; 0x2c
   121b0:	strlt	r3, [sp, #40]	; 0x28
   121b4:	add	r3, sp, #40	; 0x28
   121b8:	str	r3, [sp]
   121bc:	mov	r3, #0
   121c0:	mov	r2, r3
   121c4:	add	r1, sp, #48	; 0x30
   121c8:	mov	r0, r6
   121cc:	bl	111f0 <select@plt>
   121d0:	cmp	r0, #0
   121d4:	blt	11fcc <__assert_fail@plt+0xb60>
   121d8:	cmp	r0, #1
   121dc:	beq	11fec <__assert_fail@plt+0xb80>
   121e0:	ldr	r3, [r5, #8]
   121e4:	cmp	r3, #0
   121e8:	beq	12074 <__assert_fail@plt+0xc08>
   121ec:	ldr	r2, [r5, #112]	; 0x70
   121f0:	cmp	r3, r2
   121f4:	bhi	12074 <__assert_fail@plt+0xc08>
   121f8:	cmp	sl, #0
   121fc:	bne	12038 <__assert_fail@plt+0xbcc>
   12200:	ldr	r3, [r8, #56]	; 0x38
   12204:	str	r3, [sp, #24]
   12208:	mov	sl, #1
   1220c:	b	120a0 <__assert_fail@plt+0xc34>
   12210:	ldr	r3, [pc, #44]	; 12244 <__assert_fail@plt+0xdd8>
   12214:	ldr	r1, [r3]
   12218:	mov	r0, #46	; 0x2e
   1221c:	bl	113f4 <putc@plt>
   12220:	b	1208c <__assert_fail@plt+0xc20>
   12224:	andeq	r1, r1, r0, lsr #11
   12228:	andeq	sp, r2, r4, lsr r6
   1222c:	andeq	sp, r2, r8, asr #13
   12230:	andeq	r2, r0, r0, lsl r7
   12234:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   12238:	andeq	sp, r2, r0, asr #2
   1223c:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   12240:	andeq	sl, r1, r8, asr #28
   12244:	andeq	sp, r2, ip, lsr #12
   12248:	push	{r4, lr}
   1224c:	ldr	r3, [pc, #172]	; 12300 <__assert_fail@plt+0xe94>
   12250:	ldr	r0, [r3]
   12254:	bl	11160 <fflush@plt>
   12258:	ldr	r4, [pc, #164]	; 12304 <__assert_fail@plt+0xe98>
   1225c:	ldr	r3, [r4]
   12260:	ldr	r1, [r3, #52]	; 0x34
   12264:	ldr	r0, [pc, #156]	; 12308 <__assert_fail@plt+0xe9c>
   12268:	bl	11148 <printf@plt>
   1226c:	ldr	r3, [r4]
   12270:	ldr	r1, [r3, #112]	; 0x70
   12274:	ldr	r0, [pc, #144]	; 1230c <__assert_fail@plt+0xea0>
   12278:	bl	11148 <printf@plt>
   1227c:	ldr	r3, [r4]
   12280:	ldr	r1, [r3, #116]	; 0x74
   12284:	ldr	r0, [pc, #132]	; 12310 <__assert_fail@plt+0xea4>
   12288:	bl	11148 <printf@plt>
   1228c:	ldr	r3, [r4]
   12290:	ldr	r1, [r3, #120]	; 0x78
   12294:	cmp	r1, #0
   12298:	bne	122e8 <__assert_fail@plt+0xe7c>
   1229c:	ldr	r3, [pc, #96]	; 12304 <__assert_fail@plt+0xe98>
   122a0:	ldr	r3, [r3]
   122a4:	ldr	r1, [r3, #112]	; 0x70
   122a8:	cmp	r1, #0
   122ac:	beq	122d8 <__assert_fail@plt+0xe6c>
   122b0:	ldr	r0, [r3, #116]	; 0x74
   122b4:	cmp	r1, r0
   122b8:	bcc	122f4 <__assert_fail@plt+0xe88>
   122bc:	sub	r0, r1, r0
   122c0:	mov	r3, #100	; 0x64
   122c4:	mul	r0, r3, r0
   122c8:	bl	1a7b4 <argp_parse@@Base+0x2c24>
   122cc:	mov	r1, r0
   122d0:	ldr	r0, [pc, #60]	; 12314 <__assert_fail@plt+0xea8>
   122d4:	bl	11148 <printf@plt>
   122d8:	mov	r0, #10
   122dc:	bl	11364 <putchar@plt>
   122e0:	mov	r0, #0
   122e4:	pop	{r4, pc}
   122e8:	ldr	r0, [pc, #40]	; 12318 <__assert_fail@plt+0xeac>
   122ec:	bl	11148 <printf@plt>
   122f0:	b	1229c <__assert_fail@plt+0xe30>
   122f4:	ldr	r0, [pc, #32]	; 1231c <__assert_fail@plt+0xeb0>
   122f8:	bl	11148 <printf@plt>
   122fc:	b	122d8 <__assert_fail@plt+0xe6c>
   12300:	andeq	sp, r2, ip, lsr #12
   12304:	ldrdeq	sp, [r2], -r0
   12308:	andeq	sl, r1, r8, asr lr
   1230c:	andeq	sl, r1, r4, ror lr
   12310:	muleq	r1, r0, lr
   12314:	andeq	sl, r1, r4, ror #29
   12318:	andeq	sl, r1, r8, lsr #29
   1231c:			; <UNDEFINED> instruction: 0x0001aebc
   12320:	push	{r4, r5, r6, r7, lr}
   12324:	sub	sp, sp, #20
   12328:	mov	r7, r0
   1232c:	mov	r5, r1
   12330:	mov	r6, r2
   12334:	mov	r2, #0
   12338:	add	r1, sp, #12
   1233c:	bl	112f8 <strtoul@plt>
   12340:	mov	r4, r0
   12344:	ldr	r3, [sp, #12]
   12348:	ldrb	r2, [r3]
   1234c:	cmp	r2, #0
   12350:	bne	12378 <__assert_fail@plt+0xf0c>
   12354:	cmp	r4, #0
   12358:	cmpeq	r6, #0
   1235c:	beq	12394 <__assert_fail@plt+0xf28>
   12360:	cmp	r5, #0
   12364:	cmpne	r4, r5
   12368:	bhi	123ac <__assert_fail@plt+0xf40>
   1236c:	mov	r0, r4
   12370:	add	sp, sp, #20
   12374:	pop	{r4, r5, r6, r7, pc}
   12378:	str	r3, [sp]
   1237c:	mov	r3, r7
   12380:	ldr	r2, [pc, #60]	; 123c4 <__assert_fail@plt+0xf58>
   12384:	mov	r1, #0
   12388:	mov	r0, #1
   1238c:	bl	11268 <error@plt>
   12390:	b	12354 <__assert_fail@plt+0xee8>
   12394:	mov	r3, r7
   12398:	ldr	r2, [pc, #40]	; 123c8 <__assert_fail@plt+0xf5c>
   1239c:	mov	r1, #0
   123a0:	mov	r0, #1
   123a4:	bl	11268 <error@plt>
   123a8:	b	12360 <__assert_fail@plt+0xef4>
   123ac:	mov	r3, r7
   123b0:	ldr	r2, [pc, #20]	; 123cc <__assert_fail@plt+0xf60>
   123b4:	mov	r1, #0
   123b8:	mov	r0, #1
   123bc:	bl	11268 <error@plt>
   123c0:	b	1236c <__assert_fail@plt+0xf00>
   123c4:	andeq	sl, r1, r0, lsr #27
   123c8:	andeq	sl, r1, r0, asr #27
   123cc:	andeq	fp, r1, r0, ror r3
   123d0:	ldr	r3, [pc, #168]	; 12480 <__assert_fail@plt+0x1014>
   123d4:	ldr	r3, [r3]
   123d8:	cmp	r3, #0
   123dc:	bxeq	lr
   123e0:	push	{r4, r5, r6, lr}
   123e4:	mov	r5, r1
   123e8:	mov	r4, r0
   123ec:	mov	r0, r3
   123f0:	bl	18d6c <argp_parse@@Base+0x11dc>
   123f4:	ldr	r3, [pc, #136]	; 12484 <__assert_fail@plt+0x1018>
   123f8:	str	r0, [r3]
   123fc:	cmp	r4, #0
   12400:	beq	12444 <__assert_fail@plt+0xfd8>
   12404:	ldr	r3, [pc, #116]	; 12480 <__assert_fail@plt+0x1014>
   12408:	ldr	r3, [r3]
   1240c:	add	r3, r0, r3
   12410:	cmp	r0, r3
   12414:	popcs	{r4, r5, r6, pc}
   12418:	sub	r2, r0, #1
   1241c:	sub	r0, r3, #1
   12420:	mov	r3, #0
   12424:	ldrb	ip, [r4, r3]
   12428:	strb	ip, [r2, #1]!
   1242c:	add	r3, r3, #1
   12430:	cmp	r3, r5
   12434:	movcs	r3, #0
   12438:	cmp	r0, r2
   1243c:	bne	12424 <__assert_fail@plt+0xfb8>
   12440:	pop	{r4, r5, r6, pc}
   12444:	ldr	r3, [pc, #52]	; 12480 <__assert_fail@plt+0x1014>
   12448:	ldr	r3, [r3]
   1244c:	cmp	r3, #0
   12450:	beq	1247c <__assert_fail@plt+0x1010>
   12454:	mov	r3, #0
   12458:	ldr	r0, [pc, #36]	; 12484 <__assert_fail@plt+0x1018>
   1245c:	ldr	r1, [pc, #28]	; 12480 <__assert_fail@plt+0x1014>
   12460:	ldr	r2, [r0]
   12464:	strb	r3, [r2, r3]
   12468:	add	r3, r3, #1
   1246c:	ldr	r2, [r1]
   12470:	cmp	r2, r3
   12474:	bhi	12460 <__assert_fail@plt+0xff4>
   12478:	pop	{r4, r5, r6, pc}
   1247c:	pop	{r4, r5, r6, pc}
   12480:	andeq	sp, r2, r0, asr #2
   12484:	andeq	sp, r2, r4, asr #13
   12488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1248c:	sub	sp, sp, #12
   12490:	mov	r7, r1
   12494:	ldrb	r3, [r0]
   12498:	cmp	r3, #0
   1249c:	beq	12528 <__assert_fail@plt+0x10bc>
   124a0:	mov	r4, r0
   124a4:	ldr	r3, [r1]
   124a8:	cmp	r3, #0
   124ac:	ble	12538 <__assert_fail@plt+0x10cc>
   124b0:	sub	r6, r2, #1
   124b4:	mov	r5, #0
   124b8:	ldr	r8, [pc, #128]	; 12540 <__assert_fail@plt+0x10d4>
   124bc:	ldr	fp, [pc, #128]	; 12544 <__assert_fail@plt+0x10d8>
   124c0:	mov	sl, r5
   124c4:	mov	r9, #1
   124c8:	b	124f4 <__assert_fail@plt+0x1088>
   124cc:	ldr	r3, [sp, #4]
   124d0:	strb	r3, [r6, #1]!
   124d4:	add	r5, r5, #1
   124d8:	ldr	r3, [sp]
   124dc:	ldrb	r3, [r4, r3]!
   124e0:	cmp	r3, #0
   124e4:	beq	1252c <__assert_fail@plt+0x10c0>
   124e8:	ldr	r3, [r7]
   124ec:	cmp	r3, r5
   124f0:	ble	1252c <__assert_fail@plt+0x10c0>
   124f4:	mov	r3, sp
   124f8:	add	r2, sp, #4
   124fc:	mov	r1, r8
   12500:	mov	r0, r4
   12504:	bl	113e8 <sscanf@plt>
   12508:	cmp	r0, #1
   1250c:	beq	124cc <__assert_fail@plt+0x1060>
   12510:	mov	r3, r4
   12514:	mov	r2, fp
   12518:	mov	r1, sl
   1251c:	mov	r0, r9
   12520:	bl	11268 <error@plt>
   12524:	b	124cc <__assert_fail@plt+0x1060>
   12528:	mov	r5, #0
   1252c:	str	r5, [r7]
   12530:	add	sp, sp, #12
   12534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12538:	mov	r5, #0
   1253c:	b	1252c <__assert_fail@plt+0x10c0>
   12540:	andeq	fp, r1, ip, lsl #7
   12544:	muleq	r1, r4, r3
   12548:	ldr	r3, [r0, #4]
   1254c:	ldr	r2, [r1, #4]
   12550:	sub	r3, r3, r2
   12554:	str	r3, [r0, #4]
   12558:	cmp	r3, #0
   1255c:	blt	12574 <__assert_fail@plt+0x1108>
   12560:	ldr	r3, [r0]
   12564:	ldr	r2, [r1]
   12568:	sub	r3, r3, r2
   1256c:	str	r3, [r0]
   12570:	bx	lr
   12574:	ldr	r2, [r0]
   12578:	sub	r2, r2, #1
   1257c:	str	r2, [r0]
   12580:	add	r3, r3, #999424	; 0xf4000
   12584:	add	r3, r3, #576	; 0x240
   12588:	str	r3, [r0, #4]
   1258c:	b	12560 <__assert_fail@plt+0x10f4>
   12590:	vcmpe.f64	d0, #0.0
   12594:	vmrs	APSR_nzcv, fpscr
   12598:	vnegmi.f64	d0, d0
   1259c:	bx	lr
   125a0:	vcmpe.f64	d0, #0.0
   125a4:	vmrs	APSR_nzcv, fpscr
   125a8:	bmi	125fc <__assert_fail@plt+0x1190>
   125ac:	vcmpe.f64	d0, d1
   125b0:	vmrs	APSR_nzcv, fpscr
   125b4:	bmi	12604 <__assert_fail@plt+0x1198>
   125b8:	vldr	d6, [pc, #80]	; 12610 <__assert_fail@plt+0x11a4>
   125bc:	vmul.f64	d6, d0, d6
   125c0:	vldr	d3, [pc, #72]	; 12610 <__assert_fail@plt+0x11a4>
   125c4:	vldr	d4, [pc, #76]	; 12618 <__assert_fail@plt+0x11ac>
   125c8:	vdiv.f64	d7, d0, d6
   125cc:	vadd.f64	d7, d7, d6
   125d0:	vmul.f64	d7, d7, d3
   125d4:	vsub.f64	d5, d7, d6
   125d8:	vcmpe.f64	d5, d4
   125dc:	vmrs	APSR_nzcv, fpscr
   125e0:	vnegmi.f64	d5, d5
   125e4:	vmov.f64	d6, d7
   125e8:	vcmpe.f64	d1, d5
   125ec:	vmrs	APSR_nzcv, fpscr
   125f0:	bmi	125c8 <__assert_fail@plt+0x115c>
   125f4:	vmov.f64	d0, d7
   125f8:	bx	lr
   125fc:	vldr	d7, [pc, #20]	; 12618 <__assert_fail@plt+0x11ac>
   12600:	b	125f4 <__assert_fail@plt+0x1188>
   12604:	vldr	d7, [pc, #12]	; 12618 <__assert_fail@plt+0x11ac>
   12608:	b	125f4 <__assert_fail@plt+0x1188>
   1260c:	nop			; (mov r0, r0)
   12610:	andeq	r0, r0, r0
   12614:	svccc	0x00e00000
	...
   12620:	mvn	r0, r0
   12624:	lsr	r0, r0, #31
   12628:	bx	lr
   1262c:	push	{r4, lr}
   12630:	mov	r4, r0
   12634:	bic	r3, r2, #-2147483648	; 0x80000000
   12638:	cmp	r2, #0
   1263c:	ldrge	r2, [pc, #12]	; 12650 <__assert_fail@plt+0x11e4>
   12640:	ldrlt	r2, [pc, #12]	; 12654 <__assert_fail@plt+0x11e8>
   12644:	bl	11334 <snprintf@plt>
   12648:	mov	r0, r4
   1264c:	pop	{r4, pc}
   12650:			; <UNDEFINED> instruction: 0x0001b3b0
   12654:			; <UNDEFINED> instruction: 0x0001b3b4
   12658:	push	{r4, lr}
   1265c:	mov	r4, r0
   12660:	ldr	r3, [r0, #80]	; 0x50
   12664:	cmp	r3, #0
   12668:	beq	12680 <__assert_fail@plt+0x1214>
   1266c:	ldr	r3, [r4, #76]	; 0x4c
   12670:	cmp	r3, #0
   12674:	beq	126a8 <__assert_fail@plt+0x123c>
   12678:	mov	r0, #0
   1267c:	pop	{r4, pc}
   12680:	cmp	r1, #0
   12684:	ldr	r0, [r0, #56]	; 0x38
   12688:	addne	r0, r0, #8
   1268c:	addeq	r0, r0, #80	; 0x50
   12690:	bl	1938c <argp_parse@@Base+0x17fc>
   12694:	str	r0, [r4, #80]	; 0x50
   12698:	cmp	r0, #0
   1269c:	bne	1266c <__assert_fail@plt+0x1200>
   126a0:	mvn	r0, #0
   126a4:	pop	{r4, pc}
   126a8:	ldr	r0, [r4, #72]	; 0x48
   126ac:	bl	1938c <argp_parse@@Base+0x17fc>
   126b0:	str	r0, [r4, #76]	; 0x4c
   126b4:	cmp	r0, #0
   126b8:	beq	126d0 <__assert_fail@plt+0x1264>
   126bc:	ldr	r2, [r4, #72]	; 0x48
   126c0:	mov	r1, #0
   126c4:	bl	11358 <memset@plt>
   126c8:	mov	r0, #0
   126cc:	pop	{r4, pc}
   126d0:	mvn	r0, #0
   126d4:	pop	{r4, pc}
   126d8:	push	{r4, r5, r6, r7, r8, lr}
   126dc:	mov	r8, r0
   126e0:	mov	r7, r1
   126e4:	mov	r4, r2
   126e8:	mov	r5, r3
   126ec:	ldrb	r1, [sp, #24]
   126f0:	bl	12658 <__assert_fail@plt+0x11ec>
   126f4:	subs	r6, r0, #0
   126f8:	bne	1272c <__assert_fail@plt+0x12c0>
   126fc:	add	r3, r4, r5
   12700:	ldr	r2, [r8, #56]	; 0x38
   12704:	cmp	r2, r3
   12708:	bcc	12734 <__assert_fail@plt+0x12c8>
   1270c:	ldr	r0, [r8, #80]	; 0x50
   12710:	add	r0, r0, #8
   12714:	mov	r2, r5
   12718:	mov	r1, r7
   1271c:	add	r0, r0, r4
   12720:	bl	111b4 <memcpy@plt>
   12724:	mov	r0, r6
   12728:	pop	{r4, r5, r6, r7, r8, pc}
   1272c:	mvn	r6, #0
   12730:	b	12724 <__assert_fail@plt+0x12b8>
   12734:	mvn	r6, #0
   12738:	b	12724 <__assert_fail@plt+0x12b8>
   1273c:	str	r1, [r0, #8]
   12740:	bx	lr
   12744:	push	{lr}		; (str lr, [sp, #-4]!)
   12748:	sub	sp, sp, #20
   1274c:	add	ip, sp, #16
   12750:	str	r2, [ip, #-4]!
   12754:	ldr	r0, [r0]
   12758:	str	r3, [sp]
   1275c:	mov	r3, ip
   12760:	mov	r2, r1
   12764:	mov	r1, #1
   12768:	bl	1113c <setsockopt@plt>
   1276c:	add	sp, sp, #20
   12770:	pop	{pc}		; (ldr pc, [sp], #4)
   12774:	str	r1, [r0, #20]
   12778:	bx	lr
   1277c:	push	{r4, lr}
   12780:	mov	r4, r0
   12784:	ldr	r0, [r0, #80]	; 0x50
   12788:	cmp	r0, #0
   1278c:	beq	1279c <__assert_fail@plt+0x1330>
   12790:	bl	18784 <argp_parse@@Base+0xbf4>
   12794:	mov	r3, #0
   12798:	str	r3, [r4, #80]	; 0x50
   1279c:	ldr	r0, [r4, #76]	; 0x4c
   127a0:	cmp	r0, #0
   127a4:	popeq	{r4, pc}
   127a8:	bl	18784 <argp_parse@@Base+0xbf4>
   127ac:	mov	r3, #0
   127b0:	str	r3, [r4, #76]	; 0x4c
   127b4:	pop	{r4, pc}
   127b8:	push	{r4, r5, lr}
   127bc:	sub	sp, sp, #12
   127c0:	mov	r5, r0
   127c4:	mov	r4, r1
   127c8:	mov	r1, #0
   127cc:	mov	r0, sp
   127d0:	bl	1125c <gettimeofday@plt>
   127d4:	cmn	r4, #1
   127d8:	moveq	r0, #0
   127dc:	beq	127fc <__assert_fail@plt+0x1390>
   127e0:	mov	r1, r5
   127e4:	mov	r0, sp
   127e8:	bl	12548 <__assert_fail@plt+0x10dc>
   127ec:	ldr	r0, [sp]
   127f0:	cmp	r4, r0
   127f4:	movgt	r0, #0
   127f8:	movle	r0, #1
   127fc:	add	sp, sp, #12
   12800:	pop	{r4, r5, pc}
   12804:	push	{r4, r5, r6, lr}
   12808:	sub	sp, sp, #320	; 0x140
   1280c:	mov	r4, r0
   12810:	mov	r5, r1
   12814:	mov	r3, #1
   12818:	str	r3, [sp, #8]
   1281c:	mov	r3, #0
   12820:	str	r3, [sp, #4]
   12824:	str	r3, [sp]
   12828:	mov	r3, #46	; 0x2e
   1282c:	add	r2, sp, #272	; 0x110
   12830:	bl	113ac <getnameinfo@plt>
   12834:	cmp	r0, #0
   12838:	beq	12888 <__assert_fail@plt+0x141c>
   1283c:	cmn	r0, #11
   12840:	beq	12874 <__assert_fail@plt+0x1408>
   12844:	bl	1119c <gai_strerror@plt>
   12848:	mov	r2, r0
   1284c:	ldr	r1, [pc, #216]	; 1292c <__assert_fail@plt+0x14c0>
   12850:	ldr	r3, [pc, #216]	; 12930 <__assert_fail@plt+0x14c4>
   12854:	ldr	r0, [r3]
   12858:	bl	1131c <fprintf@plt>
   1285c:	ldr	r0, [pc, #208]	; 12934 <__assert_fail@plt+0x14c8>
   12860:	bl	192f4 <argp_parse@@Base+0x1764>
   12864:	mov	r4, r0
   12868:	mov	r0, r4
   1286c:	add	sp, sp, #320	; 0x140
   12870:	pop	{r4, r5, r6, pc}
   12874:	bl	11328 <__errno_location@plt>
   12878:	ldr	r0, [r0]
   1287c:	bl	112a4 <strerror@plt>
   12880:	mov	r2, r0
   12884:	b	1284c <__assert_fail@plt+0x13e0>
   12888:	ldr	r3, [pc, #168]	; 12938 <__assert_fail@plt+0x14cc>
   1288c:	ldr	r3, [r3]
   12890:	tst	r3, #4
   12894:	bne	1290c <__assert_fail@plt+0x14a0>
   12898:	mov	r3, #40	; 0x28
   1289c:	str	r3, [sp, #8]
   128a0:	mov	r3, #0
   128a4:	str	r3, [sp, #4]
   128a8:	str	r3, [sp]
   128ac:	mov	r3, #256	; 0x100
   128b0:	add	r2, sp, #16
   128b4:	mov	r1, r5
   128b8:	mov	r0, r4
   128bc:	bl	113ac <getnameinfo@plt>
   128c0:	cmp	r0, #0
   128c4:	bne	1291c <__assert_fail@plt+0x14b0>
   128c8:	add	r6, sp, #272	; 0x110
   128cc:	mov	r0, r6
   128d0:	bl	11304 <strlen@plt>
   128d4:	mov	r5, r0
   128d8:	add	r0, sp, #16
   128dc:	bl	11304 <strlen@plt>
   128e0:	add	r5, r5, r0
   128e4:	add	r5, r5, #4
   128e8:	mov	r0, r5
   128ec:	bl	18d6c <argp_parse@@Base+0x11dc>
   128f0:	mov	r4, r0
   128f4:	str	r6, [sp]
   128f8:	add	r3, sp, #16
   128fc:	ldr	r2, [pc, #56]	; 1293c <__assert_fail@plt+0x14d0>
   12900:	mov	r1, r5
   12904:	bl	11334 <snprintf@plt>
   12908:	b	12868 <__assert_fail@plt+0x13fc>
   1290c:	add	r0, sp, #272	; 0x110
   12910:	bl	192f4 <argp_parse@@Base+0x1764>
   12914:	mov	r4, r0
   12918:	b	12868 <__assert_fail@plt+0x13fc>
   1291c:	add	r0, sp, #272	; 0x110
   12920:	bl	192f4 <argp_parse@@Base+0x1764>
   12924:	mov	r4, r0
   12928:	b	12868 <__assert_fail@plt+0x13fc>
   1292c:			; <UNDEFINED> instruction: 0x0001b3bc
   12930:	andeq	sp, r2, r8, lsr #12
   12934:	ldrdeq	fp, [r1], -r4
   12938:	andeq	sp, r2, r8, asr #13
   1293c:	ldrdeq	fp, [r1], -ip
   12940:	push	{r4, r5, r6, r7, lr}
   12944:	sub	sp, sp, #20
   12948:	str	r0, [sp, #12]
   1294c:	ldr	r3, [pc, #188]	; 12a10 <__assert_fail@plt+0x15a4>
   12950:	ldr	r3, [r3]
   12954:	tst	r3, #4
   12958:	bne	129d8 <__assert_fail@plt+0x156c>
   1295c:	mov	r2, #2
   12960:	mov	r1, #4
   12964:	add	r0, sp, #12
   12968:	bl	11208 <gethostbyaddr@plt>
   1296c:	subs	r6, r0, #0
   12970:	beq	129e8 <__assert_fail@plt+0x157c>
   12974:	ldr	r0, [sp, #12]
   12978:	bl	111e4 <inet_ntoa@plt>
   1297c:	mov	r7, r0
   12980:	bl	11304 <strlen@plt>
   12984:	mov	r4, r0
   12988:	ldr	r0, [r6]
   1298c:	cmp	r0, #0
   12990:	addeq	r4, r4, #1
   12994:	beq	129a4 <__assert_fail@plt+0x1538>
   12998:	bl	11304 <strlen@plt>
   1299c:	add	r4, r4, #5
   129a0:	add	r4, r4, r0
   129a4:	mov	r0, r4
   129a8:	bl	18d6c <argp_parse@@Base+0x11dc>
   129ac:	mov	r5, r0
   129b0:	ldr	r3, [r6]
   129b4:	cmp	r3, #0
   129b8:	beq	129fc <__assert_fail@plt+0x1590>
   129bc:	str	r7, [sp]
   129c0:	ldr	r2, [pc, #76]	; 12a14 <__assert_fail@plt+0x15a8>
   129c4:	mov	r1, r4
   129c8:	bl	11334 <snprintf@plt>
   129cc:	mov	r0, r5
   129d0:	add	sp, sp, #20
   129d4:	pop	{r4, r5, r6, r7, pc}
   129d8:	bl	111e4 <inet_ntoa@plt>
   129dc:	bl	192f4 <argp_parse@@Base+0x1764>
   129e0:	mov	r5, r0
   129e4:	b	129cc <__assert_fail@plt+0x1560>
   129e8:	ldr	r0, [sp, #12]
   129ec:	bl	111e4 <inet_ntoa@plt>
   129f0:	bl	192f4 <argp_parse@@Base+0x1764>
   129f4:	mov	r5, r0
   129f8:	b	129cc <__assert_fail@plt+0x1560>
   129fc:	mov	r3, r7
   12a00:	ldr	r2, [pc, #16]	; 12a18 <__assert_fail@plt+0x15ac>
   12a04:	mov	r1, r4
   12a08:	bl	11334 <snprintf@plt>
   12a0c:	b	129cc <__assert_fail@plt+0x1560>
   12a10:	andeq	sp, r2, r8, asr #13
   12a14:	ldrdeq	fp, [r1], -ip
   12a18:	andeq	sl, r1, ip, lsr #28
   12a1c:	andeq	r0, r0, r0
   12a20:	push	{r4, r5, r6, r7, lr}
   12a24:	vpush	{d8}
   12a28:	sub	sp, sp, #28
   12a2c:	bl	12248 <__assert_fail@plt+0xddc>
   12a30:	ldr	r3, [pc, #160]	; 12ad8 <__assert_fail@plt+0x166c>
   12a34:	ldr	r2, [r3]
   12a38:	ldr	r3, [r2, #116]	; 0x74
   12a3c:	cmp	r3, #0
   12a40:	beq	12a54 <__assert_fail@plt+0x15e8>
   12a44:	ldr	r1, [pc, #144]	; 12adc <__assert_fail@plt+0x1670>
   12a48:	ldr	r1, [r1]
   12a4c:	cmp	r1, #7
   12a50:	bhi	12a74 <__assert_fail@plt+0x1608>
   12a54:	ldr	r3, [pc, #124]	; 12ad8 <__assert_fail@plt+0x166c>
   12a58:	ldr	r3, [r3]
   12a5c:	ldr	r0, [r3, #116]	; 0x74
   12a60:	clz	r0, r0
   12a64:	lsr	r0, r0, #5
   12a68:	add	sp, sp, #28
   12a6c:	vpop	{d8}
   12a70:	pop	{r4, r5, r6, r7, pc}
   12a74:	ldr	r1, [r2, #68]	; 0x44
   12a78:	ldr	r2, [r2, #120]	; 0x78
   12a7c:	add	r3, r3, r2
   12a80:	vmov	s15, r3
   12a84:	vcvt.f64.u32	d7, s15
   12a88:	vldr	d6, [r1, #16]
   12a8c:	vdiv.f64	d8, d6, d7
   12a90:	ldrd	r4, [r1]
   12a94:	ldrd	r6, [r1, #8]
   12a98:	vldr	d6, [r1, #24]
   12a9c:	vdiv.f64	d0, d6, d7
   12aa0:	vldr	d1, [pc, #40]	; 12ad0 <__assert_fail@plt+0x1664>
   12aa4:	vmls.f64	d0, d8, d8
   12aa8:	bl	125a0 <__assert_fail@plt+0x1134>
   12aac:	vstr	d0, [sp, #16]
   12ab0:	strd	r6, [sp, #8]
   12ab4:	vstr	d8, [sp]
   12ab8:	mov	r2, r4
   12abc:	mov	r3, r5
   12ac0:	ldr	r0, [pc, #24]	; 12ae0 <__assert_fail@plt+0x1674>
   12ac4:	bl	11148 <printf@plt>
   12ac8:	b	12a54 <__assert_fail@plt+0x15e8>
   12acc:	nop			; (mov r0, r0)
   12ad0:	rscsle	sl, r1, #252, 18	; 0x3f0000
   12ad4:	svccc	0x0040624d
   12ad8:	ldrdeq	sp, [r2], -r0
   12adc:	andeq	sp, r2, r0, asr #2
   12ae0:	andeq	fp, r1, r4, ror #7
   12ae4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae8:	mov	r7, r0
   12aec:	add	fp, r0, #8
   12af0:	ldrb	r6, [r0, #8]
   12af4:	and	r6, r6, #15
   12af8:	lsl	r6, r6, #2
   12afc:	add	r4, r0, #28
   12b00:	ldr	r3, [pc, #512]	; 12d08 <__assert_fail@plt+0x189c>
   12b04:	ldr	r3, [r3]
   12b08:	tst	r3, #32
   12b0c:	bne	12c50 <__assert_fail@plt+0x17e4>
   12b10:	ldr	r0, [pc, #500]	; 12d0c <__assert_fail@plt+0x18a0>
   12b14:	bl	11280 <puts@plt>
   12b18:	ldrb	r1, [r7, #8]
   12b1c:	ldrb	r3, [r7, #9]
   12b20:	and	r2, r1, #15
   12b24:	lsr	r1, r1, #4
   12b28:	ldr	r0, [pc, #480]	; 12d10 <__assert_fail@plt+0x18a4>
   12b2c:	bl	11148 <printf@plt>
   12b30:	ldrh	r1, [r7, #10]
   12b34:	cmp	r1, #8192	; 0x2000
   12b38:	rev16hi	r1, r1
   12b3c:	uxthhi	r1, r1
   12b40:	ldrh	r2, [r7, #12]
   12b44:	rev16	r2, r2
   12b48:	uxth	r2, r2
   12b4c:	ldr	r0, [pc, #448]	; 12d14 <__assert_fail@plt+0x18a8>
   12b50:	bl	11148 <printf@plt>
   12b54:	ldrh	r1, [r7, #14]
   12b58:	rev16	r1, r1
   12b5c:	uxth	r1, r1
   12b60:	lsl	r2, r1, #19
   12b64:	lsr	r2, r2, #19
   12b68:	lsr	r1, r1, #13
   12b6c:	ldr	r0, [pc, #420]	; 12d18 <__assert_fail@plt+0x18ac>
   12b70:	bl	11148 <printf@plt>
   12b74:	ldrh	r3, [r7, #18]
   12b78:	rev16	r3, r3
   12b7c:	uxth	r3, r3
   12b80:	ldrb	r2, [r7, #17]
   12b84:	ldrb	r1, [r7, #16]
   12b88:	ldr	r0, [pc, #396]	; 12d1c <__assert_fail@plt+0x18b0>
   12b8c:	bl	11148 <printf@plt>
   12b90:	ldr	r0, [fp, #12]
   12b94:	bl	111e4 <inet_ntoa@plt>
   12b98:	ldr	r5, [pc, #384]	; 12d20 <__assert_fail@plt+0x18b4>
   12b9c:	mov	r1, r0
   12ba0:	mov	r0, r5
   12ba4:	bl	11148 <printf@plt>
   12ba8:	ldr	r0, [fp, #16]
   12bac:	bl	111e4 <inet_ntoa@plt>
   12bb0:	mov	r1, r0
   12bb4:	mov	r0, r5
   12bb8:	bl	11148 <printf@plt>
   12bbc:	cmp	r6, #20
   12bc0:	bls	12be4 <__assert_fail@plt+0x1778>
   12bc4:	sub	r6, r6, #20
   12bc8:	add	r6, r4, r6
   12bcc:	ldr	r5, [pc, #336]	; 12d24 <__assert_fail@plt+0x18b8>
   12bd0:	ldrb	r1, [r4], #1
   12bd4:	mov	r0, r5
   12bd8:	bl	11148 <printf@plt>
   12bdc:	cmp	r4, r6
   12be0:	bne	12bd0 <__assert_fail@plt+0x1764>
   12be4:	mov	r0, #10
   12be8:	bl	11364 <putchar@plt>
   12bec:	ldrb	r1, [r7, #8]
   12bf0:	and	r1, r1, #15
   12bf4:	lsl	r3, r1, #2
   12bf8:	add	r4, fp, r3
   12bfc:	ldrb	r2, [r7, #17]
   12c00:	cmp	r2, #6
   12c04:	beq	12c9c <__assert_fail@plt+0x1830>
   12c08:	cmp	r2, #17
   12c0c:	beq	12cc0 <__assert_fail@plt+0x1854>
   12c10:	cmp	r2, #1
   12c14:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c18:	ldrb	r5, [fp, r1, lsl #2]
   12c1c:	ldrh	r2, [r7, #10]
   12c20:	rev16	r2, r2
   12c24:	uxth	r2, r2
   12c28:	sub	r3, r2, r3
   12c2c:	ldrb	r2, [r4, #1]
   12c30:	mov	r1, r5
   12c34:	ldr	r0, [pc, #236]	; 12d28 <__assert_fail@plt+0x18bc>
   12c38:	bl	11148 <printf@plt>
   12c3c:	tst	r5, #247	; 0xf7
   12c40:	beq	12ce4 <__assert_fail@plt+0x1878>
   12c44:	mov	r0, #10
   12c48:	bl	11364 <putchar@plt>
   12c4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c50:	ldr	r0, [pc, #212]	; 12d2c <__assert_fail@plt+0x18c0>
   12c54:	bl	11148 <printf@plt>
   12c58:	add	r8, r7, #7
   12c5c:	mov	r5, #0
   12c60:	ldr	sl, [pc, #200]	; 12d30 <__assert_fail@plt+0x18c4>
   12c64:	ldr	r9, [pc, #200]	; 12d34 <__assert_fail@plt+0x18c8>
   12c68:	and	r2, r5, #1
   12c6c:	cmp	r2, #0
   12c70:	movne	r2, sl
   12c74:	moveq	r2, r9
   12c78:	ldrb	r1, [r8, #1]!
   12c7c:	ldr	r0, [pc, #180]	; 12d38 <__assert_fail@plt+0x18cc>
   12c80:	bl	11148 <printf@plt>
   12c84:	add	r5, r5, #1
   12c88:	cmp	r5, #20
   12c8c:	bne	12c68 <__assert_fail@plt+0x17fc>
   12c90:	mov	r0, #10
   12c94:	bl	11364 <putchar@plt>
   12c98:	b	12b10 <__assert_fail@plt+0x16a4>
   12c9c:	ldrb	r0, [r4, #2]
   12ca0:	ldrb	r2, [r4, #3]
   12ca4:	ldrb	r1, [fp, r1, lsl #2]
   12ca8:	ldrb	r3, [r4, #1]
   12cac:	add	r2, r2, r0, lsl #8
   12cb0:	add	r1, r3, r1, lsl #8
   12cb4:	ldr	r0, [pc, #128]	; 12d3c <__assert_fail@plt+0x18d0>
   12cb8:	bl	11148 <printf@plt>
   12cbc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc0:	ldrb	r0, [r4, #2]
   12cc4:	ldrb	r2, [r4, #3]
   12cc8:	ldrb	r1, [fp, r1, lsl #2]
   12ccc:	ldrb	r3, [r4, #1]
   12cd0:	add	r2, r2, r0, lsl #8
   12cd4:	add	r1, r3, r1, lsl #8
   12cd8:	ldr	r0, [pc, #96]	; 12d40 <__assert_fail@plt+0x18d4>
   12cdc:	bl	11148 <printf@plt>
   12ce0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce4:	ldrb	r0, [r4, #6]
   12ce8:	ldrb	r2, [r4, #7]
   12cec:	ldrb	r1, [r4, #4]
   12cf0:	ldrb	r3, [r4, #5]
   12cf4:	add	r2, r2, r0, lsl #8
   12cf8:	add	r1, r3, r1, lsl #8
   12cfc:	ldr	r0, [pc, #64]	; 12d44 <__assert_fail@plt+0x18d8>
   12d00:	bl	11148 <printf@plt>
   12d04:	b	12c44 <__assert_fail@plt+0x17d8>
   12d08:	andeq	sp, r2, r8, asr #13
   12d0c:	andeq	fp, r1, r4, lsr r4
   12d10:	andeq	fp, r1, r0, ror r4
   12d14:	andeq	fp, r1, r0, lsl #9
   12d18:	andeq	fp, r1, ip, lsl #9
   12d1c:	muleq	r1, r8, r4
   12d20:	andeq	fp, r1, ip, lsr #9
   12d24:			; <UNDEFINED> instruction: 0x0001b4b4
   12d28:	andeq	fp, r1, r4, lsl r5
   12d2c:	andeq	fp, r1, ip, lsl r4
   12d30:	andeq	sl, r1, ip, lsl #29
   12d34:	andeq	ip, r1, ip, asr r6
   12d38:	andeq	fp, r1, ip, lsr #8
   12d3c:			; <UNDEFINED> instruction: 0x0001b4bc
   12d40:	andeq	fp, r1, r8, ror #9
   12d44:	andeq	fp, r1, r4, lsr r5
   12d48:	push	{r4, r5, r6, lr}
   12d4c:	mov	r4, r0
   12d50:	mov	r5, r1
   12d54:	ldr	r0, [r0, #4]
   12d58:	bl	111e4 <inet_ntoa@plt>
   12d5c:	mov	r1, r0
   12d60:	ldr	r0, [pc, #16]	; 12d78 <__assert_fail@plt+0x190c>
   12d64:	bl	11148 <printf@plt>
   12d68:	mov	r1, r5
   12d6c:	mov	r0, r4
   12d70:	bl	12ae4 <__assert_fail@plt+0x1678>
   12d74:	pop	{r4, r5, r6, pc}
   12d78:	andeq	fp, r1, ip, asr #10
   12d7c:	push	{r4, lr}
   12d80:	mov	r4, r0
   12d84:	ldrb	ip, [r0]
   12d88:	ldrb	r2, [r0, #1]
   12d8c:	ldr	r3, [pc, #92]	; 12df0 <__assert_fail@plt+0x1984>
   12d90:	add	lr, r3, #240	; 0xf0
   12d94:	b	12da4 <__assert_fail@plt+0x1938>
   12d98:	add	r3, r3, #12
   12d9c:	cmp	r3, lr
   12da0:	beq	12dc8 <__assert_fail@plt+0x195c>
   12da4:	ldr	r0, [r3]
   12da8:	cmp	ip, r0
   12dac:	bne	12d98 <__assert_fail@plt+0x192c>
   12db0:	ldr	r0, [r3, #4]
   12db4:	cmp	r2, r0
   12db8:	bne	12d98 <__assert_fail@plt+0x192c>
   12dbc:	ldr	r0, [r3, #8]
   12dc0:	bl	11280 <puts@plt>
   12dc4:	b	12dd0 <__assert_fail@plt+0x1964>
   12dc8:	ldr	r0, [pc, #36]	; 12df4 <__assert_fail@plt+0x1988>
   12dcc:	bl	11148 <printf@plt>
   12dd0:	ldr	r3, [pc, #32]	; 12df8 <__assert_fail@plt+0x198c>
   12dd4:	ldr	r3, [r3]
   12dd8:	tst	r3, #32
   12ddc:	popeq	{r4, pc}
   12de0:	mov	r1, #0
   12de4:	mov	r0, r4
   12de8:	bl	12ae4 <__assert_fail@plt+0x1678>
   12dec:	pop	{r4, pc}
   12df0:	andeq	sp, r2, r4, lsl #8
   12df4:	andeq	fp, r1, r0, ror r5
   12df8:	andeq	sp, r2, r8, asr #13
   12dfc:	push	{r4, r5, r6, lr}
   12e00:	sub	sp, sp, #80	; 0x50
   12e04:	mov	r5, r0
   12e08:	ldr	r3, [pc, #604]	; 1306c <__assert_fail@plt+0x1c00>
   12e0c:	ldr	r3, [r3]
   12e10:	and	r3, r3, #3
   12e14:	cmp	r3, #3
   12e18:	beq	12f80 <__assert_fail@plt+0x1b14>
   12e1c:	mov	r2, #32
   12e20:	mov	r1, #0
   12e24:	add	r0, sp, #8
   12e28:	bl	11358 <memset@plt>
   12e2c:	ldr	r2, [pc, #572]	; 13070 <__assert_fail@plt+0x1c04>
   12e30:	ldr	r3, [pc, #572]	; 13074 <__assert_fail@plt+0x1c08>
   12e34:	strd	r2, [sp, #8]
   12e38:	ldr	r4, [pc, #568]	; 13078 <__assert_fail@plt+0x1c0c>
   12e3c:	mov	r1, #8
   12e40:	ldr	r0, [r4]
   12e44:	bl	13cf0 <__assert_fail@plt+0x2884>
   12e48:	ldr	r3, [pc, #556]	; 1307c <__assert_fail@plt+0x1c10>
   12e4c:	ldr	r1, [r3]
   12e50:	ldr	r0, [r4]
   12e54:	bl	140fc <__assert_fail@plt+0x2c90>
   12e58:	add	r2, sp, #8
   12e5c:	ldr	r1, [pc, #540]	; 13080 <__assert_fail@plt+0x1c14>
   12e60:	ldr	r0, [r4]
   12e64:	bl	140f0 <__assert_fail@plt+0x2c84>
   12e68:	mov	r1, r5
   12e6c:	ldr	r0, [r4]
   12e70:	bl	14104 <__assert_fail@plt+0x2c98>
   12e74:	cmp	r0, #0
   12e78:	bne	12f94 <__assert_fail@plt+0x1b28>
   12e7c:	ldr	r3, [pc, #488]	; 1306c <__assert_fail@plt+0x1c00>
   12e80:	ldr	r3, [r3]
   12e84:	tst	r3, #16
   12e88:	bne	12fa8 <__assert_fail@plt+0x1b3c>
   12e8c:	tst	r3, #64	; 0x40
   12e90:	beq	12f10 <__assert_fail@plt+0x1aa4>
   12e94:	ldr	r3, [pc, #488]	; 13084 <__assert_fail@plt+0x1c18>
   12e98:	ldr	r3, [r3]
   12e9c:	tst	r3, #4
   12ea0:	bne	13044 <__assert_fail@plt+0x1bd8>
   12ea4:	ands	r4, r3, #2
   12ea8:	movne	r5, #1
   12eac:	moveq	r5, #0
   12eb0:	mov	r6, #40	; 0x28
   12eb4:	mov	r2, r6
   12eb8:	mov	r1, #0
   12ebc:	add	r0, sp, r6
   12ec0:	bl	11358 <memset@plt>
   12ec4:	mov	r3, #68	; 0x44
   12ec8:	strb	r3, [sp, #40]	; 0x28
   12ecc:	strb	r6, [sp, #41]	; 0x29
   12ed0:	cmp	r4, #0
   12ed4:	bne	13060 <__assert_fail@plt+0x1bf4>
   12ed8:	mov	r3, #5
   12edc:	strb	r3, [sp, #42]	; 0x2a
   12ee0:	strb	r5, [sp, #43]	; 0x2b
   12ee4:	ldr	r3, [pc, #396]	; 13078 <__assert_fail@plt+0x1c0c>
   12ee8:	ldr	r3, [r3]
   12eec:	ldr	r0, [r3]
   12ef0:	ldrb	r3, [sp, #41]	; 0x29
   12ef4:	str	r3, [sp]
   12ef8:	add	r3, sp, #40	; 0x28
   12efc:	mov	r2, #4
   12f00:	mov	r1, #0
   12f04:	bl	1113c <setsockopt@plt>
   12f08:	cmp	r0, #0
   12f0c:	blt	13010 <__assert_fail@plt+0x1ba4>
   12f10:	ldr	r3, [pc, #352]	; 13078 <__assert_fail@plt+0x1c0c>
   12f14:	ldr	r3, [r3]
   12f18:	ldr	r4, [r3, #52]	; 0x34
   12f1c:	ldr	r0, [r3, #28]
   12f20:	bl	111e4 <inet_ntoa@plt>
   12f24:	ldr	r3, [pc, #336]	; 1307c <__assert_fail@plt+0x1c10>
   12f28:	ldr	r3, [r3]
   12f2c:	mov	r2, r0
   12f30:	mov	r1, r4
   12f34:	ldr	r0, [pc, #332]	; 13088 <__assert_fail@plt+0x1c1c>
   12f38:	bl	11148 <printf@plt>
   12f3c:	ldr	r3, [pc, #296]	; 1306c <__assert_fail@plt+0x1c00>
   12f40:	ldr	r3, [r3]
   12f44:	tst	r3, #32
   12f48:	bne	13028 <__assert_fail@plt+0x1bbc>
   12f4c:	mov	r0, #10
   12f50:	bl	11364 <putchar@plt>
   12f54:	ldr	r4, [pc, #284]	; 13078 <__assert_fail@plt+0x1c0c>
   12f58:	ldr	r1, [pc, #300]	; 1308c <__assert_fail@plt+0x1c20>
   12f5c:	ldr	r0, [r4]
   12f60:	bl	11ee4 <__assert_fail@plt+0xa78>
   12f64:	mov	r5, r0
   12f68:	ldr	r3, [r4]
   12f6c:	ldr	r0, [r3, #52]	; 0x34
   12f70:	bl	18784 <argp_parse@@Base+0xbf4>
   12f74:	mov	r0, r5
   12f78:	add	sp, sp, #80	; 0x50
   12f7c:	pop	{r4, r5, r6, pc}
   12f80:	ldr	r2, [pc, #264]	; 13090 <__assert_fail@plt+0x1c24>
   12f84:	mov	r1, #0
   12f88:	mov	r0, #1
   12f8c:	bl	11268 <error@plt>
   12f90:	b	12e1c <__assert_fail@plt+0x19b0>
   12f94:	ldr	r2, [pc, #248]	; 13094 <__assert_fail@plt+0x1c28>
   12f98:	mov	r1, #0
   12f9c:	mov	r0, #1
   12fa0:	bl	11268 <error@plt>
   12fa4:	b	12e7c <__assert_fail@plt+0x1a10>
   12fa8:	mov	r4, #40	; 0x28
   12fac:	mov	r2, r4
   12fb0:	mov	r1, #0
   12fb4:	add	r0, sp, r4
   12fb8:	bl	11358 <memset@plt>
   12fbc:	mov	r3, #7
   12fc0:	strb	r3, [sp, #40]	; 0x28
   12fc4:	mov	r3, #39	; 0x27
   12fc8:	strb	r3, [sp, #41]	; 0x29
   12fcc:	mov	r2, #4
   12fd0:	strb	r2, [sp, #42]	; 0x2a
   12fd4:	ldr	r3, [pc, #156]	; 13078 <__assert_fail@plt+0x1c0c>
   12fd8:	ldr	r3, [r3]
   12fdc:	ldr	r0, [r3]
   12fe0:	str	r4, [sp]
   12fe4:	add	r3, sp, r4
   12fe8:	mov	r1, #0
   12fec:	bl	1113c <setsockopt@plt>
   12ff0:	cmp	r0, #0
   12ff4:	bge	12f10 <__assert_fail@plt+0x1aa4>
   12ff8:	bl	11328 <__errno_location@plt>
   12ffc:	ldr	r2, [pc, #148]	; 13098 <__assert_fail@plt+0x1c2c>
   13000:	ldr	r1, [r0]
   13004:	mov	r0, #1
   13008:	bl	11268 <error@plt>
   1300c:	b	12f10 <__assert_fail@plt+0x1aa4>
   13010:	bl	11328 <__errno_location@plt>
   13014:	ldr	r2, [pc, #124]	; 13098 <__assert_fail@plt+0x1c2c>
   13018:	ldr	r1, [r0]
   1301c:	mov	r0, #1
   13020:	bl	11268 <error@plt>
   13024:	b	12f10 <__assert_fail@plt+0x1aa4>
   13028:	ldr	r3, [pc, #72]	; 13078 <__assert_fail@plt+0x1c0c>
   1302c:	ldr	r3, [r3]
   13030:	ldr	r1, [r3, #60]	; 0x3c
   13034:	mov	r2, r1
   13038:	ldr	r0, [pc, #92]	; 1309c <__assert_fail@plt+0x1c30>
   1303c:	bl	11148 <printf@plt>
   13040:	b	12f4c <__assert_fail@plt+0x1ae0>
   13044:	mov	r2, #40	; 0x28
   13048:	mov	r1, #0
   1304c:	add	r0, sp, r2
   13050:	bl	11358 <memset@plt>
   13054:	mov	r3, #68	; 0x44
   13058:	strb	r3, [sp, #40]	; 0x28
   1305c:	mov	r5, #3
   13060:	mov	r3, #36	; 0x24
   13064:	strb	r3, [sp, #41]	; 0x29
   13068:	b	12ed8 <__assert_fail@plt+0x1a6c>
   1306c:	andeq	sp, r2, r8, asr #13
   13070:			; <UNDEFINED> instruction: 0xff800000
   13074:	bicmi	ip, sp, r4, ror #26
   13078:	ldrdeq	sp, [r2], -r0
   1307c:	andeq	sp, r2, r0, asr #2
   13080:	andeq	r3, r1, r4, ror #14
   13084:	ldrdeq	sp, [r2], -r4
   13088:	andeq	fp, r1, r4, asr #11
   1308c:	andeq	r2, r1, r0, lsr #20
   13090:	andeq	fp, r1, r8, lsl #11
   13094:	andeq	fp, r1, r8, lsr #11
   13098:			; <UNDEFINED> instruction: 0x0001b5b8
   1309c:	andeq	fp, r1, r4, ror #11
   130a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a4:	vpush	{d8}
   130a8:	sub	sp, sp, #44	; 0x2c
   130ac:	mov	r6, r0
   130b0:	mov	r5, r1
   130b4:	mov	r7, r3
   130b8:	mov	r1, #0
   130bc:	add	r0, sp, #32
   130c0:	bl	1125c <gettimeofday@plt>
   130c4:	ldr	r3, [sp, #88]	; 0x58
   130c8:	ldrb	r3, [r3]
   130cc:	and	r3, r3, #15
   130d0:	lsl	sl, r3, #2
   130d4:	ldr	r4, [sp, #96]	; 0x60
   130d8:	sub	r4, r4, sl
   130dc:	sub	r3, r4, #8
   130e0:	cmp	r3, #7
   130e4:	bhi	13170 <__assert_fail@plt+0x1d04>
   130e8:	vldr	d8, [pc, #952]	; 134a8 <__assert_fail@plt+0x203c>
   130ec:	mov	r5, #0
   130f0:	ldr	r3, [pc, #1008]	; 134e8 <__assert_fail@plt+0x207c>
   130f4:	ldr	r3, [r3]
   130f8:	tst	r3, #8
   130fc:	bne	13668 <__assert_fail@plt+0x21fc>
   13100:	tst	r3, #1
   13104:	bne	131ec <__assert_fail@plt+0x1d80>
   13108:	ldr	r0, [r7, #4]
   1310c:	bl	111e4 <inet_ntoa@plt>
   13110:	ldr	r3, [sp, #92]	; 0x5c
   13114:	ldrh	r3, [r3, #6]
   13118:	rev16	r3, r3
   1311c:	uxth	r3, r3
   13120:	mov	r2, r0
   13124:	mov	r1, r4
   13128:	ldr	r0, [pc, #904]	; 134b8 <__assert_fail@plt+0x204c>
   1312c:	bl	11148 <printf@plt>
   13130:	ldr	r3, [sp, #88]	; 0x58
   13134:	ldrb	r1, [r3, #8]
   13138:	ldr	r0, [pc, #892]	; 134bc <__assert_fail@plt+0x2050>
   1313c:	bl	11148 <printf@plt>
   13140:	cmp	r5, #0
   13144:	bne	13200 <__assert_fail@plt+0x1d94>
   13148:	cmp	r6, #0
   1314c:	bne	13210 <__assert_fail@plt+0x1da4>
   13150:	ldr	r3, [sp, #88]	; 0x58
   13154:	add	fp, r3, #20
   13158:	cmp	sl, #20
   1315c:	ble	13660 <__assert_fail@plt+0x21f4>
   13160:	ldr	r3, [pc, #856]	; 134c0 <__assert_fail@plt+0x2054>
   13164:	add	r3, r3, #4
   13168:	str	r3, [sp, #12]
   1316c:	b	13624 <__assert_fail@plt+0x21b8>
   13170:	ldr	r2, [sp, #92]	; 0x5c
   13174:	add	r3, sp, #16
   13178:	ldr	r0, [r2, #8]!
   1317c:	ldr	r1, [r2, #4]
   13180:	stmia	r3!, {r0, r1}
   13184:	add	r1, sp, #16
   13188:	add	r0, sp, #32
   1318c:	bl	12548 <__assert_fail@plt+0x10dc>
   13190:	vldr	s15, [sp, #32]
   13194:	vcvt.f64.s32	d7, s15
   13198:	vldr	d5, [pc, #784]	; 134b0 <__assert_fail@plt+0x2044>
   1319c:	vldr	s13, [sp, #36]	; 0x24
   131a0:	vcvt.f64.s32	d6, s13
   131a4:	vdiv.f64	d8, d6, d5
   131a8:	vmla.f64	d8, d7, d5
   131ac:	vldr	d7, [r5, #16]
   131b0:	vadd.f64	d7, d7, d8
   131b4:	vstr	d7, [r5, #16]
   131b8:	vldr	d7, [r5, #24]
   131bc:	vmla.f64	d7, d8, d8
   131c0:	vstr	d7, [r5, #24]
   131c4:	vldr	d7, [r5]
   131c8:	vcmpe.f64	d8, d7
   131cc:	vmrs	APSR_nzcv, fpscr
   131d0:	vstrmi	d8, [r5]
   131d4:	vldr	d7, [r5, #8]
   131d8:	vcmpe.f64	d8, d7
   131dc:	vmrs	APSR_nzcv, fpscr
   131e0:	vstrgt	d8, [r5, #8]
   131e4:	mov	r5, #1
   131e8:	b	130f0 <__assert_fail@plt+0x1c84>
   131ec:	ldr	r3, [pc, #760]	; 134ec <__assert_fail@plt+0x2080>
   131f0:	ldr	r1, [r3]
   131f4:	mov	r0, #8
   131f8:	bl	113f4 <putc@plt>
   131fc:	b	13668 <__assert_fail@plt+0x21fc>
   13200:	vmov	r2, r3, d8
   13204:	ldr	r0, [pc, #696]	; 134c4 <__assert_fail@plt+0x2058>
   13208:	bl	11148 <printf@plt>
   1320c:	b	13148 <__assert_fail@plt+0x1cdc>
   13210:	ldr	r0, [pc, #688]	; 134c8 <__assert_fail@plt+0x205c>
   13214:	bl	11148 <printf@plt>
   13218:	b	13150 <__assert_fail@plt+0x1ce4>
   1321c:	cmp	r1, #131	; 0x83
   13220:	beq	1324c <__assert_fail@plt+0x1de0>
   13224:	cmp	r1, #137	; 0x89
   13228:	beq	1324c <__assert_fail@plt+0x1de0>
   1322c:	cmp	r1, #68	; 0x44
   13230:	bne	1360c <__assert_fail@plt+0x21a0>
   13234:	ldrb	r7, [fp, #1]
   13238:	cmp	r7, #8
   1323c:	bgt	13474 <__assert_fail@plt+0x2008>
   13240:	add	fp, fp, #2
   13244:	sub	sl, sl, #2
   13248:	b	13614 <__assert_fail@plt+0x21a8>
   1324c:	cmp	r1, #131	; 0x83
   13250:	moveq	r1, #76	; 0x4c
   13254:	movne	r1, #83	; 0x53
   13258:	ldr	r0, [pc, #620]	; 134cc <__assert_fail@plt+0x2060>
   1325c:	bl	11148 <printf@plt>
   13260:	sub	r3, sl, #2
   13264:	ldrb	r6, [fp, #1]
   13268:	mov	r5, r6
   1326c:	add	fp, fp, #2
   13270:	cmp	r6, #4
   13274:	movle	sl, r3
   13278:	ble	13614 <__assert_fail@plt+0x21a8>
   1327c:	mov	r4, fp
   13280:	ldr	r8, [pc, #612]	; 134ec <__assert_fail@plt+0x2080>
   13284:	mov	r7, #10
   13288:	b	132c4 <__assert_fail@plt+0x1e58>
   1328c:	rev	r0, r0
   13290:	bl	12940 <__assert_fail@plt+0x14d4>
   13294:	mov	r9, r0
   13298:	mov	r1, r0
   1329c:	ldr	r0, [pc, #588]	; 134f0 <__assert_fail@plt+0x2084>
   132a0:	bl	11148 <printf@plt>
   132a4:	mov	r0, r9
   132a8:	bl	18784 <argp_parse@@Base+0xbf4>
   132ac:	sub	r5, r5, #4
   132b0:	cmp	r5, #4
   132b4:	ble	132f0 <__assert_fail@plt+0x1e84>
   132b8:	ldr	r1, [r8]
   132bc:	mov	r0, r7
   132c0:	bl	113f4 <putc@plt>
   132c4:	ldrb	r3, [r4, #1]
   132c8:	ldrb	r0, [r4, #2]
   132cc:	add	r3, r0, r3, lsl #8
   132d0:	ldrb	r0, [r4, #3]
   132d4:	add	r0, r0, r3, lsl #8
   132d8:	ldrb	r3, [r4, #4]!
   132dc:	adds	r0, r3, r0, lsl #8
   132e0:	bne	1328c <__assert_fail@plt+0x1e20>
   132e4:	ldr	r0, [pc, #484]	; 134d0 <__assert_fail@plt+0x2064>
   132e8:	bl	11148 <printf@plt>
   132ec:	b	132ac <__assert_fail@plt+0x1e40>
   132f0:	sub	r6, r6, #5
   132f4:	bic	r3, r6, #3
   132f8:	add	r3, r3, #4
   132fc:	add	fp, fp, r3
   13300:	sub	sl, sl, #6
   13304:	bic	r6, r6, #3
   13308:	sub	sl, sl, r6
   1330c:	b	13614 <__assert_fail@plt+0x21a8>
   13310:	add	r6, fp, #2
   13314:	ldrb	r3, [fp, #2]
   13318:	sub	r7, sl, #2
   1331c:	ldrb	r4, [fp, #1]
   13320:	cmp	r4, r3
   13324:	movge	r4, r3
   13328:	sub	r5, r4, #4
   1332c:	cmp	r5, #0
   13330:	ble	13654 <__assert_fail@plt+0x21e8>
   13334:	ldr	r3, [pc, #388]	; 134c0 <__assert_fail@plt+0x2054>
   13338:	ldr	r3, [r3]
   1333c:	cmp	r5, r3
   13340:	beq	13388 <__assert_fail@plt+0x1f1c>
   13344:	cmp	r5, #39	; 0x27
   13348:	ble	133e0 <__assert_fail@plt+0x1f74>
   1334c:	mov	r3, #0
   13350:	ldr	r2, [pc, #360]	; 134c0 <__assert_fail@plt+0x2054>
   13354:	str	r3, [r2]
   13358:	ldr	r0, [pc, #372]	; 134d4 <__assert_fail@plt+0x2068>
   1335c:	bl	11148 <printf@plt>
   13360:	sub	r5, sl, #42	; 0x2a
   13364:	sub	sl, sl, #6
   13368:	sub	r3, r4, #5
   1336c:	bic	r3, r3, #3
   13370:	sub	r4, sl, r3
   13374:	mov	fp, r6
   13378:	mov	sl, r7
   1337c:	ldr	r7, [pc, #360]	; 134ec <__assert_fail@plt+0x2080>
   13380:	mov	r6, #10
   13384:	b	1343c <__assert_fail@plt+0x1fd0>
   13388:	ldr	r3, [sp, #88]	; 0x58
   1338c:	add	r3, r3, #22
   13390:	cmp	r6, r3
   13394:	bne	13344 <__assert_fail@plt+0x1ed8>
   13398:	mov	r2, r5
   1339c:	ldr	r1, [sp, #12]
   133a0:	mov	r0, r6
   133a4:	bl	111d8 <memcmp@plt>
   133a8:	cmp	r0, #0
   133ac:	bne	13344 <__assert_fail@plt+0x1ed8>
   133b0:	ldr	r3, [pc, #304]	; 134e8 <__assert_fail@plt+0x207c>
   133b4:	ldr	r3, [r3]
   133b8:	tst	r3, #1
   133bc:	bne	13344 <__assert_fail@plt+0x1ed8>
   133c0:	ldr	r0, [pc, #272]	; 134d8 <__assert_fail@plt+0x206c>
   133c4:	bl	11148 <printf@plt>
   133c8:	subs	r3, r4, #1
   133cc:	addmi	r3, r4, #2
   133d0:	bic	fp, r3, #3
   133d4:	sub	sl, r7, fp
   133d8:	add	fp, r6, fp
   133dc:	b	13614 <__assert_fail@plt+0x21a8>
   133e0:	ldr	r3, [pc, #216]	; 134c0 <__assert_fail@plt+0x2054>
   133e4:	str	r5, [r3]
   133e8:	mov	r2, r5
   133ec:	mov	r1, r6
   133f0:	ldr	r0, [sp, #12]
   133f4:	bl	11178 <memmove@plt>
   133f8:	b	13358 <__assert_fail@plt+0x1eec>
   133fc:	rev	r0, r0
   13400:	bl	12940 <__assert_fail@plt+0x14d4>
   13404:	mov	r8, r0
   13408:	mov	r1, r0
   1340c:	ldr	r0, [pc, #220]	; 134f0 <__assert_fail@plt+0x2084>
   13410:	bl	11148 <printf@plt>
   13414:	mov	r0, r8
   13418:	bl	18784 <argp_parse@@Base+0xbf4>
   1341c:	sub	sl, sl, #4
   13420:	cmp	sl, r4
   13424:	beq	13614 <__assert_fail@plt+0x21a8>
   13428:	cmp	sl, r5
   1342c:	beq	13468 <__assert_fail@plt+0x1ffc>
   13430:	ldr	r1, [r7]
   13434:	mov	r0, r6
   13438:	bl	113f4 <putc@plt>
   1343c:	ldrb	r3, [fp, #1]
   13440:	ldrb	r0, [fp, #2]
   13444:	add	r3, r0, r3, lsl #8
   13448:	ldrb	r0, [fp, #3]
   1344c:	add	r0, r0, r3, lsl #8
   13450:	ldrb	r3, [fp, #4]!
   13454:	adds	r0, r3, r0, lsl #8
   13458:	bne	133fc <__assert_fail@plt+0x1f90>
   1345c:	ldr	r0, [pc, #108]	; 134d0 <__assert_fail@plt+0x2064>
   13460:	bl	11148 <printf@plt>
   13464:	b	1341c <__assert_fail@plt+0x1fb0>
   13468:	ldr	r0, [pc, #108]	; 134dc <__assert_fail@plt+0x2070>
   1346c:	bl	11148 <printf@plt>
   13470:	b	13614 <__assert_fail@plt+0x21a8>
   13474:	ldrb	r8, [fp, #2]
   13478:	ldrb	r3, [fp, #3]
   1347c:	str	r3, [sp, #8]
   13480:	ldr	r0, [pc, #88]	; 134e0 <__assert_fail@plt+0x2074>
   13484:	bl	11148 <printf@plt>
   13488:	sub	r9, sl, #8
   1348c:	add	r6, fp, #8
   13490:	add	r5, fp, #4
   13494:	mov	r4, #9
   13498:	ldr	r3, [sp, #8]
   1349c:	and	r3, r3, #15
   134a0:	mov	fp, r3
   134a4:	b	13574 <__assert_fail@plt+0x2108>
	...
   134b4:	addmi	r4, pc, r0
   134b8:	strdeq	fp, [r1], -r8
   134bc:	andeq	fp, r1, r8, lsl r6
   134c0:	andeq	sp, r2, r8, asr r6
   134c4:	andeq	fp, r1, r0, lsr #12
   134c8:	andeq	fp, r1, r0, lsr r6
   134cc:	andeq	fp, r1, r8, lsr r6
   134d0:	andeq	fp, r1, r4, asr #12
   134d4:	andeq	fp, r1, r4, ror #12
   134d8:	andeq	fp, r1, r4, asr r6
   134dc:	andeq	fp, r1, ip, ror #12
   134e0:	andeq	fp, r1, r0, lsl #13
   134e4:	andeq	fp, r1, r8, lsl #13
   134e8:	andeq	sp, r2, r8, asr #13
   134ec:	andeq	sp, r2, ip, lsr #12
   134f0:	andeq	fp, r1, r0, asr r6
   134f4:	muleq	r1, r0, r6
   134f8:	muleq	r1, ip, r6
   134fc:			; <UNDEFINED> instruction: 0x0001b6bc
   13500:			; <UNDEFINED> instruction: 0x0001b6b4
   13504:	ldr	r2, [r5]
   13508:	rev	r2, r2
   1350c:	mov	r1, #16
   13510:	add	r0, sp, r1
   13514:	bl	1262c <__assert_fail@plt+0x11c0>
   13518:	mov	r1, r0
   1351c:	ldr	r0, [pc, #-64]	; 134e4 <__assert_fail@plt+0x2078>
   13520:	bl	11148 <printf@plt>
   13524:	ldr	r3, [pc, #-68]	; 134e8 <__assert_fail@plt+0x207c>
   13528:	ldr	r3, [r3]
   1352c:	tst	r3, #32
   13530:	bne	135d4 <__assert_fail@plt+0x2168>
   13534:	str	r9, [sp]
   13538:	str	r6, [sp, #4]
   1353c:	mov	sl, r4
   13540:	ldr	r3, [pc, #-92]	; 134ec <__assert_fail@plt+0x2080>
   13544:	ldr	r1, [r3]
   13548:	mov	r0, #10
   1354c:	bl	113f4 <putc@plt>
   13550:	sub	r9, r9, #4
   13554:	add	r6, r6, #4
   13558:	add	r5, r5, #4
   1355c:	add	r4, r4, #4
   13560:	cmp	r7, r8
   13564:	movlt	r3, r7
   13568:	movge	r3, r8
   1356c:	cmp	r3, sl
   13570:	ble	135e8 <__assert_fail@plt+0x217c>
   13574:	sub	r3, r4, #4
   13578:	cmp	fp, #0
   1357c:	beq	13504 <__assert_fail@plt+0x2098>
   13580:	sub	r2, r4, #1
   13584:	cmp	r3, #0
   13588:	movlt	r3, r2
   1358c:	lsr	r2, r3, #31
   13590:	add	r3, r2, r3, asr #2
   13594:	and	r3, r3, #1
   13598:	sub	r3, r3, r2
   1359c:	cmp	r3, #1
   135a0:	bne	13504 <__assert_fail@plt+0x2098>
   135a4:	ldr	r0, [r5]
   135a8:	bl	12940 <__assert_fail@plt+0x14d4>
   135ac:	mov	sl, r0
   135b0:	mov	r1, r0
   135b4:	ldr	r0, [pc, #-204]	; 134f0 <__assert_fail@plt+0x2084>
   135b8:	bl	11148 <printf@plt>
   135bc:	mov	r0, sl
   135c0:	bl	18784 <argp_parse@@Base+0xbf4>
   135c4:	str	r9, [sp]
   135c8:	str	r6, [sp, #4]
   135cc:	mov	sl, r4
   135d0:	b	13550 <__assert_fail@plt+0x20e4>
   135d4:	ldr	r1, [r5]
   135d8:	rev	r1, r1
   135dc:	ldr	r0, [pc, #-240]	; 134f4 <__assert_fail@plt+0x2088>
   135e0:	bl	11148 <printf@plt>
   135e4:	b	13534 <__assert_fail@plt+0x20c8>
   135e8:	ldr	sl, [sp]
   135ec:	ldr	fp, [sp, #4]
   135f0:	ldr	r3, [sp, #8]
   135f4:	tst	r3, #240	; 0xf0
   135f8:	beq	13614 <__assert_fail@plt+0x21a8>
   135fc:	asr	r1, r3, #4
   13600:	ldr	r0, [pc, #-272]	; 134f8 <__assert_fail@plt+0x208c>
   13604:	bl	11148 <printf@plt>
   13608:	b	13614 <__assert_fail@plt+0x21a8>
   1360c:	ldr	r0, [pc, #-280]	; 134fc <__assert_fail@plt+0x2090>
   13610:	bl	11148 <printf@plt>
   13614:	sub	sl, sl, #1
   13618:	add	fp, fp, #1
   1361c:	cmp	sl, #20
   13620:	ble	13660 <__assert_fail@plt+0x21f4>
   13624:	ldrb	r1, [fp]
   13628:	cmp	r1, #7
   1362c:	beq	13310 <__assert_fail@plt+0x1ea4>
   13630:	bhi	1321c <__assert_fail@plt+0x1db0>
   13634:	cmp	r1, #0
   13638:	moveq	sl, #0
   1363c:	beq	13614 <__assert_fail@plt+0x21a8>
   13640:	cmp	r1, #1
   13644:	bne	1360c <__assert_fail@plt+0x21a0>
   13648:	ldr	r0, [pc, #-336]	; 13500 <__assert_fail@plt+0x2094>
   1364c:	bl	11148 <printf@plt>
   13650:	b	13614 <__assert_fail@plt+0x21a8>
   13654:	mov	fp, r6
   13658:	mov	sl, r7
   1365c:	b	13614 <__assert_fail@plt+0x21a8>
   13660:	mov	r0, #10
   13664:	bl	11364 <putchar@plt>
   13668:	mov	r0, #0
   1366c:	add	sp, sp, #44	; 0x2c
   13670:	vpop	{d8}
   13674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13678:	push	{r4, r5, r6, r7, r8, lr}
   1367c:	ldr	ip, [pc, #196]	; 13748 <__assert_fail@plt+0x22dc>
   13680:	ldr	ip, [ip]
   13684:	tst	ip, #32
   13688:	bne	136a4 <__assert_fail@plt+0x2238>
   1368c:	ldr	ip, [pc, #184]	; 1374c <__assert_fail@plt+0x22e0>
   13690:	ldr	ip, [ip]
   13694:	ldr	lr, [r2, #24]
   13698:	ldr	ip, [ip, #28]
   1369c:	cmp	lr, ip
   136a0:	popne	{r4, r5, r6, r7, r8, pc}
   136a4:	mov	r4, r3
   136a8:	mov	r5, r2
   136ac:	ldrb	r6, [r1]
   136b0:	and	r6, r6, #15
   136b4:	mov	r1, #16
   136b8:	bl	12804 <__assert_fail@plt+0x1398>
   136bc:	mov	r7, r0
   136c0:	mov	r2, r0
   136c4:	sub	r1, r4, r6, lsl #2
   136c8:	ldr	r0, [pc, #128]	; 13750 <__assert_fail@plt+0x22e4>
   136cc:	bl	11148 <printf@plt>
   136d0:	mov	r0, r7
   136d4:	bl	18784 <argp_parse@@Base+0xbf4>
   136d8:	ldrb	r1, [r5]
   136dc:	ldr	r3, [pc, #112]	; 13754 <__assert_fail@plt+0x22e8>
   136e0:	ldr	r3, [r3, #240]	; 0xf0
   136e4:	cmp	r3, r1
   136e8:	beq	13718 <__assert_fail@plt+0x22ac>
   136ec:	ldr	r4, [pc, #100]	; 13758 <__assert_fail@plt+0x22ec>
   136f0:	add	r0, r4, #224	; 0xe0
   136f4:	ldr	r3, [r4]
   136f8:	cmp	r3, r1
   136fc:	beq	1371c <__assert_fail@plt+0x22b0>
   13700:	add	r4, r4, #16
   13704:	cmp	r4, r0
   13708:	bcc	136f4 <__assert_fail@plt+0x2288>
   1370c:	ldr	r0, [pc, #72]	; 1375c <__assert_fail@plt+0x22f0>
   13710:	bl	11148 <printf@plt>
   13714:	pop	{r4, r5, r6, r7, r8, pc}
   13718:	ldr	r4, [pc, #64]	; 13760 <__assert_fail@plt+0x22f4>
   1371c:	ldr	r0, [r4, #4]
   13720:	cmp	r0, #0
   13724:	beq	1372c <__assert_fail@plt+0x22c0>
   13728:	bl	11280 <puts@plt>
   1372c:	ldr	r3, [r4, #8]
   13730:	cmp	r3, #0
   13734:	popeq	{r4, r5, r6, r7, r8, pc}
   13738:	ldr	r1, [r4, #12]
   1373c:	mov	r0, r5
   13740:	blx	r3
   13744:	pop	{r4, r5, r6, r7, r8, pc}
   13748:	andeq	sp, r2, r8, asr #13
   1374c:	ldrdeq	sp, [r2], -r0
   13750:	ldrdeq	fp, [r1], -r0
   13754:	andeq	sp, r2, r4, lsl #8
   13758:	andeq	sp, r2, r4, lsl #10
   1375c:	andeq	fp, r1, r4, ror #13
   13760:	strdeq	sp, [r2], -r4
   13764:	subs	ip, r0, #0
   13768:	blt	137d4 <__assert_fail@plt+0x2368>
   1376c:	push	{lr}		; (str lr, [sp, #-4]!)
   13770:	sub	sp, sp, #20
   13774:	mov	r0, r3
   13778:	cmp	ip, #1
   1377c:	ble	1379c <__assert_fail@plt+0x2330>
   13780:	cmp	ip, #2
   13784:	bne	137c8 <__assert_fail@plt+0x235c>
   13788:	ldr	r3, [sp, #32]
   1378c:	ldr	r2, [sp, #28]
   13790:	ldr	r1, [sp, #24]
   13794:	bl	13678 <__assert_fail@plt+0x220c>
   13798:	b	137c8 <__assert_fail@plt+0x235c>
   1379c:	ldr	r3, [sp, #32]
   137a0:	str	r3, [sp, #8]
   137a4:	ldr	r3, [sp, #28]
   137a8:	str	r3, [sp, #4]
   137ac:	ldr	r3, [sp, #24]
   137b0:	str	r3, [sp]
   137b4:	mov	r3, r0
   137b8:	cmp	ip, #1
   137bc:	movne	r0, #0
   137c0:	moveq	r0, #1
   137c4:	bl	130a0 <__assert_fail@plt+0x1c34>
   137c8:	mov	r0, #0
   137cc:	add	sp, sp, #20
   137d0:	pop	{pc}		; (ldr pc, [sp], #4)
   137d4:	mov	r0, #0
   137d8:	bx	lr
   137dc:	mov	r0, #0
   137e0:	bx	lr
   137e4:	push	{r4, lr}
   137e8:	subs	r4, r0, #0
   137ec:	blt	13870 <__assert_fail@plt+0x2404>
   137f0:	mov	r0, r3
   137f4:	cmp	r4, #1
   137f8:	ble	13818 <__assert_fail@plt+0x23ac>
   137fc:	cmp	r4, #2
   13800:	bne	13870 <__assert_fail@plt+0x2404>
   13804:	ldr	r3, [sp, #16]
   13808:	ldr	r2, [sp, #12]
   1380c:	ldr	r1, [sp, #8]
   13810:	bl	13678 <__assert_fail@plt+0x220c>
   13814:	b	13870 <__assert_fail@plt+0x2404>
   13818:	ldr	r0, [r3, #4]
   1381c:	bl	111e4 <inet_ntoa@plt>
   13820:	ldr	r3, [sp, #12]
   13824:	ldrh	r3, [r3, #6]
   13828:	rev16	r3, r3
   1382c:	uxth	r3, r3
   13830:	mov	r2, r0
   13834:	ldr	r1, [sp, #16]
   13838:	ldr	r0, [pc, #68]	; 13884 <__assert_fail@plt+0x2418>
   1383c:	bl	11148 <printf@plt>
   13840:	cmp	r4, #1
   13844:	beq	13878 <__assert_fail@plt+0x240c>
   13848:	mov	r0, #10
   1384c:	bl	11364 <putchar@plt>
   13850:	ldr	r3, [sp, #12]
   13854:	ldr	r0, [r3, #8]
   13858:	bl	111e4 <inet_ntoa@plt>
   1385c:	mov	r1, r0
   13860:	ldr	r0, [pc, #32]	; 13888 <__assert_fail@plt+0x241c>
   13864:	bl	11148 <printf@plt>
   13868:	mov	r0, #10
   1386c:	bl	11364 <putchar@plt>
   13870:	mov	r0, #0
   13874:	pop	{r4, pc}
   13878:	ldr	r0, [pc, #12]	; 1388c <__assert_fail@plt+0x2420>
   1387c:	bl	11148 <printf@plt>
   13880:	b	13848 <__assert_fail@plt+0x23dc>
   13884:	strdeq	fp, [r1], -r8
   13888:	andeq	fp, r1, r0, lsl sl
   1388c:	andeq	fp, r1, r0, lsr r6
   13890:	push	{r4, r5, r6, lr}
   13894:	mov	r5, r0
   13898:	ldr	r4, [pc, #140]	; 1392c <__assert_fail@plt+0x24c0>
   1389c:	mov	r1, #17
   138a0:	ldr	r0, [r4]
   138a4:	bl	13cf0 <__assert_fail@plt+0x2884>
   138a8:	mov	r2, #0
   138ac:	ldr	r1, [pc, #124]	; 13930 <__assert_fail@plt+0x24c4>
   138b0:	ldr	r0, [r4]
   138b4:	bl	140f0 <__assert_fail@plt+0x2c84>
   138b8:	mov	r1, #12
   138bc:	ldr	r0, [r4]
   138c0:	bl	140fc <__assert_fail@plt+0x2c90>
   138c4:	mov	r1, #1
   138c8:	ldr	r0, [r4]
   138cc:	bl	1273c <__assert_fail@plt+0x12d0>
   138d0:	mov	r1, r5
   138d4:	ldr	r0, [r4]
   138d8:	bl	14104 <__assert_fail@plt+0x2c98>
   138dc:	cmp	r0, #0
   138e0:	bne	13918 <__assert_fail@plt+0x24ac>
   138e4:	ldr	r4, [pc, #64]	; 1392c <__assert_fail@plt+0x24c0>
   138e8:	ldr	r3, [r4]
   138ec:	ldr	r5, [r3, #52]	; 0x34
   138f0:	ldr	r0, [r3, #28]
   138f4:	bl	111e4 <inet_ntoa@plt>
   138f8:	mov	r2, r0
   138fc:	mov	r1, r5
   13900:	ldr	r0, [pc, #44]	; 13934 <__assert_fail@plt+0x24c8>
   13904:	bl	11148 <printf@plt>
   13908:	ldr	r1, [pc, #40]	; 13938 <__assert_fail@plt+0x24cc>
   1390c:	ldr	r0, [r4]
   13910:	bl	11ee4 <__assert_fail@plt+0xa78>
   13914:	pop	{r4, r5, r6, pc}
   13918:	ldr	r2, [pc, #28]	; 1393c <__assert_fail@plt+0x24d0>
   1391c:	mov	r1, #0
   13920:	mov	r0, #1
   13924:	bl	11268 <error@plt>
   13928:	b	138e4 <__assert_fail@plt+0x2478>
   1392c:	ldrdeq	sp, [r2], -r0
   13930:	andeq	r3, r1, r4, ror #15
   13934:	andeq	fp, r1, r0, lsr #20
   13938:	ldrdeq	r3, [r1], -ip
   1393c:	andeq	fp, r1, r8, lsr #11
   13940:	mov	r0, #0
   13944:	bx	lr
   13948:	push	{r4, lr}
   1394c:	bl	12248 <__assert_fail@plt+0xddc>
   13950:	pop	{r4, pc}
   13954:	push	{r4, r5, lr}
   13958:	sub	sp, sp, #20
   1395c:	ldr	r5, [sp, #36]	; 0x24
   13960:	subs	r4, r0, #0
   13964:	blt	1398c <__assert_fail@plt+0x2520>
   13968:	mov	r0, r3
   1396c:	cmp	r4, #1
   13970:	ble	13998 <__assert_fail@plt+0x252c>
   13974:	cmp	r4, #2
   13978:	bne	1398c <__assert_fail@plt+0x2520>
   1397c:	ldr	r3, [sp, #40]	; 0x28
   13980:	mov	r2, r5
   13984:	ldr	r1, [sp, #32]
   13988:	bl	13678 <__assert_fail@plt+0x220c>
   1398c:	mov	r0, #0
   13990:	add	sp, sp, #20
   13994:	pop	{r4, r5, pc}
   13998:	ldr	r0, [r3, #4]
   1399c:	bl	111e4 <inet_ntoa@plt>
   139a0:	ldrh	r3, [r5, #6]
   139a4:	rev16	r3, r3
   139a8:	uxth	r3, r3
   139ac:	mov	r2, r0
   139b0:	ldr	r1, [sp, #40]	; 0x28
   139b4:	ldr	r0, [pc, #212]	; 13a90 <__assert_fail@plt+0x2624>
   139b8:	bl	11148 <printf@plt>
   139bc:	cmp	r4, #1
   139c0:	beq	13a84 <__assert_fail@plt+0x2618>
   139c4:	mov	r0, #10
   139c8:	bl	11364 <putchar@plt>
   139cc:	ldr	r2, [r5, #8]
   139d0:	rev	r2, r2
   139d4:	mov	r1, #16
   139d8:	mov	r0, sp
   139dc:	bl	1262c <__assert_fail@plt+0x11c0>
   139e0:	mov	r1, r0
   139e4:	ldr	r0, [pc, #168]	; 13a94 <__assert_fail@plt+0x2628>
   139e8:	bl	11148 <printf@plt>
   139ec:	ldr	r2, [r5, #12]
   139f0:	rev	r2, r2
   139f4:	mov	r1, #16
   139f8:	mov	r0, sp
   139fc:	bl	1262c <__assert_fail@plt+0x11c0>
   13a00:	mov	r1, r0
   13a04:	ldr	r0, [pc, #140]	; 13a98 <__assert_fail@plt+0x262c>
   13a08:	bl	11148 <printf@plt>
   13a0c:	ldr	r2, [r5, #16]
   13a10:	rev	r2, r2
   13a14:	mov	r1, #16
   13a18:	mov	r0, sp
   13a1c:	bl	1262c <__assert_fail@plt+0x11c0>
   13a20:	mov	r1, r0
   13a24:	ldr	r0, [pc, #112]	; 13a9c <__assert_fail@plt+0x2630>
   13a28:	bl	11148 <printf@plt>
   13a2c:	ldr	r3, [pc, #108]	; 13aa0 <__assert_fail@plt+0x2634>
   13a30:	ldr	r3, [r3]
   13a34:	tst	r3, #32
   13a38:	beq	1398c <__assert_fail@plt+0x2520>
   13a3c:	ldr	r0, [r5, #8]
   13a40:	rev	r0, r0
   13a44:	bl	12620 <__assert_fail@plt+0x11b4>
   13a48:	cmp	r0, #0
   13a4c:	beq	1398c <__assert_fail@plt+0x2520>
   13a50:	ldr	r0, [r5, #8]
   13a54:	rev	r0, r0
   13a58:	bl	12620 <__assert_fail@plt+0x11b4>
   13a5c:	cmp	r0, #0
   13a60:	beq	1398c <__assert_fail@plt+0x2520>
   13a64:	ldr	r1, [r5, #16]
   13a68:	rev	r1, r1
   13a6c:	ldr	r3, [r5, #8]
   13a70:	rev	r3, r3
   13a74:	sub	r1, r1, r3
   13a78:	ldr	r0, [pc, #36]	; 13aa4 <__assert_fail@plt+0x2638>
   13a7c:	bl	11148 <printf@plt>
   13a80:	b	1398c <__assert_fail@plt+0x2520>
   13a84:	ldr	r0, [pc, #28]	; 13aa8 <__assert_fail@plt+0x263c>
   13a88:	bl	11148 <printf@plt>
   13a8c:	b	139c4 <__assert_fail@plt+0x2558>
   13a90:	strdeq	fp, [r1], -r8
   13a94:	andeq	fp, r1, ip, asr #20
   13a98:	andeq	fp, r1, r0, ror #20
   13a9c:	andeq	fp, r1, r4, ror sl
   13aa0:	andeq	sp, r2, r8, asr #13
   13aa4:	andeq	fp, r1, r8, lsl #21
   13aa8:	andeq	fp, r1, r0, lsr r6
   13aac:	push	{r4, r5, r6, lr}
   13ab0:	mov	r5, r0
   13ab4:	ldr	r4, [pc, #128]	; 13b3c <__assert_fail@plt+0x26d0>
   13ab8:	mov	r1, #13
   13abc:	ldr	r0, [r4]
   13ac0:	bl	13cf0 <__assert_fail@plt+0x2884>
   13ac4:	mov	r2, #0
   13ac8:	ldr	r1, [pc, #112]	; 13b40 <__assert_fail@plt+0x26d4>
   13acc:	ldr	r0, [r4]
   13ad0:	bl	140f0 <__assert_fail@plt+0x2c84>
   13ad4:	mov	r1, #20
   13ad8:	ldr	r0, [r4]
   13adc:	bl	140fc <__assert_fail@plt+0x2c90>
   13ae0:	mov	r1, r5
   13ae4:	ldr	r0, [r4]
   13ae8:	bl	14104 <__assert_fail@plt+0x2c98>
   13aec:	cmp	r0, #0
   13af0:	bne	13b28 <__assert_fail@plt+0x26bc>
   13af4:	ldr	r4, [pc, #64]	; 13b3c <__assert_fail@plt+0x26d0>
   13af8:	ldr	r3, [r4]
   13afc:	ldr	r5, [r3, #52]	; 0x34
   13b00:	ldr	r0, [r3, #28]
   13b04:	bl	111e4 <inet_ntoa@plt>
   13b08:	mov	r2, r0
   13b0c:	mov	r1, r5
   13b10:	ldr	r0, [pc, #44]	; 13b44 <__assert_fail@plt+0x26d8>
   13b14:	bl	11148 <printf@plt>
   13b18:	ldr	r1, [pc, #40]	; 13b48 <__assert_fail@plt+0x26dc>
   13b1c:	ldr	r0, [r4]
   13b20:	bl	11ee4 <__assert_fail@plt+0xa78>
   13b24:	pop	{r4, r5, r6, pc}
   13b28:	ldr	r2, [pc, #28]	; 13b4c <__assert_fail@plt+0x26e0>
   13b2c:	mov	r1, #0
   13b30:	mov	r0, #1
   13b34:	bl	11268 <error@plt>
   13b38:	b	13af4 <__assert_fail@plt+0x2688>
   13b3c:	ldrdeq	sp, [r2], -r0
   13b40:	andeq	r3, r1, r4, asr r9
   13b44:	muleq	r1, ip, sl
   13b48:	andeq	r3, r1, r8, asr #18
   13b4c:	andeq	fp, r1, r8, lsr #11
   13b50:	push	{r4, r5, r6, r7, r8, lr}
   13b54:	mov	r7, r0
   13b58:	mov	r5, r1
   13b5c:	ldr	r0, [pc, #352]	; 13cc4 <__assert_fail@plt+0x2858>
   13b60:	bl	11154 <getprotobyname@plt>
   13b64:	subs	r4, r0, #0
   13b68:	beq	13be0 <__assert_fail@plt+0x2774>
   13b6c:	ldr	r2, [r4, #8]
   13b70:	mov	r1, #3
   13b74:	mov	r0, #2
   13b78:	bl	1143c <socket@plt>
   13b7c:	subs	r6, r0, #0
   13b80:	blt	13c00 <__assert_fail@plt+0x2794>
   13b84:	mov	r0, #124	; 0x7c
   13b88:	bl	1938c <argp_parse@@Base+0x17fc>
   13b8c:	subs	r4, r0, #0
   13b90:	beq	13cb8 <__assert_fail@plt+0x284c>
   13b94:	mov	r2, #124	; 0x7c
   13b98:	mov	r1, #0
   13b9c:	mov	r0, r4
   13ba0:	bl	11358 <memset@plt>
   13ba4:	str	r6, [r4]
   13ba8:	str	r7, [r4, #4]
   13bac:	mov	r3, #1000	; 0x3e8
   13bb0:	str	r3, [r4, #20]
   13bb4:	mov	r3, #28
   13bb8:	str	r3, [r4, #56]	; 0x38
   13bbc:	uxth	r5, r5
   13bc0:	str	r5, [r4, #60]	; 0x3c
   13bc4:	mov	r3, #128	; 0x80
   13bc8:	str	r3, [r4, #72]	; 0x48
   13bcc:	mov	r1, #0
   13bd0:	add	r0, r4, #12
   13bd4:	bl	1125c <gettimeofday@plt>
   13bd8:	mov	r0, r4
   13bdc:	pop	{r4, r5, r6, r7, r8, pc}
   13be0:	ldr	r3, [pc, #224]	; 13cc8 <__assert_fail@plt+0x285c>
   13be4:	ldr	r3, [r3]
   13be8:	mov	r2, #29
   13bec:	mov	r1, #1
   13bf0:	ldr	r0, [pc, #212]	; 13ccc <__assert_fail@plt+0x2860>
   13bf4:	bl	11250 <fwrite@plt>
   13bf8:	mov	r4, #0
   13bfc:	b	13bd8 <__assert_fail@plt+0x276c>
   13c00:	bl	11328 <__errno_location@plt>
   13c04:	mov	r8, r0
   13c08:	ldr	r3, [r0]
   13c0c:	cmp	r3, #13
   13c10:	cmpne	r3, #1
   13c14:	movne	r4, #0
   13c18:	bne	13bd8 <__assert_fail@plt+0x276c>
   13c1c:	mov	r3, #0
   13c20:	str	r3, [r0]
   13c24:	ldr	r2, [r4, #8]
   13c28:	mov	r1, #2
   13c2c:	mov	r0, r1
   13c30:	bl	1143c <socket@plt>
   13c34:	subs	r6, r0, #0
   13c38:	blt	13c50 <__assert_fail@plt+0x27e4>
   13c3c:	ldr	r2, [pc, #140]	; 13cd0 <__assert_fail@plt+0x2864>
   13c40:	ldr	r3, [r2]
   13c44:	add	r3, r3, #1
   13c48:	str	r3, [r2]
   13c4c:	b	13b84 <__assert_fail@plt+0x2718>
   13c50:	ldr	r0, [r8]
   13c54:	cmp	r0, #13
   13c58:	cmpne	r0, #1
   13c5c:	moveq	r3, #1
   13c60:	movne	r3, #0
   13c64:	cmp	r0, #93	; 0x5d
   13c68:	orreq	r3, r3, #1
   13c6c:	cmp	r3, #0
   13c70:	bne	13c98 <__assert_fail@plt+0x282c>
   13c74:	ldr	r3, [pc, #76]	; 13cc8 <__assert_fail@plt+0x285c>
   13c78:	ldr	r4, [r3]
   13c7c:	bl	112a4 <strerror@plt>
   13c80:	mov	r2, r0
   13c84:	ldr	r1, [pc, #72]	; 13cd4 <__assert_fail@plt+0x2868>
   13c88:	mov	r0, r4
   13c8c:	bl	1131c <fprintf@plt>
   13c90:	mov	r4, #0
   13c94:	b	13bd8 <__assert_fail@plt+0x276c>
   13c98:	ldr	r3, [pc, #40]	; 13cc8 <__assert_fail@plt+0x285c>
   13c9c:	ldr	r3, [r3]
   13ca0:	mov	r2, #41	; 0x29
   13ca4:	mov	r1, #1
   13ca8:	ldr	r0, [pc, #40]	; 13cd8 <__assert_fail@plt+0x286c>
   13cac:	bl	11250 <fwrite@plt>
   13cb0:	mov	r4, #0
   13cb4:	b	13bd8 <__assert_fail@plt+0x276c>
   13cb8:	mov	r0, r6
   13cbc:	bl	11460 <close@plt>
   13cc0:	b	13bd8 <__assert_fail@plt+0x276c>
   13cc4:	andeq	fp, r1, r8, asr #21
   13cc8:	andeq	sp, r2, r8, lsr #12
   13ccc:	ldrdeq	fp, [r1], -r0
   13cd0:	andeq	sp, r2, r4, lsl #13
   13cd4:	andeq	fp, r1, ip, lsl fp
   13cd8:	strdeq	fp, [r1], -r0
   13cdc:	mov	r3, #0
   13ce0:	str	r3, [r0, #112]	; 0x70
   13ce4:	str	r3, [r0, #116]	; 0x74
   13ce8:	str	r3, [r0, #120]	; 0x78
   13cec:	bx	lr
   13cf0:	str	r1, [r0, #4]
   13cf4:	bx	lr
   13cf8:	push	{r4, r5, r6, r7, lr}
   13cfc:	sub	sp, sp, #12
   13d00:	mov	r4, r0
   13d04:	mov	r1, #0
   13d08:	bl	12658 <__assert_fail@plt+0x11ec>
   13d0c:	subs	r7, r0, #0
   13d10:	bne	13e40 <__assert_fail@plt+0x29d4>
   13d14:	ldr	r3, [r4, #4]
   13d18:	sub	r2, r3, #13
   13d1c:	cmp	r2, #1
   13d20:	movls	r5, #20
   13d24:	bls	13d3c <__assert_fail@plt+0x28d0>
   13d28:	sub	r3, r3, #17
   13d2c:	cmp	r3, #1
   13d30:	ldrhi	r5, [r4, #56]	; 0x38
   13d34:	addhi	r5, r5, #8
   13d38:	movls	r5, #12
   13d3c:	mov	r6, r5
   13d40:	ldr	r1, [r4, #72]	; 0x48
   13d44:	lsl	r1, r1, #3
   13d48:	ldr	r0, [r4, #112]	; 0x70
   13d4c:	bl	1a9a0 <argp_parse@@Base+0x2e10>
   13d50:	ldr	r2, [r4, #76]	; 0x4c
   13d54:	and	r0, r1, #7
   13d58:	ldrb	r3, [r2, r1, asr #3]
   13d5c:	mov	ip, #1
   13d60:	bic	r3, r3, ip, lsl r0
   13d64:	strb	r3, [r2, r1, asr #3]
   13d68:	ldr	r2, [r4, #4]
   13d6c:	cmp	r2, #13
   13d70:	beq	13e10 <__assert_fail@plt+0x29a4>
   13d74:	cmp	r2, #17
   13d78:	beq	13e28 <__assert_fail@plt+0x29bc>
   13d7c:	cmp	r2, #8
   13d80:	beq	13da0 <__assert_fail@plt+0x2934>
   13d84:	ldr	r3, [r4, #112]	; 0x70
   13d88:	str	r3, [sp]
   13d8c:	ldr	r3, [r4, #60]	; 0x3c
   13d90:	mov	r1, r5
   13d94:	ldr	r0, [r4, #80]	; 0x50
   13d98:	bl	1419c <__assert_fail@plt+0x2d30>
   13d9c:	b	13db4 <__assert_fail@plt+0x2948>
   13da0:	ldr	r3, [r4, #112]	; 0x70
   13da4:	ldr	r2, [r4, #60]	; 0x3c
   13da8:	mov	r1, r5
   13dac:	ldr	r0, [r4, #80]	; 0x50
   13db0:	bl	14240 <__assert_fail@plt+0x2dd4>
   13db4:	add	r3, r4, #24
   13db8:	mov	r2, #16
   13dbc:	str	r2, [sp, #4]
   13dc0:	str	r3, [sp]
   13dc4:	mov	r3, #0
   13dc8:	mov	r2, r5
   13dcc:	ldr	r1, [r4, #80]	; 0x50
   13dd0:	ldr	r0, [r4]
   13dd4:	bl	11388 <sendto@plt>
   13dd8:	subs	r3, r0, #0
   13ddc:	blt	13e48 <__assert_fail@plt+0x29dc>
   13de0:	ldr	r2, [r4, #112]	; 0x70
   13de4:	add	r2, r2, #1
   13de8:	str	r2, [r4, #112]	; 0x70
   13dec:	cmp	r6, r3
   13df0:	beq	13e04 <__assert_fail@plt+0x2998>
   13df4:	mov	r2, r6
   13df8:	ldr	r1, [r4, #52]	; 0x34
   13dfc:	ldr	r0, [pc, #76]	; 13e50 <__assert_fail@plt+0x29e4>
   13e00:	bl	11148 <printf@plt>
   13e04:	mov	r0, r7
   13e08:	add	sp, sp, #12
   13e0c:	pop	{r4, r5, r6, r7, pc}
   13e10:	ldr	r3, [r4, #112]	; 0x70
   13e14:	ldr	r2, [r4, #60]	; 0x3c
   13e18:	mov	r1, r5
   13e1c:	ldr	r0, [r4, #80]	; 0x50
   13e20:	bl	1426c <__assert_fail@plt+0x2e00>
   13e24:	b	13db4 <__assert_fail@plt+0x2948>
   13e28:	ldr	r3, [r4, #112]	; 0x70
   13e2c:	ldr	r2, [r4, #60]	; 0x3c
   13e30:	mov	r1, r5
   13e34:	ldr	r0, [r4, #80]	; 0x50
   13e38:	bl	14320 <__assert_fail@plt+0x2eb4>
   13e3c:	b	13db4 <__assert_fail@plt+0x2948>
   13e40:	mvn	r7, #0
   13e44:	b	13e04 <__assert_fail@plt+0x2998>
   13e48:	mvn	r7, #0
   13e4c:	b	13e04 <__assert_fail@plt+0x2998>
   13e50:	andeq	fp, r1, r8, lsr #22
   13e54:	push	{r4, r5, r6, r7, lr}
   13e58:	sub	sp, sp, #36	; 0x24
   13e5c:	mov	r4, r0
   13e60:	add	r3, sp, #32
   13e64:	mov	r2, #16
   13e68:	str	r2, [r3, #-4]!
   13e6c:	ldr	r2, [r0, #56]	; 0x38
   13e70:	add	r5, r0, #84	; 0x54
   13e74:	str	r3, [sp, #4]
   13e78:	str	r5, [sp]
   13e7c:	mov	r3, #0
   13e80:	add	r2, r2, #80	; 0x50
   13e84:	ldr	r1, [r0, #80]	; 0x50
   13e88:	ldr	r0, [r0]
   13e8c:	bl	11214 <recvfrom@plt>
   13e90:	subs	r6, r0, #0
   13e94:	blt	140c4 <__assert_fail@plt+0x2c58>
   13e98:	add	r3, sp, #24
   13e9c:	add	r2, sp, #20
   13ea0:	mov	r1, r6
   13ea4:	ldr	r0, [r4, #80]	; 0x50
   13ea8:	bl	141e8 <__assert_fail@plt+0x2d7c>
   13eac:	cmp	r0, #0
   13eb0:	blt	13f14 <__assert_fail@plt+0x2aa8>
   13eb4:	ldr	r3, [sp, #24]
   13eb8:	ldrb	r2, [r3]
   13ebc:	cmp	r2, #18
   13ec0:	ldrls	pc, [pc, r2, lsl #2]
   13ec4:	b	14028 <__assert_fail@plt+0x2bbc>
   13ec8:	andeq	r3, r1, r0, asr #30
   13ecc:	andeq	r4, r1, r8, lsr #32
   13ed0:	andeq	r4, r1, r8, lsr #32
   13ed4:	andeq	r4, r1, r8, lsr #32
   13ed8:	andeq	r4, r1, r8, lsr #32
   13edc:	andeq	r4, r1, r8, lsr #32
   13ee0:	andeq	r4, r1, r8, lsr #32
   13ee4:	andeq	r4, r1, r8, lsr #32
   13ee8:	andeq	r4, r1, ip, asr #1
   13eec:	andeq	r4, r1, r8, lsr #32
   13ef0:	andeq	r4, r1, r8, lsr #32
   13ef4:	andeq	r4, r1, r8, lsr #32
   13ef8:	andeq	r4, r1, r8, lsr #32
   13efc:	andeq	r4, r1, ip, asr #1
   13f00:	andeq	r3, r1, r0, asr #30
   13f04:	andeq	r4, r1, r8, lsr #32
   13f08:	andeq	r4, r1, r8, lsr #32
   13f0c:	andeq	r4, r1, ip, asr #1
   13f10:	andeq	r3, r1, r0, asr #30
   13f14:	ldr	r3, [pc, #452]	; 140e0 <__assert_fail@plt+0x2c74>
   13f18:	ldr	r5, [r3]
   13f1c:	ldr	r0, [r4, #88]	; 0x58
   13f20:	bl	111e4 <inet_ntoa@plt>
   13f24:	mov	r3, r0
   13f28:	mov	r2, r6
   13f2c:	ldr	r1, [pc, #432]	; 140e4 <__assert_fail@plt+0x2c78>
   13f30:	mov	r0, r5
   13f34:	bl	1131c <fprintf@plt>
   13f38:	mvn	r0, #0
   13f3c:	b	140d0 <__assert_fail@plt+0x2c64>
   13f40:	ldrh	r3, [r3, #4]
   13f44:	rev16	r3, r3
   13f48:	uxth	r3, r3
   13f4c:	ldr	r2, [r4, #60]	; 0x3c
   13f50:	cmp	r3, r2
   13f54:	beq	13f68 <__assert_fail@plt+0x2afc>
   13f58:	ldr	r3, [pc, #392]	; 140e8 <__assert_fail@plt+0x2c7c>
   13f5c:	ldr	r3, [r3]
   13f60:	cmp	r3, #0
   13f64:	beq	140d8 <__assert_fail@plt+0x2c6c>
   13f68:	cmp	r0, #0
   13f6c:	bne	14004 <__assert_fail@plt+0x2b98>
   13f70:	ldr	r7, [r4, #116]	; 0x74
   13f74:	add	r3, r7, #1
   13f78:	str	r3, [r4, #116]	; 0x74
   13f7c:	ldr	r3, [sp, #24]
   13f80:	ldrh	r0, [r3, #6]
   13f84:	rev16	r0, r0
   13f88:	ldr	r1, [r4, #72]	; 0x48
   13f8c:	lsl	r1, r1, #3
   13f90:	uxth	r0, r0
   13f94:	bl	1abe0 <argp_parse@@Base+0x3050>
   13f98:	ldr	r2, [r4, #76]	; 0x4c
   13f9c:	ldrb	r3, [r2, r1, asr #3]
   13fa0:	and	ip, r1, #7
   13fa4:	asr	r0, r3, ip
   13fa8:	ands	r0, r0, #1
   13fac:	ldrne	r3, [r4, #120]	; 0x78
   13fb0:	addne	r3, r3, #1
   13fb4:	strne	r3, [r4, #120]	; 0x78
   13fb8:	strne	r7, [r4, #116]	; 0x74
   13fbc:	moveq	lr, #1
   13fc0:	orreq	r3, r3, lr, lsl ip
   13fc4:	strbeq	r3, [r2, r1, asr #3]
   13fc8:	ldr	r7, [r4, #64]	; 0x40
   13fcc:	cmp	r7, #0
   13fd0:	moveq	r0, #0
   13fd4:	beq	140d0 <__assert_fail@plt+0x2c64>
   13fd8:	ldr	r1, [r4, #68]	; 0x44
   13fdc:	str	r6, [sp, #8]
   13fe0:	ldr	r3, [sp, #24]
   13fe4:	str	r3, [sp, #4]
   13fe8:	ldr	r3, [sp, #20]
   13fec:	str	r3, [sp]
   13ff0:	mov	r3, r5
   13ff4:	add	r2, r4, #24
   13ff8:	blx	r7
   13ffc:	mov	r0, #0
   14000:	b	140d0 <__assert_fail@plt+0x2c64>
   14004:	ldr	r3, [pc, #212]	; 140e0 <__assert_fail@plt+0x2c74>
   14008:	ldr	r7, [r3]
   1400c:	ldr	r0, [r4, #88]	; 0x58
   14010:	bl	111e4 <inet_ntoa@plt>
   14014:	mov	r2, r0
   14018:	ldr	r1, [pc, #204]	; 140ec <__assert_fail@plt+0x2c80>
   1401c:	mov	r0, r7
   14020:	bl	1131c <fprintf@plt>
   14024:	b	13f70 <__assert_fail@plt+0x2b04>
   14028:	ldr	r1, [r3, #24]
   1402c:	ldr	r2, [r4, #28]
   14030:	cmp	r1, r2
   14034:	mvnne	r0, #0
   14038:	bne	140d0 <__assert_fail@plt+0x2c64>
   1403c:	ldrb	r2, [r3, #17]
   14040:	cmp	r2, #1
   14044:	mvnne	r0, #0
   14048:	bne	140d0 <__assert_fail@plt+0x2c64>
   1404c:	ldrb	r2, [r3, #28]
   14050:	cmp	r2, #8
   14054:	mvnne	r0, #0
   14058:	bne	140d0 <__assert_fail@plt+0x2c64>
   1405c:	ldrh	r2, [r3, #32]
   14060:	rev16	r2, r2
   14064:	uxth	r2, r2
   14068:	ldr	r1, [r4, #60]	; 0x3c
   1406c:	cmp	r2, r1
   14070:	beq	14088 <__assert_fail@plt+0x2c1c>
   14074:	ldr	r2, [pc, #108]	; 140e8 <__assert_fail@plt+0x2c7c>
   14078:	ldr	r2, [r2]
   1407c:	cmp	r2, #0
   14080:	mvneq	r0, #0
   14084:	beq	140d0 <__assert_fail@plt+0x2c64>
   14088:	ldr	r7, [r4, #64]	; 0x40
   1408c:	cmp	r7, #0
   14090:	moveq	r0, #0
   14094:	beq	140d0 <__assert_fail@plt+0x2c64>
   14098:	ldr	r1, [r4, #68]	; 0x44
   1409c:	str	r6, [sp, #8]
   140a0:	str	r3, [sp, #4]
   140a4:	ldr	r3, [sp, #20]
   140a8:	str	r3, [sp]
   140ac:	mov	r3, r5
   140b0:	add	r2, r4, #24
   140b4:	mov	r0, #2
   140b8:	blx	r7
   140bc:	mov	r0, #0
   140c0:	b	140d0 <__assert_fail@plt+0x2c64>
   140c4:	mvn	r0, #0
   140c8:	b	140d0 <__assert_fail@plt+0x2c64>
   140cc:	mvn	r0, #0
   140d0:	add	sp, sp, #36	; 0x24
   140d4:	pop	{r4, r5, r6, r7, pc}
   140d8:	mvn	r0, #0
   140dc:	b	140d0 <__assert_fail@plt+0x2c64>
   140e0:	andeq	sp, r2, r8, lsr #12
   140e4:	andeq	fp, r1, ip, asr #22
   140e8:	andeq	sp, r2, r4, lsl #13
   140ec:	andeq	fp, r1, r4, ror fp
   140f0:	str	r1, [r0, #64]	; 0x40
   140f4:	str	r2, [r0, #68]	; 0x44
   140f8:	bx	lr
   140fc:	str	r1, [r0, #56]	; 0x38
   14100:	bx	lr
   14104:	push	{r4, r5, r6, r7, lr}
   14108:	sub	sp, sp, #44	; 0x2c
   1410c:	mov	r6, r0
   14110:	mov	r7, r1
   14114:	mov	r2, #32
   14118:	mov	r1, #0
   1411c:	add	r0, sp, #8
   14120:	bl	11358 <memset@plt>
   14124:	mov	r3, #2
   14128:	str	r3, [sp, #12]
   1412c:	mov	r3, #194	; 0xc2
   14130:	str	r3, [sp, #8]
   14134:	add	r3, sp, #4
   14138:	add	r2, sp, #8
   1413c:	mov	r1, #0
   14140:	mov	r0, r7
   14144:	bl	11430 <getaddrinfo@plt>
   14148:	subs	r5, r0, #0
   1414c:	bne	1418c <__assert_fail@plt+0x2d20>
   14150:	ldr	r4, [sp, #4]
   14154:	ldr	r2, [r4, #16]
   14158:	ldr	r1, [r4, #20]
   1415c:	add	r0, r6, #24
   14160:	bl	111b4 <memcpy@plt>
   14164:	ldr	r0, [r4, #24]
   14168:	cmp	r0, #0
   1416c:	moveq	r0, r7
   14170:	bl	11220 <strdup@plt>
   14174:	str	r0, [r6, #52]	; 0x34
   14178:	ldr	r0, [sp, #4]
   1417c:	bl	11424 <freeaddrinfo@plt>
   14180:	mov	r0, r5
   14184:	add	sp, sp, #44	; 0x2c
   14188:	pop	{r4, r5, r6, r7, pc}
   1418c:	mov	r0, #0
   14190:	bl	18784 <argp_parse@@Base+0xbf4>
   14194:	mov	r5, #1
   14198:	b	14180 <__assert_fail@plt+0x2d14>
   1419c:	cmp	r1, #7
   141a0:	bls	141e0 <__assert_fail@plt+0x2d74>
   141a4:	push	{r4, r5, r6, lr}
   141a8:	mov	r4, r0
   141ac:	strb	r2, [r0]
   141b0:	mov	r5, #0
   141b4:	strb	r5, [r0, #1]
   141b8:	strh	r5, [r0, #2]
   141bc:	ldr	r2, [sp, #16]
   141c0:	rev16	r2, r2
   141c4:	strh	r2, [r0, #6]
   141c8:	rev16	r3, r3
   141cc:	strh	r3, [r0, #4]
   141d0:	bl	14360 <__assert_fail@plt+0x2ef4>
   141d4:	strh	r0, [r4, #2]
   141d8:	mov	r0, r5
   141dc:	pop	{r4, r5, r6, pc}
   141e0:	mvn	r0, #0
   141e4:	bx	lr
   141e8:	push	{r4, r5, r6, lr}
   141ec:	ldrb	ip, [r0]
   141f0:	and	ip, ip, #15
   141f4:	lsl	ip, ip, #2
   141f8:	add	lr, ip, #8
   141fc:	cmp	lr, r1
   14200:	bhi	14238 <__assert_fail@plt+0x2dcc>
   14204:	add	r4, r0, ip
   14208:	str	r0, [r2]
   1420c:	str	r4, [r3]
   14210:	ldrh	r5, [r4, #2]
   14214:	mov	r3, #0
   14218:	strh	r3, [r4, #2]
   1421c:	sub	r1, r1, ip
   14220:	mov	r0, r4
   14224:	bl	14360 <__assert_fail@plt+0x2ef4>
   14228:	strh	r0, [r4, #2]
   1422c:	subs	r0, r5, r0
   14230:	movne	r0, #1
   14234:	pop	{r4, r5, r6, pc}
   14238:	mvn	r0, #0
   1423c:	pop	{r4, r5, r6, pc}
   14240:	push	{lr}		; (str lr, [sp, #-4]!)
   14244:	sub	sp, sp, #12
   14248:	str	r3, [sp]
   1424c:	mov	r3, r2
   14250:	mov	r2, #8
   14254:	bl	1419c <__assert_fail@plt+0x2d30>
   14258:	add	sp, sp, #12
   1425c:	pop	{pc}		; (ldr pc, [sp], #4)
   14260:	push	{r4, lr}
   14264:	bl	141e8 <__assert_fail@plt+0x2d7c>
   14268:	pop	{r4, pc}
   1426c:	cmp	r1, #19
   14270:	bls	1430c <__assert_fail@plt+0x2ea0>
   14274:	push	{r4, r5, r6, r7, lr}
   14278:	sub	sp, sp, #20
   1427c:	mov	r7, r3
   14280:	mov	r6, r2
   14284:	mov	r5, r1
   14288:	mov	r4, r0
   1428c:	mov	r1, #0
   14290:	add	r0, sp, #8
   14294:	bl	1125c <gettimeofday@plt>
   14298:	ldr	ip, [sp, #8]
   1429c:	ldr	r3, [pc, #112]	; 14314 <__assert_fail@plt+0x2ea8>
   142a0:	smull	r2, r3, r3, ip
   142a4:	add	r3, r3, ip
   142a8:	asr	r2, ip, #31
   142ac:	rsb	r2, r2, r3, asr #16
   142b0:	ldr	r3, [pc, #96]	; 14318 <__assert_fail@plt+0x2eac>
   142b4:	mul	r3, r3, r2
   142b8:	sub	ip, ip, r3
   142bc:	ldr	r3, [sp, #12]
   142c0:	ldr	r2, [pc, #84]	; 1431c <__assert_fail@plt+0x2eb0>
   142c4:	smull	r1, r2, r2, r3
   142c8:	asr	r3, r3, #31
   142cc:	rsb	r3, r3, r2, asr #6
   142d0:	mov	r2, #1000	; 0x3e8
   142d4:	mla	ip, r2, ip, r3
   142d8:	rev	ip, ip
   142dc:	str	ip, [r4, #8]
   142e0:	str	ip, [r4, #12]
   142e4:	str	ip, [r4, #16]
   142e8:	str	r7, [sp]
   142ec:	mov	r3, r6
   142f0:	mov	r2, #13
   142f4:	mov	r1, r5
   142f8:	mov	r0, r4
   142fc:	bl	1419c <__assert_fail@plt+0x2d30>
   14300:	mov	r0, #0
   14304:	add	sp, sp, #20
   14308:	pop	{r4, r5, r6, r7, pc}
   1430c:	mvn	r0, #0
   14310:	bx	lr
   14314:	eorgt	r4, lr, #29360128	; 0x1c00000
   14318:	andeq	r5, r1, r0, lsl #3
   1431c:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   14320:	cmp	r1, #11
   14324:	bls	14358 <__assert_fail@plt+0x2eec>
   14328:	push	{r4, lr}
   1432c:	sub	sp, sp, #8
   14330:	mov	ip, r3
   14334:	mov	r3, r2
   14338:	mov	r4, #0
   1433c:	str	r4, [r0, #8]
   14340:	str	ip, [sp]
   14344:	mov	r2, #17
   14348:	bl	1419c <__assert_fail@plt+0x2d30>
   1434c:	mov	r0, r4
   14350:	add	sp, sp, #8
   14354:	pop	{r4, pc}
   14358:	mvn	r0, #0
   1435c:	bx	lr
   14360:	push	{lr}		; (str lr, [sp, #-4]!)
   14364:	sub	sp, sp, #12
   14368:	mov	r3, #0
   1436c:	strh	r3, [sp, #6]
   14370:	cmp	r1, #1
   14374:	ble	143dc <__assert_fail@plt+0x2f70>
   14378:	mov	ip, r0
   1437c:	mov	r3, r1
   14380:	mov	r2, #0
   14384:	ldrh	lr, [ip], #2
   14388:	add	r2, r2, lr
   1438c:	sub	r3, r3, #2
   14390:	cmp	r3, #1
   14394:	bgt	14384 <__assert_fail@plt+0x2f18>
   14398:	sub	r1, r1, #2
   1439c:	bic	r3, r1, #1
   143a0:	add	r3, r3, #2
   143a4:	add	r0, r0, r3
   143a8:	and	r1, r1, #1
   143ac:	cmp	r1, #1
   143b0:	ldrbeq	r3, [r0]
   143b4:	strbeq	r3, [sp, #6]
   143b8:	ldrheq	r3, [sp, #6]
   143bc:	addeq	r2, r2, r3
   143c0:	uxth	r0, r2
   143c4:	add	r2, r0, r2, asr #16
   143c8:	add	r2, r2, r2, asr #16
   143cc:	mvn	r0, r2
   143d0:	uxth	r0, r0
   143d4:	add	sp, sp, #12
   143d8:	pop	{pc}		; (ldr pc, [sp], #4)
   143dc:	mov	r2, #0
   143e0:	b	143ac <__assert_fail@plt+0x2f40>
   143e4:	ldr	r3, [r0]
   143e8:	ldr	r2, [r0, #4]
   143ec:	cmp	r2, #0
   143f0:	beq	1442c <__assert_fail@plt+0x2fc0>
   143f4:	add	r3, r3, #24
   143f8:	b	14408 <__assert_fail@plt+0x2f9c>
   143fc:	add	r3, r3, #24
   14400:	subs	r2, r2, #1
   14404:	beq	14424 <__assert_fail@plt+0x2fb8>
   14408:	ldr	r0, [r3, #-24]	; 0xffffffe8
   1440c:	cmp	r0, #0
   14410:	beq	143fc <__assert_fail@plt+0x2f90>
   14414:	ldr	r1, [r3, #-12]
   14418:	tst	r1, #2
   1441c:	bne	143fc <__assert_fail@plt+0x2f90>
   14420:	bx	lr
   14424:	mov	r0, #0
   14428:	bx	lr
   1442c:	mov	r0, #0
   14430:	bx	lr
   14434:	ldr	r2, [r0, #8]
   14438:	cmp	r2, #0
   1443c:	beq	14448 <__assert_fail@plt+0x2fdc>
   14440:	mov	r0, #0
   14444:	bx	lr
   14448:	ldr	r2, [r1, #8]
   1444c:	cmp	r2, #0
   14450:	bne	14440 <__assert_fail@plt+0x2fd4>
   14454:	ldr	r2, [r0, #12]
   14458:	ldr	r1, [r1, #12]
   1445c:	orr	r2, r2, r1
   14460:	tst	r2, #16
   14464:	ldreq	r2, [r3]
   14468:	addeq	r1, r2, #1
   1446c:	streq	r1, [r3]
   14470:	ldreq	r3, [r0, #4]
   14474:	strbeq	r3, [r2]
   14478:	b	14440 <__assert_fail@plt+0x2fd4>
   1447c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14480:	sub	sp, sp, #12
   14484:	ldr	r4, [r0]
   14488:	ldr	r9, [r0, #8]
   1448c:	ldr	r5, [r0, #4]
   14490:	cmp	r5, #0
   14494:	beq	144e8 <__assert_fail@plt+0x307c>
   14498:	str	r3, [sp, #4]
   1449c:	str	r2, [sp]
   144a0:	mov	fp, r1
   144a4:	mov	sl, r4
   144a8:	mov	r8, #0
   144ac:	b	14528 <__assert_fail@plt+0x30bc>
   144b0:	and	r3, r6, #4
   144b4:	cmp	r3, #0
   144b8:	moveq	sl, r4
   144bc:	tst	r6, #2
   144c0:	beq	144cc <__assert_fail@plt+0x3060>
   144c4:	add	r9, r9, #1
   144c8:	b	14504 <__assert_fail@plt+0x3098>
   144cc:	ldr	r3, [sp, #4]
   144d0:	ldr	r2, [sp]
   144d4:	mov	r1, sl
   144d8:	mov	r0, r4
   144dc:	blx	fp
   144e0:	mov	r8, r0
   144e4:	b	144c4 <__assert_fail@plt+0x3058>
   144e8:	mov	r8, #0
   144ec:	mov	r0, r8
   144f0:	add	sp, sp, #12
   144f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f8:	ldrb	r3, [r9]
   144fc:	cmp	r3, r7
   14500:	beq	144b0 <__assert_fail@plt+0x3044>
   14504:	add	r4, r4, #24
   14508:	subs	r5, r5, #1
   1450c:	movne	r3, #1
   14510:	moveq	r3, #0
   14514:	cmp	r8, #0
   14518:	movne	r3, #0
   1451c:	andeq	r3, r3, #1
   14520:	cmp	r3, #0
   14524:	beq	144ec <__assert_fail@plt+0x3080>
   14528:	ldr	r6, [r4, #12]
   1452c:	tst	r6, #8
   14530:	bne	14504 <__assert_fail@plt+0x3098>
   14534:	ldr	r7, [r4, #4]
   14538:	sub	r3, r7, #1
   1453c:	cmp	r3, #254	; 0xfe
   14540:	bhi	14504 <__assert_fail@plt+0x3098>
   14544:	bl	112d4 <__ctype_b_loc@plt>
   14548:	ldr	r2, [r0]
   1454c:	lsl	r3, r7, #1
   14550:	ldrh	r3, [r2, r3]
   14554:	tst	r3, #16384	; 0x4000
   14558:	bne	144f8 <__assert_fail@plt+0x308c>
   1455c:	b	14504 <__assert_fail@plt+0x3098>
   14560:	push	{r4, r5, r6, lr}
   14564:	ldr	r4, [r0, #12]
   14568:	ands	r4, r4, #8
   1456c:	movne	r4, #0
   14570:	bne	145a0 <__assert_fail@plt+0x3134>
   14574:	ldr	r5, [r0, #4]
   14578:	sub	r3, r5, #1
   1457c:	cmp	r3, #254	; 0xfe
   14580:	bhi	145a0 <__assert_fail@plt+0x3134>
   14584:	bl	112d4 <__ctype_b_loc@plt>
   14588:	ldr	r2, [r0]
   1458c:	lsl	r3, r5, #1
   14590:	ldrh	r3, [r2, r3]
   14594:	and	r3, r3, #16384	; 0x4000
   14598:	cmp	r3, #0
   1459c:	movne	r4, r5
   145a0:	mov	r0, r4
   145a4:	pop	{r4, r5, r6, pc}
   145a8:	push	{r4, lr}
   145ac:	mov	r4, r0
   145b0:	bl	112d4 <__ctype_b_loc@plt>
   145b4:	b	145c0 <__assert_fail@plt+0x3154>
   145b8:	add	r3, r3, #1
   145bc:	str	r3, [r4]
   145c0:	ldr	r3, [r4]
   145c4:	ldrb	r2, [r3]
   145c8:	ldr	ip, [r0]
   145cc:	lsl	r1, r2, #1
   145d0:	ldrh	r1, [ip, r1]
   145d4:	tst	r1, #8192	; 0x2000
   145d8:	bne	145b8 <__assert_fail@plt+0x314c>
   145dc:	subs	ip, r2, #45	; 0x2d
   145e0:	movne	ip, #1
   145e4:	cmp	r2, #0
   145e8:	beq	1461c <__assert_fail@plt+0x31b0>
   145ec:	tst	r1, #8
   145f0:	bne	1461c <__assert_fail@plt+0x31b0>
   145f4:	add	r3, r3, #1
   145f8:	str	r3, [r4]
   145fc:	ldrb	r2, [r3]
   14600:	cmp	r2, #0
   14604:	beq	1461c <__assert_fail@plt+0x31b0>
   14608:	ldr	r1, [r0]
   1460c:	lsl	r2, r2, #1
   14610:	ldrh	r2, [r1, r2]
   14614:	tst	r2, #8
   14618:	beq	145f4 <__assert_fail@plt+0x3188>
   1461c:	mov	r0, ip
   14620:	pop	{r4, pc}
   14624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14628:	add	fp, sp, #32
   1462c:	sub	sp, sp, #12
   14630:	ldr	r5, [r0, #4]
   14634:	cmp	r5, #0
   14638:	bne	14644 <__assert_fail@plt+0x31d8>
   1463c:	sub	sp, fp, #32
   14640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14644:	mov	r9, r1
   14648:	mov	r6, r0
   1464c:	ldr	r0, [r0, #8]
   14650:	bl	11304 <strlen@plt>
   14654:	add	r3, r0, #15
   14658:	bic	r3, r3, #7
   1465c:	sub	sp, sp, r3
   14660:	mov	sl, sp
   14664:	sub	r7, fp, #36	; 0x24
   14668:	str	sp, [r7, #-4]!
   1466c:	ldr	r4, [r6]
   14670:	ldr	r8, [pc, #336]	; 147c8 <__assert_fail@plt+0x335c>
   14674:	ldr	r2, [r4, #20]
   14678:	mov	r3, r7
   1467c:	ldr	r2, [r2, #24]
   14680:	mov	r1, r8
   14684:	mov	r0, r4
   14688:	bl	1447c <__assert_fail@plt+0x3010>
   1468c:	add	r4, r4, #28
   14690:	subs	r5, r5, #1
   14694:	bne	14674 <__assert_fail@plt+0x3208>
   14698:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1469c:	cmp	sl, r3
   146a0:	bcc	146f8 <__assert_fail@plt+0x328c>
   146a4:	ldr	r4, [r6]
   146a8:	ldr	r5, [r6, #4]
   146ac:	cmp	r5, #0
   146b0:	beq	1463c <__assert_fail@plt+0x31d0>
   146b4:	ldr	r7, [pc, #272]	; 147cc <__assert_fail@plt+0x3360>
   146b8:	ldr	r2, [r4, #20]
   146bc:	mov	r3, r9
   146c0:	ldr	r2, [r2, #24]
   146c4:	mov	r1, r7
   146c8:	mov	r0, r4
   146cc:	bl	1447c <__assert_fail@plt+0x3010>
   146d0:	add	r4, r4, #28
   146d4:	subs	r5, r5, #1
   146d8:	bne	146b8 <__assert_fail@plt+0x324c>
   146dc:	ldr	r7, [r6]
   146e0:	ldr	r8, [r6, #4]
   146e4:	cmp	r8, #0
   146e8:	beq	1463c <__assert_fail@plt+0x31d0>
   146ec:	add	r7, r7, #28
   146f0:	ldr	sl, [pc, #216]	; 147d0 <__assert_fail@plt+0x3364>
   146f4:	b	147b0 <__assert_fail@plt+0x3344>
   146f8:	add	r2, r3, #1
   146fc:	str	r2, [fp, #-40]	; 0xffffffd8
   14700:	mov	r2, #0
   14704:	strb	r2, [r3]
   14708:	mov	r2, sl
   1470c:	ldr	r1, [pc, #192]	; 147d4 <__assert_fail@plt+0x3368>
   14710:	mov	r0, r9
   14714:	bl	19b18 <argp_parse@@Base+0x1f88>
   14718:	b	146a4 <__assert_fail@plt+0x3238>
   1471c:	tst	r1, #16
   14720:	bne	14744 <__assert_fail@plt+0x32d8>
   14724:	ldr	r3, [r6, #8]
   14728:	cmp	r3, #0
   1472c:	beq	14794 <__assert_fail@plt+0x3328>
   14730:	tst	r1, #1
   14734:	ldrne	r1, [pc, #156]	; 147d8 <__assert_fail@plt+0x336c>
   14738:	moveq	r1, sl
   1473c:	mov	r0, r9
   14740:	bl	19b18 <argp_parse@@Base+0x1f88>
   14744:	add	r4, r4, #24
   14748:	subs	r5, r5, #1
   1474c:	beq	147a4 <__assert_fail@plt+0x3338>
   14750:	ldr	r2, [r4]
   14754:	cmp	r2, #0
   14758:	beq	14744 <__assert_fail@plt+0x32d8>
   1475c:	ldr	r1, [r4, #12]
   14760:	and	r3, r1, #4
   14764:	cmp	r3, #0
   14768:	moveq	r6, r4
   1476c:	tst	r1, #2
   14770:	bne	14744 <__assert_fail@plt+0x32d8>
   14774:	ldr	r3, [r4, #8]
   14778:	ldr	r0, [r6, #12]
   1477c:	orr	r1, r1, r0
   14780:	cmp	r3, #0
   14784:	beq	1471c <__assert_fail@plt+0x32b0>
   14788:	tst	r1, #16
   1478c:	beq	14730 <__assert_fail@plt+0x32c4>
   14790:	b	14744 <__assert_fail@plt+0x32d8>
   14794:	ldr	r1, [pc, #64]	; 147dc <__assert_fail@plt+0x3370>
   14798:	mov	r0, r9
   1479c:	bl	19b18 <argp_parse@@Base+0x1f88>
   147a0:	b	14744 <__assert_fail@plt+0x32d8>
   147a4:	add	r7, r7, #28
   147a8:	subs	r8, r8, #1
   147ac:	beq	1463c <__assert_fail@plt+0x31d0>
   147b0:	ldr	r4, [r7, #-28]	; 0xffffffe4
   147b4:	ldr	r5, [r7, #-24]	; 0xffffffe8
   147b8:	cmp	r5, #0
   147bc:	beq	147a4 <__assert_fail@plt+0x3338>
   147c0:	mov	r6, r4
   147c4:	b	14750 <__assert_fail@plt+0x32e4>
   147c8:	andeq	r4, r1, r4, lsr r4
   147cc:	andeq	r4, r1, r4, ror sl
   147d0:	andeq	fp, r1, r0, asr ip
   147d4:	andeq	fp, r1, r8, lsr ip
   147d8:	andeq	fp, r1, r0, asr #24
   147dc:	andeq	fp, r1, ip, asr ip
   147e0:	push	{r4, r5, r6, lr}
   147e4:	mov	r5, r0
   147e8:	ldr	r0, [r0, #12]
   147ec:	cmp	r0, #0
   147f0:	beq	14808 <__assert_fail@plt+0x339c>
   147f4:	ldr	r4, [r0, #24]
   147f8:	bl	18784 <argp_parse@@Base+0xbf4>
   147fc:	mov	r0, r4
   14800:	cmp	r4, #0
   14804:	bne	147f4 <__assert_fail@plt+0x3388>
   14808:	ldr	r3, [r5, #4]
   1480c:	cmp	r3, #0
   14810:	bne	14820 <__assert_fail@plt+0x33b4>
   14814:	mov	r0, r5
   14818:	bl	18784 <argp_parse@@Base+0xbf4>
   1481c:	pop	{r4, r5, r6, pc}
   14820:	ldr	r0, [r5]
   14824:	bl	18784 <argp_parse@@Base+0xbf4>
   14828:	ldr	r0, [r5, #8]
   1482c:	bl	18784 <argp_parse@@Base+0xbf4>
   14830:	b	14814 <__assert_fail@plt+0x33a8>
   14834:	push	{r4, r5, r6, r7, r8, lr}
   14838:	mov	r6, r1
   1483c:	ldr	r7, [r0]
   14840:	ldr	r3, [r0, #4]
   14844:	sub	r8, r3, #1
   14848:	cmp	r3, #0
   1484c:	bne	148a8 <__assert_fail@plt+0x343c>
   14850:	mov	r7, #0
   14854:	b	14890 <__assert_fail@plt+0x3424>
   14858:	sub	r5, r5, #1
   1485c:	add	r4, r4, #24
   14860:	cmn	r5, #1
   14864:	beq	14898 <__assert_fail@plt+0x342c>
   14868:	ldr	r0, [r4, #-24]	; 0xffffffe8
   1486c:	cmp	r0, #0
   14870:	beq	14858 <__assert_fail@plt+0x33ec>
   14874:	ldr	r3, [r4, #-12]
   14878:	tst	r3, #2
   1487c:	bne	14858 <__assert_fail@plt+0x33ec>
   14880:	mov	r1, r6
   14884:	bl	11124 <strcmp@plt>
   14888:	cmp	r0, #0
   1488c:	bne	14858 <__assert_fail@plt+0x33ec>
   14890:	mov	r0, r7
   14894:	pop	{r4, r5, r6, r7, r8, pc}
   14898:	add	r7, r7, #28
   1489c:	sub	r8, r8, #1
   148a0:	cmn	r8, #1
   148a4:	beq	148c4 <__assert_fail@plt+0x3458>
   148a8:	ldr	r4, [r7]
   148ac:	ldr	r3, [r7, #4]
   148b0:	sub	r5, r3, #1
   148b4:	cmp	r3, #0
   148b8:	beq	14898 <__assert_fail@plt+0x342c>
   148bc:	add	r4, r4, #24
   148c0:	b	14868 <__assert_fail@plt+0x33fc>
   148c4:	mov	r7, #0
   148c8:	b	14890 <__assert_fail@plt+0x3424>
   148cc:	push	{r4, r5, r6, lr}
   148d0:	ldr	r4, [r0, #16]
   148d4:	ldr	r0, [r0, #8]
   148d8:	cmp	r0, #0
   148dc:	moveq	r5, #0
   148e0:	beq	148f4 <__assert_fail@plt+0x3488>
   148e4:	mov	r1, #10
   148e8:	bl	11310 <strchr@plt>
   148ec:	adds	r5, r0, #0
   148f0:	movne	r5, #1
   148f4:	cmp	r4, #0
   148f8:	beq	1491c <__assert_fail@plt+0x34b0>
   148fc:	ldr	r0, [r4]
   14900:	cmp	r0, #0
   14904:	beq	1491c <__assert_fail@plt+0x34b0>
   14908:	bl	148cc <__assert_fail@plt+0x3460>
   1490c:	add	r5, r5, r0
   14910:	ldr	r0, [r4, #16]!
   14914:	cmp	r0, #0
   14918:	bne	14908 <__assert_fail@plt+0x349c>
   1491c:	mov	r0, r5
   14920:	pop	{r4, r5, r6, pc}
   14924:	push	{r4, r5, r6, r7, r8, lr}
   14928:	mov	r4, r0
   1492c:	mov	r5, r1
   14930:	ldr	r3, [r0, #28]
   14934:	ldr	r2, [r0, #24]
   14938:	sub	r3, r3, r2
   1493c:	ldr	r2, [r0, #16]
   14940:	cmp	r3, r2
   14944:	bhi	14960 <__assert_fail@plt+0x34f4>
   14948:	ldr	r3, [r4, #20]
   1494c:	cmp	r3, #0
   14950:	subge	r5, r5, r3
   14954:	mov	r6, #32
   14958:	mov	r7, #1
   1495c:	b	1497c <__assert_fail@plt+0x3510>
   14960:	bl	19484 <argp_parse@@Base+0x18f4>
   14964:	b	14948 <__assert_fail@plt+0x34dc>
   14968:	ldr	r3, [r4, #28]
   1496c:	add	r2, r3, #1
   14970:	str	r2, [r4, #28]
   14974:	strb	r6, [r3]
   14978:	sub	r5, r5, #1
   1497c:	cmp	r5, #0
   14980:	ble	149ac <__assert_fail@plt+0x3540>
   14984:	ldr	r2, [r4, #28]
   14988:	ldr	r3, [r4, #32]
   1498c:	cmp	r2, r3
   14990:	bcc	14968 <__assert_fail@plt+0x34fc>
   14994:	mov	r1, r7
   14998:	mov	r0, r4
   1499c:	bl	19a28 <argp_parse@@Base+0x1e98>
   149a0:	cmp	r0, #0
   149a4:	beq	14978 <__assert_fail@plt+0x350c>
   149a8:	b	14968 <__assert_fail@plt+0x34fc>
   149ac:	pop	{r4, r5, r6, r7, r8, pc}
   149b0:	push	{r4, r5, r6, lr}
   149b4:	mov	r4, r0
   149b8:	mov	r5, r1
   149bc:	ldr	r3, [r0, #28]
   149c0:	ldr	r2, [r0, #24]
   149c4:	sub	r3, r3, r2
   149c8:	ldr	r2, [r0, #16]
   149cc:	cmp	r3, r2
   149d0:	bhi	14a14 <__assert_fail@plt+0x35a8>
   149d4:	ldr	r3, [r4, #20]
   149d8:	cmp	r3, #0
   149dc:	addge	r5, r5, r3
   149e0:	ldr	r3, [r4, #8]
   149e4:	cmp	r5, r3
   149e8:	bcc	14a34 <__assert_fail@plt+0x35c8>
   149ec:	ldr	r2, [r4, #28]
   149f0:	ldr	r3, [r4, #32]
   149f4:	cmp	r2, r3
   149f8:	bcs	14a1c <__assert_fail@plt+0x35b0>
   149fc:	ldr	r3, [r4, #28]
   14a00:	add	r2, r3, #1
   14a04:	str	r2, [r4, #28]
   14a08:	mov	r2, #10
   14a0c:	strb	r2, [r3]
   14a10:	pop	{r4, r5, r6, pc}
   14a14:	bl	19484 <argp_parse@@Base+0x18f4>
   14a18:	b	149d4 <__assert_fail@plt+0x3568>
   14a1c:	mov	r1, #1
   14a20:	mov	r0, r4
   14a24:	bl	19a28 <argp_parse@@Base+0x1e98>
   14a28:	cmp	r0, #0
   14a2c:	popeq	{r4, r5, r6, pc}
   14a30:	b	149fc <__assert_fail@plt+0x3590>
   14a34:	ldr	r2, [r4, #28]
   14a38:	ldr	r3, [r4, #32]
   14a3c:	cmp	r2, r3
   14a40:	bcs	14a5c <__assert_fail@plt+0x35f0>
   14a44:	ldr	r3, [r4, #28]
   14a48:	add	r2, r3, #1
   14a4c:	str	r2, [r4, #28]
   14a50:	mov	r2, #32
   14a54:	strb	r2, [r3]
   14a58:	pop	{r4, r5, r6, pc}
   14a5c:	mov	r1, #1
   14a60:	mov	r0, r4
   14a64:	bl	19a28 <argp_parse@@Base+0x1e98>
   14a68:	cmp	r0, #0
   14a6c:	bne	14a44 <__assert_fail@plt+0x35d8>
   14a70:	pop	{r4, r5, r6, pc}
   14a74:	push	{r4, r5, r6, lr}
   14a78:	ldr	r5, [r0, #8]
   14a7c:	ldr	r2, [r0, #12]
   14a80:	ldr	ip, [r1, #12]
   14a84:	orr	r2, r2, ip
   14a88:	cmp	r5, #0
   14a8c:	beq	14ad8 <__assert_fail@plt+0x366c>
   14a90:	tst	r2, #16
   14a94:	bne	14ad0 <__assert_fail@plt+0x3664>
   14a98:	mov	r6, r3
   14a9c:	mov	r4, r0
   14aa0:	tst	r2, #1
   14aa4:	bne	14ae8 <__assert_fail@plt+0x367c>
   14aa8:	mov	r0, r5
   14aac:	bl	11304 <strlen@plt>
   14ab0:	add	r1, r0, #6
   14ab4:	mov	r0, r6
   14ab8:	bl	149b0 <__assert_fail@plt+0x3544>
   14abc:	mov	r3, r5
   14ac0:	ldr	r2, [r4, #4]
   14ac4:	ldr	r1, [pc, #52]	; 14b00 <__assert_fail@plt+0x3694>
   14ac8:	mov	r0, r6
   14acc:	bl	19b18 <argp_parse@@Base+0x1f88>
   14ad0:	mov	r0, #0
   14ad4:	pop	{r4, r5, r6, pc}
   14ad8:	ldr	r5, [r1, #8]
   14adc:	cmp	r5, #0
   14ae0:	beq	14ad0 <__assert_fail@plt+0x3664>
   14ae4:	b	14a90 <__assert_fail@plt+0x3624>
   14ae8:	mov	r3, r5
   14aec:	ldr	r2, [r0, #4]
   14af0:	ldr	r1, [pc, #12]	; 14b04 <__assert_fail@plt+0x3698>
   14af4:	mov	r0, r6
   14af8:	bl	19b18 <argp_parse@@Base+0x1f88>
   14afc:	b	14ad0 <__assert_fail@plt+0x3664>
   14b00:	andeq	fp, r1, r0, ror ip
   14b04:	andeq	fp, r1, r4, ror #24
   14b08:	push	{r4, r5, r6, lr}
   14b0c:	subs	r5, r2, #0
   14b10:	popeq	{r4, r5, r6, pc}
   14b14:	ldr	ip, [r5, #20]
   14b18:	cmp	ip, #0
   14b1c:	popeq	{r4, r5, r6, pc}
   14b20:	mov	r6, r1
   14b24:	mov	r4, r0
   14b28:	mov	r1, r3
   14b2c:	mov	r0, r5
   14b30:	bl	18604 <argp_parse@@Base+0xa74>
   14b34:	ldr	r3, [r5, #20]
   14b38:	mov	r2, r0
   14b3c:	mov	r1, r4
   14b40:	mov	r0, r6
   14b44:	blx	r3
   14b48:	pop	{r4, r5, r6, pc}
   14b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b50:	sub	sp, sp, #28
   14b54:	str	r1, [sp, #16]
   14b58:	mov	r8, r2
   14b5c:	mov	r4, r3
   14b60:	ldr	r5, [sp, #64]	; 0x40
   14b64:	ldr	r3, [r2]
   14b68:	mov	r6, r3
   14b6c:	str	r3, [sp, #20]
   14b70:	ldr	sl, [r0, #16]
   14b74:	ldr	r2, [r0, #8]
   14b78:	mov	ip, r2
   14b7c:	str	r2, [sp, #12]
   14b80:	mov	r3, r1
   14b84:	mov	r2, r0
   14b88:	ldr	r1, [pc, #424]	; 14d38 <__assert_fail@plt+0x38cc>
   14b8c:	mov	r0, ip
   14b90:	bl	14b08 <__assert_fail@plt+0x369c>
   14b94:	subs	r3, r0, #0
   14b98:	str	r3, [sp, #8]
   14b9c:	beq	14d24 <__assert_fail@plt+0x38b8>
   14ba0:	mov	r1, #10
   14ba4:	mov	r0, r3
   14ba8:	bl	11184 <strchrnul@plt>
   14bac:	mov	r7, r0
   14bb0:	ldrb	r3, [r0]
   14bb4:	cmp	r3, #0
   14bb8:	beq	14cf4 <__assert_fail@plt+0x3888>
   14bbc:	ldrb	fp, [r6]
   14bc0:	cmp	fp, #0
   14bc4:	ble	14cec <__assert_fail@plt+0x3880>
   14bc8:	mov	r6, #0
   14bcc:	add	r9, r0, #1
   14bd0:	mov	r1, #10
   14bd4:	mov	r0, r9
   14bd8:	bl	11184 <strchrnul@plt>
   14bdc:	add	r6, r6, #1
   14be0:	cmp	r6, fp
   14be4:	bne	14bcc <__assert_fail@plt+0x3760>
   14be8:	mov	r7, r0
   14bec:	ldr	r3, [r8]
   14bf0:	add	r3, r3, #1
   14bf4:	str	r3, [r8]
   14bf8:	mov	fp, #1
   14bfc:	add	r1, r7, #1
   14c00:	sub	r1, r1, r9
   14c04:	mov	r0, r5
   14c08:	bl	149b0 <__assert_fail@plt+0x3544>
   14c0c:	sub	r6, r7, r9
   14c10:	ldr	r3, [r5, #28]
   14c14:	add	r3, r3, r6
   14c18:	ldr	r2, [r5, #32]
   14c1c:	cmp	r2, r3
   14c20:	bcs	14c38 <__assert_fail@plt+0x37cc>
   14c24:	mov	r1, r6
   14c28:	mov	r0, r5
   14c2c:	bl	19a28 <argp_parse@@Base+0x1e98>
   14c30:	cmp	r0, #0
   14c34:	beq	14c54 <__assert_fail@plt+0x37e8>
   14c38:	mov	r2, r6
   14c3c:	mov	r1, r9
   14c40:	ldr	r0, [r5, #28]
   14c44:	bl	111b4 <memcpy@plt>
   14c48:	ldr	r3, [r5, #28]
   14c4c:	add	r6, r3, r6
   14c50:	str	r6, [r5, #28]
   14c54:	ldr	r3, [sp, #12]
   14c58:	ldr	r2, [sp, #8]
   14c5c:	cmp	r3, r2
   14c60:	bne	14d00 <__assert_fail@plt+0x3894>
   14c64:	cmp	sl, #0
   14c68:	beq	14ca8 <__assert_fail@plt+0x383c>
   14c6c:	ldr	r0, [sl]
   14c70:	cmp	r0, #0
   14c74:	beq	14ca8 <__assert_fail@plt+0x383c>
   14c78:	mov	r3, r4
   14c7c:	ldr	r4, [sp, #16]
   14c80:	str	r5, [sp]
   14c84:	mov	r2, r8
   14c88:	mov	r1, r4
   14c8c:	bl	14b4c <__assert_fail@plt+0x36e0>
   14c90:	clz	r3, r0
   14c94:	lsr	r3, r3, #5
   14c98:	ldr	r0, [sl, #16]!
   14c9c:	cmp	r0, #0
   14ca0:	bne	14c80 <__assert_fail@plt+0x3814>
   14ca4:	mov	r4, r3
   14ca8:	cmp	r4, #0
   14cac:	moveq	fp, #0
   14cb0:	andne	fp, fp, #1
   14cb4:	cmp	fp, #0
   14cb8:	beq	14cdc <__assert_fail@plt+0x3870>
   14cbc:	ldrb	r3, [r7]
   14cc0:	cmp	r3, #0
   14cc4:	bne	14d0c <__assert_fail@plt+0x38a0>
   14cc8:	ldr	r2, [sp, #20]
   14ccc:	ldrb	r3, [r2]
   14cd0:	cmp	r3, #0
   14cd4:	movne	r3, #0
   14cd8:	strbne	r3, [r2]
   14cdc:	clz	r0, r4
   14ce0:	lsr	r0, r0, #5
   14ce4:	add	sp, sp, #28
   14ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cec:	ldr	r9, [sp, #8]
   14cf0:	b	14bec <__assert_fail@plt+0x3780>
   14cf4:	ldr	r9, [sp, #8]
   14cf8:	mov	fp, #0
   14cfc:	b	14bfc <__assert_fail@plt+0x3790>
   14d00:	mov	r0, r2
   14d04:	bl	18784 <argp_parse@@Base+0xbf4>
   14d08:	b	14c64 <__assert_fail@plt+0x37f8>
   14d0c:	ldr	r2, [sp, #20]
   14d10:	ldrb	r3, [r2]
   14d14:	add	r3, r3, #1
   14d18:	strb	r3, [r2]
   14d1c:	mov	r4, #0
   14d20:	b	14cdc <__assert_fail@plt+0x3870>
   14d24:	cmp	sl, #0
   14d28:	beq	14cdc <__assert_fail@plt+0x3870>
   14d2c:	ldr	r7, [sp, #8]
   14d30:	mov	fp, #0
   14d34:	b	14c6c <__assert_fail@plt+0x3800>
   14d38:	andeq	r0, r0, #6
   14d3c:	push	{r4, r5, r6, r7, r8, lr}
   14d40:	mov	r7, r0
   14d44:	mov	r4, r2
   14d48:	ldr	r3, [r2, #16]
   14d4c:	mov	r2, r1
   14d50:	ldr	r1, [pc, #448]	; 14f18 <__assert_fail@plt+0x3aac>
   14d54:	bl	14b08 <__assert_fail@plt+0x369c>
   14d58:	subs	r5, r0, #0
   14d5c:	beq	14eb0 <__assert_fail@plt+0x3a44>
   14d60:	ldrb	r3, [r5]
   14d64:	cmp	r3, #0
   14d68:	beq	14ea4 <__assert_fail@plt+0x3a38>
   14d6c:	ldr	r3, [r4, #8]
   14d70:	ldr	r3, [r3]
   14d74:	cmp	r3, #0
   14d78:	beq	14da4 <__assert_fail@plt+0x3938>
   14d7c:	ldr	r6, [r4, #4]
   14d80:	ldr	r2, [r6, #28]
   14d84:	ldr	r3, [r6, #32]
   14d88:	cmp	r2, r3
   14d8c:	bcs	14ec4 <__assert_fail@plt+0x3a58>
   14d90:	ldr	r3, [r6, #28]
   14d94:	add	r2, r3, #1
   14d98:	str	r2, [r6, #28]
   14d9c:	mov	r2, #10
   14da0:	strb	r2, [r3]
   14da4:	ldr	r8, [pc, #368]	; 14f1c <__assert_fail@plt+0x3ab0>
   14da8:	ldr	r1, [r8, #24]
   14dac:	ldr	r0, [r4, #4]
   14db0:	bl	14924 <__assert_fail@plt+0x34b8>
   14db4:	ldr	r6, [r4, #4]
   14db8:	ldr	r8, [r8, #24]
   14dbc:	ldr	r3, [r6, #28]
   14dc0:	ldr	r2, [r6, #24]
   14dc4:	sub	r3, r3, r2
   14dc8:	ldr	r2, [r6, #16]
   14dcc:	cmp	r3, r2
   14dd0:	bhi	14edc <__assert_fail@plt+0x3a70>
   14dd4:	str	r8, [r6, #4]
   14dd8:	ldr	r6, [r4, #4]
   14ddc:	ldr	r3, [pc, #312]	; 14f1c <__assert_fail@plt+0x3ab0>
   14de0:	ldr	r8, [r3, #24]
   14de4:	ldr	r3, [r6, #28]
   14de8:	ldr	r2, [r6, #24]
   14dec:	sub	r3, r3, r2
   14df0:	ldr	r2, [r6, #16]
   14df4:	cmp	r3, r2
   14df8:	bhi	14ee8 <__assert_fail@plt+0x3a7c>
   14dfc:	str	r8, [r6, #12]
   14e00:	mov	r0, r5
   14e04:	bl	11304 <strlen@plt>
   14e08:	subs	r8, r0, #0
   14e0c:	beq	14e58 <__assert_fail@plt+0x39ec>
   14e10:	ldr	r6, [r4, #4]
   14e14:	ldr	r3, [r6, #28]
   14e18:	add	r3, r3, r8
   14e1c:	ldr	r2, [r6, #32]
   14e20:	cmp	r2, r3
   14e24:	bcs	14e3c <__assert_fail@plt+0x39d0>
   14e28:	mov	r1, r8
   14e2c:	mov	r0, r6
   14e30:	bl	19a28 <argp_parse@@Base+0x1e98>
   14e34:	cmp	r0, #0
   14e38:	beq	14e58 <__assert_fail@plt+0x39ec>
   14e3c:	mov	r2, r8
   14e40:	mov	r1, r5
   14e44:	ldr	r0, [r6, #28]
   14e48:	bl	111b4 <memcpy@plt>
   14e4c:	ldr	r3, [r6, #28]
   14e50:	add	r8, r3, r8
   14e54:	str	r8, [r6, #28]
   14e58:	ldr	r6, [r4, #4]
   14e5c:	ldr	r3, [r6, #28]
   14e60:	ldr	r2, [r6, #24]
   14e64:	sub	r3, r3, r2
   14e68:	ldr	r2, [r6, #16]
   14e6c:	cmp	r3, r2
   14e70:	bhi	14ef4 <__assert_fail@plt+0x3a88>
   14e74:	mov	r3, #0
   14e78:	str	r3, [r6, #4]
   14e7c:	ldr	r6, [r4, #4]
   14e80:	ldr	r2, [r6, #28]
   14e84:	ldr	r3, [r6, #32]
   14e88:	cmp	r2, r3
   14e8c:	bcs	14f00 <__assert_fail@plt+0x3a94>
   14e90:	ldr	r3, [r6, #28]
   14e94:	add	r2, r3, #1
   14e98:	str	r2, [r6, #28]
   14e9c:	mov	r2, #10
   14ea0:	strb	r2, [r3]
   14ea4:	ldr	r3, [r4, #8]
   14ea8:	mov	r2, #1
   14eac:	str	r2, [r3, #4]
   14eb0:	cmp	r7, r5
   14eb4:	popeq	{r4, r5, r6, r7, r8, pc}
   14eb8:	mov	r0, r5
   14ebc:	bl	18784 <argp_parse@@Base+0xbf4>
   14ec0:	pop	{r4, r5, r6, r7, r8, pc}
   14ec4:	mov	r1, #1
   14ec8:	mov	r0, r6
   14ecc:	bl	19a28 <argp_parse@@Base+0x1e98>
   14ed0:	cmp	r0, #0
   14ed4:	beq	14da4 <__assert_fail@plt+0x3938>
   14ed8:	b	14d90 <__assert_fail@plt+0x3924>
   14edc:	mov	r0, r6
   14ee0:	bl	19484 <argp_parse@@Base+0x18f4>
   14ee4:	b	14dd4 <__assert_fail@plt+0x3968>
   14ee8:	mov	r0, r6
   14eec:	bl	19484 <argp_parse@@Base+0x18f4>
   14ef0:	b	14dfc <__assert_fail@plt+0x3990>
   14ef4:	mov	r0, r6
   14ef8:	bl	19484 <argp_parse@@Base+0x18f4>
   14efc:	b	14e74 <__assert_fail@plt+0x3a08>
   14f00:	mov	r1, #1
   14f04:	mov	r0, r6
   14f08:	bl	19a28 <argp_parse@@Base+0x1e98>
   14f0c:	cmp	r0, #0
   14f10:	beq	14ea4 <__assert_fail@plt+0x3a38>
   14f14:	b	14e90 <__assert_fail@plt+0x3a24>
   14f18:	andeq	r0, r0, #3
   14f1c:	andeq	sp, r2, r4, ror #11
   14f20:	push	{r4, r5, r6, r7, r8, lr}
   14f24:	mov	r6, r0
   14f28:	mov	r4, r1
   14f2c:	ldr	r3, [r1, #12]
   14f30:	cmp	r3, #0
   14f34:	beq	15054 <__assert_fail@plt+0x3be8>
   14f38:	ldr	r3, [r1, #8]
   14f3c:	ldr	r7, [r3]
   14f40:	ldr	r2, [r1]
   14f44:	ldr	r5, [r2, #16]
   14f48:	ldr	r3, [r3, #4]
   14f4c:	cmp	r3, #0
   14f50:	cmpne	r7, #0
   14f54:	beq	14f90 <__assert_fail@plt+0x3b24>
   14f58:	ldr	r2, [r2, #12]
   14f5c:	ldr	r3, [r7, #12]
   14f60:	cmp	r2, r3
   14f64:	beq	14f90 <__assert_fail@plt+0x3b24>
   14f68:	ldr	r8, [r1, #4]
   14f6c:	ldr	r2, [r8, #28]
   14f70:	ldr	r3, [r8, #32]
   14f74:	cmp	r2, r3
   14f78:	bcs	15030 <__assert_fail@plt+0x3bc4>
   14f7c:	ldr	r3, [r8, #28]
   14f80:	add	r2, r3, #1
   14f84:	str	r2, [r8, #28]
   14f88:	mov	r2, #10
   14f8c:	strb	r2, [r3]
   14f90:	cmp	r5, #0
   14f94:	beq	15018 <__assert_fail@plt+0x3bac>
   14f98:	ldr	r0, [r5]
   14f9c:	cmp	r0, #0
   14fa0:	beq	15018 <__assert_fail@plt+0x3bac>
   14fa4:	ldrb	r3, [r0]
   14fa8:	cmp	r3, #0
   14fac:	beq	15018 <__assert_fail@plt+0x3bac>
   14fb0:	cmp	r7, #0
   14fb4:	beq	14fe4 <__assert_fail@plt+0x3b78>
   14fb8:	ldr	r3, [r7, #16]
   14fbc:	cmp	r5, r3
   14fc0:	beq	15018 <__assert_fail@plt+0x3bac>
   14fc4:	cmp	r3, #0
   14fc8:	beq	14fe4 <__assert_fail@plt+0x3b78>
   14fcc:	ldr	r3, [r3, #12]
   14fd0:	cmp	r3, #0
   14fd4:	cmpne	r5, r3
   14fd8:	bne	14fcc <__assert_fail@plt+0x3b60>
   14fdc:	cmp	r5, r3
   14fe0:	beq	15018 <__assert_fail@plt+0x3bac>
   14fe4:	ldr	r3, [r4, #4]
   14fe8:	ldr	r7, [r3, #12]
   14fec:	mov	r2, r4
   14ff0:	ldr	r1, [r5, #16]
   14ff4:	bl	14d3c <__assert_fail@plt+0x38d0>
   14ff8:	ldr	r5, [r4, #4]
   14ffc:	ldr	r3, [r5, #28]
   15000:	ldr	r2, [r5, #24]
   15004:	sub	r3, r3, r2
   15008:	ldr	r2, [r5, #16]
   1500c:	cmp	r3, r2
   15010:	bhi	15048 <__assert_fail@plt+0x3bdc>
   15014:	str	r7, [r5, #12]
   15018:	mov	r3, #0
   1501c:	str	r3, [r4, #12]
   15020:	mov	r1, r6
   15024:	ldr	r0, [r4, #4]
   15028:	bl	14924 <__assert_fail@plt+0x34b8>
   1502c:	pop	{r4, r5, r6, r7, r8, pc}
   15030:	mov	r1, #1
   15034:	mov	r0, r8
   15038:	bl	19a28 <argp_parse@@Base+0x1e98>
   1503c:	cmp	r0, #0
   15040:	beq	14f90 <__assert_fail@plt+0x3b24>
   15044:	b	14f7c <__assert_fail@plt+0x3b10>
   15048:	mov	r0, r5
   1504c:	bl	19484 <argp_parse@@Base+0x18f4>
   15050:	b	15014 <__assert_fail@plt+0x3ba8>
   15054:	ldr	r5, [r1, #4]
   15058:	ldr	r3, [r5, #28]
   1505c:	add	r3, r3, #2
   15060:	ldr	r2, [r5, #32]
   15064:	cmp	r2, r3
   15068:	bcs	15080 <__assert_fail@plt+0x3c14>
   1506c:	mov	r1, #2
   15070:	mov	r0, r5
   15074:	bl	19a28 <argp_parse@@Base+0x1e98>
   15078:	cmp	r0, #0
   1507c:	beq	15020 <__assert_fail@plt+0x3bb4>
   15080:	ldr	r3, [r5, #28]
   15084:	ldr	r2, [pc, #20]	; 150a0 <__assert_fail@plt+0x3c34>
   15088:	ldrh	r2, [r2]
   1508c:	strh	r2, [r3]
   15090:	ldr	r3, [r5, #28]
   15094:	add	r3, r3, #2
   15098:	str	r3, [r5, #28]
   1509c:	b	15020 <__assert_fail@plt+0x3bb4>
   150a0:	andeq	sl, r1, r4, lsr #29
   150a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150a8:	sub	sp, sp, #28
   150ac:	mov	fp, r0
   150b0:	str	r1, [sp, #8]
   150b4:	mov	r6, r2
   150b8:	mov	r8, r3
   150bc:	ldr	r7, [sp, #64]	; 0x40
   150c0:	ldr	r5, [sp, #68]	; 0x44
   150c4:	ldr	r9, [r0, #12]
   150c8:	ldr	r3, [r0, #16]
   150cc:	str	r3, [sp, #16]
   150d0:	cmp	r9, #0
   150d4:	beq	15530 <__assert_fail@plt+0x40c4>
   150d8:	mov	r1, #11
   150dc:	mov	r0, r9
   150e0:	bl	11310 <strchr@plt>
   150e4:	cmp	r6, #0
   150e8:	beq	153e0 <__assert_fail@plt+0x3f74>
   150ec:	cmp	r0, #0
   150f0:	addne	r9, r0, #1
   150f4:	beq	15518 <__assert_fail@plt+0x40ac>
   150f8:	ldr	r3, [fp, #20]
   150fc:	cmp	r3, #0
   15100:	movne	sl, #0
   15104:	beq	15520 <__assert_fail@plt+0x40b4>
   15108:	ldr	r1, [sp, #8]
   1510c:	mov	r0, fp
   15110:	bl	18604 <argp_parse@@Base+0xa74>
   15114:	str	r0, [sp, #12]
   15118:	ldr	r3, [fp, #20]
   1511c:	ldr	r2, [pc, #1140]	; 15598 <__assert_fail@plt+0x412c>
   15120:	ldr	r0, [pc, #1140]	; 1559c <__assert_fail@plt+0x4130>
   15124:	cmp	r6, #0
   15128:	moveq	r0, r2
   1512c:	ldr	r2, [sp, #12]
   15130:	mov	r1, r9
   15134:	blx	r3
   15138:	mov	r4, r0
   1513c:	cmp	r4, #0
   15140:	beq	154d0 <__assert_fail@plt+0x4064>
   15144:	cmp	r8, #0
   15148:	beq	15170 <__assert_fail@plt+0x3d04>
   1514c:	ldr	r2, [r5, #28]
   15150:	ldr	r3, [r5, #32]
   15154:	cmp	r2, r3
   15158:	bcs	15424 <__assert_fail@plt+0x3fb8>
   1515c:	ldr	r3, [r5, #28]
   15160:	add	r2, r3, #1
   15164:	str	r2, [r5, #28]
   15168:	mov	r2, #10
   1516c:	strb	r2, [r3]
   15170:	cmp	r4, r9
   15174:	movne	r3, #0
   15178:	moveq	r3, #1
   1517c:	cmp	sl, #0
   15180:	moveq	r3, #0
   15184:	cmp	r3, #0
   15188:	beq	1543c <__assert_fail@plt+0x3fd0>
   1518c:	ldr	r3, [r5, #28]
   15190:	add	r3, r3, sl
   15194:	ldr	r2, [r5, #32]
   15198:	cmp	r2, r3
   1519c:	bcs	151b4 <__assert_fail@plt+0x3d48>
   151a0:	mov	r1, sl
   151a4:	mov	r0, r5
   151a8:	bl	19a28 <argp_parse@@Base+0x1e98>
   151ac:	cmp	r0, #0
   151b0:	beq	151d0 <__assert_fail@plt+0x3d64>
   151b4:	mov	r2, sl
   151b8:	mov	r1, r9
   151bc:	ldr	r0, [r5, #28]
   151c0:	bl	111b4 <memcpy@plt>
   151c4:	ldr	r3, [r5, #28]
   151c8:	add	r3, r3, sl
   151cc:	str	r3, [r5, #28]
   151d0:	ldr	r3, [r5, #28]
   151d4:	ldr	r2, [r5, #24]
   151d8:	sub	r3, r3, r2
   151dc:	ldr	r2, [r5, #16]
   151e0:	cmp	r3, r2
   151e4:	bhi	1549c <__assert_fail@plt+0x4030>
   151e8:	ldr	r3, [r5, #20]
   151ec:	bic	r3, r3, r3, asr #31
   151f0:	ldr	r2, [r5, #4]
   151f4:	cmp	r2, r3
   151f8:	bcs	15220 <__assert_fail@plt+0x3db4>
   151fc:	ldr	r2, [r5, #28]
   15200:	ldr	r3, [r5, #32]
   15204:	cmp	r2, r3
   15208:	bcs	154a8 <__assert_fail@plt+0x403c>
   1520c:	ldr	r3, [r5, #28]
   15210:	add	r2, r3, #1
   15214:	str	r2, [r5, #28]
   15218:	mov	r2, #10
   1521c:	strb	r2, [r3]
   15220:	cmp	r4, r9
   15224:	moveq	r4, #1
   15228:	bne	154c0 <__assert_fail@plt+0x4054>
   1522c:	cmp	r9, #0
   15230:	cmpne	sl, #0
   15234:	beq	1524c <__assert_fail@plt+0x3de0>
   15238:	ldr	r3, [fp, #20]
   1523c:	cmp	r3, #0
   15240:	beq	15358 <__assert_fail@plt+0x3eec>
   15244:	mov	r0, r9
   15248:	bl	18784 <argp_parse@@Base+0xbf4>
   1524c:	cmp	r6, #0
   15250:	beq	15358 <__assert_fail@plt+0x3eec>
   15254:	ldr	r3, [fp, #20]
   15258:	cmp	r3, #0
   1525c:	beq	15358 <__assert_fail@plt+0x3eec>
   15260:	ldr	r2, [sp, #12]
   15264:	mov	r1, #0
   15268:	ldr	r0, [pc, #816]	; 155a0 <__assert_fail@plt+0x4134>
   1526c:	blx	r3
   15270:	subs	r9, r0, #0
   15274:	beq	15358 <__assert_fail@plt+0x3eec>
   15278:	orrs	r3, r8, r4
   1527c:	beq	152a4 <__assert_fail@plt+0x3e38>
   15280:	ldr	r2, [r5, #28]
   15284:	ldr	r3, [r5, #32]
   15288:	cmp	r2, r3
   1528c:	bcs	154d8 <__assert_fail@plt+0x406c>
   15290:	ldr	r3, [r5, #28]
   15294:	add	r2, r3, #1
   15298:	str	r2, [r5, #28]
   1529c:	mov	r2, #10
   152a0:	strb	r2, [r3]
   152a4:	mov	r0, r9
   152a8:	bl	11304 <strlen@plt>
   152ac:	subs	r4, r0, #0
   152b0:	beq	152f8 <__assert_fail@plt+0x3e8c>
   152b4:	ldr	r3, [r5, #28]
   152b8:	add	r3, r3, r4
   152bc:	ldr	r2, [r5, #32]
   152c0:	cmp	r2, r3
   152c4:	bcs	152dc <__assert_fail@plt+0x3e70>
   152c8:	mov	r1, r4
   152cc:	mov	r0, r5
   152d0:	bl	19a28 <argp_parse@@Base+0x1e98>
   152d4:	cmp	r0, #0
   152d8:	beq	152f8 <__assert_fail@plt+0x3e8c>
   152dc:	mov	r2, r4
   152e0:	mov	r1, r9
   152e4:	ldr	r0, [r5, #28]
   152e8:	bl	111b4 <memcpy@plt>
   152ec:	ldr	r3, [r5, #28]
   152f0:	add	r4, r3, r4
   152f4:	str	r4, [r5, #28]
   152f8:	mov	r0, r9
   152fc:	bl	18784 <argp_parse@@Base+0xbf4>
   15300:	ldr	r3, [r5, #28]
   15304:	ldr	r2, [r5, #24]
   15308:	sub	r3, r3, r2
   1530c:	ldr	r2, [r5, #16]
   15310:	cmp	r3, r2
   15314:	bhi	154f0 <__assert_fail@plt+0x4084>
   15318:	ldr	r3, [r5, #20]
   1531c:	bic	r3, r3, r3, asr #31
   15320:	ldr	r2, [r5, #4]
   15324:	cmp	r2, r3
   15328:	movcs	r4, #1
   1532c:	bcs	15358 <__assert_fail@plt+0x3eec>
   15330:	ldr	r2, [r5, #28]
   15334:	ldr	r3, [r5, #32]
   15338:	cmp	r2, r3
   1533c:	bcs	154fc <__assert_fail@plt+0x4090>
   15340:	ldr	r3, [r5, #28]
   15344:	add	r2, r3, #1
   15348:	str	r2, [r5, #28]
   1534c:	mov	r2, #10
   15350:	strb	r2, [r3]
   15354:	mov	r4, #1
   15358:	ldr	r3, [sp, #16]
   1535c:	cmp	r3, #0
   15360:	beq	153d4 <__assert_fail@plt+0x3f68>
   15364:	ldr	r0, [r3]
   15368:	cmp	r0, #0
   1536c:	beq	153d4 <__assert_fail@plt+0x3f68>
   15370:	clz	r9, r7
   15374:	lsr	r9, r9, #5
   15378:	cmp	r7, #0
   1537c:	cmpne	r4, #0
   15380:	bne	153d4 <__assert_fail@plt+0x3f68>
   15384:	mov	sl, r3
   15388:	ldr	fp, [sp, #8]
   1538c:	orrs	r3, r8, r4
   15390:	str	r5, [sp, #4]
   15394:	str	r7, [sp]
   15398:	movne	r3, #1
   1539c:	moveq	r3, #0
   153a0:	mov	r2, r6
   153a4:	mov	r1, fp
   153a8:	bl	150a4 <__assert_fail@plt+0x3c38>
   153ac:	orr	r4, r4, r0
   153b0:	ldr	r0, [sl, #16]
   153b4:	cmp	r0, #0
   153b8:	beq	153d4 <__assert_fail@plt+0x3f68>
   153bc:	add	sl, sl, #16
   153c0:	cmp	r4, #0
   153c4:	movne	r3, r9
   153c8:	orreq	r3, r9, #1
   153cc:	cmp	r3, #0
   153d0:	bne	1538c <__assert_fail@plt+0x3f20>
   153d4:	mov	r0, r4
   153d8:	add	sp, sp, #28
   153dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e0:	cmp	r0, #0
   153e4:	beq	15568 <__assert_fail@plt+0x40fc>
   153e8:	sub	sl, r0, r9
   153ec:	ldr	r3, [fp, #20]
   153f0:	cmp	r3, #0
   153f4:	beq	15414 <__assert_fail@plt+0x3fa8>
   153f8:	cmp	sl, #0
   153fc:	beq	15108 <__assert_fail@plt+0x3c9c>
   15400:	mov	r1, sl
   15404:	mov	r0, r9
   15408:	bl	111a8 <strndup@plt>
   1540c:	mov	r9, r0
   15410:	b	15108 <__assert_fail@plt+0x3c9c>
   15414:	mov	r4, r9
   15418:	mov	r3, #0
   1541c:	str	r3, [sp, #12]
   15420:	b	15144 <__assert_fail@plt+0x3cd8>
   15424:	mov	r1, #1
   15428:	mov	r0, r5
   1542c:	bl	19a28 <argp_parse@@Base+0x1e98>
   15430:	cmp	r0, #0
   15434:	beq	15170 <__assert_fail@plt+0x3d04>
   15438:	b	1515c <__assert_fail@plt+0x3cf0>
   1543c:	mov	r0, r4
   15440:	bl	11304 <strlen@plt>
   15444:	subs	r3, r0, #0
   15448:	mov	r1, r3
   1544c:	str	r3, [sp, #20]
   15450:	beq	151d0 <__assert_fail@plt+0x3d64>
   15454:	ldr	r3, [r5, #28]
   15458:	add	r3, r3, r1
   1545c:	ldr	r2, [r5, #32]
   15460:	cmp	r2, r3
   15464:	bcs	15478 <__assert_fail@plt+0x400c>
   15468:	mov	r0, r5
   1546c:	bl	19a28 <argp_parse@@Base+0x1e98>
   15470:	cmp	r0, #0
   15474:	beq	151d0 <__assert_fail@plt+0x3d64>
   15478:	ldr	r2, [sp, #20]
   1547c:	mov	r1, r4
   15480:	ldr	r0, [r5, #28]
   15484:	bl	111b4 <memcpy@plt>
   15488:	ldr	r3, [r5, #28]
   1548c:	ldr	r2, [sp, #20]
   15490:	add	r3, r3, r2
   15494:	str	r3, [r5, #28]
   15498:	b	151d0 <__assert_fail@plt+0x3d64>
   1549c:	mov	r0, r5
   154a0:	bl	19484 <argp_parse@@Base+0x18f4>
   154a4:	b	151e8 <__assert_fail@plt+0x3d7c>
   154a8:	mov	r1, #1
   154ac:	mov	r0, r5
   154b0:	bl	19a28 <argp_parse@@Base+0x1e98>
   154b4:	cmp	r0, #0
   154b8:	beq	15220 <__assert_fail@plt+0x3db4>
   154bc:	b	1520c <__assert_fail@plt+0x3da0>
   154c0:	mov	r0, r4
   154c4:	bl	18784 <argp_parse@@Base+0xbf4>
   154c8:	mov	r4, #1
   154cc:	b	1522c <__assert_fail@plt+0x3dc0>
   154d0:	mov	r4, #0
   154d4:	b	1522c <__assert_fail@plt+0x3dc0>
   154d8:	mov	r1, #1
   154dc:	mov	r0, r5
   154e0:	bl	19a28 <argp_parse@@Base+0x1e98>
   154e4:	cmp	r0, #0
   154e8:	beq	152a4 <__assert_fail@plt+0x3e38>
   154ec:	b	15290 <__assert_fail@plt+0x3e24>
   154f0:	mov	r0, r5
   154f4:	bl	19484 <argp_parse@@Base+0x18f4>
   154f8:	b	15318 <__assert_fail@plt+0x3eac>
   154fc:	mov	r1, #1
   15500:	mov	r0, r5
   15504:	bl	19a28 <argp_parse@@Base+0x1e98>
   15508:	cmp	r0, #0
   1550c:	moveq	r4, #1
   15510:	beq	15358 <__assert_fail@plt+0x3eec>
   15514:	b	15340 <__assert_fail@plt+0x3ed4>
   15518:	mov	r9, #0
   1551c:	b	150f8 <__assert_fail@plt+0x3c8c>
   15520:	mov	r4, r9
   15524:	mov	sl, #0
   15528:	str	sl, [sp, #12]
   1552c:	b	1513c <__assert_fail@plt+0x3cd0>
   15530:	ldr	r3, [r0, #20]
   15534:	cmp	r3, #0
   15538:	movne	sl, #0
   1553c:	bne	15108 <__assert_fail@plt+0x3c9c>
   15540:	mov	r3, r9
   15544:	cmp	r9, #0
   15548:	moveq	r4, #0
   1554c:	streq	r4, [sp, #12]
   15550:	beq	1524c <__assert_fail@plt+0x3de0>
   15554:	mov	r4, r9
   15558:	mov	r9, r3
   1555c:	mov	sl, #0
   15560:	str	sl, [sp, #12]
   15564:	b	15144 <__assert_fail@plt+0x3cd8>
   15568:	ldr	r3, [fp, #20]
   1556c:	cmp	r3, #0
   15570:	moveq	r3, r9
   15574:	beq	15544 <__assert_fail@plt+0x40d8>
   15578:	ldr	r1, [sp, #8]
   1557c:	mov	r0, fp
   15580:	bl	18604 <argp_parse@@Base+0xa74>
   15584:	str	r0, [sp, #12]
   15588:	ldr	r3, [fp, #20]
   1558c:	mov	sl, #0
   15590:	ldr	r0, [pc]	; 15598 <__assert_fail@plt+0x412c>
   15594:	b	1512c <__assert_fail@plt+0x3cc0>
   15598:	andeq	r0, r0, #1
   1559c:	andeq	r0, r0, #2
   155a0:	andeq	r0, r0, #4
   155a4:	ldr	r3, [r0, #12]
   155a8:	ldr	r2, [r1, #12]
   155ac:	cmp	r3, r2
   155b0:	beq	15608 <__assert_fail@plt+0x419c>
   155b4:	push	{r4, r5, r6, lr}
   155b8:	mov	r5, r1
   155bc:	mov	r4, r0
   155c0:	mov	r1, r2
   155c4:	mov	r0, r3
   155c8:	bl	155a4 <__assert_fail@plt+0x4138>
   155cc:	subs	r3, r0, #0
   155d0:	bne	15600 <__assert_fail@plt+0x4194>
   155d4:	ldr	r0, [r4, #8]
   155d8:	ldr	r3, [r5, #8]
   155dc:	mvn	r2, r3
   155e0:	lsr	r2, r2, #31
   155e4:	cmp	r2, r0, lsr #31
   155e8:	subne	r3, r0, r3
   155ec:	subeq	r3, r3, r0
   155f0:	cmp	r3, #0
   155f4:	ldreq	r3, [r5, #4]
   155f8:	ldreq	r0, [r4, #4]
   155fc:	subeq	r3, r3, r0
   15600:	mov	r0, r3
   15604:	pop	{r4, r5, r6, pc}
   15608:	ldr	r2, [r0, #8]
   1560c:	ldr	r3, [r1, #8]
   15610:	mvn	ip, r3
   15614:	lsr	ip, ip, #31
   15618:	cmp	ip, r2, lsr #31
   1561c:	subne	r3, r2, r3
   15620:	subeq	r3, r3, r2
   15624:	cmp	r3, #0
   15628:	ldreq	r3, [r1, #4]
   1562c:	ldreq	r0, [r0, #4]
   15630:	subeq	r3, r3, r0
   15634:	mov	r0, r3
   15638:	bx	lr
   1563c:	push	{r4, r5, r6, r7, r8, lr}
   15640:	sub	sp, sp, #8
   15644:	ldr	lr, [r0, #16]
   15648:	cmp	lr, #0
   1564c:	movne	r2, lr
   15650:	bne	15660 <__assert_fail@plt+0x41f4>
   15654:	ldr	ip, [r0, #12]
   15658:	b	15670 <__assert_fail@plt+0x4204>
   1565c:	mov	r2, r3
   15660:	ldr	r3, [r2, #12]
   15664:	cmp	r3, #0
   15668:	bne	1565c <__assert_fail@plt+0x41f0>
   1566c:	ldr	ip, [r2, #8]
   15670:	ldr	r5, [r1, #16]
   15674:	cmp	r5, #0
   15678:	movne	r2, r5
   1567c:	bne	1568c <__assert_fail@plt+0x4220>
   15680:	ldr	r4, [r1, #12]
   15684:	b	1569c <__assert_fail@plt+0x4230>
   15688:	mov	r2, r3
   1568c:	ldr	r3, [r2, #12]
   15690:	cmp	r3, #0
   15694:	bne	15688 <__assert_fail@plt+0x421c>
   15698:	ldr	r4, [r2, #8]
   1569c:	mvn	r3, r4
   156a0:	lsr	r3, r3, #31
   156a4:	cmp	r3, ip, lsr #31
   156a8:	subne	r4, ip, r4
   156ac:	subeq	r4, r4, ip
   156b0:	cmp	r4, #0
   156b4:	bne	1571c <__assert_fail@plt+0x42b0>
   156b8:	adds	r4, r5, #0
   156bc:	movne	r4, #1
   156c0:	cmp	lr, #0
   156c4:	rsbeq	r4, r4, #0
   156c8:	rsbne	r4, r4, #1
   156cc:	cmp	r4, #0
   156d0:	bne	1571c <__assert_fail@plt+0x42b0>
   156d4:	mov	r6, r1
   156d8:	mov	r7, r0
   156dc:	cmp	lr, #0
   156e0:	beq	1576c <__assert_fail@plt+0x4300>
   156e4:	ldr	ip, [lr, #20]
   156e8:	ldr	r2, [r5, #20]
   156ec:	cmp	ip, r2
   156f0:	ble	15728 <__assert_fail@plt+0x42bc>
   156f4:	mov	r0, lr
   156f8:	ldr	r0, [r0, #12]
   156fc:	ldr	r3, [r0, #20]
   15700:	cmp	r2, r3
   15704:	blt	156f8 <__assert_fail@plt+0x428c>
   15708:	mov	r1, r5
   1570c:	bl	155a4 <__assert_fail@plt+0x4138>
   15710:	subs	r4, r0, #0
   15714:	cmp	r0, #0
   15718:	moveq	r4, #1
   1571c:	mov	r0, r4
   15720:	add	sp, sp, #8
   15724:	pop	{r4, r5, r6, r7, r8, pc}
   15728:	cmp	ip, r2
   1572c:	bge	15758 <__assert_fail@plt+0x42ec>
   15730:	mov	r1, r5
   15734:	ldr	r1, [r1, #12]
   15738:	ldr	r3, [r1, #20]
   1573c:	cmp	ip, r3
   15740:	blt	15734 <__assert_fail@plt+0x42c8>
   15744:	mov	r0, lr
   15748:	bl	155a4 <__assert_fail@plt+0x4138>
   1574c:	subs	r4, r0, #0
   15750:	mvneq	r4, #0
   15754:	b	1571c <__assert_fail@plt+0x42b0>
   15758:	mov	r1, r5
   1575c:	mov	r0, lr
   15760:	bl	155a4 <__assert_fail@plt+0x4138>
   15764:	subs	r4, r0, #0
   15768:	bne	1571c <__assert_fail@plt+0x42b0>
   1576c:	ldr	r3, [r7, #12]
   15770:	ldr	r4, [r6, #12]
   15774:	mvn	r2, r4
   15778:	lsr	r2, r2, #31
   1577c:	cmp	r2, r3, lsr #31
   15780:	subne	r4, r3, r4
   15784:	subeq	r4, r4, r3
   15788:	cmp	r4, #0
   1578c:	bne	1571c <__assert_fail@plt+0x42b0>
   15790:	mov	r0, r7
   15794:	bl	143e4 <__assert_fail@plt+0x2f78>
   15798:	mov	r5, r0
   1579c:	str	r0, [sp]
   157a0:	mov	r0, r6
   157a4:	bl	143e4 <__assert_fail@plt+0x2f78>
   157a8:	str	r0, [sp, #4]
   157ac:	ldr	r3, [r7]
   157b0:	ldr	r3, [r3, #12]
   157b4:	adds	r5, r5, #0
   157b8:	movne	r5, #1
   157bc:	ands	r3, r5, r3, lsr #3
   157c0:	beq	15904 <__assert_fail@plt+0x4498>
   157c4:	mov	r0, sp
   157c8:	bl	145a8 <__assert_fail@plt+0x313c>
   157cc:	adds	r5, r0, #0
   157d0:	movne	r5, #1
   157d4:	ldr	r3, [r6]
   157d8:	ldr	r0, [r3, #12]
   157dc:	ands	r0, r0, #8
   157e0:	beq	15800 <__assert_fail@plt+0x4394>
   157e4:	ldr	r3, [sp, #4]
   157e8:	cmp	r3, #0
   157ec:	beq	158fc <__assert_fail@plt+0x4490>
   157f0:	add	r0, sp, #4
   157f4:	bl	145a8 <__assert_fail@plt+0x313c>
   157f8:	adds	r0, r0, #0
   157fc:	movne	r0, #1
   15800:	subs	r4, r5, r0
   15804:	bne	1571c <__assert_fail@plt+0x42b0>
   15808:	ldr	r2, [r7, #20]
   1580c:	ldr	r4, [pc, #276]	; 15928 <__assert_fail@plt+0x44bc>
   15810:	mov	r3, #0
   15814:	ldr	r2, [r2, #24]
   15818:	mov	r1, r4
   1581c:	mov	r0, r7
   15820:	bl	1447c <__assert_fail@plt+0x3010>
   15824:	mov	r5, r0
   15828:	uxtb	r8, r0
   1582c:	ldr	r2, [r6, #20]
   15830:	mov	r3, #0
   15834:	ldr	r2, [r2, #24]
   15838:	mov	r1, r4
   1583c:	mov	r0, r6
   15840:	bl	1447c <__assert_fail@plt+0x3010>
   15844:	uxtb	r7, r0
   15848:	cmp	r8, #0
   1584c:	movne	r5, r8
   15850:	bne	15864 <__assert_fail@plt+0x43f8>
   15854:	ldr	r3, [sp]
   15858:	cmp	r3, #0
   1585c:	ldrbne	r5, [r3]
   15860:	moveq	r5, #0
   15864:	cmp	r7, #0
   15868:	uxtbne	r6, r0
   1586c:	bne	15880 <__assert_fail@plt+0x4414>
   15870:	ldr	r3, [sp, #4]
   15874:	cmp	r3, #0
   15878:	ldrbne	r6, [r3]
   1587c:	moveq	r6, #0
   15880:	bl	112b0 <__ctype_tolower_loc@plt>
   15884:	ldr	r3, [r0]
   15888:	ldr	r4, [r3, r5, lsl #2]
   1588c:	ldr	r3, [r3, r6, lsl #2]
   15890:	subs	r4, r4, r3
   15894:	bne	1571c <__assert_fail@plt+0x42b0>
   15898:	subs	r4, r6, r5
   1589c:	bne	1571c <__assert_fail@plt+0x42b0>
   158a0:	adds	r4, r7, #0
   158a4:	movne	r4, #1
   158a8:	cmp	r8, #0
   158ac:	rsbeq	r4, r4, #0
   158b0:	rsbne	r4, r4, #1
   158b4:	cmp	r4, #0
   158b8:	bne	1571c <__assert_fail@plt+0x42b0>
   158bc:	cmp	r8, #0
   158c0:	bne	1571c <__assert_fail@plt+0x42b0>
   158c4:	ldr	r0, [sp]
   158c8:	ldr	r1, [sp, #4]
   158cc:	adds	r4, r1, #0
   158d0:	movne	r4, #1
   158d4:	cmp	r0, #0
   158d8:	rsbeq	r4, r4, #0
   158dc:	rsbne	r4, r4, #1
   158e0:	cmp	r4, #0
   158e4:	bne	1571c <__assert_fail@plt+0x42b0>
   158e8:	cmp	r0, #0
   158ec:	beq	1571c <__assert_fail@plt+0x42b0>
   158f0:	bl	11238 <strcasecmp@plt>
   158f4:	mov	r4, r0
   158f8:	b	1571c <__assert_fail@plt+0x42b0>
   158fc:	mov	r0, r4
   15900:	b	15800 <__assert_fail@plt+0x4394>
   15904:	ldr	r3, [r6]
   15908:	ldr	r3, [r3, #12]
   1590c:	tst	r3, #8
   15910:	beq	15808 <__assert_fail@plt+0x439c>
   15914:	ldr	r3, [sp, #4]
   15918:	cmp	r3, #0
   1591c:	movne	r5, r4
   15920:	bne	157f0 <__assert_fail@plt+0x4384>
   15924:	b	15808 <__assert_fail@plt+0x439c>
   15928:	andeq	r4, r1, r0, ror #10
   1592c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15930:	sub	sp, sp, #52	; 0x34
   15934:	str	r0, [sp, #24]
   15938:	str	r1, [sp, #28]
   1593c:	ldr	r2, [r0, #16]
   15940:	str	r2, [sp, #8]
   15944:	ldr	r5, [r0]
   15948:	mov	r0, #16
   1594c:	bl	1938c <argp_parse@@Base+0x17fc>
   15950:	subs	fp, r0, #0
   15954:	beq	15984 <__assert_fail@plt+0x4518>
   15958:	mov	r3, #0
   1595c:	str	r3, [fp, #4]
   15960:	str	r3, [fp, #12]
   15964:	cmp	r5, r3
   15968:	beq	15b5c <__assert_fail@plt+0x46f0>
   1596c:	ldr	r4, [r5, #12]
   15970:	ands	r4, r4, #4
   15974:	bne	15998 <__assert_fail@plt+0x452c>
   15978:	add	r6, r5, #24
   1597c:	mov	r8, r3
   15980:	b	159c0 <__assert_fail@plt+0x4554>
   15984:	ldr	r3, [pc, #1576]	; 15fb4 <__assert_fail@plt+0x4b48>
   15988:	ldr	r2, [pc, #1576]	; 15fb8 <__assert_fail@plt+0x4b4c>
   1598c:	ldr	r1, [pc, #1576]	; 15fbc <__assert_fail@plt+0x4b50>
   15990:	ldr	r0, [pc, #1576]	; 15fc0 <__assert_fail@plt+0x4b54>
   15994:	bl	1146c <__assert_fail@plt>
   15998:	ldr	r3, [pc, #1556]	; 15fb4 <__assert_fail@plt+0x4b48>
   1599c:	mov	r2, #460	; 0x1cc
   159a0:	ldr	r1, [pc, #1556]	; 15fbc <__assert_fail@plt+0x4b50>
   159a4:	ldr	r0, [pc, #1560]	; 15fc4 <__assert_fail@plt+0x4b58>
   159a8:	bl	1146c <__assert_fail@plt>
   159ac:	ldr	r2, [fp, #4]
   159b0:	add	r2, r2, #1
   159b4:	str	r2, [fp, #4]
   159b8:	b	159e8 <__assert_fail@plt+0x457c>
   159bc:	add	r6, r6, #24
   159c0:	mov	r3, r6
   159c4:	ldr	r2, [r6, #-20]	; 0xffffffec
   159c8:	cmp	r2, #0
   159cc:	bne	159dc <__assert_fail@plt+0x4570>
   159d0:	ldr	r2, [r6, #-24]	; 0xffffffe8
   159d4:	cmp	r2, #0
   159d8:	beq	15a20 <__assert_fail@plt+0x45b4>
   159dc:	ldr	r2, [r3, #-12]
   159e0:	tst	r2, #4
   159e4:	beq	159ac <__assert_fail@plt+0x4540>
   159e8:	ldr	r2, [r3, #-12]
   159ec:	tst	r2, #8
   159f0:	bne	159bc <__assert_fail@plt+0x4550>
   159f4:	ldr	r7, [r3, #-20]	; 0xffffffec
   159f8:	sub	r3, r7, #1
   159fc:	cmp	r3, #254	; 0xfe
   15a00:	bhi	159bc <__assert_fail@plt+0x4550>
   15a04:	bl	112d4 <__ctype_b_loc@plt>
   15a08:	ldr	r3, [r0]
   15a0c:	lsl	r7, r7, #1
   15a10:	ldrh	r3, [r3, r7]
   15a14:	tst	r3, #16384	; 0x4000
   15a18:	addne	r8, r8, #1
   15a1c:	b	159bc <__assert_fail@plt+0x4550>
   15a20:	ldr	r2, [r6, #-8]
   15a24:	cmp	r2, #0
   15a28:	bne	159dc <__assert_fail@plt+0x4570>
   15a2c:	ldr	r2, [r6, #-4]
   15a30:	cmp	r2, #0
   15a34:	bne	159dc <__assert_fail@plt+0x4570>
   15a38:	ldr	r0, [fp, #4]
   15a3c:	rsb	r0, r0, r0, lsl #3
   15a40:	lsl	r0, r0, #2
   15a44:	bl	1938c <argp_parse@@Base+0x17fc>
   15a48:	str	r0, [fp]
   15a4c:	add	r0, r8, #1
   15a50:	bl	1938c <argp_parse@@Base+0x17fc>
   15a54:	str	r0, [fp, #8]
   15a58:	ldr	r8, [fp]
   15a5c:	cmp	r0, #0
   15a60:	cmpne	r8, #0
   15a64:	bne	15a7c <__assert_fail@plt+0x4610>
   15a68:	ldr	r3, [pc, #1348]	; 15fb4 <__assert_fail@plt+0x4b48>
   15a6c:	ldr	r2, [pc, #1364]	; 15fc8 <__assert_fail@plt+0x4b5c>
   15a70:	ldr	r1, [pc, #1348]	; 15fbc <__assert_fail@plt+0x4b50>
   15a74:	ldr	r0, [pc, #1360]	; 15fcc <__assert_fail@plt+0x4b60>
   15a78:	bl	1146c <__assert_fail@plt>
   15a7c:	ldr	r2, [fp, #4]
   15a80:	ldr	r3, [pc, #1352]	; 15fd0 <__assert_fail@plt+0x4b64>
   15a84:	cmp	r2, r3
   15a88:	addls	r8, r8, #28
   15a8c:	movls	r7, r0
   15a90:	movls	sl, #0
   15a94:	bls	15ae0 <__assert_fail@plt+0x4674>
   15a98:	ldr	r3, [pc, #1300]	; 15fb4 <__assert_fail@plt+0x4b48>
   15a9c:	mov	r2, #476	; 0x1dc
   15aa0:	ldr	r1, [pc, #1300]	; 15fbc <__assert_fail@plt+0x4b50>
   15aa4:	ldr	r0, [pc, #1320]	; 15fd4 <__assert_fail@plt+0x4b68>
   15aa8:	bl	1146c <__assert_fail@plt>
   15aac:	ldr	r3, [r5, #4]
   15ab0:	cmp	r3, #0
   15ab4:	addeq	r9, r4, #1
   15ab8:	movne	r9, r4
   15abc:	b	15b24 <__assert_fail@plt+0x46b8>
   15ac0:	ldr	r3, [r5, #16]
   15ac4:	cmp	r3, #0
   15ac8:	bne	15ed0 <__assert_fail@plt+0x4a64>
   15acc:	ldr	r3, [r5, #20]
   15ad0:	cmp	r3, #0
   15ad4:	bne	15ed0 <__assert_fail@plt+0x4a64>
   15ad8:	add	r8, r8, #28
   15adc:	mov	r4, r9
   15ae0:	ldr	r3, [r5, #4]
   15ae4:	cmp	r3, #0
   15ae8:	bne	15af8 <__assert_fail@plt+0x468c>
   15aec:	ldr	r3, [r5]
   15af0:	cmp	r3, #0
   15af4:	beq	15b3c <__assert_fail@plt+0x46d0>
   15af8:	mov	r6, r8
   15afc:	str	r5, [r8, #-28]	; 0xffffffe4
   15b00:	str	sl, [r8, #-24]	; 0xffffffe8
   15b04:	str	r7, [r8, #-20]	; 0xffffffec
   15b08:	ldr	r9, [r5, #20]
   15b0c:	cmp	r9, #0
   15b10:	bne	15b24 <__assert_fail@plt+0x46b8>
   15b14:	ldr	r3, [r5]
   15b18:	cmp	r3, #0
   15b1c:	movne	r9, r4
   15b20:	beq	15aac <__assert_fail@plt+0x4640>
   15b24:	str	r9, [r6, #-16]
   15b28:	ldr	r3, [sp, #28]
   15b2c:	str	r3, [r6, #-12]
   15b30:	ldr	r3, [sp, #24]
   15b34:	str	r3, [r6, #-8]
   15b38:	b	15edc <__assert_fail@plt+0x4a70>
   15b3c:	ldr	r3, [r5, #16]
   15b40:	cmp	r3, #0
   15b44:	bne	15af8 <__assert_fail@plt+0x468c>
   15b48:	ldr	r3, [r5, #20]
   15b4c:	cmp	r3, #0
   15b50:	bne	15af8 <__assert_fail@plt+0x468c>
   15b54:	mov	r3, #0
   15b58:	strb	r3, [r7]
   15b5c:	ldr	r3, [sp, #8]
   15b60:	cmp	r3, #0
   15b64:	beq	15ea0 <__assert_fail@plt+0x4a34>
   15b68:	ldr	r3, [r3]
   15b6c:	cmp	r3, #0
   15b70:	beq	15ea0 <__assert_fail@plt+0x4a34>
   15b74:	add	r3, fp, #12
   15b78:	str	r3, [sp, #44]	; 0x2c
   15b7c:	str	fp, [sp, #20]
   15b80:	b	15c10 <__assert_fail@plt+0x47a4>
   15b84:	ldr	r1, [sp, #28]
   15b88:	b	15c90 <__assert_fail@plt+0x4824>
   15b8c:	mov	r2, r3
   15b90:	ldr	r3, [r2, #24]
   15b94:	cmp	r3, #0
   15b98:	bne	15b8c <__assert_fail@plt+0x4720>
   15b9c:	add	r2, r2, #24
   15ba0:	ldr	r1, [sp, #16]
   15ba4:	ldr	r3, [r1, #12]
   15ba8:	str	r3, [r2]
   15bac:	mov	r2, #0
   15bb0:	str	r2, [r1, #12]
   15bb4:	ldr	r3, [r1, #4]
   15bb8:	cmp	r3, r2
   15bbc:	beq	15bf4 <__assert_fail@plt+0x4788>
   15bc0:	ldr	r0, [sp, #20]
   15bc4:	ldr	r2, [r0, #4]
   15bc8:	cmp	r2, #0
   15bcc:	bne	15cb8 <__assert_fail@plt+0x484c>
   15bd0:	str	r3, [r0, #4]
   15bd4:	mov	r2, r1
   15bd8:	ldr	r3, [r1]
   15bdc:	str	r3, [r0]
   15be0:	ldr	r3, [r2, #8]
   15be4:	str	r3, [r0, #8]
   15be8:	mov	r3, r2
   15bec:	mov	r2, #0
   15bf0:	str	r2, [r3, #4]
   15bf4:	ldr	r0, [sp, #16]
   15bf8:	bl	147e0 <__assert_fail@plt+0x3374>
   15bfc:	ldr	r2, [sp, #8]
   15c00:	ldr	r3, [r2, #16]!
   15c04:	str	r2, [sp, #8]
   15c08:	cmp	r3, #0
   15c0c:	beq	15e9c <__assert_fail@plt+0x4a30>
   15c10:	ldr	r3, [sp, #8]
   15c14:	ldr	r4, [r3, #12]
   15c18:	cmp	r4, #0
   15c1c:	bne	15c2c <__assert_fail@plt+0x47c0>
   15c20:	ldr	r3, [r3, #8]
   15c24:	cmp	r3, #0
   15c28:	beq	15b84 <__assert_fail@plt+0x4718>
   15c2c:	ldr	r2, [sp, #8]
   15c30:	ldr	r5, [r2, #8]
   15c34:	ldr	r7, [sp, #24]
   15c38:	ldr	r3, [r7, #16]
   15c3c:	sub	r3, r2, r3
   15c40:	asr	r6, r3, #4
   15c44:	mov	r0, #28
   15c48:	bl	1938c <argp_parse@@Base+0x17fc>
   15c4c:	subs	r1, r0, #0
   15c50:	beq	15c90 <__assert_fail@plt+0x4824>
   15c54:	str	r4, [r1, #8]
   15c58:	str	r5, [r1]
   15c5c:	str	r6, [r1, #4]
   15c60:	ldr	r3, [sp, #28]
   15c64:	str	r3, [r1, #12]
   15c68:	str	r7, [r1, #16]
   15c6c:	cmp	r3, #0
   15c70:	ldrne	r3, [r3, #20]
   15c74:	addne	r3, r3, #1
   15c78:	moveq	r3, #0
   15c7c:	str	r3, [r1, #20]
   15c80:	ldr	r2, [sp, #20]
   15c84:	ldr	r3, [r2, #12]
   15c88:	str	r3, [r1, #24]
   15c8c:	str	r1, [r2, #12]
   15c90:	ldr	r3, [sp, #8]
   15c94:	ldr	r0, [r3]
   15c98:	bl	1592c <__assert_fail@plt+0x44c0>
   15c9c:	str	r0, [sp, #16]
   15ca0:	ldr	r3, [sp, #20]
   15ca4:	ldr	r2, [r3, #12]
   15ca8:	cmp	r2, #0
   15cac:	ldreq	r2, [sp, #44]	; 0x2c
   15cb0:	bne	15b90 <__assert_fail@plt+0x4724>
   15cb4:	b	15ba0 <__assert_fail@plt+0x4734>
   15cb8:	add	r3, r3, r2
   15cbc:	str	r3, [sp, #36]	; 0x24
   15cc0:	rsb	r0, r3, r3, lsl #3
   15cc4:	lsl	r0, r0, #2
   15cc8:	bl	1938c <argp_parse@@Base+0x17fc>
   15ccc:	mov	r4, r0
   15cd0:	str	r0, [sp, #32]
   15cd4:	ldr	r3, [sp, #20]
   15cd8:	ldr	r0, [r3, #8]
   15cdc:	bl	11304 <strlen@plt>
   15ce0:	mov	r6, r0
   15ce4:	ldr	r3, [sp, #16]
   15ce8:	ldr	r0, [r3, #8]
   15cec:	bl	11304 <strlen@plt>
   15cf0:	add	r0, r6, r0
   15cf4:	add	r0, r0, #1
   15cf8:	bl	1938c <argp_parse@@Base+0x17fc>
   15cfc:	mov	sl, r0
   15d00:	cmp	r4, #0
   15d04:	cmpne	r0, #0
   15d08:	beq	15dd4 <__assert_fail@plt+0x4968>
   15d0c:	ldr	r3, [sp, #36]	; 0x24
   15d10:	ldr	r2, [pc, #696]	; 15fd0 <__assert_fail@plt+0x4b64>
   15d14:	cmp	r3, r2
   15d18:	bhi	15de8 <__assert_fail@plt+0x497c>
   15d1c:	ldr	r5, [sp, #20]
   15d20:	ldr	r2, [r5]
   15d24:	mov	r1, r2
   15d28:	str	r2, [sp, #40]	; 0x28
   15d2c:	ldr	r4, [r5, #4]
   15d30:	rsb	r7, r4, r4, lsl #3
   15d34:	lsl	r7, r7, #2
   15d38:	mov	r2, r7
   15d3c:	ldr	r8, [sp, #32]
   15d40:	mov	r0, r8
   15d44:	bl	112c8 <mempcpy@plt>
   15d48:	ldr	r3, [sp, #16]
   15d4c:	ldr	r1, [r3, #4]
   15d50:	str	r1, [sp, #4]
   15d54:	rsb	r2, r1, r1, lsl #3
   15d58:	lsl	r2, r2, #2
   15d5c:	ldr	r1, [r3]
   15d60:	bl	111b4 <memcpy@plt>
   15d64:	ldr	r5, [r5, #8]
   15d68:	mov	r2, r6
   15d6c:	mov	r1, r5
   15d70:	mov	r0, sl
   15d74:	bl	111b4 <memcpy@plt>
   15d78:	cmp	r4, #0
   15d7c:	beq	15dfc <__assert_fail@plt+0x4990>
   15d80:	mov	r2, r8
   15d84:	ldr	r3, [r2, #8]
   15d88:	sub	r3, r3, r5
   15d8c:	add	r3, sl, r3
   15d90:	str	r3, [r2, #8]
   15d94:	add	r2, r2, #28
   15d98:	subs	r4, r4, #1
   15d9c:	bne	15d84 <__assert_fail@plt+0x4918>
   15da0:	ldr	r3, [sp, #32]
   15da4:	add	r7, r3, r7
   15da8:	add	r3, sl, r6
   15dac:	str	r3, [sp, #12]
   15db0:	ldr	r2, [sp, #16]
   15db4:	ldr	r8, [r2, #8]
   15db8:	ldr	r2, [sp, #4]
   15dbc:	cmp	r2, #0
   15dc0:	beq	15e64 <__assert_fail@plt+0x49f8>
   15dc4:	add	r9, r7, #28
   15dc8:	mov	fp, r3
   15dcc:	sub	r7, r3, #1
   15dd0:	b	15e4c <__assert_fail@plt+0x49e0>
   15dd4:	ldr	r3, [pc, #508]	; 15fd8 <__assert_fail@plt+0x4b6c>
   15dd8:	ldr	r2, [pc, #508]	; 15fdc <__assert_fail@plt+0x4b70>
   15ddc:	ldr	r1, [pc, #472]	; 15fbc <__assert_fail@plt+0x4b50>
   15de0:	ldr	r0, [pc, #504]	; 15fe0 <__assert_fail@plt+0x4b74>
   15de4:	bl	1146c <__assert_fail@plt>
   15de8:	ldr	r3, [pc, #488]	; 15fd8 <__assert_fail@plt+0x4b6c>
   15dec:	mov	r2, #972	; 0x3cc
   15df0:	ldr	r1, [pc, #452]	; 15fbc <__assert_fail@plt+0x4b50>
   15df4:	ldr	r0, [pc, #488]	; 15fe4 <__assert_fail@plt+0x4b78>
   15df8:	bl	1146c <__assert_fail@plt>
   15dfc:	ldr	r7, [sp, #32]
   15e00:	b	15da8 <__assert_fail@plt+0x493c>
   15e04:	ldr	r3, [sp, #12]
   15e08:	cmp	sl, r3
   15e0c:	bcs	15fa4 <__assert_fail@plt+0x4b38>
   15e10:	ldrb	r3, [sl]
   15e14:	cmp	r3, r1
   15e18:	beq	15fac <__assert_fail@plt+0x4b40>
   15e1c:	mov	r3, sl
   15e20:	cmp	r7, r3
   15e24:	beq	15fa4 <__assert_fail@plt+0x4b38>
   15e28:	ldrb	r2, [r3, #1]!
   15e2c:	cmp	r2, r1
   15e30:	bne	15e20 <__assert_fail@plt+0x49b4>
   15e34:	b	15fac <__assert_fail@plt+0x4b40>
   15e38:	add	r9, r9, #28
   15e3c:	ldr	r3, [sp, #4]
   15e40:	subs	r3, r3, #1
   15e44:	str	r3, [sp, #4]
   15e48:	beq	15e68 <__assert_fail@plt+0x49fc>
   15e4c:	str	fp, [r9, #-20]	; 0xffffffec
   15e50:	ldr	r5, [r9, #-24]	; 0xffffffe8
   15e54:	ldr	r4, [r9, #-28]	; 0xffffffe4
   15e58:	cmp	r5, #0
   15e5c:	bne	15f6c <__assert_fail@plt+0x4b00>
   15e60:	b	15e38 <__assert_fail@plt+0x49cc>
   15e64:	ldr	fp, [sp, #12]
   15e68:	mov	r3, #0
   15e6c:	strb	r3, [fp]
   15e70:	ldr	r0, [sp, #40]	; 0x28
   15e74:	bl	18784 <argp_parse@@Base+0xbf4>
   15e78:	ldr	r4, [sp, #20]
   15e7c:	ldr	r0, [r4, #8]
   15e80:	bl	18784 <argp_parse@@Base+0xbf4>
   15e84:	ldr	r2, [sp, #32]
   15e88:	str	r2, [r4]
   15e8c:	ldr	r2, [sp, #36]	; 0x24
   15e90:	str	r2, [r4, #4]
   15e94:	str	sl, [r4, #8]
   15e98:	b	15bf4 <__assert_fail@plt+0x4788>
   15e9c:	ldr	fp, [sp, #20]
   15ea0:	mov	r0, fp
   15ea4:	add	sp, sp, #52	; 0x34
   15ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eac:	strb	r4, [r7]
   15eb0:	add	r7, r7, #1
   15eb4:	add	r5, r5, #24
   15eb8:	ldr	r3, [r5, #4]
   15ebc:	cmp	r3, #0
   15ec0:	bne	15ed0 <__assert_fail@plt+0x4a64>
   15ec4:	ldr	r3, [r5]
   15ec8:	cmp	r3, #0
   15ecc:	beq	15ac0 <__assert_fail@plt+0x4654>
   15ed0:	ldr	r3, [r5, #12]
   15ed4:	tst	r3, #4
   15ed8:	beq	15ad8 <__assert_fail@plt+0x466c>
   15edc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   15ee0:	add	r3, r3, #1
   15ee4:	str	r3, [r6, #-24]	; 0xffffffe8
   15ee8:	ldr	r3, [r5, #12]
   15eec:	tst	r3, #8
   15ef0:	bne	15eb4 <__assert_fail@plt+0x4a48>
   15ef4:	ldr	r4, [r5, #4]
   15ef8:	sub	r3, r4, #1
   15efc:	cmp	r3, #254	; 0xfe
   15f00:	bhi	15eb4 <__assert_fail@plt+0x4a48>
   15f04:	bl	112d4 <__ctype_b_loc@plt>
   15f08:	ldr	r2, [r0]
   15f0c:	lsl	r3, r4, #1
   15f10:	ldrh	r3, [r2, r3]
   15f14:	tst	r3, #16384	; 0x4000
   15f18:	beq	15eb4 <__assert_fail@plt+0x4a48>
   15f1c:	uxtb	r4, r4
   15f20:	ldr	r3, [fp, #8]
   15f24:	cmp	r3, r7
   15f28:	bcs	15eac <__assert_fail@plt+0x4a40>
   15f2c:	ldrb	r2, [r3]
   15f30:	cmp	r2, r4
   15f34:	beq	15eb4 <__assert_fail@plt+0x4a48>
   15f38:	sub	r1, r7, #1
   15f3c:	cmp	r3, r1
   15f40:	beq	15eac <__assert_fail@plt+0x4a40>
   15f44:	ldrb	r2, [r3, #1]!
   15f48:	cmp	r2, r4
   15f4c:	bne	15f3c <__assert_fail@plt+0x4ad0>
   15f50:	b	15eb4 <__assert_fail@plt+0x4a48>
   15f54:	ldrb	r1, [r8]
   15f58:	cmp	r1, r6
   15f5c:	beq	15e04 <__assert_fail@plt+0x4998>
   15f60:	add	r4, r4, #24
   15f64:	subs	r5, r5, #1
   15f68:	beq	15e38 <__assert_fail@plt+0x49cc>
   15f6c:	ldr	r3, [r4, #12]
   15f70:	tst	r3, #8
   15f74:	bne	15f60 <__assert_fail@plt+0x4af4>
   15f78:	ldr	r6, [r4, #4]
   15f7c:	sub	r3, r6, #1
   15f80:	cmp	r3, #254	; 0xfe
   15f84:	bhi	15f60 <__assert_fail@plt+0x4af4>
   15f88:	bl	112d4 <__ctype_b_loc@plt>
   15f8c:	ldr	r2, [r0]
   15f90:	lsl	r3, r6, #1
   15f94:	ldrh	r3, [r2, r3]
   15f98:	tst	r3, #16384	; 0x4000
   15f9c:	bne	15f54 <__assert_fail@plt+0x4ae8>
   15fa0:	b	15f60 <__assert_fail@plt+0x4af4>
   15fa4:	strb	r1, [fp]
   15fa8:	add	fp, fp, #1
   15fac:	add	r8, r8, #1
   15fb0:	b	15f60 <__assert_fail@plt+0x4af4>
   15fb4:	muleq	r1, r0, fp
   15fb8:	andeq	r0, r0, r2, asr #3
   15fbc:	andeq	fp, r1, ip, ror ip
   15fc0:	andeq	fp, r1, r8, lsl #25
   15fc4:	andeq	fp, r1, ip, lsl #25
   15fc8:	ldrdeq	r0, [r0], -sl
   15fcc:	muleq	r1, ip, ip
   15fd0:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   15fd4:	andeq	fp, r1, r0, asr #25
   15fd8:	muleq	r1, ip, fp
   15fdc:	andeq	r0, r0, sl, asr #7
   15fe0:	strdeq	fp, [r1], -ip
   15fe4:	andeq	fp, r1, r8, lsl sp

00015fe8 <argp_failure@@Base>:
   15fe8:	push	{r3}		; (str r3, [sp, #-4]!)
   15fec:	push	{r4, r5, r6, r7, lr}
   15ff0:	sub	sp, sp, #200	; 0xc8
   15ff4:	mov	r7, r1
   15ff8:	mov	r6, r2
   15ffc:	subs	r5, r0, #0
   16000:	beq	16150 <argp_failure@@Base+0x168>
   16004:	ldr	r3, [r5, #16]
   16008:	tst	r3, #2
   1600c:	bne	16140 <argp_failure@@Base+0x158>
   16010:	ldr	r4, [r5, #44]	; 0x2c
   16014:	cmp	r4, #0
   16018:	beq	16140 <argp_failure@@Base+0x158>
   1601c:	mov	r0, r4
   16020:	bl	11400 <flockfile@plt>
   16024:	ldr	r0, [r5, #40]	; 0x28
   16028:	mov	r1, r4
   1602c:	bl	1110c <fputs_unlocked@plt>
   16030:	ldr	r3, [sp, #220]	; 0xdc
   16034:	cmp	r3, #0
   16038:	beq	16094 <argp_failure@@Base+0xac>
   1603c:	add	r3, sp, #224	; 0xe0
   16040:	str	r3, [sp]
   16044:	ldr	r3, [r4, #20]
   16048:	ldr	r2, [r4, #24]
   1604c:	cmp	r3, r2
   16050:	addcc	r2, r3, #1
   16054:	strcc	r2, [r4, #20]
   16058:	movcc	r2, #58	; 0x3a
   1605c:	strbcc	r2, [r3]
   16060:	bcs	16174 <argp_failure@@Base+0x18c>
   16064:	ldr	r3, [r4, #20]
   16068:	ldr	r2, [r4, #24]
   1606c:	cmp	r3, r2
   16070:	addcc	r2, r3, #1
   16074:	strcc	r2, [r4, #20]
   16078:	movcc	r2, #32
   1607c:	strbcc	r2, [r3]
   16080:	bcs	16184 <argp_failure@@Base+0x19c>
   16084:	ldr	r2, [sp]
   16088:	ldr	r1, [sp, #220]	; 0xdc
   1608c:	mov	r0, r4
   16090:	bl	113c4 <vfprintf@plt>
   16094:	cmp	r6, #0
   16098:	beq	160fc <argp_failure@@Base+0x114>
   1609c:	ldr	r3, [r4, #20]
   160a0:	ldr	r2, [r4, #24]
   160a4:	cmp	r3, r2
   160a8:	addcc	r2, r3, #1
   160ac:	strcc	r2, [r4, #20]
   160b0:	movcc	r2, #58	; 0x3a
   160b4:	strbcc	r2, [r3]
   160b8:	bcs	16194 <argp_failure@@Base+0x1ac>
   160bc:	ldr	r3, [r4, #20]
   160c0:	ldr	r2, [r4, #24]
   160c4:	cmp	r3, r2
   160c8:	addcc	r2, r3, #1
   160cc:	strcc	r2, [r4, #20]
   160d0:	movcc	r2, #32
   160d4:	strbcc	r2, [r3]
   160d8:	bcs	161a4 <argp_failure@@Base+0x1bc>
   160dc:	mov	r2, #200	; 0xc8
   160e0:	mov	r1, sp
   160e4:	mov	r0, r6
   160e8:	bl	11340 <strerror_r@plt>
   160ec:	cmp	r0, #0
   160f0:	beq	161b4 <argp_failure@@Base+0x1cc>
   160f4:	mov	r1, r4
   160f8:	bl	1110c <fputs_unlocked@plt>
   160fc:	ldr	r3, [r4, #20]
   16100:	ldr	r2, [r4, #24]
   16104:	cmp	r3, r2
   16108:	addcc	r2, r3, #1
   1610c:	strcc	r2, [r4, #20]
   16110:	movcc	r2, #10
   16114:	strbcc	r2, [r3]
   16118:	bcs	161cc <argp_failure@@Base+0x1e4>
   1611c:	mov	r0, r4
   16120:	bl	11244 <funlockfile@plt>
   16124:	cmp	r7, #0
   16128:	beq	16140 <argp_failure@@Base+0x158>
   1612c:	cmp	r5, #0
   16130:	beq	161dc <argp_failure@@Base+0x1f4>
   16134:	ldr	r3, [r5, #16]
   16138:	tst	r3, #32
   1613c:	beq	161dc <argp_failure@@Base+0x1f4>
   16140:	add	sp, sp, #200	; 0xc8
   16144:	pop	{r4, r5, r6, r7, lr}
   16148:	add	sp, sp, #4
   1614c:	bx	lr
   16150:	ldr	r3, [pc, #140]	; 161e4 <argp_failure@@Base+0x1fc>
   16154:	ldr	r4, [r3]
   16158:	cmp	r4, #0
   1615c:	beq	16140 <argp_failure@@Base+0x158>
   16160:	mov	r0, r4
   16164:	bl	11400 <flockfile@plt>
   16168:	ldr	r3, [pc, #120]	; 161e8 <argp_failure@@Base+0x200>
   1616c:	ldr	r0, [r3]
   16170:	b	16028 <argp_failure@@Base+0x40>
   16174:	mov	r1, #58	; 0x3a
   16178:	mov	r0, r4
   1617c:	bl	11394 <__overflow@plt>
   16180:	b	16064 <argp_failure@@Base+0x7c>
   16184:	mov	r1, #32
   16188:	mov	r0, r4
   1618c:	bl	11394 <__overflow@plt>
   16190:	b	16084 <argp_failure@@Base+0x9c>
   16194:	mov	r1, #58	; 0x3a
   16198:	mov	r0, r4
   1619c:	bl	11394 <__overflow@plt>
   161a0:	b	160bc <argp_failure@@Base+0xd4>
   161a4:	mov	r1, #32
   161a8:	mov	r0, r4
   161ac:	bl	11394 <__overflow@plt>
   161b0:	b	160dc <argp_failure@@Base+0xf4>
   161b4:	mov	r0, r6
   161b8:	bl	112a4 <strerror@plt>
   161bc:	ldr	r3, [pc, #40]	; 161ec <argp_failure@@Base+0x204>
   161c0:	cmp	r0, #0
   161c4:	moveq	r0, r3
   161c8:	b	160f4 <argp_failure@@Base+0x10c>
   161cc:	mov	r1, #10
   161d0:	mov	r0, r4
   161d4:	bl	11394 <__overflow@plt>
   161d8:	b	1611c <argp_failure@@Base+0x134>
   161dc:	mov	r0, r7
   161e0:	bl	112ec <exit@plt>
   161e4:	andeq	sp, r2, r8, lsr #12
   161e8:	andeq	sp, r2, r0, lsr #12
   161ec:	andeq	fp, r1, ip, asr #26
   161f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f4:	add	fp, sp, #32
   161f8:	sub	sp, sp, #108	; 0x6c
   161fc:	str	r0, [fp, #-112]	; 0xffffff90
   16200:	str	r1, [fp, #-100]	; 0xffffff9c
   16204:	str	r3, [fp, #-104]	; 0xffffff98
   16208:	subs	r3, r2, #0
   1620c:	str	r3, [fp, #-132]	; 0xffffff7c
   16210:	beq	1727c <argp_failure@@Base+0x1294>
   16214:	mov	r0, r3
   16218:	bl	11400 <flockfile@plt>
   1621c:	ldr	r3, [pc, #3772]	; 170e0 <argp_failure@@Base+0x10f8>
   16220:	ldr	r3, [r3, #36]	; 0x24
   16224:	str	r3, [fp, #-108]	; 0xffffff94
   16228:	cmp	r3, #0
   1622c:	beq	16304 <argp_failure@@Base+0x31c>
   16230:	mov	r3, #0
   16234:	ldr	r2, [pc, #3748]	; 170e0 <argp_failure@@Base+0x10f8>
   16238:	ldr	r2, [r2, #32]
   1623c:	mov	r1, r3
   16240:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16244:	bl	1940c <argp_parse@@Base+0x187c>
   16248:	subs	sl, r0, #0
   1624c:	beq	166b0 <argp_failure@@Base+0x6c8>
   16250:	ldr	r3, [fp, #-104]	; 0xffffff98
   16254:	tst	r3, #11
   16258:	moveq	r3, #0
   1625c:	streq	r3, [fp, #-108]	; 0xffffff94
   16260:	bne	166bc <argp_failure@@Base+0x6d4>
   16264:	ldr	r3, [fp, #-104]	; 0xffffff98
   16268:	tst	r3, #3
   1626c:	moveq	r4, #0
   16270:	bne	16740 <argp_failure@@Base+0x758>
   16274:	ldr	r3, [fp, #-104]	; 0xffffff98
   16278:	tst	r3, #16
   1627c:	bne	1693c <argp_failure@@Base+0x954>
   16280:	ldr	r3, [fp, #-104]	; 0xffffff98
   16284:	tst	r3, #4
   16288:	bne	16964 <argp_failure@@Base+0x97c>
   1628c:	ldr	r3, [fp, #-104]	; 0xffffff98
   16290:	tst	r3, #8
   16294:	beq	171f0 <argp_failure@@Base+0x1208>
   16298:	ldr	r3, [fp, #-108]	; 0xffffff94
   1629c:	ldr	r3, [r3, #4]
   162a0:	cmp	r3, #0
   162a4:	beq	171f0 <argp_failure@@Base+0x1208>
   162a8:	cmp	r4, #0
   162ac:	beq	162d4 <argp_failure@@Base+0x2ec>
   162b0:	ldr	r2, [sl, #28]
   162b4:	ldr	r3, [sl, #32]
   162b8:	cmp	r2, r3
   162bc:	bcs	16980 <argp_failure@@Base+0x998>
   162c0:	ldr	r3, [sl, #28]
   162c4:	add	r2, r3, #1
   162c8:	str	r2, [sl, #28]
   162cc:	mov	r2, #10
   162d0:	strb	r2, [r3]
   162d4:	mov	r3, #0
   162d8:	str	r3, [fp, #-88]	; 0xffffffa8
   162dc:	str	r3, [fp, #-84]	; 0xffffffac
   162e0:	str	r3, [fp, #-80]	; 0xffffffb0
   162e4:	ldr	r3, [fp, #-108]	; 0xffffff94
   162e8:	ldr	r2, [r3]
   162ec:	str	r2, [fp, #-96]	; 0xffffffa0
   162f0:	ldr	r3, [r3, #4]
   162f4:	str	r3, [fp, #-120]	; 0xffffff88
   162f8:	cmp	r3, #0
   162fc:	bne	16d68 <argp_failure@@Base+0xd80>
   16300:	b	171ec <argp_failure@@Base+0x1204>
   16304:	ldr	r0, [pc, #3452]	; 17088 <argp_failure@@Base+0x10a0>
   16308:	bl	11274 <getenv@plt>
   1630c:	mov	r9, r0
   16310:	sub	ip, fp, #76	; 0x4c
   16314:	ldr	lr, [pc, #3524]	; 170e0 <argp_failure@@Base+0x10f8>
   16318:	ldm	lr!, {r0, r1, r2, r3}
   1631c:	stmia	ip!, {r0, r1, r2, r3}
   16320:	ldm	lr!, {r0, r1, r2, r3}
   16324:	stmia	ip!, {r0, r1, r2, r3}
   16328:	ldm	lr, {r0, r1}
   1632c:	stm	ip, {r0, r1}
   16330:	cmp	r9, #0
   16334:	ldrne	sl, [pc, #3408]	; 1708c <argp_failure@@Base+0x10a4>
   16338:	addne	r8, sl, #168	; 0xa8
   1633c:	bne	165e0 <argp_failure@@Base+0x5f8>
   16340:	b	16230 <argp_failure@@Base+0x248>
   16344:	mov	r5, r3
   16348:	mov	r9, r5
   1634c:	mov	r3, r5
   16350:	ldrb	r0, [r3], #1
   16354:	lsl	r2, r0, #1
   16358:	ldrh	r2, [r1, r2]
   1635c:	tst	r2, #8192	; 0x2000
   16360:	bne	16344 <argp_failure@@Base+0x35c>
   16364:	tst	r2, #1024	; 0x400
   16368:	beq	165d8 <argp_failure@@Base+0x5f0>
   1636c:	cmp	r0, #95	; 0x5f
   16370:	cmpne	r0, #45	; 0x2d
   16374:	moveq	r3, #1
   16378:	movne	r3, #0
   1637c:	lsl	r2, r2, #28
   16380:	orrs	r3, r3, r2, lsr #31
   16384:	beq	17300 <argp_failure@@Base+0x1318>
   16388:	mov	r4, r5
   1638c:	ldrb	r3, [r4, #1]!
   16390:	lsl	r2, r3, #1
   16394:	ldrh	r2, [r1, r2]
   16398:	lsl	r2, r2, #28
   1639c:	cmp	r3, #95	; 0x5f
   163a0:	cmpne	r3, #45	; 0x2d
   163a4:	moveq	r3, #1
   163a8:	movne	r3, #0
   163ac:	orrs	r3, r3, r2, lsr #31
   163b0:	bne	1638c <argp_failure@@Base+0x3a4>
   163b4:	sub	r5, r4, r5
   163b8:	ldrb	r3, [r4]
   163bc:	lsl	r2, r3, #1
   163c0:	ldrh	r2, [r1, r2]
   163c4:	tst	r2, #8192	; 0x2000
   163c8:	beq	163e0 <argp_failure@@Base+0x3f8>
   163cc:	ldrb	r3, [r4, #1]!
   163d0:	lsl	r2, r3, #1
   163d4:	ldrh	r2, [r1, r2]
   163d8:	tst	r2, #8192	; 0x2000
   163dc:	bne	163cc <argp_failure@@Base+0x3e4>
   163e0:	cmp	r3, #44	; 0x2c
   163e4:	cmpne	r3, #0
   163e8:	beq	17318 <argp_failure@@Base+0x1330>
   163ec:	cmp	r3, #61	; 0x3d
   163f0:	beq	16418 <argp_failure@@Base+0x430>
   163f4:	ldrb	r3, [r4]
   163f8:	lsl	r3, r3, #1
   163fc:	ldrh	r3, [r1, r3]
   16400:	tst	r3, #2048	; 0x800
   16404:	bne	16498 <argp_failure@@Base+0x4b0>
   16408:	ldr	r3, [fp, #-108]	; 0xffffff94
   1640c:	str	r3, [fp, #-96]	; 0xffffffa0
   16410:	str	r3, [fp, #-116]	; 0xffffff8c
   16414:	b	1732c <argp_failure@@Base+0x1344>
   16418:	add	r2, r4, #1
   1641c:	ldrb	r3, [r4, #1]
   16420:	lsl	r3, r3, #1
   16424:	ldrh	r3, [r1, r3]
   16428:	tst	r3, #8192	; 0x2000
   1642c:	beq	17310 <argp_failure@@Base+0x1328>
   16430:	ldrb	r3, [r2, #1]!
   16434:	lsl	r3, r3, #1
   16438:	ldrh	r3, [r1, r3]
   1643c:	tst	r3, #8192	; 0x2000
   16440:	bne	16430 <argp_failure@@Base+0x448>
   16444:	mov	r4, r2
   16448:	b	163f4 <argp_failure@@Base+0x40c>
   1644c:	ldrb	r3, [r9, #1]
   16450:	cmp	r3, #111	; 0x6f
   16454:	movne	r3, #1
   16458:	strne	r3, [fp, #-96]	; 0xffffffa0
   1645c:	strne	r3, [fp, #-116]	; 0xffffff8c
   16460:	bne	1732c <argp_failure@@Base+0x1344>
   16464:	ldrb	r3, [r9, #2]
   16468:	cmp	r3, #45	; 0x2d
   1646c:	movne	r3, #1
   16470:	strne	r3, [fp, #-96]	; 0xffffffa0
   16474:	strne	r3, [fp, #-116]	; 0xffffff8c
   16478:	bne	1732c <argp_failure@@Base+0x1344>
   1647c:	add	r9, r9, #3
   16480:	sub	r5, r5, #3
   16484:	ldr	r3, [fp, #-108]	; 0xffffff94
   16488:	str	r3, [fp, #-116]	; 0xffffff8c
   1648c:	mov	r3, #1
   16490:	str	r3, [fp, #-96]	; 0xffffffa0
   16494:	b	1732c <argp_failure@@Base+0x1344>
   16498:	mov	r2, #10
   1649c:	mov	r1, #0
   164a0:	mov	r0, r4
   164a4:	bl	11130 <strtol@plt>
   164a8:	str	r0, [fp, #-116]	; 0xffffff8c
   164ac:	ldr	r2, [r6]
   164b0:	ldrb	r3, [r4]
   164b4:	lsl	r3, r3, #1
   164b8:	ldrh	r3, [r2, r3]
   164bc:	tst	r3, #2048	; 0x800
   164c0:	beq	164d8 <argp_failure@@Base+0x4f0>
   164c4:	ldrb	r3, [r4, #1]!
   164c8:	lsl	r3, r3, #1
   164cc:	ldrh	r3, [r2, r3]
   164d0:	tst	r3, #2048	; 0x800
   164d4:	bne	164c4 <argp_failure@@Base+0x4dc>
   164d8:	ldrb	r3, [r4]
   164dc:	lsl	r3, r3, #1
   164e0:	ldrh	r3, [r2, r3]
   164e4:	tst	r3, #8192	; 0x2000
   164e8:	beq	1650c <argp_failure@@Base+0x524>
   164ec:	ldrb	r3, [r4, #1]!
   164f0:	lsl	r3, r3, #1
   164f4:	ldrh	r3, [r2, r3]
   164f8:	tst	r3, #8192	; 0x2000
   164fc:	bne	164ec <argp_failure@@Base+0x504>
   16500:	ldr	r3, [fp, #-108]	; 0xffffff94
   16504:	str	r3, [fp, #-96]	; 0xffffffa0
   16508:	b	1732c <argp_failure@@Base+0x1344>
   1650c:	ldr	r3, [fp, #-108]	; 0xffffff94
   16510:	str	r3, [fp, #-96]	; 0xffffffa0
   16514:	b	1732c <argp_failure@@Base+0x1344>
   16518:	str	r9, [sp, #4]
   1651c:	str	r7, [sp]
   16520:	ldr	r3, [pc, #2920]	; 17090 <argp_failure@@Base+0x10a8>
   16524:	mov	r2, #0
   16528:	mov	r1, r2
   1652c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16530:	bl	15fe8 <argp_failure@@Base>
   16534:	b	1659c <argp_failure@@Base+0x5b4>
   16538:	add	r6, r6, #16
   1653c:	cmp	r6, r8
   16540:	beq	165b8 <argp_failure@@Base+0x5d0>
   16544:	mov	r0, r6
   16548:	bl	11304 <strlen@plt>
   1654c:	mov	r7, r0
   16550:	cmp	r0, r5
   16554:	bne	16538 <argp_failure@@Base+0x550>
   16558:	mov	r2, r5
   1655c:	mov	r1, r6
   16560:	mov	r0, r9
   16564:	bl	11448 <strncmp@plt>
   16568:	cmp	r0, #0
   1656c:	bne	16538 <argp_failure@@Base+0x550>
   16570:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16574:	cmp	r3, #0
   16578:	beq	16588 <argp_failure@@Base+0x5a0>
   1657c:	ldrb	r3, [r6, #14]
   16580:	cmp	r3, #0
   16584:	beq	16518 <argp_failure@@Base+0x530>
   16588:	ldrb	r3, [r6, #15]
   1658c:	sub	r2, fp, #36	; 0x24
   16590:	add	r3, r2, r3
   16594:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16598:	str	r2, [r3, #-40]	; 0xffffffd8
   1659c:	cmp	r6, r8
   165a0:	beq	165b8 <argp_failure@@Base+0x5d0>
   165a4:	ldrb	r3, [r4]
   165a8:	cmp	r3, #44	; 0x2c
   165ac:	addeq	r9, r4, #1
   165b0:	movne	r9, r4
   165b4:	b	165e0 <argp_failure@@Base+0x5f8>
   165b8:	str	r9, [sp, #4]
   165bc:	str	r5, [sp]
   165c0:	ldr	r3, [pc, #2764]	; 17094 <argp_failure@@Base+0x10ac>
   165c4:	mov	r2, #0
   165c8:	mov	r1, r2
   165cc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   165d0:	bl	15fe8 <argp_failure@@Base>
   165d4:	b	165a4 <argp_failure@@Base+0x5bc>
   165d8:	cmp	r0, #0
   165dc:	bne	16600 <argp_failure@@Base+0x618>
   165e0:	ldrb	r3, [r9]
   165e4:	cmp	r3, #0
   165e8:	beq	16618 <argp_failure@@Base+0x630>
   165ec:	bl	112d4 <__ctype_b_loc@plt>
   165f0:	mov	r6, r0
   165f4:	ldr	r1, [r0]
   165f8:	mov	r5, r9
   165fc:	b	16348 <argp_failure@@Base+0x360>
   16600:	str	r5, [sp]
   16604:	ldr	r3, [pc, #2700]	; 17098 <argp_failure@@Base+0x10b0>
   16608:	mov	r2, #0
   1660c:	mov	r1, r2
   16610:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16614:	bl	15fe8 <argp_failure@@Base>
   16618:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1661c:	ldr	r3, [pc, #2680]	; 1709c <argp_failure@@Base+0x10b4>
   16620:	add	r1, r3, #144	; 0x90
   16624:	add	r3, r3, #16
   16628:	cmp	r3, r1
   1662c:	beq	16680 <argp_failure@@Base+0x698>
   16630:	ldrb	r2, [r3, #14]
   16634:	cmp	r2, #0
   16638:	bne	16624 <argp_failure@@Base+0x63c>
   1663c:	ldrb	r2, [r3, #15]
   16640:	cmp	r2, #32
   16644:	beq	16624 <argp_failure@@Base+0x63c>
   16648:	sub	ip, fp, #36	; 0x24
   1664c:	add	r2, ip, r2
   16650:	ldr	r2, [r2, #-40]	; 0xffffffd8
   16654:	cmp	r2, r0
   16658:	blt	16624 <argp_failure@@Base+0x63c>
   1665c:	str	r3, [sp, #4]
   16660:	ldr	r3, [pc, #2616]	; 170a0 <argp_failure@@Base+0x10b8>
   16664:	str	r3, [sp]
   16668:	ldr	r3, [pc, #2612]	; 170a4 <argp_failure@@Base+0x10bc>
   1666c:	mov	r2, #0
   16670:	mov	r1, r2
   16674:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16678:	bl	15fe8 <argp_failure@@Base>
   1667c:	b	16230 <argp_failure@@Base+0x248>
   16680:	ldr	r4, [pc, #2648]	; 170e0 <argp_failure@@Base+0x10f8>
   16684:	mov	ip, r4
   16688:	sub	lr, fp, #76	; 0x4c
   1668c:	ldm	lr!, {r0, r1, r2, r3}
   16690:	stmia	ip!, {r0, r1, r2, r3}
   16694:	ldm	lr!, {r0, r1, r2, r3}
   16698:	stmia	ip!, {r0, r1, r2, r3}
   1669c:	ldm	lr, {r0, r1}
   166a0:	stm	ip, {r0, r1}
   166a4:	mov	r3, #1
   166a8:	str	r3, [r4, #36]	; 0x24
   166ac:	b	16230 <argp_failure@@Base+0x248>
   166b0:	ldr	r0, [fp, #-132]	; 0xffffff7c
   166b4:	bl	11244 <funlockfile@plt>
   166b8:	b	1727c <argp_failure@@Base+0x1294>
   166bc:	mov	r1, #0
   166c0:	ldr	r0, [fp, #-112]	; 0xffffff90
   166c4:	bl	1592c <__assert_fail@plt+0x44c0>
   166c8:	str	r0, [fp, #-108]	; 0xffffff94
   166cc:	ldr	r1, [pc, #2516]	; 170a8 <argp_failure@@Base+0x10c0>
   166d0:	bl	14834 <__assert_fail@plt+0x33c8>
   166d4:	cmp	r0, #0
   166d8:	mvnne	r3, #0
   166dc:	strne	r3, [r0, #12]
   166e0:	ldr	r1, [pc, #2500]	; 170ac <argp_failure@@Base+0x10c4>
   166e4:	ldr	r0, [fp, #-108]	; 0xffffff94
   166e8:	bl	14834 <__assert_fail@plt+0x33c8>
   166ec:	cmp	r0, #0
   166f0:	mvnne	r3, #0
   166f4:	strne	r3, [r0, #12]
   166f8:	ldr	r0, [fp, #-108]	; 0xffffff94
   166fc:	ldr	r3, [r0, #4]
   16700:	cmp	r3, #0
   16704:	beq	16264 <argp_failure@@Base+0x27c>
   16708:	ldr	r2, [r0]
   1670c:	mov	r3, #0
   16710:	str	r3, [r2, #24]
   16714:	add	r3, r3, #1
   16718:	add	r2, r2, #28
   1671c:	ldr	r1, [r0, #4]
   16720:	cmp	r3, r1
   16724:	bcc	16710 <argp_failure@@Base+0x728>
   16728:	ldr	r3, [pc, #2432]	; 170b0 <argp_failure@@Base+0x10c8>
   1672c:	mov	r2, #28
   16730:	ldr	r0, [fp, #-108]	; 0xffffff94
   16734:	ldr	r0, [r0]
   16738:	bl	11418 <qsort@plt>
   1673c:	b	16264 <argp_failure@@Base+0x27c>
   16740:	ldr	r0, [fp, #-112]	; 0xffffff90
   16744:	bl	148cc <__assert_fail@plt+0x3460>
   16748:	mov	r2, r0
   1674c:	add	r3, r0, #14
   16750:	bic	r3, r3, #7
   16754:	sub	sp, sp, r3
   16758:	add	r8, sp, #8
   1675c:	mov	r1, #0
   16760:	mov	r0, r8
   16764:	bl	11358 <memset@plt>
   16768:	mov	r5, #1
   1676c:	ldr	r4, [pc, #2412]	; 170e0 <argp_failure@@Base+0x10f8>
   16770:	ldr	r9, [pc, #2364]	; 170b4 <argp_failure@@Base+0x10cc>
   16774:	str	r8, [fp, #-96]	; 0xffffffa0
   16778:	ldr	r8, [fp, #-104]	; 0xffffff98
   1677c:	b	1682c <argp_failure@@Base+0x844>
   16780:	mov	r0, sl
   16784:	bl	19484 <argp_parse@@Base+0x18f4>
   16788:	b	16848 <argp_failure@@Base+0x860>
   1678c:	mov	r0, sl
   16790:	bl	19484 <argp_parse@@Base+0x18f4>
   16794:	b	16890 <argp_failure@@Base+0x8a8>
   16798:	mov	r1, sl
   1679c:	ldr	r0, [fp, #-108]	; 0xffffff94
   167a0:	bl	14624 <__assert_fail@plt+0x31b8>
   167a4:	orr	r8, r8, #2
   167a8:	str	sl, [sp]
   167ac:	mov	r3, #1
   167b0:	sub	r2, fp, #76	; 0x4c
   167b4:	ldr	r1, [fp, #-100]	; 0xffffff9c
   167b8:	ldr	r0, [fp, #-112]	; 0xffffff90
   167bc:	bl	14b4c <__assert_fail@plt+0x36e0>
   167c0:	mov	r6, r0
   167c4:	ldr	r3, [sl, #28]
   167c8:	ldr	r2, [sl, #24]
   167cc:	sub	r3, r3, r2
   167d0:	ldr	r2, [sl, #16]
   167d4:	cmp	r3, r2
   167d8:	bhi	16900 <argp_failure@@Base+0x918>
   167dc:	str	r7, [sl, #12]
   167e0:	ldr	r3, [sl, #28]
   167e4:	ldr	r2, [sl, #24]
   167e8:	sub	r3, r3, r2
   167ec:	ldr	r2, [sl, #16]
   167f0:	cmp	r3, r2
   167f4:	bhi	1690c <argp_failure@@Base+0x924>
   167f8:	str	r5, [sl, #4]
   167fc:	ldr	r2, [sl, #28]
   16800:	ldr	r3, [sl, #32]
   16804:	cmp	r2, r3
   16808:	bcs	16918 <argp_failure@@Base+0x930>
   1680c:	ldr	r3, [sl, #28]
   16810:	add	r2, r3, #1
   16814:	str	r2, [sl, #28]
   16818:	mov	r2, #10
   1681c:	strb	r2, [r3]
   16820:	mov	r5, #0
   16824:	cmp	r6, r5
   16828:	beq	16930 <argp_failure@@Base+0x948>
   1682c:	ldr	r6, [r4, #28]
   16830:	ldr	r3, [sl, #28]
   16834:	ldr	r2, [sl, #24]
   16838:	sub	r3, r3, r2
   1683c:	ldr	r2, [sl, #16]
   16840:	cmp	r3, r2
   16844:	bhi	16780 <argp_failure@@Base+0x798>
   16848:	ldr	r7, [sl, #12]
   1684c:	str	r6, [sl, #12]
   16850:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16854:	str	r3, [fp, #-76]	; 0xffffffb4
   16858:	cmp	r5, #0
   1685c:	ldr	r3, [fp, #4]
   16860:	ldrne	r2, [pc, #2128]	; 170b8 <argp_failure@@Base+0x10d0>
   16864:	ldreq	r2, [pc, #2128]	; 170bc <argp_failure@@Base+0x10d4>
   16868:	mov	r1, r9
   1686c:	mov	r0, sl
   16870:	bl	19b18 <argp_parse@@Base+0x1f88>
   16874:	ldr	r6, [r4, #28]
   16878:	ldr	r3, [sl, #28]
   1687c:	ldr	r2, [sl, #24]
   16880:	sub	r3, r3, r2
   16884:	ldr	r2, [sl, #16]
   16888:	cmp	r3, r2
   1688c:	bhi	1678c <argp_failure@@Base+0x7a4>
   16890:	ldr	r5, [sl, #4]
   16894:	str	r6, [sl, #4]
   16898:	tst	r8, #2
   1689c:	beq	16798 <argp_failure@@Base+0x7b0>
   168a0:	ldr	r3, [fp, #-108]	; 0xffffff94
   168a4:	ldr	r3, [r3, #4]
   168a8:	cmp	r3, #0
   168ac:	beq	167a8 <argp_failure@@Base+0x7c0>
   168b0:	ldr	r3, [sl, #28]
   168b4:	add	r3, r3, #12
   168b8:	ldr	r2, [sl, #32]
   168bc:	cmp	r2, r3
   168c0:	bcs	168d8 <argp_failure@@Base+0x8f0>
   168c4:	mov	r1, #12
   168c8:	mov	r0, sl
   168cc:	bl	19a28 <argp_parse@@Base+0x1e98>
   168d0:	cmp	r0, #0
   168d4:	beq	167a8 <argp_failure@@Base+0x7c0>
   168d8:	ldr	ip, [sl, #28]
   168dc:	ldr	r3, [pc, #2012]	; 170c0 <argp_failure@@Base+0x10d8>
   168e0:	ldm	r3!, {r0, r1, r2}
   168e4:	str	r0, [ip]
   168e8:	str	r1, [ip, #4]
   168ec:	str	r2, [ip, #8]
   168f0:	ldr	r3, [sl, #28]
   168f4:	add	r3, r3, #12
   168f8:	str	r3, [sl, #28]
   168fc:	b	167a8 <argp_failure@@Base+0x7c0>
   16900:	mov	r0, sl
   16904:	bl	19484 <argp_parse@@Base+0x18f4>
   16908:	b	167dc <argp_failure@@Base+0x7f4>
   1690c:	mov	r0, sl
   16910:	bl	19484 <argp_parse@@Base+0x18f4>
   16914:	b	167f8 <argp_failure@@Base+0x810>
   16918:	mov	r1, #1
   1691c:	mov	r0, sl
   16920:	bl	19a28 <argp_parse@@Base+0x1e98>
   16924:	cmp	r0, #0
   16928:	beq	16820 <argp_failure@@Base+0x838>
   1692c:	b	1680c <argp_failure@@Base+0x824>
   16930:	str	r8, [fp, #-104]	; 0xffffff98
   16934:	mov	r4, #1
   16938:	b	16274 <argp_failure@@Base+0x28c>
   1693c:	str	sl, [sp, #4]
   16940:	mov	r3, #1
   16944:	str	r3, [sp]
   16948:	mov	r3, #0
   1694c:	mov	r2, r3
   16950:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16954:	ldr	r0, [fp, #-112]	; 0xffffff90
   16958:	bl	150a4 <__assert_fail@plt+0x3c38>
   1695c:	orr	r4, r4, r0
   16960:	b	16280 <argp_failure@@Base+0x298>
   16964:	ldr	r3, [fp, #4]
   16968:	mov	r2, r3
   1696c:	ldr	r1, [pc, #1872]	; 170c4 <argp_failure@@Base+0x10dc>
   16970:	mov	r0, sl
   16974:	bl	19b18 <argp_parse@@Base+0x1f88>
   16978:	mov	r4, #1
   1697c:	b	1628c <argp_failure@@Base+0x2a4>
   16980:	mov	r1, #1
   16984:	mov	r0, sl
   16988:	bl	19a28 <argp_parse@@Base+0x1e98>
   1698c:	cmp	r0, #0
   16990:	beq	162d4 <argp_failure@@Base+0x2ec>
   16994:	b	162c0 <argp_failure@@Base+0x2d8>
   16998:	mov	r0, sl
   1699c:	bl	19484 <argp_parse@@Base+0x18f4>
   169a0:	b	16d8c <argp_failure@@Base+0xda4>
   169a4:	add	r3, r3, #24
   169a8:	subs	r2, r2, #1
   169ac:	beq	169d0 <argp_failure@@Base+0x9e8>
   169b0:	ldr	r1, [r3, #-24]	; 0xffffffe8
   169b4:	cmp	r1, #0
   169b8:	beq	169a4 <argp_failure@@Base+0x9bc>
   169bc:	ldr	r1, [r3, #-12]
   169c0:	tst	r1, #2
   169c4:	bne	169a4 <argp_failure@@Base+0x9bc>
   169c8:	mov	r3, #1
   169cc:	str	r3, [fp, #-116]	; 0xffffff8c
   169d0:	ldr	r3, [pc, #1800]	; 170e0 <argp_failure@@Base+0x10f8>
   169d4:	ldr	r4, [r3, #8]
   169d8:	ldr	r3, [sl, #28]
   169dc:	ldr	r2, [sl, #24]
   169e0:	sub	r3, r3, r2
   169e4:	ldr	r2, [sl, #16]
   169e8:	cmp	r3, r2
   169ec:	bhi	16a0c <argp_failure@@Base+0xa24>
   169f0:	str	r4, [sl, #12]
   169f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   169f8:	ldr	r5, [r3, #4]
   169fc:	cmp	r5, #0
   16a00:	beq	16b08 <argp_failure@@Base+0xb20>
   16a04:	mov	r4, r8
   16a08:	b	1734c <argp_failure@@Base+0x1364>
   16a0c:	mov	r0, sl
   16a10:	bl	19484 <argp_parse@@Base+0x18f4>
   16a14:	b	169f0 <argp_failure@@Base+0xa08>
   16a18:	tst	r6, #2
   16a1c:	beq	16a28 <argp_failure@@Base+0xa40>
   16a20:	add	r9, r9, #1
   16a24:	b	17340 <argp_failure@@Base+0x1358>
   16a28:	sub	r1, fp, #76	; 0x4c
   16a2c:	ldr	r3, [pc, #1708]	; 170e0 <argp_failure@@Base+0x10f8>
   16a30:	ldr	r0, [r3, #8]
   16a34:	bl	14f20 <__assert_fail@plt+0x3ab4>
   16a38:	ldr	r2, [sl, #28]
   16a3c:	ldr	r3, [sl, #32]
   16a40:	cmp	r2, r3
   16a44:	bcs	16ac4 <argp_failure@@Base+0xadc>
   16a48:	ldr	r3, [sl, #28]
   16a4c:	add	r2, r3, #1
   16a50:	str	r2, [sl, #28]
   16a54:	mov	r2, #45	; 0x2d
   16a58:	strb	r2, [r3]
   16a5c:	ldrb	r6, [r9]
   16a60:	ldr	r2, [sl, #28]
   16a64:	ldr	r3, [sl, #32]
   16a68:	cmp	r2, r3
   16a6c:	bcs	16adc <argp_failure@@Base+0xaf4>
   16a70:	ldr	r3, [sl, #28]
   16a74:	add	r2, r3, #1
   16a78:	str	r2, [sl, #28]
   16a7c:	strb	r6, [r3]
   16a80:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16a84:	cmp	r3, #0
   16a88:	beq	16a9c <argp_failure@@Base+0xab4>
   16a8c:	ldr	r3, [pc, #1612]	; 170e0 <argp_failure@@Base+0x10f8>
   16a90:	ldr	r3, [r3]
   16a94:	cmp	r3, #0
   16a98:	beq	16af4 <argp_failure@@Base+0xb0c>
   16a9c:	ldr	r2, [r8, #8]
   16aa0:	cmp	r2, #0
   16aa4:	beq	16a20 <argp_failure@@Base+0xa38>
   16aa8:	ldr	r3, [r8, #12]
   16aac:	tst	r3, #1
   16ab0:	ldrne	r1, [pc, #1552]	; 170c8 <argp_failure@@Base+0x10e0>
   16ab4:	ldreq	r1, [pc, #1552]	; 170cc <argp_failure@@Base+0x10e4>
   16ab8:	mov	r0, sl
   16abc:	bl	19b18 <argp_parse@@Base+0x1f88>
   16ac0:	b	16a20 <argp_failure@@Base+0xa38>
   16ac4:	mov	r1, #1
   16ac8:	mov	r0, sl
   16acc:	bl	19a28 <argp_parse@@Base+0x1e98>
   16ad0:	cmp	r0, #0
   16ad4:	beq	16a5c <argp_failure@@Base+0xa74>
   16ad8:	b	16a48 <argp_failure@@Base+0xa60>
   16adc:	mov	r1, #1
   16ae0:	mov	r0, sl
   16ae4:	bl	19a28 <argp_parse@@Base+0x1e98>
   16ae8:	cmp	r0, #0
   16aec:	beq	16a80 <argp_failure@@Base+0xa98>
   16af0:	b	16a70 <argp_failure@@Base+0xa88>
   16af4:	ldr	r3, [r8, #8]
   16af8:	cmp	r3, #0
   16afc:	movne	r3, #1
   16b00:	strne	r3, [fp, #-80]	; 0xffffffb0
   16b04:	b	16a20 <argp_failure@@Base+0xa38>
   16b08:	ldr	r3, [r8, #12]
   16b0c:	tst	r3, #8
   16b10:	beq	16bec <argp_failure@@Base+0xc04>
   16b14:	ldr	r3, [pc, #1476]	; 170e0 <argp_failure@@Base+0x10f8>
   16b18:	ldr	r4, [r3, #16]
   16b1c:	ldr	r3, [sl, #28]
   16b20:	ldr	r2, [sl, #24]
   16b24:	sub	r3, r3, r2
   16b28:	ldr	r2, [sl, #16]
   16b2c:	cmp	r3, r2
   16b30:	bhi	16b50 <argp_failure@@Base+0xb68>
   16b34:	str	r4, [sl, #12]
   16b38:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16b3c:	ldr	r5, [r3, #4]
   16b40:	cmp	r5, #0
   16b44:	beq	16ca0 <argp_failure@@Base+0xcb8>
   16b48:	add	r4, r8, #24
   16b4c:	b	16b84 <argp_failure@@Base+0xb9c>
   16b50:	mov	r0, sl
   16b54:	bl	19484 <argp_parse@@Base+0x18f4>
   16b58:	b	16b34 <argp_failure@@Base+0xb4c>
   16b5c:	mov	r2, r6
   16b60:	mov	r1, r7
   16b64:	ldr	r0, [sl, #28]
   16b68:	bl	111b4 <memcpy@plt>
   16b6c:	ldr	r3, [sl, #28]
   16b70:	add	r6, r3, r6
   16b74:	str	r6, [sl, #28]
   16b78:	add	r4, r4, #24
   16b7c:	subs	r5, r5, #1
   16b80:	beq	16ca0 <argp_failure@@Base+0xcb8>
   16b84:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16b88:	cmp	r3, #0
   16b8c:	beq	16b78 <argp_failure@@Base+0xb90>
   16b90:	ldr	r3, [r4, #-12]
   16b94:	tst	r3, #2
   16b98:	bne	16b78 <argp_failure@@Base+0xb90>
   16b9c:	sub	r1, fp, #76	; 0x4c
   16ba0:	ldr	r3, [pc, #1336]	; 170e0 <argp_failure@@Base+0x10f8>
   16ba4:	ldr	r0, [r3, #16]
   16ba8:	bl	14f20 <__assert_fail@plt+0x3ab4>
   16bac:	ldr	r7, [r4, #-24]	; 0xffffffe8
   16bb0:	mov	r0, r7
   16bb4:	bl	11304 <strlen@plt>
   16bb8:	subs	r6, r0, #0
   16bbc:	beq	16b78 <argp_failure@@Base+0xb90>
   16bc0:	ldr	r3, [sl, #28]
   16bc4:	add	r3, r3, r6
   16bc8:	ldr	r2, [sl, #32]
   16bcc:	cmp	r2, r3
   16bd0:	bcs	16b5c <argp_failure@@Base+0xb74>
   16bd4:	mov	r1, r6
   16bd8:	mov	r0, sl
   16bdc:	bl	19a28 <argp_parse@@Base+0x1e98>
   16be0:	cmp	r0, #0
   16be4:	beq	16b78 <argp_failure@@Base+0xb90>
   16be8:	b	16b5c <argp_failure@@Base+0xb74>
   16bec:	ldr	r3, [pc, #1260]	; 170e0 <argp_failure@@Base+0x10f8>
   16bf0:	ldr	r4, [r3, #12]
   16bf4:	ldr	r3, [sl, #28]
   16bf8:	ldr	r2, [sl, #24]
   16bfc:	sub	r3, r3, r2
   16c00:	ldr	r2, [sl, #16]
   16c04:	cmp	r3, r2
   16c08:	bhi	16c28 <argp_failure@@Base+0xc40>
   16c0c:	str	r4, [sl, #12]
   16c10:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16c14:	ldr	r5, [r3, #4]
   16c18:	cmp	r5, #0
   16c1c:	beq	16ca0 <argp_failure@@Base+0xcb8>
   16c20:	add	r4, r8, #24
   16c24:	b	16c40 <argp_failure@@Base+0xc58>
   16c28:	mov	r0, sl
   16c2c:	bl	19484 <argp_parse@@Base+0x18f4>
   16c30:	b	16c0c <argp_failure@@Base+0xc24>
   16c34:	add	r4, r4, #24
   16c38:	subs	r5, r5, #1
   16c3c:	beq	16ca0 <argp_failure@@Base+0xcb8>
   16c40:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16c44:	cmp	r3, #0
   16c48:	beq	16c34 <argp_failure@@Base+0xc4c>
   16c4c:	ldr	r3, [r4, #-12]
   16c50:	tst	r3, #2
   16c54:	bne	16c34 <argp_failure@@Base+0xc4c>
   16c58:	sub	r1, fp, #76	; 0x4c
   16c5c:	ldr	r3, [pc, #1148]	; 170e0 <argp_failure@@Base+0x10f8>
   16c60:	ldr	r0, [r3, #12]
   16c64:	bl	14f20 <__assert_fail@plt+0x3ab4>
   16c68:	ldr	r2, [r4, #-24]	; 0xffffffe8
   16c6c:	ldr	r1, [pc, #1116]	; 170d0 <argp_failure@@Base+0x10e8>
   16c70:	mov	r0, sl
   16c74:	bl	19b18 <argp_parse@@Base+0x1f88>
   16c78:	ldr	r2, [r8, #8]
   16c7c:	cmp	r2, #0
   16c80:	beq	16c34 <argp_failure@@Base+0xc4c>
   16c84:	ldr	r3, [r8, #12]
   16c88:	tst	r3, #1
   16c8c:	ldrne	r1, [pc, #1088]	; 170d4 <argp_failure@@Base+0x10ec>
   16c90:	ldreq	r1, [pc, #1088]	; 170d8 <argp_failure@@Base+0x10f0>
   16c94:	mov	r0, sl
   16c98:	bl	19b18 <argp_parse@@Base+0x1f88>
   16c9c:	b	16c34 <argp_failure@@Base+0xc4c>
   16ca0:	ldr	r3, [sl, #28]
   16ca4:	ldr	r2, [sl, #24]
   16ca8:	sub	r3, r3, r2
   16cac:	ldr	r2, [sl, #16]
   16cb0:	cmp	r3, r2
   16cb4:	bhi	16df4 <argp_failure@@Base+0xe0c>
   16cb8:	mov	r3, #0
   16cbc:	str	r3, [sl, #4]
   16cc0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16cc4:	cmp	r3, #0
   16cc8:	beq	16e18 <argp_failure@@Base+0xe30>
   16ccc:	ldr	r3, [r8, #12]
   16cd0:	tst	r3, #8
   16cd4:	bne	16d00 <argp_failure@@Base+0xd18>
   16cd8:	ldr	r4, [r8, #4]
   16cdc:	sub	r3, r4, #1
   16ce0:	cmp	r3, #254	; 0xfe
   16ce4:	bhi	16d00 <argp_failure@@Base+0xd18>
   16ce8:	bl	112d4 <__ctype_b_loc@plt>
   16cec:	ldr	r3, [r0]
   16cf0:	lsl	r4, r4, #1
   16cf4:	ldrh	r3, [r3, r4]
   16cf8:	tst	r3, #16384	; 0x4000
   16cfc:	bne	16d0c <argp_failure@@Base+0xd24>
   16d00:	ldr	r3, [r8]
   16d04:	cmp	r3, #0
   16d08:	beq	16e00 <argp_failure@@Base+0xe18>
   16d0c:	ldr	r3, [sl, #28]
   16d10:	ldr	r2, [sl, #24]
   16d14:	sub	r3, r3, r2
   16d18:	ldr	r2, [sl, #16]
   16d1c:	cmp	r3, r2
   16d20:	bhi	17070 <argp_failure@@Base+0x1088>
   16d24:	ldr	r3, [fp, #-124]	; 0xffffff84
   16d28:	str	r3, [sl, #4]
   16d2c:	ldr	r3, [sl, #28]
   16d30:	ldr	r2, [sl, #24]
   16d34:	sub	r3, r3, r2
   16d38:	ldr	r2, [sl, #16]
   16d3c:	cmp	r3, r2
   16d40:	bhi	1707c <argp_failure@@Base+0x1094>
   16d44:	ldr	r3, [fp, #-128]	; 0xffffff80
   16d48:	str	r3, [sl, #12]
   16d4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16d50:	add	r3, r3, #28
   16d54:	str	r3, [fp, #-96]	; 0xffffffa0
   16d58:	ldr	r3, [fp, #-120]	; 0xffffff88
   16d5c:	subs	r3, r3, #1
   16d60:	str	r3, [fp, #-120]	; 0xffffff88
   16d64:	beq	170f4 <argp_failure@@Base+0x110c>
   16d68:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16d6c:	ldr	r8, [r3]
   16d70:	ldr	r9, [r3, #8]
   16d74:	ldr	r3, [sl, #28]
   16d78:	ldr	r2, [sl, #24]
   16d7c:	sub	r3, r3, r2
   16d80:	ldr	r2, [sl, #16]
   16d84:	cmp	r3, r2
   16d88:	bhi	16998 <argp_failure@@Base+0x9b0>
   16d8c:	ldr	r3, [sl, #4]
   16d90:	str	r3, [fp, #-124]	; 0xffffff84
   16d94:	mov	r3, #0
   16d98:	str	r3, [sl, #4]
   16d9c:	ldr	r3, [sl, #12]
   16da0:	str	r3, [fp, #-128]	; 0xffffff80
   16da4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16da8:	str	r2, [fp, #-76]	; 0xffffffb4
   16dac:	str	sl, [fp, #-72]	; 0xffffffb8
   16db0:	sub	r3, fp, #88	; 0x58
   16db4:	str	r3, [fp, #-68]	; 0xffffffbc
   16db8:	mov	r3, #1
   16dbc:	str	r3, [fp, #-64]	; 0xffffffc0
   16dc0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16dc4:	str	r3, [fp, #-60]	; 0xffffffc4
   16dc8:	ldr	r3, [r8, #12]
   16dcc:	ands	r3, r3, #8
   16dd0:	str	r3, [fp, #-116]	; 0xffffff8c
   16dd4:	movne	r3, #0
   16dd8:	strne	r3, [fp, #-116]	; 0xffffff8c
   16ddc:	bne	169d0 <argp_failure@@Base+0x9e8>
   16de0:	ldr	r2, [r2, #4]
   16de4:	cmp	r2, #0
   16de8:	beq	169d0 <argp_failure@@Base+0x9e8>
   16dec:	add	r3, r8, #24
   16df0:	b	169b0 <argp_failure@@Base+0x9c8>
   16df4:	mov	r0, sl
   16df8:	bl	19484 <argp_parse@@Base+0x18f4>
   16dfc:	b	16cb8 <argp_failure@@Base+0xcd0>
   16e00:	sub	r2, fp, #76	; 0x4c
   16e04:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e08:	ldr	r1, [r3, #20]
   16e0c:	ldr	r0, [r8, #16]
   16e10:	bl	14d3c <__assert_fail@plt+0x38d0>
   16e14:	b	16f70 <argp_failure@@Base+0xf88>
   16e18:	ldr	r7, [r8, #16]
   16e1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16e20:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16e24:	ldr	r2, [r2, #20]
   16e28:	ldr	r1, [r8, #4]
   16e2c:	mov	r0, r7
   16e30:	bl	14b08 <__assert_fail@plt+0x369c>
   16e34:	subs	r4, r0, #0
   16e38:	beq	16f2c <argp_failure@@Base+0xf44>
   16e3c:	ldrb	r3, [r4]
   16e40:	cmp	r3, #0
   16e44:	beq	16f24 <argp_failure@@Base+0xf3c>
   16e48:	ldr	r3, [sl, #28]
   16e4c:	ldr	r2, [sl, #24]
   16e50:	sub	r3, r3, r2
   16e54:	ldr	r2, [sl, #16]
   16e58:	cmp	r3, r2
   16e5c:	bhi	16f7c <argp_failure@@Base+0xf94>
   16e60:	ldr	r5, [sl, #20]
   16e64:	bic	r5, r5, r5, asr #31
   16e68:	ldr	r3, [pc, #624]	; 170e0 <argp_failure@@Base+0x10f8>
   16e6c:	ldr	r6, [r3, #20]
   16e70:	str	r6, [sl, #4]
   16e74:	ldr	r3, [pc, #612]	; 170e0 <argp_failure@@Base+0x10f8>
   16e78:	ldr	r6, [r3, #20]
   16e7c:	ldr	r3, [sl, #28]
   16e80:	ldr	r2, [sl, #24]
   16e84:	sub	r3, r3, r2
   16e88:	ldr	r2, [sl, #16]
   16e8c:	cmp	r3, r2
   16e90:	bhi	16fb8 <argp_failure@@Base+0xfd0>
   16e94:	str	r6, [sl, #12]
   16e98:	ldr	r3, [pc, #576]	; 170e0 <argp_failure@@Base+0x10f8>
   16e9c:	ldr	r1, [r3, #20]
   16ea0:	add	r3, r1, #3
   16ea4:	cmp	r3, r5
   16ea8:	bcs	16fdc <argp_failure@@Base+0xff4>
   16eac:	ldr	r2, [sl, #28]
   16eb0:	ldr	r3, [sl, #32]
   16eb4:	cmp	r2, r3
   16eb8:	bcs	16fc4 <argp_failure@@Base+0xfdc>
   16ebc:	ldr	r3, [sl, #28]
   16ec0:	add	r2, r3, #1
   16ec4:	str	r2, [sl, #28]
   16ec8:	mov	r2, #10
   16ecc:	strb	r2, [r3]
   16ed0:	mov	r0, r4
   16ed4:	bl	11304 <strlen@plt>
   16ed8:	subs	r5, r0, #0
   16edc:	beq	16f24 <argp_failure@@Base+0xf3c>
   16ee0:	ldr	r3, [sl, #28]
   16ee4:	add	r3, r3, r5
   16ee8:	ldr	r2, [sl, #32]
   16eec:	cmp	r2, r3
   16ef0:	bcs	16f08 <argp_failure@@Base+0xf20>
   16ef4:	mov	r1, r5
   16ef8:	mov	r0, sl
   16efc:	bl	19a28 <argp_parse@@Base+0x1e98>
   16f00:	cmp	r0, #0
   16f04:	beq	16f24 <argp_failure@@Base+0xf3c>
   16f08:	mov	r2, r5
   16f0c:	mov	r1, r4
   16f10:	ldr	r0, [sl, #28]
   16f14:	bl	111b4 <memcpy@plt>
   16f18:	ldr	r3, [sl, #28]
   16f1c:	add	r5, r3, r5
   16f20:	str	r5, [sl, #28]
   16f24:	cmp	r7, r4
   16f28:	bne	17040 <argp_failure@@Base+0x1058>
   16f2c:	ldr	r3, [sl, #28]
   16f30:	ldr	r2, [sl, #24]
   16f34:	sub	r3, r3, r2
   16f38:	ldr	r2, [sl, #16]
   16f3c:	cmp	r3, r2
   16f40:	bhi	1704c <argp_failure@@Base+0x1064>
   16f44:	mov	r3, #0
   16f48:	str	r3, [sl, #4]
   16f4c:	ldr	r2, [sl, #28]
   16f50:	ldr	r3, [sl, #32]
   16f54:	cmp	r2, r3
   16f58:	bcs	17058 <argp_failure@@Base+0x1070>
   16f5c:	ldr	r3, [sl, #28]
   16f60:	add	r2, r3, #1
   16f64:	str	r2, [sl, #28]
   16f68:	mov	r2, #10
   16f6c:	strb	r2, [r3]
   16f70:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16f74:	str	r3, [fp, #-88]	; 0xffffffa8
   16f78:	b	16d0c <argp_failure@@Base+0xd24>
   16f7c:	mov	r0, sl
   16f80:	bl	19484 <argp_parse@@Base+0x18f4>
   16f84:	ldr	r5, [sl, #20]
   16f88:	bic	r5, r5, r5, asr #31
   16f8c:	ldr	r3, [pc, #332]	; 170e0 <argp_failure@@Base+0x10f8>
   16f90:	ldr	r6, [r3, #20]
   16f94:	ldr	r3, [sl, #28]
   16f98:	ldr	r2, [sl, #24]
   16f9c:	sub	r3, r3, r2
   16fa0:	ldr	r2, [sl, #16]
   16fa4:	cmp	r3, r2
   16fa8:	bls	16e70 <argp_failure@@Base+0xe88>
   16fac:	mov	r0, sl
   16fb0:	bl	19484 <argp_parse@@Base+0x18f4>
   16fb4:	b	16e70 <argp_failure@@Base+0xe88>
   16fb8:	mov	r0, sl
   16fbc:	bl	19484 <argp_parse@@Base+0x18f4>
   16fc0:	b	16e94 <argp_failure@@Base+0xeac>
   16fc4:	mov	r1, #1
   16fc8:	mov	r0, sl
   16fcc:	bl	19a28 <argp_parse@@Base+0x1e98>
   16fd0:	cmp	r0, #0
   16fd4:	beq	16ed0 <argp_failure@@Base+0xee8>
   16fd8:	b	16ebc <argp_failure@@Base+0xed4>
   16fdc:	cmp	r1, r5
   16fe0:	bhi	17034 <argp_failure@@Base+0x104c>
   16fe4:	ldr	r3, [sl, #28]
   16fe8:	add	r3, r3, #3
   16fec:	ldr	r2, [sl, #32]
   16ff0:	cmp	r2, r3
   16ff4:	bcs	1700c <argp_failure@@Base+0x1024>
   16ff8:	mov	r1, #3
   16ffc:	mov	r0, sl
   17000:	bl	19a28 <argp_parse@@Base+0x1e98>
   17004:	cmp	r0, #0
   17008:	beq	16ed0 <argp_failure@@Base+0xee8>
   1700c:	ldr	r3, [sl, #28]
   17010:	ldr	r2, [pc, #196]	; 170dc <argp_failure@@Base+0x10f4>
   17014:	ldrh	r1, [r2]
   17018:	ldrb	r2, [r2, #2]
   1701c:	strh	r1, [r3]
   17020:	strb	r2, [r3, #2]
   17024:	ldr	r3, [sl, #28]
   17028:	add	r3, r3, #3
   1702c:	str	r3, [sl, #28]
   17030:	b	16ed0 <argp_failure@@Base+0xee8>
   17034:	mov	r0, sl
   17038:	bl	14924 <__assert_fail@plt+0x34b8>
   1703c:	b	16ed0 <argp_failure@@Base+0xee8>
   17040:	mov	r0, r4
   17044:	bl	18784 <argp_parse@@Base+0xbf4>
   17048:	b	16f2c <argp_failure@@Base+0xf44>
   1704c:	mov	r0, sl
   17050:	bl	19484 <argp_parse@@Base+0x18f4>
   17054:	b	16f44 <argp_failure@@Base+0xf5c>
   17058:	mov	r1, #1
   1705c:	mov	r0, sl
   17060:	bl	19a28 <argp_parse@@Base+0x1e98>
   17064:	cmp	r0, #0
   17068:	beq	16f70 <argp_failure@@Base+0xf88>
   1706c:	b	16f5c <argp_failure@@Base+0xf74>
   17070:	mov	r0, sl
   17074:	bl	19484 <argp_parse@@Base+0x18f4>
   17078:	b	16d24 <argp_failure@@Base+0xd3c>
   1707c:	mov	r0, sl
   17080:	bl	19484 <argp_parse@@Base+0x18f4>
   17084:	b	16d44 <argp_failure@@Base+0xd5c>
   17088:	andeq	fp, r1, r4, ror #26
   1708c:	muleq	r1, r0, fp
   17090:	andeq	fp, r1, r4, ror sp
   17094:	andeq	fp, r1, r4, lsr #27
   17098:	andeq	fp, r1, ip, asr #27
   1709c:	andeq	fp, r1, r8, lsr #23
   170a0:	andeq	fp, r1, r0, lsr #28
   170a4:	andeq	fp, r1, ip, ror #27
   170a8:	andeq	fp, r1, r8, lsr #28
   170ac:	andeq	fp, r1, r0, lsr lr
   170b0:	andeq	r5, r1, ip, lsr r6
   170b4:	andeq	fp, r1, r0, asr #28
   170b8:	andeq	fp, r1, r8, lsr lr
   170bc:	andeq	fp, r1, r8, asr #28
   170c0:	andeq	fp, r1, r0, asr lr
   170c4:	andeq	fp, r1, r0, ror #28
   170c8:	muleq	r1, r8, lr
   170cc:	muleq	r1, r0, r0
   170d0:	andeq	fp, r1, r0, lsr #29
   170d4:	andeq	fp, r1, r8, lsr #29
   170d8:			; <UNDEFINED> instruction: 0x0001beb0
   170dc:			; <UNDEFINED> instruction: 0x0001beb4
   170e0:	andeq	sp, r2, r4, ror #11
   170e4:	andeq	r0, r0, #5
   170e8:			; <UNDEFINED> instruction: 0x0001beb8
   170ec:	ldrdeq	sp, [r2], -ip
   170f0:	andeq	fp, r1, ip, lsr #30
   170f4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   170f8:	cmp	r3, #0
   170fc:	beq	171ec <argp_failure@@Base+0x1204>
   17100:	ldr	r3, [pc, #-40]	; 170e0 <argp_failure@@Base+0x10f8>
   17104:	ldr	r3, [r3, #4]
   17108:	cmp	r3, #0
   1710c:	beq	171ec <argp_failure@@Base+0x1204>
   17110:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17114:	cmp	r3, #0
   17118:	ldrne	r2, [r3]
   1711c:	moveq	r2, #0
   17120:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17124:	ldr	r1, [pc, #-72]	; 170e4 <argp_failure@@Base+0x10fc>
   17128:	ldr	r0, [pc, #-72]	; 170e8 <argp_failure@@Base+0x1100>
   1712c:	bl	14b08 <__assert_fail@plt+0x369c>
   17130:	subs	r4, r0, #0
   17134:	beq	171ec <argp_failure@@Base+0x1204>
   17138:	ldrb	r3, [r4]
   1713c:	cmp	r3, #0
   17140:	beq	171e0 <argp_failure@@Base+0x11f8>
   17144:	ldr	r2, [sl, #28]
   17148:	ldr	r3, [sl, #32]
   1714c:	cmp	r2, r3
   17150:	bcs	17284 <argp_failure@@Base+0x129c>
   17154:	ldr	r3, [sl, #28]
   17158:	add	r2, r3, #1
   1715c:	str	r2, [sl, #28]
   17160:	mov	r2, #10
   17164:	strb	r2, [r3]
   17168:	mov	r0, r4
   1716c:	bl	11304 <strlen@plt>
   17170:	subs	r5, r0, #0
   17174:	beq	171bc <argp_failure@@Base+0x11d4>
   17178:	ldr	r3, [sl, #28]
   1717c:	add	r3, r3, r5
   17180:	ldr	r2, [sl, #32]
   17184:	cmp	r2, r3
   17188:	bcs	171a0 <argp_failure@@Base+0x11b8>
   1718c:	mov	r1, r5
   17190:	mov	r0, sl
   17194:	bl	19a28 <argp_parse@@Base+0x1e98>
   17198:	cmp	r0, #0
   1719c:	beq	171bc <argp_failure@@Base+0x11d4>
   171a0:	mov	r2, r5
   171a4:	mov	r1, r4
   171a8:	ldr	r0, [sl, #28]
   171ac:	bl	111b4 <memcpy@plt>
   171b0:	ldr	r3, [sl, #28]
   171b4:	add	r5, r3, r5
   171b8:	str	r5, [sl, #28]
   171bc:	ldr	r2, [sl, #28]
   171c0:	ldr	r3, [sl, #32]
   171c4:	cmp	r2, r3
   171c8:	bcs	1729c <argp_failure@@Base+0x12b4>
   171cc:	ldr	r3, [sl, #28]
   171d0:	add	r2, r3, #1
   171d4:	str	r2, [sl, #28]
   171d8:	mov	r2, #10
   171dc:	strb	r2, [r3]
   171e0:	ldr	r3, [pc, #-256]	; 170e8 <argp_failure@@Base+0x1100>
   171e4:	cmp	r4, r3
   171e8:	bne	172b4 <argp_failure@@Base+0x12cc>
   171ec:	mov	r4, #1
   171f0:	ldr	r3, [fp, #-104]	; 0xffffff98
   171f4:	tst	r3, #32
   171f8:	bne	172c0 <argp_failure@@Base+0x12d8>
   171fc:	ldr	r3, [fp, #-104]	; 0xffffff98
   17200:	tst	r3, #64	; 0x40
   17204:	beq	17258 <argp_failure@@Base+0x1270>
   17208:	ldr	r3, [pc, #-292]	; 170ec <argp_failure@@Base+0x1104>
   1720c:	ldr	r3, [r3]
   17210:	cmp	r3, #0
   17214:	beq	17258 <argp_failure@@Base+0x1270>
   17218:	cmp	r4, #0
   1721c:	beq	17244 <argp_failure@@Base+0x125c>
   17220:	ldr	r2, [sl, #28]
   17224:	ldr	r3, [sl, #32]
   17228:	cmp	r2, r3
   1722c:	bcs	172e8 <argp_failure@@Base+0x1300>
   17230:	ldr	r3, [sl, #28]
   17234:	add	r2, r3, #1
   17238:	str	r2, [sl, #28]
   1723c:	mov	r2, #10
   17240:	strb	r2, [r3]
   17244:	ldr	r3, [pc, #-352]	; 170ec <argp_failure@@Base+0x1104>
   17248:	ldr	r2, [r3]
   1724c:	ldr	r1, [pc, #-356]	; 170f0 <argp_failure@@Base+0x1108>
   17250:	mov	r0, sl
   17254:	bl	19b18 <argp_parse@@Base+0x1f88>
   17258:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1725c:	bl	11244 <funlockfile@plt>
   17260:	ldr	r3, [fp, #-108]	; 0xffffff94
   17264:	cmp	r3, #0
   17268:	beq	17274 <argp_failure@@Base+0x128c>
   1726c:	mov	r0, r3
   17270:	bl	147e0 <__assert_fail@plt+0x3374>
   17274:	mov	r0, sl
   17278:	bl	199e8 <argp_parse@@Base+0x1e58>
   1727c:	sub	sp, fp, #32
   17280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17284:	mov	r1, #1
   17288:	mov	r0, sl
   1728c:	bl	19a28 <argp_parse@@Base+0x1e98>
   17290:	cmp	r0, #0
   17294:	beq	17168 <argp_failure@@Base+0x1180>
   17298:	b	17154 <argp_failure@@Base+0x116c>
   1729c:	mov	r1, #1
   172a0:	mov	r0, sl
   172a4:	bl	19a28 <argp_parse@@Base+0x1e98>
   172a8:	cmp	r0, #0
   172ac:	beq	171e0 <argp_failure@@Base+0x11f8>
   172b0:	b	171cc <argp_failure@@Base+0x11e4>
   172b4:	mov	r0, r4
   172b8:	bl	18784 <argp_parse@@Base+0xbf4>
   172bc:	b	171ec <argp_failure@@Base+0x1204>
   172c0:	str	sl, [sp, #4]
   172c4:	mov	r3, #0
   172c8:	str	r3, [sp]
   172cc:	mov	r3, r4
   172d0:	mov	r2, #1
   172d4:	ldr	r1, [fp, #-100]	; 0xffffff9c
   172d8:	ldr	r0, [fp, #-112]	; 0xffffff90
   172dc:	bl	150a4 <__assert_fail@plt+0x3c38>
   172e0:	orr	r4, r4, r0
   172e4:	b	171fc <argp_failure@@Base+0x1214>
   172e8:	mov	r1, #1
   172ec:	mov	r0, sl
   172f0:	bl	19a28 <argp_parse@@Base+0x1e98>
   172f4:	cmp	r0, #0
   172f8:	beq	17244 <argp_failure@@Base+0x125c>
   172fc:	b	17230 <argp_failure@@Base+0x1248>
   17300:	ldrb	r3, [r5]
   17304:	mov	r4, r5
   17308:	mov	r5, #0
   1730c:	b	163e0 <argp_failure@@Base+0x3f8>
   17310:	mov	r4, r2
   17314:	b	163f4 <argp_failure@@Base+0x40c>
   17318:	cmp	r0, #110	; 0x6e
   1731c:	beq	1644c <argp_failure@@Base+0x464>
   17320:	mov	r3, #1
   17324:	str	r3, [fp, #-96]	; 0xffffffa0
   17328:	str	r3, [fp, #-116]	; 0xffffff8c
   1732c:	add	r6, sl, #24
   17330:	b	16544 <argp_failure@@Base+0x55c>
   17334:	ldrb	r3, [r9]
   17338:	cmp	r7, r3
   1733c:	beq	16a18 <argp_failure@@Base+0xa30>
   17340:	add	r4, r4, #24
   17344:	subs	r5, r5, #1
   17348:	beq	16b08 <argp_failure@@Base+0xb20>
   1734c:	ldr	r6, [r4, #12]
   17350:	tst	r6, #8
   17354:	bne	17340 <argp_failure@@Base+0x1358>
   17358:	ldr	r7, [r4, #4]
   1735c:	sub	r3, r7, #1
   17360:	cmp	r3, #254	; 0xfe
   17364:	bhi	17340 <argp_failure@@Base+0x1358>
   17368:	bl	112d4 <__ctype_b_loc@plt>
   1736c:	ldr	r2, [r0]
   17370:	lsl	r3, r7, #1
   17374:	ldrh	r3, [r2, r3]
   17378:	tst	r3, #16384	; 0x4000
   1737c:	bne	17334 <argp_failure@@Base+0x134c>
   17380:	b	17340 <argp_failure@@Base+0x1358>

00017384 <argp_help@@Base>:
   17384:	push	{lr}		; (str lr, [sp, #-4]!)
   17388:	sub	sp, sp, #12
   1738c:	str	r3, [sp]
   17390:	mov	r3, r2
   17394:	mov	r2, r1
   17398:	mov	r1, #0
   1739c:	bl	161f0 <argp_failure@@Base+0x208>
   173a0:	add	sp, sp, #12
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)

000173a8 <argp_state_help@@Base>:
   173a8:	push	{r4, r5, lr}
   173ac:	sub	sp, sp, #12
   173b0:	mov	r5, r2
   173b4:	subs	r4, r0, #0
   173b8:	beq	1741c <argp_state_help@@Base+0x74>
   173bc:	ldr	r3, [r4, #16]
   173c0:	tst	r3, #2
   173c4:	bne	17414 <argp_state_help@@Base+0x6c>
   173c8:	cmp	r1, #0
   173cc:	beq	17414 <argp_state_help@@Base+0x6c>
   173d0:	ldr	r3, [r4, #16]
   173d4:	tst	r3, #64	; 0x40
   173d8:	orrne	r5, r5, #128	; 0x80
   173dc:	ldr	r0, [r4]
   173e0:	ldr	r3, [r4, #40]	; 0x28
   173e4:	str	r3, [sp]
   173e8:	mov	r3, r5
   173ec:	mov	r2, r1
   173f0:	mov	r1, r4
   173f4:	bl	161f0 <argp_failure@@Base+0x208>
   173f8:	ldr	r3, [r4, #16]
   173fc:	tst	r3, #32
   17400:	bne	17414 <argp_state_help@@Base+0x6c>
   17404:	tst	r5, #256	; 0x100
   17408:	bne	17448 <argp_state_help@@Base+0xa0>
   1740c:	tst	r5, #512	; 0x200
   17410:	bne	17454 <argp_state_help@@Base+0xac>
   17414:	add	sp, sp, #12
   17418:	pop	{r4, r5, pc}
   1741c:	cmp	r1, #0
   17420:	beq	17414 <argp_state_help@@Base+0x6c>
   17424:	ldr	r3, [pc, #48]	; 1745c <argp_state_help@@Base+0xb4>
   17428:	ldr	r3, [r3]
   1742c:	str	r3, [sp]
   17430:	mov	r3, r2
   17434:	mov	r2, r1
   17438:	mov	r1, #0
   1743c:	mov	r0, r1
   17440:	bl	161f0 <argp_failure@@Base+0x208>
   17444:	b	17404 <argp_state_help@@Base+0x5c>
   17448:	ldr	r3, [pc, #16]	; 17460 <argp_state_help@@Base+0xb8>
   1744c:	ldr	r0, [r3]
   17450:	bl	112ec <exit@plt>
   17454:	mov	r0, #0
   17458:	bl	112ec <exit@plt>
   1745c:	andeq	sp, r2, r0, lsr #12
   17460:	andeq	sp, r2, ip, lsl #12

00017464 <argp_error@@Base>:
   17464:	push	{r1, r2, r3}
   17468:	push	{r4, r5, lr}
   1746c:	sub	sp, sp, #8
   17470:	subs	r5, r0, #0
   17474:	beq	17544 <argp_error@@Base+0xe0>
   17478:	ldr	r3, [r5, #16]
   1747c:	tst	r3, #2
   17480:	bne	17534 <argp_error@@Base+0xd0>
   17484:	ldr	r4, [r5, #44]	; 0x2c
   17488:	cmp	r4, #0
   1748c:	beq	17534 <argp_error@@Base+0xd0>
   17490:	mov	r0, r4
   17494:	bl	11400 <flockfile@plt>
   17498:	add	r3, sp, #24
   1749c:	str	r3, [sp, #4]
   174a0:	ldr	r0, [r5, #40]	; 0x28
   174a4:	mov	r1, r4
   174a8:	bl	1110c <fputs_unlocked@plt>
   174ac:	ldr	r3, [r4, #20]
   174b0:	ldr	r2, [r4, #24]
   174b4:	cmp	r3, r2
   174b8:	addcc	r2, r3, #1
   174bc:	strcc	r2, [r4, #20]
   174c0:	movcc	r2, #58	; 0x3a
   174c4:	strbcc	r2, [r3]
   174c8:	bcs	17570 <argp_error@@Base+0x10c>
   174cc:	ldr	r3, [r4, #20]
   174d0:	ldr	r2, [r4, #24]
   174d4:	cmp	r3, r2
   174d8:	addcc	r2, r3, #1
   174dc:	strcc	r2, [r4, #20]
   174e0:	movcc	r2, #32
   174e4:	strbcc	r2, [r3]
   174e8:	bcs	17580 <argp_error@@Base+0x11c>
   174ec:	ldr	r2, [sp, #4]
   174f0:	ldr	r1, [sp, #20]
   174f4:	mov	r0, r4
   174f8:	bl	113c4 <vfprintf@plt>
   174fc:	ldr	r3, [r4, #20]
   17500:	ldr	r2, [r4, #24]
   17504:	cmp	r3, r2
   17508:	addcc	r2, r3, #1
   1750c:	strcc	r2, [r4, #20]
   17510:	movcc	r2, #10
   17514:	strbcc	r2, [r3]
   17518:	bcs	17590 <argp_error@@Base+0x12c>
   1751c:	mov	r2, #260	; 0x104
   17520:	mov	r1, r4
   17524:	mov	r0, r5
   17528:	bl	173a8 <argp_state_help@@Base>
   1752c:	mov	r0, r4
   17530:	bl	11244 <funlockfile@plt>
   17534:	add	sp, sp, #8
   17538:	pop	{r4, r5, lr}
   1753c:	add	sp, sp, #12
   17540:	bx	lr
   17544:	ldr	r3, [pc, #84]	; 175a0 <argp_error@@Base+0x13c>
   17548:	ldr	r4, [r3]
   1754c:	cmp	r4, #0
   17550:	beq	17534 <argp_error@@Base+0xd0>
   17554:	mov	r0, r4
   17558:	bl	11400 <flockfile@plt>
   1755c:	add	r3, sp, #24
   17560:	str	r3, [sp, #4]
   17564:	ldr	r3, [pc, #56]	; 175a4 <argp_error@@Base+0x140>
   17568:	ldr	r0, [r3]
   1756c:	b	174a4 <argp_error@@Base+0x40>
   17570:	mov	r1, #58	; 0x3a
   17574:	mov	r0, r4
   17578:	bl	11394 <__overflow@plt>
   1757c:	b	174cc <argp_error@@Base+0x68>
   17580:	mov	r1, #32
   17584:	mov	r0, r4
   17588:	bl	11394 <__overflow@plt>
   1758c:	b	174ec <argp_error@@Base+0x88>
   17590:	mov	r1, #10
   17594:	mov	r0, r4
   17598:	bl	11394 <__overflow@plt>
   1759c:	b	1751c <argp_error@@Base+0xb8>
   175a0:	andeq	sp, r2, r8, lsr #12
   175a4:	andeq	sp, r2, r0, lsr #12
   175a8:	ldr	ip, [r0]
   175ac:	cmp	ip, #0
   175b0:	beq	17604 <argp_error@@Base+0x1a0>
   175b4:	push	{r4, r5, r6, lr}
   175b8:	mov	ip, r2
   175bc:	mov	r5, r1
   175c0:	mov	r4, r0
   175c4:	ldr	r2, [r0, #32]
   175c8:	str	r2, [r1, #36]	; 0x24
   175cc:	ldr	r2, [r0, #24]
   175d0:	str	r2, [r1, #28]
   175d4:	ldr	r2, [r0, #28]
   175d8:	str	r2, [r1, #32]
   175dc:	ldr	r2, [r0, #12]
   175e0:	str	r2, [r1, #20]
   175e4:	ldr	r6, [r0]
   175e8:	mov	r2, r1
   175ec:	mov	r1, r3
   175f0:	mov	r0, ip
   175f4:	blx	r6
   175f8:	ldr	r3, [r5, #36]	; 0x24
   175fc:	str	r3, [r4, #32]
   17600:	pop	{r4, r5, r6, pc}
   17604:	mov	r0, #7
   17608:	bx	lr
   1760c:	push	{r4, r5, r6, lr}
   17610:	ldr	r5, [r0, #16]
   17614:	ldr	r3, [r0]
   17618:	cmp	r3, #0
   1761c:	beq	17634 <argp_error@@Base+0x1d0>
   17620:	ldr	r2, [r1, #8]
   17624:	add	r2, r2, #1
   17628:	str	r2, [r1, #8]
   1762c:	mov	r2, #0
   17630:	b	17688 <argp_error@@Base+0x224>
   17634:	ldr	r3, [r0, #4]
   17638:	cmp	r3, #0
   1763c:	ldrne	r3, [r1, #8]
   17640:	addne	r3, r3, #1
   17644:	strne	r3, [r1, #8]
   17648:	cmp	r5, #0
   1764c:	popeq	{r4, r5, r6, pc}
   17650:	ldr	r0, [r5]
   17654:	cmp	r0, #0
   17658:	popeq	{r4, r5, r6, pc}
   1765c:	mov	r4, r1
   17660:	mov	r1, r4
   17664:	bl	1760c <argp_error@@Base+0x1a8>
   17668:	ldr	r3, [r4, #12]
   1766c:	add	r3, r3, #1
   17670:	str	r3, [r4, #12]
   17674:	ldr	r0, [r5, #16]!
   17678:	cmp	r0, #0
   1767c:	bne	17660 <argp_error@@Base+0x1fc>
   17680:	pop	{r4, r5, r6, pc}
   17684:	add	r2, r2, #1
   17688:	add	r3, r3, #24
   1768c:	ldr	r0, [r3, #-20]	; 0xffffffec
   17690:	cmp	r0, #0
   17694:	bne	17684 <argp_error@@Base+0x220>
   17698:	ldr	r0, [r3, #-24]	; 0xffffffe8
   1769c:	cmp	r0, #0
   176a0:	bne	17684 <argp_error@@Base+0x220>
   176a4:	ldr	r0, [r3, #-8]
   176a8:	cmp	r0, #0
   176ac:	bne	17684 <argp_error@@Base+0x220>
   176b0:	ldr	r0, [r3, #-4]
   176b4:	cmp	r0, #0
   176b8:	bne	17684 <argp_error@@Base+0x220>
   176bc:	add	r0, r2, r2, lsl #1
   176c0:	ldr	r3, [r1]
   176c4:	add	r3, r3, r0
   176c8:	str	r3, [r1]
   176cc:	ldr	r3, [r1, #4]
   176d0:	add	r2, r3, r2
   176d4:	str	r2, [r1, #4]
   176d8:	b	17648 <argp_error@@Base+0x1e4>
   176dc:	cmp	r0, #86	; 0x56
   176e0:	beq	176ec <argp_error@@Base+0x288>
   176e4:	mov	r0, #7
   176e8:	bx	lr
   176ec:	push	{r4, lr}
   176f0:	mov	r4, r2
   176f4:	ldr	r3, [pc, #100]	; 17760 <argp_error@@Base+0x2fc>
   176f8:	ldr	r3, [r3]
   176fc:	cmp	r3, #0
   17700:	beq	17724 <argp_error@@Base+0x2c0>
   17704:	mov	r1, r2
   17708:	ldr	r0, [r2, #48]	; 0x30
   1770c:	blx	r3
   17710:	ldr	r3, [r4, #16]
   17714:	tst	r3, #32
   17718:	beq	17758 <argp_error@@Base+0x2f4>
   1771c:	mov	r0, #0
   17720:	pop	{r4, pc}
   17724:	ldr	r3, [pc, #56]	; 17764 <argp_error@@Base+0x300>
   17728:	ldr	r2, [r3]
   1772c:	cmp	r2, #0
   17730:	beq	17744 <argp_error@@Base+0x2e0>
   17734:	ldr	r1, [pc, #44]	; 17768 <argp_error@@Base+0x304>
   17738:	ldr	r0, [r4, #48]	; 0x30
   1773c:	bl	1131c <fprintf@plt>
   17740:	b	17710 <argp_error@@Base+0x2ac>
   17744:	ldr	r2, [pc, #32]	; 1776c <argp_error@@Base+0x308>
   17748:	ldr	r1, [pc, #32]	; 17770 <argp_error@@Base+0x30c>
   1774c:	mov	r0, r4
   17750:	bl	17464 <argp_error@@Base>
   17754:	b	17710 <argp_error@@Base+0x2ac>
   17758:	mov	r0, #0
   1775c:	bl	112ec <exit@plt>
   17760:	andeq	sp, r2, ip, lsl #13
   17764:	andeq	sp, r2, r0, ror #13
   17768:	andeq	ip, r1, r4, ror #3
   1776c:	andeq	ip, r1, r8, asr r0
   17770:	andeq	sl, r1, ip, lsr #28
   17774:	push	{r4, r5, r6, lr}
   17778:	mov	r4, r2
   1777c:	cmn	r0, #3
   17780:	beq	1781c <argp_error@@Base+0x3b8>
   17784:	mov	r5, r1
   17788:	ble	177b4 <argp_error@@Base+0x350>
   1778c:	cmn	r0, #2
   17790:	beq	17834 <argp_error@@Base+0x3d0>
   17794:	cmp	r0, #63	; 0x3f
   17798:	bne	17878 <argp_error@@Base+0x414>
   1779c:	ldr	r2, [pc, #228]	; 17888 <argp_error@@Base+0x424>
   177a0:	ldr	r1, [r4, #48]	; 0x30
   177a4:	mov	r0, r4
   177a8:	bl	173a8 <argp_state_help@@Base>
   177ac:	mov	r0, #0
   177b0:	pop	{r4, r5, r6, pc}
   177b4:	cmn	r0, #4
   177b8:	bne	17878 <argp_error@@Base+0x414>
   177bc:	mov	r2, #10
   177c0:	mov	r1, #0
   177c4:	ldr	r0, [pc, #192]	; 1788c <argp_error@@Base+0x428>
   177c8:	cmp	r5, r1
   177cc:	movne	r0, r5
   177d0:	bl	11130 <strtol@plt>
   177d4:	ldr	r3, [pc, #180]	; 17890 <argp_error@@Base+0x42c>
   177d8:	str	r0, [r3]
   177dc:	ldr	r2, [r3]
   177e0:	sub	r1, r2, #1
   177e4:	str	r1, [r3]
   177e8:	cmp	r2, #0
   177ec:	ble	17880 <argp_error@@Base+0x41c>
   177f0:	mov	r5, #1
   177f4:	mov	r4, r3
   177f8:	mov	r0, r5
   177fc:	bl	111fc <sleep@plt>
   17800:	ldr	r3, [r4]
   17804:	sub	r2, r3, #1
   17808:	str	r2, [r4]
   1780c:	cmp	r3, #0
   17810:	bgt	177f8 <argp_error@@Base+0x394>
   17814:	mov	r0, #0
   17818:	pop	{r4, r5, r6, pc}
   1781c:	ldr	r2, [pc, #112]	; 17894 <argp_error@@Base+0x430>
   17820:	ldr	r1, [r4, #48]	; 0x30
   17824:	mov	r0, r4
   17828:	bl	173a8 <argp_state_help@@Base>
   1782c:	mov	r0, #0
   17830:	pop	{r4, r5, r6, pc}
   17834:	ldr	r3, [pc, #92]	; 17898 <argp_error@@Base+0x434>
   17838:	str	r1, [r3]
   1783c:	mov	r0, r1
   17840:	bl	186c4 <argp_parse@@Base+0xb34>
   17844:	str	r0, [r4, #40]	; 0x28
   17848:	ldr	r3, [pc, #76]	; 1789c <argp_error@@Base+0x438>
   1784c:	str	r0, [r3]
   17850:	ldr	r3, [r4, #16]
   17854:	and	r3, r3, #3
   17858:	cmp	r3, #1
   1785c:	beq	17868 <argp_error@@Base+0x404>
   17860:	mov	r0, #0
   17864:	pop	{r4, r5, r6, pc}
   17868:	ldr	r3, [r4, #8]
   1786c:	str	r5, [r3]
   17870:	mov	r0, #0
   17874:	pop	{r4, r5, r6, pc}
   17878:	mov	r0, #7
   1787c:	pop	{r4, r5, r6, pc}
   17880:	mov	r0, #0
   17884:	pop	{r4, r5, r6, pc}
   17888:	andeq	r0, r0, sl, ror r2
   1788c:	andeq	ip, r1, ip, ror r0
   17890:	andeq	sp, r2, r8, lsl #13
   17894:	andeq	r0, r0, r1, lsl #4
   17898:	andeq	sp, r2, r4, lsr #12
   1789c:	andeq	sp, r2, r0, lsr #12
   178a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178a4:	sub	sp, sp, #36	; 0x24
   178a8:	str	r0, [sp, #12]
   178ac:	str	r1, [sp, #16]
   178b0:	str	r2, [sp, #20]
   178b4:	mov	r8, r3
   178b8:	ldr	sl, [sp, #72]	; 0x48
   178bc:	ldr	r9, [r0]
   178c0:	ldr	r5, [r0, #16]
   178c4:	cmp	r9, #0
   178c8:	addne	r6, r9, #24
   178cc:	strne	r5, [sp, #28]
   178d0:	strne	r8, [sp, #24]
   178d4:	bne	179e0 <argp_error@@Base+0x57c>
   178d8:	ldr	r3, [sp, #12]
   178dc:	ldr	r3, [r3, #4]
   178e0:	cmp	r3, #0
   178e4:	moveq	r0, r8
   178e8:	moveq	r8, #0
   178ec:	beq	1796c <argp_error@@Base+0x508>
   178f0:	ldr	r2, [sp, #12]
   178f4:	ldr	r3, [r2, #4]
   178f8:	str	r3, [r8]
   178fc:	str	r2, [r8, #4]
   17900:	ldr	r3, [sl, #4]
   17904:	str	r3, [r8, #8]
   17908:	mov	r3, #0
   1790c:	str	r3, [r8, #12]
   17910:	ldr	r2, [sp, #16]
   17914:	str	r2, [r8, #16]
   17918:	ldr	r2, [sp, #20]
   1791c:	str	r2, [r8, #20]
   17920:	str	r3, [r8, #24]
   17924:	str	r3, [r8, #32]
   17928:	str	r3, [r8, #28]
   1792c:	cmp	r5, r3
   17930:	beq	17968 <argp_error@@Base+0x504>
   17934:	ldr	r3, [r5]
   17938:	cmp	r3, #0
   1793c:	beq	17b88 <argp_error@@Base+0x724>
   17940:	mov	r3, #0
   17944:	add	r3, r3, #1
   17948:	ldr	r2, [r5, r3, lsl #4]
   1794c:	cmp	r2, #0
   17950:	bne	17944 <argp_error@@Base+0x4e0>
   17954:	ldr	r2, [sl, #12]
   17958:	str	r2, [r8, #28]
   1795c:	ldr	r2, [sl, #12]
   17960:	add	r3, r2, r3, lsl #2
   17964:	str	r3, [sl, #12]
   17968:	add	r0, r8, #36	; 0x24
   1796c:	cmp	r5, #0
   17970:	beq	179ac <argp_error@@Base+0x548>
   17974:	ldr	ip, [r5]
   17978:	cmp	ip, #0
   1797c:	beq	179ac <argp_error@@Base+0x548>
   17980:	mov	r2, #0
   17984:	add	r4, r2, #1
   17988:	str	sl, [sp]
   1798c:	mov	r3, r0
   17990:	mov	r1, r8
   17994:	mov	r0, ip
   17998:	bl	178a0 <argp_error@@Base+0x43c>
   1799c:	ldr	ip, [r5, r4, lsl #4]
   179a0:	mov	r2, r4
   179a4:	cmp	ip, #0
   179a8:	bne	17984 <argp_error@@Base+0x520>
   179ac:	add	sp, sp, #36	; 0x24
   179b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b4:	ldr	r0, [r4, #16]!
   179b8:	cmp	r0, #0
   179bc:	beq	17ac8 <argp_error@@Base+0x664>
   179c0:	mov	r1, r7
   179c4:	bl	11124 <strcmp@plt>
   179c8:	cmp	r0, #0
   179cc:	bne	179b4 <argp_error@@Base+0x550>
   179d0:	sub	r4, r4, fp
   179d4:	cmn	r4, #15
   179d8:	blt	17ac8 <argp_error@@Base+0x664>
   179dc:	add	r6, r6, #24
   179e0:	sub	r2, r6, #24
   179e4:	mov	r8, r6
   179e8:	ldr	r4, [r6, #-20]	; 0xffffffec
   179ec:	cmp	r4, #0
   179f0:	bne	17a00 <argp_error@@Base+0x59c>
   179f4:	ldr	r3, [r6, #-24]	; 0xffffffe8
   179f8:	cmp	r3, #0
   179fc:	beq	17b64 <argp_error@@Base+0x700>
   17a00:	ldr	r3, [r8, #-12]
   17a04:	and	r1, r3, #4
   17a08:	cmp	r1, #0
   17a0c:	moveq	r9, r2
   17a10:	ldr	r5, [r9, #12]
   17a14:	ands	r5, r5, #8
   17a18:	bne	179dc <argp_error@@Base+0x578>
   17a1c:	tst	r3, #8
   17a20:	bne	17aa4 <argp_error@@Base+0x640>
   17a24:	sub	r3, r4, #1
   17a28:	cmp	r3, #254	; 0xfe
   17a2c:	bhi	17aa4 <argp_error@@Base+0x640>
   17a30:	bl	112d4 <__ctype_b_loc@plt>
   17a34:	ldr	r3, [r0]
   17a38:	lsl	r4, r4, #1
   17a3c:	ldrh	r3, [r3, r4]
   17a40:	tst	r3, #16384	; 0x4000
   17a44:	beq	17aa4 <argp_error@@Base+0x640>
   17a48:	ldr	r3, [sl, #4]
   17a4c:	add	r2, r3, #1
   17a50:	str	r2, [sl, #4]
   17a54:	ldr	r2, [r8, #-20]	; 0xffffffec
   17a58:	strb	r2, [r3]
   17a5c:	ldr	r3, [r9, #8]
   17a60:	cmp	r3, #0
   17a64:	beq	17a98 <argp_error@@Base+0x634>
   17a68:	ldr	r3, [sl, #4]
   17a6c:	add	r2, r3, #1
   17a70:	str	r2, [sl, #4]
   17a74:	mov	r2, #58	; 0x3a
   17a78:	strb	r2, [r3]
   17a7c:	ldr	r3, [r9, #12]
   17a80:	tst	r3, #1
   17a84:	ldrne	r3, [sl, #4]
   17a88:	addne	r2, r3, #1
   17a8c:	strne	r2, [sl, #4]
   17a90:	movne	r2, #58	; 0x3a
   17a94:	strbne	r2, [r3]
   17a98:	ldr	r3, [sl, #4]
   17a9c:	mov	r2, #0
   17aa0:	strb	r2, [r3]
   17aa4:	ldr	r7, [r8, #-24]	; 0xffffffe8
   17aa8:	cmp	r7, #0
   17aac:	beq	179dc <argp_error@@Base+0x578>
   17ab0:	ldr	r3, [sl]
   17ab4:	ldr	fp, [r3, #8]
   17ab8:	ldr	r0, [fp]
   17abc:	cmp	r0, #0
   17ac0:	movne	r4, fp
   17ac4:	bne	179c0 <argp_error@@Base+0x55c>
   17ac8:	ldr	r3, [sl, #8]
   17acc:	str	r7, [r3]
   17ad0:	ldr	r3, [sl, #8]
   17ad4:	ldr	r2, [r9, #8]
   17ad8:	cmp	r2, #0
   17adc:	beq	17af4 <argp_error@@Base+0x690>
   17ae0:	ldr	r5, [r9, #12]
   17ae4:	and	r5, r5, #1
   17ae8:	cmp	r5, #0
   17aec:	movne	r5, #2
   17af0:	moveq	r5, #1
   17af4:	str	r5, [r3, #4]
   17af8:	ldr	r3, [sl, #8]
   17afc:	mov	r2, #0
   17b00:	str	r2, [r3, #8]
   17b04:	ldr	r1, [sl, #8]
   17b08:	ldr	r0, [r8, #-20]	; 0xffffffec
   17b0c:	cmp	r0, r2
   17b10:	ldreq	r0, [r9, #4]
   17b14:	bic	r0, r0, #-16777216	; 0xff000000
   17b18:	ldr	r3, [sl]
   17b1c:	ldr	r3, [r3, #48]	; 0x30
   17b20:	ldr	r2, [sp, #24]
   17b24:	sub	r3, r2, r3
   17b28:	asr	r3, r3, #2
   17b2c:	rsb	r2, r3, r3, lsl #3
   17b30:	add	r2, r2, r2, lsl #6
   17b34:	add	r2, r3, r2, lsl #3
   17b38:	rsb	r2, r2, r2, lsl #15
   17b3c:	add	r3, r3, r2, lsl #3
   17b40:	add	r3, r3, #1
   17b44:	add	r3, r0, r3, lsl #24
   17b48:	str	r3, [r1, #12]
   17b4c:	ldr	r3, [sl, #8]
   17b50:	add	r2, r3, #16
   17b54:	str	r2, [sl, #8]
   17b58:	mov	r2, #0
   17b5c:	str	r2, [r3, #16]
   17b60:	b	179dc <argp_error@@Base+0x578>
   17b64:	ldr	r3, [r6, #-8]
   17b68:	cmp	r3, #0
   17b6c:	bne	17a00 <argp_error@@Base+0x59c>
   17b70:	ldr	r3, [r6, #-4]
   17b74:	cmp	r3, #0
   17b78:	bne	17a00 <argp_error@@Base+0x59c>
   17b7c:	ldr	r5, [sp, #28]
   17b80:	ldr	r8, [sp, #24]
   17b84:	b	178f0 <argp_error@@Base+0x48c>
   17b88:	mov	r3, #0
   17b8c:	b	17954 <argp_error@@Base+0x4f0>

00017b90 <argp_parse@@Base>:
   17b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b94:	add	fp, sp, #32
   17b98:	sub	sp, sp, #220	; 0xdc
   17b9c:	mov	r8, r0
   17ba0:	str	r1, [fp, #-236]	; 0xffffff14
   17ba4:	str	r2, [fp, #-232]	; 0xffffff18
   17ba8:	mov	r6, r3
   17bac:	tst	r3, #1
   17bb0:	bne	17be0 <argp_parse@@Base+0x50>
   17bb4:	ldr	r3, [pc, #2548]	; 185b0 <argp_parse@@Base+0xa20>
   17bb8:	ldr	r3, [r3]
   17bbc:	cmp	r3, #0
   17bc0:	moveq	r3, r2
   17bc4:	ldreq	r2, [r3]
   17bc8:	ldreq	r3, [pc, #2528]	; 185b0 <argp_parse@@Base+0xa20>
   17bcc:	streq	r2, [r3]
   17bd0:	ldr	r3, [pc, #2524]	; 185b4 <argp_parse@@Base+0xa24>
   17bd4:	ldr	r3, [r3]
   17bd8:	cmp	r3, #0
   17bdc:	beq	17dd0 <argp_parse@@Base+0x240>
   17be0:	tst	r6, #16
   17be4:	beq	17de8 <argp_parse@@Base+0x258>
   17be8:	mov	r2, #36	; 0x24
   17bec:	mov	r1, #0
   17bf0:	sub	r0, fp, #196	; 0xc4
   17bf4:	bl	11358 <memset@plt>
   17bf8:	ands	r3, r6, #4
   17bfc:	str	r3, [fp, #-240]	; 0xffffff10
   17c00:	moveq	r3, #1
   17c04:	movne	r3, #0
   17c08:	str	r3, [fp, #-228]	; 0xffffff1c
   17c0c:	mov	r3, #0
   17c10:	str	r3, [fp, #-224]	; 0xffffff20
   17c14:	str	r3, [fp, #-220]	; 0xffffff24
   17c18:	str	r3, [fp, #-216]	; 0xffffff28
   17c1c:	cmp	r8, r3
   17c20:	beq	17c30 <argp_parse@@Base+0xa0>
   17c24:	sub	r1, fp, #228	; 0xe4
   17c28:	mov	r0, r8
   17c2c:	bl	1760c <argp_error@@Base+0x1a8>
   17c30:	ldr	r4, [fp, #-220]	; 0xffffff24
   17c34:	add	r4, r4, #1
   17c38:	add	r4, r4, r4, lsl #3
   17c3c:	lsl	r4, r4, #2
   17c40:	ldr	r9, [fp, #-216]	; 0xffffff28
   17c44:	lsl	r9, r9, #2
   17c48:	add	sl, r9, r4
   17c4c:	ldr	r5, [fp, #-224]	; 0xffffff20
   17c50:	add	r5, r5, #1
   17c54:	add	r5, sl, r5, lsl #4
   17c58:	ldr	r0, [fp, #-228]	; 0xffffff1c
   17c5c:	add	r0, r0, #1
   17c60:	add	r0, r0, r5
   17c64:	bl	1938c <argp_parse@@Base+0x17fc>
   17c68:	mov	r7, r0
   17c6c:	str	r0, [fp, #-40]	; 0xffffffd8
   17c70:	cmp	r0, #0
   17c74:	moveq	r4, #12
   17c78:	beq	18400 <argp_parse@@Base+0x870>
   17c7c:	str	r0, [fp, #-112]	; 0xffffff90
   17c80:	add	r4, r0, r4
   17c84:	str	r4, [fp, #-104]	; 0xffffff98
   17c88:	add	r3, r0, sl
   17c8c:	str	r3, [fp, #-244]	; 0xffffff0c
   17c90:	str	r3, [fp, #-152]	; 0xffffff68
   17c94:	add	sl, r0, r5
   17c98:	str	sl, [fp, #-156]	; 0xffffff64
   17c9c:	mov	r3, #1
   17ca0:	str	r3, [fp, #-196]	; 0xffffff3c
   17ca4:	str	r3, [fp, #-192]	; 0xffffff40
   17ca8:	sub	ip, fp, #148	; 0x94
   17cac:	sub	lr, fp, #196	; 0xc4
   17cb0:	ldm	lr!, {r0, r1, r2, r3}
   17cb4:	stmia	ip!, {r0, r1, r2, r3}
   17cb8:	ldm	lr!, {r0, r1, r2, r3}
   17cbc:	stmia	ip!, {r0, r1, r2, r3}
   17cc0:	ldr	r3, [lr]
   17cc4:	str	r3, [ip]
   17cc8:	mov	r2, r9
   17ccc:	mov	r1, #0
   17cd0:	mov	r0, r4
   17cd4:	bl	11358 <memset@plt>
   17cd8:	sub	r3, fp, #160	; 0xa0
   17cdc:	str	r3, [fp, #-212]	; 0xffffff2c
   17ce0:	str	sl, [fp, #-208]	; 0xffffff30
   17ce4:	ldr	r3, [fp, #-244]	; 0xffffff0c
   17ce8:	str	r3, [fp, #-204]	; 0xffffff34
   17cec:	str	r4, [fp, #-200]	; 0xffffff38
   17cf0:	tst	r6, #8
   17cf4:	beq	17e80 <argp_parse@@Base+0x2f0>
   17cf8:	add	sl, sl, #1
   17cfc:	str	sl, [fp, #-208]	; 0xffffff30
   17d00:	mov	r3, #45	; 0x2d
   17d04:	strb	r3, [r7, r5]
   17d08:	mov	r3, #0
   17d0c:	ldr	r2, [fp, #-208]	; 0xffffff30
   17d10:	strb	r3, [r2]
   17d14:	ldr	r2, [fp, #-204]	; 0xffffff34
   17d18:	str	r3, [r2]
   17d1c:	str	r8, [fp, #-160]	; 0xffffff60
   17d20:	cmp	r8, r3
   17d24:	beq	17e9c <argp_parse@@Base+0x30c>
   17d28:	sub	r3, fp, #212	; 0xd4
   17d2c:	str	r3, [sp]
   17d30:	ldr	r3, [fp, #-112]	; 0xffffff90
   17d34:	mov	r2, #0
   17d38:	mov	r1, r2
   17d3c:	mov	r0, r8
   17d40:	bl	178a0 <argp_error@@Base+0x43c>
   17d44:	str	r0, [fp, #-108]	; 0xffffff94
   17d48:	mov	r2, #56	; 0x38
   17d4c:	mov	r1, #0
   17d50:	sub	r0, fp, #96	; 0x60
   17d54:	bl	11358 <memset@plt>
   17d58:	ldr	r3, [fp, #-160]	; 0xffffff60
   17d5c:	str	r3, [fp, #-96]	; 0xffffffa0
   17d60:	ldr	r3, [fp, #-236]	; 0xffffff14
   17d64:	str	r3, [fp, #-92]	; 0xffffffa4
   17d68:	ldr	r3, [fp, #-232]	; 0xffffff18
   17d6c:	str	r3, [fp, #-88]	; 0xffffffa8
   17d70:	str	r6, [fp, #-80]	; 0xffffffb0
   17d74:	ldr	r3, [pc, #2108]	; 185b8 <argp_parse@@Base+0xa28>
   17d78:	ldr	r3, [r3]
   17d7c:	str	r3, [fp, #-52]	; 0xffffffcc
   17d80:	ldr	r3, [pc, #2100]	; 185bc <argp_parse@@Base+0xa2c>
   17d84:	ldr	r3, [r3]
   17d88:	str	r3, [fp, #-48]	; 0xffffffd0
   17d8c:	sub	r3, fp, #160	; 0xa0
   17d90:	str	r3, [fp, #-44]	; 0xffffffd4
   17d94:	mov	r3, #1
   17d98:	str	r3, [fp, #-100]	; 0xffffff9c
   17d9c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17da0:	ldr	r2, [fp, #-108]	; 0xffffff94
   17da4:	cmp	r3, r2
   17da8:	bcs	17f34 <argp_parse@@Base+0x3a4>
   17dac:	ldr	r2, [fp, #8]
   17db0:	str	r2, [r3, #24]
   17db4:	ldr	r5, [fp, #-112]	; 0xffffff90
   17db8:	ldr	r3, [fp, #-108]	; 0xffffff94
   17dbc:	cmp	r5, r3
   17dc0:	bcs	17f40 <argp_parse@@Base+0x3b0>
   17dc4:	ldr	r7, [pc, #2036]	; 185c0 <argp_parse@@Base+0xa30>
   17dc8:	mov	r6, #0
   17dcc:	b	17ed8 <argp_parse@@Base+0x348>
   17dd0:	ldr	r3, [fp, #-232]	; 0xffffff18
   17dd4:	ldr	r0, [r3]
   17dd8:	bl	186c4 <argp_parse@@Base+0xb34>
   17ddc:	ldr	r3, [pc, #2000]	; 185b4 <argp_parse@@Base+0xa24>
   17de0:	str	r0, [r3]
   17de4:	b	17be0 <argp_parse@@Base+0x50>
   17de8:	sub	sp, sp, #72	; 0x48
   17dec:	add	r5, sp, #8
   17df0:	sub	sp, sp, #40	; 0x28
   17df4:	add	r4, sp, #8
   17df8:	mov	r1, #0
   17dfc:	str	r1, [r4]
   17e00:	str	r1, [r4, #4]
   17e04:	str	r1, [r4, #8]
   17e08:	str	r1, [r4, #12]
   17e0c:	str	r1, [r4, #20]
   17e10:	str	r1, [r4, #24]
   17e14:	str	r5, [r4, #16]
   17e18:	mov	r2, #64	; 0x40
   17e1c:	mov	r0, r5
   17e20:	bl	11358 <memset@plt>
   17e24:	cmp	r8, #0
   17e28:	addne	r3, r5, #16
   17e2c:	strne	r8, [r5]
   17e30:	moveq	r3, r5
   17e34:	ldr	r2, [pc, #1928]	; 185c4 <argp_parse@@Base+0xa34>
   17e38:	str	r2, [r3]
   17e3c:	ldr	r2, [pc, #1924]	; 185c8 <argp_parse@@Base+0xa38>
   17e40:	ldr	r2, [r2]
   17e44:	cmp	r2, #0
   17e48:	beq	17e68 <argp_parse@@Base+0x2d8>
   17e4c:	add	r2, r3, #32
   17e50:	ldr	r1, [pc, #1908]	; 185cc <argp_parse@@Base+0xa3c>
   17e54:	str	r1, [r3, #16]
   17e58:	mov	r3, #0
   17e5c:	str	r3, [r2]
   17e60:	mov	r8, r4
   17e64:	b	17be8 <argp_parse@@Base+0x58>
   17e68:	ldr	r2, [pc, #1888]	; 185d0 <argp_parse@@Base+0xa40>
   17e6c:	ldr	r2, [r2]
   17e70:	cmp	r2, #0
   17e74:	addeq	r2, r3, #16
   17e78:	bne	17e4c <argp_parse@@Base+0x2bc>
   17e7c:	b	17e58 <argp_parse@@Base+0x2c8>
   17e80:	ldr	r3, [fp, #-240]	; 0xffffff10
   17e84:	cmp	r3, #0
   17e88:	addne	sl, sl, #1
   17e8c:	strne	sl, [fp, #-208]	; 0xffffff30
   17e90:	movne	r3, #43	; 0x2b
   17e94:	strbne	r3, [r7, r5]
   17e98:	b	17d08 <argp_parse@@Base+0x178>
   17e9c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17ea0:	str	r3, [fp, #-108]	; 0xffffff94
   17ea4:	b	17d48 <argp_parse@@Base+0x1b8>
   17ea8:	mov	r3, r6
   17eac:	mov	r2, r7
   17eb0:	sub	r1, fp, #96	; 0x60
   17eb4:	mov	r0, r5
   17eb8:	bl	175a8 <argp_error@@Base+0x144>
   17ebc:	add	r5, r5, #36	; 0x24
   17ec0:	ldr	r3, [fp, #-108]	; 0xffffff94
   17ec4:	cmp	r5, r3
   17ec8:	bcs	17f24 <argp_parse@@Base+0x394>
   17ecc:	cmp	r0, #7
   17ed0:	cmpne	r0, #0
   17ed4:	bne	17f24 <argp_parse@@Base+0x394>
   17ed8:	ldr	r3, [r5, #16]
   17edc:	cmp	r3, #0
   17ee0:	ldrne	r2, [r5, #20]
   17ee4:	ldrne	r3, [r3, #28]
   17ee8:	ldrne	r3, [r3, r2, lsl #2]
   17eec:	strne	r3, [r5, #24]
   17ef0:	ldr	r3, [r5]
   17ef4:	cmp	r3, #0
   17ef8:	bne	17ea8 <argp_parse@@Base+0x318>
   17efc:	ldr	r3, [r5, #4]
   17f00:	ldr	r3, [r3, #16]
   17f04:	cmp	r3, #0
   17f08:	beq	17ea8 <argp_parse@@Base+0x318>
   17f0c:	ldr	r3, [r3]
   17f10:	cmp	r3, #0
   17f14:	ldrne	r3, [r5, #28]
   17f18:	ldrne	r2, [r5, #24]
   17f1c:	strne	r2, [r3]
   17f20:	b	17ea8 <argp_parse@@Base+0x318>
   17f24:	mov	r4, r0
   17f28:	cmp	r0, #7
   17f2c:	beq	17f40 <argp_parse@@Base+0x3b0>
   17f30:	b	17f38 <argp_parse@@Base+0x3a8>
   17f34:	mov	r4, #0
   17f38:	cmp	r4, #0
   17f3c:	bne	18400 <argp_parse@@Base+0x870>
   17f40:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17f44:	tst	r3, #2
   17f48:	moveq	r3, #1
   17f4c:	streq	r3, [fp, #-144]	; 0xffffff70
   17f50:	beq	17f7c <argp_parse@@Base+0x3ec>
   17f54:	mov	r2, #0
   17f58:	str	r2, [fp, #-144]	; 0xffffff70
   17f5c:	tst	r3, #1
   17f60:	beq	17f7c <argp_parse@@Base+0x3ec>
   17f64:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17f68:	sub	r3, r3, #4
   17f6c:	str	r3, [fp, #-88]	; 0xffffffa8
   17f70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f74:	add	r3, r3, #1
   17f78:	str	r3, [fp, #-92]	; 0xffffffa4
   17f7c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17f80:	ldr	r2, [fp, #-232]	; 0xffffff18
   17f84:	cmp	r2, r3
   17f88:	beq	17fa8 <argp_parse@@Base+0x418>
   17f8c:	ldr	r3, [pc, #1568]	; 185b4 <argp_parse@@Base+0xa24>
   17f90:	ldr	r3, [r3]
   17f94:	str	r3, [fp, #-56]	; 0xffffffc8
   17f98:	mov	r6, #0
   17f9c:	mov	sl, #1
   17fa0:	mvn	r9, #0
   17fa4:	b	18218 <argp_parse@@Base+0x688>
   17fa8:	ldr	r0, [r2]
   17fac:	cmp	r0, #0
   17fb0:	beq	17f8c <argp_parse@@Base+0x3fc>
   17fb4:	bl	186c4 <argp_parse@@Base+0xb34>
   17fb8:	str	r0, [fp, #-56]	; 0xffffffc8
   17fbc:	b	17f98 <argp_parse@@Base+0x408>
   17fc0:	ldr	r3, [fp, #-84]	; 0xffffffac
   17fc4:	str	r3, [fp, #-148]	; 0xffffff6c
   17fc8:	str	r9, [fp, #-140]	; 0xffffff74
   17fcc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17fd0:	tst	r3, #64	; 0x40
   17fd4:	beq	180a0 <argp_parse@@Base+0x510>
   17fd8:	sub	r3, fp, #148	; 0x94
   17fdc:	str	r3, [sp, #4]
   17fe0:	str	r6, [sp]
   17fe4:	ldr	r3, [fp, #-152]	; 0xffffff68
   17fe8:	ldr	r2, [fp, #-156]	; 0xffffff64
   17fec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17ff0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17ff4:	bl	18860 <argp_parse@@Base+0xcd0>
   17ff8:	mov	r5, r0
   17ffc:	ldr	r4, [fp, #-148]	; 0xffffff6c
   18000:	str	r4, [fp, #-84]	; 0xffffffac
   18004:	cmn	r5, #1
   18008:	beq	180c8 <argp_parse@@Base+0x538>
   1800c:	cmp	r5, #63	; 0x3f
   18010:	beq	180f4 <argp_parse@@Base+0x564>
   18014:	cmp	r5, #1
   18018:	beq	1812c <argp_parse@@Base+0x59c>
   1801c:	ldr	r4, [fp, #-136]	; 0xffffff78
   18020:	asrs	r3, r5, #24
   18024:	bne	181d8 <argp_parse@@Base+0x648>
   18028:	mov	r1, r5
   1802c:	ldr	r0, [fp, #-156]	; 0xffffff64
   18030:	bl	11310 <strchr@plt>
   18034:	subs	r1, r0, #0
   18038:	beq	18088 <argp_parse@@Base+0x4f8>
   1803c:	ldr	r0, [fp, #-112]	; 0xffffff90
   18040:	ldr	r2, [fp, #-108]	; 0xffffff94
   18044:	cmp	r2, r0
   18048:	bls	18088 <argp_parse@@Base+0x4f8>
   1804c:	ldr	r3, [r0, #8]
   18050:	cmp	r1, r3
   18054:	bcc	18070 <argp_parse@@Base+0x4e0>
   18058:	add	r0, r0, #36	; 0x24
   1805c:	cmp	r2, r0
   18060:	bls	18088 <argp_parse@@Base+0x4f8>
   18064:	ldr	r3, [r0, #8]
   18068:	cmp	r1, r3
   1806c:	bcs	18058 <argp_parse@@Base+0x4c8>
   18070:	mov	r3, r4
   18074:	mov	r2, r5
   18078:	sub	r1, fp, #96	; 0x60
   1807c:	bl	175a8 <argp_error@@Base+0x144>
   18080:	cmp	r0, #7
   18084:	bne	18210 <argp_parse@@Base+0x680>
   18088:	ldr	r3, [pc, #1348]	; 185d4 <argp_parse@@Base+0xa44>
   1808c:	mov	r2, r5
   18090:	ldr	r1, [pc, #1344]	; 185d8 <argp_parse@@Base+0xa48>
   18094:	sub	r0, fp, #96	; 0x60
   18098:	bl	17464 <argp_error@@Base>
   1809c:	b	182b8 <argp_parse@@Base+0x728>
   180a0:	sub	r3, fp, #148	; 0x94
   180a4:	str	r3, [sp, #4]
   180a8:	str	r6, [sp]
   180ac:	ldr	r3, [fp, #-152]	; 0xffffff68
   180b0:	ldr	r2, [fp, #-156]	; 0xffffff64
   180b4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   180b8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   180bc:	bl	18804 <argp_parse@@Base+0xc74>
   180c0:	mov	r5, r0
   180c4:	b	17ffc <argp_parse@@Base+0x46c>
   180c8:	str	r6, [fp, #-100]	; 0xffffff9c
   180cc:	cmp	r4, #1
   180d0:	ble	18240 <argp_parse@@Base+0x6b0>
   180d4:	sub	r3, r4, #-1073741823	; 0xc0000001
   180d8:	ldr	r1, [pc, #1276]	; 185dc <argp_parse@@Base+0xa4c>
   180dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   180e0:	ldr	r0, [r2, r3, lsl #2]
   180e4:	bl	11124 <strcmp@plt>
   180e8:	cmp	r0, #0
   180ec:	streq	r4, [fp, #-72]	; 0xffffffb8
   180f0:	b	18240 <argp_parse@@Base+0x6b0>
   180f4:	ldr	r3, [fp, #-140]	; 0xffffff74
   180f8:	cmn	r3, #1
   180fc:	beq	1801c <argp_parse@@Base+0x48c>
   18100:	mov	r3, #0
   18104:	b	182c8 <argp_parse@@Base+0x738>
   18108:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1810c:	tst	r2, #4
   18110:	movne	r3, #1
   18114:	bne	182c8 <argp_parse@@Base+0x738>
   18118:	add	r2, r3, #1
   1811c:	str	r2, [fp, #-84]	; 0xffffffac
   18120:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18124:	ldr	r3, [r2, r3, lsl #2]
   18128:	str	r3, [fp, #-136]	; 0xffffff78
   1812c:	ldr	r7, [fp, #-136]	; 0xffffff78
   18130:	ldr	r8, [fp, #-84]	; 0xffffffac
   18134:	sub	r8, r8, #1
   18138:	str	r8, [fp, #-84]	; 0xffffffac
   1813c:	ldr	r5, [fp, #-112]	; 0xffffff90
   18140:	ldr	r3, [fp, #-108]	; 0xffffff94
   18144:	cmp	r3, r5
   18148:	bhi	18194 <argp_parse@@Base+0x604>
   1814c:	b	181d0 <argp_parse@@Base+0x640>
   18150:	ldr	r3, [fp, #-84]	; 0xffffffac
   18154:	sub	r3, r3, #1
   18158:	str	r3, [fp, #-84]	; 0xffffffac
   1815c:	mov	r3, r6
   18160:	ldr	r2, [pc, #1144]	; 185e0 <argp_parse@@Base+0xa50>
   18164:	sub	r1, fp, #96	; 0x60
   18168:	mov	r0, r5
   1816c:	bl	175a8 <argp_error@@Base+0x144>
   18170:	add	r5, r5, #36	; 0x24
   18174:	ldr	r3, [fp, #-108]	; 0xffffff94
   18178:	cmp	r5, r3
   1817c:	movcs	r3, #0
   18180:	movcc	r3, #1
   18184:	cmp	r0, #7
   18188:	movne	r3, #0
   1818c:	cmp	r3, #0
   18190:	beq	18574 <argp_parse@@Base+0x9e4>
   18194:	ldr	r3, [fp, #-84]	; 0xffffffac
   18198:	add	r3, r3, #1
   1819c:	str	r3, [fp, #-84]	; 0xffffffac
   181a0:	mov	r3, r7
   181a4:	mov	r2, r6
   181a8:	sub	r1, fp, #96	; 0x60
   181ac:	mov	r0, r5
   181b0:	bl	175a8 <argp_error@@Base+0x144>
   181b4:	cmp	r0, #7
   181b8:	beq	18150 <argp_parse@@Base+0x5c0>
   181bc:	add	r5, r5, #36	; 0x24
   181c0:	cmp	r0, #0
   181c4:	beq	18584 <argp_parse@@Base+0x9f4>
   181c8:	cmp	r0, #7
   181cc:	bne	18210 <argp_parse@@Base+0x680>
   181d0:	mov	r5, #1
   181d4:	b	182b8 <argp_parse@@Base+0x728>
   181d8:	ands	r1, r5, #8388608	; 0x800000
   181dc:	movne	r1, #-16777216	; 0xff000000
   181e0:	bic	r2, r5, #-16777216	; 0xff000000
   181e4:	add	r0, r3, r3, lsl #3
   181e8:	lsl	r0, r0, #2
   181ec:	sub	r0, r0, #36	; 0x24
   181f0:	mov	r3, r4
   181f4:	orr	r2, r2, r1
   181f8:	sub	r1, fp, #96	; 0x60
   181fc:	ldr	ip, [fp, #-112]	; 0xffffff90
   18200:	add	r0, ip, r0
   18204:	bl	175a8 <argp_error@@Base+0x144>
   18208:	cmp	r0, #7
   1820c:	beq	18258 <argp_parse@@Base+0x6c8>
   18210:	cmp	r0, #0
   18214:	bne	18368 <argp_parse@@Base+0x7d8>
   18218:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1821c:	cmp	r3, #0
   18220:	beq	18234 <argp_parse@@Base+0x6a4>
   18224:	ldr	r2, [fp, #-84]	; 0xffffffac
   18228:	cmp	r3, r2
   1822c:	strgt	r6, [fp, #-72]	; 0xffffffb8
   18230:	ble	18240 <argp_parse@@Base+0x6b0>
   18234:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18238:	cmp	r3, #0
   1823c:	bne	17fc0 <argp_parse@@Base+0x430>
   18240:	ldr	r3, [fp, #-84]	; 0xffffffac
   18244:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18248:	cmp	r3, r2
   1824c:	blt	18108 <argp_parse@@Base+0x578>
   18250:	mov	r3, #1
   18254:	b	182c8 <argp_parse@@Base+0x738>
   18258:	ldr	r3, [fp, #-152]	; 0xffffff68
   1825c:	ldr	r2, [r3, #12]
   18260:	cmp	r2, r5
   18264:	beq	18298 <argp_parse@@Base+0x708>
   18268:	ldr	r2, [r3]
   1826c:	cmp	r2, #0
   18270:	beq	18360 <argp_parse@@Base+0x7d0>
   18274:	add	r3, r3, #16
   18278:	ldr	r2, [r3, #12]
   1827c:	cmp	r2, r5
   18280:	beq	18298 <argp_parse@@Base+0x708>
   18284:	ldr	r2, [r3]
   18288:	cmp	r2, #0
   1828c:	bne	18274 <argp_parse@@Base+0x6e4>
   18290:	ldr	r2, [pc, #844]	; 185e4 <argp_parse@@Base+0xa54>
   18294:	b	182a8 <argp_parse@@Base+0x718>
   18298:	ldr	r2, [r3]
   1829c:	ldr	r3, [pc, #832]	; 185e4 <argp_parse@@Base+0xa54>
   182a0:	cmp	r2, #0
   182a4:	moveq	r2, r3
   182a8:	ldr	r3, [pc, #804]	; 185d4 <argp_parse@@Base+0xa44>
   182ac:	ldr	r1, [pc, #820]	; 185e8 <argp_parse@@Base+0xa58>
   182b0:	sub	r0, fp, #96	; 0x60
   182b4:	bl	17464 <argp_error@@Base>
   182b8:	add	r5, r5, #1
   182bc:	bics	r3, r5, #2
   182c0:	moveq	r3, #1
   182c4:	movne	r3, #0
   182c8:	cmp	r3, #0
   182cc:	moveq	r4, #7
   182d0:	beq	1836c <argp_parse@@Base+0x7dc>
   182d4:	ldr	r3, [fp, #-84]	; 0xffffffac
   182d8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   182dc:	cmp	r3, r2
   182e0:	beq	1840c <argp_parse@@Base+0x87c>
   182e4:	ldr	r2, [fp, #4]
   182e8:	cmp	r2, #0
   182ec:	strne	r3, [r2]
   182f0:	beq	18508 <argp_parse@@Base+0x978>
   182f4:	ldr	r5, [fp, #-108]	; 0xffffff94
   182f8:	sub	r5, r5, #36	; 0x24
   182fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   18300:	cmp	r5, r3
   18304:	bcc	18544 <argp_parse@@Base+0x9b4>
   18308:	ldr	r7, [pc, #732]	; 185ec <argp_parse@@Base+0xa5c>
   1830c:	mov	r6, #0
   18310:	mov	r3, r6
   18314:	mov	r2, r7
   18318:	sub	r1, fp, #96	; 0x60
   1831c:	mov	r0, r5
   18320:	bl	175a8 <argp_error@@Base+0x144>
   18324:	sub	r5, r5, #36	; 0x24
   18328:	ldr	r3, [fp, #-112]	; 0xffffff90
   1832c:	cmp	r5, r3
   18330:	bcc	18340 <argp_parse@@Base+0x7b0>
   18334:	cmp	r0, #7
   18338:	cmpne	r0, #0
   1833c:	beq	18310 <argp_parse@@Base+0x780>
   18340:	mov	r4, r0
   18344:	cmp	r0, #7
   18348:	moveq	r4, #0
   1834c:	ldr	r5, [fp, #-108]	; 0xffffff94
   18350:	sub	r5, r5, #36	; 0x24
   18354:	cmp	r3, r5
   18358:	bls	183c4 <argp_parse@@Base+0x834>
   1835c:	b	183f8 <argp_parse@@Base+0x868>
   18360:	ldr	r2, [pc, #636]	; 185e4 <argp_parse@@Base+0xa54>
   18364:	b	182a8 <argp_parse@@Base+0x718>
   18368:	mov	r4, r0
   1836c:	cmp	r4, #7
   18370:	beq	1852c <argp_parse@@Base+0x99c>
   18374:	ldr	r5, [fp, #-112]	; 0xffffff90
   18378:	ldr	r3, [fp, #-108]	; 0xffffff94
   1837c:	cmp	r3, r5
   18380:	bls	183b0 <argp_parse@@Base+0x820>
   18384:	ldr	r7, [pc, #612]	; 185f0 <argp_parse@@Base+0xa60>
   18388:	mov	r6, #0
   1838c:	mov	r3, r6
   18390:	mov	r2, r7
   18394:	sub	r1, fp, #96	; 0x60
   18398:	mov	r0, r5
   1839c:	bl	175a8 <argp_error@@Base+0x144>
   183a0:	add	r5, r5, #36	; 0x24
   183a4:	ldr	r3, [fp, #-108]	; 0xffffff94
   183a8:	cmp	r5, r3
   183ac:	bcc	1838c <argp_parse@@Base+0x7fc>
   183b0:	ldr	r5, [fp, #-108]	; 0xffffff94
   183b4:	sub	r5, r5, #36	; 0x24
   183b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   183bc:	cmp	r3, r5
   183c0:	bhi	183f0 <argp_parse@@Base+0x860>
   183c4:	ldr	r7, [pc, #552]	; 185f4 <argp_parse@@Base+0xa64>
   183c8:	mov	r6, #0
   183cc:	mov	r3, r6
   183d0:	mov	r2, r7
   183d4:	sub	r1, fp, #96	; 0x60
   183d8:	mov	r0, r5
   183dc:	bl	175a8 <argp_error@@Base+0x144>
   183e0:	sub	r5, r5, #36	; 0x24
   183e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   183e8:	cmp	r5, r3
   183ec:	bcs	183cc <argp_parse@@Base+0x83c>
   183f0:	cmp	r4, #7
   183f4:	moveq	r4, #22
   183f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   183fc:	bl	18784 <argp_parse@@Base+0xbf4>
   18400:	mov	r0, r4
   18404:	sub	sp, fp, #32
   18408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1840c:	ldr	r6, [fp, #-112]	; 0xffffff90
   18410:	ldr	r5, [fp, #-108]	; 0xffffff94
   18414:	cmp	r6, r5
   18418:	bcs	1854c <argp_parse@@Base+0x9bc>
   1841c:	mov	r4, #0
   18420:	ldr	r8, [pc, #464]	; 185f8 <argp_parse@@Base+0xa68>
   18424:	mov	r7, r4
   18428:	mov	r0, r4
   1842c:	b	1844c <argp_parse@@Base+0x8bc>
   18430:	add	r6, r6, #36	; 0x24
   18434:	ldr	r5, [fp, #-108]	; 0xffffff94
   18438:	cmp	r6, r5
   1843c:	bcs	18478 <argp_parse@@Base+0x8e8>
   18440:	cmp	r0, #7
   18444:	cmpne	r0, #0
   18448:	bne	18470 <argp_parse@@Base+0x8e0>
   1844c:	ldr	r3, [r6, #12]
   18450:	cmp	r3, #0
   18454:	bne	18430 <argp_parse@@Base+0x8a0>
   18458:	mov	r3, r7
   1845c:	mov	r2, r8
   18460:	sub	r1, fp, #96	; 0x60
   18464:	mov	r0, r6
   18468:	bl	175a8 <argp_error@@Base+0x144>
   1846c:	b	18430 <argp_parse@@Base+0x8a0>
   18470:	mov	r4, r0
   18474:	b	184dc <argp_parse@@Base+0x94c>
   18478:	mov	r4, r0
   1847c:	sub	r5, r5, #36	; 0x24
   18480:	ldr	r3, [fp, #-112]	; 0xffffff90
   18484:	cmp	r3, r5
   18488:	bhi	184dc <argp_parse@@Base+0x94c>
   1848c:	cmp	r0, #0
   18490:	cmpne	r0, #7
   18494:	bne	184dc <argp_parse@@Base+0x94c>
   18498:	ldr	r7, [pc, #348]	; 185fc <argp_parse@@Base+0xa6c>
   1849c:	mov	r6, #0
   184a0:	mov	r3, r6
   184a4:	mov	r2, r7
   184a8:	sub	r1, fp, #96	; 0x60
   184ac:	mov	r0, r5
   184b0:	bl	175a8 <argp_error@@Base+0x144>
   184b4:	sub	r5, r5, #36	; 0x24
   184b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   184bc:	cmp	r5, r3
   184c0:	bcc	184d8 <argp_parse@@Base+0x948>
   184c4:	cmp	r0, #7
   184c8:	cmpne	r0, #0
   184cc:	beq	184a0 <argp_parse@@Base+0x910>
   184d0:	mov	r4, r0
   184d4:	b	184dc <argp_parse@@Base+0x94c>
   184d8:	mov	r4, r0
   184dc:	cmp	r4, #7
   184e0:	beq	18560 <argp_parse@@Base+0x9d0>
   184e4:	ldr	r3, [fp, #4]
   184e8:	cmp	r3, #0
   184ec:	beq	185a4 <argp_parse@@Base+0xa14>
   184f0:	ldr	r3, [fp, #-84]	; 0xffffffac
   184f4:	ldr	r2, [fp, #4]
   184f8:	str	r3, [r2]
   184fc:	cmp	r4, #0
   18500:	beq	182f4 <argp_parse@@Base+0x764>
   18504:	b	1836c <argp_parse@@Base+0x7dc>
   18508:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1850c:	tst	r3, #2
   18510:	bne	1852c <argp_parse@@Base+0x99c>
   18514:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18518:	cmp	r0, #0
   1851c:	beq	1852c <argp_parse@@Base+0x99c>
   18520:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18524:	ldr	r1, [pc, #212]	; 18600 <argp_parse@@Base+0xa70>
   18528:	bl	1131c <fprintf@plt>
   1852c:	mov	r2, #260	; 0x104
   18530:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18534:	sub	r0, fp, #96	; 0x60
   18538:	bl	173a8 <argp_state_help@@Base>
   1853c:	mov	r4, #7
   18540:	b	18374 <argp_parse@@Base+0x7e4>
   18544:	mov	r4, #0
   18548:	b	183f0 <argp_parse@@Base+0x860>
   1854c:	sub	r5, r5, #36	; 0x24
   18550:	cmp	r6, r5
   18554:	movhi	r4, #0
   18558:	bls	18498 <argp_parse@@Base+0x908>
   1855c:	b	184e4 <argp_parse@@Base+0x954>
   18560:	ldr	r3, [fp, #4]
   18564:	cmp	r3, #0
   18568:	movne	r4, #0
   1856c:	bne	184f0 <argp_parse@@Base+0x960>
   18570:	b	182f4 <argp_parse@@Base+0x764>
   18574:	cmp	r0, #0
   18578:	bne	181c8 <argp_parse@@Base+0x638>
   1857c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18580:	str	r3, [fp, #-84]	; 0xffffffac
   18584:	ldr	r3, [fp, #-84]	; 0xffffffac
   18588:	cmp	r8, r3
   1858c:	sublt	r8, r3, r8
   18590:	ldrlt	r3, [r5, #-24]	; 0xffffffe8
   18594:	addlt	r8, r3, r8
   18598:	strlt	r8, [r5, #-24]	; 0xffffffe8
   1859c:	strge	sl, [fp, #-100]	; 0xffffff9c
   185a0:	b	18218 <argp_parse@@Base+0x688>
   185a4:	cmp	r4, #0
   185a8:	beq	182f4 <argp_parse@@Base+0x764>
   185ac:	b	18374 <argp_parse@@Base+0x7e4>
   185b0:	andeq	sp, r2, r4, lsr #12
   185b4:	andeq	sp, r2, r0, lsr #12
   185b8:	andeq	sp, r2, r8, lsr #12
   185bc:	andeq	sp, r2, ip, lsr #12
   185c0:	tsteq	r0, r3
   185c4:	andeq	fp, r1, r0, asr #30
   185c8:	andeq	sp, r2, r0, ror #13
   185cc:	andeq	fp, r1, ip, asr pc
   185d0:	andeq	sp, r2, ip, lsl #13
   185d4:	andeq	fp, r1, r8, ror pc
   185d8:	andeq	ip, r1, ip, lsl #1
   185dc:	andeq	ip, r1, r8, lsl #1
   185e0:	tsteq	r0, r6
   185e4:	andeq	ip, r1, r4, lsl #1
   185e8:	muleq	r1, r4, r0
   185ec:	tsteq	r0, r4
   185f0:	tsteq	r0, r5
   185f4:	tsteq	r0, r7
   185f8:	tsteq	r0, r2
   185fc:	tsteq	r0, r1
   18600:	andeq	ip, r1, r0, lsr #1
   18604:	cmp	r1, #0
   18608:	beq	18654 <argp_parse@@Base+0xac4>
   1860c:	ldr	r2, [r1, #52]	; 0x34
   18610:	ldr	r3, [r2, #48]	; 0x30
   18614:	ldr	r1, [r2, #52]	; 0x34
   18618:	cmp	r3, r1
   1861c:	bcs	1865c <argp_parse@@Base+0xacc>
   18620:	ldr	r2, [r3, #4]
   18624:	cmp	r0, r2
   18628:	beq	18644 <argp_parse@@Base+0xab4>
   1862c:	add	r3, r3, #36	; 0x24
   18630:	cmp	r3, r1
   18634:	bcs	1864c <argp_parse@@Base+0xabc>
   18638:	ldr	r2, [r3, #4]
   1863c:	cmp	r2, r0
   18640:	bne	1862c <argp_parse@@Base+0xa9c>
   18644:	ldr	r0, [r3, #24]
   18648:	bx	lr
   1864c:	mov	r0, #0
   18650:	bx	lr
   18654:	mov	r0, #0
   18658:	bx	lr
   1865c:	mov	r0, #0
   18660:	bx	lr
   18664:	push	{lr}		; (str lr, [sp, #-4]!)
   18668:	sub	sp, sp, #12
   1866c:	ldr	r3, [pc, #28]	; 18690 <argp_parse@@Base+0xb00>
   18670:	ldr	r1, [r3]
   18674:	ldr	r3, [r3, #4]
   18678:	str	r3, [sp]
   1867c:	ldr	r3, [pc, #16]	; 18694 <argp_parse@@Base+0xb04>
   18680:	ldr	r2, [pc, #16]	; 18698 <argp_parse@@Base+0xb08>
   18684:	bl	18c44 <argp_parse@@Base+0x10b4>
   18688:	add	sp, sp, #12
   1868c:	pop	{pc}		; (ldr pc, [sp], #4)
   18690:	muleq	r2, r0, r6
   18694:	andeq	ip, r1, r8, ror r1
   18698:	andeq	ip, r1, r8, lsl #3
   1869c:	ldr	r2, [pc, #20]	; 186b8 <argp_parse@@Base+0xb28>
   186a0:	ldr	r3, [pc, #20]	; 186bc <argp_parse@@Base+0xb2c>
   186a4:	str	r2, [r3]
   186a8:	ldr	r3, [pc, #16]	; 186c0 <argp_parse@@Base+0xb30>
   186ac:	str	r0, [r3]
   186b0:	str	r1, [r3, #4]
   186b4:	bx	lr
   186b8:	andeq	r8, r1, r4, ror #12
   186bc:	andeq	sp, r2, ip, lsl #13
   186c0:	muleq	r2, r0, r6
   186c4:	ldrb	r3, [r0]
   186c8:	cmp	r3, #47	; 0x2f
   186cc:	bne	186dc <argp_parse@@Base+0xb4c>
   186d0:	ldrb	r3, [r0, #1]!
   186d4:	cmp	r3, #47	; 0x2f
   186d8:	beq	186d0 <argp_parse@@Base+0xb40>
   186dc:	ldrb	r2, [r0]
   186e0:	cmp	r2, #0
   186e4:	bxeq	lr
   186e8:	push	{lr}		; (str lr, [sp, #-4]!)
   186ec:	mov	r1, r0
   186f0:	mov	r3, #0
   186f4:	mov	lr, #1
   186f8:	mov	ip, r3
   186fc:	b	1870c <argp_parse@@Base+0xb7c>
   18700:	ldrb	r2, [r1, #1]!
   18704:	cmp	r2, #0
   18708:	beq	18728 <argp_parse@@Base+0xb98>
   1870c:	cmp	r2, #47	; 0x2f
   18710:	moveq	r3, lr
   18714:	beq	18700 <argp_parse@@Base+0xb70>
   18718:	cmp	r3, #0
   1871c:	movne	r0, r1
   18720:	movne	r3, ip
   18724:	b	18700 <argp_parse@@Base+0xb70>
   18728:	pop	{pc}		; (ldr pc, [sp], #4)
   1872c:	push	{r4, lr}
   18730:	mov	r4, r0
   18734:	bl	11304 <strlen@plt>
   18738:	cmp	r0, #1
   1873c:	popls	{r4, pc}
   18740:	sub	r3, r0, #1
   18744:	add	r2, r4, r3
   18748:	ldrb	r1, [r4, r3]
   1874c:	cmp	r1, #47	; 0x2f
   18750:	popne	{r4, pc}
   18754:	cmp	r3, #1
   18758:	beq	1877c <argp_parse@@Base+0xbec>
   1875c:	sub	r0, r3, #1
   18760:	ldrb	r1, [r2, #-1]!
   18764:	cmp	r1, #47	; 0x2f
   18768:	beq	18774 <argp_parse@@Base+0xbe4>
   1876c:	mov	r0, r3
   18770:	pop	{r4, pc}
   18774:	mov	r3, r0
   18778:	b	18754 <argp_parse@@Base+0xbc4>
   1877c:	mov	r0, #1
   18780:	pop	{r4, pc}
   18784:	push	{r4, r5, lr}
   18788:	sub	sp, sp, #12
   1878c:	mov	r5, r0
   18790:	bl	11328 <__errno_location@plt>
   18794:	mov	r4, r0
   18798:	ldr	r3, [r0]
   1879c:	str	r3, [sp]
   187a0:	str	r3, [sp, #4]
   187a4:	mov	r3, #0
   187a8:	str	r3, [r0]
   187ac:	mov	r0, r5
   187b0:	bl	11190 <free@plt>
   187b4:	ldr	r3, [r4]
   187b8:	cmp	r3, #0
   187bc:	moveq	r3, #4
   187c0:	movne	r3, #0
   187c4:	add	r2, sp, #8
   187c8:	add	r3, r2, r3
   187cc:	ldr	r3, [r3, #-8]
   187d0:	str	r3, [r4]
   187d4:	add	sp, sp, #12
   187d8:	pop	{r4, r5, pc}
   187dc:	push	{lr}		; (str lr, [sp, #-4]!)
   187e0:	sub	sp, sp, #20
   187e4:	mov	ip, #0
   187e8:	str	ip, [sp, #8]
   187ec:	str	ip, [sp, #4]
   187f0:	ldr	ip, [sp, #24]
   187f4:	str	ip, [sp]
   187f8:	bl	1a6d0 <argp_parse@@Base+0x2b40>
   187fc:	add	sp, sp, #20
   18800:	pop	{pc}		; (ldr pc, [sp], #4)
   18804:	push	{lr}		; (str lr, [sp, #-4]!)
   18808:	sub	sp, sp, #20
   1880c:	mov	ip, #0
   18810:	str	ip, [sp, #12]
   18814:	ldr	lr, [sp, #28]
   18818:	str	lr, [sp, #8]
   1881c:	str	ip, [sp, #4]
   18820:	ldr	ip, [sp, #24]
   18824:	str	ip, [sp]
   18828:	bl	1a154 <argp_parse@@Base+0x25c4>
   1882c:	add	sp, sp, #20
   18830:	pop	{pc}		; (ldr pc, [sp], #4)
   18834:	push	{lr}		; (str lr, [sp, #-4]!)
   18838:	sub	sp, sp, #20
   1883c:	mov	ip, #0
   18840:	str	ip, [sp, #8]
   18844:	mov	ip, #1
   18848:	str	ip, [sp, #4]
   1884c:	ldr	ip, [sp, #24]
   18850:	str	ip, [sp]
   18854:	bl	1a6d0 <argp_parse@@Base+0x2b40>
   18858:	add	sp, sp, #20
   1885c:	pop	{pc}		; (ldr pc, [sp], #4)
   18860:	push	{lr}		; (str lr, [sp, #-4]!)
   18864:	sub	sp, sp, #20
   18868:	mov	ip, #0
   1886c:	str	ip, [sp, #12]
   18870:	ldr	ip, [sp, #28]
   18874:	str	ip, [sp, #8]
   18878:	mov	ip, #1
   1887c:	str	ip, [sp, #4]
   18880:	ldr	ip, [sp, #24]
   18884:	str	ip, [sp]
   18888:	bl	1a154 <argp_parse@@Base+0x25c4>
   1888c:	add	sp, sp, #20
   18890:	pop	{pc}		; (ldr pc, [sp], #4)
   18894:	push	{r4, r5, r6, lr}
   18898:	subs	r4, r0, #0
   1889c:	beq	18914 <argp_parse@@Base+0xd84>
   188a0:	mov	r1, #47	; 0x2f
   188a4:	mov	r0, r4
   188a8:	bl	113b8 <strrchr@plt>
   188ac:	cmp	r0, #0
   188b0:	addne	r5, r0, #1
   188b4:	moveq	r5, r4
   188b8:	sub	r3, r5, r4
   188bc:	cmp	r3, #6
   188c0:	ble	18900 <argp_parse@@Base+0xd70>
   188c4:	mov	r2, #7
   188c8:	ldr	r1, [pc, #96]	; 18930 <argp_parse@@Base+0xda0>
   188cc:	sub	r0, r5, #7
   188d0:	bl	11448 <strncmp@plt>
   188d4:	cmp	r0, #0
   188d8:	bne	18900 <argp_parse@@Base+0xd70>
   188dc:	mov	r2, #3
   188e0:	ldr	r1, [pc, #76]	; 18934 <argp_parse@@Base+0xda4>
   188e4:	mov	r0, r5
   188e8:	bl	11448 <strncmp@plt>
   188ec:	cmp	r0, #0
   188f0:	addeq	r4, r5, #3
   188f4:	ldreq	r3, [pc, #60]	; 18938 <argp_parse@@Base+0xda8>
   188f8:	streq	r4, [r3]
   188fc:	movne	r4, r5
   18900:	ldr	r3, [pc, #52]	; 1893c <argp_parse@@Base+0xdac>
   18904:	str	r4, [r3]
   18908:	ldr	r3, [pc, #48]	; 18940 <argp_parse@@Base+0xdb0>
   1890c:	str	r4, [r3]
   18910:	pop	{r4, r5, r6, pc}
   18914:	ldr	r3, [pc, #40]	; 18944 <argp_parse@@Base+0xdb4>
   18918:	ldr	r3, [r3]
   1891c:	mov	r2, #55	; 0x37
   18920:	mov	r1, #1
   18924:	ldr	r0, [pc, #28]	; 18948 <argp_parse@@Base+0xdb8>
   18928:	bl	11250 <fwrite@plt>
   1892c:	bl	11454 <abort@plt>
   18930:	ldrdeq	ip, [r1], -r0
   18934:	ldrdeq	ip, [r1], -r8
   18938:	andeq	sp, r2, r0, lsr #12
   1893c:	muleq	r2, r8, r6
   18940:	andeq	sp, r2, r4, lsr #12
   18944:	andeq	sp, r2, r8, lsr #12
   18948:	muleq	r1, r8, r1
   1894c:	push	{r4, r5, r6, lr}
   18950:	sub	sp, sp, #32
   18954:	mov	r4, r0
   18958:	ldr	r5, [sp, #48]	; 0x30
   1895c:	ldr	r6, [sp, #52]	; 0x34
   18960:	cmp	r1, #0
   18964:	beq	189ec <argp_parse@@Base+0xe5c>
   18968:	str	r3, [sp]
   1896c:	mov	r3, r2
   18970:	mov	r2, r1
   18974:	ldr	r1, [pc, #644]	; 18c00 <argp_parse@@Base+0x1070>
   18978:	bl	1131c <fprintf@plt>
   1897c:	ldr	r3, [pc, #640]	; 18c04 <argp_parse@@Base+0x1074>
   18980:	ldr	r2, [pc, #640]	; 18c08 <argp_parse@@Base+0x1078>
   18984:	ldr	r1, [pc, #640]	; 18c0c <argp_parse@@Base+0x107c>
   18988:	mov	r0, r4
   1898c:	bl	1131c <fprintf@plt>
   18990:	mov	r1, r4
   18994:	mov	r0, #10
   18998:	bl	113d0 <fputc@plt>
   1899c:	ldr	r2, [pc, #620]	; 18c10 <argp_parse@@Base+0x1080>
   189a0:	ldr	r1, [pc, #620]	; 18c14 <argp_parse@@Base+0x1084>
   189a4:	mov	r0, r4
   189a8:	bl	1131c <fprintf@plt>
   189ac:	mov	r1, r4
   189b0:	mov	r0, #10
   189b4:	bl	113d0 <fputc@plt>
   189b8:	cmp	r6, #9
   189bc:	ldrls	pc, [pc, r6, lsl #2]
   189c0:	b	18bb0 <argp_parse@@Base+0x1020>
   189c4:	andeq	r8, r1, r8, lsl #20
   189c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189cc:	andeq	r8, r1, r0, lsl sl
   189d0:	andeq	r8, r1, r8, lsr #20
   189d4:	andeq	r8, r1, r8, asr #20
   189d8:	andeq	r8, r1, r0, ror sl
   189dc:	andeq	r8, r1, r0, lsr #21
   189e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189e4:	andeq	r8, r1, r8, lsl fp
   189e8:	andeq	r8, r1, r0, ror #22
   189ec:	ldr	r1, [pc, #548]	; 18c18 <argp_parse@@Base+0x1088>
   189f0:	bl	1131c <fprintf@plt>
   189f4:	b	1897c <argp_parse@@Base+0xdec>
   189f8:	ldr	r2, [r5]
   189fc:	ldr	r1, [pc, #536]	; 18c1c <argp_parse@@Base+0x108c>
   18a00:	mov	r0, r4
   18a04:	bl	1131c <fprintf@plt>
   18a08:	add	sp, sp, #32
   18a0c:	pop	{r4, r5, r6, pc}
   18a10:	ldr	r3, [r5, #4]
   18a14:	ldr	r2, [r5]
   18a18:	ldr	r1, [pc, #512]	; 18c20 <argp_parse@@Base+0x1090>
   18a1c:	mov	r0, r4
   18a20:	bl	1131c <fprintf@plt>
   18a24:	b	18a08 <argp_parse@@Base+0xe78>
   18a28:	ldr	r3, [r5, #4]
   18a2c:	ldr	r2, [r5]
   18a30:	ldr	r1, [r5, #8]
   18a34:	str	r1, [sp]
   18a38:	ldr	r1, [pc, #484]	; 18c24 <argp_parse@@Base+0x1094>
   18a3c:	mov	r0, r4
   18a40:	bl	1131c <fprintf@plt>
   18a44:	b	18a08 <argp_parse@@Base+0xe78>
   18a48:	ldr	r3, [r5, #4]
   18a4c:	ldr	r2, [r5]
   18a50:	ldr	r1, [r5, #12]
   18a54:	str	r1, [sp, #4]
   18a58:	ldr	r1, [r5, #8]
   18a5c:	str	r1, [sp]
   18a60:	ldr	r1, [pc, #448]	; 18c28 <argp_parse@@Base+0x1098>
   18a64:	mov	r0, r4
   18a68:	bl	1131c <fprintf@plt>
   18a6c:	b	18a08 <argp_parse@@Base+0xe78>
   18a70:	ldr	r3, [r5, #4]
   18a74:	ldr	r2, [r5]
   18a78:	ldr	r1, [r5, #16]
   18a7c:	str	r1, [sp, #8]
   18a80:	ldr	r1, [r5, #12]
   18a84:	str	r1, [sp, #4]
   18a88:	ldr	r1, [r5, #8]
   18a8c:	str	r1, [sp]
   18a90:	ldr	r1, [pc, #404]	; 18c2c <argp_parse@@Base+0x109c>
   18a94:	mov	r0, r4
   18a98:	bl	1131c <fprintf@plt>
   18a9c:	b	18a08 <argp_parse@@Base+0xe78>
   18aa0:	ldr	r3, [r5, #4]
   18aa4:	ldr	r2, [r5]
   18aa8:	ldr	r1, [r5, #20]
   18aac:	str	r1, [sp, #12]
   18ab0:	ldr	r1, [r5, #16]
   18ab4:	str	r1, [sp, #8]
   18ab8:	ldr	r1, [r5, #12]
   18abc:	str	r1, [sp, #4]
   18ac0:	ldr	r1, [r5, #8]
   18ac4:	str	r1, [sp]
   18ac8:	ldr	r1, [pc, #352]	; 18c30 <argp_parse@@Base+0x10a0>
   18acc:	mov	r0, r4
   18ad0:	bl	1131c <fprintf@plt>
   18ad4:	b	18a08 <argp_parse@@Base+0xe78>
   18ad8:	ldr	r3, [r5, #4]
   18adc:	ldr	r2, [r5]
   18ae0:	ldr	r1, [r5, #24]
   18ae4:	str	r1, [sp, #16]
   18ae8:	ldr	r1, [r5, #20]
   18aec:	str	r1, [sp, #12]
   18af0:	ldr	r1, [r5, #16]
   18af4:	str	r1, [sp, #8]
   18af8:	ldr	r1, [r5, #12]
   18afc:	str	r1, [sp, #4]
   18b00:	ldr	r1, [r5, #8]
   18b04:	str	r1, [sp]
   18b08:	ldr	r1, [pc, #292]	; 18c34 <argp_parse@@Base+0x10a4>
   18b0c:	mov	r0, r4
   18b10:	bl	1131c <fprintf@plt>
   18b14:	b	18a08 <argp_parse@@Base+0xe78>
   18b18:	ldr	r3, [r5, #4]
   18b1c:	ldr	r2, [r5]
   18b20:	ldr	r1, [r5, #28]
   18b24:	str	r1, [sp, #20]
   18b28:	ldr	r1, [r5, #24]
   18b2c:	str	r1, [sp, #16]
   18b30:	ldr	r1, [r5, #20]
   18b34:	str	r1, [sp, #12]
   18b38:	ldr	r1, [r5, #16]
   18b3c:	str	r1, [sp, #8]
   18b40:	ldr	r1, [r5, #12]
   18b44:	str	r1, [sp, #4]
   18b48:	ldr	r1, [r5, #8]
   18b4c:	str	r1, [sp]
   18b50:	ldr	r1, [pc, #224]	; 18c38 <argp_parse@@Base+0x10a8>
   18b54:	mov	r0, r4
   18b58:	bl	1131c <fprintf@plt>
   18b5c:	b	18a08 <argp_parse@@Base+0xe78>
   18b60:	ldr	r3, [r5, #4]
   18b64:	ldr	r2, [r5]
   18b68:	ldr	r1, [r5, #32]
   18b6c:	str	r1, [sp, #24]
   18b70:	ldr	r1, [r5, #28]
   18b74:	str	r1, [sp, #20]
   18b78:	ldr	r1, [r5, #24]
   18b7c:	str	r1, [sp, #16]
   18b80:	ldr	r1, [r5, #20]
   18b84:	str	r1, [sp, #12]
   18b88:	ldr	r1, [r5, #16]
   18b8c:	str	r1, [sp, #8]
   18b90:	ldr	r1, [r5, #12]
   18b94:	str	r1, [sp, #4]
   18b98:	ldr	r1, [r5, #8]
   18b9c:	str	r1, [sp]
   18ba0:	ldr	r1, [pc, #148]	; 18c3c <argp_parse@@Base+0x10ac>
   18ba4:	mov	r0, r4
   18ba8:	bl	1131c <fprintf@plt>
   18bac:	b	18a08 <argp_parse@@Base+0xe78>
   18bb0:	ldr	r3, [r5, #4]
   18bb4:	ldr	r2, [r5]
   18bb8:	ldr	r1, [r5, #32]
   18bbc:	str	r1, [sp, #24]
   18bc0:	ldr	r1, [r5, #28]
   18bc4:	str	r1, [sp, #20]
   18bc8:	ldr	r1, [r5, #24]
   18bcc:	str	r1, [sp, #16]
   18bd0:	ldr	r1, [r5, #20]
   18bd4:	str	r1, [sp, #12]
   18bd8:	ldr	r1, [r5, #16]
   18bdc:	str	r1, [sp, #8]
   18be0:	ldr	r1, [r5, #12]
   18be4:	str	r1, [sp, #4]
   18be8:	ldr	r1, [r5, #8]
   18bec:	str	r1, [sp]
   18bf0:	ldr	r1, [pc, #72]	; 18c40 <argp_parse@@Base+0x10b0>
   18bf4:	mov	r0, r4
   18bf8:	bl	1131c <fprintf@plt>
   18bfc:	b	18a08 <argp_parse@@Base+0xe78>
   18c00:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   18c04:	andeq	r0, r0, r6, ror #15
   18c08:	strdeq	ip, [r1], -r0
   18c0c:	strdeq	ip, [r1], -r0
   18c10:	strdeq	ip, [r1], -r4
   18c14:	andeq	ip, r1, r8, lsl r2
   18c18:	andeq	ip, r1, r8, ror #3
   18c1c:	andeq	ip, r1, r4, asr #5
   18c20:	ldrdeq	ip, [r1], -r4
   18c24:	andeq	ip, r1, ip, ror #5
   18c28:	andeq	ip, r1, r8, lsl #6
   18c2c:	andeq	ip, r1, r8, lsr #6
   18c30:	andeq	ip, r1, ip, asr #6
   18c34:	andeq	ip, r1, r4, ror r3
   18c38:	andeq	ip, r1, r0, lsr #7
   18c3c:	ldrdeq	ip, [r1], -r0
   18c40:	andeq	ip, r1, r4, lsl #8
   18c44:	push	{r4, r5, lr}
   18c48:	sub	sp, sp, #12
   18c4c:	ldr	r5, [sp, #24]
   18c50:	ldr	ip, [r5]
   18c54:	cmp	ip, #0
   18c58:	beq	18c88 <argp_parse@@Base+0x10f8>
   18c5c:	mov	lr, r5
   18c60:	mov	ip, #0
   18c64:	add	ip, ip, #1
   18c68:	ldr	r4, [lr, #4]!
   18c6c:	cmp	r4, #0
   18c70:	bne	18c64 <argp_parse@@Base+0x10d4>
   18c74:	str	ip, [sp, #4]
   18c78:	str	r5, [sp]
   18c7c:	bl	1894c <argp_parse@@Base+0xdbc>
   18c80:	add	sp, sp, #12
   18c84:	pop	{r4, r5, pc}
   18c88:	mov	ip, #0
   18c8c:	b	18c74 <argp_parse@@Base+0x10e4>
   18c90:	push	{r4, r5, lr}
   18c94:	sub	sp, sp, #52	; 0x34
   18c98:	ldr	r4, [sp, #64]	; 0x40
   18c9c:	sub	r4, r4, #4
   18ca0:	add	r5, sp, #4
   18ca4:	mov	ip, #0
   18ca8:	ldr	lr, [r4, #4]!
   18cac:	str	lr, [r5, #4]!
   18cb0:	cmp	lr, #0
   18cb4:	beq	18cc4 <argp_parse@@Base+0x1134>
   18cb8:	add	ip, ip, #1
   18cbc:	cmp	ip, #10
   18cc0:	bne	18ca8 <argp_parse@@Base+0x1118>
   18cc4:	str	ip, [sp, #4]
   18cc8:	add	ip, sp, #8
   18ccc:	str	ip, [sp]
   18cd0:	bl	1894c <argp_parse@@Base+0xdbc>
   18cd4:	add	sp, sp, #52	; 0x34
   18cd8:	pop	{r4, r5, pc}
   18cdc:	push	{r3}		; (str r3, [sp, #-4]!)
   18ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   18ce4:	sub	sp, sp, #16
   18ce8:	add	r3, sp, #24
   18cec:	str	r3, [sp, #12]
   18cf0:	str	r3, [sp]
   18cf4:	ldr	r3, [sp, #20]
   18cf8:	bl	18c90 <argp_parse@@Base+0x1100>
   18cfc:	add	sp, sp, #16
   18d00:	pop	{lr}		; (ldr lr, [sp], #4)
   18d04:	add	sp, sp, #4
   18d08:	bx	lr
   18d0c:	push	{r4, lr}
   18d10:	ldr	r3, [pc, #52]	; 18d4c <argp_parse@@Base+0x11bc>
   18d14:	ldr	r1, [r3]
   18d18:	mov	r0, #10
   18d1c:	bl	113d0 <fputc@plt>
   18d20:	ldr	r1, [pc, #40]	; 18d50 <argp_parse@@Base+0x11c0>
   18d24:	ldr	r0, [pc, #40]	; 18d54 <argp_parse@@Base+0x11c4>
   18d28:	bl	11148 <printf@plt>
   18d2c:	ldr	r2, [pc, #36]	; 18d58 <argp_parse@@Base+0x11c8>
   18d30:	ldr	r1, [pc, #36]	; 18d5c <argp_parse@@Base+0x11cc>
   18d34:	ldr	r0, [pc, #36]	; 18d60 <argp_parse@@Base+0x11d0>
   18d38:	bl	11148 <printf@plt>
   18d3c:	ldr	r1, [pc, #32]	; 18d64 <argp_parse@@Base+0x11d4>
   18d40:	ldr	r0, [pc, #32]	; 18d68 <argp_parse@@Base+0x11d8>
   18d44:	bl	11148 <printf@plt>
   18d48:	pop	{r4, pc}
   18d4c:	andeq	sp, r2, ip, lsr #12
   18d50:	andeq	ip, r1, r0, asr #8
   18d54:	andeq	ip, r1, r8, asr r4
   18d58:	andeq	ip, r1, ip, ror #8
   18d5c:	andeq	ip, r1, r8, lsl #3
   18d60:	muleq	r1, r4, r4
   18d64:	andeq	ip, r1, r8, lsr #9
   18d68:	andeq	ip, r1, r8, asr #9
   18d6c:	push	{r4, lr}
   18d70:	bl	1938c <argp_parse@@Base+0x17fc>
   18d74:	cmp	r0, #0
   18d78:	popne	{r4, pc}
   18d7c:	bl	19310 <argp_parse@@Base+0x1780>
   18d80:	push	{r4, lr}
   18d84:	bl	1938c <argp_parse@@Base+0x17fc>
   18d88:	cmp	r0, #0
   18d8c:	popne	{r4, pc}
   18d90:	bl	19310 <argp_parse@@Base+0x1780>
   18d94:	push	{r4, lr}
   18d98:	bl	18d6c <argp_parse@@Base+0x11dc>
   18d9c:	pop	{r4, pc}
   18da0:	push	{r4, r5, r6, lr}
   18da4:	mov	r5, r0
   18da8:	mov	r4, r1
   18dac:	bl	193bc <argp_parse@@Base+0x182c>
   18db0:	cmp	r0, #0
   18db4:	popne	{r4, r5, r6, pc}
   18db8:	adds	r4, r4, #0
   18dbc:	movne	r4, #1
   18dc0:	cmp	r5, #0
   18dc4:	orreq	r4, r4, #1
   18dc8:	cmp	r4, #0
   18dcc:	popeq	{r4, r5, r6, pc}
   18dd0:	bl	19310 <argp_parse@@Base+0x1780>
   18dd4:	push	{r4, lr}
   18dd8:	cmp	r1, #0
   18ddc:	orreq	r1, r1, #1
   18de0:	bl	193bc <argp_parse@@Base+0x182c>
   18de4:	cmp	r0, #0
   18de8:	popne	{r4, pc}
   18dec:	bl	19310 <argp_parse@@Base+0x1780>
   18df0:	push	{r4, r5, r6, lr}
   18df4:	mov	r6, r0
   18df8:	mov	r5, r1
   18dfc:	mov	r4, r2
   18e00:	bl	1a768 <argp_parse@@Base+0x2bd8>
   18e04:	cmp	r0, #0
   18e08:	popne	{r4, r5, r6, pc}
   18e0c:	cmp	r6, #0
   18e10:	beq	18e20 <argp_parse@@Base+0x1290>
   18e14:	cmp	r5, #0
   18e18:	cmpne	r4, #0
   18e1c:	popeq	{r4, r5, r6, pc}
   18e20:	bl	19310 <argp_parse@@Base+0x1780>
   18e24:	push	{r4, lr}
   18e28:	bl	18df0 <argp_parse@@Base+0x1260>
   18e2c:	pop	{r4, pc}
   18e30:	push	{r4, lr}
   18e34:	mov	ip, r1
   18e38:	mov	r3, r2
   18e3c:	cmp	r2, #0
   18e40:	cmpne	r1, #0
   18e44:	moveq	r3, #1
   18e48:	moveq	ip, r3
   18e4c:	mov	r2, r3
   18e50:	mov	r1, ip
   18e54:	bl	1a768 <argp_parse@@Base+0x2bd8>
   18e58:	cmp	r0, #0
   18e5c:	popne	{r4, pc}
   18e60:	bl	19310 <argp_parse@@Base+0x1780>
   18e64:	push	{r4, lr}
   18e68:	mov	r2, r1
   18e6c:	mov	r1, r0
   18e70:	mov	r0, #0
   18e74:	bl	18df0 <argp_parse@@Base+0x1260>
   18e78:	pop	{r4, pc}
   18e7c:	push	{r4, lr}
   18e80:	mov	r2, r1
   18e84:	mov	r1, r0
   18e88:	mov	r0, #0
   18e8c:	bl	18e30 <argp_parse@@Base+0x12a0>
   18e90:	pop	{r4, pc}
   18e94:	push	{r4, r5, r6, r7, r8, lr}
   18e98:	mov	r5, r1
   18e9c:	mov	r6, r2
   18ea0:	ldr	r4, [r1]
   18ea4:	subs	r7, r0, #0
   18ea8:	beq	18ec4 <argp_parse@@Base+0x1334>
   18eac:	lsr	r2, r4, #1
   18eb0:	add	r3, r2, #1
   18eb4:	mvn	r3, r3
   18eb8:	cmp	r4, r3
   18ebc:	bls	18ee8 <argp_parse@@Base+0x1358>
   18ec0:	bl	19310 <argp_parse@@Base+0x1780>
   18ec4:	cmp	r4, #0
   18ec8:	bne	18ef0 <argp_parse@@Base+0x1360>
   18ecc:	mov	r1, r2
   18ed0:	mov	r0, #64	; 0x40
   18ed4:	bl	1a7b4 <argp_parse@@Base+0x2c24>
   18ed8:	cmp	r0, #0
   18edc:	movne	r4, r0
   18ee0:	addeq	r4, r0, #1
   18ee4:	b	18ef0 <argp_parse@@Base+0x1360>
   18ee8:	add	r4, r4, #1
   18eec:	add	r4, r4, r2
   18ef0:	mov	r2, r6
   18ef4:	mov	r1, r4
   18ef8:	mov	r0, r7
   18efc:	bl	18df0 <argp_parse@@Base+0x1260>
   18f00:	str	r4, [r5]
   18f04:	pop	{r4, r5, r6, r7, r8, pc}
   18f08:	push	{r4, lr}
   18f0c:	mov	r2, #1
   18f10:	bl	18e94 <argp_parse@@Base+0x1304>
   18f14:	pop	{r4, pc}
   18f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f1c:	sub	sp, sp, #12
   18f20:	mov	fp, r0
   18f24:	mov	sl, r1
   18f28:	mov	r9, r2
   18f2c:	mov	r7, r3
   18f30:	ldr	r6, [sp, #48]	; 0x30
   18f34:	ldr	r5, [r1]
   18f38:	asrs	r4, r5, #1
   18f3c:	bmi	19098 <argp_parse@@Base+0x1508>
   18f40:	cmp	r5, #0
   18f44:	blt	190ac <argp_parse@@Base+0x151c>
   18f48:	mvn	r3, #-2147483648	; 0x80000000
   18f4c:	sub	r3, r3, r4
   18f50:	cmp	r5, r3
   18f54:	movle	r3, #0
   18f58:	movgt	r3, #1
   18f5c:	cmp	r3, #0
   18f60:	addeq	r4, r4, r5
   18f64:	mvnne	r4, #-2147483648	; 0x80000000
   18f68:	mvn	r8, r7
   18f6c:	lsr	r8, r8, #31
   18f70:	cmp	r7, r4
   18f74:	movge	r3, #0
   18f78:	andlt	r3, r8, #1
   18f7c:	cmp	r3, #0
   18f80:	movne	r4, r7
   18f84:	cmp	r6, #0
   18f88:	blt	190c0 <argp_parse@@Base+0x1530>
   18f8c:	cmp	r6, #0
   18f90:	beq	1916c <argp_parse@@Base+0x15dc>
   18f94:	cmp	r4, #0
   18f98:	blt	1911c <argp_parse@@Base+0x158c>
   18f9c:	mov	r1, r6
   18fa0:	mvn	r0, #-2147483648	; 0x80000000
   18fa4:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   18fa8:	cmp	r0, r4
   18fac:	movge	r0, #0
   18fb0:	movlt	r0, #1
   18fb4:	cmp	r0, #0
   18fb8:	mvnne	r3, #-2147483648	; 0x80000000
   18fbc:	strne	r3, [sp, #4]
   18fc0:	beq	19154 <argp_parse@@Base+0x15c4>
   18fc4:	mov	r1, r6
   18fc8:	ldr	r0, [sp, #4]
   18fcc:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   18fd0:	mov	r4, r0
   18fd4:	mov	r1, r6
   18fd8:	ldr	r0, [sp, #4]
   18fdc:	bl	1abe0 <argp_parse@@Base+0x3050>
   18fe0:	ldr	r3, [sp, #4]
   18fe4:	sub	r1, r3, r1
   18fe8:	cmp	fp, #0
   18fec:	moveq	r3, #0
   18ff0:	streq	r3, [sl]
   18ff4:	sub	r3, r4, r5
   18ff8:	cmp	r3, r9
   18ffc:	bge	19084 <argp_parse@@Base+0x14f4>
   19000:	cmp	r9, #0
   19004:	blt	19178 <argp_parse@@Base+0x15e8>
   19008:	cmp	r5, #0
   1900c:	blt	1918c <argp_parse@@Base+0x15fc>
   19010:	mvn	r3, #-2147483648	; 0x80000000
   19014:	sub	r3, r3, r9
   19018:	cmp	r5, r3
   1901c:	movle	r3, #0
   19020:	movgt	r3, #1
   19024:	cmp	r3, #0
   19028:	bne	19234 <argp_parse@@Base+0x16a4>
   1902c:	add	r5, r5, r9
   19030:	mov	r4, r5
   19034:	cmp	r7, r5
   19038:	movge	r7, #0
   1903c:	andlt	r7, r8, #1
   19040:	cmp	r7, #0
   19044:	bne	19234 <argp_parse@@Base+0x16a4>
   19048:	cmp	r6, #0
   1904c:	blt	191a0 <argp_parse@@Base+0x1610>
   19050:	cmp	r6, #0
   19054:	beq	19080 <argp_parse@@Base+0x14f0>
   19058:	cmp	r5, #0
   1905c:	blt	191fc <argp_parse@@Base+0x166c>
   19060:	mov	r1, r6
   19064:	mvn	r0, #-2147483648	; 0x80000000
   19068:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   1906c:	cmp	r5, r0
   19070:	movle	r0, #0
   19074:	movgt	r0, #1
   19078:	cmp	r0, #0
   1907c:	bne	19234 <argp_parse@@Base+0x16a4>
   19080:	mul	r1, r5, r6
   19084:	mov	r0, fp
   19088:	bl	18da0 <argp_parse@@Base+0x1210>
   1908c:	str	r4, [sl]
   19090:	add	sp, sp, #12
   19094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19098:	rsb	r3, r4, #-2147483648	; 0x80000000
   1909c:	cmp	r5, r3
   190a0:	movge	r3, #0
   190a4:	movlt	r3, #1
   190a8:	b	18f5c <argp_parse@@Base+0x13cc>
   190ac:	rsb	r3, r5, #-2147483648	; 0x80000000
   190b0:	cmp	r4, r3
   190b4:	movge	r3, #0
   190b8:	movlt	r3, #1
   190bc:	b	18f5c <argp_parse@@Base+0x13cc>
   190c0:	cmp	r4, #0
   190c4:	blt	190ec <argp_parse@@Base+0x155c>
   190c8:	cmn	r6, #1
   190cc:	beq	19108 <argp_parse@@Base+0x1578>
   190d0:	mov	r1, r6
   190d4:	mov	r0, #-2147483648	; 0x80000000
   190d8:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   190dc:	cmp	r0, r4
   190e0:	movge	r0, #0
   190e4:	movlt	r0, #1
   190e8:	b	18fb4 <argp_parse@@Base+0x1424>
   190ec:	mov	r1, r6
   190f0:	mvn	r0, #-2147483648	; 0x80000000
   190f4:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   190f8:	cmp	r0, r4
   190fc:	movle	r0, #0
   19100:	movgt	r0, #1
   19104:	b	18fb4 <argp_parse@@Base+0x1424>
   19108:	add	r0, r4, #-2147483648	; 0x80000000
   1910c:	cmp	r0, #0
   19110:	movle	r0, #0
   19114:	movgt	r0, #1
   19118:	b	18fb4 <argp_parse@@Base+0x1424>
   1911c:	cmn	r4, #1
   19120:	beq	19140 <argp_parse@@Base+0x15b0>
   19124:	mov	r1, r4
   19128:	mov	r0, #-2147483648	; 0x80000000
   1912c:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   19130:	cmp	r6, r0
   19134:	movle	r0, #0
   19138:	movgt	r0, #1
   1913c:	b	18fb4 <argp_parse@@Base+0x1424>
   19140:	add	r0, r6, #-2147483648	; 0x80000000
   19144:	cmp	r0, #0
   19148:	movle	r0, #0
   1914c:	movgt	r0, #1
   19150:	b	18fb4 <argp_parse@@Base+0x1424>
   19154:	mul	r1, r6, r4
   19158:	cmp	r1, #63	; 0x3f
   1915c:	movle	r3, #64	; 0x40
   19160:	strle	r3, [sp, #4]
   19164:	bgt	18fe8 <argp_parse@@Base+0x1458>
   19168:	b	18fc4 <argp_parse@@Base+0x1434>
   1916c:	mov	r3, #64	; 0x40
   19170:	str	r3, [sp, #4]
   19174:	b	18fc4 <argp_parse@@Base+0x1434>
   19178:	rsb	r3, r9, #-2147483648	; 0x80000000
   1917c:	cmp	r5, r3
   19180:	movge	r3, #0
   19184:	movlt	r3, #1
   19188:	b	19024 <argp_parse@@Base+0x1494>
   1918c:	rsb	r3, r5, #-2147483648	; 0x80000000
   19190:	cmp	r9, r3
   19194:	movge	r3, #0
   19198:	movlt	r3, #1
   1919c:	b	19024 <argp_parse@@Base+0x1494>
   191a0:	cmp	r5, #0
   191a4:	blt	191cc <argp_parse@@Base+0x163c>
   191a8:	cmn	r6, #1
   191ac:	beq	191e8 <argp_parse@@Base+0x1658>
   191b0:	mov	r1, r6
   191b4:	mov	r0, #-2147483648	; 0x80000000
   191b8:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   191bc:	cmp	r5, r0
   191c0:	movle	r0, #0
   191c4:	movgt	r0, #1
   191c8:	b	19078 <argp_parse@@Base+0x14e8>
   191cc:	mov	r1, r6
   191d0:	mvn	r0, #-2147483648	; 0x80000000
   191d4:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   191d8:	cmp	r5, r0
   191dc:	movge	r0, #0
   191e0:	movlt	r0, #1
   191e4:	b	19078 <argp_parse@@Base+0x14e8>
   191e8:	add	r0, r5, #-2147483648	; 0x80000000
   191ec:	cmp	r0, #0
   191f0:	movle	r0, #0
   191f4:	movgt	r0, #1
   191f8:	b	19078 <argp_parse@@Base+0x14e8>
   191fc:	cmn	r5, #1
   19200:	beq	19220 <argp_parse@@Base+0x1690>
   19204:	mov	r1, r5
   19208:	mov	r0, #-2147483648	; 0x80000000
   1920c:	bl	1a9c0 <argp_parse@@Base+0x2e30>
   19210:	cmp	r6, r0
   19214:	movle	r0, #0
   19218:	movgt	r0, #1
   1921c:	b	19078 <argp_parse@@Base+0x14e8>
   19220:	add	r0, r6, #-2147483648	; 0x80000000
   19224:	cmp	r0, #0
   19228:	movle	r0, #0
   1922c:	movgt	r0, #1
   19230:	b	19078 <argp_parse@@Base+0x14e8>
   19234:	bl	19310 <argp_parse@@Base+0x1780>
   19238:	push	{r4, lr}
   1923c:	bl	1933c <argp_parse@@Base+0x17ac>
   19240:	cmp	r0, #0
   19244:	popne	{r4, pc}
   19248:	bl	19310 <argp_parse@@Base+0x1780>
   1924c:	push	{r4, lr}
   19250:	mov	r1, #1
   19254:	bl	19238 <argp_parse@@Base+0x16a8>
   19258:	pop	{r4, pc}
   1925c:	push	{r4, lr}
   19260:	bl	1933c <argp_parse@@Base+0x17ac>
   19264:	cmp	r0, #0
   19268:	popne	{r4, pc}
   1926c:	bl	19310 <argp_parse@@Base+0x1780>
   19270:	push	{r4, lr}
   19274:	mov	r1, #1
   19278:	bl	1925c <argp_parse@@Base+0x16cc>
   1927c:	pop	{r4, pc}
   19280:	push	{r4, r5, r6, lr}
   19284:	mov	r5, r0
   19288:	mov	r4, r1
   1928c:	mov	r0, r1
   19290:	bl	18d6c <argp_parse@@Base+0x11dc>
   19294:	mov	r2, r4
   19298:	mov	r1, r5
   1929c:	bl	111b4 <memcpy@plt>
   192a0:	pop	{r4, r5, r6, pc}
   192a4:	push	{r4, r5, r6, lr}
   192a8:	mov	r5, r0
   192ac:	mov	r4, r1
   192b0:	mov	r0, r1
   192b4:	bl	18d80 <argp_parse@@Base+0x11f0>
   192b8:	mov	r2, r4
   192bc:	mov	r1, r5
   192c0:	bl	111b4 <memcpy@plt>
   192c4:	pop	{r4, r5, r6, pc}
   192c8:	push	{r4, r5, r6, lr}
   192cc:	mov	r5, r0
   192d0:	mov	r4, r1
   192d4:	add	r0, r1, #1
   192d8:	bl	18d80 <argp_parse@@Base+0x11f0>
   192dc:	mov	r2, #0
   192e0:	strb	r2, [r0, r4]
   192e4:	mov	r2, r4
   192e8:	mov	r1, r5
   192ec:	bl	111b4 <memcpy@plt>
   192f0:	pop	{r4, r5, r6, pc}
   192f4:	push	{r4, lr}
   192f8:	mov	r4, r0
   192fc:	bl	11304 <strlen@plt>
   19300:	add	r1, r0, #1
   19304:	mov	r0, r4
   19308:	bl	19280 <argp_parse@@Base+0x16f0>
   1930c:	pop	{r4, pc}
   19310:	push	{r4, lr}
   19314:	ldr	r3, [pc, #20]	; 19330 <argp_parse@@Base+0x17a0>
   19318:	ldr	r0, [r3]
   1931c:	ldr	r3, [pc, #16]	; 19334 <argp_parse@@Base+0x17a4>
   19320:	ldr	r2, [pc, #16]	; 19338 <argp_parse@@Base+0x17a8>
   19324:	mov	r1, #0
   19328:	bl	11268 <error@plt>
   1932c:	bl	11454 <abort@plt>
   19330:	andeq	sp, r2, r0, lsl r6
   19334:	andeq	ip, r1, r0, lsr #10
   19338:	andeq	sl, r1, ip, lsr #28
   1933c:	push	{r4, lr}
   19340:	mov	r2, r0
   19344:	mov	r3, r1
   19348:	cmp	r1, #0
   1934c:	cmpne	r0, #0
   19350:	moveq	r3, #1
   19354:	moveq	r2, r3
   19358:	umull	r0, r1, r2, r3
   1935c:	cmp	r0, #0
   19360:	cmpge	r1, #0
   19364:	bne	19378 <argp_parse@@Base+0x17e8>
   19368:	mov	r1, r3
   1936c:	mov	r0, r2
   19370:	bl	11100 <calloc@plt>
   19374:	pop	{r4, pc}
   19378:	bl	11328 <__errno_location@plt>
   1937c:	mov	r3, #12
   19380:	str	r3, [r0]
   19384:	mov	r0, #0
   19388:	pop	{r4, pc}
   1938c:	push	{r4, lr}
   19390:	cmp	r0, #0
   19394:	moveq	r0, #1
   19398:	cmp	r0, #0
   1939c:	blt	193a8 <argp_parse@@Base+0x1818>
   193a0:	bl	1128c <malloc@plt>
   193a4:	pop	{r4, pc}
   193a8:	bl	11328 <__errno_location@plt>
   193ac:	mov	r3, #12
   193b0:	str	r3, [r0]
   193b4:	mov	r0, #0
   193b8:	pop	{r4, pc}
   193bc:	push	{r4, lr}
   193c0:	cmp	r0, #0
   193c4:	beq	193e0 <argp_parse@@Base+0x1850>
   193c8:	cmp	r1, #0
   193cc:	beq	193ec <argp_parse@@Base+0x185c>
   193d0:	cmp	r1, #0
   193d4:	blt	193f8 <argp_parse@@Base+0x1868>
   193d8:	bl	1122c <realloc@plt>
   193dc:	pop	{r4, pc}
   193e0:	mov	r0, r1
   193e4:	bl	1938c <argp_parse@@Base+0x17fc>
   193e8:	pop	{r4, pc}
   193ec:	bl	18784 <argp_parse@@Base+0xbf4>
   193f0:	mov	r0, #0
   193f4:	pop	{r4, pc}
   193f8:	bl	11328 <__errno_location@plt>
   193fc:	mov	r3, #12
   19400:	str	r3, [r0]
   19404:	mov	r0, #0
   19408:	pop	{r4, pc}
   1940c:	push	{r4, r5, r6, r7, r8, lr}
   19410:	mov	r8, r0
   19414:	mov	r7, r1
   19418:	mov	r6, r2
   1941c:	mov	r5, r3
   19420:	mov	r0, #36	; 0x24
   19424:	bl	1938c <argp_parse@@Base+0x17fc>
   19428:	subs	r4, r0, #0
   1942c:	beq	1946c <argp_parse@@Base+0x18dc>
   19430:	str	r8, [r4]
   19434:	str	r7, [r4, #4]
   19438:	str	r6, [r4, #8]
   1943c:	str	r5, [r4, #12]
   19440:	mov	r3, #0
   19444:	str	r3, [r4, #20]
   19448:	str	r3, [r4, #16]
   1944c:	mov	r0, #200	; 0xc8
   19450:	bl	1938c <argp_parse@@Base+0x17fc>
   19454:	str	r0, [r4, #24]
   19458:	cmp	r0, #0
   1945c:	strne	r0, [r4, #28]
   19460:	addne	r0, r0, #200	; 0xc8
   19464:	strne	r0, [r4, #32]
   19468:	beq	19474 <argp_parse@@Base+0x18e4>
   1946c:	mov	r0, r4
   19470:	pop	{r4, r5, r6, r7, r8, pc}
   19474:	mov	r0, r4
   19478:	bl	18784 <argp_parse@@Base+0xbf4>
   1947c:	mov	r4, #0
   19480:	b	1946c <argp_parse@@Base+0x18dc>
   19484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19488:	sub	sp, sp, #20
   1948c:	mov	r4, r0
   19490:	ldr	r2, [r0, #24]
   19494:	ldr	r3, [r0, #16]
   19498:	add	r9, r2, r3
   1949c:	mov	sl, #32
   194a0:	b	1954c <argp_parse@@Base+0x19bc>
   194a4:	add	r5, r5, #1
   194a8:	cmp	r6, r5
   194ac:	beq	194dc <argp_parse@@Base+0x194c>
   194b0:	ldr	r0, [r4]
   194b4:	ldr	r3, [r0, #20]
   194b8:	ldr	r2, [r0, #24]
   194bc:	cmp	r3, r2
   194c0:	addcc	r2, r3, #1
   194c4:	strcc	r2, [r0, #20]
   194c8:	strbcc	sl, [r3]
   194cc:	bcc	194a4 <argp_parse@@Base+0x1914>
   194d0:	mov	r1, sl
   194d4:	bl	11394 <__overflow@plt>
   194d8:	b	194a4 <argp_parse@@Base+0x1914>
   194dc:	str	r6, [r4, #20]
   194e0:	ldr	fp, [r4, #28]
   194e4:	str	fp, [sp, #8]
   194e8:	str	r9, [sp, #4]
   194ec:	sub	r3, fp, r9
   194f0:	str	r3, [sp]
   194f4:	mov	r2, r3
   194f8:	mov	r1, #10
   194fc:	mov	r0, r9
   19500:	bl	1137c <memchr@plt>
   19504:	mov	r7, r0
   19508:	ldr	r3, [r4, #20]
   1950c:	cmp	r3, #0
   19510:	movlt	r3, #0
   19514:	strlt	r3, [r4, #20]
   19518:	cmp	r7, #0
   1951c:	beq	195bc <argp_parse@@Base+0x1a2c>
   19520:	ldr	r0, [r4, #20]
   19524:	mov	r5, r7
   19528:	ldr	r8, [r4, #8]
   1952c:	ldr	r3, [sp, #4]
   19530:	sub	r3, r7, r3
   19534:	add	r3, r3, r0
   19538:	cmp	r3, r8
   1953c:	bge	1960c <argp_parse@@Base+0x1a7c>
   19540:	mov	r3, #0
   19544:	str	r3, [r4, #20]
   19548:	add	r9, r7, #1
   1954c:	ldr	fp, [r4, #28]
   19550:	cmp	r9, fp
   19554:	bcs	195f4 <argp_parse@@Base+0x1a64>
   19558:	ldr	r3, [r4, #20]
   1955c:	cmp	r3, #0
   19560:	bne	194e0 <argp_parse@@Base+0x1950>
   19564:	ldr	r6, [r4, #4]
   19568:	cmp	r6, #0
   1956c:	beq	199b8 <argp_parse@@Base+0x1e28>
   19570:	add	r3, fp, r6
   19574:	ldr	r2, [r4, #32]
   19578:	cmp	r2, r3
   1957c:	movls	r5, #0
   19580:	bls	194b0 <argp_parse@@Base+0x1920>
   19584:	add	r5, r9, r6
   19588:	sub	r2, fp, r9
   1958c:	mov	r1, r9
   19590:	mov	r0, r5
   19594:	bl	11178 <memmove@plt>
   19598:	ldr	r3, [r4, #28]
   1959c:	add	r3, r3, r6
   195a0:	str	r3, [r4, #28]
   195a4:	mov	r2, r6
   195a8:	mov	r1, sl
   195ac:	mov	r0, r9
   195b0:	bl	11358 <memset@plt>
   195b4:	mov	r9, r5
   195b8:	b	194dc <argp_parse@@Base+0x194c>
   195bc:	ldr	r3, [r4, #20]
   195c0:	ldr	r2, [sp]
   195c4:	add	r3, r2, r3
   195c8:	ldr	r6, [r4, #8]
   195cc:	cmp	r3, r6
   195d0:	bcc	195f0 <argp_parse@@Base+0x1a60>
   195d4:	sub	r6, r6, #1
   195d8:	ldr	r3, [r4, #12]
   195dc:	str	r3, [sp, #12]
   195e0:	cmp	r3, #0
   195e4:	blt	19700 <argp_parse@@Base+0x1b70>
   195e8:	mov	r7, fp
   195ec:	b	19620 <argp_parse@@Base+0x1a90>
   195f0:	str	r3, [r4, #20]
   195f4:	ldr	r3, [r4, #28]
   195f8:	ldr	r2, [r4, #24]
   195fc:	sub	r3, r3, r2
   19600:	str	r3, [r4, #16]
   19604:	add	sp, sp, #20
   19608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1960c:	sub	r6, r8, #1
   19610:	ldr	r3, [r4, #12]
   19614:	str	r3, [sp, #12]
   19618:	cmp	r3, #0
   1961c:	blt	196b4 <argp_parse@@Base+0x1b24>
   19620:	ldr	r5, [r4, #20]
   19624:	rsb	r5, r5, #1
   19628:	add	r5, r5, r6
   1962c:	adds	r5, r9, r5
   19630:	bcs	199e0 <argp_parse@@Base+0x1e50>
   19634:	bl	112d4 <__ctype_b_loc@plt>
   19638:	ldr	r0, [r0]
   1963c:	mov	r3, r5
   19640:	mov	r1, r3
   19644:	sub	r3, r3, #1
   19648:	ldrb	r2, [r1]
   1964c:	lsl	r2, r2, #1
   19650:	ldrh	r2, [r0, r2]
   19654:	tst	r2, #1
   19658:	bne	19720 <argp_parse@@Base+0x1b90>
   1965c:	mov	r1, r3
   19660:	cmp	r3, r9
   19664:	bcs	19640 <argp_parse@@Base+0x1ab0>
   19668:	add	r6, r1, #1
   1966c:	cmp	r6, r9
   19670:	bhi	1975c <argp_parse@@Base+0x1bcc>
   19674:	cmp	r5, r7
   19678:	bcs	1980c <argp_parse@@Base+0x1c7c>
   1967c:	add	r6, r5, #1
   19680:	mov	r8, r7
   19684:	mov	r5, r6
   19688:	cmp	r8, r6
   1968c:	beq	1980c <argp_parse@@Base+0x1c7c>
   19690:	bl	112d4 <__ctype_b_loc@plt>
   19694:	add	r6, r6, #1
   19698:	ldrb	r3, [r5]
   1969c:	ldr	r2, [r0]
   196a0:	lsl	r3, r3, #1
   196a4:	ldrh	r3, [r2, r3]
   196a8:	tst	r3, #1
   196ac:	beq	19684 <argp_parse@@Base+0x1af4>
   196b0:	b	19820 <argp_parse@@Base+0x1c90>
   196b4:	cmp	fp, r7
   196b8:	bls	19700 <argp_parse@@Base+0x1b70>
   196bc:	sub	r0, r6, r0
   196c0:	ldr	r3, [sp, #8]
   196c4:	sub	r2, r3, r7
   196c8:	mov	r1, r7
   196cc:	add	r0, r9, r0
   196d0:	bl	11178 <memmove@plt>
   196d4:	ldr	r3, [r4, #20]
   196d8:	sub	r6, r6, r3
   196dc:	add	r6, r9, r6
   196e0:	sub	r5, r6, r7
   196e4:	ldr	r3, [r4, #28]
   196e8:	sub	r5, r3, r5
   196ec:	str	r5, [r4, #28]
   196f0:	mov	r3, #0
   196f4:	str	r3, [r4, #20]
   196f8:	add	r9, r9, r8
   196fc:	b	1954c <argp_parse@@Base+0x19bc>
   19700:	ldr	r3, [r4, #20]
   19704:	ldr	r2, [sp]
   19708:	add	r3, r2, r3
   1970c:	str	r3, [r4, #20]
   19710:	sub	r3, r6, r3
   19714:	add	r3, fp, r3
   19718:	str	r3, [r4, #28]
   1971c:	b	195f4 <argp_parse@@Base+0x1a64>
   19720:	add	r6, r1, #1
   19724:	cmp	r6, r9
   19728:	bls	19674 <argp_parse@@Base+0x1ae4>
   1972c:	cmp	r1, r9
   19730:	bcc	1975c <argp_parse@@Base+0x1bcc>
   19734:	sub	ip, r9, #1
   19738:	mov	r1, r3
   1973c:	cmp	ip, r3
   19740:	beq	1975c <argp_parse@@Base+0x1bcc>
   19744:	sub	r3, r3, #1
   19748:	ldrb	r2, [r1]
   1974c:	lsl	r2, r2, #1
   19750:	ldrh	r2, [r0, r2]
   19754:	tst	r2, #1
   19758:	bne	19738 <argp_parse@@Base+0x1ba8>
   1975c:	add	r5, r1, #1
   19760:	ldr	r3, [sp]
   19764:	add	r3, r3, #1
   19768:	add	r3, r9, r3
   1976c:	cmp	r6, r3
   19770:	beq	19844 <argp_parse@@Base+0x1cb4>
   19774:	add	r3, r5, #1
   19778:	sub	r3, r6, r3
   1977c:	ldr	r2, [sp, #12]
   19780:	cmp	r3, r2
   19784:	bge	1985c <argp_parse@@Base+0x1ccc>
   19788:	cmp	r6, fp
   1978c:	bcs	1985c <argp_parse@@Base+0x1ccc>
   19790:	ldr	r3, [r4, #32]
   19794:	ldr	r2, [sp, #8]
   19798:	sub	r3, r3, r2
   1979c:	ldr	r2, [sp, #12]
   197a0:	add	r2, r2, #1
   197a4:	cmp	r3, r2
   197a8:	bgt	198a4 <argp_parse@@Base+0x1d14>
   197ac:	ldr	r0, [r4, #24]
   197b0:	cmp	r5, r0
   197b4:	bls	197c8 <argp_parse@@Base+0x1c38>
   197b8:	ldr	r3, [r4]
   197bc:	sub	r2, r5, r0
   197c0:	mov	r1, #1
   197c4:	bl	111cc <fwrite_unlocked@plt>
   197c8:	ldr	r0, [r4]
   197cc:	ldr	r3, [r0, #20]
   197d0:	ldr	r2, [r0, #24]
   197d4:	cmp	r3, r2
   197d8:	addcc	r2, r3, #1
   197dc:	strcc	r2, [r0, #20]
   197e0:	movcc	r2, #10
   197e4:	strbcc	r2, [r3]
   197e8:	bcs	198f0 <argp_parse@@Base+0x1d60>
   197ec:	ldr	r7, [r4, #24]
   197f0:	ldr	r3, [sp, #4]
   197f4:	sub	r3, r3, r7
   197f8:	ldr	r2, [sp]
   197fc:	add	r3, r2, r3
   19800:	str	r3, [sp]
   19804:	mov	r9, r7
   19808:	b	1986c <argp_parse@@Base+0x1cdc>
   1980c:	cmp	r5, r7
   19810:	moveq	r3, #0
   19814:	streq	r3, [r4, #20]
   19818:	addeq	r9, r7, #1
   1981c:	beq	1954c <argp_parse@@Base+0x19bc>
   19820:	bl	112d4 <__ctype_b_loc@plt>
   19824:	ldr	r2, [r0]
   19828:	mov	r6, r5
   1982c:	ldrb	r3, [r6, #1]!
   19830:	lsl	r3, r3, #1
   19834:	ldrh	r3, [r2, r3]
   19838:	tst	r3, #1
   1983c:	bne	1982c <argp_parse@@Base+0x1c9c>
   19840:	b	19760 <argp_parse@@Base+0x1bd0>
   19844:	ldr	r3, [r4, #32]
   19848:	sub	r3, r3, r5
   1984c:	ldr	r2, [sp, #12]
   19850:	add	r2, r2, #1
   19854:	cmp	r3, r2
   19858:	blt	19788 <argp_parse@@Base+0x1bf8>
   1985c:	mov	r3, #10
   19860:	strb	r3, [r5]
   19864:	mov	r7, r9
   19868:	add	r9, r5, #1
   1986c:	mov	r8, r6
   19870:	ldr	r3, [r4, #12]
   19874:	sub	r2, r6, r9
   19878:	cmp	r2, r3
   1987c:	bge	1990c <argp_parse@@Base+0x1d7c>
   19880:	ldr	r2, [sp]
   19884:	add	r2, r2, #1
   19888:	add	r2, r7, r2
   1988c:	cmp	r6, r2
   19890:	beq	198fc <argp_parse@@Base+0x1d6c>
   19894:	cmp	r3, #0
   19898:	movgt	r5, #0
   1989c:	bgt	19970 <argp_parse@@Base+0x1de0>
   198a0:	b	19930 <argp_parse@@Base+0x1da0>
   198a4:	ldr	r3, [sp, #8]
   198a8:	sub	r7, r3, r6
   198ac:	mov	r0, r2
   198b0:	mov	r2, r7
   198b4:	mov	r1, r6
   198b8:	add	r0, r5, r0
   198bc:	bl	11178 <memmove@plt>
   198c0:	ldr	r6, [r4, #12]
   198c4:	add	r6, r6, #1
   198c8:	add	r6, r5, r6
   198cc:	add	r7, r6, r7
   198d0:	ldr	r3, [sp, #4]
   198d4:	sub	r3, r7, r3
   198d8:	str	r3, [sp]
   198dc:	mov	r3, #10
   198e0:	strb	r3, [r5]
   198e4:	mov	r7, r9
   198e8:	add	r9, r5, #1
   198ec:	b	1986c <argp_parse@@Base+0x1cdc>
   198f0:	mov	r1, #10
   198f4:	bl	11394 <__overflow@plt>
   198f8:	b	197ec <argp_parse@@Base+0x1c5c>
   198fc:	ldr	r2, [r4, #32]
   19900:	sub	r2, r2, r6
   19904:	cmp	r3, r2
   19908:	bgt	19894 <argp_parse@@Base+0x1d04>
   1990c:	cmp	r3, #0
   19910:	ble	19930 <argp_parse@@Base+0x1da0>
   19914:	mov	r3, r9
   19918:	strb	sl, [r3], #1
   1991c:	sub	r1, r3, r9
   19920:	ldr	r2, [r4, #12]
   19924:	cmp	r1, r2
   19928:	blt	19918 <argp_parse@@Base+0x1d88>
   1992c:	mov	r9, r3
   19930:	cmp	r9, r6
   19934:	bcc	1999c <argp_parse@@Base+0x1e0c>
   19938:	sub	r7, r8, r7
   1993c:	ldr	r3, [sp]
   19940:	sub	r7, r3, r7
   19944:	add	r7, r9, r7
   19948:	str	r7, [r4, #28]
   1994c:	ldr	r3, [r4, #12]
   19950:	cmp	r3, #0
   19954:	mvneq	r3, #0
   19958:	str	r3, [r4, #20]
   1995c:	b	1954c <argp_parse@@Base+0x19bc>
   19960:	add	r5, r5, #1
   19964:	ldr	r3, [r4, #12]
   19968:	cmp	r3, r5
   1996c:	ble	19930 <argp_parse@@Base+0x1da0>
   19970:	ldr	r0, [r4]
   19974:	ldr	r3, [r0, #20]
   19978:	ldr	r2, [r0, #24]
   1997c:	cmp	r3, r2
   19980:	addcc	r2, r3, #1
   19984:	strcc	r2, [r0, #20]
   19988:	strbcc	sl, [r3]
   1998c:	bcc	19960 <argp_parse@@Base+0x1dd0>
   19990:	mov	r1, sl
   19994:	bl	11394 <__overflow@plt>
   19998:	b	19960 <argp_parse@@Base+0x1dd0>
   1999c:	ldr	r3, [sp]
   199a0:	add	r2, r7, r3
   199a4:	sub	r2, r2, r8
   199a8:	mov	r1, r6
   199ac:	mov	r0, r9
   199b0:	bl	11178 <memmove@plt>
   199b4:	b	19938 <argp_parse@@Base+0x1da8>
   199b8:	str	fp, [sp, #8]
   199bc:	str	r9, [sp, #4]
   199c0:	sub	r3, fp, r9
   199c4:	str	r3, [sp]
   199c8:	mov	r2, r3
   199cc:	mov	r1, #10
   199d0:	mov	r0, r9
   199d4:	bl	1137c <memchr@plt>
   199d8:	mov	r7, r0
   199dc:	b	19518 <argp_parse@@Base+0x1988>
   199e0:	mov	r1, r5
   199e4:	b	19668 <argp_parse@@Base+0x1ad8>
   199e8:	push	{r4, lr}
   199ec:	mov	r4, r0
   199f0:	bl	19484 <argp_parse@@Base+0x18f4>
   199f4:	ldr	r2, [r4, #28]
   199f8:	ldr	r0, [r4, #24]
   199fc:	cmp	r2, r0
   19a00:	bls	19a14 <argp_parse@@Base+0x1e84>
   19a04:	ldr	r3, [r4]
   19a08:	sub	r2, r2, r0
   19a0c:	mov	r1, #1
   19a10:	bl	111cc <fwrite_unlocked@plt>
   19a14:	ldr	r0, [r4, #24]
   19a18:	bl	18784 <argp_parse@@Base+0xbf4>
   19a1c:	mov	r0, r4
   19a20:	bl	18784 <argp_parse@@Base+0xbf4>
   19a24:	pop	{r4, pc}
   19a28:	ldr	r3, [r0, #32]
   19a2c:	ldr	r2, [r0, #28]
   19a30:	sub	r3, r3, r2
   19a34:	cmp	r3, r1
   19a38:	bcc	19a44 <argp_parse@@Base+0x1eb4>
   19a3c:	mov	r0, #1
   19a40:	bx	lr
   19a44:	push	{r4, r5, r6, lr}
   19a48:	mov	r5, r1
   19a4c:	mov	r4, r0
   19a50:	bl	19484 <argp_parse@@Base+0x18f4>
   19a54:	ldr	r0, [r4, #24]
   19a58:	ldr	r2, [r4, #28]
   19a5c:	ldr	r3, [r4]
   19a60:	sub	r2, r2, r0
   19a64:	mov	r1, #1
   19a68:	bl	111cc <fwrite_unlocked@plt>
   19a6c:	ldr	r2, [r4, #28]
   19a70:	ldr	r3, [r4, #24]
   19a74:	sub	r1, r2, r3
   19a78:	cmp	r0, r1
   19a7c:	bne	19ac0 <argp_parse@@Base+0x1f30>
   19a80:	str	r3, [r4, #28]
   19a84:	mov	r2, #0
   19a88:	str	r2, [r4, #16]
   19a8c:	ldr	r1, [r4, #32]
   19a90:	sub	r1, r1, r3
   19a94:	cmp	r5, r1
   19a98:	bls	19ab8 <argp_parse@@Base+0x1f28>
   19a9c:	adds	r5, r5, r1
   19aa0:	bcc	19aec <argp_parse@@Base+0x1f5c>
   19aa4:	bl	11328 <__errno_location@plt>
   19aa8:	mov	r3, #12
   19aac:	str	r3, [r0]
   19ab0:	mov	r0, #0
   19ab4:	pop	{r4, r5, r6, pc}
   19ab8:	mov	r0, #1
   19abc:	pop	{r4, r5, r6, pc}
   19ac0:	sub	r2, r2, r0
   19ac4:	str	r2, [r4, #28]
   19ac8:	ldr	r1, [r4, #16]
   19acc:	sub	r1, r1, r0
   19ad0:	str	r1, [r4, #16]
   19ad4:	sub	r2, r2, r3
   19ad8:	add	r1, r3, r0
   19adc:	mov	r0, r3
   19ae0:	bl	11178 <memmove@plt>
   19ae4:	mov	r0, #0
   19ae8:	pop	{r4, r5, r6, pc}
   19aec:	mov	r1, r5
   19af0:	mov	r0, r3
   19af4:	bl	193bc <argp_parse@@Base+0x182c>
   19af8:	cmp	r0, #0
   19afc:	beq	19aa4 <argp_parse@@Base+0x1f14>
   19b00:	str	r0, [r4, #24]
   19b04:	add	r5, r0, r5
   19b08:	str	r5, [r4, #32]
   19b0c:	str	r0, [r4, #28]
   19b10:	mov	r0, #1
   19b14:	pop	{r4, r5, r6, pc}
   19b18:	push	{r1, r2, r3}
   19b1c:	push	{r4, r5, r6, r7, lr}
   19b20:	sub	sp, sp, #8
   19b24:	mov	r5, r0
   19b28:	ldr	r7, [sp, #28]
   19b2c:	mov	r1, #150	; 0x96
   19b30:	add	r6, sp, #32
   19b34:	mov	r0, r5
   19b38:	bl	19a28 <argp_parse@@Base+0x1e98>
   19b3c:	cmp	r0, #0
   19b40:	beq	19b74 <argp_parse@@Base+0x1fe4>
   19b44:	str	r6, [sp, #4]
   19b48:	ldr	r0, [r5, #28]
   19b4c:	ldr	r4, [r5, #32]
   19b50:	sub	r4, r4, r0
   19b54:	mov	r3, r6
   19b58:	mov	r2, r7
   19b5c:	mov	r1, r4
   19b60:	bl	1140c <vsnprintf@plt>
   19b64:	cmp	r4, r0
   19b68:	bhi	19b7c <argp_parse@@Base+0x1fec>
   19b6c:	add	r1, r0, #1
   19b70:	b	19b34 <argp_parse@@Base+0x1fa4>
   19b74:	mvn	r0, #0
   19b78:	b	19b88 <argp_parse@@Base+0x1ff8>
   19b7c:	ldr	r3, [r5, #28]
   19b80:	add	r3, r3, r0
   19b84:	str	r3, [r5, #28]
   19b88:	add	sp, sp, #8
   19b8c:	pop	{r4, r5, r6, r7, lr}
   19b90:	add	sp, sp, #12
   19b94:	bx	lr
   19b98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b9c:	ldr	r4, [r1, #28]
   19ba0:	ldr	r5, [r1, #32]
   19ba4:	ldr	r6, [r1]
   19ba8:	add	r7, r0, r5, lsl #2
   19bac:	b	19be4 <argp_parse@@Base+0x2054>
   19bb0:	cmp	sl, #0
   19bb4:	ble	19be0 <argp_parse@@Base+0x2050>
   19bb8:	add	r2, r0, r4, lsl #2
   19bbc:	sub	r3, r6, sl
   19bc0:	add	r3, r0, r3, lsl #2
   19bc4:	add	r8, r0, r6, lsl #2
   19bc8:	ldr	ip, [r2]
   19bcc:	ldr	lr, [r3]
   19bd0:	str	lr, [r2], #4
   19bd4:	str	ip, [r3], #4
   19bd8:	cmp	r3, r8
   19bdc:	bne	19bc8 <argp_parse@@Base+0x2038>
   19be0:	sub	r6, r6, sl
   19be4:	cmp	r6, r5
   19be8:	movle	r3, #0
   19bec:	movgt	r3, #1
   19bf0:	cmp	r4, r5
   19bf4:	movge	r3, #0
   19bf8:	cmp	r3, #0
   19bfc:	beq	19c48 <argp_parse@@Base+0x20b8>
   19c00:	sub	r9, r6, r5
   19c04:	sub	sl, r5, r4
   19c08:	cmp	r9, sl
   19c0c:	bgt	19bb0 <argp_parse@@Base+0x2020>
   19c10:	cmp	r9, #0
   19c14:	addgt	r3, r0, r4, lsl #2
   19c18:	addgt	r8, r9, r4
   19c1c:	addgt	r8, r0, r8, lsl #2
   19c20:	movgt	r2, r7
   19c24:	ble	19c40 <argp_parse@@Base+0x20b0>
   19c28:	ldr	ip, [r3]
   19c2c:	ldr	lr, [r2]
   19c30:	str	lr, [r3], #4
   19c34:	str	ip, [r2], #4
   19c38:	cmp	r3, r8
   19c3c:	bne	19c28 <argp_parse@@Base+0x2098>
   19c40:	add	r4, r4, r9
   19c44:	b	19be4 <argp_parse@@Base+0x2054>
   19c48:	ldr	r0, [r1]
   19c4c:	ldr	r3, [r1, #32]
   19c50:	sub	r2, r0, r3
   19c54:	ldr	r3, [r1, #28]
   19c58:	add	r3, r3, r2
   19c5c:	str	r3, [r1, #28]
   19c60:	str	r0, [r1, #32]
   19c64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c6c:	sub	sp, sp, #44	; 0x2c
   19c70:	str	r0, [sp, #20]
   19c74:	str	r1, [sp, #12]
   19c78:	str	r2, [sp, #24]
   19c7c:	str	r3, [sp, #8]
   19c80:	ldr	fp, [sp, #88]	; 0x58
   19c84:	ldr	sl, [fp, #20]
   19c88:	ldrb	r3, [sl]
   19c8c:	cmp	r3, #0
   19c90:	cmpne	r3, #61	; 0x3d
   19c94:	beq	19cd0 <argp_parse@@Base+0x2140>
   19c98:	mov	r8, sl
   19c9c:	ldrb	r3, [r8, #1]!
   19ca0:	cmp	r3, #0
   19ca4:	cmpne	r3, #61	; 0x3d
   19ca8:	bne	19c9c <argp_parse@@Base+0x210c>
   19cac:	sub	r7, r8, sl
   19cb0:	ldr	r5, [sp, #8]
   19cb4:	ldr	r3, [r5]
   19cb8:	str	r3, [sp, #16]
   19cbc:	cmp	r3, #0
   19cc0:	beq	19fc4 <argp_parse@@Base+0x2434>
   19cc4:	mov	r4, r3
   19cc8:	mov	r6, #0
   19ccc:	b	19ce8 <argp_parse@@Base+0x2158>
   19cd0:	mov	r8, sl
   19cd4:	b	19cac <argp_parse@@Base+0x211c>
   19cd8:	add	r6, r6, #1
   19cdc:	ldr	r4, [r5, #16]!
   19ce0:	cmp	r4, #0
   19ce4:	beq	19d20 <argp_parse@@Base+0x2190>
   19ce8:	mov	r9, r5
   19cec:	mov	r2, r7
   19cf0:	mov	r1, sl
   19cf4:	mov	r0, r4
   19cf8:	bl	11448 <strncmp@plt>
   19cfc:	cmp	r0, #0
   19d00:	bne	19cd8 <argp_parse@@Base+0x2148>
   19d04:	mov	r0, r4
   19d08:	bl	11304 <strlen@plt>
   19d0c:	cmp	r7, r0
   19d10:	bne	19cd8 <argp_parse@@Base+0x2148>
   19d14:	cmp	r5, #0
   19d18:	strne	r6, [sp, #28]
   19d1c:	bne	19f74 <argp_parse@@Base+0x23e4>
   19d20:	ldr	r4, [sp, #8]
   19d24:	mvn	r3, #0
   19d28:	str	r3, [sp, #28]
   19d2c:	mov	sl, #0
   19d30:	str	sl, [sp, #36]	; 0x24
   19d34:	mov	r5, sl
   19d38:	mov	r9, sl
   19d3c:	str	r8, [sp, #32]
   19d40:	mov	r8, sl
   19d44:	ldr	r0, [sp, #16]
   19d48:	b	19d98 <argp_parse@@Base+0x2208>
   19d4c:	ldr	r2, [r9, #8]
   19d50:	ldr	r3, [r4, #8]
   19d54:	cmp	r2, r3
   19d58:	bne	19dd0 <argp_parse@@Base+0x2240>
   19d5c:	ldr	r2, [r9, #12]
   19d60:	ldr	r3, [r4, #12]
   19d64:	cmp	r2, r3
   19d68:	bne	19dd0 <argp_parse@@Base+0x2240>
   19d6c:	b	19d88 <argp_parse@@Base+0x21f8>
   19d70:	cmp	r8, #0
   19d74:	moveq	sl, #1
   19d78:	beq	19d88 <argp_parse@@Base+0x21f8>
   19d7c:	mov	sl, #1
   19d80:	mov	r3, #1
   19d84:	strb	r3, [r8, r5]
   19d88:	add	r5, r5, #1
   19d8c:	ldr	r0, [r4, #16]!
   19d90:	cmp	r0, #0
   19d94:	beq	19e38 <argp_parse@@Base+0x22a8>
   19d98:	mov	r2, r7
   19d9c:	ldr	r1, [fp, #20]
   19da0:	bl	11448 <strncmp@plt>
   19da4:	cmp	r0, #0
   19da8:	bne	19d88 <argp_parse@@Base+0x21f8>
   19dac:	cmp	r9, #0
   19db0:	beq	19e24 <argp_parse@@Base+0x2294>
   19db4:	ldr	r3, [sp, #84]	; 0x54
   19db8:	cmp	r3, #0
   19dbc:	bne	19dd0 <argp_parse@@Base+0x2240>
   19dc0:	ldr	r2, [r9, #4]
   19dc4:	ldr	r3, [r4, #4]
   19dc8:	cmp	r2, r3
   19dcc:	beq	19d4c <argp_parse@@Base+0x21bc>
   19dd0:	cmp	sl, #0
   19dd4:	bne	19d88 <argp_parse@@Base+0x21f8>
   19dd8:	ldr	r3, [sp, #92]	; 0x5c
   19ddc:	cmp	r3, #0
   19de0:	beq	19d70 <argp_parse@@Base+0x21e0>
   19de4:	cmp	r8, #0
   19de8:	bne	19d80 <argp_parse@@Base+0x21f0>
   19dec:	mov	r0, r6
   19df0:	bl	1938c <argp_parse@@Base+0x17fc>
   19df4:	subs	r8, r0, #0
   19df8:	beq	19e30 <argp_parse@@Base+0x22a0>
   19dfc:	mov	r2, r6
   19e00:	mov	r1, #0
   19e04:	mov	r0, r8
   19e08:	bl	11358 <memset@plt>
   19e0c:	ldr	r3, [sp, #28]
   19e10:	mov	r2, #1
   19e14:	strb	r2, [r8, r3]
   19e18:	mov	r3, #1
   19e1c:	str	r3, [sp, #36]	; 0x24
   19e20:	b	19d80 <argp_parse@@Base+0x21f0>
   19e24:	str	r5, [sp, #28]
   19e28:	mov	r9, r4
   19e2c:	b	19d88 <argp_parse@@Base+0x21f8>
   19e30:	mov	sl, #1
   19e34:	b	19d88 <argp_parse@@Base+0x21f8>
   19e38:	mov	r3, r8
   19e3c:	str	r8, [sp, #16]
   19e40:	ldr	r8, [sp, #32]
   19e44:	cmp	sl, #0
   19e48:	cmpeq	r3, #0
   19e4c:	beq	19f6c <argp_parse@@Base+0x23dc>
   19e50:	ldr	r3, [sp, #92]	; 0x5c
   19e54:	cmp	r3, #0
   19e58:	beq	19e88 <argp_parse@@Base+0x22f8>
   19e5c:	cmp	sl, #0
   19e60:	beq	19ec4 <argp_parse@@Base+0x2334>
   19e64:	ldr	r3, [sp, #12]
   19e68:	ldr	r2, [r3]
   19e6c:	ldr	r3, [pc, #708]	; 1a138 <argp_parse@@Base+0x25a8>
   19e70:	ldr	r0, [r3]
   19e74:	ldr	r3, [fp, #20]
   19e78:	str	r3, [sp]
   19e7c:	ldr	r3, [sp, #96]	; 0x60
   19e80:	ldr	r1, [pc, #692]	; 1a13c <argp_parse@@Base+0x25ac>
   19e84:	bl	1131c <fprintf@plt>
   19e88:	ldr	r3, [sp, #36]	; 0x24
   19e8c:	cmp	r3, #0
   19e90:	bne	19f60 <argp_parse@@Base+0x23d0>
   19e94:	ldr	r4, [fp, #20]
   19e98:	mov	r0, r4
   19e9c:	bl	11304 <strlen@plt>
   19ea0:	add	r0, r4, r0
   19ea4:	str	r0, [fp, #20]
   19ea8:	ldr	r3, [fp]
   19eac:	add	r3, r3, #1
   19eb0:	str	r3, [fp]
   19eb4:	mov	r3, #0
   19eb8:	str	r3, [fp, #8]
   19ebc:	mov	r0, #63	; 0x3f
   19ec0:	b	1a0b8 <argp_parse@@Base+0x2528>
   19ec4:	ldr	r4, [pc, #620]	; 1a138 <argp_parse@@Base+0x25a8>
   19ec8:	ldr	r0, [r4]
   19ecc:	bl	11400 <flockfile@plt>
   19ed0:	ldr	r3, [sp, #12]
   19ed4:	ldr	r2, [r3]
   19ed8:	ldr	r0, [r4]
   19edc:	ldr	r3, [fp, #20]
   19ee0:	str	r3, [sp]
   19ee4:	ldr	r3, [sp, #96]	; 0x60
   19ee8:	ldr	r1, [pc, #592]	; 1a140 <argp_parse@@Base+0x25b0>
   19eec:	bl	1131c <fprintf@plt>
   19ef0:	cmp	r6, #0
   19ef4:	ble	19f44 <argp_parse@@Base+0x23b4>
   19ef8:	ldr	r3, [sp, #16]
   19efc:	mov	r4, r3
   19f00:	add	r6, r3, r6
   19f04:	ldr	r7, [pc, #568]	; 1a144 <argp_parse@@Base+0x25b4>
   19f08:	ldr	r5, [pc, #552]	; 1a138 <argp_parse@@Base+0x25a8>
   19f0c:	ldr	r8, [sp, #8]
   19f10:	b	19f20 <argp_parse@@Base+0x2390>
   19f14:	add	sl, sl, #1
   19f18:	cmp	r4, r6
   19f1c:	beq	19f44 <argp_parse@@Base+0x23b4>
   19f20:	ldrb	r3, [r4], #1
   19f24:	cmp	r3, #0
   19f28:	beq	19f14 <argp_parse@@Base+0x2384>
   19f2c:	ldr	r3, [r8, sl, lsl #4]
   19f30:	ldr	r2, [sp, #96]	; 0x60
   19f34:	mov	r1, r7
   19f38:	ldr	r0, [r5]
   19f3c:	bl	1131c <fprintf@plt>
   19f40:	b	19f14 <argp_parse@@Base+0x2384>
   19f44:	ldr	r4, [pc, #492]	; 1a138 <argp_parse@@Base+0x25a8>
   19f48:	ldr	r1, [r4]
   19f4c:	mov	r0, #10
   19f50:	bl	113d0 <fputc@plt>
   19f54:	ldr	r0, [r4]
   19f58:	bl	11244 <funlockfile@plt>
   19f5c:	b	19e88 <argp_parse@@Base+0x22f8>
   19f60:	ldr	r0, [sp, #16]
   19f64:	bl	18784 <argp_parse@@Base+0xbf4>
   19f68:	b	19e94 <argp_parse@@Base+0x2304>
   19f6c:	cmp	r9, #0
   19f70:	beq	19fc4 <argp_parse@@Base+0x2434>
   19f74:	ldr	r2, [fp]
   19f78:	add	r3, r2, #1
   19f7c:	str	r3, [fp]
   19f80:	mov	r1, #0
   19f84:	str	r1, [fp, #20]
   19f88:	ldrb	r1, [r8]
   19f8c:	cmp	r1, #0
   19f90:	beq	1a084 <argp_parse@@Base+0x24f4>
   19f94:	ldr	r3, [r9, #4]
   19f98:	cmp	r3, #0
   19f9c:	addne	r8, r8, #1
   19fa0:	strne	r8, [fp, #12]
   19fa4:	bne	1a090 <argp_parse@@Base+0x2500>
   19fa8:	ldr	r3, [sp, #92]	; 0x5c
   19fac:	cmp	r3, #0
   19fb0:	bne	1a05c <argp_parse@@Base+0x24cc>
   19fb4:	ldr	r3, [r9, #12]
   19fb8:	str	r3, [fp, #8]
   19fbc:	mov	r0, #63	; 0x3f
   19fc0:	b	1a0b8 <argp_parse@@Base+0x2528>
   19fc4:	ldr	r3, [sp, #84]	; 0x54
   19fc8:	cmp	r3, #0
   19fcc:	bne	19ffc <argp_parse@@Base+0x246c>
   19fd0:	ldr	r3, [sp, #92]	; 0x5c
   19fd4:	cmp	r3, #0
   19fd8:	bne	1a034 <argp_parse@@Base+0x24a4>
   19fdc:	mov	r2, #0
   19fe0:	str	r2, [fp, #20]
   19fe4:	ldr	r3, [fp]
   19fe8:	add	r3, r3, #1
   19fec:	str	r3, [fp]
   19ff0:	str	r2, [fp, #8]
   19ff4:	mov	r0, #63	; 0x3f
   19ff8:	b	1a0b8 <argp_parse@@Base+0x2528>
   19ffc:	ldr	r3, [fp]
   1a000:	ldr	r2, [sp, #12]
   1a004:	ldr	r3, [r2, r3, lsl #2]
   1a008:	ldrb	r3, [r3, #1]
   1a00c:	cmp	r3, #45	; 0x2d
   1a010:	beq	19fd0 <argp_parse@@Base+0x2440>
   1a014:	ldr	r3, [fp, #20]
   1a018:	ldrb	r1, [r3]
   1a01c:	ldr	r0, [sp, #24]
   1a020:	bl	11310 <strchr@plt>
   1a024:	cmp	r0, #0
   1a028:	beq	19fd0 <argp_parse@@Base+0x2440>
   1a02c:	mvn	r0, #0
   1a030:	b	1a0b8 <argp_parse@@Base+0x2528>
   1a034:	ldr	r3, [sp, #12]
   1a038:	ldr	r2, [r3]
   1a03c:	ldr	r3, [pc, #244]	; 1a138 <argp_parse@@Base+0x25a8>
   1a040:	ldr	r0, [r3]
   1a044:	ldr	r3, [fp, #20]
   1a048:	str	r3, [sp]
   1a04c:	ldr	r3, [sp, #96]	; 0x60
   1a050:	ldr	r1, [pc, #240]	; 1a148 <argp_parse@@Base+0x25b8>
   1a054:	bl	1131c <fprintf@plt>
   1a058:	b	19fdc <argp_parse@@Base+0x244c>
   1a05c:	ldr	r3, [sp, #12]
   1a060:	ldr	r2, [r3]
   1a064:	ldr	r3, [pc, #204]	; 1a138 <argp_parse@@Base+0x25a8>
   1a068:	ldr	r0, [r3]
   1a06c:	ldr	r3, [r9]
   1a070:	str	r3, [sp]
   1a074:	ldr	r3, [sp, #96]	; 0x60
   1a078:	ldr	r1, [pc, #204]	; 1a14c <argp_parse@@Base+0x25bc>
   1a07c:	bl	1131c <fprintf@plt>
   1a080:	b	19fb4 <argp_parse@@Base+0x2424>
   1a084:	ldr	r1, [r9, #4]
   1a088:	cmp	r1, #1
   1a08c:	beq	1a0c0 <argp_parse@@Base+0x2530>
   1a090:	ldr	r3, [sp, #80]	; 0x50
   1a094:	cmp	r3, #0
   1a098:	ldrne	r2, [sp, #28]
   1a09c:	strne	r2, [r3]
   1a0a0:	ldr	r3, [r9, #8]
   1a0a4:	cmp	r3, #0
   1a0a8:	ldrne	r2, [r9, #12]
   1a0ac:	strne	r2, [r3]
   1a0b0:	movne	r0, #0
   1a0b4:	ldreq	r0, [r9, #12]
   1a0b8:	add	sp, sp, #44	; 0x2c
   1a0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0c0:	ldr	r1, [sp, #20]
   1a0c4:	cmp	r3, r1
   1a0c8:	bge	1a0e4 <argp_parse@@Base+0x2554>
   1a0cc:	add	r2, r2, #2
   1a0d0:	str	r2, [fp]
   1a0d4:	ldr	r2, [sp, #12]
   1a0d8:	ldr	r3, [r2, r3, lsl #2]
   1a0dc:	str	r3, [fp, #12]
   1a0e0:	b	1a090 <argp_parse@@Base+0x2500>
   1a0e4:	ldr	r3, [sp, #92]	; 0x5c
   1a0e8:	cmp	r3, #0
   1a0ec:	bne	1a110 <argp_parse@@Base+0x2580>
   1a0f0:	ldr	r3, [r9, #12]
   1a0f4:	str	r3, [fp, #8]
   1a0f8:	ldr	r3, [sp, #24]
   1a0fc:	ldrb	r0, [r3]
   1a100:	cmp	r0, #58	; 0x3a
   1a104:	moveq	r0, #58	; 0x3a
   1a108:	movne	r0, #63	; 0x3f
   1a10c:	b	1a0b8 <argp_parse@@Base+0x2528>
   1a110:	ldr	r3, [sp, #12]
   1a114:	ldr	r2, [r3]
   1a118:	ldr	r3, [pc, #24]	; 1a138 <argp_parse@@Base+0x25a8>
   1a11c:	ldr	r0, [r3]
   1a120:	ldr	r3, [r9]
   1a124:	str	r3, [sp]
   1a128:	ldr	r3, [sp, #96]	; 0x60
   1a12c:	ldr	r1, [pc, #28]	; 1a150 <argp_parse@@Base+0x25c0>
   1a130:	bl	1131c <fprintf@plt>
   1a134:	b	1a0f0 <argp_parse@@Base+0x2560>
   1a138:	andeq	sp, r2, r8, lsr #12
   1a13c:	andeq	ip, r1, r4, lsr r5
   1a140:	andeq	ip, r1, r4, asr r5
   1a144:	andeq	ip, r1, r4, lsl #11
   1a148:	andeq	ip, r1, ip, lsl #11
   1a14c:	andeq	ip, r1, ip, lsr #11
   1a150:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1a154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a158:	sub	sp, sp, #36	; 0x24
   1a15c:	str	r3, [sp, #24]
   1a160:	ldr	r4, [sp, #80]	; 0x50
   1a164:	ldr	r8, [r4, #4]
   1a168:	subs	r5, r0, #0
   1a16c:	ble	1a674 <argp_parse@@Base+0x2ae4>
   1a170:	mov	r9, r1
   1a174:	mov	r6, r2
   1a178:	mov	r3, #0
   1a17c:	str	r3, [r4, #12]
   1a180:	ldr	r3, [r4]
   1a184:	cmp	r3, #0
   1a188:	beq	1a1ac <argp_parse@@Base+0x261c>
   1a18c:	ldr	r3, [r4, #16]
   1a190:	cmp	r3, #0
   1a194:	beq	1a1b4 <argp_parse@@Base+0x2624>
   1a198:	ldrb	r3, [r2]
   1a19c:	sub	r3, r3, #43	; 0x2b
   1a1a0:	tst	r3, #253	; 0xfd
   1a1a4:	addeq	r6, r2, #1
   1a1a8:	b	1a210 <argp_parse@@Base+0x2680>
   1a1ac:	mov	r3, #1
   1a1b0:	str	r3, [r4]
   1a1b4:	ldr	r3, [r4]
   1a1b8:	str	r3, [r4, #32]
   1a1bc:	str	r3, [r4, #28]
   1a1c0:	mov	r3, #0
   1a1c4:	str	r3, [r4, #20]
   1a1c8:	ldrb	r3, [r6]
   1a1cc:	cmp	r3, #45	; 0x2d
   1a1d0:	moveq	r3, #2
   1a1d4:	streq	r3, [r4, #24]
   1a1d8:	addeq	r6, r6, #1
   1a1dc:	beq	1a208 <argp_parse@@Base+0x2678>
   1a1e0:	cmp	r3, #43	; 0x2b
   1a1e4:	moveq	r3, #0
   1a1e8:	streq	r3, [r4, #24]
   1a1ec:	addeq	r6, r6, #1
   1a1f0:	beq	1a208 <argp_parse@@Base+0x2678>
   1a1f4:	ldr	r3, [sp, #84]	; 0x54
   1a1f8:	cmp	r3, #0
   1a1fc:	beq	1a2ac <argp_parse@@Base+0x271c>
   1a200:	mov	r3, #0
   1a204:	str	r3, [r4, #24]
   1a208:	mov	r3, #1
   1a20c:	str	r3, [r4, #16]
   1a210:	ldrb	r3, [r6]
   1a214:	cmp	r3, #58	; 0x3a
   1a218:	moveq	r8, #0
   1a21c:	ldr	r3, [r4, #20]
   1a220:	cmp	r3, #0
   1a224:	beq	1a234 <argp_parse@@Base+0x26a4>
   1a228:	ldrb	r3, [r3]
   1a22c:	cmp	r3, #0
   1a230:	bne	1a3c0 <argp_parse@@Base+0x2830>
   1a234:	ldr	r3, [r4]
   1a238:	ldr	r2, [r4, #32]
   1a23c:	cmp	r2, r3
   1a240:	strgt	r3, [r4, #32]
   1a244:	ldr	r2, [r4, #28]
   1a248:	cmp	r3, r2
   1a24c:	strlt	r3, [r4, #28]
   1a250:	ldr	r2, [r4, #24]
   1a254:	cmp	r2, #1
   1a258:	beq	1a2c8 <argp_parse@@Base+0x2738>
   1a25c:	ldr	r7, [r4]
   1a260:	cmp	r5, r7
   1a264:	beq	1a34c <argp_parse@@Base+0x27bc>
   1a268:	ldr	sl, [r9, r7, lsl #2]
   1a26c:	ldr	r1, [pc, #1088]	; 1a6b4 <argp_parse@@Base+0x2b24>
   1a270:	mov	r0, sl
   1a274:	bl	11124 <strcmp@plt>
   1a278:	cmp	r0, #0
   1a27c:	bne	1a684 <argp_parse@@Base+0x2af4>
   1a280:	add	r7, r7, #1
   1a284:	str	r7, [r4]
   1a288:	ldr	r2, [r4, #28]
   1a28c:	ldr	r3, [r4, #32]
   1a290:	cmp	r7, r3
   1a294:	cmpne	r2, r3
   1a298:	beq	1a33c <argp_parse@@Base+0x27ac>
   1a29c:	mov	r1, r4
   1a2a0:	mov	r0, r9
   1a2a4:	bl	19b98 <argp_parse@@Base+0x2008>
   1a2a8:	b	1a344 <argp_parse@@Base+0x27b4>
   1a2ac:	ldr	r0, [pc, #1028]	; 1a6b8 <argp_parse@@Base+0x2b28>
   1a2b0:	bl	11274 <getenv@plt>
   1a2b4:	cmp	r0, #0
   1a2b8:	bne	1a200 <argp_parse@@Base+0x2670>
   1a2bc:	mov	r3, #1
   1a2c0:	str	r3, [r4, #24]
   1a2c4:	b	1a208 <argp_parse@@Base+0x2678>
   1a2c8:	ldr	r2, [r4, #32]
   1a2cc:	ldr	r1, [r4, #28]
   1a2d0:	cmp	r1, r2
   1a2d4:	cmpne	r3, r2
   1a2d8:	beq	1a2ec <argp_parse@@Base+0x275c>
   1a2dc:	mov	r1, r4
   1a2e0:	mov	r0, r9
   1a2e4:	bl	19b98 <argp_parse@@Base+0x2008>
   1a2e8:	b	1a2f4 <argp_parse@@Base+0x2764>
   1a2ec:	cmp	r3, r2
   1a2f0:	strne	r3, [r4, #28]
   1a2f4:	ldr	r3, [r4]
   1a2f8:	cmp	r5, r3
   1a2fc:	ble	1a334 <argp_parse@@Base+0x27a4>
   1a300:	add	r1, r9, r3, lsl #2
   1a304:	b	1a318 <argp_parse@@Base+0x2788>
   1a308:	add	r3, r3, #1
   1a30c:	str	r3, [r4]
   1a310:	cmp	r5, r3
   1a314:	beq	1a334 <argp_parse@@Base+0x27a4>
   1a318:	ldr	r2, [r1], #4
   1a31c:	ldrb	r0, [r2]
   1a320:	cmp	r0, #45	; 0x2d
   1a324:	bne	1a308 <argp_parse@@Base+0x2778>
   1a328:	ldrb	r2, [r2, #1]
   1a32c:	cmp	r2, #0
   1a330:	beq	1a308 <argp_parse@@Base+0x2778>
   1a334:	str	r3, [r4, #32]
   1a338:	b	1a25c <argp_parse@@Base+0x26cc>
   1a33c:	cmp	r2, r3
   1a340:	streq	r7, [r4, #28]
   1a344:	str	r5, [r4, #32]
   1a348:	str	r5, [r4]
   1a34c:	ldr	r3, [r4, #28]
   1a350:	ldr	r2, [r4, #32]
   1a354:	cmp	r3, r2
   1a358:	mvneq	r0, #0
   1a35c:	strne	r3, [r4]
   1a360:	mvnne	r0, #0
   1a364:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a368:	ldrb	r1, [sl, #1]
   1a36c:	cmp	r1, #0
   1a370:	beq	1a690 <argp_parse@@Base+0x2b00>
   1a374:	ldr	r3, [sp, #24]
   1a378:	cmp	r3, #0
   1a37c:	beq	1a3b0 <argp_parse@@Base+0x2820>
   1a380:	cmp	r1, #45	; 0x2d
   1a384:	beq	1a428 <argp_parse@@Base+0x2898>
   1a388:	ldr	r3, [sp, #76]	; 0x4c
   1a38c:	cmp	r3, #0
   1a390:	beq	1a3b0 <argp_parse@@Base+0x2820>
   1a394:	ldrb	r3, [sl, #2]
   1a398:	cmp	r3, #0
   1a39c:	bne	1a468 <argp_parse@@Base+0x28d8>
   1a3a0:	mov	r0, r6
   1a3a4:	bl	11310 <strchr@plt>
   1a3a8:	cmp	r0, #0
   1a3ac:	beq	1a468 <argp_parse@@Base+0x28d8>
   1a3b0:	ldr	r3, [r4]
   1a3b4:	ldr	r3, [r9, r3, lsl #2]
   1a3b8:	add	r3, r3, #1
   1a3bc:	str	r3, [r4, #20]
   1a3c0:	ldr	sl, [r4, #20]
   1a3c4:	add	fp, sl, #1
   1a3c8:	str	fp, [r4, #20]
   1a3cc:	ldrb	r7, [sl]
   1a3d0:	str	r7, [sp, #28]
   1a3d4:	mov	r1, r7
   1a3d8:	mov	r0, r6
   1a3dc:	bl	11310 <strchr@plt>
   1a3e0:	ldrb	r3, [sl, #1]
   1a3e4:	cmp	r3, #0
   1a3e8:	ldreq	r3, [r4]
   1a3ec:	addeq	r3, r3, #1
   1a3f0:	streq	r3, [r4]
   1a3f4:	sub	r3, r7, #58	; 0x3a
   1a3f8:	uxtb	r3, r3
   1a3fc:	cmp	r0, #0
   1a400:	cmpne	r3, #1
   1a404:	bls	1a4b0 <argp_parse@@Base+0x2920>
   1a408:	ldrb	r3, [r0]
   1a40c:	cmp	r3, #87	; 0x57
   1a410:	beq	1a4e8 <argp_parse@@Base+0x2958>
   1a414:	ldrb	r3, [r0, #1]
   1a418:	cmp	r3, #58	; 0x3a
   1a41c:	beq	1a5b4 <argp_parse@@Base+0x2a24>
   1a420:	mov	r0, r7
   1a424:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a428:	add	sl, sl, #2
   1a42c:	str	sl, [r4, #20]
   1a430:	ldr	r3, [pc, #636]	; 1a6b4 <argp_parse@@Base+0x2b24>
   1a434:	str	r3, [sp, #16]
   1a438:	str	r8, [sp, #12]
   1a43c:	str	r4, [sp, #8]
   1a440:	ldr	r3, [sp, #76]	; 0x4c
   1a444:	str	r3, [sp, #4]
   1a448:	ldr	r3, [sp, #72]	; 0x48
   1a44c:	str	r3, [sp]
   1a450:	ldr	r3, [sp, #24]
   1a454:	mov	r2, r6
   1a458:	mov	r1, r9
   1a45c:	mov	r0, r5
   1a460:	bl	19c68 <argp_parse@@Base+0x20d8>
   1a464:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a468:	add	sl, sl, #1
   1a46c:	str	sl, [r4, #20]
   1a470:	ldr	r3, [pc, #580]	; 1a6bc <argp_parse@@Base+0x2b2c>
   1a474:	str	r3, [sp, #16]
   1a478:	str	r8, [sp, #12]
   1a47c:	str	r4, [sp, #8]
   1a480:	ldr	r3, [sp, #76]	; 0x4c
   1a484:	str	r3, [sp, #4]
   1a488:	ldr	r3, [sp, #72]	; 0x48
   1a48c:	str	r3, [sp]
   1a490:	ldr	r3, [sp, #24]
   1a494:	mov	r2, r6
   1a498:	mov	r1, r9
   1a49c:	mov	r0, r5
   1a4a0:	bl	19c68 <argp_parse@@Base+0x20d8>
   1a4a4:	cmn	r0, #1
   1a4a8:	bne	1a4c4 <argp_parse@@Base+0x2934>
   1a4ac:	b	1a3b0 <argp_parse@@Base+0x2820>
   1a4b0:	cmp	r8, #0
   1a4b4:	bne	1a4cc <argp_parse@@Base+0x293c>
   1a4b8:	ldr	r3, [sp, #28]
   1a4bc:	str	r3, [r4, #8]
   1a4c0:	mov	r0, #63	; 0x3f
   1a4c4:	add	sp, sp, #36	; 0x24
   1a4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4cc:	ldr	r3, [sp, #28]
   1a4d0:	ldr	r2, [r9]
   1a4d4:	ldr	r1, [pc, #484]	; 1a6c0 <argp_parse@@Base+0x2b30>
   1a4d8:	ldr	r0, [pc, #484]	; 1a6c4 <argp_parse@@Base+0x2b34>
   1a4dc:	ldr	r0, [r0]
   1a4e0:	bl	1131c <fprintf@plt>
   1a4e4:	b	1a4b8 <argp_parse@@Base+0x2928>
   1a4e8:	ldrb	r3, [r0, #1]
   1a4ec:	ldr	r2, [sp, #24]
   1a4f0:	cmp	r3, #59	; 0x3b
   1a4f4:	movne	r3, #0
   1a4f8:	moveq	r3, #1
   1a4fc:	cmp	r2, #0
   1a500:	moveq	r3, #0
   1a504:	cmp	r3, #0
   1a508:	beq	1a414 <argp_parse@@Base+0x2884>
   1a50c:	ldrb	r3, [sl, #1]
   1a510:	cmp	r3, #0
   1a514:	strne	fp, [r4, #12]
   1a518:	bne	1a530 <argp_parse@@Base+0x29a0>
   1a51c:	ldr	r3, [r4]
   1a520:	cmp	r5, r3
   1a524:	beq	1a574 <argp_parse@@Base+0x29e4>
   1a528:	ldr	r3, [r9, r3, lsl #2]
   1a52c:	str	r3, [r4, #12]
   1a530:	ldr	r3, [r4, #12]
   1a534:	str	r3, [r4, #20]
   1a538:	mov	r3, #0
   1a53c:	str	r3, [r4, #12]
   1a540:	ldr	r2, [pc, #384]	; 1a6c8 <argp_parse@@Base+0x2b38>
   1a544:	str	r2, [sp, #16]
   1a548:	str	r8, [sp, #12]
   1a54c:	str	r4, [sp, #8]
   1a550:	str	r3, [sp, #4]
   1a554:	ldr	r3, [sp, #72]	; 0x48
   1a558:	str	r3, [sp]
   1a55c:	ldr	r3, [sp, #24]
   1a560:	mov	r2, r6
   1a564:	mov	r1, r9
   1a568:	mov	r0, r5
   1a56c:	bl	19c68 <argp_parse@@Base+0x20d8>
   1a570:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a574:	cmp	r8, #0
   1a578:	bne	1a598 <argp_parse@@Base+0x2a08>
   1a57c:	ldr	r3, [sp, #28]
   1a580:	str	r3, [r4, #8]
   1a584:	ldrb	r0, [r6]
   1a588:	cmp	r0, #58	; 0x3a
   1a58c:	moveq	r0, #58	; 0x3a
   1a590:	movne	r0, #63	; 0x3f
   1a594:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a598:	ldr	r3, [sp, #28]
   1a59c:	ldr	r2, [r9]
   1a5a0:	ldr	r1, [pc, #292]	; 1a6cc <argp_parse@@Base+0x2b3c>
   1a5a4:	ldr	r0, [pc, #280]	; 1a6c4 <argp_parse@@Base+0x2b34>
   1a5a8:	ldr	r0, [r0]
   1a5ac:	bl	1131c <fprintf@plt>
   1a5b0:	b	1a57c <argp_parse@@Base+0x29ec>
   1a5b4:	ldrb	r3, [r0, #2]
   1a5b8:	cmp	r3, #58	; 0x3a
   1a5bc:	beq	1a5e8 <argp_parse@@Base+0x2a58>
   1a5c0:	ldrb	r3, [sl, #1]
   1a5c4:	cmp	r3, #0
   1a5c8:	beq	1a614 <argp_parse@@Base+0x2a84>
   1a5cc:	str	fp, [r4, #12]
   1a5d0:	ldr	r3, [r4]
   1a5d4:	add	r3, r3, #1
   1a5d8:	str	r3, [r4]
   1a5dc:	mov	r3, #0
   1a5e0:	str	r3, [r4, #20]
   1a5e4:	b	1a420 <argp_parse@@Base+0x2890>
   1a5e8:	ldrb	r3, [sl, #1]
   1a5ec:	cmp	r3, #0
   1a5f0:	strne	fp, [r4, #12]
   1a5f4:	ldrne	r3, [r4]
   1a5f8:	addne	r3, r3, #1
   1a5fc:	strne	r3, [r4]
   1a600:	moveq	r3, #0
   1a604:	streq	r3, [r4, #12]
   1a608:	mov	r3, #0
   1a60c:	str	r3, [r4, #20]
   1a610:	b	1a420 <argp_parse@@Base+0x2890>
   1a614:	ldr	r3, [r4]
   1a618:	cmp	r5, r3
   1a61c:	beq	1a634 <argp_parse@@Base+0x2aa4>
   1a620:	add	r2, r3, #1
   1a624:	str	r2, [r4]
   1a628:	ldr	r3, [r9, r3, lsl #2]
   1a62c:	str	r3, [r4, #12]
   1a630:	b	1a5dc <argp_parse@@Base+0x2a4c>
   1a634:	cmp	r8, #0
   1a638:	bne	1a658 <argp_parse@@Base+0x2ac8>
   1a63c:	ldr	r3, [sp, #28]
   1a640:	str	r3, [r4, #8]
   1a644:	ldrb	r7, [r6]
   1a648:	cmp	r7, #58	; 0x3a
   1a64c:	moveq	r7, #58	; 0x3a
   1a650:	movne	r7, #63	; 0x3f
   1a654:	b	1a5dc <argp_parse@@Base+0x2a4c>
   1a658:	ldr	r3, [sp, #28]
   1a65c:	ldr	r2, [r9]
   1a660:	ldr	r1, [pc, #100]	; 1a6cc <argp_parse@@Base+0x2b3c>
   1a664:	ldr	r0, [pc, #88]	; 1a6c4 <argp_parse@@Base+0x2b34>
   1a668:	ldr	r0, [r0]
   1a66c:	bl	1131c <fprintf@plt>
   1a670:	b	1a63c <argp_parse@@Base+0x2aac>
   1a674:	mvn	r0, #0
   1a678:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a67c:	mvn	r0, #0
   1a680:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a684:	ldrb	r3, [sl]
   1a688:	cmp	r3, #45	; 0x2d
   1a68c:	beq	1a368 <argp_parse@@Base+0x27d8>
   1a690:	ldr	r3, [r4, #24]
   1a694:	cmp	r3, #0
   1a698:	beq	1a67c <argp_parse@@Base+0x2aec>
   1a69c:	add	r3, r7, #1
   1a6a0:	str	r3, [r4]
   1a6a4:	ldr	r3, [r9, r7, lsl #2]
   1a6a8:	str	r3, [r4, #12]
   1a6ac:	mov	r0, #1
   1a6b0:	b	1a4c4 <argp_parse@@Base+0x2934>
   1a6b4:	andeq	ip, r1, r8, lsl #1
   1a6b8:	andeq	ip, r1, r4, lsl #12
   1a6bc:	andeq	ip, r1, r4, lsl r6
   1a6c0:	andeq	ip, r1, r8, lsl r6
   1a6c4:	andeq	sp, r2, r8, lsr #12
   1a6c8:	andeq	ip, r1, r0, ror #12
   1a6cc:	andeq	ip, r1, r4, lsr r6
   1a6d0:	push	{r4, r5, lr}
   1a6d4:	sub	sp, sp, #20
   1a6d8:	ldr	r4, [pc, #84]	; 1a734 <argp_parse@@Base+0x2ba4>
   1a6dc:	ldr	r5, [pc, #84]	; 1a738 <argp_parse@@Base+0x2ba8>
   1a6e0:	ldr	ip, [r5]
   1a6e4:	str	ip, [r4]
   1a6e8:	ldr	ip, [r5, #4]
   1a6ec:	str	ip, [r4, #4]
   1a6f0:	ldr	ip, [sp, #40]	; 0x28
   1a6f4:	str	ip, [sp, #12]
   1a6f8:	str	r4, [sp, #8]
   1a6fc:	ldr	ip, [sp, #36]	; 0x24
   1a700:	str	ip, [sp, #4]
   1a704:	ldr	ip, [sp, #32]
   1a708:	str	ip, [sp]
   1a70c:	bl	1a154 <argp_parse@@Base+0x25c4>
   1a710:	ldr	r3, [r4]
   1a714:	str	r3, [r5]
   1a718:	ldr	r2, [r4, #12]
   1a71c:	ldr	r3, [pc, #24]	; 1a73c <argp_parse@@Base+0x2bac>
   1a720:	str	r2, [r3]
   1a724:	ldr	r3, [r4, #8]
   1a728:	str	r3, [r5, #8]
   1a72c:	add	sp, sp, #20
   1a730:	pop	{r4, r5, pc}
   1a734:	muleq	r2, ip, r6
   1a738:	andeq	sp, r2, r4, lsl r6
   1a73c:	andeq	sp, r2, r4, ror #13
   1a740:	push	{lr}		; (str lr, [sp, #-4]!)
   1a744:	sub	sp, sp, #20
   1a748:	mov	r3, #1
   1a74c:	str	r3, [sp, #8]
   1a750:	mov	r3, #0
   1a754:	str	r3, [sp, #4]
   1a758:	str	r3, [sp]
   1a75c:	bl	1a6d0 <argp_parse@@Base+0x2b40>
   1a760:	add	sp, sp, #20
   1a764:	pop	{pc}		; (ldr pc, [sp], #4)
   1a768:	push	{r4, r5, r6, lr}
   1a76c:	mov	r6, r0
   1a770:	mov	r5, r1
   1a774:	subs	r4, r2, #0
   1a778:	beq	1a7a4 <argp_parse@@Base+0x2c14>
   1a77c:	mov	r1, r4
   1a780:	mvn	r0, #0
   1a784:	bl	1a7b4 <argp_parse@@Base+0x2c24>
   1a788:	cmp	r0, r5
   1a78c:	bcs	1a7a4 <argp_parse@@Base+0x2c14>
   1a790:	bl	11328 <__errno_location@plt>
   1a794:	mov	r3, #12
   1a798:	str	r3, [r0]
   1a79c:	mov	r0, #0
   1a7a0:	pop	{r4, r5, r6, pc}
   1a7a4:	mul	r1, r5, r4
   1a7a8:	mov	r0, r6
   1a7ac:	bl	193bc <argp_parse@@Base+0x182c>
   1a7b0:	pop	{r4, r5, r6, pc}
   1a7b4:	subs	r2, r1, #1
   1a7b8:	bxeq	lr
   1a7bc:	bcc	1a994 <argp_parse@@Base+0x2e04>
   1a7c0:	cmp	r0, r1
   1a7c4:	bls	1a978 <argp_parse@@Base+0x2de8>
   1a7c8:	tst	r1, r2
   1a7cc:	beq	1a984 <argp_parse@@Base+0x2df4>
   1a7d0:	clz	r3, r0
   1a7d4:	clz	r2, r1
   1a7d8:	sub	r3, r2, r3
   1a7dc:	rsbs	r3, r3, #31
   1a7e0:	addne	r3, r3, r3, lsl #1
   1a7e4:	mov	r2, #0
   1a7e8:	addne	pc, pc, r3, lsl #2
   1a7ec:	nop			; (mov r0, r0)
   1a7f0:	cmp	r0, r1, lsl #31
   1a7f4:	adc	r2, r2, r2
   1a7f8:	subcs	r0, r0, r1, lsl #31
   1a7fc:	cmp	r0, r1, lsl #30
   1a800:	adc	r2, r2, r2
   1a804:	subcs	r0, r0, r1, lsl #30
   1a808:	cmp	r0, r1, lsl #29
   1a80c:	adc	r2, r2, r2
   1a810:	subcs	r0, r0, r1, lsl #29
   1a814:	cmp	r0, r1, lsl #28
   1a818:	adc	r2, r2, r2
   1a81c:	subcs	r0, r0, r1, lsl #28
   1a820:	cmp	r0, r1, lsl #27
   1a824:	adc	r2, r2, r2
   1a828:	subcs	r0, r0, r1, lsl #27
   1a82c:	cmp	r0, r1, lsl #26
   1a830:	adc	r2, r2, r2
   1a834:	subcs	r0, r0, r1, lsl #26
   1a838:	cmp	r0, r1, lsl #25
   1a83c:	adc	r2, r2, r2
   1a840:	subcs	r0, r0, r1, lsl #25
   1a844:	cmp	r0, r1, lsl #24
   1a848:	adc	r2, r2, r2
   1a84c:	subcs	r0, r0, r1, lsl #24
   1a850:	cmp	r0, r1, lsl #23
   1a854:	adc	r2, r2, r2
   1a858:	subcs	r0, r0, r1, lsl #23
   1a85c:	cmp	r0, r1, lsl #22
   1a860:	adc	r2, r2, r2
   1a864:	subcs	r0, r0, r1, lsl #22
   1a868:	cmp	r0, r1, lsl #21
   1a86c:	adc	r2, r2, r2
   1a870:	subcs	r0, r0, r1, lsl #21
   1a874:	cmp	r0, r1, lsl #20
   1a878:	adc	r2, r2, r2
   1a87c:	subcs	r0, r0, r1, lsl #20
   1a880:	cmp	r0, r1, lsl #19
   1a884:	adc	r2, r2, r2
   1a888:	subcs	r0, r0, r1, lsl #19
   1a88c:	cmp	r0, r1, lsl #18
   1a890:	adc	r2, r2, r2
   1a894:	subcs	r0, r0, r1, lsl #18
   1a898:	cmp	r0, r1, lsl #17
   1a89c:	adc	r2, r2, r2
   1a8a0:	subcs	r0, r0, r1, lsl #17
   1a8a4:	cmp	r0, r1, lsl #16
   1a8a8:	adc	r2, r2, r2
   1a8ac:	subcs	r0, r0, r1, lsl #16
   1a8b0:	cmp	r0, r1, lsl #15
   1a8b4:	adc	r2, r2, r2
   1a8b8:	subcs	r0, r0, r1, lsl #15
   1a8bc:	cmp	r0, r1, lsl #14
   1a8c0:	adc	r2, r2, r2
   1a8c4:	subcs	r0, r0, r1, lsl #14
   1a8c8:	cmp	r0, r1, lsl #13
   1a8cc:	adc	r2, r2, r2
   1a8d0:	subcs	r0, r0, r1, lsl #13
   1a8d4:	cmp	r0, r1, lsl #12
   1a8d8:	adc	r2, r2, r2
   1a8dc:	subcs	r0, r0, r1, lsl #12
   1a8e0:	cmp	r0, r1, lsl #11
   1a8e4:	adc	r2, r2, r2
   1a8e8:	subcs	r0, r0, r1, lsl #11
   1a8ec:	cmp	r0, r1, lsl #10
   1a8f0:	adc	r2, r2, r2
   1a8f4:	subcs	r0, r0, r1, lsl #10
   1a8f8:	cmp	r0, r1, lsl #9
   1a8fc:	adc	r2, r2, r2
   1a900:	subcs	r0, r0, r1, lsl #9
   1a904:	cmp	r0, r1, lsl #8
   1a908:	adc	r2, r2, r2
   1a90c:	subcs	r0, r0, r1, lsl #8
   1a910:	cmp	r0, r1, lsl #7
   1a914:	adc	r2, r2, r2
   1a918:	subcs	r0, r0, r1, lsl #7
   1a91c:	cmp	r0, r1, lsl #6
   1a920:	adc	r2, r2, r2
   1a924:	subcs	r0, r0, r1, lsl #6
   1a928:	cmp	r0, r1, lsl #5
   1a92c:	adc	r2, r2, r2
   1a930:	subcs	r0, r0, r1, lsl #5
   1a934:	cmp	r0, r1, lsl #4
   1a938:	adc	r2, r2, r2
   1a93c:	subcs	r0, r0, r1, lsl #4
   1a940:	cmp	r0, r1, lsl #3
   1a944:	adc	r2, r2, r2
   1a948:	subcs	r0, r0, r1, lsl #3
   1a94c:	cmp	r0, r1, lsl #2
   1a950:	adc	r2, r2, r2
   1a954:	subcs	r0, r0, r1, lsl #2
   1a958:	cmp	r0, r1, lsl #1
   1a95c:	adc	r2, r2, r2
   1a960:	subcs	r0, r0, r1, lsl #1
   1a964:	cmp	r0, r1
   1a968:	adc	r2, r2, r2
   1a96c:	subcs	r0, r0, r1
   1a970:	mov	r0, r2
   1a974:	bx	lr
   1a978:	moveq	r0, #1
   1a97c:	movne	r0, #0
   1a980:	bx	lr
   1a984:	clz	r2, r1
   1a988:	rsb	r2, r2, #31
   1a98c:	lsr	r0, r0, r2
   1a990:	bx	lr
   1a994:	cmp	r0, #0
   1a998:	mvnne	r0, #0
   1a99c:	b	1ac00 <argp_parse@@Base+0x3070>
   1a9a0:	cmp	r1, #0
   1a9a4:	beq	1a994 <argp_parse@@Base+0x2e04>
   1a9a8:	push	{r0, r1, lr}
   1a9ac:	bl	1a7b4 <argp_parse@@Base+0x2c24>
   1a9b0:	pop	{r1, r2, lr}
   1a9b4:	mul	r3, r2, r0
   1a9b8:	sub	r1, r1, r3
   1a9bc:	bx	lr
   1a9c0:	cmp	r1, #0
   1a9c4:	beq	1abd0 <argp_parse@@Base+0x3040>
   1a9c8:	eor	ip, r0, r1
   1a9cc:	rsbmi	r1, r1, #0
   1a9d0:	subs	r2, r1, #1
   1a9d4:	beq	1ab9c <argp_parse@@Base+0x300c>
   1a9d8:	movs	r3, r0
   1a9dc:	rsbmi	r3, r0, #0
   1a9e0:	cmp	r3, r1
   1a9e4:	bls	1aba8 <argp_parse@@Base+0x3018>
   1a9e8:	tst	r1, r2
   1a9ec:	beq	1abb8 <argp_parse@@Base+0x3028>
   1a9f0:	clz	r2, r3
   1a9f4:	clz	r0, r1
   1a9f8:	sub	r2, r0, r2
   1a9fc:	rsbs	r2, r2, #31
   1aa00:	addne	r2, r2, r2, lsl #1
   1aa04:	mov	r0, #0
   1aa08:	addne	pc, pc, r2, lsl #2
   1aa0c:	nop			; (mov r0, r0)
   1aa10:	cmp	r3, r1, lsl #31
   1aa14:	adc	r0, r0, r0
   1aa18:	subcs	r3, r3, r1, lsl #31
   1aa1c:	cmp	r3, r1, lsl #30
   1aa20:	adc	r0, r0, r0
   1aa24:	subcs	r3, r3, r1, lsl #30
   1aa28:	cmp	r3, r1, lsl #29
   1aa2c:	adc	r0, r0, r0
   1aa30:	subcs	r3, r3, r1, lsl #29
   1aa34:	cmp	r3, r1, lsl #28
   1aa38:	adc	r0, r0, r0
   1aa3c:	subcs	r3, r3, r1, lsl #28
   1aa40:	cmp	r3, r1, lsl #27
   1aa44:	adc	r0, r0, r0
   1aa48:	subcs	r3, r3, r1, lsl #27
   1aa4c:	cmp	r3, r1, lsl #26
   1aa50:	adc	r0, r0, r0
   1aa54:	subcs	r3, r3, r1, lsl #26
   1aa58:	cmp	r3, r1, lsl #25
   1aa5c:	adc	r0, r0, r0
   1aa60:	subcs	r3, r3, r1, lsl #25
   1aa64:	cmp	r3, r1, lsl #24
   1aa68:	adc	r0, r0, r0
   1aa6c:	subcs	r3, r3, r1, lsl #24
   1aa70:	cmp	r3, r1, lsl #23
   1aa74:	adc	r0, r0, r0
   1aa78:	subcs	r3, r3, r1, lsl #23
   1aa7c:	cmp	r3, r1, lsl #22
   1aa80:	adc	r0, r0, r0
   1aa84:	subcs	r3, r3, r1, lsl #22
   1aa88:	cmp	r3, r1, lsl #21
   1aa8c:	adc	r0, r0, r0
   1aa90:	subcs	r3, r3, r1, lsl #21
   1aa94:	cmp	r3, r1, lsl #20
   1aa98:	adc	r0, r0, r0
   1aa9c:	subcs	r3, r3, r1, lsl #20
   1aaa0:	cmp	r3, r1, lsl #19
   1aaa4:	adc	r0, r0, r0
   1aaa8:	subcs	r3, r3, r1, lsl #19
   1aaac:	cmp	r3, r1, lsl #18
   1aab0:	adc	r0, r0, r0
   1aab4:	subcs	r3, r3, r1, lsl #18
   1aab8:	cmp	r3, r1, lsl #17
   1aabc:	adc	r0, r0, r0
   1aac0:	subcs	r3, r3, r1, lsl #17
   1aac4:	cmp	r3, r1, lsl #16
   1aac8:	adc	r0, r0, r0
   1aacc:	subcs	r3, r3, r1, lsl #16
   1aad0:	cmp	r3, r1, lsl #15
   1aad4:	adc	r0, r0, r0
   1aad8:	subcs	r3, r3, r1, lsl #15
   1aadc:	cmp	r3, r1, lsl #14
   1aae0:	adc	r0, r0, r0
   1aae4:	subcs	r3, r3, r1, lsl #14
   1aae8:	cmp	r3, r1, lsl #13
   1aaec:	adc	r0, r0, r0
   1aaf0:	subcs	r3, r3, r1, lsl #13
   1aaf4:	cmp	r3, r1, lsl #12
   1aaf8:	adc	r0, r0, r0
   1aafc:	subcs	r3, r3, r1, lsl #12
   1ab00:	cmp	r3, r1, lsl #11
   1ab04:	adc	r0, r0, r0
   1ab08:	subcs	r3, r3, r1, lsl #11
   1ab0c:	cmp	r3, r1, lsl #10
   1ab10:	adc	r0, r0, r0
   1ab14:	subcs	r3, r3, r1, lsl #10
   1ab18:	cmp	r3, r1, lsl #9
   1ab1c:	adc	r0, r0, r0
   1ab20:	subcs	r3, r3, r1, lsl #9
   1ab24:	cmp	r3, r1, lsl #8
   1ab28:	adc	r0, r0, r0
   1ab2c:	subcs	r3, r3, r1, lsl #8
   1ab30:	cmp	r3, r1, lsl #7
   1ab34:	adc	r0, r0, r0
   1ab38:	subcs	r3, r3, r1, lsl #7
   1ab3c:	cmp	r3, r1, lsl #6
   1ab40:	adc	r0, r0, r0
   1ab44:	subcs	r3, r3, r1, lsl #6
   1ab48:	cmp	r3, r1, lsl #5
   1ab4c:	adc	r0, r0, r0
   1ab50:	subcs	r3, r3, r1, lsl #5
   1ab54:	cmp	r3, r1, lsl #4
   1ab58:	adc	r0, r0, r0
   1ab5c:	subcs	r3, r3, r1, lsl #4
   1ab60:	cmp	r3, r1, lsl #3
   1ab64:	adc	r0, r0, r0
   1ab68:	subcs	r3, r3, r1, lsl #3
   1ab6c:	cmp	r3, r1, lsl #2
   1ab70:	adc	r0, r0, r0
   1ab74:	subcs	r3, r3, r1, lsl #2
   1ab78:	cmp	r3, r1, lsl #1
   1ab7c:	adc	r0, r0, r0
   1ab80:	subcs	r3, r3, r1, lsl #1
   1ab84:	cmp	r3, r1
   1ab88:	adc	r0, r0, r0
   1ab8c:	subcs	r3, r3, r1
   1ab90:	cmp	ip, #0
   1ab94:	rsbmi	r0, r0, #0
   1ab98:	bx	lr
   1ab9c:	teq	ip, r0
   1aba0:	rsbmi	r0, r0, #0
   1aba4:	bx	lr
   1aba8:	movcc	r0, #0
   1abac:	asreq	r0, ip, #31
   1abb0:	orreq	r0, r0, #1
   1abb4:	bx	lr
   1abb8:	clz	r2, r1
   1abbc:	rsb	r2, r2, #31
   1abc0:	cmp	ip, #0
   1abc4:	lsr	r0, r3, r2
   1abc8:	rsbmi	r0, r0, #0
   1abcc:	bx	lr
   1abd0:	cmp	r0, #0
   1abd4:	mvngt	r0, #-2147483648	; 0x80000000
   1abd8:	movlt	r0, #-2147483648	; 0x80000000
   1abdc:	b	1ac00 <argp_parse@@Base+0x3070>
   1abe0:	cmp	r1, #0
   1abe4:	beq	1abd0 <argp_parse@@Base+0x3040>
   1abe8:	push	{r0, r1, lr}
   1abec:	bl	1a9c8 <argp_parse@@Base+0x2e38>
   1abf0:	pop	{r1, r2, lr}
   1abf4:	mul	r3, r2, r0
   1abf8:	sub	r1, r1, r3
   1abfc:	bx	lr
   1ac00:	push	{r1, lr}
   1ac04:	mov	r0, #8
   1ac08:	bl	11118 <raise@plt>
   1ac0c:	pop	{r1, pc}
   1ac10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac14:	mov	r7, r0
   1ac18:	ldr	r6, [pc, #72]	; 1ac68 <argp_parse@@Base+0x30d8>
   1ac1c:	ldr	r5, [pc, #72]	; 1ac6c <argp_parse@@Base+0x30dc>
   1ac20:	add	r6, pc, r6
   1ac24:	add	r5, pc, r5
   1ac28:	sub	r6, r6, r5
   1ac2c:	mov	r8, r1
   1ac30:	mov	r9, r2
   1ac34:	bl	110e0 <calloc@plt-0x20>
   1ac38:	asrs	r6, r6, #2
   1ac3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac40:	mov	r4, #0
   1ac44:	add	r4, r4, #1
   1ac48:	ldr	r3, [r5], #4
   1ac4c:	mov	r2, r9
   1ac50:	mov	r1, r8
   1ac54:	mov	r0, r7
   1ac58:	blx	r3
   1ac5c:	cmp	r6, r4
   1ac60:	bne	1ac44 <argp_parse@@Base+0x30b4>
   1ac64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac68:	andeq	r2, r1, r8, ror #5
   1ac6c:	andeq	r2, r1, r0, ror #5
   1ac70:	bx	lr

Disassembly of section .fini:

0001ac74 <.fini>:
   1ac74:	push	{r3, lr}
   1ac78:	pop	{r3, pc}
