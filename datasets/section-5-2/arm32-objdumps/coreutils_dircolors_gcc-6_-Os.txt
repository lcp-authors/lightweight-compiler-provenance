
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010dd8 <.init>:
   10dd8:	push	{r3, lr}
   10ddc:	bl	11514 <close@plt+0x4ac>
   10de0:	pop	{r3, pc}

Disassembly of section .plt:

00010de4 <calloc@plt-0x14>:
   10de4:	push	{lr}		; (str lr, [sp, #-4]!)
   10de8:	ldr	lr, [pc, #4]	; 10df4 <calloc@plt-0x4>
   10dec:	add	lr, pc, lr
   10df0:	ldr	pc, [lr, #8]!
   10df4:	andeq	r6, r1, ip, lsl #4

00010df8 <calloc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #524]!	; 0x20c

00010e04 <fputs_unlocked@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #516]!	; 0x204

00010e10 <raise@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #508]!	; 0x1fc

00010e1c <strcmp@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #500]!	; 0x1f4

00010e28 <fflush@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #492]!	; 0x1ec

00010e34 <free@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e40 <_exit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #476]!	; 0x1dc

00010e4c <memcpy@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #468]!	; 0x1d4

00010e58 <mbsinit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #460]!	; 0x1cc

00010e64 <fwrite_unlocked@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e70 <memcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #444]!	; 0x1bc

00010e7c <fputc_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #436]!	; 0x1b4

00010e88 <dcgettext@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #428]!	; 0x1ac

00010e94 <dup2@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #420]!	; 0x1a4

00010ea0 <realloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #412]!	; 0x19c

00010eac <textdomain@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #404]!	; 0x194

00010eb8 <iswprint@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #396]!	; 0x18c

00010ec4 <lseek64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #388]!	; 0x184

00010ed0 <__ctype_get_mb_cur_max@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #380]!	; 0x17c

00010edc <__fpending@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #372]!	; 0x174

00010ee8 <ferror_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #364]!	; 0x16c

00010ef4 <mbrtowc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #356]!	; 0x164

00010f00 <error@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #348]!	; 0x15c

00010f0c <fnmatch@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #340]!	; 0x154

00010f18 <open64@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #332]!	; 0x14c

00010f24 <getenv@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #324]!	; 0x144

00010f30 <puts@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #316]!	; 0x13c

00010f3c <malloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #308]!	; 0x134

00010f48 <__libc_start_main@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #300]!	; 0x12c

00010f54 <__freading@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #292]!	; 0x124

00010f60 <__gmon_start__@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #284]!	; 0x11c

00010f6c <freopen64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #276]!	; 0x114

00010f78 <getopt_long@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #268]!	; 0x10c

00010f84 <__ctype_b_loc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #260]!	; 0x104

00010f90 <exit@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #252]!	; 0xfc

00010f9c <strlen@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #244]!	; 0xf4

00010fa8 <__errno_location@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #236]!	; 0xec

00010fb4 <__cxa_atexit@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #228]!	; 0xe4

00010fc0 <memset@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #220]!	; 0xdc

00010fcc <__printf_chk@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #212]!	; 0xd4

00010fd8 <fileno@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #204]!	; 0xcc

00010fe4 <__fprintf_chk@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #196]!	; 0xc4

00010ff0 <fclose@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #188]!	; 0xbc

00010ffc <fseeko64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #180]!	; 0xb4

00011008 <setlocale@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #172]!	; 0xac

00011014 <strrchr@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #164]!	; 0xa4

00011020 <nl_langinfo@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #156]!	; 0x9c

0001102c <bindtextdomain@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #148]!	; 0x94

00011038 <getline@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #140]!	; 0x8c

00011044 <fputs@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #132]!	; 0x84

00011050 <strncmp@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #124]!	; 0x7c

0001105c <abort@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #116]!	; 0x74

00011068 <close@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #108]!	; 0x6c

Disassembly of section .text:

00011074 <_obstack_begin@@Base-0x150c>:
   11074:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11078:	mov	r6, r0
   1107c:	ldr	r0, [r1]
   11080:	mov	r8, r1
   11084:	bl	1278c <_obstack_memory_used@@Base+0x28>
   11088:	ldr	r1, [pc, #960]	; 11450 <close@plt+0x3e8>
   1108c:	mov	r0, #6
   11090:	bl	11008 <setlocale@plt>
   11094:	ldr	r1, [pc, #952]	; 11454 <close@plt+0x3ec>
   11098:	ldr	r0, [pc, #952]	; 11458 <close@plt+0x3f0>
   1109c:	bl	1102c <bindtextdomain@plt>
   110a0:	ldr	r0, [pc, #944]	; 11458 <close@plt+0x3f0>
   110a4:	bl	10eac <textdomain@plt>
   110a8:	ldr	r0, [pc, #940]	; 1145c <close@plt+0x3f4>
   110ac:	bl	14f6c <_obstack_memory_used@@Base+0x2808>
   110b0:	mov	r4, #0
   110b4:	ldr	r9, [pc, #932]	; 11460 <close@plt+0x3f8>
   110b8:	mov	r5, #2
   110bc:	mov	r7, r4
   110c0:	str	r7, [sp]
   110c4:	ldr	r3, [pc, #920]	; 11464 <close@plt+0x3fc>
   110c8:	mov	r2, r9
   110cc:	mov	r1, r8
   110d0:	mov	r0, r6
   110d4:	bl	10f78 <getopt_long@plt>
   110d8:	cmn	r0, #1
   110dc:	bne	11128 <close@plt+0xc0>
   110e0:	ldr	r3, [pc, #896]	; 11468 <close@plt+0x400>
   110e4:	cmp	r5, #2
   110e8:	moveq	r7, #0
   110ec:	andne	r7, r4, #1
   110f0:	cmp	r7, #0
   110f4:	ldr	r9, [r3]
   110f8:	sub	r6, r6, r9
   110fc:	add	sl, r8, r9, lsl #2
   11100:	beq	111a8 <close@plt+0x140>
   11104:	mov	r2, #5
   11108:	ldr	r1, [pc, #860]	; 1146c <close@plt+0x404>
   1110c:	mov	r0, #0
   11110:	bl	10e88 <dcgettext@plt>
   11114:	mov	r1, #0
   11118:	mov	r2, r0
   1111c:	mov	r0, r1
   11120:	bl	10f00 <error@plt>
   11124:	b	11148 <close@plt+0xe0>
   11128:	cmp	r0, #98	; 0x62
   1112c:	beq	111a0 <close@plt+0x138>
   11130:	bgt	11150 <close@plt+0xe8>
   11134:	cmn	r0, #3
   11138:	beq	11170 <close@plt+0x108>
   1113c:	cmn	r0, #2
   11140:	moveq	r0, #0
   11144:	beq	1114c <close@plt+0xe4>
   11148:	mov	r0, #1
   1114c:	bl	11cb8 <close@plt+0xc50>
   11150:	cmp	r0, #99	; 0x63
   11154:	beq	11168 <close@plt+0x100>
   11158:	cmp	r0, #112	; 0x70
   1115c:	bne	11148 <close@plt+0xe0>
   11160:	mov	r4, #1
   11164:	b	110c0 <close@plt+0x58>
   11168:	mov	r5, #1
   1116c:	b	110c0 <close@plt+0x58>
   11170:	ldr	r3, [pc, #760]	; 11470 <close@plt+0x408>
   11174:	ldr	r0, [pc, #760]	; 11474 <close@plt+0x40c>
   11178:	str	r3, [sp]
   1117c:	ldr	r3, [pc, #756]	; 11478 <close@plt+0x410>
   11180:	str	r7, [sp, #4]
   11184:	ldr	r2, [pc, #752]	; 1147c <close@plt+0x414>
   11188:	ldr	r0, [r0]
   1118c:	ldr	r3, [r3]
   11190:	ldr	r1, [pc, #744]	; 11480 <close@plt+0x418>
   11194:	bl	1420c <_obstack_memory_used@@Base+0x1aa8>
   11198:	mov	r0, #0
   1119c:	bl	10f90 <exit@plt>
   111a0:	mov	r5, r7
   111a4:	b	110c0 <close@plt+0x58>
   111a8:	eor	r3, r4, #1
   111ac:	uxtb	r3, r3
   111b0:	cmp	r6, r3
   111b4:	ble	1122c <close@plt+0x1c4>
   111b8:	mov	r2, #5
   111bc:	ldr	r1, [pc, #704]	; 11484 <close@plt+0x41c>
   111c0:	mov	r0, r7
   111c4:	bl	10e88 <dcgettext@plt>
   111c8:	cmp	r4, #0
   111cc:	moveq	r3, #4
   111d0:	movne	r3, #0
   111d4:	mov	r5, r0
   111d8:	ldr	r0, [sl, r3]
   111dc:	bl	13dbc <_obstack_memory_used@@Base+0x1658>
   111e0:	mov	r2, r5
   111e4:	mov	r1, r7
   111e8:	mov	r3, r0
   111ec:	mov	r0, r7
   111f0:	bl	10f00 <error@plt>
   111f4:	cmp	r4, #0
   111f8:	beq	11148 <close@plt+0xe0>
   111fc:	ldr	r3, [pc, #644]	; 11488 <close@plt+0x420>
   11200:	mov	r2, #5
   11204:	ldr	r1, [pc, #640]	; 1148c <close@plt+0x424>
   11208:	mov	r0, r7
   1120c:	ldr	r4, [r3]
   11210:	bl	10e88 <dcgettext@plt>
   11214:	ldr	r2, [pc, #628]	; 11490 <close@plt+0x428>
   11218:	mov	r1, #1
   1121c:	mov	r3, r0
   11220:	mov	r0, r4
   11224:	bl	10fe4 <__fprintf_chk@plt>
   11228:	b	11148 <close@plt+0xe0>
   1122c:	cmp	r4, #0
   11230:	beq	11278 <close@plt+0x210>
   11234:	ldr	r5, [pc, #600]	; 11494 <close@plt+0x42c>
   11238:	ldr	r6, [pc, #600]	; 11498 <close@plt+0x430>
   1123c:	mov	r7, r5
   11240:	sub	r3, r5, r7
   11244:	cmp	r3, r6
   11248:	bls	1125c <close@plt+0x1f4>
   1124c:	eor	r0, r4, #1
   11250:	uxtb	r0, r0
   11254:	add	sp, sp, #8
   11258:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1125c:	mov	r0, r5
   11260:	bl	10f30 <puts@plt>
   11264:	mov	r0, r5
   11268:	bl	10f9c <strlen@plt>
   1126c:	add	r0, r0, #1
   11270:	add	r5, r5, r0
   11274:	b	11240 <close@plt+0x1d8>
   11278:	cmp	r5, #2
   1127c:	bne	112cc <close@plt+0x264>
   11280:	ldr	r0, [pc, #532]	; 1149c <close@plt+0x434>
   11284:	bl	10f24 <getenv@plt>
   11288:	subs	r3, r0, #0
   1128c:	beq	11430 <close@plt+0x3c8>
   11290:	ldrb	r3, [r3]
   11294:	cmp	r3, #0
   11298:	beq	11430 <close@plt+0x3c8>
   1129c:	bl	11ef8 <close@plt+0xe90>
   112a0:	ldr	r1, [pc, #504]	; 114a0 <close@plt+0x438>
   112a4:	mov	r5, r0
   112a8:	bl	10e1c <strcmp@plt>
   112ac:	cmp	r0, #0
   112b0:	moveq	r5, #1
   112b4:	beq	112cc <close@plt+0x264>
   112b8:	mov	r0, r5
   112bc:	ldr	r1, [pc, #480]	; 114a4 <close@plt+0x43c>
   112c0:	bl	10e1c <strcmp@plt>
   112c4:	clz	r5, r0
   112c8:	lsr	r5, r5, #5
   112cc:	ldr	r3, [pc, #468]	; 114a8 <close@plt+0x440>
   112d0:	mov	r2, #0
   112d4:	str	r3, [sp]
   112d8:	mov	r1, r2
   112dc:	ldr	r3, [pc, #456]	; 114ac <close@plt+0x444>
   112e0:	ldr	r0, [pc, #456]	; 114b0 <close@plt+0x448>
   112e4:	bl	12580 <_obstack_begin@@Base>
   112e8:	cmp	r6, #0
   112ec:	bne	113a4 <close@plt+0x33c>
   112f0:	mov	r1, r6
   112f4:	mov	r0, r6
   112f8:	bl	11760 <close@plt+0x6f8>
   112fc:	mov	r4, r0
   11300:	cmp	r4, #0
   11304:	beq	1124c <close@plt+0x1e4>
   11308:	ldr	r3, [pc, #416]	; 114b0 <close@plt+0x448>
   1130c:	ldr	r8, [pc, #352]	; 11474 <close@plt+0x40c>
   11310:	ldr	r1, [r3, #12]
   11314:	ldr	r6, [r3, #8]
   11318:	ldr	r0, [r3, #16]
   1131c:	cmp	r1, r6
   11320:	sub	r7, r1, r6
   11324:	ldrbeq	r2, [r3, #40]	; 0x28
   11328:	orreq	r2, r2, #2
   1132c:	strbeq	r2, [r3, #40]	; 0x28
   11330:	ldr	r2, [r3, #24]
   11334:	add	r1, r1, r2
   11338:	bic	r1, r1, r2
   1133c:	ldr	r2, [r3, #4]
   11340:	str	r1, [r3, #12]
   11344:	sub	r1, r1, r2
   11348:	sub	r2, r0, r2
   1134c:	cmp	r1, r2
   11350:	strhi	r0, [r3, #12]
   11354:	ldr	r2, [r3, #12]
   11358:	cmp	r5, #0
   1135c:	str	r2, [r3, #8]
   11360:	ldr	r3, [pc, #332]	; 114b4 <close@plt+0x44c>
   11364:	ldr	r5, [pc, #332]	; 114b8 <close@plt+0x450>
   11368:	movne	r5, r3
   1136c:	ldr	r3, [pc, #328]	; 114bc <close@plt+0x454>
   11370:	ldr	r1, [r8]
   11374:	ldr	r0, [pc, #324]	; 114c0 <close@plt+0x458>
   11378:	movne	r0, r3
   1137c:	bl	10e04 <fputs_unlocked@plt>
   11380:	ldr	r3, [r8]
   11384:	mov	r2, r7
   11388:	mov	r1, #1
   1138c:	mov	r0, r6
   11390:	bl	10e64 <fwrite_unlocked@plt>
   11394:	ldr	r1, [r8]
   11398:	mov	r0, r5
   1139c:	bl	10e04 <fputs_unlocked@plt>
   113a0:	b	1124c <close@plt+0x1e4>
   113a4:	ldr	r6, [r8, r9, lsl #2]
   113a8:	ldr	r1, [pc, #276]	; 114c4 <close@plt+0x45c>
   113ac:	mov	r0, r6
   113b0:	bl	10e1c <strcmp@plt>
   113b4:	ldr	r7, [pc, #268]	; 114c8 <close@plt+0x460>
   113b8:	cmp	r0, #0
   113bc:	beq	11408 <close@plt+0x3a0>
   113c0:	ldr	r2, [r7]
   113c4:	ldr	r1, [pc, #256]	; 114cc <close@plt+0x464>
   113c8:	mov	r0, r6
   113cc:	bl	1227c <close@plt+0x1214>
   113d0:	subs	r8, r0, #0
   113d4:	bne	11408 <close@plt+0x3a0>
   113d8:	bl	10fa8 <__errno_location@plt>
   113dc:	mov	r2, r6
   113e0:	mov	r1, #3
   113e4:	ldr	r5, [r0]
   113e8:	mov	r0, #0
   113ec:	bl	13c7c <_obstack_memory_used@@Base+0x1518>
   113f0:	ldr	r2, [pc, #216]	; 114d0 <close@plt+0x468>
   113f4:	mov	r1, r5
   113f8:	mov	r3, r0
   113fc:	mov	r0, #0
   11400:	bl	10f00 <error@plt>
   11404:	b	1124c <close@plt+0x1e4>
   11408:	mov	r1, r6
   1140c:	ldr	r0, [r7]
   11410:	bl	11760 <close@plt+0x6f8>
   11414:	mov	r8, r0
   11418:	ldr	r0, [r7]
   1141c:	bl	120e8 <close@plt+0x1080>
   11420:	cmp	r0, #0
   11424:	moveq	r4, r8
   11428:	beq	11300 <close@plt+0x298>
   1142c:	b	113d8 <close@plt+0x370>
   11430:	mov	r2, #5
   11434:	ldr	r1, [pc, #152]	; 114d4 <close@plt+0x46c>
   11438:	mov	r0, #0
   1143c:	bl	10e88 <dcgettext@plt>
   11440:	mov	r1, #0
   11444:	mov	r2, r0
   11448:	mov	r0, #1
   1144c:	bl	10f00 <error@plt>
   11450:	andeq	r6, r1, pc, asr #12
   11454:	andeq	r6, r1, r4, lsl #13
   11458:	andeq	r6, r1, sp, lsr #11
   1145c:	andeq	r2, r1, r4
   11460:	andeq	r6, r1, fp, lsr #13
   11464:	ldrdeq	r6, [r1], -r0
   11468:	andeq	r7, r2, r0, asr #2
   1146c:	andeq	r6, r1, pc, lsr #13
   11470:	muleq	r1, ip, r6
   11474:	andeq	r7, r2, r4, asr r1
   11478:	andeq	r7, r2, ip, ror #1
   1147c:	andeq	r6, r1, r9, lsr #11
   11480:	andeq	r6, r1, r8, asr #5
   11484:	andeq	r6, r1, r6, lsl r7
   11488:	andeq	r7, r2, r8, asr #2
   1148c:	andeq	r6, r1, r7, lsr #14
   11490:	andeq	r6, r1, r1, lsr #21
   11494:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11498:	ldrdeq	r1, [r0], -r5
   1149c:	andeq	r6, r1, r3, ror #14
   114a0:	andeq	r6, r1, sl, ror #14
   114a4:	andeq	r6, r1, r9, ror #14
   114a8:	andeq	r2, r1, r0, ror #3
   114ac:	strdeq	r4, [r1], -r0
   114b0:	andeq	r7, r2, ip, asr r1
   114b4:	andeq	r6, r1, sp, asr #12
   114b8:	andeq	r6, r1, r0, asr r6
   114bc:	andeq	r6, r1, r1, ror r6
   114c0:	andeq	r6, r1, r5, ror #12
   114c4:	andeq	r6, r1, r8, ror #19
   114c8:	andeq	r7, r2, r0, asr r1
   114cc:	andeq	r6, r1, r2, lsl #19
   114d0:	andeq	r6, r1, r8, lsl #19
   114d4:	andeq	r6, r1, lr, ror #14
   114d8:	mov	fp, #0
   114dc:	mov	lr, #0
   114e0:	pop	{r1}		; (ldr r1, [sp], #4)
   114e4:	mov	r2, sp
   114e8:	push	{r2}		; (str r2, [sp, #-4]!)
   114ec:	push	{r0}		; (str r0, [sp, #-4]!)
   114f0:	ldr	ip, [pc, #16]	; 11508 <close@plt+0x4a0>
   114f4:	push	{ip}		; (str ip, [sp, #-4]!)
   114f8:	ldr	r0, [pc, #12]	; 1150c <close@plt+0x4a4>
   114fc:	ldr	r3, [pc, #12]	; 11510 <close@plt+0x4a8>
   11500:	bl	10f48 <__libc_start_main@plt>
   11504:	bl	1105c <abort@plt>
   11508:	andeq	r4, r1, r8, ror #30
   1150c:	andeq	r1, r1, r4, ror r0
   11510:	andeq	r4, r1, r8, lsl #30
   11514:	ldr	r3, [pc, #20]	; 11530 <close@plt+0x4c8>
   11518:	ldr	r2, [pc, #20]	; 11534 <close@plt+0x4cc>
   1151c:	add	r3, pc, r3
   11520:	ldr	r2, [r3, r2]
   11524:	cmp	r2, #0
   11528:	bxeq	lr
   1152c:	b	10f60 <__gmon_start__@plt>
   11530:	ldrdeq	r5, [r1], -ip
   11534:	andeq	r0, r0, r0, ror #1
   11538:	ldr	r3, [pc, #28]	; 1155c <close@plt+0x4f4>
   1153c:	ldr	r0, [pc, #28]	; 11560 <close@plt+0x4f8>
   11540:	sub	r3, r3, r0
   11544:	cmp	r3, #6
   11548:	bxls	lr
   1154c:	ldr	r3, [pc, #16]	; 11564 <close@plt+0x4fc>
   11550:	cmp	r3, #0
   11554:	bxeq	lr
   11558:	bx	r3
   1155c:	andeq	r7, r2, fp, lsr r1
   11560:	andeq	r7, r2, r8, lsr r1
   11564:	andeq	r0, r0, r0
   11568:	ldr	r1, [pc, #36]	; 11594 <close@plt+0x52c>
   1156c:	ldr	r0, [pc, #36]	; 11598 <close@plt+0x530>
   11570:	sub	r1, r1, r0
   11574:	asr	r1, r1, #2
   11578:	add	r1, r1, r1, lsr #31
   1157c:	asrs	r1, r1, #1
   11580:	bxeq	lr
   11584:	ldr	r3, [pc, #16]	; 1159c <close@plt+0x534>
   11588:	cmp	r3, #0
   1158c:	bxeq	lr
   11590:	bx	r3
   11594:	andeq	r7, r2, r8, lsr r1
   11598:	andeq	r7, r2, r8, lsr r1
   1159c:	andeq	r0, r0, r0
   115a0:	push	{r4, lr}
   115a4:	ldr	r4, [pc, #24]	; 115c4 <close@plt+0x55c>
   115a8:	ldrb	r3, [r4]
   115ac:	cmp	r3, #0
   115b0:	popne	{r4, pc}
   115b4:	bl	11538 <close@plt+0x4d0>
   115b8:	mov	r3, #1
   115bc:	strb	r3, [r4]
   115c0:	pop	{r4, pc}
   115c4:	andeq	r7, r2, r8, asr r1
   115c8:	ldr	r0, [pc, #40]	; 115f8 <close@plt+0x590>
   115cc:	ldr	r3, [r0]
   115d0:	cmp	r3, #0
   115d4:	bne	115dc <close@plt+0x574>
   115d8:	b	11568 <close@plt+0x500>
   115dc:	ldr	r3, [pc, #24]	; 115fc <close@plt+0x594>
   115e0:	cmp	r3, #0
   115e4:	beq	115d8 <close@plt+0x570>
   115e8:	push	{r4, lr}
   115ec:	blx	r3
   115f0:	pop	{r4, lr}
   115f4:	b	11568 <close@plt+0x500>
   115f8:	andeq	r6, r2, r4, lsl pc
   115fc:	andeq	r0, r0, r0
   11600:	push	{r4, r5, r6, r7, r8, lr}
   11604:	mov	r6, #1
   11608:	ldr	r4, [pc, #332]	; 1175c <close@plt+0x6f4>
   1160c:	mov	r7, r0
   11610:	mov	r5, r6
   11614:	mov	r8, #92	; 0x5c
   11618:	ldrb	r3, [r7]
   1161c:	cmp	r3, #0
   11620:	bne	11628 <close@plt+0x5c0>
   11624:	pop	{r4, r5, r6, r7, r8, pc}
   11628:	cmp	r3, #61	; 0x3d
   1162c:	beq	11724 <close@plt+0x6bc>
   11630:	bhi	1164c <close@plt+0x5e4>
   11634:	cmp	r3, #39	; 0x27
   11638:	beq	11694 <close@plt+0x62c>
   1163c:	cmp	r3, #58	; 0x3a
   11640:	beq	11724 <close@plt+0x6bc>
   11644:	mov	r6, r5
   11648:	b	11660 <close@plt+0x5f8>
   1164c:	cmp	r3, #92	; 0x5c
   11650:	beq	1165c <close@plt+0x5f4>
   11654:	cmp	r3, #94	; 0x5e
   11658:	bne	11644 <close@plt+0x5dc>
   1165c:	eor	r6, r6, #1
   11660:	ldr	r2, [r4, #16]
   11664:	ldr	r3, [r4, #12]
   11668:	cmp	r2, r3
   1166c:	bne	1167c <close@plt+0x614>
   11670:	mov	r1, r5
   11674:	mov	r0, r4
   11678:	bl	125c0 <_obstack_newchunk@@Base>
   1167c:	ldr	r3, [r4, #12]
   11680:	add	r2, r3, #1
   11684:	str	r2, [r4, #12]
   11688:	ldrb	r2, [r7], #1
   1168c:	strb	r2, [r3]
   11690:	b	11618 <close@plt+0x5b0>
   11694:	ldr	r2, [r4, #16]
   11698:	ldr	r3, [r4, #12]
   1169c:	cmp	r2, r3
   116a0:	bne	116b0 <close@plt+0x648>
   116a4:	mov	r1, r5
   116a8:	mov	r0, r4
   116ac:	bl	125c0 <_obstack_newchunk@@Base>
   116b0:	ldr	r3, [r4, #12]
   116b4:	add	r2, r3, #1
   116b8:	str	r2, [r4, #12]
   116bc:	mov	r2, #39	; 0x27
   116c0:	strb	r2, [r3]
   116c4:	ldr	r2, [r4, #16]
   116c8:	ldr	r3, [r4, #12]
   116cc:	cmp	r2, r3
   116d0:	bne	116e0 <close@plt+0x678>
   116d4:	mov	r1, r5
   116d8:	mov	r0, r4
   116dc:	bl	125c0 <_obstack_newchunk@@Base>
   116e0:	ldr	r3, [r4, #12]
   116e4:	add	r2, r3, #1
   116e8:	str	r2, [r4, #12]
   116ec:	strb	r8, [r3]
   116f0:	ldr	r2, [r4, #16]
   116f4:	ldr	r3, [r4, #12]
   116f8:	cmp	r2, r3
   116fc:	bne	1170c <close@plt+0x6a4>
   11700:	mov	r1, r5
   11704:	mov	r0, r4
   11708:	bl	125c0 <_obstack_newchunk@@Base>
   1170c:	ldr	r3, [r4, #12]
   11710:	add	r2, r3, #1
   11714:	str	r2, [r4, #12]
   11718:	mov	r2, #39	; 0x27
   1171c:	strb	r2, [r3]
   11720:	b	11644 <close@plt+0x5dc>
   11724:	cmp	r6, #0
   11728:	beq	11644 <close@plt+0x5dc>
   1172c:	ldr	r2, [r4, #16]
   11730:	ldr	r3, [r4, #12]
   11734:	cmp	r2, r3
   11738:	bne	11748 <close@plt+0x6e0>
   1173c:	mov	r1, r5
   11740:	mov	r0, r4
   11744:	bl	125c0 <_obstack_newchunk@@Base>
   11748:	ldr	r3, [r4, #12]
   1174c:	add	r2, r3, #1
   11750:	str	r2, [r4, #12]
   11754:	strb	r8, [r3]
   11758:	b	11660 <close@plt+0x5f8>
   1175c:	andeq	r7, r2, ip, asr r1
   11760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11764:	sub	sp, sp, #44	; 0x2c
   11768:	mov	r3, #0
   1176c:	str	r0, [sp, #20]
   11770:	ldr	r0, [pc, #1292]	; 11c84 <close@plt+0xc1c>
   11774:	mov	r9, r1
   11778:	str	r3, [sp, #32]
   1177c:	str	r3, [sp, #36]	; 0x24
   11780:	bl	10f24 <getenv@plt>
   11784:	subs	r7, r0, #0
   11788:	ldreq	r7, [pc, #1272]	; 11c88 <close@plt+0xc20>
   1178c:	beq	117a0 <close@plt+0x738>
   11790:	ldrb	r2, [r7]
   11794:	ldr	r3, [pc, #1260]	; 11c88 <close@plt+0xc20>
   11798:	cmp	r2, #0
   1179c:	moveq	r7, r3
   117a0:	ldr	r6, [pc, #1252]	; 11c8c <close@plt+0xc24>
   117a4:	mov	r3, #1
   117a8:	mov	r5, #3
   117ac:	str	r3, [sp, #16]
   117b0:	mov	r3, #0
   117b4:	str	r3, [sp, #12]
   117b8:	ldr	r3, [sp, #12]
   117bc:	add	r3, r3, #1
   117c0:	str	r3, [sp, #12]
   117c4:	ldr	r3, [sp, #20]
   117c8:	cmp	r3, #0
   117cc:	beq	118d0 <close@plt+0x868>
   117d0:	mov	r2, r3
   117d4:	add	r1, sp, #36	; 0x24
   117d8:	add	r0, sp, #32
   117dc:	bl	11038 <getline@plt>
   117e0:	cmp	r0, #0
   117e4:	bgt	117fc <close@plt+0x794>
   117e8:	ldr	r0, [sp, #32]
   117ec:	bl	121e0 <close@plt+0x1178>
   117f0:	ldr	r0, [sp, #16]
   117f4:	add	sp, sp, #44	; 0x2c
   117f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117fc:	ldr	r4, [sp, #32]
   11800:	bl	10f84 <__ctype_b_loc@plt>
   11804:	mov	sl, r0
   11808:	ldr	r1, [r0]
   1180c:	mov	r0, r4
   11810:	mov	ip, r0
   11814:	ldrb	r2, [ip], #1
   11818:	lsl	lr, r2, #1
   1181c:	ldrh	lr, [r1, lr]
   11820:	tst	lr, #8192	; 0x2000
   11824:	bne	118f4 <close@plt+0x88c>
   11828:	cmp	r2, #35	; 0x23
   1182c:	cmpne	r2, #0
   11830:	movne	fp, r0
   11834:	beq	117b8 <close@plt+0x750>
   11838:	ldrb	ip, [fp]
   1183c:	add	r2, fp, #1
   11840:	lsl	lr, ip, #1
   11844:	ldrh	r8, [r1, lr]
   11848:	lsr	r8, r8, #13
   1184c:	eor	r8, r8, #1
   11850:	cmp	ip, #0
   11854:	moveq	r8, #0
   11858:	andne	r8, r8, #1
   1185c:	cmp	r8, #0
   11860:	bne	118fc <close@plt+0x894>
   11864:	sub	r1, fp, r0
   11868:	bl	14720 <_obstack_memory_used@@Base+0x1fbc>
   1186c:	ldrb	r2, [fp]
   11870:	cmp	r2, #0
   11874:	mov	r4, r0
   11878:	ldrne	r0, [sl]
   1187c:	bne	11904 <close@plt+0x89c>
   11880:	mov	r2, #5
   11884:	ldr	r1, [pc, #1028]	; 11c90 <close@plt+0xc28>
   11888:	mov	r0, #0
   1188c:	bl	10e88 <dcgettext@plt>
   11890:	mov	r2, r9
   11894:	mov	r1, #3
   11898:	mov	sl, r0
   1189c:	mov	r0, #0
   118a0:	bl	13c7c <_obstack_memory_used@@Base+0x1518>
   118a4:	ldr	r3, [sp, #12]
   118a8:	mov	r1, #0
   118ac:	str	r3, [sp]
   118b0:	mov	r2, sl
   118b4:	mov	r3, r0
   118b8:	mov	r0, r1
   118bc:	bl	10f00 <error@plt>
   118c0:	mov	r0, r4
   118c4:	bl	121e0 <close@plt+0x1178>
   118c8:	str	r8, [sp, #16]
   118cc:	b	117b8 <close@plt+0x750>
   118d0:	ldr	r3, [pc, #956]	; 11c94 <close@plt+0xc2c>
   118d4:	cmp	r6, r3
   118d8:	beq	117f0 <close@plt+0x788>
   118dc:	mov	r0, r6
   118e0:	bl	10f9c <strlen@plt>
   118e4:	mov	r4, r6
   118e8:	add	r0, r0, #1
   118ec:	add	r6, r6, r0
   118f0:	b	11800 <close@plt+0x798>
   118f4:	mov	r0, ip
   118f8:	b	11810 <close@plt+0x7a8>
   118fc:	mov	fp, r2
   11900:	b	11838 <close@plt+0x7d0>
   11904:	ldrb	r3, [fp, #1]!
   11908:	lsl	r2, r3, #1
   1190c:	ldrh	r2, [r0, r2]
   11910:	tst	r2, #8192	; 0x2000
   11914:	bne	11904 <close@plt+0x89c>
   11918:	cmp	r3, #35	; 0x23
   1191c:	cmpne	r3, #0
   11920:	beq	11880 <close@plt+0x818>
   11924:	mov	r1, fp
   11928:	mov	r3, r1
   1192c:	ldrb	r2, [r1], #1
   11930:	cmp	r2, #0
   11934:	cmpne	r2, #35	; 0x23
   11938:	movne	r2, #1
   1193c:	moveq	r2, #0
   11940:	str	r2, [sp, #24]
   11944:	bne	11928 <close@plt+0x8c0>
   11948:	sub	r3, r3, #1
   1194c:	mov	r1, r3
   11950:	sub	r3, r3, #1
   11954:	ldrb	r2, [r1]
   11958:	lsl	r2, r2, #1
   1195c:	ldrh	r2, [r0, r2]
   11960:	tst	r2, #8192	; 0x2000
   11964:	bne	1194c <close@plt+0x8e4>
   11968:	add	r1, r1, #1
   1196c:	sub	r1, r1, fp
   11970:	mov	r0, fp
   11974:	bl	14720 <_obstack_memory_used@@Base+0x1fbc>
   11978:	ldr	r1, [pc, #772]	; 11c84 <close@plt+0xc1c>
   1197c:	mov	r8, r0
   11980:	mov	r0, r4
   11984:	bl	11f88 <close@plt+0xf20>
   11988:	subs	r2, r0, #0
   1198c:	bne	119c0 <close@plt+0x958>
   11990:	mov	r1, r7
   11994:	mov	r0, r8
   11998:	bl	10f0c <fnmatch@plt>
   1199c:	cmp	r0, #0
   119a0:	cmpne	r5, #2
   119a4:	movne	r5, #0
   119a8:	moveq	r5, #2
   119ac:	mov	r0, r4
   119b0:	bl	121e0 <close@plt+0x1178>
   119b4:	mov	r0, r8
   119b8:	bl	121e0 <close@plt+0x1178>
   119bc:	b	117b8 <close@plt+0x750>
   119c0:	cmp	r5, #2
   119c4:	beq	11a80 <close@plt+0xa18>
   119c8:	cmp	r5, #0
   119cc:	beq	11b10 <close@plt+0xaa8>
   119d0:	ldrb	r3, [r4]
   119d4:	cmp	r3, #46	; 0x2e
   119d8:	bne	11a88 <close@plt+0xa20>
   119dc:	ldr	fp, [pc, #692]	; 11c98 <close@plt+0xc30>
   119e0:	mov	r0, fp
   119e4:	ldr	r2, [fp, #16]
   119e8:	ldr	r3, [fp, #12]
   119ec:	cmp	r2, r3
   119f0:	bne	119fc <close@plt+0x994>
   119f4:	mov	r1, #1
   119f8:	bl	125c0 <_obstack_newchunk@@Base>
   119fc:	ldr	r3, [fp, #12]
   11a00:	mov	r0, r4
   11a04:	add	r2, r3, #1
   11a08:	str	r2, [fp, #12]
   11a0c:	mov	r2, #42	; 0x2a
   11a10:	strb	r2, [r3]
   11a14:	bl	11600 <close@plt+0x598>
   11a18:	ldr	r2, [fp, #16]
   11a1c:	ldr	r3, [fp, #12]
   11a20:	cmp	r2, r3
   11a24:	moveq	r1, #1
   11a28:	ldreq	r0, [pc, #616]	; 11c98 <close@plt+0xc30>
   11a2c:	beq	11ab4 <close@plt+0xa4c>
   11a30:	ldr	r3, [fp, #12]
   11a34:	mov	r0, r8
   11a38:	add	r2, r3, #1
   11a3c:	str	r2, [fp, #12]
   11a40:	mov	r2, #61	; 0x3d
   11a44:	strb	r2, [r3]
   11a48:	bl	11600 <close@plt+0x598>
   11a4c:	ldr	r2, [fp, #16]
   11a50:	ldr	r3, [fp, #12]
   11a54:	cmp	r2, r3
   11a58:	bne	11a68 <close@plt+0xa00>
   11a5c:	mov	r1, #1
   11a60:	ldr	r0, [pc, #560]	; 11c98 <close@plt+0xc30>
   11a64:	bl	125c0 <_obstack_newchunk@@Base>
   11a68:	ldr	r3, [fp, #12]
   11a6c:	add	r2, r3, #1
   11a70:	str	r2, [fp, #12]
   11a74:	mov	r2, #58	; 0x3a
   11a78:	strb	r2, [r3]
   11a7c:	b	119ac <close@plt+0x944>
   11a80:	mov	r5, #1
   11a84:	b	119d0 <close@plt+0x968>
   11a88:	cmp	r3, #42	; 0x2a
   11a8c:	bne	11abc <close@plt+0xa54>
   11a90:	ldr	fp, [pc, #512]	; 11c98 <close@plt+0xc30>
   11a94:	mov	r0, r4
   11a98:	bl	11600 <close@plt+0x598>
   11a9c:	ldr	r2, [fp, #16]
   11aa0:	ldr	r3, [fp, #12]
   11aa4:	mov	r0, fp
   11aa8:	cmp	r2, r3
   11aac:	bne	11a30 <close@plt+0x9c8>
   11ab0:	mov	r1, #1
   11ab4:	bl	125c0 <_obstack_newchunk@@Base>
   11ab8:	b	11a30 <close@plt+0x9c8>
   11abc:	ldr	r1, [pc, #472]	; 11c9c <close@plt+0xc34>
   11ac0:	mov	r0, r4
   11ac4:	bl	11f88 <close@plt+0xf20>
   11ac8:	cmp	r0, #0
   11acc:	beq	119ac <close@plt+0x944>
   11ad0:	ldr	r1, [pc, #456]	; 11ca0 <close@plt+0xc38>
   11ad4:	mov	r0, r4
   11ad8:	bl	11f88 <close@plt+0xf20>
   11adc:	cmp	r0, #0
   11ae0:	beq	119ac <close@plt+0x944>
   11ae4:	ldr	r1, [pc, #440]	; 11ca4 <close@plt+0xc3c>
   11ae8:	mov	r0, r4
   11aec:	bl	11f88 <close@plt+0xf20>
   11af0:	cmp	r0, #0
   11af4:	movne	r3, #0
   11af8:	ldrne	sl, [pc, #424]	; 11ca8 <close@plt+0xc40>
   11afc:	beq	119ac <close@plt+0x944>
   11b00:	ldr	r1, [sl, r3, lsl #2]
   11b04:	lsl	fp, r3, #2
   11b08:	cmp	r1, #0
   11b0c:	bne	11b74 <close@plt+0xb0c>
   11b10:	sub	r3, r5, #1
   11b14:	cmp	r3, #1
   11b18:	bhi	119ac <close@plt+0x944>
   11b1c:	mov	r2, #5
   11b20:	ldr	r1, [pc, #388]	; 11cac <close@plt+0xc44>
   11b24:	mov	r0, #0
   11b28:	bl	10e88 <dcgettext@plt>
   11b2c:	cmp	r9, #0
   11b30:	mov	sl, r0
   11b34:	beq	11b94 <close@plt+0xb2c>
   11b38:	mov	r2, r9
   11b3c:	mov	r1, #3
   11b40:	mov	r0, #0
   11b44:	bl	13c7c <_obstack_memory_used@@Base+0x1518>
   11b48:	ldr	r3, [sp, #12]
   11b4c:	mov	r1, #0
   11b50:	str	r3, [sp]
   11b54:	str	r4, [sp, #4]
   11b58:	mov	r3, r0
   11b5c:	mov	r2, sl
   11b60:	mov	r0, r1
   11b64:	bl	10f00 <error@plt>
   11b68:	ldr	r3, [sp, #24]
   11b6c:	str	r3, [sp, #16]
   11b70:	b	119ac <close@plt+0x944>
   11b74:	mov	r0, r4
   11b78:	str	r3, [sp, #28]
   11b7c:	bl	11f88 <close@plt+0xf20>
   11b80:	cmp	r0, #0
   11b84:	beq	11ba8 <close@plt+0xb40>
   11b88:	ldr	r3, [sp, #28]
   11b8c:	add	r3, r3, #1
   11b90:	b	11b00 <close@plt+0xa98>
   11b94:	mov	r2, #5
   11b98:	ldr	r1, [pc, #272]	; 11cb0 <close@plt+0xc48>
   11b9c:	mov	r0, r9
   11ba0:	bl	10e88 <dcgettext@plt>
   11ba4:	b	11b48 <close@plt+0xae0>
   11ba8:	ldr	sl, [pc, #232]	; 11c98 <close@plt+0xc30>
   11bac:	mov	r0, sl
   11bb0:	ldr	r1, [sl, #16]
   11bb4:	ldr	r2, [sl, #12]
   11bb8:	cmp	r1, r2
   11bbc:	bne	11bc8 <close@plt+0xb60>
   11bc0:	mov	r1, #1
   11bc4:	bl	125c0 <_obstack_newchunk@@Base>
   11bc8:	ldr	r1, [sl, #12]
   11bcc:	add	r2, r1, #1
   11bd0:	str	r2, [sl, #12]
   11bd4:	ldr	r2, [pc, #216]	; 11cb4 <close@plt+0xc4c>
   11bd8:	add	fp, r2, fp
   11bdc:	ldr	fp, [fp, #-3720]	; 0xfffff178
   11be0:	ldrb	r2, [fp]
   11be4:	strb	r2, [r1]
   11be8:	ldr	r1, [sl, #16]
   11bec:	ldr	r2, [sl, #12]
   11bf0:	cmp	r1, r2
   11bf4:	bne	11c04 <close@plt+0xb9c>
   11bf8:	mov	r1, #1
   11bfc:	ldr	r0, [pc, #148]	; 11c98 <close@plt+0xc30>
   11c00:	bl	125c0 <_obstack_newchunk@@Base>
   11c04:	ldr	r2, [sl, #12]
   11c08:	add	r1, r2, #1
   11c0c:	str	r1, [sl, #12]
   11c10:	ldrb	r1, [fp, #1]
   11c14:	strb	r1, [r2]
   11c18:	ldr	r1, [sl, #16]
   11c1c:	ldr	r2, [sl, #12]
   11c20:	cmp	r1, r2
   11c24:	bne	11c34 <close@plt+0xbcc>
   11c28:	mov	r1, #1
   11c2c:	ldr	r0, [pc, #100]	; 11c98 <close@plt+0xc30>
   11c30:	bl	125c0 <_obstack_newchunk@@Base>
   11c34:	ldr	r2, [sl, #12]
   11c38:	mov	r0, r8
   11c3c:	add	r1, r2, #1
   11c40:	str	r1, [sl, #12]
   11c44:	mov	r1, #61	; 0x3d
   11c48:	strb	r1, [r2]
   11c4c:	bl	11600 <close@plt+0x598>
   11c50:	ldr	r1, [sl, #16]
   11c54:	ldr	r2, [sl, #12]
   11c58:	cmp	r1, r2
   11c5c:	bne	11c6c <close@plt+0xc04>
   11c60:	mov	r1, #1
   11c64:	ldr	r0, [pc, #44]	; 11c98 <close@plt+0xc30>
   11c68:	bl	125c0 <_obstack_newchunk@@Base>
   11c6c:	ldr	r2, [sl, #12]
   11c70:	mov	r3, #58	; 0x3a
   11c74:	add	r1, r2, #1
   11c78:	str	r1, [sl, #12]
   11c7c:	strb	r3, [r2]
   11c80:	b	119ac <close@plt+0x944>
   11c84:	andeq	r6, r1, r5, asr r2
   11c88:	andeq	r6, r1, r0, asr r2
   11c8c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11c90:	andeq	r6, r1, sl, asr r2
   11c94:	andeq	r6, r1, r6, rrx
   11c98:	andeq	r7, r2, ip, asr r1
   11c9c:	andeq	r6, r1, r6, lsl #5
   11ca0:	andeq	r6, r1, lr, lsl #5
   11ca4:	muleq	r1, r4, r2
   11ca8:	andeq	r6, r1, r8, rrx
   11cac:	muleq	r1, sp, r2
   11cb0:			; <UNDEFINED> instruction: 0x000162bd
   11cb4:	andeq	r6, r1, r8, lsl #31
   11cb8:	subs	r5, r0, #0
   11cbc:	push	{r7, lr}
   11cc0:	sub	sp, sp, #56	; 0x38
   11cc4:	ldr	r4, [pc, #476]	; 11ea8 <close@plt+0xe40>
   11cc8:	beq	11d00 <close@plt+0xc98>
   11ccc:	ldr	r3, [pc, #472]	; 11eac <close@plt+0xe44>
   11cd0:	mov	r2, #5
   11cd4:	ldr	r1, [pc, #468]	; 11eb0 <close@plt+0xe48>
   11cd8:	mov	r0, #0
   11cdc:	ldr	r6, [r3]
   11ce0:	bl	10e88 <dcgettext@plt>
   11ce4:	ldr	r3, [r4]
   11ce8:	mov	r1, #1
   11cec:	mov	r2, r0
   11cf0:	mov	r0, r6
   11cf4:	bl	10fe4 <__fprintf_chk@plt>
   11cf8:	mov	r0, r5
   11cfc:	bl	10f90 <exit@plt>
   11d00:	mov	r2, #5
   11d04:	ldr	r1, [pc, #424]	; 11eb4 <close@plt+0xe4c>
   11d08:	bl	10e88 <dcgettext@plt>
   11d0c:	ldr	r2, [r4]
   11d10:	ldr	r4, [pc, #416]	; 11eb8 <close@plt+0xe50>
   11d14:	ldr	r8, [pc, #416]	; 11ebc <close@plt+0xe54>
   11d18:	mov	r6, r5
   11d1c:	mov	r1, r0
   11d20:	mov	r0, #1
   11d24:	bl	10fcc <__printf_chk@plt>
   11d28:	mov	r2, #5
   11d2c:	ldr	r1, [pc, #396]	; 11ec0 <close@plt+0xe58>
   11d30:	mov	r0, r5
   11d34:	bl	10e88 <dcgettext@plt>
   11d38:	ldr	r1, [r4]
   11d3c:	bl	10e04 <fputs_unlocked@plt>
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #376]	; 11ec4 <close@plt+0xe5c>
   11d48:	mov	r0, r5
   11d4c:	bl	10e88 <dcgettext@plt>
   11d50:	ldr	r1, [r4]
   11d54:	bl	10e04 <fputs_unlocked@plt>
   11d58:	mov	r2, #5
   11d5c:	ldr	r1, [pc, #356]	; 11ec8 <close@plt+0xe60>
   11d60:	mov	r0, r5
   11d64:	bl	10e88 <dcgettext@plt>
   11d68:	ldr	r1, [r4]
   11d6c:	bl	10e04 <fputs_unlocked@plt>
   11d70:	mov	r2, #5
   11d74:	ldr	r1, [pc, #336]	; 11ecc <close@plt+0xe64>
   11d78:	mov	r0, r5
   11d7c:	bl	10e88 <dcgettext@plt>
   11d80:	ldr	r1, [r4]
   11d84:	bl	10e04 <fputs_unlocked@plt>
   11d88:	ldr	lr, [pc, #320]	; 11ed0 <close@plt+0xe68>
   11d8c:	mov	ip, sp
   11d90:	ldm	lr!, {r0, r1, r2, r3}
   11d94:	stmia	ip!, {r0, r1, r2, r3}
   11d98:	ldm	lr!, {r0, r1, r2, r3}
   11d9c:	stmia	ip!, {r0, r1, r2, r3}
   11da0:	ldm	lr!, {r0, r1, r2, r3}
   11da4:	stmia	ip!, {r0, r1, r2, r3}
   11da8:	ldm	lr, {r0, r1}
   11dac:	stm	ip, {r0, r1}
   11db0:	ldr	r1, [sp, r6]
   11db4:	add	r7, sp, r6
   11db8:	cmp	r1, #0
   11dbc:	bne	11e60 <close@plt+0xdf8>
   11dc0:	ldr	r6, [r7, #4]
   11dc4:	ldr	r7, [pc, #240]	; 11ebc <close@plt+0xe54>
   11dc8:	cmp	r6, #0
   11dcc:	mov	r2, #5
   11dd0:	ldr	r1, [pc, #252]	; 11ed4 <close@plt+0xe6c>
   11dd4:	mov	r0, #0
   11dd8:	moveq	r6, r7
   11ddc:	bl	10e88 <dcgettext@plt>
   11de0:	ldr	r3, [pc, #240]	; 11ed8 <close@plt+0xe70>
   11de4:	ldr	r2, [pc, #240]	; 11edc <close@plt+0xe74>
   11de8:	mov	r1, r0
   11dec:	mov	r0, #1
   11df0:	bl	10fcc <__printf_chk@plt>
   11df4:	mov	r1, #0
   11df8:	mov	r0, #5
   11dfc:	bl	11008 <setlocale@plt>
   11e00:	cmp	r0, #0
   11e04:	bne	11e78 <close@plt+0xe10>
   11e08:	mov	r2, #5
   11e0c:	ldr	r1, [pc, #204]	; 11ee0 <close@plt+0xe78>
   11e10:	mov	r0, #0
   11e14:	bl	10e88 <dcgettext@plt>
   11e18:	ldr	r3, [pc, #156]	; 11ebc <close@plt+0xe54>
   11e1c:	ldr	r2, [pc, #180]	; 11ed8 <close@plt+0xe70>
   11e20:	mov	r1, r0
   11e24:	mov	r0, #1
   11e28:	bl	10fcc <__printf_chk@plt>
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #172]	; 11ee4 <close@plt+0xe7c>
   11e34:	mov	r0, #0
   11e38:	bl	10e88 <dcgettext@plt>
   11e3c:	ldr	r2, [pc, #164]	; 11ee8 <close@plt+0xe80>
   11e40:	cmp	r6, r7
   11e44:	ldr	r3, [pc, #160]	; 11eec <close@plt+0xe84>
   11e48:	moveq	r3, r2
   11e4c:	mov	r2, r6
   11e50:	mov	r1, r0
   11e54:	mov	r0, #1
   11e58:	bl	10fcc <__printf_chk@plt>
   11e5c:	b	11cf8 <close@plt+0xc90>
   11e60:	mov	r0, r8
   11e64:	bl	10e1c <strcmp@plt>
   11e68:	add	r6, r6, #8
   11e6c:	cmp	r0, #0
   11e70:	bne	11db0 <close@plt+0xd48>
   11e74:	b	11dc0 <close@plt+0xd58>
   11e78:	mov	r2, #3
   11e7c:	ldr	r1, [pc, #108]	; 11ef0 <close@plt+0xe88>
   11e80:	bl	11050 <strncmp@plt>
   11e84:	cmp	r0, #0
   11e88:	beq	11e08 <close@plt+0xda0>
   11e8c:	mov	r2, #5
   11e90:	ldr	r1, [pc, #92]	; 11ef4 <close@plt+0xe8c>
   11e94:	mov	r0, #0
   11e98:	bl	10e88 <dcgettext@plt>
   11e9c:	ldr	r1, [r4]
   11ea0:	bl	10e04 <fputs_unlocked@plt>
   11ea4:	b	11e08 <close@plt+0xda0>
   11ea8:	muleq	r2, r0, r1
   11eac:	andeq	r7, r2, r8, asr #2
   11eb0:	ldrdeq	r6, [r1], -r2
   11eb4:	strdeq	r6, [r1], -r9
   11eb8:	andeq	r7, r2, r4, asr r1
   11ebc:	andeq	r6, r1, r8, asr #5
   11ec0:	andeq	r6, r1, r7, lsl r3
   11ec4:	andeq	r6, r1, r9, lsr #8
   11ec8:	andeq	r6, r1, r6, asr r4
   11ecc:	andeq	r6, r1, ip, lsl #9
   11ed0:	muleq	r1, r8, r1
   11ed4:	andeq	r6, r1, sl, ror #10
   11ed8:	andeq	r6, r1, r1, lsl #11
   11edc:	andeq	r6, r1, r9, lsr #11
   11ee0:	andeq	r6, r1, r2, lsl #12
   11ee4:	andeq	r6, r1, sp, lsl r6
   11ee8:	andeq	r6, r1, r8, asr #15
   11eec:	andeq	r6, r1, pc, asr #12
   11ef0:			; <UNDEFINED> instruction: 0x000165b7
   11ef4:			; <UNDEFINED> instruction: 0x000165bb
   11ef8:	mov	r2, r0
   11efc:	push	{r4, lr}
   11f00:	mov	r0, r2
   11f04:	ldrb	r3, [r2]
   11f08:	add	r1, r2, #1
   11f0c:	cmp	r3, #47	; 0x2f
   11f10:	beq	11f34 <close@plt+0xecc>
   11f14:	mov	r3, #0
   11f18:	mov	lr, #1
   11f1c:	mov	r4, r3
   11f20:	mov	ip, r2
   11f24:	ldrb	r1, [r2], #1
   11f28:	cmp	r1, #0
   11f2c:	bne	11f3c <close@plt+0xed4>
   11f30:	pop	{r4, pc}
   11f34:	mov	r2, r1
   11f38:	b	11f00 <close@plt+0xe98>
   11f3c:	cmp	r1, #47	; 0x2f
   11f40:	moveq	r3, lr
   11f44:	beq	11f20 <close@plt+0xeb8>
   11f48:	cmp	r3, #0
   11f4c:	movne	r0, ip
   11f50:	movne	r3, r4
   11f54:	b	11f20 <close@plt+0xeb8>
   11f58:	push	{r4, lr}
   11f5c:	mov	r4, r0
   11f60:	bl	10f9c <strlen@plt>
   11f64:	cmp	r0, #1
   11f68:	popls	{r4, pc}
   11f6c:	sub	r3, r0, #1
   11f70:	ldrb	r2, [r4, r3]
   11f74:	cmp	r2, #47	; 0x2f
   11f78:	beq	11f80 <close@plt+0xf18>
   11f7c:	pop	{r4, pc}
   11f80:	mov	r0, r3
   11f84:	b	11f64 <close@plt+0xefc>
   11f88:	cmp	r0, r1
   11f8c:	beq	11fdc <close@plt+0xf74>
   11f90:	sub	r2, r0, #1
   11f94:	sub	r1, r1, #1
   11f98:	ldrb	r3, [r2, #1]!
   11f9c:	sub	r0, r3, #65	; 0x41
   11fa0:	cmp	r0, #25
   11fa4:	ldrb	r0, [r1, #1]!
   11fa8:	addls	r3, r3, #32
   11fac:	sub	ip, r0, #65	; 0x41
   11fb0:	cmp	ip, #25
   11fb4:	addls	r0, r0, #32
   11fb8:	uxtb	r3, r3
   11fbc:	cmp	r3, #0
   11fc0:	uxtb	r0, r0
   11fc4:	bne	11fd0 <close@plt+0xf68>
   11fc8:	sub	r0, r3, r0
   11fcc:	bx	lr
   11fd0:	cmp	r3, r0
   11fd4:	beq	11f98 <close@plt+0xf30>
   11fd8:	b	11fc8 <close@plt+0xf60>
   11fdc:	mov	r0, #0
   11fe0:	bx	lr
   11fe4:	ldr	r3, [pc, #4]	; 11ff0 <close@plt+0xf88>
   11fe8:	str	r0, [r3]
   11fec:	bx	lr
   11ff0:	andeq	r7, r2, r8, lsl #3
   11ff4:	ldr	r3, [pc, #4]	; 12000 <close@plt+0xf98>
   11ff8:	strb	r0, [r3, #4]
   11ffc:	bx	lr
   12000:	andeq	r7, r2, r8, lsl #3
   12004:	ldr	r3, [pc, #192]	; 120cc <close@plt+0x1064>
   12008:	push	{r0, r1, r4, r5, r6, lr}
   1200c:	ldr	r0, [r3]
   12010:	bl	1488c <_obstack_memory_used@@Base+0x2128>
   12014:	cmp	r0, #0
   12018:	beq	120b0 <close@plt+0x1048>
   1201c:	ldr	r3, [pc, #172]	; 120d0 <close@plt+0x1068>
   12020:	mov	r4, r3
   12024:	ldrb	r2, [r3, #4]
   12028:	cmp	r2, #0
   1202c:	beq	12040 <close@plt+0xfd8>
   12030:	bl	10fa8 <__errno_location@plt>
   12034:	ldr	r3, [r0]
   12038:	cmp	r3, #32
   1203c:	beq	120b0 <close@plt+0x1048>
   12040:	mov	r2, #5
   12044:	ldr	r1, [pc, #136]	; 120d4 <close@plt+0x106c>
   12048:	mov	r0, #0
   1204c:	bl	10e88 <dcgettext@plt>
   12050:	ldr	r4, [r4]
   12054:	cmp	r4, #0
   12058:	mov	r5, r0
   1205c:	beq	12094 <close@plt+0x102c>
   12060:	bl	10fa8 <__errno_location@plt>
   12064:	ldr	r6, [r0]
   12068:	mov	r0, r4
   1206c:	bl	13c6c <_obstack_memory_used@@Base+0x1508>
   12070:	str	r5, [sp]
   12074:	ldr	r2, [pc, #92]	; 120d8 <close@plt+0x1070>
   12078:	mov	r1, r6
   1207c:	mov	r3, r0
   12080:	mov	r0, #0
   12084:	bl	10f00 <error@plt>
   12088:	ldr	r3, [pc, #76]	; 120dc <close@plt+0x1074>
   1208c:	ldr	r0, [r3]
   12090:	bl	10e40 <_exit@plt>
   12094:	bl	10fa8 <__errno_location@plt>
   12098:	mov	r3, r5
   1209c:	ldr	r2, [pc, #60]	; 120e0 <close@plt+0x1078>
   120a0:	ldr	r1, [r0]
   120a4:	mov	r0, r4
   120a8:	bl	10f00 <error@plt>
   120ac:	b	12088 <close@plt+0x1020>
   120b0:	ldr	r3, [pc, #44]	; 120e4 <close@plt+0x107c>
   120b4:	ldr	r0, [r3]
   120b8:	bl	1488c <_obstack_memory_used@@Base+0x2128>
   120bc:	cmp	r0, #0
   120c0:	bne	12088 <close@plt+0x1020>
   120c4:	add	sp, sp, #8
   120c8:	pop	{r4, r5, r6, pc}
   120cc:	andeq	r7, r2, r4, asr r1
   120d0:	andeq	r7, r2, r8, lsl #3
   120d4:	andeq	r6, r1, r8, ror r9
   120d8:	andeq	r6, r1, r4, lsl #19
   120dc:	strdeq	r7, [r2], -r0
   120e0:	andeq	r6, r1, r8, lsl #19
   120e4:	andeq	r7, r2, r8, asr #2
   120e8:	push	{r0, r1, r2, r4, r5, lr}
   120ec:	mov	r4, r0
   120f0:	bl	10fd8 <fileno@plt>
   120f4:	cmp	r0, #0
   120f8:	mov	r0, r4
   120fc:	bge	1210c <close@plt+0x10a4>
   12100:	add	sp, sp, #12
   12104:	pop	{r4, r5, lr}
   12108:	b	10ff0 <fclose@plt>
   1210c:	bl	10f54 <__freading@plt>
   12110:	cmp	r0, #0
   12114:	bne	12150 <close@plt+0x10e8>
   12118:	mov	r0, r4
   1211c:	bl	12190 <close@plt+0x1128>
   12120:	cmp	r0, #0
   12124:	bne	12184 <close@plt+0x111c>
   12128:	mov	r5, #0
   1212c:	mov	r0, r4
   12130:	bl	10ff0 <fclose@plt>
   12134:	cmp	r5, #0
   12138:	beq	12148 <close@plt+0x10e0>
   1213c:	bl	10fa8 <__errno_location@plt>
   12140:	str	r5, [r0]
   12144:	mvn	r0, #0
   12148:	add	sp, sp, #12
   1214c:	pop	{r4, r5, pc}
   12150:	mov	r0, r4
   12154:	bl	10fd8 <fileno@plt>
   12158:	mov	r3, #1
   1215c:	str	r3, [sp]
   12160:	mov	r2, #0
   12164:	mov	r3, #0
   12168:	bl	10ec4 <lseek64@plt>
   1216c:	mvn	r3, #0
   12170:	mvn	r2, #0
   12174:	cmp	r1, r3
   12178:	cmpeq	r0, r2
   1217c:	bne	12118 <close@plt+0x10b0>
   12180:	b	12128 <close@plt+0x10c0>
   12184:	bl	10fa8 <__errno_location@plt>
   12188:	ldr	r5, [r0]
   1218c:	b	1212c <close@plt+0x10c4>
   12190:	push	{r0, r1, r4, lr}
   12194:	subs	r4, r0, #0
   12198:	bne	121ac <close@plt+0x1144>
   1219c:	mov	r0, r4
   121a0:	add	sp, sp, #8
   121a4:	pop	{r4, lr}
   121a8:	b	10e28 <fflush@plt>
   121ac:	bl	10f54 <__freading@plt>
   121b0:	cmp	r0, #0
   121b4:	beq	1219c <close@plt+0x1134>
   121b8:	ldr	r3, [r4]
   121bc:	tst	r3, #256	; 0x100
   121c0:	beq	1219c <close@plt+0x1134>
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp]
   121cc:	mov	r2, #0
   121d0:	mov	r3, #0
   121d4:	mov	r0, r4
   121d8:	bl	123bc <close@plt+0x1354>
   121dc:	b	1219c <close@plt+0x1134>
   121e0:	push	{r0, r1, r2, r4, r5, lr}
   121e4:	mov	r5, r0
   121e8:	bl	10fa8 <__errno_location@plt>
   121ec:	ldr	r3, [r0]
   121f0:	mov	r4, r0
   121f4:	str	r3, [sp]
   121f8:	str	r3, [sp, #4]
   121fc:	mov	r3, #0
   12200:	str	r3, [r0]
   12204:	mov	r0, r5
   12208:	bl	10e34 <free@plt>
   1220c:	ldr	r3, [r4]
   12210:	add	r2, sp, #8
   12214:	cmp	r3, #0
   12218:	moveq	r3, #4
   1221c:	movne	r3, #0
   12220:	add	r3, r2, r3
   12224:	ldr	r3, [r3, #-8]
   12228:	str	r3, [r4]
   1222c:	add	sp, sp, #12
   12230:	pop	{r4, r5, pc}
   12234:	push	{r4, lr}
   12238:	mov	r1, #0
   1223c:	mov	r4, r0
   12240:	ldr	r0, [pc, #48]	; 12278 <close@plt+0x1210>
   12244:	bl	10f18 <open64@plt>
   12248:	cmp	r4, r0
   1224c:	beq	12270 <close@plt+0x1208>
   12250:	cmp	r0, #0
   12254:	blt	12268 <close@plt+0x1200>
   12258:	bl	11068 <close@plt>
   1225c:	bl	10fa8 <__errno_location@plt>
   12260:	mov	r3, #9
   12264:	str	r3, [r0]
   12268:	mov	r0, #0
   1226c:	pop	{r4, pc}
   12270:	mov	r0, #1
   12274:	pop	{r4, pc}
   12278:	andeq	r6, r1, fp, lsl #19
   1227c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12280:	mov	r9, r0
   12284:	mov	r0, r2
   12288:	mov	sl, r1
   1228c:	mov	r8, r2
   12290:	bl	10fd8 <fileno@plt>
   12294:	cmp	r0, #1
   12298:	beq	12354 <close@plt+0x12ec>
   1229c:	cmp	r0, #2
   122a0:	beq	1234c <close@plt+0x12e4>
   122a4:	cmp	r0, #0
   122a8:	beq	12360 <close@plt+0x12f8>
   122ac:	mov	r1, #2
   122b0:	mov	r0, r1
   122b4:	bl	10e94 <dup2@plt>
   122b8:	subs	r4, r0, #2
   122bc:	movne	r4, #1
   122c0:	mov	r1, #1
   122c4:	mov	r0, r1
   122c8:	bl	10e94 <dup2@plt>
   122cc:	subs	r7, r0, #1
   122d0:	movne	r7, #1
   122d4:	mov	r1, #0
   122d8:	mov	r0, r1
   122dc:	bl	10e94 <dup2@plt>
   122e0:	subs	r6, r0, #0
   122e4:	bne	123a0 <close@plt+0x1338>
   122e8:	cmp	r7, #0
   122ec:	beq	12384 <close@plt+0x131c>
   122f0:	mov	r0, #1
   122f4:	bl	12234 <close@plt+0x11cc>
   122f8:	subs	r5, r0, #0
   122fc:	bne	12384 <close@plt+0x131c>
   12300:	bl	10fa8 <__errno_location@plt>
   12304:	cmp	r4, #0
   12308:	mov	r8, r0
   1230c:	ldr	r9, [r0]
   12310:	beq	1231c <close@plt+0x12b4>
   12314:	mov	r0, #2
   12318:	bl	11068 <close@plt>
   1231c:	cmp	r7, #0
   12320:	beq	1232c <close@plt+0x12c4>
   12324:	mov	r0, #1
   12328:	bl	11068 <close@plt>
   1232c:	cmp	r6, #0
   12330:	beq	1233c <close@plt+0x12d4>
   12334:	mov	r0, #0
   12338:	bl	11068 <close@plt>
   1233c:	cmp	r5, #0
   12340:	streq	r9, [r8]
   12344:	mov	r0, r5
   12348:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1234c:	mov	r4, #0
   12350:	b	122c0 <close@plt+0x1258>
   12354:	mov	r4, #0
   12358:	mov	r7, r4
   1235c:	b	122d4 <close@plt+0x126c>
   12360:	mov	r4, r0
   12364:	mov	r7, r0
   12368:	mov	r6, r0
   1236c:	mov	r2, r8
   12370:	mov	r1, sl
   12374:	mov	r0, r9
   12378:	bl	10f6c <freopen64@plt>
   1237c:	mov	r5, r0
   12380:	b	12300 <close@plt+0x1298>
   12384:	cmp	r4, #0
   12388:	beq	1236c <close@plt+0x1304>
   1238c:	mov	r0, #2
   12390:	bl	12234 <close@plt+0x11cc>
   12394:	subs	r5, r0, #0
   12398:	bne	1236c <close@plt+0x1304>
   1239c:	b	12300 <close@plt+0x1298>
   123a0:	mov	r0, #0
   123a4:	bl	12234 <close@plt+0x11cc>
   123a8:	subs	r5, r0, #0
   123ac:	mov	r6, r0
   123b0:	moveq	r6, #1
   123b4:	bne	122e8 <close@plt+0x1280>
   123b8:	b	12300 <close@plt+0x1298>
   123bc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   123c0:	mov	r4, r0
   123c4:	ldmib	r0, {ip, lr}
   123c8:	ldr	r8, [sp, #32]
   123cc:	cmp	lr, ip
   123d0:	bne	1243c <close@plt+0x13d4>
   123d4:	ldr	lr, [r0, #20]
   123d8:	ldr	ip, [r0, #16]
   123dc:	cmp	lr, ip
   123e0:	bne	1243c <close@plt+0x13d4>
   123e4:	ldr	r5, [r0, #36]	; 0x24
   123e8:	cmp	r5, #0
   123ec:	bne	1243c <close@plt+0x13d4>
   123f0:	mov	r6, r2
   123f4:	mov	r7, r3
   123f8:	bl	10fd8 <fileno@plt>
   123fc:	mov	r2, r6
   12400:	mov	r3, r7
   12404:	str	r8, [sp]
   12408:	bl	10ec4 <lseek64@plt>
   1240c:	mvn	r3, #0
   12410:	mvn	r2, #0
   12414:	cmp	r1, r3
   12418:	cmpeq	r0, r2
   1241c:	mvneq	r0, #0
   12420:	ldrne	r3, [r4]
   12424:	strdne	r0, [r4, #80]	; 0x50
   12428:	movne	r0, r5
   1242c:	bicne	r3, r3, #16
   12430:	strne	r3, [r4]
   12434:	add	sp, sp, #8
   12438:	pop	{r4, r5, r6, r7, r8, pc}
   1243c:	str	r8, [sp, #32]
   12440:	mov	r0, r4
   12444:	add	sp, sp, #8
   12448:	pop	{r4, r5, r6, r7, r8, lr}
   1244c:	b	10ffc <fseeko64@plt>
   12450:	ldr	r3, [pc, #52]	; 1248c <close@plt+0x1424>
   12454:	push	{r4, lr}
   12458:	mov	r2, #5
   1245c:	ldr	r1, [pc, #44]	; 12490 <close@plt+0x1428>
   12460:	mov	r0, #0
   12464:	ldr	r4, [r3]
   12468:	bl	10e88 <dcgettext@plt>
   1246c:	ldr	r2, [pc, #32]	; 12494 <close@plt+0x142c>
   12470:	mov	r1, #1
   12474:	mov	r3, r0
   12478:	mov	r0, r4
   1247c:	bl	10fe4 <__fprintf_chk@plt>
   12480:	ldr	r3, [pc, #16]	; 12498 <close@plt+0x1430>
   12484:	ldr	r0, [r3]
   12488:	bl	10f90 <exit@plt>
   1248c:	andeq	r7, r2, r8, asr #2
   12490:	muleq	r1, r5, r9
   12494:	andeq	r6, r1, r1, lsr #21
   12498:	strdeq	r7, [r2], -r0
   1249c:	mov	r3, r0
   124a0:	mov	r0, r1
   124a4:	ldrb	r2, [r3, #40]	; 0x28
   124a8:	tst	r2, #1
   124ac:	beq	124bc <close@plt+0x1454>
   124b0:	ldr	r2, [r3, #28]
   124b4:	ldr	r0, [r3, #36]	; 0x24
   124b8:	bx	r2
   124bc:	ldr	r3, [r3, #28]
   124c0:	bx	r3
   124c4:	mov	r3, r0
   124c8:	mov	r0, r1
   124cc:	ldrb	r2, [r3, #40]	; 0x28
   124d0:	tst	r2, #1
   124d4:	beq	124e4 <close@plt+0x147c>
   124d8:	ldr	r2, [r3, #32]
   124dc:	ldr	r0, [r3, #36]	; 0x24
   124e0:	bx	r2
   124e4:	ldr	r3, [r3, #32]
   124e8:	bx	r3
   124ec:	cmp	r2, #0
   124f0:	ldr	r3, [pc, #128]	; 12578 <close@plt+0x1510>
   124f4:	push	{r4, r5, r6, lr}
   124f8:	movne	r5, r2
   124fc:	moveq	r5, #8
   12500:	cmp	r1, #0
   12504:	moveq	r1, r3
   12508:	sub	r6, r5, #1
   1250c:	str	r1, [r0]
   12510:	str	r6, [r0, #24]
   12514:	mov	r4, r0
   12518:	bl	1249c <close@plt+0x1434>
   1251c:	cmp	r0, #0
   12520:	str	r0, [r4, #4]
   12524:	bne	12534 <close@plt+0x14cc>
   12528:	ldr	r3, [pc, #76]	; 1257c <close@plt+0x1514>
   1252c:	ldr	r3, [r3]
   12530:	blx	r3
   12534:	add	r3, r0, #8
   12538:	add	r3, r3, r6
   1253c:	rsb	r2, r5, #0
   12540:	and	r2, r2, r3
   12544:	ldr	r3, [r4]
   12548:	str	r2, [r4, #8]
   1254c:	add	r3, r0, r3
   12550:	str	r2, [r4, #12]
   12554:	str	r3, [r0]
   12558:	str	r3, [r4, #16]
   1255c:	mov	r3, #0
   12560:	str	r3, [r0, #4]
   12564:	ldrb	r3, [r4, #40]	; 0x28
   12568:	mov	r0, #1
   1256c:	and	r3, r3, #249	; 0xf9
   12570:	strb	r3, [r4, #40]	; 0x28
   12574:	pop	{r4, r5, r6, pc}
   12578:	andeq	r0, r0, r8, ror #31
   1257c:	strdeq	r7, [r2], -r4

00012580 <_obstack_begin@@Base>:
   12580:	str	r3, [r0, #28]
   12584:	ldr	r3, [sp]
   12588:	str	r3, [r0, #32]
   1258c:	ldrb	r3, [r0, #40]	; 0x28
   12590:	bic	r3, r3, #1
   12594:	strb	r3, [r0, #40]	; 0x28
   12598:	b	124ec <close@plt+0x1484>

0001259c <_obstack_begin_1@@Base>:
   1259c:	str	r3, [r0, #28]
   125a0:	ldr	r3, [sp]
   125a4:	str	r3, [r0, #32]
   125a8:	ldr	r3, [sp, #4]
   125ac:	str	r3, [r0, #36]	; 0x24
   125b0:	ldrb	r3, [r0, #40]	; 0x28
   125b4:	orr	r3, r3, #1
   125b8:	strb	r3, [r0, #40]	; 0x28
   125bc:	b	124ec <close@plt+0x1484>

000125c0 <_obstack_newchunk@@Base>:
   125c0:	push	{r4, r5, r6, r7, r8, lr}
   125c4:	ldr	r3, [r0, #8]
   125c8:	ldr	r5, [r0, #12]
   125cc:	sub	r6, r5, r3
   125d0:	ldr	r3, [r0, #24]
   125d4:	add	r1, r6, r1
   125d8:	adds	r3, r1, r3
   125dc:	movcc	r2, #1
   125e0:	movcs	r2, #0
   125e4:	cmp	r6, r1
   125e8:	movhi	r1, #0
   125ec:	andls	r1, r2, #1
   125f0:	cmp	r1, #0
   125f4:	bne	12604 <_obstack_newchunk@@Base+0x44>
   125f8:	ldr	r3, [pc, #196]	; 126c4 <_obstack_newchunk@@Base+0x104>
   125fc:	ldr	r3, [r3]
   12600:	blx	r3
   12604:	ldr	r2, [r0]
   12608:	add	r5, r3, r6, lsr #3
   1260c:	cmp	r3, r2
   12610:	add	r5, r5, #100	; 0x64
   12614:	movcc	r3, r2
   12618:	cmp	r3, r5
   1261c:	movcs	r5, r3
   12620:	mov	r1, r5
   12624:	mov	r4, r0
   12628:	ldr	r8, [r0, #4]
   1262c:	bl	1249c <close@plt+0x1434>
   12630:	subs	r7, r0, #0
   12634:	beq	125f8 <_obstack_newchunk@@Base+0x38>
   12638:	mov	r3, r7
   1263c:	add	r5, r7, r5
   12640:	str	r7, [r4, #4]
   12644:	str	r8, [r7, #4]
   12648:	str	r5, [r4, #16]
   1264c:	str	r5, [r3], #8
   12650:	ldr	r5, [r4, #24]
   12654:	mov	r2, r6
   12658:	add	r3, r3, r5
   1265c:	bic	r5, r3, r5
   12660:	ldr	r1, [r4, #8]
   12664:	mov	r0, r5
   12668:	bl	10e4c <memcpy@plt>
   1266c:	ldrb	r3, [r4, #40]	; 0x28
   12670:	tst	r3, #2
   12674:	bne	126a8 <_obstack_newchunk@@Base+0xe8>
   12678:	ldr	r2, [r4, #24]
   1267c:	add	r3, r8, #8
   12680:	add	r3, r3, r2
   12684:	bic	r3, r3, r2
   12688:	ldr	r2, [r4, #8]
   1268c:	cmp	r2, r3
   12690:	bne	126a8 <_obstack_newchunk@@Base+0xe8>
   12694:	ldr	r3, [r8, #4]
   12698:	mov	r1, r8
   1269c:	str	r3, [r7, #4]
   126a0:	mov	r0, r4
   126a4:	bl	124c4 <close@plt+0x145c>
   126a8:	ldrb	r3, [r4, #40]	; 0x28
   126ac:	str	r5, [r4, #8]
   126b0:	add	r5, r5, r6
   126b4:	bic	r3, r3, #2
   126b8:	str	r5, [r4, #12]
   126bc:	strb	r3, [r4, #40]	; 0x28
   126c0:	pop	{r4, r5, r6, r7, r8, pc}
   126c4:	strdeq	r7, [r2], -r4

000126c8 <_obstack_allocated_p@@Base>:
   126c8:	ldr	r0, [r0, #4]
   126cc:	cmp	r0, #0
   126d0:	beq	126e8 <_obstack_allocated_p@@Base+0x20>
   126d4:	cmp	r0, r1
   126d8:	bcs	126c8 <_obstack_allocated_p@@Base>
   126dc:	ldr	r3, [r0]
   126e0:	cmp	r1, r3
   126e4:	bhi	126c8 <_obstack_allocated_p@@Base>
   126e8:	adds	r0, r0, #0
   126ec:	movne	r0, #1
   126f0:	bx	lr

000126f4 <_obstack_free@@Base>:
   126f4:	push	{r4, r5, r6, lr}
   126f8:	mov	r5, r1
   126fc:	ldr	r1, [r0, #4]
   12700:	mov	r4, r0
   12704:	cmp	r1, #0
   12708:	beq	12758 <_obstack_free@@Base+0x64>
   1270c:	cmp	r1, r5
   12710:	bcs	12734 <_obstack_free@@Base+0x40>
   12714:	ldr	r3, [r1]
   12718:	cmp	r5, r3
   1271c:	bhi	12734 <_obstack_free@@Base+0x40>
   12720:	str	r5, [r4, #12]
   12724:	str	r5, [r4, #8]
   12728:	str	r3, [r4, #16]
   1272c:	str	r1, [r4, #4]
   12730:	pop	{r4, r5, r6, pc}
   12734:	mov	r0, r4
   12738:	ldr	r6, [r1, #4]
   1273c:	bl	124c4 <close@plt+0x145c>
   12740:	ldrb	r3, [r4, #40]	; 0x28
   12744:	mov	r1, r6
   12748:	orr	r3, r3, #2
   1274c:	strb	r3, [r4, #40]	; 0x28
   12750:	b	12704 <_obstack_free@@Base+0x10>
   12754:	bl	1105c <abort@plt>
   12758:	cmp	r5, #0
   1275c:	bne	12754 <_obstack_free@@Base+0x60>
   12760:	pop	{r4, r5, r6, pc}

00012764 <_obstack_memory_used@@Base>:
   12764:	ldr	r3, [r0, #4]
   12768:	mov	r0, #0
   1276c:	cmp	r3, #0
   12770:	bne	12778 <_obstack_memory_used@@Base+0x14>
   12774:	bx	lr
   12778:	ldr	r2, [r3]
   1277c:	sub	r2, r2, r3
   12780:	add	r0, r0, r2
   12784:	ldr	r3, [r3, #4]
   12788:	b	1276c <_obstack_memory_used@@Base+0x8>
   1278c:	push	{r4, r5, r6, lr}
   12790:	subs	r5, r0, #0
   12794:	bne	127ac <_obstack_memory_used@@Base+0x48>
   12798:	ldr	r3, [pc, #124]	; 1281c <_obstack_memory_used@@Base+0xb8>
   1279c:	ldr	r0, [pc, #124]	; 12820 <_obstack_memory_used@@Base+0xbc>
   127a0:	ldr	r1, [r3]
   127a4:	bl	11044 <fputs@plt>
   127a8:	bl	1105c <abort@plt>
   127ac:	mov	r1, #47	; 0x2f
   127b0:	bl	11014 <strrchr@plt>
   127b4:	cmp	r0, #0
   127b8:	addne	r4, r0, #1
   127bc:	moveq	r4, r5
   127c0:	sub	r3, r4, r5
   127c4:	cmp	r3, #6
   127c8:	ble	12808 <_obstack_memory_used@@Base+0xa4>
   127cc:	mov	r2, #7
   127d0:	ldr	r1, [pc, #76]	; 12824 <_obstack_memory_used@@Base+0xc0>
   127d4:	sub	r0, r4, #7
   127d8:	bl	11050 <strncmp@plt>
   127dc:	cmp	r0, #0
   127e0:	bne	12808 <_obstack_memory_used@@Base+0xa4>
   127e4:	mov	r2, #3
   127e8:	ldr	r1, [pc, #56]	; 12828 <_obstack_memory_used@@Base+0xc4>
   127ec:	mov	r0, r4
   127f0:	bl	11050 <strncmp@plt>
   127f4:	cmp	r0, #0
   127f8:	movne	r5, r4
   127fc:	ldreq	r3, [pc, #40]	; 1282c <_obstack_memory_used@@Base+0xc8>
   12800:	addeq	r5, r4, #3
   12804:	streq	r5, [r3]
   12808:	ldr	r3, [pc, #32]	; 12830 <_obstack_memory_used@@Base+0xcc>
   1280c:	str	r5, [r3]
   12810:	ldr	r3, [pc, #28]	; 12834 <_obstack_memory_used@@Base+0xd0>
   12814:	str	r5, [r3]
   12818:	pop	{r4, r5, r6, pc}
   1281c:	andeq	r7, r2, r8, asr #2
   12820:	andeq	r6, r1, r6, lsr #19
   12824:	ldrdeq	r6, [r1], -lr
   12828:	andeq	r6, r1, r6, ror #19
   1282c:	andeq	r7, r2, r8, lsr r1
   12830:	muleq	r2, r0, r1
   12834:	andeq	r7, r2, ip, lsr r1
   12838:	push	{r4, r5, r6, lr}
   1283c:	mov	r2, #48	; 0x30
   12840:	mov	r5, r1
   12844:	mov	r1, #0
   12848:	mov	r4, r0
   1284c:	bl	10fc0 <memset@plt>
   12850:	cmp	r5, #10
   12854:	bne	1285c <_obstack_memory_used@@Base+0xf8>
   12858:	bl	1105c <abort@plt>
   1285c:	str	r5, [r4]
   12860:	mov	r0, r4
   12864:	pop	{r4, r5, r6, pc}
   12868:	push	{r4, r5, r6, lr}
   1286c:	mov	r4, r0
   12870:	mov	r5, r1
   12874:	bl	148fc <_obstack_memory_used@@Base+0x2198>
   12878:	ldrb	r3, [r0]
   1287c:	bic	r3, r3, #32
   12880:	cmp	r3, #85	; 0x55
   12884:	bne	128f4 <_obstack_memory_used@@Base+0x190>
   12888:	ldrb	r3, [r0, #1]
   1288c:	bic	r3, r3, #32
   12890:	cmp	r3, #84	; 0x54
   12894:	bne	128cc <_obstack_memory_used@@Base+0x168>
   12898:	ldrb	r3, [r0, #2]
   1289c:	bic	r3, r3, #32
   128a0:	cmp	r3, #70	; 0x46
   128a4:	bne	128cc <_obstack_memory_used@@Base+0x168>
   128a8:	ldrb	r3, [r0, #3]
   128ac:	cmp	r3, #45	; 0x2d
   128b0:	bne	128cc <_obstack_memory_used@@Base+0x168>
   128b4:	ldrb	r3, [r0, #4]
   128b8:	cmp	r3, #56	; 0x38
   128bc:	bne	128cc <_obstack_memory_used@@Base+0x168>
   128c0:	ldrb	r3, [r0, #5]
   128c4:	cmp	r3, #0
   128c8:	beq	128e0 <_obstack_memory_used@@Base+0x17c>
   128cc:	ldr	r1, [pc, #144]	; 12964 <_obstack_memory_used@@Base+0x200>
   128d0:	ldr	r0, [pc, #144]	; 12968 <_obstack_memory_used@@Base+0x204>
   128d4:	cmp	r5, #9
   128d8:	movne	r0, r1
   128dc:	pop	{r4, r5, r6, pc}
   128e0:	ldrb	r3, [r4]
   128e4:	ldr	r1, [pc, #128]	; 1296c <_obstack_memory_used@@Base+0x208>
   128e8:	ldr	r0, [pc, #128]	; 12970 <_obstack_memory_used@@Base+0x20c>
   128ec:	cmp	r3, #96	; 0x60
   128f0:	b	128d8 <_obstack_memory_used@@Base+0x174>
   128f4:	cmp	r3, #71	; 0x47
   128f8:	bne	128cc <_obstack_memory_used@@Base+0x168>
   128fc:	ldrb	r3, [r0, #1]
   12900:	bic	r3, r3, #32
   12904:	cmp	r3, #66	; 0x42
   12908:	bne	128cc <_obstack_memory_used@@Base+0x168>
   1290c:	ldrb	r3, [r0, #2]
   12910:	cmp	r3, #49	; 0x31
   12914:	bne	128cc <_obstack_memory_used@@Base+0x168>
   12918:	ldrb	r3, [r0, #3]
   1291c:	cmp	r3, #56	; 0x38
   12920:	bne	128cc <_obstack_memory_used@@Base+0x168>
   12924:	ldrb	r3, [r0, #4]
   12928:	cmp	r3, #48	; 0x30
   1292c:	bne	128cc <_obstack_memory_used@@Base+0x168>
   12930:	ldrb	r3, [r0, #5]
   12934:	cmp	r3, #51	; 0x33
   12938:	bne	128cc <_obstack_memory_used@@Base+0x168>
   1293c:	ldrb	r3, [r0, #6]
   12940:	cmp	r3, #48	; 0x30
   12944:	bne	128cc <_obstack_memory_used@@Base+0x168>
   12948:	ldrb	r3, [r0, #7]
   1294c:	cmp	r3, #0
   12950:	bne	128cc <_obstack_memory_used@@Base+0x168>
   12954:	ldrb	r3, [r4]
   12958:	ldr	r1, [pc, #20]	; 12974 <_obstack_memory_used@@Base+0x210>
   1295c:	ldr	r0, [pc, #20]	; 12978 <_obstack_memory_used@@Base+0x214>
   12960:	b	128ec <_obstack_memory_used@@Base+0x188>
   12964:	andeq	r6, r1, r2, lsl #13
   12968:	andeq	r6, r1, pc, asr #20
   1296c:	andeq	r6, r1, r4, asr #20
   12970:	andeq	r6, r1, r0, asr #20
   12974:	andeq	r6, r1, ip, asr #20
   12978:	andeq	r6, r1, r8, asr #20
   1297c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12980:	sub	sp, sp, #108	; 0x6c
   12984:	mov	r8, r0
   12988:	str	r3, [sp, #36]	; 0x24
   1298c:	mov	r5, r1
   12990:	str	r2, [sp, #44]	; 0x2c
   12994:	ldr	sl, [sp, #144]	; 0x90
   12998:	bl	10ed0 <__ctype_get_mb_cur_max@plt>
   1299c:	ldr	r3, [sp, #148]	; 0x94
   129a0:	mov	r7, #0
   129a4:	str	r7, [sp, #48]	; 0x30
   129a8:	lsr	r6, r3, #1
   129ac:	and	r6, r6, #1
   129b0:	mov	r3, #1
   129b4:	str	r3, [sp, #72]	; 0x48
   129b8:	str	r7, [sp, #24]
   129bc:	str	r7, [sp, #32]
   129c0:	str	r7, [sp, #40]	; 0x28
   129c4:	str	r7, [sp, #60]	; 0x3c
   129c8:	str	r0, [sp, #76]	; 0x4c
   129cc:	cmp	sl, #10
   129d0:	ldrls	pc, [pc, sl, lsl #2]
   129d4:	b	12c10 <_obstack_memory_used@@Base+0x4ac>
   129d8:	andeq	r2, r1, r4, lsl #20
   129dc:	muleq	r1, r8, r6
   129e0:	ldrdeq	r2, [r1], -ip
   129e4:	andeq	r2, r1, r8, lsr #24
   129e8:			; <UNDEFINED> instruction: 0x00012bb8
   129ec:	andeq	r2, r1, r0, lsl sl
   129f0:	andeq	r3, r1, r8, ror r6
   129f4:	andeq	r2, r1, r4, lsl ip
   129f8:	andeq	r2, r1, r8, lsl #22
   129fc:	andeq	r2, r1, r8, lsl #22
   12a00:	andeq	r2, r1, r8, lsl #22
   12a04:	mov	r6, #0
   12a08:	mov	r4, #0
   12a0c:	b	12a3c <_obstack_memory_used@@Base+0x2d8>
   12a10:	cmp	r6, #0
   12a14:	bne	12c38 <_obstack_memory_used@@Base+0x4d4>
   12a18:	cmp	r5, #0
   12a1c:	movne	r3, #34	; 0x22
   12a20:	strbne	r3, [r8]
   12a24:	mov	r3, #1
   12a28:	str	r3, [sp, #24]
   12a2c:	str	r3, [sp, #32]
   12a30:	mov	r4, #1
   12a34:	ldr	r3, [pc, #3172]	; 136a0 <_obstack_memory_used@@Base+0xf3c>
   12a38:	str	r3, [sp, #40]	; 0x28
   12a3c:	mov	r9, r5
   12a40:	mov	r3, #0
   12a44:	str	r7, [sp, #68]	; 0x44
   12a48:	str	r3, [sp, #28]
   12a4c:	ldr	r3, [sp, #36]	; 0x24
   12a50:	cmn	r3, #1
   12a54:	bne	135e4 <_obstack_memory_used@@Base+0xe80>
   12a58:	ldr	r3, [sp, #44]	; 0x2c
   12a5c:	ldr	r2, [sp, #28]
   12a60:	ldrb	r3, [r3, r2]
   12a64:	adds	r3, r3, #0
   12a68:	movne	r3, #1
   12a6c:	str	r3, [sp, #52]	; 0x34
   12a70:	ldr	r3, [sp, #52]	; 0x34
   12a74:	cmp	r3, #0
   12a78:	bne	12c60 <_obstack_memory_used@@Base+0x4fc>
   12a7c:	sub	r2, sl, #2
   12a80:	clz	r2, r2
   12a84:	lsr	r2, r2, #5
   12a88:	and	r3, r6, r2
   12a8c:	cmp	r4, #0
   12a90:	movne	r3, #0
   12a94:	andeq	r3, r3, #1
   12a98:	cmp	r3, #0
   12a9c:	bne	12e28 <_obstack_memory_used@@Base+0x6c4>
   12aa0:	eor	r3, r6, #1
   12aa4:	ands	r2, r2, r3
   12aa8:	beq	1361c <_obstack_memory_used@@Base+0xeb8>
   12aac:	ldr	r3, [sp, #68]	; 0x44
   12ab0:	cmp	r3, #0
   12ab4:	beq	13654 <_obstack_memory_used@@Base+0xef0>
   12ab8:	ldr	r3, [sp, #72]	; 0x48
   12abc:	cmp	r3, #0
   12ac0:	beq	135f8 <_obstack_memory_used@@Base+0xe94>
   12ac4:	ldr	r3, [sp, #160]	; 0xa0
   12ac8:	ldr	r2, [sp, #44]	; 0x2c
   12acc:	str	r3, [sp, #16]
   12ad0:	ldr	r3, [sp, #156]	; 0x9c
   12ad4:	ldr	r1, [sp, #60]	; 0x3c
   12ad8:	str	r3, [sp, #12]
   12adc:	ldr	r3, [sp, #152]	; 0x98
   12ae0:	str	r3, [sp, #8]
   12ae4:	ldr	r3, [sp, #148]	; 0x94
   12ae8:	str	r3, [sp, #4]
   12aec:	mov	r3, #5
   12af0:	str	r3, [sp]
   12af4:	ldr	r3, [sp, #36]	; 0x24
   12af8:	mov	r0, r8
   12afc:	bl	1297c <_obstack_memory_used@@Base+0x218>
   12b00:	mov	r4, r0
   12b04:	b	13648 <_obstack_memory_used@@Base+0xee4>
   12b08:	cmp	sl, #10
   12b0c:	beq	12b68 <_obstack_memory_used@@Base+0x404>
   12b10:	ldr	r4, [pc, #2956]	; 136a4 <_obstack_memory_used@@Base+0xf40>
   12b14:	mov	r2, #5
   12b18:	mov	r1, r4
   12b1c:	mov	r0, #0
   12b20:	bl	10e88 <dcgettext@plt>
   12b24:	cmp	r0, r4
   12b28:	str	r0, [sp, #156]	; 0x9c
   12b2c:	bne	12b3c <_obstack_memory_used@@Base+0x3d8>
   12b30:	mov	r1, sl
   12b34:	bl	12868 <_obstack_memory_used@@Base+0x104>
   12b38:	str	r0, [sp, #156]	; 0x9c
   12b3c:	ldr	r4, [pc, #2916]	; 136a8 <_obstack_memory_used@@Base+0xf44>
   12b40:	mov	r2, #5
   12b44:	mov	r1, r4
   12b48:	mov	r0, #0
   12b4c:	bl	10e88 <dcgettext@plt>
   12b50:	cmp	r0, r4
   12b54:	str	r0, [sp, #160]	; 0xa0
   12b58:	bne	12b68 <_obstack_memory_used@@Base+0x404>
   12b5c:	mov	r1, sl
   12b60:	bl	12868 <_obstack_memory_used@@Base+0x104>
   12b64:	str	r0, [sp, #160]	; 0xa0
   12b68:	cmp	r6, #0
   12b6c:	moveq	r4, r6
   12b70:	beq	12b88 <_obstack_memory_used@@Base+0x424>
   12b74:	mov	r4, #0
   12b78:	b	12b98 <_obstack_memory_used@@Base+0x434>
   12b7c:	cmp	r5, r4
   12b80:	strbhi	r3, [r8, r4]
   12b84:	add	r4, r4, #1
   12b88:	ldr	r3, [sp, #156]	; 0x9c
   12b8c:	ldrb	r3, [r3, r4]
   12b90:	cmp	r3, #0
   12b94:	bne	12b7c <_obstack_memory_used@@Base+0x418>
   12b98:	ldr	r0, [sp, #160]	; 0xa0
   12b9c:	bl	10f9c <strlen@plt>
   12ba0:	ldr	r3, [sp, #160]	; 0xa0
   12ba4:	str	r3, [sp, #40]	; 0x28
   12ba8:	mov	r3, #1
   12bac:	str	r3, [sp, #24]
   12bb0:	str	r0, [sp, #32]
   12bb4:	b	12a3c <_obstack_memory_used@@Base+0x2d8>
   12bb8:	mov	r3, #1
   12bbc:	cmp	r6, #0
   12bc0:	streq	r3, [sp, #24]
   12bc4:	beq	12be4 <_obstack_memory_used@@Base+0x480>
   12bc8:	str	r3, [sp, #32]
   12bcc:	ldr	r3, [pc, #2772]	; 136a8 <_obstack_memory_used@@Base+0xf44>
   12bd0:	mov	r4, #0
   12bd4:	str	r3, [sp, #40]	; 0x28
   12bd8:	b	12c08 <_obstack_memory_used@@Base+0x4a4>
   12bdc:	cmp	r6, #0
   12be0:	bne	12c50 <_obstack_memory_used@@Base+0x4ec>
   12be4:	cmp	r5, #0
   12be8:	movne	r3, #39	; 0x27
   12bec:	strbne	r3, [r8]
   12bf0:	mov	r3, #1
   12bf4:	str	r3, [sp, #32]
   12bf8:	mov	r6, #0
   12bfc:	ldr	r3, [pc, #2724]	; 136a8 <_obstack_memory_used@@Base+0xf44>
   12c00:	mov	r4, #1
   12c04:	str	r3, [sp, #40]	; 0x28
   12c08:	mov	sl, #2
   12c0c:	b	12a3c <_obstack_memory_used@@Base+0x2d8>
   12c10:	bl	1105c <abort@plt>
   12c14:	mov	r6, #0
   12c18:	mov	r3, #1
   12c1c:	str	r3, [sp, #24]
   12c20:	mov	r4, r6
   12c24:	b	12a3c <_obstack_memory_used@@Base+0x2d8>
   12c28:	mov	r6, #1
   12c2c:	str	r6, [sp, #24]
   12c30:	str	r6, [sp, #32]
   12c34:	b	12bcc <_obstack_memory_used@@Base+0x468>
   12c38:	mov	r3, #1
   12c3c:	str	r3, [sp, #32]
   12c40:	ldr	r3, [pc, #2648]	; 136a0 <_obstack_memory_used@@Base+0xf3c>
   12c44:	str	r6, [sp, #24]
   12c48:	str	r3, [sp, #40]	; 0x28
   12c4c:	b	12a08 <_obstack_memory_used@@Base+0x2a4>
   12c50:	mov	r3, #1
   12c54:	str	r3, [sp, #32]
   12c58:	ldr	r3, [pc, #2632]	; 136a8 <_obstack_memory_used@@Base+0xf44>
   12c5c:	b	12c48 <_obstack_memory_used@@Base+0x4e4>
   12c60:	ldr	r3, [sp, #32]
   12c64:	ldr	fp, [sp, #24]
   12c68:	cmp	sl, #2
   12c6c:	moveq	fp, #0
   12c70:	andne	fp, fp, #1
   12c74:	adds	r5, r3, #0
   12c78:	movne	r5, #1
   12c7c:	ands	r3, r5, fp
   12c80:	str	r3, [sp, #64]	; 0x40
   12c84:	beq	12d54 <_obstack_memory_used@@Base+0x5f0>
   12c88:	ldr	r2, [sp, #32]
   12c8c:	ldr	r3, [sp, #28]
   12c90:	add	r7, r3, r2
   12c94:	mov	r3, r2
   12c98:	ldr	r2, [sp, #36]	; 0x24
   12c9c:	cmp	r3, #1
   12ca0:	movls	r3, #0
   12ca4:	movhi	r3, #1
   12ca8:	cmn	r2, #1
   12cac:	movne	r3, #0
   12cb0:	cmp	r3, #0
   12cb4:	beq	12cc4 <_obstack_memory_used@@Base+0x560>
   12cb8:	ldr	r0, [sp, #44]	; 0x2c
   12cbc:	bl	10f9c <strlen@plt>
   12cc0:	str	r0, [sp, #36]	; 0x24
   12cc4:	ldr	r3, [sp, #36]	; 0x24
   12cc8:	cmp	r3, r7
   12ccc:	bcc	12d4c <_obstack_memory_used@@Base+0x5e8>
   12cd0:	ldr	r3, [sp, #44]	; 0x2c
   12cd4:	ldr	r0, [sp, #28]
   12cd8:	ldr	r2, [sp, #32]
   12cdc:	ldr	r1, [sp, #40]	; 0x28
   12ce0:	add	r0, r3, r0
   12ce4:	bl	10e70 <memcmp@plt>
   12ce8:	cmp	r0, #0
   12cec:	bne	12d4c <_obstack_memory_used@@Base+0x5e8>
   12cf0:	cmp	r6, #0
   12cf4:	beq	12d54 <_obstack_memory_used@@Base+0x5f0>
   12cf8:	str	r6, [sp, #24]
   12cfc:	ldr	r3, [sp, #24]
   12d00:	ldr	r2, [sp, #44]	; 0x2c
   12d04:	cmp	sl, #2
   12d08:	movne	r3, #0
   12d0c:	andeq	r3, r3, #1
   12d10:	cmp	r3, #0
   12d14:	ldr	r3, [sp, #160]	; 0xa0
   12d18:	movne	sl, #4
   12d1c:	str	r3, [sp, #16]
   12d20:	ldr	r3, [sp, #156]	; 0x9c
   12d24:	str	sl, [sp]
   12d28:	str	r3, [sp, #12]
   12d2c:	mov	r3, #0
   12d30:	str	r3, [sp, #8]
   12d34:	ldr	r3, [sp, #148]	; 0x94
   12d38:	mov	r1, r9
   12d3c:	bic	r3, r3, #2
   12d40:	str	r3, [sp, #4]
   12d44:	ldr	r3, [sp, #36]	; 0x24
   12d48:	b	12af8 <_obstack_memory_used@@Base+0x394>
   12d4c:	mov	r3, #0
   12d50:	str	r3, [sp, #64]	; 0x40
   12d54:	ldr	r2, [sp, #28]
   12d58:	ldr	r3, [sp, #44]	; 0x2c
   12d5c:	add	r3, r3, r2
   12d60:	str	r3, [sp, #80]	; 0x50
   12d64:	ldr	r3, [sp, #44]	; 0x2c
   12d68:	ldrb	r7, [r3, r2]
   12d6c:	cmp	r7, #58	; 0x3a
   12d70:	bhi	12ed8 <_obstack_memory_used@@Base+0x774>
   12d74:	cmp	r7, #43	; 0x2b
   12d78:	bcs	12f2c <_obstack_memory_used@@Base+0x7c8>
   12d7c:	cmp	r7, #32
   12d80:	beq	12f84 <_obstack_memory_used@@Base+0x820>
   12d84:	bhi	12e30 <_obstack_memory_used@@Base+0x6cc>
   12d88:	cmp	r7, #9
   12d8c:	beq	13238 <_obstack_memory_used@@Base+0xad4>
   12d90:	bhi	12df4 <_obstack_memory_used@@Base+0x690>
   12d94:	cmp	r7, #7
   12d98:	beq	132e4 <_obstack_memory_used@@Base+0xb80>
   12d9c:	bhi	12fa0 <_obstack_memory_used@@Base+0x83c>
   12da0:	cmp	r7, #0
   12da4:	beq	12fbc <_obstack_memory_used@@Base+0x858>
   12da8:	ldr	r3, [sp, #76]	; 0x4c
   12dac:	cmp	r3, #1
   12db0:	bne	13328 <_obstack_memory_used@@Base+0xbc4>
   12db4:	bl	10f84 <__ctype_b_loc@plt>
   12db8:	sxth	r3, r7
   12dbc:	lsl	r3, r3, #1
   12dc0:	ldr	r2, [r0]
   12dc4:	ldrh	r5, [r2, r3]
   12dc8:	ldr	r3, [sp, #76]	; 0x4c
   12dcc:	str	r3, [sp, #56]	; 0x38
   12dd0:	lsr	r5, r5, #14
   12dd4:	and	r5, r5, #1
   12dd8:	ldr	r3, [sp, #24]
   12ddc:	eor	fp, r5, #1
   12de0:	and	fp, fp, r3
   12de4:	ands	fp, fp, #255	; 0xff
   12de8:	beq	13170 <_obstack_memory_used@@Base+0xa0c>
   12dec:	mov	r5, #0
   12df0:	b	133d4 <_obstack_memory_used@@Base+0xc70>
   12df4:	cmp	r7, #11
   12df8:	beq	13240 <_obstack_memory_used@@Base+0xadc>
   12dfc:	bcc	132dc <_obstack_memory_used@@Base+0xb78>
   12e00:	cmp	r7, #12
   12e04:	beq	132ec <_obstack_memory_used@@Base+0xb88>
   12e08:	cmp	r7, #13
   12e0c:	moveq	r3, #114	; 0x72
   12e10:	bne	12da8 <_obstack_memory_used@@Base+0x644>
   12e14:	cmp	sl, #2
   12e18:	movne	r2, #0
   12e1c:	andeq	r2, r6, #1
   12e20:	cmp	r2, #0
   12e24:	beq	12fa4 <_obstack_memory_used@@Base+0x840>
   12e28:	mov	sl, #2
   12e2c:	b	12cfc <_obstack_memory_used@@Base+0x598>
   12e30:	cmp	r7, #37	; 0x25
   12e34:	beq	12f2c <_obstack_memory_used@@Base+0x7c8>
   12e38:	bhi	12e4c <_obstack_memory_used@@Base+0x6e8>
   12e3c:	cmp	r7, #35	; 0x23
   12e40:	beq	12f78 <_obstack_memory_used@@Base+0x814>
   12e44:	mov	r5, #0
   12e48:	b	12f88 <_obstack_memory_used@@Base+0x824>
   12e4c:	cmp	r7, #39	; 0x27
   12e50:	bne	12e44 <_obstack_memory_used@@Base+0x6e0>
   12e54:	cmp	sl, #2
   12e58:	ldrne	r5, [sp, #52]	; 0x34
   12e5c:	movne	r3, r5
   12e60:	strne	r3, [sp, #68]	; 0x44
   12e64:	bne	12f30 <_obstack_memory_used@@Base+0x7cc>
   12e68:	cmp	r6, #0
   12e6c:	bne	12cfc <_obstack_memory_used@@Base+0x598>
   12e70:	ldr	r2, [sp, #60]	; 0x3c
   12e74:	adds	r3, r9, #0
   12e78:	movne	r3, #1
   12e7c:	cmp	r2, #0
   12e80:	movne	r3, #0
   12e84:	cmp	r3, #0
   12e88:	strne	r9, [sp, #60]	; 0x3c
   12e8c:	movne	r9, #0
   12e90:	bne	12ea0 <_obstack_memory_used@@Base+0x73c>
   12e94:	cmp	r9, r4
   12e98:	movhi	r3, #39	; 0x27
   12e9c:	strbhi	r3, [r8, r4]
   12ea0:	add	r3, r4, #1
   12ea4:	cmp	r3, r9
   12ea8:	movcc	r2, #92	; 0x5c
   12eac:	strbcc	r2, [r8, r3]
   12eb0:	add	r3, r4, #2
   12eb4:	cmp	r3, r9
   12eb8:	ldr	r5, [sp, #52]	; 0x34
   12ebc:	movcc	r2, #39	; 0x27
   12ec0:	strbcc	r2, [r8, r3]
   12ec4:	add	r4, r4, #3
   12ec8:	mov	fp, r6
   12ecc:	str	r5, [sp, #68]	; 0x44
   12ed0:	str	r6, [sp, #48]	; 0x30
   12ed4:	b	13170 <_obstack_memory_used@@Base+0xa0c>
   12ed8:	cmp	r7, #94	; 0x5e
   12edc:	beq	12e44 <_obstack_memory_used@@Base+0x6e0>
   12ee0:	bhi	12f38 <_obstack_memory_used@@Base+0x7d4>
   12ee4:	cmp	r7, #90	; 0x5a
   12ee8:	bhi	12f20 <_obstack_memory_used@@Base+0x7bc>
   12eec:	cmp	r7, #65	; 0x41
   12ef0:	bcs	12f2c <_obstack_memory_used@@Base+0x7c8>
   12ef4:	cmp	r7, #62	; 0x3e
   12ef8:	bls	12e44 <_obstack_memory_used@@Base+0x6e0>
   12efc:	cmp	r7, #63	; 0x3f
   12f00:	bne	12da8 <_obstack_memory_used@@Base+0x644>
   12f04:	cmp	sl, #2
   12f08:	beq	130ac <_obstack_memory_used@@Base+0x948>
   12f0c:	cmp	sl, #5
   12f10:	beq	130bc <_obstack_memory_used@@Base+0x958>
   12f14:	mov	fp, #0
   12f18:	mov	r5, fp
   12f1c:	b	13170 <_obstack_memory_used@@Base+0xa0c>
   12f20:	cmp	r7, #92	; 0x5c
   12f24:	beq	13248 <_obstack_memory_used@@Base+0xae4>
   12f28:	bls	12e44 <_obstack_memory_used@@Base+0x6e0>
   12f2c:	ldr	r5, [sp, #52]	; 0x34
   12f30:	mov	fp, #0
   12f34:	b	13170 <_obstack_memory_used@@Base+0xa0c>
   12f38:	cmp	r7, #122	; 0x7a
   12f3c:	bhi	12f5c <_obstack_memory_used@@Base+0x7f8>
   12f40:	cmp	r7, #97	; 0x61
   12f44:	bcs	12f2c <_obstack_memory_used@@Base+0x7c8>
   12f48:	cmp	r7, #95	; 0x5f
   12f4c:	beq	12f2c <_obstack_memory_used@@Base+0x7c8>
   12f50:	cmp	r7, #96	; 0x60
   12f54:	bne	12da8 <_obstack_memory_used@@Base+0x644>
   12f58:	b	12e44 <_obstack_memory_used@@Base+0x6e0>
   12f5c:	cmp	r7, #124	; 0x7c
   12f60:	beq	12e44 <_obstack_memory_used@@Base+0x6e0>
   12f64:	bcc	132f4 <_obstack_memory_used@@Base+0xb90>
   12f68:	cmp	r7, #125	; 0x7d
   12f6c:	beq	132f4 <_obstack_memory_used@@Base+0xb90>
   12f70:	cmp	r7, #126	; 0x7e
   12f74:	bne	12da8 <_obstack_memory_used@@Base+0x644>
   12f78:	ldr	r3, [sp, #28]
   12f7c:	cmp	r3, #0
   12f80:	bne	130b4 <_obstack_memory_used@@Base+0x950>
   12f84:	ldr	r5, [sp, #52]	; 0x34
   12f88:	cmp	sl, #2
   12f8c:	movne	fp, #0
   12f90:	andeq	fp, r6, #1
   12f94:	cmp	fp, #0
   12f98:	beq	13170 <_obstack_memory_used@@Base+0xa0c>
   12f9c:	b	12e28 <_obstack_memory_used@@Base+0x6c4>
   12fa0:	mov	r3, #98	; 0x62
   12fa4:	ldr	r2, [sp, #24]
   12fa8:	cmp	r2, #0
   12fac:	beq	130b4 <_obstack_memory_used@@Base+0x950>
   12fb0:	mov	r7, r3
   12fb4:	mov	r5, #0
   12fb8:	b	131c8 <_obstack_memory_used@@Base+0xa64>
   12fbc:	ldr	r3, [sp, #24]
   12fc0:	cmp	r3, #0
   12fc4:	beq	13090 <_obstack_memory_used@@Base+0x92c>
   12fc8:	cmp	r6, #0
   12fcc:	bne	12cf8 <_obstack_memory_used@@Base+0x594>
   12fd0:	ldr	r3, [sp, #48]	; 0x30
   12fd4:	eor	r2, r3, #1
   12fd8:	cmp	sl, #2
   12fdc:	movne	r2, #0
   12fe0:	andeq	r2, r2, #1
   12fe4:	cmp	r2, #0
   12fe8:	moveq	r3, r4
   12fec:	beq	13024 <_obstack_memory_used@@Base+0x8c0>
   12ff0:	cmp	r9, r4
   12ff4:	movhi	r3, #39	; 0x27
   12ff8:	strbhi	r3, [r8, r4]
   12ffc:	add	r3, r4, #1
   13000:	cmp	r9, r3
   13004:	movhi	r1, #36	; 0x24
   13008:	strbhi	r1, [r8, r3]
   1300c:	add	r3, r4, #2
   13010:	cmp	r9, r3
   13014:	movhi	r1, #39	; 0x27
   13018:	strbhi	r1, [r8, r3]
   1301c:	add	r3, r4, #3
   13020:	str	r2, [sp, #48]	; 0x30
   13024:	cmp	r9, r3
   13028:	movhi	r2, #92	; 0x5c
   1302c:	strbhi	r2, [r8, r3]
   13030:	cmp	fp, #0
   13034:	add	r4, r3, #1
   13038:	beq	135c8 <_obstack_memory_used@@Base+0xe64>
   1303c:	ldr	r2, [sp, #28]
   13040:	ldr	r1, [sp, #36]	; 0x24
   13044:	add	r2, r2, #1
   13048:	cmp	r1, r2
   1304c:	bls	13088 <_obstack_memory_used@@Base+0x924>
   13050:	ldr	r1, [sp, #44]	; 0x2c
   13054:	mov	r7, #48	; 0x30
   13058:	ldrb	r2, [r1, r2]
   1305c:	sub	r2, r2, #48	; 0x30
   13060:	cmp	r2, #9
   13064:	movhi	r5, r6
   13068:	bhi	13170 <_obstack_memory_used@@Base+0xa0c>
   1306c:	cmp	r9, r4
   13070:	add	r2, r3, #2
   13074:	strbhi	r7, [r8, r4]
   13078:	cmp	r9, r2
   1307c:	add	r4, r3, #3
   13080:	movhi	r1, #48	; 0x30
   13084:	strbhi	r1, [r8, r2]
   13088:	mov	r5, r6
   1308c:	b	135d0 <_obstack_memory_used@@Base+0xe6c>
   13090:	ldr	r3, [sp, #148]	; 0x94
   13094:	tst	r3, #1
   13098:	ldreq	r5, [sp, #24]
   1309c:	beq	135dc <_obstack_memory_used@@Base+0xe78>
   130a0:	ldr	r3, [sp, #28]
   130a4:	add	r3, r3, #1
   130a8:	b	12a48 <_obstack_memory_used@@Base+0x2e4>
   130ac:	cmp	r6, #0
   130b0:	bne	12cfc <_obstack_memory_used@@Base+0x598>
   130b4:	mov	r5, #0
   130b8:	b	12f30 <_obstack_memory_used@@Base+0x7cc>
   130bc:	ldr	r3, [sp, #148]	; 0x94
   130c0:	tst	r3, #4
   130c4:	beq	130b4 <_obstack_memory_used@@Base+0x950>
   130c8:	ldr	r3, [sp, #28]
   130cc:	add	r2, r3, #2
   130d0:	ldr	r3, [sp, #36]	; 0x24
   130d4:	cmp	r3, r2
   130d8:	bls	130b4 <_obstack_memory_used@@Base+0x950>
   130dc:	ldr	r3, [sp, #44]	; 0x2c
   130e0:	ldr	r1, [sp, #28]
   130e4:	add	r3, r3, r1
   130e8:	ldrb	r0, [r3, #1]
   130ec:	cmp	r0, #63	; 0x3f
   130f0:	bne	130b4 <_obstack_memory_used@@Base+0x950>
   130f4:	ldr	r3, [sp, #44]	; 0x2c
   130f8:	ldrb	r1, [r3, r2]
   130fc:	sub	r3, r1, #33	; 0x21
   13100:	uxtb	r3, r3
   13104:	cmp	r3, #29
   13108:	bhi	135d8 <_obstack_memory_used@@Base+0xe74>
   1310c:	mov	ip, #1
   13110:	ldr	r5, [pc, #1428]	; 136ac <_obstack_memory_used@@Base+0xf48>
   13114:	ands	r5, r5, ip, lsl r3
   13118:	beq	12f30 <_obstack_memory_used@@Base+0x7cc>
   1311c:	cmp	r6, #0
   13120:	bne	12cfc <_obstack_memory_used@@Base+0x598>
   13124:	add	r3, r4, #1
   13128:	cmp	r9, r4
   1312c:	strbhi	r0, [r8, r4]
   13130:	cmp	r9, r3
   13134:	movhi	r0, #34	; 0x22
   13138:	strbhi	r0, [r8, r3]
   1313c:	add	r3, r4, #2
   13140:	cmp	r9, r3
   13144:	movhi	r0, #34	; 0x22
   13148:	strbhi	r0, [r8, r3]
   1314c:	add	r3, r4, #3
   13150:	cmp	r9, r3
   13154:	add	r4, r4, #4
   13158:	mov	r5, r6
   1315c:	mov	fp, r6
   13160:	mov	r7, r1
   13164:	movhi	r0, #63	; 0x3f
   13168:	strbhi	r0, [r8, r3]
   1316c:	str	r2, [sp, #28]
   13170:	ldr	r3, [sp, #24]
   13174:	eor	r3, r3, #1
   13178:	cmp	sl, #2
   1317c:	orreq	r3, r3, #1
   13180:	eor	r3, r3, #1
   13184:	orr	r3, r6, r3
   13188:	tst	r3, #255	; 0xff
   1318c:	beq	131bc <_obstack_memory_used@@Base+0xa58>
   13190:	ldr	r3, [sp, #152]	; 0x98
   13194:	cmp	r3, #0
   13198:	beq	131bc <_obstack_memory_used@@Base+0xa58>
   1319c:	lsr	r2, r7, #5
   131a0:	ldr	r1, [sp, #152]	; 0x98
   131a4:	uxtb	r2, r2
   131a8:	and	r3, r7, #31
   131ac:	ldr	r2, [r1, r2, lsl #2]
   131b0:	lsr	r3, r2, r3
   131b4:	tst	r3, #1
   131b8:	bne	131c8 <_obstack_memory_used@@Base+0xa64>
   131bc:	ldr	r3, [sp, #64]	; 0x40
   131c0:	cmp	r3, #0
   131c4:	beq	13260 <_obstack_memory_used@@Base+0xafc>
   131c8:	cmp	r6, #0
   131cc:	bne	12cfc <_obstack_memory_used@@Base+0x598>
   131d0:	ldr	r3, [sp, #48]	; 0x30
   131d4:	eor	r3, r3, #1
   131d8:	cmp	sl, #2
   131dc:	movne	r3, #0
   131e0:	andeq	r3, r3, #1
   131e4:	cmp	r3, #0
   131e8:	beq	13220 <_obstack_memory_used@@Base+0xabc>
   131ec:	cmp	r9, r4
   131f0:	movhi	r2, #39	; 0x27
   131f4:	strbhi	r2, [r8, r4]
   131f8:	add	r2, r4, #1
   131fc:	cmp	r9, r2
   13200:	movhi	r1, #36	; 0x24
   13204:	strbhi	r1, [r8, r2]
   13208:	add	r2, r4, #2
   1320c:	cmp	r9, r2
   13210:	add	r4, r4, #3
   13214:	movhi	r1, #39	; 0x27
   13218:	strbhi	r1, [r8, r2]
   1321c:	str	r3, [sp, #48]	; 0x30
   13220:	cmp	r9, r4
   13224:	movhi	r3, #92	; 0x5c
   13228:	strbhi	r3, [r8, r4]
   1322c:	ldr	fp, [sp, #52]	; 0x34
   13230:	add	r4, r4, #1
   13234:	b	13260 <_obstack_memory_used@@Base+0xafc>
   13238:	mov	r3, #116	; 0x74
   1323c:	b	12e14 <_obstack_memory_used@@Base+0x6b0>
   13240:	mov	r3, #118	; 0x76
   13244:	b	12fa4 <_obstack_memory_used@@Base+0x840>
   13248:	cmp	sl, #2
   1324c:	bne	132bc <_obstack_memory_used@@Base+0xb58>
   13250:	cmp	r6, #0
   13254:	bne	12cfc <_obstack_memory_used@@Base+0x598>
   13258:	mov	r5, r6
   1325c:	mov	fp, r6
   13260:	ldr	r3, [sp, #48]	; 0x30
   13264:	eor	fp, fp, #1
   13268:	and	fp, fp, r3
   1326c:	tst	fp, #255	; 0xff
   13270:	beq	1329c <_obstack_memory_used@@Base+0xb38>
   13274:	cmp	r9, r4
   13278:	movhi	r3, #39	; 0x27
   1327c:	strbhi	r3, [r8, r4]
   13280:	add	r3, r4, #1
   13284:	cmp	r9, r3
   13288:	movhi	r2, #39	; 0x27
   1328c:	add	r4, r4, #2
   13290:	strbhi	r2, [r8, r3]
   13294:	mov	r3, #0
   13298:	str	r3, [sp, #48]	; 0x30
   1329c:	cmp	r9, r4
   132a0:	strbhi	r7, [r8, r4]
   132a4:	ldr	r3, [sp, #72]	; 0x48
   132a8:	cmp	r5, #0
   132ac:	moveq	r3, #0
   132b0:	add	r4, r4, #1
   132b4:	str	r3, [sp, #72]	; 0x48
   132b8:	b	130a0 <_obstack_memory_used@@Base+0x93c>
   132bc:	ldr	r3, [sp, #24]
   132c0:	and	r3, r3, r6
   132c4:	tst	r5, r3
   132c8:	moveq	r3, r7
   132cc:	beq	12e14 <_obstack_memory_used@@Base+0x6b0>
   132d0:	mov	fp, #0
   132d4:	mov	r5, fp
   132d8:	b	13260 <_obstack_memory_used@@Base+0xafc>
   132dc:	mov	r3, #110	; 0x6e
   132e0:	b	12e14 <_obstack_memory_used@@Base+0x6b0>
   132e4:	mov	r3, #97	; 0x61
   132e8:	b	12fa4 <_obstack_memory_used@@Base+0x840>
   132ec:	mov	r3, #102	; 0x66
   132f0:	b	12fa4 <_obstack_memory_used@@Base+0x840>
   132f4:	ldr	r3, [sp, #36]	; 0x24
   132f8:	cmn	r3, #1
   132fc:	bne	1331c <_obstack_memory_used@@Base+0xbb8>
   13300:	ldr	r3, [sp, #44]	; 0x2c
   13304:	ldrb	r3, [r3, #1]
   13308:	adds	r3, r3, #0
   1330c:	movne	r3, #1
   13310:	cmp	r3, #0
   13314:	bne	130b4 <_obstack_memory_used@@Base+0x950>
   13318:	b	12f78 <_obstack_memory_used@@Base+0x814>
   1331c:	ldr	r3, [sp, #36]	; 0x24
   13320:	subs	r3, r3, #1
   13324:	b	1330c <_obstack_memory_used@@Base+0xba8>
   13328:	mov	r3, #0
   1332c:	str	r3, [sp, #96]	; 0x60
   13330:	str	r3, [sp, #100]	; 0x64
   13334:	ldr	r3, [sp, #36]	; 0x24
   13338:	cmn	r3, #1
   1333c:	bne	1334c <_obstack_memory_used@@Base+0xbe8>
   13340:	ldr	r0, [sp, #44]	; 0x2c
   13344:	bl	10f9c <strlen@plt>
   13348:	str	r0, [sp, #36]	; 0x24
   1334c:	ldr	r5, [sp, #52]	; 0x34
   13350:	mov	r3, #0
   13354:	str	r3, [sp, #56]	; 0x38
   13358:	ldr	r3, [sp, #28]
   1335c:	ldr	r2, [sp, #56]	; 0x38
   13360:	ldr	r1, [sp, #36]	; 0x24
   13364:	add	r2, r3, r2
   13368:	ldr	r3, [sp, #44]	; 0x2c
   1336c:	add	r0, sp, #92	; 0x5c
   13370:	add	fp, r3, r2
   13374:	sub	r2, r1, r2
   13378:	add	r3, sp, #96	; 0x60
   1337c:	mov	r1, fp
   13380:	bl	14930 <_obstack_memory_used@@Base+0x21cc>
   13384:	subs	r2, r0, #0
   13388:	beq	133c8 <_obstack_memory_used@@Base+0xc64>
   1338c:	cmn	r2, #1
   13390:	beq	135a0 <_obstack_memory_used@@Base+0xe3c>
   13394:	cmn	r2, #2
   13398:	bne	13510 <_obstack_memory_used@@Base+0xdac>
   1339c:	ldr	r2, [sp, #56]	; 0x38
   133a0:	ldr	r3, [sp, #28]
   133a4:	add	r3, r3, r2
   133a8:	ldr	r2, [sp, #36]	; 0x24
   133ac:	cmp	r2, r3
   133b0:	bls	135a0 <_obstack_memory_used@@Base+0xe3c>
   133b4:	ldr	r3, [sp, #80]	; 0x50
   133b8:	ldr	r2, [sp, #56]	; 0x38
   133bc:	ldrb	r5, [r3, r2]
   133c0:	cmp	r5, #0
   133c4:	bne	13500 <_obstack_memory_used@@Base+0xd9c>
   133c8:	ldr	r3, [sp, #56]	; 0x38
   133cc:	cmp	r3, #1
   133d0:	bls	12dd8 <_obstack_memory_used@@Base+0x674>
   133d4:	ldr	r2, [sp, #56]	; 0x38
   133d8:	ldr	r3, [sp, #28]
   133dc:	mov	fp, #0
   133e0:	add	r3, r3, r2
   133e4:	ldr	r2, [sp, #24]
   133e8:	str	r3, [sp, #52]	; 0x34
   133ec:	eor	r3, r5, #1
   133f0:	and	r3, r3, r2
   133f4:	mov	ip, #92	; 0x5c
   133f8:	uxtb	r3, r3
   133fc:	mov	r2, #39	; 0x27
   13400:	cmp	r3, #0
   13404:	beq	135a8 <_obstack_memory_used@@Base+0xe44>
   13408:	cmp	r6, #0
   1340c:	bne	12cf8 <_obstack_memory_used@@Base+0x594>
   13410:	ldr	r1, [sp, #48]	; 0x30
   13414:	eor	r1, r1, #1
   13418:	cmp	sl, #2
   1341c:	movne	r1, #0
   13420:	andeq	r1, r1, #1
   13424:	cmp	r1, #0
   13428:	beq	13458 <_obstack_memory_used@@Base+0xcf4>
   1342c:	add	r0, r4, #1
   13430:	cmp	r9, r4
   13434:	strbhi	r2, [r8, r4]
   13438:	cmp	r9, r0
   1343c:	movhi	lr, #36	; 0x24
   13440:	strbhi	lr, [r8, r0]
   13444:	add	r0, r4, #2
   13448:	add	r4, r4, #3
   1344c:	cmp	r9, r0
   13450:	strbhi	r2, [r8, r0]
   13454:	str	r1, [sp, #48]	; 0x30
   13458:	add	r0, r4, #1
   1345c:	cmp	r9, r4
   13460:	strbhi	ip, [r8, r4]
   13464:	cmp	r9, r0
   13468:	lsrhi	r1, r7, #6
   1346c:	addhi	r1, r1, #48	; 0x30
   13470:	strbhi	r1, [r8, r0]
   13474:	add	r0, r4, #2
   13478:	cmp	r9, r0
   1347c:	lsrhi	r1, r7, #3
   13480:	and	r7, r7, #7
   13484:	andhi	r1, r1, #7
   13488:	add	r4, r4, #3
   1348c:	add	r7, r7, #48	; 0x30
   13490:	mov	fp, r3
   13494:	addhi	r1, r1, #48	; 0x30
   13498:	strbhi	r1, [r8, r0]
   1349c:	ldr	r1, [sp, #28]
   134a0:	ldr	r0, [sp, #52]	; 0x34
   134a4:	add	r1, r1, #1
   134a8:	cmp	r0, r1
   134ac:	bls	13260 <_obstack_memory_used@@Base+0xafc>
   134b0:	ldr	lr, [sp, #48]	; 0x30
   134b4:	eor	r0, fp, #1
   134b8:	and	r0, r0, lr
   134bc:	tst	r0, #255	; 0xff
   134c0:	beq	134e4 <_obstack_memory_used@@Base+0xd80>
   134c4:	add	r0, r4, #1
   134c8:	cmp	r9, r4
   134cc:	strbhi	r2, [r8, r4]
   134d0:	cmp	r9, r0
   134d4:	add	r4, r4, #2
   134d8:	strbhi	r2, [r8, r0]
   134dc:	mov	r0, #0
   134e0:	str	r0, [sp, #48]	; 0x30
   134e4:	ldr	r0, [sp, #44]	; 0x2c
   134e8:	cmp	r9, r4
   134ec:	strbhi	r7, [r8, r4]
   134f0:	str	r1, [sp, #28]
   134f4:	add	r4, r4, #1
   134f8:	ldrb	r7, [r0, r1]
   134fc:	b	13400 <_obstack_memory_used@@Base+0xc9c>
   13500:	ldr	r3, [sp, #56]	; 0x38
   13504:	add	r3, r3, #1
   13508:	str	r3, [sp, #56]	; 0x38
   1350c:	b	1339c <_obstack_memory_used@@Base+0xc38>
   13510:	cmp	sl, #2
   13514:	movne	r3, #0
   13518:	andeq	r3, r6, #1
   1351c:	cmp	r3, #0
   13520:	movne	r1, #1
   13524:	bne	13580 <_obstack_memory_used@@Base+0xe1c>
   13528:	ldr	r0, [sp, #92]	; 0x5c
   1352c:	str	r2, [sp, #84]	; 0x54
   13530:	bl	10eb8 <iswprint@plt>
   13534:	ldr	r3, [sp, #56]	; 0x38
   13538:	ldr	r2, [sp, #84]	; 0x54
   1353c:	add	r3, r3, r2
   13540:	str	r3, [sp, #56]	; 0x38
   13544:	cmp	r0, #0
   13548:	add	r0, sp, #96	; 0x60
   1354c:	moveq	r5, #0
   13550:	bl	10e58 <mbsinit@plt>
   13554:	cmp	r0, #0
   13558:	beq	13358 <_obstack_memory_used@@Base+0xbf4>
   1355c:	b	133c8 <_obstack_memory_used@@Base+0xc64>
   13560:	ldrb	r3, [fp, r1]
   13564:	cmp	r3, #94	; 0x5e
   13568:	beq	12e28 <_obstack_memory_used@@Base+0x6c4>
   1356c:	bhi	1358c <_obstack_memory_used@@Base+0xe28>
   13570:	sub	r3, r3, #91	; 0x5b
   13574:	cmp	r3, #1
   13578:	bls	12e28 <_obstack_memory_used@@Base+0x6c4>
   1357c:	add	r1, r1, #1
   13580:	cmp	r1, r2
   13584:	bne	13560 <_obstack_memory_used@@Base+0xdfc>
   13588:	b	13528 <_obstack_memory_used@@Base+0xdc4>
   1358c:	cmp	r3, #96	; 0x60
   13590:	beq	12e28 <_obstack_memory_used@@Base+0x6c4>
   13594:	cmp	r3, #124	; 0x7c
   13598:	bne	1357c <_obstack_memory_used@@Base+0xe18>
   1359c:	b	12e28 <_obstack_memory_used@@Base+0x6c4>
   135a0:	mov	r5, #0
   135a4:	b	133c8 <_obstack_memory_used@@Base+0xc64>
   135a8:	ldr	r1, [sp, #64]	; 0x40
   135ac:	cmp	r1, #0
   135b0:	beq	1349c <_obstack_memory_used@@Base+0xd38>
   135b4:	cmp	r9, r4
   135b8:	strbhi	ip, [r8, r4]
   135bc:	str	r3, [sp, #64]	; 0x40
   135c0:	add	r4, r4, #1
   135c4:	b	1349c <_obstack_memory_used@@Base+0xd38>
   135c8:	mov	r5, fp
   135cc:	ldr	fp, [sp, #24]
   135d0:	mov	r7, #48	; 0x30
   135d4:	b	13170 <_obstack_memory_used@@Base+0xa0c>
   135d8:	mov	r5, #0
   135dc:	mov	fp, r5
   135e0:	b	13170 <_obstack_memory_used@@Base+0xa0c>
   135e4:	ldr	r3, [sp, #36]	; 0x24
   135e8:	ldr	r2, [sp, #28]
   135ec:	subs	r3, r3, r2
   135f0:	movne	r3, #1
   135f4:	b	12a6c <_obstack_memory_used@@Base+0x308>
   135f8:	ldr	r3, [sp, #60]	; 0x3c
   135fc:	clz	r7, r9
   13600:	cmp	r3, #0
   13604:	lsr	r7, r7, #5
   13608:	moveq	r7, #0
   1360c:	cmp	r7, #0
   13610:	mov	r5, r3
   13614:	bne	129cc <_obstack_memory_used@@Base+0x268>
   13618:	ldr	r3, [sp, #68]	; 0x44
   1361c:	ldr	r2, [sp, #40]	; 0x28
   13620:	cmp	r2, #0
   13624:	moveq	r3, #0
   13628:	andne	r3, r3, #1
   1362c:	cmp	r3, #0
   13630:	movne	r3, r2
   13634:	subne	r2, r3, #1
   13638:	bne	13668 <_obstack_memory_used@@Base+0xf04>
   1363c:	cmp	r9, r4
   13640:	movhi	r3, #0
   13644:	strbhi	r3, [r8, r4]
   13648:	mov	r0, r4
   1364c:	add	sp, sp, #108	; 0x6c
   13650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13654:	mov	r3, r2
   13658:	b	1361c <_obstack_memory_used@@Base+0xeb8>
   1365c:	cmp	r9, r4
   13660:	strbhi	r3, [r8, r4]
   13664:	add	r4, r4, #1
   13668:	ldrb	r3, [r2, #1]!
   1366c:	cmp	r3, #0
   13670:	bne	1365c <_obstack_memory_used@@Base+0xef8>
   13674:	b	1363c <_obstack_memory_used@@Base+0xed8>
   13678:	ldr	r3, [pc, #32]	; 136a0 <_obstack_memory_used@@Base+0xf3c>
   1367c:	mov	r6, #1
   13680:	str	r6, [sp, #24]
   13684:	str	r6, [sp, #32]
   13688:	str	r3, [sp, #40]	; 0x28
   1368c:	mov	r4, #0
   13690:	mov	sl, #5
   13694:	b	12a3c <_obstack_memory_used@@Base+0x2d8>
   13698:	mov	r6, #1
   1369c:	b	12c30 <_obstack_memory_used@@Base+0x4cc>
   136a0:	andeq	r6, r1, pc, asr #20
   136a4:	andeq	r6, r1, r1, asr sl
   136a8:	andeq	r6, r1, r2, lsl #13
   136ac:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   136b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136b4:	sub	sp, sp, #52	; 0x34
   136b8:	mov	r6, r0
   136bc:	mov	r5, r3
   136c0:	mov	r8, r1
   136c4:	mov	r9, r2
   136c8:	bl	10fa8 <__errno_location@plt>
   136cc:	ldr	r7, [pc, #380]	; 13850 <_obstack_memory_used@@Base+0x10ec>
   136d0:	cmn	r6, #-2147483647	; 0x80000001
   136d4:	ldr	r4, [r7]
   136d8:	ldr	r3, [r0]
   136dc:	str	r0, [sp, #24]
   136e0:	str	r3, [sp, #32]
   136e4:	movne	r3, #0
   136e8:	moveq	r3, #1
   136ec:	orrs	r3, r3, r6, lsr #31
   136f0:	beq	136f8 <_obstack_memory_used@@Base+0xf94>
   136f4:	bl	1105c <abort@plt>
   136f8:	ldr	r2, [r7, #4]
   136fc:	cmp	r6, r2
   13700:	blt	13770 <_obstack_memory_used@@Base+0x100c>
   13704:	add	r1, sp, #48	; 0x30
   13708:	add	sl, r7, #8
   1370c:	str	r2, [r1, #-4]!
   13710:	cmp	r4, sl
   13714:	mov	r3, #8
   13718:	sub	r2, r6, r2
   1371c:	movne	r0, r4
   13720:	str	r3, [sp]
   13724:	add	r2, r2, #1
   13728:	mvn	r3, #-2147483648	; 0x80000000
   1372c:	moveq	r0, #0
   13730:	bl	14444 <_obstack_memory_used@@Base+0x1ce0>
   13734:	cmp	r4, sl
   13738:	ldr	r2, [sp, #44]	; 0x2c
   1373c:	mov	fp, r0
   13740:	str	r0, [r7]
   13744:	ldmeq	r4, {r0, r1}
   13748:	mov	r4, fp
   1374c:	stmeq	fp, {r0, r1}
   13750:	ldr	r0, [r7, #4]
   13754:	mov	r1, #0
   13758:	sub	r2, r2, r0
   1375c:	add	r0, fp, r0, lsl #3
   13760:	lsl	r2, r2, #3
   13764:	bl	10fc0 <memset@plt>
   13768:	ldr	r3, [sp, #44]	; 0x2c
   1376c:	str	r3, [r7, #4]
   13770:	ldr	r3, [r5, #4]
   13774:	add	sl, r4, r6, lsl #3
   13778:	orr	r3, r3, #1
   1377c:	str	r3, [sp, #28]
   13780:	add	r3, r5, #8
   13784:	str	r3, [sp, #36]	; 0x24
   13788:	ldr	r3, [r5, #44]	; 0x2c
   1378c:	ldr	fp, [r4, r6, lsl #3]
   13790:	ldr	r7, [sl, #4]
   13794:	str	r3, [sp, #16]
   13798:	ldr	r3, [r5, #40]	; 0x28
   1379c:	mov	r2, r8
   137a0:	str	r3, [sp, #12]
   137a4:	add	r3, r5, #8
   137a8:	str	r3, [sp, #8]
   137ac:	ldr	r3, [sp, #28]
   137b0:	mov	r1, fp
   137b4:	str	r3, [sp, #4]
   137b8:	ldr	r3, [r5]
   137bc:	mov	r0, r7
   137c0:	str	r3, [sp]
   137c4:	mov	r3, r9
   137c8:	bl	1297c <_obstack_memory_used@@Base+0x218>
   137cc:	cmp	fp, r0
   137d0:	bhi	13838 <_obstack_memory_used@@Base+0x10d4>
   137d4:	ldr	r3, [pc, #120]	; 13854 <_obstack_memory_used@@Base+0x10f0>
   137d8:	add	fp, r0, #1
   137dc:	cmp	r7, r3
   137e0:	str	fp, [r4, r6, lsl #3]
   137e4:	beq	137f0 <_obstack_memory_used@@Base+0x108c>
   137e8:	mov	r0, r7
   137ec:	bl	121e0 <close@plt+0x1178>
   137f0:	mov	r0, fp
   137f4:	bl	142fc <_obstack_memory_used@@Base+0x1b98>
   137f8:	ldr	r3, [r5, #44]	; 0x2c
   137fc:	mov	r2, r8
   13800:	mov	r1, fp
   13804:	str	r0, [sl, #4]
   13808:	str	r3, [sp, #16]
   1380c:	ldr	r3, [r5, #40]	; 0x28
   13810:	mov	r7, r0
   13814:	str	r3, [sp, #12]
   13818:	add	r3, r5, #8
   1381c:	str	r3, [sp, #8]
   13820:	ldr	r3, [sp, #28]
   13824:	str	r3, [sp, #4]
   13828:	ldr	r3, [r5]
   1382c:	str	r3, [sp]
   13830:	mov	r3, r9
   13834:	bl	1297c <_obstack_memory_used@@Base+0x218>
   13838:	ldr	r3, [sp, #24]
   1383c:	ldr	r2, [sp, #32]
   13840:	mov	r0, r7
   13844:	str	r2, [r3]
   13848:	add	sp, sp, #52	; 0x34
   1384c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13850:	strdeq	r7, [r2], -r8
   13854:	muleq	r2, r4, r1
   13858:	push	{r4, r5, r6, lr}
   1385c:	mov	r5, r0
   13860:	bl	10fa8 <__errno_location@plt>
   13864:	cmp	r5, #0
   13868:	mov	r1, #48	; 0x30
   1386c:	ldr	r6, [r0]
   13870:	mov	r4, r0
   13874:	ldr	r0, [pc, #12]	; 13888 <_obstack_memory_used@@Base+0x1124>
   13878:	movne	r0, r5
   1387c:	bl	146d8 <_obstack_memory_used@@Base+0x1f74>
   13880:	str	r6, [r4]
   13884:	pop	{r4, r5, r6, pc}
   13888:	muleq	r2, r4, r2
   1388c:	ldr	r3, [pc, #12]	; 138a0 <_obstack_memory_used@@Base+0x113c>
   13890:	cmp	r0, #0
   13894:	moveq	r0, r3
   13898:	ldr	r0, [r0]
   1389c:	bx	lr
   138a0:	muleq	r2, r4, r2
   138a4:	ldr	r3, [pc, #12]	; 138b8 <_obstack_memory_used@@Base+0x1154>
   138a8:	cmp	r0, #0
   138ac:	moveq	r0, r3
   138b0:	str	r1, [r0]
   138b4:	bx	lr
   138b8:	muleq	r2, r4, r2
   138bc:	ldr	r3, [pc, #52]	; 138f8 <_obstack_memory_used@@Base+0x1194>
   138c0:	cmp	r0, #0
   138c4:	moveq	r0, r3
   138c8:	add	r3, r0, #8
   138cc:	push	{lr}		; (str lr, [sp, #-4]!)
   138d0:	lsr	lr, r1, #5
   138d4:	and	r1, r1, #31
   138d8:	ldr	ip, [r3, lr, lsl #2]
   138dc:	lsr	r0, ip, r1
   138e0:	eor	r2, r2, r0
   138e4:	and	r2, r2, #1
   138e8:	and	r0, r0, #1
   138ec:	eor	r1, ip, r2, lsl r1
   138f0:	str	r1, [r3, lr, lsl #2]
   138f4:	pop	{pc}		; (ldr pc, [sp], #4)
   138f8:	muleq	r2, r4, r2
   138fc:	ldr	r3, [pc, #16]	; 13914 <_obstack_memory_used@@Base+0x11b0>
   13900:	cmp	r0, #0
   13904:	movne	r3, r0
   13908:	ldr	r0, [r3, #4]
   1390c:	str	r1, [r3, #4]
   13910:	bx	lr
   13914:	muleq	r2, r4, r2
   13918:	ldr	r3, [pc, #44]	; 1394c <_obstack_memory_used@@Base+0x11e8>
   1391c:	cmp	r0, #0
   13920:	moveq	r0, r3
   13924:	mov	r3, #10
   13928:	cmp	r2, #0
   1392c:	cmpne	r1, #0
   13930:	str	r3, [r0]
   13934:	bne	13940 <_obstack_memory_used@@Base+0x11dc>
   13938:	push	{r4, lr}
   1393c:	bl	1105c <abort@plt>
   13940:	str	r1, [r0, #40]	; 0x28
   13944:	str	r2, [r0, #44]	; 0x2c
   13948:	bx	lr
   1394c:	muleq	r2, r4, r2
   13950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13954:	sub	sp, sp, #24
   13958:	mov	sl, r3
   1395c:	ldr	r4, [sp, #56]	; 0x38
   13960:	ldr	r3, [pc, #100]	; 139cc <_obstack_memory_used@@Base+0x1268>
   13964:	cmp	r4, #0
   13968:	moveq	r4, r3
   1396c:	mov	r7, r0
   13970:	mov	r8, r1
   13974:	mov	r9, r2
   13978:	bl	10fa8 <__errno_location@plt>
   1397c:	ldr	r3, [r4, #44]	; 0x2c
   13980:	mov	r2, r9
   13984:	mov	r1, r8
   13988:	ldr	r6, [r0]
   1398c:	str	r3, [sp, #16]
   13990:	ldr	r3, [r4, #40]	; 0x28
   13994:	mov	r5, r0
   13998:	str	r3, [sp, #12]
   1399c:	add	r3, r4, #8
   139a0:	str	r3, [sp, #8]
   139a4:	ldr	r3, [r4, #4]
   139a8:	mov	r0, r7
   139ac:	str	r3, [sp, #4]
   139b0:	ldr	r3, [r4]
   139b4:	str	r3, [sp]
   139b8:	mov	r3, sl
   139bc:	bl	1297c <_obstack_memory_used@@Base+0x218>
   139c0:	str	r6, [r5]
   139c4:	add	sp, sp, #24
   139c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139cc:	muleq	r2, r4, r2
   139d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d4:	cmp	r3, #0
   139d8:	sub	sp, sp, #44	; 0x2c
   139dc:	ldr	r4, [pc, #188]	; 13aa0 <_obstack_memory_used@@Base+0x133c>
   139e0:	mov	r6, r2
   139e4:	movne	r4, r3
   139e8:	mov	sl, r1
   139ec:	mov	r9, r0
   139f0:	bl	10fa8 <__errno_location@plt>
   139f4:	ldr	r5, [r4, #4]
   139f8:	add	fp, r4, #8
   139fc:	cmp	r6, #0
   13a00:	orreq	r5, r5, #1
   13a04:	mov	r1, #0
   13a08:	mov	r2, r9
   13a0c:	ldr	r3, [r0]
   13a10:	mov	r8, r0
   13a14:	str	r3, [sp, #28]
   13a18:	ldr	r3, [r4, #44]	; 0x2c
   13a1c:	mov	r0, r1
   13a20:	str	r3, [sp, #16]
   13a24:	ldr	r3, [r4, #40]	; 0x28
   13a28:	stmib	sp, {r5, fp}
   13a2c:	str	r3, [sp, #12]
   13a30:	ldr	r3, [r4]
   13a34:	str	r3, [sp]
   13a38:	mov	r3, sl
   13a3c:	bl	1297c <_obstack_memory_used@@Base+0x218>
   13a40:	add	r1, r0, #1
   13a44:	mov	r7, r0
   13a48:	mov	r0, r1
   13a4c:	str	r1, [sp, #36]	; 0x24
   13a50:	bl	142fc <_obstack_memory_used@@Base+0x1b98>
   13a54:	ldr	r3, [r4, #44]	; 0x2c
   13a58:	mov	r2, r9
   13a5c:	str	r3, [sp, #16]
   13a60:	ldr	r3, [r4, #40]	; 0x28
   13a64:	stmib	sp, {r5, fp}
   13a68:	str	r3, [sp, #12]
   13a6c:	ldr	r3, [r4]
   13a70:	ldr	r1, [sp, #36]	; 0x24
   13a74:	str	r3, [sp]
   13a78:	mov	r3, sl
   13a7c:	str	r0, [sp, #32]
   13a80:	bl	1297c <_obstack_memory_used@@Base+0x218>
   13a84:	ldr	r3, [sp, #28]
   13a88:	cmp	r6, #0
   13a8c:	str	r3, [r8]
   13a90:	ldr	r0, [sp, #32]
   13a94:	strne	r7, [r6]
   13a98:	add	sp, sp, #44	; 0x2c
   13a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa0:	muleq	r2, r4, r2
   13aa4:	mov	r3, r2
   13aa8:	mov	r2, #0
   13aac:	b	139d0 <_obstack_memory_used@@Base+0x126c>
   13ab0:	push	{r4, r5, r6, r7, r8, lr}
   13ab4:	mov	r6, #1
   13ab8:	ldr	r4, [pc, #104]	; 13b28 <_obstack_memory_used@@Base+0x13c4>
   13abc:	ldr	r5, [r4]
   13ac0:	add	r7, r5, #12
   13ac4:	ldr	r3, [r4, #4]
   13ac8:	add	r7, r7, #8
   13acc:	cmp	r6, r3
   13ad0:	blt	13b18 <_obstack_memory_used@@Base+0x13b4>
   13ad4:	ldr	r0, [r5, #4]
   13ad8:	ldr	r6, [pc, #76]	; 13b2c <_obstack_memory_used@@Base+0x13c8>
   13adc:	cmp	r0, r6
   13ae0:	beq	13af4 <_obstack_memory_used@@Base+0x1390>
   13ae4:	bl	121e0 <close@plt+0x1178>
   13ae8:	mov	r3, #256	; 0x100
   13aec:	str	r3, [r4, #8]
   13af0:	str	r6, [r4, #12]
   13af4:	ldr	r6, [pc, #52]	; 13b30 <_obstack_memory_used@@Base+0x13cc>
   13af8:	cmp	r5, r6
   13afc:	beq	13b0c <_obstack_memory_used@@Base+0x13a8>
   13b00:	mov	r0, r5
   13b04:	bl	121e0 <close@plt+0x1178>
   13b08:	str	r6, [r4]
   13b0c:	mov	r3, #1
   13b10:	str	r3, [r4, #4]
   13b14:	pop	{r4, r5, r6, r7, r8, pc}
   13b18:	ldr	r0, [r7, #-8]
   13b1c:	bl	121e0 <close@plt+0x1178>
   13b20:	add	r6, r6, #1
   13b24:	b	13ac4 <_obstack_memory_used@@Base+0x1360>
   13b28:	strdeq	r7, [r2], -r8
   13b2c:	muleq	r2, r4, r1
   13b30:	andeq	r7, r2, r0, lsl #2
   13b34:	ldr	r3, [pc, #4]	; 13b40 <_obstack_memory_used@@Base+0x13dc>
   13b38:	mvn	r2, #0
   13b3c:	b	136b0 <_obstack_memory_used@@Base+0xf4c>
   13b40:	muleq	r2, r4, r2
   13b44:	ldr	r3, [pc]	; 13b4c <_obstack_memory_used@@Base+0x13e8>
   13b48:	b	136b0 <_obstack_memory_used@@Base+0xf4c>
   13b4c:	muleq	r2, r4, r2
   13b50:	mov	r1, r0
   13b54:	mov	r0, #0
   13b58:	b	13b34 <_obstack_memory_used@@Base+0x13d0>
   13b5c:	mov	r2, r1
   13b60:	mov	r1, r0
   13b64:	mov	r0, #0
   13b68:	b	13b44 <_obstack_memory_used@@Base+0x13e0>
   13b6c:	push	{r4, r5, lr}
   13b70:	sub	sp, sp, #52	; 0x34
   13b74:	mov	r5, r2
   13b78:	mov	r4, r0
   13b7c:	mov	r0, sp
   13b80:	bl	12838 <_obstack_memory_used@@Base+0xd4>
   13b84:	mov	r3, sp
   13b88:	mvn	r2, #0
   13b8c:	mov	r1, r5
   13b90:	mov	r0, r4
   13b94:	bl	136b0 <_obstack_memory_used@@Base+0xf4c>
   13b98:	add	sp, sp, #52	; 0x34
   13b9c:	pop	{r4, r5, pc}
   13ba0:	push	{r4, r5, r6, lr}
   13ba4:	sub	sp, sp, #48	; 0x30
   13ba8:	mov	r5, r2
   13bac:	mov	r6, r3
   13bb0:	mov	r4, r0
   13bb4:	mov	r0, sp
   13bb8:	bl	12838 <_obstack_memory_used@@Base+0xd4>
   13bbc:	mov	r3, sp
   13bc0:	mov	r2, r6
   13bc4:	mov	r1, r5
   13bc8:	mov	r0, r4
   13bcc:	bl	136b0 <_obstack_memory_used@@Base+0xf4c>
   13bd0:	add	sp, sp, #48	; 0x30
   13bd4:	pop	{r4, r5, r6, pc}
   13bd8:	mov	r2, r1
   13bdc:	mov	r1, r0
   13be0:	mov	r0, #0
   13be4:	b	13b6c <_obstack_memory_used@@Base+0x1408>
   13be8:	mov	r3, r2
   13bec:	mov	r2, r1
   13bf0:	mov	r1, r0
   13bf4:	mov	r0, #0
   13bf8:	b	13ba0 <_obstack_memory_used@@Base+0x143c>
   13bfc:	push	{r4, r5, r6, lr}
   13c00:	mov	r4, r0
   13c04:	ldr	lr, [pc, #80]	; 13c5c <_obstack_memory_used@@Base+0x14f8>
   13c08:	mov	r5, r1
   13c0c:	mov	r6, r2
   13c10:	ldm	lr!, {r0, r1, r2, r3}
   13c14:	sub	sp, sp, #48	; 0x30
   13c18:	mov	ip, sp
   13c1c:	stmia	ip!, {r0, r1, r2, r3}
   13c20:	ldm	lr!, {r0, r1, r2, r3}
   13c24:	stmia	ip!, {r0, r1, r2, r3}
   13c28:	ldm	lr, {r0, r1, r2, r3}
   13c2c:	stm	ip, {r0, r1, r2, r3}
   13c30:	mov	r1, r6
   13c34:	mov	r2, #1
   13c38:	mov	r0, sp
   13c3c:	bl	138bc <_obstack_memory_used@@Base+0x1158>
   13c40:	mov	r3, sp
   13c44:	mov	r2, r5
   13c48:	mov	r1, r4
   13c4c:	mov	r0, #0
   13c50:	bl	136b0 <_obstack_memory_used@@Base+0xf4c>
   13c54:	add	sp, sp, #48	; 0x30
   13c58:	pop	{r4, r5, r6, pc}
   13c5c:	muleq	r2, r4, r2
   13c60:	mov	r2, r1
   13c64:	mvn	r1, #0
   13c68:	b	13bfc <_obstack_memory_used@@Base+0x1498>
   13c6c:	mov	r1, #58	; 0x3a
   13c70:	b	13c60 <_obstack_memory_used@@Base+0x14fc>
   13c74:	mov	r2, #58	; 0x3a
   13c78:	b	13bfc <_obstack_memory_used@@Base+0x1498>
   13c7c:	push	{r4, r5, lr}
   13c80:	sub	sp, sp, #100	; 0x64
   13c84:	mov	r4, r0
   13c88:	mov	r0, sp
   13c8c:	mov	r5, r2
   13c90:	bl	12838 <_obstack_memory_used@@Base+0xd4>
   13c94:	mov	ip, sp
   13c98:	add	lr, sp, #48	; 0x30
   13c9c:	ldm	ip!, {r0, r1, r2, r3}
   13ca0:	stmia	lr!, {r0, r1, r2, r3}
   13ca4:	ldm	ip!, {r0, r1, r2, r3}
   13ca8:	stmia	lr!, {r0, r1, r2, r3}
   13cac:	ldm	ip, {r0, r1, r2, r3}
   13cb0:	stm	lr, {r0, r1, r2, r3}
   13cb4:	mov	r2, #1
   13cb8:	mov	r1, #58	; 0x3a
   13cbc:	add	r0, sp, #48	; 0x30
   13cc0:	bl	138bc <_obstack_memory_used@@Base+0x1158>
   13cc4:	add	r3, sp, #48	; 0x30
   13cc8:	mvn	r2, #0
   13ccc:	mov	r1, r5
   13cd0:	mov	r0, r4
   13cd4:	bl	136b0 <_obstack_memory_used@@Base+0xf4c>
   13cd8:	add	sp, sp, #100	; 0x64
   13cdc:	pop	{r4, r5, pc}
   13ce0:	push	{r4, r5, r6, r7, lr}
   13ce4:	mov	r4, r0
   13ce8:	ldr	lr, [pc, #84]	; 13d44 <_obstack_memory_used@@Base+0x15e0>
   13cec:	mov	r6, r1
   13cf0:	mov	r7, r2
   13cf4:	mov	r5, r3
   13cf8:	ldm	lr!, {r0, r1, r2, r3}
   13cfc:	sub	sp, sp, #52	; 0x34
   13d00:	mov	ip, sp
   13d04:	stmia	ip!, {r0, r1, r2, r3}
   13d08:	ldm	lr!, {r0, r1, r2, r3}
   13d0c:	stmia	ip!, {r0, r1, r2, r3}
   13d10:	ldm	lr, {r0, r1, r2, r3}
   13d14:	stm	ip, {r0, r1, r2, r3}
   13d18:	mov	r2, r7
   13d1c:	mov	r1, r6
   13d20:	mov	r0, sp
   13d24:	bl	13918 <_obstack_memory_used@@Base+0x11b4>
   13d28:	mov	r3, sp
   13d2c:	ldr	r2, [sp, #72]	; 0x48
   13d30:	mov	r1, r5
   13d34:	mov	r0, r4
   13d38:	bl	136b0 <_obstack_memory_used@@Base+0xf4c>
   13d3c:	add	sp, sp, #52	; 0x34
   13d40:	pop	{r4, r5, r6, r7, pc}
   13d44:	muleq	r2, r4, r2
   13d48:	mvn	ip, #0
   13d4c:	push	{r0, r1, r2, lr}
   13d50:	str	ip, [sp]
   13d54:	bl	13ce0 <_obstack_memory_used@@Base+0x157c>
   13d58:	add	sp, sp, #12
   13d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d60:	mov	r3, r2
   13d64:	mov	r2, r1
   13d68:	mov	r1, r0
   13d6c:	mov	r0, #0
   13d70:	b	13d48 <_obstack_memory_used@@Base+0x15e4>
   13d74:	push	{r0, r1, r2, lr}
   13d78:	str	r3, [sp]
   13d7c:	mov	r3, r2
   13d80:	mov	r2, r1
   13d84:	mov	r1, r0
   13d88:	mov	r0, #0
   13d8c:	bl	13ce0 <_obstack_memory_used@@Base+0x157c>
   13d90:	add	sp, sp, #12
   13d94:	pop	{pc}		; (ldr pc, [sp], #4)
   13d98:	ldr	r3, [pc]	; 13da0 <_obstack_memory_used@@Base+0x163c>
   13d9c:	b	136b0 <_obstack_memory_used@@Base+0xf4c>
   13da0:	andeq	r7, r2, r8, lsl #2
   13da4:	mov	r2, r1
   13da8:	mov	r1, r0
   13dac:	mov	r0, #0
   13db0:	b	13d98 <_obstack_memory_used@@Base+0x1634>
   13db4:	mvn	r2, #0
   13db8:	b	13d98 <_obstack_memory_used@@Base+0x1634>
   13dbc:	mov	r1, r0
   13dc0:	mov	r0, #0
   13dc4:	b	13db4 <_obstack_memory_used@@Base+0x1650>
   13dc8:	push	{r4, r5, r6, lr}
   13dcc:	sub	sp, sp, #32
   13dd0:	cmp	r1, #0
   13dd4:	mov	r5, r0
   13dd8:	ldr	r4, [sp, #48]	; 0x30
   13ddc:	ldr	r6, [sp, #52]	; 0x34
   13de0:	beq	13e94 <_obstack_memory_used@@Base+0x1730>
   13de4:	stm	sp, {r2, r3}
   13de8:	mov	r3, r1
   13dec:	ldr	r2, [pc, #860]	; 14150 <_obstack_memory_used@@Base+0x19ec>
   13df0:	mov	r1, #1
   13df4:	bl	10fe4 <__fprintf_chk@plt>
   13df8:	mov	r2, #5
   13dfc:	ldr	r1, [pc, #848]	; 14154 <_obstack_memory_used@@Base+0x19f0>
   13e00:	mov	r0, #0
   13e04:	bl	10e88 <dcgettext@plt>
   13e08:	ldr	r3, [pc, #840]	; 14158 <_obstack_memory_used@@Base+0x19f4>
   13e0c:	ldr	r2, [pc, #840]	; 1415c <_obstack_memory_used@@Base+0x19f8>
   13e10:	str	r3, [sp]
   13e14:	mov	r1, #1
   13e18:	mov	r3, r0
   13e1c:	mov	r0, r5
   13e20:	bl	10fe4 <__fprintf_chk@plt>
   13e24:	mov	r1, r5
   13e28:	mov	r0, #10
   13e2c:	bl	10e7c <fputc_unlocked@plt>
   13e30:	mov	r2, #5
   13e34:	ldr	r1, [pc, #804]	; 14160 <_obstack_memory_used@@Base+0x19fc>
   13e38:	mov	r0, #0
   13e3c:	bl	10e88 <dcgettext@plt>
   13e40:	mov	r1, #1
   13e44:	ldr	r3, [pc, #792]	; 14164 <_obstack_memory_used@@Base+0x1a00>
   13e48:	mov	r2, r0
   13e4c:	mov	r0, r5
   13e50:	bl	10fe4 <__fprintf_chk@plt>
   13e54:	mov	r1, r5
   13e58:	mov	r0, #10
   13e5c:	bl	10e7c <fputc_unlocked@plt>
   13e60:	cmp	r6, #9
   13e64:	ldrls	pc, [pc, r6, lsl #2]
   13e68:	b	14144 <_obstack_memory_used@@Base+0x19e0>
   13e6c:	andeq	r3, r1, r4, lsl #31
   13e70:	andeq	r3, r1, ip, lsr #29
   13e74:	ldrdeq	r3, [r1], -r8
   13e78:	andeq	r3, r1, ip, lsl #30
   13e7c:	andeq	r3, r1, r8, asr #30
   13e80:	andeq	r3, r1, ip, lsl #31
   13e84:	ldrdeq	r3, [r1], -r4
   13e88:	andeq	r4, r1, r4, lsr #32
   13e8c:	andeq	r4, r1, ip, ror r0
   13e90:	ldrdeq	r4, [r1], -ip
   13e94:	str	r3, [sp]
   13e98:	mov	r1, #1
   13e9c:	mov	r3, r2
   13ea0:	ldr	r2, [pc, #704]	; 14168 <_obstack_memory_used@@Base+0x1a04>
   13ea4:	bl	10fe4 <__fprintf_chk@plt>
   13ea8:	b	13df8 <_obstack_memory_used@@Base+0x1694>
   13eac:	mov	r2, #5
   13eb0:	ldr	r1, [pc, #692]	; 1416c <_obstack_memory_used@@Base+0x1a08>
   13eb4:	mov	r0, #0
   13eb8:	bl	10e88 <dcgettext@plt>
   13ebc:	ldr	r3, [r4]
   13ec0:	mov	r1, #1
   13ec4:	mov	r2, r0
   13ec8:	mov	r0, r5
   13ecc:	add	sp, sp, #32
   13ed0:	pop	{r4, r5, r6, lr}
   13ed4:	b	10fe4 <__fprintf_chk@plt>
   13ed8:	mov	r2, #5
   13edc:	ldr	r1, [pc, #652]	; 14170 <_obstack_memory_used@@Base+0x1a0c>
   13ee0:	mov	r0, #0
   13ee4:	bl	10e88 <dcgettext@plt>
   13ee8:	ldr	r3, [r4, #4]
   13eec:	mov	r1, #1
   13ef0:	str	r3, [sp, #48]	; 0x30
   13ef4:	ldr	r3, [r4]
   13ef8:	mov	r2, r0
   13efc:	mov	r0, r5
   13f00:	add	sp, sp, #32
   13f04:	pop	{r4, r5, r6, lr}
   13f08:	b	10fe4 <__fprintf_chk@plt>
   13f0c:	mov	r2, #5
   13f10:	ldr	r1, [pc, #604]	; 14174 <_obstack_memory_used@@Base+0x1a10>
   13f14:	mov	r0, #0
   13f18:	bl	10e88 <dcgettext@plt>
   13f1c:	ldr	r3, [r4, #8]
   13f20:	mov	r1, #1
   13f24:	str	r3, [sp, #52]	; 0x34
   13f28:	ldr	r3, [r4, #4]
   13f2c:	str	r3, [sp, #48]	; 0x30
   13f30:	ldr	r3, [r4]
   13f34:	mov	r2, r0
   13f38:	mov	r0, r5
   13f3c:	add	sp, sp, #32
   13f40:	pop	{r4, r5, r6, lr}
   13f44:	b	10fe4 <__fprintf_chk@plt>
   13f48:	mov	r2, #5
   13f4c:	ldr	r1, [pc, #548]	; 14178 <_obstack_memory_used@@Base+0x1a14>
   13f50:	mov	r0, #0
   13f54:	bl	10e88 <dcgettext@plt>
   13f58:	ldr	r3, [r4, #12]
   13f5c:	mov	r1, #1
   13f60:	str	r3, [sp, #8]
   13f64:	ldr	r3, [r4, #8]
   13f68:	str	r3, [sp, #4]
   13f6c:	ldr	r3, [r4, #4]
   13f70:	str	r3, [sp]
   13f74:	ldr	r3, [r4]
   13f78:	mov	r2, r0
   13f7c:	mov	r0, r5
   13f80:	bl	10fe4 <__fprintf_chk@plt>
   13f84:	add	sp, sp, #32
   13f88:	pop	{r4, r5, r6, pc}
   13f8c:	mov	r2, #5
   13f90:	ldr	r1, [pc, #484]	; 1417c <_obstack_memory_used@@Base+0x1a18>
   13f94:	mov	r0, #0
   13f98:	bl	10e88 <dcgettext@plt>
   13f9c:	ldr	r3, [r4, #16]
   13fa0:	mov	r1, #1
   13fa4:	str	r3, [sp, #12]
   13fa8:	ldr	r3, [r4, #12]
   13fac:	str	r3, [sp, #8]
   13fb0:	ldr	r3, [r4, #8]
   13fb4:	str	r3, [sp, #4]
   13fb8:	ldr	r3, [r4, #4]
   13fbc:	str	r3, [sp]
   13fc0:	ldr	r3, [r4]
   13fc4:	mov	r2, r0
   13fc8:	mov	r0, r5
   13fcc:	bl	10fe4 <__fprintf_chk@plt>
   13fd0:	b	13f84 <_obstack_memory_used@@Base+0x1820>
   13fd4:	mov	r2, #5
   13fd8:	ldr	r1, [pc, #416]	; 14180 <_obstack_memory_used@@Base+0x1a1c>
   13fdc:	mov	r0, #0
   13fe0:	bl	10e88 <dcgettext@plt>
   13fe4:	ldr	r3, [r4, #20]
   13fe8:	mov	r1, #1
   13fec:	str	r3, [sp, #16]
   13ff0:	ldr	r3, [r4, #16]
   13ff4:	str	r3, [sp, #12]
   13ff8:	ldr	r3, [r4, #12]
   13ffc:	str	r3, [sp, #8]
   14000:	ldr	r3, [r4, #8]
   14004:	str	r3, [sp, #4]
   14008:	ldr	r3, [r4, #4]
   1400c:	str	r3, [sp]
   14010:	ldr	r3, [r4]
   14014:	mov	r2, r0
   14018:	mov	r0, r5
   1401c:	bl	10fe4 <__fprintf_chk@plt>
   14020:	b	13f84 <_obstack_memory_used@@Base+0x1820>
   14024:	mov	r2, #5
   14028:	ldr	r1, [pc, #340]	; 14184 <_obstack_memory_used@@Base+0x1a20>
   1402c:	mov	r0, #0
   14030:	bl	10e88 <dcgettext@plt>
   14034:	ldr	r3, [r4, #24]
   14038:	mov	r1, #1
   1403c:	str	r3, [sp, #20]
   14040:	ldr	r3, [r4, #20]
   14044:	str	r3, [sp, #16]
   14048:	ldr	r3, [r4, #16]
   1404c:	str	r3, [sp, #12]
   14050:	ldr	r3, [r4, #12]
   14054:	str	r3, [sp, #8]
   14058:	ldr	r3, [r4, #8]
   1405c:	str	r3, [sp, #4]
   14060:	ldr	r3, [r4, #4]
   14064:	str	r3, [sp]
   14068:	ldr	r3, [r4]
   1406c:	mov	r2, r0
   14070:	mov	r0, r5
   14074:	bl	10fe4 <__fprintf_chk@plt>
   14078:	b	13f84 <_obstack_memory_used@@Base+0x1820>
   1407c:	mov	r2, #5
   14080:	ldr	r1, [pc, #256]	; 14188 <_obstack_memory_used@@Base+0x1a24>
   14084:	mov	r0, #0
   14088:	bl	10e88 <dcgettext@plt>
   1408c:	ldr	r3, [r4, #28]
   14090:	mov	r1, #1
   14094:	str	r3, [sp, #24]
   14098:	ldr	r3, [r4, #24]
   1409c:	str	r3, [sp, #20]
   140a0:	ldr	r3, [r4, #20]
   140a4:	str	r3, [sp, #16]
   140a8:	ldr	r3, [r4, #16]
   140ac:	str	r3, [sp, #12]
   140b0:	ldr	r3, [r4, #12]
   140b4:	str	r3, [sp, #8]
   140b8:	ldr	r3, [r4, #8]
   140bc:	str	r3, [sp, #4]
   140c0:	ldr	r3, [r4, #4]
   140c4:	str	r3, [sp]
   140c8:	ldr	r3, [r4]
   140cc:	mov	r2, r0
   140d0:	mov	r0, r5
   140d4:	bl	10fe4 <__fprintf_chk@plt>
   140d8:	b	13f84 <_obstack_memory_used@@Base+0x1820>
   140dc:	ldr	r1, [pc, #168]	; 1418c <_obstack_memory_used@@Base+0x1a28>
   140e0:	mov	r2, #5
   140e4:	mov	r0, #0
   140e8:	bl	10e88 <dcgettext@plt>
   140ec:	ldr	r3, [r4, #32]
   140f0:	mov	r1, #1
   140f4:	str	r3, [sp, #28]
   140f8:	ldr	r3, [r4, #28]
   140fc:	str	r3, [sp, #24]
   14100:	ldr	r3, [r4, #24]
   14104:	str	r3, [sp, #20]
   14108:	ldr	r3, [r4, #20]
   1410c:	str	r3, [sp, #16]
   14110:	ldr	r3, [r4, #16]
   14114:	str	r3, [sp, #12]
   14118:	ldr	r3, [r4, #12]
   1411c:	str	r3, [sp, #8]
   14120:	ldr	r3, [r4, #8]
   14124:	str	r3, [sp, #4]
   14128:	ldr	r3, [r4, #4]
   1412c:	str	r3, [sp]
   14130:	ldr	r3, [r4]
   14134:	mov	r2, r0
   14138:	mov	r0, r5
   1413c:	bl	10fe4 <__fprintf_chk@plt>
   14140:	b	13f84 <_obstack_memory_used@@Base+0x1820>
   14144:	mov	r2, #5
   14148:	ldr	r1, [pc, #64]	; 14190 <_obstack_memory_used@@Base+0x1a2c>
   1414c:	b	140e4 <_obstack_memory_used@@Base+0x1980>
   14150:	muleq	r1, r9, sl
   14154:	andeq	r6, r1, ip, lsr #21
   14158:	andeq	r0, r0, r6, ror #15
   1415c:	andeq	r6, r1, sl, ror sp
   14160:			; <UNDEFINED> instruction: 0x00016ab0
   14164:	andeq	r6, r1, fp, asr fp
   14168:	andeq	r6, r1, r5, lsr #21
   1416c:	andeq	r6, r1, sp, ror fp
   14170:	andeq	r6, r1, sp, lsl #23
   14174:	andeq	r6, r1, r4, lsr #23
   14178:	andeq	r6, r1, r0, asr #23
   1417c:	andeq	r6, r1, r0, ror #23
   14180:	andeq	r6, r1, r4, lsl #24
   14184:	andeq	r6, r1, ip, lsr #24
   14188:	andeq	r6, r1, r8, asr ip
   1418c:	andeq	r6, r1, r8, lsl #25
   14190:			; <UNDEFINED> instruction: 0x00016cbc
   14194:	push	{r0, r1, r4, lr}
   14198:	mov	ip, #0
   1419c:	ldr	lr, [sp, #16]
   141a0:	ldr	r4, [lr, ip, lsl #2]
   141a4:	cmp	r4, #0
   141a8:	bne	141c0 <_obstack_memory_used@@Base+0x1a5c>
   141ac:	str	ip, [sp, #4]
   141b0:	str	lr, [sp]
   141b4:	bl	13dc8 <_obstack_memory_used@@Base+0x1664>
   141b8:	add	sp, sp, #8
   141bc:	pop	{r4, pc}
   141c0:	add	ip, ip, #1
   141c4:	b	141a0 <_obstack_memory_used@@Base+0x1a3c>
   141c8:	push	{r4, r5, lr}
   141cc:	sub	sp, sp, #52	; 0x34
   141d0:	mov	ip, #0
   141d4:	ldr	r5, [sp, #64]	; 0x40
   141d8:	add	lr, sp, #8
   141dc:	ldr	r4, [r5, ip, lsl #2]
   141e0:	cmp	r4, #0
   141e4:	str	r4, [lr, ip, lsl #2]
   141e8:	beq	141f8 <_obstack_memory_used@@Base+0x1a94>
   141ec:	add	ip, ip, #1
   141f0:	cmp	ip, #10
   141f4:	bne	141dc <_obstack_memory_used@@Base+0x1a78>
   141f8:	str	ip, [sp, #4]
   141fc:	str	lr, [sp]
   14200:	bl	13dc8 <_obstack_memory_used@@Base+0x1664>
   14204:	add	sp, sp, #52	; 0x34
   14208:	pop	{r4, r5, pc}
   1420c:	push	{r3}		; (str r3, [sp, #-4]!)
   14210:	push	{r0, r1, r2, r3, lr}
   14214:	add	r3, sp, #24
   14218:	str	r3, [sp, #12]
   1421c:	str	r3, [sp]
   14220:	ldr	r3, [sp, #20]
   14224:	bl	141c8 <_obstack_memory_used@@Base+0x1a64>
   14228:	add	sp, sp, #16
   1422c:	pop	{lr}		; (ldr lr, [sp], #4)
   14230:	add	sp, sp, #4
   14234:	bx	lr
   14238:	ldr	r3, [pc, #116]	; 142b4 <_obstack_memory_used@@Base+0x1b50>
   1423c:	push	{r4, lr}
   14240:	mov	r0, #10
   14244:	ldr	r1, [r3]
   14248:	bl	10e7c <fputc_unlocked@plt>
   1424c:	mov	r2, #5
   14250:	ldr	r1, [pc, #96]	; 142b8 <_obstack_memory_used@@Base+0x1b54>
   14254:	mov	r0, #0
   14258:	bl	10e88 <dcgettext@plt>
   1425c:	ldr	r2, [pc, #88]	; 142bc <_obstack_memory_used@@Base+0x1b58>
   14260:	mov	r1, r0
   14264:	mov	r0, #1
   14268:	bl	10fcc <__printf_chk@plt>
   1426c:	mov	r2, #5
   14270:	ldr	r1, [pc, #72]	; 142c0 <_obstack_memory_used@@Base+0x1b5c>
   14274:	mov	r0, #0
   14278:	bl	10e88 <dcgettext@plt>
   1427c:	ldr	r3, [pc, #64]	; 142c4 <_obstack_memory_used@@Base+0x1b60>
   14280:	ldr	r2, [pc, #64]	; 142c8 <_obstack_memory_used@@Base+0x1b64>
   14284:	mov	r1, r0
   14288:	mov	r0, #1
   1428c:	bl	10fcc <__printf_chk@plt>
   14290:	mov	r2, #5
   14294:	ldr	r1, [pc, #48]	; 142cc <_obstack_memory_used@@Base+0x1b68>
   14298:	mov	r0, #0
   1429c:	bl	10e88 <dcgettext@plt>
   142a0:	ldr	r2, [pc, #40]	; 142d0 <_obstack_memory_used@@Base+0x1b6c>
   142a4:	pop	{r4, lr}
   142a8:	mov	r1, r0
   142ac:	mov	r0, #1
   142b0:	b	10fcc <__printf_chk@plt>
   142b4:	andeq	r7, r2, r4, asr r1
   142b8:	strdeq	r6, [r1], -r8
   142bc:	andeq	r6, r1, ip, lsl #26
   142c0:	andeq	r6, r1, r2, lsr #26
   142c4:	andeq	r6, r1, r1, lsl #11
   142c8:	andeq	r6, r1, r9, lsr #11
   142cc:	andeq	r6, r1, r6, lsr sp
   142d0:	andeq	r6, r1, sp, asr sp
   142d4:	push	{r4, lr}
   142d8:	bl	147f0 <_obstack_memory_used@@Base+0x208c>
   142dc:	cmp	r0, #0
   142e0:	popne	{r4, pc}
   142e4:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   142e8:	push	{r4, lr}
   142ec:	bl	147f0 <_obstack_memory_used@@Base+0x208c>
   142f0:	cmp	r0, #0
   142f4:	popne	{r4, pc}
   142f8:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   142fc:	b	142d4 <_obstack_memory_used@@Base+0x1b70>
   14300:	push	{r4, r5, r6, lr}
   14304:	mov	r5, r0
   14308:	mov	r4, r1
   1430c:	bl	14830 <_obstack_memory_used@@Base+0x20cc>
   14310:	cmp	r0, #0
   14314:	popne	{r4, r5, r6, pc}
   14318:	adds	r4, r4, #0
   1431c:	movne	r4, #1
   14320:	cmp	r5, #0
   14324:	orreq	r4, r4, #1
   14328:	cmp	r4, #0
   1432c:	popeq	{r4, r5, r6, pc}
   14330:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   14334:	push	{r4, lr}
   14338:	cmp	r1, #0
   1433c:	orreq	r1, r1, #1
   14340:	bl	14830 <_obstack_memory_used@@Base+0x20cc>
   14344:	cmp	r0, #0
   14348:	popne	{r4, pc}
   1434c:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   14350:	push	{r4, r5, r6, lr}
   14354:	mov	r6, r0
   14358:	mov	r5, r1
   1435c:	mov	r4, r2
   14360:	bl	14980 <_obstack_memory_used@@Base+0x221c>
   14364:	cmp	r0, #0
   14368:	popne	{r4, r5, r6, pc}
   1436c:	cmp	r6, #0
   14370:	beq	14380 <_obstack_memory_used@@Base+0x1c1c>
   14374:	cmp	r5, #0
   14378:	cmpne	r4, #0
   1437c:	popeq	{r4, r5, r6, pc}
   14380:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   14384:	b	14350 <_obstack_memory_used@@Base+0x1bec>
   14388:	cmp	r2, #0
   1438c:	cmpne	r1, #0
   14390:	moveq	r2, #1
   14394:	moveq	r1, r2
   14398:	push	{r4, lr}
   1439c:	bl	14980 <_obstack_memory_used@@Base+0x221c>
   143a0:	cmp	r0, #0
   143a4:	popne	{r4, pc}
   143a8:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   143ac:	mov	r2, r1
   143b0:	mov	r1, r0
   143b4:	mov	r0, #0
   143b8:	b	14350 <_obstack_memory_used@@Base+0x1bec>
   143bc:	mov	r2, r1
   143c0:	mov	r1, r0
   143c4:	mov	r0, #0
   143c8:	b	14388 <_obstack_memory_used@@Base+0x1c24>
   143cc:	push	{r4, r5, r6, r7, r8, lr}
   143d0:	subs	r7, r0, #0
   143d4:	mov	r5, r1
   143d8:	mov	r6, r2
   143dc:	ldr	r4, [r1]
   143e0:	bne	1441c <_obstack_memory_used@@Base+0x1cb8>
   143e4:	cmp	r4, #0
   143e8:	bne	14404 <_obstack_memory_used@@Base+0x1ca0>
   143ec:	mov	r1, r2
   143f0:	mov	r0, #64	; 0x40
   143f4:	bl	14aac <_obstack_memory_used@@Base+0x2348>
   143f8:	cmp	r0, #0
   143fc:	movne	r4, r0
   14400:	addeq	r4, r0, #1
   14404:	mov	r2, r6
   14408:	mov	r1, r4
   1440c:	mov	r0, r7
   14410:	bl	14350 <_obstack_memory_used@@Base+0x1bec>
   14414:	str	r4, [r5]
   14418:	pop	{r4, r5, r6, r7, r8, pc}
   1441c:	lsr	r2, r4, #1
   14420:	add	r3, r2, #1
   14424:	mvn	r3, r3
   14428:	cmp	r4, r3
   1442c:	addls	r4, r4, #1
   14430:	addls	r4, r4, r2
   14434:	bls	14404 <_obstack_memory_used@@Base+0x1ca0>
   14438:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   1443c:	mov	r2, #1
   14440:	b	143cc <_obstack_memory_used@@Base+0x1c68>
   14444:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14448:	mov	sl, r0
   1444c:	ldr	r8, [r1]
   14450:	mov	fp, r1
   14454:	mov	r5, r2
   14458:	asrs	r4, r8, #1
   1445c:	mov	r9, r3
   14460:	ldr	r7, [sp, #48]	; 0x30
   14464:	bpl	14500 <_obstack_memory_used@@Base+0x1d9c>
   14468:	rsb	r2, r4, #-2147483648	; 0x80000000
   1446c:	cmp	r8, r2
   14470:	movge	r2, #0
   14474:	movlt	r2, #1
   14478:	mvn	r3, r9
   1447c:	cmp	r2, #0
   14480:	lsr	r3, r3, #31
   14484:	addeq	r4, r4, r8
   14488:	mvnne	r4, #-2147483648	; 0x80000000
   1448c:	mov	r0, r3
   14490:	cmp	r9, r4
   14494:	movge	r0, #0
   14498:	andlt	r0, r0, #1
   1449c:	cmp	r0, #0
   144a0:	str	r3, [sp, #4]
   144a4:	bne	14674 <_obstack_memory_used@@Base+0x1f10>
   144a8:	cmp	r7, #0
   144ac:	bge	145c0 <_obstack_memory_used@@Base+0x1e5c>
   144b0:	cmp	r4, #0
   144b4:	bge	14518 <_obstack_memory_used@@Base+0x1db4>
   144b8:	mov	r1, r7
   144bc:	mvn	r0, #-2147483648	; 0x80000000
   144c0:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   144c4:	cmp	r0, r4
   144c8:	movle	r0, #0
   144cc:	movgt	r0, #1
   144d0:	cmp	r0, #0
   144d4:	mvnne	r6, #-2147483648	; 0x80000000
   144d8:	beq	14528 <_obstack_memory_used@@Base+0x1dc4>
   144dc:	mov	r1, r7
   144e0:	mov	r0, r6
   144e4:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   144e8:	mov	r1, r7
   144ec:	mov	r4, r0
   144f0:	mov	r0, r6
   144f4:	bl	14ed8 <_obstack_memory_used@@Base+0x2774>
   144f8:	sub	r1, r6, r1
   144fc:	b	14538 <_obstack_memory_used@@Base+0x1dd4>
   14500:	mvn	r2, #-2147483648	; 0x80000000
   14504:	sub	r2, r2, r4
   14508:	cmp	r8, r2
   1450c:	movle	r2, #0
   14510:	movgt	r2, #1
   14514:	b	14478 <_obstack_memory_used@@Base+0x1d14>
   14518:	cmn	r7, #1
   1451c:	movne	r1, r7
   14520:	movne	r0, #-2147483648	; 0x80000000
   14524:	bne	1468c <_obstack_memory_used@@Base+0x1f28>
   14528:	mul	r1, r7, r4
   1452c:	cmp	r1, #63	; 0x3f
   14530:	movle	r6, #64	; 0x40
   14534:	ble	144dc <_obstack_memory_used@@Base+0x1d78>
   14538:	cmp	sl, #0
   1453c:	sub	r2, r4, r8
   14540:	streq	sl, [fp]
   14544:	cmp	r2, r5
   14548:	bge	1461c <_obstack_memory_used@@Base+0x1eb8>
   1454c:	cmp	r5, #0
   14550:	bge	145e8 <_obstack_memory_used@@Base+0x1e84>
   14554:	rsb	r2, r5, #-2147483648	; 0x80000000
   14558:	cmp	r8, r2
   1455c:	movge	r2, #0
   14560:	movlt	r2, #1
   14564:	cmp	r2, #0
   14568:	bne	145bc <_obstack_memory_used@@Base+0x1e58>
   1456c:	ldr	r0, [sp, #4]
   14570:	add	r5, r8, r5
   14574:	cmp	r9, r5
   14578:	movge	r0, #0
   1457c:	andlt	r0, r0, #1
   14580:	cmp	r0, #0
   14584:	mov	r4, r5
   14588:	bne	145bc <_obstack_memory_used@@Base+0x1e58>
   1458c:	cmp	r7, #0
   14590:	bge	14630 <_obstack_memory_used@@Base+0x1ecc>
   14594:	cmp	r5, #0
   14598:	bge	14608 <_obstack_memory_used@@Base+0x1ea4>
   1459c:	mov	r1, r7
   145a0:	mvn	r0, #-2147483648	; 0x80000000
   145a4:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   145a8:	cmp	r5, r0
   145ac:	movge	r0, #0
   145b0:	movlt	r0, #1
   145b4:	cmp	r0, #0
   145b8:	beq	14618 <_obstack_memory_used@@Base+0x1eb4>
   145bc:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   145c0:	beq	14528 <_obstack_memory_used@@Base+0x1dc4>
   145c4:	cmp	r4, #0
   145c8:	bge	14684 <_obstack_memory_used@@Base+0x1f20>
   145cc:	cmn	r4, #1
   145d0:	beq	14528 <_obstack_memory_used@@Base+0x1dc4>
   145d4:	mov	r1, r4
   145d8:	mov	r0, #-2147483648	; 0x80000000
   145dc:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   145e0:	cmp	r7, r0
   145e4:	b	144c8 <_obstack_memory_used@@Base+0x1d64>
   145e8:	cmp	r8, #0
   145ec:	blt	1456c <_obstack_memory_used@@Base+0x1e08>
   145f0:	mvn	r2, #-2147483648	; 0x80000000
   145f4:	sub	r2, r2, r5
   145f8:	cmp	r8, r2
   145fc:	movle	r2, #0
   14600:	movgt	r2, #1
   14604:	b	14564 <_obstack_memory_used@@Base+0x1e00>
   14608:	cmn	r7, #1
   1460c:	movne	r1, r7
   14610:	movne	r0, #-2147483648	; 0x80000000
   14614:	bne	14668 <_obstack_memory_used@@Base+0x1f04>
   14618:	mul	r1, r5, r7
   1461c:	mov	r0, sl
   14620:	bl	14300 <_obstack_memory_used@@Base+0x1b9c>
   14624:	str	r4, [fp]
   14628:	add	sp, sp, #12
   1462c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14630:	beq	14618 <_obstack_memory_used@@Base+0x1eb4>
   14634:	cmp	r5, #0
   14638:	movge	r1, r7
   1463c:	mvnge	r0, #-2147483648	; 0x80000000
   14640:	bge	14668 <_obstack_memory_used@@Base+0x1f04>
   14644:	cmn	r5, #1
   14648:	beq	14618 <_obstack_memory_used@@Base+0x1eb4>
   1464c:	mov	r1, r5
   14650:	mov	r0, #-2147483648	; 0x80000000
   14654:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   14658:	cmp	r7, r0
   1465c:	movle	r0, #0
   14660:	movgt	r0, #1
   14664:	b	145b4 <_obstack_memory_used@@Base+0x1e50>
   14668:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   1466c:	cmp	r5, r0
   14670:	b	1465c <_obstack_memory_used@@Base+0x1ef8>
   14674:	cmp	r7, #0
   14678:	mov	r4, r9
   1467c:	blt	14518 <_obstack_memory_used@@Base+0x1db4>
   14680:	beq	14528 <_obstack_memory_used@@Base+0x1dc4>
   14684:	mov	r1, r7
   14688:	mvn	r0, #-2147483648	; 0x80000000
   1468c:	bl	14cb8 <_obstack_memory_used@@Base+0x2554>
   14690:	cmp	r0, r4
   14694:	movge	r0, #0
   14698:	movlt	r0, #1
   1469c:	b	144d0 <_obstack_memory_used@@Base+0x1d6c>
   146a0:	push	{r4, lr}
   146a4:	bl	147a8 <_obstack_memory_used@@Base+0x2044>
   146a8:	cmp	r0, #0
   146ac:	popne	{r4, pc}
   146b0:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   146b4:	mov	r1, #1
   146b8:	b	146a0 <_obstack_memory_used@@Base+0x1f3c>
   146bc:	push	{r4, lr}
   146c0:	bl	147a8 <_obstack_memory_used@@Base+0x2044>
   146c4:	cmp	r0, #0
   146c8:	popne	{r4, pc}
   146cc:	bl	14768 <_obstack_memory_used@@Base+0x2004>
   146d0:	mov	r1, #1
   146d4:	b	146bc <_obstack_memory_used@@Base+0x1f58>
   146d8:	push	{r4, r5, r6, lr}
   146dc:	mov	r4, r1
   146e0:	mov	r5, r0
   146e4:	mov	r0, r1
   146e8:	bl	142d4 <_obstack_memory_used@@Base+0x1b70>
   146ec:	mov	r2, r4
   146f0:	mov	r1, r5
   146f4:	pop	{r4, r5, r6, lr}
   146f8:	b	10e4c <memcpy@plt>
   146fc:	push	{r4, r5, r6, lr}
   14700:	mov	r4, r1
   14704:	mov	r5, r0
   14708:	mov	r0, r1
   1470c:	bl	142e8 <_obstack_memory_used@@Base+0x1b84>
   14710:	mov	r2, r4
   14714:	mov	r1, r5
   14718:	pop	{r4, r5, r6, lr}
   1471c:	b	10e4c <memcpy@plt>
   14720:	push	{r4, r5, r6, lr}
   14724:	mov	r5, r0
   14728:	add	r0, r1, #1
   1472c:	mov	r4, r1
   14730:	bl	142e8 <_obstack_memory_used@@Base+0x1b84>
   14734:	mov	r2, #0
   14738:	mov	r1, r5
   1473c:	strb	r2, [r0, r4]
   14740:	mov	r2, r4
   14744:	pop	{r4, r5, r6, lr}
   14748:	b	10e4c <memcpy@plt>
   1474c:	push	{r4, lr}
   14750:	mov	r4, r0
   14754:	bl	10f9c <strlen@plt>
   14758:	add	r1, r0, #1
   1475c:	mov	r0, r4
   14760:	pop	{r4, lr}
   14764:	b	146d8 <_obstack_memory_used@@Base+0x1f74>
   14768:	ldr	r3, [pc, #44]	; 1479c <_obstack_memory_used@@Base+0x2038>
   1476c:	push	{r4, lr}
   14770:	mov	r2, #5
   14774:	ldr	r1, [pc, #36]	; 147a0 <_obstack_memory_used@@Base+0x203c>
   14778:	mov	r0, #0
   1477c:	ldr	r4, [r3]
   14780:	bl	10e88 <dcgettext@plt>
   14784:	ldr	r2, [pc, #24]	; 147a4 <_obstack_memory_used@@Base+0x2040>
   14788:	mov	r1, #0
   1478c:	mov	r3, r0
   14790:	mov	r0, r4
   14794:	bl	10f00 <error@plt>
   14798:	bl	1105c <abort@plt>
   1479c:	strdeq	r7, [r2], -r0
   147a0:	muleq	r1, r5, r9
   147a4:	andeq	r6, r1, r8, lsl #19
   147a8:	cmp	r1, #0
   147ac:	cmpne	r0, #0
   147b0:	moveq	r1, #1
   147b4:	moveq	r0, r1
   147b8:	umull	r2, r3, r0, r1
   147bc:	adds	r3, r3, #0
   147c0:	movne	r3, #1
   147c4:	cmp	r2, #0
   147c8:	blt	147d8 <_obstack_memory_used@@Base+0x2074>
   147cc:	cmp	r3, #0
   147d0:	bne	147d8 <_obstack_memory_used@@Base+0x2074>
   147d4:	b	10df8 <calloc@plt>
   147d8:	push	{r4, lr}
   147dc:	bl	10fa8 <__errno_location@plt>
   147e0:	mov	r3, #12
   147e4:	str	r3, [r0]
   147e8:	mov	r0, #0
   147ec:	pop	{r4, pc}
   147f0:	cmp	r0, #0
   147f4:	mov	r3, #0
   147f8:	moveq	r0, #1
   147fc:	adds	r3, r3, #0
   14800:	movne	r3, #1
   14804:	cmp	r0, #0
   14808:	blt	14818 <_obstack_memory_used@@Base+0x20b4>
   1480c:	cmp	r3, #0
   14810:	bne	14818 <_obstack_memory_used@@Base+0x20b4>
   14814:	b	10f3c <malloc@plt>
   14818:	push	{r4, lr}
   1481c:	bl	10fa8 <__errno_location@plt>
   14820:	mov	r3, #12
   14824:	str	r3, [r0]
   14828:	mov	r0, #0
   1482c:	pop	{r4, pc}
   14830:	cmp	r0, #0
   14834:	push	{r4, lr}
   14838:	mov	r4, r1
   1483c:	bne	1484c <_obstack_memory_used@@Base+0x20e8>
   14840:	mov	r0, r1
   14844:	pop	{r4, lr}
   14848:	b	147f0 <_obstack_memory_used@@Base+0x208c>
   1484c:	cmp	r1, #0
   14850:	bne	14860 <_obstack_memory_used@@Base+0x20fc>
   14854:	bl	121e0 <close@plt+0x1178>
   14858:	mov	r0, #0
   1485c:	pop	{r4, pc}
   14860:	cmp	r1, #0
   14864:	blt	14874 <_obstack_memory_used@@Base+0x2110>
   14868:	mov	r3, #0
   1486c:	cmp	r3, r3
   14870:	beq	14884 <_obstack_memory_used@@Base+0x2120>
   14874:	bl	10fa8 <__errno_location@plt>
   14878:	mov	r3, #12
   1487c:	str	r3, [r0]
   14880:	b	14858 <_obstack_memory_used@@Base+0x20f4>
   14884:	pop	{r4, lr}
   14888:	b	10ea0 <realloc@plt>
   1488c:	push	{r4, r5, r6, lr}
   14890:	mov	r4, r0
   14894:	bl	10edc <__fpending@plt>
   14898:	mov	r5, r0
   1489c:	mov	r0, r4
   148a0:	bl	10ee8 <ferror_unlocked@plt>
   148a4:	mov	r6, r0
   148a8:	mov	r0, r4
   148ac:	bl	120e8 <close@plt+0x1080>
   148b0:	cmp	r6, #0
   148b4:	mov	r4, r0
   148b8:	bne	148e4 <_obstack_memory_used@@Base+0x2180>
   148bc:	cmp	r0, #0
   148c0:	beq	148dc <_obstack_memory_used@@Base+0x2178>
   148c4:	cmp	r5, #0
   148c8:	bne	148f4 <_obstack_memory_used@@Base+0x2190>
   148cc:	bl	10fa8 <__errno_location@plt>
   148d0:	ldr	r4, [r0]
   148d4:	subs	r4, r4, #9
   148d8:	mvnne	r4, #0
   148dc:	mov	r0, r4
   148e0:	pop	{r4, r5, r6, pc}
   148e4:	cmp	r0, #0
   148e8:	bne	148f4 <_obstack_memory_used@@Base+0x2190>
   148ec:	bl	10fa8 <__errno_location@plt>
   148f0:	str	r4, [r0]
   148f4:	mvn	r4, #0
   148f8:	b	148dc <_obstack_memory_used@@Base+0x2178>
   148fc:	push	{r4, lr}
   14900:	mov	r0, #14
   14904:	bl	11020 <nl_langinfo@plt>
   14908:	ldr	r3, [pc, #24]	; 14928 <_obstack_memory_used@@Base+0x21c4>
   1490c:	cmp	r0, #0
   14910:	moveq	r0, r3
   14914:	ldr	r3, [pc, #16]	; 1492c <_obstack_memory_used@@Base+0x21c8>
   14918:	ldrb	r2, [r0]
   1491c:	cmp	r2, #0
   14920:	moveq	r0, r3
   14924:	pop	{r4, pc}
   14928:	andeq	r6, r1, pc, asr #12
   1492c:	andeq	r6, r1, r9, lsr #27
   14930:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14934:	subs	r5, r0, #0
   14938:	addeq	r5, sp, #4
   1493c:	mov	r0, r5
   14940:	mov	r7, r2
   14944:	mov	r6, r1
   14948:	bl	10ef4 <mbrtowc@plt>
   1494c:	cmp	r7, #0
   14950:	cmnne	r0, #3
   14954:	mov	r4, r0
   14958:	bls	14974 <_obstack_memory_used@@Base+0x2210>
   1495c:	mov	r0, #0
   14960:	bl	149cc <_obstack_memory_used@@Base+0x2268>
   14964:	cmp	r0, #0
   14968:	moveq	r4, #1
   1496c:	ldrbeq	r3, [r6]
   14970:	streq	r3, [r5]
   14974:	mov	r0, r4
   14978:	add	sp, sp, #12
   1497c:	pop	{r4, r5, r6, r7, pc}
   14980:	push	{r4, r5, r6, lr}
   14984:	subs	r4, r2, #0
   14988:	mov	r6, r0
   1498c:	mov	r5, r1
   14990:	beq	149a8 <_obstack_memory_used@@Base+0x2244>
   14994:	mov	r1, r4
   14998:	mvn	r0, #0
   1499c:	bl	14aac <_obstack_memory_used@@Base+0x2348>
   149a0:	cmp	r0, r5
   149a4:	bcc	149b8 <_obstack_memory_used@@Base+0x2254>
   149a8:	mul	r1, r5, r4
   149ac:	mov	r0, r6
   149b0:	pop	{r4, r5, r6, lr}
   149b4:	b	14830 <_obstack_memory_used@@Base+0x20cc>
   149b8:	bl	10fa8 <__errno_location@plt>
   149bc:	mov	r3, #12
   149c0:	str	r3, [r0]
   149c4:	mov	r0, #0
   149c8:	pop	{r4, r5, r6, pc}
   149cc:	push	{lr}		; (str lr, [sp, #-4]!)
   149d0:	sub	sp, sp, #268	; 0x10c
   149d4:	ldr	r2, [pc, #64]	; 14a1c <_obstack_memory_used@@Base+0x22b8>
   149d8:	add	r1, sp, #4
   149dc:	bl	14a28 <_obstack_memory_used@@Base+0x22c4>
   149e0:	cmp	r0, #0
   149e4:	movne	r0, #0
   149e8:	bne	14a14 <_obstack_memory_used@@Base+0x22b0>
   149ec:	ldr	r1, [pc, #44]	; 14a20 <_obstack_memory_used@@Base+0x22bc>
   149f0:	add	r0, sp, #4
   149f4:	bl	10e1c <strcmp@plt>
   149f8:	cmp	r0, #0
   149fc:	beq	14a14 <_obstack_memory_used@@Base+0x22b0>
   14a00:	ldr	r1, [pc, #28]	; 14a24 <_obstack_memory_used@@Base+0x22c0>
   14a04:	add	r0, sp, #4
   14a08:	bl	10e1c <strcmp@plt>
   14a0c:	adds	r0, r0, #0
   14a10:	movne	r0, #1
   14a14:	add	sp, sp, #268	; 0x10c
   14a18:	pop	{pc}		; (ldr pc, [sp], #4)
   14a1c:	andeq	r0, r0, r1, lsl #2
   14a20:	ldrdeq	r6, [r1], -lr
   14a24:	andeq	r6, r1, pc, lsr #27
   14a28:	push	{r4, r5, r6, lr}
   14a2c:	mov	r5, r1
   14a30:	mov	r1, #0
   14a34:	mov	r4, r2
   14a38:	bl	11008 <setlocale@plt>
   14a3c:	subs	r6, r0, #0
   14a40:	bne	14a54 <_obstack_memory_used@@Base+0x22f0>
   14a44:	cmp	r4, #0
   14a48:	strbne	r6, [r5]
   14a4c:	mov	r0, #22
   14a50:	pop	{r4, r5, r6, pc}
   14a54:	bl	10f9c <strlen@plt>
   14a58:	cmp	r4, r0
   14a5c:	bls	14a78 <_obstack_memory_used@@Base+0x2314>
   14a60:	add	r2, r0, #1
   14a64:	mov	r1, r6
   14a68:	mov	r0, r5
   14a6c:	bl	10e4c <memcpy@plt>
   14a70:	mov	r0, #0
   14a74:	pop	{r4, r5, r6, pc}
   14a78:	cmp	r4, #0
   14a7c:	beq	14a9c <_obstack_memory_used@@Base+0x2338>
   14a80:	sub	r4, r4, #1
   14a84:	mov	r2, r4
   14a88:	mov	r1, r6
   14a8c:	mov	r0, r5
   14a90:	bl	10e4c <memcpy@plt>
   14a94:	mov	r3, #0
   14a98:	strb	r3, [r5, r4]
   14a9c:	mov	r0, #34	; 0x22
   14aa0:	pop	{r4, r5, r6, pc}
   14aa4:	mov	r1, #0
   14aa8:	b	11008 <setlocale@plt>
   14aac:	subs	r2, r1, #1
   14ab0:	bxeq	lr
   14ab4:	bcc	14c8c <_obstack_memory_used@@Base+0x2528>
   14ab8:	cmp	r0, r1
   14abc:	bls	14c70 <_obstack_memory_used@@Base+0x250c>
   14ac0:	tst	r1, r2
   14ac4:	beq	14c7c <_obstack_memory_used@@Base+0x2518>
   14ac8:	clz	r3, r0
   14acc:	clz	r2, r1
   14ad0:	sub	r3, r2, r3
   14ad4:	rsbs	r3, r3, #31
   14ad8:	addne	r3, r3, r3, lsl #1
   14adc:	mov	r2, #0
   14ae0:	addne	pc, pc, r3, lsl #2
   14ae4:	nop			; (mov r0, r0)
   14ae8:	cmp	r0, r1, lsl #31
   14aec:	adc	r2, r2, r2
   14af0:	subcs	r0, r0, r1, lsl #31
   14af4:	cmp	r0, r1, lsl #30
   14af8:	adc	r2, r2, r2
   14afc:	subcs	r0, r0, r1, lsl #30
   14b00:	cmp	r0, r1, lsl #29
   14b04:	adc	r2, r2, r2
   14b08:	subcs	r0, r0, r1, lsl #29
   14b0c:	cmp	r0, r1, lsl #28
   14b10:	adc	r2, r2, r2
   14b14:	subcs	r0, r0, r1, lsl #28
   14b18:	cmp	r0, r1, lsl #27
   14b1c:	adc	r2, r2, r2
   14b20:	subcs	r0, r0, r1, lsl #27
   14b24:	cmp	r0, r1, lsl #26
   14b28:	adc	r2, r2, r2
   14b2c:	subcs	r0, r0, r1, lsl #26
   14b30:	cmp	r0, r1, lsl #25
   14b34:	adc	r2, r2, r2
   14b38:	subcs	r0, r0, r1, lsl #25
   14b3c:	cmp	r0, r1, lsl #24
   14b40:	adc	r2, r2, r2
   14b44:	subcs	r0, r0, r1, lsl #24
   14b48:	cmp	r0, r1, lsl #23
   14b4c:	adc	r2, r2, r2
   14b50:	subcs	r0, r0, r1, lsl #23
   14b54:	cmp	r0, r1, lsl #22
   14b58:	adc	r2, r2, r2
   14b5c:	subcs	r0, r0, r1, lsl #22
   14b60:	cmp	r0, r1, lsl #21
   14b64:	adc	r2, r2, r2
   14b68:	subcs	r0, r0, r1, lsl #21
   14b6c:	cmp	r0, r1, lsl #20
   14b70:	adc	r2, r2, r2
   14b74:	subcs	r0, r0, r1, lsl #20
   14b78:	cmp	r0, r1, lsl #19
   14b7c:	adc	r2, r2, r2
   14b80:	subcs	r0, r0, r1, lsl #19
   14b84:	cmp	r0, r1, lsl #18
   14b88:	adc	r2, r2, r2
   14b8c:	subcs	r0, r0, r1, lsl #18
   14b90:	cmp	r0, r1, lsl #17
   14b94:	adc	r2, r2, r2
   14b98:	subcs	r0, r0, r1, lsl #17
   14b9c:	cmp	r0, r1, lsl #16
   14ba0:	adc	r2, r2, r2
   14ba4:	subcs	r0, r0, r1, lsl #16
   14ba8:	cmp	r0, r1, lsl #15
   14bac:	adc	r2, r2, r2
   14bb0:	subcs	r0, r0, r1, lsl #15
   14bb4:	cmp	r0, r1, lsl #14
   14bb8:	adc	r2, r2, r2
   14bbc:	subcs	r0, r0, r1, lsl #14
   14bc0:	cmp	r0, r1, lsl #13
   14bc4:	adc	r2, r2, r2
   14bc8:	subcs	r0, r0, r1, lsl #13
   14bcc:	cmp	r0, r1, lsl #12
   14bd0:	adc	r2, r2, r2
   14bd4:	subcs	r0, r0, r1, lsl #12
   14bd8:	cmp	r0, r1, lsl #11
   14bdc:	adc	r2, r2, r2
   14be0:	subcs	r0, r0, r1, lsl #11
   14be4:	cmp	r0, r1, lsl #10
   14be8:	adc	r2, r2, r2
   14bec:	subcs	r0, r0, r1, lsl #10
   14bf0:	cmp	r0, r1, lsl #9
   14bf4:	adc	r2, r2, r2
   14bf8:	subcs	r0, r0, r1, lsl #9
   14bfc:	cmp	r0, r1, lsl #8
   14c00:	adc	r2, r2, r2
   14c04:	subcs	r0, r0, r1, lsl #8
   14c08:	cmp	r0, r1, lsl #7
   14c0c:	adc	r2, r2, r2
   14c10:	subcs	r0, r0, r1, lsl #7
   14c14:	cmp	r0, r1, lsl #6
   14c18:	adc	r2, r2, r2
   14c1c:	subcs	r0, r0, r1, lsl #6
   14c20:	cmp	r0, r1, lsl #5
   14c24:	adc	r2, r2, r2
   14c28:	subcs	r0, r0, r1, lsl #5
   14c2c:	cmp	r0, r1, lsl #4
   14c30:	adc	r2, r2, r2
   14c34:	subcs	r0, r0, r1, lsl #4
   14c38:	cmp	r0, r1, lsl #3
   14c3c:	adc	r2, r2, r2
   14c40:	subcs	r0, r0, r1, lsl #3
   14c44:	cmp	r0, r1, lsl #2
   14c48:	adc	r2, r2, r2
   14c4c:	subcs	r0, r0, r1, lsl #2
   14c50:	cmp	r0, r1, lsl #1
   14c54:	adc	r2, r2, r2
   14c58:	subcs	r0, r0, r1, lsl #1
   14c5c:	cmp	r0, r1
   14c60:	adc	r2, r2, r2
   14c64:	subcs	r0, r0, r1
   14c68:	mov	r0, r2
   14c6c:	bx	lr
   14c70:	moveq	r0, #1
   14c74:	movne	r0, #0
   14c78:	bx	lr
   14c7c:	clz	r2, r1
   14c80:	rsb	r2, r2, #31
   14c84:	lsr	r0, r0, r2
   14c88:	bx	lr
   14c8c:	cmp	r0, #0
   14c90:	mvnne	r0, #0
   14c94:	b	14ef8 <_obstack_memory_used@@Base+0x2794>
   14c98:	cmp	r1, #0
   14c9c:	beq	14c8c <_obstack_memory_used@@Base+0x2528>
   14ca0:	push	{r0, r1, lr}
   14ca4:	bl	14aac <_obstack_memory_used@@Base+0x2348>
   14ca8:	pop	{r1, r2, lr}
   14cac:	mul	r3, r2, r0
   14cb0:	sub	r1, r1, r3
   14cb4:	bx	lr
   14cb8:	cmp	r1, #0
   14cbc:	beq	14ec8 <_obstack_memory_used@@Base+0x2764>
   14cc0:	eor	ip, r0, r1
   14cc4:	rsbmi	r1, r1, #0
   14cc8:	subs	r2, r1, #1
   14ccc:	beq	14e94 <_obstack_memory_used@@Base+0x2730>
   14cd0:	movs	r3, r0
   14cd4:	rsbmi	r3, r0, #0
   14cd8:	cmp	r3, r1
   14cdc:	bls	14ea0 <_obstack_memory_used@@Base+0x273c>
   14ce0:	tst	r1, r2
   14ce4:	beq	14eb0 <_obstack_memory_used@@Base+0x274c>
   14ce8:	clz	r2, r3
   14cec:	clz	r0, r1
   14cf0:	sub	r2, r0, r2
   14cf4:	rsbs	r2, r2, #31
   14cf8:	addne	r2, r2, r2, lsl #1
   14cfc:	mov	r0, #0
   14d00:	addne	pc, pc, r2, lsl #2
   14d04:	nop			; (mov r0, r0)
   14d08:	cmp	r3, r1, lsl #31
   14d0c:	adc	r0, r0, r0
   14d10:	subcs	r3, r3, r1, lsl #31
   14d14:	cmp	r3, r1, lsl #30
   14d18:	adc	r0, r0, r0
   14d1c:	subcs	r3, r3, r1, lsl #30
   14d20:	cmp	r3, r1, lsl #29
   14d24:	adc	r0, r0, r0
   14d28:	subcs	r3, r3, r1, lsl #29
   14d2c:	cmp	r3, r1, lsl #28
   14d30:	adc	r0, r0, r0
   14d34:	subcs	r3, r3, r1, lsl #28
   14d38:	cmp	r3, r1, lsl #27
   14d3c:	adc	r0, r0, r0
   14d40:	subcs	r3, r3, r1, lsl #27
   14d44:	cmp	r3, r1, lsl #26
   14d48:	adc	r0, r0, r0
   14d4c:	subcs	r3, r3, r1, lsl #26
   14d50:	cmp	r3, r1, lsl #25
   14d54:	adc	r0, r0, r0
   14d58:	subcs	r3, r3, r1, lsl #25
   14d5c:	cmp	r3, r1, lsl #24
   14d60:	adc	r0, r0, r0
   14d64:	subcs	r3, r3, r1, lsl #24
   14d68:	cmp	r3, r1, lsl #23
   14d6c:	adc	r0, r0, r0
   14d70:	subcs	r3, r3, r1, lsl #23
   14d74:	cmp	r3, r1, lsl #22
   14d78:	adc	r0, r0, r0
   14d7c:	subcs	r3, r3, r1, lsl #22
   14d80:	cmp	r3, r1, lsl #21
   14d84:	adc	r0, r0, r0
   14d88:	subcs	r3, r3, r1, lsl #21
   14d8c:	cmp	r3, r1, lsl #20
   14d90:	adc	r0, r0, r0
   14d94:	subcs	r3, r3, r1, lsl #20
   14d98:	cmp	r3, r1, lsl #19
   14d9c:	adc	r0, r0, r0
   14da0:	subcs	r3, r3, r1, lsl #19
   14da4:	cmp	r3, r1, lsl #18
   14da8:	adc	r0, r0, r0
   14dac:	subcs	r3, r3, r1, lsl #18
   14db0:	cmp	r3, r1, lsl #17
   14db4:	adc	r0, r0, r0
   14db8:	subcs	r3, r3, r1, lsl #17
   14dbc:	cmp	r3, r1, lsl #16
   14dc0:	adc	r0, r0, r0
   14dc4:	subcs	r3, r3, r1, lsl #16
   14dc8:	cmp	r3, r1, lsl #15
   14dcc:	adc	r0, r0, r0
   14dd0:	subcs	r3, r3, r1, lsl #15
   14dd4:	cmp	r3, r1, lsl #14
   14dd8:	adc	r0, r0, r0
   14ddc:	subcs	r3, r3, r1, lsl #14
   14de0:	cmp	r3, r1, lsl #13
   14de4:	adc	r0, r0, r0
   14de8:	subcs	r3, r3, r1, lsl #13
   14dec:	cmp	r3, r1, lsl #12
   14df0:	adc	r0, r0, r0
   14df4:	subcs	r3, r3, r1, lsl #12
   14df8:	cmp	r3, r1, lsl #11
   14dfc:	adc	r0, r0, r0
   14e00:	subcs	r3, r3, r1, lsl #11
   14e04:	cmp	r3, r1, lsl #10
   14e08:	adc	r0, r0, r0
   14e0c:	subcs	r3, r3, r1, lsl #10
   14e10:	cmp	r3, r1, lsl #9
   14e14:	adc	r0, r0, r0
   14e18:	subcs	r3, r3, r1, lsl #9
   14e1c:	cmp	r3, r1, lsl #8
   14e20:	adc	r0, r0, r0
   14e24:	subcs	r3, r3, r1, lsl #8
   14e28:	cmp	r3, r1, lsl #7
   14e2c:	adc	r0, r0, r0
   14e30:	subcs	r3, r3, r1, lsl #7
   14e34:	cmp	r3, r1, lsl #6
   14e38:	adc	r0, r0, r0
   14e3c:	subcs	r3, r3, r1, lsl #6
   14e40:	cmp	r3, r1, lsl #5
   14e44:	adc	r0, r0, r0
   14e48:	subcs	r3, r3, r1, lsl #5
   14e4c:	cmp	r3, r1, lsl #4
   14e50:	adc	r0, r0, r0
   14e54:	subcs	r3, r3, r1, lsl #4
   14e58:	cmp	r3, r1, lsl #3
   14e5c:	adc	r0, r0, r0
   14e60:	subcs	r3, r3, r1, lsl #3
   14e64:	cmp	r3, r1, lsl #2
   14e68:	adc	r0, r0, r0
   14e6c:	subcs	r3, r3, r1, lsl #2
   14e70:	cmp	r3, r1, lsl #1
   14e74:	adc	r0, r0, r0
   14e78:	subcs	r3, r3, r1, lsl #1
   14e7c:	cmp	r3, r1
   14e80:	adc	r0, r0, r0
   14e84:	subcs	r3, r3, r1
   14e88:	cmp	ip, #0
   14e8c:	rsbmi	r0, r0, #0
   14e90:	bx	lr
   14e94:	teq	ip, r0
   14e98:	rsbmi	r0, r0, #0
   14e9c:	bx	lr
   14ea0:	movcc	r0, #0
   14ea4:	asreq	r0, ip, #31
   14ea8:	orreq	r0, r0, #1
   14eac:	bx	lr
   14eb0:	clz	r2, r1
   14eb4:	rsb	r2, r2, #31
   14eb8:	cmp	ip, #0
   14ebc:	lsr	r0, r3, r2
   14ec0:	rsbmi	r0, r0, #0
   14ec4:	bx	lr
   14ec8:	cmp	r0, #0
   14ecc:	mvngt	r0, #-2147483648	; 0x80000000
   14ed0:	movlt	r0, #-2147483648	; 0x80000000
   14ed4:	b	14ef8 <_obstack_memory_used@@Base+0x2794>
   14ed8:	cmp	r1, #0
   14edc:	beq	14ec8 <_obstack_memory_used@@Base+0x2764>
   14ee0:	push	{r0, r1, lr}
   14ee4:	bl	14cc0 <_obstack_memory_used@@Base+0x255c>
   14ee8:	pop	{r1, r2, lr}
   14eec:	mul	r3, r2, r0
   14ef0:	sub	r1, r1, r3
   14ef4:	bx	lr
   14ef8:	push	{r1, lr}
   14efc:	mov	r0, #8
   14f00:	bl	10e10 <raise@plt>
   14f04:	pop	{r1, pc}
   14f08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f0c:	mov	r7, r0
   14f10:	ldr	r6, [pc, #72]	; 14f60 <_obstack_memory_used@@Base+0x27fc>
   14f14:	ldr	r5, [pc, #72]	; 14f64 <_obstack_memory_used@@Base+0x2800>
   14f18:	add	r6, pc, r6
   14f1c:	add	r5, pc, r5
   14f20:	sub	r6, r6, r5
   14f24:	mov	r8, r1
   14f28:	mov	r9, r2
   14f2c:	bl	10dd8 <calloc@plt-0x20>
   14f30:	asrs	r6, r6, #2
   14f34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f38:	mov	r4, #0
   14f3c:	add	r4, r4, #1
   14f40:	ldr	r3, [r5], #4
   14f44:	mov	r2, r9
   14f48:	mov	r1, r8
   14f4c:	mov	r0, r7
   14f50:	blx	r3
   14f54:	cmp	r6, r4
   14f58:	bne	14f3c <_obstack_memory_used@@Base+0x27d8>
   14f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f60:	strdeq	r1, [r1], -r0
   14f64:	andeq	r1, r1, r8, ror #31
   14f68:	bx	lr
   14f6c:	ldr	r3, [pc, #12]	; 14f80 <_obstack_memory_used@@Base+0x281c>
   14f70:	mov	r1, #0
   14f74:	add	r3, pc, r3
   14f78:	ldr	r2, [r3]
   14f7c:	b	10fb4 <__cxa_atexit@plt>
   14f80:	andeq	r2, r1, ip, ror #2

Disassembly of section .fini:

00014f84 <.fini>:
   14f84:	push	{r3, lr}
   14f88:	pop	{r3, pc}
