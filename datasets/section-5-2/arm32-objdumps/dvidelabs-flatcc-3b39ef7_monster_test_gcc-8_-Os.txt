
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012944 <.init>:
   12944:	push	{r3, lr}
   12948:	bl	12c40 <_start@@Base+0x3c>
   1294c:	pop	{r3, pc}

Disassembly of section .plt:

00012950 <strcmp@plt-0x14>:
   12950:	push	{lr}		; (str lr, [sp, #-4]!)
   12954:	ldr	lr, [pc, #4]	; 12960 <strcmp@plt-0x4>
   12958:	add	lr, pc, lr
   1295c:	ldr	pc, [lr, #8]!
   12960:	andeq	r0, r2, r0, lsr #13

00012964 <strcmp@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #32, 20	; 0x20000
   1296c:	ldr	pc, [ip, #1696]!	; 0x6a0

00012970 <printf@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #32, 20	; 0x20000
   12978:	ldr	pc, [ip, #1688]!	; 0x698

0001297c <free@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #32, 20	; 0x20000
   12984:	ldr	pc, [ip, #1680]!	; 0x690

00012988 <memcpy@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #32, 20	; 0x20000
   12990:	ldr	pc, [ip, #1672]!	; 0x688

00012994 <memcmp@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #32, 20	; 0x20000
   1299c:	ldr	pc, [ip, #1664]!	; 0x680

000129a0 <realloc@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #32, 20	; 0x20000
   129a8:	ldr	pc, [ip, #1656]!	; 0x678

000129ac <gettimeofday@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #32, 20	; 0x20000
   129b4:	ldr	pc, [ip, #1648]!	; 0x670

000129b8 <puts@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #32, 20	; 0x20000
   129c0:	ldr	pc, [ip, #1640]!	; 0x668

000129c4 <malloc@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #32, 20	; 0x20000
   129cc:	ldr	pc, [ip, #1632]!	; 0x660

000129d0 <__libc_start_main@plt>:
   129d0:	add	ip, pc, #0, 12
   129d4:	add	ip, ip, #32, 20	; 0x20000
   129d8:	ldr	pc, [ip, #1624]!	; 0x658

000129dc <__gmon_start__@plt>:
   129dc:	add	ip, pc, #0, 12
   129e0:	add	ip, ip, #32, 20	; 0x20000
   129e4:	ldr	pc, [ip, #1616]!	; 0x650

000129e8 <strlen@plt>:
   129e8:	add	ip, pc, #0, 12
   129ec:	add	ip, ip, #32, 20	; 0x20000
   129f0:	ldr	pc, [ip, #1608]!	; 0x648

000129f4 <fprintf@plt>:
   129f4:	add	ip, pc, #0, 12
   129f8:	add	ip, ip, #32, 20	; 0x20000
   129fc:	ldr	pc, [ip, #1600]!	; 0x640

00012a00 <posix_memalign@plt>:
   12a00:	add	ip, pc, #0, 12
   12a04:	add	ip, ip, #32, 20	; 0x20000
   12a08:	ldr	pc, [ip, #1592]!	; 0x638

00012a0c <memset@plt>:
   12a0c:	add	ip, pc, #0, 12
   12a10:	add	ip, ip, #32, 20	; 0x20000
   12a14:	ldr	pc, [ip, #1584]!	; 0x630

00012a18 <strncpy@plt>:
   12a18:	add	ip, pc, #0, 12
   12a1c:	add	ip, ip, #32, 20	; 0x20000
   12a20:	ldr	pc, [ip, #1576]!	; 0x628

00012a24 <memchr@plt>:
   12a24:	add	ip, pc, #0, 12
   12a28:	add	ip, ip, #32, 20	; 0x20000
   12a2c:	ldr	pc, [ip, #1568]!	; 0x620

00012a30 <fputc@plt>:
   12a30:	add	ip, pc, #0, 12
   12a34:	add	ip, ip, #32, 20	; 0x20000
   12a38:	ldr	pc, [ip, #1560]!	; 0x618

00012a3c <fputs@plt>:
   12a3c:	add	ip, pc, #0, 12
   12a40:	add	ip, ip, #32, 20	; 0x20000
   12a44:	ldr	pc, [ip, #1552]!	; 0x610

00012a48 <strncmp@plt>:
   12a48:	add	ip, pc, #0, 12
   12a4c:	add	ip, ip, #32, 20	; 0x20000
   12a50:	ldr	pc, [ip, #1544]!	; 0x608

00012a54 <abort@plt>:
   12a54:	add	ip, pc, #0, 12
   12a58:	add	ip, ip, #32, 20	; 0x20000
   12a5c:	ldr	pc, [ip, #1536]!	; 0x600

00012a60 <__assert_fail@plt>:
   12a60:	add	ip, pc, #0, 12
   12a64:	add	ip, ip, #32, 20	; 0x20000
   12a68:	ldr	pc, [ip, #1528]!	; 0x5f8

Disassembly of section .text:

00012a70 <main@@Base>:
   12a70:	push	{r4, lr}
   12a74:	sub	sp, sp, #232	; 0xe8
   12a78:	mov	r0, sp
   12a7c:	bl	1a9a8 <flatcc_builder_init@@Base>
   12a80:	ldr	r0, [pc, #372]	; 12bfc <main@@Base+0x18c>
   12a84:	bl	129b8 <puts@plt>
   12a88:	mov	r0, sp
   12a8c:	bl	15b3c <test_table_with_emptystruct@@Base>
   12a90:	cmp	r0, #0
   12a94:	beq	12ab0 <main@@Base+0x40>
   12a98:	ldr	r0, [pc, #352]	; 12c00 <main@@Base+0x190>
   12a9c:	mvn	r4, #0
   12aa0:	bl	129b8 <puts@plt>
   12aa4:	mov	r0, r4
   12aa8:	add	sp, sp, #232	; 0xe8
   12aac:	pop	{r4, pc}
   12ab0:	mov	r0, sp
   12ab4:	bl	15784 <test_empty_monster@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	12a98 <main@@Base+0x28>
   12ac0:	mov	r0, sp
   12ac4:	bl	16b8c <test_monster@@Base>
   12ac8:	cmp	r0, #0
   12acc:	bne	12a98 <main@@Base+0x28>
   12ad0:	mov	r0, sp
   12ad4:	bl	16c1c <test_monster_with_size@@Base>
   12ad8:	cmp	r0, #0
   12adc:	bne	12a98 <main@@Base+0x28>
   12ae0:	mov	r0, sp
   12ae4:	bl	16cf8 <test_string@@Base>
   12ae8:	cmp	r0, #0
   12aec:	bne	12a98 <main@@Base+0x28>
   12af0:	mov	r0, sp
   12af4:	bl	19974 <test_struct_buffer@@Base>
   12af8:	cmp	r0, #0
   12afc:	bne	12a98 <main@@Base+0x28>
   12b00:	mov	r0, sp
   12b04:	bl	15884 <test_typed_empty_monster@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12a98 <main@@Base+0x28>
   12b10:	mov	r0, sp
   12b14:	bl	15bc4 <test_typed_table_with_emptystruct@@Base>
   12b18:	cmp	r0, #0
   12b1c:	bne	12a98 <main@@Base+0x28>
   12b20:	mov	r0, sp
   12b24:	bl	19b60 <test_typed_struct_buffer@@Base>
   12b28:	cmp	r0, #0
   12b2c:	bne	12a98 <main@@Base+0x28>
   12b30:	mov	r0, sp
   12b34:	bl	17f20 <test_clone_slice@@Base>
   12b38:	cmp	r0, #0
   12b3c:	bne	12a98 <main@@Base+0x28>
   12b40:	mov	r0, sp
   12b44:	bl	19398 <test_add_set_defaults@@Base>
   12b48:	cmp	r0, #0
   12b4c:	bne	12a98 <main@@Base+0x28>
   12b50:	mov	r0, sp
   12b54:	bl	18580 <test_create_add_field@@Base>
   12b58:	cmp	r0, #0
   12b5c:	bne	12a98 <main@@Base+0x28>
   12b60:	mov	r0, sp
   12b64:	bl	18740 <test_union_vector@@Base>
   12b68:	cmp	r0, #0
   12b6c:	bne	12a98 <main@@Base+0x28>
   12b70:	mov	r0, sp
   12b74:	bl	17d30 <test_basic_sort@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12a98 <main@@Base+0x28>
   12b80:	mov	r0, sp
   12b84:	bl	16eac <test_sort_find@@Base>
   12b88:	cmp	r0, #0
   12b8c:	bne	12a98 <main@@Base+0x28>
   12b90:	mov	r0, sp
   12b94:	bl	17210 <test_scan@@Base>
   12b98:	cmp	r0, #0
   12b9c:	bne	12a98 <main@@Base+0x28>
   12ba0:	mov	r0, sp
   12ba4:	bl	1952c <test_nested_buffer@@Base>
   12ba8:	cmp	r0, #0
   12bac:	bne	12a98 <main@@Base+0x28>
   12bb0:	mov	r0, sp
   12bb4:	bl	19658 <test_nested_buffer_first@@Base>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12a98 <main@@Base+0x28>
   12bc0:	mov	r0, sp
   12bc4:	bl	19784 <test_nested_buffer_using_nest@@Base>
   12bc8:	cmp	r0, #0
   12bcc:	bne	12a98 <main@@Base+0x28>
   12bd0:	mov	r0, sp
   12bd4:	bl	1526c <test_type_aliases@@Base>
   12bd8:	cmp	r0, #0
   12bdc:	bne	12a98 <main@@Base+0x28>
   12be0:	mov	r0, sp
   12be4:	bl	18a70 <test_mixed_type_union@@Base>
   12be8:	subs	r4, r0, #0
   12bec:	bne	12a98 <main@@Base+0x28>
   12bf0:	mov	r0, sp
   12bf4:	bl	1ab24 <flatcc_builder_clear@@Base>
   12bf8:	b	12aa4 <main@@Base+0x34>
   12bfc:	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
   12c00:	andeq	r1, r2, sl, lsl r3

00012c04 <_start@@Base>:
   12c04:	mov	fp, #0
   12c08:	mov	lr, #0
   12c0c:	pop	{r1}		; (ldr r1, [sp], #4)
   12c10:	mov	r2, sp
   12c14:	push	{r2}		; (str r2, [sp, #-4]!)
   12c18:	push	{r0}		; (str r0, [sp, #-4]!)
   12c1c:	ldr	ip, [pc, #16]	; 12c34 <_start@@Base+0x30>
   12c20:	push	{ip}		; (str ip, [sp, #-4]!)
   12c24:	ldr	r0, [pc, #12]	; 12c38 <_start@@Base+0x34>
   12c28:	ldr	r3, [pc, #12]	; 12c3c <_start@@Base+0x38>
   12c2c:	bl	129d0 <__libc_start_main@plt>
   12c30:	bl	12a54 <abort@plt>
   12c34:	andeq	lr, r1, r8, lsr #1
   12c38:	andeq	r2, r1, r0, ror sl
   12c3c:	andeq	lr, r1, r8, asr #32
   12c40:	ldr	r3, [pc, #20]	; 12c5c <_start@@Base+0x58>
   12c44:	ldr	r2, [pc, #20]	; 12c60 <_start@@Base+0x5c>
   12c48:	add	r3, pc, r3
   12c4c:	ldr	r2, [r3, r2]
   12c50:	cmp	r2, #0
   12c54:	bxeq	lr
   12c58:	b	129dc <__gmon_start__@plt>
   12c5c:			; <UNDEFINED> instruction: 0x000203b0
   12c60:	andeq	r0, r0, r4, rrx
   12c64:	ldr	r0, [pc, #24]	; 12c84 <_start@@Base+0x80>
   12c68:	ldr	r3, [pc, #24]	; 12c88 <_start@@Base+0x84>
   12c6c:	cmp	r3, r0
   12c70:	bxeq	lr
   12c74:	ldr	r3, [pc, #16]	; 12c8c <_start@@Base+0x88>
   12c78:	cmp	r3, #0
   12c7c:	bxeq	lr
   12c80:	bx	r3
   12c84:	andeq	r3, r3, r0, ror r0
   12c88:	andeq	r3, r3, r0, ror r0
   12c8c:	andeq	r0, r0, r0
   12c90:	ldr	r0, [pc, #36]	; 12cbc <_start@@Base+0xb8>
   12c94:	ldr	r1, [pc, #36]	; 12cc0 <_start@@Base+0xbc>
   12c98:	sub	r1, r1, r0
   12c9c:	asr	r1, r1, #2
   12ca0:	add	r1, r1, r1, lsr #31
   12ca4:	asrs	r1, r1, #1
   12ca8:	bxeq	lr
   12cac:	ldr	r3, [pc, #16]	; 12cc4 <_start@@Base+0xc0>
   12cb0:	cmp	r3, #0
   12cb4:	bxeq	lr
   12cb8:	bx	r3
   12cbc:	andeq	r3, r3, r0, ror r0
   12cc0:	andeq	r3, r3, r0, ror r0
   12cc4:	andeq	r0, r0, r0
   12cc8:	push	{r4, lr}
   12ccc:	ldr	r4, [pc, #24]	; 12cec <_start@@Base+0xe8>
   12cd0:	ldrb	r3, [r4]
   12cd4:	cmp	r3, #0
   12cd8:	popne	{r4, pc}
   12cdc:	bl	12c64 <_start@@Base+0x60>
   12ce0:	mov	r3, #1
   12ce4:	strb	r3, [r4]
   12ce8:	pop	{r4, pc}
   12cec:	andeq	r3, r3, r4, ror r0
   12cf0:	b	12c90 <_start@@Base+0x8c>
   12cf4:	andeq	r0, r0, r0
   12cf8:	mov	r0, #0
   12cfc:	bx	lr
   12d00:	cmp	r1, #0
   12d04:	push	{r0, r1, r4, lr}
   12d08:	moveq	r0, #1
   12d0c:	beq	12d38 <_start@@Base+0x134>
   12d10:	mov	r2, #4
   12d14:	mov	r4, r0
   12d18:	add	r0, sp, r2
   12d1c:	bl	12a18 <strncpy@plt>
   12d20:	ldr	r0, [sp, #4]
   12d24:	ldr	r3, [r4, #4]
   12d28:	cmp	r0, #0
   12d2c:	cmpne	r3, r0
   12d30:	moveq	r0, #1
   12d34:	movne	r0, #0
   12d38:	add	sp, sp, #8
   12d3c:	pop	{r4, pc}
   12d40:	push	{r4, lr}
   12d44:	subs	r4, r0, #0
   12d48:	bne	12d54 <_start@@Base+0x150>
   12d4c:	mov	r0, #0
   12d50:	pop	{r4, pc}
   12d54:	bl	12d00 <_start@@Base+0xfc>
   12d58:	cmp	r0, #0
   12d5c:	beq	12d4c <_start@@Base+0x148>
   12d60:	ldr	r0, [r4]
   12d64:	add	r0, r4, r0
   12d68:	pop	{r4, pc}
   12d6c:	push	{r4, lr}
   12d70:	subs	r4, r0, #0
   12d74:	bne	12d80 <_start@@Base+0x17c>
   12d78:	mov	r0, #0
   12d7c:	pop	{r4, pc}
   12d80:	ldr	r1, [pc, #20]	; 12d9c <_start@@Base+0x198>
   12d84:	bl	12d00 <_start@@Base+0xfc>
   12d88:	cmp	r0, #0
   12d8c:	beq	12d78 <_start@@Base+0x174>
   12d90:	ldr	r0, [r4]
   12d94:	add	r0, r4, r0
   12d98:	pop	{r4, pc}
   12d9c:	andeq	lr, r1, lr, ror #15
   12da0:	push	{r4, lr}
   12da4:	subs	r4, r0, #0
   12da8:	bne	12db4 <_start@@Base+0x1b0>
   12dac:	mov	r0, #0
   12db0:	pop	{r4, pc}
   12db4:	ldr	r1, [pc, #20]	; 12dd0 <_start@@Base+0x1cc>
   12db8:	bl	12d00 <_start@@Base+0xfc>
   12dbc:	cmp	r0, #0
   12dc0:	beq	12dac <_start@@Base+0x1a8>
   12dc4:	ldr	r0, [r4]
   12dc8:	add	r0, r4, r0
   12dcc:	pop	{r4, pc}
   12dd0:	andeq	lr, r1, lr, ror #15
   12dd4:	cmp	r0, #0
   12dd8:	push	{r4, r5, r6, lr}
   12ddc:	bne	12df4 <_start@@Base+0x1f0>
   12de0:	ldr	r3, [pc, #104]	; 12e50 <_start@@Base+0x24c>
   12de4:	mov	r2, #720	; 0x2d0
   12de8:	ldr	r1, [pc, #100]	; 12e54 <_start@@Base+0x250>
   12dec:	ldr	r0, [pc, #100]	; 12e58 <_start@@Base+0x254>
   12df0:	bl	12a60 <__assert_fail@plt>
   12df4:	ldr	r3, [r0]
   12df8:	sub	r3, r0, r3
   12dfc:	ldrh	r2, [r3]
   12e00:	cmp	r2, #31
   12e04:	bhi	12e10 <_start@@Base+0x20c>
   12e08:	mov	r0, #0
   12e0c:	pop	{r4, r5, r6, pc}
   12e10:	ldrh	r3, [r3, #30]
   12e14:	cmp	r3, #0
   12e18:	beq	12e08 <_start@@Base+0x204>
   12e1c:	ldr	r5, [r0, r3]
   12e20:	add	r6, r0, r3
   12e24:	add	r5, r5, #4
   12e28:	adds	r4, r6, r5
   12e2c:	beq	12e08 <_start@@Base+0x204>
   12e30:	ldr	r1, [pc, #36]	; 12e5c <_start@@Base+0x258>
   12e34:	mov	r0, r4
   12e38:	bl	12d00 <_start@@Base+0xfc>
   12e3c:	cmp	r0, #0
   12e40:	beq	12e08 <_start@@Base+0x204>
   12e44:	ldr	r0, [r6, r5]
   12e48:	add	r0, r4, r0
   12e4c:	pop	{r4, r5, r6, pc}
   12e50:	strheq	lr, [r1], -r8
   12e54:	strdeq	lr, [r1], -r3
   12e58:	andeq	lr, r1, r5, asr r8
   12e5c:	andeq	lr, r1, lr, ror #15
   12e60:	mov	r3, #0
   12e64:	mov	r2, r3
   12e68:	b	1b088 <flatcc_builder_start_buffer@@Base>
   12e6c:	mov	r1, #36	; 0x24
   12e70:	b	1b864 <flatcc_builder_start_table@@Base>
   12e74:	b	12e6c <_start@@Base+0x268>
   12e78:	push	{r4, lr}
   12e7c:	mov	r4, r0
   12e80:	ldr	r1, [pc, #28]	; 12ea4 <_start@@Base+0x2a0>
   12e84:	bl	12e60 <_start@@Base+0x25c>
   12e88:	cmp	r0, #0
   12e8c:	bne	12e9c <_start@@Base+0x298>
   12e90:	mov	r0, r4
   12e94:	pop	{r4, lr}
   12e98:	b	12e6c <_start@@Base+0x268>
   12e9c:	mvn	r0, #0
   12ea0:	pop	{r4, pc}
   12ea4:	andeq	lr, r1, lr, ror #15
   12ea8:	push	{r4, lr}
   12eac:	subs	r4, r1, #0
   12eb0:	bne	12ebc <_start@@Base+0x2b8>
   12eb4:	mvn	r0, #0
   12eb8:	pop	{r4, pc}
   12ebc:	mov	r1, #3
   12ec0:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12eb4 <_start@@Base+0x2b0>
   12ecc:	str	r4, [r0]
   12ed0:	mov	r0, #0
   12ed4:	pop	{r4, pc}
   12ed8:	push	{r4, lr}
   12edc:	subs	r4, r1, #0
   12ee0:	bne	12eec <_start@@Base+0x2e8>
   12ee4:	mvn	r0, #0
   12ee8:	pop	{r4, pc}
   12eec:	mov	r1, #9
   12ef0:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   12ef4:	cmp	r0, #0
   12ef8:	beq	12ee4 <_start@@Base+0x2e0>
   12efc:	str	r4, [r0]
   12f00:	mov	r0, #0
   12f04:	pop	{r4, pc}
   12f08:	push	{r4, lr}
   12f0c:	subs	r4, r1, #0
   12f10:	bne	12f1c <_start@@Base+0x318>
   12f14:	mvn	r0, #0
   12f18:	pop	{r4, pc}
   12f1c:	mov	r1, #10
   12f20:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   12f24:	cmp	r0, #0
   12f28:	beq	12f14 <_start@@Base+0x310>
   12f2c:	str	r4, [r0]
   12f30:	mov	r0, #0
   12f34:	pop	{r4, pc}
   12f38:	push	{r4, lr}
   12f3c:	subs	r4, r1, #0
   12f40:	bne	12f4c <_start@@Base+0x348>
   12f44:	mvn	r0, #0
   12f48:	pop	{r4, pc}
   12f4c:	mov	r1, #24
   12f50:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   12f54:	cmp	r0, #0
   12f58:	beq	12f44 <_start@@Base+0x340>
   12f5c:	str	r4, [r0]
   12f60:	mov	r0, #0
   12f64:	pop	{r4, pc}
   12f68:	push	{r4, r5, r6, lr}
   12f6c:	mov	r6, r1
   12f70:	mov	r1, #1
   12f74:	mov	r4, r0
   12f78:	bl	1b864 <flatcc_builder_start_table@@Base>
   12f7c:	subs	r5, r0, #0
   12f80:	bne	12fdc <_start@@Base+0x3d8>
   12f84:	mov	r3, #4
   12f88:	mov	r1, r5
   12f8c:	mov	r2, r3
   12f90:	mov	r0, r4
   12f94:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   12f98:	cmp	r0, #0
   12f9c:	beq	12fdc <_start@@Base+0x3d8>
   12fa0:	mov	r2, r5
   12fa4:	ldr	r1, [pc, #56]	; 12fe4 <_start@@Base+0x3e0>
   12fa8:	str	r6, [r0]
   12fac:	mov	r0, r4
   12fb0:	bl	1be10 <flatcc_builder_check_required@@Base>
   12fb4:	cmp	r0, #0
   12fb8:	bne	12fd0 <_start@@Base+0x3cc>
   12fbc:	ldr	r3, [pc, #36]	; 12fe8 <_start@@Base+0x3e4>
   12fc0:	mov	r2, #239	; 0xef
   12fc4:	ldr	r1, [pc, #32]	; 12fec <_start@@Base+0x3e8>
   12fc8:	ldr	r0, [pc, #32]	; 12ff0 <_start@@Base+0x3ec>
   12fcc:	bl	12a60 <__assert_fail@plt>
   12fd0:	mov	r0, r4
   12fd4:	pop	{r4, r5, r6, lr}
   12fd8:	b	1be8c <flatcc_builder_end_table@@Base>
   12fdc:	mov	r0, #0
   12fe0:	pop	{r4, r5, r6, pc}
   12fe4:	andeq	lr, r1, r4, ror #1
   12fe8:	andeq	lr, r1, r6, ror #1
   12fec:	andeq	lr, r1, fp, ror r8
   12ff0:	ldrdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   12ff4:	ldr	r3, [pc, #4]	; 13000 <_start@@Base+0x3fc>
   12ff8:	ldr	r2, [pc, #4]	; 13004 <_start@@Base+0x400>
   12ffc:	b	1db48 <flatcc_verify_table_as_root@@Base>
   13000:	andeq	r4, r1, r4, ror r6
   13004:	andeq	lr, r1, lr, ror #15
   13008:	mov	r3, #4
   1300c:	mov	r1, #0
   13010:	mov	r2, r3
   13014:	b	1d6d4 <flatcc_verify_field@@Base>
   13018:	mov	r2, #0
   1301c:	mov	r3, #1
   13020:	mov	r1, r2
   13024:	b	1d6d4 <flatcc_verify_field@@Base>
   13028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1302c:	mov	r7, r1
   13030:	sub	sp, sp, #28
   13034:	mov	r8, r2
   13038:	sub	r7, r7, #1
   1303c:	mov	r2, r0
   13040:	mov	r5, #0
   13044:	ldr	r9, [pc, #220]	; 13128 <_start@@Base+0x524>
   13048:	mov	r0, r3
   1304c:	mov	r4, r3
   13050:	ldr	sl, [pc, #212]	; 1312c <_start@@Base+0x528>
   13054:	ldr	fp, [pc, #212]	; 13130 <_start@@Base+0x52c>
   13058:	ldr	r1, [pc, #212]	; 13134 <_start@@Base+0x530>
   1305c:	bl	129f4 <fprintf@plt>
   13060:	cmp	r5, r8
   13064:	and	r6, r5, #15
   13068:	bne	13090 <_start@@Base+0x48c>
   1306c:	ldr	r5, [pc, #196]	; 13138 <_start@@Base+0x534>
   13070:	tst	r8, #15
   13074:	bne	13114 <_start@@Base+0x510>
   13078:	ldr	r1, [pc, #172]	; 1312c <_start@@Base+0x528>
   1307c:	add	r2, sp, #4
   13080:	mov	r0, r4
   13084:	bl	129f4 <fprintf@plt>
   13088:	add	sp, sp, #28
   1308c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13090:	cmp	r6, #0
   13094:	bne	130fc <_start@@Base+0x4f8>
   13098:	cmp	r5, #0
   1309c:	beq	130b0 <_start@@Base+0x4ac>
   130a0:	add	r2, sp, #4
   130a4:	mov	r1, sl
   130a8:	mov	r0, r4
   130ac:	bl	129f4 <fprintf@plt>
   130b0:	mov	r2, r5
   130b4:	mov	r1, r9
   130b8:	mov	r0, r4
   130bc:	bl	129f4 <fprintf@plt>
   130c0:	ldrb	r2, [r7, #1]!
   130c4:	mov	r1, fp
   130c8:	mov	r0, r4
   130cc:	bl	129f4 <fprintf@plt>
   130d0:	add	r5, r5, #1
   130d4:	ldrb	r3, [r7]
   130d8:	sub	r2, r3, #32
   130dc:	cmp	r2, #94	; 0x5e
   130e0:	add	r2, sp, #24
   130e4:	movhi	r3, #46	; 0x2e
   130e8:	add	r6, r2, r6
   130ec:	strb	r3, [r6, #-20]	; 0xffffffec
   130f0:	mov	r3, #0
   130f4:	strb	r3, [r6, #-19]	; 0xffffffed
   130f8:	b	13060 <_start@@Base+0x45c>
   130fc:	tst	r5, #7
   13100:	bne	130c0 <_start@@Base+0x4bc>
   13104:	mov	r1, r4
   13108:	mov	r0, #32
   1310c:	bl	12a30 <fputc@plt>
   13110:	b	130c0 <_start@@Base+0x4bc>
   13114:	mov	r1, r4
   13118:	mov	r0, r5
   1311c:	bl	12a3c <fputs@plt>
   13120:	add	r8, r8, #1
   13124:	b	13070 <_start@@Base+0x46c>
   13128:	andeq	lr, r1, r9, ror r9
   1312c:	andeq	lr, r1, r3, ror r9
   13130:	andeq	lr, r1, r1, lsl #19
   13134:	andeq	lr, r1, lr, ror #18
   13138:	andeq	lr, r1, r7, lsl #19
   1313c:	push	{r4, lr}
   13140:	mov	r4, r0
   13144:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   13148:	mov	r1, r0
   1314c:	mov	r0, r4
   13150:	pop	{r4, lr}
   13154:	b	12ea8 <_start@@Base+0x2a4>
   13158:	mvn	r3, #-1073741824	; 0xc0000000
   1315c:	mov	r2, #2
   13160:	mov	r1, #4
   13164:	b	1b74c <flatcc_builder_start_vector@@Base>
   13168:	push	{r4, lr}
   1316c:	mov	r4, r1
   13170:	mov	r1, #1
   13174:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   13178:	cmp	r0, #0
   1317c:	ldrne	r3, [r4]
   13180:	strne	r3, [r0]
   13184:	pop	{r4, pc}
   13188:	push	{r4, lr}
   1318c:	mov	r4, r0
   13190:	bl	1c0a8 <flatcc_builder_end_vector@@Base>
   13194:	mov	r1, r0
   13198:	mov	r0, r4
   1319c:	pop	{r4, lr}
   131a0:	b	12ed8 <_start@@Base+0x2d4>
   131a4:	cmp	r0, #0
   131a8:	push	{r4, r5, r6, lr}
   131ac:	mov	r5, r2
   131b0:	moveq	r4, r0
   131b4:	ldrne	r4, [r0, #-4]
   131b8:	cmp	r2, r4
   131bc:	movcs	r2, r4
   131c0:	bl	12a48 <strncmp@plt>
   131c4:	cmp	r0, #0
   131c8:	popne	{r4, r5, r6, pc}
   131cc:	cmp	r5, r4
   131d0:	bhi	131e0 <_start@@Base+0x5dc>
   131d4:	movcc	r0, #1
   131d8:	movcs	r0, #0
   131dc:	pop	{r4, r5, r6, pc}
   131e0:	mvn	r0, #0
   131e4:	pop	{r4, r5, r6, pc}
   131e8:	push	{r0, r1, r4, lr}
   131ec:	mov	r4, sp
   131f0:	mov	r1, #0
   131f4:	mov	r0, r4
   131f8:	bl	129ac <gettimeofday@plt>
   131fc:	ldr	r3, [pc, #84]	; 13258 <_start@@Base+0x654>
   13200:	vldr	d5, [pc, #72]	; 13250 <_start@@Base+0x64c>
   13204:	ldr	r2, [r3]
   13208:	cmp	r2, #0
   1320c:	ldr	r2, [sp, #4]
   13210:	ldmeq	r4, {r0, r1}
   13214:	stmeq	r3, {r0, r1}
   13218:	ldr	r1, [r3, #4]
   1321c:	sub	r2, r2, r1
   13220:	vmov	s15, r2
   13224:	ldr	r2, [r3]
   13228:	ldr	r3, [sp]
   1322c:	sub	r3, r3, r2
   13230:	vcvt.f64.s32	d7, s15
   13234:	vmov	s0, r3
   13238:	vdiv.f64	d6, d7, d5
   1323c:	vcvt.f64.s32	d0, s0
   13240:	vadd.f64	d0, d6, d0
   13244:	add	sp, sp, #8
   13248:	pop	{r4, pc}
   1324c:	nop	{0}
   13250:	andeq	r0, r0, r0
   13254:	smlawbmi	lr, r0, r4, r8
   13258:	andeq	r3, r3, r8, ror r0
   1325c:	cmp	r0, #0
   13260:	bne	1327c <_start@@Base+0x678>
   13264:	push	{r4, lr}
   13268:	movw	r2, #697	; 0x2b9
   1326c:	ldr	r3, [pc, #56]	; 132ac <_start@@Base+0x6a8>
   13270:	ldr	r1, [pc, #56]	; 132b0 <_start@@Base+0x6ac>
   13274:	ldr	r0, [pc, #56]	; 132b4 <_start@@Base+0x6b0>
   13278:	bl	12a60 <__assert_fail@plt>
   1327c:	ldr	r3, [r0]
   13280:	sub	r3, r0, r3
   13284:	ldrh	r2, [r3]
   13288:	cmp	r2, #9
   1328c:	bls	132a4 <_start@@Base+0x6a0>
   13290:	ldrh	r3, [r3, #8]
   13294:	cmp	r3, #0
   13298:	beq	132a4 <_start@@Base+0x6a0>
   1329c:	ldrsh	r0, [r0, r3]
   132a0:	bx	lr
   132a4:	mov	r0, #100	; 0x64
   132a8:	bx	lr
   132ac:	strdeq	lr, [r1], -fp
   132b0:	strdeq	lr, [r1], -r3
   132b4:	andeq	lr, r1, r5, asr r8
   132b8:	cmp	r0, #0
   132bc:	bne	132d8 <_start@@Base+0x6d4>
   132c0:	push	{r4, lr}
   132c4:	movw	r2, #697	; 0x2b9
   132c8:	ldr	r3, [pc, #44]	; 132fc <_start@@Base+0x6f8>
   132cc:	ldr	r1, [pc, #44]	; 13300 <_start@@Base+0x6fc>
   132d0:	ldr	r0, [pc, #44]	; 13304 <_start@@Base+0x700>
   132d4:	bl	12a60 <__assert_fail@plt>
   132d8:	ldr	r3, [r0]
   132dc:	sub	r0, r0, r3
   132e0:	ldrh	r3, [r0]
   132e4:	cmp	r3, #9
   132e8:	ldrhhi	r0, [r0, #8]
   132ec:	movls	r0, #0
   132f0:	adds	r0, r0, #0
   132f4:	movne	r0, #1
   132f8:	bx	lr
   132fc:	andeq	lr, r1, r5, lsl r1
   13300:	strdeq	lr, [r1], -r3
   13304:	andeq	lr, r1, r5, asr r8
   13308:	cmp	r0, #0
   1330c:	bne	13328 <_start@@Base+0x724>
   13310:	push	{r4, lr}
   13314:	mov	r2, #696	; 0x2b8
   13318:	ldr	r3, [pc, #44]	; 1334c <_start@@Base+0x748>
   1331c:	ldr	r1, [pc, #44]	; 13350 <_start@@Base+0x74c>
   13320:	ldr	r0, [pc, #44]	; 13354 <_start@@Base+0x750>
   13324:	bl	12a60 <__assert_fail@plt>
   13328:	ldr	r3, [r0]
   1332c:	sub	r0, r0, r3
   13330:	ldrh	r3, [r0]
   13334:	cmp	r3, #5
   13338:	ldrhhi	r0, [r0, #4]
   1333c:	movls	r0, #0
   13340:	adds	r0, r0, #0
   13344:	movne	r0, #1
   13348:	bx	lr
   1334c:	andeq	lr, r1, sl, lsr r1
   13350:	strdeq	lr, [r1], -r3
   13354:	andeq	lr, r1, r5, asr r8
   13358:	subs	r2, r0, #0
   1335c:	bne	13378 <_start@@Base+0x774>
   13360:	push	{r4, lr}
   13364:	mov	r2, #696	; 0x2b8
   13368:	ldr	r3, [pc, #52]	; 133a4 <_start@@Base+0x7a0>
   1336c:	ldr	r1, [pc, #52]	; 133a8 <_start@@Base+0x7a4>
   13370:	ldr	r0, [pc, #52]	; 133ac <_start@@Base+0x7a8>
   13374:	bl	12a60 <__assert_fail@plt>
   13378:	ldr	r3, [r2]
   1337c:	sub	r3, r2, r3
   13380:	ldrh	r1, [r3]
   13384:	cmp	r1, #5
   13388:	bls	1339c <_start@@Base+0x798>
   1338c:	ldrh	r0, [r3, #4]
   13390:	cmp	r0, #0
   13394:	addne	r0, r2, r0
   13398:	bx	lr
   1339c:	mov	r0, #0
   133a0:	bx	lr
   133a4:	andeq	lr, r1, r0, ror #2
   133a8:	strdeq	lr, [r1], -r3
   133ac:	andeq	lr, r1, r5, asr r8
   133b0:	subs	r3, r0, #0
   133b4:	bne	133d0 <_start@@Base+0x7cc>
   133b8:	push	{r4, lr}
   133bc:	movw	r2, #706	; 0x2c2
   133c0:	ldr	r3, [pc, #64]	; 13408 <_start@@Base+0x804>
   133c4:	ldr	r1, [pc, #64]	; 1340c <_start@@Base+0x808>
   133c8:	ldr	r0, [pc, #64]	; 13410 <_start@@Base+0x80c>
   133cc:	bl	12a60 <__assert_fail@plt>
   133d0:	ldr	r2, [r3]
   133d4:	sub	r2, r3, r2
   133d8:	ldrh	r1, [r2]
   133dc:	cmp	r1, #15
   133e0:	bls	13400 <_start@@Base+0x7fc>
   133e4:	ldrh	r0, [r2, #14]
   133e8:	cmp	r0, #0
   133ec:	addne	r2, r3, r0
   133f0:	ldrne	r0, [r3, r0]
   133f4:	addne	r0, r0, #4
   133f8:	addne	r0, r2, r0
   133fc:	bx	lr
   13400:	mov	r0, #0
   13404:	bx	lr
   13408:	andeq	lr, r1, fp, ror r1
   1340c:	strdeq	lr, [r1], -r3
   13410:	andeq	lr, r1, r5, asr r8
   13414:	cmp	r0, #0
   13418:	beq	13428 <_start@@Base+0x824>
   1341c:	ldr	r3, [r0, #-4]
   13420:	cmp	r1, r3
   13424:	bcc	13440 <_start@@Base+0x83c>
   13428:	push	{r4, lr}
   1342c:	movw	r2, #395	; 0x18b
   13430:	ldr	r3, [pc, #16]	; 13448 <_start@@Base+0x844>
   13434:	ldr	r1, [pc, #16]	; 1344c <_start@@Base+0x848>
   13438:	ldr	r0, [pc, #16]	; 13450 <_start@@Base+0x84c>
   1343c:	bl	12a60 <__assert_fail@plt>
   13440:	ldrb	r0, [r0, r1]
   13444:	bx	lr
   13448:	muleq	r1, ip, r1
   1344c:	andeq	lr, r1, fp, lsl #19
   13450:	strdeq	lr, [r1], -r3
   13454:	push	{r4, r5, r6, lr}
   13458:	mov	r5, r0
   1345c:	mov	r6, r1
   13460:	mov	r4, #0
   13464:	cmp	r5, #0
   13468:	beq	13478 <_start@@Base+0x874>
   1346c:	ldr	r3, [r5, #-4]
   13470:	cmp	r4, r3
   13474:	bcc	13484 <_start@@Base+0x880>
   13478:	mvn	r4, #0
   1347c:	mov	r0, r4
   13480:	pop	{r4, r5, r6, pc}
   13484:	mov	r1, r4
   13488:	mov	r0, r5
   1348c:	bl	13414 <_start@@Base+0x810>
   13490:	cmp	r0, r6
   13494:	beq	1347c <_start@@Base+0x878>
   13498:	add	r4, r4, #1
   1349c:	b	13464 <_start@@Base+0x860>
   134a0:	push	{r4, r5, r6, r7, r8, lr}
   134a4:	mov	r5, r0
   134a8:	mov	r6, r2
   134ac:	mov	r7, r3
   134b0:	mov	r4, r1
   134b4:	cmp	r5, #0
   134b8:	beq	134d0 <_start@@Base+0x8cc>
   134bc:	ldr	r1, [r5, #-4]
   134c0:	cmp	r6, r1
   134c4:	movcc	r1, r6
   134c8:	cmp	r4, r1
   134cc:	bcc	134dc <_start@@Base+0x8d8>
   134d0:	mvn	r4, #0
   134d4:	mov	r0, r4
   134d8:	pop	{r4, r5, r6, r7, r8, pc}
   134dc:	mov	r1, r4
   134e0:	mov	r0, r5
   134e4:	bl	13414 <_start@@Base+0x810>
   134e8:	cmp	r0, r7
   134ec:	beq	134d4 <_start@@Base+0x8d0>
   134f0:	add	r4, r4, #1
   134f4:	b	134b4 <_start@@Base+0x8b0>
   134f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134fc:	mov	r5, r0
   13500:	mov	r6, r1
   13504:	mov	r8, r2
   13508:	lsl	r4, r6, #1
   1350c:	cmp	r4, r8
   13510:	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   13514:	bcs	13540 <_start@@Base+0x93c>
   13518:	mov	r1, r4
   1351c:	mov	r0, r5
   13520:	bl	13414 <_start@@Base+0x810>
   13524:	add	r7, r4, #1
   13528:	mov	r9, r0
   1352c:	mov	r1, r7
   13530:	mov	r0, r5
   13534:	bl	13414 <_start@@Base+0x810>
   13538:	cmp	r9, r0
   1353c:	movcc	r4, r7
   13540:	mov	r1, r6
   13544:	mov	r0, r5
   13548:	bl	13414 <_start@@Base+0x810>
   1354c:	mov	r7, r0
   13550:	mov	r1, r4
   13554:	mov	r0, r5
   13558:	bl	13414 <_start@@Base+0x810>
   1355c:	cmp	r7, r0
   13560:	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   13564:	ldrb	r2, [r5, r6]
   13568:	ldrb	r3, [r5, r4]
   1356c:	strb	r2, [r5, r4]
   13570:	strb	r3, [r5, r6]
   13574:	mov	r6, r4
   13578:	b	13508 <_start@@Base+0x904>
   1357c:	cmp	r0, #0
   13580:	bne	1359c <_start@@Base+0x998>
   13584:	push	{r4, lr}
   13588:	movw	r2, #698	; 0x2ba
   1358c:	ldr	r3, [pc, #56]	; 135cc <_start@@Base+0x9c8>
   13590:	ldr	r1, [pc, #56]	; 135d0 <_start@@Base+0x9cc>
   13594:	ldr	r0, [pc, #56]	; 135d4 <_start@@Base+0x9d0>
   13598:	bl	12a60 <__assert_fail@plt>
   1359c:	ldr	r3, [r0]
   135a0:	sub	r3, r0, r3
   135a4:	ldrh	r2, [r3]
   135a8:	cmp	r2, #7
   135ac:	bls	135c4 <_start@@Base+0x9c0>
   135b0:	ldrh	r3, [r3, #6]
   135b4:	cmp	r3, #0
   135b8:	beq	135c4 <_start@@Base+0x9c0>
   135bc:	ldrsh	r0, [r0, r3]
   135c0:	bx	lr
   135c4:	mov	r0, #150	; 0x96
   135c8:	bx	lr
   135cc:			; <UNDEFINED> instruction: 0x0001e1b5
   135d0:	strdeq	lr, [r1], -r3
   135d4:	andeq	lr, r1, r5, asr r8
   135d8:	cmp	r0, #0
   135dc:	bne	135f8 <_start@@Base+0x9f4>
   135e0:	push	{r4, lr}
   135e4:	movw	r2, #698	; 0x2ba
   135e8:	ldr	r3, [pc, #44]	; 1361c <_start@@Base+0xa18>
   135ec:	ldr	r1, [pc, #44]	; 13620 <_start@@Base+0xa1c>
   135f0:	ldr	r0, [pc, #44]	; 13624 <_start@@Base+0xa20>
   135f4:	bl	12a60 <__assert_fail@plt>
   135f8:	ldr	r3, [r0]
   135fc:	sub	r0, r0, r3
   13600:	ldrh	r3, [r0]
   13604:	cmp	r3, #7
   13608:	ldrhhi	r0, [r0, #6]
   1360c:	movls	r0, #0
   13610:	adds	r0, r0, #0
   13614:	movne	r0, #1
   13618:	bx	lr
   1361c:	ldrdeq	lr, [r1], -r1
   13620:	strdeq	lr, [r1], -r3
   13624:	andeq	lr, r1, r5, asr r8
   13628:	subs	r3, r0, #0
   1362c:	bne	13648 <_start@@Base+0xa44>
   13630:	push	{r4, lr}
   13634:	movw	r2, #718	; 0x2ce
   13638:	ldr	r3, [pc, #64]	; 13680 <_start@@Base+0xa7c>
   1363c:	ldr	r1, [pc, #64]	; 13684 <_start@@Base+0xa80>
   13640:	ldr	r0, [pc, #64]	; 13688 <_start@@Base+0xa84>
   13644:	bl	12a60 <__assert_fail@plt>
   13648:	ldr	r2, [r3]
   1364c:	sub	r2, r3, r2
   13650:	ldrh	r1, [r2]
   13654:	cmp	r1, #23
   13658:	bls	13678 <_start@@Base+0xa74>
   1365c:	ldrh	r0, [r2, #22]
   13660:	cmp	r0, #0
   13664:	addne	r2, r3, r0
   13668:	ldrne	r0, [r3, r0]
   1366c:	addne	r0, r0, #4
   13670:	addne	r0, r2, r0
   13674:	bx	lr
   13678:	mov	r0, #0
   1367c:	bx	lr
   13680:	strdeq	lr, [r1], -r8
   13684:	strdeq	lr, [r1], -r3
   13688:	andeq	lr, r1, r5, asr r8
   1368c:	cmp	r0, #0
   13690:	beq	136a0 <_start@@Base+0xa9c>
   13694:	ldr	r3, [r0, #-4]
   13698:	cmp	r3, r1
   1369c:	bhi	136b8 <_start@@Base+0xab4>
   136a0:	push	{r4, lr}
   136a4:	mov	r2, #380	; 0x17c
   136a8:	ldr	r3, [pc, #16]	; 136c0 <_start@@Base+0xabc>
   136ac:	ldr	r1, [pc, #16]	; 136c4 <_start@@Base+0xac0>
   136b0:	ldr	r0, [pc, #16]	; 136c8 <_start@@Base+0xac4>
   136b4:	bl	12a60 <__assert_fail@plt>
   136b8:	add	r0, r0, r1, lsl #2
   136bc:	bx	lr
   136c0:	andeq	lr, r1, r5, lsl r2
   136c4:	strdeq	lr, [r1], -r3
   136c8:	strdeq	lr, [r1], -r3
   136cc:	subs	r3, r0, #0
   136d0:	bne	136ec <_start@@Base+0xae8>
   136d4:	push	{r4, lr}
   136d8:	mov	r2, #712	; 0x2c8
   136dc:	ldr	r3, [pc, #64]	; 13724 <_start@@Base+0xb20>
   136e0:	ldr	r1, [pc, #64]	; 13728 <_start@@Base+0xb24>
   136e4:	ldr	r0, [pc, #64]	; 1372c <_start@@Base+0xb28>
   136e8:	bl	12a60 <__assert_fail@plt>
   136ec:	ldr	r2, [r3]
   136f0:	sub	r2, r3, r2
   136f4:	ldrh	r1, [r2]
   136f8:	cmp	r1, #25
   136fc:	bls	1371c <_start@@Base+0xb18>
   13700:	ldrh	r0, [r2, #24]
   13704:	cmp	r0, #0
   13708:	addne	r2, r3, r0
   1370c:	ldrne	r0, [r3, r0]
   13710:	addne	r0, r0, #4
   13714:	addne	r0, r2, r0
   13718:	bx	lr
   1371c:	mov	r0, #0
   13720:	bx	lr
   13724:	andeq	lr, r1, r0, lsr r2
   13728:	strdeq	lr, [r1], -r3
   1372c:	andeq	lr, r1, r5, asr r8
   13730:	cmp	r0, #0
   13734:	add	r2, r0, r1, lsl #2
   13738:	beq	13748 <_start@@Base+0xb44>
   1373c:	ldr	r3, [r0, #-4]
   13740:	cmp	r1, r3
   13744:	bcc	13760 <_start@@Base+0xb5c>
   13748:	push	{r4, lr}
   1374c:	mov	r2, #108	; 0x6c
   13750:	ldr	r3, [pc, #24]	; 13770 <_start@@Base+0xb6c>
   13754:	ldr	r1, [pc, #24]	; 13774 <_start@@Base+0xb70>
   13758:	ldr	r0, [pc, #24]	; 13778 <_start@@Base+0xb74>
   1375c:	bl	12a60 <__assert_fail@plt>
   13760:	ldr	r3, [r0, r1, lsl #2]
   13764:	add	r3, r3, #4
   13768:	add	r0, r2, r3
   1376c:	bx	lr
   13770:	andeq	lr, r1, r9, asr r2
   13774:	andeq	lr, r1, fp, lsl #19
   13778:	strdeq	lr, [r1], -r3
   1377c:	subs	r3, r0, #0
   13780:	bne	1379c <_start@@Base+0xb98>
   13784:	push	{r4, lr}
   13788:	movw	r2, #714	; 0x2ca
   1378c:	ldr	r3, [pc, #64]	; 137d4 <_start@@Base+0xbd0>
   13790:	ldr	r1, [pc, #64]	; 137d8 <_start@@Base+0xbd4>
   13794:	ldr	r0, [pc, #64]	; 137dc <_start@@Base+0xbd8>
   13798:	bl	12a60 <__assert_fail@plt>
   1379c:	ldr	r2, [r3]
   137a0:	sub	r2, r3, r2
   137a4:	ldrh	r1, [r2]
   137a8:	cmp	r1, #53	; 0x35
   137ac:	bls	137cc <_start@@Base+0xbc8>
   137b0:	ldrh	r0, [r2, #52]	; 0x34
   137b4:	cmp	r0, #0
   137b8:	addne	r2, r3, r0
   137bc:	ldrne	r0, [r3, r0]
   137c0:	addne	r0, r0, #4
   137c4:	addne	r0, r2, r0
   137c8:	bx	lr
   137cc:	mov	r0, #0
   137d0:	bx	lr
   137d4:	andeq	lr, r1, r3, ror r2
   137d8:	strdeq	lr, [r1], -r3
   137dc:	andeq	lr, r1, r5, asr r8
   137e0:	subs	r3, r0, #0
   137e4:	bne	13800 <_start@@Base+0xbfc>
   137e8:	push	{r4, lr}
   137ec:	movw	r2, #711	; 0x2c7
   137f0:	ldr	r3, [pc, #64]	; 13838 <_start@@Base+0xc34>
   137f4:	ldr	r1, [pc, #64]	; 1383c <_start@@Base+0xc38>
   137f8:	ldr	r0, [pc, #64]	; 13840 <_start@@Base+0xc3c>
   137fc:	bl	12a60 <__assert_fail@plt>
   13800:	ldr	r2, [r3]
   13804:	sub	r2, r3, r2
   13808:	ldrh	r1, [r2]
   1380c:	cmp	r1, #27
   13810:	bls	13830 <_start@@Base+0xc2c>
   13814:	ldrh	r0, [r2, #26]
   13818:	cmp	r0, #0
   1381c:	addne	r2, r3, r0
   13820:	ldrne	r0, [r3, r0]
   13824:	addne	r0, r0, #4
   13828:	addne	r0, r2, r0
   1382c:	bx	lr
   13830:	mov	r0, #0
   13834:	bx	lr
   13838:	muleq	r1, fp, r2
   1383c:	strdeq	lr, [r1], -r3
   13840:	andeq	lr, r1, r5, asr r8
   13844:	cmp	r0, #0
   13848:	add	r2, r0, r1, lsl #2
   1384c:	beq	1385c <_start@@Base+0xc58>
   13850:	ldr	r3, [r0, #-4]
   13854:	cmp	r1, r3
   13858:	bcc	13874 <_start@@Base+0xc70>
   1385c:	push	{r4, lr}
   13860:	movw	r2, #693	; 0x2b5
   13864:	ldr	r3, [pc, #20]	; 13880 <_start@@Base+0xc7c>
   13868:	ldr	r1, [pc, #20]	; 13884 <_start@@Base+0xc80>
   1386c:	ldr	r0, [pc, #20]	; 13888 <_start@@Base+0xc84>
   13870:	bl	12a60 <__assert_fail@plt>
   13874:	ldr	r0, [r0, r1, lsl #2]
   13878:	add	r0, r2, r0
   1387c:	bx	lr
   13880:	andeq	lr, r1, r4, asr #5
   13884:	strdeq	lr, [r1], -r3
   13888:	strdeq	lr, [r1], -r3
   1388c:	subs	r2, r0, #0
   13890:	bne	138ac <_start@@Base+0xca8>
   13894:	push	{r4, lr}
   13898:	movw	r2, #717	; 0x2cd
   1389c:	ldr	r3, [pc, #52]	; 138d8 <_start@@Base+0xcd4>
   138a0:	ldr	r1, [pc, #52]	; 138dc <_start@@Base+0xcd8>
   138a4:	ldr	r0, [pc, #52]	; 138e0 <_start@@Base+0xcdc>
   138a8:	bl	12a60 <__assert_fail@plt>
   138ac:	ldr	r3, [r2]
   138b0:	sub	r3, r2, r3
   138b4:	ldrh	r1, [r3]
   138b8:	cmp	r1, #19
   138bc:	bls	138d0 <_start@@Base+0xccc>
   138c0:	ldrh	r0, [r3, #18]
   138c4:	cmp	r0, #0
   138c8:	ldrbne	r0, [r2, r0]
   138cc:	bx	lr
   138d0:	mov	r0, #0
   138d4:	bx	lr
   138d8:	andeq	lr, r1, r2, ror #5
   138dc:	strdeq	lr, [r1], -r3
   138e0:	andeq	lr, r1, r5, asr r8
   138e4:	subs	r3, r0, #0
   138e8:	bne	13904 <_start@@Base+0xd00>
   138ec:	push	{r4, lr}
   138f0:	movw	r2, #717	; 0x2cd
   138f4:	ldr	r3, [pc, #60]	; 13938 <_start@@Base+0xd34>
   138f8:	ldr	r1, [pc, #60]	; 1393c <_start@@Base+0xd38>
   138fc:	ldr	r0, [pc, #60]	; 13940 <_start@@Base+0xd3c>
   13900:	bl	12a60 <__assert_fail@plt>
   13904:	ldr	r2, [r3]
   13908:	sub	r2, r3, r2
   1390c:	ldrh	r1, [r2]
   13910:	cmp	r1, #21
   13914:	bls	13930 <_start@@Base+0xd2c>
   13918:	ldrh	r0, [r2, #20]
   1391c:	cmp	r0, #0
   13920:	addne	r2, r3, r0
   13924:	ldrne	r0, [r3, r0]
   13928:	addne	r0, r2, r0
   1392c:	bx	lr
   13930:	mov	r0, #0
   13934:	bx	lr
   13938:	andeq	lr, r1, r3, lsl #6
   1393c:	strdeq	lr, [r1], -r3
   13940:	andeq	lr, r1, r5, asr r8
   13944:	cmp	r0, #0
   13948:	push	{r4, lr}
   1394c:	bne	13964 <_start@@Base+0xd60>
   13950:	ldr	r3, [pc, #84]	; 139ac <_start@@Base+0xda8>
   13954:	movw	r2, #699	; 0x2bb
   13958:	ldr	r1, [pc, #80]	; 139b0 <_start@@Base+0xdac>
   1395c:	ldr	r0, [pc, #80]	; 139b4 <_start@@Base+0xdb0>
   13960:	bl	12a60 <__assert_fail@plt>
   13964:	ldr	r3, [r0]
   13968:	sub	r3, r0, r3
   1396c:	ldrh	r2, [r3]
   13970:	cmp	r2, #11
   13974:	bls	13984 <_start@@Base+0xd80>
   13978:	ldrh	r2, [r3, #10]
   1397c:	cmp	r2, #0
   13980:	bne	13998 <_start@@Base+0xd94>
   13984:	ldr	r3, [pc, #32]	; 139ac <_start@@Base+0xda8>
   13988:	movw	r2, #699	; 0x2bb
   1398c:	ldr	r1, [pc, #28]	; 139b0 <_start@@Base+0xdac>
   13990:	ldr	r0, [pc, #32]	; 139b8 <_start@@Base+0xdb4>
   13994:	b	13960 <_start@@Base+0xd5c>
   13998:	add	r3, r0, r2
   1399c:	ldr	r0, [r0, r2]
   139a0:	add	r0, r0, #4
   139a4:	add	r0, r3, r0
   139a8:	pop	{r4, pc}
   139ac:	andeq	lr, r1, pc, lsl r3
   139b0:	strdeq	lr, [r1], -r3
   139b4:	andeq	lr, r1, r5, asr r8
   139b8:	andeq	lr, r1, sl, lsr #20
   139bc:	push	{r4, r5, r6, r7, r8, lr}
   139c0:	subs	r6, r0, #0
   139c4:	beq	139e0 <_start@@Base+0xddc>
   139c8:	ldr	r5, [r6, #-4]
   139cc:	cmp	r5, #0
   139d0:	movne	r8, r1
   139d4:	subne	r5, r5, #1
   139d8:	movne	r4, #0
   139dc:	bne	13a14 <_start@@Base+0xe10>
   139e0:	mvn	r4, #0
   139e4:	b	13a40 <_start@@Base+0xe3c>
   139e8:	sub	r7, r5, r4
   139ec:	mov	r0, r6
   139f0:	add	r7, r4, r7, lsr #1
   139f4:	mov	r1, r7
   139f8:	bl	13844 <_start@@Base+0xc40>
   139fc:	bl	13944 <_start@@Base+0xd40>
   13a00:	mov	r1, r8
   13a04:	bl	12964 <strcmp@plt>
   13a08:	cmp	r0, #0
   13a0c:	addlt	r4, r7, #1
   13a10:	movge	r5, r7
   13a14:	cmp	r5, r4
   13a18:	bhi	139e8 <_start@@Base+0xde4>
   13a1c:	bne	139e0 <_start@@Base+0xddc>
   13a20:	mov	r1, r4
   13a24:	mov	r0, r6
   13a28:	bl	13844 <_start@@Base+0xc40>
   13a2c:	bl	13944 <_start@@Base+0xd40>
   13a30:	mov	r1, r8
   13a34:	bl	12964 <strcmp@plt>
   13a38:	cmp	r0, #0
   13a3c:	mvnne	r4, #0
   13a40:	mov	r0, r4
   13a44:	pop	{r4, r5, r6, r7, r8, pc}
   13a48:	push	{r4, r5, r6, lr}
   13a4c:	mov	r5, r0
   13a50:	mov	r6, r1
   13a54:	mov	r4, #0
   13a58:	cmp	r5, #0
   13a5c:	beq	13a6c <_start@@Base+0xe68>
   13a60:	ldr	r3, [r5, #-4]
   13a64:	cmp	r4, r3
   13a68:	bcc	13a78 <_start@@Base+0xe74>
   13a6c:	mvn	r4, #0
   13a70:	mov	r0, r4
   13a74:	pop	{r4, r5, r6, pc}
   13a78:	mov	r1, r4
   13a7c:	mov	r0, r5
   13a80:	bl	13844 <_start@@Base+0xc40>
   13a84:	bl	13944 <_start@@Base+0xd40>
   13a88:	mov	r1, r6
   13a8c:	bl	12964 <strcmp@plt>
   13a90:	cmp	r0, #0
   13a94:	beq	13a70 <_start@@Base+0xe6c>
   13a98:	add	r4, r4, #1
   13a9c:	b	13a58 <_start@@Base+0xe54>
   13aa0:	push	{r4, r5, r6, lr}
   13aa4:	subs	r5, r0, #0
   13aa8:	mov	r6, r1
   13aac:	moveq	r4, r5
   13ab0:	ldrne	r4, [r5, #-4]
   13ab4:	sub	r4, r4, #1
   13ab8:	cmn	r4, #1
   13abc:	bne	13ac8 <_start@@Base+0xec4>
   13ac0:	mov	r0, r4
   13ac4:	pop	{r4, r5, r6, pc}
   13ac8:	mov	r1, r4
   13acc:	mov	r0, r5
   13ad0:	bl	13844 <_start@@Base+0xc40>
   13ad4:	bl	13944 <_start@@Base+0xd40>
   13ad8:	mov	r1, r6
   13adc:	bl	12964 <strcmp@plt>
   13ae0:	cmp	r0, #0
   13ae4:	sub	r3, r4, #1
   13ae8:	beq	13ac0 <_start@@Base+0xebc>
   13aec:	mov	r4, r3
   13af0:	b	13ab8 <_start@@Base+0xeb4>
   13af4:	push	{r4, r5, r6, r7, r8, lr}
   13af8:	mov	r5, r0
   13afc:	mov	r6, r2
   13b00:	mov	r7, r3
   13b04:	mov	r4, r1
   13b08:	cmp	r5, #0
   13b0c:	beq	13b24 <_start@@Base+0xf20>
   13b10:	ldr	r3, [r5, #-4]
   13b14:	cmp	r6, r3
   13b18:	movcc	r3, r6
   13b1c:	cmp	r4, r3
   13b20:	bcc	13b30 <_start@@Base+0xf2c>
   13b24:	mvn	r4, #0
   13b28:	mov	r0, r4
   13b2c:	pop	{r4, r5, r6, r7, r8, pc}
   13b30:	mov	r1, r4
   13b34:	mov	r0, r5
   13b38:	bl	13844 <_start@@Base+0xc40>
   13b3c:	bl	13944 <_start@@Base+0xd40>
   13b40:	mov	r1, r7
   13b44:	bl	12964 <strcmp@plt>
   13b48:	cmp	r0, #0
   13b4c:	beq	13b28 <_start@@Base+0xf24>
   13b50:	add	r4, r4, #1
   13b54:	b	13b08 <_start@@Base+0xf04>
   13b58:	push	{r4, r5, r6, lr}
   13b5c:	mov	r4, #0
   13b60:	mov	r5, r0
   13b64:	mov	r6, r1
   13b68:	bl	13a48 <_start@@Base+0xe44>
   13b6c:	cmn	r0, #1
   13b70:	bne	13b7c <_start@@Base+0xf78>
   13b74:	mov	r0, r4
   13b78:	pop	{r4, r5, r6, pc}
   13b7c:	add	r1, r0, #1
   13b80:	mov	r3, r6
   13b84:	mvn	r2, #0
   13b88:	mov	r0, r5
   13b8c:	add	r4, r4, #1
   13b90:	bl	13af4 <_start@@Base+0xef0>
   13b94:	b	13b6c <_start@@Base+0xf68>
   13b98:	push	{r4, r5, r6, r7, r8, lr}
   13b9c:	subs	r5, r0, #0
   13ba0:	mov	r6, r1
   13ba4:	mov	r7, r3
   13ba8:	moveq	r2, r5
   13bac:	beq	13bbc <_start@@Base+0xfb8>
   13bb0:	ldr	r3, [r5, #-4]
   13bb4:	cmp	r2, r3
   13bb8:	movcs	r2, r3
   13bbc:	cmp	r2, r6
   13bc0:	sub	r4, r2, #1
   13bc4:	mvnls	r4, #0
   13bc8:	bls	13bf0 <_start@@Base+0xfec>
   13bcc:	mov	r1, r4
   13bd0:	mov	r0, r5
   13bd4:	bl	13844 <_start@@Base+0xc40>
   13bd8:	bl	13944 <_start@@Base+0xd40>
   13bdc:	mov	r1, r7
   13be0:	bl	12964 <strcmp@plt>
   13be4:	cmp	r0, #0
   13be8:	mov	r2, r4
   13bec:	bne	13bbc <_start@@Base+0xfb8>
   13bf0:	mov	r0, r4
   13bf4:	pop	{r4, r5, r6, r7, r8, pc}
   13bf8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bfc:	mov	r5, r0
   13c00:	mov	r6, r1
   13c04:	mov	r7, r2
   13c08:	lsl	r4, r6, #1
   13c0c:	cmp	r4, r7
   13c10:	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c14:	bcs	13c5c <_start@@Base+0x1058>
   13c18:	mov	r1, r4
   13c1c:	mov	r0, r5
   13c20:	bl	13844 <_start@@Base+0xc40>
   13c24:	bl	13944 <_start@@Base+0xd40>
   13c28:	add	r8, r4, #1
   13c2c:	mov	r9, r0
   13c30:	mov	r1, r8
   13c34:	mov	r0, r5
   13c38:	bl	13844 <_start@@Base+0xc40>
   13c3c:	bl	13944 <_start@@Base+0xd40>
   13c40:	subs	r1, r0, #0
   13c44:	mov	r0, r9
   13c48:	ldrne	r2, [r1, #-4]
   13c4c:	moveq	r2, r1
   13c50:	bl	131a4 <_start@@Base+0x5a0>
   13c54:	cmp	r0, #0
   13c58:	movlt	r4, r8
   13c5c:	mov	r1, r6
   13c60:	mov	r0, r5
   13c64:	bl	13844 <_start@@Base+0xc40>
   13c68:	bl	13944 <_start@@Base+0xd40>
   13c6c:	mov	r8, r0
   13c70:	mov	r1, r4
   13c74:	mov	r0, r5
   13c78:	bl	13844 <_start@@Base+0xc40>
   13c7c:	bl	13944 <_start@@Base+0xd40>
   13c80:	subs	r1, r0, #0
   13c84:	mov	r0, r8
   13c88:	ldrne	r2, [r1, #-4]
   13c8c:	moveq	r2, r1
   13c90:	bl	131a4 <_start@@Base+0x5a0>
   13c94:	cmp	r0, #0
   13c98:	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c9c:	sub	r3, r6, r4
   13ca0:	ldr	r2, [r5, r6, lsl #2]
   13ca4:	lsl	r3, r3, #2
   13ca8:	ldr	r1, [r5, r4, lsl #2]
   13cac:	add	r2, r3, r2
   13cb0:	sub	r3, r1, r3
   13cb4:	str	r3, [r5, r6, lsl #2]
   13cb8:	mov	r6, r4
   13cbc:	str	r2, [r5, r4, lsl #2]
   13cc0:	b	13c08 <_start@@Base+0x1004>
   13cc4:	push	{r4, r5, r6, lr}
   13cc8:	subs	r4, r0, #0
   13ccc:	popeq	{r4, r5, r6, pc}
   13cd0:	ldr	r6, [r4, #-4]
   13cd4:	cmp	r6, #0
   13cd8:	popeq	{r4, r5, r6, pc}
   13cdc:	sub	r5, r6, #1
   13ce0:	lsr	r6, r6, #1
   13ce4:	mov	r1, r6
   13ce8:	mov	r2, r5
   13cec:	mov	r0, r4
   13cf0:	bl	13bf8 <_start@@Base+0xff4>
   13cf4:	subs	r6, r6, #1
   13cf8:	bcs	13ce4 <_start@@Base+0x10e0>
   13cfc:	mvn	r6, #3
   13d00:	cmp	r5, #0
   13d04:	popeq	{r4, r5, r6, pc}
   13d08:	mul	r1, r6, r5
   13d0c:	mov	r0, r4
   13d10:	ldr	r2, [r4, r5, lsl #2]
   13d14:	ldr	r3, [r4]
   13d18:	sub	r2, r2, r1
   13d1c:	add	r3, r1, r3
   13d20:	str	r2, [r4]
   13d24:	mov	r1, #0
   13d28:	str	r3, [r4, r5, lsl #2]
   13d2c:	sub	r5, r5, #1
   13d30:	mov	r2, r5
   13d34:	bl	13bf8 <_start@@Base+0xff4>
   13d38:	b	13d00 <_start@@Base+0x10fc>
   13d3c:	push	{r4, r5, r6, r7, r8, lr}
   13d40:	subs	r5, r0, #0
   13d44:	mov	r6, r1
   13d48:	moveq	r4, r5
   13d4c:	mov	r7, r2
   13d50:	ldrne	r4, [r5, #-4]
   13d54:	sub	r4, r4, #1
   13d58:	cmn	r4, #1
   13d5c:	bne	13d68 <_start@@Base+0x1164>
   13d60:	mov	r0, r4
   13d64:	pop	{r4, r5, r6, r7, r8, pc}
   13d68:	mov	r1, r4
   13d6c:	mov	r0, r5
   13d70:	bl	13844 <_start@@Base+0xc40>
   13d74:	bl	13944 <_start@@Base+0xd40>
   13d78:	mov	r2, r7
   13d7c:	mov	r1, r6
   13d80:	bl	131a4 <_start@@Base+0x5a0>
   13d84:	cmp	r0, #0
   13d88:	sub	r3, r4, #1
   13d8c:	beq	13d60 <_start@@Base+0x115c>
   13d90:	mov	r4, r3
   13d94:	b	13d58 <_start@@Base+0x1154>
   13d98:	subs	r3, r0, #0
   13d9c:	bne	13db8 <_start@@Base+0x11b4>
   13da0:	push	{r4, lr}
   13da4:	movw	r2, #722	; 0x2d2
   13da8:	ldr	r3, [pc, #60]	; 13dec <_start@@Base+0x11e8>
   13dac:	ldr	r1, [pc, #60]	; 13df0 <_start@@Base+0x11ec>
   13db0:	ldr	r0, [pc, #60]	; 13df4 <_start@@Base+0x11f0>
   13db4:	bl	12a60 <__assert_fail@plt>
   13db8:	ldr	r2, [r3]
   13dbc:	sub	r2, r3, r2
   13dc0:	ldrh	r1, [r2]
   13dc4:	cmp	r1, #33	; 0x21
   13dc8:	bls	13de4 <_start@@Base+0x11e0>
   13dcc:	ldrh	r0, [r2, #32]
   13dd0:	cmp	r0, #0
   13dd4:	addne	r2, r3, r0
   13dd8:	ldrne	r0, [r3, r0]
   13ddc:	addne	r0, r2, r0
   13de0:	bx	lr
   13de4:	mov	r0, #0
   13de8:	bx	lr
   13dec:	andeq	lr, r1, fp, lsr r3
   13df0:	strdeq	lr, [r1], -r3
   13df4:	andeq	lr, r1, r5, asr r8
   13df8:	subs	r3, r0, #0
   13dfc:	bne	13e18 <_start@@Base+0x1214>
   13e00:	push	{r4, lr}
   13e04:	movw	r2, #621	; 0x26d
   13e08:	ldr	r3, [pc, #64]	; 13e50 <_start@@Base+0x124c>
   13e0c:	ldr	r1, [pc, #64]	; 13e54 <_start@@Base+0x1250>
   13e10:	ldr	r0, [pc, #64]	; 13e58 <_start@@Base+0x1254>
   13e14:	bl	12a60 <__assert_fail@plt>
   13e18:	ldr	r2, [r3]
   13e1c:	sub	r2, r3, r2
   13e20:	ldrh	r1, [r2]
   13e24:	cmp	r1, #9
   13e28:	bls	13e48 <_start@@Base+0x1244>
   13e2c:	ldrh	r0, [r2, #8]
   13e30:	cmp	r0, #0
   13e34:	addne	r2, r3, r0
   13e38:	ldrne	r0, [r3, r0]
   13e3c:	addne	r0, r0, #4
   13e40:	addne	r0, r2, r0
   13e44:	bx	lr
   13e48:	mov	r0, #0
   13e4c:	bx	lr
   13e50:	andeq	lr, r1, ip, asr r3
   13e54:	strdeq	lr, [r1], -r3
   13e58:	andeq	lr, r1, r5, asr r8
   13e5c:	subs	r3, r0, #0
   13e60:	bne	13e7c <_start@@Base+0x1278>
   13e64:	push	{r4, lr}
   13e68:	movw	r2, #621	; 0x26d
   13e6c:	ldr	r3, [pc, #64]	; 13eb4 <_start@@Base+0x12b0>
   13e70:	ldr	r1, [pc, #64]	; 13eb8 <_start@@Base+0x12b4>
   13e74:	ldr	r0, [pc, #64]	; 13ebc <_start@@Base+0x12b8>
   13e78:	bl	12a60 <__assert_fail@plt>
   13e7c:	ldr	r2, [r3]
   13e80:	sub	r2, r3, r2
   13e84:	ldrh	r1, [r2]
   13e88:	cmp	r1, #11
   13e8c:	bls	13eac <_start@@Base+0x12a8>
   13e90:	ldrh	r0, [r2, #10]
   13e94:	cmp	r0, #0
   13e98:	addne	r2, r3, r0
   13e9c:	ldrne	r0, [r3, r0]
   13ea0:	addne	r0, r0, #4
   13ea4:	addne	r0, r2, r0
   13ea8:	bx	lr
   13eac:	mov	r0, #0
   13eb0:	bx	lr
   13eb4:	andeq	lr, r1, ip, ror r3
   13eb8:	strdeq	lr, [r1], -r3
   13ebc:	andeq	lr, r1, r5, asr r8
   13ec0:	cmp	r0, #0
   13ec4:	add	r2, r0, r1, lsl #2
   13ec8:	beq	13ed8 <_start@@Base+0x12d4>
   13ecc:	ldr	r3, [r0, #-4]
   13ed0:	cmp	r1, r3
   13ed4:	bcc	13ef0 <_start@@Base+0x12ec>
   13ed8:	push	{r4, lr}
   13edc:	mov	r2, #117	; 0x75
   13ee0:	ldr	r3, [pc, #20]	; 13efc <_start@@Base+0x12f8>
   13ee4:	ldr	r1, [pc, #20]	; 13f00 <_start@@Base+0x12fc>
   13ee8:	ldr	r0, [pc, #20]	; 13f04 <_start@@Base+0x1300>
   13eec:	bl	12a60 <__assert_fail@plt>
   13ef0:	ldr	r0, [r0, r1, lsl #2]
   13ef4:	add	r0, r2, r0
   13ef8:	bx	lr
   13efc:	muleq	r1, r7, r3
   13f00:	andeq	lr, r1, fp, lsl #19
   13f04:	strdeq	lr, [r1], -r3
   13f08:	cmp	r0, #0
   13f0c:	beq	13f1c <_start@@Base+0x1318>
   13f10:	ldr	r3, [r0, #-4]
   13f14:	cmp	r1, r3
   13f18:	bcc	13f34 <_start@@Base+0x1330>
   13f1c:	push	{r4, lr}
   13f20:	movw	r2, #405	; 0x195
   13f24:	ldr	r3, [pc, #16]	; 13f3c <_start@@Base+0x1338>
   13f28:	ldr	r1, [pc, #16]	; 13f40 <_start@@Base+0x133c>
   13f2c:	ldr	r0, [pc, #16]	; 13f44 <_start@@Base+0x1340>
   13f30:	bl	12a60 <__assert_fail@plt>
   13f34:	ldrb	r0, [r0, r1]
   13f38:	bx	lr
   13f3c:			; <UNDEFINED> instruction: 0x0001e3b2
   13f40:	andeq	lr, r1, fp, lsl #19
   13f44:	strdeq	lr, [r1], -r3
   13f48:	subs	r2, r0, #0
   13f4c:	bne	13f68 <_start@@Base+0x1364>
   13f50:	push	{r4, lr}
   13f54:	movw	r2, #821	; 0x335
   13f58:	ldr	r3, [pc, #52]	; 13f94 <_start@@Base+0x1390>
   13f5c:	ldr	r1, [pc, #52]	; 13f98 <_start@@Base+0x1394>
   13f60:	ldr	r0, [pc, #52]	; 13f9c <_start@@Base+0x1398>
   13f64:	bl	12a60 <__assert_fail@plt>
   13f68:	ldr	r3, [r2]
   13f6c:	sub	r3, r2, r3
   13f70:	ldrh	r1, [r3]
   13f74:	cmp	r1, #13
   13f78:	bls	13f8c <_start@@Base+0x1388>
   13f7c:	ldrh	r0, [r3, #12]
   13f80:	cmp	r0, #0
   13f84:	ldrbne	r0, [r2, r0]
   13f88:	bx	lr
   13f8c:	mov	r0, #0
   13f90:	bx	lr
   13f94:	ldrdeq	lr, [r1], -r0
   13f98:	strdeq	lr, [r1], -r3
   13f9c:	andeq	lr, r1, r5, asr r8
   13fa0:	subs	r3, r0, #0
   13fa4:	bne	13fc0 <_start@@Base+0x13bc>
   13fa8:	push	{r4, lr}
   13fac:	movw	r2, #821	; 0x335
   13fb0:	ldr	r3, [pc, #60]	; 13ff4 <_start@@Base+0x13f0>
   13fb4:	ldr	r1, [pc, #60]	; 13ff8 <_start@@Base+0x13f4>
   13fb8:	ldr	r0, [pc, #60]	; 13ffc <_start@@Base+0x13f8>
   13fbc:	bl	12a60 <__assert_fail@plt>
   13fc0:	ldr	r2, [r3]
   13fc4:	sub	r2, r3, r2
   13fc8:	ldrh	r1, [r2]
   13fcc:	cmp	r1, #15
   13fd0:	bls	13fec <_start@@Base+0x13e8>
   13fd4:	ldrh	r0, [r2, #14]
   13fd8:	cmp	r0, #0
   13fdc:	addne	r2, r3, r0
   13fe0:	ldrne	r0, [r3, r0]
   13fe4:	addne	r0, r2, r0
   13fe8:	bx	lr
   13fec:	mov	r0, #0
   13ff0:	bx	lr
   13ff4:	andeq	lr, r1, sp, ror #7
   13ff8:	strdeq	lr, [r1], -r3
   13ffc:	andeq	lr, r1, r5, asr r8
   14000:	subs	r2, r0, #0
   14004:	bne	14020 <_start@@Base+0x141c>
   14008:	push	{r4, lr}
   1400c:	movw	r2, #770	; 0x302
   14010:	ldr	r3, [pc, #52]	; 1404c <_start@@Base+0x1448>
   14014:	ldr	r1, [pc, #52]	; 14050 <_start@@Base+0x144c>
   14018:	ldr	r0, [pc, #52]	; 14054 <_start@@Base+0x1450>
   1401c:	bl	12a60 <__assert_fail@plt>
   14020:	ldr	r3, [r2]
   14024:	sub	r3, r2, r3
   14028:	ldrh	r1, [r3]
   1402c:	cmp	r1, #5
   14030:	bls	14044 <_start@@Base+0x1440>
   14034:	ldrh	r0, [r3, #4]
   14038:	cmp	r0, #0
   1403c:	ldrne	r0, [r2, r0]
   14040:	bx	lr
   14044:	mov	r0, #0
   14048:	bx	lr
   1404c:	andeq	lr, r1, r5, lsl #8
   14050:	strdeq	lr, [r1], -r3
   14054:	andeq	lr, r1, r5, asr r8
   14058:	subs	r3, r0, #0
   1405c:	bne	14078 <_start@@Base+0x1474>
   14060:	push	{r4, lr}
   14064:	movw	r2, #823	; 0x337
   14068:	ldr	r3, [pc, #64]	; 140b0 <_start@@Base+0x14ac>
   1406c:	ldr	r1, [pc, #64]	; 140b4 <_start@@Base+0x14b0>
   14070:	ldr	r0, [pc, #64]	; 140b8 <_start@@Base+0x14b4>
   14074:	bl	12a60 <__assert_fail@plt>
   14078:	ldr	r2, [r3]
   1407c:	sub	r2, r3, r2
   14080:	ldrh	r1, [r2]
   14084:	cmp	r1, #21
   14088:	bls	140a8 <_start@@Base+0x14a4>
   1408c:	ldrh	r0, [r2, #20]
   14090:	cmp	r0, #0
   14094:	addne	r2, r3, r0
   14098:	ldrne	r0, [r3, r0]
   1409c:	addne	r0, r0, #4
   140a0:	addne	r0, r2, r0
   140a4:	bx	lr
   140a8:	mov	r0, #0
   140ac:	bx	lr
   140b0:	andeq	lr, r1, sl, lsr #8
   140b4:	strdeq	lr, [r1], -r3
   140b8:	andeq	lr, r1, r5, asr r8
   140bc:	push	{r0, r1, r2, r4, r5, lr}
   140c0:	mov	r4, r0
   140c4:	add	r0, sp, #8
   140c8:	stmdb	r0, {r1, r2}
   140cc:	ldr	r2, [sp]
   140d0:	cmp	r2, #0
   140d4:	beq	140e4 <_start@@Base+0x14e0>
   140d8:	ldr	r1, [r2, #-4]
   140dc:	cmp	r3, r1
   140e0:	bcc	140f8 <_start@@Base+0x14f4>
   140e4:	ldr	r3, [pc, #64]	; 1412c <_start@@Base+0x1528>
   140e8:	movw	r2, #773	; 0x305
   140ec:	ldr	r1, [pc, #60]	; 14130 <_start@@Base+0x152c>
   140f0:	ldr	r0, [pc, #60]	; 14134 <_start@@Base+0x1530>
   140f4:	bl	12a60 <__assert_fail@plt>
   140f8:	ldrb	r5, [r2, r3]
   140fc:	cmp	r5, #0
   14100:	strbeq	r5, [r4]
   14104:	streq	r5, [r4, #4]
   14108:	beq	14120 <_start@@Base+0x151c>
   1410c:	mov	r1, r3
   14110:	ldr	r0, [sp, #4]
   14114:	bl	13ec0 <_start@@Base+0x12bc>
   14118:	strb	r5, [r4]
   1411c:	str	r0, [r4, #4]
   14120:	mov	r0, r4
   14124:	add	sp, sp, #12
   14128:	pop	{r4, r5, pc}
   1412c:	andeq	lr, r1, r8, asr #8
   14130:	strdeq	lr, [r1], -r3
   14134:	andeq	lr, r1, fp, asr #20
   14138:	cmp	r0, #0
   1413c:	bne	14158 <_start@@Base+0x1554>
   14140:	push	{r4, lr}
   14144:	movw	r2, #705	; 0x2c1
   14148:	ldr	r3, [pc, #44]	; 1417c <_start@@Base+0x1578>
   1414c:	ldr	r1, [pc, #44]	; 14180 <_start@@Base+0x157c>
   14150:	ldr	r0, [pc, #44]	; 14184 <_start@@Base+0x1580>
   14154:	bl	12a60 <__assert_fail@plt>
   14158:	ldr	r3, [r0]
   1415c:	sub	r0, r0, r3
   14160:	ldrh	r3, [r0]
   14164:	cmp	r3, #17
   14168:	ldrhhi	r0, [r0, #16]
   1416c:	movls	r0, #0
   14170:	adds	r0, r0, #0
   14174:	movne	r0, #1
   14178:	bx	lr
   1417c:	andeq	lr, r1, r7, ror #8
   14180:	strdeq	lr, [r1], -r3
   14184:	andeq	lr, r1, r5, asr r8
   14188:	mov	r3, #2
   1418c:	push	{r4, lr}
   14190:	mov	r4, r1
   14194:	mov	r2, r3
   14198:	mov	r1, r3
   1419c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   141a0:	cmp	r0, #0
   141a4:	strhne	r4, [r0]
   141a8:	movne	r0, #0
   141ac:	mvneq	r0, #0
   141b0:	pop	{r4, pc}
   141b4:	push	{r4, r5, r6, r7, r8, lr}
   141b8:	subs	r4, r2, #0
   141bc:	bne	141c8 <_start@@Base+0x15c4>
   141c0:	mvn	r0, #0
   141c4:	pop	{r4, r5, r6, r7, r8, pc}
   141c8:	mov	r3, #1
   141cc:	mov	r5, r1
   141d0:	mov	r2, r3
   141d4:	mov	r1, #7
   141d8:	mov	r6, r0
   141dc:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   141e0:	subs	r7, r0, #0
   141e4:	beq	141c0 <_start@@Base+0x15bc>
   141e8:	mov	r1, #8
   141ec:	mov	r0, r6
   141f0:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   141f4:	cmp	r0, #0
   141f8:	beq	141c0 <_start@@Base+0x15bc>
   141fc:	strb	r5, [r7]
   14200:	str	r4, [r0]
   14204:	mov	r0, #0
   14208:	pop	{r4, r5, r6, r7, r8, pc}
   1420c:	push	{r4, lr}
   14210:	mov	r2, #1
   14214:	mov	r4, r0
   14218:	ldr	r1, [pc, #40]	; 14248 <_start@@Base+0x1644>
   1421c:	bl	1be10 <flatcc_builder_check_required@@Base>
   14220:	cmp	r0, #0
   14224:	bne	1423c <_start@@Base+0x1638>
   14228:	ldr	r3, [pc, #28]	; 1424c <_start@@Base+0x1648>
   1422c:	mov	r2, #235	; 0xeb
   14230:	ldr	r1, [pc, #24]	; 14250 <_start@@Base+0x164c>
   14234:	ldr	r0, [pc, #24]	; 14254 <_start@@Base+0x1650>
   14238:	bl	12a60 <__assert_fail@plt>
   1423c:	mov	r0, r4
   14240:	pop	{r4, lr}
   14244:	b	1be8c <flatcc_builder_end_table@@Base>
   14248:	muleq	r1, r0, r4
   1424c:	muleq	r1, r4, r4
   14250:	andeq	lr, r1, fp, ror r8
   14254:	andeq	lr, r1, fp, ror #20
   14258:	push	{r4, lr}
   1425c:	mov	r4, r0
   14260:	bl	1420c <_start@@Base+0x1608>
   14264:	mov	r1, r0
   14268:	mov	r0, r4
   1426c:	pop	{r4, lr}
   14270:	b	1b124 <flatcc_builder_end_buffer@@Base>
   14274:	push	{r4, lr}
   14278:	mov	r2, #0
   1427c:	mov	r4, r0
   14280:	ldr	r1, [pc, #40]	; 142b0 <_start@@Base+0x16ac>
   14284:	bl	1be10 <flatcc_builder_check_required@@Base>
   14288:	cmp	r0, #0
   1428c:	bne	142a4 <_start@@Base+0x16a0>
   14290:	ldr	r3, [pc, #28]	; 142b4 <_start@@Base+0x16b0>
   14294:	mov	r2, #221	; 0xdd
   14298:	ldr	r1, [pc, #24]	; 142b8 <_start@@Base+0x16b4>
   1429c:	ldr	r0, [pc, #24]	; 142bc <_start@@Base+0x16b8>
   142a0:	bl	12a60 <__assert_fail@plt>
   142a4:	mov	r0, r4
   142a8:	pop	{r4, lr}
   142ac:	b	1be8c <flatcc_builder_end_table@@Base>
   142b0:			; <UNDEFINED> instruction: 0x0001e4b0
   142b4:			; <UNDEFINED> instruction: 0x0001e4b2
   142b8:	andeq	lr, r1, fp, ror r8
   142bc:	andeq	lr, r1, sp, lsl #22
   142c0:	mov	r3, #8
   142c4:	push	{r4, lr}
   142c8:	mov	r1, #0
   142cc:	mov	r2, r3
   142d0:	mov	r4, r0
   142d4:	bl	1d6d4 <flatcc_verify_field@@Base>
   142d8:	cmp	r0, #0
   142dc:	popne	{r4, pc}
   142e0:	mov	r3, #4
   142e4:	mov	r0, r4
   142e8:	pop	{r4, lr}
   142ec:	mov	r2, r3
   142f0:	mov	r1, #1
   142f4:	b	1d6d4 <flatcc_verify_field@@Base>
   142f8:	mov	r3, #1
   142fc:	push	{r4, lr}
   14300:	mov	r1, #0
   14304:	mov	r2, r3
   14308:	mov	r4, r0
   1430c:	bl	1d6d4 <flatcc_verify_field@@Base>
   14310:	cmp	r0, #0
   14314:	popne	{r4, pc}
   14318:	mov	r3, #1
   1431c:	mov	r0, r4
   14320:	mov	r2, r3
   14324:	mov	r1, r3
   14328:	bl	1d6d4 <flatcc_verify_field@@Base>
   1432c:	cmp	r0, #0
   14330:	popne	{r4, pc}
   14334:	mov	r3, #1
   14338:	mov	r1, #2
   1433c:	mov	r2, r3
   14340:	mov	r0, r4
   14344:	bl	1d6d4 <flatcc_verify_field@@Base>
   14348:	cmp	r0, #0
   1434c:	popne	{r4, pc}
   14350:	mov	r3, #1
   14354:	mov	r0, r4
   14358:	pop	{r4, lr}
   1435c:	mov	r2, r3
   14360:	mov	r1, #3
   14364:	b	1d6d4 <flatcc_verify_field@@Base>
   14368:	mov	r3, #1
   1436c:	push	{r0, r1, r4, lr}
   14370:	mov	r1, #0
   14374:	mov	r2, r3
   14378:	mov	r4, r0
   1437c:	bl	1d6d4 <flatcc_verify_field@@Base>
   14380:	cmp	r0, #0
   14384:	bne	144cc <_start@@Base+0x18c8>
   14388:	mov	r3, #1
   1438c:	mov	r0, r4
   14390:	mov	r2, r3
   14394:	mov	r1, r3
   14398:	bl	1d6d4 <flatcc_verify_field@@Base>
   1439c:	cmp	r0, #0
   143a0:	bne	144cc <_start@@Base+0x18c8>
   143a4:	mov	r3, #2
   143a8:	mov	r0, r4
   143ac:	mov	r2, r3
   143b0:	mov	r1, r3
   143b4:	bl	1d6d4 <flatcc_verify_field@@Base>
   143b8:	cmp	r0, #0
   143bc:	bne	144cc <_start@@Base+0x18c8>
   143c0:	mov	r3, #2
   143c4:	mov	r1, #3
   143c8:	mov	r2, r3
   143cc:	mov	r0, r4
   143d0:	bl	1d6d4 <flatcc_verify_field@@Base>
   143d4:	cmp	r0, #0
   143d8:	bne	144cc <_start@@Base+0x18c8>
   143dc:	mov	r3, #4
   143e0:	mov	r0, r4
   143e4:	mov	r2, r3
   143e8:	mov	r1, r3
   143ec:	bl	1d6d4 <flatcc_verify_field@@Base>
   143f0:	cmp	r0, #0
   143f4:	bne	144cc <_start@@Base+0x18c8>
   143f8:	mov	r3, #4
   143fc:	mov	r1, #5
   14400:	mov	r2, r3
   14404:	mov	r0, r4
   14408:	bl	1d6d4 <flatcc_verify_field@@Base>
   1440c:	cmp	r0, #0
   14410:	bne	144cc <_start@@Base+0x18c8>
   14414:	mov	r3, #8
   14418:	mov	r1, #6
   1441c:	mov	r2, r3
   14420:	mov	r0, r4
   14424:	bl	1d6d4 <flatcc_verify_field@@Base>
   14428:	cmp	r0, #0
   1442c:	bne	144cc <_start@@Base+0x18c8>
   14430:	mov	r3, #8
   14434:	mov	r1, #7
   14438:	mov	r2, r3
   1443c:	mov	r0, r4
   14440:	bl	1d6d4 <flatcc_verify_field@@Base>
   14444:	cmp	r0, #0
   14448:	bne	144cc <_start@@Base+0x18c8>
   1444c:	mov	r3, #4
   14450:	mov	r1, #8
   14454:	mov	r2, r3
   14458:	mov	r0, r4
   1445c:	bl	1d6d4 <flatcc_verify_field@@Base>
   14460:	cmp	r0, #0
   14464:	bne	144cc <_start@@Base+0x18c8>
   14468:	mov	r3, #8
   1446c:	mov	r1, #9
   14470:	mov	r2, r3
   14474:	mov	r0, r4
   14478:	bl	1d6d4 <flatcc_verify_field@@Base>
   1447c:	cmp	r0, #0
   14480:	bne	144cc <_start@@Base+0x18c8>
   14484:	mvn	r3, #0
   14488:	mov	r2, #0
   1448c:	mov	r1, #10
   14490:	mov	r0, r4
   14494:	str	r3, [sp, #4]
   14498:	mov	r3, #1
   1449c:	str	r3, [sp]
   144a0:	bl	1d76c <flatcc_verify_vector_field@@Base>
   144a4:	cmp	r0, #0
   144a8:	bne	144cc <_start@@Base+0x18c8>
   144ac:	mvn	r3, #-536870912	; 0xe0000000
   144b0:	mov	r2, r0
   144b4:	mov	r1, #11
   144b8:	mov	r0, r4
   144bc:	str	r3, [sp, #4]
   144c0:	mov	r3, #8
   144c4:	str	r3, [sp]
   144c8:	bl	1d76c <flatcc_verify_vector_field@@Base>
   144cc:	add	sp, sp, #8
   144d0:	pop	{r4, pc}
   144d4:	mov	r2, #0
   144d8:	push	{r4, lr}
   144dc:	mov	r4, r0
   144e0:	mov	r1, r2
   144e4:	bl	1d734 <flatcc_verify_string_field@@Base>
   144e8:	cmp	r0, #0
   144ec:	popne	{r4, pc}
   144f0:	mov	r3, #8
   144f4:	mov	r1, #1
   144f8:	mov	r2, r3
   144fc:	mov	r0, r4
   14500:	bl	1d6d4 <flatcc_verify_field@@Base>
   14504:	cmp	r0, #0
   14508:	popne	{r4, pc}
   1450c:	mov	r3, #2
   14510:	mov	r0, r4
   14514:	pop	{r4, lr}
   14518:	mov	r2, r3
   1451c:	mov	r1, r3
   14520:	b	1d6d4 <flatcc_verify_field@@Base>
   14524:	mov	r2, #0
   14528:	push	{r4, lr}
   1452c:	mov	r4, r0
   14530:	mov	r1, r2
   14534:	bl	1d734 <flatcc_verify_string_field@@Base>
   14538:	subs	r2, r0, #0
   1453c:	bne	1460c <_start@@Base+0x1a08>
   14540:	mov	r3, #4
   14544:	mov	r1, #1
   14548:	mov	r2, r3
   1454c:	mov	r0, r4
   14550:	bl	1d6d4 <flatcc_verify_field@@Base>
   14554:	subs	r2, r0, #0
   14558:	bne	1460c <_start@@Base+0x1a08>
   1455c:	mov	r1, #2
   14560:	mov	r0, r4
   14564:	bl	1d734 <flatcc_verify_string_field@@Base>
   14568:	subs	r2, r0, #0
   1456c:	bne	1460c <_start@@Base+0x1a08>
   14570:	mov	r3, #8
   14574:	mov	r1, #3
   14578:	mov	r2, r3
   1457c:	mov	r0, r4
   14580:	bl	1d6d4 <flatcc_verify_field@@Base>
   14584:	subs	r2, r0, #0
   14588:	bne	1460c <_start@@Base+0x1a08>
   1458c:	mov	r1, #4
   14590:	mov	r0, r4
   14594:	bl	1d734 <flatcc_verify_string_field@@Base>
   14598:	subs	r2, r0, #0
   1459c:	bne	1460c <_start@@Base+0x1a08>
   145a0:	mov	r3, #8
   145a4:	mov	r1, #5
   145a8:	mov	r2, r3
   145ac:	mov	r0, r4
   145b0:	bl	1d6d4 <flatcc_verify_field@@Base>
   145b4:	subs	r2, r0, #0
   145b8:	bne	1460c <_start@@Base+0x1a08>
   145bc:	mov	r3, #4
   145c0:	mov	r1, #6
   145c4:	mov	r2, r3
   145c8:	mov	r0, r4
   145cc:	bl	1d6d4 <flatcc_verify_field@@Base>
   145d0:	subs	r2, r0, #0
   145d4:	bne	1460c <_start@@Base+0x1a08>
   145d8:	mov	r3, #8
   145dc:	mov	r1, #7
   145e0:	mov	r2, r3
   145e4:	mov	r0, r4
   145e8:	bl	1d6d4 <flatcc_verify_field@@Base>
   145ec:	subs	r2, r0, #0
   145f0:	bne	1460c <_start@@Base+0x1a08>
   145f4:	mov	r3, #4
   145f8:	mov	r0, r4
   145fc:	pop	{r4, lr}
   14600:	mov	r2, r3
   14604:	mov	r1, #8
   14608:	b	1d6d4 <flatcc_verify_field@@Base>
   1460c:	mov	r0, r2
   14610:	pop	{r4, pc}
   14614:	mov	r2, #0
   14618:	push	{r4, lr}
   1461c:	mov	r4, r0
   14620:	mov	r1, r2
   14624:	ldr	r3, [pc, #60]	; 14668 <_start@@Base+0x1a64>
   14628:	bl	1d870 <flatcc_verify_table_field@@Base>
   1462c:	subs	r2, r0, #0
   14630:	bne	14660 <_start@@Base+0x1a5c>
   14634:	ldr	r3, [pc, #48]	; 1466c <_start@@Base+0x1a68>
   14638:	mov	r1, #1
   1463c:	mov	r0, r4
   14640:	bl	1d870 <flatcc_verify_table_field@@Base>
   14644:	subs	r2, r0, #0
   14648:	bne	14660 <_start@@Base+0x1a5c>
   1464c:	mov	r0, r4
   14650:	ldr	r3, [pc, #24]	; 14670 <_start@@Base+0x1a6c>
   14654:	mov	r1, #2
   14658:	pop	{r4, lr}
   1465c:	b	1d870 <flatcc_verify_table_field@@Base>
   14660:	mov	r0, r2
   14664:	pop	{r4, pc}
   14668:	andeq	r4, r1, r4, lsr #10
   1466c:	andeq	r5, r1, r0, lsl r1
   14670:	andeq	r4, r1, r0, asr #5
   14674:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14678:	mov	r2, #32
   1467c:	mov	r3, #16
   14680:	mov	r1, #0
   14684:	mov	r4, r0
   14688:	bl	1d6d4 <flatcc_verify_field@@Base>
   1468c:	subs	r2, r0, #0
   14690:	bne	14a44 <_start@@Base+0x1e40>
   14694:	mov	r3, #2
   14698:	mov	r0, r4
   1469c:	mov	r2, r3
   146a0:	mov	r1, r3
   146a4:	bl	1d6d4 <flatcc_verify_field@@Base>
   146a8:	subs	r2, r0, #0
   146ac:	bne	14a44 <_start@@Base+0x1e40>
   146b0:	mov	r3, #2
   146b4:	mov	r1, #1
   146b8:	mov	r2, r3
   146bc:	mov	r0, r4
   146c0:	bl	1d6d4 <flatcc_verify_field@@Base>
   146c4:	subs	r2, r0, #0
   146c8:	bne	14a44 <_start@@Base+0x1e40>
   146cc:	mov	r2, #1
   146d0:	mov	r1, #3
   146d4:	mov	r0, r4
   146d8:	bl	1d734 <flatcc_verify_string_field@@Base>
   146dc:	subs	r2, r0, #0
   146e0:	bne	14a44 <_start@@Base+0x1e40>
   146e4:	mov	r3, #1
   146e8:	mov	r1, #6
   146ec:	mov	r2, r3
   146f0:	mov	r0, r4
   146f4:	bl	1d6d4 <flatcc_verify_field@@Base>
   146f8:	subs	r2, r0, #0
   146fc:	bne	14a44 <_start@@Base+0x1e40>
   14700:	mov	r5, #1
   14704:	mvn	r6, #0
   14708:	mov	r3, r5
   1470c:	mov	r1, #5
   14710:	mov	r0, r4
   14714:	stm	sp, {r5, r6}
   14718:	bl	1d76c <flatcc_verify_vector_field@@Base>
   1471c:	subs	r2, r0, #0
   14720:	bne	14a44 <_start@@Base+0x1e40>
   14724:	ldr	r3, [pc, #804]	; 14a50 <_start@@Base+0x1e4c>
   14728:	mov	r1, #11
   1472c:	mov	r0, r4
   14730:	bl	1d8b8 <flatcc_verify_table_vector_field@@Base>
   14734:	subs	r2, r0, #0
   14738:	bne	14a44 <_start@@Base+0x1e40>
   1473c:	mov	r1, #10
   14740:	mov	r0, r4
   14744:	bl	1d7c0 <flatcc_verify_string_vector_field@@Base>
   14748:	subs	r2, r0, #0
   1474c:	bne	14a44 <_start@@Base+0x1e40>
   14750:	mov	r1, #28
   14754:	mov	r0, r4
   14758:	bl	1d7c0 <flatcc_verify_string_vector_field@@Base>
   1475c:	subs	r2, r0, #0
   14760:	bne	14a44 <_start@@Base+0x1e40>
   14764:	mov	r3, r5
   14768:	mov	r1, #24
   1476c:	stm	sp, {r5, r6}
   14770:	mov	r0, r4
   14774:	bl	1d76c <flatcc_verify_vector_field@@Base>
   14778:	subs	r2, r0, #0
   1477c:	bne	14a44 <_start@@Base+0x1e40>
   14780:	mvn	r3, #-536870912	; 0xe0000000
   14784:	mov	r5, #4
   14788:	mov	r2, #0
   1478c:	mov	r1, #29
   14790:	mov	r0, r4
   14794:	str	r5, [sp]
   14798:	str	r3, [sp, #4]
   1479c:	mov	r3, #8
   147a0:	bl	1d76c <flatcc_verify_vector_field@@Base>
   147a4:	subs	r2, r0, #0
   147a8:	bne	14a44 <_start@@Base+0x1e40>
   147ac:	ldr	r6, [pc, #668]	; 14a50 <_start@@Base+0x1e4c>
   147b0:	mov	r1, #12
   147b4:	mov	r0, r4
   147b8:	mov	r3, r6
   147bc:	bl	1d870 <flatcc_verify_table_field@@Base>
   147c0:	subs	r2, r0, #0
   147c4:	bne	14a44 <_start@@Base+0x1e40>
   147c8:	ldr	r3, [pc, #644]	; 14a54 <_start@@Base+0x1e50>
   147cc:	mov	r1, #8
   147d0:	mov	r0, r4
   147d4:	bl	1dd54 <flatcc_verify_union_field@@Base>
   147d8:	subs	r2, r0, #0
   147dc:	bne	14a44 <_start@@Base+0x1e40>
   147e0:	mvn	r8, #-1073741824	; 0xc0000000
   147e4:	mov	r7, #2
   147e8:	mov	r3, r5
   147ec:	mov	r1, #9
   147f0:	mov	r0, r4
   147f4:	stm	sp, {r7, r8}
   147f8:	bl	1d76c <flatcc_verify_vector_field@@Base>
   147fc:	subs	r2, r0, #0
   14800:	bne	14a44 <_start@@Base+0x1e40>
   14804:	mov	r3, r5
   14808:	mov	r1, #31
   1480c:	stm	sp, {r7, r8}
   14810:	mov	r0, r4
   14814:	bl	1d76c <flatcc_verify_vector_field@@Base>
   14818:	subs	r2, r0, #0
   1481c:	bne	14a44 <_start@@Base+0x1e40>
   14820:	str	r6, [sp, #4]
   14824:	mov	r6, #1
   14828:	mov	r3, r2
   1482c:	mov	r1, #13
   14830:	mov	r0, r4
   14834:	str	r6, [sp]
   14838:	bl	1dc78 <flatcc_verify_table_as_nested_root@@Base>
   1483c:	subs	r2, r0, #0
   14840:	bne	14a44 <_start@@Base+0x1e40>
   14844:	ldr	r3, [pc, #524]	; 14a58 <_start@@Base+0x1e54>
   14848:	mov	r1, #14
   1484c:	mov	r0, r4
   14850:	bl	1d870 <flatcc_verify_table_field@@Base>
   14854:	subs	r2, r0, #0
   14858:	bne	14a44 <_start@@Base+0x1e40>
   1485c:	mov	r2, r6
   14860:	mov	r3, r6
   14864:	mov	r1, #15
   14868:	mov	r0, r4
   1486c:	bl	1d6d4 <flatcc_verify_field@@Base>
   14870:	subs	r2, r0, #0
   14874:	bne	14a44 <_start@@Base+0x1e40>
   14878:	mov	r2, r5
   1487c:	mov	r3, r5
   14880:	mov	r1, #16
   14884:	mov	r0, r4
   14888:	bl	1d6d4 <flatcc_verify_field@@Base>
   1488c:	subs	r2, r0, #0
   14890:	bne	14a44 <_start@@Base+0x1e40>
   14894:	mov	r2, r5
   14898:	mov	r3, r5
   1489c:	mov	r1, #17
   148a0:	mov	r0, r4
   148a4:	bl	1d6d4 <flatcc_verify_field@@Base>
   148a8:	subs	r2, r0, #0
   148ac:	bne	14a44 <_start@@Base+0x1e40>
   148b0:	mov	r3, #8
   148b4:	mov	r1, #18
   148b8:	mov	r2, r3
   148bc:	mov	r0, r4
   148c0:	bl	1d6d4 <flatcc_verify_field@@Base>
   148c4:	subs	r2, r0, #0
   148c8:	bne	14a44 <_start@@Base+0x1e40>
   148cc:	mov	r3, #8
   148d0:	mov	r1, #19
   148d4:	mov	r2, r3
   148d8:	mov	r0, r4
   148dc:	bl	1d6d4 <flatcc_verify_field@@Base>
   148e0:	subs	r2, r0, #0
   148e4:	bne	14a44 <_start@@Base+0x1e40>
   148e8:	mov	r2, r5
   148ec:	mov	r3, r5
   148f0:	mov	r1, #20
   148f4:	mov	r0, r4
   148f8:	bl	1d6d4 <flatcc_verify_field@@Base>
   148fc:	subs	r2, r0, #0
   14900:	bne	14a44 <_start@@Base+0x1e40>
   14904:	mov	r2, r5
   14908:	mov	r3, r5
   1490c:	mov	r1, #21
   14910:	mov	r0, r4
   14914:	bl	1d6d4 <flatcc_verify_field@@Base>
   14918:	subs	r2, r0, #0
   1491c:	bne	14a44 <_start@@Base+0x1e40>
   14920:	mov	r3, #8
   14924:	mov	r1, #22
   14928:	mov	r2, r3
   1492c:	mov	r0, r4
   14930:	bl	1d6d4 <flatcc_verify_field@@Base>
   14934:	subs	r2, r0, #0
   14938:	bne	14a44 <_start@@Base+0x1e40>
   1493c:	mov	r3, #8
   14940:	mov	r1, #23
   14944:	mov	r2, r3
   14948:	mov	r0, r4
   1494c:	bl	1d6d4 <flatcc_verify_field@@Base>
   14950:	subs	r2, r0, #0
   14954:	bne	14a44 <_start@@Base+0x1e40>
   14958:	mov	r2, r5
   1495c:	mov	r3, r5
   14960:	mov	r1, #25
   14964:	mov	r0, r4
   14968:	bl	1d6d4 <flatcc_verify_field@@Base>
   1496c:	subs	r2, r0, #0
   14970:	bne	14a44 <_start@@Base+0x1e40>
   14974:	mov	r2, r5
   14978:	mov	r3, r5
   1497c:	mov	r1, #26
   14980:	mov	r0, r4
   14984:	bl	1d6d4 <flatcc_verify_field@@Base>
   14988:	subs	r2, r0, #0
   1498c:	bne	14a44 <_start@@Base+0x1e40>
   14990:	mov	r2, r5
   14994:	mov	r3, r5
   14998:	mov	r1, #27
   1499c:	mov	r0, r4
   149a0:	bl	1d6d4 <flatcc_verify_field@@Base>
   149a4:	subs	r2, r0, #0
   149a8:	bne	14a44 <_start@@Base+0x1e40>
   149ac:	mvn	r3, #0
   149b0:	mov	r1, #30
   149b4:	str	r6, [sp]
   149b8:	mov	r0, r4
   149bc:	str	r3, [sp, #4]
   149c0:	mov	r3, r6
   149c4:	bl	1d76c <flatcc_verify_vector_field@@Base>
   149c8:	subs	r2, r0, #0
   149cc:	bne	14a44 <_start@@Base+0x1e40>
   149d0:	mov	r5, #8
   149d4:	mvn	r6, #-536870912	; 0xe0000000
   149d8:	mov	r2, #0
   149dc:	mov	r3, r5
   149e0:	mov	r1, #32
   149e4:	mov	r0, r4
   149e8:	stm	sp, {r5, r6}
   149ec:	bl	1d76c <flatcc_verify_vector_field@@Base>
   149f0:	subs	r2, r0, #0
   149f4:	bne	14a44 <_start@@Base+0x1e40>
   149f8:	mov	r3, r5
   149fc:	mov	r1, #33	; 0x21
   14a00:	stm	sp, {r5, r6}
   14a04:	mov	r0, r4
   14a08:	bl	1d76c <flatcc_verify_vector_field@@Base>
   14a0c:	subs	r2, r0, #0
   14a10:	bne	14a44 <_start@@Base+0x1e40>
   14a14:	ldr	r3, [pc, #64]	; 14a5c <_start@@Base+0x1e58>
   14a18:	mov	r1, #34	; 0x22
   14a1c:	mov	r0, r4
   14a20:	bl	1d870 <flatcc_verify_table_field@@Base>
   14a24:	subs	r2, r0, #0
   14a28:	bne	14a44 <_start@@Base+0x1e40>
   14a2c:	ldr	r3, [pc, #44]	; 14a60 <_start@@Base+0x1e5c>
   14a30:	mov	r1, #35	; 0x23
   14a34:	mov	r0, r4
   14a38:	add	sp, sp, #8
   14a3c:	pop	{r4, r5, r6, r7, r8, lr}
   14a40:	b	1d870 <flatcc_verify_table_field@@Base>
   14a44:	mov	r0, r2
   14a48:	add	sp, sp, #8
   14a4c:	pop	{r4, r5, r6, r7, r8, pc}
   14a50:	andeq	r4, r1, r4, ror r6
   14a54:	ldrdeq	r4, [r1], -ip
   14a58:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a5c:	strdeq	r2, [r1], -r8
   14a60:	andeq	r4, r1, r4, ror #20
   14a64:	push	{r0, r1, r4, r5, r6, lr}
   14a68:	mov	r4, #1
   14a6c:	mvn	r6, #0
   14a70:	mov	r2, #0
   14a74:	mov	r3, r4
   14a78:	mov	r1, r2
   14a7c:	mov	r5, r0
   14a80:	stm	sp, {r4, r6}
   14a84:	bl	1d76c <flatcc_verify_vector_field@@Base>
   14a88:	cmp	r0, #0
   14a8c:	bne	14ad0 <_start@@Base+0x1ecc>
   14a90:	mov	r2, r0
   14a94:	mov	r3, r4
   14a98:	stm	sp, {r4, r6}
   14a9c:	mov	r1, r4
   14aa0:	mov	r0, r5
   14aa4:	bl	1d76c <flatcc_verify_vector_field@@Base>
   14aa8:	cmp	r0, #0
   14aac:	bne	14ad0 <_start@@Base+0x1ecc>
   14ab0:	ldr	r3, [pc, #32]	; 14ad8 <_start@@Base+0x1ed4>
   14ab4:	mov	r2, r0
   14ab8:	mov	r1, #2
   14abc:	str	r4, [sp]
   14ac0:	str	r3, [sp, #4]
   14ac4:	mov	r3, r0
   14ac8:	mov	r0, r5
   14acc:	bl	1dc78 <flatcc_verify_table_as_nested_root@@Base>
   14ad0:	add	sp, sp, #8
   14ad4:	pop	{r4, r5, r6, pc}
   14ad8:	andeq	r4, r1, r4, ror r6
   14adc:	ldrb	r3, [r0, #12]
   14ae0:	sub	r3, r3, #1
   14ae4:	cmp	r3, #3
   14ae8:	ldrls	pc, [pc, r3, lsl #2]
   14aec:	b	14b20 <_start@@Base+0x1f1c>
   14af0:	andeq	r4, r1, r0, lsl #22
   14af4:	andeq	r4, r1, r8, lsl #22
   14af8:	andeq	r4, r1, r0, lsl fp
   14afc:	andeq	r4, r1, r8, lsl fp
   14b00:	ldr	r1, [pc, #32]	; 14b28 <_start@@Base+0x1f24>
   14b04:	b	1d9ac <flatcc_verify_union_table@@Base>
   14b08:	ldr	r1, [pc, #28]	; 14b2c <_start@@Base+0x1f28>
   14b0c:	b	14b04 <_start@@Base+0x1f00>
   14b10:	ldr	r1, [pc, #24]	; 14b30 <_start@@Base+0x1f2c>
   14b14:	b	14b04 <_start@@Base+0x1f00>
   14b18:	ldr	r1, [pc, #20]	; 14b34 <_start@@Base+0x1f30>
   14b1c:	b	14b04 <_start@@Base+0x1f00>
   14b20:	mov	r0, #0
   14b24:	bx	lr
   14b28:	andeq	r4, r1, r4, ror r6
   14b2c:	strdeq	r4, [r1], -r8
   14b30:	andeq	r4, r1, r8, lsl #30
   14b34:	andeq	r4, r1, r8, lsr fp
   14b38:	mov	r2, #0
   14b3c:	push	{r4, lr}
   14b40:	mov	r4, r0
   14b44:	mov	r1, r2
   14b48:	ldr	r3, [pc, #60]	; 14b8c <_start@@Base+0x1f88>
   14b4c:	bl	1d870 <flatcc_verify_table_field@@Base>
   14b50:	subs	r2, r0, #0
   14b54:	bne	14b84 <_start@@Base+0x1f80>
   14b58:	ldr	r3, [pc, #48]	; 14b90 <_start@@Base+0x1f8c>
   14b5c:	mov	r1, #1
   14b60:	mov	r0, r4
   14b64:	bl	1d870 <flatcc_verify_table_field@@Base>
   14b68:	subs	r2, r0, #0
   14b6c:	bne	14b84 <_start@@Base+0x1f80>
   14b70:	mov	r0, r4
   14b74:	ldr	r3, [pc, #24]	; 14b94 <_start@@Base+0x1f90>
   14b78:	mov	r1, #3
   14b7c:	pop	{r4, lr}
   14b80:	b	1de60 <flatcc_verify_union_vector_field@@Base>
   14b84:	mov	r0, r2
   14b88:	pop	{r4, pc}
   14b8c:	andeq	r4, r1, r4, lsl r6
   14b90:	muleq	r1, r8, fp
   14b94:	ldrdeq	r4, [r1], -ip
   14b98:	push	{r4, lr}
   14b9c:	mov	r2, #0
   14ba0:	mov	r1, #1
   14ba4:	mov	r4, r0
   14ba8:	ldr	r3, [pc, #108]	; 14c1c <_start@@Base+0x2018>
   14bac:	bl	1dd54 <flatcc_verify_union_field@@Base>
   14bb0:	subs	r2, r0, #0
   14bb4:	bne	14c14 <_start@@Base+0x2010>
   14bb8:	ldr	r3, [pc, #92]	; 14c1c <_start@@Base+0x2018>
   14bbc:	mov	r1, #3
   14bc0:	mov	r0, r4
   14bc4:	bl	1dd54 <flatcc_verify_union_field@@Base>
   14bc8:	subs	r2, r0, #0
   14bcc:	bne	14c14 <_start@@Base+0x2010>
   14bd0:	ldr	r3, [pc, #68]	; 14c1c <_start@@Base+0x2018>
   14bd4:	mov	r1, #5
   14bd8:	mov	r0, r4
   14bdc:	bl	1dd54 <flatcc_verify_union_field@@Base>
   14be0:	subs	r2, r0, #0
   14be4:	bne	14c14 <_start@@Base+0x2010>
   14be8:	ldr	r3, [pc, #44]	; 14c1c <_start@@Base+0x2018>
   14bec:	mov	r1, #7
   14bf0:	mov	r0, r4
   14bf4:	bl	1dd54 <flatcc_verify_union_field@@Base>
   14bf8:	subs	r2, r0, #0
   14bfc:	bne	14c14 <_start@@Base+0x2010>
   14c00:	mov	r0, r4
   14c04:	ldr	r3, [pc, #16]	; 14c1c <_start@@Base+0x2018>
   14c08:	mov	r1, #9
   14c0c:	pop	{r4, lr}
   14c10:	b	1de60 <flatcc_verify_union_vector_field@@Base>
   14c14:	mov	r0, r2
   14c18:	pop	{r4, pc}
   14c1c:	andeq	r4, r1, r0, lsr #24
   14c20:	ldrb	r3, [r0, #12]
   14c24:	mov	r2, r0
   14c28:	cmp	r3, #10
   14c2c:	bhi	14c54 <_start@@Base+0x2050>
   14c30:	cmp	r3, #9
   14c34:	bcs	14c74 <_start@@Base+0x2070>
   14c38:	cmp	r3, #2
   14c3c:	beq	14c6c <_start@@Base+0x2068>
   14c40:	cmp	r3, #8
   14c44:	moveq	r2, #2
   14c48:	beq	14c78 <_start@@Base+0x2074>
   14c4c:	mov	r0, #0
   14c50:	bx	lr
   14c54:	cmp	r3, #11
   14c58:	beq	14c64 <_start@@Base+0x2060>
   14c5c:	cmp	r3, #255	; 0xff
   14c60:	bne	14c4c <_start@@Base+0x2048>
   14c64:	mov	r0, r2
   14c68:	b	1d9f8 <flatcc_verify_union_string@@Base>
   14c6c:	ldr	r1, [pc, #12]	; 14c80 <_start@@Base+0x207c>
   14c70:	b	1d9ac <flatcc_verify_union_table@@Base>
   14c74:	mov	r2, #4
   14c78:	mov	r1, r2
   14c7c:	b	1d9d4 <flatcc_verify_union_struct@@Base>
   14c80:	andeq	r3, r1, r8
   14c84:	push	{lr}		; (str lr, [sp, #-4]!)
   14c88:	vpush	{d8-d9}
   14c8c:	vsub.f64	d8, d1, d0
   14c90:	sub	sp, sp, #12
   14c94:	vldr	d9, [pc, #236]	; 14d88 <_start@@Base+0x2184>
   14c98:	str	r1, [sp, #4]
   14c9c:	mov	r1, r0
   14ca0:	ldr	r0, [pc, #256]	; 14da8 <_start@@Base+0x21a4>
   14ca4:	bl	12970 <printf@plt>
   14ca8:	ldr	r0, [pc, #252]	; 14dac <_start@@Base+0x21a8>
   14cac:	vmov	r2, r3, d8
   14cb0:	bl	12970 <printf@plt>
   14cb4:	ldr	r1, [pc, #244]	; 14db0 <_start@@Base+0x21ac>
   14cb8:	ldr	r0, [pc, #244]	; 14db4 <_start@@Base+0x21b0>
   14cbc:	bl	12970 <printf@plt>
   14cc0:	ldr	r0, [pc, #240]	; 14db8 <_start@@Base+0x21b4>
   14cc4:	ldr	r1, [sp, #4]
   14cc8:	bl	12970 <printf@plt>
   14ccc:	vldr	s15, [sp, #4]
   14cd0:	ldr	r0, [pc, #228]	; 14dbc <_start@@Base+0x21b8>
   14cd4:	vcvt.f64.u32	d7, s15
   14cd8:	vmul.f64	d7, d7, d9
   14cdc:	vdiv.f64	d6, d7, d9
   14ce0:	vdiv.f64	d7, d6, d8
   14ce4:	vmov	r2, r3, d7
   14ce8:	bl	12970 <printf@plt>
   14cec:	vdiv.f64	d7, d9, d8
   14cf0:	ldr	r0, [pc, #200]	; 14dc0 <_start@@Base+0x21bc>
   14cf4:	vmov	r2, r3, d7
   14cf8:	bl	12970 <printf@plt>
   14cfc:	vldr	d7, [pc, #140]	; 14d90 <_start@@Base+0x218c>
   14d00:	ldr	r1, [pc, #188]	; 14dc4 <_start@@Base+0x21c0>
   14d04:	ldr	r0, [pc, #188]	; 14dc8 <_start@@Base+0x21c4>
   14d08:	vdiv.f64	d7, d7, d8
   14d0c:	vmov	r2, r3, d7
   14d10:	bl	12970 <printf@plt>
   14d14:	vldr	d6, [pc, #124]	; 14d98 <_start@@Base+0x2194>
   14d18:	vldr	d5, [pc, #128]	; 14da0 <_start@@Base+0x219c>
   14d1c:	vmul.f64	d8, d8, d6
   14d20:	vdiv.f64	d7, d8, d9
   14d24:	vcmpe.f64	d7, d5
   14d28:	vmrs	APSR_nzcv, fpscr
   14d2c:	vmovmi	r2, r3, d7
   14d30:	ldrmi	r0, [pc, #148]	; 14dcc <_start@@Base+0x21c8>
   14d34:	bmi	14d50 <_start@@Base+0x214c>
   14d38:	vcmpe.f64	d7, d9
   14d3c:	vmrs	APSR_nzcv, fpscr
   14d40:	bpl	14d64 <_start@@Base+0x2160>
   14d44:	vdiv.f64	d7, d7, d5
   14d48:	ldr	r0, [pc, #128]	; 14dd0 <_start@@Base+0x21cc>
   14d4c:	vmov	r2, r3, d7
   14d50:	bl	12970 <printf@plt>
   14d54:	mov	r0, #0
   14d58:	add	sp, sp, #12
   14d5c:	vpop	{d8-d9}
   14d60:	pop	{pc}		; (ldr pc, [sp], #4)
   14d64:	vcmpe.f64	d7, d6
   14d68:	vmrs	APSR_nzcv, fpscr
   14d6c:	vdivmi.f64	d7, d7, d9
   14d70:	ldrmi	r0, [pc, #92]	; 14dd4 <_start@@Base+0x21d0>
   14d74:	ldrpl	r0, [pc, #92]	; 14dd8 <_start@@Base+0x21d4>
   14d78:	vdivpl.f64	d7, d7, d6
   14d7c:	vmovmi	r2, r3, d7
   14d80:	vmovpl	r2, r3, d7
   14d84:	b	14d50 <_start@@Base+0x214c>
   14d88:	andeq	r0, r0, r0
   14d8c:	smlawbmi	lr, r0, r4, r8
   14d90:	andeq	r0, r0, r0
   14d94:	svccc	0x00f00000	; IMB
   14d98:	andeq	r0, r0, r0
   14d9c:	bicmi	ip, sp, r5, ror #26
   14da0:	andeq	r0, r0, r0
   14da4:	addmi	r4, pc, r0
   14da8:	andeq	lr, r1, r6, lsr #23
   14dac:			; <UNDEFINED> instruction: 0x0001ebb5
   14db0:	andeq	r4, pc, r0, asr #4
   14db4:	andeq	lr, r1, sp, asr #23
   14db8:	ldrdeq	lr, [r1], -sp
   14dbc:	strdeq	lr, [r1], -r0
   14dc0:	andeq	lr, r1, r8, lsl #24
   14dc4:	andeq	lr, r1, r9, lsr #24
   14dc8:	andeq	lr, r1, r1, lsr ip
   14dcc:	andeq	lr, r1, r5, asr ip
   14dd0:	andeq	lr, r1, sp, ror #24
   14dd4:	andeq	lr, r1, r5, lsl #25
   14dd8:	muleq	r1, sp, ip
   14ddc:	push	{r0, r1, r4, lr}
   14de0:	mov	r2, #16
   14de4:	mov	r1, #32
   14de8:	mov	r4, r0
   14dec:	bl	1b1dc <flatcc_builder_start_struct@@Base>
   14df0:	cmp	r0, #0
   14df4:	beq	14e3c <_start@@Base+0x2238>
   14df8:	mov	r3, #1065353216	; 0x3f800000
   14dfc:	ldr	r2, [pc, #96]	; 14e64 <_start@@Base+0x2260>
   14e00:	str	r3, [r0]
   14e04:	mov	r3, #1073741824	; 0x40000000
   14e08:	str	r3, [r0, #4]
   14e0c:	ldr	r3, [pc, #84]	; 14e68 <_start@@Base+0x2264>
   14e10:	str	r3, [r0, #8]
   14e14:	ldr	r3, [pc, #80]	; 14e6c <_start@@Base+0x2268>
   14e18:	strd	r2, [r0, #16]
   14e1c:	mov	r3, #8
   14e20:	strb	r3, [r0, #24]
   14e24:	movw	r3, #2730	; 0xaaa
   14e28:	strh	r3, [r0, #26]
   14e2c:	mvn	r3, #16
   14e30:	strb	r3, [r0, #28]
   14e34:	mov	r0, r4
   14e38:	bl	1b22c <flatcc_builder_end_struct@@Base>
   14e3c:	ldr	r1, [pc, #44]	; 14e70 <_start@@Base+0x226c>
   14e40:	mov	r2, #0
   14e44:	mov	r3, #16
   14e48:	str	r3, [sp]
   14e4c:	mov	r3, r0
   14e50:	mov	r0, r4
   14e54:	str	r2, [sp, #4]
   14e58:	bl	1ae0c <flatcc_builder_create_buffer@@Base>
   14e5c:	add	sp, sp, #8
   14e60:	pop	{r4, pc}
   14e64:	stclgt	12, cr12, [ip], {205}	; 0xcd
   14e68:	submi	r0, r0, r0
   14e6c:	andsmi	ip, r0, ip, asr #25
   14e70:	andeq	lr, r1, lr, ror #15
   14e74:	push	{r4, r5, r6, r7, r8, lr}
   14e78:	subs	r6, r0, #0
   14e7c:	beq	14e98 <_start@@Base+0x2294>
   14e80:	ldr	r5, [r6, #-4]
   14e84:	cmp	r5, #0
   14e88:	movne	r8, r1
   14e8c:	subne	r5, r5, #1
   14e90:	movne	r4, #0
   14e94:	bne	14ed0 <_start@@Base+0x22cc>
   14e98:	mvn	r4, #0
   14e9c:	b	14f00 <_start@@Base+0x22fc>
   14ea0:	sub	r7, r5, r4
   14ea4:	mov	r0, r6
   14ea8:	add	r7, r4, r7, lsr #1
   14eac:	mov	r1, r7
   14eb0:	bl	13844 <_start@@Base+0xc40>
   14eb4:	bl	13944 <_start@@Base+0xd40>
   14eb8:	mov	r2, #5
   14ebc:	mov	r1, r8
   14ec0:	bl	131a4 <_start@@Base+0x5a0>
   14ec4:	cmp	r0, #0
   14ec8:	addlt	r4, r7, #1
   14ecc:	movge	r5, r7
   14ed0:	cmp	r5, r4
   14ed4:	bhi	14ea0 <_start@@Base+0x229c>
   14ed8:	bne	14e98 <_start@@Base+0x2294>
   14edc:	mov	r1, r4
   14ee0:	mov	r0, r6
   14ee4:	bl	13844 <_start@@Base+0xc40>
   14ee8:	bl	13944 <_start@@Base+0xd40>
   14eec:	mov	r2, #5
   14ef0:	mov	r1, r8
   14ef4:	bl	131a4 <_start@@Base+0x5a0>
   14ef8:	cmp	r0, #0
   14efc:	mvnne	r4, #0
   14f00:	mov	r0, r4
   14f04:	pop	{r4, r5, r6, r7, r8, pc}
   14f08:	mov	r0, #0
   14f0c:	bx	lr
   14f10:	push	{r4, r5, r6, lr}
   14f14:	mov	r1, #1
   14f18:	mov	r4, r0
   14f1c:	bl	1b864 <flatcc_builder_start_table@@Base>
   14f20:	subs	r5, r0, #0
   14f24:	bne	14f7c <_start@@Base+0x2378>
   14f28:	mov	r3, #1
   14f2c:	mov	r2, r5
   14f30:	mov	r1, r5
   14f34:	mov	r0, r4
   14f38:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   14f3c:	cmp	r0, #0
   14f40:	beq	14f7c <_start@@Base+0x2378>
   14f44:	mov	r2, r5
   14f48:	ldr	r1, [pc, #52]	; 14f84 <_start@@Base+0x2380>
   14f4c:	mov	r0, r4
   14f50:	bl	1be10 <flatcc_builder_check_required@@Base>
   14f54:	cmp	r0, #0
   14f58:	bne	14f70 <_start@@Base+0x236c>
   14f5c:	ldr	r3, [pc, #36]	; 14f88 <_start@@Base+0x2384>
   14f60:	mov	r2, #215	; 0xd7
   14f64:	ldr	r1, [pc, #32]	; 14f8c <_start@@Base+0x2388>
   14f68:	ldr	r0, [pc, #32]	; 14f90 <_start@@Base+0x238c>
   14f6c:	bl	12a60 <__assert_fail@plt>
   14f70:	mov	r0, r4
   14f74:	pop	{r4, r5, r6, lr}
   14f78:	b	1be8c <flatcc_builder_end_table@@Base>
   14f7c:	mov	r0, #0
   14f80:	pop	{r4, r5, r6, pc}
   14f84:	andeq	lr, r1, sl, asr #9
   14f88:	andeq	lr, r1, ip, asr #9
   14f8c:	andeq	lr, r1, fp, ror r8
   14f90:			; <UNDEFINED> instruction: 0x0001ecb4
   14f94:	push	{r4, lr}
   14f98:	mov	r4, r0
   14f9c:	bl	1420c <_start@@Base+0x1608>
   14fa0:	subs	r1, r0, #0
   14fa4:	popeq	{r4, pc}
   14fa8:	mov	r0, r4
   14fac:	pop	{r4, lr}
   14fb0:	b	1b3ec <flatcc_builder_offset_vector_push@@Base>
   14fb4:	mov	r2, #4
   14fb8:	push	{r4, r5, r6, lr}
   14fbc:	mov	r5, r1
   14fc0:	mov	r1, r2
   14fc4:	mov	r4, r0
   14fc8:	bl	1b1dc <flatcc_builder_start_struct@@Base>
   14fcc:	subs	r3, r0, #0
   14fd0:	popeq	{r4, r5, r6, pc}
   14fd4:	mov	r0, r4
   14fd8:	str	r5, [r3]
   14fdc:	pop	{r4, r5, r6, lr}
   14fe0:	b	1b22c <flatcc_builder_end_struct@@Base>
   14fe4:	mvn	r3, #0
   14fe8:	push	{r0, r1, r2, r4, r5, lr}
   14fec:	mov	r5, r0
   14ff0:	str	r3, [sp, #4]
   14ff4:	mov	r3, #1
   14ff8:	str	r3, [sp]
   14ffc:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   15000:	subs	r4, r0, #0
   15004:	bne	15014 <_start@@Base+0x2410>
   15008:	mvn	r0, #0
   1500c:	add	sp, sp, #12
   15010:	pop	{r4, r5, pc}
   15014:	mov	r1, #5
   15018:	mov	r0, r5
   1501c:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   15020:	cmp	r0, #0
   15024:	beq	15008 <_start@@Base+0x2404>
   15028:	str	r4, [r0]
   1502c:	mov	r0, #0
   15030:	b	1500c <_start@@Base+0x2408>
   15034:	push	{r4, r5, r6, lr}
   15038:	mov	r5, r0
   1503c:	bl	1c148 <flatcc_builder_end_offset_vector@@Base>
   15040:	subs	r4, r0, #0
   15044:	bne	15050 <_start@@Base+0x244c>
   15048:	mvn	r0, #0
   1504c:	pop	{r4, r5, r6, pc}
   15050:	mov	r1, #11
   15054:	mov	r0, r5
   15058:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   1505c:	cmp	r0, #0
   15060:	beq	15048 <_start@@Base+0x2444>
   15064:	str	r4, [r0]
   15068:	mov	r0, #0
   1506c:	pop	{r4, r5, r6, pc}
   15070:	push	{r4, r5, r6, lr}
   15074:	mov	r4, r0
   15078:	bl	1420c <_start@@Base+0x1608>
   1507c:	mov	r1, r0
   15080:	mov	r0, r4
   15084:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   15088:	subs	r5, r0, #0
   1508c:	bne	15098 <_start@@Base+0x2494>
   15090:	mvn	r0, #0
   15094:	pop	{r4, r5, r6, pc}
   15098:	mov	r1, #13
   1509c:	mov	r0, r4
   150a0:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   150a4:	cmp	r0, #0
   150a8:	beq	15090 <_start@@Base+0x248c>
   150ac:	str	r5, [r0]
   150b0:	mov	r0, #0
   150b4:	pop	{r4, r5, r6, pc}
   150b8:	cmp	r1, #0
   150bc:	push	{r4, lr}
   150c0:	mov	r4, r0
   150c4:	moveq	ip, r1
   150c8:	moveq	r0, r1
   150cc:	beq	150e0 <_start@@Base+0x24dc>
   150d0:	ldr	r0, [r1, #-4]
   150d4:	cmp	r2, r0
   150d8:	movcc	ip, r2
   150dc:	movcs	ip, r0
   150e0:	sub	r0, r0, ip
   150e4:	add	r1, r1, ip
   150e8:	cmp	r0, r3
   150ec:	movcc	r2, r0
   150f0:	movcs	r2, r3
   150f4:	mov	r0, r4
   150f8:	bl	1c65c <flatcc_builder_create_string@@Base>
   150fc:	subs	r1, r0, #0
   15100:	popeq	{r4, pc}
   15104:	mov	r0, r4
   15108:	pop	{r4, lr}
   1510c:	b	1b3ec <flatcc_builder_offset_vector_push@@Base>
   15110:	mov	r3, #8
   15114:	push	{r4, lr}
   15118:	mov	r1, #0
   1511c:	mov	r2, r3
   15120:	mov	r4, r0
   15124:	bl	1d6d4 <flatcc_verify_field@@Base>
   15128:	cmp	r0, #0
   1512c:	popne	{r4, pc}
   15130:	mov	r3, #4
   15134:	mov	r0, r4
   15138:	pop	{r4, lr}
   1513c:	mov	r2, r3
   15140:	mov	r1, #1
   15144:	b	1d6d4 <flatcc_verify_field@@Base>

00015148 <verify_empty_monster@@Base>:
   15148:	push	{r4, r5, r6, r7, r8, lr}
   1514c:	mov	r4, r0
   15150:	ldr	r1, [pc, #220]	; 15234 <verify_empty_monster@@Base+0xec>
   15154:	bl	12d40 <_start@@Base+0x13c>
   15158:	mov	r5, r0
   1515c:	ldr	r1, [pc, #212]	; 15238 <verify_empty_monster@@Base+0xf0>
   15160:	mov	r0, r4
   15164:	bl	12d40 <_start@@Base+0x13c>
   15168:	mov	r8, r0
   1516c:	mov	r1, #0
   15170:	mov	r0, r4
   15174:	bl	12d40 <_start@@Base+0x13c>
   15178:	mov	r7, r0
   1517c:	ldr	r1, [pc, #184]	; 1523c <verify_empty_monster@@Base+0xf4>
   15180:	mov	r0, r4
   15184:	bl	12d40 <_start@@Base+0x13c>
   15188:	mov	r6, r0
   1518c:	mov	r0, r4
   15190:	bl	12d6c <_start@@Base+0x168>
   15194:	cmp	r5, #0
   15198:	ldreq	r0, [pc, #160]	; 15240 <verify_empty_monster@@Base+0xf8>
   1519c:	beq	1522c <verify_empty_monster@@Base+0xe4>
   151a0:	cmp	r8, #0
   151a4:	ldrne	r0, [pc, #152]	; 15244 <verify_empty_monster@@Base+0xfc>
   151a8:	bne	1522c <verify_empty_monster@@Base+0xe4>
   151ac:	cmp	r5, r7
   151b0:	ldrne	r0, [pc, #144]	; 15248 <verify_empty_monster@@Base+0x100>
   151b4:	bne	1522c <verify_empty_monster@@Base+0xe4>
   151b8:	cmp	r5, r6
   151bc:	ldrne	r0, [pc, #136]	; 1524c <verify_empty_monster@@Base+0x104>
   151c0:	bne	151d0 <verify_empty_monster@@Base+0x88>
   151c4:	cmp	r5, r0
   151c8:	beq	151e0 <verify_empty_monster@@Base+0x98>
   151cc:	ldr	r0, [pc, #124]	; 15250 <verify_empty_monster@@Base+0x108>
   151d0:	bl	12970 <printf@plt>
   151d4:	mvn	r4, #0
   151d8:	mov	r0, r4
   151dc:	pop	{r4, r5, r6, r7, r8, pc}
   151e0:	bl	1325c <_start@@Base+0x658>
   151e4:	cmp	r0, #100	; 0x64
   151e8:	ldrne	r0, [pc, #100]	; 15254 <verify_empty_monster@@Base+0x10c>
   151ec:	bne	1522c <verify_empty_monster@@Base+0xe4>
   151f0:	mov	r0, r5
   151f4:	bl	132b8 <_start@@Base+0x6b4>
   151f8:	cmp	r0, #0
   151fc:	ldrne	r0, [pc, #84]	; 15258 <verify_empty_monster@@Base+0x110>
   15200:	bne	1522c <verify_empty_monster@@Base+0xe4>
   15204:	mov	r0, r5
   15208:	bl	13308 <_start@@Base+0x704>
   1520c:	subs	r4, r0, #0
   15210:	ldrne	r0, [pc, #68]	; 1525c <verify_empty_monster@@Base+0x114>
   15214:	bne	1522c <verify_empty_monster@@Base+0xe4>
   15218:	mov	r0, r5
   1521c:	bl	13358 <_start@@Base+0x754>
   15220:	cmp	r0, #0
   15224:	beq	151d8 <verify_empty_monster@@Base+0x90>
   15228:	ldr	r0, [pc, #48]	; 15260 <verify_empty_monster@@Base+0x118>
   1522c:	bl	129b8 <puts@plt>
   15230:	b	151d4 <verify_empty_monster@@Base+0x8c>
   15234:	andeq	lr, r1, lr, ror #15
   15238:	andeq	lr, r1, r1, ror sp
   1523c:	andeq	lr, r1, r6, ror sp
   15240:	andeq	lr, r1, ip, ror sp
   15244:	muleq	r1, r2, sp
   15248:			; <UNDEFINED> instruction: 0x0001edbf
   1524c:	strdeq	lr, [r1], -r5
   15250:	andeq	lr, r1, r8, lsr #28
   15254:	andeq	lr, r1, r3, asr lr
   15258:	andeq	lr, r1, r5, ror lr
   1525c:	muleq	r1, r2, lr
   15260:	andeq	lr, r1, sp, lsr #29

00015264 <test_enums@@Base>:
   15264:	mov	r0, #0
   15268:	bx	lr

0001526c <test_type_aliases@@Base>:
   1526c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15270:	sub	sp, sp, #20
   15274:	mov	r4, r0
   15278:	mvn	r8, #0
   1527c:	mov	r5, #8
   15280:	bl	1ab18 <flatcc_builder_reset@@Base>
   15284:	mov	r3, #1
   15288:	mov	r2, #0
   1528c:	mov	r1, r2
   15290:	mov	r0, r4
   15294:	stm	sp, {r3, r8}
   15298:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   1529c:	mvn	r3, #-536870912	; 0xe0000000
   152a0:	mov	r2, #0
   152a4:	str	r5, [sp]
   152a8:	mov	r1, r2
   152ac:	mov	r9, r0
   152b0:	mov	r0, r4
   152b4:	str	r3, [sp, #4]
   152b8:	mov	r3, r5
   152bc:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   152c0:	mov	r7, r0
   152c4:	ldr	r1, [pc, #1144]	; 15744 <test_type_aliases@@Base+0x4d8>
   152c8:	mov	r0, r4
   152cc:	bl	12e60 <_start@@Base+0x25c>
   152d0:	subs	r6, r0, #0
   152d4:	bne	154d4 <test_type_aliases@@Base+0x268>
   152d8:	mov	r1, #12
   152dc:	mov	r0, r4
   152e0:	bl	1b864 <flatcc_builder_start_table@@Base>
   152e4:	cmp	r0, #0
   152e8:	bne	154c8 <test_type_aliases@@Base+0x25c>
   152ec:	mov	r3, r5
   152f0:	mov	r2, r5
   152f4:	mov	r1, #6
   152f8:	mov	r0, r4
   152fc:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15300:	cmp	r0, #0
   15304:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15308:	mov	r2, #0
   1530c:	mov	r3, #-2147483648	; 0x80000000
   15310:	mov	r1, #7
   15314:	strd	r2, [r0]
   15318:	mov	r3, r5
   1531c:	mov	r2, r5
   15320:	mov	r0, r4
   15324:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15328:	cmp	r0, #0
   1532c:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15330:	mvn	r2, #0
   15334:	mvn	r3, #0
   15338:	mov	r1, #9
   1533c:	strd	r2, [r0]
   15340:	mov	r3, r5
   15344:	mov	r2, r5
   15348:	mov	r0, r4
   1534c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15350:	cmp	r0, #0
   15354:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15358:	ldr	r2, [pc, #1000]	; 15748 <test_type_aliases@@Base+0x4dc>
   1535c:	ldr	r3, [pc, #1000]	; 1574c <test_type_aliases@@Base+0x4e0>
   15360:	strd	r2, [r0]
   15364:	mov	r3, #4
   15368:	mov	r0, r4
   1536c:	mov	r2, r3
   15370:	mov	r1, r3
   15374:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15378:	cmp	r0, #0
   1537c:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15380:	mov	r3, #-2147483648	; 0x80000000
   15384:	mov	r1, #5
   15388:	str	r3, [r0]
   1538c:	mov	r3, #4
   15390:	mov	r0, r4
   15394:	mov	r2, r3
   15398:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1539c:	cmp	r0, #0
   153a0:	beq	154c8 <test_type_aliases@@Base+0x25c>
   153a4:	mov	r3, #4
   153a8:	mov	r1, r5
   153ac:	str	r8, [r0]
   153b0:	mov	r2, r3
   153b4:	mov	r0, r4
   153b8:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   153bc:	cmp	r0, #0
   153c0:	beq	154c8 <test_type_aliases@@Base+0x25c>
   153c4:	ldr	r3, [pc, #900]	; 15750 <test_type_aliases@@Base+0x4e4>
   153c8:	mov	r1, r9
   153cc:	str	r3, [r0]
   153d0:	mov	r0, r4
   153d4:	bl	12f08 <_start@@Base+0x304>
   153d8:	clz	r0, r0
   153dc:	cmp	r7, #0
   153e0:	lsr	r0, r0, #5
   153e4:	moveq	r0, #0
   153e8:	cmp	r0, #0
   153ec:	beq	154c8 <test_type_aliases@@Base+0x25c>
   153f0:	mov	r1, #11
   153f4:	mov	r0, r4
   153f8:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   153fc:	cmp	r0, #0
   15400:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15404:	mov	r3, #2
   15408:	str	r7, [r0]
   1540c:	mov	r0, r4
   15410:	mov	r2, r3
   15414:	mov	r1, r3
   15418:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1541c:	cmp	r0, #0
   15420:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15424:	mov	r3, #32768	; 0x8000
   15428:	mov	r1, #3
   1542c:	strh	r3, [r0]
   15430:	mov	r3, #2
   15434:	mov	r0, r4
   15438:	mov	r2, r3
   1543c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15440:	cmp	r0, #0
   15444:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15448:	mov	r3, #1
   1544c:	mov	r1, #0
   15450:	strh	r8, [r0]
   15454:	mov	r2, r3
   15458:	mov	r0, r4
   1545c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15460:	cmp	r0, #0
   15464:	beq	154c8 <test_type_aliases@@Base+0x25c>
   15468:	mvn	r3, #127	; 0x7f
   1546c:	strb	r3, [r0]
   15470:	mov	r3, #1
   15474:	mov	r0, r4
   15478:	mov	r2, r3
   1547c:	mov	r1, r3
   15480:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   15484:	cmp	r0, #0
   15488:	beq	154c8 <test_type_aliases@@Base+0x25c>
   1548c:	mov	r2, #0
   15490:	ldr	r1, [pc, #700]	; 15754 <test_type_aliases@@Base+0x4e8>
   15494:	strb	r8, [r0]
   15498:	mov	r0, r4
   1549c:	bl	1be10 <flatcc_builder_check_required@@Base>
   154a0:	cmp	r0, #0
   154a4:	bne	154bc <test_type_aliases@@Base+0x250>
   154a8:	ldr	r3, [pc, #680]	; 15758 <test_type_aliases@@Base+0x4ec>
   154ac:	mov	r2, #237	; 0xed
   154b0:	ldr	r1, [pc, #676]	; 1575c <test_type_aliases@@Base+0x4f0>
   154b4:	ldr	r0, [pc, #676]	; 15760 <test_type_aliases@@Base+0x4f4>
   154b8:	bl	12a60 <__assert_fail@plt>
   154bc:	mov	r0, r4
   154c0:	bl	1be8c <flatcc_builder_end_table@@Base>
   154c4:	mov	r6, r0
   154c8:	mov	r1, r6
   154cc:	mov	r0, r4
   154d0:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   154d4:	add	r1, sp, #12
   154d8:	mov	r0, r4
   154dc:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   154e0:	ldr	r3, [pc, #636]	; 15764 <test_type_aliases@@Base+0x4f8>
   154e4:	mov	r4, r0
   154e8:	ldr	r2, [pc, #596]	; 15744 <test_type_aliases@@Base+0x4d8>
   154ec:	ldr	r1, [sp, #12]
   154f0:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   154f4:	subs	r5, r0, #0
   154f8:	beq	1553c <test_type_aliases@@Base+0x2d0>
   154fc:	ldr	r3, [pc, #612]	; 15768 <test_type_aliases@@Base+0x4fc>
   15500:	mov	r1, r4
   15504:	ldr	r0, [pc, #608]	; 1576c <test_type_aliases@@Base+0x500>
   15508:	ldr	r2, [sp, #12]
   1550c:	ldr	r3, [r3]
   15510:	bl	13028 <_start@@Base+0x424>
   15514:	mov	r0, r5
   15518:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   1551c:	mov	r1, r0
   15520:	ldr	r0, [pc, #584]	; 15770 <test_type_aliases@@Base+0x504>
   15524:	bl	12970 <printf@plt>
   15528:	mov	r0, r4
   1552c:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   15530:	mov	r0, r5
   15534:	add	sp, sp, #20
   15538:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1553c:	cmp	r4, #0
   15540:	bne	15558 <test_type_aliases@@Base+0x2ec>
   15544:	ldr	r3, [pc, #552]	; 15774 <test_type_aliases@@Base+0x508>
   15548:	movw	r2, #749	; 0x2ed
   1554c:	ldr	r1, [pc, #548]	; 15778 <test_type_aliases@@Base+0x50c>
   15550:	ldr	r0, [pc, #548]	; 1577c <test_type_aliases@@Base+0x510>
   15554:	b	154b8 <test_type_aliases@@Base+0x24c>
   15558:	ldr	r1, [pc, #484]	; 15744 <test_type_aliases@@Base+0x4d8>
   1555c:	mov	r0, r4
   15560:	bl	12d00 <_start@@Base+0xfc>
   15564:	cmp	r0, #0
   15568:	beq	15544 <test_type_aliases@@Base+0x2d8>
   1556c:	ldr	r2, [r4]
   15570:	adds	r3, r4, r2
   15574:	beq	15544 <test_type_aliases@@Base+0x2d8>
   15578:	ldr	r2, [r4, r2]
   1557c:	sub	r2, r3, r2
   15580:	ldrh	r1, [r2]
   15584:	cmp	r1, #5
   15588:	bls	15724 <test_type_aliases@@Base+0x4b8>
   1558c:	ldrh	r0, [r2, #4]
   15590:	cmp	r0, #0
   15594:	beq	15724 <test_type_aliases@@Base+0x4b8>
   15598:	ldrsb	ip, [r3, r0]
   1559c:	cmp	r1, #9
   155a0:	movls	r0, #0
   155a4:	movhi	r0, #1
   155a8:	cmn	ip, #128	; 0x80
   155ac:	movne	r0, #0
   155b0:	cmp	r0, #0
   155b4:	beq	15724 <test_type_aliases@@Base+0x4b8>
   155b8:	ldrh	r0, [r2, #8]
   155bc:	cmp	r0, #0
   155c0:	beq	15724 <test_type_aliases@@Base+0x4b8>
   155c4:	ldrsh	ip, [r3, r0]
   155c8:	cmp	r1, #13
   155cc:	movls	r0, #0
   155d0:	movhi	r0, #1
   155d4:	cmn	ip, #32768	; 0x8000
   155d8:	movne	r0, #0
   155dc:	cmp	r0, #0
   155e0:	beq	15724 <test_type_aliases@@Base+0x4b8>
   155e4:	ldrh	r0, [r2, #12]
   155e8:	cmp	r0, #0
   155ec:	beq	15724 <test_type_aliases@@Base+0x4b8>
   155f0:	ldr	ip, [r3, r0]
   155f4:	cmp	r1, #17
   155f8:	sub	r0, ip, #-2147483648	; 0x80000000
   155fc:	clz	r0, r0
   15600:	lsr	r0, r0, #5
   15604:	movls	r0, #0
   15608:	cmp	r0, #0
   1560c:	beq	15724 <test_type_aliases@@Base+0x4b8>
   15610:	ldrh	r0, [r2, #16]
   15614:	cmp	r0, #0
   15618:	beq	15724 <test_type_aliases@@Base+0x4b8>
   1561c:	ldrd	r6, [r3, r0]
   15620:	cmp	r7, #-2147483648	; 0x80000000
   15624:	cmpeq	r6, #0
   15628:	bne	15724 <test_type_aliases@@Base+0x4b8>
   1562c:	ldrh	r0, [r2, #6]
   15630:	cmp	r0, #0
   15634:	beq	15724 <test_type_aliases@@Base+0x4b8>
   15638:	ldrb	r0, [r3, r0]
   1563c:	cmp	r0, #255	; 0xff
   15640:	bne	15724 <test_type_aliases@@Base+0x4b8>
   15644:	ldrh	r0, [r2, #10]
   15648:	cmp	r0, #0
   1564c:	beq	15724 <test_type_aliases@@Base+0x4b8>
   15650:	ldrh	ip, [r3, r0]
   15654:	movw	r0, #65535	; 0xffff
   15658:	cmp	ip, r0
   1565c:	bne	15724 <test_type_aliases@@Base+0x4b8>
   15660:	ldrh	r0, [r2, #14]
   15664:	cmp	r0, #0
   15668:	beq	15724 <test_type_aliases@@Base+0x4b8>
   1566c:	ldr	ip, [r3, r0]
   15670:	cmp	r1, #19
   15674:	movls	r0, #0
   15678:	movhi	r0, #1
   1567c:	cmn	ip, #1
   15680:	movne	r0, #0
   15684:	cmp	r0, #0
   15688:	beq	15724 <test_type_aliases@@Base+0x4b8>
   1568c:	ldrh	r0, [r2, #18]
   15690:	cmp	r0, #0
   15694:	beq	15724 <test_type_aliases@@Base+0x4b8>
   15698:	mov	ip, r3
   1569c:	cmp	r1, #21
   156a0:	ldr	r0, [ip, r0]!
   156a4:	ldr	ip, [ip, #4]
   156a8:	and	r0, r0, ip
   156ac:	movls	ip, #0
   156b0:	movhi	ip, #1
   156b4:	cmn	r0, #1
   156b8:	movne	ip, #0
   156bc:	cmp	ip, #0
   156c0:	beq	15724 <test_type_aliases@@Base+0x4b8>
   156c4:	ldrh	r0, [r2, #20]
   156c8:	cmp	r0, #0
   156cc:	beq	15724 <test_type_aliases@@Base+0x4b8>
   156d0:	add	r0, r3, r0
   156d4:	vldr	s15, [pc, #100]	; 15740 <test_type_aliases@@Base+0x4d4>
   156d8:	vldr	s14, [r0]
   156dc:	vcmp.f32	s14, s15
   156e0:	vmrs	APSR_nzcv, fpscr
   156e4:	moveq	r0, #1
   156e8:	movne	r0, #0
   156ec:	cmp	r1, #23
   156f0:	movls	r1, #0
   156f4:	andhi	r1, r0, #1
   156f8:	cmp	r1, #0
   156fc:	beq	15724 <test_type_aliases@@Base+0x4b8>
   15700:	ldrh	r2, [r2, #22]
   15704:	cmp	r2, #0
   15708:	beq	15724 <test_type_aliases@@Base+0x4b8>
   1570c:	add	r3, r3, r2
   15710:	vldr	d7, [pc, #32]	; 15738 <test_type_aliases@@Base+0x4cc>
   15714:	vldr	d6, [r3]
   15718:	vcmp.f64	d6, d7
   1571c:	vmrs	APSR_nzcv, fpscr
   15720:	beq	15528 <test_type_aliases@@Base+0x2bc>
   15724:	ldr	r0, [pc, #84]	; 15780 <test_type_aliases@@Base+0x514>
   15728:	mvn	r5, #0
   1572c:	bl	129b8 <puts@plt>
   15730:	b	15528 <test_type_aliases@@Base+0x2bc>
   15734:	nop	{0}
   15738:	strbtvs	r6, [r6], -r6, ror #12
   1573c:	andmi	r6, r2, r6, ror #12
   15740:	andsmi	r3, r3, r3, lsr r3
   15744:	andeq	lr, r1, lr, ror #15
   15748:	strbtvs	r6, [r6], -r6, ror #12
   1574c:	andmi	r6, r2, r6, ror #12
   15750:	andsmi	r3, r3, r3, lsr r3
   15754:	strdeq	lr, [r1], -r0
   15758:	strdeq	lr, [r1], -r2
   1575c:	andeq	lr, r1, fp, ror r8
   15760:	andeq	lr, r1, sp, asr #29
   15764:	andeq	r4, r1, r8, ror #6
   15768:	andeq	r3, r3, r0, ror r0
   1576c:	andeq	lr, r1, fp, ror pc
   15770:	andeq	lr, r1, lr, lsl #31
   15774:	andeq	lr, r1, r1, lsl r5
   15778:	strdeq	lr, [r1], -r3
   1577c:	andeq	lr, r1, r5, asr r8
   15780:			; <UNDEFINED> instruction: 0x0001efba

00015784 <test_empty_monster@@Base>:
   15784:	push	{r0, r1, r2, r4, r5, lr}
   15788:	mov	r4, r0
   1578c:	bl	1ab18 <flatcc_builder_reset@@Base>
   15790:	ldr	r1, [pc, #208]	; 15868 <test_empty_monster@@Base+0xe4>
   15794:	mov	r0, r4
   15798:	bl	12e60 <_start@@Base+0x25c>
   1579c:	mov	r0, r4
   157a0:	bl	12e6c <_start@@Base+0x268>
   157a4:	ldr	r1, [pc, #192]	; 1586c <test_empty_monster@@Base+0xe8>
   157a8:	mov	r0, r4
   157ac:	bl	1313c <_start@@Base+0x538>
   157b0:	mov	r0, r4
   157b4:	bl	1420c <_start@@Base+0x1608>
   157b8:	mov	r1, r0
   157bc:	mov	r0, r4
   157c0:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   157c4:	add	r1, sp, #4
   157c8:	mov	r0, r4
   157cc:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   157d0:	ldr	r3, [pc, #152]	; 15870 <test_empty_monster@@Base+0xec>
   157d4:	mov	r1, r0
   157d8:	mov	r4, r0
   157dc:	ldr	r0, [pc, #144]	; 15874 <test_empty_monster@@Base+0xf0>
   157e0:	ldr	r2, [sp, #4]
   157e4:	ldr	r3, [r3]
   157e8:	bl	13028 <_start@@Base+0x424>
   157ec:	mov	r0, r4
   157f0:	bl	15148 <verify_empty_monster@@Base>
   157f4:	subs	r5, r0, #0
   157f8:	bne	1585c <test_empty_monster@@Base+0xd8>
   157fc:	ldr	r3, [pc, #116]	; 15878 <test_empty_monster@@Base+0xf4>
   15800:	mov	r0, r4
   15804:	ldr	r2, [pc, #92]	; 15868 <test_empty_monster@@Base+0xe4>
   15808:	ldr	r1, [sp, #4]
   1580c:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   15810:	subs	r5, r0, #0
   15814:	beq	15838 <test_empty_monster@@Base+0xb4>
   15818:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   1581c:	mov	r1, r0
   15820:	ldr	r0, [pc, #84]	; 1587c <test_empty_monster@@Base+0xf8>
   15824:	bl	12970 <printf@plt>
   15828:	mvn	r5, #0
   1582c:	mov	r0, r5
   15830:	add	sp, sp, #12
   15834:	pop	{r4, r5, pc}
   15838:	ldr	r1, [sp, #4]
   1583c:	mov	r0, r4
   15840:	sub	r1, r1, #1
   15844:	bl	12ff4 <_start@@Base+0x3f0>
   15848:	cmp	r0, #0
   1584c:	bne	1585c <test_empty_monster@@Base+0xd8>
   15850:	ldr	r0, [pc, #40]	; 15880 <test_empty_monster@@Base+0xfc>
   15854:	bl	129b8 <puts@plt>
   15858:	b	15828 <test_empty_monster@@Base+0xa4>
   1585c:	mov	r0, r4
   15860:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   15864:	b	1582c <test_empty_monster@@Base+0xa8>
   15868:	andeq	lr, r1, lr, ror #15
   1586c:	andeq	lr, r1, r9, ror #31
   15870:	andeq	r3, r3, r0, ror r0
   15874:	strdeq	lr, [r1], -r3
   15878:	andeq	r4, r1, r4, ror r6
   1587c:	andeq	pc, r1, r7
   15880:	andeq	pc, r1, pc, lsr #32

00015884 <test_typed_empty_monster@@Base>:
   15884:	mov	r3, #0
   15888:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1588c:	mov	r4, r0
   15890:	str	r3, [sp, #4]
   15894:	bl	1ab18 <flatcc_builder_reset@@Base>
   15898:	ldr	r1, [pc, #512]	; 15aa0 <test_typed_empty_monster@@Base+0x21c>
   1589c:	mov	r0, r4
   158a0:	bl	12e60 <_start@@Base+0x25c>
   158a4:	mov	r0, r4
   158a8:	ldr	r7, [pc, #500]	; 15aa4 <test_typed_empty_monster@@Base+0x220>
   158ac:	bl	12e6c <_start@@Base+0x268>
   158b0:	ldr	r1, [pc, #496]	; 15aa8 <test_typed_empty_monster@@Base+0x224>
   158b4:	mov	r0, r4
   158b8:	bl	1313c <_start@@Base+0x538>
   158bc:	mov	r0, r4
   158c0:	bl	1420c <_start@@Base+0x1608>
   158c4:	mov	r1, r0
   158c8:	mov	r0, r4
   158cc:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   158d0:	mov	r1, sp
   158d4:	mov	r0, r4
   158d8:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   158dc:	ldr	r3, [pc, #456]	; 15aac <test_typed_empty_monster@@Base+0x228>
   158e0:	mov	r1, r0
   158e4:	mov	r4, r0
   158e8:	ldr	r0, [pc, #448]	; 15ab0 <test_typed_empty_monster@@Base+0x22c>
   158ec:	ldr	r2, [sp]
   158f0:	ldr	r3, [r3]
   158f4:	bl	13028 <_start@@Base+0x424>
   158f8:	ldr	r3, [pc, #436]	; 15ab4 <test_typed_empty_monster@@Base+0x230>
   158fc:	mov	r1, r7
   15900:	ldr	ip, [pc, #432]	; 15ab8 <test_typed_empty_monster@@Base+0x234>
   15904:	ldr	r6, [r4, #4]
   15908:	mov	r0, r3
   1590c:	ldrb	r2, [r1], #1
   15910:	cmp	r2, #0
   15914:	bne	1594c <test_typed_empty_monster@@Base+0xc8>
   15918:	cmp	r3, #0
   1591c:	beq	15a94 <test_typed_empty_monster@@Base+0x210>
   15920:	cmp	r6, r3
   15924:	beq	15958 <test_typed_empty_monster@@Base+0xd4>
   15928:	mov	r1, r6
   1592c:	ldr	r0, [pc, #392]	; 15abc <test_typed_empty_monster@@Base+0x238>
   15930:	bl	12970 <printf@plt>
   15934:	mvn	r5, #0
   15938:	mov	r0, r4
   1593c:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   15940:	mov	r0, r5
   15944:	add	sp, sp, #8
   15948:	pop	{r4, r5, r6, r7, r8, pc}
   1594c:	eor	r3, r3, r2
   15950:	mul	r3, ip, r3
   15954:	b	1590c <test_typed_empty_monster@@Base+0x88>
   15958:	ldr	r3, [pc, #352]	; 15ac0 <test_typed_empty_monster@@Base+0x23c>
   1595c:	cmp	r6, r3
   15960:	mov	r8, r3
   15964:	beq	15974 <test_typed_empty_monster@@Base+0xf0>
   15968:	ldr	r0, [pc, #340]	; 15ac4 <test_typed_empty_monster@@Base+0x240>
   1596c:	bl	129b8 <puts@plt>
   15970:	b	15934 <test_typed_empty_monster@@Base+0xb0>
   15974:	mov	r0, r4
   15978:	bl	15148 <verify_empty_monster@@Base>
   1597c:	cmp	r0, #0
   15980:	ldreq	r0, [pc, #320]	; 15ac8 <test_typed_empty_monster@@Base+0x244>
   15984:	beq	1596c <test_typed_empty_monster@@Base+0xe8>
   15988:	mov	r0, r4
   1598c:	ldr	r3, [pc, #312]	; 15acc <test_typed_empty_monster@@Base+0x248>
   15990:	ldr	r2, [pc, #264]	; 15aa0 <test_typed_empty_monster@@Base+0x21c>
   15994:	ldr	r1, [sp]
   15998:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   1599c:	subs	r5, r0, #0
   159a0:	beq	159b4 <test_typed_empty_monster@@Base+0x130>
   159a4:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   159a8:	mov	r1, r0
   159ac:	ldr	r0, [pc, #284]	; 15ad0 <test_typed_empty_monster@@Base+0x24c>
   159b0:	b	159f8 <test_typed_empty_monster@@Base+0x174>
   159b4:	ldr	r3, [pc, #272]	; 15acc <test_typed_empty_monster@@Base+0x248>
   159b8:	mov	r0, r4
   159bc:	ldr	r2, [pc, #220]	; 15aa0 <test_typed_empty_monster@@Base+0x21c>
   159c0:	ldr	r1, [sp]
   159c4:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   159c8:	subs	r5, r0, #0
   159cc:	bne	159a4 <test_typed_empty_monster@@Base+0x120>
   159d0:	ldr	r3, [pc, #244]	; 15acc <test_typed_empty_monster@@Base+0x248>
   159d4:	mov	r2, r6
   159d8:	mov	r0, r4
   159dc:	ldr	r1, [sp]
   159e0:	bl	1dba0 <flatcc_verify_table_as_typed_root@@Base>
   159e4:	subs	r5, r0, #0
   159e8:	beq	15a00 <test_typed_empty_monster@@Base+0x17c>
   159ec:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   159f0:	mov	r1, r0
   159f4:	ldr	r0, [pc, #216]	; 15ad4 <test_typed_empty_monster@@Base+0x250>
   159f8:	bl	12970 <printf@plt>
   159fc:	b	15938 <test_typed_empty_monster@@Base+0xb4>
   15a00:	ldr	r2, [pc, #172]	; 15ab4 <test_typed_empty_monster@@Base+0x230>
   15a04:	ldr	r0, [pc, #172]	; 15ab8 <test_typed_empty_monster@@Base+0x234>
   15a08:	ldr	r1, [sp]
   15a0c:	ldrb	r3, [r7], #1
   15a10:	cmp	r3, #0
   15a14:	bne	15a48 <test_typed_empty_monster@@Base+0x1c4>
   15a18:	ldr	r0, [pc, #148]	; 15ab4 <test_typed_empty_monster@@Base+0x230>
   15a1c:	cmp	r2, #0
   15a20:	ldr	r3, [pc, #164]	; 15acc <test_typed_empty_monster@@Base+0x248>
   15a24:	moveq	r2, r0
   15a28:	mov	r0, r4
   15a2c:	bl	1dba0 <flatcc_verify_table_as_typed_root@@Base>
   15a30:	subs	r5, r0, #0
   15a34:	beq	15a54 <test_typed_empty_monster@@Base+0x1d0>
   15a38:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   15a3c:	mov	r1, r0
   15a40:	ldr	r0, [pc, #144]	; 15ad8 <test_typed_empty_monster@@Base+0x254>
   15a44:	b	159f8 <test_typed_empty_monster@@Base+0x174>
   15a48:	eor	r2, r2, r3
   15a4c:	mul	r2, r0, r2
   15a50:	b	15a0c <test_typed_empty_monster@@Base+0x188>
   15a54:	ldr	r3, [pc, #112]	; 15acc <test_typed_empty_monster@@Base+0x248>
   15a58:	add	r2, sp, #4
   15a5c:	mov	r0, r4
   15a60:	str	r8, [sp, #4]
   15a64:	ldr	r1, [sp]
   15a68:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   15a6c:	subs	r5, r0, #0
   15a70:	bne	159a4 <test_typed_empty_monster@@Base+0x120>
   15a74:	mov	r0, r4
   15a78:	ldr	r1, [sp]
   15a7c:	bl	12ff4 <_start@@Base+0x3f0>
   15a80:	cmp	r0, #0
   15a84:	bne	15938 <test_typed_empty_monster@@Base+0xb4>
   15a88:	ldr	r0, [pc, #76]	; 15adc <test_typed_empty_monster@@Base+0x258>
   15a8c:	bl	129b8 <puts@plt>
   15a90:	b	15938 <test_typed_empty_monster@@Base+0xb4>
   15a94:	cmp	r6, r0
   15a98:	beq	15968 <test_typed_empty_monster@@Base+0xe4>
   15a9c:	b	15928 <test_typed_empty_monster@@Base+0xa4>
   15aa0:	andeq	pc, r1, ip, asr r0	; <UNPREDICTABLE>
   15aa4:	andeq	pc, r1, fp, ror r0	; <UNPREDICTABLE>
   15aa8:	andeq	lr, r1, r9, ror #31
   15aac:	andeq	r3, r3, r0, ror r0
   15ab0:	andeq	pc, r1, r1, rrx
   15ab4:	tsthi	ip, r5, asr #27
   15ab8:			; <UNDEFINED> instruction: 0x01000193
   15abc:	muleq	r1, r2, r0
   15ac0:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   15ac4:	andeq	pc, r1, r4, asr #1
   15ac8:	andeq	pc, r1, ip, ror #1
   15acc:	andeq	r4, r1, r4, ror r6
   15ad0:	andeq	pc, r1, sl, lsr #2
   15ad4:	andeq	pc, r1, r8, asr r1	; <UNPREDICTABLE>
   15ad8:	andeq	pc, r1, pc, lsl #3
   15adc:	andeq	pc, r1, pc, asr #3

00015ae0 <verify_table_with_emptystruct@@Base>:
   15ae0:	push	{r4, lr}
   15ae4:	bl	12da0 <_start@@Base+0x19c>
   15ae8:	cmp	r0, #0
   15aec:	ldreq	r0, [pc, #64]	; 15b34 <verify_table_with_emptystruct@@Base+0x54>
   15af0:	beq	15b20 <verify_table_with_emptystruct@@Base+0x40>
   15af4:	ldr	r3, [r0]
   15af8:	sub	r3, r0, r3
   15afc:	ldrh	r2, [r3]
   15b00:	cmp	r2, #5
   15b04:	bls	15b1c <verify_table_with_emptystruct@@Base+0x3c>
   15b08:	ldrh	r3, [r3, #4]
   15b0c:	cmp	r3, #0
   15b10:	beq	15b1c <verify_table_with_emptystruct@@Base+0x3c>
   15b14:	cmn	r0, r3
   15b18:	bne	15b2c <verify_table_with_emptystruct@@Base+0x4c>
   15b1c:	ldr	r0, [pc, #20]	; 15b38 <verify_table_with_emptystruct@@Base+0x58>
   15b20:	bl	129b8 <puts@plt>
   15b24:	mvn	r0, #0
   15b28:	pop	{r4, pc}
   15b2c:	mov	r0, #0
   15b30:	pop	{r4, pc}
   15b34:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   15b38:	andeq	pc, r1, sp, lsr r2	; <UNPREDICTABLE>

00015b3c <test_table_with_emptystruct@@Base>:
   15b3c:	push	{r0, r1, r2, r4, r5, lr}
   15b40:	mov	r4, r0
   15b44:	bl	1ab18 <flatcc_builder_reset@@Base>
   15b48:	ldr	r1, [pc, #104]	; 15bb8 <test_table_with_emptystruct@@Base+0x7c>
   15b4c:	mov	r0, r4
   15b50:	bl	12e60 <_start@@Base+0x25c>
   15b54:	cmp	r0, #0
   15b58:	bne	15b70 <test_table_with_emptystruct@@Base+0x34>
   15b5c:	mov	r0, r4
   15b60:	bl	14f10 <_start@@Base+0x230c>
   15b64:	mov	r1, r0
   15b68:	mov	r0, r4
   15b6c:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   15b70:	add	r1, sp, #4
   15b74:	mov	r0, r4
   15b78:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   15b7c:	ldr	r3, [pc, #56]	; 15bbc <test_table_with_emptystruct@@Base+0x80>
   15b80:	mov	r1, r0
   15b84:	mov	r4, r0
   15b88:	ldr	r0, [pc, #48]	; 15bc0 <test_table_with_emptystruct@@Base+0x84>
   15b8c:	ldr	r2, [sp, #4]
   15b90:	ldr	r3, [r3]
   15b94:	bl	13028 <_start@@Base+0x424>
   15b98:	mov	r0, r4
   15b9c:	bl	15ae0 <verify_table_with_emptystruct@@Base>
   15ba0:	mov	r5, r0
   15ba4:	mov	r0, r4
   15ba8:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   15bac:	mov	r0, r5
   15bb0:	add	sp, sp, #12
   15bb4:	pop	{r4, r5, pc}
   15bb8:	andeq	lr, r1, lr, ror #15
   15bbc:	andeq	r3, r3, r0, ror r0
   15bc0:	andeq	pc, r1, r3, ror #4

00015bc4 <test_typed_table_with_emptystruct@@Base>:
   15bc4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15bc8:	mov	r4, r0
   15bcc:	bl	1ab18 <flatcc_builder_reset@@Base>
   15bd0:	ldr	r1, [pc, #352]	; 15d38 <test_typed_table_with_emptystruct@@Base+0x174>
   15bd4:	mov	r0, r4
   15bd8:	bl	12e60 <_start@@Base+0x25c>
   15bdc:	cmp	r0, #0
   15be0:	bne	15bf8 <test_typed_table_with_emptystruct@@Base+0x34>
   15be4:	mov	r0, r4
   15be8:	bl	14f10 <_start@@Base+0x230c>
   15bec:	mov	r1, r0
   15bf0:	mov	r0, r4
   15bf4:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   15bf8:	add	r1, sp, #4
   15bfc:	mov	r0, r4
   15c00:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   15c04:	ldr	r3, [pc, #304]	; 15d3c <test_typed_table_with_emptystruct@@Base+0x178>
   15c08:	mov	r1, r0
   15c0c:	mov	r4, r0
   15c10:	ldr	r0, [pc, #296]	; 15d40 <test_typed_table_with_emptystruct@@Base+0x17c>
   15c14:	ldr	r2, [sp, #4]
   15c18:	ldr	r3, [r3]
   15c1c:	bl	13028 <_start@@Base+0x424>
   15c20:	ldr	r3, [pc, #284]	; 15d44 <test_typed_table_with_emptystruct@@Base+0x180>
   15c24:	mov	r0, r4
   15c28:	ldr	r2, [pc, #264]	; 15d38 <test_typed_table_with_emptystruct@@Base+0x174>
   15c2c:	ldr	r1, [sp, #4]
   15c30:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   15c34:	cmp	r0, #0
   15c38:	ldrne	r0, [pc, #264]	; 15d48 <test_typed_table_with_emptystruct@@Base+0x184>
   15c3c:	bne	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15c40:	mov	r0, r4
   15c44:	ldr	r3, [pc, #248]	; 15d44 <test_typed_table_with_emptystruct@@Base+0x180>
   15c48:	ldr	r2, [pc, #232]	; 15d38 <test_typed_table_with_emptystruct@@Base+0x174>
   15c4c:	ldr	r1, [sp, #4]
   15c50:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   15c54:	cmp	r0, #0
   15c58:	ldrne	r0, [pc, #236]	; 15d4c <test_typed_table_with_emptystruct@@Base+0x188>
   15c5c:	bne	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15c60:	mov	r0, r4
   15c64:	ldr	r6, [pc, #228]	; 15d50 <test_typed_table_with_emptystruct@@Base+0x18c>
   15c68:	ldr	r3, [pc, #212]	; 15d44 <test_typed_table_with_emptystruct@@Base+0x180>
   15c6c:	ldr	r1, [sp, #4]
   15c70:	mov	r2, r6
   15c74:	mov	r7, r6
   15c78:	bl	1dba0 <flatcc_verify_table_as_typed_root@@Base>
   15c7c:	subs	r5, r0, #0
   15c80:	ldrne	r0, [pc, #204]	; 15d54 <test_typed_table_with_emptystruct@@Base+0x190>
   15c84:	bne	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15c88:	cmp	r4, #0
   15c8c:	ldreq	r0, [pc, #196]	; 15d58 <test_typed_table_with_emptystruct@@Base+0x194>
   15c90:	beq	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15c94:	ldr	r3, [r4, #4]
   15c98:	cmp	r3, r6
   15c9c:	ldrne	r0, [pc, #184]	; 15d5c <test_typed_table_with_emptystruct@@Base+0x198>
   15ca0:	bne	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15ca4:	mov	r0, r4
   15ca8:	ldr	r1, [pc, #136]	; 15d38 <test_typed_table_with_emptystruct@@Base+0x174>
   15cac:	bl	12d00 <_start@@Base+0xfc>
   15cb0:	cmp	r0, #0
   15cb4:	ldreq	r0, [pc, #164]	; 15d60 <test_typed_table_with_emptystruct@@Base+0x19c>
   15cb8:	beq	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15cbc:	mov	r0, r4
   15cc0:	bl	12da0 <_start@@Base+0x19c>
   15cc4:	cmp	r0, #0
   15cc8:	ldrne	r0, [pc, #148]	; 15d64 <test_typed_table_with_emptystruct@@Base+0x1a0>
   15ccc:	bne	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15cd0:	ldr	r3, [r4, #4]
   15cd4:	cmp	r3, #1
   15cd8:	bne	15cec <test_typed_table_with_emptystruct@@Base+0x128>
   15cdc:	ldr	r3, [r4]
   15ce0:	cmn	r4, r3
   15ce4:	ldrne	r0, [pc, #124]	; 15d68 <test_typed_table_with_emptystruct@@Base+0x1a4>
   15ce8:	bne	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15cec:	mov	r0, r4
   15cf0:	ldr	r1, [pc, #64]	; 15d38 <test_typed_table_with_emptystruct@@Base+0x174>
   15cf4:	bl	12d00 <_start@@Base+0xfc>
   15cf8:	cmp	r0, #0
   15cfc:	beq	15d0c <test_typed_table_with_emptystruct@@Base+0x148>
   15d00:	ldr	r3, [r4]
   15d04:	cmn	r4, r3
   15d08:	bne	15d24 <test_typed_table_with_emptystruct@@Base+0x160>
   15d0c:	ldr	r0, [pc, #88]	; 15d6c <test_typed_table_with_emptystruct@@Base+0x1a8>
   15d10:	mvn	r5, #0
   15d14:	bl	129b8 <puts@plt>
   15d18:	mov	r0, r5
   15d1c:	add	sp, sp, #12
   15d20:	pop	{r4, r5, r6, r7, pc}
   15d24:	ldr	r3, [r4, #4]
   15d28:	cmp	r3, r7
   15d2c:	beq	15d18 <test_typed_table_with_emptystruct@@Base+0x154>
   15d30:	ldr	r0, [pc, #56]	; 15d70 <test_typed_table_with_emptystruct@@Base+0x1ac>
   15d34:	b	15d10 <test_typed_table_with_emptystruct@@Base+0x14c>
   15d38:	andeq	pc, r1, r8, asr r2	; <UNPREDICTABLE>
   15d3c:	andeq	r3, r3, r0, ror r0
   15d40:	andeq	pc, r1, sp, asr r2	; <UNPREDICTABLE>
   15d44:	andeq	r3, r1, r8, lsl r0
   15d48:	andeq	pc, r1, fp, ror r2	; <UNPREDICTABLE>
   15d4c:	muleq	r1, sl, r2
   15d50:	ldrhlt	r3, [sp], #118	; 0x76
   15d54:			; <UNDEFINED> instruction: 0x0001f2b6
   15d58:	ldrdeq	pc, [r1], -fp
   15d5c:	strdeq	pc, [r1], -r3
   15d60:	andeq	pc, r1, r3, lsl #6
   15d64:	andeq	pc, r1, sp, lsr #6
   15d68:	andeq	pc, r1, fp, asr #6
   15d6c:	andeq	pc, r1, r0, ror r3	; <UNPREDICTABLE>
   15d70:	andeq	pc, r1, r8, lsr #7

00015d74 <verify_monster@@Base>:
   15d74:	ldr	r3, [pc, #916]	; 16110 <verify_monster@@Base+0x39c>
   15d78:	push	{r4, r5, r6, r7, r8, r9, lr}
   15d7c:	mov	r5, r0
   15d80:	vpush	{d8-d9}
   15d84:	sub	sp, sp, #84	; 0x54
   15d88:	add	r4, sp, #55	; 0x37
   15d8c:	add	r2, sp, #20
   15d90:	bic	r4, r4, #15
   15d94:	add	lr, r3, #16
   15d98:	ldr	r0, [r3]
   15d9c:	mov	ip, r2
   15da0:	add	r3, r3, #8
   15da4:	ldr	r1, [r3, #-4]
   15da8:	cmp	r3, lr
   15dac:	stmia	ip!, {r0, r1}
   15db0:	mov	r2, ip
   15db4:	bne	15d98 <verify_monster@@Base+0x24>
   15db8:	ldr	r0, [r3]
   15dbc:	add	ip, sp, #4
   15dc0:	ldr	r3, [pc, #844]	; 16114 <verify_monster@@Base+0x3a0>
   15dc4:	str	r0, [r2]
   15dc8:	ldm	r3, {r0, r1, r2, r3}
   15dcc:	stm	ip, {r0, r1, r2, r3}
   15dd0:	mov	r0, r5
   15dd4:	ldr	r1, [pc, #828]	; 16118 <verify_monster@@Base+0x3a4>
   15dd8:	bl	12d00 <_start@@Base+0xfc>
   15ddc:	cmp	r0, #0
   15de0:	ldreq	r0, [pc, #820]	; 1611c <verify_monster@@Base+0x3a8>
   15de4:	beq	15ebc <verify_monster@@Base+0x148>
   15de8:	mov	r0, r5
   15dec:	ldr	r1, [pc, #812]	; 16120 <verify_monster@@Base+0x3ac>
   15df0:	bl	12d00 <_start@@Base+0xfc>
   15df4:	cmp	r0, #0
   15df8:	ldreq	r0, [pc, #804]	; 16124 <verify_monster@@Base+0x3b0>
   15dfc:	beq	15ebc <verify_monster@@Base+0x148>
   15e00:	mov	r0, r5
   15e04:	ldr	r1, [pc, #796]	; 16128 <verify_monster@@Base+0x3b4>
   15e08:	bl	12d00 <_start@@Base+0xfc>
   15e0c:	cmp	r0, #0
   15e10:	ldrne	r0, [pc, #788]	; 1612c <verify_monster@@Base+0x3b8>
   15e14:	bne	15ebc <verify_monster@@Base+0x148>
   15e18:	mov	r0, r5
   15e1c:	ldr	r1, [pc, #756]	; 16118 <verify_monster@@Base+0x3a4>
   15e20:	bl	12d00 <_start@@Base+0xfc>
   15e24:	cmp	r0, #0
   15e28:	ldreq	r0, [pc, #768]	; 16130 <verify_monster@@Base+0x3bc>
   15e2c:	beq	15ebc <verify_monster@@Base+0x148>
   15e30:	mov	r0, r5
   15e34:	bl	12d6c <_start@@Base+0x168>
   15e38:	subs	r5, r0, #0
   15e3c:	ldreq	r0, [pc, #752]	; 16134 <verify_monster@@Base+0x3c0>
   15e40:	beq	15ebc <verify_monster@@Base+0x148>
   15e44:	bl	1325c <_start@@Base+0x658>
   15e48:	cmp	r0, #80	; 0x50
   15e4c:	ldrne	r0, [pc, #740]	; 16138 <verify_monster@@Base+0x3c4>
   15e50:	bne	15ebc <verify_monster@@Base+0x148>
   15e54:	mov	r0, r5
   15e58:	bl	13358 <_start@@Base+0x754>
   15e5c:	subs	r6, r0, #0
   15e60:	ldreq	r0, [pc, #724]	; 1613c <verify_monster@@Base+0x3c8>
   15e64:	beq	15ebc <verify_monster@@Base+0x148>
   15e68:	tst	r6, #15
   15e6c:	beq	15e78 <verify_monster@@Base+0x104>
   15e70:	ldr	r0, [pc, #712]	; 16140 <verify_monster@@Base+0x3cc>
   15e74:	bl	129b8 <puts@plt>
   15e78:	vldr	s16, [pc, #644]	; 16104 <verify_monster@@Base+0x390>
   15e7c:	vldr	s15, [r6, #8]
   15e80:	vcmp.f32	s15, s16
   15e84:	vmrs	APSR_nzcv, fpscr
   15e88:	ldrne	r0, [pc, #692]	; 16144 <verify_monster@@Base+0x3d0>
   15e8c:	bne	15ebc <verify_monster@@Base+0x148>
   15e90:	vldr	s18, [pc, #624]	; 16108 <verify_monster@@Base+0x394>
   15e94:	vldr	s15, [r6]
   15e98:	vcmp.f32	s15, s18
   15e9c:	vmrs	APSR_nzcv, fpscr
   15ea0:	bne	15eb8 <verify_monster@@Base+0x144>
   15ea4:	vldr	s17, [pc, #608]	; 1610c <verify_monster@@Base+0x398>
   15ea8:	vldr	s15, [r6, #4]
   15eac:	vcmp.f32	s15, s17
   15eb0:	vmrs	APSR_nzcv, fpscr
   15eb4:	beq	15ec4 <verify_monster@@Base+0x150>
   15eb8:	ldr	r0, [pc, #648]	; 16148 <verify_monster@@Base+0x3d4>
   15ebc:	bl	129b8 <puts@plt>
   15ec0:	b	163e0 <verify_monster@@Base+0x66c>
   15ec4:	mov	r2, #20
   15ec8:	mov	r1, #0
   15ecc:	add	r0, r4, #12
   15ed0:	bl	12a0c <memset@plt>
   15ed4:	vldr	d7, [r6, #16]
   15ed8:	vstr	s18, [r4]
   15edc:	ldrb	r3, [r6, #24]
   15ee0:	vstr	s17, [r4, #4]
   15ee4:	vstr	s16, [r4, #8]
   15ee8:	vcmp.f64	d7, #0.0
   15eec:	vstr	d7, [r4, #16]
   15ef0:	strb	r3, [r4, #24]
   15ef4:	ldrh	r3, [r6, #26]
   15ef8:	strh	r3, [r4, #26]
   15efc:	vmrs	APSR_nzcv, fpscr
   15f00:	ldrb	r3, [r6, #28]
   15f04:	strb	r3, [r4, #28]
   15f08:	bne	15f24 <verify_monster@@Base+0x1b0>
   15f0c:	mov	r2, #4
   15f10:	ldr	r1, [pc, #564]	; 1614c <verify_monster@@Base+0x3d8>
   15f14:	add	r0, r6, #26
   15f18:	bl	12994 <memcmp@plt>
   15f1c:	cmp	r0, #0
   15f20:	beq	15f2c <verify_monster@@Base+0x1b8>
   15f24:	ldr	r0, [pc, #548]	; 16150 <verify_monster@@Base+0x3dc>
   15f28:	b	15ebc <verify_monster@@Base+0x148>
   15f2c:	mov	r0, r5
   15f30:	bl	13944 <_start@@Base+0xd40>
   15f34:	subs	r4, r0, #0
   15f38:	beq	15f4c <verify_monster@@Base+0x1d8>
   15f3c:	ldr	r1, [pc, #528]	; 16154 <verify_monster@@Base+0x3e0>
   15f40:	bl	12964 <strcmp@plt>
   15f44:	cmp	r0, #0
   15f48:	beq	15f54 <verify_monster@@Base+0x1e0>
   15f4c:	ldr	r0, [pc, #516]	; 16158 <verify_monster@@Base+0x3e4>
   15f50:	b	15ebc <verify_monster@@Base+0x148>
   15f54:	ldr	r3, [r4, #-4]
   15f58:	cmp	r3, #9
   15f5c:	ldrne	r0, [pc, #504]	; 1615c <verify_monster@@Base+0x3e8>
   15f60:	bne	15ebc <verify_monster@@Base+0x148>
   15f64:	ldr	r6, [r5]
   15f68:	sub	r6, r5, r6
   15f6c:	ldrh	r8, [r6]
   15f70:	cmp	r8, #17
   15f74:	bls	15f90 <verify_monster@@Base+0x21c>
   15f78:	ldrh	r3, [r6, #16]
   15f7c:	cmp	r3, #0
   15f80:	beq	15f90 <verify_monster@@Base+0x21c>
   15f84:	ldrsb	r3, [r5, r3]
   15f88:	cmp	r3, #2
   15f8c:	beq	15f98 <verify_monster@@Base+0x224>
   15f90:	ldr	r0, [pc, #456]	; 16160 <verify_monster@@Base+0x3ec>
   15f94:	b	15ebc <verify_monster@@Base+0x148>
   15f98:	mov	r0, r5
   15f9c:	bl	133b0 <_start@@Base+0x7ac>
   15fa0:	subs	r7, r0, #0
   15fa4:	beq	15fb8 <verify_monster@@Base+0x244>
   15fa8:	ldr	r3, [r7, #-4]
   15fac:	cmp	r3, #10
   15fb0:	moveq	r4, #0
   15fb4:	beq	15fc0 <verify_monster@@Base+0x24c>
   15fb8:	ldr	r0, [pc, #420]	; 16164 <verify_monster@@Base+0x3f0>
   15fbc:	b	15ebc <verify_monster@@Base+0x148>
   15fc0:	mov	r1, r4
   15fc4:	mov	r0, r7
   15fc8:	bl	13414 <_start@@Base+0x810>
   15fcc:	cmp	r0, r4
   15fd0:	beq	15fe4 <verify_monster@@Base+0x270>
   15fd4:	ldr	r0, [pc, #396]	; 16168 <verify_monster@@Base+0x3f4>
   15fd8:	mov	r1, r4
   15fdc:	bl	12970 <printf@plt>
   15fe0:	b	163e0 <verify_monster@@Base+0x66c>
   15fe4:	add	r4, r4, #1
   15fe8:	cmp	r4, #10
   15fec:	bne	15fc0 <verify_monster@@Base+0x24c>
   15ff0:	mov	r0, r5
   15ff4:	bl	1357c <_start@@Base+0x978>
   15ff8:	cmp	r0, #150	; 0x96
   15ffc:	ldrne	r0, [pc, #360]	; 1616c <verify_monster@@Base+0x3f8>
   16000:	bne	15ebc <verify_monster@@Base+0x148>
   16004:	mov	r0, r5
   16008:	bl	135d8 <_start@@Base+0x9d4>
   1600c:	subs	r4, r0, #0
   16010:	ldrne	r0, [pc, #344]	; 16170 <verify_monster@@Base+0x3fc>
   16014:	bne	15ebc <verify_monster@@Base+0x148>
   16018:	mov	r0, r5
   1601c:	bl	132b8 <_start@@Base+0x6b4>
   16020:	cmp	r0, #0
   16024:	ldreq	r0, [pc, #328]	; 16174 <verify_monster@@Base+0x400>
   16028:	beq	15ebc <verify_monster@@Base+0x148>
   1602c:	mov	r0, r5
   16030:	bl	13308 <_start@@Base+0x704>
   16034:	cmp	r0, #0
   16038:	ldreq	r0, [pc, #312]	; 16178 <verify_monster@@Base+0x404>
   1603c:	beq	15ebc <verify_monster@@Base+0x148>
   16040:	mov	r0, r5
   16044:	bl	13628 <_start@@Base+0xa24>
   16048:	subs	r9, r0, #0
   1604c:	beq	16060 <verify_monster@@Base+0x2ec>
   16050:	ldr	r3, [r9, #-4]
   16054:	cmp	r3, #5
   16058:	addeq	r7, sp, #20
   1605c:	beq	16068 <verify_monster@@Base+0x2f4>
   16060:	ldr	r0, [pc, #276]	; 1617c <verify_monster@@Base+0x408>
   16064:	b	15ebc <verify_monster@@Base+0x148>
   16068:	mov	r1, r4
   1606c:	mov	r0, r9
   16070:	bl	1368c <_start@@Base+0xa88>
   16074:	cmp	r0, #0
   16078:	ldrsh	r2, [r7]
   1607c:	moveq	r3, r0
   16080:	ldrshne	r3, [r0]
   16084:	cmp	r2, r3
   16088:	beq	16098 <verify_monster@@Base+0x324>
   1608c:	mov	r1, r4
   16090:	ldr	r0, [pc, #232]	; 16180 <verify_monster@@Base+0x40c>
   16094:	b	15fdc <verify_monster@@Base+0x268>
   16098:	cmp	r0, #0
   1609c:	ldrsb	r3, [r7, #2]
   160a0:	ldrsbne	r0, [r0, #2]
   160a4:	cmp	r3, r0
   160a8:	bne	1608c <verify_monster@@Base+0x318>
   160ac:	add	r4, r4, #1
   160b0:	add	r7, r7, #4
   160b4:	cmp	r4, #5
   160b8:	bne	16068 <verify_monster@@Base+0x2f4>
   160bc:	mov	r0, r5
   160c0:	bl	137e0 <_start@@Base+0xbdc>
   160c4:	subs	r7, r0, #0
   160c8:	beq	160d8 <verify_monster@@Base+0x364>
   160cc:	ldr	r3, [r7, #-4]
   160d0:	cmp	r3, #8
   160d4:	beq	160e0 <verify_monster@@Base+0x36c>
   160d8:	ldr	r0, [pc, #164]	; 16184 <verify_monster@@Base+0x410>
   160dc:	b	15ebc <verify_monster@@Base+0x148>
   160e0:	mov	r1, r4
   160e4:	bl	13844 <_start@@Base+0xc40>
   160e8:	subs	r4, r0, #0
   160ec:	bne	16224 <verify_monster@@Base+0x4b0>
   160f0:	ldr	r3, [pc, #144]	; 16188 <verify_monster@@Base+0x414>
   160f4:	movw	r2, #662	; 0x296
   160f8:	ldr	r1, [pc, #140]	; 1618c <verify_monster@@Base+0x418>
   160fc:	ldr	r0, [pc, #140]	; 16190 <verify_monster@@Base+0x41c>
   16100:	bl	12a60 <__assert_fail@plt>
   16104:	subgt	ip, ip, sp, asr #25
   16108:	svccc	0x00800000
   1610c:	andmi	r0, r0, r0
   16110:	andeq	lr, r1, r0, lsr r5
   16114:	andeq	lr, r1, r4, asr #10
   16118:	andeq	lr, r1, lr, ror #15
   1611c:	andeq	pc, r1, r4, lsl #8
   16120:			; <UNDEFINED> instruction: 0x0001f3bd
   16124:	andeq	pc, r1, r5, asr #7
   16128:	strdeq	pc, [r1], -r6
   1612c:	strdeq	pc, [r1], -fp
   16130:	andeq	pc, r1, sp, lsr #8
   16134:	andeq	lr, r1, ip, ror sp
   16138:	andeq	lr, r1, r3, asr lr
   1613c:	andeq	pc, r1, pc, asr r4	; <UNPREDICTABLE>
   16140:	andeq	pc, r1, r2, ror r4	; <UNPREDICTABLE>
   16144:	muleq	r1, r9, r4
   16148:			; <UNDEFINED> instruction: 0x0001f4ba
   1614c:	andeq	lr, r1, r4, asr r5
   16150:	ldrdeq	pc, [r1], -r0
   16154:	andeq	lr, r1, r9, ror #31
   16158:	strdeq	pc, [r1], -r4
   1615c:	andeq	pc, r1, r8, lsl #10
   16160:	andeq	pc, r1, r3, lsr #10
   16164:	andeq	pc, r1, r1, asr #10
   16168:	andeq	pc, r1, sp, asr r5	; <UNPREDICTABLE>
   1616c:	andeq	pc, r1, sl, ror r5	; <UNPREDICTABLE>
   16170:	andeq	pc, r1, fp, lsl #11
   16174:	muleq	r1, pc, r5	; <UNPREDICTABLE>
   16178:	muleq	r1, r2, lr
   1617c:			; <UNDEFINED> instruction: 0x0001f5bf
   16180:	andeq	pc, r1, r5, ror #11
   16184:	andeq	pc, r1, sp, lsl #12
   16188:			; <UNDEFINED> instruction: 0x0001e5b8
   1618c:	andeq	pc, r1, lr, lsr #12
   16190:	andeq	pc, r1, pc, ror r6	; <UNPREDICTABLE>
   16194:	andeq	pc, r1, r3, lsl #13
   16198:	muleq	r1, fp, r6
   1619c:	ldrdeq	pc, [r1], -r0
   161a0:	strdeq	pc, [r1], -r2
   161a4:	andeq	pc, r1, r4, lsl r7	; <UNPREDICTABLE>
   161a8:	andeq	pc, r1, r9, lsr r7	; <UNPREDICTABLE>
   161ac:	andeq	pc, r1, sp, asr r7	; <UNPREDICTABLE>
   161b0:	andeq	r0, r2, r9, lsr #1
   161b4:	andeq	pc, r1, pc, ror r7	; <UNPREDICTABLE>
   161b8:	andeq	r0, r2, r4, lsl #1
   161bc:	andeq	pc, r1, r4, lsr #15
   161c0:	andeq	pc, r1, r9, asr #15
   161c4:	strdeq	pc, [r1], -r3
   161c8:	strdeq	pc, [r1], -r9
   161cc:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   161d0:	andeq	lr, r1, r7, asr #11
   161d4:	andeq	pc, r1, sl, lsr #16
   161d8:	andeq	pc, r1, sl, asr #16
   161dc:	andeq	pc, r1, r1, asr r8	; <UNPREDICTABLE>
   161e0:	andeq	pc, r1, r8, ror #16
   161e4:	andeq	pc, r1, r2, lsl #17
   161e8:	andeq	pc, r1, r1, lsr #17
   161ec:	andeq	pc, r1, r0, asr #17
   161f0:	andeq	pc, r1, r9, ror #17
   161f4:	andeq	pc, r1, ip, lsl r9	; <UNPREDICTABLE>
   161f8:	andeq	pc, r1, r9, lsl #18
   161fc:	andeq	pc, r1, r6, lsr #18
   16200:	andeq	pc, r1, sl, asr #18
   16204:	muleq	r1, r3, r6
   16208:	andeq	pc, r1, ip, lsl #19
   1620c:	andeq	pc, r1, r5, asr #19
   16210:	ldrdeq	pc, [r1], -r9
   16214:	andeq	lr, r1, sl, asr #11
   16218:	strdeq	lr, [r1], -r3
   1621c:	andeq	lr, r1, r5, asr r8
   16220:	strdeq	pc, [r1], -r7
   16224:	bl	13944 <_start@@Base+0xd40>
   16228:	ldr	r1, [pc, #-44]	; 16204 <verify_monster@@Base+0x490>
   1622c:	bl	12964 <strcmp@plt>
   16230:	cmp	r0, #0
   16234:	ldrne	r0, [pc, #-168]	; 16194 <verify_monster@@Base+0x420>
   16238:	bne	163dc <verify_monster@@Base+0x668>
   1623c:	mov	r1, #1
   16240:	mov	r0, r7
   16244:	bl	13844 <_start@@Base+0xc40>
   16248:	cmp	r4, r0
   1624c:	ldrne	r0, [pc, #-188]	; 16198 <verify_monster@@Base+0x424>
   16250:	bne	15ebc <verify_monster@@Base+0x148>
   16254:	bl	13944 <_start@@Base+0xd40>
   16258:	ldr	r1, [pc, #-92]	; 16204 <verify_monster@@Base+0x490>
   1625c:	mov	r4, r0
   16260:	bl	12964 <strcmp@plt>
   16264:	cmp	r0, #0
   16268:	movne	r1, r4
   1626c:	ldrne	r0, [pc, #-216]	; 1619c <verify_monster@@Base+0x428>
   16270:	bne	15fdc <verify_monster@@Base+0x268>
   16274:	mov	r1, #2
   16278:	mov	r0, r7
   1627c:	bl	13844 <_start@@Base+0xc40>
   16280:	bl	13944 <_start@@Base+0xd40>
   16284:	ldr	r1, [pc, #-212]	; 161b8 <verify_monster@@Base+0x444>
   16288:	mov	r4, r0
   1628c:	bl	12964 <strcmp@plt>
   16290:	subs	r1, r0, #0
   16294:	movne	r1, r4
   16298:	ldrne	r0, [pc, #-256]	; 161a0 <verify_monster@@Base+0x42c>
   1629c:	bne	15fdc <verify_monster@@Base+0x268>
   162a0:	mov	r0, r7
   162a4:	bl	13844 <_start@@Base+0xc40>
   162a8:	bl	13944 <_start@@Base+0xd40>
   162ac:	ldr	r1, [pc, #-260]	; 161b0 <verify_monster@@Base+0x43c>
   162b0:	mov	r4, r0
   162b4:	bl	12964 <strcmp@plt>
   162b8:	cmp	r0, #0
   162bc:	movne	r1, r4
   162c0:	ldrne	r0, [pc, #-292]	; 161a4 <verify_monster@@Base+0x430>
   162c4:	bne	15fdc <verify_monster@@Base+0x268>
   162c8:	mov	r1, #3
   162cc:	mov	r0, r7
   162d0:	bl	13844 <_start@@Base+0xc40>
   162d4:	bl	13944 <_start@@Base+0xd40>
   162d8:	ldr	r1, [pc, #-220]	; 16204 <verify_monster@@Base+0x490>
   162dc:	mov	r4, r0
   162e0:	bl	12964 <strcmp@plt>
   162e4:	cmp	r0, #0
   162e8:	movne	r1, r4
   162ec:	ldrne	r0, [pc, #-332]	; 161a8 <verify_monster@@Base+0x434>
   162f0:	bne	15fdc <verify_monster@@Base+0x268>
   162f4:	mov	r1, #4
   162f8:	mov	r0, r7
   162fc:	bl	13844 <_start@@Base+0xc40>
   16300:	bl	13944 <_start@@Base+0xd40>
   16304:	ldr	r1, [pc, #-340]	; 161b8 <verify_monster@@Base+0x444>
   16308:	mov	r4, r0
   1630c:	bl	12964 <strcmp@plt>
   16310:	cmp	r0, #0
   16314:	movne	r1, r4
   16318:	ldrne	r0, [pc, #-372]	; 161ac <verify_monster@@Base+0x438>
   1631c:	bne	15fdc <verify_monster@@Base+0x268>
   16320:	mov	r1, #6
   16324:	mov	r0, r7
   16328:	bl	13844 <_start@@Base+0xc40>
   1632c:	bl	13944 <_start@@Base+0xd40>
   16330:	ldr	r1, [pc, #-392]	; 161b0 <verify_monster@@Base+0x43c>
   16334:	mov	r4, r0
   16338:	bl	12964 <strcmp@plt>
   1633c:	cmp	r0, #0
   16340:	movne	r1, r4
   16344:	ldrne	r0, [pc, #-408]	; 161b4 <verify_monster@@Base+0x440>
   16348:	bne	15fdc <verify_monster@@Base+0x268>
   1634c:	mov	r1, #7
   16350:	mov	r0, r7
   16354:	bl	13844 <_start@@Base+0xc40>
   16358:	bl	13944 <_start@@Base+0xd40>
   1635c:	ldr	r1, [pc, #-428]	; 161b8 <verify_monster@@Base+0x444>
   16360:	mov	r4, r0
   16364:	bl	12964 <strcmp@plt>
   16368:	subs	r7, r0, #0
   1636c:	movne	r1, r4
   16370:	ldrne	r0, [pc, #-444]	; 161bc <verify_monster@@Base+0x448>
   16374:	bne	15fdc <verify_monster@@Base+0x268>
   16378:	mov	r0, r5
   1637c:	bl	136cc <_start@@Base+0xac8>
   16380:	subs	r4, r0, #0
   16384:	beq	16394 <verify_monster@@Base+0x620>
   16388:	ldr	r3, [r4, #-4]
   1638c:	cmp	r3, #3
   16390:	beq	1639c <verify_monster@@Base+0x628>
   16394:	ldr	r0, [pc, #-476]	; 161c0 <verify_monster@@Base+0x44c>
   16398:	b	15ebc <verify_monster@@Base+0x148>
   1639c:	mov	r1, r7
   163a0:	bl	13730 <_start@@Base+0xb2c>
   163a4:	ldr	r1, [pc, #-488]	; 161c4 <verify_monster@@Base+0x450>
   163a8:	bl	12964 <strcmp@plt>
   163ac:	cmp	r0, #0
   163b0:	ldrne	r0, [pc, #-496]	; 161c8 <verify_monster@@Base+0x454>
   163b4:	bne	15ebc <verify_monster@@Base+0x148>
   163b8:	mov	r1, #1
   163bc:	mov	r0, r4
   163c0:	bl	13730 <_start@@Base+0xb2c>
   163c4:	subs	r3, r0, #0
   163c8:	beq	163d8 <verify_monster@@Base+0x664>
   163cc:	ldr	r2, [r3, #-4]
   163d0:	cmp	r2, #2
   163d4:	beq	163f4 <verify_monster@@Base+0x680>
   163d8:	ldr	r0, [pc, #-532]	; 161cc <verify_monster@@Base+0x458>
   163dc:	bl	12970 <printf@plt>
   163e0:	mvn	r4, #0
   163e4:	mov	r0, r4
   163e8:	add	sp, sp, #84	; 0x54
   163ec:	vpop	{d8-d9}
   163f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   163f4:	ldr	r1, [pc, #-556]	; 161d0 <verify_monster@@Base+0x45c>
   163f8:	bl	12994 <memcmp@plt>
   163fc:	cmp	r0, #0
   16400:	ldrne	r0, [pc, #-564]	; 161d4 <verify_monster@@Base+0x460>
   16404:	bne	15ebc <verify_monster@@Base+0x148>
   16408:	mov	r1, #2
   1640c:	mov	r0, r4
   16410:	bl	13730 <_start@@Base+0xb2c>
   16414:	ldr	r1, [pc, #-580]	; 161d8 <verify_monster@@Base+0x464>
   16418:	bl	12964 <strcmp@plt>
   1641c:	subs	r4, r0, #0
   16420:	ldrne	r0, [pc, #-588]	; 161dc <verify_monster@@Base+0x468>
   16424:	bne	15ebc <verify_monster@@Base+0x148>
   16428:	cmp	r8, #53	; 0x35
   1642c:	bls	1643c <verify_monster@@Base+0x6c8>
   16430:	ldrh	r3, [r6, #52]	; 0x34
   16434:	cmp	r3, #0
   16438:	bne	16444 <verify_monster@@Base+0x6d0>
   1643c:	ldr	r0, [pc, #-612]	; 161e0 <verify_monster@@Base+0x46c>
   16440:	b	15ebc <verify_monster@@Base+0x148>
   16444:	mov	r0, r5
   16448:	bl	1377c <_start@@Base+0xb78>
   1644c:	cmp	r0, #0
   16450:	beq	16468 <verify_monster@@Base+0x6f4>
   16454:	ldr	r3, [r0, #-4]
   16458:	cmp	r3, #4
   1645c:	addeq	r3, sp, #4
   16460:	moveq	r1, r4
   16464:	beq	16470 <verify_monster@@Base+0x6fc>
   16468:	ldr	r0, [pc, #-652]	; 161e4 <verify_monster@@Base+0x470>
   1646c:	b	15ebc <verify_monster@@Base+0x148>
   16470:	ldrb	ip, [r0, r1]
   16474:	ldr	r2, [r3], #4
   16478:	cmp	ip, r2
   1647c:	ldrne	r0, [pc, #-668]	; 161e8 <verify_monster@@Base+0x474>
   16480:	bne	15fdc <verify_monster@@Base+0x268>
   16484:	add	r1, r1, #1
   16488:	cmp	r1, #4
   1648c:	bne	16470 <verify_monster@@Base+0x6fc>
   16490:	mov	r0, r5
   16494:	bl	1388c <_start@@Base+0xc88>
   16498:	cmp	r0, #1
   1649c:	ldrne	r0, [pc, #-696]	; 161ec <verify_monster@@Base+0x478>
   164a0:	bne	15ebc <verify_monster@@Base+0x148>
   164a4:	mov	r0, r5
   164a8:	bl	138e4 <_start@@Base+0xce0>
   164ac:	bl	13944 <_start@@Base+0xd40>
   164b0:	ldr	r1, [pc, #-692]	; 16204 <verify_monster@@Base+0x490>
   164b4:	bl	12964 <strcmp@plt>
   164b8:	cmp	r0, #0
   164bc:	ldrne	r0, [pc, #-724]	; 161f0 <verify_monster@@Base+0x47c>
   164c0:	bne	15ebc <verify_monster@@Base+0x148>
   164c4:	ldrh	r4, [r6, #28]
   164c8:	cmp	r4, #0
   164cc:	addne	r3, r5, r4
   164d0:	ldrne	r4, [r5, r4]
   164d4:	addne	r4, r3, r4
   164d8:	mov	r0, r4
   164dc:	bl	13944 <_start@@Base+0xd40>
   164e0:	ldr	r1, [pc, #-756]	; 161f4 <verify_monster@@Base+0x480>
   164e4:	bl	12964 <strcmp@plt>
   164e8:	cmp	r0, #0
   164ec:	ldrne	r0, [pc, #-764]	; 161f8 <verify_monster@@Base+0x484>
   164f0:	bne	15ebc <verify_monster@@Base+0x148>
   164f4:	mov	r0, r4
   164f8:	bl	1388c <_start@@Base+0xc88>
   164fc:	cmp	r0, #0
   16500:	ldrne	r0, [pc, #-780]	; 161fc <verify_monster@@Base+0x488>
   16504:	bne	15ebc <verify_monster@@Base+0x148>
   16508:	mov	r0, r4
   1650c:	bl	137e0 <_start@@Base+0xbdc>
   16510:	cmp	r0, #0
   16514:	ldrne	r1, [r0, #-4]
   16518:	moveq	r1, r0
   1651c:	sub	r1, r1, #1
   16520:	bl	13844 <_start@@Base+0xc40>
   16524:	mov	r4, r0
   16528:	bl	1388c <_start@@Base+0xc88>
   1652c:	cmp	r0, #1
   16530:	ldrne	r0, [pc, #-824]	; 16200 <verify_monster@@Base+0x48c>
   16534:	bne	15ebc <verify_monster@@Base+0x148>
   16538:	mov	r0, r4
   1653c:	bl	138e4 <_start@@Base+0xce0>
   16540:	bl	13944 <_start@@Base+0xd40>
   16544:	ldr	r1, [pc, #-840]	; 16204 <verify_monster@@Base+0x490>
   16548:	bl	12964 <strcmp@plt>
   1654c:	subs	r4, r0, #0
   16550:	ldrne	r0, [pc, #-848]	; 16208 <verify_monster@@Base+0x494>
   16554:	bne	15ebc <verify_monster@@Base+0x148>
   16558:	ldrh	r3, [r6, #34]	; 0x22
   1655c:	cmp	r3, #0
   16560:	beq	16570 <verify_monster@@Base+0x7fc>
   16564:	ldrb	r3, [r5, r3]
   16568:	cmp	r3, #0
   1656c:	beq	16578 <verify_monster@@Base+0x804>
   16570:	ldr	r0, [pc, #-876]	; 1620c <verify_monster@@Base+0x498>
   16574:	b	15ebc <verify_monster@@Base+0x148>
   16578:	ldrh	r3, [r6, #32]
   1657c:	cmp	r3, #0
   16580:	ldreq	r0, [pc, #-888]	; 16210 <verify_monster@@Base+0x49c>
   16584:	beq	15ebc <verify_monster@@Base+0x148>
   16588:	mov	r0, r5
   1658c:	bl	13d98 <_start@@Base+0x1194>
   16590:	cmp	r0, #0
   16594:	bne	165ac <verify_monster@@Base+0x838>
   16598:	ldr	r3, [pc, #-908]	; 16214 <verify_monster@@Base+0x4a0>
   1659c:	movw	r2, #607	; 0x25f
   165a0:	ldr	r1, [pc, #-912]	; 16218 <verify_monster@@Base+0x4a4>
   165a4:	ldr	r0, [pc, #-912]	; 1621c <verify_monster@@Base+0x4a8>
   165a8:	b	16100 <verify_monster@@Base+0x38c>
   165ac:	ldr	r3, [r0]
   165b0:	sub	r0, r0, r3
   165b4:	ldrh	r3, [r0]
   165b8:	cmp	r3, #5
   165bc:	bls	163e4 <verify_monster@@Base+0x670>
   165c0:	ldrh	r2, [r0, #4]
   165c4:	cmp	r2, #0
   165c8:	bne	165f4 <verify_monster@@Base+0x880>
   165cc:	cmp	r3, #7
   165d0:	bls	163e4 <verify_monster@@Base+0x670>
   165d4:	ldrh	r2, [r0, #6]
   165d8:	cmp	r2, #0
   165dc:	bne	165f4 <verify_monster@@Base+0x880>
   165e0:	cmp	r3, #9
   165e4:	bls	163e4 <verify_monster@@Base+0x670>
   165e8:	ldrh	r3, [r0, #8]
   165ec:	cmp	r3, #0
   165f0:	beq	163e4 <verify_monster@@Base+0x670>
   165f4:	ldr	r0, [pc, #-988]	; 16220 <verify_monster@@Base+0x4ac>
   165f8:	b	15ebc <verify_monster@@Base+0x148>

000165fc <gen_monster@@Base>:
   165fc:	ldr	r2, [pc, #1340]	; 16b40 <gen_monster@@Base+0x544>
   16600:	push	{r4, r5, r6, lr}
   16604:	mov	r4, r0
   16608:	mov	r5, r1
   1660c:	sub	sp, sp, #40	; 0x28
   16610:	add	r3, sp, #16
   16614:	ldr	r0, [r2]
   16618:	ldr	r1, [r2, #4]
   1661c:	ldrh	r2, [r2, #8]
   16620:	stmia	r3!, {r0, r1}
   16624:	mov	r0, r4
   16628:	strh	r2, [r3]
   1662c:	ldr	r3, [pc, #1296]	; 16b44 <gen_monster@@Base+0x548>
   16630:	str	r3, [sp, #4]
   16634:	bl	1ab18 <flatcc_builder_reset@@Base>
   16638:	cmp	r5, #0
   1663c:	beq	167a4 <gen_monster@@Base+0x1a8>
   16640:	mov	r3, #2
   16644:	mov	r2, #0
   16648:	ldr	r1, [pc, #1272]	; 16b48 <gen_monster@@Base+0x54c>
   1664c:	mov	r0, r4
   16650:	bl	1b088 <flatcc_builder_start_buffer@@Base>
   16654:	cmp	r0, #0
   16658:	bne	16664 <gen_monster@@Base+0x68>
   1665c:	mov	r0, r4
   16660:	bl	12e6c <_start@@Base+0x268>
   16664:	mov	r1, #80	; 0x50
   16668:	mov	r0, r4
   1666c:	bl	14188 <_start@@Base+0x1584>
   16670:	mov	r2, #32
   16674:	mov	r3, #16
   16678:	mov	r1, #0
   1667c:	mov	r0, r4
   16680:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   16684:	mov	r3, #1065353216	; 0x3f800000
   16688:	ldr	r1, [pc, #1212]	; 16b4c <gen_monster@@Base+0x550>
   1668c:	str	r3, [r0]
   16690:	mov	r3, #1073741824	; 0x40000000
   16694:	str	r3, [r0, #4]
   16698:	ldr	r3, [pc, #1200]	; 16b50 <gen_monster@@Base+0x554>
   1669c:	str	r3, [r0, #8]
   166a0:	mov	r0, r4
   166a4:	bl	1313c <_start@@Base+0x538>
   166a8:	mov	r3, #1
   166ac:	mov	r1, #6
   166b0:	mov	r2, r3
   166b4:	mov	r0, r4
   166b8:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   166bc:	cmp	r0, #0
   166c0:	mov	r2, #10
   166c4:	movne	r3, #2
   166c8:	add	r1, sp, #16
   166cc:	strbne	r3, [r0]
   166d0:	mov	r0, r4
   166d4:	bl	14fe4 <_start@@Base+0x23e0>
   166d8:	mov	r0, r4
   166dc:	bl	13158 <_start@@Base+0x554>
   166e0:	mov	r1, #1
   166e4:	mov	r0, r4
   166e8:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   166ec:	mov	r3, #16
   166f0:	mov	r1, #2
   166f4:	strh	r3, [r0]
   166f8:	mov	r3, #32
   166fc:	strb	r3, [r0, #2]
   16700:	mov	r0, r4
   16704:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   16708:	mov	r3, #48	; 0x30
   1670c:	mov	r1, #1
   16710:	strh	r3, [r0]
   16714:	mov	r3, #64	; 0x40
   16718:	strb	r3, [r0, #2]
   1671c:	mov	r3, #80	; 0x50
   16720:	strh	r3, [r0, #4]
   16724:	mov	r3, #96	; 0x60
   16728:	strb	r3, [r0, #6]
   1672c:	mov	r0, r4
   16730:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   16734:	cmp	r0, #0
   16738:	mov	r1, sp
   1673c:	movne	r3, #112	; 0x70
   16740:	strhne	r3, [r0]
   16744:	mvnne	r3, #127	; 0x7f
   16748:	strbne	r3, [r0, #2]
   1674c:	mov	r3, #400	; 0x190
   16750:	mov	r0, r4
   16754:	strh	r3, [sp]
   16758:	mvn	r3, #110	; 0x6e
   1675c:	strb	r3, [sp, #2]
   16760:	bl	13168 <_start@@Base+0x564>
   16764:	mov	r1, sp
   16768:	mov	r0, r4
   1676c:	bl	13168 <_start@@Base+0x564>
   16770:	mov	r1, sp
   16774:	mov	r0, r4
   16778:	bl	13168 <_start@@Base+0x564>
   1677c:	mov	r0, r4
   16780:	bl	1c11c <flatcc_builder_vector_count@@Base>
   16784:	cmp	r0, #7
   16788:	mov	r5, r0
   1678c:	beq	167b0 <gen_monster@@Base+0x1b4>
   16790:	ldr	r3, [pc, #956]	; 16b54 <gen_monster@@Base+0x558>
   16794:	movw	r2, #881	; 0x371
   16798:	ldr	r1, [pc, #952]	; 16b58 <gen_monster@@Base+0x55c>
   1679c:	ldr	r0, [pc, #952]	; 16b5c <gen_monster@@Base+0x560>
   167a0:	bl	12a60 <__assert_fail@plt>
   167a4:	mov	r0, r4
   167a8:	bl	12e78 <_start@@Base+0x274>
   167ac:	b	16664 <gen_monster@@Base+0x68>
   167b0:	mov	r1, #2
   167b4:	mov	r0, r4
   167b8:	bl	1b5f8 <flatcc_builder_truncate_vector@@Base>
   167bc:	mov	r0, r4
   167c0:	bl	1c11c <flatcc_builder_vector_count@@Base>
   167c4:	cmp	r0, #5
   167c8:	beq	167e0 <gen_monster@@Base+0x1e4>
   167cc:	ldr	r3, [pc, #896]	; 16b54 <gen_monster@@Base+0x558>
   167d0:	movw	r2, #883	; 0x373
   167d4:	ldr	r1, [pc, #892]	; 16b58 <gen_monster@@Base+0x55c>
   167d8:	ldr	r0, [pc, #896]	; 16b60 <gen_monster@@Base+0x564>
   167dc:	b	167a0 <gen_monster@@Base+0x1a4>
   167e0:	mov	r0, r4
   167e4:	bl	1c128 <flatcc_builder_vector_edit@@Base>
   167e8:	ldrh	r3, [r0, #16]
   167ec:	add	r3, r3, #1
   167f0:	strh	r3, [r0, #16]
   167f4:	mov	r0, r4
   167f8:	bl	13188 <_start@@Base+0x584>
   167fc:	mov	r0, r4
   16800:	bl	12e6c <_start@@Base+0x268>
   16804:	mov	r2, r5
   16808:	ldr	r1, [pc, #852]	; 16b64 <gen_monster@@Base+0x568>
   1680c:	mov	r0, r4
   16810:	bl	1c65c <flatcc_builder_create_string@@Base>
   16814:	mov	r1, r0
   16818:	mov	r0, r4
   1681c:	bl	12ea8 <_start@@Base+0x2a4>
   16820:	mov	r0, r4
   16824:	bl	1420c <_start@@Base+0x1608>
   16828:	mov	r5, r0
   1682c:	mov	r0, r4
   16830:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   16834:	mov	r1, #2
   16838:	mov	r0, r4
   1683c:	bl	1b3b4 <flatcc_builder_extend_offset_vector@@Base>
   16840:	str	r5, [r0]
   16844:	str	r5, [r0, #4]
   16848:	mov	r0, r4
   1684c:	bl	12e74 <_start@@Base+0x270>
   16850:	mov	r2, #30
   16854:	ldr	r1, [pc, #780]	; 16b68 <gen_monster@@Base+0x56c>
   16858:	mov	r0, r4
   1685c:	bl	1c71c <flatcc_builder_create_string_strn@@Base>
   16860:	mov	r1, r0
   16864:	mov	r0, r4
   16868:	bl	12ea8 <_start@@Base+0x2a4>
   1686c:	mov	r0, r4
   16870:	bl	14f94 <_start@@Base+0x2390>
   16874:	ldr	r6, [r0]
   16878:	mov	r1, #3
   1687c:	mov	r0, r4
   16880:	bl	1b3b4 <flatcc_builder_extend_offset_vector@@Base>
   16884:	mov	r1, #1
   16888:	stm	r0, {r5, r6}
   1688c:	mov	r0, r4
   16890:	bl	1b66c <flatcc_builder_truncate_offset_vector@@Base>
   16894:	mov	r0, r4
   16898:	bl	1c268 <flatcc_builder_offset_vector_count@@Base>
   1689c:	cmp	r0, #5
   168a0:	beq	168b8 <gen_monster@@Base+0x2bc>
   168a4:	ldr	r3, [pc, #680]	; 16b54 <gen_monster@@Base+0x558>
   168a8:	movw	r2, #923	; 0x39b
   168ac:	ldr	r1, [pc, #676]	; 16b58 <gen_monster@@Base+0x55c>
   168b0:	ldr	r0, [pc, #692]	; 16b6c <gen_monster@@Base+0x570>
   168b4:	b	167a0 <gen_monster@@Base+0x1a4>
   168b8:	mov	r0, r4
   168bc:	bl	12e74 <_start@@Base+0x270>
   168c0:	mov	r2, #8
   168c4:	ldr	r1, [pc, #676]	; 16b70 <gen_monster@@Base+0x574>
   168c8:	mov	r0, r4
   168cc:	bl	1c71c <flatcc_builder_create_string_strn@@Base>
   168d0:	mov	r1, r0
   168d4:	mov	r0, r4
   168d8:	bl	12ea8 <_start@@Base+0x2a4>
   168dc:	mov	r0, r4
   168e0:	bl	14f94 <_start@@Base+0x2390>
   168e4:	ldr	r3, [r0]
   168e8:	mov	r0, r4
   168ec:	str	r3, [sp, #8]
   168f0:	bl	1c268 <flatcc_builder_offset_vector_count@@Base>
   168f4:	cmp	r0, #6
   168f8:	beq	16910 <gen_monster@@Base+0x314>
   168fc:	ldr	r3, [pc, #592]	; 16b54 <gen_monster@@Base+0x558>
   16900:	movw	r2, #929	; 0x3a1
   16904:	ldr	r1, [pc, #588]	; 16b58 <gen_monster@@Base+0x55c>
   16908:	ldr	r0, [pc, #612]	; 16b74 <gen_monster@@Base+0x578>
   1690c:	b	167a0 <gen_monster@@Base+0x1a4>
   16910:	mov	r0, r4
   16914:	bl	1c260 <flatcc_builder_offset_vector_edit@@Base>
   16918:	ldr	r2, [r0, #8]
   1691c:	add	r1, sp, #8
   16920:	ldr	r3, [r0, #20]
   16924:	str	r5, [r0, #20]
   16928:	str	r2, [sp, #12]
   1692c:	mov	r2, #2
   16930:	str	r3, [r0]
   16934:	mov	r0, r4
   16938:	bl	1b454 <flatcc_builder_append_offset_vector@@Base>
   1693c:	mov	r0, r4
   16940:	bl	15034 <_start@@Base+0x2430>
   16944:	ldr	r1, [pc, #556]	; 16b78 <gen_monster@@Base+0x57c>
   16948:	mov	r0, r4
   1694c:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   16950:	mov	r2, #2
   16954:	ldr	r1, [pc, #544]	; 16b7c <gen_monster@@Base+0x580>
   16958:	str	r0, [sp, #28]
   1695c:	mov	r0, r4
   16960:	bl	1c65c <flatcc_builder_create_string@@Base>
   16964:	ldr	r1, [pc, #532]	; 16b80 <gen_monster@@Base+0x584>
   16968:	str	r0, [sp, #32]
   1696c:	mov	r0, r4
   16970:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   16974:	mov	r2, #3
   16978:	add	r1, sp, #28
   1697c:	str	r0, [sp, #36]	; 0x24
   16980:	mov	r0, r4
   16984:	bl	1c1a4 <flatcc_builder_create_offset_vector@@Base>
   16988:	mov	r1, r0
   1698c:	mov	r0, r4
   16990:	bl	12f08 <_start@@Base+0x304>
   16994:	mov	r2, #1
   16998:	mvn	r3, #0
   1699c:	mov	r1, r2
   169a0:	mov	r0, r4
   169a4:	bl	1b74c <flatcc_builder_start_vector@@Base>
   169a8:	mov	r2, #1
   169ac:	add	r1, sp, #4
   169b0:	mov	r0, r4
   169b4:	bl	1b33c <flatcc_builder_append_vector@@Base>
   169b8:	mov	r2, #3
   169bc:	add	r1, sp, #5
   169c0:	mov	r0, r4
   169c4:	bl	1b33c <flatcc_builder_append_vector@@Base>
   169c8:	mov	r0, r4
   169cc:	bl	1c0a8 <flatcc_builder_end_vector@@Base>
   169d0:	mov	r1, r0
   169d4:	mov	r0, r4
   169d8:	bl	12f38 <_start@@Base+0x334>
   169dc:	mov	r2, r5
   169e0:	mov	r1, #1
   169e4:	mov	r0, r4
   169e8:	bl	141b4 <_start@@Base+0x15b0>
   169ec:	mov	r0, r4
   169f0:	bl	12e74 <_start@@Base+0x270>
   169f4:	ldr	r1, [pc, #392]	; 16b84 <gen_monster@@Base+0x588>
   169f8:	mov	r0, r4
   169fc:	bl	1313c <_start@@Base+0x538>
   16a00:	mov	r0, r4
   16a04:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   16a08:	mov	r0, r4
   16a0c:	bl	12e74 <_start@@Base+0x270>
   16a10:	mov	r2, r5
   16a14:	mov	r1, #1
   16a18:	mov	r0, r4
   16a1c:	bl	141b4 <_start@@Base+0x15b0>
   16a20:	ldr	r1, [pc, #352]	; 16b88 <gen_monster@@Base+0x58c>
   16a24:	mov	r0, r4
   16a28:	bl	1313c <_start@@Base+0x538>
   16a2c:	mov	r0, r4
   16a30:	bl	14f94 <_start@@Base+0x2390>
   16a34:	mov	r0, r4
   16a38:	bl	12e74 <_start@@Base+0x270>
   16a3c:	mov	r2, r5
   16a40:	mov	r1, #1
   16a44:	mov	r0, r4
   16a48:	bl	141b4 <_start@@Base+0x15b0>
   16a4c:	ldr	r1, [pc, #308]	; 16b88 <gen_monster@@Base+0x58c>
   16a50:	mov	r0, r4
   16a54:	bl	1313c <_start@@Base+0x538>
   16a58:	mov	r0, r4
   16a5c:	bl	14f94 <_start@@Base+0x2390>
   16a60:	mov	r0, r4
   16a64:	bl	12e74 <_start@@Base+0x270>
   16a68:	mov	r1, #8
   16a6c:	mov	r0, r4
   16a70:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   16a74:	cmp	r0, #0
   16a78:	ldr	r1, [pc, #264]	; 16b88 <gen_monster@@Base+0x58c>
   16a7c:	strne	r5, [r0]
   16a80:	mov	r0, r4
   16a84:	bl	1313c <_start@@Base+0x538>
   16a88:	mov	r3, #1
   16a8c:	mov	r1, #7
   16a90:	mov	r2, r3
   16a94:	mov	r0, r4
   16a98:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   16a9c:	cmp	r0, #0
   16aa0:	movne	r3, #1
   16aa4:	strbne	r3, [r0]
   16aa8:	mov	r0, r4
   16aac:	bl	14f94 <_start@@Base+0x2390>
   16ab0:	mov	r0, r4
   16ab4:	bl	15034 <_start@@Base+0x2430>
   16ab8:	mov	r0, r4
   16abc:	bl	1420c <_start@@Base+0x1608>
   16ac0:	subs	r5, r0, #0
   16ac4:	beq	16adc <gen_monster@@Base+0x4e0>
   16ac8:	mov	r1, #12
   16acc:	mov	r0, r4
   16ad0:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   16ad4:	cmp	r0, #0
   16ad8:	strne	r5, [r0]
   16adc:	mov	r3, #1
   16ae0:	mov	r1, #15
   16ae4:	mov	r2, r3
   16ae8:	mov	r0, r4
   16aec:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   16af0:	cmp	r0, #0
   16af4:	mov	r1, #3
   16af8:	movne	r3, #0
   16afc:	strbne	r3, [r0]
   16b00:	mov	r0, r4
   16b04:	bl	1b864 <flatcc_builder_start_table@@Base>
   16b08:	mov	r0, r4
   16b0c:	bl	14274 <_start@@Base+0x1670>
   16b10:	subs	r5, r0, #0
   16b14:	beq	16b2c <gen_monster@@Base+0x530>
   16b18:	mov	r1, #14
   16b1c:	mov	r0, r4
   16b20:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   16b24:	cmp	r0, #0
   16b28:	strne	r5, [r0]
   16b2c:	mov	r0, r4
   16b30:	bl	14258 <_start@@Base+0x1654>
   16b34:	mov	r0, #0
   16b38:	add	sp, sp, #40	; 0x28
   16b3c:	pop	{r4, r5, r6, pc}
   16b40:	andeq	lr, r1, ip, ror #11
   16b44:	andeq	r0, r1, r0, lsl #2
   16b48:	andeq	lr, r1, lr, ror #15
   16b4c:	andeq	lr, r1, r9, ror #31
   16b50:	subgt	ip, ip, sp, asr #25
   16b54:	strdeq	lr, [r1], -r6
   16b58:	andeq	pc, r1, lr, lsr #12
   16b5c:	andeq	pc, r1, pc, lsl #20
   16b60:	andeq	pc, r1, r6, lsr sl	; <UNPREDICTABLE>
   16b64:	muleq	r1, r3, r6
   16b68:	andeq	r0, r2, r4, lsl #1
   16b6c:	andeq	pc, r1, sp, asr sl	; <UNPREDICTABLE>
   16b70:	muleq	r1, r0, sl
   16b74:	andeq	pc, r1, ip, lsr #21
   16b78:	strdeq	pc, [r1], -r3
   16b7c:	andeq	lr, r1, r7, asr #11
   16b80:	andeq	pc, r1, sl, asr #16
   16b84:	andeq	pc, r1, ip, lsl r9	; <UNPREDICTABLE>
   16b88:	ldrdeq	pc, [r1], -pc	; <UNPREDICTABLE>

00016b8c <test_monster@@Base>:
   16b8c:	push	{r0, r1, r2, r4, r5, lr}
   16b90:	mov	r4, r0
   16b94:	mov	r1, #0
   16b98:	bl	165fc <gen_monster@@Base>
   16b9c:	add	r1, sp, #4
   16ba0:	mov	r0, r4
   16ba4:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   16ba8:	ldr	r3, [pc, #96]	; 16c10 <test_monster@@Base+0x84>
   16bac:	mov	r1, r0
   16bb0:	mov	r4, r0
   16bb4:	ldr	r0, [pc, #88]	; 16c14 <test_monster@@Base+0x88>
   16bb8:	ldr	r2, [sp, #4]
   16bbc:	ldr	r3, [r3]
   16bc0:	bl	13028 <_start@@Base+0x424>
   16bc4:	mov	r0, r4
   16bc8:	ldr	r1, [sp, #4]
   16bcc:	bl	12ff4 <_start@@Base+0x3f0>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16bf8 <test_monster@@Base+0x6c>
   16bd8:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   16bdc:	mov	r1, r0
   16be0:	mvn	r5, #0
   16be4:	ldr	r0, [pc, #44]	; 16c18 <test_monster@@Base+0x8c>
   16be8:	bl	12970 <printf@plt>
   16bec:	mov	r0, r5
   16bf0:	add	sp, sp, #12
   16bf4:	pop	{r4, r5, pc}
   16bf8:	mov	r0, r4
   16bfc:	bl	15d74 <verify_monster@@Base>
   16c00:	mov	r5, r0
   16c04:	mov	r0, r4
   16c08:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   16c0c:	b	16bec <test_monster@@Base+0x60>
   16c10:	andeq	r3, r3, r0, ror r0
   16c14:	andeq	pc, r1, sp, rrx
   16c18:	andeq	pc, r1, r8, ror #21

00016c1c <test_monster_with_size@@Base>:
   16c1c:	push	{r0, r1, r2, r4, r5, lr}
   16c20:	mov	r4, r0
   16c24:	mov	r1, #1
   16c28:	bl	165fc <gen_monster@@Base>
   16c2c:	add	r1, sp, #4
   16c30:	mov	r0, r4
   16c34:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   16c38:	ldr	r3, [pc, #160]	; 16ce0 <test_monster_with_size@@Base+0xc4>
   16c3c:	mov	r4, r0
   16c40:	mov	r1, r0
   16c44:	ldr	r0, [pc, #152]	; 16ce4 <test_monster_with_size@@Base+0xc8>
   16c48:	ldr	r2, [sp, #4]
   16c4c:	ldr	r3, [r3]
   16c50:	bl	13028 <_start@@Base+0x424>
   16c54:	tst	r4, #15
   16c58:	beq	16c74 <test_monster_with_size@@Base+0x58>
   16c5c:	ldr	r0, [pc, #132]	; 16ce8 <test_monster_with_size@@Base+0xcc>
   16c60:	bl	12970 <printf@plt>
   16c64:	ldr	r0, [pc, #128]	; 16cec <test_monster_with_size@@Base+0xd0>
   16c68:	mov	r1, r4
   16c6c:	bl	12970 <printf@plt>
   16c70:	b	16c94 <test_monster_with_size@@Base+0x78>
   16c74:	mov	r5, r4
   16c78:	ldr	r2, [sp, #4]
   16c7c:	ldr	r1, [r5], #4
   16c80:	sub	r2, r2, #4
   16c84:	cmp	r2, r1
   16c88:	beq	16ca4 <test_monster_with_size@@Base+0x88>
   16c8c:	ldr	r0, [pc, #92]	; 16cf0 <test_monster_with_size@@Base+0xd4>
   16c90:	bl	12970 <printf@plt>
   16c94:	mvn	r5, #0
   16c98:	mov	r0, r5
   16c9c:	add	sp, sp, #12
   16ca0:	pop	{r4, r5, pc}
   16ca4:	mov	r1, r2
   16ca8:	mov	r0, r5
   16cac:	bl	12ff4 <_start@@Base+0x3f0>
   16cb0:	cmp	r0, #0
   16cb4:	beq	16cc8 <test_monster_with_size@@Base+0xac>
   16cb8:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   16cbc:	mov	r1, r0
   16cc0:	ldr	r0, [pc, #44]	; 16cf4 <test_monster_with_size@@Base+0xd8>
   16cc4:	b	16c6c <test_monster_with_size@@Base+0x50>
   16cc8:	mov	r0, r5
   16ccc:	bl	15d74 <verify_monster@@Base>
   16cd0:	mov	r5, r0
   16cd4:	mov	r0, r4
   16cd8:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   16cdc:	b	16c98 <test_monster_with_size@@Base+0x7c>
   16ce0:	andeq	r3, r3, r0, ror r0
   16ce4:	andeq	pc, r1, r2, lsl fp	; <UNPREDICTABLE>
   16ce8:	andeq	pc, r1, sl, lsr #22
   16cec:	andeq	pc, r1, fp, ror fp	; <UNPREDICTABLE>
   16cf0:	andeq	pc, r1, pc, lsl #23
   16cf4:	andeq	pc, r1, r5, asr #23

00016cf8 <test_string@@Base>:
   16cf8:	push	{r4, lr}
   16cfc:	mov	r4, r0
   16d00:	bl	1ab18 <flatcc_builder_reset@@Base>
   16d04:	mov	r0, r4
   16d08:	bl	12e78 <_start@@Base+0x274>
   16d0c:	mov	r0, r4
   16d10:	bl	1b7ec <flatcc_builder_start_string@@Base>
   16d14:	mov	r1, #3
   16d18:	mov	r0, r4
   16d1c:	bl	1b4c4 <flatcc_builder_extend_string@@Base>
   16d20:	mov	r3, #49	; 0x31
   16d24:	ldr	r1, [pc, #336]	; 16e7c <test_string@@Base+0x184>
   16d28:	strb	r3, [r0]
   16d2c:	mov	r3, #50	; 0x32
   16d30:	strb	r3, [r0, #1]
   16d34:	mov	r3, #51	; 0x33
   16d38:	strb	r3, [r0, #2]
   16d3c:	mov	r0, r4
   16d40:	bl	1b598 <flatcc_builder_append_string_str@@Base>
   16d44:	mov	r0, r4
   16d48:	bl	1c7dc <flatcc_builder_string_len@@Base>
   16d4c:	cmp	r0, #4
   16d50:	beq	16d68 <test_string@@Base+0x70>
   16d54:	ldr	r3, [pc, #292]	; 16e80 <test_string@@Base+0x188>
   16d58:	movw	r2, #1080	; 0x438
   16d5c:	ldr	r1, [pc, #288]	; 16e84 <test_string@@Base+0x18c>
   16d60:	ldr	r0, [pc, #288]	; 16e88 <test_string@@Base+0x190>
   16d64:	bl	12a60 <__assert_fail@plt>
   16d68:	mov	r2, #30
   16d6c:	ldr	r1, [pc, #280]	; 16e8c <test_string@@Base+0x194>
   16d70:	mov	r0, r4
   16d74:	bl	1b5c0 <flatcc_builder_append_string_strn@@Base>
   16d78:	mov	r0, r4
   16d7c:	bl	1c7dc <flatcc_builder_string_len@@Base>
   16d80:	cmp	r0, #8
   16d84:	beq	16d9c <test_string@@Base+0xa4>
   16d88:	ldr	r3, [pc, #240]	; 16e80 <test_string@@Base+0x188>
   16d8c:	movw	r2, #1082	; 0x43a
   16d90:	ldr	r1, [pc, #236]	; 16e84 <test_string@@Base+0x18c>
   16d94:	ldr	r0, [pc, #244]	; 16e90 <test_string@@Base+0x198>
   16d98:	b	16d64 <test_string@@Base+0x6c>
   16d9c:	mov	r2, #2
   16da0:	ldr	r1, [pc, #236]	; 16e94 <test_string@@Base+0x19c>
   16da4:	mov	r0, r4
   16da8:	bl	1b528 <flatcc_builder_append_string@@Base>
   16dac:	mov	r0, r4
   16db0:	bl	1c7dc <flatcc_builder_string_len@@Base>
   16db4:	cmp	r0, #10
   16db8:	beq	16dd0 <test_string@@Base+0xd8>
   16dbc:	ldr	r3, [pc, #188]	; 16e80 <test_string@@Base+0x188>
   16dc0:	movw	r2, #1084	; 0x43c
   16dc4:	ldr	r1, [pc, #184]	; 16e84 <test_string@@Base+0x18c>
   16dc8:	ldr	r0, [pc, #200]	; 16e98 <test_string@@Base+0x1a0>
   16dcc:	b	16d64 <test_string@@Base+0x6c>
   16dd0:	mov	r1, #3
   16dd4:	mov	r0, r4
   16dd8:	bl	1b6e0 <flatcc_builder_truncate_string@@Base>
   16ddc:	mov	r0, r4
   16de0:	bl	1c7dc <flatcc_builder_string_len@@Base>
   16de4:	cmp	r0, #7
   16de8:	beq	16e00 <test_string@@Base+0x108>
   16dec:	ldr	r3, [pc, #140]	; 16e80 <test_string@@Base+0x188>
   16df0:	movw	r2, #1086	; 0x43e
   16df4:	ldr	r1, [pc, #136]	; 16e84 <test_string@@Base+0x18c>
   16df8:	ldr	r0, [pc, #156]	; 16e9c <test_string@@Base+0x1a4>
   16dfc:	b	16d64 <test_string@@Base+0x6c>
   16e00:	mov	r0, r4
   16e04:	bl	1c7d4 <flatcc_builder_string_edit@@Base>
   16e08:	mov	r3, #46	; 0x2e
   16e0c:	strb	r3, [r0, #4]
   16e10:	mov	r0, r4
   16e14:	bl	1c754 <flatcc_builder_end_string@@Base>
   16e18:	mov	r1, r0
   16e1c:	mov	r0, r4
   16e20:	bl	12ea8 <_start@@Base+0x2a4>
   16e24:	mov	r0, r4
   16e28:	bl	14258 <_start@@Base+0x1654>
   16e2c:	mov	r1, #0
   16e30:	mov	r0, r4
   16e34:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   16e38:	cmp	r0, #0
   16e3c:	bne	16e54 <test_string@@Base+0x15c>
   16e40:	ldr	r3, [pc, #56]	; 16e80 <test_string@@Base+0x188>
   16e44:	movw	r2, #1093	; 0x445
   16e48:	ldr	r1, [pc, #52]	; 16e84 <test_string@@Base+0x18c>
   16e4c:	ldr	r0, [pc, #76]	; 16ea0 <test_string@@Base+0x1a8>
   16e50:	b	16d64 <test_string@@Base+0x6c>
   16e54:	bl	12d6c <_start@@Base+0x168>
   16e58:	bl	13944 <_start@@Base+0xd40>
   16e5c:	ldr	r1, [pc, #64]	; 16ea4 <test_string@@Base+0x1ac>
   16e60:	bl	12964 <strcmp@plt>
   16e64:	cmp	r0, #0
   16e68:	popeq	{r4, pc}
   16e6c:	ldr	r0, [pc, #52]	; 16ea8 <test_string@@Base+0x1b0>
   16e70:	bl	129b8 <puts@plt>
   16e74:	mvn	r0, #0
   16e78:	pop	{r4, pc}
   16e7c:	andeq	pc, r1, r4, lsr #24
   16e80:	andeq	lr, r1, r2, lsl #12
   16e84:	andeq	pc, r1, lr, lsr #12
   16e88:	andeq	pc, r1, r0, lsl #24
   16e8c:	andeq	pc, r1, r6, lsr #24
   16e90:	andeq	pc, r1, fp, lsr #24
   16e94:	andeq	pc, r1, r1, asr ip	; <UNPREDICTABLE>
   16e98:	andeq	pc, r1, r4, asr ip	; <UNPREDICTABLE>
   16e9c:	andeq	pc, r1, fp, ror ip	; <UNPREDICTABLE>
   16ea0:	andeq	r0, r2, r7, ror #7
   16ea4:	andeq	pc, r1, r1, lsr #25
   16ea8:	andeq	pc, r1, r9, lsr #25

00016eac <test_sort_find@@Base>:
   16eac:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   16eb0:	mov	r4, r0
   16eb4:	bl	1ab18 <flatcc_builder_reset@@Base>
   16eb8:	mov	r0, r4
   16ebc:	bl	12e78 <_start@@Base+0x274>
   16ec0:	ldr	r1, [pc, #724]	; 1719c <test_sort_find@@Base+0x2f0>
   16ec4:	mov	r0, r4
   16ec8:	bl	1313c <_start@@Base+0x538>
   16ecc:	mov	r0, r4
   16ed0:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   16ed4:	mov	r0, r4
   16ed8:	bl	12e74 <_start@@Base+0x270>
   16edc:	ldr	r1, [pc, #700]	; 171a0 <test_sort_find@@Base+0x2f4>
   16ee0:	mov	r0, r4
   16ee4:	bl	1313c <_start@@Base+0x538>
   16ee8:	mov	r0, r4
   16eec:	bl	14f94 <_start@@Base+0x2390>
   16ef0:	mov	r0, r4
   16ef4:	bl	12e74 <_start@@Base+0x270>
   16ef8:	ldr	r1, [pc, #676]	; 171a4 <test_sort_find@@Base+0x2f8>
   16efc:	mov	r0, r4
   16f00:	bl	1313c <_start@@Base+0x538>
   16f04:	mov	r0, r4
   16f08:	bl	14f94 <_start@@Base+0x2390>
   16f0c:	mov	r0, r4
   16f10:	bl	12e74 <_start@@Base+0x270>
   16f14:	ldr	r1, [pc, #652]	; 171a8 <test_sort_find@@Base+0x2fc>
   16f18:	mov	r0, r4
   16f1c:	bl	1313c <_start@@Base+0x538>
   16f20:	mov	r0, r4
   16f24:	bl	14f94 <_start@@Base+0x2390>
   16f28:	mov	r0, r4
   16f2c:	bl	12e74 <_start@@Base+0x270>
   16f30:	ldr	r1, [pc, #628]	; 171ac <test_sort_find@@Base+0x300>
   16f34:	mov	r0, r4
   16f38:	bl	1313c <_start@@Base+0x538>
   16f3c:	mov	r0, r4
   16f40:	bl	14f94 <_start@@Base+0x2390>
   16f44:	mov	r0, r4
   16f48:	bl	12e74 <_start@@Base+0x270>
   16f4c:	ldr	r1, [pc, #596]	; 171a8 <test_sort_find@@Base+0x2fc>
   16f50:	mov	r0, r4
   16f54:	bl	1313c <_start@@Base+0x538>
   16f58:	mov	r0, r4
   16f5c:	bl	14f94 <_start@@Base+0x2390>
   16f60:	mov	r0, r4
   16f64:	bl	15034 <_start@@Base+0x2430>
   16f68:	mov	r0, r4
   16f6c:	bl	14258 <_start@@Base+0x1654>
   16f70:	mov	r0, r4
   16f74:	ldr	r4, [pc, #564]	; 171b0 <test_sort_find@@Base+0x304>
   16f78:	add	r1, sp, #4
   16f7c:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   16f80:	mov	r1, r0
   16f84:	mov	r6, r0
   16f88:	ldr	r0, [pc, #548]	; 171b4 <test_sort_find@@Base+0x308>
   16f8c:	ldr	r2, [sp, #4]
   16f90:	ldr	r3, [r4]
   16f94:	bl	13028 <_start@@Base+0x424>
   16f98:	mov	r0, r6
   16f9c:	bl	12d6c <_start@@Base+0x168>
   16fa0:	bl	137e0 <_start@@Base+0xbdc>
   16fa4:	subs	r5, r0, #0
   16fa8:	bne	16fc0 <test_sort_find@@Base+0x114>
   16fac:	ldr	r3, [pc, #516]	; 171b8 <test_sort_find@@Base+0x30c>
   16fb0:	movw	r2, #1147	; 0x47b
   16fb4:	ldr	r1, [pc, #512]	; 171bc <test_sort_find@@Base+0x310>
   16fb8:	ldr	r0, [pc, #512]	; 171c0 <test_sort_find@@Base+0x314>
   16fbc:	bl	12a60 <__assert_fail@plt>
   16fc0:	bl	13cc4 <_start@@Base+0x10c0>
   16fc4:	mov	r1, r6
   16fc8:	ldr	r0, [pc, #500]	; 171c4 <test_sort_find@@Base+0x318>
   16fcc:	ldr	r3, [r4]
   16fd0:	ldr	r2, [sp, #4]
   16fd4:	bl	13028 <_start@@Base+0x424>
   16fd8:	ldr	r3, [r5, #-4]
   16fdc:	cmp	r3, #5
   16fe0:	beq	17004 <test_sort_find@@Base+0x158>
   16fe4:	ldr	r0, [pc, #476]	; 171c8 <test_sort_find@@Base+0x31c>
   16fe8:	bl	129b8 <puts@plt>
   16fec:	mvn	r4, #0
   16ff0:	mov	r0, r6
   16ff4:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   16ff8:	mov	r0, r4
   16ffc:	add	sp, sp, #8
   17000:	pop	{r4, r5, r6, r7, r8, pc}
   17004:	mov	r1, #0
   17008:	mov	r0, r5
   1700c:	bl	13844 <_start@@Base+0xc40>
   17010:	bl	13944 <_start@@Base+0xd40>
   17014:	ldr	r1, [pc, #400]	; 171ac <test_sort_find@@Base+0x300>
   17018:	bl	12964 <strcmp@plt>
   1701c:	cmp	r0, #0
   17020:	ldrne	r0, [pc, #420]	; 171cc <test_sort_find@@Base+0x320>
   17024:	bne	16fe8 <test_sort_find@@Base+0x13c>
   17028:	mov	r1, #1
   1702c:	mov	r0, r5
   17030:	bl	13844 <_start@@Base+0xc40>
   17034:	mov	r8, r0
   17038:	bl	13944 <_start@@Base+0xd40>
   1703c:	ldr	r1, [pc, #356]	; 171a8 <test_sort_find@@Base+0x2fc>
   17040:	bl	12964 <strcmp@plt>
   17044:	cmp	r0, #0
   17048:	ldrne	r0, [pc, #384]	; 171d0 <test_sort_find@@Base+0x324>
   1704c:	bne	16fe8 <test_sort_find@@Base+0x13c>
   17050:	mov	r1, #2
   17054:	mov	r0, r5
   17058:	bl	13844 <_start@@Base+0xc40>
   1705c:	mov	r7, r0
   17060:	bl	13944 <_start@@Base+0xd40>
   17064:	ldr	r1, [pc, #316]	; 171a8 <test_sort_find@@Base+0x2fc>
   17068:	bl	12964 <strcmp@plt>
   1706c:	cmp	r0, #0
   17070:	ldrne	r0, [pc, #348]	; 171d4 <test_sort_find@@Base+0x328>
   17074:	bne	16fe8 <test_sort_find@@Base+0x13c>
   17078:	mov	r1, #3
   1707c:	mov	r0, r5
   17080:	bl	13844 <_start@@Base+0xc40>
   17084:	bl	13944 <_start@@Base+0xd40>
   17088:	ldr	r1, [pc, #276]	; 171a4 <test_sort_find@@Base+0x2f8>
   1708c:	bl	12964 <strcmp@plt>
   17090:	cmp	r0, #0
   17094:	ldrne	r0, [pc, #316]	; 171d8 <test_sort_find@@Base+0x32c>
   17098:	bne	16fe8 <test_sort_find@@Base+0x13c>
   1709c:	mov	r1, #4
   170a0:	mov	r0, r5
   170a4:	bl	13844 <_start@@Base+0xc40>
   170a8:	bl	13944 <_start@@Base+0xd40>
   170ac:	ldr	r1, [pc, #236]	; 171a0 <test_sort_find@@Base+0x2f4>
   170b0:	bl	12964 <strcmp@plt>
   170b4:	subs	r4, r0, #0
   170b8:	ldrne	r0, [pc, #284]	; 171dc <test_sort_find@@Base+0x330>
   170bc:	bne	16fe8 <test_sort_find@@Base+0x13c>
   170c0:	cmp	r8, r7
   170c4:	ldreq	r0, [pc, #276]	; 171e0 <test_sort_find@@Base+0x334>
   170c8:	beq	16fe8 <test_sort_find@@Base+0x13c>
   170cc:	mov	r0, r5
   170d0:	ldr	r1, [pc, #204]	; 171a4 <test_sort_find@@Base+0x2f8>
   170d4:	bl	139bc <_start@@Base+0xdb8>
   170d8:	cmp	r0, #3
   170dc:	ldrne	r0, [pc, #256]	; 171e4 <test_sort_find@@Base+0x338>
   170e0:	bne	16fe8 <test_sort_find@@Base+0x13c>
   170e4:	mov	r0, r5
   170e8:	ldr	r1, [pc, #248]	; 171e8 <test_sort_find@@Base+0x33c>
   170ec:	bl	14e74 <_start@@Base+0x2270>
   170f0:	cmp	r0, #3
   170f4:	ldrne	r0, [pc, #240]	; 171ec <test_sort_find@@Base+0x340>
   170f8:	bne	16fe8 <test_sort_find@@Base+0x13c>
   170fc:	mov	r0, r5
   17100:	ldr	r1, [pc, #232]	; 171f0 <test_sort_find@@Base+0x344>
   17104:	bl	14e74 <_start@@Base+0x2270>
   17108:	cmp	r0, #3
   1710c:	ldrne	r0, [pc, #224]	; 171f4 <test_sort_find@@Base+0x348>
   17110:	bne	16fe8 <test_sort_find@@Base+0x13c>
   17114:	mov	r0, r5
   17118:	ldr	r1, [pc, #216]	; 171f8 <test_sort_find@@Base+0x34c>
   1711c:	bl	139bc <_start@@Base+0xdb8>
   17120:	cmn	r0, #1
   17124:	ldrne	r0, [pc, #208]	; 171fc <test_sort_find@@Base+0x350>
   17128:	bne	16fe8 <test_sort_find@@Base+0x13c>
   1712c:	mov	r0, r5
   17130:	ldr	r1, [pc, #116]	; 171ac <test_sort_find@@Base+0x300>
   17134:	bl	139bc <_start@@Base+0xdb8>
   17138:	cmp	r0, #0
   1713c:	ldrne	r0, [pc, #188]	; 17200 <test_sort_find@@Base+0x354>
   17140:	bne	16fe8 <test_sort_find@@Base+0x13c>
   17144:	mov	r0, r5
   17148:	ldr	r1, [pc, #88]	; 171a8 <test_sort_find@@Base+0x2fc>
   1714c:	bl	139bc <_start@@Base+0xdb8>
   17150:	cmp	r0, #1
   17154:	mov	r8, r0
   17158:	ldrne	r0, [pc, #164]	; 17204 <test_sort_find@@Base+0x358>
   1715c:	bne	1717c <test_sort_find@@Base+0x2d0>
   17160:	mov	r0, r5
   17164:	ldr	r1, [pc, #52]	; 171a0 <test_sort_find@@Base+0x2f4>
   17168:	bl	139bc <_start@@Base+0xdb8>
   1716c:	cmp	r0, #4
   17170:	mov	r8, r0
   17174:	beq	17190 <test_sort_find@@Base+0x2e4>
   17178:	ldr	r0, [pc, #136]	; 17208 <test_sort_find@@Base+0x35c>
   1717c:	bl	129b8 <puts@plt>
   17180:	mov	r1, r8
   17184:	ldr	r0, [pc, #128]	; 1720c <test_sort_find@@Base+0x360>
   17188:	bl	12970 <printf@plt>
   1718c:	b	16fec <test_sort_find@@Base+0x140>
   17190:	mov	r0, r5
   17194:	bl	13cc4 <_start@@Base+0x10c0>
   17198:	b	16ff0 <test_sort_find@@Base+0x144>
   1719c:	andeq	lr, r1, r9, ror #31
   171a0:	muleq	r1, r3, r6
   171a4:	andeq	r0, r2, r4, lsl #1
   171a8:	andeq	r0, r2, r9, lsr #1
   171ac:			; <UNDEFINED> instruction: 0x0001fcbc
   171b0:	andeq	r3, r3, r0, ror r0
   171b4:	andeq	pc, r1, r2, asr #25
   171b8:	andeq	lr, r1, lr, lsl #12
   171bc:	andeq	pc, r1, lr, lsr #12
   171c0:	ldrdeq	pc, [r1], -sl
   171c4:	andeq	pc, r1, r4, asr #25
   171c8:	andeq	pc, r1, r3, ror #25
   171cc:	andeq	pc, r1, sl, lsl #26
   171d0:	andeq	pc, r1, r7, lsr #26
   171d4:	andeq	pc, r1, r4, asr #26
   171d8:	andeq	pc, r1, r1, ror #26
   171dc:	andeq	pc, r1, lr, ror sp	; <UNPREDICTABLE>
   171e0:	muleq	r1, fp, sp
   171e4:	andeq	pc, r1, r2, ror #27
   171e8:	andeq	pc, r1, sp, lsl #28
   171ec:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   171f0:	andeq	pc, r1, r6, asr #28
   171f4:	andeq	pc, r1, sp, asr #28
   171f8:	andeq	pc, r1, r0, ror lr	; <UNPREDICTABLE>
   171fc:	andeq	pc, r1, r7, ror lr	; <UNPREDICTABLE>
   17200:	andeq	pc, r1, sp, lsl #29
   17204:	andeq	pc, r1, fp, lsl #31
   17208:	andeq	pc, r1, r5, lsr #29
   1720c:	muleq	r1, sp, lr

00017210 <test_scan@@Base>:
   17210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17214:	mov	r4, r0
   17218:	sub	sp, sp, #36	; 0x24
   1721c:	ldr	r7, [pc, #2624]	; 17c64 <test_scan@@Base+0xa54>
   17220:	ldr	r0, [r7]
   17224:	ldrb	r3, [r7, #6]
   17228:	ldrh	r2, [r7, #4]
   1722c:	str	r0, [sp, #24]
   17230:	mov	r0, r4
   17234:	strh	r2, [sp, #28]
   17238:	strb	r3, [sp, #30]
   1723c:	bl	1ab18 <flatcc_builder_reset@@Base>
   17240:	mov	r0, r4
   17244:	bl	12e78 <_start@@Base+0x274>
   17248:	ldr	r1, [pc, #2584]	; 17c68 <test_scan@@Base+0xa58>
   1724c:	mov	r0, r4
   17250:	bl	1313c <_start@@Base+0x538>
   17254:	mov	r2, #7
   17258:	add	r1, sp, #24
   1725c:	mov	r0, r4
   17260:	bl	14fe4 <_start@@Base+0x23e0>
   17264:	mov	r0, r4
   17268:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   1726c:	mov	r0, r4
   17270:	bl	1c148 <flatcc_builder_end_offset_vector@@Base>
   17274:	mov	r1, r0
   17278:	mov	r0, r4
   1727c:	bl	12f08 <_start@@Base+0x304>
   17280:	mov	r0, r4
   17284:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   17288:	mov	r0, r4
   1728c:	bl	12e74 <_start@@Base+0x270>
   17290:	ldr	r1, [pc, #2516]	; 17c6c <test_scan@@Base+0xa5c>
   17294:	mov	r0, r4
   17298:	bl	1313c <_start@@Base+0x538>
   1729c:	mov	r0, r4
   172a0:	bl	14f94 <_start@@Base+0x2390>
   172a4:	mov	r0, r4
   172a8:	bl	12e74 <_start@@Base+0x270>
   172ac:	ldr	r1, [pc, #2492]	; 17c70 <test_scan@@Base+0xa60>
   172b0:	mov	r0, r4
   172b4:	bl	1313c <_start@@Base+0x538>
   172b8:	mov	r0, r4
   172bc:	bl	14f94 <_start@@Base+0x2390>
   172c0:	mov	r0, r4
   172c4:	bl	12e74 <_start@@Base+0x270>
   172c8:	ldr	r1, [pc, #2468]	; 17c74 <test_scan@@Base+0xa64>
   172cc:	mov	r0, r4
   172d0:	bl	1313c <_start@@Base+0x538>
   172d4:	mov	r0, r4
   172d8:	bl	14f94 <_start@@Base+0x2390>
   172dc:	mov	r0, r4
   172e0:	bl	12e74 <_start@@Base+0x270>
   172e4:	ldr	r1, [pc, #2444]	; 17c78 <test_scan@@Base+0xa68>
   172e8:	mov	r0, r4
   172ec:	bl	1313c <_start@@Base+0x538>
   172f0:	mov	r0, r4
   172f4:	bl	14f94 <_start@@Base+0x2390>
   172f8:	mov	r0, r4
   172fc:	bl	12e74 <_start@@Base+0x270>
   17300:	ldr	r1, [pc, #2412]	; 17c74 <test_scan@@Base+0xa64>
   17304:	mov	r0, r4
   17308:	bl	1313c <_start@@Base+0x538>
   1730c:	mov	r0, r4
   17310:	bl	14f94 <_start@@Base+0x2390>
   17314:	mov	r0, r4
   17318:	bl	15034 <_start@@Base+0x2430>
   1731c:	mov	r0, r4
   17320:	bl	14258 <_start@@Base+0x1654>
   17324:	add	r1, sp, #20
   17328:	mov	r0, r4
   1732c:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   17330:	str	r0, [sp, #8]
   17334:	bl	12d6c <_start@@Base+0x168>
   17338:	mov	r4, r0
   1733c:	bl	137e0 <_start@@Base+0xbdc>
   17340:	subs	r5, r0, #0
   17344:	bne	1735c <test_scan@@Base+0x14c>
   17348:	ldr	r1, [pc, #2348]	; 17c7c <test_scan@@Base+0xa6c>
   1734c:	add	r3, r7, #7
   17350:	movw	r2, #1305	; 0x519
   17354:	ldr	r0, [pc, #2340]	; 17c80 <test_scan@@Base+0xa70>
   17358:	bl	12a60 <__assert_fail@plt>
   1735c:	mov	r0, r4
   17360:	bl	133b0 <_start@@Base+0x7ac>
   17364:	subs	r6, r0, #0
   17368:	bne	17380 <test_scan@@Base+0x170>
   1736c:	add	r3, r7, #7
   17370:	movw	r2, #1307	; 0x51b
   17374:	ldr	r1, [pc, #2304]	; 17c7c <test_scan@@Base+0xa6c>
   17378:	ldr	r0, [pc, #2308]	; 17c84 <test_scan@@Base+0xa74>
   1737c:	b	17358 <test_scan@@Base+0x148>
   17380:	mov	r0, r4
   17384:	bl	136cc <_start@@Base+0xac8>
   17388:	subs	r8, r0, #0
   1738c:	bne	173a4 <test_scan@@Base+0x194>
   17390:	add	r3, r7, #7
   17394:	movw	r2, #1309	; 0x51d
   17398:	ldr	r1, [pc, #2268]	; 17c7c <test_scan@@Base+0xa6c>
   1739c:	ldr	r0, [pc, #2276]	; 17c88 <test_scan@@Base+0xa78>
   173a0:	b	17358 <test_scan@@Base+0x148>
   173a4:	ldr	r1, [pc, #2244]	; 17c70 <test_scan@@Base+0xa60>
   173a8:	mov	r0, r5
   173ac:	bl	13a48 <_start@@Base+0xe44>
   173b0:	cmp	r0, #1
   173b4:	ldrne	r0, [pc, #2256]	; 17c8c <test_scan@@Base+0xa7c>
   173b8:	bne	173f0 <test_scan@@Base+0x1e0>
   173bc:	mov	r0, r5
   173c0:	ldr	r1, [pc, #2216]	; 17c70 <test_scan@@Base+0xa60>
   173c4:	bl	13aa0 <_start@@Base+0xe9c>
   173c8:	cmp	r0, #1
   173cc:	bne	173ec <test_scan@@Base+0x1dc>
   173d0:	ldr	r9, [pc, #2232]	; 17c90 <test_scan@@Base+0xa80>
   173d4:	mov	r4, #0
   173d8:	ldr	r7, [r5, #-4]
   173dc:	cmp	r4, r7
   173e0:	bne	1740c <test_scan@@Base+0x1fc>
   173e4:	ldr	r0, [pc, #2216]	; 17c94 <test_scan@@Base+0xa84>
   173e8:	b	173f0 <test_scan@@Base+0x1e0>
   173ec:	ldr	r0, [pc, #2212]	; 17c98 <test_scan@@Base+0xa88>
   173f0:	mvn	r4, #0
   173f4:	bl	129b8 <puts@plt>
   173f8:	ldr	r0, [sp, #8]
   173fc:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   17400:	mov	r0, r4
   17404:	add	sp, sp, #36	; 0x24
   17408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1740c:	mov	r1, r4
   17410:	mov	r0, r5
   17414:	bl	13844 <_start@@Base+0xc40>
   17418:	bl	13944 <_start@@Base+0xd40>
   1741c:	mov	r2, #5
   17420:	mov	r1, r9
   17424:	bl	131a4 <_start@@Base+0x5a0>
   17428:	cmp	r0, #0
   1742c:	addne	r4, r4, #1
   17430:	bne	173dc <test_scan@@Base+0x1cc>
   17434:	cmp	r4, #1
   17438:	bne	173e4 <test_scan@@Base+0x1d4>
   1743c:	mov	r2, #5
   17440:	ldr	r1, [pc, #2120]	; 17c90 <test_scan@@Base+0xa80>
   17444:	mov	r0, r5
   17448:	bl	13d3c <_start@@Base+0x1138>
   1744c:	cmp	r0, #1
   17450:	bne	173e4 <test_scan@@Base+0x1d4>
   17454:	ldr	r3, [pc, #2068]	; 17c70 <test_scan@@Base+0xa60>
   17458:	mvn	r2, #0
   1745c:	mov	r1, #2
   17460:	mov	r0, r5
   17464:	bl	13af4 <_start@@Base+0xef0>
   17468:	cmn	r0, #1
   1746c:	ldrne	r0, [pc, #2088]	; 17c9c <test_scan@@Base+0xa8c>
   17470:	bne	173f0 <test_scan@@Base+0x1e0>
   17474:	mov	r0, r5
   17478:	ldr	r1, [pc, #2080]	; 17ca0 <test_scan@@Base+0xa90>
   1747c:	bl	13a48 <_start@@Base+0xe44>
   17480:	cmn	r0, #1
   17484:	mov	r4, r0
   17488:	ldrne	r0, [pc, #2068]	; 17ca4 <test_scan@@Base+0xa94>
   1748c:	bne	173f0 <test_scan@@Base+0x1e0>
   17490:	mov	r0, r5
   17494:	ldr	r1, [pc, #2000]	; 17c6c <test_scan@@Base+0xa5c>
   17498:	bl	13a48 <_start@@Base+0xe44>
   1749c:	cmp	r0, #0
   174a0:	beq	174b0 <test_scan@@Base+0x2a0>
   174a4:	ldr	r0, [pc, #2044]	; 17ca8 <test_scan@@Base+0xa98>
   174a8:	bl	129b8 <puts@plt>
   174ac:	b	173f8 <test_scan@@Base+0x1e8>
   174b0:	ldr	r1, [pc, #1980]	; 17c74 <test_scan@@Base+0xa64>
   174b4:	mov	r0, r5
   174b8:	bl	13a48 <_start@@Base+0xe44>
   174bc:	cmp	r0, #2
   174c0:	beq	174cc <test_scan@@Base+0x2bc>
   174c4:	ldr	r0, [pc, #2016]	; 17cac <test_scan@@Base+0xa9c>
   174c8:	b	173f0 <test_scan@@Base+0x1e0>
   174cc:	ldr	r1, [pc, #1952]	; 17c74 <test_scan@@Base+0xa64>
   174d0:	mov	r0, r5
   174d4:	bl	13aa0 <_start@@Base+0xe9c>
   174d8:	cmp	r0, #4
   174dc:	bne	174c4 <test_scan@@Base+0x2b4>
   174e0:	mov	r2, #8
   174e4:	ldr	r1, [pc, #1988]	; 17cb0 <test_scan@@Base+0xaa0>
   174e8:	mov	r0, r5
   174ec:	bl	13d3c <_start@@Base+0x1138>
   174f0:	cmp	r0, #4
   174f4:	beq	17500 <test_scan@@Base+0x2f0>
   174f8:	ldr	r0, [pc, #1972]	; 17cb4 <test_scan@@Base+0xaa4>
   174fc:	b	173f0 <test_scan@@Base+0x1e0>
   17500:	ldr	r9, [pc, #1960]	; 17cb0 <test_scan@@Base+0xaa0>
   17504:	cmp	r7, #3
   17508:	movcc	r1, r7
   1750c:	movcs	r1, #3
   17510:	cmp	r1, #1
   17514:	sub	r4, r1, #1
   17518:	bls	174f8 <test_scan@@Base+0x2e8>
   1751c:	mov	r1, r4
   17520:	mov	r0, r5
   17524:	bl	13844 <_start@@Base+0xc40>
   17528:	bl	13944 <_start@@Base+0xd40>
   1752c:	mov	r1, r9
   17530:	mov	r2, #8
   17534:	bl	131a4 <_start@@Base+0x5a0>
   17538:	cmp	r0, #0
   1753c:	mov	r1, r4
   17540:	bne	17510 <test_scan@@Base+0x300>
   17544:	cmp	r4, #2
   17548:	bne	174f8 <test_scan@@Base+0x2e8>
   1754c:	ldr	r3, [pc, #1824]	; 17c74 <test_scan@@Base+0xa64>
   17550:	mvn	r2, #0
   17554:	mov	r0, r5
   17558:	bl	13af4 <_start@@Base+0xef0>
   1755c:	cmp	r0, #2
   17560:	mov	r9, r0
   17564:	ldreq	sl, [pc, #1860]	; 17cb0 <test_scan@@Base+0xaa0>
   17568:	beq	1759c <test_scan@@Base+0x38c>
   1756c:	ldr	r0, [pc, #1860]	; 17cb8 <test_scan@@Base+0xaa8>
   17570:	b	173f0 <test_scan@@Base+0x1e0>
   17574:	mov	r1, r9
   17578:	mov	r0, r5
   1757c:	bl	13844 <_start@@Base+0xc40>
   17580:	bl	13944 <_start@@Base+0xd40>
   17584:	mov	r2, #8
   17588:	mov	r1, sl
   1758c:	bl	131a4 <_start@@Base+0x5a0>
   17590:	subs	r4, r0, #0
   17594:	beq	175a8 <test_scan@@Base+0x398>
   17598:	add	r9, r9, #1
   1759c:	cmp	r7, r9
   175a0:	bhi	17574 <test_scan@@Base+0x364>
   175a4:	b	1756c <test_scan@@Base+0x35c>
   175a8:	cmp	r9, #2
   175ac:	bne	1756c <test_scan@@Base+0x35c>
   175b0:	ldr	r3, [pc, #1724]	; 17c74 <test_scan@@Base+0xa64>
   175b4:	mvn	r2, #0
   175b8:	mov	r1, #3
   175bc:	mov	r0, r5
   175c0:	bl	13af4 <_start@@Base+0xef0>
   175c4:	cmp	r0, #4
   175c8:	ldrne	r0, [pc, #1772]	; 17cbc <test_scan@@Base+0xaac>
   175cc:	bne	173f0 <test_scan@@Base+0x1e0>
   175d0:	mov	r2, #3
   175d4:	mov	r1, #1
   175d8:	ldr	r3, [pc, #1728]	; 17ca0 <test_scan@@Base+0xa90>
   175dc:	mov	r0, r5
   175e0:	bl	13af4 <_start@@Base+0xef0>
   175e4:	cmn	r0, #1
   175e8:	ldrne	r0, [pc, #1744]	; 17cc0 <test_scan@@Base+0xab0>
   175ec:	bne	173f0 <test_scan@@Base+0x1e0>
   175f0:	mov	r2, #3
   175f4:	mov	r1, #1
   175f8:	ldr	r3, [pc, #1644]	; 17c6c <test_scan@@Base+0xa5c>
   175fc:	mov	r0, r5
   17600:	bl	13af4 <_start@@Base+0xef0>
   17604:	cmn	r0, #1
   17608:	ldrne	r0, [pc, #1716]	; 17cc4 <test_scan@@Base+0xab4>
   1760c:	bne	173f0 <test_scan@@Base+0x1e0>
   17610:	mov	r2, #3
   17614:	mov	r1, #1
   17618:	ldr	r3, [pc, #1616]	; 17c70 <test_scan@@Base+0xa60>
   1761c:	mov	r0, r5
   17620:	bl	13af4 <_start@@Base+0xef0>
   17624:	cmp	r0, #1
   17628:	mov	r9, r0
   1762c:	ldrne	r0, [pc, #1684]	; 17cc8 <test_scan@@Base+0xab8>
   17630:	bne	173f0 <test_scan@@Base+0x1e0>
   17634:	mov	r2, #3
   17638:	mov	r1, r9
   1763c:	ldr	r3, [pc, #1584]	; 17c74 <test_scan@@Base+0xa64>
   17640:	mov	r0, r5
   17644:	bl	13af4 <_start@@Base+0xef0>
   17648:	cmp	r0, #2
   1764c:	ldrne	r0, [pc, #1656]	; 17ccc <test_scan@@Base+0xabc>
   17650:	bne	173f0 <test_scan@@Base+0x1e0>
   17654:	mov	r2, #3
   17658:	mov	r1, r9
   1765c:	ldr	r3, [pc, #1556]	; 17c78 <test_scan@@Base+0xa68>
   17660:	mov	r0, r5
   17664:	bl	13af4 <_start@@Base+0xef0>
   17668:	cmn	r0, #1
   1766c:	ldrne	r0, [pc, #1628]	; 17cd0 <test_scan@@Base+0xac0>
   17670:	bne	173f0 <test_scan@@Base+0x1e0>
   17674:	mov	r2, #3
   17678:	mov	r1, r9
   1767c:	ldr	r3, [pc, #1564]	; 17ca0 <test_scan@@Base+0xa90>
   17680:	mov	r0, r5
   17684:	bl	13b98 <_start@@Base+0xf94>
   17688:	cmn	r0, #1
   1768c:	ldrne	r0, [pc, #1600]	; 17cd4 <test_scan@@Base+0xac4>
   17690:	bne	173f0 <test_scan@@Base+0x1e0>
   17694:	mov	r2, #3
   17698:	mov	r1, #1
   1769c:	ldr	r3, [pc, #1480]	; 17c6c <test_scan@@Base+0xa5c>
   176a0:	mov	r0, r5
   176a4:	bl	13b98 <_start@@Base+0xf94>
   176a8:	cmn	r0, #1
   176ac:	ldrne	r0, [pc, #1572]	; 17cd8 <test_scan@@Base+0xac8>
   176b0:	bne	173f0 <test_scan@@Base+0x1e0>
   176b4:	mov	r2, #3
   176b8:	mov	r1, #1
   176bc:	ldr	r3, [pc, #1452]	; 17c70 <test_scan@@Base+0xa60>
   176c0:	mov	r0, r5
   176c4:	bl	13b98 <_start@@Base+0xf94>
   176c8:	cmp	r0, #1
   176cc:	mov	r9, r0
   176d0:	ldrne	r0, [pc, #1540]	; 17cdc <test_scan@@Base+0xacc>
   176d4:	bne	173f0 <test_scan@@Base+0x1e0>
   176d8:	mov	r2, #3
   176dc:	mov	r1, r9
   176e0:	ldr	r3, [pc, #1420]	; 17c74 <test_scan@@Base+0xa64>
   176e4:	mov	r0, r5
   176e8:	bl	13b98 <_start@@Base+0xf94>
   176ec:	cmp	r0, #2
   176f0:	ldrne	r0, [pc, #1512]	; 17ce0 <test_scan@@Base+0xad0>
   176f4:	bne	173f0 <test_scan@@Base+0x1e0>
   176f8:	mov	r2, #3
   176fc:	mov	r1, r9
   17700:	ldr	r3, [pc, #1392]	; 17c78 <test_scan@@Base+0xa68>
   17704:	mov	r0, r5
   17708:	bl	13b98 <_start@@Base+0xf94>
   1770c:	cmn	r0, #1
   17710:	ldrne	r0, [pc, #1484]	; 17ce4 <test_scan@@Base+0xad4>
   17714:	bne	173f0 <test_scan@@Base+0x1e0>
   17718:	mov	r2, #0
   1771c:	mov	r0, r5
   17720:	ldr	r3, [pc, #1348]	; 17c6c <test_scan@@Base+0xa5c>
   17724:	mov	r1, r2
   17728:	bl	13af4 <_start@@Base+0xef0>
   1772c:	cmn	r0, #1
   17730:	beq	1773c <test_scan@@Base+0x52c>
   17734:	ldr	r0, [pc, #1452]	; 17ce8 <test_scan@@Base+0xad8>
   17738:	b	173f0 <test_scan@@Base+0x1e0>
   1773c:	mov	r2, #0
   17740:	ldr	r3, [pc, #1320]	; 17c70 <test_scan@@Base+0xa60>
   17744:	mov	r0, r5
   17748:	mov	r1, r2
   1774c:	bl	13af4 <_start@@Base+0xef0>
   17750:	cmn	r0, #1
   17754:	beq	17760 <test_scan@@Base+0x550>
   17758:	ldr	r0, [pc, #1420]	; 17cec <test_scan@@Base+0xadc>
   1775c:	b	173f0 <test_scan@@Base+0x1e0>
   17760:	mov	r2, r9
   17764:	ldr	r3, [pc, #1284]	; 17c70 <test_scan@@Base+0xa60>
   17768:	mov	r1, r9
   1776c:	mov	r0, r5
   17770:	bl	13af4 <_start@@Base+0xef0>
   17774:	cmn	r0, #1
   17778:	mov	r2, r0
   1777c:	beq	17788 <test_scan@@Base+0x578>
   17780:	ldr	r0, [pc, #1384]	; 17cf0 <test_scan@@Base+0xae0>
   17784:	b	173f0 <test_scan@@Base+0x1e0>
   17788:	ldr	r3, [pc, #1244]	; 17c6c <test_scan@@Base+0xa5c>
   1778c:	mov	r1, r7
   17790:	mov	r0, r5
   17794:	bl	13af4 <_start@@Base+0xef0>
   17798:	cmn	r0, #1
   1779c:	beq	177a8 <test_scan@@Base+0x598>
   177a0:	ldr	r0, [pc, #1356]	; 17cf4 <test_scan@@Base+0xae4>
   177a4:	b	173f0 <test_scan@@Base+0x1e0>
   177a8:	mov	r2, #0
   177ac:	ldr	r3, [pc, #1208]	; 17c6c <test_scan@@Base+0xa5c>
   177b0:	mov	r0, r5
   177b4:	mov	r1, r2
   177b8:	bl	13b98 <_start@@Base+0xf94>
   177bc:	cmn	r0, #1
   177c0:	bne	17734 <test_scan@@Base+0x524>
   177c4:	mov	r2, #0
   177c8:	ldr	r3, [pc, #1184]	; 17c70 <test_scan@@Base+0xa60>
   177cc:	mov	r0, r5
   177d0:	mov	r1, r2
   177d4:	bl	13b98 <_start@@Base+0xf94>
   177d8:	cmn	r0, #1
   177dc:	bne	17758 <test_scan@@Base+0x548>
   177e0:	mov	r2, #1
   177e4:	ldr	r3, [pc, #1156]	; 17c70 <test_scan@@Base+0xa60>
   177e8:	mov	r0, r5
   177ec:	mov	r1, r2
   177f0:	bl	13b98 <_start@@Base+0xf94>
   177f4:	cmn	r0, #1
   177f8:	mov	r2, r0
   177fc:	bne	17780 <test_scan@@Base+0x570>
   17800:	ldr	r3, [pc, #1124]	; 17c6c <test_scan@@Base+0xa5c>
   17804:	mov	r1, r7
   17808:	mov	r0, r5
   1780c:	bl	13b98 <_start@@Base+0xf94>
   17810:	cmn	r0, #1
   17814:	mov	fp, r0
   17818:	bne	177a0 <test_scan@@Base+0x590>
   1781c:	ldr	r1, [pc, #1100]	; 17c70 <test_scan@@Base+0xa60>
   17820:	mov	r0, r5
   17824:	bl	13b58 <_start@@Base+0xf54>
   17828:	cmp	r0, #1
   1782c:	ldrne	r0, [pc, #1220]	; 17cf8 <test_scan@@Base+0xae8>
   17830:	bne	173f0 <test_scan@@Base+0x1e0>
   17834:	mov	r0, r5
   17838:	ldr	r1, [pc, #1120]	; 17ca0 <test_scan@@Base+0xa90>
   1783c:	bl	13b58 <_start@@Base+0xf54>
   17840:	cmp	r0, #0
   17844:	ldrne	r0, [pc, #1200]	; 17cfc <test_scan@@Base+0xaec>
   17848:	bne	173f0 <test_scan@@Base+0x1e0>
   1784c:	mov	r0, r5
   17850:	ldr	r1, [pc, #1044]	; 17c6c <test_scan@@Base+0xa5c>
   17854:	bl	13b58 <_start@@Base+0xf54>
   17858:	cmp	r0, #1
   1785c:	mov	r9, r0
   17860:	ldrne	r0, [pc, #1176]	; 17d00 <test_scan@@Base+0xaf0>
   17864:	bne	173f0 <test_scan@@Base+0x1e0>
   17868:	mov	r0, r5
   1786c:	ldr	r1, [pc, #1024]	; 17c74 <test_scan@@Base+0xa64>
   17870:	bl	13b58 <_start@@Base+0xf54>
   17874:	cmp	r0, #2
   17878:	ldrne	r0, [pc, #1156]	; 17d04 <test_scan@@Base+0xaf4>
   1787c:	bne	173f0 <test_scan@@Base+0x1e0>
   17880:	mov	r1, #6
   17884:	mov	r0, r6
   17888:	bl	13454 <_start@@Base+0x850>
   1788c:	subs	r3, r0, #0
   17890:	ldrne	r0, [pc, #1136]	; 17d08 <test_scan@@Base+0xaf8>
   17894:	str	r3, [sp, #4]
   17898:	bne	173f0 <test_scan@@Base+0x1e0>
   1789c:	mov	r1, r9
   178a0:	mov	r0, r6
   178a4:	bl	13454 <_start@@Base+0x850>
   178a8:	cmp	r0, #2
   178ac:	mov	sl, r0
   178b0:	ldrne	r0, [pc, #1108]	; 17d0c <test_scan@@Base+0xafc>
   178b4:	bne	173f0 <test_scan@@Base+0x1e0>
   178b8:	mov	r3, r9
   178bc:	mov	r2, fp
   178c0:	mov	r1, #3
   178c4:	mov	r0, r6
   178c8:	bl	134a0 <_start@@Base+0x89c>
   178cc:	cmn	r0, #1
   178d0:	ldrne	r0, [pc, #1080]	; 17d10 <test_scan@@Base+0xb00>
   178d4:	bne	173f0 <test_scan@@Base+0x1e0>
   178d8:	mov	r1, #5
   178dc:	mov	r0, r6
   178e0:	bl	13454 <_start@@Base+0x850>
   178e4:	cmn	r0, #1
   178e8:	beq	178f4 <test_scan@@Base+0x6e4>
   178ec:	ldr	r0, [pc, #1056]	; 17d14 <test_scan@@Base+0xb04>
   178f0:	b	173f0 <test_scan@@Base+0x1e0>
   178f4:	mov	r1, #2
   178f8:	mov	r0, r6
   178fc:	bl	13454 <_start@@Base+0x850>
   17900:	cmp	r0, #6
   17904:	ldrne	r0, [pc, #1036]	; 17d18 <test_scan@@Base+0xb08>
   17908:	bne	173f0 <test_scan@@Base+0x1e0>
   1790c:	mov	r1, #3
   17910:	mov	r0, r6
   17914:	bl	13454 <_start@@Base+0x850>
   17918:	cmp	r0, #3
   1791c:	mov	r3, r0
   17920:	bne	178ec <test_scan@@Base+0x6dc>
   17924:	mov	r1, r0
   17928:	mvn	r2, #0
   1792c:	mov	r0, r6
   17930:	bl	134a0 <_start@@Base+0x89c>
   17934:	cmp	r0, #3
   17938:	mov	r3, r0
   1793c:	ldrne	r0, [pc, #984]	; 17d1c <test_scan@@Base+0xb0c>
   17940:	bne	173f0 <test_scan@@Base+0x1e0>
   17944:	mvn	r2, #0
   17948:	mov	r1, #4
   1794c:	mov	r0, r6
   17950:	bl	134a0 <_start@@Base+0x89c>
   17954:	cmp	r0, #5
   17958:	ldreq	fp, [r6, #-4]
   1795c:	ldrne	r0, [pc, #956]	; 17d20 <test_scan@@Base+0xb10>
   17960:	subeq	r3, fp, #1
   17964:	bne	173f0 <test_scan@@Base+0x1e0>
   17968:	cmn	r3, #1
   1796c:	bne	17978 <test_scan@@Base+0x768>
   17970:	ldr	r0, [pc, #940]	; 17d24 <test_scan@@Base+0xb14>
   17974:	b	173f0 <test_scan@@Base+0x1e0>
   17978:	mov	r1, r3
   1797c:	mov	r0, r6
   17980:	str	r3, [sp, #12]
   17984:	bl	13414 <_start@@Base+0x810>
   17988:	ldr	r3, [sp, #12]
   1798c:	cmp	r0, #3
   17990:	sub	r2, r3, #1
   17994:	movne	r3, r2
   17998:	bne	17968 <test_scan@@Base+0x758>
   1799c:	cmp	r3, #5
   179a0:	bne	17970 <test_scan@@Base+0x760>
   179a4:	cmp	fp, #4
   179a8:	movcc	r3, fp
   179ac:	movcs	r3, #4
   179b0:	cmp	r3, #1
   179b4:	sub	fp, r3, #1
   179b8:	bhi	179c4 <test_scan@@Base+0x7b4>
   179bc:	ldr	r0, [pc, #868]	; 17d28 <test_scan@@Base+0xb18>
   179c0:	b	173f0 <test_scan@@Base+0x1e0>
   179c4:	mov	r1, fp
   179c8:	mov	r0, r6
   179cc:	bl	13414 <_start@@Base+0x810>
   179d0:	cmp	r0, #3
   179d4:	mov	r3, fp
   179d8:	bne	179b0 <test_scan@@Base+0x7a0>
   179dc:	cmp	fp, #3
   179e0:	bne	179bc <test_scan@@Base+0x7ac>
   179e4:	ldr	fp, [pc, #832]	; 17d2c <test_scan@@Base+0xb1c>
   179e8:	mov	r3, #0
   179ec:	ldr	r6, [r8, #-4]
   179f0:	cmp	r3, r6
   179f4:	bne	17a04 <test_scan@@Base+0x7f4>
   179f8:	mov	r2, #0
   179fc:	ldr	fp, [pc, #808]	; 17d2c <test_scan@@Base+0xb1c>
   17a00:	b	17a58 <test_scan@@Base+0x848>
   17a04:	mov	r1, r3
   17a08:	mov	r0, r8
   17a0c:	str	r3, [sp, #12]
   17a10:	bl	13730 <_start@@Base+0xb2c>
   17a14:	mov	r1, fp
   17a18:	bl	12964 <strcmp@plt>
   17a1c:	subs	r2, r0, #0
   17a20:	beq	179fc <test_scan@@Base+0x7ec>
   17a24:	ldr	r3, [sp, #12]
   17a28:	add	r3, r3, #1
   17a2c:	b	179f0 <test_scan@@Base+0x7e0>
   17a30:	mov	r1, r2
   17a34:	mov	r0, r8
   17a38:	str	r2, [sp, #12]
   17a3c:	bl	13730 <_start@@Base+0xb2c>
   17a40:	mov	r1, fp
   17a44:	bl	12964 <strcmp@plt>
   17a48:	subs	r3, r0, #0
   17a4c:	beq	17a64 <test_scan@@Base+0x854>
   17a50:	ldr	r2, [sp, #12]
   17a54:	add	r2, r2, #1
   17a58:	cmp	r2, r6
   17a5c:	bne	17a30 <test_scan@@Base+0x820>
   17a60:	mov	r3, #0
   17a64:	ldr	fp, [pc, #704]	; 17d2c <test_scan@@Base+0xb1c>
   17a68:	b	17a98 <test_scan@@Base+0x888>
   17a6c:	mov	r1, r3
   17a70:	mov	r0, r8
   17a74:	str	r3, [sp, #12]
   17a78:	bl	13730 <_start@@Base+0xb2c>
   17a7c:	mov	r2, #4
   17a80:	mov	r1, fp
   17a84:	bl	131a4 <_start@@Base+0x5a0>
   17a88:	cmp	r0, #0
   17a8c:	beq	17c5c <test_scan@@Base+0xa4c>
   17a90:	ldr	r3, [sp, #12]
   17a94:	add	r3, r3, #1
   17a98:	cmp	r3, r6
   17a9c:	bne	17a6c <test_scan@@Base+0x85c>
   17aa0:	mov	r3, #0
   17aa4:	ldr	fp, [pc, #640]	; 17d2c <test_scan@@Base+0xb1c>
   17aa8:	b	17ad8 <test_scan@@Base+0x8c8>
   17aac:	mov	r1, r3
   17ab0:	mov	r0, r8
   17ab4:	str	r3, [sp, #12]
   17ab8:	bl	13730 <_start@@Base+0xb2c>
   17abc:	mov	r2, #4
   17ac0:	mov	r1, fp
   17ac4:	bl	131a4 <_start@@Base+0x5a0>
   17ac8:	cmp	r0, #0
   17acc:	beq	17ae0 <test_scan@@Base+0x8d0>
   17ad0:	ldr	r3, [sp, #12]
   17ad4:	add	r3, r3, #1
   17ad8:	cmp	r3, r6
   17adc:	bne	17aac <test_scan@@Base+0x89c>
   17ae0:	ldr	fp, [pc, #580]	; 17d2c <test_scan@@Base+0xb1c>
   17ae4:	sub	r6, r6, #1
   17ae8:	mov	r3, r6
   17aec:	cmn	r3, #1
   17af0:	beq	17b1c <test_scan@@Base+0x90c>
   17af4:	mov	r1, r3
   17af8:	mov	r0, r8
   17afc:	str	r3, [sp, #12]
   17b00:	bl	13730 <_start@@Base+0xb2c>
   17b04:	mov	r1, fp
   17b08:	bl	12964 <strcmp@plt>
   17b0c:	ldr	r3, [sp, #12]
   17b10:	cmp	r0, #0
   17b14:	sub	r3, r3, #1
   17b18:	bne	17aec <test_scan@@Base+0x8dc>
   17b1c:	ldr	fp, [pc, #520]	; 17d2c <test_scan@@Base+0xb1c>
   17b20:	mov	r3, r6
   17b24:	cmn	r3, #1
   17b28:	beq	17b54 <test_scan@@Base+0x944>
   17b2c:	mov	r1, r3
   17b30:	mov	r0, r8
   17b34:	str	r3, [sp, #12]
   17b38:	bl	13730 <_start@@Base+0xb2c>
   17b3c:	mov	r1, fp
   17b40:	bl	12964 <strcmp@plt>
   17b44:	ldr	r3, [sp, #12]
   17b48:	cmp	r0, #0
   17b4c:	sub	r3, r3, #1
   17b50:	bne	17b24 <test_scan@@Base+0x914>
   17b54:	ldr	fp, [pc, #464]	; 17d2c <test_scan@@Base+0xb1c>
   17b58:	mov	r3, r6
   17b5c:	cmn	r3, #1
   17b60:	beq	17b90 <test_scan@@Base+0x980>
   17b64:	mov	r1, r3
   17b68:	mov	r0, r8
   17b6c:	str	r3, [sp, #12]
   17b70:	bl	13730 <_start@@Base+0xb2c>
   17b74:	mov	r2, #4
   17b78:	mov	r1, fp
   17b7c:	bl	131a4 <_start@@Base+0x5a0>
   17b80:	ldr	r3, [sp, #12]
   17b84:	cmp	r0, #0
   17b88:	sub	r3, r3, #1
   17b8c:	bne	17b5c <test_scan@@Base+0x94c>
   17b90:	ldr	fp, [pc, #404]	; 17d2c <test_scan@@Base+0xb1c>
   17b94:	cmn	r6, #1
   17b98:	beq	17bc0 <test_scan@@Base+0x9b0>
   17b9c:	mov	r1, r6
   17ba0:	mov	r0, r8
   17ba4:	bl	13730 <_start@@Base+0xb2c>
   17ba8:	mov	r2, #4
   17bac:	mov	r1, fp
   17bb0:	bl	131a4 <_start@@Base+0x5a0>
   17bb4:	cmp	r0, #0
   17bb8:	sub	r6, r6, #1
   17bbc:	bne	17b94 <test_scan@@Base+0x984>
   17bc0:	mov	r0, r5
   17bc4:	ldr	r1, [sp, #4]
   17bc8:	bl	13844 <_start@@Base+0xc40>
   17bcc:	bl	1325c <_start@@Base+0x658>
   17bd0:	cmp	r0, #13
   17bd4:	beq	17bec <test_scan@@Base+0x9dc>
   17bd8:	ldr	r3, [sp, #4]
   17bdc:	add	r3, r3, #1
   17be0:	cmp	r7, r3
   17be4:	str	r3, [sp, #4]
   17be8:	bhi	17bc0 <test_scan@@Base+0x9b0>
   17bec:	mov	r1, r9
   17bf0:	mov	r0, r5
   17bf4:	bl	13844 <_start@@Base+0xc40>
   17bf8:	bl	1325c <_start@@Base+0x658>
   17bfc:	cmp	r0, #42	; 0x2a
   17c00:	beq	17c10 <test_scan@@Base+0xa00>
   17c04:	add	r9, r9, #1
   17c08:	cmp	r7, r9
   17c0c:	bhi	17bec <test_scan@@Base+0x9dc>
   17c10:	sub	r7, r7, #1
   17c14:	cmn	r7, #1
   17c18:	beq	17c38 <test_scan@@Base+0xa28>
   17c1c:	mov	r1, r7
   17c20:	mov	r0, r5
   17c24:	bl	13844 <_start@@Base+0xc40>
   17c28:	bl	1325c <_start@@Base+0x658>
   17c2c:	cmp	r0, #1
   17c30:	sub	r7, r7, #1
   17c34:	bne	17c14 <test_scan@@Base+0xa04>
   17c38:	subs	sl, sl, #1
   17c3c:	bcc	173f8 <test_scan@@Base+0x1e8>
   17c40:	mov	r1, sl
   17c44:	mov	r0, r5
   17c48:	bl	13844 <_start@@Base+0xc40>
   17c4c:	bl	1325c <_start@@Base+0x658>
   17c50:	cmp	r0, #42	; 0x2a
   17c54:	bne	17c38 <test_scan@@Base+0xa28>
   17c58:	b	173f8 <test_scan@@Base+0x1e8>
   17c5c:	mov	r3, r0
   17c60:	b	17aa4 <test_scan@@Base+0x894>
   17c64:	andeq	lr, r1, sp, lsl r6
   17c68:	andeq	lr, r1, r9, ror #31
   17c6c:	muleq	r1, r3, r6
   17c70:	andeq	r0, r2, r4, lsl #1
   17c74:	andeq	r0, r2, r9, lsr #1
   17c78:			; <UNDEFINED> instruction: 0x0001fcbc
   17c7c:	andeq	pc, r1, lr, lsr #12
   17c80:	ldrdeq	pc, [r1], -sl
   17c84:			; <UNDEFINED> instruction: 0x0001feb7
   17c88:			; <UNDEFINED> instruction: 0x0001febb
   17c8c:	andeq	pc, r1, r4, asr #29
   17c90:	andeq	pc, r1, r6, asr #28
   17c94:	andeq	pc, r1, r3, ror #29
   17c98:	andeq	pc, r1, r3, asr #29
   17c9c:	andeq	pc, r1, r9, lsl #30
   17ca0:	andeq	pc, r1, r0, ror lr	; <UNPREDICTABLE>
   17ca4:	andeq	pc, r1, r7, ror lr	; <UNPREDICTABLE>
   17ca8:	andeq	pc, r1, r5, lsr #29
   17cac:	andeq	pc, r1, fp, lsl #31
   17cb0:	andeq	pc, r1, r4, lsr pc	; <UNPREDICTABLE>
   17cb4:	andeq	pc, r1, pc, lsr pc	; <UNPREDICTABLE>
   17cb8:	andeq	pc, r1, r9, asr pc	; <UNPREDICTABLE>
   17cbc:	andeq	pc, r1, r3, lsl #31
   17cc0:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   17cc4:	andeq	pc, r1, r0, asr #31
   17cc8:	andeq	r0, r2, r6, rrx
   17ccc:	andeq	r0, r2, fp, lsl #1
   17cd0:	andeq	pc, r1, r1, ror #31
   17cd4:	andeq	r0, r2, ip
   17cd8:	andeq	r0, r2, r9, lsr r0
   17cdc:	andeq	r0, r2, r5, rrx
   17ce0:	andeq	r0, r2, sl, lsl #1
   17ce4:	strheq	r0, [r2], -r2
   17ce8:	ldrdeq	r0, [r2], -lr
   17cec:	strdeq	r0, [r2], -lr
   17cf0:	andeq	r0, r2, ip, lsl r1
   17cf4:	andeq	r0, r2, r2, asr #2
   17cf8:	andeq	r0, r2, sp, ror #2
   17cfc:	andeq	r0, r2, r7, lsl #3
   17d00:	andeq	r0, r2, r2, lsr #3
   17d04:			; <UNDEFINED> instruction: 0x000201bd
   17d08:	ldrdeq	r0, [r2], -sl
   17d0c:	andeq	r0, r2, r6, lsl #4
   17d10:	andeq	r0, r2, r3, lsr r2
   17d14:	andeq	r0, r2, sp, lsl #6
   17d18:	andeq	r0, r2, fp, ror #4
   17d1c:	muleq	r2, r6, r2
   17d20:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   17d24:	andeq	r0, r2, ip, lsl #6
   17d28:	andeq	r0, r2, lr, lsr r3
   17d2c:	strdeq	pc, [r1], -r3

00017d30 <test_basic_sort@@Base>:
   17d30:	ldr	r3, [pc, #460]	; 17f04 <test_basic_sort@@Base+0x1d4>
   17d34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d38:	sub	sp, sp, #24
   17d3c:	mov	r5, #7
   17d40:	mov	r4, r0
   17d44:	str	r3, [sp, #8]
   17d48:	mov	r3, #772	; 0x304
   17d4c:	strb	r5, [sp, #22]
   17d50:	strh	r3, [sp, #12]
   17d54:	mov	r3, #2
   17d58:	strb	r3, [sp, #14]
   17d5c:	sub	r3, r3, #-67108863	; 0xfc000001
   17d60:	sub	r3, r3, #16515072	; 0xfc0000
   17d64:	sub	r3, r3, #65024	; 0xfe00
   17d68:	str	r3, [sp, #16]
   17d6c:	movw	r3, #1540	; 0x604
   17d70:	strh	r3, [sp, #20]
   17d74:	bl	1ab18 <flatcc_builder_reset@@Base>
   17d78:	mov	r0, r4
   17d7c:	bl	12e78 <_start@@Base+0x274>
   17d80:	ldr	r1, [pc, #384]	; 17f08 <test_basic_sort@@Base+0x1d8>
   17d84:	mov	r0, r4
   17d88:	bl	1313c <_start@@Base+0x538>
   17d8c:	mov	r2, r5
   17d90:	add	r1, sp, #8
   17d94:	mov	r0, r4
   17d98:	bl	14fe4 <_start@@Base+0x23e0>
   17d9c:	mov	r0, r4
   17da0:	bl	14258 <_start@@Base+0x1654>
   17da4:	add	r1, sp, #4
   17da8:	mov	r0, r4
   17dac:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   17db0:	bl	12d6c <_start@@Base+0x168>
   17db4:	bl	133b0 <_start@@Base+0x7ac>
   17db8:	subs	r5, r0, #0
   17dbc:	beq	17e08 <test_basic_sort@@Base+0xd8>
   17dc0:	ldr	r6, [r5, #-4]
   17dc4:	cmp	r6, #0
   17dc8:	beq	17e08 <test_basic_sort@@Base+0xd8>
   17dcc:	lsr	r7, r6, #1
   17dd0:	sub	r4, r6, #1
   17dd4:	mov	r1, r7
   17dd8:	mov	r2, r4
   17ddc:	mov	r0, r5
   17de0:	bl	134f8 <_start@@Base+0x8f4>
   17de4:	subs	r7, r7, #1
   17de8:	bcs	17dd4 <test_basic_sort@@Base+0xa4>
   17dec:	add	r6, r5, r6
   17df0:	cmp	r4, #0
   17df4:	bne	17e1c <test_basic_sort@@Base+0xec>
   17df8:	ldr	r3, [r5, #-4]
   17dfc:	cmp	r3, #7
   17e00:	addeq	sl, sp, #16
   17e04:	beq	17ee4 <test_basic_sort@@Base+0x1b4>
   17e08:	ldr	r3, [pc, #252]	; 17f0c <test_basic_sort@@Base+0x1dc>
   17e0c:	mov	r2, #1552	; 0x610
   17e10:	ldr	r1, [pc, #248]	; 17f10 <test_basic_sort@@Base+0x1e0>
   17e14:	ldr	r0, [pc, #248]	; 17f14 <test_basic_sort@@Base+0x1e4>
   17e18:	bl	12a60 <__assert_fail@plt>
   17e1c:	ldrb	r2, [r5]
   17e20:	sub	r4, r4, #1
   17e24:	mov	r1, #0
   17e28:	mov	r0, r5
   17e2c:	ldrb	r3, [r6, #-1]!
   17e30:	strb	r2, [r6]
   17e34:	mov	r2, r4
   17e38:	strb	r3, [r5]
   17e3c:	bl	134f8 <_start@@Base+0x8f4>
   17e40:	b	17df0 <test_basic_sort@@Base+0xc0>
   17e44:	mov	r1, r4
   17e48:	mov	r0, r5
   17e4c:	bl	13414 <_start@@Base+0x810>
   17e50:	ldrb	r3, [r4, sl]
   17e54:	mov	r8, r0
   17e58:	cmp	r3, r0
   17e5c:	beq	17e98 <test_basic_sort@@Base+0x168>
   17e60:	ldr	r0, [pc, #176]	; 17f18 <test_basic_sort@@Base+0x1e8>
   17e64:	bl	129b8 <puts@plt>
   17e68:	mvn	r0, #0
   17e6c:	add	sp, sp, #24
   17e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e74:	sub	r7, r9, r6
   17e78:	mov	r0, r5
   17e7c:	add	r7, r6, r7, lsr #1
   17e80:	mov	r1, r7
   17e84:	bl	13414 <_start@@Base+0x810>
   17e88:	cmp	r8, r0
   17e8c:	addhi	r6, r7, #1
   17e90:	movls	r9, r7
   17e94:	b	17ea0 <test_basic_sort@@Base+0x170>
   17e98:	mov	r6, #0
   17e9c:	mov	r9, #6
   17ea0:	cmp	r9, r6
   17ea4:	bhi	17e74 <test_basic_sort@@Base+0x144>
   17ea8:	bne	17ef4 <test_basic_sort@@Base+0x1c4>
   17eac:	mov	r1, r6
   17eb0:	mov	r0, r5
   17eb4:	bl	13414 <_start@@Base+0x810>
   17eb8:	cmp	r8, r0
   17ebc:	bne	17ef4 <test_basic_sort@@Base+0x1c4>
   17ec0:	cmp	r4, #3
   17ec4:	movne	r3, r4
   17ec8:	bne	17ed0 <test_basic_sort@@Base+0x1a0>
   17ecc:	mov	r3, #2
   17ed0:	cmp	r3, r6
   17ed4:	add	r4, r4, #1
   17ed8:	beq	17ee4 <test_basic_sort@@Base+0x1b4>
   17edc:	ldr	r0, [pc, #56]	; 17f1c <test_basic_sort@@Base+0x1ec>
   17ee0:	b	17e64 <test_basic_sort@@Base+0x134>
   17ee4:	cmp	r4, #7
   17ee8:	bne	17e44 <test_basic_sort@@Base+0x114>
   17eec:	mov	r0, #0
   17ef0:	b	17e6c <test_basic_sort@@Base+0x13c>
   17ef4:	cmp	r4, #3
   17ef8:	bne	17edc <test_basic_sort@@Base+0x1ac>
   17efc:	mvn	r6, #0
   17f00:	b	17ecc <test_basic_sort@@Base+0x19c>
   17f04:	movweq	r0, #5894	; 0x1706
   17f08:	andeq	lr, r1, r9, ror #31
   17f0c:	andeq	lr, r1, lr, lsr #12
   17f10:	andeq	pc, r1, lr, lsr #12
   17f14:	andeq	r0, r2, r3, ror r3
   17f18:	andeq	r0, r2, r1, lsr #7
   17f1c:			; <UNDEFINED> instruction: 0x000203b6

00017f20 <test_clone_slice@@Base>:
   17f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f24:	mov	r3, #256	; 0x100
   17f28:	mov	r5, #1
   17f2c:	mov	r6, #0
   17f30:	mov	r4, r0
   17f34:	vpush	{d8}
   17f38:	sub	sp, sp, #36	; 0x24
   17f3c:	vldr	s16, [pc, #996]	; 18328 <test_clone_slice@@Base+0x408>
   17f40:	str	r3, [sp, #24]
   17f44:	strh	r5, [sp, #28]
   17f48:	strb	r6, [sp, #30]
   17f4c:	bl	1ab18 <flatcc_builder_reset@@Base>
   17f50:	mov	r0, r4
   17f54:	bl	12e78 <_start@@Base+0x274>
   17f58:	ldr	r1, [pc, #972]	; 1832c <test_clone_slice@@Base+0x40c>
   17f5c:	mov	r0, r4
   17f60:	bl	1313c <_start@@Base+0x538>
   17f64:	mvn	r3, #0
   17f68:	mov	r2, #7
   17f6c:	str	r5, [sp]
   17f70:	add	r1, sp, #24
   17f74:	mov	r0, r4
   17f78:	str	r3, [sp, #4]
   17f7c:	mov	r3, r5
   17f80:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   17f84:	mov	r1, r0
   17f88:	mov	r0, r4
   17f8c:	bl	12f38 <_start@@Base+0x334>
   17f90:	mov	r0, r4
   17f94:	bl	13158 <_start@@Base+0x554>
   17f98:	mov	r1, #2
   17f9c:	mov	r0, r4
   17fa0:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   17fa4:	mov	r3, #22
   17fa8:	strh	r3, [r0]
   17fac:	mov	r3, #44	; 0x2c
   17fb0:	strh	r3, [r0, #4]
   17fb4:	mov	r0, r4
   17fb8:	bl	13188 <_start@@Base+0x584>
   17fbc:	mov	r3, #16
   17fc0:	mov	r2, #32
   17fc4:	mov	r1, r6
   17fc8:	mov	r0, r4
   17fcc:	ldr	r6, [pc, #860]	; 18330 <test_clone_slice@@Base+0x410>
   17fd0:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   17fd4:	vstr	s16, [r0]
   17fd8:	mov	r0, r4
   17fdc:	bl	14258 <_start@@Base+0x1654>
   17fe0:	add	r1, sp, #20
   17fe4:	mov	r0, r4
   17fe8:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   17fec:	mov	r1, r0
   17ff0:	mov	sl, r0
   17ff4:	ldr	r0, [pc, #824]	; 18334 <test_clone_slice@@Base+0x414>
   17ff8:	ldr	r3, [r6]
   17ffc:	ldr	r2, [sp, #20]
   18000:	bl	13028 <_start@@Base+0x424>
   18004:	mov	r0, sl
   18008:	bl	12d6c <_start@@Base+0x168>
   1800c:	mov	r8, r0
   18010:	mov	r0, r4
   18014:	bl	1ab18 <flatcc_builder_reset@@Base>
   18018:	mov	r0, r4
   1801c:	bl	12e78 <_start@@Base+0x274>
   18020:	mov	r0, r8
   18024:	bl	13944 <_start@@Base+0xd40>
   18028:	subs	r5, r0, #0
   1802c:	str	r6, [sp, #12]
   18030:	bne	18048 <test_clone_slice@@Base+0x128>
   18034:	ldr	r3, [pc, #812]	; 18368 <test_clone_slice@@Base+0x448>
   18038:	movw	r2, #1604	; 0x644
   1803c:	ldr	r1, [pc, #808]	; 1836c <test_clone_slice@@Base+0x44c>
   18040:	ldr	r0, [pc, #752]	; 18338 <test_clone_slice@@Base+0x418>
   18044:	bl	12a60 <__assert_fail@plt>
   18048:	mov	r0, r8
   1804c:	bl	1377c <_start@@Base+0xb78>
   18050:	subs	r9, r0, #0
   18054:	bne	1806c <test_clone_slice@@Base+0x14c>
   18058:	ldr	r3, [pc, #776]	; 18368 <test_clone_slice@@Base+0x448>
   1805c:	movw	r2, #1606	; 0x646
   18060:	ldr	r1, [pc, #772]	; 1836c <test_clone_slice@@Base+0x44c>
   18064:	ldr	r0, [pc, #720]	; 1833c <test_clone_slice@@Base+0x41c>
   18068:	b	18044 <test_clone_slice@@Base+0x124>
   1806c:	mov	r0, r8
   18070:	bl	13628 <_start@@Base+0xa24>
   18074:	subs	r7, r0, #0
   18078:	bne	18090 <test_clone_slice@@Base+0x170>
   1807c:	ldr	r3, [pc, #740]	; 18368 <test_clone_slice@@Base+0x448>
   18080:	movw	r2, #1608	; 0x648
   18084:	ldr	r1, [pc, #736]	; 1836c <test_clone_slice@@Base+0x44c>
   18088:	ldr	r0, [pc, #688]	; 18340 <test_clone_slice@@Base+0x420>
   1808c:	b	18044 <test_clone_slice@@Base+0x124>
   18090:	mov	r1, r5
   18094:	mov	r0, r4
   18098:	ldr	r2, [r5, #-4]
   1809c:	bl	1c65c <flatcc_builder_create_string@@Base>
   180a0:	mov	r1, r0
   180a4:	mov	r0, r4
   180a8:	bl	12ea8 <_start@@Base+0x2a4>
   180ac:	mov	r0, r4
   180b0:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   180b4:	mov	r1, r5
   180b8:	mov	r0, r4
   180bc:	ldr	r2, [r5, #-4]
   180c0:	bl	1c65c <flatcc_builder_create_string@@Base>
   180c4:	subs	r1, r0, #0
   180c8:	beq	180d4 <test_clone_slice@@Base+0x1b4>
   180cc:	mov	r0, r4
   180d0:	bl	1b3ec <flatcc_builder_offset_vector_push@@Base>
   180d4:	mov	r1, r5
   180d8:	mov	r3, #20
   180dc:	mov	r2, #4
   180e0:	mov	r0, r4
   180e4:	bl	150b8 <_start@@Base+0x24b4>
   180e8:	mov	r3, #3
   180ec:	mov	r2, #0
   180f0:	mov	r1, r5
   180f4:	mov	r0, r4
   180f8:	bl	150b8 <_start@@Base+0x24b4>
   180fc:	mov	r0, r4
   18100:	mov	r6, #1
   18104:	bl	1c148 <flatcc_builder_end_offset_vector@@Base>
   18108:	mov	r1, r0
   1810c:	mov	r0, r4
   18110:	bl	12f08 <_start@@Base+0x304>
   18114:	mov	r0, r4
   18118:	mov	fp, #2
   1811c:	bl	12e6c <_start@@Base+0x268>
   18120:	ldr	r2, [r5, #-4]
   18124:	mov	r0, r4
   18128:	cmp	r2, #2
   1812c:	movcc	r1, r2
   18130:	movcs	r1, #2
   18134:	sub	r2, r2, r1
   18138:	add	r1, r5, r1
   1813c:	cmp	r2, #20
   18140:	mvn	r5, #0
   18144:	movcs	r2, #20
   18148:	bl	1c65c <flatcc_builder_create_string@@Base>
   1814c:	mov	r1, r0
   18150:	mov	r0, r4
   18154:	bl	12ea8 <_start@@Base+0x2a4>
   18158:	mov	r3, r6
   1815c:	mov	r1, r9
   18160:	str	r6, [sp]
   18164:	mov	r0, r4
   18168:	str	r5, [sp, #4]
   1816c:	ldr	r2, [r9, #-4]
   18170:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   18174:	mov	r1, r0
   18178:	mov	r0, r4
   1817c:	bl	12f38 <_start@@Base+0x334>
   18180:	ldr	r2, [r7, #-4]
   18184:	mvn	r3, #-1073741824	; 0xc0000000
   18188:	mov	r0, r4
   1818c:	str	fp, [sp]
   18190:	str	r3, [sp, #4]
   18194:	mov	r3, #4
   18198:	cmp	r2, r6
   1819c:	movcc	r1, r2
   181a0:	movcs	r1, r6
   181a4:	sub	r2, r2, r1
   181a8:	add	r1, r7, r1, lsl fp
   181ac:	cmp	r2, fp
   181b0:	movcs	r2, fp
   181b4:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   181b8:	mov	r1, r0
   181bc:	mov	r0, r4
   181c0:	bl	12ed8 <_start@@Base+0x2d4>
   181c4:	mov	r0, r4
   181c8:	bl	1420c <_start@@Base+0x1608>
   181cc:	mov	r2, r0
   181d0:	mov	r1, r6
   181d4:	mov	r0, r4
   181d8:	bl	141b4 <_start@@Base+0x15b0>
   181dc:	ldr	r2, [r9, #-4]
   181e0:	mov	r3, r6
   181e4:	mov	r0, r4
   181e8:	str	r6, [sp]
   181ec:	str	r5, [sp, #4]
   181f0:	cmp	r2, #3
   181f4:	movcc	r1, r2
   181f8:	movcs	r1, #3
   181fc:	sub	r2, r2, r1
   18200:	add	r1, r9, r1
   18204:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   18208:	mov	r1, r0
   1820c:	mov	r0, r4
   18210:	bl	12f38 <_start@@Base+0x334>
   18214:	mov	r0, r8
   18218:	bl	13358 <_start@@Base+0x754>
   1821c:	mov	r3, #16
   18220:	mov	r2, r0
   18224:	mov	r1, #0
   18228:	mov	r0, r4
   1822c:	str	r3, [sp]
   18230:	mov	r3, #32
   18234:	bl	1c958 <flatcc_builder_table_add_copy@@Base>
   18238:	mvn	r3, #-1073741824	; 0xc0000000
   1823c:	mov	r1, r7
   18240:	str	fp, [sp]
   18244:	mov	r0, r4
   18248:	str	r3, [sp, #4]
   1824c:	mov	r3, #4
   18250:	ldr	r2, [r7, #-4]
   18254:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   18258:	mov	r1, r0
   1825c:	mov	r0, r4
   18260:	bl	12ed8 <_start@@Base+0x2d4>
   18264:	mov	r0, r4
   18268:	bl	14258 <_start@@Base+0x1654>
   1826c:	add	r1, sp, #20
   18270:	mov	r0, r4
   18274:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   18278:	ldr	r3, [sp, #12]
   1827c:	mov	r1, r0
   18280:	mov	r4, r0
   18284:	ldr	r0, [pc, #184]	; 18344 <test_clone_slice@@Base+0x424>
   18288:	ldr	r2, [sp, #20]
   1828c:	ldr	r3, [r3]
   18290:	bl	13028 <_start@@Base+0x424>
   18294:	mov	r0, r4
   18298:	bl	12d6c <_start@@Base+0x168>
   1829c:	mov	r4, r0
   182a0:	bl	13944 <_start@@Base+0xd40>
   182a4:	ldr	r1, [pc, #128]	; 1832c <test_clone_slice@@Base+0x40c>
   182a8:	bl	12964 <strcmp@plt>
   182ac:	subs	r8, r0, #0
   182b0:	ldrne	r0, [pc, #144]	; 18348 <test_clone_slice@@Base+0x428>
   182b4:	bne	182e0 <test_clone_slice@@Base+0x3c0>
   182b8:	mov	r0, r4
   182bc:	bl	136cc <_start@@Base+0xac8>
   182c0:	mov	r1, r8
   182c4:	mov	r7, r0
   182c8:	bl	13730 <_start@@Base+0xb2c>
   182cc:	ldr	r1, [pc, #88]	; 1832c <test_clone_slice@@Base+0x40c>
   182d0:	bl	12964 <strcmp@plt>
   182d4:	cmp	r0, #0
   182d8:	beq	182fc <test_clone_slice@@Base+0x3dc>
   182dc:	ldr	r0, [pc, #104]	; 1834c <test_clone_slice@@Base+0x42c>
   182e0:	bl	129b8 <puts@plt>
   182e4:	mov	r0, sl
   182e8:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   182ec:	mov	r0, r5
   182f0:	add	sp, sp, #36	; 0x24
   182f4:	vpop	{d8}
   182f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182fc:	mov	r1, r6
   18300:	mov	r0, r7
   18304:	bl	13730 <_start@@Base+0xb2c>
   18308:	subs	r3, r0, #0
   1830c:	beq	1831c <test_clone_slice@@Base+0x3fc>
   18310:	ldr	r3, [r3, #-4]
   18314:	cmp	r3, #6
   18318:	beq	183a4 <test_clone_slice@@Base+0x484>
   1831c:	ldr	r0, [pc, #44]	; 18350 <test_clone_slice@@Base+0x430>
   18320:	bl	129b8 <puts@plt>
   18324:	b	18434 <test_clone_slice@@Base+0x514>
   18328:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1832c:	andeq	r0, r2, sp, lsr r4
   18330:	andeq	r3, r3, r0, ror r0
   18334:	ldrdeq	r0, [r2], -r4
   18338:	andeq	pc, r1, r3, ror #21
   1833c:	andeq	r0, r2, lr, ror #7
   18340:	strdeq	r0, [r2], -r4
   18344:	strdeq	r0, [r2], -sl
   18348:	andeq	r0, r2, r1, lsl r4
   1834c:	andeq	r0, r2, fp, lsr #8
   18350:	andeq	r0, r2, r8, asr #8
   18354:	andeq	r0, r2, lr, ror r4
   18358:	andeq	r0, r2, ip, ror #8
   1835c:	andeq	r0, r2, r5, lsl #9
   18360:			; <UNDEFINED> instruction: 0x000204b7
   18364:	andeq	r0, r2, r5, lsr #9
   18368:	andeq	lr, r1, lr, lsr r6
   1836c:	andeq	pc, r1, lr, lsr #12
   18370:	andeq	pc, r1, pc, ror r6	; <UNPREDICTABLE>
   18374:	andeq	r0, r2, pc, lsr r4
   18378:			; <UNDEFINED> instruction: 0x000204bb
   1837c:	andeq	r0, r2, fp, ror #9
   18380:	andeq	r0, r2, r7, lsl #10
   18384:	andeq	r0, r2, r5, lsr #10
   18388:	andeq	r0, r2, r1, asr #10
   1838c:	andeq	r0, r2, pc, asr r5
   18390:	andeq	r0, r2, r8, ror r5
   18394:	andeq	r0, r2, fp, lsr #11
   18398:	andeq	r0, r2, r6, asr #11
   1839c:	andeq	r0, r2, r1, ror #11
   183a0:	strdeq	r0, [r2], -lr
   183a4:	ldr	r1, [pc, #-88]	; 18354 <test_clone_slice@@Base+0x434>
   183a8:	bl	12964 <strcmp@plt>
   183ac:	cmp	r0, #0
   183b0:	ldrne	r0, [pc, #-96]	; 18358 <test_clone_slice@@Base+0x438>
   183b4:	bne	182e0 <test_clone_slice@@Base+0x3c0>
   183b8:	mov	r1, fp
   183bc:	mov	r0, r7
   183c0:	bl	13730 <_start@@Base+0xb2c>
   183c4:	subs	r3, r0, #0
   183c8:	beq	183d8 <test_clone_slice@@Base+0x4b8>
   183cc:	ldr	r3, [r3, #-4]
   183d0:	cmp	r3, #3
   183d4:	beq	183e0 <test_clone_slice@@Base+0x4c0>
   183d8:	ldr	r0, [pc, #-132]	; 1835c <test_clone_slice@@Base+0x43c>
   183dc:	b	18320 <test_clone_slice@@Base+0x400>
   183e0:	ldr	r1, [pc, #-136]	; 18360 <test_clone_slice@@Base+0x440>
   183e4:	bl	12964 <strcmp@plt>
   183e8:	cmp	r0, #0
   183ec:	ldrne	r0, [pc, #-144]	; 18364 <test_clone_slice@@Base+0x444>
   183f0:	bne	182e0 <test_clone_slice@@Base+0x3c0>
   183f4:	mov	r0, r4
   183f8:	bl	138e4 <_start@@Base+0xce0>
   183fc:	subs	r6, r0, #0
   18400:	bne	18418 <test_clone_slice@@Base+0x4f8>
   18404:	ldr	r3, [pc, #-164]	; 18368 <test_clone_slice@@Base+0x448>
   18408:	mov	r2, #1664	; 0x680
   1840c:	ldr	r1, [pc, #-168]	; 1836c <test_clone_slice@@Base+0x44c>
   18410:	ldr	r0, [pc, #-168]	; 18370 <test_clone_slice@@Base+0x450>
   18414:	b	18044 <test_clone_slice@@Base+0x124>
   18418:	bl	13944 <_start@@Base+0xd40>
   1841c:	ldr	r1, [pc, #-176]	; 18374 <test_clone_slice@@Base+0x454>
   18420:	bl	12964 <strcmp@plt>
   18424:	cmp	r0, #0
   18428:	beq	1843c <test_clone_slice@@Base+0x51c>
   1842c:	ldr	r0, [pc, #-188]	; 18378 <test_clone_slice@@Base+0x458>
   18430:	bl	12970 <printf@plt>
   18434:	mvn	r5, #0
   18438:	b	182e4 <test_clone_slice@@Base+0x3c4>
   1843c:	mov	r0, r6
   18440:	bl	1377c <_start@@Base+0xb78>
   18444:	subs	r3, r0, #0
   18448:	beq	18458 <test_clone_slice@@Base+0x538>
   1844c:	ldr	r2, [r3, #-4]
   18450:	cmp	r2, #7
   18454:	beq	18460 <test_clone_slice@@Base+0x540>
   18458:	ldr	r0, [pc, #-228]	; 1837c <test_clone_slice@@Base+0x45c>
   1845c:	b	18320 <test_clone_slice@@Base+0x400>
   18460:	add	r1, sp, #24
   18464:	bl	12994 <memcmp@plt>
   18468:	cmp	r0, #0
   1846c:	ldrne	r0, [pc, #-244]	; 18380 <test_clone_slice@@Base+0x460>
   18470:	bne	18320 <test_clone_slice@@Base+0x400>
   18474:	mov	r0, r4
   18478:	bl	1377c <_start@@Base+0xb78>
   1847c:	subs	r3, r0, #0
   18480:	beq	18490 <test_clone_slice@@Base+0x570>
   18484:	ldr	r2, [r3, #-4]
   18488:	cmp	r2, #4
   1848c:	beq	18498 <test_clone_slice@@Base+0x578>
   18490:	ldr	r0, [pc, #-276]	; 18384 <test_clone_slice@@Base+0x464>
   18494:	b	18320 <test_clone_slice@@Base+0x400>
   18498:	add	r1, sp, #27
   1849c:	bl	12994 <memcmp@plt>
   184a0:	subs	r5, r0, #0
   184a4:	ldrne	r0, [pc, #-292]	; 18388 <test_clone_slice@@Base+0x468>
   184a8:	bne	18320 <test_clone_slice@@Base+0x400>
   184ac:	mov	r0, r4
   184b0:	bl	13358 <_start@@Base+0x754>
   184b4:	vldr	s15, [r0]
   184b8:	vcmp.f32	s15, s16
   184bc:	vmrs	APSR_nzcv, fpscr
   184c0:	ldrne	r0, [pc, #-316]	; 1838c <test_clone_slice@@Base+0x46c>
   184c4:	bne	18320 <test_clone_slice@@Base+0x400>
   184c8:	mov	r0, r4
   184cc:	bl	13628 <_start@@Base+0xa24>
   184d0:	subs	r4, r0, #0
   184d4:	beq	184e4 <test_clone_slice@@Base+0x5c4>
   184d8:	ldr	r3, [r4, #-4]
   184dc:	cmp	r3, #2
   184e0:	beq	184ec <test_clone_slice@@Base+0x5cc>
   184e4:	ldr	r0, [pc, #-348]	; 18390 <test_clone_slice@@Base+0x470>
   184e8:	b	18320 <test_clone_slice@@Base+0x400>
   184ec:	mov	r1, r5
   184f0:	bl	1368c <_start@@Base+0xa88>
   184f4:	cmp	r0, #0
   184f8:	beq	18508 <test_clone_slice@@Base+0x5e8>
   184fc:	ldrsh	r3, [r0]
   18500:	cmp	r3, #22
   18504:	beq	18510 <test_clone_slice@@Base+0x5f0>
   18508:	ldr	r0, [pc, #-380]	; 18394 <test_clone_slice@@Base+0x474>
   1850c:	b	18320 <test_clone_slice@@Base+0x400>
   18510:	mov	r1, #1
   18514:	mov	r0, r4
   18518:	bl	1368c <_start@@Base+0xa88>
   1851c:	cmp	r0, #0
   18520:	beq	18530 <test_clone_slice@@Base+0x610>
   18524:	ldrsh	r3, [r0]
   18528:	cmp	r3, #44	; 0x2c
   1852c:	beq	18538 <test_clone_slice@@Base+0x618>
   18530:	ldr	r0, [pc, #-416]	; 18398 <test_clone_slice@@Base+0x478>
   18534:	b	18320 <test_clone_slice@@Base+0x400>
   18538:	mov	r0, r6
   1853c:	bl	13628 <_start@@Base+0xa24>
   18540:	subs	r3, r0, #0
   18544:	beq	18554 <test_clone_slice@@Base+0x634>
   18548:	ldr	r3, [r3, #-4]
   1854c:	cmp	r3, #1
   18550:	beq	1855c <test_clone_slice@@Base+0x63c>
   18554:	ldr	r0, [pc, #-448]	; 1839c <test_clone_slice@@Base+0x47c>
   18558:	b	18320 <test_clone_slice@@Base+0x400>
   1855c:	mov	r1, #0
   18560:	bl	1368c <_start@@Base+0xa88>
   18564:	cmp	r0, #0
   18568:	beq	18578 <test_clone_slice@@Base+0x658>
   1856c:	ldrsh	r3, [r0]
   18570:	cmp	r3, #44	; 0x2c
   18574:	beq	182e4 <test_clone_slice@@Base+0x3c4>
   18578:	ldr	r0, [pc, #-480]	; 183a0 <test_clone_slice@@Base+0x480>
   1857c:	b	18320 <test_clone_slice@@Base+0x400>

00018580 <test_create_add_field@@Base>:
   18580:	push	{r0, r1, r4, r5, r6, lr}
   18584:	mov	r4, r0
   18588:	bl	1ab18 <flatcc_builder_reset@@Base>
   1858c:	mov	r0, r4
   18590:	bl	12e78 <_start@@Base+0x274>
   18594:	ldr	r1, [pc, #388]	; 18720 <test_create_add_field@@Base+0x1a0>
   18598:	mov	r0, r4
   1859c:	bl	1313c <_start@@Base+0x538>
   185a0:	ldr	r1, [pc, #380]	; 18724 <test_create_add_field@@Base+0x1a4>
   185a4:	mov	r0, r4
   185a8:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   185ac:	mov	r5, r0
   185b0:	mov	r1, #3
   185b4:	mov	r0, r4
   185b8:	bl	1b864 <flatcc_builder_start_table@@Base>
   185bc:	subs	r6, r0, #0
   185c0:	bne	18654 <test_create_add_field@@Base+0xd4>
   185c4:	mov	r3, #8
   185c8:	mov	r1, #1
   185cc:	mov	r2, r3
   185d0:	mov	r0, r4
   185d4:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   185d8:	cmp	r0, #0
   185dc:	beq	18654 <test_create_add_field@@Base+0xd4>
   185e0:	mvn	r2, #99	; 0x63
   185e4:	mvn	r3, #0
   185e8:	cmp	r5, #0
   185ec:	strd	r2, [r0]
   185f0:	beq	18654 <test_create_add_field@@Base+0xd4>
   185f4:	mov	r1, r6
   185f8:	mov	r0, r4
   185fc:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18600:	cmp	r0, #0
   18604:	beq	18654 <test_create_add_field@@Base+0xd4>
   18608:	mov	r3, #2
   1860c:	str	r5, [r0]
   18610:	mov	r0, r4
   18614:	mov	r2, r3
   18618:	mov	r1, r3
   1861c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   18620:	cmp	r0, #0
   18624:	beq	18654 <test_create_add_field@@Base+0xd4>
   18628:	mov	r3, #2
   1862c:	strh	r3, [r0]
   18630:	mov	r0, r4
   18634:	bl	14274 <_start@@Base+0x1670>
   18638:	subs	r5, r0, #0
   1863c:	beq	18654 <test_create_add_field@@Base+0xd4>
   18640:	mov	r1, #14
   18644:	mov	r0, r4
   18648:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   1864c:	cmp	r0, #0
   18650:	strne	r5, [r0]
   18654:	mov	r0, r4
   18658:	bl	14258 <_start@@Base+0x1654>
   1865c:	add	r1, sp, #4
   18660:	mov	r0, r4
   18664:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   18668:	mov	r5, r0
   1866c:	bl	12d6c <_start@@Base+0x168>
   18670:	cmp	r0, #0
   18674:	ldreq	r3, [pc, #172]	; 18728 <test_create_add_field@@Base+0x1a8>
   18678:	moveq	r2, #716	; 0x2cc
   1867c:	beq	186b8 <test_create_add_field@@Base+0x138>
   18680:	ldr	r3, [r0]
   18684:	sub	r3, r0, r3
   18688:	ldrh	r2, [r3]
   1868c:	cmp	r2, #29
   18690:	bls	186a4 <test_create_add_field@@Base+0x124>
   18694:	ldrh	r3, [r3, #28]
   18698:	cmp	r3, #0
   1869c:	ldrne	r0, [pc, #136]	; 1872c <test_create_add_field@@Base+0x1ac>
   186a0:	bne	18704 <test_create_add_field@@Base+0x184>
   186a4:	bl	13d98 <_start@@Base+0x1194>
   186a8:	cmp	r0, #0
   186ac:	bne	186c4 <test_create_add_field@@Base+0x144>
   186b0:	ldr	r3, [pc, #120]	; 18730 <test_create_add_field@@Base+0x1b0>
   186b4:	mov	r2, #608	; 0x260
   186b8:	ldr	r1, [pc, #116]	; 18734 <test_create_add_field@@Base+0x1b4>
   186bc:	ldr	r0, [pc, #116]	; 18738 <test_create_add_field@@Base+0x1b8>
   186c0:	bl	12a60 <__assert_fail@plt>
   186c4:	ldr	r3, [r0]
   186c8:	sub	r3, r0, r3
   186cc:	ldrh	r2, [r3]
   186d0:	cmp	r2, #7
   186d4:	bls	18700 <test_create_add_field@@Base+0x180>
   186d8:	ldrh	r3, [r3, #6]
   186dc:	cmp	r3, #0
   186e0:	beq	18700 <test_create_add_field@@Base+0x180>
   186e4:	ldrd	r0, [r0, r3]
   186e8:	mvn	r3, #0
   186ec:	mvn	r2, #99	; 0x63
   186f0:	cmp	r1, r3
   186f4:	cmpeq	r0, r2
   186f8:	moveq	r4, #0
   186fc:	beq	1870c <test_create_add_field@@Base+0x18c>
   18700:	ldr	r0, [pc, #52]	; 1873c <test_create_add_field@@Base+0x1bc>
   18704:	mvn	r4, #0
   18708:	bl	129b8 <puts@plt>
   1870c:	mov	r0, r5
   18710:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   18714:	mov	r0, r4
   18718:	add	sp, sp, #8
   1871c:	pop	{r4, r5, r6, pc}
   18720:	andeq	lr, r1, r9, ror #31
   18724:	andeq	r0, r2, r2, lsr #12
   18728:	andeq	lr, r1, pc, asr #12
   1872c:	andeq	r0, r2, r8, lsr #12
   18730:	andeq	lr, r1, r7, ror r6
   18734:	strdeq	lr, [r1], -r3
   18738:	andeq	lr, r1, r5, asr r8
   1873c:	andeq	r0, r2, r5, asr r6

00018740 <test_union_vector@@Base>:
   18740:	push	{r4, r5, r6, r7, r8, r9, lr}
   18744:	mov	r4, r0
   18748:	sub	sp, sp, #20
   1874c:	bl	1ab18 <flatcc_builder_reset@@Base>
   18750:	mov	r0, r4
   18754:	bl	12e78 <_start@@Base+0x274>
   18758:	ldr	r1, [pc, #704]	; 18a20 <test_union_vector@@Base+0x2e0>
   1875c:	mov	r0, r4
   18760:	bl	1313c <_start@@Base+0x538>
   18764:	mov	r1, #4
   18768:	mov	r0, r4
   1876c:	bl	1b864 <flatcc_builder_start_table@@Base>
   18770:	subs	r2, r0, #0
   18774:	movne	r5, #0
   18778:	bne	187b0 <test_union_vector@@Base+0x70>
   1877c:	ldr	r1, [pc, #672]	; 18a24 <test_union_vector@@Base+0x2e4>
   18780:	mov	r0, r4
   18784:	bl	1be10 <flatcc_builder_check_required@@Base>
   18788:	cmp	r0, #0
   1878c:	bne	187a4 <test_union_vector@@Base+0x64>
   18790:	ldr	r3, [pc, #656]	; 18a28 <test_union_vector@@Base+0x2e8>
   18794:	mov	r2, #217	; 0xd9
   18798:	ldr	r1, [pc, #652]	; 18a2c <test_union_vector@@Base+0x2ec>
   1879c:	ldr	r0, [pc, #652]	; 18a30 <test_union_vector@@Base+0x2f0>
   187a0:	bl	12a60 <__assert_fail@plt>
   187a4:	mov	r0, r4
   187a8:	bl	1be8c <flatcc_builder_end_table@@Base>
   187ac:	mov	r5, r0
   187b0:	mov	r0, r4
   187b4:	mov	r7, #2
   187b8:	bl	1c3a8 <flatcc_builder_start_union_vector@@Base>
   187bc:	mov	r0, r4
   187c0:	strb	r7, [sp, #8]
   187c4:	str	r5, [sp, #12]
   187c8:	add	r5, sp, #8
   187cc:	ldm	r5, {r1, r2}
   187d0:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   187d4:	mov	r0, r5
   187d8:	mov	r1, r4
   187dc:	bl	1c3f0 <flatcc_builder_end_union_vector@@Base>
   187e0:	mov	r1, #4
   187e4:	mov	r0, r4
   187e8:	bl	1b864 <flatcc_builder_start_table@@Base>
   187ec:	ldr	r6, [sp, #8]
   187f0:	ldr	r5, [sp, #12]
   187f4:	cmp	r5, #0
   187f8:	cmpne	r6, #0
   187fc:	beq	1882c <test_union_vector@@Base+0xec>
   18800:	mov	r1, r7
   18804:	mov	r0, r4
   18808:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   1880c:	cmp	r0, #0
   18810:	beq	1882c <test_union_vector@@Base+0xec>
   18814:	mov	r1, #3
   18818:	str	r6, [r0]
   1881c:	mov	r0, r4
   18820:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18824:	cmp	r0, #0
   18828:	strne	r5, [r0]
   1882c:	mov	r2, #0
   18830:	ldr	r1, [pc, #508]	; 18a34 <test_union_vector@@Base+0x2f4>
   18834:	mov	r0, r4
   18838:	bl	1be10 <flatcc_builder_check_required@@Base>
   1883c:	cmp	r0, #0
   18840:	bne	18858 <test_union_vector@@Base+0x118>
   18844:	ldr	r3, [pc, #492]	; 18a38 <test_union_vector@@Base+0x2f8>
   18848:	mov	r2, #223	; 0xdf
   1884c:	ldr	r1, [pc, #472]	; 18a2c <test_union_vector@@Base+0x2ec>
   18850:	ldr	r0, [pc, #484]	; 18a3c <test_union_vector@@Base+0x2fc>
   18854:	b	187a0 <test_union_vector@@Base+0x60>
   18858:	mov	r0, r4
   1885c:	bl	1be8c <flatcc_builder_end_table@@Base>
   18860:	subs	r2, r0, #0
   18864:	beq	18874 <test_union_vector@@Base+0x134>
   18868:	mov	r1, #4
   1886c:	mov	r0, r4
   18870:	bl	141b4 <_start@@Base+0x15b0>
   18874:	mov	r0, r4
   18878:	bl	14258 <_start@@Base+0x1654>
   1887c:	add	r1, sp, #4
   18880:	mov	r0, r4
   18884:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   18888:	ldr	r1, [sp, #4]
   1888c:	mov	r7, r0
   18890:	bl	12ff4 <_start@@Base+0x3f0>
   18894:	subs	r6, r0, #0
   18898:	beq	188bc <test_union_vector@@Base+0x17c>
   1889c:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   188a0:	mov	r1, r0
   188a4:	mvn	r6, #0
   188a8:	ldr	r0, [pc, #400]	; 18a40 <test_union_vector@@Base+0x300>
   188ac:	bl	12970 <printf@plt>
   188b0:	mov	r0, r6
   188b4:	add	sp, sp, #20
   188b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   188bc:	mov	r0, r7
   188c0:	bl	12d6c <_start@@Base+0x168>
   188c4:	mov	r4, r0
   188c8:	bl	1388c <_start@@Base+0xc88>
   188cc:	cmp	r0, #4
   188d0:	beq	188e8 <test_union_vector@@Base+0x1a8>
   188d4:	ldr	r0, [pc, #360]	; 18a44 <test_union_vector@@Base+0x304>
   188d8:	bl	12970 <printf@plt>
   188dc:	mov	r0, r7
   188e0:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   188e4:	b	188b0 <test_union_vector@@Base+0x170>
   188e8:	mov	r0, r4
   188ec:	bl	138e4 <_start@@Base+0xce0>
   188f0:	subs	r4, r0, #0
   188f4:	beq	18918 <test_union_vector@@Base+0x1d8>
   188f8:	ldr	r3, [r4]
   188fc:	sub	r3, r4, r3
   18900:	ldrh	r2, [r3]
   18904:	cmp	r2, #11
   18908:	bls	18924 <test_union_vector@@Base+0x1e4>
   1890c:	ldrh	r3, [r3, #10]
   18910:	cmp	r3, #0
   18914:	beq	18924 <test_union_vector@@Base+0x1e4>
   18918:	ldr	r0, [pc, #296]	; 18a48 <test_union_vector@@Base+0x308>
   1891c:	bl	129b8 <puts@plt>
   18920:	b	188dc <test_union_vector@@Base+0x19c>
   18924:	mov	r0, r4
   18928:	bl	13df8 <_start@@Base+0x11f4>
   1892c:	mov	r5, r0
   18930:	mov	r0, r4
   18934:	bl	13e5c <_start@@Base+0x1258>
   18938:	cmp	r5, #0
   1893c:	mov	r8, r0
   18940:	beq	18950 <test_union_vector@@Base+0x210>
   18944:	ldr	r3, [r5, #-4]
   18948:	cmp	r3, #1
   1894c:	beq	18958 <test_union_vector@@Base+0x218>
   18950:	ldr	r0, [pc, #244]	; 18a4c <test_union_vector@@Base+0x30c>
   18954:	b	1891c <test_union_vector@@Base+0x1dc>
   18958:	mov	r1, #0
   1895c:	mov	r0, r5
   18960:	bl	13f08 <_start@@Base+0x1304>
   18964:	cmp	r0, #2
   18968:	ldrne	r0, [pc, #224]	; 18a50 <test_union_vector@@Base+0x310>
   1896c:	bne	1891c <test_union_vector@@Base+0x1dc>
   18970:	mov	r1, #0
   18974:	mov	r0, r8
   18978:	bl	13ec0 <_start@@Base+0x12bc>
   1897c:	subs	r4, r0, #0
   18980:	ldreq	r0, [pc, #204]	; 18a54 <test_union_vector@@Base+0x314>
   18984:	beq	1891c <test_union_vector@@Base+0x1dc>
   18988:	ldr	r3, [r4]
   1898c:	sub	r3, r4, r3
   18990:	ldrh	r2, [r3]
   18994:	cmp	r2, #5
   18998:	bls	189c0 <test_union_vector@@Base+0x280>
   1899c:	ldrh	r3, [r3, #4]
   189a0:	cmp	r3, #0
   189a4:	beq	189c0 <test_union_vector@@Base+0x280>
   189a8:	ldrsb	r1, [r4, r3]
   189ac:	cmp	r1, #2
   189b0:	beq	189c0 <test_union_vector@@Base+0x280>
   189b4:	ldr	r0, [pc, #156]	; 18a58 <test_union_vector@@Base+0x318>
   189b8:	bl	12970 <printf@plt>
   189bc:	b	188dc <test_union_vector@@Base+0x19c>
   189c0:	cmp	r8, #0
   189c4:	beq	189d4 <test_union_vector@@Base+0x294>
   189c8:	ldr	r3, [r8, #-4]
   189cc:	cmp	r3, #1
   189d0:	beq	189e8 <test_union_vector@@Base+0x2a8>
   189d4:	ldr	r3, [pc, #128]	; 18a5c <test_union_vector@@Base+0x31c>
   189d8:	movw	r2, #621	; 0x26d
   189dc:	ldr	r1, [pc, #124]	; 18a60 <test_union_vector@@Base+0x320>
   189e0:	ldr	r0, [pc, #124]	; 18a64 <test_union_vector@@Base+0x324>
   189e4:	b	187a0 <test_union_vector@@Base+0x60>
   189e8:	ldrb	r8, [r5]
   189ec:	mov	r1, #0
   189f0:	mov	r0, r5
   189f4:	cmp	r8, #0
   189f8:	movne	r9, r4
   189fc:	moveq	r9, #0
   18a00:	bl	13f08 <_start@@Base+0x1304>
   18a04:	cmp	r0, r8
   18a08:	ldrne	r0, [pc, #88]	; 18a68 <test_union_vector@@Base+0x328>
   18a0c:	bne	1891c <test_union_vector@@Base+0x1dc>
   18a10:	cmp	r4, r9
   18a14:	beq	188dc <test_union_vector@@Base+0x19c>
   18a18:	ldr	r0, [pc, #76]	; 18a6c <test_union_vector@@Base+0x32c>
   18a1c:	b	1891c <test_union_vector@@Base+0x1dc>
   18a20:	andeq	r0, r2, r8, ror #12
   18a24:	muleq	r1, r0, r6
   18a28:	muleq	r1, r2, r6
   18a2c:	andeq	lr, r1, fp, ror r8
   18a30:	andeq	r0, r2, pc, ror #12
   18a34:			; <UNDEFINED> instruction: 0x0001e6be
   18a38:	andeq	lr, r1, r0, asr #13
   18a3c:	andeq	r0, r2, r1, asr #14
   18a40:	ldrdeq	r0, [r2], -r7
   18a44:	andeq	r0, r2, r3, lsl r8
   18a48:	andeq	r0, r2, r5, lsr r8
   18a4c:	andeq	r0, r2, sp, asr r8
   18a50:	andeq	r0, r2, r4, lsl #17
   18a54:			; <UNDEFINED> instruction: 0x000208b1
   18a58:	andeq	r0, r2, r1, asr #17
   18a5c:	ldrdeq	lr, [r1], -r7
   18a60:	strdeq	lr, [r1], -r3
   18a64:	ldrdeq	r0, [r2], -lr
   18a68:	andeq	r0, r2, r3, asr #18
   18a6c:	andeq	r0, r2, ip, asr r9

00018a70 <test_mixed_type_union@@Base>:
   18a70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18a74:	mov	r4, r0
   18a78:	sub	sp, sp, #32
   18a7c:	bl	1ab18 <flatcc_builder_reset@@Base>
   18a80:	ldr	r1, [pc, #2120]	; 192d0 <test_mixed_type_union@@Base+0x860>
   18a84:	mov	r0, r4
   18a88:	bl	12e60 <_start@@Base+0x25c>
   18a8c:	cmp	r0, #0
   18a90:	bne	18aa0 <test_mixed_type_union@@Base+0x30>
   18a94:	mov	r1, #10
   18a98:	mov	r0, r4
   18a9c:	bl	1b864 <flatcc_builder_start_table@@Base>
   18aa0:	mov	r1, #10
   18aa4:	mov	r0, r4
   18aa8:	bl	14fb4 <_start@@Base+0x23b0>
   18aac:	mov	r2, #2
   18ab0:	mov	sl, r0
   18ab4:	mov	r1, r2
   18ab8:	mov	r0, r4
   18abc:	bl	1b1dc <flatcc_builder_start_struct@@Base>
   18ac0:	subs	r5, r0, #0
   18ac4:	beq	18adc <test_mixed_type_union@@Base+0x6c>
   18ac8:	mov	r3, #22
   18acc:	mov	r0, r4
   18ad0:	strh	r3, [r5]
   18ad4:	bl	1b22c <flatcc_builder_end_struct@@Base>
   18ad8:	mov	r5, r0
   18adc:	mov	r2, #2
   18ae0:	mov	r0, r4
   18ae4:	mov	r1, r2
   18ae8:	bl	1b1dc <flatcc_builder_start_struct@@Base>
   18aec:	cmp	r0, #0
   18af0:	beq	18b44 <test_mixed_type_union@@Base+0xd4>
   18af4:	mov	r3, #19
   18af8:	strh	r3, [r0]
   18afc:	mov	r0, r4
   18b00:	bl	1b22c <flatcc_builder_end_struct@@Base>
   18b04:	subs	r6, r0, #0
   18b08:	beq	18b44 <test_mixed_type_union@@Base+0xd4>
   18b0c:	mov	r3, #1
   18b10:	mov	r1, #0
   18b14:	mov	r2, r3
   18b18:	mov	r0, r4
   18b1c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   18b20:	subs	r7, r0, #0
   18b24:	beq	18b44 <test_mixed_type_union@@Base+0xd4>
   18b28:	mov	r1, #1
   18b2c:	mov	r0, r4
   18b30:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18b34:	cmp	r0, #0
   18b38:	movne	r3, #8
   18b3c:	strbne	r3, [r7]
   18b40:	strne	r6, [r0]
   18b44:	cmp	r5, #0
   18b48:	beq	18b84 <test_mixed_type_union@@Base+0x114>
   18b4c:	mov	r3, #1
   18b50:	mov	r1, #6
   18b54:	mov	r2, r3
   18b58:	mov	r0, r4
   18b5c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   18b60:	subs	r6, r0, #0
   18b64:	beq	18b84 <test_mixed_type_union@@Base+0x114>
   18b68:	mov	r1, #7
   18b6c:	mov	r0, r4
   18b70:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18b74:	cmp	r0, #0
   18b78:	movne	r3, #8
   18b7c:	strbne	r3, [r6]
   18b80:	strne	r5, [r0]
   18b84:	mov	r1, #42	; 0x2a
   18b88:	mov	r0, r4
   18b8c:	bl	12f68 <_start@@Base+0x364>
   18b90:	subs	r6, r0, #0
   18b94:	beq	18bd0 <test_mixed_type_union@@Base+0x160>
   18b98:	mov	r3, #1
   18b9c:	mov	r1, #2
   18ba0:	mov	r2, r3
   18ba4:	mov	r0, r4
   18ba8:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   18bac:	subs	r7, r0, #0
   18bb0:	beq	18bd0 <test_mixed_type_union@@Base+0x160>
   18bb4:	mov	r1, #3
   18bb8:	mov	r0, r4
   18bbc:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18bc0:	cmp	r0, #0
   18bc4:	movne	r3, #2
   18bc8:	strbne	r3, [r7]
   18bcc:	strne	r6, [r0]
   18bd0:	ldr	r1, [pc, #1788]	; 192d4 <test_mixed_type_union@@Base+0x864>
   18bd4:	mov	r0, r4
   18bd8:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   18bdc:	subs	r7, r0, #0
   18be0:	beq	18c1c <test_mixed_type_union@@Base+0x1ac>
   18be4:	mov	r3, #1
   18be8:	mov	r1, #4
   18bec:	mov	r2, r3
   18bf0:	mov	r0, r4
   18bf4:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   18bf8:	subs	r8, r0, #0
   18bfc:	beq	18c1c <test_mixed_type_union@@Base+0x1ac>
   18c00:	mov	r1, #5
   18c04:	mov	r0, r4
   18c08:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18c0c:	cmp	r0, #0
   18c10:	movne	r3, #11
   18c14:	strbne	r3, [r8]
   18c18:	strne	r7, [r0]
   18c1c:	mov	r0, r4
   18c20:	mov	r9, #8
   18c24:	bl	1c3a8 <flatcc_builder_start_union_vector@@Base>
   18c28:	mov	r8, #2
   18c2c:	mov	r0, r4
   18c30:	strb	r9, [sp, #24]
   18c34:	str	r5, [sp, #28]
   18c38:	add	r5, sp, #24
   18c3c:	mov	r7, #11
   18c40:	ldm	r5, {r1, r2}
   18c44:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18c48:	mov	r0, r4
   18c4c:	strb	r8, [sp, #24]
   18c50:	str	r6, [sp, #28]
   18c54:	mov	r6, #9
   18c58:	ldm	r5, {r1, r2}
   18c5c:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18c60:	mov	r1, #1
   18c64:	mov	r0, r4
   18c68:	bl	12f68 <_start@@Base+0x364>
   18c6c:	strb	r8, [sp, #24]
   18c70:	str	r0, [sp, #28]
   18c74:	mov	r0, r4
   18c78:	ldm	r5, {r1, r2}
   18c7c:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18c80:	ldr	r1, [pc, #1616]	; 192d8 <test_mixed_type_union@@Base+0x868>
   18c84:	mov	r0, r4
   18c88:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   18c8c:	strb	r7, [sp, #24]
   18c90:	str	r0, [sp, #28]
   18c94:	mov	r0, r4
   18c98:	ldm	r5, {r1, r2}
   18c9c:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18ca0:	mov	r0, r4
   18ca4:	strb	r6, [sp, #24]
   18ca8:	str	sl, [sp, #28]
   18cac:	ldm	r5, {r1, r2}
   18cb0:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18cb4:	mov	r2, #4
   18cb8:	mov	r0, r4
   18cbc:	mov	r1, r2
   18cc0:	bl	1b1dc <flatcc_builder_start_struct@@Base>
   18cc4:	mov	r3, #3
   18cc8:	str	r3, [r0]
   18ccc:	mov	r0, r4
   18cd0:	bl	1b22c <flatcc_builder_end_struct@@Base>
   18cd4:	strb	r6, [sp, #24]
   18cd8:	str	r0, [sp, #28]
   18cdc:	mov	r0, r4
   18ce0:	ldm	r5, {r1, r2}
   18ce4:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18ce8:	mov	r1, #1
   18cec:	mov	r0, r4
   18cf0:	bl	14fb4 <_start@@Base+0x23b0>
   18cf4:	strb	r6, [sp, #24]
   18cf8:	str	r0, [sp, #28]
   18cfc:	mov	r0, r4
   18d00:	ldm	r5, {r1, r2}
   18d04:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18d08:	mov	r1, r8
   18d0c:	mov	r0, r4
   18d10:	bl	14fb4 <_start@@Base+0x23b0>
   18d14:	strb	r6, [sp, #24]
   18d18:	str	r0, [sp, #28]
   18d1c:	mov	r0, r4
   18d20:	ldm	r5, {r1, r2}
   18d24:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18d28:	ldr	r1, [pc, #1452]	; 192dc <test_mixed_type_union@@Base+0x86c>
   18d2c:	mov	r0, r4
   18d30:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   18d34:	strb	r7, [sp, #24]
   18d38:	str	r0, [sp, #28]
   18d3c:	mov	r0, r4
   18d40:	ldm	r5, {r1, r2}
   18d44:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18d48:	ldr	r1, [pc, #1424]	; 192e0 <test_mixed_type_union@@Base+0x870>
   18d4c:	mov	r0, r4
   18d50:	bl	1c6f4 <flatcc_builder_create_string_str@@Base>
   18d54:	strb	r7, [sp, #24]
   18d58:	str	r0, [sp, #28]
   18d5c:	mov	r0, r4
   18d60:	ldm	r5, {r1, r2}
   18d64:	bl	1c578 <flatcc_builder_union_vector_push@@Base>
   18d68:	mov	r0, r5
   18d6c:	mov	r1, r4
   18d70:	bl	1c3f0 <flatcc_builder_end_union_vector@@Base>
   18d74:	ldr	r7, [sp, #24]
   18d78:	ldr	r5, [sp, #28]
   18d7c:	cmp	r7, #0
   18d80:	cmpne	r5, #0
   18d84:	beq	18db4 <test_mixed_type_union@@Base+0x344>
   18d88:	mov	r1, r9
   18d8c:	mov	r0, r4
   18d90:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18d94:	cmp	r0, #0
   18d98:	beq	18db4 <test_mixed_type_union@@Base+0x344>
   18d9c:	mov	r1, r6
   18da0:	str	r7, [r0]
   18da4:	mov	r0, r4
   18da8:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   18dac:	cmp	r0, #0
   18db0:	strne	r5, [r0]
   18db4:	mov	r2, #0
   18db8:	ldr	r1, [pc, #1316]	; 192e4 <test_mixed_type_union@@Base+0x874>
   18dbc:	mov	r0, r4
   18dc0:	bl	1be10 <flatcc_builder_check_required@@Base>
   18dc4:	cmp	r0, #0
   18dc8:	bne	18de0 <test_mixed_type_union@@Base+0x370>
   18dcc:	ldr	r3, [pc, #1300]	; 192e8 <test_mixed_type_union@@Base+0x878>
   18dd0:	mov	r2, #241	; 0xf1
   18dd4:	ldr	r1, [pc, #1296]	; 192ec <test_mixed_type_union@@Base+0x87c>
   18dd8:	ldr	r0, [pc, #1296]	; 192f0 <test_mixed_type_union@@Base+0x880>
   18ddc:	bl	12a60 <__assert_fail@plt>
   18de0:	mov	r0, r4
   18de4:	bl	1be8c <flatcc_builder_end_table@@Base>
   18de8:	mov	r1, r0
   18dec:	mov	r0, r4
   18df0:	bl	1b124 <flatcc_builder_end_buffer@@Base>
   18df4:	add	r1, sp, #4
   18df8:	mov	r0, r4
   18dfc:	bl	1ce6c <flatcc_builder_finalize_aligned_buffer@@Base>
   18e00:	ldr	r3, [pc, #1260]	; 192f4 <test_mixed_type_union@@Base+0x884>
   18e04:	mov	r1, r0
   18e08:	mov	r7, r0
   18e0c:	ldr	r0, [pc, #1252]	; 192f8 <test_mixed_type_union@@Base+0x888>
   18e10:	ldr	r2, [sp, #4]
   18e14:	ldr	r3, [r3]
   18e18:	bl	13028 <_start@@Base+0x424>
   18e1c:	ldr	r3, [pc, #1240]	; 192fc <test_mixed_type_union@@Base+0x88c>
   18e20:	mov	r0, r7
   18e24:	ldr	r2, [pc, #1188]	; 192d0 <test_mixed_type_union@@Base+0x860>
   18e28:	ldr	r1, [sp, #4]
   18e2c:	bl	1db48 <flatcc_verify_table_as_root@@Base>
   18e30:	cmp	r0, #0
   18e34:	beq	18e58 <test_mixed_type_union@@Base+0x3e8>
   18e38:	bl	1d6b8 <flatcc_verify_error_string@@Base>
   18e3c:	mov	r1, r0
   18e40:	mvn	r4, #0
   18e44:	ldr	r0, [pc, #1204]	; 19300 <test_mixed_type_union@@Base+0x890>
   18e48:	bl	12970 <printf@plt>
   18e4c:	mov	r0, r4
   18e50:	add	sp, sp, #32
   18e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e58:	cmp	r7, #0
   18e5c:	bne	18e74 <test_mixed_type_union@@Base+0x404>
   18e60:	ldr	r3, [pc, #1180]	; 19304 <test_mixed_type_union@@Base+0x894>
   18e64:	movw	r2, #819	; 0x333
   18e68:	ldr	r1, [pc, #1176]	; 19308 <test_mixed_type_union@@Base+0x898>
   18e6c:	ldr	r0, [pc, #1176]	; 1930c <test_mixed_type_union@@Base+0x89c>
   18e70:	b	18ddc <test_mixed_type_union@@Base+0x36c>
   18e74:	ldr	r1, [pc, #1108]	; 192d0 <test_mixed_type_union@@Base+0x860>
   18e78:	mov	r0, r7
   18e7c:	bl	12d00 <_start@@Base+0xfc>
   18e80:	cmp	r0, #0
   18e84:	beq	18e60 <test_mixed_type_union@@Base+0x3f0>
   18e88:	ldr	r3, [r7]
   18e8c:	adds	r4, r7, r3
   18e90:	beq	18e60 <test_mixed_type_union@@Base+0x3f0>
   18e94:	ldr	r3, [r7, r3]
   18e98:	sub	r3, r4, r3
   18e9c:	ldrh	r1, [r3]
   18ea0:	cmp	r1, #7
   18ea4:	bls	18eb4 <test_mixed_type_union@@Base+0x444>
   18ea8:	ldrh	r2, [r3, #6]
   18eac:	cmp	r2, #0
   18eb0:	bne	18ec0 <test_mixed_type_union@@Base+0x450>
   18eb4:	ldr	r0, [pc, #1108]	; 19310 <test_mixed_type_union@@Base+0x8a0>
   18eb8:	bl	129b8 <puts@plt>
   18ebc:	b	19024 <test_mixed_type_union@@Base+0x5b4>
   18ec0:	cmp	r1, #23
   18ec4:	bls	18ed4 <test_mixed_type_union@@Base+0x464>
   18ec8:	ldrh	r8, [r3, #22]
   18ecc:	cmp	r8, #0
   18ed0:	bne	18edc <test_mixed_type_union@@Base+0x46c>
   18ed4:	ldr	r0, [pc, #1080]	; 19314 <test_mixed_type_union@@Base+0x8a4>
   18ed8:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18edc:	ldrh	r1, [r3, #4]
   18ee0:	cmp	r1, #0
   18ee4:	beq	18f08 <test_mixed_type_union@@Base+0x498>
   18ee8:	ldrb	r0, [r4, r1]
   18eec:	cmp	r0, #0
   18ef0:	beq	18f08 <test_mixed_type_union@@Base+0x498>
   18ef4:	add	r1, r4, r2
   18ef8:	ldr	r2, [r4, r2]
   18efc:	cmp	r0, #8
   18f00:	add	ip, r1, r2
   18f04:	beq	18f10 <test_mixed_type_union@@Base+0x4a0>
   18f08:	ldr	r0, [pc, #1032]	; 19318 <test_mixed_type_union@@Base+0x8a8>
   18f0c:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18f10:	cmp	ip, #0
   18f14:	bne	191d8 <test_mixed_type_union@@Base+0x768>
   18f18:	ldr	r0, [pc, #1020]	; 1931c <test_mixed_type_union@@Base+0x8ac>
   18f1c:	bl	129b8 <puts@plt>
   18f20:	ldr	r0, [pc, #1016]	; 19320 <test_mixed_type_union@@Base+0x8b0>
   18f24:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18f28:	bne	18f20 <test_mixed_type_union@@Base+0x4b0>
   18f2c:	ldrh	r2, [r3, #16]
   18f30:	cmp	r2, #0
   18f34:	beq	18f44 <test_mixed_type_union@@Base+0x4d4>
   18f38:	ldrb	r2, [r4, r2]
   18f3c:	cmp	r2, #8
   18f40:	beq	18f4c <test_mixed_type_union@@Base+0x4dc>
   18f44:	ldr	r0, [pc, #984]	; 19324 <test_mixed_type_union@@Base+0x8b4>
   18f48:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18f4c:	ldrh	r2, [r3, #18]
   18f50:	cmp	r2, #0
   18f54:	beq	18f68 <test_mixed_type_union@@Base+0x4f8>
   18f58:	add	r1, r4, r2
   18f5c:	ldr	r2, [r4, r2]
   18f60:	cmn	r1, r2
   18f64:	bne	18f70 <test_mixed_type_union@@Base+0x500>
   18f68:	ldr	r0, [pc, #952]	; 19328 <test_mixed_type_union@@Base+0x8b8>
   18f6c:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18f70:	ldrh	r2, [r1, r2]
   18f74:	cmp	r2, #22
   18f78:	ldrne	r0, [pc, #940]	; 1932c <test_mixed_type_union@@Base+0x8bc>
   18f7c:	bne	18eb8 <test_mixed_type_union@@Base+0x448>
   18f80:	ldrh	r2, [r3, #8]
   18f84:	cmp	r2, #0
   18f88:	beq	18f98 <test_mixed_type_union@@Base+0x528>
   18f8c:	ldrb	r2, [r4, r2]
   18f90:	cmp	r2, #2
   18f94:	beq	18fa0 <test_mixed_type_union@@Base+0x530>
   18f98:	ldr	r0, [pc, #912]	; 19330 <test_mixed_type_union@@Base+0x8c0>
   18f9c:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18fa0:	ldrh	r3, [r3, #10]
   18fa4:	cmp	r3, #0
   18fa8:	beq	18fc8 <test_mixed_type_union@@Base+0x558>
   18fac:	add	r0, r4, r3
   18fb0:	ldr	r3, [r4, r3]
   18fb4:	adds	r0, r0, r3
   18fb8:	beq	18fc8 <test_mixed_type_union@@Base+0x558>
   18fbc:	bl	14000 <_start@@Base+0x13fc>
   18fc0:	cmp	r0, #42	; 0x2a
   18fc4:	beq	18fd0 <test_mixed_type_union@@Base+0x560>
   18fc8:	ldr	r0, [pc, #868]	; 19334 <test_mixed_type_union@@Base+0x8c4>
   18fcc:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   18fd0:	mov	r0, r4
   18fd4:	bl	13f48 <_start@@Base+0x1344>
   18fd8:	cmp	r0, #11
   18fdc:	ldrne	r0, [pc, #852]	; 19338 <test_mixed_type_union@@Base+0x8c8>
   18fe0:	bne	18eb8 <test_mixed_type_union@@Base+0x448>
   18fe4:	mov	r0, r4
   18fe8:	bl	13fa0 <_start@@Base+0x139c>
   18fec:	cmp	r0, #0
   18ff0:	beq	18ffc <test_mixed_type_union@@Base+0x58c>
   18ff4:	adds	r5, r0, #4
   18ff8:	bne	19004 <test_mixed_type_union@@Base+0x594>
   18ffc:	ldr	r0, [pc, #824]	; 1933c <test_mixed_type_union@@Base+0x8cc>
   19000:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   19004:	ldr	r1, [pc, #712]	; 192d4 <test_mixed_type_union@@Base+0x864>
   19008:	mov	r0, r5
   1900c:	bl	12964 <strcmp@plt>
   19010:	cmp	r0, #0
   19014:	beq	19034 <test_mixed_type_union@@Base+0x5c4>
   19018:	mov	r1, r5
   1901c:	ldr	r0, [pc, #796]	; 19340 <test_mixed_type_union@@Base+0x8d0>
   19020:	bl	12970 <printf@plt>
   19024:	mvn	r4, #0
   19028:	mov	r0, r7
   1902c:	bl	1cef8 <flatcc_builder_aligned_free@@Base>
   19030:	b	18e4c <test_mixed_type_union@@Base+0x3dc>
   19034:	mov	r0, r4
   19038:	add	r6, r4, r8
   1903c:	bl	14058 <_start@@Base+0x1454>
   19040:	ldr	r3, [r4, r8]
   19044:	subs	r8, r0, #0
   19048:	add	r3, r3, #4
   1904c:	add	r6, r6, r3
   19050:	beq	191ec <test_mixed_type_union@@Base+0x77c>
   19054:	cmp	r6, #0
   19058:	ldr	r3, [r8, #-4]
   1905c:	moveq	r2, r6
   19060:	beq	19068 <test_mixed_type_union@@Base+0x5f8>
   19064:	ldr	r2, [r6, #-4]
   19068:	cmp	r2, r3
   1906c:	beq	191f8 <test_mixed_type_union@@Base+0x788>
   19070:	ldr	r3, [pc, #716]	; 19344 <test_mixed_type_union@@Base+0x8d4>
   19074:	movw	r2, #823	; 0x337
   19078:	ldr	r1, [pc, #648]	; 19308 <test_mixed_type_union@@Base+0x898>
   1907c:	ldr	r0, [pc, #708]	; 19348 <test_mixed_type_union@@Base+0x8d8>
   19080:	b	18ddc <test_mixed_type_union@@Base+0x36c>
   19084:	ldr	r0, [r6, #12]
   19088:	add	r0, r0, #16
   1908c:	adds	r0, r6, r0
   19090:	beq	190a4 <test_mixed_type_union@@Base+0x634>
   19094:	ldr	r1, [pc, #572]	; 192d8 <test_mixed_type_union@@Base+0x868>
   19098:	bl	12964 <strcmp@plt>
   1909c:	cmp	r0, #0
   190a0:	beq	190ac <test_mixed_type_union@@Base+0x63c>
   190a4:	ldr	r0, [pc, #672]	; 1934c <test_mixed_type_union@@Base+0x8dc>
   190a8:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   190ac:	mov	r3, #3
   190b0:	add	r0, sp, #16
   190b4:	ldm	r5, {r1, r2}
   190b8:	bl	140bc <_start@@Base+0x14b8>
   190bc:	ldrb	r3, [sp, #16]
   190c0:	cmp	r3, #11
   190c4:	ldrne	r0, [pc, #644]	; 19350 <test_mixed_type_union@@Base+0x8e0>
   190c8:	bne	19198 <test_mixed_type_union@@Base+0x728>
   190cc:	ldr	r0, [sp, #20]
   190d0:	cmp	r0, #0
   190d4:	beq	190f0 <test_mixed_type_union@@Base+0x680>
   190d8:	adds	r0, r0, #4
   190dc:	beq	190f0 <test_mixed_type_union@@Base+0x680>
   190e0:	ldr	r1, [pc, #496]	; 192d8 <test_mixed_type_union@@Base+0x868>
   190e4:	bl	12964 <strcmp@plt>
   190e8:	subs	r4, r0, #0
   190ec:	beq	190f8 <test_mixed_type_union@@Base+0x688>
   190f0:	ldr	r0, [pc, #604]	; 19354 <test_mixed_type_union@@Base+0x8e4>
   190f4:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   190f8:	mov	r3, #4
   190fc:	add	r0, sp, #16
   19100:	ldm	r5, {r1, r2}
   19104:	bl	140bc <_start@@Base+0x14b8>
   19108:	ldrb	r3, [sp, #16]
   1910c:	cmp	r3, #9
   19110:	ldrne	r0, [pc, #576]	; 19358 <test_mixed_type_union@@Base+0x8e8>
   19114:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19118:	mov	r3, #5
   1911c:	add	r0, sp, #16
   19120:	ldm	r5, {r1, r2}
   19124:	bl	140bc <_start@@Base+0x14b8>
   19128:	ldrb	r3, [sp, #16]
   1912c:	cmp	r3, #9
   19130:	ldrne	r0, [pc, #548]	; 1935c <test_mixed_type_union@@Base+0x8ec>
   19134:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19138:	mov	r3, #6
   1913c:	add	r0, sp, #16
   19140:	ldm	r5, {r1, r2}
   19144:	bl	140bc <_start@@Base+0x14b8>
   19148:	ldrb	r3, [sp, #16]
   1914c:	cmp	r3, #9
   19150:	ldrne	r0, [pc, #520]	; 19360 <test_mixed_type_union@@Base+0x8f0>
   19154:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19158:	add	r0, sp, #16
   1915c:	mov	r3, #7
   19160:	ldm	r5, {r1, r2}
   19164:	bl	140bc <_start@@Base+0x14b8>
   19168:	ldrb	r6, [sp, #16]
   1916c:	cmp	r6, #9
   19170:	ldrne	r0, [pc, #492]	; 19364 <test_mixed_type_union@@Base+0x8f4>
   19174:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19178:	mov	r3, #8
   1917c:	add	r0, sp, #16
   19180:	ldm	r5, {r1, r2}
   19184:	bl	140bc <_start@@Base+0x14b8>
   19188:	ldrb	r3, [sp, #16]
   1918c:	cmp	r3, #11
   19190:	beq	191a0 <test_mixed_type_union@@Base+0x730>
   19194:	ldr	r0, [pc, #460]	; 19368 <test_mixed_type_union@@Base+0x8f8>
   19198:	bl	12970 <printf@plt>
   1919c:	b	19024 <test_mixed_type_union@@Base+0x5b4>
   191a0:	mov	r3, r6
   191a4:	add	r0, sp, #16
   191a8:	ldm	r5, {r1, r2}
   191ac:	bl	140bc <_start@@Base+0x14b8>
   191b0:	ldrb	r3, [sp, #16]
   191b4:	cmp	r3, #11
   191b8:	bne	19194 <test_mixed_type_union@@Base+0x724>
   191bc:	cmp	r8, #0
   191c0:	beq	191d0 <test_mixed_type_union@@Base+0x760>
   191c4:	ldr	r3, [r8, #-4]
   191c8:	cmp	r3, #10
   191cc:	beq	19028 <test_mixed_type_union@@Base+0x5b8>
   191d0:	ldr	r0, [pc, #404]	; 1936c <test_mixed_type_union@@Base+0x8fc>
   191d4:	b	19198 <test_mixed_type_union@@Base+0x728>
   191d8:	ldrh	r2, [r1, r2]
   191dc:	cmp	r2, #19
   191e0:	bls	18f28 <test_mixed_type_union@@Base+0x4b8>
   191e4:	ldr	r0, [pc, #388]	; 19370 <test_mixed_type_union@@Base+0x900>
   191e8:	b	18eb8 <test_mixed_type_union@@Base+0x448>
   191ec:	cmp	r6, #0
   191f0:	movne	r3, #0
   191f4:	bne	19064 <test_mixed_type_union@@Base+0x5f4>
   191f8:	add	r5, sp, #8
   191fc:	mov	r3, #0
   19200:	str	r8, [sp, #8]
   19204:	add	r0, sp, #16
   19208:	str	r6, [sp, #12]
   1920c:	ldm	r5, {r1, r2}
   19210:	bl	140bc <_start@@Base+0x14b8>
   19214:	ldrb	r3, [sp, #16]
   19218:	cmp	r3, #8
   1921c:	ldrne	r0, [pc, #336]	; 19374 <test_mixed_type_union@@Base+0x904>
   19220:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19224:	add	r0, sp, #16
   19228:	mov	r3, #1
   1922c:	ldm	r5, {r1, r2}
   19230:	bl	140bc <_start@@Base+0x14b8>
   19234:	ldrb	r9, [sp, #16]
   19238:	cmp	r9, #2
   1923c:	ldrne	r0, [pc, #308]	; 19378 <test_mixed_type_union@@Base+0x908>
   19240:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19244:	ldr	r0, [sp, #20]
   19248:	bl	14000 <_start@@Base+0x13fc>
   1924c:	cmp	r0, #42	; 0x2a
   19250:	ldrne	r0, [pc, #292]	; 1937c <test_mixed_type_union@@Base+0x90c>
   19254:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19258:	mov	r3, r9
   1925c:	add	r0, sp, #16
   19260:	ldm	r5, {r1, r2}
   19264:	bl	140bc <_start@@Base+0x14b8>
   19268:	ldrb	r3, [sp, #16]
   1926c:	cmp	r3, #2
   19270:	ldrne	r0, [pc, #264]	; 19380 <test_mixed_type_union@@Base+0x910>
   19274:	bne	19198 <test_mixed_type_union@@Base+0x728>
   19278:	ldr	r0, [sp, #20]
   1927c:	bl	14000 <_start@@Base+0x13fc>
   19280:	cmp	r0, #1
   19284:	ldrne	r0, [pc, #248]	; 19384 <test_mixed_type_union@@Base+0x914>
   19288:	bne	19198 <test_mixed_type_union@@Base+0x728>
   1928c:	mov	r0, r4
   19290:	bl	14058 <_start@@Base+0x1454>
   19294:	mov	r1, #3
   19298:	bl	13f08 <_start@@Base+0x1304>
   1929c:	cmp	r0, #11
   192a0:	ldrne	r0, [pc, #224]	; 19388 <test_mixed_type_union@@Base+0x918>
   192a4:	bne	18eb8 <test_mixed_type_union@@Base+0x448>
   192a8:	cmp	r6, #0
   192ac:	beq	192bc <test_mixed_type_union@@Base+0x84c>
   192b0:	ldr	r3, [r6, #-4]
   192b4:	cmp	r3, #3
   192b8:	bhi	19084 <test_mixed_type_union@@Base+0x614>
   192bc:	ldr	r3, [pc, #200]	; 1938c <test_mixed_type_union@@Base+0x91c>
   192c0:	mov	r2, #119	; 0x77
   192c4:	ldr	r1, [pc, #196]	; 19390 <test_mixed_type_union@@Base+0x920>
   192c8:	ldr	r0, [pc, #196]	; 19394 <test_mixed_type_union@@Base+0x924>
   192cc:	b	18ddc <test_mixed_type_union@@Base+0x36c>
   192d0:	andeq	lr, r1, lr, ror #15
   192d4:	andeq	r0, r2, r2, ror r9
   192d8:	andeq	r0, r2, sp, ror r9
   192dc:	andeq	r0, r2, fp, ror r9
   192e0:	andeq	r0, r2, r7, ror r9
   192e4:	strdeq	lr, [r1], -r8
   192e8:	strdeq	lr, [r1], -sl
   192ec:	andeq	lr, r1, fp, ror r8
   192f0:	andeq	r0, r2, r3, lsl #19
   192f4:	andeq	r3, r3, r0, ror r0
   192f8:	andeq	r0, r2, sl, lsl #20
   192fc:	muleq	r1, r8, fp
   19300:	andeq	r0, r2, r7, lsl sl
   19304:	andeq	lr, r1, ip, lsl #14
   19308:	strdeq	lr, [r1], -r3
   1930c:	andeq	lr, r1, r5, asr r8
   19310:	andeq	r0, r2, r6, ror #20
   19314:	andeq	r0, r2, pc, lsl #21
   19318:			; <UNDEFINED> instruction: 0x00020aba
   1931c:	ldrdeq	r0, [r2], -r5
   19320:	andeq	r0, r2, r3, lsl fp
   19324:	andeq	r0, r2, r1, asr #22
   19328:	andeq	r0, r2, r5, ror fp
   1932c:	andeq	r0, r2, r4, lsr #23
   19330:	ldrdeq	r0, [r2], -r3
   19334:	andeq	r0, r2, sl, ror #23
   19338:	andeq	r0, r2, ip, lsl #24
   1933c:	andeq	r0, r2, r2, lsr #24
   19340:	andeq	r0, r2, ip, lsr ip
   19344:	andeq	lr, r1, r4, lsr r7
   19348:	ldrdeq	r0, [r2], -lr
   1934c:	andeq	r0, r2, fp, asr sp
   19350:	andeq	r0, r2, lr, lsl #27
   19354:	andeq	r0, r2, r6, asr #27
   19358:	andeq	r0, r2, r4, lsl #28
   1935c:	andeq	r0, r2, r6, lsr #28
   19360:	andeq	r0, r2, r8, asr #28
   19364:	andeq	r0, r2, ip, ror #28
   19368:	andeq	r0, r2, pc, lsl #29
   1936c:			; <UNDEFINED> instruction: 0x00020ebb
   19370:	andeq	r0, r2, ip, ror #21
   19374:	andeq	r0, r2, r0, ror #24
   19378:	andeq	r0, r2, r5, lsl #25
   1937c:	andeq	r0, r2, r8, lsr #25
   19380:	ldrdeq	r0, [r2], -sl
   19384:	strdeq	r0, [r2], -ip
   19388:	andeq	r0, r2, sp, lsr #26
   1938c:	andeq	lr, r1, r3, asr r7
   19390:	andeq	lr, r1, fp, lsl #19
   19394:	strdeq	lr, [r1], -r3

00019398 <test_add_set_defaults@@Base>:
   19398:	push	{r0, r1, r2, r4, r5, lr}
   1939c:	mov	r4, r0
   193a0:	bl	1ab18 <flatcc_builder_reset@@Base>
   193a4:	mov	r0, r4
   193a8:	bl	12e78 <_start@@Base+0x274>
   193ac:	ldr	r1, [pc, #348]	; 19510 <test_add_set_defaults@@Base+0x178>
   193b0:	mov	r0, r4
   193b4:	bl	1313c <_start@@Base+0x538>
   193b8:	mov	r3, #2
   193bc:	mov	r1, #1
   193c0:	mov	r2, r3
   193c4:	mov	r0, r4
   193c8:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   193cc:	cmp	r0, #0
   193d0:	movne	r3, #100	; 0x64
   193d4:	strhne	r3, [r0]
   193d8:	mov	r0, r4
   193dc:	bl	14258 <_start@@Base+0x1654>
   193e0:	add	r1, sp, #4
   193e4:	mov	r0, r4
   193e8:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   193ec:	bl	12d6c <_start@@Base+0x168>
   193f0:	mov	r5, r0
   193f4:	bl	132b8 <_start@@Base+0x6b4>
   193f8:	cmp	r0, #0
   193fc:	ldrne	r0, [pc, #272]	; 19514 <test_add_set_defaults@@Base+0x17c>
   19400:	bne	194fc <test_add_set_defaults@@Base+0x164>
   19404:	mov	r0, r5
   19408:	bl	135d8 <_start@@Base+0x9d4>
   1940c:	cmp	r0, #0
   19410:	ldreq	r0, [pc, #256]	; 19518 <test_add_set_defaults@@Base+0x180>
   19414:	beq	194fc <test_add_set_defaults@@Base+0x164>
   19418:	mov	r0, r5
   1941c:	bl	14138 <_start@@Base+0x1534>
   19420:	subs	r5, r0, #0
   19424:	ldrne	r0, [pc, #240]	; 1951c <test_add_set_defaults@@Base+0x184>
   19428:	bne	194fc <test_add_set_defaults@@Base+0x164>
   1942c:	mov	r0, r4
   19430:	bl	1ab18 <flatcc_builder_reset@@Base>
   19434:	mov	r0, r4
   19438:	bl	12e78 <_start@@Base+0x274>
   1943c:	ldr	r1, [pc, #204]	; 19510 <test_add_set_defaults@@Base+0x178>
   19440:	mov	r0, r4
   19444:	bl	1313c <_start@@Base+0x538>
   19448:	mov	r3, #2
   1944c:	mov	r0, r4
   19450:	mov	r2, r3
   19454:	mov	r1, r3
   19458:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1945c:	cmp	r0, #0
   19460:	mov	r1, #1
   19464:	movne	r3, #100	; 0x64
   19468:	strhne	r3, [r0]
   1946c:	mov	r3, #2
   19470:	mov	r0, r4
   19474:	mov	r2, r3
   19478:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1947c:	cmp	r0, #0
   19480:	mov	r1, #6
   19484:	movne	r3, #100	; 0x64
   19488:	strhne	r3, [r0]
   1948c:	mov	r3, #1
   19490:	mov	r0, r4
   19494:	mov	r2, r3
   19498:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1949c:	cmp	r0, #0
   194a0:	movne	r3, #8
   194a4:	strbne	r3, [r0]
   194a8:	mov	r0, r4
   194ac:	bl	14258 <_start@@Base+0x1654>
   194b0:	add	r1, sp, #4
   194b4:	mov	r0, r4
   194b8:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   194bc:	bl	12d6c <_start@@Base+0x168>
   194c0:	mov	r4, r0
   194c4:	bl	132b8 <_start@@Base+0x6b4>
   194c8:	cmp	r0, #0
   194cc:	ldreq	r0, [pc, #76]	; 19520 <test_add_set_defaults@@Base+0x188>
   194d0:	beq	194fc <test_add_set_defaults@@Base+0x164>
   194d4:	mov	r0, r4
   194d8:	bl	135d8 <_start@@Base+0x9d4>
   194dc:	cmp	r0, #0
   194e0:	ldreq	r0, [pc, #60]	; 19524 <test_add_set_defaults@@Base+0x18c>
   194e4:	beq	194fc <test_add_set_defaults@@Base+0x164>
   194e8:	mov	r0, r4
   194ec:	bl	14138 <_start@@Base+0x1534>
   194f0:	cmp	r0, #0
   194f4:	bne	19504 <test_add_set_defaults@@Base+0x16c>
   194f8:	ldr	r0, [pc, #40]	; 19528 <test_add_set_defaults@@Base+0x190>
   194fc:	mvn	r5, #0
   19500:	bl	129b8 <puts@plt>
   19504:	mov	r0, r5
   19508:	add	sp, sp, #12
   1950c:	pop	{r4, r5, pc}
   19510:	andeq	lr, r1, r9, ror #31
   19514:	andeq	r0, r2, r1, ror #29
   19518:	andeq	r0, r2, ip, lsl #30
   1951c:	andeq	r0, r2, r9, lsr pc
   19520:	andeq	r0, r2, r7, ror #30
   19524:	muleq	r2, sl, pc	; <UNPREDICTABLE>
   19528:	ldrdeq	r0, [r2], -r9

0001952c <test_nested_buffer@@Base>:
   1952c:	push	{r0, r1, r2, r4, r5, lr}
   19530:	mov	r4, r0
   19534:	bl	1ab18 <flatcc_builder_reset@@Base>
   19538:	mov	r0, r4
   1953c:	bl	12e78 <_start@@Base+0x274>
   19540:	ldr	r1, [pc, #232]	; 19630 <test_nested_buffer@@Base+0x104>
   19544:	mov	r0, r4
   19548:	bl	1313c <_start@@Base+0x538>
   1954c:	mov	r0, r4
   19550:	bl	12e78 <_start@@Base+0x274>
   19554:	ldr	r1, [pc, #216]	; 19634 <test_nested_buffer@@Base+0x108>
   19558:	mov	r0, r4
   1955c:	bl	1313c <_start@@Base+0x538>
   19560:	mov	r0, r4
   19564:	bl	15070 <_start@@Base+0x246c>
   19568:	mov	r1, #10
   1956c:	mov	r0, r4
   19570:	bl	14188 <_start@@Base+0x1584>
   19574:	mov	r0, r4
   19578:	bl	14258 <_start@@Base+0x1654>
   1957c:	add	r1, sp, #4
   19580:	mov	r0, r4
   19584:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   19588:	ldr	r3, [pc, #168]	; 19638 <test_nested_buffer@@Base+0x10c>
   1958c:	mov	r1, r0
   19590:	mov	r4, r0
   19594:	ldr	r0, [pc, #160]	; 1963c <test_nested_buffer@@Base+0x110>
   19598:	ldr	r2, [sp, #4]
   1959c:	ldr	r3, [r3]
   195a0:	bl	13028 <_start@@Base+0x424>
   195a4:	mov	r0, r4
   195a8:	bl	12d6c <_start@@Base+0x168>
   195ac:	mov	r4, r0
   195b0:	bl	13944 <_start@@Base+0xd40>
   195b4:	ldr	r1, [pc, #116]	; 19630 <test_nested_buffer@@Base+0x104>
   195b8:	bl	12964 <strcmp@plt>
   195bc:	cmp	r0, #0
   195c0:	ldrne	r0, [pc, #120]	; 19640 <test_nested_buffer@@Base+0x114>
   195c4:	bne	19620 <test_nested_buffer@@Base+0xf4>
   195c8:	mov	r0, r4
   195cc:	bl	12dd4 <_start@@Base+0x1d0>
   195d0:	mov	r5, r0
   195d4:	mov	r0, r4
   195d8:	bl	1325c <_start@@Base+0x658>
   195dc:	cmp	r0, #10
   195e0:	ldrne	r0, [pc, #92]	; 19644 <test_nested_buffer@@Base+0x118>
   195e4:	bne	19620 <test_nested_buffer@@Base+0xf4>
   195e8:	mov	r0, r5
   195ec:	bl	13944 <_start@@Base+0xd40>
   195f0:	cmp	r0, #0
   195f4:	bne	1960c <test_nested_buffer@@Base+0xe0>
   195f8:	ldr	r3, [pc, #72]	; 19648 <test_nested_buffer@@Base+0x11c>
   195fc:	movw	r2, #2188	; 0x88c
   19600:	ldr	r1, [pc, #68]	; 1964c <test_nested_buffer@@Base+0x120>
   19604:	ldr	r0, [pc, #68]	; 19650 <test_nested_buffer@@Base+0x124>
   19608:	bl	12a60 <__assert_fail@plt>
   1960c:	ldr	r1, [pc, #32]	; 19634 <test_nested_buffer@@Base+0x108>
   19610:	bl	12964 <strcmp@plt>
   19614:	cmp	r0, #0
   19618:	beq	19628 <test_nested_buffer@@Base+0xfc>
   1961c:	ldr	r0, [pc, #48]	; 19654 <test_nested_buffer@@Base+0x128>
   19620:	bl	129b8 <puts@plt>
   19624:	mvn	r0, #0
   19628:	add	sp, sp, #12
   1962c:	pop	{r4, r5, pc}
   19630:	andeq	lr, r1, r9, ror #31
   19634:	andeq	r1, r2, pc
   19638:	andeq	r3, r3, r0, ror r0
   1963c:	andeq	r1, r2, pc, lsl r0
   19640:	andeq	r1, r2, r1, lsr r0
   19644:	andeq	r1, r2, ip, asr #32
   19648:	andeq	lr, r1, r8, ror r7
   1964c:	andeq	pc, r1, lr, lsr #12
   19650:	andeq	r1, r2, r0, ror r0
   19654:	andeq	r1, r2, r9, lsl #1

00019658 <test_nested_buffer_first@@Base>:
   19658:	push	{r0, r1, r2, r4, r5, lr}
   1965c:	mov	r4, r0
   19660:	bl	1ab18 <flatcc_builder_reset@@Base>
   19664:	mov	r0, r4
   19668:	bl	12e78 <_start@@Base+0x274>
   1966c:	mov	r0, r4
   19670:	bl	12e78 <_start@@Base+0x274>
   19674:	ldr	r1, [pc, #224]	; 1975c <test_nested_buffer_first@@Base+0x104>
   19678:	mov	r0, r4
   1967c:	bl	1313c <_start@@Base+0x538>
   19680:	mov	r0, r4
   19684:	bl	15070 <_start@@Base+0x246c>
   19688:	mov	r1, #10
   1968c:	mov	r0, r4
   19690:	bl	14188 <_start@@Base+0x1584>
   19694:	ldr	r1, [pc, #196]	; 19760 <test_nested_buffer_first@@Base+0x108>
   19698:	mov	r0, r4
   1969c:	bl	1313c <_start@@Base+0x538>
   196a0:	mov	r0, r4
   196a4:	bl	14258 <_start@@Base+0x1654>
   196a8:	add	r1, sp, #4
   196ac:	mov	r0, r4
   196b0:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   196b4:	ldr	r3, [pc, #168]	; 19764 <test_nested_buffer_first@@Base+0x10c>
   196b8:	mov	r1, r0
   196bc:	mov	r4, r0
   196c0:	ldr	r0, [pc, #160]	; 19768 <test_nested_buffer_first@@Base+0x110>
   196c4:	ldr	r2, [sp, #4]
   196c8:	ldr	r3, [r3]
   196cc:	bl	13028 <_start@@Base+0x424>
   196d0:	mov	r0, r4
   196d4:	bl	12d6c <_start@@Base+0x168>
   196d8:	mov	r4, r0
   196dc:	bl	13944 <_start@@Base+0xd40>
   196e0:	ldr	r1, [pc, #120]	; 19760 <test_nested_buffer_first@@Base+0x108>
   196e4:	bl	12964 <strcmp@plt>
   196e8:	cmp	r0, #0
   196ec:	ldrne	r0, [pc, #120]	; 1976c <test_nested_buffer_first@@Base+0x114>
   196f0:	bne	1974c <test_nested_buffer_first@@Base+0xf4>
   196f4:	mov	r0, r4
   196f8:	bl	12dd4 <_start@@Base+0x1d0>
   196fc:	mov	r5, r0
   19700:	mov	r0, r4
   19704:	bl	1325c <_start@@Base+0x658>
   19708:	cmp	r0, #10
   1970c:	ldrne	r0, [pc, #92]	; 19770 <test_nested_buffer_first@@Base+0x118>
   19710:	bne	1974c <test_nested_buffer_first@@Base+0xf4>
   19714:	mov	r0, r5
   19718:	bl	13944 <_start@@Base+0xd40>
   1971c:	cmp	r0, #0
   19720:	bne	19738 <test_nested_buffer_first@@Base+0xe0>
   19724:	ldr	r3, [pc, #72]	; 19774 <test_nested_buffer_first@@Base+0x11c>
   19728:	movw	r2, #2241	; 0x8c1
   1972c:	ldr	r1, [pc, #68]	; 19778 <test_nested_buffer_first@@Base+0x120>
   19730:	ldr	r0, [pc, #68]	; 1977c <test_nested_buffer_first@@Base+0x124>
   19734:	bl	12a60 <__assert_fail@plt>
   19738:	ldr	r1, [pc, #28]	; 1975c <test_nested_buffer_first@@Base+0x104>
   1973c:	bl	12964 <strcmp@plt>
   19740:	cmp	r0, #0
   19744:	beq	19754 <test_nested_buffer_first@@Base+0xfc>
   19748:	ldr	r0, [pc, #48]	; 19780 <test_nested_buffer_first@@Base+0x128>
   1974c:	bl	129b8 <puts@plt>
   19750:	mvn	r0, #0
   19754:	add	sp, sp, #12
   19758:	pop	{r4, r5, pc}
   1975c:	andeq	r1, r2, pc
   19760:	andeq	lr, r1, r9, ror #31
   19764:	andeq	r3, r3, r0, ror r0
   19768:	andeq	r1, r2, pc, lsl r0
   1976c:	andeq	r1, r2, r1, lsr r0
   19770:	andeq	r1, r2, ip, asr #32
   19774:	andeq	lr, r1, fp, lsl #15
   19778:	andeq	pc, r1, lr, lsr #12
   1977c:	andeq	r1, r2, r0, ror r0
   19780:	andeq	r1, r2, r9, lsl #1

00019784 <test_nested_buffer_using_nest@@Base>:
   19784:	push	{r4, r5, lr}
   19788:	sub	sp, sp, #1040	; 0x410
   1978c:	mov	r4, r0
   19790:	sub	sp, sp, #4
   19794:	bl	1ab18 <flatcc_builder_reset@@Base>
   19798:	mov	r0, r4
   1979c:	bl	12e78 <_start@@Base+0x274>
   197a0:	ldr	r1, [pc, #404]	; 1993c <test_nested_buffer_using_nest@@Base+0x1b8>
   197a4:	mov	r0, r4
   197a8:	bl	1313c <_start@@Base+0x538>
   197ac:	mov	r3, #2
   197b0:	mov	r1, #1
   197b4:	mov	r2, r3
   197b8:	mov	r0, r4
   197bc:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   197c0:	cmp	r0, #0
   197c4:	movne	r3, #42	; 0x2a
   197c8:	strhne	r3, [r0]
   197cc:	mov	r0, r4
   197d0:	bl	14258 <_start@@Base+0x1654>
   197d4:	mov	r0, r4
   197d8:	bl	1cce4 <flatcc_builder_get_buffer_size@@Base>
   197dc:	mov	r5, r0
   197e0:	mov	r2, #1024	; 0x400
   197e4:	add	r1, sp, #16
   197e8:	mov	r0, r4
   197ec:	bl	1cdb0 <flatcc_builder_copy_buffer@@Base>
   197f0:	cmp	r0, #0
   197f4:	ldreq	r0, [pc, #324]	; 19940 <test_nested_buffer_using_nest@@Base+0x1bc>
   197f8:	beq	19924 <test_nested_buffer_using_nest@@Base+0x1a0>
   197fc:	mov	r0, r4
   19800:	bl	1ab18 <flatcc_builder_reset@@Base>
   19804:	mov	r0, r4
   19808:	bl	12e78 <_start@@Base+0x274>
   1980c:	mvn	r3, #0
   19810:	mov	r2, r5
   19814:	add	r1, sp, #16
   19818:	mov	r0, r4
   1981c:	str	r3, [sp, #4]
   19820:	mov	r3, #8
   19824:	str	r3, [sp]
   19828:	mov	r3, #1
   1982c:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   19830:	subs	r5, r0, #0
   19834:	beq	1984c <test_nested_buffer_using_nest@@Base+0xc8>
   19838:	mov	r1, #13
   1983c:	mov	r0, r4
   19840:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   19844:	cmp	r0, #0
   19848:	strne	r5, [r0]
   1984c:	mov	r1, #10
   19850:	mov	r0, r4
   19854:	bl	14188 <_start@@Base+0x1584>
   19858:	ldr	r1, [pc, #228]	; 19944 <test_nested_buffer_using_nest@@Base+0x1c0>
   1985c:	mov	r0, r4
   19860:	bl	1313c <_start@@Base+0x538>
   19864:	mov	r0, r4
   19868:	bl	14258 <_start@@Base+0x1654>
   1986c:	add	r1, sp, #12
   19870:	mov	r0, r4
   19874:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   19878:	ldr	r3, [pc, #200]	; 19948 <test_nested_buffer_using_nest@@Base+0x1c4>
   1987c:	mov	r1, r0
   19880:	mov	r4, r0
   19884:	ldr	r0, [pc, #192]	; 1994c <test_nested_buffer_using_nest@@Base+0x1c8>
   19888:	ldr	r2, [sp, #12]
   1988c:	ldr	r3, [r3]
   19890:	bl	13028 <_start@@Base+0x424>
   19894:	mov	r0, r4
   19898:	bl	12d6c <_start@@Base+0x168>
   1989c:	mov	r4, r0
   198a0:	bl	13944 <_start@@Base+0xd40>
   198a4:	ldr	r1, [pc, #152]	; 19944 <test_nested_buffer_using_nest@@Base+0x1c0>
   198a8:	bl	12964 <strcmp@plt>
   198ac:	cmp	r0, #0
   198b0:	ldrne	r0, [pc, #152]	; 19950 <test_nested_buffer_using_nest@@Base+0x1cc>
   198b4:	bne	19924 <test_nested_buffer_using_nest@@Base+0x1a0>
   198b8:	mov	r0, r4
   198bc:	bl	12dd4 <_start@@Base+0x1d0>
   198c0:	mov	r5, r0
   198c4:	mov	r0, r4
   198c8:	bl	1325c <_start@@Base+0x658>
   198cc:	cmp	r0, #10
   198d0:	ldrne	r0, [pc, #124]	; 19954 <test_nested_buffer_using_nest@@Base+0x1d0>
   198d4:	bne	19924 <test_nested_buffer_using_nest@@Base+0x1a0>
   198d8:	mov	r0, r5
   198dc:	bl	13944 <_start@@Base+0xd40>
   198e0:	cmp	r0, #0
   198e4:	bne	198fc <test_nested_buffer_using_nest@@Base+0x178>
   198e8:	ldr	r3, [pc, #104]	; 19958 <test_nested_buffer_using_nest@@Base+0x1d4>
   198ec:	movw	r2, #2298	; 0x8fa
   198f0:	ldr	r1, [pc, #100]	; 1995c <test_nested_buffer_using_nest@@Base+0x1d8>
   198f4:	ldr	r0, [pc, #100]	; 19960 <test_nested_buffer_using_nest@@Base+0x1dc>
   198f8:	bl	12a60 <__assert_fail@plt>
   198fc:	ldr	r1, [pc, #56]	; 1993c <test_nested_buffer_using_nest@@Base+0x1b8>
   19900:	bl	12964 <strcmp@plt>
   19904:	subs	r4, r0, #0
   19908:	ldrne	r0, [pc, #84]	; 19964 <test_nested_buffer_using_nest@@Base+0x1e0>
   1990c:	bne	19924 <test_nested_buffer_using_nest@@Base+0x1a0>
   19910:	mov	r0, r5
   19914:	bl	1357c <_start@@Base+0x978>
   19918:	cmp	r0, #42	; 0x2a
   1991c:	beq	1992c <test_nested_buffer_using_nest@@Base+0x1a8>
   19920:	ldr	r0, [pc, #64]	; 19968 <test_nested_buffer_using_nest@@Base+0x1e4>
   19924:	mvn	r4, #0
   19928:	bl	129b8 <puts@plt>
   1992c:	mov	r0, r4
   19930:	add	sp, sp, #1040	; 0x410
   19934:	add	sp, sp, #4
   19938:	pop	{r4, r5, pc}
   1993c:	andeq	r1, r2, pc
   19940:	andeq	r1, r2, r6, lsr #1
   19944:	andeq	lr, r1, r9, ror #31
   19948:	andeq	r3, r3, r0, ror r0
   1994c:	andeq	r1, r2, r0, asr #1
   19950:	andeq	r1, r2, r1, lsr r0
   19954:	andeq	r1, r2, ip, asr #32
   19958:	andeq	lr, r1, r4, lsr #15
   1995c:	andeq	pc, r1, lr, lsr #12
   19960:	andeq	r1, r2, r0, ror r0
   19964:	andeq	r1, r2, r9, lsl #1
   19968:	andeq	r1, r2, r2, ror #1

0001996c <verify_include@@Base>:
   1996c:	mov	r0, #0
   19970:	bx	lr

00019974 <test_struct_buffer@@Base>:
   19974:	push	{r4, r5, lr}
   19978:	mov	r4, r0
   1997c:	sub	sp, sp, #108	; 0x6c
   19980:	bl	1ab18 <flatcc_builder_reset@@Base>
   19984:	mov	r0, r4
   19988:	bl	14ddc <_start@@Base+0x21d8>
   1998c:	mov	r0, r4
   19990:	bl	1cce4 <flatcc_builder_get_buffer_size@@Base>
   19994:	cmp	r0, #48	; 0x30
   19998:	beq	199b0 <test_struct_buffer@@Base+0x3c>
   1999c:	ldr	r3, [pc, #384]	; 19b24 <test_struct_buffer@@Base+0x1b0>
   199a0:	movw	r2, #2339	; 0x923
   199a4:	ldr	r1, [pc, #380]	; 19b28 <test_struct_buffer@@Base+0x1b4>
   199a8:	ldr	r0, [pc, #380]	; 19b2c <test_struct_buffer@@Base+0x1b8>
   199ac:	bl	12a60 <__assert_fail@plt>
   199b0:	mov	r1, r0
   199b4:	ldr	r0, [pc, #372]	; 19b30 <test_struct_buffer@@Base+0x1bc>
   199b8:	bl	12970 <printf@plt>
   199bc:	mov	r0, r4
   199c0:	bl	1cefc <flatcc_builder_get_emit_context@@Base>
   199c4:	ldr	r5, [r0, #24]
   199c8:	cmp	r5, #48	; 0x30
   199cc:	beq	199e4 <test_struct_buffer@@Base+0x70>
   199d0:	ldr	r3, [pc, #332]	; 19b24 <test_struct_buffer@@Base+0x1b0>
   199d4:	movw	r2, #2341	; 0x925
   199d8:	ldr	r1, [pc, #328]	; 19b28 <test_struct_buffer@@Base+0x1b4>
   199dc:	ldr	r0, [pc, #336]	; 19b34 <test_struct_buffer@@Base+0x1c0>
   199e0:	b	199ac <test_struct_buffer@@Base+0x38>
   199e4:	mov	r2, #100	; 0x64
   199e8:	add	r1, sp, #4
   199ec:	mov	r0, r4
   199f0:	bl	1cdb0 <flatcc_builder_copy_buffer@@Base>
   199f4:	cmp	r0, #0
   199f8:	ldreq	r0, [pc, #312]	; 19b38 <test_struct_buffer@@Base+0x1c4>
   199fc:	beq	19af4 <test_struct_buffer@@Base+0x180>
   19a00:	mov	r2, r5
   19a04:	add	r1, sp, #4
   19a08:	ldr	r3, [pc, #300]	; 19b3c <test_struct_buffer@@Base+0x1c8>
   19a0c:	ldr	r0, [pc, #300]	; 19b40 <test_struct_buffer@@Base+0x1cc>
   19a10:	ldr	r3, [r3]
   19a14:	bl	13028 <_start@@Base+0x424>
   19a18:	ldr	r1, [pc, #292]	; 19b44 <test_struct_buffer@@Base+0x1d0>
   19a1c:	add	r0, sp, #4
   19a20:	bl	12d00 <_start@@Base+0xfc>
   19a24:	cmp	r0, #0
   19a28:	ldreq	r0, [pc, #280]	; 19b48 <test_struct_buffer@@Base+0x1d4>
   19a2c:	beq	19af4 <test_struct_buffer@@Base+0x180>
   19a30:	add	r0, sp, #4
   19a34:	ldr	r1, [pc, #272]	; 19b4c <test_struct_buffer@@Base+0x1d8>
   19a38:	bl	12d00 <_start@@Base+0xfc>
   19a3c:	subs	r4, r0, #0
   19a40:	ldrne	r0, [pc, #264]	; 19b50 <test_struct_buffer@@Base+0x1dc>
   19a44:	bne	19af4 <test_struct_buffer@@Base+0x180>
   19a48:	add	r0, sp, #4
   19a4c:	ldr	r1, [pc, #240]	; 19b44 <test_struct_buffer@@Base+0x1d0>
   19a50:	bl	12d00 <_start@@Base+0xfc>
   19a54:	cmp	r0, #0
   19a58:	ldreq	r0, [pc, #244]	; 19b54 <test_struct_buffer@@Base+0x1e0>
   19a5c:	beq	19af4 <test_struct_buffer@@Base+0x180>
   19a60:	add	r0, sp, #4
   19a64:	ldr	r1, [pc, #216]	; 19b44 <test_struct_buffer@@Base+0x1d0>
   19a68:	bl	12d00 <_start@@Base+0xfc>
   19a6c:	cmp	r0, #0
   19a70:	beq	19b08 <test_struct_buffer@@Base+0x194>
   19a74:	ldr	r3, [sp, #4]
   19a78:	add	r2, sp, #4
   19a7c:	vldr	s15, [pc, #148]	; 19b18 <test_struct_buffer@@Base+0x1a4>
   19a80:	add	r3, r2, r3
   19a84:	vldr	s14, [r3]
   19a88:	vcmp.f32	s14, s15
   19a8c:	vmrs	APSR_nzcv, fpscr
   19a90:	bne	19af0 <test_struct_buffer@@Base+0x17c>
   19a94:	vldr	s15, [pc, #128]	; 19b1c <test_struct_buffer@@Base+0x1a8>
   19a98:	vldr	s14, [r3, #4]
   19a9c:	vcmp.f32	s14, s15
   19aa0:	vmrs	APSR_nzcv, fpscr
   19aa4:	bne	19af0 <test_struct_buffer@@Base+0x17c>
   19aa8:	vldr	s15, [pc, #112]	; 19b20 <test_struct_buffer@@Base+0x1ac>
   19aac:	vldr	s14, [r3, #8]
   19ab0:	vcmp.f32	s14, s15
   19ab4:	vmrs	APSR_nzcv, fpscr
   19ab8:	bne	19af0 <test_struct_buffer@@Base+0x17c>
   19abc:	vldr	d7, [pc, #76]	; 19b10 <test_struct_buffer@@Base+0x19c>
   19ac0:	vldr	d6, [r3, #16]
   19ac4:	vcmp.f64	d6, d7
   19ac8:	vmrs	APSR_nzcv, fpscr
   19acc:	bne	19af0 <test_struct_buffer@@Base+0x17c>
   19ad0:	ldr	r2, [r3, #24]
   19ad4:	ldr	r1, [pc, #124]	; 19b58 <test_struct_buffer@@Base+0x1e4>
   19ad8:	bic	r2, r2, #65280	; 0xff00
   19adc:	cmp	r2, r1
   19ae0:	bne	19af0 <test_struct_buffer@@Base+0x17c>
   19ae4:	ldrsb	r3, [r3, #28]
   19ae8:	cmn	r3, #17
   19aec:	beq	19afc <test_struct_buffer@@Base+0x188>
   19af0:	ldr	r0, [pc, #100]	; 19b5c <test_struct_buffer@@Base+0x1e8>
   19af4:	mvn	r4, #0
   19af8:	bl	129b8 <puts@plt>
   19afc:	mov	r0, r4
   19b00:	add	sp, sp, #108	; 0x6c
   19b04:	pop	{r4, r5, pc}
   19b08:	ldr	r3, [r0]
   19b0c:	udf	#0
   19b10:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19b14:	andsmi	ip, r0, ip, asr #25
   19b18:	svccc	0x00800000
   19b1c:	andmi	r0, r0, r0
   19b20:	submi	r0, r0, r0
   19b24:	andeq	lr, r1, r2, asr #15
   19b28:	andeq	pc, r1, lr, lsr #12
   19b2c:	andeq	r1, r2, r6, lsl #2
   19b30:	andeq	r1, r2, r1, lsl r1
   19b34:	andeq	r1, r2, lr, lsr #2
   19b38:	andeq	r1, r2, r9, ror r1
   19b3c:	andeq	r3, r3, r0, ror r0
   19b40:	strdeq	r1, [r2], -sl
   19b44:	andeq	lr, r1, lr, ror #15
   19b48:	muleq	r2, r3, r1
   19b4c:	andeq	r1, r2, r5, lsl #3
   19b50:	andeq	r1, r2, sl, lsl #3
   19b54:			; <UNDEFINED> instruction: 0x000211b4
   19b58:	beq	fea99b80 <__bss_end__@@Base+0xfea66b00>
   19b5c:	ldrdeq	r1, [r2], -r7

00019b60 <test_typed_struct_buffer@@Base>:
   19b60:	push	{r4, r5, r6, r7, lr}
   19b64:	mov	r5, r0
   19b68:	sub	sp, sp, #116	; 0x74
   19b6c:	bl	1ab18 <flatcc_builder_reset@@Base>
   19b70:	mov	r2, #16
   19b74:	mov	r1, #32
   19b78:	mov	r0, r5
   19b7c:	bl	1b1dc <flatcc_builder_start_struct@@Base>
   19b80:	cmp	r0, #0
   19b84:	beq	19bcc <test_typed_struct_buffer@@Base+0x6c>
   19b88:	mov	r3, #1065353216	; 0x3f800000
   19b8c:	ldr	r2, [pc, #600]	; 19dec <test_typed_struct_buffer@@Base+0x28c>
   19b90:	str	r3, [r0]
   19b94:	mov	r3, #1073741824	; 0x40000000
   19b98:	str	r3, [r0, #4]
   19b9c:	ldr	r3, [pc, #588]	; 19df0 <test_typed_struct_buffer@@Base+0x290>
   19ba0:	str	r3, [r0, #8]
   19ba4:	ldr	r3, [pc, #584]	; 19df4 <test_typed_struct_buffer@@Base+0x294>
   19ba8:	strd	r2, [r0, #16]
   19bac:	mov	r3, #8
   19bb0:	strb	r3, [r0, #24]
   19bb4:	movw	r3, #2730	; 0xaaa
   19bb8:	strh	r3, [r0, #26]
   19bbc:	mvn	r3, #16
   19bc0:	strb	r3, [r0, #28]
   19bc4:	mov	r0, r5
   19bc8:	bl	1b22c <flatcc_builder_end_struct@@Base>
   19bcc:	mov	r2, #0
   19bd0:	mov	r7, #16
   19bd4:	ldr	r1, [pc, #540]	; 19df8 <test_typed_struct_buffer@@Base+0x298>
   19bd8:	mov	r3, r0
   19bdc:	mov	r0, r5
   19be0:	str	r7, [sp]
   19be4:	str	r2, [sp, #4]
   19be8:	bl	1ae0c <flatcc_builder_create_buffer@@Base>
   19bec:	mov	r0, r5
   19bf0:	bl	1cce4 <flatcc_builder_get_buffer_size@@Base>
   19bf4:	cmp	r0, #48	; 0x30
   19bf8:	mov	r1, r0
   19bfc:	beq	19c14 <test_typed_struct_buffer@@Base+0xb4>
   19c00:	ldr	r3, [pc, #500]	; 19dfc <test_typed_struct_buffer@@Base+0x29c>
   19c04:	movw	r2, #2388	; 0x954
   19c08:	ldr	r1, [pc, #496]	; 19e00 <test_typed_struct_buffer@@Base+0x2a0>
   19c0c:	ldr	r0, [pc, #496]	; 19e04 <test_typed_struct_buffer@@Base+0x2a4>
   19c10:	bl	12a60 <__assert_fail@plt>
   19c14:	ldr	r0, [pc, #492]	; 19e08 <test_typed_struct_buffer@@Base+0x2a8>
   19c18:	bl	12970 <printf@plt>
   19c1c:	mov	r0, r5
   19c20:	bl	1cefc <flatcc_builder_get_emit_context@@Base>
   19c24:	ldr	r6, [r0, #24]
   19c28:	cmp	r6, #48	; 0x30
   19c2c:	beq	19c44 <test_typed_struct_buffer@@Base+0xe4>
   19c30:	ldr	r3, [pc, #452]	; 19dfc <test_typed_struct_buffer@@Base+0x29c>
   19c34:	movw	r2, #2390	; 0x956
   19c38:	ldr	r1, [pc, #448]	; 19e00 <test_typed_struct_buffer@@Base+0x2a0>
   19c3c:	ldr	r0, [pc, #456]	; 19e0c <test_typed_struct_buffer@@Base+0x2ac>
   19c40:	b	19c10 <test_typed_struct_buffer@@Base+0xb0>
   19c44:	add	r4, sp, #12
   19c48:	mov	r2, #100	; 0x64
   19c4c:	mov	r1, r4
   19c50:	mov	r0, r5
   19c54:	bl	1cdb0 <flatcc_builder_copy_buffer@@Base>
   19c58:	cmp	r0, #0
   19c5c:	ldreq	r0, [pc, #428]	; 19e10 <test_typed_struct_buffer@@Base+0x2b0>
   19c60:	beq	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19c64:	mov	r2, r6
   19c68:	mov	r1, r4
   19c6c:	ldr	r3, [pc, #416]	; 19e14 <test_typed_struct_buffer@@Base+0x2b4>
   19c70:	ldr	r0, [pc, #416]	; 19e18 <test_typed_struct_buffer@@Base+0x2b8>
   19c74:	ldr	r3, [r3]
   19c78:	bl	13028 <_start@@Base+0x424>
   19c7c:	ldr	r1, [pc, #372]	; 19df8 <test_typed_struct_buffer@@Base+0x298>
   19c80:	mov	r0, r4
   19c84:	bl	12d00 <_start@@Base+0xfc>
   19c88:	cmp	r0, #0
   19c8c:	ldreq	r0, [pc, #392]	; 19e1c <test_typed_struct_buffer@@Base+0x2bc>
   19c90:	beq	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19c94:	mov	r0, r4
   19c98:	ldr	r1, [pc, #384]	; 19e20 <test_typed_struct_buffer@@Base+0x2c0>
   19c9c:	bl	12d00 <_start@@Base+0xfc>
   19ca0:	cmp	r0, #0
   19ca4:	ldrne	r0, [pc, #376]	; 19e24 <test_typed_struct_buffer@@Base+0x2c4>
   19ca8:	bne	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19cac:	mov	r0, r4
   19cb0:	ldr	r1, [pc, #320]	; 19df8 <test_typed_struct_buffer@@Base+0x298>
   19cb4:	bl	12d00 <_start@@Base+0xfc>
   19cb8:	cmp	r0, #0
   19cbc:	ldreq	r0, [pc, #356]	; 19e28 <test_typed_struct_buffer@@Base+0x2c8>
   19cc0:	beq	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19cc4:	ldr	r3, [pc, #352]	; 19e2c <test_typed_struct_buffer@@Base+0x2cc>
   19cc8:	ldr	r5, [sp, #16]
   19ccc:	cmp	r5, r3
   19cd0:	bne	19ce0 <test_typed_struct_buffer@@Base+0x180>
   19cd4:	ldr	r3, [sp, #12]
   19cd8:	cmn	r4, r3
   19cdc:	bne	19cf4 <test_typed_struct_buffer@@Base+0x194>
   19ce0:	ldr	r0, [pc, #328]	; 19e30 <test_typed_struct_buffer@@Base+0x2d0>
   19ce4:	bl	129b8 <puts@plt>
   19ce8:	mvn	r0, #0
   19cec:	add	sp, sp, #116	; 0x74
   19cf0:	pop	{r4, r5, r6, r7, pc}
   19cf4:	mov	r3, #32
   19cf8:	mov	r2, r5
   19cfc:	str	r7, [sp]
   19d00:	mov	r1, r6
   19d04:	mov	r0, r4
   19d08:	bl	1db18 <flatcc_verify_struct_as_typed_root@@Base>
   19d0c:	cmp	r0, #0
   19d10:	ldrne	r0, [pc, #284]	; 19e34 <test_typed_struct_buffer@@Base+0x2d4>
   19d14:	bne	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19d18:	ldr	r3, [sp, #16]
   19d1c:	cmp	r3, r5
   19d20:	bne	19d30 <test_typed_struct_buffer@@Base+0x1d0>
   19d24:	ldr	r5, [sp, #12]
   19d28:	adds	r5, r4, r5
   19d2c:	bne	19d38 <test_typed_struct_buffer@@Base+0x1d8>
   19d30:	ldr	r0, [pc, #256]	; 19e38 <test_typed_struct_buffer@@Base+0x2d8>
   19d34:	b	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19d38:	mov	r3, #16
   19d3c:	ldr	r2, [pc, #232]	; 19e2c <test_typed_struct_buffer@@Base+0x2cc>
   19d40:	mov	r1, #48	; 0x30
   19d44:	mov	r0, r4
   19d48:	str	r3, [sp]
   19d4c:	mov	r3, #32
   19d50:	bl	1db18 <flatcc_verify_struct_as_typed_root@@Base>
   19d54:	cmp	r0, #0
   19d58:	ldrne	r0, [pc, #220]	; 19e3c <test_typed_struct_buffer@@Base+0x2dc>
   19d5c:	bne	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19d60:	vldr	s15, [pc, #120]	; 19de0 <test_typed_struct_buffer@@Base+0x280>
   19d64:	vldr	s14, [r5]
   19d68:	vcmp.f32	s14, s15
   19d6c:	vmrs	APSR_nzcv, fpscr
   19d70:	bne	19dd0 <test_typed_struct_buffer@@Base+0x270>
   19d74:	vldr	s15, [pc, #104]	; 19de4 <test_typed_struct_buffer@@Base+0x284>
   19d78:	vldr	s14, [r5, #4]
   19d7c:	vcmp.f32	s14, s15
   19d80:	vmrs	APSR_nzcv, fpscr
   19d84:	bne	19dd0 <test_typed_struct_buffer@@Base+0x270>
   19d88:	vldr	s15, [pc, #88]	; 19de8 <test_typed_struct_buffer@@Base+0x288>
   19d8c:	vldr	s14, [r5, #8]
   19d90:	vcmp.f32	s14, s15
   19d94:	vmrs	APSR_nzcv, fpscr
   19d98:	bne	19dd0 <test_typed_struct_buffer@@Base+0x270>
   19d9c:	vldr	d7, [pc, #52]	; 19dd8 <test_typed_struct_buffer@@Base+0x278>
   19da0:	vldr	d6, [r5, #16]
   19da4:	vcmp.f64	d6, d7
   19da8:	vmrs	APSR_nzcv, fpscr
   19dac:	bne	19dd0 <test_typed_struct_buffer@@Base+0x270>
   19db0:	ldr	r3, [r5, #24]
   19db4:	ldr	r2, [pc, #132]	; 19e40 <test_typed_struct_buffer@@Base+0x2e0>
   19db8:	bic	r3, r3, #65280	; 0xff00
   19dbc:	cmp	r3, r2
   19dc0:	bne	19dd0 <test_typed_struct_buffer@@Base+0x270>
   19dc4:	ldrsb	r3, [r5, #28]
   19dc8:	cmn	r3, #17
   19dcc:	beq	19cec <test_typed_struct_buffer@@Base+0x18c>
   19dd0:	ldr	r0, [pc, #108]	; 19e44 <test_typed_struct_buffer@@Base+0x2e4>
   19dd4:	b	19ce4 <test_typed_struct_buffer@@Base+0x184>
   19dd8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19ddc:	andsmi	ip, r0, ip, asr #25
   19de0:	svccc	0x00800000
   19de4:	andmi	r0, r0, r0
   19de8:	submi	r0, r0, r0
   19dec:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19df0:	submi	r0, r0, r0
   19df4:	andsmi	ip, r0, ip, asr #25
   19df8:	andeq	r1, r2, pc, ror #3
   19dfc:	ldrdeq	lr, [r1], -r5
   19e00:	andeq	pc, r1, lr, lsr #12
   19e04:	andeq	r1, r2, r6, lsl #2
   19e08:	andeq	r1, r2, r1, lsl r1
   19e0c:	andeq	r1, r2, lr, lsr #2
   19e10:	andeq	r1, r2, r9, ror r1
   19e14:	andeq	r3, r3, r0, ror r0
   19e18:	strdeq	r1, [r2], -r4
   19e1c:	muleq	r2, r3, r1
   19e20:	andeq	r1, r2, r5, lsl #3
   19e24:	andeq	r1, r2, sl, lsl #3
   19e28:			; <UNDEFINED> instruction: 0x000211b4
   19e2c:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   19e30:	andeq	r1, r2, sp, lsl #4
   19e34:	andeq	r1, r2, r5, lsr r2
   19e38:	andeq	r1, r2, r7, asr r2
   19e3c:	andeq	r1, r2, r4, ror r2
   19e40:	beq	fea99e68 <__bss_end__@@Base+0xfea66de8>
   19e44:	ldrdeq	r1, [r2], -r7

00019e48 <gen_monster_benchmark@@Base>:
   19e48:	push	{r0, r1, r2, r3, r4, lr}
   19e4c:	mov	r4, r0
   19e50:	add	r3, sp, #4
   19e54:	ldr	r2, [pc, #284]	; 19f78 <gen_monster_benchmark@@Base+0x130>
   19e58:	ldr	r1, [r2, #4]
   19e5c:	ldr	r0, [r2]
   19e60:	ldrh	r2, [r2, #8]
   19e64:	stmia	r3!, {r0, r1}
   19e68:	mov	r0, r4
   19e6c:	strh	r2, [r3]
   19e70:	bl	1ab18 <flatcc_builder_reset@@Base>
   19e74:	mov	r0, r4
   19e78:	bl	12e78 <_start@@Base+0x274>
   19e7c:	mov	r1, #80	; 0x50
   19e80:	mov	r0, r4
   19e84:	bl	14188 <_start@@Base+0x1584>
   19e88:	mov	r2, #32
   19e8c:	mov	r3, #16
   19e90:	mov	r1, #0
   19e94:	mov	r0, r4
   19e98:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   19e9c:	mov	r3, #1065353216	; 0x3f800000
   19ea0:	ldr	r1, [pc, #212]	; 19f7c <gen_monster_benchmark@@Base+0x134>
   19ea4:	str	r3, [r0]
   19ea8:	mov	r3, #1073741824	; 0x40000000
   19eac:	str	r3, [r0, #4]
   19eb0:	ldr	r3, [pc, #200]	; 19f80 <gen_monster_benchmark@@Base+0x138>
   19eb4:	str	r3, [r0, #8]
   19eb8:	mov	r0, r4
   19ebc:	bl	1313c <_start@@Base+0x538>
   19ec0:	mov	r2, #10
   19ec4:	add	r1, sp, #4
   19ec8:	mov	r0, r4
   19ecc:	bl	14fe4 <_start@@Base+0x23e0>
   19ed0:	mov	r0, r4
   19ed4:	bl	13158 <_start@@Base+0x554>
   19ed8:	mov	r1, #1
   19edc:	mov	r0, r4
   19ee0:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   19ee4:	mov	r3, #16
   19ee8:	mov	r1, #2
   19eec:	strh	r3, [r0]
   19ef0:	mov	r3, #32
   19ef4:	strb	r3, [r0, #2]
   19ef8:	mov	r0, r4
   19efc:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   19f00:	mov	r3, #48	; 0x30
   19f04:	mov	r1, #1
   19f08:	strh	r3, [r0]
   19f0c:	mov	r3, #64	; 0x40
   19f10:	strb	r3, [r0, #2]
   19f14:	mov	r3, #80	; 0x50
   19f18:	strh	r3, [r0, #4]
   19f1c:	mov	r3, #96	; 0x60
   19f20:	strb	r3, [r0, #6]
   19f24:	mov	r0, r4
   19f28:	bl	1b28c <flatcc_builder_extend_vector@@Base>
   19f2c:	cmp	r0, #0
   19f30:	mov	r1, sp
   19f34:	movne	r3, #112	; 0x70
   19f38:	strhne	r3, [r0]
   19f3c:	mvnne	r3, #127	; 0x7f
   19f40:	strbne	r3, [r0, #2]
   19f44:	movw	r3, #401	; 0x191
   19f48:	mov	r0, r4
   19f4c:	strh	r3, [sp]
   19f50:	mvn	r3, #110	; 0x6e
   19f54:	strb	r3, [sp, #2]
   19f58:	bl	13168 <_start@@Base+0x564>
   19f5c:	mov	r0, r4
   19f60:	bl	13188 <_start@@Base+0x584>
   19f64:	mov	r0, r4
   19f68:	bl	14258 <_start@@Base+0x1654>
   19f6c:	mov	r0, #0
   19f70:	add	sp, sp, #16
   19f74:	pop	{r4, pc}
   19f78:	andeq	lr, r1, ip, ror #11
   19f7c:	andeq	lr, r1, r9, ror #31
   19f80:	subgt	ip, ip, sp, asr #25

00019f84 <time_monster@@Base>:
   19f84:	push	{r4, r5, r6, lr}
   19f88:	mov	r5, r0
   19f8c:	ldr	r0, [pc, #80]	; 19fe4 <time_monster@@Base+0x60>
   19f90:	vpush	{d8}
   19f94:	bl	129b8 <puts@plt>
   19f98:	ldr	r4, [pc, #72]	; 19fe8 <time_monster@@Base+0x64>
   19f9c:	bl	131e8 <_start@@Base+0x5e4>
   19fa0:	vmov.f64	d8, d0
   19fa4:	mov	r0, r5
   19fa8:	bl	19e48 <gen_monster_benchmark@@Base>
   19fac:	subs	r4, r4, #1
   19fb0:	bne	19fa4 <time_monster@@Base+0x20>
   19fb4:	mov	r0, r5
   19fb8:	bl	1cce4 <flatcc_builder_get_buffer_size@@Base>
   19fbc:	mov	r5, r0
   19fc0:	bl	131e8 <_start@@Base+0x5e4>
   19fc4:	vmov.f64	d1, d0
   19fc8:	mov	r1, r5
   19fcc:	vmov.f64	d0, d8
   19fd0:	ldr	r0, [pc, #20]	; 19fec <time_monster@@Base+0x68>
   19fd4:	bl	14c84 <_start@@Base+0x2080>
   19fd8:	vpop	{d8}
   19fdc:	mov	r0, r4
   19fe0:	pop	{r4, r5, r6, pc}
   19fe4:	muleq	r2, sl, r2
   19fe8:	andeq	r4, pc, r0, asr #4
   19fec:	andeq	r1, r2, fp, lsr #5

00019ff0 <gen_struct_buffer_benchmark@@Base>:
   19ff0:	push	{r4, lr}
   19ff4:	mov	r4, r0
   19ff8:	bl	1ab18 <flatcc_builder_reset@@Base>
   19ffc:	mov	r0, r4
   1a000:	bl	14ddc <_start@@Base+0x21d8>
   1a004:	mov	r1, #0
   1a008:	mov	r0, r4
   1a00c:	bl	1cd6c <flatcc_builder_get_direct_buffer@@Base>
   1a010:	cmp	r0, #0
   1a014:	beq	1a094 <gen_struct_buffer_benchmark@@Base+0xa4>
   1a018:	ldr	r3, [r0]
   1a01c:	vldr	s15, [pc, #132]	; 1a0a8 <gen_struct_buffer_benchmark@@Base+0xb8>
   1a020:	add	r0, r0, r3
   1a024:	vldr	s14, [r0]
   1a028:	vcmp.f32	s14, s15
   1a02c:	vmrs	APSR_nzcv, fpscr
   1a030:	bne	1a094 <gen_struct_buffer_benchmark@@Base+0xa4>
   1a034:	vldr	s15, [pc, #112]	; 1a0ac <gen_struct_buffer_benchmark@@Base+0xbc>
   1a038:	vldr	s14, [r0, #4]
   1a03c:	vcmp.f32	s14, s15
   1a040:	vmrs	APSR_nzcv, fpscr
   1a044:	bne	1a094 <gen_struct_buffer_benchmark@@Base+0xa4>
   1a048:	vldr	s15, [pc, #96]	; 1a0b0 <gen_struct_buffer_benchmark@@Base+0xc0>
   1a04c:	vldr	s14, [r0, #8]
   1a050:	vcmp.f32	s14, s15
   1a054:	vmrs	APSR_nzcv, fpscr
   1a058:	bne	1a094 <gen_struct_buffer_benchmark@@Base+0xa4>
   1a05c:	vldr	d7, [pc, #60]	; 1a0a0 <gen_struct_buffer_benchmark@@Base+0xb0>
   1a060:	vldr	d6, [r0, #16]
   1a064:	vcmp.f64	d6, d7
   1a068:	vmrs	APSR_nzcv, fpscr
   1a06c:	bne	1a094 <gen_struct_buffer_benchmark@@Base+0xa4>
   1a070:	ldr	r3, [r0, #24]
   1a074:	ldr	r2, [pc, #56]	; 1a0b4 <gen_struct_buffer_benchmark@@Base+0xc4>
   1a078:	bic	r3, r3, #65280	; 0xff00
   1a07c:	cmp	r3, r2
   1a080:	bne	1a094 <gen_struct_buffer_benchmark@@Base+0xa4>
   1a084:	ldrb	r0, [r0, #28]
   1a088:	subs	r0, r0, #239	; 0xef
   1a08c:	mvnne	r0, #0
   1a090:	pop	{r4, pc}
   1a094:	mvn	r0, #0
   1a098:	pop	{r4, pc}
   1a09c:	nop	{0}
   1a0a0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1a0a4:	andsmi	ip, r0, ip, asr #25
   1a0a8:	svccc	0x00800000
   1a0ac:	andmi	r0, r0, r0
   1a0b0:	submi	r0, r0, r0
   1a0b4:	beq	fea9a0dc <__bss_end__@@Base+0xfea6705c>

0001a0b8 <time_struct_buffer@@Base>:
   1a0b8:	push	{r4, r5, r6, lr}
   1a0bc:	mov	r6, r0
   1a0c0:	mov	r4, #0
   1a0c4:	vpush	{d8-d9}
   1a0c8:	ldr	r0, [pc, #100]	; 1a134 <time_struct_buffer@@Base+0x7c>
   1a0cc:	bl	129b8 <puts@plt>
   1a0d0:	ldr	r5, [pc, #96]	; 1a138 <time_struct_buffer@@Base+0x80>
   1a0d4:	bl	131e8 <_start@@Base+0x5e4>
   1a0d8:	vmov.f64	d8, d0
   1a0dc:	mov	r0, r6
   1a0e0:	bl	19ff0 <gen_struct_buffer_benchmark@@Base>
   1a0e4:	subs	r5, r5, #1
   1a0e8:	orr	r4, r4, r0
   1a0ec:	bne	1a0dc <time_struct_buffer@@Base+0x24>
   1a0f0:	bl	131e8 <_start@@Base+0x5e4>
   1a0f4:	mov	r0, r6
   1a0f8:	vmov.f64	d9, d0
   1a0fc:	bl	1cce4 <flatcc_builder_get_buffer_size@@Base>
   1a100:	cmp	r4, #0
   1a104:	mov	r5, r0
   1a108:	beq	1a114 <time_struct_buffer@@Base+0x5c>
   1a10c:	ldr	r0, [pc, #40]	; 1a13c <time_struct_buffer@@Base+0x84>
   1a110:	bl	129b8 <puts@plt>
   1a114:	vmov.f64	d1, d9
   1a118:	vmov.f64	d0, d8
   1a11c:	mov	r1, r5
   1a120:	ldr	r0, [pc, #24]	; 1a140 <time_struct_buffer@@Base+0x88>
   1a124:	bl	14c84 <_start@@Base+0x2080>
   1a128:	vpop	{d8-d9}
   1a12c:	mov	r0, r4
   1a130:	pop	{r4, r5, r6, pc}
   1a134:	muleq	r2, sl, r2
   1a138:	andeq	r4, pc, r0, asr #4
   1a13c:	andeq	r1, r2, r1, asr #5
   1a140:	ldrdeq	r1, [r2], -r2
   1a144:	ldr	ip, [r0, #28]
   1a148:	ldrd	r2, [r0, #60]	; 0x3c
   1a14c:	sub	r3, r3, ip
   1a150:	add	r2, r2, ip
   1a154:	cmp	r3, r1
   1a158:	strls	r3, [r0, #24]
   1a15c:	strhi	r1, [r0, #24]
   1a160:	ldr	r3, [r0, #32]
   1a164:	str	r2, [r0, #16]
   1a168:	str	r1, [r3, #4]
   1a16c:	bx	lr
   1a170:	push	{r0, r1, r4, r5, r6, lr}
   1a174:	mov	r6, r2
   1a178:	mov	r3, #1
   1a17c:	mov	r4, r0
   1a180:	ldr	r2, [r0, #28]
   1a184:	str	r3, [sp]
   1a188:	ldr	r5, [r0, #48]	; 0x30
   1a18c:	add	r2, r1, r2
   1a190:	add	r1, r0, #60	; 0x3c
   1a194:	ldr	r0, [r0, #40]	; 0x28
   1a198:	blx	r5
   1a19c:	subs	r5, r0, #0
   1a1a0:	mvnne	r5, #0
   1a1a4:	bne	1a1b4 <time_struct_buffer@@Base+0xfc>
   1a1a8:	mov	r1, r6
   1a1ac:	mov	r0, r4
   1a1b0:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1a1b4:	mov	r0, r5
   1a1b8:	add	sp, sp, #8
   1a1bc:	pop	{r4, r5, r6, pc}
   1a1c0:	push	{r4, r5, r6, lr}
   1a1c4:	mov	r4, r0
   1a1c8:	ldr	r5, [r0, #20]
   1a1cc:	ldr	r3, [r0, #24]
   1a1d0:	add	r1, r5, r1
   1a1d4:	cmp	r1, r3
   1a1d8:	str	r1, [r0, #20]
   1a1dc:	bcs	1a1ec <time_struct_buffer@@Base+0x134>
   1a1e0:	ldr	r0, [r4, #16]
   1a1e4:	add	r0, r0, r5
   1a1e8:	pop	{r4, r5, r6, pc}
   1a1ec:	mvn	r2, #3
   1a1f0:	add	r1, r1, #1
   1a1f4:	bl	1a170 <time_struct_buffer@@Base+0xb8>
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a1e0 <time_struct_buffer@@Base+0x128>
   1a200:	mov	r0, #0
   1a204:	pop	{r4, r5, r6, pc}
   1a208:	push	{r4, lr}
   1a20c:	mov	r1, #0
   1a210:	mov	r4, r0
   1a214:	ldr	r2, [r0, #20]
   1a218:	ldr	r0, [r0, #16]
   1a21c:	bl	12a0c <memset@plt>
   1a220:	ldr	r3, [r4, #32]
   1a224:	mov	r0, r4
   1a228:	ldmib	r3, {r1, r2}
   1a22c:	str	r2, [r4, #20]
   1a230:	ldr	r2, [r3]
   1a234:	str	r2, [r4, #28]
   1a238:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1a23c:	ldrh	r3, [r4, #130]	; 0x82
   1a240:	ldrh	r2, [r4, #128]	; 0x80
   1a244:	cmp	r2, r3
   1a248:	strhcc	r3, [r4, #128]	; 0x80
   1a24c:	ldr	r3, [r4, #32]
   1a250:	ldrh	r2, [r3, #12]
   1a254:	sub	r3, r3, #36	; 0x24
   1a258:	str	r3, [r4, #32]
   1a25c:	ldr	r3, [r4, #156]	; 0x9c
   1a260:	strh	r2, [r4, #130]	; 0x82
   1a264:	sub	r3, r3, #1
   1a268:	str	r3, [r4, #156]	; 0x9c
   1a26c:	pop	{r4, pc}
   1a270:	ldr	r3, [r0, #20]
   1a274:	mov	r2, r1
   1a278:	mov	r1, #0
   1a27c:	sub	r3, r3, r2
   1a280:	str	r3, [r0, #20]
   1a284:	ldr	r0, [r0, #16]
   1a288:	add	r0, r0, r3
   1a28c:	b	12a0c <memset@plt>
   1a290:	push	{r4, r5, r6, lr}
   1a294:	mov	r6, r1
   1a298:	mov	r1, r2
   1a29c:	mov	r4, r2
   1a2a0:	bl	1a1c0 <time_struct_buffer@@Base+0x108>
   1a2a4:	subs	r5, r0, #0
   1a2a8:	beq	1a2b8 <time_struct_buffer@@Base+0x200>
   1a2ac:	mov	r2, r4
   1a2b0:	mov	r1, r6
   1a2b4:	bl	12988 <memcpy@plt>
   1a2b8:	mov	r0, r5
   1a2bc:	pop	{r4, r5, r6, pc}
   1a2c0:	push	{r0, r1, r4, lr}
   1a2c4:	cmp	r0, #4
   1a2c8:	mov	r4, #0
   1a2cc:	mov	r2, r1
   1a2d0:	movcs	r1, r0
   1a2d4:	movcc	r1, #4
   1a2d8:	add	r0, sp, #4
   1a2dc:	str	r4, [sp, #4]
   1a2e0:	bl	12a00 <posix_memalign@plt>
   1a2e4:	cmp	r0, r4
   1a2e8:	beq	1a300 <time_struct_buffer@@Base+0x248>
   1a2ec:	ldr	r0, [sp, #4]
   1a2f0:	cmp	r0, r4
   1a2f4:	beq	1a300 <time_struct_buffer@@Base+0x248>
   1a2f8:	bl	1297c <free@plt>
   1a2fc:	str	r4, [sp, #4]
   1a300:	ldr	r0, [sp, #4]
   1a304:	add	sp, sp, #8
   1a308:	pop	{r4, pc}

0001a30c <flatcc_builder_default_alloc@@Base>:
   1a30c:	push	{r4, r5, r6, r7, r8, lr}
   1a310:	subs	r6, r2, #0
   1a314:	mov	r5, r1
   1a318:	bne	1a33c <flatcc_builder_default_alloc@@Base+0x30>
   1a31c:	ldr	r0, [r1]
   1a320:	cmp	r0, #0
   1a324:	popeq	{r4, r5, r6, r7, r8, pc}
   1a328:	bl	1297c <free@plt>
   1a32c:	str	r6, [r5]
   1a330:	str	r6, [r5, #4]
   1a334:	mov	r0, #0
   1a338:	pop	{r4, r5, r6, r7, r8, pc}
   1a33c:	ldr	r2, [sp, #24]
   1a340:	mov	r7, r3
   1a344:	sub	r2, r2, #1
   1a348:	cmp	r2, #6
   1a34c:	ldrls	pc, [pc, r2, lsl #2]
   1a350:	b	1a3e4 <flatcc_builder_default_alloc@@Base+0xd8>
   1a354:	andeq	sl, r1, ip, ror #7
   1a358:	andeq	sl, r1, r4, ror #7
   1a35c:	andeq	sl, r1, r4, ror #7
   1a360:	ldrdeq	sl, [r1], -r4
   1a364:	andeq	sl, r1, r0, ror r3
   1a368:	andeq	sl, r1, r4, ror #7
   1a36c:	ldrdeq	sl, [r1], -ip
   1a370:	mov	r4, r6
   1a374:	cmp	r6, r4
   1a378:	bhi	1a3f4 <flatcc_builder_default_alloc@@Base+0xe8>
   1a37c:	ldr	r2, [r5, #4]
   1a380:	cmp	r6, r2
   1a384:	bhi	1a390 <flatcc_builder_default_alloc@@Base+0x84>
   1a388:	cmp	r4, r2, lsr #1
   1a38c:	bls	1a334 <flatcc_builder_default_alloc@@Base+0x28>
   1a390:	mov	r1, r4
   1a394:	ldr	r0, [r5]
   1a398:	bl	129a0 <realloc@plt>
   1a39c:	subs	r6, r0, #0
   1a3a0:	beq	1a3fc <flatcc_builder_default_alloc@@Base+0xf0>
   1a3a4:	cmp	r7, #0
   1a3a8:	beq	1a3c8 <flatcc_builder_default_alloc@@Base+0xbc>
   1a3ac:	ldr	r0, [r5, #4]
   1a3b0:	cmp	r4, r0
   1a3b4:	bls	1a3c8 <flatcc_builder_default_alloc@@Base+0xbc>
   1a3b8:	sub	r2, r4, r0
   1a3bc:	mov	r1, #0
   1a3c0:	add	r0, r6, r0
   1a3c4:	bl	12a0c <memset@plt>
   1a3c8:	str	r6, [r5]
   1a3cc:	str	r4, [r5, #4]
   1a3d0:	b	1a334 <flatcc_builder_default_alloc@@Base+0x28>
   1a3d4:	mov	r4, #288	; 0x120
   1a3d8:	b	1a374 <flatcc_builder_default_alloc@@Base+0x68>
   1a3dc:	mov	r4, #64	; 0x40
   1a3e0:	b	1a374 <flatcc_builder_default_alloc@@Base+0x68>
   1a3e4:	mov	r4, #32
   1a3e8:	b	1a374 <flatcc_builder_default_alloc@@Base+0x68>
   1a3ec:	mov	r4, #256	; 0x100
   1a3f0:	b	1a374 <flatcc_builder_default_alloc@@Base+0x68>
   1a3f4:	lsl	r4, r4, #1
   1a3f8:	b	1a374 <flatcc_builder_default_alloc@@Base+0x68>
   1a3fc:	mvn	r0, #0
   1a400:	pop	{r4, r5, r6, r7, r8, pc}
   1a404:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a408:	add	r6, r0, #52	; 0x34
   1a40c:	mov	r4, r1
   1a410:	add	r1, r6, r1, lsl #3
   1a414:	mov	r5, r2
   1a418:	add	r2, r2, r3
   1a41c:	ldr	r3, [r1, #4]
   1a420:	cmp	r2, r3
   1a424:	bls	1a458 <flatcc_builder_default_alloc@@Base+0x14c>
   1a428:	str	r4, [sp]
   1a42c:	ldr	r3, [sp, #32]
   1a430:	ldr	r7, [r0, #48]	; 0x30
   1a434:	ldr	r0, [r0, #40]	; 0x28
   1a438:	blx	r7
   1a43c:	cmp	r0, #0
   1a440:	beq	1a458 <flatcc_builder_default_alloc@@Base+0x14c>
   1a444:	ldr	r3, [pc, #28]	; 1a468 <flatcc_builder_default_alloc@@Base+0x15c>
   1a448:	mov	r2, #308	; 0x134
   1a44c:	ldr	r1, [pc, #24]	; 1a46c <flatcc_builder_default_alloc@@Base+0x160>
   1a450:	ldr	r0, [pc, #24]	; 1a470 <flatcc_builder_default_alloc@@Base+0x164>
   1a454:	bl	12a60 <__assert_fail@plt>
   1a458:	ldr	r0, [r6, r4, lsl #3]
   1a45c:	add	r0, r0, r5
   1a460:	add	sp, sp, #12
   1a464:	pop	{r4, r5, r6, r7, pc}
   1a468:	andeq	r1, r2, r6, lsr #6
   1a46c:	andeq	r1, r2, r5, lsr #20
   1a470:	muleq	r2, r2, sl
   1a474:	ldrd	r2, [r0, #156]	; 0x9c
   1a478:	push	{r0, r1, r4, r5, r6, lr}
   1a47c:	mov	r5, r1
   1a480:	mov	r4, r0
   1a484:	add	r1, r2, #1
   1a488:	cmp	r1, r3
   1a48c:	str	r1, [r0, #156]	; 0x9c
   1a490:	ble	1a53c <flatcc_builder_default_alloc@@Base+0x230>
   1a494:	ldr	r3, [r0, #176]	; 0xb0
   1a498:	cmp	r1, r3
   1a49c:	cmpgt	r3, #0
   1a4a0:	movgt	r3, #1
   1a4a4:	movle	r3, #0
   1a4a8:	ble	1a4b8 <flatcc_builder_default_alloc@@Base+0x1ac>
   1a4ac:	mvn	r0, #0
   1a4b0:	add	sp, sp, #8
   1a4b4:	pop	{r4, r5, r6, pc}
   1a4b8:	mov	r6, #36	; 0x24
   1a4bc:	mov	r1, #4
   1a4c0:	str	r3, [sp]
   1a4c4:	mov	r3, r6
   1a4c8:	mul	r2, r6, r2
   1a4cc:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1a4d0:	cmp	r0, #0
   1a4d4:	str	r0, [r4, #32]
   1a4d8:	beq	1a4ac <flatcc_builder_default_alloc@@Base+0x1a0>
   1a4dc:	ldr	r3, [r4, #88]	; 0x58
   1a4e0:	ldr	r2, [r4, #176]	; 0xb0
   1a4e4:	udiv	r3, r3, r6
   1a4e8:	cmp	r2, #0
   1a4ec:	cmpgt	r3, r2
   1a4f0:	movgt	r3, r2
   1a4f4:	str	r3, [r4, #160]	; 0xa0
   1a4f8:	ldrh	r1, [r4, #130]	; 0x82
   1a4fc:	mvn	r0, #3
   1a500:	ldr	r3, [r4, #20]
   1a504:	ldr	r2, [r4, #32]
   1a508:	str	r3, [r2, #8]
   1a50c:	strh	r1, [r2, #12]
   1a510:	ldr	r1, [r4, #28]
   1a514:	strh	r5, [r4, #130]	; 0x82
   1a518:	add	r3, r3, r1
   1a51c:	str	r0, [r2, #4]
   1a520:	mov	r0, #0
   1a524:	add	r3, r3, #7
   1a528:	str	r1, [r2]
   1a52c:	bic	r3, r3, #7
   1a530:	str	r0, [r4, #20]
   1a534:	str	r3, [r4, #28]
   1a538:	b	1a4b0 <flatcc_builder_default_alloc@@Base+0x1a4>
   1a53c:	ldr	r3, [r0, #32]
   1a540:	add	r3, r3, #36	; 0x24
   1a544:	str	r3, [r0, #32]
   1a548:	b	1a4f8 <flatcc_builder_default_alloc@@Base+0x1ec>
   1a54c:	ldr	r3, [r0, #32]
   1a550:	push	{r0, r1, r2, r4, r5, lr}
   1a554:	add	r1, r1, #2
   1a558:	mov	r4, r0
   1a55c:	lsl	r5, r1, #1
   1a560:	ldrh	r1, [r3, #28]
   1a564:	ldr	r2, [r3, #16]
   1a568:	mov	r3, #1
   1a56c:	str	r3, [sp]
   1a570:	mov	r3, r5
   1a574:	add	r2, r2, r1, lsl #1
   1a578:	mov	r1, #0
   1a57c:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1a580:	cmp	r0, #0
   1a584:	streq	r0, [r4, #4]
   1a588:	mvneq	r0, #0
   1a58c:	beq	1a5c8 <flatcc_builder_default_alloc@@Base+0x2bc>
   1a590:	ldr	r2, [r4, #32]
   1a594:	add	r0, r0, #4
   1a598:	mov	r3, #0
   1a59c:	mov	r1, #3
   1a5a0:	str	r0, [r4, #4]
   1a5a4:	mov	r0, r4
   1a5a8:	str	r3, [sp]
   1a5ac:	sub	r3, r5, #3
   1a5b0:	ldr	r2, [r2, #20]
   1a5b4:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1a5b8:	str	r0, [r4]
   1a5bc:	clz	r0, r0
   1a5c0:	lsr	r0, r0, #5
   1a5c4:	rsb	r0, r0, #0
   1a5c8:	add	sp, sp, #12
   1a5cc:	pop	{r4, r5, pc}
   1a5d0:	push	{r0, r1, r2, r4, r5, lr}
   1a5d4:	ldr	r3, [r1]
   1a5d8:	ldr	r4, [r0, #140]	; 0x8c
   1a5dc:	add	r2, r3, r4
   1a5e0:	cmp	r2, r4
   1a5e4:	ldrlt	r3, [pc, #76]	; 1a638 <flatcc_builder_default_alloc@@Base+0x32c>
   1a5e8:	str	r2, [r0, #140]	; 0x8c
   1a5ec:	movwlt	r2, #673	; 0x2a1
   1a5f0:	blt	1a620 <flatcc_builder_default_alloc@@Base+0x314>
   1a5f4:	add	r1, r1, #8
   1a5f8:	str	r3, [sp]
   1a5fc:	mov	r3, r4
   1a600:	ldr	r2, [r1, #-4]
   1a604:	ldr	r5, [r0, #44]	; 0x2c
   1a608:	ldr	r0, [r0, #36]	; 0x24
   1a60c:	blx	r5
   1a610:	cmp	r0, #0
   1a614:	beq	1a62c <flatcc_builder_default_alloc@@Base+0x320>
   1a618:	ldr	r3, [pc, #24]	; 1a638 <flatcc_builder_default_alloc@@Base+0x32c>
   1a61c:	movw	r2, #677	; 0x2a5
   1a620:	ldr	r1, [pc, #20]	; 1a63c <flatcc_builder_default_alloc@@Base+0x330>
   1a624:	ldr	r0, [pc, #20]	; 1a640 <flatcc_builder_default_alloc@@Base+0x334>
   1a628:	bl	12a60 <__assert_fail@plt>
   1a62c:	add	r0, r4, #1
   1a630:	add	sp, sp, #12
   1a634:	pop	{r4, r5, pc}
   1a638:	andeq	r1, r2, r5, lsr r3
   1a63c:	andeq	r1, r2, r5, lsr #20
   1a640:	muleq	r2, r2, sl
   1a644:	cmp	r2, #0
   1a648:	bne	1a658 <flatcc_builder_default_alloc@@Base+0x34c>
   1a64c:	ldrh	r2, [r0, #132]	; 0x84
   1a650:	cmp	r2, #0
   1a654:	moveq	r2, #1
   1a658:	ldrh	ip, [r1]
   1a65c:	cmp	ip, #3
   1a660:	movls	ip, #4
   1a664:	strhls	ip, [r1]
   1a668:	ldrh	ip, [r1]
   1a66c:	cmp	ip, r2
   1a670:	strhcc	r2, [r1]
   1a674:	cmp	r3, #0
   1a678:	bne	1a6d8 <flatcc_builder_default_alloc@@Base+0x3cc>
   1a67c:	ldr	r3, [r0, #140]	; 0x8c
   1a680:	sub	r2, r2, #1
   1a684:	ands	r2, r2, r3
   1a688:	beq	1a6d8 <flatcc_builder_default_alloc@@Base+0x3cc>
   1a68c:	push	{r4, lr}
   1a690:	mov	r3, #1
   1a694:	sub	sp, sp, #72	; 0x48
   1a698:	mov	r1, sp
   1a69c:	ldr	r4, [pc, #60]	; 1a6e0 <flatcc_builder_default_alloc@@Base+0x3d4>
   1a6a0:	strd	r2, [sp]
   1a6a4:	str	r4, [sp, #8]
   1a6a8:	str	r2, [sp, #12]
   1a6ac:	bl	1a5d0 <flatcc_builder_default_alloc@@Base+0x2c4>
   1a6b0:	cmp	r0, #0
   1a6b4:	bne	1a6cc <flatcc_builder_default_alloc@@Base+0x3c0>
   1a6b8:	add	r3, r4, #512	; 0x200
   1a6bc:	movw	r2, #702	; 0x2be
   1a6c0:	ldr	r1, [pc, #28]	; 1a6e4 <flatcc_builder_default_alloc@@Base+0x3d8>
   1a6c4:	ldr	r0, [pc, #28]	; 1a6e8 <flatcc_builder_default_alloc@@Base+0x3dc>
   1a6c8:	bl	12a60 <__assert_fail@plt>
   1a6cc:	mov	r0, #0
   1a6d0:	add	sp, sp, #72	; 0x48
   1a6d4:	pop	{r4, pc}
   1a6d8:	mov	r0, #0
   1a6dc:	bx	lr
   1a6e0:	andeq	r1, r2, pc, lsr r3
   1a6e4:	andeq	r1, r2, r5, lsr #20
   1a6e8:	muleq	r2, r2, sl
   1a6ec:	ldr	r3, [r1]
   1a6f0:	push	{r0, r1, r4, r5, r6, lr}
   1a6f4:	ldr	r2, [r0, #136]	; 0x88
   1a6f8:	sub	r4, r2, r3
   1a6fc:	cmp	r2, r4
   1a700:	ldrle	r3, [pc, #80]	; 1a758 <flatcc_builder_default_alloc@@Base+0x44c>
   1a704:	movwle	r2, #647	; 0x287
   1a708:	ble	1a73c <flatcc_builder_default_alloc@@Base+0x430>
   1a70c:	mov	r5, r0
   1a710:	add	r1, r1, #8
   1a714:	str	r3, [sp]
   1a718:	mov	r3, r4
   1a71c:	ldr	r2, [r1, #-4]
   1a720:	ldr	r0, [r0, #36]	; 0x24
   1a724:	ldr	r6, [r5, #44]	; 0x2c
   1a728:	blx	r6
   1a72c:	cmp	r0, #0
   1a730:	beq	1a748 <flatcc_builder_default_alloc@@Base+0x43c>
   1a734:	ldr	r3, [pc, #28]	; 1a758 <flatcc_builder_default_alloc@@Base+0x44c>
   1a738:	movw	r2, #651	; 0x28b
   1a73c:	ldr	r1, [pc, #24]	; 1a75c <flatcc_builder_default_alloc@@Base+0x450>
   1a740:	ldr	r0, [pc, #24]	; 1a760 <flatcc_builder_default_alloc@@Base+0x454>
   1a744:	bl	12a60 <__assert_fail@plt>
   1a748:	mov	r0, r4
   1a74c:	str	r4, [r5, #136]	; 0x88
   1a750:	add	sp, sp, #8
   1a754:	pop	{r4, r5, r6, pc}
   1a758:	andeq	r1, r2, lr, asr #10
   1a75c:	andeq	r1, r2, r5, lsr #20
   1a760:	muleq	r2, r2, sl
   1a764:	ldr	r3, [r0, #20]
   1a768:	adds	r1, r3, r1
   1a76c:	movcs	r3, #1
   1a770:	movcc	r3, #0
   1a774:	cmp	r1, r2
   1a778:	movls	r2, r3
   1a77c:	orrhi	r2, r3, #1
   1a780:	cmp	r2, #0
   1a784:	beq	1a7a0 <flatcc_builder_default_alloc@@Base+0x494>
   1a788:	push	{r4, lr}
   1a78c:	mov	r2, #892	; 0x37c
   1a790:	ldr	r3, [pc, #20]	; 1a7ac <flatcc_builder_default_alloc@@Base+0x4a0>
   1a794:	ldr	r1, [pc, #20]	; 1a7b0 <flatcc_builder_default_alloc@@Base+0x4a4>
   1a798:	ldr	r0, [pc, #20]	; 1a7b4 <flatcc_builder_default_alloc@@Base+0x4a8>
   1a79c:	bl	12a60 <__assert_fail@plt>
   1a7a0:	str	r1, [r0, #20]
   1a7a4:	mov	r0, r2
   1a7a8:	bx	lr
   1a7ac:	andeq	r1, r2, r9, asr r5
   1a7b0:	andeq	r1, r2, r5, lsr #20
   1a7b4:	andeq	r1, r2, fp, ror #20
   1a7b8:	ldrh	ip, [r0, #128]	; 0x80
   1a7bc:	push	{r4, r5, r6, lr}
   1a7c0:	sub	sp, sp, #80	; 0x50
   1a7c4:	ldr	r5, [r0, #136]	; 0x88
   1a7c8:	cmp	ip, #3
   1a7cc:	movls	ip, #4
   1a7d0:	strhls	ip, [r0, #128]	; 0x80
   1a7d4:	mov	ip, #4
   1a7d8:	add	lr, sp, ip
   1a7dc:	and	r4, r5, #3
   1a7e0:	stmib	sp, {r2, ip}
   1a7e4:	str	lr, [sp, #16]
   1a7e8:	str	ip, [sp, #20]
   1a7ec:	mov	ip, #1
   1a7f0:	str	ip, [sp, #12]
   1a7f4:	lsls	ip, r2, #2
   1a7f8:	beq	1a814 <flatcc_builder_default_alloc@@Base+0x508>
   1a7fc:	add	lr, ip, #4
   1a800:	str	ip, [sp, #28]
   1a804:	mov	ip, #2
   1a808:	str	lr, [sp, #8]
   1a80c:	str	ip, [sp, #12]
   1a810:	str	r1, [sp, #24]
   1a814:	cmp	r4, #0
   1a818:	beq	1a848 <flatcc_builder_default_alloc@@Base+0x53c>
   1a81c:	ldr	ip, [sp, #8]
   1a820:	add	lr, sp, #80	; 0x50
   1a824:	ldr	r6, [pc, #204]	; 1a8f8 <flatcc_builder_default_alloc@@Base+0x5ec>
   1a828:	add	ip, ip, r4
   1a82c:	str	ip, [sp, #8]
   1a830:	ldr	ip, [sp, #12]
   1a834:	add	ip, ip, #1
   1a838:	add	lr, lr, ip, lsl #3
   1a83c:	str	ip, [sp, #12]
   1a840:	str	r6, [lr, #-72]	; 0xffffffb8
   1a844:	str	r4, [lr, #-68]	; 0xffffffbc
   1a848:	ldr	lr, [sp, #8]
   1a84c:	mov	ip, #0
   1a850:	mvn	r6, #3
   1a854:	sub	lr, lr, #4
   1a858:	sub	lr, lr, r5
   1a85c:	cmp	r2, ip
   1a860:	bne	1a874 <flatcc_builder_default_alloc@@Base+0x568>
   1a864:	add	r1, sp, #8
   1a868:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1a86c:	add	sp, sp, #80	; 0x50
   1a870:	pop	{r4, r5, r6, pc}
   1a874:	ldr	r5, [r1, ip, lsl #2]
   1a878:	cmp	r5, #0
   1a87c:	beq	1a8b4 <flatcc_builder_default_alloc@@Base+0x5a8>
   1a880:	mla	r4, r6, ip, lr
   1a884:	cmp	r3, #0
   1a888:	add	r4, r4, r5
   1a88c:	str	r4, [r1, ip, lsl #2]
   1a890:	beq	1a8f0 <flatcc_builder_default_alloc@@Base+0x5e4>
   1a894:	ldrb	r4, [r3, ip]
   1a898:	cmp	r4, #0
   1a89c:	bne	1a8f0 <flatcc_builder_default_alloc@@Base+0x5e4>
   1a8a0:	ldr	r3, [pc, #84]	; 1a8fc <flatcc_builder_default_alloc@@Base+0x5f0>
   1a8a4:	movw	r2, #1457	; 0x5b1
   1a8a8:	ldr	r1, [pc, #80]	; 1a900 <flatcc_builder_default_alloc@@Base+0x5f4>
   1a8ac:	ldr	r0, [pc, #80]	; 1a904 <flatcc_builder_default_alloc@@Base+0x5f8>
   1a8b0:	bl	12a60 <__assert_fail@plt>
   1a8b4:	cmp	r3, #0
   1a8b8:	beq	1a8dc <flatcc_builder_default_alloc@@Base+0x5d0>
   1a8bc:	ldrb	r4, [r3, ip]
   1a8c0:	cmp	r4, #0
   1a8c4:	beq	1a8f0 <flatcc_builder_default_alloc@@Base+0x5e4>
   1a8c8:	ldr	r3, [pc, #44]	; 1a8fc <flatcc_builder_default_alloc@@Base+0x5f0>
   1a8cc:	movw	r2, #1461	; 0x5b5
   1a8d0:	ldr	r1, [pc, #40]	; 1a900 <flatcc_builder_default_alloc@@Base+0x5f4>
   1a8d4:	ldr	r0, [pc, #44]	; 1a908 <flatcc_builder_default_alloc@@Base+0x5fc>
   1a8d8:	b	1a8b0 <flatcc_builder_default_alloc@@Base+0x5a4>
   1a8dc:	ldr	r3, [pc, #24]	; 1a8fc <flatcc_builder_default_alloc@@Base+0x5f0>
   1a8e0:	movw	r2, #1463	; 0x5b7
   1a8e4:	ldr	r1, [pc, #20]	; 1a900 <flatcc_builder_default_alloc@@Base+0x5f4>
   1a8e8:	ldr	r0, [pc, #28]	; 1a90c <flatcc_builder_default_alloc@@Base+0x600>
   1a8ec:	b	1a8b0 <flatcc_builder_default_alloc@@Base+0x5a4>
   1a8f0:	add	ip, ip, #1
   1a8f4:	b	1a85c <flatcc_builder_default_alloc@@Base+0x550>
   1a8f8:	andeq	r1, r2, pc, lsr r3
   1a8fc:	andeq	r1, r2, sl, ror #10
   1a900:	andeq	r1, r2, r5, lsr #20
   1a904:	andeq	r1, r2, r6, lsl #21
   1a908:	muleq	r2, r4, sl
   1a90c:	muleq	r2, r2, sl

0001a910 <flatcc_builder_flush_vtable_cache@@Base>:
   1a910:	ldr	r3, [r0, #116]	; 0x74
   1a914:	cmp	r3, #0
   1a918:	bxeq	lr
   1a91c:	push	{r4, lr}
   1a920:	mov	r4, r0
   1a924:	mov	r1, #0
   1a928:	ldr	r0, [r0, #92]	; 0x5c
   1a92c:	ldr	r2, [r4, #96]	; 0x60
   1a930:	bl	12a0c <memset@plt>
   1a934:	mov	r0, #0
   1a938:	mov	r1, #16
   1a93c:	strd	r0, [r4, #120]	; 0x78
   1a940:	pop	{r4, pc}

0001a944 <flatcc_builder_custom_init@@Base>:
   1a944:	push	{r4, r5, r6, r7, r8, lr}
   1a948:	mov	r6, r1
   1a94c:	mov	r7, r2
   1a950:	mov	r1, #0
   1a954:	mov	r2, #232	; 0xe8
   1a958:	mov	r4, r0
   1a95c:	mov	r5, r3
   1a960:	bl	12a0c <memset@plt>
   1a964:	cmp	r6, #0
   1a968:	mov	r0, #0
   1a96c:	moveq	r3, #1
   1a970:	addeq	r7, r4, #188	; 0xbc
   1a974:	ldreq	r6, [pc, #36]	; 1a9a0 <flatcc_builder_custom_init@@Base+0x5c>
   1a978:	streq	r3, [r4, #184]	; 0xb8
   1a97c:	cmp	r5, #0
   1a980:	ldr	r3, [pc, #28]	; 1a9a4 <flatcc_builder_custom_init@@Base+0x60>
   1a984:	str	r7, [r4, #36]	; 0x24
   1a988:	str	r6, [r4, #44]	; 0x2c
   1a98c:	moveq	r5, r3
   1a990:	ldr	r3, [sp, #24]
   1a994:	str	r3, [r4, #40]	; 0x28
   1a998:	str	r5, [r4, #48]	; 0x30
   1a99c:	pop	{r4, r5, r6, r7, r8, pc}
   1a9a0:	andeq	sp, r1, r4, asr r0
   1a9a4:	andeq	sl, r1, ip, lsl #6

0001a9a8 <flatcc_builder_init@@Base>:
   1a9a8:	push	{r4, lr}
   1a9ac:	mov	r2, #232	; 0xe8
   1a9b0:	mov	r1, #0
   1a9b4:	bl	12a0c <memset@plt>
   1a9b8:	mov	r3, r0
   1a9bc:	mov	r2, #1
   1a9c0:	mov	r0, #0
   1a9c4:	str	r2, [r3, #184]	; 0xb8
   1a9c8:	ldr	r2, [pc, #20]	; 1a9e4 <flatcc_builder_init@@Base+0x3c>
   1a9cc:	str	r2, [r3, #48]	; 0x30
   1a9d0:	add	r2, r3, #188	; 0xbc
   1a9d4:	str	r2, [r3, #36]	; 0x24
   1a9d8:	ldr	r2, [pc, #8]	; 1a9e8 <flatcc_builder_init@@Base+0x40>
   1a9dc:	str	r2, [r3, #44]	; 0x2c
   1a9e0:	pop	{r4, pc}
   1a9e4:	andeq	sl, r1, ip, lsl #6
   1a9e8:	andeq	sp, r1, r4, asr r0

0001a9ec <flatcc_builder_custom_reset@@Base>:
   1a9ec:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a9f0:	mov	r4, r0
   1a9f4:	mov	r7, r1
   1a9f8:	mov	r8, r2
   1a9fc:	mov	r5, r0
   1aa00:	mov	r6, #0
   1aa04:	ldr	r3, [r5, #52]	; 0x34
   1aa08:	add	r1, r5, #52	; 0x34
   1aa0c:	cmp	r3, #0
   1aa10:	beq	1aaec <flatcc_builder_custom_reset@@Base+0x100>
   1aa14:	cmp	r6, #5
   1aa18:	cmpne	r8, #0
   1aa1c:	bne	1aac4 <flatcc_builder_custom_reset@@Base+0xd8>
   1aa20:	mov	r1, #0
   1aa24:	ldr	r0, [r5, #52]	; 0x34
   1aa28:	ldr	r2, [r5, #56]	; 0x38
   1aa2c:	bl	12a0c <memset@plt>
   1aa30:	add	r6, r6, #1
   1aa34:	add	r5, r5, #8
   1aa38:	cmp	r6, #8
   1aa3c:	bne	1aa04 <flatcc_builder_custom_reset@@Base+0x18>
   1aa40:	ldr	r2, [r4, #124]	; 0x7c
   1aa44:	mov	r3, #0
   1aa48:	ldr	r0, [r4, #184]	; 0xb8
   1aa4c:	str	r3, [r4, #24]
   1aa50:	str	r3, [r4, #32]
   1aa54:	cmp	r2, r3
   1aa58:	str	r3, [r4, #120]	; 0x78
   1aa5c:	movne	r2, #16
   1aa60:	strh	r3, [r4, #128]	; 0x80
   1aa64:	str	r3, [r4, #136]	; 0x88
   1aa68:	strne	r2, [r4, #124]	; 0x7c
   1aa6c:	cmp	r7, #0
   1aa70:	ldr	r2, [r4, #60]	; 0x3c
   1aa74:	strne	r3, [r4, #172]	; 0xac
   1aa78:	strne	r3, [r4, #176]	; 0xb0
   1aa7c:	strne	r3, [r4, #180]	; 0xb4
   1aa80:	cmp	r0, #0
   1aa84:	strd	r2, [r4, #16]
   1aa88:	ldr	r2, [r4, #76]	; 0x4c
   1aa8c:	str	r2, [r4]
   1aa90:	ldr	r2, [r4, #52]	; 0x34
   1aa94:	str	r3, [r4, #140]	; 0x8c
   1aa98:	str	r3, [r4, #148]	; 0x94
   1aa9c:	str	r3, [r4, #152]	; 0x98
   1aaa0:	str	r3, [r4, #156]	; 0x9c
   1aaa4:	str	r2, [r4, #4]
   1aaa8:	str	r3, [r4, #160]	; 0xa0
   1aaac:	beq	1aabc <flatcc_builder_custom_reset@@Base+0xd0>
   1aab0:	add	r0, r4, #188	; 0xbc
   1aab4:	bl	1cf54 <flatcc_emitter_reset@@Base>
   1aab8:	mov	r0, #0
   1aabc:	add	sp, sp, #12
   1aac0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1aac4:	mov	r3, #1
   1aac8:	ldr	r0, [r4, #40]	; 0x28
   1aacc:	mov	r2, r3
   1aad0:	ldr	r9, [r4, #48]	; 0x30
   1aad4:	str	r6, [sp]
   1aad8:	blx	r9
   1aadc:	cmp	r0, #0
   1aae0:	beq	1aa20 <flatcc_builder_custom_reset@@Base+0x34>
   1aae4:	mvn	r0, #0
   1aae8:	b	1aabc <flatcc_builder_custom_reset@@Base+0xd0>
   1aaec:	ldr	r3, [r5, #56]	; 0x38
   1aaf0:	cmp	r3, #0
   1aaf4:	beq	1aa30 <flatcc_builder_custom_reset@@Base+0x44>
   1aaf8:	ldr	r3, [pc, #12]	; 1ab0c <flatcc_builder_custom_reset@@Base+0x120>
   1aafc:	movw	r2, #434	; 0x1b2
   1ab00:	ldr	r1, [pc, #8]	; 1ab10 <flatcc_builder_custom_reset@@Base+0x124>
   1ab04:	ldr	r0, [pc, #8]	; 1ab14 <flatcc_builder_custom_reset@@Base+0x128>
   1ab08:	bl	12a60 <__assert_fail@plt>
   1ab0c:	andeq	r1, r2, r7, lsl #11
   1ab10:	andeq	r1, r2, r5, lsr #20
   1ab14:	andeq	r1, r2, r2, lsr #21

0001ab18 <flatcc_builder_reset@@Base>:
   1ab18:	mov	r2, #0
   1ab1c:	mov	r1, r2
   1ab20:	b	1a9ec <flatcc_builder_custom_reset@@Base>

0001ab24 <flatcc_builder_clear@@Base>:
   1ab24:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab28:	mov	r4, r0
   1ab2c:	add	r6, r0, #52	; 0x34
   1ab30:	mov	r5, #0
   1ab34:	mov	r3, #0
   1ab38:	mov	r1, r6
   1ab3c:	mov	r2, r3
   1ab40:	ldr	r0, [r4, #40]	; 0x28
   1ab44:	add	r6, r6, #8
   1ab48:	ldr	r7, [r4, #48]	; 0x30
   1ab4c:	str	r5, [sp]
   1ab50:	add	r5, r5, #1
   1ab54:	blx	r7
   1ab58:	cmp	r5, #8
   1ab5c:	bne	1ab34 <flatcc_builder_clear@@Base+0x10>
   1ab60:	ldr	r3, [r4, #184]	; 0xb8
   1ab64:	cmp	r3, #0
   1ab68:	beq	1ab74 <flatcc_builder_clear@@Base+0x50>
   1ab6c:	add	r0, r4, #188	; 0xbc
   1ab70:	bl	1cffc <flatcc_emitter_clear@@Base>
   1ab74:	mov	r2, #232	; 0xe8
   1ab78:	mov	r1, #0
   1ab7c:	mov	r0, r4
   1ab80:	add	sp, sp, #12
   1ab84:	pop	{r4, r5, r6, r7, lr}
   1ab88:	b	12a0c <memset@plt>

0001ab8c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1ab8c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab90:	add	r5, r1, #3
   1ab94:	mov	r7, #0
   1ab98:	bic	r5, r5, #3
   1ab9c:	mov	r1, #7
   1aba0:	add	r5, r5, #4
   1aba4:	mov	r6, r0
   1aba8:	mov	r3, r5
   1abac:	str	r7, [sp]
   1abb0:	ldr	r2, [r0, #228]	; 0xe4
   1abb4:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1abb8:	subs	r4, r0, #0
   1abbc:	beq	1abe8 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   1abc0:	mov	r2, r5
   1abc4:	mov	r1, r7
   1abc8:	bl	12a0c <memset@plt>
   1abcc:	ldr	r3, [r6, #224]	; 0xe0
   1abd0:	str	r3, [r4], #4
   1abd4:	ldr	r1, [r6, #228]	; 0xe4
   1abd8:	add	r3, r1, #4
   1abdc:	add	r5, r1, r5
   1abe0:	str	r3, [r6, #224]	; 0xe0
   1abe4:	str	r5, [r6, #228]	; 0xe4
   1abe8:	mov	r0, r4
   1abec:	add	sp, sp, #12
   1abf0:	pop	{r4, r5, r6, r7, pc}

0001abf4 <flatcc_builder_enter_user_frame@@Base>:
   1abf4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1abf8:	add	r4, r1, #3
   1abfc:	mov	r7, #0
   1ac00:	bic	r4, r4, #3
   1ac04:	mov	r1, #7
   1ac08:	add	r4, r4, #4
   1ac0c:	mov	r6, r0
   1ac10:	mov	r3, r4
   1ac14:	str	r7, [sp]
   1ac18:	ldr	r2, [r0, #228]	; 0xe4
   1ac1c:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1ac20:	subs	r5, r0, #0
   1ac24:	moveq	r0, r5
   1ac28:	beq	1ac54 <flatcc_builder_enter_user_frame@@Base+0x60>
   1ac2c:	mov	r2, r4
   1ac30:	mov	r1, r7
   1ac34:	bl	12a0c <memset@plt>
   1ac38:	ldr	r3, [r6, #224]	; 0xe0
   1ac3c:	str	r3, [r5]
   1ac40:	ldr	r1, [r6, #228]	; 0xe4
   1ac44:	add	r0, r1, #4
   1ac48:	add	r4, r1, r4
   1ac4c:	str	r0, [r6, #224]	; 0xe0
   1ac50:	str	r4, [r6, #228]	; 0xe4
   1ac54:	add	sp, sp, #12
   1ac58:	pop	{r4, r5, r6, r7, pc}

0001ac5c <flatcc_builder_exit_user_frame@@Base>:
   1ac5c:	ldr	r3, [r0, #224]	; 0xe0
   1ac60:	cmp	r3, #0
   1ac64:	bne	1ac80 <flatcc_builder_exit_user_frame@@Base+0x24>
   1ac68:	push	{r4, lr}
   1ac6c:	movw	r2, #542	; 0x21e
   1ac70:	ldr	r3, [pc, #40]	; 1aca0 <flatcc_builder_exit_user_frame@@Base+0x44>
   1ac74:	ldr	r1, [pc, #40]	; 1aca4 <flatcc_builder_exit_user_frame@@Base+0x48>
   1ac78:	ldr	r0, [pc, #40]	; 1aca8 <flatcc_builder_exit_user_frame@@Base+0x4c>
   1ac7c:	bl	12a60 <__assert_fail@plt>
   1ac80:	ldr	r1, [r0, #108]	; 0x6c
   1ac84:	mov	r2, r0
   1ac88:	add	r1, r1, r3
   1ac8c:	sub	r3, r3, #4
   1ac90:	str	r3, [r0, #228]	; 0xe4
   1ac94:	ldr	r0, [r1, #-4]
   1ac98:	str	r0, [r2, #224]	; 0xe0
   1ac9c:	bx	lr
   1aca0:	andeq	r1, r2, r3, lsr #11
   1aca4:	andeq	r1, r2, r5, lsr #20
   1aca8:			; <UNDEFINED> instruction: 0x00021ab4

0001acac <flatcc_builder_exit_user_frame_at@@Base>:
   1acac:	ldr	r2, [r0, #224]	; 0xe0
   1acb0:	cmp	r2, r1
   1acb4:	bcs	1acd0 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   1acb8:	push	{r4, lr}
   1acbc:	movw	r2, #551	; 0x227
   1acc0:	ldr	r3, [pc, #16]	; 1acd8 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   1acc4:	ldr	r1, [pc, #16]	; 1acdc <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1acc8:	ldr	r0, [pc, #16]	; 1ace0 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1accc:	bl	12a60 <__assert_fail@plt>
   1acd0:	str	r1, [r0, #224]	; 0xe0
   1acd4:	b	1ac5c <flatcc_builder_exit_user_frame@@Base>
   1acd8:	andeq	r1, r2, r2, asr #11
   1acdc:	andeq	r1, r2, r5, lsr #20
   1ace0:	andeq	r1, r2, sp, asr #21

0001ace4 <flatcc_builder_get_current_user_frame@@Base>:
   1ace4:	ldr	r0, [r0, #224]	; 0xe0
   1ace8:	bx	lr

0001acec <flatcc_builder_get_user_frame_ptr@@Base>:
   1acec:	ldr	r0, [r0, #108]	; 0x6c
   1acf0:	add	r0, r0, r1
   1acf4:	bx	lr

0001acf8 <flatcc_builder_embed_buffer@@Base>:
   1acf8:	push	{r4, r5, r6, lr}
   1acfc:	mov	r4, r3
   1ad00:	sub	sp, sp, #80	; 0x50
   1ad04:	mov	r6, r2
   1ad08:	mov	r2, r1
   1ad0c:	add	r1, sp, #96	; 0x60
   1ad10:	mov	r5, r0
   1ad14:	ldr	r3, [r0, #152]	; 0x98
   1ad18:	adds	r3, r3, #0
   1ad1c:	movne	r3, #1
   1ad20:	bl	1a644 <flatcc_builder_default_alloc@@Base+0x338>
   1ad24:	cmp	r0, #0
   1ad28:	movne	r0, #0
   1ad2c:	bne	1ae00 <flatcc_builder_embed_buffer@@Base+0x108>
   1ad30:	ldr	r3, [sp, #100]	; 0x64
   1ad34:	str	r0, [sp, #8]
   1ad38:	str	r0, [sp, #12]
   1ad3c:	tst	r3, #2
   1ad40:	ldr	r3, [r5, #136]	; 0x88
   1ad44:	movne	r2, #4
   1ad48:	moveq	r2, #0
   1ad4c:	sub	r3, r3, r4
   1ad50:	sub	r3, r3, r2
   1ad54:	ldrh	r2, [sp, #96]	; 0x60
   1ad58:	sub	r2, r2, #1
   1ad5c:	and	r3, r3, r2
   1ad60:	add	r2, r4, r3
   1ad64:	str	r2, [sp, #4]
   1ad68:	ldr	r2, [r5, #152]	; 0x98
   1ad6c:	cmp	r2, #0
   1ad70:	beq	1ad90 <flatcc_builder_embed_buffer@@Base+0x98>
   1ad74:	mov	r2, #4
   1ad78:	add	r1, sp, r2
   1ad7c:	str	r2, [sp, #8]
   1ad80:	str	r1, [sp, #16]
   1ad84:	str	r2, [sp, #20]
   1ad88:	mov	r2, #1
   1ad8c:	str	r2, [sp, #12]
   1ad90:	cmp	r4, #0
   1ad94:	beq	1adc0 <flatcc_builder_embed_buffer@@Base+0xc8>
   1ad98:	ldr	r2, [sp, #8]
   1ad9c:	add	r1, sp, #80	; 0x50
   1ada0:	add	r2, r2, r4
   1ada4:	str	r2, [sp, #8]
   1ada8:	ldr	r2, [sp, #12]
   1adac:	add	r2, r2, #1
   1adb0:	add	r1, r1, r2, lsl #3
   1adb4:	str	r2, [sp, #12]
   1adb8:	str	r6, [r1, #-72]	; 0xffffffb8
   1adbc:	str	r4, [r1, #-68]	; 0xffffffbc
   1adc0:	cmp	r3, #0
   1adc4:	beq	1adf4 <flatcc_builder_embed_buffer@@Base+0xfc>
   1adc8:	ldr	r2, [sp, #8]
   1adcc:	add	r1, sp, #80	; 0x50
   1add0:	ldr	r0, [pc, #48]	; 1ae08 <flatcc_builder_embed_buffer@@Base+0x110>
   1add4:	add	r2, r2, r3
   1add8:	str	r2, [sp, #8]
   1addc:	ldr	r2, [sp, #12]
   1ade0:	add	r2, r2, #1
   1ade4:	add	r1, r1, r2, lsl #3
   1ade8:	str	r2, [sp, #12]
   1adec:	str	r0, [r1, #-72]	; 0xffffffb8
   1adf0:	str	r3, [r1, #-68]	; 0xffffffbc
   1adf4:	add	r1, sp, #8
   1adf8:	mov	r0, r5
   1adfc:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1ae00:	add	sp, sp, #80	; 0x50
   1ae04:	pop	{r4, r5, r6, pc}
   1ae08:	andeq	r1, r2, pc, lsr r3

0001ae0c <flatcc_builder_create_buffer@@Base>:
   1ae0c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ae10:	sub	sp, sp, #92	; 0x5c
   1ae14:	mov	r8, #0
   1ae18:	mov	r9, r1
   1ae1c:	mov	r5, r3
   1ae20:	add	r1, sp, #120	; 0x78
   1ae24:	mov	r4, r0
   1ae28:	ldr	r7, [sp, #124]	; 0x7c
   1ae2c:	str	r8, [sp, #12]
   1ae30:	and	r6, r7, #1
   1ae34:	mov	r3, r6
   1ae38:	bl	1a644 <flatcc_builder_default_alloc@@Base+0x338>
   1ae3c:	cmp	r0, r8
   1ae40:	bne	1afb0 <flatcc_builder_create_buffer@@Base+0x1a4>
   1ae44:	ldrh	r3, [r4, #128]	; 0x80
   1ae48:	ldrh	r1, [sp, #120]	; 0x78
   1ae4c:	ldr	r2, [r4, #136]	; 0x88
   1ae50:	cmp	r3, r1
   1ae54:	strhcc	r1, [r4, #128]	; 0x80
   1ae58:	cmp	r9, #0
   1ae5c:	sub	r1, r1, #1
   1ae60:	ldrne	r3, [r9]
   1ae64:	strne	r3, [sp, #12]
   1ae68:	sub	r3, r2, #4
   1ae6c:	ldr	r0, [sp, #12]
   1ae70:	cmp	r0, #0
   1ae74:	movne	r0, #4
   1ae78:	tst	r7, #2
   1ae7c:	movne	ip, #4
   1ae80:	moveq	ip, #0
   1ae84:	sub	r3, r3, r0
   1ae88:	ands	r7, r7, #3
   1ae8c:	sub	r3, r3, ip
   1ae90:	and	r3, r3, r1
   1ae94:	mov	r1, #0
   1ae98:	str	r1, [sp, #16]
   1ae9c:	str	r1, [sp, #20]
   1aea0:	beq	1aec0 <flatcc_builder_create_buffer@@Base+0xb4>
   1aea4:	mov	r1, #4
   1aea8:	add	ip, sp, #8
   1aeac:	str	r1, [sp, #16]
   1aeb0:	str	ip, [sp, #24]
   1aeb4:	str	r1, [sp, #28]
   1aeb8:	mov	r1, #1
   1aebc:	str	r1, [sp, #20]
   1aec0:	ldr	ip, [sp, #16]
   1aec4:	add	r8, sp, #88	; 0x58
   1aec8:	add	r9, sp, #4
   1aecc:	cmp	r0, #0
   1aed0:	ldr	lr, [sp, #20]
   1aed4:	add	ip, ip, #4
   1aed8:	add	r1, lr, #1
   1aedc:	str	ip, [sp, #16]
   1aee0:	add	r8, r8, r1, lsl #3
   1aee4:	str	r1, [sp, #20]
   1aee8:	str	r9, [r8, #-72]	; 0xffffffb8
   1aeec:	mov	r9, #4
   1aef0:	str	r9, [r8, #-68]	; 0xffffffbc
   1aef4:	beq	1af20 <flatcc_builder_create_buffer@@Base+0x114>
   1aef8:	add	ip, ip, r0
   1aefc:	add	r1, lr, #2
   1af00:	add	lr, lr, #2
   1af04:	str	ip, [sp, #16]
   1af08:	add	ip, sp, #88	; 0x58
   1af0c:	add	r1, ip, r1, lsl #3
   1af10:	add	ip, sp, #12
   1af14:	str	lr, [sp, #20]
   1af18:	str	ip, [r1, #-72]	; 0xffffffb8
   1af1c:	str	r0, [r1, #-68]	; 0xffffffbc
   1af20:	cmp	r3, #0
   1af24:	beq	1af54 <flatcc_builder_create_buffer@@Base+0x148>
   1af28:	ldr	r1, [sp, #16]
   1af2c:	add	r0, sp, #88	; 0x58
   1af30:	ldr	ip, [pc, #132]	; 1afbc <flatcc_builder_create_buffer@@Base+0x1b0>
   1af34:	add	r1, r1, r3
   1af38:	str	r1, [sp, #16]
   1af3c:	ldr	r1, [sp, #20]
   1af40:	add	r1, r1, #1
   1af44:	add	r0, r0, r1, lsl #3
   1af48:	str	r1, [sp, #20]
   1af4c:	str	ip, [r0, #-72]	; 0xffffffb8
   1af50:	str	r3, [r0, #-68]	; 0xffffffbc
   1af54:	ldr	r3, [sp, #16]
   1af58:	cmp	r7, #0
   1af5c:	add	r1, sp, #16
   1af60:	mov	r0, r4
   1af64:	sub	r3, r2, r3
   1af68:	movne	r2, #4
   1af6c:	moveq	r2, #0
   1af70:	cmp	r6, #0
   1af74:	add	r3, r3, r2
   1af78:	ldrne	r2, [r4, #144]	; 0x90
   1af7c:	ldreq	r2, [r4, #140]	; 0x8c
   1af80:	sub	r2, r2, r3
   1af84:	sub	r3, r5, r3
   1af88:	str	r3, [sp, #4]
   1af8c:	str	r2, [sp, #8]
   1af90:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1af94:	cmp	r0, #0
   1af98:	bne	1afb4 <flatcc_builder_create_buffer@@Base+0x1a8>
   1af9c:	ldr	r3, [pc, #28]	; 1afc0 <flatcc_builder_create_buffer@@Base+0x1b4>
   1afa0:	mov	r2, #772	; 0x304
   1afa4:	ldr	r1, [pc, #24]	; 1afc4 <flatcc_builder_create_buffer@@Base+0x1b8>
   1afa8:	ldr	r0, [pc, #24]	; 1afc8 <flatcc_builder_create_buffer@@Base+0x1bc>
   1afac:	bl	12a60 <__assert_fail@plt>
   1afb0:	mov	r0, r8
   1afb4:	add	sp, sp, #92	; 0x5c
   1afb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1afbc:	andeq	r1, r2, pc, lsr r3
   1afc0:	andeq	r1, r2, r4, ror #11
   1afc4:	andeq	r1, r2, r5, lsr #20
   1afc8:	muleq	r2, r2, sl

0001afcc <flatcc_builder_create_struct@@Base>:
   1afcc:	cmp	r3, #0
   1afd0:	push	{lr}		; (str lr, [sp, #-4]!)
   1afd4:	sub	sp, sp, #76	; 0x4c
   1afd8:	bne	1aff0 <flatcc_builder_create_struct@@Base+0x24>
   1afdc:	ldr	r3, [pc, #148]	; 1b078 <flatcc_builder_create_struct@@Base+0xac>
   1afe0:	movw	r2, #783	; 0x30f
   1afe4:	ldr	r1, [pc, #144]	; 1b07c <flatcc_builder_create_struct@@Base+0xb0>
   1afe8:	ldr	r0, [pc, #144]	; 1b080 <flatcc_builder_create_struct@@Base+0xb4>
   1afec:	bl	12a60 <__assert_fail@plt>
   1aff0:	ldrh	ip, [r0, #128]	; 0x80
   1aff4:	cmp	ip, r3
   1aff8:	ldr	ip, [r0, #136]	; 0x88
   1affc:	strhcc	r3, [r0, #128]	; 0x80
   1b000:	sub	r3, r3, #1
   1b004:	sub	ip, ip, r2
   1b008:	and	r3, r3, ip
   1b00c:	mov	ip, #0
   1b010:	cmp	r2, ip
   1b014:	str	ip, [sp]
   1b018:	str	ip, [sp, #4]
   1b01c:	beq	1b034 <flatcc_builder_create_struct@@Base+0x68>
   1b020:	str	r2, [sp]
   1b024:	str	r1, [sp, #8]
   1b028:	str	r2, [sp, #12]
   1b02c:	mov	r2, #1
   1b030:	str	r2, [sp, #4]
   1b034:	cmp	r3, #0
   1b038:	beq	1b068 <flatcc_builder_create_struct@@Base+0x9c>
   1b03c:	ldr	r2, [sp]
   1b040:	add	r1, sp, #72	; 0x48
   1b044:	ldr	ip, [pc, #56]	; 1b084 <flatcc_builder_create_struct@@Base+0xb8>
   1b048:	add	r2, r2, r3
   1b04c:	str	r2, [sp]
   1b050:	ldr	r2, [sp, #4]
   1b054:	add	r2, r2, #1
   1b058:	add	r1, r1, r2, lsl #3
   1b05c:	str	r2, [sp, #4]
   1b060:	str	ip, [r1, #-72]	; 0xffffffb8
   1b064:	str	r3, [r1, #-68]	; 0xffffffbc
   1b068:	mov	r1, sp
   1b06c:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1b070:	add	sp, sp, #76	; 0x4c
   1b074:	pop	{pc}		; (ldr pc, [sp], #4)
   1b078:	andeq	r1, r2, r1, lsl #12
   1b07c:	andeq	r1, r2, r5, lsr #20
   1b080:	andeq	r1, r2, ip, ror #21
   1b084:	andeq	r1, r2, pc, lsr r3

0001b088 <flatcc_builder_start_buffer@@Base>:
   1b088:	push	{r4, r5, r6, r7, r8, lr}
   1b08c:	mov	r5, r1
   1b090:	mov	r4, r0
   1b094:	mov	r7, r2
   1b098:	mov	r6, r3
   1b09c:	ldrh	r1, [r0, #128]	; 0x80
   1b0a0:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1b0a4:	cmp	r0, #0
   1b0a8:	bne	1b118 <flatcc_builder_start_buffer@@Base+0x90>
   1b0ac:	ldrh	r3, [r4, #132]	; 0x84
   1b0b0:	mov	ip, #1
   1b0b4:	cmp	r5, #0
   1b0b8:	ldr	r1, [r4, #32]
   1b0bc:	strh	ip, [r4, #128]	; 0x80
   1b0c0:	strh	r3, [r1, #34]	; 0x22
   1b0c4:	ldrh	r3, [r4, #164]	; 0xa4
   1b0c8:	strh	r7, [r4, #132]	; 0x84
   1b0cc:	strh	r3, [r1, #32]
   1b0d0:	ldr	r3, [r4, #144]	; 0x90
   1b0d4:	strh	r6, [r4, #164]	; 0xa4
   1b0d8:	str	r3, [r1, #20]
   1b0dc:	ldr	r3, [r4, #152]	; 0x98
   1b0e0:	str	r3, [r1, #28]
   1b0e4:	ldr	r3, [r4, #136]	; 0x88
   1b0e8:	str	r3, [r4, #144]	; 0x90
   1b0ec:	ldr	r3, [r4, #148]	; 0x94
   1b0f0:	add	r2, r3, ip
   1b0f4:	strd	r2, [r4, #148]	; 0x94
   1b0f8:	ldr	r3, [r4, #168]	; 0xa8
   1b0fc:	str	r3, [r1, #16]
   1b100:	ldr	r3, [pc, #24]	; 1b120 <flatcc_builder_start_buffer@@Base+0x98>
   1b104:	moveq	r5, r3
   1b108:	ldr	r3, [r5]
   1b10c:	str	r3, [r4, #168]	; 0xa8
   1b110:	strh	ip, [r1, #14]
   1b114:	pop	{r4, r5, r6, r7, r8, pc}
   1b118:	mvn	r0, #0
   1b11c:	pop	{r4, r5, r6, r7, r8, pc}
   1b120:	andeq	r1, r2, pc, lsr r3

0001b124 <flatcc_builder_end_buffer@@Base>:
   1b124:	push	{r0, r1, r2, r4, r5, lr}
   1b128:	mov	r4, r0
   1b12c:	ldrh	r0, [r0, #164]	; 0xa4
   1b130:	ldr	r2, [r4, #152]	; 0x98
   1b134:	and	r0, r0, #2
   1b138:	cmp	r2, #0
   1b13c:	orrne	r0, r0, #1
   1b140:	ldr	r2, [r4, #32]
   1b144:	ldrh	r2, [r2, #14]
   1b148:	cmp	r2, #1
   1b14c:	beq	1b164 <flatcc_builder_end_buffer@@Base+0x40>
   1b150:	ldr	r3, [pc, #120]	; 1b1d0 <flatcc_builder_end_buffer@@Base+0xac>
   1b154:	movw	r2, #838	; 0x346
   1b158:	ldr	r1, [pc, #116]	; 1b1d4 <flatcc_builder_end_buffer@@Base+0xb0>
   1b15c:	ldr	r0, [pc, #116]	; 1b1d8 <flatcc_builder_end_buffer@@Base+0xb4>
   1b160:	bl	12a60 <__assert_fail@plt>
   1b164:	ldrh	r2, [r4, #132]	; 0x84
   1b168:	mov	r3, r1
   1b16c:	ldrh	r1, [r4, #128]	; 0x80
   1b170:	cmp	r1, r2
   1b174:	strhcc	r2, [r4, #128]	; 0x80
   1b178:	ldrh	r1, [r4, #128]	; 0x80
   1b17c:	str	r1, [sp]
   1b180:	add	r1, r4, #168	; 0xa8
   1b184:	str	r0, [sp, #4]
   1b188:	mov	r0, r4
   1b18c:	bl	1ae0c <flatcc_builder_create_buffer@@Base>
   1b190:	subs	r5, r0, #0
   1b194:	beq	1b1c4 <flatcc_builder_end_buffer@@Base+0xa0>
   1b198:	ldr	r3, [r4, #32]
   1b19c:	mov	r0, r4
   1b1a0:	ldr	r2, [r3, #20]
   1b1a4:	str	r2, [r4, #144]	; 0x90
   1b1a8:	ldr	r2, [r3, #28]
   1b1ac:	str	r2, [r4, #152]	; 0x98
   1b1b0:	ldr	r2, [r3, #16]
   1b1b4:	ldrh	r3, [r3, #32]
   1b1b8:	strh	r3, [r4, #164]	; 0xa4
   1b1bc:	str	r2, [r4, #168]	; 0xa8
   1b1c0:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1b1c4:	mov	r0, r5
   1b1c8:	add	sp, sp, #12
   1b1cc:	pop	{r4, r5, pc}
   1b1d0:	andeq	r1, r2, lr, lsl r6
   1b1d4:	andeq	r1, r2, r5, lsr #20
   1b1d8:	strdeq	r1, [r2], -r7

0001b1dc <flatcc_builder_start_struct@@Base>:
   1b1dc:	push	{r4, r5, r6, lr}
   1b1e0:	mov	r5, r1
   1b1e4:	mov	r1, r2
   1b1e8:	mov	r4, r0
   1b1ec:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1b1f0:	cmp	r0, #0
   1b1f4:	bne	1b21c <flatcc_builder_start_struct@@Base+0x40>
   1b1f8:	ldr	r3, [r4, #32]
   1b1fc:	mov	r2, #2
   1b200:	mvn	r1, #3
   1b204:	mov	r0, r4
   1b208:	strh	r2, [r3, #14]
   1b20c:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1b210:	mov	r1, r5
   1b214:	pop	{r4, r5, r6, lr}
   1b218:	b	1a1c0 <time_struct_buffer@@Base+0x108>
   1b21c:	mov	r0, #0
   1b220:	pop	{r4, r5, r6, pc}

0001b224 <flatcc_builder_struct_edit@@Base>:
   1b224:	ldr	r0, [r0, #16]
   1b228:	bx	lr

0001b22c <flatcc_builder_end_struct@@Base>:
   1b22c:	ldr	r3, [r0, #32]
   1b230:	push	{r4, r5, r6, lr}
   1b234:	ldrh	r3, [r3, #14]
   1b238:	cmp	r3, #2
   1b23c:	beq	1b254 <flatcc_builder_end_struct@@Base+0x28>
   1b240:	ldr	r3, [pc, #56]	; 1b280 <flatcc_builder_end_struct@@Base+0x54>
   1b244:	mov	r2, #872	; 0x368
   1b248:	ldr	r1, [pc, #52]	; 1b284 <flatcc_builder_end_struct@@Base+0x58>
   1b24c:	ldr	r0, [pc, #52]	; 1b288 <flatcc_builder_end_struct@@Base+0x5c>
   1b250:	bl	12a60 <__assert_fail@plt>
   1b254:	ldrh	r3, [r0, #130]	; 0x82
   1b258:	mov	r4, r0
   1b25c:	ldr	r1, [r0, #16]
   1b260:	ldr	r2, [r0, #20]
   1b264:	bl	1afcc <flatcc_builder_create_struct@@Base>
   1b268:	subs	r5, r0, #0
   1b26c:	beq	1b278 <flatcc_builder_end_struct@@Base+0x4c>
   1b270:	mov	r0, r4
   1b274:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1b278:	mov	r0, r5
   1b27c:	pop	{r4, r5, r6, pc}
   1b280:	andeq	r1, r2, r8, lsr r6
   1b284:	andeq	r1, r2, r5, lsr #20
   1b288:	andeq	r1, r2, r3, lsr #22

0001b28c <flatcc_builder_extend_vector@@Base>:
   1b28c:	push	{r4, r5, r6, lr}
   1b290:	mov	r4, r0
   1b294:	mov	r5, r1
   1b298:	ldr	r0, [r0, #32]
   1b29c:	ldr	r2, [r0, #24]
   1b2a0:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1b2a4:	cmp	r0, #0
   1b2a8:	bne	1b2c4 <flatcc_builder_extend_vector@@Base+0x38>
   1b2ac:	ldr	r3, [r4, #32]
   1b2b0:	mov	r0, r4
   1b2b4:	ldr	r1, [r3, #16]
   1b2b8:	mul	r1, r1, r5
   1b2bc:	pop	{r4, r5, r6, lr}
   1b2c0:	b	1a1c0 <time_struct_buffer@@Base+0x108>
   1b2c4:	mov	r0, #0
   1b2c8:	pop	{r4, r5, r6, pc}

0001b2cc <flatcc_builder_vector_push@@Base>:
   1b2cc:	ldr	r3, [r0, #32]
   1b2d0:	push	{r4, lr}
   1b2d4:	ldrh	r2, [r3, #14]
   1b2d8:	cmp	r2, #4
   1b2dc:	beq	1b2f4 <flatcc_builder_vector_push@@Base+0x28>
   1b2e0:	ldr	r3, [pc, #68]	; 1b32c <flatcc_builder_vector_push@@Base+0x60>
   1b2e4:	movw	r2, #907	; 0x38b
   1b2e8:	ldr	r1, [pc, #64]	; 1b330 <flatcc_builder_vector_push@@Base+0x64>
   1b2ec:	ldr	r0, [pc, #64]	; 1b334 <flatcc_builder_vector_push@@Base+0x68>
   1b2f0:	bl	12a60 <__assert_fail@plt>
   1b2f4:	ldr	r2, [r3, #20]
   1b2f8:	ldr	ip, [r3, #24]
   1b2fc:	cmp	r2, ip
   1b300:	bls	1b318 <flatcc_builder_vector_push@@Base+0x4c>
   1b304:	ldr	r3, [pc, #32]	; 1b32c <flatcc_builder_vector_push@@Base+0x60>
   1b308:	mov	r2, #908	; 0x38c
   1b30c:	ldr	r1, [pc, #28]	; 1b330 <flatcc_builder_vector_push@@Base+0x64>
   1b310:	ldr	r0, [pc, #32]	; 1b338 <flatcc_builder_vector_push@@Base+0x6c>
   1b314:	b	1b2f0 <flatcc_builder_vector_push@@Base+0x24>
   1b318:	add	r2, r2, #1
   1b31c:	pop	{r4, lr}
   1b320:	str	r2, [r3, #20]
   1b324:	ldr	r2, [r3, #16]
   1b328:	b	1a290 <time_struct_buffer@@Base+0x1d8>
   1b32c:	andeq	r1, r2, r2, asr r6
   1b330:	andeq	r1, r2, r5, lsr #20
   1b334:	andeq	r1, r2, pc, asr #22
   1b338:	andeq	r1, r2, fp, ror fp

0001b33c <flatcc_builder_append_vector@@Base>:
   1b33c:	push	{r4, r5, r6, lr}
   1b340:	mov	r4, r0
   1b344:	ldr	r0, [r0, #32]
   1b348:	ldrh	r3, [r0, #14]
   1b34c:	cmp	r3, #4
   1b350:	beq	1b368 <flatcc_builder_append_vector@@Base+0x2c>
   1b354:	ldr	r3, [pc, #76]	; 1b3a8 <flatcc_builder_append_vector@@Base+0x6c>
   1b358:	movw	r2, #915	; 0x393
   1b35c:	ldr	r1, [pc, #72]	; 1b3ac <flatcc_builder_append_vector@@Base+0x70>
   1b360:	ldr	r0, [pc, #72]	; 1b3b0 <flatcc_builder_append_vector@@Base+0x74>
   1b364:	bl	12a60 <__assert_fail@plt>
   1b368:	mov	r6, r1
   1b36c:	mov	r5, r2
   1b370:	mov	r1, r2
   1b374:	ldr	r2, [r0, #24]
   1b378:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1b37c:	cmp	r0, #0
   1b380:	bne	1b3a0 <flatcc_builder_append_vector@@Base+0x64>
   1b384:	ldr	r3, [r4, #32]
   1b388:	mov	r1, r6
   1b38c:	mov	r0, r4
   1b390:	ldr	r2, [r3, #16]
   1b394:	mul	r2, r2, r5
   1b398:	pop	{r4, r5, r6, lr}
   1b39c:	b	1a290 <time_struct_buffer@@Base+0x1d8>
   1b3a0:	mov	r0, #0
   1b3a4:	pop	{r4, r5, r6, pc}
   1b3a8:	andeq	r1, r2, sp, ror #12
   1b3ac:	andeq	r1, r2, r5, lsr #20
   1b3b0:	andeq	r1, r2, pc, asr #22

0001b3b4 <flatcc_builder_extend_offset_vector@@Base>:
   1b3b4:	push	{r4, r5, r6, lr}
   1b3b8:	mvn	r2, #-1073741824	; 0xc0000000
   1b3bc:	mov	r4, r0
   1b3c0:	mov	r5, r1
   1b3c4:	ldr	r0, [r0, #32]
   1b3c8:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1b3cc:	cmp	r0, #0
   1b3d0:	bne	1b3e4 <flatcc_builder_extend_offset_vector@@Base+0x30>
   1b3d4:	lsl	r1, r5, #2
   1b3d8:	mov	r0, r4
   1b3dc:	pop	{r4, r5, r6, lr}
   1b3e0:	b	1a1c0 <time_struct_buffer@@Base+0x108>
   1b3e4:	mov	r0, #0
   1b3e8:	pop	{r4, r5, r6, pc}

0001b3ec <flatcc_builder_offset_vector_push@@Base>:
   1b3ec:	ldr	r2, [r0, #32]
   1b3f0:	push	{r4, lr}
   1b3f4:	ldrh	r3, [r2, #14]
   1b3f8:	cmp	r3, #5
   1b3fc:	beq	1b414 <flatcc_builder_offset_vector_push@@Base+0x28>
   1b400:	ldr	r3, [pc, #64]	; 1b448 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1b404:	movw	r2, #934	; 0x3a6
   1b408:	ldr	r1, [pc, #60]	; 1b44c <flatcc_builder_offset_vector_push@@Base+0x60>
   1b40c:	ldr	r0, [pc, #60]	; 1b450 <flatcc_builder_offset_vector_push@@Base+0x64>
   1b410:	bl	12a60 <__assert_fail@plt>
   1b414:	ldr	r3, [r2, #20]
   1b418:	cmn	r3, #-1073741823	; 0xc0000001
   1b41c:	beq	1b440 <flatcc_builder_offset_vector_push@@Base+0x54>
   1b420:	add	r3, r3, #1
   1b424:	mov	r4, r1
   1b428:	mov	r1, #4
   1b42c:	str	r3, [r2, #20]
   1b430:	bl	1a1c0 <time_struct_buffer@@Base+0x108>
   1b434:	cmp	r0, #0
   1b438:	strne	r4, [r0]
   1b43c:	pop	{r4, pc}
   1b440:	mov	r0, #0
   1b444:	pop	{r4, pc}
   1b448:	andeq	r1, r2, sl, lsl #13
   1b44c:	andeq	r1, r2, r5, lsr #20
   1b450:			; <UNDEFINED> instruction: 0x00021bb8

0001b454 <flatcc_builder_append_offset_vector@@Base>:
   1b454:	push	{r4, r5, r6, lr}
   1b458:	mov	r4, r0
   1b45c:	ldr	r0, [r0, #32]
   1b460:	ldrh	r3, [r0, #14]
   1b464:	cmp	r3, #5
   1b468:	beq	1b480 <flatcc_builder_append_offset_vector@@Base+0x2c>
   1b46c:	ldr	r3, [pc, #68]	; 1b4b8 <flatcc_builder_append_offset_vector@@Base+0x64>
   1b470:	mov	r2, #948	; 0x3b4
   1b474:	ldr	r1, [pc, #64]	; 1b4bc <flatcc_builder_append_offset_vector@@Base+0x68>
   1b478:	ldr	r0, [pc, #64]	; 1b4c0 <flatcc_builder_append_offset_vector@@Base+0x6c>
   1b47c:	bl	12a60 <__assert_fail@plt>
   1b480:	mov	r5, r2
   1b484:	mov	r6, r1
   1b488:	mvn	r2, #-1073741824	; 0xc0000000
   1b48c:	mov	r1, r5
   1b490:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1b494:	cmp	r0, #0
   1b498:	bne	1b4b0 <flatcc_builder_append_offset_vector@@Base+0x5c>
   1b49c:	lsl	r2, r5, #2
   1b4a0:	mov	r1, r6
   1b4a4:	mov	r0, r4
   1b4a8:	pop	{r4, r5, r6, lr}
   1b4ac:	b	1a290 <time_struct_buffer@@Base+0x1d8>
   1b4b0:	mov	r0, #0
   1b4b4:	pop	{r4, r5, r6, pc}
   1b4b8:	andeq	r1, r2, ip, lsr #13
   1b4bc:	andeq	r1, r2, r5, lsr #20
   1b4c0:			; <UNDEFINED> instruction: 0x00021bb8

0001b4c4 <flatcc_builder_extend_string@@Base>:
   1b4c4:	push	{r4, r5, r6, lr}
   1b4c8:	mov	r4, r0
   1b4cc:	ldr	r0, [r0, #32]
   1b4d0:	ldrh	r3, [r0, #14]
   1b4d4:	cmp	r3, #6
   1b4d8:	beq	1b4f0 <flatcc_builder_extend_string@@Base+0x2c>
   1b4dc:	ldr	r3, [pc, #56]	; 1b51c <flatcc_builder_extend_string@@Base+0x58>
   1b4e0:	movw	r2, #957	; 0x3bd
   1b4e4:	ldr	r1, [pc, #52]	; 1b520 <flatcc_builder_extend_string@@Base+0x5c>
   1b4e8:	ldr	r0, [pc, #52]	; 1b524 <flatcc_builder_extend_string@@Base+0x60>
   1b4ec:	bl	12a60 <__assert_fail@plt>
   1b4f0:	mvn	r2, #0
   1b4f4:	mov	r5, r1
   1b4f8:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1b4fc:	cmp	r0, #0
   1b500:	bne	1b514 <flatcc_builder_extend_string@@Base+0x50>
   1b504:	mov	r1, r5
   1b508:	mov	r0, r4
   1b50c:	pop	{r4, r5, r6, lr}
   1b510:	b	1a1c0 <time_struct_buffer@@Base+0x108>
   1b514:	mov	r0, #0
   1b518:	pop	{r4, r5, r6, pc}
   1b51c:	ldrdeq	r1, [r2], -r0
   1b520:	andeq	r1, r2, r5, lsr #20
   1b524:	andeq	r1, r2, fp, ror #23

0001b528 <flatcc_builder_append_string@@Base>:
   1b528:	push	{r4, r5, r6, lr}
   1b52c:	mov	r4, r0
   1b530:	ldr	r0, [r0, #32]
   1b534:	ldrh	r3, [r0, #14]
   1b538:	cmp	r3, #6
   1b53c:	beq	1b554 <flatcc_builder_append_string@@Base+0x2c>
   1b540:	ldr	r3, [pc, #68]	; 1b58c <flatcc_builder_append_string@@Base+0x64>
   1b544:	movw	r2, #966	; 0x3c6
   1b548:	ldr	r1, [pc, #64]	; 1b590 <flatcc_builder_append_string@@Base+0x68>
   1b54c:	ldr	r0, [pc, #64]	; 1b594 <flatcc_builder_append_string@@Base+0x6c>
   1b550:	bl	12a60 <__assert_fail@plt>
   1b554:	mov	r5, r2
   1b558:	mov	r6, r1
   1b55c:	mvn	r2, #0
   1b560:	mov	r1, r5
   1b564:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1b568:	cmp	r0, #0
   1b56c:	bne	1b584 <flatcc_builder_append_string@@Base+0x5c>
   1b570:	mov	r2, r5
   1b574:	mov	r1, r6
   1b578:	mov	r0, r4
   1b57c:	pop	{r4, r5, r6, lr}
   1b580:	b	1a290 <time_struct_buffer@@Base+0x1d8>
   1b584:	mov	r0, #0
   1b588:	pop	{r4, r5, r6, pc}
   1b58c:	andeq	r1, r2, sp, ror #13
   1b590:	andeq	r1, r2, r5, lsr #20
   1b594:	andeq	r1, r2, fp, ror #23

0001b598 <flatcc_builder_append_string_str@@Base>:
   1b598:	push	{r4, r5, r6, lr}
   1b59c:	mov	r5, r0
   1b5a0:	mov	r0, r1
   1b5a4:	mov	r4, r1
   1b5a8:	bl	129e8 <strlen@plt>
   1b5ac:	mov	r2, r0
   1b5b0:	mov	r1, r4
   1b5b4:	mov	r0, r5
   1b5b8:	pop	{r4, r5, r6, lr}
   1b5bc:	b	1b528 <flatcc_builder_append_string@@Base>

0001b5c0 <flatcc_builder_append_string_strn@@Base>:
   1b5c0:	push	{r4, r5, r6, lr}
   1b5c4:	mov	r4, r1
   1b5c8:	mov	r6, r0
   1b5cc:	mov	r1, #0
   1b5d0:	mov	r0, r4
   1b5d4:	mov	r5, r2
   1b5d8:	bl	12a24 <memchr@plt>
   1b5dc:	cmp	r0, #0
   1b5e0:	mov	r1, r4
   1b5e4:	subne	r5, r0, r4
   1b5e8:	mov	r0, r6
   1b5ec:	mov	r2, r5
   1b5f0:	pop	{r4, r5, r6, lr}
   1b5f4:	b	1b528 <flatcc_builder_append_string@@Base>

0001b5f8 <flatcc_builder_truncate_vector@@Base>:
   1b5f8:	ldr	r3, [r0, #32]
   1b5fc:	push	{r4, lr}
   1b600:	ldrh	r2, [r3, #14]
   1b604:	cmp	r2, #4
   1b608:	beq	1b620 <flatcc_builder_truncate_vector@@Base+0x28>
   1b60c:	ldr	r3, [pc, #72]	; 1b65c <flatcc_builder_truncate_vector@@Base+0x64>
   1b610:	movw	r2, #985	; 0x3d9
   1b614:	ldr	r1, [pc, #68]	; 1b660 <flatcc_builder_truncate_vector@@Base+0x68>
   1b618:	ldr	r0, [pc, #68]	; 1b664 <flatcc_builder_truncate_vector@@Base+0x6c>
   1b61c:	bl	12a60 <__assert_fail@plt>
   1b620:	ldr	r2, [r3, #20]
   1b624:	cmp	r2, r1
   1b628:	bcs	1b640 <flatcc_builder_truncate_vector@@Base+0x48>
   1b62c:	ldr	r3, [pc, #40]	; 1b65c <flatcc_builder_truncate_vector@@Base+0x64>
   1b630:	movw	r2, #986	; 0x3da
   1b634:	ldr	r1, [pc, #36]	; 1b660 <flatcc_builder_truncate_vector@@Base+0x68>
   1b638:	ldr	r0, [pc, #40]	; 1b668 <flatcc_builder_truncate_vector@@Base+0x70>
   1b63c:	b	1b61c <flatcc_builder_truncate_vector@@Base+0x24>
   1b640:	sub	r2, r2, r1
   1b644:	str	r2, [r3, #20]
   1b648:	ldr	r3, [r3, #16]
   1b64c:	mul	r1, r3, r1
   1b650:	bl	1a270 <time_struct_buffer@@Base+0x1b8>
   1b654:	mov	r0, #0
   1b658:	pop	{r4, pc}
   1b65c:	andeq	r1, r2, sl, lsl #14
   1b660:	andeq	r1, r2, r5, lsr #20
   1b664:	andeq	r1, r2, pc, asr #22
   1b668:	andeq	r1, r2, r7, lsl ip

0001b66c <flatcc_builder_truncate_offset_vector@@Base>:
   1b66c:	ldr	r3, [r0, #32]
   1b670:	push	{r4, lr}
   1b674:	ldrh	r2, [r3, #14]
   1b678:	cmp	r2, #5
   1b67c:	beq	1b694 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   1b680:	ldr	r3, [pc, #72]	; 1b6d0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1b684:	movw	r2, #994	; 0x3e2
   1b688:	ldr	r1, [pc, #68]	; 1b6d4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1b68c:	ldr	r0, [pc, #68]	; 1b6d8 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1b690:	bl	12a60 <__assert_fail@plt>
   1b694:	ldr	r2, [r3, #20]
   1b698:	cmp	r2, r1
   1b69c:	bcs	1b6b4 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   1b6a0:	ldr	r3, [pc, #40]	; 1b6d0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1b6a4:	movw	r2, #995	; 0x3e3
   1b6a8:	ldr	r1, [pc, #36]	; 1b6d4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1b6ac:	ldr	r0, [pc, #40]	; 1b6dc <flatcc_builder_truncate_offset_vector@@Base+0x70>
   1b6b0:	b	1b690 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   1b6b4:	sub	r2, r2, r1
   1b6b8:	str	r2, [r3, #20]
   1b6bc:	ldr	r3, [r3, #16]
   1b6c0:	mul	r1, r3, r1
   1b6c4:	bl	1a270 <time_struct_buffer@@Base+0x1b8>
   1b6c8:	mov	r0, #0
   1b6cc:	pop	{r4, pc}
   1b6d0:	andeq	r1, r2, r9, lsr #14
   1b6d4:	andeq	r1, r2, r5, lsr #20
   1b6d8:			; <UNDEFINED> instruction: 0x00021bb8
   1b6dc:	andeq	r1, r2, fp, lsr ip

0001b6e0 <flatcc_builder_truncate_string@@Base>:
   1b6e0:	ldr	r2, [r0, #32]
   1b6e4:	push	{r4, lr}
   1b6e8:	ldrh	r3, [r2, #14]
   1b6ec:	cmp	r3, #6
   1b6f0:	beq	1b708 <flatcc_builder_truncate_string@@Base+0x28>
   1b6f4:	ldr	r3, [pc, #64]	; 1b73c <flatcc_builder_truncate_string@@Base+0x5c>
   1b6f8:	movw	r2, #1003	; 0x3eb
   1b6fc:	ldr	r1, [pc, #60]	; 1b740 <flatcc_builder_truncate_string@@Base+0x60>
   1b700:	ldr	r0, [pc, #60]	; 1b744 <flatcc_builder_truncate_string@@Base+0x64>
   1b704:	bl	12a60 <__assert_fail@plt>
   1b708:	ldr	r3, [r2, #20]
   1b70c:	cmp	r3, r1
   1b710:	bcs	1b728 <flatcc_builder_truncate_string@@Base+0x48>
   1b714:	ldr	r3, [pc, #32]	; 1b73c <flatcc_builder_truncate_string@@Base+0x5c>
   1b718:	mov	r2, #1004	; 0x3ec
   1b71c:	ldr	r1, [pc, #28]	; 1b740 <flatcc_builder_truncate_string@@Base+0x60>
   1b720:	ldr	r0, [pc, #32]	; 1b748 <flatcc_builder_truncate_string@@Base+0x68>
   1b724:	b	1b704 <flatcc_builder_truncate_string@@Base+0x24>
   1b728:	sub	r3, r3, r1
   1b72c:	str	r3, [r2, #20]
   1b730:	bl	1a270 <time_struct_buffer@@Base+0x1b8>
   1b734:	mov	r0, #0
   1b738:	pop	{r4, pc}
   1b73c:	andeq	r1, r2, pc, asr #14
   1b740:	andeq	r1, r2, r5, lsr #20
   1b744:	andeq	r1, r2, fp, ror #23
   1b748:	andeq	r1, r2, r6, ror ip

0001b74c <flatcc_builder_start_vector@@Base>:
   1b74c:	cmp	r2, #4
   1b750:	push	{r4, r5, r6, r7, r8, lr}
   1b754:	mov	r7, r1
   1b758:	movcs	r1, r2
   1b75c:	movcc	r1, #4
   1b760:	mov	r5, r0
   1b764:	mov	r6, r3
   1b768:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1b76c:	subs	r4, r0, #0
   1b770:	mvnne	r4, #0
   1b774:	bne	1b79c <flatcc_builder_start_vector@@Base+0x50>
   1b778:	ldr	r2, [r5, #32]
   1b77c:	mov	r3, #4
   1b780:	mvn	r1, #3
   1b784:	mov	r0, r5
   1b788:	strh	r3, [r2, #14]
   1b78c:	str	r7, [r2, #16]
   1b790:	str	r4, [r2, #20]
   1b794:	str	r6, [r2, #24]
   1b798:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1b79c:	mov	r0, r4
   1b7a0:	pop	{r4, r5, r6, r7, r8, pc}

0001b7a4 <flatcc_builder_start_offset_vector@@Base>:
   1b7a4:	push	{r4, r5, r6, lr}
   1b7a8:	mov	r1, #4
   1b7ac:	mov	r5, r0
   1b7b0:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1b7b4:	subs	r4, r0, #0
   1b7b8:	mvnne	r4, #0
   1b7bc:	bne	1b7e4 <flatcc_builder_start_offset_vector@@Base+0x40>
   1b7c0:	ldr	r3, [r5, #32]
   1b7c4:	mov	r2, #4
   1b7c8:	mvn	r1, #3
   1b7cc:	mov	r0, r5
   1b7d0:	str	r2, [r3, #16]
   1b7d4:	mov	r2, #5
   1b7d8:	strh	r2, [r3, #14]
   1b7dc:	str	r4, [r3, #20]
   1b7e0:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1b7e4:	mov	r0, r4
   1b7e8:	pop	{r4, r5, r6, pc}

0001b7ec <flatcc_builder_start_string@@Base>:
   1b7ec:	push	{r4, r5, r6, lr}
   1b7f0:	mov	r1, #1
   1b7f4:	mov	r5, r0
   1b7f8:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1b7fc:	subs	r4, r0, #0
   1b800:	mvnne	r4, #0
   1b804:	bne	1b82c <flatcc_builder_start_string@@Base+0x40>
   1b808:	ldr	r3, [r5, #32]
   1b80c:	mov	r2, #1
   1b810:	mvn	r1, #3
   1b814:	mov	r0, r5
   1b818:	str	r2, [r3, #16]
   1b81c:	mov	r2, #6
   1b820:	strh	r2, [r3, #14]
   1b824:	str	r4, [r3, #20]
   1b828:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1b82c:	mov	r0, r4
   1b830:	pop	{r4, r5, r6, pc}

0001b834 <flatcc_builder_reserve_table@@Base>:
   1b834:	cmp	r1, #0
   1b838:	bge	1b854 <flatcc_builder_reserve_table@@Base+0x20>
   1b83c:	push	{r4, lr}
   1b840:	movw	r2, #1065	; 0x429
   1b844:	ldr	r3, [pc, #12]	; 1b858 <flatcc_builder_reserve_table@@Base+0x24>
   1b848:	ldr	r1, [pc, #12]	; 1b85c <flatcc_builder_reserve_table@@Base+0x28>
   1b84c:	ldr	r0, [pc, #12]	; 1b860 <flatcc_builder_reserve_table@@Base+0x2c>
   1b850:	bl	12a60 <__assert_fail@plt>
   1b854:	b	1a54c <flatcc_builder_default_alloc@@Base+0x240>
   1b858:	andeq	r1, r2, lr, ror #14
   1b85c:	andeq	r1, r2, r5, lsr #20
   1b860:	andeq	r1, r2, lr, lsr #25

0001b864 <flatcc_builder_start_table@@Base>:
   1b864:	push	{r4, r5, r6, lr}
   1b868:	mov	r5, r1
   1b86c:	mov	r1, #4
   1b870:	mov	r4, r0
   1b874:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1b878:	cmp	r0, #0
   1b87c:	beq	1b88c <flatcc_builder_start_table@@Base+0x28>
   1b880:	mvn	r5, #0
   1b884:	mov	r0, r5
   1b888:	pop	{r4, r5, r6, pc}
   1b88c:	ldr	r2, [r4, #4]
   1b890:	ldr	r3, [r4, #32]
   1b894:	ldr	r1, [r4, #52]	; 0x34
   1b898:	sub	r2, r2, r1
   1b89c:	ldr	r1, [r4, #76]	; 0x4c
   1b8a0:	str	r2, [r3, #16]
   1b8a4:	ldr	r2, [r4]
   1b8a8:	sub	r2, r2, r1
   1b8ac:	mov	r1, r5
   1b8b0:	str	r2, [r3, #20]
   1b8b4:	ldr	r2, [r4, #12]
   1b8b8:	str	r2, [r3, #24]
   1b8bc:	ldrh	r2, [r4, #8]
   1b8c0:	strh	r2, [r3, #28]
   1b8c4:	ldr	r2, [pc, #44]	; 1b8f8 <flatcc_builder_start_table@@Base+0x94>
   1b8c8:	strh	r0, [r4, #8]
   1b8cc:	mov	r0, r4
   1b8d0:	str	r2, [r4, #12]
   1b8d4:	mov	r2, #3
   1b8d8:	strh	r2, [r3, #14]
   1b8dc:	bl	1a54c <flatcc_builder_default_alloc@@Base+0x240>
   1b8e0:	subs	r5, r0, #0
   1b8e4:	bne	1b880 <flatcc_builder_start_table@@Base+0x1c>
   1b8e8:	movw	r1, #65532	; 0xfffc
   1b8ec:	mov	r0, r4
   1b8f0:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1b8f4:	b	1b884 <flatcc_builder_start_table@@Base+0x20>
   1b8f8:	svccs	0x00693b52

0001b8fc <flatcc_builder_create_vtable@@Base>:
   1b8fc:	mov	r3, #0
   1b900:	push	{lr}		; (str lr, [sp, #-4]!)
   1b904:	sub	sp, sp, #76	; 0x4c
   1b908:	cmp	r2, #0
   1b90c:	str	r3, [sp]
   1b910:	str	r3, [sp, #4]
   1b914:	movne	r3, #1
   1b918:	strne	r1, [sp, #8]
   1b91c:	mov	r1, sp
   1b920:	strdne	r2, [sp]
   1b924:	ldr	r3, [r0, #152]	; 0x98
   1b928:	strne	r2, [sp, #12]
   1b92c:	cmp	r3, #0
   1b930:	bne	1b94c <flatcc_builder_create_vtable@@Base+0x50>
   1b934:	ldr	r3, [r0, #180]	; 0xb4
   1b938:	cmp	r3, #0
   1b93c:	bne	1b94c <flatcc_builder_create_vtable@@Base+0x50>
   1b940:	bl	1a5d0 <flatcc_builder_default_alloc@@Base+0x2c4>
   1b944:	add	sp, sp, #76	; 0x4c
   1b948:	pop	{pc}		; (ldr pc, [sp], #4)
   1b94c:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1b950:	cmp	r0, #0
   1b954:	addne	r0, r0, #1
   1b958:	b	1b944 <flatcc_builder_create_vtable@@Base+0x48>

0001b95c <flatcc_builder_create_cached_vtable@@Base>:
   1b95c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b960:	mov	r6, r3
   1b964:	sub	sp, sp, #20
   1b968:	mov	r4, r0
   1b96c:	mov	sl, r1
   1b970:	mov	r7, r2
   1b974:	ldr	r3, [r0, #116]	; 0x74
   1b978:	cmp	r3, #0
   1b97c:	bne	1ba24 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1b980:	ldr	r5, [r0, #124]	; 0x7c
   1b984:	add	r9, r0, #92	; 0x5c
   1b988:	cmp	r5, #0
   1b98c:	beq	1b9a4 <flatcc_builder_create_cached_vtable@@Base+0x48>
   1b990:	ldr	r3, [pc, #560]	; 1bbc8 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1b994:	movw	r2, #342	; 0x156
   1b998:	ldr	r1, [pc, #556]	; 1bbcc <flatcc_builder_create_cached_vtable@@Base+0x270>
   1b99c:	ldr	r0, [pc, #556]	; 1bbd0 <flatcc_builder_create_cached_vtable@@Base+0x274>
   1b9a0:	bl	12a60 <__assert_fail@plt>
   1b9a4:	mov	r3, #16
   1b9a8:	mov	r2, r5
   1b9ac:	str	r5, [sp]
   1b9b0:	mov	r1, #6
   1b9b4:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1b9b8:	cmp	r0, #0
   1b9bc:	bne	1b9cc <flatcc_builder_create_cached_vtable@@Base+0x70>
   1b9c0:	mov	r0, #0
   1b9c4:	add	sp, sp, #20
   1b9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9cc:	mov	r3, #16
   1b9d0:	mov	r1, r9
   1b9d4:	ldr	r0, [r4, #40]	; 0x28
   1b9d8:	mov	r2, #256	; 0x100
   1b9dc:	str	r3, [r4, #124]	; 0x7c
   1b9e0:	mov	r3, #5
   1b9e4:	ldr	r8, [r4, #48]	; 0x30
   1b9e8:	str	r3, [sp]
   1b9ec:	mov	r3, #1
   1b9f0:	blx	r8
   1b9f4:	cmp	r0, #0
   1b9f8:	moveq	r3, #256	; 0x100
   1b9fc:	ldreq	r1, [r4, #96]	; 0x60
   1ba00:	bne	1b9c0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1ba04:	lsl	r2, r3, #1
   1ba08:	cmp	r2, r1
   1ba0c:	bls	1bae4 <flatcc_builder_create_cached_vtable@@Base+0x188>
   1ba10:	lsr	r3, r3, #2
   1ba14:	mov	r2, #1
   1ba18:	cmp	r3, r2, lsl r5
   1ba1c:	bhi	1baec <flatcc_builder_create_cached_vtable@@Base+0x190>
   1ba20:	str	r5, [r4, #116]	; 0x74
   1ba24:	ldr	r8, [r4, #92]	; 0x5c
   1ba28:	ldr	r3, [r4, #116]	; 0x74
   1ba2c:	rsb	r3, r3, #32
   1ba30:	lsr	r6, r6, r3
   1ba34:	adds	r3, r8, r6, lsl #2
   1ba38:	ldrne	r9, [r8, r6, lsl #2]
   1ba3c:	movne	fp, #0
   1ba40:	str	r3, [sp, #8]
   1ba44:	beq	1b9c0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1ba48:	cmp	r9, #0
   1ba4c:	bne	1baf4 <flatcc_builder_create_cached_vtable@@Base+0x198>
   1ba50:	mov	r3, #16
   1ba54:	mov	r1, #6
   1ba58:	ldr	r2, [r4, #124]	; 0x7c
   1ba5c:	mov	r0, r4
   1ba60:	str	r9, [sp]
   1ba64:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1ba68:	subs	r5, r0, #0
   1ba6c:	beq	1b9c0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1ba70:	ldr	r3, [r4, #124]	; 0x7c
   1ba74:	mov	r1, sl
   1ba78:	mov	r0, r4
   1ba7c:	add	r2, r3, #16
   1ba80:	str	r2, [r4, #124]	; 0x7c
   1ba84:	ldr	r2, [r4, #152]	; 0x98
   1ba88:	str	r2, [r5, #4]
   1ba8c:	ldr	r2, [r8, r6, lsl #2]
   1ba90:	str	r2, [r5, #12]
   1ba94:	mov	r2, r7
   1ba98:	str	r3, [r8, r6, lsl #2]
   1ba9c:	bl	1b8fc <flatcc_builder_create_vtable@@Base>
   1baa0:	cmp	r0, #0
   1baa4:	str	r0, [r5]
   1baa8:	beq	1b9c0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1baac:	cmp	fp, #0
   1bab0:	ldrne	r3, [fp, #8]
   1bab4:	strne	r3, [r5, #8]
   1bab8:	bne	1bb7c <flatcc_builder_create_cached_vtable@@Base+0x220>
   1babc:	ldr	r2, [r4, #120]	; 0x78
   1bac0:	ldr	r3, [r4, #172]	; 0xac
   1bac4:	cmp	r3, #0
   1bac8:	beq	1bb84 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1bacc:	add	r1, r7, r2
   1bad0:	cmp	r3, r1
   1bad4:	bcs	1bb84 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1bad8:	mov	r0, r4
   1badc:	bl	1a910 <flatcc_builder_flush_vtable_cache@@Base>
   1bae0:	b	1bb7c <flatcc_builder_create_cached_vtable@@Base+0x220>
   1bae4:	mov	r3, r2
   1bae8:	b	1ba04 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1baec:	add	r5, r5, #1
   1baf0:	b	1ba18 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   1baf4:	ldr	r0, [r4, #68]	; 0x44
   1baf8:	str	r3, [sp, #12]
   1bafc:	ldr	r5, [r4, #100]	; 0x64
   1bb00:	add	r5, r5, r9
   1bb04:	ldr	r2, [r5, #8]
   1bb08:	add	r1, r0, r2
   1bb0c:	ldrh	r2, [r0, r2]
   1bb10:	cmp	r2, r7
   1bb14:	bne	1bb30 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   1bb18:	mov	r2, r7
   1bb1c:	mov	r0, sl
   1bb20:	bl	12994 <memcmp@plt>
   1bb24:	cmp	r0, #0
   1bb28:	ldr	r3, [sp, #12]
   1bb2c:	beq	1bb3c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1bb30:	add	r3, r5, #12
   1bb34:	ldr	r9, [r5, #12]
   1bb38:	b	1ba48 <flatcc_builder_create_cached_vtable@@Base+0xec>
   1bb3c:	ldr	r1, [r5, #4]
   1bb40:	ldr	r2, [r4, #152]	; 0x98
   1bb44:	cmp	r1, r2
   1bb48:	beq	1bb5c <flatcc_builder_create_cached_vtable@@Base+0x200>
   1bb4c:	add	r3, r5, #12
   1bb50:	mov	fp, r5
   1bb54:	ldr	r9, [r5, #12]
   1bb58:	b	1ba48 <flatcc_builder_create_cached_vtable@@Base+0xec>
   1bb5c:	ldr	r2, [sp, #8]
   1bb60:	cmp	r3, r2
   1bb64:	beq	1bb7c <flatcc_builder_create_cached_vtable@@Base+0x220>
   1bb68:	ldr	r2, [r5, #12]
   1bb6c:	str	r2, [r3]
   1bb70:	ldr	r3, [r8, r6, lsl #2]
   1bb74:	str	r3, [r5, #12]
   1bb78:	str	r9, [r8, r6, lsl #2]
   1bb7c:	ldr	r0, [r5]
   1bb80:	b	1b9c4 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1bb84:	mov	r3, #0
   1bb88:	mov	r1, #2
   1bb8c:	mov	r0, r4
   1bb90:	str	r3, [sp]
   1bb94:	mov	r3, r7
   1bb98:	bl	1a404 <flatcc_builder_default_alloc@@Base+0xf8>
   1bb9c:	cmp	r0, #0
   1bba0:	mvneq	r0, #0
   1bba4:	beq	1b9c4 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1bba8:	ldr	r3, [r4, #120]	; 0x78
   1bbac:	mov	r2, r7
   1bbb0:	mov	r1, sl
   1bbb4:	str	r3, [r5, #8]
   1bbb8:	add	r3, r3, r7
   1bbbc:	str	r3, [r4, #120]	; 0x78
   1bbc0:	bl	12988 <memcpy@plt>
   1bbc4:	b	1bb7c <flatcc_builder_create_cached_vtable@@Base+0x220>
   1bbc8:	andeq	r1, r2, fp, lsl #15
   1bbcc:	andeq	r1, r2, r5, lsr #20
   1bbd0:	muleq	r2, r8, ip

0001bbd4 <flatcc_builder_create_table@@Base>:
   1bbd4:	push	{r4, r5, r6, r7, lr}
   1bbd8:	sub	sp, sp, #84	; 0x54
   1bbdc:	ldr	r4, [sp, #108]	; 0x6c
   1bbe0:	ldr	ip, [sp, #112]	; 0x70
   1bbe4:	cmp	r4, #0
   1bbe8:	bge	1bc00 <flatcc_builder_create_table@@Base+0x2c>
   1bbec:	ldr	r3, [pc, #276]	; 1bd08 <flatcc_builder_create_table@@Base+0x134>
   1bbf0:	movw	r2, #1237	; 0x4d5
   1bbf4:	ldr	r1, [pc, #272]	; 1bd0c <flatcc_builder_create_table@@Base+0x138>
   1bbf8:	ldr	r0, [pc, #272]	; 1bd10 <flatcc_builder_create_table@@Base+0x13c>
   1bbfc:	bl	12a60 <__assert_fail@plt>
   1bc00:	tst	ip, #1
   1bc04:	bne	1bc1c <flatcc_builder_create_table@@Base+0x48>
   1bc08:	ldr	r3, [pc, #248]	; 1bd08 <flatcc_builder_create_table@@Base+0x134>
   1bc0c:	movw	r2, #1243	; 0x4db
   1bc10:	ldr	r1, [pc, #244]	; 1bd0c <flatcc_builder_create_table@@Base+0x138>
   1bc14:	ldr	r0, [pc, #248]	; 1bd14 <flatcc_builder_create_table@@Base+0x140>
   1bc18:	b	1bbfc <flatcc_builder_create_table@@Base+0x28>
   1bc1c:	cmp	r3, #4
   1bc20:	sub	ip, ip, #1
   1bc24:	movcs	lr, r3
   1bc28:	ldrh	r3, [r0, #128]	; 0x80
   1bc2c:	movcc	lr, #4
   1bc30:	cmp	r3, lr
   1bc34:	ldr	r3, [r0, #136]	; 0x88
   1bc38:	strhcc	lr, [r0, #128]	; 0x80
   1bc3c:	sub	lr, lr, #1
   1bc40:	sub	r5, r3, r2
   1bc44:	sub	r3, r5, #4
   1bc48:	and	lr, lr, r5
   1bc4c:	sub	ip, r3, ip
   1bc50:	sub	r3, lr, r3
   1bc54:	sub	ip, ip, lr
   1bc58:	sub	r3, r3, #4
   1bc5c:	str	ip, [sp, #4]
   1bc60:	ldr	ip, [sp, #104]	; 0x68
   1bc64:	add	r4, ip, r4, lsl #1
   1bc68:	cmp	r4, ip
   1bc6c:	bne	1bcf0 <flatcc_builder_create_table@@Base+0x11c>
   1bc70:	mov	r3, #4
   1bc74:	cmp	r2, #0
   1bc78:	add	ip, sp, r3
   1bc7c:	str	r3, [sp, #8]
   1bc80:	str	ip, [sp, #16]
   1bc84:	str	r3, [sp, #20]
   1bc88:	mov	r3, #1
   1bc8c:	str	r3, [sp, #12]
   1bc90:	beq	1bcac <flatcc_builder_create_table@@Base+0xd8>
   1bc94:	add	r3, r2, #4
   1bc98:	str	r3, [sp, #8]
   1bc9c:	mov	r3, #2
   1bca0:	str	r1, [sp, #24]
   1bca4:	str	r3, [sp, #12]
   1bca8:	str	r2, [sp, #28]
   1bcac:	cmp	lr, #0
   1bcb0:	beq	1bce0 <flatcc_builder_create_table@@Base+0x10c>
   1bcb4:	ldr	r3, [sp, #8]
   1bcb8:	add	r2, sp, #80	; 0x50
   1bcbc:	ldr	r1, [pc, #84]	; 1bd18 <flatcc_builder_create_table@@Base+0x144>
   1bcc0:	add	r3, r3, lr
   1bcc4:	str	r3, [sp, #8]
   1bcc8:	ldr	r3, [sp, #12]
   1bccc:	add	r3, r3, #1
   1bcd0:	add	r2, r2, r3, lsl #3
   1bcd4:	str	r3, [sp, #12]
   1bcd8:	str	r1, [r2, #-72]	; 0xffffffb8
   1bcdc:	str	lr, [r2, #-68]	; 0xffffffbc
   1bce0:	add	r1, sp, #8
   1bce4:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1bce8:	add	sp, sp, #84	; 0x54
   1bcec:	pop	{r4, r5, r6, r7, pc}
   1bcf0:	ldrh	r5, [ip], #2
   1bcf4:	ldr	r6, [r1, r5]
   1bcf8:	sub	r7, r3, r5
   1bcfc:	add	r6, r6, r7
   1bd00:	str	r6, [r1, r5]
   1bd04:	b	1bc68 <flatcc_builder_create_table@@Base+0x94>
   1bd08:	muleq	r2, r4, r7
   1bd0c:	andeq	r1, r2, r5, lsr #20
   1bd10:	andeq	r1, r2, r7, lsr #25
   1bd14:			; <UNDEFINED> instruction: 0x00021cb9
   1bd18:	andeq	r1, r2, pc, lsr r3

0001bd1c <flatcc_builder_check_required_field@@Base>:
   1bd1c:	ldr	r3, [r0, #32]
   1bd20:	ldrh	r3, [r3, #14]
   1bd24:	cmp	r3, #3
   1bd28:	beq	1bd44 <flatcc_builder_check_required_field@@Base+0x28>
   1bd2c:	push	{r4, lr}
   1bd30:	movw	r2, #1272	; 0x4f8
   1bd34:	ldr	r3, [pc, #52]	; 1bd70 <flatcc_builder_check_required_field@@Base+0x54>
   1bd38:	ldr	r1, [pc, #52]	; 1bd74 <flatcc_builder_check_required_field@@Base+0x58>
   1bd3c:	ldr	r0, [pc, #52]	; 1bd78 <flatcc_builder_check_required_field@@Base+0x5c>
   1bd40:	bl	12a60 <__assert_fail@plt>
   1bd44:	ldrh	r3, [r0, #8]
   1bd48:	cmp	r3, r1
   1bd4c:	bls	1bd68 <flatcc_builder_check_required_field@@Base+0x4c>
   1bd50:	ldr	r3, [r0, #4]
   1bd54:	lsl	r1, r1, #1
   1bd58:	ldrh	r0, [r3, r1]
   1bd5c:	adds	r0, r0, #0
   1bd60:	movne	r0, #1
   1bd64:	bx	lr
   1bd68:	mov	r0, #0
   1bd6c:	bx	lr
   1bd70:			; <UNDEFINED> instruction: 0x000217b0
   1bd74:	andeq	r1, r2, r5, lsr #20
   1bd78:	andeq	r1, r2, r4, asr #25

0001bd7c <flatcc_builder_check_union_field@@Base>:
   1bd7c:	ldr	r3, [r0, #32]
   1bd80:	ldrh	r3, [r3, #14]
   1bd84:	cmp	r3, #3
   1bd88:	beq	1bda4 <flatcc_builder_check_union_field@@Base+0x28>
   1bd8c:	push	{r4, lr}
   1bd90:	movw	r2, #1279	; 0x4ff
   1bd94:	ldr	r3, [pc, #104]	; 1be04 <flatcc_builder_check_union_field@@Base+0x88>
   1bd98:	ldr	r1, [pc, #104]	; 1be08 <flatcc_builder_check_union_field@@Base+0x8c>
   1bd9c:	ldr	r0, [pc, #104]	; 1be0c <flatcc_builder_check_union_field@@Base+0x90>
   1bda0:	bl	12a60 <__assert_fail@plt>
   1bda4:	cmp	r1, #0
   1bda8:	beq	1bdfc <flatcc_builder_check_union_field@@Base+0x80>
   1bdac:	ldrh	r3, [r0, #8]
   1bdb0:	cmp	r3, r1
   1bdb4:	bls	1bdfc <flatcc_builder_check_union_field@@Base+0x80>
   1bdb8:	ldr	r3, [r0, #4]
   1bdbc:	sub	r1, r1, #-2147483647	; 0x80000001
   1bdc0:	lsl	r1, r1, #1
   1bdc4:	ldrh	r2, [r3, r1]!
   1bdc8:	cmp	r2, #0
   1bdcc:	ldrh	r1, [r3, #2]
   1bdd0:	bne	1bde0 <flatcc_builder_check_union_field@@Base+0x64>
   1bdd4:	clz	r0, r1
   1bdd8:	lsr	r0, r0, #5
   1bddc:	bx	lr
   1bde0:	ldr	r3, [r0, #16]
   1bde4:	ldrb	r3, [r3, r2]
   1bde8:	cmp	r3, #0
   1bdec:	beq	1bdd4 <flatcc_builder_check_union_field@@Base+0x58>
   1bdf0:	adds	r0, r1, #0
   1bdf4:	movne	r0, #1
   1bdf8:	bx	lr
   1bdfc:	mov	r0, #0
   1be00:	bx	lr
   1be04:	ldrdeq	r1, [r2], -r4
   1be08:	andeq	r1, r2, r5, lsr #20
   1be0c:	andeq	r1, r2, r4, asr #25

0001be10 <flatcc_builder_check_required@@Base>:
   1be10:	ldr	r3, [r0, #32]
   1be14:	push	{r4, lr}
   1be18:	ldrh	r3, [r3, #14]
   1be1c:	cmp	r3, #3
   1be20:	beq	1be38 <flatcc_builder_check_required@@Base+0x28>
   1be24:	ldr	r3, [pc, #84]	; 1be80 <flatcc_builder_check_required@@Base+0x70>
   1be28:	movw	r2, #1297	; 0x511
   1be2c:	ldr	r1, [pc, #80]	; 1be84 <flatcc_builder_check_required@@Base+0x74>
   1be30:	ldr	r0, [pc, #80]	; 1be88 <flatcc_builder_check_required@@Base+0x78>
   1be34:	bl	12a60 <__assert_fail@plt>
   1be38:	ldrh	r3, [r0, #8]
   1be3c:	cmp	r3, r2
   1be40:	subge	r1, r1, #2
   1be44:	movge	ip, #0
   1be48:	bge	1be70 <flatcc_builder_check_required@@Base+0x60>
   1be4c:	mov	r0, #0
   1be50:	pop	{r4, pc}
   1be54:	ldrh	r3, [r1, #2]!
   1be58:	ldr	lr, [r0, #4]
   1be5c:	lsl	r3, r3, #1
   1be60:	ldrh	r3, [lr, r3]
   1be64:	cmp	r3, #0
   1be68:	beq	1be4c <flatcc_builder_check_required@@Base+0x3c>
   1be6c:	add	ip, ip, #1
   1be70:	cmp	ip, r2
   1be74:	blt	1be54 <flatcc_builder_check_required@@Base+0x44>
   1be78:	mov	r0, #1
   1be7c:	pop	{r4, pc}
   1be80:	strdeq	r1, [r2], -r5
   1be84:	andeq	r1, r2, r5, lsr #20
   1be88:	andeq	r1, r2, r4, asr #25

0001be8c <flatcc_builder_end_table@@Base>:
   1be8c:	ldr	r3, [r0, #32]
   1be90:	push	{r4, r5, r6, r7, lr}
   1be94:	sub	sp, sp, #20
   1be98:	ldrh	r3, [r3, #14]
   1be9c:	cmp	r3, #3
   1bea0:	beq	1beb8 <flatcc_builder_end_table@@Base+0x2c>
   1bea4:	ldr	r3, [pc, #260]	; 1bfb0 <flatcc_builder_end_table@@Base+0x124>
   1bea8:	movw	r2, #1317	; 0x525
   1beac:	ldr	r1, [pc, #256]	; 1bfb4 <flatcc_builder_end_table@@Base+0x128>
   1beb0:	ldr	r0, [pc, #256]	; 1bfb8 <flatcc_builder_end_table@@Base+0x12c>
   1beb4:	bl	12a60 <__assert_fail@plt>
   1beb8:	ldrh	r5, [r0, #8]
   1bebc:	mov	r4, r0
   1bec0:	ldr	r1, [r0, #4]
   1bec4:	ldr	r3, [r0, #20]
   1bec8:	add	r5, r5, #2
   1becc:	lsl	r5, r5, #1
   1bed0:	sub	r6, r1, #4
   1bed4:	uxth	r5, r5
   1bed8:	add	r3, r3, #4
   1bedc:	uxth	r2, r3
   1bee0:	ldr	r3, [r0, #12]
   1bee4:	strh	r5, [r1, #-4]
   1bee8:	strh	r2, [r1, #-2]
   1beec:	ldr	r1, [pc, #200]	; 1bfbc <flatcc_builder_end_table@@Base+0x130>
   1bef0:	eor	r3, r3, r5
   1bef4:	mul	r3, r1, r3
   1bef8:	eor	r3, r3, r2
   1befc:	mov	r2, r5
   1bf00:	mul	r3, r1, r3
   1bf04:	mov	r1, r6
   1bf08:	str	r3, [r0, #12]
   1bf0c:	bl	1b95c <flatcc_builder_create_cached_vtable@@Base>
   1bf10:	subs	r7, r0, #0
   1bf14:	beq	1bfa4 <flatcc_builder_end_table@@Base+0x118>
   1bf18:	mov	r2, r5
   1bf1c:	mov	r1, #0
   1bf20:	mov	r0, r6
   1bf24:	bl	12a0c <memset@plt>
   1bf28:	ldr	r3, [r4, #32]
   1bf2c:	mov	r0, r4
   1bf30:	ldr	r2, [r4, #76]	; 0x4c
   1bf34:	ldr	r3, [r3, #20]
   1bf38:	str	r7, [sp, #8]
   1bf3c:	add	r2, r2, r3
   1bf40:	ldr	r3, [r4]
   1bf44:	sub	r3, r3, r2
   1bf48:	asr	r3, r3, #1
   1bf4c:	strd	r2, [sp]
   1bf50:	ldrh	r3, [r4, #130]	; 0x82
   1bf54:	ldr	r1, [r4, #16]
   1bf58:	ldr	r2, [r4, #20]
   1bf5c:	bl	1bbd4 <flatcc_builder_create_table@@Base>
   1bf60:	subs	r7, r0, #0
   1bf64:	beq	1bfa4 <flatcc_builder_end_table@@Base+0x118>
   1bf68:	ldr	r3, [r4, #32]
   1bf6c:	mov	r0, r4
   1bf70:	ldr	r1, [r3, #16]
   1bf74:	ldr	r2, [r3, #24]
   1bf78:	str	r2, [r4, #12]
   1bf7c:	ldrh	r2, [r3, #28]
   1bf80:	ldr	r3, [r3, #20]
   1bf84:	strh	r2, [r4, #8]
   1bf88:	ldr	r2, [r4, #52]	; 0x34
   1bf8c:	add	r2, r2, r1
   1bf90:	str	r2, [r4, #4]
   1bf94:	ldr	r2, [r4, #76]	; 0x4c
   1bf98:	add	r3, r2, r3
   1bf9c:	str	r3, [r4]
   1bfa0:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1bfa4:	mov	r0, r7
   1bfa8:	add	sp, sp, #20
   1bfac:	pop	{r4, r5, r6, r7, pc}
   1bfb0:	andeq	r1, r2, r3, lsl r8
   1bfb4:	andeq	r1, r2, r5, lsr #20
   1bfb8:	andeq	r1, r2, r4, asr #25
   1bfbc:			; <UNDEFINED> instruction: 0x9e3779b1

0001bfc0 <flatcc_builder_create_vector@@Base>:
   1bfc0:	push	{lr}		; (str lr, [sp, #-4]!)
   1bfc4:	sub	sp, sp, #84	; 0x54
   1bfc8:	ldr	lr, [sp, #92]	; 0x5c
   1bfcc:	ldrh	ip, [sp, #88]	; 0x58
   1bfd0:	cmp	r2, lr
   1bfd4:	bls	1bfec <flatcc_builder_create_vector@@Base+0x2c>
   1bfd8:	ldr	r3, [pc, #184]	; 1c098 <flatcc_builder_create_vector@@Base+0xd8>
   1bfdc:	movw	r2, #1365	; 0x555
   1bfe0:	ldr	r1, [pc, #180]	; 1c09c <flatcc_builder_create_vector@@Base+0xdc>
   1bfe4:	ldr	r0, [pc, #180]	; 1c0a0 <flatcc_builder_create_vector@@Base+0xe0>
   1bfe8:	bl	12a60 <__assert_fail@plt>
   1bfec:	ldrh	lr, [r0, #128]	; 0x80
   1bff0:	mul	r3, r3, r2
   1bff4:	cmp	ip, #4
   1bff8:	str	r2, [sp, #4]
   1bffc:	movcc	ip, #4
   1c000:	ldr	r2, [r0, #136]	; 0x88
   1c004:	cmp	lr, ip
   1c008:	sub	r2, r2, r3
   1c00c:	strhcc	ip, [r0, #128]	; 0x80
   1c010:	sub	ip, ip, #1
   1c014:	and	ip, ip, r2
   1c018:	mov	r2, #4
   1c01c:	add	lr, sp, r2
   1c020:	cmp	r3, #0
   1c024:	str	r2, [sp, #8]
   1c028:	str	lr, [sp, #16]
   1c02c:	str	r2, [sp, #20]
   1c030:	mov	r2, #1
   1c034:	str	r2, [sp, #12]
   1c038:	beq	1c054 <flatcc_builder_create_vector@@Base+0x94>
   1c03c:	add	r2, r3, #4
   1c040:	str	r3, [sp, #28]
   1c044:	mov	r3, #2
   1c048:	str	r2, [sp, #8]
   1c04c:	str	r3, [sp, #12]
   1c050:	str	r1, [sp, #24]
   1c054:	cmp	ip, #0
   1c058:	beq	1c088 <flatcc_builder_create_vector@@Base+0xc8>
   1c05c:	ldr	r3, [sp, #8]
   1c060:	add	r2, sp, #80	; 0x50
   1c064:	ldr	r1, [pc, #56]	; 1c0a4 <flatcc_builder_create_vector@@Base+0xe4>
   1c068:	add	r3, r3, ip
   1c06c:	str	r3, [sp, #8]
   1c070:	ldr	r3, [sp, #12]
   1c074:	add	r3, r3, #1
   1c078:	add	r2, r2, r3, lsl #3
   1c07c:	str	r3, [sp, #12]
   1c080:	str	r1, [r2, #-72]	; 0xffffffb8
   1c084:	str	ip, [r2, #-68]	; 0xffffffbc
   1c088:	add	r1, sp, #8
   1c08c:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1c090:	add	sp, sp, #84	; 0x54
   1c094:	pop	{pc}		; (ldr pc, [sp], #4)
   1c098:	andeq	r1, r2, ip, lsr #16
   1c09c:	andeq	r1, r2, r5, lsr #20
   1c0a0:	andeq	r1, r2, pc, ror #25
   1c0a4:	andeq	r1, r2, pc, lsr r3

0001c0a8 <flatcc_builder_end_vector@@Base>:
   1c0a8:	push	{r0, r1, r2, r4, r5, lr}
   1c0ac:	ldr	r2, [r0, #32]
   1c0b0:	ldrh	r3, [r2, #14]
   1c0b4:	cmp	r3, #4
   1c0b8:	beq	1c0d0 <flatcc_builder_end_vector@@Base+0x28>
   1c0bc:	ldr	r3, [pc, #76]	; 1c110 <flatcc_builder_end_vector@@Base+0x68>
   1c0c0:	movw	r2, #1400	; 0x578
   1c0c4:	ldr	r1, [pc, #72]	; 1c114 <flatcc_builder_end_vector@@Base+0x6c>
   1c0c8:	ldr	r0, [pc, #72]	; 1c118 <flatcc_builder_end_vector@@Base+0x70>
   1c0cc:	bl	12a60 <__assert_fail@plt>
   1c0d0:	ldr	r3, [r2, #24]
   1c0d4:	mov	r4, r0
   1c0d8:	str	r3, [sp, #4]
   1c0dc:	ldrh	r3, [r0, #130]	; 0x82
   1c0e0:	str	r3, [sp]
   1c0e4:	ldr	r3, [r2, #16]
   1c0e8:	ldr	r1, [r0, #16]
   1c0ec:	ldr	r2, [r2, #20]
   1c0f0:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   1c0f4:	subs	r5, r0, #0
   1c0f8:	beq	1c104 <flatcc_builder_end_vector@@Base+0x5c>
   1c0fc:	mov	r0, r4
   1c100:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1c104:	mov	r0, r5
   1c108:	add	sp, sp, #12
   1c10c:	pop	{r4, r5, pc}
   1c110:	andeq	r1, r2, r9, asr #16
   1c114:	andeq	r1, r2, r5, lsr #20
   1c118:	andeq	r1, r2, pc, asr #22

0001c11c <flatcc_builder_vector_count@@Base>:
   1c11c:	ldr	r3, [r0, #32]
   1c120:	ldr	r0, [r3, #20]
   1c124:	bx	lr

0001c128 <flatcc_builder_vector_edit@@Base>:
   1c128:	ldr	r0, [r0, #16]
   1c12c:	bx	lr

0001c130 <flatcc_builder_create_offset_vector_direct@@Base>:
   1c130:	cmn	r2, #-1073741823	; 0xc0000001
   1c134:	bhi	1c140 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   1c138:	mov	r3, #0
   1c13c:	b	1a7b8 <flatcc_builder_default_alloc@@Base+0x4ac>
   1c140:	mov	r0, #0
   1c144:	bx	lr

0001c148 <flatcc_builder_end_offset_vector@@Base>:
   1c148:	ldr	r3, [r0, #32]
   1c14c:	push	{r4, r5, r6, lr}
   1c150:	ldrh	r2, [r3, #14]
   1c154:	cmp	r2, #5
   1c158:	beq	1c170 <flatcc_builder_end_offset_vector@@Base+0x28>
   1c15c:	ldr	r3, [pc, #52]	; 1c198 <flatcc_builder_end_offset_vector@@Base+0x50>
   1c160:	movw	r2, #1480	; 0x5c8
   1c164:	ldr	r1, [pc, #48]	; 1c19c <flatcc_builder_end_offset_vector@@Base+0x54>
   1c168:	ldr	r0, [pc, #48]	; 1c1a0 <flatcc_builder_end_offset_vector@@Base+0x58>
   1c16c:	bl	12a60 <__assert_fail@plt>
   1c170:	ldr	r1, [r0, #16]
   1c174:	mov	r4, r0
   1c178:	ldr	r2, [r3, #20]
   1c17c:	bl	1c130 <flatcc_builder_create_offset_vector_direct@@Base>
   1c180:	subs	r5, r0, #0
   1c184:	beq	1c190 <flatcc_builder_end_offset_vector@@Base+0x48>
   1c188:	mov	r0, r4
   1c18c:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1c190:	mov	r0, r5
   1c194:	pop	{r4, r5, r6, pc}
   1c198:	andeq	r1, r2, r3, ror #16
   1c19c:	andeq	r1, r2, r5, lsr #20
   1c1a0:			; <UNDEFINED> instruction: 0x00021bb8

0001c1a4 <flatcc_builder_create_offset_vector@@Base>:
   1c1a4:	push	{r4, r5, r6, lr}
   1c1a8:	mov	r4, r0
   1c1ac:	mov	r6, r1
   1c1b0:	mov	r5, r2
   1c1b4:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   1c1b8:	cmp	r0, #0
   1c1bc:	bne	1c1ec <flatcc_builder_create_offset_vector@@Base+0x48>
   1c1c0:	mov	r1, r5
   1c1c4:	mov	r0, r4
   1c1c8:	bl	1b3b4 <flatcc_builder_extend_offset_vector@@Base>
   1c1cc:	cmp	r0, #0
   1c1d0:	beq	1c1ec <flatcc_builder_create_offset_vector@@Base+0x48>
   1c1d4:	lsl	r2, r5, #2
   1c1d8:	mov	r1, r6
   1c1dc:	bl	12988 <memcpy@plt>
   1c1e0:	mov	r0, r4
   1c1e4:	pop	{r4, r5, r6, lr}
   1c1e8:	b	1c148 <flatcc_builder_end_offset_vector@@Base>
   1c1ec:	mov	r0, #0
   1c1f0:	pop	{r4, r5, r6, pc}

0001c1f4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1c1f4:	ldr	r2, [r0, #32]
   1c1f8:	mov	r3, r1
   1c1fc:	push	{r4, r5, r6, lr}
   1c200:	ldrh	r1, [r2, #14]
   1c204:	cmp	r1, #5
   1c208:	beq	1c220 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   1c20c:	ldr	r3, [pc, #64]	; 1c254 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   1c210:	movw	r2, #1493	; 0x5d5
   1c214:	ldr	r1, [pc, #60]	; 1c258 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   1c218:	ldr	r0, [pc, #60]	; 1c25c <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   1c21c:	bl	12a60 <__assert_fail@plt>
   1c220:	ldr	r2, [r2, #20]
   1c224:	cmn	r2, #-1073741823	; 0xc0000001
   1c228:	movhi	r5, #0
   1c22c:	bhi	1c24c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1c230:	ldr	r1, [r0, #16]
   1c234:	mov	r4, r0
   1c238:	bl	1a7b8 <flatcc_builder_default_alloc@@Base+0x4ac>
   1c23c:	subs	r5, r0, #0
   1c240:	beq	1c24c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1c244:	mov	r0, r4
   1c248:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1c24c:	mov	r0, r5
   1c250:	pop	{r4, r5, r6, pc}
   1c254:	andeq	r1, r2, r4, lsl #17
   1c258:	andeq	r1, r2, r5, lsr #20
   1c25c:			; <UNDEFINED> instruction: 0x00021bb8

0001c260 <flatcc_builder_offset_vector_edit@@Base>:
   1c260:	ldr	r0, [r0, #16]
   1c264:	bx	lr

0001c268 <flatcc_builder_offset_vector_count@@Base>:
   1c268:	ldr	r3, [r0, #32]
   1c26c:	ldr	r0, [r3, #20]
   1c270:	bx	lr

0001c274 <flatcc_builder_create_union_vector_direct@@Base>:
   1c274:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1c278:	mov	r4, r0
   1c27c:	ldr	r5, [sp, #32]
   1c280:	cmn	r5, #-1073741823	; 0xc0000001
   1c284:	bls	1c2a0 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   1c288:	mov	r3, #0
   1c28c:	str	r3, [r4]
   1c290:	str	r3, [r4, #4]
   1c294:	mov	r0, r4
   1c298:	add	sp, sp, #8
   1c29c:	pop	{r4, r5, r6, r7, r8, pc}
   1c2a0:	mov	r7, r1
   1c2a4:	mov	r8, r2
   1c2a8:	mov	r1, r3
   1c2ac:	mov	r0, r7
   1c2b0:	mov	r3, r2
   1c2b4:	mov	r2, r5
   1c2b8:	bl	1a7b8 <flatcc_builder_default_alloc@@Base+0x4ac>
   1c2bc:	subs	r6, r0, #0
   1c2c0:	beq	1c288 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   1c2c4:	mvn	r3, #0
   1c2c8:	mov	r2, r5
   1c2cc:	mov	r1, r8
   1c2d0:	mov	r0, r7
   1c2d4:	str	r3, [sp, #4]
   1c2d8:	mov	r3, #1
   1c2dc:	str	r3, [sp]
   1c2e0:	bl	1bfc0 <flatcc_builder_create_vector@@Base>
   1c2e4:	stm	r4, {r0, r6}
   1c2e8:	b	1c294 <flatcc_builder_create_union_vector_direct@@Base+0x20>

0001c2ec <flatcc_builder_create_union_vector@@Base>:
   1c2ec:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c2f0:	mov	r6, r0
   1c2f4:	mov	r0, r1
   1c2f8:	mov	r5, r1
   1c2fc:	mov	r8, r2
   1c300:	mov	r7, r3
   1c304:	bl	1b7a4 <flatcc_builder_start_offset_vector@@Base>
   1c308:	subs	r4, r0, #0
   1c30c:	beq	1c328 <flatcc_builder_create_union_vector@@Base+0x3c>
   1c310:	mov	r3, #0
   1c314:	str	r3, [r6]
   1c318:	str	r3, [r6, #4]
   1c31c:	mov	r0, r6
   1c320:	add	sp, sp, #16
   1c324:	pop	{r4, r5, r6, r7, r8, pc}
   1c328:	mov	r1, r7
   1c32c:	mov	r0, r5
   1c330:	bl	1b3b4 <flatcc_builder_extend_offset_vector@@Base>
   1c334:	cmp	r0, #0
   1c338:	beq	1c310 <flatcc_builder_create_union_vector@@Base+0x24>
   1c33c:	mov	r1, r7
   1c340:	mov	r0, r5
   1c344:	bl	1a1c0 <time_struct_buffer@@Base+0x108>
   1c348:	subs	r2, r0, #0
   1c34c:	movne	r1, r4
   1c350:	addne	r0, r8, #4
   1c354:	ldrne	r3, [r5, #16]
   1c358:	beq	1c310 <flatcc_builder_create_union_vector@@Base+0x24>
   1c35c:	cmp	r1, r7
   1c360:	bne	1c390 <flatcc_builder_create_union_vector@@Base+0xa4>
   1c364:	add	r0, sp, #8
   1c368:	str	r1, [sp]
   1c36c:	mov	r1, r5
   1c370:	bl	1c274 <flatcc_builder_create_union_vector_direct@@Base>
   1c374:	ldr	r7, [sp, #8]
   1c378:	mov	r0, r5
   1c37c:	ldr	r4, [sp, #12]
   1c380:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1c384:	str	r7, [r6]
   1c388:	str	r4, [r6, #4]
   1c38c:	b	1c31c <flatcc_builder_create_union_vector@@Base+0x30>
   1c390:	ldrb	ip, [r8, r1, lsl #3]
   1c394:	strb	ip, [r2, r1]
   1c398:	ldr	ip, [r0, r1, lsl #3]
   1c39c:	str	ip, [r3, r1, lsl #2]
   1c3a0:	add	r1, r1, #1
   1c3a4:	b	1c35c <flatcc_builder_create_union_vector@@Base+0x70>

0001c3a8 <flatcc_builder_start_union_vector@@Base>:
   1c3a8:	push	{r4, r5, r6, lr}
   1c3ac:	mov	r1, #4
   1c3b0:	mov	r5, r0
   1c3b4:	bl	1a474 <flatcc_builder_default_alloc@@Base+0x168>
   1c3b8:	subs	r4, r0, #0
   1c3bc:	mvnne	r4, #0
   1c3c0:	bne	1c3e8 <flatcc_builder_start_union_vector@@Base+0x40>
   1c3c4:	ldr	r3, [r5, #32]
   1c3c8:	mov	r2, #8
   1c3cc:	mvn	r1, #3
   1c3d0:	mov	r0, r5
   1c3d4:	str	r2, [r3, #16]
   1c3d8:	mov	r2, #7
   1c3dc:	strh	r2, [r3, #14]
   1c3e0:	str	r4, [r3, #20]
   1c3e4:	bl	1a144 <time_struct_buffer@@Base+0x8c>
   1c3e8:	mov	r0, r4
   1c3ec:	pop	{r4, r5, r6, pc}

0001c3f0 <flatcc_builder_end_union_vector@@Base>:
   1c3f0:	ldr	r3, [r1, #32]
   1c3f4:	push	{r4, r5, r6, r7, lr}
   1c3f8:	sub	sp, sp, #20
   1c3fc:	ldrh	r2, [r3, #14]
   1c400:	cmp	r2, #7
   1c404:	beq	1c41c <flatcc_builder_end_union_vector@@Base+0x2c>
   1c408:	ldr	r3, [pc, #156]	; 1c4ac <flatcc_builder_end_union_vector@@Base+0xbc>
   1c40c:	movw	r2, #1617	; 0x651
   1c410:	ldr	r1, [pc, #152]	; 1c4b0 <flatcc_builder_end_union_vector@@Base+0xc0>
   1c414:	ldr	r0, [pc, #152]	; 1c4b4 <flatcc_builder_end_union_vector@@Base+0xc4>
   1c418:	bl	12a60 <__assert_fail@plt>
   1c41c:	ldr	r7, [r3, #20]
   1c420:	mov	r4, r0
   1c424:	mov	r5, r1
   1c428:	mov	r0, r1
   1c42c:	lsl	r6, r7, #2
   1c430:	add	r1, r6, r7
   1c434:	bl	1a1c0 <time_struct_buffer@@Base+0x108>
   1c438:	subs	r3, r0, #0
   1c43c:	streq	r3, [r4]
   1c440:	streq	r3, [r4, #4]
   1c444:	beq	1c488 <flatcc_builder_end_union_vector@@Base+0x98>
   1c448:	ldr	r0, [r5, #16]
   1c44c:	add	r2, r3, r6
   1c450:	mov	r1, #0
   1c454:	add	ip, r0, #4
   1c458:	cmp	r1, r7
   1c45c:	bne	1c494 <flatcc_builder_end_union_vector@@Base+0xa4>
   1c460:	add	r0, sp, #8
   1c464:	str	r1, [sp]
   1c468:	mov	r1, r5
   1c46c:	bl	1c274 <flatcc_builder_create_union_vector_direct@@Base>
   1c470:	ldr	r7, [sp, #8]
   1c474:	mov	r0, r5
   1c478:	ldr	r6, [sp, #12]
   1c47c:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1c480:	str	r7, [r4]
   1c484:	str	r6, [r4, #4]
   1c488:	mov	r0, r4
   1c48c:	add	sp, sp, #20
   1c490:	pop	{r4, r5, r6, r7, pc}
   1c494:	ldrb	lr, [r0, r1, lsl #3]
   1c498:	strb	lr, [r2, r1]
   1c49c:	ldr	lr, [ip, r1, lsl #3]
   1c4a0:	str	lr, [r3, r1, lsl #2]
   1c4a4:	add	r1, r1, #1
   1c4a8:	b	1c458 <flatcc_builder_end_union_vector@@Base+0x68>
   1c4ac:			; <UNDEFINED> instruction: 0x000218b0
   1c4b0:	andeq	r1, r2, r5, lsr #20
   1c4b4:	andeq	r1, r2, r2, lsl #26

0001c4b8 <flatcc_builder_union_vector_edit@@Base>:
   1c4b8:	ldr	r0, [r0, #16]
   1c4bc:	bx	lr

0001c4c0 <flatcc_builder_union_vector_count@@Base>:
   1c4c0:	ldr	r3, [r0, #32]
   1c4c4:	ldr	r0, [r3, #20]
   1c4c8:	bx	lr

0001c4cc <flatcc_builder_extend_union_vector@@Base>:
   1c4cc:	push	{r4, r5, r6, lr}
   1c4d0:	mvn	r2, #-536870912	; 0xe0000000
   1c4d4:	mov	r4, r0
   1c4d8:	mov	r5, r1
   1c4dc:	ldr	r0, [r0, #32]
   1c4e0:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1c4e4:	cmp	r0, #0
   1c4e8:	bne	1c4fc <flatcc_builder_extend_union_vector@@Base+0x30>
   1c4ec:	lsl	r1, r5, #3
   1c4f0:	mov	r0, r4
   1c4f4:	pop	{r4, r5, r6, lr}
   1c4f8:	b	1a1c0 <time_struct_buffer@@Base+0x108>
   1c4fc:	mov	r0, #0
   1c500:	pop	{r4, r5, r6, pc}

0001c504 <flatcc_builder_truncate_union_vector@@Base>:
   1c504:	ldr	r3, [r0, #32]
   1c508:	push	{r4, lr}
   1c50c:	ldrh	r2, [r3, #14]
   1c510:	cmp	r2, #7
   1c514:	beq	1c52c <flatcc_builder_truncate_union_vector@@Base+0x28>
   1c518:	ldr	r3, [pc, #72]	; 1c568 <flatcc_builder_truncate_union_vector@@Base+0x64>
   1c51c:	movw	r2, #1665	; 0x681
   1c520:	ldr	r1, [pc, #68]	; 1c56c <flatcc_builder_truncate_union_vector@@Base+0x68>
   1c524:	ldr	r0, [pc, #68]	; 1c570 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   1c528:	bl	12a60 <__assert_fail@plt>
   1c52c:	ldr	r2, [r3, #20]
   1c530:	cmp	r2, r1
   1c534:	bcs	1c54c <flatcc_builder_truncate_union_vector@@Base+0x48>
   1c538:	ldr	r3, [pc, #40]	; 1c568 <flatcc_builder_truncate_union_vector@@Base+0x64>
   1c53c:	movw	r2, #1666	; 0x682
   1c540:	ldr	r1, [pc, #36]	; 1c56c <flatcc_builder_truncate_union_vector@@Base+0x68>
   1c544:	ldr	r0, [pc, #40]	; 1c574 <flatcc_builder_truncate_union_vector@@Base+0x70>
   1c548:	b	1c528 <flatcc_builder_truncate_union_vector@@Base+0x24>
   1c54c:	sub	r2, r2, r1
   1c550:	str	r2, [r3, #20]
   1c554:	ldr	r3, [r3, #16]
   1c558:	mul	r1, r3, r1
   1c55c:	bl	1a270 <time_struct_buffer@@Base+0x1b8>
   1c560:	mov	r0, #0
   1c564:	pop	{r4, pc}
   1c568:	ldrdeq	r1, [r2], -r0
   1c56c:	andeq	r1, r2, r5, lsr #20
   1c570:	andeq	r1, r2, r2, lsl #26
   1c574:	andeq	r1, r2, fp, lsr ip

0001c578 <flatcc_builder_union_vector_push@@Base>:
   1c578:	push	{r0, r1, r4, lr}
   1c57c:	mov	r4, sp
   1c580:	stm	r4, {r1, r2}
   1c584:	ldr	r2, [r0, #32]
   1c588:	ldrh	r3, [r2, #14]
   1c58c:	cmp	r3, #7
   1c590:	beq	1c5a8 <flatcc_builder_union_vector_push@@Base+0x30>
   1c594:	ldr	r3, [pc, #68]	; 1c5e0 <flatcc_builder_union_vector_push@@Base+0x68>
   1c598:	movw	r2, #1677	; 0x68d
   1c59c:	ldr	r1, [pc, #64]	; 1c5e4 <flatcc_builder_union_vector_push@@Base+0x6c>
   1c5a0:	ldr	r0, [pc, #64]	; 1c5e8 <flatcc_builder_union_vector_push@@Base+0x70>
   1c5a4:	bl	12a60 <__assert_fail@plt>
   1c5a8:	ldr	r3, [r2, #20]
   1c5ac:	cmn	r3, #-536870911	; 0xe0000001
   1c5b0:	moveq	r3, #0
   1c5b4:	beq	1c5d4 <flatcc_builder_union_vector_push@@Base+0x5c>
   1c5b8:	add	r3, r3, #1
   1c5bc:	mov	r1, #8
   1c5c0:	str	r3, [r2, #20]
   1c5c4:	bl	1a1c0 <time_struct_buffer@@Base+0x108>
   1c5c8:	subs	r3, r0, #0
   1c5cc:	ldmne	r4, {r0, r1}
   1c5d0:	stmne	r3, {r0, r1}
   1c5d4:	mov	r0, r3
   1c5d8:	add	sp, sp, #8
   1c5dc:	pop	{r4, pc}
   1c5e0:	strdeq	r1, [r2], -r5
   1c5e4:	andeq	r1, r2, r5, lsr #20
   1c5e8:	andeq	r1, r2, r2, lsl #26

0001c5ec <flatcc_builder_append_union_vector@@Base>:
   1c5ec:	push	{r4, r5, r6, lr}
   1c5f0:	mov	r4, r0
   1c5f4:	ldr	r0, [r0, #32]
   1c5f8:	ldrh	r3, [r0, #14]
   1c5fc:	cmp	r3, #7
   1c600:	beq	1c618 <flatcc_builder_append_union_vector@@Base+0x2c>
   1c604:	ldr	r3, [pc, #68]	; 1c650 <flatcc_builder_append_union_vector@@Base+0x64>
   1c608:	movw	r2, #1692	; 0x69c
   1c60c:	ldr	r1, [pc, #64]	; 1c654 <flatcc_builder_append_union_vector@@Base+0x68>
   1c610:	ldr	r0, [pc, #64]	; 1c658 <flatcc_builder_append_union_vector@@Base+0x6c>
   1c614:	bl	12a60 <__assert_fail@plt>
   1c618:	mov	r5, r2
   1c61c:	mov	r6, r1
   1c620:	mvn	r2, #-536870912	; 0xe0000000
   1c624:	mov	r1, r5
   1c628:	bl	1a764 <flatcc_builder_default_alloc@@Base+0x458>
   1c62c:	cmp	r0, #0
   1c630:	bne	1c648 <flatcc_builder_append_union_vector@@Base+0x5c>
   1c634:	lsl	r2, r5, #3
   1c638:	mov	r1, r6
   1c63c:	mov	r0, r4
   1c640:	pop	{r4, r5, r6, lr}
   1c644:	b	1a290 <time_struct_buffer@@Base+0x1d8>
   1c648:	mov	r0, #0
   1c64c:	pop	{r4, r5, r6, pc}
   1c650:	andeq	r1, r2, r6, lsl r9
   1c654:	andeq	r1, r2, r5, lsr #20
   1c658:	andeq	r1, r2, r2, lsl #26

0001c65c <flatcc_builder_create_string@@Base>:
   1c65c:	ldr	r3, [r0, #136]	; 0x88
   1c660:	mov	ip, #4
   1c664:	cmp	r2, #0
   1c668:	push	{lr}		; (str lr, [sp, #-4]!)
   1c66c:	sub	sp, sp, #84	; 0x54
   1c670:	add	lr, sp, ip
   1c674:	stmib	sp, {r2, ip}
   1c678:	sub	r3, r3, r2
   1c67c:	str	lr, [sp, #16]
   1c680:	sub	r3, r3, #1
   1c684:	str	ip, [sp, #20]
   1c688:	mov	ip, #1
   1c68c:	and	r3, r3, #3
   1c690:	add	r3, r3, #1
   1c694:	str	ip, [sp, #12]
   1c698:	beq	1c6b4 <flatcc_builder_create_string@@Base+0x58>
   1c69c:	add	ip, r2, #4
   1c6a0:	str	r2, [sp, #28]
   1c6a4:	mov	r2, #2
   1c6a8:	str	ip, [sp, #8]
   1c6ac:	str	r2, [sp, #12]
   1c6b0:	str	r1, [sp, #24]
   1c6b4:	ldr	r2, [sp, #8]
   1c6b8:	add	r1, sp, #80	; 0x50
   1c6bc:	ldr	ip, [pc, #44]	; 1c6f0 <flatcc_builder_create_string@@Base+0x94>
   1c6c0:	add	r2, r2, r3
   1c6c4:	str	r2, [sp, #8]
   1c6c8:	ldr	r2, [sp, #12]
   1c6cc:	add	r2, r2, #1
   1c6d0:	add	r1, r1, r2, lsl #3
   1c6d4:	str	r2, [sp, #12]
   1c6d8:	str	ip, [r1, #-72]	; 0xffffffb8
   1c6dc:	str	r3, [r1, #-68]	; 0xffffffbc
   1c6e0:	add	r1, sp, #8
   1c6e4:	bl	1a6ec <flatcc_builder_default_alloc@@Base+0x3e0>
   1c6e8:	add	sp, sp, #84	; 0x54
   1c6ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6f0:	andeq	r1, r2, pc, lsr r3

0001c6f4 <flatcc_builder_create_string_str@@Base>:
   1c6f4:	push	{r4, r5, r6, lr}
   1c6f8:	mov	r5, r0
   1c6fc:	mov	r0, r1
   1c700:	mov	r4, r1
   1c704:	bl	129e8 <strlen@plt>
   1c708:	mov	r2, r0
   1c70c:	mov	r1, r4
   1c710:	mov	r0, r5
   1c714:	pop	{r4, r5, r6, lr}
   1c718:	b	1c65c <flatcc_builder_create_string@@Base>

0001c71c <flatcc_builder_create_string_strn@@Base>:
   1c71c:	push	{r4, r5, r6, lr}
   1c720:	mov	r4, r1
   1c724:	mov	r6, r0
   1c728:	mov	r1, #0
   1c72c:	mov	r0, r4
   1c730:	mov	r5, r2
   1c734:	bl	12a24 <memchr@plt>
   1c738:	cmp	r0, #0
   1c73c:	mov	r1, r4
   1c740:	subne	r5, r0, r4
   1c744:	mov	r0, r6
   1c748:	mov	r2, r5
   1c74c:	pop	{r4, r5, r6, lr}
   1c750:	b	1c65c <flatcc_builder_create_string@@Base>

0001c754 <flatcc_builder_end_string@@Base>:
   1c754:	ldr	r3, [r0, #32]
   1c758:	push	{r4, r5, r6, lr}
   1c75c:	ldrh	r2, [r3, #14]
   1c760:	cmp	r2, #6
   1c764:	beq	1c77c <flatcc_builder_end_string@@Base+0x28>
   1c768:	ldr	r3, [pc, #84]	; 1c7c4 <flatcc_builder_end_string@@Base+0x70>
   1c76c:	movw	r2, #1732	; 0x6c4
   1c770:	ldr	r1, [pc, #80]	; 1c7c8 <flatcc_builder_end_string@@Base+0x74>
   1c774:	ldr	r0, [pc, #80]	; 1c7cc <flatcc_builder_end_string@@Base+0x78>
   1c778:	bl	12a60 <__assert_fail@plt>
   1c77c:	ldr	r2, [r3, #20]
   1c780:	mov	r4, r0
   1c784:	ldr	r1, [r0, #20]
   1c788:	cmp	r2, r1
   1c78c:	beq	1c7a4 <flatcc_builder_end_string@@Base+0x50>
   1c790:	ldr	r3, [pc, #44]	; 1c7c4 <flatcc_builder_end_string@@Base+0x70>
   1c794:	movw	r2, #1733	; 0x6c5
   1c798:	ldr	r1, [pc, #40]	; 1c7c8 <flatcc_builder_end_string@@Base+0x74>
   1c79c:	ldr	r0, [pc, #44]	; 1c7d0 <flatcc_builder_end_string@@Base+0x7c>
   1c7a0:	b	1c778 <flatcc_builder_end_string@@Base+0x24>
   1c7a4:	ldr	r1, [r0, #16]
   1c7a8:	bl	1c65c <flatcc_builder_create_string@@Base>
   1c7ac:	subs	r5, r0, #0
   1c7b0:	beq	1c7bc <flatcc_builder_end_string@@Base+0x68>
   1c7b4:	mov	r0, r4
   1c7b8:	bl	1a208 <time_struct_buffer@@Base+0x150>
   1c7bc:	mov	r0, r5
   1c7c0:	pop	{r4, r5, r6, pc}
   1c7c4:	andeq	r1, r2, r9, lsr r9
   1c7c8:	andeq	r1, r2, r5, lsr #20
   1c7cc:	andeq	r1, r2, fp, ror #23
   1c7d0:	andeq	r1, r2, r4, lsr sp

0001c7d4 <flatcc_builder_string_edit@@Base>:
   1c7d4:	ldr	r0, [r0, #16]
   1c7d8:	bx	lr

0001c7dc <flatcc_builder_string_len@@Base>:
   1c7dc:	ldr	r3, [r0, #32]
   1c7e0:	ldr	r0, [r3, #20]
   1c7e4:	bx	lr

0001c7e8 <flatcc_builder_table_add@@Base>:
   1c7e8:	push	{r4, r5, r6, r7, r8, lr}
   1c7ec:	mov	r4, r0
   1c7f0:	ldr	r0, [r0, #32]
   1c7f4:	ldrh	r0, [r0, #14]
   1c7f8:	cmp	r0, #3
   1c7fc:	beq	1c814 <flatcc_builder_table_add@@Base+0x2c>
   1c800:	ldr	r3, [pc, #240]	; 1c8f8 <flatcc_builder_table_add@@Base+0x110>
   1c804:	movw	r2, #1773	; 0x6ed
   1c808:	ldr	r1, [pc, #236]	; 1c8fc <flatcc_builder_table_add@@Base+0x114>
   1c80c:	ldr	r0, [pc, #236]	; 1c900 <flatcc_builder_table_add@@Base+0x118>
   1c810:	bl	12a60 <__assert_fail@plt>
   1c814:	movw	r0, #32764	; 0x7ffc
   1c818:	cmp	r1, r0
   1c81c:	bls	1c834 <flatcc_builder_table_add@@Base+0x4c>
   1c820:	ldr	r3, [pc, #208]	; 1c8f8 <flatcc_builder_table_add@@Base+0x110>
   1c824:	movw	r2, #1774	; 0x6ee
   1c828:	ldr	r1, [pc, #204]	; 1c8fc <flatcc_builder_table_add@@Base+0x114>
   1c82c:	ldr	r0, [pc, #208]	; 1c904 <flatcc_builder_table_add@@Base+0x11c>
   1c830:	b	1c810 <flatcc_builder_table_add@@Base+0x28>
   1c834:	ldrh	r0, [r4, #130]	; 0x82
   1c838:	lsl	r7, r1, #1
   1c83c:	cmp	r0, r3
   1c840:	ldr	r0, [r4, #4]
   1c844:	strhcc	r3, [r4, #130]	; 0x82
   1c848:	ldrh	r5, [r0, r7]
   1c84c:	cmp	r5, #0
   1c850:	beq	1c868 <flatcc_builder_table_add@@Base+0x80>
   1c854:	ldr	r3, [pc, #156]	; 1c8f8 <flatcc_builder_table_add@@Base+0x110>
   1c858:	movw	r2, #1784	; 0x6f8
   1c85c:	ldr	r1, [pc, #152]	; 1c8fc <flatcc_builder_table_add@@Base+0x114>
   1c860:	ldr	r0, [pc, #160]	; 1c908 <flatcc_builder_table_add@@Base+0x120>
   1c864:	b	1c810 <flatcc_builder_table_add@@Base+0x28>
   1c868:	ldr	ip, [r4, #12]
   1c86c:	sub	r0, r3, #1
   1c870:	rsb	r3, r3, #0
   1c874:	uxth	r8, r1
   1c878:	ldr	lr, [pc, #140]	; 1c90c <flatcc_builder_table_add@@Base+0x124>
   1c87c:	ldr	r6, [r4, #20]
   1c880:	eor	ip, ip, r1
   1c884:	mul	ip, lr, ip
   1c888:	add	r0, r0, r6
   1c88c:	and	r6, r0, r3
   1c890:	ldr	r3, [r4, #24]
   1c894:	eor	ip, ip, r2
   1c898:	add	r1, r2, r6
   1c89c:	mul	ip, lr, ip
   1c8a0:	cmp	r1, r3
   1c8a4:	str	ip, [r4, #12]
   1c8a8:	str	r1, [r4, #20]
   1c8ac:	bcs	1c8d8 <flatcc_builder_table_add@@Base+0xf0>
   1c8b0:	ldr	r3, [r4, #4]
   1c8b4:	add	r2, r6, #4
   1c8b8:	ldr	r0, [r4, #16]
   1c8bc:	strh	r2, [r3, r7]
   1c8c0:	ldrh	r3, [r4, #8]
   1c8c4:	add	r0, r0, r6
   1c8c8:	cmp	r3, r8
   1c8cc:	addls	r1, r8, #1
   1c8d0:	strhls	r1, [r4, #8]
   1c8d4:	pop	{r4, r5, r6, r7, r8, pc}
   1c8d8:	movw	r2, #65532	; 0xfffc
   1c8dc:	add	r1, r1, #1
   1c8e0:	mov	r0, r4
   1c8e4:	bl	1a170 <time_struct_buffer@@Base+0xb8>
   1c8e8:	cmp	r0, #0
   1c8ec:	beq	1c8b0 <flatcc_builder_table_add@@Base+0xc8>
   1c8f0:	mov	r0, r5
   1c8f4:	pop	{r4, r5, r6, r7, r8, pc}
   1c8f8:	andeq	r1, r2, r3, asr r9
   1c8fc:	andeq	r1, r2, r5, lsr #20
   1c900:	andeq	r1, r2, r4, asr #25
   1c904:	andeq	r1, r2, r8, asr sp
   1c908:	muleq	r2, r2, sl
   1c90c:			; <UNDEFINED> instruction: 0x9e3779b1

0001c910 <flatcc_builder_table_edit@@Base>:
   1c910:	ldr	r3, [r0, #32]
   1c914:	ldrh	r3, [r3, #14]
   1c918:	cmp	r3, #3
   1c91c:	beq	1c938 <flatcc_builder_table_edit@@Base+0x28>
   1c920:	push	{r4, lr}
   1c924:	movw	r2, #1794	; 0x702
   1c928:	ldr	r3, [pc, #28]	; 1c94c <flatcc_builder_table_edit@@Base+0x3c>
   1c92c:	ldr	r1, [pc, #28]	; 1c950 <flatcc_builder_table_edit@@Base+0x40>
   1c930:	ldr	r0, [pc, #28]	; 1c954 <flatcc_builder_table_edit@@Base+0x44>
   1c934:	bl	12a60 <__assert_fail@plt>
   1c938:	ldr	r3, [r0, #20]
   1c93c:	ldr	r0, [r0, #16]
   1c940:	sub	r3, r3, r1
   1c944:	add	r0, r0, r3
   1c948:	bx	lr
   1c94c:	andeq	r1, r2, ip, ror #18
   1c950:	andeq	r1, r2, r5, lsr #20
   1c954:	andeq	r1, r2, r4, asr #25

0001c958 <flatcc_builder_table_add_copy@@Base>:
   1c958:	push	{r4, r5, r6, lr}
   1c95c:	mov	r4, r3
   1c960:	mov	r6, r2
   1c964:	mov	r2, r4
   1c968:	ldrh	r3, [sp, #16]
   1c96c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1c970:	subs	r5, r0, #0
   1c974:	beq	1c984 <flatcc_builder_table_add_copy@@Base+0x2c>
   1c978:	mov	r2, r4
   1c97c:	mov	r1, r6
   1c980:	bl	12988 <memcpy@plt>
   1c984:	mov	r0, r5
   1c988:	pop	{r4, r5, r6, pc}

0001c98c <flatcc_builder_table_add_offset@@Base>:
   1c98c:	ldr	r3, [r0, #32]
   1c990:	push	{r4, r5, r6, r7, r8, lr}
   1c994:	ldrh	r3, [r3, #14]
   1c998:	cmp	r3, #3
   1c99c:	beq	1c9b4 <flatcc_builder_table_add_offset@@Base+0x28>
   1c9a0:	ldr	r3, [pc, #236]	; 1ca94 <flatcc_builder_table_add_offset@@Base+0x108>
   1c9a4:	movw	r2, #1811	; 0x713
   1c9a8:	ldr	r1, [pc, #232]	; 1ca98 <flatcc_builder_table_add_offset@@Base+0x10c>
   1c9ac:	ldr	r0, [pc, #232]	; 1ca9c <flatcc_builder_table_add_offset@@Base+0x110>
   1c9b0:	bl	12a60 <__assert_fail@plt>
   1c9b4:	movw	r3, #32764	; 0x7ffc
   1c9b8:	cmp	r1, r3
   1c9bc:	bls	1c9d4 <flatcc_builder_table_add_offset@@Base+0x48>
   1c9c0:	ldr	r3, [pc, #204]	; 1ca94 <flatcc_builder_table_add_offset@@Base+0x108>
   1c9c4:	movw	r2, #1812	; 0x714
   1c9c8:	ldr	r1, [pc, #200]	; 1ca98 <flatcc_builder_table_add_offset@@Base+0x10c>
   1c9cc:	ldr	r0, [pc, #204]	; 1caa0 <flatcc_builder_table_add_offset@@Base+0x114>
   1c9d0:	b	1c9b0 <flatcc_builder_table_add_offset@@Base+0x24>
   1c9d4:	ldr	r3, [r0, #4]
   1c9d8:	lsl	r7, r1, #1
   1c9dc:	mov	r4, r0
   1c9e0:	ldrh	r6, [r3, r7]
   1c9e4:	cmp	r6, #0
   1c9e8:	beq	1ca00 <flatcc_builder_table_add_offset@@Base+0x74>
   1c9ec:	ldr	r3, [pc, #160]	; 1ca94 <flatcc_builder_table_add_offset@@Base+0x108>
   1c9f0:	movw	r2, #1819	; 0x71b
   1c9f4:	ldr	r1, [pc, #156]	; 1ca98 <flatcc_builder_table_add_offset@@Base+0x10c>
   1c9f8:	ldr	r0, [pc, #164]	; 1caa4 <flatcc_builder_table_add_offset@@Base+0x118>
   1c9fc:	b	1c9b0 <flatcc_builder_table_add_offset@@Base+0x24>
   1ca00:	ldr	r3, [r0, #12]
   1ca04:	uxth	r5, r1
   1ca08:	ldr	r2, [pc, #152]	; 1caa8 <flatcc_builder_table_add_offset@@Base+0x11c>
   1ca0c:	ldr	r8, [r0, #20]
   1ca10:	eor	r3, r3, r1
   1ca14:	mul	r3, r2, r3
   1ca18:	add	r8, r8, #3
   1ca1c:	eor	r3, r3, #4
   1ca20:	bic	r8, r8, #3
   1ca24:	add	r1, r8, #4
   1ca28:	mul	r3, r2, r3
   1ca2c:	str	r3, [r0, #12]
   1ca30:	ldr	r3, [r0, #24]
   1ca34:	str	r1, [r0, #20]
   1ca38:	cmp	r1, r3
   1ca3c:	bhi	1ca7c <flatcc_builder_table_add_offset@@Base+0xf0>
   1ca40:	ldr	r3, [r4, #4]
   1ca44:	uxth	r2, r8
   1ca48:	add	r1, r2, #4
   1ca4c:	ldr	r0, [r4, #16]
   1ca50:	strh	r1, [r3, r7]
   1ca54:	ldrh	r3, [r4, #8]
   1ca58:	add	r0, r0, r8
   1ca5c:	cmp	r3, r5
   1ca60:	ldr	r3, [r4]
   1ca64:	addls	r1, r5, #1
   1ca68:	strhls	r1, [r4, #8]
   1ca6c:	add	r1, r3, #2
   1ca70:	str	r1, [r4]
   1ca74:	strh	r2, [r3]
   1ca78:	pop	{r4, r5, r6, r7, r8, pc}
   1ca7c:	movw	r2, #65532	; 0xfffc
   1ca80:	bl	1a170 <time_struct_buffer@@Base+0xb8>
   1ca84:	cmp	r0, #0
   1ca88:	beq	1ca40 <flatcc_builder_table_add_offset@@Base+0xb4>
   1ca8c:	mov	r0, r6
   1ca90:	pop	{r4, r5, r6, r7, r8, pc}
   1ca94:	andeq	r1, r2, r6, lsl #19
   1ca98:	andeq	r1, r2, r5, lsr #20
   1ca9c:	andeq	r1, r2, r4, asr #25
   1caa0:	andeq	r1, r2, r8, asr sp
   1caa4:	muleq	r2, r2, sl
   1caa8:			; <UNDEFINED> instruction: 0x9e3779b1

0001caac <flatcc_builder_table_add_union@@Base>:
   1caac:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cab0:	add	ip, sp, #8
   1cab4:	stmdb	ip, {r2, r3}
   1cab8:	ldr	r3, [r0, #32]
   1cabc:	ldrb	r5, [sp]
   1cac0:	ldr	r4, [sp, #4]
   1cac4:	ldrh	r3, [r3, #14]
   1cac8:	cmp	r3, #3
   1cacc:	beq	1cae4 <flatcc_builder_table_add_union@@Base+0x38>
   1cad0:	ldr	r3, [pc, #164]	; 1cb7c <flatcc_builder_table_add_union@@Base+0xd0>
   1cad4:	movw	r2, #1518	; 0x5ee
   1cad8:	ldr	r1, [pc, #160]	; 1cb80 <flatcc_builder_table_add_union@@Base+0xd4>
   1cadc:	ldr	r0, [pc, #160]	; 1cb84 <flatcc_builder_table_add_union@@Base+0xd8>
   1cae0:	bl	12a60 <__assert_fail@plt>
   1cae4:	cmp	r5, #0
   1cae8:	mov	r6, r0
   1caec:	mov	r7, r1
   1caf0:	bne	1cb10 <flatcc_builder_table_add_union@@Base+0x64>
   1caf4:	cmp	r4, #0
   1caf8:	beq	1cb3c <flatcc_builder_table_add_union@@Base+0x90>
   1cafc:	ldr	r3, [pc, #120]	; 1cb7c <flatcc_builder_table_add_union@@Base+0xd0>
   1cb00:	movw	r2, #1519	; 0x5ef
   1cb04:	ldr	r1, [pc, #116]	; 1cb80 <flatcc_builder_table_add_union@@Base+0xd4>
   1cb08:	ldr	r0, [pc, #120]	; 1cb88 <flatcc_builder_table_add_union@@Base+0xdc>
   1cb0c:	b	1cae0 <flatcc_builder_table_add_union@@Base+0x34>
   1cb10:	cmp	r4, #0
   1cb14:	beq	1cb3c <flatcc_builder_table_add_union@@Base+0x90>
   1cb18:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   1cb1c:	cmp	r0, #0
   1cb20:	strne	r4, [r0]
   1cb24:	bne	1cb3c <flatcc_builder_table_add_union@@Base+0x90>
   1cb28:	ldr	r3, [pc, #76]	; 1cb7c <flatcc_builder_table_add_union@@Base+0xd0>
   1cb2c:	movw	r2, #1522	; 0x5f2
   1cb30:	ldr	r1, [pc, #72]	; 1cb80 <flatcc_builder_table_add_union@@Base+0xd4>
   1cb34:	ldr	r0, [pc, #80]	; 1cb8c <flatcc_builder_table_add_union@@Base+0xe0>
   1cb38:	b	1cae0 <flatcc_builder_table_add_union@@Base+0x34>
   1cb3c:	mov	r3, #1
   1cb40:	sub	r1, r7, #1
   1cb44:	mov	r2, r3
   1cb48:	mov	r0, r6
   1cb4c:	bl	1c7e8 <flatcc_builder_table_add@@Base>
   1cb50:	cmp	r0, #0
   1cb54:	bne	1cb6c <flatcc_builder_table_add_union@@Base+0xc0>
   1cb58:	ldr	r3, [pc, #28]	; 1cb7c <flatcc_builder_table_add_union@@Base+0xd0>
   1cb5c:	movw	r2, #1526	; 0x5f6
   1cb60:	ldr	r1, [pc, #24]	; 1cb80 <flatcc_builder_table_add_union@@Base+0xd4>
   1cb64:	ldr	r0, [pc, #36]	; 1cb90 <flatcc_builder_table_add_union@@Base+0xe4>
   1cb68:	b	1cae0 <flatcc_builder_table_add_union@@Base+0x34>
   1cb6c:	strb	r5, [r0]
   1cb70:	mov	r0, #0
   1cb74:	add	sp, sp, #12
   1cb78:	pop	{r4, r5, r6, r7, pc}
   1cb7c:	andeq	r1, r2, r6, lsr #19
   1cb80:	andeq	r1, r2, r5, lsr #20
   1cb84:	andeq	r1, r2, r4, asr #25
   1cb88:	muleq	r2, ip, sp
   1cb8c:			; <UNDEFINED> instruction: 0x00021dbe
   1cb90:	andeq	r1, r2, r8, asr #27

0001cb94 <flatcc_builder_table_add_union_vector@@Base>:
   1cb94:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb98:	mov	r7, r1
   1cb9c:	add	r1, sp, #8
   1cba0:	stmdb	r1, {r2, r3}
   1cba4:	ldr	r3, [r0, #32]
   1cba8:	ldrd	r4, [sp]
   1cbac:	ldrh	r3, [r3, #14]
   1cbb0:	cmp	r3, #3
   1cbb4:	beq	1cbcc <flatcc_builder_table_add_union_vector@@Base+0x38>
   1cbb8:	ldr	r3, [pc, #176]	; 1cc70 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1cbbc:	mov	r2, #1536	; 0x600
   1cbc0:	ldr	r1, [pc, #172]	; 1cc74 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1cbc4:	ldr	r0, [pc, #172]	; 1cc78 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1cbc8:	bl	12a60 <__assert_fail@plt>
   1cbcc:	clz	r3, r5
   1cbd0:	clz	r2, r4
   1cbd4:	lsr	r3, r3, #5
   1cbd8:	lsr	r2, r2, #5
   1cbdc:	cmp	r2, r3
   1cbe0:	beq	1cc0c <flatcc_builder_table_add_union_vector@@Base+0x78>
   1cbe4:	adds	r4, r4, #0
   1cbe8:	movne	r4, #1
   1cbec:	cmp	r4, r3
   1cbf0:	mvnne	r4, #0
   1cbf4:	bne	1cc64 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1cbf8:	ldr	r3, [pc, #112]	; 1cc70 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1cbfc:	movw	r2, #1537	; 0x601
   1cc00:	ldr	r1, [pc, #108]	; 1cc74 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1cc04:	ldr	r0, [pc, #112]	; 1cc7c <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1cc08:	b	1cbc8 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1cc0c:	cmp	r4, #0
   1cc10:	beq	1cc64 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1cc14:	sub	r1, r7, #1
   1cc18:	mov	r6, r0
   1cc1c:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   1cc20:	cmp	r0, #0
   1cc24:	ldreq	r3, [pc, #68]	; 1cc70 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1cc28:	movweq	r2, #1540	; 0x604
   1cc2c:	beq	1cc58 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   1cc30:	mov	r1, r7
   1cc34:	str	r4, [r0]
   1cc38:	mov	r0, r6
   1cc3c:	bl	1c98c <flatcc_builder_table_add_offset@@Base>
   1cc40:	cmp	r0, #0
   1cc44:	movne	r4, #0
   1cc48:	strne	r5, [r0]
   1cc4c:	bne	1cc64 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1cc50:	ldr	r3, [pc, #24]	; 1cc70 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1cc54:	movw	r2, #1544	; 0x608
   1cc58:	ldr	r1, [pc, #20]	; 1cc74 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1cc5c:	ldr	r0, [pc, #28]	; 1cc80 <flatcc_builder_table_add_union_vector@@Base+0xec>
   1cc60:	b	1cbc8 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1cc64:	mov	r0, r4
   1cc68:	add	sp, sp, #12
   1cc6c:	pop	{r4, r5, r6, r7, pc}
   1cc70:	andeq	r1, r2, r5, asr #19
   1cc74:	andeq	r1, r2, r5, lsr #20
   1cc78:	andeq	r1, r2, r4, asr #25
   1cc7c:	ldrdeq	r1, [r2], -r4
   1cc80:			; <UNDEFINED> instruction: 0x00021dbe

0001cc84 <flatcc_builder_push_buffer_alignment@@Base>:
   1cc84:	mov	r3, r0
   1cc88:	mov	r2, #4
   1cc8c:	ldrh	r0, [r0, #128]	; 0x80
   1cc90:	strh	r2, [r3, #128]	; 0x80
   1cc94:	bx	lr

0001cc98 <flatcc_builder_pop_buffer_alignment@@Base>:
   1cc98:	ldrh	r3, [r0, #128]	; 0x80
   1cc9c:	cmp	r3, r1
   1cca0:	strhcc	r1, [r0, #128]	; 0x80
   1cca4:	bx	lr

0001cca8 <flatcc_builder_get_buffer_alignment@@Base>:
   1cca8:	ldrh	r0, [r0, #128]	; 0x80
   1ccac:	bx	lr

0001ccb0 <flatcc_builder_set_vtable_clustering@@Base>:
   1ccb0:	clz	r1, r1
   1ccb4:	lsr	r1, r1, #5
   1ccb8:	str	r1, [r0, #180]	; 0xb4
   1ccbc:	bx	lr

0001ccc0 <flatcc_builder_set_block_align@@Base>:
   1ccc0:	strh	r1, [r0, #132]	; 0x84
   1ccc4:	bx	lr

0001ccc8 <flatcc_builder_get_level@@Base>:
   1ccc8:	ldr	r0, [r0, #156]	; 0x9c
   1cccc:	bx	lr

0001ccd0 <flatcc_builder_set_max_level@@Base>:
   1ccd0:	ldr	r3, [r0, #160]	; 0xa0
   1ccd4:	str	r1, [r0, #176]	; 0xb0
   1ccd8:	cmp	r3, r1
   1ccdc:	strlt	r1, [r0, #160]	; 0xa0
   1cce0:	bx	lr

0001cce4 <flatcc_builder_get_buffer_size@@Base>:
   1cce4:	ldr	r2, [r0, #140]	; 0x8c
   1cce8:	ldr	r0, [r0, #136]	; 0x88
   1ccec:	sub	r0, r2, r0
   1ccf0:	bx	lr

0001ccf4 <flatcc_builder_get_buffer_start@@Base>:
   1ccf4:	ldr	r0, [r0, #136]	; 0x88
   1ccf8:	bx	lr

0001ccfc <flatcc_builder_get_buffer_end@@Base>:
   1ccfc:	ldr	r0, [r0, #140]	; 0x8c
   1cd00:	bx	lr

0001cd04 <flatcc_builder_set_vtable_cache_limit@@Base>:
   1cd04:	str	r1, [r0, #172]	; 0xac
   1cd08:	bx	lr

0001cd0c <flatcc_builder_set_identifier@@Base>:
   1cd0c:	ldr	r3, [pc, #16]	; 1cd24 <flatcc_builder_set_identifier@@Base+0x18>
   1cd10:	cmp	r1, #0
   1cd14:	moveq	r1, r3
   1cd18:	ldr	r3, [r1]
   1cd1c:	str	r3, [r0, #168]	; 0xa8
   1cd20:	bx	lr
   1cd24:	andeq	r1, r2, pc, lsr r3

0001cd28 <flatcc_builder_get_type@@Base>:
   1cd28:	ldr	r0, [r0, #32]
   1cd2c:	cmp	r0, #0
   1cd30:	ldrhne	r0, [r0, #14]
   1cd34:	bx	lr

0001cd38 <flatcc_builder_get_type_at@@Base>:
   1cd38:	cmp	r1, #0
   1cd3c:	ble	1cd64 <flatcc_builder_get_type_at@@Base+0x2c>
   1cd40:	ldr	r3, [r0, #156]	; 0x9c
   1cd44:	cmp	r3, r1
   1cd48:	blt	1cd64 <flatcc_builder_get_type_at@@Base+0x2c>
   1cd4c:	sub	r1, r1, r3
   1cd50:	ldr	r3, [r0, #32]
   1cd54:	mov	r2, #36	; 0x24
   1cd58:	mla	r1, r2, r1, r3
   1cd5c:	ldrh	r0, [r1, #14]
   1cd60:	bx	lr
   1cd64:	mov	r0, #0
   1cd68:	bx	lr

0001cd6c <flatcc_builder_get_direct_buffer@@Base>:
   1cd6c:	ldr	r3, [r0, #184]	; 0xb8
   1cd70:	cmp	r3, #0
   1cd74:	beq	1cd9c <flatcc_builder_get_direct_buffer@@Base+0x30>
   1cd78:	ldrd	r2, [r0, #188]	; 0xbc
   1cd7c:	cmp	r2, r3
   1cd80:	bne	1cd9c <flatcc_builder_get_direct_buffer@@Base+0x30>
   1cd84:	cmp	r1, #0
   1cd88:	ldrne	r3, [r0, #212]	; 0xd4
   1cd8c:	strne	r3, [r1]
   1cd90:	ldr	r1, [r0, #196]	; 0xc4
   1cd94:	mov	r0, r1
   1cd98:	bx	lr
   1cd9c:	cmp	r1, #0
   1cda0:	movne	r3, #0
   1cda4:	strne	r3, [r1]
   1cda8:	movne	r1, r3
   1cdac:	b	1cd94 <flatcc_builder_get_direct_buffer@@Base+0x28>

0001cdb0 <flatcc_builder_copy_buffer@@Base>:
   1cdb0:	ldr	r3, [r0, #184]	; 0xb8
   1cdb4:	cmp	r3, #0
   1cdb8:	beq	1cde4 <flatcc_builder_copy_buffer@@Base+0x34>
   1cdbc:	push	{r4, lr}
   1cdc0:	add	r0, r0, #188	; 0xbc
   1cdc4:	bl	1d358 <flatcc_emitter_copy_buffer@@Base>
   1cdc8:	cmp	r0, #0
   1cdcc:	popne	{r4, pc}
   1cdd0:	ldr	r3, [pc, #20]	; 1cdec <flatcc_builder_copy_buffer@@Base+0x3c>
   1cdd4:	movw	r2, #1926	; 0x786
   1cdd8:	ldr	r1, [pc, #16]	; 1cdf0 <flatcc_builder_copy_buffer@@Base+0x40>
   1cddc:	ldr	r0, [pc, #16]	; 1cdf4 <flatcc_builder_copy_buffer@@Base+0x44>
   1cde0:	bl	12a60 <__assert_fail@plt>
   1cde4:	mov	r0, r3
   1cde8:	bx	lr
   1cdec:	andeq	r1, r2, fp, ror #19
   1cdf0:	andeq	r1, r2, r5, lsr #20
   1cdf4:	andeq	r0, r2, r7, ror #7

0001cdf8 <flatcc_builder_finalize_buffer@@Base>:
   1cdf8:	push	{r4, r5, r6, lr}
   1cdfc:	cmp	r1, #0
   1ce00:	mov	r5, r0
   1ce04:	ldr	r2, [r0, #136]	; 0x88
   1ce08:	ldr	r4, [r0, #140]	; 0x8c
   1ce0c:	sub	r4, r4, r2
   1ce10:	mov	r0, r4
   1ce14:	strne	r4, [r1]
   1ce18:	bl	129c4 <malloc@plt>
   1ce1c:	subs	r6, r0, #0
   1ce20:	ldreq	r3, [pc, #56]	; 1ce60 <flatcc_builder_finalize_buffer@@Base+0x68>
   1ce24:	movweq	r2, #1944	; 0x798
   1ce28:	beq	1ce4c <flatcc_builder_finalize_buffer@@Base+0x54>
   1ce2c:	mov	r2, r4
   1ce30:	mov	r1, r6
   1ce34:	mov	r0, r5
   1ce38:	bl	1cdb0 <flatcc_builder_copy_buffer@@Base>
   1ce3c:	cmp	r0, #0
   1ce40:	bne	1ce58 <flatcc_builder_finalize_buffer@@Base+0x60>
   1ce44:	ldr	r3, [pc, #20]	; 1ce60 <flatcc_builder_finalize_buffer@@Base+0x68>
   1ce48:	movw	r2, #1948	; 0x79c
   1ce4c:	ldr	r1, [pc, #16]	; 1ce64 <flatcc_builder_finalize_buffer@@Base+0x6c>
   1ce50:	ldr	r0, [pc, #16]	; 1ce68 <flatcc_builder_finalize_buffer@@Base+0x70>
   1ce54:	bl	12a60 <__assert_fail@plt>
   1ce58:	mov	r0, r6
   1ce5c:	pop	{r4, r5, r6, pc}
   1ce60:	andeq	r1, r2, r6, lsl #20
   1ce64:	andeq	r1, r2, r5, lsr #20
   1ce68:	muleq	r2, r2, sl

0001ce6c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1ce6c:	push	{r4, r5, r6, r7, r8, lr}
   1ce70:	mov	r6, r0
   1ce74:	subs	r7, r1, #0
   1ce78:	ldr	r2, [r0, #136]	; 0x88
   1ce7c:	ldr	r4, [r0, #140]	; 0x8c
   1ce80:	ldrh	r0, [r0, #128]	; 0x80
   1ce84:	sub	r2, r4, r2
   1ce88:	sub	r4, r0, #1
   1ce8c:	strne	r2, [r7]
   1ce90:	add	r4, r4, r2
   1ce94:	rsb	r2, r0, #0
   1ce98:	and	r4, r4, r2
   1ce9c:	mov	r1, r4
   1cea0:	bl	1a2c0 <time_struct_buffer@@Base+0x208>
   1cea4:	subs	r5, r0, #0
   1cea8:	beq	1ced0 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1ceac:	mov	r2, r4
   1ceb0:	mov	r1, r5
   1ceb4:	mov	r0, r6
   1ceb8:	bl	1cdb0 <flatcc_builder_copy_buffer@@Base>
   1cebc:	subs	r4, r0, #0
   1cec0:	bne	1ced0 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1cec4:	mov	r0, r5
   1cec8:	mov	r5, r4
   1cecc:	bl	1297c <free@plt>
   1ced0:	adds	r3, r7, #0
   1ced4:	mov	r0, r5
   1ced8:	movne	r3, #1
   1cedc:	cmp	r5, #0
   1cee0:	movne	r3, #0
   1cee4:	cmp	r3, #0
   1cee8:	movne	r3, #0
   1ceec:	strne	r3, [r7]
   1cef0:	pop	{r4, r5, r6, r7, r8, pc}

0001cef4 <flatcc_builder_aligned_alloc@@Base>:
   1cef4:	b	1a2c0 <time_struct_buffer@@Base+0x208>

0001cef8 <flatcc_builder_aligned_free@@Base>:
   1cef8:	b	1297c <free@plt>

0001cefc <flatcc_builder_get_emit_context@@Base>:
   1cefc:	ldr	r0, [r0, #36]	; 0x24
   1cf00:	bx	lr

0001cf04 <flatcc_emitter_recycle_page@@Base>:
   1cf04:	ldr	r3, [r0]
   1cf08:	cmp	r3, r1
   1cf0c:	beq	1cf4c <flatcc_emitter_recycle_page@@Base+0x48>
   1cf10:	ldr	r2, [r0, #4]
   1cf14:	cmp	r2, r1
   1cf18:	beq	1cf4c <flatcc_emitter_recycle_page@@Base+0x48>
   1cf1c:	ldr	r0, [r1, #2944]	; 0xb80
   1cf20:	ldr	r2, [r1, #2948]	; 0xb84
   1cf24:	str	r2, [r0, #2948]	; 0xb84
   1cf28:	str	r0, [r2, #2944]	; 0xb80
   1cf2c:	mov	r0, #0
   1cf30:	ldr	r2, [r3, #2948]	; 0xb84
   1cf34:	str	r3, [r1, #2944]	; 0xb80
   1cf38:	str	r2, [r1, #2948]	; 0xb84
   1cf3c:	str	r1, [r2, #2944]	; 0xb80
   1cf40:	ldr	r3, [r1, #2944]	; 0xb80
   1cf44:	str	r1, [r3, #2948]	; 0xb84
   1cf48:	bx	lr
   1cf4c:	mvn	r0, #0
   1cf50:	bx	lr

0001cf54 <flatcc_emitter_reset@@Base>:
   1cf54:	ldr	r3, [r0]
   1cf58:	cmp	r3, #0
   1cf5c:	bxeq	lr
   1cf60:	add	r2, r3, #1472	; 0x5c0
   1cf64:	push	{r4, lr}
   1cf68:	mov	r4, r0
   1cf6c:	str	r3, [r0, #4]
   1cf70:	str	r2, [r0, #8]
   1cf74:	str	r2, [r0, #16]
   1cf78:	mov	r2, #1472	; 0x5c0
   1cf7c:	str	r2, [r0, #12]
   1cf80:	str	r2, [r0, #20]
   1cf84:	sub	r2, r2, #2944	; 0xb80
   1cf88:	str	r2, [r3, #2952]	; 0xb88
   1cf8c:	ldr	r3, [r0, #24]
   1cf90:	ldr	r2, [r0, #32]
   1cf94:	cmp	r2, #0
   1cf98:	streq	r3, [r0, #32]
   1cf9c:	lsr	r3, r3, #2
   1cfa0:	ldr	r2, [r0, #32]
   1cfa4:	add	r2, r2, r2, lsl #1
   1cfa8:	add	r3, r3, r2, lsr #2
   1cfac:	str	r3, [r0, #32]
   1cfb0:	mov	r3, #0
   1cfb4:	str	r3, [r0, #24]
   1cfb8:	ldr	r3, [r4, #28]
   1cfbc:	ldr	r2, [r4, #32]
   1cfc0:	cmp	r3, r2, lsl #1
   1cfc4:	popls	{r4, pc}
   1cfc8:	ldrd	r2, [r4]
   1cfcc:	ldr	r0, [r3, #2944]	; 0xb80
   1cfd0:	cmp	r0, r2
   1cfd4:	popeq	{r4, pc}
   1cfd8:	ldr	r2, [r0, #2944]	; 0xb80
   1cfdc:	str	r2, [r3, #2944]	; 0xb80
   1cfe0:	ldr	r2, [r0, #2944]	; 0xb80
   1cfe4:	str	r3, [r2, #2948]	; 0xb84
   1cfe8:	bl	1297c <free@plt>
   1cfec:	ldr	r3, [r4, #28]
   1cff0:	sub	r3, r3, #2944	; 0xb80
   1cff4:	str	r3, [r4, #28]
   1cff8:	b	1cfb8 <flatcc_emitter_reset@@Base+0x64>

0001cffc <flatcc_emitter_clear@@Base>:
   1cffc:	ldr	r3, [r0]
   1d000:	cmp	r3, #0
   1d004:	bxeq	lr
   1d008:	push	{r4, r5, r6, lr}
   1d00c:	mov	r1, #0
   1d010:	mov	r4, r0
   1d014:	ldr	r2, [r3, #2948]	; 0xb84
   1d018:	str	r1, [r2, #2944]	; 0xb80
   1d01c:	ldr	r5, [r3, #2944]	; 0xb80
   1d020:	cmp	r5, #0
   1d024:	bne	1d044 <flatcc_emitter_clear@@Base+0x48>
   1d028:	mov	r0, r3
   1d02c:	bl	1297c <free@plt>
   1d030:	mov	r1, r5
   1d034:	mov	r0, r4
   1d038:	pop	{r4, r5, r6, lr}
   1d03c:	mov	r2, #36	; 0x24
   1d040:	b	12a0c <memset@plt>
   1d044:	ldr	r0, [r5, #2948]	; 0xb84
   1d048:	bl	1297c <free@plt>
   1d04c:	mov	r3, r5
   1d050:	b	1d01c <flatcc_emitter_clear@@Base+0x20>

0001d054 <flatcc_emitter@@Base>:
   1d054:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d058:	mov	r4, r0
   1d05c:	mov	r6, r2
   1d060:	cmp	r3, #0
   1d064:	ldr	r0, [r0, #24]
   1d068:	ldr	r2, [sp, #40]	; 0x28
   1d06c:	add	r0, r0, r2
   1d070:	str	r0, [r4, #24]
   1d074:	bge	1d20c <flatcc_emitter@@Base+0x1b8>
   1d078:	ldr	r0, [r4, #12]
   1d07c:	cmp	r0, r2
   1d080:	bcc	1d0c4 <flatcc_emitter@@Base+0x70>
   1d084:	ldr	r3, [r4, #8]
   1d088:	sub	r3, r3, r2
   1d08c:	sub	r2, r0, r2
   1d090:	str	r3, [r4, #8]
   1d094:	str	r2, [r4, #12]
   1d098:	mov	r4, r1
   1d09c:	sub	r6, r6, #1
   1d0a0:	add	r4, r4, #8
   1d0a4:	cmn	r6, #1
   1d0a8:	beq	1d0d8 <flatcc_emitter@@Base+0x84>
   1d0ac:	mov	r0, r3
   1d0b0:	ldmdb	r4, {r1, r2}
   1d0b4:	bl	12988 <memcpy@plt>
   1d0b8:	ldr	r2, [r4, #-4]
   1d0bc:	add	r3, r0, r2
   1d0c0:	b	1d09c <flatcc_emitter@@Base+0x48>
   1d0c4:	ldr	r9, [pc, #648]	; 1d354 <flatcc_emitter@@Base+0x300>
   1d0c8:	add	r5, r1, r6, lsl #3
   1d0cc:	mov	r8, #2944	; 0xb80
   1d0d0:	cmp	r6, #0
   1d0d4:	bne	1d0e0 <flatcc_emitter@@Base+0x8c>
   1d0d8:	mov	r0, #0
   1d0dc:	b	1d178 <flatcc_emitter@@Base+0x124>
   1d0e0:	ldr	sl, [r5, #-8]
   1d0e4:	ldr	r7, [r5, #-4]
   1d0e8:	add	sl, sl, r7
   1d0ec:	cmp	r7, #0
   1d0f0:	subeq	r5, r5, #8
   1d0f4:	subeq	r6, r6, #1
   1d0f8:	beq	1d0d0 <flatcc_emitter@@Base+0x7c>
   1d0fc:	ldr	r3, [r4, #12]
   1d100:	cmp	r3, r7
   1d104:	bcs	1d1dc <flatcc_emitter@@Base+0x188>
   1d108:	cmp	r3, #0
   1d10c:	movne	r2, r3
   1d110:	bne	1d1e0 <flatcc_emitter@@Base+0x18c>
   1d114:	ldr	fp, [r4]
   1d118:	cmp	fp, #0
   1d11c:	beq	1d164 <flatcc_emitter@@Base+0x110>
   1d120:	ldr	r2, [r4, #4]
   1d124:	ldr	r3, [fp, #2948]	; 0xb84
   1d128:	cmp	r3, r2
   1d12c:	beq	1d164 <flatcc_emitter@@Base+0x110>
   1d130:	ldr	r2, [fp, #2952]	; 0xb88
   1d134:	sub	r2, r2, #2944	; 0xb80
   1d138:	str	r2, [r3, #2952]	; 0xb88
   1d13c:	str	r3, [r4]
   1d140:	ldr	r3, [r4]
   1d144:	str	r8, [r4, #12]
   1d148:	add	r2, r3, #2944	; 0xb80
   1d14c:	str	r2, [r4, #8]
   1d150:	ldr	r2, [r3, #2944]	; 0xb80
   1d154:	ldr	r2, [r2, #2952]	; 0xb88
   1d158:	sub	r2, r2, #2944	; 0xb80
   1d15c:	str	r2, [r3, #2952]	; 0xb88
   1d160:	b	1d0ec <flatcc_emitter@@Base+0x98>
   1d164:	movw	r0, #2956	; 0xb8c
   1d168:	bl	129c4 <malloc@plt>
   1d16c:	cmp	r0, #0
   1d170:	bne	1d180 <flatcc_emitter@@Base+0x12c>
   1d174:	mvn	r0, #0
   1d178:	add	sp, sp, #4
   1d17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d180:	ldr	r3, [r4, #28]
   1d184:	cmp	fp, #0
   1d188:	add	r3, r3, #2944	; 0xb80
   1d18c:	str	r3, [r4, #28]
   1d190:	beq	1d1b0 <flatcc_emitter@@Base+0x15c>
   1d194:	ldr	r3, [r4, #4]
   1d198:	str	fp, [r0, #2944]	; 0xb80
   1d19c:	str	r3, [r0, #2948]	; 0xb84
   1d1a0:	str	r0, [fp, #2948]	; 0xb84
   1d1a4:	str	r0, [r3, #2944]	; 0xb80
   1d1a8:	str	r0, [r4]
   1d1ac:	b	1d140 <flatcc_emitter@@Base+0xec>
   1d1b0:	add	r3, r0, #1472	; 0x5c0
   1d1b4:	str	r0, [r4]
   1d1b8:	str	r0, [r0, #2944]	; 0xb80
   1d1bc:	stmib	r4, {r0, r3}
   1d1c0:	str	r3, [r4, #16]
   1d1c4:	mov	r3, #1472	; 0x5c0
   1d1c8:	str	r0, [r0, #2948]	; 0xb84
   1d1cc:	str	r3, [r4, #12]
   1d1d0:	str	r3, [r4, #20]
   1d1d4:	str	r9, [r0, #2952]	; 0xb88
   1d1d8:	b	1d0ec <flatcc_emitter@@Base+0x98>
   1d1dc:	mov	r2, r7
   1d1e0:	ldr	r0, [r4, #8]
   1d1e4:	rsb	r1, r2, #0
   1d1e8:	sub	r3, r3, r2
   1d1ec:	add	sl, sl, r1
   1d1f0:	sub	r7, r7, r2
   1d1f4:	str	r3, [r4, #12]
   1d1f8:	add	r0, r0, r1
   1d1fc:	mov	r1, sl
   1d200:	str	r0, [r4, #8]
   1d204:	bl	12988 <memcpy@plt>
   1d208:	b	1d0ec <flatcc_emitter@@Base+0x98>
   1d20c:	ldr	r0, [r4, #20]
   1d210:	cmp	r0, r2
   1d214:	bcs	1d248 <flatcc_emitter@@Base+0x1f4>
   1d218:	ldr	sl, [pc, #308]	; 1d354 <flatcc_emitter@@Base+0x300>
   1d21c:	add	r5, r1, #8
   1d220:	mov	r9, #2944	; 0xb80
   1d224:	cmp	r6, #0
   1d228:	beq	1d0d8 <flatcc_emitter@@Base+0x84>
   1d22c:	ldr	fp, [r5, #-8]
   1d230:	ldr	r8, [r5, #-4]
   1d234:	cmp	r8, #0
   1d238:	bne	1d260 <flatcc_emitter@@Base+0x20c>
   1d23c:	sub	r6, r6, #1
   1d240:	add	r5, r5, #8
   1d244:	b	1d224 <flatcc_emitter@@Base+0x1d0>
   1d248:	ldr	r3, [r4, #16]
   1d24c:	add	ip, r3, r2
   1d250:	sub	r2, r0, r2
   1d254:	str	ip, [r4, #16]
   1d258:	str	r2, [r4, #20]
   1d25c:	b	1d098 <flatcc_emitter@@Base+0x44>
   1d260:	ldr	r7, [r4, #20]
   1d264:	cmp	r7, r8
   1d268:	bcs	1d31c <flatcc_emitter@@Base+0x2c8>
   1d26c:	cmp	r7, #0
   1d270:	bne	1d320 <flatcc_emitter@@Base+0x2cc>
   1d274:	ldr	r7, [r4, #4]
   1d278:	cmp	r7, #0
   1d27c:	beq	1d294 <flatcc_emitter@@Base+0x240>
   1d280:	ldr	r2, [r4]
   1d284:	ldr	r3, [r7, #2944]	; 0xb80
   1d288:	cmp	r3, r2
   1d28c:	strne	r3, [r4, #4]
   1d290:	bne	1d2d0 <flatcc_emitter@@Base+0x27c>
   1d294:	movw	r0, #2956	; 0xb8c
   1d298:	bl	129c4 <malloc@plt>
   1d29c:	cmp	r0, #0
   1d2a0:	beq	1d174 <flatcc_emitter@@Base+0x120>
   1d2a4:	ldr	r3, [r4, #28]
   1d2a8:	cmp	r7, #0
   1d2ac:	add	r3, r3, #2944	; 0xb80
   1d2b0:	str	r3, [r4, #28]
   1d2b4:	beq	1d2f0 <flatcc_emitter@@Base+0x29c>
   1d2b8:	ldr	r3, [r4]
   1d2bc:	str	r3, [r0, #2944]	; 0xb80
   1d2c0:	str	r7, [r0, #2948]	; 0xb84
   1d2c4:	str	r0, [r3, #2948]	; 0xb84
   1d2c8:	str	r0, [r7, #2944]	; 0xb80
   1d2cc:	str	r0, [r4, #4]
   1d2d0:	ldr	r3, [r4, #4]
   1d2d4:	ldr	r2, [r3, #2948]	; 0xb84
   1d2d8:	ldr	r2, [r2, #2952]	; 0xb88
   1d2dc:	str	r3, [r4, #16]
   1d2e0:	str	r9, [r4, #20]
   1d2e4:	add	r2, r2, #2944	; 0xb80
   1d2e8:	str	r2, [r3, #2952]	; 0xb88
   1d2ec:	b	1d234 <flatcc_emitter@@Base+0x1e0>
   1d2f0:	add	r3, r0, #1472	; 0x5c0
   1d2f4:	str	r0, [r4]
   1d2f8:	str	r0, [r0, #2944]	; 0xb80
   1d2fc:	stmib	r4, {r0, r3}
   1d300:	str	r3, [r4, #16]
   1d304:	mov	r3, #1472	; 0x5c0
   1d308:	str	r0, [r0, #2948]	; 0xb84
   1d30c:	str	r3, [r4, #12]
   1d310:	str	r3, [r4, #20]
   1d314:	str	sl, [r0, #2952]	; 0xb88
   1d318:	b	1d234 <flatcc_emitter@@Base+0x1e0>
   1d31c:	mov	r7, r8
   1d320:	mov	r2, r7
   1d324:	mov	r1, fp
   1d328:	ldr	r0, [r4, #16]
   1d32c:	bl	12988 <memcpy@plt>
   1d330:	ldr	r3, [r4, #16]
   1d334:	sub	r8, r8, r7
   1d338:	add	fp, fp, r7
   1d33c:	add	r3, r3, r7
   1d340:	str	r3, [r4, #16]
   1d344:	ldr	r3, [r4, #20]
   1d348:	sub	r7, r3, r7
   1d34c:	str	r7, [r4, #20]
   1d350:	b	1d234 <flatcc_emitter@@Base+0x1e0>
   1d354:			; <UNDEFINED> instruction: 0xfffffa40

0001d358 <flatcc_emitter_copy_buffer@@Base>:
   1d358:	ldr	ip, [r0, #24]
   1d35c:	push	{r4, r5, r6, lr}
   1d360:	cmp	ip, r2
   1d364:	movhi	r6, #0
   1d368:	bhi	1d3a0 <flatcc_emitter_copy_buffer@@Base+0x48>
   1d36c:	ldr	r6, [r0]
   1d370:	cmp	r6, #0
   1d374:	beq	1d3a0 <flatcc_emitter_copy_buffer@@Base+0x48>
   1d378:	ldr	r2, [r0, #4]
   1d37c:	mov	r5, r1
   1d380:	mov	r4, r0
   1d384:	ldr	r1, [r0, #8]
   1d388:	cmp	r6, r2
   1d38c:	bne	1d3a8 <flatcc_emitter_copy_buffer@@Base+0x50>
   1d390:	mov	r2, ip
   1d394:	mov	r0, r5
   1d398:	mov	r6, r5
   1d39c:	bl	12988 <memcpy@plt>
   1d3a0:	mov	r0, r6
   1d3a4:	pop	{r4, r5, r6, pc}
   1d3a8:	ldr	r3, [r4, #12]
   1d3ac:	mov	r0, r5
   1d3b0:	rsb	r6, r3, #2944	; 0xb80
   1d3b4:	mov	r2, r6
   1d3b8:	add	r6, r5, r6
   1d3bc:	bl	12988 <memcpy@plt>
   1d3c0:	ldr	r2, [r4]
   1d3c4:	ldr	r5, [r2, #2944]	; 0xb80
   1d3c8:	ldr	r2, [r4, #4]
   1d3cc:	cmp	r2, r5
   1d3d0:	bne	1d3ec <flatcc_emitter_copy_buffer@@Base+0x94>
   1d3d4:	ldr	r2, [r4, #20]
   1d3d8:	mov	r1, r5
   1d3dc:	mov	r0, r6
   1d3e0:	rsb	r2, r2, #2944	; 0xb80
   1d3e4:	bl	12988 <memcpy@plt>
   1d3e8:	b	1d3a0 <flatcc_emitter_copy_buffer@@Base+0x48>
   1d3ec:	mov	r1, r5
   1d3f0:	mov	r0, r6
   1d3f4:	mov	r2, #2944	; 0xb80
   1d3f8:	add	r6, r6, #2944	; 0xb80
   1d3fc:	bl	12988 <memcpy@plt>
   1d400:	ldr	r5, [r5, #2944]	; 0xb80
   1d404:	b	1d3c8 <flatcc_emitter_copy_buffer@@Base+0x70>
   1d408:	cmp	r2, #0
   1d40c:	beq	1d454 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1d410:	add	r1, r2, r1
   1d414:	cmp	r1, r0
   1d418:	bhi	1d454 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1d41c:	adds	r3, r1, r3
   1d420:	bcs	1d434 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1d424:	cmp	r3, r0
   1d428:	bls	1d43c <flatcc_emitter_copy_buffer@@Base+0xe4>
   1d42c:	mov	r0, #9
   1d430:	bx	lr
   1d434:	mov	r0, #10
   1d438:	bx	lr
   1d43c:	ldrh	r3, [sp]
   1d440:	sub	r3, r3, #1
   1d444:	tst	r3, r1
   1d448:	moveq	r0, #0
   1d44c:	movne	r0, #11
   1d450:	bx	lr
   1d454:	mov	r0, #18
   1d458:	bx	lr
   1d45c:	ldrh	r3, [r0, #22]
   1d460:	add	r1, r1, #2
   1d464:	lsl	r1, r1, #1
   1d468:	uxth	r1, r1
   1d46c:	cmp	r3, r1
   1d470:	ldrhi	r3, [r0, #12]
   1d474:	ldrhhi	r0, [r3, r1]
   1d478:	movls	r0, #0
   1d47c:	bx	lr
   1d480:	push	{r4, lr}
   1d484:	mov	r2, r0
   1d488:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1d48c:	uxth	r3, r0
   1d490:	cmp	r3, #0
   1d494:	ldrne	r3, [r2, #16]
   1d498:	uxtahne	r0, r3, r0
   1d49c:	ldrne	r3, [r2]
   1d4a0:	addne	r0, r3, r0
   1d4a4:	moveq	r0, r3
   1d4a8:	pop	{r4, pc}
   1d4ac:	push	{r4, r5, r6, lr}
   1d4b0:	mov	r4, r3
   1d4b4:	mov	r5, r0
   1d4b8:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1d4bc:	uxth	r3, r0
   1d4c0:	cmp	r3, #0
   1d4c4:	bne	1d4dc <flatcc_emitter_copy_buffer@@Base+0x184>
   1d4c8:	cmp	r2, #0
   1d4cc:	str	r3, [r4]
   1d4d0:	movne	r2, #4
   1d4d4:	mov	r0, r2
   1d4d8:	pop	{r4, r5, r6, pc}
   1d4dc:	ldrh	r2, [r5, #20]
   1d4e0:	uxth	r0, r0
   1d4e4:	add	r3, r0, #4
   1d4e8:	cmp	r2, r3
   1d4ec:	movcc	r2, #13
   1d4f0:	bcc	1d4d4 <flatcc_emitter_copy_buffer@@Base+0x17c>
   1d4f4:	ldr	r3, [r5, #16]
   1d4f8:	add	r0, r0, r3
   1d4fc:	ands	r2, r0, #3
   1d500:	movne	r2, #12
   1d504:	streq	r0, [r4]
   1d508:	b	1d4d4 <flatcc_emitter_copy_buffer@@Base+0x17c>
   1d50c:	add	r3, r2, r3
   1d510:	ldrh	ip, [sp, #4]
   1d514:	cmp	r2, r3
   1d518:	bcs	1d56c <flatcc_emitter_copy_buffer@@Base+0x214>
   1d51c:	add	r2, r3, #4
   1d520:	cmp	r1, r2
   1d524:	bcc	1d56c <flatcc_emitter_copy_buffer@@Base+0x214>
   1d528:	cmp	ip, #4
   1d52c:	movcc	ip, #4
   1d530:	sub	ip, ip, #1
   1d534:	orr	ip, ip, #3
   1d538:	tst	ip, r2
   1d53c:	bne	1d56c <flatcc_emitter_copy_buffer@@Base+0x214>
   1d540:	ldr	r3, [r0, r3]
   1d544:	ldr	r0, [sp, #8]
   1d548:	cmp	r3, r0
   1d54c:	bhi	1d574 <flatcc_emitter_copy_buffer@@Base+0x21c>
   1d550:	ldr	r0, [sp]
   1d554:	sub	r1, r1, r2
   1d558:	mul	r0, r0, r3
   1d55c:	cmp	r1, r0
   1d560:	movcc	r0, #26
   1d564:	movcs	r0, #0
   1d568:	bx	lr
   1d56c:	mov	r0, #16
   1d570:	bx	lr
   1d574:	mov	r0, #25
   1d578:	bx	lr
   1d57c:	push	{r4, lr}
   1d580:	sub	sp, sp, #24
   1d584:	ldr	ip, [sp, #32]
   1d588:	sub	ip, ip, #1
   1d58c:	cmp	ip, #0
   1d590:	moveq	r0, #3
   1d594:	str	ip, [sp, #8]
   1d598:	beq	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d59c:	add	r3, r2, r3
   1d5a0:	cmp	r2, r3
   1d5a4:	bcs	1d644 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   1d5a8:	add	r2, r3, #4
   1d5ac:	cmp	r1, r2
   1d5b0:	bcc	1d644 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   1d5b4:	tst	r3, #3
   1d5b8:	bne	1d644 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   1d5bc:	ldr	r2, [r0, r3]
   1d5c0:	str	r3, [sp, #16]
   1d5c4:	subs	r2, r3, r2
   1d5c8:	bmi	1d64c <flatcc_emitter_copy_buffer@@Base+0x2f4>
   1d5cc:	tst	r2, #1
   1d5d0:	bne	1d64c <flatcc_emitter_copy_buffer@@Base+0x2f4>
   1d5d4:	add	lr, r2, #2
   1d5d8:	cmp	lr, r1
   1d5dc:	movhi	r0, #27
   1d5e0:	bhi	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d5e4:	ldrh	ip, [r0, r2]
   1d5e8:	add	r4, r0, r2
   1d5ec:	add	r2, ip, r2
   1d5f0:	strh	ip, [sp, #22]
   1d5f4:	cmp	r1, r2
   1d5f8:	bcc	1d654 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   1d5fc:	tst	ip, #1
   1d600:	bne	1d654 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   1d604:	cmp	ip, #3
   1d608:	movls	r0, #28
   1d60c:	bls	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d610:	ldrh	r2, [r0, lr]
   1d614:	sub	r3, r1, r3
   1d618:	cmp	r3, r2
   1d61c:	strh	r2, [sp, #20]
   1d620:	movcc	r0, #20
   1d624:	bcc	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d628:	strd	r0, [sp]
   1d62c:	mov	r0, sp
   1d630:	ldr	r3, [sp, #36]	; 0x24
   1d634:	str	r4, [sp, #12]
   1d638:	blx	r3
   1d63c:	add	sp, sp, #24
   1d640:	pop	{r4, pc}
   1d644:	mov	r0, #15
   1d648:	b	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d64c:	mov	r0, #29
   1d650:	b	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d654:	mov	r0, #30
   1d658:	b	1d63c <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d65c:	add	r3, r2, r3
   1d660:	cmp	r2, r3
   1d664:	bcs	1d6a8 <flatcc_emitter_copy_buffer@@Base+0x350>
   1d668:	add	r2, r3, #4
   1d66c:	cmp	r1, r2
   1d670:	bcc	1d6a8 <flatcc_emitter_copy_buffer@@Base+0x350>
   1d674:	tst	r3, #3
   1d678:	bne	1d6a8 <flatcc_emitter_copy_buffer@@Base+0x350>
   1d67c:	ldr	r3, [r0, r3]
   1d680:	sub	r1, r1, r2
   1d684:	add	ip, r3, #1
   1d688:	cmp	r1, ip
   1d68c:	bcc	1d6b0 <flatcc_emitter_copy_buffer@@Base+0x358>
   1d690:	add	r0, r0, r3
   1d694:	ldrb	r3, [r0, r2]
   1d698:	cmp	r3, #0
   1d69c:	moveq	r0, #0
   1d6a0:	movne	r0, #7
   1d6a4:	bx	lr
   1d6a8:	mov	r0, #17
   1d6ac:	bx	lr
   1d6b0:	mov	r0, #8
   1d6b4:	bx	lr

0001d6b8 <flatcc_verify_error_string@@Base>:
   1d6b8:	cmp	r0, #36	; 0x24
   1d6bc:	ldrls	r3, [pc, #8]	; 1d6cc <flatcc_verify_error_string@@Base+0x14>
   1d6c0:	ldrls	r0, [r3, r0, lsl #2]
   1d6c4:	ldrhi	r0, [pc, #4]	; 1d6d0 <flatcc_verify_error_string@@Base+0x18>
   1d6c8:	bx	lr
   1d6cc:	strdeq	r1, [r2], -ip
   1d6d0:	muleq	r2, r0, lr

0001d6d4 <flatcc_verify_field@@Base>:
   1d6d4:	push	{r4, r5, r6, lr}
   1d6d8:	mov	r5, r0
   1d6dc:	mov	r4, r3
   1d6e0:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1d6e4:	uxth	r1, r0
   1d6e8:	cmp	r1, #0
   1d6ec:	beq	1d724 <flatcc_verify_field@@Base+0x50>
   1d6f0:	ldrh	r3, [r5, #20]
   1d6f4:	add	r2, r2, r1
   1d6f8:	cmp	r2, r3
   1d6fc:	bhi	1d72c <flatcc_verify_field@@Base+0x58>
   1d700:	ldr	r0, [r5]
   1d704:	sub	r4, r4, #1
   1d708:	ldr	r3, [r5, #16]
   1d70c:	add	r0, r0, r3
   1d710:	add	r0, r0, r1
   1d714:	tst	r0, r4
   1d718:	moveq	r0, #0
   1d71c:	movne	r0, #12
   1d720:	pop	{r4, r5, r6, pc}
   1d724:	mov	r0, r1
   1d728:	pop	{r4, r5, r6, pc}
   1d72c:	mov	r0, #13
   1d730:	pop	{r4, r5, r6, pc}

0001d734 <flatcc_verify_string_field@@Base>:
   1d734:	push	{r0, r1, r4, lr}
   1d738:	add	r3, sp, #4
   1d73c:	mov	r4, r0
   1d740:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1d744:	cmp	r0, #0
   1d748:	bne	1d764 <flatcc_verify_string_field@@Base+0x30>
   1d74c:	ldr	r2, [sp, #4]
   1d750:	cmp	r2, #0
   1d754:	beq	1d764 <flatcc_verify_string_field@@Base+0x30>
   1d758:	ldrd	r0, [r4]
   1d75c:	ldr	r3, [r0, r2]
   1d760:	bl	1d65c <flatcc_emitter_copy_buffer@@Base+0x304>
   1d764:	add	sp, sp, #8
   1d768:	pop	{r4, pc}

0001d76c <flatcc_verify_vector_field@@Base>:
   1d76c:	push	{r4, r5, lr}
   1d770:	sub	sp, sp, #28
   1d774:	mov	r5, r3
   1d778:	add	r3, sp, #20
   1d77c:	mov	r4, r0
   1d780:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1d784:	cmp	r0, #0
   1d788:	bne	1d7b8 <flatcc_verify_vector_field@@Base+0x4c>
   1d78c:	ldr	r2, [sp, #20]
   1d790:	cmp	r2, #0
   1d794:	beq	1d7b8 <flatcc_verify_vector_field@@Base+0x4c>
   1d798:	ldr	r3, [sp, #44]	; 0x2c
   1d79c:	ldrd	r0, [r4]
   1d7a0:	str	r5, [sp]
   1d7a4:	str	r3, [sp, #8]
   1d7a8:	ldrh	r3, [sp, #40]	; 0x28
   1d7ac:	str	r3, [sp, #4]
   1d7b0:	ldr	r3, [r0, r2]
   1d7b4:	bl	1d50c <flatcc_emitter_copy_buffer@@Base+0x1b4>
   1d7b8:	add	sp, sp, #28
   1d7bc:	pop	{r4, r5, pc}

0001d7c0 <flatcc_verify_string_vector_field@@Base>:
   1d7c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d7c4:	sub	sp, sp, #28
   1d7c8:	mov	r7, r0
   1d7cc:	add	r3, sp, #20
   1d7d0:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1d7d4:	subs	r6, r0, #0
   1d7d8:	bne	1d838 <flatcc_verify_string_vector_field@@Base+0x78>
   1d7dc:	ldr	r4, [sp, #20]
   1d7e0:	cmp	r4, #0
   1d7e4:	beq	1d838 <flatcc_verify_string_vector_field@@Base+0x78>
   1d7e8:	ldm	r7, {r5, r8}
   1d7ec:	mvn	r3, #-1073741824	; 0xc0000000
   1d7f0:	mov	r2, r4
   1d7f4:	ldr	r7, [r5, r4]
   1d7f8:	mov	r1, r8
   1d7fc:	mov	r0, r5
   1d800:	str	r3, [sp, #8]
   1d804:	mov	r3, #4
   1d808:	str	r3, [sp]
   1d80c:	str	r3, [sp, #4]
   1d810:	mov	r3, r7
   1d814:	bl	1d50c <flatcc_emitter_copy_buffer@@Base+0x1b4>
   1d818:	subs	r6, r0, #0
   1d81c:	bne	1d838 <flatcc_verify_string_vector_field@@Base+0x78>
   1d820:	add	r4, r4, r7
   1d824:	mov	r7, r6
   1d828:	ldr	r9, [r5, r4]
   1d82c:	add	r4, r4, #4
   1d830:	cmp	r9, r7
   1d834:	bne	1d844 <flatcc_verify_string_vector_field@@Base+0x84>
   1d838:	mov	r0, r6
   1d83c:	add	sp, sp, #28
   1d840:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d844:	mov	r2, r4
   1d848:	mov	r1, r8
   1d84c:	ldr	r3, [r5, r4]
   1d850:	mov	r0, r5
   1d854:	bl	1d65c <flatcc_emitter_copy_buffer@@Base+0x304>
   1d858:	cmp	r0, #0
   1d85c:	addeq	r7, r7, #1
   1d860:	addeq	r4, r4, #4
   1d864:	beq	1d830 <flatcc_verify_string_vector_field@@Base+0x70>
   1d868:	mov	r6, r0
   1d86c:	b	1d838 <flatcc_verify_string_vector_field@@Base+0x78>

0001d870 <flatcc_verify_table_field@@Base>:
   1d870:	push	{r4, r5, lr}
   1d874:	sub	sp, sp, #20
   1d878:	mov	r5, r3
   1d87c:	add	r3, sp, #12
   1d880:	mov	r4, r0
   1d884:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1d888:	cmp	r0, #0
   1d88c:	bne	1d8b0 <flatcc_verify_table_field@@Base+0x40>
   1d890:	ldr	r2, [sp, #12]
   1d894:	cmp	r2, #0
   1d898:	beq	1d8b0 <flatcc_verify_table_field@@Base+0x40>
   1d89c:	ldrd	r0, [r4]
   1d8a0:	ldr	r3, [r4, #8]
   1d8a4:	stm	sp, {r3, r5}
   1d8a8:	ldr	r3, [r0, r2]
   1d8ac:	bl	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1d8b0:	add	sp, sp, #20
   1d8b4:	pop	{r4, r5, pc}

0001d8b8 <flatcc_verify_table_vector_field@@Base>:
   1d8b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8bc:	sub	sp, sp, #36	; 0x24
   1d8c0:	mov	sl, r3
   1d8c4:	add	r3, sp, #28
   1d8c8:	mov	r7, r0
   1d8cc:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1d8d0:	subs	r6, r0, #0
   1d8d4:	bne	1d950 <flatcc_verify_table_vector_field@@Base+0x98>
   1d8d8:	ldr	r4, [sp, #28]
   1d8dc:	cmp	r4, #0
   1d8e0:	beq	1d950 <flatcc_verify_table_vector_field@@Base+0x98>
   1d8e4:	ldm	r7, {r5, r9}
   1d8e8:	ldr	r7, [r7, #8]
   1d8ec:	ldr	r8, [r5, r4]
   1d8f0:	cmp	r7, #0
   1d8f4:	movle	r6, #3
   1d8f8:	ble	1d950 <flatcc_verify_table_vector_field@@Base+0x98>
   1d8fc:	mvn	r3, #-1073741824	; 0xc0000000
   1d900:	mov	r2, r4
   1d904:	mov	r1, r9
   1d908:	mov	r0, r5
   1d90c:	str	r3, [sp, #8]
   1d910:	mov	r3, #4
   1d914:	str	r3, [sp]
   1d918:	str	r3, [sp, #4]
   1d91c:	mov	r3, r8
   1d920:	bl	1d50c <flatcc_emitter_copy_buffer@@Base+0x1b4>
   1d924:	cmp	r0, #0
   1d928:	bne	1d998 <flatcc_verify_table_vector_field@@Base+0xe0>
   1d92c:	add	r4, r4, r8
   1d930:	sub	r7, r7, #1
   1d934:	ldr	r3, [r5, r4]
   1d938:	mov	r8, r6
   1d93c:	add	r4, r4, #4
   1d940:	str	r3, [sp, #20]
   1d944:	ldr	r3, [sp, #20]
   1d948:	cmp	r3, r8
   1d94c:	bne	1d95c <flatcc_verify_table_vector_field@@Base+0xa4>
   1d950:	mov	r0, r6
   1d954:	add	sp, sp, #36	; 0x24
   1d958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d95c:	mov	r2, r4
   1d960:	mov	r1, r9
   1d964:	stm	sp, {r7, sl}
   1d968:	mov	r0, r5
   1d96c:	ldr	r3, [r5, r4]
   1d970:	add	fp, r5, r4
   1d974:	bl	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1d978:	cmp	r0, #0
   1d97c:	beq	1d9a0 <flatcc_verify_table_vector_field@@Base+0xe8>
   1d980:	mov	r2, r4
   1d984:	mov	r1, r9
   1d988:	stm	sp, {r7, sl}
   1d98c:	mov	r0, r5
   1d990:	ldr	r3, [fp]
   1d994:	bl	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1d998:	mov	r6, r0
   1d99c:	b	1d950 <flatcc_verify_table_vector_field@@Base+0x98>
   1d9a0:	add	r8, r8, #1
   1d9a4:	add	r4, r4, #4
   1d9a8:	b	1d944 <flatcc_verify_table_vector_field@@Base+0x8c>

0001d9ac <flatcc_verify_union_table@@Base>:
   1d9ac:	push	{r0, r1, r2, lr}
   1d9b0:	str	r1, [sp, #4]
   1d9b4:	ldr	r3, [r0, #8]
   1d9b8:	str	r3, [sp]
   1d9bc:	ldr	r1, [r0, #4]
   1d9c0:	ldrd	r2, [r0, #16]
   1d9c4:	ldr	r0, [r0]
   1d9c8:	bl	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1d9cc:	add	sp, sp, #12
   1d9d0:	pop	{pc}		; (ldr pc, [sp], #4)

0001d9d4 <flatcc_verify_union_struct@@Base>:
   1d9d4:	push	{r0, r1, r2, lr}
   1d9d8:	mov	r3, r1
   1d9dc:	str	r2, [sp]
   1d9e0:	ldr	r1, [r0, #16]
   1d9e4:	ldr	r2, [r0, #20]
   1d9e8:	ldr	r0, [r0, #4]
   1d9ec:	bl	1d408 <flatcc_emitter_copy_buffer@@Base+0xb0>
   1d9f0:	add	sp, sp, #12
   1d9f4:	pop	{pc}		; (ldr pc, [sp], #4)

0001d9f8 <flatcc_verify_union_string@@Base>:
   1d9f8:	ldr	r1, [r0, #4]
   1d9fc:	ldrd	r2, [r0, #16]
   1da00:	ldr	r0, [r0]
   1da04:	b	1d65c <flatcc_emitter_copy_buffer@@Base+0x304>

0001da08 <flatcc_verify_buffer_header@@Base>:
   1da08:	tst	r0, #3
   1da0c:	push	{r0, r1, r4, lr}
   1da10:	movne	r0, #5
   1da14:	bne	1da3c <flatcc_verify_buffer_header@@Base+0x34>
   1da18:	cmn	r1, #9
   1da1c:	movhi	r0, #6
   1da20:	bhi	1da3c <flatcc_verify_buffer_header@@Base+0x34>
   1da24:	cmp	r1, #7
   1da28:	movls	r0, #1
   1da2c:	bls	1da3c <flatcc_verify_buffer_header@@Base+0x34>
   1da30:	cmp	r2, #0
   1da34:	bne	1da44 <flatcc_verify_buffer_header@@Base+0x3c>
   1da38:	mov	r0, #0
   1da3c:	add	sp, sp, #8
   1da40:	pop	{r4, pc}
   1da44:	mov	r1, r2
   1da48:	mov	r2, #4
   1da4c:	mov	r4, r0
   1da50:	add	r0, sp, r2
   1da54:	bl	12a18 <strncpy@plt>
   1da58:	ldr	r2, [r4, #4]
   1da5c:	ldr	r3, [sp, #4]
   1da60:	cmp	r3, #0
   1da64:	cmpne	r2, r3
   1da68:	movne	r0, #2
   1da6c:	beq	1da38 <flatcc_verify_buffer_header@@Base+0x30>
   1da70:	b	1da3c <flatcc_verify_buffer_header@@Base+0x34>

0001da74 <flatcc_verify_typed_buffer_header@@Base>:
   1da74:	tst	r0, #3
   1da78:	bne	1daa8 <flatcc_verify_typed_buffer_header@@Base+0x34>
   1da7c:	cmn	r1, #9
   1da80:	bhi	1dab0 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   1da84:	cmp	r1, #7
   1da88:	bls	1dab8 <flatcc_verify_typed_buffer_header@@Base+0x44>
   1da8c:	cmp	r2, #0
   1da90:	beq	1dac0 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   1da94:	ldr	r0, [r0, #4]
   1da98:	cmp	r2, r0
   1da9c:	movne	r0, #2
   1daa0:	moveq	r0, #0
   1daa4:	bx	lr
   1daa8:	mov	r0, #5
   1daac:	bx	lr
   1dab0:	mov	r0, #6
   1dab4:	bx	lr
   1dab8:	mov	r0, #1
   1dabc:	bx	lr
   1dac0:	mov	r0, r2
   1dac4:	bx	lr

0001dac8 <flatcc_verify_struct_as_root@@Base>:
   1dac8:	push	{r4, r5, r6, r7, r8, lr}
   1dacc:	mov	r4, r1
   1dad0:	mov	r5, r0
   1dad4:	mov	r8, r2
   1dad8:	mov	r6, r3
   1dadc:	ldrh	r7, [sp, #24]
   1dae0:	bl	1da08 <flatcc_verify_buffer_header@@Base>
   1dae4:	subs	r1, r0, #0
   1dae8:	beq	1db00 <flatcc_verify_struct_as_root@@Base+0x38>
   1daec:	mov	r2, r8
   1daf0:	mov	r1, r4
   1daf4:	mov	r0, r5
   1daf8:	pop	{r4, r5, r6, r7, r8, lr}
   1dafc:	b	1da08 <flatcc_verify_buffer_header@@Base>
   1db00:	mov	r3, r6
   1db04:	mov	r0, r4
   1db08:	ldr	r2, [r5]
   1db0c:	str	r7, [sp, #24]
   1db10:	pop	{r4, r5, r6, r7, r8, lr}
   1db14:	b	1d408 <flatcc_emitter_copy_buffer@@Base+0xb0>

0001db18 <flatcc_verify_struct_as_typed_root@@Base>:
   1db18:	push	{r4, r5, r6, lr}
   1db1c:	mov	r4, r1
   1db20:	mov	r5, r0
   1db24:	bl	1da74 <flatcc_verify_typed_buffer_header@@Base>
   1db28:	subs	r1, r0, #0
   1db2c:	ldrh	r6, [sp, #16]
   1db30:	popne	{r4, r5, r6, pc}
   1db34:	mov	r0, r4
   1db38:	ldr	r2, [r5]
   1db3c:	str	r6, [sp, #16]
   1db40:	pop	{r4, r5, r6, lr}
   1db44:	b	1d408 <flatcc_emitter_copy_buffer@@Base+0xb0>

0001db48 <flatcc_verify_table_as_root@@Base>:
   1db48:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1db4c:	mov	r7, r2
   1db50:	mov	r4, r0
   1db54:	mov	r5, r1
   1db58:	mov	r6, r3
   1db5c:	bl	1da08 <flatcc_verify_buffer_header@@Base>
   1db60:	subs	r2, r0, #0
   1db64:	beq	1db80 <flatcc_verify_table_as_root@@Base+0x38>
   1db68:	mov	r2, r7
   1db6c:	mov	r1, r5
   1db70:	mov	r0, r4
   1db74:	add	sp, sp, #12
   1db78:	pop	{r4, r5, r6, r7, lr}
   1db7c:	b	1da08 <flatcc_verify_buffer_header@@Base>
   1db80:	mov	r3, #100	; 0x64
   1db84:	mov	r1, r5
   1db88:	mov	r0, r4
   1db8c:	stm	sp, {r3, r6}
   1db90:	ldr	r3, [r4]
   1db94:	bl	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1db98:	add	sp, sp, #12
   1db9c:	pop	{r4, r5, r6, r7, pc}

0001dba0 <flatcc_verify_table_as_typed_root@@Base>:
   1dba0:	push	{r0, r1, r2, r4, r5, lr}
   1dba4:	mov	r4, r0
   1dba8:	bl	1da74 <flatcc_verify_typed_buffer_header@@Base>
   1dbac:	cmp	r0, #0
   1dbb0:	bne	1dbd0 <flatcc_verify_table_as_typed_root@@Base+0x30>
   1dbb4:	str	r3, [sp, #4]
   1dbb8:	mov	r3, #100	; 0x64
   1dbbc:	mov	r2, r0
   1dbc0:	mov	r0, r4
   1dbc4:	str	r3, [sp]
   1dbc8:	ldr	r3, [r4]
   1dbcc:	bl	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1dbd0:	add	sp, sp, #12
   1dbd4:	pop	{r4, r5, pc}

0001dbd8 <flatcc_verify_struct_as_nested_root@@Base>:
   1dbd8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbdc:	mvn	sl, #0
   1dbe0:	mov	r7, #1
   1dbe4:	mov	r8, r3
   1dbe8:	mov	r5, r0
   1dbec:	mov	r6, r1
   1dbf0:	mov	fp, r2
   1dbf4:	ldrh	r4, [sp, #52]	; 0x34
   1dbf8:	stm	sp, {r7, sl}
   1dbfc:	ldr	r9, [sp, #48]	; 0x30
   1dc00:	mov	r3, r4
   1dc04:	bl	1d76c <flatcc_verify_vector_field@@Base>
   1dc08:	cmp	r0, #0
   1dc0c:	beq	1dc34 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   1dc10:	mov	r3, r4
   1dc14:	mov	r2, fp
   1dc18:	str	r7, [sp, #48]	; 0x30
   1dc1c:	mov	r1, r6
   1dc20:	mov	r0, r5
   1dc24:	str	sl, [sp, #52]	; 0x34
   1dc28:	add	sp, sp, #12
   1dc2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc30:	b	1d76c <flatcc_verify_vector_field@@Base>
   1dc34:	mov	r1, r6
   1dc38:	mov	r0, r5
   1dc3c:	bl	1d480 <flatcc_emitter_copy_buffer@@Base+0x128>
   1dc40:	subs	r1, r0, #0
   1dc44:	beq	1dc70 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   1dc48:	ldr	ip, [r1]
   1dc4c:	mov	r3, r9
   1dc50:	mov	r2, r8
   1dc54:	str	r4, [sp, #48]	; 0x30
   1dc58:	add	r0, r1, ip
   1dc5c:	ldr	r1, [r1, ip]
   1dc60:	add	r0, r0, #4
   1dc64:	add	sp, sp, #12
   1dc68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc6c:	b	1dac8 <flatcc_verify_struct_as_root@@Base>
   1dc70:	add	sp, sp, #12
   1dc74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dc78 <flatcc_verify_table_as_nested_root@@Base>:
   1dc78:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc7c:	mvn	sl, #0
   1dc80:	mov	r7, #1
   1dc84:	mov	r8, r3
   1dc88:	mov	r6, r0
   1dc8c:	mov	r4, r1
   1dc90:	mov	fp, r2
   1dc94:	ldrh	r5, [sp, #48]	; 0x30
   1dc98:	stm	sp, {r7, sl}
   1dc9c:	ldr	r9, [sp, #52]	; 0x34
   1dca0:	mov	r3, r5
   1dca4:	bl	1d76c <flatcc_verify_vector_field@@Base>
   1dca8:	cmp	r0, #0
   1dcac:	beq	1dcd4 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   1dcb0:	mov	r3, r5
   1dcb4:	mov	r2, fp
   1dcb8:	str	r7, [sp, #48]	; 0x30
   1dcbc:	mov	r1, r4
   1dcc0:	mov	r0, r6
   1dcc4:	str	sl, [sp, #52]	; 0x34
   1dcc8:	add	sp, sp, #12
   1dccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcd0:	b	1d76c <flatcc_verify_vector_field@@Base>
   1dcd4:	mov	r1, r4
   1dcd8:	mov	r0, r6
   1dcdc:	bl	1d480 <flatcc_emitter_copy_buffer@@Base+0x128>
   1dce0:	subs	r3, r0, #0
   1dce4:	beq	1dd4c <flatcc_verify_table_as_nested_root@@Base+0xd4>
   1dce8:	ldr	r2, [r3]
   1dcec:	ldr	r5, [r3, r2]
   1dcf0:	add	r7, r3, r2
   1dcf4:	mov	r2, r8
   1dcf8:	add	r4, r7, #4
   1dcfc:	mov	r0, r4
   1dd00:	mov	r1, r5
   1dd04:	bl	1da08 <flatcc_verify_buffer_header@@Base>
   1dd08:	subs	r2, r0, #0
   1dd0c:	beq	1dd28 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1dd10:	mov	r2, r8
   1dd14:	mov	r1, r5
   1dd18:	mov	r0, r4
   1dd1c:	add	sp, sp, #12
   1dd20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd24:	b	1da08 <flatcc_verify_buffer_header@@Base>
   1dd28:	ldr	r3, [r6, #8]
   1dd2c:	mov	r1, r5
   1dd30:	mov	r0, r4
   1dd34:	str	r3, [sp, #48]	; 0x30
   1dd38:	str	r9, [sp, #52]	; 0x34
   1dd3c:	ldr	r3, [r7, #4]
   1dd40:	add	sp, sp, #12
   1dd44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd48:	b	1d57c <flatcc_emitter_copy_buffer@@Base+0x224>
   1dd4c:	add	sp, sp, #12
   1dd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dd54 <flatcc_verify_union_field@@Base>:
   1dd54:	push	{r4, r5, r6, r7, r8, lr}
   1dd58:	mov	r6, r1
   1dd5c:	sub	r1, r1, #1
   1dd60:	sub	sp, sp, #32
   1dd64:	uxth	r1, r1
   1dd68:	mov	r7, r3
   1dd6c:	mov	r4, r0
   1dd70:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1dd74:	uxth	r3, r0
   1dd78:	cmp	r3, #0
   1dd7c:	bne	1ddb4 <flatcc_verify_union_field@@Base+0x60>
   1dd80:	mov	r1, r6
   1dd84:	mov	r0, r4
   1dd88:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1dd8c:	uxth	r0, r0
   1dd90:	cmp	r0, #0
   1dd94:	movne	r0, #23
   1dd98:	bne	1ddac <flatcc_verify_union_field@@Base+0x58>
   1dd9c:	cmp	r2, #0
   1dda0:	movne	r0, #21
   1dda4:	bne	1ddac <flatcc_verify_union_field@@Base+0x58>
   1dda8:	mov	r0, #0
   1ddac:	add	sp, sp, #32
   1ddb0:	pop	{r4, r5, r6, r7, r8, pc}
   1ddb4:	ldrh	r3, [r4, #20]
   1ddb8:	uxth	r5, r0
   1ddbc:	add	r1, r5, #1
   1ddc0:	cmp	r1, r3
   1ddc4:	movhi	r0, #13
   1ddc8:	bhi	1ddac <flatcc_verify_union_field@@Base+0x58>
   1ddcc:	ldr	r8, [r4]
   1ddd0:	ldr	r0, [r4, #16]
   1ddd4:	add	r5, r5, r0
   1ddd8:	ldrb	r3, [r8, r5]
   1dddc:	cmp	r3, #0
   1dde0:	bne	1de04 <flatcc_verify_union_field@@Base+0xb0>
   1dde4:	mov	r1, r6
   1dde8:	mov	r0, r4
   1ddec:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1ddf0:	uxth	r0, r0
   1ddf4:	cmp	r0, #0
   1ddf8:	movne	r0, #24
   1ddfc:	beq	1dda8 <flatcc_verify_union_field@@Base+0x54>
   1de00:	b	1ddac <flatcc_verify_union_field@@Base+0x58>
   1de04:	add	r3, sp, #4
   1de08:	mov	r1, r6
   1de0c:	mov	r0, r4
   1de10:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1de14:	cmp	r0, #0
   1de18:	bne	1ddac <flatcc_verify_union_field@@Base+0x58>
   1de1c:	ldr	r3, [sp, #4]
   1de20:	cmp	r3, #0
   1de24:	beq	1dda8 <flatcc_verify_union_field@@Base+0x54>
   1de28:	ldr	r2, [r4]
   1de2c:	add	r0, sp, #8
   1de30:	ldr	r1, [r4, #4]
   1de34:	str	r3, [sp, #24]
   1de38:	str	r2, [sp, #8]
   1de3c:	str	r1, [sp, #12]
   1de40:	ldr	r1, [r4, #8]
   1de44:	str	r1, [sp, #16]
   1de48:	ldr	r3, [r2, r3]
   1de4c:	str	r3, [sp, #28]
   1de50:	ldrb	r3, [r8, r5]
   1de54:	strb	r3, [sp, #20]
   1de58:	blx	r7
   1de5c:	b	1ddac <flatcc_verify_union_field@@Base+0x58>

0001de60 <flatcc_verify_union_vector_field@@Base>:
   1de60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de64:	sub	r4, r1, #1
   1de68:	sub	sp, sp, #60	; 0x3c
   1de6c:	uxth	r4, r4
   1de70:	mov	sl, r1
   1de74:	mov	r1, r4
   1de78:	mov	r8, r0
   1de7c:	mov	r6, r2
   1de80:	mov	r9, r3
   1de84:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1de88:	uxth	r0, r0
   1de8c:	cmp	r0, #0
   1de90:	bne	1dec0 <flatcc_verify_union_vector_field@@Base+0x60>
   1de94:	mov	r1, sl
   1de98:	mov	r0, r8
   1de9c:	bl	1d45c <flatcc_emitter_copy_buffer@@Base+0x104>
   1dea0:	adds	r3, r2, #0
   1dea4:	uxth	r0, r0
   1dea8:	movne	r3, #1
   1deac:	cmp	r0, #0
   1deb0:	movne	r3, #0
   1deb4:	cmp	r3, #0
   1deb8:	movne	r3, #22
   1debc:	bne	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1dec0:	mov	r5, #1
   1dec4:	mvn	r7, #0
   1dec8:	mov	r3, r5
   1decc:	mov	r2, r6
   1ded0:	mov	r1, r4
   1ded4:	mov	r0, r8
   1ded8:	stm	sp, {r5, r7}
   1dedc:	bl	1d76c <flatcc_verify_vector_field@@Base>
   1dee0:	cmp	r0, #0
   1dee4:	beq	1df08 <flatcc_verify_union_vector_field@@Base+0xa8>
   1dee8:	mov	r3, r5
   1deec:	mov	r2, r6
   1def0:	stm	sp, {r5, r7}
   1def4:	mov	r1, r4
   1def8:	mov	r0, r8
   1defc:	bl	1d76c <flatcc_verify_vector_field@@Base>
   1df00:	mov	r3, r0
   1df04:	b	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1df08:	mov	r1, r4
   1df0c:	mov	r0, r8
   1df10:	bl	1d480 <flatcc_emitter_copy_buffer@@Base+0x128>
   1df14:	cmp	r0, #0
   1df18:	bne	1df2c <flatcc_verify_union_vector_field@@Base+0xcc>
   1df1c:	mov	r3, #0
   1df20:	mov	r0, r3
   1df24:	add	sp, sp, #60	; 0x3c
   1df28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df2c:	ldr	r3, [r0]
   1df30:	mov	r2, r6
   1df34:	mov	r1, sl
   1df38:	add	r5, r0, r3
   1df3c:	ldr	r7, [r0, r3]
   1df40:	add	r3, sp, #28
   1df44:	mov	r0, r8
   1df48:	bl	1d4ac <flatcc_emitter_copy_buffer@@Base+0x154>
   1df4c:	subs	r3, r0, #0
   1df50:	bne	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1df54:	ldr	r4, [sp, #28]
   1df58:	cmp	r4, #0
   1df5c:	beq	1df1c <flatcc_verify_union_vector_field@@Base+0xbc>
   1df60:	ldm	r8, {r6, sl}
   1df64:	ldr	r8, [r8, #8]
   1df68:	ldr	fp, [r6, r4]
   1df6c:	cmp	r8, #0
   1df70:	movle	r3, #3
   1df74:	ble	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1df78:	mvn	r3, #-1073741824	; 0xc0000000
   1df7c:	mov	r2, r4
   1df80:	mov	r1, sl
   1df84:	mov	r0, r6
   1df88:	str	r3, [sp, #8]
   1df8c:	mov	r3, #4
   1df90:	str	r3, [sp]
   1df94:	str	r3, [sp, #4]
   1df98:	mov	r3, fp
   1df9c:	bl	1d50c <flatcc_emitter_copy_buffer@@Base+0x1b4>
   1dfa0:	subs	r3, r0, #0
   1dfa4:	bne	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1dfa8:	add	r4, r4, fp
   1dfac:	ldr	r2, [r6, r4]
   1dfb0:	cmp	r7, r2
   1dfb4:	movne	r3, #34	; 0x22
   1dfb8:	bne	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1dfbc:	sub	r8, r8, #1
   1dfc0:	add	r4, r4, #4
   1dfc4:	str	r6, [sp, #32]
   1dfc8:	add	r7, r5, r7
   1dfcc:	str	sl, [sp, #36]	; 0x24
   1dfd0:	str	r8, [sp, #40]	; 0x28
   1dfd4:	cmp	r7, r5
   1dfd8:	beq	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1dfdc:	ldr	r1, [r6, r4]
   1dfe0:	ldrb	r2, [r5, #4]
   1dfe4:	cmp	r1, #0
   1dfe8:	bne	1dffc <flatcc_verify_union_vector_field@@Base+0x19c>
   1dfec:	cmp	r2, #0
   1dff0:	beq	1e034 <flatcc_verify_union_vector_field@@Base+0x1d4>
   1dff4:	mov	r3, #32
   1dff8:	b	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>
   1dffc:	cmp	r2, #0
   1e000:	str	r3, [sp, #20]
   1e004:	beq	1e040 <flatcc_verify_union_vector_field@@Base+0x1e0>
   1e008:	add	r0, sp, #32
   1e00c:	strb	r2, [sp, #44]	; 0x2c
   1e010:	str	r4, [sp, #48]	; 0x30
   1e014:	str	r1, [sp, #52]	; 0x34
   1e018:	blx	r9
   1e01c:	cmp	r0, #0
   1e020:	ldr	r3, [sp, #20]
   1e024:	beq	1e034 <flatcc_verify_union_vector_field@@Base+0x1d4>
   1e028:	add	r0, sp, #32
   1e02c:	blx	r9
   1e030:	b	1df00 <flatcc_verify_union_vector_field@@Base+0xa0>
   1e034:	add	r4, r4, #4
   1e038:	add	r5, r5, #1
   1e03c:	b	1dfd4 <flatcc_verify_union_vector_field@@Base+0x174>
   1e040:	mov	r3, #33	; 0x21
   1e044:	b	1df20 <flatcc_verify_union_vector_field@@Base+0xc0>

0001e048 <__libc_csu_init@@Base>:
   1e048:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e04c:	mov	r7, r0
   1e050:	ldr	r6, [pc, #72]	; 1e0a0 <__libc_csu_init@@Base+0x58>
   1e054:	ldr	r5, [pc, #72]	; 1e0a4 <__libc_csu_init@@Base+0x5c>
   1e058:	add	r6, pc, r6
   1e05c:	add	r5, pc, r5
   1e060:	sub	r6, r6, r5
   1e064:	mov	r8, r1
   1e068:	mov	r9, r2
   1e06c:	bl	12944 <strcmp@plt-0x20>
   1e070:	asrs	r6, r6, #2
   1e074:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e078:	mov	r4, #0
   1e07c:	add	r4, r4, #1
   1e080:	ldr	r3, [r5], #4
   1e084:	mov	r2, r9
   1e088:	mov	r1, r8
   1e08c:	mov	r0, r7
   1e090:	blx	r3
   1e094:	cmp	r6, r4
   1e098:	bne	1e07c <__libc_csu_init@@Base+0x34>
   1e09c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0a0:			; <UNDEFINED> instruction: 0x00014eb4
   1e0a4:	andeq	r4, r1, ip, lsr #29

0001e0a8 <__libc_csu_fini@@Base>:
   1e0a8:	bx	lr

Disassembly of section .fini:

0001e0ac <.fini>:
   1e0ac:	push	{r3, lr}
   1e0b0:	pop	{r3, pc}
